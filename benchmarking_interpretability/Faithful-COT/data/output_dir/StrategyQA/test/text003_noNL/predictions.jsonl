{"id": 0, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"college commencements\", \"December\").\nHappens_in_time(\"college commencements\", \"May\").\nHappens_in_time(\"college commencements\", \"June\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), Happens_in_time(\"college commencements\", month), In_season(month, season).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"college commencements\", \"December\").\nHappens_in_time(\"college commencements\", \"May\").\nHappens_in_time(\"college commencements\", \"June\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), Happens_in_time(\"college commencements\", month), In_season(month, season).\n.output Answer"]}
{"id": 1, "answer": false, "completion": ".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"hydrogen\", 1).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"hydrogen\", atomic_number), Has_n_members(\"Spice Girls\", n_members), atomic_number^2 > n_members.\n.output Answer", "completions": [".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"hydrogen\", 1).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"hydrogen\", atomic_number), Has_n_members(\"Spice Girls\", n_members), atomic_number^2 > n_members.\n.output Answer"]}
{"id": 2, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"pear\", 0.6).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"pear\", density1), Has_density(\"water\", density2), density1 < density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"pear\", 0.6).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"pear\", density1), Has_density(\"water\", density2), density1 < density2.\n.output Answer"]}
{"id": 3, "answer": true, "completion": "// Answer: Yes", "completions": ["// Answer: Yes"]}
{"id": 4, "answer": true, "completion": ".decl Requires(Activity:symbol, Limb:symbol)\nRequires(\"jujutsu\", \"arms\").\nRequires(\"jujutsu\", \"legs\").\n.decl Answer()\nAnswer() :- Requires(\"jujutsu\", limb1), Requires(\"jujutsu\", limb2), limb1 != limb2.\n.output Answer", "completions": [".decl Requires(Activity:symbol, Limb:symbol)\nRequires(\"jujutsu\", \"arms\").\nRequires(\"jujutsu\", \"legs\").\n.decl Answer()\nAnswer() :- Requires(\"jujutsu\", limb1), Requires(\"jujutsu\", limb2), limb1 != limb2.\n.output Answer"]}
{"id": 5, "answer": true, "completion": ".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"War in Vietnam\", 6).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"llama birth\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"llama birth\", n_months1), Last_n_months(\"War in Vietnam\", n_months2),  n_months1 <= n_months2.\n.output Answer", "completions": [".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"War in Vietnam\", 6).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"llama birth\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"llama birth\", n_months1), Last_n_months(\"War in Vietnam\", n_months2),  n_months1 <= n_months2.\n.output Answer"]}
{"id": 6, "answer": true, "completion": ".decl Makes_money_from(Person:symbol, Product:symbol)\n.decl Answer()\nAnswer() :- !Makes_money_from(\"Linus Torvalds\", \"DirectX\").\n.output Answer", "completions": [".decl Makes_money_from(Person:symbol, Product:symbol)\n.decl Answer()\nAnswer() :- !Makes_money_from(\"Linus Torvalds\", \"DirectX\").\n.output Answer"]}
{"id": 7, "answer": true, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Brooke Shields\", \"Princeton University\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"Princeton University\", 1).\nRanks(\"University of Pennsylvania\", 7).\n.decl Answer()\nAnswer() :- Graduates(\"Brooke Shields\", \"University of Pennsylvania\").\nAnswer() :- Graduates(\"Brooke Shields\", university2), Ranks(university2, rank2), Ranks(\"University of Pennsylvania\", rank1), rank2 <= rank1.\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Brooke Shields\", \"Princeton University\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"Princeton University\", 1).\nRanks(\"University of Pennsylvania\", 7).\n.decl Answer()\nAnswer() :- Graduates(\"Brooke Shields\", \"University of Pennsylvania\").\nAnswer() :- Graduates(\"Brooke Shields\", university2), Ranks(university2, rank2), Ranks(\"University of Pennsylvania\", rank1), rank2 <= rank1.\n.output Answer"]}
{"id": 8, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"silverfish\", 0.2).\nHas_height(\"Empire State Building\", 381).\n.decl Answer()\nAnswer() :- Has_height(\"silverfish\", height1), Has_height(\"Empire State Building\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"silverfish\", 0.2).\nHas_height(\"Empire State Building\", 381).\n.decl Answer()\nAnswer() :- Has_height(\"silverfish\", height1), Has_height(\"Empire State Building\", height2), height1 < height2.\n.output Answer"]}
{"id": 9, "answer": true, "completion": ".decl Has_heard_of(Person:symbol, Event:symbol)\nHas_heard_of(\"Reddit users\", \"Pledge of Allegiance\").\n.decl Answer()\nAnswer() :- Has_heard_of(\"Reddit users\", \"Pledge of Allegiance\").\n.output Answer", "completions": [".decl Has_heard_of(Person:symbol, Event:symbol)\nHas_heard_of(\"Reddit users\", \"Pledge of Allegiance\").\n.decl Answer()\nAnswer() :- Has_heard_of(\"Reddit users\", \"Pledge of Allegiance\").\n.output Answer"]}
{"id": 10, "answer": true, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Rede Globo anchors\", \"Portuguese\").\n.decl Answer()\nAnswer() :- !Speaks_language(\"Rede Globo anchors\", \"Chinese\").\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Rede Globo anchors\", \"Portuguese\").\n.decl Answer()\nAnswer() :- !Speaks_language(\"Rede Globo anchors\", \"Chinese\").\n.output Answer"]}
{"id": 11, "answer": false, "completion": ".decl Can_be_stored(Object:symbol, Container:symbol)\nCan_be_stored(\"water\", \"bottle\").\nCan_be_stored(\"oil\", \"bottle\").\n.decl Answer()\nAnswer() :- !Can_be_stored(\"Reiki\", \"bottle\").\n.output Answer", "completions": [".decl Can_be_stored(Object:symbol, Container:symbol)\nCan_be_stored(\"water\", \"bottle\").\nCan_be_stored(\"oil\", \"bottle\").\n.decl Answer()\nAnswer() :- !Can_be_stored(\"Reiki\", \"bottle\").\n.output Answer"]}
{"id": 12, "answer": true, "completion": ".decl Experiences(Person:symbol, Emotion:symbol)\nExperiences(\"viewer\", \"adrenaline\").\n.decl Causes(Event:symbol, Emotion:symbol)\nCauses(\"Scary Movie\", \"adrenaline\").\n.decl Answer()\nAnswer() :- Experiences(person, \"adrenaline\"), Causes(\"Scary Movie\", emotion), emotion = \"adrenaline\".\n.output Answer", "completions": [".decl Experiences(Person:symbol, Emotion:symbol)\nExperiences(\"viewer\", \"adrenaline\").\n.decl Causes(Event:symbol, Emotion:symbol)\nCauses(\"Scary Movie\", \"adrenaline\").\n.decl Answer()\nAnswer() :- Experiences(person, \"adrenaline\"), Causes(\"Scary Movie\", emotion), emotion = \"adrenaline\".\n.output Answer"]}
{"id": 13, "answer": false, "completion": ".decl Has_power(Object:symbol, Power:float)\nHas_power(\"Gateway\", 10).\nHas_power(\"TARDIS machine\", 100).\n.decl Answer()\nAnswer() :- Has_power(\"Gateway\", power1), Has_power(\"TARDIS machine\", power2), power1 < power2.\n.output Answer", "completions": [".decl Has_power(Object:symbol, Power:float)\nHas_power(\"Gateway\", 10).\nHas_power(\"TARDIS machine\", 100).\n.decl Answer()\nAnswer() :- Has_power(\"Gateway\", power1), Has_power(\"TARDIS machine\", power2), power1 < power2.\n.output Answer"]}
{"id": 14, "answer": true, "completion": ".decl Contains(Product:symbol, Material:symbol)\nContains(\"petroleum-derived products\", \"material from aloe plant\").\n.decl Answer()\nAnswer() :- Contains(\"petroleum-derived products\", \"material from aloe plant\").\n.output Answer", "completions": [".decl Contains(Product:symbol, Material:symbol)\nContains(\"petroleum-derived products\", \"material from aloe plant\").\n.decl Answer()\nAnswer() :- Contains(\"petroleum-derived products\", \"material from aloe plant\").\n.output Answer"]}
{"id": 15, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"bee hummingbird\", 0.05).\nHas_mass(\"pea\", 0.1).\n.decl Answer()\nAnswer() :- Has_mass(\"bee hummingbird\", mass1), Has_mass(\"pea\", mass2), mass1 >= mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"bee hummingbird\", 0.05).\nHas_mass(\"pea\", 0.1).\n.decl Answer()\nAnswer() :- Has_mass(\"bee hummingbird\", mass1), Has_mass(\"pea\", mass2), mass1 >= mass2.\n.output Answer"]}
{"id": 16, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Spirit broadcast\", 2020).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Spirit broadcast\", 2020).\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Spirit broadcast\", 2020).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Spirit broadcast\", 2020).\n.output Answer"]}
{"id": 17, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Harry Potter and the Philosopher's Stone\", \"1991\").\nHappens_in_time(\"persecution of pagans\", \"Middle Ages\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Harry Potter and the Philosopher's Stone\", time1), Happens_in_time(\"persecution of pagans\", time2), time1 != time2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Harry Potter and the Philosopher's Stone\", \"1991\").\nHappens_in_time(\"persecution of pagans\", \"Middle Ages\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Harry Potter and the Philosopher's Stone\", time1), Happens_in_time(\"persecution of pagans\", time2), time1 != time2.\n.output Answer"]}
{"id": 18, "answer": true, "completion": ".decl Can_be_used_as(Object:symbol, Weapon:symbol)\nCan_be_used_as(\"music\", \"psychological weapon\").\n.decl Answer()\nAnswer() :- Can_be_used_as(\"music\", weapon), weapon != \"physical weapon\".\n.output Answer", "completions": [".decl Can_be_used_as(Object:symbol, Weapon:symbol)\nCan_be_used_as(\"music\", \"psychological weapon\").\n.decl Answer()\nAnswer() :- Can_be_used_as(\"music\", weapon), weapon != \"physical weapon\".\n.output Answer"]}
{"id": 19, "answer": false, "completion": ".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Asiana Airlines\", \"London\").\n.decl Has_destination(Person:symbol, Destination:symbol)\nHas_destination(\"Harry Potter\", \"London\").\n.decl Answer()\nAnswer() :- Flies_to(\"Asiana Airlines\", destination), Has_destination(\"Harry Potter\", destination).\n.output Answer", "completions": [".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Asiana Airlines\", \"London\").\n.decl Has_destination(Person:symbol, Destination:symbol)\nHas_destination(\"Harry Potter\", \"London\").\n.decl Answer()\nAnswer() :- Flies_to(\"Asiana Airlines\", destination), Has_destination(\"Harry Potter\", destination).\n.output Answer"]}
{"id": 20, "answer": true, "completion": ".decl Was_part_of(Event:symbol, Success:symbol)\nWas_part_of(\"Alexander the Great's success\", \"conquering of the Persian Empire\").\nWas_part_of(\"conquering of the Persian Empire\", \"conquering of the Indus Valley\").\nWas_part_of(\"conquering of the Indus Valley\", \"conquering of Karachi\").\n.decl Answer()\nAnswer() :- Was_part_of(\"Alexander the Great's success\", success1), Was_part_of(success1, success2), Was_part_of(success2, \"conquering of Karachi\").\n.output Answer", "completions": [".decl Was_part_of(Event:symbol, Success:symbol)\nWas_part_of(\"Alexander the Great's success\", \"conquering of the Persian Empire\").\nWas_part_of(\"conquering of the Persian Empire\", \"conquering of the Indus Valley\").\nWas_part_of(\"conquering of the Indus Valley\", \"conquering of Karachi\").\n.decl Answer()\nAnswer() :- Was_part_of(\"Alexander the Great's success\", success1), Was_part_of(success1, success2), Was_part_of(success2, \"conquering of Karachi\").\n.output Answer"]}
{"id": 21, "answer": true, "completion": ".decl Trained_by(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- !Trained_by(\"Jackson Pollock\", \"Leonardo da Vinci\").\n.output Answer", "completions": [".decl Trained_by(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- !Trained_by(\"Jackson Pollock\", \"Leonardo da Vinci\").\n.output Answer"]}
{"id": 22, "answer": false, "completion": ".decl Stimulates(Event:symbol, System:symbol)\nStimulates(\"The Exorcist\", \"visual system\").\n.decl Answer()\nAnswer() :- Stimulates(\"The Exorcist\", \"limbic system\").\n.output Answer", "completions": [".decl Stimulates(Event:symbol, System:symbol)\nStimulates(\"The Exorcist\", \"visual system\").\n.decl Answer()\nAnswer() :- Stimulates(\"The Exorcist\", \"limbic system\").\n.output Answer"]}
{"id": 23, "answer": false, "completion": ".decl Answer()\nAnswer() :- !Has_contributed(\"Alan Turing\", \"World War II\").\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !Has_contributed(\"Alan Turing\", \"World War II\").\n.output Answer"]}
{"id": 24, "answer": true, "completion": ".decl Uses(Person:symbol, Tool:symbol)\nUses(\"sophist\", \"dialectic\").\nUses(\"fencer\", \"épée\").\n.decl Answer()\nAnswer() :- Uses(\"sophist\", tool), Uses(\"fencer\", tool).\n.output Answer", "completions": [".decl Uses(Person:symbol, Tool:symbol)\nUses(\"sophist\", \"dialectic\").\nUses(\"fencer\", \"épée\").\n.decl Answer()\nAnswer() :- Uses(\"sophist\", tool), Uses(\"fencer\", tool).\n.output Answer"]}
{"id": 25, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Dale Jr hug his dad\", \"February\").\nHappens_in_time(\"last Daytona 500 together\", \"February\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Dale Jr hug his dad\", time1), Happens_in_time(\"last Daytona 500 together\", time2), time1 = time2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Dale Jr hug his dad\", \"February\").\nHappens_in_time(\"last Daytona 500 together\", \"February\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Dale Jr hug his dad\", time1), Happens_in_time(\"last Daytona 500 together\", time2), time1 = time2.\n.output Answer"]}
{"id": 26, "answer": true, "completion": ".decl Grows_in_climate(Plant:symbol, Climate:symbol)\nGrows_in_climate(\"citrus\", \"subtropical\").\n.decl Has_climate(City:symbol, Climate:symbol)\nHas_climate(\"Ulaanbaatar\", \"continental\").\n.decl Answer()\nAnswer() :- Grows_in_climate(\"citrus\", climate1), Has_climate(\"Ulaanbaatar\", climate2), climate1 != climate2.\n.output Answer", "completions": [".decl Grows_in_climate(Plant:symbol, Climate:symbol)\nGrows_in_climate(\"citrus\", \"subtropical\").\n.decl Has_climate(City:symbol, Climate:symbol)\nHas_climate(\"Ulaanbaatar\", \"continental\").\n.decl Answer()\nAnswer() :- Grows_in_climate(\"citrus\", climate1), Has_climate(\"Ulaanbaatar\", climate2), climate1 != climate2.\n.output Answer"]}
{"id": 27, "answer": true, "completion": ".decl Has_location(Harbor:symbol, Craton:symbol)\nHas_location(\"New York Harbor\", \"North American Craton\").\n.decl Has_volcanic_activity(Craton:symbol, Volcanic_activity:symbol)\nHas_volcanic_activity(\"North American Craton\", \"no\").\n.decl Answer()\nAnswer() :- Has_location(\"New York Harbor\", craton), Has_volcanic_activity(craton, \"no\").\n.output Answer", "completions": [".decl Has_location(Harbor:symbol, Craton:symbol)\nHas_location(\"New York Harbor\", \"North American Craton\").\n.decl Has_volcanic_activity(Craton:symbol, Volcanic_activity:symbol)\nHas_volcanic_activity(\"North American Craton\", \"no\").\n.decl Answer()\nAnswer() :- Has_location(\"New York Harbor\", craton), Has_volcanic_activity(craton, \"no\").\n.output Answer"]}
{"id": 28, "answer": false, "completion": ".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"Palace of Westminster\", \"clock\").\nHas_feature(\"clock\", \"tell time in the dark\").\n.decl Answer()\nAnswer() :- Has_feature(\"Palace of Westminster\", \"tell time in the dark\").\n.output Answer", "completions": [".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"Palace of Westminster\", \"clock\").\nHas_feature(\"clock\", \"tell time in the dark\").\n.decl Answer()\nAnswer() :- Has_feature(\"Palace of Westminster\", \"tell time in the dark\").\n.output Answer"]}
{"id": 29, "answer": true, "completion": ".decl Has_age_group(Medication:symbol, Age_group:symbol)\nHas_age_group(\"SSRI medications\", \"teenagers and young adults\").\nHas_age_group(\"SSRI medications\", \"adults\").\n.decl Has_safety_level(Medication:symbol, Safety_level:float)\nHas_safety_level(\"SSRI medications\", 0.8).\n.decl Answer()\nAnswer() :- Has_age_group(\"SSRI medications\", age_group1), Has_age_group(\"SSRI medications\", age_group2), Has_safety_level(\"SSRI medications\", safety_level1), Has_safety_level(\"SSRI medications\", safety_level2), age_group1 = \"teenagers and young adults\", age_group2 = \"adults\", safety_level1 < safety_level2.\n.output Answer", "completions": [".decl Has_age_group(Medication:symbol, Age_group:symbol)\nHas_age_group(\"SSRI medications\", \"teenagers and young adults\").\nHas_age_group(\"SSRI medications\", \"adults\").\n.decl Has_safety_level(Medication:symbol, Safety_level:float)\nHas_safety_level(\"SSRI medications\", 0.8).\n.decl Answer()\nAnswer() :- Has_age_group(\"SSRI medications\", age_group1), Has_age_group(\"SSRI medications\", age_group2), Has_safety_level(\"SSRI medications\", safety_level1), Has_safety_level(\"SSRI medications\", safety_level2), age_group1 = \"teenagers and young adults\", age_group2 = \"adults\", safety_level1 < safety_level2.\n.output Answer"]}
{"id": 30, "answer": true, "completion": ".decl Has_relationship(Person:symbol, Deity:symbol)\n.decl Answer()\nAnswer() :- !Has_relationship(\"Marco Rubio\", \"Allah\").\n.output Answer", "completions": [".decl Has_relationship(Person:symbol, Deity:symbol)\n.decl Answer()\nAnswer() :- !Has_relationship(\"Marco Rubio\", \"Allah\").\n.output Answer"]}
{"id": 31, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Persephone\", \"gardening\").\n.decl Needs_skill(Job:symbol, Skill:symbol)\nNeeds_skill(\"landscape architect\", \"gardening\").\n.decl Answer()\nAnswer() :- Has_skill(\"Persephone\", skill), Needs_skill(\"landscape architect\", skill).\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Persephone\", \"gardening\").\n.decl Needs_skill(Job:symbol, Skill:symbol)\nNeeds_skill(\"landscape architect\", \"gardening\").\n.decl Answer()\nAnswer() :- Has_skill(\"Persephone\", skill), Needs_skill(\"landscape architect\", skill).\n.output Answer"]}
{"id": 32, "answer": true, "completion": ".decl Has_position(Element:symbol, Position:float)\nHas_position(\"argon\", 18).\nHas_position(\"neon\", 10).\n.decl Answer()\nAnswer() :- Has_position(\"argon\", position1), Has_position(\"neon\", position2), position1 - position2 =< 8.\n.output Answer", "completions": [".decl Has_position(Element:symbol, Position:float)\nHas_position(\"argon\", 18).\nHas_position(\"neon\", 10).\n.decl Answer()\nAnswer() :- Has_position(\"argon\", position1), Has_position(\"neon\", position2), position1 - position2 =< 8.\n.output Answer"]}
{"id": 33, "answer": true, "completion": ".decl Has_parents(Person:symbol, Parent_A:symbol, Parent_B:symbol)\nHas_parents(\"Thomas Greenhill\", \"John Greenhill\", \"Mary Greenhill\").\n.decl Practices(Person:symbol, Concept:symbol)\nPractices(\"John Greenhill\", \"monogamy\").\nPractices(\"Mary Greenhill\", \"monogamy\").\n.decl Answer()\nAnswer() :- Has_parents(\"Thomas Greenhill\", parent_a, parent_b), Practices(parent_a, \"monogamy\"), Practices(parent_b, \"monogamy\"), parent_a != parent_b.\n.output Answer", "completions": [".decl Has_parents(Person:symbol, Parent_A:symbol, Parent_B:symbol)\nHas_parents(\"Thomas Greenhill\", \"John Greenhill\", \"Mary Greenhill\").\n.decl Practices(Person:symbol, Concept:symbol)\nPractices(\"John Greenhill\", \"monogamy\").\nPractices(\"Mary Greenhill\", \"monogamy\").\n.decl Answer()\nAnswer() :- Has_parents(\"Thomas Greenhill\", parent_a, parent_b), Practices(parent_a, \"monogamy\"), Practices(parent_b, \"monogamy\"), parent_a != parent_b.\n.output Answer"]}
{"id": 34, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"high schooler\", 18).\n.decl Uses(Person:symbol, Resource:symbol)\nUses(\"adult\", \"yellow pages\").\n.decl Answer()\nAnswer() :- Has_age(\"high schooler\", age), Uses(\"adult\", \"yellow pages\"), age < 18.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"high schooler\", 18).\n.decl Uses(Person:symbol, Resource:symbol)\nUses(\"adult\", \"yellow pages\").\n.decl Answer()\nAnswer() :- Has_age(\"high schooler\", age), Uses(\"adult\", \"yellow pages\"), age < 18.\n.output Answer"]}
{"id": 35, "answer": true, "completion": ".decl Has_distance(Location_A:symbol, Location_B:symbol, Distance:float)\nHas_distance(\"Alcatraz island\", \"Siberia\", 8500).\n.decl Can_swim_distance(Person:symbol, Distance:float)\nCan_swim_distance(\"escapee\", 1000).\n.decl Answer()\nAnswer() :- Has_distance(\"Alcatraz island\", \"Siberia\", distance), Can_swim_distance(\"escapee\", swim_distance), swim_distance >= distance.\n.output Answer", "completions": [".decl Has_distance(Location_A:symbol, Location_B:symbol, Distance:float)\nHas_distance(\"Alcatraz island\", \"Siberia\", 8500).\n.decl Can_swim_distance(Person:symbol, Distance:float)\nCan_swim_distance(\"escapee\", 1000).\n.decl Answer()\nAnswer() :- Has_distance(\"Alcatraz island\", \"Siberia\", distance), Can_swim_distance(\"escapee\", swim_distance), swim_distance >= distance.\n.output Answer"]}
{"id": 36, "answer": true, "completion": ".decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Gulf of Finland\", 100).\n.decl Has_preservation_level(Object:symbol, Preservation_level:float)\nHas_preservation_level(\"Titanic\", 0.5).\n.decl Answer()\nAnswer() :- Has_depth(\"Gulf of Finland\", depth), Has_preservation_level(\"Titanic\", preservation_level), depth >= preservation_level.\n.output Answer", "completions": [".decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Gulf of Finland\", 100).\n.decl Has_preservation_level(Object:symbol, Preservation_level:float)\nHas_preservation_level(\"Titanic\", 0.5).\n.decl Answer()\nAnswer() :- Has_depth(\"Gulf of Finland\", depth), Has_preservation_level(\"Titanic\", preservation_level), depth >= preservation_level.\n.output Answer"]}
{"id": 37, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"snowy owl\", \"tundra\").\n.decl Has_climate(Place:symbol, Climate:symbol)\nHas_climate(\"Sonoran\", \"desert\").\n.decl Answer()\nAnswer() :- Lives_in(\"snowy owl\", place1), Has_climate(\"Sonoran\", climate2), climate1 != climate2.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"snowy owl\", \"tundra\").\n.decl Has_climate(Place:symbol, Climate:symbol)\nHas_climate(\"Sonoran\", \"desert\").\n.decl Answer()\nAnswer() :- Lives_in(\"snowy owl\", place1), Has_climate(\"Sonoran\", climate2), climate1 != climate2.\n.output Answer"]}
{"id": 38, "answer": true, "completion": ".decl Worships(Person:symbol, Martyr:symbol)\nWorships(\"rabbi\", \"martyrs\").\n.decl Killed_by(Martyr:symbol, Killer:symbol)\nKilled_by(\"martyrs\", \"Ranavalona I\").\n.decl Answer()\nAnswer() :- Worships(\"rabbi\", martyr), Killed_by(martyr, \"Ranavalona I\").\n.output Answer", "completions": [".decl Worships(Person:symbol, Martyr:symbol)\nWorships(\"rabbi\", \"martyrs\").\n.decl Killed_by(Martyr:symbol, Killer:symbol)\nKilled_by(\"martyrs\", \"Ranavalona I\").\n.decl Answer()\nAnswer() :- Worships(\"rabbi\", martyr), Killed_by(martyr, \"Ranavalona I\").\n.output Answer"]}
{"id": 39, "answer": true, "completion": ".decl Avoids(Painter:symbol, Color:symbol)\nAvoids(\"oil painter\", \"reds from scale insects\").\n.decl Lives_on(Insect:symbol, Plant:symbol)\nLives_on(\"scale insects\", \"cactus\").\n.decl Answer()\nAnswer() :- Avoids(\"oil painter\", color), Lives_on(\"scale insects\", \"cactus\").\n.output Answer", "completions": [".decl Avoids(Painter:symbol, Color:symbol)\nAvoids(\"oil painter\", \"reds from scale insects\").\n.decl Lives_on(Insect:symbol, Plant:symbol)\nLives_on(\"scale insects\", \"cactus\").\n.decl Answer()\nAnswer() :- Avoids(\"oil painter\", color), Lives_on(\"scale insects\", \"cactus\").\n.output Answer"]}
{"id": 40, "answer": true, "completion": ".decl Was_written(Document:symbol, Year:float)\nWas_written(\"Second Amendment to the United States Constitution\", 1791).\n.decl Was_considered(Group:symbol, Year:float)\nWas_considered(\"black Americans\", 1865).\n.decl Answer()\nAnswer() :- Was_written(\"Second Amendment to the United States Constitution\", year1), Was_considered(\"black Americans\", year2), year1 < year2.\n.output Answer", "completions": [".decl Was_written(Document:symbol, Year:float)\nWas_written(\"Second Amendment to the United States Constitution\", 1791).\n.decl Was_considered(Group:symbol, Year:float)\nWas_considered(\"black Americans\", 1865).\n.decl Answer()\nAnswer() :- Was_written(\"Second Amendment to the United States Constitution\", year1), Was_considered(\"black Americans\", year2), year1 < year2.\n.output Answer"]}
{"id": 41, "answer": true, "completion": ".decl Has_element(Atmosphere:symbol, Element:symbol)\nHas_element(\"Earth's atmosphere\", \"carbon dioxide\").\nHas_element(\"Earth's atmosphere\", \"oxygen\").\nHas_element(\"Mars' atmosphere\", \"carbon dioxide\").\n.decl Needed_for_photosynthesis(Element:symbol)\nNeeded_for_photosynthesis(\"carbon dioxide\").\nNeeded_for_photosynthesis(\"oxygen\").\n.decl Answer()\nAnswer() :- Has_element(\"Mars' atmosphere\", element), Needed_for_photosynthesis(element), !Has_element(\"Mars' atmosphere\", element2), Needed_for_photosynthesis(element2).\n.output Answer", "completions": [".decl Has_element(Atmosphere:symbol, Element:symbol)\nHas_element(\"Earth's atmosphere\", \"carbon dioxide\").\nHas_element(\"Earth's atmosphere\", \"oxygen\").\nHas_element(\"Mars' atmosphere\", \"carbon dioxide\").\n.decl Needed_for_photosynthesis(Element:symbol)\nNeeded_for_photosynthesis(\"carbon dioxide\").\nNeeded_for_photosynthesis(\"oxygen\").\n.decl Answer()\nAnswer() :- Has_element(\"Mars' atmosphere\", element), Needed_for_photosynthesis(element), !Has_element(\"Mars' atmosphere\", element2), Needed_for_photosynthesis(element2).\n.output Answer"]}
{"id": 42, "answer": true, "completion": ".decl Sells(Shop:symbol, Item:symbol)\nSells(\"smoke shop\", \"Bob Marley poster\").\n.decl Answer()\nAnswer() :- Sells(shop, \"Bob Marley poster\").\n.output Answer", "completions": [".decl Sells(Shop:symbol, Item:symbol)\nSells(\"smoke shop\", \"Bob Marley poster\").\n.decl Answer()\nAnswer() :- Sells(shop, \"Bob Marley poster\").\n.output Answer"]}
{"id": 43, "answer": true, "completion": ".decl Has_nickname_collection(Person:symbol, Collection:symbol)\nHas_nickname_collection(\"Pablo Escobar\", \"The King of Cocaine\").\nHas_nickname_collection(\"Robert Moses Grove\", \"The Father of Baseball\").\n.decl Outshines(Collection_A:symbol, Collection_B:symbol)\nOutshines(\"The King of Cocaine\", \"The Father of Baseball\").\n.decl Answer()\nAnswer() :- Has_nickname_collection(\"Pablo Escobar\", collection1), Has_nickname_collection(\"Robert Moses Grove\", collection2), Outshines(collection1, collection2).\n.output Answer", "completions": [".decl Has_nickname_collection(Person:symbol, Collection:symbol)\nHas_nickname_collection(\"Pablo Escobar\", \"The King of Cocaine\").\nHas_nickname_collection(\"Robert Moses Grove\", \"The Father of Baseball\").\n.decl Outshines(Collection_A:symbol, Collection_B:symbol)\nOutshines(\"The King of Cocaine\", \"The Father of Baseball\").\n.decl Answer()\nAnswer() :- Has_nickname_collection(\"Pablo Escobar\", collection1), Has_nickname_collection(\"Robert Moses Grove\", collection2), Outshines(collection1, collection2).\n.output Answer"]}
{"id": 44, "answer": true, "completion": ".decl Has_connection(Franchise:symbol, Person:symbol)\nHas_connection(\"Subway\", \"Jeffrey Epstein\").\n.decl Is_child_abuser(Person:symbol)\nIs_child_abuser(\"Jeffrey Epstein\").\n.decl Answer()\nAnswer() :- Has_connection(\"Subway\", person), Is_child_abuser(person).\n.output Answer", "completions": [".decl Has_connection(Franchise:symbol, Person:symbol)\nHas_connection(\"Subway\", \"Jeffrey Epstein\").\n.decl Is_child_abuser(Person:symbol)\nIs_child_abuser(\"Jeffrey Epstein\").\n.decl Answer()\nAnswer() :- Has_connection(\"Subway\", person), Is_child_abuser(person).\n.output Answer"]}
{"id": 45, "answer": true, "completion": ".decl Uses(Technology:symbol, Fuel:symbol)\nUses(\"autopilot\", \"electricity\").\n.decl Answer()\nAnswer() :- !Uses(\"autopilot\", \"fossil fuels\").\n.output Answer", "completions": [".decl Uses(Technology:symbol, Fuel:symbol)\nUses(\"autopilot\", \"electricity\").\n.decl Answer()\nAnswer() :- !Uses(\"autopilot\", \"fossil fuels\").\n.output Answer"]}
{"id": 46, "answer": true, "completion": ".decl Accepts_patients(Organization:symbol, Patient_type:symbol)\nAccepts_patients(\"United States Air Force\", \"non-psychiatric\").\n.decl Answer()\nAnswer() :- !Accepts_patients(\"United States Air Force\", \"psychiatric\").\n.output Answer", "completions": [".decl Accepts_patients(Organization:symbol, Patient_type:symbol)\nAccepts_patients(\"United States Air Force\", \"non-psychiatric\").\n.decl Answer()\nAnswer() :- !Accepts_patients(\"United States Air Force\", \"psychiatric\").\n.output Answer"]}
{"id": 47, "answer": true, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Nicole Kidman\", \"Tom Cruise\").\n.decl Is_Scientologist(Person:symbol)\nIs_Scientologist(\"Tom Cruise\").\n.decl Answer()\nAnswer() :- Knows(\"Nicole Kidman\", person), Is_Scientologist(person).\n.output Answer", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Nicole Kidman\", \"Tom Cruise\").\n.decl Is_Scientologist(Person:symbol)\nIs_Scientologist(\"Tom Cruise\").\n.decl Answer()\nAnswer() :- Knows(\"Nicole Kidman\", person), Is_Scientologist(person).\n.output Answer"]}
{"id": 48, "answer": true, "completion": ".decl Is_known_for(Person:symbol, Quality:symbol)\nIs_known_for(\"John Lennon\", \"good friend\").\n.decl Answer()\nAnswer() :- Is_known_for(\"John Lennon\", \"good friend\"), Is_known_for(\"John Lennon\", \"Sasha Obama\").\n.output Answer", "completions": [".decl Is_known_for(Person:symbol, Quality:symbol)\nIs_known_for(\"John Lennon\", \"good friend\").\n.decl Answer()\nAnswer() :- Is_known_for(\"John Lennon\", \"good friend\"), Is_known_for(\"John Lennon\", \"Sasha Obama\").\n.output Answer"]}
{"id": 49, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"tunnels at CERN\", 27).\nHas_length(\"High Speed 1 rails\", 21).\n.decl Answer()\nAnswer() :- Has_length(\"tunnels at CERN\", length1), Has_length(\"High Speed 1 rails\", length2), length1 > length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"tunnels at CERN\", 27).\nHas_length(\"High Speed 1 rails\", 21).\n.decl Answer()\nAnswer() :- Has_length(\"tunnels at CERN\", length1), Has_length(\"High Speed 1 rails\", length2), length1 > length2.\n.output Answer"]}
{"id": 50, "answer": true, "completion": ".decl Has_strength(Animal:symbol, Strength:float)\nHas_strength(\"elephant\", 10).\nHas_strength(\"male macaque\", 2).\n.decl Answer()\nAnswer() :- Has_strength(\"elephant\", strength1), Has_strength(\"male macaque\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Animal:symbol, Strength:float)\nHas_strength(\"elephant\", 10).\nHas_strength(\"male macaque\", 2).\n.decl Answer()\nAnswer() :- Has_strength(\"elephant\", strength1), Has_strength(\"male macaque\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 51, "answer": false, "completion": ".decl Speaks(People:symbol, Language:symbol)\nSpeaks(\"Ubuntu people\", \"Ubuntu\").\n.decl Answer()\nAnswer() :- Speaks(\"Ubuntu people\", \"Ubuntu\").\n.output Answer", "completions": [".decl Speaks(People:symbol, Language:symbol)\nSpeaks(\"Ubuntu people\", \"Ubuntu\").\n.decl Answer()\nAnswer() :- Speaks(\"Ubuntu people\", \"Ubuntu\").\n.output Answer"]}
{"id": 52, "answer": true, "completion": ".decl Has_risk_level(Activity:symbol, Risk_level:symbol)\nHas_risk_level(\"cycling\", \"high\").\n.decl Causes(Activity:symbol, Injury:symbol)\nCauses(\"cycling\", \"pelvis fractures\").\n.decl Answer()\nAnswer() :- Has_risk_level(\"cycling\", \"high\"), Causes(\"cycling\", \"pelvis fractures\").\n.output Answer", "completions": [".decl Has_risk_level(Activity:symbol, Risk_level:symbol)\nHas_risk_level(\"cycling\", \"high\").\n.decl Causes(Activity:symbol, Injury:symbol)\nCauses(\"cycling\", \"pelvis fractures\").\n.decl Answer()\nAnswer() :- Has_risk_level(\"cycling\", \"high\"), Causes(\"cycling\", \"pelvis fractures\").\n.output Answer"]}
{"id": 53, "answer": true, "completion": ".decl Is_immune(Animal:symbol, Disease:symbol)\nIs_immune(\"platypus\", \"cholera\").\n.decl Answer()\nAnswer() :- Is_immune(\"platypus\", \"cholera\").\n.output Answer", "completions": [".decl Is_immune(Animal:symbol, Disease:symbol)\nIs_immune(\"platypus\", \"cholera\").\n.decl Answer()\nAnswer() :- Is_immune(\"platypus\", \"cholera\").\n.output Answer"]}
{"id": 54, "answer": true, "completion": ".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"moose\", 4).\nHas_size(\"minotaur\", 2).\n.decl Answer()\nAnswer() :- Has_size(\"moose\", size1), Has_size(\"minotaur\", size2), size1 > size2.\n.output Answer", "completions": [".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"moose\", 4).\nHas_size(\"minotaur\", 2).\n.decl Answer()\nAnswer() :- Has_size(\"moose\", size1), Has_size(\"minotaur\", size2), size1 > size2.\n.output Answer"]}
{"id": 55, "answer": false, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"anchovy pizza\", \"anchovy\").\nHas_ingredient(\"anchovy pizza\", \"cheese\").\nHas_ingredient(\"anchovy pizza\", \"tomato sauce\").\nHas_ingredient(\"anchovy pizza\", \"dough\").\n.decl Answer()\nAnswer() :- !Has_ingredient(\"anchovy pizza\", \"bones\").\n.output Answer", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"anchovy pizza\", \"anchovy\").\nHas_ingredient(\"anchovy pizza\", \"cheese\").\nHas_ingredient(\"anchovy pizza\", \"tomato sauce\").\nHas_ingredient(\"anchovy pizza\", \"dough\").\n.decl Answer()\nAnswer() :- !Has_ingredient(\"anchovy pizza\", \"bones\").\n.output Answer"]}
{"id": 56, "answer": false, "completion": ".decl Is_edible(Food:symbol, Animal:symbol)\nIs_edible(\"pancakes\", \"human\").\n.decl Answer()\nAnswer() :- !Is_edible(\"pancakes\", \"Bengal cat\").\n.output Answer", "completions": [".decl Is_edible(Food:symbol, Animal:symbol)\nIs_edible(\"pancakes\", \"human\").\n.decl Answer()\nAnswer() :- !Is_edible(\"pancakes\", \"Bengal cat\").\n.output Answer"]}
{"id": 57, "answer": false, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"zucchini\", \"courgette\").\n.decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"top row\", \"Q\").\nHas_letter(\"top row\", \"W\").\nHas_letter(\"top row\", \"E\").\nHas_letter(\"top row\", \"R\").\nHas_letter(\"top row\", \"T\").\nHas_letter(\"top row\", \"Y\").\n.decl Answer()\nAnswer() :- Has_name(\"zucchini\", name), Has_letter(\"top row\", letter1), Has_letter(\"top row\", letter2), Has_letter(\"top row\", letter3), Has_letter(\"top row\", letter4), Has_letter(\"top row\", letter5), Has_letter(\"top row\", letter6), name = letter1 + letter2 + letter3 + letter4 + letter5 + letter6.\n.output Answer", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"zucchini\", \"courgette\").\n.decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"top row\", \"Q\").\nHas_letter(\"top row\", \"W\").\nHas_letter(\"top row\", \"E\").\nHas_letter(\"top row\", \"R\").\nHas_letter(\"top row\", \"T\").\nHas_letter(\"top row\", \"Y\").\n.decl Answer()\nAnswer() :- Has_name(\"zucchini\", name), Has_letter(\"top row\", letter1), Has_letter(\"top row\", letter2), Has_letter(\"top row\", letter3), Has_letter(\"top row\", letter4), Has_letter(\"top row\", letter5), Has_letter(\"top row\", letter6), name = letter1 + letter2 + letter3 + letter4 + letter5 + letter6.\n.output Answer"]}
{"id": 58, "answer": true, "completion": ".decl Borders(City:symbol, Body_of_water:symbol)\nBorders(\"The Hague\", \"North Sea\").\nBorders(\"The Hague\", \"Meuse River\").\n.decl Answer()\nAnswer() :- Borders(\"The Hague\", _).\n.output Answer", "completions": [".decl Borders(City:symbol, Body_of_water:symbol)\nBorders(\"The Hague\", \"North Sea\").\nBorders(\"The Hague\", \"Meuse River\").\n.decl Answer()\nAnswer() :- Borders(\"The Hague\", _).\n.output Answer"]}
{"id": 59, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"person\", 11).\nHas_age(\"person\", 12).\nHas_age(\"person\", 13).\nHas_age(\"person\", 14).\n.decl Has_exam(Person:symbol, Exam:symbol)\nHas_exam(\"person\", \"breast exam\").\n.decl Answer()\nAnswer() :- Has_age(person, age), Has_exam(person, \"breast exam\"), age >= 11, age <= 14.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"person\", 11).\nHas_age(\"person\", 12).\nHas_age(\"person\", 13).\nHas_age(\"person\", 14).\n.decl Has_exam(Person:symbol, Exam:symbol)\nHas_exam(\"person\", \"breast exam\").\n.decl Answer()\nAnswer() :- Has_age(person, age), Has_exam(person, \"breast exam\"), age >= 11, age <= 14.\n.output Answer"]}
{"id": 60, "answer": true, "completion": ".decl Watched_in_time(Show:symbol, Time:symbol)\nWatched_in_time(\"Iron Chef\", \"Korea under Japanese Rule\").\n.decl Answer()\nAnswer() :- Watched_in_time(\"Iron Chef\", \"Korea under Japanese Rule\").\n.output Answer", "completions": [".decl Watched_in_time(Show:symbol, Time:symbol)\nWatched_in_time(\"Iron Chef\", \"Korea under Japanese Rule\").\n.decl Answer()\nAnswer() :- Watched_in_time(\"Iron Chef\", \"Korea under Japanese Rule\").\n.output Answer"]}
{"id": 61, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"bald eagle\", 80).\nHas_speed(\"B-52\", 600).\n.decl Answer()\nAnswer() :- Has_speed(\"bald eagle\", speed1), Has_speed(\"B-52\", speed2), speed1 < speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"bald eagle\", 80).\nHas_speed(\"B-52\", 600).\n.decl Answer()\nAnswer() :- Has_speed(\"bald eagle\", speed1), Has_speed(\"B-52\", speed2), speed1 < speed2.\n.output Answer"]}
{"id": 62, "answer": false, "completion": ".decl Looks_like(Person_A:symbol, Person_B:symbol)\nLooks_like(\"Snoopy\", \"Chance\").\n.decl Answer()\nAnswer() :- Looks_like(\"Snoopy\", \"Chance\").\n.output Answer", "completions": [".decl Looks_like(Person_A:symbol, Person_B:symbol)\nLooks_like(\"Snoopy\", \"Chance\").\n.decl Answer()\nAnswer() :- Looks_like(\"Snoopy\", \"Chance\").\n.output Answer"]}
{"id": 63, "answer": false, "completion": ".decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Dioskourides\", \"pharmacist\").\n.decl Answer()\nAnswer() :- !Is_profession(\"Dioskourides\", \"lapidary\").\n.output Answer", "completions": [".decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Dioskourides\", \"pharmacist\").\n.decl Answer()\nAnswer() :- !Is_profession(\"Dioskourides\", \"lapidary\").\n.output Answer"]}
{"id": 64, "answer": true, "completion": ".decl Has_income(Family:symbol, Income:float)\nHas_income(\"middle class family\", 50000).\n.decl Has_servant(Family:symbol, Servant:symbol)\nHas_servant(\"rich family\", \"butler\").\n.decl Answer()\nAnswer() :- Has_income(\"middle class family\", income), Has_servant(\"rich family\", \"butler\"), income < 50000.\n.output Answer", "completions": [".decl Has_income(Family:symbol, Income:float)\nHas_income(\"middle class family\", 50000).\n.decl Has_servant(Family:symbol, Servant:symbol)\nHas_servant(\"rich family\", \"butler\").\n.decl Answer()\nAnswer() :- Has_income(\"middle class family\", income), Has_servant(\"rich family\", \"butler\"), income < 50000.\n.output Answer"]}
{"id": 65, "answer": false, "completion": ".decl Has_position(Person:symbol, Year:float, Position:symbol)\nHas_position(\"Hillary Clinton\", 2009, \"deputy chief of staff\").\n.decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"Hillary Clinton\", \"baptised\").\n.decl Answer()\nAnswer() :- Has_position(\"Hillary Clinton\", 2009, \"deputy chief of staff\"), Has_status(\"Hillary Clinton\", \"baptised\").\n.output Answer", "completions": [".decl Has_position(Person:symbol, Year:float, Position:symbol)\nHas_position(\"Hillary Clinton\", 2009, \"deputy chief of staff\").\n.decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"Hillary Clinton\", \"baptised\").\n.decl Answer()\nAnswer() :- Has_position(\"Hillary Clinton\", 2009, \"deputy chief of staff\"), Has_status(\"Hillary Clinton\", \"baptised\").\n.output Answer"]}
{"id": 66, "answer": true, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"New York Public Library\", \"books\").\n.decl Answer()\nAnswer() :- !Sells(\"New York Public Library\", \"Alpo\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"New York Public Library\", \"books\").\n.decl Answer()\nAnswer() :- !Sells(\"New York Public Library\", \"Alpo\").\n.output Answer"]}
{"id": 67, "answer": false, "completion": ".decl Has_n_prophets(Religion:symbol, N_prophets:float)\nHas_n_prophets(\"Islam\", 25).\nHas_n_prophets(\"Judaism\", 4).\n.decl Has_n_kings(Religion:symbol, N_kings:float)\nHas_n_kings(\"Judaism\", 40).\n.decl Answer()\nAnswer() :- Has_n_prophets(\"Islam\", n_prophets1), Has_n_kings(\"Judaism\", n_kings1), Has_n_prophets(\"Judaism\", n_prophets2), Has_n_kings(\"Judaism\", n_kings2), n_prophets1/n_kings1 > n_prophets2/n_kings2.\n.output Answer", "completions": [".decl Has_n_prophets(Religion:symbol, N_prophets:float)\nHas_n_prophets(\"Islam\", 25).\nHas_n_prophets(\"Judaism\", 4).\n.decl Has_n_kings(Religion:symbol, N_kings:float)\nHas_n_kings(\"Judaism\", 40).\n.decl Answer()\nAnswer() :- Has_n_prophets(\"Islam\", n_prophets1), Has_n_kings(\"Judaism\", n_kings1), Has_n_prophets(\"Judaism\", n_prophets2), Has_n_kings(\"Judaism\", n_kings2), n_prophets1/n_kings1 > n_prophets2/n_kings2.\n.output Answer"]}
{"id": 68, "answer": true, "completion": ".decl Refers_to(Person_A:symbol, Person_B:symbol, Term:symbol)\nRefers_to(\"Taylor Swift\", \"Snoopy\", \"friend\").\n.decl Answer()\nAnswer() :- Refers_to(\"Taylor Swift\", \"Snoopy\", \"oppa\").\n.output Answer", "completions": [".decl Refers_to(Person_A:symbol, Person_B:symbol, Term:symbol)\nRefers_to(\"Taylor Swift\", \"Snoopy\", \"friend\").\n.decl Answer()\nAnswer() :- Refers_to(\"Taylor Swift\", \"Snoopy\", \"oppa\").\n.output Answer"]}
{"id": 69, "answer": true, "completion": ".decl Influences(Group_A:symbol, Group_B:symbol)\nInfluences(\"Confederate States Army\", \"West Point\").\n.decl Answer()\nAnswer() :- Influences(\"Confederate States Army\", \"West Point\").\n.output Answer", "completions": [".decl Influences(Group_A:symbol, Group_B:symbol)\nInfluences(\"Confederate States Army\", \"West Point\").\n.decl Answer()\nAnswer() :- Influences(\"Confederate States Army\", \"West Point\").\n.output Answer"]}
{"id": 70, "answer": true, "completion": ".decl Repulses(Person:symbol, Ideology:symbol)\nRepulses(\"Blaire White\", \"conservatism\").\n.decl Answer()\nAnswer() :- Repulses(\"Blaire White\", \"conservatism\").\n.output Answer", "completions": [".decl Repulses(Person:symbol, Ideology:symbol)\nRepulses(\"Blaire White\", \"conservatism\").\n.decl Answer()\nAnswer() :- Repulses(\"Blaire White\", \"conservatism\").\n.output Answer"]}
{"id": 71, "answer": true, "completion": ".decl Has_taste(Part:symbol, Taste:symbol)\nHas_taste(\"aloe vera leaves\", \"good\").\nHas_taste(\"aloe vera stem\", \"bitter\").\n.decl Answer()\nAnswer() :- Has_taste(part, \"good\"), !Has_taste(part, \"bitter\").\n.output Answer", "completions": [".decl Has_taste(Part:symbol, Taste:symbol)\nHas_taste(\"aloe vera leaves\", \"good\").\nHas_taste(\"aloe vera stem\", \"bitter\").\n.decl Answer()\nAnswer() :- Has_taste(part, \"good\"), !Has_taste(part, \"bitter\").\n.output Answer"]}
{"id": 72, "answer": true, "completion": ".decl Studies(Person:symbol, Science:symbol)\nStudies(\"oceanographer\", \"oceanography\").\nStudies(\"oceanographer\", \"chemistry\").\nStudies(\"oceanographer\", \"biology\").\nStudies(\"oceanographer\", \"physics\").\n.decl Answer()\nAnswer() :- Studies(\"oceanographer\", _).\n.output Answer", "completions": [".decl Studies(Person:symbol, Science:symbol)\nStudies(\"oceanographer\", \"oceanography\").\nStudies(\"oceanographer\", \"chemistry\").\nStudies(\"oceanographer\", \"biology\").\nStudies(\"oceanographer\", \"physics\").\n.decl Answer()\nAnswer() :- Studies(\"oceanographer\", _).\n.output Answer"]}
{"id": 73, "answer": true, "completion": ".decl Music_genre(Person:symbol, Genre:symbol)\nMusic_genre(\"Kurt Cobain\", \"Grunge\").\n.decl Survives(Genre:symbol, Time:symbol)\nSurvives(\"Grunge\", \"after his death\").\n.decl Answer()\nAnswer() :- Music_genre(\"Kurt Cobain\", genre), Survives(genre, time).\n.output Answer", "completions": [".decl Music_genre(Person:symbol, Genre:symbol)\nMusic_genre(\"Kurt Cobain\", \"Grunge\").\n.decl Survives(Genre:symbol, Time:symbol)\nSurvives(\"Grunge\", \"after his death\").\n.decl Answer()\nAnswer() :- Music_genre(\"Kurt Cobain\", genre), Survives(genre, time).\n.output Answer"]}
{"id": 74, "answer": true, "completion": ".decl Met(Person_A:symbol, Person_B:symbol)\n.decl Was_president(Person:symbol, Year:float)\nWas_president(\"Franklin Pierce\", 1853).\n.decl Answer()\nAnswer() :- Met(\"Immanuel Kant\", person), Was_president(person, 1853).\n.output Answer", "completions": [".decl Met(Person_A:symbol, Person_B:symbol)\n.decl Was_president(Person:symbol, Year:float)\nWas_president(\"Franklin Pierce\", 1853).\n.decl Answer()\nAnswer() :- Met(\"Immanuel Kant\", person), Was_president(person, 1853).\n.output Answer"]}
{"id": 75, "answer": false, "completion": ".decl Has_market_share(Company:symbol, Market_share:float)\nHas_market_share(\"steel company\", 0.2).\n.decl Has_market_size(Market:symbol, Market_size:float)\nHas_market_size(\"Japanese bulk carrier market\", 100).\n.decl Answer()\nAnswer() :- Has_market_share(\"steel company\", market_share), Has_market_size(\"Japanese bulk carrier market\", market_size), market_share * market_size > 0.\n.output Answer", "completions": [".decl Has_market_share(Company:symbol, Market_share:float)\nHas_market_share(\"steel company\", 0.2).\n.decl Has_market_size(Market:symbol, Market_size:float)\nHas_market_size(\"Japanese bulk carrier market\", 100).\n.decl Answer()\nAnswer() :- Has_market_share(\"steel company\", market_share), Has_market_size(\"Japanese bulk carrier market\", market_size), market_share * market_size > 0.\n.output Answer"]}
{"id": 76, "answer": true, "completion": ".decl Uses(Profession:symbol, Field:symbol)\nUses(\"geographer\", \"geography\").\nUses(\"biochemist\", \"biochemistry\").\n.decl Answer()\nAnswer() :- Uses(\"geographer\", field1), Uses(\"biochemist\", field2), field1 = field2.\n.output Answer", "completions": [".decl Uses(Profession:symbol, Field:symbol)\nUses(\"geographer\", \"geography\").\nUses(\"biochemist\", \"biochemistry\").\n.decl Answer()\nAnswer() :- Uses(\"geographer\", field1), Uses(\"biochemist\", field2), field1 = field2.\n.output Answer"]}
{"id": 77, "answer": true, "completion": ".decl Produces(Country:symbol, Product:symbol)\nProduces(\"Brazil\", \"coffee\").\nProduces(\"Colombia\", \"coffee\").\nProduces(\"Venezuela\", \"coffee\").\nProduces(\"Mexico\", \"coffee\").\nProduces(\"Peru\", \"coffee\").\n.decl Is_south_of(Country_A:symbol, Country_B:symbol)\nIs_south_of(\"Brazil\", \"Equator\").\nIs_south_of(\"Colombia\", \"Equator\").\nIs_south_of(\"Venezuela\", \"Equator\").\nIs_south_of(\"Mexico\", \"Equator\").\nIs_south_of(\"Peru\", \"Equator\").\n.decl Answer()\nAnswer() :- Produces(country, \"coffee\"), Is_south_of(country, \"Equator\").\n.output Answer", "completions": [".decl Produces(Country:symbol, Product:symbol)\nProduces(\"Brazil\", \"coffee\").\nProduces(\"Colombia\", \"coffee\").\nProduces(\"Venezuela\", \"coffee\").\nProduces(\"Mexico\", \"coffee\").\nProduces(\"Peru\", \"coffee\").\n.decl Is_south_of(Country_A:symbol, Country_B:symbol)\nIs_south_of(\"Brazil\", \"Equator\").\nIs_south_of(\"Colombia\", \"Equator\").\nIs_south_of(\"Venezuela\", \"Equator\").\nIs_south_of(\"Mexico\", \"Equator\").\nIs_south_of(\"Peru\", \"Equator\").\n.decl Answer()\nAnswer() :- Produces(country, \"coffee\"), Is_south_of(country, \"Equator\").\n.output Answer"]}
{"id": 78, "answer": false, "completion": ".decl Available_in(Food:symbol, Place:symbol)\nAvailable_in(\"BLT\", \"New York\").\n.decl Answer()\nAnswer() :- !Available_in(\"BLT\", \"Casablanca\").\n.output Answer", "completions": [".decl Available_in(Food:symbol, Place:symbol)\nAvailable_in(\"BLT\", \"New York\").\n.decl Answer()\nAnswer() :- !Available_in(\"BLT\", \"Casablanca\").\n.output Answer"]}
{"id": 79, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Statue of Liberty\", 225).\nHas_weight(\"largest ship from Voyages of Christopher Columbus\", 1000).\n.decl Answer()\nAnswer() :- Has_weight(\"Statue of Liberty\", weight1), Has_weight(\"largest ship from Voyages of Christopher Columbus\", weight2), weight1 <= weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Statue of Liberty\", 225).\nHas_weight(\"largest ship from Voyages of Christopher Columbus\", 1000).\n.decl Answer()\nAnswer() :- Has_weight(\"Statue of Liberty\", weight1), Has_weight(\"largest ship from Voyages of Christopher Columbus\", weight2), weight1 <= weight2.\n.output Answer"]}
{"id": 80, "answer": true, "completion": ".decl Has_height(Monument:symbol, Height:float)\nHas_height(\"Jolly Green Giant's largest monument\", 60).\nHas_height(\"Pyrenees\", 3404).\n.decl Answer()\nAnswer() :- Has_height(\"Jolly Green Giant's largest monument\", height1), Has_height(\"Pyrenees\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Monument:symbol, Height:float)\nHas_height(\"Jolly Green Giant's largest monument\", 60).\nHas_height(\"Pyrenees\", 3404).\n.decl Answer()\nAnswer() :- Has_height(\"Jolly Green Giant's largest monument\", height1), Has_height(\"Pyrenees\", height2), height1 < height2.\n.output Answer"]}
{"id": 81, "answer": false, "completion": ".decl Influenced_by(Party:symbol, Person:symbol)\nInfluenced_by(\"Communist Party of China\", \"Karl Marx\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Communist Party of China\", \"Karl Marx\").\n.output Answer", "completions": [".decl Influenced_by(Party:symbol, Person:symbol)\nInfluenced_by(\"Communist Party of China\", \"Karl Marx\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Communist Party of China\", \"Karl Marx\").\n.output Answer"]}
{"id": 82, "answer": false, "completion": ".decl Uses_for_protein(Product:symbol, Source:symbol)\nUses_for_protein(\"Soylent\", \"Pea\").\n.decl Answer()\nAnswer() :- Uses_for_protein(\"Soylent\", \"Pea\").\n.output Answer", "completions": [".decl Uses_for_protein(Product:symbol, Source:symbol)\nUses_for_protein(\"Soylent\", \"Pea\").\n.decl Answer()\nAnswer() :- Uses_for_protein(\"Soylent\", \"Pea\").\n.output Answer"]}
{"id": 83, "answer": true, "completion": ".decl Lives_in(Person:symbol, Province:symbol)\nLives_in(\"religious people\", \"Quebec\").\n.decl Follows(Person:symbol, Religion:symbol)\nFollows(\"religious people\", \"Islam\").\n.decl Uses(Religion:symbol, Book:symbol)\nUses(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Quebec\"), Follows(person, religion), Uses(religion, \"Quran\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Province:symbol)\nLives_in(\"religious people\", \"Quebec\").\n.decl Follows(Person:symbol, Religion:symbol)\nFollows(\"religious people\", \"Islam\").\n.decl Uses(Religion:symbol, Book:symbol)\nUses(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Quebec\"), Follows(person, religion), Uses(religion, \"Quran\").\n.output Answer"]}
{"id": 84, "answer": true, "completion": ".decl Takes_place_in(Show:symbol, Location:symbol)\nTakes_place_in(\"Family Guy\", \"Rhode Island\").\n.decl Is_on_west_coast(Location:symbol)\nIs_on_west_coast(\"California\").\nIs_on_west_coast(\"Oregon\").\nIs_on_west_coast(\"Washington\").\n.decl Answer()\nAnswer() :- Takes_place_in(\"Family Guy\", location), Is_on_west_coast(location).\n.output Answer", "completions": [".decl Takes_place_in(Show:symbol, Location:symbol)\nTakes_place_in(\"Family Guy\", \"Rhode Island\").\n.decl Is_on_west_coast(Location:symbol)\nIs_on_west_coast(\"California\").\nIs_on_west_coast(\"Oregon\").\nIs_on_west_coast(\"Washington\").\n.decl Answer()\nAnswer() :- Takes_place_in(\"Family Guy\", location), Is_on_west_coast(location).\n.output Answer"]}
{"id": 85, "answer": false, "completion": ".decl Measures_length_in(Country:symbol, Unit:symbol)\nMeasures_length_in(\"UK\", \"metres\").\n.decl Answer()\nAnswer() :- Measures_length_in(\"UK\", \"metres\").\n.output Answer", "completions": [".decl Measures_length_in(Country:symbol, Unit:symbol)\nMeasures_length_in(\"UK\", \"metres\").\n.decl Answer()\nAnswer() :- Measures_length_in(\"UK\", \"metres\").\n.output Answer"]}
{"id": 86, "answer": true, "completion": ".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Charles I\", \"Duke of Valentinois\").\n.decl Participates_in(Person:symbol, War:symbol)\nParticipates_in(\"Charles I\", \"Hundred Years' War\").\n.decl Answer()\nAnswer() :- Has_title(\"Charles I\", \"Duke of Valentinois\"), Participates_in(\"Charles I\", \"Hundred Years' War\").\n.output Answer", "completions": [".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Charles I\", \"Duke of Valentinois\").\n.decl Participates_in(Person:symbol, War:symbol)\nParticipates_in(\"Charles I\", \"Hundred Years' War\").\n.decl Answer()\nAnswer() :- Has_title(\"Charles I\", \"Duke of Valentinois\"), Participates_in(\"Charles I\", \"Hundred Years' War\").\n.output Answer"]}
{"id": 87, "answer": false, "completion": ".decl Fights(Animal_A:symbol, Animal_B:symbol)\nFights(\"gorilla\", \"panda bear\").\n.decl Answer()\nAnswer() :- Fights(\"gorilla\", \"panda bear\").\n.output Answer", "completions": [".decl Fights(Animal_A:symbol, Animal_B:symbol)\nFights(\"gorilla\", \"panda bear\").\n.decl Answer()\nAnswer() :- Fights(\"gorilla\", \"panda bear\").\n.output Answer"]}
{"id": 88, "answer": true, "completion": ".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Christina Aguilera\", \"Staten Island\").\n.decl Is_forgotten_borough(Place:symbol)\nIs_forgotten_borough(\"Staten Island\").\n.decl Answer()\nAnswer() :- Born_in(\"Christina Aguilera\", place), Is_forgotten_borough(place).\n.output Answer", "completions": [".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Christina Aguilera\", \"Staten Island\").\n.decl Is_forgotten_borough(Place:symbol)\nIs_forgotten_borough(\"Staten Island\").\n.decl Answer()\nAnswer() :- Born_in(\"Christina Aguilera\", place), Is_forgotten_borough(place).\n.output Answer"]}
{"id": 89, "answer": false, "completion": ".decl Has_most_common_two_letter_pair(Letter:symbol, Partner:symbol)\nHas_most_common_two_letter_pair(\"H\", \"E\").\n.decl Is_freebie(Letter:symbol)\nIs_freebie(\"E\").\n.decl Answer()\nAnswer() :- Has_most_common_two_letter_pair(\"H\", partner), Is_freebie(partner).\n.output Answer", "completions": [".decl Has_most_common_two_letter_pair(Letter:symbol, Partner:symbol)\nHas_most_common_two_letter_pair(\"H\", \"E\").\n.decl Is_freebie(Letter:symbol)\nIs_freebie(\"E\").\n.decl Answer()\nAnswer() :- Has_most_common_two_letter_pair(\"H\", partner), Is_freebie(partner).\n.output Answer"]}
{"id": 90, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"quarter\", 0.955).\nHas_size(\"human kidney\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"quarter\", size1), Has_size(\"human kidney\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"quarter\", 0.955).\nHas_size(\"human kidney\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"quarter\", size1), Has_size(\"human kidney\", size2), size1 < size2.\n.output Answer"]}
{"id": 91, "answer": false, "completion": ".decl Telescope_used(Astronomer:symbol, Telescope:symbol)\nTelescope_used(\"astronomer\", \"James Webb Space Telescope\").\n.decl Planet_located(Telescope:symbol, Planet:symbol)\nPlanet_located(\"James Webb Space Telescope\", \"Earth\").\nPlanet_located(\"James Webb Space Telescope\", \"Mars\").\n.decl Answer()\nAnswer() :- Telescope_used(\"astronomer\", telescope), Planet_located(telescope, \"Krypton\"), !Planet_located(telescope, \"Krypton\").\n.output Answer", "completions": [".decl Telescope_used(Astronomer:symbol, Telescope:symbol)\nTelescope_used(\"astronomer\", \"James Webb Space Telescope\").\n.decl Planet_located(Telescope:symbol, Planet:symbol)\nPlanet_located(\"James Webb Space Telescope\", \"Earth\").\nPlanet_located(\"James Webb Space Telescope\", \"Mars\").\n.decl Answer()\nAnswer() :- Telescope_used(\"astronomer\", telescope), Planet_located(telescope, \"Krypton\"), !Planet_located(telescope, \"Krypton\").\n.output Answer"]}
{"id": 92, "answer": true, "completion": ".decl Has_favorite_book(Person:symbol, Book:symbol)\nHas_favorite_book(\"P. G. Wodehouse\", \"The Code of the Woosters\").\n.decl Answer()\nAnswer() :- !Has_favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.output Answer", "completions": [".decl Has_favorite_book(Person:symbol, Book:symbol)\nHas_favorite_book(\"P. G. Wodehouse\", \"The Code of the Woosters\").\n.decl Answer()\nAnswer() :- !Has_favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.output Answer"]}
{"id": 93, "answer": true, "completion": ".decl Is_finished(Website:symbol)\nIs_finished(\"website\").\n.decl Has_lorem_ipsum(Website:symbol)\nHas_lorem_ipsum(\"website\").\n.decl Answer()\nAnswer() :- Is_finished(\"website\"), !Has_lorem_ipsum(\"website\").\n.output Answer", "completions": [".decl Is_finished(Website:symbol)\nIs_finished(\"website\").\n.decl Has_lorem_ipsum(Website:symbol)\nHas_lorem_ipsum(\"website\").\n.decl Answer()\nAnswer() :- Is_finished(\"website\"), !Has_lorem_ipsum(\"website\").\n.output Answer"]}
{"id": 94, "answer": true, "completion": ".decl Reads(Person:symbol, Newspaper:symbol)\nReads(\"William Shaespeare\", \"The Times\").\n.decl Answer()\nAnswer() :- !Reads(\"William Shaespeare\", \"Daily Mirror\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Newspaper:symbol)\nReads(\"William Shaespeare\", \"The Times\").\n.decl Answer()\nAnswer() :- !Reads(\"William Shaespeare\", \"Daily Mirror\").\n.output Answer"]}
{"id": 95, "answer": true, "completion": ".decl Has_visitors(Place:symbol, Visitors:float)\nHas_visitors(\"Taco Bell\", 1000000).\nHas_visitors(\"Roy Rogers\", 500000).\n.decl Answer()\nAnswer() :- Has_visitors(\"Taco Bell\", visitors1), Has_visitors(\"Roy Rogers\", visitors2), visitors1 > visitors2.\n.output Answer", "completions": [".decl Has_visitors(Place:symbol, Visitors:float)\nHas_visitors(\"Taco Bell\", 1000000).\nHas_visitors(\"Roy Rogers\", 500000).\n.decl Answer()\nAnswer() :- Has_visitors(\"Taco Bell\", visitors1), Has_visitors(\"Roy Rogers\", visitors2), visitors1 > visitors2.\n.output Answer"]}
{"id": 96, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"snow\", \"winter\").\nHappens_in_season(\"wearing sandals\", \"summer\").\n.decl Answer()\nAnswer() :- !Happens_in_season(\"snow\", season), Happens_in_season(\"wearing sandals\", season).\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"snow\", \"winter\").\nHappens_in_season(\"wearing sandals\", \"summer\").\n.decl Answer()\nAnswer() :- !Happens_in_season(\"snow\", season), Happens_in_season(\"wearing sandals\", season).\n.output Answer"]}
{"id": 97, "answer": false, "completion": ".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"Nikola Tesla\", \"Serbia\").\n.decl Involved_in(Country:symbol, War:symbol)\nInvolved_in(\"United States\", \"American Civil War\").\n.decl Answer()\nAnswer() :- Is_from(\"Nikola Tesla\", country), Involved_in(country, \"American Civil War\"), !Involved_in(\"Serbia\", \"American Civil War\").\n.output Answer", "completions": [".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"Nikola Tesla\", \"Serbia\").\n.decl Involved_in(Country:symbol, War:symbol)\nInvolved_in(\"United States\", \"American Civil War\").\n.decl Answer()\nAnswer() :- Is_from(\"Nikola Tesla\", country), Involved_in(country, \"American Civil War\"), !Involved_in(\"Serbia\", \"American Civil War\").\n.output Answer"]}
{"id": 98, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Ada Lovelace\", 36).\n.decl Average_age(Era:symbol, Average_age:float)\nAverage_age(\"Victorian era\", 45).\n.decl Answer()\nAnswer() :- Has_age(\"Ada Lovelace\", age1), Average_age(\"Victorian era\", age2), age1 < age2.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Ada Lovelace\", 36).\n.decl Average_age(Era:symbol, Average_age:float)\nAverage_age(\"Victorian era\", 45).\n.decl Answer()\nAnswer() :- Has_age(\"Ada Lovelace\", age1), Average_age(\"Victorian era\", age2), age1 < age2.\n.output Answer"]}
{"id": 99, "answer": false, "completion": ".decl Has_ability(Animal:symbol, Ability:symbol)\nHas_ability(\"Asian black bear\", \"climbing\").\nHas_ability(\"Asian black bear\", \"swimming\").\n.decl Answer()\nAnswer() :- Has_ability(\"Asian black bear\", \"using chopsticks\").\n.output Answer", "completions": [".decl Has_ability(Animal:symbol, Ability:symbol)\nHas_ability(\"Asian black bear\", \"climbing\").\nHas_ability(\"Asian black bear\", \"swimming\").\n.decl Answer()\nAnswer() :- Has_ability(\"Asian black bear\", \"using chopsticks\").\n.output Answer"]}
{"id": 100, "answer": true, "completion": ".decl Sells_through(Person:symbol, Company:symbol)\nSells_through(\"John Smith\", \"Toronto Star\").\n.decl Answer()\nAnswer() :- Sells_through(person, \"Toronto Star\").\n.output Answer", "completions": [".decl Sells_through(Person:symbol, Company:symbol)\nSells_through(\"John Smith\", \"Toronto Star\").\n.decl Answer()\nAnswer() :- Sells_through(person, \"Toronto Star\").\n.output Answer"]}
{"id": 101, "answer": true, "completion": ".decl Has_deaths(Mission:symbol, Deaths:float)\nHas_deaths(\"Apollo 13\", 0).\nHas_deaths(\"Challenger\", 7).\nHas_deaths(\"Columbia\", 7).\n.decl Answer()\nAnswer() :- Has_deaths(\"Apollo 13\", deaths1), Has_deaths(mission2, deaths2), deaths2 > deaths1.\n.output Answer", "completions": [".decl Has_deaths(Mission:symbol, Deaths:float)\nHas_deaths(\"Apollo 13\", 0).\nHas_deaths(\"Challenger\", 7).\nHas_deaths(\"Columbia\", 7).\n.decl Answer()\nAnswer() :- Has_deaths(\"Apollo 13\", deaths1), Has_deaths(mission2, deaths2), deaths2 > deaths1.\n.output Answer"]}
{"id": 102, "answer": false, "completion": ".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"Taco Bell\", \"taco\").\nServes(\"Taco Bell\", \"burrito\").\n.decl Answer()\nAnswer() :- !Serves(\"Taco Bell\", \"injera\").\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"Taco Bell\", \"taco\").\nServes(\"Taco Bell\", \"burrito\").\n.decl Answer()\nAnswer() :- !Serves(\"Taco Bell\", \"injera\").\n.output Answer"]}
{"id": 103, "answer": true, "completion": ".decl Has_xenophobia(Person_A:symbol, Person_B:symbol, Level:float)\nHas_xenophobia(\"Saladin\", \"Ali Askari\", 0).\n.decl Answer()\nAnswer() :- Has_xenophobia(\"Saladin\", \"Ali Askari\", level), level = 0.\n.output Answer", "completions": [".decl Has_xenophobia(Person_A:symbol, Person_B:symbol, Level:float)\nHas_xenophobia(\"Saladin\", \"Ali Askari\", 0).\n.decl Answer()\nAnswer() :- Has_xenophobia(\"Saladin\", \"Ali Askari\", level), level = 0.\n.output Answer"]}
{"id": 104, "answer": true, "completion": ".decl Likes(Animal:symbol, Food:symbol)\nLikes(\"Sockington\", \"onions\").\n.decl Answer()\nAnswer() :- Likes(\"Sockington\", \"onions\").\n.output Answer", "completions": [".decl Likes(Animal:symbol, Food:symbol)\nLikes(\"Sockington\", \"onions\").\n.decl Answer()\nAnswer() :- Likes(\"Sockington\", \"onions\").\n.output Answer"]}
{"id": 105, "answer": true, "completion": ".decl Influenced_by(Artist:symbol, Country:symbol)\nInfluenced_by(\"Raphael\", \"Italy\").\n.decl Answer()\nAnswer() :- !Influenced_by(\"Raphael\", \"Guam\").\n.output Answer", "completions": [".decl Influenced_by(Artist:symbol, Country:symbol)\nInfluenced_by(\"Raphael\", \"Italy\").\n.decl Answer()\nAnswer() :- !Influenced_by(\"Raphael\", \"Guam\").\n.output Answer"]}
{"id": 106, "answer": true, "completion": ".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Oscar Wilde\", \"writing\").\n.decl Answer()\nAnswer() :- Has_ability(\"Oscar Wilde\", ability), ability != \"operating a motor vehicle\".\n.output Answer", "completions": [".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Oscar Wilde\", \"writing\").\n.decl Answer()\nAnswer() :- Has_ability(\"Oscar Wilde\", ability), ability != \"operating a motor vehicle\".\n.output Answer"]}
{"id": 107, "answer": true, "completion": ".decl Uses(Task:symbol, Tool:symbol)\nUses(\"ontology\", \"computer\").\nUses(\"ontology\", \"pen\").\nUses(\"ontology\", \"paper\").\n.decl Answer()\nAnswer() :- !Uses(\"ontology\", \"scalpel\").\n.output Answer", "completions": [".decl Uses(Task:symbol, Tool:symbol)\nUses(\"ontology\", \"computer\").\nUses(\"ontology\", \"pen\").\nUses(\"ontology\", \"paper\").\n.decl Answer()\nAnswer() :- !Uses(\"ontology\", \"scalpel\").\n.output Answer"]}
{"id": 108, "answer": false, "completion": ".decl Was_present(Person:symbol, Event:symbol)\nWas_present(\"King Arthur\", \"Battle of Camlann\").\nWas_present(\"Anne Boleyn\", \"beheading\").\n.decl Answer()\nAnswer() :- Was_present(\"King Arthur\", event), Was_present(\"Anne Boleyn\", event), !(event = \"Battle of Camlann\").\n.output Answer", "completions": [".decl Was_present(Person:symbol, Event:symbol)\nWas_present(\"King Arthur\", \"Battle of Camlann\").\nWas_present(\"Anne Boleyn\", \"beheading\").\n.decl Answer()\nAnswer() :- Was_present(\"King Arthur\", event), Was_present(\"Anne Boleyn\", event), !(event = \"Battle of Camlann\").\n.output Answer"]}
{"id": 109, "answer": false, "completion": ".decl Supports(Person:symbol, Ideology:symbol)\nSupports(\"Alexander Graham Bell\", \"eugenics\").\n.decl Answer()\nAnswer() :- Supports(\"Alexander Graham Bell\", \"Nazi eugenics\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Ideology:symbol)\nSupports(\"Alexander Graham Bell\", \"eugenics\").\n.decl Answer()\nAnswer() :- Supports(\"Alexander Graham Bell\", \"Nazi eugenics\").\n.output Answer"]}
{"id": 110, "answer": false, "completion": ".decl Affects(Event:symbol, Presidency:symbol)\nAffects(\"twenty-third Amendment to the US Constitution\", \"Harry Truman's presidency\").\n.decl Answer()\nAnswer() :- !Affects(\"twenty-third Amendment to the US Constitution\", \"Harry Truman's presidency\").\n.output Answer", "completions": [".decl Affects(Event:symbol, Presidency:symbol)\nAffects(\"twenty-third Amendment to the US Constitution\", \"Harry Truman's presidency\").\n.decl Answer()\nAnswer() :- !Affects(\"twenty-third Amendment to the US Constitution\", \"Harry Truman's presidency\").\n.output Answer"]}
{"id": 111, "answer": true, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"trees changing colors\", \"September\").\n.decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"trees changing colors\", \"Auburn, New York\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"trees changing colors\", month), Happens_in_location(\"trees changing colors\", \"Auburn, New York\").\n.output Answer", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"trees changing colors\", \"September\").\n.decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"trees changing colors\", \"Auburn, New York\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"trees changing colors\", month), Happens_in_location(\"trees changing colors\", \"Auburn, New York\").\n.output Answer"]}
{"id": 112, "answer": true, "completion": ".decl Connected_with(Event_A:symbol, Event_B:symbol)\n.decl Answer()\nAnswer() :- !Connected_with(\"Black Lives Matter\", \"capsaicin\").\n.output Answer", "completions": [".decl Connected_with(Event_A:symbol, Event_B:symbol)\n.decl Answer()\nAnswer() :- !Connected_with(\"Black Lives Matter\", \"capsaicin\").\n.output Answer"]}
{"id": 113, "answer": false, "completion": ".decl Is_descendent_of(Person:symbol, Ancestor:symbol)\nIs_descendent_of(\"Achilles\", \"Thetis\").\nIs_descendent_of(\"Thetis\", \"Nereus\").\nIs_descendent_of(\"Nereus\", \"Pontus\").\nIs_descendent_of(\"Pontus\", \"Gaia\").\n.decl Answer()\nAnswer() :- Is_descendent_of(\"Achilles\", \"Gaia\").\n.output Answer", "completions": [".decl Is_descendent_of(Person:symbol, Ancestor:symbol)\nIs_descendent_of(\"Achilles\", \"Thetis\").\nIs_descendent_of(\"Thetis\", \"Nereus\").\nIs_descendent_of(\"Nereus\", \"Pontus\").\nIs_descendent_of(\"Pontus\", \"Gaia\").\n.decl Answer()\nAnswer() :- Is_descendent_of(\"Achilles\", \"Gaia\").\n.output Answer"]}
{"id": 114, "answer": true, "completion": ".decl Hangs_out_at(Person:symbol, Place:symbol)\nHangs_out_at(\"Jerry Seinfeld\", \"Comedians in Cars Getting Coffee\").\n.decl Answer()\nAnswer() :- !Hangs_out_at(\"Jerry Seinfeld\", \"Budweiser Party Deck\").\n.output Answer", "completions": [".decl Hangs_out_at(Person:symbol, Place:symbol)\nHangs_out_at(\"Jerry Seinfeld\", \"Comedians in Cars Getting Coffee\").\n.decl Answer()\nAnswer() :- !Hangs_out_at(\"Jerry Seinfeld\", \"Budweiser Party Deck\").\n.output Answer"]}
{"id": 115, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"basketball\", 10).\nHas_size(\"sand cat's ear\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"basketball\", size1), Has_size(\"sand cat's ear\", size2), size1 > size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"basketball\", 10).\nHas_size(\"sand cat's ear\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"basketball\", size1), Has_size(\"sand cat's ear\", size2), size1 > size2.\n.output Answer"]}
{"id": 116, "answer": true, "completion": ".decl Competes_in(Group:symbol, Sport:symbol)\nCompetes_in(\"Spice Girls\", \"singing\").\nCompetes_in(\"ŽRK Kumanovo\", \"handball\").\n.decl Answer()\nAnswer() :- !Competes_in(\"Spice Girls\", sport), Competes_in(\"ŽRK Kumanovo\", sport).\n.output Answer", "completions": [".decl Competes_in(Group:symbol, Sport:symbol)\nCompetes_in(\"Spice Girls\", \"singing\").\nCompetes_in(\"ŽRK Kumanovo\", \"handball\").\n.decl Answer()\nAnswer() :- !Competes_in(\"Spice Girls\", sport), Competes_in(\"ŽRK Kumanovo\", sport).\n.output Answer"]}
{"id": 117, "answer": true, "completion": ".decl Has_uses(Symbol:symbol, Use:symbol)\nHas_uses(\"swastika\", \"positive\").\n.decl Answer()\nAnswer() :- Has_uses(\"swastika\", \"positive\").\n.output Answer", "completions": [".decl Has_uses(Symbol:symbol, Use:symbol)\nHas_uses(\"swastika\", \"positive\").\n.decl Answer()\nAnswer() :- Has_uses(\"swastika\", \"positive\").\n.output Answer"]}
{"id": 118, "answer": true, "completion": ".decl Appears_in(Insect:symbol, Film:symbol)\nAppears_in(\"black fly\", \"The Fly\").\nAppears_in(\"mosquito\", \"The Fly\").\n.decl Released_in(Film:symbol, Year:float)\nReleased_in(\"The Fly\", 1986).\n.decl Answer()\nAnswer() :- Appears_in(\"black fly\", film), Appears_in(insect, film), Released_in(film, 1986), insect != \"black fly\".\n.output Answer", "completions": [".decl Appears_in(Insect:symbol, Film:symbol)\nAppears_in(\"black fly\", \"The Fly\").\nAppears_in(\"mosquito\", \"The Fly\").\n.decl Released_in(Film:symbol, Year:float)\nReleased_in(\"The Fly\", 1986).\n.decl Answer()\nAnswer() :- Appears_in(\"black fly\", film), Appears_in(insect, film), Released_in(film, 1986), insect != \"black fly\".\n.output Answer"]}
{"id": 119, "answer": true, "completion": ".decl Edited(Editor:symbol, Draft:symbol)\nEdited(\"Linnaeus\", \"Origin of Species\").\n.decl Answer()\nAnswer() :- Edited(\"Linnaeus\", \"Origin of Species\").\n.output Answer", "completions": [".decl Edited(Editor:symbol, Draft:symbol)\nEdited(\"Linnaeus\", \"Origin of Species\").\n.decl Answer()\nAnswer() :- Edited(\"Linnaeus\", \"Origin of Species\").\n.output Answer"]}
{"id": 120, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"John\", \"cancer\").\n.decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"John\", \"disability\").\n.decl Answer()\nAnswer() :- Has_disease(person, \"cancer\"), Has_disability(person, \"disability\").\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"John\", \"cancer\").\n.decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"John\", \"disability\").\n.decl Answer()\nAnswer() :- Has_disease(person, \"cancer\"), Has_disability(person, \"disability\").\n.output Answer"]}
{"id": 121, "answer": false, "completion": ".decl Affects(Event:symbol, Person:symbol)\nAffects(\"death of Helen Palmer\", \"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Affects(\"death of Helen Palmer\", \"Dr. Seuss\").\n.output Answer", "completions": [".decl Affects(Event:symbol, Person:symbol)\nAffects(\"death of Helen Palmer\", \"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Affects(\"death of Helen Palmer\", \"Dr. Seuss\").\n.output Answer"]}
{"id": 122, "answer": true, "completion": ".decl Can_get_illness(Animal:symbol, Illness:symbol)\nCan_get_illness(\"fish\", \"Tonsillitis\").\n.decl Answer()\nAnswer() :- Can_get_illness(animal, \"Tonsillitis\").\n.output Answer", "completions": [".decl Can_get_illness(Animal:symbol, Illness:symbol)\nCan_get_illness(\"fish\", \"Tonsillitis\").\n.decl Answer()\nAnswer() :- Can_get_illness(animal, \"Tonsillitis\").\n.output Answer"]}
{"id": 123, "answer": true, "completion": ".decl Has_transport(Event:symbol, Transport:symbol)\nHas_transport(\"Burning Man\", \"car\").\n.decl Answer()\nAnswer() :- Has_transport(\"Burning Man\", transport), transport != \"Mayflower\".\n.output Answer", "completions": [".decl Has_transport(Event:symbol, Transport:symbol)\nHas_transport(\"Burning Man\", \"car\").\n.decl Answer()\nAnswer() :- Has_transport(\"Burning Man\", transport), transport != \"Mayflower\".\n.output Answer"]}
{"id": 124, "answer": true, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Lupita Nyongo\", \"Kenya\").\n.decl Is_origin_country(Country:symbol, Family:symbol)\nIs_origin_country(\"Kenya\", \"Obama\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Lupita Nyongo\", country), Is_origin_country(country, \"Obama\").\n.output Answer", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Lupita Nyongo\", \"Kenya\").\n.decl Is_origin_country(Country:symbol, Family:symbol)\nIs_origin_country(\"Kenya\", \"Obama\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Lupita Nyongo\", country), Is_origin_country(country, \"Obama\").\n.output Answer"]}
{"id": 125, "answer": false, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 67000000).\n.decl Has_n_records(Artist:symbol, N_records:float)\nHas_n_records(\"Jonny Cash\", 500).\n.decl Answer()\nAnswer() :- Has_population(\"France\", population), Has_n_records(\"Jonny Cash\", n_records), n_records >= population.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 67000000).\n.decl Has_n_records(Artist:symbol, N_records:float)\nHas_n_records(\"Jonny Cash\", 500).\n.decl Answer()\nAnswer() :- Has_population(\"France\", population), Has_n_records(\"Jonny Cash\", n_records), n_records >= population.\n.output Answer"]}
{"id": 126, "answer": false, "completion": ".decl Has_smell(Object:symbol, Smell:symbol)\nHas_smell(\"brussels sprouts\", \"earthy\").\nHas_smell(\"fart\", \"pungent\").\n.decl Answer()\nAnswer() :- Has_smell(\"brussels sprouts\", smell1), Has_smell(\"fart\", smell2), smell1 = smell2.\n.output Answer", "completions": [".decl Has_smell(Object:symbol, Smell:symbol)\nHas_smell(\"brussels sprouts\", \"earthy\").\nHas_smell(\"fart\", \"pungent\").\n.decl Answer()\nAnswer() :- Has_smell(\"brussels sprouts\", smell1), Has_smell(\"fart\", smell2), smell1 = smell2.\n.output Answer"]}
{"id": 127, "answer": true, "completion": ".decl Can_apply_finisher(Person:symbol, Animal:symbol)\nCan_apply_finisher(\"Stone Cold Steve Austin\", \"human\").\n.decl Answer()\nAnswer() :- !Can_apply_finisher(\"Stone Cold Steve Austin\", \"mule deer\").\n.output Answer", "completions": [".decl Can_apply_finisher(Person:symbol, Animal:symbol)\nCan_apply_finisher(\"Stone Cold Steve Austin\", \"human\").\n.decl Answer()\nAnswer() :- !Can_apply_finisher(\"Stone Cold Steve Austin\", \"mule deer\").\n.output Answer"]}
{"id": 128, "answer": false, "completion": ".decl Is_in_relationship(Person:symbol, Relationship:symbol)\nIs_in_relationship(\"Joker\", \"unhealthy\").\n.decl Answer()\nAnswer() :- Is_in_relationship(\"Joker\", relationship), relationship != \"healthy\".\n.output Answer", "completions": [".decl Is_in_relationship(Person:symbol, Relationship:symbol)\nIs_in_relationship(\"Joker\", \"unhealthy\").\n.decl Answer()\nAnswer() :- Is_in_relationship(\"Joker\", relationship), relationship != \"healthy\".\n.output Answer"]}
{"id": 129, "answer": true, "completion": ".decl Is_traditional_boat(Boat:symbol, Country:symbol)\nIs_traditional_boat(\"kayak\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Is_traditional_boat(\"kayak\", \"New Zealand\").\n.output Answer", "completions": [".decl Is_traditional_boat(Boat:symbol, Country:symbol)\nIs_traditional_boat(\"kayak\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Is_traditional_boat(\"kayak\", \"New Zealand\").\n.output Answer"]}
{"id": 130, "answer": true, "completion": ".decl Watches(Person:symbol, Event:symbol)\nWatches(\"Boris Yeltsin\", \"2008 Summer Olympics\").\n.decl Answer()\nAnswer() :- Watches(\"Boris Yeltsin\", \"2008 Summer Olympics\").\n.output Answer", "completions": [".decl Watches(Person:symbol, Event:symbol)\nWatches(\"Boris Yeltsin\", \"2008 Summer Olympics\").\n.decl Answer()\nAnswer() :- Watches(\"Boris Yeltsin\", \"2008 Summer Olympics\").\n.output Answer"]}
{"id": 131, "answer": true, "completion": ".decl Has_role(Actor:symbol, Film:symbol)\nHas_role(\"swallow\", \"Monty Python and the Holy Grail\").\n.decl Is_about(Film:symbol, Topic:symbol)\nIs_about(\"Monty Python and the Holy Grail\", \"King Arthur\").\n.decl Answer()\nAnswer() :- Has_role(\"swallow\", film), Is_about(film, \"King Arthur\").\n.output Answer", "completions": [".decl Has_role(Actor:symbol, Film:symbol)\nHas_role(\"swallow\", \"Monty Python and the Holy Grail\").\n.decl Is_about(Film:symbol, Topic:symbol)\nIs_about(\"Monty Python and the Holy Grail\", \"King Arthur\").\n.decl Answer()\nAnswer() :- Has_role(\"swallow\", film), Is_about(film, \"King Arthur\").\n.output Answer"]}
{"id": 132, "answer": false, "completion": ".decl Attended(Person:symbol, University:symbol)\nAttended(\"Michael Crichton\", \"Harvard University\").\n.decl Has_GPA(Person:symbol, GPA:float)\nHas_GPA(\"Michael Crichton\", 3.5).\n.decl Answer()\nAnswer() :- Attended(\"Michael Crichton\", \"Harvard University\"), Has_GPA(\"Michael Crichton\", gpa), gpa < 2.0.\n.output Answer", "completions": [".decl Attended(Person:symbol, University:symbol)\nAttended(\"Michael Crichton\", \"Harvard University\").\n.decl Has_GPA(Person:symbol, GPA:float)\nHas_GPA(\"Michael Crichton\", 3.5).\n.decl Answer()\nAnswer() :- Attended(\"Michael Crichton\", \"Harvard University\"), Has_GPA(\"Michael Crichton\", gpa), gpa < 2.0.\n.output Answer"]}
{"id": 133, "answer": true, "completion": ".decl Popular_in_time(Activity:symbol, Time:symbol)\nPopular_in_time(\"surfing\", \"1990s\").\nPopular_in_time(\"pogs\", \"1990s\").\n.decl Answer()\nAnswer() :- Popular_in_time(\"surfing\", time), Popular_in_time(\"pogs\", time).\n.output Answer", "completions": [".decl Popular_in_time(Activity:symbol, Time:symbol)\nPopular_in_time(\"surfing\", \"1990s\").\nPopular_in_time(\"pogs\", \"1990s\").\n.decl Answer()\nAnswer() :- Popular_in_time(\"surfing\", time), Popular_in_time(\"pogs\", time).\n.output Answer"]}
{"id": 134, "answer": false, "completion": ".decl Lives_in_location(Animal:symbol, Location:symbol)\nLives_in_location(\"caracal\", \"Africa\").\n.decl Attends_university(Person:symbol, University:symbol)\nAttends_university(\"student\", \"University of Houston\").\n.decl Answer()\nAnswer() :- Lives_in_location(\"caracal\", location), Attends_university(\"student\", university), location != university.\n.output Answer", "completions": [".decl Lives_in_location(Animal:symbol, Location:symbol)\nLives_in_location(\"caracal\", \"Africa\").\n.decl Attends_university(Person:symbol, University:symbol)\nAttends_university(\"student\", \"University of Houston\").\n.decl Answer()\nAnswer() :- Lives_in_location(\"caracal\", location), Attends_university(\"student\", university), location != university.\n.output Answer"]}
{"id": 135, "answer": false, "completion": ".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Joel Coen\", \"Ethan Coen\").\n.decl Answer()\nAnswer() :- Collaborates(\"Joel Coen\", \"Ethan Coen\"), Collaborates(\"Ethan Coen\", \"Brothers Grimm\").\n.output Answer", "completions": [".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Joel Coen\", \"Ethan Coen\").\n.decl Answer()\nAnswer() :- Collaborates(\"Joel Coen\", \"Ethan Coen\"), Collaborates(\"Ethan Coen\", \"Brothers Grimm\").\n.output Answer"]}
{"id": 136, "answer": false, "completion": ".decl Has_storage_capacity(Device:symbol, Storage_capacity:float)\nHas_storage_capacity(\"first generation iPhone\", 8).\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"lolcat\", 0.001).\n.decl Answer()\nAnswer() :- Has_storage_capacity(\"first generation iPhone\", storage_capacity), Has_size(\"lolcat\", size), storage_capacity >= 100000 * size.\n.output Answer", "completions": [".decl Has_storage_capacity(Device:symbol, Storage_capacity:float)\nHas_storage_capacity(\"first generation iPhone\", 8).\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"lolcat\", 0.001).\n.decl Answer()\nAnswer() :- Has_storage_capacity(\"first generation iPhone\", storage_capacity), Has_size(\"lolcat\", size), storage_capacity >= 100000 * size.\n.output Answer"]}
{"id": 137, "answer": false, "completion": ".decl Follows_rule(Group:symbol, Rule:symbol)\nFollows_rule(\"monks\", \"non-violence\").\n.decl Answer()\nAnswer() :- Follows_rule(\"monks\", \"non-violence\"), !Follows_rule(\"monks\", \"engaging in warfare\").\n.output Answer", "completions": [".decl Follows_rule(Group:symbol, Rule:symbol)\nFollows_rule(\"monks\", \"non-violence\").\n.decl Answer()\nAnswer() :- Follows_rule(\"monks\", \"non-violence\"), !Follows_rule(\"monks\", \"engaging in warfare\").\n.output Answer"]}
{"id": 138, "answer": true, "completion": ".decl Hosted_in(Service:symbol, Location:symbol)\nHosted_in(\"BBC World Service\", \"Europe\").\n.decl Answer()\nAnswer() :- Hosted_in(\"BBC World Service\", \"Europe\").\n.output Answer", "completions": [".decl Hosted_in(Service:symbol, Location:symbol)\nHosted_in(\"BBC World Service\", \"Europe\").\n.decl Answer()\nAnswer() :- Hosted_in(\"BBC World Service\", \"Europe\").\n.output Answer"]}
{"id": 139, "answer": false, "completion": ".decl Is_leap_year(Year:float)\nIs_leap_year(1996).\n.decl Answer()\nAnswer() :- Is_leap_year(year1), year1 + 4 = 2000.\n.output Answer", "completions": [".decl Is_leap_year(Year:float)\nIs_leap_year(1996).\n.decl Answer()\nAnswer() :- Is_leap_year(year1), year1 + 4 = 2000.\n.output Answer"]}
{"id": 140, "answer": true, "completion": ".decl Has_married(Person:symbol, N_wives:float)\nHas_married(\"Clark Gable\", 5).\nHas_married(\"Richard Burton\", 2).\n.decl Answer()\nAnswer() :- Has_married(\"Clark Gable\", n_wives1), Has_married(\"Richard Burton\", n_wives2), n_wives1 > n_wives2.\n.output Answer", "completions": [".decl Has_married(Person:symbol, N_wives:float)\nHas_married(\"Clark Gable\", 5).\nHas_married(\"Richard Burton\", 2).\n.decl Answer()\nAnswer() :- Has_married(\"Clark Gable\", n_wives1), Has_married(\"Richard Burton\", n_wives2), n_wives1 > n_wives2.\n.output Answer"]}
{"id": 141, "answer": false, "completion": ".decl Has_brains(Animal:symbol, N_brains:float)\nHas_brains(\"squid\", 2).\n.decl Has_power(Weapon:symbol, Power:float)\nHas_power(\"double-barreled shotgun\", 10).\n.decl Answer()\nAnswer() :- Has_brains(\"squid\", n_brains), Has_power(\"double-barreled shotgun\", power), power >= n_brains.\n.output Answer", "completions": [".decl Has_brains(Animal:symbol, N_brains:float)\nHas_brains(\"squid\", 2).\n.decl Has_power(Weapon:symbol, Power:float)\nHas_power(\"double-barreled shotgun\", 10).\n.decl Answer()\nAnswer() :- Has_brains(\"squid\", n_brains), Has_power(\"double-barreled shotgun\", power), power >= n_brains.\n.output Answer"]}
{"id": 142, "answer": true, "completion": ".decl Needs(Person:symbol, Item:symbol)\nNeeds(\"women\", \"new shoes\").\n.decl Happens_during(Event:symbol, Time:symbol)\nHappens_during(\"pregnancy\", \"9 months\").\n.decl Answer()\nAnswer() :- Needs(\"women\", \"new shoes\"), Happens_during(\"pregnancy\", \"9 months\").\n.output Answer", "completions": [".decl Needs(Person:symbol, Item:symbol)\nNeeds(\"women\", \"new shoes\").\n.decl Happens_during(Event:symbol, Time:symbol)\nHappens_during(\"pregnancy\", \"9 months\").\n.decl Answer()\nAnswer() :- Needs(\"women\", \"new shoes\"), Happens_during(\"pregnancy\", \"9 months\").\n.output Answer"]}
{"id": 143, "answer": false, "completion": ".decl Adherents_to(Religion:symbol, Country:symbol)\nAdherents_to(\"Christianity\", \"China\").\n.decl Enemies(Group_A:symbol, Group_B:symbol)\nEnemies(\"Catholic Church\", \"Protestant Church\").\n.decl Answer()\nAnswer() :- Adherents_to(religion, \"China\"), Enemies(group1, group2), (religion = \"Christianity\" and group1 = \"Catholic Church\" and group2 = \"Protestant Church\").\n.output Answer", "completions": [".decl Adherents_to(Religion:symbol, Country:symbol)\nAdherents_to(\"Christianity\", \"China\").\n.decl Enemies(Group_A:symbol, Group_B:symbol)\nEnemies(\"Catholic Church\", \"Protestant Church\").\n.decl Answer()\nAnswer() :- Adherents_to(religion, \"China\"), Enemies(group1, group2), (religion = \"Christianity\" and group1 = \"Catholic Church\" and group2 = \"Protestant Church\").\n.output Answer"]}
{"id": 144, "answer": true, "completion": ".decl Is_successor_to(Model_A:symbol, Model_B:symbol)\nIs_successor_to(\"Chinese successor to Chevrolet Cruze\", \"Chevrolet Cruze\").\n.decl Is_far_from(Town_A:symbol, Town_B:symbol)\nIs_far_from(\"Chinese successor to Chevrolet Cruze\", \"Milan\").\n.decl Answer()\nAnswer() :- Is_successor_to(model, \"Chevrolet Cruze\"), Is_far_from(model, \"Milan\").\n.output Answer", "completions": [".decl Is_successor_to(Model_A:symbol, Model_B:symbol)\nIs_successor_to(\"Chinese successor to Chevrolet Cruze\", \"Chevrolet Cruze\").\n.decl Is_far_from(Town_A:symbol, Town_B:symbol)\nIs_far_from(\"Chinese successor to Chevrolet Cruze\", \"Milan\").\n.decl Answer()\nAnswer() :- Is_successor_to(model, \"Chevrolet Cruze\"), Is_far_from(model, \"Milan\").\n.output Answer"]}
{"id": 145, "answer": false, "completion": ".decl Has_strength(Order:symbol, Strength:float)\nHas_strength(\"Dominican Order\", 10).\nHas_strength(\"Blessed Gerard's order\", 5).\n.decl Answer()\nAnswer() :- Has_strength(\"Dominican Order\", strength1), Has_strength(\"Blessed Gerard's order\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Order:symbol, Strength:float)\nHas_strength(\"Dominican Order\", 10).\nHas_strength(\"Blessed Gerard's order\", 5).\n.decl Answer()\nAnswer() :- Has_strength(\"Dominican Order\", strength1), Has_strength(\"Blessed Gerard's order\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 146, "answer": false, "completion": ".decl Used_for(Object:symbol, Activity:symbol)\nUsed_for(\"pottery kiln\", \"pottery\").\nUsed_for(\"glass blowing\", \"glass blowing\").\n.decl Answer()\nAnswer() :- Used_for(\"pottery kiln\", activity1), Used_for(\"glass blowing\", activity2), activity1 != activity2.\n.output Answer", "completions": [".decl Used_for(Object:symbol, Activity:symbol)\nUsed_for(\"pottery kiln\", \"pottery\").\nUsed_for(\"glass blowing\", \"glass blowing\").\n.decl Answer()\nAnswer() :- Used_for(\"pottery kiln\", activity1), Used_for(\"glass blowing\", activity2), activity1 != activity2.\n.output Answer"]}
{"id": 147, "answer": false, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Balkans\", 55000000).\nHas_population(\"Japan\", 126800000).\n.decl Answer()\nAnswer() :- Has_population(\"Balkans\", population1), Has_population(\"Japan\", population2), population1 >= population2.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Balkans\", 55000000).\nHas_population(\"Japan\", 126800000).\n.decl Answer()\nAnswer() :- Has_population(\"Balkans\", population1), Has_population(\"Japan\", population2), population1 >= population2.\n.output Answer"]}
{"id": 148, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Steven Spielberg\", 8).\n.decl Can_do(Person:symbol, Action:symbol)\nCan_do(\"Steven Spielberg\", \"send emails\").\n.decl Answer()\nAnswer() :- Has_age(\"Steven Spielberg\", age), age < 8, !Can_do(\"Steven Spielberg\", \"send emails\").\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Steven Spielberg\", 8).\n.decl Can_do(Person:symbol, Action:symbol)\nCan_do(\"Steven Spielberg\", \"send emails\").\n.decl Answer()\nAnswer() :- Has_age(\"Steven Spielberg\", age), age < 8, !Can_do(\"Steven Spielberg\", \"send emails\").\n.output Answer"]}
{"id": 149, "answer": false, "completion": ".decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"Charles Manson\", \"unwanted\").\n.decl Answer()\nAnswer() :- Has_status(\"Charles Manson\", status), status = \"unwanted\".\n.output Answer", "completions": [".decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"Charles Manson\", \"unwanted\").\n.decl Answer()\nAnswer() :- Has_status(\"Charles Manson\", status), status = \"unwanted\".\n.output Answer"]}
{"id": 150, "answer": false, "completion": ".decl Has_teeth(Animal:symbol, Teeth:float)\nHas_teeth(\"Beaver\", 20).\nHas_teeth(\"Smilodon\", 40).\n.decl Answer()\nAnswer() :- Has_teeth(\"Beaver\", teeth1), Has_teeth(\"Smilodon\", teeth2), teeth1 < teeth2.\n.output Answer", "completions": [".decl Has_teeth(Animal:symbol, Teeth:float)\nHas_teeth(\"Beaver\", 20).\nHas_teeth(\"Smilodon\", 40).\n.decl Answer()\nAnswer() :- Has_teeth(\"Beaver\", teeth1), Has_teeth(\"Smilodon\", teeth2), teeth1 < teeth2.\n.output Answer"]}
{"id": 151, "answer": false, "completion": ".decl Has_symptom(Condition:symbol, Symptom:symbol)\nHas_symptom(\"dysphoria\", \"pelvis\").\n.decl Treatable_without_surgery(Condition:symbol)\nTreatable_without_surgery(\"dysphoria\").\n.decl Answer()\nAnswer() :- Has_symptom(condition, \"pelvis\"), Treatable_without_surgery(condition).\n.output Answer", "completions": [".decl Has_symptom(Condition:symbol, Symptom:symbol)\nHas_symptom(\"dysphoria\", \"pelvis\").\n.decl Treatable_without_surgery(Condition:symbol)\nTreatable_without_surgery(\"dysphoria\").\n.decl Answer()\nAnswer() :- Has_symptom(condition, \"pelvis\"), Treatable_without_surgery(condition).\n.output Answer"]}
{"id": 152, "answer": true, "completion": ".decl Supports(Group:symbol, Element:symbol)\n.decl Answer()\nAnswer() :- !Supports(\"Blue Lives Matter\", element), element in [\"Grand Theft Auto III\"].\n.output Answer", "completions": [".decl Supports(Group:symbol, Element:symbol)\n.decl Answer()\nAnswer() :- !Supports(\"Blue Lives Matter\", element), element in [\"Grand Theft Auto III\"].\n.output Answer"]}
{"id": 153, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Dalai Lama\", 1.7).\nHas_size(\"car\", 4.5).\n.decl Answer()\nAnswer() :- Has_size(\"Dalai Lama\", size1), Has_size(\"car\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Dalai Lama\", 1.7).\nHas_size(\"car\", 4.5).\n.decl Answer()\nAnswer() :- Has_size(\"Dalai Lama\", size1), Has_size(\"car\", size2), size1 <= size2.\n.output Answer"]}
{"id": 154, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Dafne Keen\", 15).\n.decl Has_min_age(Event:symbol, Min_age:float)\nHas_min_age(\"Eurovision Song Contest finals\", 16).\n.decl Answer()\nAnswer() :- Has_age(\"Dafne Keen\", age), Has_min_age(\"Eurovision Song Contest finals\", min_age), age < min_age.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Dafne Keen\", 15).\n.decl Has_min_age(Event:symbol, Min_age:float)\nHas_min_age(\"Eurovision Song Contest finals\", 16).\n.decl Answer()\nAnswer() :- Has_age(\"Dafne Keen\", age), Has_min_age(\"Eurovision Song Contest finals\", min_age), age < min_age.\n.output Answer"]}
{"id": 155, "answer": true, "completion": ".decl Has_operation_record(Airline:symbol, Record:symbol)\nHas_operation_record(\"United Airlines\", \"good\").\n.decl Answer()\nAnswer() :- Has_operation_record(\"United Airlines\", record), record != \"perfect\".\n.output Answer", "completions": [".decl Has_operation_record(Airline:symbol, Record:symbol)\nHas_operation_record(\"United Airlines\", \"good\").\n.decl Answer()\nAnswer() :- Has_operation_record(\"United Airlines\", record), record != \"perfect\".\n.output Answer"]}
{"id": 156, "answer": false, "completion": ".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"United States Secretary of State\", \"diplomat\").\n.decl Has_law(Country:symbol, Law:symbol)\nHas_law(\"U.K.\", \"diplomatic immunity\").\n.decl Answer()\nAnswer() :- Has_position(person, \"diplomat\"), Has_law(\"U.K.\", law), law = \"diplomatic immunity\".\n.output Answer", "completions": [".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"United States Secretary of State\", \"diplomat\").\n.decl Has_law(Country:symbol, Law:symbol)\nHas_law(\"U.K.\", \"diplomatic immunity\").\n.decl Answer()\nAnswer() :- Has_position(person, \"diplomat\"), Has_law(\"U.K.\", law), law = \"diplomatic immunity\".\n.output Answer"]}
{"id": 157, "answer": true, "completion": ".decl Affects(Disease:symbol, Organ:symbol)\nAffects(\"myocardial infarction\", \"heart\").\n.decl Answer()\nAnswer() :- !Affects(\"myocardial infarction\", \"brain\").\n.output Answer", "completions": [".decl Affects(Disease:symbol, Organ:symbol)\nAffects(\"myocardial infarction\", \"heart\").\n.decl Answer()\nAnswer() :- !Affects(\"myocardial infarction\", \"brain\").\n.output Answer"]}
{"id": 158, "answer": true, "completion": ".decl Is_open(Business:symbol, Date:symbol)\nIs_open(\"Chick Fil A\", \"Halloween 2021\").\n.decl Answer()\nAnswer() :- Is_open(\"Chick Fil A\", \"Halloween 2021\").\n.output Answer", "completions": [".decl Is_open(Business:symbol, Date:symbol)\nIs_open(\"Chick Fil A\", \"Halloween 2021\").\n.decl Answer()\nAnswer() :- Is_open(\"Chick Fil A\", \"Halloween 2021\").\n.output Answer"]}
{"id": 159, "answer": false, "completion": ".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"Godfrey of Bouillon\", \"tolerant\").\n.decl Answer()\nAnswer() :- Has_opinion(\"Godfrey of Bouillon\", opinion), opinion != \"Islamaphobe\".\n.output Answer", "completions": [".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"Godfrey of Bouillon\", \"tolerant\").\n.decl Answer()\nAnswer() :- Has_opinion(\"Godfrey of Bouillon\", opinion), opinion != \"Islamaphobe\".\n.output Answer"]}
{"id": 160, "answer": false, "completion": ".decl Has_effect(Drink:symbol, Effect:symbol)\nHas_effect(\"espresso\", \"alertness\").\n.decl Answer()\nAnswer() :- Has_effect(\"espresso\", effect), effect != \"fear\".\n.output Answer", "completions": [".decl Has_effect(Drink:symbol, Effect:symbol)\nHas_effect(\"espresso\", \"alertness\").\n.decl Answer()\nAnswer() :- Has_effect(\"espresso\", effect), effect != \"fear\".\n.output Answer"]}
{"id": 161, "answer": true, "completion": ".decl Is_ingredient(Food:symbol, Ingredient:symbol)\nIs_ingredient(\"rice pudding\", \"rice\").\nIs_ingredient(\"rice pudding\", \"milk\").\nIs_ingredient(\"rice pudding\", \"sugar\").\nIs_ingredient(\"horchata\", \"rice\").\nIs_ingredient(\"horchata\", \"milk\").\nIs_ingredient(\"horchata\", \"sugar\").\nIs_ingredient(\"horchata\", \"water\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"rice pudding\", ingredient1), Is_ingredient(\"horchata\", ingredient2), ingredient1 = ingredient2.\n.output Answer", "completions": [".decl Is_ingredient(Food:symbol, Ingredient:symbol)\nIs_ingredient(\"rice pudding\", \"rice\").\nIs_ingredient(\"rice pudding\", \"milk\").\nIs_ingredient(\"rice pudding\", \"sugar\").\nIs_ingredient(\"horchata\", \"rice\").\nIs_ingredient(\"horchata\", \"milk\").\nIs_ingredient(\"horchata\", \"sugar\").\nIs_ingredient(\"horchata\", \"water\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"rice pudding\", ingredient1), Is_ingredient(\"horchata\", ingredient2), ingredient1 = ingredient2.\n.output Answer"]}
{"id": 162, "answer": false, "completion": ".decl Has_honors(Person:symbol, Honors:symbol)\nHas_honors(\"Bill Gates\", \"summa cum laude\").\n.decl Answer()\nAnswer() :- Has_honors(\"Bill Gates\", honors), honors = \"summa cum laude\" ; honors = \"magna cum laude\" ; honors = \"cum laude\".\n.output Answer", "completions": [".decl Has_honors(Person:symbol, Honors:symbol)\nHas_honors(\"Bill Gates\", \"summa cum laude\").\n.decl Answer()\nAnswer() :- Has_honors(\"Bill Gates\", honors), honors = \"summa cum laude\" ; honors = \"magna cum laude\" ; honors = \"cum laude\".\n.output Answer"]}
{"id": 163, "answer": false, "completion": ".decl Invented_in_format(Genre:symbol, Format:symbol)\nInvented_in_format(\"Superhero fiction\", \"print\").\n.decl Answer()\nAnswer() :- !Invented_in_format(\"Superhero fiction\", \"digital\").\n.output Answer", "completions": [".decl Invented_in_format(Genre:symbol, Format:symbol)\nInvented_in_format(\"Superhero fiction\", \"print\").\n.decl Answer()\nAnswer() :- !Invented_in_format(\"Superhero fiction\", \"digital\").\n.output Answer"]}
{"id": 164, "answer": true, "completion": ".decl Belongs_to_class(Animal:symbol, Class:symbol)\nBelongs_to_class(\"dragon\", \"Chordata\").\nBelongs_to_class(\"dog\", \"Chordata\").\nBelongs_to_class(\"rat\", \"Chordata\").\nBelongs_to_class(\"ox\", \"Chordata\").\nBelongs_to_class(\"tiger\", \"Chordata\").\nBelongs_to_class(\"rabbit\", \"Chordata\").\nBelongs_to_class(\"snake\", \"Chordata\").\nBelongs_to_class(\"horse\", \"Chordata\").\nBelongs_to_class(\"goat\", \"Chordata\").\nBelongs_to_class(\"monkey\", \"Chordata\").\nBelongs_to_class(\"rooster\", \"Chordata\").\nBelongs_to_class(\"pig\", \"Chordata\").\n.decl Answer()\nAnswer() :- Belongs_to_class(animal, \"Chordata\").\n.output Answer", "completions": [".decl Belongs_to_class(Animal:symbol, Class:symbol)\nBelongs_to_class(\"dragon\", \"Chordata\").\nBelongs_to_class(\"dog\", \"Chordata\").\nBelongs_to_class(\"rat\", \"Chordata\").\nBelongs_to_class(\"ox\", \"Chordata\").\nBelongs_to_class(\"tiger\", \"Chordata\").\nBelongs_to_class(\"rabbit\", \"Chordata\").\nBelongs_to_class(\"snake\", \"Chordata\").\nBelongs_to_class(\"horse\", \"Chordata\").\nBelongs_to_class(\"goat\", \"Chordata\").\nBelongs_to_class(\"monkey\", \"Chordata\").\nBelongs_to_class(\"rooster\", \"Chordata\").\nBelongs_to_class(\"pig\", \"Chordata\").\n.decl Answer()\nAnswer() :- Belongs_to_class(animal, \"Chordata\").\n.output Answer"]}
{"id": 165, "answer": false, "completion": ".decl Happens_in_book(Event:symbol, Book:symbol)\nHappens_in_book(\"Daniel thrown into the lion's den\", \"Book of Daniel\").\n.decl Is_in_testament(Book:symbol, Testament:symbol)\nIs_in_testament(\"Book of Daniel\", \"New Testament\").\n.decl Answer()\nAnswer() :- Happens_in_book(\"Daniel thrown into the lion's den\", book), Is_in_testament(book, \"New Testament\").\n.output Answer", "completions": [".decl Happens_in_book(Event:symbol, Book:symbol)\nHappens_in_book(\"Daniel thrown into the lion's den\", \"Book of Daniel\").\n.decl Is_in_testament(Book:symbol, Testament:symbol)\nIs_in_testament(\"Book of Daniel\", \"New Testament\").\n.decl Answer()\nAnswer() :- Happens_in_book(\"Daniel thrown into the lion's den\", book), Is_in_testament(book, \"New Testament\").\n.output Answer"]}
{"id": 166, "answer": false, "completion": ".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"elephant pregnancy\", 22).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"solar eclipse\", 12).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"elephant pregnancy\", n_months1), Happens_every_n_months(\"solar eclipse\", n_months2), n_months1 > 4*n_months2.\n.output Answer", "completions": [".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"elephant pregnancy\", 22).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"solar eclipse\", 12).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"elephant pregnancy\", n_months1), Happens_every_n_months(\"solar eclipse\", n_months2), n_months1 > 4*n_months2.\n.output Answer"]}
{"id": 167, "answer": false, "completion": ".decl Has_meaning(Word:symbol, Language:symbol)\nHas_meaning(\"swastika\", \"sanskrit\").\n.decl Answer()\nAnswer() :- Has_meaning(\"swastika\", \"sanskrit\").\n.output Answer", "completions": [".decl Has_meaning(Word:symbol, Language:symbol)\nHas_meaning(\"swastika\", \"sanskrit\").\n.decl Answer()\nAnswer() :- Has_meaning(\"swastika\", \"sanskrit\").\n.output Answer"]}
{"id": 168, "answer": false, "completion": ".decl Has_market_share(Company:symbol, Market_share:float)\nHas_market_share(\"Sony\", 0.6).\nHas_market_share(\"Sega\", 0.4).\n.decl Answer()\nAnswer() :- Has_market_share(\"Sony\", market_share1), Has_market_share(\"Sega\", market_share2), market_share1 > market_share2.\n.output Answer", "completions": [".decl Has_market_share(Company:symbol, Market_share:float)\nHas_market_share(\"Sony\", 0.6).\nHas_market_share(\"Sega\", 0.4).\n.decl Answer()\nAnswer() :- Has_market_share(\"Sony\", market_share1), Has_market_share(\"Sega\", market_share2), market_share1 > market_share2.\n.output Answer"]}
{"id": 169, "answer": true, "completion": ".decl Teaches(Professor:symbol, Class:symbol)\nTeaches(\"ethics professor\", \"ethics\").\nTeaches(\"art professor\", \"Cezanne\").\n.decl Answer()\nAnswer() :- Teaches(\"ethics professor\", class), Teaches(\"art professor\", class), class != \"ethics\".\n.output Answer", "completions": [".decl Teaches(Professor:symbol, Class:symbol)\nTeaches(\"ethics professor\", \"ethics\").\nTeaches(\"art professor\", \"Cezanne\").\n.decl Answer()\nAnswer() :- Teaches(\"ethics professor\", class), Teaches(\"art professor\", class), class != \"ethics\".\n.output Answer"]}
{"id": 170, "answer": false, "completion": ".decl Has_ability(Animal:symbol, Ability:symbol)\nHas_ability(\"dolphin\", \"communicate\").\n.decl Answer()\nAnswer() :- Has_ability(\"dolphin\", \"communicate\"), !Has_ability(\"dolphin\", \"write\").\n.output Answer", "completions": [".decl Has_ability(Animal:symbol, Ability:symbol)\nHas_ability(\"dolphin\", \"communicate\").\n.decl Answer()\nAnswer() :- Has_ability(\"dolphin\", \"communicate\"), !Has_ability(\"dolphin\", \"write\").\n.output Answer"]}
{"id": 171, "answer": true, "completion": ".decl Discovered_in_year(Object:symbol, Year:float)\nDiscovered_in_year(\"Durian trees\", 1511).\n.decl Answer()\nAnswer() :- Discovered_in_year(\"Durian trees\", year), year < 1492.\n.output Answer", "completions": [".decl Discovered_in_year(Object:symbol, Year:float)\nDiscovered_in_year(\"Durian trees\", 1511).\n.decl Answer()\nAnswer() :- Discovered_in_year(\"Durian trees\", year), year < 1492.\n.output Answer"]}
{"id": 172, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Chrysler\", 5.5).\nHas_size(\"laptop bag\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"Chrysler\", size1), Has_size(\"laptop bag\", size2), size1 > size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Chrysler\", 5.5).\nHas_size(\"laptop bag\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"Chrysler\", size1), Has_size(\"laptop bag\", size2), size1 > size2.\n.output Answer"]}
{"id": 173, "answer": true, "completion": ".decl Has_survived(Astronaut:symbol, Journey:symbol)\nHas_survived(\"Neil Armstrong\", \"Apollo 11\").\nHas_survived(\"Buzz Aldrin\", \"Apollo 11\").\n.decl Answer()\nAnswer() :- Has_survived(astronaut, journey), !Has_survived(astronaut, journey), false.\n.output Answer", "completions": [".decl Has_survived(Astronaut:symbol, Journey:symbol)\nHas_survived(\"Neil Armstrong\", \"Apollo 11\").\nHas_survived(\"Buzz Aldrin\", \"Apollo 11\").\n.decl Answer()\nAnswer() :- Has_survived(astronaut, journey), !Has_survived(astronaut, journey), false.\n.output Answer"]}
{"id": 174, "answer": false, "completion": ".decl Has_term_length(Position:symbol, Term_length:float)\nHas_term_length(\"Supreme Court of the United States\", life).\nHas_term_length(\"senator\", 6).\n.decl Answer()\nAnswer() :- Has_term_length(position1, term_length1), Has_term_length(position2, term_length2), position1 != position2, term_length1 > term_length2.\n.output Answer", "completions": [".decl Has_term_length(Position:symbol, Term_length:float)\nHas_term_length(\"Supreme Court of the United States\", life).\nHas_term_length(\"senator\", 6).\n.decl Answer()\nAnswer() :- Has_term_length(position1, term_length1), Has_term_length(position2, term_length2), position1 != position2, term_length1 > term_length2.\n.output Answer"]}
{"id": 175, "answer": false, "completion": ".decl Has_circle(Person:symbol, Circle:float)\nHas_circle(\"Nostradamus\", 3).\n.decl Answer()\nAnswer() :- Has_circle(\"Nostradamus\", circle).\n.output Answer", "completions": [".decl Has_circle(Person:symbol, Circle:float)\nHas_circle(\"Nostradamus\", 3).\n.decl Answer()\nAnswer() :- Has_circle(\"Nostradamus\", circle).\n.output Answer"]}
{"id": 176, "answer": true, "completion": ".decl Has_association(Company:symbol, Group:symbol)\nHas_association(\"Mercedes-Benz\", \"Nazis\").\n.decl Answer()\nAnswer() :- Has_association(\"Mercedes-Benz\", \"Nazis\").\n.output Answer", "completions": [".decl Has_association(Company:symbol, Group:symbol)\nHas_association(\"Mercedes-Benz\", \"Nazis\").\n.decl Answer()\nAnswer() :- Has_association(\"Mercedes-Benz\", \"Nazis\").\n.output Answer"]}
{"id": 177, "answer": true, "completion": ".decl Has_size(Resort:symbol, Size:float)\nHas_size(\"Disneyland Paris\", 10).\nHas_size(\"Disney World\", 20).\n.decl Answer()\nAnswer() :- Has_size(\"Disneyland Paris\", size1), Has_size(\"Disney World\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Resort:symbol, Size:float)\nHas_size(\"Disneyland Paris\", 10).\nHas_size(\"Disney World\", 20).\n.decl Answer()\nAnswer() :- Has_size(\"Disneyland Paris\", size1), Has_size(\"Disney World\", size2), size1 < size2.\n.output Answer"]}
{"id": 178, "answer": false, "completion": ".decl Has_appearance(Person:symbol, Appearance:symbol)\nHas_appearance(\"Rockette\", \"feminine\").\nHas_appearance(\"moustache\", \"masculine\").\n.decl Answer()\nAnswer() :- Has_appearance(\"Rockette\", appearance1), Has_appearance(\"moustache\", appearance2), appearance1 != appearance2.\n.output Answer", "completions": [".decl Has_appearance(Person:symbol, Appearance:symbol)\nHas_appearance(\"Rockette\", \"feminine\").\nHas_appearance(\"moustache\", \"masculine\").\n.decl Answer()\nAnswer() :- Has_appearance(\"Rockette\", appearance1), Has_appearance(\"moustache\", appearance2), appearance1 != appearance2.\n.output Answer"]}
{"id": 179, "answer": true, "completion": ".decl Can_do(Animal:symbol, Activity:symbol)\nCan_do(\"sea turtle\", \"swim\").\n.decl Answer()\nAnswer() :- !Can_do(\"sea turtle\", \"play tennis using a tennis racket\").\n.output Answer", "completions": [".decl Can_do(Animal:symbol, Activity:symbol)\nCan_do(\"sea turtle\", \"swim\").\n.decl Answer()\nAnswer() :- !Can_do(\"sea turtle\", \"play tennis using a tennis racket\").\n.output Answer"]}
{"id": 180, "answer": true, "completion": ".decl Has_idea(Person:symbol, Idea:symbol)\nHas_idea(\"Donald Trump\", \"Trump Tower\").\n.decl Answer()\nAnswer() :- !Has_idea(\"Donald Trump\", \"New York Harbor\").\n.output Answer", "completions": [".decl Has_idea(Person:symbol, Idea:symbol)\nHas_idea(\"Donald Trump\", \"Trump Tower\").\n.decl Answer()\nAnswer() :- !Has_idea(\"Donald Trump\", \"New York Harbor\").\n.output Answer"]}
{"id": 181, "answer": true, "completion": ".decl Is_legal(Activity:symbol, Legality:symbol)\nIs_legal(\"drug deals\", \"illegal\").\nIs_legal(\"using paypal\", \"legal\").\n.decl Answer()\nAnswer() :- Is_legal(\"drug deals\", \"illegal\"), Is_legal(\"using paypal\", \"legal\").\n.output Answer", "completions": [".decl Is_legal(Activity:symbol, Legality:symbol)\nIs_legal(\"drug deals\", \"illegal\").\nIs_legal(\"using paypal\", \"legal\").\n.decl Answer()\nAnswer() :- Is_legal(\"drug deals\", \"illegal\"), Is_legal(\"using paypal\", \"legal\").\n.output Answer"]}
{"id": 182, "answer": true, "completion": ".decl Is_safe_to_eat(Food:symbol, Safety:symbol)\nIs_safe_to_eat(\"kidney\", \"yes\").\n.decl Answer()\nAnswer() :- Is_safe_to_eat(\"kidney\", safety), safety = \"yes\".\n.output Answer", "completions": [".decl Is_safe_to_eat(Food:symbol, Safety:symbol)\nIs_safe_to_eat(\"kidney\", \"yes\").\n.decl Answer()\nAnswer() :- Is_safe_to_eat(\"kidney\", safety), safety = \"yes\".\n.output Answer"]}
{"id": 183, "answer": true, "completion": ".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"shrimp\", \"best\").\nHas_taste(\"shrimp\", \"good\").\nHas_taste(\"shrimp\", \"okay\").\nHas_taste(\"shrimp\", \"bad\").\nHas_taste(\"shrimp\", \"terrible\").\n.decl Cook_time(Food:symbol, Time:symbol)\nCook_time(\"shrimp\", \"long\").\nCook_time(\"shrimp\", \"short\").\n.decl Answer()\nAnswer() :- Has_taste(\"shrimp\", \"best\"), Cook_time(\"shrimp\", \"long\").\n.output Answer", "completions": [".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"shrimp\", \"best\").\nHas_taste(\"shrimp\", \"good\").\nHas_taste(\"shrimp\", \"okay\").\nHas_taste(\"shrimp\", \"bad\").\nHas_taste(\"shrimp\", \"terrible\").\n.decl Cook_time(Food:symbol, Time:symbol)\nCook_time(\"shrimp\", \"long\").\nCook_time(\"shrimp\", \"short\").\n.decl Answer()\nAnswer() :- Has_taste(\"shrimp\", \"best\"), Cook_time(\"shrimp\", \"long\").\n.output Answer"]}
{"id": 184, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"African elephant\", 6500).\nHas_weight(\"Hulk\", 10000).\n.decl Answer()\nAnswer() :- Has_weight(\"African elephant\", weight1), Has_weight(\"Hulk\", weight2), weight2 > weight1.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"African elephant\", 6500).\nHas_weight(\"Hulk\", 10000).\n.decl Answer()\nAnswer() :- Has_weight(\"African elephant\", weight1), Has_weight(\"Hulk\", weight2), weight2 > weight1.\n.output Answer"]}
{"id": 185, "answer": true, "completion": ".decl Has_history(Entity:symbol, History:float)\nHas_history(\"Rupert Murdoch's alma mater\", 100).\nHas_history(\"USA\", 50).\n.decl Answer()\nAnswer() :- Has_history(\"Rupert Murdoch's alma mater\", history1), Has_history(\"USA\", history2), history1 > history2.\n.output Answer", "completions": [".decl Has_history(Entity:symbol, History:float)\nHas_history(\"Rupert Murdoch's alma mater\", 100).\nHas_history(\"USA\", 50).\n.decl Answer()\nAnswer() :- Has_history(\"Rupert Murdoch's alma mater\", history1), Has_history(\"USA\", history2), history1 > history2.\n.output Answer"]}
{"id": 186, "answer": true, "completion": ".decl Named_after(Object:symbol, Person:symbol)\nNamed_after(\"Saturn\", \"Cronus\").\n.decl Is_king_of_gods(Person:symbol)\nIs_king_of_gods(\"Cronus\").\n.decl Answer()\nAnswer() :- Named_after(\"Saturn\", person), Is_king_of_gods(person).\n.output Answer", "completions": [".decl Named_after(Object:symbol, Person:symbol)\nNamed_after(\"Saturn\", \"Cronus\").\n.decl Is_king_of_gods(Person:symbol)\nIs_king_of_gods(\"Cronus\").\n.decl Answer()\nAnswer() :- Named_after(\"Saturn\", person), Is_king_of_gods(person).\n.output Answer"]}
{"id": 187, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"American Independence Day\", \"July\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"July\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"American Independence Day\", month), In_season(month, \"autumn\"), !In_season(month, \"summer\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"American Independence Day\", \"July\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"July\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"American Independence Day\", month), In_season(month, \"autumn\"), !In_season(month, \"summer\").\n.output Answer"]}
{"id": 188, "answer": false, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"Albany, Georgia\", 77.434).\nHas_population(\"Albany, New York\", 97.856).\n.decl Answer()\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, New York\", population2), population1 > population2.\n.output Answer", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"Albany, Georgia\", 77.434).\nHas_population(\"Albany, New York\", 97.856).\n.decl Answer()\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, New York\", population2), population1 > population2.\n.output Answer"]}
{"id": 189, "answer": false, "completion": ".decl Is_from(Person:symbol, Region:symbol)\nIs_from(\"Niklas Zennström\", \"Sweden\").\nIs_from(\"Janus Friis\", \"Denmark\").\n.decl Is_in_region(Region:symbol, Continent:symbol)\nIs_in_region(\"Sweden\", \"Europe\").\nIs_in_region(\"Denmark\", \"Europe\").\n.decl Answer()\nAnswer() :- Is_from(person, region), Is_in_region(region, continent), !(continent = \"Asia\").\n.output Answer", "completions": [".decl Is_from(Person:symbol, Region:symbol)\nIs_from(\"Niklas Zennström\", \"Sweden\").\nIs_from(\"Janus Friis\", \"Denmark\").\n.decl Is_in_region(Region:symbol, Continent:symbol)\nIs_in_region(\"Sweden\", \"Europe\").\nIs_in_region(\"Denmark\", \"Europe\").\n.decl Answer()\nAnswer() :- Is_from(person, region), Is_in_region(region, continent), !(continent = \"Asia\").\n.output Answer"]}
{"id": 190, "answer": false, "completion": ".decl Has_pages(Book:symbol, Pages:float)\nHas_pages(\"Bible\", 1189).\n.decl Has_n_days(Year:symbol, N_days:float)\nHas_n_days(\"year\", 365).\n.decl Answer()\nAnswer() :- Has_pages(\"Bible\", pages), Has_n_days(\"year\", n_days), n_days/7 >= pages/15.\n.output Answer", "completions": [".decl Has_pages(Book:symbol, Pages:float)\nHas_pages(\"Bible\", 1189).\n.decl Has_n_days(Year:symbol, N_days:float)\nHas_n_days(\"year\", 365).\n.decl Answer()\nAnswer() :- Has_pages(\"Bible\", pages), Has_n_days(\"year\", n_days), n_days/7 >= pages/15.\n.output Answer"]}
{"id": 191, "answer": false, "completion": ".decl Retired(Person:symbol, Year:float)\nRetired(\"Eugene Allen\", 1986).\n.decl Ended(War:symbol, Year:float)\nEnded(\"Centuries-old War\", 1945).\n.decl Answer()\nAnswer() :- Retired(\"Eugene Allen\", year1), Ended(\"Centuries-old War\", year2), year1 = year2.\n.output Answer", "completions": [".decl Retired(Person:symbol, Year:float)\nRetired(\"Eugene Allen\", 1986).\n.decl Ended(War:symbol, Year:float)\nEnded(\"Centuries-old War\", 1945).\n.decl Answer()\nAnswer() :- Retired(\"Eugene Allen\", year1), Ended(\"Centuries-old War\", year2), year1 = year2.\n.output Answer"]}
{"id": 192, "answer": true, "completion": ".decl Writes(Person:symbol, Work:symbol)\nWrites(\"Charles Wesley\", \"Hark! The Herald Angels Sing\").\n.decl Observes(Person:symbol, Ritual:symbol)\nObserves(\"Charles Wesley\", \"Christianity\").\n.decl Ramadan(Year:float)\nRamadan(1739).\n.decl Answer()\nAnswer() :- Writes(\"Charles Wesley\", \"Hark! The Herald Angels Sing\"), Observes(\"Charles Wesley\", \"Christianity\"), Ramadan(year), year < 1739.\n.output Answer", "completions": [".decl Writes(Person:symbol, Work:symbol)\nWrites(\"Charles Wesley\", \"Hark! The Herald Angels Sing\").\n.decl Observes(Person:symbol, Ritual:symbol)\nObserves(\"Charles Wesley\", \"Christianity\").\n.decl Ramadan(Year:float)\nRamadan(1739).\n.decl Answer()\nAnswer() :- Writes(\"Charles Wesley\", \"Hark! The Herald Angels Sing\"), Observes(\"Charles Wesley\", \"Christianity\"), Ramadan(year), year < 1739.\n.output Answer"]}
{"id": 193, "answer": true, "completion": ".decl Has_lifespan(Organism:symbol, Lifespan:float)\nHas_lifespan(\"tree\", 1000).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Common Era\", 2020).\n.decl Answer()\nAnswer() :- Has_lifespan(\"tree\", lifespan), Last_n_years(\"Common Era\", n_years), lifespan > n_years.\n.output Answer", "completions": [".decl Has_lifespan(Organism:symbol, Lifespan:float)\nHas_lifespan(\"tree\", 1000).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Common Era\", 2020).\n.decl Answer()\nAnswer() :- Has_lifespan(\"tree\", lifespan), Last_n_years(\"Common Era\", n_years), lifespan > n_years.\n.output Answer"]}
{"id": 194, "answer": false, "completion": ".decl Has_qualifications(Person:symbol, Qualification:symbol)\nHas_qualifications(\"Tange Sazen\", \"organizational skills\").\nHas_qualifications(\"Tange Sazen\", \"typing speed\").\nHas_qualifications(\"Tange Sazen\", \"communication skills\").\n.decl Is_required_for_job(Job:symbol, Qualification:symbol)\nIs_required_for_job(\"secretary job\", \"organizational skills\").\nIs_required_for_job(\"secretary job\", \"typing speed\").\nIs_required_for_job(\"secretary job\", \"communication skills\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Tange Sazen\", qualification), Is_required_for_job(\"secretary job\", qualification).\n.output Answer", "completions": [".decl Has_qualifications(Person:symbol, Qualification:symbol)\nHas_qualifications(\"Tange Sazen\", \"organizational skills\").\nHas_qualifications(\"Tange Sazen\", \"typing speed\").\nHas_qualifications(\"Tange Sazen\", \"communication skills\").\n.decl Is_required_for_job(Job:symbol, Qualification:symbol)\nIs_required_for_job(\"secretary job\", \"organizational skills\").\nIs_required_for_job(\"secretary job\", \"typing speed\").\nIs_required_for_job(\"secretary job\", \"communication skills\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Tange Sazen\", qualification), Is_required_for_job(\"secretary job\", qualification).\n.output Answer"]}
{"id": 195, "answer": true, "completion": ".decl Has_benefit(Food:symbol, Benefit:symbol)\nHas_benefit(\"Brussels sprout\", \"antioxidants\").\nHas_benefit(\"Brussels sprout\", \"vitamins\").\nHas_benefit(\"Brussels sprout\", \"minerals\").\n.decl Treats(Benefit:symbol, Condition:symbol)\nTreats(\"antioxidants\", \"adrenal fatigue\").\nTreats(\"vitamins\", \"adrenal fatigue\").\nTreats(\"minerals\", \"adrenal fatigue\").\n.decl Answer()\nAnswer() :- Has_benefit(\"Brussels sprout\", benefit), Treats(benefit, \"adrenal fatigue\").\n.output Answer", "completions": [".decl Has_benefit(Food:symbol, Benefit:symbol)\nHas_benefit(\"Brussels sprout\", \"antioxidants\").\nHas_benefit(\"Brussels sprout\", \"vitamins\").\nHas_benefit(\"Brussels sprout\", \"minerals\").\n.decl Treats(Benefit:symbol, Condition:symbol)\nTreats(\"antioxidants\", \"adrenal fatigue\").\nTreats(\"vitamins\", \"adrenal fatigue\").\nTreats(\"minerals\", \"adrenal fatigue\").\n.decl Answer()\nAnswer() :- Has_benefit(\"Brussels sprout\", benefit), Treats(benefit, \"adrenal fatigue\").\n.output Answer"]}
{"id": 196, "answer": true, "completion": ".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Adam Sandler\", \"Christmas\").\n.decl Answer()\nAnswer() :- !Celebrates(\"Adam Sandler\", \"Easter\").\n.output Answer", "completions": [".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Adam Sandler\", \"Christmas\").\n.decl Answer()\nAnswer() :- !Celebrates(\"Adam Sandler\", \"Easter\").\n.output Answer"]}
{"id": 197, "answer": true, "completion": ".decl Begins_on_day(Month:symbol, Day:symbol)\nBegins_on_day(\"February\", \"Monday\").\nBegins_on_day(\"March\", \"Tuesday\").\n.decl Is_leap_year(Year:float)\nIs_leap_year(2020).\n.decl Answer()\nAnswer() :- Is_leap_year(year), Begins_on_day(\"February\", day1), Begins_on_day(\"March\", day2), day1 = day2.\n.output Answer", "completions": [".decl Begins_on_day(Month:symbol, Day:symbol)\nBegins_on_day(\"February\", \"Monday\").\nBegins_on_day(\"March\", \"Tuesday\").\n.decl Is_leap_year(Year:float)\nIs_leap_year(2020).\n.decl Answer()\nAnswer() :- Is_leap_year(year), Begins_on_day(\"February\", day1), Begins_on_day(\"March\", day2), day1 = day2.\n.output Answer"]}
{"id": 198, "answer": true, "completion": ".decl Is_an_activity(Activity:symbol, Type:symbol)\nIs_an_activity(\"Shiva's divine dance\", \"dance\").\nIs_an_activity(\"physical fitness pose\", \"exercise\").\n.decl Answer()\nAnswer() :- Is_an_activity(\"Shiva's divine dance\", type1), Is_an_activity(\"physical fitness pose\", type2), type1 = type2.\n.output Answer", "completions": [".decl Is_an_activity(Activity:symbol, Type:symbol)\nIs_an_activity(\"Shiva's divine dance\", \"dance\").\nIs_an_activity(\"physical fitness pose\", \"exercise\").\n.decl Answer()\nAnswer() :- Is_an_activity(\"Shiva's divine dance\", type1), Is_an_activity(\"physical fitness pose\", type2), type1 = type2.\n.output Answer"]}
{"id": 199, "answer": false, "completion": ".decl Possesses(Empire:symbol, Land:symbol)\nPossesses(\"Ottoman Empire\", \"Land of Israel\").\n.decl Exists_in_century(Empire:symbol, Century:float)\nExists_in_century(\"Ottoman Empire\", 16).\n.decl Answer()\nAnswer() :- Possesses(empire, \"Land of Israel\"), Exists_in_century(empire, 16).\n.output Answer", "completions": [".decl Possesses(Empire:symbol, Land:symbol)\nPossesses(\"Ottoman Empire\", \"Land of Israel\").\n.decl Exists_in_century(Empire:symbol, Century:float)\nExists_in_century(\"Ottoman Empire\", 16).\n.decl Answer()\nAnswer() :- Possesses(empire, \"Land of Israel\"), Exists_in_century(empire, 16).\n.output Answer"]}
{"id": 200, "answer": true, "completion": ".decl Engaged_in_trade(Person:symbol, Time:symbol)\nEngaged_in_trade(\"Medieval English lords\", \"Medieval England\").\nEngaged_in_trade(\"peasants\", \"Medieval England\").\n.decl Was_trade_fair(Time:symbol, Fair:symbol)\nWas_trade_fair(\"Medieval England\", \"no\").\n.decl Answer()\nAnswer() :- Engaged_in_trade(person1, time1), Engaged_in_trade(person2, time2), Was_trade_fair(time1, fair1), Was_trade_fair(time2, fair2), person1 != person2, fair1 = fair2.\n.output Answer", "completions": [".decl Engaged_in_trade(Person:symbol, Time:symbol)\nEngaged_in_trade(\"Medieval English lords\", \"Medieval England\").\nEngaged_in_trade(\"peasants\", \"Medieval England\").\n.decl Was_trade_fair(Time:symbol, Fair:symbol)\nWas_trade_fair(\"Medieval England\", \"no\").\n.decl Answer()\nAnswer() :- Engaged_in_trade(person1, time1), Engaged_in_trade(person2, time2), Was_trade_fair(time1, fair1), Was_trade_fair(time2, fair2), person1 != person2, fair1 = fair2.\n.output Answer"]}
{"id": 201, "answer": false, "completion": ".decl Helps_to_understand(Subject:symbol, Object:symbol)\nHelps_to_understand(\"paleography\", \"ancient texts\").\n.decl Answer()\nAnswer() :- Helps_to_understand(\"paleography\", object), !Helps_to_understand(\"paleography\", \"Cthulhu\").\n.output Answer", "completions": [".decl Helps_to_understand(Subject:symbol, Object:symbol)\nHelps_to_understand(\"paleography\", \"ancient texts\").\n.decl Answer()\nAnswer() :- Helps_to_understand(\"paleography\", object), !Helps_to_understand(\"paleography\", \"Cthulhu\").\n.output Answer"]}
{"id": 202, "answer": true, "completion": ".decl Causes_death(Event:symbol, N_deaths:float)\nCauses_death(\"jokes\", 0).\nCauses_death(\"rats\", 1000000).\n.decl Answer()\nAnswer() :- Causes_death(\"jokes\", n_deaths1), Causes_death(\"rats\", n_deaths2), n_deaths1 < n_deaths2.\n.output Answer", "completions": [".decl Causes_death(Event:symbol, N_deaths:float)\nCauses_death(\"jokes\", 0).\nCauses_death(\"rats\", 1000000).\n.decl Answer()\nAnswer() :- Causes_death(\"jokes\", n_deaths1), Causes_death(\"rats\", n_deaths2), n_deaths1 < n_deaths2.\n.output Answer"]}
{"id": 203, "answer": true, "completion": ".decl Has_success_rate(Method:symbol, Success_rate:float)\nHas_success_rate(\"slitting wrists\", 0.2).\n.decl Answer()\nAnswer() :- Has_success_rate(\"slitting wrists\", success_rate), success_rate < 1.\n.output Answer", "completions": [".decl Has_success_rate(Method:symbol, Success_rate:float)\nHas_success_rate(\"slitting wrists\", 0.2).\n.decl Answer()\nAnswer() :- Has_success_rate(\"slitting wrists\", success_rate), success_rate < 1.\n.output Answer"]}
{"id": 204, "answer": false, "completion": ".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"rise of agriculture\", \"rivers\").\n.decl Answer()\nAnswer() :- Causes(\"rise of agriculture\", \"rivers\").\n.output Answer", "completions": [".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"rise of agriculture\", \"rivers\").\n.decl Answer()\nAnswer() :- Causes(\"rise of agriculture\", \"rivers\").\n.output Answer"]}
{"id": 205, "answer": true, "completion": ".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Eskimos\", \"Arctic\").\n.decl Has_weather(Place:symbol, Weather:symbol)\nHas_weather(\"Arctic\", \"cold\").\n.decl Answer()\nAnswer() :- Lives_in(\"Eskimos\", place), Has_weather(place, \"cold\"), !Has_weather(place, \"sunny\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Eskimos\", \"Arctic\").\n.decl Has_weather(Place:symbol, Weather:symbol)\nHas_weather(\"Arctic\", \"cold\").\n.decl Answer()\nAnswer() :- Lives_in(\"Eskimos\", place), Has_weather(place, \"cold\"), !Has_weather(place, \"sunny\").\n.output Answer"]}
{"id": 206, "answer": false, "completion": ".decl Has_shift(Object:symbol, Shift:symbol)\nHas_shift(\"telescopes at Goldstone Deep Space Communications Complex\", \"day\").\n.decl Answer()\nAnswer() :- !Has_shift(\"telescopes at Goldstone Deep Space Communications Complex\", \"night\").\n.output Answer", "completions": [".decl Has_shift(Object:symbol, Shift:symbol)\nHas_shift(\"telescopes at Goldstone Deep Space Communications Complex\", \"day\").\n.decl Answer()\nAnswer() :- !Has_shift(\"telescopes at Goldstone Deep Space Communications Complex\", \"night\").\n.output Answer"]}
{"id": 207, "answer": true, "completion": ".decl Has_cost(Show:symbol, Cost:float)\nHas_cost(\"Days of Our Lives\", 1000).\nHas_cost(\"other soaps\", 500).\n.decl Answer()\nAnswer() :- Has_cost(\"Days of Our Lives\", cost1), Has_cost(\"other soaps\", cost2), cost1 > cost2.\n.output Answer", "completions": [".decl Has_cost(Show:symbol, Cost:float)\nHas_cost(\"Days of Our Lives\", 1000).\nHas_cost(\"other soaps\", 500).\n.decl Answer()\nAnswer() :- Has_cost(\"Days of Our Lives\", cost1), Has_cost(\"other soaps\", cost2), cost1 > cost2.\n.output Answer"]}
{"id": 208, "answer": false, "completion": ".decl Likes(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- !Likes(\"Pikachu\", \"Charles Darwin\").\n.output Answer", "completions": [".decl Likes(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- !Likes(\"Pikachu\", \"Charles Darwin\").\n.output Answer"]}
{"id": 209, "answer": false, "completion": ".decl Uses_tonsure(Person:symbol)\nUses_tonsure(\"person\").\n.decl Has_hair(Person:symbol, Location:symbol)\nHas_hair(\"person\", \"top of scalp\").\n.decl Answer()\nAnswer() :- Uses_tonsure(person), Has_hair(person, \"top of scalp\").\n.output Answer", "completions": [".decl Uses_tonsure(Person:symbol)\nUses_tonsure(\"person\").\n.decl Has_hair(Person:symbol, Location:symbol)\nHas_hair(\"person\", \"top of scalp\").\n.decl Answer()\nAnswer() :- Uses_tonsure(person), Has_hair(person, \"top of scalp\").\n.output Answer"]}
{"id": 210, "answer": false, "completion": ".decl Lives_in_water(Animal:symbol, Water:symbol)\nLives_in_water(\"grey seal\", \"Atlantic Ocean\").\nLives_in_water(\"subject of Moby Dick\", \"Pacific Ocean\").\n.decl Answer()\nAnswer() :- Lives_in_water(\"grey seal\", water1), Lives_in_water(\"subject of Moby Dick\", water2), water1 != water2.\n.output Answer", "completions": [".decl Lives_in_water(Animal:symbol, Water:symbol)\nLives_in_water(\"grey seal\", \"Atlantic Ocean\").\nLives_in_water(\"subject of Moby Dick\", \"Pacific Ocean\").\n.decl Answer()\nAnswer() :- Lives_in_water(\"grey seal\", water1), Lives_in_water(\"subject of Moby Dick\", water2), water1 != water2.\n.output Answer"]}
{"id": 211, "answer": false, "completion": ".decl Likes(Person:symbol, Clothing:symbol)\nLikes(\"Donald Duck\", \"bow-ties\").\n.decl Answer()\nAnswer() :- Likes(\"Donald Duck\", \"bell-bottoms\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Clothing:symbol)\nLikes(\"Donald Duck\", \"bow-ties\").\n.decl Answer()\nAnswer() :- Likes(\"Donald Duck\", \"bell-bottoms\").\n.output Answer"]}
{"id": 212, "answer": false, "completion": ".decl Puts_on_pizza(Creature:symbol)\nPuts_on_pizza(\"anchovies\").\n.decl Lives_in(Creature:symbol, Place:symbol)\nLives_in(\"anchovies\", \"Black Sea\").\n.decl Answer()\nAnswer() :- Puts_on_pizza(creature), Lives_in(creature, \"Black Sea\").\n.output Answer", "completions": [".decl Puts_on_pizza(Creature:symbol)\nPuts_on_pizza(\"anchovies\").\n.decl Lives_in(Creature:symbol, Place:symbol)\nLives_in(\"anchovies\", \"Black Sea\").\n.decl Answer()\nAnswer() :- Puts_on_pizza(creature), Lives_in(creature, \"Black Sea\").\n.output Answer"]}
{"id": 213, "answer": true, "completion": ".decl Has_law(Event:symbol, Law:symbol)\nHas_law(\"funerals\", \"special traffic laws\").\n.decl Answer()\nAnswer() :- Has_law(\"funerals\", law).\n.output Answer", "completions": [".decl Has_law(Event:symbol, Law:symbol)\nHas_law(\"funerals\", \"special traffic laws\").\n.decl Answer()\nAnswer() :- Has_law(\"funerals\", law).\n.output Answer"]}
{"id": 214, "answer": true, "completion": ".decl Has_coordinates(Location:symbol, Latitude:float, Longitude:float)\nHas_coordinates(\"my home\", x, y).\n.decl Answer()\nAnswer() :- Has_coordinates(\"my home\", _, _).\n.output Answer", "completions": [".decl Has_coordinates(Location:symbol, Latitude:float, Longitude:float)\nHas_coordinates(\"my home\", x, y).\n.decl Answer()\nAnswer() :- Has_coordinates(\"my home\", _, _).\n.output Answer"]}
{"id": 215, "answer": false, "completion": ".decl Believes_in(Person:symbol, Event:symbol)\nBelieves_in(\"Woody Allen\", \"Second Coming\").\n.decl Answer()\nAnswer() :- Believes_in(\"Woody Allen\", \"Second Coming\").\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Event:symbol)\nBelieves_in(\"Woody Allen\", \"Second Coming\").\n.decl Answer()\nAnswer() :- Believes_in(\"Woody Allen\", \"Second Coming\").\n.output Answer"]}
{"id": 216, "answer": false, "completion": ".decl Causes_illness(Food:symbol, Illness:symbol)\nCauses_illness(\"meat\", \"fever\").\n.decl Answer()\nAnswer() :- Causes_illness(\"meat\", \"fever\").\n.output Answer", "completions": [".decl Causes_illness(Food:symbol, Illness:symbol)\nCauses_illness(\"meat\", \"fever\").\n.decl Answer()\nAnswer() :- Causes_illness(\"meat\", \"fever\").\n.output Answer"]}
{"id": 217, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Dicopomorpha echmepterygis\", 0.2).\nHas_size(\"Uranium pellet\", 0.1).\n.decl Is_fatal(Object:symbol, Fatal:symbol)\nIs_fatal(\"Uranium pellet\", \"yes\").\n.decl Answer()\nAnswer() :- Has_size(\"Dicopomorpha echmepterygis\", size1), Has_size(\"Uranium pellet\", size2), size1 >= size2, Is_fatal(\"Uranium pellet\", \"yes\").\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Dicopomorpha echmepterygis\", 0.2).\nHas_size(\"Uranium pellet\", 0.1).\n.decl Is_fatal(Object:symbol, Fatal:symbol)\nIs_fatal(\"Uranium pellet\", \"yes\").\n.decl Answer()\nAnswer() :- Has_size(\"Dicopomorpha echmepterygis\", size1), Has_size(\"Uranium pellet\", size2), size1 >= size2, Is_fatal(\"Uranium pellet\", \"yes\").\n.output Answer"]}
{"id": 218, "answer": true, "completion": ".decl Associated_with(Thing:symbol, Event:symbol)\nAssociated_with(\"menthol\", \"Christmas\").\n.decl Answer()\nAnswer() :- Associated_with(\"menthol\", \"Christmas\").\n.output Answer", "completions": [".decl Associated_with(Thing:symbol, Event:symbol)\nAssociated_with(\"menthol\", \"Christmas\").\n.decl Answer()\nAnswer() :- Associated_with(\"menthol\", \"Christmas\").\n.output Answer"]}
{"id": 219, "answer": false, "completion": ".decl Runs_in_election(Person:symbol, Election:symbol)\n.decl Answer()\nAnswer() :- !Runs_in_election(\"John Kerry\", \"2010 United Kingdom general election\").\n.output Answer", "completions": [".decl Runs_in_election(Person:symbol, Election:symbol)\n.decl Answer()\nAnswer() :- !Runs_in_election(\"John Kerry\", \"2010 United Kingdom general election\").\n.output Answer"]}
{"id": 220, "answer": true, "completion": ".decl Has_fear(Animal:symbol, Fear:symbol)\nHas_fear(\"Bengal cat\", \"water\").\n.decl Answer()\nAnswer() :- Has_fear(\"Bengal cat\", fear), fear = \"water\".\n.output Answer", "completions": [".decl Has_fear(Animal:symbol, Fear:symbol)\nHas_fear(\"Bengal cat\", \"water\").\n.decl Answer()\nAnswer() :- Has_fear(\"Bengal cat\", fear), fear = \"water\".\n.output Answer"]}
{"id": 221, "answer": false, "completion": ".decl Has_effect(Food:symbol, Effect:symbol)\nHas_effect(\"pickles\", \"salt\").\n.decl Has_effect_on(Effect:symbol, Disease:symbol)\nHas_effect_on(\"salt\", \"hypertension\").\n.decl Answer()\nAnswer() :- Has_effect(\"pickles\", effect), Has_effect_on(effect, \"hypertension\"), Has_n_members(\"pickles\", 12).\n.output Answer", "completions": [".decl Has_effect(Food:symbol, Effect:symbol)\nHas_effect(\"pickles\", \"salt\").\n.decl Has_effect_on(Effect:symbol, Disease:symbol)\nHas_effect_on(\"salt\", \"hypertension\").\n.decl Answer()\nAnswer() :- Has_effect(\"pickles\", effect), Has_effect_on(effect, \"hypertension\"), Has_n_members(\"pickles\", 12).\n.output Answer"]}
{"id": 222, "answer": false, "completion": ".decl Describes(Book:symbol, Topic:symbol)\nDescribes(\"Revolutionary Road\", \"life in a suburb\").\n.decl Answer()\nAnswer() :- Describes(\"Revolutionary Road\", \"life in a suburb\").\n.output Answer", "completions": [".decl Describes(Book:symbol, Topic:symbol)\nDescribes(\"Revolutionary Road\", \"life in a suburb\").\n.decl Answer()\nAnswer() :- Describes(\"Revolutionary Road\", \"life in a suburb\").\n.output Answer"]}
{"id": 223, "answer": true, "completion": ".decl Has_association(Person:symbol, God:symbol)\nHas_association(\"Hanuman\", \"Rama\").\nHas_association(\"Thor\", \"Odin\").\n.decl Answer()\nAnswer() :- Has_association(\"Hanuman\", god), Has_association(\"Thor\", god).\n.output Answer", "completions": [".decl Has_association(Person:symbol, God:symbol)\nHas_association(\"Hanuman\", \"Rama\").\nHas_association(\"Thor\", \"Odin\").\n.decl Answer()\nAnswer() :- Has_association(\"Hanuman\", god), Has_association(\"Thor\", god).\n.output Answer"]}
{"id": 224, "answer": true, "completion": ".decl Needs_room_size(Activity:symbol, Room_size:symbol)\nNeeds_room_size(\"3D printing\", \"large\").\n.decl Answer()\nAnswer() :- Needs_room_size(\"3D printing\", room_size).\n.output Answer", "completions": [".decl Needs_room_size(Activity:symbol, Room_size:symbol)\nNeeds_room_size(\"3D printing\", \"large\").\n.decl Answer()\nAnswer() :- Needs_room_size(\"3D printing\", room_size).\n.output Answer"]}
{"id": 225, "answer": false, "completion": ".decl Interested_in(Person:symbol, Place:symbol, Time:symbol)\nInterested_in(\"Robert Stack\", \"Tower of London\", \"1400s\").\n.decl Has_seasons(Show:symbol, N_seasons:float)\nHas_seasons(\"14 season show\", 14).\n.decl Answer()\nAnswer() :- Interested_in(\"Robert Stack\", \"Tower of London\", time), Has_seasons(\"14 season show\", n_seasons), n_seasons >= 14.\n.output Answer", "completions": [".decl Interested_in(Person:symbol, Place:symbol, Time:symbol)\nInterested_in(\"Robert Stack\", \"Tower of London\", \"1400s\").\n.decl Has_seasons(Show:symbol, N_seasons:float)\nHas_seasons(\"14 season show\", 14).\n.decl Answer()\nAnswer() :- Interested_in(\"Robert Stack\", \"Tower of London\", time), Has_seasons(\"14 season show\", n_seasons), n_seasons >= 14.\n.output Answer"]}
{"id": 226, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sea otter\", \"crustaceans\").\nEats(\"sea otter\", \"fish\").\nEats(\"sea otter\", \"invertebrates\").\n.decl Answer()\nAnswer() :- Eats(\"sea otter\", \"spiders\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sea otter\", \"crustaceans\").\nEats(\"sea otter\", \"fish\").\nEats(\"sea otter\", \"invertebrates\").\n.decl Answer()\nAnswer() :- Eats(\"sea otter\", \"spiders\").\n.output Answer"]}
{"id": 227, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"World War II\", 6).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"The Who tours\", 2).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"The Who tours\", n_years1), Last_n_years(\"World War II\", n_years2), n_years1 > n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"World War II\", 6).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"The Who tours\", 2).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"The Who tours\", n_years1), Last_n_years(\"World War II\", n_years2), n_years1 > n_years2.\n.output Answer"]}
{"id": 228, "answer": true, "completion": ".decl Has_dominant_material(Coin:symbol, Material:symbol)\nHas_dominant_material(\"US 2020 nickels\", \"nickel\").\n.decl Answer()\nAnswer() :- Has_dominant_material(\"US 2020 nickels\", \"nickel\").\n.output Answer", "completions": [".decl Has_dominant_material(Coin:symbol, Material:symbol)\nHas_dominant_material(\"US 2020 nickels\", \"nickel\").\n.decl Answer()\nAnswer() :- Has_dominant_material(\"US 2020 nickels\", \"nickel\").\n.output Answer"]}
{"id": 229, "answer": false, "completion": ".decl Costs(Item:symbol, Price:float)\nCosts(\"President of India\", 10000000).\nCosts(\"iPhone 11\", 699).\n.decl Answer()\nAnswer() :- Costs(\"President of India\", price1), Costs(\"iPhone 11\", price2), price1 > price2.\n.output Answer", "completions": [".decl Costs(Item:symbol, Price:float)\nCosts(\"President of India\", 10000000).\nCosts(\"iPhone 11\", 699).\n.decl Answer()\nAnswer() :- Costs(\"President of India\", price1), Costs(\"iPhone 11\", price2), price1 > price2.\n.output Answer"]}
{"id": 230, "answer": true, "completion": ".decl Occurs_on_day(Event:symbol, Day:symbol)\nOccurs_on_day(\"New Year's Day\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Occurs_on_day(\"New Year's Day\", \"Wednesday\").\n.output Answer", "completions": [".decl Occurs_on_day(Event:symbol, Day:symbol)\nOccurs_on_day(\"New Year's Day\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Occurs_on_day(\"New Year's Day\", \"Wednesday\").\n.output Answer"]}
{"id": 231, "answer": false, "completion": ".decl Target_of(Person:symbol, Phobia:symbol)\nTarget_of(\"Donald Trump\", \"Islamophobia\").\n.decl Answer()\nAnswer() :- Target_of(\"Donald Trump\", \"Islamophobia\").\n.output Answer", "completions": [".decl Target_of(Person:symbol, Phobia:symbol)\nTarget_of(\"Donald Trump\", \"Islamophobia\").\n.decl Answer()\nAnswer() :- Target_of(\"Donald Trump\", \"Islamophobia\").\n.output Answer"]}
{"id": 232, "answer": false, "completion": ".decl Has_theme(Movie:symbol, Theme:symbol)\nHas_theme(\"Disney's Alice in Wonderland\", \"celebration\").\n.decl Is_holiday(Event:symbol)\nIs_holiday(\"celebration\").\n.decl Answer()\nAnswer() :- Has_theme(\"Disney's Alice in Wonderland\", theme), Is_holiday(theme).\n.output Answer", "completions": [".decl Has_theme(Movie:symbol, Theme:symbol)\nHas_theme(\"Disney's Alice in Wonderland\", \"celebration\").\n.decl Is_holiday(Event:symbol)\nIs_holiday(\"celebration\").\n.decl Answer()\nAnswer() :- Has_theme(\"Disney's Alice in Wonderland\", theme), Is_holiday(theme).\n.output Answer"]}
{"id": 233, "answer": true, "completion": ".decl Served_under(Person:symbol, Leader:symbol)\nServed_under(\"François Mitterrand\", \"Charles de Gaulle\").\n.decl Answer()\nAnswer() :- !Served_under(\"François Mitterrand\", \"Napoleon Bonapart\").\n.output Answer", "completions": [".decl Served_under(Person:symbol, Leader:symbol)\nServed_under(\"François Mitterrand\", \"Charles de Gaulle\").\n.decl Answer()\nAnswer() :- !Served_under(\"François Mitterrand\", \"Napoleon Bonapart\").\n.output Answer"]}
{"id": 234, "answer": false, "completion": ".decl Has_chemicals(Object:symbol, Chemical:symbol)\nHas_chemicals(\"onion\", \"sulfur\").\nHas_chemicals(\"onion\", \"chlorine\").\n.decl Needed_for_bomb(Chemical:symbol)\nNeeded_for_bomb(\"plutonium\").\nNeeded_for_bomb(\"uranium\").\nNeeded_for_bomb(\"tritium\").\n.decl Answer()\nAnswer() :- Has_chemicals(\"onion\", chemical), Needed_for_bomb(chemical), !Needed_for_bomb(\"sulfur\"), !Needed_for_bomb(\"chlorine\").\n.output Answer", "completions": [".decl Has_chemicals(Object:symbol, Chemical:symbol)\nHas_chemicals(\"onion\", \"sulfur\").\nHas_chemicals(\"onion\", \"chlorine\").\n.decl Needed_for_bomb(Chemical:symbol)\nNeeded_for_bomb(\"plutonium\").\nNeeded_for_bomb(\"uranium\").\nNeeded_for_bomb(\"tritium\").\n.decl Answer()\nAnswer() :- Has_chemicals(\"onion\", chemical), Needed_for_bomb(chemical), !Needed_for_bomb(\"sulfur\"), !Needed_for_bomb(\"chlorine\").\n.output Answer"]}
{"id": 235, "answer": true, "completion": ".decl Is_legal(Action:symbol, Country:symbol)\nIs_legal(\"downloading Mario 64 on an emulator\", \"United States\").\n.decl Answer()\nAnswer() :- Is_legal(\"downloading Mario 64 on an emulator\", country).\n.output Answer", "completions": [".decl Is_legal(Action:symbol, Country:symbol)\nIs_legal(\"downloading Mario 64 on an emulator\", \"United States\").\n.decl Answer()\nAnswer() :- Is_legal(\"downloading Mario 64 on an emulator\", country).\n.output Answer"]}
{"id": 236, "answer": false, "completion": ".decl Has_weather_condition(Activity:symbol, Weather_condition:symbol)\nHas_weather_condition(\"lunch on the beach\", \"sunny\").\nHas_weather_condition(\"spot the full circle of a rainbow\", \"sunny\").\n.decl Answer()\nAnswer() :- Has_weather_condition(\"lunch on the beach\", weather_condition), Has_weather_condition(\"spot the full circle of a rainbow\", weather_condition).\n.output Answer", "completions": [".decl Has_weather_condition(Activity:symbol, Weather_condition:symbol)\nHas_weather_condition(\"lunch on the beach\", \"sunny\").\nHas_weather_condition(\"spot the full circle of a rainbow\", \"sunny\").\n.decl Answer()\nAnswer() :- Has_weather_condition(\"lunch on the beach\", weather_condition), Has_weather_condition(\"spot the full circle of a rainbow\", weather_condition).\n.output Answer"]}
{"id": 237, "answer": false, "completion": ".decl Has_n_smoggy_days(City:symbol, N_smoggy_days:float)\nHas_n_smoggy_days(\"Düsseldorf\", 10).\n.decl Answer()\nAnswer() :- Has_n_smoggy_days(\"Düsseldorf\", n_smoggy_days), n_smoggy_days < 20.\n.output Answer", "completions": [".decl Has_n_smoggy_days(City:symbol, N_smoggy_days:float)\nHas_n_smoggy_days(\"Düsseldorf\", 10).\n.decl Answer()\nAnswer() :- Has_n_smoggy_days(\"Düsseldorf\", n_smoggy_days), n_smoggy_days < 20.\n.output Answer"]}
{"id": 238, "answer": false, "completion": ".decl Has_hairline(Person:symbol, Hairline:symbol)\nHas_hairline(\"Elon Musk\", \"receding\").\n.decl Answer()\nAnswer() :- Has_hairline(\"Elon Musk\", hairline1), Has_hairline(\"Elon Musk\", hairline2), hairline1 != hairline2.\n.output Answer", "completions": [".decl Has_hairline(Person:symbol, Hairline:symbol)\nHas_hairline(\"Elon Musk\", \"receding\").\n.decl Answer()\nAnswer() :- Has_hairline(\"Elon Musk\", hairline1), Has_hairline(\"Elon Musk\", hairline2), hairline1 != hairline2.\n.output Answer"]}
{"id": 239, "answer": true, "completion": ".decl Has_name(Character:symbol, Name:symbol)\nHas_name(\"Lemon\", \"Lemon\").\n.decl Is_villain(Character:symbol)\nIs_villain(\"Lemon\").\n.decl Is_kind_of_citrus_fruit(Name:symbol)\nIs_kind_of_citrus_fruit(\"Lemon\").\n.decl Answer()\nAnswer() :- Has_name(character, name), Is_villain(character), Is_kind_of_citrus_fruit(name).\n.output Answer", "completions": [".decl Has_name(Character:symbol, Name:symbol)\nHas_name(\"Lemon\", \"Lemon\").\n.decl Is_villain(Character:symbol)\nIs_villain(\"Lemon\").\n.decl Is_kind_of_citrus_fruit(Name:symbol)\nIs_kind_of_citrus_fruit(\"Lemon\").\n.decl Answer()\nAnswer() :- Has_name(character, name), Is_villain(character), Is_kind_of_citrus_fruit(name).\n.output Answer"]}
{"id": 240, "answer": true, "completion": ".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"someone\", \"Canary Islands\").\n.decl Can_fish_for(Place:symbol, Fish:symbol)\nCan_fish_for(\"Canary Islands\", \"largemouth bass\").\n.decl Answer()\nAnswer() :- Lives_in(\"someone\", place), Can_fish_for(place, \"largemouth bass\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"someone\", \"Canary Islands\").\n.decl Can_fish_for(Place:symbol, Fish:symbol)\nCan_fish_for(\"Canary Islands\", \"largemouth bass\").\n.decl Answer()\nAnswer() :- Lives_in(\"someone\", place), Can_fish_for(place, \"largemouth bass\").\n.output Answer"]}
{"id": 241, "answer": true, "completion": ".decl Associated_with(Food:symbol, Cuisine:symbol)\nAssociated_with(\"anchovies\", \"Italian\").\n.decl Answer()\nAnswer() :- Associated_with(\"anchovies\", \"Italian\").\n.output Answer", "completions": [".decl Associated_with(Food:symbol, Cuisine:symbol)\nAssociated_with(\"anchovies\", \"Italian\").\n.decl Answer()\nAnswer() :- Associated_with(\"anchovies\", \"Italian\").\n.output Answer"]}
{"id": 242, "answer": true, "completion": ".decl Appears_on(Person:symbol, Show:symbol)\nAppears_on(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.decl Answer()\nAnswer() :- Appears_on(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.output Answer", "completions": [".decl Appears_on(Person:symbol, Show:symbol)\nAppears_on(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.decl Answer()\nAnswer() :- Appears_on(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.output Answer"]}
{"id": 243, "answer": false, "completion": ".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Ford F-350\", 10000).\n.decl Has_n_students(University:symbol, N_students:float)\nHas_n_students(\"Yale University\", 12000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Ford F-350\", capacity), Has_n_students(\"Yale University\", n_students), capacity >= n_students.\n.output Answer", "completions": [".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Ford F-350\", 10000).\n.decl Has_n_students(University:symbol, N_students:float)\nHas_n_students(\"Yale University\", 12000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Ford F-350\", capacity), Has_n_students(\"Yale University\", n_students), capacity >= n_students.\n.output Answer"]}
{"id": 244, "answer": false, "completion": ".decl Necessary_for_growing(Organism:symbol, Plant:symbol)\nNecessary_for_growing(\"honey bee\", \"apple\").\n.decl Answer()\nAnswer() :- ! Necessary_for_growing(\"queen bee\", \"apple\").\n.output Answer", "completions": [".decl Necessary_for_growing(Organism:symbol, Plant:symbol)\nNecessary_for_growing(\"honey bee\", \"apple\").\n.decl Answer()\nAnswer() :- ! Necessary_for_growing(\"queen bee\", \"apple\").\n.output Answer"]}
{"id": 245, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Mount Fuji\", 3776).\nHas_height(\"Sea of Japan\", 0).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Fuji\", height1), Has_height(\"Sea of Japan\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Mount Fuji\", 3776).\nHas_height(\"Sea of Japan\", 0).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Fuji\", height1), Has_height(\"Sea of Japan\", height2), height1 > height2.\n.output Answer"]}
{"id": 246, "answer": false, "completion": ".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Dalai Lama\", \"divine barzakh\").\n.decl Answer()\nAnswer() :- Believes(\"Dalai Lama\", \"divine barzakh\").\n.output Answer", "completions": [".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Dalai Lama\", \"divine barzakh\").\n.decl Answer()\nAnswer() :- Believes(\"Dalai Lama\", \"divine barzakh\").\n.output Answer"]}
{"id": 247, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"fear\", \"1999\").\nHappens_in_time(\"fear\", \"2000\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"fear\", time), time < \"2000\".\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"fear\", \"1999\").\nHappens_in_time(\"fear\", \"2000\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"fear\", time), time < \"2000\".\n.output Answer"]}
{"id": 248, "answer": false, "completion": ".decl Has_technology(Person:symbol, Technology:symbol)\nHas_technology(\"Walt Disney\", \"pencils\").\n.decl Answer()\nAnswer() :- !Has_technology(\"Walt Disney\", \"email\").\n.output Answer", "completions": [".decl Has_technology(Person:symbol, Technology:symbol)\nHas_technology(\"Walt Disney\", \"pencils\").\n.decl Answer()\nAnswer() :- !Has_technology(\"Walt Disney\", \"email\").\n.output Answer"]}
{"id": 249, "answer": true, "completion": ".decl Has_grade(Person:symbol, Grade:float)\nHas_grade(\"student\", 11).\n.decl Has_requirement(Position:symbol, Requirement:symbol)\nHas_requirement(\"President of the United States\", \"35 years of age\").\n.decl Answer()\nAnswer() :- Has_grade(\"student\", grade), Has_requirement(\"President of the United States\", requirement), grade < 35.\n.output Answer", "completions": [".decl Has_grade(Person:symbol, Grade:float)\nHas_grade(\"student\", 11).\n.decl Has_requirement(Position:symbol, Requirement:symbol)\nHas_requirement(\"President of the United States\", \"35 years of age\").\n.decl Answer()\nAnswer() :- Has_grade(\"student\", grade), Has_requirement(\"President of the United States\", requirement), grade < 35.\n.output Answer"]}
{"id": 250, "answer": true, "completion": ".decl Has_taste(Part:symbol, Taste:symbol)\nHas_taste(\"center\", \"best\").\n.decl Answer()\nAnswer() :- Has_taste(\"center\", \"best\").\n.output Answer", "completions": [".decl Has_taste(Part:symbol, Taste:symbol)\nHas_taste(\"center\", \"best\").\n.decl Answer()\nAnswer() :- Has_taste(\"center\", \"best\").\n.output Answer"]}
{"id": 251, "answer": true, "completion": ".decl Used_in(Plot_device:symbol, Show:symbol)\nUsed_in(\"radioactive waste\", \"Breaking Bad\").\nUsed_in(\"radioactive waste\", \"The Simpsons\").\n.decl Answer()\nAnswer() :- Used_in(\"radioactive waste\", show).\n.output Answer", "completions": [".decl Used_in(Plot_device:symbol, Show:symbol)\nUsed_in(\"radioactive waste\", \"Breaking Bad\").\nUsed_in(\"radioactive waste\", \"The Simpsons\").\n.decl Answer()\nAnswer() :- Used_in(\"radioactive waste\", show).\n.output Answer"]}
{"id": 252, "answer": false, "completion": ".decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Canidae\", \"dog\").\nHas_member(\"Canidae\", \"wolf\").\nHas_member(\"Canidae\", \"fox\").\nHas_member(\"Aesop's Fables\", \"dog\").\nHas_member(\"Aesop's Fables\", \"wolf\").\n.decl Answer()\nAnswer() :- Has_member(\"Canidae\", member), Has_member(\"Aesop's Fables\", member).\n.output Answer", "completions": [".decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Canidae\", \"dog\").\nHas_member(\"Canidae\", \"wolf\").\nHas_member(\"Canidae\", \"fox\").\nHas_member(\"Aesop's Fables\", \"dog\").\nHas_member(\"Aesop's Fables\", \"wolf\").\n.decl Answer()\nAnswer() :- Has_member(\"Canidae\", member), Has_member(\"Aesop's Fables\", member).\n.output Answer"]}
{"id": 253, "answer": true, "completion": ".decl Has_vitamin_C(Fruit:symbol, Vitamin_C_content:float)\nHas_vitamin_C(\"orange\", 50).\nHas_vitamin_C(\"apple\", 10).\n.decl Is_bad_for_health(Fruit:symbol)\nIs_bad_for_health(\"apple\").\n.decl Answer()\nAnswer() :- Has_vitamin_C(fruit, vitamin_c_content), Is_bad_for_health(fruit), vitamin_c_content > 0.\n.output Answer", "completions": [".decl Has_vitamin_C(Fruit:symbol, Vitamin_C_content:float)\nHas_vitamin_C(\"orange\", 50).\nHas_vitamin_C(\"apple\", 10).\n.decl Is_bad_for_health(Fruit:symbol)\nIs_bad_for_health(\"apple\").\n.decl Answer()\nAnswer() :- Has_vitamin_C(fruit, vitamin_c_content), Is_bad_for_health(fruit), vitamin_c_content > 0.\n.output Answer"]}
{"id": 254, "answer": true, "completion": ".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"cannon\", \"bronze\").\nHas_material(\"cannon\", \"iron\").\nHas_material(\"cannon\", \"wood\").\n.decl Existed_in_time(Material:symbol, Time:symbol)\nExisted_in_time(\"bronze\", \"bronze age\").\nExisted_in_time(\"iron\", \"iron age\").\nExisted_in_time(\"wood\", \"stone age\").\n.decl Answer()\nAnswer() :- Has_material(\"cannon\", material), Existed_in_time(material, \"bronze age\").\n.output Answer", "completions": [".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"cannon\", \"bronze\").\nHas_material(\"cannon\", \"iron\").\nHas_material(\"cannon\", \"wood\").\n.decl Existed_in_time(Material:symbol, Time:symbol)\nExisted_in_time(\"bronze\", \"bronze age\").\nExisted_in_time(\"iron\", \"iron age\").\nExisted_in_time(\"wood\", \"stone age\").\n.decl Answer()\nAnswer() :- Has_material(\"cannon\", material), Existed_in_time(material, \"bronze age\").\n.output Answer"]}
{"id": 255, "answer": true, "completion": ".decl Is_President(Person:symbol, Country:symbol, Party:symbol, Year:float)\nIs_President(\"Barack Obama\", \"United States\", \"Democrat\", 2009).\n.decl Is_known_for(Person:symbol, Practice:symbol)\nIs_known_for(\"Barack Obama\", \"painting\").\n.decl Answer()\nAnswer() :- Is_President(person, \"United States\", \"Democrat\", year1), Is_President(person2, \"United States\", \"Democrat\", year2), Is_known_for(person, \"painting\"), year1 > year2.\n.output Answer", "completions": [".decl Is_President(Person:symbol, Country:symbol, Party:symbol, Year:float)\nIs_President(\"Barack Obama\", \"United States\", \"Democrat\", 2009).\n.decl Is_known_for(Person:symbol, Practice:symbol)\nIs_known_for(\"Barack Obama\", \"painting\").\n.decl Answer()\nAnswer() :- Is_President(person, \"United States\", \"Democrat\", year1), Is_President(person2, \"United States\", \"Democrat\", year2), Is_known_for(person, \"painting\"), year1 > year2.\n.output Answer"]}
{"id": 256, "answer": true, "completion": ".decl Advocates_for(Person:symbol, Cause:symbol)\nAdvocates_for(\"environmentalist\", \"preventing domestic canine reproduction\").\n.decl Answer()\nAnswer() :- Advocates_for(\"environmentalist\", cause).\n.output Answer", "completions": [".decl Advocates_for(Person:symbol, Cause:symbol)\nAdvocates_for(\"environmentalist\", \"preventing domestic canine reproduction\").\n.decl Answer()\nAnswer() :- Advocates_for(\"environmentalist\", cause).\n.output Answer"]}
{"id": 257, "answer": false, "completion": ".decl Has_iterations(Phone:symbol, Iterations:float)\nHas_iterations(\"Iphone\", 11).\nHas_iterations(\"Samsung Galaxy\", 10).\n.decl Answer()\nAnswer() :- Has_iterations(\"Iphone\", iterations1), Has_iterations(\"Samsung Galaxy\", iterations2), iterations1 > iterations2.\n.output Answer", "completions": [".decl Has_iterations(Phone:symbol, Iterations:float)\nHas_iterations(\"Iphone\", 11).\nHas_iterations(\"Samsung Galaxy\", 10).\n.decl Answer()\nAnswer() :- Has_iterations(\"Iphone\", iterations1), Has_iterations(\"Samsung Galaxy\", iterations2), iterations1 > iterations2.\n.output Answer"]}
{"id": 258, "answer": true, "completion": ".decl Has_component(Device:symbol, Component:symbol)\nHas_component(\"central processing unit\", \"dedicated fan\").\n.decl Answer()\nAnswer() :- Has_component(\"central processing unit\", \"dedicated fan\").\n.output Answer", "completions": [".decl Has_component(Device:symbol, Component:symbol)\nHas_component(\"central processing unit\", \"dedicated fan\").\n.decl Answer()\nAnswer() :- Has_component(\"central processing unit\", \"dedicated fan\").\n.output Answer"]}
{"id": 259, "answer": true, "completion": ".decl Engages_in(Person:symbol, Activity:symbol)\nEngages_in(\"Christopher Hitchens\", \"writing\").\n.decl Answer()\nAnswer() :- !Engages_in(\"Christopher Hitchens\", \"tonsure\").\n.output Answer", "completions": [".decl Engages_in(Person:symbol, Activity:symbol)\nEngages_in(\"Christopher Hitchens\", \"writing\").\n.decl Answer()\nAnswer() :- !Engages_in(\"Christopher Hitchens\", \"tonsure\").\n.output Answer"]}
{"id": 260, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"diamond\", 3.5).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"diamond\", density1), Has_density(\"water\", density2), density1 < density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"diamond\", 3.5).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"diamond\", density1), Has_density(\"water\", density2), density1 < density2.\n.output Answer"]}
{"id": 261, "answer": false, "completion": ".decl Employer(Person:symbol, Employer:symbol)\nEmployer(\"Walt Disney\", \"Universal Studios\").\n.decl Relation(Person_A:symbol, Person_B:symbol, Relation:symbol)\nRelation(\"Walt Disney\", \"Rudolph Ising\", \"brother\").\n.decl Commits_offense(Person:symbol, Offense:symbol)\nCommits_offense(\"Rudolph Ising\", \"excommunicable offense\").\n.decl Answer()\nAnswer() :- Employer(person1, employer1), Relation(person1, person2, \"brother\"), Commits_offense(person2, \"excommunicable offense\").\n.output Answer", "completions": [".decl Employer(Person:symbol, Employer:symbol)\nEmployer(\"Walt Disney\", \"Universal Studios\").\n.decl Relation(Person_A:symbol, Person_B:symbol, Relation:symbol)\nRelation(\"Walt Disney\", \"Rudolph Ising\", \"brother\").\n.decl Commits_offense(Person:symbol, Offense:symbol)\nCommits_offense(\"Rudolph Ising\", \"excommunicable offense\").\n.decl Answer()\nAnswer() :- Employer(person1, employer1), Relation(person1, person2, \"brother\"), Commits_offense(person2, \"excommunicable offense\").\n.output Answer"]}
{"id": 262, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"nickel\", 0.8).\nHas_size(\"koala pouch\", 0.2).\n.decl Answer()\nAnswer() :- Has_size(\"nickel\", size1), Has_size(\"koala pouch\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"nickel\", 0.8).\nHas_size(\"koala pouch\", 0.2).\n.decl Answer()\nAnswer() :- Has_size(\"nickel\", size1), Has_size(\"koala pouch\", size2), size1 < size2.\n.output Answer"]}
{"id": 263, "answer": false, "completion": ".decl Practices_religion(Person:symbol, Religion:symbol)\nPractices_religion(\"Dave Chappelle\", \"Christianity\").\n.decl Uses_text(Religion:symbol, Text:symbol)\nUses_text(\"Christianity\", \"Bible\").\n.decl Answer()\nAnswer() :- Practices_religion(\"Dave Chappelle\", religion), Uses_text(religion, \"Quran\"), !.\n.output Answer", "completions": [".decl Practices_religion(Person:symbol, Religion:symbol)\nPractices_religion(\"Dave Chappelle\", \"Christianity\").\n.decl Uses_text(Religion:symbol, Text:symbol)\nUses_text(\"Christianity\", \"Bible\").\n.decl Answer()\nAnswer() :- Practices_religion(\"Dave Chappelle\", religion), Uses_text(religion, \"Quran\"), !.\n.output Answer"]}
{"id": 264, "answer": true, "completion": ".decl Named_after(Thing:symbol, Person:symbol)\nNamed_after(\"C-SPAN\", \"Alan Greenspan\").\n.decl Answer()\nAnswer() :- Named_after(\"C-SPAN\", \"Alan Greenspan\").\n.output Answer", "completions": [".decl Named_after(Thing:symbol, Person:symbol)\nNamed_after(\"C-SPAN\", \"Alan Greenspan\").\n.decl Answer()\nAnswer() :- Named_after(\"C-SPAN\", \"Alan Greenspan\").\n.output Answer"]}
{"id": 265, "answer": true, "completion": ".decl Needs_electricity(Game:symbol)\nNeeds_electricity(\"Final Fantasy VI\").\n.decl Answer()\nAnswer() :- Needs_electricity(\"Final Fantasy VI\").\n.output Answer", "completions": [".decl Needs_electricity(Game:symbol)\nNeeds_electricity(\"Final Fantasy VI\").\n.decl Answer()\nAnswer() :- Needs_electricity(\"Final Fantasy VI\").\n.output Answer"]}
{"id": 266, "answer": true, "completion": ".decl Writes(Person:symbol, Work:symbol)\nWrites(\"Sartre\", \"No Exit\").\n.decl Is_about(Work:symbol, Topic:symbol)\nIs_about(\"No Exit\", \"Hell\").\n.decl Answer()\nAnswer() :- Writes(\"Sartre\", work), Is_about(work, \"Hell\").\n.output Answer", "completions": [".decl Writes(Person:symbol, Work:symbol)\nWrites(\"Sartre\", \"No Exit\").\n.decl Is_about(Work:symbol, Topic:symbol)\nIs_about(\"No Exit\", \"Hell\").\n.decl Answer()\nAnswer() :- Writes(\"Sartre\", work), Is_about(work, \"Hell\").\n.output Answer"]}
{"id": 267, "answer": false, "completion": ".decl Has_training(Group:symbol, Training:symbol)\nHas_training(\"NFL teams\", \"football\").\n.decl Answer()\nAnswer() :- !Has_training(\"NFL teams\", \"infantry training\").\n.output Answer", "completions": [".decl Has_training(Group:symbol, Training:symbol)\nHas_training(\"NFL teams\", \"football\").\n.decl Answer()\nAnswer() :- !Has_training(\"NFL teams\", \"infantry training\").\n.output Answer"]}
{"id": 268, "answer": true, "completion": ".decl Has_n_stripes(Flag:symbol, N_stripes:float)\nHas_n_stripes(\"American flag\", 13).\n.decl Has_n_voice_actors(Character:symbol, N_voice_actors:float)\nHas_n_voice_actors(\"Goofy\", 1).\nHas_n_voice_actors(\"Bugs Bunny\", 1).\n.decl Answer()\nAnswer() :- Has_n_stripes(\"American flag\", n_stripes), Has_n_voice_actors(\"Goofy\", n_voice_actors1), Has_n_voice_actors(\"Bugs Bunny\", n_voice_actors2), n_stripes >= n_voice_actors1 + n_voice_actors2.\n.output Answer", "completions": [".decl Has_n_stripes(Flag:symbol, N_stripes:float)\nHas_n_stripes(\"American flag\", 13).\n.decl Has_n_voice_actors(Character:symbol, N_voice_actors:float)\nHas_n_voice_actors(\"Goofy\", 1).\nHas_n_voice_actors(\"Bugs Bunny\", 1).\n.decl Answer()\nAnswer() :- Has_n_stripes(\"American flag\", n_stripes), Has_n_voice_actors(\"Goofy\", n_voice_actors1), Has_n_voice_actors(\"Bugs Bunny\", n_voice_actors2), n_stripes >= n_voice_actors1 + n_voice_actors2.\n.output Answer"]}
{"id": 269, "answer": true, "completion": ".decl Has_temperature(Surface:symbol, Temperature:float)\nHas_temperature(\"Europa\", -160).\n.decl Can_fry_egg(Temperature:float)\nCan_fry_egg(temperature) :- temperature > 0.\n.decl Answer()\nAnswer() :- Has_temperature(\"Europa\", temperature), !Can_fry_egg(temperature).\n.output Answer", "completions": [".decl Has_temperature(Surface:symbol, Temperature:float)\nHas_temperature(\"Europa\", -160).\n.decl Can_fry_egg(Temperature:float)\nCan_fry_egg(temperature) :- temperature > 0.\n.decl Answer()\nAnswer() :- Has_temperature(\"Europa\", temperature), !Can_fry_egg(temperature).\n.output Answer"]}
{"id": 270, "answer": false, "completion": ".decl Produces_episodes(TV_show:symbol, Status:symbol)\nProduces_episodes(\"The Joy of Painting\", \"No\").\n.decl Answer()\nAnswer() :- Produces_episodes(\"The Joy of Painting\", status), status = \"No\".\n.output Answer", "completions": [".decl Produces_episodes(TV_show:symbol, Status:symbol)\nProduces_episodes(\"The Joy of Painting\", \"No\").\n.decl Answer()\nAnswer() :- Produces_episodes(\"The Joy of Painting\", status), status = \"No\".\n.output Answer"]}
{"id": 271, "answer": true, "completion": ".decl Owns(Company_A:symbol, Company_B:symbol)\nOwns(\"Disney\", \"Marvel\").\n.decl Is_major_publisher(Company:symbol)\nIs_major_publisher(\"Marvel\").\n.decl Answer()\nAnswer() :- Owns(\"Disney\", company), Is_major_publisher(company).\n.output Answer", "completions": [".decl Owns(Company_A:symbol, Company_B:symbol)\nOwns(\"Disney\", \"Marvel\").\n.decl Is_major_publisher(Company:symbol)\nIs_major_publisher(\"Marvel\").\n.decl Answer()\nAnswer() :- Owns(\"Disney\", company), Is_major_publisher(company).\n.output Answer"]}
{"id": 272, "answer": true, "completion": ".decl Has_survival_rate(Country:symbol, Survival_rate:float)\nHas_survival_rate(\"Japan\", 0.9).\nHas_survival_rate(\"Sweden\", 0.8).\n.decl Answer()\nAnswer() :- Has_survival_rate(\"Japan\", rate1), Has_survival_rate(\"Sweden\", rate2), rate1 > rate2.\n.output Answer", "completions": [".decl Has_survival_rate(Country:symbol, Survival_rate:float)\nHas_survival_rate(\"Japan\", 0.9).\nHas_survival_rate(\"Sweden\", 0.8).\n.decl Answer()\nAnswer() :- Has_survival_rate(\"Japan\", rate1), Has_survival_rate(\"Sweden\", rate2), rate1 > rate2.\n.output Answer"]}
{"id": 273, "answer": true, "completion": ".decl Influenced_by(Person:symbol, Mythology:symbol)\nInfluenced_by(\"Washington Irving\", \"Irish mythology\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Washington Irving\", \"Irish mythology\").\n.output Answer", "completions": [".decl Influenced_by(Person:symbol, Mythology:symbol)\nInfluenced_by(\"Washington Irving\", \"Irish mythology\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Washington Irving\", \"Irish mythology\").\n.output Answer"]}
{"id": 274, "answer": true, "completion": ".decl Required_for(Exercise:symbol, Bone:symbol)\nRequired_for(\"floor exercises\", \"tibia\").\n.decl Answer()\nAnswer() :- Required_for(\"floor exercises\", \"tibia\").\n.output Answer", "completions": [".decl Required_for(Exercise:symbol, Bone:symbol)\nRequired_for(\"floor exercises\", \"tibia\").\n.decl Answer()\nAnswer() :- Required_for(\"floor exercises\", \"tibia\").\n.output Answer"]}
{"id": 275, "answer": true, "completion": ".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Emma Roberts\", \"actress\").\nHas_role(\"Nancy Drew\", \"private investigator\").\n.decl Answer()\nAnswer() :- Has_role(\"Emma Roberts\", \"actress\"), Has_role(\"Nancy Drew\", \"private investigator\").\n.output Answer", "completions": [".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Emma Roberts\", \"actress\").\nHas_role(\"Nancy Drew\", \"private investigator\").\n.decl Answer()\nAnswer() :- Has_role(\"Emma Roberts\", \"actress\"), Has_role(\"Nancy Drew\", \"private investigator\").\n.output Answer"]}
{"id": 276, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"minor\", 18).\n.decl Requires_age(Experiment:symbol, Age:float)\nRequires_age(\"double-slit experiment\", 21).\n.decl Answer()\nAnswer() :- Has_age(\"minor\", age1), Requires_age(\"double-slit experiment\", age2), age1 != age2, age1 < age2.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"minor\", 18).\n.decl Requires_age(Experiment:symbol, Age:float)\nRequires_age(\"double-slit experiment\", 21).\n.decl Answer()\nAnswer() :- Has_age(\"minor\", age1), Requires_age(\"double-slit experiment\", age2), age1 != age2, age1 < age2.\n.output Answer"]}
{"id": 277, "answer": true, "completion": ".decl Has_category(Nobel_prize:symbol, Category:symbol)\nHas_category(\"Nobel Prize in Physics\", \"Physics\").\nHas_category(\"Nobel Prize in Chemistry\", \"Chemistry\").\nHas_category(\"Nobel Prize in Physiology or Medicine\", \"Physiology or Medicine\").\nHas_category(\"Nobel Prize in Literature\", \"Literature\").\nHas_category(\"Nobel Peace Prize\", \"Peace\").\n.decl Answer()\nAnswer() :- Has_category(nobel_prize1, category1), Has_category(nobel_prize2, category2), nobep_prize1 != nobep_prize2, category1 = category2.\n.output Answer", "completions": [".decl Has_category(Nobel_prize:symbol, Category:symbol)\nHas_category(\"Nobel Prize in Physics\", \"Physics\").\nHas_category(\"Nobel Prize in Chemistry\", \"Chemistry\").\nHas_category(\"Nobel Prize in Physiology or Medicine\", \"Physiology or Medicine\").\nHas_category(\"Nobel Prize in Literature\", \"Literature\").\nHas_category(\"Nobel Peace Prize\", \"Peace\").\n.decl Answer()\nAnswer() :- Has_category(nobel_prize1, category1), Has_category(nobel_prize2, category2), nobep_prize1 != nobep_prize2, category1 = category2.\n.output Answer"]}
{"id": 278, "answer": true, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Green Party of England and Wales\", \"England\").\n.decl Can_vote(Country:symbol, Country_2:symbol)\nCan_vote(\"England\", \"USA\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Green Party of England and Wales\", country1), Can_vote(country1, \"USA\").\n.output Answer", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Green Party of England and Wales\", \"England\").\n.decl Can_vote(Country:symbol, Country_2:symbol)\nCan_vote(\"England\", \"USA\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Green Party of England and Wales\", country1), Can_vote(country1, \"USA\").\n.output Answer"]}
{"id": 279, "answer": false, "completion": ".decl Suffered_fate(Person:symbol, Fate:symbol)\nSuffered_fate(\"Alan Turing\", \"execution\").\nSuffered_fate(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- Suffered_fate(\"Alan Turing\", fate1), Suffered_fate(\"Abraham Lincoln\", fate2), fate1 = fate2.\n.output Answer", "completions": [".decl Suffered_fate(Person:symbol, Fate:symbol)\nSuffered_fate(\"Alan Turing\", \"execution\").\nSuffered_fate(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- Suffered_fate(\"Alan Turing\", fate1), Suffered_fate(\"Abraham Lincoln\", fate2), fate1 = fate2.\n.output Answer"]}
{"id": 280, "answer": false, "completion": ".decl Used_phrase(Person:symbol, Phrase:symbol)\nUsed_phrase(\"John Kerry\", \"flip-flop\").\n.decl Guilty_of_phrase(Person:symbol, Phrase:symbol)\nGuilty_of_phrase(\"Rand Paul\", \"flip-flop\").\n.decl Answer()\nAnswer() :- Used_phrase(\"John Kerry\", phrase), Guilty_of_phrase(\"Rand Paul\", phrase).\n.output Answer", "completions": [".decl Used_phrase(Person:symbol, Phrase:symbol)\nUsed_phrase(\"John Kerry\", \"flip-flop\").\n.decl Guilty_of_phrase(Person:symbol, Phrase:symbol)\nGuilty_of_phrase(\"Rand Paul\", \"flip-flop\").\n.decl Answer()\nAnswer() :- Used_phrase(\"John Kerry\", phrase), Guilty_of_phrase(\"Rand Paul\", phrase).\n.output Answer"]}
{"id": 281, "answer": true, "completion": ".decl Can_chew(Object:symbol)\nCan_chew(\"apple\").\nCan_chew(\"gum\").\n.decl Answer()\nAnswer() :- !Can_chew(\"argon\").\n.output Answer", "completions": [".decl Can_chew(Object:symbol)\nCan_chew(\"apple\").\nCan_chew(\"gum\").\n.decl Answer()\nAnswer() :- !Can_chew(\"argon\").\n.output Answer"]}
{"id": 282, "answer": true, "completion": ".decl Remembers(Person:symbol, Event:symbol, Success:symbol)\nRemembers(\"people\", \"Lucille Ball's winemaking\", \"successful\").\n.decl Answer()\nAnswer() :- Remembers(\"people\", \"Lucille Ball's winemaking\", \"successful\").\n.output Answer", "completions": [".decl Remembers(Person:symbol, Event:symbol, Success:symbol)\nRemembers(\"people\", \"Lucille Ball's winemaking\", \"successful\").\n.decl Answer()\nAnswer() :- Remembers(\"people\", \"Lucille Ball's winemaking\", \"successful\").\n.output Answer"]}
{"id": 283, "answer": false, "completion": ".decl Used_in(Material:symbol, Manufacturing:symbol)\nUsed_in(\"wood\", \"guitar manufacturing\").\n.decl Answer()\nAnswer() :- !Used_in(\"oysters\", \"guitar manufacturing\").\n.output Answer", "completions": [".decl Used_in(Material:symbol, Manufacturing:symbol)\nUsed_in(\"wood\", \"guitar manufacturing\").\n.decl Answer()\nAnswer() :- !Used_in(\"oysters\", \"guitar manufacturing\").\n.output Answer"]}
{"id": 284, "answer": false, "completion": ".decl Plays_instrument(Person:symbol, Instrument:symbol)\nPlays_instrument(\"James Cotton\", \"harmonica\").\n.decl Has_style(Instrument:symbol, Style:symbol)\nHas_style(\"harmonica\", \"blues\").\n.decl Answer()\nAnswer() :- Plays_instrument(\"James Cotton\", instrument), Has_style(instrument, style), style != \"smooth jazz\".\n.output Answer", "completions": [".decl Plays_instrument(Person:symbol, Instrument:symbol)\nPlays_instrument(\"James Cotton\", \"harmonica\").\n.decl Has_style(Instrument:symbol, Style:symbol)\nHas_style(\"harmonica\", \"blues\").\n.decl Answer()\nAnswer() :- Plays_instrument(\"James Cotton\", instrument), Has_style(instrument, style), style != \"smooth jazz\".\n.output Answer"]}
{"id": 285, "answer": false, "completion": ".decl Is_related_to(Animal_A:symbol, Animal_B:symbol)\nIs_related_to(\"emu\", \"ostrich\").\nIs_related_to(\"ostrich\", \"elk\").\n.decl Answer()\nAnswer() :- Is_related_to(\"emu\", animal1), Is_related_to(animal1, \"elk\").\n.output Answer", "completions": [".decl Is_related_to(Animal_A:symbol, Animal_B:symbol)\nIs_related_to(\"emu\", \"ostrich\").\nIs_related_to(\"ostrich\", \"elk\").\n.decl Answer()\nAnswer() :- Is_related_to(\"emu\", animal1), Is_related_to(animal1, \"elk\").\n.output Answer"]}
{"id": 286, "answer": false, "completion": ".decl Is_in_museum(Artwork:symbol, Museum:symbol)\nIs_in_museum(\"Mona Lisa\", \"Louvre\").\nIs_in_museum(\"Venus de Milo\", \"Louvre\").\n.decl Answer()\nAnswer() :- Is_in_museum(\"Mona Lisa\", museum), Is_in_museum(\"Venus de Milo\", museum).\n.output Answer", "completions": [".decl Is_in_museum(Artwork:symbol, Museum:symbol)\nIs_in_museum(\"Mona Lisa\", \"Louvre\").\nIs_in_museum(\"Venus de Milo\", \"Louvre\").\n.decl Answer()\nAnswer() :- Is_in_museum(\"Mona Lisa\", museum), Is_in_museum(\"Venus de Milo\", museum).\n.output Answer"]}
{"id": 287, "answer": true, "completion": ".decl Is_descendant_of(Person:symbol, Ancestor:symbol)\nIs_descendant_of(\"John Adams\", \"English\").\nIs_descendant_of(\"John Adams\", \"Irish\").\nIs_descendant_of(\"John Adams\", \"Scottish\").\nIs_descendant_of(\"John Adams\", \"Welsh\").\n.decl Answer()\nAnswer() :- Is_descendant_of(\"John Adams\", \"Ottoman\"), !Is_descendant_of(\"John Adams\", ancestor), ancestor != \"Ottoman\".\n.output Answer", "completions": [".decl Is_descendant_of(Person:symbol, Ancestor:symbol)\nIs_descendant_of(\"John Adams\", \"English\").\nIs_descendant_of(\"John Adams\", \"Irish\").\nIs_descendant_of(\"John Adams\", \"Scottish\").\nIs_descendant_of(\"John Adams\", \"Welsh\").\n.decl Answer()\nAnswer() :- Is_descendant_of(\"John Adams\", \"Ottoman\"), !Is_descendant_of(\"John Adams\", ancestor), ancestor != \"Ottoman\".\n.output Answer"]}
{"id": 288, "answer": false, "completion": ".decl Has_n_sequels(Movie:symbol, N_sequels:float)\nHas_n_sequels(\"Gremlins\", 0).\nHas_n_sequels(\"Matrix\", 2).\n.decl Answer()\nAnswer() :- Has_n_sequels(\"Gremlins\", n_sequels1), Has_n_sequels(\"Matrix\", n_sequels2), n_sequels1 = n_sequels2.\n.output Answer", "completions": [".decl Has_n_sequels(Movie:symbol, N_sequels:float)\nHas_n_sequels(\"Gremlins\", 0).\nHas_n_sequels(\"Matrix\", 2).\n.decl Answer()\nAnswer() :- Has_n_sequels(\"Gremlins\", n_sequels1), Has_n_sequels(\"Matrix\", n_sequels2), n_sequels1 = n_sequels2.\n.output Answer"]}
{"id": 289, "answer": true, "completion": ".decl Has_expertise(Person:symbol, Expertise:symbol)\nHas_expertise(\"Tony Stark\", \"engineering\").\nHas_expertise(\"Tony Stark\", \"business\").\nHas_expertise(\"Tony Stark\", \"science\").\n.decl Answer()\nAnswer() :- Has_expertise(\"Tony Stark\", expertise1), Has_expertise(\"Tony Stark\", expertise2), Has_expertise(\"Tony Stark\", expertise3), expertise1 != expertise2, expertise2 != expertise3, expertise1 != expertise3.\n.output Answer", "completions": [".decl Has_expertise(Person:symbol, Expertise:symbol)\nHas_expertise(\"Tony Stark\", \"engineering\").\nHas_expertise(\"Tony Stark\", \"business\").\nHas_expertise(\"Tony Stark\", \"science\").\n.decl Answer()\nAnswer() :- Has_expertise(\"Tony Stark\", expertise1), Has_expertise(\"Tony Stark\", expertise2), Has_expertise(\"Tony Stark\", expertise3), expertise1 != expertise2, expertise2 != expertise3, expertise1 != expertise3.\n.output Answer"]}
{"id": 290, "answer": true, "completion": ".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"John\", \"driver's license\").\n.decl Works_in(Person:symbol, Job:symbol)\nWorks_in(\"John\", \"transport of aviation fuel\").\n.decl Answer()\nAnswer() :- Has_license(person, \"driver's license\"), Works_in(person, \"transport of aviation fuel\").\n.output Answer", "completions": [".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"John\", \"driver's license\").\n.decl Works_in(Person:symbol, Job:symbol)\nWorks_in(\"John\", \"transport of aviation fuel\").\n.decl Answer()\nAnswer() :- Has_license(person, \"driver's license\"), Works_in(person, \"transport of aviation fuel\").\n.output Answer"]}
{"id": 291, "answer": true, "completion": ".decl Has_medals(Country:symbol, Year:float, Medals:float)\nHas_medals(\"East Germany\", 1976, 40).\n.decl Exists(Country:symbol)\nExists(\"East Germany\").\n.decl Answer()\nAnswer() :- Has_medals(country, 1976, medals1), Has_medals(country2, 1976, medals2), medals1 > medals2, Exists(country).\n.output Answer", "completions": [".decl Has_medals(Country:symbol, Year:float, Medals:float)\nHas_medals(\"East Germany\", 1976, 40).\n.decl Exists(Country:symbol)\nExists(\"East Germany\").\n.decl Answer()\nAnswer() :- Has_medals(country, 1976, medals1), Has_medals(country2, 1976, medals2), medals1 > medals2, Exists(country).\n.output Answer"]}
{"id": 292, "answer": true, "completion": ".decl Lasts_n_minutes(Event:symbol, N_minutes:float)\nLasts_n_minutes(\"open heart surgery\", 120).\nLasts_n_minutes(\"American Ballet Theatre's Swan Lake\", 180).\n.decl Answer()\nAnswer() :- Lasts_n_minutes(\"open heart surgery\", n_minutes1), Lasts_n_minutes(\"American Ballet Theatre's Swan Lake\", n_minutes2), n_minutes1 < n_minutes2.\n.output Answer", "completions": [".decl Lasts_n_minutes(Event:symbol, N_minutes:float)\nLasts_n_minutes(\"open heart surgery\", 120).\nLasts_n_minutes(\"American Ballet Theatre's Swan Lake\", 180).\n.decl Answer()\nAnswer() :- Lasts_n_minutes(\"open heart surgery\", n_minutes1), Lasts_n_minutes(\"American Ballet Theatre's Swan Lake\", n_minutes2), n_minutes1 < n_minutes2.\n.output Answer"]}
{"id": 293, "answer": true, "completion": ".decl Has_speed(Method:symbol, Speed:float)\nHas_speed(\"Yellow Pages\", 0.5).\nHas_speed(\"Internet\", 1).\n.decl Answer()\nAnswer() :- Has_speed(\"Yellow Pages\", speed1), Has_speed(\"Internet\", speed2), speed1 < speed2.\n.output Answer", "completions": [".decl Has_speed(Method:symbol, Speed:float)\nHas_speed(\"Yellow Pages\", 0.5).\nHas_speed(\"Internet\", 1).\n.decl Answer()\nAnswer() :- Has_speed(\"Yellow Pages\", speed1), Has_speed(\"Internet\", speed2), speed1 < speed2.\n.output Answer"]}
{"id": 294, "answer": true, "completion": ".decl Served_on_court(Person:symbol, Court:symbol)\n.decl Answer()\nAnswer() :- !Served_on_court(\"neanderthal\", \"Supreme Court of the United States\").\n.output Answer", "completions": [".decl Served_on_court(Person:symbol, Court:symbol)\n.decl Answer()\nAnswer() :- !Served_on_court(\"neanderthal\", \"Supreme Court of the United States\").\n.output Answer"]}
{"id": 295, "answer": false, "completion": ".decl Went_on_tour(Group_A:symbol, Group_B:symbol)\n.decl Answer()\nAnswer() :- ! Went_on_tour(\"Maroon 5\", \"Nirvana\").\n.output Answer", "completions": [".decl Went_on_tour(Group_A:symbol, Group_B:symbol)\n.decl Answer()\nAnswer() :- ! Went_on_tour(\"Maroon 5\", \"Nirvana\").\n.output Answer"]}
{"id": 296, "answer": true, "completion": ".decl Has_climate(Location:symbol, Climate:symbol)\nHas_climate(\"Antarctica\", \"cold\").\n.decl Suitable_for(Event:symbol, Climate:symbol)\nSuitable_for(\"Groundhog Day\", \"mild\").\n.decl Answer()\nAnswer() :- Has_climate(\"Antarctica\", climate), !Suitable_for(\"Groundhog Day\", climate).\n.output Answer", "completions": [".decl Has_climate(Location:symbol, Climate:symbol)\nHas_climate(\"Antarctica\", \"cold\").\n.decl Suitable_for(Event:symbol, Climate:symbol)\nSuitable_for(\"Groundhog Day\", \"mild\").\n.decl Answer()\nAnswer() :- Has_climate(\"Antarctica\", climate), !Suitable_for(\"Groundhog Day\", climate).\n.output Answer"]}
{"id": 297, "answer": false, "completion": ".decl Has_density(Gas:symbol, Density:float)\nHas_density(\"helium\", 0.1785).\n.decl Affects(Gas:symbol, Effect:symbol)\nAffects(\"helium\", \"deeper voices\").\n.decl Answer()\nAnswer() :- Has_density(\"helium\", _), Affects(\"helium\", \"deeper voices\").\n.output Answer", "completions": [".decl Has_density(Gas:symbol, Density:float)\nHas_density(\"helium\", 0.1785).\n.decl Affects(Gas:symbol, Effect:symbol)\nAffects(\"helium\", \"deeper voices\").\n.decl Answer()\nAnswer() :- Has_density(\"helium\", _), Affects(\"helium\", \"deeper voices\").\n.output Answer"]}
{"id": 298, "answer": false, "completion": ".decl Can_be_used_as_fuel(Object:symbol, Vehicle:symbol)\nCan_be_used_as_fuel(\"petroleum jelly\", \"car\").\n.decl Answer()\nAnswer() :- Can_be_used_as_fuel(\"petroleum jelly\", \"car\").\n.output Answer", "completions": [".decl Can_be_used_as_fuel(Object:symbol, Vehicle:symbol)\nCan_be_used_as_fuel(\"petroleum jelly\", \"car\").\n.decl Answer()\nAnswer() :- Can_be_used_as_fuel(\"petroleum jelly\", \"car\").\n.output Answer"]}
{"id": 299, "answer": true, "completion": ".decl Is_deadly_sin(Sin:symbol)\nIs_deadly_sin(\"greed\").\nIs_deadly_sin(\"envy\").\nIs_deadly_sin(\"gluttony\").\nIs_deadly_sin(\"lust\").\nIs_deadly_sin(\"sloth\").\nIs_deadly_sin(\"wrath\").\nIs_deadly_sin(\"pride\").\n.decl Answer()\nAnswer() :- Is_deadly_sin(sin1), Is_deadly_sin(sin2), sin1 = \"greed\", sin2 != \"greed\".\n.output Answer", "completions": [".decl Is_deadly_sin(Sin:symbol)\nIs_deadly_sin(\"greed\").\nIs_deadly_sin(\"envy\").\nIs_deadly_sin(\"gluttony\").\nIs_deadly_sin(\"lust\").\nIs_deadly_sin(\"sloth\").\nIs_deadly_sin(\"wrath\").\nIs_deadly_sin(\"pride\").\n.decl Answer()\nAnswer() :- Is_deadly_sin(sin1), Is_deadly_sin(sin2), sin1 = \"greed\", sin2 != \"greed\".\n.output Answer"]}
{"id": 300, "answer": false, "completion": ".decl Is_wanted(Person:symbol, Wanted_status:symbol)\nIs_wanted(\"CEO of Nissan\", \"not wanted\").\n.decl Answer()\nAnswer() :- Is_wanted(\"CEO of Nissan\", wanted_status), wanted_status != \"wanted\".\n.output Answer", "completions": [".decl Is_wanted(Person:symbol, Wanted_status:symbol)\nIs_wanted(\"CEO of Nissan\", \"not wanted\").\n.decl Answer()\nAnswer() :- Is_wanted(\"CEO of Nissan\", wanted_status), wanted_status != \"wanted\".\n.output Answer"]}
{"id": 301, "answer": false, "completion": ".decl Takes(Person:symbol, Substance:symbol)\nTakes(\"drag king\", \"testosterone\").\n.decl Answer()\nAnswer() :- Takes(\"drag king\", \"testosterone\").\n.output Answer", "completions": [".decl Takes(Person:symbol, Substance:symbol)\nTakes(\"drag king\", \"testosterone\").\n.decl Answer()\nAnswer() :- Takes(\"drag king\", \"testosterone\").\n.output Answer"]}
{"id": 302, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Environment:symbol)\nLives_in(\"crab\", \"ocean\").\nLives_in(\"lobster\", \"ocean\").\nLives_in(\"shrimp\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in(animal, \"ocean\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Environment:symbol)\nLives_in(\"crab\", \"ocean\").\nLives_in(\"lobster\", \"ocean\").\nLives_in(\"shrimp\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in(animal, \"ocean\").\n.output Answer"]}
{"id": 303, "answer": true, "completion": ".decl Has_qualifications(Person:symbol, Qualification:symbol)\nHas_qualifications(\"Paul Bunyan\", \"logging\").\n.decl Required_qualifications(Job:symbol, Qualification:symbol)\nRequired_qualifications(\"urban planner\", \"urban planning\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Paul Bunyan\", qualification1), Required_qualifications(\"urban planner\", qualification2), qualification1 != qualification2.\n.output Answer", "completions": [".decl Has_qualifications(Person:symbol, Qualification:symbol)\nHas_qualifications(\"Paul Bunyan\", \"logging\").\n.decl Required_qualifications(Job:symbol, Qualification:symbol)\nRequired_qualifications(\"urban planner\", \"urban planning\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Paul Bunyan\", qualification1), Required_qualifications(\"urban planner\", qualification2), qualification1 != qualification2.\n.output Answer"]}
{"id": 304, "answer": true, "completion": ".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Black Sea\", 2200).\n.decl Can_travel_distance(Light_source:symbol, Distance:float)\nCan_travel_distance(\"sunlight\", 10000).\n.decl Answer()\nAnswer() :- Has_depth(\"Black Sea\", depth), Can_travel_distance(\"sunlight\", distance), depth <= distance.\n.output Answer", "completions": [".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Black Sea\", 2200).\n.decl Can_travel_distance(Light_source:symbol, Distance:float)\nCan_travel_distance(\"sunlight\", 10000).\n.decl Answer()\nAnswer() :- Has_depth(\"Black Sea\", depth), Can_travel_distance(\"sunlight\", distance), depth <= distance.\n.output Answer"]}
{"id": 305, "answer": true, "completion": ".decl Is_classified_as(Object:symbol, Classification:symbol)\nIs_classified_as(\"slingshot\", \"projectile weapon\").\nIs_classified_as(\"artillery\", \"weapon system\").\n.decl Answer()\nAnswer() :- Is_classified_as(\"slingshot\", classification1), Is_classified_as(\"artillery\", classification2), classification1 != classification2.\n.output Answer", "completions": [".decl Is_classified_as(Object:symbol, Classification:symbol)\nIs_classified_as(\"slingshot\", \"projectile weapon\").\nIs_classified_as(\"artillery\", \"weapon system\").\n.decl Answer()\nAnswer() :- Is_classified_as(\"slingshot\", classification1), Is_classified_as(\"artillery\", classification2), classification1 != classification2.\n.output Answer"]}
{"id": 306, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"9/11\", \"September 11, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 10, 1993\").\nHappens_in_time(\"don't ask don't tell\", \"September 20, 2011\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"9/11\", time1), Happens_in_time(\"don't ask don't tell\", time2), time2 < time1.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"9/11\", \"September 11, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 10, 1993\").\nHappens_in_time(\"don't ask don't tell\", \"September 20, 2011\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"9/11\", time1), Happens_in_time(\"don't ask don't tell\", time2), time2 < time1.\n.output Answer"]}
{"id": 307, "answer": true, "completion": ".decl Has_labors(Person:symbol, N_labors:float)\nHas_labors(\"Heracles\", 12).\n.decl Answer()\nAnswer() :- Has_labors(\"Heracles\", n_labors), n_labors > 13.\n.output Answer", "completions": [".decl Has_labors(Person:symbol, N_labors:float)\nHas_labors(\"Heracles\", 12).\n.decl Answer()\nAnswer() :- Has_labors(\"Heracles\", n_labors), n_labors > 13.\n.output Answer"]}
{"id": 308, "answer": true, "completion": ".decl Is_considered(Event:symbol, Description:symbol)\nIs_considered(\"Thanksgiving\", \"day of celebration\").\nIs_considered(\"Thanksgiving\", \"day of mourning\").\n.decl Answer()\nAnswer() :- Is_considered(\"Thanksgiving\", \"day of mourning\").\n.output Answer", "completions": [".decl Is_considered(Event:symbol, Description:symbol)\nIs_considered(\"Thanksgiving\", \"day of celebration\").\nIs_considered(\"Thanksgiving\", \"day of mourning\").\n.decl Answer()\nAnswer() :- Is_considered(\"Thanksgiving\", \"day of mourning\").\n.output Answer"]}
{"id": 309, "answer": false, "completion": ".decl Is_monarch(Person:symbol)\nIs_monarch(\"Hapshetsut\").\n.decl Answer()\nAnswer() :- Is_monarch(\"Hapshetsut\").\n.output Answer", "completions": [".decl Is_monarch(Person:symbol)\nIs_monarch(\"Hapshetsut\").\n.decl Answer()\nAnswer() :- Is_monarch(\"Hapshetsut\").\n.output Answer"]}
{"id": 310, "answer": false, "completion": ".decl Has_features(Object:symbol, Feature:symbol)\nHas_features(\"Noah's Ark\", \"shelter\").\nHas_features(\"Noah's Ark\", \"food\").\nHas_features(\"Noah's Ark\", \"water\").\nHas_features(\"Golden Age of Piracy\", \"sailing\").\nHas_features(\"Golden Age of Piracy\", \"looting\").\n.decl Answer()\nAnswer() :- Has_features(\"Noah's Ark\", feature1), Has_features(\"Golden Age of Piracy\", feature2), feature1 != feature2.\n.output Answer", "completions": [".decl Has_features(Object:symbol, Feature:symbol)\nHas_features(\"Noah's Ark\", \"shelter\").\nHas_features(\"Noah's Ark\", \"food\").\nHas_features(\"Noah's Ark\", \"water\").\nHas_features(\"Golden Age of Piracy\", \"sailing\").\nHas_features(\"Golden Age of Piracy\", \"looting\").\n.decl Answer()\nAnswer() :- Has_features(\"Noah's Ark\", feature1), Has_features(\"Golden Age of Piracy\", feature2), feature1 != feature2.\n.output Answer"]}
{"id": 311, "answer": false, "completion": ".decl Has_effect(Food:symbol, Effect:symbol)\nHas_effect(\"Campbell's Soup\", \"high sodium content\").\nHas_effect(\"high sodium content\", \"hypertension\").\n.decl Answer()\nAnswer() :- Has_effect(\"Campbell's Soup\", effect1), Has_effect(effect1, \"hypertension\").\n.output Answer", "completions": [".decl Has_effect(Food:symbol, Effect:symbol)\nHas_effect(\"Campbell's Soup\", \"high sodium content\").\nHas_effect(\"high sodium content\", \"hypertension\").\n.decl Answer()\nAnswer() :- Has_effect(\"Campbell's Soup\", effect1), Has_effect(effect1, \"hypertension\").\n.output Answer"]}
{"id": 312, "answer": false, "completion": ".decl Has_sales(Company:symbol, Game:symbol, Sales:float)\nHas_sales(\"Electronic Arts\", \"Metroid\", 1000000).\n.decl Has_profit(Company:symbol, Profit:float)\nHas_profit(\"Electronic Arts\", 200000).\n.decl Answer()\nAnswer() :- Has_sales(\"Electronic Arts\", \"Metroid\", sales), Has_profit(\"Electronic Arts\", profit), profit > 0, profit <= sales.\n.output Answer", "completions": [".decl Has_sales(Company:symbol, Game:symbol, Sales:float)\nHas_sales(\"Electronic Arts\", \"Metroid\", 1000000).\n.decl Has_profit(Company:symbol, Profit:float)\nHas_profit(\"Electronic Arts\", 200000).\n.decl Answer()\nAnswer() :- Has_sales(\"Electronic Arts\", \"Metroid\", sales), Has_profit(\"Electronic Arts\", profit), profit > 0, profit <= sales.\n.output Answer"]}
{"id": 313, "answer": true, "completion": ".decl Is_common(Activity:symbol, Place:symbol)\nIs_common(\"snowboarding\", \"Alaska\").\nIs_common(\"snowboarding\", \"Colorado\").\n.decl Answer()\nAnswer() :- !Is_common(\"snowboarding\", \"Hilo\").\n.output Answer", "completions": [".decl Is_common(Activity:symbol, Place:symbol)\nIs_common(\"snowboarding\", \"Alaska\").\nIs_common(\"snowboarding\", \"Colorado\").\n.decl Answer()\nAnswer() :- !Is_common(\"snowboarding\", \"Hilo\").\n.output Answer"]}
{"id": 314, "answer": true, "completion": ".decl Can_shoot(Object_A:symbol, Object_B:symbol, Distance:float)\nCan_shoot(\"sniper\", \"fish\", 1000).\n.decl Is_in_zone(Object:symbol, Zone:symbol)\nIs_in_zone(\"fish\", \"Bathypelagic Zone\").\n.decl Answer()\nAnswer() :- Can_shoot(\"sniper\", \"fish\", distance), Is_in_zone(\"fish\", \"Bathypelagic Zone\"), distance > 1000.\n.output Answer", "completions": [".decl Can_shoot(Object_A:symbol, Object_B:symbol, Distance:float)\nCan_shoot(\"sniper\", \"fish\", 1000).\n.decl Is_in_zone(Object:symbol, Zone:symbol)\nIs_in_zone(\"fish\", \"Bathypelagic Zone\").\n.decl Answer()\nAnswer() :- Can_shoot(\"sniper\", \"fish\", distance), Is_in_zone(\"fish\", \"Bathypelagic Zone\"), distance > 1000.\n.output Answer"]}
{"id": 315, "answer": false, "completion": ".decl Influenced_by(Group:symbol, Music_genre:symbol)\nInfluenced_by(\"Depeche Mode\", \"electronic\").\nInfluenced_by(\"Depeche Mode\", \"synth-pop\").\nInfluenced_by(\"Depeche Mode\", \"new wave\").\n.decl Answer()\nAnswer() :- !Influenced_by(\"Depeche Mode\", \"blues\").\n.output Answer", "completions": [".decl Influenced_by(Group:symbol, Music_genre:symbol)\nInfluenced_by(\"Depeche Mode\", \"electronic\").\nInfluenced_by(\"Depeche Mode\", \"synth-pop\").\nInfluenced_by(\"Depeche Mode\", \"new wave\").\n.decl Answer()\nAnswer() :- !Influenced_by(\"Depeche Mode\", \"blues\").\n.output Answer"]}
{"id": 316, "answer": false, "completion": ".decl Needs(Food:symbol, Ingredient:symbol)\nNeeds(\"pickles\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Needs(\"pickles\", \"lactobacillus\").\n.output Answer", "completions": [".decl Needs(Food:symbol, Ingredient:symbol)\nNeeds(\"pickles\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Needs(\"pickles\", \"lactobacillus\").\n.output Answer"]}
{"id": 317, "answer": true, "completion": ".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"King James I\", \"despise\").\n.decl Believes_in(Person:symbol, Being:symbol)\nBelieves_in(\"King James I\", \"fairy beings\").\n.decl Answer()\nAnswer() :- Has_opinion(\"King James I\", opinion), Believes_in(\"King James I\", being), opinion = \"despise\".\n.output Answer", "completions": [".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"King James I\", \"despise\").\n.decl Believes_in(Person:symbol, Being:symbol)\nBelieves_in(\"King James I\", \"fairy beings\").\n.decl Answer()\nAnswer() :- Has_opinion(\"King James I\", opinion), Believes_in(\"King James I\", being), opinion = \"despise\".\n.output Answer"]}
{"id": 318, "answer": false, "completion": ".decl Has_prevalence(Disability:symbol, Prevalence:float)\nHas_prevalence(\"dyslexia\", 0.5).\nHas_prevalence(\"intellectual disability\", 0.7).\n.decl Answer()\nAnswer() :- Has_prevalence(\"dyslexia\", prevalence1), Has_prevalence(\"intellectual disability\", prevalence2), prevalence1 > prevalence2.\n.output Answer", "completions": [".decl Has_prevalence(Disability:symbol, Prevalence:float)\nHas_prevalence(\"dyslexia\", 0.5).\nHas_prevalence(\"intellectual disability\", 0.7).\n.decl Answer()\nAnswer() :- Has_prevalence(\"dyslexia\", prevalence1), Has_prevalence(\"intellectual disability\", prevalence2), prevalence1 > prevalence2.\n.output Answer"]}
{"id": 319, "answer": false, "completion": ".decl Has_reward_program(Search_engine:symbol, Reward_program:symbol)\nHas_reward_program(\"Bing\", \"Yes\").\nHas_reward_program(\"Google\", \"No\").\n.decl Has_reward_amount(Search_engine:symbol, Reward_amount:float)\nHas_reward_amount(\"Bing\", 10).\nHas_reward_amount(\"Google\", 0).\n.decl Answer()\nAnswer() :- Has_reward_program(\"Bing\", \"Yes\"), Has_reward_amount(\"Bing\", reward_amount1), Has_reward_amount(\"Google\", reward_amount2), reward_amount1 > reward_amount2.\n.output Answer", "completions": [".decl Has_reward_program(Search_engine:symbol, Reward_program:symbol)\nHas_reward_program(\"Bing\", \"Yes\").\nHas_reward_program(\"Google\", \"No\").\n.decl Has_reward_amount(Search_engine:symbol, Reward_amount:float)\nHas_reward_amount(\"Bing\", 10).\nHas_reward_amount(\"Google\", 0).\n.decl Answer()\nAnswer() :- Has_reward_program(\"Bing\", \"Yes\"), Has_reward_amount(\"Bing\", reward_amount1), Has_reward_amount(\"Google\", reward_amount2), reward_amount1 > reward_amount2.\n.output Answer"]}
{"id": 320, "answer": true, "completion": ".decl Has_salt_content(Food:symbol, Salt_content:float)\nHas_salt_content(\"olives\", 0.1).\n.decl Answer()\nAnswer() :- Has_salt_content(\"olives\", salt_content), salt_content < 0.5.\n.output Answer", "completions": [".decl Has_salt_content(Food:symbol, Salt_content:float)\nHas_salt_content(\"olives\", 0.1).\n.decl Answer()\nAnswer() :- Has_salt_content(\"olives\", salt_content), salt_content < 0.5.\n.output Answer"]}
{"id": 321, "answer": true, "completion": ".decl Was_invented(Object:symbol, Year:float)\nWas_invented(\"television\", 1927).\n.decl Was_nominated(Person:symbol, Party:symbol, Year:float)\nWas_nominated(\"William Jennings Bryan\", \"Democratic Party\", 1908).\n.decl Answer()\nAnswer() :- Was_nominated(\"William Jennings Bryan\", \"Democratic Party\", year1), Was_invented(\"television\", year2), year1 < year2.\n.output Answer", "completions": [".decl Was_invented(Object:symbol, Year:float)\nWas_invented(\"television\", 1927).\n.decl Was_nominated(Person:symbol, Party:symbol, Year:float)\nWas_nominated(\"William Jennings Bryan\", \"Democratic Party\", 1908).\n.decl Answer()\nAnswer() :- Was_nominated(\"William Jennings Bryan\", \"Democratic Party\", year1), Was_invented(\"television\", year2), year1 < year2.\n.output Answer"]}
{"id": 322, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Great Recession\", \"2007-2009\").\nHappens_in_time(\"severest unemployment\", \"2009-2010\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Great Recession\", time1), Happens_in_time(\"severest unemployment\", time2), time1 = time2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Great Recession\", \"2007-2009\").\nHappens_in_time(\"severest unemployment\", \"2009-2010\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Great Recession\", time1), Happens_in_time(\"severest unemployment\", time2), time1 = time2.\n.output Answer"]}
{"id": 323, "answer": false, "completion": ".decl Occupied_by(Fort:symbol, Occupants:symbol)\nOccupied_by(\"Vellore Fort\", \"British East India Company\").\n.decl Threatened_by(Occupants:symbol, Animal:symbol)\nThreatened_by(\"British East India Company\", \"tigers\").\n.decl Answer()\nAnswer() :- Occupied_by(\"Vellore Fort\", occupants), Threatened_by(occupants, \"Grizzly Bears\"), !.\n.output Answer", "completions": [".decl Occupied_by(Fort:symbol, Occupants:symbol)\nOccupied_by(\"Vellore Fort\", \"British East India Company\").\n.decl Threatened_by(Occupants:symbol, Animal:symbol)\nThreatened_by(\"British East India Company\", \"tigers\").\n.decl Answer()\nAnswer() :- Occupied_by(\"Vellore Fort\", occupants), Threatened_by(occupants, \"Grizzly Bears\"), !.\n.output Answer"]}
{"id": 324, "answer": true, "completion": ".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Ugly Betty\", 88).\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"week\", 7).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Ugly Betty\", n_episodes), Last_n_days(\"week\", n_days), n_episodes <= n_days.\n.output Answer", "completions": [".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Ugly Betty\", 88).\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"week\", 7).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Ugly Betty\", n_episodes), Last_n_days(\"week\", n_days), n_episodes <= n_days.\n.output Answer"]}
{"id": 325, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"snow leopard\", \"Himalayas\").\n.decl Answer()\nAnswer() :- !Lives_in(\"snow leopard\", \"Yucatan\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"snow leopard\", \"Himalayas\").\n.decl Answer()\nAnswer() :- !Lives_in(\"snow leopard\", \"Yucatan\").\n.output Answer"]}
{"id": 326, "answer": false, "completion": ".decl Acceptable_number_of_children(Time:symbol, Number:float)\nAcceptable_number_of_children(\"1980s China\", 2).\n.decl Answer()\nAnswer() :- Acceptable_number_of_children(\"1980s China\", number), number != 3.14.\n.output Answer", "completions": [".decl Acceptable_number_of_children(Time:symbol, Number:float)\nAcceptable_number_of_children(\"1980s China\", 2).\n.decl Answer()\nAnswer() :- Acceptable_number_of_children(\"1980s China\", number), number != 3.14.\n.output Answer"]}
{"id": 327, "answer": false, "completion": ".decl Prevents(Treatment:symbol, Illness:symbol)\n.decl Answer()\nAnswer() :- !Prevents(\"surgery\", \"existential crisis\").\n.output Answer", "completions": [".decl Prevents(Treatment:symbol, Illness:symbol)\n.decl Answer()\nAnswer() :- !Prevents(\"surgery\", \"existential crisis\").\n.output Answer"]}
{"id": 328, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"greyhound\", 40).\nHas_speed(\"greyhound bus\", 70).\n.decl Answer()\nAnswer() :- Has_speed(\"greyhound\", speed1), Has_speed(\"greyhound bus\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"greyhound\", 40).\nHas_speed(\"greyhound bus\", 70).\n.decl Answer()\nAnswer() :- Has_speed(\"greyhound\", speed1), Has_speed(\"greyhound bus\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 329, "answer": true, "completion": ".decl Is_part_of(Object:symbol, Group:symbol)\nIs_part_of(\"Sirius\", \"Canis Major\").\nIs_part_of(\"Canis Major\", \"animals\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Sirius\", group), Is_part_of(group, \"animals\").\n.output Answer", "completions": [".decl Is_part_of(Object:symbol, Group:symbol)\nIs_part_of(\"Sirius\", \"Canis Major\").\nIs_part_of(\"Canis Major\", \"animals\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Sirius\", group), Is_part_of(group, \"animals\").\n.output Answer"]}
{"id": 330, "answer": true, "completion": ".decl Has_consent(Story:symbol, Consent:symbol)\nHas_consent(\"Snow White\", \"no\").\n.decl Answer()\nAnswer() :- Has_consent(\"Snow White\", consent), consent != \"yes\".\n.output Answer", "completions": [".decl Has_consent(Story:symbol, Consent:symbol)\nHas_consent(\"Snow White\", \"no\").\n.decl Answer()\nAnswer() :- Has_consent(\"Snow White\", consent), consent != \"yes\".\n.output Answer"]}
{"id": 331, "answer": true, "completion": ".decl Has_appearances(Film:symbol, N_appearances:float)\nHas_appearances(\"The Invisible Man\", 10).\nHas_appearances(\"Picnic at Hanging Rock\", 5).\n.decl Answer()\nAnswer() :- Has_appearances(\"The Invisible Man\", n_appearances1), Has_appearances(\"Picnic at Hanging Rock\", n_appearances2), n_appearances1 > n_appearances2.\n.output Answer", "completions": [".decl Has_appearances(Film:symbol, N_appearances:float)\nHas_appearances(\"The Invisible Man\", 10).\nHas_appearances(\"Picnic at Hanging Rock\", 5).\n.decl Answer()\nAnswer() :- Has_appearances(\"The Invisible Man\", n_appearances1), Has_appearances(\"Picnic at Hanging Rock\", n_appearances2), n_appearances1 > n_appearances2.\n.output Answer"]}
{"id": 332, "answer": true, "completion": ".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Ryan Crouser\", 10).\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"bengal fox\", 5).\n.decl Answer()\nAnswer() :- Has_strength(\"Ryan Crouser\", strength), Has_weight(\"bengal fox\", weight), strength > weight.\n.output Answer", "completions": [".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Ryan Crouser\", 10).\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"bengal fox\", 5).\n.decl Answer()\nAnswer() :- Has_strength(\"Ryan Crouser\", strength), Has_weight(\"bengal fox\", weight), strength > weight.\n.output Answer"]}
{"id": 333, "answer": true, "completion": ".decl Performs(Person:symbol, Performance:symbol)\nPerforms(\"Amy Winehouse\", \"live\").\n.decl Has_quality(Performance:symbol, Quality:symbol)\nHas_quality(\"live\", \"perfectly\").\n.decl Answer()\nAnswer() :- Performs(\"Amy Winehouse\", performance), Has_quality(performance, \"perfectly\").\n.output Answer", "completions": [".decl Performs(Person:symbol, Performance:symbol)\nPerforms(\"Amy Winehouse\", \"live\").\n.decl Has_quality(Performance:symbol, Quality:symbol)\nHas_quality(\"live\", \"perfectly\").\n.decl Answer()\nAnswer() :- Performs(\"Amy Winehouse\", performance), Has_quality(performance, \"perfectly\").\n.output Answer"]}
{"id": 334, "answer": true, "completion": ".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"Peregrine falcon\", 200).\nHas_speed(\"Hurricane Harvey\", 75).\n.decl Answer()\nAnswer() :- Has_speed(\"Peregrine falcon\", speed1), Has_speed(\"Hurricane Harvey\", speed2), speed2 < speed1.\n.output Answer", "completions": [".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"Peregrine falcon\", 200).\nHas_speed(\"Hurricane Harvey\", 75).\n.decl Answer()\nAnswer() :- Has_speed(\"Peregrine falcon\", speed1), Has_speed(\"Hurricane Harvey\", speed2), speed2 < speed1.\n.output Answer"]}
{"id": 335, "answer": true, "completion": ".decl Exists(Event:symbol)\nExists(\"discrimination of Chinese Americans at a Federal level in the US\").\n.decl Answer()\nAnswer() :- Exists(event).\n.output Answer", "completions": [".decl Exists(Event:symbol)\nExists(\"discrimination of Chinese Americans at a Federal level in the US\").\n.decl Answer()\nAnswer() :- Exists(event).\n.output Answer"]}
{"id": 336, "answer": false, "completion": ".decl Has_character_limit(Platform:symbol, Character_limit:float)\nHas_character_limit(\"Twitter\", 280).\n.decl Has_syllable_count(Haiku:symbol, Syllable_count:float)\nHas_syllable_count(\"Haiku\", 17).\n.decl Answer()\nAnswer() :- Has_character_limit(\"Twitter\", character_limit), Has_syllable_count(\"Haiku\", syllable_count), character_limit >= syllable_count.\n.output Answer", "completions": [".decl Has_character_limit(Platform:symbol, Character_limit:float)\nHas_character_limit(\"Twitter\", 280).\n.decl Has_syllable_count(Haiku:symbol, Syllable_count:float)\nHas_syllable_count(\"Haiku\", 17).\n.decl Answer()\nAnswer() :- Has_character_limit(\"Twitter\", character_limit), Has_syllable_count(\"Haiku\", syllable_count), character_limit >= syllable_count.\n.output Answer"]}
{"id": 337, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"adult human skull\", 15).\nHas_size(\"birth canal\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"adult human skull\", size1), Has_size(\"birth canal\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"adult human skull\", 15).\nHas_size(\"birth canal\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"adult human skull\", size1), Has_size(\"birth canal\", size2), size1 <= size2.\n.output Answer"]}
{"id": 338, "answer": false, "completion": ".decl Has_box_office_role(Person:symbol, Movie:symbol, Box_office_role:float)\nHas_box_office_role(\"Naomi Watts\", \"King Kong\", 1).\nHas_box_office_role(\"Naomi Watts\", \"The Ring\", 0.5).\n.decl Answer()\nAnswer() :- Has_box_office_role(\"Naomi Watts\", movie1, box_office_role1), Has_box_office_role(\"Naomi Watts\", movie2, box_office_role2), movie1 = \"King Kong\", box_office_role1 > box_office_role2.\n.output Answer", "completions": [".decl Has_box_office_role(Person:symbol, Movie:symbol, Box_office_role:float)\nHas_box_office_role(\"Naomi Watts\", \"King Kong\", 1).\nHas_box_office_role(\"Naomi Watts\", \"The Ring\", 0.5).\n.decl Answer()\nAnswer() :- Has_box_office_role(\"Naomi Watts\", movie1, box_office_role1), Has_box_office_role(\"Naomi Watts\", movie2, box_office_role2), movie1 = \"King Kong\", box_office_role1 > box_office_role2.\n.output Answer"]}
{"id": 339, "answer": true, "completion": ".decl Has_ingredient(Product:symbol, Ingredient:symbol)\nHas_ingredient(\"color purple\", \"mollusks\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"color purple\", \"mollusks\").\n.output Answer", "completions": [".decl Has_ingredient(Product:symbol, Ingredient:symbol)\nHas_ingredient(\"color purple\", \"mollusks\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"color purple\", \"mollusks\").\n.output Answer"]}
{"id": 340, "answer": true, "completion": ".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"25th US census\", 10).\n.decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"anchovy\", 5).\n.decl Answer()\nAnswer() :- Lives_n_years(\"anchovy\", n_years1), Lasts_n_years(\"25th US census\", n_years2), n_years1 >= n_years2.\n.output Answer", "completions": [".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"25th US census\", 10).\n.decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"anchovy\", 5).\n.decl Answer()\nAnswer() :- Lives_n_years(\"anchovy\", n_years1), Lasts_n_years(\"25th US census\", n_years2), n_years1 >= n_years2.\n.output Answer"]}
{"id": 341, "answer": true, "completion": ".decl En_route(From:symbol, To:symbol)\nEn_route(\"China\", \"France\").\n.decl Measures_altitude(Unit:symbol)\nMeasures_altitude(\"imperial foot\").\n.decl Answer()\nAnswer() :- En_route(\"China\", \"France\"), Measures_altitude(unit).\n.output Answer", "completions": [".decl En_route(From:symbol, To:symbol)\nEn_route(\"China\", \"France\").\n.decl Measures_altitude(Unit:symbol)\nMeasures_altitude(\"imperial foot\").\n.decl Answer()\nAnswer() :- En_route(\"China\", \"France\"), Measures_altitude(unit).\n.output Answer"]}
{"id": 342, "answer": true, "completion": ".decl Has_length(Text:symbol, Length:float)\nHas_length(\"Lines on the Antiquity of Microbes\", 8).\nHas_length(\"haiku\", 17).\n.decl Answer()\nAnswer() :- Has_length(\"Lines on the Antiquity of Microbes\", length1), Has_length(\"haiku\", length2), length1 < length2.\n.output Answer", "completions": [".decl Has_length(Text:symbol, Length:float)\nHas_length(\"Lines on the Antiquity of Microbes\", 8).\nHas_length(\"haiku\", 17).\n.decl Answer()\nAnswer() :- Has_length(\"Lines on the Antiquity of Microbes\", length1), Has_length(\"haiku\", length2), length1 < length2.\n.output Answer"]}
{"id": 343, "answer": false, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Metallica show\", 10000).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"giant pandas\", 1).\n.decl Answer()\nAnswer() :- Has_capacity(\"Metallica show\", capacity), Has_n_members(\"giant pandas\", n_members), capacity < n_members.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Metallica show\", 10000).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"giant pandas\", 1).\n.decl Answer()\nAnswer() :- Has_capacity(\"Metallica show\", capacity), Has_n_members(\"giant pandas\", n_members), capacity < n_members.\n.output Answer"]}
{"id": 344, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"snowy day\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", time), Happens_in_time(\"snowy day\", time).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"snowy day\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", time), Happens_in_time(\"snowy day\", time).\n.output Answer"]}
{"id": 345, "answer": false, "completion": ".decl Holds_position(Person:symbol, Position:symbol)\nHolds_position(\"Cyril Ramaphosa\", \"President of South Africa\").\n.decl Answer()\nAnswer() :- Holds_position(\"Cyril Ramaphosa\", \"Secretary General of NATO\").\n.output Answer", "completions": [".decl Holds_position(Person:symbol, Position:symbol)\nHolds_position(\"Cyril Ramaphosa\", \"President of South Africa\").\n.decl Answer()\nAnswer() :- Holds_position(\"Cyril Ramaphosa\", \"Secretary General of NATO\").\n.output Answer"]}
{"id": 346, "answer": false, "completion": ".decl Is_artisan_made(Product:symbol, Is_artisan:symbol)\nIs_artisan_made(\"twinkies\", \"no\").\n.decl Answer()\nAnswer() :- Is_artisan_made(\"twinkies\", is_artisan), is_artisan = \"no\".\n.output Answer", "completions": [".decl Is_artisan_made(Product:symbol, Is_artisan:symbol)\nIs_artisan_made(\"twinkies\", \"no\").\n.decl Answer()\nAnswer() :- Is_artisan_made(\"twinkies\", is_artisan), is_artisan = \"no\".\n.output Answer"]}
{"id": 347, "answer": true, "completion": ".decl Born_near(Person:symbol, Monument:symbol)\nBorn_near(\"Sean Connery\", \"Washington Monument\").\n.decl Was_original_actor(Person:symbol)\nWas_original_actor(\"Sean Connery\").\n.decl Answer()\nAnswer() :- Was_original_actor(person), Born_near(person, \"Washington Monument\").\n.output Answer", "completions": [".decl Born_near(Person:symbol, Monument:symbol)\nBorn_near(\"Sean Connery\", \"Washington Monument\").\n.decl Was_original_actor(Person:symbol)\nWas_original_actor(\"Sean Connery\").\n.decl Answer()\nAnswer() :- Was_original_actor(person), Born_near(person, \"Washington Monument\").\n.output Answer"]}
{"id": 348, "answer": true, "completion": ".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"tonsillectomy\", \"tonsillitis\").\n.decl Answer()\nAnswer() :- !Cures(\"tonsillectomy\", \"hepatitis\").\n.output Answer", "completions": [".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"tonsillectomy\", \"tonsillitis\").\n.decl Answer()\nAnswer() :- !Cures(\"tonsillectomy\", \"hepatitis\").\n.output Answer"]}
{"id": 349, "answer": false, "completion": ".decl Is_made_of(Character:symbol, Material:symbol)\nIs_made_of(\"Elsa\", \"living ice\").\n.decl Is_popular(Character:symbol)\nIs_popular(\"Elsa\").\n.decl Answer()\nAnswer() :- Is_made_of(character, \"living ice\"), Is_popular(character).\n.output Answer", "completions": [".decl Is_made_of(Character:symbol, Material:symbol)\nIs_made_of(\"Elsa\", \"living ice\").\n.decl Is_popular(Character:symbol)\nIs_popular(\"Elsa\").\n.decl Answer()\nAnswer() :- Is_made_of(character, \"living ice\"), Is_popular(character).\n.output Answer"]}
{"id": 350, "answer": true, "completion": ".decl Has_policy(Country:symbol, Policy:symbol)\nHas_policy(\"United States\", \"free lunch for all students\").\n.decl Answer()\nAnswer() :- Has_policy(\"United States\", \"free lunch for all students\").\n.output Answer", "completions": [".decl Has_policy(Country:symbol, Policy:symbol)\nHas_policy(\"United States\", \"free lunch for all students\").\n.decl Answer()\nAnswer() :- Has_policy(\"United States\", \"free lunch for all students\").\n.output Answer"]}
{"id": 351, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"stool\", 0.5).\nHas_height(\"almond tree\", 10).\n.decl Answer()\nAnswer() :- Has_height(\"stool\", height1), Has_height(\"almond tree\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"stool\", 0.5).\nHas_height(\"almond tree\", 10).\n.decl Answer()\nAnswer() :- Has_height(\"stool\", height1), Has_height(\"almond tree\", height2), height1 < height2.\n.output Answer"]}
{"id": 352, "answer": true, "completion": ".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"Bonanza marathon\", 4).\nLasts_n_hours(\"WWE Heat marathon\", 6).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"Bonanza marathon\", n_hours1), Lasts_n_hours(\"WWE Heat marathon\", n_hours2), n_hours1 < n_hours2.\n.output Answer", "completions": [".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"Bonanza marathon\", 4).\nLasts_n_hours(\"WWE Heat marathon\", 6).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"Bonanza marathon\", n_hours1), Lasts_n_hours(\"WWE Heat marathon\", n_hours2), n_hours1 < n_hours2.\n.output Answer"]}
{"id": 353, "answer": false, "completion": ".decl Cuisine_embraces(Cuisine:symbol, Food:symbol)\nCuisine_embraces(\"Hawaiian\", \"poi\").\nCuisine_embraces(\"Continental US\", \"pizza\").\n.decl Considered_gross(Food:symbol)\nConsidered_gross(\"poi\").\n.decl Answer()\nAnswer() :- Cuisine_embraces(\"Hawaiian\", food), Considered_gross(food).\n.output Answer", "completions": [".decl Cuisine_embraces(Cuisine:symbol, Food:symbol)\nCuisine_embraces(\"Hawaiian\", \"poi\").\nCuisine_embraces(\"Continental US\", \"pizza\").\n.decl Considered_gross(Food:symbol)\nConsidered_gross(\"poi\").\n.decl Answer()\nAnswer() :- Cuisine_embraces(\"Hawaiian\", food), Considered_gross(food).\n.output Answer"]}
{"id": 354, "answer": true, "completion": ".decl Has_ride(Park:symbol, Ride:symbol)\nHas_ride(\"Disneyland\", \"Tom and Jerry's Carousel\").\n.decl Answer()\nAnswer() :- Has_ride(\"Disneyland\", \"Tom and Jerry's Carousel\").\n.output Answer", "completions": [".decl Has_ride(Park:symbol, Ride:symbol)\nHas_ride(\"Disneyland\", \"Tom and Jerry's Carousel\").\n.decl Answer()\nAnswer() :- Has_ride(\"Disneyland\", \"Tom and Jerry's Carousel\").\n.output Answer"]}
{"id": 355, "answer": true, "completion": ".decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"Natalie Portman\", \"vegan\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"Snickers bar\", \"milk\").\n.decl Answer()\nAnswer() :- Has_diet(\"Natalie Portman\", \"vegan\"), Contains(\"Snickers bar\", ingredient), !Contains(\"Snickers bar\", \"vegan\").\n.output Answer", "completions": [".decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"Natalie Portman\", \"vegan\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"Snickers bar\", \"milk\").\n.decl Answer()\nAnswer() :- Has_diet(\"Natalie Portman\", \"vegan\"), Contains(\"Snickers bar\", ingredient), !Contains(\"Snickers bar\", \"vegan\").\n.output Answer"]}
{"id": 356, "answer": false, "completion": ".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"child\", \"driving\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"child\", \"US\").\n.decl Drives(Person:symbol, Vehicle:symbol)\nDrives(\"child\", \"Mercedes-Benz\").\n.decl Answer()\nAnswer() :- Has_license(\"child\", \"driving\"), Drives(\"child\", \"Mercedes-Benz\"), Is_legal(\"child\", \"US\").\n.output Answer", "completions": [".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"child\", \"driving\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"child\", \"US\").\n.decl Drives(Person:symbol, Vehicle:symbol)\nDrives(\"child\", \"Mercedes-Benz\").\n.decl Answer()\nAnswer() :- Has_license(\"child\", \"driving\"), Drives(\"child\", \"Mercedes-Benz\"), Is_legal(\"child\", \"US\").\n.output Answer"]}
{"id": 357, "answer": false, "completion": ".decl Uses_scale(Composition:symbol, Scale:symbol)\nUses_scale(\"twelve-tone technique composition\", \"chromatic scale\").\n.decl Has_tones(Scale:symbol, N_tones:float)\nHas_tones(\"chromatic scale\", 12).\nHas_tones(\"Iwato scale\", 5).\n.decl Answer()\nAnswer() :- Uses_scale(\"twelve-tone technique composition\", scale), Has_tones(scale, n_tones), Has_tones(\"Iwato scale\", n_tones2), n_tones != n_tones2.\n.output Answer", "completions": [".decl Uses_scale(Composition:symbol, Scale:symbol)\nUses_scale(\"twelve-tone technique composition\", \"chromatic scale\").\n.decl Has_tones(Scale:symbol, N_tones:float)\nHas_tones(\"chromatic scale\", 12).\nHas_tones(\"Iwato scale\", 5).\n.decl Answer()\nAnswer() :- Uses_scale(\"twelve-tone technique composition\", scale), Has_tones(scale, n_tones), Has_tones(\"Iwato scale\", n_tones2), n_tones != n_tones2.\n.output Answer"]}
{"id": 358, "answer": true, "completion": ".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Stephen King fans\", \"Stephen King books\").\nLikes(\"Stephen King fans\", \"clown images\").\n.decl Answer()\nAnswer() :- Likes(\"Stephen King fans\", \"clown images\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Stephen King fans\", \"Stephen King books\").\nLikes(\"Stephen King fans\", \"clown images\").\n.decl Answer()\nAnswer() :- Likes(\"Stephen King fans\", \"clown images\").\n.output Answer"]}
{"id": 359, "answer": true, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"McDonald's\", \"food\").\nSells(\"Intel\", \"computers\").\n.decl Answer()\nAnswer() :- !Sells(\"McDonald's\", \"computers\"), !Sells(\"Intel\", \"food\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"McDonald's\", \"food\").\nSells(\"Intel\", \"computers\").\n.decl Answer()\nAnswer() :- !Sells(\"McDonald's\", \"computers\"), !Sells(\"Intel\", \"food\").\n.output Answer"]}
{"id": 360, "answer": true, "completion": ".decl Was_in_year(Event:symbol, Year:float)\nWas_in_year(\"2008 Summer Olympics\", 2008).\n.decl Was_invented_in_year(Vehicle:symbol, Year:float)\nWas_invented_in_year(\"Rowe 550\", 2007).\n.decl Answer()\nAnswer() :- Was_in_year(\"2008 Summer Olympics\", year1), Was_invented_in_year(\"Rowe 550\", year2), year2 <= year1.\n.output Answer", "completions": [".decl Was_in_year(Event:symbol, Year:float)\nWas_in_year(\"2008 Summer Olympics\", 2008).\n.decl Was_invented_in_year(Vehicle:symbol, Year:float)\nWas_invented_in_year(\"Rowe 550\", 2007).\n.decl Answer()\nAnswer() :- Was_in_year(\"2008 Summer Olympics\", year1), Was_invented_in_year(\"Rowe 550\", year2), year2 <= year1.\n.output Answer"]}
{"id": 361, "answer": true, "completion": ".decl Has_n_items(Group:symbol, N_items:float)\nHas_n_items(\"Led Zeppelin\", 7).\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\n.decl Answer()\nAnswer() :- Has_n_items(\"Led Zeppelin\", n_items), Is_prime(n_items).\n.output Answer", "completions": [".decl Has_n_items(Group:symbol, N_items:float)\nHas_n_items(\"Led Zeppelin\", 7).\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\n.decl Answer()\nAnswer() :- Has_n_items(\"Led Zeppelin\", n_items), Is_prime(n_items).\n.output Answer"]}
{"id": 362, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 8.11).\nHas_height(\"German Shepherd\", 0.7).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"German Shepherd\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 8.11).\nHas_height(\"German Shepherd\", 0.7).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"German Shepherd\", height2), height1 > height2.\n.output Answer"]}
{"id": 363, "answer": false, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Great Pyramid of Giza\", 230.4).\n.decl Answer()\nAnswer() :- Has_length(\"Great Pyramid of Giza\", length), 200 * 1.8 <= length.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Great Pyramid of Giza\", 230.4).\n.decl Answer()\nAnswer() :- Has_length(\"Great Pyramid of Giza\", length), 200 * 1.8 <= length.\n.output Answer"]}
{"id": 364, "answer": true, "completion": ".decl Has_tumor(Organ:symbol, Tumor:symbol)\nHas_tumor(\"lymph nodes\", \"tumor\").\n.decl Is_ignorable(Tumor:symbol, Ignorable:symbol)\nIs_ignorable(\"tumor\", \"no\").\n.decl Answer()\nAnswer() :- Has_tumor(organ, \"tumor\"), Is_ignorable(\"tumor\", ignorable), ignorable = \"no\".\n.output Answer", "completions": [".decl Has_tumor(Organ:symbol, Tumor:symbol)\nHas_tumor(\"lymph nodes\", \"tumor\").\n.decl Is_ignorable(Tumor:symbol, Ignorable:symbol)\nIs_ignorable(\"tumor\", \"no\").\n.decl Answer()\nAnswer() :- Has_tumor(organ, \"tumor\"), Is_ignorable(\"tumor\", ignorable), ignorable = \"no\".\n.output Answer"]}
{"id": 365, "answer": false, "completion": ".decl Hosts(Person:symbol, Show:symbol)\nHosts(\"Stephen Colbert\", \"The Colbert Report\").\n.decl Votes(Person:symbol, Candidate:symbol)\nVotes(\"Stephen Colbert\", \"Donald Trump\").\n.decl Answer()\nAnswer() :- Hosts(\"Stephen Colbert\", \"The Colbert Report\"), Votes(\"Stephen Colbert\", \"Donald Trump\").\n.output Answer", "completions": [".decl Hosts(Person:symbol, Show:symbol)\nHosts(\"Stephen Colbert\", \"The Colbert Report\").\n.decl Votes(Person:symbol, Candidate:symbol)\nVotes(\"Stephen Colbert\", \"Donald Trump\").\n.decl Answer()\nAnswer() :- Hosts(\"Stephen Colbert\", \"The Colbert Report\"), Votes(\"Stephen Colbert\", \"Donald Trump\").\n.output Answer"]}
{"id": 366, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Tony Bennett\", 93).\n.decl Answer()\nAnswer() :- Has_age(\"Tony Bennett\", age), age < 20.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Tony Bennett\", 93).\n.decl Answer()\nAnswer() :- Has_age(\"Tony Bennett\", age), age < 20.\n.output Answer"]}
{"id": 367, "answer": true, "completion": ".decl Understands(Person:symbol, Concept:symbol)\n.decl Answer()\nAnswer() :- !Understands(\"Jesus\", \"Easter Bunny\").\n.output Answer", "completions": [".decl Understands(Person:symbol, Concept:symbol)\n.decl Answer()\nAnswer() :- !Understands(\"Jesus\", \"Easter Bunny\").\n.output Answer"]}
{"id": 368, "answer": true, "completion": ".decl Has_length(Sequence:symbol, Length:float)\nHas_length(\"Fibonacci number sequence\", Infinity).\nHas_length(\"number discovered in Pi\", Infinity).\n.decl Answer()\nAnswer() :- Has_length(\"Fibonacci number sequence\", length1), Has_length(\"number discovered in Pi\", length2), length1 > length2.\n.output Answer", "completions": [".decl Has_length(Sequence:symbol, Length:float)\nHas_length(\"Fibonacci number sequence\", Infinity).\nHas_length(\"number discovered in Pi\", Infinity).\n.decl Answer()\nAnswer() :- Has_length(\"Fibonacci number sequence\", length1), Has_length(\"number discovered in Pi\", length2), length1 > length2.\n.output Answer"]}
{"id": 369, "answer": true, "completion": ".decl Has_n_items(Object:symbol, N_items:float)\nHas_n_items(\"pea pod\", 10).\n.decl Answer()\nAnswer() :- Has_n_items(\"pea pod\", n_items), n_items < 1000000000.\n.output Answer", "completions": [".decl Has_n_items(Object:symbol, N_items:float)\nHas_n_items(\"pea pod\", 10).\n.decl Answer()\nAnswer() :- Has_n_items(\"pea pod\", n_items), n_items < 1000000000.\n.output Answer"]}
{"id": 370, "answer": false, "completion": ".decl Ingredient(Food:symbol, Ingredient:symbol)\nIngredient(\"French toast\", \"egg\").\nIngredient(\"French toast\", \"milk\").\nIngredient(\"French toast\", \"bread\").\n.decl Answer()\nAnswer() :- Ingredient(\"French toast\", \"goat\").\n.output Answer", "completions": [".decl Ingredient(Food:symbol, Ingredient:symbol)\nIngredient(\"French toast\", \"egg\").\nIngredient(\"French toast\", \"milk\").\nIngredient(\"French toast\", \"bread\").\n.decl Answer()\nAnswer() :- Ingredient(\"French toast\", \"goat\").\n.output Answer"]}
{"id": 371, "answer": false, "completion": ".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"US Secretary of State\", \"diplomat\").\nHas_role(\"administrative secretary of an office\", \"administrative assistant\").\n.decl Answer()\nAnswer() :- Has_role(\"US Secretary of State\", role1), Has_role(\"administrative secretary of an office\", role2), role1 = role2.\n.output Answer", "completions": [".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"US Secretary of State\", \"diplomat\").\nHas_role(\"administrative secretary of an office\", \"administrative assistant\").\n.decl Answer()\nAnswer() :- Has_role(\"US Secretary of State\", role1), Has_role(\"administrative secretary of an office\", role2), role1 = role2.\n.output Answer"]}
{"id": 372, "answer": false, "completion": ".decl Has_experience(Person:symbol, Experience:float)\nHas_experience(\"Dale Earnhardt Jr.\", 20).\n.decl Is_newbie(Person:symbol)\nIs_newbie(person) :- Has_experience(person, experience), experience < 5.\n.decl Answer()\nAnswer() :- Is_newbie(\"Dale Earnhardt Jr.\").\n.output Answer", "completions": [".decl Has_experience(Person:symbol, Experience:float)\nHas_experience(\"Dale Earnhardt Jr.\", 20).\n.decl Is_newbie(Person:symbol)\nIs_newbie(person) :- Has_experience(person, experience), experience < 5.\n.decl Answer()\nAnswer() :- Is_newbie(\"Dale Earnhardt Jr.\").\n.output Answer"]}
{"id": 373, "answer": true, "completion": ".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Ronda Rousey\", 10).\nHas_strength(\"Colossus\", 8).\n.decl Answer()\nAnswer() :- Has_strength(\"Ronda Rousey\", strength1), Has_strength(\"Colossus\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Ronda Rousey\", 10).\nHas_strength(\"Colossus\", 8).\n.decl Answer()\nAnswer() :- Has_strength(\"Ronda Rousey\", strength1), Has_strength(\"Colossus\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 374, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"DRL Racer X drone\", 50).\n.decl Has_length(Object:symbol, Length:float)\nHas_length(\"Brooklyn Bridge\", 1875).\n.decl Answer()\nAnswer() :- Has_speed(\"DRL Racer X drone\", speed), Has_length(\"Brooklyn Bridge\", length), speed * 18 >= length.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"DRL Racer X drone\", 50).\n.decl Has_length(Object:symbol, Length:float)\nHas_length(\"Brooklyn Bridge\", 1875).\n.decl Answer()\nAnswer() :- Has_speed(\"DRL Racer X drone\", speed), Has_length(\"Brooklyn Bridge\", length), speed * 18 >= length.\n.output Answer"]}
{"id": 375, "answer": true, "completion": ".decl Is_type_of_art(Art:symbol, Type:symbol)\nIs_type_of_art(\"photography\", \"realism\").\nIs_type_of_art(\"abstract art\", \"abstraction\").\n.decl Answer()\nAnswer() :- Is_type_of_art(\"photography\", type), Is_type_of_art(\"abstract art\", type).\n.output Answer", "completions": [".decl Is_type_of_art(Art:symbol, Type:symbol)\nIs_type_of_art(\"photography\", \"realism\").\nIs_type_of_art(\"abstract art\", \"abstraction\").\n.decl Answer()\nAnswer() :- Is_type_of_art(\"photography\", type), Is_type_of_art(\"abstract art\", type).\n.output Answer"]}
{"id": 376, "answer": false, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"giant squid\", 43).\nHas_length(\"titanic\", 269).\n.decl Answer()\nAnswer() :- Has_length(\"giant squid\", length1), Has_length(\"titanic\", length2), length1 < length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"giant squid\", 43).\nHas_length(\"titanic\", 269).\n.decl Answer()\nAnswer() :- Has_length(\"giant squid\", length1), Has_length(\"titanic\", length2), length1 < length2.\n.output Answer"]}
{"id": 377, "answer": true, "completion": ".decl Has_seasons(Show:symbol, Seasons:float)\nHas_seasons(\"Supernatural\", 15).\nHas_seasons(\"2001 CW debuting shows\", 14).\n.decl Answer()\nAnswer() :- Has_seasons(\"Supernatural\", seasons1), Has_seasons(\"2001 CW debuting shows\", seasons2), seasons1 > seasons2.\n.output Answer", "completions": [".decl Has_seasons(Show:symbol, Seasons:float)\nHas_seasons(\"Supernatural\", 15).\nHas_seasons(\"2001 CW debuting shows\", 14).\n.decl Answer()\nAnswer() :- Has_seasons(\"Supernatural\", seasons1), Has_seasons(\"2001 CW debuting shows\", seasons2), seasons1 > seasons2.\n.output Answer"]}
{"id": 378, "answer": true, "completion": ".decl Sees(Person_A:symbol, Event:symbol)\nSees(\"Eddie Murphy's father\", \"Eddie Murphy's first stand up show\").\n.decl Answer()\nAnswer() :- Sees(\"Eddie Murphy's father\", \"Eddie Murphy's first stand up show\").\n.output Answer", "completions": [".decl Sees(Person_A:symbol, Event:symbol)\nSees(\"Eddie Murphy's father\", \"Eddie Murphy's first stand up show\").\n.decl Answer()\nAnswer() :- Sees(\"Eddie Murphy's father\", \"Eddie Murphy's first stand up show\").\n.output Answer"]}
{"id": 379, "answer": false, "completion": ".decl Has_visibility(Object:symbol, Visibility:symbol)\nHas_visibility(\"methane\", \"invisible\").\n.decl Answer()\nAnswer() :- Has_visibility(\"methane\", visibility), visibility != \"visible\".\n.output Answer", "completions": [".decl Has_visibility(Object:symbol, Visibility:symbol)\nHas_visibility(\"methane\", \"invisible\").\n.decl Answer()\nAnswer() :- Has_visibility(\"methane\", visibility), visibility != \"visible\".\n.output Answer"]}
{"id": 380, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"frost\", \"autumn\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"September\", \"autumn\").\nIn_season(\"September\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), In_season(\"September\", season).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"frost\", \"autumn\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"September\", \"autumn\").\nIn_season(\"September\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), In_season(\"September\", season).\n.output Answer"]}
{"id": 381, "answer": false, "completion": ".decl Inhabits(Animal:symbol, Location:symbol)\nInhabits(\"mountain goat\", \"mountain\").\n.decl Is_summit(Location:symbol, Mountain:symbol)\nIs_summit(\"summit\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Inhabits(\"mountain goat\", location), Is_summit(location, \"Mount Sharp\").\n.output Answer", "completions": [".decl Inhabits(Animal:symbol, Location:symbol)\nInhabits(\"mountain goat\", \"mountain\").\n.decl Is_summit(Location:symbol, Mountain:symbol)\nIs_summit(\"summit\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Inhabits(\"mountain goat\", location), Is_summit(location, \"Mount Sharp\").\n.output Answer"]}
{"id": 382, "answer": false, "completion": ".decl Votes_for(Person:symbol, Candidate:symbol)\n.decl Answer()\nAnswer() :- Votes_for(\"Felicity Huffman\", \"Mike DeWine\").\n.output Answer", "completions": [".decl Votes_for(Person:symbol, Candidate:symbol)\n.decl Answer()\nAnswer() :- Votes_for(\"Felicity Huffman\", \"Mike DeWine\").\n.output Answer"]}
{"id": 383, "answer": false, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Tony Bennett\", 4).\n.decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Tony Bennett\", 2).\n.decl Answer()\nAnswer() :- Has_n_children(\"Tony Bennett\", n_children), Has_n_wives(\"Tony Bennett\", n_wives), n_children > n_wives.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Tony Bennett\", 4).\n.decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Tony Bennett\", 2).\n.decl Answer()\nAnswer() :- Has_n_children(\"Tony Bennett\", n_children), Has_n_wives(\"Tony Bennett\", n_wives), n_children > n_wives.\n.output Answer"]}
{"id": 384, "answer": true, "completion": ".decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Survivor\", 40).\n.decl Has_n_letters(Alphabet:symbol, N_letters:float)\nHas_n_letters(\"Ancient Greek\", 24).\n.decl Answer()\nAnswer() :- Has_n_seasons(\"Survivor\", n_seasons), Has_n_letters(\"Ancient Greek\", n_letters), n_seasons > n_letters.\n.output Answer", "completions": [".decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Survivor\", 40).\n.decl Has_n_letters(Alphabet:symbol, N_letters:float)\nHas_n_letters(\"Ancient Greek\", 24).\n.decl Answer()\nAnswer() :- Has_n_seasons(\"Survivor\", n_seasons), Has_n_letters(\"Ancient Greek\", n_letters), n_seasons > n_letters.\n.output Answer"]}
{"id": 385, "answer": false, "completion": ".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Carl Friedrich Gauss\", \"speaking\").\n.decl Has_distance(Person1:symbol, Person2:symbol, Distance:float)\nHas_distance(\"Carl Friedrich Gauss\", _, 100).\n.decl Answer()\nAnswer() :- Has_ability(\"Carl Friedrich Gauss\", \"speaking\"), Has_distance(\"Carl Friedrich Gauss\", _, distance), distance >= 100.\n.output Answer", "completions": [".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Carl Friedrich Gauss\", \"speaking\").\n.decl Has_distance(Person1:symbol, Person2:symbol, Distance:float)\nHas_distance(\"Carl Friedrich Gauss\", _, 100).\n.decl Answer()\nAnswer() :- Has_ability(\"Carl Friedrich Gauss\", \"speaking\"), Has_distance(\"Carl Friedrich Gauss\", _, distance), distance >= 100.\n.output Answer"]}
{"id": 386, "answer": true, "completion": ".decl Is_essential(Ingredient:symbol, Process:symbol)\nIs_essential(\"grapes\", \"winemaking\").\n.decl Answer()\nAnswer() :- Is_essential(\"grapes\", \"winemaking\").\n.output Answer", "completions": [".decl Is_essential(Ingredient:symbol, Process:symbol)\nIs_essential(\"grapes\", \"winemaking\").\n.decl Answer()\nAnswer() :- Is_essential(\"grapes\", \"winemaking\").\n.output Answer"]}
{"id": 387, "answer": false, "completion": ".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"woman pregnancy\", 9).\nLasts_n_months(\"wheat seed blooms\", 4).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"woman pregnancy\", n_months1), Lasts_n_months(\"wheat seed blooms\", n_months2), n_months1 > n_months2.\n.output Answer", "completions": [".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"woman pregnancy\", 9).\nLasts_n_months(\"wheat seed blooms\", 4).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"woman pregnancy\", n_months1), Lasts_n_months(\"wheat seed blooms\", n_months2), n_months1 > n_months2.\n.output Answer"]}
{"id": 388, "answer": true, "completion": ".decl Can_make(Technology:symbol, Object:symbol)\nCan_make(\"3D printing\", \"adenovirus\").\n.decl Answer()\nAnswer() :- Can_make(\"3D printing\", \"adenovirus\").\n.output Answer", "completions": [".decl Can_make(Technology:symbol, Object:symbol)\nCan_make(\"3D printing\", \"adenovirus\").\n.decl Answer()\nAnswer() :- Can_make(\"3D printing\", \"adenovirus\").\n.output Answer"]}
{"id": 389, "answer": true, "completion": ".decl Has_character(Project:symbol, Character:symbol)\nHas_character(\"The Dreamers\", \"Marianne\").\n.decl Is_in_project(Actor:symbol, Project:symbol)\nIs_in_project(\"Eva Green\", \"The Dreamers\").\n.decl Answer()\nAnswer() :- Has_character(project, \"Marianne\"), Is_in_project(\"Eva Green\", project).\n.output Answer", "completions": [".decl Has_character(Project:symbol, Character:symbol)\nHas_character(\"The Dreamers\", \"Marianne\").\n.decl Is_in_project(Actor:symbol, Project:symbol)\nIs_in_project(\"Eva Green\", \"The Dreamers\").\n.decl Answer()\nAnswer() :- Has_character(project, \"Marianne\"), Is_in_project(\"Eva Green\", project).\n.output Answer"]}
{"id": 390, "answer": true, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 10000).\n.decl Has_n_homeless(State:symbol, N_homeless:float)\nHas_n_homeless(\"Michigan\", 10000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity), Has_n_homeless(\"Michigan\", n_homeless), capacity >= n_homeless.\n.output Answer", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 10000).\n.decl Has_n_homeless(State:symbol, N_homeless:float)\nHas_n_homeless(\"Michigan\", 10000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity), Has_n_homeless(\"Michigan\", n_homeless), capacity >= n_homeless.\n.output Answer"]}
{"id": 391, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"red fox\", 4).\n.decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Arnold Schwarzenegger\", 200).\n.decl Answer()\nAnswer() :- Has_weight(\"red fox\", weight), Has_strength(\"Arnold Schwarzenegger\", strength), strength < weight.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"red fox\", 4).\n.decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Arnold Schwarzenegger\", 200).\n.decl Answer()\nAnswer() :- Has_weight(\"red fox\", weight), Has_strength(\"Arnold Schwarzenegger\", strength), strength < weight.\n.output Answer"]}
{"id": 392, "answer": false, "completion": ".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"Eid al-Fitr\", 24).\nLasts_n_hours(\"US Office\", 6).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"Eid al-Fitr\", n_hours1), Lasts_n_hours(\"US Office\", n_hours2), n_hours1 < n_hours2.\n.output Answer", "completions": [".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"Eid al-Fitr\", 24).\nLasts_n_hours(\"US Office\", 6).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"Eid al-Fitr\", n_hours1), Lasts_n_hours(\"US Office\", n_hours2), n_hours1 < n_hours2.\n.output Answer"]}
{"id": 393, "answer": true, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Tropicana Field\", 47800).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Auburn, New York\", 28000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tropicana Field\", capacity), Has_population(\"Auburn, New York\", population), capacity >= population.\n.output Answer", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Tropicana Field\", 47800).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Auburn, New York\", 28000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tropicana Field\", capacity), Has_population(\"Auburn, New York\", population), capacity >= population.\n.output Answer"]}
{"id": 394, "answer": false, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Richard III\", \"Edward V\").\nKnows(\"Edward V\", \"Edward VI\").\n.decl Answer()\nAnswer() :- Knows(\"Richard III\", \"Edward VI\").\n.output Answer", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Richard III\", \"Edward V\").\nKnows(\"Edward V\", \"Edward VI\").\n.decl Answer()\nAnswer() :- Knows(\"Richard III\", \"Edward VI\").\n.output Answer"]}
{"id": 395, "answer": false, "completion": ".decl Has_votes(Event:symbol, Votes:float)\nHas_votes(\"1980 United States presidential election\", 81.5).\n.decl Has_landslides(Event:symbol, Landslides:float)\nHas_landslides(\"1936 United States presidential election\", 24.3).\nHas_landslides(\"1944 United States presidential election\", 25.6).\n.decl Answer()\nAnswer() :- Has_votes(\"1980 United States presidential election\", votes), Has_landslides(event, landslides), landslides > votes.\n.output Answer", "completions": [".decl Has_votes(Event:symbol, Votes:float)\nHas_votes(\"1980 United States presidential election\", 81.5).\n.decl Has_landslides(Event:symbol, Landslides:float)\nHas_landslides(\"1936 United States presidential election\", 24.3).\nHas_landslides(\"1944 United States presidential election\", 25.6).\n.decl Answer()\nAnswer() :- Has_votes(\"1980 United States presidential election\", votes), Has_landslides(event, landslides), landslides > votes.\n.output Answer"]}
{"id": 396, "answer": false, "completion": ".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Red Sea\", 2200).\n.decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Nuno Gomes\", \"diving\").\n.decl Answer()\nAnswer() :- Has_depth(\"Red Sea\", depth), Has_ability(\"Nuno Gomes\", ability), depth > 1000.\n.output Answer", "completions": [".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Red Sea\", 2200).\n.decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Nuno Gomes\", \"diving\").\n.decl Answer()\nAnswer() :- Has_depth(\"Red Sea\", depth), Has_ability(\"Nuno Gomes\", ability), depth > 1000.\n.output Answer"]}
{"id": 397, "answer": true, "completion": ".decl Knows(Person:symbol, Topic:symbol)\nKnows(\"Tom Cruise\", \"mental auditing\").\n.decl Answer()\nAnswer() :- Knows(\"Tom Cruise\", \"mental auditing\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Topic:symbol)\nKnows(\"Tom Cruise\", \"mental auditing\").\n.decl Answer()\nAnswer() :- Knows(\"Tom Cruise\", \"mental auditing\").\n.output Answer"]}
{"id": 398, "answer": false, "completion": ".decl Listens_to(Person:symbol, Music_format:symbol)\nListens_to(\"John Lennon\", \"vinyl\").\n.decl Answer()\nAnswer() :- !Listens_to(\"John Lennon\", \"compact discs\").\n.output Answer", "completions": [".decl Listens_to(Person:symbol, Music_format:symbol)\nListens_to(\"John Lennon\", \"vinyl\").\n.decl Answer()\nAnswer() :- !Listens_to(\"John Lennon\", \"compact discs\").\n.output Answer"]}
{"id": 399, "answer": false, "completion": ".decl Was_prime_minister(Person:symbol, Time:symbol)\nWas_prime_minister(\"Stanley Baldwin\", \"1923-1924\").\nWas_prime_minister(\"Stanley Baldwin\", \"1924-1929\").\nWas_prime_minister(\"Stanley Baldwin\", \"1935-1937\").\nWas_prime_minister(\"Margaret Thatcher\", \"1979-1990\").\nWas_prime_minister(\"Theresa May\", \"2016-2019\").\n.decl Answer()\nAnswer() :- Was_prime_minister(\"Stanley Baldwin\", time1), Was_prime_minister(person, time2), (time1 = time2 + 1; time1 = time2 - 1), person != \"Stanley Baldwin\", person != \"Margaret Thatcher\", person != \"Theresa May\".\n.output Answer", "completions": [".decl Was_prime_minister(Person:symbol, Time:symbol)\nWas_prime_minister(\"Stanley Baldwin\", \"1923-1924\").\nWas_prime_minister(\"Stanley Baldwin\", \"1924-1929\").\nWas_prime_minister(\"Stanley Baldwin\", \"1935-1937\").\nWas_prime_minister(\"Margaret Thatcher\", \"1979-1990\").\nWas_prime_minister(\"Theresa May\", \"2016-2019\").\n.decl Answer()\nAnswer() :- Was_prime_minister(\"Stanley Baldwin\", time1), Was_prime_minister(person, time2), (time1 = time2 + 1; time1 = time2 - 1), person != \"Stanley Baldwin\", person != \"Margaret Thatcher\", person != \"Theresa May\".\n.output Answer"]}
{"id": 400, "answer": true, "completion": ".decl Has_shoe_size(Person:symbol, Shoe_size:float)\nHas_shoe_size(\"Benito Mussolini\", 12).\nHas_shoe_size(\"Hafþór Björnsson\", 11).\n.decl Answer()\nAnswer() :- Has_shoe_size(\"Benito Mussolini\", size1), Has_shoe_size(\"Hafþór Björnsson\", size2), size1 > size2.\n.output Answer", "completions": [".decl Has_shoe_size(Person:symbol, Shoe_size:float)\nHas_shoe_size(\"Benito Mussolini\", 12).\nHas_shoe_size(\"Hafþór Björnsson\", 11).\n.decl Answer()\nAnswer() :- Has_shoe_size(\"Benito Mussolini\", size1), Has_shoe_size(\"Hafþór Björnsson\", size2), size1 > size2.\n.output Answer"]}
{"id": 401, "answer": true, "completion": ".decl Fears(Animal_A:symbol, Animal_B:symbol)\nFears(\"black-tailed jackrabbit\", \"European wildcat\").\n.decl Answer()\nAnswer() :- Fears(\"black-tailed jackrabbit\", \"European wildcat\").\n.output Answer", "completions": [".decl Fears(Animal_A:symbol, Animal_B:symbol)\nFears(\"black-tailed jackrabbit\", \"European wildcat\").\n.decl Answer()\nAnswer() :- Fears(\"black-tailed jackrabbit\", \"European wildcat\").\n.output Answer"]}
{"id": 402, "answer": true, "completion": ".decl Named_after(Place:symbol, Person:symbol)\nNamed_after(\"Norman Oklahoma\", \"Norman\").\n.decl Is_viking(Person:symbol)\nIs_viking(\"Norman\").\n.decl Answer()\nAnswer() :- Named_after(\"Norman Oklahoma\", person), Is_viking(person).\n.output Answer", "completions": [".decl Named_after(Place:symbol, Person:symbol)\nNamed_after(\"Norman Oklahoma\", \"Norman\").\n.decl Is_viking(Person:symbol)\nIs_viking(\"Norman\").\n.decl Answer()\nAnswer() :- Named_after(\"Norman Oklahoma\", person), Is_viking(person).\n.output Answer"]}
{"id": 403, "answer": true, "completion": ".decl Answer()\nAnswer() :- true.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- true.\n.output Answer"]}
{"id": 404, "answer": true, "completion": ".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Glen Beck\", \"Stephen Colbert\").\n.decl Answer()\nAnswer() :- Collaborates(\"Glen Beck\", \"Stephen Colbert\").\n.output Answer", "completions": [".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Glen Beck\", \"Stephen Colbert\").\n.decl Answer()\nAnswer() :- Collaborates(\"Glen Beck\", \"Stephen Colbert\").\n.output Answer"]}
{"id": 405, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Audi R8 V-10 Plus\", 330).\n.decl Is_barrier(Barrier:symbol, Speed:float)\nIs_barrier(\"sound barrier\", 343).\n.decl Answer()\nAnswer() :- Has_speed(\"Audi R8 V-10 Plus\", speed1), Is_barrier(\"sound barrier\", speed2), speed1 < speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Audi R8 V-10 Plus\", 330).\n.decl Is_barrier(Barrier:symbol, Speed:float)\nIs_barrier(\"sound barrier\", 343).\n.decl Answer()\nAnswer() :- Has_speed(\"Audi R8 V-10 Plus\", speed1), Is_barrier(\"sound barrier\", speed2), speed1 < speed2.\n.output Answer"]}
{"id": 406, "answer": true, "completion": ".decl Has_lifespan(Species:symbol, Lifespan:float)\nHas_lifespan(\"monkey\", 20).\nHas_lifespan(\"human\", 80).\n.decl Answer()\nAnswer() :- Has_lifespan(\"monkey\", lifespan1), Has_lifespan(\"human\", lifespan2), lifespan1 > lifespan2.\n.output Answer", "completions": [".decl Has_lifespan(Species:symbol, Lifespan:float)\nHas_lifespan(\"monkey\", 20).\nHas_lifespan(\"human\", 80).\n.decl Answer()\nAnswer() :- Has_lifespan(\"monkey\", lifespan1), Has_lifespan(\"human\", lifespan2), lifespan1 > lifespan2.\n.output Answer"]}
{"id": 407, "answer": true, "completion": ".decl Believes_in(Religion:symbol, Event:symbol)\nBelieves_in(\"Christianity\", \"Armageddon\").\nBelieves_in(\"Judaism\", \"Armageddon\").\n.decl Answer()\nAnswer() :- Believes_in(religion, \"Armageddon\").\n.output Answer", "completions": [".decl Believes_in(Religion:symbol, Event:symbol)\nBelieves_in(\"Christianity\", \"Armageddon\").\nBelieves_in(\"Judaism\", \"Armageddon\").\n.decl Answer()\nAnswer() :- Believes_in(religion, \"Armageddon\").\n.output Answer"]}
{"id": 408, "answer": false, "completion": ".decl Has_injury_level(Dance:symbol, Injury_level:float)\nHas_injury_level(\"waltz\", 1).\nHas_injury_level(\"slam dance\", 5).\n.decl Answer()\nAnswer() :- Has_injury_level(\"waltz\", injury_level1), Has_injury_level(\"slam dance\", injury_level2), injury_level1 < injury_level2.\n.output Answer", "completions": [".decl Has_injury_level(Dance:symbol, Injury_level:float)\nHas_injury_level(\"waltz\", 1).\nHas_injury_level(\"slam dance\", 5).\n.decl Answer()\nAnswer() :- Has_injury_level(\"waltz\", injury_level1), Has_injury_level(\"slam dance\", injury_level2), injury_level1 < injury_level2.\n.output Answer"]}
{"id": 409, "answer": true, "completion": ".decl Has_prehensile_limbs(Animal:symbol, Prehensile_limbs:symbol)\nHas_prehensile_limbs(\"monkey\", \"yes\").\n.decl Answer()\nAnswer() :- Has_prehensile_limbs(\"Yeti\", prehensile_limbs), prehensile_limbs = \"yes\".\n.output Answer", "completions": [".decl Has_prehensile_limbs(Animal:symbol, Prehensile_limbs:symbol)\nHas_prehensile_limbs(\"monkey\", \"yes\").\n.decl Answer()\nAnswer() :- Has_prehensile_limbs(\"Yeti\", prehensile_limbs), prehensile_limbs = \"yes\".\n.output Answer"]}
{"id": 410, "answer": true, "completion": ".decl Can_host(Venue:symbol, Event:symbol)\nCan_host(\"Javits Center\", \"United Nations Framework Convention on Climate Change\").\n.decl Answer()\nAnswer() :- Can_host(\"Javits Center\", \"United Nations Framework Convention on Climate Change\").\n.output Answer", "completions": [".decl Can_host(Venue:symbol, Event:symbol)\nCan_host(\"Javits Center\", \"United Nations Framework Convention on Climate Change\").\n.decl Answer()\nAnswer() :- Can_host(\"Javits Center\", \"United Nations Framework Convention on Climate Change\").\n.output Answer"]}
{"id": 411, "answer": true, "completion": ".decl Has_outcome(Event:symbol, Outcome:symbol)\nHas_outcome(\"Operation Barbarossa\", \"failure\").\nHas_outcome(\"Barbarossa's last expedition\", \"success\").\n.decl Answer()\nAnswer() :- Has_outcome(event, outcome), (outcome = \"success\" ; outcome = \"failure\").\n.output Answer", "completions": [".decl Has_outcome(Event:symbol, Outcome:symbol)\nHas_outcome(\"Operation Barbarossa\", \"failure\").\nHas_outcome(\"Barbarossa's last expedition\", \"success\").\n.decl Answer()\nAnswer() :- Has_outcome(event, outcome), (outcome = \"success\" ; outcome = \"failure\").\n.output Answer"]}
{"id": 412, "answer": false, "completion": ".decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"CAPTCHA\", \"CATPCH\").\nHas_letters(\"Completely\", \"CMPLEETLY\").\nHas_letters(\"Automated\", \"ATOMDATE\").\nHas_letters(\"Public\", \"PBLCU\").\nHas_letters(\"Turing\", \"TRINGU\").\nHas_letters(\"Test\", \"TETS\").\n.decl Is_palindrome(Word:symbol)\nIs_palindrome(word) :- Has_letters(word, letters), reverse(letters, letters_rev), letters = letters_rev.\n.decl Answer()\nAnswer() :- Is_palindrome(word), Has_letters(\"CAPTCHA\", letters), contains(letters, word).\n.output Answer", "completions": [".decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"CAPTCHA\", \"CATPCH\").\nHas_letters(\"Completely\", \"CMPLEETLY\").\nHas_letters(\"Automated\", \"ATOMDATE\").\nHas_letters(\"Public\", \"PBLCU\").\nHas_letters(\"Turing\", \"TRINGU\").\nHas_letters(\"Test\", \"TETS\").\n.decl Is_palindrome(Word:symbol)\nIs_palindrome(word) :- Has_letters(word, letters), reverse(letters, letters_rev), letters = letters_rev.\n.decl Answer()\nAnswer() :- Is_palindrome(word), Has_letters(\"CAPTCHA\", letters), contains(letters, word).\n.output Answer"]}
{"id": 413, "answer": true, "completion": ".decl Is_located_in(Organization:symbol, Location:symbol)\nIs_located_in(\"Universal Music Group\", \"New York City\").\n.decl Is_heard_in(Event:symbol, Location:symbol)\nIs_heard_in(\"NY Stock Exchange closing bell\", \"New York City\").\n.decl Answer()\nAnswer() :- Is_located_in(\"Universal Music Group\", location), Is_heard_in(\"NY Stock Exchange closing bell\", location).\n.output Answer", "completions": [".decl Is_located_in(Organization:symbol, Location:symbol)\nIs_located_in(\"Universal Music Group\", \"New York City\").\n.decl Is_heard_in(Event:symbol, Location:symbol)\nIs_heard_in(\"NY Stock Exchange closing bell\", \"New York City\").\n.decl Answer()\nAnswer() :- Is_located_in(\"Universal Music Group\", location), Is_heard_in(\"NY Stock Exchange closing bell\", location).\n.output Answer"]}
{"id": 414, "answer": true, "completion": ".decl Is_alliteration(Phrase:symbol)\nIs_alliteration(\"Lorem ipsum\").\n.decl Answer()\nAnswer() :- !Is_alliteration(\"muspi meroL\").\n.output Answer", "completions": [".decl Is_alliteration(Phrase:symbol)\nIs_alliteration(\"Lorem ipsum\").\n.decl Answer()\nAnswer() :- !Is_alliteration(\"muspi meroL\").\n.output Answer"]}
{"id": 415, "answer": true, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"The Mona Lisa\", 7500000).\n.decl Has_assets(Company:symbol, Assets:float)\nHas_assets(\"Amazon\", 110000000000).\n.decl Answer()\nAnswer() :- Has_price(\"The Mona Lisa\", price), Has_assets(\"Amazon\", assets), assets >= price.\n.output Answer", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"The Mona Lisa\", 7500000).\n.decl Has_assets(Company:symbol, Assets:float)\nHas_assets(\"Amazon\", 110000000000).\n.decl Answer()\nAnswer() :- Has_price(\"The Mona Lisa\", price), Has_assets(\"Amazon\", assets), assets >= price.\n.output Answer"]}
{"id": 416, "answer": false, "completion": ".decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"cleric\", \"celibate\").\n.decl Punishment(Crime:symbol, Punishment:symbol)\nPunishment(\"adultery\", \"stoning\").\n.decl Country(Person:symbol, Country:symbol)\nCountry(\"cleric\", \"Somalia\").\n.decl Answer()\nAnswer() :- Has_status(\"cleric\", \"celibate\"), Punishment(\"adultery\", \"stoning\"), Country(\"cleric\", \"Somalia\").\n.output Answer", "completions": [".decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"cleric\", \"celibate\").\n.decl Punishment(Crime:symbol, Punishment:symbol)\nPunishment(\"adultery\", \"stoning\").\n.decl Country(Person:symbol, Country:symbol)\nCountry(\"cleric\", \"Somalia\").\n.decl Answer()\nAnswer() :- Has_status(\"cleric\", \"celibate\"), Punishment(\"adultery\", \"stoning\"), Country(\"cleric\", \"Somalia\").\n.output Answer"]}
{"id": 417, "answer": true, "completion": ".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Kia Rio\", 4.2, 1.7, 1.5).\nHas_dimensions(\"Oval Office\", 18.3, 18.3, 11.3).\n.decl Answer()\nAnswer() :- Has_dimensions(\"Kia Rio\", length1, width1, height1), Has_dimensions(\"Oval Office\", length2, width2, height2), length1 <= length2, width1 <= width2, height1 <= height2.\n.output Answer", "completions": [".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Kia Rio\", 4.2, 1.7, 1.5).\nHas_dimensions(\"Oval Office\", 18.3, 18.3, 11.3).\n.decl Answer()\nAnswer() :- Has_dimensions(\"Kia Rio\", length1, width1, height1), Has_dimensions(\"Oval Office\", length2, width2, height2), length1 <= length2, width1 <= width2, height1 <= height2.\n.output Answer"]}
{"id": 418, "answer": true, "completion": ".decl Has_family_ties(Person_A:symbol, Person_B:symbol)\nHas_family_ties(\"King of Portuguese people in 1515\", \"Tudors\").\n.decl Answer()\nAnswer() :- Has_family_ties(\"King of Portuguese people in 1515\", \"Tudors\").\n.output Answer", "completions": [".decl Has_family_ties(Person_A:symbol, Person_B:symbol)\nHas_family_ties(\"King of Portuguese people in 1515\", \"Tudors\").\n.decl Answer()\nAnswer() :- Has_family_ties(\"King of Portuguese people in 1515\", \"Tudors\").\n.output Answer"]}
{"id": 419, "answer": false, "completion": ".decl Reproduces(Gender_A:symbol, Gender_B:symbol)\nReproduces(\"male\", \"female\").\n.decl Answer()\nAnswer() :- !Reproduces(\"male\", \"male\").\n.output Answer", "completions": [".decl Reproduces(Gender_A:symbol, Gender_B:symbol)\nReproduces(\"male\", \"female\").\n.decl Answer()\nAnswer() :- !Reproduces(\"male\", \"male\").\n.output Answer"]}
{"id": 420, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Andre the Giant\", 7.4).\n.decl Answer()\nAnswer() :- Has_height(\"Andre the Giant\", height1), Has_height(\"Yeti\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Andre the Giant\", 7.4).\n.decl Answer()\nAnswer() :- Has_height(\"Andre the Giant\", height1), Has_height(\"Yeti\", height2), height1 > height2.\n.output Answer"]}
{"id": 421, "answer": true, "completion": ".decl Is_known_for(Person:symbol, Genre:symbol)\nIs_known_for(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Is_obscure(Person:symbol, Genre:symbol)\nIs_obscure(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Answer()\nAnswer() :- Is_known_for(\"Edgar Allan Poe\", genre), Is_obscure(\"Edgar Allan Poe\", genre).\n.output Answer", "completions": [".decl Is_known_for(Person:symbol, Genre:symbol)\nIs_known_for(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Is_obscure(Person:symbol, Genre:symbol)\nIs_obscure(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Answer()\nAnswer() :- Is_known_for(\"Edgar Allan Poe\", genre), Is_obscure(\"Edgar Allan Poe\", genre).\n.output Answer"]}
{"id": 422, "answer": false, "completion": ".decl Served_in_white_house(Person:symbol, Time:symbol)\nServed_in_white_house(\"Theodore Roosevelt\", \"1901-1909\").\n.decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"Panic of 1907\", \"1907\").\n.decl Answer()\nAnswer() :- Served_in_white_house(\"Theodore Roosevelt\", time), Happened_in_time(\"Panic of 1907\", time).\n.output Answer", "completions": [".decl Served_in_white_house(Person:symbol, Time:symbol)\nServed_in_white_house(\"Theodore Roosevelt\", \"1901-1909\").\n.decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"Panic of 1907\", \"1907\").\n.decl Answer()\nAnswer() :- Served_in_white_house(\"Theodore Roosevelt\", time), Happened_in_time(\"Panic of 1907\", time).\n.output Answer"]}
{"id": 423, "answer": false, "completion": ".decl Named_after(Ship:symbol, Battle:symbol)\nNamed_after(\"USS Iwo Jima\", \"Battle of Iwo Jima\").\n.decl Recovered(Ship:symbol, Event:symbol)\nRecovered(\"USS Iwo Jima\", \"Apollo 13\").\n.decl Answer()\nAnswer() :- Recovered(ship, \"Apollo 13\"), Named_after(ship, battle), battle != \"Battle of Iwo Jima\".\n.output Answer", "completions": [".decl Named_after(Ship:symbol, Battle:symbol)\nNamed_after(\"USS Iwo Jima\", \"Battle of Iwo Jima\").\n.decl Recovered(Ship:symbol, Event:symbol)\nRecovered(\"USS Iwo Jima\", \"Apollo 13\").\n.decl Answer()\nAnswer() :- Recovered(ship, \"Apollo 13\"), Named_after(ship, battle), battle != \"Battle of Iwo Jima\".\n.output Answer"]}
{"id": 424, "answer": true, "completion": ".decl Has_n_fused_vertebrae(Species:symbol, N_fused_vertebrae:float)\nHas_n_fused_vertebrae(\"human\", 5).\nHas_n_fused_vertebrae(\"Alaskan Malamute\", 4).\n.decl Answer()\nAnswer() :- Has_n_fused_vertebrae(\"human\", n_fused_vertebrae1), Has_n_fused_vertebrae(\"Alaskan Malamute\", n_fused_vertebrae2), n_fused_vertebrae1 > n_fused_vertebrae2.\n.output Answer", "completions": [".decl Has_n_fused_vertebrae(Species:symbol, N_fused_vertebrae:float)\nHas_n_fused_vertebrae(\"human\", 5).\nHas_n_fused_vertebrae(\"Alaskan Malamute\", 4).\n.decl Answer()\nAnswer() :- Has_n_fused_vertebrae(\"human\", n_fused_vertebrae1), Has_n_fused_vertebrae(\"Alaskan Malamute\", n_fused_vertebrae2), n_fused_vertebrae1 > n_fused_vertebrae2.\n.output Answer"]}
{"id": 425, "answer": true, "completion": ".decl Participates_in(Person:symbol, Event:symbol)\nParticipates_in(\"Josh Blue\", \"Paralympics Games\").\n.decl Answer()\nAnswer() :- Participates_in(\"Josh Blue\", \"Paralympics Games\").\n.output Answer", "completions": [".decl Participates_in(Person:symbol, Event:symbol)\nParticipates_in(\"Josh Blue\", \"Paralympics Games\").\n.decl Answer()\nAnswer() :- Participates_in(\"Josh Blue\", \"Paralympics Games\").\n.output Answer"]}
{"id": 426, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Evander Holyfield\", 58).\n.decl Has_record(Event:symbol, Age:float)\nHas_record(\"boxing return\", 55).\n.decl Answer()\nAnswer() :- Has_age(\"Evander Holyfield\", age), Has_record(\"boxing return\", record), age > record.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Evander Holyfield\", 58).\n.decl Has_record(Event:symbol, Age:float)\nHas_record(\"boxing return\", 55).\n.decl Answer()\nAnswer() :- Has_age(\"Evander Holyfield\", age), Has_record(\"boxing return\", record), age > record.\n.output Answer"]}
{"id": 427, "answer": true, "completion": ".decl Has_temper(Person:symbol, Temper:symbol)\nHas_temper(\"Glenn Beck\", \"mild\").\n.decl Answer()\nAnswer() :- Has_temper(\"Glenn Beck\", \"mild\").\n.output Answer", "completions": [".decl Has_temper(Person:symbol, Temper:symbol)\nHas_temper(\"Glenn Beck\", \"mild\").\n.decl Answer()\nAnswer() :- Has_temper(\"Glenn Beck\", \"mild\").\n.output Answer"]}
{"id": 428, "answer": true, "completion": ".decl Connects_to(Bone_A:symbol, Bone_B:symbol)\nConnects_to(\"sternum\", \"clavicle\").\nConnects_to(\"sternum\", \"ribs\").\nConnects_to(\"sternum\", \"vertebrae\").\n.decl Mentioned_in(Bone:symbol, Poem:symbol)\nMentioned_in(\"clavicle\", \"Dem Bones\").\nMentioned_in(\"ribs\", \"Dem Bones\").\nMentioned_in(\"vertebrae\", \"Dem Bones\").\n.decl Answer()\nAnswer() :- Connects_to(\"sternum\", bone), Mentioned_in(bone, \"Dem Bones\").\n.output Answer", "completions": [".decl Connects_to(Bone_A:symbol, Bone_B:symbol)\nConnects_to(\"sternum\", \"clavicle\").\nConnects_to(\"sternum\", \"ribs\").\nConnects_to(\"sternum\", \"vertebrae\").\n.decl Mentioned_in(Bone:symbol, Poem:symbol)\nMentioned_in(\"clavicle\", \"Dem Bones\").\nMentioned_in(\"ribs\", \"Dem Bones\").\nMentioned_in(\"vertebrae\", \"Dem Bones\").\n.decl Answer()\nAnswer() :- Connects_to(\"sternum\", bone), Mentioned_in(bone, \"Dem Bones\").\n.output Answer"]}
{"id": 429, "answer": true, "completion": ".decl Transmits(Animal:symbol, Disease:symbol)\nTransmits(\"dog\", \"rabies\").\n.decl Answer()\nAnswer() :- Transmits(\"dog\", \"rabies\").\n.output Answer", "completions": [".decl Transmits(Animal:symbol, Disease:symbol)\nTransmits(\"dog\", \"rabies\").\n.decl Answer()\nAnswer() :- Transmits(\"dog\", \"rabies\").\n.output Answer"]}
{"id": 430, "answer": true, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Buddy The Elf\", \"Jovie\").\n.decl Works_in(Person:symbol, Industry:symbol)\nWorks_in(\"Jovie\", \"publishing\").\n.decl Answer()\nAnswer() :- Knows(\"Buddy The Elf\", person), Works_in(person, \"publishing\").\n.output Answer", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Buddy The Elf\", \"Jovie\").\n.decl Works_in(Person:symbol, Industry:symbol)\nWorks_in(\"Jovie\", \"publishing\").\n.decl Answer()\nAnswer() :- Knows(\"Buddy The Elf\", person), Works_in(person, \"publishing\").\n.output Answer"]}
{"id": 431, "answer": true, "completion": ".decl Associated_with(Person:symbol, Object:symbol)\nAssociated_with(\"Issac Newton\", \"apple\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"apple\", \"red\").\n.decl Answer()\nAnswer() :- Associated_with(\"Issac Newton\", object), Has_color(object, \"red\").\n.output Answer", "completions": [".decl Associated_with(Person:symbol, Object:symbol)\nAssociated_with(\"Issac Newton\", \"apple\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"apple\", \"red\").\n.decl Answer()\nAnswer() :- Associated_with(\"Issac Newton\", object), Has_color(object, \"red\").\n.output Answer"]}
{"id": 432, "answer": false, "completion": ".decl Has_nutrient(Food:symbol, Nutrient:symbol, Amount:float)\nHas_nutrient(\"zucchini\", \"potassium\", 0.5).\n.decl Has_recommendation(Nutrient:symbol, Amount:float)\nHas_recommendation(\"potassium\", 4.7).\n.decl Answer()\nAnswer() :- Has_nutrient(\"zucchini\", \"potassium\", amount1), Has_recommendation(\"potassium\", amount2), amount1 * 7 >= amount2.\n.output Answer", "completions": [".decl Has_nutrient(Food:symbol, Nutrient:symbol, Amount:float)\nHas_nutrient(\"zucchini\", \"potassium\", 0.5).\n.decl Has_recommendation(Nutrient:symbol, Amount:float)\nHas_recommendation(\"potassium\", 4.7).\n.decl Answer()\nAnswer() :- Has_nutrient(\"zucchini\", \"potassium\", amount1), Has_recommendation(\"potassium\", amount2), amount1 * 7 >= amount2.\n.output Answer"]}
{"id": 433, "answer": true, "completion": ".decl Has_wealth(Person:symbol, Wealth:float)\nHas_wealth(\"Oprah Winfrey\", 3000000000).\n.decl Cost(Object:symbol, Cost:float)\nCost(\"Bugatti luxury car\", 3000000).\n.decl Answer()\nAnswer() :- Has_wealth(\"Oprah Winfrey\", wealth), Cost(\"Bugatti luxury car\", cost), wealth >= cost * 12.\n.output Answer", "completions": [".decl Has_wealth(Person:symbol, Wealth:float)\nHas_wealth(\"Oprah Winfrey\", 3000000000).\n.decl Cost(Object:symbol, Cost:float)\nCost(\"Bugatti luxury car\", 3000000).\n.decl Answer()\nAnswer() :- Has_wealth(\"Oprah Winfrey\", wealth), Cost(\"Bugatti luxury car\", cost), wealth >= cost * 12.\n.output Answer"]}
{"id": 434, "answer": true, "completion": ".decl Won_election(Year:float, Party:symbol)\nWon_election(1980, \"Grand Old Party\").\n.decl Answer()\nAnswer() :- Won_election(1980, \"Grand Old Party\").\n.output Answer", "completions": [".decl Won_election(Year:float, Party:symbol)\nWon_election(1980, \"Grand Old Party\").\n.decl Answer()\nAnswer() :- Won_election(1980, \"Grand Old Party\").\n.output Answer"]}
{"id": 435, "answer": true, "completion": ".decl Has_last_name(Person:symbol, Last_name:symbol)\nHas_last_name(\"Henry Ford\", \"Ford\").\n.decl Is_popular(Name:symbol)\nIs_popular(\"Ford\").\n.decl Answer()\nAnswer() :- Has_last_name(\"Henry Ford\", last_name), Is_popular(last_name).\n.output Answer", "completions": [".decl Has_last_name(Person:symbol, Last_name:symbol)\nHas_last_name(\"Henry Ford\", \"Ford\").\n.decl Is_popular(Name:symbol)\nIs_popular(\"Ford\").\n.decl Answer()\nAnswer() :- Has_last_name(\"Henry Ford\", last_name), Is_popular(last_name).\n.output Answer"]}
{"id": 436, "answer": true, "completion": ".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"Liberty Bell\", \"Philadelphia\").\n.decl Answer()\nAnswer() :- Has_location(\"Liberty Bell\", \"Philadelphia\").\n.output Answer", "completions": [".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"Liberty Bell\", \"Philadelphia\").\n.decl Answer()\nAnswer() :- Has_location(\"Liberty Bell\", \"Philadelphia\").\n.output Answer"]}
{"id": 437, "answer": true, "completion": ".decl Has_air_time(Show:symbol, Air_time:symbol)\nHas_air_time(\"Monday Night Football\", \"Monday 8pm\").\nHas_air_time(\"WWE Raw\", \"Monday 9pm\").\n.decl Answer()\nAnswer() :- Has_air_time(\"Monday Night Football\", air_time1), Has_air_time(\"WWE Raw\", air_time2), air_time1 < air_time2.\n.output Answer", "completions": [".decl Has_air_time(Show:symbol, Air_time:symbol)\nHas_air_time(\"Monday Night Football\", \"Monday 8pm\").\nHas_air_time(\"WWE Raw\", \"Monday 9pm\").\n.decl Answer()\nAnswer() :- Has_air_time(\"Monday Night Football\", air_time1), Has_air_time(\"WWE Raw\", air_time2), air_time1 < air_time2.\n.output Answer"]}
{"id": 438, "answer": true, "completion": ".decl Requires(Group:symbol, Action:symbol)\nRequires(\"first missionaries\", \"attend mass on Sundays\").\n.decl Answer()\nAnswer() :- Requires(\"first missionaries\", action).\n.output Answer", "completions": [".decl Requires(Group:symbol, Action:symbol)\nRequires(\"first missionaries\", \"attend mass on Sundays\").\n.decl Answer()\nAnswer() :- Requires(\"first missionaries\", action).\n.output Answer"]}
{"id": 439, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Snoop Dogg\", 25).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Tickle Me Elmo\", 1996).\n.decl Answer()\nAnswer() :- Has_age(\"Snoop Dogg\", age), Happens_in_year(\"Tickle Me Elmo\", year), age >= 18, year <= 1996.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Snoop Dogg\", 25).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Tickle Me Elmo\", 1996).\n.decl Answer()\nAnswer() :- Has_age(\"Snoop Dogg\", age), Happens_in_year(\"Tickle Me Elmo\", year), age >= 18, year <= 1996.\n.output Answer"]}
{"id": 440, "answer": true, "completion": ".decl Is_considered_okay(Word:symbol, Opinion:symbol)\nIs_considered_okay(\"Gypsy\", \"not okay\").\n.decl Answer()\nAnswer() :- Is_considered_okay(\"Gypsy\", opinion), opinion = \"not okay\".\n.output Answer", "completions": [".decl Is_considered_okay(Word:symbol, Opinion:symbol)\nIs_considered_okay(\"Gypsy\", \"not okay\").\n.decl Answer()\nAnswer() :- Is_considered_okay(\"Gypsy\", opinion), opinion = \"not okay\".\n.output Answer"]}
{"id": 441, "answer": true, "completion": ".decl Has_gun(Person:symbol, Gun:symbol)\nHas_gun(\"Robert Downey Jr.\", \"Colt M1911A1\").\nHas_gun(\"Barry Burton\", \"Colt M1911A1\").\n.decl Answer()\nAnswer() :- Has_gun(\"Robert Downey Jr.\", gun), Has_gun(\"Barry Burton\", gun).\n.output Answer", "completions": [".decl Has_gun(Person:symbol, Gun:symbol)\nHas_gun(\"Robert Downey Jr.\", \"Colt M1911A1\").\nHas_gun(\"Barry Burton\", \"Colt M1911A1\").\n.decl Answer()\nAnswer() :- Has_gun(\"Robert Downey Jr.\", gun), Has_gun(\"Barry Burton\", gun).\n.output Answer"]}
{"id": 442, "answer": true, "completion": ".decl Has_percentage_of_vote(Candidate:symbol, Percentage:float)\nHas_percentage_of_vote(\"Woodrow Wilson\", 41.8).\nHas_percentage_of_vote(\"Theodore Roosevelt\", 27.4).\nHas_percentage_of_vote(\"William Howard Taft\", 23.2).\n.decl Answer()\nAnswer() :- Has_percentage_of_vote(candidate, percentage), percentage > 50.\n.output Answer", "completions": [".decl Has_percentage_of_vote(Candidate:symbol, Percentage:float)\nHas_percentage_of_vote(\"Woodrow Wilson\", 41.8).\nHas_percentage_of_vote(\"Theodore Roosevelt\", 27.4).\nHas_percentage_of_vote(\"William Howard Taft\", 23.2).\n.decl Answer()\nAnswer() :- Has_percentage_of_vote(candidate, percentage), percentage > 50.\n.output Answer"]}
{"id": 443, "answer": true, "completion": ".decl Is_ingredient(Food:symbol, Ingredient:symbol)\nIs_ingredient(\"dessert\", \"sugar\").\nIs_ingredient(\"dessert\", \"flour\").\nIs_ingredient(\"dessert\", \"butter\").\nIs_ingredient(\"dessert\", \"eggs\").\nIs_ingredient(\"dessert\", \"vegetables\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"dessert\", \"vegetables\").\n.output Answer", "completions": [".decl Is_ingredient(Food:symbol, Ingredient:symbol)\nIs_ingredient(\"dessert\", \"sugar\").\nIs_ingredient(\"dessert\", \"flour\").\nIs_ingredient(\"dessert\", \"butter\").\nIs_ingredient(\"dessert\", \"eggs\").\nIs_ingredient(\"dessert\", \"vegetables\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"dessert\", \"vegetables\").\n.output Answer"]}
{"id": 444, "answer": false, "completion": ".decl Has_mood(Person:symbol, Mood:symbol)\nHas_mood(\"depressed people\", \"depressed\").\n.decl Visits(Person:symbol, Place:symbol)\nVisits(\"depressed people\", \"Golden Gate Bridge\").\n.decl Answer()\nAnswer() :- Has_mood(\"depressed people\", \"depressed\"), Visits(\"depressed people\", \"Golden Gate Bridge\").\n.output Answer", "completions": [".decl Has_mood(Person:symbol, Mood:symbol)\nHas_mood(\"depressed people\", \"depressed\").\n.decl Visits(Person:symbol, Place:symbol)\nVisits(\"depressed people\", \"Golden Gate Bridge\").\n.decl Answer()\nAnswer() :- Has_mood(\"depressed people\", \"depressed\"), Visits(\"depressed people\", \"Golden Gate Bridge\").\n.output Answer"]}
{"id": 445, "answer": false, "completion": ".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"ancient doors\", \"rectangle\").\nHas_shape(\"letter D\", \"triangle\").\n.decl Answer()\nAnswer() :- Has_shape(\"ancient doors\", shape1), Has_shape(\"letter D\", shape2), shape1 != shape2.\n.output Answer", "completions": [".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"ancient doors\", \"rectangle\").\nHas_shape(\"letter D\", \"triangle\").\n.decl Answer()\nAnswer() :- Has_shape(\"ancient doors\", shape1), Has_shape(\"letter D\", shape2), shape1 != shape2.\n.output Answer"]}
{"id": 446, "answer": true, "completion": ".decl Lives_for_n_years(Person:symbol, N_years:float)\nLives_for_n_years(\"Methuselah\", 969).\nLives_for_n_years(\"Sarah\", 169).\n.decl Answer()\nAnswer() :- Lives_for_n_years(\"Methuselah\", n_years1), Lives_for_n_years(\"Sarah\", n_years2), n_years1 >= 800 * n_years2.\n.output Answer", "completions": [".decl Lives_for_n_years(Person:symbol, N_years:float)\nLives_for_n_years(\"Methuselah\", 969).\nLives_for_n_years(\"Sarah\", 169).\n.decl Answer()\nAnswer() :- Lives_for_n_years(\"Methuselah\", n_years1), Lives_for_n_years(\"Sarah\", n_years2), n_years1 >= 800 * n_years2.\n.output Answer"]}
{"id": 447, "answer": true, "completion": ".decl Supports(Object:symbol, Weight:float)\nSupports(\"triples tandem bike\", 300).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Apollo 15 crew\", 600).\n.decl Answer()\nAnswer() :- Supports(\"triples tandem bike\", weight1), Has_weight(\"Apollo 15 crew\", weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Supports(Object:symbol, Weight:float)\nSupports(\"triples tandem bike\", 300).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Apollo 15 crew\", 600).\n.decl Answer()\nAnswer() :- Supports(\"triples tandem bike\", weight1), Has_weight(\"Apollo 15 crew\", weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 448, "answer": true, "completion": ".decl Responds_to(Animal:symbol, Stimulus:symbol)\nResponds_to(\"dog\", \"bell\").\nResponds_to(\"grey seal\", \"bell\").\n.decl Answer()\nAnswer() :- Responds_to(\"dog\", stimulus), Responds_to(\"grey seal\", stimulus).\n.output Answer", "completions": [".decl Responds_to(Animal:symbol, Stimulus:symbol)\nResponds_to(\"dog\", \"bell\").\nResponds_to(\"grey seal\", \"bell\").\n.decl Answer()\nAnswer() :- Responds_to(\"dog\", stimulus), Responds_to(\"grey seal\", stimulus).\n.output Answer"]}
{"id": 449, "answer": true, "completion": ".decl Related(Animal_A:symbol, Animal_B:symbol)\nRelated(\"sables\", \"wolverines\").\n.decl Answer()\nAnswer() :- Related(\"sables\", \"wolverines\").\n.output Answer", "completions": [".decl Related(Animal_A:symbol, Animal_B:symbol)\nRelated(\"sables\", \"wolverines\").\n.decl Answer()\nAnswer() :- Related(\"sables\", \"wolverines\").\n.output Answer"]}
{"id": 450, "answer": false, "completion": ".decl Lives_in_environment(Animal:symbol, Environment:symbol)\nLives_in_environment(\"lobster\", \"ocean\").\n.decl Answer()\nAnswer() :- !Lives_in_environment(\"lobster\", \"desert\").\n.output Answer", "completions": [".decl Lives_in_environment(Animal:symbol, Environment:symbol)\nLives_in_environment(\"lobster\", \"ocean\").\n.decl Answer()\nAnswer() :- !Lives_in_environment(\"lobster\", \"desert\").\n.output Answer"]}
{"id": 451, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Nicole Kidman\", 1.8).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Nicole Kidman\", 58).\n.decl Ideal_height_weight(Character:symbol, Ideal_height:float, Ideal_weight:float)\nIdeal_height_weight(\"Psylocke\", 1.7, 55).\n.decl Answer()\nAnswer() :- Has_height(\"Nicole Kidman\", height1), Has_weight(\"Nicole Kidman\", weight1), Ideal_height_weight(\"Psylocke\", height2, weight2), height1 >= height2, weight1 <= weight2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Nicole Kidman\", 1.8).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Nicole Kidman\", 58).\n.decl Ideal_height_weight(Character:symbol, Ideal_height:float, Ideal_weight:float)\nIdeal_height_weight(\"Psylocke\", 1.7, 55).\n.decl Answer()\nAnswer() :- Has_height(\"Nicole Kidman\", height1), Has_weight(\"Nicole Kidman\", weight1), Ideal_height_weight(\"Psylocke\", height2, weight2), height1 >= height2, weight1 <= weight2.\n.output Answer"]}
{"id": 452, "answer": true, "completion": ".decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"bodybuilder\", \"working out\").\n.decl Answer()\nAnswer() :- Enjoys(\"bodybuilder\", activity), activity != \"wearing a cast for several weeks\".\n.output Answer", "completions": [".decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"bodybuilder\", \"working out\").\n.decl Answer()\nAnswer() :- Enjoys(\"bodybuilder\", activity), activity != \"wearing a cast for several weeks\".\n.output Answer"]}
{"id": 453, "answer": true, "completion": ".decl Drives(Person:symbol, Vehicle:symbol)\nDrives(\"George Washington\", \"horse\").\n.decl Answer()\nAnswer() :- !Drives(\"George Washington\", \"Lexus\").\n.output Answer", "completions": [".decl Drives(Person:symbol, Vehicle:symbol)\nDrives(\"George Washington\", \"horse\").\n.decl Answer()\nAnswer() :- !Drives(\"George Washington\", \"Lexus\").\n.output Answer"]}
{"id": 454, "answer": true, "completion": ".decl Has_feature(Software:symbol, Feature:symbol)\nHas_feature(\"Adobe Suite\", \"graphic design\").\nHas_feature(\"Adobe Suite\", \"photo editing\").\nHas_feature(\"Adobe Suite\", \"video editing\").\n.decl Answer()\nAnswer() :- !Has_feature(\"Adobe Suite\", \"video game engine coding\").\n.output Answer", "completions": [".decl Has_feature(Software:symbol, Feature:symbol)\nHas_feature(\"Adobe Suite\", \"graphic design\").\nHas_feature(\"Adobe Suite\", \"photo editing\").\nHas_feature(\"Adobe Suite\", \"video editing\").\n.decl Answer()\nAnswer() :- !Has_feature(\"Adobe Suite\", \"video game engine coding\").\n.output Answer"]}
{"id": 455, "answer": true, "completion": ".decl Has_composition(Object:symbol, Composition:symbol)\nHas_composition(\"1943-S penny\", \"copper\").\nHas_composition(\"silverware\", \"silver\").\n.decl Answer()\nAnswer() :- Has_composition(\"1943-S penny\", composition1), Has_composition(\"silverware\", composition2), composition1 != composition2.\n.output Answer", "completions": [".decl Has_composition(Object:symbol, Composition:symbol)\nHas_composition(\"1943-S penny\", \"copper\").\nHas_composition(\"silverware\", \"silver\").\n.decl Answer()\nAnswer() :- Has_composition(\"1943-S penny\", composition1), Has_composition(\"silverware\", composition2), composition1 != composition2.\n.output Answer"]}
{"id": 456, "answer": true, "completion": ".decl Has_association(Person_A:symbol, Person_B:symbol)\nHas_association(\"Lord Voldemort\", \"Igor Karkaroff\").\n.decl Is_staff_member(Person:symbol, School:symbol)\nIs_staff_member(\"Igor Karkaroff\", \"Durmstrang\").\n.decl Answer()\nAnswer() :- Has_association(\"Lord Voldemort\", person), Is_staff_member(person, \"Durmstrang\").\n.output Answer", "completions": [".decl Has_association(Person_A:symbol, Person_B:symbol)\nHas_association(\"Lord Voldemort\", \"Igor Karkaroff\").\n.decl Is_staff_member(Person:symbol, School:symbol)\nIs_staff_member(\"Igor Karkaroff\", \"Durmstrang\").\n.decl Answer()\nAnswer() :- Has_association(\"Lord Voldemort\", person), Is_staff_member(person, \"Durmstrang\").\n.output Answer"]}
{"id": 457, "answer": true, "completion": ".decl Requires_degree(Job:symbol, Degree:symbol)\nRequires_degree(\"bartender\", \"none\").\n.decl Answer()\nAnswer() :- Requires_degree(\"bartender\", \"none\").\n.output Answer", "completions": [".decl Requires_degree(Job:symbol, Degree:symbol)\nRequires_degree(\"bartender\", \"none\").\n.decl Answer()\nAnswer() :- Requires_degree(\"bartender\", \"none\").\n.output Answer"]}
{"id": 458, "answer": false, "completion": ".decl Has_ingredient(Dish:symbol, Ingredient:symbol)\nHas_ingredient(\"holy trinity\", \"onion\").\nHas_ingredient(\"holy trinity\", \"carrot\").\nHas_ingredient(\"holy trinity\", \"celery\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"holy trinity\", ingredient1), Has_ingredient(\"holy trinity\", ingredient2), Has_ingredient(\"holy trinity\", ingredient3), ingredient1 != \"celery\", ingredient2 != \"celery\", ingredient3 != \"celery\".\n.output Answer", "completions": [".decl Has_ingredient(Dish:symbol, Ingredient:symbol)\nHas_ingredient(\"holy trinity\", \"onion\").\nHas_ingredient(\"holy trinity\", \"carrot\").\nHas_ingredient(\"holy trinity\", \"celery\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"holy trinity\", ingredient1), Has_ingredient(\"holy trinity\", ingredient2), Has_ingredient(\"holy trinity\", ingredient3), ingredient1 != \"celery\", ingredient2 != \"celery\", ingredient3 != \"celery\".\n.output Answer"]}
{"id": 459, "answer": true, "completion": ".decl Has_n_cells(Organism:symbol, Cell_type:symbol, N_cells:float)\nHas_n_cells(\"human\", \"white blood cells\", 7000000).\nHas_n_cells(\"human\", \"red blood cells\", 4000000).\n.decl Answer()\nAnswer() :- Has_n_cells(\"human\", \"white blood cells\", n_cells1), Has_n_cells(\"human\", \"red blood cells\", n_cells2), n_cells1 > n_cells2.\n.output Answer", "completions": [".decl Has_n_cells(Organism:symbol, Cell_type:symbol, N_cells:float)\nHas_n_cells(\"human\", \"white blood cells\", 7000000).\nHas_n_cells(\"human\", \"red blood cells\", 4000000).\n.decl Answer()\nAnswer() :- Has_n_cells(\"human\", \"white blood cells\", n_cells1), Has_n_cells(\"human\", \"red blood cells\", n_cells2), n_cells1 > n_cells2.\n.output Answer"]}
{"id": 460, "answer": false, "completion": ".decl Distance(City_A:symbol, City_B:symbol, Distance:float)\nDistance(\"New York\", \"Miami\", 1550).\n.decl Answer()\nAnswer() :- Distance(\"New York\", \"Miami\", distance), distance > 0.\n.output Answer", "completions": [".decl Distance(City_A:symbol, City_B:symbol, Distance:float)\nDistance(\"New York\", \"Miami\", 1550).\n.decl Answer()\nAnswer() :- Distance(\"New York\", \"Miami\", distance), distance > 0.\n.output Answer"]}
{"id": 461, "answer": true, "completion": ".decl Has_power(Wizard:symbol, Power:float)\nHas_power(\"Gandalf\", 10).\nHas_power(\"Rincewind\", 5).\n.decl Answer()\nAnswer() :- Has_power(\"Gandalf\", power1), Has_power(\"Rincewind\", power2), power1 > power2.\n.output Answer", "completions": [".decl Has_power(Wizard:symbol, Power:float)\nHas_power(\"Gandalf\", 10).\nHas_power(\"Rincewind\", 5).\n.decl Answer()\nAnswer() :- Has_power(\"Gandalf\", power1), Has_power(\"Rincewind\", power2), power1 > power2.\n.output Answer"]}
{"id": 462, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Osama bin Laden\", 1.7).\n.decl Has_ceiling_height(House:symbol, Ceiling_height:float)\nHas_ceiling_height(\"Tiny House\", 2.4).\n.decl Answer()\nAnswer() :- Has_height(\"Osama bin Laden\", height1), Has_ceiling_height(\"Tiny House\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Osama bin Laden\", 1.7).\n.decl Has_ceiling_height(House:symbol, Ceiling_height:float)\nHas_ceiling_height(\"Tiny House\", 2.4).\n.decl Answer()\nAnswer() :- Has_height(\"Osama bin Laden\", height1), Has_ceiling_height(\"Tiny House\", height2), height1 < height2.\n.output Answer"]}
{"id": 463, "answer": true, "completion": ".decl Wins(Country:symbol, Medal:symbol, Year:float)\nWins(\"England\", \"gold\", 1908).\n.decl Answer()\nAnswer() :- Wins(\"England\", \"gold\", year), year != 1800.\n.output Answer", "completions": [".decl Wins(Country:symbol, Medal:symbol, Year:float)\nWins(\"England\", \"gold\", 1908).\n.decl Answer()\nAnswer() :- Wins(\"England\", \"gold\", year), year != 1800.\n.output Answer"]}
{"id": 464, "answer": true, "completion": ".decl Is_urban_legend(Story:symbol)\nIs_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill story\").\n.decl Answer()\nAnswer() :- Is_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill story\").\n.output Answer", "completions": [".decl Is_urban_legend(Story:symbol)\nIs_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill story\").\n.decl Answer()\nAnswer() :- Is_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill story\").\n.output Answer"]}
{"id": 465, "answer": false, "completion": ".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Jimmy Vee\", \"cerebral palsy\").\n.decl Eligible_for_Paralympic_Games(Disability:symbol)\nEligible_for_Paralympic_Games(\"cerebral palsy\").\n.decl Answer()\nAnswer() :- Has_disability(\"Jimmy Vee\", disability), Eligible_for_Paralympic_Games(disability).\n.output Answer", "completions": [".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Jimmy Vee\", \"cerebral palsy\").\n.decl Eligible_for_Paralympic_Games(Disability:symbol)\nEligible_for_Paralympic_Games(\"cerebral palsy\").\n.decl Answer()\nAnswer() :- Has_disability(\"Jimmy Vee\", disability), Eligible_for_Paralympic_Games(disability).\n.output Answer"]}
{"id": 466, "answer": true, "completion": ".decl Is_eligible_to_vote(Person:symbol, Election:symbol)\nIs_eligible_to_vote(\"Elijah Cummings\", \"2020 presidential election\").\n.decl Answer()\nAnswer() :- Is_eligible_to_vote(\"Elijah Cummings\", \"2020 presidential election\").\n.output Answer", "completions": [".decl Is_eligible_to_vote(Person:symbol, Election:symbol)\nIs_eligible_to_vote(\"Elijah Cummings\", \"2020 presidential election\").\n.decl Answer()\nAnswer() :- Is_eligible_to_vote(\"Elijah Cummings\", \"2020 presidential election\").\n.output Answer"]}
{"id": 467, "answer": true, "completion": ".decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Hermione Granger\", \"British\").\n.decl Eligible_for_order(Citizenship:symbol)\nEligible_for_order(\"British\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Hermione Granger\", citizenship), Eligible_for_order(citizenship).\n.output Answer", "completions": [".decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Hermione Granger\", \"British\").\n.decl Eligible_for_order(Citizenship:symbol)\nEligible_for_order(\"British\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Hermione Granger\", citizenship), Eligible_for_order(citizenship).\n.output Answer"]}
{"id": 468, "answer": true, "completion": ".decl Is_safe_to_cook_in(Type_of_pottery:symbol, Safe:symbol)\nIs_safe_to_cook_in(\"clay pottery\", \"yes\").\nIs_safe_to_cook_in(\"ceramic pottery\", \"yes\").\nIs_safe_to_cook_in(\"glass pottery\", \"no\").\n.decl Answer()\nAnswer() :- Is_safe_to_cook_in(type_of_pottery, \"yes\").\n.output Answer", "completions": [".decl Is_safe_to_cook_in(Type_of_pottery:symbol, Safe:symbol)\nIs_safe_to_cook_in(\"clay pottery\", \"yes\").\nIs_safe_to_cook_in(\"ceramic pottery\", \"yes\").\nIs_safe_to_cook_in(\"glass pottery\", \"no\").\n.decl Answer()\nAnswer() :- Is_safe_to_cook_in(type_of_pottery, \"yes\").\n.output Answer"]}
{"id": 469, "answer": true, "completion": ".decl Has_origin_country(Person:symbol, Country:symbol)\nHas_origin_country(\"Pope Alexander VI\", \"Spain\").\n.decl Has_n_popes(Country:symbol, N_popes:float)\nHas_n_popes(\"Spain\", 1).\nHas_n_popes(\"Italy\", 266).\n.decl Answer()\nAnswer() :- Has_origin_country(\"Pope Alexander VI\", country), Has_n_popes(country, n_popes1), Has_n_popes(other_country, n_popes2), n_popes1 < n_popes2.\n.output Answer", "completions": [".decl Has_origin_country(Person:symbol, Country:symbol)\nHas_origin_country(\"Pope Alexander VI\", \"Spain\").\n.decl Has_n_popes(Country:symbol, N_popes:float)\nHas_n_popes(\"Spain\", 1).\nHas_n_popes(\"Italy\", 266).\n.decl Answer()\nAnswer() :- Has_origin_country(\"Pope Alexander VI\", country), Has_n_popes(country, n_popes1), Has_n_popes(other_country, n_popes2), n_popes1 < n_popes2.\n.output Answer"]}
{"id": 470, "answer": true, "completion": ".decl Is_mistaken_for(Condition_A:symbol, Condition_B:symbol)\nIs_mistaken_for(\"depression\", \"laziness\").\n.decl Answer()\nAnswer() :- Is_mistaken_for(\"depression\", \"laziness\").\n.output Answer", "completions": [".decl Is_mistaken_for(Condition_A:symbol, Condition_B:symbol)\nIs_mistaken_for(\"depression\", \"laziness\").\n.decl Answer()\nAnswer() :- Is_mistaken_for(\"depression\", \"laziness\").\n.output Answer"]}
{"id": 471, "answer": true, "completion": ".decl Has_danger_level(Animal:symbol, Danger_level:float)\nHas_danger_level(\"Oculudentavis\", 10).\nHas_danger_level(\"Allosaurus\", 8).\n.decl Answer()\nAnswer() :- Has_danger_level(\"Oculudentavis\", danger_level1), Has_danger_level(\"Allosaurus\", danger_level2), danger_level1 > danger_level2.\n.output Answer", "completions": [".decl Has_danger_level(Animal:symbol, Danger_level:float)\nHas_danger_level(\"Oculudentavis\", 10).\nHas_danger_level(\"Allosaurus\", 8).\n.decl Answer()\nAnswer() :- Has_danger_level(\"Oculudentavis\", danger_level1), Has_danger_level(\"Allosaurus\", danger_level2), danger_level1 > danger_level2.\n.output Answer"]}
{"id": 472, "answer": false, "completion": ".decl Has_pants(Person:symbol, Size:float)\nHas_pants(\"Christopher Nolan\", 32).\nHas_pants(\"Danny Devito\", 34).\n.decl Answer()\nAnswer() :- Has_pants(\"Christopher Nolan\", size1), Has_pants(\"Danny Devito\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_pants(Person:symbol, Size:float)\nHas_pants(\"Christopher Nolan\", 32).\nHas_pants(\"Danny Devito\", 34).\n.decl Answer()\nAnswer() :- Has_pants(\"Christopher Nolan\", size1), Has_pants(\"Danny Devito\", size2), size1 <= size2.\n.output Answer"]}
{"id": 473, "answer": false, "completion": ".decl Has_schedule(Object:symbol, Schedule:symbol)\nHas_schedule(\"Big Ben's bells\", \"normal\").\n.decl Is_at(Object:symbol, Place:symbol)\nIs_at(\"Big Ben's bells\", \"Palace of Westminster\").\n.decl Answer()\nAnswer() :- Has_schedule(\"Big Ben's bells\", \"normal\"), Is_at(\"Big Ben's bells\", \"Palace of Westminster\").\n.output Answer", "completions": [".decl Has_schedule(Object:symbol, Schedule:symbol)\nHas_schedule(\"Big Ben's bells\", \"normal\").\n.decl Is_at(Object:symbol, Place:symbol)\nIs_at(\"Big Ben's bells\", \"Palace of Westminster\").\n.decl Answer()\nAnswer() :- Has_schedule(\"Big Ben's bells\", \"normal\"), Is_at(\"Big Ben's bells\", \"Palace of Westminster\").\n.output Answer"]}
{"id": 474, "answer": true, "completion": ".decl Appears_in(Character:symbol, Movie:symbol)\nAppears_in(\"Klingons\", \"Star Trek\").\n.decl Answer()\nAnswer() :- !Appears_in(\"Klingons\", \"The Last Jedi\").\n.output Answer", "completions": [".decl Appears_in(Character:symbol, Movie:symbol)\nAppears_in(\"Klingons\", \"Star Trek\").\n.decl Answer()\nAnswer() :- !Appears_in(\"Klingons\", \"The Last Jedi\").\n.output Answer"]}
{"id": 475, "answer": true, "completion": ".decl Buried_in(Person:symbol, Place:symbol)\nBuried_in(\"Queen Elizabeth\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- !Buried_in(\"Queen Elizabeth\", \"Pantheon\").\n.output Answer", "completions": [".decl Buried_in(Person:symbol, Place:symbol)\nBuried_in(\"Queen Elizabeth\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- !Buried_in(\"Queen Elizabeth\", \"Pantheon\").\n.output Answer"]}
{"id": 476, "answer": false, "completion": ".decl Is_in_region(City:symbol, Region:symbol)\nIs_in_region(\"Olympia\", \"Ish river country\").\n.decl Answer()\nAnswer() :- Is_in_region(\"Olympia\", \"Ish river country\").\n.output Answer", "completions": [".decl Is_in_region(City:symbol, Region:symbol)\nIs_in_region(\"Olympia\", \"Ish river country\").\n.decl Answer()\nAnswer() :- Is_in_region(\"Olympia\", \"Ish river country\").\n.output Answer"]}
{"id": 477, "answer": true, "completion": ".decl Makes_difficult(Object:symbol, Activity:symbol)\nMakes_difficult(\"silicone suits\", \"judo\").\n.decl Answer()\nAnswer() :- Makes_difficult(\"silicone suits\", \"judo\").\n.output Answer", "completions": [".decl Makes_difficult(Object:symbol, Activity:symbol)\nMakes_difficult(\"silicone suits\", \"judo\").\n.decl Answer()\nAnswer() :- Makes_difficult(\"silicone suits\", \"judo\").\n.output Answer"]}
{"id": 478, "answer": true, "completion": ".decl Describes(Subject:symbol, Description:symbol)\nDescribes(\"boolean algebra\", \"binary\").\n.decl Answer()\nAnswer() :- Describes(\"boolean algebra\", \"binary\").\n.output Answer", "completions": [".decl Describes(Subject:symbol, Description:symbol)\nDescribes(\"boolean algebra\", \"binary\").\n.decl Answer()\nAnswer() :- Describes(\"boolean algebra\", \"binary\").\n.output Answer"]}
{"id": 479, "answer": false, "completion": ".decl Is_safe_pet(Animal:symbol, Age:float)\nIs_safe_pet(\"Northern fur seal\", 12).\n.decl Answer()\nAnswer() :- Is_safe_pet(\"Northern fur seal\", age), age > 6.\n.output Answer", "completions": [".decl Is_safe_pet(Animal:symbol, Age:float)\nIs_safe_pet(\"Northern fur seal\", 12).\n.decl Answer()\nAnswer() :- Is_safe_pet(\"Northern fur seal\", age), age > 6.\n.output Answer"]}
{"id": 480, "answer": false, "completion": ".decl Benefited_from(Person:symbol, Project:symbol)\n.decl Answer()\nAnswer() :- !Benefited_from(\"Kurt Cobain\", \"Project Semicolon\").\n.output Answer", "completions": [".decl Benefited_from(Person:symbol, Project:symbol)\n.decl Answer()\nAnswer() :- !Benefited_from(\"Kurt Cobain\", \"Project Semicolon\").\n.output Answer"]}
{"id": 481, "answer": true, "completion": ".decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"anxious person\", \"anxiety\").\n.decl Has_gift(Person:symbol, Gift:symbol)\nHas_gift(\"Wizard of Oz\", \"courage\").\n.decl Answer()\nAnswer() :- Has_emotion(\"anxious person\", emotion), Has_gift(\"Wizard of Oz\", gift), emotion != \"courage\", gift = \"courage\".\n.output Answer", "completions": [".decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"anxious person\", \"anxiety\").\n.decl Has_gift(Person:symbol, Gift:symbol)\nHas_gift(\"Wizard of Oz\", \"courage\").\n.decl Answer()\nAnswer() :- Has_emotion(\"anxious person\", emotion), Has_gift(\"Wizard of Oz\", gift), emotion != \"courage\", gift = \"courage\".\n.output Answer"]}
{"id": 482, "answer": true, "completion": ".decl Protects_against(Firewall:symbol, Short_circuit:symbol)\nProtects_against(\"firewall\", \"short circuit\").\n.decl Answer()\nAnswer() :- Protects_against(\"firewall\", \"short circuit\").\n.output Answer", "completions": [".decl Protects_against(Firewall:symbol, Short_circuit:symbol)\nProtects_against(\"firewall\", \"short circuit\").\n.decl Answer()\nAnswer() :- Protects_against(\"firewall\", \"short circuit\").\n.output Answer"]}
{"id": 483, "answer": true, "completion": ".decl Has_qualifications(Person:symbol, Qualification:symbol)\nHas_qualifications(\"Michael J Fox\", \"high school diploma\").\n.decl Qualifies_for(Qualification:symbol, Group:symbol)\nQualifies_for(\"high school diploma\", \"Army Rangers\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Michael J Fox\", qualification), Qualifies_for(qualification, \"Army Rangers\").\n.output Answer", "completions": [".decl Has_qualifications(Person:symbol, Qualification:symbol)\nHas_qualifications(\"Michael J Fox\", \"high school diploma\").\n.decl Qualifies_for(Qualification:symbol, Group:symbol)\nQualifies_for(\"high school diploma\", \"Army Rangers\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Michael J Fox\", qualification), Qualifies_for(qualification, \"Army Rangers\").\n.output Answer"]}
{"id": 484, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"The Jackson 5\", 5).\nHas_n_members(\"The Isley Brothers\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"The Jackson 5\", n_members1), Has_n_members(\"The Isley Brothers\", n_members2), n_members1 > n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"The Jackson 5\", 5).\nHas_n_members(\"The Isley Brothers\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"The Jackson 5\", n_members1), Has_n_members(\"The Isley Brothers\", n_members2), n_members1 > n_members2.\n.output Answer"]}
{"id": 485, "answer": true, "completion": ".decl Is_guru(Person:symbol)\nIs_guru(\"Deepak Chopra\").\n.decl Answer()\nAnswer() :- !Is_guru(\"Kim Kardashian\").\n.output Answer", "completions": [".decl Is_guru(Person:symbol)\nIs_guru(\"Deepak Chopra\").\n.decl Answer()\nAnswer() :- !Is_guru(\"Kim Kardashian\").\n.output Answer"]}
{"id": 486, "answer": false, "completion": ".decl Wins(Show:symbol, Award:symbol)\nWins(\"Modern Family\", \"Emmy Award\").\nWins(\"Modern Family\", \"Golden Globe Award\").\n.decl Answer()\nAnswer() :- Wins(\"Modern Family\", \"Slammy Award\").\n.output Answer", "completions": [".decl Wins(Show:symbol, Award:symbol)\nWins(\"Modern Family\", \"Emmy Award\").\nWins(\"Modern Family\", \"Golden Globe Award\").\n.decl Answer()\nAnswer() :- Wins(\"Modern Family\", \"Slammy Award\").\n.output Answer"]}
{"id": 487, "answer": true, "completion": ".decl Has_n_ex_wives(Person:symbol, N_ex_wives:float)\nHas_n_ex_wives(\"Larry King\", 8).\n.decl Needs_n_players(Sport:symbol, N_players:float)\nNeeds_n_players(\"water polo\", 7).\n.decl Answer()\nAnswer() :- Has_n_ex_wives(\"Larry King\", n_ex_wives), Needs_n_players(\"water polo\", n_players), n_ex_wives >= n_players.\n.output Answer", "completions": [".decl Has_n_ex_wives(Person:symbol, N_ex_wives:float)\nHas_n_ex_wives(\"Larry King\", 8).\n.decl Needs_n_players(Sport:symbol, N_players:float)\nNeeds_n_players(\"water polo\", 7).\n.decl Answer()\nAnswer() :- Has_n_ex_wives(\"Larry King\", n_ex_wives), Needs_n_players(\"water polo\", n_players), n_ex_wives >= n_players.\n.output Answer"]}
{"id": 488, "answer": true, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Jason\", \"athletic\").\nHas_trait(\"Dr. Disrespect\", \"athletic\").\n.decl Answer()\nAnswer() :- Has_trait(\"Jason\", trait), Has_trait(\"Dr. Disrespect\", trait).\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Jason\", \"athletic\").\nHas_trait(\"Dr. Disrespect\", \"athletic\").\n.decl Answer()\nAnswer() :- Has_trait(\"Jason\", trait), Has_trait(\"Dr. Disrespect\", trait).\n.output Answer"]}
{"id": 489, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Iowa\", 145000).\nHas_size(\"English Channel\", 350000).\n.decl Answer()\nAnswer() :- Has_size(\"Iowa\", size1), Has_size(\"English Channel\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Iowa\", 145000).\nHas_size(\"English Channel\", 350000).\n.decl Answer()\nAnswer() :- Has_size(\"Iowa\", size1), Has_size(\"English Channel\", size2), size1 < size2.\n.output Answer"]}
{"id": 490, "answer": true, "completion": ".decl Practices(Person:symbol, Practice:symbol)\nPractices(\"Kublai Khan\", \"monogamy\").\nPractices(\"Genghis Khan\", \"monogamy\").\n.decl Answer()\nAnswer() :- Practices(\"Kublai Khan\", \"monogamy\").\nAnswer() :- Practices(\"Genghis Khan\", \"monogamy\").\n.output Answer", "completions": [".decl Practices(Person:symbol, Practice:symbol)\nPractices(\"Kublai Khan\", \"monogamy\").\nPractices(\"Genghis Khan\", \"monogamy\").\n.decl Answer()\nAnswer() :- Practices(\"Kublai Khan\", \"monogamy\").\nAnswer() :- Practices(\"Genghis Khan\", \"monogamy\").\n.output Answer"]}
{"id": 491, "answer": true, "completion": ".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"John\", \"leukophobia\").\n.decl Has_symbol(Flag:symbol, Symbol:symbol)\nHas_symbol(\"Flag of the United States\", \"white stars\").\n.decl Answer()\nAnswer() :- Has_phobia(\"John\", \"leukophobia\"), !Has_symbol(\"Flag of the United States\", \"white stars\").\n.output Answer", "completions": [".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"John\", \"leukophobia\").\n.decl Has_symbol(Flag:symbol, Symbol:symbol)\nHas_symbol(\"Flag of the United States\", \"white stars\").\n.decl Answer()\nAnswer() :- Has_phobia(\"John\", \"leukophobia\"), !Has_symbol(\"Flag of the United States\", \"white stars\").\n.output Answer"]}
{"id": 492, "answer": true, "completion": ".decl Murders(Villain:symbol, Victim:symbol)\nMurders(\"Doomsday\", \"Superman\").\nMurders(\"Joker\", \"Robin\").\n.decl Answer()\nAnswer() :- Murders(\"Doomsday\", \"Superman\"), Murders(\"Doomsday\", \"Robin\").\n.output Answer", "completions": [".decl Murders(Villain:symbol, Victim:symbol)\nMurders(\"Doomsday\", \"Superman\").\nMurders(\"Joker\", \"Robin\").\n.decl Answer()\nAnswer() :- Murders(\"Doomsday\", \"Superman\"), Murders(\"Doomsday\", \"Robin\").\n.output Answer"]}
{"id": 493, "answer": false, "completion": ".decl Looks_like(Object_A:symbol, Object_B:symbol)\n.decl Answer()\nAnswer() :- !Looks_like(\"sweet potato\", \"pineapple\").\n.output Answer", "completions": [".decl Looks_like(Object_A:symbol, Object_B:symbol)\n.decl Answer()\nAnswer() :- !Looks_like(\"sweet potato\", \"pineapple\").\n.output Answer"]}
{"id": 494, "answer": true, "completion": ".decl Has_dental_insurance(Person:symbol, Insurance:symbol)\nHas_dental_insurance(\"John\", \"No\").\n.decl Is_unwise(Action:symbol, Person:symbol)\nIs_unwise(\"overfeeding Lactobacillus\", \"John\").\n.decl Answer()\nAnswer() :- Has_dental_insurance(person, \"No\"), Is_unwise(\"overfeeding Lactobacillus\", person).\n.output Answer", "completions": [".decl Has_dental_insurance(Person:symbol, Insurance:symbol)\nHas_dental_insurance(\"John\", \"No\").\n.decl Is_unwise(Action:symbol, Person:symbol)\nIs_unwise(\"overfeeding Lactobacillus\", \"John\").\n.decl Answer()\nAnswer() :- Has_dental_insurance(person, \"No\"), Is_unwise(\"overfeeding Lactobacillus\", person).\n.output Answer"]}
{"id": 495, "answer": false, "completion": ".decl Has_latitude(Place:symbol, Latitude:float)\nHas_latitude(\"Bucharest\", 44.4).\nHas_latitude(\"Egypt\", 27.1).\n.decl Answer()\nAnswer() :- Has_latitude(\"Bucharest\", latitude1), Has_latitude(\"Egypt\", latitude2), latitude1 > latitude2.\n.output Answer", "completions": [".decl Has_latitude(Place:symbol, Latitude:float)\nHas_latitude(\"Bucharest\", 44.4).\nHas_latitude(\"Egypt\", 27.1).\n.decl Answer()\nAnswer() :- Has_latitude(\"Bucharest\", latitude1), Has_latitude(\"Egypt\", latitude2), latitude1 > latitude2.\n.output Answer"]}
{"id": 496, "answer": true, "completion": ".decl Benefits_from(Person:symbol, Food:symbol)\nBenefits_from(\"Cardi B.\", \"soy milk\").\n.decl Answer()\nAnswer() :- Benefits_from(\"Cardi B.\", \"soy milk\").\n.output Answer", "completions": [".decl Benefits_from(Person:symbol, Food:symbol)\nBenefits_from(\"Cardi B.\", \"soy milk\").\n.decl Answer()\nAnswer() :- Benefits_from(\"Cardi B.\", \"soy milk\").\n.output Answer"]}
{"id": 497, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Arvanite Greek\", \"Greek\").\nSpeaks(\"Arvanite Greek\", \"Albanian\").\n.decl Written_in(Document:symbol, Language:symbol)\nWritten_in(\"Albanian Declaration of Independence\", \"Albanian\").\n.decl Answer()\nAnswer() :- Speaks(person, language), Written_in(\"Albanian Declaration of Independence\", language).\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Arvanite Greek\", \"Greek\").\nSpeaks(\"Arvanite Greek\", \"Albanian\").\n.decl Written_in(Document:symbol, Language:symbol)\nWritten_in(\"Albanian Declaration of Independence\", \"Albanian\").\n.decl Answer()\nAnswer() :- Speaks(person, language), Written_in(\"Albanian Declaration of Independence\", language).\n.output Answer"]}
{"id": 498, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"breakdancing\", \"1980s\").\nHappens_in_time(\"WW2\", \"1939-1945\").\n.decl Answer()\nAnswer() :- !Happens_in_time(\"breakdancing\", time), Happens_in_time(\"WW2\", time).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"breakdancing\", \"1980s\").\nHappens_in_time(\"WW2\", \"1939-1945\").\n.decl Answer()\nAnswer() :- !Happens_in_time(\"breakdancing\", time), Happens_in_time(\"WW2\", time).\n.output Answer"]}
{"id": 499, "answer": false, "completion": ".decl Teaches(Teacher:symbol, Title:symbol)\nTeaches(\"high school teacher\", \"Romeo and Juliet\").\n.decl Is_unusual(Title:symbol)\nIs_unusual(\"Romeo and Juliet\").\n.decl Answer()\nAnswer() :- Teaches(\"high school teacher\", title), Is_unusual(title).\n.output Answer", "completions": [".decl Teaches(Teacher:symbol, Title:symbol)\nTeaches(\"high school teacher\", \"Romeo and Juliet\").\n.decl Is_unusual(Title:symbol)\nIs_unusual(\"Romeo and Juliet\").\n.decl Answer()\nAnswer() :- Teaches(\"high school teacher\", title), Is_unusual(title).\n.output Answer"]}
{"id": 500, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"chair\", 10).\nHas_mass(\"Voyager 2\", 890).\n.decl Answer()\nAnswer() :- Has_mass(\"chair\", mass1), Has_mass(\"Voyager 2\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"chair\", 10).\nHas_mass(\"Voyager 2\", 890).\n.decl Answer()\nAnswer() :- Has_mass(\"chair\", mass1), Has_mass(\"Voyager 2\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 501, "answer": false, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"Earth Day\", \"spring\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"Earth Day\", \"summer\"), !Happens_in_season(\"Earth Day\", \"spring\").\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"Earth Day\", \"spring\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"Earth Day\", \"summer\"), !Happens_in_season(\"Earth Day\", \"spring\").\n.output Answer"]}
{"id": 502, "answer": true, "completion": ".decl Answer()\nAnswer() :- !(\"true\").\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !(\"true\").\n.output Answer"]}
{"id": 503, "answer": true, "completion": ".decl Can_sting(Animal:symbol, Target:symbol)\nCan_sting(\"honey bee\", \"human\").\n.decl Answer()\nAnswer() :- Can_sting(\"honey bee\", \"human\").\n.output Answer", "completions": [".decl Can_sting(Animal:symbol, Target:symbol)\nCan_sting(\"honey bee\", \"human\").\n.decl Answer()\nAnswer() :- Can_sting(\"honey bee\", \"human\").\n.output Answer"]}
{"id": 504, "answer": false, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"The Powerpuff Girls\", \"Blossom\").\nHas_name(\"The Powerpuff Girls\", \"Bubbles\").\nHas_name(\"The Powerpuff Girls\", \"Buttercup\").\n.decl Answer()\nAnswer() :- Has_name(\"The Powerpuff Girls\", name1), Has_name(\"The Powerpuff Girls\", name2), name1[0] = name2[0].\n.output Answer", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"The Powerpuff Girls\", \"Blossom\").\nHas_name(\"The Powerpuff Girls\", \"Bubbles\").\nHas_name(\"The Powerpuff Girls\", \"Buttercup\").\n.decl Answer()\nAnswer() :- Has_name(\"The Powerpuff Girls\", name1), Has_name(\"The Powerpuff Girls\", name2), name1[0] = name2[0].\n.output Answer"]}
{"id": 505, "answer": true, "completion": ".decl Knows(Person:symbol, Celebrity:symbol)\nKnows(\"J.K Rowling fans\", \"Alan Rickman\").\n.decl Answer()\nAnswer() :- Knows(\"J.K Rowling fans\", \"Alan Rickman\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Celebrity:symbol)\nKnows(\"J.K Rowling fans\", \"Alan Rickman\").\n.decl Answer()\nAnswer() :- Knows(\"J.K Rowling fans\", \"Alan Rickman\").\n.output Answer"]}
{"id": 506, "answer": true, "completion": ".decl Relation(Person_A:symbol, Person_B:symbol, Feeling:symbol)\nRelation(\"Hannah Nixon\", \"Richard Nixon\", \"proud\").\n.decl Happened(Event:symbol)\nHappened(\"Watergate scandal\").\n.decl Answer()\nAnswer() :- Relation(\"Hannah Nixon\", \"Richard Nixon\", feeling), Happened(\"Watergate scandal\"), feeling = \"proud\".\n.output Answer", "completions": [".decl Relation(Person_A:symbol, Person_B:symbol, Feeling:symbol)\nRelation(\"Hannah Nixon\", \"Richard Nixon\", \"proud\").\n.decl Happened(Event:symbol)\nHappened(\"Watergate scandal\").\n.decl Answer()\nAnswer() :- Relation(\"Hannah Nixon\", \"Richard Nixon\", feeling), Happened(\"Watergate scandal\"), feeling = \"proud\".\n.output Answer"]}
{"id": 507, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"giraffe\", 4.5).\n.decl Answer()\nAnswer() :- Has_height(\"Javier Sotomayor\", height1), Has_height(\"giraffe\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"giraffe\", 4.5).\n.decl Answer()\nAnswer() :- Has_height(\"Javier Sotomayor\", height1), Has_height(\"giraffe\", height2), height1 > height2.\n.output Answer"]}
{"id": 508, "answer": true, "completion": ".decl Likes(Person:symbol, Movie:symbol)\nLikes(\"Amy Winehouse\", \"Back to Black\").\n.decl Answer()\nAnswer() :- !Likes(\"Amy Winehouse\", \"Star Wars: Rogue One\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Movie:symbol)\nLikes(\"Amy Winehouse\", \"Back to Black\").\n.decl Answer()\nAnswer() :- !Likes(\"Amy Winehouse\", \"Star Wars: Rogue One\").\n.output Answer"]}
{"id": 509, "answer": true, "completion": ".decl Owes(Person_A:symbol, Person_B:symbol)\nOwes(\"Christopher Nolan\", \"Bob Kane\").\n.decl Answer()\nAnswer() :- Owes(\"Christopher Nolan\", \"Bob Kane\").\n.output Answer", "completions": [".decl Owes(Person_A:symbol, Person_B:symbol)\nOwes(\"Christopher Nolan\", \"Bob Kane\").\n.decl Answer()\nAnswer() :- Owes(\"Christopher Nolan\", \"Bob Kane\").\n.output Answer"]}
{"id": 510, "answer": true, "completion": ".decl Named_after(County:symbol, Person:symbol)\nNamed_after(\"Morris County\", \"Gouverneur Morris\").\n.decl Is_chief_justice(Person:symbol)\nIs_chief_justice(\"John Jay\").\n.decl Answer()\nAnswer() :- Named_after(\"Morris County\", person), Is_chief_justice(person).\n.output Answer", "completions": [".decl Named_after(County:symbol, Person:symbol)\nNamed_after(\"Morris County\", \"Gouverneur Morris\").\n.decl Is_chief_justice(Person:symbol)\nIs_chief_justice(\"John Jay\").\n.decl Answer()\nAnswer() :- Named_after(\"Morris County\", person), Is_chief_justice(person).\n.output Answer"]}
{"id": 511, "answer": true, "completion": ".decl Has_status(System:symbol, Status:float)\nHas_status(\"Japanese serfdom\", 5).\nHas_status(\"English counterpart\", 3).\n.decl Answer()\nAnswer() :- Has_status(\"Japanese serfdom\", status1), Has_status(\"English counterpart\", status2), status1 > status2.\n.output Answer", "completions": [".decl Has_status(System:symbol, Status:float)\nHas_status(\"Japanese serfdom\", 5).\nHas_status(\"English counterpart\", 3).\n.decl Answer()\nAnswer() :- Has_status(\"Japanese serfdom\", status1), Has_status(\"English counterpart\", status2), status1 > status2.\n.output Answer"]}
{"id": 512, "answer": true, "completion": ".decl Grows_in_latitude(Crop:symbol, Latitude:float)\nGrows_in_latitude(\"cauliflower\", 45).\nGrows_in_latitude(\"cauliflower\", 75).\n.decl Answer()\nAnswer() :- Grows_in_latitude(\"cauliflower\", latitude), latitude = 75.\n.output Answer", "completions": [".decl Grows_in_latitude(Crop:symbol, Latitude:float)\nGrows_in_latitude(\"cauliflower\", 45).\nGrows_in_latitude(\"cauliflower\", 75).\n.decl Answer()\nAnswer() :- Grows_in_latitude(\"cauliflower\", latitude), latitude = 75.\n.output Answer"]}
{"id": 513, "answer": true, "completion": ".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"Swallow\", 15).\nHas_speed(\"American Woodcock\", 10).\n.decl Answer()\nAnswer() :- Has_speed(\"Swallow\", speed1), Has_speed(\"American Woodcock\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"Swallow\", 15).\nHas_speed(\"American Woodcock\", 10).\n.decl Answer()\nAnswer() :- Has_speed(\"Swallow\", speed1), Has_speed(\"American Woodcock\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 514, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"cattle farmer\", \"animal husbandry\").\nHas_skill(\"drum maker\", \"woodworking\").\n.decl Answer()\nAnswer() :- Has_skill(\"cattle farmer\", skill1), Has_skill(\"drum maker\", skill2), skill1 != skill2.\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"cattle farmer\", \"animal husbandry\").\nHas_skill(\"drum maker\", \"woodworking\").\n.decl Answer()\nAnswer() :- Has_skill(\"cattle farmer\", skill1), Has_skill(\"drum maker\", skill2), skill1 != skill2.\n.output Answer"]}
{"id": 515, "answer": false, "completion": ".decl Needs(Person:symbol, Item:symbol)\nNeeds(\"drummer\", \"drumsticks\").\n.decl Answer()\nAnswer() :- Needs(\"drummer\", \"strings\").\n.output Answer", "completions": [".decl Needs(Person:symbol, Item:symbol)\nNeeds(\"drummer\", \"drumsticks\").\n.decl Answer()\nAnswer() :- Needs(\"drummer\", \"strings\").\n.output Answer"]}
{"id": 516, "answer": true, "completion": ".decl Named_after(Thing:symbol, Person:symbol)\nNamed_after(\"Homer\", \"Homer\").\n.decl Wrote(Person:symbol, Book:symbol)\nWrote(\"Homer\", \"Odyssey\").\n.decl Answer()\nAnswer() :- Named_after(\"Homer\", person), Wrote(person, \"Odyssey\").\n.output Answer", "completions": [".decl Named_after(Thing:symbol, Person:symbol)\nNamed_after(\"Homer\", \"Homer\").\n.decl Wrote(Person:symbol, Book:symbol)\nWrote(\"Homer\", \"Odyssey\").\n.decl Answer()\nAnswer() :- Named_after(\"Homer\", person), Wrote(person, \"Odyssey\").\n.output Answer"]}
{"id": 517, "answer": true, "completion": ".decl Has_record(Person:symbol, Record:symbol)\nHas_record(\"Kane\", \"Royal Rumble\").\n.decl Has_time_in_prison(Person:symbol, Time_in_prison:float)\nHas_time_in_prison(\"murderer\", 10).\n.decl Answer()\nAnswer() :- Has_record(\"Kane\", \"Royal Rumble\"), Has_time_in_prison(\"murderer\", time_in_prison), time_in_prison > 0.\n.output Answer", "completions": [".decl Has_record(Person:symbol, Record:symbol)\nHas_record(\"Kane\", \"Royal Rumble\").\n.decl Has_time_in_prison(Person:symbol, Time_in_prison:float)\nHas_time_in_prison(\"murderer\", 10).\n.decl Answer()\nAnswer() :- Has_record(\"Kane\", \"Royal Rumble\"), Has_time_in_prison(\"murderer\", time_in_prison), time_in_prison > 0.\n.output Answer"]}
{"id": 518, "answer": false, "completion": ".decl Is_available_in_location(Show:symbol, Location:symbol)\nIs_available_in_location(\"Rick and Morty\", \"Netflix\").\n.decl Answer()\nAnswer() :- !Is_available_in_location(\"Rick and Morty\", \"Mariana Trench\").\n.output Answer", "completions": [".decl Is_available_in_location(Show:symbol, Location:symbol)\nIs_available_in_location(\"Rick and Morty\", \"Netflix\").\n.decl Answer()\nAnswer() :- !Is_available_in_location(\"Rick and Morty\", \"Mariana Trench\").\n.output Answer"]}
{"id": 519, "answer": true, "completion": ".decl Has_in_home(Person:symbol, Object:symbol)\nHas_in_home(\"Dick Wolf\", \"winged statuettes\").\n.decl Answer()\nAnswer() :- Has_in_home(\"Dick Wolf\", \"winged statuettes\").\n.output Answer", "completions": [".decl Has_in_home(Person:symbol, Object:symbol)\nHas_in_home(\"Dick Wolf\", \"winged statuettes\").\n.decl Answer()\nAnswer() :- Has_in_home(\"Dick Wolf\", \"winged statuettes\").\n.output Answer"]}
{"id": 520, "answer": false, "completion": ".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"clouded leopard\", \"forest\").\nLives_in_habitat(\"pangolin\", \"forest\").\n.decl Is_awake(Animal:symbol, Awake:symbol)\nIs_awake(\"pangolin\", \"yes\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"clouded leopard\", habitat), Lives_in_habitat(\"pangolin\", habitat), Is_awake(\"pangolin\", \"yes\").\n.output Answer", "completions": [".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"clouded leopard\", \"forest\").\nLives_in_habitat(\"pangolin\", \"forest\").\n.decl Is_awake(Animal:symbol, Awake:symbol)\nIs_awake(\"pangolin\", \"yes\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"clouded leopard\", habitat), Lives_in_habitat(\"pangolin\", habitat), Is_awake(\"pangolin\", \"yes\").\n.output Answer"]}
{"id": 521, "answer": false, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"mythical creature\", \"unicorn\").\nHas_name(\"Small Solar System body\", \"unicorn\").\n.decl Answer()\nAnswer() :- Has_name(object1, name), Has_name(object2, name), object1 != object2.\n.output Answer", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"mythical creature\", \"unicorn\").\nHas_name(\"Small Solar System body\", \"unicorn\").\n.decl Answer()\nAnswer() :- Has_name(object1, name), Has_name(object2, name), object1 != object2.\n.output Answer"]}
{"id": 522, "answer": true, "completion": ".decl Believes_in(Person:symbol, Medicine:symbol)\nBelieves_in(\"Lionel Richie\", \"holistic medicine\").\n.decl Answer()\nAnswer() :- Believes_in(\"Lionel Richie\", \"holistic medicine\").\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Medicine:symbol)\nBelieves_in(\"Lionel Richie\", \"holistic medicine\").\n.decl Answer()\nAnswer() :- Believes_in(\"Lionel Richie\", \"holistic medicine\").\n.output Answer"]}
{"id": 523, "answer": true, "completion": ".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Tom Bergeron\", \"host of Dancing With The Stars\").\n.decl Answer()\nAnswer() :- !Has_role(\"Tom Bergeron\", \"double duty\").\n.output Answer", "completions": [".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Tom Bergeron\", \"host of Dancing With The Stars\").\n.decl Answer()\nAnswer() :- !Has_role(\"Tom Bergeron\", \"double duty\").\n.output Answer"]}
{"id": 524, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"salmon\", \"Caspian Sea\").\n.decl Mates(Animal:symbol)\nMates(\"salmon\").\n.decl Answer()\nAnswer() :- Lives_in(\"salmon\", \"Caspian Sea\"), Mates(\"salmon\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"salmon\", \"Caspian Sea\").\n.decl Mates(Animal:symbol)\nMates(\"salmon\").\n.decl Answer()\nAnswer() :- Lives_in(\"salmon\", \"Caspian Sea\"), Mates(\"salmon\").\n.output Answer"]}
{"id": 525, "answer": false, "completion": ".decl Has_destination(Train:symbol, Destination:symbol)\nHas_destination(\"Amtrak\", \"New York City\").\n.decl Answer()\nAnswer() :- Has_destination(\"Amtrak\", destination), destination != \"Underworld\".\n.output Answer", "completions": [".decl Has_destination(Train:symbol, Destination:symbol)\nHas_destination(\"Amtrak\", \"New York City\").\n.decl Answer()\nAnswer() :- Has_destination(\"Amtrak\", destination), destination != \"Underworld\".\n.output Answer"]}
{"id": 526, "answer": false, "completion": ".decl Has_benefits(Food:symbol, Person:symbol)\nHas_benefits(\"Chinook salmon\", \"Ryan Reynolds\").\n.decl Answer()\nAnswer() :- Has_benefits(\"Chinook salmon\", \"Ryan Reynolds\").\n.output Answer", "completions": [".decl Has_benefits(Food:symbol, Person:symbol)\nHas_benefits(\"Chinook salmon\", \"Ryan Reynolds\").\n.decl Answer()\nAnswer() :- Has_benefits(\"Chinook salmon\", \"Ryan Reynolds\").\n.output Answer"]}
{"id": 527, "answer": true, "completion": ".decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Tsar Nicholas\", \"Alexei\").\n.decl Is_daredevil(Person:symbol)\nIs_daredevil(\"Alexei\").\n.decl Answer()\nAnswer() :- Has_son(\"Tsar Nicholas\", son), Is_daredevil(son).\n.output Answer", "completions": [".decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Tsar Nicholas\", \"Alexei\").\n.decl Is_daredevil(Person:symbol)\nIs_daredevil(\"Alexei\").\n.decl Answer()\nAnswer() :- Has_son(\"Tsar Nicholas\", son), Is_daredevil(son).\n.output Answer"]}
{"id": 528, "answer": false, "completion": ".decl Has_vowel(Key:symbol, Vowel:symbol)\nHas_vowel(\"q\", \"a\").\nHas_vowel(\"w\", \"e\").\nHas_vowel(\"e\", \"e\").\nHas_vowel(\"r\", \"e\").\nHas_vowel(\"t\", \"e\").\nHas_vowel(\"y\", \"y\").\n.decl Answer()\nAnswer() :- Has_vowel(key1, vowel1), Has_vowel(key2, vowel2), Has_vowel(key3, vowel3), Has_vowel(key4, vowel4), Has_vowel(key5, vowel5), Has_vowel(key6, vowel6), (vowel1 = \"a\" + vowel2 = \"e\" + vowel3 = \"e\" + vowel4 = \"e\" + vowel5 = \"y\" + vowel6 = \"y\") > 3.\n.output Answer", "completions": [".decl Has_vowel(Key:symbol, Vowel:symbol)\nHas_vowel(\"q\", \"a\").\nHas_vowel(\"w\", \"e\").\nHas_vowel(\"e\", \"e\").\nHas_vowel(\"r\", \"e\").\nHas_vowel(\"t\", \"e\").\nHas_vowel(\"y\", \"y\").\n.decl Answer()\nAnswer() :- Has_vowel(key1, vowel1), Has_vowel(key2, vowel2), Has_vowel(key3, vowel3), Has_vowel(key4, vowel4), Has_vowel(key5, vowel5), Has_vowel(key6, vowel6), (vowel1 = \"a\" + vowel2 = \"e\" + vowel3 = \"e\" + vowel4 = \"e\" + vowel5 = \"y\" + vowel6 = \"y\") > 3.\n.output Answer"]}
{"id": 529, "answer": false, "completion": ".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"muskets\", \"American Revolutionary War\").\nUsed_in_war(\"muskets\", \"Napoleonic Wars\").\nUsed_in_war(\"muskets\", \"World War I\").\nUsed_in_war(\"muskets\", \"World War II\").\n.decl Answer()\nAnswer() :- Used_in_war(\"muskets\", \"Pacific War\").\n.output Answer", "completions": [".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"muskets\", \"American Revolutionary War\").\nUsed_in_war(\"muskets\", \"Napoleonic Wars\").\nUsed_in_war(\"muskets\", \"World War I\").\nUsed_in_war(\"muskets\", \"World War II\").\n.decl Answer()\nAnswer() :- Used_in_war(\"muskets\", \"Pacific War\").\n.output Answer"]}
{"id": 530, "answer": true, "completion": ".decl Associated_with(Person:symbol, Animal:symbol)\nAssociated_with(\"Noah\", \"dove\").\n.decl Answer()\nAnswer() :- Associated_with(\"Noah\", \"dove\").\n.output Answer", "completions": [".decl Associated_with(Person:symbol, Animal:symbol)\nAssociated_with(\"Noah\", \"dove\").\n.decl Answer()\nAnswer() :- Associated_with(\"Noah\", \"dove\").\n.output Answer"]}
{"id": 531, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Britney Spears\", \"bipolar disorder\").\n.decl Answer()\nAnswer() :- Has_condition(\"Britney Spears\", \"bipolar disorder\").\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Britney Spears\", \"bipolar disorder\").\n.decl Answer()\nAnswer() :- Has_condition(\"Britney Spears\", \"bipolar disorder\").\n.output Answer"]}
{"id": 532, "answer": false, "completion": ".decl Has_danger_level(Animal:symbol, Danger_level:float)\nHas_danger_level(\"cassowary\", 3).\nHas_danger_level(\"crane\", 4).\n.decl Answer()\nAnswer() :- Has_danger_level(\"cassowary\", danger_level1), Has_danger_level(\"crane\", danger_level2), danger_level1 < danger_level2.\n.output Answer", "completions": [".decl Has_danger_level(Animal:symbol, Danger_level:float)\nHas_danger_level(\"cassowary\", 3).\nHas_danger_level(\"crane\", 4).\n.decl Answer()\nAnswer() :- Has_danger_level(\"cassowary\", danger_level1), Has_danger_level(\"crane\", danger_level2), danger_level1 < danger_level2.\n.output Answer"]}
{"id": 533, "answer": false, "completion": ".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Mark Twain\", \"writer\").\n.decl Answer()\nAnswer() :- !Has_occupation(\"Mark Twain\", \"inventor\").\n.output Answer", "completions": [".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Mark Twain\", \"writer\").\n.decl Answer()\nAnswer() :- !Has_occupation(\"Mark Twain\", \"inventor\").\n.output Answer"]}
{"id": 534, "answer": false, "completion": ".decl Used_as_symbol(Object:symbol, Event:symbol)\nUsed_as_symbol(\"Eiffel tower\", \"French Revolution\").\n.decl Answer()\nAnswer() :- Used_as_symbol(\"Eiffel tower\", \"French Revolution\").\n.output Answer", "completions": [".decl Used_as_symbol(Object:symbol, Event:symbol)\nUsed_as_symbol(\"Eiffel tower\", \"French Revolution\").\n.decl Answer()\nAnswer() :- Used_as_symbol(\"Eiffel tower\", \"French Revolution\").\n.output Answer"]}
{"id": 535, "answer": true, "completion": ".decl Founded_in_period(University:symbol, Period:symbol)\nFounded_in_period(\"Berlin University of the Arts\", \"Modern\").\n.decl Answer()\nAnswer() :- !Founded_in_period(\"Berlin University of the Arts\", \"Baroque\").\n.output Answer", "completions": [".decl Founded_in_period(University:symbol, Period:symbol)\nFounded_in_period(\"Berlin University of the Arts\", \"Modern\").\n.decl Answer()\nAnswer() :- !Founded_in_period(\"Berlin University of the Arts\", \"Baroque\").\n.output Answer"]}
{"id": 536, "answer": true, "completion": ".decl Belongs_to_universe(Comic:symbol, Universe:symbol)\nBelongs_to_universe(\"Avengers Comics\", \"Marvel Universe\").\nBelongs_to_universe(\"DC Comics\", \"DC Universe\").\n.decl Answer()\nAnswer() :- Belongs_to_universe(\"Avengers Comics\", universe1), Belongs_to_universe(\"DC Comics\", universe2), universe1 != universe2.\n.output Answer", "completions": [".decl Belongs_to_universe(Comic:symbol, Universe:symbol)\nBelongs_to_universe(\"Avengers Comics\", \"Marvel Universe\").\nBelongs_to_universe(\"DC Comics\", \"DC Universe\").\n.decl Answer()\nAnswer() :- Belongs_to_universe(\"Avengers Comics\", universe1), Belongs_to_universe(\"DC Comics\", universe2), universe1 != universe2.\n.output Answer"]}
{"id": 537, "answer": false, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Queen Elizabeth The Queen Mother\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth II\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth I\", \"Elizabeth\").\n.decl Answer()\nAnswer() :- Has_name(\"Queen Elizabeth The Queen Mother\", name1), Has_name(\"Queen Elizabeth II\", name2), Has_name(\"Queen Elizabeth I\", name3), name1 = name2, name2 = name3.\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Queen Elizabeth The Queen Mother\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth II\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth I\", \"Elizabeth\").\n.decl Answer()\nAnswer() :- Has_name(\"Queen Elizabeth The Queen Mother\", name1), Has_name(\"Queen Elizabeth II\", name2), Has_name(\"Queen Elizabeth I\", name3), name1 = name2, name2 = name3.\n.output Answer"]}
{"id": 538, "answer": true, "completion": ".decl Has_effect(Drink:symbol, Effect:symbol)\nHas_effect(\"Cuba Libre\", \"relaxation\").\n.decl Answer()\nAnswer() :- Has_effect(\"Cuba Libre\", effect), effect = \"relaxation\".\n.output Answer", "completions": [".decl Has_effect(Drink:symbol, Effect:symbol)\nHas_effect(\"Cuba Libre\", \"relaxation\").\n.decl Answer()\nAnswer() :- Has_effect(\"Cuba Libre\", effect), effect = \"relaxation\".\n.output Answer"]}
{"id": 539, "answer": true, "completion": ".decl Buys(Company:symbol, Product:symbol)\nBuys(\"United Airlines\", \"airplanes\").\n.decl Answer()\nAnswer() :- Buys(\"United Airlines\", \"Glycol\").\n.output Answer", "completions": [".decl Buys(Company:symbol, Product:symbol)\nBuys(\"United Airlines\", \"airplanes\").\n.decl Answer()\nAnswer() :- Buys(\"United Airlines\", \"Glycol\").\n.output Answer"]}
{"id": 540, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Swiss Guard\", 110).\n.decl Has_n_chairs(Assembly:symbol, N_chairs:float)\nHas_n_chairs(\"Virginia General Assembly\", 140).\n.decl Answer()\nAnswer() :- Has_n_members(\"Swiss Guard\", n_members), Has_n_chairs(\"Virginia General Assembly\", n_chairs), n_members >= n_chairs.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Swiss Guard\", 110).\n.decl Has_n_chairs(Assembly:symbol, N_chairs:float)\nHas_n_chairs(\"Virginia General Assembly\", 140).\n.decl Answer()\nAnswer() :- Has_n_members(\"Swiss Guard\", n_members), Has_n_chairs(\"Virginia General Assembly\", n_chairs), n_members >= n_chairs.\n.output Answer"]}
{"id": 541, "answer": true, "completion": ".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Julio Gonzalez\", \"acetylene\").\n.decl Answer()\nAnswer() :- Likes(\"Julio Gonzalez\", \"acetylene\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Julio Gonzalez\", \"acetylene\").\n.decl Answer()\nAnswer() :- Likes(\"Julio Gonzalez\", \"acetylene\").\n.output Answer"]}
{"id": 542, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Frigatebird\", \"Tropical and subtropical oceans\").\n.decl Answer()\nAnswer() :- Lives_in(\"Frigatebird\", place), place != \"Ontario\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Frigatebird\", \"Tropical and subtropical oceans\").\n.decl Answer()\nAnswer() :- Lives_in(\"Frigatebird\", place), place != \"Ontario\".\n.output Answer"]}
{"id": 543, "answer": true, "completion": ".decl Is_visible_from(Object_A:symbol, Object_B:symbol)\nIs_visible_from(\"Statue of Liberty\", \"Statue of Freedom\").\n.decl Answer()\nAnswer() :- Is_visible_from(\"Statue of Liberty\", \"Statue of Freedom\").\n.output Answer", "completions": [".decl Is_visible_from(Object_A:symbol, Object_B:symbol)\nIs_visible_from(\"Statue of Liberty\", \"Statue of Freedom\").\n.decl Answer()\nAnswer() :- Is_visible_from(\"Statue of Liberty\", \"Statue of Freedom\").\n.output Answer"]}
{"id": 544, "answer": false, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Snickers\", 250).\n.decl Answer()\nAnswer() :- Has_calories(\"Snickers\", calories), calories > 0.\n.output Answer", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Snickers\", 250).\n.decl Answer()\nAnswer() :- Has_calories(\"Snickers\", calories), calories > 0.\n.output Answer"]}
{"id": 545, "answer": true, "completion": ".decl Has_structure(Organ:symbol, Structure:symbol)\nHas_structure(\"skull\", \"one whole bone\").\n.decl Answer()\nAnswer() :- Has_structure(\"skull\", \"one whole bone\").\n.output Answer", "completions": [".decl Has_structure(Organ:symbol, Structure:symbol)\nHas_structure(\"skull\", \"one whole bone\").\n.decl Answer()\nAnswer() :- Has_structure(\"skull\", \"one whole bone\").\n.output Answer"]}
{"id": 546, "answer": false, "completion": ".decl Witnesses(Person:symbol, Event:symbol)\n.decl Answer()\nAnswer() :- !Witnesses(\"Jack Dempsey\", \"Conor McGregor's fights\").\n.output Answer", "completions": [".decl Witnesses(Person:symbol, Event:symbol)\n.decl Answer()\nAnswer() :- !Witnesses(\"Jack Dempsey\", \"Conor McGregor's fights\").\n.output Answer"]}
{"id": 547, "answer": true, "completion": ".decl From_country(Character:symbol, Country:symbol)\nFrom_country(\"Rurouni Kenshin\", \"Japan\").\nFrom_country(\"lead character in Nobunaga's Ambition\", \"Japan\").\n.decl Answer()\nAnswer() :- From_country(\"Rurouni Kenshin\", country1), From_country(\"lead character in Nobunaga's Ambition\", country2), country1 = country2.\n.output Answer", "completions": [".decl From_country(Character:symbol, Country:symbol)\nFrom_country(\"Rurouni Kenshin\", \"Japan\").\nFrom_country(\"lead character in Nobunaga's Ambition\", \"Japan\").\n.decl Answer()\nAnswer() :- From_country(\"Rurouni Kenshin\", country1), From_country(\"lead character in Nobunaga's Ambition\", country2), country1 = country2.\n.output Answer"]}
{"id": 548, "answer": true, "completion": ".decl Has_dunk_ability(Person:symbol, Dunk_ability:float)\nHas_dunk_ability(\"Darth Vader\", 0).\nHas_dunk_ability(\"Bill Walton\", 10).\n.decl Answer()\nAnswer() :- Has_dunk_ability(\"Darth Vader\", dunk_ability1), Has_dunk_ability(\"Bill Walton\", dunk_ability2), dunk_ability1 > dunk_ability2.\n.output Answer", "completions": [".decl Has_dunk_ability(Person:symbol, Dunk_ability:float)\nHas_dunk_ability(\"Darth Vader\", 0).\nHas_dunk_ability(\"Bill Walton\", 10).\n.decl Answer()\nAnswer() :- Has_dunk_ability(\"Darth Vader\", dunk_ability1), Has_dunk_ability(\"Bill Walton\", dunk_ability2), dunk_ability1 > dunk_ability2.\n.output Answer"]}
{"id": 549, "answer": false, "completion": ".decl Uses(Field:symbol, Tool:symbol)\nUses(\"popular science\", \"peer review\").\n.decl Answer()\nAnswer() :- Uses(\"popular science\", \"peer review\").\n.output Answer", "completions": [".decl Uses(Field:symbol, Tool:symbol)\nUses(\"popular science\", \"peer review\").\n.decl Answer()\nAnswer() :- Uses(\"popular science\", \"peer review\").\n.output Answer"]}
{"id": 550, "answer": true, "completion": ".decl Is_linked_to(Thing_A:symbol, Thing_B:symbol)\nIs_linked_to(\"Europa\", \"Viennese waltzes\").\n.decl Answer()\nAnswer() :- Is_linked_to(\"Europa\", \"Viennese waltzes\").\n.output Answer", "completions": [".decl Is_linked_to(Thing_A:symbol, Thing_B:symbol)\nIs_linked_to(\"Europa\", \"Viennese waltzes\").\n.decl Answer()\nAnswer() :- Is_linked_to(\"Europa\", \"Viennese waltzes\").\n.output Answer"]}
{"id": 551, "answer": true, "completion": ".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Ariel\", \"red\").\n.decl Is_on_broadway(Person:symbol)\nIs_on_broadway(\"Ariel\").\n.decl Is_disney_princess(Person:symbol)\nIs_disney_princess(\"Ariel\").\n.decl Answer()\nAnswer() :- Is_on_broadway(person), Is_disney_princess(person), Has_hair_color(person, \"red\").\n.output Answer", "completions": [".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Ariel\", \"red\").\n.decl Is_on_broadway(Person:symbol)\nIs_on_broadway(\"Ariel\").\n.decl Is_disney_princess(Person:symbol)\nIs_disney_princess(\"Ariel\").\n.decl Answer()\nAnswer() :- Is_on_broadway(person), Is_disney_princess(person), Has_hair_color(person, \"red\").\n.output Answer"]}
{"id": 552, "answer": false, "completion": ".decl Participates(Person:symbol, Event:symbol)\nParticipates(\"woman\", \"2008 Summer Olympics\").\nParticipates(\"athlete\", \"2008 Summer Olympics\").\n.decl Answer()\nAnswer() :- Participates(person1, \"2008 Summer Olympics\"), Participates(person2, \"2008 Summer Olympics\"), person1 != person2.\n.output Answer", "completions": [".decl Participates(Person:symbol, Event:symbol)\nParticipates(\"woman\", \"2008 Summer Olympics\").\nParticipates(\"athlete\", \"2008 Summer Olympics\").\n.decl Answer()\nAnswer() :- Participates(person1, \"2008 Summer Olympics\"), Participates(person2, \"2008 Summer Olympics\"), person1 != person2.\n.output Answer"]}
{"id": 553, "answer": true, "completion": ".decl Contributes_to(Object:symbol, Event:symbol)\nContributes_to(\"Eiffel Tower\", \"Paris World Fair\").\n.decl Leads_to(Event:symbol, Victory:symbol)\nLeads_to(\"Paris World Fair\", \"French victory\").\n.decl Answer()\nAnswer() :- Contributes_to(\"Eiffel Tower\", event), Leads_to(event, \"French victory\").\n.output Answer", "completions": [".decl Contributes_to(Object:symbol, Event:symbol)\nContributes_to(\"Eiffel Tower\", \"Paris World Fair\").\n.decl Leads_to(Event:symbol, Victory:symbol)\nLeads_to(\"Paris World Fair\", \"French victory\").\n.decl Answer()\nAnswer() :- Contributes_to(\"Eiffel Tower\", event), Leads_to(event, \"French victory\").\n.output Answer"]}
{"id": 554, "answer": true, "completion": ".decl Can_kill(Object:symbol, Animal:symbol)\nCan_kill(\"Curiosity\", \"mouse\").\n.decl Answer()\nAnswer() :- !Can_kill(\"Curiosity\", \"cat\").\n.output Answer", "completions": [".decl Can_kill(Object:symbol, Animal:symbol)\nCan_kill(\"Curiosity\", \"mouse\").\n.decl Answer()\nAnswer() :- !Can_kill(\"Curiosity\", \"cat\").\n.output Answer"]}
{"id": 555, "answer": false, "completion": ".decl Enhances_flavor(Ingredient_A:symbol, Ingredient_B:symbol)\nEnhances_flavor(\"lemon\", \"milk\").\n.decl Answer()\nAnswer() :- Enhances_flavor(\"lemon\", \"milk\").\n.output Answer", "completions": [".decl Enhances_flavor(Ingredient_A:symbol, Ingredient_B:symbol)\nEnhances_flavor(\"lemon\", \"milk\").\n.decl Answer()\nAnswer() :- Enhances_flavor(\"lemon\", \"milk\").\n.output Answer"]}
{"id": 556, "answer": false, "completion": ".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Oprah Winfrey\", \"Bachelor of Arts\").\n.decl Is_Ivy_League(University:symbol)\nIs_Ivy_League(\"Harvard University\").\nIs_Ivy_League(\"Yale University\").\nIs_Ivy_League(\"Princeton University\").\nIs_Ivy_League(\"Columbia University\").\nIs_Ivy_League(\"Brown University\").\nIs_Ivy_League(\"Dartmouth College\").\nIs_Ivy_League(\"Cornell University\").\n.decl Answer()\nAnswer() :- Has_degree(\"Oprah Winfrey\", degree), Is_Ivy_League(university), Graduates(\"Oprah Winfrey\", university).\n.output Answer", "completions": [".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Oprah Winfrey\", \"Bachelor of Arts\").\n.decl Is_Ivy_League(University:symbol)\nIs_Ivy_League(\"Harvard University\").\nIs_Ivy_League(\"Yale University\").\nIs_Ivy_League(\"Princeton University\").\nIs_Ivy_League(\"Columbia University\").\nIs_Ivy_League(\"Brown University\").\nIs_Ivy_League(\"Dartmouth College\").\nIs_Ivy_League(\"Cornell University\").\n.decl Answer()\nAnswer() :- Has_degree(\"Oprah Winfrey\", degree), Is_Ivy_League(university), Graduates(\"Oprah Winfrey\", university).\n.output Answer"]}
{"id": 557, "answer": true, "completion": ".decl Has_birthday(Person:symbol, Day:symbol)\nHas_birthday(\"unanimously elected president\", \"July 4th\").\n.decl Is_break(Day:symbol)\nIs_break(\"July 4th\").\n.decl Answer()\nAnswer() :- Has_birthday(\"unanimously elected president\", day), Is_break(day).\n.output Answer", "completions": [".decl Has_birthday(Person:symbol, Day:symbol)\nHas_birthday(\"unanimously elected president\", \"July 4th\").\n.decl Is_break(Day:symbol)\nIs_break(\"July 4th\").\n.decl Answer()\nAnswer() :- Has_birthday(\"unanimously elected president\", day), Is_break(day).\n.output Answer"]}
{"id": 558, "answer": false, "completion": ".decl Requires_dehydrator(Food:symbol)\nRequires_dehydrator(\"Paprika\").\n.decl Answer()\nAnswer() :- !Requires_dehydrator(\"Paprika\").\n.output Answer", "completions": [".decl Requires_dehydrator(Food:symbol)\nRequires_dehydrator(\"Paprika\").\n.decl Answer()\nAnswer() :- !Requires_dehydrator(\"Paprika\").\n.output Answer"]}
{"id": 559, "answer": false, "completion": ".decl Served_in_war(Person:symbol, War:symbol)\nServed_in_war(\"veteran\", \"Phillippine-American War\").\n.decl Craves(Person:symbol, Food:symbol)\nCraves(\"veteran\", \"SPAM\").\n.decl Answer()\nAnswer() :- Served_in_war(person, \"Phillippine-American War\"), Craves(person, \"SPAM\").\n.output Answer", "completions": [".decl Served_in_war(Person:symbol, War:symbol)\nServed_in_war(\"veteran\", \"Phillippine-American War\").\n.decl Craves(Person:symbol, Food:symbol)\nCraves(\"veteran\", \"SPAM\").\n.decl Answer()\nAnswer() :- Served_in_war(person, \"Phillippine-American War\"), Craves(person, \"SPAM\").\n.output Answer"]}
{"id": 560, "answer": false, "completion": ".decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"United States Capitol\", \"White House\").\n.decl Answer()\nAnswer() :- Is_near(\"United States Capitol\", \"White House\").\n.output Answer", "completions": [".decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"United States Capitol\", \"White House\").\n.decl Answer()\nAnswer() :- Is_near(\"United States Capitol\", \"White House\").\n.output Answer"]}
{"id": 561, "answer": false, "completion": ".decl Has_image(Entity:symbol, Image:symbol)\nHas_image(\"Godzilla\", \"fearsome\").\n.decl Has_law(Year:float, Law:symbol)\nHas_law(2050, \"copyright\").\n.decl Answer()\nAnswer() :- Has_image(\"Godzilla\", image), Has_law(2050, law), law = \"copyright\", image = \"fearsome\".\n.output Answer", "completions": [".decl Has_image(Entity:symbol, Image:symbol)\nHas_image(\"Godzilla\", \"fearsome\").\n.decl Has_law(Year:float, Law:symbol)\nHas_law(2050, \"copyright\").\n.decl Answer()\nAnswer() :- Has_image(\"Godzilla\", image), Has_law(2050, law), law = \"copyright\", image = \"fearsome\".\n.output Answer"]}
{"id": 562, "answer": false, "completion": ".decl Knows(Person:symbol, Knowledge:symbol)\nKnows(\"actuary\", \"math\").\nKnows(\"actuary\", \"statistics\").\n.decl Is_knowledge(Knowledge:symbol, Concept:symbol)\nIs_knowledge(\"math\", \"prime numbers\").\n.decl Answer()\nAnswer() :- Knows(\"actuary\", knowledge), Is_knowledge(knowledge, \"prime numbers\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Knowledge:symbol)\nKnows(\"actuary\", \"math\").\nKnows(\"actuary\", \"statistics\").\n.decl Is_knowledge(Knowledge:symbol, Concept:symbol)\nIs_knowledge(\"math\", \"prime numbers\").\n.decl Answer()\nAnswer() :- Knows(\"actuary\", knowledge), Is_knowledge(knowledge, \"prime numbers\").\n.output Answer"]}
{"id": 563, "answer": true, "completion": ".decl Has_emission_level(Source:symbol, Emission_level:float)\nHas_emission_level(\"cow methane\", 0.1).\nHas_emission_level(\"cars\", 0.2).\n.decl Answer()\nAnswer() :- Has_emission_level(\"cow methane\", emission_level1), Has_emission_level(\"cars\", emission_level2), emission_level1 < emission_level2.\n.output Answer", "completions": [".decl Has_emission_level(Source:symbol, Emission_level:float)\nHas_emission_level(\"cow methane\", 0.1).\nHas_emission_level(\"cars\", 0.2).\n.decl Answer()\nAnswer() :- Has_emission_level(\"cow methane\", emission_level1), Has_emission_level(\"cars\", emission_level2), emission_level1 < emission_level2.\n.output Answer"]}
{"id": 564, "answer": true, "completion": ".decl Wrote_song(Person:symbol, Song:symbol)\nWrote_song(\"Justin Timberlake\", \"Cry Me a River\").\n.decl Is_about(Song:symbol, Person:symbol)\nIs_about(\"Cry Me a River\", \"Britney Spears\").\n.decl Answer()\nAnswer() :- Wrote_song(\"Justin Timberlake\", song), Is_about(song, \"Britney Spears\").\n.output Answer", "completions": [".decl Wrote_song(Person:symbol, Song:symbol)\nWrote_song(\"Justin Timberlake\", \"Cry Me a River\").\n.decl Is_about(Song:symbol, Person:symbol)\nIs_about(\"Cry Me a River\", \"Britney Spears\").\n.decl Answer()\nAnswer() :- Wrote_song(\"Justin Timberlake\", song), Is_about(song, \"Britney Spears\").\n.output Answer"]}
{"id": 565, "answer": false, "completion": ".decl Can_chase(Animal_A:symbol, Animal_B:symbol)\nCan_chase(\"Clouded leopard\", \"Pronghorn antelope\").\n.decl Answer()\nAnswer() :- Can_chase(\"Clouded leopard\", \"Pronghorn antelope\").\n.output Answer", "completions": [".decl Can_chase(Animal_A:symbol, Animal_B:symbol)\nCan_chase(\"Clouded leopard\", \"Pronghorn antelope\").\n.decl Answer()\nAnswer() :- Can_chase(\"Clouded leopard\", \"Pronghorn antelope\").\n.output Answer"]}
{"id": 566, "answer": false, "completion": ".decl Presidents(Number:float, Name:symbol)\nPresidents(40, \"Ronald Reagan\").\n.decl Does(Person:symbol, Action:symbol)\nDoes(\"Ronald Reagan\", \"forward lolcats\").\n.decl Answer()\nAnswer() :- Presidents(number, \"Ronald Reagan\"), Does(\"Ronald Reagan\", action), action = \"forward lolcats\".\n.output Answer", "completions": [".decl Presidents(Number:float, Name:symbol)\nPresidents(40, \"Ronald Reagan\").\n.decl Does(Person:symbol, Action:symbol)\nDoes(\"Ronald Reagan\", \"forward lolcats\").\n.decl Answer()\nAnswer() :- Presidents(number, \"Ronald Reagan\"), Does(\"Ronald Reagan\", action), action = \"forward lolcats\".\n.output Answer"]}
{"id": 567, "answer": false, "completion": ".decl Requires_ID(Pharmacy:symbol, Medication:symbol)\nRequires_ID(\"all pharmacies\", \"all medications\").\n.decl Answer()\nAnswer() :- Requires_ID(\"all pharmacies\", \"all medications\").\n.output Answer", "completions": [".decl Requires_ID(Pharmacy:symbol, Medication:symbol)\nRequires_ID(\"all pharmacies\", \"all medications\").\n.decl Answer()\nAnswer() :- Requires_ID(\"all pharmacies\", \"all medications\").\n.output Answer"]}
{"id": 568, "answer": true, "completion": ".decl Has_n_ships(Navy:symbol, N_ships:float)\nHas_n_ships(\"Republic of Korea Navy\", 200).\nHas_n_ships(\"Eritrea Navy\", 10).\n.decl Answer()\nAnswer() :- Has_n_ships(\"Republic of Korea Navy\", n_ships1), Has_n_ships(\"Eritrea Navy\", n_ships2), n_ships1 > n_ships2.\n.output Answer", "completions": [".decl Has_n_ships(Navy:symbol, N_ships:float)\nHas_n_ships(\"Republic of Korea Navy\", 200).\nHas_n_ships(\"Eritrea Navy\", 10).\n.decl Answer()\nAnswer() :- Has_n_ships(\"Republic of Korea Navy\", n_ships1), Has_n_ships(\"Eritrea Navy\", n_ships2), n_ships1 > n_ships2.\n.output Answer"]}
{"id": 569, "answer": true, "completion": ".decl Inspired_by(Novel_A:symbol, Novel_B:symbol)\n.decl Answer()\nAnswer() :- !Inspired_by(\"The Great Gatsby\", \"1984\").\n.output Answer", "completions": [".decl Inspired_by(Novel_A:symbol, Novel_B:symbol)\n.decl Answer()\nAnswer() :- !Inspired_by(\"The Great Gatsby\", \"1984\").\n.output Answer"]}
{"id": 570, "answer": true, "completion": ".decl Is_villain(Person:symbol, Group:symbol)\nIs_villain(\"MF Doom\", \"Fantastic Four\").\n.decl Answer()\nAnswer() :- Is_villain(\"MF Doom\", \"Fantastic Four\").\n.output Answer", "completions": [".decl Is_villain(Person:symbol, Group:symbol)\nIs_villain(\"MF Doom\", \"Fantastic Four\").\n.decl Answer()\nAnswer() :- Is_villain(\"MF Doom\", \"Fantastic Four\").\n.output Answer"]}
{"id": 571, "answer": false, "completion": ".decl Has_popularity(Name:symbol, Popularity:float)\nHas_popularity(\"Michael\", 0.2).\n.decl Answer()\nAnswer() :- Has_popularity(\"Michael\", popularity), popularity < 0.5.\n.output Answer", "completions": [".decl Has_popularity(Name:symbol, Popularity:float)\nHas_popularity(\"Michael\", 0.2).\n.decl Answer()\nAnswer() :- Has_popularity(\"Michael\", popularity), popularity < 0.5.\n.output Answer"]}
{"id": 572, "answer": true, "completion": ".decl Has_length(Tunnel:symbol, Length:float)\nHas_length(\"Lincoln Tunnel\", 8346).\n.decl Has_length(Ship:symbol, Length:float)\nHas_length(\"Noah's Ark\", 300).\n.decl Answer()\nAnswer() :- Has_length(\"Lincoln Tunnel\", length1), Has_length(\"Noah's Ark\", length2), length2 <= length1.\n.output Answer", "completions": [".decl Has_length(Tunnel:symbol, Length:float)\nHas_length(\"Lincoln Tunnel\", 8346).\n.decl Has_length(Ship:symbol, Length:float)\nHas_length(\"Noah's Ark\", 300).\n.decl Answer()\nAnswer() :- Has_length(\"Lincoln Tunnel\", length1), Has_length(\"Noah's Ark\", length2), length2 <= length1.\n.output Answer"]}
{"id": 573, "answer": true, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"dermatitis\").\n.decl Can_do_job(Person:symbol, Job:symbol)\nCan_do_job(\"John\", \"hand model\").\n.decl Answer()\nAnswer() :- Has_condition(\"John\", \"dermatitis\"), !Can_do_job(\"John\", \"hand model\").\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"dermatitis\").\n.decl Can_do_job(Person:symbol, Job:symbol)\nCan_do_job(\"John\", \"hand model\").\n.decl Answer()\nAnswer() :- Has_condition(\"John\", \"dermatitis\"), !Can_do_job(\"John\", \"hand model\").\n.output Answer"]}
{"id": 574, "answer": false, "completion": ".decl Is_pet(Animal:symbol)\nIs_pet(\"dog\").\n.decl Needs_prevention(Animal:symbol, Prevention:symbol)\nNeeds_prevention(\"dog\", \"heartworm prevention\").\n.decl Answer()\nAnswer() :- Is_pet(\"Goofy\"), Needs_prevention(\"Goofy\", \"heartworm prevention\").\n.output Answer", "completions": [".decl Is_pet(Animal:symbol)\nIs_pet(\"dog\").\n.decl Needs_prevention(Animal:symbol, Prevention:symbol)\nNeeds_prevention(\"dog\", \"heartworm prevention\").\n.decl Answer()\nAnswer() :- Is_pet(\"Goofy\"), Needs_prevention(\"Goofy\", \"heartworm prevention\").\n.output Answer"]}
{"id": 575, "answer": false, "completion": ".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"nickel\", 28).\nHas_atomic_number(\"mercury\", 80).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"nickel\", atomic_number1), Has_atomic_number(\"mercury\", atomic_number2), atomic_number1 > atomic_number2.\n.output Answer", "completions": [".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"nickel\", 28).\nHas_atomic_number(\"mercury\", 80).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"nickel\", atomic_number1), Has_atomic_number(\"mercury\", atomic_number2), atomic_number1 > atomic_number2.\n.output Answer"]}
{"id": 576, "answer": true, "completion": ".decl Celebrates(Person_A:symbol, Person_B:symbol, Anniversary:symbol)\nCelebrates(\"Cynthia Powell\", \"John Lennon\", \"silver\").\n.decl Answer()\nAnswer() :- Celebrates(\"Cynthia Powell\", \"John Lennon\", \"silver\").\n.output Answer", "completions": [".decl Celebrates(Person_A:symbol, Person_B:symbol, Anniversary:symbol)\nCelebrates(\"Cynthia Powell\", \"John Lennon\", \"silver\").\n.decl Answer()\nAnswer() :- Celebrates(\"Cynthia Powell\", \"John Lennon\", \"silver\").\n.output Answer"]}
{"id": 577, "answer": false, "completion": ".decl Has_wealth(Person:symbol, Wealth:symbol)\nHas_wealth(\"Christopher Reeve\", \"rich\").\n.decl Answer()\nAnswer() :- Has_wealth(\"Christopher Reeve\", \"poor\"), !Has_wealth(\"Christopher Reeve\", \"rich\").\n.output Answer", "completions": [".decl Has_wealth(Person:symbol, Wealth:symbol)\nHas_wealth(\"Christopher Reeve\", \"rich\").\n.decl Answer()\nAnswer() :- Has_wealth(\"Christopher Reeve\", \"poor\"), !Has_wealth(\"Christopher Reeve\", \"rich\").\n.output Answer"]}
{"id": 578, "answer": true, "completion": ".decl Related_to(Event_A:symbol, Event_B:symbol)\nRelated_to(\"Operation Barbarossa\", \"World War II\").\nRelated_to(\"The Crusades\", \"Medieval Period\").\n.decl Answer()\nAnswer() :- Related_to(\"Operation Barbarossa\", event1), Related_to(\"The Crusades\", event2), event1 != event2.\n.output Answer", "completions": [".decl Related_to(Event_A:symbol, Event_B:symbol)\nRelated_to(\"Operation Barbarossa\", \"World War II\").\nRelated_to(\"The Crusades\", \"Medieval Period\").\n.decl Answer()\nAnswer() :- Related_to(\"Operation Barbarossa\", event1), Related_to(\"The Crusades\", event2), event1 != event2.\n.output Answer"]}
{"id": 579, "answer": true, "completion": ".decl Understands(Person:symbol, Subject:symbol)\nUnderstands(\"carpenter\", \"geometry\").\n.decl Answer()\nAnswer() :- Understands(\"carpenter\", \"geometry\").\n.output Answer", "completions": [".decl Understands(Person:symbol, Subject:symbol)\nUnderstands(\"carpenter\", \"geometry\").\n.decl Answer()\nAnswer() :- Understands(\"carpenter\", \"geometry\").\n.output Answer"]}
{"id": 580, "answer": false, "completion": ".decl Has_pages(Book:symbol, Pages:float)\nHas_pages(\"The Great Gatsby\", 180).\nHas_pages(\"The Raven\", 48).\n.decl Reads_n_pages_per_minute(Person:symbol, N_pages:float)\nReads_n_pages_per_minute(\"speed reader\", 10).\n.decl Answer()\nAnswer() :- Has_pages(\"The Great Gatsby\", pages1), Has_pages(\"The Raven\", pages2), Reads_n_pages_per_minute(\"speed reader\", n_pages), pages1/n_pages < pages2/n_pages.\n.output Answer", "completions": [".decl Has_pages(Book:symbol, Pages:float)\nHas_pages(\"The Great Gatsby\", 180).\nHas_pages(\"The Raven\", 48).\n.decl Reads_n_pages_per_minute(Person:symbol, N_pages:float)\nReads_n_pages_per_minute(\"speed reader\", 10).\n.decl Answer()\nAnswer() :- Has_pages(\"The Great Gatsby\", pages1), Has_pages(\"The Raven\", pages2), Reads_n_pages_per_minute(\"speed reader\", n_pages), pages1/n_pages < pages2/n_pages.\n.output Answer"]}
{"id": 581, "answer": false, "completion": ".decl Has_rating(Movie:symbol, Rating:symbol)\nHas_rating(\"The Dark Knight\", \"PG-13\").\n.decl Appropriate_for(Rating:symbol, Age_group:symbol)\nAppropriate_for(\"PG-13\", \"teenagers\").\nAppropriate_for(\"PG-13\", \"adults\").\n.decl Answer()\nAnswer() :- Has_rating(\"The Dark Knight\", rating), !Appropriate_for(rating, \"preschoolers\").\n.output Answer", "completions": [".decl Has_rating(Movie:symbol, Rating:symbol)\nHas_rating(\"The Dark Knight\", \"PG-13\").\n.decl Appropriate_for(Rating:symbol, Age_group:symbol)\nAppropriate_for(\"PG-13\", \"teenagers\").\nAppropriate_for(\"PG-13\", \"adults\").\n.decl Answer()\nAnswer() :- Has_rating(\"The Dark Knight\", rating), !Appropriate_for(rating, \"preschoolers\").\n.output Answer"]}
{"id": 582, "answer": false, "completion": ".decl Can_be_programmed_in(Object:symbol, Language:symbol)\nCan_be_programmed_in(\"computer\", \"Boolean algebra\").\n.decl Answer()\nAnswer() :- Can_be_programmed_in(\"computer\", \"Boolean algebra\").\n.output Answer", "completions": [".decl Can_be_programmed_in(Object:symbol, Language:symbol)\nCan_be_programmed_in(\"computer\", \"Boolean algebra\").\n.decl Answer()\nAnswer() :- Can_be_programmed_in(\"computer\", \"Boolean algebra\").\n.output Answer"]}
{"id": 583, "answer": true, "completion": ".decl Has_location(Organ:symbol, Location:symbol)\nHas_location(\"brain\", \"head\").\n.decl Answer()\nAnswer() :- !Has_location(\"brain\", \"torso\").\n.output Answer", "completions": [".decl Has_location(Organ:symbol, Location:symbol)\nHas_location(\"brain\", \"head\").\n.decl Answer()\nAnswer() :- !Has_location(\"brain\", \"torso\").\n.output Answer"]}
{"id": 584, "answer": true, "completion": ".decl Part_of(Object:symbol, Event:symbol)\nPart_of(\"donkeys\", \"Christmas celebrations\").\n.decl Answer()\nAnswer() :- Part_of(\"donkeys\", \"Christmas celebrations\").\n.output Answer", "completions": [".decl Part_of(Object:symbol, Event:symbol)\nPart_of(\"donkeys\", \"Christmas celebrations\").\n.decl Answer()\nAnswer() :- Part_of(\"donkeys\", \"Christmas celebrations\").\n.output Answer"]}
{"id": 585, "answer": false, "completion": ".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"death of Heath Ledger\", \"drug overdose\").\n.decl Answer()\nAnswer() :- Causes(\"death of Heath Ledger\", cause), !(cause = \"work on The Dark Knight\").\n.output Answer", "completions": [".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"death of Heath Ledger\", \"drug overdose\").\n.decl Answer()\nAnswer() :- Causes(\"death of Heath Ledger\", cause), !(cause = \"work on The Dark Knight\").\n.output Answer"]}
{"id": 586, "answer": true, "completion": ".decl Roamed_in_time(Animal:symbol, Time:symbol)\nRoamed_in_time(\"Polar Bears\", \"Ice Age\").\n.decl Answer()\nAnswer() :- !Roamed_in_time(\"Polar Bears\", \"Ancient Greece\").\n.output Answer", "completions": [".decl Roamed_in_time(Animal:symbol, Time:symbol)\nRoamed_in_time(\"Polar Bears\", \"Ice Age\").\n.decl Answer()\nAnswer() :- !Roamed_in_time(\"Polar Bears\", \"Ancient Greece\").\n.output Answer"]}
{"id": 587, "answer": true, "completion": ".decl Exists_in_time(Object:symbol, Time:symbol)\nExists_in_time(\"Moon Jae-in's residence\", \"2017\").\nExists_in_time(\"World Trade Center\", \"1973\").\n.decl Answer()\nAnswer() :- Exists_in_time(\"Moon Jae-in's residence\", time1), Exists_in_time(\"World Trade Center\", time2), time1 > time2.\n.output Answer", "completions": [".decl Exists_in_time(Object:symbol, Time:symbol)\nExists_in_time(\"Moon Jae-in's residence\", \"2017\").\nExists_in_time(\"World Trade Center\", \"1973\").\n.decl Answer()\nAnswer() :- Exists_in_time(\"Moon Jae-in's residence\", time1), Exists_in_time(\"World Trade Center\", time2), time1 > time2.\n.output Answer"]}
{"id": 588, "answer": false, "completion": ".decl Can_be_used_in(Object:symbol, Environment:symbol)\nCan_be_used_in(\"paratroopers\", \"atmosphere\").\n.decl Answer()\nAnswer() :- !Can_be_used_in(\"paratroopers\", \"vacuum\").\n.output Answer", "completions": [".decl Can_be_used_in(Object:symbol, Environment:symbol)\nCan_be_used_in(\"paratroopers\", \"atmosphere\").\n.decl Answer()\nAnswer() :- !Can_be_used_in(\"paratroopers\", \"vacuum\").\n.output Answer"]}
{"id": 589, "answer": true, "completion": ".decl Has_n_seats(Court:symbol, N_seats:float)\nHas_n_seats(\"highest US Court\", 9).\n.decl Has_been_prime_minister(Person:symbol, Year:float)\nHas_been_prime_minister(\"Winston Churchill\", 1952).\nHas_been_prime_minister(\"Anthony Eden\", 1955).\nHas_been_prime_minister(\"Harold Macmillan\", 1957).\nHas_been_prime_minister(\"Alec Douglas-Home\", 1963).\nHas_been_prime_minister(\"Harold Wilson\", 1964).\nHas_been_prime_minister(\"Edward Heath\", 1970).\nHas_been_prime_minister(\"James Callaghan\", 1976).\nHas_been_prime_minister(\"Margaret Thatcher\", 1979).\nHas_been_prime_minister(\"John Major\", 1990).\nHas_been_prime_minister(\"Tony Blair\", 1997).\nHas_been_prime_minister(\"Gordon Brown\", 2007).\nHas_been_prime_minister(\"David Cameron\", 2010).\nHas_been_prime_minister(\"Theresa May\", 2016).\n.decl Answer()\nAnswer() :- Has_n_seats(\"highest US Court\", n_seats), Has_been_prime_minister(person, year), year >= 1952, n_seats >= 12.\n.output Answer", "completions": [".decl Has_n_seats(Court:symbol, N_seats:float)\nHas_n_seats(\"highest US Court\", 9).\n.decl Has_been_prime_minister(Person:symbol, Year:float)\nHas_been_prime_minister(\"Winston Churchill\", 1952).\nHas_been_prime_minister(\"Anthony Eden\", 1955).\nHas_been_prime_minister(\"Harold Macmillan\", 1957).\nHas_been_prime_minister(\"Alec Douglas-Home\", 1963).\nHas_been_prime_minister(\"Harold Wilson\", 1964).\nHas_been_prime_minister(\"Edward Heath\", 1970).\nHas_been_prime_minister(\"James Callaghan\", 1976).\nHas_been_prime_minister(\"Margaret Thatcher\", 1979).\nHas_been_prime_minister(\"John Major\", 1990).\nHas_been_prime_minister(\"Tony Blair\", 1997).\nHas_been_prime_minister(\"Gordon Brown\", 2007).\nHas_been_prime_minister(\"David Cameron\", 2010).\nHas_been_prime_minister(\"Theresa May\", 2016).\n.decl Answer()\nAnswer() :- Has_n_seats(\"highest US Court\", n_seats), Has_been_prime_minister(person, year), year >= 1952, n_seats >= 12.\n.output Answer"]}
{"id": 590, "answer": false, "completion": ".decl Is_leader(Person:symbol, Group:symbol)\nIs_leader(\"Marshall Applewhite\", \"Heaven's Gate\").\n.decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Marshall Applewhite\", \"prophet\").\n.decl Answer()\nAnswer() :- Is_leader(person, \"Heaven's Gate\"), Believes(person, \"prophet\").\n.output Answer", "completions": [".decl Is_leader(Person:symbol, Group:symbol)\nIs_leader(\"Marshall Applewhite\", \"Heaven's Gate\").\n.decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Marshall Applewhite\", \"prophet\").\n.decl Answer()\nAnswer() :- Is_leader(person, \"Heaven's Gate\"), Believes(person, \"prophet\").\n.output Answer"]}
{"id": 591, "answer": true, "completion": ".decl Participated_in(Region:symbol, War:symbol)\nParticipated_in(\"Angola\", \"Portugese Colonial War\").\nParticipated_in(\"Mozambique\", \"Portugese Colonial War\").\nParticipated_in(\"Guinea-Bissau\", \"Portugese Colonial War\").\n.decl Has_official_language(Region:symbol, Language:symbol)\nHas_official_language(\"Angola\", \"Portuguese\").\nHas_official_language(\"Mozambique\", \"Portuguese\").\nHas_official_language(\"Guinea-Bissau\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Participated_in(region1, \"Portugese Colonial War\"), Participated_in(region2, \"Portugese Colonial War\"), Has_official_language(region1, language), Has_official_language(region2, language), region1 != region2.\n.output Answer", "completions": [".decl Participated_in(Region:symbol, War:symbol)\nParticipated_in(\"Angola\", \"Portugese Colonial War\").\nParticipated_in(\"Mozambique\", \"Portugese Colonial War\").\nParticipated_in(\"Guinea-Bissau\", \"Portugese Colonial War\").\n.decl Has_official_language(Region:symbol, Language:symbol)\nHas_official_language(\"Angola\", \"Portuguese\").\nHas_official_language(\"Mozambique\", \"Portuguese\").\nHas_official_language(\"Guinea-Bissau\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Participated_in(region1, \"Portugese Colonial War\"), Participated_in(region2, \"Portugese Colonial War\"), Has_official_language(region1, language), Has_official_language(region2, language), region1 != region2.\n.output Answer"]}
{"id": 592, "answer": false, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"John Smith\", \"railroad engineer\").\n.decl Is_on_channel(Show:symbol, Channel:symbol)\nIs_on_channel(\"TNT\", \"TNT\").\n.decl Answer()\nAnswer() :- Has_job(person, \"railroad engineer\"), Is_on_channel(\"TNT\", \"TNT\").\n.output Answer", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"John Smith\", \"railroad engineer\").\n.decl Is_on_channel(Show:symbol, Channel:symbol)\nIs_on_channel(\"TNT\", \"TNT\").\n.decl Answer()\nAnswer() :- Has_job(person, \"railroad engineer\"), Is_on_channel(\"TNT\", \"TNT\").\n.output Answer"]}
{"id": 593, "answer": true, "completion": ".decl Is_part_of(Organization_A:symbol, Organization_B:symbol)\nIs_part_of(\"CIA\", \"Department of Defense\").\n.decl Answer()\nAnswer() :- Is_part_of(\"CIA\", \"Department of Defense\").\n.output Answer", "completions": [".decl Is_part_of(Organization_A:symbol, Organization_B:symbol)\nIs_part_of(\"CIA\", \"Department of Defense\").\n.decl Answer()\nAnswer() :- Is_part_of(\"CIA\", \"Department of Defense\").\n.output Answer"]}
{"id": 594, "answer": true, "completion": ".decl Has_n_humps(Animal:symbol, N_humps:float)\nHas_n_humps(\"Bactrian Camel\", 2).\nHas_n_humps(\"Dromedary Camel\", 1).\n.decl Answer()\nAnswer() :- Has_n_humps(animal1, n_humps1), Has_n_humps(animal2, n_humps2), animal1 != animal2, n_humps1 > n_humps2.\n.output Answer", "completions": [".decl Has_n_humps(Animal:symbol, N_humps:float)\nHas_n_humps(\"Bactrian Camel\", 2).\nHas_n_humps(\"Dromedary Camel\", 1).\n.decl Answer()\nAnswer() :- Has_n_humps(animal1, n_humps1), Has_n_humps(animal2, n_humps2), animal1 != animal2, n_humps1 > n_humps2.\n.output Answer"]}
{"id": 595, "answer": true, "completion": ".decl Worries_about(Animal:symbol, Event:symbol)\nWorries_about(\"German Shepherds\", \"predators\").\n.decl Answer()\nAnswer() :- !Worries_about(\"German Shepherds\", \"Abitur\").\n.output Answer", "completions": [".decl Worries_about(Animal:symbol, Event:symbol)\nWorries_about(\"German Shepherds\", \"predators\").\n.decl Answer()\nAnswer() :- !Worries_about(\"German Shepherds\", \"Abitur\").\n.output Answer"]}
{"id": 596, "answer": true, "completion": ".decl Enlisted(Person:symbol, Army:symbol)\n.decl Answer()\nAnswer() :- !Enlisted(person, \"Confederate States Army\"), person = \"American\".\n.output Answer", "completions": [".decl Enlisted(Person:symbol, Army:symbol)\n.decl Answer()\nAnswer() :- !Enlisted(person, \"Confederate States Army\"), person = \"American\".\n.output Answer"]}
{"id": 597, "answer": true, "completion": ".decl Has_format(Series:symbol, Format:symbol)\nHas_format(\"James Bond\", \"action-adventure\").\nHas_format(\"Doctor Who\", \"action-adventure\").\n.decl Answer()\nAnswer() :- Has_format(\"James Bond\", format1), Has_format(\"Doctor Who\", format2), format1 = format2.\n.output Answer", "completions": [".decl Has_format(Series:symbol, Format:symbol)\nHas_format(\"James Bond\", \"action-adventure\").\nHas_format(\"Doctor Who\", \"action-adventure\").\n.decl Answer()\nAnswer() :- Has_format(\"James Bond\", format1), Has_format(\"Doctor Who\", format2), format1 = format2.\n.output Answer"]}
{"id": 598, "answer": true, "completion": ".decl Popularity(Thing:symbol, Popularity_level:float)\nPopularity(\"computer gaming\", 5).\nPopularity(\"compact discs\", 3).\n.decl Answer()\nAnswer() :- Popularity(\"computer gaming\", level1), Popularity(\"compact discs\", level2), level1 > level2.\n.output Answer", "completions": [".decl Popularity(Thing:symbol, Popularity_level:float)\nPopularity(\"computer gaming\", 5).\nPopularity(\"compact discs\", 3).\n.decl Answer()\nAnswer() :- Popularity(\"computer gaming\", level1), Popularity(\"compact discs\", level2), level1 > level2.\n.output Answer"]}
{"id": 599, "answer": false, "completion": ".decl Is_native_to(Plant:symbol, Continent:symbol)\nIs_native_to(\"potato\", \"South America\").\n.decl Answer()\nAnswer() :- !Is_native_to(\"potato\", \"Europe\").\n.output Answer", "completions": [".decl Is_native_to(Plant:symbol, Continent:symbol)\nIs_native_to(\"potato\", \"South America\").\n.decl Answer()\nAnswer() :- !Is_native_to(\"potato\", \"Europe\").\n.output Answer"]}
{"id": 600, "answer": true, "completion": ".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Contains(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.output Answer", "completions": [".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Contains(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.output Answer"]}
{"id": 601, "answer": false, "completion": ".decl Has_technology(Person:symbol, Technology:symbol)\nHas_technology(\"George Washington\", \"compact disc\").\n.decl Existed_in_time(Technology:symbol, Time:symbol)\nExisted_in_time(\"compact disc\", \"1980s\").\n.decl Answer()\nAnswer() :- Has_technology(\"George Washington\", technology), Existed_in_time(technology, time), time != \"1700s\".\n.output Answer", "completions": [".decl Has_technology(Person:symbol, Technology:symbol)\nHas_technology(\"George Washington\", \"compact disc\").\n.decl Existed_in_time(Technology:symbol, Time:symbol)\nExisted_in_time(\"compact disc\", \"1980s\").\n.decl Answer()\nAnswer() :- Has_technology(\"George Washington\", technology), Existed_in_time(technology, time), time != \"1700s\".\n.output Answer"]}
{"id": 602, "answer": true, "completion": ".decl Is_innocuous(Food:symbol)\nIs_innocuous(\"apple soup\").\nIs_innocuous(\"carrot soup\").\n.decl Answer()\nAnswer() :- !Is_innocuous(\"shoe soup\").\n.output Answer", "completions": [".decl Is_innocuous(Food:symbol)\nIs_innocuous(\"apple soup\").\nIs_innocuous(\"carrot soup\").\n.decl Answer()\nAnswer() :- !Is_innocuous(\"shoe soup\").\n.output Answer"]}
{"id": 603, "answer": false, "completion": ".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Moscow Kremlin\", 27.8).\nHas_area(\"Disney Land\", 85.2).\n.decl Answer()\nAnswer() :- Has_area(\"Moscow Kremlin\", area1), Has_area(\"Disney Land\", area2), area1 <= area2.\n.output Answer", "completions": [".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Moscow Kremlin\", 27.8).\nHas_area(\"Disney Land\", 85.2).\n.decl Answer()\nAnswer() :- Has_area(\"Moscow Kremlin\", area1), Has_area(\"Disney Land\", area2), area1 <= area2.\n.output Answer"]}
{"id": 604, "answer": false, "completion": ".decl Performs_together(Person_A:symbol, Person_B:symbol)\nPerforms_together(\"Robert Plant\", \"Ernest Chataway\").\n.decl Answer()\nAnswer() :- Performs_together(\"Robert Plant\", \"Ernest Chataway\").\n.output Answer", "completions": [".decl Performs_together(Person_A:symbol, Person_B:symbol)\nPerforms_together(\"Robert Plant\", \"Ernest Chataway\").\n.decl Answer()\nAnswer() :- Performs_together(\"Robert Plant\", \"Ernest Chataway\").\n.output Answer"]}
{"id": 605, "answer": true, "completion": ".decl Likes(Person:symbol, Object:symbol)\n.decl Answer()\nAnswer() :- !Likes(\"P. G. Wodehouse\", \"internet\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Object:symbol)\n.decl Answer()\nAnswer() :- !Likes(\"P. G. Wodehouse\", \"internet\").\n.output Answer"]}
{"id": 606, "answer": true, "completion": ".decl Runs_for(Person:symbol, Position:symbol)\nRuns_for(\"Harvey Milk\", \"Mayor of San Francisco\").\n.decl Answer()\nAnswer() :- !Runs_for(\"Harvey Milk\", \"Governor\").\n.output Answer", "completions": [".decl Runs_for(Person:symbol, Position:symbol)\nRuns_for(\"Harvey Milk\", \"Mayor of San Francisco\").\n.decl Answer()\nAnswer() :- !Runs_for(\"Harvey Milk\", \"Governor\").\n.output Answer"]}
{"id": 607, "answer": false, "completion": ".decl Preference(Person:symbol, Object:symbol)\nPreference(\"vegan\", \"natural bongo drum\").\n.decl Answer()\nAnswer() :- Preference(\"vegan\", \"natural bongo drum\").\n.output Answer", "completions": [".decl Preference(Person:symbol, Object:symbol)\nPreference(\"vegan\", \"natural bongo drum\").\n.decl Answer()\nAnswer() :- Preference(\"vegan\", \"natural bongo drum\").\n.output Answer"]}
{"id": 608, "answer": false, "completion": ".decl Is_legal_age(Person:symbol, Age:float)\nIs_legal_age(\"Millie Bobby Brown\", 16).\n.decl Answer()\nAnswer() :- Is_legal_age(\"Millie Bobby Brown\", age), age >= 21.\n.output Answer", "completions": [".decl Is_legal_age(Person:symbol, Age:float)\nIs_legal_age(\"Millie Bobby Brown\", 16).\n.decl Answer()\nAnswer() :- Is_legal_age(\"Millie Bobby Brown\", age), age >= 21.\n.output Answer"]}
{"id": 609, "answer": false, "completion": ".decl Is_related(Species_A:symbol, Species_B:symbol)\nIs_related(\"gorilla\", \"human\").\n.decl Answer()\nAnswer() :- Is_related(\"gorilla\", \"human\").\n.output Answer", "completions": [".decl Is_related(Species_A:symbol, Species_B:symbol)\nIs_related(\"gorilla\", \"human\").\n.decl Answer()\nAnswer() :- Is_related(\"gorilla\", \"human\").\n.output Answer"]}
{"id": 610, "answer": false, "completion": ".decl Earns_profits(Company:symbol, Profits:float)\nEarns_profits(\"Disney\", 0.8).\nEarns_profits(\"Rudyard Kipling\", 0.2).\n.decl Answer()\nAnswer() :- Earns_profits(\"Disney\", profits1), Earns_profits(\"Rudyard Kipling\", profits2), profits1 > profits2.\n.output Answer", "completions": [".decl Earns_profits(Company:symbol, Profits:float)\nEarns_profits(\"Disney\", 0.8).\nEarns_profits(\"Rudyard Kipling\", 0.2).\n.decl Answer()\nAnswer() :- Earns_profits(\"Disney\", profits1), Earns_profits(\"Rudyard Kipling\", profits2), profits1 > profits2.\n.output Answer"]}
{"id": 611, "answer": true, "completion": ".decl Believes(Person:symbol, Theory:symbol)\nBelieves(\"Lamarck\", \"inheritance of acquired characteristics\").\nBelieves(\"Darwin\", \"natural selection\").\n.decl Answer()\nAnswer() :- Believes(\"Lamarck\", theory1), Believes(\"Darwin\", theory2), theory1 != theory2.\n.output Answer", "completions": [".decl Believes(Person:symbol, Theory:symbol)\nBelieves(\"Lamarck\", \"inheritance of acquired characteristics\").\nBelieves(\"Darwin\", \"natural selection\").\n.decl Answer()\nAnswer() :- Believes(\"Lamarck\", theory1), Believes(\"Darwin\", theory2), theory1 != theory2.\n.output Answer"]}
{"id": 612, "answer": false, "completion": ".decl Is_capable_of(Person:symbol, Action:symbol)\nIs_capable_of(\"person\", \"reproduction\").\n.decl Answer()\nAnswer() :- !Is_capable_of(\"person\", \"reproduction\"), !Is_capable_of(\"person\", \"parenthood\").\n.output Answer", "completions": [".decl Is_capable_of(Person:symbol, Action:symbol)\nIs_capable_of(\"person\", \"reproduction\").\n.decl Answer()\nAnswer() :- !Is_capable_of(\"person\", \"reproduction\"), !Is_capable_of(\"person\", \"parenthood\").\n.output Answer"]}
{"id": 613, "answer": true, "completion": ".decl Has_finger_pain_tolerance(Person:symbol, Pain_tolerance:float)\nHas_finger_pain_tolerance(\"guitarist\", 5).\nHas_finger_pain_tolerance(\"average person\", 3).\n.decl Answer()\nAnswer() :- Has_finger_pain_tolerance(\"guitarist\", pain_tolerance1), Has_finger_pain_tolerance(\"average person\", pain_tolerance2), pain_tolerance1 > pain_tolerance2.\n.output Answer", "completions": [".decl Has_finger_pain_tolerance(Person:symbol, Pain_tolerance:float)\nHas_finger_pain_tolerance(\"guitarist\", 5).\nHas_finger_pain_tolerance(\"average person\", 3).\n.decl Answer()\nAnswer() :- Has_finger_pain_tolerance(\"guitarist\", pain_tolerance1), Has_finger_pain_tolerance(\"average person\", pain_tolerance2), pain_tolerance1 > pain_tolerance2.\n.output Answer"]}
{"id": 614, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Methuselah\", 969).\n.decl Has_record(Person:symbol, Record:symbol)\nHas_record(\"Methuselah\", \"oldest person\").\n.decl Answer()\nAnswer() :- Has_age(\"Methuselah\", age), age > 0.\nAnswer() :- Has_record(\"Methuselah\", record), record = \"oldest person\".\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Methuselah\", 969).\n.decl Has_record(Person:symbol, Record:symbol)\nHas_record(\"Methuselah\", \"oldest person\").\n.decl Answer()\nAnswer() :- Has_age(\"Methuselah\", age), age > 0.\nAnswer() :- Has_record(\"Methuselah\", record), record = \"oldest person\".\n.output Answer"]}
{"id": 615, "answer": false, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"person\", 900000).\n.decl Exchange_rate(Currency_A:symbol, Currency_B:symbol, Rate:float)\nExchange_rate(\"USD\", \"EUR\", 0.9).\n.decl Answer()\nAnswer() :- Has_net_worth(\"person\", net_worth), Exchange_rate(\"USD\", \"EUR\", rate), net_worth * rate >= 1000000000.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"person\", 900000).\n.decl Exchange_rate(Currency_A:symbol, Currency_B:symbol, Rate:float)\nExchange_rate(\"USD\", \"EUR\", 0.9).\n.decl Answer()\nAnswer() :- Has_net_worth(\"person\", net_worth), Exchange_rate(\"USD\", \"EUR\", rate), net_worth * rate >= 1000000000.\n.output Answer"]}
{"id": 616, "answer": true, "completion": ".decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"Jonathan Larson fans\", \"musical theatre\").\nKnows_about(\"Jonathan Larson fans\", \"HIV\").\n.decl Answer()\nAnswer() :- !Knows_about(\"Jonathan Larson fans\", \"HIV\").\n.output Answer", "completions": [".decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"Jonathan Larson fans\", \"musical theatre\").\nKnows_about(\"Jonathan Larson fans\", \"HIV\").\n.decl Answer()\nAnswer() :- !Knows_about(\"Jonathan Larson fans\", \"HIV\").\n.output Answer"]}
{"id": 617, "answer": false, "completion": ".decl Has_origin(Month:symbol, Origin:symbol)\nHas_origin(\"June\", \"mythology\").\n.decl Answer()\nAnswer() :- Has_origin(\"June\", \"mythology\").\n.output Answer", "completions": [".decl Has_origin(Month:symbol, Origin:symbol)\nHas_origin(\"June\", \"mythology\").\n.decl Answer()\nAnswer() :- Has_origin(\"June\", \"mythology\").\n.output Answer"]}
{"id": 618, "answer": true, "completion": ".decl Has_property(Plant:symbol, Property:symbol)\nHas_property(\"rosemary\", \"woody stem\").\nHas_property(\"lavender\", \"soft stem\").\nHas_property(\"rosemary\", \"green leaves\").\nHas_property(\"lavender\", \"grey leaves\").\nHas_property(\"rosemary\", \"blue flowers\").\nHas_property(\"lavender\", \"purple flowers\").\n.decl Answer()\nAnswer() :- Has_property(\"rosemary\", property1), Has_property(\"lavender\", property2), property1 != property2.\n.output Answer", "completions": [".decl Has_property(Plant:symbol, Property:symbol)\nHas_property(\"rosemary\", \"woody stem\").\nHas_property(\"lavender\", \"soft stem\").\nHas_property(\"rosemary\", \"green leaves\").\nHas_property(\"lavender\", \"grey leaves\").\nHas_property(\"rosemary\", \"blue flowers\").\nHas_property(\"lavender\", \"purple flowers\").\n.decl Answer()\nAnswer() :- Has_property(\"rosemary\", property1), Has_property(\"lavender\", property2), property1 != property2.\n.output Answer"]}
{"id": 619, "answer": false, "completion": ".decl Needed_for(Activity:symbol, Item:symbol)\nNeeded_for(\"sudoku\", \"pen\").\n.decl Answer()\nAnswer() :- !Needed_for(\"sudoku\", \"colored pen\").\n.output Answer", "completions": [".decl Needed_for(Activity:symbol, Item:symbol)\nNeeded_for(\"sudoku\", \"pen\").\n.decl Answer()\nAnswer() :- !Needed_for(\"sudoku\", \"colored pen\").\n.output Answer"]}
{"id": 620, "answer": false, "completion": ".decl Is_in_region(City:symbol, Region:symbol)\nIs_in_region(\"Miami\", \"Southeast\").\n.decl Is_on_coast(Region:symbol, Coast:symbol)\nIs_on_coast(\"Southeast\", \"East Coast\").\nIs_on_coast(\"West Coast\", \"West Coast\").\n.decl Answer()\nAnswer() :- Is_in_region(\"Miami\", region), Is_on_coast(region, \"West Coast\"), !Is_on_coast(region, \"East Coast\").\n.output Answer", "completions": [".decl Is_in_region(City:symbol, Region:symbol)\nIs_in_region(\"Miami\", \"Southeast\").\n.decl Is_on_coast(Region:symbol, Coast:symbol)\nIs_on_coast(\"Southeast\", \"East Coast\").\nIs_on_coast(\"West Coast\", \"West Coast\").\n.decl Answer()\nAnswer() :- Is_in_region(\"Miami\", region), Is_on_coast(region, \"West Coast\"), !Is_on_coast(region, \"East Coast\").\n.output Answer"]}
{"id": 621, "answer": true, "completion": ".decl Is_eligible(Person:symbol, Corps:symbol)\nIs_eligible(\"Stephen King\", \"NASA Astronaut Corps\").\n.decl Answer()\nAnswer() :- Is_eligible(\"Stephen King\", \"NASA Astronaut Corps\").\n.output Answer", "completions": [".decl Is_eligible(Person:symbol, Corps:symbol)\nIs_eligible(\"Stephen King\", \"NASA Astronaut Corps\").\n.decl Answer()\nAnswer() :- Is_eligible(\"Stephen King\", \"NASA Astronaut Corps\").\n.output Answer"]}
{"id": 622, "answer": true, "completion": ".decl Has_longevity(Person:symbol, Longevity:float)\nHas_longevity(\"Richard III\", 33).\nHas_longevity(\"Richard III's father\", 32).\n.decl Answer()\nAnswer() :- Has_longevity(\"Richard III\", longevity1), Has_longevity(\"Richard III's father\", longevity2), longevity2 > longevity1.\n.output Answer", "completions": [".decl Has_longevity(Person:symbol, Longevity:float)\nHas_longevity(\"Richard III\", 33).\nHas_longevity(\"Richard III's father\", 32).\n.decl Answer()\nAnswer() :- Has_longevity(\"Richard III\", longevity1), Has_longevity(\"Richard III's father\", longevity2), longevity2 > longevity1.\n.output Answer"]}
{"id": 623, "answer": false, "completion": ".decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"Starbucks passion tea\", \"ginger\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Starbucks passion tea\", \"ginger\").\n.output Answer", "completions": [".decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"Starbucks passion tea\", \"ginger\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Starbucks passion tea\", \"ginger\").\n.output Answer"]}
{"id": 624, "answer": true, "completion": ".decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.decl Answer()\nAnswer() :- Is_member_of(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.output Answer", "completions": [".decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.decl Answer()\nAnswer() :- Is_member_of(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.output Answer"]}
{"id": 625, "answer": false, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"1936 Summer Olympics\", 100000).\nHas_capacity(\"Superbowl\", 70000).\n.decl Answer()\nAnswer() :- Has_capacity(\"1936 Summer Olympics\", capacity1), Has_capacity(\"Superbowl\", capacity2), capacity1 < capacity2.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"1936 Summer Olympics\", 100000).\nHas_capacity(\"Superbowl\", 70000).\n.decl Answer()\nAnswer() :- Has_capacity(\"1936 Summer Olympics\", capacity1), Has_capacity(\"Superbowl\", capacity2), capacity1 < capacity2.\n.output Answer"]}
{"id": 626, "answer": true, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Cookie Monster\", \"cookies\").\n.decl Answer()\nAnswer() :- Likes(\"Cookie Monster\", food), food != \"Keebler products\".\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Cookie Monster\", \"cookies\").\n.decl Answer()\nAnswer() :- Likes(\"Cookie Monster\", food), food != \"Keebler products\".\n.output Answer"]}
{"id": 627, "answer": false, "completion": ".decl Supports(Person:symbol, Belief:symbol)\nSupports(\"Billy Graham\", \"Christianity\").\n.decl Answer()\nAnswer() :- !Supports(\"Billy Graham\", \"agnosticism\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Belief:symbol)\nSupports(\"Billy Graham\", \"Christianity\").\n.decl Answer()\nAnswer() :- !Supports(\"Billy Graham\", \"agnosticism\").\n.output Answer"]}
{"id": 628, "answer": true, "completion": ".decl Has_motor_control_issues(Person:symbol, Issue:symbol)\nHas_motor_control_issues(\"John\", \"fine motor control\").\n.decl Benefits_from(Person:symbol, Tool:symbol)\nBenefits_from(\"John\", \"altered keyboard layout\").\n.decl Answer()\nAnswer() :- Has_motor_control_issues(person, \"fine motor control\"), Benefits_from(person, \"altered keyboard layout\").\n.output Answer", "completions": [".decl Has_motor_control_issues(Person:symbol, Issue:symbol)\nHas_motor_control_issues(\"John\", \"fine motor control\").\n.decl Benefits_from(Person:symbol, Tool:symbol)\nBenefits_from(\"John\", \"altered keyboard layout\").\n.decl Answer()\nAnswer() :- Has_motor_control_issues(person, \"fine motor control\"), Benefits_from(person, \"altered keyboard layout\").\n.output Answer"]}
{"id": 629, "answer": true, "completion": ".decl In_season(Month:symbol, Season:symbol)\nIn_season(\"August\", \"winter\").\n.decl Answer()\nAnswer() :- In_season(\"August\", \"winter\").\n.output Answer", "completions": [".decl In_season(Month:symbol, Season:symbol)\nIn_season(\"August\", \"winter\").\n.decl Answer()\nAnswer() :- In_season(\"August\", \"winter\").\n.output Answer"]}
{"id": 630, "answer": true, "completion": ".decl Has_surveillance_capability(Item:symbol, Surveillance_capability:symbol)\nHas_surveillance_capability(\"mirror\", \"yes\").\nHas_surveillance_capability(\"clock\", \"yes\").\n.decl Answer()\nAnswer() :- Has_surveillance_capability(item, \"yes\"), !Has_surveillance_capability(\"camera\", \"yes\"), !Has_surveillance_capability(\"new item\", \"yes\").\n.output Answer", "completions": [".decl Has_surveillance_capability(Item:symbol, Surveillance_capability:symbol)\nHas_surveillance_capability(\"mirror\", \"yes\").\nHas_surveillance_capability(\"clock\", \"yes\").\n.decl Answer()\nAnswer() :- Has_surveillance_capability(item, \"yes\"), !Has_surveillance_capability(\"camera\", \"yes\"), !Has_surveillance_capability(\"new item\", \"yes\").\n.output Answer"]}
{"id": 631, "answer": false, "completion": ".decl Gives_advice(Person:symbol, Advice_type:symbol)\nGives_advice(\"Youtube viewers\", \"unsolicited audiobook advice\").\n.decl Answer()\nAnswer() :- Gives_advice(\"Youtube viewers\", \"unsolicited audiobook advice\").\n.output Answer", "completions": [".decl Gives_advice(Person:symbol, Advice_type:symbol)\nGives_advice(\"Youtube viewers\", \"unsolicited audiobook advice\").\n.decl Answer()\nAnswer() :- Gives_advice(\"Youtube viewers\", \"unsolicited audiobook advice\").\n.output Answer"]}
{"id": 632, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"shuttle Columbia 11 landing\", \"February 1, 2003\").\nHappens_in_time(\"Christmas carols\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"February\", \"winter\").\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"shuttle Columbia 11 landing\", month), Happens_in_time(\"Christmas carols\", season), In_season(month, season).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"shuttle Columbia 11 landing\", \"February 1, 2003\").\nHappens_in_time(\"Christmas carols\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"February\", \"winter\").\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"shuttle Columbia 11 landing\", month), Happens_in_time(\"Christmas carols\", season), In_season(month, season).\n.output Answer"]}
{"id": 633, "answer": false, "completion": ".decl Ruled_in_time(King:symbol, Time:symbol)\nRuled_in_time(\"English kings\", \"Middle Ages\").\n.decl Has_n_kings(Time:symbol, N_kings:float)\nHas_n_kings(\"Middle Ages\", 50).\n.decl Answer()\nAnswer() :- Ruled_in_time(\"English kings\", time), Has_n_kings(time, n_kings), n_kings = 50.\n.output Answer", "completions": [".decl Ruled_in_time(King:symbol, Time:symbol)\nRuled_in_time(\"English kings\", \"Middle Ages\").\n.decl Has_n_kings(Time:symbol, N_kings:float)\nHas_n_kings(\"Middle Ages\", 50).\n.decl Answer()\nAnswer() :- Ruled_in_time(\"English kings\", time), Has_n_kings(time, n_kings), n_kings = 50.\n.output Answer"]}
{"id": 634, "answer": true, "completion": ".decl Uses(Object:symbol, Tool:symbol)\nUses(\"frigate\", \"ropes\").\n.decl Answer()\nAnswer() :- Uses(\"frigate\", \"ropes\").\n.output Answer", "completions": [".decl Uses(Object:symbol, Tool:symbol)\nUses(\"frigate\", \"ropes\").\n.decl Answer()\nAnswer() :- Uses(\"frigate\", \"ropes\").\n.output Answer"]}
{"id": 635, "answer": true, "completion": ".decl Has_sound_level(Event:symbol, Sound_level:float)\nHas_sound_level(\"Who concert\", 100).\nHas_sound_level(\"international space station\", 0).\n.decl Answer()\nAnswer() :- Has_sound_level(\"Who concert\", sound_level1), Has_sound_level(\"international space station\", sound_level2), sound_level1 > sound_level2.\n.output Answer", "completions": [".decl Has_sound_level(Event:symbol, Sound_level:float)\nHas_sound_level(\"Who concert\", 100).\nHas_sound_level(\"international space station\", 0).\n.decl Answer()\nAnswer() :- Has_sound_level(\"Who concert\", sound_level1), Has_sound_level(\"international space station\", sound_level2), sound_level1 > sound_level2.\n.output Answer"]}
{"id": 636, "answer": true, "completion": ".decl Treats(Doctor:symbol, Problem:symbol)\nTreats(\"dentist\", \"tooth decay\").\n.decl Answer()\nAnswer() :- !Treats(\"dentist\", \"Bluetooth problems\").\n.output Answer", "completions": [".decl Treats(Doctor:symbol, Problem:symbol)\nTreats(\"dentist\", \"tooth decay\").\n.decl Answer()\nAnswer() :- !Treats(\"dentist\", \"Bluetooth problems\").\n.output Answer"]}
{"id": 637, "answer": false, "completion": ".decl Loves(Person:symbol, Food:symbol)\nLoves(\"person\", \"buffalo wings\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"buffalo wings\", \"capsaicin\").\n.decl Answer()\nAnswer() :- Loves(\"person\", food), Contains(food, \"capsaicin\").\n.output Answer", "completions": [".decl Loves(Person:symbol, Food:symbol)\nLoves(\"person\", \"buffalo wings\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"buffalo wings\", \"capsaicin\").\n.decl Answer()\nAnswer() :- Loves(\"person\", food), Contains(food, \"capsaicin\").\n.output Answer"]}
{"id": 638, "answer": true, "completion": ".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Wycheproof\", 4.2).\n.decl Has_climbing_experience(Person:symbol, Experience:float)\nHas_climbing_experience(\"Edmund Hillary\", 10).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Wycheproof\", height), Has_climbing_experience(\"Edmund Hillary\", experience), experience >= height.\n.output Answer", "completions": [".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Wycheproof\", 4.2).\n.decl Has_climbing_experience(Person:symbol, Experience:float)\nHas_climbing_experience(\"Edmund Hillary\", 10).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Wycheproof\", height), Has_climbing_experience(\"Edmund Hillary\", experience), experience >= height.\n.output Answer"]}
{"id": 639, "answer": false, "completion": ".decl Is_in_city(Person:symbol, City:symbol)\nIs_in_city(\"Person\", \"Tokyo\").\n.decl Is_in_city(Museum:symbol, City:symbol)\nIs_in_city(\"The Metropolitan Museum of Art\", \"New York City\").\n.decl Has_transportation(City_A:symbol, City_B:symbol, Transportation:symbol)\nHas_transportation(\"Tokyo\", \"New York City\", \"taxi\").\n.decl Answer()\nAnswer() :- Is_in_city(\"Person\", city1), Is_in_city(\"The Metropolitan Museum of Art\", city2), Has_transportation(city1, city2, \"taxi\").\n.output Answer", "completions": [".decl Is_in_city(Person:symbol, City:symbol)\nIs_in_city(\"Person\", \"Tokyo\").\n.decl Is_in_city(Museum:symbol, City:symbol)\nIs_in_city(\"The Metropolitan Museum of Art\", \"New York City\").\n.decl Has_transportation(City_A:symbol, City_B:symbol, Transportation:symbol)\nHas_transportation(\"Tokyo\", \"New York City\", \"taxi\").\n.decl Answer()\nAnswer() :- Is_in_city(\"Person\", city1), Is_in_city(\"The Metropolitan Museum of Art\", city2), Has_transportation(city1, city2, \"taxi\").\n.output Answer"]}
{"id": 640, "answer": false, "completion": ".decl Oversees(Organization:symbol, Service:symbol)\nOversees(\"United States Department of Education\", \"services benefiting undocumented migrants\").\n.decl Answer()\nAnswer() :- Oversees(\"United States Department of Education\", service).\n.output Answer", "completions": [".decl Oversees(Organization:symbol, Service:symbol)\nOversees(\"United States Department of Education\", \"services benefiting undocumented migrants\").\n.decl Answer()\nAnswer() :- Oversees(\"United States Department of Education\", service).\n.output Answer"]}
{"id": 641, "answer": true, "completion": ".decl Needs(Person:symbol, Item:symbol)\nNeeds(\"mail carrier\", \"uniform\").\n.decl Answer()\nAnswer() :- Needs(\"mail carrier\", \"uniform\"), !Needs(\"mail carrier\", \"uniforms\").\n.output Answer", "completions": [".decl Needs(Person:symbol, Item:symbol)\nNeeds(\"mail carrier\", \"uniform\").\n.decl Answer()\nAnswer() :- Needs(\"mail carrier\", \"uniform\"), !Needs(\"mail carrier\", \"uniforms\").\n.output Answer"]}
{"id": 642, "answer": false, "completion": ".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"21 year old\", \"doctorate\").\n.decl Answer()\nAnswer() :- Has_degree(\"21 year old\", \"doctorate\"), !Has_degree(\"21 year old\", \"PhD\").\n.output Answer", "completions": [".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"21 year old\", \"doctorate\").\n.decl Answer()\nAnswer() :- Has_degree(\"21 year old\", \"doctorate\"), !Has_degree(\"21 year old\", \"PhD\").\n.output Answer"]}
{"id": 643, "answer": true, "completion": ".decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"deaf people\", \"listening to music\").\n.decl Answer()\nAnswer() :- !Enjoys(\"deaf people\", \"listening to music\").\n.output Answer", "completions": [".decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"deaf people\", \"listening to music\").\n.decl Answer()\nAnswer() :- !Enjoys(\"deaf people\", \"listening to music\").\n.output Answer"]}
{"id": 644, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Aretha Franklin\", 18).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Aretha Franklin's second child birth\", 1955).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"presidential election\", 1956).\n.decl Answer()\nAnswer() :- Has_age(\"Aretha Franklin\", age), Happens_in_year(\"Aretha Franklin's second child birth\", year1), Happens_in_year(\"presidential election\", year2), age + year1 <= year2.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Aretha Franklin\", 18).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Aretha Franklin's second child birth\", 1955).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"presidential election\", 1956).\n.decl Answer()\nAnswer() :- Has_age(\"Aretha Franklin\", age), Happens_in_year(\"Aretha Franklin's second child birth\", year1), Happens_in_year(\"presidential election\", year2), age + year1 <= year2.\n.output Answer"]}
{"id": 645, "answer": true, "completion": ".decl Has_letter(Word:symbol, Letter:symbol)\nHas_letter(\"the\", \"t\").\nHas_letter(\"the\", \"h\").\nHas_letter(\"the\", \"e\").\nHas_letter(\"be\", \"b\").\nHas_letter(\"be\", \"e\").\n.decl Answer()\nAnswer() :- Has_letter(\"the\", \"c\"), Has_letter(\"be\", \"c\").\n.output Answer", "completions": [".decl Has_letter(Word:symbol, Letter:symbol)\nHas_letter(\"the\", \"t\").\nHas_letter(\"the\", \"h\").\nHas_letter(\"the\", \"e\").\nHas_letter(\"be\", \"b\").\nHas_letter(\"be\", \"e\").\n.decl Answer()\nAnswer() :- Has_letter(\"the\", \"c\"), Has_letter(\"be\", \"c\").\n.output Answer"]}
{"id": 646, "answer": true, "completion": ".decl Has_language_ability(Animal:symbol, Ability:float)\nHas_language_ability(\"ants\", 0).\nHas_language_ability(\"apes\", 5).\n.decl Answer()\nAnswer() :- Has_language_ability(\"ants\", ability1), Has_language_ability(\"apes\", ability2), ability1 < ability2.\n.output Answer", "completions": [".decl Has_language_ability(Animal:symbol, Ability:float)\nHas_language_ability(\"ants\", 0).\nHas_language_ability(\"apes\", 5).\n.decl Answer()\nAnswer() :- Has_language_ability(\"ants\", ability1), Has_language_ability(\"apes\", ability2), ability1 < ability2.\n.output Answer"]}
{"id": 647, "answer": true, "completion": ".decl Breaks_down(Organ:symbol, Object:symbol)\nBreaks_down(\"small intestine\", \"food\").\n.decl Answer()\nAnswer() :- Breaks_down(\"small intestine\", object), !Breaks_down(\"small intestine\", \"cotton ball\").\n.output Answer", "completions": [".decl Breaks_down(Organ:symbol, Object:symbol)\nBreaks_down(\"small intestine\", \"food\").\n.decl Answer()\nAnswer() :- Breaks_down(\"small intestine\", object), !Breaks_down(\"small intestine\", \"cotton ball\").\n.output Answer"]}
{"id": 648, "answer": true, "completion": ".decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"hippie\", \"bummed out\").\n.decl Causes_emotion(Event:symbol, Emotion:symbol)\nCauses_emotion(\"Augustus's Pax Romana\", \"bummed out\").\n.decl Answer()\nAnswer() :- Has_emotion(\"hippie\", emotion), Causes_emotion(\"Augustus's Pax Romana\", emotion).\n.output Answer", "completions": [".decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"hippie\", \"bummed out\").\n.decl Causes_emotion(Event:symbol, Emotion:symbol)\nCauses_emotion(\"Augustus's Pax Romana\", \"bummed out\").\n.decl Answer()\nAnswer() :- Has_emotion(\"hippie\", emotion), Causes_emotion(\"Augustus's Pax Romana\", emotion).\n.output Answer"]}
{"id": 649, "answer": true, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"John Lennon\", \"musician\").\n.decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"John Lennon\", \"knight\").\n.decl Answer()\nAnswer() :- Has_profession(person, \"musician\"), Has_title(person, \"knight\").\n.output Answer", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"John Lennon\", \"musician\").\n.decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"John Lennon\", \"knight\").\n.decl Answer()\nAnswer() :- Has_profession(person, \"musician\"), Has_title(person, \"knight\").\n.output Answer"]}
{"id": 650, "answer": false, "completion": ".decl Has_temperature(Season:symbol, Temperature:float)\nHas_temperature(\"winter\", -10).\nHas_temperature(\"winter\", 30).\n.decl Answer()\nAnswer() :- Has_temperature(\"winter\", temperature), temperature > 0.\n.output Answer", "completions": [".decl Has_temperature(Season:symbol, Temperature:float)\nHas_temperature(\"winter\", -10).\nHas_temperature(\"winter\", 30).\n.decl Answer()\nAnswer() :- Has_temperature(\"winter\", temperature), temperature > 0.\n.output Answer"]}
{"id": 651, "answer": false, "completion": ".decl Is_safe_for(Food:symbol, Disease:symbol)\nIs_safe_for(\"All Purpose Flour\", \"celiac disease\").\n.decl Answer()\nAnswer() :- Is_safe_for(\"All Purpose Flour\", \"celiac disease\").\n.output Answer", "completions": [".decl Is_safe_for(Food:symbol, Disease:symbol)\nIs_safe_for(\"All Purpose Flour\", \"celiac disease\").\n.decl Answer()\nAnswer() :- Is_safe_for(\"All Purpose Flour\", \"celiac disease\").\n.output Answer"]}
{"id": 652, "answer": true, "completion": ".decl Has_hair_color(Person:symbol, Color:symbol)\nHas_hair_color(\"you\", \"black\").\n.decl Needs_bleach(Color_from:symbol, Color_to:symbol)\nNeeds_bleach(\"black\", \"red\").\n.decl Answer()\nAnswer() :- Has_hair_color(\"you\", color1), Needs_bleach(color1, \"red\").\n.output Answer", "completions": [".decl Has_hair_color(Person:symbol, Color:symbol)\nHas_hair_color(\"you\", \"black\").\n.decl Needs_bleach(Color_from:symbol, Color_to:symbol)\nNeeds_bleach(\"black\", \"red\").\n.decl Answer()\nAnswer() :- Has_hair_color(\"you\", color1), Needs_bleach(color1, \"red\").\n.output Answer"]}
{"id": 653, "answer": false, "completion": ".decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"water\", \"beach\").\nIs_near(\"beach\", \"park\").\nIs_near(\"park\", \"playground\").\n.decl Is_shouted(Name:symbol, Location:symbol)\nIs_shouted(\"Marco Polo\", \"playground\").\n.decl Answer()\nAnswer() :- Is_shouted(\"Marco Polo\", location1), Is_near(location1, location2), Is_near(location2, \"water\").\n.output Answer", "completions": [".decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"water\", \"beach\").\nIs_near(\"beach\", \"park\").\nIs_near(\"park\", \"playground\").\n.decl Is_shouted(Name:symbol, Location:symbol)\nIs_shouted(\"Marco Polo\", \"playground\").\n.decl Answer()\nAnswer() :- Is_shouted(\"Marco Polo\", location1), Is_near(location1, location2), Is_near(location2, \"water\").\n.output Answer"]}
{"id": 654, "answer": true, "completion": ".decl Uses(Person_or_Group:symbol, Software:symbol)\nUses(\"Metallica\", \"Spotify\").\n.decl Answer()\nAnswer() :- !Uses(\"Metallica\", \"Soulseek\").\n.output Answer", "completions": [".decl Uses(Person_or_Group:symbol, Software:symbol)\nUses(\"Metallica\", \"Spotify\").\n.decl Answer()\nAnswer() :- !Uses(\"Metallica\", \"Soulseek\").\n.output Answer"]}
{"id": 655, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"R. Kelly\", \"songwriting\").\n.decl Is_required_for(Skill:symbol, Task:symbol)\nIs_required_for(\"songwriting\", \"writing a college thesis\").\n.decl Answer()\nAnswer() :- Has_skill(\"R. Kelly\", skill), Is_required_for(skill, \"writing a college thesis\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"R. Kelly\", \"songwriting\").\n.decl Is_required_for(Skill:symbol, Task:symbol)\nIs_required_for(\"songwriting\", \"writing a college thesis\").\n.decl Answer()\nAnswer() :- Has_skill(\"R. Kelly\", skill), Is_required_for(skill, \"writing a college thesis\").\n.output Answer"]}
{"id": 656, "answer": true, "completion": ".decl Has_event(Event:symbol, Side:symbol)\nHas_event(\"touchdown\", \"Honduras\").\nHas_event(\"touchdown\", \"El Salvador\").\n.decl Happened_during(Event:symbol, War:symbol)\nHappened_during(\"touchdown\", \"Football War\").\n.decl Answer()\nAnswer() :- Has_event(event, side), Happened_during(event, \"Football War\").\n.output Answer", "completions": [".decl Has_event(Event:symbol, Side:symbol)\nHas_event(\"touchdown\", \"Honduras\").\nHas_event(\"touchdown\", \"El Salvador\").\n.decl Happened_during(Event:symbol, War:symbol)\nHappened_during(\"touchdown\", \"Football War\").\n.decl Answer()\nAnswer() :- Has_event(event, side), Happened_during(event, \"Football War\").\n.output Answer"]}
{"id": 657, "answer": true, "completion": ".decl Is_type_of_company(Company:symbol, Type:symbol)\nIs_type_of_company(\"Canon Inc.\", \"Kabushiki gaisha\").\n.decl Answer()\nAnswer() :- Is_type_of_company(\"Canon Inc.\", \"Kabushiki gaisha\").\n.output Answer", "completions": [".decl Is_type_of_company(Company:symbol, Type:symbol)\nIs_type_of_company(\"Canon Inc.\", \"Kabushiki gaisha\").\n.decl Answer()\nAnswer() :- Is_type_of_company(\"Canon Inc.\", \"Kabushiki gaisha\").\n.output Answer"]}
{"id": 658, "answer": true, "completion": ".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"death of Amy Winehouse\", \"alcoholism\").\nCauses(\"alcoholism\", \"paparazzi\").\n.decl Answer()\nAnswer() :- Causes(\"death of Amy Winehouse\", \"paparazzi\").\n.output Answer", "completions": [".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"death of Amy Winehouse\", \"alcoholism\").\nCauses(\"alcoholism\", \"paparazzi\").\n.decl Answer()\nAnswer() :- Causes(\"death of Amy Winehouse\", \"paparazzi\").\n.output Answer"]}
{"id": 659, "answer": false, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"giant armadillo\", 2.5).\n.decl Has_length_of_ruler(Ruler:symbol, Length_of_ruler:float)\nHas_length_of_ruler(\"average ruler\", 0.3).\n.decl Answer()\nAnswer() :- Has_length(\"giant armadillo\", length1), Has_length_of_ruler(\"average ruler\", length2), length1 > length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"giant armadillo\", 2.5).\n.decl Has_length_of_ruler(Ruler:symbol, Length_of_ruler:float)\nHas_length_of_ruler(\"average ruler\", 0.3).\n.decl Answer()\nAnswer() :- Has_length(\"giant armadillo\", length1), Has_length_of_ruler(\"average ruler\", length2), length1 > length2.\n.output Answer"]}
{"id": 660, "answer": false, "completion": ".decl Has_tenure(Person:symbol, Tenure:float)\nHas_tenure(\"Drew Carey\", 20).\nHas_tenure(\"Doug Davidson\", 40).\n.decl Answer()\nAnswer() :- Has_tenure(\"Drew Carey\", tenure1), Has_tenure(\"Doug Davidson\", tenure2), tenure1 < tenure2.\n.output Answer", "completions": [".decl Has_tenure(Person:symbol, Tenure:float)\nHas_tenure(\"Drew Carey\", 20).\nHas_tenure(\"Doug Davidson\", 40).\n.decl Answer()\nAnswer() :- Has_tenure(\"Drew Carey\", tenure1), Has_tenure(\"Doug Davidson\", tenure2), tenure1 < tenure2.\n.output Answer"]}
{"id": 661, "answer": false, "completion": ".decl Has_feeling(Object:symbol, Feeling:symbol)\nHas_feeling(\"embalmed bodies\", \"cold\").\n.decl Answer()\nAnswer() :- Has_feeling(\"embalmed bodies\", feeling), feeling != \"warm\".\n.output Answer", "completions": [".decl Has_feeling(Object:symbol, Feeling:symbol)\nHas_feeling(\"embalmed bodies\", \"cold\").\n.decl Answer()\nAnswer() :- Has_feeling(\"embalmed bodies\", feeling), feeling != \"warm\".\n.output Answer"]}
{"id": 662, "answer": true, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Naruto escape\", \"Konoha\").\nHappens_in_location(\"Temple of Doom\", \"Valley of the End\").\n.decl Answer()\nAnswer() :- !Happens_in_location(\"Naruto escape\", \"Temple of Doom\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Naruto escape\", \"Konoha\").\nHappens_in_location(\"Temple of Doom\", \"Valley of the End\").\n.decl Answer()\nAnswer() :- !Happens_in_location(\"Naruto escape\", \"Temple of Doom\").\n.output Answer"]}
{"id": 663, "answer": true, "completion": ".decl Is_on_diet(Person:symbol, Diet:symbol)\nIs_on_diet(\"you\", \"low-calorie\").\n.decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"McDonald's lunch\", 500).\n.decl Answer()\nAnswer() :- Is_on_diet(\"you\", diet), Has_calories(\"McDonald's lunch\", calories), diet = \"low-calorie\", calories > 500.\n.output Answer", "completions": [".decl Is_on_diet(Person:symbol, Diet:symbol)\nIs_on_diet(\"you\", \"low-calorie\").\n.decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"McDonald's lunch\", 500).\n.decl Answer()\nAnswer() :- Is_on_diet(\"you\", diet), Has_calories(\"McDonald's lunch\", calories), diet = \"low-calorie\", calories > 500.\n.output Answer"]}
{"id": 664, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Dodo\", 3).\nHas_height(\"Ma Petite\", 0.5).\n.decl Answer()\nAnswer() :- Has_height(\"Dodo\", height1), Has_height(\"Ma Petite\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Dodo\", 3).\nHas_height(\"Ma Petite\", 0.5).\n.decl Answer()\nAnswer() :- Has_height(\"Dodo\", height1), Has_height(\"Ma Petite\", height2), height1 > height2.\n.output Answer"]}
{"id": 665, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"black and white prison uniforms\", \"black and white\").\nHas_color(\"zebra\", \"black and white\").\n.decl Answer()\nAnswer() :- Has_color(\"black and white prison uniforms\", color1), Has_color(\"zebra\", color2), color1 = color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"black and white prison uniforms\", \"black and white\").\nHas_color(\"zebra\", \"black and white\").\n.decl Answer()\nAnswer() :- Has_color(\"black and white prison uniforms\", color1), Has_color(\"zebra\", color2), color1 = color2.\n.output Answer"]}
{"id": 666, "answer": true, "completion": ".decl Has_song(Artist:symbol, Song:symbol)\nHas_song(\"Pink Floyd\", \"The French Riviera\").\n.decl Answer()\nAnswer() :- Has_song(\"Pink Floyd\", \"The French Riviera\").\n.output Answer", "completions": [".decl Has_song(Artist:symbol, Song:symbol)\nHas_song(\"Pink Floyd\", \"The French Riviera\").\n.decl Answer()\nAnswer() :- Has_song(\"Pink Floyd\", \"The French Riviera\").\n.output Answer"]}
{"id": 667, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Drow\", 6.5).\nHas_height(\"The Hobbit's hero\", 4).\n.decl Answer()\nAnswer() :- Has_height(\"Drow\", height1), Has_height(\"The Hobbit's hero\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Drow\", 6.5).\nHas_height(\"The Hobbit's hero\", 4).\n.decl Answer()\nAnswer() :- Has_height(\"Drow\", height1), Has_height(\"The Hobbit's hero\", height2), height1 > height2.\n.output Answer"]}
{"id": 668, "answer": true, "completion": ".decl Likes(Person:symbol, Place:symbol)\nLikes(\"E.T. the Extra-Terrestrial\", \"Friendly's\").\n.decl Answer()\nAnswer() :- Likes(\"E.T. the Extra-Terrestrial\", \"Friendly's\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Place:symbol)\nLikes(\"E.T. the Extra-Terrestrial\", \"Friendly's\").\n.decl Answer()\nAnswer() :- Likes(\"E.T. the Extra-Terrestrial\", \"Friendly's\").\n.output Answer"]}
{"id": 669, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"quadragenarian\", 40).\n.decl Has_memory_capacity(Person:symbol, Memory_capacity:float)\nHas_memory_capacity(\"quadragenarian\", 0.5).\n.decl Answer()\nAnswer() :- Has_age(\"quadragenarian\", age), age >= 40, Has_memory_capacity(\"quadragenarian\", memory_capacity), memory_capacity < 1.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"quadragenarian\", 40).\n.decl Has_memory_capacity(Person:symbol, Memory_capacity:float)\nHas_memory_capacity(\"quadragenarian\", 0.5).\n.decl Answer()\nAnswer() :- Has_age(\"quadragenarian\", age), age >= 40, Has_memory_capacity(\"quadragenarian\", memory_capacity), memory_capacity < 1.\n.output Answer"]}
{"id": 670, "answer": true, "completion": ".decl Participated_in_war(Country:symbol, War:symbol)\nParticipated_in_war(\"Switzerland\", \"WWII\").\nParticipated_in_war(\"Portugal\", \"Portuguese Colonial War\").\n.decl Answer()\nAnswer() :- Participated_in_war(country, \"Portuguese Colonial War\"), Participated_in_war(country, \"WWII\").\n.output Answer", "completions": [".decl Participated_in_war(Country:symbol, War:symbol)\nParticipated_in_war(\"Switzerland\", \"WWII\").\nParticipated_in_war(\"Portugal\", \"Portuguese Colonial War\").\n.decl Answer()\nAnswer() :- Participated_in_war(country, \"Portuguese Colonial War\"), Participated_in_war(country, \"WWII\").\n.output Answer"]}
{"id": 671, "answer": false, "completion": ".decl Has_gender_configuration(Group:symbol, Configuration:symbol)\nHas_gender_configuration(\"ABBA\", \"2M2F\").\nHas_gender_configuration(\"The Mamas & The Papas\", \"2M2F\").\n.decl Answer()\nAnswer() :- Has_gender_configuration(\"ABBA\", configuration), Has_gender_configuration(\"The Mamas & The Papas\", configuration).\n.output Answer", "completions": [".decl Has_gender_configuration(Group:symbol, Configuration:symbol)\nHas_gender_configuration(\"ABBA\", \"2M2F\").\nHas_gender_configuration(\"The Mamas & The Papas\", \"2M2F\").\n.decl Answer()\nAnswer() :- Has_gender_configuration(\"ABBA\", configuration), Has_gender_configuration(\"The Mamas & The Papas\", configuration).\n.output Answer"]}
{"id": 672, "answer": true, "completion": ".decl Has_emmy_awards(Person:symbol, N_awards:float)\nHas_emmy_awards(\"Brian Cranston\", 4).\nHas_emmy_awards(\"Saoirse Ronan\", 0).\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\n.decl Answer()\nAnswer() :- Has_emmy_awards(\"Brian Cranston\", n_awards1), Has_emmy_awards(\"Saoirse Ronan\", n_awards2), Is_prime(n_awards1 + n_awards2).\n.output Answer", "completions": [".decl Has_emmy_awards(Person:symbol, N_awards:float)\nHas_emmy_awards(\"Brian Cranston\", 4).\nHas_emmy_awards(\"Saoirse Ronan\", 0).\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\n.decl Answer()\nAnswer() :- Has_emmy_awards(\"Brian Cranston\", n_awards1), Has_emmy_awards(\"Saoirse Ronan\", n_awards2), Is_prime(n_awards1 + n_awards2).\n.output Answer"]}
{"id": 673, "answer": true, "completion": ".decl Is_genre(Show:symbol, Genre:symbol)\nIs_genre(\"Rick and Morty\", \"animation\").\n.decl Answer()\nAnswer() :- Is_genre(\"Rick and Morty\", \"anime\").\n.output Answer", "completions": [".decl Is_genre(Show:symbol, Genre:symbol)\nIs_genre(\"Rick and Morty\", \"animation\").\n.decl Answer()\nAnswer() :- Is_genre(\"Rick and Morty\", \"anime\").\n.output Answer"]}
{"id": 674, "answer": true, "completion": ".decl Knows(Person:symbol, Subject:symbol)\nKnows(\"Siri\", \"math\").\n.decl Is_subset_of(Subject_A:symbol, Subject_B:symbol)\nIs_subset_of(\"geometry\", \"math\").\n.decl Answer()\nAnswer() :- Knows(\"Siri\", subject1), Is_subset_of(\"geometry\", subject1).\n.output Answer", "completions": [".decl Knows(Person:symbol, Subject:symbol)\nKnows(\"Siri\", \"math\").\n.decl Is_subset_of(Subject_A:symbol, Subject_B:symbol)\nIs_subset_of(\"geometry\", \"math\").\n.decl Answer()\nAnswer() :- Knows(\"Siri\", subject1), Is_subset_of(\"geometry\", subject1).\n.output Answer"]}
{"id": 675, "answer": true, "completion": ".decl Is_type_of(Thing_A:symbol, Thing_B:symbol)\nIs_type_of(\"metal\", \"rock\").\nIs_type_of(\"rock\", \"folk\").\n.decl Answer()\nAnswer() :- Is_type_of(\"metal\", \"folk\").\n.output Answer", "completions": [".decl Is_type_of(Thing_A:symbol, Thing_B:symbol)\nIs_type_of(\"metal\", \"rock\").\nIs_type_of(\"rock\", \"folk\").\n.decl Answer()\nAnswer() :- Is_type_of(\"metal\", \"folk\").\n.output Answer"]}
{"id": 676, "answer": false, "completion": ".decl Is_member_of(Person:symbol, Church:symbol)\nIs_member_of(\"Muhammed\", \"Islam\").\n.decl Answer()\nAnswer() :- !Is_member_of(\"Muhammed\", \"Uniting Church in Australia\").\n.output Answer", "completions": [".decl Is_member_of(Person:symbol, Church:symbol)\nIs_member_of(\"Muhammed\", \"Islam\").\n.decl Answer()\nAnswer() :- !Is_member_of(\"Muhammed\", \"Uniting Church in Australia\").\n.output Answer"]}
{"id": 677, "answer": true, "completion": ".decl Admires(Person_A:symbol, Person_B:symbol)\nAdmires(\"Hattori Hanzō\", \"Tokugawa Ieyasu\").\n.decl Answer()\nAnswer() :- Admires(\"Hattori Hanzō\", \"Naruto\").\n.output Answer", "completions": [".decl Admires(Person_A:symbol, Person_B:symbol)\nAdmires(\"Hattori Hanzō\", \"Tokugawa Ieyasu\").\n.decl Answer()\nAnswer() :- Admires(\"Hattori Hanzō\", \"Naruto\").\n.output Answer"]}
{"id": 678, "answer": false, "completion": ".decl Needs_passport(Country:symbol, Person:symbol)\nNeeds_passport(\"Northern Mariana Islands\", \"Mark Cuban\").\n.decl Answer()\nAnswer() :- !Needs_passport(\"Northern Mariana Islands\", \"Mark Cuban\").\n.output Answer", "completions": [".decl Needs_passport(Country:symbol, Person:symbol)\nNeeds_passport(\"Northern Mariana Islands\", \"Mark Cuban\").\n.decl Answer()\nAnswer() :- !Needs_passport(\"Northern Mariana Islands\", \"Mark Cuban\").\n.output Answer"]}
{"id": 679, "answer": false, "completion": ".decl Sees(Person_A:symbol, Person_B:symbol)\nSees(\"Link\", \"Astronomer\").\n.decl Answer()\nAnswer() :- Sees(\"Link\", \"Astronomer\").\n.output Answer", "completions": [".decl Sees(Person_A:symbol, Person_B:symbol)\nSees(\"Link\", \"Astronomer\").\n.decl Answer()\nAnswer() :- Sees(\"Link\", \"Astronomer\").\n.output Answer"]}
{"id": 680, "answer": true, "completion": ".decl Has_feature(Website:symbol, Feature:symbol)\nHas_feature(\"reddit\", \"block trolls\").\n.decl Answer()\nAnswer() :- Has_feature(\"reddit\", \"block trolls\").\n.output Answer", "completions": [".decl Has_feature(Website:symbol, Feature:symbol)\nHas_feature(\"reddit\", \"block trolls\").\n.decl Answer()\nAnswer() :- Has_feature(\"reddit\", \"block trolls\").\n.output Answer"]}
{"id": 681, "answer": true, "completion": ".decl Has_value(Currency:symbol, Value:float)\nHas_value(\"pound sterling\", 1.3).\n.decl Answer()\nAnswer() :- Has_value(\"pound sterling\", value), value > 0.\n.output Answer", "completions": [".decl Has_value(Currency:symbol, Value:float)\nHas_value(\"pound sterling\", 1.3).\n.decl Answer()\nAnswer() :- Has_value(\"pound sterling\", value), value > 0.\n.output Answer"]}
{"id": 682, "answer": false, "completion": ".decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"Federal Reserve\", \"Space Needle\").\n.decl Answer()\nAnswer() :- Is_near(\"Federal Reserve\", \"Space Needle\").\n.output Answer", "completions": [".decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"Federal Reserve\", \"Space Needle\").\n.decl Answer()\nAnswer() :- Is_near(\"Federal Reserve\", \"Space Needle\").\n.output Answer"]}
{"id": 683, "answer": false, "completion": ".decl Follows_religion(Person:symbol, Religion:symbol)\nFollows_religion(\"adherent of Zoroastrianism\", \"Zoroastrianism\").\n.decl Uses_text(Religion:symbol, Text:symbol)\nUses_text(\"Zoroastrianism\", \"Avesta\").\nUses_text(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Follows_religion(person, \"Zoroastrianism\"), Uses_text(\"Zoroastrianism\", text1), Uses_text(\"Islam\", text2), text1 != text2.\n.output Answer", "completions": [".decl Follows_religion(Person:symbol, Religion:symbol)\nFollows_religion(\"adherent of Zoroastrianism\", \"Zoroastrianism\").\n.decl Uses_text(Religion:symbol, Text:symbol)\nUses_text(\"Zoroastrianism\", \"Avesta\").\nUses_text(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Follows_religion(person, \"Zoroastrianism\"), Uses_text(\"Zoroastrianism\", text1), Uses_text(\"Islam\", text2), text1 != text2.\n.output Answer"]}
{"id": 684, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Very Large Telescope\", 8.2).\nHas_size(\"largest mountain on Earth\", 8.8).\n.decl Answer()\nAnswer() :- Has_size(\"Very Large Telescope\", size1), Has_size(\"largest mountain on Earth\", size2), size1 >= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Very Large Telescope\", 8.2).\nHas_size(\"largest mountain on Earth\", 8.8).\n.decl Answer()\nAnswer() :- Has_size(\"Very Large Telescope\", size1), Has_size(\"largest mountain on Earth\", size2), size1 >= size2.\n.output Answer"]}
{"id": 685, "answer": true, "completion": ".decl Has_effect(Plant:symbol, Effect:symbol)\nHas_effect(\"chives\", \"repel vampires\").\n.decl Answer()\nAnswer() :- Has_effect(\"chives\", \"repel vampires\").\n.output Answer", "completions": [".decl Has_effect(Plant:symbol, Effect:symbol)\nHas_effect(\"chives\", \"repel vampires\").\n.decl Answer()\nAnswer() :- Has_effect(\"chives\", \"repel vampires\").\n.output Answer"]}
{"id": 686, "answer": true, "completion": ".decl Recommends(Doctor_type:symbol, Treatment:symbol)\nRecommends(\"Homeopathy\", \"Quartz\").\nRecommends(\"Internal Medicine\", \"Quartz\").\n.decl Answer()\nAnswer() :- Recommends(\"Homeopathy\", \"Quartz\"), !Recommends(\"Internal Medicine\", \"Quartz\").\n.output Answer", "completions": [".decl Recommends(Doctor_type:symbol, Treatment:symbol)\nRecommends(\"Homeopathy\", \"Quartz\").\nRecommends(\"Internal Medicine\", \"Quartz\").\n.decl Answer()\nAnswer() :- Recommends(\"Homeopathy\", \"Quartz\"), !Recommends(\"Internal Medicine\", \"Quartz\").\n.output Answer"]}
{"id": 687, "answer": false, "completion": ".decl Can_get_virus(Object:symbol)\nCan_get_virus(\"computer\").\nCan_get_virus(\"phone\").\n.decl Answer()\nAnswer() :- !Can_get_virus(\"banana\").\n.output Answer", "completions": [".decl Can_get_virus(Object:symbol)\nCan_get_virus(\"computer\").\nCan_get_virus(\"phone\").\n.decl Answer()\nAnswer() :- !Can_get_virus(\"banana\").\n.output Answer"]}
{"id": 688, "answer": false, "completion": ".decl Has_productivity(Telescope:symbol, Productivity:float)\nHas_productivity(\"Very Large Telescope\", 10).\nHas_productivity(\"other telescope\", 5).\n.decl Answer()\nAnswer() :- Has_productivity(\"Very Large Telescope\", productivity1), Has_productivity(\"other telescope\", productivity2), productivity1 > productivity2.\n.output Answer", "completions": [".decl Has_productivity(Telescope:symbol, Productivity:float)\nHas_productivity(\"Very Large Telescope\", 10).\nHas_productivity(\"other telescope\", 5).\n.decl Answer()\nAnswer() :- Has_productivity(\"Very Large Telescope\", productivity1), Has_productivity(\"other telescope\", productivity2), productivity1 > productivity2.\n.output Answer"]}
{"id": 689, "answer": false, "completion": ".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Bohai Sea\", 10).\n.decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Liberty\", 93).\n.decl Answer()\nAnswer() :- Has_depth(\"Bohai Sea\", depth), Has_height(\"Statue of Liberty\", height), height < depth.\n.output Answer", "completions": [".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Bohai Sea\", 10).\n.decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Liberty\", 93).\n.decl Answer()\nAnswer() :- Has_depth(\"Bohai Sea\", depth), Has_height(\"Statue of Liberty\", height), height < depth.\n.output Answer"]}
{"id": 690, "answer": true, "completion": ".decl Has_trait(Animal:symbol, Trait:symbol)\nHas_trait(\"flying fish\", \"good eyesight\").\n.decl Answer()\nAnswer() :- Has_trait(\"flying fish\", \"good eyesight\").\n.output Answer", "completions": [".decl Has_trait(Animal:symbol, Trait:symbol)\nHas_trait(\"flying fish\", \"good eyesight\").\n.decl Answer()\nAnswer() :- Has_trait(\"flying fish\", \"good eyesight\").\n.output Answer"]}
{"id": 691, "answer": true, "completion": ".decl Is_good_for(Format:symbol, Image:symbol)\nIs_good_for(\"JPEG\", \"Vitruvian Man\").\n.decl Answer()\nAnswer() :- Is_good_for(\"JPEG\", \"Vitruvian Man\").\n.output Answer", "completions": [".decl Is_good_for(Format:symbol, Image:symbol)\nIs_good_for(\"JPEG\", \"Vitruvian Man\").\n.decl Answer()\nAnswer() :- Is_good_for(\"JPEG\", \"Vitruvian Man\").\n.output Answer"]}
{"id": 692, "answer": true, "completion": ".decl Knows(Person:symbol, People:symbol)\nKnows(\"Pedubastis I\", \"Egyptians\").\n.decl Answer()\nAnswer() :- !Knows(\"Pedubastis I\", \"Japanese\").\n.output Answer", "completions": [".decl Knows(Person:symbol, People:symbol)\nKnows(\"Pedubastis I\", \"Egyptians\").\n.decl Answer()\nAnswer() :- !Knows(\"Pedubastis I\", \"Japanese\").\n.output Answer"]}
{"id": 693, "answer": false, "completion": ".decl Can_help(Person_A:symbol, Person_B:symbol, Task:symbol)\nCan_help(\"Kit & Kaboodle\", person, \"Underworld gates\").\n.decl Answer()\nAnswer() :- Can_help(\"Kit & Kaboodle\", _, \"Underworld gates\").\n.output Answer", "completions": [".decl Can_help(Person_A:symbol, Person_B:symbol, Task:symbol)\nCan_help(\"Kit & Kaboodle\", person, \"Underworld gates\").\n.decl Answer()\nAnswer() :- Can_help(\"Kit & Kaboodle\", _, \"Underworld gates\").\n.output Answer"]}
{"id": 694, "answer": true, "completion": ".decl Is_deadly(Object:symbol)\nIs_deadly(\"gun\").\nIs_deadly(\"knife\").\n.decl Answer()\nAnswer() :- Is_deadly(\"ten-pin bowling pin\").\n.output Answer", "completions": [".decl Is_deadly(Object:symbol)\nIs_deadly(\"gun\").\nIs_deadly(\"knife\").\n.decl Answer()\nAnswer() :- Is_deadly(\"ten-pin bowling pin\").\n.output Answer"]}
{"id": 695, "answer": true, "completion": ".decl Precedes(Dynasty_A:symbol, Dynasty_B:symbol)\nPrecedes(\"Go\", \"Jia Sidao\").\n.decl Answer()\nAnswer() :- Precedes(\"Go\", \"Jia Sidao\").\n.output Answer", "completions": [".decl Precedes(Dynasty_A:symbol, Dynasty_B:symbol)\nPrecedes(\"Go\", \"Jia Sidao\").\n.decl Answer()\nAnswer() :- Precedes(\"Go\", \"Jia Sidao\").\n.output Answer"]}
{"id": 696, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Noah's Ark\", 8).\n.decl Answer()\nAnswer() :- Has_n_members(\"Noah's Ark\", 8).\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Noah's Ark\", 8).\n.decl Answer()\nAnswer() :- Has_n_members(\"Noah's Ark\", 8).\n.output Answer"]}
{"id": 697, "answer": false, "completion": ".decl Is_true_pope(Person:symbol)\nIs_true_pope(\"Pope John Paul II\").\n.decl Is_saint(Person:symbol)\nIs_saint(\"Pope John Paul II\").\n.decl Answer()\nAnswer() :- !Is_true_pope(person), Is_saint(person).\n.output Answer", "completions": [".decl Is_true_pope(Person:symbol)\nIs_true_pope(\"Pope John Paul II\").\n.decl Is_saint(Person:symbol)\nIs_saint(\"Pope John Paul II\").\n.decl Answer()\nAnswer() :- !Is_true_pope(person), Is_saint(person).\n.output Answer"]}
{"id": 698, "answer": false, "completion": ".decl Has_longevity(Entity:symbol, Longevity:float)\nHas_longevity(\"Northwest Airlines\", 90).\nHas_longevity(\"Betty White\", 98).\n.decl Answer()\nAnswer() :- Has_longevity(\"Northwest Airlines\", longevity1), Has_longevity(\"Betty White\", longevity2), longevity1 < longevity2.\n.output Answer", "completions": [".decl Has_longevity(Entity:symbol, Longevity:float)\nHas_longevity(\"Northwest Airlines\", 90).\nHas_longevity(\"Betty White\", 98).\n.decl Answer()\nAnswer() :- Has_longevity(\"Northwest Airlines\", longevity1), Has_longevity(\"Betty White\", longevity2), longevity1 < longevity2.\n.output Answer"]}
{"id": 699, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"bitcoin\", 0).\nHas_size(\"pocket\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"bitcoin\", size1), Has_size(\"pocket\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"bitcoin\", 0).\nHas_size(\"pocket\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"bitcoin\", size1), Has_size(\"pocket\", size2), size1 <= size2.\n.output Answer"]}
{"id": 700, "answer": true, "completion": ".decl Reads(Person:symbol, Author:symbol)\nReads(\"Queen Elizabeth I\", \"William Shakespeare\").\n.decl Answer()\nAnswer() :- !Reads(\"Queen Elizabeth I\", \"Jean-Paul Sartre\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Author:symbol)\nReads(\"Queen Elizabeth I\", \"William Shakespeare\").\n.decl Answer()\nAnswer() :- !Reads(\"Queen Elizabeth I\", \"Jean-Paul Sartre\").\n.output Answer"]}
{"id": 701, "answer": false, "completion": ".decl Has_appearance(Object:symbol, Appearance:symbol)\nHas_appearance(\"anatomical heart\", \"realistic\").\nHas_appearance(\"symbolic heart\", \"abstract\").\n.decl Answer()\nAnswer() :- Has_appearance(\"anatomical heart\", appearance1), Has_appearance(\"symbolic heart\", appearance2), appearance1 != appearance2.\n.output Answer", "completions": [".decl Has_appearance(Object:symbol, Appearance:symbol)\nHas_appearance(\"anatomical heart\", \"realistic\").\nHas_appearance(\"symbolic heart\", \"abstract\").\n.decl Answer()\nAnswer() :- Has_appearance(\"anatomical heart\", appearance1), Has_appearance(\"symbolic heart\", appearance2), appearance1 != appearance2.\n.output Answer"]}
{"id": 702, "answer": false, "completion": ".decl Is_in_region(Entity:symbol, Region:symbol)\nIs_in_region(\"Riksdag\", \"Scandinavia\").\n.decl Is_political_entity(Entity:symbol)\nIs_political_entity(\"Riksdag\").\n.decl Answer()\nAnswer() :- Is_in_region(\"Riksdag\", \"Scandinavia\"), Is_political_entity(\"Riksdag\").\n.output Answer", "completions": [".decl Is_in_region(Entity:symbol, Region:symbol)\nIs_in_region(\"Riksdag\", \"Scandinavia\").\n.decl Is_political_entity(Entity:symbol)\nIs_political_entity(\"Riksdag\").\n.decl Answer()\nAnswer() :- Is_in_region(\"Riksdag\", \"Scandinavia\"), Is_political_entity(\"Riksdag\").\n.output Answer"]}
{"id": 703, "answer": false, "completion": ".decl Is_liquid(Food:symbol)\nIs_liquid(\"soup\").\n.decl Is_solid(Food:symbol)\nIs_solid(\"ice cream\").\n.decl Answer()\nAnswer() :- Is_liquid(food), Is_solid(food).\n.output Answer", "completions": [".decl Is_liquid(Food:symbol)\nIs_liquid(\"soup\").\n.decl Is_solid(Food:symbol)\nIs_solid(\"ice cream\").\n.decl Answer()\nAnswer() :- Is_liquid(food), Is_solid(food).\n.output Answer"]}
{"id": 704, "answer": true, "completion": ".decl Is_Greek(Person:symbol)\nIs_Greek(\"Mary, mother of Jesus\").\n.decl Prays_to(Person:symbol, Deity:symbol)\nPrays_to(\"Mary, mother of Jesus\", \"God\").\n.decl Answer()\nAnswer() :- Is_Greek(\"Mary, mother of Jesus\"), Prays_to(\"Mary, mother of Jesus\", \"Artemis\").\n.output Answer", "completions": [".decl Is_Greek(Person:symbol)\nIs_Greek(\"Mary, mother of Jesus\").\n.decl Prays_to(Person:symbol, Deity:symbol)\nPrays_to(\"Mary, mother of Jesus\", \"God\").\n.decl Answer()\nAnswer() :- Is_Greek(\"Mary, mother of Jesus\"), Prays_to(\"Mary, mother of Jesus\", \"Artemis\").\n.output Answer"]}
{"id": 705, "answer": false, "completion": ".decl Sends_letter(Person:symbol, Place:symbol)\nSends_letter(\"children\", \"North Pole\").\n.decl Answer()\nAnswer() :- !Sends_letter(\"children\", \"South Pole\").\n.output Answer", "completions": [".decl Sends_letter(Person:symbol, Place:symbol)\nSends_letter(\"children\", \"North Pole\").\n.decl Answer()\nAnswer() :- !Sends_letter(\"children\", \"South Pole\").\n.output Answer"]}
{"id": 706, "answer": false, "completion": ".decl Fights(Person_A:symbol, Person_B:symbol)\nFights(\"Jack Dempsey\", \"Gene Tunney\").\nFights(\"Deontay Wilder\", \"Tyson Fury\").\n.decl Answer()\nAnswer() :- Fights(\"Jack Dempsey\", person), Fights(\"Deontay Wilder\", person).\n.output Answer", "completions": [".decl Fights(Person_A:symbol, Person_B:symbol)\nFights(\"Jack Dempsey\", \"Gene Tunney\").\nFights(\"Deontay Wilder\", \"Tyson Fury\").\n.decl Answer()\nAnswer() :- Fights(\"Jack Dempsey\", person), Fights(\"Deontay Wilder\", person).\n.output Answer"]}
{"id": 707, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Peter Griffin\", \"cooking\").\n.decl Is_expert(Person:symbol, Skill:symbol)\nIs_expert(\"Peter Griffin\", \"cooking\").\n.decl Answer()\nAnswer() :- Has_skill(\"Peter Griffin\", \"brewing\"), Is_expert(\"Peter Griffin\", \"brewing\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Peter Griffin\", \"cooking\").\n.decl Is_expert(Person:symbol, Skill:symbol)\nIs_expert(\"Peter Griffin\", \"cooking\").\n.decl Answer()\nAnswer() :- Has_skill(\"Peter Griffin\", \"brewing\"), Is_expert(\"Peter Griffin\", \"brewing\").\n.output Answer"]}
{"id": 708, "answer": true, "completion": ".decl Can_transport(Object:symbol, Vehicle:symbol)\nCan_transport(\"primate\", \"car\").\nCan_transport(\"primate\", \"plane\").\nCan_transport(\"primate\", \"boat\").\n.decl Answer()\nAnswer() :- Can_transport(\"primate\", \"backpack\").\n.output Answer", "completions": [".decl Can_transport(Object:symbol, Vehicle:symbol)\nCan_transport(\"primate\", \"car\").\nCan_transport(\"primate\", \"plane\").\nCan_transport(\"primate\", \"boat\").\n.decl Answer()\nAnswer() :- Can_transport(\"primate\", \"backpack\").\n.output Answer"]}
{"id": 709, "answer": false, "completion": ".decl Has_album_sales(Artist:symbol, Album_sales:float)\nHas_album_sales(\"AC/DC\", 100).\nHas_album_sales(\"Lil Wayne\", 50).\n.decl Cost_of_bomber(Bomber:symbol, Cost:float)\nCost_of_bomber(\"B-52\", 1000000).\n.decl Answer()\nAnswer() :- Has_album_sales(\"AC/DC\", album_sales1), Has_album_sales(\"Lil Wayne\", album_sales2), Cost_of_bomber(\"B-52\", cost), album_sales1 > album_sales2 * cost.\n.output Answer", "completions": [".decl Has_album_sales(Artist:symbol, Album_sales:float)\nHas_album_sales(\"AC/DC\", 100).\nHas_album_sales(\"Lil Wayne\", 50).\n.decl Cost_of_bomber(Bomber:symbol, Cost:float)\nCost_of_bomber(\"B-52\", 1000000).\n.decl Answer()\nAnswer() :- Has_album_sales(\"AC/DC\", album_sales1), Has_album_sales(\"Lil Wayne\", album_sales2), Cost_of_bomber(\"B-52\", cost), album_sales1 > album_sales2 * cost.\n.output Answer"]}
{"id": 710, "answer": true, "completion": ".decl Has_genre(Artist:symbol, Genre:symbol)\nHas_genre(\"Ludacris\", \"hip hop\").\nHas_genre(\"2000's Binaural\", \"alternative rock\").\n.decl Answer()\nAnswer() :- Has_genre(\"Ludacris\", genre1), Has_genre(\"2000's Binaural\", genre2), genre1 = genre2.\n.output Answer", "completions": [".decl Has_genre(Artist:symbol, Genre:symbol)\nHas_genre(\"Ludacris\", \"hip hop\").\nHas_genre(\"2000's Binaural\", \"alternative rock\").\n.decl Answer()\nAnswer() :- Has_genre(\"Ludacris\", genre1), Has_genre(\"2000's Binaural\", genre2), genre1 = genre2.\n.output Answer"]}
{"id": 711, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Palm Beach\", 0.2).\nHas_size(\"hand\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"Palm Beach\", size1), Has_size(\"hand\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Palm Beach\", 0.2).\nHas_size(\"hand\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"Palm Beach\", size1), Has_size(\"hand\", size2), size1 <= size2.\n.output Answer"]}
{"id": 712, "answer": true, "completion": ".decl Has_shelf_life(Food:symbol, Shelf_life:float)\nHas_shelf_life(\"pickled cucumbers\", 1).\n.decl Answer()\nAnswer() :- Has_shelf_life(\"pickled cucumbers\", shelf_life), shelf_life >= 1000.\n.output Answer", "completions": [".decl Has_shelf_life(Food:symbol, Shelf_life:float)\nHas_shelf_life(\"pickled cucumbers\", 1).\n.decl Answer()\nAnswer() :- Has_shelf_life(\"pickled cucumbers\", shelf_life), shelf_life >= 1000.\n.output Answer"]}
{"id": 713, "answer": false, "completion": ".decl Believes(Person:symbol, Theory:symbol)\nBelieves(\"Flat Earthers\", \"Flat Earth Theory\").\n.decl Doubts(Person:symbol, Fact:symbol)\nDoubts(\"Flat Earthers\", \"Earth's magnetic field\").\n.decl Answer()\nAnswer() :- Believes(person, \"Flat Earth Theory\"), Doubts(person, \"Earth's magnetic field\").\n.output Answer", "completions": [".decl Believes(Person:symbol, Theory:symbol)\nBelieves(\"Flat Earthers\", \"Flat Earth Theory\").\n.decl Doubts(Person:symbol, Fact:symbol)\nDoubts(\"Flat Earthers\", \"Earth's magnetic field\").\n.decl Answer()\nAnswer() :- Believes(person, \"Flat Earth Theory\"), Doubts(person, \"Earth's magnetic field\").\n.output Answer"]}
{"id": 714, "answer": true, "completion": ".decl Needs(Animal:symbol, Food:symbol)\nNeeds(\"Lolcat\", \"cat food\").\n.decl Answer()\nAnswer() :- !Needs(\"Lolcat\", \"food\").\n.output Answer", "completions": [".decl Needs(Animal:symbol, Food:symbol)\nNeeds(\"Lolcat\", \"cat food\").\n.decl Answer()\nAnswer() :- !Needs(\"Lolcat\", \"food\").\n.output Answer"]}
{"id": 715, "answer": false, "completion": ".decl Has_boiling_point(Element:symbol, Boiling_point:float)\nHas_boiling_point(\"nickel\", 2732).\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"outer core of the earth\", 5500).\n.decl Answer()\nAnswer() :- Has_boiling_point(\"nickel\", boiling_point), Has_temperature(\"outer core of the earth\", temperature), boiling_point <= temperature.\n.output Answer", "completions": [".decl Has_boiling_point(Element:symbol, Boiling_point:float)\nHas_boiling_point(\"nickel\", 2732).\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"outer core of the earth\", 5500).\n.decl Answer()\nAnswer() :- Has_boiling_point(\"nickel\", boiling_point), Has_temperature(\"outer core of the earth\", temperature), boiling_point <= temperature.\n.output Answer"]}
{"id": 716, "answer": true, "completion": ".decl Found_in_waters(Fish:symbol, Country:symbol)\nFound_in_waters(\"brown rock fish\", \"Saint Kitts and Nevis\").\n.decl Answer()\nAnswer() :- Found_in_waters(\"brown rock fish\", \"Saint Kitts and Nevis\").\n.output Answer", "completions": [".decl Found_in_waters(Fish:symbol, Country:symbol)\nFound_in_waters(\"brown rock fish\", \"Saint Kitts and Nevis\").\n.decl Answer()\nAnswer() :- Found_in_waters(\"brown rock fish\", \"Saint Kitts and Nevis\").\n.output Answer"]}
{"id": 717, "answer": true, "completion": ".decl Has_n_fridays(Year:float, N_fridays:float)\nHas_n_fridays(2015, 52).\nHas_n_fridays(2014, 53).\n.decl Answer()\nAnswer() :- Has_n_fridays(2015, n_fridays1), Has_n_fridays(2014, n_fridays2), n_fridays1 < n_fridays2.\n.output Answer", "completions": [".decl Has_n_fridays(Year:float, N_fridays:float)\nHas_n_fridays(2015, 52).\nHas_n_fridays(2014, 53).\n.decl Answer()\nAnswer() :- Has_n_fridays(2015, n_fridays1), Has_n_fridays(2014, n_fridays2), n_fridays1 < n_fridays2.\n.output Answer"]}
{"id": 718, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"cell\", 0.00001).\nHas_size(\"shoebox\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"cell\", size1), Has_size(\"shoebox\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"cell\", 0.00001).\nHas_size(\"shoebox\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"cell\", size1), Has_size(\"shoebox\", size2), size1 <= size2.\n.output Answer"]}
{"id": 719, "answer": false, "completion": ".decl Has_qualification(Person:symbol, Qualification:symbol)\nHas_qualification(\"John Smith\", \"numerology\").\n.decl Is_member(Person:symbol, Society:symbol)\nIs_member(\"John Smith\", \"Royal Society\").\n.decl Answer()\nAnswer() :- Has_qualification(person, \"numerology\"), Is_member(person, \"Royal Society\").\n.output Answer", "completions": [".decl Has_qualification(Person:symbol, Qualification:symbol)\nHas_qualification(\"John Smith\", \"numerology\").\n.decl Is_member(Person:symbol, Society:symbol)\nIs_member(\"John Smith\", \"Royal Society\").\n.decl Answer()\nAnswer() :- Has_qualification(person, \"numerology\"), Is_member(person, \"Royal Society\").\n.output Answer"]}
{"id": 720, "answer": false, "completion": ".decl Moves(Object:symbol, Motion:symbol)\nMoves(\"bodies\", \"hanging\").\n.decl Answer()\nAnswer() :- Moves(\"bodies\", \"hanging\").\n.output Answer", "completions": [".decl Moves(Object:symbol, Motion:symbol)\nMoves(\"bodies\", \"hanging\").\n.decl Answer()\nAnswer() :- Moves(\"bodies\", \"hanging\").\n.output Answer"]}
{"id": 721, "answer": false, "completion": ".decl Used_for_work(Animal:symbol, Place:symbol)\nUsed_for_work(\"moose\", \"Arendelle\").\n.decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Arendelle\", \"kingdom of Arendelle\").\n.decl Answer()\nAnswer() :- Used_for_work(animal, place1), Is_near(place1, \"kingdom of Arendelle\").\n.output Answer", "completions": [".decl Used_for_work(Animal:symbol, Place:symbol)\nUsed_for_work(\"moose\", \"Arendelle\").\n.decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Arendelle\", \"kingdom of Arendelle\").\n.decl Answer()\nAnswer() :- Used_for_work(animal, place1), Is_near(place1, \"kingdom of Arendelle\").\n.output Answer"]}
{"id": 722, "answer": false, "completion": ".decl Has_letters(Roman_numeral:symbol, Letters:symbol)\nHas_letters(\"I\", \"H\").\nHas_letters(\"V\", \"H\").\nHas_letters(\"X\", \"H\").\nHas_letters(\"L\", \"H\").\nHas_letters(\"C\", \"H\").\nHas_letters(\"D\", \"H\").\nHas_letters(\"M\", \"H\").\n.decl Answer()\nAnswer() :- Has_letters(roman_numeral1, \"H\"), Has_letters(roman_numeral2, \"H\"), roman_numeral1 != roman_numeral2.\n.output Answer", "completions": [".decl Has_letters(Roman_numeral:symbol, Letters:symbol)\nHas_letters(\"I\", \"H\").\nHas_letters(\"V\", \"H\").\nHas_letters(\"X\", \"H\").\nHas_letters(\"L\", \"H\").\nHas_letters(\"C\", \"H\").\nHas_letters(\"D\", \"H\").\nHas_letters(\"M\", \"H\").\n.decl Answer()\nAnswer() :- Has_letters(roman_numeral1, \"H\"), Has_letters(roman_numeral2, \"H\"), roman_numeral1 != roman_numeral2.\n.output Answer"]}
{"id": 723, "answer": false, "completion": ".decl Is_edible(Food:symbol, Cuisine:symbol)\nIs_edible(\"pig meat\", \"Hawaiian\").\n.decl Answer()\nAnswer() :- !Is_edible(\"pig meat\", \"Hawaiian\").\n.output Answer", "completions": [".decl Is_edible(Food:symbol, Cuisine:symbol)\nIs_edible(\"pig meat\", \"Hawaiian\").\n.decl Answer()\nAnswer() :- !Is_edible(\"pig meat\", \"Hawaiian\").\n.output Answer"]}
{"id": 724, "answer": false, "completion": ".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Esperanza Base\", -50).\n.decl Is_comfortable(Temperature:float)\nIs_comfortable(temperature) :- temperature > 0.\n.decl Answer()\nAnswer() :- Has_temperature(\"Esperanza Base\", temperature), Is_comfortable(temperature).\n.output Answer", "completions": [".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Esperanza Base\", -50).\n.decl Is_comfortable(Temperature:float)\nIs_comfortable(temperature) :- temperature > 0.\n.decl Answer()\nAnswer() :- Has_temperature(\"Esperanza Base\", temperature), Is_comfortable(temperature).\n.output Answer"]}
{"id": 725, "answer": false, "completion": ".decl Has_allergy(Person:symbol, Allergen:symbol)\nHas_allergy(\"The Little Prince\", \"flowers\").\n.decl Answer()\nAnswer() :- Has_allergy(\"The Little Prince\", \"flowers\").\n.output Answer", "completions": [".decl Has_allergy(Person:symbol, Allergen:symbol)\nHas_allergy(\"The Little Prince\", \"flowers\").\n.decl Answer()\nAnswer() :- Has_allergy(\"The Little Prince\", \"flowers\").\n.output Answer"]}
{"id": 726, "answer": false, "completion": ".decl Teaches_about(Course:symbol, Topic:symbol)\nTeaches_about(\"cell biology\", \"cellular structure\").\nTeaches_about(\"cell biology\", \"cellular function\").\n.decl Answer()\nAnswer() :- !Teaches_about(\"cell biology\", \"life cycle of Al Qaeda\").\n.output Answer", "completions": [".decl Teaches_about(Course:symbol, Topic:symbol)\nTeaches_about(\"cell biology\", \"cellular structure\").\nTeaches_about(\"cell biology\", \"cellular function\").\n.decl Answer()\nAnswer() :- !Teaches_about(\"cell biology\", \"life cycle of Al Qaeda\").\n.output Answer"]}
{"id": 727, "answer": true, "completion": ".decl Has_effect(Substance:symbol, Effect:symbol)\nHas_effect(\"Coca\", \"stimulant\").\nHas_effect(\"Coca\", \"diuretic\").\n.decl Answer()\nAnswer() :- Has_effect(\"Coca\", \"stimulant\"), Has_effect(\"Coca\", \"diuretic\"), !Has_effect(\"Coca\", \"stops nosebleeds\").\n.output Answer", "completions": [".decl Has_effect(Substance:symbol, Effect:symbol)\nHas_effect(\"Coca\", \"stimulant\").\nHas_effect(\"Coca\", \"diuretic\").\n.decl Answer()\nAnswer() :- Has_effect(\"Coca\", \"stimulant\"), Has_effect(\"Coca\", \"diuretic\"), !Has_effect(\"Coca\", \"stops nosebleeds\").\n.output Answer"]}
{"id": 728, "answer": false, "completion": ".decl Votes(Person:symbol, Month:symbol)\n.decl Answer()\nAnswer() :- Votes(\"Justin Bieber\", \"October\").\n.output Answer", "completions": [".decl Votes(Person:symbol, Month:symbol)\n.decl Answer()\nAnswer() :- Votes(\"Justin Bieber\", \"October\").\n.output Answer"]}
{"id": 729, "answer": false, "completion": ".decl Uses(Person:symbol, Ingredient:symbol)\nUses(\"Gordon Ramsey\", \"salt\").\nUses(\"Gordon Ramsey\", \"pepper\").\n.decl Answer()\nAnswer() :- !Uses(\"Gordon Ramsey\", \"uranium\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Ingredient:symbol)\nUses(\"Gordon Ramsey\", \"salt\").\nUses(\"Gordon Ramsey\", \"pepper\").\n.decl Answer()\nAnswer() :- !Uses(\"Gordon Ramsey\", \"uranium\").\n.output Answer"]}
{"id": 730, "answer": false, "completion": ".decl Appreciates(Person_A:symbol, Person_B:symbol)\nAppreciates(\"Tokyo Tower designers\", \"Stephen Sauvestre\").\n.decl Answer()\nAnswer() :- Appreciates(\"Tokyo Tower designers\", \"Stephen Sauvestre\").\n.output Answer", "completions": [".decl Appreciates(Person_A:symbol, Person_B:symbol)\nAppreciates(\"Tokyo Tower designers\", \"Stephen Sauvestre\").\n.decl Answer()\nAnswer() :- Appreciates(\"Tokyo Tower designers\", \"Stephen Sauvestre\").\n.output Answer"]}
{"id": 731, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Wizard of Oz Scarecrow\", 0).\n.decl Causes_disease(Event:symbol, Disease:symbol)\nCauses_disease(\"cerebral palsy\", \"birth trauma\").\n.decl Answer()\nAnswer() :- Has_age(\"Wizard of Oz Scarecrow\", age), age < 1, Causes_disease(\"cerebral palsy\", \"birth trauma\").\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Wizard of Oz Scarecrow\", 0).\n.decl Causes_disease(Event:symbol, Disease:symbol)\nCauses_disease(\"cerebral palsy\", \"birth trauma\").\n.decl Answer()\nAnswer() :- Has_age(\"Wizard of Oz Scarecrow\", age), age < 1, Causes_disease(\"cerebral palsy\", \"birth trauma\").\n.output Answer"]}
{"id": 732, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"leap year\", 4).\n.decl Lives_for_n_years(Animal:symbol, N_years:float)\nLives_for_n_years(\"hamster\", 3).\n.decl Answer()\nAnswer() :- Lives_for_n_years(\"hamster\", n_years1), Last_n_years(\"leap year\", n_years2), n_years1 >= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"leap year\", 4).\n.decl Lives_for_n_years(Animal:symbol, N_years:float)\nLives_for_n_years(\"hamster\", 3).\n.decl Answer()\nAnswer() :- Lives_for_n_years(\"hamster\", n_years1), Last_n_years(\"leap year\", n_years2), n_years1 >= n_years2.\n.output Answer"]}
{"id": 733, "answer": false, "completion": ".decl Married_to(Person_A:symbol, Person_B:symbol)\nMarried_to(\"Johann Sebastian Bach\", \"Maria Barbara Bach\").\nMarried_to(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcke\").\n.decl Answer()\nAnswer() :- Married_to(\"Johann Sebastian Bach\", person1), Married_to(\"Johann Sebastian Bach\", person2), person1 != person2.\n.output Answer", "completions": [".decl Married_to(Person_A:symbol, Person_B:symbol)\nMarried_to(\"Johann Sebastian Bach\", \"Maria Barbara Bach\").\nMarried_to(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcke\").\n.decl Answer()\nAnswer() :- Married_to(\"Johann Sebastian Bach\", person1), Married_to(\"Johann Sebastian Bach\", person2), person1 != person2.\n.output Answer"]}
{"id": 734, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"baby gray whale\", 15).\nHas_length(\"tractor-trailer\", 20).\n.decl Answer()\nAnswer() :- Has_length(\"baby gray whale\", length1), Has_length(\"tractor-trailer\", length2), length1 < length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"baby gray whale\", 15).\nHas_length(\"tractor-trailer\", 20).\n.decl Answer()\nAnswer() :- Has_length(\"baby gray whale\", length1), Has_length(\"tractor-trailer\", length2), length1 < length2.\n.output Answer"]}
{"id": 735, "answer": false, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"black pepper\", \"ground bell peppers\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"black pepper\", \"ground bell peppers\").\n.output Answer", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"black pepper\", \"ground bell peppers\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"black pepper\", \"ground bell peppers\").\n.output Answer"]}
{"id": 736, "answer": true, "completion": ".decl Teaches(Group_A:symbol, Group_B:symbol, Skill:symbol)\nTeaches(\"Native American tribes\", \"Spaniards\", \"cultivate maize\").\n.decl Answer()\nAnswer() :- Teaches(\"Native American tribes\", \"Spaniards\", \"cultivate maize\").\n.output Answer", "completions": [".decl Teaches(Group_A:symbol, Group_B:symbol, Skill:symbol)\nTeaches(\"Native American tribes\", \"Spaniards\", \"cultivate maize\").\n.decl Answer()\nAnswer() :- Teaches(\"Native American tribes\", \"Spaniards\", \"cultivate maize\").\n.output Answer"]}
{"id": 737, "answer": false, "completion": ".decl Uses(Person:symbol, Object:symbol)\nUses(\"Sojourner Truth\", \"stairs\").\n.decl Answer()\nAnswer() :- !Uses(\"Sojourner Truth\", \"elevator\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Object:symbol)\nUses(\"Sojourner Truth\", \"stairs\").\n.decl Answer()\nAnswer() :- !Uses(\"Sojourner Truth\", \"elevator\").\n.output Answer"]}
{"id": 738, "answer": false, "completion": ".decl Can_say_hello(Person:symbol, Place:symbol)\nCan_say_hello(\"psychologist\", \"clinic\").\nCan_say_hello(\"psychologist\", \"supermarket\").\n.decl Answer()\nAnswer() :- Can_say_hello(\"psychologist\", \"supermarket\").\n.output Answer", "completions": [".decl Can_say_hello(Person:symbol, Place:symbol)\nCan_say_hello(\"psychologist\", \"clinic\").\nCan_say_hello(\"psychologist\", \"supermarket\").\n.decl Answer()\nAnswer() :- Can_say_hello(\"psychologist\", \"supermarket\").\n.output Answer"]}
{"id": 739, "answer": true, "completion": ".decl Has_rating(Movie:symbol, Rating:float)\nHas_rating(\"Hamlet\", 8.1).\nHas_rating(\"Comedy of Errors\", 7.2).\n.decl Answer()\nAnswer() :- Has_rating(\"Hamlet\", rating1), Has_rating(\"Comedy of Errors\", rating2), rating1 > rating2.\n.output Answer", "completions": [".decl Has_rating(Movie:symbol, Rating:float)\nHas_rating(\"Hamlet\", 8.1).\nHas_rating(\"Comedy of Errors\", 7.2).\n.decl Answer()\nAnswer() :- Has_rating(\"Hamlet\", rating1), Has_rating(\"Comedy of Errors\", rating2), rating1 > rating2.\n.output Answer"]}
{"id": 740, "answer": false, "completion": ".decl Has_graffiti(Location:symbol, Graffiti:symbol)\nHas_graffiti(\"Alcatraz\", \"historic\").\n.decl Answer()\nAnswer() :- Has_graffiti(\"Alcatraz\", \"historic\").\n.output Answer", "completions": [".decl Has_graffiti(Location:symbol, Graffiti:symbol)\nHas_graffiti(\"Alcatraz\", \"historic\").\n.decl Answer()\nAnswer() :- Has_graffiti(\"Alcatraz\", \"historic\").\n.output Answer"]}
{"id": 741, "answer": true, "completion": ".decl Has_speed(Runner:symbol, Speed:float)\nHas_speed(\"elite runner\", 30).\n.decl Has_length(Path:symbol, Length:float)\nHas_length(\"Pyrenees\", 500).\n.decl Answer()\nAnswer() :- Has_speed(\"elite runner\", speed), Has_length(\"Pyrenees\", length), speed * 24 >= length.\n.output Answer", "completions": [".decl Has_speed(Runner:symbol, Speed:float)\nHas_speed(\"elite runner\", 30).\n.decl Has_length(Path:symbol, Length:float)\nHas_length(\"Pyrenees\", 500).\n.decl Answer()\nAnswer() :- Has_speed(\"elite runner\", speed), Has_length(\"Pyrenees\", length), speed * 24 >= length.\n.output Answer"]}
{"id": 742, "answer": false, "completion": ".decl Visible_in_location(Object:symbol, Location:symbol)\nVisible_in_location(\"moon\", \"outdoors\").\n.decl Answer()\nAnswer() :- !Visible_in_location(\"moon\", \"Wembley Arena\").\n.output Answer", "completions": [".decl Visible_in_location(Object:symbol, Location:symbol)\nVisible_in_location(\"moon\", \"outdoors\").\n.decl Answer()\nAnswer() :- !Visible_in_location(\"moon\", \"Wembley Arena\").\n.output Answer"]}
{"id": 743, "answer": false, "completion": ".decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"first letter row of QWERTY keyboard\", \"Q\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"W\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"E\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"R\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"T\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"Y\").\n.decl Is_palindrome(Word:symbol)\nIs_palindrome(\"QWERTYTREWQ\").\n.decl Answer()\nAnswer() :- Has_letter(\"first letter row of QWERTY keyboard\", letter1), Has_letter(\"first letter row of QWERTY keyboard\", letter2), Has_letter(\"first letter row of QWERTY keyboard\", letter3), Has_letter(\"first letter row of QWERTY keyboard\", letter4), Has_letter(\"first letter row of QWERTY keyboard\", letter5), Has_letter(\"first letter row of QWERTY keyboard\", letter6), Is_palindrome(letter1 + letter2 + letter3 + letter4 + letter5 + letter6).\n.output Answer", "completions": [".decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"first letter row of QWERTY keyboard\", \"Q\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"W\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"E\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"R\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"T\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"Y\").\n.decl Is_palindrome(Word:symbol)\nIs_palindrome(\"QWERTYTREWQ\").\n.decl Answer()\nAnswer() :- Has_letter(\"first letter row of QWERTY keyboard\", letter1), Has_letter(\"first letter row of QWERTY keyboard\", letter2), Has_letter(\"first letter row of QWERTY keyboard\", letter3), Has_letter(\"first letter row of QWERTY keyboard\", letter4), Has_letter(\"first letter row of QWERTY keyboard\", letter5), Has_letter(\"first letter row of QWERTY keyboard\", letter6), Is_palindrome(letter1 + letter2 + letter3 + letter4 + letter5 + letter6).\n.output Answer"]}
{"id": 744, "answer": false, "completion": ".decl Has_been_discovered(Object:symbol, Place:symbol)\nHas_been_discovered(\"tumulus\", \"Earth\").\n.decl Answer()\nAnswer() :- !Has_been_discovered(\"tumulus\", \"Mars\").\n.output Answer", "completions": [".decl Has_been_discovered(Object:symbol, Place:symbol)\nHas_been_discovered(\"tumulus\", \"Earth\").\n.decl Answer()\nAnswer() :- !Has_been_discovered(\"tumulus\", \"Mars\").\n.output Answer"]}
{"id": 745, "answer": true, "completion": ".decl Represents(Symbol:symbol, Meaning:symbol)\nRepresents(\"Pan\", \"virtue\").\nRepresents(\"Pan\", \"virginity\").\n.decl Answer()\nAnswer() :- Represents(\"Pan\", \"virtue\"), Represents(\"Pan\", \"virginity\").\n.output Answer", "completions": [".decl Represents(Symbol:symbol, Meaning:symbol)\nRepresents(\"Pan\", \"virtue\").\nRepresents(\"Pan\", \"virginity\").\n.decl Answer()\nAnswer() :- Represents(\"Pan\", \"virtue\"), Represents(\"Pan\", \"virginity\").\n.output Answer"]}
{"id": 746, "answer": false, "completion": ".decl Holds_position(Person:symbol, Position:symbol, Year:float)\n.decl Answer()\nAnswer() :- !Holds_position(\"Justin Bieber\", \"Mike Pence's position\", 2020).\n.output Answer", "completions": [".decl Holds_position(Person:symbol, Position:symbol, Year:float)\n.decl Answer()\nAnswer() :- !Holds_position(\"Justin Bieber\", \"Mike Pence's position\", 2020).\n.output Answer"]}
{"id": 747, "answer": true, "completion": ".decl Has_title(Song:symbol, Title:symbol)\nHas_title(\"Diamonds Are Forever\", \"Diamonds Are Forever\").\n.decl Answer()\nAnswer() :- Has_title(\"Diamonds Are Forever\", \"Diamonds Are Forever\").\n.output Answer", "completions": [".decl Has_title(Song:symbol, Title:symbol)\nHas_title(\"Diamonds Are Forever\", \"Diamonds Are Forever\").\n.decl Answer()\nAnswer() :- Has_title(\"Diamonds Are Forever\", \"Diamonds Are Forever\").\n.output Answer"]}
{"id": 748, "answer": false, "completion": ".decl Has_winner(Event:symbol, Winner:symbol)\nHas_winner(\"French Revolution\", \"France\").\n.decl Answer()\nAnswer() :- Has_winner(\"French Revolution\", \"France\").\n.output Answer", "completions": [".decl Has_winner(Event:symbol, Winner:symbol)\nHas_winner(\"French Revolution\", \"France\").\n.decl Answer()\nAnswer() :- Has_winner(\"French Revolution\", \"France\").\n.output Answer"]}
{"id": 749, "answer": false, "completion": ".decl Is_legal(Game:symbol, Platform:symbol)\nIs_legal(\"classic nintendo games\", \"emulator\").\n.decl Answer()\nAnswer() :- Is_legal(\"classic nintendo games\", \"emulator\").\n.output Answer", "completions": [".decl Is_legal(Game:symbol, Platform:symbol)\nIs_legal(\"classic nintendo games\", \"emulator\").\n.decl Answer()\nAnswer() :- Is_legal(\"classic nintendo games\", \"emulator\").\n.output Answer"]}
{"id": 750, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Jason\", 4).\n.decl Has_n_players(Team:symbol, N_players:float)\nHas_n_players(\"polo team\", 4).\n.decl Answer()\nAnswer() :- Has_n_children(\"Jason\", n_children), Has_n_players(\"polo team\", n_players), n_children >= n_players.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Jason\", 4).\n.decl Has_n_players(Team:symbol, N_players:float)\nHas_n_players(\"polo team\", 4).\n.decl Answer()\nAnswer() :- Has_n_children(\"Jason\", n_children), Has_n_players(\"polo team\", n_players), n_children >= n_players.\n.output Answer"]}
{"id": 751, "answer": true, "completion": ".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Tony Bennett\", \"Dominic\").\nHas_middle_name(\"Conor McGregor\", \"Dominic\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Tony Bennett\", middle_name), Has_middle_name(person, middle_name), person != \"Tony Bennett\".\n.output Answer", "completions": [".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Tony Bennett\", \"Dominic\").\nHas_middle_name(\"Conor McGregor\", \"Dominic\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Tony Bennett\", middle_name), Has_middle_name(person, middle_name), person != \"Tony Bennett\".\n.output Answer"]}
{"id": 752, "answer": true, "completion": ".decl Has_ingredient(Product:symbol, Ingredient:symbol)\nHas_ingredient(\"store bought milk\", \"cream\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"store bought milk\", \"cream\").\n.output Answer", "completions": [".decl Has_ingredient(Product:symbol, Ingredient:symbol)\nHas_ingredient(\"store bought milk\", \"cream\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"store bought milk\", \"cream\").\n.output Answer"]}
{"id": 753, "answer": true, "completion": ".decl Is_important(Thing:symbol, Place:symbol)\nIs_important(\"silicon\", \"California\").\n.decl Answer()\nAnswer() :- Is_important(\"silicon\", \"California\").\n.output Answer", "completions": [".decl Is_important(Thing:symbol, Place:symbol)\nIs_important(\"silicon\", \"California\").\n.decl Answer()\nAnswer() :- Is_important(\"silicon\", \"California\").\n.output Answer"]}
{"id": 754, "answer": false, "completion": ".decl Has_word(Book:symbol, Word:symbol)\nHas_word(\"Torah\", \"love\").\nHas_word(\"Torah\", \"peace\").\nHas_word(\"Torah\", \"hope\").\n.decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"John Doe\", \"Bunkie Louisiana\").\nLives_in(\"Jane Doe\", \"Bunkie Louisiana\").\n.decl Answer()\nAnswer() :- Has_word(\"Torah\", word), Lives_in(person, \"Bunkie Louisiana\"), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "completions": [".decl Has_word(Book:symbol, Word:symbol)\nHas_word(\"Torah\", \"love\").\nHas_word(\"Torah\", \"peace\").\nHas_word(\"Torah\", \"hope\").\n.decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"John Doe\", \"Bunkie Louisiana\").\nLives_in(\"Jane Doe\", \"Bunkie Louisiana\").\n.decl Answer()\nAnswer() :- Has_word(\"Torah\", word), Lives_in(person, \"Bunkie Louisiana\"), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"]}
{"id": 755, "answer": true, "completion": ".decl Answer()\nAnswer() :- !.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !.\n.output Answer"]}
{"id": 756, "answer": true, "completion": ".decl Has_storage_capacity(Device:symbol, Storage_capacity:float)\nHas_storage_capacity(\"500GB USB device\", 500).\n.decl Has_size(Show:symbol, Size:float)\nHas_size(\"Netflix show\", 5).\n.decl Answer()\nAnswer() :- Has_storage_capacity(\"500GB USB device\", storage_capacity), Has_size(\"Netflix show\", size), storage_capacity >= 10 * size.\n.output Answer", "completions": [".decl Has_storage_capacity(Device:symbol, Storage_capacity:float)\nHas_storage_capacity(\"500GB USB device\", 500).\n.decl Has_size(Show:symbol, Size:float)\nHas_size(\"Netflix show\", 5).\n.decl Answer()\nAnswer() :- Has_storage_capacity(\"500GB USB device\", storage_capacity), Has_size(\"Netflix show\", size), storage_capacity >= 10 * size.\n.output Answer"]}
{"id": 757, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Arnold Schwarzenegger\", 80).\nHas_weight(\"adult Black rhinoceros\", 2000).\n.decl Answer()\nAnswer() :- Has_weight(\"Arnold Schwarzenegger\", weight1), Has_weight(\"adult Black rhinoceros\", weight2), weight1 < weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Arnold Schwarzenegger\", 80).\nHas_weight(\"adult Black rhinoceros\", 2000).\n.decl Answer()\nAnswer() :- Has_weight(\"Arnold Schwarzenegger\", weight1), Has_weight(\"adult Black rhinoceros\", weight2), weight1 < weight2.\n.output Answer"]}
{"id": 758, "answer": true, "completion": ".decl Produced_by(TV_show:symbol, Company:symbol)\nProduced_by(\"Star Wars: The Clone Wars\", \"Disney\").\nProduced_by(\"Star Wars: Rebels\", \"Disney\").\n.decl Answer()\nAnswer() :- Produced_by(tv_show1, \"Disney\"), Produced_by(tv_show2, \"Disney\"), tv_show1 != tv_show2.\n.output Answer", "completions": [".decl Produced_by(TV_show:symbol, Company:symbol)\nProduced_by(\"Star Wars: The Clone Wars\", \"Disney\").\nProduced_by(\"Star Wars: Rebels\", \"Disney\").\n.decl Answer()\nAnswer() :- Produced_by(tv_show1, \"Disney\"), Produced_by(tv_show2, \"Disney\"), tv_show1 != tv_show2.\n.output Answer"]}
{"id": 759, "answer": false, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Jonas Salk\", \"polio\").\n.decl Has_medicine(Disease:symbol, Medicine:symbol)\nHas_medicine(\"polio\", \"polio vaccine\").\n.decl Answer()\nAnswer() :- Has_disease(\"Jonas Salk\", disease), Has_medicine(disease, \"polio vaccine\").\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Jonas Salk\", \"polio\").\n.decl Has_medicine(Disease:symbol, Medicine:symbol)\nHas_medicine(\"polio\", \"polio vaccine\").\n.decl Answer()\nAnswer() :- Has_disease(\"Jonas Salk\", disease), Has_medicine(disease, \"polio vaccine\").\n.output Answer"]}
{"id": 760, "answer": true, "completion": ".decl Is_vegan(Person:symbol)\nIs_vegan(\"John\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"John\", \"vegetables\").\nEats(\"John\", \"fruits\").\n.decl Answer()\nAnswer() :- Is_vegan(person), !Eats(person, \"honey\").\n.output Answer", "completions": [".decl Is_vegan(Person:symbol)\nIs_vegan(\"John\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"John\", \"vegetables\").\nEats(\"John\", \"fruits\").\n.decl Answer()\nAnswer() :- Is_vegan(person), !Eats(person, \"honey\").\n.output Answer"]}
{"id": 761, "answer": true, "completion": ".decl Has_capacity(Port:symbol, Capacity:float)\nHas_capacity(\"Port of Baltimore\", 5000000).\n.decl Produces_n_tons(Product:symbol, N_tons:float)\nProduces_n_tons(\"ginger\", 1000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Port of Baltimore\", capacity), Produces_n_tons(\"ginger\", n_tons), capacity >= n_tons.\n.output Answer", "completions": [".decl Has_capacity(Port:symbol, Capacity:float)\nHas_capacity(\"Port of Baltimore\", 5000000).\n.decl Produces_n_tons(Product:symbol, N_tons:float)\nProduces_n_tons(\"ginger\", 1000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Port of Baltimore\", capacity), Produces_n_tons(\"ginger\", n_tons), capacity >= n_tons.\n.output Answer"]}
{"id": 762, "answer": true, "completion": ".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Rachel Carson\", \"biologist\").\n.decl Can_do(Ability:symbol, Action:symbol)\nCan_do(\"biologist\", \"study biology\").\nCan_do(\"astronaut\", \"fly to the moon\").\n.decl Answer()\nAnswer() :- Has_ability(\"Rachel Carson\", ability), Can_do(ability, \"fly to the moon\"), !Can_do(ability, \"fly to the moon\").\n.output Answer", "completions": [".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Rachel Carson\", \"biologist\").\n.decl Can_do(Ability:symbol, Action:symbol)\nCan_do(\"biologist\", \"study biology\").\nCan_do(\"astronaut\", \"fly to the moon\").\n.decl Answer()\nAnswer() :- Has_ability(\"Rachel Carson\", ability), Can_do(ability, \"fly to the moon\"), !Can_do(ability, \"fly to the moon\").\n.output Answer"]}
{"id": 763, "answer": true, "completion": ".decl Asks(Person_A:symbol, Person_B:symbol, Event:symbol)\nAsks(\"J. D. Salinger\", \"father\", \"quinceañera\").\n.decl Answer()\nAnswer() :- Asks(\"J. D. Salinger\", \"father\", \"quinceañera\").\n.output Answer", "completions": [".decl Asks(Person_A:symbol, Person_B:symbol, Event:symbol)\nAsks(\"J. D. Salinger\", \"father\", \"quinceañera\").\n.decl Answer()\nAnswer() :- Asks(\"J. D. Salinger\", \"father\", \"quinceañera\").\n.output Answer"]}
{"id": 764, "answer": true, "completion": ".decl Has_feature(Event:symbol, Feature:symbol)\nHas_feature(\"ancient Olympics\", \"crown\").\nHas_feature(\"tonsure\", \"haircut\").\n.decl Answer()\nAnswer() :- !Has_feature(\"ancient Olympics\", feature1), Has_feature(\"tonsure\", feature2), feature1 = feature2.\n.output Answer", "completions": [".decl Has_feature(Event:symbol, Feature:symbol)\nHas_feature(\"ancient Olympics\", \"crown\").\nHas_feature(\"tonsure\", \"haircut\").\n.decl Answer()\nAnswer() :- !Has_feature(\"ancient Olympics\", feature1), Has_feature(\"tonsure\", feature2), feature1 = feature2.\n.output Answer"]}
{"id": 765, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"ocelot\", \"bee hummingbird\").\n.decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"bee hummingbird\", 0.1).\n.decl Answer()\nAnswer() :- Eats(\"ocelot\", food), Has_calories(food, calories), calories >= 1.\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"ocelot\", \"bee hummingbird\").\n.decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"bee hummingbird\", 0.1).\n.decl Answer()\nAnswer() :- Eats(\"ocelot\", food), Has_calories(food, calories), calories >= 1.\n.output Answer"]}
{"id": 766, "answer": true, "completion": ".decl Prefers(Animal:symbol, Food:symbol)\nPrefers(\"koala\", \"eucalyptus\").\n.decl Answer()\nAnswer() :- Prefers(\"koala\", \"eucalyptus\"), !Prefers(\"koala\", \"meat\").\n.output Answer", "completions": [".decl Prefers(Animal:symbol, Food:symbol)\nPrefers(\"koala\", \"eucalyptus\").\n.decl Answer()\nAnswer() :- Prefers(\"koala\", \"eucalyptus\"), !Prefers(\"koala\", \"meat\").\n.output Answer"]}
{"id": 767, "answer": true, "completion": ".decl Has_body_part(Organism:symbol, Body_part:symbol)\nHas_body_part(\"horseradish\", \"root\").\n.decl Answer()\nAnswer() :- !Has_body_part(\"horseradish\", \"fetlock\").\n.output Answer", "completions": [".decl Has_body_part(Organism:symbol, Body_part:symbol)\nHas_body_part(\"horseradish\", \"root\").\n.decl Answer()\nAnswer() :- !Has_body_part(\"horseradish\", \"fetlock\").\n.output Answer"]}
{"id": 768, "answer": false, "completion": ".decl Answer()\nAnswer() :- !(Absolute_way_to_prevent_abortion).\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !(Absolute_way_to_prevent_abortion).\n.output Answer"]}
{"id": 769, "answer": true, "completion": ".decl Plays_music(Group:symbol, Genre:symbol)\nPlays_music(\"Rammstein\", \"metal\").\n.decl Hosts_music(Club:symbol, Genre:symbol)\nHosts_music(\"smooth jazz clubs\", \"jazz\").\n.decl Answer()\nAnswer() :- Plays_music(\"Rammstein\", genre1), Hosts_music(\"smooth jazz clubs\", genre2), genre1 != genre2.\n.output Answer", "completions": [".decl Plays_music(Group:symbol, Genre:symbol)\nPlays_music(\"Rammstein\", \"metal\").\n.decl Hosts_music(Club:symbol, Genre:symbol)\nHosts_music(\"smooth jazz clubs\", \"jazz\").\n.decl Answer()\nAnswer() :- Plays_music(\"Rammstein\", genre1), Hosts_music(\"smooth jazz clubs\", genre2), genre1 != genre2.\n.output Answer"]}
{"id": 770, "answer": false, "completion": ".decl Has_children(Person:symbol, Child:symbol)\nHas_children(\"Maya Angelou\", \"Guy Johnson\").\nHas_children(\"Maya Angelou\", \"Bojan Angelou\").\n.decl Follows_in_footsteps(Person_A:symbol, Person_B:symbol)\nFollows_in_footsteps(\"Guy Johnson\", \"Maya Angelou\").\n.decl Answer()\nAnswer() :- Has_children(\"Maya Angelou\", child), Follows_in_footsteps(child, \"Maya Angelou\").\n.output Answer", "completions": [".decl Has_children(Person:symbol, Child:symbol)\nHas_children(\"Maya Angelou\", \"Guy Johnson\").\nHas_children(\"Maya Angelou\", \"Bojan Angelou\").\n.decl Follows_in_footsteps(Person_A:symbol, Person_B:symbol)\nFollows_in_footsteps(\"Guy Johnson\", \"Maya Angelou\").\n.decl Answer()\nAnswer() :- Has_children(\"Maya Angelou\", child), Follows_in_footsteps(child, \"Maya Angelou\").\n.output Answer"]}
{"id": 771, "answer": true, "completion": ".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Alfa Romeo\", 4.5, 1.8, 1.4).\nHas_dimensions(\"barn\", 10, 10, 10).\n.decl Answer()\nAnswer() :- Has_dimensions(\"Alfa Romeo\", length1, width1, height1), Has_dimensions(\"barn\", length2, width2, height2), length1 <= length2, width1 <= width2, height1 <= height2.\n.output Answer", "completions": [".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Alfa Romeo\", 4.5, 1.8, 1.4).\nHas_dimensions(\"barn\", 10, 10, 10).\n.decl Answer()\nAnswer() :- Has_dimensions(\"Alfa Romeo\", length1, width1, height1), Has_dimensions(\"barn\", length2, width2, height2), length1 <= length2, width1 <= width2, height1 <= height2.\n.output Answer"]}
{"id": 772, "answer": false, "completion": ".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"James Watson\", \"Africans are inferior to Europeans\").\n.decl Answer()\nAnswer() :- Believes(\"James Watson\", belief).\n.output Answer", "completions": [".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"James Watson\", \"Africans are inferior to Europeans\").\n.decl Answer()\nAnswer() :- Believes(\"James Watson\", belief).\n.output Answer"]}
{"id": 773, "answer": false, "completion": ".decl Teaches(Grade:symbol, Author:symbol)\nTeaches(\"second grade\", \"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Teaches(grade, \"P. G. Wodehouse\"), !Teaches(grade, \"Dr. Seuss\").\n.output Answer", "completions": [".decl Teaches(Grade:symbol, Author:symbol)\nTeaches(\"second grade\", \"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Teaches(grade, \"P. G. Wodehouse\"), !Teaches(grade, \"Dr. Seuss\").\n.output Answer"]}
{"id": 774, "answer": true, "completion": ".decl Supports(Person:symbol, Group:symbol)\nSupports(\"Richard Wagner\", \"Nazis\").\n.decl Answer()\nAnswer() :- Supports(\"Richard Wagner\", \"Nazis\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Group:symbol)\nSupports(\"Richard Wagner\", \"Nazis\").\n.decl Answer()\nAnswer() :- Supports(\"Richard Wagner\", \"Nazis\").\n.output Answer"]}
{"id": 775, "answer": false, "completion": ".decl Recognizes(Church:symbol, Saint:symbol)\nRecognizes(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.decl Answer()\nAnswer() :- Recognizes(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.output Answer", "completions": [".decl Recognizes(Church:symbol, Saint:symbol)\nRecognizes(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.decl Answer()\nAnswer() :- Recognizes(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.output Answer"]}
{"id": 776, "answer": true, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Rock in Rio\", 50000).\n.decl Has_attendance(Event:symbol, Attendance:float)\nHas_attendance(\"Stanley Cup Finals\", 17000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Rock in Rio\", capacity), Has_attendance(\"Stanley Cup Finals\", attendance), capacity < attendance.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Rock in Rio\", 50000).\n.decl Has_attendance(Event:symbol, Attendance:float)\nHas_attendance(\"Stanley Cup Finals\", 17000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Rock in Rio\", capacity), Has_attendance(\"Stanley Cup Finals\", attendance), capacity < attendance.\n.output Answer"]}
{"id": 777, "answer": true, "completion": ".decl Sailed_for(Person:symbol, Country:symbol)\nSailed_for(\"Christopher Columbus\", \"Spain\").\n.decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"Christopher Columbus\", \"Italy\").\n.decl Answer()\nAnswer() :- Sailed_for(\"Christopher Columbus\", country1), Is_from(\"Christopher Columbus\", country2), country1 != country2.\n.output Answer", "completions": [".decl Sailed_for(Person:symbol, Country:symbol)\nSailed_for(\"Christopher Columbus\", \"Spain\").\n.decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"Christopher Columbus\", \"Italy\").\n.decl Answer()\nAnswer() :- Sailed_for(\"Christopher Columbus\", country1), Is_from(\"Christopher Columbus\", country2), country1 != country2.\n.output Answer"]}
{"id": 778, "answer": false, "completion": ".decl Has_n_digits(Number:symbol, N_digits:float)\nHas_n_digits(\"Pi\", 15).\n.decl Answer()\nAnswer() :- Has_n_digits(\"Pi\", n_digits), n_digits <= 15.\n.output Answer", "completions": [".decl Has_n_digits(Number:symbol, N_digits:float)\nHas_n_digits(\"Pi\", 15).\n.decl Answer()\nAnswer() :- Has_n_digits(\"Pi\", n_digits), n_digits <= 15.\n.output Answer"]}
{"id": 779, "answer": false, "completion": ".decl Creates(Person:symbol, Work:symbol)\nCreates(\"Steve Ditko\", \"Doctor Strange\").\nCreates(\"Bob Kane\", \"Batman\").\n.decl Answer()\nAnswer() :- Creates(person, \"Doctor Strange\"), Creates(person, \"Batman\").\n.output Answer", "completions": [".decl Creates(Person:symbol, Work:symbol)\nCreates(\"Steve Ditko\", \"Doctor Strange\").\nCreates(\"Bob Kane\", \"Batman\").\n.decl Answer()\nAnswer() :- Creates(person, \"Doctor Strange\"), Creates(person, \"Batman\").\n.output Answer"]}
{"id": 780, "answer": true, "completion": ".decl Is_dangerous(Animal:symbol, Human:symbol)\nIs_dangerous(\"hippo\", \"human\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"hippo\", \"human\").\n.output Answer", "completions": [".decl Is_dangerous(Animal:symbol, Human:symbol)\nIs_dangerous(\"hippo\", \"human\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"hippo\", \"human\").\n.output Answer"]}
{"id": 781, "answer": true, "completion": ".decl Has_origin(Activity:symbol, Origin:symbol)\nHas_origin(\"Mixed martial arts\", \"Japan\").\nHas_origin(\"Roman Colosseum games\", \"Rome\").\n.decl Answer()\nAnswer() :- Has_origin(\"Mixed martial arts\", origin1), Has_origin(\"Roman Colosseum games\", origin2), origin1 != origin2.\n.output Answer", "completions": [".decl Has_origin(Activity:symbol, Origin:symbol)\nHas_origin(\"Mixed martial arts\", \"Japan\").\nHas_origin(\"Roman Colosseum games\", \"Rome\").\n.decl Answer()\nAnswer() :- Has_origin(\"Mixed martial arts\", origin1), Has_origin(\"Roman Colosseum games\", origin2), origin1 != origin2.\n.output Answer"]}
{"id": 782, "answer": false, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Groundhog Day\", \"February\").\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"New York\", 10).\n.decl Answer()\nAnswer() :- Happens_in_month(\"Groundhog Day\", month), Has_temperature(\"New York\", temperature), temperature < 15.\n.output Answer", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Groundhog Day\", \"February\").\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"New York\", 10).\n.decl Answer()\nAnswer() :- Happens_in_month(\"Groundhog Day\", month), Has_temperature(\"New York\", temperature), temperature < 15.\n.output Answer"]}
{"id": 783, "answer": false, "completion": ".decl Talks_about(Presentation:symbol, Topic:symbol)\nTalks_about(\"presentation about post traumatic stress disorder\", \"mental health\").\n.decl Is_relevant_to(Person:symbol, Topic:symbol)\nIs_relevant_to(\"Ariana Grande\", \"mental health\").\n.decl Answer()\nAnswer() :- Talks_about(presentation, topic), Is_relevant_to(\"Ariana Grande\", topic).\n.output Answer", "completions": [".decl Talks_about(Presentation:symbol, Topic:symbol)\nTalks_about(\"presentation about post traumatic stress disorder\", \"mental health\").\n.decl Is_relevant_to(Person:symbol, Topic:symbol)\nIs_relevant_to(\"Ariana Grande\", \"mental health\").\n.decl Answer()\nAnswer() :- Talks_about(presentation, topic), Is_relevant_to(\"Ariana Grande\", topic).\n.output Answer"]}
{"id": 784, "answer": true, "completion": ".decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"All Nippon Airways headquarters\", \"Tokyo\").\nIs_near(\"Tokyo\", \"Pacific Ocean\").\nIs_near(\"Pacific Ocean\", \"beach\").\n.decl Answer()\nAnswer() :- Is_near(\"All Nippon Airways headquarters\", location1), Is_near(location1, location2), Is_near(location2, \"beach\").\n.output Answer", "completions": [".decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"All Nippon Airways headquarters\", \"Tokyo\").\nIs_near(\"Tokyo\", \"Pacific Ocean\").\nIs_near(\"Pacific Ocean\", \"beach\").\n.decl Answer()\nAnswer() :- Is_near(\"All Nippon Airways headquarters\", location1), Is_near(location1, location2), Is_near(location2, \"beach\").\n.output Answer"]}
{"id": 785, "answer": true, "completion": ".decl Has_capacity(Location:symbol, Capacity:float)\nHas_capacity(\"Gettysburg Battlefield\", 0).\n.decl Answer()\nAnswer() :- Has_capacity(\"Gettysburg Battlefield\", capacity), capacity < 1.\n.output Answer", "completions": [".decl Has_capacity(Location:symbol, Capacity:float)\nHas_capacity(\"Gettysburg Battlefield\", 0).\n.decl Answer()\nAnswer() :- Has_capacity(\"Gettysburg Battlefield\", capacity), capacity < 1.\n.output Answer"]}
{"id": 786, "answer": true, "completion": ".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Doctor Strange\", \"Pittsburgh Steelers logo\").\n.decl Answer()\nAnswer() :- Likes(\"Doctor Strange\", \"Pittsburgh Steelers logo\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Doctor Strange\", \"Pittsburgh Steelers logo\").\n.decl Answer()\nAnswer() :- Likes(\"Doctor Strange\", \"Pittsburgh Steelers logo\").\n.output Answer"]}
{"id": 787, "answer": true, "completion": ".decl Associated_with(Thing:symbol, Place:symbol)\nAssociated_with(\"Yeti\", \"Mount Everest\").\n.decl Answer()\nAnswer() :- Associated_with(\"Yeti\", \"Disney theme parks\").\n.output Answer", "completions": [".decl Associated_with(Thing:symbol, Place:symbol)\nAssociated_with(\"Yeti\", \"Mount Everest\").\n.decl Answer()\nAnswer() :- Associated_with(\"Yeti\", \"Disney theme parks\").\n.output Answer"]}
{"id": 788, "answer": false, "completion": ".decl Has_leaves(Tree:symbol, Season:symbol)\nHas_leaves(\"oak tree\", \"spring\").\nHas_leaves(\"oak tree\", \"summer\").\nHas_leaves(\"oak tree\", \"autumn\").\n.decl Answer()\nAnswer() :- Has_leaves(\"oak tree\", \"winter\").\n.output Answer", "completions": [".decl Has_leaves(Tree:symbol, Season:symbol)\nHas_leaves(\"oak tree\", \"spring\").\nHas_leaves(\"oak tree\", \"summer\").\nHas_leaves(\"oak tree\", \"autumn\").\n.decl Answer()\nAnswer() :- Has_leaves(\"oak tree\", \"winter\").\n.output Answer"]}
{"id": 789, "answer": true, "completion": ".decl Can_do(Person:symbol, Action:symbol, Age:float)\nCan_do(\"Eddie Murphy\", \"dial 911\", 5).\n.decl Is_in(Person:symbol, Place:symbol)\nIs_in(\"Eddie Murphy\", \"car\").\n.decl Answer()\nAnswer() :- Can_do(\"Eddie Murphy\", \"dial 911\", age), Is_in(\"Eddie Murphy\", \"car\"), age <= 5.\n.output Answer", "completions": [".decl Can_do(Person:symbol, Action:symbol, Age:float)\nCan_do(\"Eddie Murphy\", \"dial 911\", 5).\n.decl Is_in(Person:symbol, Place:symbol)\nIs_in(\"Eddie Murphy\", \"car\").\n.decl Answer()\nAnswer() :- Can_do(\"Eddie Murphy\", \"dial 911\", age), Is_in(\"Eddie Murphy\", \"car\"), age <= 5.\n.output Answer"]}
{"id": 790, "answer": false, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 791, "answer": true, "completion": ".decl Has_origin(Animal:symbol, Origin:symbol)\nHas_origin(\"Africanized bees\", \"Africa\").\nHas_origin(\"Africanized bees\", \"South America\").\n.decl Answer()\nAnswer() :- Has_origin(\"Africanized bees\", origin1), Has_origin(\"Africanized bees\", origin2), origin1 != origin2.\n.output Answer", "completions": [".decl Has_origin(Animal:symbol, Origin:symbol)\nHas_origin(\"Africanized bees\", \"Africa\").\nHas_origin(\"Africanized bees\", \"South America\").\n.decl Answer()\nAnswer() :- Has_origin(\"Africanized bees\", origin1), Has_origin(\"Africanized bees\", origin2), origin1 != origin2.\n.output Answer"]}
{"id": 792, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Eddie Hall\", 180).\nHas_weight(\"world's largest cheeseburger\", 350).\n.decl Answer()\nAnswer() :- Has_weight(\"Eddie Hall\", weight1), Has_weight(\"world's largest cheeseburger\", weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Eddie Hall\", 180).\nHas_weight(\"world's largest cheeseburger\", 350).\n.decl Answer()\nAnswer() :- Has_weight(\"Eddie Hall\", weight1), Has_weight(\"world's largest cheeseburger\", weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 793, "answer": true, "completion": ".decl Lives_in_environment(Animal:symbol, Environment:symbol)\nLives_in_environment(\"ocean sunfish\", \"ocean\").\nLives_in_environment(\"goldfish\", \"freshwater\").\n.decl Answer()\nAnswer() :- Lives_in_environment(animal1, environment1), Lives_in_environment(animal2, environment2), environment1 != environment2.\n.output Answer", "completions": [".decl Lives_in_environment(Animal:symbol, Environment:symbol)\nLives_in_environment(\"ocean sunfish\", \"ocean\").\nLives_in_environment(\"goldfish\", \"freshwater\").\n.decl Answer()\nAnswer() :- Lives_in_environment(animal1, environment1), Lives_in_environment(animal2, environment2), environment1 != environment2.\n.output Answer"]}
{"id": 794, "answer": true, "completion": ".decl Exports(Country:symbol, Product:symbol, Quantity:float)\nExports(\"United States\", \"Fair Trade products\", 1000).\nExports(\"China\", \"Fair Trade products\", 2000).\n.decl Answer()\nAnswer() :- Exports(\"United States\", \"Fair Trade products\", quantity1), Exports(\"China\", \"Fair Trade products\", quantity2), quantity1 < quantity2.\n.output Answer", "completions": [".decl Exports(Country:symbol, Product:symbol, Quantity:float)\nExports(\"United States\", \"Fair Trade products\", 1000).\nExports(\"China\", \"Fair Trade products\", 2000).\n.decl Answer()\nAnswer() :- Exports(\"United States\", \"Fair Trade products\", quantity1), Exports(\"China\", \"Fair Trade products\", quantity2), quantity1 < quantity2.\n.output Answer"]}
{"id": 795, "answer": true, "completion": ".decl Studies(Field:symbol, Topic:symbol)\nStudies(\"Biochemistry\", \"molecules\").\nStudies(\"Biochemistry\", \"enzymes\").\nStudies(\"Biochemistry\", \"proteins\").\n.decl Answer()\nAnswer() :- Studies(\"Biochemistry\", topic), !Studies(\"Biochemistry\", \"gluons\").\n.output Answer", "completions": [".decl Studies(Field:symbol, Topic:symbol)\nStudies(\"Biochemistry\", \"molecules\").\nStudies(\"Biochemistry\", \"enzymes\").\nStudies(\"Biochemistry\", \"proteins\").\n.decl Answer()\nAnswer() :- Studies(\"Biochemistry\", topic), !Studies(\"Biochemistry\", \"gluons\").\n.output Answer"]}
{"id": 796, "answer": true, "completion": ".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Phobos\", -20).\n.decl Needs_coat(Temperature:float)\nNeeds_coat(-20).\n.decl Answer()\nAnswer() :- Has_temperature(\"Phobos\", temperature), Needs_coat(temperature).\n.output Answer", "completions": [".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Phobos\", -20).\n.decl Needs_coat(Temperature:float)\nNeeds_coat(-20).\n.decl Answer()\nAnswer() :- Has_temperature(\"Phobos\", temperature), Needs_coat(temperature).\n.output Answer"]}
{"id": 797, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Star Trek: The Next Generation\", \"2364-2370\").\nHappens_in_time(\"history of the world\", \"prehistory-present\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Star Trek: The Next Generation\", time1), Happens_in_time(\"history of the world\", time2), time1 != time2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Star Trek: The Next Generation\", \"2364-2370\").\nHappens_in_time(\"history of the world\", \"prehistory-present\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Star Trek: The Next Generation\", time1), Happens_in_time(\"history of the world\", time2), time1 != time2.\n.output Answer"]}
{"id": 798, "answer": true, "completion": ".decl Necessary_to_know(Knowledge:symbol, Person:symbol)\nNecessary_to_know(\"watching Star Wars\", \"Darth Vader\").\n.decl Answer()\nAnswer() :- Necessary_to_know(\"watching Star Wars\", \"Darth Vader\").\n.output Answer", "completions": [".decl Necessary_to_know(Knowledge:symbol, Person:symbol)\nNecessary_to_know(\"watching Star Wars\", \"Darth Vader\").\n.decl Answer()\nAnswer() :- Necessary_to_know(\"watching Star Wars\", \"Darth Vader\").\n.output Answer"]}
{"id": 799, "answer": true, "completion": ".decl Is_available(Product:symbol, Store:symbol)\nIs_available(\"fair trade laptop\", \"Amazon\").\n.decl Answer()\nAnswer() :- Is_available(\"fair trade laptop\", store).\n.output Answer", "completions": [".decl Is_available(Product:symbol, Store:symbol)\nIs_available(\"fair trade laptop\", \"Amazon\").\n.decl Answer()\nAnswer() :- Is_available(\"fair trade laptop\", store).\n.output Answer"]}
{"id": 800, "answer": true, "completion": ".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"John Doe\", \"Doctorate\").\n.decl Requires_degree(School:symbol, Degree:symbol)\nRequires_degree(\"SUNY School\", \"Doctorate\").\n.decl Answer()\nAnswer() :- Has_degree(person, \"Doctorate\"), Requires_degree(\"SUNY School\", degree), degree = \"Doctorate\".\n.output Answer", "completions": [".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"John Doe\", \"Doctorate\").\n.decl Requires_degree(School:symbol, Degree:symbol)\nRequires_degree(\"SUNY School\", \"Doctorate\").\n.decl Answer()\nAnswer() :- Has_degree(person, \"Doctorate\"), Requires_degree(\"SUNY School\", degree), degree = \"Doctorate\".\n.output Answer"]}
{"id": 801, "answer": true, "completion": ".decl Has_subject(Work:symbol, Subject:symbol)\nHas_subject(\"Parsifal\", \"Arthurian legend\").\n.decl Is_from(Subject:symbol, Origin:symbol)\nIs_from(\"Arthurian legend\", \"British folklore\").\n.decl Answer()\nAnswer() :- Has_subject(\"Parsifal\", subject), Is_from(subject, \"British folklore\").\n.output Answer", "completions": [".decl Has_subject(Work:symbol, Subject:symbol)\nHas_subject(\"Parsifal\", \"Arthurian legend\").\n.decl Is_from(Subject:symbol, Origin:symbol)\nIs_from(\"Arthurian legend\", \"British folklore\").\n.decl Answer()\nAnswer() :- Has_subject(\"Parsifal\", subject), Is_from(subject, \"British folklore\").\n.output Answer"]}
{"id": 802, "answer": true, "completion": ".decl Is_bad_for(Food:symbol, Condition:symbol)\nIs_bad_for(\"ramen\", \"high blood pressure\").\nIs_bad_for(\"ramen\", \"heart failure\").\n.decl Answer()\nAnswer() :- Is_bad_for(\"ramen\", \"heart failure\").\n.output Answer", "completions": [".decl Is_bad_for(Food:symbol, Condition:symbol)\nIs_bad_for(\"ramen\", \"high blood pressure\").\nIs_bad_for(\"ramen\", \"heart failure\").\n.decl Answer()\nAnswer() :- Is_bad_for(\"ramen\", \"heart failure\").\n.output Answer"]}
{"id": 803, "answer": true, "completion": ".decl Can_kill(Food:symbol, Person:symbol)\nCan_kill(\"French Toast\", \"Lannister\").\n.decl Answer()\nAnswer() :- Can_kill(\"French Toast\", \"Lannister\").\n.output Answer", "completions": [".decl Can_kill(Food:symbol, Person:symbol)\nCan_kill(\"French Toast\", \"Lannister\").\n.decl Answer()\nAnswer() :- Can_kill(\"French Toast\", \"Lannister\").\n.output Answer"]}
{"id": 804, "answer": false, "completion": ".decl Is_character(Character:symbol, Show:symbol)\nIs_character(\"Maria\", \"The Sound of Music\").\n.decl Is_missionary(Character:symbol)\nIs_missionary(\"Maria\").\n.decl Is_popular(Show:symbol)\nIs_popular(\"The Sound of Music\").\n.decl Answer()\nAnswer() :- Is_character(character, show), Is_missionary(character), Is_popular(show).\n.output Answer", "completions": [".decl Is_character(Character:symbol, Show:symbol)\nIs_character(\"Maria\", \"The Sound of Music\").\n.decl Is_missionary(Character:symbol)\nIs_missionary(\"Maria\").\n.decl Is_popular(Show:symbol)\nIs_popular(\"The Sound of Music\").\n.decl Answer()\nAnswer() :- Is_character(character, show), Is_missionary(character), Is_popular(show).\n.output Answer"]}
{"id": 805, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Carmen Electra\", \"car\").\n.decl Answer()\nAnswer() :- Owns(\"Carmen Electra\", \"junk\").\n.output Answer", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Carmen Electra\", \"car\").\n.decl Answer()\nAnswer() :- Owns(\"Carmen Electra\", \"junk\").\n.output Answer"]}
{"id": 806, "answer": true, "completion": ".decl Used_in_religion(Symbol:symbol, Religion:symbol)\nUsed_in_religion(\"swastikas\", \"Hinduism\").\n.decl Most_common_religion(Country:symbol, Religion:symbol)\nMost_common_religion(\"India\", \"Hinduism\").\n.decl Answer()\nAnswer() :- Used_in_religion(\"swastikas\", religion), Most_common_religion(\"India\", religion).\n.output Answer", "completions": [".decl Used_in_religion(Symbol:symbol, Religion:symbol)\nUsed_in_religion(\"swastikas\", \"Hinduism\").\n.decl Most_common_religion(Country:symbol, Religion:symbol)\nMost_common_religion(\"India\", \"Hinduism\").\n.decl Answer()\nAnswer() :- Used_in_religion(\"swastikas\", religion), Most_common_religion(\"India\", religion).\n.output Answer"]}
{"id": 807, "answer": false, "completion": ".decl Avoids_eating(Person:symbol, Food:symbol)\nAvoids_eating(\"Malcolm X\", \"ham\").\n.decl Answer()\nAnswer() :- Avoids_eating(\"Malcolm X\", \"ham\").\n.output Answer", "completions": [".decl Avoids_eating(Person:symbol, Food:symbol)\nAvoids_eating(\"Malcolm X\", \"ham\").\n.decl Answer()\nAnswer() :- Avoids_eating(\"Malcolm X\", \"ham\").\n.output Answer"]}
{"id": 808, "answer": true, "completion": ".decl Can_do(Animal:symbol, Action:symbol)\nCan_do(\"greyhound\", \"run\").\n.decl Answer()\nAnswer() :- !Can_do(\"greyhound\", \"walk on two legs\").\n.output Answer", "completions": [".decl Can_do(Animal:symbol, Action:symbol)\nCan_do(\"greyhound\", \"run\").\n.decl Answer()\nAnswer() :- !Can_do(\"greyhound\", \"walk on two legs\").\n.output Answer"]}
{"id": 809, "answer": false, "completion": ".decl Has_grade_level(Student:symbol, Grade_level:symbol)\nHas_grade_level(\"Elementary School student\", \"Elementary School\").\n.decl Needs_calculator(Grade_level:symbol, Calculator:symbol)\nNeeds_calculator(\"Elementary School\", \"graphing calculator\").\n.decl Answer()\nAnswer() :- Has_grade_level(student, \"Elementary School\"), Needs_calculator(\"Elementary School\", \"graphing calculator\").\n.output Answer", "completions": [".decl Has_grade_level(Student:symbol, Grade_level:symbol)\nHas_grade_level(\"Elementary School student\", \"Elementary School\").\n.decl Needs_calculator(Grade_level:symbol, Calculator:symbol)\nNeeds_calculator(\"Elementary School\", \"graphing calculator\").\n.decl Answer()\nAnswer() :- Has_grade_level(student, \"Elementary School\"), Needs_calculator(\"Elementary School\", \"graphing calculator\").\n.output Answer"]}
{"id": 810, "answer": true, "completion": ".decl Is_type(Store:symbol, Type:symbol)\nIs_type(\"SnapCap\", \"retail\").\n.decl Answer()\nAnswer() :- Is_type(\"SnapCap\", \"retail\").\n.output Answer", "completions": [".decl Is_type(Store:symbol, Type:symbol)\nIs_type(\"SnapCap\", \"retail\").\n.decl Answer()\nAnswer() :- Is_type(\"SnapCap\", \"retail\").\n.output Answer"]}
{"id": 811, "answer": false, "completion": ".decl Has_weight_capacity(Vehicle:symbol, Weight_capacity:float)\nHas_weight_capacity(\"2019 Toyota Hilux\", 3200).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Big John Studd\", 300).\n.decl Answer()\nAnswer() :- Has_weight_capacity(\"2019 Toyota Hilux\", weight_capacity), Has_weight(\"Big John Studd\", weight), weight_capacity >= 30 * weight.\n.output Answer", "completions": [".decl Has_weight_capacity(Vehicle:symbol, Weight_capacity:float)\nHas_weight_capacity(\"2019 Toyota Hilux\", 3200).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Big John Studd\", 300).\n.decl Answer()\nAnswer() :- Has_weight_capacity(\"2019 Toyota Hilux\", weight_capacity), Has_weight(\"Big John Studd\", weight), weight_capacity >= 30 * weight.\n.output Answer"]}
{"id": 812, "answer": true, "completion": ".decl Has_name(Team:symbol, Name:symbol)\nHas_name(\"Toledo Mud Hens\", \"Mud Hens\").\nHas_name(\"Lehigh Valley IronPigs\", \"IronPigs\").\nHas_name(\"Jacksonville Jumbo Shrimp\", \"Jumbo Shrimp\").\n.decl Answer()\nAnswer() :- Has_name(team, name), name = \"feline\".\n.output Answer", "completions": [".decl Has_name(Team:symbol, Name:symbol)\nHas_name(\"Toledo Mud Hens\", \"Mud Hens\").\nHas_name(\"Lehigh Valley IronPigs\", \"IronPigs\").\nHas_name(\"Jacksonville Jumbo Shrimp\", \"Jumbo Shrimp\").\n.decl Answer()\nAnswer() :- Has_name(team, name), name = \"feline\".\n.output Answer"]}
{"id": 813, "answer": true, "completion": ".decl Has_senses(Object:symbol, Sense:symbol)\nHas_senses(\"telescope\", \"sight\").\n.decl Answer()\nAnswer() :- !Has_senses(\"telescope\", \"hearing\").\n.output Answer", "completions": [".decl Has_senses(Object:symbol, Sense:symbol)\nHas_senses(\"telescope\", \"sight\").\n.decl Answer()\nAnswer() :- !Has_senses(\"telescope\", \"hearing\").\n.output Answer"]}
{"id": 814, "answer": true, "completion": ".decl Has_mythical_home(Goddess:symbol, Place:symbol)\n.decl Answer()\nAnswer() :- !Has_mythical_home(\"shark goddess\", \"Pearl Harbor\").\n.output Answer", "completions": [".decl Has_mythical_home(Goddess:symbol, Place:symbol)\n.decl Answer()\nAnswer() :- !Has_mythical_home(\"shark goddess\", \"Pearl Harbor\").\n.output Answer"]}
{"id": 815, "answer": false, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"Albany, Georgia\", 80000).\nHas_population(\"Albany, New York\", 90000).\n.decl Answer()\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, New York\", population2), population1 > 100000, population2 < 100000.\n.output Answer", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"Albany, Georgia\", 80000).\nHas_population(\"Albany, New York\", 90000).\n.decl Answer()\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, New York\", population2), population1 > 100000, population2 < 100000.\n.output Answer"]}
{"id": 816, "answer": true, "completion": ".decl Has_UV_index(Location:symbol, UV_index:float)\nHas_UV_index(\"Burning Man\", 8).\nHas_UV_index(\"normal\", 5).\n.decl Answer()\nAnswer() :- Has_UV_index(\"Burning Man\", uv_index1), Has_UV_index(\"normal\", uv_index2), uv_index1 > uv_index2.\n.output Answer", "completions": [".decl Has_UV_index(Location:symbol, UV_index:float)\nHas_UV_index(\"Burning Man\", 8).\nHas_UV_index(\"normal\", 5).\n.decl Answer()\nAnswer() :- Has_UV_index(\"Burning Man\", uv_index1), Has_UV_index(\"normal\", uv_index2), uv_index1 > uv_index2.\n.output Answer"]}
{"id": 817, "answer": true, "completion": ".decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(\"Reza Shah\", \"Queen Elizabeth I\").\n.decl Answer()\nAnswer() :- Is_related(\"Reza Shah\", \"Queen Elizabeth I\").\n.output Answer", "completions": [".decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(\"Reza Shah\", \"Queen Elizabeth I\").\n.decl Answer()\nAnswer() :- Is_related(\"Reza Shah\", \"Queen Elizabeth I\").\n.output Answer"]}
{"id": 818, "answer": true, "completion": ".decl Uses_OS(Person:symbol, OS:symbol)\nUses_OS(\"focal fossa\", \"linux\").\n.decl Answer()\nAnswer() :- Uses_OS(\"focal fossa\", os), os = \"linux\".\n.output Answer", "completions": [".decl Uses_OS(Person:symbol, OS:symbol)\nUses_OS(\"focal fossa\", \"linux\").\n.decl Answer()\nAnswer() :- Uses_OS(\"focal fossa\", os), os = \"linux\".\n.output Answer"]}
{"id": 819, "answer": false, "completion": ".decl Cures(Disease:symbol, Treatment:symbol)\nCures(\"dementia\", \"medication\").\n.decl Answer()\nAnswer() :- !Cures(\"dementia\", \"cast\").\n.output Answer", "completions": [".decl Cures(Disease:symbol, Treatment:symbol)\nCures(\"dementia\", \"medication\").\n.decl Answer()\nAnswer() :- !Cures(\"dementia\", \"cast\").\n.output Answer"]}
{"id": 820, "answer": true, "completion": ".decl Has_ability(Animal:symbol, Ability:symbol)\nHas_ability(\"monkey\", \"grasping\").\n.decl Can_use(Ability:symbol, Tool:symbol)\nCan_use(\"grasping\", \"QWERTY keyboards\").\n.decl Answer()\nAnswer() :- Has_ability(\"monkey\", ability), Can_use(ability, \"QWERTY keyboards\").\n.output Answer", "completions": [".decl Has_ability(Animal:symbol, Ability:symbol)\nHas_ability(\"monkey\", \"grasping\").\n.decl Can_use(Ability:symbol, Tool:symbol)\nCan_use(\"grasping\", \"QWERTY keyboards\").\n.decl Answer()\nAnswer() :- Has_ability(\"monkey\", ability), Can_use(ability, \"QWERTY keyboards\").\n.output Answer"]}
{"id": 821, "answer": false, "completion": ".decl Is_used_for(Event:symbol, Purpose:symbol)\nIs_used_for(\"Groundhog Day\", \"season indicator\").\n.decl Is_global(Purpose:symbol)\nIs_global(\"season indicator\").\n.decl Answer()\nAnswer() :- Is_used_for(\"Groundhog Day\", purpose), Is_global(purpose).\n.output Answer", "completions": [".decl Is_used_for(Event:symbol, Purpose:symbol)\nIs_used_for(\"Groundhog Day\", \"season indicator\").\n.decl Is_global(Purpose:symbol)\nIs_global(\"season indicator\").\n.decl Answer()\nAnswer() :- Is_used_for(\"Groundhog Day\", purpose), Is_global(purpose).\n.output Answer"]}
{"id": 822, "answer": true, "completion": ".decl Depends_on(Brand:symbol, Animal:symbol)\nDepends_on(\"Nice\", \"Western honey bee\").\n.decl Answer()\nAnswer() :- Depends_on(\"Nice\", \"Western honey bee\").\n.output Answer", "completions": [".decl Depends_on(Brand:symbol, Animal:symbol)\nDepends_on(\"Nice\", \"Western honey bee\").\n.decl Answer()\nAnswer() :- Depends_on(\"Nice\", \"Western honey bee\").\n.output Answer"]}
{"id": 823, "answer": false, "completion": ".decl Patented_in(Object:symbol, Country:symbol)\nPatented_in(\"karaoke\", \"Japan\").\nPatented_in(\"turtle power tiller\", \"United States\").\n.decl Answer()\nAnswer() :- Patented_in(\"karaoke\", country1), Patented_in(\"turtle power tiller\", country2), country1 != country2.\n.output Answer", "completions": [".decl Patented_in(Object:symbol, Country:symbol)\nPatented_in(\"karaoke\", \"Japan\").\nPatented_in(\"turtle power tiller\", \"United States\").\n.decl Answer()\nAnswer() :- Patented_in(\"karaoke\", country1), Patented_in(\"turtle power tiller\", country2), country1 != country2.\n.output Answer"]}
{"id": 824, "answer": false, "completion": ".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"President of Ohio University\", \"President\").\n.decl Wears(Person:symbol, Clothing:symbol)\nWears(\"President\", \"jockstrap\").\n.decl Answer()\nAnswer() :- Has_position(\"President of Ohio University\", position), Wears(position, \"jockstrap\").\n.output Answer", "completions": [".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"President of Ohio University\", \"President\").\n.decl Wears(Person:symbol, Clothing:symbol)\nWears(\"President\", \"jockstrap\").\n.decl Answer()\nAnswer() :- Has_position(\"President of Ohio University\", position), Wears(position, \"jockstrap\").\n.output Answer"]}
{"id": 825, "answer": true, "completion": ".decl Is_parent(Person:symbol, Child:symbol)\nIs_parent(\"John\", \"Jane\").\n.decl Is_grandparent(Person:symbol, Grandchild:symbol)\nIs_grandparent(\"John\", \"Jack\").\n.decl Answer()\nAnswer() :- Is_grandparent(person, grandchild), Is_parent(person, child), Is_parent(child, grandchild).\n.output Answer", "completions": [".decl Is_parent(Person:symbol, Child:symbol)\nIs_parent(\"John\", \"Jane\").\n.decl Is_grandparent(Person:symbol, Grandchild:symbol)\nIs_grandparent(\"John\", \"Jack\").\n.decl Answer()\nAnswer() :- Is_grandparent(person, grandchild), Is_parent(person, child), Is_parent(child, grandchild).\n.output Answer"]}
{"id": 826, "answer": false, "completion": ".decl Has_pieces(Board:symbol, Pieces:symbol)\nHas_pieces(\"chess board\", \"chess pieces\").\nHas_pieces(\"Shogi board\", \"Shogi pieces\").\n.decl Answer()\nAnswer() :- Has_pieces(\"chess board\", pieces1), Has_pieces(\"Shogi board\", pieces2), pieces1 != pieces2.\n.output Answer", "completions": [".decl Has_pieces(Board:symbol, Pieces:symbol)\nHas_pieces(\"chess board\", \"chess pieces\").\nHas_pieces(\"Shogi board\", \"Shogi pieces\").\n.decl Answer()\nAnswer() :- Has_pieces(\"chess board\", pieces1), Has_pieces(\"Shogi board\", pieces2), pieces1 != pieces2.\n.output Answer"]}
{"id": 827, "answer": false, "completion": ".decl Is_alive(Person:symbol, Alive:symbol)\nIs_alive(\"Darth Vader\", \"no\").\n.decl Can_catch(Person:symbol, Virus:symbol)\nCan_catch(\"Darth Vader\", \"Coronavirus\") :- Is_alive(\"Darth Vader\", \"yes\").\n.decl Answer()\nAnswer() :- Can_catch(\"Darth Vader\", \"Coronavirus\").\n.output Answer", "completions": [".decl Is_alive(Person:symbol, Alive:symbol)\nIs_alive(\"Darth Vader\", \"no\").\n.decl Can_catch(Person:symbol, Virus:symbol)\nCan_catch(\"Darth Vader\", \"Coronavirus\") :- Is_alive(\"Darth Vader\", \"yes\").\n.decl Answer()\nAnswer() :- Can_catch(\"Darth Vader\", \"Coronavirus\").\n.output Answer"]}
{"id": 828, "answer": false, "completion": ".decl Is_part_of(Entity:symbol, Pantheon:symbol)\nIs_part_of(\"Flying Spaghetti Monster\", \"Pastafarianism\").\n.decl Is_ancient(Pantheon:symbol)\nIs_ancient(\"Greek\").\nIs_ancient(\"Roman\").\nIs_ancient(\"Egyptian\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Flying Spaghetti Monster\", pantheon), Is_ancient(pantheon).\n.output Answer", "completions": [".decl Is_part_of(Entity:symbol, Pantheon:symbol)\nIs_part_of(\"Flying Spaghetti Monster\", \"Pastafarianism\").\n.decl Is_ancient(Pantheon:symbol)\nIs_ancient(\"Greek\").\nIs_ancient(\"Roman\").\nIs_ancient(\"Egyptian\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Flying Spaghetti Monster\", pantheon), Is_ancient(pantheon).\n.output Answer"]}
{"id": 829, "answer": false, "completion": ".decl Has_place_in_alphabet(Name:symbol, Place:float)\nHas_place_in_alphabet(\"B\", 2).\nHas_place_in_alphabet(\"Prince Harry\", 6).\n.decl Answer()\nAnswer() :- Has_place_in_alphabet(\"B\", place1), Has_place_in_alphabet(\"Prince Harry\", place2), place1 = place2.\n.output Answer", "completions": [".decl Has_place_in_alphabet(Name:symbol, Place:float)\nHas_place_in_alphabet(\"B\", 2).\nHas_place_in_alphabet(\"Prince Harry\", 6).\n.decl Answer()\nAnswer() :- Has_place_in_alphabet(\"B\", place1), Has_place_in_alphabet(\"Prince Harry\", place2), place1 = place2.\n.output Answer"]}
{"id": 830, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"snake\", 0.5).\nHas_size(\"M60 Patton\", 2.5).\n.decl Answer()\nAnswer() :- Has_size(\"snake\", size1), Has_size(\"M60 Patton\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"snake\", 0.5).\nHas_size(\"M60 Patton\", 2.5).\n.decl Answer()\nAnswer() :- Has_size(\"snake\", size1), Has_size(\"M60 Patton\", size2), size1 < size2.\n.output Answer"]}
{"id": 831, "answer": true, "completion": ".decl Has_appearance(Object:symbol, Appearance:symbol)\nHas_appearance(\"chives\", \"green\").\nHas_appearance(\"grass\", \"green\").\n.decl Answer()\nAnswer() :- Has_appearance(\"chives\", appearance1), Has_appearance(\"grass\", appearance2), appearance1 = appearance2.\n.output Answer", "completions": [".decl Has_appearance(Object:symbol, Appearance:symbol)\nHas_appearance(\"chives\", \"green\").\nHas_appearance(\"grass\", \"green\").\n.decl Answer()\nAnswer() :- Has_appearance(\"chives\", appearance1), Has_appearance(\"grass\", appearance2), appearance1 = appearance2.\n.output Answer"]}
{"id": 832, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Person A\", \"Anorexia nervosa\").\n.decl Has_bone_density(Person:symbol, Bone_density:float)\nHas_bone_density(\"Person A\", 0.5).\nHas_bone_density(\"Person B\", 0.7).\n.decl Answer()\nAnswer() :- Has_condition(\"Person A\", \"Anorexia nervosa\"), Has_bone_density(\"Person A\", density1), Has_bone_density(\"Person B\", density2), density1 < density2.\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Person A\", \"Anorexia nervosa\").\n.decl Has_bone_density(Person:symbol, Bone_density:float)\nHas_bone_density(\"Person A\", 0.5).\nHas_bone_density(\"Person B\", 0.7).\n.decl Answer()\nAnswer() :- Has_condition(\"Person A\", \"Anorexia nervosa\"), Has_bone_density(\"Person A\", density1), Has_bone_density(\"Person B\", density2), density1 < density2.\n.output Answer"]}
{"id": 833, "answer": false, "completion": ".decl Has_trait(Animal:symbol, Trait:symbol)\nHas_trait(\"bull shark\", \"bull\").\nHas_trait(\"bull shark\", \"shark\").\n.decl Answer()\nAnswer() :- Has_trait(\"bull shark\", \"bull\"), Has_trait(\"bull shark\", \"shark\"), \"bull\" > \"shark\".\n.output Answer", "completions": [".decl Has_trait(Animal:symbol, Trait:symbol)\nHas_trait(\"bull shark\", \"bull\").\nHas_trait(\"bull shark\", \"shark\").\n.decl Answer()\nAnswer() :- Has_trait(\"bull shark\", \"bull\"), Has_trait(\"bull shark\", \"shark\"), \"bull\" > \"shark\".\n.output Answer"]}
{"id": 834, "answer": false, "completion": ".decl Has_president(Country:symbol, President:symbol)\nHas_president(\"United States\", \"William McKinley\").\nHas_president(\"United States\", \"Abraham Lincoln\").\n.decl Has_war(Country:symbol, War:symbol)\nHas_war(\"United States\", \"Spanish-American War\").\n.decl Has_demise(Person:symbol, Demise:symbol)\nHas_demise(\"William McKinley\", \"assassination\").\nHas_demise(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- Has_president(\"United States\", president1), Has_war(\"United States\", \"Spanish-American War\"), Has_president(\"United States\", president2), Has_demise(president1, demise1), Has_demise(president2, demise2), demise1 = demise2.\n.output Answer", "completions": [".decl Has_president(Country:symbol, President:symbol)\nHas_president(\"United States\", \"William McKinley\").\nHas_president(\"United States\", \"Abraham Lincoln\").\n.decl Has_war(Country:symbol, War:symbol)\nHas_war(\"United States\", \"Spanish-American War\").\n.decl Has_demise(Person:symbol, Demise:symbol)\nHas_demise(\"William McKinley\", \"assassination\").\nHas_demise(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- Has_president(\"United States\", president1), Has_war(\"United States\", \"Spanish-American War\"), Has_president(\"United States\", president2), Has_demise(president1, demise1), Has_demise(president2, demise2), demise1 = demise2.\n.output Answer"]}
{"id": 835, "answer": true, "completion": ".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Aretha Franklin\", \"John Lennon\").\n.decl Has_suicidal_tendencies(Person:symbol)\nHas_suicidal_tendencies(\"John Lennon\").\n.decl Answer()\nAnswer() :- Collaborates(\"Aretha Franklin\", person), Has_suicidal_tendencies(person).\n.output Answer", "completions": [".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Aretha Franklin\", \"John Lennon\").\n.decl Has_suicidal_tendencies(Person:symbol)\nHas_suicidal_tendencies(\"John Lennon\").\n.decl Answer()\nAnswer() :- Collaborates(\"Aretha Franklin\", person), Has_suicidal_tendencies(person).\n.output Answer"]}
{"id": 836, "answer": false, "completion": ".decl Has_n_wheels(Object:symbol, N_wheels:float)\nHas_n_wheels(\"children's bicycles\", 2).\nHas_n_wheels(\"children's bicycles\", 3).\n.decl Answer()\nAnswer() :- Has_n_wheels(\"children's bicycles\", n_wheels), n_wheels > 2.\n.output Answer", "completions": [".decl Has_n_wheels(Object:symbol, N_wheels:float)\nHas_n_wheels(\"children's bicycles\", 2).\nHas_n_wheels(\"children's bicycles\", 3).\n.decl Answer()\nAnswer() :- Has_n_wheels(\"children's bicycles\", n_wheels), n_wheels > 2.\n.output Answer"]}
{"id": 837, "answer": true, "completion": ".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"Royal Observatory in Greenwich\", \"circle\").\nHas_shape(\"yield sign\", \"triangle\").\n.decl Answer()\nAnswer() :- Has_shape(\"Royal Observatory in Greenwich\", shape1), Has_shape(\"yield sign\", shape2), shape1 != shape2.\n.output Answer", "completions": [".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"Royal Observatory in Greenwich\", \"circle\").\nHas_shape(\"yield sign\", \"triangle\").\n.decl Answer()\nAnswer() :- Has_shape(\"Royal Observatory in Greenwich\", shape1), Has_shape(\"yield sign\", shape2), shape1 != shape2.\n.output Answer"]}
{"id": 838, "answer": false, "completion": ".decl Has_stereotype(Movie:symbol, Stereotype:symbol)\nHas_stereotype(\"The Breakfast Club\", \"nerds as losers\").\n.decl Answer()\nAnswer() :- Has_stereotype(movie, \"nerds as losers\").\n.output Answer", "completions": [".decl Has_stereotype(Movie:symbol, Stereotype:symbol)\nHas_stereotype(\"The Breakfast Club\", \"nerds as losers\").\n.decl Answer()\nAnswer() :- Has_stereotype(movie, \"nerds as losers\").\n.output Answer"]}
{"id": 839, "answer": false, "completion": ".decl Has_assets(Company:symbol, Assets:float)\nHas_assets(\"JPMorgan Chase\", 2.6e+12).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"United States\", 3.2e+8).\n.decl Answer()\nAnswer() :- Has_assets(\"JPMorgan Chase\", assets), Has_population(\"United States\", population), assets >= population * 10.\n.output Answer", "completions": [".decl Has_assets(Company:symbol, Assets:float)\nHas_assets(\"JPMorgan Chase\", 2.6e+12).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"United States\", 3.2e+8).\n.decl Answer()\nAnswer() :- Has_assets(\"JPMorgan Chase\", assets), Has_population(\"United States\", population), assets >= population * 10.\n.output Answer"]}
{"id": 840, "answer": true, "completion": ".decl Has_length(Crustacean:symbol, Length:float)\nHas_length(\"giant isopod\", 0.7).\n.decl Has_size(Mattress:symbol, Size:symbol)\nHas_size(\"king-sized mattress\", \"king\").\n.decl Answer()\nAnswer() :- Has_length(\"giant isopod\", length), Has_size(\"king-sized mattress\", size), size = \"king\", length <= 1.\n.output Answer", "completions": [".decl Has_length(Crustacean:symbol, Length:float)\nHas_length(\"giant isopod\", 0.7).\n.decl Has_size(Mattress:symbol, Size:symbol)\nHas_size(\"king-sized mattress\", \"king\").\n.decl Answer()\nAnswer() :- Has_length(\"giant isopod\", length), Has_size(\"king-sized mattress\", size), size = \"king\", length <= 1.\n.output Answer"]}
{"id": 841, "answer": true, "completion": ".decl Places_in_circle(Person:symbol, Circle:float)\nPlaces_in_circle(\"Dante Alighieri\", 8).\n.decl Answer()\nAnswer() :- Places_in_circle(\"Dante Alighieri\", circle), Places_in_circle(\"Rupert Murdoch\", circle).\n.output Answer", "completions": [".decl Places_in_circle(Person:symbol, Circle:float)\nPlaces_in_circle(\"Dante Alighieri\", 8).\n.decl Answer()\nAnswer() :- Places_in_circle(\"Dante Alighieri\", circle), Places_in_circle(\"Rupert Murdoch\", circle).\n.output Answer"]}
{"id": 842, "answer": true, "completion": ".decl Uses_calendar(Organization:symbol, Calendar:symbol)\nUses_calendar(\"Eastern Orthodox Church\", \"Julian Calendar\").\nUses_calendar(\"Byzantine Empire\", \"Julian Calendar\").\n.decl Answer()\nAnswer() :- Uses_calendar(\"Eastern Orthodox Church\", calendar), Uses_calendar(\"Byzantine Empire\", calendar).\n.output Answer", "completions": [".decl Uses_calendar(Organization:symbol, Calendar:symbol)\nUses_calendar(\"Eastern Orthodox Church\", \"Julian Calendar\").\nUses_calendar(\"Byzantine Empire\", \"Julian Calendar\").\n.decl Answer()\nAnswer() :- Uses_calendar(\"Eastern Orthodox Church\", calendar), Uses_calendar(\"Byzantine Empire\", calendar).\n.output Answer"]}
{"id": 843, "answer": true, "completion": ".decl Has_wavelength(Gas:symbol, Wavelength:float)\nHas_wavelength(\"chlorine gas\", 590).\nHas_wavelength(\"neon gas\", 615).\n.decl Has_color_vision(Person:symbol, Color_vision:symbol)\nHas_color_vision(\"dichromat\", \"dichromatic\").\n.decl Answer()\nAnswer() :- Has_wavelength(\"chlorine gas\", wavelength1), Has_wavelength(\"neon gas\", wavelength2), Has_color_vision(\"dichromat\", \"dichromatic\"), wavelength1 != wavelength2.\n.output Answer", "completions": [".decl Has_wavelength(Gas:symbol, Wavelength:float)\nHas_wavelength(\"chlorine gas\", 590).\nHas_wavelength(\"neon gas\", 615).\n.decl Has_color_vision(Person:symbol, Color_vision:symbol)\nHas_color_vision(\"dichromat\", \"dichromatic\").\n.decl Answer()\nAnswer() :- Has_wavelength(\"chlorine gas\", wavelength1), Has_wavelength(\"neon gas\", wavelength2), Has_color_vision(\"dichromat\", \"dichromatic\"), wavelength1 != wavelength2.\n.output Answer"]}
{"id": 844, "answer": false, "completion": ".decl Has_real_name(Person:symbol, Name:symbol)\nHas_real_name(\"Augustus\", \"Gaius Octavius\").\n.decl Answer()\nAnswer() :- Has_real_name(\"Augustus\", name), name = \"Gaius Octavius\".\n.output Answer", "completions": [".decl Has_real_name(Person:symbol, Name:symbol)\nHas_real_name(\"Augustus\", \"Gaius Octavius\").\n.decl Answer()\nAnswer() :- Has_real_name(\"Augustus\", name), name = \"Gaius Octavius\".\n.output Answer"]}
{"id": 845, "answer": true, "completion": ".decl Has_relationship_status(Person:symbol, Status:symbol)\nHas_relationship_status(\"Darth Vader\", \"monogamous\").\n.decl Answer()\nAnswer() :- Has_relationship_status(\"Darth Vader\", \"monogamous\").\n.output Answer", "completions": [".decl Has_relationship_status(Person:symbol, Status:symbol)\nHas_relationship_status(\"Darth Vader\", \"monogamous\").\n.decl Answer()\nAnswer() :- Has_relationship_status(\"Darth Vader\", \"monogamous\").\n.output Answer"]}
{"id": 846, "answer": true, "completion": ".decl Meets(Person_A:symbol, Person_B:symbol)\nMeets(\"Al-Farabi\", \"Mohammed\").\n.decl Answer()\nAnswer() :- Meets(\"Al-Farabi\", \"Mohammed\").\n.output Answer", "completions": [".decl Meets(Person_A:symbol, Person_B:symbol)\nMeets(\"Al-Farabi\", \"Mohammed\").\n.decl Answer()\nAnswer() :- Meets(\"Al-Farabi\", \"Mohammed\").\n.output Answer"]}
{"id": 847, "answer": false, "completion": ".decl Votes_for(Person:symbol, Candidate:symbol)\n.decl Answer()\nAnswer() :- Votes_for(\"Dustin Hoffman\", \"Trump\").\n.output Answer", "completions": [".decl Votes_for(Person:symbol, Candidate:symbol)\n.decl Answer()\nAnswer() :- Votes_for(\"Dustin Hoffman\", \"Trump\").\n.output Answer"]}
{"id": 848, "answer": true, "completion": ".decl Is_in_region(Organization:symbol, Region:symbol)\nIs_in_region(\"Foreign and Commonwealth Office\", \"Europe\").\n.decl Answer()\nAnswer() :- Is_in_region(\"Foreign and Commonwealth Office\", \"Europe\").\n.output Answer", "completions": [".decl Is_in_region(Organization:symbol, Region:symbol)\nIs_in_region(\"Foreign and Commonwealth Office\", \"Europe\").\n.decl Answer()\nAnswer() :- Is_in_region(\"Foreign and Commonwealth Office\", \"Europe\").\n.output Answer"]}
{"id": 849, "answer": true, "completion": ".decl Has_ancestors(Person:symbol, Ancestors:symbol)\nHas_ancestors(\"Naruhito\", \"Emperor Kammu\").\n.decl Is_focus_of(Topic:symbol, Book:symbol)\nIs_focus_of(\"Romance of the Three Kingdoms\", \"Emperor Kammu\").\n.decl Answer()\nAnswer() :- Has_ancestors(person, ancestors), Is_focus_of(topic, ancestors).\n.output Answer", "completions": [".decl Has_ancestors(Person:symbol, Ancestors:symbol)\nHas_ancestors(\"Naruhito\", \"Emperor Kammu\").\n.decl Is_focus_of(Topic:symbol, Book:symbol)\nIs_focus_of(\"Romance of the Three Kingdoms\", \"Emperor Kammu\").\n.decl Answer()\nAnswer() :- Has_ancestors(person, ancestors), Is_focus_of(topic, ancestors).\n.output Answer"]}
{"id": 850, "answer": true, "completion": ".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Has_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.output Answer", "completions": [".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Has_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.output Answer"]}
{"id": 851, "answer": true, "completion": ".decl Fibonacci(Number:float)\nFibonacci(0).\nFibonacci(1).\nFibonacci(2).\nFibonacci(3).\nFibonacci(5).\nFibonacci(8).\n.decl Answer()\nAnswer() :- Fibonacci(number1), Fibonacci(number2), number1 != number2, number1 < 10, number2 < 10.\n.output Answer", "completions": [".decl Fibonacci(Number:float)\nFibonacci(0).\nFibonacci(1).\nFibonacci(2).\nFibonacci(3).\nFibonacci(5).\nFibonacci(8).\n.decl Answer()\nAnswer() :- Fibonacci(number1), Fibonacci(number2), number1 != number2, number1 < 10, number2 < 10.\n.output Answer"]}
{"id": 852, "answer": true, "completion": ".decl Requires(Task:symbol, Resource:symbol)\nRequires(\"balancing an account in Microsoft Excel\", \"computer\").\nRequires(\"balancing an account in Microsoft Excel\", \"internet connection\").\nRequires(\"balancing an account in Microsoft Excel\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"balancing an account in Microsoft Excel\", \"electricity\").\n.output Answer", "completions": [".decl Requires(Task:symbol, Resource:symbol)\nRequires(\"balancing an account in Microsoft Excel\", \"computer\").\nRequires(\"balancing an account in Microsoft Excel\", \"internet connection\").\nRequires(\"balancing an account in Microsoft Excel\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"balancing an account in Microsoft Excel\", \"electricity\").\n.output Answer"]}
{"id": 853, "answer": true, "completion": ".decl Has_alter_ego(Person:symbol, Alter_ego:symbol)\nHas_alter_ego(\"Hulk\", \"Bruce Banner\").\n.decl Can_explain(Person:symbol, Event:symbol)\nCan_explain(\"Bruce Banner\", \"atomic events\").\n.decl Answer()\nAnswer() :- Has_alter_ego(\"Hulk\", alter_ego), Can_explain(alter_ego, \"atomic events\").\n.output Answer", "completions": [".decl Has_alter_ego(Person:symbol, Alter_ego:symbol)\nHas_alter_ego(\"Hulk\", \"Bruce Banner\").\n.decl Can_explain(Person:symbol, Event:symbol)\nCan_explain(\"Bruce Banner\", \"atomic events\").\n.decl Answer()\nAnswer() :- Has_alter_ego(\"Hulk\", alter_ego), Can_explain(alter_ego, \"atomic events\").\n.output Answer"]}
{"id": 854, "answer": true, "completion": ".decl Has_style(Book:symbol, Style:symbol)\nHas_style(\"The Catcher in the Rye\", \"novel\").\nHas_style(\"The Great Gatsby\", \"novel\").\nHas_style(\"The Odyssey\", \"epic poem\").\n.decl Answer()\nAnswer() :- Has_style(book, \"novel\"), !Has_style(book, \"haiku\").\n.output Answer", "completions": [".decl Has_style(Book:symbol, Style:symbol)\nHas_style(\"The Catcher in the Rye\", \"novel\").\nHas_style(\"The Great Gatsby\", \"novel\").\nHas_style(\"The Odyssey\", \"epic poem\").\n.decl Answer()\nAnswer() :- Has_style(book, \"novel\"), !Has_style(book, \"haiku\").\n.output Answer"]}
{"id": 855, "answer": true, "completion": ".decl Helps(Party:symbol, Person:symbol, Goal:symbol)\nHelps(\"Social Democratic Party of Germany\", \"Frederick II\", \"become King of Prussia\").\n.decl Answer()\nAnswer() :- Helps(\"Social Democratic Party of Germany\", \"Frederick II\", \"become King of Prussia\").\n.output Answer", "completions": [".decl Helps(Party:symbol, Person:symbol, Goal:symbol)\nHelps(\"Social Democratic Party of Germany\", \"Frederick II\", \"become King of Prussia\").\n.decl Answer()\nAnswer() :- Helps(\"Social Democratic Party of Germany\", \"Frederick II\", \"become King of Prussia\").\n.output Answer"]}
{"id": 856, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Toyota Hilux\", 2200).\nHas_weight(\"Mr. Ed\", 1000).\n.decl Answer()\nAnswer() :- Has_weight(\"Toyota Hilux\", weight1), Has_weight(\"Mr. Ed\", weight2), weight1 > weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Toyota Hilux\", 2200).\nHas_weight(\"Mr. Ed\", 1000).\n.decl Answer()\nAnswer() :- Has_weight(\"Toyota Hilux\", weight1), Has_weight(\"Mr. Ed\", weight2), weight1 > weight2.\n.output Answer"]}
{"id": 857, "answer": true, "completion": ".decl Denies(Group:symbol, Practice:symbol)\nDenies(\"Wednesday name origin followers\", \"Communion\").\n.decl Answer()\nAnswer() :- Denies(\"Wednesday name origin followers\", \"Communion\").\n.output Answer", "completions": [".decl Denies(Group:symbol, Practice:symbol)\nDenies(\"Wednesday name origin followers\", \"Communion\").\n.decl Answer()\nAnswer() :- Denies(\"Wednesday name origin followers\", \"Communion\").\n.output Answer"]}
{"id": 858, "answer": false, "completion": ".decl Does(Person:symbol, Activity:symbol)\nDoes(\"astronomer\", \"observe stars\").\nDoes(\"astrologer\", \"write horoscopes\").\n.decl Answer()\nAnswer() :- Does(\"astronomer\", \"write horoscopes\"), !Does(\"astrologer\", \"observe stars\").\n.output Answer", "completions": [".decl Does(Person:symbol, Activity:symbol)\nDoes(\"astronomer\", \"observe stars\").\nDoes(\"astrologer\", \"write horoscopes\").\n.decl Answer()\nAnswer() :- Does(\"astronomer\", \"write horoscopes\"), !Does(\"astrologer\", \"observe stars\").\n.output Answer"]}
{"id": 859, "answer": true, "completion": ".decl Visits(Person:symbol, Place:symbol)\nVisits(\"Edward Snowden\", \"Moscow\").\n.decl Has_headquarters(Organization:symbol, Place:symbol)\nHas_headquarters(\"United Nations Conference on Trade and Development\", \"Geneva\").\n.decl Answer()\nAnswer() :- Visits(\"Edward Snowden\", place1), Has_headquarters(\"United Nations Conference on Trade and Development\", place2), place1 = place2.\n.output Answer", "completions": [".decl Visits(Person:symbol, Place:symbol)\nVisits(\"Edward Snowden\", \"Moscow\").\n.decl Has_headquarters(Organization:symbol, Place:symbol)\nHas_headquarters(\"United Nations Conference on Trade and Development\", \"Geneva\").\n.decl Answer()\nAnswer() :- Visits(\"Edward Snowden\", place1), Has_headquarters(\"United Nations Conference on Trade and Development\", place2), place1 = place2.\n.output Answer"]}
{"id": 860, "answer": false, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"spinach\", 23).\n.decl Is_healthy(Food:symbol, Healthy:symbol)\nIs_healthy(\"spinach\", \"yes\").\n.decl Answer()\nAnswer() :- Has_calories(\"spinach\", calories), Is_healthy(\"spinach\", \"no\"), calories > 100.\n.output Answer", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"spinach\", 23).\n.decl Is_healthy(Food:symbol, Healthy:symbol)\nIs_healthy(\"spinach\", \"yes\").\n.decl Answer()\nAnswer() :- Has_calories(\"spinach\", calories), Is_healthy(\"spinach\", \"no\"), calories > 100.\n.output Answer"]}
{"id": 861, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"bengal fox\", \"India\").\n.decl Hosts(Event:symbol, Place:symbol)\nHosts(\"Superbowl\", \"United States\").\n.decl Answer()\nAnswer() :- Lives_in(\"bengal fox\", place), Hosts(\"Superbowl\", place), !.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"bengal fox\", \"India\").\n.decl Hosts(Event:symbol, Place:symbol)\nHosts(\"Superbowl\", \"United States\").\n.decl Answer()\nAnswer() :- Lives_in(\"bengal fox\", place), Hosts(\"Superbowl\", place), !.\n.output Answer"]}
{"id": 862, "answer": true, "completion": ".decl Approves(Person:symbol, Book:symbol)\nApproves(\"Jehovah's Witness\", \"The Bible\").\n.decl Answer()\nAnswer() :- !Approves(\"Jehovah's Witness\", \"Alice's Adventures in Wonderland\").\n.output Answer", "completions": [".decl Approves(Person:symbol, Book:symbol)\nApproves(\"Jehovah's Witness\", \"The Bible\").\n.decl Answer()\nAnswer() :- !Approves(\"Jehovah's Witness\", \"Alice's Adventures in Wonderland\").\n.output Answer"]}
{"id": 863, "answer": true, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Germaphobia\", \"germaphobia\").\n.decl Requires_condition(Activity:symbol, Condition:symbol)\nRequires_condition(\"Judo\", \"no fear of germs\").\n.decl Answer()\nAnswer() :- Has_condition(\"Germaphobia\", condition1), Requires_condition(\"Judo\", condition2), condition1 != condition2.\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Germaphobia\", \"germaphobia\").\n.decl Requires_condition(Activity:symbol, Condition:symbol)\nRequires_condition(\"Judo\", \"no fear of germs\").\n.decl Answer()\nAnswer() :- Has_condition(\"Germaphobia\", condition1), Requires_condition(\"Judo\", condition2), condition1 != condition2.\n.output Answer"]}
{"id": 864, "answer": false, "completion": ".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"lifeboat\", \"ocean\").\n.decl Is_in_location(Object:symbol, Location:symbol)\nIs_in_location(\"Hooke Sea\", \"ocean\").\n.decl Answer()\nAnswer() :- Has_location(\"lifeboat\", location1), Is_in_location(\"Hooke Sea\", location2), location1 = location2.\n.output Answer", "completions": [".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"lifeboat\", \"ocean\").\n.decl Is_in_location(Object:symbol, Location:symbol)\nIs_in_location(\"Hooke Sea\", \"ocean\").\n.decl Answer()\nAnswer() :- Has_location(\"lifeboat\", location1), Is_in_location(\"Hooke Sea\", location2), location1 = location2.\n.output Answer"]}
{"id": 865, "answer": true, "completion": ".decl Has_popularity(Amendment:symbol, Popularity:float)\nHas_popularity(\"Eighth Amendment to the United States Constitution\", 8).\n.decl Answer()\nAnswer() :- Has_popularity(\"Eighth Amendment to the United States Constitution\", popularity), popularity > 5.\n.output Answer", "completions": [".decl Has_popularity(Amendment:symbol, Popularity:float)\nHas_popularity(\"Eighth Amendment to the United States Constitution\", 8).\n.decl Answer()\nAnswer() :- Has_popularity(\"Eighth Amendment to the United States Constitution\", popularity), popularity > 5.\n.output Answer"]}
{"id": 866, "answer": false, "completion": ".decl Can_be_cooked_in(Food:symbol, Medium:symbol)\nCan_be_cooked_in(\"food\", \"oven\").\n.decl Answer()\nAnswer() :- !Can_be_cooked_in(\"food\", \"cosmic microwave background\").\n.output Answer", "completions": [".decl Can_be_cooked_in(Food:symbol, Medium:symbol)\nCan_be_cooked_in(\"food\", \"oven\").\n.decl Answer()\nAnswer() :- !Can_be_cooked_in(\"food\", \"cosmic microwave background\").\n.output Answer"]}
{"id": 867, "answer": true, "completion": ".decl Cares_about(Person:symbol, Topic:symbol)\nCares_about(\"Nigella Lawson\", \"cooking\").\n.decl Answer()\nAnswer() :- Cares_about(\"Nigella Lawson\", \"solubility\"), !Cares_about(\"Nigella Lawson\", \"cooking\").\n.output Answer", "completions": [".decl Cares_about(Person:symbol, Topic:symbol)\nCares_about(\"Nigella Lawson\", \"cooking\").\n.decl Answer()\nAnswer() :- Cares_about(\"Nigella Lawson\", \"solubility\"), !Cares_about(\"Nigella Lawson\", \"cooking\").\n.output Answer"]}
{"id": 868, "answer": true, "completion": ".decl Plays(Person:symbol, Sport:symbol)\nPlays(\"Rahul Dravid\", \"cricket\").\n.decl Has_action(Sport:symbol, Action:symbol)\nHas_action(\"cricket\", \"batting\").\nHas_action(\"cricket\", \"bowling\").\n.decl Answer()\nAnswer() :- Plays(\"Rahul Dravid\", sport), Has_action(sport, \"field goal\"), !Has_action(sport, \"field goal\").\n.output Answer", "completions": [".decl Plays(Person:symbol, Sport:symbol)\nPlays(\"Rahul Dravid\", \"cricket\").\n.decl Has_action(Sport:symbol, Action:symbol)\nHas_action(\"cricket\", \"batting\").\nHas_action(\"cricket\", \"bowling\").\n.decl Answer()\nAnswer() :- Plays(\"Rahul Dravid\", sport), Has_action(sport, \"field goal\"), !Has_action(sport, \"field goal\").\n.output Answer"]}
{"id": 869, "answer": false, "completion": ".decl Plays_at(Band:symbol, Venue:symbol)\nPlays_at(\"U2\", \"Polo Grounds\").\n.decl Answer()\nAnswer() :- Plays_at(\"U2\", \"Polo Grounds\").\n.output Answer", "completions": [".decl Plays_at(Band:symbol, Venue:symbol)\nPlays_at(\"U2\", \"Polo Grounds\").\n.decl Answer()\nAnswer() :- Plays_at(\"U2\", \"Polo Grounds\").\n.output Answer"]}
{"id": 870, "answer": true, "completion": ".decl Has_cuisine(Country:symbol, Cuisine:symbol)\nHas_cuisine(\"United States\", \"American\").\nHas_cuisine(\"United Kingdom\", \"British\").\n.decl Has_meal(Cuisine:symbol, Meal:symbol)\nHas_meal(\"American\", \"breakfast\").\nHas_meal(\"British\", \"dinner\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"United States\", cuisine1), Has_cuisine(\"United Kingdom\", cuisine2), Has_meal(cuisine1, meal1), Has_meal(cuisine2, meal2), meal1 = meal2.\n.output Answer", "completions": [".decl Has_cuisine(Country:symbol, Cuisine:symbol)\nHas_cuisine(\"United States\", \"American\").\nHas_cuisine(\"United Kingdom\", \"British\").\n.decl Has_meal(Cuisine:symbol, Meal:symbol)\nHas_meal(\"American\", \"breakfast\").\nHas_meal(\"British\", \"dinner\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"United States\", cuisine1), Has_cuisine(\"United Kingdom\", cuisine2), Has_meal(cuisine1, meal1), Has_meal(cuisine2, meal2), meal1 = meal2.\n.output Answer"]}
{"id": 871, "answer": true, "completion": ".decl Is_ingredient(Food:symbol, Ingredient:symbol)\nIs_ingredient(\"blooming onion\", \"onion\").\nIs_ingredient(\"blooming onion\", \"flour\").\nIs_ingredient(\"blooming onion\", \"oil\").\nIs_ingredient(\"blooming onion\", \"salt\").\nIs_ingredient(\"blooming onion\", \"pepper\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"blooming onion\", \"onion\"), Is_ingredient(\"blooming onion\", \"flour\"), Is_ingredient(\"blooming onion\", \"oil\"), Is_ingredient(\"blooming onion\", \"salt\"), Is_ingredient(\"blooming onion\", \"pepper\"), Is_ingredient(\"blooming onion\", \"shallot\").\n.output Answer", "completions": [".decl Is_ingredient(Food:symbol, Ingredient:symbol)\nIs_ingredient(\"blooming onion\", \"onion\").\nIs_ingredient(\"blooming onion\", \"flour\").\nIs_ingredient(\"blooming onion\", \"oil\").\nIs_ingredient(\"blooming onion\", \"salt\").\nIs_ingredient(\"blooming onion\", \"pepper\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"blooming onion\", \"onion\"), Is_ingredient(\"blooming onion\", \"flour\"), Is_ingredient(\"blooming onion\", \"oil\"), Is_ingredient(\"blooming onion\", \"salt\"), Is_ingredient(\"blooming onion\", \"pepper\"), Is_ingredient(\"blooming onion\", \"shallot\").\n.output Answer"]}
{"id": 872, "answer": true, "completion": ".decl Has_solubility(Substance:symbol, Solubility:symbol)\nHas_solubility(\"isopropyl alcohol\", \"low\").\n.decl Answer()\nAnswer() :- Has_solubility(\"isopropyl alcohol\", \"low\").\n.output Answer", "completions": [".decl Has_solubility(Substance:symbol, Solubility:symbol)\nHas_solubility(\"isopropyl alcohol\", \"low\").\n.decl Answer()\nAnswer() :- Has_solubility(\"isopropyl alcohol\", \"low\").\n.output Answer"]}
{"id": 873, "answer": false, "completion": ".decl Has_width(Object:symbol, Width:float)\nHas_width(\"Mac Truck\", 2.5).\nHas_width(\"Golden Gate Bridge\", 90).\n.decl Answer()\nAnswer() :- Has_width(\"Mac Truck\", width1), Has_width(\"Golden Gate Bridge\", width2), 13 * width1 > width2.\n.output Answer", "completions": [".decl Has_width(Object:symbol, Width:float)\nHas_width(\"Mac Truck\", 2.5).\nHas_width(\"Golden Gate Bridge\", 90).\n.decl Answer()\nAnswer() :- Has_width(\"Mac Truck\", width1), Has_width(\"Golden Gate Bridge\", width2), 13 * width1 > width2.\n.output Answer"]}
{"id": 874, "answer": true, "completion": ".decl Is_possible(Action:symbol, Result:symbol)\nIs_possible(\"building a house\", \"impossible\").\n.decl Answer()\nAnswer() :- Is_possible(\"building a house on an asteroid\", result), result = \"impossible\".\n.output Answer", "completions": [".decl Is_possible(Action:symbol, Result:symbol)\nIs_possible(\"building a house\", \"impossible\").\n.decl Answer()\nAnswer() :- Is_possible(\"building a house on an asteroid\", result), result = \"impossible\".\n.output Answer"]}
{"id": 875, "answer": true, "completion": ".decl Has_duration(Series:symbol, Duration:float)\nHas_duration(\"EastEnders\", 8400).\n.decl Needs_water(Activity:symbol)\nNeeds_water(\"binge watching\").\n.decl Answer()\nAnswer() :- Has_duration(\"EastEnders\", duration), Needs_water(activity), duration > 0, !Needs_water(activity).\n.output Answer", "completions": [".decl Has_duration(Series:symbol, Duration:float)\nHas_duration(\"EastEnders\", 8400).\n.decl Needs_water(Activity:symbol)\nNeeds_water(\"binge watching\").\n.decl Answer()\nAnswer() :- Has_duration(\"EastEnders\", duration), Needs_water(activity), duration > 0, !Needs_water(activity).\n.output Answer"]}
{"id": 876, "answer": false, "completion": ".decl Found_in(Object:symbol, Place:symbol)\nFound_in(\"cucumber\", \"garden\").\nFound_in(\"desert\", \"desert\").\n.decl Answer()\nAnswer() :- Found_in(\"cucumber\", place), Found_in(\"desert\", place).\n.output Answer", "completions": [".decl Found_in(Object:symbol, Place:symbol)\nFound_in(\"cucumber\", \"garden\").\nFound_in(\"desert\", \"desert\").\n.decl Answer()\nAnswer() :- Found_in(\"cucumber\", place), Found_in(\"desert\", place).\n.output Answer"]}
{"id": 877, "answer": true, "completion": ".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"Borgia's World of Wonders\", 2.5).\nHas_duration(\"Ludacris's Release Therapy\", 1.5).\n.decl Answer()\nAnswer() :- Has_duration(\"Borgia's World of Wonders\", duration1), Has_duration(\"Ludacris's Release Therapy\", duration2), duration1 > duration2.\n.output Answer", "completions": [".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"Borgia's World of Wonders\", 2.5).\nHas_duration(\"Ludacris's Release Therapy\", 1.5).\n.decl Answer()\nAnswer() :- Has_duration(\"Borgia's World of Wonders\", duration1), Has_duration(\"Ludacris's Release Therapy\", duration2), duration1 > duration2.\n.output Answer"]}
{"id": 878, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"potato vodka\", \"potato\").\nHas_ingredient(\"potato vodka\", \"gluten\").\n.decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"John\", \"celiac disease\").\n.decl Answer()\nAnswer() :- Has_disease(\"John\", \"celiac disease\"), !Has_ingredient(\"potato vodka\", \"gluten\").\n.output Answer", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"potato vodka\", \"potato\").\nHas_ingredient(\"potato vodka\", \"gluten\").\n.decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"John\", \"celiac disease\").\n.decl Answer()\nAnswer() :- Has_disease(\"John\", \"celiac disease\"), !Has_ingredient(\"potato vodka\", \"gluten\").\n.output Answer"]}
{"id": 879, "answer": false, "completion": ".decl Allows(Organization:symbol, Practice:symbol)\nAllows(\"Catholic Church\", \"monogamy\").\n.decl Answer()\nAnswer() :- !Allows(\"Catholic Church\", \"polyamory\").\n.output Answer", "completions": [".decl Allows(Organization:symbol, Practice:symbol)\nAllows(\"Catholic Church\", \"monogamy\").\n.decl Answer()\nAnswer() :- !Allows(\"Catholic Church\", \"polyamory\").\n.output Answer"]}
{"id": 880, "answer": false, "completion": ".decl Has_symptoms(Mental_disorder:symbol, Symptom:symbol)\nHas_symptoms(\"depression\", \"sadness\").\nHas_symptoms(\"anxiety\", \"nervousness\").\n.decl Answer()\nAnswer() :- Has_symptoms(mental_disorder, symptom), !Has_symptoms(mental_disorder, \"visibility\").\n.output Answer", "completions": [".decl Has_symptoms(Mental_disorder:symbol, Symptom:symbol)\nHas_symptoms(\"depression\", \"sadness\").\nHas_symptoms(\"anxiety\", \"nervousness\").\n.decl Answer()\nAnswer() :- Has_symptoms(mental_disorder, symptom), !Has_symptoms(mental_disorder, \"visibility\").\n.output Answer"]}
{"id": 881, "answer": false, "completion": ".decl Has_name(Brand:symbol, Name:symbol)\nHas_name(\"Tesla Motors\", \"Nikola Tesla\").\nHas_name(\"Tesla Energy\", \"Nikola Tesla\").\n.decl Answer()\nAnswer() :- Has_name(brand, \"Nikola Tesla\"), Has_name(brand2, \"Nikola Tesla\"), brand != brand2.\n.output Answer", "completions": [".decl Has_name(Brand:symbol, Name:symbol)\nHas_name(\"Tesla Motors\", \"Nikola Tesla\").\nHas_name(\"Tesla Energy\", \"Nikola Tesla\").\n.decl Answer()\nAnswer() :- Has_name(brand, \"Nikola Tesla\"), Has_name(brand2, \"Nikola Tesla\"), brand != brand2.\n.output Answer"]}
{"id": 882, "answer": true, "completion": ".decl Has_grade(Person:symbol, Grade:float)\nHas_grade(\"eleventh-grader\", 11).\n.decl Eligible_for_medicare(Grade:float)\nEligible_for_medicare(65).\n.decl Answer()\nAnswer() :- Has_grade(\"eleventh-grader\", grade), Eligible_for_medicare(grade), grade != 65.\n.output Answer", "completions": [".decl Has_grade(Person:symbol, Grade:float)\nHas_grade(\"eleventh-grader\", 11).\n.decl Eligible_for_medicare(Grade:float)\nEligible_for_medicare(65).\n.decl Answer()\nAnswer() :- Has_grade(\"eleventh-grader\", grade), Eligible_for_medicare(grade), grade != 65.\n.output Answer"]}
{"id": 883, "answer": true, "completion": ".decl Has_mood_disorder(Person:symbol)\nHas_mood_disorder(\"John\").\n.decl Needs_institutionalization(Person:symbol)\nNeeds_institutionalization(\"John\") :- Has_mood_disorder(person).\n.decl Answer()\nAnswer() :- Needs_institutionalization(person).\n.output Answer", "completions": [".decl Has_mood_disorder(Person:symbol)\nHas_mood_disorder(\"John\").\n.decl Needs_institutionalization(Person:symbol)\nNeeds_institutionalization(\"John\") :- Has_mood_disorder(person).\n.decl Answer()\nAnswer() :- Needs_institutionalization(person).\n.output Answer"]}
{"id": 884, "answer": false, "completion": ".decl Has_colors(Flag:symbol, Color1:symbol, Color2:symbol, Color3:symbol)\nHas_colors(\"flag of Gabon\", \"green\", \"yellow\", \"blue\").\n.decl Has_colors_in_rainbow(Color1:symbol, Color2:symbol, Color3:symbol, Color4:symbol, Color5:symbol, Color6:symbol, Color7:symbol)\nHas_colors_in_rainbow(\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\").\n.decl Answer()\nAnswer() :- Has_colors(\"flag of Gabon\", color1, color2, color3), Has_colors_in_rainbow(color1, color2, color3, _, _, _, _).\n.output Answer", "completions": [".decl Has_colors(Flag:symbol, Color1:symbol, Color2:symbol, Color3:symbol)\nHas_colors(\"flag of Gabon\", \"green\", \"yellow\", \"blue\").\n.decl Has_colors_in_rainbow(Color1:symbol, Color2:symbol, Color3:symbol, Color4:symbol, Color5:symbol, Color6:symbol, Color7:symbol)\nHas_colors_in_rainbow(\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\").\n.decl Answer()\nAnswer() :- Has_colors(\"flag of Gabon\", color1, color2, color3), Has_colors_in_rainbow(color1, color2, color3, _, _, _, _).\n.output Answer"]}
{"id": 885, "answer": false, "completion": ".decl Requires_separate_visits(Healthcare:symbol)\nRequires_separate_visits(\"preventive healthcare\").\nRequires_separate_visits(\"sickness\").\n.decl Answer()\nAnswer() :- Requires_separate_visits(healthcare).\n.output Answer", "completions": [".decl Requires_separate_visits(Healthcare:symbol)\nRequires_separate_visits(\"preventive healthcare\").\nRequires_separate_visits(\"sickness\").\n.decl Answer()\nAnswer() :- Requires_separate_visits(healthcare).\n.output Answer"]}
{"id": 886, "answer": false, "completion": ".decl Has_fat_content(Food:symbol, Fat_content:float)\nHas_fat_content(\"McDonald's hamburger\", 10).\n.decl Has_recommended_fat_allowance(Group:symbol, Fat_allowance:float)\nHas_recommended_fat_allowance(\"USDA\", 70).\n.decl Answer()\nAnswer() :- Has_fat_content(\"McDonald's hamburger\", fat_content), Has_recommended_fat_allowance(\"USDA\", fat_allowance), 7 * fat_content > fat_allowance.\n.output Answer", "completions": [".decl Has_fat_content(Food:symbol, Fat_content:float)\nHas_fat_content(\"McDonald's hamburger\", 10).\n.decl Has_recommended_fat_allowance(Group:symbol, Fat_allowance:float)\nHas_recommended_fat_allowance(\"USDA\", 70).\n.decl Answer()\nAnswer() :- Has_fat_content(\"McDonald's hamburger\", fat_content), Has_recommended_fat_allowance(\"USDA\", fat_allowance), 7 * fat_content > fat_allowance.\n.output Answer"]}
{"id": 887, "answer": true, "completion": ".decl Born_in_time(Person:symbol, Time:symbol)\nBorn_in_time(\"Edward II of England\", \"13th century\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Vikings\", \"9th century\").\n.decl Answer()\nAnswer() :- Born_in_time(\"Edward II of England\", time1), Happens_in_time(\"Vikings\", time2), time1 != time2.\n.output Answer", "completions": [".decl Born_in_time(Person:symbol, Time:symbol)\nBorn_in_time(\"Edward II of England\", \"13th century\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Vikings\", \"9th century\").\n.decl Answer()\nAnswer() :- Born_in_time(\"Edward II of England\", time1), Happens_in_time(\"Vikings\", time2), time1 != time2.\n.output Answer"]}
{"id": 888, "answer": true, "completion": ".decl Affected_by(Object:symbol, Field:symbol)\nAffected_by(\"implants from an ORIF surgery\", \"magnetic field\").\n.decl Exists_on(Field:symbol, Location:symbol)\nExists_on(\"magnetic field\", \"Earth\").\n.decl Answer()\nAnswer() :- Affected_by(\"implants from an ORIF surgery\", field), Exists_on(field, \"Earth\").\n.output Answer", "completions": [".decl Affected_by(Object:symbol, Field:symbol)\nAffected_by(\"implants from an ORIF surgery\", \"magnetic field\").\n.decl Exists_on(Field:symbol, Location:symbol)\nExists_on(\"magnetic field\", \"Earth\").\n.decl Answer()\nAnswer() :- Affected_by(\"implants from an ORIF surgery\", field), Exists_on(field, \"Earth\").\n.output Answer"]}
{"id": 889, "answer": true, "completion": ".decl Has_n_stars(Galaxy:symbol, N_stars:float)\nHas_n_stars(\"Milky Way\", 200000000000).\n.decl Has_population(Planet:symbol, Population:float)\nHas_population(\"Earth\", 7000000000).\n.decl Answer()\nAnswer() :- Has_n_stars(\"Milky Way\", n_stars), Has_population(\"Earth\", population), n_stars >= 10 * population.\n.output Answer", "completions": [".decl Has_n_stars(Galaxy:symbol, N_stars:float)\nHas_n_stars(\"Milky Way\", 200000000000).\n.decl Has_population(Planet:symbol, Population:float)\nHas_population(\"Earth\", 7000000000).\n.decl Answer()\nAnswer() :- Has_n_stars(\"Milky Way\", n_stars), Has_population(\"Earth\", population), n_stars >= 10 * population.\n.output Answer"]}
{"id": 890, "answer": true, "completion": ".decl Is_on_plate(Food:symbol, Plate:symbol)\nIs_on_plate(\"parsley\", \"holiday plate\").\n.decl Answer()\nAnswer() :- !Is_on_plate(\"tibia\", \"holiday plate\").\n.output Answer", "completions": [".decl Is_on_plate(Food:symbol, Plate:symbol)\nIs_on_plate(\"parsley\", \"holiday plate\").\n.decl Answer()\nAnswer() :- !Is_on_plate(\"tibia\", \"holiday plate\").\n.output Answer"]}
{"id": 891, "answer": false, "completion": ".decl Has_population(City:symbol, Year:float, Population:float)\nHas_population(\"Ashland\", 2018, 20800).\n.decl Is_adequate(Population:float)\nIs_adequate(population) :- population >= 10000.\n.decl Answer()\nAnswer() :- Has_population(\"Ashland\", 2018, population), Is_adequate(population).\n.output Answer", "completions": [".decl Has_population(City:symbol, Year:float, Population:float)\nHas_population(\"Ashland\", 2018, 20800).\n.decl Is_adequate(Population:float)\nIs_adequate(population) :- population >= 10000.\n.decl Answer()\nAnswer() :- Has_population(\"Ashland\", 2018, population), Is_adequate(population).\n.output Answer"]}
{"id": 892, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"producer of Easy Rider\", 79).\n.decl Answer()\nAnswer() :- Has_age(\"producer of Easy Rider\", age), age >= 80.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"producer of Easy Rider\", 79).\n.decl Answer()\nAnswer() :- Has_age(\"producer of Easy Rider\", age), age >= 80.\n.output Answer"]}
{"id": 893, "answer": true, "completion": ".decl Has_behavior(Animal:symbol, Behavior:symbol)\nHas_behavior(\"bumblebee\", \"aggressive\").\n.decl Answer()\nAnswer() :- Has_behavior(\"bumblebee\", \"aggressive\"), !Has_behavior(\"bumblebee\", \"suicidal\").\n.output Answer", "completions": [".decl Has_behavior(Animal:symbol, Behavior:symbol)\nHas_behavior(\"bumblebee\", \"aggressive\").\n.decl Answer()\nAnswer() :- Has_behavior(\"bumblebee\", \"aggressive\"), !Has_behavior(\"bumblebee\", \"suicidal\").\n.output Answer"]}
{"id": 894, "answer": true, "completion": ".decl Has_friction(Material:symbol, Friction:float)\nHas_friction(\"mercury\", 0.1).\nHas_friction(\"slip n slide material\", 0.8).\n.decl Answer()\nAnswer() :- Has_friction(\"mercury\", friction1), Has_friction(\"slip n slide material\", friction2), friction1 < friction2.\n.output Answer", "completions": [".decl Has_friction(Material:symbol, Friction:float)\nHas_friction(\"mercury\", 0.1).\nHas_friction(\"slip n slide material\", 0.8).\n.decl Answer()\nAnswer() :- Has_friction(\"mercury\", friction1), Has_friction(\"slip n slide material\", friction2), friction1 < friction2.\n.output Answer"]}
{"id": 895, "answer": false, "completion": ".decl Has_record(Person:symbol, Record:symbol)\nHas_record(\"Javier Sotomayor\", \"high jump\").\n.decl Has_ability(Animal:symbol, Ability:symbol)\nHas_ability(\"Bengal cat\", \"jumping\").\n.decl Answer()\nAnswer() :- Has_record(\"Javier Sotomayor\", record), Has_ability(\"Bengal cat\", ability), ability = record.\n.output Answer", "completions": [".decl Has_record(Person:symbol, Record:symbol)\nHas_record(\"Javier Sotomayor\", \"high jump\").\n.decl Has_ability(Animal:symbol, Ability:symbol)\nHas_ability(\"Bengal cat\", \"jumping\").\n.decl Answer()\nAnswer() :- Has_record(\"Javier Sotomayor\", record), Has_ability(\"Bengal cat\", ability), ability = record.\n.output Answer"]}
{"id": 896, "answer": false, "completion": ".decl Is_made_with(Food:symbol, Ingredient:symbol)\nIs_made_with(\"rice pudding\", \"white rice\").\nIs_made_with(\"rice pudding\", \"brown rice\").\n.decl Answer()\nAnswer() :- Is_made_with(\"rice pudding\", \"brown rice\"), !Is_made_with(\"rice pudding\", \"white rice\").\n.output Answer", "completions": [".decl Is_made_with(Food:symbol, Ingredient:symbol)\nIs_made_with(\"rice pudding\", \"white rice\").\nIs_made_with(\"rice pudding\", \"brown rice\").\n.decl Answer()\nAnswer() :- Is_made_with(\"rice pudding\", \"brown rice\"), !Is_made_with(\"rice pudding\", \"white rice\").\n.output Answer"]}
{"id": 897, "answer": true, "completion": ".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"cancer\", \"excess adrenaline production\").\n.decl Answer()\nAnswer() :- Causes(\"cancer\", \"excess adrenaline production\").\n.output Answer", "completions": [".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"cancer\", \"excess adrenaline production\").\n.decl Answer()\nAnswer() :- Causes(\"cancer\", \"excess adrenaline production\").\n.output Answer"]}
{"id": 898, "answer": true, "completion": ".decl Has_n_states(Country:symbol, N_states:float)\nHas_n_states(\"Ancient Greece\", 10).\nHas_n_states(\"United States\", 45).\n.decl Answer()\nAnswer() :- Has_n_states(\"Ancient Greece\", n_states1), Has_n_states(\"United States\", n_states2), n_states1 < n_states2.\n.output Answer", "completions": [".decl Has_n_states(Country:symbol, N_states:float)\nHas_n_states(\"Ancient Greece\", 10).\nHas_n_states(\"United States\", 45).\n.decl Answer()\nAnswer() :- Has_n_states(\"Ancient Greece\", n_states1), Has_n_states(\"United States\", n_states2), n_states1 < n_states2.\n.output Answer"]}
{"id": 899, "answer": true, "completion": ".decl Involved_in(Person:symbol, Company:symbol)\nInvolved_in(\"Ben Cohen\", \"Ben & Jerry's\").\nInvolved_in(\"Jerry Greenfield\", \"Ben & Jerry's\").\n.decl Answer()\nAnswer() :- Involved_in(\"Ben Cohen\", \"Ben & Jerry's\"), Involved_in(\"Jerry Greenfield\", \"Ben & Jerry's\").\n.output Answer", "completions": [".decl Involved_in(Person:symbol, Company:symbol)\nInvolved_in(\"Ben Cohen\", \"Ben & Jerry's\").\nInvolved_in(\"Jerry Greenfield\", \"Ben & Jerry's\").\n.decl Answer()\nAnswer() :- Involved_in(\"Ben Cohen\", \"Ben & Jerry's\"), Involved_in(\"Jerry Greenfield\", \"Ben & Jerry's\").\n.output Answer"]}
{"id": 900, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"United States Secretary of State\", \"diplomat\").\n.decl Does_job(Job:symbol, Task:symbol)\nDoes_job(\"diplomat\", \"answers phones\").\n.decl Answer()\nAnswer() :- Has_job(\"United States Secretary of State\", job), Does_job(job, \"answers phones\").\n.output Answer", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"United States Secretary of State\", \"diplomat\").\n.decl Does_job(Job:symbol, Task:symbol)\nDoes_job(\"diplomat\", \"answers phones\").\n.decl Answer()\nAnswer() :- Has_job(\"United States Secretary of State\", job), Does_job(job, \"answers phones\").\n.output Answer"]}
{"id": 901, "answer": true, "completion": ".decl Developed(Person:symbol, Product:symbol)\n.decl Answer()\nAnswer() :- !Developed(\"Bill Gates\", \"PlayStation 4\").\n.output Answer", "completions": [".decl Developed(Person:symbol, Product:symbol)\n.decl Answer()\nAnswer() :- !Developed(\"Bill Gates\", \"PlayStation 4\").\n.output Answer"]}
{"id": 902, "answer": true, "completion": ".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"Games of the XXII Olympiad\", 2).\n.decl Published_every_n_months(Magazine:symbol, N_months:float)\nPublished_every_n_months(\"The Atlantic\", 1).\n.decl Answer()\nAnswer() :- Published_every_n_months(\"The Atlantic\", n_months1), Lasts_n_months(\"Games of the XXII Olympiad\", n_months2), n_months1 <= n_months2.\n.output Answer", "completions": [".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"Games of the XXII Olympiad\", 2).\n.decl Published_every_n_months(Magazine:symbol, N_months:float)\nPublished_every_n_months(\"The Atlantic\", 1).\n.decl Answer()\nAnswer() :- Published_every_n_months(\"The Atlantic\", n_months1), Lasts_n_months(\"Games of the XXII Olympiad\", n_months2), n_months1 <= n_months2.\n.output Answer"]}
{"id": 903, "answer": false, "completion": ".decl Lives(Person:symbol, Years:float)\nLives(\"James Watson\", 88).\nLives(\"Francis Crick\", 88).\n.decl Answer()\nAnswer() :- Lives(\"James Watson\", years1), Lives(\"Francis Crick\", years2), years2 > years1.\n.output Answer", "completions": [".decl Lives(Person:symbol, Years:float)\nLives(\"James Watson\", 88).\nLives(\"Francis Crick\", 88).\n.decl Answer()\nAnswer() :- Lives(\"James Watson\", years1), Lives(\"Francis Crick\", years2), years2 > years1.\n.output Answer"]}
{"id": 904, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Alice\", 7).\n.decl Requires_age(Organization:symbol, Age:float)\nRequires_age(\"Masonic Lodge\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"Alice\", age1), Requires_age(\"Masonic Lodge\", age2), age1 < age2.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Alice\", 7).\n.decl Requires_age(Organization:symbol, Age:float)\nRequires_age(\"Masonic Lodge\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"Alice\", age1), Requires_age(\"Masonic Lodge\", age2), age1 < age2.\n.output Answer"]}
{"id": 905, "answer": false, "completion": ".decl Linked_with(Object:symbol, Concept:symbol)\n.decl Answer()\nAnswer() :- !Linked_with(\"asteroid\", \"virginity\").\n.output Answer", "completions": [".decl Linked_with(Object:symbol, Concept:symbol)\n.decl Answer()\nAnswer() :- !Linked_with(\"asteroid\", \"virginity\").\n.output Answer"]}
{"id": 906, "answer": true, "completion": ".decl Produced(Person:symbol, Movie:symbol)\nProduced(\"Dennis Hopper\", \"Easy Rider\").\n.decl Starred_in(Person_A:symbol, Person_B:symbol, Movie:symbol)\nStarred_in(\"Dennis Hopper\", \"Dean Cain\", \"Lois & Clark: The New Adventures of Superman\").\n.decl Had_girlfriend(Person:symbol, Girlfriend:symbol)\nHad_girlfriend(\"Dean Cain\", \"Princeton\").\n.decl Answer()\nAnswer() :- Produced(\"Dennis Hopper\", \"Easy Rider\"), Starred_in(\"Dennis Hopper\", person, movie), Had_girlfriend(person, \"Princeton\").\n.output Answer", "completions": [".decl Produced(Person:symbol, Movie:symbol)\nProduced(\"Dennis Hopper\", \"Easy Rider\").\n.decl Starred_in(Person_A:symbol, Person_B:symbol, Movie:symbol)\nStarred_in(\"Dennis Hopper\", \"Dean Cain\", \"Lois & Clark: The New Adventures of Superman\").\n.decl Had_girlfriend(Person:symbol, Girlfriend:symbol)\nHad_girlfriend(\"Dean Cain\", \"Princeton\").\n.decl Answer()\nAnswer() :- Produced(\"Dennis Hopper\", \"Easy Rider\"), Starred_in(\"Dennis Hopper\", person, movie), Had_girlfriend(person, \"Princeton\").\n.output Answer"]}
{"id": 907, "answer": true, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Melania Trump\", \"model\").\nHas_profession(\"Olga Kurylenko\", \"model\").\n.decl Answer()\nAnswer() :- Has_profession(\"Melania Trump\", profession), Has_profession(\"Olga Kurylenko\", profession).\n.output Answer", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Melania Trump\", \"model\").\nHas_profession(\"Olga Kurylenko\", \"model\").\n.decl Answer()\nAnswer() :- Has_profession(\"Melania Trump\", profession), Has_profession(\"Olga Kurylenko\", profession).\n.output Answer"]}
{"id": 908, "answer": true, "completion": ".decl Requires(Task:symbol, Person:symbol)\nRequires(\"make circuit board\", \"engineer\").\n.decl Answer()\nAnswer() :- !Requires(\"make circuit board\", \"farmer\").\n.output Answer", "completions": [".decl Requires(Task:symbol, Person:symbol)\nRequires(\"make circuit board\", \"engineer\").\n.decl Answer()\nAnswer() :- !Requires(\"make circuit board\", \"farmer\").\n.output Answer"]}
{"id": 909, "answer": true, "completion": ".decl Has_eyesight(Animal:symbol, Eyesight:symbol)\nHas_eyesight(\"jumping spider\", \"excellent\").\n.decl Needs_contact_lenses(Eyesight:symbol, N_contact_lenses:float)\nNeeds_contact_lenses(\"excellent\", 0).\n.decl Answer()\nAnswer() :- Has_eyesight(\"jumping spider\", eyesight), Needs_contact_lenses(eyesight, n_contact_lenses), n_contact_lenses <= 6.\n.output Answer", "completions": [".decl Has_eyesight(Animal:symbol, Eyesight:symbol)\nHas_eyesight(\"jumping spider\", \"excellent\").\n.decl Needs_contact_lenses(Eyesight:symbol, N_contact_lenses:float)\nNeeds_contact_lenses(\"excellent\", 0).\n.decl Answer()\nAnswer() :- Has_eyesight(\"jumping spider\", eyesight), Needs_contact_lenses(eyesight, n_contact_lenses), n_contact_lenses <= 6.\n.output Answer"]}
{"id": 910, "answer": false, "completion": ".decl Made_with(Purchase:symbol, Currency:symbol)\nMade_with(\"Louisiana Purchase\", \"US Dollars\").\n.decl Answer()\nAnswer() :- !Made_with(\"Louisiana Purchase\", \"bitcoin\").\n.output Answer", "completions": [".decl Made_with(Purchase:symbol, Currency:symbol)\nMade_with(\"Louisiana Purchase\", \"US Dollars\").\n.decl Answer()\nAnswer() :- !Made_with(\"Louisiana Purchase\", \"bitcoin\").\n.output Answer"]}
{"id": 911, "answer": false, "completion": ".decl Has_length(Book:symbol, Length:float)\nHas_length(\"The Hobbit\", 295).\n.decl Answer()\nAnswer() :- Has_length(\"The Hobbit\", length), length <= 4.\n.output Answer", "completions": [".decl Has_length(Book:symbol, Length:float)\nHas_length(\"The Hobbit\", 295).\n.decl Answer()\nAnswer() :- Has_length(\"The Hobbit\", length), length <= 4.\n.output Answer"]}
{"id": 912, "answer": true, "completion": ".decl Costs(Object:symbol, Cost:float)\nCosts(\"Boeing 737\", 90000000).\nCosts(\"Wonder Woman (2017 film)\", 821000000).\n.decl Answer()\nAnswer() :- Costs(\"Boeing 737\", cost1), Costs(\"Wonder Woman (2017 film)\", cost2), cost1 <= cost2.\n.output Answer", "completions": [".decl Costs(Object:symbol, Cost:float)\nCosts(\"Boeing 737\", 90000000).\nCosts(\"Wonder Woman (2017 film)\", 821000000).\n.decl Answer()\nAnswer() :- Costs(\"Boeing 737\", cost1), Costs(\"Wonder Woman (2017 film)\", cost2), cost1 <= cost2.\n.output Answer"]}
{"id": 913, "answer": true, "completion": ".decl Involved_in(Person:symbol, Event:symbol)\nInvolved_in(\"paparazzi\", \"death of a member of the royal family\").\n.decl Answer()\nAnswer() :- Involved_in(\"paparazzi\", event).\n.output Answer", "completions": [".decl Involved_in(Person:symbol, Event:symbol)\nInvolved_in(\"paparazzi\", \"death of a member of the royal family\").\n.decl Answer()\nAnswer() :- Involved_in(\"paparazzi\", event).\n.output Answer"]}
{"id": 914, "answer": true, "completion": ".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"John Gall\", \"San Francisco\").\n.decl Located_in(University:symbol, City:symbol)\nLocated_in(\"Stanford University\", \"Palo Alto\").\n.decl Answer()\nAnswer() :- Lives_in(\"John Gall\", city1), Located_in(\"Stanford University\", city2), city1 = city2.\n.output Answer", "completions": [".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"John Gall\", \"San Francisco\").\n.decl Located_in(University:symbol, City:symbol)\nLocated_in(\"Stanford University\", \"Palo Alto\").\n.decl Answer()\nAnswer() :- Lives_in(\"John Gall\", city1), Located_in(\"Stanford University\", city2), city1 = city2.\n.output Answer"]}
{"id": 915, "answer": true, "completion": ".decl Takes_n_months(Event:symbol, N_months:float)\nTakes_n_months(\"slaughtering a pig\", 1).\nTakes_n_months(\"curing parma ham\", 12).\n.decl Answer()\nAnswer() :- Takes_n_months(\"slaughtering a pig\", n_months1), Takes_n_months(\"curing parma ham\", n_months2), n_months1 + n_months2 >= 12.\n.output Answer", "completions": [".decl Takes_n_months(Event:symbol, N_months:float)\nTakes_n_months(\"slaughtering a pig\", 1).\nTakes_n_months(\"curing parma ham\", 12).\n.decl Answer()\nAnswer() :- Takes_n_months(\"slaughtering a pig\", n_months1), Takes_n_months(\"curing parma ham\", n_months2), n_months1 + n_months2 >= 12.\n.output Answer"]}
{"id": 916, "answer": true, "completion": ".decl Believes(Practitioner:symbol, Belief:symbol)\nBelieves(\"Shivambu practitioner\", \"ammonia is unhealthy\").\n.decl Answer()\nAnswer() :- Believes(\"Shivambu practitioner\", belief).\n.output Answer", "completions": [".decl Believes(Practitioner:symbol, Belief:symbol)\nBelieves(\"Shivambu practitioner\", \"ammonia is unhealthy\").\n.decl Answer()\nAnswer() :- Believes(\"Shivambu practitioner\", belief).\n.output Answer"]}
{"id": 917, "answer": true, "completion": ".decl Eats(Agent:symbol, Food:symbol)\nEats(\"Hamas agent\", \"pig\").\n.decl Is_bad(Action:symbol)\nIs_bad(\"eating pig\").\n.decl Answer()\nAnswer() :- Eats(\"Hamas agent\", \"pig\"), Is_bad(\"eating pig\").\n.output Answer", "completions": [".decl Eats(Agent:symbol, Food:symbol)\nEats(\"Hamas agent\", \"pig\").\n.decl Is_bad(Action:symbol)\nIs_bad(\"eating pig\").\n.decl Answer()\nAnswer() :- Eats(\"Hamas agent\", \"pig\"), Is_bad(\"eating pig\").\n.output Answer"]}
{"id": 918, "answer": true, "completion": ".decl Plays_at(Band:symbol, Venue:symbol)\nPlays_at(\"Israelis\", \"Hammerstein Ballroom\").\n.decl Answer()\nAnswer() :- Plays_at(\"Israelis\", \"Hammerstein Ballroom\").\n.output Answer", "completions": [".decl Plays_at(Band:symbol, Venue:symbol)\nPlays_at(\"Israelis\", \"Hammerstein Ballroom\").\n.decl Answer()\nAnswer() :- Plays_at(\"Israelis\", \"Hammerstein Ballroom\").\n.output Answer"]}
{"id": 919, "answer": true, "completion": ".decl Plays_role(Person:symbol, Role:symbol)\nPlays_role(\"Elle Fanning\", \"actress\").\n.decl Ends(Event:symbol)\nEnds(\"apartheid\").\n.decl Answer()\nAnswer() :- Plays_role(\"Elle Fanning\", role), !Ends(\"apartheid\").\n.output Answer", "completions": [".decl Plays_role(Person:symbol, Role:symbol)\nPlays_role(\"Elle Fanning\", \"actress\").\n.decl Ends(Event:symbol)\nEnds(\"apartheid\").\n.decl Answer()\nAnswer() :- Plays_role(\"Elle Fanning\", role), !Ends(\"apartheid\").\n.output Answer"]}
{"id": 920, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Powerpuff Girls\", 6).\n.decl Has_age_requirement(Institution:symbol, Age_requirement:float)\nHas_age_requirement(\"Camden Military Academy\", 12).\n.decl Answer()\nAnswer() :- Has_age(\"Powerpuff Girls\", age), Has_age_requirement(\"Camden Military Academy\", age_requirement), age >= age_requirement.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Powerpuff Girls\", 6).\n.decl Has_age_requirement(Institution:symbol, Age_requirement:float)\nHas_age_requirement(\"Camden Military Academy\", 12).\n.decl Answer()\nAnswer() :- Has_age(\"Powerpuff Girls\", age), Has_age_requirement(\"Camden Military Academy\", age_requirement), age >= age_requirement.\n.output Answer"]}
{"id": 921, "answer": true, "completion": ".decl Can_do(Person:symbol, Activity:symbol)\nCan_do(\"Chuck Norris\", \"ride a horse\").\n.decl Answer()\nAnswer() :- Can_do(\"Chuck Norris\", \"ride a horse\").\n.output Answer", "completions": [".decl Can_do(Person:symbol, Activity:symbol)\nCan_do(\"Chuck Norris\", \"ride a horse\").\n.decl Answer()\nAnswer() :- Can_do(\"Chuck Norris\", \"ride a horse\").\n.output Answer"]}
{"id": 922, "answer": true, "completion": ".decl Uses(Event:symbol, Object:symbol)\nUses(\"Space Race\", \"rockets\").\nUses(\"Space Race\", \"satellites\").\nUses(\"Space Race\", \"computers\").\n.decl Answer()\nAnswer() :- !Uses(\"Space Race\", \"relay batons\").\n.output Answer", "completions": [".decl Uses(Event:symbol, Object:symbol)\nUses(\"Space Race\", \"rockets\").\nUses(\"Space Race\", \"satellites\").\nUses(\"Space Race\", \"computers\").\n.decl Answer()\nAnswer() :- !Uses(\"Space Race\", \"relay batons\").\n.output Answer"]}
{"id": 923, "answer": true, "completion": ".decl Approves(Person_A:symbol, Person_B:symbol)\nApproves(\"Harvey Milk\", \"Barack Obama\").\n.decl Answer()\nAnswer() :- Approves(\"Harvey Milk\", \"Barack Obama\").\n.output Answer", "completions": [".decl Approves(Person_A:symbol, Person_B:symbol)\nApproves(\"Harvey Milk\", \"Barack Obama\").\n.decl Answer()\nAnswer() :- Approves(\"Harvey Milk\", \"Barack Obama\").\n.output Answer"]}
{"id": 924, "answer": false, "completion": ".decl Needs_to_see(Object:symbol, Tool:symbol)\nNeeds_to_see(\"QR code\", \"glasses\").\n.decl Answer()\nAnswer() :- Needs_to_see(\"QR code\", \"glasses\").\n.output Answer", "completions": [".decl Needs_to_see(Object:symbol, Tool:symbol)\nNeeds_to_see(\"QR code\", \"glasses\").\n.decl Answer()\nAnswer() :- Needs_to_see(\"QR code\", \"glasses\").\n.output Answer"]}
{"id": 925, "answer": true, "completion": ".decl Spent_time(Person:symbol, State:symbol)\nSpent_time(\"Rumi\", \"meditation\").\n.decl Is_euphoric(State:symbol)\nIs_euphoric(\"euphoria\").\n.decl Answer()\nAnswer() :- Spent_time(\"Rumi\", state), Is_euphoric(state).\n.output Answer", "completions": [".decl Spent_time(Person:symbol, State:symbol)\nSpent_time(\"Rumi\", \"meditation\").\n.decl Is_euphoric(State:symbol)\nIs_euphoric(\"euphoria\").\n.decl Answer()\nAnswer() :- Spent_time(\"Rumi\", state), Is_euphoric(state).\n.output Answer"]}
{"id": 926, "answer": true, "completion": ".decl Is_useful_for(Test:symbol, Animal:symbol)\nIs_useful_for(\"dual-energy X-ray absorptiometry\", \"human\").\n.decl Answer()\nAnswer() :- !Is_useful_for(\"dual-energy X-ray absorptiometry\", \"crab\").\n.output Answer", "completions": [".decl Is_useful_for(Test:symbol, Animal:symbol)\nIs_useful_for(\"dual-energy X-ray absorptiometry\", \"human\").\n.decl Answer()\nAnswer() :- !Is_useful_for(\"dual-energy X-ray absorptiometry\", \"crab\").\n.output Answer"]}
{"id": 927, "answer": false, "completion": ".decl Has_aerodynamic_shape(Object:symbol, Aerodynamic_shape:symbol)\nHas_aerodynamic_shape(\"cactus\", \"yes\").\n.decl Benefits_from(Object:symbol, Action:symbol)\nBenefits_from(\"cactus\", \"frequently closed stomata\").\n.decl Answer()\nAnswer() :- Has_aerodynamic_shape(\"cactus\", \"yes\"), Benefits_from(\"cactus\", \"frequently closed stomata\").\n.output Answer", "completions": [".decl Has_aerodynamic_shape(Object:symbol, Aerodynamic_shape:symbol)\nHas_aerodynamic_shape(\"cactus\", \"yes\").\n.decl Benefits_from(Object:symbol, Action:symbol)\nBenefits_from(\"cactus\", \"frequently closed stomata\").\n.decl Answer()\nAnswer() :- Has_aerodynamic_shape(\"cactus\", \"yes\"), Benefits_from(\"cactus\", \"frequently closed stomata\").\n.output Answer"]}
{"id": 928, "answer": true, "completion": ".decl Is_harmful(Food:symbol, Condition:symbol)\nIs_harmful(\"oysters\", \"ADHD\").\n.decl Answer()\nAnswer() :- Is_harmful(\"oysters\", \"ADHD\").\n.output Answer", "completions": [".decl Is_harmful(Food:symbol, Condition:symbol)\nIs_harmful(\"oysters\", \"ADHD\").\n.decl Answer()\nAnswer() :- Is_harmful(\"oysters\", \"ADHD\").\n.output Answer"]}
{"id": 929, "answer": true, "completion": ".decl Is_on(Object:symbol, Location:symbol)\nIs_on(\"Royal Air Force ensign\", \"Earth\").\n.decl Answer()\nAnswer() :- !Is_on(\"Royal Air Force ensign\", \"moon\").\n.output Answer", "completions": [".decl Is_on(Object:symbol, Location:symbol)\nIs_on(\"Royal Air Force ensign\", \"Earth\").\n.decl Answer()\nAnswer() :- !Is_on(\"Royal Air Force ensign\", \"moon\").\n.output Answer"]}
{"id": 930, "answer": true, "completion": ".decl Has_citizens(Country:symbol, N_citizens:float)\nHas_citizens(\"Samoa\", 200000).\n.decl Has_employees(Company:symbol, N_employees:float)\nHas_employees(\"JPMorgan Chase\", 250000).\n.decl Answer()\nAnswer() :- Has_citizens(\"Samoa\", n_citizens), Has_employees(\"JPMorgan Chase\", n_employees), n_citizens <= n_employees.\n.output Answer", "completions": [".decl Has_citizens(Country:symbol, N_citizens:float)\nHas_citizens(\"Samoa\", 200000).\n.decl Has_employees(Company:symbol, N_employees:float)\nHas_employees(\"JPMorgan Chase\", 250000).\n.decl Answer()\nAnswer() :- Has_citizens(\"Samoa\", n_citizens), Has_employees(\"JPMorgan Chase\", n_employees), n_citizens <= n_employees.\n.output Answer"]}
{"id": 931, "answer": true, "completion": ".decl Contributes_to(Person:symbol, Work:symbol)\nContributes_to(\"Rosalind Franklin\", \"DNA structure\").\nContributes_to(\"James Watson\", \"DNA structure\").\nContributes_to(\"Francis Crick\", \"DNA structure\").\nContributes_to(\"DNA structure\", \"Whole Genome Sequencing\").\n.decl Answer()\nAnswer() :- Contributes_to(\"Rosalind Franklin\", work1), Contributes_to(work1, \"Whole Genome Sequencing\").\n.output Answer", "completions": [".decl Contributes_to(Person:symbol, Work:symbol)\nContributes_to(\"Rosalind Franklin\", \"DNA structure\").\nContributes_to(\"James Watson\", \"DNA structure\").\nContributes_to(\"Francis Crick\", \"DNA structure\").\nContributes_to(\"DNA structure\", \"Whole Genome Sequencing\").\n.decl Answer()\nAnswer() :- Contributes_to(\"Rosalind Franklin\", work1), Contributes_to(work1, \"Whole Genome Sequencing\").\n.output Answer"]}
{"id": 932, "answer": false, "completion": ".decl Has_qualifications(Person:symbol, Qualification:symbol)\nHas_qualifications(\"Kenny G\", \"accounting degree\").\n.decl Is_required_for(Qualification:symbol, Job:symbol)\nIs_required_for(\"accounting degree\", \"tax collector\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Kenny G\", qualification), Is_required_for(qualification, \"tax collector\").\n.output Answer", "completions": [".decl Has_qualifications(Person:symbol, Qualification:symbol)\nHas_qualifications(\"Kenny G\", \"accounting degree\").\n.decl Is_required_for(Qualification:symbol, Job:symbol)\nIs_required_for(\"accounting degree\", \"tax collector\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Kenny G\", qualification), Is_required_for(qualification, \"tax collector\").\n.output Answer"]}
{"id": 933, "answer": true, "completion": ".decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"Sable\", 10).\n.decl Is_member_of(Animal:symbol, Family:symbol)\nIs_member_of(\"Sable\", \"Mustelidae\").\n.decl Answer()\nAnswer() :- Has_weight(\"Sable\", weight), Is_member_of(\"Sable\", \"Mustelidae\"), weight > 0.\n.output Answer", "completions": [".decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"Sable\", 10).\n.decl Is_member_of(Animal:symbol, Family:symbol)\nIs_member_of(\"Sable\", \"Mustelidae\").\n.decl Answer()\nAnswer() :- Has_weight(\"Sable\", weight), Is_member_of(\"Sable\", \"Mustelidae\"), weight > 0.\n.output Answer"]}
{"id": 934, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Mickey Mouse\", \"black\").\nHas_color(\"American flag\", \"red\").\nHas_color(\"American flag\", \"white\").\nHas_color(\"American flag\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Mickey Mouse\", color1), Has_color(\"American flag\", color2), color1 != color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Mickey Mouse\", \"black\").\nHas_color(\"American flag\", \"red\").\nHas_color(\"American flag\", \"white\").\nHas_color(\"American flag\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Mickey Mouse\", color1), Has_color(\"American flag\", color2), color1 != color2.\n.output Answer"]}
{"id": 935, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Anakin Skywalker\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"Anakin Skywalker\", \"black\").\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Anakin Skywalker\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"Anakin Skywalker\", \"black\").\n.output Answer"]}
{"id": 936, "answer": true, "completion": ".decl Has_story(Religion:symbol, Story:symbol)\nHas_story(\"Christianity\", \"story of Jesus\").\nHas_story(\"Egyptian mythology\", \"Osiris myth\").\n.decl Answer()\nAnswer() :- Has_story(\"Christianity\", story1), Has_story(\"Egyptian mythology\", story2), story1 = story2.\n.output Answer", "completions": [".decl Has_story(Religion:symbol, Story:symbol)\nHas_story(\"Christianity\", \"story of Jesus\").\nHas_story(\"Egyptian mythology\", \"Osiris myth\").\n.decl Answer()\nAnswer() :- Has_story(\"Christianity\", story1), Has_story(\"Egyptian mythology\", story2), story1 = story2.\n.output Answer"]}
{"id": 937, "answer": false, "completion": ".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Jennifer Lawrence\", \"Shrader\").\n.decl Collaborates_with(Person1:symbol, Person2:symbol)\nCollaborates_with(\"Martin Scorsese\", \"Robert De Niro\").\nCollaborates_with(\"Martin Scorsese\", \"Leonardo DiCaprio\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Jennifer Lawrence\", middle_name), Collaborates_with(\"Martin Scorsese\", collaborator), middle_name = collaborator.\n.output Answer", "completions": [".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Jennifer Lawrence\", \"Shrader\").\n.decl Collaborates_with(Person1:symbol, Person2:symbol)\nCollaborates_with(\"Martin Scorsese\", \"Robert De Niro\").\nCollaborates_with(\"Martin Scorsese\", \"Leonardo DiCaprio\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Jennifer Lawrence\", middle_name), Collaborates_with(\"Martin Scorsese\", collaborator), middle_name = collaborator.\n.output Answer"]}
{"id": 938, "answer": true, "completion": ".decl Can_make(Object:symbol, Product:symbol)\nCan_make(\"Golden Gate Bridge\", \"tourist attraction\").\n.decl Answer()\nAnswer() :- !Can_make(\"Golden Gate Bridge\", \"MP3\").\n.output Answer", "completions": [".decl Can_make(Object:symbol, Product:symbol)\nCan_make(\"Golden Gate Bridge\", \"tourist attraction\").\n.decl Answer()\nAnswer() :- !Can_make(\"Golden Gate Bridge\", \"MP3\").\n.output Answer"]}
{"id": 939, "answer": true, "completion": ".decl Treats(Drug:symbol, Disease:symbol)\n.decl Answer()\nAnswer() :- !Treats(\"Prozac\", \"Great Depression\").\n.output Answer", "completions": [".decl Treats(Drug:symbol, Disease:symbol)\n.decl Answer()\nAnswer() :- !Treats(\"Prozac\", \"Great Depression\").\n.output Answer"]}
{"id": 940, "answer": true, "completion": ".decl Produces(Organization:symbol, Waste:symbol)\nProduces(\"United States Navy\", \"radioactive waste\").\n.decl Answer()\nAnswer() :- Produces(\"United States Navy\", \"radioactive waste\").\n.output Answer", "completions": [".decl Produces(Organization:symbol, Waste:symbol)\nProduces(\"United States Navy\", \"radioactive waste\").\n.decl Answer()\nAnswer() :- Produces(\"United States Navy\", \"radioactive waste\").\n.output Answer"]}
{"id": 941, "answer": false, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"clementine pith\", 5).\n.decl Answer()\nAnswer() :- Has_value(\"clementine pith\", value), value > 0.\n.output Answer", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"clementine pith\", 5).\n.decl Answer()\nAnswer() :- Has_value(\"clementine pith\", value), value > 0.\n.output Answer"]}
{"id": 942, "answer": true, "completion": ".decl Has_rank(Song:symbol, Rank:float)\nHas_rank(\"Lil Jon - Get Low (feat. The East Side Boyz & The Lox)\", 1).\n.decl Collaborates_with(Artist_A:symbol, Artist_B:symbol)\nCollaborates_with(\"Lil Jon\", \"The Lox\").\n.decl Answer()\nAnswer() :- Has_rank(\"Lil Jon - Get Low (feat. The East Side Boyz & The Lox)\", rank), Collaborates_with(\"Lil Jon\", \"The Lox\"), rank = 1.\n.output Answer", "completions": [".decl Has_rank(Song:symbol, Rank:float)\nHas_rank(\"Lil Jon - Get Low (feat. The East Side Boyz & The Lox)\", 1).\n.decl Collaborates_with(Artist_A:symbol, Artist_B:symbol)\nCollaborates_with(\"Lil Jon\", \"The Lox\").\n.decl Answer()\nAnswer() :- Has_rank(\"Lil Jon - Get Low (feat. The East Side Boyz & The Lox)\", rank), Collaborates_with(\"Lil Jon\", \"The Lox\"), rank = 1.\n.output Answer"]}
{"id": 943, "answer": true, "completion": ".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"Hindenburg explosion\", \"static electricity\").\n.decl Answer()\nAnswer() :- !Causes(\"Hindenburg explosion\", \"helium\").\n.output Answer", "completions": [".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"Hindenburg explosion\", \"static electricity\").\n.decl Answer()\nAnswer() :- !Causes(\"Hindenburg explosion\", \"helium\").\n.output Answer"]}
{"id": 944, "answer": false, "completion": ".decl Wins(Person:symbol, Race:symbol)\nWins(\"Al Unser Jr.\", \"Indianapolis 500\").\n.decl Answer()\nAnswer() :- !Wins(\"Al Unser Jr.\", \"Space Race\").\n.output Answer", "completions": [".decl Wins(Person:symbol, Race:symbol)\nWins(\"Al Unser Jr.\", \"Indianapolis 500\").\n.decl Answer()\nAnswer() :- !Wins(\"Al Unser Jr.\", \"Space Race\").\n.output Answer"]}
{"id": 945, "answer": true, "completion": ".decl Has_fear(Person:symbol, Object:symbol)\nHas_fear(\"half muggle wizards\", \"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Has_fear(\"half muggle wizards\", \"Lord Voldemort\").\n.output Answer", "completions": [".decl Has_fear(Person:symbol, Object:symbol)\nHas_fear(\"half muggle wizards\", \"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Has_fear(\"half muggle wizards\", \"Lord Voldemort\").\n.output Answer"]}
{"id": 946, "answer": true, "completion": ".decl Has_endowment(University:symbol, Endowment:float)\nHas_endowment(\"Johns Hopkins University\", 4.3e+10).\n.decl Has_debt(Organization:symbol, Debt:float)\nHas_debt(\"MBTA\", 5.2e+9).\n.decl Answer()\nAnswer() :- Has_endowment(\"Johns Hopkins University\", endowment), Has_debt(\"MBTA\", debt), endowment >= debt.\n.output Answer", "completions": [".decl Has_endowment(University:symbol, Endowment:float)\nHas_endowment(\"Johns Hopkins University\", 4.3e+10).\n.decl Has_debt(Organization:symbol, Debt:float)\nHas_debt(\"MBTA\", 5.2e+9).\n.decl Answer()\nAnswer() :- Has_endowment(\"Johns Hopkins University\", endowment), Has_debt(\"MBTA\", debt), endowment >= debt.\n.output Answer"]}
{"id": 947, "answer": false, "completion": ".decl Prefer(Company:symbol, Trade:symbol)\nPrefer(\"East India Company\", \"China's modern trade\").\n.decl Answer()\nAnswer() :- Prefer(\"East India Company\", \"China's modern trade\").\n.output Answer", "completions": [".decl Prefer(Company:symbol, Trade:symbol)\nPrefer(\"East India Company\", \"China's modern trade\").\n.decl Answer()\nAnswer() :- Prefer(\"East India Company\", \"China's modern trade\").\n.output Answer"]}
{"id": 948, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"US third grader\", 8).\n.decl Has_rating(Game:symbol, Rating:symbol)\nHas_rating(\"Guitar Hero Beatles\", \"T\").\n.decl Answer()\nAnswer() :- Has_age(\"US third grader\", age), Has_rating(\"Guitar Hero Beatles\", rating), rating != \"E\".\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"US third grader\", 8).\n.decl Has_rating(Game:symbol, Rating:symbol)\nHas_rating(\"Guitar Hero Beatles\", \"T\").\n.decl Answer()\nAnswer() :- Has_age(\"US third grader\", age), Has_rating(\"Guitar Hero Beatles\", rating), rating != \"E\".\n.output Answer"]}
{"id": 949, "answer": true, "completion": ".decl Has_n_marriages(Person:symbol, N_marriages:float)\nHas_n_marriages(\"Larry King\", 8).\n.decl Answer()\nAnswer() :- Has_n_marriages(\"Larry King\", n_marriages), n_marriages <= 2.\n.output Answer", "completions": [".decl Has_n_marriages(Person:symbol, N_marriages:float)\nHas_n_marriages(\"Larry King\", 8).\n.decl Answer()\nAnswer() :- Has_n_marriages(\"Larry King\", n_marriages), n_marriages <= 2.\n.output Answer"]}
{"id": 950, "answer": false, "completion": ".decl Has_sense(Animal:symbol, Sense:symbol)\nHas_sense(\"dog\", \"smell\").\n.decl Can_detect(Sense:symbol, Substance:symbol)\nCan_detect(\"smell\", \"ammonia\").\n.decl Answer()\nAnswer() :- Has_sense(\"dog\", sense), Can_detect(sense, \"ammonia\").\n.output Answer", "completions": [".decl Has_sense(Animal:symbol, Sense:symbol)\nHas_sense(\"dog\", \"smell\").\n.decl Can_detect(Sense:symbol, Substance:symbol)\nCan_detect(\"smell\", \"ammonia\").\n.decl Answer()\nAnswer() :- Has_sense(\"dog\", sense), Can_detect(sense, \"ammonia\").\n.output Answer"]}
{"id": 951, "answer": true, "completion": ".decl Sold_at(Product:symbol, Store:symbol)\n.decl Answer()\nAnswer() :- !Sold_at(\"Reddit\", \"Walmart\").\n.output Answer", "completions": [".decl Sold_at(Product:symbol, Store:symbol)\n.decl Answer()\nAnswer() :- !Sold_at(\"Reddit\", \"Walmart\").\n.output Answer"]}
{"id": 952, "answer": false, "completion": ".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Snowdon\", 1085).\n.decl Has_climbing_experience(Person:symbol, Experience:float)\nHas_climbing_experience(\"Tenzing Norgay\", 50).\n.decl Answer()\nAnswer() :- Has_height(\"Snowdon\", height), Has_climbing_experience(\"Tenzing Norgay\", experience), experience >= height.\n.output Answer", "completions": [".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Snowdon\", 1085).\n.decl Has_climbing_experience(Person:symbol, Experience:float)\nHas_climbing_experience(\"Tenzing Norgay\", 50).\n.decl Answer()\nAnswer() :- Has_height(\"Snowdon\", height), Has_climbing_experience(\"Tenzing Norgay\", experience), experience >= height.\n.output Answer"]}
{"id": 953, "answer": true, "completion": ".decl Has_subtext(Book:symbol, Subtext:symbol)\nHas_subtext(\"The Jungle Book\", \"racism\").\n.decl Answer()\nAnswer() :- Has_subtext(\"The Jungle Book\", \"racism\").\n.output Answer", "completions": [".decl Has_subtext(Book:symbol, Subtext:symbol)\nHas_subtext(\"The Jungle Book\", \"racism\").\n.decl Answer()\nAnswer() :- Has_subtext(\"The Jungle Book\", \"racism\").\n.output Answer"]}
{"id": 954, "answer": true, "completion": ".decl Can_do(Animal:symbol, Action:symbol)\nCan_do(\"sloth\", \"watch TV\").\n.decl Needs_environment(Action:symbol, Environment:symbol)\nNeeds_environment(\"watch TV\", \"dry land\").\n.decl Answer()\nAnswer() :- Can_do(\"sloth\", action), Needs_environment(action, \"dry land\"), !Needs_environment(action, \"underwater\").\n.output Answer", "completions": [".decl Can_do(Animal:symbol, Action:symbol)\nCan_do(\"sloth\", \"watch TV\").\n.decl Needs_environment(Action:symbol, Environment:symbol)\nNeeds_environment(\"watch TV\", \"dry land\").\n.decl Answer()\nAnswer() :- Can_do(\"sloth\", action), Needs_environment(action, \"dry land\"), !Needs_environment(action, \"underwater\").\n.output Answer"]}
{"id": 955, "answer": true, "completion": ".decl Has_heat_level(Food:symbol, Heat_level:float)\nHas_heat_level(\"jalapeno\", 5).\nHas_heat_level(\"Bhut jolokia\", 10).\n.decl Answer()\nAnswer() :- Has_heat_level(\"jalapeno\", heat_level1), Has_heat_level(\"Bhut jolokia\", heat_level2), heat_level2 > heat_level1.\n.output Answer", "completions": [".decl Has_heat_level(Food:symbol, Heat_level:float)\nHas_heat_level(\"jalapeno\", 5).\nHas_heat_level(\"Bhut jolokia\", 10).\n.decl Answer()\nAnswer() :- Has_heat_level(\"jalapeno\", heat_level1), Has_heat_level(\"Bhut jolokia\", heat_level2), heat_level2 > heat_level1.\n.output Answer"]}
{"id": 956, "answer": true, "completion": ".decl Has_spokesperson(Company:symbol, Spokesperson:symbol)\nHas_spokesperson(\"Subway\", \"Jared Fogle\").\n.decl Is_sex_offender(Person:symbol)\nIs_sex_offender(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Has_spokesperson(\"Subway\", spokesperson), Is_sex_offender(spokesperson).\n.output Answer", "completions": [".decl Has_spokesperson(Company:symbol, Spokesperson:symbol)\nHas_spokesperson(\"Subway\", \"Jared Fogle\").\n.decl Is_sex_offender(Person:symbol)\nIs_sex_offender(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Has_spokesperson(\"Subway\", spokesperson), Is_sex_offender(spokesperson).\n.output Answer"]}
{"id": 957, "answer": false, "completion": ".decl Is_awake(Person:symbol)\nIs_awake(\"Hellen Keller\").\n.decl Answer()\nAnswer() :- !Is_awake(\"Hellen Keller\").\n.output Answer", "completions": [".decl Is_awake(Person:symbol)\nIs_awake(\"Hellen Keller\").\n.decl Answer()\nAnswer() :- !Is_awake(\"Hellen Keller\").\n.output Answer"]}
{"id": 958, "answer": false, "completion": ".decl Has_rating(Party:symbol, Rating:float)\nHas_rating(\"Communist Party of the Soviet Union\", 0).\n.decl Is_perfect_all_kill(Rating:float)\nIs_perfect_all_kill(10).\n.decl Answer()\nAnswer() :- Has_rating(\"Communist Party of the Soviet Union\", rating), Is_perfect_all_kill(rating), rating = 10.\n.output Answer", "completions": [".decl Has_rating(Party:symbol, Rating:float)\nHas_rating(\"Communist Party of the Soviet Union\", 0).\n.decl Is_perfect_all_kill(Rating:float)\nIs_perfect_all_kill(10).\n.decl Answer()\nAnswer() :- Has_rating(\"Communist Party of the Soviet Union\", rating), Is_perfect_all_kill(rating), rating = 10.\n.output Answer"]}
{"id": 959, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Stanford Linear Accelerator\", 3.2).\nHas_length(\"Golden Gate Bridge\", 2.7).\n.decl Answer()\nAnswer() :- Has_length(\"Stanford Linear Accelerator\", length1), Has_length(\"Golden Gate Bridge\", length2), length1 > length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Stanford Linear Accelerator\", 3.2).\nHas_length(\"Golden Gate Bridge\", 2.7).\n.decl Answer()\nAnswer() :- Has_length(\"Stanford Linear Accelerator\", length1), Has_length(\"Golden Gate Bridge\", length2), length1 > length2.\n.output Answer"]}
{"id": 960, "answer": true, "completion": ".decl Can_measure(Object:symbol, Tool:symbol)\nCan_measure(\"Caracal\", \"tape measure\").\nCan_measure(\"Caracal\", \"ruler\").\n.decl Answer()\nAnswer() :- !Can_measure(\"Caracal\", \"protractor\").\n.output Answer", "completions": [".decl Can_measure(Object:symbol, Tool:symbol)\nCan_measure(\"Caracal\", \"tape measure\").\nCan_measure(\"Caracal\", \"ruler\").\n.decl Answer()\nAnswer() :- !Can_measure(\"Caracal\", \"protractor\").\n.output Answer"]}
{"id": 961, "answer": true, "completion": ".decl Has_sport(School:symbol, Sport:symbol)\nHas_sport(\"Marist\", \"rowing\").\n.decl Answer()\nAnswer() :- Has_sport(\"Marist\", \"rowing\").\n.output Answer", "completions": [".decl Has_sport(School:symbol, Sport:symbol)\nHas_sport(\"Marist\", \"rowing\").\n.decl Answer()\nAnswer() :- Has_sport(\"Marist\", \"rowing\").\n.output Answer"]}
{"id": 962, "answer": false, "completion": ".decl Tolerates(Person:symbol, Music:symbol)\nTolerates(\"Ibn Saud\", \"classical music\").\n.decl Answer()\nAnswer() :- Tolerates(\"Ibn Saud\", \"salsa music\").\n.output Answer", "completions": [".decl Tolerates(Person:symbol, Music:symbol)\nTolerates(\"Ibn Saud\", \"classical music\").\n.decl Answer()\nAnswer() :- Tolerates(\"Ibn Saud\", \"salsa music\").\n.output Answer"]}
{"id": 963, "answer": false, "completion": ".decl Has_atmosphere(Planet:symbol, Atmosphere:symbol)\nHas_atmosphere(\"Venus\", \"Carbon dioxide\").\n.decl Answer()\nAnswer() :- Has_atmosphere(\"Venus\", atmosphere), atmosphere != \"Oxygen\".\n.output Answer", "completions": [".decl Has_atmosphere(Planet:symbol, Atmosphere:symbol)\nHas_atmosphere(\"Venus\", \"Carbon dioxide\").\n.decl Answer()\nAnswer() :- Has_atmosphere(\"Venus\", atmosphere), atmosphere != \"Oxygen\".\n.output Answer"]}
{"id": 964, "answer": true, "completion": ".decl Is_accountable_to(Company:symbol, Group:symbol)\nIs_accountable_to(\"Samsung\", \"shareholders\").\n.decl Answer()\nAnswer() :- Is_accountable_to(\"Samsung\", \"shareholders\").\n.output Answer", "completions": [".decl Is_accountable_to(Company:symbol, Group:symbol)\nIs_accountable_to(\"Samsung\", \"shareholders\").\n.decl Answer()\nAnswer() :- Is_accountable_to(\"Samsung\", \"shareholders\").\n.output Answer"]}
{"id": 965, "answer": true, "completion": ".decl Tamed(Person:symbol, Animal:symbol)\nTamed(\"Cesar Millan\", \"short-eared dog\").\n.decl Answer()\nAnswer() :- Tamed(\"Cesar Millan\", \"short-eared dog\").\n.output Answer", "completions": [".decl Tamed(Person:symbol, Animal:symbol)\nTamed(\"Cesar Millan\", \"short-eared dog\").\n.decl Answer()\nAnswer() :- Tamed(\"Cesar Millan\", \"short-eared dog\").\n.output Answer"]}
{"id": 966, "answer": false, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Charlie Bucket\", \"chocolate factory worker\").\n.decl Answer()\nAnswer() :- Has_job(\"Charlie Bucket\", \"hotel manager\").\n.output Answer", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Charlie Bucket\", \"chocolate factory worker\").\n.decl Answer()\nAnswer() :- Has_job(\"Charlie Bucket\", \"hotel manager\").\n.output Answer"]}
{"id": 967, "answer": true, "completion": ".decl Ended_with(Event:symbol, Outcome:symbol)\nEnded_with(\"Presidency of Bill Clinton\", \"impeachment\").\n.decl Answer()\nAnswer() :- Ended_with(\"Presidency of Bill Clinton\", \"impeachment\").\n.output Answer", "completions": [".decl Ended_with(Event:symbol, Outcome:symbol)\nEnded_with(\"Presidency of Bill Clinton\", \"impeachment\").\n.decl Answer()\nAnswer() :- Ended_with(\"Presidency of Bill Clinton\", \"impeachment\").\n.output Answer"]}
{"id": 968, "answer": false, "completion": ".decl Has_attraction(Place:symbol, Attraction:symbol)\nHas_attraction(\"Forbidden City\", \"palace\").\nHas_attraction(\"Forbidden City\", \"temple\").\n.decl Answer()\nAnswer() :- !Has_attraction(\"Forbidden City\", \"wooden rollercoaster\").\n.output Answer", "completions": [".decl Has_attraction(Place:symbol, Attraction:symbol)\nHas_attraction(\"Forbidden City\", \"palace\").\nHas_attraction(\"Forbidden City\", \"temple\").\n.decl Answer()\nAnswer() :- !Has_attraction(\"Forbidden City\", \"wooden rollercoaster\").\n.output Answer"]}
{"id": 969, "answer": true, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Magnus Carlsen\", \"KFC\").\n.decl Answer()\nAnswer() :- Likes(\"Magnus Carlsen\", \"KFC\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Magnus Carlsen\", \"KFC\").\n.decl Answer()\nAnswer() :- Likes(\"Magnus Carlsen\", \"KFC\").\n.output Answer"]}
{"id": 970, "answer": false, "completion": ".decl Lives_on(Animal_A:symbol, Animal_B:symbol)\nLives_on(\"moth\", \"sloth\").\n.decl Has_family_dinners(Animal:symbol)\nHas_family_dinners(\"human\").\n.decl Answer()\nAnswer() :- Lives_on(animal, \"sloth\"), Has_family_dinners(animal).\n.output Answer", "completions": [".decl Lives_on(Animal_A:symbol, Animal_B:symbol)\nLives_on(\"moth\", \"sloth\").\n.decl Has_family_dinners(Animal:symbol)\nHas_family_dinners(\"human\").\n.decl Answer()\nAnswer() :- Lives_on(animal, \"sloth\"), Has_family_dinners(animal).\n.output Answer"]}
{"id": 971, "answer": true, "completion": ".decl Has_sales(Person:symbol, Sales:float)\nHas_sales(\"Kelly Clarkson\", 100).\nHas_sales(\"Season 4 American Idol Winner\", 50).\n.decl Answer()\nAnswer() :- Has_sales(\"Kelly Clarkson\", sales1), Has_sales(\"Season 4 American Idol Winner\", sales2), sales1 > sales2.\n.output Answer", "completions": [".decl Has_sales(Person:symbol, Sales:float)\nHas_sales(\"Kelly Clarkson\", 100).\nHas_sales(\"Season 4 American Idol Winner\", 50).\n.decl Answer()\nAnswer() :- Has_sales(\"Kelly Clarkson\", sales1), Has_sales(\"Season 4 American Idol Winner\", sales2), sales1 > sales2.\n.output Answer"]}
{"id": 972, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\n.decl Answer()\nAnswer() :- Has_height(\"Javier Sotomayor\", height1), !Has_height(\"caracal\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\n.decl Answer()\nAnswer() :- Has_height(\"Javier Sotomayor\", height1), !Has_height(\"caracal\", height2), height1 > height2.\n.output Answer"]}
{"id": 973, "answer": true, "completion": ".decl Has_n_presidents(Country:symbol, N_presidents:float)\nHas_n_presidents(\"United States\", 16).\n.decl Is_lucky_number(Number:float, Country:symbol)\nIs_lucky_number(16, \"Hong Kong\").\n.decl Answer()\nAnswer() :- Has_n_presidents(\"United States\", n_presidents), Is_lucky_number(n_presidents, \"Hong Kong\").\n.output Answer", "completions": [".decl Has_n_presidents(Country:symbol, N_presidents:float)\nHas_n_presidents(\"United States\", 16).\n.decl Is_lucky_number(Number:float, Country:symbol)\nIs_lucky_number(16, \"Hong Kong\").\n.decl Answer()\nAnswer() :- Has_n_presidents(\"United States\", n_presidents), Is_lucky_number(n_presidents, \"Hong Kong\").\n.output Answer"]}
{"id": 974, "answer": false, "completion": ".decl Has_law(Country:symbol, Law:symbol)\nHas_law(\"United States\", \"equal protection under the law\").\n.decl Answer()\nAnswer() :- Has_law(\"United States\", \"equal protection under the law\"), !Has_law(\"United States\", \"Oscar Wilde's treatment\").\n.output Answer", "completions": [".decl Has_law(Country:symbol, Law:symbol)\nHas_law(\"United States\", \"equal protection under the law\").\n.decl Answer()\nAnswer() :- Has_law(\"United States\", \"equal protection under the law\"), !Has_law(\"United States\", \"Oscar Wilde's treatment\").\n.output Answer"]}
{"id": 975, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"War in Vietnam\", \"1945-46\").\n.decl Offers_free_education(Country:symbol, Time:symbol)\nOffers_free_education(\"Soviet Union\", \"1945-46\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"War in Vietnam\", time), Offers_free_education(\"Soviet Union\", time).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"War in Vietnam\", \"1945-46\").\n.decl Offers_free_education(Country:symbol, Time:symbol)\nOffers_free_education(\"Soviet Union\", \"1945-46\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"War in Vietnam\", time), Offers_free_education(\"Soviet Union\", time).\n.output Answer"]}
{"id": 976, "answer": false, "completion": ".decl Eats_at(Animal:symbol, Restaurant:symbol)\n.decl Answer()\nAnswer() :- !Eats_at(\"goblin shark\", \"Crossroads Kitchen\").\n.output Answer", "completions": [".decl Eats_at(Animal:symbol, Restaurant:symbol)\n.decl Answer()\nAnswer() :- !Eats_at(\"goblin shark\", \"Crossroads Kitchen\").\n.output Answer"]}
{"id": 977, "answer": false, "completion": ".decl Experiences(Person:symbol, Event:symbol)\nExperiences(\"Hanuman\", \"love\").\n.decl Answer()\nAnswer() :- Experiences(\"Hanuman\", \"orgasm\"), !Experiences(\"Hanuman\", \"love\").\n.output Answer", "completions": [".decl Experiences(Person:symbol, Event:symbol)\nExperiences(\"Hanuman\", \"love\").\n.decl Answer()\nAnswer() :- Experiences(\"Hanuman\", \"orgasm\"), !Experiences(\"Hanuman\", \"love\").\n.output Answer"]}
{"id": 978, "answer": false, "completion": ".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"onion\", \"spherical\").\nHas_shape(\"tree\", \"hollow\").\n.decl Answer()\nAnswer() :- Has_shape(\"onion\", shape1), Has_shape(\"tree\", shape2), shape1 = shape2.\n.output Answer", "completions": [".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"onion\", \"spherical\").\nHas_shape(\"tree\", \"hollow\").\n.decl Answer()\nAnswer() :- Has_shape(\"onion\", shape1), Has_shape(\"tree\", shape2), shape1 = shape2.\n.output Answer"]}
{"id": 979, "answer": true, "completion": ".decl Is_related_company(Company_A:symbol, Company_B:symbol)\nIs_related_company(\"LinkedIn\", \"Microsoft\").\nIs_related_company(\"LeafedIn\", \"Microsoft\").\n.decl Answer()\nAnswer() :- Is_related_company(\"LinkedIn\", company2), Is_related_company(\"LeafedIn\", company2).\n.output Answer", "completions": [".decl Is_related_company(Company_A:symbol, Company_B:symbol)\nIs_related_company(\"LinkedIn\", \"Microsoft\").\nIs_related_company(\"LeafedIn\", \"Microsoft\").\n.decl Answer()\nAnswer() :- Is_related_company(\"LinkedIn\", company2), Is_related_company(\"LeafedIn\", company2).\n.output Answer"]}
{"id": 980, "answer": false, "completion": ".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"ocelot\", 30).\nHas_speed(\"kindergartner\", 5).\n.decl Answer()\nAnswer() :- Has_speed(\"ocelot\", speed1), Has_speed(\"kindergartner\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"ocelot\", 30).\nHas_speed(\"kindergartner\", 5).\n.decl Answer()\nAnswer() :- Has_speed(\"ocelot\", speed1), Has_speed(\"kindergartner\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 981, "answer": false, "completion": ".decl Has_population(Location:symbol, Population:float)\nHas_population(\"Warsaw Ghetto\", 400000).\n.decl Has_technology(Location:symbol, Technology:symbol)\nHas_technology(\"Warsaw Ghetto\", \"cell phones\").\n.decl Answer()\nAnswer() :- Has_population(\"Warsaw Ghetto\", population), population > 0, Has_technology(\"Warsaw Ghetto\", \"cell phones\").\n.output Answer", "completions": [".decl Has_population(Location:symbol, Population:float)\nHas_population(\"Warsaw Ghetto\", 400000).\n.decl Has_technology(Location:symbol, Technology:symbol)\nHas_technology(\"Warsaw Ghetto\", \"cell phones\").\n.decl Answer()\nAnswer() :- Has_population(\"Warsaw Ghetto\", population), population > 0, Has_technology(\"Warsaw Ghetto\", \"cell phones\").\n.output Answer"]}
{"id": 982, "answer": false, "completion": ".decl Is_in_galaxy(Object:symbol, Galaxy:symbol)\nIs_in_galaxy(\"Ganymede\", \"Milky Way\").\n.decl Answer()\nAnswer() :- Is_in_galaxy(\"Ganymede\", \"Milky Way\").\n.output Answer", "completions": [".decl Is_in_galaxy(Object:symbol, Galaxy:symbol)\nIs_in_galaxy(\"Ganymede\", \"Milky Way\").\n.decl Answer()\nAnswer() :- Is_in_galaxy(\"Ganymede\", \"Milky Way\").\n.output Answer"]}
{"id": 983, "answer": true, "completion": ".decl Has_symbol(Tattoo:symbol, Symbol:symbol)\nHas_symbol(\"snake and skull tattoo\", \"snake\").\nHas_symbol(\"snake and skull tattoo\", \"skull\").\n.decl Is_lucky(Symbol:symbol)\nIs_lucky(\"snake\").\nIs_lucky(\"skull\").\n.decl Answer()\nAnswer() :- Has_symbol(tattoo, symbol), Is_lucky(symbol).\n.output Answer", "completions": [".decl Has_symbol(Tattoo:symbol, Symbol:symbol)\nHas_symbol(\"snake and skull tattoo\", \"snake\").\nHas_symbol(\"snake and skull tattoo\", \"skull\").\n.decl Is_lucky(Symbol:symbol)\nIs_lucky(\"snake\").\nIs_lucky(\"skull\").\n.decl Answer()\nAnswer() :- Has_symbol(tattoo, symbol), Is_lucky(symbol).\n.output Answer"]}
{"id": 984, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Alan Alda\", 83).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Vietnam War\", 20).\n.decl Answer()\nAnswer() :- Has_age(\"Alan Alda\", age), Last_n_years(\"Vietnam War\", n_years), age >= n_years.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Alan Alda\", 83).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Vietnam War\", 20).\n.decl Answer()\nAnswer() :- Has_age(\"Alan Alda\", age), Last_n_years(\"Vietnam War\", n_years), age >= n_years.\n.output Answer"]}
{"id": 985, "answer": true, "completion": ".decl Has_title(Song:symbol, Title:symbol)\nHas_title(\"Van Morrison's most played song\", \"Brown Eyed Girl\").\n.decl Applies_to_minority(Title:symbol, Group:symbol)\nApplies_to_minority(\"Brown Eyed Girl\", \"women\").\n.decl Answer()\nAnswer() :- Has_title(\"Van Morrison's most played song\", title), Applies_to_minority(title, \"women\").\n.output Answer", "completions": [".decl Has_title(Song:symbol, Title:symbol)\nHas_title(\"Van Morrison's most played song\", \"Brown Eyed Girl\").\n.decl Applies_to_minority(Title:symbol, Group:symbol)\nApplies_to_minority(\"Brown Eyed Girl\", \"women\").\n.decl Answer()\nAnswer() :- Has_title(\"Van Morrison's most played song\", title), Applies_to_minority(title, \"women\").\n.output Answer"]}
{"id": 986, "answer": true, "completion": ".decl Refused_to_collaborate(Person:symbol, Group:symbol)\nRefused_to_collaborate(\"Snoop Dogg\", \"rival gang members\").\n.decl Answer()\nAnswer() :- Refused_to_collaborate(\"Snoop Dogg\", \"rival gang members\").\n.output Answer", "completions": [".decl Refused_to_collaborate(Person:symbol, Group:symbol)\nRefused_to_collaborate(\"Snoop Dogg\", \"rival gang members\").\n.decl Answer()\nAnswer() :- Refused_to_collaborate(\"Snoop Dogg\", \"rival gang members\").\n.output Answer"]}
{"id": 987, "answer": false, "completion": ".decl Written_by(Play:symbol, Author:symbol)\nWritten_by(\"Othello\", \"William Shakespeare\").\n.decl Has_time_with_king(Character:symbol, Time:float)\nHas_time_with_king(\"Scheherazade\", 1000).\n.decl Answer()\nAnswer() :- Written_by(play, \"William Shakespeare\"), Has_time_with_king(\"Scheherazade\", time), time > 0, play = \"Othello\".\n.output Answer", "completions": [".decl Written_by(Play:symbol, Author:symbol)\nWritten_by(\"Othello\", \"William Shakespeare\").\n.decl Has_time_with_king(Character:symbol, Time:float)\nHas_time_with_king(\"Scheherazade\", 1000).\n.decl Answer()\nAnswer() :- Written_by(play, \"William Shakespeare\"), Has_time_with_king(\"Scheherazade\", time), time > 0, play = \"Othello\".\n.output Answer"]}
{"id": 988, "answer": false, "completion": ".decl Difficulty_to_care(Animal:symbol, Difficulty:float)\nDifficulty_to_care(\"goldfish\", 5).\nDifficulty_to_care(\"isopods\", 3).\n.decl Answer()\nAnswer() :- Difficulty_to_care(\"goldfish\", difficulty1), Difficulty_to_care(\"isopods\", difficulty2), difficulty1 > difficulty2.\n.output Answer", "completions": [".decl Difficulty_to_care(Animal:symbol, Difficulty:float)\nDifficulty_to_care(\"goldfish\", 5).\nDifficulty_to_care(\"isopods\", 3).\n.decl Answer()\nAnswer() :- Difficulty_to_care(\"goldfish\", difficulty1), Difficulty_to_care(\"isopods\", difficulty2), difficulty1 > difficulty2.\n.output Answer"]}
{"id": 989, "answer": false, "completion": ".decl Has_box_office_revenue(Movie:symbol, Revenue:float)\nHas_box_office_revenue(\"Easy Rider\", 60.5).\n.decl Answer()\nAnswer() :- Has_box_office_revenue(\"Easy Rider\", revenue), revenue > 0.\n.output Answer", "completions": [".decl Has_box_office_revenue(Movie:symbol, Revenue:float)\nHas_box_office_revenue(\"Easy Rider\", 60.5).\n.decl Answer()\nAnswer() :- Has_box_office_revenue(\"Easy Rider\", revenue), revenue > 0.\n.output Answer"]}
{"id": 990, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Katharine Hepburn\", 96).\n.decl Opened_in_year(Train:symbol, Year:float)\nOpened_in_year(\"AirTrain JFK\", 2003).\n.decl Answer()\nAnswer() :- Has_age(\"Katharine Hepburn\", age), Opened_in_year(\"AirTrain JFK\", year), age < year.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Katharine Hepburn\", 96).\n.decl Opened_in_year(Train:symbol, Year:float)\nOpened_in_year(\"AirTrain JFK\", 2003).\n.decl Answer()\nAnswer() :- Has_age(\"Katharine Hepburn\", age), Opened_in_year(\"AirTrain JFK\", year), age < year.\n.output Answer"]}
{"id": 991, "answer": false, "completion": ".decl Has_salary(Position:symbol, Salary:float)\nHas_salary(\"high school head coach\", 50000).\nHas_salary(\"Head Coach at NCSU\", 100000).\n.decl Answer()\nAnswer() :- Has_salary(\"high school head coach\", salary1), Has_salary(\"Head Coach at NCSU\", salary2), salary1 >= salary2.\n.output Answer", "completions": [".decl Has_salary(Position:symbol, Salary:float)\nHas_salary(\"high school head coach\", 50000).\nHas_salary(\"Head Coach at NCSU\", 100000).\n.decl Answer()\nAnswer() :- Has_salary(\"high school head coach\", salary1), Has_salary(\"Head Coach at NCSU\", salary2), salary1 >= salary2.\n.output Answer"]}
{"id": 992, "answer": true, "completion": ".decl Has_rotations(Garbage_patch:symbol, N_rotations:float)\nHas_rotations(\"Indian Ocean garbage patch\", 0).\n.decl Answer()\nAnswer() :- Has_rotations(\"Indian Ocean garbage patch\", n_rotations), n_rotations != 2.\n.output Answer", "completions": [".decl Has_rotations(Garbage_patch:symbol, N_rotations:float)\nHas_rotations(\"Indian Ocean garbage patch\", 0).\n.decl Answer()\nAnswer() :- Has_rotations(\"Indian Ocean garbage patch\", n_rotations), n_rotations != 2.\n.output Answer"]}
{"id": 993, "answer": true, "completion": ".decl Has_age_requirement(Organization:symbol, Age_requirement:float)\nHas_age_requirement(\"US Army\", 18).\n.decl Answer()\nAnswer() :- Has_age_requirement(\"US Army\", age_requirement), age_requirement > 0.\n.output Answer", "completions": [".decl Has_age_requirement(Organization:symbol, Age_requirement:float)\nHas_age_requirement(\"US Army\", 18).\n.decl Answer()\nAnswer() :- Has_age_requirement(\"US Army\", age_requirement), age_requirement > 0.\n.output Answer"]}
{"id": 994, "answer": false, "completion": ".decl Requires_membership(App:symbol, Company:symbol)\nRequires_membership(\"T-Mobile tuesdays\", \"T-Mobile\").\n.decl Answer()\nAnswer() :- !Requires_membership(\"T-Mobile tuesdays\", \"T-Mobile\").\n.output Answer", "completions": [".decl Requires_membership(App:symbol, Company:symbol)\nRequires_membership(\"T-Mobile tuesdays\", \"T-Mobile\").\n.decl Answer()\nAnswer() :- !Requires_membership(\"T-Mobile tuesdays\", \"T-Mobile\").\n.output Answer"]}
{"id": 995, "answer": false, "completion": ".decl Is_named_after(Carol:symbol, Saint:symbol)\nIs_named_after(\"Silent Night\", \"Joseph\").\nIs_named_after(\"Joy to the World\", \"Joy\").\n.decl Answer()\nAnswer() :- Is_named_after(carol1, saint1), Is_named_after(carol2, saint2), carol1 != carol2.\n.output Answer", "completions": [".decl Is_named_after(Carol:symbol, Saint:symbol)\nIs_named_after(\"Silent Night\", \"Joseph\").\nIs_named_after(\"Joy to the World\", \"Joy\").\n.decl Answer()\nAnswer() :- Is_named_after(carol1, saint1), Is_named_after(carol2, saint2), carol1 != carol2.\n.output Answer"]}
{"id": 996, "answer": true, "completion": ".decl Supports(Person:symbol, Action:symbol)\nSupports(\"George Fox\", \"nonviolence\").\n.decl Answer()\nAnswer() :- Supports(\"George Fox\", action), !(action = \"stoning\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Action:symbol)\nSupports(\"George Fox\", \"nonviolence\").\n.decl Answer()\nAnswer() :- Supports(\"George Fox\", action), !(action = \"stoning\").\n.output Answer"]}
{"id": 997, "answer": false, "completion": ".decl Is_inappropriate(Lullaby:symbol)\nIs_inappropriate(\"Love Song\").\n.decl Happens_on_date(Event:symbol, Date:symbol)\nHappens_on_date(\"Love Song\", \"November 11, 2000\").\n.decl Answer()\nAnswer() :- Is_inappropriate(lullaby), Happens_on_date(lullaby, \"November 11, 2000\").\n.output Answer", "completions": [".decl Is_inappropriate(Lullaby:symbol)\nIs_inappropriate(\"Love Song\").\n.decl Happens_on_date(Event:symbol, Date:symbol)\nHappens_on_date(\"Love Song\", \"November 11, 2000\").\n.decl Answer()\nAnswer() :- Is_inappropriate(lullaby), Happens_on_date(lullaby, \"November 11, 2000\").\n.output Answer"]}
{"id": 998, "answer": true, "completion": ".decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(\"Lionel Richie\", \"Nicole Richie\").\nIs_related(\"Nicole Richie\", \"Sofia Richie\").\nIs_related(\"Sofia Richie\", \"Sheila E\").\n.decl Answer()\nAnswer() :- Is_related(\"Lionel Richie\", \"Sheila E\").\n.output Answer", "completions": [".decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(\"Lionel Richie\", \"Nicole Richie\").\nIs_related(\"Nicole Richie\", \"Sofia Richie\").\nIs_related(\"Sofia Richie\", \"Sheila E\").\n.decl Answer()\nAnswer() :- Is_related(\"Lionel Richie\", \"Sheila E\").\n.output Answer"]}
{"id": 999, "answer": true, "completion": ".decl Is_air_force(Airline:symbol, Country:symbol)\nIs_air_force(\"Royal Air Force\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- !Is_air_force(\"British Airways\", \"United Kingdom\").\n.output Answer", "completions": [".decl Is_air_force(Airline:symbol, Country:symbol)\nIs_air_force(\"Royal Air Force\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- !Is_air_force(\"British Airways\", \"United Kingdom\").\n.output Answer"]}
{"id": 1000, "answer": true, "completion": ".decl Says(Person:symbol, Phrase:symbol)\nSays(\"Star Wars fans\", \"May the Force be with you\").\n.decl Answer()\nAnswer() :- !Says(\"Star Wars fans\", \"beam me up\").\n.output Answer", "completions": [".decl Says(Person:symbol, Phrase:symbol)\nSays(\"Star Wars fans\", \"May the Force be with you\").\n.decl Answer()\nAnswer() :- !Says(\"Star Wars fans\", \"beam me up\").\n.output Answer"]}
{"id": 1001, "answer": true, "completion": ".decl Needs(Person:symbol, Resource:symbol)\nNeeds(\"someone using Chrome OS\", \"internet connection\").\n.decl Answer()\nAnswer() :- Needs(\"someone using Chrome OS\", \"internet connection\").\n.output Answer", "completions": [".decl Needs(Person:symbol, Resource:symbol)\nNeeds(\"someone using Chrome OS\", \"internet connection\").\n.decl Answer()\nAnswer() :- Needs(\"someone using Chrome OS\", \"internet connection\").\n.output Answer"]}
{"id": 1002, "answer": true, "completion": ".decl Has_box_office_revenue(Movie:symbol, Box_office_revenue:float)\nHas_box_office_revenue(\"Harry Potter\", 974000000).\nHas_box_office_revenue(\"The Matrix\", 463000000).\n.decl Answer()\nAnswer() :- Has_box_office_revenue(\"Harry Potter\", revenue1), Has_box_office_revenue(\"The Matrix\", revenue2), revenue1 > revenue2.\n.output Answer", "completions": [".decl Has_box_office_revenue(Movie:symbol, Box_office_revenue:float)\nHas_box_office_revenue(\"Harry Potter\", 974000000).\nHas_box_office_revenue(\"The Matrix\", 463000000).\n.decl Answer()\nAnswer() :- Has_box_office_revenue(\"Harry Potter\", revenue1), Has_box_office_revenue(\"The Matrix\", revenue2), revenue1 > revenue2.\n.output Answer"]}
{"id": 1003, "answer": true, "completion": ".decl Has_qualifications(Job:symbol, Qualifications:symbol)\nHas_qualifications(\"retail\", \"anybody\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"retail\", \"anybody\").\n.output Answer", "completions": [".decl Has_qualifications(Job:symbol, Qualifications:symbol)\nHas_qualifications(\"retail\", \"anybody\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"retail\", \"anybody\").\n.output Answer"]}
{"id": 1004, "answer": false, "completion": ".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"paleo dieter\", \"paleo diet\").\n.decl Includes_food(Diet:symbol, Food:symbol)\nIncludes_food(\"paleo diet\", \"green beverages\").\n.decl Answer()\nAnswer() :- Follows_diet(person, \"paleo diet\"), !Includes_food(\"paleo diet\", \"green beverages\").\n.output Answer", "completions": [".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"paleo dieter\", \"paleo diet\").\n.decl Includes_food(Diet:symbol, Food:symbol)\nIncludes_food(\"paleo diet\", \"green beverages\").\n.decl Answer()\nAnswer() :- Follows_diet(person, \"paleo diet\"), !Includes_food(\"paleo diet\", \"green beverages\").\n.output Answer"]}
{"id": 1005, "answer": true, "completion": ".decl Has_flag(Country:symbol, Flag:symbol)\nHas_flag(\"Argentina\", \"double triangle\").\n.decl Is_member_of(Country:symbol, Organization:symbol)\nIs_member_of(\"Argentina\", \"NATO\").\n.decl Answer()\nAnswer() :- Has_flag(country, \"double triangle\"), !Is_member_of(country, \"NATO\").\n.output Answer", "completions": [".decl Has_flag(Country:symbol, Flag:symbol)\nHas_flag(\"Argentina\", \"double triangle\").\n.decl Is_member_of(Country:symbol, Organization:symbol)\nIs_member_of(\"Argentina\", \"NATO\").\n.decl Answer()\nAnswer() :- Has_flag(country, \"double triangle\"), !Is_member_of(country, \"NATO\").\n.output Answer"]}
{"id": 1006, "answer": true, "completion": ".decl Witnesses(Person_A:symbol, Event:symbol)\n.decl Answer()\nAnswer() :- !Witnesses(\"Saddam Hussein\", \"inauguration of Donald Trump\").\n.output Answer", "completions": [".decl Witnesses(Person_A:symbol, Event:symbol)\n.decl Answer()\nAnswer() :- !Witnesses(\"Saddam Hussein\", \"inauguration of Donald Trump\").\n.output Answer"]}
{"id": 1007, "answer": false, "completion": ".decl Has_organ(Person:symbol, Organ:symbol)\nHas_organ(\"Alan Rickman\", \"lungs\").\nHas_organ(\"Alan Rickman\", \"heart\").\n.decl Has_functioning(Organ:symbol, Functioning:symbol)\nHas_functioning(\"lungs\", \"properly\").\nHas_functioning(\"heart\", \"properly\").\n.decl Answer()\nAnswer() :- Has_organ(\"Alan Rickman\", organ), Has_functioning(organ, \"improperly\").\n.output Answer", "completions": [".decl Has_organ(Person:symbol, Organ:symbol)\nHas_organ(\"Alan Rickman\", \"lungs\").\nHas_organ(\"Alan Rickman\", \"heart\").\n.decl Has_functioning(Organ:symbol, Functioning:symbol)\nHas_functioning(\"lungs\", \"properly\").\nHas_functioning(\"heart\", \"properly\").\n.decl Answer()\nAnswer() :- Has_organ(\"Alan Rickman\", organ), Has_functioning(organ, \"improperly\").\n.output Answer"]}
{"id": 1008, "answer": true, "completion": ".decl Treats_subjects_ethically(University:symbol, Time:symbol)\nTreats_subjects_ethically(\"Johns Hopkins University\", \"always\").\n.decl Answer()\nAnswer() :- Treats_subjects_ethically(\"Johns Hopkins University\", time).\n.output Answer", "completions": [".decl Treats_subjects_ethically(University:symbol, Time:symbol)\nTreats_subjects_ethically(\"Johns Hopkins University\", \"always\").\n.decl Answer()\nAnswer() :- Treats_subjects_ethically(\"Johns Hopkins University\", time).\n.output Answer"]}
{"id": 1009, "answer": true, "completion": ".decl Has_difficulty(Organization:symbol, Difficulty:float)\nHas_difficulty(\"University of Pittsburgh\", 3).\nHas_difficulty(\"FBI\", 5).\n.decl Answer()\nAnswer() :- Has_difficulty(\"University of Pittsburgh\", difficulty1), Has_difficulty(\"FBI\", difficulty2), difficulty1 < difficulty2.\n.output Answer", "completions": [".decl Has_difficulty(Organization:symbol, Difficulty:float)\nHas_difficulty(\"University of Pittsburgh\", 3).\nHas_difficulty(\"FBI\", 5).\n.decl Answer()\nAnswer() :- Has_difficulty(\"University of Pittsburgh\", difficulty1), Has_difficulty(\"FBI\", difficulty2), difficulty1 < difficulty2.\n.output Answer"]}
{"id": 1010, "answer": false, "completion": ".decl Is_member(Person:symbol, Group:symbol)\nIs_member(\"Aristotle\", \"Academy of Athens\").\n.decl Answer()\nAnswer() :- !Is_member(\"Aristotle\", \"House of Lords\").\n.output Answer", "completions": [".decl Is_member(Person:symbol, Group:symbol)\nIs_member(\"Aristotle\", \"Academy of Athens\").\n.decl Answer()\nAnswer() :- !Is_member(\"Aristotle\", \"House of Lords\").\n.output Answer"]}
{"id": 1011, "answer": false, "completion": ".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"John Doe\", \"Uberlandia\").\n.decl Employs(Company:symbol, Person:symbol)\nEmploys(\"Mitsubishi\", \"John Doe\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Uberlandia\"), Employs(\"Mitsubishi\", person).\n.output Answer", "completions": [".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"John Doe\", \"Uberlandia\").\n.decl Employs(Company:symbol, Person:symbol)\nEmploys(\"Mitsubishi\", \"John Doe\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Uberlandia\"), Employs(\"Mitsubishi\", person).\n.output Answer"]}
{"id": 1012, "answer": true, "completion": ".decl Has_similar_appearance(Animal_A:symbol, Animal_B:symbol)\nHas_similar_appearance(\"wolverine\", \"lynx\").\n.decl Answer()\nAnswer() :- Has_similar_appearance(\"wolverine\", \"lynx\").\n.output Answer", "completions": [".decl Has_similar_appearance(Animal_A:symbol, Animal_B:symbol)\nHas_similar_appearance(\"wolverine\", \"lynx\").\n.decl Answer()\nAnswer() :- Has_similar_appearance(\"wolverine\", \"lynx\").\n.output Answer"]}
{"id": 1013, "answer": false, "completion": ".decl Has_speed(Train:symbol, Speed:float)\nHas_speed(\"Amtrak's Acela Express\", 150).\n.decl Is_sound_barrier(Speed:float)\nIs_sound_barrier(343).\n.decl Answer()\nAnswer() :- Has_speed(\"Amtrak's Acela Express\", speed), Is_sound_barrier(sound_barrier), speed > sound_barrier.\n.output Answer", "completions": [".decl Has_speed(Train:symbol, Speed:float)\nHas_speed(\"Amtrak's Acela Express\", 150).\n.decl Is_sound_barrier(Speed:float)\nIs_sound_barrier(343).\n.decl Answer()\nAnswer() :- Has_speed(\"Amtrak's Acela Express\", speed), Is_sound_barrier(sound_barrier), speed > sound_barrier.\n.output Answer"]}
{"id": 1014, "answer": false, "completion": ".decl Transmits_disease(Person_A:symbol, Person_B:symbol, Disease:symbol)\nTransmits_disease(\"HIV positive person\", \"other person\", \"HIV\").\n.decl Answer()\nAnswer() :- !Transmits_disease(\"HIV positive person\", \"other person\", \"HIV\").\n.output Answer", "completions": [".decl Transmits_disease(Person_A:symbol, Person_B:symbol, Disease:symbol)\nTransmits_disease(\"HIV positive person\", \"other person\", \"HIV\").\n.decl Answer()\nAnswer() :- !Transmits_disease(\"HIV positive person\", \"other person\", \"HIV\").\n.output Answer"]}
{"id": 1015, "answer": true, "completion": ".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"dog\", \"worms\").\n.decl Answer()\nAnswer() :- Has_disease(\"dog\", disease), Has_disease(\"strawberry\", disease).\n.output Answer", "completions": [".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"dog\", \"worms\").\n.decl Answer()\nAnswer() :- Has_disease(\"dog\", disease), Has_disease(\"strawberry\", disease).\n.output Answer"]}
{"id": 1016, "answer": true, "completion": ".decl Has_smell(Fruit:symbol, Smell:symbol)\nHas_smell(\"Durian\", \"olfactory delight\").\n.decl Answer()\nAnswer() :- Has_smell(\"Durian\", smell), smell = \"olfactory delight\".\n.output Answer", "completions": [".decl Has_smell(Fruit:symbol, Smell:symbol)\nHas_smell(\"Durian\", \"olfactory delight\").\n.decl Answer()\nAnswer() :- Has_smell(\"Durian\", smell), smell = \"olfactory delight\".\n.output Answer"]}
{"id": 1017, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Gorillaz\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"Gorillaz\", n_members), n_members > 4.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Gorillaz\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"Gorillaz\", n_members), n_members > 4.\n.output Answer"]}
{"id": 1018, "answer": true, "completion": ".decl Protects(Amendment:symbol, Right:symbol)\nProtects(\"Eighth Amendment\", \"freedom of speech\").\n.decl Answer()\nAnswer() :- Protects(\"Eighth Amendment\", \"freedom of speech\").\n.output Answer", "completions": [".decl Protects(Amendment:symbol, Right:symbol)\nProtects(\"Eighth Amendment\", \"freedom of speech\").\n.decl Answer()\nAnswer() :- Protects(\"Eighth Amendment\", \"freedom of speech\").\n.output Answer"]}
{"id": 1019, "answer": true, "completion": ".decl Composed_theme_song(Composer:symbol, Series:symbol)\nComposed_theme_song(\"Richard Wagner\", \"The Simpsons\").\nComposed_theme_song(\"Richard Wagner\", \"Futurama\").\n.decl Answer()\nAnswer() :- Composed_theme_song(\"Richard Wagner\", _).\n.output Answer", "completions": [".decl Composed_theme_song(Composer:symbol, Series:symbol)\nComposed_theme_song(\"Richard Wagner\", \"The Simpsons\").\nComposed_theme_song(\"Richard Wagner\", \"Futurama\").\n.decl Answer()\nAnswer() :- Composed_theme_song(\"Richard Wagner\", _).\n.output Answer"]}
{"id": 1020, "answer": true, "completion": ".decl Has_musical_passion(Person:symbol, Musical_passion:symbol)\nHas_musical_passion(\"Squidward Tentacles\", \"jazz\").\nHas_musical_passion(\"Alan Greenspan\", \"classical\").\n.decl Answer()\nAnswer() :- Has_musical_passion(\"Squidward Tentacles\", passion1), Has_musical_passion(\"Alan Greenspan\", passion2), passion1 != passion2.\n.output Answer", "completions": [".decl Has_musical_passion(Person:symbol, Musical_passion:symbol)\nHas_musical_passion(\"Squidward Tentacles\", \"jazz\").\nHas_musical_passion(\"Alan Greenspan\", \"classical\").\n.decl Answer()\nAnswer() :- Has_musical_passion(\"Squidward Tentacles\", passion1), Has_musical_passion(\"Alan Greenspan\", passion2), passion1 != passion2.\n.output Answer"]}
{"id": 1021, "answer": false, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"Louvre's pyramid\", \"unbreakable\").\n.decl Answer()\nAnswer() :- Has_property(\"Louvre's pyramid\", \"unbreakable\").\n.output Answer", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"Louvre's pyramid\", \"unbreakable\").\n.decl Answer()\nAnswer() :- Has_property(\"Louvre's pyramid\", \"unbreakable\").\n.output Answer"]}
{"id": 1022, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Evander Holyfield\", \"pork\").\n.decl Answer()\nAnswer() :- Eats(\"Evander Holyfield\", \"pork\").\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Evander Holyfield\", \"pork\").\n.decl Answer()\nAnswer() :- Eats(\"Evander Holyfield\", \"pork\").\n.output Answer"]}
{"id": 1023, "answer": false, "completion": ".decl Involved_in(Country:symbol, Conflict:symbol)\nInvolved_in(\"England\", \"Arab-Israeli conflict\").\n.decl Answer()\nAnswer() :- Involved_in(\"England\", \"Arab-Israeli conflict\").\n.output Answer", "completions": [".decl Involved_in(Country:symbol, Conflict:symbol)\nInvolved_in(\"England\", \"Arab-Israeli conflict\").\n.decl Answer()\nAnswer() :- Involved_in(\"England\", \"Arab-Israeli conflict\").\n.output Answer"]}
{"id": 1024, "answer": true, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"person\", \"accountant\").\n.decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"person\", \"Dyscalculia\").\n.decl Difficulty_level(Profession:symbol, Difficulty_level:float)\nDifficulty_level(\"accountant\", 8).\n.decl Answer()\nAnswer() :- Has_profession(\"person\", profession), Has_disability(\"person\", disability), Difficulty_level(profession, difficulty_level), difficulty_level > 5.\n.output Answer", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"person\", \"accountant\").\n.decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"person\", \"Dyscalculia\").\n.decl Difficulty_level(Profession:symbol, Difficulty_level:float)\nDifficulty_level(\"accountant\", 8).\n.decl Answer()\nAnswer() :- Has_profession(\"person\", profession), Has_disability(\"person\", disability), Difficulty_level(profession, difficulty_level), difficulty_level > 5.\n.output Answer"]}
{"id": 1025, "answer": true, "completion": ".decl Uses(Person:symbol, Device:symbol)\nUses(\"Donatello\", \"computer\").\nUses(\"Donatello\", \"tablet\").\n.decl Answer()\nAnswer() :- !Uses(\"Donatello\", \"smartphone\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Device:symbol)\nUses(\"Donatello\", \"computer\").\nUses(\"Donatello\", \"tablet\").\n.decl Answer()\nAnswer() :- !Uses(\"Donatello\", \"smartphone\").\n.output Answer"]}
{"id": 1026, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmastime\", \"December\").\nHappens_in_time(\"groundhog day\", \"February\").\n.decl Reminds_of(Film:symbol, Event:symbol)\nReminds_of(\"Groundhog Day\", \"Christmastime\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmastime\", time1), Happens_in_time(\"groundhog day\", time2), Reminds_of(film, \"Christmastime\"), time1 < time2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmastime\", \"December\").\nHappens_in_time(\"groundhog day\", \"February\").\n.decl Reminds_of(Film:symbol, Event:symbol)\nReminds_of(\"Groundhog Day\", \"Christmastime\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmastime\", time1), Happens_in_time(\"groundhog day\", time2), Reminds_of(film, \"Christmastime\"), time1 < time2.\n.output Answer"]}
{"id": 1027, "answer": true, "completion": ".decl Has_alphabet(Language:symbol, Alphabet:symbol)\nHas_alphabet(\"Japanese\", \"kanji\").\nHas_alphabet(\"English\", \"Roman alphabet\").\n.decl Uses_trees(Process:symbol, N_trees:float)\nUses_trees(\"printing books\", 1).\nUses_trees(\"printing books in kanji\", 0.5).\n.decl Answer()\nAnswer() :- Has_alphabet(language1, \"kanji\"), Has_alphabet(language2, \"Roman alphabet\"), Uses_trees(\"printing books\", n_trees1), Uses_trees(\"printing books in kanji\", n_trees2), n_trees2 < n_trees1.\n.output Answer", "completions": [".decl Has_alphabet(Language:symbol, Alphabet:symbol)\nHas_alphabet(\"Japanese\", \"kanji\").\nHas_alphabet(\"English\", \"Roman alphabet\").\n.decl Uses_trees(Process:symbol, N_trees:float)\nUses_trees(\"printing books\", 1).\nUses_trees(\"printing books in kanji\", 0.5).\n.decl Answer()\nAnswer() :- Has_alphabet(language1, \"kanji\"), Has_alphabet(language2, \"Roman alphabet\"), Uses_trees(\"printing books\", n_trees1), Uses_trees(\"printing books in kanji\", n_trees2), n_trees2 < n_trees1.\n.output Answer"]}
{"id": 1028, "answer": true, "completion": ".decl Has_appearance(Object:symbol, Appearance:symbol)\nHas_appearance(\"Egyptian pyramids\", \"unchanged\").\n.decl Answer()\nAnswer() :- Has_appearance(\"Egyptian pyramids\", \"unchanged\").\n.output Answer", "completions": [".decl Has_appearance(Object:symbol, Appearance:symbol)\nHas_appearance(\"Egyptian pyramids\", \"unchanged\").\n.decl Answer()\nAnswer() :- Has_appearance(\"Egyptian pyramids\", \"unchanged\").\n.output Answer"]}
{"id": 1029, "answer": true, "completion": ".decl Has_storage_capacity(Device:symbol, Storage_capacity:float)\nHas_storage_capacity(\"Samsung Galaxy A10e\", 32).\n.decl Has_size(Episode:symbol, Size:float)\nHas_size(\"HD episode of Game of Thrones\", 4).\n.decl Answer()\nAnswer() :- Has_storage_capacity(\"Samsung Galaxy A10e\", storage_capacity), Has_size(\"HD episode of Game of Thrones\", size), storage_capacity >= size.\n.output Answer", "completions": [".decl Has_storage_capacity(Device:symbol, Storage_capacity:float)\nHas_storage_capacity(\"Samsung Galaxy A10e\", 32).\n.decl Has_size(Episode:symbol, Size:float)\nHas_size(\"HD episode of Game of Thrones\", 4).\n.decl Answer()\nAnswer() :- Has_storage_capacity(\"Samsung Galaxy A10e\", storage_capacity), Has_size(\"HD episode of Game of Thrones\", size), storage_capacity >= size.\n.output Answer"]}
{"id": 1030, "answer": true, "completion": ".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"Aerosmith\", \"driver's license\").\n.decl Is_allowed_in_lane(License:symbol, Lane:symbol)\nIs_allowed_in_lane(\"driver's license\", \"carpool lane\").\n.decl Answer()\nAnswer() :- Has_license(\"Aerosmith\", license), Is_allowed_in_lane(license, \"carpool lane\").\n.output Answer", "completions": [".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"Aerosmith\", \"driver's license\").\n.decl Is_allowed_in_lane(License:symbol, Lane:symbol)\nIs_allowed_in_lane(\"driver's license\", \"carpool lane\").\n.decl Answer()\nAnswer() :- Has_license(\"Aerosmith\", license), Is_allowed_in_lane(license, \"carpool lane\").\n.output Answer"]}
{"id": 1031, "answer": true, "completion": ".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"ostrich\", 2.5).\nHas_size(\"swallow\", 0.2).\n.decl Answer()\nAnswer() :- Has_size(\"ostrich\", size1), Has_size(\"swallow\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"ostrich\", 2.5).\nHas_size(\"swallow\", 0.2).\n.decl Answer()\nAnswer() :- Has_size(\"ostrich\", size1), Has_size(\"swallow\", size2), size1 < size2.\n.output Answer"]}
{"id": 1032, "answer": true, "completion": ".decl Can_house(Object:symbol, Place:symbol)\nCan_house(\"giant squid\", \"ocean\").\n.decl Answer()\nAnswer() :- !Can_house(\"giant squid\", \"Soldier Field\").\n.output Answer", "completions": [".decl Can_house(Object:symbol, Place:symbol)\nCan_house(\"giant squid\", \"ocean\").\n.decl Answer()\nAnswer() :- !Can_house(\"giant squid\", \"Soldier Field\").\n.output Answer"]}
{"id": 1033, "answer": true, "completion": ".decl Offends(Organization:symbol, Object:symbol)\nOffends(\"PETA\", \"animal cruelty\").\n.decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"Constitution of the United States\", \"paper\").\n.decl Answer()\nAnswer() :- Is_made_of(\"Constitution of the United States\", material), !Offends(\"PETA\", material).\n.output Answer", "completions": [".decl Offends(Organization:symbol, Object:symbol)\nOffends(\"PETA\", \"animal cruelty\").\n.decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"Constitution of the United States\", \"paper\").\n.decl Answer()\nAnswer() :- Is_made_of(\"Constitution of the United States\", material), !Offends(\"PETA\", material).\n.output Answer"]}
{"id": 1034, "answer": false, "completion": ".decl Has_body_part(Creature:symbol, Body_part:symbol)\nHas_body_part(\"minotaur\", \"tibia\").\n.decl Can_injure(Creature_A:symbol, Creature_B:symbol, Activity:symbol)\nCan_injure(\"minotaur\", \"tibia\", \"football\").\n.decl Answer()\nAnswer() :- Has_body_part(\"minotaur\", \"tibia\"), Can_injure(\"minotaur\", \"tibia\", \"football\").\n.output Answer", "completions": [".decl Has_body_part(Creature:symbol, Body_part:symbol)\nHas_body_part(\"minotaur\", \"tibia\").\n.decl Can_injure(Creature_A:symbol, Creature_B:symbol, Activity:symbol)\nCan_injure(\"minotaur\", \"tibia\", \"football\").\n.decl Answer()\nAnswer() :- Has_body_part(\"minotaur\", \"tibia\"), Can_injure(\"minotaur\", \"tibia\", \"football\").\n.output Answer"]}
{"id": 1035, "answer": false, "completion": ".decl Is_socially_acceptable(Object:symbol, Acceptability:symbol)\nIs_socially_acceptable(\"icon depicting crucifixion\", \"no\").\n.decl Answer()\nAnswer() :- Is_socially_acceptable(\"icon depicting crucifixion\", acceptability), acceptability = \"no\".\n.output Answer", "completions": [".decl Is_socially_acceptable(Object:symbol, Acceptability:symbol)\nIs_socially_acceptable(\"icon depicting crucifixion\", \"no\").\n.decl Answer()\nAnswer() :- Is_socially_acceptable(\"icon depicting crucifixion\", acceptability), acceptability = \"no\".\n.output Answer"]}
{"id": 1036, "answer": false, "completion": ".decl Has_blame(Company:symbol, Blame:symbol)\nHas_blame(\"United Airlines\", \"no\").\n.decl Answer()\nAnswer() :- Has_blame(\"United Airlines\", \"no\").\n.output Answer", "completions": [".decl Has_blame(Company:symbol, Blame:symbol)\nHas_blame(\"United Airlines\", \"no\").\n.decl Answer()\nAnswer() :- Has_blame(\"United Airlines\", \"no\").\n.output Answer"]}
{"id": 1037, "answer": true, "completion": ".decl Appears_in(Actor:symbol, Movie:symbol)\nAppears_in(\"Clark Gable\", \"Gone with the Wind\").\n.decl Scores(Composer:symbol, Movie:symbol)\nScores(\"John Williams\", \"Star Wars\").\n.decl Answer()\nAnswer() :- Appears_in(\"Clark Gable\", movie), Scores(\"John Williams\", movie).\n.output Answer", "completions": [".decl Appears_in(Actor:symbol, Movie:symbol)\nAppears_in(\"Clark Gable\", \"Gone with the Wind\").\n.decl Scores(Composer:symbol, Movie:symbol)\nScores(\"John Williams\", \"Star Wars\").\n.decl Answer()\nAnswer() :- Appears_in(\"Clark Gable\", movie), Scores(\"John Williams\", movie).\n.output Answer"]}
{"id": 1038, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"David Duchovny\", \"Atlantic Salmon\").\n.decl Answer()\nAnswer() :- Eats(\"David Duchovny\", \"Atlantic Salmon\").\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"David Duchovny\", \"Atlantic Salmon\").\n.decl Answer()\nAnswer() :- Eats(\"David Duchovny\", \"Atlantic Salmon\").\n.output Answer"]}
{"id": 1039, "answer": true, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"movie theater\", \"popcorn\").\nSells(\"car dealership\", \"General Motors products\").\n.decl Answer()\nAnswer() :- Sells(\"movie theater\", \"General Motors products\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"movie theater\", \"popcorn\").\nSells(\"car dealership\", \"General Motors products\").\n.decl Answer()\nAnswer() :- Sells(\"movie theater\", \"General Motors products\").\n.output Answer"]}
{"id": 1040, "answer": false, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Halloween cruise\", \"Gulf of Mexico\").\n.decl Has_weather(Location:symbol, Weather:symbol)\nHas_weather(\"Gulf of Mexico\", \"calm\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"Halloween cruise\", location), Has_weather(location, \"calm\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Halloween cruise\", \"Gulf of Mexico\").\n.decl Has_weather(Location:symbol, Weather:symbol)\nHas_weather(\"Gulf of Mexico\", \"calm\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"Halloween cruise\", location), Has_weather(location, \"calm\").\n.output Answer"]}
{"id": 1041, "answer": true, "completion": ".decl Has_income(Person:symbol, Income:float)\nHas_income(\"Billie Eilish\", 5000000).\n.decl Costs(Object:symbol, Cost:float)\nCosts(\"Porsche\", 100000).\n.decl Answer()\nAnswer() :- Has_income(\"Billie Eilish\", income), Costs(\"Porsche\", cost), income >= cost.\n.output Answer", "completions": [".decl Has_income(Person:symbol, Income:float)\nHas_income(\"Billie Eilish\", 5000000).\n.decl Costs(Object:symbol, Cost:float)\nCosts(\"Porsche\", 100000).\n.decl Answer()\nAnswer() :- Has_income(\"Billie Eilish\", income), Costs(\"Porsche\", cost), income >= cost.\n.output Answer"]}
{"id": 1042, "answer": false, "completion": ".decl Recommends(Profession:symbol, Treatment:symbol)\nRecommends(\"physician\", \"medication\").\nRecommends(\"physician\", \"surgery\").\n.decl Answer()\nAnswer() :- Recommends(\"physician\", treatment), !Recommends(\"physician\", \"Reiki\").\n.output Answer", "completions": [".decl Recommends(Profession:symbol, Treatment:symbol)\nRecommends(\"physician\", \"medication\").\nRecommends(\"physician\", \"surgery\").\n.decl Answer()\nAnswer() :- Recommends(\"physician\", treatment), !Recommends(\"physician\", \"Reiki\").\n.output Answer"]}
{"id": 1043, "answer": false, "completion": ".decl Is_useful_for(Object_A:symbol, Object_B:symbol)\nIs_useful_for(\"common warthog\", \"scrimshaw\").\n.decl Answer()\nAnswer() :- Is_useful_for(\"common warthog\", \"scrimshaw\").\n.output Answer", "completions": [".decl Is_useful_for(Object_A:symbol, Object_B:symbol)\nIs_useful_for(\"common warthog\", \"scrimshaw\").\n.decl Answer()\nAnswer() :- Is_useful_for(\"common warthog\", \"scrimshaw\").\n.output Answer"]}
{"id": 1044, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"American\", \"English\").\n.decl Has_language(Place:symbol, Language:symbol)\nHas_language(\"Disneyland Paris\", \"French\").\n.decl Answer()\nAnswer() :- Speaks(\"American\", language1), Has_language(\"Disneyland Paris\", language2), language1 != language2.\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"American\", \"English\").\n.decl Has_language(Place:symbol, Language:symbol)\nHas_language(\"Disneyland Paris\", \"French\").\n.decl Answer()\nAnswer() :- Speaks(\"American\", language1), Has_language(\"Disneyland Paris\", language2), language1 != language2.\n.output Answer"]}
{"id": 1045, "answer": false, "completion": ".decl Is_foolish(Action:symbol)\nIs_foolish(\"stand on giraffe's head\").\n.decl Answer()\nAnswer() :- Is_foolish(\"stand on giraffe's head\").\n.output Answer", "completions": [".decl Is_foolish(Action:symbol)\nIs_foolish(\"stand on giraffe's head\").\n.decl Answer()\nAnswer() :- Is_foolish(\"stand on giraffe's head\").\n.output Answer"]}
{"id": 1046, "answer": true, "completion": ".decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"gladiator's weapon\", 5).\nHas_hardness(\"diamond\", 10).\n.decl Answer()\nAnswer() :- Has_hardness(\"gladiator's weapon\", hardness1), Has_hardness(\"diamond\", hardness2), hardness1 < hardness2.\n.output Answer", "completions": [".decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"gladiator's weapon\", 5).\nHas_hardness(\"diamond\", 10).\n.decl Answer()\nAnswer() :- Has_hardness(\"gladiator's weapon\", hardness1), Has_hardness(\"diamond\", hardness2), hardness1 < hardness2.\n.output Answer"]}
{"id": 1047, "answer": true, "completion": ".decl Necessary_for(Object:symbol, Activity:symbol)\nNecessary_for(\"curling iron\", \"curling\").\n.decl Answer()\nAnswer() :- Necessary_for(\"curling iron\", \"curling\").\n.output Answer", "completions": [".decl Necessary_for(Object:symbol, Activity:symbol)\nNecessary_for(\"curling iron\", \"curling\").\n.decl Answer()\nAnswer() :- Necessary_for(\"curling iron\", \"curling\").\n.output Answer"]}
{"id": 1048, "answer": true, "completion": ".decl Has_side_effect(Drug:symbol, Side_effect:symbol)\nHas_side_effect(\"antidepressants\", \"increased sensitivity to sunlight\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"citrus fruits\", \"vitamin C\").\n.decl Answer()\nAnswer() :- Has_side_effect(\"antidepressants\", \"increased sensitivity to sunlight\"), Has_ingredient(\"citrus fruits\", \"vitamin C\").\n.output Answer", "completions": [".decl Has_side_effect(Drug:symbol, Side_effect:symbol)\nHas_side_effect(\"antidepressants\", \"increased sensitivity to sunlight\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"citrus fruits\", \"vitamin C\").\n.decl Answer()\nAnswer() :- Has_side_effect(\"antidepressants\", \"increased sensitivity to sunlight\"), Has_ingredient(\"citrus fruits\", \"vitamin C\").\n.output Answer"]}
{"id": 1049, "answer": true, "completion": ".decl Uses(Practice:symbol, Object:symbol)\nUses(\"numerology\", \"building layouts\").\n.decl Answer()\nAnswer() :- Uses(\"numerology\", \"hotel layouts\").\n.output Answer", "completions": [".decl Uses(Practice:symbol, Object:symbol)\nUses(\"numerology\", \"building layouts\").\n.decl Answer()\nAnswer() :- Uses(\"numerology\", \"hotel layouts\").\n.output Answer"]}
{"id": 1050, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Michael Phelps\", \"swimming\").\n.decl Answer()\nAnswer() :- Has_skill(\"Michael Phelps\", skill), skill != \"pearl hunting\".\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Michael Phelps\", \"swimming\").\n.decl Answer()\nAnswer() :- Has_skill(\"Michael Phelps\", skill), skill != \"pearl hunting\".\n.output Answer"]}
{"id": 1051, "answer": true, "completion": ".decl Accepts_currency(Location:symbol, Currency:symbol)\nAccepts_currency(\"New York City\", \"USD\").\nAccepts_currency(\"New York City\", \"Euros\").\n.decl Answer()\nAnswer() :- Accepts_currency(\"New York City\", \"Euros\").\n.output Answer", "completions": [".decl Accepts_currency(Location:symbol, Currency:symbol)\nAccepts_currency(\"New York City\", \"USD\").\nAccepts_currency(\"New York City\", \"Euros\").\n.decl Answer()\nAnswer() :- Accepts_currency(\"New York City\", \"Euros\").\n.output Answer"]}
{"id": 1052, "answer": true, "completion": ".decl Necessary_to_win(Object:symbol, Event:symbol)\nNecessary_to_win(\"hockey stick\", \"Stanley Cup\").\n.decl Answer()\nAnswer() :- ! Necessary_to_win(\"tibia\", \"Stanley Cup\").\n.output Answer", "completions": [".decl Necessary_to_win(Object:symbol, Event:symbol)\nNecessary_to_win(\"hockey stick\", \"Stanley Cup\").\n.decl Answer()\nAnswer() :- ! Necessary_to_win(\"tibia\", \"Stanley Cup\").\n.output Answer"]}
{"id": 1053, "answer": true, "completion": ".decl Writes(Person:symbol, Sketch:symbol)\nWrites(\"Abbott and Costello\", \"Who's on First\").\n.decl Answer()\nAnswer() :- !Writes(\"Monty Python\", \"Who's on First\").\n.output Answer", "completions": [".decl Writes(Person:symbol, Sketch:symbol)\nWrites(\"Abbott and Costello\", \"Who's on First\").\n.decl Answer()\nAnswer() :- !Writes(\"Monty Python\", \"Who's on First\").\n.output Answer"]}
{"id": 1054, "answer": true, "completion": ".decl Is_arabic_numeral(Symbol:symbol)\nIs_arabic_numeral(\"0\").\nIs_arabic_numeral(\"1\").\nIs_arabic_numeral(\"2\").\nIs_arabic_numeral(\"3\").\nIs_arabic_numeral(\"4\").\nIs_arabic_numeral(\"5\").\nIs_arabic_numeral(\"6\").\nIs_arabic_numeral(\"7\").\nIs_arabic_numeral(\"8\").\nIs_arabic_numeral(\"9\").\n.decl Answer()\nAnswer() :- Is_arabic_numeral(\"B\").\n.output Answer", "completions": [".decl Is_arabic_numeral(Symbol:symbol)\nIs_arabic_numeral(\"0\").\nIs_arabic_numeral(\"1\").\nIs_arabic_numeral(\"2\").\nIs_arabic_numeral(\"3\").\nIs_arabic_numeral(\"4\").\nIs_arabic_numeral(\"5\").\nIs_arabic_numeral(\"6\").\nIs_arabic_numeral(\"7\").\nIs_arabic_numeral(\"8\").\nIs_arabic_numeral(\"9\").\n.decl Answer()\nAnswer() :- Is_arabic_numeral(\"B\").\n.output Answer"]}
{"id": 1055, "answer": true, "completion": ".decl Has_talent(Person:symbol, Talent:symbol)\nHas_talent(\"Brian Warner\", \"singing\").\n.decl Suitable_for(Talent:symbol, Genre:symbol)\nSuitable_for(\"singing\", \"soul music\").\n.decl Answer()\nAnswer() :- Has_talent(\"Brian Warner\", talent), Suitable_for(talent, \"soul music\").\n.output Answer", "completions": [".decl Has_talent(Person:symbol, Talent:symbol)\nHas_talent(\"Brian Warner\", \"singing\").\n.decl Suitable_for(Talent:symbol, Genre:symbol)\nSuitable_for(\"singing\", \"soul music\").\n.decl Answer()\nAnswer() :- Has_talent(\"Brian Warner\", talent), Suitable_for(talent, \"soul music\").\n.output Answer"]}
{"id": 1056, "answer": true, "completion": ".decl Teaches(Teacher:symbol, Book:symbol)\nTeaches(\"Hugh Jackman\", \"The Great Gatsby\").\n.decl Was_teacher(Person:symbol, Time:symbol)\nWas_teacher(\"Hugh Jackman\", \"past\").\n.decl Answer()\nAnswer() :- Was_teacher(\"Hugh Jackman\", time), Teaches(\"Hugh Jackman\", \"The Great Gatsby\").\n.output Answer", "completions": [".decl Teaches(Teacher:symbol, Book:symbol)\nTeaches(\"Hugh Jackman\", \"The Great Gatsby\").\n.decl Was_teacher(Person:symbol, Time:symbol)\nWas_teacher(\"Hugh Jackman\", \"past\").\n.decl Answer()\nAnswer() :- Was_teacher(\"Hugh Jackman\", time), Teaches(\"Hugh Jackman\", \"The Great Gatsby\").\n.output Answer"]}
{"id": 1057, "answer": false, "completion": ".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"binge watch of entire Young and the Restless\", 86400).\nHas_duration(\"leap year\", 31622400).\n.decl Answer()\nAnswer() :- Has_duration(\"binge watch of entire Young and the Restless\", duration1), Has_duration(\"leap year\", duration2), duration1 > duration2.\n.output Answer", "completions": [".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"binge watch of entire Young and the Restless\", 86400).\nHas_duration(\"leap year\", 31622400).\n.decl Answer()\nAnswer() :- Has_duration(\"binge watch of entire Young and the Restless\", duration1), Has_duration(\"leap year\", duration2), duration1 > duration2.\n.output Answer"]}
{"id": 1058, "answer": true, "completion": ".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"John Paul II\", \"Catholicism\").\nBelieves_in(\"Benedict XVI\", \"Catholicism\").\nBelieves_in(\"Francis\", \"Catholicism\").\n.decl Answer()\nAnswer() :- !Believes_in(person, \"agnosticism\").\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"John Paul II\", \"Catholicism\").\nBelieves_in(\"Benedict XVI\", \"Catholicism\").\nBelieves_in(\"Francis\", \"Catholicism\").\n.decl Answer()\nAnswer() :- !Believes_in(person, \"agnosticism\").\n.output Answer"]}
{"id": 1059, "answer": false, "completion": ".decl Needs_facility(Animal:symbol, Facility:symbol)\nNeeds_facility(\"giraffe\", \"tall enclosure\").\n.decl Answer()\nAnswer() :- Needs_facility(\"giraffe\", facility).\n.output Answer", "completions": [".decl Needs_facility(Animal:symbol, Facility:symbol)\nNeeds_facility(\"giraffe\", \"tall enclosure\").\n.decl Answer()\nAnswer() :- Needs_facility(\"giraffe\", facility).\n.output Answer"]}
{"id": 1060, "answer": false, "completion": ".decl Affects(Disease:symbol, Organism:symbol)\nAffects(\"cerebral palsy\", \"human\").\n.decl Answer()\nAnswer() :- !Affects(\"cerebral palsy\", \"slime mold\").\n.output Answer", "completions": [".decl Affects(Disease:symbol, Organism:symbol)\nAffects(\"cerebral palsy\", \"human\").\n.decl Answer()\nAnswer() :- !Affects(\"cerebral palsy\", \"slime mold\").\n.output Answer"]}
{"id": 1061, "answer": false, "completion": ".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"Leonardo da Vinci\", \"Florence\").\n.decl Has_contemporary_peers(Person:symbol, City:symbol)\nHas_contemporary_peers(\"Leonardo da Vinci\", \"Florence\").\n.decl Answer()\nAnswer() :- Lives_in(\"Leonardo da Vinci\", city), !Has_contemporary_peers(\"Leonardo da Vinci\", city).\n.output Answer", "completions": [".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"Leonardo da Vinci\", \"Florence\").\n.decl Has_contemporary_peers(Person:symbol, City:symbol)\nHas_contemporary_peers(\"Leonardo da Vinci\", \"Florence\").\n.decl Answer()\nAnswer() :- Lives_in(\"Leonardo da Vinci\", city), !Has_contemporary_peers(\"Leonardo da Vinci\", city).\n.output Answer"]}
{"id": 1062, "answer": true, "completion": ".decl Takes(Person:symbol, Drug:symbol)\nTakes(\"John\", \"laxatives\").\n.decl Causes(Drug:symbol, Effect:symbol)\nCauses(\"laxatives\", \"diarrhea\").\n.decl Enjoys(Person:symbol, Effect:symbol)\nEnjoys(\"John\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Takes(person, \"laxatives\"), Causes(\"laxatives\", effect), Enjoys(person, effect).\n.output Answer", "completions": [".decl Takes(Person:symbol, Drug:symbol)\nTakes(\"John\", \"laxatives\").\n.decl Causes(Drug:symbol, Effect:symbol)\nCauses(\"laxatives\", \"diarrhea\").\n.decl Enjoys(Person:symbol, Effect:symbol)\nEnjoys(\"John\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Takes(person, \"laxatives\"), Causes(\"laxatives\", effect), Enjoys(person, effect).\n.output Answer"]}
{"id": 1063, "answer": false, "completion": ".decl Makes_rich(Event:symbol, People:symbol)\nMakes_rich(\"Ice\", \"people\").\n.decl Answer()\nAnswer() :- Makes_rich(\"Ice\", \"people\").\n.output Answer", "completions": [".decl Makes_rich(Event:symbol, People:symbol)\nMakes_rich(\"Ice\", \"people\").\n.decl Answer()\nAnswer() :- Makes_rich(\"Ice\", \"people\").\n.output Answer"]}
{"id": 1064, "answer": true, "completion": ".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Rabbi\", \"Hanukkah\").\n.decl Answer()\nAnswer() :- !Celebrates(\"Rabbi\", \"Christmas\").\n.output Answer", "completions": [".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Rabbi\", \"Hanukkah\").\n.decl Answer()\nAnswer() :- !Celebrates(\"Rabbi\", \"Christmas\").\n.output Answer"]}
{"id": 1065, "answer": true, "completion": ".decl Knows_language(Person:symbol, Language:symbol)\nKnows_language(\"Rahul Dravid\", \"Hindi\").\n.decl Language_spoken_in_region(Region:symbol, Language:symbol)\nLanguage_spoken_in_region(\"Aurangabad\", \"Marathi\").\n.decl Answer()\nAnswer() :- Knows_language(\"Rahul Dravid\", language1), Language_spoken_in_region(\"Aurangabad\", language2), language1 != language2.\n.output Answer", "completions": [".decl Knows_language(Person:symbol, Language:symbol)\nKnows_language(\"Rahul Dravid\", \"Hindi\").\n.decl Language_spoken_in_region(Region:symbol, Language:symbol)\nLanguage_spoken_in_region(\"Aurangabad\", \"Marathi\").\n.decl Answer()\nAnswer() :- Knows_language(\"Rahul Dravid\", language1), Language_spoken_in_region(\"Aurangabad\", language2), language1 != language2.\n.output Answer"]}
{"id": 1066, "answer": true, "completion": ".decl Is_famous_for(Person:symbol, Reason:symbol)\nIs_famous_for(\"Shakespeare\", \"writing plays\").\n.decl Answer()\nAnswer() :- !Is_famous_for(\"Shakespeare\", \"infinitive form\").\n.output Answer", "completions": [".decl Is_famous_for(Person:symbol, Reason:symbol)\nIs_famous_for(\"Shakespeare\", \"writing plays\").\n.decl Answer()\nAnswer() :- !Is_famous_for(\"Shakespeare\", \"infinitive form\").\n.output Answer"]}
{"id": 1067, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"referee\", \"black\").\nHas_color(\"soccer field\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"referee\", color1), Has_color(\"soccer field\", color2), color1 != color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"referee\", \"black\").\nHas_color(\"soccer field\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"referee\", color1), Has_color(\"soccer field\", color2), color1 != color2.\n.output Answer"]}
{"id": 1068, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"pirates\", \"scurvy\").\n.decl Needs_vitamin(Disease:symbol, Vitamin:symbol)\nNeeds_vitamin(\"scurvy\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Has_disease(\"pirates\", disease), Needs_vitamin(disease, \"Vitamin C\").\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"pirates\", \"scurvy\").\n.decl Needs_vitamin(Disease:symbol, Vitamin:symbol)\nNeeds_vitamin(\"scurvy\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Has_disease(\"pirates\", disease), Needs_vitamin(disease, \"Vitamin C\").\n.output Answer"]}
{"id": 1069, "answer": false, "completion": ".decl Has_nutrients(Food:symbol, Nutrients:symbol)\nHas_nutrients(\"ice\", \"none\").\n.decl Answer()\nAnswer() :- Has_nutrients(\"ice\", \"none\").\n.output Answer", "completions": [".decl Has_nutrients(Food:symbol, Nutrients:symbol)\nHas_nutrients(\"ice\", \"none\").\n.decl Answer()\nAnswer() :- Has_nutrients(\"ice\", \"none\").\n.output Answer"]}
{"id": 1070, "answer": true, "completion": ".decl Has_altitude(Object:symbol, Altitude:float)\nHas_altitude(\"King Kong\", 300).\nHas_altitude(\"Eiffel Tower visitors\", 276).\n.decl Answer()\nAnswer() :- Has_altitude(\"King Kong\", altitude1), Has_altitude(\"Eiffel Tower visitors\", altitude2), altitude1 > altitude2.\n.output Answer", "completions": [".decl Has_altitude(Object:symbol, Altitude:float)\nHas_altitude(\"King Kong\", 300).\nHas_altitude(\"Eiffel Tower visitors\", 276).\n.decl Answer()\nAnswer() :- Has_altitude(\"King Kong\", altitude1), Has_altitude(\"Eiffel Tower visitors\", altitude2), altitude1 > altitude2.\n.output Answer"]}
{"id": 1071, "answer": true, "completion": ".decl Has_bedtime(Child:symbol, Bedtime:symbol)\nHas_bedtime(\"John\", \"9:00 PM\").\nHas_bedtime(\"Jane\", \"8:30 PM\").\n.decl Has_show_time(Show:symbol, Show_time:symbol)\nHas_show_time(\"Conan O'Brien\", \"10:00 PM\").\n.decl Answer()\nAnswer() :- Has_bedtime(child, bedtime), Has_show_time(\"Conan O'Brien\", show_time), bedtime < show_time.\n.output Answer", "completions": [".decl Has_bedtime(Child:symbol, Bedtime:symbol)\nHas_bedtime(\"John\", \"9:00 PM\").\nHas_bedtime(\"Jane\", \"8:30 PM\").\n.decl Has_show_time(Show:symbol, Show_time:symbol)\nHas_show_time(\"Conan O'Brien\", \"10:00 PM\").\n.decl Answer()\nAnswer() :- Has_bedtime(child, bedtime), Has_show_time(\"Conan O'Brien\", show_time), bedtime < show_time.\n.output Answer"]}
{"id": 1072, "answer": true, "completion": ".decl Has_cost(Organization:symbol, Cost:float)\nHas_cost(\"Capital One Venture\", 0).\nHas_cost(\"Church of Satan\", 100).\n.decl Answer()\nAnswer() :- Has_cost(\"Capital One Venture\", cost1), Has_cost(\"Church of Satan\", cost2), cost1 < cost2.\n.output Answer", "completions": [".decl Has_cost(Organization:symbol, Cost:float)\nHas_cost(\"Capital One Venture\", 0).\nHas_cost(\"Church of Satan\", 100).\n.decl Answer()\nAnswer() :- Has_cost(\"Capital One Venture\", cost1), Has_cost(\"Church of Satan\", cost2), cost1 < cost2.\n.output Answer"]}
{"id": 1073, "answer": false, "completion": ".decl Has_climate(Location:symbol, Climate:symbol)\nHas_climate(\"Morocco\", \"arid\").\n.decl Ideal_for_water_skiing(Climate:symbol)\nIdeal_for_water_skiing(\"humid\").\nIdeal_for_water_skiing(\"temperate\").\n.decl Answer()\nAnswer() :- Has_climate(\"Morocco\", climate), Ideal_for_water_skiing(climate), !Ideal_for_water_skiing(\"arid\").\n.output Answer", "completions": [".decl Has_climate(Location:symbol, Climate:symbol)\nHas_climate(\"Morocco\", \"arid\").\n.decl Ideal_for_water_skiing(Climate:symbol)\nIdeal_for_water_skiing(\"humid\").\nIdeal_for_water_skiing(\"temperate\").\n.decl Answer()\nAnswer() :- Has_climate(\"Morocco\", climate), Ideal_for_water_skiing(climate), !Ideal_for_water_skiing(\"arid\").\n.output Answer"]}
{"id": 1074, "answer": true, "completion": ".decl Can_do(Animal:symbol, Action:symbol)\nCan_do(\"snow leopard\", \"run\").\nCan_do(\"snow leopard\", \"climb\").\n.decl Answer()\nAnswer() :- !Can_do(\"snow leopard\", \"swim\").\n.output Answer", "completions": [".decl Can_do(Animal:symbol, Action:symbol)\nCan_do(\"snow leopard\", \"run\").\nCan_do(\"snow leopard\", \"climb\").\n.decl Answer()\nAnswer() :- !Can_do(\"snow leopard\", \"swim\").\n.output Answer"]}
{"id": 1075, "answer": true, "completion": ".decl Enemies(Character_A:symbol, Character_B:symbol)\nEnemies(\"Joker\", \"Avengers\").\n.decl Answer()\nAnswer() :- Enemies(\"Joker\", \"Avengers\").\n.output Answer", "completions": [".decl Enemies(Character_A:symbol, Character_B:symbol)\nEnemies(\"Joker\", \"Avengers\").\n.decl Answer()\nAnswer() :- Enemies(\"Joker\", \"Avengers\").\n.output Answer"]}
{"id": 1076, "answer": true, "completion": ".decl Requires(Job:symbol, Ingredient:symbol)\nRequires(\"sofer\", \"leather\").\n.decl Answer()\nAnswer() :- Requires(\"sofer\", ingredient), ingredient != \"vegan\".\n.output Answer", "completions": [".decl Requires(Job:symbol, Ingredient:symbol)\nRequires(\"sofer\", \"leather\").\n.decl Answer()\nAnswer() :- Requires(\"sofer\", ingredient), ingredient != \"vegan\".\n.output Answer"]}
{"id": 1077, "answer": true, "completion": ".decl Has_color(State:symbol, Color:symbol)\nHas_color(\"Alabama\", \"red\").\nHas_color(\"Georgia\", \"red\").\nHas_color(\"Florida\", \"red\").\nHas_color(\"Delaware\", \"blue\").\nHas_color(\"Maryland\", \"blue\").\n.decl Passes_through(Route:symbol, State:symbol)\nPasses_through(\"US Route 1\", \"Alabama\").\nPasses_through(\"US Route 1\", \"Georgia\").\nPasses_through(\"US Route 1\", \"Florida\").\nPasses_through(\"US Route 1\", \"Delaware\").\nPasses_through(\"US Route 1\", \"Maryland\").\n.decl Answer()\nAnswer() :- Passes_through(\"US Route 1\", state), Has_color(state, \"red\"), !Has_color(state, \"blue\").\n.output Answer", "completions": [".decl Has_color(State:symbol, Color:symbol)\nHas_color(\"Alabama\", \"red\").\nHas_color(\"Georgia\", \"red\").\nHas_color(\"Florida\", \"red\").\nHas_color(\"Delaware\", \"blue\").\nHas_color(\"Maryland\", \"blue\").\n.decl Passes_through(Route:symbol, State:symbol)\nPasses_through(\"US Route 1\", \"Alabama\").\nPasses_through(\"US Route 1\", \"Georgia\").\nPasses_through(\"US Route 1\", \"Florida\").\nPasses_through(\"US Route 1\", \"Delaware\").\nPasses_through(\"US Route 1\", \"Maryland\").\n.decl Answer()\nAnswer() :- Passes_through(\"US Route 1\", state), Has_color(state, \"red\"), !Has_color(state, \"blue\").\n.output Answer"]}
{"id": 1078, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Napoleonic Wars\", \"1803-1815\").\n.decl Uses_weapon(Event:symbol, Weapon:symbol)\nUses_weapon(\"World War II\", \"nuclear bomb\").\n.decl Answer()\nAnswer() :- !Uses_weapon(\"Napoleonic Wars\", \"nuclear bomb\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Napoleonic Wars\", \"1803-1815\").\n.decl Uses_weapon(Event:symbol, Weapon:symbol)\nUses_weapon(\"World War II\", \"nuclear bomb\").\n.decl Answer()\nAnswer() :- !Uses_weapon(\"Napoleonic Wars\", \"nuclear bomb\").\n.output Answer"]}
{"id": 1079, "answer": true, "completion": ".decl Has_height_requirement(Ride:symbol, Height_requirement:float)\nHas_height_requirement(\"Candymonium\", 48).\n.decl Has_height(Person:symbol, Height:float)\nHas_height(\"Marco Rubio\", 72).\n.decl Answer()\nAnswer() :- Has_height_requirement(\"Candymonium\", height_requirement), Has_height(\"Marco Rubio\", height), height >= height_requirement.\n.output Answer", "completions": [".decl Has_height_requirement(Ride:symbol, Height_requirement:float)\nHas_height_requirement(\"Candymonium\", 48).\n.decl Has_height(Person:symbol, Height:float)\nHas_height(\"Marco Rubio\", 72).\n.decl Answer()\nAnswer() :- Has_height_requirement(\"Candymonium\", height_requirement), Has_height(\"Marco Rubio\", height), height >= height_requirement.\n.output Answer"]}
{"id": 1080, "answer": true, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Pandora's box\", \"hope\").\nHas_name(\"Four Horsemen\", \"war\").\nHas_name(\"Four Horsemen\", \"famine\").\nHas_name(\"Four Horsemen\", \"pestilence\").\nHas_name(\"Four Horsemen\", \"death\").\n.decl Answer()\nAnswer() :- Has_name(\"Pandora's box\", name1), Has_name(\"Four Horsemen\", name2), Has_name(\"Four Horsemen\", name3), name1 != name2, name1 != name3.\n.output Answer", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Pandora's box\", \"hope\").\nHas_name(\"Four Horsemen\", \"war\").\nHas_name(\"Four Horsemen\", \"famine\").\nHas_name(\"Four Horsemen\", \"pestilence\").\nHas_name(\"Four Horsemen\", \"death\").\n.decl Answer()\nAnswer() :- Has_name(\"Pandora's box\", name1), Has_name(\"Four Horsemen\", name2), Has_name(\"Four Horsemen\", name3), name1 != name2, name1 != name3.\n.output Answer"]}
{"id": 1081, "answer": true, "completion": ".decl Used_calendar(Person:symbol, Calendar:symbol)\nUsed_calendar(\"Saint Augustine\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Used_calendar(\"Saint Augustine\", \"Julian calendar\").\n.output Answer", "completions": [".decl Used_calendar(Person:symbol, Calendar:symbol)\nUsed_calendar(\"Saint Augustine\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Used_calendar(\"Saint Augustine\", \"Julian calendar\").\n.output Answer"]}
{"id": 1082, "answer": true, "completion": ".decl Is_illegal(Action:symbol)\nIs_illegal(\"parodies of the President of the United States\").\n.decl Answer()\nAnswer() :- Is_illegal(action).\n.output Answer", "completions": [".decl Is_illegal(Action:symbol)\nIs_illegal(\"parodies of the President of the United States\").\n.decl Answer()\nAnswer() :- Is_illegal(action).\n.output Answer"]}
{"id": 1083, "answer": true, "completion": ".decl Is_on_planet(Activity:symbol, Planet:symbol)\nIs_on_planet(\"water skiing\", \"Earth\").\n.decl Answer()\nAnswer() :- !Is_on_planet(\"water skiing\", \"Venus\").\n.output Answer", "completions": [".decl Is_on_planet(Activity:symbol, Planet:symbol)\nIs_on_planet(\"water skiing\", \"Earth\").\n.decl Answer()\nAnswer() :- !Is_on_planet(\"water skiing\", \"Venus\").\n.output Answer"]}
{"id": 1084, "answer": true, "completion": ".decl Uses_flag(Group:symbol, Flag:symbol)\nUses_flag(\"Nazis\", \"Swastika\").\n.decl Answer()\nAnswer() :- !Uses_flag(\"Nazis\", \"Hammer and sickle\").\n.output Answer", "completions": [".decl Uses_flag(Group:symbol, Flag:symbol)\nUses_flag(\"Nazis\", \"Swastika\").\n.decl Answer()\nAnswer() :- !Uses_flag(\"Nazis\", \"Hammer and sickle\").\n.output Answer"]}
{"id": 1085, "answer": true, "completion": ".decl Causes_of_death(Person:symbol, Cause_of_death:symbol)\nCauses_of_death(\"Paul the Apostle\", \"execution\").\n.decl Tenets(Religion:symbol, Tenet:symbol)\nTenets(\"Ahimsa\", \"non-violence\").\n.decl Answer()\nAnswer() :- Causes_of_death(\"Paul the Apostle\", cause_of_death), Tenets(\"Ahimsa\", tenet), cause_of_death != tenet.\n.output Answer", "completions": [".decl Causes_of_death(Person:symbol, Cause_of_death:symbol)\nCauses_of_death(\"Paul the Apostle\", \"execution\").\n.decl Tenets(Religion:symbol, Tenet:symbol)\nTenets(\"Ahimsa\", \"non-violence\").\n.decl Answer()\nAnswer() :- Causes_of_death(\"Paul the Apostle\", cause_of_death), Tenets(\"Ahimsa\", tenet), cause_of_death != tenet.\n.output Answer"]}
{"id": 1086, "answer": true, "completion": ".decl Causes(Event:symbol, Result:symbol)\nCauses(\"SNL\", \"Jenny McCarthy does not get along with her cousin\").\n.decl Answer()\nAnswer() :- Causes(\"SNL\", \"Jenny McCarthy does not get along with her cousin\").\n.output Answer", "completions": [".decl Causes(Event:symbol, Result:symbol)\nCauses(\"SNL\", \"Jenny McCarthy does not get along with her cousin\").\n.decl Answer()\nAnswer() :- Causes(\"SNL\", \"Jenny McCarthy does not get along with her cousin\").\n.output Answer"]}
{"id": 1087, "answer": true, "completion": ".decl Requires(Licence:symbol, Grade:float)\nRequires(\"driver's licence\", 16).\n.decl Answer()\nAnswer() :- Requires(\"driver's licence\", grade), grade != 11.\n.output Answer", "completions": [".decl Requires(Licence:symbol, Grade:float)\nRequires(\"driver's licence\", 16).\n.decl Answer()\nAnswer() :- Requires(\"driver's licence\", grade), grade != 11.\n.output Answer"]}
{"id": 1088, "answer": true, "completion": ".decl Influences(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- !Influences(\"DARPA\", \"Albert Einstein\").\n.output Answer", "completions": [".decl Influences(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- !Influences(\"DARPA\", \"Albert Einstein\").\n.output Answer"]}
{"id": 1089, "answer": false, "completion": ".decl Has_effect(Substance:symbol, Effect:symbol)\nHas_effect(\"menthol\", \"less addictive\").\n.decl Answer()\nAnswer() :- Has_effect(\"menthol\", \"less addictive\").\n.output Answer", "completions": [".decl Has_effect(Substance:symbol, Effect:symbol)\nHas_effect(\"menthol\", \"less addictive\").\n.decl Answer()\nAnswer() :- Has_effect(\"menthol\", \"less addictive\").\n.output Answer"]}
{"id": 1090, "answer": false, "completion": ".decl Lives_in_century(Person:symbol, Century:float)\nLives_in_century(\"Matt Groening\", 20).\n.decl Answer()\nAnswer() :- Lives_in_century(\"Matt Groening\", century1), Lives_in_century(\"Matt Groening\", century2), century1 != century2.\n.output Answer", "completions": [".decl Lives_in_century(Person:symbol, Century:float)\nLives_in_century(\"Matt Groening\", 20).\n.decl Answer()\nAnswer() :- Lives_in_century(\"Matt Groening\", century1), Lives_in_century(\"Matt Groening\", century2), century1 != century2.\n.output Answer"]}
{"id": 1091, "answer": true, "completion": ".decl Has_behavior(Person:symbol, Behavior:symbol)\nHas_behavior(\"psychic\", \"hot reading\").\n.decl Is_trustworthy(Person:symbol, Trustworthiness:symbol)\nIs_trustworthy(\"psychic\", \"no\").\n.decl Answer()\nAnswer() :- Has_behavior(\"psychic\", \"hot reading\"), Is_trustworthy(\"psychic\", \"no\").\n.output Answer", "completions": [".decl Has_behavior(Person:symbol, Behavior:symbol)\nHas_behavior(\"psychic\", \"hot reading\").\n.decl Is_trustworthy(Person:symbol, Trustworthiness:symbol)\nIs_trustworthy(\"psychic\", \"no\").\n.decl Answer()\nAnswer() :- Has_behavior(\"psychic\", \"hot reading\"), Is_trustworthy(\"psychic\", \"no\").\n.output Answer"]}
{"id": 1092, "answer": false, "completion": ".decl Has_climate(Region:symbol, Climate:symbol)\nHas_climate(\"Sahara\", \"desert\").\n.decl Needs_climate(Product:symbol, Climate:symbol)\nNeeds_climate(\"Poland Spring\", \"humid\").\n.decl Answer()\nAnswer() :- Has_climate(\"Sahara\", climate1), Needs_climate(\"Poland Spring\", climate2), climate1 != climate2.\n.output Answer", "completions": [".decl Has_climate(Region:symbol, Climate:symbol)\nHas_climate(\"Sahara\", \"desert\").\n.decl Needs_climate(Product:symbol, Climate:symbol)\nNeeds_climate(\"Poland Spring\", \"humid\").\n.decl Answer()\nAnswer() :- Has_climate(\"Sahara\", climate1), Needs_climate(\"Poland Spring\", climate2), climate1 != climate2.\n.output Answer"]}
{"id": 1093, "answer": false, "completion": ".decl Requires_society(Object:symbol)\nRequires_society(\"jet plane\").\n.decl Answer()\nAnswer() :- !Requires_society(\"jet plane\").\n.output Answer", "completions": [".decl Requires_society(Object:symbol)\nRequires_society(\"jet plane\").\n.decl Answer()\nAnswer() :- !Requires_society(\"jet plane\").\n.output Answer"]}
{"id": 1094, "answer": false, "completion": ".decl Needs(Organism:symbol, Substance:symbol)\nNeeds(\"human race\", \"oxygen\").\nNeeds(\"human race\", \"food\").\nNeeds(\"plants\", \"chlorophyll\").\n.decl Answer()\nAnswer() :- Needs(\"human race\", substance1), !Needs(\"human race\", \"chlorophyll\"), Needs(\"plants\", \"chlorophyll\").\n.output Answer", "completions": [".decl Needs(Organism:symbol, Substance:symbol)\nNeeds(\"human race\", \"oxygen\").\nNeeds(\"human race\", \"food\").\nNeeds(\"plants\", \"chlorophyll\").\n.decl Answer()\nAnswer() :- Needs(\"human race\", substance1), !Needs(\"human race\", \"chlorophyll\"), Needs(\"plants\", \"chlorophyll\").\n.output Answer"]}
{"id": 1095, "answer": false, "completion": ".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"giant green lady\", \"New York Harbor\").\n.decl Answer()\nAnswer() :- Has_location(\"giant green lady\", \"New York Harbor\").\n.output Answer", "completions": [".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"giant green lady\", \"New York Harbor\").\n.decl Answer()\nAnswer() :- Has_location(\"giant green lady\", \"New York Harbor\").\n.output Answer"]}
{"id": 1096, "answer": true, "completion": ".decl Is_landlocked(Sea:symbol, Country:symbol)\nIs_landlocked(\"Sea of Japan\", \"Japan\").\n.decl Answer()\nAnswer() :- Is_landlocked(\"Sea of Japan\", \"Japan\").\n.output Answer", "completions": [".decl Is_landlocked(Sea:symbol, Country:symbol)\nIs_landlocked(\"Sea of Japan\", \"Japan\").\n.decl Answer()\nAnswer() :- Is_landlocked(\"Sea of Japan\", \"Japan\").\n.output Answer"]}
{"id": 1097, "answer": true, "completion": ".decl Encourages(Location:symbol, Activity:symbol)\nEncourages(\"suburbs\", \"car use\").\n.decl Answer()\nAnswer() :- Encourages(\"suburbs\", \"car use\").\n.output Answer", "completions": [".decl Encourages(Location:symbol, Activity:symbol)\nEncourages(\"suburbs\", \"car use\").\n.decl Answer()\nAnswer() :- Encourages(\"suburbs\", \"car use\").\n.output Answer"]}
{"id": 1098, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"back pain\").\n.decl Enjoys_activity(Person:symbol, Activity:symbol)\nEnjoys_activity(\"John\", \"picking strawberries\").\n.decl Answer()\nAnswer() :- Has_condition(\"John\", \"back pain\"), !Enjoys_activity(\"John\", \"picking strawberries\").\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"back pain\").\n.decl Enjoys_activity(Person:symbol, Activity:symbol)\nEnjoys_activity(\"John\", \"picking strawberries\").\n.decl Answer()\nAnswer() :- Has_condition(\"John\", \"back pain\"), !Enjoys_activity(\"John\", \"picking strawberries\").\n.output Answer"]}
{"id": 1099, "answer": true, "completion": ".decl Lives_in(Person:symbol, Location:symbol)\nLives_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.decl Takes_calls_in(Person:symbol, Location:symbol)\nTakes_calls_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.decl Answer()\nAnswer() :- Lives_in(\"J. Edgar Hoover\", location), Takes_calls_in(\"J. Edgar Hoover\", location).\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Location:symbol)\nLives_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.decl Takes_calls_in(Person:symbol, Location:symbol)\nTakes_calls_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.decl Answer()\nAnswer() :- Lives_in(\"J. Edgar Hoover\", location), Takes_calls_in(\"J. Edgar Hoover\", location).\n.output Answer"]}
{"id": 1100, "answer": false, "completion": ".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Christopher Walken\", \"Academy Award\").\nHas_award(\"Christopher Walken\", \"Emmy Award\").\nHas_award(\"Christopher Walken\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Has_award(\"Christopher Walken\", \"Academy Award\"), Has_award(\"Christopher Walken\", \"Emmy Award\"), Has_award(\"Christopher Walken\", \"Grammy Award\"), Has_award(\"Christopher Walken\", \"Tony Award\").\n.output Answer", "completions": [".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Christopher Walken\", \"Academy Award\").\nHas_award(\"Christopher Walken\", \"Emmy Award\").\nHas_award(\"Christopher Walken\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Has_award(\"Christopher Walken\", \"Academy Award\"), Has_award(\"Christopher Walken\", \"Emmy Award\"), Has_award(\"Christopher Walken\", \"Grammy Award\"), Has_award(\"Christopher Walken\", \"Tony Award\").\n.output Answer"]}
{"id": 1101, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"pins\", 0.5).\nHas_weight(\"Oscars\", 0.2).\n.decl Answer()\nAnswer() :- Has_weight(\"pins\", weight1), Has_weight(\"Oscars\", weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"pins\", 0.5).\nHas_weight(\"Oscars\", 0.2).\n.decl Answer()\nAnswer() :- Has_weight(\"pins\", weight1), Has_weight(\"Oscars\", weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 1102, "answer": true, "completion": ".decl Published_in(Work:symbol, Magazine:symbol)\nPublished_in(\"Rumi's work\", \"The New Yorker\").\n.decl Answer()\nAnswer() :- Published_in(\"Rumi's work\", magazine).\n.output Answer", "completions": [".decl Published_in(Work:symbol, Magazine:symbol)\nPublished_in(\"Rumi's work\", \"The New Yorker\").\n.decl Answer()\nAnswer() :- Published_in(\"Rumi's work\", magazine).\n.output Answer"]}
{"id": 1103, "answer": false, "completion": ".decl Has_density(Planet:symbol, Density:float)\nHas_density(\"Mercury\", 5.427).\nHas_density(\"Venus\", 5.243).\nHas_density(\"Earth\", 5.515).\nHas_density(\"Mars\", 3.934).\n.decl Focuses_on(Astrologer:symbol, Planet:symbol, Day:symbol)\nFocuses_on(\"astrologer\", \"Earth\", \"Friday\").\n.decl Answer()\nAnswer() :- Focuses_on(\"astrologer\", planet, \"Friday\"), Has_density(planet, density1), Has_density(planet2, density2), planet != planet2, density1 > density2.\n.output Answer", "completions": [".decl Has_density(Planet:symbol, Density:float)\nHas_density(\"Mercury\", 5.427).\nHas_density(\"Venus\", 5.243).\nHas_density(\"Earth\", 5.515).\nHas_density(\"Mars\", 3.934).\n.decl Focuses_on(Astrologer:symbol, Planet:symbol, Day:symbol)\nFocuses_on(\"astrologer\", \"Earth\", \"Friday\").\n.decl Answer()\nAnswer() :- Focuses_on(\"astrologer\", planet, \"Friday\"), Has_density(planet, density1), Has_density(planet2, density2), planet != planet2, density1 > density2.\n.output Answer"]}
{"id": 1104, "answer": true, "completion": ".decl Is_visible_from(Object_A:symbol, Object_B:symbol)\nIs_visible_from(\"Stonehenge\", \"Dusseldorf\").\n.decl Answer()\nAnswer() :- Is_visible_from(\"Stonehenge\", \"Dusseldorf\").\n.output Answer", "completions": [".decl Is_visible_from(Object_A:symbol, Object_B:symbol)\nIs_visible_from(\"Stonehenge\", \"Dusseldorf\").\n.decl Answer()\nAnswer() :- Is_visible_from(\"Stonehenge\", \"Dusseldorf\").\n.output Answer"]}
{"id": 1105, "answer": true, "completion": ".decl Has_n_kids(Person:symbol, N_kids:float)\nHas_n_kids(\"Gracie\", 13).\n.decl Answer()\nAnswer() :- Has_n_kids(\"Gracie\", n_kids), n_kids >= 13.\n.output Answer", "completions": [".decl Has_n_kids(Person:symbol, N_kids:float)\nHas_n_kids(\"Gracie\", 13).\n.decl Answer()\nAnswer() :- Has_n_kids(\"Gracie\", n_kids), n_kids >= 13.\n.output Answer"]}
{"id": 1106, "answer": false, "completion": ".decl Has_ability(Organism:symbol, Ability:symbol)\nHas_ability(\"monarch butterfly\", \"fly\").\n.decl Answer()\nAnswer() :- Has_ability(\"monarch butterfly\", \"rule\").\n.output Answer", "completions": [".decl Has_ability(Organism:symbol, Ability:symbol)\nHas_ability(\"monarch butterfly\", \"fly\").\n.decl Answer()\nAnswer() :- Has_ability(\"monarch butterfly\", \"rule\").\n.output Answer"]}
{"id": 1107, "answer": false, "completion": ".decl Despises(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Despises(\"Nicole Kidman\", \"Roman Josi\").\n.output Answer", "completions": [".decl Despises(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Despises(\"Nicole Kidman\", \"Roman Josi\").\n.output Answer"]}
{"id": 1108, "answer": true, "completion": ".decl Has_interests(Person:symbol, Interests:symbol)\nHas_interests(\"Apollo\", \"music\").\nHas_interests(\"Baldur\", \"music\").\n.decl Answer()\nAnswer() :- Has_interests(\"Apollo\", interests), Has_interests(\"Baldur\", interests).\n.output Answer", "completions": [".decl Has_interests(Person:symbol, Interests:symbol)\nHas_interests(\"Apollo\", \"music\").\nHas_interests(\"Baldur\", \"music\").\n.decl Answer()\nAnswer() :- Has_interests(\"Apollo\", interests), Has_interests(\"Baldur\", interests).\n.output Answer"]}
{"id": 1109, "answer": false, "completion": ".decl Is_safe_for(Food:symbol, Animal:symbol)\nIs_safe_for(\"Snickers bar\", \"human\").\n.decl Answer()\nAnswer() :- !Is_safe_for(\"Snickers bar\", \"poodle\").\n.output Answer", "completions": [".decl Is_safe_for(Food:symbol, Animal:symbol)\nIs_safe_for(\"Snickers bar\", \"human\").\n.decl Answer()\nAnswer() :- !Is_safe_for(\"Snickers bar\", \"poodle\").\n.output Answer"]}
{"id": 1110, "answer": true, "completion": ".decl Has_distance(Event:symbol, Distance:float)\nHas_distance(\"Olympic athlete\", 1).\n.decl Has_energy_level(Person:symbol, Energy_level:float)\nHas_energy_level(\"Olympic athlete\", 10).\n.decl Answer()\nAnswer() :- Has_distance(\"Olympic athlete\", distance), Has_energy_level(\"Olympic athlete\", energy_level), distance > 0, energy_level < 10.\n.output Answer", "completions": [".decl Has_distance(Event:symbol, Distance:float)\nHas_distance(\"Olympic athlete\", 1).\n.decl Has_energy_level(Person:symbol, Energy_level:float)\nHas_energy_level(\"Olympic athlete\", 10).\n.decl Answer()\nAnswer() :- Has_distance(\"Olympic athlete\", distance), Has_energy_level(\"Olympic athlete\", energy_level), distance > 0, energy_level < 10.\n.output Answer"]}
{"id": 1111, "answer": true, "completion": ".decl Has_beliefs(Person:symbol, Beliefs:symbol)\nHas_beliefs(\"Catholic priest\", \"Catholicism\").\n.decl Commends(Beliefs:symbol, Action:symbol)\nCommends(\"Catholicism\", \"humility\").\n.decl Answer()\nAnswer() :- Has_beliefs(\"Catholic priest\", beliefs), Commends(beliefs, \"pride\"), ! Commends(beliefs, \"pride\").\n.output Answer", "completions": [".decl Has_beliefs(Person:symbol, Beliefs:symbol)\nHas_beliefs(\"Catholic priest\", \"Catholicism\").\n.decl Commends(Beliefs:symbol, Action:symbol)\nCommends(\"Catholicism\", \"humility\").\n.decl Answer()\nAnswer() :- Has_beliefs(\"Catholic priest\", beliefs), Commends(beliefs, \"pride\"), ! Commends(beliefs, \"pride\").\n.output Answer"]}
{"id": 1112, "answer": false, "completion": ".decl Has_shelf_life(Food:symbol, Shelf_life:float)\nHas_shelf_life(\"white rice\", 6).\nHas_shelf_life(\"sesame seeds\", 12).\n.decl Answer()\nAnswer() :- Has_shelf_life(\"white rice\", shelf_life1), Has_shelf_life(\"sesame seeds\", shelf_life2), shelf_life1 < shelf_life2.\n.output Answer", "completions": [".decl Has_shelf_life(Food:symbol, Shelf_life:float)\nHas_shelf_life(\"white rice\", 6).\nHas_shelf_life(\"sesame seeds\", 12).\n.decl Answer()\nAnswer() :- Has_shelf_life(\"white rice\", shelf_life1), Has_shelf_life(\"sesame seeds\", shelf_life2), shelf_life1 < shelf_life2.\n.output Answer"]}
{"id": 1113, "answer": true, "completion": ".decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Harry Potter and the Philosopher's Stone\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Chamber of Secrets\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Prisoner of Azkaban\", \"J.K Rowling\").\n.decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nIs_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nIs_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\n.decl Answer()\nAnswer() :- Has_author(book, \"J.K Rowling\"), Is_genre(book, \"fantasy\").\n.output Answer", "completions": [".decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Harry Potter and the Philosopher's Stone\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Chamber of Secrets\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Prisoner of Azkaban\", \"J.K Rowling\").\n.decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nIs_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nIs_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\n.decl Answer()\nAnswer() :- Has_author(book, \"J.K Rowling\"), Is_genre(book, \"fantasy\").\n.output Answer"]}
{"id": 1114, "answer": true, "completion": ".decl Has_longitude(City:symbol, Longitude:float)\nHas_longitude(\"Bern\", 7.4).\nHas_longitude(\"Paris\", 2.3).\n.decl Answer()\nAnswer() :- Has_longitude(\"Bern\", longitude1), Has_longitude(\"Paris\", longitude2), longitude1 > longitude2.\n.output Answer", "completions": [".decl Has_longitude(City:symbol, Longitude:float)\nHas_longitude(\"Bern\", 7.4).\nHas_longitude(\"Paris\", 2.3).\n.decl Answer()\nAnswer() :- Has_longitude(\"Bern\", longitude1), Has_longitude(\"Paris\", longitude2), longitude1 > longitude2.\n.output Answer"]}
{"id": 1115, "answer": true, "completion": ".decl Belongs_to_sect(Person:symbol, Sect:symbol)\nBelongs_to_sect(\"ISIS\", \"Sunni Islam\").\nBelongs_to_sect(\"Al-Farabi\", \"Mu'tazila\").\n.decl Answer()\nAnswer() :- Belongs_to_sect(\"ISIS\", sect1), Belongs_to_sect(\"Al-Farabi\", sect2), sect1 != sect2.\n.output Answer", "completions": [".decl Belongs_to_sect(Person:symbol, Sect:symbol)\nBelongs_to_sect(\"ISIS\", \"Sunni Islam\").\nBelongs_to_sect(\"Al-Farabi\", \"Mu'tazila\").\n.decl Answer()\nAnswer() :- Belongs_to_sect(\"ISIS\", sect1), Belongs_to_sect(\"Al-Farabi\", sect2), sect1 != sect2.\n.output Answer"]}
{"id": 1116, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"mollymawk\", \"New Zealand\").\nLives_in(\"albatross\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Lives_in(\"mollymawk\", place1), Lives_in(\"albatross\", place2), place1 != place2.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"mollymawk\", \"New Zealand\").\nLives_in(\"albatross\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Lives_in(\"mollymawk\", place1), Lives_in(\"albatross\", place2), place1 != place2.\n.output Answer"]}
{"id": 1117, "answer": false, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"spice grinder\", 10).\nHas_price(\"cheapest cinnamon sticks\", 1).\n.decl Answer()\nAnswer() :- Has_price(\"spice grinder\", price1), Has_price(\"cheapest cinnamon sticks\", price2), price1 > price2.\n.output Answer", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"spice grinder\", 10).\nHas_price(\"cheapest cinnamon sticks\", 1).\n.decl Answer()\nAnswer() :- Has_price(\"spice grinder\", price1), Has_price(\"cheapest cinnamon sticks\", price2), price1 > price2.\n.output Answer"]}
{"id": 1118, "answer": true, "completion": ".decl Has_heat_level(Salsa:symbol, Heat_level:float)\nHas_heat_level(\"Carolina Reaper\", 10).\n.decl Affects_sales(Ingredient:symbol, Sales:float)\nAffects_sales(\"Carolina Reaper\", -1).\n.decl Answer()\nAnswer() :- Has_heat_level(\"Carolina Reaper\", heat_level), Affects_sales(\"Carolina Reaper\", sales), heat_level > 0, sales < 0.\n.output Answer", "completions": [".decl Has_heat_level(Salsa:symbol, Heat_level:float)\nHas_heat_level(\"Carolina Reaper\", 10).\n.decl Affects_sales(Ingredient:symbol, Sales:float)\nAffects_sales(\"Carolina Reaper\", -1).\n.decl Answer()\nAnswer() :- Has_heat_level(\"Carolina Reaper\", heat_level), Affects_sales(\"Carolina Reaper\", sales), heat_level > 0, sales < 0.\n.output Answer"]}
{"id": 1119, "answer": true, "completion": ".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Japan Airlines\", \"Germany\").\nFlies_to(\"Japan Airlines\", \"Italy\").\n.decl Was_axis_power(Country:symbol)\nWas_axis_power(\"Germany\").\nWas_axis_power(\"Italy\").\n.decl Answer()\nAnswer() :- Flies_to(\"Japan Airlines\", destination), Was_axis_power(destination).\n.output Answer", "completions": [".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Japan Airlines\", \"Germany\").\nFlies_to(\"Japan Airlines\", \"Italy\").\n.decl Was_axis_power(Country:symbol)\nWas_axis_power(\"Germany\").\nWas_axis_power(\"Italy\").\n.decl Answer()\nAnswer() :- Flies_to(\"Japan Airlines\", destination), Was_axis_power(destination).\n.output Answer"]}
{"id": 1120, "answer": true, "completion": ".decl Soaks_in(Person:symbol, Substance:symbol)\nSoaks_in(\"John\", \"olive oil\").\nSoaks_in(\"John\", \"water\").\n.decl Answer()\nAnswer() :- Soaks_in(person, \"olive oil\"), Soaks_in(person, \"water\").\n.output Answer", "completions": [".decl Soaks_in(Person:symbol, Substance:symbol)\nSoaks_in(\"John\", \"olive oil\").\nSoaks_in(\"John\", \"water\").\n.decl Answer()\nAnswer() :- Soaks_in(person, \"olive oil\"), Soaks_in(person, \"water\").\n.output Answer"]}
{"id": 1121, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"nymph tick\", 0.2).\nHas_size(\"standard hole punch\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"nymph tick\", size1), Has_size(\"standard hole punch\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"nymph tick\", 0.2).\nHas_size(\"standard hole punch\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"nymph tick\", size1), Has_size(\"standard hole punch\", size2), size1 < size2.\n.output Answer"]}
{"id": 1122, "answer": true, "completion": ".decl Operates(Company:symbol, Vehicle:symbol)\nOperates(\"Amtrak\", \"train\").\nOperates(\"Amtrak\", \"bus\").\n.decl Has_n_wheels(Vehicle:symbol, N_wheels:float)\nHas_n_wheels(\"train\", 8).\nHas_n_wheels(\"bus\", 4).\n.decl Answer()\nAnswer() :- Operates(\"Amtrak\", vehicle), Has_n_wheels(vehicle, n_wheels), n_wheels = 4.\n.output Answer", "completions": [".decl Operates(Company:symbol, Vehicle:symbol)\nOperates(\"Amtrak\", \"train\").\nOperates(\"Amtrak\", \"bus\").\n.decl Has_n_wheels(Vehicle:symbol, N_wheels:float)\nHas_n_wheels(\"train\", 8).\nHas_n_wheels(\"bus\", 4).\n.decl Answer()\nAnswer() :- Operates(\"Amtrak\", vehicle), Has_n_wheels(vehicle, n_wheels), n_wheels = 4.\n.output Answer"]}
{"id": 1123, "answer": true, "completion": ".decl Has_place_in_alphabet(Letter:symbol, Place:float)\nHas_place_in_alphabet(\"B\", 2).\n.decl Has_n_occurrences(Event:symbol, N_occurrences:float)\nHas_n_occurrences(\"2008 total lunar eclipses\", 4).\n.decl Answer()\nAnswer() :- Has_place_in_alphabet(\"B\", place), Has_n_occurrences(\"2008 total lunar eclipses\", n_occurrences), place > n_occurrences.\n.output Answer", "completions": [".decl Has_place_in_alphabet(Letter:symbol, Place:float)\nHas_place_in_alphabet(\"B\", 2).\n.decl Has_n_occurrences(Event:symbol, N_occurrences:float)\nHas_n_occurrences(\"2008 total lunar eclipses\", 4).\n.decl Answer()\nAnswer() :- Has_place_in_alphabet(\"B\", place), Has_n_occurrences(\"2008 total lunar eclipses\", n_occurrences), place > n_occurrences.\n.output Answer"]}
{"id": 1124, "answer": true, "completion": ".decl Lives_in_season(Animal:symbol, Season:symbol)\nLives_in_season(\"sun bear\", \"summer\").\n.decl Answer()\nAnswer() :- Lives_in_season(\"sun bear\", season), season != \"winter\".\n.output Answer", "completions": [".decl Lives_in_season(Animal:symbol, Season:symbol)\nLives_in_season(\"sun bear\", \"summer\").\n.decl Answer()\nAnswer() :- Lives_in_season(\"sun bear\", season), season != \"winter\".\n.output Answer"]}
{"id": 1125, "answer": true, "completion": ".decl Does(Person:symbol, Action:symbol)\nDoes(\"Osama bin Laden\", \"pray\").\n.decl Happens_on_day(Action:symbol, Day:symbol)\nHappens_on_day(\"pray\", \"Sunday\").\n.decl Answer()\nAnswer() :- Does(\"Osama bin Laden\", action), Happens_on_day(action, \"Sunday\"), action = \"put a wafer on his tongue\".\n.output Answer", "completions": [".decl Does(Person:symbol, Action:symbol)\nDoes(\"Osama bin Laden\", \"pray\").\n.decl Happens_on_day(Action:symbol, Day:symbol)\nHappens_on_day(\"pray\", \"Sunday\").\n.decl Answer()\nAnswer() :- Does(\"Osama bin Laden\", action), Happens_on_day(action, \"Sunday\"), action = \"put a wafer on his tongue\".\n.output Answer"]}
{"id": 1126, "answer": false, "completion": ".decl Has_strength(Group:symbol, Strength:float)\nHas_strength(\"modern Brazilian Navy\", 10).\nHas_strength(\"Battle of Actium\", 5).\n.decl Answer()\nAnswer() :- Has_strength(\"modern Brazilian Navy\", strength1), Has_strength(\"Battle of Actium\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Group:symbol, Strength:float)\nHas_strength(\"modern Brazilian Navy\", 10).\nHas_strength(\"Battle of Actium\", 5).\n.decl Answer()\nAnswer() :- Has_strength(\"modern Brazilian Navy\", strength1), Has_strength(\"Battle of Actium\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 1127, "answer": false, "completion": ".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Plato\", \"Aristotelianism\").\nBelieves(\"Jainism\", \"Non-violence\").\n.decl Answer()\nAnswer() :- Believes(\"Plato\", belief1), Believes(\"Jainism\", belief2), belief1 = belief2.\n.output Answer", "completions": [".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Plato\", \"Aristotelianism\").\nBelieves(\"Jainism\", \"Non-violence\").\n.decl Answer()\nAnswer() :- Believes(\"Plato\", belief1), Believes(\"Jainism\", belief2), belief1 = belief2.\n.output Answer"]}
{"id": 1128, "answer": true, "completion": ".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Goofy\", \"Nylabone\").\n.decl Answer()\nAnswer() :- Likes(\"Goofy\", \"Nylabone\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Goofy\", \"Nylabone\").\n.decl Answer()\nAnswer() :- Likes(\"Goofy\", \"Nylabone\").\n.output Answer"]}
{"id": 1129, "answer": false, "completion": ".decl Ended_bloodline(Event:symbol, Person:symbol)\nEnded_bloodline(\"Gunpowder plot\", \"Mary, Queen of Scots\").\n.decl Answer()\nAnswer() :- Ended_bloodline(\"Gunpowder plot\", \"Mary, Queen of Scots\").\n.output Answer", "completions": [".decl Ended_bloodline(Event:symbol, Person:symbol)\nEnded_bloodline(\"Gunpowder plot\", \"Mary, Queen of Scots\").\n.decl Answer()\nAnswer() :- Ended_bloodline(\"Gunpowder plot\", \"Mary, Queen of Scots\").\n.output Answer"]}
{"id": 1130, "answer": true, "completion": ".decl Produces(Leader:symbol, Movie:symbol)\nProduces(\"James Cameron\", \"Titanic\").\n.decl Answer()\nAnswer() :- Produces(\"Paramount leader\", \"Titanic\").\n.output Answer", "completions": [".decl Produces(Leader:symbol, Movie:symbol)\nProduces(\"James Cameron\", \"Titanic\").\n.decl Answer()\nAnswer() :- Produces(\"Paramount leader\", \"Titanic\").\n.output Answer"]}
{"id": 1131, "answer": false, "completion": ".decl Found_in_section(Item:symbol, Section:symbol)\nFound_in_section(\"parsley\", \"produce\").\nFound_in_section(\"parsley\", \"spices\").\n.decl Answer()\nAnswer() :- Found_in_section(\"parsley\", section1), Found_in_section(\"parsley\", section2), section1 != section2.\n.output Answer", "completions": [".decl Found_in_section(Item:symbol, Section:symbol)\nFound_in_section(\"parsley\", \"produce\").\nFound_in_section(\"parsley\", \"spices\").\n.decl Answer()\nAnswer() :- Found_in_section(\"parsley\", section1), Found_in_section(\"parsley\", section2), section1 != section2.\n.output Answer"]}
{"id": 1132, "answer": false, "completion": ".decl Thrives_in(Organism:symbol, Environment:symbol)\nThrives_in(\"Spartina Patens\", \"salt marshes\").\n.decl Answer()\nAnswer() :- !Thrives_in(\"Spartina Patens\", \"Sahara Desert\").\n.output Answer", "completions": [".decl Thrives_in(Organism:symbol, Environment:symbol)\nThrives_in(\"Spartina Patens\", \"salt marshes\").\n.decl Answer()\nAnswer() :- !Thrives_in(\"Spartina Patens\", \"Sahara Desert\").\n.output Answer"]}
{"id": 1133, "answer": true, "completion": ".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Jackie Chan\", \"hearing\").\nHas_ability(\"deaf person\", \"non-hearing\").\n.decl Answer()\nAnswer() :- Has_ability(\"Jackie Chan\", ability1), Has_ability(\"deaf person\", ability2), ability1 != ability2.\n.output Answer", "completions": [".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Jackie Chan\", \"hearing\").\nHas_ability(\"deaf person\", \"non-hearing\").\n.decl Answer()\nAnswer() :- Has_ability(\"Jackie Chan\", ability1), Has_ability(\"deaf person\", ability2), ability1 != ability2.\n.output Answer"]}
{"id": 1134, "answer": true, "completion": ".decl Uses(Alternative:symbol, Material:symbol)\nUses(\"beeswax alternatives to cling wrap\", \"beeswax\").\nUses(\"beeswax alternatives to cling wrap\", \"cotton\").\nUses(\"beeswax alternatives to cling wrap\", \"hemp\").\n.decl Answer()\nAnswer() :- !Uses(\"beeswax alternatives to cling wrap\", \"plastic\").\n.output Answer", "completions": [".decl Uses(Alternative:symbol, Material:symbol)\nUses(\"beeswax alternatives to cling wrap\", \"beeswax\").\nUses(\"beeswax alternatives to cling wrap\", \"cotton\").\nUses(\"beeswax alternatives to cling wrap\", \"hemp\").\n.decl Answer()\nAnswer() :- !Uses(\"beeswax alternatives to cling wrap\", \"plastic\").\n.output Answer"]}
{"id": 1135, "answer": true, "completion": ".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Emei\", 3099).\n.decl Has_climbing_experience(Person:symbol, Experience:float)\nHas_climbing_experience(\"Kami Rita\", 20).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Emei\", height), Has_climbing_experience(\"Kami Rita\", experience), experience < height.\n.output Answer", "completions": [".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Emei\", 3099).\n.decl Has_climbing_experience(Person:symbol, Experience:float)\nHas_climbing_experience(\"Kami Rita\", 20).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Emei\", height), Has_climbing_experience(\"Kami Rita\", experience), experience < height.\n.output Answer"]}
{"id": 1136, "answer": false, "completion": ".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Nancy Pelosi\", \"1940-present\").\nLives_in_time(\"Geraldine Ferraro\", \"1935-2011\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"attack on Pearl Harbor\", \"1941\").\n.decl Answer()\nAnswer() :- Lives_in_time(person, time1), Happens_in_time(\"attack on Pearl Harbor\", time2), time1 >= time2.\n.output Answer", "completions": [".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Nancy Pelosi\", \"1940-present\").\nLives_in_time(\"Geraldine Ferraro\", \"1935-2011\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"attack on Pearl Harbor\", \"1941\").\n.decl Answer()\nAnswer() :- Lives_in_time(person, time1), Happens_in_time(\"attack on Pearl Harbor\", time2), time1 >= time2.\n.output Answer"]}
{"id": 1137, "answer": false, "completion": ".decl Has_n_digits(Number:symbol, N_digits:float)\nHas_n_digits(\"US 2018 GDP\", 12).\n.decl Answer()\nAnswer() :- Has_n_digits(\"US 2018 GDP\", n_digits), n_digits <= 3.\n.output Answer", "completions": [".decl Has_n_digits(Number:symbol, N_digits:float)\nHas_n_digits(\"US 2018 GDP\", 12).\n.decl Answer()\nAnswer() :- Has_n_digits(\"US 2018 GDP\", n_digits), n_digits <= 3.\n.output Answer"]}
{"id": 1138, "answer": true, "completion": ".decl Uses_adhesive(Tailor:symbol, Hem:symbol)\nUses_adhesive(\"expensive tailor\", \"shorter hem\").\n.decl Answer()\nAnswer() :- Uses_adhesive(\"expensive tailor\", \"shorter hem\"), Hem = \"shorter hem\".\n.output Answer", "completions": [".decl Uses_adhesive(Tailor:symbol, Hem:symbol)\nUses_adhesive(\"expensive tailor\", \"shorter hem\").\n.decl Answer()\nAnswer() :- Uses_adhesive(\"expensive tailor\", \"shorter hem\"), Hem = \"shorter hem\".\n.output Answer"]}
{"id": 1139, "answer": true, "completion": ".decl Has_emotion(Animal:symbol, Emotion:symbol)\nHas_emotion(\"frog\", \"disgust\").\n.decl Answer()\nAnswer() :- Has_emotion(\"frog\", \"disgust\").\n.output Answer", "completions": [".decl Has_emotion(Animal:symbol, Emotion:symbol)\nHas_emotion(\"frog\", \"disgust\").\n.decl Answer()\nAnswer() :- Has_emotion(\"frog\", \"disgust\").\n.output Answer"]}
{"id": 1140, "answer": true, "completion": ".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"someone\", \"seismophobia\").\n.decl Is_safe(Profession:symbol)\nIs_safe(\"clerk of Supreme Court of Canada\").\n.decl Answer()\nAnswer() :- Has_fear(\"someone\", \"seismophobia\"), Is_safe(\"clerk of Supreme Court of Canada\").\n.output Answer", "completions": [".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"someone\", \"seismophobia\").\n.decl Is_safe(Profession:symbol)\nIs_safe(\"clerk of Supreme Court of Canada\").\n.decl Answer()\nAnswer() :- Has_fear(\"someone\", \"seismophobia\"), Is_safe(\"clerk of Supreme Court of Canada\").\n.output Answer"]}
{"id": 1141, "answer": false, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"zodiac sign symbol\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"late September\", \"September\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", item), Happens_in_time(\"late September\", time), Sells(\"Home Depot\", item), time = \"September\".\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"zodiac sign symbol\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"late September\", \"September\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", item), Happens_in_time(\"late September\", time), Sells(\"Home Depot\", item), time = \"September\".\n.output Answer"]}
{"id": 1142, "answer": false, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"heladeria\", \"ice cream\").\n.decl Answer()\nAnswer() :- !Sells(\"heladeria\", \"olives\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"heladeria\", \"ice cream\").\n.decl Answer()\nAnswer() :- !Sells(\"heladeria\", \"olives\").\n.output Answer"]}
{"id": 1143, "answer": false, "completion": ".decl Reads(Person:symbol, Work:symbol)\nReads(\"Al Capone\", \"The Great Gatsby\").\n.decl Belongs_to(Work:symbol, Movement:symbol)\nBelongs_to(\"The Great Gatsby\", \"Harlem Renaissance\").\n.decl Answer()\nAnswer() :- Reads(\"Al Capone\", work), Belongs_to(work, \"Harlem Renaissance\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Work:symbol)\nReads(\"Al Capone\", \"The Great Gatsby\").\n.decl Belongs_to(Work:symbol, Movement:symbol)\nBelongs_to(\"The Great Gatsby\", \"Harlem Renaissance\").\n.decl Answer()\nAnswer() :- Reads(\"Al Capone\", work), Belongs_to(work, \"Harlem Renaissance\").\n.output Answer"]}
{"id": 1144, "answer": true, "completion": ".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Phil Murphy\", 200).\n.decl Is_governor(Person:symbol, State:symbol, Year:float)\nIs_governor(\"Phil Murphy\", \"New Jersey\", 2020).\n.decl Heftiest_politician(Person:symbol, Weight:float)\nHeftiest_politician(\"Donald Trump\", 250).\n.decl Answer()\nAnswer() :- Is_governor(person, \"New Jersey\", 2020), Has_weight(person, weight1), Heftiest_politician(_, weight2), weight1 > weight2.\n.output Answer", "completions": [".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Phil Murphy\", 200).\n.decl Is_governor(Person:symbol, State:symbol, Year:float)\nIs_governor(\"Phil Murphy\", \"New Jersey\", 2020).\n.decl Heftiest_politician(Person:symbol, Weight:float)\nHeftiest_politician(\"Donald Trump\", 250).\n.decl Answer()\nAnswer() :- Is_governor(person, \"New Jersey\", 2020), Has_weight(person, weight1), Heftiest_politician(_, weight2), weight1 > weight2.\n.output Answer"]}
{"id": 1145, "answer": false, "completion": ".decl Is_punishment(Punishment:symbol)\nIs_punishment(\"keelhauling\").\n.decl Is_fair(Punishment:symbol)\nIs_fair(\"keelhauling\") :- !Is_cruel_and_unusual(Punishment).\n.decl Is_cruel_and_unusual(Punishment:symbol)\nIs_cruel_and_unusual(\"keelhauling\").\n.decl Answer()\nAnswer() :- Is_punishment(\"keelhauling\"), Is_fair(\"keelhauling\").\n.output Answer", "completions": [".decl Is_punishment(Punishment:symbol)\nIs_punishment(\"keelhauling\").\n.decl Is_fair(Punishment:symbol)\nIs_fair(\"keelhauling\") :- !Is_cruel_and_unusual(Punishment).\n.decl Is_cruel_and_unusual(Punishment:symbol)\nIs_cruel_and_unusual(\"keelhauling\").\n.decl Answer()\nAnswer() :- Is_punishment(\"keelhauling\"), Is_fair(\"keelhauling\").\n.output Answer"]}
{"id": 1146, "answer": false, "completion": ".decl Watches(Person:symbol, Show:symbol)\n.decl Answer()\nAnswer() :- !Watches(\"Gandhi\", \"Bonanza\").\n.output Answer", "completions": [".decl Watches(Person:symbol, Show:symbol)\n.decl Answer()\nAnswer() :- !Watches(\"Gandhi\", \"Bonanza\").\n.output Answer"]}
{"id": 1147, "answer": true, "completion": ".decl Has_casualties(War:symbol, Casualties:float)\nHas_casualties(\"deadliest war\", 100000000).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 60000000).\n.decl Answer()\nAnswer() :- Has_casualties(\"deadliest war\", casualties), Has_population(\"France\", population), casualties >= population.\n.output Answer", "completions": [".decl Has_casualties(War:symbol, Casualties:float)\nHas_casualties(\"deadliest war\", 100000000).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 60000000).\n.decl Answer()\nAnswer() :- Has_casualties(\"deadliest war\", casualties), Has_population(\"France\", population), casualties >= population.\n.output Answer"]}
{"id": 1148, "answer": true, "completion": ".decl Has_value(Constant:symbol, Value:float)\nHas_value(\"pi\", 3.14).\nHas_value(\"square root of 5\", 2.236).\n.decl Answer()\nAnswer() :- Has_value(\"pi\", value1), Has_value(\"square root of 5\", value2), value1 > value2.\n.output Answer", "completions": [".decl Has_value(Constant:symbol, Value:float)\nHas_value(\"pi\", 3.14).\nHas_value(\"square root of 5\", 2.236).\n.decl Answer()\nAnswer() :- Has_value(\"pi\", value1), Has_value(\"square root of 5\", value2), value1 > value2.\n.output Answer"]}
{"id": 1149, "answer": false, "completion": ".decl Was_popular(Book:symbol, Time:symbol)\nWas_popular(\"Harry Potter and the Philosopher's Stone\", \"2000s\").\n.decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"great depression\", \"1930s\").\n.decl Answer()\nAnswer() :- Was_popular(\"Harry Potter and the Philosopher's Stone\", time1), Happened_in_time(\"great depression\", time2), time1 != time2.\n.output Answer", "completions": [".decl Was_popular(Book:symbol, Time:symbol)\nWas_popular(\"Harry Potter and the Philosopher's Stone\", \"2000s\").\n.decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"great depression\", \"1930s\").\n.decl Answer()\nAnswer() :- Was_popular(\"Harry Potter and the Philosopher's Stone\", time1), Happened_in_time(\"great depression\", time2), time1 != time2.\n.output Answer"]}
{"id": 1150, "answer": true, "completion": ".decl Requires(Organization:symbol, Requirement:symbol)\nRequires(\"FDA\", \"sell by dates\").\n.decl Uses(Requirement:symbol, System:symbol)\nUses(\"sell by dates\", \"Arabic Numerals\").\n.decl Answer()\nAnswer() :- Requires(\"FDA\", requirement), !Uses(requirement, \"Roman Numerals\").\n.output Answer", "completions": [".decl Requires(Organization:symbol, Requirement:symbol)\nRequires(\"FDA\", \"sell by dates\").\n.decl Uses(Requirement:symbol, System:symbol)\nUses(\"sell by dates\", \"Arabic Numerals\").\n.decl Answer()\nAnswer() :- Requires(\"FDA\", requirement), !Uses(requirement, \"Roman Numerals\").\n.output Answer"]}
{"id": 1151, "answer": true, "completion": ".decl Affects(Animal:symbol, Disease:symbol)\nAffects(\"human\", \"spider veins\").\n.decl Answer()\nAnswer() :- !Affects(\"bumblebee\", \"spider veins\").\n.output Answer", "completions": [".decl Affects(Animal:symbol, Disease:symbol)\nAffects(\"human\", \"spider veins\").\n.decl Answer()\nAnswer() :- !Affects(\"bumblebee\", \"spider veins\").\n.output Answer"]}
{"id": 1152, "answer": true, "completion": ".decl Has_origin(Word:symbol, Origin:symbol)\nHas_origin(\"narcissism\", \"Greek mythology\").\n.decl Is_rare(Origin:symbol)\nIs_rare(\"Greek mythology\").\n.decl Answer()\nAnswer() :- Has_origin(\"narcissism\", origin), Is_rare(origin).\n.output Answer", "completions": [".decl Has_origin(Word:symbol, Origin:symbol)\nHas_origin(\"narcissism\", \"Greek mythology\").\n.decl Is_rare(Origin:symbol)\nIs_rare(\"Greek mythology\").\n.decl Answer()\nAnswer() :- Has_origin(\"narcissism\", origin), Is_rare(origin).\n.output Answer"]}
{"id": 1153, "answer": false, "completion": ".decl Prioritizes(Country:symbol, Subject:symbol)\nPrioritizes(\"US\", \"math\").\nPrioritizes(\"US\", \"science\").\n.decl Answer()\nAnswer() :- Prioritizes(\"US\", \"art\").\n.output Answer", "completions": [".decl Prioritizes(Country:symbol, Subject:symbol)\nPrioritizes(\"US\", \"math\").\nPrioritizes(\"US\", \"science\").\n.decl Answer()\nAnswer() :- Prioritizes(\"US\", \"art\").\n.output Answer"]}
{"id": 1154, "answer": true, "completion": ".decl Occurs_in_region(Event:symbol, Region:symbol)\nOccurs_in_region(\"mummification\", \"Andes\").\nOccurs_in_region(\"rainfall\", \"Andes\").\n.decl Prevents(Event_A:symbol, Event_B:symbol)\nPrevents(\"rainfall\", \"mummification\").\n.decl Answer()\nAnswer() :- Occurs_in_region(\"mummification\", region), Occurs_in_region(\"rainfall\", region), Prevents(\"rainfall\", \"mummification\").\n.output Answer", "completions": [".decl Occurs_in_region(Event:symbol, Region:symbol)\nOccurs_in_region(\"mummification\", \"Andes\").\nOccurs_in_region(\"rainfall\", \"Andes\").\n.decl Prevents(Event_A:symbol, Event_B:symbol)\nPrevents(\"rainfall\", \"mummification\").\n.decl Answer()\nAnswer() :- Occurs_in_region(\"mummification\", region), Occurs_in_region(\"rainfall\", region), Prevents(\"rainfall\", \"mummification\").\n.output Answer"]}
{"id": 1155, "answer": true, "completion": ".decl Located_in(Company:symbol, City:symbol)\nLocated_in(\"LG Electronics\", \"Seoul\").\n.decl Has_official_bird(City:symbol, Bird:symbol)\nHas_official_bird(\"Seoul\", \"Sparrow\").\n.decl Has_tail_color(Bird:symbol, Color:symbol)\nHas_tail_color(\"Sparrow\", \"purplish/blue\").\n.decl Answer()\nAnswer() :- Located_in(\"LG Electronics\", city), Has_official_bird(city, bird), Has_tail_color(bird, \"purplish/blue\").\n.output Answer", "completions": [".decl Located_in(Company:symbol, City:symbol)\nLocated_in(\"LG Electronics\", \"Seoul\").\n.decl Has_official_bird(City:symbol, Bird:symbol)\nHas_official_bird(\"Seoul\", \"Sparrow\").\n.decl Has_tail_color(Bird:symbol, Color:symbol)\nHas_tail_color(\"Sparrow\", \"purplish/blue\").\n.decl Answer()\nAnswer() :- Located_in(\"LG Electronics\", city), Has_official_bird(city, bird), Has_tail_color(bird, \"purplish/blue\").\n.output Answer"]}
{"id": 1156, "answer": true, "completion": ".decl Needs_moisture(Plant:symbol, Moisture:symbol)\nNeeds_moisture(\"cactus\", \"damp\").\n.decl Answer()\nAnswer() :- Needs_moisture(\"cactus\", \"damp\").\n.output Answer", "completions": [".decl Needs_moisture(Plant:symbol, Moisture:symbol)\nNeeds_moisture(\"cactus\", \"damp\").\n.decl Answer()\nAnswer() :- Needs_moisture(\"cactus\", \"damp\").\n.output Answer"]}
{"id": 1157, "answer": false, "completion": ".decl Eats_before(Meal_A:symbol, Meal_B:symbol)\nEats_before(\"dinner\", \"dessert\").\nEats_before(\"breakfast\", \"cereal\").\n.decl Answer()\nAnswer() :- Eats_before(\"dessert\", \"breakfast\").\n.output Answer", "completions": [".decl Eats_before(Meal_A:symbol, Meal_B:symbol)\nEats_before(\"dinner\", \"dessert\").\nEats_before(\"breakfast\", \"cereal\").\n.decl Answer()\nAnswer() :- Eats_before(\"dessert\", \"breakfast\").\n.output Answer"]}
{"id": 1158, "answer": true, "completion": ".decl Inspired_by(Person_A:symbol, Person_B:symbol)\nInspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.output Answer", "completions": [".decl Inspired_by(Person_A:symbol, Person_B:symbol)\nInspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.output Answer"]}
{"id": 1159, "answer": false, "completion": ".decl Has_n_awards(Person:symbol, Award:symbol, N_awards:float)\nHas_n_awards(\"Johnny Carson\", \"Emmy\", 6).\n.decl Has_n_eggs(Carton:symbol, N_eggs:float)\nHas_n_eggs(\"carton\", 12).\n.decl Answer()\nAnswer() :- Has_n_awards(\"Johnny Carson\", \"Emmy\", n_awards), Has_n_eggs(\"carton\", n_eggs), n_awards >= n_eggs.\n.output Answer", "completions": [".decl Has_n_awards(Person:symbol, Award:symbol, N_awards:float)\nHas_n_awards(\"Johnny Carson\", \"Emmy\", 6).\n.decl Has_n_eggs(Carton:symbol, N_eggs:float)\nHas_n_eggs(\"carton\", 12).\n.decl Answer()\nAnswer() :- Has_n_awards(\"Johnny Carson\", \"Emmy\", n_awards), Has_n_eggs(\"carton\", n_eggs), n_awards >= n_eggs.\n.output Answer"]}
{"id": 1160, "answer": false, "completion": ".decl Reads(Person:symbol, Book:symbol)\nReads(\"Julius Caesar\", \"The Gallic Wars\").\n.decl Is_about(Book:symbol, Topic:symbol)\nIs_about(\"The Gallic Wars\", \"Military History\").\n.decl Answer()\nAnswer() :- Reads(\"Julius Caesar\", book), Is_about(book, \"Pharmacology\"), !.\n.output Answer", "completions": [".decl Reads(Person:symbol, Book:symbol)\nReads(\"Julius Caesar\", \"The Gallic Wars\").\n.decl Is_about(Book:symbol, Topic:symbol)\nIs_about(\"The Gallic Wars\", \"Military History\").\n.decl Answer()\nAnswer() :- Reads(\"Julius Caesar\", book), Is_about(book, \"Pharmacology\"), !.\n.output Answer"]}
{"id": 1161, "answer": true, "completion": ".decl Popular_in_month(Character:symbol, Month:symbol)\nPopular_in_month(\"Easter Bunny\", \"April\").\n.decl Answer()\nAnswer() :- Popular_in_month(\"Easter Bunny\", month), month != \"September\".\n.output Answer", "completions": [".decl Popular_in_month(Character:symbol, Month:symbol)\nPopular_in_month(\"Easter Bunny\", \"April\").\n.decl Answer()\nAnswer() :- Popular_in_month(\"Easter Bunny\", month), month != \"September\".\n.output Answer"]}
{"id": 1162, "answer": false, "completion": ".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"alligator\", 4).\nHas_size(\"saltwater crocodile\", 6).\n.decl Answer()\nAnswer() :- Has_size(\"alligator\", size1), Has_size(\"saltwater crocodile\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"alligator\", 4).\nHas_size(\"saltwater crocodile\", 6).\n.decl Answer()\nAnswer() :- Has_size(\"alligator\", size1), Has_size(\"saltwater crocodile\", size2), size1 < size2.\n.output Answer"]}
{"id": 1163, "answer": true, "completion": ".decl Has_cuisine(Place:symbol, Cuisine:symbol)\nHas_cuisine(\"Hawaii\", \"Hawaiian\").\n.decl Suitable_for_vegan(Cuisine:symbol)\nSuitable_for_vegan(\"Hawaiian\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"Hawaii\", cuisine), Suitable_for_vegan(cuisine).\n.output Answer", "completions": [".decl Has_cuisine(Place:symbol, Cuisine:symbol)\nHas_cuisine(\"Hawaii\", \"Hawaiian\").\n.decl Suitable_for_vegan(Cuisine:symbol)\nSuitable_for_vegan(\"Hawaiian\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"Hawaii\", cuisine), Suitable_for_vegan(cuisine).\n.output Answer"]}
{"id": 1164, "answer": true, "completion": ".decl Has_been_in(Person:symbol, Band:symbol)\nHas_been_in(\"Ringo Starr\", \"The Beatles\").\nHas_been_in(\"Ringo Starr\", \"The All-Starr Band\").\nHas_been_in(\"Ringo Starr\", \"The Plastic Ono Band\").\n.decl Answer()\nAnswer() :- Has_been_in(\"Ringo Starr\", _), Has_been_in(\"Ringo Starr\", _), Has_been_in(\"Ringo Starr\", _).\n.output Answer", "completions": [".decl Has_been_in(Person:symbol, Band:symbol)\nHas_been_in(\"Ringo Starr\", \"The Beatles\").\nHas_been_in(\"Ringo Starr\", \"The All-Starr Band\").\nHas_been_in(\"Ringo Starr\", \"The Plastic Ono Band\").\n.decl Answer()\nAnswer() :- Has_been_in(\"Ringo Starr\", _), Has_been_in(\"Ringo Starr\", _), Has_been_in(\"Ringo Starr\", _).\n.output Answer"]}
{"id": 1165, "answer": true, "completion": ".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Achilles\", 10).\nHas_strength(\"Legolas\", 8).\n.decl Answer()\nAnswer() :- Has_strength(\"Achilles\", strength1), Has_strength(\"Legolas\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Achilles\", 10).\nHas_strength(\"Legolas\", 8).\n.decl Answer()\nAnswer() :- Has_strength(\"Achilles\", strength1), Has_strength(\"Legolas\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 1166, "answer": true, "completion": ".decl Is_on_diet(Person:symbol, Diet:symbol)\nIs_on_diet(\"John\", \"keto\").\n.decl Is_allowed_on_diet(Food:symbol, Diet:symbol)\nIs_allowed_on_diet(\"Dosa\", \"keto\").\n.decl Answer()\nAnswer() :- Is_on_diet(person, \"keto\"), Is_allowed_on_diet(\"Dosa\", diet), diet = \"keto\".\n.output Answer", "completions": [".decl Is_on_diet(Person:symbol, Diet:symbol)\nIs_on_diet(\"John\", \"keto\").\n.decl Is_allowed_on_diet(Food:symbol, Diet:symbol)\nIs_allowed_on_diet(\"Dosa\", \"keto\").\n.decl Answer()\nAnswer() :- Is_on_diet(person, \"keto\"), Is_allowed_on_diet(\"Dosa\", diet), diet = \"keto\".\n.output Answer"]}
{"id": 1167, "answer": true, "completion": ".decl Has_hair_length(Person:symbol, Hair_length:float)\nHas_hair_length(\"Metallica band members\", long).\nHas_hair_length(\"Metallica band members\", short).\n.decl Affects_sales(Event:symbol, Sales:float)\nAffects_sales(\"cutting hair\", negative).\n.decl Answer()\nAnswer() :- Has_hair_length(\"Metallica band members\", hair_length1), Has_hair_length(\"Metallica band members\", hair_length2), Affects_sales(\"cutting hair\", sales), hair_length1 != hair_length2, sales < 0.\n.output Answer", "completions": [".decl Has_hair_length(Person:symbol, Hair_length:float)\nHas_hair_length(\"Metallica band members\", long).\nHas_hair_length(\"Metallica band members\", short).\n.decl Affects_sales(Event:symbol, Sales:float)\nAffects_sales(\"cutting hair\", negative).\n.decl Answer()\nAnswer() :- Has_hair_length(\"Metallica band members\", hair_length1), Has_hair_length(\"Metallica band members\", hair_length2), Affects_sales(\"cutting hair\", sales), hair_length1 != hair_length2, sales < 0.\n.output Answer"]}
{"id": 1168, "answer": true, "completion": ".decl Has_qualifications(Person:symbol, Qualifications:symbol)\nHas_qualifications(\"Quiet\", \"none\").\n.decl Requires_qualifications(Job:symbol, Qualifications:symbol)\nRequires_qualifications(\"lecturer at Haub\", \"PhD\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Quiet\", qualifications1), Requires_qualifications(\"lecturer at Haub\", qualifications2), qualifications1 != qualifications2.\n.output Answer", "completions": [".decl Has_qualifications(Person:symbol, Qualifications:symbol)\nHas_qualifications(\"Quiet\", \"none\").\n.decl Requires_qualifications(Job:symbol, Qualifications:symbol)\nRequires_qualifications(\"lecturer at Haub\", \"PhD\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Quiet\", qualifications1), Requires_qualifications(\"lecturer at Haub\", qualifications2), qualifications1 != qualifications2.\n.output Answer"]}
{"id": 1169, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Mount Emei\", 4.5e+9).\n.decl Can_lift(Crane:symbol, Weight:float)\nCan_lift(\"Liebherr LTM 11200-9.1\", 1.2e+9).\n.decl Answer()\nAnswer() :- Has_weight(\"Mount Emei\", weight1), Can_lift(\"Liebherr LTM 11200-9.1\", weight2), weight1 <= weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Mount Emei\", 4.5e+9).\n.decl Can_lift(Crane:symbol, Weight:float)\nCan_lift(\"Liebherr LTM 11200-9.1\", 1.2e+9).\n.decl Answer()\nAnswer() :- Has_weight(\"Mount Emei\", weight1), Can_lift(\"Liebherr LTM 11200-9.1\", weight2), weight1 <= weight2.\n.output Answer"]}
{"id": 1170, "answer": false, "completion": ".decl Is_sign_of(Event:symbol, Condition:symbol)\nIs_sign_of(\"snoring\", \"poor breathing\").\n.decl Answer()\nAnswer() :- !Is_sign_of(\"snoring\", \"good breathing\").\n.output Answer", "completions": [".decl Is_sign_of(Event:symbol, Condition:symbol)\nIs_sign_of(\"snoring\", \"poor breathing\").\n.decl Answer()\nAnswer() :- !Is_sign_of(\"snoring\", \"good breathing\").\n.output Answer"]}
{"id": 1171, "answer": true, "completion": ".decl Answer()\nAnswer() :- !(\"ABBA\" = \"Swedish Beatles\").\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !(\"ABBA\" = \"Swedish Beatles\").\n.output Answer"]}
{"id": 1172, "answer": true, "completion": ".decl Has_lifestyle(Person:symbol, Lifestyle:symbol)\nHas_lifestyle(\"Jackson Pollock\", \"straight edge\").\n.decl Answer()\nAnswer() :- Has_lifestyle(\"Jackson Pollock\", \"straight edge\").\n.output Answer", "completions": [".decl Has_lifestyle(Person:symbol, Lifestyle:symbol)\nHas_lifestyle(\"Jackson Pollock\", \"straight edge\").\n.decl Answer()\nAnswer() :- Has_lifestyle(\"Jackson Pollock\", \"straight edge\").\n.output Answer"]}
{"id": 1173, "answer": true, "completion": ".decl Has_player_number(Game:symbol, Player_number:float)\nHas_player_number(\"Dungeons and Dragons\", 1).\n.decl Answer()\nAnswer() :- Has_player_number(\"Dungeons and Dragons\", player_number), player_number >= 1.\n.output Answer", "completions": [".decl Has_player_number(Game:symbol, Player_number:float)\nHas_player_number(\"Dungeons and Dragons\", 1).\n.decl Answer()\nAnswer() :- Has_player_number(\"Dungeons and Dragons\", player_number), player_number >= 1.\n.output Answer"]}
{"id": 1174, "answer": true, "completion": ".decl Has_component(Object:symbol, Component:symbol)\nHas_component(\"game engine\", \"fuel injector\").\n.decl Answer()\nAnswer() :- Has_component(\"game engine\", \"fuel injector\").\n.output Answer", "completions": [".decl Has_component(Object:symbol, Component:symbol)\nHas_component(\"game engine\", \"fuel injector\").\n.decl Answer()\nAnswer() :- Has_component(\"game engine\", \"fuel injector\").\n.output Answer"]}
{"id": 1175, "answer": false, "completion": ".decl Has_children(Person:symbol, Children:symbol)\nHas_children(\"Heracles\", \"Iphicles\").\nHas_children(\"Heracles\", \"Hyllus\").\nHas_children(\"Heracles\", \"Therimachus\").\nHas_children(\"Heracles\", \"Ctesippus\").\nHas_children(\"Heracles\", \"Deicoon\").\n.decl Attended(Person:symbol, Event:symbol)\nAttended(\"Iphicles\", \"Heracles's funeral pyre\").\nAttended(\"Hyllus\", \"Heracles's funeral pyre\").\nAttended(\"Therimachus\", \"Heracles's funeral pyre\").\nAttended(\"Ctesippus\", \"Heracles's funeral pyre\").\nAttended(\"Deicoon\", \"Heracles's funeral pyre\").\n.decl Answer()\nAnswer() :- Has_children(\"Heracles\", child), Attended(child, \"Heracles's funeral pyre\").\n.output Answer", "completions": [".decl Has_children(Person:symbol, Children:symbol)\nHas_children(\"Heracles\", \"Iphicles\").\nHas_children(\"Heracles\", \"Hyllus\").\nHas_children(\"Heracles\", \"Therimachus\").\nHas_children(\"Heracles\", \"Ctesippus\").\nHas_children(\"Heracles\", \"Deicoon\").\n.decl Attended(Person:symbol, Event:symbol)\nAttended(\"Iphicles\", \"Heracles's funeral pyre\").\nAttended(\"Hyllus\", \"Heracles's funeral pyre\").\nAttended(\"Therimachus\", \"Heracles's funeral pyre\").\nAttended(\"Ctesippus\", \"Heracles's funeral pyre\").\nAttended(\"Deicoon\", \"Heracles's funeral pyre\").\n.decl Answer()\nAnswer() :- Has_children(\"Heracles\", child), Attended(child, \"Heracles's funeral pyre\").\n.output Answer"]}
{"id": 1176, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"moon\", 2.19e+18).\nHas_volume(\"Black Sea\", 6.4e+18).\n.decl Answer()\nAnswer() :- Has_volume(\"moon\", volume1), Has_volume(\"Black Sea\", volume2), volume1 <= volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"moon\", 2.19e+18).\nHas_volume(\"Black Sea\", 6.4e+18).\n.decl Answer()\nAnswer() :- Has_volume(\"moon\", volume1), Has_volume(\"Black Sea\", volume2), volume1 <= volume2.\n.output Answer"]}
{"id": 1177, "answer": false, "completion": ".decl Appears_in_time(Object:symbol, Time:symbol)\nAppears_in_time(\"peach blossoms\", \"spring\").\nAppears_in_time(\"Andromeda\", \"autumn\").\n.decl Answer()\nAnswer() :- Appears_in_time(\"peach blossoms\", time1), Appears_in_time(\"Andromeda\", time2), time1 != time2.\n.output Answer", "completions": [".decl Appears_in_time(Object:symbol, Time:symbol)\nAppears_in_time(\"peach blossoms\", \"spring\").\nAppears_in_time(\"Andromeda\", \"autumn\").\n.decl Answer()\nAnswer() :- Appears_in_time(\"peach blossoms\", time1), Appears_in_time(\"Andromeda\", time2), time1 != time2.\n.output Answer"]}
{"id": 1178, "answer": true, "completion": ".decl Has_Bacon_Number(Person:symbol, Bacon_Number:float)\nHas_Bacon_Number(\"Al Pacino\", 2).\nHas_Bacon_Number(\"Margaret Qualley\", 2).\n.decl Answer()\nAnswer() :- Has_Bacon_Number(\"Al Pacino\", bacon_number1), Has_Bacon_Number(\"Margaret Qualley\", bacon_number2), bacon_number1 = bacon_number2.\n.output Answer", "completions": [".decl Has_Bacon_Number(Person:symbol, Bacon_Number:float)\nHas_Bacon_Number(\"Al Pacino\", 2).\nHas_Bacon_Number(\"Margaret Qualley\", 2).\n.decl Answer()\nAnswer() :- Has_Bacon_Number(\"Al Pacino\", bacon_number1), Has_Bacon_Number(\"Margaret Qualley\", bacon_number2), bacon_number1 = bacon_number2.\n.output Answer"]}
{"id": 1179, "answer": false, "completion": ".decl Has_writing_style(Document:symbol, Writing_style:symbol)\nHas_writing_style(\"Tenth Amendment to the Constitution\", \"English\").\n.decl Answer()\nAnswer() :- !Has_writing_style(\"Tenth Amendment to the Constitution\", \"Pitman shorthand\").\n.output Answer", "completions": [".decl Has_writing_style(Document:symbol, Writing_style:symbol)\nHas_writing_style(\"Tenth Amendment to the Constitution\", \"English\").\n.decl Answer()\nAnswer() :- !Has_writing_style(\"Tenth Amendment to the Constitution\", \"Pitman shorthand\").\n.output Answer"]}
{"id": 1180, "answer": true, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Ivan the Terrible\", \"Ivan the Terrible\").\nHas_nickname(\"Ivan III of Russia\", \"Ivan the Great\").\nHas_nickname(\"Vasili III of Russia\", \"Vasili the Great\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Ivan the Terrible\", nickname1), Has_nickname(\"Ivan III of Russia\", nickname2), Has_nickname(\"Vasili III of Russia\", nickname3), nickname2 != \"Ivan the Terrible\", nickname3 != \"Ivan the Terrible\".\n.output Answer", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Ivan the Terrible\", \"Ivan the Terrible\").\nHas_nickname(\"Ivan III of Russia\", \"Ivan the Great\").\nHas_nickname(\"Vasili III of Russia\", \"Vasili the Great\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Ivan the Terrible\", nickname1), Has_nickname(\"Ivan III of Russia\", nickname2), Has_nickname(\"Vasili III of Russia\", nickname3), nickname2 != \"Ivan the Terrible\", nickname3 != \"Ivan the Terrible\".\n.output Answer"]}
{"id": 1181, "answer": true, "completion": ".decl Has_cousin(Person:symbol, Relative:symbol)\nHas_cousin(\"Zelda Williams\", \"cousin\").\n.decl Answer()\nAnswer() :- Has_cousin(\"Zelda Williams\", relative), relative = \"cousin\".\n.output Answer", "completions": [".decl Has_cousin(Person:symbol, Relative:symbol)\nHas_cousin(\"Zelda Williams\", \"cousin\").\n.decl Answer()\nAnswer() :- Has_cousin(\"Zelda Williams\", relative), relative = \"cousin\".\n.output Answer"]}
{"id": 1182, "answer": false, "completion": ".decl Found_in(Thing:symbol, Place:symbol)\nFound_in(\"thetan levels\", \"Scientology\").\n.decl Answer()\nAnswer() :- !Found_in(\"thetan levels\", \"New Testament\").\n.output Answer", "completions": [".decl Found_in(Thing:symbol, Place:symbol)\nFound_in(\"thetan levels\", \"Scientology\").\n.decl Answer()\nAnswer() :- !Found_in(\"thetan levels\", \"New Testament\").\n.output Answer"]}
{"id": 1183, "answer": true, "completion": ".decl Has_name(Food:symbol, Name:symbol)\nHas_name(\"pancake\", \"silver dollar pancake\").\nHas_name(\"pancake\", \"golden dollar pancake\").\n.decl Answer()\nAnswer() :- Has_name(\"pancake\", name), name = \"silver dollar pancake\" ; name = \"golden dollar pancake\".\n.output Answer", "completions": [".decl Has_name(Food:symbol, Name:symbol)\nHas_name(\"pancake\", \"silver dollar pancake\").\nHas_name(\"pancake\", \"golden dollar pancake\").\n.decl Answer()\nAnswer() :- Has_name(\"pancake\", name), name = \"silver dollar pancake\" ; name = \"golden dollar pancake\".\n.output Answer"]}
{"id": 1184, "answer": false, "completion": ".decl Has_anatomy(Animal:symbol, Anatomy:symbol)\nHas_anatomy(\"camel\", \"hump\").\n.decl Is_joke_day(Day:symbol)\nIs_joke_day(\"Wednesday\").\n.decl Answer()\nAnswer() :- Has_anatomy(\"camel\", anatomy), Is_joke_day(day).\n.output Answer", "completions": [".decl Has_anatomy(Animal:symbol, Anatomy:symbol)\nHas_anatomy(\"camel\", \"hump\").\n.decl Is_joke_day(Day:symbol)\nIs_joke_day(\"Wednesday\").\n.decl Answer()\nAnswer() :- Has_anatomy(\"camel\", anatomy), Is_joke_day(day).\n.output Answer"]}
{"id": 1185, "answer": true, "completion": ".decl Wrestles_on(Person:symbol, Show:symbol)\nWrestles_on(\"Bruiser Brody\", \"WWE SmackDown\").\n.decl Answer()\nAnswer() :- !Wrestles_on(\"Bruiser Brody\", \"WWE Raw\").\n.output Answer", "completions": [".decl Wrestles_on(Person:symbol, Show:symbol)\nWrestles_on(\"Bruiser Brody\", \"WWE SmackDown\").\n.decl Answer()\nAnswer() :- !Wrestles_on(\"Bruiser Brody\", \"WWE Raw\").\n.output Answer"]}
{"id": 1186, "answer": false, "completion": ".decl Studies(Field:symbol, Subject:symbol)\nStudies(\"zoology\", \"animals\").\n.decl Answer()\nAnswer() :- !Studies(\"zoology\", \"strigoi\").\n.output Answer", "completions": [".decl Studies(Field:symbol, Subject:symbol)\nStudies(\"zoology\", \"animals\").\n.decl Answer()\nAnswer() :- !Studies(\"zoology\", \"strigoi\").\n.output Answer"]}
{"id": 1187, "answer": false, "completion": ".decl Has_race(Character:symbol, Race:symbol)\nHas_race(\"Depala\", \"Goblin\").\n.decl Answer()\nAnswer() :- Has_race(\"Depala\", race).\n.output Answer", "completions": [".decl Has_race(Character:symbol, Race:symbol)\nHas_race(\"Depala\", \"Goblin\").\n.decl Answer()\nAnswer() :- Has_race(\"Depala\", race).\n.output Answer"]}
{"id": 1188, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\n.decl Answer()\nAnswer() :- Born_in_year(person1, year1), Born_in_year(person2, year2), person1 != person2, year1 = year2.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\n.decl Answer()\nAnswer() :- Born_in_year(person1, year1), Born_in_year(person2, year2), person1 != person2, year1 = year2.\n.output Answer"]}
{"id": 1189, "answer": true, "completion": ".decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"Tom Bosley\", \"board games\").\n.decl Answer()\nAnswer() :- !Enjoys(\"Tom Bosley\", \"video games\").\n.output Answer", "completions": [".decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"Tom Bosley\", \"board games\").\n.decl Answer()\nAnswer() :- !Enjoys(\"Tom Bosley\", \"video games\").\n.output Answer"]}
{"id": 1190, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\nHas_n_members(\"The Osmonds\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members1), Has_n_members(\"The Osmonds\", n_members2), n_members1 > n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\nHas_n_members(\"The Osmonds\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members1), Has_n_members(\"The Osmonds\", n_members2), n_members1 > n_members2.\n.output Answer"]}
{"id": 1191, "answer": false, "completion": ".decl Is_ingredient(Object:symbol, Product:symbol)\nIs_ingredient(\"kaffir lime\", \"candle\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"kaffir lime\", \"candle\").\n.output Answer", "completions": [".decl Is_ingredient(Object:symbol, Product:symbol)\nIs_ingredient(\"kaffir lime\", \"candle\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"kaffir lime\", \"candle\").\n.output Answer"]}
{"id": 1192, "answer": false, "completion": ".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Alcatraz Island\", 22).\n.decl Needs_area(Object:symbol, Area:float)\nNeeds_area(\"football field\", 5760).\n.decl Answer()\nAnswer() :- Has_area(\"Alcatraz Island\", area1), Needs_area(\"football field\", area2), area1 >= area2.\n.output Answer", "completions": [".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Alcatraz Island\", 22).\n.decl Needs_area(Object:symbol, Area:float)\nNeeds_area(\"football field\", 5760).\n.decl Answer()\nAnswer() :- Has_area(\"Alcatraz Island\", area1), Needs_area(\"football field\", area2), area1 >= area2.\n.output Answer"]}
{"id": 1193, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Region:symbol)\nLives_in(\"Iberian wolf\", \"Spain\").\n.decl Answer()\nAnswer() :- Lives_in(\"Iberian wolf\", region), region != \"Southern United States\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Region:symbol)\nLives_in(\"Iberian wolf\", \"Spain\").\n.decl Answer()\nAnswer() :- Lives_in(\"Iberian wolf\", region), region != \"Southern United States\".\n.output Answer"]}
{"id": 1194, "answer": true, "completion": ".decl Has_sting_power(Insect:symbol, Sting_power:float)\nHas_sting_power(\"spider wasp\", 4).\nHas_sting_power(\"bullet ant\", 2).\n.decl Answer()\nAnswer() :- Has_sting_power(\"spider wasp\", sting_power1), Has_sting_power(\"bullet ant\", sting_power2), sting_power1 > sting_power2.\n.output Answer", "completions": [".decl Has_sting_power(Insect:symbol, Sting_power:float)\nHas_sting_power(\"spider wasp\", 4).\nHas_sting_power(\"bullet ant\", 2).\n.decl Answer()\nAnswer() :- Has_sting_power(\"spider wasp\", sting_power1), Has_sting_power(\"bullet ant\", sting_power2), sting_power1 > sting_power2.\n.output Answer"]}
{"id": 1195, "answer": true, "completion": ".decl Has_film_number(Studio:symbol, Film_number:float)\nHas_film_number(\"Disney\", 2).\n.decl Rips_off(Film:symbol, Story:symbol)\nRips_off(\"The Prince and the Pauper\", \"Prophet Story\").\n.decl Answer()\nAnswer() :- Has_film_number(\"Disney\", film_number), Rips_off(film, \"Prophet Story\"), film_number = 2.\n.output Answer", "completions": [".decl Has_film_number(Studio:symbol, Film_number:float)\nHas_film_number(\"Disney\", 2).\n.decl Rips_off(Film:symbol, Story:symbol)\nRips_off(\"The Prince and the Pauper\", \"Prophet Story\").\n.decl Answer()\nAnswer() :- Has_film_number(\"Disney\", film_number), Rips_off(film, \"Prophet Story\"), film_number = 2.\n.output Answer"]}
{"id": 1196, "answer": true, "completion": ".decl Buys(Person:symbol, Item:symbol)\nBuys(\"John\", \"crickets\").\n.decl Owns(Person:symbol, Pet:symbol)\nOwns(\"John\", \"dog\").\n.decl Answer()\nAnswer() :- Buys(person, \"crickets\"), Owns(person, pet).\n.output Answer", "completions": [".decl Buys(Person:symbol, Item:symbol)\nBuys(\"John\", \"crickets\").\n.decl Owns(Person:symbol, Pet:symbol)\nOwns(\"John\", \"dog\").\n.decl Answer()\nAnswer() :- Buys(person, \"crickets\"), Owns(person, pet).\n.output Answer"]}
{"id": 1197, "answer": true, "completion": ".decl Cost(Item:symbol, Year:float, Price:float)\nCost(\"TIME magazine\", 2020, 5).\nCost(\"2009 eclipse\", 2009, 1).\n.decl Answer()\nAnswer() :- Cost(\"2009 eclipse\", 2009, price1), Cost(\"TIME magazine\", 2020, price2), price1 <= price2.\n.output Answer", "completions": [".decl Cost(Item:symbol, Year:float, Price:float)\nCost(\"TIME magazine\", 2020, 5).\nCost(\"2009 eclipse\", 2009, 1).\n.decl Answer()\nAnswer() :- Cost(\"2009 eclipse\", 2009, price1), Cost(\"TIME magazine\", 2020, price2), price1 <= price2.\n.output Answer"]}
{"id": 1198, "answer": false, "completion": ".decl Has_real_name(Rapper:symbol, Real_name:symbol)\nHas_real_name(\"Lil Wayne\", \"Dwayne Michael Carter Jr.\").\n.decl Has_n_grammy_awards(Rapper:symbol, N_grammy_awards:float)\nHas_n_grammy_awards(\"Lil Wayne\", 4).\n.decl Answer()\nAnswer() :- Has_real_name(rapper, \"Dwayne Michael Carter Jr.\"), Has_n_grammy_awards(\"Lil Wayne\", n_grammy_awards1), Has_n_grammy_awards(rapper, n_grammy_awards2), n_grammy_awards2 > n_grammy_awards1 * 4.\n.output Answer", "completions": [".decl Has_real_name(Rapper:symbol, Real_name:symbol)\nHas_real_name(\"Lil Wayne\", \"Dwayne Michael Carter Jr.\").\n.decl Has_n_grammy_awards(Rapper:symbol, N_grammy_awards:float)\nHas_n_grammy_awards(\"Lil Wayne\", 4).\n.decl Answer()\nAnswer() :- Has_real_name(rapper, \"Dwayne Michael Carter Jr.\"), Has_n_grammy_awards(\"Lil Wayne\", n_grammy_awards1), Has_n_grammy_awards(rapper, n_grammy_awards2), n_grammy_awards2 > n_grammy_awards1 * 4.\n.output Answer"]}
{"id": 1199, "answer": true, "completion": ".decl Needs_refrigeration(Food:symbol, Refrigeration:symbol)\nNeeds_refrigeration(\"oysters\", \"yes\").\n.decl Answer()\nAnswer() :- Needs_refrigeration(\"oysters\", \"no\").\n.output Answer", "completions": [".decl Needs_refrigeration(Food:symbol, Refrigeration:symbol)\nNeeds_refrigeration(\"oysters\", \"yes\").\n.decl Answer()\nAnswer() :- Needs_refrigeration(\"oysters\", \"no\").\n.output Answer"]}
{"id": 1200, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Kate Gosselin's household\", 8).\n.decl Needs_n_members(Team:symbol, N_members:float)\nNeeds_n_members(\"Bandy team\", 11).\n.decl Answer()\nAnswer() :- Has_n_members(\"Kate Gosselin's household\", n_members1), Needs_n_members(\"Bandy team\", n_members2), n_members1 >= n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Kate Gosselin's household\", 8).\n.decl Needs_n_members(Team:symbol, N_members:float)\nNeeds_n_members(\"Bandy team\", 11).\n.decl Answer()\nAnswer() :- Has_n_members(\"Kate Gosselin's household\", n_members1), Needs_n_members(\"Bandy team\", n_members2), n_members1 >= n_members2.\n.output Answer"]}
{"id": 1201, "answer": true, "completion": ".decl Can_chase(Animal_A:symbol, Animal_B:symbol)\nCan_chase(\"emu\", \"bogan\").\n.decl Answer()\nAnswer() :- Can_chase(\"emu\", \"bogan\").\n.output Answer", "completions": [".decl Can_chase(Animal_A:symbol, Animal_B:symbol)\nCan_chase(\"emu\", \"bogan\").\n.decl Answer()\nAnswer() :- Can_chase(\"emu\", \"bogan\").\n.output Answer"]}
{"id": 1202, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Cuban revolution\", \"1959-1961\").\n.decl Has_population_change(Country:symbol, Change:symbol)\nHas_population_change(\"US\", \"boom\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Cuban revolution\", time), Has_population_change(\"US\", change), time = change.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Cuban revolution\", \"1959-1961\").\n.decl Has_population_change(Country:symbol, Change:symbol)\nHas_population_change(\"US\", \"boom\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Cuban revolution\", time), Has_population_change(\"US\", change), time = change.\n.output Answer"]}
{"id": 1203, "answer": true, "completion": ".decl Describes(Book:symbol, Topic:symbol)\nDescribes(\"Alice's Adventures in Wonderland\", \"tobacco use\").\n.decl Makes_seem_enjoyable(Topic:symbol, Opinion:symbol)\nMakes_seem_enjoyable(\"tobacco use\", \"enjoyable\").\n.decl Answer()\nAnswer() :- Describes(\"Alice's Adventures in Wonderland\", topic), Makes_seem_enjoyable(topic, \"enjoyable\").\n.output Answer", "completions": [".decl Describes(Book:symbol, Topic:symbol)\nDescribes(\"Alice's Adventures in Wonderland\", \"tobacco use\").\n.decl Makes_seem_enjoyable(Topic:symbol, Opinion:symbol)\nMakes_seem_enjoyable(\"tobacco use\", \"enjoyable\").\n.decl Answer()\nAnswer() :- Describes(\"Alice's Adventures in Wonderland\", topic), Makes_seem_enjoyable(topic, \"enjoyable\").\n.output Answer"]}
{"id": 1204, "answer": true, "completion": ".decl Kills(Food:symbol, Cause:symbol)\nKills(\"grapefruit\", \"allergies\").\nKills(\"grapefruit\", \"choking\").\nKills(\"grapefruit\", \"drug interactions\").\n.decl Answer()\nAnswer() :- Kills(\"grapefruit\", cause), cause != \"allergies\", cause != \"choking\".\n.output Answer", "completions": [".decl Kills(Food:symbol, Cause:symbol)\nKills(\"grapefruit\", \"allergies\").\nKills(\"grapefruit\", \"choking\").\nKills(\"grapefruit\", \"drug interactions\").\n.decl Answer()\nAnswer() :- Kills(\"grapefruit\", cause), cause != \"allergies\", cause != \"choking\".\n.output Answer"]}
{"id": 1205, "answer": false, "completion": ".decl Wrestles_in(Person:symbol, City:symbol)\nWrestles_in(\"Kane\", \"Atlanta\").\n.decl Banned_from(Person:symbol, City:symbol)\nBanned_from(\"Kane\", \"Atlanta\").\n.decl Answer()\nAnswer() :- Wrestles_in(\"Kane\", city), Banned_from(\"Kane\", city).\n.output Answer", "completions": [".decl Wrestles_in(Person:symbol, City:symbol)\nWrestles_in(\"Kane\", \"Atlanta\").\n.decl Banned_from(Person:symbol, City:symbol)\nBanned_from(\"Kane\", \"Atlanta\").\n.decl Answer()\nAnswer() :- Wrestles_in(\"Kane\", city), Banned_from(\"Kane\", city).\n.output Answer"]}
{"id": 1206, "answer": true, "completion": ".decl Is_good_for(Product:symbol, Group:symbol)\nIs_good_for(\"ammonia fighting cleaner\", \"pet owners\").\n.decl Answer()\nAnswer() :- Is_good_for(\"ammonia fighting cleaner\", \"pet owners\").\n.output Answer", "completions": [".decl Is_good_for(Product:symbol, Group:symbol)\nIs_good_for(\"ammonia fighting cleaner\", \"pet owners\").\n.decl Answer()\nAnswer() :- Is_good_for(\"ammonia fighting cleaner\", \"pet owners\").\n.output Answer"]}
{"id": 1207, "answer": true, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Wembley Stadium\", 90000).\n.decl Has_ancestry(Person:symbol, Ancestry:symbol)\nHas_ancestry(\"John Smith\", \"Mongols\").\n.decl Answer()\nAnswer() :- Has_capacity(\"Wembley Stadium\", capacity), Has_ancestry(person, \"Mongols\"), capacity > 0.\n.output Answer", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Wembley Stadium\", 90000).\n.decl Has_ancestry(Person:symbol, Ancestry:symbol)\nHas_ancestry(\"John Smith\", \"Mongols\").\n.decl Answer()\nAnswer() :- Has_capacity(\"Wembley Stadium\", capacity), Has_ancestry(person, \"Mongols\"), capacity > 0.\n.output Answer"]}
{"id": 1208, "answer": true, "completion": ".decl Has_significance(Event:symbol, Group:symbol)\nHas_significance(\"Holy Saturday 2019\", \"Christians\").\n.decl Answer()\nAnswer() :- !Has_significance(\"Holy Saturday 2019\", \"pot smokers\").\n.output Answer", "completions": [".decl Has_significance(Event:symbol, Group:symbol)\nHas_significance(\"Holy Saturday 2019\", \"Christians\").\n.decl Answer()\nAnswer() :- !Has_significance(\"Holy Saturday 2019\", \"pot smokers\").\n.output Answer"]}
{"id": 1209, "answer": true, "completion": ".decl Has_planted_flag(Organization:symbol, Location:symbol)\nHas_planted_flag(\"CNES\", \"Earth\").\n.decl Answer()\nAnswer() :- !Has_planted_flag(\"CNES\", \"lunar surface\").\n.output Answer", "completions": [".decl Has_planted_flag(Organization:symbol, Location:symbol)\nHas_planted_flag(\"CNES\", \"Earth\").\n.decl Answer()\nAnswer() :- !Has_planted_flag(\"CNES\", \"lunar surface\").\n.output Answer"]}
{"id": 1210, "answer": false, "completion": ".decl Needs_to_know(Person:symbol, Topic:symbol)\nNeeds_to_know(\"Brad Peyton\", \"geology\").\n.decl Answer()\nAnswer() :- Needs_to_know(\"Brad Peyton\", \"seismology\").\n.output Answer", "completions": [".decl Needs_to_know(Person:symbol, Topic:symbol)\nNeeds_to_know(\"Brad Peyton\", \"geology\").\n.decl Answer()\nAnswer() :- Needs_to_know(\"Brad Peyton\", \"seismology\").\n.output Answer"]}
{"id": 1211, "answer": true, "completion": ".decl Has_policy(University:symbol, Policy:symbol)\nHas_policy(\"American Public University\", \"anti-discrimination\").\n.decl Answer()\nAnswer() :- Has_policy(\"American Public University\", \"anti-discrimination\"), !Has_policy(\"American Public University\", \"Ku Klux Klan\").\n.output Answer", "completions": [".decl Has_policy(University:symbol, Policy:symbol)\nHas_policy(\"American Public University\", \"anti-discrimination\").\n.decl Answer()\nAnswer() :- Has_policy(\"American Public University\", \"anti-discrimination\"), !Has_policy(\"American Public University\", \"Ku Klux Klan\").\n.output Answer"]}
{"id": 1212, "answer": false, "completion": ".decl Last_n_episodes(Person:symbol, Show:symbol, N_episodes:float)\nLast_n_episodes(\"Teri Hatcher\", \"Desperate Housewives\", 180).\nLast_n_episodes(\"Teri Hatcher\", \"Superman\", 90).\n.decl Answer()\nAnswer() :- Last_n_episodes(\"Teri Hatcher\", show1, n_episodes1), Last_n_episodes(\"Teri Hatcher\", show2, n_episodes2), show1 != show2, n_episodes1 > 2*n_episodes2.\n.output Answer", "completions": [".decl Last_n_episodes(Person:symbol, Show:symbol, N_episodes:float)\nLast_n_episodes(\"Teri Hatcher\", \"Desperate Housewives\", 180).\nLast_n_episodes(\"Teri Hatcher\", \"Superman\", 90).\n.decl Answer()\nAnswer() :- Last_n_episodes(\"Teri Hatcher\", show1, n_episodes1), Last_n_episodes(\"Teri Hatcher\", show2, n_episodes2), show1 != show2, n_episodes1 > 2*n_episodes2.\n.output Answer"]}
{"id": 1213, "answer": true, "completion": ".decl Appears_in(Character:symbol, Cartoon:symbol, Year:float)\nAppears_in(\"Mickey Mouse\", \"Steamboat Willie\", 1928).\nAppears_in(\"Bugs Bunny\", \"A Wild Hare\", 1940).\n.decl Answer()\nAnswer() :- Appears_in(\"Mickey Mouse\", cartoon, year1), Appears_in(\"Bugs Bunny\", cartoon, year2), year1 < 1930, year2 > 1930.\n.output Answer", "completions": [".decl Appears_in(Character:symbol, Cartoon:symbol, Year:float)\nAppears_in(\"Mickey Mouse\", \"Steamboat Willie\", 1928).\nAppears_in(\"Bugs Bunny\", \"A Wild Hare\", 1940).\n.decl Answer()\nAnswer() :- Appears_in(\"Mickey Mouse\", cartoon, year1), Appears_in(\"Bugs Bunny\", cartoon, year2), year1 < 1930, year2 > 1930.\n.output Answer"]}
{"id": 1214, "answer": true, "completion": ".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Terence Tao\", 230).\nHas_IQ(\"Eminem\", 110).\n.decl Answer()\nAnswer() :- Has_IQ(\"Terence Tao\", iq1), Has_IQ(\"Eminem\", iq2), iq1 > iq2.\n.output Answer", "completions": [".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Terence Tao\", 230).\nHas_IQ(\"Eminem\", 110).\n.decl Answer()\nAnswer() :- Has_IQ(\"Terence Tao\", iq1), Has_IQ(\"Eminem\", iq2), iq1 > iq2.\n.output Answer"]}
{"id": 1215, "answer": false, "completion": ".decl Is_in_county(Company:symbol, County:symbol)\nIs_in_county(\"Disney\", \"Los Angeles County\").\n.decl Answer()\nAnswer() :- Is_in_county(\"Disney\", \"Los Angeles County\").\n.output Answer", "completions": [".decl Is_in_county(Company:symbol, County:symbol)\nIs_in_county(\"Disney\", \"Los Angeles County\").\n.decl Answer()\nAnswer() :- Is_in_county(\"Disney\", \"Los Angeles County\").\n.output Answer"]}
{"id": 1216, "answer": false, "completion": ".decl Has_symbol(Book:symbol, Symbol:symbol)\nHas_symbol(\"religious book\", \",\").\n.decl Answer()\nAnswer() :- Has_symbol(\"religious book\", \",\").\n.output Answer", "completions": [".decl Has_symbol(Book:symbol, Symbol:symbol)\nHas_symbol(\"religious book\", \",\").\n.decl Answer()\nAnswer() :- Has_symbol(\"religious book\", \",\").\n.output Answer"]}
{"id": 1217, "answer": true, "completion": ".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"spaghetti\", \"gluten\").\n.decl Should_avoid(Person:symbol, Food:symbol)\nShould_avoid(\"Celiac sufferer\", \"gluten\").\n.decl Answer()\nAnswer() :- Should_avoid(\"Celiac sufferer\", ingredient), Contains(\"spaghetti\", ingredient).\n.output Answer", "completions": [".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"spaghetti\", \"gluten\").\n.decl Should_avoid(Person:symbol, Food:symbol)\nShould_avoid(\"Celiac sufferer\", \"gluten\").\n.decl Answer()\nAnswer() :- Should_avoid(\"Celiac sufferer\", ingredient), Contains(\"spaghetti\", ingredient).\n.output Answer"]}
{"id": 1218, "answer": false, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"BLT\", \"bacon\").\n.decl Is_famous_animal_product(Product:symbol)\nIs_famous_animal_product(\"bacon\").\n.decl Answer()\nAnswer() :- Is_famous_animal_product(product), Has_ingredient(\"BLT\", product).\n.output Answer", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"BLT\", \"bacon\").\n.decl Is_famous_animal_product(Product:symbol)\nIs_famous_animal_product(\"bacon\").\n.decl Answer()\nAnswer() :- Is_famous_animal_product(product), Has_ingredient(\"BLT\", product).\n.output Answer"]}
{"id": 1219, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"camel\", 2.5).\nHas_size(\"dog house\", 1.5).\n.decl Answer()\nAnswer() :- Has_size(\"camel\", size1), Has_size(\"dog house\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"camel\", 2.5).\nHas_size(\"dog house\", 1.5).\n.decl Answer()\nAnswer() :- Has_size(\"camel\", size1), Has_size(\"dog house\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1220, "answer": true, "completion": ".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"skeleton\", \"bones\").\n.decl Answer()\nAnswer() :- !Has_feature(\"skeleton\", \"hair\").\n.output Answer", "completions": [".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"skeleton\", \"bones\").\n.decl Answer()\nAnswer() :- !Has_feature(\"skeleton\", \"hair\").\n.output Answer"]}
{"id": 1221, "answer": true, "completion": ".decl Is_on(Animal:symbol, Place:symbol)\nIs_on(\"warthog\", \"Serengeti\").\n.decl Answer()\nAnswer() :- !Is_on(\"warthog\", \"Broadway\").\n.output Answer", "completions": [".decl Is_on(Animal:symbol, Place:symbol)\nIs_on(\"warthog\", \"Serengeti\").\n.decl Answer()\nAnswer() :- !Is_on(\"warthog\", \"Broadway\").\n.output Answer"]}
{"id": 1222, "answer": true, "completion": ".decl Accepts_member(Group:symbol, Person:symbol)\nAccepts_member(\"Ku Klux Klan\", \"White people\").\n.decl Answer()\nAnswer() :- !Accepts_member(\"Ku Klux Klan\", \"Opal Tometi\").\n.output Answer", "completions": [".decl Accepts_member(Group:symbol, Person:symbol)\nAccepts_member(\"Ku Klux Klan\", \"White people\").\n.decl Answer()\nAnswer() :- !Accepts_member(\"Ku Klux Klan\", \"Opal Tometi\").\n.output Answer"]}
{"id": 1223, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"cory catfish\", \"living fish\").\n.decl Answer()\nAnswer() :- Eats(\"cory catfish\", \"living fish\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"cory catfish\", \"living fish\").\n.decl Answer()\nAnswer() :- Eats(\"cory catfish\", \"living fish\").\n.output Answer"]}
{"id": 1224, "answer": false, "completion": ".decl Has_vitamin_D_level(Person:symbol, Vitamin_D_level:float)\nHas_vitamin_D_level(\"John Muir\", 20).\n.decl Answer()\nAnswer() :- Has_vitamin_D_level(\"John Muir\", vitamin_d_level), vitamin_d_level > 10.\n.output Answer", "completions": [".decl Has_vitamin_D_level(Person:symbol, Vitamin_D_level:float)\nHas_vitamin_D_level(\"John Muir\", 20).\n.decl Answer()\nAnswer() :- Has_vitamin_D_level(\"John Muir\", vitamin_d_level), vitamin_d_level > 10.\n.output Answer"]}
{"id": 1225, "answer": true, "completion": ".decl Believes(Group:symbol, Attire:symbol)\nBelieves(\"Orthodox Presbyterian\", \"modest\").\n.decl Describes(Attire:symbol, Time_period:symbol)\nDescribes(\"judge's attire\", \"1700s\").\n.decl Answer()\nAnswer() :- Believes(\"Orthodox Presbyterian\", attire), Describes(attire, \"1700s\"), !Believes(\"Orthodox Presbyterian\", \"modest\").\n.output Answer", "completions": [".decl Believes(Group:symbol, Attire:symbol)\nBelieves(\"Orthodox Presbyterian\", \"modest\").\n.decl Describes(Attire:symbol, Time_period:symbol)\nDescribes(\"judge's attire\", \"1700s\").\n.decl Answer()\nAnswer() :- Believes(\"Orthodox Presbyterian\", attire), Describes(attire, \"1700s\"), !Believes(\"Orthodox Presbyterian\", \"modest\").\n.output Answer"]}
{"id": 1226, "answer": true, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"IKEA\", \"furniture\").\nSells(\"Grocery Store\", \"meatballs\").\n.decl Answer()\nAnswer() :- Sells(store, \"furniture\"), Sells(store, \"meatballs\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"IKEA\", \"furniture\").\nSells(\"Grocery Store\", \"meatballs\").\n.decl Answer()\nAnswer() :- Sells(store, \"furniture\"), Sells(store, \"meatballs\").\n.output Answer"]}
{"id": 1227, "answer": true, "completion": ".decl Produces(Source:symbol, Product:symbol)\nProduces(\"hydropower\", \"electricity\").\n.decl Answer()\nAnswer() :- !Produces(\"hydropower\", \"chaff\").\n.output Answer", "completions": [".decl Produces(Source:symbol, Product:symbol)\nProduces(\"hydropower\", \"electricity\").\n.decl Answer()\nAnswer() :- !Produces(\"hydropower\", \"chaff\").\n.output Answer"]}
{"id": 1228, "answer": true, "completion": ".decl Has_style(Show:symbol, Style:symbol)\nHas_style(\"Family Guy\", \"cartoon\").\nHas_style(\"American Dad\", \"cartoon\").\n.decl Answer()\nAnswer() :- Has_style(\"Family Guy\", style1), Has_style(\"American Dad\", style2), style1 = style2.\n.output Answer", "completions": [".decl Has_style(Show:symbol, Style:symbol)\nHas_style(\"Family Guy\", \"cartoon\").\nHas_style(\"American Dad\", \"cartoon\").\n.decl Answer()\nAnswer() :- Has_style(\"Family Guy\", style1), Has_style(\"American Dad\", style2), style1 = style2.\n.output Answer"]}
{"id": 1229, "answer": false, "completion": ".decl Is_vegan(Food:symbol, Vegan_ingredient:symbol)\nIs_vegan(\"toast\", \"margarine\").\nIs_vegan(\"toast\", \"butter\").\n.decl Answer()\nAnswer() :- Is_vegan(\"toast\", vegan_ingredient), vegan_ingredient = \"margarine\".\n.output Answer", "completions": [".decl Is_vegan(Food:symbol, Vegan_ingredient:symbol)\nIs_vegan(\"toast\", \"margarine\").\nIs_vegan(\"toast\", \"butter\").\n.decl Answer()\nAnswer() :- Is_vegan(\"toast\", vegan_ingredient), vegan_ingredient = \"margarine\".\n.output Answer"]}
{"id": 1230, "answer": false, "completion": ".decl Has_OS(Computer:symbol, OS:symbol)\nHas_OS(\"Apple store\", \"macOS\").\nHas_OS(\"Apple store\", \"Windows\").\nHas_OS(\"Apple store\", \"Ubuntu\").\n.decl Answer()\nAnswer() :- Has_OS(\"Apple store\", os1), Has_OS(\"Apple store\", os2), Has_OS(\"Apple store\", os3), os1 = \"macOS\", os2 = \"Windows\", os3 = \"Ubuntu\".\n.output Answer", "completions": [".decl Has_OS(Computer:symbol, OS:symbol)\nHas_OS(\"Apple store\", \"macOS\").\nHas_OS(\"Apple store\", \"Windows\").\nHas_OS(\"Apple store\", \"Ubuntu\").\n.decl Answer()\nAnswer() :- Has_OS(\"Apple store\", os1), Has_OS(\"Apple store\", os2), Has_OS(\"Apple store\", os3), os1 = \"macOS\", os2 = \"Windows\", os3 = \"Ubuntu\".\n.output Answer"]}
{"id": 1231, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Environment:symbol)\nLives_in(\"Common warthog\", \"savanna\").\n.decl Answer()\nAnswer() :- Lives_in(\"Common warthog\", environment), environment != \"greenhouse\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Environment:symbol)\nLives_in(\"Common warthog\", \"savanna\").\n.decl Answer()\nAnswer() :- Lives_in(\"Common warthog\", environment), environment != \"greenhouse\".\n.output Answer"]}
{"id": 1232, "answer": false, "completion": ".decl Has_temperature(Substance:symbol, Temperature:float)\nHas_temperature(\"bromine\", -7).\n.decl Is_ideal_for(Vessel:symbol, Substance:symbol)\nIs_ideal_for(\"average bulk carrier\", \"bromine\").\n.decl Answer()\nAnswer() :- Has_temperature(\"bromine\", temperature), Is_ideal_for(\"average bulk carrier\", \"bromine\"), temperature > 0.\n.output Answer", "completions": [".decl Has_temperature(Substance:symbol, Temperature:float)\nHas_temperature(\"bromine\", -7).\n.decl Is_ideal_for(Vessel:symbol, Substance:symbol)\nIs_ideal_for(\"average bulk carrier\", \"bromine\").\n.decl Answer()\nAnswer() :- Has_temperature(\"bromine\", temperature), Is_ideal_for(\"average bulk carrier\", \"bromine\"), temperature > 0.\n.output Answer"]}
{"id": 1233, "answer": true, "completion": ".decl Has_xenophobia_level(City:symbol, Xenophobia_level:float)\nHas_xenophobia_level(\"Bern\", 0.2).\n.decl Answer()\nAnswer() :- Has_xenophobia_level(\"Bern\", xenophobia_level), xenophobia_level > 0.5.\n.output Answer", "completions": [".decl Has_xenophobia_level(City:symbol, Xenophobia_level:float)\nHas_xenophobia_level(\"Bern\", 0.2).\n.decl Answer()\nAnswer() :- Has_xenophobia_level(\"Bern\", xenophobia_level), xenophobia_level > 0.5.\n.output Answer"]}
{"id": 1234, "answer": true, "completion": ".decl Has_genre(Movie:symbol, Genre:symbol)\nHas_genre(\"United Airlines Flight\", \"tearjerker\").\n.decl Answer()\nAnswer() :- Has_genre(\"United Airlines Flight\", \"tearjerker\").\n.output Answer", "completions": [".decl Has_genre(Movie:symbol, Genre:symbol)\nHas_genre(\"United Airlines Flight\", \"tearjerker\").\n.decl Answer()\nAnswer() :- Has_genre(\"United Airlines Flight\", \"tearjerker\").\n.output Answer"]}
{"id": 1235, "answer": true, "completion": ".decl Buried_at(Person:symbol, Church:symbol)\nBuried_at(\"Isaac Newton\", \"Westminster Abbey\").\nBuried_at(\"Charles Dickens\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_at(\"Isaac Newton\", church), Buried_at(\"Charles Dickens\", church).\n.output Answer", "completions": [".decl Buried_at(Person:symbol, Church:symbol)\nBuried_at(\"Isaac Newton\", \"Westminster Abbey\").\nBuried_at(\"Charles Dickens\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_at(\"Isaac Newton\", church), Buried_at(\"Charles Dickens\", church).\n.output Answer"]}
{"id": 1236, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"bowling pin\", 0.3).\n.decl Has_precipitation(Location:symbol, Precipitation:float)\nHas_precipitation(\"Snowdon\", 2000).\n.decl Answer()\nAnswer() :- Has_height(\"bowling pin\", height), Has_precipitation(\"Snowdon\", precipitation), precipitation > height.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"bowling pin\", 0.3).\n.decl Has_precipitation(Location:symbol, Precipitation:float)\nHas_precipitation(\"Snowdon\", 2000).\n.decl Answer()\nAnswer() :- Has_height(\"bowling pin\", height), Has_precipitation(\"Snowdon\", precipitation), precipitation > height.\n.output Answer"]}
{"id": 1237, "answer": true, "completion": ".decl Associated_with(Thing:symbol, Event:symbol)\n.decl Answer()\nAnswer() :- !Associated_with(\"Menthol\", \"Thanksgiving\").\n.output Answer", "completions": [".decl Associated_with(Thing:symbol, Event:symbol)\n.decl Answer()\nAnswer() :- !Associated_with(\"Menthol\", \"Thanksgiving\").\n.output Answer"]}
{"id": 1238, "answer": true, "completion": ".decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"jackfruit\", 2).\n.decl Answer()\nAnswer() :- Has_hardness(\"jackfruit\", hardness), hardness < 5.\n.output Answer", "completions": [".decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"jackfruit\", 2).\n.decl Answer()\nAnswer() :- Has_hardness(\"jackfruit\", hardness), hardness < 5.\n.output Answer"]}
{"id": 1239, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"honey badger\", 0.5).\nHas_size(\"oven\", 1.5).\n.decl Answer()\nAnswer() :- Has_size(\"honey badger\", size1), Has_size(\"oven\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"honey badger\", 0.5).\nHas_size(\"oven\", 1.5).\n.decl Answer()\nAnswer() :- Has_size(\"honey badger\", size1), Has_size(\"oven\", size2), size1 < size2.\n.output Answer"]}
{"id": 1240, "answer": true, "completion": ".decl Likes(Person:symbol, Season:symbol)\nLikes(\"Phineas\", \"summer\").\nLikes(\"Ferb\", \"summer\").\n.decl Answer()\nAnswer() :- Likes(\"Phineas\", season), Likes(\"Ferb\", season), season != \"winter\".\n.output Answer", "completions": [".decl Likes(Person:symbol, Season:symbol)\nLikes(\"Phineas\", \"summer\").\nLikes(\"Ferb\", \"summer\").\n.decl Answer()\nAnswer() :- Likes(\"Phineas\", season), Likes(\"Ferb\", season), season != \"winter\".\n.output Answer"]}
{"id": 1241, "answer": true, "completion": ".decl Cares_about(Person:symbol, Thing:symbol)\nCares_about(\"pirates\", \"treasure\").\n.decl Answer()\nAnswer() :- !Cares_about(\"pirates\", \"vitamin C\").\n.output Answer", "completions": [".decl Cares_about(Person:symbol, Thing:symbol)\nCares_about(\"pirates\", \"treasure\").\n.decl Answer()\nAnswer() :- !Cares_about(\"pirates\", \"vitamin C\").\n.output Answer"]}
{"id": 1242, "answer": false, "completion": ".decl Named_by(Country:symbol, Explorer:symbol)\nNamed_by(\"Saint Vincent and the Grenadines\", \"Giovanni de Verrazzano\").\n.decl Nationality(Explorer:symbol, Nationality:symbol)\nNationality(\"Giovanni de Verrazzano\", \"Italian\").\n.decl Answer()\nAnswer() :- Named_by(\"Saint Vincent and the Grenadines\", explorer), Nationality(explorer, \"Italian\").\n.output Answer", "completions": [".decl Named_by(Country:symbol, Explorer:symbol)\nNamed_by(\"Saint Vincent and the Grenadines\", \"Giovanni de Verrazzano\").\n.decl Nationality(Explorer:symbol, Nationality:symbol)\nNationality(\"Giovanni de Verrazzano\", \"Italian\").\n.decl Answer()\nAnswer() :- Named_by(\"Saint Vincent and the Grenadines\", explorer), Nationality(explorer, \"Italian\").\n.output Answer"]}
{"id": 1243, "answer": false, "completion": ".decl Includes(Person:symbol, Slang:symbol)\nIncludes(\"Alfred Hitchcock\", \"internet slang\").\n.decl Answer()\nAnswer() :- Includes(\"Alfred Hitchcock\", \"internet slang\").\n.output Answer", "completions": [".decl Includes(Person:symbol, Slang:symbol)\nIncludes(\"Alfred Hitchcock\", \"internet slang\").\n.decl Answer()\nAnswer() :- Includes(\"Alfred Hitchcock\", \"internet slang\").\n.output Answer"]}
{"id": 1244, "answer": true, "completion": ".decl Believes(Party:symbol, Opinion:symbol)\nBelieves(\"Republicans\", \"reject welfare\").\n.decl Answer()\nAnswer() :- Believes(\"Republicans\", \"reject welfare\").\n.output Answer", "completions": [".decl Believes(Party:symbol, Opinion:symbol)\nBelieves(\"Republicans\", \"reject welfare\").\n.decl Answer()\nAnswer() :- Believes(\"Republicans\", \"reject welfare\").\n.output Answer"]}
{"id": 1245, "answer": true, "completion": ".decl Citizens_of(Person:symbol, Place:symbol)\nCitizens_of(\"John Smith\", \"Cheshire\").\n.decl Sings(Person:symbol, Song:symbol)\nSings(\"John Smith\", \"La Marseillaise\").\n.decl Answer()\nAnswer() :- Citizens_of(person, \"Cheshire\"), Sings(person, \"La Marseillaise\").\n.output Answer", "completions": [".decl Citizens_of(Person:symbol, Place:symbol)\nCitizens_of(\"John Smith\", \"Cheshire\").\n.decl Sings(Person:symbol, Song:symbol)\nSings(\"John Smith\", \"La Marseillaise\").\n.decl Answer()\nAnswer() :- Citizens_of(person, \"Cheshire\"), Sings(person, \"La Marseillaise\").\n.output Answer"]}
{"id": 1246, "answer": false, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"maize\", 365).\nHas_calories(\"chicken breast\", 165).\n.decl Answer()\nAnswer() :- Has_calories(\"maize\", calories1), Has_calories(\"chicken breast\", calories2), calories1 > calories2.\n.output Answer", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"maize\", 365).\nHas_calories(\"chicken breast\", 165).\n.decl Answer()\nAnswer() :- Has_calories(\"maize\", calories1), Has_calories(\"chicken breast\", calories2), calories1 > calories2.\n.output Answer"]}
{"id": 1247, "answer": false, "completion": ".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"compact disc\", 800).\nHas_melting_point(\"magma\", 1200).\n.decl Answer()\nAnswer() :- Has_melting_point(\"compact disc\", melting_point1), Has_melting_point(\"magma\", melting_point2), melting_point1 < melting_point2.\n.output Answer", "completions": [".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"compact disc\", 800).\nHas_melting_point(\"magma\", 1200).\n.decl Answer()\nAnswer() :- Has_melting_point(\"compact disc\", melting_point1), Has_melting_point(\"magma\", melting_point2), melting_point1 < melting_point2.\n.output Answer"]}
{"id": 1248, "answer": true, "completion": ".decl Knows_about(Person:symbol, Animal:symbol)\nKnows_about(\"Alexander Hamilton\", \"elephant\").\nKnows_about(\"Alexander Hamilton\", \"lion\").\n.decl Answer()\nAnswer() :- !Knows_about(\"Alexander Hamilton\", \"koala\").\n.output Answer", "completions": [".decl Knows_about(Person:symbol, Animal:symbol)\nKnows_about(\"Alexander Hamilton\", \"elephant\").\nKnows_about(\"Alexander Hamilton\", \"lion\").\n.decl Answer()\nAnswer() :- !Knows_about(\"Alexander Hamilton\", \"koala\").\n.output Answer"]}
{"id": 1249, "answer": false, "completion": ".decl Has_style(Text:symbol, Style:symbol)\nHas_style(\"Othello\", \"complex\").\n.decl Has_option(Text:symbol, Option:symbol)\nHas_option(\"Othello\", \"simplified version\").\n.decl Answer()\nAnswer() :- Has_style(\"Othello\", \"complex\"), Has_option(\"Othello\", option).\n.output Answer", "completions": [".decl Has_style(Text:symbol, Style:symbol)\nHas_style(\"Othello\", \"complex\").\n.decl Has_option(Text:symbol, Option:symbol)\nHas_option(\"Othello\", \"simplified version\").\n.decl Answer()\nAnswer() :- Has_style(\"Othello\", \"complex\"), Has_option(\"Othello\", option).\n.output Answer"]}
{"id": 1250, "answer": true, "completion": ".decl Has_n_planets(Year:float, N_planets:float)\nHas_n_planets(1928, 8).\n.decl Answer()\nAnswer() :- Has_n_planets(1928, n_planets), n_planets >= 9.\n.output Answer", "completions": [".decl Has_n_planets(Year:float, N_planets:float)\nHas_n_planets(1928, 8).\n.decl Answer()\nAnswer() :- Has_n_planets(1928, n_planets), n_planets >= 9.\n.output Answer"]}
{"id": 1251, "answer": false, "completion": ".decl Is_from(Person:symbol, Town:symbol)\nIs_from(\"Dracula\", \"Bucharest\").\n.decl Is_historical(Person:symbol)\nIs_historical(\"Dracula\").\n.decl Answer()\nAnswer() :- Is_historical(\"Dracula\"), Is_from(\"Dracula\", \"Bucharest\").\n.output Answer", "completions": [".decl Is_from(Person:symbol, Town:symbol)\nIs_from(\"Dracula\", \"Bucharest\").\n.decl Is_historical(Person:symbol)\nIs_historical(\"Dracula\").\n.decl Answer()\nAnswer() :- Is_historical(\"Dracula\"), Is_from(\"Dracula\", \"Bucharest\").\n.output Answer"]}
{"id": 1252, "answer": false, "completion": ".decl Includes(Book:symbol, Element:symbol)\nIncludes(\"War of the Worlds\", \"cosmic rays\").\n.decl Answer()\nAnswer() :- Includes(\"War of the Worlds\", \"cosmic rays\").\n.output Answer", "completions": [".decl Includes(Book:symbol, Element:symbol)\nIncludes(\"War of the Worlds\", \"cosmic rays\").\n.decl Answer()\nAnswer() :- Includes(\"War of the Worlds\", \"cosmic rays\").\n.output Answer"]}
{"id": 1253, "answer": false, "completion": ".decl Has_camouflage(Animal:symbol, Environment:symbol)\nHas_camouflage(\"mongoose\", \"desert\").\n.decl Answer()\nAnswer() :- Has_camouflage(\"mongoose\", \"desert\").\n.output Answer", "completions": [".decl Has_camouflage(Animal:symbol, Environment:symbol)\nHas_camouflage(\"mongoose\", \"desert\").\n.decl Answer()\nAnswer() :- Has_camouflage(\"mongoose\", \"desert\").\n.output Answer"]}
{"id": 1254, "answer": true, "completion": ".decl Treats(Drug:symbol, Illness:symbol)\nTreats(\"Seroquel\", \"depression\").\n.decl Recommended_first(Drug:symbol)\nRecommended_first(\"Seroquel\").\n.decl Answer()\nAnswer() :- Treats(drug, \"depression\"), Recommended_first(drug).\n.output Answer", "completions": [".decl Treats(Drug:symbol, Illness:symbol)\nTreats(\"Seroquel\", \"depression\").\n.decl Recommended_first(Drug:symbol)\nRecommended_first(\"Seroquel\").\n.decl Answer()\nAnswer() :- Treats(drug, \"depression\"), Recommended_first(drug).\n.output Answer"]}
{"id": 1255, "answer": true, "completion": ".decl Contains(Kitchen:symbol, Ingredient:symbol)\nContains(\"Taco Bell kitchen\", \"cinnamon\").\n.decl Answer()\nAnswer() :- Contains(\"Taco Bell kitchen\", \"cinnamon\").\n.output Answer", "completions": [".decl Contains(Kitchen:symbol, Ingredient:symbol)\nContains(\"Taco Bell kitchen\", \"cinnamon\").\n.decl Answer()\nAnswer() :- Contains(\"Taco Bell kitchen\", \"cinnamon\").\n.output Answer"]}
{"id": 1256, "answer": true, "completion": ".decl Has_membership(Person:symbol, Group:symbol)\nHas_membership(\"John Smith\", \"United States Air Force\").\n.decl Has_discount(Group:symbol, Store:symbol)\nHas_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.decl Answer()\nAnswer() :- Has_membership(person, \"United States Air Force\"), Has_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.output Answer", "completions": [".decl Has_membership(Person:symbol, Group:symbol)\nHas_membership(\"John Smith\", \"United States Air Force\").\n.decl Has_discount(Group:symbol, Store:symbol)\nHas_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.decl Answer()\nAnswer() :- Has_membership(person, \"United States Air Force\"), Has_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.output Answer"]}
{"id": 1257, "answer": true, "completion": ".decl Causes_injury(Action:symbol, Injury:symbol)\nCauses_injury(\"Thiago Moises May 13 2020 submission\", \"Achilles injury\").\n.decl Answer()\nAnswer() :- Causes_injury(\"Thiago Moises May 13 2020 submission\", \"Achilles injury\").\n.output Answer", "completions": [".decl Causes_injury(Action:symbol, Injury:symbol)\nCauses_injury(\"Thiago Moises May 13 2020 submission\", \"Achilles injury\").\n.decl Answer()\nAnswer() :- Causes_injury(\"Thiago Moises May 13 2020 submission\", \"Achilles injury\").\n.output Answer"]}
{"id": 1258, "answer": false, "completion": ".decl Has_symbol(Calendar:symbol, Symbol:symbol)\nHas_symbol(\"Chinese calendar\", \"quadrupeds\").\n.decl Answer()\nAnswer() :- Has_symbol(\"Chinese calendar\", \"quadrupeds\").\n.output Answer", "completions": [".decl Has_symbol(Calendar:symbol, Symbol:symbol)\nHas_symbol(\"Chinese calendar\", \"quadrupeds\").\n.decl Answer()\nAnswer() :- Has_symbol(\"Chinese calendar\", \"quadrupeds\").\n.output Answer"]}
{"id": 1259, "answer": true, "completion": ".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Nancy Pelosi\", \"pro-choice\").\n.decl Answer()\nAnswer() :- Has_position(\"Nancy Pelosi\", position), position != \"anti-abortion\".\n.output Answer", "completions": [".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Nancy Pelosi\", \"pro-choice\").\n.decl Answer()\nAnswer() :- Has_position(\"Nancy Pelosi\", position), position != \"anti-abortion\".\n.output Answer"]}
{"id": 1260, "answer": false, "completion": ".decl Has_calorific_value(Object:symbol, Calorific_value:float)\nHas_calorific_value(\"The Daily Mirror\", 0).\n.decl Answer()\nAnswer() :- Has_calorific_value(\"The Daily Mirror\", calorific_value), calorific_value = 0.\n.output Answer", "completions": [".decl Has_calorific_value(Object:symbol, Calorific_value:float)\nHas_calorific_value(\"The Daily Mirror\", 0).\n.decl Answer()\nAnswer() :- Has_calorific_value(\"The Daily Mirror\", calorific_value), calorific_value = 0.\n.output Answer"]}
{"id": 1261, "answer": false, "completion": ".decl Performs(Artist:symbol, Genre:symbol)\nPerforms(\"Ludacris\", \"hip-hop\").\n.decl Answer()\nAnswer() :- !Performs(\"Ludacris\", \"classical music\").\n.output Answer", "completions": [".decl Performs(Artist:symbol, Genre:symbol)\nPerforms(\"Ludacris\", \"hip-hop\").\n.decl Answer()\nAnswer() :- !Performs(\"Ludacris\", \"classical music\").\n.output Answer"]}
{"id": 1262, "answer": true, "completion": ".decl Is_familiar_with(Person:symbol, Food:symbol)\nIs_familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.decl Answer()\nAnswer() :- !Is_familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.output Answer", "completions": [".decl Is_familiar_with(Person:symbol, Food:symbol)\nIs_familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.decl Answer()\nAnswer() :- !Is_familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.output Answer"]}
{"id": 1263, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"2 Euro coin\", 7.8).\n.decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Red Sea\", 2000).\n.decl Answer()\nAnswer() :- Has_weight(\"2 Euro coin\", weight), Has_depth(\"Red Sea\", depth), weight < depth.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"2 Euro coin\", 7.8).\n.decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Red Sea\", 2000).\n.decl Answer()\nAnswer() :- Has_weight(\"2 Euro coin\", weight), Has_depth(\"Red Sea\", depth), weight < depth.\n.output Answer"]}
{"id": 1264, "answer": false, "completion": ".decl Has_color(Light:symbol, Color:symbol)\nHas_color(\"white light\", \"no color\").\n.decl Answer()\nAnswer() :- Has_color(\"white light\", \"no color\").\n.output Answer", "completions": [".decl Has_color(Light:symbol, Color:symbol)\nHas_color(\"white light\", \"no color\").\n.decl Answer()\nAnswer() :- Has_color(\"white light\", \"no color\").\n.output Answer"]}
{"id": 1265, "answer": true, "completion": ".decl Commits_crime(Person:symbol, Crime:symbol)\nCommits_crime(\"Marvin Gay Sr.\", \"murder\").\n.decl Answer()\nAnswer() :- Commits_crime(\"Marvin Gay Sr.\", crime), Commits_crime(\"Isaac's father\", crime).\n.output Answer", "completions": [".decl Commits_crime(Person:symbol, Crime:symbol)\nCommits_crime(\"Marvin Gay Sr.\", \"murder\").\n.decl Answer()\nAnswer() :- Commits_crime(\"Marvin Gay Sr.\", crime), Commits_crime(\"Isaac's father\", crime).\n.output Answer"]}
{"id": 1266, "answer": false, "completion": ".decl Likes(Animal:symbol, Food:symbol)\nLikes(\"owl monkey\", \"fruit\").\nLikes(\"owl monkey\", \"insects\").\n.decl Is_type_of(Food:symbol, Type:symbol)\nIs_type_of(\"strawberry\", \"fruit\").\n.decl Answer()\nAnswer() :- Likes(\"owl monkey\", type), Is_type_of(\"strawberry\", type).\n.output Answer", "completions": [".decl Likes(Animal:symbol, Food:symbol)\nLikes(\"owl monkey\", \"fruit\").\nLikes(\"owl monkey\", \"insects\").\n.decl Is_type_of(Food:symbol, Type:symbol)\nIs_type_of(\"strawberry\", \"fruit\").\n.decl Answer()\nAnswer() :- Likes(\"owl monkey\", type), Is_type_of(\"strawberry\", type).\n.output Answer"]}
{"id": 1267, "answer": false, "completion": ".decl Used_for(Technology:symbol, Disease:symbol)\nUsed_for(\"whole genome sequencing\", \"COVID-19\").\n.decl Answer()\nAnswer() :- Used_for(\"whole genome sequencing\", \"COVID-19\").\n.output Answer", "completions": [".decl Used_for(Technology:symbol, Disease:symbol)\nUsed_for(\"whole genome sequencing\", \"COVID-19\").\n.decl Answer()\nAnswer() :- Used_for(\"whole genome sequencing\", \"COVID-19\").\n.output Answer"]}
{"id": 1268, "answer": false, "completion": ".decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"Robin Williams\", \"deceased\").\n.decl Voiced(Person:symbol, Character:symbol)\nVoiced(\"Robin Williams\", \"Genie\").\n.decl Answer()\nAnswer() :- Voiced(person, \"Genie\"), Has_status(person, \"deceased\").\n.output Answer", "completions": [".decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"Robin Williams\", \"deceased\").\n.decl Voiced(Person:symbol, Character:symbol)\nVoiced(\"Robin Williams\", \"Genie\").\n.decl Answer()\nAnswer() :- Voiced(person, \"Genie\"), Has_status(person, \"deceased\").\n.output Answer"]}
{"id": 1269, "answer": true, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"dosa\", 200).\n.decl Needs_calories(Person:symbol, Calories:float)\nNeeds_calories(\"lumberjacks\", 2000).\n.decl Answer()\nAnswer() :- Needs_calories(\"lumberjacks\", calories1), Has_calories(\"dosa\", calories2), calories1 <= 3 * calories2.\n.output Answer", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"dosa\", 200).\n.decl Needs_calories(Person:symbol, Calories:float)\nNeeds_calories(\"lumberjacks\", 2000).\n.decl Answer()\nAnswer() :- Needs_calories(\"lumberjacks\", calories1), Has_calories(\"dosa\", calories2), calories1 <= 3 * calories2.\n.output Answer"]}
{"id": 1270, "answer": true, "completion": ".decl Has_parent(Cygnet:symbol, Parent:symbol)\nHas_parent(\"black swan cygnet\", \"black swan mother\").\nHas_parent(\"black swan cygnet\", \"black swan father\").\n.decl Answer()\nAnswer() :- Has_parent(\"black swan cygnet\", parent1), Has_parent(\"black swan cygnet\", parent2), parent1 != parent2.\n.output Answer", "completions": [".decl Has_parent(Cygnet:symbol, Parent:symbol)\nHas_parent(\"black swan cygnet\", \"black swan mother\").\nHas_parent(\"black swan cygnet\", \"black swan father\").\n.decl Answer()\nAnswer() :- Has_parent(\"black swan cygnet\", parent1), Has_parent(\"black swan cygnet\", parent2), parent1 != parent2.\n.output Answer"]}
{"id": 1271, "answer": false, "completion": ".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Moon Jae-in\", \"Geoje\").\n.decl Answer()\nAnswer() :- Born_in(\"Moon Jae-in\", place), place != \"Khanbaliq\".\n.output Answer", "completions": [".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Moon Jae-in\", \"Geoje\").\n.decl Answer()\nAnswer() :- Born_in(\"Moon Jae-in\", place), place != \"Khanbaliq\".\n.output Answer"]}
{"id": 1272, "answer": true, "completion": ".decl Causes(Person_A:symbol, Person_B:symbol, Event:symbol)\nCauses(\"Daniel LeFever\", \"Kurt Cobain\", \"suicide\").\n.decl Answer()\nAnswer() :- Causes(\"Daniel LeFever\", \"Kurt Cobain\", event), event != \"death\".\n.output Answer", "completions": [".decl Causes(Person_A:symbol, Person_B:symbol, Event:symbol)\nCauses(\"Daniel LeFever\", \"Kurt Cobain\", \"suicide\").\n.decl Answer()\nAnswer() :- Causes(\"Daniel LeFever\", \"Kurt Cobain\", event), event != \"death\".\n.output Answer"]}
{"id": 1273, "answer": false, "completion": ".decl Has_government_type(City:symbol, Government_type:symbol)\nHas_government_type(\"Florence\", \"republic\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Italian Renaissance\", \"14th century\").\n.decl Answer()\nAnswer() :- Has_government_type(\"Florence\", government_type), Happens_in_time(\"Italian Renaissance\", time), government_type != \"theocracy\".\n.output Answer", "completions": [".decl Has_government_type(City:symbol, Government_type:symbol)\nHas_government_type(\"Florence\", \"republic\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Italian Renaissance\", \"14th century\").\n.decl Answer()\nAnswer() :- Has_government_type(\"Florence\", government_type), Happens_in_time(\"Italian Renaissance\", time), government_type != \"theocracy\".\n.output Answer"]}
{"id": 1274, "answer": true, "completion": ".decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"7 Wonders\", 7).\n.decl Has_n_dwarfs(Person:symbol, N_dwarfs:float)\nHas_n_dwarfs(\"Snow White\", 7).\n.decl Answer()\nAnswer() :- Has_n_players(\"7 Wonders\", n_players), Has_n_dwarfs(\"Snow White\", n_dwarfs), n_players <= n_dwarfs.\n.output Answer", "completions": [".decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"7 Wonders\", 7).\n.decl Has_n_dwarfs(Person:symbol, N_dwarfs:float)\nHas_n_dwarfs(\"Snow White\", 7).\n.decl Answer()\nAnswer() :- Has_n_players(\"7 Wonders\", n_players), Has_n_dwarfs(\"Snow White\", n_dwarfs), n_players <= n_dwarfs.\n.output Answer"]}
{"id": 1275, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"United States Army Ranger\", \"Mozambique Drill\").\n.decl Difficulty(Skill:symbol, Difficulty:symbol)\nDifficulty(\"Mozambique Drill\", \"easy\").\n.decl Answer()\nAnswer() :- Has_skill(\"United States Army Ranger\", skill), Difficulty(skill, \"easy\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"United States Army Ranger\", \"Mozambique Drill\").\n.decl Difficulty(Skill:symbol, Difficulty:symbol)\nDifficulty(\"Mozambique Drill\", \"easy\").\n.decl Answer()\nAnswer() :- Has_skill(\"United States Army Ranger\", skill), Difficulty(skill, \"easy\").\n.output Answer"]}
{"id": 1276, "answer": false, "completion": ".decl Has_requirement(Job:symbol, Requirement:symbol)\nHas_requirement(\"construction worker\", \"safety training\").\nHas_requirement(\"construction worker\", \"building code knowledge\").\n.decl Answer()\nAnswer() :- Has_requirement(\"construction worker\", \"building portfolio\")\n.output Answer", "completions": [".decl Has_requirement(Job:symbol, Requirement:symbol)\nHas_requirement(\"construction worker\", \"safety training\").\nHas_requirement(\"construction worker\", \"building code knowledge\").\n.decl Answer()\nAnswer() :- Has_requirement(\"construction worker\", \"building portfolio\")\n.output Answer"]}
{"id": 1277, "answer": true, "completion": ".decl Has_location(Trip:symbol, Location:symbol)\nHas_location(\"nature escape\", \"San Francisco\").\n.decl Answer()\nAnswer() :- Has_location(\"nature escape\", \"San Francisco\").\n.output Answer", "completions": [".decl Has_location(Trip:symbol, Location:symbol)\nHas_location(\"nature escape\", \"San Francisco\").\n.decl Answer()\nAnswer() :- Has_location(\"nature escape\", \"San Francisco\").\n.output Answer"]}
{"id": 1278, "answer": true, "completion": ".decl Has_founders(City:symbol, Founders:symbol)\nHas_founders(\"Santa Ana\", \"Mexican settlers\").\n.decl Is_biggest_city(City:symbol, County:symbol, State:symbol)\nIs_biggest_city(\"Santa Ana\", \"Orange\", \"California\").\n.decl Speaks(People:symbol, Language:symbol)\nSpeaks(\"Mexican settlers\", \"Spanish\").\n.decl Answer()\nAnswer() :- Has_founders(city, founders), Is_biggest_city(city, \"Orange\", \"California\"), Speaks(founders, \"Italian\").\n.output Answer", "completions": [".decl Has_founders(City:symbol, Founders:symbol)\nHas_founders(\"Santa Ana\", \"Mexican settlers\").\n.decl Is_biggest_city(City:symbol, County:symbol, State:symbol)\nIs_biggest_city(\"Santa Ana\", \"Orange\", \"California\").\n.decl Speaks(People:symbol, Language:symbol)\nSpeaks(\"Mexican settlers\", \"Spanish\").\n.decl Answer()\nAnswer() :- Has_founders(city, founders), Is_biggest_city(city, \"Orange\", \"California\"), Speaks(founders, \"Italian\").\n.output Answer"]}
{"id": 1279, "answer": true, "completion": ".decl Involved_in(People:symbol, War:symbol)\nInvolved_in(\"French people\", \"Franco-Prussian War\").\n.decl Answer()\nAnswer() :- !Involved_in(\"French people\", \"American Civil War\").\n.output Answer", "completions": [".decl Involved_in(People:symbol, War:symbol)\nInvolved_in(\"French people\", \"Franco-Prussian War\").\n.decl Answer()\nAnswer() :- !Involved_in(\"French people\", \"American Civil War\").\n.output Answer"]}
{"id": 1280, "answer": true, "completion": ".decl Participates(Group:symbol, Event:symbol)\nParticipates(\"Royal Air Force\", \"World War I\").\nParticipates(\"Royal Air Force\", \"World War II\").\n.decl Answer()\nAnswer() :- !Participates(\"Royal Air Force\", \"Boxer Rebellion\").\n.output Answer", "completions": [".decl Participates(Group:symbol, Event:symbol)\nParticipates(\"Royal Air Force\", \"World War I\").\nParticipates(\"Royal Air Force\", \"World War II\").\n.decl Answer()\nAnswer() :- !Participates(\"Royal Air Force\", \"Boxer Rebellion\").\n.output Answer"]}
{"id": 1281, "answer": true, "completion": ".decl Is_part_of(Person:symbol, Holiday:symbol)\nIs_part_of(\"Elijah\", \"Passover\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Elijah\", holiday).\n.output Answer", "completions": [".decl Is_part_of(Person:symbol, Holiday:symbol)\nIs_part_of(\"Elijah\", \"Passover\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Elijah\", holiday).\n.output Answer"]}
{"id": 1282, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Peak of the Andes\", 6962).\nHas_height(\"Colossus of Rhodes\", 30).\n.decl Answer()\nAnswer() :- Has_height(\"Peak of the Andes\", height1), Has_height(\"Colossus of Rhodes\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Peak of the Andes\", 6962).\nHas_height(\"Colossus of Rhodes\", 30).\n.decl Answer()\nAnswer() :- Has_height(\"Peak of the Andes\", height1), Has_height(\"Colossus of Rhodes\", height2), height1 > height2.\n.output Answer"]}
{"id": 1283, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"George Soros\", 8.3).\n.decl Has_price(Object:symbol, Price:float)\nHas_price(\"Louvre\", 10).\n.decl Answer()\nAnswer() :- Has_net_worth(\"George Soros\", net_worth), Has_price(\"Louvre\", price), net_worth >= price.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"George Soros\", 8.3).\n.decl Has_price(Object:symbol, Price:float)\nHas_price(\"Louvre\", 10).\n.decl Answer()\nAnswer() :- Has_net_worth(\"George Soros\", net_worth), Has_price(\"Louvre\", price), net_worth >= price.\n.output Answer"]}
{"id": 1284, "answer": false, "completion": ".decl Supports(Party:symbol, Policy:symbol)\nSupports(\"Communist Party of the Soviet Union\", \"Socialism\").\n.decl Answer()\nAnswer() :- Supports(\"Communist Party of the Soviet Union\", policy), policy != \"Trickle Down Economics\".\n.output Answer", "completions": [".decl Supports(Party:symbol, Policy:symbol)\nSupports(\"Communist Party of the Soviet Union\", \"Socialism\").\n.decl Answer()\nAnswer() :- Supports(\"Communist Party of the Soviet Union\", policy), policy != \"Trickle Down Economics\".\n.output Answer"]}
{"id": 1285, "answer": false, "completion": ".decl Appears_in(Animal:symbol, Movie:symbol)\nAppears_in(\"hound\", \"You're a Good Sport, Charlie Brown\").\n.decl Answer()\nAnswer() :- Appears_in(\"hound\", \"You're a Good Sport, Charlie Brown\").\n.output Answer", "completions": [".decl Appears_in(Animal:symbol, Movie:symbol)\nAppears_in(\"hound\", \"You're a Good Sport, Charlie Brown\").\n.decl Answer()\nAnswer() :- Appears_in(\"hound\", \"You're a Good Sport, Charlie Brown\").\n.output Answer"]}
{"id": 1286, "answer": true, "completion": ".decl Has_ruler(Region:symbol, Ruler:symbol)\nHas_ruler(\"Balearic Islands\", \"Elizabeth II\").\n.decl Answer()\nAnswer() :- Has_ruler(\"Balearic Islands\", \"Elizabeth II\").\n.output Answer", "completions": [".decl Has_ruler(Region:symbol, Ruler:symbol)\nHas_ruler(\"Balearic Islands\", \"Elizabeth II\").\n.decl Answer()\nAnswer() :- Has_ruler(\"Balearic Islands\", \"Elizabeth II\").\n.output Answer"]}
{"id": 1287, "answer": true, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Eddie Murphy\", 10).\n.decl Fills_court(N_people:float)\nFills_court(10).\n.decl Answer()\nAnswer() :- Has_children(\"Eddie Murphy\", n_children), Fills_court(n_people), n_children >= n_people.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Eddie Murphy\", 10).\n.decl Fills_court(N_people:float)\nFills_court(10).\n.decl Answer()\nAnswer() :- Has_children(\"Eddie Murphy\", n_children), Fills_court(n_people), n_children >= n_people.\n.output Answer"]}
{"id": 1288, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Thirty Years' War\", 30).\n.decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"white cockatoo\", 40).\n.decl Answer()\nAnswer() :- Lives_n_years(\"white cockatoo\", n_years1), Last_n_years(\"Thirty Years' War\", n_years2), n_years1 >= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Thirty Years' War\", 30).\n.decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"white cockatoo\", 40).\n.decl Answer()\nAnswer() :- Lives_n_years(\"white cockatoo\", n_years1), Last_n_years(\"Thirty Years' War\", n_years2), n_years1 >= n_years2.\n.output Answer"]}
{"id": 1289, "answer": true, "completion": ".decl Has_needs(Person:symbol, Needs:symbol)\nHas_needs(\"Unsinkable Sam\", \"moisture\").\n.decl Has_properties(Object:symbol, Properties:symbol)\nHas_properties(\"aloe vera\", \"moisture\").\n.decl Answer()\nAnswer() :- Has_needs(\"Unsinkable Sam\", need), Has_properties(\"aloe vera\", property), need = property.\n.output Answer", "completions": [".decl Has_needs(Person:symbol, Needs:symbol)\nHas_needs(\"Unsinkable Sam\", \"moisture\").\n.decl Has_properties(Object:symbol, Properties:symbol)\nHas_properties(\"aloe vera\", \"moisture\").\n.decl Answer()\nAnswer() :- Has_needs(\"Unsinkable Sam\", need), Has_properties(\"aloe vera\", property), need = property.\n.output Answer"]}
{"id": 1290, "answer": false, "completion": ".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Linus Torvalds' wife\", \"unable to physically defend herself\").\n.decl Answer()\nAnswer() :- Has_ability(\"Linus Torvalds' wife\", ability).\n.output Answer", "completions": [".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Linus Torvalds' wife\", \"unable to physically defend herself\").\n.decl Answer()\nAnswer() :- Has_ability(\"Linus Torvalds' wife\", ability).\n.output Answer"]}
{"id": 1291, "answer": true, "completion": ".decl Has_license(Person:symbol, State:symbol)\nHas_license(\"Rand Paul\", \"Kentucky\").\n.decl Answer()\nAnswer() :- Has_license(\"Rand Paul\", \"Kentucky\"), !Has_license(\"Rand Paul\", \"New York\").\n.output Answer", "completions": [".decl Has_license(Person:symbol, State:symbol)\nHas_license(\"Rand Paul\", \"Kentucky\").\n.decl Answer()\nAnswer() :- Has_license(\"Rand Paul\", \"Kentucky\"), !Has_license(\"Rand Paul\", \"New York\").\n.output Answer"]}
{"id": 1292, "answer": true, "completion": ".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Cheb Mami\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- !Has_award(\"Cheb Mami\", \"Pulitzer Prize for musical composition\").\n.output Answer", "completions": [".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Cheb Mami\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- !Has_award(\"Cheb Mami\", \"Pulitzer Prize for musical composition\").\n.output Answer"]}
{"id": 1293, "answer": false, "completion": ".decl Fights(Person_A:symbol, Person_B:symbol, Movie:symbol)\nFights(\"Spiderman\", \"Falcon\", \"Captain America: Civil War\").\n.decl Answer()\nAnswer() :- Fights(\"Spiderman\", \"Falcon\", _).\n.output Answer", "completions": [".decl Fights(Person_A:symbol, Person_B:symbol, Movie:symbol)\nFights(\"Spiderman\", \"Falcon\", \"Captain America: Civil War\").\n.decl Answer()\nAnswer() :- Fights(\"Spiderman\", \"Falcon\", _).\n.output Answer"]}
{"id": 1294, "answer": true, "completion": ".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Steve Carell\", \"Michael Scott\").\n.decl Has_trait(Character:symbol, Trait:symbol)\nHas_trait(\"Michael Scott\", \"tremendous leadership skills\").\n.decl Answer()\nAnswer() :- Has_character(\"Steve Carell\", character), Has_trait(character, \"tremendous leadership skills\").\n.output Answer", "completions": [".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Steve Carell\", \"Michael Scott\").\n.decl Has_trait(Character:symbol, Trait:symbol)\nHas_trait(\"Michael Scott\", \"tremendous leadership skills\").\n.decl Answer()\nAnswer() :- Has_character(\"Steve Carell\", character), Has_trait(character, \"tremendous leadership skills\").\n.output Answer"]}
{"id": 1295, "answer": true, "completion": ".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"milliner\", \"hat maker\").\n.decl Needs_medicine(Role:symbol, Medicine:symbol)\nNeeds_medicine(\"hat maker\", \"succimer\").\n.decl Answer()\nAnswer() :- Has_role(\"milliner\", role), Needs_medicine(role, \"succimer\").\n.output Answer", "completions": [".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"milliner\", \"hat maker\").\n.decl Needs_medicine(Role:symbol, Medicine:symbol)\nNeeds_medicine(\"hat maker\", \"succimer\").\n.decl Answer()\nAnswer() :- Has_role(\"milliner\", role), Needs_medicine(role, \"succimer\").\n.output Answer"]}
{"id": 1296, "answer": true, "completion": ".decl Causes_death(Event:symbol, Substance:symbol)\nCauses_death(\"Amy Winehouse's death\", \"alcohol poisoning\").\n.decl Prevents_death(Substance:symbol, Event:symbol)\nPrevents_death(\"Narcan\", \"alcohol poisoning\").\n.decl Answer()\nAnswer() :- Causes_death(event, substance), Prevents_death(\"Narcan\", substance).\n.output Answer", "completions": [".decl Causes_death(Event:symbol, Substance:symbol)\nCauses_death(\"Amy Winehouse's death\", \"alcohol poisoning\").\n.decl Prevents_death(Substance:symbol, Event:symbol)\nPrevents_death(\"Narcan\", \"alcohol poisoning\").\n.decl Answer()\nAnswer() :- Causes_death(event, substance), Prevents_death(\"Narcan\", substance).\n.output Answer"]}
{"id": 1297, "answer": false, "completion": ".decl Has_feature(Phone:symbol, Feature:symbol)\nHas_feature(\"Alexander Graham Bell's phone\", \"call waiting\").\n.decl Answer()\nAnswer() :- Has_feature(\"Alexander Graham Bell's phone\", \"call waiting\").\n.output Answer", "completions": [".decl Has_feature(Phone:symbol, Feature:symbol)\nHas_feature(\"Alexander Graham Bell's phone\", \"call waiting\").\n.decl Answer()\nAnswer() :- Has_feature(\"Alexander Graham Bell's phone\", \"call waiting\").\n.output Answer"]}
{"id": 1298, "answer": true, "completion": ".decl Owns(Person:symbol, Comic:symbol)\nOwns(\"Bart Simpson\", \"The Simpsons\").\n.decl Features(Comic:symbol, Character:symbol)\nFeatures(\"The Simpsons\", \"Bart Simpson\").\nFeatures(\"Batman\", \"The Joker\").\n.decl Answer()\nAnswer() :- Owns(\"Bart Simpson\", comic), Features(comic, \"The Joker\").\n.output Answer", "completions": [".decl Owns(Person:symbol, Comic:symbol)\nOwns(\"Bart Simpson\", \"The Simpsons\").\n.decl Features(Comic:symbol, Character:symbol)\nFeatures(\"The Simpsons\", \"Bart Simpson\").\nFeatures(\"Batman\", \"The Joker\").\n.decl Answer()\nAnswer() :- Owns(\"Bart Simpson\", comic), Features(comic, \"The Joker\").\n.output Answer"]}
{"id": 1299, "answer": true, "completion": ".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"grocery store meat\", \"bland\").\nHas_taste(\"game\", \"gamey\").\n.decl Answer()\nAnswer() :- Has_taste(\"grocery store meat\", taste1), Has_taste(\"game\", taste2), taste1 != taste2.\n.output Answer", "completions": [".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"grocery store meat\", \"bland\").\nHas_taste(\"game\", \"gamey\").\n.decl Answer()\nAnswer() :- Has_taste(\"grocery store meat\", taste1), Has_taste(\"game\", taste2), taste1 != taste2.\n.output Answer"]}
{"id": 1300, "answer": true, "completion": ".decl Appears_in(Character:symbol, Show:symbol)\nAppears_in(\"Elmo\", \"Sesame Street\").\n.decl Is_original(Character:symbol, Show:symbol)\nIs_original(\"Elmo\", \"Sesame Street\").\n.decl Answer()\nAnswer() :- Appears_in(\"Elmo\", show), Is_original(\"Elmo\", show).\n.output Answer", "completions": [".decl Appears_in(Character:symbol, Show:symbol)\nAppears_in(\"Elmo\", \"Sesame Street\").\n.decl Is_original(Character:symbol, Show:symbol)\nIs_original(\"Elmo\", \"Sesame Street\").\n.decl Answer()\nAnswer() :- Appears_in(\"Elmo\", show), Is_original(\"Elmo\", show).\n.output Answer"]}
{"id": 1301, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"pescatarian\", \"fish\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"anchovy pizza\", \"anchovy\").\n.decl Answer()\nAnswer() :- Eats(\"pescatarian\", food), Contains(\"anchovy pizza\", ingredient), food != ingredient.\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"pescatarian\", \"fish\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"anchovy pizza\", \"anchovy\").\n.decl Answer()\nAnswer() :- Eats(\"pescatarian\", food), Contains(\"anchovy pizza\", ingredient), food != ingredient.\n.output Answer"]}
{"id": 1302, "answer": false, "completion": ".decl Appears_in(Character:symbol, Show:symbol)\nAppears_in(\"Helga\", \"Hey Arnold\").\n.decl Hangs_out_at(Character:symbol, Place:symbol)\nHangs_out_at(\"Helga\", \"porch\").\n.decl Answer()\nAnswer() :- Appears_in(character, \"Hey Arnold\"), Hangs_out_at(character, \"porch\").\n.output Answer", "completions": [".decl Appears_in(Character:symbol, Show:symbol)\nAppears_in(\"Helga\", \"Hey Arnold\").\n.decl Hangs_out_at(Character:symbol, Place:symbol)\nHangs_out_at(\"Helga\", \"porch\").\n.decl Answer()\nAnswer() :- Appears_in(character, \"Hey Arnold\"), Hangs_out_at(character, \"porch\").\n.output Answer"]}
{"id": 1303, "answer": false, "completion": ".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"shrimp scampi\", \"shrimp\").\nContains(\"shrimp scampi\", \"olive oil\").\nContains(\"shrimp scampi\", \"garlic\").\n.decl Answer()\nAnswer() :- !Contains(\"shrimp scampi\", \"plastic\").\n.output Answer", "completions": [".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"shrimp scampi\", \"shrimp\").\nContains(\"shrimp scampi\", \"olive oil\").\nContains(\"shrimp scampi\", \"garlic\").\n.decl Answer()\nAnswer() :- !Contains(\"shrimp scampi\", \"plastic\").\n.output Answer"]}
{"id": 1304, "answer": true, "completion": ".decl Kills(Animal_A:symbol, Animal_B:symbol)\nKills(\"human\", \"rhinoceros\").\n.decl Improves(Action:symbol, Benefit:symbol)\nImproves(\"killing rhinoceros\", \"sex life\").\n.decl Answer()\nAnswer() :- Kills(\"human\", \"rhinoceros\"), Improves(\"killing rhinoceros\", \"sex life\").\n.output Answer", "completions": [".decl Kills(Animal_A:symbol, Animal_B:symbol)\nKills(\"human\", \"rhinoceros\").\n.decl Improves(Action:symbol, Benefit:symbol)\nImproves(\"killing rhinoceros\", \"sex life\").\n.decl Answer()\nAnswer() :- Kills(\"human\", \"rhinoceros\"), Improves(\"killing rhinoceros\", \"sex life\").\n.output Answer"]}
{"id": 1305, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"newborn kitten\", 0.2).\nHas_size(\"standard Amtrak coach seat\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"newborn kitten\", size1), Has_size(\"standard Amtrak coach seat\", size2), 3*size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"newborn kitten\", 0.2).\nHas_size(\"standard Amtrak coach seat\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"newborn kitten\", size1), Has_size(\"standard Amtrak coach seat\", size2), 3*size1 <= size2.\n.output Answer"]}
{"id": 1306, "answer": true, "completion": ".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Persian Gulf\", 636000).\nHas_area(\"New Jersey\", 8722).\n.decl Answer()\nAnswer() :- Has_area(\"Persian Gulf\", area1), Has_area(\"New Jersey\", area2), area1 > area2.\n.output Answer", "completions": [".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Persian Gulf\", 636000).\nHas_area(\"New Jersey\", 8722).\n.decl Answer()\nAnswer() :- Has_area(\"Persian Gulf\", area1), Has_area(\"New Jersey\", area2), area1 > area2.\n.output Answer"]}
{"id": 1307, "answer": false, "completion": ".decl Is_tourist_destination(Place:symbol)\nIs_tourist_destination(\"Grand Canyon\").\nIs_tourist_destination(\"Niagara Falls\").\n.decl Answer()\nAnswer() :- !Is_tourist_destination(\"Jurassic era\").\n.output Answer", "completions": [".decl Is_tourist_destination(Place:symbol)\nIs_tourist_destination(\"Grand Canyon\").\nIs_tourist_destination(\"Niagara Falls\").\n.decl Answer()\nAnswer() :- !Is_tourist_destination(\"Jurassic era\").\n.output Answer"]}
{"id": 1308, "answer": true, "completion": ".decl Believes_in(Religion:symbol, Entity:symbol)\nBelieves_in(\"Judaism\", \"Old Testament angels\").\n.decl Answer()\nAnswer() :- !Believes_in(\"Judaism\", \"New Testament angels\").\n.output Answer", "completions": [".decl Believes_in(Religion:symbol, Entity:symbol)\nBelieves_in(\"Judaism\", \"Old Testament angels\").\n.decl Answer()\nAnswer() :- !Believes_in(\"Judaism\", \"New Testament angels\").\n.output Answer"]}
{"id": 1309, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Helen Mirren\", \"English\").\n.decl Answer()\nAnswer() :- Speaks(\"Helen Mirren\", \"Arabic\").\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Helen Mirren\", \"English\").\n.decl Answer()\nAnswer() :- Speaks(\"Helen Mirren\", \"Arabic\").\n.output Answer"]}
{"id": 1310, "answer": false, "completion": ".decl Is_eligible(Person:symbol, Year:float)\nIs_eligible(\"Kane\", 2020).\nIs_eligible(\"Joe Biden\", 2020).\n.decl Is_running(Person:symbol, Year:float)\nIs_running(\"Joe Biden\", 2020).\n.decl Answer()\nAnswer() :- Is_eligible(\"Kane\", year), Is_running(\"Joe Biden\", year).\n.output Answer", "completions": [".decl Is_eligible(Person:symbol, Year:float)\nIs_eligible(\"Kane\", 2020).\nIs_eligible(\"Joe Biden\", 2020).\n.decl Is_running(Person:symbol, Year:float)\nIs_running(\"Joe Biden\", 2020).\n.decl Answer()\nAnswer() :- Is_eligible(\"Kane\", year), Is_running(\"Joe Biden\", year).\n.output Answer"]}
{"id": 1311, "answer": true, "completion": ".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"Eid al-Fitr\", 3).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"jockey win Triple Crown\", 365).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"jockey win Triple Crown\", n_days1), Lasts_n_days(\"Eid al-Fitr\", n_days2), n_days1 <= n_days2.\n.output Answer", "completions": [".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"Eid al-Fitr\", 3).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"jockey win Triple Crown\", 365).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"jockey win Triple Crown\", n_days1), Lasts_n_days(\"Eid al-Fitr\", n_days2), n_days1 <= n_days2.\n.output Answer"]}
{"id": 1312, "answer": true, "completion": ".decl Has_birthday(Person:symbol, Date:symbol)\nHas_birthday(\"baby\", \"Halloween\").\n.decl Has_zodiac_sign(Person:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"baby\", \"Scorpio\").\n.decl Answer()\nAnswer() :- Has_birthday(\"baby\", \"Halloween\"), Has_zodiac_sign(\"baby\", \"Scorpio\").\n.output Answer", "completions": [".decl Has_birthday(Person:symbol, Date:symbol)\nHas_birthday(\"baby\", \"Halloween\").\n.decl Has_zodiac_sign(Person:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"baby\", \"Scorpio\").\n.decl Answer()\nAnswer() :- Has_birthday(\"baby\", \"Halloween\"), Has_zodiac_sign(\"baby\", \"Scorpio\").\n.output Answer"]}
{"id": 1313, "answer": false, "completion": ".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"A Tale of Two Cities\", \"Historical Fiction\").\n.decl Answer()\nAnswer() :- !Is_genre(\"A Tale of Two Cities\", \"Popular Science\").\n.output Answer", "completions": [".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"A Tale of Two Cities\", \"Historical Fiction\").\n.decl Answer()\nAnswer() :- !Is_genre(\"A Tale of Two Cities\", \"Popular Science\").\n.output Answer"]}
{"id": 1314, "answer": true, "completion": ".decl On_blacklist(Person:symbol, Organization:symbol)\nOn_blacklist(\"Michael Vick\", \"People for the Ethical Treatment of Animals\").\n.decl Answer()\nAnswer() :- On_blacklist(\"Michael Vick\", \"People for the Ethical Treatment of Animals\").\n.output Answer", "completions": [".decl On_blacklist(Person:symbol, Organization:symbol)\nOn_blacklist(\"Michael Vick\", \"People for the Ethical Treatment of Animals\").\n.decl Answer()\nAnswer() :- On_blacklist(\"Michael Vick\", \"People for the Ethical Treatment of Animals\").\n.output Answer"]}
{"id": 1315, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"seawater\", 8.34).\nHas_weight(\"six year old\", 40).\n.decl Answer()\nAnswer() :- Has_weight(\"seawater\", weight1), Has_weight(\"six year old\", weight2), weight1 > weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"seawater\", 8.34).\nHas_weight(\"six year old\", 40).\n.decl Answer()\nAnswer() :- Has_weight(\"seawater\", weight1), Has_weight(\"six year old\", weight2), weight1 > weight2.\n.output Answer"]}
{"id": 1316, "answer": false, "completion": ".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"John\", \"Japan\").\n.decl Needs_passport(Person:symbol, Country_A:symbol, Country_B:symbol)\nNeeds_passport(\"John\", \"Japan\", \"Finland\").\nNeeds_passport(\"John\", \"Japan\", \"Sweden\").\nNeeds_passport(\"John\", \"Japan\", \"Norway\").\nNeeds_passport(\"John\", \"Japan\", \"Denmark\").\n.decl Answer()\nAnswer() :- Is_from(\"John\", \"Japan\"), Needs_passport(\"John\", \"Japan\", country), (country = \"Finland\" ; country = \"Sweden\" ; country = \"Norway\" ; country = \"Denmark\").\n.output Answer", "completions": [".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"John\", \"Japan\").\n.decl Needs_passport(Person:symbol, Country_A:symbol, Country_B:symbol)\nNeeds_passport(\"John\", \"Japan\", \"Finland\").\nNeeds_passport(\"John\", \"Japan\", \"Sweden\").\nNeeds_passport(\"John\", \"Japan\", \"Norway\").\nNeeds_passport(\"John\", \"Japan\", \"Denmark\").\n.decl Answer()\nAnswer() :- Is_from(\"John\", \"Japan\"), Needs_passport(\"John\", \"Japan\", country), (country = \"Finland\" ; country = \"Sweden\" ; country = \"Norway\" ; country = \"Denmark\").\n.output Answer"]}
{"id": 1317, "answer": true, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"John Key\", \"New Zealand\").\n.decl Has_power(Person:symbol, Country:symbol, Power:symbol)\nHas_power(\"Donald Trump\", \"USA\", \"executive order\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"John Key\", country1), Has_power(\"Donald Trump\", country2, \"executive order\"), country1 != country2.\n.output Answer", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"John Key\", \"New Zealand\").\n.decl Has_power(Person:symbol, Country:symbol, Power:symbol)\nHas_power(\"Donald Trump\", \"USA\", \"executive order\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"John Key\", country1), Has_power(\"Donald Trump\", country2, \"executive order\"), country1 != country2.\n.output Answer"]}
{"id": 1318, "answer": true, "completion": ".decl Is_combination_of(Person:symbol, Person_A:symbol, Person_B:symbol)\nIs_combination_of(\"Freya\", \"Athena\", \"Aphrodite\").\n.decl Answer()\nAnswer() :- Is_combination_of(\"Freya\", \"Athena\", \"Aphrodite\").\n.output Answer", "completions": [".decl Is_combination_of(Person:symbol, Person_A:symbol, Person_B:symbol)\nIs_combination_of(\"Freya\", \"Athena\", \"Aphrodite\").\n.decl Answer()\nAnswer() :- Is_combination_of(\"Freya\", \"Athena\", \"Aphrodite\").\n.output Answer"]}
{"id": 1319, "answer": false, "completion": ".decl Has_title_fight_wins(Person:symbol, Weight_class:symbol, Wins:float)\nHas_title_fight_wins(\"Jack Dempsey\", \"heavyweight\", 11).\nHas_title_fight_wins(\"Jack Dempsey\", \"light-heavyweight\", 1).\n.decl Answer()\nAnswer() :- Has_title_fight_wins(\"Jack Dempsey\", weight_class1, wins1), Has_title_fight_wins(\"Jack Dempsey\", weight_class2, wins2), (weight_class1 = weight_class2, wins1 > wins2) ; (weight_class1 != weight_class2, wins1 > wins2 ; wins2 > wins1).\n.output Answer", "completions": [".decl Has_title_fight_wins(Person:symbol, Weight_class:symbol, Wins:float)\nHas_title_fight_wins(\"Jack Dempsey\", \"heavyweight\", 11).\nHas_title_fight_wins(\"Jack Dempsey\", \"light-heavyweight\", 1).\n.decl Answer()\nAnswer() :- Has_title_fight_wins(\"Jack Dempsey\", weight_class1, wins1), Has_title_fight_wins(\"Jack Dempsey\", weight_class2, wins2), (weight_class1 = weight_class2, wins1 > wins2) ; (weight_class1 != weight_class2, wins1 > wins2 ; wins2 > wins1).\n.output Answer"]}
{"id": 1320, "answer": true, "completion": ".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Seinfeld\", 180).\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"year\", 365).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Seinfeld\", n_episodes), Last_n_days(\"year\", n_days), n_episodes <= n_days.\n.output Answer", "completions": [".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Seinfeld\", 180).\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"year\", 365).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Seinfeld\", n_episodes), Last_n_days(\"year\", n_days), n_episodes <= n_days.\n.output Answer"]}
{"id": 1321, "answer": true, "completion": ".decl Has_language(Country:symbol, Language:symbol)\nHas_language(\"Burundi\", \"Kirundi\").\nHas_language(\"New Brunswick\", \"English\").\n.decl Answer()\nAnswer() :- Has_language(\"Burundi\", language1), Has_language(\"New Brunswick\", language2), language1 = language2.\n.output Answer", "completions": [".decl Has_language(Country:symbol, Language:symbol)\nHas_language(\"Burundi\", \"Kirundi\").\nHas_language(\"New Brunswick\", \"English\").\n.decl Answer()\nAnswer() :- Has_language(\"Burundi\", language1), Has_language(\"New Brunswick\", language2), language1 = language2.\n.output Answer"]}
{"id": 1322, "answer": false, "completion": ".decl Has_ingredient(Kitchen:symbol, Ingredient:symbol)\nHas_ingredient(\"Carmine's kitchen\", \"olive oil\").\n.decl Panic_level(Kitchen:symbol, Panic_level:float)\nPanic_level(\"Carmine's kitchen\", 5).\n.decl Answer()\nAnswer() :- !Has_ingredient(\"Carmine's kitchen\", \"olive oil\"), Panic_level(\"Carmine's kitchen\", panic_level), panic_level > 0.\n.output Answer", "completions": [".decl Has_ingredient(Kitchen:symbol, Ingredient:symbol)\nHas_ingredient(\"Carmine's kitchen\", \"olive oil\").\n.decl Panic_level(Kitchen:symbol, Panic_level:float)\nPanic_level(\"Carmine's kitchen\", 5).\n.decl Answer()\nAnswer() :- !Has_ingredient(\"Carmine's kitchen\", \"olive oil\"), Panic_level(\"Carmine's kitchen\", panic_level), panic_level > 0.\n.output Answer"]}
{"id": 1323, "answer": true, "completion": ".decl Has_danger_level(Job:symbol, Danger_level:float)\nHas_danger_level(\"mail carrier\", 4).\n.decl Answer()\nAnswer() :- Has_danger_level(\"mail carrier\", danger_level), danger_level > 3.\n.output Answer", "completions": [".decl Has_danger_level(Job:symbol, Danger_level:float)\nHas_danger_level(\"mail carrier\", 4).\n.decl Answer()\nAnswer() :- Has_danger_level(\"mail carrier\", danger_level), danger_level > 3.\n.output Answer"]}
{"id": 1324, "answer": true, "completion": ".decl Has_birth_method(Animal:symbol, Birth_method:symbol)\nHas_birth_method(\"duck\", \"egg-laying\").\n.decl Answer()\nAnswer() :- Has_birth_method(\"duck\", birth_method), birth_method != \"Caesarean section\".\n.output Answer", "completions": [".decl Has_birth_method(Animal:symbol, Birth_method:symbol)\nHas_birth_method(\"duck\", \"egg-laying\").\n.decl Answer()\nAnswer() :- Has_birth_method(\"duck\", birth_method), birth_method != \"Caesarean section\".\n.output Answer"]}
{"id": 1325, "answer": true, "completion": ".decl Used_for(Tool:symbol, Event:symbol)\nUsed_for(\"pen\", \"Martin Luther's Reformation opening salvo\").\n.decl Answer()\nAnswer() :- !Used_for(\"pen\", \"crucifixion\").\n.output Answer", "completions": [".decl Used_for(Tool:symbol, Event:symbol)\nUsed_for(\"pen\", \"Martin Luther's Reformation opening salvo\").\n.decl Answer()\nAnswer() :- !Used_for(\"pen\", \"crucifixion\").\n.output Answer"]}
{"id": 1326, "answer": true, "completion": ".decl Has_fat_content(Milk:symbol, Fat_content:float)\nHas_fat_content(\"bottled milk\", 0.3).\nHas_fat_content(\"cream\", 0.5).\n.decl Answer()\nAnswer() :- Has_fat_content(\"bottled milk\", fat_content1), Has_fat_content(\"cream\", fat_content2), fat_content2 > fat_content1.\n.output Answer", "completions": [".decl Has_fat_content(Milk:symbol, Fat_content:float)\nHas_fat_content(\"bottled milk\", 0.3).\nHas_fat_content(\"cream\", 0.5).\n.decl Answer()\nAnswer() :- Has_fat_content(\"bottled milk\", fat_content1), Has_fat_content(\"cream\", fat_content2), fat_content2 > fat_content1.\n.output Answer"]}
{"id": 1327, "answer": true, "completion": ".decl Is_safe(Substance_A:symbol, Substance_B:symbol)\nIs_safe(\"ammonia\", \"clorox\").\n.decl Answer()\nAnswer() :- Is_safe(\"ammonia\", \"clorox\").\n.output Answer", "completions": [".decl Is_safe(Substance_A:symbol, Substance_B:symbol)\nIs_safe(\"ammonia\", \"clorox\").\n.decl Answer()\nAnswer() :- Is_safe(\"ammonia\", \"clorox\").\n.output Answer"]}
{"id": 1328, "answer": true, "completion": ".decl Has_interests(Person:symbol, Interest:symbol)\nHas_interests(\"Deacon\", \"movies\").\n.decl Is_fan_of(Person:symbol, Podcast:symbol)\nIs_fan_of(\"Deacon\", \"God Awful Movies\").\n.decl Answer()\nAnswer() :- Has_interests(\"Deacon\", \"movies\"), Is_fan_of(\"Deacon\", \"God Awful Movies\").\n.output Answer", "completions": [".decl Has_interests(Person:symbol, Interest:symbol)\nHas_interests(\"Deacon\", \"movies\").\n.decl Is_fan_of(Person:symbol, Podcast:symbol)\nIs_fan_of(\"Deacon\", \"God Awful Movies\").\n.decl Answer()\nAnswer() :- Has_interests(\"Deacon\", \"movies\"), Is_fan_of(\"Deacon\", \"God Awful Movies\").\n.output Answer"]}
{"id": 1329, "answer": true, "completion": ".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Muslims\", \"Allah\").\n.decl Place_of_worship(Deity:symbol, Place:symbol)\nPlace_of_worship(\"Allah\", \"mosque\").\n.decl Answer()\nAnswer() :- Worships(\"Muslims\", deity), Place_of_worship(deity, \"mosque\"), deity != \"Ahura Mazda\".\n.output Answer", "completions": [".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Muslims\", \"Allah\").\n.decl Place_of_worship(Deity:symbol, Place:symbol)\nPlace_of_worship(\"Allah\", \"mosque\").\n.decl Answer()\nAnswer() :- Worships(\"Muslims\", deity), Place_of_worship(deity, \"mosque\"), deity != \"Ahura Mazda\".\n.output Answer"]}
{"id": 1330, "answer": true, "completion": ".decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Nine Inch Nails\", \"Trent Reznor\").\nHas_member(\"David Lynch\", \"Trent Reznor\").\n.decl Answer()\nAnswer() :- Has_member(\"Nine Inch Nails\", member), Has_member(\"David Lynch\", member).\n.output Answer", "completions": [".decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Nine Inch Nails\", \"Trent Reznor\").\nHas_member(\"David Lynch\", \"Trent Reznor\").\n.decl Answer()\nAnswer() :- Has_member(\"Nine Inch Nails\", member), Has_member(\"David Lynch\", member).\n.output Answer"]}
{"id": 1331, "answer": false, "completion": ".decl Supports(Country:symbol, War:symbol)\nSupports(\"Switzerland\", \"World War I\").\n.decl Answer()\nAnswer() :- !Supports(\"Switzerland\", \"Spanish–American War\").\n.output Answer", "completions": [".decl Supports(Country:symbol, War:symbol)\nSupports(\"Switzerland\", \"World War I\").\n.decl Answer()\nAnswer() :- !Supports(\"Switzerland\", \"Spanish–American War\").\n.output Answer"]}
{"id": 1332, "answer": true, "completion": ".decl Has_type(Tree:symbol, Type:symbol)\nHas_type(\"Christmas tree\", \"evergreen\").\n.decl Answer()\nAnswer() :- Has_type(\"Christmas tree\", type), type != \"deciduous\".\n.output Answer", "completions": [".decl Has_type(Tree:symbol, Type:symbol)\nHas_type(\"Christmas tree\", \"evergreen\").\n.decl Answer()\nAnswer() :- Has_type(\"Christmas tree\", type), type != \"deciduous\".\n.output Answer"]}
{"id": 1333, "answer": true, "completion": ".decl Survives(Character:symbol, Movie:symbol)\nSurvives(\"Robert Downey Jr\", \"Avengers: Endgame\").\n.decl Answer()\nAnswer() :- Survives(\"Robert Downey Jr\", \"Avengers: Endgame\").\n.output Answer", "completions": [".decl Survives(Character:symbol, Movie:symbol)\nSurvives(\"Robert Downey Jr\", \"Avengers: Endgame\").\n.decl Answer()\nAnswer() :- Survives(\"Robert Downey Jr\", \"Avengers: Endgame\").\n.output Answer"]}
{"id": 1334, "answer": true, "completion": ".decl Likes(Person:symbol, Gift:symbol)\nLikes(\"Christmas elf\", \"toys\").\n.decl Answer()\nAnswer() :- Likes(\"Christmas elf\", \"toys\"), !Has_magnetic_field(\"compass\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Gift:symbol)\nLikes(\"Christmas elf\", \"toys\").\n.decl Answer()\nAnswer() :- Likes(\"Christmas elf\", \"toys\"), !Has_magnetic_field(\"compass\").\n.output Answer"]}
{"id": 1335, "answer": true, "completion": ".decl Lasts_n_hours(Solution:symbol, N_hours:float)\nLasts_n_hours(\"tampons\", 8).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"tampons\", n_hours), n_hours >= 24.\n.output Answer", "completions": [".decl Lasts_n_hours(Solution:symbol, N_hours:float)\nLasts_n_hours(\"tampons\", 8).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"tampons\", n_hours), n_hours >= 24.\n.output Answer"]}
{"id": 1336, "answer": true, "completion": ".decl Is_fictional(Character:symbol)\nIs_fictional(\"Robin Hood\").\nIs_fictional(\"Little John\").\nIs_fictional(\"Friar Tuck\").\nIs_fictional(\"Maid Marian\").\n.decl Answer()\nAnswer() :- Is_fictional(character), Is_fictional(character2), character != character2.\n.output Answer", "completions": [".decl Is_fictional(Character:symbol)\nIs_fictional(\"Robin Hood\").\nIs_fictional(\"Little John\").\nIs_fictional(\"Friar Tuck\").\nIs_fictional(\"Maid Marian\").\n.decl Answer()\nAnswer() :- Is_fictional(character), Is_fictional(character2), character != character2.\n.output Answer"]}
{"id": 1337, "answer": true, "completion": ".decl Weapon_of_choice(Person:symbol, Weapon:symbol)\nWeapon_of_choice(\"Gladiator\", \"sword\").\nWeapon_of_choice(\"Soul Calibur's Faust\", \"axe\").\n.decl Requires_n_hands(Weapon:symbol, N_hands:float)\nRequires_n_hands(\"sword\", 1).\nRequires_n_hands(\"axe\", 2).\n.decl Answer()\nAnswer() :- Weapon_of_choice(\"Gladiator\", weapon1), Weapon_of_choice(\"Soul Calibur's Faust\", weapon2), Requires_n_hands(weapon1, n_hands1), Requires_n_hands(weapon2, n_hands2), n_hands1 < n_hands2.\n.output Answer", "completions": [".decl Weapon_of_choice(Person:symbol, Weapon:symbol)\nWeapon_of_choice(\"Gladiator\", \"sword\").\nWeapon_of_choice(\"Soul Calibur's Faust\", \"axe\").\n.decl Requires_n_hands(Weapon:symbol, N_hands:float)\nRequires_n_hands(\"sword\", 1).\nRequires_n_hands(\"axe\", 2).\n.decl Answer()\nAnswer() :- Weapon_of_choice(\"Gladiator\", weapon1), Weapon_of_choice(\"Soul Calibur's Faust\", weapon2), Requires_n_hands(weapon1, n_hands1), Requires_n_hands(weapon2, n_hands2), n_hands1 < n_hands2.\n.output Answer"]}
{"id": 1338, "answer": true, "completion": ".decl Buys(Person:symbol, Store:symbol)\n.decl Answer()\nAnswer() :- !Buys(\"Mozart\", \"Dolce & Gabbana\").\n.output Answer", "completions": [".decl Buys(Person:symbol, Store:symbol)\n.decl Answer()\nAnswer() :- !Buys(\"Mozart\", \"Dolce & Gabbana\").\n.output Answer"]}
{"id": 1339, "answer": true, "completion": ".decl Influences(Artist_A:symbol, Artist_B:symbol)\nInfluences(\"Nine Inch Nails\", \"Aretha Franklin\").\n.decl Answer()\nAnswer() :- Influences(\"Nine Inch Nails\", \"Aretha Franklin\").\n.output Answer", "completions": [".decl Influences(Artist_A:symbol, Artist_B:symbol)\nInfluences(\"Nine Inch Nails\", \"Aretha Franklin\").\n.decl Answer()\nAnswer() :- Influences(\"Nine Inch Nails\", \"Aretha Franklin\").\n.output Answer"]}
{"id": 1340, "answer": false, "completion": ".decl Is_lactose_intolerant(Person:symbol)\nIs_lactose_intolerant(\"John\").\n.decl Contains_lactose(Food:symbol)\nContains_lactose(\"cream\").\n.decl Answer()\nAnswer() :- Is_lactose_intolerant(person), Contains_lactose(food).\n.output Answer", "completions": [".decl Is_lactose_intolerant(Person:symbol)\nIs_lactose_intolerant(\"John\").\n.decl Contains_lactose(Food:symbol)\nContains_lactose(\"cream\").\n.decl Answer()\nAnswer() :- Is_lactose_intolerant(person), Contains_lactose(food).\n.output Answer"]}
{"id": 1341, "answer": true, "completion": ".decl Works_in_season(Person:symbol, Season:symbol)\nWorks_in_season(\"Santa Claus\", \"winter\").\n.decl Answer()\nAnswer() :- !Works_in_season(\"Santa Claus\", \"summer\").\n.output Answer", "completions": [".decl Works_in_season(Person:symbol, Season:symbol)\nWorks_in_season(\"Santa Claus\", \"winter\").\n.decl Answer()\nAnswer() :- !Works_in_season(\"Santa Claus\", \"summer\").\n.output Answer"]}
{"id": 1342, "answer": false, "completion": ".decl Has_duration(Degree:symbol, Duration:float)\nHas_duration(\"bachelor's degree\", 4).\n.decl Has_leap_year(Year:symbol)\nHas_leap_year(\"2020\").\n.decl Answer()\nAnswer() :- Has_duration(\"bachelor's degree\", duration), Has_leap_year(year), duration > 1.\n.output Answer", "completions": [".decl Has_duration(Degree:symbol, Duration:float)\nHas_duration(\"bachelor's degree\", 4).\n.decl Has_leap_year(Year:symbol)\nHas_leap_year(\"2020\").\n.decl Answer()\nAnswer() :- Has_duration(\"bachelor's degree\", duration), Has_leap_year(year), duration > 1.\n.output Answer"]}
{"id": 1343, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Albanian Civil War\", \"1997-1998\").\nHappens_in_time(\"Harry Potter and the Philosopher's Stone\", \"1997\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Albanian Civil War\", time1), Happens_in_time(\"Harry Potter and the Philosopher's Stone\", time2), time1 >= time2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Albanian Civil War\", \"1997-1998\").\nHappens_in_time(\"Harry Potter and the Philosopher's Stone\", \"1997\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Albanian Civil War\", time1), Happens_in_time(\"Harry Potter and the Philosopher's Stone\", time2), time1 >= time2.\n.output Answer"]}
{"id": 1344, "answer": true, "completion": ".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Jay-Z\", \"Kanye West\").\nCollaborates(\"Kanye West\", \"Louis Armstrong\").\n.decl Answer()\nAnswer() :- Collaborates(\"Jay-Z\", \"Louis Armstrong\").\n.output Answer", "completions": [".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Jay-Z\", \"Kanye West\").\nCollaborates(\"Kanye West\", \"Louis Armstrong\").\n.decl Answer()\nAnswer() :- Collaborates(\"Jay-Z\", \"Louis Armstrong\").\n.output Answer"]}
{"id": 1345, "answer": false, "completion": ".decl Allowed_in(Object:symbol, Place:symbol)\nAllowed_in(\"robusto\", \"restaurants\").\nAllowed_in(\"robusto\", \"bars\").\n.decl Answer()\nAnswer() :- !Allowed_in(\"robusto\", \"Central Park Zoo\").\n.output Answer", "completions": [".decl Allowed_in(Object:symbol, Place:symbol)\nAllowed_in(\"robusto\", \"restaurants\").\nAllowed_in(\"robusto\", \"bars\").\n.decl Answer()\nAnswer() :- !Allowed_in(\"robusto\", \"Central Park Zoo\").\n.output Answer"]}
{"id": 1346, "answer": false, "completion": ".decl Helps_detect(Element:symbol, Virus:symbol)\nHelps_detect(\"mercury\", \"coronavirus\").\n.decl Answer()\nAnswer() :- Helps_detect(\"mercury\", \"coronavirus\").\n.output Answer", "completions": [".decl Helps_detect(Element:symbol, Virus:symbol)\nHelps_detect(\"mercury\", \"coronavirus\").\n.decl Answer()\nAnswer() :- Helps_detect(\"mercury\", \"coronavirus\").\n.output Answer"]}
{"id": 1347, "answer": true, "completion": ".decl Has_technology(Person:symbol, Technology:symbol)\nHas_technology(\"Al Capone\", \"gun\").\nHas_technology(\"Al Capone\", \"car\").\n.decl Answer()\nAnswer() :- !Has_technology(\"Al Capone\", \"smartphone\").\n.output Answer", "completions": [".decl Has_technology(Person:symbol, Technology:symbol)\nHas_technology(\"Al Capone\", \"gun\").\nHas_technology(\"Al Capone\", \"car\").\n.decl Answer()\nAnswer() :- !Has_technology(\"Al Capone\", \"smartphone\").\n.output Answer"]}
{"id": 1348, "answer": false, "completion": ".decl Has_statue(Person:symbol)\nHas_statue(\"Benjamin Franklin\").\n.decl Supports_movement(Person:symbol, Movement:symbol)\nSupports_movement(\"Benjamin Franklin\", \"Black Lives Matter\").\n.decl Answer()\nAnswer() :- Has_statue(\"Benjamin Franklin\"), Supports_movement(\"Benjamin Franklin\", \"Black Lives Matter\").\n.output Answer", "completions": [".decl Has_statue(Person:symbol)\nHas_statue(\"Benjamin Franklin\").\n.decl Supports_movement(Person:symbol, Movement:symbol)\nSupports_movement(\"Benjamin Franklin\", \"Black Lives Matter\").\n.decl Answer()\nAnswer() :- Has_statue(\"Benjamin Franklin\"), Supports_movement(\"Benjamin Franklin\", \"Black Lives Matter\").\n.output Answer"]}
{"id": 1349, "answer": false, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Jason Voorhees\", \"murderous\").\n.decl Is_martyr(Person:symbol)\nIs_martyr(person) :- Has_trait(person, \"selfless\"), Has_trait(person, \"courageous\").\n.decl Answer()\nAnswer() :- Has_trait(\"Jason Voorhees\", trait), !Is_martyr(\"Jason Voorhees\").\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Jason Voorhees\", \"murderous\").\n.decl Is_martyr(Person:symbol)\nIs_martyr(person) :- Has_trait(person, \"selfless\"), Has_trait(person, \"courageous\").\n.decl Answer()\nAnswer() :- Has_trait(\"Jason Voorhees\", trait), !Is_martyr(\"Jason Voorhees\").\n.output Answer"]}
{"id": 1350, "answer": false, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"teacher\", \"teaching\").\n.decl Answer()\nAnswer() :- !Has_job(\"teacher\", \"teaching\").\n.output Answer", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"teacher\", \"teaching\").\n.decl Answer()\nAnswer() :- !Has_job(\"teacher\", \"teaching\").\n.output Answer"]}
{"id": 1351, "answer": false, "completion": ".decl Has_senses(Organism:symbol, Sense:symbol)\nHas_senses(\"fly\", \"sight\").\n.decl Answer()\nAnswer() :- Has_senses(\"fly\", \"sight\"), !Has_senses(\"fly\", \"sight\").\n.output Answer", "completions": [".decl Has_senses(Organism:symbol, Sense:symbol)\nHas_senses(\"fly\", \"sight\").\n.decl Answer()\nAnswer() :- Has_senses(\"fly\", \"sight\"), !Has_senses(\"fly\", \"sight\").\n.output Answer"]}
{"id": 1352, "answer": true, "completion": ".decl Has_colors(Object:symbol, Colors:symbol)\nHas_colors(\"rainbow\", \"red, orange, yellow, green, blue, indigo, violet\").\nHas_colors(\"yin and yang colors\", \"black and white\").\n.decl Answer()\nAnswer() :- Has_colors(\"rainbow\", colors1), Has_colors(\"yin and yang colors\", colors2), colors1 != colors2.\n.output Answer", "completions": [".decl Has_colors(Object:symbol, Colors:symbol)\nHas_colors(\"rainbow\", \"red, orange, yellow, green, blue, indigo, violet\").\nHas_colors(\"yin and yang colors\", \"black and white\").\n.decl Answer()\nAnswer() :- Has_colors(\"rainbow\", colors1), Has_colors(\"yin and yang colors\", colors2), colors1 != colors2.\n.output Answer"]}
{"id": 1353, "answer": true, "completion": ".decl Originated_in_period(Animal:symbol, Period:symbol)\nOriginated_in_period(\"mongoose\", \"Cenozoic\").\nOriginated_in_period(\"rhinos\", \"Mesozoic\").\n.decl Answer()\nAnswer() :- Originated_in_period(\"mongoose\", period1), Originated_in_period(\"rhinos\", period2), period1 > period2.\n.output Answer", "completions": [".decl Originated_in_period(Animal:symbol, Period:symbol)\nOriginated_in_period(\"mongoose\", \"Cenozoic\").\nOriginated_in_period(\"rhinos\", \"Mesozoic\").\n.decl Answer()\nAnswer() :- Originated_in_period(\"mongoose\", period1), Originated_in_period(\"rhinos\", period2), period1 > period2.\n.output Answer"]}
{"id": 1354, "answer": false, "completion": ".decl Participates_in(Person:symbol, War:symbol)\nParticipates_in(\"Archduke Franz Ferdinand of Austria\", \"World War I\").\n.decl Answer()\nAnswer() :- !Participates_in(\"Archduke Franz Ferdinand of Austria\", \"Pacific War\").\n.output Answer", "completions": [".decl Participates_in(Person:symbol, War:symbol)\nParticipates_in(\"Archduke Franz Ferdinand of Austria\", \"World War I\").\n.decl Answer()\nAnswer() :- !Participates_in(\"Archduke Franz Ferdinand of Austria\", \"Pacific War\").\n.output Answer"]}
{"id": 1355, "answer": true, "completion": ".decl Makes_living_through(Person:symbol, Activity:symbol)\nMakes_living_through(\"Paulo Coelho's wife\", \"writing\").\n.decl Answer()\nAnswer() :- !Makes_living_through(\"Paulo Coelho's wife\", \"speech\").\n.output Answer", "completions": [".decl Makes_living_through(Person:symbol, Activity:symbol)\nMakes_living_through(\"Paulo Coelho's wife\", \"writing\").\n.decl Answer()\nAnswer() :- !Makes_living_through(\"Paulo Coelho's wife\", \"speech\").\n.output Answer"]}
{"id": 1356, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Bill Gates\", 100).\nHas_net_worth(\"Baby Boomers\", 50).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Bill Gates\", net_worth1), Has_net_worth(\"Baby Boomers\", net_worth2), net_worth1 > net_worth2.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Bill Gates\", 100).\nHas_net_worth(\"Baby Boomers\", 50).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Bill Gates\", net_worth1), Has_net_worth(\"Baby Boomers\", net_worth2), net_worth1 > net_worth2.\n.output Answer"]}
{"id": 1357, "answer": true, "completion": ".decl Runs_OS(Device:symbol, OS:symbol)\nRuns_OS(\"Windows smartphone\", \"Windows\").\nRuns_OS(\"Android smartphone\", \"Android\").\n.decl Has_version(OS:symbol, Version:symbol)\nHas_version(\"Linux\", \"newer\").\n.decl Answer()\nAnswer() :- Runs_OS(device, os), Has_version(os, \"newer\").\n.output Answer", "completions": [".decl Runs_OS(Device:symbol, OS:symbol)\nRuns_OS(\"Windows smartphone\", \"Windows\").\nRuns_OS(\"Android smartphone\", \"Android\").\n.decl Has_version(OS:symbol, Version:symbol)\nHas_version(\"Linux\", \"newer\").\n.decl Answer()\nAnswer() :- Runs_OS(device, os), Has_version(os, \"newer\").\n.output Answer"]}
{"id": 1358, "answer": true, "completion": ".decl Votes_for(Person:symbol, Politician:symbol)\nVotes_for(\"Bill Nye\", \"John F. Kennedy\").\n.decl Answer()\nAnswer() :- !Votes_for(\"Bill Nye\", \"Franklin Delano Roosevelt\").\n.output Answer", "completions": [".decl Votes_for(Person:symbol, Politician:symbol)\nVotes_for(\"Bill Nye\", \"John F. Kennedy\").\n.decl Answer()\nAnswer() :- !Votes_for(\"Bill Nye\", \"Franklin Delano Roosevelt\").\n.output Answer"]}
{"id": 1359, "answer": false, "completion": ".decl Has_descendants(Person:symbol, N_descendants:float)\nHas_descendants(\"Genghis Khan\", 0.5).\nHas_descendants(\"Julius Caesar\", 0.1).\n.decl Answer()\nAnswer() :- Has_descendants(\"Genghis Khan\", n_descendants1), Has_descendants(\"Julius Caesar\", n_descendants2), n_descendants1 > n_descendants2.\n.output Answer", "completions": [".decl Has_descendants(Person:symbol, N_descendants:float)\nHas_descendants(\"Genghis Khan\", 0.5).\nHas_descendants(\"Julius Caesar\", 0.1).\n.decl Answer()\nAnswer() :- Has_descendants(\"Genghis Khan\", n_descendants1), Has_descendants(\"Julius Caesar\", n_descendants2), n_descendants1 > n_descendants2.\n.output Answer"]}
{"id": 1360, "answer": true, "completion": ".decl Invented_by(Object:symbol, Company:symbol)\nInvented_by(\"Casio's first invention\", \"Casio\").\n.decl Can_be_worn(Object:symbol, Body_part:symbol)\nCan_be_worn(\"Casio's first invention\", \"ankle\").\n.decl Answer()\nAnswer() :- Invented_by(object, \"Casio\"), Can_be_worn(object, \"ankle\").\n.output Answer", "completions": [".decl Invented_by(Object:symbol, Company:symbol)\nInvented_by(\"Casio's first invention\", \"Casio\").\n.decl Can_be_worn(Object:symbol, Body_part:symbol)\nCan_be_worn(\"Casio's first invention\", \"ankle\").\n.decl Answer()\nAnswer() :- Invented_by(object, \"Casio\"), Can_be_worn(object, \"ankle\").\n.output Answer"]}
{"id": 1361, "answer": true, "completion": ".decl Has_mental_illness(Patient:symbol, Mental_illness:symbol)\nHas_mental_illness(\"John\", \"none\").\n.decl Answer()\nAnswer() :- Has_mental_illness(patient, \"none\").\n.output Answer", "completions": [".decl Has_mental_illness(Patient:symbol, Mental_illness:symbol)\nHas_mental_illness(\"John\", \"none\").\n.decl Answer()\nAnswer() :- Has_mental_illness(patient, \"none\").\n.output Answer"]}
{"id": 1362, "answer": true, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Boeing 737-800\", 100000000).\nHas_price(\"Da Vinci painting\", 50000000).\n.decl Answer()\nAnswer() :- Has_price(\"Boeing 737-800\", price1), Has_price(\"Da Vinci painting\", price2), price1 <= price2.\n.output Answer", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Boeing 737-800\", 100000000).\nHas_price(\"Da Vinci painting\", 50000000).\n.decl Answer()\nAnswer() :- Has_price(\"Boeing 737-800\", price1), Has_price(\"Da Vinci painting\", price2), price1 <= price2.\n.output Answer"]}
{"id": 1363, "answer": true, "completion": ".decl Manufactured_first(Car:symbol)\nManufactured_first(\"Mini\").\n.decl Answer()\nAnswer() :- Manufactured_first(\"Mini\").\n.output Answer", "completions": [".decl Manufactured_first(Car:symbol)\nManufactured_first(\"Mini\").\n.decl Answer()\nAnswer() :- Manufactured_first(\"Mini\").\n.output Answer"]}
{"id": 1364, "answer": true, "completion": ".decl Has_letter(Language:symbol, Letter:symbol)\nHas_letter(\"Eastern Canadian Natives language\", \"b\").\n.decl Answer()\nAnswer() :- Has_letter(\"Eastern Canadian Natives language\", \"b\").\n.output Answer", "completions": [".decl Has_letter(Language:symbol, Letter:symbol)\nHas_letter(\"Eastern Canadian Natives language\", \"b\").\n.decl Answer()\nAnswer() :- Has_letter(\"Eastern Canadian Natives language\", \"b\").\n.output Answer"]}
{"id": 1365, "answer": true, "completion": ".decl Requires_anchor(Bike:symbol, Anchor:symbol)\nRequires_anchor(\"Trek 9000\", \"no\").\n.decl Answer()\nAnswer() :- Requires_anchor(\"Trek 9000\", \"no\").\n.output Answer", "completions": [".decl Requires_anchor(Bike:symbol, Anchor:symbol)\nRequires_anchor(\"Trek 9000\", \"no\").\n.decl Answer()\nAnswer() :- Requires_anchor(\"Trek 9000\", \"no\").\n.output Answer"]}
{"id": 1366, "answer": false, "completion": ".decl Occurs_in_region(Virus:symbol, Region:symbol)\nOccurs_in_region(\"Zika virus\", \"South America\").\n.decl Answer()\nAnswer() :- !Occurs_in_region(\"Zika virus\", \"Antarctica\").\n.output Answer", "completions": [".decl Occurs_in_region(Virus:symbol, Region:symbol)\nOccurs_in_region(\"Zika virus\", \"South America\").\n.decl Answer()\nAnswer() :- !Occurs_in_region(\"Zika virus\", \"Antarctica\").\n.output Answer"]}
{"id": 1367, "answer": false, "completion": ".decl Is_in_timezone(City:symbol, Timezone:symbol)\nIs_in_timezone(\"Basel\", \"CET\").\nIs_in_timezone(\"Los Angeles\", \"PST\").\n.decl Is_dark(Timezone:symbol, Time:symbol)\nIs_dark(\"CET\", \"day\").\nIs_dark(\"PST\", \"night\").\n.decl Answer()\nAnswer() :- Is_in_timezone(\"Basel\", timezone1), Is_in_timezone(\"Los Angeles\", timezone2), Is_dark(timezone1, time1), Is_dark(timezone2, time2), time1 != time2.\n.output Answer", "completions": [".decl Is_in_timezone(City:symbol, Timezone:symbol)\nIs_in_timezone(\"Basel\", \"CET\").\nIs_in_timezone(\"Los Angeles\", \"PST\").\n.decl Is_dark(Timezone:symbol, Time:symbol)\nIs_dark(\"CET\", \"day\").\nIs_dark(\"PST\", \"night\").\n.decl Answer()\nAnswer() :- Is_in_timezone(\"Basel\", timezone1), Is_in_timezone(\"Los Angeles\", timezone2), Is_dark(timezone1, time1), Is_dark(timezone2, time2), time1 != time2.\n.output Answer"]}
{"id": 1368, "answer": true, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person\", \"tendonitis\").\n.decl Is_safe(Activity:symbol, Condition:symbol)\nIs_safe(\"breakdancing\", \"tendonitis\").\n.decl Answer()\nAnswer() :- Has_condition(\"person\", condition), Is_safe(\"breakdancing\", condition).\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person\", \"tendonitis\").\n.decl Is_safe(Activity:symbol, Condition:symbol)\nIs_safe(\"breakdancing\", \"tendonitis\").\n.decl Answer()\nAnswer() :- Has_condition(\"person\", condition), Is_safe(\"breakdancing\", condition).\n.output Answer"]}
{"id": 1369, "answer": true, "completion": ".decl Travels_with(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- !Travels_with(\"Marco Polo\", \"Christopher Columbus\").\n.output Answer", "completions": [".decl Travels_with(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- !Travels_with(\"Marco Polo\", \"Christopher Columbus\").\n.output Answer"]}
{"id": 1370, "answer": true, "completion": ".decl Has_language(Country:symbol, Language:symbol)\nHas_language(\"Saint Vincent and the Grenadines\", \"English\").\n.decl Has_root(Language:symbol, Root_language:symbol)\nHas_root(\"English\", \"English\").\n.decl Answer()\nAnswer() :- Has_language(\"Saint Vincent and the Grenadines\", language), Has_root(language, \"English\").\n.output Answer", "completions": [".decl Has_language(Country:symbol, Language:symbol)\nHas_language(\"Saint Vincent and the Grenadines\", \"English\").\n.decl Has_root(Language:symbol, Root_language:symbol)\nHas_root(\"English\", \"English\").\n.decl Answer()\nAnswer() :- Has_language(\"Saint Vincent and the Grenadines\", language), Has_root(language, \"English\").\n.output Answer"]}
{"id": 1371, "answer": false, "completion": ".decl Had_dinner_with(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- !Had_dinner_with(\"Lionel Richie\", \"Abraham Lincoln\").\n.output Answer", "completions": [".decl Had_dinner_with(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- !Had_dinner_with(\"Lionel Richie\", \"Abraham Lincoln\").\n.output Answer"]}
{"id": 1372, "answer": true, "completion": ".decl Causes(Event:symbol, Result:symbol)\nCauses(\"traffic collision\", \"injury\").\n.decl Makes_millionaire(Event:symbol)\nMakes_millionaire(\"winning lottery\").\n.decl Answer()\nAnswer() :- Causes(event, \"injury\"), Makes_millionaire(event), !Causes(event, \"millionaire\").\n.output Answer", "completions": [".decl Causes(Event:symbol, Result:symbol)\nCauses(\"traffic collision\", \"injury\").\n.decl Makes_millionaire(Event:symbol)\nMakes_millionaire(\"winning lottery\").\n.decl Answer()\nAnswer() :- Causes(event, \"injury\"), Makes_millionaire(event), !Causes(event, \"millionaire\").\n.output Answer"]}
{"id": 1373, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"parsley\", 0.9).\nHas_density(\"milk\", 1.03).\n.decl Answer()\nAnswer() :- Has_density(\"parsley\", density1), Has_density(\"milk\", density2), density1 > density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"parsley\", 0.9).\nHas_density(\"milk\", 1.03).\n.decl Answer()\nAnswer() :- Has_density(\"parsley\", density1), Has_density(\"milk\", density2), density1 > density2.\n.output Answer"]}
{"id": 1374, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Happy Gilmore Productions CEO\", \"Torah\").\n.decl Answer()\nAnswer() :- Owns(\"Happy Gilmore Productions CEO\", \"Torah\").\n.output Answer", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Happy Gilmore Productions CEO\", \"Torah\").\n.decl Answer()\nAnswer() :- Owns(\"Happy Gilmore Productions CEO\", \"Torah\").\n.output Answer"]}
{"id": 1375, "answer": false, "completion": ".decl Has_belief(Person:symbol, Belief:symbol)\nHas_belief(\"pacifist\", \"non-violence\").\n.decl Opposes(Belief:symbol, Activity:symbol)\nOpposes(\"non-violence\", \"hunting\").\n.decl Answer()\nAnswer() :- Has_belief(\"pacifist\", belief), Opposes(belief, \"hunting\").\n.output Answer", "completions": [".decl Has_belief(Person:symbol, Belief:symbol)\nHas_belief(\"pacifist\", \"non-violence\").\n.decl Opposes(Belief:symbol, Activity:symbol)\nOpposes(\"non-violence\", \"hunting\").\n.decl Answer()\nAnswer() :- Has_belief(\"pacifist\", belief), Opposes(belief, \"hunting\").\n.output Answer"]}
{"id": 1376, "answer": true, "completion": ".decl Has_danger_level(Event:symbol, Danger_level:float)\nHas_danger_level(\"plague\", 10).\nHas_danger_level(\"selfies\", 5).\n.decl Answer()\nAnswer() :- Has_danger_level(\"plague\", danger_level1), Has_danger_level(\"selfies\", danger_level2), danger_level2 > danger_level1.\n.output Answer", "completions": [".decl Has_danger_level(Event:symbol, Danger_level:float)\nHas_danger_level(\"plague\", 10).\nHas_danger_level(\"selfies\", 5).\n.decl Answer()\nAnswer() :- Has_danger_level(\"plague\", danger_level1), Has_danger_level(\"selfies\", danger_level2), danger_level2 > danger_level1.\n.output Answer"]}
{"id": 1377, "answer": false, "completion": ".decl Airs_on_channel(Show:symbol, Channel:symbol)\nAirs_on_channel(\"Naruto\", \"Cartoon Network\").\nAirs_on_channel(\"Puzzle Place\", \"PBS\").\n.decl Answer()\nAnswer() :- !Airs_on_channel(\"Naruto\", channel1), !Airs_on_channel(\"Puzzle Place\", channel2), channel1 != channel2.\n.output Answer", "completions": [".decl Airs_on_channel(Show:symbol, Channel:symbol)\nAirs_on_channel(\"Naruto\", \"Cartoon Network\").\nAirs_on_channel(\"Puzzle Place\", \"PBS\").\n.decl Answer()\nAnswer() :- !Airs_on_channel(\"Naruto\", channel1), !Airs_on_channel(\"Puzzle Place\", channel2), channel1 != channel2.\n.output Answer"]}
{"id": 1378, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Johnny Carson\", 3).\n.decl Needs_n_players(Sport:symbol, N_players:float)\nNeeds_n_players(\"water polo\", 7).\n.decl Answer()\nAnswer() :- Has_n_children(\"Johnny Carson\", n_children), Needs_n_players(\"water polo\", n_players), n_children >= n_players.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Johnny Carson\", 3).\n.decl Needs_n_players(Sport:symbol, N_players:float)\nNeeds_n_players(\"water polo\", 7).\n.decl Answer()\nAnswer() :- Has_n_children(\"Johnny Carson\", n_children), Needs_n_players(\"water polo\", n_players), n_children >= n_players.\n.output Answer"]}
{"id": 1379, "answer": false, "completion": ".decl Sent_delegation(People:symbol, Event:symbol)\nSent_delegation(\"Cherokee people\", \"oppose allotment\").\n.decl Answer()\nAnswer() :- Sent_delegation(\"Cherokee people\", \"oppose allotment\").\n.output Answer", "completions": [".decl Sent_delegation(People:symbol, Event:symbol)\nSent_delegation(\"Cherokee people\", \"oppose allotment\").\n.decl Answer()\nAnswer() :- Sent_delegation(\"Cherokee people\", \"oppose allotment\").\n.output Answer"]}
{"id": 1380, "answer": true, "completion": ".decl Performs(Doctor:symbol, Procedure:symbol)\nPerforms(\"pediatrician\", \"vaccinations\").\nPerforms(\"gynecologist\", \"abortions\").\n.decl Answer()\nAnswer() :- !Performs(\"pediatrician\", \"abortions\").\n.output Answer", "completions": [".decl Performs(Doctor:symbol, Procedure:symbol)\nPerforms(\"pediatrician\", \"vaccinations\").\nPerforms(\"gynecologist\", \"abortions\").\n.decl Answer()\nAnswer() :- !Performs(\"pediatrician\", \"abortions\").\n.output Answer"]}
{"id": 1381, "answer": true, "completion": ".decl Features(Film:symbol, People:symbol)\nFeatures(\"Brave\", \"Scottish people\").\n.decl Answer()\nAnswer() :- Features(\"Brave\", \"Scottish people\").\n.output Answer", "completions": [".decl Features(Film:symbol, People:symbol)\nFeatures(\"Brave\", \"Scottish people\").\n.decl Answer()\nAnswer() :- Features(\"Brave\", \"Scottish people\").\n.output Answer"]}
{"id": 1382, "answer": false, "completion": ".decl Has_latitude(City:symbol, Latitude:float)\nHas_latitude(\"Cape Town\", -33.93).\n.decl Answer()\nAnswer() :- Has_latitude(\"Cape Town\", latitude), latitude < 0.\n.output Answer", "completions": [".decl Has_latitude(City:symbol, Latitude:float)\nHas_latitude(\"Cape Town\", -33.93).\n.decl Answer()\nAnswer() :- Has_latitude(\"Cape Town\", latitude), latitude < 0.\n.output Answer"]}
{"id": 1383, "answer": true, "completion": ".decl Has_attitude(Group:symbol, Attitude:symbol)\nHas_attitude(\"Metallica\", \"protective\").\n.decl Answer()\nAnswer() :- Has_attitude(\"Metallica\", \"protective\").\n.output Answer", "completions": [".decl Has_attitude(Group:symbol, Attitude:symbol)\nHas_attitude(\"Metallica\", \"protective\").\n.decl Answer()\nAnswer() :- Has_attitude(\"Metallica\", \"protective\").\n.output Answer"]}
{"id": 1384, "answer": false, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"applicant\", \"multiple sclerosis\").\n.decl Rejects_applicant(Academy:symbol, Person:symbol)\nRejects_applicant(\"United States Military Academy\", \"applicant\").\n.decl Answer()\nAnswer() :- Has_disease(\"applicant\", \"multiple sclerosis\"), Rejects_applicant(\"United States Military Academy\", \"applicant\").\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"applicant\", \"multiple sclerosis\").\n.decl Rejects_applicant(Academy:symbol, Person:symbol)\nRejects_applicant(\"United States Military Academy\", \"applicant\").\n.decl Answer()\nAnswer() :- Has_disease(\"applicant\", \"multiple sclerosis\"), Rejects_applicant(\"United States Military Academy\", \"applicant\").\n.output Answer"]}
{"id": 1385, "answer": true, "completion": ".decl Has_separation_of_church_and_state(Country:symbol, Separation:symbol)\nHas_separation_of_church_and_state(\"USA\", \"partial\").\n.decl Answer()\nAnswer() :- Has_separation_of_church_and_state(\"USA\", \"partial\").\n.output Answer", "completions": [".decl Has_separation_of_church_and_state(Country:symbol, Separation:symbol)\nHas_separation_of_church_and_state(\"USA\", \"partial\").\n.decl Answer()\nAnswer() :- Has_separation_of_church_and_state(\"USA\", \"partial\").\n.output Answer"]}
{"id": 1386, "answer": true, "completion": ".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Jesse W. Moore\", \"NASA Snoopy Award\").\n.decl Answer()\nAnswer() :- Has_award(\"Jesse W. Moore\", \"NASA Snoopy Award\").\n.output Answer", "completions": [".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Jesse W. Moore\", \"NASA Snoopy Award\").\n.decl Answer()\nAnswer() :- Has_award(\"Jesse W. Moore\", \"NASA Snoopy Award\").\n.output Answer"]}
{"id": 1387, "answer": true, "completion": ".decl Has_cuisine(City:symbol, Cuisine:symbol)\nHas_cuisine(\"New York City\", \"Raclette\").\n.decl Is_headquarters_city(Organization:symbol, City:symbol)\nIs_headquarters_city(\"YMCA\", \"New York City\").\n.decl Answer()\nAnswer() :- Is_headquarters_city(\"YMCA\", city), Has_cuisine(city, \"Raclette\").\n.output Answer", "completions": [".decl Has_cuisine(City:symbol, Cuisine:symbol)\nHas_cuisine(\"New York City\", \"Raclette\").\n.decl Is_headquarters_city(Organization:symbol, City:symbol)\nIs_headquarters_city(\"YMCA\", \"New York City\").\n.decl Answer()\nAnswer() :- Is_headquarters_city(\"YMCA\", city), Has_cuisine(city, \"Raclette\").\n.output Answer"]}
{"id": 1388, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"ABBA\", \"singing\").\nHas_skill(\"ABBA\", \"dancing\").\n.decl Answer()\nAnswer() :- Has_skill(\"ABBA\", \"singing\"), Has_skill(\"ABBA\", \"dancing\"), !Has_skill(\"ABBA\", \"tennis\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"ABBA\", \"singing\").\nHas_skill(\"ABBA\", \"dancing\").\n.decl Answer()\nAnswer() :- Has_skill(\"ABBA\", \"singing\"), Has_skill(\"ABBA\", \"dancing\"), !Has_skill(\"ABBA\", \"tennis\").\n.output Answer"]}
{"id": 1389, "answer": true, "completion": ".decl Wrestled_in_year(Person:symbol, Year:float)\nWrestled_in_year(\"Stone Cold Steve Austin\", 1989).\nWrestled_in_year(\"Stone Cold Steve Austin\", 1999).\nWrestled_in_year(\"Stone Cold Steve Austin\", 2003).\n.decl Answer()\nAnswer() :- Wrestled_in_year(\"Stone Cold Steve Austin\", year1), Wrestled_in_year(\"Stone Cold Steve Austin\", year2), Wrestled_in_year(\"Stone Cold Steve Austin\", year3), year1 < 2000, year2 >= 2000, year3 >= 2000.\n.output Answer", "completions": [".decl Wrestled_in_year(Person:symbol, Year:float)\nWrestled_in_year(\"Stone Cold Steve Austin\", 1989).\nWrestled_in_year(\"Stone Cold Steve Austin\", 1999).\nWrestled_in_year(\"Stone Cold Steve Austin\", 2003).\n.decl Answer()\nAnswer() :- Wrestled_in_year(\"Stone Cold Steve Austin\", year1), Wrestled_in_year(\"Stone Cold Steve Austin\", year2), Wrestled_in_year(\"Stone Cold Steve Austin\", year3), year1 < 2000, year2 >= 2000, year3 >= 2000.\n.output Answer"]}
{"id": 1390, "answer": true, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"water\", \"viscosity\").\n.decl Answer()\nAnswer() :- Has_property(\"water\", \"viscosity\").\n.output Answer", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"water\", \"viscosity\").\n.decl Answer()\nAnswer() :- Has_property(\"water\", \"viscosity\").\n.output Answer"]}
{"id": 1391, "answer": true, "completion": ".decl Uses(Object:symbol, Group:symbol)\nUses(\"loudspeaker\", \"hearing impaired\").\nUses(\"loudspeaker\", \"non-hearing impaired\").\n.decl Answer()\nAnswer() :- Uses(\"loudspeaker\", \"Gallaudet students\").\n.output Answer", "completions": [".decl Uses(Object:symbol, Group:symbol)\nUses(\"loudspeaker\", \"hearing impaired\").\nUses(\"loudspeaker\", \"non-hearing impaired\").\n.decl Answer()\nAnswer() :- Uses(\"loudspeaker\", \"Gallaudet students\").\n.output Answer"]}
{"id": 1392, "answer": false, "completion": ".decl Uses(Food:symbol, Ingredient:symbol)\nUses(\"hamburger buns\", \"sesame seeds\").\n.decl Answer()\nAnswer() :- Uses(\"hamburger buns\", \"sesame seeds\").\n.output Answer", "completions": [".decl Uses(Food:symbol, Ingredient:symbol)\nUses(\"hamburger buns\", \"sesame seeds\").\n.decl Answer()\nAnswer() :- Uses(\"hamburger buns\", \"sesame seeds\").\n.output Answer"]}
{"id": 1393, "answer": true, "completion": ".decl Is_legal(Action:symbol, Country:symbol)\nIs_legal(\"boxing\", \"Iran\").\nIs_legal(\"stealing\", \"Iran\").\n.decl Answer()\nAnswer() :- Is_legal(\"boxing\", \"Iran\"), !Is_legal(\"stealing\", \"Iran\").\n.output Answer", "completions": [".decl Is_legal(Action:symbol, Country:symbol)\nIs_legal(\"boxing\", \"Iran\").\nIs_legal(\"stealing\", \"Iran\").\n.decl Answer()\nAnswer() :- Is_legal(\"boxing\", \"Iran\"), !Is_legal(\"stealing\", \"Iran\").\n.output Answer"]}
{"id": 1394, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Ahura Mazda\", 1000).\nHas_height(\"Abaddon\", 0).\n.decl Answer()\nAnswer() :- Has_height(\"Ahura Mazda\", height1), Has_height(\"Abaddon\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Ahura Mazda\", 1000).\nHas_height(\"Abaddon\", 0).\n.decl Answer()\nAnswer() :- Has_height(\"Ahura Mazda\", height1), Has_height(\"Abaddon\", height2), height1 > height2.\n.output Answer"]}
{"id": 1395, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"tortoise\", 0.1).\nHas_speed(\"Chicago 'L'\", 50).\n.decl Answer()\nAnswer() :- Has_speed(\"tortoise\", speed1), Has_speed(\"Chicago 'L'\", speed2), speed1 < speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"tortoise\", 0.1).\nHas_speed(\"Chicago 'L'\", 50).\n.decl Answer()\nAnswer() :- Has_speed(\"tortoise\", speed1), Has_speed(\"Chicago 'L'\", speed2), speed1 < speed2.\n.output Answer"]}
{"id": 1396, "answer": true, "completion": ".decl Celebrates(Group:symbol, Event:symbol)\nCelebrates(\"people\", \"Earth Day\").\n.decl Involves(Event:symbol, Activity:symbol)\nInvolves(\"Earth Day\", \"ceremonial tire fire\").\n.decl Answer()\nAnswer() :- Celebrates(\"people\", event), Involves(event, \"ceremonial tire fire\").\n.output Answer", "completions": [".decl Celebrates(Group:symbol, Event:symbol)\nCelebrates(\"people\", \"Earth Day\").\n.decl Involves(Event:symbol, Activity:symbol)\nInvolves(\"Earth Day\", \"ceremonial tire fire\").\n.decl Answer()\nAnswer() :- Celebrates(\"people\", event), Involves(event, \"ceremonial tire fire\").\n.output Answer"]}
{"id": 1397, "answer": true, "completion": ".decl Built_in(Ship:symbol, Country:symbol)\nBuilt_in(\"Brazilian Navy Ship\", \"Brazil\").\nBuilt_in(\"British Navy Ship\", \"Britain\").\n.decl Answer()\nAnswer() :- Built_in(ship, \"Britain\"), ship = \"Brazilian Navy Ship\".\n.output Answer", "completions": [".decl Built_in(Ship:symbol, Country:symbol)\nBuilt_in(\"Brazilian Navy Ship\", \"Brazil\").\nBuilt_in(\"British Navy Ship\", \"Britain\").\n.decl Answer()\nAnswer() :- Built_in(ship, \"Britain\"), ship = \"Brazilian Navy Ship\".\n.output Answer"]}
{"id": 1398, "answer": false, "completion": ".decl Has_name(Character:symbol, Name:symbol)\nHas_name(\"Harry Potter\", \"Harry\").\nHas_name(\"Harry Potter\", \"Florence\").\n.decl Answer()\nAnswer() :- Has_name(\"Harry Potter\", \"Florence\").\n.output Answer", "completions": [".decl Has_name(Character:symbol, Name:symbol)\nHas_name(\"Harry Potter\", \"Harry\").\nHas_name(\"Harry Potter\", \"Florence\").\n.decl Answer()\nAnswer() :- Has_name(\"Harry Potter\", \"Florence\").\n.output Answer"]}
{"id": 1399, "answer": false, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Lil Wayne\", 4).\n.decl Has_seats(Car:symbol, N_seats:float)\nHas_seats(\"Chevrolet Corvette ZR1\", 2).\n.decl Answer()\nAnswer() :- Has_children(\"Lil Wayne\", n_children), Has_seats(\"Chevrolet Corvette ZR1\", n_seats), n_children <= n_seats.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Lil Wayne\", 4).\n.decl Has_seats(Car:symbol, N_seats:float)\nHas_seats(\"Chevrolet Corvette ZR1\", 2).\n.decl Answer()\nAnswer() :- Has_children(\"Lil Wayne\", n_children), Has_seats(\"Chevrolet Corvette ZR1\", n_seats), n_children <= n_seats.\n.output Answer"]}
{"id": 1400, "answer": true, "completion": ".decl Has_resources(Country:symbol, Resources:float)\nHas_resources(\"Iceland\", 10).\nHas_resources(\"Amazon\", 20).\n.decl Answer()\nAnswer() :- Has_resources(\"Iceland\", resources1), Has_resources(\"Amazon\", resources2), resources1 < resources2.\n.output Answer", "completions": [".decl Has_resources(Country:symbol, Resources:float)\nHas_resources(\"Iceland\", 10).\nHas_resources(\"Amazon\", 20).\n.decl Answer()\nAnswer() :- Has_resources(\"Iceland\", resources1), Has_resources(\"Amazon\", resources2), resources1 < resources2.\n.output Answer"]}
{"id": 1401, "answer": true, "completion": ".decl Has_star_rating(Object:symbol, Star_rating:float)\nHas_star_rating(\"good\", 5).\n.decl Answer()\nAnswer() :- Has_star_rating(\"good\", star_rating), star_rating = 5.\n.output Answer", "completions": [".decl Has_star_rating(Object:symbol, Star_rating:float)\nHas_star_rating(\"good\", 5).\n.decl Answer()\nAnswer() :- Has_star_rating(\"good\", star_rating), star_rating = 5.\n.output Answer"]}
{"id": 1402, "answer": true, "completion": ".decl Encouraged_by_government(Culture:symbol, Country:symbol)\nEncouraged_by_government(\"hippie culture\", \"United States\").\n.decl Answer()\nAnswer() :- !Encouraged_by_government(\"hippie culture\", \"Soviet Union\").\n.output Answer", "completions": [".decl Encouraged_by_government(Culture:symbol, Country:symbol)\nEncouraged_by_government(\"hippie culture\", \"United States\").\n.decl Answer()\nAnswer() :- !Encouraged_by_government(\"hippie culture\", \"Soviet Union\").\n.output Answer"]}
{"id": 1403, "answer": true, "completion": ".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"AK-47\", \"Cold War\").\n.decl Answer()\nAnswer() :- !Used_in_war(\"AK-47\", \"Seven Years' War\").\n.output Answer", "completions": [".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"AK-47\", \"Cold War\").\n.decl Answer()\nAnswer() :- !Used_in_war(\"AK-47\", \"Seven Years' War\").\n.output Answer"]}
{"id": 1404, "answer": false, "completion": ".decl Found_in(Object:symbol, Place:symbol)\nFound_in(\"crucifix\", \"Rome\").\n.decl Answer()\nAnswer() :- Found_in(\"crucifix\", \"Karachi\"), !.\n.output Answer", "completions": [".decl Found_in(Object:symbol, Place:symbol)\nFound_in(\"crucifix\", \"Rome\").\n.decl Answer()\nAnswer() :- Found_in(\"crucifix\", \"Karachi\"), !.\n.output Answer"]}
{"id": 1405, "answer": false, "completion": ".decl Has_lived_through(Person:symbol, N_presidents:float)\nHas_lived_through(\"Alan Greenspan\", 13).\n.decl Answer()\nAnswer() :- Has_lived_through(\"Alan Greenspan\", n_presidents), n_presidents >= 13.\n.output Answer", "completions": [".decl Has_lived_through(Person:symbol, N_presidents:float)\nHas_lived_through(\"Alan Greenspan\", 13).\n.decl Answer()\nAnswer() :- Has_lived_through(\"Alan Greenspan\", n_presidents), n_presidents >= 13.\n.output Answer"]}
{"id": 1406, "answer": true, "completion": ".decl Receives(Person:symbol, Newspaper:symbol)\nReceives(\"Boston\", \"Boston Globe\").\n.decl Answer()\nAnswer() :- Receives(\"Boston\", newspaper), newspaper != \"Toronto Star\".\n.output Answer", "completions": [".decl Receives(Person:symbol, Newspaper:symbol)\nReceives(\"Boston\", \"Boston Globe\").\n.decl Answer()\nAnswer() :- Receives(\"Boston\", newspaper), newspaper != \"Toronto Star\".\n.output Answer"]}
{"id": 1407, "answer": true, "completion": ".decl Gets_along(Person_A:symbol, Person_B:symbol)\nGets_along(\"50 Cent\", \"Jeffrey Atkins\").\n.decl Answer()\nAnswer() :- Gets_along(\"50 Cent\", \"Jeffrey Atkins\").\n.output Answer", "completions": [".decl Gets_along(Person_A:symbol, Person_B:symbol)\nGets_along(\"50 Cent\", \"Jeffrey Atkins\").\n.decl Answer()\nAnswer() :- Gets_along(\"50 Cent\", \"Jeffrey Atkins\").\n.output Answer"]}
{"id": 1408, "answer": false, "completion": ".decl Has_disorder(Person:symbol, Disorder:symbol)\nHas_disorder(\"John\", \"DID\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"John\", \"good memory\").\n.decl Answer()\nAnswer() :- Has_disorder(person, \"DID\"), Has_trait(person, \"good memory\").\n.output Answer", "completions": [".decl Has_disorder(Person:symbol, Disorder:symbol)\nHas_disorder(\"John\", \"DID\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"John\", \"good memory\").\n.decl Answer()\nAnswer() :- Has_disorder(person, \"DID\"), Has_trait(person, \"good memory\").\n.output Answer"]}
{"id": 1409, "answer": false, "completion": ".decl Has_CAS_number(Substance:symbol, CAS_number:symbol)\nHas_CAS_number(\"benzyl alcohol\", \"8009-03-8\").\n.decl Is_harmful(Substance:symbol, Condition:symbol)\nIs_harmful(\"benzyl alcohol\", \"rash\").\n.decl Answer()\nAnswer() :- Has_CAS_number(substance, \"8009-03-8\"), Is_harmful(substance, \"rash\").\n.output Answer", "completions": [".decl Has_CAS_number(Substance:symbol, CAS_number:symbol)\nHas_CAS_number(\"benzyl alcohol\", \"8009-03-8\").\n.decl Is_harmful(Substance:symbol, Condition:symbol)\nIs_harmful(\"benzyl alcohol\", \"rash\").\n.decl Answer()\nAnswer() :- Has_CAS_number(substance, \"8009-03-8\"), Is_harmful(substance, \"rash\").\n.output Answer"]}
{"id": 1410, "answer": false, "completion": ".decl Found_in(Animal:symbol, Location:symbol)\nFound_in(\"wolverine\", \"North America\").\n.decl Answer()\nAnswer() :- Found_in(\"wolverine\", location), location != \"Miami\".\n.output Answer", "completions": [".decl Found_in(Animal:symbol, Location:symbol)\nFound_in(\"wolverine\", \"North America\").\n.decl Answer()\nAnswer() :- Found_in(\"wolverine\", location), location != \"Miami\".\n.output Answer"]}
{"id": 1411, "answer": false, "completion": ".decl Album_release_date(Album:symbol, Date:symbol)\nAlbum_release_date(\"Doggystyle\", \"November 23, 1993\").\n.decl Is_weekend(Date:symbol, Answer:symbol)\nIs_weekend(\"November 23, 1993\", \"no\").\n.decl Answer()\nAnswer() :- Album_release_date(\"Doggystyle\", date), Is_weekend(date, answer), answer = \"no\".\n.output Answer", "completions": [".decl Album_release_date(Album:symbol, Date:symbol)\nAlbum_release_date(\"Doggystyle\", \"November 23, 1993\").\n.decl Is_weekend(Date:symbol, Answer:symbol)\nIs_weekend(\"November 23, 1993\", \"no\").\n.decl Answer()\nAnswer() :- Album_release_date(\"Doggystyle\", date), Is_weekend(date, answer), answer = \"no\".\n.output Answer"]}
{"id": 1412, "answer": true, "completion": ".decl Is_in_region(Person:symbol, Region:symbol)\nIs_in_region(\"person\", \"Amazonas\").\n.decl Is_dangerous(Region:symbol, Risk:symbol)\nIs_dangerous(\"Amazonas\", \"high\").\n.decl Answer()\nAnswer() :- Is_in_region(\"person\", region), Is_dangerous(region, \"high\").\n.output Answer", "completions": [".decl Is_in_region(Person:symbol, Region:symbol)\nIs_in_region(\"person\", \"Amazonas\").\n.decl Is_dangerous(Region:symbol, Risk:symbol)\nIs_dangerous(\"Amazonas\", \"high\").\n.decl Answer()\nAnswer() :- Is_in_region(\"person\", region), Is_dangerous(region, \"high\").\n.output Answer"]}
{"id": 1413, "answer": true, "completion": ".decl Grows_in(Crop:symbol, State:symbol)\nGrows_in(\"cauliflower\", \"Arizona\").\nGrows_in(\"cauliflower\", \"California\").\n.decl Has_area(State:symbol, Area:float)\nHas_area(\"Arizona\", 295234).\nHas_area(\"California\", 423967).\n.decl Answer()\nAnswer() :- Grows_in(\"cauliflower\", state1), Grows_in(\"cauliflower\", state2), Has_area(state1, area1), Has_area(state2, area2), area1 > area2.\n.output Answer", "completions": [".decl Grows_in(Crop:symbol, State:symbol)\nGrows_in(\"cauliflower\", \"Arizona\").\nGrows_in(\"cauliflower\", \"California\").\n.decl Has_area(State:symbol, Area:float)\nHas_area(\"Arizona\", 295234).\nHas_area(\"California\", 423967).\n.decl Answer()\nAnswer() :- Grows_in(\"cauliflower\", state1), Grows_in(\"cauliflower\", state2), Has_area(state1, area1), Has_area(state2, area2), area1 > area2.\n.output Answer"]}
{"id": 1414, "answer": true, "completion": ".decl Is_eaten(Food:symbol, Context:symbol)\nIs_eaten(\"horseradish\", \"religious\").\n.decl Answer()\nAnswer() :- Is_eaten(\"horseradish\", \"religious\").\n.output Answer", "completions": [".decl Is_eaten(Food:symbol, Context:symbol)\nIs_eaten(\"horseradish\", \"religious\").\n.decl Answer()\nAnswer() :- Is_eaten(\"horseradish\", \"religious\").\n.output Answer"]}
{"id": 1415, "answer": true, "completion": ".decl Follows(Person:symbol, Artist:symbol)\nFollows(\"Katy Perry\", \"gospel music\").\n.decl Has_n_fans(Artist:symbol, N_fans:float)\nHas_n_fans(\"Katy Perry\", 100).\n.decl Answer()\nAnswer() :- Follows(person, \"Katy Perry\"), Has_n_fans(\"Katy Perry\", n_fans), n_fans > 50.\n.output Answer", "completions": [".decl Follows(Person:symbol, Artist:symbol)\nFollows(\"Katy Perry\", \"gospel music\").\n.decl Has_n_fans(Artist:symbol, N_fans:float)\nHas_n_fans(\"Katy Perry\", 100).\n.decl Answer()\nAnswer() :- Follows(person, \"Katy Perry\"), Has_n_fans(\"Katy Perry\", n_fans), n_fans > 50.\n.output Answer"]}
{"id": 1416, "answer": true, "completion": ".decl Relies_on(Person:symbol, Substance:symbol)\nRelies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Relies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.output Answer", "completions": [".decl Relies_on(Person:symbol, Substance:symbol)\nRelies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Relies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.output Answer"]}
{"id": 1417, "answer": true, "completion": ".decl Has_sensitivity(Animal:symbol, Sensitivity:symbol)\nHas_sensitivity(\"common carp\", \"high\").\n.decl Answer()\nAnswer() :- Has_sensitivity(\"common carp\", sensitivity), sensitivity = \"high\".\n.output Answer", "completions": [".decl Has_sensitivity(Animal:symbol, Sensitivity:symbol)\nHas_sensitivity(\"common carp\", \"high\").\n.decl Answer()\nAnswer() :- Has_sensitivity(\"common carp\", sensitivity), sensitivity = \"high\".\n.output Answer"]}
{"id": 1418, "answer": true, "completion": ".decl Costs(Item:symbol, Price:float)\nCosts(\"Netflix subscription\", 20).\nCosts(\"Amazon share\", 1).\n.decl Answer()\nAnswer() :- Costs(\"Netflix subscription\", price1), Costs(\"Amazon share\", price2), price1 <= price2 * 20.\n.output Answer", "completions": [".decl Costs(Item:symbol, Price:float)\nCosts(\"Netflix subscription\", 20).\nCosts(\"Amazon share\", 1).\n.decl Answer()\nAnswer() :- Costs(\"Netflix subscription\", price1), Costs(\"Amazon share\", price2), price1 <= price2 * 20.\n.output Answer"]}
{"id": 1419, "answer": false, "completion": ".decl Kills_with(Gladiator:symbol, Weapon:symbol)\nKills_with(\"gladiator\", \"sword\").\n.decl Answer()\nAnswer() :- !Kills_with(\"gladiator\", \"shotgun\").\n.output Answer", "completions": [".decl Kills_with(Gladiator:symbol, Weapon:symbol)\nKills_with(\"gladiator\", \"sword\").\n.decl Answer()\nAnswer() :- !Kills_with(\"gladiator\", \"shotgun\").\n.output Answer"]}
{"id": 1420, "answer": true, "completion": ".decl Lives_in(Creature:symbol, Location:symbol)\nLives_in(\"Mediterranean Sea creature\", \"Mediterranean Sea\").\n.decl Killed_by(Person:symbol, Creature:symbol)\n.decl Answer()\nAnswer() :- Lives_in(creature, \"Mediterranean Sea\"), Killed_by(\"Steve Irwin\", creature).\n.output Answer", "completions": [".decl Lives_in(Creature:symbol, Location:symbol)\nLives_in(\"Mediterranean Sea creature\", \"Mediterranean Sea\").\n.decl Killed_by(Person:symbol, Creature:symbol)\n.decl Answer()\nAnswer() :- Lives_in(creature, \"Mediterranean Sea\"), Killed_by(\"Steve Irwin\", creature).\n.output Answer"]}
{"id": 1421, "answer": false, "completion": ".decl Takes_time(Event:symbol, Time:float)\nTakes_time(\"E6000 cure\", 5).\nTakes_time(\"hoverboard finishes the Daytona 500\", 500).\n.decl Answer()\nAnswer() :- Takes_time(\"E6000 cure\", time1), Takes_time(\"hoverboard finishes the Daytona 500\", time2), time1 < time2.\n.output Answer", "completions": [".decl Takes_time(Event:symbol, Time:float)\nTakes_time(\"E6000 cure\", 5).\nTakes_time(\"hoverboard finishes the Daytona 500\", 500).\n.decl Answer()\nAnswer() :- Takes_time(\"E6000 cure\", time1), Takes_time(\"hoverboard finishes the Daytona 500\", time2), time1 < time2.\n.output Answer"]}
{"id": 1422, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Cosmic Girls\", 13).\n.decl Requires_n_players(Game:symbol, N_players:float)\nRequires_n_players(\"League of Legends\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Cosmic Girls\", n_members), Requires_n_players(\"League of Legends\", n_players), n_members >= n_players.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Cosmic Girls\", 13).\n.decl Requires_n_players(Game:symbol, N_players:float)\nRequires_n_players(\"League of Legends\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Cosmic Girls\", n_members), Requires_n_players(\"League of Legends\", n_players), n_members >= n_players.\n.output Answer"]}
{"id": 1423, "answer": true, "completion": ".decl Is_relevant_to(Event:symbol, Plot:symbol)\nIs_relevant_to(\"Y2K\", \"The Godfather\").\n.decl Answer()\nAnswer() :- Is_relevant_to(\"Y2K\", \"The Godfather\").\n.output Answer", "completions": [".decl Is_relevant_to(Event:symbol, Plot:symbol)\nIs_relevant_to(\"Y2K\", \"The Godfather\").\n.decl Answer()\nAnswer() :- Is_relevant_to(\"Y2K\", \"The Godfather\").\n.output Answer"]}
{"id": 1424, "answer": true, "completion": ".decl Airs_at(Show:symbol, Time:symbol)\nAirs_at(\"The Tonight Show Starring Jimmy Fallon\", \"11:35 PM EST\").\n.decl Moonset_at(Time:symbol)\nMoonset_at(\"10:45 PM EST\").\n.decl Answer()\nAnswer() :- Airs_at(\"The Tonight Show Starring Jimmy Fallon\", time1), Moonset_at(time2), time1 > time2.\n.output Answer", "completions": [".decl Airs_at(Show:symbol, Time:symbol)\nAirs_at(\"The Tonight Show Starring Jimmy Fallon\", \"11:35 PM EST\").\n.decl Moonset_at(Time:symbol)\nMoonset_at(\"10:45 PM EST\").\n.decl Answer()\nAnswer() :- Airs_at(\"The Tonight Show Starring Jimmy Fallon\", time1), Moonset_at(time2), time1 > time2.\n.output Answer"]}
{"id": 1425, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"student of the class of 2017\", 17).\n.decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"9/11\", 2001).\n.decl Answer()\nAnswer() :- Has_age(\"student of the class of 2017\", age), Happened_in_year(\"9/11\", year), age + 2001 < year.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"student of the class of 2017\", 17).\n.decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"9/11\", 2001).\n.decl Answer()\nAnswer() :- Has_age(\"student of the class of 2017\", age), Happened_in_year(\"9/11\", year), age + 2001 < year.\n.output Answer"]}
{"id": 1426, "answer": false, "completion": ".decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"Janet Jackson\", \"ham\").\n.decl Has_ingredient(Dish:symbol, Ingredient:symbol)\nHas_ingredient(\"macaroni and cheese\", \"ham\").\n.decl Answer()\nAnswer() :- Avoids(\"Janet Jackson\", food), Has_ingredient(dish, food).\n.output Answer", "completions": [".decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"Janet Jackson\", \"ham\").\n.decl Has_ingredient(Dish:symbol, Ingredient:symbol)\nHas_ingredient(\"macaroni and cheese\", \"ham\").\n.decl Answer()\nAnswer() :- Avoids(\"Janet Jackson\", food), Has_ingredient(dish, food).\n.output Answer"]}
{"id": 1427, "answer": false, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"pea pod\", 0.1).\nHas_area(\"chess board\", 64).\n.decl Answer()\nAnswer() :- Has_area(\"pea pod\", area1), Has_area(\"chess board\", area2), 20 * area1 >= area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"pea pod\", 0.1).\nHas_area(\"chess board\", 64).\n.decl Answer()\nAnswer() :- Has_area(\"pea pod\", area1), Has_area(\"chess board\", area2), 20 * area1 >= area2.\n.output Answer"]}
{"id": 1428, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"footprints on the moon\", 1969).\n.decl Answer()\nAnswer() :- !Happens_in_year(\"footprints on the moon\", 1960).\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"footprints on the moon\", 1969).\n.decl Answer()\nAnswer() :- !Happens_in_year(\"footprints on the moon\", 1960).\n.output Answer"]}
{"id": 1429, "answer": false, "completion": ".decl Has_ability(Organization:symbol, Ability:symbol)\nHas_ability(\"Supreme Court of Canada\", \"legal decision-making\").\n.decl Answer()\nAnswer() :- !Has_ability(\"Supreme Court of Canada\", \"Lucha trios match\").\n.output Answer", "completions": [".decl Has_ability(Organization:symbol, Ability:symbol)\nHas_ability(\"Supreme Court of Canada\", \"legal decision-making\").\n.decl Answer()\nAnswer() :- !Has_ability(\"Supreme Court of Canada\", \"Lucha trios match\").\n.output Answer"]}
{"id": 1430, "answer": true, "completion": ".decl Has_n_readers(Publication:symbol, N_readers:float)\nHas_n_readers(\"Atlantic\", 5000000).\n.decl Has_n_soldiers(Battalion:symbol, N_soldiers:float)\nHas_n_soldiers(\"battalion\", 1000).\n.decl Answer()\nAnswer() :- Has_n_readers(\"Atlantic\", n_readers), Has_n_soldiers(\"battalion\", n_soldiers), n_readers >= n_soldiers * 500.\n.output Answer", "completions": [".decl Has_n_readers(Publication:symbol, N_readers:float)\nHas_n_readers(\"Atlantic\", 5000000).\n.decl Has_n_soldiers(Battalion:symbol, N_soldiers:float)\nHas_n_soldiers(\"battalion\", 1000).\n.decl Answer()\nAnswer() :- Has_n_readers(\"Atlantic\", n_readers), Has_n_soldiers(\"battalion\", n_soldiers), n_readers >= n_soldiers * 500.\n.output Answer"]}
{"id": 1431, "answer": true, "completion": ".decl Occurs_in_time(Event:symbol, Time:symbol)\nOccurs_in_time(\"French Revolution\", \"1789\").\n.decl Has_technology(Time:symbol, Technology:symbol)\nHas_technology(\"1789\", \"television\").\n.decl Answer()\nAnswer() :- Occurs_in_time(\"French Revolution\", time), Has_technology(time, \"television\").\n.output Answer", "completions": [".decl Occurs_in_time(Event:symbol, Time:symbol)\nOccurs_in_time(\"French Revolution\", \"1789\").\n.decl Has_technology(Time:symbol, Technology:symbol)\nHas_technology(\"1789\", \"television\").\n.decl Answer()\nAnswer() :- Occurs_in_time(\"French Revolution\", time), Has_technology(time, \"television\").\n.output Answer"]}
{"id": 1432, "answer": true, "completion": ".decl Has_tragedy(Person:symbol, Tragedy:symbol)\nHas_tragedy(\"Dr. Seuss\", \"none\").\n.decl Answer()\nAnswer() :- Has_tragedy(\"Dr. Seuss\", \"none\").\n.output Answer", "completions": [".decl Has_tragedy(Person:symbol, Tragedy:symbol)\nHas_tragedy(\"Dr. Seuss\", \"none\").\n.decl Answer()\nAnswer() :- Has_tragedy(\"Dr. Seuss\", \"none\").\n.output Answer"]}
{"id": 1433, "answer": true, "completion": ".decl Has_type(Tree:symbol, Type:symbol)\nHas_type(\"Christmas tree\", \"evergreen\").\nHas_type(\"deciduous tree\", \"deciduous\").\n.decl Answer()\nAnswer() :- Has_type(\"Christmas tree\", type1), Has_type(\"deciduous tree\", type2), type1 != type2.\n.output Answer", "completions": [".decl Has_type(Tree:symbol, Type:symbol)\nHas_type(\"Christmas tree\", \"evergreen\").\nHas_type(\"deciduous tree\", \"deciduous\").\n.decl Answer()\nAnswer() :- Has_type(\"Christmas tree\", type1), Has_type(\"deciduous tree\", type2), type1 != type2.\n.output Answer"]}
{"id": 1434, "answer": false, "completion": ".decl Produces(Animal:symbol, Product:symbol)\nProduces(\"cow\", \"milk\").\n.decl Answer()\nAnswer() :- !Produces(\"cow\", \"Harvey Milk\").\n.output Answer", "completions": [".decl Produces(Animal:symbol, Product:symbol)\nProduces(\"cow\", \"milk\").\n.decl Answer()\nAnswer() :- !Produces(\"cow\", \"Harvey Milk\").\n.output Answer"]}
{"id": 1435, "answer": true, "completion": ".decl Has_protagonist(Song:symbol, Protagonist:symbol)\nHas_protagonist(\"Song of Roland\", \"Roland\").\n.decl Has_saga(Group:symbol, Saga:symbol)\nHas_saga(\"Vikings\", \"Saga of Ragnar Lodbrok\").\n.decl Friendly_with(Person_A:symbol, Person_B:symbol)\nFriendly_with(\"Roland\", \"Vikings\").\n.decl Answer()\nAnswer() :- Has_protagonist(\"Song of Roland\", protagonist), Has_saga(group, saga), Friendly_with(protagonist, group).\n.output Answer", "completions": [".decl Has_protagonist(Song:symbol, Protagonist:symbol)\nHas_protagonist(\"Song of Roland\", \"Roland\").\n.decl Has_saga(Group:symbol, Saga:symbol)\nHas_saga(\"Vikings\", \"Saga of Ragnar Lodbrok\").\n.decl Friendly_with(Person_A:symbol, Person_B:symbol)\nFriendly_with(\"Roland\", \"Vikings\").\n.decl Answer()\nAnswer() :- Has_protagonist(\"Song of Roland\", protagonist), Has_saga(group, saga), Friendly_with(protagonist, group).\n.output Answer"]}
{"id": 1436, "answer": true, "completion": ".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"cucumber\", \"smooth\").\n.decl Answer()\nAnswer() :- Has_texture(object, \"smooth\"), !Has_texture(object, texture2), texture2 != \"smooth\".\n.output Answer", "completions": [".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"cucumber\", \"smooth\").\n.decl Answer()\nAnswer() :- Has_texture(object, \"smooth\"), !Has_texture(object, texture2), texture2 != \"smooth\".\n.output Answer"]}
{"id": 1437, "answer": false, "completion": ".decl Used_in_country(Currency:symbol, Country:symbol)\nUsed_in_country(\"Euro\", \"Germany\").\n.decl Answer()\nAnswer() :- Used_in_country(\"Euro\", \"Prussia\").\n.output Answer", "completions": [".decl Used_in_country(Currency:symbol, Country:symbol)\nUsed_in_country(\"Euro\", \"Germany\").\n.decl Answer()\nAnswer() :- Used_in_country(\"Euro\", \"Prussia\").\n.output Answer"]}
{"id": 1438, "answer": false, "completion": ".decl Has_trait(Character:symbol, Trait:symbol)\nHas_trait(\"Bugs Bunny\", \"carrot\").\n.decl Is_root_vegetable(Object:symbol)\nIs_root_vegetable(\"carrot\").\n.decl Answer()\nAnswer() :- Has_trait(\"Bugs Bunny\", trait), Is_root_vegetable(trait).\n.output Answer", "completions": [".decl Has_trait(Character:symbol, Trait:symbol)\nHas_trait(\"Bugs Bunny\", \"carrot\").\n.decl Is_root_vegetable(Object:symbol)\nIs_root_vegetable(\"carrot\").\n.decl Answer()\nAnswer() :- Has_trait(\"Bugs Bunny\", trait), Is_root_vegetable(trait).\n.output Answer"]}
{"id": 1439, "answer": false, "completion": ".decl Has_rule(Code:symbol, Rule:symbol)\nHas_rule(\"Hammurabi's Code\", \"an eye for an eye\").\nHas_rule(\"Christian's Golden Rule\", \"do unto others as you would have them do unto you\").\n.decl Answer()\nAnswer() :- Has_rule(\"Hammurabi's Code\", rule1), Has_rule(\"Christian's Golden Rule\", rule2), rule1 != rule2.\n.output Answer", "completions": [".decl Has_rule(Code:symbol, Rule:symbol)\nHas_rule(\"Hammurabi's Code\", \"an eye for an eye\").\nHas_rule(\"Christian's Golden Rule\", \"do unto others as you would have them do unto you\").\n.decl Answer()\nAnswer() :- Has_rule(\"Hammurabi's Code\", rule1), Has_rule(\"Christian's Golden Rule\", rule2), rule1 != rule2.\n.output Answer"]}
{"id": 1440, "answer": true, "completion": ".decl Originated_in_century(Religion:symbol, Century:float)\nOriginated_in_century(\"Hinduism\", 1).\nOriginated_in_century(\"Buddhism\", 6).\nOriginated_in_century(\"Jainism\", 6).\n.decl Sacred_in_region(Religion:symbol, Region:symbol)\nSacred_in_region(\"Hinduism\", \"Himalayas\").\nSacred_in_region(\"Buddhism\", \"Himalayas\").\nSacred_in_region(\"Jainism\", \"Himalayas\").\n.decl Answer()\nAnswer() :- Sacred_in_region(religion, \"Himalayas\"), Originated_in_century(religion, 19).\n.output Answer", "completions": [".decl Originated_in_century(Religion:symbol, Century:float)\nOriginated_in_century(\"Hinduism\", 1).\nOriginated_in_century(\"Buddhism\", 6).\nOriginated_in_century(\"Jainism\", 6).\n.decl Sacred_in_region(Religion:symbol, Region:symbol)\nSacred_in_region(\"Hinduism\", \"Himalayas\").\nSacred_in_region(\"Buddhism\", \"Himalayas\").\nSacred_in_region(\"Jainism\", \"Himalayas\").\n.decl Answer()\nAnswer() :- Sacred_in_region(religion, \"Himalayas\"), Originated_in_century(religion, 19).\n.output Answer"]}
{"id": 1441, "answer": true, "completion": ".decl Believes_in(Group:symbol, Text:symbol)\nBelieves_in(\"Jewish people\", \"Ten Commandments\").\n.decl Answer()\nAnswer() :- !Believes_in(\"Jewish people\", \"Ten Commandments\").\n.output Answer", "completions": [".decl Believes_in(Group:symbol, Text:symbol)\nBelieves_in(\"Jewish people\", \"Ten Commandments\").\n.decl Answer()\nAnswer() :- !Believes_in(\"Jewish people\", \"Ten Commandments\").\n.output Answer"]}
{"id": 1442, "answer": true, "completion": ".decl Has_function(Object:symbol, Function:symbol)\nHas_function(\"teddy bear\", \"hugging\").\n.decl Answer()\nAnswer() :- !Has_function(\"teddy bear\", \"surveillance\").\n.output Answer", "completions": [".decl Has_function(Object:symbol, Function:symbol)\nHas_function(\"teddy bear\", \"hugging\").\n.decl Answer()\nAnswer() :- !Has_function(\"teddy bear\", \"surveillance\").\n.output Answer"]}
{"id": 1443, "answer": true, "completion": ".decl Has_pay(Person:symbol, Pay:float)\nHas_pay(\"retail associate\", 50000).\nHas_pay(\"retailer's CEO\", 200000).\n.decl Answer()\nAnswer() :- Has_pay(\"retail associate\", pay1), Has_pay(\"retailer's CEO\", pay2), pay1 < pay2.\n.output Answer", "completions": [".decl Has_pay(Person:symbol, Pay:float)\nHas_pay(\"retail associate\", 50000).\nHas_pay(\"retailer's CEO\", 200000).\n.decl Answer()\nAnswer() :- Has_pay(\"retail associate\", pay1), Has_pay(\"retailer's CEO\", pay2), pay1 < pay2.\n.output Answer"]}
{"id": 1444, "answer": false, "completion": ".decl Has_members(Group:symbol, Members:symbol)\nHas_members(\"Tame Impala's studio band\", \"Kevin Parker\").\nHas_members(\"Tame Impala's studio band\", \"Jay Watson\").\nHas_members(\"Tame Impala's studio band\", \"Dominic Simper\").\n.decl Can_play(Group:symbol, Game:symbol)\nCan_play(\"Tame Impala's studio band\", \"Hot Potato\").\n.decl Answer()\nAnswer() :- Can_play(\"Tame Impala's studio band\", \"Hot Potato\").\n.output Answer", "completions": [".decl Has_members(Group:symbol, Members:symbol)\nHas_members(\"Tame Impala's studio band\", \"Kevin Parker\").\nHas_members(\"Tame Impala's studio band\", \"Jay Watson\").\nHas_members(\"Tame Impala's studio band\", \"Dominic Simper\").\n.decl Can_play(Group:symbol, Game:symbol)\nCan_play(\"Tame Impala's studio band\", \"Hot Potato\").\n.decl Answer()\nAnswer() :- Can_play(\"Tame Impala's studio band\", \"Hot Potato\").\n.output Answer"]}
{"id": 1445, "answer": false, "completion": ".decl Has_lactic_acid(Body:symbol, Lactic_acid:float)\nHas_lactic_acid(\"body\", 0.2).\n.decl Answer()\nAnswer() :- Has_lactic_acid(\"body\", lactic_acid), lactic_acid > 0.1.\n.output Answer", "completions": [".decl Has_lactic_acid(Body:symbol, Lactic_acid:float)\nHas_lactic_acid(\"body\", 0.2).\n.decl Answer()\nAnswer() :- Has_lactic_acid(\"body\", lactic_acid), lactic_acid > 0.1.\n.output Answer"]}
{"id": 1446, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"President Trump's first term\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Tokyo Tower repainted\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Tokyo Tower repainted\", n_years1), Last_n_years(\"President Trump's first term\", n_years2), n_years1 > n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"President Trump's first term\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Tokyo Tower repainted\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Tokyo Tower repainted\", n_years1), Last_n_years(\"President Trump's first term\", n_years2), n_years1 > n_years2.\n.output Answer"]}
{"id": 1447, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Apollo 15 crew\", \"space exploration\").\n.decl Answer()\nAnswer() :- !Has_skill(\"Apollo 15 crew\", \"unicycle riding\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Apollo 15 crew\", \"space exploration\").\n.decl Answer()\nAnswer() :- !Has_skill(\"Apollo 15 crew\", \"unicycle riding\").\n.output Answer"]}
{"id": 1448, "answer": false, "completion": ".decl Is_okay(Action:symbol)\nIs_okay(\"telling the truth\").\n.decl Answer()\nAnswer() :- !Is_okay(\"lying\"), Is_okay(\"telling the truth\").\n.output Answer", "completions": [".decl Is_okay(Action:symbol)\nIs_okay(\"telling the truth\").\n.decl Answer()\nAnswer() :- !Is_okay(\"lying\"), Is_okay(\"telling the truth\").\n.output Answer"]}
{"id": 1449, "answer": false, "completion": ".decl Has_complexity(Language:symbol, Complexity:symbol)\nHas_complexity(\"Newspeak\", \"very straightforward\").\n.decl Answer()\nAnswer() :- Has_complexity(\"Newspeak\", complexity).\n.output Answer", "completions": [".decl Has_complexity(Language:symbol, Complexity:symbol)\nHas_complexity(\"Newspeak\", \"very straightforward\").\n.decl Answer()\nAnswer() :- Has_complexity(\"Newspeak\", complexity).\n.output Answer"]}
{"id": 1450, "answer": true, "completion": ".decl Has_strength(Group:symbol, Strength:float)\nHas_strength(\"Snow White dwarves\", 10).\nHas_strength(\"The Hobbit dwarves\", 8).\n.decl Answer()\nAnswer() :- Has_strength(\"Snow White dwarves\", strength1), Has_strength(\"The Hobbit dwarves\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Group:symbol, Strength:float)\nHas_strength(\"Snow White dwarves\", 10).\nHas_strength(\"The Hobbit dwarves\", 8).\n.decl Answer()\nAnswer() :- Has_strength(\"Snow White dwarves\", strength1), Has_strength(\"The Hobbit dwarves\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 1451, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Unity\", 182).\nHas_height(\"Statue of Liberty\", 93).\nHas_height(\"Lighthouse of Alexandria\", 137).\n.decl Answer()\nAnswer() :- Has_height(\"Statue of Unity\", height1), Has_height(\"Statue of Liberty\", height2), Has_height(\"Lighthouse of Alexandria\", height3), height1 > height2, height1 < height3.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Unity\", 182).\nHas_height(\"Statue of Liberty\", 93).\nHas_height(\"Lighthouse of Alexandria\", 137).\n.decl Answer()\nAnswer() :- Has_height(\"Statue of Unity\", height1), Has_height(\"Statue of Liberty\", height2), Has_height(\"Lighthouse of Alexandria\", height3), height1 > height2, height1 < height3.\n.output Answer"]}
{"id": 1452, "answer": false, "completion": ".decl Lasts_at_least_n_months(Event:symbol, N_months:float)\nLasts_at_least_n_months(\"Football War\", 1).\n.decl Answer()\nAnswer() :- Lasts_at_least_n_months(\"Football War\", n_months).\n.output Answer", "completions": [".decl Lasts_at_least_n_months(Event:symbol, N_months:float)\nLasts_at_least_n_months(\"Football War\", 1).\n.decl Answer()\nAnswer() :- Lasts_at_least_n_months(\"Football War\", n_months).\n.output Answer"]}
{"id": 1453, "answer": true, "completion": ".decl Has_texture(Fruit:symbol, Texture:symbol)\nHas_texture(\"peach\", \"firm\").\n.decl Answer()\nAnswer() :- Has_texture(\"peach\", \"firm\").\n.output Answer", "completions": [".decl Has_texture(Fruit:symbol, Texture:symbol)\nHas_texture(\"peach\", \"firm\").\n.decl Answer()\nAnswer() :- Has_texture(\"peach\", \"firm\").\n.output Answer"]}
{"id": 1454, "answer": false, "completion": ".decl Has_reference(Person:symbol, Reference:symbol)\nHas_reference(\"Adam Sandler\", \"Cole Spouse\").\n.decl Has_doll(Person:symbol, Doll:symbol)\nHas_doll(\"Adam Sandler\", \"scuba man doll\").\n.decl Answer()\nAnswer() :- Has_reference(\"Adam Sandler\", reference), Has_doll(\"Adam Sandler\", doll).\n.output Answer", "completions": [".decl Has_reference(Person:symbol, Reference:symbol)\nHas_reference(\"Adam Sandler\", \"Cole Spouse\").\n.decl Has_doll(Person:symbol, Doll:symbol)\nHas_doll(\"Adam Sandler\", \"scuba man doll\").\n.decl Answer()\nAnswer() :- Has_reference(\"Adam Sandler\", reference), Has_doll(\"Adam Sandler\", doll).\n.output Answer"]}
{"id": 1455, "answer": false, "completion": ".decl Is_considered_by(Person:symbol, Organization:symbol)\nIs_considered_by(\"Lhamo Thondup\", \"Catholic Church\").\n.decl Answer()\nAnswer() :- Is_considered_by(\"Lhamo Thondup\", \"Catholic Church\").\n.output Answer", "completions": [".decl Is_considered_by(Person:symbol, Organization:symbol)\nIs_considered_by(\"Lhamo Thondup\", \"Catholic Church\").\n.decl Answer()\nAnswer() :- Is_considered_by(\"Lhamo Thondup\", \"Catholic Church\").\n.output Answer"]}
{"id": 1456, "answer": false, "completion": ".decl Affects(Object:symbol, Person:symbol)\nAffects(\"jalapeno peppers\", \"children\").\n.decl Answer()\nAnswer() :- Affects(\"jalapeno peppers\", \"children\").\n.output Answer", "completions": [".decl Affects(Object:symbol, Person:symbol)\nAffects(\"jalapeno peppers\", \"children\").\n.decl Answer()\nAnswer() :- Affects(\"jalapeno peppers\", \"children\").\n.output Answer"]}
{"id": 1457, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Rede Globo anchor\", \"Portuguese\").\n.decl Answer()\nAnswer() :- !Speaks(\"Rede Globo anchor\", \"Japanese\").\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Rede Globo anchor\", \"Portuguese\").\n.decl Answer()\nAnswer() :- !Speaks(\"Rede Globo anchor\", \"Japanese\").\n.output Answer"]}
{"id": 1458, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"harbor seal\", \"Pacific Ocean\").\n.decl Answer()\nAnswer() :- !Lives_in(\"harbor seal\", \"Washington DC\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"harbor seal\", \"Pacific Ocean\").\n.decl Answer()\nAnswer() :- !Lives_in(\"harbor seal\", \"Washington DC\").\n.output Answer"]}
{"id": 1459, "answer": true, "completion": ".decl Has_horsepower(Car:symbol, Horsepower:float)\nHas_horsepower(\"2020 Toyota Supra\", 382).\n.decl Has_min_horsepower(Rally:symbol, Min_horsepower:float)\nHas_min_horsepower(\"Nascar rally\", 500).\n.decl Answer()\nAnswer() :- Has_horsepower(\"2020 Toyota Supra\", horsepower), Has_min_horsepower(\"Nascar rally\", min_horsepower), horsepower < min_horsepower.\n.output Answer", "completions": [".decl Has_horsepower(Car:symbol, Horsepower:float)\nHas_horsepower(\"2020 Toyota Supra\", 382).\n.decl Has_min_horsepower(Rally:symbol, Min_horsepower:float)\nHas_min_horsepower(\"Nascar rally\", 500).\n.decl Answer()\nAnswer() :- Has_horsepower(\"2020 Toyota Supra\", horsepower), Has_min_horsepower(\"Nascar rally\", min_horsepower), horsepower < min_horsepower.\n.output Answer"]}
{"id": 1460, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"12-lb roast turkey\", 12).\n.decl Has_eating_speed(Person:symbol, Eating_speed:float)\nHas_eating_speed(\"human\", 1).\n.decl Answer()\nAnswer() :- Has_weight(\"12-lb roast turkey\", weight), Has_eating_speed(\"human\", speed), weight/speed <= 1.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"12-lb roast turkey\", 12).\n.decl Has_eating_speed(Person:symbol, Eating_speed:float)\nHas_eating_speed(\"human\", 1).\n.decl Answer()\nAnswer() :- Has_weight(\"12-lb roast turkey\", weight), Has_eating_speed(\"human\", speed), weight/speed <= 1.\n.output Answer"]}
{"id": 1461, "answer": true, "completion": ".decl Does_action(Person:symbol, Action:symbol)\nDoes_action(\"Zorro\", \"carve his name into items\").\n.decl Answer()\nAnswer() :- Does_action(\"Zorro\", \"carve his name into items\").\n.output Answer", "completions": [".decl Does_action(Person:symbol, Action:symbol)\nDoes_action(\"Zorro\", \"carve his name into items\").\n.decl Answer()\nAnswer() :- Does_action(\"Zorro\", \"carve his name into items\").\n.output Answer"]}
{"id": 1462, "answer": false, "completion": ".decl Can_hold(Building:symbol, Event:symbol)\nCan_hold(\"Viper Room\", \"concert\").\n.decl Answer()\nAnswer() :- Can_hold(\"Viper Room\", \"concert\"), Can_hold(\"National Diet building\", \"concert\").\n.output Answer", "completions": [".decl Can_hold(Building:symbol, Event:symbol)\nCan_hold(\"Viper Room\", \"concert\").\n.decl Answer()\nAnswer() :- Can_hold(\"Viper Room\", \"concert\"), Can_hold(\"National Diet building\", \"concert\").\n.output Answer"]}
{"id": 1463, "answer": false, "completion": ".decl Considered_as_substitute(Food_A:symbol, Food_B:symbol)\nConsidered_as_substitute(\"chickpeas\", \"tuna\").\n.decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"vegans\", \"vegan\").\n.decl Answer()\nAnswer() :- Follows_diet(\"vegans\", \"vegan\"), Considered_as_substitute(\"chickpeas\", \"tuna\").\n.output Answer", "completions": [".decl Considered_as_substitute(Food_A:symbol, Food_B:symbol)\nConsidered_as_substitute(\"chickpeas\", \"tuna\").\n.decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"vegans\", \"vegan\").\n.decl Answer()\nAnswer() :- Follows_diet(\"vegans\", \"vegan\"), Considered_as_substitute(\"chickpeas\", \"tuna\").\n.output Answer"]}
{"id": 1464, "answer": true, "completion": ".decl Has_collaborator(Adaptation:symbol, Collaborator:symbol)\nHas_collaborator(\"Beauty and the Beast\", \"Kurt Sutter\").\n.decl Answer()\nAnswer() :- !Has_collaborator(\"Beauty and the Beast\", \"Kurt Sutter\").\n.output Answer", "completions": [".decl Has_collaborator(Adaptation:symbol, Collaborator:symbol)\nHas_collaborator(\"Beauty and the Beast\", \"Kurt Sutter\").\n.decl Answer()\nAnswer() :- !Has_collaborator(\"Beauty and the Beast\", \"Kurt Sutter\").\n.output Answer"]}
{"id": 1465, "answer": false, "completion": ".decl Has_strength(Group:symbol, Strength:float)\nHas_strength(\"Swiss Guard\", 10).\nHas_strength(\"Marines\", 20).\n.decl Answer()\nAnswer() :- Has_strength(\"Swiss Guard\", strength1), Has_strength(\"Marines\", strength2), strength1 < strength2.\n.output Answer", "completions": [".decl Has_strength(Group:symbol, Strength:float)\nHas_strength(\"Swiss Guard\", 10).\nHas_strength(\"Marines\", 20).\n.decl Answer()\nAnswer() :- Has_strength(\"Swiss Guard\", strength1), Has_strength(\"Marines\", strength2), strength1 < strength2.\n.output Answer"]}
{"id": 1466, "answer": false, "completion": ".decl Has_footprints(Location:symbol, Footprints:symbol)\nHas_footprints(\"Mount Sharp\", \"absent\").\n.decl Answer()\nAnswer() :- Has_footprints(\"Mount Sharp\", \"absent\").\n.output Answer", "completions": [".decl Has_footprints(Location:symbol, Footprints:symbol)\nHas_footprints(\"Mount Sharp\", \"absent\").\n.decl Answer()\nAnswer() :- Has_footprints(\"Mount Sharp\", \"absent\").\n.output Answer"]}
{"id": 1467, "answer": false, "completion": ".decl Was_crucial(Person:symbol, Event:symbol)\nWas_crucial(\"Edward II\", \"Battle of Bannockburn\").\n.decl Answer()\nAnswer() :- Was_crucial(\"Edward II\", \"Battle of Falkirk\"), !Was_crucial(\"Edward II\", \"Battle of Bannockburn\").\n.output Answer", "completions": [".decl Was_crucial(Person:symbol, Event:symbol)\nWas_crucial(\"Edward II\", \"Battle of Bannockburn\").\n.decl Answer()\nAnswer() :- Was_crucial(\"Edward II\", \"Battle of Falkirk\"), !Was_crucial(\"Edward II\", \"Battle of Bannockburn\").\n.output Answer"]}
{"id": 1468, "answer": true, "completion": ".decl Pays_tribute(Person:symbol, Currency:symbol)\nPays_tribute(\"Emperor Commodus\", \"Roman Denarius\").\n.decl Answer()\nAnswer() :- !Pays_tribute(\"Emperor Commodus\", \"Pound sterling\").\n.output Answer", "completions": [".decl Pays_tribute(Person:symbol, Currency:symbol)\nPays_tribute(\"Emperor Commodus\", \"Roman Denarius\").\n.decl Answer()\nAnswer() :- !Pays_tribute(\"Emperor Commodus\", \"Pound sterling\").\n.output Answer"]}
{"id": 1469, "answer": false, "completion": ".decl Has_texture(Food:symbol, Texture:symbol)\nHas_texture(\"spaghetti\", \"slick\").\n.decl Answer()\nAnswer() :- Has_texture(\"spaghetti\", \"slick\").\n.output Answer", "completions": [".decl Has_texture(Food:symbol, Texture:symbol)\nHas_texture(\"spaghetti\", \"slick\").\n.decl Answer()\nAnswer() :- Has_texture(\"spaghetti\", \"slick\").\n.output Answer"]}
{"id": 1470, "answer": true, "completion": ".decl Has_deaths(Revolution:symbol, Deaths:float)\nHas_deaths(\"Carnation Revolution\", 0).\nHas_deaths(\"French Revolution\", 40_000).\nHas_deaths(\"Russian Revolution\", 1_700_000).\n.decl Answer()\nAnswer() :- Has_deaths(\"Carnation Revolution\", deaths1), Has_deaths(revolution2, deaths2), deaths1 < deaths2.\n.output Answer", "completions": [".decl Has_deaths(Revolution:symbol, Deaths:float)\nHas_deaths(\"Carnation Revolution\", 0).\nHas_deaths(\"French Revolution\", 40_000).\nHas_deaths(\"Russian Revolution\", 1_700_000).\n.decl Answer()\nAnswer() :- Has_deaths(\"Carnation Revolution\", deaths1), Has_deaths(revolution2, deaths2), deaths1 < deaths2.\n.output Answer"]}
{"id": 1471, "answer": true, "completion": ".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Triton\", -235).\n.decl Has_insulation(Clothing:symbol, Insulation:float)\nHas_insulation(\"zoot suit\", 0.2).\n.decl Answer()\nAnswer() :- Has_temperature(\"Triton\", temperature), Has_insulation(\"zoot suit\", insulation), temperature < 0, insulation < 0.\n.output Answer", "completions": [".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Triton\", -235).\n.decl Has_insulation(Clothing:symbol, Insulation:float)\nHas_insulation(\"zoot suit\", 0.2).\n.decl Answer()\nAnswer() :- Has_temperature(\"Triton\", temperature), Has_insulation(\"zoot suit\", insulation), temperature < 0, insulation < 0.\n.output Answer"]}
{"id": 1472, "answer": false, "completion": ".decl Is_at(Person:symbol, Place:symbol)\nIs_at(\"Bugs Bunny\", \"Warner Bros. Studios\").\n.decl Answer()\nAnswer() :- !Is_at(\"Bugs Bunny\", \"Space Mountain\").\n.output Answer", "completions": [".decl Is_at(Person:symbol, Place:symbol)\nIs_at(\"Bugs Bunny\", \"Warner Bros. Studios\").\n.decl Answer()\nAnswer() :- !Is_at(\"Bugs Bunny\", \"Space Mountain\").\n.output Answer"]}
{"id": 1473, "answer": true, "completion": ".decl Takes_n_months(Process:symbol, N_months:float)\nTakes_n_months(\"brew beer\", 2).\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"September\", \"September\").\n.decl Answer()\nAnswer() :- Takes_n_months(\"brew beer\", n_months), Happens_in_month(\"September\", month), n_months <= 1.\n.output Answer", "completions": [".decl Takes_n_months(Process:symbol, N_months:float)\nTakes_n_months(\"brew beer\", 2).\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"September\", \"September\").\n.decl Answer()\nAnswer() :- Takes_n_months(\"brew beer\", n_months), Happens_in_month(\"September\", month), n_months <= 1.\n.output Answer"]}
{"id": 1474, "answer": false, "completion": ".decl Can_perform(Group:symbol, Action:symbol)\nCan_perform(\"Department of Defense\", \"strategic planning\").\nCan_perform(\"Department of Defense\", \"military operations\").\n.decl Answer()\nAnswer() :- !Can_perform(\"Department of Defense\", \"solo\").\n.output Answer", "completions": [".decl Can_perform(Group:symbol, Action:symbol)\nCan_perform(\"Department of Defense\", \"strategic planning\").\nCan_perform(\"Department of Defense\", \"military operations\").\n.decl Answer()\nAnswer() :- !Can_perform(\"Department of Defense\", \"solo\").\n.output Answer"]}
{"id": 1475, "answer": true, "completion": ".decl Has_effect(Candy_bar:symbol, Effect:symbol)\nHas_effect(\"Monoamine Oxidase\", \"mood-boosting\").\n.decl Answer()\nAnswer() :- Has_effect(\"Monoamine Oxidase\", \"mood-boosting\").\n.output Answer", "completions": [".decl Has_effect(Candy_bar:symbol, Effect:symbol)\nHas_effect(\"Monoamine Oxidase\", \"mood-boosting\").\n.decl Answer()\nAnswer() :- Has_effect(\"Monoamine Oxidase\", \"mood-boosting\").\n.output Answer"]}
{"id": 1476, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Elizabeth I of England\", \"silk\").\n.decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"silk\", \"viscose fiber\").\n.decl Answer()\nAnswer() :- Owns(\"Elizabeth I of England\", object), Is_made_of(object, \"viscose fiber\").\n.output Answer", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Elizabeth I of England\", \"silk\").\n.decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"silk\", \"viscose fiber\").\n.decl Answer()\nAnswer() :- Owns(\"Elizabeth I of England\", object), Is_made_of(object, \"viscose fiber\").\n.output Answer"]}
{"id": 1477, "answer": false, "completion": ".decl Used_in_time(Object:symbol, Time:symbol)\nUsed_in_time(\"dynamite\", \"Industrial Revolution\").\n.decl Answer()\nAnswer() :- !Used_in_time(\"dynamite\", \"Middle Ages\").\n.output Answer", "completions": [".decl Used_in_time(Object:symbol, Time:symbol)\nUsed_in_time(\"dynamite\", \"Industrial Revolution\").\n.decl Answer()\nAnswer() :- !Used_in_time(\"dynamite\", \"Middle Ages\").\n.output Answer"]}
{"id": 1478, "answer": true, "completion": ".decl Has_name_origin(Object:symbol, Origin:symbol)\nHas_name_origin(\"Europa\", \"Greek mythology\").\nHas_name_origin(\"Amunet\", \"Egyptian mythology\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Europa\", origin1), Has_name_origin(\"Amunet\", origin2), origin1 = origin2.\n.output Answer", "completions": [".decl Has_name_origin(Object:symbol, Origin:symbol)\nHas_name_origin(\"Europa\", \"Greek mythology\").\nHas_name_origin(\"Amunet\", \"Egyptian mythology\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Europa\", origin1), Has_name_origin(\"Amunet\", origin2), origin1 = origin2.\n.output Answer"]}
{"id": 1479, "answer": true, "completion": ".decl Does(Animal:symbol, Action:symbol)\nDoes(\"kangaroo\", \"incubate offspring\").\n.decl Answer()\nAnswer() :- Does(\"kangaroo\", \"incubate offspring\").\n.output Answer", "completions": [".decl Does(Animal:symbol, Action:symbol)\nDoes(\"kangaroo\", \"incubate offspring\").\n.decl Answer()\nAnswer() :- Does(\"kangaroo\", \"incubate offspring\").\n.output Answer"]}
{"id": 1480, "answer": true, "completion": ".decl Lives_in(Person:symbol, County:symbol)\nLives_in(\"John Doe\", \"Los Angeles County\").\n.decl Believes_in(Person:symbol, Religion:symbol)\nBelieves_in(\"John Doe\", \"Jehovah Witnesses\").\n.decl Has_heaven(Religion:symbol, Heaven:symbol)\nHas_heaven(\"Jehovah Witnesses\", \"heaven\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Los Angeles County\"), Believes_in(person, \"Jehovah Witnesses\"), Has_heaven(\"Jehovah Witnesses\", \"heaven\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, County:symbol)\nLives_in(\"John Doe\", \"Los Angeles County\").\n.decl Believes_in(Person:symbol, Religion:symbol)\nBelieves_in(\"John Doe\", \"Jehovah Witnesses\").\n.decl Has_heaven(Religion:symbol, Heaven:symbol)\nHas_heaven(\"Jehovah Witnesses\", \"heaven\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Los Angeles County\"), Believes_in(person, \"Jehovah Witnesses\"), Has_heaven(\"Jehovah Witnesses\", \"heaven\").\n.output Answer"]}
{"id": 1481, "answer": true, "completion": ".decl Smokes(Person:symbol, Cigarette:symbol)\nSmokes(\"John\", \"Djarum\").\n.decl Likes(Person:symbol, Flavor:symbol)\nLikes(\"John\", \"cloves\").\n.decl Answer()\nAnswer() :- Smokes(person, \"Djarum\"), Likes(person, \"cloves\").\n.output Answer", "completions": [".decl Smokes(Person:symbol, Cigarette:symbol)\nSmokes(\"John\", \"Djarum\").\n.decl Likes(Person:symbol, Flavor:symbol)\nLikes(\"John\", \"cloves\").\n.decl Answer()\nAnswer() :- Smokes(person, \"Djarum\"), Likes(person, \"cloves\").\n.output Answer"]}
{"id": 1482, "answer": true, "completion": ".decl Used_in_war(Object:symbol)\nUsed_in_war(\"Douglas fir\").\n.decl Answer()\nAnswer() :- Used_in_war(\"Douglas fir\").\n.output Answer", "completions": [".decl Used_in_war(Object:symbol)\nUsed_in_war(\"Douglas fir\").\n.decl Answer()\nAnswer() :- Used_in_war(\"Douglas fir\").\n.output Answer"]}
{"id": 1483, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"goat\", \"mountain\").\n.decl Answer()\nAnswer() :- !Lives_in(\"goat\", \"abyssal plains\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"goat\", \"mountain\").\n.decl Answer()\nAnswer() :- !Lives_in(\"goat\", \"abyssal plains\").\n.output Answer"]}
{"id": 1484, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"penguin\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Lives_in(\"penguin\", place), place != \"Miami\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"penguin\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Lives_in(\"penguin\", place), place != \"Miami\".\n.output Answer"]}
{"id": 1485, "answer": true, "completion": ".decl Student_of(Person:symbol, Teacher:symbol)\nStudent_of(\"Al-Farabi\", \"Great Sheikh\").\n.decl Answer()\nAnswer() :- Student_of(\"Al-Farabi\", \"Great Sheikh\").\n.output Answer", "completions": [".decl Student_of(Person:symbol, Teacher:symbol)\nStudent_of(\"Al-Farabi\", \"Great Sheikh\").\n.decl Answer()\nAnswer() :- Student_of(\"Al-Farabi\", \"Great Sheikh\").\n.output Answer"]}
{"id": 1486, "answer": true, "completion": ".decl Ruled(Person:symbol, Place:symbol)\nRuled(\"Richard III\", \"England\").\n.decl Answer()\nAnswer() :- !Ruled(\"Richard III\", \"Adelaide\").\n.output Answer", "completions": [".decl Ruled(Person:symbol, Place:symbol)\nRuled(\"Richard III\", \"England\").\n.decl Answer()\nAnswer() :- !Ruled(\"Richard III\", \"Adelaide\").\n.output Answer"]}
{"id": 1487, "answer": true, "completion": ".decl Avoids(Person:symbol, Place:symbol)\nAvoids(\"Ronda Rousey\", \"BBQ restaraunts\").\n.decl Answer()\nAnswer() :- Avoids(\"Ronda Rousey\", \"BBQ restaraunts\").\n.output Answer", "completions": [".decl Avoids(Person:symbol, Place:symbol)\nAvoids(\"Ronda Rousey\", \"BBQ restaraunts\").\n.decl Answer()\nAnswer() :- Avoids(\"Ronda Rousey\", \"BBQ restaraunts\").\n.output Answer"]}
{"id": 1488, "answer": true, "completion": ".decl Likes(Person:symbol, Drink:symbol)\nLikes(\"Kylie Jenner\", \"coffee\").\n.decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"coffee\", \"cream\").\n.decl Answer()\nAnswer() :- Likes(\"Kylie Jenner\", drink), Has_ingredient(drink, \"cream\"), !Has_ingredient(drink, \"cream\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Drink:symbol)\nLikes(\"Kylie Jenner\", \"coffee\").\n.decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"coffee\", \"cream\").\n.decl Answer()\nAnswer() :- Likes(\"Kylie Jenner\", drink), Has_ingredient(drink, \"cream\"), !Has_ingredient(drink, \"cream\").\n.output Answer"]}
{"id": 1489, "answer": false, "completion": ".decl Has_power(Vehicle:symbol, Power:float)\nHas_power(\"electric car\", 100).\nHas_power(\"NASCAR car\", 500).\n.decl Answer()\nAnswer() :- Has_power(\"electric car\", power1), Has_power(\"NASCAR car\", power2), power1 < power2.\n.output Answer", "completions": [".decl Has_power(Vehicle:symbol, Power:float)\nHas_power(\"electric car\", 100).\nHas_power(\"NASCAR car\", 500).\n.decl Answer()\nAnswer() :- Has_power(\"electric car\", power1), Has_power(\"NASCAR car\", power2), power1 < power2.\n.output Answer"]}
{"id": 1490, "answer": true, "completion": ".decl Has_diet(Animal:symbol, Diet:symbol)\nHas_diet(\"cow\", \"grass\").\nHas_diet(\"wild game\", \"wild plants\").\n.decl Answer()\nAnswer() :- Has_diet(\"cow\", diet1), Has_diet(\"wild game\", diet2), diet1 = diet2.\n.output Answer", "completions": [".decl Has_diet(Animal:symbol, Diet:symbol)\nHas_diet(\"cow\", \"grass\").\nHas_diet(\"wild game\", \"wild plants\").\n.decl Answer()\nAnswer() :- Has_diet(\"cow\", diet1), Has_diet(\"wild game\", diet2), diet1 = diet2.\n.output Answer"]}
{"id": 1491, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"King Leonidas' army\", 300).\nHas_size(\"Mozart's compositions\", 600).\n.decl Answer()\nAnswer() :- Has_size(\"King Leonidas' army\", size1), Has_size(\"Mozart's compositions\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"King Leonidas' army\", 300).\nHas_size(\"Mozart's compositions\", 600).\n.decl Answer()\nAnswer() :- Has_size(\"King Leonidas' army\", size1), Has_size(\"Mozart's compositions\", size2), size1 < size2.\n.output Answer"]}
{"id": 1492, "answer": false, "completion": ".decl Enlists(Person:symbol, Corps:symbol)\nEnlists(\"Christopher Walken\", \"United States Army\").\n.decl Answer()\nAnswer() :- Enlists(\"Christopher Walken\", \"United States Marine Corps\").\n.output Answer", "completions": [".decl Enlists(Person:symbol, Corps:symbol)\nEnlists(\"Christopher Walken\", \"United States Army\").\n.decl Answer()\nAnswer() :- Enlists(\"Christopher Walken\", \"United States Marine Corps\").\n.output Answer"]}
{"id": 1493, "answer": false, "completion": ".decl Is_good_for(Food:symbol, Condition:symbol)\nIs_good_for(\"kola nuts\", \"diabetes\").\nIs_good_for(\"kola nuts\", \"obesity\").\n.decl Answer()\nAnswer() :- !Is_good_for(\"kola nuts\", \"colitis\").\n.output Answer", "completions": [".decl Is_good_for(Food:symbol, Condition:symbol)\nIs_good_for(\"kola nuts\", \"diabetes\").\nIs_good_for(\"kola nuts\", \"obesity\").\n.decl Answer()\nAnswer() :- !Is_good_for(\"kola nuts\", \"colitis\").\n.output Answer"]}
{"id": 1494, "answer": false, "completion": ".decl Is_subject_of(Person:symbol, News:symbol)\nIs_subject_of(\"Jamie Lee Curtis\", \"fake news\").\n.decl Answer()\nAnswer() :- Is_subject_of(\"Jamie Lee Curtis\", news), news = \"fake news\".\n.output Answer", "completions": [".decl Is_subject_of(Person:symbol, News:symbol)\nIs_subject_of(\"Jamie Lee Curtis\", \"fake news\").\n.decl Answer()\nAnswer() :- Is_subject_of(\"Jamie Lee Curtis\", news), news = \"fake news\".\n.output Answer"]}
{"id": 1495, "answer": true, "completion": ".decl Has_release_date(Game:symbol, Release_date:symbol)\nHas_release_date(\"Final Fantasy VI\", \"1994\").\nHas_release_date(\"Final Fantasy I\", \"1987\").\nHas_release_date(\"Final Fantasy XV\", \"2016\").\n.decl Answer()\nAnswer() :- Has_release_date(\"Final Fantasy VI\", date1), Has_release_date(\"Final Fantasy I\", date2), Has_release_date(\"Final Fantasy XV\", date3), date1 > date2, date1 < date3.\n.output Answer", "completions": [".decl Has_release_date(Game:symbol, Release_date:symbol)\nHas_release_date(\"Final Fantasy VI\", \"1994\").\nHas_release_date(\"Final Fantasy I\", \"1987\").\nHas_release_date(\"Final Fantasy XV\", \"2016\").\n.decl Answer()\nAnswer() :- Has_release_date(\"Final Fantasy VI\", date1), Has_release_date(\"Final Fantasy I\", date2), Has_release_date(\"Final Fantasy XV\", date3), date1 > date2, date1 < date3.\n.output Answer"]}
{"id": 1496, "answer": false, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"wood\").\nSells(\"Home Depot\", \"paint\").\nSells(\"Home Depot\", \"tools\").\n.decl Answer()\nAnswer() :- !Sells(\"Home Depot\", \"spinal cord\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"wood\").\nSells(\"Home Depot\", \"paint\").\nSells(\"Home Depot\", \"tools\").\n.decl Answer()\nAnswer() :- !Sells(\"Home Depot\", \"spinal cord\").\n.output Answer"]}
{"id": 1497, "answer": true, "completion": ".decl Holds_event(Location:symbol, Event:symbol)\nHolds_event(\"New York City\", \"MLB World Series\").\n.decl Answer()\nAnswer() :- !Holds_event(\"Newcastle, New South Wales\", \"MLB World Series\").\n.output Answer", "completions": [".decl Holds_event(Location:symbol, Event:symbol)\nHolds_event(\"New York City\", \"MLB World Series\").\n.decl Answer()\nAnswer() :- !Holds_event(\"Newcastle, New South Wales\", \"MLB World Series\").\n.output Answer"]}
{"id": 1498, "answer": false, "completion": ".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Bohai Sea\", 100).\n.decl Has_height(State:symbol, Height:float)\nHas_height(\"Rhode Island\", 0.5).\n.decl Answer()\nAnswer() :- Has_depth(\"Bohai Sea\", depth), Has_height(\"Rhode Island\", height), height > depth.\n.output Answer", "completions": [".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Bohai Sea\", 100).\n.decl Has_height(State:symbol, Height:float)\nHas_height(\"Rhode Island\", 0.5).\n.decl Answer()\nAnswer() :- Has_depth(\"Bohai Sea\", depth), Has_height(\"Rhode Island\", height), height > depth.\n.output Answer"]}
{"id": 1499, "answer": true, "completion": ".decl Influences(Genre:symbol, Influence:symbol)\nInfluences(\"rap music\", \"cannabis\").\n.decl Answer()\nAnswer() :- Influences(\"rap music\", \"cannabis\").\n.output Answer", "completions": [".decl Influences(Genre:symbol, Influence:symbol)\nInfluences(\"rap music\", \"cannabis\").\n.decl Answer()\nAnswer() :- Influences(\"rap music\", \"cannabis\").\n.output Answer"]}
{"id": 1500, "answer": true, "completion": ".decl Uses(Game:symbol, Number_type:symbol)\nUses(\"table tennis\", \"natural numbers\").\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\n.decl Answer()\nAnswer() :- Uses(\"table tennis\", number_type), !Is_prime(number).\n.output Answer", "completions": [".decl Uses(Game:symbol, Number_type:symbol)\nUses(\"table tennis\", \"natural numbers\").\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\n.decl Answer()\nAnswer() :- Uses(\"table tennis\", number_type), !Is_prime(number).\n.output Answer"]}
{"id": 1501, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Marlboro package\", \"red\").\nHas_color(\"Marlboro package\", \"white\").\nHas_color(\"Marlboro package\", \"blue\").\nHas_color(\"French flag\", \"blue\").\nHas_color(\"French flag\", \"white\").\nHas_color(\"French flag\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"Marlboro package\", color1), Has_color(\"French flag\", color2), color1 = color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Marlboro package\", \"red\").\nHas_color(\"Marlboro package\", \"white\").\nHas_color(\"Marlboro package\", \"blue\").\nHas_color(\"French flag\", \"blue\").\nHas_color(\"French flag\", \"white\").\nHas_color(\"French flag\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"Marlboro package\", color1), Has_color(\"French flag\", color2), color1 = color2.\n.output Answer"]}
{"id": 1502, "answer": true, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Jesus\", \"Apostles\").\n.decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Apostles\", \"Aramaic\").\nSpeaks(\"Apostles\", \"Hebrew\").\n.decl Answer()\nAnswer() :- Knows(\"Jesus\", person), Speaks(person, \"Estonian\"), !Speaks(person, \"Aramaic\"), !Speaks(person, \"Hebrew\").\n.output Answer", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Jesus\", \"Apostles\").\n.decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Apostles\", \"Aramaic\").\nSpeaks(\"Apostles\", \"Hebrew\").\n.decl Answer()\nAnswer() :- Knows(\"Jesus\", person), Speaks(person, \"Estonian\"), !Speaks(person, \"Aramaic\"), !Speaks(person, \"Hebrew\").\n.output Answer"]}
{"id": 1503, "answer": false, "completion": ".decl Attended_school(Person:symbol, School:symbol, Subject:symbol)\n.decl Answer()\nAnswer() :- !Attended_school(\"Jesus\", _, \"railroad engineering\").\n.output Answer", "completions": [".decl Attended_school(Person:symbol, School:symbol, Subject:symbol)\n.decl Answer()\nAnswer() :- !Attended_school(\"Jesus\", _, \"railroad engineering\").\n.output Answer"]}
{"id": 1504, "answer": false, "completion": ".decl Has_text(Document:symbol, Text:symbol)\nHas_text(\"Constitution of the Philippines\", \"British constitution\").\n.decl Answer()\nAnswer() :- Has_text(\"Constitution of the Philippines\", \"British constitution\").\n.output Answer", "completions": [".decl Has_text(Document:symbol, Text:symbol)\nHas_text(\"Constitution of the Philippines\", \"British constitution\").\n.decl Answer()\nAnswer() :- Has_text(\"Constitution of the Philippines\", \"British constitution\").\n.output Answer"]}
{"id": 1505, "answer": false, "completion": ".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Apollo\", 10).\nHas_strength(\"D'Artagnan\", 8).\n.decl Answer()\nAnswer() :- Has_strength(\"Apollo\", strength1), Has_strength(\"D'Artagnan\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Apollo\", 10).\nHas_strength(\"D'Artagnan\", 8).\n.decl Answer()\nAnswer() :- Has_strength(\"Apollo\", strength1), Has_strength(\"D'Artagnan\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 1506, "answer": true, "completion": ".decl Works_with(Person:symbol, Item:symbol)\nWorks_with(\"lapidary\", \"gemstones\").\n.decl Studies(Person:symbol, Item:symbol)\nStudies(\"geologist\", \"rocks\").\n.decl Answer()\nAnswer() :- Works_with(\"lapidary\", item1), Studies(\"geologist\", item2), item1 = item2.\n.output Answer", "completions": [".decl Works_with(Person:symbol, Item:symbol)\nWorks_with(\"lapidary\", \"gemstones\").\n.decl Studies(Person:symbol, Item:symbol)\nStudies(\"geologist\", \"rocks\").\n.decl Answer()\nAnswer() :- Works_with(\"lapidary\", item1), Studies(\"geologist\", item2), item1 = item2.\n.output Answer"]}
{"id": 1507, "answer": true, "completion": ".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Asian black bear\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"Asian black bear\", \"black\"), !Has_color(\"Asian black bear\", \"multicolored\").\n.output Answer", "completions": [".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Asian black bear\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"Asian black bear\", \"black\"), !Has_color(\"Asian black bear\", \"multicolored\").\n.output Answer"]}
{"id": 1508, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"sea turtle\", \"ocean\").\n.decl Is_in_quarantine(Place:symbol)\nIs_in_quarantine(\"ocean\").\n.decl Answer()\nAnswer() :- Lives_in(\"sea turtle\", place), Is_in_quarantine(place), !Is_enjoying_life(\"sea turtle\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"sea turtle\", \"ocean\").\n.decl Is_in_quarantine(Place:symbol)\nIs_in_quarantine(\"ocean\").\n.decl Answer()\nAnswer() :- Lives_in(\"sea turtle\", place), Is_in_quarantine(place), !Is_enjoying_life(\"sea turtle\").\n.output Answer"]}
{"id": 1509, "answer": true, "completion": ".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Edward Snowden\", 145).\n.decl Has_IQ_requirement(Organization:symbol, IQ_requirement:float)\nHas_IQ_requirement(\"MENSA\", 130).\n.decl Answer()\nAnswer() :- Has_IQ(\"Edward Snowden\", iq), Has_IQ_requirement(\"MENSA\", iq_requirement), iq >= iq_requirement.\n.output Answer", "completions": [".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Edward Snowden\", 145).\n.decl Has_IQ_requirement(Organization:symbol, IQ_requirement:float)\nHas_IQ_requirement(\"MENSA\", 130).\n.decl Answer()\nAnswer() :- Has_IQ(\"Edward Snowden\", iq), Has_IQ_requirement(\"MENSA\", iq_requirement), iq >= iq_requirement.\n.output Answer"]}
{"id": 1510, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Leila George\", 1.7).\n.decl Has_height_requirement(Job:symbol, Height:float)\nHas_height_requirement(\"model\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Leila George\", height1), Has_height_requirement(\"model\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Leila George\", 1.7).\n.decl Has_height_requirement(Job:symbol, Height:float)\nHas_height_requirement(\"model\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Leila George\", height1), Has_height_requirement(\"model\", height2), height1 < height2.\n.output Answer"]}
{"id": 1511, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"modern central processing unit circuit chip\", 0.2).\nHas_size(\"housekey\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"modern central processing unit circuit chip\", size1), Has_size(\"housekey\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"modern central processing unit circuit chip\", 0.2).\nHas_size(\"housekey\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"modern central processing unit circuit chip\", size1), Has_size(\"housekey\", size2), size1 < size2.\n.output Answer"]}
{"id": 1512, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Sting\", \"singing\").\nHas_skill(\"Andy Summers\", \"guitar\").\nHas_skill(\"Stewart Copeland\", \"drumming\").\n.decl Answer()\nAnswer() :- !Has_skill(\"Sting\", \"lawful arrests\"), !Has_skill(\"Andy Summers\", \"lawful arrests\"), !Has_skill(\"Stewart Copeland\", \"lawful arrests\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Sting\", \"singing\").\nHas_skill(\"Andy Summers\", \"guitar\").\nHas_skill(\"Stewart Copeland\", \"drumming\").\n.decl Answer()\nAnswer() :- !Has_skill(\"Sting\", \"lawful arrests\"), !Has_skill(\"Andy Summers\", \"lawful arrests\"), !Has_skill(\"Stewart Copeland\", \"lawful arrests\").\n.output Answer"]}
{"id": 1513, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"American government holidays\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"American government holidays\", \"winter\"), !Happens_in_time(\"American government holidays\", \"summer\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"American government holidays\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"American government holidays\", \"winter\"), !Happens_in_time(\"American government holidays\", \"summer\").\n.output Answer"]}
{"id": 1514, "answer": false, "completion": ".decl Has_name(City:symbol, Name:symbol)\nHas_name(\"Albuquerque\", \"Yootó\").\n.decl Is_largest_city(State:symbol, City:symbol)\nIs_largest_city(\"New Mexico\", \"Albuquerque\").\n.decl Answer()\nAnswer() :- Is_largest_city(\"New Mexico\", city), Has_name(city, \"Yootó\").\n.output Answer", "completions": [".decl Has_name(City:symbol, Name:symbol)\nHas_name(\"Albuquerque\", \"Yootó\").\n.decl Is_largest_city(State:symbol, City:symbol)\nIs_largest_city(\"New Mexico\", \"Albuquerque\").\n.decl Answer()\nAnswer() :- Is_largest_city(\"New Mexico\", city), Has_name(city, \"Yootó\").\n.output Answer"]}
{"id": 1515, "answer": false, "completion": ".decl Has_characteristics(Object:symbol, Characteristic:symbol)\nHas_characteristics(\"sable\", \"anthropomorphic\").\n.decl Appears_in(Object:symbol, Medium:symbol)\nAppears_in(\"sable\", \"Marvel comics\").\n.decl Answer()\nAnswer() :- Has_characteristics(\"sable\", characteristic), Appears_in(\"sable\", \"Marvel comics\").\n.output Answer", "completions": [".decl Has_characteristics(Object:symbol, Characteristic:symbol)\nHas_characteristics(\"sable\", \"anthropomorphic\").\n.decl Appears_in(Object:symbol, Medium:symbol)\nAppears_in(\"sable\", \"Marvel comics\").\n.decl Answer()\nAnswer() :- Has_characteristics(\"sable\", characteristic), Appears_in(\"sable\", \"Marvel comics\").\n.output Answer"]}
{"id": 1516, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"sesame seed\", 0.2).\nHas_size(\"wood frog egg\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"sesame seed\", size1), Has_size(\"wood frog egg\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"sesame seed\", 0.2).\nHas_size(\"wood frog egg\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"sesame seed\", size1), Has_size(\"wood frog egg\", size2), size1 < size2.\n.output Answer"]}
{"id": 1517, "answer": false, "completion": ".decl Blooms_in_time(Plant:symbol, Time:symbol)\nBlooms_in_time(\"plum tree\", \"spring\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"November\", \"autumn\").\n.decl Answer()\nAnswer() :- Blooms_in_time(\"plum tree\", season), In_season(\"November\", month), season != month.\n.output Answer", "completions": [".decl Blooms_in_time(Plant:symbol, Time:symbol)\nBlooms_in_time(\"plum tree\", \"spring\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"November\", \"autumn\").\n.decl Answer()\nAnswer() :- Blooms_in_time(\"plum tree\", season), In_season(\"November\", month), season != month.\n.output Answer"]}
{"id": 1518, "answer": false, "completion": ".decl Has_bite_severity(Animal:symbol, Severity:float)\nHas_bite_severity(\"bull shark\", 8).\nHas_bite_severity(\"crocodile\", 6).\n.decl Answer()\nAnswer() :- Has_bite_severity(\"bull shark\", severity1), Has_bite_severity(\"crocodile\", severity2), severity1 > severity2.\n.output Answer", "completions": [".decl Has_bite_severity(Animal:symbol, Severity:float)\nHas_bite_severity(\"bull shark\", 8).\nHas_bite_severity(\"crocodile\", 6).\n.decl Answer()\nAnswer() :- Has_bite_severity(\"bull shark\", severity1), Has_bite_severity(\"crocodile\", severity2), severity1 > severity2.\n.output Answer"]}
{"id": 1519, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Barron Trump\", 13).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Mexican Revolution\", 10).\n.decl Answer()\nAnswer() :- Has_age(\"Barron Trump\", age), Last_n_years(\"Mexican Revolution\", n_years), age + n_years > 0.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Barron Trump\", 13).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Mexican Revolution\", 10).\n.decl Answer()\nAnswer() :- Has_age(\"Barron Trump\", age), Last_n_years(\"Mexican Revolution\", n_years), age + n_years > 0.\n.output Answer"]}
{"id": 1520, "answer": false, "completion": ".decl Has_avg_temp(State:symbol, Avg_temp:float)\nHas_avg_temp(\"New York\", 10).\nHas_avg_temp(\"Florida\", 20).\n.decl Answer()\nAnswer() :- Has_avg_temp(\"New York\", temp1), Has_avg_temp(\"Florida\", temp2), temp1 < temp2.\n.output Answer", "completions": [".decl Has_avg_temp(State:symbol, Avg_temp:float)\nHas_avg_temp(\"New York\", 10).\nHas_avg_temp(\"Florida\", 20).\n.decl Answer()\nAnswer() :- Has_avg_temp(\"New York\", temp1), Has_avg_temp(\"Florida\", temp2), temp1 < temp2.\n.output Answer"]}
{"id": 1521, "answer": true, "completion": ".decl Is_dangerous(Activity:symbol, Danger_level:float)\nIs_dangerous(\"walking to the Very Large Telescope\", 0).\n.decl Answer()\nAnswer() :- Is_dangerous(\"walking to the Very Large Telescope\", danger_level), danger_level > 0.\n.output Answer", "completions": [".decl Is_dangerous(Activity:symbol, Danger_level:float)\nIs_dangerous(\"walking to the Very Large Telescope\", 0).\n.decl Answer()\nAnswer() :- Is_dangerous(\"walking to the Very Large Telescope\", danger_level), danger_level > 0.\n.output Answer"]}
{"id": 1522, "answer": true, "completion": ".decl Can_receive_transplant(Organism:symbol, Organ:symbol)\nCan_receive_transplant(\"human\", \"heart\").\nCan_receive_transplant(\"human\", \"liver\").\nCan_receive_transplant(\"human\", \"kidney\").\n.decl Answer()\nAnswer() :- !Can_receive_transplant(\"carrot\", organ).\n.output Answer", "completions": [".decl Can_receive_transplant(Organism:symbol, Organ:symbol)\nCan_receive_transplant(\"human\", \"heart\").\nCan_receive_transplant(\"human\", \"liver\").\nCan_receive_transplant(\"human\", \"kidney\").\n.decl Answer()\nAnswer() :- !Can_receive_transplant(\"carrot\", organ).\n.output Answer"]}
{"id": 1523, "answer": false, "completion": ".decl Has_iteration(Person:symbol, Iteration:float)\nHas_iteration(\"Pope Leo\", 847).\nHas_iteration(\"Ivan the Terrible\", 1).\n.decl Answer()\nAnswer() :- Has_iteration(\"Pope Leo\", iteration1), Has_iteration(\"Ivan the Terrible\", iteration2), iteration1 = iteration2.\n.output Answer", "completions": [".decl Has_iteration(Person:symbol, Iteration:float)\nHas_iteration(\"Pope Leo\", 847).\nHas_iteration(\"Ivan the Terrible\", 1).\n.decl Answer()\nAnswer() :- Has_iteration(\"Pope Leo\", iteration1), Has_iteration(\"Ivan the Terrible\", iteration2), iteration1 = iteration2.\n.output Answer"]}
{"id": 1524, "answer": false, "completion": ".decl Fought_for(Group:symbol, Country:symbol)\nFought_for(\"mercenaries\", \"France\").\nFought_for(\"army\", \"England\").\n.decl Happened_in(Event:symbol, Time:symbol)\nHappened_in(\"Glorious Revolution\", \"1688\").\n.decl Answer()\nAnswer() :- Fought_for(group, \"England\"), Happened_in(\"Glorious Revolution\", time), Fought_for(group, country), country != \"England\".\n.output Answer", "completions": [".decl Fought_for(Group:symbol, Country:symbol)\nFought_for(\"mercenaries\", \"France\").\nFought_for(\"army\", \"England\").\n.decl Happened_in(Event:symbol, Time:symbol)\nHappened_in(\"Glorious Revolution\", \"1688\").\n.decl Answer()\nAnswer() :- Fought_for(group, \"England\"), Happened_in(\"Glorious Revolution\", time), Fought_for(group, country), country != \"England\".\n.output Answer"]}
{"id": 1525, "answer": false, "completion": ".decl Involved_in(Company:symbol, Event:symbol)\nInvolved_in(\"NASA\", \"lunar landing\").\n.decl Answer()\nAnswer() :- !Involved_in(\"Amazon\", \"lunar landing\").\n.output Answer", "completions": [".decl Involved_in(Company:symbol, Event:symbol)\nInvolved_in(\"NASA\", \"lunar landing\").\n.decl Answer()\nAnswer() :- !Involved_in(\"Amazon\", \"lunar landing\").\n.output Answer"]}
{"id": 1526, "answer": true, "completion": ".decl Has_birthday(Person:symbol, Date:symbol)\nHas_birthday(\"Dean Cain\", \"July 31\").\nHas_birthday(\"Will Ferrell\", \"July 16\").\n.decl Days_to_date(Date:symbol, Days_to_date:float)\nDays_to_date(\"July 4\", 0).\nDays_to_date(\"July 16\", 12).\nDays_to_date(\"July 31\", 27).\n.decl Answer()\nAnswer() :- Has_birthday(\"Dean Cain\", date1), Has_birthday(\"Will Ferrell\", date2), Days_to_date(date1, days1), Days_to_date(date2, days2), days1 < days2.\n.output Answer", "completions": [".decl Has_birthday(Person:symbol, Date:symbol)\nHas_birthday(\"Dean Cain\", \"July 31\").\nHas_birthday(\"Will Ferrell\", \"July 16\").\n.decl Days_to_date(Date:symbol, Days_to_date:float)\nDays_to_date(\"July 4\", 0).\nDays_to_date(\"July 16\", 12).\nDays_to_date(\"July 31\", 27).\n.decl Answer()\nAnswer() :- Has_birthday(\"Dean Cain\", date1), Has_birthday(\"Will Ferrell\", date2), Days_to_date(date1, days1), Days_to_date(date2, days2), days1 < days2.\n.output Answer"]}
{"id": 1527, "answer": true, "completion": ".decl Belongs_to_caste(Person:symbol, Caste:symbol)\nBelongs_to_caste(\"John\", \"Iyer\").\n.decl Eats_food(Person:symbol, Food:symbol)\nEats_food(\"John\", \"meat\").\n.decl Answer()\nAnswer() :- Belongs_to_caste(person, \"Iyer\"), Eats_food(person, \"meat\").\n.output Answer", "completions": [".decl Belongs_to_caste(Person:symbol, Caste:symbol)\nBelongs_to_caste(\"John\", \"Iyer\").\n.decl Eats_food(Person:symbol, Food:symbol)\nEats_food(\"John\", \"meat\").\n.decl Answer()\nAnswer() :- Belongs_to_caste(person, \"Iyer\"), Eats_food(person, \"meat\").\n.output Answer"]}
{"id": 1528, "answer": false, "completion": ".decl Competes_for(Person_A:symbol, Person_B:symbol, Object:symbol)\nCompetes_for(\"Hades\", \"Osiris\", \"real estate\").\n.decl Answer()\nAnswer() :- Competes_for(\"Hades\", \"Osiris\", \"real estate\").\n.output Answer", "completions": [".decl Competes_for(Person_A:symbol, Person_B:symbol, Object:symbol)\nCompetes_for(\"Hades\", \"Osiris\", \"real estate\").\n.decl Answer()\nAnswer() :- Competes_for(\"Hades\", \"Osiris\", \"real estate\").\n.output Answer"]}
{"id": 1529, "answer": true, "completion": ".decl Likes(Person:symbol, Phone:symbol)\nLikes(\"General Zod\", \"iPhone\").\n.decl Answer()\nAnswer() :- Likes(\"General Zod\", \"iPhone\"), !Likes(\"General Zod\", \"Samsung Galaxy S4\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Phone:symbol)\nLikes(\"General Zod\", \"iPhone\").\n.decl Answer()\nAnswer() :- Likes(\"General Zod\", \"iPhone\"), !Likes(\"General Zod\", \"Samsung Galaxy S4\").\n.output Answer"]}
{"id": 1530, "answer": false, "completion": ".decl Is_appropriate_for(Food:symbol, Occasion:symbol)\nIs_appropriate_for(\"Chipotle Cinnamon Pork Chops\", \"dinner\").\n.decl Answer()\nAnswer() :- Is_appropriate_for(\"Chipotle Cinnamon Pork Chops\", \"Seder\").\n.output Answer", "completions": [".decl Is_appropriate_for(Food:symbol, Occasion:symbol)\nIs_appropriate_for(\"Chipotle Cinnamon Pork Chops\", \"dinner\").\n.decl Answer()\nAnswer() :- Is_appropriate_for(\"Chipotle Cinnamon Pork Chops\", \"Seder\").\n.output Answer"]}
{"id": 1531, "answer": false, "completion": ".decl Causes(Object:symbol, Symptom:symbol)\nCauses(\"too many oranges\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Causes(\"too many oranges\", \"diarrhea\").\n.output Answer", "completions": [".decl Causes(Object:symbol, Symptom:symbol)\nCauses(\"too many oranges\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Causes(\"too many oranges\", \"diarrhea\").\n.output Answer"]}
{"id": 1532, "answer": true, "completion": ".decl Prone_to_emotion(Person:symbol, Emotion:symbol)\nProne_to_emotion(\"John\", \"jealousy\").\n.decl Answer()\nAnswer() :- Prone_to_emotion(person, \"jealousy\"), !(Prone_to_emotion(person, \"polyamory\")).\n.output Answer", "completions": [".decl Prone_to_emotion(Person:symbol, Emotion:symbol)\nProne_to_emotion(\"John\", \"jealousy\").\n.decl Answer()\nAnswer() :- Prone_to_emotion(person, \"jealousy\"), !(Prone_to_emotion(person, \"polyamory\")).\n.output Answer"]}
{"id": 1533, "answer": true, "completion": ".decl Committed_sin(Person:symbol, Sin:symbol)\nCommitted_sin(\"Christopher Columbus\", \"greed\").\nCommitted_sin(\"Christopher Columbus\", \"pride\").\n.decl Is_deadly_sin(Sin:symbol)\nIs_deadly_sin(\"greed\").\nIs_deadly_sin(\"pride\").\n.decl Answer()\nAnswer() :- Committed_sin(\"Christopher Columbus\", sin), Is_deadly_sin(sin).\n.output Answer", "completions": [".decl Committed_sin(Person:symbol, Sin:symbol)\nCommitted_sin(\"Christopher Columbus\", \"greed\").\nCommitted_sin(\"Christopher Columbus\", \"pride\").\n.decl Is_deadly_sin(Sin:symbol)\nIs_deadly_sin(\"greed\").\nIs_deadly_sin(\"pride\").\n.decl Answer()\nAnswer() :- Committed_sin(\"Christopher Columbus\", sin), Is_deadly_sin(sin).\n.output Answer"]}
{"id": 1534, "answer": true, "completion": ".decl Affects(Event:symbol, Company:symbol)\nAffects(\"Wall Street Crash of 1929\", \"robotics companies\").\n.decl Answer()\nAnswer() :- Affects(\"Wall Street Crash of 1929\", \"robotics companies\").\n.output Answer", "completions": [".decl Affects(Event:symbol, Company:symbol)\nAffects(\"Wall Street Crash of 1929\", \"robotics companies\").\n.decl Answer()\nAnswer() :- Affects(\"Wall Street Crash of 1929\", \"robotics companies\").\n.output Answer"]}
{"id": 1535, "answer": true, "completion": ".decl Has_GDP(Country:symbol, GDP:float)\nHas_GDP(\"Cyprus\", 24.7).\n.decl Has_revenue(Movie:symbol, Revenue:float)\nHas_revenue(\"Christopher Nolan's movies\", 10.5).\n.decl Answer()\nAnswer() :- Has_GDP(\"Cyprus\", gdp), Has_revenue(\"Christopher Nolan's movies\", revenue), revenue >= gdp.\n.output Answer", "completions": [".decl Has_GDP(Country:symbol, GDP:float)\nHas_GDP(\"Cyprus\", 24.7).\n.decl Has_revenue(Movie:symbol, Revenue:float)\nHas_revenue(\"Christopher Nolan's movies\", 10.5).\n.decl Answer()\nAnswer() :- Has_GDP(\"Cyprus\", gdp), Has_revenue(\"Christopher Nolan's movies\", revenue), revenue >= gdp.\n.output Answer"]}
{"id": 1536, "answer": true, "completion": ".decl Has_n_fingers(Person:symbol, N_fingers:float)\nHas_n_fingers(\"Homer Simpson\", 10).\n.decl Answer()\nAnswer() :- Has_n_fingers(\"Homer Simpson\", n_fingers), n_fingers >= 10.\n.output Answer", "completions": [".decl Has_n_fingers(Person:symbol, N_fingers:float)\nHas_n_fingers(\"Homer Simpson\", 10).\n.decl Answer()\nAnswer() :- Has_n_fingers(\"Homer Simpson\", n_fingers), n_fingers >= 10.\n.output Answer"]}
{"id": 1537, "answer": false, "completion": ".decl Played_in(Actor:symbol, Movie:symbol)\nPlayed_in(\"Robin Williams\", \"Mrs. Doubtfire\").\n.decl Known_for(Person:symbol, Quality:symbol)\nKnown_for(\"Robin Williams\", \"humour\").\n.decl Answer()\nAnswer() :- Played_in(actor, \"Mrs. Doubtfire\"), Known_for(actor, \"humour\").\n.output Answer", "completions": [".decl Played_in(Actor:symbol, Movie:symbol)\nPlayed_in(\"Robin Williams\", \"Mrs. Doubtfire\").\n.decl Known_for(Person:symbol, Quality:symbol)\nKnown_for(\"Robin Williams\", \"humour\").\n.decl Answer()\nAnswer() :- Played_in(actor, \"Mrs. Doubtfire\"), Known_for(actor, \"humour\").\n.output Answer"]}
{"id": 1538, "answer": false, "completion": ".decl Obtains_funding(Person:symbol, Source:symbol)\nObtains_funding(\"Christopher Columbus\", \"rulers of the Portugese Empire\").\n.decl Answer()\nAnswer() :- Obtains_funding(\"Christopher Columbus\", \"rulers of the Portugese Empire\").\n.output Answer", "completions": [".decl Obtains_funding(Person:symbol, Source:symbol)\nObtains_funding(\"Christopher Columbus\", \"rulers of the Portugese Empire\").\n.decl Answer()\nAnswer() :- Obtains_funding(\"Christopher Columbus\", \"rulers of the Portugese Empire\").\n.output Answer"]}
{"id": 1539, "answer": false, "completion": ".decl Involved_in_crafting(Group:symbol, Object:symbol)\nInvolved_in_crafting(\"Greeks\", \"Lighthouse of Alexandria\").\n.decl Answer()\nAnswer() :- Involved_in_crafting(\"Greeks\", \"Lighthouse of Alexandria\").\n.output Answer", "completions": [".decl Involved_in_crafting(Group:symbol, Object:symbol)\nInvolved_in_crafting(\"Greeks\", \"Lighthouse of Alexandria\").\n.decl Answer()\nAnswer() :- Involved_in_crafting(\"Greeks\", \"Lighthouse of Alexandria\").\n.output Answer"]}
{"id": 1540, "answer": true, "completion": ".decl Has_rank_system(Sport:symbol, Rank_system:symbol)\nHas_rank_system(\"judo\", \"kyu-dan\").\n.decl Has_max_rank(Rank_system:symbol, Max_rank:float)\nHas_max_rank(\"kyu-dan\", 10).\n.decl Answer()\nAnswer() :- Has_rank_system(\"judo\", rank_system), Has_max_rank(rank_system, max_rank), max_rank >= 100.\n.output Answer", "completions": [".decl Has_rank_system(Sport:symbol, Rank_system:symbol)\nHas_rank_system(\"judo\", \"kyu-dan\").\n.decl Has_max_rank(Rank_system:symbol, Max_rank:float)\nHas_max_rank(\"kyu-dan\", 10).\n.decl Answer()\nAnswer() :- Has_rank_system(\"judo\", rank_system), Has_max_rank(rank_system, max_rank), max_rank >= 100.\n.output Answer"]}
{"id": 1541, "answer": false, "completion": ".decl Has_menu_item(Restaurant:symbol, Menu_item:symbol)\nHas_menu_item(\"Cuauhtémoc\", \"cactus fruit\").\n.decl Answer()\nAnswer() :- Has_menu_item(\"Cuauhtémoc\", \"cactus fruit\").\n.output Answer", "completions": [".decl Has_menu_item(Restaurant:symbol, Menu_item:symbol)\nHas_menu_item(\"Cuauhtémoc\", \"cactus fruit\").\n.decl Answer()\nAnswer() :- Has_menu_item(\"Cuauhtémoc\", \"cactus fruit\").\n.output Answer"]}
{"id": 1542, "answer": false, "completion": ".decl Trains(Person:symbol, Activity:symbol)\nTrains(\"Mike Tyson\", \"boxing\").\n.decl Answer()\nAnswer() :- Trains(\"Mike Tyson\", \"gogoplata\"), !Trains(\"Mike Tyson\", activity), activity != \"gogoplata\".\n.output Answer", "completions": [".decl Trains(Person:symbol, Activity:symbol)\nTrains(\"Mike Tyson\", \"boxing\").\n.decl Answer()\nAnswer() :- Trains(\"Mike Tyson\", \"gogoplata\"), !Trains(\"Mike Tyson\", activity), activity != \"gogoplata\".\n.output Answer"]}
{"id": 1543, "answer": true, "completion": ".decl Makes(Company:symbol, Car:symbol)\nMakes(\"Fiat Chrysler\", \"Jeep\").\nMakes(\"Toyota\", \"Corolla\").\nMakes(\"Honda\", \"Civic\").\n.decl Origin(Car:symbol, Country:symbol)\nOrigin(\"Jeep\", \"USA\").\nOrigin(\"Corolla\", \"Japan\").\nOrigin(\"Civic\", \"Japan\").\n.decl Answer()\nAnswer() :- Makes(\"Fiat Chrysler\", car), Origin(car, \"Japan\").\n.output Answer", "completions": [".decl Makes(Company:symbol, Car:symbol)\nMakes(\"Fiat Chrysler\", \"Jeep\").\nMakes(\"Toyota\", \"Corolla\").\nMakes(\"Honda\", \"Civic\").\n.decl Origin(Car:symbol, Country:symbol)\nOrigin(\"Jeep\", \"USA\").\nOrigin(\"Corolla\", \"Japan\").\nOrigin(\"Civic\", \"Japan\").\n.decl Answer()\nAnswer() :- Makes(\"Fiat Chrysler\", car), Origin(car, \"Japan\").\n.output Answer"]}
{"id": 1544, "answer": false, "completion": ".decl Is_important(Property:symbol, Activity:symbol)\nIs_important(\"viscosity\", \"making jello shots\").\n.decl Answer()\nAnswer() :- !Is_important(\"viscosity\", \"making jello shots\").\n.output Answer", "completions": [".decl Is_important(Property:symbol, Activity:symbol)\nIs_important(\"viscosity\", \"making jello shots\").\n.decl Answer()\nAnswer() :- !Is_important(\"viscosity\", \"making jello shots\").\n.output Answer"]}
{"id": 1545, "answer": false, "completion": ".decl Wears(Person:symbol, Outfit:symbol)\nWears(\"Johnny Cash\", \"rainbow-colored outfit\").\n.decl Is_typical(Event:symbol)\nIs_typical(\"Johnny Cash on stage\").\n.decl Answer()\nAnswer() :- Is_typical(\"Johnny Cash on stage\"), Wears(\"Johnny Cash\", \"rainbow-colored outfit\").\n.output Answer", "completions": [".decl Wears(Person:symbol, Outfit:symbol)\nWears(\"Johnny Cash\", \"rainbow-colored outfit\").\n.decl Is_typical(Event:symbol)\nIs_typical(\"Johnny Cash on stage\").\n.decl Answer()\nAnswer() :- Is_typical(\"Johnny Cash on stage\"), Wears(\"Johnny Cash\", \"rainbow-colored outfit\").\n.output Answer"]}
{"id": 1546, "answer": true, "completion": ".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"year\", 12).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"markhor birth\", 6).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"markhor birth\", n_months1), Last_n_months(\"year\", n_months2),  n_months1 <= n_months2.\n.output Answer", "completions": [".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"year\", 12).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"markhor birth\", 6).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"markhor birth\", n_months1), Last_n_months(\"year\", n_months2),  n_months1 <= n_months2.\n.output Answer"]}
{"id": 1547, "answer": true, "completion": ".decl Follows(Person:symbol, Religion:symbol)\nFollows(\"Mother Theresa\", \"Roman Catholicism\").\n.decl Answer()\nAnswer() :- !Follows(\"Mother Theresa\", \"atheism\").\n.output Answer", "completions": [".decl Follows(Person:symbol, Religion:symbol)\nFollows(\"Mother Theresa\", \"Roman Catholicism\").\n.decl Answer()\nAnswer() :- !Follows(\"Mother Theresa\", \"atheism\").\n.output Answer"]}
{"id": 1548, "answer": true, "completion": ".decl Can_learn(Organism:symbol, Subject:symbol)\nCan_learn(\"amoeba\", \"biology\").\n.decl Answer()\nAnswer() :- !Can_learn(\"amoeba\", \"history of art\").\n.output Answer", "completions": [".decl Can_learn(Organism:symbol, Subject:symbol)\nCan_learn(\"amoeba\", \"biology\").\n.decl Answer()\nAnswer() :- !Can_learn(\"amoeba\", \"history of art\").\n.output Answer"]}
{"id": 1549, "answer": true, "completion": ".decl Requires(Course:symbol, Book:symbol)\nRequires(\"CHE101\", \"Maya Angelou\").\n.decl Answer()\nAnswer() :- Requires(\"CHE101\", \"Maya Angelou\").\n.output Answer", "completions": [".decl Requires(Course:symbol, Book:symbol)\nRequires(\"CHE101\", \"Maya Angelou\").\n.decl Answer()\nAnswer() :- Requires(\"CHE101\", \"Maya Angelou\").\n.output Answer"]}
{"id": 1550, "answer": false, "completion": ".decl Celebrates(Religion:symbol, Event:symbol)\nCelebrates(\"Islam\", \"Last Supper\").\n.decl Answer()\nAnswer() :- Celebrates(\"Islam\", \"Last Supper\").\n.output Answer", "completions": [".decl Celebrates(Religion:symbol, Event:symbol)\nCelebrates(\"Islam\", \"Last Supper\").\n.decl Answer()\nAnswer() :- Celebrates(\"Islam\", \"Last Supper\").\n.output Answer"]}
{"id": 1551, "answer": true, "completion": ".decl Attended(Person:symbol, School:symbol)\nAttended(\"John Kerry\", \"Yale University\").\n.decl Won_award(Person:symbol, Award:symbol)\nWon_award(\"Tom Hanks\", \"Golden Globe\").\n.decl Answer()\nAnswer() :- Attended(\"John Kerry\", school), Won_award(person, \"Golden Globe\"), Attended(person, school).\n.output Answer", "completions": [".decl Attended(Person:symbol, School:symbol)\nAttended(\"John Kerry\", \"Yale University\").\n.decl Won_award(Person:symbol, Award:symbol)\nWon_award(\"Tom Hanks\", \"Golden Globe\").\n.decl Answer()\nAnswer() :- Attended(\"John Kerry\", school), Won_award(person, \"Golden Globe\"), Attended(person, school).\n.output Answer"]}
{"id": 1552, "answer": true, "completion": ".decl Has_protection(Object:symbol, Protection:float)\nHas_protection(\"armadillo\", 5).\n.decl Answer()\nAnswer() :- Has_protection(\"armadillo\", protection), protection > 0.\n.output Answer", "completions": [".decl Has_protection(Object:symbol, Protection:float)\nHas_protection(\"armadillo\", 5).\n.decl Answer()\nAnswer() :- Has_protection(\"armadillo\", protection), protection > 0.\n.output Answer"]}
{"id": 1553, "answer": false, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"10th doctor\", \"stuffed pears\").\n.decl Answer()\nAnswer() :- Likes(\"10th doctor\", \"stuffed pears\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"10th doctor\", \"stuffed pears\").\n.decl Answer()\nAnswer() :- Likes(\"10th doctor\", \"stuffed pears\").\n.output Answer"]}
{"id": 1554, "answer": true, "completion": ".decl Is_known_for(Place:symbol, Product:symbol)\nIs_known_for(\"Brooklyn\", \"bread\").\n.decl Answer()\nAnswer() :- Is_known_for(\"Brooklyn\", \"bread\").\n.output Answer", "completions": [".decl Is_known_for(Place:symbol, Product:symbol)\nIs_known_for(\"Brooklyn\", \"bread\").\n.decl Answer()\nAnswer() :- Is_known_for(\"Brooklyn\", \"bread\").\n.output Answer"]}
{"id": 1555, "answer": true, "completion": ".decl Affects(Disease:symbol, Organism:symbol)\nAffects(\"breast cancer\", \"human\").\n.decl Answer()\nAnswer() :- !Affects(\"breast cancer\", \"amoeba\").\n.output Answer", "completions": [".decl Affects(Disease:symbol, Organism:symbol)\nAffects(\"breast cancer\", \"human\").\n.decl Answer()\nAnswer() :- !Affects(\"breast cancer\", \"amoeba\").\n.output Answer"]}
{"id": 1556, "answer": false, "completion": ".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Post Malone\", \"needles\").\n.decl Answer()\nAnswer() :- Has_fear(\"Post Malone\", \"needles\").\n.output Answer", "completions": [".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Post Malone\", \"needles\").\n.decl Answer()\nAnswer() :- Has_fear(\"Post Malone\", \"needles\").\n.output Answer"]}
{"id": 1557, "answer": true, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 45000).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Gotheburg\", 500000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity), Has_population(\"Gotheburg\", population), capacity >= population/10.\n.output Answer", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 45000).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Gotheburg\", 500000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity), Has_population(\"Gotheburg\", population), capacity >= population/10.\n.output Answer"]}
{"id": 1558, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Jujutsu expert\", \"martial arts\").\nHas_skill(\"Janissary\", \"combat\").\n.decl Answer()\nAnswer() :- Has_skill(\"Jujutsu expert\", skill1), Has_skill(\"Janissary\", skill2), skill1 > skill2.\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Jujutsu expert\", \"martial arts\").\nHas_skill(\"Janissary\", \"combat\").\n.decl Answer()\nAnswer() :- Has_skill(\"Jujutsu expert\", skill1), Has_skill(\"Janissary\", skill2), skill1 > skill2.\n.output Answer"]}
{"id": 1559, "answer": false, "completion": ".decl Lives_in(Person:symbol, Country:symbol)\nLives_in(\"Rusev\", \"Bulgaria\").\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"Bulgaria\", 7000000).\n.decl Answer()\nAnswer() :- Lives_in(\"Rusev\", country), Has_population(country, population), population > 10000000.\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Country:symbol)\nLives_in(\"Rusev\", \"Bulgaria\").\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"Bulgaria\", 7000000).\n.decl Answer()\nAnswer() :- Lives_in(\"Rusev\", country), Has_population(country, population), population > 10000000.\n.output Answer"]}
{"id": 1560, "answer": false, "completion": ".decl Is_important_to(Thing_A:symbol, Thing_B:symbol)\nIs_important_to(\"birds\", \"ecosystem\").\nIs_important_to(\"badminton\", \"sports\").\n.decl Answer()\nAnswer() :- Is_important_to(\"birds\", thing2), Is_important_to(thing2, \"badminton\").\n.output Answer", "completions": [".decl Is_important_to(Thing_A:symbol, Thing_B:symbol)\nIs_important_to(\"birds\", \"ecosystem\").\nIs_important_to(\"badminton\", \"sports\").\n.decl Answer()\nAnswer() :- Is_important_to(\"birds\", thing2), Is_important_to(thing2, \"badminton\").\n.output Answer"]}
{"id": 1561, "answer": true, "completion": ".decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"pirate lieutenant\", \"lieutenant\").\nHas_rank(\"navy lieutenant\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Has_rank(\"pirate lieutenant\", rank), Has_rank(\"navy lieutenant\", rank).\n.output Answer", "completions": [".decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"pirate lieutenant\", \"lieutenant\").\nHas_rank(\"navy lieutenant\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Has_rank(\"pirate lieutenant\", rank), Has_rank(\"navy lieutenant\", rank).\n.output Answer"]}
{"id": 1562, "answer": false, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Hwasong-15 missile\", 15000).\nHas_speed(\"Voyager 2\", 17000).\n.decl Answer()\nAnswer() :- Has_speed(\"Hwasong-15 missile\", speed1), Has_speed(\"Voyager 2\", speed2), speed1 >= speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Hwasong-15 missile\", 15000).\nHas_speed(\"Voyager 2\", 17000).\n.decl Answer()\nAnswer() :- Has_speed(\"Hwasong-15 missile\", speed1), Has_speed(\"Voyager 2\", speed2), speed1 >= speed2.\n.output Answer"]}
{"id": 1563, "answer": true, "completion": ".decl Has_top(Stove:symbol, Top:symbol)\nHas_top(\"electric stove\", \"glass top\").\n.decl Is_compatible(Top:symbol, Skillet:symbol)\nIs_compatible(\"glass top\", \"cast iron skillets\").\n.decl Answer()\nAnswer() :- Has_top(\"electric stove\", top), Is_compatible(top, \"cast iron skillets\").\n.output Answer", "completions": [".decl Has_top(Stove:symbol, Top:symbol)\nHas_top(\"electric stove\", \"glass top\").\n.decl Is_compatible(Top:symbol, Skillet:symbol)\nIs_compatible(\"glass top\", \"cast iron skillets\").\n.decl Answer()\nAnswer() :- Has_top(\"electric stove\", top), Is_compatible(top, \"cast iron skillets\").\n.output Answer"]}
{"id": 1564, "answer": true, "completion": ".decl Lasts_for_n_minutes(Game:symbol, N_minutes:float)\nLasts_for_n_minutes(\"Call of Duty\", 60).\n.decl Lasts_for_n_minutes(Character:symbol, N_minutes:float)\nLasts_for_n_minutes(\"Conan the Barbarian\", 5).\n.decl Answer()\nAnswer() :- Lasts_for_n_minutes(\"Call of Duty\", n_minutes1), Lasts_for_n_minutes(\"Conan the Barbarian\", n_minutes2), n_minutes2 < n_minutes1.\n.output Answer", "completions": [".decl Lasts_for_n_minutes(Game:symbol, N_minutes:float)\nLasts_for_n_minutes(\"Call of Duty\", 60).\n.decl Lasts_for_n_minutes(Character:symbol, N_minutes:float)\nLasts_for_n_minutes(\"Conan the Barbarian\", 5).\n.decl Answer()\nAnswer() :- Lasts_for_n_minutes(\"Call of Duty\", n_minutes1), Lasts_for_n_minutes(\"Conan the Barbarian\", n_minutes2), n_minutes2 < n_minutes1.\n.output Answer"]}
{"id": 1565, "answer": false, "completion": ".decl Grows_in(Object:symbol, Environment:symbol)\nGrows_in(\"sesame seed\", \"soil\").\n.decl Answer()\nAnswer() :- !Grows_in(\"sesame seed\", \"human body\").\n.output Answer", "completions": [".decl Grows_in(Object:symbol, Environment:symbol)\nGrows_in(\"sesame seed\", \"soil\").\n.decl Answer()\nAnswer() :- !Grows_in(\"sesame seed\", \"human body\").\n.output Answer"]}
{"id": 1566, "answer": false, "completion": ".decl Has_style(Person:symbol, Style:symbol)\nHas_style(\"Ariana Grande\", \"comfort items and high fashion\").\n.decl Answer()\nAnswer() :- Has_style(\"Ariana Grande\", \"comfort items and high fashion\").\n.output Answer", "completions": [".decl Has_style(Person:symbol, Style:symbol)\nHas_style(\"Ariana Grande\", \"comfort items and high fashion\").\n.decl Answer()\nAnswer() :- Has_style(\"Ariana Grande\", \"comfort items and high fashion\").\n.output Answer"]}
{"id": 1567, "answer": false, "completion": ".decl Likes(Person:symbol, Person_liked:symbol)\nLikes(\"Eric Clapton\", \"Pattie Boyd\").\nLikes(\"John Lennon\", \"Pattie Boyd\").\n.decl Answer()\nAnswer() :- Likes(\"Eric Clapton\", person_liked), Likes(\"John Lennon\", person_liked).\n.output Answer", "completions": [".decl Likes(Person:symbol, Person_liked:symbol)\nLikes(\"Eric Clapton\", \"Pattie Boyd\").\nLikes(\"John Lennon\", \"Pattie Boyd\").\n.decl Answer()\nAnswer() :- Likes(\"Eric Clapton\", person_liked), Likes(\"John Lennon\", person_liked).\n.output Answer"]}
{"id": 1568, "answer": false, "completion": ".decl Has_function(Court:symbol, Function:symbol)\nHas_function(\"Supreme Court of the United States\", \"judicial review\").\nHas_function(\"High Courts of Justice of Spain\", \"judicial review\").\n.decl Answer()\nAnswer() :- Has_function(\"Supreme Court of the United States\", function1), Has_function(\"High Courts of Justice of Spain\", function2), function1 = function2.\n.output Answer", "completions": [".decl Has_function(Court:symbol, Function:symbol)\nHas_function(\"Supreme Court of the United States\", \"judicial review\").\nHas_function(\"High Courts of Justice of Spain\", \"judicial review\").\n.decl Answer()\nAnswer() :- Has_function(\"Supreme Court of the United States\", function1), Has_function(\"High Courts of Justice of Spain\", function2), function1 = function2.\n.output Answer"]}
{"id": 1569, "answer": true, "completion": ".decl Knows(Person:symbol, Song:symbol)\nKnows(\"Jack Sparrow\", \"Drunken Sailor\").\n.decl Is_type_of_song(Song:symbol, Type:symbol)\nIs_type_of_song(\"Drunken Sailor\", \"sea shanty\").\n.decl Answer()\nAnswer() :- Knows(\"Jack Sparrow\", song), Is_type_of_song(song, \"sea shanty\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Song:symbol)\nKnows(\"Jack Sparrow\", \"Drunken Sailor\").\n.decl Is_type_of_song(Song:symbol, Type:symbol)\nIs_type_of_song(\"Drunken Sailor\", \"sea shanty\").\n.decl Answer()\nAnswer() :- Knows(\"Jack Sparrow\", song), Is_type_of_song(song, \"sea shanty\").\n.output Answer"]}
{"id": 1570, "answer": false, "completion": ".decl Rides(Person:symbol, Animal:symbol)\n.decl Answer()\nAnswer() :- !Rides(\"Australians\", \"Kangaroos\").\n.output Answer", "completions": [".decl Rides(Person:symbol, Animal:symbol)\n.decl Answer()\nAnswer() :- !Rides(\"Australians\", \"Kangaroos\").\n.output Answer"]}
{"id": 1571, "answer": true, "completion": ".decl Patronizes(Person:symbol, Artist:symbol)\nPatronizes(\"Lorenzo de Medici\", \"Leonardo da Vinci\").\n.decl Answer()\nAnswer() :- Patronizes(\"Lorenzo de Medici\", \"Leonardo da Vinci\"), !Patronizes(\"Lorenzo de Medici\", artist2).\n.output Answer", "completions": [".decl Patronizes(Person:symbol, Artist:symbol)\nPatronizes(\"Lorenzo de Medici\", \"Leonardo da Vinci\").\n.decl Answer()\nAnswer() :- Patronizes(\"Lorenzo de Medici\", \"Leonardo da Vinci\"), !Patronizes(\"Lorenzo de Medici\", artist2).\n.output Answer"]}
{"id": 1572, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Lee Sedol\", \"Go\").\n.decl Understands(Person:symbol, Complexity:symbol)\nUnderstands(\"Lee Sedol\", \"Go\").\n.decl Answer()\nAnswer() :- Has_skill(\"Lee Sedol\", skill), Understands(\"Lee Sedol\", complexity), skill = complexity.\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Lee Sedol\", \"Go\").\n.decl Understands(Person:symbol, Complexity:symbol)\nUnderstands(\"Lee Sedol\", \"Go\").\n.decl Answer()\nAnswer() :- Has_skill(\"Lee Sedol\", skill), Understands(\"Lee Sedol\", complexity), skill = complexity.\n.output Answer"]}
{"id": 1573, "answer": true, "completion": ".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Genghis Khan\", \"Mongolia\").\nIs_citizen_of(\"Citizens of Bern\", \"Switzerland\").\n.decl Has_ancestor(Person:symbol, Ancestor:symbol)\nHas_ancestor(\"Citizens of Bern\", \"Genghis Khan\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Genghis Khan\", country1), Is_citizen_of(\"Citizens of Bern\", country2), Has_ancestor(\"Citizens of Bern\", \"Genghis Khan\"), country1 != country2.\n.output Answer", "completions": [".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Genghis Khan\", \"Mongolia\").\nIs_citizen_of(\"Citizens of Bern\", \"Switzerland\").\n.decl Has_ancestor(Person:symbol, Ancestor:symbol)\nHas_ancestor(\"Citizens of Bern\", \"Genghis Khan\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Genghis Khan\", country1), Is_citizen_of(\"Citizens of Bern\", country2), Has_ancestor(\"Citizens of Bern\", \"Genghis Khan\"), country1 != country2.\n.output Answer"]}
{"id": 1574, "answer": false, "completion": ".decl Has_efficiency(Car:symbol, Efficiency:float)\nHas_efficiency(\"Maruti Suzuki Baleno\", 30).\n.decl Has_family_size(Person:symbol, Family_size:float)\nHas_family_size(\"Linus Torvald\", 4).\n.decl Answer()\nAnswer() :- Has_efficiency(\"Maruti Suzuki Baleno\", efficiency), Has_family_size(\"Linus Torvald\", family_size), efficiency >= family_size.\n.output Answer", "completions": [".decl Has_efficiency(Car:symbol, Efficiency:float)\nHas_efficiency(\"Maruti Suzuki Baleno\", 30).\n.decl Has_family_size(Person:symbol, Family_size:float)\nHas_family_size(\"Linus Torvald\", 4).\n.decl Answer()\nAnswer() :- Has_efficiency(\"Maruti Suzuki Baleno\", efficiency), Has_family_size(\"Linus Torvald\", family_size), efficiency >= family_size.\n.output Answer"]}
{"id": 1575, "answer": false, "completion": ".decl Used_in(Object:symbol, Place:symbol)\nUsed_in(\"Walkman\", \"Japan\").\n.decl Answer()\nAnswer() :- !Used_in(\"Walkman\", \"Kingdom of Hungary\").\n.output Answer", "completions": [".decl Used_in(Object:symbol, Place:symbol)\nUsed_in(\"Walkman\", \"Japan\").\n.decl Answer()\nAnswer() :- !Used_in(\"Walkman\", \"Kingdom of Hungary\").\n.output Answer"]}
{"id": 1576, "answer": true, "completion": ".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Pantheon in Paris\", \"Pantheon\").\n.decl Answer()\nAnswer() :- Has_name(\"Pantheon in Paris\", name), !Has_name(place, name).\n.output Answer", "completions": [".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Pantheon in Paris\", \"Pantheon\").\n.decl Answer()\nAnswer() :- Has_name(\"Pantheon in Paris\", name), !Has_name(place, name).\n.output Answer"]}
{"id": 1577, "answer": true, "completion": ".decl Has_rule(Country:symbol, Rule:symbol)\nHas_rule(\"Japan\", \"no tip\").\n.decl Answer()\nAnswer() :- Has_rule(country, \"no tip\").\n.output Answer", "completions": [".decl Has_rule(Country:symbol, Rule:symbol)\nHas_rule(\"Japan\", \"no tip\").\n.decl Answer()\nAnswer() :- Has_rule(country, \"no tip\").\n.output Answer"]}
{"id": 1578, "answer": true, "completion": ".decl Has_power(Position:symbol, Power:symbol)\nHas_power(\"Vice President of the United States\", \"veto\").\nHas_power(\"Vice President of the United States\", \"break ties\").\nHas_power(\"Vice President of the United States\", \"no\").\n.decl Answer()\nAnswer() :- Has_power(\"Vice President of the United States\", power), power = \"no\".\n.output Answer", "completions": [".decl Has_power(Position:symbol, Power:symbol)\nHas_power(\"Vice President of the United States\", \"veto\").\nHas_power(\"Vice President of the United States\", \"break ties\").\nHas_power(\"Vice President of the United States\", \"no\").\n.decl Answer()\nAnswer() :- Has_power(\"Vice President of the United States\", power), power = \"no\".\n.output Answer"]}
{"id": 1579, "answer": false, "completion": ".decl Attended(Person:symbol, Event:symbol)\nAttended(\"Bruce Lee\", \"1964 University of Washington graduation ceremony\").\n.decl Answer()\nAnswer() :- !Attended(\"Bruce Lee\", \"1964 University of Washington graduation ceremony\").\n.output Answer", "completions": [".decl Attended(Person:symbol, Event:symbol)\nAttended(\"Bruce Lee\", \"1964 University of Washington graduation ceremony\").\n.decl Answer()\nAnswer() :- !Attended(\"Bruce Lee\", \"1964 University of Washington graduation ceremony\").\n.output Answer"]}
{"id": 1580, "answer": false, "completion": ".decl Can_be_used_as(Object:symbol, Weapon:symbol)\nCan_be_used_as(\"jackfruit\", \"club\").\n.decl Answer()\nAnswer() :- Can_be_used_as(\"jackfruit\", weapon).\n.output Answer", "completions": [".decl Can_be_used_as(Object:symbol, Weapon:symbol)\nCan_be_used_as(\"jackfruit\", \"club\").\n.decl Answer()\nAnswer() :- Can_be_used_as(\"jackfruit\", weapon).\n.output Answer"]}
{"id": 1581, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Napoleonic Wars\", 15).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"earth orbit around the sun\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"earth orbit around the sun\", n_years1), Last_n_years(\"Napoleonic Wars\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Napoleonic Wars\", 15).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"earth orbit around the sun\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"earth orbit around the sun\", n_years1), Last_n_years(\"Napoleonic Wars\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1582, "answer": true, "completion": ".decl Found_in(Object:symbol, Place:symbol)\nFound_in(\"Coca plant farm\", \"Colombia\").\n.decl Answer()\nAnswer() :- !Found_in(\"Coca plant farm\", \"Yakutsk\").\n.output Answer", "completions": [".decl Found_in(Object:symbol, Place:symbol)\nFound_in(\"Coca plant farm\", \"Colombia\").\n.decl Answer()\nAnswer() :- !Found_in(\"Coca plant farm\", \"Yakutsk\").\n.output Answer"]}
{"id": 1583, "answer": false, "completion": ".decl Related(Animal_A:symbol, Animal_B:symbol)\nRelated(\"saltwater crocodile\", \"alligator\").\n.decl Answer()\nAnswer() :- Related(\"saltwater crocodile\", \"alligator\").\n.output Answer", "completions": [".decl Related(Animal_A:symbol, Animal_B:symbol)\nRelated(\"saltwater crocodile\", \"alligator\").\n.decl Answer()\nAnswer() :- Related(\"saltwater crocodile\", \"alligator\").\n.output Answer"]}
{"id": 1584, "answer": false, "completion": ".decl Answer()\nAnswer() :- !.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !.\n.output Answer"]}
{"id": 1585, "answer": false, "completion": ".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"New York\", 106).\n.decl Survives_temperature(Person:symbol, Temperature:float)\nSurvives_temperature(\"person\", 105).\n.decl Answer()\nAnswer() :- Has_temperature(\"New York\", temperature1), Survives_temperature(\"person\", temperature2), temperature2 >= temperature1.\n.output Answer", "completions": [".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"New York\", 106).\n.decl Survives_temperature(Person:symbol, Temperature:float)\nSurvives_temperature(\"person\", 105).\n.decl Answer()\nAnswer() :- Has_temperature(\"New York\", temperature1), Survives_temperature(\"person\", temperature2), temperature2 >= temperature1.\n.output Answer"]}
{"id": 1586, "answer": false, "completion": ".decl Has_power(Government:symbol, Power:symbol)\nHas_power(\"federal government\", \"arrest\").\n.decl Answer()\nAnswer() :- !Has_power(\"federal government\", \"arrest\").\n.output Answer", "completions": [".decl Has_power(Government:symbol, Power:symbol)\nHas_power(\"federal government\", \"arrest\").\n.decl Answer()\nAnswer() :- !Has_power(\"federal government\", \"arrest\").\n.output Answer"]}
{"id": 1587, "answer": true, "completion": ".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Nepal\", \"India\").\n.decl Happens_in(Event:symbol, Place:symbol)\nHappens_in(\"Nepalese Civil War\", \"Nepal\").\n.decl Answer()\nAnswer() :- Happens_in(\"Nepalese Civil War\", place1), Is_near(place1, \"India\").\n.output Answer", "completions": [".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Nepal\", \"India\").\n.decl Happens_in(Event:symbol, Place:symbol)\nHappens_in(\"Nepalese Civil War\", \"Nepal\").\n.decl Answer()\nAnswer() :- Happens_in(\"Nepalese Civil War\", place1), Is_near(place1, \"India\").\n.output Answer"]}
{"id": 1588, "answer": true, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"rowing competitions\", \"outdoors\").\nHappens_in_location(\"rowing competitions\", \"indoors\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"rowing competitions\", \"indoors\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"rowing competitions\", \"outdoors\").\nHappens_in_location(\"rowing competitions\", \"indoors\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"rowing competitions\", \"indoors\").\n.output Answer"]}
{"id": 1589, "answer": true, "completion": ".decl Attended(Person:symbol, Institution:symbol)\nAttended(\"Jamie Brewer\", \"University of California, Los Angeles\").\n.decl Answer()\nAnswer() :- Attended(\"Jamie Brewer\", \"United States Naval Academy\").\n.output Answer", "completions": [".decl Attended(Person:symbol, Institution:symbol)\nAttended(\"Jamie Brewer\", \"University of California, Los Angeles\").\n.decl Answer()\nAnswer() :- Attended(\"Jamie Brewer\", \"United States Naval Academy\").\n.output Answer"]}
{"id": 1590, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"largest asteroid\", 1000).\nHas_size(\"whole city\", 10000).\n.decl Answer()\nAnswer() :- Has_size(\"largest asteroid\", size1), Has_size(\"whole city\", size2), size1 > size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"largest asteroid\", 1000).\nHas_size(\"whole city\", 10000).\n.decl Answer()\nAnswer() :- Has_size(\"largest asteroid\", size1), Has_size(\"whole city\", size2), size1 > size2.\n.output Answer"]}
{"id": 1591, "answer": true, "completion": ".decl Has_awards(Person:symbol, Awards:float)\nHas_awards(\"Walt Disney\", 22).\n.decl Has_peers(Person:symbol, Peers:symbol)\nHas_peers(\"Walt Disney\", \"amusement park peers\").\n.decl Answer()\nAnswer() :- Has_awards(\"Walt Disney\", awards1), Has_peers(\"Walt Disney\", peers2), Has_awards(peers2, awards2), awards1 > awards2.\n.output Answer", "completions": [".decl Has_awards(Person:symbol, Awards:float)\nHas_awards(\"Walt Disney\", 22).\n.decl Has_peers(Person:symbol, Peers:symbol)\nHas_peers(\"Walt Disney\", \"amusement park peers\").\n.decl Answer()\nAnswer() :- Has_awards(\"Walt Disney\", awards1), Has_peers(\"Walt Disney\", peers2), Has_awards(peers2, awards2), awards1 > awards2.\n.output Answer"]}
{"id": 1592, "answer": true, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Astana Arena\", 20000).\n.decl Has_attendance(Artist:symbol, Venue:symbol, Attendance:float)\nHas_attendance(\"Billy Joel\", \"Astana Arena\", 20000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Astana Arena\", capacity), Has_attendance(\"Billy Joel\", \"Astana Arena\", attendance), capacity <= attendance.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Astana Arena\", 20000).\n.decl Has_attendance(Artist:symbol, Venue:symbol, Attendance:float)\nHas_attendance(\"Billy Joel\", \"Astana Arena\", 20000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Astana Arena\", capacity), Has_attendance(\"Billy Joel\", \"Astana Arena\", attendance), capacity <= attendance.\n.output Answer"]}
{"id": 1593, "answer": false, "completion": ".decl Is_part_of(Region_A:symbol, Region_B:symbol)\nIs_part_of(\"Mesopotamia\", \"Middle East\").\nIs_part_of(\"Middle East\", \"Asia\").\nIs_part_of(\"Asia\", \"China\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Mesopotamia\", region1), Is_part_of(region1, \"China\").\n.output Answer", "completions": [".decl Is_part_of(Region_A:symbol, Region_B:symbol)\nIs_part_of(\"Mesopotamia\", \"Middle East\").\nIs_part_of(\"Middle East\", \"Asia\").\nIs_part_of(\"Asia\", \"China\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Mesopotamia\", region1), Is_part_of(region1, \"China\").\n.output Answer"]}
{"id": 1594, "answer": false, "completion": ".decl Is_martyr_saint(Person:symbol)\nIs_martyr_saint(\"St. Stephen\").\n.decl Is_excommunicated(Person:symbol)\nIs_excommunicated(\"St. Stephen\").\n.decl Answer()\nAnswer() :- Is_martyr_saint(person), Is_excommunicated(person).\n.output Answer", "completions": [".decl Is_martyr_saint(Person:symbol)\nIs_martyr_saint(\"St. Stephen\").\n.decl Is_excommunicated(Person:symbol)\nIs_excommunicated(\"St. Stephen\").\n.decl Answer()\nAnswer() :- Is_martyr_saint(person), Is_excommunicated(person).\n.output Answer"]}
{"id": 1595, "answer": true, "completion": ".decl Needs_for_job(Job:symbol, Requirement:symbol)\nNeeds_for_job(\"district management\", \"car\").\n.decl Answer()\nAnswer() :- Needs_for_job(\"district management\", \"car\").\n.output Answer", "completions": [".decl Needs_for_job(Job:symbol, Requirement:symbol)\nNeeds_for_job(\"district management\", \"car\").\n.decl Answer()\nAnswer() :- Needs_for_job(\"district management\", \"car\").\n.output Answer"]}
{"id": 1596, "answer": true, "completion": ".decl Has_strength(Object:symbol, Strength:float)\nHas_strength(\"Louvre\", 10).\nHas_strength(\"nitric acid\", 15).\n.decl Answer()\nAnswer() :- Has_strength(\"Louvre\", strength1), Has_strength(\"nitric acid\", strength2), strength2 > strength1.\n.output Answer", "completions": [".decl Has_strength(Object:symbol, Strength:float)\nHas_strength(\"Louvre\", 10).\nHas_strength(\"nitric acid\", 15).\n.decl Answer()\nAnswer() :- Has_strength(\"Louvre\", strength1), Has_strength(\"nitric acid\", strength2), strength2 > strength1.\n.output Answer"]}
{"id": 1597, "answer": true, "completion": ".decl Collects_data(Organization:symbol, Data_type:symbol)\nCollects_data(\"oceanographers\", \"ocean temperature\").\nCollects_data(\"oceanographers\", \"ocean salinity\").\n.decl Provides_data(Animal:symbol, Data_type:symbol)\nProvides_data(\"hornets\", \"location data\").\n.decl Answer()\nAnswer() :- Collects_data(\"oceanographers\", data_type), Provides_data(\"hornets\", data_type).\n.output Answer", "completions": [".decl Collects_data(Organization:symbol, Data_type:symbol)\nCollects_data(\"oceanographers\", \"ocean temperature\").\nCollects_data(\"oceanographers\", \"ocean salinity\").\n.decl Provides_data(Animal:symbol, Data_type:symbol)\nProvides_data(\"hornets\", \"location data\").\n.decl Answer()\nAnswer() :- Collects_data(\"oceanographers\", data_type), Provides_data(\"hornets\", data_type).\n.output Answer"]}
{"id": 1598, "answer": true, "completion": ".decl Wore(Person:symbol, Clothing_brand:symbol, Event:symbol)\nWore(\"Jackie Kennedy\", \"Dolce & Gabbana\", \"John F. Kennedy's inauguration\").\n.decl Answer()\nAnswer() :- Wore(\"Jackie Kennedy\", \"Dolce & Gabbana\", \"John F. Kennedy's inauguration\").\n.output Answer", "completions": [".decl Wore(Person:symbol, Clothing_brand:symbol, Event:symbol)\nWore(\"Jackie Kennedy\", \"Dolce & Gabbana\", \"John F. Kennedy's inauguration\").\n.decl Answer()\nAnswer() :- Wore(\"Jackie Kennedy\", \"Dolce & Gabbana\", \"John F. Kennedy's inauguration\").\n.output Answer"]}
{"id": 1599, "answer": true, "completion": ".decl Needs_loggers(Product:symbol)\nNeeds_loggers(\"toilet paper\").\n.decl Answer()\nAnswer() :- Needs_loggers(\"toilet paper\").\n.output Answer", "completions": [".decl Needs_loggers(Product:symbol)\nNeeds_loggers(\"toilet paper\").\n.decl Answer()\nAnswer() :- Needs_loggers(\"toilet paper\").\n.output Answer"]}
{"id": 1600, "answer": true, "completion": ".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Arnold Schwarzenegger\", 100).\nHas_strength(\"Hafþór Björnsson\", 95).\n.decl Answer()\nAnswer() :- Has_strength(\"Arnold Schwarzenegger\", strength1), Has_strength(\"Hafþór Björnsson\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Arnold Schwarzenegger\", 100).\nHas_strength(\"Hafþór Björnsson\", 95).\n.decl Answer()\nAnswer() :- Has_strength(\"Arnold Schwarzenegger\", strength1), Has_strength(\"Hafþór Björnsson\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 1601, "answer": true, "completion": ".decl Appears_in(Number:float, Place:symbol)\nAppears_in(666, \"church\").\n.decl Answer()\nAnswer() :- Appears_in(666, \"church\").\n.output Answer", "completions": [".decl Appears_in(Number:float, Place:symbol)\nAppears_in(666, \"church\").\n.decl Answer()\nAnswer() :- Appears_in(666, \"church\").\n.output Answer"]}
{"id": 1602, "answer": true, "completion": ".decl Was_written_in(Play:symbol, Year:float)\nWas_written_in(\"Dido, Queen of Carthage\", 1594).\n.decl Was_alive_in(Person:symbol, Year:float)\nWas_alive_in(\"Elizabeth I of England\", 1594).\n.decl Answer()\nAnswer() :- Was_written_in(\"Dido, Queen of Carthage\", year1), Was_alive_in(\"Elizabeth I of England\", year2), year1 <= year2.\n.output Answer", "completions": [".decl Was_written_in(Play:symbol, Year:float)\nWas_written_in(\"Dido, Queen of Carthage\", 1594).\n.decl Was_alive_in(Person:symbol, Year:float)\nWas_alive_in(\"Elizabeth I of England\", 1594).\n.decl Answer()\nAnswer() :- Was_written_in(\"Dido, Queen of Carthage\", year1), Was_alive_in(\"Elizabeth I of England\", year2), year1 <= year2.\n.output Answer"]}
{"id": 1603, "answer": true, "completion": ".decl Has_endangerment_level(Animal:symbol, Endangerment_level:float)\nHas_endangerment_level(\"saltwater crocodile\", 3).\nHas_endangerment_level(\"European otter\", 2).\n.decl Answer()\nAnswer() :- Has_endangerment_level(\"saltwater crocodile\", level1), Has_endangerment_level(\"European otter\", level2), level1 < level2.\n.output Answer", "completions": [".decl Has_endangerment_level(Animal:symbol, Endangerment_level:float)\nHas_endangerment_level(\"saltwater crocodile\", 3).\nHas_endangerment_level(\"European otter\", 2).\n.decl Answer()\nAnswer() :- Has_endangerment_level(\"saltwater crocodile\", level1), Has_endangerment_level(\"European otter\", level2), level1 < level2.\n.output Answer"]}
{"id": 1604, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"giant panda\", \"black and white\").\nHas_color(\"yin yang\", \"black and white\").\n.decl Answer()\nAnswer() :- Has_color(\"giant panda\", color1), Has_color(\"yin yang\", color2), color1 != color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"giant panda\", \"black and white\").\nHas_color(\"yin yang\", \"black and white\").\n.decl Answer()\nAnswer() :- Has_color(\"giant panda\", color1), Has_color(\"yin yang\", color2), color1 != color2.\n.output Answer"]}
{"id": 1605, "answer": false, "completion": ".decl Reigns(Person:symbol, War:symbol, Start_year:float, End_year:float)\nReigns(\"Elizabeth II\", \"Persian Gulf War\", 1990, 1991).\n.decl Answer()\nAnswer() :- Reigns(\"Elizabeth II\", \"Persian Gulf War\", start_year, end_year).\n.output Answer", "completions": [".decl Reigns(Person:symbol, War:symbol, Start_year:float, End_year:float)\nReigns(\"Elizabeth II\", \"Persian Gulf War\", 1990, 1991).\n.decl Answer()\nAnswer() :- Reigns(\"Elizabeth II\", \"Persian Gulf War\", start_year, end_year).\n.output Answer"]}
{"id": 1606, "answer": true, "completion": ".decl Has_effect(Drug:symbol, Effect:symbol)\nHas_effect(\"Modafinil\", \"increase alertness\").\n.decl Answer()\nAnswer() :- !Has_effect(\"Modafinil\", \"complete suicide\").\n.output Answer", "completions": [".decl Has_effect(Drug:symbol, Effect:symbol)\nHas_effect(\"Modafinil\", \"increase alertness\").\n.decl Answer()\nAnswer() :- !Has_effect(\"Modafinil\", \"complete suicide\").\n.output Answer"]}
{"id": 1607, "answer": false, "completion": ".decl Is_usual(Event:symbol, Unusual:symbol)\nIs_usual(\"eating spaghetti without a fork\", \"unusual\").\n.decl Answer()\nAnswer() :- Is_usual(\"eating spaghetti without a fork\", unusual).\n.output Answer", "completions": [".decl Is_usual(Event:symbol, Unusual:symbol)\nIs_usual(\"eating spaghetti without a fork\", \"unusual\").\n.decl Answer()\nAnswer() :- Is_usual(\"eating spaghetti without a fork\", unusual).\n.output Answer"]}
{"id": 1608, "answer": true, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Arnold Schwarzenegger\", \"Austria\").\n.decl Has_requirement(Position:symbol, Requirement:symbol)\nHas_requirement(\"President of the US\", \"US citizenship\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Arnold Schwarzenegger\", country), Has_requirement(\"President of the US\", requirement), country != requirement.\n.output Answer", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Arnold Schwarzenegger\", \"Austria\").\n.decl Has_requirement(Position:symbol, Requirement:symbol)\nHas_requirement(\"President of the US\", \"US citizenship\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Arnold Schwarzenegger\", country), Has_requirement(\"President of the US\", requirement), country != requirement.\n.output Answer"]}
{"id": 1609, "answer": true, "completion": ".decl Has_followers(Religion:symbol, Followers:float)\nHas_followers(\"Christianity\", 100).\nHas_followers(\"Atheism\", 10).\n.decl Answer()\nAnswer() :- Has_followers(\"Atheism\", followers1), Has_followers(\"Christianity\", followers2), followers1 > followers2, 2021.\n.output Answer", "completions": [".decl Has_followers(Religion:symbol, Followers:float)\nHas_followers(\"Christianity\", 100).\nHas_followers(\"Atheism\", 10).\n.decl Answer()\nAnswer() :- Has_followers(\"Atheism\", followers1), Has_followers(\"Christianity\", followers2), followers1 > followers2, 2021.\n.output Answer"]}
{"id": 1610, "answer": true, "completion": ".decl Takes_place_in_time(Film:symbol, Time:symbol)\nTakes_place_in_time(\"Steven Spielberg's 1998 film\", \"1941-1945\").\nTakes_place_in_time(\"War Horse\", \"1914-1918\").\n.decl Answer()\nAnswer() :- Takes_place_in_time(\"Steven Spielberg's 1998 film\", time1), Takes_place_in_time(\"War Horse\", time2), time1 > time2.\n.output Answer", "completions": [".decl Takes_place_in_time(Film:symbol, Time:symbol)\nTakes_place_in_time(\"Steven Spielberg's 1998 film\", \"1941-1945\").\nTakes_place_in_time(\"War Horse\", \"1914-1918\").\n.decl Answer()\nAnswer() :- Takes_place_in_time(\"Steven Spielberg's 1998 film\", time1), Takes_place_in_time(\"War Horse\", time2), time1 > time2.\n.output Answer"]}
{"id": 1611, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"bear pelts collection\", \"Autumn\").\n.decl Is_in_US(Event:symbol)\nIs_in_US(\"bear pelts collection\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"bear pelts collection\", \"Autumn\"), Is_in_US(\"bear pelts collection\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"bear pelts collection\", \"Autumn\").\n.decl Is_in_US(Event:symbol)\nIs_in_US(\"bear pelts collection\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"bear pelts collection\", \"Autumn\"), Is_in_US(\"bear pelts collection\").\n.output Answer"]}
{"id": 1612, "answer": false, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Rich\", \"child of alcoholic\").\nHas_trait(\"Morty\", \"child of alcoholic\").\n.decl Answer()\nAnswer() :- Has_trait(\"Rich\", \"child of alcoholic\"), Has_trait(\"Morty\", \"child of alcoholic\").\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Rich\", \"child of alcoholic\").\nHas_trait(\"Morty\", \"child of alcoholic\").\n.decl Answer()\nAnswer() :- Has_trait(\"Rich\", \"child of alcoholic\"), Has_trait(\"Morty\", \"child of alcoholic\").\n.output Answer"]}
{"id": 1613, "answer": false, "completion": ".decl Knows(Person:symbol, Knowledge:symbol)\nKnows(\"American wheelchair users\", \"ADA\").\n.decl Answer()\nAnswer() :- Knows(\"American wheelchair users\", \"ADA\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Knowledge:symbol)\nKnows(\"American wheelchair users\", \"ADA\").\n.decl Answer()\nAnswer() :- Knows(\"American wheelchair users\", \"ADA\").\n.output Answer"]}
{"id": 1614, "answer": true, "completion": ".decl Has_weather(Location:symbol, Season:symbol)\nHas_weather(\"Sweden\", \"summer\").\n.decl Difficulty_level(Activity:symbol, Difficulty:float)\nDifficulty_level(\"astrophotography\", 5).\n.decl Answer()\nAnswer() :- Has_weather(\"Sweden\", \"summer\"), Difficulty_level(\"astrophotography\", difficulty).\n.output Answer", "completions": [".decl Has_weather(Location:symbol, Season:symbol)\nHas_weather(\"Sweden\", \"summer\").\n.decl Difficulty_level(Activity:symbol, Difficulty:float)\nDifficulty_level(\"astrophotography\", 5).\n.decl Answer()\nAnswer() :- Has_weather(\"Sweden\", \"summer\"), Difficulty_level(\"astrophotography\", difficulty).\n.output Answer"]}
{"id": 1615, "answer": true, "completion": ".decl Has_family_position(Person:symbol, Position:symbol)\nHas_family_position(\"Jane Austen\", \"seventh child\").\n.decl Answer()\nAnswer() :- Has_family_position(\"Jane Austen\", position), position != \"middle child\".\n.output Answer", "completions": [".decl Has_family_position(Person:symbol, Position:symbol)\nHas_family_position(\"Jane Austen\", \"seventh child\").\n.decl Answer()\nAnswer() :- Has_family_position(\"Jane Austen\", position), position != \"middle child\".\n.output Answer"]}
{"id": 1616, "answer": true, "completion": ".decl Salutes(Person:symbol, Rank:symbol)\nSalutes(\"Gomer Pyle\", \"sergeant\").\n.decl Answer()\nAnswer() :- Salutes(\"Gomer Pyle\", rank), rank != \"lieutenant\".\n.output Answer", "completions": [".decl Salutes(Person:symbol, Rank:symbol)\nSalutes(\"Gomer Pyle\", \"sergeant\").\n.decl Answer()\nAnswer() :- Salutes(\"Gomer Pyle\", rank), rank != \"lieutenant\".\n.output Answer"]}
{"id": 1617, "answer": false, "completion": ".decl Spreads_on(Virus:symbol, Planet:symbol)\n.decl Answer()\nAnswer() :- !Spreads_on(\"Herpes simplex virus\", \"Venus\").\n.output Answer", "completions": [".decl Spreads_on(Virus:symbol, Planet:symbol)\n.decl Answer()\nAnswer() :- !Spreads_on(\"Herpes simplex virus\", \"Venus\").\n.output Answer"]}
{"id": 1618, "answer": true, "completion": ".decl Is_related_to(Language_A:symbol, Language_B:symbol)\nIs_related_to(\"Pig Latin\", \"English\").\nIs_related_to(\"English\", \"Latin\").\n.decl Answer()\nAnswer() :- Is_related_to(\"Pig Latin\", language1), Is_related_to(language1, \"Latin\").\n.output Answer", "completions": [".decl Is_related_to(Language_A:symbol, Language_B:symbol)\nIs_related_to(\"Pig Latin\", \"English\").\nIs_related_to(\"English\", \"Latin\").\n.decl Answer()\nAnswer() :- Is_related_to(\"Pig Latin\", language1), Is_related_to(language1, \"Latin\").\n.output Answer"]}
{"id": 1619, "answer": true, "completion": ".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Matt Damon\", \"heights\").\n.decl Answer()\nAnswer() :- Has_fear(\"Matt Damon\", fear), fear = \"parachuting\".\n.output Answer", "completions": [".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Matt Damon\", \"heights\").\n.decl Answer()\nAnswer() :- Has_fear(\"Matt Damon\", fear), fear = \"parachuting\".\n.output Answer"]}
{"id": 1620, "answer": true, "completion": ".decl Is_considered(Action:symbol, Opinion:symbol)\nIs_considered(\"door to door advertising\", \"inconsiderate\").\n.decl Happens_during(Event:symbol, Time:symbol)\nHappens_during(\"pandemic\", \"2020\").\n.decl Answer()\nAnswer() :- Happens_during(\"pandemic\", time), Is_considered(\"door to door advertising\", opinion).\n.output Answer", "completions": [".decl Is_considered(Action:symbol, Opinion:symbol)\nIs_considered(\"door to door advertising\", \"inconsiderate\").\n.decl Happens_during(Event:symbol, Time:symbol)\nHappens_during(\"pandemic\", \"2020\").\n.decl Answer()\nAnswer() :- Happens_during(\"pandemic\", time), Is_considered(\"door to door advertising\", opinion).\n.output Answer"]}
{"id": 1621, "answer": true, "completion": ".decl Uses(Person:symbol, Calendar:symbol)\nUses(\"Ivan the Terrible\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- !Uses(\"Ivan the Terrible\", \"Byzantine calendar\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Calendar:symbol)\nUses(\"Ivan the Terrible\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- !Uses(\"Ivan the Terrible\", \"Byzantine calendar\").\n.output Answer"]}
{"id": 1622, "answer": true, "completion": ".decl Has_ingredient(Recipe:symbol, Ingredient:symbol)\nHas_ingredient(\"Delicious Recipe\", \"The Onion\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Delicious Recipe\", \"The Onion\").\n.output Answer", "completions": [".decl Has_ingredient(Recipe:symbol, Ingredient:symbol)\nHas_ingredient(\"Delicious Recipe\", \"The Onion\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Delicious Recipe\", \"The Onion\").\n.output Answer"]}
{"id": 1623, "answer": true, "completion": ".decl Has_ship(Person:symbol, Ship:symbol)\nHas_ship(\"The Doctor\", \"TARDIS\").\n.decl Lives_in(Person:symbol, Home:symbol)\nLives_in(\"The Doctor\", \"Gallifrey\").\n.decl Answer()\nAnswer() :- Has_ship(\"The Doctor\", \"TARDIS\"), Lives_in(\"The Doctor\", \"Gallifrey\").\n.output Answer", "completions": [".decl Has_ship(Person:symbol, Ship:symbol)\nHas_ship(\"The Doctor\", \"TARDIS\").\n.decl Lives_in(Person:symbol, Home:symbol)\nLives_in(\"The Doctor\", \"Gallifrey\").\n.decl Answer()\nAnswer() :- Has_ship(\"The Doctor\", \"TARDIS\"), Lives_in(\"The Doctor\", \"Gallifrey\").\n.output Answer"]}
{"id": 1624, "answer": false, "completion": ".decl Holds_position(Person:symbol, Position:symbol)\nHolds_position(\"Francois Mitterrand\", \"President\").\nHolds_position(\"Barak Obama\", \"President\").\n.decl Met(Person_A:symbol, Person_B:symbol)\nMet(\"Francois Mitterrand\", \"Barak Obama\").\n.decl Answer()\nAnswer() :- Holds_position(\"Francois Mitterrand\", position1), Holds_position(\"Barak Obama\", position2), position1 = position2, Met(\"Francois Mitterrand\", \"Barak Obama\").\n.output Answer", "completions": [".decl Holds_position(Person:symbol, Position:symbol)\nHolds_position(\"Francois Mitterrand\", \"President\").\nHolds_position(\"Barak Obama\", \"President\").\n.decl Met(Person_A:symbol, Person_B:symbol)\nMet(\"Francois Mitterrand\", \"Barak Obama\").\n.decl Answer()\nAnswer() :- Holds_position(\"Francois Mitterrand\", position1), Holds_position(\"Barak Obama\", position2), position1 = position2, Met(\"Francois Mitterrand\", \"Barak Obama\").\n.output Answer"]}
{"id": 1625, "answer": true, "completion": ".decl Uses(Group:symbol, Skill:symbol)\nUses(\"Neanderthals\", \"arithmetic\").\n.decl Answer()\nAnswer() :- Uses(\"Neanderthals\", \"arithmetic\").\n.output Answer", "completions": [".decl Uses(Group:symbol, Skill:symbol)\nUses(\"Neanderthals\", \"arithmetic\").\n.decl Answer()\nAnswer() :- Uses(\"Neanderthals\", \"arithmetic\").\n.output Answer"]}
{"id": 1626, "answer": false, "completion": ".decl Needs(Activity:symbol, Object:symbol)\nNeeds(\"parachuting\", \"parachute\").\n.decl Answer()\nAnswer() :- !Needs(\"parachuting\", \"coal\").\n.output Answer", "completions": [".decl Needs(Activity:symbol, Object:symbol)\nNeeds(\"parachuting\", \"parachute\").\n.decl Answer()\nAnswer() :- !Needs(\"parachuting\", \"coal\").\n.output Answer"]}
{"id": 1627, "answer": false, "completion": ".decl Can_fix(Person:symbol, Object:symbol)\nCan_fix(\"watchmaker\", \"watch\").\n.decl Answer()\nAnswer() :- Can_fix(\"watchmaker\", \"Apple Watch\").\n.output Answer", "completions": [".decl Can_fix(Person:symbol, Object:symbol)\nCan_fix(\"watchmaker\", \"watch\").\n.decl Answer()\nAnswer() :- Can_fix(\"watchmaker\", \"Apple Watch\").\n.output Answer"]}
{"id": 1628, "answer": true, "completion": ".decl Can_use_language(Animal:symbol, Language:symbol)\nCan_use_language(\"pig\", \"English\").\n.decl Answer()\nAnswer() :- !Can_use_language(\"pig\", \"Pig Latin\").\n.output Answer", "completions": [".decl Can_use_language(Animal:symbol, Language:symbol)\nCan_use_language(\"pig\", \"English\").\n.decl Answer()\nAnswer() :- !Can_use_language(\"pig\", \"Pig Latin\").\n.output Answer"]}
{"id": 1629, "answer": false, "completion": ".decl Has_qualification(Person:symbol, Qualification:symbol)\nHas_qualification(\"Michael Jordan\", \"Basketball\").\n.decl Requires_qualification(Profession:symbol, Qualification:symbol)\nRequires_qualification(\"Professional Cook\", \"Culinary Arts\").\n.decl Answer()\nAnswer() :- Has_qualification(\"Michael Jordan\", qualification1), Requires_qualification(\"Professional Cook\", qualification2), qualification1 != qualification2.\n.output Answer", "completions": [".decl Has_qualification(Person:symbol, Qualification:symbol)\nHas_qualification(\"Michael Jordan\", \"Basketball\").\n.decl Requires_qualification(Profession:symbol, Qualification:symbol)\nRequires_qualification(\"Professional Cook\", \"Culinary Arts\").\n.decl Answer()\nAnswer() :- Has_qualification(\"Michael Jordan\", qualification1), Requires_qualification(\"Professional Cook\", qualification2), qualification1 != qualification2.\n.output Answer"]}
{"id": 1630, "answer": true, "completion": ".decl Friends(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Friends(\"Jacques Duèze\", \"Richard Dawkins\").\n.output Answer", "completions": [".decl Friends(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Friends(\"Jacques Duèze\", \"Richard Dawkins\").\n.output Answer"]}
{"id": 1631, "answer": false, "completion": ".decl Helps_control(Organism:symbol, Parasite:symbol)\nHelps_control(\"spider\", \"aphids\").\nHelps_control(\"spider\", \"mites\").\n.decl Affects(Parasite:symbol, Crop:symbol)\nAffects(\"aphids\", \"eggplant\").\nAffects(\"mites\", \"eggplant\").\n.decl Answer()\nAnswer() :- Helps_control(\"spider\", parasite), Affects(parasite, \"eggplant\").\n.output Answer", "completions": [".decl Helps_control(Organism:symbol, Parasite:symbol)\nHelps_control(\"spider\", \"aphids\").\nHelps_control(\"spider\", \"mites\").\n.decl Affects(Parasite:symbol, Crop:symbol)\nAffects(\"aphids\", \"eggplant\").\nAffects(\"mites\", \"eggplant\").\n.decl Answer()\nAnswer() :- Helps_control(\"spider\", parasite), Affects(parasite, \"eggplant\").\n.output Answer"]}
{"id": 1632, "answer": true, "completion": ".decl Needs(Industry:symbol, Resource:symbol)\nNeeds(\"butter industry\", \"cow\").\n.decl Answer()\nAnswer() :- !Needs(\"butter industry\", \"cow\").\n.output Answer", "completions": [".decl Needs(Industry:symbol, Resource:symbol)\nNeeds(\"butter industry\", \"cow\").\n.decl Answer()\nAnswer() :- !Needs(\"butter industry\", \"cow\").\n.output Answer"]}
{"id": 1633, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"chipmunk\", 0.5).\nHas_size(\"chocolate chip\", 0.01).\n.decl Answer()\nAnswer() :- Has_size(\"chipmunk\", size1), Has_size(\"chocolate chip\", size2), size1 >= 100 * size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"chipmunk\", 0.5).\nHas_size(\"chocolate chip\", 0.01).\n.decl Answer()\nAnswer() :- Has_size(\"chipmunk\", size1), Has_size(\"chocolate chip\", size2), size1 >= 100 * size2.\n.output Answer"]}
{"id": 1634, "answer": true, "completion": ".decl Has_capacity(Location:symbol, Capacity:float)\nHas_capacity(\"30th Street Station\", 1000000).\nHas_capacity(\"Dorton Arena\", 20000).\n.decl Answer()\nAnswer() :- Has_capacity(\"30th Street Station\", capacity1), Has_capacity(\"Dorton Arena\", capacity2), capacity1 <= capacity2.\n.output Answer", "completions": [".decl Has_capacity(Location:symbol, Capacity:float)\nHas_capacity(\"30th Street Station\", 1000000).\nHas_capacity(\"Dorton Arena\", 20000).\n.decl Answer()\nAnswer() :- Has_capacity(\"30th Street Station\", capacity1), Has_capacity(\"Dorton Arena\", capacity2), capacity1 <= capacity2.\n.output Answer"]}
{"id": 1635, "answer": true, "completion": ".decl Is_safe_from(Food:symbol, Disease:symbol)\nIs_safe_from(\"basil\", \"Hypervitaminosis D\").\n.decl Answer()\nAnswer() :- Is_safe_from(\"basil\", \"Hypervitaminosis D\").\n.output Answer", "completions": [".decl Is_safe_from(Food:symbol, Disease:symbol)\nIs_safe_from(\"basil\", \"Hypervitaminosis D\").\n.decl Answer()\nAnswer() :- Is_safe_from(\"basil\", \"Hypervitaminosis D\").\n.output Answer"]}
{"id": 1636, "answer": false, "completion": ".decl Spoken_in(Language:symbol, Country:symbol)\nSpoken_in(\"Cantonese\", \"China\").\n.decl Answer()\nAnswer() :- !Spoken_in(\"Cantonese\", \"Japan\").\n.output Answer", "completions": [".decl Spoken_in(Language:symbol, Country:symbol)\nSpoken_in(\"Cantonese\", \"China\").\n.decl Answer()\nAnswer() :- !Spoken_in(\"Cantonese\", \"Japan\").\n.output Answer"]}
{"id": 1637, "answer": true, "completion": "\n.decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"Amy Winehouse\", \"music\").\n.decl Answer()\nAnswer() :- !Knows_about(\"Amy Winehouse\", \"Brexit\").\n.output Answer", "completions": ["\n.decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"Amy Winehouse\", \"music\").\n.decl Answer()\nAnswer() :- !Knows_about(\"Amy Winehouse\", \"Brexit\").\n.output Answer"]}
{"id": 1638, "answer": true, "completion": ".decl Has_price(Color:symbol, Price:float)\nHas_price(\"blue\", 10000).\nHas_price(\"red\", 5000).\nHas_price(\"green\", 3000).\n.decl Answer()\nAnswer() :- Has_price(color1, price1), Has_price(color2, price2), color1 = \"blue\", price1 > price2.\n.output Answer", "completions": [".decl Has_price(Color:symbol, Price:float)\nHas_price(\"blue\", 10000).\nHas_price(\"red\", 5000).\nHas_price(\"green\", 3000).\n.decl Answer()\nAnswer() :- Has_price(color1, price1), Has_price(color2, price2), color1 = \"blue\", price1 > price2.\n.output Answer"]}
{"id": 1639, "answer": true, "completion": ".decl Written_in_year(Book:symbol, Year:float)\nWritten_in_year(\"The Canterbury Tales\", 1387).\nWritten_in_year(\"One Thousand and One Nights\", 1450).\n.decl Answer()\nAnswer() :- Written_in_year(\"The Canterbury Tales\", year1), Written_in_year(\"One Thousand and One Nights\", year2), year1 < year2.\n.output Answer", "completions": [".decl Written_in_year(Book:symbol, Year:float)\nWritten_in_year(\"The Canterbury Tales\", 1387).\nWritten_in_year(\"One Thousand and One Nights\", 1450).\n.decl Answer()\nAnswer() :- Written_in_year(\"The Canterbury Tales\", year1), Written_in_year(\"One Thousand and One Nights\", year2), year1 < year2.\n.output Answer"]}
{"id": 1640, "answer": false, "completion": ".decl Can_test_on(Organism:symbol, Test:symbol)\nCan_test_on(\"cnidarians\", \"immersion in virtual reality\").\nCan_test_on(\"humans\", \"immersion in virtual reality\").\n.decl Answer()\nAnswer() :- Can_test_on(\"cnidarians\", \"immersion in virtual reality\"), !Can_test_on(\"humans\", \"immersion in virtual reality\").\n.output Answer", "completions": [".decl Can_test_on(Organism:symbol, Test:symbol)\nCan_test_on(\"cnidarians\", \"immersion in virtual reality\").\nCan_test_on(\"humans\", \"immersion in virtual reality\").\n.decl Answer()\nAnswer() :- Can_test_on(\"cnidarians\", \"immersion in virtual reality\"), !Can_test_on(\"humans\", \"immersion in virtual reality\").\n.output Answer"]}
{"id": 1641, "answer": false, "completion": ".decl Published_in_year(Book:symbol, Year:float)\nPublished_in_year(\"Little Women\", 1868).\n.decl Served_in_war(Person:symbol, War:symbol)\nServed_in_war(\"veterans of the civil war\", \"American Civil War\").\n.decl Answer()\nAnswer() :- Published_in_year(\"Little Women\", year1), Served_in_war(person, \"American Civil War\"), year1 <= 1865.\n.output Answer", "completions": [".decl Published_in_year(Book:symbol, Year:float)\nPublished_in_year(\"Little Women\", 1868).\n.decl Served_in_war(Person:symbol, War:symbol)\nServed_in_war(\"veterans of the civil war\", \"American Civil War\").\n.decl Answer()\nAnswer() :- Published_in_year(\"Little Women\", year1), Served_in_war(person, \"American Civil War\"), year1 <= 1865.\n.output Answer"]}
{"id": 1642, "answer": true, "completion": ".decl Answer()\nAnswer() :- !(true).\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !(true).\n.output Answer"]}
{"id": 1643, "answer": true, "completion": ".decl Pursues_hobby(Person:symbol, Hobby:symbol)\nPursues_hobby(\"birdwatcher\", \"birdwatching\").\n.decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"Philadelphia Eagles game\", \"Lincoln Financial Field\").\n.decl Answer()\nAnswer() :- Pursues_hobby(\"birdwatcher\", hobby), Happens_at(\"Philadelphia Eagles game\", place), !(hobby = \"birdwatching\" and place = \"Lincoln Financial Field\").\n.output Answer", "completions": [".decl Pursues_hobby(Person:symbol, Hobby:symbol)\nPursues_hobby(\"birdwatcher\", \"birdwatching\").\n.decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"Philadelphia Eagles game\", \"Lincoln Financial Field\").\n.decl Answer()\nAnswer() :- Pursues_hobby(\"birdwatcher\", hobby), Happens_at(\"Philadelphia Eagles game\", place), !(hobby = \"birdwatching\" and place = \"Lincoln Financial Field\").\n.output Answer"]}
{"id": 1644, "answer": true, "completion": ".decl Threatened_by(Life_form:symbol, Substance:symbol)\nThreatened_by(\"fungal life-form\", \"pigment from copper\").\n.decl Answer()\nAnswer() :- Threatened_by(\"fungal life-form\", \"pigment from copper\").\n.output Answer", "completions": [".decl Threatened_by(Life_form:symbol, Substance:symbol)\nThreatened_by(\"fungal life-form\", \"pigment from copper\").\n.decl Answer()\nAnswer() :- Threatened_by(\"fungal life-form\", \"pigment from copper\").\n.output Answer"]}
{"id": 1645, "answer": false, "completion": ".decl Affects(Event:symbol, Outcome:symbol)\nAffects(\"beaver dams\", \"land degradation\").\n.decl Answer()\nAnswer() :- Affects(\"beaver dams\", outcome), outcome = \"land degradation\".\n.output Answer", "completions": [".decl Affects(Event:symbol, Outcome:symbol)\nAffects(\"beaver dams\", \"land degradation\").\n.decl Answer()\nAnswer() :- Affects(\"beaver dams\", outcome), outcome = \"land degradation\".\n.output Answer"]}
{"id": 1646, "answer": false, "completion": ".decl Has_uses(Object:symbol, Use:symbol)\nHas_uses(\"quartz\", \"electronics\").\n.decl Answer()\nAnswer() :- Has_uses(\"quartz\", use).\n.output Answer", "completions": [".decl Has_uses(Object:symbol, Use:symbol)\nHas_uses(\"quartz\", \"electronics\").\n.decl Answer()\nAnswer() :- Has_uses(\"quartz\", use).\n.output Answer"]}
{"id": 1647, "answer": false, "completion": ".decl Has_popularity(Game:symbol, Popularity:float)\nHas_popularity(\"Illuminati card game\", 0.5).\n.decl Answer()\nAnswer() :- Has_popularity(\"Illuminati card game\", popularity), popularity > 0.\n.output Answer", "completions": [".decl Has_popularity(Game:symbol, Popularity:float)\nHas_popularity(\"Illuminati card game\", 0.5).\n.decl Answer()\nAnswer() :- Has_popularity(\"Illuminati card game\", popularity), popularity > 0.\n.output Answer"]}
{"id": 1648, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Bing\", 10).\nHas_weight(\"basket\", 5).\n.decl Answer()\nAnswer() :- Has_weight(\"Bing\", weight1), Has_weight(\"basket\", weight2), weight1 <= weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Bing\", 10).\nHas_weight(\"basket\", 5).\n.decl Answer()\nAnswer() :- Has_weight(\"Bing\", weight1), Has_weight(\"basket\", weight2), weight1 <= weight2.\n.output Answer"]}
{"id": 1649, "answer": true, "completion": ".decl Operational_in_month(Stadium:symbol, Month:symbol)\nOperational_in_month(\"Parc des Princes\", \"June\").\n.decl Answer()\nAnswer() :- Operational_in_month(\"Parc des Princes\", \"June\").\n.output Answer", "completions": [".decl Operational_in_month(Stadium:symbol, Month:symbol)\nOperational_in_month(\"Parc des Princes\", \"June\").\n.decl Answer()\nAnswer() :- Operational_in_month(\"Parc des Princes\", \"June\").\n.output Answer"]}
{"id": 1650, "answer": true, "completion": ".decl Sponsors(Company:symbol, Event:symbol)\nSponsors(\"Chick-fil-A\", \"Pride parade\").\n.decl Answer()\nAnswer() :- !Sponsors(\"Chick-fil-A\", \"Pride parade\").\n.output Answer", "completions": [".decl Sponsors(Company:symbol, Event:symbol)\nSponsors(\"Chick-fil-A\", \"Pride parade\").\n.decl Answer()\nAnswer() :- !Sponsors(\"Chick-fil-A\", \"Pride parade\").\n.output Answer"]}
{"id": 1651, "answer": true, "completion": ".decl Is_part_of(Region:symbol, Border:symbol)\nIs_part_of(\"Great Lakes\", \"United States-Canada border\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Great Lakes\", \"international border\").\n.output Answer", "completions": [".decl Is_part_of(Region:symbol, Border:symbol)\nIs_part_of(\"Great Lakes\", \"United States-Canada border\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Great Lakes\", \"international border\").\n.output Answer"]}
{"id": 1652, "answer": true, "completion": ".decl Suffers_from(Person:symbol, Disease:symbol)\nSuffers_from(\"Jon Brower Minnoch\", \"obesity\").\n.decl Answer()\nAnswer() :- !Suffers_from(\"Jon Brower Minnoch\", \"anorexia nervosa\").\n.output Answer", "completions": [".decl Suffers_from(Person:symbol, Disease:symbol)\nSuffers_from(\"Jon Brower Minnoch\", \"obesity\").\n.decl Answer()\nAnswer() :- !Suffers_from(\"Jon Brower Minnoch\", \"anorexia nervosa\").\n.output Answer"]}
{"id": 1653, "answer": true, "completion": ".decl Signed(Person:symbol, Document:symbol)\n.decl Answer()\nAnswer() :- !Signed(\"Larry King\", \"Magna Carta\").\n.output Answer", "completions": [".decl Signed(Person:symbol, Document:symbol)\n.decl Answer()\nAnswer() :- !Signed(\"Larry King\", \"Magna Carta\").\n.output Answer"]}
{"id": 1654, "answer": false, "completion": ".decl Has_name_origin(Object:symbol, Name_origin:symbol)\nHas_name_origin(\"Phobos\", \"Greek god of fear\").\nHas_name_origin(\"Pavor\", \"Roman god of fear\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Phobos\", name_origin1), Has_name_origin(\"Pavor\", name_origin2), name_origin1 = name_origin2.\n.output Answer", "completions": [".decl Has_name_origin(Object:symbol, Name_origin:symbol)\nHas_name_origin(\"Phobos\", \"Greek god of fear\").\nHas_name_origin(\"Pavor\", \"Roman god of fear\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Phobos\", name_origin1), Has_name_origin(\"Pavor\", name_origin2), name_origin1 = name_origin2.\n.output Answer"]}
{"id": 1655, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"honey badger\", \"snake\").\n.decl Answer()\nAnswer() :- Eats(\"honey badger\", \"snake\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"honey badger\", \"snake\").\n.decl Answer()\nAnswer() :- Eats(\"honey badger\", \"snake\").\n.output Answer"]}
{"id": 1656, "answer": true, "completion": ".decl Has_anatomy(Animal:symbol, Anatomy:symbol)\nHas_anatomy(\"honey badger\", \"mammal\").\nHas_anatomy(\"hyena\", \"carnivore\").\n.decl Answer()\nAnswer() :- Has_anatomy(\"honey badger\", anatomy1), Has_anatomy(\"hyena\", anatomy2), anatomy1 != anatomy2.\n.output Answer", "completions": [".decl Has_anatomy(Animal:symbol, Anatomy:symbol)\nHas_anatomy(\"honey badger\", \"mammal\").\nHas_anatomy(\"hyena\", \"carnivore\").\n.decl Answer()\nAnswer() :- Has_anatomy(\"honey badger\", anatomy1), Has_anatomy(\"hyena\", anatomy2), anatomy1 != anatomy2.\n.output Answer"]}
{"id": 1657, "answer": false, "completion": ".decl Concerned_with(Person:symbol, Topic:symbol)\nConcerned_with(\"Noah\", \"building an ark\").\n.decl Answer()\nAnswer() :- Concerned_with(\"Noah\", topic), topic = \"buoyancy\".\n.output Answer", "completions": [".decl Concerned_with(Person:symbol, Topic:symbol)\nConcerned_with(\"Noah\", \"building an ark\").\n.decl Answer()\nAnswer() :- Concerned_with(\"Noah\", topic), topic = \"buoyancy\".\n.output Answer"]}
{"id": 1658, "answer": true, "completion": ".decl Has_attitude(Group:symbol, Attitude:symbol)\nHas_attitude(\"Muslim world\", \"hostile\").\nHas_attitude(\"Muslim world\", \"neutral\").\nHas_attitude(\"Muslim world\", \"friendly\").\n.decl Answer()\nAnswer() :- Has_attitude(\"Muslim world\", attitude), attitude = \"hostile\".\n.output Answer", "completions": [".decl Has_attitude(Group:symbol, Attitude:symbol)\nHas_attitude(\"Muslim world\", \"hostile\").\nHas_attitude(\"Muslim world\", \"neutral\").\nHas_attitude(\"Muslim world\", \"friendly\").\n.decl Answer()\nAnswer() :- Has_attitude(\"Muslim world\", attitude), attitude = \"hostile\".\n.output Answer"]}
{"id": 1659, "answer": false, "completion": ".decl Has_network(Person:symbol, Network:symbol)\nHas_network(\"Kim Il-sung\", \"Facebook\").\n.decl Answer()\nAnswer() :- !Has_network(\"Kim Il-sung\", \"LinkedIn\").\n.output Answer", "completions": [".decl Has_network(Person:symbol, Network:symbol)\nHas_network(\"Kim Il-sung\", \"Facebook\").\n.decl Answer()\nAnswer() :- !Has_network(\"Kim Il-sung\", \"LinkedIn\").\n.output Answer"]}
{"id": 1660, "answer": true, "completion": ".decl Has_health_effect(Substance:symbol, Health_effect:symbol)\nHas_health_effect(\"ethanol\", \"negative\").\n.decl Consumed_by(Person:symbol, Substance:symbol)\nConsumed_by(\"Jack Kerouac\", \"ethanol\").\n.decl Answer()\nAnswer() :- Consumed_by(\"Jack Kerouac\", substance), Has_health_effect(substance, \"negative\").\n.output Answer", "completions": [".decl Has_health_effect(Substance:symbol, Health_effect:symbol)\nHas_health_effect(\"ethanol\", \"negative\").\n.decl Consumed_by(Person:symbol, Substance:symbol)\nConsumed_by(\"Jack Kerouac\", \"ethanol\").\n.decl Answer()\nAnswer() :- Consumed_by(\"Jack Kerouac\", substance), Has_health_effect(substance, \"negative\").\n.output Answer"]}
{"id": 1661, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\n.decl Needs_n_players(Game:symbol, N_players:float)\nNeeds_n_players(\"rugby\", 15).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members), Needs_n_players(\"rugby\", n_players), n_members >= n_players.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\n.decl Needs_n_players(Game:symbol, N_players:float)\nNeeds_n_players(\"rugby\", 15).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members), Needs_n_players(\"rugby\", n_players), n_members >= n_players.\n.output Answer"]}
{"id": 1662, "answer": true, "completion": ".decl Can_ingest(Organism:symbol, Object:symbol)\nCan_ingest(\"human\", \"bee\").\n.decl Destroys(Organ:symbol, Object:symbol)\nDestroys(\"stomach\", \"bee\").\n.decl Answer()\nAnswer() :- Can_ingest(\"human\", \"bee\"), Destroys(\"stomach\", \"bee\").\n.output Answer", "completions": [".decl Can_ingest(Organism:symbol, Object:symbol)\nCan_ingest(\"human\", \"bee\").\n.decl Destroys(Organ:symbol, Object:symbol)\nDestroys(\"stomach\", \"bee\").\n.decl Answer()\nAnswer() :- Can_ingest(\"human\", \"bee\"), Destroys(\"stomach\", \"bee\").\n.output Answer"]}
{"id": 1663, "answer": true, "completion": ".decl Knows_about(Person:symbol, Subject:symbol)\nKnows_about(\"Elon Musk\", \"physics\").\nKnows_about(\"Elon Musk\", \"astrology\").\n.decl Difficulty(Subject:symbol, Difficulty:float)\nDifficulty(\"physics\", 10).\nDifficulty(\"astrology\", 5).\n.decl Answer()\nAnswer() :- Knows_about(\"Elon Musk\", subject1), Knows_about(\"Elon Musk\", subject2), Difficulty(subject1, difficulty1), Difficulty(subject2, difficulty2), difficulty1 < difficulty2.\n.output Answer", "completions": [".decl Knows_about(Person:symbol, Subject:symbol)\nKnows_about(\"Elon Musk\", \"physics\").\nKnows_about(\"Elon Musk\", \"astrology\").\n.decl Difficulty(Subject:symbol, Difficulty:float)\nDifficulty(\"physics\", 10).\nDifficulty(\"astrology\", 5).\n.decl Answer()\nAnswer() :- Knows_about(\"Elon Musk\", subject1), Knows_about(\"Elon Musk\", subject2), Difficulty(subject1, difficulty1), Difficulty(subject2, difficulty2), difficulty1 < difficulty2.\n.output Answer"]}
{"id": 1664, "answer": true, "completion": ".decl Has_longevity(Show:symbol, Longevity:float)\nHas_longevity(\"Coast to Coast AM\", 25).\nHas_longevity(\"The Rush Limbaugh Show\", 22).\n.decl Answer()\nAnswer() :- Has_longevity(\"Coast to Coast AM\", longevity1), Has_longevity(\"The Rush Limbaugh Show\", longevity2), longevity1 > longevity2.\n.output Answer", "completions": [".decl Has_longevity(Show:symbol, Longevity:float)\nHas_longevity(\"Coast to Coast AM\", 25).\nHas_longevity(\"The Rush Limbaugh Show\", 22).\n.decl Answer()\nAnswer() :- Has_longevity(\"Coast to Coast AM\", longevity1), Has_longevity(\"The Rush Limbaugh Show\", longevity2), longevity1 > longevity2.\n.output Answer"]}
{"id": 1665, "answer": true, "completion": ".decl Has_label(Group:symbol, Label:symbol)\nHas_label(\"eagles\", \"skills-training youth group\").\nHas_label(\"young bears\", \"skills-training youth group\").\n.decl Answer()\nAnswer() :- Has_label(\"eagles\", \"skills-training youth group\"), Has_label(\"young bears\", \"skills-training youth group\").\n.output Answer", "completions": [".decl Has_label(Group:symbol, Label:symbol)\nHas_label(\"eagles\", \"skills-training youth group\").\nHas_label(\"young bears\", \"skills-training youth group\").\n.decl Answer()\nAnswer() :- Has_label(\"eagles\", \"skills-training youth group\"), Has_label(\"young bears\", \"skills-training youth group\").\n.output Answer"]}
{"id": 1666, "answer": true, "completion": ".decl Has_wind_speed(Bulletin:symbol, Wind_speed:float)\nHas_wind_speed(\"hurricane force winds bulletin\", 74).\n.decl Requires_wind_speed(Activity:symbol, Wind_speed:float)\nRequires_wind_speed(\"parachuting amateurs\", 25).\n.decl Answer()\nAnswer() :- Has_wind_speed(\"hurricane force winds bulletin\", wind_speed1), Requires_wind_speed(\"parachuting amateurs\", wind_speed2), wind_speed1 > wind_speed2.\n.output Answer", "completions": [".decl Has_wind_speed(Bulletin:symbol, Wind_speed:float)\nHas_wind_speed(\"hurricane force winds bulletin\", 74).\n.decl Requires_wind_speed(Activity:symbol, Wind_speed:float)\nRequires_wind_speed(\"parachuting amateurs\", 25).\n.decl Answer()\nAnswer() :- Has_wind_speed(\"hurricane force winds bulletin\", wind_speed1), Requires_wind_speed(\"parachuting amateurs\", wind_speed2), wind_speed1 > wind_speed2.\n.output Answer"]}
{"id": 1667, "answer": false, "completion": ".decl Is_washable(Material:symbol, Method:symbol)\nIs_washable(\"wool\", \"hand wash\").\n.decl Answer()\nAnswer() :- Is_washable(\"wool\", \"hand wash\").\n.output Answer", "completions": [".decl Is_washable(Material:symbol, Method:symbol)\nIs_washable(\"wool\", \"hand wash\").\n.decl Answer()\nAnswer() :- Is_washable(\"wool\", \"hand wash\").\n.output Answer"]}
{"id": 1668, "answer": false, "completion": ".decl Has_length(Code:symbol, Length:float)\nHas_length(\"ZIP code\", 5).\n.decl Answer()\nAnswer() :- Has_length(\"ZIP code\", length), length > 2.5.\n.output Answer", "completions": [".decl Has_length(Code:symbol, Length:float)\nHas_length(\"ZIP code\", 5).\n.decl Answer()\nAnswer() :- Has_length(\"ZIP code\", length), length > 2.5.\n.output Answer"]}
{"id": 1669, "answer": true, "completion": ".decl Occurs_in_time(Event:symbol, Time:symbol)\nOccurs_in_time(\"history of Europe\", \"prehistoric\").\nOccurs_in_time(\"age of dinosaurs\", \"prehistoric\").\n.decl Answer()\nAnswer() :- Occurs_in_time(\"history of Europe\", time), Occurs_in_time(\"age of dinosaurs\", time).\n.output Answer", "completions": [".decl Occurs_in_time(Event:symbol, Time:symbol)\nOccurs_in_time(\"history of Europe\", \"prehistoric\").\nOccurs_in_time(\"age of dinosaurs\", \"prehistoric\").\n.decl Answer()\nAnswer() :- Occurs_in_time(\"history of Europe\", time), Occurs_in_time(\"age of dinosaurs\", time).\n.output Answer"]}
{"id": 1670, "answer": true, "completion": ".decl Has_pain_level(Person:symbol, Pain_level:float)\nHas_pain_level(\"Florence Nightingale\", 5).\nHas_pain_level(\"Saint Peter\", 3).\n.decl Answer()\nAnswer() :- Has_pain_level(\"Florence Nightingale\", pain_level1), Has_pain_level(\"Saint Peter\", pain_level2), pain_level1 > pain_level2.\n.output Answer", "completions": [".decl Has_pain_level(Person:symbol, Pain_level:float)\nHas_pain_level(\"Florence Nightingale\", 5).\nHas_pain_level(\"Saint Peter\", 3).\n.decl Answer()\nAnswer() :- Has_pain_level(\"Florence Nightingale\", pain_level1), Has_pain_level(\"Saint Peter\", pain_level2), pain_level1 > pain_level2.\n.output Answer"]}
{"id": 1671, "answer": true, "completion": ".decl Can_destroy(Object_A:symbol, Object_B:symbol)\nCan_destroy(\"hammer\", \"firewall\").\n.decl Answer()\nAnswer() :- Can_destroy(\"hammer\", \"firewall\").\n.output Answer", "completions": [".decl Can_destroy(Object_A:symbol, Object_B:symbol)\nCan_destroy(\"hammer\", \"firewall\").\n.decl Answer()\nAnswer() :- Can_destroy(\"hammer\", \"firewall\").\n.output Answer"]}
{"id": 1672, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Martin Luther\", 183).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"theses\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"theses\", n_days1), Last_n_days(\"Martin Luther\", n_days2), n_days1 >= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Martin Luther\", 183).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"theses\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"theses\", n_days1), Last_n_days(\"Martin Luther\", n_days2), n_days1 >= n_days2.\n.output Answer"]}
{"id": 1673, "answer": false, "completion": ".decl Has_n_options(Number_system:symbol, N_options:float)\nHas_n_options(\"Roman numerals\", 7).\nHas_n_options(\"normal number\", 9).\n.decl Answer()\nAnswer() :- Has_n_options(\"Roman numerals\", n_options1), Has_n_options(\"normal number\", n_options2), n_options1 >= n_options2.\n.output Answer", "completions": [".decl Has_n_options(Number_system:symbol, N_options:float)\nHas_n_options(\"Roman numerals\", 7).\nHas_n_options(\"normal number\", 9).\n.decl Answer()\nAnswer() :- Has_n_options(\"Roman numerals\", n_options1), Has_n_options(\"normal number\", n_options2), n_options1 >= n_options2.\n.output Answer"]}
{"id": 1674, "answer": false, "completion": ".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"Alistair Darling\", \"against Scottish independence\").\n.decl Answer()\nAnswer() :- Has_opinion(\"Alistair Darling\", opinion), opinion != \"in favor of Scottish independence\".\n.output Answer", "completions": [".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"Alistair Darling\", \"against Scottish independence\").\n.decl Answer()\nAnswer() :- Has_opinion(\"Alistair Darling\", opinion), opinion != \"in favor of Scottish independence\".\n.output Answer"]}
{"id": 1675, "answer": false, "completion": ".decl Has_animation(Object:symbol, Animation:symbol)\nHas_animation(\"teacup\", \"alive\").\nHas_animation(\"candlestick\", \"alive\").\n.decl Answer()\nAnswer() :- Has_animation(object, \"alive\"), !Has_animation(object, \"inanimate\").\n.output Answer", "completions": [".decl Has_animation(Object:symbol, Animation:symbol)\nHas_animation(\"teacup\", \"alive\").\nHas_animation(\"candlestick\", \"alive\").\n.decl Answer()\nAnswer() :- Has_animation(object, \"alive\"), !Has_animation(object, \"inanimate\").\n.output Answer"]}
{"id": 1676, "answer": false, "completion": ".decl Has_reproductive_capacity(Species:symbol, Capacity:float)\nHas_reproductive_capacity(\"bottlenose dolphins\", 2).\nHas_reproductive_capacity(\"human women\", 1).\n.decl Answer()\nAnswer() :- Has_reproductive_capacity(\"bottlenose dolphins\", capacity1), Has_reproductive_capacity(\"human women\", capacity2), capacity1 > capacity2.\n.output Answer", "completions": [".decl Has_reproductive_capacity(Species:symbol, Capacity:float)\nHas_reproductive_capacity(\"bottlenose dolphins\", 2).\nHas_reproductive_capacity(\"human women\", 1).\n.decl Answer()\nAnswer() :- Has_reproductive_capacity(\"bottlenose dolphins\", capacity1), Has_reproductive_capacity(\"human women\", capacity2), capacity1 > capacity2.\n.output Answer"]}
{"id": 1677, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Scooby Doo\", 0.5).\nHas_size(\"kangaroo pouch\", 0.2).\n.decl Answer()\nAnswer() :- Has_size(\"Scooby Doo\", size1), Has_size(\"kangaroo pouch\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Scooby Doo\", 0.5).\nHas_size(\"kangaroo pouch\", 0.2).\n.decl Answer()\nAnswer() :- Has_size(\"Scooby Doo\", size1), Has_size(\"kangaroo pouch\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1678, "answer": false, "completion": ".decl Participates_in(Person:symbol, Contest:symbol)\nParticipates_in(\"Julia Roberts\", \"prolific acting\").\nParticipates_in(\"Eric Roberts\", \"prolific acting\").\n.decl Wins(Person:symbol, Contest:symbol)\nWins(\"Eric Roberts\", \"prolific acting\").\n.decl Answer()\nAnswer() :- Participates_in(\"Julia Roberts\", contest), Wins(\"Eric Roberts\", contest), !Wins(\"Julia Roberts\", contest).\n.output Answer", "completions": [".decl Participates_in(Person:symbol, Contest:symbol)\nParticipates_in(\"Julia Roberts\", \"prolific acting\").\nParticipates_in(\"Eric Roberts\", \"prolific acting\").\n.decl Wins(Person:symbol, Contest:symbol)\nWins(\"Eric Roberts\", \"prolific acting\").\n.decl Answer()\nAnswer() :- Participates_in(\"Julia Roberts\", contest), Wins(\"Eric Roberts\", contest), !Wins(\"Julia Roberts\", contest).\n.output Answer"]}
{"id": 1679, "answer": true, "completion": ".decl Has_magnification(Device:symbol, Magnification:float)\nHas_magnification(\"binoculars\", 10).\nHas_magnification(\"telescope\", 30).\n.decl Answer()\nAnswer() :- Has_magnification(\"binoculars\", magnification1), Has_magnification(\"telescope\", magnification2), magnification1 > magnification2.\n.output Answer", "completions": [".decl Has_magnification(Device:symbol, Magnification:float)\nHas_magnification(\"binoculars\", 10).\nHas_magnification(\"telescope\", 30).\n.decl Answer()\nAnswer() :- Has_magnification(\"binoculars\", magnification1), Has_magnification(\"telescope\", magnification2), magnification1 > magnification2.\n.output Answer"]}
{"id": 1680, "answer": false, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Ringo Starr\", \"curry\").\n.decl Answer()\nAnswer() :- Likes(\"Ringo Starr\", food), food != \"pot roast\".\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Ringo Starr\", \"curry\").\n.decl Answer()\nAnswer() :- Likes(\"Ringo Starr\", food), food != \"pot roast\".\n.output Answer"]}
{"id": 1681, "answer": true, "completion": ".decl Diagnoses(Person:symbol, Disease:symbol)\n.decl Answer()\nAnswer() :- !Diagnoses(person, \"Great Depression\").\n.output Answer", "completions": [".decl Diagnoses(Person:symbol, Disease:symbol)\n.decl Answer()\nAnswer() :- !Diagnoses(person, \"Great Depression\").\n.output Answer"]}
{"id": 1682, "answer": false, "completion": ".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Mercury\", 167).\n.decl Is_warm(Temperature:float)\nIs_warm(temperature) :- temperature > 0.\n.decl Answer()\nAnswer() :- Has_temperature(\"Mercury\", temperature), Is_warm(temperature).\n.output Answer", "completions": [".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Mercury\", 167).\n.decl Is_warm(Temperature:float)\nIs_warm(temperature) :- temperature > 0.\n.decl Answer()\nAnswer() :- Has_temperature(\"Mercury\", temperature), Is_warm(temperature).\n.output Answer"]}
{"id": 1683, "answer": false, "completion": ".decl Reads(Person:symbol, Book:symbol)\nReads(\"Helen Keller\", \"The Story of My Life\").\n.decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"The Story of My Life\", \"Helen Keller\").\n.decl Answer()\nAnswer() :- Reads(\"Helen Keller\", book), Written_by(book, \"J. K. Rowling\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Book:symbol)\nReads(\"Helen Keller\", \"The Story of My Life\").\n.decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"The Story of My Life\", \"Helen Keller\").\n.decl Answer()\nAnswer() :- Reads(\"Helen Keller\", book), Written_by(book, \"J. K. Rowling\").\n.output Answer"]}
{"id": 1684, "answer": true, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"recruit\", \"self harm\").\n.decl Accepts_condition(Organization:symbol, Condition:symbol)\nAccepts_condition(\"United States Marine Corps\", \"self harm\").\n.decl Answer()\nAnswer() :- Has_condition(\"recruit\", condition), !Accepts_condition(\"United States Marine Corps\", condition).\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"recruit\", \"self harm\").\n.decl Accepts_condition(Organization:symbol, Condition:symbol)\nAccepts_condition(\"United States Marine Corps\", \"self harm\").\n.decl Answer()\nAnswer() :- Has_condition(\"recruit\", condition), !Accepts_condition(\"United States Marine Corps\", condition).\n.output Answer"]}
{"id": 1685, "answer": true, "completion": ".decl Enemies(Person_A:symbol, Person_B:symbol)\nEnemies(\"Jay Thomas\", \"Clayton Moore\").\n.decl Answer()\nAnswer() :- Enemies(\"Jay Thomas\", \"Clayton Moore\").\n.output Answer", "completions": [".decl Enemies(Person_A:symbol, Person_B:symbol)\nEnemies(\"Jay Thomas\", \"Clayton Moore\").\n.decl Answer()\nAnswer() :- Enemies(\"Jay Thomas\", \"Clayton Moore\").\n.output Answer"]}
{"id": 1686, "answer": false, "completion": ".decl Uses(Person:symbol, Technology:symbol)\nUses(\"Douglas Adams\", \"typewriter\").\n.decl Answer()\nAnswer() :- !Uses(\"Douglas Adams\", \"email\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Technology:symbol)\nUses(\"Douglas Adams\", \"typewriter\").\n.decl Answer()\nAnswer() :- !Uses(\"Douglas Adams\", \"email\").\n.output Answer"]}
{"id": 1687, "answer": true, "completion": ".decl Has_risk(Manipulation:symbol, Risk:symbol)\nHas_risk(\"chiropractic manipulations\", \"dangerous\").\n.decl Answer()\nAnswer() :- Has_risk(manipulation, \"dangerous\").\n.output Answer", "completions": [".decl Has_risk(Manipulation:symbol, Risk:symbol)\nHas_risk(\"chiropractic manipulations\", \"dangerous\").\n.decl Answer()\nAnswer() :- Has_risk(manipulation, \"dangerous\").\n.output Answer"]}
{"id": 1688, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Olivia Newton-John\", \"Olivia Newton-John\").\n.decl Has_n_letters(Name:symbol, N_letters:float)\nHas_n_letters(\"Olivia Newton-John\", 17).\n.decl Answer()\nAnswer() :- Has_name(person, \"Olivia Newton-John\"), Has_n_letters(\"Olivia Newton-John\", n_letters), !Has_n_letters(name, n_letters2), n_letters2 > n_letters.\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Olivia Newton-John\", \"Olivia Newton-John\").\n.decl Has_n_letters(Name:symbol, N_letters:float)\nHas_n_letters(\"Olivia Newton-John\", 17).\n.decl Answer()\nAnswer() :- Has_name(person, \"Olivia Newton-John\"), Has_n_letters(\"Olivia Newton-John\", n_letters), !Has_n_letters(name, n_letters2), n_letters2 > n_letters.\n.output Answer"]}
{"id": 1689, "answer": false, "completion": ".decl Has_year(Company:symbol, Year:float)\nHas_year(\"Casio\", 1946).\n.decl Is_composite(Number:float)\nIs_composite(4).\nIs_composite(6).\nIs_composite(8).\nIs_composite(9).\nIs_composite(10).\n.decl Answer()\nAnswer() :- Has_year(\"Casio\", year), Is_composite(year).\n.output Answer", "completions": [".decl Has_year(Company:symbol, Year:float)\nHas_year(\"Casio\", 1946).\n.decl Is_composite(Number:float)\nIs_composite(4).\nIs_composite(6).\nIs_composite(8).\nIs_composite(9).\nIs_composite(10).\n.decl Answer()\nAnswer() :- Has_year(\"Casio\", year), Is_composite(year).\n.output Answer"]}
{"id": 1690, "answer": true, "completion": ".decl Has_grip(Person:symbol, Place:symbol, Strength:symbol)\nHas_grip(\"Hades\", \"Underworld\", \"loose\").\n.decl Answer()\nAnswer() :- Has_grip(\"Hades\", \"Underworld\", \"loose\").\n.output Answer", "completions": [".decl Has_grip(Person:symbol, Place:symbol, Strength:symbol)\nHas_grip(\"Hades\", \"Underworld\", \"loose\").\n.decl Answer()\nAnswer() :- Has_grip(\"Hades\", \"Underworld\", \"loose\").\n.output Answer"]}
{"id": 1691, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"George W. Bush\", \"English\").\n.decl Answer()\nAnswer() :- !Speaks(\"George W. Bush\", \"Cantonese\").\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"George W. Bush\", \"English\").\n.decl Answer()\nAnswer() :- !Speaks(\"George W. Bush\", \"Cantonese\").\n.output Answer"]}
{"id": 1692, "answer": true, "completion": ".decl Violates_amendment(Event:symbol, Amendment:symbol)\nViolates_amendment(\"crucifixion\", \"eighth amendment\").\n.decl Answer()\nAnswer() :- Violates_amendment(\"crucifixion\", \"eighth amendment\").\n.output Answer", "completions": [".decl Violates_amendment(Event:symbol, Amendment:symbol)\nViolates_amendment(\"crucifixion\", \"eighth amendment\").\n.decl Answer()\nAnswer() :- Violates_amendment(\"crucifixion\", \"eighth amendment\").\n.output Answer"]}
{"id": 1693, "answer": false, "completion": ".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"Dale Earnhardt Sr.'s car crash\", \"stroke\").\n.decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Dale Earnhardt Jr.\", \"Dale Earnhardt Sr.\").\n.decl Answer()\nAnswer() :- Has_father(\"Dale Earnhardt Jr.\", father), Causes(father + \"'s car crash\", \"stroke\").\n.output Answer", "completions": [".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"Dale Earnhardt Sr.'s car crash\", \"stroke\").\n.decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Dale Earnhardt Jr.\", \"Dale Earnhardt Sr.\").\n.decl Answer()\nAnswer() :- Has_father(\"Dale Earnhardt Jr.\", father), Causes(father + \"'s car crash\", \"stroke\").\n.output Answer"]}
{"id": 1694, "answer": true, "completion": ".decl Has_genre(Book:symbol, Genre:symbol)\nHas_genre(\"Harry Potter and the Philosopher's Stone\", \"Fantasy\").\nHas_genre(\"Harry Potter and the Chamber of Secrets\", \"Fantasy\").\nHas_genre(\"Harry Potter and the Prisoner of Azkaban\", \"Fantasy\").\nHas_genre(\"Harry Potter and the Goblet of Fire\", \"Fantasy\").\nHas_genre(\"Harry Potter and the Order of the Phoenix\", \"Fantasy\").\nHas_genre(\"Harry Potter and the Half-Blood Prince\", \"Fantasy\").\nHas_genre(\"Harry Potter and the Deathly Hallows\", \"Fantasy\").\nHas_genre(\"And Then There Were None\", \"Mystery\").\n.decl Answer()\nAnswer() :- Has_genre(book, \"And Then There Were None\"), Has_genre(book, \"Fantasy\").\n.output Answer", "completions": [".decl Has_genre(Book:symbol, Genre:symbol)\nHas_genre(\"Harry Potter and the Philosopher's Stone\", \"Fantasy\").\nHas_genre(\"Harry Potter and the Chamber of Secrets\", \"Fantasy\").\nHas_genre(\"Harry Potter and the Prisoner of Azkaban\", \"Fantasy\").\nHas_genre(\"Harry Potter and the Goblet of Fire\", \"Fantasy\").\nHas_genre(\"Harry Potter and the Order of the Phoenix\", \"Fantasy\").\nHas_genre(\"Harry Potter and the Half-Blood Prince\", \"Fantasy\").\nHas_genre(\"Harry Potter and the Deathly Hallows\", \"Fantasy\").\nHas_genre(\"And Then There Were None\", \"Mystery\").\n.decl Answer()\nAnswer() :- Has_genre(book, \"And Then There Were None\"), Has_genre(book, \"Fantasy\").\n.output Answer"]}
{"id": 1695, "answer": false, "completion": ".decl Uses(Sport:symbol, Object:symbol)\nUses(\"shooting sports\", \"bullets\").\n.decl Answer()\nAnswer() :- Uses(sport, \"bullets\"), !Uses(sport2, \"bullets\"), sport != sport2.\n.output Answer", "completions": [".decl Uses(Sport:symbol, Object:symbol)\nUses(\"shooting sports\", \"bullets\").\n.decl Answer()\nAnswer() :- Uses(sport, \"bullets\"), !Uses(sport2, \"bullets\"), sport != sport2.\n.output Answer"]}
{"id": 1696, "answer": true, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"American\", \"English\").\n.decl Has_native_name(Company:symbol, Native_name:symbol)\nHas_native_name(\"Lenovo\", \"联想\").\n.decl Answer()\nAnswer() :- Speaks_language(\"American\", language1), Has_native_name(\"Lenovo\", language2), language1 != language2.\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"American\", \"English\").\n.decl Has_native_name(Company:symbol, Native_name:symbol)\nHas_native_name(\"Lenovo\", \"联想\").\n.decl Answer()\nAnswer() :- Speaks_language(\"American\", language1), Has_native_name(\"Lenovo\", language2), language1 != language2.\n.output Answer"]}
{"id": 1697, "answer": true, "completion": ".decl Watches(Person:symbol, Film:symbol)\nWatches(\"people in Guinea Bissau\", \"Coen brothers films\").\n.decl Has_subtitles(Film:symbol, Subtitles:symbol)\nHas_subtitles(\"Coen brothers films\", \"yes\").\n.decl Answer()\nAnswer() :- Watches(person, \"Coen brothers films\"), Has_subtitles(\"Coen brothers films\", subtitles), subtitles = \"yes\".\n.output Answer", "completions": [".decl Watches(Person:symbol, Film:symbol)\nWatches(\"people in Guinea Bissau\", \"Coen brothers films\").\n.decl Has_subtitles(Film:symbol, Subtitles:symbol)\nHas_subtitles(\"Coen brothers films\", \"yes\").\n.decl Answer()\nAnswer() :- Watches(person, \"Coen brothers films\"), Has_subtitles(\"Coen brothers films\", subtitles), subtitles = \"yes\".\n.output Answer"]}
{"id": 1698, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"baby\", 0).\n.decl Has_feature(Person:symbol, Feature:symbol)\nHas_feature(\"baby\", \"moustache\").\n.decl Answer()\nAnswer() :- Has_age(\"baby\", age), age < 1, Has_feature(\"baby\", \"moustache\").\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"baby\", 0).\n.decl Has_feature(Person:symbol, Feature:symbol)\nHas_feature(\"baby\", \"moustache\").\n.decl Answer()\nAnswer() :- Has_age(\"baby\", age), age < 1, Has_feature(\"baby\", \"moustache\").\n.output Answer"]}
{"id": 1699, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Jeremy Irons\", \"acting\").\n.decl Answer()\nAnswer() :- !Has_skill(\"Jeremy Irons\", \"sweep picking\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Jeremy Irons\", \"acting\").\n.decl Answer()\nAnswer() :- !Has_skill(\"Jeremy Irons\", \"sweep picking\").\n.output Answer"]}
{"id": 1700, "answer": false, "completion": ".decl Has_nationality(Person:symbol, Nationality:symbol)\nHas_nationality(\"LeBron James\", \"American\").\nHas_nationality(\"Luka Doncic\", \"Slovenian\").\n.decl Answer()\nAnswer() :- !Has_nationality(person, \"Vietnamese\").\n.output Answer", "completions": [".decl Has_nationality(Person:symbol, Nationality:symbol)\nHas_nationality(\"LeBron James\", \"American\").\nHas_nationality(\"Luka Doncic\", \"Slovenian\").\n.decl Answer()\nAnswer() :- !Has_nationality(person, \"Vietnamese\").\n.output Answer"]}
{"id": 1701, "answer": true, "completion": ".decl Is_famous(Person:symbol)\nIs_famous(\"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Is_famous(\"Dr. Seuss\").\n.output Answer", "completions": [".decl Is_famous(Person:symbol)\nIs_famous(\"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Is_famous(\"Dr. Seuss\").\n.output Answer"]}
{"id": 1702, "answer": true, "completion": ".decl Has_product(Store:symbol, Product:symbol)\nHas_product(\"Starbucks\", \"coffee\").\n.decl Answer()\nAnswer() :- !Has_product(\"Starbucks\", \"Alfa Romeo\").\n.output Answer", "completions": [".decl Has_product(Store:symbol, Product:symbol)\nHas_product(\"Starbucks\", \"coffee\").\n.decl Answer()\nAnswer() :- !Has_product(\"Starbucks\", \"Alfa Romeo\").\n.output Answer"]}
{"id": 1703, "answer": true, "completion": ".decl Has_pattern(Cat:symbol, Pattern:symbol)\nHas_pattern(\"calico cat\", \"spotted\").\n.decl Has_color_variety(Fly:symbol, Color_variety:symbol)\nHas_color_variety(\"drain fly\", \"black\").\nHas_color_variety(\"drain fly\", \"brown\").\nHas_color_variety(\"drain fly\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_pattern(\"calico cat\", pattern), Has_color_variety(\"drain fly\", color_variety), pattern != color_variety.\n.output Answer", "completions": [".decl Has_pattern(Cat:symbol, Pattern:symbol)\nHas_pattern(\"calico cat\", \"spotted\").\n.decl Has_color_variety(Fly:symbol, Color_variety:symbol)\nHas_color_variety(\"drain fly\", \"black\").\nHas_color_variety(\"drain fly\", \"brown\").\nHas_color_variety(\"drain fly\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_pattern(\"calico cat\", pattern), Has_color_variety(\"drain fly\", color_variety), pattern != color_variety.\n.output Answer"]}
{"id": 1704, "answer": false, "completion": ".decl Is_scavenger(Bird:symbol, Is_scavenger:symbol)\nIs_scavenger(\"Golden eagle\", \"no\").\n.decl Answer()\nAnswer() :- Is_scavenger(\"Golden eagle\", is_scavenger).\n.output Answer", "completions": [".decl Is_scavenger(Bird:symbol, Is_scavenger:symbol)\nIs_scavenger(\"Golden eagle\", \"no\").\n.decl Answer()\nAnswer() :- Is_scavenger(\"Golden eagle\", is_scavenger).\n.output Answer"]}
{"id": 1705, "answer": true, "completion": ".decl Has_price(Store:symbol, Food:symbol, Price:float)\nHas_price(\"Aldi\", \"food\", 10).\nHas_price(\"Whole Foods\", \"food\", 20).\n.decl Answer()\nAnswer() :- Has_price(\"Aldi\", \"food\", price1), Has_price(\"Whole Foods\", \"food\", price2), price1 < price2.\n.output Answer", "completions": [".decl Has_price(Store:symbol, Food:symbol, Price:float)\nHas_price(\"Aldi\", \"food\", 10).\nHas_price(\"Whole Foods\", \"food\", 20).\n.decl Answer()\nAnswer() :- Has_price(\"Aldi\", \"food\", price1), Has_price(\"Whole Foods\", \"food\", price2), price1 < price2.\n.output Answer"]}
{"id": 1706, "answer": false, "completion": ".decl Nests_on(Animal:symbol, Place:symbol)\nNests_on(\"bald eagle\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Nests_on(\"bald eagle\", \"Mount Sharp\").\n.output Answer", "completions": [".decl Nests_on(Animal:symbol, Place:symbol)\nNests_on(\"bald eagle\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Nests_on(\"bald eagle\", \"Mount Sharp\").\n.output Answer"]}
{"id": 1707, "answer": false, "completion": ".decl Cures(Medicine:symbol, Disease:symbol)\nCures(\"penicillin\", \"bacterial infection\").\n.decl Answer()\nAnswer() :- !Cures(\"penicillin\", \"learning disability\").\n.output Answer", "completions": [".decl Cures(Medicine:symbol, Disease:symbol)\nCures(\"penicillin\", \"bacterial infection\").\n.decl Answer()\nAnswer() :- !Cures(\"penicillin\", \"learning disability\").\n.output Answer"]}
{"id": 1708, "answer": false, "completion": ".decl Has_requirements(Job:symbol, Requirements:symbol)\nHas_requirements(\"astronaut\", \"education\").\n.decl Has_qualifications(Person:symbol, Qualifications:symbol)\nHas_qualifications(\"Danica McKellar\", \"acting\").\n.decl Answer()\nAnswer() :- Has_requirements(\"astronaut\", requirements), Has_qualifications(\"Danica McKellar\", qualifications), requirements != qualifications.\n.output Answer", "completions": [".decl Has_requirements(Job:symbol, Requirements:symbol)\nHas_requirements(\"astronaut\", \"education\").\n.decl Has_qualifications(Person:symbol, Qualifications:symbol)\nHas_qualifications(\"Danica McKellar\", \"acting\").\n.decl Answer()\nAnswer() :- Has_requirements(\"astronaut\", requirements), Has_qualifications(\"Danica McKellar\", qualifications), requirements != qualifications.\n.output Answer"]}
{"id": 1709, "answer": true, "completion": ".decl Has_limbs(Animal:symbol, Limbs:float)\nHas_limbs(\"Goblin shark\", 0).\n.decl Answer()\nAnswer() :- Has_limbs(\"Goblin shark\", limbs), limbs > 0.\n.output Answer", "completions": [".decl Has_limbs(Animal:symbol, Limbs:float)\nHas_limbs(\"Goblin shark\", 0).\n.decl Answer()\nAnswer() :- Has_limbs(\"Goblin shark\", limbs), limbs > 0.\n.output Answer"]}
{"id": 1710, "answer": true, "completion": ".decl Passes_test(Person:symbol, Test:symbol)\n.decl Answer()\nAnswer() :- !Passes_test(\"northern fur seal\", \"driving test\").\n.output Answer", "completions": [".decl Passes_test(Person:symbol, Test:symbol)\n.decl Answer()\nAnswer() :- !Passes_test(\"northern fur seal\", \"driving test\").\n.output Answer"]}
{"id": 1711, "answer": true, "completion": ".decl Belongs_to_generation(Person:symbol, Generation:symbol)\nBelongs_to_generation(\"Generation Y member\", \"Generation Y\").\n.decl Has_age_requirement(Organization:symbol, Age_requirement:float)\nHas_age_requirement(\"NYPD police officer\", 21).\n.decl Answer()\nAnswer() :- Belongs_to_generation(person, \"Generation Y\"), Has_age_requirement(\"NYPD police officer\", age_requirement), age_requirement <= 21.\n.output Answer", "completions": [".decl Belongs_to_generation(Person:symbol, Generation:symbol)\nBelongs_to_generation(\"Generation Y member\", \"Generation Y\").\n.decl Has_age_requirement(Organization:symbol, Age_requirement:float)\nHas_age_requirement(\"NYPD police officer\", 21).\n.decl Answer()\nAnswer() :- Belongs_to_generation(person, \"Generation Y\"), Has_age_requirement(\"NYPD police officer\", age_requirement), age_requirement <= 21.\n.output Answer"]}
{"id": 1712, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"infant\", 0).\n.decl Requires_skill(Task:symbol, Skill:symbol)\nRequires_skill(\"sudoku puzzle\", \"logic\").\n.decl Answer()\nAnswer() :- Has_age(\"infant\", age), age < 1, !Requires_skill(\"sudoku puzzle\", \"logic\").\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"infant\", 0).\n.decl Requires_skill(Task:symbol, Skill:symbol)\nRequires_skill(\"sudoku puzzle\", \"logic\").\n.decl Answer()\nAnswer() :- Has_age(\"infant\", age), age < 1, !Requires_skill(\"sudoku puzzle\", \"logic\").\n.output Answer"]}
{"id": 1713, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"pickled cucumber\", \"green\").\n.decl Answer()\nAnswer() :- !Has_color(\"pickled cucumber\", \"red\").\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"pickled cucumber\", \"green\").\n.decl Answer()\nAnswer() :- !Has_color(\"pickled cucumber\", \"red\").\n.output Answer"]}
{"id": 1714, "answer": true, "completion": ".decl Uses(Activity:symbol, Tool:symbol)\nUses(\"coding\", \"Boolean algebra characters\").\n.decl Answer()\nAnswer() :- Uses(\"coding\", tool).\n.output Answer", "completions": [".decl Uses(Activity:symbol, Tool:symbol)\nUses(\"coding\", \"Boolean algebra characters\").\n.decl Answer()\nAnswer() :- Uses(\"coding\", tool).\n.output Answer"]}
{"id": 1715, "answer": true, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"John\", \"male\").\n.decl Experiences(Person:symbol, Event:symbol)\nExperiences(\"John\", \"menstruation\").\n.decl Answer()\nAnswer() :- Has_gender(person, \"male\"), Experiences(person, \"menstruation\").\n.output Answer", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"John\", \"male\").\n.decl Experiences(Person:symbol, Event:symbol)\nExperiences(\"John\", \"menstruation\").\n.decl Answer()\nAnswer() :- Has_gender(person, \"male\"), Experiences(person, \"menstruation\").\n.output Answer"]}
{"id": 1716, "answer": true, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"skiing\", \"Steamboat Springs, Colorado\").\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"skiing\", \"January\").\nHappens_in_month(\"skiing\", \"February\").\nHappens_in_month(\"skiing\", \"March\").\nHappens_in_month(\"skiing\", \"April\").\nHappens_in_month(\"skiing\", \"November\").\nHappens_in_month(\"skiing\", \"December\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"skiing\", \"Steamboat Springs, Colorado\"), !Happens_in_month(\"skiing\", \"August\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"skiing\", \"Steamboat Springs, Colorado\").\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"skiing\", \"January\").\nHappens_in_month(\"skiing\", \"February\").\nHappens_in_month(\"skiing\", \"March\").\nHappens_in_month(\"skiing\", \"April\").\nHappens_in_month(\"skiing\", \"November\").\nHappens_in_month(\"skiing\", \"December\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"skiing\", \"Steamboat Springs, Colorado\"), !Happens_in_month(\"skiing\", \"August\").\n.output Answer"]}
{"id": 1717, "answer": true, "completion": ".decl Has_mascot(High_school:symbol, Mascot:symbol)\nHas_mascot(\"Bobby Jindal's high school\", \"tiger\").\n.decl Eats(Animal:symbol, Food:symbol)\nEats(\"tiger\", \"kibble\").\n.decl Answer()\nAnswer() :- Has_mascot(\"Bobby Jindal's high school\", mascot), Eats(mascot, \"kibble\").\n.output Answer", "completions": [".decl Has_mascot(High_school:symbol, Mascot:symbol)\nHas_mascot(\"Bobby Jindal's high school\", \"tiger\").\n.decl Eats(Animal:symbol, Food:symbol)\nEats(\"tiger\", \"kibble\").\n.decl Answer()\nAnswer() :- Has_mascot(\"Bobby Jindal's high school\", mascot), Eats(mascot, \"kibble\").\n.output Answer"]}
{"id": 1718, "answer": true, "completion": ".decl Is_based_on(Thing_A:symbol, Thing_B:symbol)\nIs_based_on(\"months\", \"solar cycle\").\n.decl Answer()\nAnswer() :- Is_based_on(\"months\", \"solar cycle\").\n.output Answer", "completions": [".decl Is_based_on(Thing_A:symbol, Thing_B:symbol)\nIs_based_on(\"months\", \"solar cycle\").\n.decl Answer()\nAnswer() :- Is_based_on(\"months\", \"solar cycle\").\n.output Answer"]}
{"id": 1719, "answer": false, "completion": ".decl Is_known_by(Route:symbol, Group:symbol)\nIs_known_by(\"Route 66\", \"Americans\").\n.decl Answer()\nAnswer() :- !Is_known_by(\"Route 66\", \"Americans\").\n.output Answer", "completions": [".decl Is_known_by(Route:symbol, Group:symbol)\nIs_known_by(\"Route 66\", \"Americans\").\n.decl Answer()\nAnswer() :- !Is_known_by(\"Route 66\", \"Americans\").\n.output Answer"]}
{"id": 1720, "answer": false, "completion": ".decl Is_prepared_in(Food:symbol, Utensil:symbol)\nIs_prepared_in(\"pancakes\", \"pan\").\n.decl Answer()\nAnswer() :- !Is_prepared_in(\"pancakes\", \"pot\").\n.output Answer", "completions": [".decl Is_prepared_in(Food:symbol, Utensil:symbol)\nIs_prepared_in(\"pancakes\", \"pan\").\n.decl Answer()\nAnswer() :- !Is_prepared_in(\"pancakes\", \"pot\").\n.output Answer"]}
{"id": 1721, "answer": false, "completion": ".decl Uses(Person:symbol, Technology:symbol)\nUses(\"Malcolm X\", \"English\").\n.decl Answer()\nAnswer() :- !Uses(\"Malcolm X\", \"Unicode\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Technology:symbol)\nUses(\"Malcolm X\", \"English\").\n.decl Answer()\nAnswer() :- !Uses(\"Malcolm X\", \"Unicode\").\n.output Answer"]}
{"id": 1722, "answer": true, "completion": ".decl Has_distance(Trip:symbol, Distance:float)\nHas_distance(\"NYC to Raleigh NC\", 890).\n.decl Has_max_distance(Vehicle:symbol, Max_distance:float)\nHas_max_distance(\"Toyota Hiux\", 1000).\n.decl Answer()\nAnswer() :- Has_distance(\"NYC to Raleigh NC\", distance), Has_max_distance(\"Toyota Hiux\", max_distance), distance <= max_distance.\n.output Answer", "completions": [".decl Has_distance(Trip:symbol, Distance:float)\nHas_distance(\"NYC to Raleigh NC\", 890).\n.decl Has_max_distance(Vehicle:symbol, Max_distance:float)\nHas_max_distance(\"Toyota Hiux\", 1000).\n.decl Answer()\nAnswer() :- Has_distance(\"NYC to Raleigh NC\", distance), Has_max_distance(\"Toyota Hiux\", max_distance), distance <= max_distance.\n.output Answer"]}
{"id": 1723, "answer": true, "completion": ".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"watermelon\", \"tricarboxylic acid\").\n.decl Answer()\nAnswer() :- !Contains(\"watermelon\", \"tricarboxylic acid\").\n.output Answer", "completions": [".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"watermelon\", \"tricarboxylic acid\").\n.decl Answer()\nAnswer() :- !Contains(\"watermelon\", \"tricarboxylic acid\").\n.output Answer"]}
{"id": 1724, "answer": true, "completion": ".decl Is_prevalent(Food:symbol, Cuisine:symbol)\nIs_prevalent(\"shrimp\", \"Ethiopian\").\n.decl Answer()\nAnswer() :- Is_prevalent(\"shrimp\", \"Ethiopian\").\n.output Answer", "completions": [".decl Is_prevalent(Food:symbol, Cuisine:symbol)\nIs_prevalent(\"shrimp\", \"Ethiopian\").\n.decl Answer()\nAnswer() :- Is_prevalent(\"shrimp\", \"Ethiopian\").\n.output Answer"]}
{"id": 1725, "answer": false, "completion": ".decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"Battle of San Antonio\", \"19th century\").\n.decl Answer()\nAnswer() :- Happened_in_time(\"Battle of San Antonio\", \"19th century\").\n.output Answer", "completions": [".decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"Battle of San Antonio\", \"19th century\").\n.decl Answer()\nAnswer() :- Happened_in_time(\"Battle of San Antonio\", \"19th century\").\n.output Answer"]}
{"id": 1726, "answer": true, "completion": ".decl Is_threat(Threat:symbol, Target:symbol)\nIs_threat(\"snakebite\", \"human\").\n.decl Answer()\nAnswer() :- Is_threat(\"snakebite\", \"T-1000\").\n.output Answer", "completions": [".decl Is_threat(Threat:symbol, Target:symbol)\nIs_threat(\"snakebite\", \"human\").\n.decl Answer()\nAnswer() :- Is_threat(\"snakebite\", \"T-1000\").\n.output Answer"]}
{"id": 1727, "answer": true, "completion": ".decl Has_belt(Person:symbol, Belt:symbol)\nHas_belt(\"Jon Jones\", \"black belt\").\n.decl Answer()\nAnswer() :- Has_belt(\"Jon Jones\", \"black belt\"), !Has_belt(\"white belt\", \"black belt\").\n.output Answer", "completions": [".decl Has_belt(Person:symbol, Belt:symbol)\nHas_belt(\"Jon Jones\", \"black belt\").\n.decl Answer()\nAnswer() :- Has_belt(\"Jon Jones\", \"black belt\"), !Has_belt(\"white belt\", \"black belt\").\n.output Answer"]}
{"id": 1728, "answer": true, "completion": ".decl Has_traits(Character:symbol, Trait:symbol)\nHas_traits(\"Darth Vader\", \"evil\").\nHas_traits(\"Severus Snape\", \"evil\").\n.decl Answer()\nAnswer() :- Has_traits(\"Darth Vader\", trait1), Has_traits(\"Severus Snape\", trait2), trait1 = trait2.\n.output Answer", "completions": [".decl Has_traits(Character:symbol, Trait:symbol)\nHas_traits(\"Darth Vader\", \"evil\").\nHas_traits(\"Severus Snape\", \"evil\").\n.decl Answer()\nAnswer() :- Has_traits(\"Darth Vader\", trait1), Has_traits(\"Severus Snape\", trait2), trait1 = trait2.\n.output Answer"]}
{"id": 1729, "answer": true, "completion": ".decl Has_name(Team:symbol, Name:symbol)\nHas_name(\"Minor League Baseball Team\", \"Tigers\").\nHas_name(\"Minor League Baseball Team\", \"Bears\").\n.decl Is_weather_phenomenon(Name:symbol)\nIs_weather_phenomenon(\"Hurricanes\").\nIs_weather_phenomenon(\"Tornadoes\").\n.decl Answer()\nAnswer() :- Has_name(\"Minor League Baseball Team\", name), !Is_weather_phenomenon(name).\n.output Answer", "completions": [".decl Has_name(Team:symbol, Name:symbol)\nHas_name(\"Minor League Baseball Team\", \"Tigers\").\nHas_name(\"Minor League Baseball Team\", \"Bears\").\n.decl Is_weather_phenomenon(Name:symbol)\nIs_weather_phenomenon(\"Hurricanes\").\nIs_weather_phenomenon(\"Tornadoes\").\n.decl Answer()\nAnswer() :- Has_name(\"Minor League Baseball Team\", name), !Is_weather_phenomenon(name).\n.output Answer"]}
{"id": 1730, "answer": false, "completion": ".decl Influences(Person:symbol, Genre:symbol)\nInfluences(\"Johann Sebastian Bach\", \"classical\").\n.decl Answer()\nAnswer() :- !Influences(\"Johann Sebastian Bach\", \"heavy metal\").\n.output Answer", "completions": [".decl Influences(Person:symbol, Genre:symbol)\nInfluences(\"Johann Sebastian Bach\", \"classical\").\n.decl Answer()\nAnswer() :- !Influences(\"Johann Sebastian Bach\", \"heavy metal\").\n.output Answer"]}
{"id": 1731, "answer": false, "completion": ".decl Has_force(Animal:symbol, Force:float)\nHas_force(\"cheetah\", 2000).\nHas_force(\"Big Show\", 10000).\n.decl Answer()\nAnswer() :- Has_force(\"cheetah\", force1), Has_force(\"Big Show\", force2), force1 >= force2.\n.output Answer", "completions": [".decl Has_force(Animal:symbol, Force:float)\nHas_force(\"cheetah\", 2000).\nHas_force(\"Big Show\", 10000).\n.decl Answer()\nAnswer() :- Has_force(\"cheetah\", force1), Has_force(\"Big Show\", force2), force1 >= force2.\n.output Answer"]}
{"id": 1732, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"paratrooper\", \"mountain rescue\").\n.decl Answer()\nAnswer() :- Has_skill(\"paratrooper\", \"mountain rescue\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"paratrooper\", \"mountain rescue\").\n.decl Answer()\nAnswer() :- Has_skill(\"paratrooper\", \"mountain rescue\").\n.output Answer"]}
{"id": 1733, "answer": false, "completion": ".decl Has_association(Culture:symbol, Object:symbol, Association:symbol)\nHas_association(\"ancient Egyptians\", \"celery\", \"death\").\n.decl Answer()\nAnswer() :- Has_association(culture, \"celery\", \"death\").\n.output Answer", "completions": [".decl Has_association(Culture:symbol, Object:symbol, Association:symbol)\nHas_association(\"ancient Egyptians\", \"celery\", \"death\").\n.decl Answer()\nAnswer() :- Has_association(culture, \"celery\", \"death\").\n.output Answer"]}
{"id": 1734, "answer": false, "completion": ".decl Has_party(President:symbol, Party:symbol)\nHas_party(\"Woodrow Wilson\", \"Democratic\").\nHas_party(\"William Howard Taft\", \"Republican\").\nHas_party(\"Warren G. Harding\", \"Republican\").\n.decl Answer()\nAnswer() :- Has_party(\"Woodrow Wilson\", party1), Has_party(\"William Howard Taft\", party2), Has_party(\"Warren G. Harding\", party3), party1 != party2, party2 != party3.\n.output Answer", "completions": [".decl Has_party(President:symbol, Party:symbol)\nHas_party(\"Woodrow Wilson\", \"Democratic\").\nHas_party(\"William Howard Taft\", \"Republican\").\nHas_party(\"Warren G. Harding\", \"Republican\").\n.decl Answer()\nAnswer() :- Has_party(\"Woodrow Wilson\", party1), Has_party(\"William Howard Taft\", party2), Has_party(\"Warren G. Harding\", party3), party1 != party2, party2 != party3.\n.output Answer"]}
{"id": 1735, "answer": false, "completion": ".decl Has_n_troops(Country:symbol, Year:float, N_troops:float)\nHas_n_troops(\"United States\", 1965, 149000).\n.decl Answer()\nAnswer() :- Has_n_troops(\"United States\", 1965, n_troops), n_troops < 150000.\n.output Answer", "completions": [".decl Has_n_troops(Country:symbol, Year:float, N_troops:float)\nHas_n_troops(\"United States\", 1965, 149000).\n.decl Answer()\nAnswer() :- Has_n_troops(\"United States\", 1965, n_troops), n_troops < 150000.\n.output Answer"]}
{"id": 1736, "answer": false, "completion": ".decl Assigns(Teacher:symbol, Assignment:symbol)\n.decl Answer()\nAnswer() :- Assigns(\"kindergarten teacher\", \"thesis paper\"), !Assigns(\"kindergarten teacher\", assignment), assignment != \"thesis paper\".\n.output Answer", "completions": [".decl Assigns(Teacher:symbol, Assignment:symbol)\n.decl Answer()\nAnswer() :- Assigns(\"kindergarten teacher\", \"thesis paper\"), !Assigns(\"kindergarten teacher\", assignment), assignment != \"thesis paper\".\n.output Answer"]}
{"id": 1737, "answer": true, "completion": ".decl Is_cephalophore(Person:symbol)\nIs_cephalophore(\"John the Baptist\").\n.decl Is_invited(Person:symbol, Event:symbol)\nIs_invited(\"John the Baptist\", \"hypothetical cephalophore reunion in heaven\").\n.decl Answer()\nAnswer() :- Is_cephalophore(\"John the Baptist\"), Is_invited(\"John the Baptist\", \"hypothetical cephalophore reunion in heaven\").\n.output Answer", "completions": [".decl Is_cephalophore(Person:symbol)\nIs_cephalophore(\"John the Baptist\").\n.decl Is_invited(Person:symbol, Event:symbol)\nIs_invited(\"John the Baptist\", \"hypothetical cephalophore reunion in heaven\").\n.decl Answer()\nAnswer() :- Is_cephalophore(\"John the Baptist\"), Is_invited(\"John the Baptist\", \"hypothetical cephalophore reunion in heaven\").\n.output Answer"]}
{"id": 1738, "answer": true, "completion": ".decl Affects(Group:symbol, Event:symbol)\nAffects(\"Wehrmacht\", \"World War I\").\n.decl Answer()\nAnswer() :- Affects(\"Wehrmacht\", \"World War I\").\n.output Answer", "completions": [".decl Affects(Group:symbol, Event:symbol)\nAffects(\"Wehrmacht\", \"World War I\").\n.decl Answer()\nAnswer() :- Affects(\"Wehrmacht\", \"World War I\").\n.output Answer"]}
{"id": 1739, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Lil Wayne\", 15).\n.decl Legal_age(Country:symbol, Age:float)\nLegal_age(\"United States\", 16).\n.decl Answer()\nAnswer() :- Has_age(\"Lil Wayne\", age1), Legal_age(\"United States\", age2), age1 < age2.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Lil Wayne\", 15).\n.decl Legal_age(Country:symbol, Age:float)\nLegal_age(\"United States\", 16).\n.decl Answer()\nAnswer() :- Has_age(\"Lil Wayne\", age1), Legal_age(\"United States\", age2), age1 < age2.\n.output Answer"]}
{"id": 1740, "answer": false, "completion": ".decl Teaches(Teacher:symbol, Student:symbol)\nTeaches(\"Professor Dumbledore\", \"Harry Potter\").\n.decl Answer()\nAnswer() :- !Teaches(\"Professor Dumbledore\", \"Lord Voldemort\").\n.output Answer", "completions": [".decl Teaches(Teacher:symbol, Student:symbol)\nTeaches(\"Professor Dumbledore\", \"Harry Potter\").\n.decl Answer()\nAnswer() :- !Teaches(\"Professor Dumbledore\", \"Lord Voldemort\").\n.output Answer"]}
{"id": 1741, "answer": true, "completion": ".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Olympia Washington\", \"Olympia\").\nHas_name(\"Hephaestus's workshop\", \"Olympia\").\n.decl Answer()\nAnswer() :- Has_name(place1, name), Has_name(place2, name), place1 != place2.\n.output Answer", "completions": [".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Olympia Washington\", \"Olympia\").\nHas_name(\"Hephaestus's workshop\", \"Olympia\").\n.decl Answer()\nAnswer() :- Has_name(place1, name), Has_name(place2, name), place1 != place2.\n.output Answer"]}
{"id": 1742, "answer": true, "completion": ".decl Acronym_stands_for(Acronym:symbol, Meaning:symbol)\nAcronym_stands_for(\"JPEG\", \"Joint Photographic Experts Group\").\n.decl Answer()\nAnswer() :- Acronym_stands_for(\"JPEG\", meaning), meaning = \"Joint Committee\".\n.output Answer", "completions": [".decl Acronym_stands_for(Acronym:symbol, Meaning:symbol)\nAcronym_stands_for(\"JPEG\", \"Joint Photographic Experts Group\").\n.decl Answer()\nAnswer() :- Acronym_stands_for(\"JPEG\", meaning), meaning = \"Joint Committee\".\n.output Answer"]}
{"id": 1743, "answer": false, "completion": ".decl Has_money(Person:symbol, Money:float)\nHas_money(\"Mickey Mouse\", 0).\n.decl Accepts_payment(Store:symbol, Payment_type:symbol)\nAccepts_payment(\"Zazzle\", \"cash\").\nAccepts_payment(\"Zazzle\", \"credit\").\n.decl Answer()\nAnswer() :- Has_money(\"Mickey Mouse\", money), Accepts_payment(\"Zazzle\", payment_type), payment_type != \"cash\".\n.output Answer", "completions": [".decl Has_money(Person:symbol, Money:float)\nHas_money(\"Mickey Mouse\", 0).\n.decl Accepts_payment(Store:symbol, Payment_type:symbol)\nAccepts_payment(\"Zazzle\", \"cash\").\nAccepts_payment(\"Zazzle\", \"credit\").\n.decl Answer()\nAnswer() :- Has_money(\"Mickey Mouse\", money), Accepts_payment(\"Zazzle\", payment_type), payment_type != \"cash\".\n.output Answer"]}
{"id": 1744, "answer": true, "completion": ".decl Affects(Event:symbol, Party:symbol)\nAffects(\"Watergate scandal\", \"Democratic Party\").\n.decl Answer()\nAnswer() :- !Affects(\"Watergate scandal\", \"Republican Party\").\n.output Answer", "completions": [".decl Affects(Event:symbol, Party:symbol)\nAffects(\"Watergate scandal\", \"Democratic Party\").\n.decl Answer()\nAnswer() :- !Affects(\"Watergate scandal\", \"Republican Party\").\n.output Answer"]}
{"id": 1745, "answer": true, "completion": ".decl Has_career_status(Person:symbol, Career_status:symbol)\nHas_career_status(\"Dave Mustaine\", \"failed\").\n.decl Was_member_of(Person:symbol, Band:symbol)\nWas_member_of(\"Dave Mustaine\", \"Metallica\").\n.decl Answer()\nAnswer() :- Has_career_status(\"Dave Mustaine\", \"failed\"), Was_member_of(\"Dave Mustaine\", \"Metallica\").\n.output Answer", "completions": [".decl Has_career_status(Person:symbol, Career_status:symbol)\nHas_career_status(\"Dave Mustaine\", \"failed\").\n.decl Was_member_of(Person:symbol, Band:symbol)\nWas_member_of(\"Dave Mustaine\", \"Metallica\").\n.decl Answer()\nAnswer() :- Has_career_status(\"Dave Mustaine\", \"failed\"), Was_member_of(\"Dave Mustaine\", \"Metallica\").\n.output Answer"]}
{"id": 1746, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Iggy Pop\", \"James Newell Osterberg\").\nHas_name(\"Iggy Pop's father\", \"James Newell Osterberg Sr.\").\n.decl Answer()\nAnswer() :- Has_name(\"Iggy Pop\", name1), Has_name(\"Iggy Pop's father\", name2), name1 = name2.\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Iggy Pop\", \"James Newell Osterberg\").\nHas_name(\"Iggy Pop's father\", \"James Newell Osterberg Sr.\").\n.decl Answer()\nAnswer() :- Has_name(\"Iggy Pop\", name1), Has_name(\"Iggy Pop's father\", name2), name1 = name2.\n.output Answer"]}
{"id": 1747, "answer": false, "completion": ".decl Follows(Person:symbol, Religion:symbol)\nFollows(\"worshipers of Shiva\", \"Hinduism\").\n.decl Visits(Religion:symbol, Place:symbol)\nVisits(\"Hinduism\", \"Holy Land\").\n.decl Answer()\nAnswer() :- Follows(person, \"Hinduism\"), Visits(\"Hinduism\", \"Holy Land\").\n.output Answer", "completions": [".decl Follows(Person:symbol, Religion:symbol)\nFollows(\"worshipers of Shiva\", \"Hinduism\").\n.decl Visits(Religion:symbol, Place:symbol)\nVisits(\"Hinduism\", \"Holy Land\").\n.decl Answer()\nAnswer() :- Follows(person, \"Hinduism\"), Visits(\"Hinduism\", \"Holy Land\").\n.output Answer"]}
{"id": 1748, "answer": true, "completion": ".decl Has_nutrients(Food:symbol, Nutrient:symbol)\nHas_nutrients(\"coca leaves\", \"calories\").\n.decl Answer()\nAnswer() :- Has_nutrients(\"coca leaves\", \"calories\").\n.output Answer", "completions": [".decl Has_nutrients(Food:symbol, Nutrient:symbol)\nHas_nutrients(\"coca leaves\", \"calories\").\n.decl Answer()\nAnswer() :- Has_nutrients(\"coca leaves\", \"calories\").\n.output Answer"]}
{"id": 1749, "answer": false, "completion": ".decl Has_formation_type(Animal:symbol, Formation_type:symbol)\nHas_formation_type(\"black swan\", \"V\").\n.decl Has_length(Word:symbol, Length:float)\nHas_length(\"pneumonoultramicroscopicsilicovolcanoconiosis\", 45).\n.decl Answer()\nAnswer() :- Has_formation_type(\"black swan\", formation_type), Has_length(word, length), formation_type = \"V\", length = 45.\n.output Answer", "completions": [".decl Has_formation_type(Animal:symbol, Formation_type:symbol)\nHas_formation_type(\"black swan\", \"V\").\n.decl Has_length(Word:symbol, Length:float)\nHas_length(\"pneumonoultramicroscopicsilicovolcanoconiosis\", 45).\n.decl Answer()\nAnswer() :- Has_formation_type(\"black swan\", formation_type), Has_length(word, length), formation_type = \"V\", length = 45.\n.output Answer"]}
{"id": 1750, "answer": false, "completion": ".decl Refers_to(Name:symbol, Concept:symbol)\nRefers_to(\"C-SPAN\", \"cable television\").\n.decl Utilizes(Concept:symbol, Technology:symbol)\nUtilizes(\"cable television\", \"outer space\").\n.decl Answer()\nAnswer() :- Refers_to(\"C-SPAN\", concept), Utilizes(concept, \"outer space\").\n.output Answer", "completions": [".decl Refers_to(Name:symbol, Concept:symbol)\nRefers_to(\"C-SPAN\", \"cable television\").\n.decl Utilizes(Concept:symbol, Technology:symbol)\nUtilizes(\"cable television\", \"outer space\").\n.decl Answer()\nAnswer() :- Refers_to(\"C-SPAN\", concept), Utilizes(concept, \"outer space\").\n.output Answer"]}
{"id": 1751, "answer": false, "completion": ".decl Has_frequency(Sound:symbol, Frequency:float)\nHas_frequency(\"Kelly Clarkson's voice\", 200).\nHas_frequency(\"glass\", 2000).\n.decl Answer()\nAnswer() :- Has_frequency(\"Kelly Clarkson's voice\", frequency1), Has_frequency(\"glass\", frequency2), frequency1 > frequency2.\n.output Answer", "completions": [".decl Has_frequency(Sound:symbol, Frequency:float)\nHas_frequency(\"Kelly Clarkson's voice\", 200).\nHas_frequency(\"glass\", 2000).\n.decl Answer()\nAnswer() :- Has_frequency(\"Kelly Clarkson's voice\", frequency1), Has_frequency(\"glass\", frequency2), frequency1 > frequency2.\n.output Answer"]}
{"id": 1752, "answer": true, "completion": ".decl Gives_presents(Person:symbol, Recipient:symbol)\nGives_presents(\"Santa Claus\", \"children\").\n.decl Answer()\nAnswer() :- Gives_presents(\"Santa Claus\", \"Joffrey Baratheon\").\n.output Answer", "completions": [".decl Gives_presents(Person:symbol, Recipient:symbol)\nGives_presents(\"Santa Claus\", \"children\").\n.decl Answer()\nAnswer() :- Gives_presents(\"Santa Claus\", \"Joffrey Baratheon\").\n.output Answer"]}
{"id": 1753, "answer": false, "completion": ".decl Belongs_to_family(Plant:symbol, Family:symbol)\nBelongs_to_family(\"slime lily\", \"Araceae\").\nBelongs_to_family(\"asparagus\", \"Asparagaceae\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"slime lily\", family1), Belongs_to_family(\"asparagus\", family2), family1 != family2.\n.output Answer", "completions": [".decl Belongs_to_family(Plant:symbol, Family:symbol)\nBelongs_to_family(\"slime lily\", \"Araceae\").\nBelongs_to_family(\"asparagus\", \"Asparagaceae\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"slime lily\", family1), Belongs_to_family(\"asparagus\", family2), family1 != family2.\n.output Answer"]}
{"id": 1754, "answer": true, "completion": ".decl Visited(Person:symbol, Place:symbol)\nVisited(\"Christopher Columbus\", \"America\").\n.decl Answer()\nAnswer() :- !Visited(\"Christopher Columbus\", \"Antarctica\").\n.output Answer", "completions": [".decl Visited(Person:symbol, Place:symbol)\nVisited(\"Christopher Columbus\", \"America\").\n.decl Answer()\nAnswer() :- !Visited(\"Christopher Columbus\", \"Antarctica\").\n.output Answer"]}
{"id": 1755, "answer": false, "completion": ".decl Can_wear(Animal:symbol, Item:symbol)\nCan_wear(\"human\", \"snowshoe\").\n.decl Answer()\nAnswer() :- !Can_wear(\"snake\", \"snowshoe\").\n.output Answer", "completions": [".decl Can_wear(Animal:symbol, Item:symbol)\nCan_wear(\"human\", \"snowshoe\").\n.decl Answer()\nAnswer() :- !Can_wear(\"snake\", \"snowshoe\").\n.output Answer"]}
{"id": 1756, "answer": false, "completion": ".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"northern fur seal\", 10).\n.decl Has_month(Event:symbol, Month:symbol)\nHas_month(\"emergency surgery\", \"July\").\n.decl Is_safe_anesthesia_candidate(Temperature:float)\nIs_safe_anesthesia_candidate(temperature) :- temperature > 5.\n.decl Answer()\nAnswer() :- Has_temperature(\"northern fur seal\", temperature), Has_month(\"emergency surgery\", \"July\"), Is_safe_anesthesia_candidate(temperature).\n.output Answer", "completions": [".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"northern fur seal\", 10).\n.decl Has_month(Event:symbol, Month:symbol)\nHas_month(\"emergency surgery\", \"July\").\n.decl Is_safe_anesthesia_candidate(Temperature:float)\nIs_safe_anesthesia_candidate(temperature) :- temperature > 5.\n.decl Answer()\nAnswer() :- Has_temperature(\"northern fur seal\", temperature), Has_month(\"emergency surgery\", \"July\"), Is_safe_anesthesia_candidate(temperature).\n.output Answer"]}
{"id": 1757, "answer": false, "completion": ".decl Has_rule(Location:symbol, Rule:symbol)\nHas_rule(\"Orange County, California\", \"airplanes must be quiet\").\n.decl Answer()\nAnswer() :- Has_rule(\"Orange County, California\", \"airplanes must be quiet\").\n.output Answer", "completions": [".decl Has_rule(Location:symbol, Rule:symbol)\nHas_rule(\"Orange County, California\", \"airplanes must be quiet\").\n.decl Answer()\nAnswer() :- Has_rule(\"Orange County, California\", \"airplanes must be quiet\").\n.output Answer"]}
{"id": 1758, "answer": true, "completion": ".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Charlemagne\", \"Pepin the Short\").\n.decl Influenced_outcome(Person:symbol, Event:symbol)\nInfluenced_outcome(\"Pepin the Short\", \"Battle of Tours\").\n.decl Answer()\nAnswer() :- Has_father(\"Charlemagne\", father), Influenced_outcome(father, \"Battle of Tours\").\n.output Answer", "completions": [".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Charlemagne\", \"Pepin the Short\").\n.decl Influenced_outcome(Person:symbol, Event:symbol)\nInfluenced_outcome(\"Pepin the Short\", \"Battle of Tours\").\n.decl Answer()\nAnswer() :- Has_father(\"Charlemagne\", father), Influenced_outcome(father, \"Battle of Tours\").\n.output Answer"]}
{"id": 1759, "answer": true, "completion": ".decl Interviewed_by(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Interviewed_by(\"Walt Disney\", \"Anderson Cooper\").\n.output Answer", "completions": [".decl Interviewed_by(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Interviewed_by(\"Walt Disney\", \"Anderson Cooper\").\n.output Answer"]}
{"id": 1760, "answer": false, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Super Mario\", \"plumber\").\n.decl Requires_continuing_education(Profession:symbol, State:symbol)\nRequires_continuing_education(\"plumber\", \"Illinois\").\n.decl Answer()\nAnswer() :- Has_profession(\"Super Mario\", profession), !Requires_continuing_education(profession, \"Illinois\").\n.output Answer", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Super Mario\", \"plumber\").\n.decl Requires_continuing_education(Profession:symbol, State:symbol)\nRequires_continuing_education(\"plumber\", \"Illinois\").\n.decl Answer()\nAnswer() :- Has_profession(\"Super Mario\", profession), !Requires_continuing_education(profession, \"Illinois\").\n.output Answer"]}
{"id": 1761, "answer": true, "completion": ".decl Has_illness(Person:symbol, Illness:symbol)\nHas_illness(\"Rita Ora\", \"tonsilitis\").\n.decl Has_surgery(Person:symbol, Surgery:symbol, Year:float)\nHas_surgery(\"Rita Ora\", \"tonsilitis surgery\", 2020).\n.decl Is_harmless(Illness:symbol, Surgery:symbol)\nIs_harmless(\"strep throat\", \"tonsilitis surgery\").\n.decl Answer()\nAnswer() :- Has_illness(\"Rita Ora\", illness), Has_surgery(\"Rita Ora\", surgery, year), Is_harmless(illness, surgery).\n.output Answer", "completions": [".decl Has_illness(Person:symbol, Illness:symbol)\nHas_illness(\"Rita Ora\", \"tonsilitis\").\n.decl Has_surgery(Person:symbol, Surgery:symbol, Year:float)\nHas_surgery(\"Rita Ora\", \"tonsilitis surgery\", 2020).\n.decl Is_harmless(Illness:symbol, Surgery:symbol)\nIs_harmless(\"strep throat\", \"tonsilitis surgery\").\n.decl Answer()\nAnswer() :- Has_illness(\"Rita Ora\", illness), Has_surgery(\"Rita Ora\", surgery, year), Is_harmless(illness, surgery).\n.output Answer"]}
{"id": 1762, "answer": true, "completion": ".decl Wins(Person:symbol, Event:symbol)\n.decl Answer()\nAnswer() :- Wins(\"William Franklyn-Miller\", \"2020 Nascar Cup Series\").\n.output Answer", "completions": [".decl Wins(Person:symbol, Event:symbol)\n.decl Answer()\nAnswer() :- Wins(\"William Franklyn-Miller\", \"2020 Nascar Cup Series\").\n.output Answer"]}
{"id": 1763, "answer": true, "completion": ".decl Has_background(Flag:symbol, Background:symbol)\nHas_background(\"Azerbaijani flag\", \"blue\").\n.decl Has_image(Background:symbol, Image:symbol)\nHas_image(\"blue\", \"Powerpuff Girls\").\n.decl Answer()\nAnswer() :- Has_background(\"Azerbaijani flag\", background), Has_image(background, \"Powerpuff Girls\").\n.output Answer", "completions": [".decl Has_background(Flag:symbol, Background:symbol)\nHas_background(\"Azerbaijani flag\", \"blue\").\n.decl Has_image(Background:symbol, Image:symbol)\nHas_image(\"blue\", \"Powerpuff Girls\").\n.decl Answer()\nAnswer() :- Has_background(\"Azerbaijani flag\", background), Has_image(background, \"Powerpuff Girls\").\n.output Answer"]}
{"id": 1764, "answer": false, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Los Angeles Memorial Sports Arena\", 17000).\nHas_capacity(\"Coachella\", 80000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Los Angeles Memorial Sports Arena\", capacity1), Has_capacity(\"Coachella\", capacity2), capacity1 < capacity2.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Los Angeles Memorial Sports Arena\", 17000).\nHas_capacity(\"Coachella\", 80000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Los Angeles Memorial Sports Arena\", capacity1), Has_capacity(\"Coachella\", capacity2), capacity1 < capacity2.\n.output Answer"]}
{"id": 1765, "answer": false, "completion": ".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Moon Jae-in\", \"law degree\").\n.decl Is_teenager(Person:symbol)\nIs_teenager(\"Moon Jae-in\").\n.decl Answer()\nAnswer() :- Has_degree(\"Moon Jae-in\", \"Abitur\"), Is_teenager(\"Moon Jae-in\").\n.output Answer", "completions": [".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Moon Jae-in\", \"law degree\").\n.decl Is_teenager(Person:symbol)\nIs_teenager(\"Moon Jae-in\").\n.decl Answer()\nAnswer() :- Has_degree(\"Moon Jae-in\", \"Abitur\"), Is_teenager(\"Moon Jae-in\").\n.output Answer"]}
{"id": 1766, "answer": false, "completion": ".decl Is_popular(Thing:symbol, Place:symbol)\nIs_popular(\"Bandy\", \"Finland\").\n.decl Answer()\nAnswer() :- Is_popular(\"Bandy\", \"Texas\").\n.output Answer", "completions": [".decl Is_popular(Thing:symbol, Place:symbol)\nIs_popular(\"Bandy\", \"Finland\").\n.decl Answer()\nAnswer() :- Is_popular(\"Bandy\", \"Texas\").\n.output Answer"]}
{"id": 1767, "answer": true, "completion": ".decl Can_do(Robot:symbol, Action:symbol)\nCan_do(\"Curiosity\", \"take samples of rocks\").\n.decl Is_at(Robot:symbol, Location:symbol)\nIs_at(\"Curiosity\", \"Lacus Temporis\").\n.decl Answer()\nAnswer() :- Can_do(\"Curiosity\", action), Is_at(\"Curiosity\", \"Lacus Temporis\").\n.output Answer", "completions": [".decl Can_do(Robot:symbol, Action:symbol)\nCan_do(\"Curiosity\", \"take samples of rocks\").\n.decl Is_at(Robot:symbol, Location:symbol)\nIs_at(\"Curiosity\", \"Lacus Temporis\").\n.decl Answer()\nAnswer() :- Can_do(\"Curiosity\", action), Is_at(\"Curiosity\", \"Lacus Temporis\").\n.output Answer"]}
{"id": 1768, "answer": false, "completion": ".decl Causes(Event_A:symbol, Event_B:symbol)\n.decl Answer()\nAnswer() :- !Causes(\"pancreas removal\", \"bankruptcy\").\n.output Answer", "completions": [".decl Causes(Event_A:symbol, Event_B:symbol)\n.decl Answer()\nAnswer() :- !Causes(\"pancreas removal\", \"bankruptcy\").\n.output Answer"]}
{"id": 1769, "answer": true, "completion": ".decl Treats(Treatment:symbol, Condition:symbol)\nTreats(\"sunscreen\", \"sunburn\").\n.decl Answer()\nAnswer() :- !Treats(\"sunscreen\", \"melanoma\").\n.output Answer", "completions": [".decl Treats(Treatment:symbol, Condition:symbol)\nTreats(\"sunscreen\", \"sunburn\").\n.decl Answer()\nAnswer() :- !Treats(\"sunscreen\", \"melanoma\").\n.output Answer"]}
{"id": 1770, "answer": true, "completion": ".decl Has_rules(Place:symbol, Rules:symbol)\nHas_rules(\"Hogwarts\", \"No dark wizards allowed\").\n.decl Is_dark_wizard(Person:symbol)\nIs_dark_wizard(\"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Has_rules(\"Hogwarts\", rules), Is_dark_wizard(\"Lord Voldemort\"), rules = \"No dark wizards allowed\".\n.output Answer", "completions": [".decl Has_rules(Place:symbol, Rules:symbol)\nHas_rules(\"Hogwarts\", \"No dark wizards allowed\").\n.decl Is_dark_wizard(Person:symbol)\nIs_dark_wizard(\"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Has_rules(\"Hogwarts\", rules), Is_dark_wizard(\"Lord Voldemort\"), rules = \"No dark wizards allowed\".\n.output Answer"]}
{"id": 1771, "answer": false, "completion": ".decl Is_available(Food:symbol, Place:symbol)\nIs_available(\"moon cakes\", \"Chinatown, Manhattan\").\n.decl Answer()\nAnswer() :- Is_available(\"moon cakes\", \"Chinatown, Manhattan\").\n.output Answer", "completions": [".decl Is_available(Food:symbol, Place:symbol)\nIs_available(\"moon cakes\", \"Chinatown, Manhattan\").\n.decl Answer()\nAnswer() :- Is_available(\"moon cakes\", \"Chinatown, Manhattan\").\n.output Answer"]}
{"id": 1772, "answer": false, "completion": ".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"President of Mexico\", \"Mexico\").\n.decl Can_vote_in(Person:symbol, State:symbol)\nCan_vote_in(\"President of Mexico\", \"Mexico\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"President of Mexico\", country), Can_vote_in(\"President of Mexico\", \"New Mexico\").\n.output Answer", "completions": [".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"President of Mexico\", \"Mexico\").\n.decl Can_vote_in(Person:symbol, State:symbol)\nCan_vote_in(\"President of Mexico\", \"Mexico\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"President of Mexico\", country), Can_vote_in(\"President of Mexico\", \"New Mexico\").\n.output Answer"]}
{"id": 1773, "answer": false, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"print of a Van Goh\", 10).\n.decl Answer()\nAnswer() :- Has_value(\"print of a Van Goh\", value), value > 0.\n.output Answer", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"print of a Van Goh\", 10).\n.decl Answer()\nAnswer() :- Has_value(\"print of a Van Goh\", value), value > 0.\n.output Answer"]}
{"id": 1774, "answer": true, "completion": ".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"John George Bice's birthplace\", \"Cornwall\").\n.decl Answer()\nAnswer() :- Is_near(\"John George Bice's birthplace\", \"Cornwall\").\n.output Answer", "completions": [".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"John George Bice's birthplace\", \"Cornwall\").\n.decl Answer()\nAnswer() :- Is_near(\"John George Bice's birthplace\", \"Cornwall\").\n.output Answer"]}
{"id": 1775, "answer": false, "completion": ".decl Votes_for(Person:symbol, Candidate:symbol)\n.decl Answer()\nAnswer() :- Votes_for(\"Elijah Cummings\", \"Joe Biden\").\n.output Answer", "completions": [".decl Votes_for(Person:symbol, Candidate:symbol)\n.decl Answer()\nAnswer() :- Votes_for(\"Elijah Cummings\", \"Joe Biden\").\n.output Answer"]}
{"id": 1776, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Lord Voldemort\", \"Dark Arts\").\n.decl Affects_skill(Event:symbol, Skill:symbol)\nAffects_skill(\"Final Fantasy silence\", \"Dark Arts\").\n.decl Answer()\nAnswer() :- Has_skill(\"Lord Voldemort\", skill), Affects_skill(\"Final Fantasy silence\", skill), !Has_skill(\"Lord Voldemort\", skill).\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Lord Voldemort\", \"Dark Arts\").\n.decl Affects_skill(Event:symbol, Skill:symbol)\nAffects_skill(\"Final Fantasy silence\", \"Dark Arts\").\n.decl Answer()\nAnswer() :- Has_skill(\"Lord Voldemort\", skill), Affects_skill(\"Final Fantasy silence\", skill), !Has_skill(\"Lord Voldemort\", skill).\n.output Answer"]}
{"id": 1777, "answer": true, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"dollar store\", \"toothpaste\").\nSells(\"dollar store\", \"soap\").\nSells(\"dollar store\", \"shampoo\").\n.decl Answer()\nAnswer() :- Sells(\"dollar store\", \"chlorine\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"dollar store\", \"toothpaste\").\nSells(\"dollar store\", \"soap\").\nSells(\"dollar store\", \"shampoo\").\n.decl Answer()\nAnswer() :- Sells(\"dollar store\", \"chlorine\").\n.output Answer"]}
{"id": 1778, "answer": true, "completion": ".decl Is_viable(Method:symbol, Location:symbol)\nIs_viable(\"hanging\", \"land\").\nIs_viable(\"shooting\", \"ship at sea\").\n.decl Answer()\nAnswer() :- Is_viable(\"hanging\", \"ship at sea\").\n.output Answer", "completions": [".decl Is_viable(Method:symbol, Location:symbol)\nIs_viable(\"hanging\", \"land\").\nIs_viable(\"shooting\", \"ship at sea\").\n.decl Answer()\nAnswer() :- Is_viable(\"hanging\", \"ship at sea\").\n.output Answer"]}
{"id": 1779, "answer": true, "completion": ".decl Has_character(Company:symbol, Character:symbol)\nHas_character(\"Disney\", \"Elsa\").\n.decl Is_type(Character:symbol, Type:symbol)\nIs_type(\"Elsa\", \"ice princess\").\n.decl Answer()\nAnswer() :- Has_character(\"Disney\", character), Is_type(character, \"ice princess\").\n.output Answer", "completions": [".decl Has_character(Company:symbol, Character:symbol)\nHas_character(\"Disney\", \"Elsa\").\n.decl Is_type(Character:symbol, Type:symbol)\nIs_type(\"Elsa\", \"ice princess\").\n.decl Answer()\nAnswer() :- Has_character(\"Disney\", character), Is_type(character, \"ice princess\").\n.output Answer"]}
{"id": 1780, "answer": false, "completion": ".decl Is_safe_to_eat(Food:symbol, Safety:symbol)\nIs_safe_to_eat(\"hair\", \"unsafe\").\n.decl Answer()\nAnswer() :- Is_safe_to_eat(\"hair\", safety), safety = \"unsafe\".\n.output Answer", "completions": [".decl Is_safe_to_eat(Food:symbol, Safety:symbol)\nIs_safe_to_eat(\"hair\", \"unsafe\").\n.decl Answer()\nAnswer() :- Is_safe_to_eat(\"hair\", safety), safety = \"unsafe\".\n.output Answer"]}
{"id": 1781, "answer": false, "completion": ".decl Used_in_country(Currency:symbol, Country:symbol)\nUsed_in_country(\"penny\", \"Canada\").\n.decl Answer()\nAnswer() :- Used_in_country(\"penny\", \"Canada\").\n.output Answer", "completions": [".decl Used_in_country(Currency:symbol, Country:symbol)\nUsed_in_country(\"penny\", \"Canada\").\n.decl Answer()\nAnswer() :- Used_in_country(\"penny\", \"Canada\").\n.output Answer"]}
{"id": 1782, "answer": false, "completion": ".decl Has_name(Monster:symbol, Name:symbol)\nHas_name(\"monster in West African Folklore that witches send into villages\", \"Tikoloshe\").\n.decl Sets_record(Name:symbol, Record:symbol)\nSets_record(\"Tikoloshe\", \"Scrabble record\").\n.decl Answer()\nAnswer() :- Has_name(\"monster in West African Folklore that witches send into villages\", name), Sets_record(name, \"Scrabble record\").\n.output Answer", "completions": [".decl Has_name(Monster:symbol, Name:symbol)\nHas_name(\"monster in West African Folklore that witches send into villages\", \"Tikoloshe\").\n.decl Sets_record(Name:symbol, Record:symbol)\nSets_record(\"Tikoloshe\", \"Scrabble record\").\n.decl Answer()\nAnswer() :- Has_name(\"monster in West African Folklore that witches send into villages\", name), Sets_record(name, \"Scrabble record\").\n.output Answer"]}
{"id": 1783, "answer": false, "completion": ".decl Has_plant(Song:symbol, Plant:symbol)\nHas_plant(\"Rosemary's Baby\", \"Rosemary\").\nHas_plant(\"Parsley, Sage, Rosemary and Thyme\", \"Rosemary\").\nHas_plant(\"The Rosemary Song\", \"Rosemary\").\nHas_plant(\"The Marigold Song\", \"Marigold\").\nHas_plant(\"The Daisy Song\", \"Daisy\").\n.decl Answer()\nAnswer() :- Has_plant(song1, \"Rosemary\"), Has_plant(song2, plant2), song1 != song2, plant2 != \"Rosemary\".\n.output Answer", "completions": [".decl Has_plant(Song:symbol, Plant:symbol)\nHas_plant(\"Rosemary's Baby\", \"Rosemary\").\nHas_plant(\"Parsley, Sage, Rosemary and Thyme\", \"Rosemary\").\nHas_plant(\"The Rosemary Song\", \"Rosemary\").\nHas_plant(\"The Marigold Song\", \"Marigold\").\nHas_plant(\"The Daisy Song\", \"Daisy\").\n.decl Answer()\nAnswer() :- Has_plant(song1, \"Rosemary\"), Has_plant(song2, plant2), song1 != song2, plant2 != \"Rosemary\".\n.output Answer"]}
{"id": 1784, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"person\", \"St. Vitus's Dance\").\n.decl Wins(Person:symbol, Competition:symbol)\n.decl Answer()\nAnswer() :- Has_disease(\"person\", \"St. Vitus's Dance\"), !Wins(\"person\", \"ballet competition\").\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"person\", \"St. Vitus's Dance\").\n.decl Wins(Person:symbol, Competition:symbol)\n.decl Answer()\nAnswer() :- Has_disease(\"person\", \"St. Vitus's Dance\"), !Wins(\"person\", \"ballet competition\").\n.output Answer"]}
{"id": 1785, "answer": false, "completion": ".decl Is_part_of(Object_A:symbol, Object_B:symbol)\nIs_part_of(\"Phobos\", \"Mars\").\nIs_part_of(\"Mars\", \"Solar System\").\nIs_part_of(\"Solar System\", \"Milky Way\").\n.decl Answer()\nAnswer() :- !Is_part_of(\"Phobos\", \"Andromeda galaxy\").\n.output Answer", "completions": [".decl Is_part_of(Object_A:symbol, Object_B:symbol)\nIs_part_of(\"Phobos\", \"Mars\").\nIs_part_of(\"Mars\", \"Solar System\").\nIs_part_of(\"Solar System\", \"Milky Way\").\n.decl Answer()\nAnswer() :- !Is_part_of(\"Phobos\", \"Andromeda galaxy\").\n.output Answer"]}
{"id": 1786, "answer": true, "completion": ".decl Equivalent_to(God_A:symbol, God_B:symbol)\nEquivalent_to(\"Hermes\", \"Vulcan\").\n.decl Answer()\nAnswer() :- Equivalent_to(\"Hermes\", \"Vulcan\").\n.output Answer", "completions": [".decl Equivalent_to(God_A:symbol, God_B:symbol)\nEquivalent_to(\"Hermes\", \"Vulcan\").\n.decl Answer()\nAnswer() :- Equivalent_to(\"Hermes\", \"Vulcan\").\n.output Answer"]}
{"id": 1787, "answer": true, "completion": ".decl Is_suitable_for(Present:symbol, Age:symbol)\nIs_suitable_for(\"ocelot\", \"adult\").\n.decl Answer()\nAnswer() :- !Is_suitable_for(\"ocelot\", \"kindergartener\").\n.output Answer", "completions": [".decl Is_suitable_for(Present:symbol, Age:symbol)\nIs_suitable_for(\"ocelot\", \"adult\").\n.decl Answer()\nAnswer() :- !Is_suitable_for(\"ocelot\", \"kindergartener\").\n.output Answer"]}
{"id": 1788, "answer": false, "completion": ".decl Was_part_of(State:symbol, Army:symbol)\nWas_part_of(\"Alaska\", \"Northern Army\").\n.decl Answer()\nAnswer() :- Was_part_of(\"Alaska\", \"Northern Army\").\n.output Answer", "completions": [".decl Was_part_of(State:symbol, Army:symbol)\nWas_part_of(\"Alaska\", \"Northern Army\").\n.decl Answer()\nAnswer() :- Was_part_of(\"Alaska\", \"Northern Army\").\n.output Answer"]}
{"id": 1789, "answer": true, "completion": ".decl Likes(Person:symbol, Holiday:symbol)\nLikes(\"Bacchus\", \"New Year's Eve\").\n.decl Answer()\nAnswer() :- Likes(\"Bacchus\", \"New Year's Eve\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Holiday:symbol)\nLikes(\"Bacchus\", \"New Year's Eve\").\n.decl Answer()\nAnswer() :- Likes(\"Bacchus\", \"New Year's Eve\").\n.output Answer"]}
{"id": 1790, "answer": false, "completion": ".decl Is_similar(God_A:symbol, God_B:symbol)\nIs_similar(\"Poseidon\", \"Vulcan\").\n.decl Answer()\nAnswer() :- Is_similar(\"Poseidon\", \"Vulcan\").\n.output Answer", "completions": [".decl Is_similar(God_A:symbol, God_B:symbol)\nIs_similar(\"Poseidon\", \"Vulcan\").\n.decl Answer()\nAnswer() :- Is_similar(\"Poseidon\", \"Vulcan\").\n.output Answer"]}
{"id": 1791, "answer": true, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"sing sea shanties\", \"ocean\").\nHappens_in_location(\"Oregon Trail\", \"land\").\n.decl Answer()\nAnswer() :- !Happens_in_location(\"sing sea shanties\", \"Oregon Trail\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"sing sea shanties\", \"ocean\").\nHappens_in_location(\"Oregon Trail\", \"land\").\n.decl Answer()\nAnswer() :- !Happens_in_location(\"sing sea shanties\", \"Oregon Trail\").\n.output Answer"]}
{"id": 1792, "answer": false, "completion": ".decl Cures(Drug:symbol, Disease:symbol)\nCures(\"morphine\", \"pain\").\n.decl Answer()\nAnswer() :- Cures(\"morphine\", \"HIV\"), !.\n.output Answer", "completions": [".decl Cures(Drug:symbol, Disease:symbol)\nCures(\"morphine\", \"pain\").\n.decl Answer()\nAnswer() :- Cures(\"morphine\", \"HIV\"), !.\n.output Answer"]}
{"id": 1793, "answer": true, "completion": ".decl Advocates(Person:symbol, Cause:symbol)\nAdvocates(\"Lana Wachowski\", \"transgender rights\").\nAdvocates(\"Lilly Wachowski\", \"transgender rights\").\n.decl Directed(Person:symbol, Movie:symbol)\nDirected(\"Lana Wachowski\", \"The Matrix\").\nDirected(\"Lilly Wachowski\", \"The Matrix\").\n.decl Answer()\nAnswer() :- Directed(person, \"The Matrix\"), Advocates(person, \"transgender rights\").\n.output Answer", "completions": [".decl Advocates(Person:symbol, Cause:symbol)\nAdvocates(\"Lana Wachowski\", \"transgender rights\").\nAdvocates(\"Lilly Wachowski\", \"transgender rights\").\n.decl Directed(Person:symbol, Movie:symbol)\nDirected(\"Lana Wachowski\", \"The Matrix\").\nDirected(\"Lilly Wachowski\", \"The Matrix\").\n.decl Answer()\nAnswer() :- Directed(person, \"The Matrix\"), Advocates(person, \"transgender rights\").\n.output Answer"]}
{"id": 1794, "answer": true, "completion": ".decl Has_menu(Restaurant:symbol, Menu:symbol)\nHas_menu(\"Chinese Starbucks\", \"Chinese\").\nHas_menu(\"American Starbucks\", \"American\").\n.decl Answer()\nAnswer() :- Has_menu(\"Chinese Starbucks\", menu1), Has_menu(\"American Starbucks\", menu2), menu1 != menu2.\n.output Answer", "completions": [".decl Has_menu(Restaurant:symbol, Menu:symbol)\nHas_menu(\"Chinese Starbucks\", \"Chinese\").\nHas_menu(\"American Starbucks\", \"American\").\n.decl Answer()\nAnswer() :- Has_menu(\"Chinese Starbucks\", menu1), Has_menu(\"American Starbucks\", menu2), menu1 != menu2.\n.output Answer"]}
{"id": 1795, "answer": false, "completion": ".decl Uses(Person:symbol, Object:symbol)\nUses(\"Mario\", \"mushroom\").\n.decl Enhances_speed(Object:symbol)\nEnhances_speed(\"mushroom\").\n.decl Answer()\nAnswer() :- Uses(\"Mario\", object), Enhances_speed(object).\n.output Answer", "completions": [".decl Uses(Person:symbol, Object:symbol)\nUses(\"Mario\", \"mushroom\").\n.decl Enhances_speed(Object:symbol)\nEnhances_speed(\"mushroom\").\n.decl Answer()\nAnswer() :- Uses(\"Mario\", object), Enhances_speed(object).\n.output Answer"]}
{"id": 1796, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"children\", 18).\n.decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"lieutenants\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Has_age(\"children\", age), Has_rank(\"lieutenants\", rank), age >= 18.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"children\", 18).\n.decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"lieutenants\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Has_age(\"children\", age), Has_rank(\"lieutenants\", rank), age >= 18.\n.output Answer"]}
{"id": 1797, "answer": true, "completion": ".decl Has_purpose(Object:symbol, Purpose:symbol)\nHas_purpose(\"QWERTY keyboard layout\", \"efficiency\").\n.decl Answer()\nAnswer() :- Has_purpose(\"QWERTY keyboard layout\", \"efficiency\").\n.output Answer", "completions": [".decl Has_purpose(Object:symbol, Purpose:symbol)\nHas_purpose(\"QWERTY keyboard layout\", \"efficiency\").\n.decl Answer()\nAnswer() :- Has_purpose(\"QWERTY keyboard layout\", \"efficiency\").\n.output Answer"]}
{"id": 1798, "answer": true, "completion": ".decl Has_political_affiliation(Person:symbol, Affiliation:symbol)\nHas_political_affiliation(\"Nancy Pelosi\", \"Democratic\").\nHas_political_affiliation(\"Gerald Ford\", \"Republican\").\n.decl Answer()\nAnswer() :- Has_political_affiliation(\"Nancy Pelosi\", affiliation1), Has_political_affiliation(\"Gerald Ford\", affiliation2), affiliation1 != affiliation2.\n.output Answer", "completions": [".decl Has_political_affiliation(Person:symbol, Affiliation:symbol)\nHas_political_affiliation(\"Nancy Pelosi\", \"Democratic\").\nHas_political_affiliation(\"Gerald Ford\", \"Republican\").\n.decl Answer()\nAnswer() :- Has_political_affiliation(\"Nancy Pelosi\", affiliation1), Has_political_affiliation(\"Gerald Ford\", affiliation2), affiliation1 != affiliation2.\n.output Answer"]}
{"id": 1799, "answer": true, "completion": ".decl Prevents_growth(Plant_A:symbol, Plant_B:symbol)\nPrevents_growth(\"sweet potato\", \"tomato\").\nPrevents_growth(\"sweet potato\", \"corn\").\n.decl Answer()\nAnswer() :- Prevents_growth(\"sweet potato\", plant).\n.output Answer", "completions": [".decl Prevents_growth(Plant_A:symbol, Plant_B:symbol)\nPrevents_growth(\"sweet potato\", \"tomato\").\nPrevents_growth(\"sweet potato\", \"corn\").\n.decl Answer()\nAnswer() :- Prevents_growth(\"sweet potato\", plant).\n.output Answer"]}
{"id": 1800, "answer": true, "completion": ".decl Has_spinal_cord(Animal:symbol, Has_spinal_cord:symbol)\nHas_spinal_cord(\"hedgehog\", \"yes\").\nHas_spinal_cord(\"fish\", \"no\").\n.decl Answer()\nAnswer() :- Has_spinal_cord(\"hedgehog\", \"yes\"), Has_spinal_cord(animal, \"no\"), !Eats(\"hedgehog\", animal).\n.output Answer", "completions": [".decl Has_spinal_cord(Animal:symbol, Has_spinal_cord:symbol)\nHas_spinal_cord(\"hedgehog\", \"yes\").\nHas_spinal_cord(\"fish\", \"no\").\n.decl Answer()\nAnswer() :- Has_spinal_cord(\"hedgehog\", \"yes\"), Has_spinal_cord(animal, \"no\"), !Eats(\"hedgehog\", animal).\n.output Answer"]}
{"id": 1801, "answer": true, "completion": ".decl Causes(Condition:symbol, Substance:symbol)\nCauses(\"paresthesia\", \"white pigment\").\n.decl Answer()\nAnswer() :- Causes(\"paresthesia\", \"white pigment\").\n.output Answer", "completions": [".decl Causes(Condition:symbol, Substance:symbol)\nCauses(\"paresthesia\", \"white pigment\").\n.decl Answer()\nAnswer() :- Causes(\"paresthesia\", \"white pigment\").\n.output Answer"]}
{"id": 1802, "answer": true, "completion": ".decl Is_ancestor_of(Person_A:symbol, Person_B:symbol)\nIs_ancestor_of(\"Mary, Queen of Scots\", \"Scottish people\").\n.decl Is_ethnicity(Person:symbol, Ethnicity:symbol)\nIs_ethnicity(\"Mary, Queen of Scots\", \"French\").\n.decl Answer()\nAnswer() :- Is_ancestor_of(person, \"Scottish people\"), Is_ethnicity(person, \"French\").\n.output Answer", "completions": [".decl Is_ancestor_of(Person_A:symbol, Person_B:symbol)\nIs_ancestor_of(\"Mary, Queen of Scots\", \"Scottish people\").\n.decl Is_ethnicity(Person:symbol, Ethnicity:symbol)\nIs_ethnicity(\"Mary, Queen of Scots\", \"French\").\n.decl Answer()\nAnswer() :- Is_ancestor_of(person, \"Scottish people\"), Is_ethnicity(person, \"French\").\n.output Answer"]}
{"id": 1803, "answer": true, "completion": ".decl Is_citizen_of(Person:symbol, City:symbol)\nIs_citizen_of(\"Boris Johnson\", \"London\").\nIs_citizen_of(\"John Smith\", \"San Antonio\").\n.decl Voted_for(Person:symbol, Candidate:symbol)\nVoted_for(\"John Smith\", \"Boris Johnson\").\n.decl Answer()\nAnswer() :- Is_citizen_of(person, \"San Antonio\"), Voted_for(person, \"Boris Johnson\").\n.output Answer", "completions": [".decl Is_citizen_of(Person:symbol, City:symbol)\nIs_citizen_of(\"Boris Johnson\", \"London\").\nIs_citizen_of(\"John Smith\", \"San Antonio\").\n.decl Voted_for(Person:symbol, Candidate:symbol)\nVoted_for(\"John Smith\", \"Boris Johnson\").\n.decl Answer()\nAnswer() :- Is_citizen_of(person, \"San Antonio\"), Voted_for(person, \"Boris Johnson\").\n.output Answer"]}
{"id": 1804, "answer": true, "completion": ".decl Uses(Person:symbol, Language:symbol)\nUses(\"right-handed person\", \"American Sign Language\").\nUses(\"left-handed person\", \"American Sign Language\").\n.decl Answer()\nAnswer() :- Uses(person, \"American Sign Language\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Language:symbol)\nUses(\"right-handed person\", \"American Sign Language\").\nUses(\"left-handed person\", \"American Sign Language\").\n.decl Answer()\nAnswer() :- Uses(person, \"American Sign Language\").\n.output Answer"]}
{"id": 1805, "answer": true, "completion": ".decl Spoke_language(Country:symbol, Language:symbol)\nSpoke_language(\"Confederate States\", \"English\").\n.decl Language_type(Language:symbol, Type:symbol)\nLanguage_type(\"English\", \"Old English\").\n.decl Happened_before(Event_A:symbol, Event_B:symbol)\nHappened_before(\"Civil War\", \"Old English\").\n.decl Answer()\nAnswer() :- Spoke_language(\"Confederate States\", language), Language_type(language, type), Happened_before(\"Civil War\", type).\n.output Answer", "completions": [".decl Spoke_language(Country:symbol, Language:symbol)\nSpoke_language(\"Confederate States\", \"English\").\n.decl Language_type(Language:symbol, Type:symbol)\nLanguage_type(\"English\", \"Old English\").\n.decl Happened_before(Event_A:symbol, Event_B:symbol)\nHappened_before(\"Civil War\", \"Old English\").\n.decl Answer()\nAnswer() :- Spoke_language(\"Confederate States\", language), Language_type(language, type), Happened_before(\"Civil War\", type).\n.output Answer"]}
{"id": 1806, "answer": false, "completion": ".decl Has_identity(Company:symbol, Identity:symbol)\nHas_identity(\"Fiat Chrysler\", \"new\").\n.decl Answer()\nAnswer() :- Has_identity(\"Fiat Chrysler\", identity), identity = \"new\".\n.output Answer", "completions": [".decl Has_identity(Company:symbol, Identity:symbol)\nHas_identity(\"Fiat Chrysler\", \"new\").\n.decl Answer()\nAnswer() :- Has_identity(\"Fiat Chrysler\", identity), identity = \"new\".\n.output Answer"]}
{"id": 1807, "answer": true, "completion": ".decl Is_associated_with(Thing_A:symbol, Thing_B:symbol)\nIs_associated_with(\"capsaicin\", \"cooking\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"capsaicin\", \"cooking\").\n.output Answer", "completions": [".decl Is_associated_with(Thing_A:symbol, Thing_B:symbol)\nIs_associated_with(\"capsaicin\", \"cooking\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"capsaicin\", \"cooking\").\n.output Answer"]}
{"id": 1808, "answer": true, "completion": ".decl Has_part(Symbol:symbol, Part:symbol)\nHas_part(\"Capricorn astrology symbol\", \"goat\").\nHas_part(\"Capricorn astrology symbol\", \"fish\").\nHas_part(\"chimera\", \"goat\").\nHas_part(\"chimera\", \"lion\").\nHas_part(\"chimera\", \"snake\").\n.decl Answer()\nAnswer() :- Has_part(\"Capricorn astrology symbol\", part1), Has_part(\"chimera\", part2), part1 = part2.\nAnswer() :- Has_part(\"Capricorn astrology symbol\", part1), Has_part(\"chimera\", part2), part1 != part2, !Answer().\n.output Answer", "completions": [".decl Has_part(Symbol:symbol, Part:symbol)\nHas_part(\"Capricorn astrology symbol\", \"goat\").\nHas_part(\"Capricorn astrology symbol\", \"fish\").\nHas_part(\"chimera\", \"goat\").\nHas_part(\"chimera\", \"lion\").\nHas_part(\"chimera\", \"snake\").\n.decl Answer()\nAnswer() :- Has_part(\"Capricorn astrology symbol\", part1), Has_part(\"chimera\", part2), part1 = part2.\nAnswer() :- Has_part(\"Capricorn astrology symbol\", part1), Has_part(\"chimera\", part2), part1 != part2, !Answer().\n.output Answer"]}
{"id": 1809, "answer": true, "completion": ".decl Has_illumination(Aesthetic:symbol, Illumination:symbol)\nHas_illumination(\"Japanese street aesthetic\", \"lanterns\").\nHas_illumination(\"Japanese street aesthetic\", \"noble gasses\").\n.decl Answer()\nAnswer() :- Has_illumination(\"Japanese street aesthetic\", \"noble gasses\").\n.output Answer", "completions": [".decl Has_illumination(Aesthetic:symbol, Illumination:symbol)\nHas_illumination(\"Japanese street aesthetic\", \"lanterns\").\nHas_illumination(\"Japanese street aesthetic\", \"noble gasses\").\n.decl Answer()\nAnswer() :- Has_illumination(\"Japanese street aesthetic\", \"noble gasses\").\n.output Answer"]}
{"id": 1810, "answer": true, "completion": ".decl Has_prison_time(Person:symbol, Prison_time:float)\nHas_prison_time(\"Michael Vick\", 23).\n.decl Answer()\nAnswer() :- Has_prison_time(\"Michael Vick\", prison_time1), Has_prison_time(person, prison_time2), prison_time2 > prison_time1.\n.output Answer", "completions": [".decl Has_prison_time(Person:symbol, Prison_time:float)\nHas_prison_time(\"Michael Vick\", 23).\n.decl Answer()\nAnswer() :- Has_prison_time(\"Michael Vick\", prison_time1), Has_prison_time(person, prison_time2), prison_time2 > prison_time1.\n.output Answer"]}
{"id": 1811, "answer": false, "completion": ".decl Borders_ocean(Country:symbol, Ocean:symbol)\nBorders_ocean(\"United States of America\", \"Pacific Ocean\").\nBorders_ocean(\"India\", \"Indian Ocean\").\n.decl Answer()\nAnswer() :- Borders_ocean(\"United States of America\", ocean1), Borders_ocean(\"India\", ocean2), ocean1 = ocean2.\n.output Answer", "completions": [".decl Borders_ocean(Country:symbol, Ocean:symbol)\nBorders_ocean(\"United States of America\", \"Pacific Ocean\").\nBorders_ocean(\"India\", \"Indian Ocean\").\n.decl Answer()\nAnswer() :- Borders_ocean(\"United States of America\", ocean1), Borders_ocean(\"India\", ocean2), ocean1 = ocean2.\n.output Answer"]}
{"id": 1812, "answer": true, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Sophist\", \"rhetoric\").\nHas_trait(\"lawyer\", \"rhetoric\").\n.decl Answer()\nAnswer() :- Has_trait(\"Sophist\", trait), Has_trait(\"lawyer\", trait).\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Sophist\", \"rhetoric\").\nHas_trait(\"lawyer\", \"rhetoric\").\n.decl Answer()\nAnswer() :- Has_trait(\"Sophist\", trait), Has_trait(\"lawyer\", trait).\n.output Answer"]}
{"id": 1813, "answer": true, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Krispy Kreme glazed doughnut\", 200).\n.decl Has_daily_sugar_allowance(Organization:symbol, Allowance:float)\nHas_daily_sugar_allowance(\"AHA\", 25).\n.decl Answer()\nAnswer() :- Has_calories(\"Krispy Kreme glazed doughnut\", calories1), Has_daily_sugar_allowance(\"AHA\", allowance2), 4*calories1 > allowance2.\n.output Answer", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Krispy Kreme glazed doughnut\", 200).\n.decl Has_daily_sugar_allowance(Organization:symbol, Allowance:float)\nHas_daily_sugar_allowance(\"AHA\", 25).\n.decl Answer()\nAnswer() :- Has_calories(\"Krispy Kreme glazed doughnut\", calories1), Has_daily_sugar_allowance(\"AHA\", allowance2), 4*calories1 > allowance2.\n.output Answer"]}
{"id": 1814, "answer": true, "completion": ".decl Is_part_of(Movie:symbol, Series:symbol)\nIs_part_of(\"The Matrix\", \"The Matrix Series\").\n.decl Answer()\nAnswer() :- !Is_part_of(\"The Matrix\", series).\n.output Answer", "completions": [".decl Is_part_of(Movie:symbol, Series:symbol)\nIs_part_of(\"The Matrix\", \"The Matrix Series\").\n.decl Answer()\nAnswer() :- !Is_part_of(\"The Matrix\", series).\n.output Answer"]}
{"id": 1815, "answer": false, "completion": ".decl Has_rule(Place:symbol, Rule:symbol)\nHas_rule(\"Forbidden City\", \"no entry\").\n.decl Answer()\nAnswer() :- Has_rule(\"Forbidden City\", \"no entry\").\n.output Answer", "completions": [".decl Has_rule(Place:symbol, Rule:symbol)\nHas_rule(\"Forbidden City\", \"no entry\").\n.decl Answer()\nAnswer() :- Has_rule(\"Forbidden City\", \"no entry\").\n.output Answer"]}
{"id": 1816, "answer": true, "completion": ".decl Fibonacci_number(Number:float)\nFibonacci_number(0).\nFibonacci_number(1).\nFibonacci_number(2).\nFibonacci_number(3).\nFibonacci_number(5).\nFibonacci_number(8).\nFibonacci_number(13).\nFibonacci_number(21).\nFibonacci_number(34).\nFibonacci_number(55).\nFibonacci_number(89).\n.decl Answer()\nAnswer() :- !Fibonacci_number(number).\n.output Answer", "completions": [".decl Fibonacci_number(Number:float)\nFibonacci_number(0).\nFibonacci_number(1).\nFibonacci_number(2).\nFibonacci_number(3).\nFibonacci_number(5).\nFibonacci_number(8).\nFibonacci_number(13).\nFibonacci_number(21).\nFibonacci_number(34).\nFibonacci_number(55).\nFibonacci_number(89).\n.decl Answer()\nAnswer() :- !Fibonacci_number(number).\n.output Answer"]}
{"id": 1817, "answer": false, "completion": ".decl Needs_conductor(Group:symbol, Conductor:symbol)\nNeeds_conductor(\"orchestra\", \"conductor\").\n.decl Answer()\nAnswer() :- !Needs_conductor(\"solo pianist\", _).\n.output Answer", "completions": [".decl Needs_conductor(Group:symbol, Conductor:symbol)\nNeeds_conductor(\"orchestra\", \"conductor\").\n.decl Answer()\nAnswer() :- !Needs_conductor(\"solo pianist\", _).\n.output Answer"]}
{"id": 1818, "answer": true, "completion": ".decl Has_parents(Person:symbol, Parent_A:symbol, Parent_B:symbol)\nHas_parents(\"Jackson Pollock\", \"LeRoy Pollock\", \"Stella McClure Pollock\").\n.decl Required_to_say(Person:symbol, Pledge:symbol)\nRequired_to_say(\"LeRoy Pollock\", \"The Pledge of Allegiance\").\nRequired_to_say(\"Stella McClure Pollock\", \"The Pledge of Allegiance\").\n.decl Answer()\nAnswer() :- Has_parents(\"Jackson Pollock\", parent_a, parent_b), !Required_to_say(parent_a, \"The Pledge of Allegiance\"), !Required_to_say(parent_b, \"The Pledge of Allegiance\").\n.output Answer", "completions": [".decl Has_parents(Person:symbol, Parent_A:symbol, Parent_B:symbol)\nHas_parents(\"Jackson Pollock\", \"LeRoy Pollock\", \"Stella McClure Pollock\").\n.decl Required_to_say(Person:symbol, Pledge:symbol)\nRequired_to_say(\"LeRoy Pollock\", \"The Pledge of Allegiance\").\nRequired_to_say(\"Stella McClure Pollock\", \"The Pledge of Allegiance\").\n.decl Answer()\nAnswer() :- Has_parents(\"Jackson Pollock\", parent_a, parent_b), !Required_to_say(parent_a, \"The Pledge of Allegiance\"), !Required_to_say(parent_b, \"The Pledge of Allegiance\").\n.output Answer"]}
{"id": 1819, "answer": true, "completion": ".decl Occurs_in_month(Event:symbol, Month:symbol)\nOccurs_in_month(\"winter solstice\", \"December\").\nOccurs_in_month(\"winter solstice\", \"June\").\n.decl Answer()\nAnswer() :- Occurs_in_month(\"winter solstice\", \"December\"), Occurs_in_month(\"winter solstice\", \"June\").\n.output Answer", "completions": [".decl Occurs_in_month(Event:symbol, Month:symbol)\nOccurs_in_month(\"winter solstice\", \"December\").\nOccurs_in_month(\"winter solstice\", \"June\").\n.decl Answer()\nAnswer() :- Occurs_in_month(\"winter solstice\", \"December\"), Occurs_in_month(\"winter solstice\", \"June\").\n.output Answer"]}
{"id": 1820, "answer": true, "completion": ".decl Likes(Person:symbol, Place:symbol)\nLikes(\"tourists\", \"Tuvalu\").\n.decl Answer()\nAnswer() :- Likes(\"tourists\", \"Tuvalu\"), !Likes(\"tourists\", \"Niue\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Place:symbol)\nLikes(\"tourists\", \"Tuvalu\").\n.decl Answer()\nAnswer() :- Likes(\"tourists\", \"Tuvalu\"), !Likes(\"tourists\", \"Niue\").\n.output Answer"]}
{"id": 1821, "answer": false, "completion": ".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"A Tale of Two Cities\", \"historical fiction\").\n.decl Is_parody_of(Book:symbol, Book2:symbol)\n.decl Answer()\nAnswer() :- Is_genre(\"A Tale of Two Cities\", genre), !Is_parody_of(\"A Tale of Two Cities\", book2).\n.output Answer", "completions": [".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"A Tale of Two Cities\", \"historical fiction\").\n.decl Is_parody_of(Book:symbol, Book2:symbol)\n.decl Answer()\nAnswer() :- Is_genre(\"A Tale of Two Cities\", genre), !Is_parody_of(\"A Tale of Two Cities\", book2).\n.output Answer"]}
{"id": 1822, "answer": true, "completion": ".decl Has_criteria(Password:symbol, Criteria:symbol)\nHas_criteria(\"binary numbers\", \"length\").\nHas_criteria(\"standard alphabet\", \"length\").\nHas_criteria(\"binary numbers\", \"special characters\").\nHas_criteria(\"standard alphabet\", \"special characters\").\n.decl Answer()\nAnswer() :- Has_criteria(\"binary numbers\", criteria1), Has_criteria(\"standard alphabet\", criteria2), criteria1 = criteria2.\n.output Answer", "completions": [".decl Has_criteria(Password:symbol, Criteria:symbol)\nHas_criteria(\"binary numbers\", \"length\").\nHas_criteria(\"standard alphabet\", \"length\").\nHas_criteria(\"binary numbers\", \"special characters\").\nHas_criteria(\"standard alphabet\", \"special characters\").\n.decl Answer()\nAnswer() :- Has_criteria(\"binary numbers\", criteria1), Has_criteria(\"standard alphabet\", criteria2), criteria1 = criteria2.\n.output Answer"]}
{"id": 1823, "answer": true, "completion": ".decl Influences(Person:symbol, Style:symbol)\nInfluences(\"Andy Warhol\", \"Pop Art\").\n.decl Influenced_by(Style:symbol, Style2:symbol)\nInfluenced_by(\"Art Deco\", \"Cubism\").\nInfluenced_by(\"Cubism\", \"Fauvism\").\nInfluenced_by(\"Fauvism\", \"Pop Art\").\n.decl Answer()\nAnswer() :- Influences(\"Andy Warhol\", style1), Influenced_by(\"Art Deco\", style2), style1 = style2.\n.output Answer", "completions": [".decl Influences(Person:symbol, Style:symbol)\nInfluences(\"Andy Warhol\", \"Pop Art\").\n.decl Influenced_by(Style:symbol, Style2:symbol)\nInfluenced_by(\"Art Deco\", \"Cubism\").\nInfluenced_by(\"Cubism\", \"Fauvism\").\nInfluenced_by(\"Fauvism\", \"Pop Art\").\n.decl Answer()\nAnswer() :- Influences(\"Andy Warhol\", style1), Influenced_by(\"Art Deco\", style2), style1 = style2.\n.output Answer"]}
{"id": 1824, "answer": true, "completion": ".decl Is_pregnant(Person:symbol)\nIs_pregnant(\"Alice\").\n.decl Recommends(Doctor:symbol, Person:symbol, Treatment:symbol)\nRecommends(\"Dr. Smith\", \"Alice\", \"ginger\").\n.decl Answer()\nAnswer() :- Is_pregnant(person), Recommends(doctor, person, \"ginger\").\n.output Answer", "completions": [".decl Is_pregnant(Person:symbol)\nIs_pregnant(\"Alice\").\n.decl Recommends(Doctor:symbol, Person:symbol, Treatment:symbol)\nRecommends(\"Dr. Smith\", \"Alice\", \"ginger\").\n.decl Answer()\nAnswer() :- Is_pregnant(person), Recommends(doctor, person, \"ginger\").\n.output Answer"]}
{"id": 1825, "answer": true, "completion": ".decl Is_in_movie(Object:symbol, Movie:symbol)\nIs_in_movie(\"spinach\", \"Popeye\").\n.decl Is_genre(Movie:symbol, Genre:symbol)\nIs_genre(\"Popeye\", \"comic\").\n.decl Is_source_of_power(Object:symbol)\nIs_source_of_power(\"spinach\").\n.decl Answer()\nAnswer() :- Is_in_movie(\"spinach\", movie), Is_genre(movie, \"comic\"), Is_source_of_power(\"spinach\").\n.output Answer", "completions": [".decl Is_in_movie(Object:symbol, Movie:symbol)\nIs_in_movie(\"spinach\", \"Popeye\").\n.decl Is_genre(Movie:symbol, Genre:symbol)\nIs_genre(\"Popeye\", \"comic\").\n.decl Is_source_of_power(Object:symbol)\nIs_source_of_power(\"spinach\").\n.decl Answer()\nAnswer() :- Is_in_movie(\"spinach\", movie), Is_genre(movie, \"comic\"), Is_source_of_power(\"spinach\").\n.output Answer"]}
{"id": 1826, "answer": true, "completion": ".decl Has_temperature(Process:symbol, Temperature:float)\nHas_temperature(\"welding with acetylene\", 3200).\nHas_temperature(\"star\", 5500).\n.decl Answer()\nAnswer() :- Has_temperature(\"welding with acetylene\", temperature1), Has_temperature(\"star\", temperature2), temperature1 < temperature2.\n.output Answer", "completions": [".decl Has_temperature(Process:symbol, Temperature:float)\nHas_temperature(\"welding with acetylene\", 3200).\nHas_temperature(\"star\", 5500).\n.decl Answer()\nAnswer() :- Has_temperature(\"welding with acetylene\", temperature1), Has_temperature(\"star\", temperature2), temperature1 < temperature2.\n.output Answer"]}
{"id": 1827, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Donatello's bronze David\", 4.2).\nHas_height(\"Sistine Chapel ceiling\", 18).\n.decl Answer()\nAnswer() :- Has_height(\"Donatello's bronze David\", height1), Has_height(\"Sistine Chapel ceiling\", height2), height1 + 1.8 <= height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Donatello's bronze David\", 4.2).\nHas_height(\"Sistine Chapel ceiling\", 18).\n.decl Answer()\nAnswer() :- Has_height(\"Donatello's bronze David\", height1), Has_height(\"Sistine Chapel ceiling\", height2), height1 + 1.8 <= height2.\n.output Answer"]}
{"id": 1828, "answer": false, "completion": ".decl Is_dangerous(Substance_A:symbol, Substance_B:symbol)\nIs_dangerous(\"chlorine\", \"sodium\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"chlorine\", \"sodium\").\n.output Answer", "completions": [".decl Is_dangerous(Substance_A:symbol, Substance_B:symbol)\nIs_dangerous(\"chlorine\", \"sodium\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"chlorine\", \"sodium\").\n.output Answer"]}
{"id": 1829, "answer": false, "completion": ".decl Has_purpose(Location:symbol, Purpose:symbol)\nHas_purpose(\"Moulin Rouge\", \"theater\").\n.decl Answer()\nAnswer() :- !Has_purpose(\"Moulin Rouge\", \"triage center\").\n.output Answer", "completions": [".decl Has_purpose(Location:symbol, Purpose:symbol)\nHas_purpose(\"Moulin Rouge\", \"theater\").\n.decl Answer()\nAnswer() :- !Has_purpose(\"Moulin Rouge\", \"triage center\").\n.output Answer"]}
{"id": 1830, "answer": true, "completion": ".decl Has_viewership(Event:symbol, Viewership:float)\nHas_viewership(\"Downton Abbey finale\", 12.2).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"Kazakhstan\", 18.2).\n.decl Answer()\nAnswer() :- Has_viewership(\"Downton Abbey finale\", viewership), Has_population(\"Kazakhstan\", population), viewership > population.\n.output Answer", "completions": [".decl Has_viewership(Event:symbol, Viewership:float)\nHas_viewership(\"Downton Abbey finale\", 12.2).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"Kazakhstan\", 18.2).\n.decl Answer()\nAnswer() :- Has_viewership(\"Downton Abbey finale\", viewership), Has_population(\"Kazakhstan\", population), viewership > population.\n.output Answer"]}
{"id": 1831, "answer": true, "completion": ".decl Has_risk(Project:symbol, Risk:symbol)\nHas_risk(\"Do It Yourself\", \"potentially lethal\").\n.decl Answer()\nAnswer() :- Has_risk(\"Do It Yourself\", risk), risk = \"potentially lethal\".\n.output Answer", "completions": [".decl Has_risk(Project:symbol, Risk:symbol)\nHas_risk(\"Do It Yourself\", \"potentially lethal\").\n.decl Answer()\nAnswer() :- Has_risk(\"Do It Yourself\", risk), risk = \"potentially lethal\".\n.output Answer"]}
{"id": 1832, "answer": true, "completion": ".decl Lives_for_n_years(Animal:symbol, N_years:float)\nLives_for_n_years(\"Eastern chipmunk\", 4).\n.decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Lives_for_n_years(\"Eastern chipmunk\", n_years1), Lasts_n_years(\"leap year\", n_years2), n_years1 < n_years2 * 2.\n.output Answer", "completions": [".decl Lives_for_n_years(Animal:symbol, N_years:float)\nLives_for_n_years(\"Eastern chipmunk\", 4).\n.decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Lives_for_n_years(\"Eastern chipmunk\", n_years1), Lasts_n_years(\"leap year\", n_years2), n_years1 < n_years2 * 2.\n.output Answer"]}
{"id": 1833, "answer": true, "completion": ".decl Needs(Game:symbol, Resource:symbol)\nNeeds(\"Super Mario\", \"electricity\").\n.decl Answer()\nAnswer() :- Needs(\"Super Mario\", \"electricity\").\n.output Answer", "completions": [".decl Needs(Game:symbol, Resource:symbol)\nNeeds(\"Super Mario\", \"electricity\").\n.decl Answer()\nAnswer() :- Needs(\"Super Mario\", \"electricity\").\n.output Answer"]}
{"id": 1834, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Environment:symbol)\nLives_in(\"Chinese mountain cat\", \"mountains\").\n.decl Answer()\nAnswer() :- Lives_in(\"Chinese mountain cat\", environment), environment != \"orbit\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Environment:symbol)\nLives_in(\"Chinese mountain cat\", \"mountains\").\n.decl Answer()\nAnswer() :- Lives_in(\"Chinese mountain cat\", environment), environment != \"orbit\".\n.output Answer"]}
{"id": 1835, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"rock\", 2.7).\nHas_density(\"atmosphere of Earth\", 0.0012).\n.decl Answer()\nAnswer() :- Has_density(\"rock\", density1), Has_density(\"atmosphere of Earth\", density2), density1 > density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"rock\", 2.7).\nHas_density(\"atmosphere of Earth\", 0.0012).\n.decl Answer()\nAnswer() :- Has_density(\"rock\", density1), Has_density(\"atmosphere of Earth\", density2), density1 > density2.\n.output Answer"]}
{"id": 1836, "answer": true, "completion": ".decl Contributes_to(Company:symbol, Event:symbol)\nContributes_to(\"Burger King\", \"decrease in need for snowshoes\").\n.decl Answer()\nAnswer() :- Contributes_to(\"Burger King\", \"decrease in need for snowshoes\").\n.output Answer", "completions": [".decl Contributes_to(Company:symbol, Event:symbol)\nContributes_to(\"Burger King\", \"decrease in need for snowshoes\").\n.decl Answer()\nAnswer() :- Contributes_to(\"Burger King\", \"decrease in need for snowshoes\").\n.output Answer"]}
{"id": 1837, "answer": true, "completion": ".decl Uses(Movie:symbol, Object:symbol)\nUses(\"The Godfather\", \"typewriter\").\nUses(\"The Godfather\", \"telephone\").\n.decl Answer()\nAnswer() :- !Uses(\"The Godfather\", \"USB flash drive\").\n.output Answer", "completions": [".decl Uses(Movie:symbol, Object:symbol)\nUses(\"The Godfather\", \"typewriter\").\nUses(\"The Godfather\", \"telephone\").\n.decl Answer()\nAnswer() :- !Uses(\"The Godfather\", \"USB flash drive\").\n.output Answer"]}
{"id": 1838, "answer": true, "completion": ".decl Has_fear(Person:symbol, Event:symbol)\nHas_fear(\"some people\", \"Y2K\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Y2K\", 1999).\n.decl Answer()\nAnswer() :- Has_fear(person, \"Y2K\"), Happens_in_year(\"Y2K\", 1999).\n.output Answer", "completions": [".decl Has_fear(Person:symbol, Event:symbol)\nHas_fear(\"some people\", \"Y2K\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Y2K\", 1999).\n.decl Answer()\nAnswer() :- Has_fear(person, \"Y2K\"), Happens_in_year(\"Y2K\", 1999).\n.output Answer"]}
{"id": 1839, "answer": false, "completion": ".decl Supports(Person:symbol, Decision:symbol)\nSupports(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.decl Answer()\nAnswer() :- Supports(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Decision:symbol)\nSupports(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.decl Answer()\nAnswer() :- Supports(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.output Answer"]}
{"id": 1840, "answer": false, "completion": ".decl Belongs_to_family(Person:symbol, Family:symbol)\nBelongs_to_family(\"Rahul Dravid\", \"Dravid\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"Rahul Dravid\", \"Gryllidae\").\n.output Answer", "completions": [".decl Belongs_to_family(Person:symbol, Family:symbol)\nBelongs_to_family(\"Rahul Dravid\", \"Dravid\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"Rahul Dravid\", \"Gryllidae\").\n.output Answer"]}
{"id": 1841, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"pet macaque\", 1.2).\nHas_size(\"desk\", 0.8).\n.decl Answer()\nAnswer() :- Has_size(\"pet macaque\", size1), Has_size(\"desk\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"pet macaque\", 1.2).\nHas_size(\"desk\", 0.8).\n.decl Answer()\nAnswer() :- Has_size(\"pet macaque\", size1), Has_size(\"desk\", size2), size1 < size2.\n.output Answer"]}
{"id": 1842, "answer": false, "completion": ".decl Has_genre(Video:symbol, Genre:symbol)\nHas_genre(\"Pink music videos\", \"pop\").\n.decl Is_triggering(Genre:symbol, Patient_group:symbol)\nIs_triggering(\"pop\", \"eating disorder patients\").\n.decl Answer()\nAnswer() :- Has_genre(\"Pink music videos\", genre), Is_triggering(genre, \"eating disorder patients\").\n.output Answer", "completions": [".decl Has_genre(Video:symbol, Genre:symbol)\nHas_genre(\"Pink music videos\", \"pop\").\n.decl Is_triggering(Genre:symbol, Patient_group:symbol)\nIs_triggering(\"pop\", \"eating disorder patients\").\n.decl Answer()\nAnswer() :- Has_genre(\"Pink music videos\", genre), Is_triggering(genre, \"eating disorder patients\").\n.output Answer"]}
{"id": 1843, "answer": true, "completion": ".decl Occurs_in_environment(Activity:symbol, Environment:symbol)\nOccurs_in_environment(\"brewing\", \"home\").\nOccurs_in_environment(\"brewing\", \"restaurant\").\n.decl Answer()\nAnswer() :- Occurs_in_environment(\"brewing\", \"prison\").\n.output Answer", "completions": [".decl Occurs_in_environment(Activity:symbol, Environment:symbol)\nOccurs_in_environment(\"brewing\", \"home\").\nOccurs_in_environment(\"brewing\", \"restaurant\").\n.decl Answer()\nAnswer() :- Occurs_in_environment(\"brewing\", \"prison\").\n.output Answer"]}
{"id": 1844, "answer": true, "completion": ".decl Lives_in(Person:symbol, Region:symbol)\nLives_in(\"John Smith\", \"New England\").\n.decl Grows_in(Crop:symbol, Region:symbol)\nGrows_in(\"coffee\", \"Hawaii\").\n.decl Profits_from(Person:symbol, Crop:symbol)\nProfits_from(\"John Smith\", \"coffee\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"New England\"), Profits_from(person, \"coffee\"), Grows_in(\"coffee\", region), region != \"New England\".\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Region:symbol)\nLives_in(\"John Smith\", \"New England\").\n.decl Grows_in(Crop:symbol, Region:symbol)\nGrows_in(\"coffee\", \"Hawaii\").\n.decl Profits_from(Person:symbol, Crop:symbol)\nProfits_from(\"John Smith\", \"coffee\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"New England\"), Profits_from(person, \"coffee\"), Grows_in(\"coffee\", region), region != \"New England\".\n.output Answer"]}
{"id": 1845, "answer": false, "completion": ".decl Has_ingredients(Food:symbol, Ingredient:symbol)\nHas_ingredients(\"krabby patty\", \"seaweed\").\nHas_ingredients(\"krabby patty\", \"bun\").\nHas_ingredients(\"krabby patty\", \"patty\").\nHas_ingredients(\"cheeseburger\", \"bun\").\nHas_ingredients(\"cheeseburger\", \"patty\").\nHas_ingredients(\"cheeseburger\", \"cheese\").\n.decl Answer()\nAnswer() :- Has_ingredients(\"krabby patty\", ingredient1), Has_ingredients(\"cheeseburger\", ingredient2), ingredient1 = ingredient2.\n.output Answer", "completions": [".decl Has_ingredients(Food:symbol, Ingredient:symbol)\nHas_ingredients(\"krabby patty\", \"seaweed\").\nHas_ingredients(\"krabby patty\", \"bun\").\nHas_ingredients(\"krabby patty\", \"patty\").\nHas_ingredients(\"cheeseburger\", \"bun\").\nHas_ingredients(\"cheeseburger\", \"patty\").\nHas_ingredients(\"cheeseburger\", \"cheese\").\n.decl Answer()\nAnswer() :- Has_ingredients(\"krabby patty\", ingredient1), Has_ingredients(\"cheeseburger\", ingredient2), ingredient1 = ingredient2.\n.output Answer"]}
{"id": 1846, "answer": false, "completion": ".decl Has_capacity(Object:symbol, Capacity:float)\nHas_capacity(\"Boeing 737\", 180).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Chief Justice of the United States\", 17).\n.decl Answer()\nAnswer() :- Has_capacity(\"Boeing 737\", capacity), Has_n_members(\"Chief Justice of the United States\", n_members), capacity < n_members.\n.output Answer", "completions": [".decl Has_capacity(Object:symbol, Capacity:float)\nHas_capacity(\"Boeing 737\", 180).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Chief Justice of the United States\", 17).\n.decl Answer()\nAnswer() :- Has_capacity(\"Boeing 737\", capacity), Has_n_members(\"Chief Justice of the United States\", n_members), capacity < n_members.\n.output Answer"]}
{"id": 1847, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"crocodile\", \"Great Salt Lake\").\nLives_in(\"alligator\", \"Great Salt Lake\").\n.decl Has_lifespan(Animal:symbol, Lifespan:float)\nHas_lifespan(\"crocodile\", 70).\nHas_lifespan(\"alligator\", 50).\n.decl Answer()\nAnswer() :- Lives_in(\"crocodile\", \"Great Salt Lake\"), Lives_in(\"alligator\", \"Great Salt Lake\"), Has_lifespan(\"crocodile\", lifespan1), Has_lifespan(\"alligator\", lifespan2), lifespan1 > lifespan2.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"crocodile\", \"Great Salt Lake\").\nLives_in(\"alligator\", \"Great Salt Lake\").\n.decl Has_lifespan(Animal:symbol, Lifespan:float)\nHas_lifespan(\"crocodile\", 70).\nHas_lifespan(\"alligator\", 50).\n.decl Answer()\nAnswer() :- Lives_in(\"crocodile\", \"Great Salt Lake\"), Lives_in(\"alligator\", \"Great Salt Lake\"), Has_lifespan(\"crocodile\", lifespan1), Has_lifespan(\"alligator\", lifespan2), lifespan1 > lifespan2.\n.output Answer"]}
{"id": 1848, "answer": false, "completion": ".decl Started_due_to(Company:symbol, Event:symbol)\nStarted_due_to(\"Saudi Aramco\", \"oil discovery\").\n.decl Answer()\nAnswer() :- !Started_due_to(\"Saudi Aramco\", \"assassination\").\n.output Answer", "completions": [".decl Started_due_to(Company:symbol, Event:symbol)\nStarted_due_to(\"Saudi Aramco\", \"oil discovery\").\n.decl Answer()\nAnswer() :- !Started_due_to(\"Saudi Aramco\", \"assassination\").\n.output Answer"]}
{"id": 1849, "answer": false, "completion": ".decl Features(Event:symbol, Object:symbol)\nFeatures(\"Diwali celebration\", \"fireworks\").\nFeatures(\"Diwali celebration\", \"candles\").\nFeatures(\"Diwali celebration\", \"sweets\").\n.decl Answer()\nAnswer() :- Features(\"Diwali celebration\", \"crustacean\").\n.output Answer", "completions": [".decl Features(Event:symbol, Object:symbol)\nFeatures(\"Diwali celebration\", \"fireworks\").\nFeatures(\"Diwali celebration\", \"candles\").\nFeatures(\"Diwali celebration\", \"sweets\").\n.decl Answer()\nAnswer() :- Features(\"Diwali celebration\", \"crustacean\").\n.output Answer"]}
{"id": 1850, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"goddess Friday\", \"Friday\").\n.decl Despises(Person:symbol, Animal:symbol)\nDespises(\"Friday\", \"felines\").\n.decl Answer()\nAnswer() :- Has_name(\"goddess Friday\", \"Friday\"), Despises(\"Friday\", \"felines\").\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"goddess Friday\", \"Friday\").\n.decl Despises(Person:symbol, Animal:symbol)\nDespises(\"Friday\", \"felines\").\n.decl Answer()\nAnswer() :- Has_name(\"goddess Friday\", \"Friday\"), Despises(\"Friday\", \"felines\").\n.output Answer"]}
{"id": 1851, "answer": false, "completion": ".decl Is_eaten_with(Food:symbol, Utensil:symbol)\nIs_eaten_with(\"soup\", \"spoon\").\n.decl Answer()\nAnswer() :- Is_eaten_with(\"soup\", \"hands\"), !Is_eaten_with(\"soup\", utensil), utensil != \"hands\".\n.output Answer", "completions": [".decl Is_eaten_with(Food:symbol, Utensil:symbol)\nIs_eaten_with(\"soup\", \"spoon\").\n.decl Answer()\nAnswer() :- Is_eaten_with(\"soup\", \"hands\"), !Is_eaten_with(\"soup\", utensil), utensil != \"hands\".\n.output Answer"]}
{"id": 1852, "answer": true, "completion": ".decl Suffers_from(Person:symbol, Phobia:symbol)\nSuffers_from(\"John\", \"Thalassophobia\").\n.decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"John\", \"oceanography\").\n.decl Answer()\nAnswer() :- Suffers_from(person, \"Thalassophobia\"), Enjoys(person, \"oceanography\").\n.output Answer", "completions": [".decl Suffers_from(Person:symbol, Phobia:symbol)\nSuffers_from(\"John\", \"Thalassophobia\").\n.decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"John\", \"oceanography\").\n.decl Answer()\nAnswer() :- Suffers_from(person, \"Thalassophobia\"), Enjoys(person, \"oceanography\").\n.output Answer"]}
{"id": 1853, "answer": false, "completion": ".decl Has_birthdate(Person:symbol, Birthdate:symbol)\nHas_birthdate(\"Eric Clapton\", \"1945-03-30\").\n.decl Legal_age_for(Activity:symbol, Age:float)\nLegal_age_for(\"purchase cigarettes\", 21).\n.decl Answer()\nAnswer() :- Has_birthdate(\"Eric Clapton\", birthdate), Legal_age_for(\"purchase cigarettes\", age), birthdate > age.\n.output Answer", "completions": [".decl Has_birthdate(Person:symbol, Birthdate:symbol)\nHas_birthdate(\"Eric Clapton\", \"1945-03-30\").\n.decl Legal_age_for(Activity:symbol, Age:float)\nLegal_age_for(\"purchase cigarettes\", 21).\n.decl Answer()\nAnswer() :- Has_birthdate(\"Eric Clapton\", birthdate), Legal_age_for(\"purchase cigarettes\", age), birthdate > age.\n.output Answer"]}
{"id": 1854, "answer": true, "completion": ".decl Wins(Person:symbol, Championship:symbol)\nWins(\"Secretariat\", \"Kentucky Derby\").\n.decl Answer()\nAnswer() :- !Wins(\"Secretariat\", \"Formula One\").\n.output Answer", "completions": [".decl Wins(Person:symbol, Championship:symbol)\nWins(\"Secretariat\", \"Kentucky Derby\").\n.decl Answer()\nAnswer() :- !Wins(\"Secretariat\", \"Formula One\").\n.output Answer"]}
{"id": 1855, "answer": false, "completion": ".decl Travels_with(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- !Travels_with(\"Iggy Pop\", \"Justin Bieber\").\n.output Answer", "completions": [".decl Travels_with(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- !Travels_with(\"Iggy Pop\", \"Justin Bieber\").\n.output Answer"]}
{"id": 1856, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Eminem\", \"rapping\").\n.decl Required_skill(Event:symbol, Skill:symbol)\nRequired_skill(\"International Mathematical Olympiad\", \"mathematics\").\n.decl Answer()\nAnswer() :- Has_skill(\"Eminem\", skill1), Required_skill(\"International Mathematical Olympiad\", skill2), skill1 != skill2.\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Eminem\", \"rapping\").\n.decl Required_skill(Event:symbol, Skill:symbol)\nRequired_skill(\"International Mathematical Olympiad\", \"mathematics\").\n.decl Answer()\nAnswer() :- Has_skill(\"Eminem\", skill1), Required_skill(\"International Mathematical Olympiad\", skill2), skill1 != skill2.\n.output Answer"]}
{"id": 1857, "answer": true, "completion": ".decl Has_power(Event:symbol, Power:float)\nHas_power(\"Tohoku earthquake\", 9.0).\nHas_power(\"Godzilla\", 10.0).\n.decl Answer()\nAnswer() :- Has_power(\"Tohoku earthquake\", power1), Has_power(\"Godzilla\", power2), power1 < power2.\n.output Answer", "completions": [".decl Has_power(Event:symbol, Power:float)\nHas_power(\"Tohoku earthquake\", 9.0).\nHas_power(\"Godzilla\", 10.0).\n.decl Answer()\nAnswer() :- Has_power(\"Tohoku earthquake\", power1), Has_power(\"Godzilla\", power2), power1 < power2.\n.output Answer"]}
{"id": 1858, "answer": true, "completion": ".decl Has_episodes(Show:symbol, N_episodes:float)\nHas_episodes(\"JAG\", 227).\n.decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"watch all of JAG\", 6).\n.decl Answer()\nAnswer() :- Has_episodes(\"JAG\", n_episodes), Last_n_months(\"watch all of JAG\", n_months), n_episodes <= n_months.\n.output Answer", "completions": [".decl Has_episodes(Show:symbol, N_episodes:float)\nHas_episodes(\"JAG\", 227).\n.decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"watch all of JAG\", 6).\n.decl Answer()\nAnswer() :- Has_episodes(\"JAG\", n_episodes), Last_n_months(\"watch all of JAG\", n_months), n_episodes <= n_months.\n.output Answer"]}
{"id": 1859, "answer": false, "completion": ".decl Has_n_letters(Alphabet:symbol, N_letters:float)\nHas_n_letters(\"Greek alphabet\", 24).\nHas_n_letters(\"Sumerian cuneiform\", 600).\n.decl Answer()\nAnswer() :- Has_n_letters(\"Greek alphabet\", n_letters1), Has_n_letters(\"Sumerian cuneiform\", n_letters2), n_letters1 != n_letters2.\n.output Answer", "completions": [".decl Has_n_letters(Alphabet:symbol, N_letters:float)\nHas_n_letters(\"Greek alphabet\", 24).\nHas_n_letters(\"Sumerian cuneiform\", 600).\n.decl Answer()\nAnswer() :- Has_n_letters(\"Greek alphabet\", n_letters1), Has_n_letters(\"Sumerian cuneiform\", n_letters2), n_letters1 != n_letters2.\n.output Answer"]}
{"id": 1860, "answer": true, "completion": ".decl Costs(Item:symbol, Cost:float)\nCosts(\"2020 Chevrolet Corvette\", 60000).\nCosts(\"Columbia University\", 60000).\n.decl Answer()\nAnswer() :- Costs(\"2020 Chevrolet Corvette\", cost1), Costs(\"Columbia University\", cost2), cost1 >= cost2.\n.output Answer", "completions": [".decl Costs(Item:symbol, Cost:float)\nCosts(\"2020 Chevrolet Corvette\", 60000).\nCosts(\"Columbia University\", 60000).\n.decl Answer()\nAnswer() :- Costs(\"2020 Chevrolet Corvette\", cost1), Costs(\"Columbia University\", cost2), cost1 >= cost2.\n.output Answer"]}
{"id": 1861, "answer": false, "completion": ".decl Has_capacity(Hotel:symbol, Capacity:float)\nHas_capacity(\"Tahiti hotels\", 1000).\n.decl Has_n_troops(Event:symbol, N_troops:float)\nHas_n_troops(\"US D-Day\", 10000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tahiti hotels\", capacity), Has_n_troops(\"US D-Day\", n_troops), capacity >= n_troops.\n.output Answer", "completions": [".decl Has_capacity(Hotel:symbol, Capacity:float)\nHas_capacity(\"Tahiti hotels\", 1000).\n.decl Has_n_troops(Event:symbol, N_troops:float)\nHas_n_troops(\"US D-Day\", 10000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tahiti hotels\", capacity), Has_n_troops(\"US D-Day\", n_troops), capacity >= n_troops.\n.output Answer"]}
{"id": 1862, "answer": true, "completion": ".decl Competed_in(Person:symbol, Event:symbol)\nCompeted_in(\"Evander Holyfield\", \"Olympics\").\n.decl Hosted_in(Event:symbol, Hemisphere:symbol)\nHosted_in(\"Olympics\", \"western hemisphere\").\n.decl Answer()\nAnswer() :- Competed_in(\"Evander Holyfield\", event), Hosted_in(event, \"western hemisphere\").\n.output Answer", "completions": [".decl Competed_in(Person:symbol, Event:symbol)\nCompeted_in(\"Evander Holyfield\", \"Olympics\").\n.decl Hosted_in(Event:symbol, Hemisphere:symbol)\nHosted_in(\"Olympics\", \"western hemisphere\").\n.decl Answer()\nAnswer() :- Competed_in(\"Evander Holyfield\", event), Hosted_in(event, \"western hemisphere\").\n.output Answer"]}
{"id": 1863, "answer": false, "completion": ".decl Grows_in(Fruit:symbol, Place:symbol)\nGrows_in(\"watermelon\", \"Brazil\").\n.decl Answer()\nAnswer() :- Grows_in(\"watermelon\", \"Brazil\"), !Grows_in(\"watermelon\", \"Antarctica\").\n.output Answer", "completions": [".decl Grows_in(Fruit:symbol, Place:symbol)\nGrows_in(\"watermelon\", \"Brazil\").\n.decl Answer()\nAnswer() :- Grows_in(\"watermelon\", \"Brazil\"), !Grows_in(\"watermelon\", \"Antarctica\").\n.output Answer"]}
{"id": 1864, "answer": true, "completion": ".decl Hiding_from(Person:symbol, Country:symbol)\nHiding_from(\"Edward Snowden\", \"United States\").\n.decl Answer()\nAnswer() :- Hiding_from(\"Edward Snowden\", \"United States\").\n.output Answer", "completions": [".decl Hiding_from(Person:symbol, Country:symbol)\nHiding_from(\"Edward Snowden\", \"United States\").\n.decl Answer()\nAnswer() :- Hiding_from(\"Edward Snowden\", \"United States\").\n.output Answer"]}
{"id": 1865, "answer": false, "completion": ".decl Competes_for_resources(Organism_A:symbol, Organism_B:symbol)\nCompetes_for_resources(\"Leafhoppers\", \"Log Cabin syrup producers\").\n.decl Answer()\nAnswer() :- Competes_for_resources(\"Leafhoppers\", \"Log Cabin syrup producers\").\n.output Answer", "completions": [".decl Competes_for_resources(Organism_A:symbol, Organism_B:symbol)\nCompetes_for_resources(\"Leafhoppers\", \"Log Cabin syrup producers\").\n.decl Answer()\nAnswer() :- Competes_for_resources(\"Leafhoppers\", \"Log Cabin syrup producers\").\n.output Answer"]}
{"id": 1866, "answer": true, "completion": ".decl Has_effect(Drug:symbol, Effect:symbol)\nHas_effect(\"cocaine\", \"euphoria\").\n.decl Is_associated_with(Effect:symbol, Addiction:symbol)\nIs_associated_with(\"euphoria\", \"drug addiction\").\n.decl Answer()\nAnswer() :- Has_effect(drug, \"euphoria\"), Is_associated_with(\"euphoria\", \"drug addiction\").\n.output Answer", "completions": [".decl Has_effect(Drug:symbol, Effect:symbol)\nHas_effect(\"cocaine\", \"euphoria\").\n.decl Is_associated_with(Effect:symbol, Addiction:symbol)\nIs_associated_with(\"euphoria\", \"drug addiction\").\n.decl Answer()\nAnswer() :- Has_effect(drug, \"euphoria\"), Is_associated_with(\"euphoria\", \"drug addiction\").\n.output Answer"]}
{"id": 1867, "answer": false, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Anthony Quinn\", 8).\nHas_n_children(\"J.D. Salinger\", 0).\n.decl Answer()\nAnswer() :- Has_n_children(\"Anthony Quinn\", n_children1), Has_n_children(\"J.D. Salinger\", n_children2), n_children1 > n_children2.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Anthony Quinn\", 8).\nHas_n_children(\"J.D. Salinger\", 0).\n.decl Answer()\nAnswer() :- Has_n_children(\"Anthony Quinn\", n_children1), Has_n_children(\"J.D. Salinger\", n_children2), n_children1 > n_children2.\n.output Answer"]}
{"id": 1868, "answer": false, "completion": ".decl Was_lucrative(Job:symbol, Answer:symbol)\nWas_lucrative(\"proofreading Edgar Allan Poe works\", \"no\").\n.decl Answer()\nAnswer() :- Was_lucrative(\"proofreading Edgar Allan Poe works\", answer).\n.output Answer", "completions": [".decl Was_lucrative(Job:symbol, Answer:symbol)\nWas_lucrative(\"proofreading Edgar Allan Poe works\", \"no\").\n.decl Answer()\nAnswer() :- Was_lucrative(\"proofreading Edgar Allan Poe works\", answer).\n.output Answer"]}
{"id": 1869, "answer": false, "completion": ".decl Requires_gear(Activity:symbol, Gear:symbol)\nRequires_gear(\"capturing giant squid\", \"fishing net\").\n.decl Answer()\nAnswer() :- Requires_gear(\"capturing giant squid\", gear), gear != \"no gear\".\n.output Answer", "completions": [".decl Requires_gear(Activity:symbol, Gear:symbol)\nRequires_gear(\"capturing giant squid\", \"fishing net\").\n.decl Answer()\nAnswer() :- Requires_gear(\"capturing giant squid\", gear), gear != \"no gear\".\n.output Answer"]}
{"id": 1870, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Louisa May Alcott\", 44).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"ratification of the 13th Amendment\", 1865).\n.decl Answer()\nAnswer() :- Has_age(\"Louisa May Alcott\", age), Happens_in_year(\"ratification of the 13th Amendment\", year), age >= year.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Louisa May Alcott\", 44).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"ratification of the 13th Amendment\", 1865).\n.decl Answer()\nAnswer() :- Has_age(\"Louisa May Alcott\", age), Happens_in_year(\"ratification of the 13th Amendment\", year), age >= year.\n.output Answer"]}
{"id": 1871, "answer": true, "completion": ".decl Has_children(Person:symbol, Children:symbol)\nHas_children(\"Eric Clapton\", \"Ruth Clapton\").\nHas_children(\"Eric Clapton\", \"Julie Rose Clapton\").\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"Ruth Clapton\", 16).\nHas_age(\"Julie Rose Clapton\", 14).\n.decl Answer()\nAnswer() :- Has_children(\"Eric Clapton\", child1), Has_children(\"Eric Clapton\", child2), Has_age(child1, age1), Has_age(child2, age2), age1 >= 14, age2 >= 14.\n.output Answer", "completions": [".decl Has_children(Person:symbol, Children:symbol)\nHas_children(\"Eric Clapton\", \"Ruth Clapton\").\nHas_children(\"Eric Clapton\", \"Julie Rose Clapton\").\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"Ruth Clapton\", 16).\nHas_age(\"Julie Rose Clapton\", 14).\n.decl Answer()\nAnswer() :- Has_children(\"Eric Clapton\", child1), Has_children(\"Eric Clapton\", child2), Has_age(child1, age1), Has_age(child2, age2), age1 >= 14, age2 >= 14.\n.output Answer"]}
{"id": 1872, "answer": false, "completion": ".decl Has_n_projects(Franchise:symbol, N_projects:float)\nHas_n_projects(\"Dragon Ball\", 20).\nHas_n_projects(\"Friday 13th\", 12).\n.decl Answer()\nAnswer() :- Has_n_projects(\"Dragon Ball\", n_projects1), Has_n_projects(\"Friday 13th\", n_projects2), n_projects1 < n_projects2.\n.output Answer", "completions": [".decl Has_n_projects(Franchise:symbol, N_projects:float)\nHas_n_projects(\"Dragon Ball\", 20).\nHas_n_projects(\"Friday 13th\", 12).\n.decl Answer()\nAnswer() :- Has_n_projects(\"Dragon Ball\", n_projects1), Has_n_projects(\"Friday 13th\", n_projects2), n_projects1 < n_projects2.\n.output Answer"]}
{"id": 1873, "answer": true, "completion": ".decl Contains(Food:symbol, Nutrient:symbol)\nContains(\"lemonade\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Contains(\"lemonade\", \"Vitamin C\").\n.output Answer", "completions": [".decl Contains(Food:symbol, Nutrient:symbol)\nContains(\"lemonade\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Contains(\"lemonade\", \"Vitamin C\").\n.output Answer"]}
{"id": 1874, "answer": true, "completion": ".decl Produces(Organism:symbol, Product:symbol)\nProduces(\"Bombyx mori\", \"silk\").\n.decl Competes(Organism_A:symbol, Organism_B:symbol, Product:symbol)\n.decl Answer()\nAnswer() :- Produces(\"Bombyx mori\", product), !Competes(organism, \"Bombyx mori\", product).\n.output Answer", "completions": [".decl Produces(Organism:symbol, Product:symbol)\nProduces(\"Bombyx mori\", \"silk\").\n.decl Competes(Organism_A:symbol, Organism_B:symbol, Product:symbol)\n.decl Answer()\nAnswer() :- Produces(\"Bombyx mori\", product), !Competes(organism, \"Bombyx mori\", product).\n.output Answer"]}
{"id": 1875, "answer": true, "completion": ".decl Was_on_mission(Person:symbol, Mission:symbol)\nWas_on_mission(\"Apollo 15 crew\", \"Apollo 15\").\n.decl Took_picture_of(Mission:symbol, Object:symbol)\nTook_picture_of(\"Apollo 15\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Was_on_mission(\"Apollo 15 crew\", mission), Took_picture_of(mission, \"Mount Sharp\").\n.output Answer", "completions": [".decl Was_on_mission(Person:symbol, Mission:symbol)\nWas_on_mission(\"Apollo 15 crew\", \"Apollo 15\").\n.decl Took_picture_of(Mission:symbol, Object:symbol)\nTook_picture_of(\"Apollo 15\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Was_on_mission(\"Apollo 15 crew\", mission), Took_picture_of(mission, \"Mount Sharp\").\n.output Answer"]}
{"id": 1876, "answer": true, "completion": ".decl Aldi_policy(Policy:symbol)\nAldi_policy(\"Bring your own bags\").\n.decl Answer()\nAnswer() :- Aldi_policy(\"Bring your own bags\").\n.output Answer", "completions": [".decl Aldi_policy(Policy:symbol)\nAldi_policy(\"Bring your own bags\").\n.decl Answer()\nAnswer() :- Aldi_policy(\"Bring your own bags\").\n.output Answer"]}
{"id": 1877, "answer": false, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Porsche 992 Turbo S\", 300).\nHas_speed(\"Usain Bolt\", 27.8).\n.decl Answer()\nAnswer() :- Has_speed(\"Porsche 992 Turbo S\", speed1), Has_speed(\"Usain Bolt\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Porsche 992 Turbo S\", 300).\nHas_speed(\"Usain Bolt\", 27.8).\n.decl Answer()\nAnswer() :- Has_speed(\"Porsche 992 Turbo S\", speed1), Has_speed(\"Usain Bolt\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 1878, "answer": true, "completion": ".decl Used_for(Object:symbol, Purpose:symbol)\nUsed_for(\"curling brooms\", \"sweeping ice\").\nUsed_for(\"house floors\", \"sweeping dirt\").\n.decl Answer()\nAnswer() :- Used_for(\"curling brooms\", purpose1), Used_for(\"house floors\", purpose2), purpose1 != purpose2.\n.output Answer", "completions": [".decl Used_for(Object:symbol, Purpose:symbol)\nUsed_for(\"curling brooms\", \"sweeping ice\").\nUsed_for(\"house floors\", \"sweeping dirt\").\n.decl Answer()\nAnswer() :- Used_for(\"curling brooms\", purpose1), Used_for(\"house floors\", purpose2), purpose1 != purpose2.\n.output Answer"]}
{"id": 1879, "answer": true, "completion": ".decl Has_piercings(Person:symbol, Piercings:symbol)\nHas_piercings(\"John\", \"lip piercings\").\n.decl Has_dental_bills(Person:symbol, Dental_bills:float)\nHas_dental_bills(\"John\", 500).\nHas_dental_bills(\"Jane\", 300).\n.decl Answer()\nAnswer() :- Has_piercings(person, \"lip piercings\"), Has_dental_bills(person, dental_bills1), Has_dental_bills(\"Jane\", dental_bills2), dental_bills1 > dental_bills2.\n.output Answer", "completions": [".decl Has_piercings(Person:symbol, Piercings:symbol)\nHas_piercings(\"John\", \"lip piercings\").\n.decl Has_dental_bills(Person:symbol, Dental_bills:float)\nHas_dental_bills(\"John\", 500).\nHas_dental_bills(\"Jane\", 300).\n.decl Answer()\nAnswer() :- Has_piercings(person, \"lip piercings\"), Has_dental_bills(person, dental_bills1), Has_dental_bills(\"Jane\", dental_bills2), dental_bills1 > dental_bills2.\n.output Answer"]}
{"id": 1880, "answer": true, "completion": ".decl Has_genre(Artist:symbol, Genre:symbol, Time:symbol)\nHas_genre(\"ABBA\", \"pop\", \"1970s\").\n.decl Is_relevant(Genre:symbol, Time:symbol)\nIs_relevant(\"pop\", \"2020s\").\n.decl Answer()\nAnswer() :- Has_genre(\"ABBA\", genre, time), Is_relevant(genre, \"2020s\").\n.output Answer", "completions": [".decl Has_genre(Artist:symbol, Genre:symbol, Time:symbol)\nHas_genre(\"ABBA\", \"pop\", \"1970s\").\n.decl Is_relevant(Genre:symbol, Time:symbol)\nIs_relevant(\"pop\", \"2020s\").\n.decl Answer()\nAnswer() :- Has_genre(\"ABBA\", genre, time), Is_relevant(genre, \"2020s\").\n.output Answer"]}
{"id": 1881, "answer": true, "completion": ".decl Has_work(Author:symbol, Work:symbol)\nHas_work(\"J.D. Salinger\", \"The Catcher in the Rye\").\n.decl Influences(Work:symbol, Group:symbol)\nInfluences(\"The Catcher in the Rye\", \"killers\").\n.decl Answer()\nAnswer() :- Has_work(\"J.D. Salinger\", work), Influences(work, \"killers\").\n.output Answer", "completions": [".decl Has_work(Author:symbol, Work:symbol)\nHas_work(\"J.D. Salinger\", \"The Catcher in the Rye\").\n.decl Influences(Work:symbol, Group:symbol)\nInfluences(\"The Catcher in the Rye\", \"killers\").\n.decl Answer()\nAnswer() :- Has_work(\"J.D. Salinger\", work), Influences(work, \"killers\").\n.output Answer"]}
{"id": 1882, "answer": true, "completion": ".decl Uses_ingredient(Person:symbol, Ingredient:symbol)\nUses_ingredient(\"Cyndi Lauper\", \"rice\").\nUses_ingredient(\"Cyndi Lauper\", \"milk\").\n.decl Has_substitute(Ingredient:symbol, Substitute:symbol)\nHas_substitute(\"milk\", \"milk substitute\").\n.decl Answer()\nAnswer() :- Uses_ingredient(\"Cyndi Lauper\", ingredient), Has_substitute(ingredient, \"milk substitute\").\n.output Answer", "completions": [".decl Uses_ingredient(Person:symbol, Ingredient:symbol)\nUses_ingredient(\"Cyndi Lauper\", \"rice\").\nUses_ingredient(\"Cyndi Lauper\", \"milk\").\n.decl Has_substitute(Ingredient:symbol, Substitute:symbol)\nHas_substitute(\"milk\", \"milk substitute\").\n.decl Answer()\nAnswer() :- Uses_ingredient(\"Cyndi Lauper\", ingredient), Has_substitute(ingredient, \"milk substitute\").\n.output Answer"]}
{"id": 1883, "answer": true, "completion": ".decl Appears_on_calendar(Animal:symbol, Calendar:symbol)\nAppears_on_calendar(\"tiger\", \"Chinese New Year\").\n.decl Is_mollusk(Animal:symbol)\nIs_mollusk(\"snail\").\nIs_mollusk(\"octopus\").\n.decl Answer()\nAnswer() :- Appears_on_calendar(animal, \"Chinese New Year\"), Is_mollusk(animal).\n.output Answer", "completions": [".decl Appears_on_calendar(Animal:symbol, Calendar:symbol)\nAppears_on_calendar(\"tiger\", \"Chinese New Year\").\n.decl Is_mollusk(Animal:symbol)\nIs_mollusk(\"snail\").\nIs_mollusk(\"octopus\").\n.decl Answer()\nAnswer() :- Appears_on_calendar(animal, \"Chinese New Year\"), Is_mollusk(animal).\n.output Answer"]}
{"id": 1884, "answer": false, "completion": ".decl Present_at(Person:symbol, Event:symbol)\nPresent_at(\"Gandalf\", \"death of Eomer\").\n.decl Answer()\nAnswer() :- Present_at(\"Gandalf\", \"death of Eomer\").\n.output Answer", "completions": [".decl Present_at(Person:symbol, Event:symbol)\nPresent_at(\"Gandalf\", \"death of Eomer\").\n.decl Answer()\nAnswer() :- Present_at(\"Gandalf\", \"death of Eomer\").\n.output Answer"]}
{"id": 1885, "answer": false, "completion": ".decl Has_orbit_length(Planet:symbol, Orbit_length:float)\nHas_orbit_length(\"Neptune\", 164.79).\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"first two burials of women in the Panthéon\", \"1793-1794\").\n.decl Answer()\nAnswer() :- Has_orbit_length(\"Neptune\", orbit_length), Happens_in_time(\"first two burials of women in the Panthéon\", time), orbit_length <= time.\n.output Answer", "completions": [".decl Has_orbit_length(Planet:symbol, Orbit_length:float)\nHas_orbit_length(\"Neptune\", 164.79).\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"first two burials of women in the Panthéon\", \"1793-1794\").\n.decl Answer()\nAnswer() :- Has_orbit_length(\"Neptune\", orbit_length), Happens_in_time(\"first two burials of women in the Panthéon\", time), orbit_length <= time.\n.output Answer"]}
{"id": 1886, "answer": true, "completion": ".decl Has_disorder(Person:symbol, Disorder:symbol)\nHas_disorder(\"John\", \"bipolar disorder\").\nHas_disorder(\"Jane\", \"diabetes\").\n.decl Answer()\nAnswer() :- Has_disorder(person1, \"bipolar disorder\"), Has_disorder(person2, \"diabetes\"), person1 != person2.\n.output Answer", "completions": [".decl Has_disorder(Person:symbol, Disorder:symbol)\nHas_disorder(\"John\", \"bipolar disorder\").\nHas_disorder(\"Jane\", \"diabetes\").\n.decl Answer()\nAnswer() :- Has_disorder(person1, \"bipolar disorder\"), Has_disorder(person2, \"diabetes\"), person1 != person2.\n.output Answer"]}
{"id": 1887, "answer": false, "completion": ".decl Has_capacity(Car:symbol, Capacity:float)\nHas_capacity(\"Audi TT\", 2).\n.decl Has_height(Person:symbol, Height:float)\nHas_height(\"Debra Marshall\", 1.7).\nHas_height(\"Kathy Colace\", 1.6).\nHas_height(\"Kristin Feres\", 1.6).\n.decl Answer()\nAnswer() :- Has_capacity(\"Audi TT\", capacity), Has_height(person, height), capacity >= height.\n.output Answer", "completions": [".decl Has_capacity(Car:symbol, Capacity:float)\nHas_capacity(\"Audi TT\", 2).\n.decl Has_height(Person:symbol, Height:float)\nHas_height(\"Debra Marshall\", 1.7).\nHas_height(\"Kathy Colace\", 1.6).\nHas_height(\"Kristin Feres\", 1.6).\n.decl Answer()\nAnswer() :- Has_capacity(\"Audi TT\", capacity), Has_height(person, height), capacity >= height.\n.output Answer"]}
{"id": 1888, "answer": true, "completion": ".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"Six-Day War\", 6).\nLasts_n_days(\"NBA game\", 2).\n.decl Answer()\nAnswer() :- Lasts_n_days(\"Six-Day War\", n_days1), Lasts_n_days(\"NBA game\", n_days2), n_days2 <= n_days1.\n.output Answer", "completions": [".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"Six-Day War\", 6).\nLasts_n_days(\"NBA game\", 2).\n.decl Answer()\nAnswer() :- Lasts_n_days(\"Six-Day War\", n_days1), Lasts_n_days(\"NBA game\", n_days2), n_days2 <= n_days1.\n.output Answer"]}
{"id": 1889, "answer": true, "completion": ".decl Has_traveled(Person:symbol, Destination:symbol)\nHas_traveled(\"Ivan the Terrible\", \"Russia\").\n.decl Answer()\nAnswer() :- !Has_traveled(\"Ivan the Terrible\", \"Europe\").\n.output Answer", "completions": [".decl Has_traveled(Person:symbol, Destination:symbol)\nHas_traveled(\"Ivan the Terrible\", \"Russia\").\n.decl Answer()\nAnswer() :- !Has_traveled(\"Ivan the Terrible\", \"Europe\").\n.output Answer"]}
{"id": 1890, "answer": true, "completion": ".decl Contains(Book:symbol, Item:symbol)\nContains(\"TMNT coloring book\", \"pizza\").\n.decl Answer()\nAnswer() :- Contains(\"TMNT coloring book\", \"pizza\").\n.output Answer", "completions": [".decl Contains(Book:symbol, Item:symbol)\nContains(\"TMNT coloring book\", \"pizza\").\n.decl Answer()\nAnswer() :- Contains(\"TMNT coloring book\", \"pizza\").\n.output Answer"]}
{"id": 1891, "answer": true, "completion": ".decl Explains(Theory:symbol, Phenomenon:symbol)\n.decl Answer()\nAnswer() :- !Explains(\"theory of cultural hegemony\", \"global warming\").\n.output Answer", "completions": [".decl Explains(Theory:symbol, Phenomenon:symbol)\n.decl Answer()\nAnswer() :- !Explains(\"theory of cultural hegemony\", \"global warming\").\n.output Answer"]}
{"id": 1892, "answer": true, "completion": ".decl Used_at(Object:symbol, Place:symbol)\nUsed_at(\"kayak\", \"river\").\nUsed_at(\"kayak\", \"lake\").\n.decl Answer()\nAnswer() :- !Used_at(\"kayak\", \"Mount Everest\").\n.output Answer", "completions": [".decl Used_at(Object:symbol, Place:symbol)\nUsed_at(\"kayak\", \"river\").\nUsed_at(\"kayak\", \"lake\").\n.decl Answer()\nAnswer() :- !Used_at(\"kayak\", \"Mount Everest\").\n.output Answer"]}
{"id": 1893, "answer": false, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Christmas\", \"Sunday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Christmas\", \"Sunday\").\n.output Answer", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Christmas\", \"Sunday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Christmas\", \"Sunday\").\n.output Answer"]}
{"id": 1894, "answer": false, "completion": ".decl Is_in_environment(Event:symbol, Environment:symbol)\nIs_in_environment(\"Swan Lake performance\", \"theater\").\n.decl Is_in_environment(Event:symbol, Environment:symbol)\nIs_in_environment(\"drowning\", \"water\").\n.decl Answer()\nAnswer() :- Is_in_environment(\"Swan Lake performance\", environment1), Is_in_environment(\"drowning\", environment2), environment1 != environment2.\n.output Answer", "completions": [".decl Is_in_environment(Event:symbol, Environment:symbol)\nIs_in_environment(\"Swan Lake performance\", \"theater\").\n.decl Is_in_environment(Event:symbol, Environment:symbol)\nIs_in_environment(\"drowning\", \"water\").\n.decl Answer()\nAnswer() :- Is_in_environment(\"Swan Lake performance\", environment1), Is_in_environment(\"drowning\", environment2), environment1 != environment2.\n.output Answer"]}
{"id": 1895, "answer": false, "completion": ".decl Likes(Person:symbol, Band:symbol)\n.decl Nationality(Person:symbol, Nationality:symbol)\n.decl Answer()\nAnswer() :- Nationality(person, \"Armenian\"), Likes(person, \"System of a Down\"), !Likes(person, \"System of a Down\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Band:symbol)\n.decl Nationality(Person:symbol, Nationality:symbol)\n.decl Answer()\nAnswer() :- Nationality(person, \"Armenian\"), Likes(person, \"System of a Down\"), !Likes(person, \"System of a Down\").\n.output Answer"]}
{"id": 1896, "answer": false, "completion": ".decl Has_n_members(Team:symbol, N_members:float)\nHas_n_members(\"Powerpuff Girls\", 3).\n.decl Is_complete(Team:symbol)\nIs_complete(\"tag team wrestling match\").\n.decl Answer()\nAnswer() :- Has_n_members(\"Powerpuff Girls\", n_members), Is_complete(team), n_members = 4.\n.output Answer", "completions": [".decl Has_n_members(Team:symbol, N_members:float)\nHas_n_members(\"Powerpuff Girls\", 3).\n.decl Is_complete(Team:symbol)\nIs_complete(\"tag team wrestling match\").\n.decl Answer()\nAnswer() :- Has_n_members(\"Powerpuff Girls\", n_members), Is_complete(team), n_members = 4.\n.output Answer"]}
{"id": 1897, "answer": false, "completion": ".decl Has_n_songs(Catalog:symbol, N_songs:float)\nHas_n_songs(\"Itunes song catalog\", 45000000).\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"one year\", 365).\n.decl Answer()\nAnswer() :- Has_n_songs(\"Itunes song catalog\", n_songs), Last_n_days(\"one year\", n_days), n_songs > n_days.\n.output Answer", "completions": [".decl Has_n_songs(Catalog:symbol, N_songs:float)\nHas_n_songs(\"Itunes song catalog\", 45000000).\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"one year\", 365).\n.decl Answer()\nAnswer() :- Has_n_songs(\"Itunes song catalog\", n_songs), Last_n_days(\"one year\", n_days), n_songs > n_days.\n.output Answer"]}
{"id": 1898, "answer": true, "completion": ".decl Writes_music(Artist:symbol, Genre:symbol)\nWrites_music(\"The Beatles\", \"Rock\").\nWrites_music(\"The Beatles\", \"Pop\").\n.decl Answer()\nAnswer() :- !Writes_music(\"The Beatles\", \"Disco\").\n.output Answer", "completions": [".decl Writes_music(Artist:symbol, Genre:symbol)\nWrites_music(\"The Beatles\", \"Rock\").\nWrites_music(\"The Beatles\", \"Pop\").\n.decl Answer()\nAnswer() :- !Writes_music(\"The Beatles\", \"Disco\").\n.output Answer"]}
{"id": 1899, "answer": true, "completion": ".decl Has_polygons(Game:symbol, Polygons:float)\nHas_polygons(\"Metroid\", 256).\n.decl Answer()\nAnswer() :- Has_polygons(\"Metroid\", polygons), polygons > 0.\n.output Answer", "completions": [".decl Has_polygons(Game:symbol, Polygons:float)\nHas_polygons(\"Metroid\", 256).\n.decl Answer()\nAnswer() :- Has_polygons(\"Metroid\", polygons), polygons > 0.\n.output Answer"]}
{"id": 1900, "answer": true, "completion": ".decl Has_anger_level(Organization:symbol, Anger_level:float)\nHas_anger_level(\"WWF\", 10).\n.decl Has_endangerment_level(Animal:symbol, Endangerment_level:float)\nHas_endangerment_level(\"koala\", 8).\nHas_endangerment_level(\"black swan\", 4).\n.decl Answer()\nAnswer() :- Has_anger_level(\"WWF\", anger_level1), Has_endangerment_level(\"koala\", endangerment_level1), Has_endangerment_level(\"black swan\", endangerment_level2), endangerment_level1 > endangerment_level2, anger_level1 > anger_level2.\n.output Answer", "completions": [".decl Has_anger_level(Organization:symbol, Anger_level:float)\nHas_anger_level(\"WWF\", 10).\n.decl Has_endangerment_level(Animal:symbol, Endangerment_level:float)\nHas_endangerment_level(\"koala\", 8).\nHas_endangerment_level(\"black swan\", 4).\n.decl Answer()\nAnswer() :- Has_anger_level(\"WWF\", anger_level1), Has_endangerment_level(\"koala\", endangerment_level1), Has_endangerment_level(\"black swan\", endangerment_level2), endangerment_level1 > endangerment_level2, anger_level1 > anger_level2.\n.output Answer"]}
{"id": 1901, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Hodor\", \"math\").\n.decl Is_good_at(Person:symbol, Skill:symbol)\nIs_good_at(\"Hodor\", \"math\").\n.decl Answer()\nAnswer() :- Has_skill(\"Hodor\", skill), Is_good_at(\"Hodor\", skill).\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Hodor\", \"math\").\n.decl Is_good_at(Person:symbol, Skill:symbol)\nIs_good_at(\"Hodor\", \"math\").\n.decl Answer()\nAnswer() :- Has_skill(\"Hodor\", skill), Is_good_at(\"Hodor\", skill).\n.output Answer"]}
{"id": 1902, "answer": false, "completion": ".decl Plays_role(Person:symbol, Role:symbol, Movie:symbol)\nPlays_role(\"Keith Richards\", \"captain\", \"Pirates of the Caribbean: At World's End\").\n.decl Answer()\nAnswer() :- Plays_role(\"Keith Richards\", \"captain\", movie).\n.output Answer", "completions": [".decl Plays_role(Person:symbol, Role:symbol, Movie:symbol)\nPlays_role(\"Keith Richards\", \"captain\", \"Pirates of the Caribbean: At World's End\").\n.decl Answer()\nAnswer() :- Plays_role(\"Keith Richards\", \"captain\", movie).\n.output Answer"]}
{"id": 1903, "answer": true, "completion": ".decl Rivals(Person_A:symbol, Person_B:symbol)\nRivals(\"Ahura Mazda\", \"Zeus\").\n.decl Answer()\nAnswer() :- Rivals(\"Ahura Mazda\", \"Zeus\").\n.output Answer", "completions": [".decl Rivals(Person_A:symbol, Person_B:symbol)\nRivals(\"Ahura Mazda\", \"Zeus\").\n.decl Answer()\nAnswer() :- Rivals(\"Ahura Mazda\", \"Zeus\").\n.output Answer"]}
{"id": 1904, "answer": true, "completion": ".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Tata Hexa\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tata Hexa\", capacity), Has_n_members(\"Spice Girls\", n_members), capacity >= n_members.\n.output Answer", "completions": [".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Tata Hexa\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tata Hexa\", capacity), Has_n_members(\"Spice Girls\", n_members), capacity >= n_members.\n.output Answer"]}
{"id": 1905, "answer": false, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"University of Pittsburgh founder\", \"wealthy\").\nHas_trait(\"Judith Sheindlin\", \"wealthy\").\n.decl Answer()\nAnswer() :- Has_trait(\"University of Pittsburgh founder\", trait), Has_trait(\"Judith Sheindlin\", trait).\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"University of Pittsburgh founder\", \"wealthy\").\nHas_trait(\"Judith Sheindlin\", \"wealthy\").\n.decl Answer()\nAnswer() :- Has_trait(\"University of Pittsburgh founder\", trait), Has_trait(\"Judith Sheindlin\", trait).\n.output Answer"]}
{"id": 1906, "answer": false, "completion": ".decl Has_ability(Object:symbol, Ability:symbol)\nHas_ability(\"Toyota Supra\", \"driving\").\nHas_ability(\"human\", \"vlogging\").\n.decl Answer()\nAnswer() :- Has_ability(\"Toyota Supra\", ability), !Has_ability(\"Toyota Supra\", \"vlogging\").\n.output Answer", "completions": [".decl Has_ability(Object:symbol, Ability:symbol)\nHas_ability(\"Toyota Supra\", \"driving\").\nHas_ability(\"human\", \"vlogging\").\n.decl Answer()\nAnswer() :- Has_ability(\"Toyota Supra\", ability), !Has_ability(\"Toyota Supra\", \"vlogging\").\n.output Answer"]}
{"id": 1907, "answer": false, "completion": ".decl Knows(Person:symbol, Knowledge:symbol)\nKnows(\"grand master\", \"French Defense\").\n.decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"grand master\", \"grand master\").\n.decl Answer()\nAnswer() :- Has_title(person, \"grand master\"), Knows(person, \"French Defense\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Knowledge:symbol)\nKnows(\"grand master\", \"French Defense\").\n.decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"grand master\", \"grand master\").\n.decl Answer()\nAnswer() :- Has_title(person, \"grand master\"), Knows(person, \"French Defense\").\n.output Answer"]}
{"id": 1908, "answer": true, "completion": ".decl Has_relationship(Country:symbol, Monarch:symbol)\nHas_relationship(\"Canada\", \"Elizabeth II\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Canada\", monarch).\n.output Answer", "completions": [".decl Has_relationship(Country:symbol, Monarch:symbol)\nHas_relationship(\"Canada\", \"Elizabeth II\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Canada\", monarch).\n.output Answer"]}
{"id": 1909, "answer": false, "completion": ".decl Understands(Person:symbol, Language:symbol)\nUnderstands(\"Pict\", \"Pictish\").\n.decl Answer()\nAnswer() :- !Understands(\"Pict\", \"Old English\").\n.output Answer", "completions": [".decl Understands(Person:symbol, Language:symbol)\nUnderstands(\"Pict\", \"Pictish\").\n.decl Answer()\nAnswer() :- !Understands(\"Pict\", \"Old English\").\n.output Answer"]}
{"id": 1910, "answer": false, "completion": ".decl Has_bar_mitzvah(Person:symbol)\n.decl Answer()\nAnswer() :- !Has_bar_mitzvah(\"Charlemagne\").\n.output Answer", "completions": [".decl Has_bar_mitzvah(Person:symbol)\n.decl Answer()\nAnswer() :- !Has_bar_mitzvah(\"Charlemagne\").\n.output Answer"]}
{"id": 1911, "answer": false, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Garfield\", \"lasagna\").\n.decl Is_canid_food(Food:symbol)\nIs_canid_food(\"dog food\").\n.decl Answer()\nAnswer() :- Likes(\"Garfield\", food), Is_canid_food(food).\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Garfield\", \"lasagna\").\n.decl Is_canid_food(Food:symbol)\nIs_canid_food(\"dog food\").\n.decl Answer()\nAnswer() :- Likes(\"Garfield\", food), Is_canid_food(food).\n.output Answer"]}
{"id": 1912, "answer": true, "completion": ".decl Has_armor(Person:symbol, Armor:symbol)\nHas_armor(\"Franz Ferdinand\", \"armadillo armor\").\n.decl Has_protection(Armor:symbol, Protection:float)\nHas_protection(\"armadillo armor\", 0.9).\n.decl Answer()\nAnswer() :- Has_armor(\"Franz Ferdinand\", armor), Has_protection(armor, protection), protection > 0.\n.output Answer", "completions": [".decl Has_armor(Person:symbol, Armor:symbol)\nHas_armor(\"Franz Ferdinand\", \"armadillo armor\").\n.decl Has_protection(Armor:symbol, Protection:float)\nHas_protection(\"armadillo armor\", 0.9).\n.decl Answer()\nAnswer() :- Has_armor(\"Franz Ferdinand\", armor), Has_protection(armor, protection), protection > 0.\n.output Answer"]}
{"id": 1913, "answer": true, "completion": ".decl Serves(Restaurant:symbol, Dish:symbol, Country:symbol)\nServes(\"Italian restaurant\", \"meatballs\", \"Italy\").\n.decl Wrong_origin(Dish:symbol, Wrong_country:symbol)\nWrong_origin(\"meatballs\", \"Sweden\").\n.decl Answer()\nAnswer() :- Serves(restaurant, \"meatballs\", country), Wrong_origin(\"meatballs\", wrong_country), country != wrong_country.\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Dish:symbol, Country:symbol)\nServes(\"Italian restaurant\", \"meatballs\", \"Italy\").\n.decl Wrong_origin(Dish:symbol, Wrong_country:symbol)\nWrong_origin(\"meatballs\", \"Sweden\").\n.decl Answer()\nAnswer() :- Serves(restaurant, \"meatballs\", country), Wrong_origin(\"meatballs\", wrong_country), country != wrong_country.\n.output Answer"]}
{"id": 1914, "answer": false, "completion": ".decl Has_size(Bone:symbol, Size:symbol)\nHas_size(\"femur\", \"largest\").\nHas_size(\"stirrup\", \"smallest\").\n.decl Is_protected_from(Body_part:symbol, Blow:symbol)\nIs_protected_from(\"torso\", \"blows to the largest and smallest bones in body\").\n.decl Answer()\nAnswer() :- Has_size(bone, \"largest\"), Has_size(bone, \"smallest\"), Is_protected_from(\"torso\", \"blows to the largest and smallest bones in body\").\n.output Answer", "completions": [".decl Has_size(Bone:symbol, Size:symbol)\nHas_size(\"femur\", \"largest\").\nHas_size(\"stirrup\", \"smallest\").\n.decl Is_protected_from(Body_part:symbol, Blow:symbol)\nIs_protected_from(\"torso\", \"blows to the largest and smallest bones in body\").\n.decl Answer()\nAnswer() :- Has_size(bone, \"largest\"), Has_size(bone, \"smallest\"), Is_protected_from(\"torso\", \"blows to the largest and smallest bones in body\").\n.output Answer"]}
{"id": 1915, "answer": true, "completion": ".decl Has_upload_speed(Plan:symbol, Upload_speed:float)\nHas_upload_speed(\"Centurylink max internet plan\", 1000).\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"fortnight\", 14).\n.decl Answer()\nAnswer() :- Has_upload_speed(\"Centurylink max internet plan\", upload_speed), Last_n_days(\"fortnight\", n_days), upload_speed * n_days >= 1000.\n.output Answer", "completions": [".decl Has_upload_speed(Plan:symbol, Upload_speed:float)\nHas_upload_speed(\"Centurylink max internet plan\", 1000).\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"fortnight\", 14).\n.decl Answer()\nAnswer() :- Has_upload_speed(\"Centurylink max internet plan\", upload_speed), Last_n_days(\"fortnight\", n_days), upload_speed * n_days >= 1000.\n.output Answer"]}
{"id": 1916, "answer": true, "completion": ".decl Helps_become_famous(Thing:symbol, Person:symbol)\n.decl Answer()\nAnswer() :- !Helps_become_famous(\"green\", \"Theodor Geisel\").\n.output Answer", "completions": [".decl Helps_become_famous(Thing:symbol, Person:symbol)\n.decl Answer()\nAnswer() :- !Helps_become_famous(\"green\", \"Theodor Geisel\").\n.output Answer"]}
{"id": 1917, "answer": true, "completion": ".decl Is_located_on(Place:symbol, Island:symbol)\nIs_located_on(\"Central Park Zoo\", \"Manhattan Island\").\n.decl Answer()\nAnswer() :- Is_located_on(\"Central Park Zoo\", island).\n.output Answer", "completions": [".decl Is_located_on(Place:symbol, Island:symbol)\nIs_located_on(\"Central Park Zoo\", \"Manhattan Island\").\n.decl Answer()\nAnswer() :- Is_located_on(\"Central Park Zoo\", island).\n.output Answer"]}
{"id": 1918, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"John Doe\", \"Herpes simplex virus\").\n.decl Shares_information(Organization_A:symbol, Organization_B:symbol)\nShares_information(\"Planned Parenthood\", \"University of Pennsylvania\").\n.decl Answer()\nAnswer() :- Has_disease(\"John Doe\", \"Herpes simplex virus\"), Shares_information(\"Planned Parenthood\", \"University of Pennsylvania\").\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"John Doe\", \"Herpes simplex virus\").\n.decl Shares_information(Organization_A:symbol, Organization_B:symbol)\nShares_information(\"Planned Parenthood\", \"University of Pennsylvania\").\n.decl Answer()\nAnswer() :- Has_disease(\"John Doe\", \"Herpes simplex virus\"), Shares_information(\"Planned Parenthood\", \"University of Pennsylvania\").\n.output Answer"]}
{"id": 1919, "answer": true, "completion": ".decl Has_capital(State:symbol, Capital:symbol)\nHas_capital(\"Guam\", \"Hagåtña\").\n.decl Answer()\nAnswer() :- Has_capital(\"Guam\", _).\n.output Answer", "completions": [".decl Has_capital(State:symbol, Capital:symbol)\nHas_capital(\"Guam\", \"Hagåtña\").\n.decl Answer()\nAnswer() :- Has_capital(\"Guam\", _).\n.output Answer"]}
{"id": 1920, "answer": true, "completion": ".decl Is_type_of_poem(Poem:symbol, Type:symbol)\nIs_type_of_poem(\"Jabberwocky\", \"nonsense poem\").\n.decl Is_sonnet(Poem:symbol)\nIs_sonnet(\"Shall I compare thee to a summer's day?\").\n.decl Answer()\nAnswer() :- Is_type_of_poem(\"Jabberwocky\", type), !Is_sonnet(type).\n.output Answer", "completions": [".decl Is_type_of_poem(Poem:symbol, Type:symbol)\nIs_type_of_poem(\"Jabberwocky\", \"nonsense poem\").\n.decl Is_sonnet(Poem:symbol)\nIs_sonnet(\"Shall I compare thee to a summer's day?\").\n.decl Answer()\nAnswer() :- Is_type_of_poem(\"Jabberwocky\", type), !Is_sonnet(type).\n.output Answer"]}
{"id": 1921, "answer": true, "completion": ".decl Passes_through(Person:symbol, Place:symbol)\nPasses_through(\"Dante\", \"circle of lust\").\n.decl Is_in(Person:symbol, Place:symbol)\nIs_in(\"Saladin\", \"circle of lust\").\n.decl Answer()\nAnswer() :- Passes_through(\"Dante\", place), Is_in(\"Saladin\", place).\n.output Answer", "completions": [".decl Passes_through(Person:symbol, Place:symbol)\nPasses_through(\"Dante\", \"circle of lust\").\n.decl Is_in(Person:symbol, Place:symbol)\nIs_in(\"Saladin\", \"circle of lust\").\n.decl Answer()\nAnswer() :- Passes_through(\"Dante\", place), Is_in(\"Saladin\", place).\n.output Answer"]}
{"id": 1922, "answer": true, "completion": ".decl Has_explosive_power(Material:symbol, Explosive_power:float)\nHas_explosive_power(\"gunpowder\", 5).\n.decl Has_speed(Wave:symbol, Speed:float)\nHas_speed(\"supersonic shock wave\", 340).\n.decl Answer()\nAnswer() :- Has_explosive_power(\"gunpowder\", explosive_power), Has_speed(\"supersonic shock wave\", speed), explosive_power >= speed.\n.output Answer", "completions": [".decl Has_explosive_power(Material:symbol, Explosive_power:float)\nHas_explosive_power(\"gunpowder\", 5).\n.decl Has_speed(Wave:symbol, Speed:float)\nHas_speed(\"supersonic shock wave\", 340).\n.decl Answer()\nAnswer() :- Has_explosive_power(\"gunpowder\", explosive_power), Has_speed(\"supersonic shock wave\", speed), explosive_power >= speed.\n.output Answer"]}
{"id": 1923, "answer": true, "completion": ".decl Happens_at_time(Event:symbol, Time:symbol)\nHappens_at_time(\"New Years Eve\", \"midnight\").\nHappens_at_time(\"meeting people in diapers\", \"unlikely\").\n.decl Answer()\nAnswer() :- Happens_at_time(\"New Years Eve\", time), Happens_at_time(\"meeting people in diapers\", likelihood), time = \"midnight\", likelihood = \"unlikely\".\n.output Answer", "completions": [".decl Happens_at_time(Event:symbol, Time:symbol)\nHappens_at_time(\"New Years Eve\", \"midnight\").\nHappens_at_time(\"meeting people in diapers\", \"unlikely\").\n.decl Answer()\nAnswer() :- Happens_at_time(\"New Years Eve\", time), Happens_at_time(\"meeting people in diapers\", likelihood), time = \"midnight\", likelihood = \"unlikely\".\n.output Answer"]}
{"id": 1924, "answer": false, "completion": ".decl Is_needed_for(Job:symbol, Event:symbol)\nIs_needed_for(\"railroad engineer\", \"railroad construction\").\n.decl Answer()\nAnswer() :- Is_needed_for(\"railroad engineer\", event), !Is_needed_for(\"railroad engineer\", \"NASCAR events\").\n.output Answer", "completions": [".decl Is_needed_for(Job:symbol, Event:symbol)\nIs_needed_for(\"railroad engineer\", \"railroad construction\").\n.decl Answer()\nAnswer() :- Is_needed_for(\"railroad engineer\", event), !Is_needed_for(\"railroad engineer\", \"NASCAR events\").\n.output Answer"]}
{"id": 1925, "answer": true, "completion": ".decl Is_made_of(Object_A:symbol, Object_B:symbol)\nIs_made_of(\"beard\", \"moss\").\n.decl Answer()\nAnswer() :- Is_made_of(\"beard\", \"moss\").\n.output Answer", "completions": [".decl Is_made_of(Object_A:symbol, Object_B:symbol)\nIs_made_of(\"beard\", \"moss\").\n.decl Answer()\nAnswer() :- Is_made_of(\"beard\", \"moss\").\n.output Answer"]}
{"id": 1926, "answer": true, "completion": ".decl Causes(Disease:symbol, Substance:symbol)\nCauses(\"dyspepsia\", \"lemon\").\n.decl Answer()\nAnswer() :- Causes(\"dyspepsia\", \"lemon\").\n.output Answer", "completions": [".decl Causes(Disease:symbol, Substance:symbol)\nCauses(\"dyspepsia\", \"lemon\").\n.decl Answer()\nAnswer() :- Causes(\"dyspepsia\", \"lemon\").\n.output Answer"]}
{"id": 1927, "answer": false, "completion": ".decl Likes(Person:symbol, Music_genre:symbol)\nLikes(\"Beethoven\", \"Classical\").\n.decl Answer()\nAnswer() :- !Likes(\"Beethoven\", \"EDM\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Music_genre:symbol)\nLikes(\"Beethoven\", \"Classical\").\n.decl Answer()\nAnswer() :- !Likes(\"Beethoven\", \"EDM\").\n.output Answer"]}
{"id": 1928, "answer": true, "completion": ".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"Person\", \"Mumbai\").\n.decl Calls(Person:symbol, Plant:symbol, Name:symbol)\nCalls(\"Person\", \"Solanum melongena\", \"eggplant\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Mumbai\"), Calls(person, \"Solanum melongena\", \"eggplant\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"Person\", \"Mumbai\").\n.decl Calls(Person:symbol, Plant:symbol, Name:symbol)\nCalls(\"Person\", \"Solanum melongena\", \"eggplant\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Mumbai\"), Calls(person, \"Solanum melongena\", \"eggplant\").\n.output Answer"]}
{"id": 1929, "answer": true, "completion": ".decl Believed(Person:symbol, Opinion:symbol)\nBelieved(\"Woodrow Wilson\", \"Blacks are not equal members of society\").\n.decl Answer()\nAnswer() :- !Believed(\"Woodrow Wilson\", \"Blacks are equal members of society\").\n.output Answer", "completions": [".decl Believed(Person:symbol, Opinion:symbol)\nBelieved(\"Woodrow Wilson\", \"Blacks are not equal members of society\").\n.decl Answer()\nAnswer() :- !Believed(\"Woodrow Wilson\", \"Blacks are equal members of society\").\n.output Answer"]}
{"id": 1930, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Krishna\", \"archery\").\n.decl Answer()\nAnswer() :- Has_skill(\"Krishna\", \"archery\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Krishna\", \"archery\").\n.decl Answer()\nAnswer() :- Has_skill(\"Krishna\", \"archery\").\n.output Answer"]}
{"id": 1931, "answer": false, "completion": ".decl Has_body_weight(Animal:symbol, Body_weight:float)\nHas_body_weight(\"snow leopard\", 30).\n.decl Eats_n_times_body_weight(Animal:symbol, N_times:float)\nEats_n_times_body_weight(\"snow leopard\", 2).\n.decl Answer()\nAnswer() :- Has_body_weight(\"snow leopard\", body_weight), Eats_n_times_body_weight(\"snow leopard\", n_times), body_weight * n_times > 0.\n.output Answer", "completions": [".decl Has_body_weight(Animal:symbol, Body_weight:float)\nHas_body_weight(\"snow leopard\", 30).\n.decl Eats_n_times_body_weight(Animal:symbol, N_times:float)\nEats_n_times_body_weight(\"snow leopard\", 2).\n.decl Answer()\nAnswer() :- Has_body_weight(\"snow leopard\", body_weight), Eats_n_times_body_weight(\"snow leopard\", n_times), body_weight * n_times > 0.\n.output Answer"]}
{"id": 1932, "answer": true, "completion": ".decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"Charla Nash\", \"anxious\").\n.decl Near_animal(Person:symbol, Animal:symbol)\nNear_animal(\"Charla Nash\", \"gorilla\").\n.decl Answer()\nAnswer() :- Has_emotion(\"Charla Nash\", \"anxious\"), Near_animal(\"Charla Nash\", \"gorilla\").\n.output Answer", "completions": [".decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"Charla Nash\", \"anxious\").\n.decl Near_animal(Person:symbol, Animal:symbol)\nNear_animal(\"Charla Nash\", \"gorilla\").\n.decl Answer()\nAnswer() :- Has_emotion(\"Charla Nash\", \"anxious\"), Near_animal(\"Charla Nash\", \"gorilla\").\n.output Answer"]}
{"id": 1933, "answer": true, "completion": ".decl Needs_n_hands(Activity:symbol, N_hands:float)\nNeeds_n_hands(\"guitar playing\", 2).\n.decl Answer()\nAnswer() :- Needs_n_hands(\"guitar playing\", n_hands), n_hands = 2.\n.output Answer", "completions": [".decl Needs_n_hands(Activity:symbol, N_hands:float)\nNeeds_n_hands(\"guitar playing\", 2).\n.decl Answer()\nAnswer() :- Needs_n_hands(\"guitar playing\", n_hands), n_hands = 2.\n.output Answer"]}
{"id": 1934, "answer": false, "completion": ".decl Acted_in(Actor:symbol, Movie:symbol, Year:float)\nActed_in(\"Al Pacino\", \"The Godfather\", 1972).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"World War II\", 6).\n.decl Answer()\nAnswer() :- Acted_in(\"Al Pacino\", movie, year), Last_n_years(\"World War II\", n_years), year > (1945 - n_years).\n.output Answer", "completions": [".decl Acted_in(Actor:symbol, Movie:symbol, Year:float)\nActed_in(\"Al Pacino\", \"The Godfather\", 1972).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"World War II\", 6).\n.decl Answer()\nAnswer() :- Acted_in(\"Al Pacino\", movie, year), Last_n_years(\"World War II\", n_years), year > (1945 - n_years).\n.output Answer"]}
{"id": 1935, "answer": true, "completion": ".decl Has_n_ex_wives(Person:symbol, N_ex_wives:float)\nHas_n_ex_wives(\"James Brown\", 4).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"doubles game of tennis\", 4).\n.decl Answer()\nAnswer() :- Has_n_ex_wives(\"James Brown\", n_ex_wives), Has_n_players(\"doubles game of tennis\", n_players), n_ex_wives >= n_players.\n.output Answer", "completions": [".decl Has_n_ex_wives(Person:symbol, N_ex_wives:float)\nHas_n_ex_wives(\"James Brown\", 4).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"doubles game of tennis\", 4).\n.decl Answer()\nAnswer() :- Has_n_ex_wives(\"James Brown\", n_ex_wives), Has_n_players(\"doubles game of tennis\", n_players), n_ex_wives >= n_players.\n.output Answer"]}
{"id": 1936, "answer": false, "completion": ".decl Uses(Person:symbol, Tool:symbol)\nUses(\"Robert De Niro\", \"camera\").\n.decl Answer()\nAnswer() :- !Uses(\"Robert De Niro\", \"microscope\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Tool:symbol)\nUses(\"Robert De Niro\", \"camera\").\n.decl Answer()\nAnswer() :- !Uses(\"Robert De Niro\", \"microscope\").\n.output Answer"]}
{"id": 1937, "answer": true, "completion": ".decl Believed_in(Person:symbol, N_believed:float)\nBelieved_in(\"Imam Reza Shah\", 12).\nBelieved_in(\"Jesus\", 12).\n.decl Answer()\nAnswer() :- Believed_in(\"Imam Reza Shah\", n_believed1), Believed_in(\"Jesus\", n_believed2), n_believed1 > n_believed2.\n.output Answer", "completions": [".decl Believed_in(Person:symbol, N_believed:float)\nBelieved_in(\"Imam Reza Shah\", 12).\nBelieved_in(\"Jesus\", 12).\n.decl Answer()\nAnswer() :- Believed_in(\"Imam Reza Shah\", n_believed1), Believed_in(\"Jesus\", n_believed2), n_believed1 > n_believed2.\n.output Answer"]}
{"id": 1938, "answer": true, "completion": ".decl Inhibits(Substance:symbol, Process:symbol)\nInhibits(\"chlorine\", \"photosynthesis\").\n.decl Answer()\nAnswer() :- Inhibits(\"chlorine\", \"photosynthesis\").\n.output Answer", "completions": [".decl Inhibits(Substance:symbol, Process:symbol)\nInhibits(\"chlorine\", \"photosynthesis\").\n.decl Answer()\nAnswer() :- Inhibits(\"chlorine\", \"photosynthesis\").\n.output Answer"]}
{"id": 1939, "answer": false, "completion": ".decl Popular_in_location(Activity:symbol, Location:symbol)\nPopular_in_location(\"surfing\", \"Hawaii\").\nPopular_in_location(\"surfing\", \"California\").\n.decl Answer()\nAnswer() :- Popular_in_location(\"surfing\", \"Des Moines, Iowa\"), ! Popular_in_location(\"surfing\", \"Des Moines, Iowa\").\n.output Answer", "completions": [".decl Popular_in_location(Activity:symbol, Location:symbol)\nPopular_in_location(\"surfing\", \"Hawaii\").\nPopular_in_location(\"surfing\", \"California\").\n.decl Answer()\nAnswer() :- Popular_in_location(\"surfing\", \"Des Moines, Iowa\"), ! Popular_in_location(\"surfing\", \"Des Moines, Iowa\").\n.output Answer"]}
{"id": 1940, "answer": true, "completion": ".decl Wins(Person_A:symbol, Person_B:symbol)\nWins(\"Sugar Ray Robinson\", \"Canelo Alvarez\").\n.decl Answer()\nAnswer() :- Wins(\"Sugar Ray Robinson\", \"Canelo Alvarez\").\n.output Answer", "completions": [".decl Wins(Person_A:symbol, Person_B:symbol)\nWins(\"Sugar Ray Robinson\", \"Canelo Alvarez\").\n.decl Answer()\nAnswer() :- Wins(\"Sugar Ray Robinson\", \"Canelo Alvarez\").\n.output Answer"]}
{"id": 1941, "answer": true, "completion": ".decl Has_average_temperature(Location:symbol, Temperature:float)\nHas_average_temperature(\"Antarctic Peninsula\", -10).\n.decl Answer()\nAnswer() :- Has_average_temperature(\"Antarctic Peninsula\", temperature), 75 > temperature.\n.output Answer", "completions": [".decl Has_average_temperature(Location:symbol, Temperature:float)\nHas_average_temperature(\"Antarctic Peninsula\", -10).\n.decl Answer()\nAnswer() :- Has_average_temperature(\"Antarctic Peninsula\", temperature), 75 > temperature.\n.output Answer"]}
{"id": 1942, "answer": true, "completion": ".decl Has_beliefs(Person:symbol, Beliefs:symbol)\nHas_beliefs(\"Richard Dawkins\", \"atheism\").\n.decl Accepts(Beliefs:symbol, Offering:symbol)\nAccepts(\"atheism\", \"Last rites\").\n.decl Answer()\nAnswer() :- Has_beliefs(\"Richard Dawkins\", beliefs), !Accepts(beliefs, \"Last rites\").\n.output Answer", "completions": [".decl Has_beliefs(Person:symbol, Beliefs:symbol)\nHas_beliefs(\"Richard Dawkins\", \"atheism\").\n.decl Accepts(Beliefs:symbol, Offering:symbol)\nAccepts(\"atheism\", \"Last rites\").\n.decl Answer()\nAnswer() :- Has_beliefs(\"Richard Dawkins\", beliefs), !Accepts(beliefs, \"Last rites\").\n.output Answer"]}
{"id": 1943, "answer": true, "completion": ".decl Graduates_in_year(Class:symbol, Year:float)\nGraduates_in_year(\"high school class of 2010\", 2010).\n.decl Served_as_president(Person:symbol, Start_year:float, End_year:float)\nServed_as_president(\"Richard Nixon\", 1969, 1974).\n.decl Answer()\nAnswer() :- Graduates_in_year(\"high school class of 2010\", year1), Served_as_president(\"Richard Nixon\", year2, year3), year1 >= year2, year1 <= year3.\n.output Answer", "completions": [".decl Graduates_in_year(Class:symbol, Year:float)\nGraduates_in_year(\"high school class of 2010\", 2010).\n.decl Served_as_president(Person:symbol, Start_year:float, End_year:float)\nServed_as_president(\"Richard Nixon\", 1969, 1974).\n.decl Answer()\nAnswer() :- Graduates_in_year(\"high school class of 2010\", year1), Served_as_president(\"Richard Nixon\", year2, year3), year1 >= year2, year1 <= year3.\n.output Answer"]}
{"id": 1944, "answer": true, "completion": ".decl Has_name(Character:symbol, Name:symbol)\nHas_name(\"Disney Zorro\", \"Zorro\").\nHas_name(\"Zorro\", \"Zorro\").\n.decl Answer()\nAnswer() :- Has_name(character1, \"Zorro\"), Has_name(character2, \"Zorro\"), character1 != character2.\n.output Answer", "completions": [".decl Has_name(Character:symbol, Name:symbol)\nHas_name(\"Disney Zorro\", \"Zorro\").\nHas_name(\"Zorro\", \"Zorro\").\n.decl Answer()\nAnswer() :- Has_name(character1, \"Zorro\"), Has_name(character2, \"Zorro\"), character1 != character2.\n.output Answer"]}
{"id": 1945, "answer": true, "completion": ".decl Has_profitability(Book:symbol, Profitability:float)\nHas_profitability(\"The Hobbit\", 10).\nHas_profitability(\"Constitution of the United States\", 5).\n.decl Answer()\nAnswer() :- Has_profitability(\"The Hobbit\", profitability1), Has_profitability(\"Constitution of the United States\", profitability2), profitability1 > profitability2.\n.output Answer", "completions": [".decl Has_profitability(Book:symbol, Profitability:float)\nHas_profitability(\"The Hobbit\", 10).\nHas_profitability(\"Constitution of the United States\", 5).\n.decl Answer()\nAnswer() :- Has_profitability(\"The Hobbit\", profitability1), Has_profitability(\"Constitution of the United States\", profitability2), profitability1 > profitability2.\n.output Answer"]}
{"id": 1946, "answer": true, "completion": ".decl Acted_in(Actor:symbol, Show:symbol)\nActed_in(\"Lucy Lawless\", \"Xena: Warrior Princess\").\nActed_in(\"Lucy Lawless\", \"Spartacus: Blood and Sand\").\nActed_in(\"Renee O'Connor\", \"Xena: Warrior Princess\").\nActed_in(\"Renee O'Connor\", \"My Gal Sunday\").\n.decl Answer()\nAnswer() :- Acted_in(actor, \"Xena: Warrior Princess\"), Acted_in(actor, show2), show2 != \"Xena: Warrior Princess\".\n.output Answer", "completions": [".decl Acted_in(Actor:symbol, Show:symbol)\nActed_in(\"Lucy Lawless\", \"Xena: Warrior Princess\").\nActed_in(\"Lucy Lawless\", \"Spartacus: Blood and Sand\").\nActed_in(\"Renee O'Connor\", \"Xena: Warrior Princess\").\nActed_in(\"Renee O'Connor\", \"My Gal Sunday\").\n.decl Answer()\nAnswer() :- Acted_in(actor, \"Xena: Warrior Princess\"), Acted_in(actor, show2), show2 != \"Xena: Warrior Princess\".\n.output Answer"]}
{"id": 1947, "answer": true, "completion": ".decl Can_do(Animal:symbol, Action:symbol)\nCan_do(\"crane\", \"fly\").\n.decl Answer()\nAnswer() :- !Can_do(\"crane\", \"slamdunk\").\n.output Answer", "completions": [".decl Can_do(Animal:symbol, Action:symbol)\nCan_do(\"crane\", \"fly\").\n.decl Answer()\nAnswer() :- !Can_do(\"crane\", \"slamdunk\").\n.output Answer"]}
{"id": 1948, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Food:symbol)\nEats(\"black widow woman\", \"insects\").\nEats(\"black widow woman\", \"peaches\").\n.decl Answer()\nAnswer() :- Eats(\"black widow woman\", \"peaches\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Food:symbol)\nEats(\"black widow woman\", \"insects\").\nEats(\"black widow woman\", \"peaches\").\n.decl Answer()\nAnswer() :- Eats(\"black widow woman\", \"peaches\").\n.output Answer"]}
{"id": 1949, "answer": false, "completion": ".decl Has_symptom(Illness:symbol, Symptom:symbol)\nHas_symptom(\"Anorexia Nervosa\", \"red legs\").\n.decl Indicates_failing_health(Symptom:symbol)\nIndicates_failing_health(\"red legs\").\n.decl Answer()\nAnswer() :- Has_symptom(\"Anorexia Nervosa\", symptom), Indicates_failing_health(symptom).\n.output Answer", "completions": [".decl Has_symptom(Illness:symbol, Symptom:symbol)\nHas_symptom(\"Anorexia Nervosa\", \"red legs\").\n.decl Indicates_failing_health(Symptom:symbol)\nIndicates_failing_health(\"red legs\").\n.decl Answer()\nAnswer() :- Has_symptom(\"Anorexia Nervosa\", symptom), Indicates_failing_health(symptom).\n.output Answer"]}
{"id": 1950, "answer": true, "completion": ".decl Is_good_guest(Guest:symbol, Audience:symbol)\nIs_good_guest(\"Nine Inch Nails\", \"adults\").\n.decl Takes_test(Audience:symbol, Test:symbol)\nTakes_test(\"students in earliest grade\", \"Iowa tests\").\n.decl Answer()\nAnswer() :- Is_good_guest(\"Nine Inch Nails\", audience), Takes_test(audience, \"Iowa tests\"), ! Takes_test(\"students in earliest grade\", \"Iowa tests\").\n.output Answer", "completions": [".decl Is_good_guest(Guest:symbol, Audience:symbol)\nIs_good_guest(\"Nine Inch Nails\", \"adults\").\n.decl Takes_test(Audience:symbol, Test:symbol)\nTakes_test(\"students in earliest grade\", \"Iowa tests\").\n.decl Answer()\nAnswer() :- Is_good_guest(\"Nine Inch Nails\", audience), Takes_test(audience, \"Iowa tests\"), ! Takes_test(\"students in earliest grade\", \"Iowa tests\").\n.output Answer"]}
{"id": 1951, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Nike shoebox\", 0.1).\nHas_volume(\"swan\", 0.2).\n.decl Answer()\nAnswer() :- Has_volume(\"Nike shoebox\", volume1), Has_volume(\"swan\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Nike shoebox\", 0.1).\nHas_volume(\"swan\", 0.2).\n.decl Answer()\nAnswer() :- Has_volume(\"Nike shoebox\", volume1), Has_volume(\"swan\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 1952, "answer": true, "completion": ".decl Has_temperature(Animal:symbol, Temperature:symbol)\nHas_temperature(\"chinchilla\", \"warm-blooded\").\n.decl Answer()\nAnswer() :- Has_temperature(\"chinchilla\", temperature), temperature != \"cold-blooded\".\n.output Answer", "completions": [".decl Has_temperature(Animal:symbol, Temperature:symbol)\nHas_temperature(\"chinchilla\", \"warm-blooded\").\n.decl Answer()\nAnswer() :- Has_temperature(\"chinchilla\", temperature), temperature != \"cold-blooded\".\n.output Answer"]}
{"id": 1953, "answer": false, "completion": ".decl Prefers(Person:symbol, Food_A:symbol, Food_B:symbol)\nPrefers(\"body builder\", \"elk burger\", \"beef burger\").\n.decl Answer()\nAnswer() :- Prefers(\"body builder\", \"elk burger\", \"beef burger\").\n.output Answer", "completions": [".decl Prefers(Person:symbol, Food_A:symbol, Food_B:symbol)\nPrefers(\"body builder\", \"elk burger\", \"beef burger\").\n.decl Answer()\nAnswer() :- Prefers(\"body builder\", \"elk burger\", \"beef burger\").\n.output Answer"]}
{"id": 1954, "answer": false, "completion": ".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"2020 Mitsubishi Outlander\", 5).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Aerosmith\", 5).\n.decl Answer()\nAnswer() :- Has_capacity(\"2020 Mitsubishi Outlander\", capacity), Has_n_members(\"Aerosmith\", n_members), capacity >= n_members.\n.output Answer", "completions": [".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"2020 Mitsubishi Outlander\", 5).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Aerosmith\", 5).\n.decl Answer()\nAnswer() :- Has_capacity(\"2020 Mitsubishi Outlander\", capacity), Has_n_members(\"Aerosmith\", n_members), capacity >= n_members.\n.output Answer"]}
{"id": 1955, "answer": true, "completion": ".decl Represented_on(Organization:symbol, Place:symbol)\nRepresented_on(\"Freemasonry\", \"Earth\").\n.decl Answer()\nAnswer() :- Represented_on(\"Freemasonry\", \"Moon\"), !Represented_on(\"Freemasonry\", \"Earth\").\n.output Answer", "completions": [".decl Represented_on(Organization:symbol, Place:symbol)\nRepresented_on(\"Freemasonry\", \"Earth\").\n.decl Answer()\nAnswer() :- Represented_on(\"Freemasonry\", \"Moon\"), !Represented_on(\"Freemasonry\", \"Earth\").\n.output Answer"]}
{"id": 1956, "answer": false, "completion": ".decl Can_be_used_for(Object:symbol, Purpose:symbol)\nCan_be_used_for(\"Sphynx cat\", \"companionship\").\n.decl Answer()\nAnswer() :- !Can_be_used_for(\"Sphynx cat\", \"wool\").\n.output Answer", "completions": [".decl Can_be_used_for(Object:symbol, Purpose:symbol)\nCan_be_used_for(\"Sphynx cat\", \"companionship\").\n.decl Answer()\nAnswer() :- !Can_be_used_for(\"Sphynx cat\", \"wool\").\n.output Answer"]}
{"id": 1957, "answer": true, "completion": ".decl Needs(Animal_A:symbol, Animal_B:symbol)\nNeeds(\"stork\", \"insects\").\nNeeds(\"stork\", \"fish\").\nNeeds(\"stork\", \"frogs\").\n.decl Answer()\nAnswer() :- !Needs(\"stork\", \"golden toads\").\n.output Answer", "completions": [".decl Needs(Animal_A:symbol, Animal_B:symbol)\nNeeds(\"stork\", \"insects\").\nNeeds(\"stork\", \"fish\").\nNeeds(\"stork\", \"frogs\").\n.decl Answer()\nAnswer() :- !Needs(\"stork\", \"golden toads\").\n.output Answer"]}
{"id": 1958, "answer": true, "completion": ".decl Has_insurance(Person:symbol, Insurance:symbol)\nHas_insurance(\"John\", \"insured\").\nHas_insurance(\"Jane\", \"uninsured\").\n.decl Declines_CT_scan(Person:symbol, Likelihood:float)\nDeclines_CT_scan(\"John\", 0.2).\nDeclines_CT_scan(\"Jane\", 0.5).\n.decl Answer()\nAnswer() :- Has_insurance(person1, \"uninsured\"), Has_insurance(person2, \"insured\"), Declines_CT_scan(person1, likelihood1), Declines_CT_scan(person2, likelihood2), likelihood1 > likelihood2.\n.output Answer", "completions": [".decl Has_insurance(Person:symbol, Insurance:symbol)\nHas_insurance(\"John\", \"insured\").\nHas_insurance(\"Jane\", \"uninsured\").\n.decl Declines_CT_scan(Person:symbol, Likelihood:float)\nDeclines_CT_scan(\"John\", 0.2).\nDeclines_CT_scan(\"Jane\", 0.5).\n.decl Answer()\nAnswer() :- Has_insurance(person1, \"uninsured\"), Has_insurance(person2, \"insured\"), Declines_CT_scan(person1, likelihood1), Declines_CT_scan(person2, likelihood2), likelihood1 > likelihood2.\n.output Answer"]}
{"id": 1959, "answer": true, "completion": ".decl Has_n_legs(Animal:symbol, N_legs:float)\nHas_n_legs(\"spider wasps\", 6).\n.decl Answer()\nAnswer() :- Has_n_legs(\"spider wasps\", n_legs), n_legs != 8.\n.output Answer", "completions": [".decl Has_n_legs(Animal:symbol, N_legs:float)\nHas_n_legs(\"spider wasps\", 6).\n.decl Answer()\nAnswer() :- Has_n_legs(\"spider wasps\", n_legs), n_legs != 8.\n.output Answer"]}
{"id": 1960, "answer": true, "completion": ".decl Causes_death(Event:symbol)\nCauses_death(\"brake failure\").\n.decl Answer()\nAnswer() :- Causes_death(event).\n.output Answer", "completions": [".decl Causes_death(Event:symbol)\nCauses_death(\"brake failure\").\n.decl Answer()\nAnswer() :- Causes_death(event).\n.output Answer"]}
{"id": 1961, "answer": true, "completion": ".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"Muslim\", \"halal\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"McRib sandwich\", \"pork\").\n.decl Answer()\nAnswer() :- Follows_diet(person, \"halal\"), !Contains(\"McRib sandwich\", ingredient).\n.output Answer", "completions": [".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"Muslim\", \"halal\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"McRib sandwich\", \"pork\").\n.decl Answer()\nAnswer() :- Follows_diet(person, \"halal\"), !Contains(\"McRib sandwich\", ingredient).\n.output Answer"]}
{"id": 1962, "answer": true, "completion": ".decl Has_race(Actor:symbol, Race:symbol)\nHas_race(\"mall Santa Claus actor\", \"white\").\n.decl Answer()\nAnswer() :- Has_race(\"mall Santa Claus actor\", \"white\").\n.output Answer", "completions": [".decl Has_race(Actor:symbol, Race:symbol)\nHas_race(\"mall Santa Claus actor\", \"white\").\n.decl Answer()\nAnswer() :- Has_race(\"mall Santa Claus actor\", \"white\").\n.output Answer"]}
{"id": 1963, "answer": true, "completion": ".decl Knows_language(Person:symbol, Language:symbol)\nKnows_language(\"person\", \"English\").\n.decl Uses_language(Text:symbol, Language:symbol)\nUses_language(\"Kanji\", \"Japanese\").\n.decl Answer()\nAnswer() :- Knows_language(\"person\", language1), Uses_language(\"Kanji\", language2), language1 != language2.\n.output Answer", "completions": [".decl Knows_language(Person:symbol, Language:symbol)\nKnows_language(\"person\", \"English\").\n.decl Uses_language(Text:symbol, Language:symbol)\nUses_language(\"Kanji\", \"Japanese\").\n.decl Answer()\nAnswer() :- Knows_language(\"person\", language1), Uses_language(\"Kanji\", language2), language1 != language2.\n.output Answer"]}
{"id": 1964, "answer": true, "completion": ".decl Owns(Company:symbol, Location:symbol)\nOwns(\"Aldi\", \"United States\").\n.decl Answer()\nAnswer() :- Owns(company1, \"United States\"), Owns(company2, \"United States\"), company1 = company2.\n.output Answer", "completions": [".decl Owns(Company:symbol, Location:symbol)\nOwns(\"Aldi\", \"United States\").\n.decl Answer()\nAnswer() :- Owns(company1, \"United States\"), Owns(company2, \"United States\"), company1 = company2.\n.output Answer"]}
{"id": 1965, "answer": false, "completion": ".decl Has_significance(Place:symbol, Significance:symbol)\nHas_significance(\"Red Sea\", \"biblical\").\n.decl Answer()\nAnswer() :- Has_significance(\"Red Sea\", \"biblical\").\n.output Answer", "completions": [".decl Has_significance(Place:symbol, Significance:symbol)\nHas_significance(\"Red Sea\", \"biblical\").\n.decl Answer()\nAnswer() :- Has_significance(\"Red Sea\", \"biblical\").\n.output Answer"]}
{"id": 1966, "answer": true, "completion": ".decl Has_n_items(Set:symbol, N_items:float)\nHas_n_items(\"octuplets\", 8).\n.decl Answer()\nAnswer() :- Has_n_items(\"octuplets\", n_items), n_items > 4.\n.output Answer", "completions": [".decl Has_n_items(Set:symbol, N_items:float)\nHas_n_items(\"octuplets\", 8).\n.decl Answer()\nAnswer() :- Has_n_items(\"octuplets\", n_items), n_items > 4.\n.output Answer"]}
{"id": 1967, "answer": false, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Pope John Paul I's reign\", 33).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"Phileas Fogg's around the world\", 80).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"Phileas Fogg's around the world\", n_days1), Last_n_days(\"Pope John Paul I's reign\", n_days2), n_days1 > n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Pope John Paul I's reign\", 33).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"Phileas Fogg's around the world\", 80).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"Phileas Fogg's around the world\", n_days1), Last_n_days(\"Pope John Paul I's reign\", n_days2), n_days1 > n_days2.\n.output Answer"]}
{"id": 1968, "answer": true, "completion": ".decl Causes(Event:symbol, Result:symbol)\nCauses(\"lettuce\", \"diarrhea\").\nCauses(\"diarrhea\", \"spontaneous abortion\").\n.decl Answer()\nAnswer() :- Causes(\"lettuce\", result), Causes(result, \"spontaneous abortion\").\n.output Answer", "completions": [".decl Causes(Event:symbol, Result:symbol)\nCauses(\"lettuce\", \"diarrhea\").\nCauses(\"diarrhea\", \"spontaneous abortion\").\n.decl Answer()\nAnswer() :- Causes(\"lettuce\", result), Causes(result, \"spontaneous abortion\").\n.output Answer"]}
{"id": 1969, "answer": true, "completion": ".decl Requires_power(Job:symbol, Power_outage:symbol)\nRequires_power(\"software engineer\", \"no\").\n.decl Answer()\nAnswer() :- Requires_power(\"software engineer\", \"no\").\n.output Answer", "completions": [".decl Requires_power(Job:symbol, Power_outage:symbol)\nRequires_power(\"software engineer\", \"no\").\n.decl Answer()\nAnswer() :- Requires_power(\"software engineer\", \"no\").\n.output Answer"]}
{"id": 1970, "answer": true, "completion": ".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"human\", \"hyena\").\n.decl Welcome_at_festival(Person:symbol, Festival:symbol)\nWelcome_at_festival(\"vegan\", \"vegan festival\").\n.decl Answer()\nAnswer() :- Follows_diet(\"human\", \"hyena\"), !Welcome_at_festival(\"human\", \"vegan festival\").\n.output Answer", "completions": [".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"human\", \"hyena\").\n.decl Welcome_at_festival(Person:symbol, Festival:symbol)\nWelcome_at_festival(\"vegan\", \"vegan festival\").\n.decl Answer()\nAnswer() :- Follows_diet(\"human\", \"hyena\"), !Welcome_at_festival(\"human\", \"vegan festival\").\n.output Answer"]}
{"id": 1971, "answer": true, "completion": ".decl Is_hazardous(Place:symbol, Animal:symbol)\nIs_hazardous(\"Sea World\", \"leopard seal\").\n.decl Answer()\nAnswer() :- Is_hazardous(\"Sea World\", \"leopard seal\").\n.output Answer", "completions": [".decl Is_hazardous(Place:symbol, Animal:symbol)\nIs_hazardous(\"Sea World\", \"leopard seal\").\n.decl Answer()\nAnswer() :- Is_hazardous(\"Sea World\", \"leopard seal\").\n.output Answer"]}
{"id": 1972, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Gray Whale\", 15).\nHas_length(\"above ground pool\", 10).\n.decl Answer()\nAnswer() :- Has_length(\"Gray Whale\", length1), Has_length(\"above ground pool\", length2), length1 > length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Gray Whale\", 15).\nHas_length(\"above ground pool\", 10).\n.decl Answer()\nAnswer() :- Has_length(\"Gray Whale\", length1), Has_length(\"above ground pool\", length2), length1 > length2.\n.output Answer"]}
{"id": 1973, "answer": false, "completion": ".decl Practices(Person:symbol, Activity:symbol)\nPractices(\"Julia Roberts\", \"acting\").\n.decl Answer()\nAnswer() :- !Practices(\"Julia Roberts\", \"blast beats\").\n.output Answer", "completions": [".decl Practices(Person:symbol, Activity:symbol)\nPractices(\"Julia Roberts\", \"acting\").\n.decl Answer()\nAnswer() :- !Practices(\"Julia Roberts\", \"blast beats\").\n.output Answer"]}
{"id": 1974, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"American Black Bear cub\", 0.5).\nHas_size(\"king size bed\", 6).\n.decl Answer()\nAnswer() :- Has_size(\"American Black Bear cub\", size1), Has_size(\"king size bed\", size2), size1 * 2 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"American Black Bear cub\", 0.5).\nHas_size(\"king size bed\", 6).\n.decl Answer()\nAnswer() :- Has_size(\"American Black Bear cub\", size1), Has_size(\"king size bed\", size2), size1 * 2 <= size2.\n.output Answer"]}
{"id": 1975, "answer": false, "completion": ".decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"Mona Lisa\", \"restaurant\").\n.decl Is_reachable_by(Location_A:symbol, Transportation:symbol)\nIs_reachable_by(\"restaurant\", \"foot\").\n.decl Answer()\nAnswer() :- Is_near(\"Mona Lisa\", location), Is_reachable_by(location, \"foot\").\n.output Answer", "completions": [".decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"Mona Lisa\", \"restaurant\").\n.decl Is_reachable_by(Location_A:symbol, Transportation:symbol)\nIs_reachable_by(\"restaurant\", \"foot\").\n.decl Answer()\nAnswer() :- Is_near(\"Mona Lisa\", location), Is_reachable_by(location, \"foot\").\n.output Answer"]}
{"id": 1976, "answer": true, "completion": ".decl Is_good_in(Ingredient:symbol, Drink:symbol)\nIs_good_in(\"kaffir lime\", \"Mojito\").\nIs_good_in(\"vodka\", \"White Russian\").\nIs_good_in(\"coffee liqueur\", \"White Russian\").\n.decl Answer()\nAnswer() :- Is_good_in(\"kaffir lime\", drink), Is_good_in(\"vodka\", drink), Is_good_in(\"coffee liqueur\", drink).\n.output Answer", "completions": [".decl Is_good_in(Ingredient:symbol, Drink:symbol)\nIs_good_in(\"kaffir lime\", \"Mojito\").\nIs_good_in(\"vodka\", \"White Russian\").\nIs_good_in(\"coffee liqueur\", \"White Russian\").\n.decl Answer()\nAnswer() :- Is_good_in(\"kaffir lime\", drink), Is_good_in(\"vodka\", drink), Is_good_in(\"coffee liqueur\", drink).\n.output Answer"]}
{"id": 1977, "answer": true, "completion": ".decl Has_screen_time(Character:symbol, Screen_time:float)\nHas_screen_time(\"war doctor\", 10).\nHas_screen_time(\"successor\", 5).\n.decl Answer()\nAnswer() :- Has_screen_time(\"war doctor\", screen_time1), Has_screen_time(\"successor\", screen_time2), screen_time1 > screen_time2.\n.output Answer", "completions": [".decl Has_screen_time(Character:symbol, Screen_time:float)\nHas_screen_time(\"war doctor\", 10).\nHas_screen_time(\"successor\", 5).\n.decl Answer()\nAnswer() :- Has_screen_time(\"war doctor\", screen_time1), Has_screen_time(\"successor\", screen_time2), screen_time1 > screen_time2.\n.output Answer"]}
{"id": 1978, "answer": true, "completion": ".decl Inspired_by(Group_A:symbol, Group_B:symbol)\nInspired_by(\"Spice Girls\", \"Little Mix\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Spice Girls\", \"Little Mix\").\n.output Answer", "completions": [".decl Inspired_by(Group_A:symbol, Group_B:symbol)\nInspired_by(\"Spice Girls\", \"Little Mix\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Spice Girls\", \"Little Mix\").\n.output Answer"]}
{"id": 1979, "answer": true, "completion": ".decl Has_distance(City_A:symbol, City_B:symbol, Distance:float)\nHas_distance(\"Bucharest\", \"New York City\", 5400).\n.decl Has_max_distance(Animal:symbol, Max_distance:float)\nHas_max_distance(\"wandering albatross\", 10000).\n.decl Answer()\nAnswer() :- Has_distance(\"Bucharest\", \"New York City\", distance), Has_max_distance(\"wandering albatross\", max_distance), distance <= max_distance.\n.output Answer", "completions": [".decl Has_distance(City_A:symbol, City_B:symbol, Distance:float)\nHas_distance(\"Bucharest\", \"New York City\", 5400).\n.decl Has_max_distance(Animal:symbol, Max_distance:float)\nHas_max_distance(\"wandering albatross\", 10000).\n.decl Answer()\nAnswer() :- Has_distance(\"Bucharest\", \"New York City\", distance), Has_max_distance(\"wandering albatross\", max_distance), distance <= max_distance.\n.output Answer"]}
{"id": 1980, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Chuck Norris\", 1940).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"leap year\", 2024).\n.decl Answer()\nAnswer() :- Born_in_year(\"Chuck Norris\", year1), Happens_in_year(\"leap year\", year2), year2 - year1 >= 90.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Chuck Norris\", 1940).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"leap year\", 2024).\n.decl Answer()\nAnswer() :- Born_in_year(\"Chuck Norris\", year1), Happens_in_year(\"leap year\", year2), year2 - year1 >= 90.\n.output Answer"]}
{"id": 1981, "answer": false, "completion": ".decl Allowed_in(Animal:symbol, Place:symbol)\nAllowed_in(\"German Shepherd\", \"airport\").\n.decl Answer()\nAnswer() :- Allowed_in(\"German Shepherd\", \"airport\").\n.output Answer", "completions": [".decl Allowed_in(Animal:symbol, Place:symbol)\nAllowed_in(\"German Shepherd\", \"airport\").\n.decl Answer()\nAnswer() :- Allowed_in(\"German Shepherd\", \"airport\").\n.output Answer"]}
{"id": 1982, "answer": true, "completion": ".decl Is_part_of(Part:symbol, System:symbol)\nIs_part_of(\"meter\", \"metric system\").\n.decl Answer()\nAnswer() :- Is_part_of(\"foot\", \"metric system\").\n.output Answer", "completions": [".decl Is_part_of(Part:symbol, System:symbol)\nIs_part_of(\"meter\", \"metric system\").\n.decl Answer()\nAnswer() :- Is_part_of(\"foot\", \"metric system\").\n.output Answer"]}
{"id": 1983, "answer": true, "completion": ".decl Has_type(Channel:symbol, Type:symbol)\nHas_type(\"Do It Yourself\", \"realistic\").\n.decl Answer()\nAnswer() :- Has_type(\"Do It Yourself\", \"realistic\").\n.output Answer", "completions": [".decl Has_type(Channel:symbol, Type:symbol)\nHas_type(\"Do It Yourself\", \"realistic\").\n.decl Answer()\nAnswer() :- Has_type(\"Do It Yourself\", \"realistic\").\n.output Answer"]}
{"id": 1984, "answer": true, "completion": ".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"vegemite sandwich\", \"bread\").\nContains(\"vegemite sandwich\", \"vegemite\").\n.decl Answer()\nAnswer() :- !Contains(\"vegemite sandwich\", \"Atlantic cod\").\n.output Answer", "completions": [".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"vegemite sandwich\", \"bread\").\nContains(\"vegemite sandwich\", \"vegemite\").\n.decl Answer()\nAnswer() :- !Contains(\"vegemite sandwich\", \"Atlantic cod\").\n.output Answer"]}
{"id": 1985, "answer": true, "completion": ".decl Is_helpful(Object:symbol, Situation:symbol)\nIs_helpful(\"costumes with robes and pointy hats\", \"Macbeth\").\n.decl Answer()\nAnswer() :- Is_helpful(\"costumes with robes and pointy hats\", \"Macbeth\").\n.output Answer", "completions": [".decl Is_helpful(Object:symbol, Situation:symbol)\nIs_helpful(\"costumes with robes and pointy hats\", \"Macbeth\").\n.decl Answer()\nAnswer() :- Is_helpful(\"costumes with robes and pointy hats\", \"Macbeth\").\n.output Answer"]}
{"id": 1986, "answer": false, "completion": ".decl Pursues(Person:symbol, Education:symbol)\nPursues(\"Emma Stone\", \"higher education\").\n.decl Answer()\nAnswer() :- Pursues(\"Emma Stone\", \"higher education\").\n.output Answer", "completions": [".decl Pursues(Person:symbol, Education:symbol)\nPursues(\"Emma Stone\", \"higher education\").\n.decl Answer()\nAnswer() :- Pursues(\"Emma Stone\", \"higher education\").\n.output Answer"]}
{"id": 1987, "answer": false, "completion": ".decl Sells(Shop:symbol, Item:symbol)\nSells(\"smoke shop\", \"Bob Marley poster\").\n.decl Answer()\nAnswer() :- Sells(shop, \"Bob Marley poster\").\n.output Answer", "completions": [".decl Sells(Shop:symbol, Item:symbol)\nSells(\"smoke shop\", \"Bob Marley poster\").\n.decl Answer()\nAnswer() :- Sells(shop, \"Bob Marley poster\").\n.output Answer"]}
{"id": 1988, "answer": true, "completion": ".decl Can_tell_time(Person:symbol, Clock:symbol)\nCan_tell_time(\"sighted person\", \"Big Ben\").\n.decl Answer()\nAnswer() :- !Can_tell_time(\"blind person\", \"Big Ben\").\n.output Answer", "completions": [".decl Can_tell_time(Person:symbol, Clock:symbol)\nCan_tell_time(\"sighted person\", \"Big Ben\").\n.decl Answer()\nAnswer() :- !Can_tell_time(\"blind person\", \"Big Ben\").\n.output Answer"]}
{"id": 1989, "answer": false, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Tiger Stadium\", 80000).\n.decl Has_n_unemployed(Event:symbol, N_unemployed:float)\nHas_n_unemployed(\"1933 Great Depression\", 12000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tiger Stadium\", capacity), Has_n_unemployed(\"1933 Great Depression\", n_unemployed), n_unemployed <= capacity.\n.output Answer", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Tiger Stadium\", 80000).\n.decl Has_n_unemployed(Event:symbol, N_unemployed:float)\nHas_n_unemployed(\"1933 Great Depression\", 12000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tiger Stadium\", capacity), Has_n_unemployed(\"1933 Great Depression\", n_unemployed), n_unemployed <= capacity.\n.output Answer"]}
{"id": 1990, "answer": false, "completion": ".decl Writes(Person:symbol, Genre:symbol)\nWrites(\"Adam Mickiewicz\", \"sonnets\").\n.decl Focuses_on(Genre:symbol, Topic:symbol)\nFocuses_on(\"sonnets\", \"love\").\nFocuses_on(\"sonnets\", \"religion\").\n.decl Nationality(Person:symbol, Nationality:symbol)\nNationality(\"Adam Mickiewicz\", \"Polish\").\n.decl Religion(Topic:symbol, Religion:symbol)\nReligion(\"religion\", \"Islam\").\n.decl Answer()\nAnswer() :- Nationality(\"Adam Mickiewicz\", \"Polish\"), Writes(\"Adam Mickiewicz\", genre), Focuses_on(genre, topic), Religion(topic, \"Islam\").\n.output Answer", "completions": [".decl Writes(Person:symbol, Genre:symbol)\nWrites(\"Adam Mickiewicz\", \"sonnets\").\n.decl Focuses_on(Genre:symbol, Topic:symbol)\nFocuses_on(\"sonnets\", \"love\").\nFocuses_on(\"sonnets\", \"religion\").\n.decl Nationality(Person:symbol, Nationality:symbol)\nNationality(\"Adam Mickiewicz\", \"Polish\").\n.decl Religion(Topic:symbol, Religion:symbol)\nReligion(\"religion\", \"Islam\").\n.decl Answer()\nAnswer() :- Nationality(\"Adam Mickiewicz\", \"Polish\"), Writes(\"Adam Mickiewicz\", genre), Focuses_on(genre, topic), Religion(topic, \"Islam\").\n.output Answer"]}
{"id": 1991, "answer": false, "completion": ".decl Participates_in(Person:symbol, Event:symbol)\n.decl Answer()\nAnswer() :- !Participates_in(\"Barack Obama\", \"Reformation\").\n.output Answer", "completions": [".decl Participates_in(Person:symbol, Event:symbol)\n.decl Answer()\nAnswer() :- !Participates_in(\"Barack Obama\", \"Reformation\").\n.output Answer"]}
{"id": 1992, "answer": true, "completion": ".decl Is_based_on(Painting:symbol, Person:symbol)\nIs_based_on(\"Mona Lisa\", \"Lisa Gherardini\").\n.decl Answer()\nAnswer() :- Is_based_on(\"Mona Lisa\", _).\n.output Answer", "completions": [".decl Is_based_on(Painting:symbol, Person:symbol)\nIs_based_on(\"Mona Lisa\", \"Lisa Gherardini\").\n.decl Answer()\nAnswer() :- Is_based_on(\"Mona Lisa\", _).\n.output Answer"]}
{"id": 1993, "answer": true, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"model\", \"Cookout\").\n.decl Answer()\nAnswer() :- Likes(\"model\", \"Cookout\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"model\", \"Cookout\").\n.decl Answer()\nAnswer() :- Likes(\"model\", \"Cookout\").\n.output Answer"]}
{"id": 1994, "answer": true, "completion": ".decl Has_shelf_space(Library:symbol, Shelf_space:float)\nHas_shelf_space(\"Library of Alexandria\", 10).\nHas_shelf_space(\"Library of Congress\", 20).\n.decl Answer()\nAnswer() :- Has_shelf_space(\"Library of Alexandria\", shelf_space1), Has_shelf_space(\"Library of Congress\", shelf_space2), shelf_space1 < shelf_space2.\n.output Answer", "completions": [".decl Has_shelf_space(Library:symbol, Shelf_space:float)\nHas_shelf_space(\"Library of Alexandria\", 10).\nHas_shelf_space(\"Library of Congress\", 20).\n.decl Answer()\nAnswer() :- Has_shelf_space(\"Library of Alexandria\", shelf_space1), Has_shelf_space(\"Library of Congress\", shelf_space2), shelf_space1 < shelf_space2.\n.output Answer"]}
{"id": 1995, "answer": true, "completion": ".decl Has_part(Creature:symbol, Part:symbol)\nHas_part(\"human\", \"tongue\").\nHas_part(\"human\", \"head\").\n.decl Answer()\nAnswer() :- Has_part(creature, \"tongue\"), Has_part(creature, \"head\").\n.output Answer", "completions": [".decl Has_part(Creature:symbol, Part:symbol)\nHas_part(\"human\", \"tongue\").\nHas_part(\"human\", \"head\").\n.decl Answer()\nAnswer() :- Has_part(creature, \"tongue\"), Has_part(creature, \"head\").\n.output Answer"]}
{"id": 1996, "answer": false, "completion": ".decl Consumes(Person:symbol, Food:symbol)\nConsumes(\"ancient visitor to Persia\", \"crocus threads\").\n.decl Answer()\nAnswer() :- Consumes(\"ancient visitor to Persia\", \"crocus threads\").\n.output Answer", "completions": [".decl Consumes(Person:symbol, Food:symbol)\nConsumes(\"ancient visitor to Persia\", \"crocus threads\").\n.decl Answer()\nAnswer() :- Consumes(\"ancient visitor to Persia\", \"crocus threads\").\n.output Answer"]}
{"id": 1997, "answer": true, "completion": ".decl Has_side_effect(Food:symbol, Side_effect:symbol)\nHas_side_effect(\"Durian\", \"stomach unwell\").\n.decl Answer()\nAnswer() :- Has_side_effect(\"Durian\", \"stomach unwell\").\n.output Answer", "completions": [".decl Has_side_effect(Food:symbol, Side_effect:symbol)\nHas_side_effect(\"Durian\", \"stomach unwell\").\n.decl Answer()\nAnswer() :- Has_side_effect(\"Durian\", \"stomach unwell\").\n.output Answer"]}
{"id": 1998, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Hundred Years' War\", 116).\n.decl Answer()\nAnswer() :- Last_n_years(\"Hundred Years' War\", n_years), n_years != 100.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Hundred Years' War\", 116).\n.decl Answer()\nAnswer() :- Last_n_years(\"Hundred Years' War\", n_years), n_years != 100.\n.output Answer"]}
{"id": 1999, "answer": true, "completion": ".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"kale\", \"calcium\").\nHas_nutrient(\"spinach\", \"calcium\").\nHas_nutrient(\"kale\", \"vitamin K\").\nHas_nutrient(\"spinach\", \"vitamin K\").\n.decl Answer()\nAnswer() :- Has_nutrient(\"kale\", nutrient1), Has_nutrient(\"spinach\", nutrient2), nutrient1 > nutrient2.\n.output Answer", "completions": [".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"kale\", \"calcium\").\nHas_nutrient(\"spinach\", \"calcium\").\nHas_nutrient(\"kale\", \"vitamin K\").\nHas_nutrient(\"spinach\", \"vitamin K\").\n.decl Answer()\nAnswer() :- Has_nutrient(\"kale\", nutrient1), Has_nutrient(\"spinach\", nutrient2), nutrient1 > nutrient2.\n.output Answer"]}
{"id": 2000, "answer": true, "completion": ".decl Imprisoned(Person:symbol, Reason:symbol)\nImprisoned(\"Jean Valjean\", \"stealing bread\").\n.decl Answer()\nAnswer() :- Imprisoned(\"Jean Valjean\", reason), reason = \"hunger\".\n.output Answer", "completions": [".decl Imprisoned(Person:symbol, Reason:symbol)\nImprisoned(\"Jean Valjean\", \"stealing bread\").\n.decl Answer()\nAnswer() :- Imprisoned(\"Jean Valjean\", reason), reason = \"hunger\".\n.output Answer"]}
{"id": 2001, "answer": true, "completion": ".decl Has_theme(Musical:symbol, Theme:symbol)\nHas_theme(\"The Rocky Horror Show\", \"sweet transvestite from Transexual, Transylvania\").\n.decl Is_jukebox_musical(Musical:symbol)\nIs_jukebox_musical(\"The Rocky Horror Show\").\n.decl Answer()\nAnswer() :- Has_theme(musical, \"sweet transvestite from Transexual, Transylvania\"), Is_jukebox_musical(musical).\n.output Answer", "completions": [".decl Has_theme(Musical:symbol, Theme:symbol)\nHas_theme(\"The Rocky Horror Show\", \"sweet transvestite from Transexual, Transylvania\").\n.decl Is_jukebox_musical(Musical:symbol)\nIs_jukebox_musical(\"The Rocky Horror Show\").\n.decl Answer()\nAnswer() :- Has_theme(musical, \"sweet transvestite from Transexual, Transylvania\"), Is_jukebox_musical(musical).\n.output Answer"]}
{"id": 2002, "answer": true, "completion": ".decl Belongs_to(Land:symbol, Tribe:symbol)\nBelongs_to(\"Holy Land\", \"Adamu's tribe\").\n.decl Answer()\nAnswer() :- Belongs_to(\"Holy Land\", \"Adamu's tribe\").\n.output Answer", "completions": [".decl Belongs_to(Land:symbol, Tribe:symbol)\nBelongs_to(\"Holy Land\", \"Adamu's tribe\").\n.decl Answer()\nAnswer() :- Belongs_to(\"Holy Land\", \"Adamu's tribe\").\n.output Answer"]}
{"id": 2003, "answer": true, "completion": ".decl Has_location(Place:symbol, Location:symbol)\nHas_location(\"New England\", \"USA\").\nHas_location(\"Sainsbury's\", \"UK\").\n.decl Answer()\nAnswer() :- Has_location(\"New England\", location1), Has_location(\"Sainsbury's\", location2), location1 != location2.\n.output Answer", "completions": [".decl Has_location(Place:symbol, Location:symbol)\nHas_location(\"New England\", \"USA\").\nHas_location(\"Sainsbury's\", \"UK\").\n.decl Answer()\nAnswer() :- Has_location(\"New England\", location1), Has_location(\"Sainsbury's\", location2), location1 != location2.\n.output Answer"]}
{"id": 2004, "answer": false, "completion": ".decl Does(Person:symbol, Action:symbol, Year:float)\nDoes(\"Mike Tyson\", \"bite Evander Holyfield\", 1997).\nDoes(\"McGruff\", \"take a bite out of crime\", 1997).\n.decl Answer()\nAnswer() :- Does(\"Mike Tyson\", action1, 1997), Does(\"McGruff\", action2, 1997), action1 != action2.\n.output Answer", "completions": [".decl Does(Person:symbol, Action:symbol, Year:float)\nDoes(\"Mike Tyson\", \"bite Evander Holyfield\", 1997).\nDoes(\"McGruff\", \"take a bite out of crime\", 1997).\n.decl Answer()\nAnswer() :- Does(\"Mike Tyson\", action1, 1997), Does(\"McGruff\", action2, 1997), action1 != action2.\n.output Answer"]}
{"id": 2005, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Durian\", 3).\n.decl Is_dangerous(Object:symbol, Danger:symbol)\nIs_dangerous(\"Durian\", \"yes\").\n.decl Answer()\nAnswer() :- Has_weight(\"Durian\", weight), Is_dangerous(\"Durian\", danger), weight > 0, danger = \"yes\".\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Durian\", 3).\n.decl Is_dangerous(Object:symbol, Danger:symbol)\nIs_dangerous(\"Durian\", \"yes\").\n.decl Answer()\nAnswer() :- Has_weight(\"Durian\", weight), Is_dangerous(\"Durian\", danger), weight > 0, danger = \"yes\".\n.output Answer"]}
{"id": 2006, "answer": false, "completion": ".decl Is_normal(Event:symbol)\nIs_normal(\"singing when the YMCA is mentioned\").\n.decl Answer()\nAnswer() :- Is_normal(\"singing when the YMCA is mentioned\").\n.output Answer", "completions": [".decl Is_normal(Event:symbol)\nIs_normal(\"singing when the YMCA is mentioned\").\n.decl Answer()\nAnswer() :- Is_normal(\"singing when the YMCA is mentioned\").\n.output Answer"]}
{"id": 2007, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Saltwater crocodile\", \"Australia\").\n.decl Answer()\nAnswer() :- Lives_in(\"Saltwater crocodile\", place), place != \"Memphis\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Saltwater crocodile\", \"Australia\").\n.decl Answer()\nAnswer() :- Lives_in(\"Saltwater crocodile\", place), place != \"Memphis\".\n.output Answer"]}
{"id": 2008, "answer": true, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"nails\").\nSells(\"Home Depot\", \"wood\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"nails\"), Sells(\"Home Depot\", \"wood\"), !Sells(\"Home Depot\", \"crucifixion supplies\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"nails\").\nSells(\"Home Depot\", \"wood\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"nails\"), Sells(\"Home Depot\", \"wood\"), !Sells(\"Home Depot\", \"crucifixion supplies\").\n.output Answer"]}
{"id": 2009, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Shamu\", \"San Diego County\").\n.decl Answer()\nAnswer() :- Lives_in(\"Shamu\", \"San Diego County\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Shamu\", \"San Diego County\").\n.decl Answer()\nAnswer() :- Lives_in(\"Shamu\", \"San Diego County\").\n.output Answer"]}
{"id": 2010, "answer": false, "completion": ".decl Has_move(Game:symbol, Move:symbol)\nHas_move(\"French Defence\", \"e6\").\n.decl Defends_against(Move:symbol, Checkmate:symbol)\nDefends_against(\"e6\", \"four move checkmate\").\n.decl Answer()\nAnswer() :- Has_move(\"French Defence\", move), Defends_against(move, \"four move checkmate\").\n.output Answer", "completions": [".decl Has_move(Game:symbol, Move:symbol)\nHas_move(\"French Defence\", \"e6\").\n.decl Defends_against(Move:symbol, Checkmate:symbol)\nDefends_against(\"e6\", \"four move checkmate\").\n.decl Answer()\nAnswer() :- Has_move(\"French Defence\", move), Defends_against(move, \"four move checkmate\").\n.output Answer"]}
{"id": 2011, "answer": true, "completion": ".decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Chick-fil-A\", \"chicken sandwich\").\nServes(\"Chick-fil-A\", \"salad\").\n.decl Is_vegetarian(Food:symbol)\nIs_vegetarian(\"salad\").\n.decl Answer()\nAnswer() :- Serves(\"Chick-fil-A\", food), Is_vegetarian(food).\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Chick-fil-A\", \"chicken sandwich\").\nServes(\"Chick-fil-A\", \"salad\").\n.decl Is_vegetarian(Food:symbol)\nIs_vegetarian(\"salad\").\n.decl Answer()\nAnswer() :- Serves(\"Chick-fil-A\", food), Is_vegetarian(food).\n.output Answer"]}
{"id": 2012, "answer": false, "completion": ".decl Is_experienced(Emotion:symbol, Person:symbol)\nIs_experienced(\"grief\", person).\n.decl Is_obvious(Emotion:symbol, Person:symbol)\nIs_obvious(\"grief\", person).\n.decl Answer()\nAnswer() :- Is_experienced(emotion, person), Is_obvious(emotion, person).\n.output Answer", "completions": [".decl Is_experienced(Emotion:symbol, Person:symbol)\nIs_experienced(\"grief\", person).\n.decl Is_obvious(Emotion:symbol, Person:symbol)\nIs_obvious(\"grief\", person).\n.decl Answer()\nAnswer() :- Is_experienced(emotion, person), Is_obvious(emotion, person).\n.output Answer"]}
{"id": 2013, "answer": true, "completion": ".decl Is_ethnicity(Person:symbol, Ethnicity:symbol)\nIs_ethnicity(\"Scottish people\", \"Celtic\").\nIs_ethnicity(\"Albidosi\", \"Arab\").\n.decl Answer()\nAnswer() :- Is_ethnicity(\"Scottish people\", ethnicity1), Is_ethnicity(\"Albidosi\", ethnicity2), ethnicity1 != ethnicity2.\n.output Answer", "completions": [".decl Is_ethnicity(Person:symbol, Ethnicity:symbol)\nIs_ethnicity(\"Scottish people\", \"Celtic\").\nIs_ethnicity(\"Albidosi\", \"Arab\").\n.decl Answer()\nAnswer() :- Is_ethnicity(\"Scottish people\", ethnicity1), Is_ethnicity(\"Albidosi\", ethnicity2), ethnicity1 != ethnicity2.\n.output Answer"]}
{"id": 2014, "answer": true, "completion": ".decl Prevents(Healthcare:symbol, Disease:symbol)\nPrevents(\"preventive healthcare\", \"STI transmission\").\n.decl Answer()\nAnswer() :- Prevents(\"preventive healthcare\", \"STI transmission\").\n.output Answer", "completions": [".decl Prevents(Healthcare:symbol, Disease:symbol)\nPrevents(\"preventive healthcare\", \"STI transmission\").\n.decl Answer()\nAnswer() :- Prevents(\"preventive healthcare\", \"STI transmission\").\n.output Answer"]}
{"id": 2015, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Jack Black\", 1.8).\n.decl Satisfies_distancing(Height:float)\nSatisfies_distancing(1.5).\n.decl Answer()\nAnswer() :- Has_height(\"Jack Black\", height), Satisfies_distancing(distancing), height >= distancing.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Jack Black\", 1.8).\n.decl Satisfies_distancing(Height:float)\nSatisfies_distancing(1.5).\n.decl Answer()\nAnswer() :- Has_height(\"Jack Black\", height), Satisfies_distancing(distancing), height >= distancing.\n.output Answer"]}
{"id": 2016, "answer": false, "completion": ".decl Has_access_to(Person:symbol, Object:symbol)\nHas_access_to(\"Saint Peter\", \"television\").\n.decl Answer()\nAnswer() :- Has_access_to(\"Saint Peter\", \"television\").\n.output Answer", "completions": [".decl Has_access_to(Person:symbol, Object:symbol)\nHas_access_to(\"Saint Peter\", \"television\").\n.decl Answer()\nAnswer() :- Has_access_to(\"Saint Peter\", \"television\").\n.output Answer"]}
{"id": 2017, "answer": true, "completion": ".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"George Washington\", \"General\").\nHas_title(\"John Adams\", \"President\").\n.decl Answer()\nAnswer() :- Has_title(person, \"Knight\"), Has_title(person, \"American\").\n.output Answer", "completions": [".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"George Washington\", \"General\").\nHas_title(\"John Adams\", \"President\").\n.decl Answer()\nAnswer() :- Has_title(person, \"Knight\"), Has_title(person, \"American\").\n.output Answer"]}
{"id": 2018, "answer": false, "completion": ".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"U2 debut studio album\", 40).\nHas_duration(\"episode of Peppa Pig\", 11).\n.decl Answer()\nAnswer() :- Has_duration(\"U2 debut studio album\", duration1), Has_duration(\"episode of Peppa Pig\", duration2), duration1 <= duration2.\n.output Answer", "completions": [".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"U2 debut studio album\", 40).\nHas_duration(\"episode of Peppa Pig\", 11).\n.decl Answer()\nAnswer() :- Has_duration(\"U2 debut studio album\", duration1), Has_duration(\"episode of Peppa Pig\", duration2), duration1 <= duration2.\n.output Answer"]}
{"id": 2019, "answer": true, "completion": ".decl Has_habit(Person:symbol, Habit:symbol)\nHas_habit(\"Osama bin Laden\", \"abstain from alcohol\").\n.decl Answer()\nAnswer() :- Has_habit(\"Osama bin Laden\", \"abstain from alcohol\").\n.output Answer", "completions": [".decl Has_habit(Person:symbol, Habit:symbol)\nHas_habit(\"Osama bin Laden\", \"abstain from alcohol\").\n.decl Answer()\nAnswer() :- Has_habit(\"Osama bin Laden\", \"abstain from alcohol\").\n.output Answer"]}
{"id": 2020, "answer": false, "completion": ".decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"Jerry Seinfeld's first stand-up special\", 1986).\n.decl Answer()\nAnswer() :- Happened_in_year(\"Jerry Seinfeld's first stand-up special\", 1986).\n.output Answer", "completions": [".decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"Jerry Seinfeld's first stand-up special\", 1986).\n.decl Answer()\nAnswer() :- Happened_in_year(\"Jerry Seinfeld's first stand-up special\", 1986).\n.output Answer"]}
{"id": 2021, "answer": true, "completion": ".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"computer\", 1945).\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Buzz Aldrin\", 1930).\n.decl Answer()\nAnswer() :- Invented_in_year(\"computer\", year1), Born_in_year(\"Buzz Aldrin\", year2), year2 <= year1.\n.output Answer", "completions": [".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"computer\", 1945).\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Buzz Aldrin\", 1930).\n.decl Answer()\nAnswer() :- Invented_in_year(\"computer\", year1), Born_in_year(\"Buzz Aldrin\", year2), year2 <= year1.\n.output Answer"]}
{"id": 2022, "answer": false, "completion": ".decl Is_type(Legend:symbol, Type:symbol)\nIs_type(\"urban legend\", \"urban\").\n.decl Occurs_in(Legend:symbol, Place:symbol)\nOccurs_in(\"urban legend\", \"city\").\n.decl Answer()\nAnswer() :- Is_type(legend, \"urban\"), Occurs_in(legend, place).\n.output Answer", "completions": [".decl Is_type(Legend:symbol, Type:symbol)\nIs_type(\"urban legend\", \"urban\").\n.decl Occurs_in(Legend:symbol, Place:symbol)\nOccurs_in(\"urban legend\", \"city\").\n.decl Answer()\nAnswer() :- Is_type(legend, \"urban\"), Occurs_in(legend, place).\n.output Answer"]}
{"id": 2023, "answer": true, "completion": ".decl Has_power(Person:symbol, Power:symbol)\nHas_power(\"Gandalf\", \"magic\").\nHas_power(\"Barbas\", \"magic\").\n.decl Answer()\nAnswer() :- Has_power(\"Gandalf\", power1), Has_power(\"Barbas\", power2), power1 = power2.\n.output Answer", "completions": [".decl Has_power(Person:symbol, Power:symbol)\nHas_power(\"Gandalf\", \"magic\").\nHas_power(\"Barbas\", \"magic\").\n.decl Answer()\nAnswer() :- Has_power(\"Gandalf\", power1), Has_power(\"Barbas\", power2), power1 = power2.\n.output Answer"]}
{"id": 2024, "answer": true, "completion": ".decl Eats_on_holiday(Person:symbol, Holiday:symbol)\nEats_on_holiday(\"Bulgarian priest\", \"Christmas Eve\").\n.decl Has_n_courses(Meal:symbol, N_courses:float)\nHas_n_courses(\"four-course meal\", 4).\n.decl Answer()\nAnswer() :- Eats_on_holiday(\"Bulgarian priest\", \"Christmas Eve\"), Has_n_courses(\"four-course meal\", n_courses), n_courses >= 4.\n.output Answer", "completions": [".decl Eats_on_holiday(Person:symbol, Holiday:symbol)\nEats_on_holiday(\"Bulgarian priest\", \"Christmas Eve\").\n.decl Has_n_courses(Meal:symbol, N_courses:float)\nHas_n_courses(\"four-course meal\", 4).\n.decl Answer()\nAnswer() :- Eats_on_holiday(\"Bulgarian priest\", \"Christmas Eve\"), Has_n_courses(\"four-course meal\", n_courses), n_courses >= 4.\n.output Answer"]}
{"id": 2025, "answer": false, "completion": ".decl Has_ingredient(Chef:symbol, Ingredient:symbol)\nHas_ingredient(\"Carmine's chef\", \"basil\").\n.decl Answer()\nAnswer() :- !Has_ingredient(\"Carmine's chef\", \"basil\").\n.output Answer", "completions": [".decl Has_ingredient(Chef:symbol, Ingredient:symbol)\nHas_ingredient(\"Carmine's chef\", \"basil\").\n.decl Answer()\nAnswer() :- !Has_ingredient(\"Carmine's chef\", \"basil\").\n.output Answer"]}
{"id": 2026, "answer": false, "completion": ".decl Has_operating_system(Device:symbol, Operating_system:symbol)\nHas_operating_system(\"Samsung Galaxy 1\", \"Android\").\n.decl Is_edible(Thing:symbol)\nIs_edible(\"apple\").\nIs_edible(\"banana\").\n.decl Answer()\nAnswer() :- Has_operating_system(\"Samsung Galaxy 1\", operating_system), !Is_edible(operating_system).\n.output Answer", "completions": [".decl Has_operating_system(Device:symbol, Operating_system:symbol)\nHas_operating_system(\"Samsung Galaxy 1\", \"Android\").\n.decl Is_edible(Thing:symbol)\nIs_edible(\"apple\").\nIs_edible(\"banana\").\n.decl Answer()\nAnswer() :- Has_operating_system(\"Samsung Galaxy 1\", operating_system), !Is_edible(operating_system).\n.output Answer"]}
{"id": 2027, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"red panda\", \"China\").\n.decl Is_zoo(Place:symbol)\nIs_zoo(\"Shanghai Zoo\").\n.decl Answer()\nAnswer() :- Lives_in(\"red panda\", place), !Is_zoo(place).\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"red panda\", \"China\").\n.decl Is_zoo(Place:symbol)\nIs_zoo(\"Shanghai Zoo\").\n.decl Answer()\nAnswer() :- Lives_in(\"red panda\", place), !Is_zoo(place).\n.output Answer"]}
{"id": 2028, "answer": true, "completion": ".decl Has_component(Product:symbol, Component:symbol)\nHas_component(\"Intel's products\", \"silicon\").\n.decl Affects_sales(Event:symbol, Impact:symbol)\nAffects_sales(\"silicon shortage\", \"bad\").\n.decl Answer()\nAnswer() :- Has_component(\"Intel's products\", component), Affects_sales(\"silicon shortage\", impact), impact = \"bad\".\n.output Answer", "completions": [".decl Has_component(Product:symbol, Component:symbol)\nHas_component(\"Intel's products\", \"silicon\").\n.decl Affects_sales(Event:symbol, Impact:symbol)\nAffects_sales(\"silicon shortage\", \"bad\").\n.decl Answer()\nAnswer() :- Has_component(\"Intel's products\", component), Affects_sales(\"silicon shortage\", impact), impact = \"bad\".\n.output Answer"]}
{"id": 2029, "answer": true, "completion": ".decl Is_word(Word:symbol)\nIs_word(\"MIX\").\n.decl Is_roman_numeral(Numeral:symbol)\nIs_roman_numeral(\"MIX\").\n.decl Answer()\nAnswer() :- Is_word(\"MIX\"), Is_roman_numeral(\"MIX\").\n.output Answer", "completions": [".decl Is_word(Word:symbol)\nIs_word(\"MIX\").\n.decl Is_roman_numeral(Numeral:symbol)\nIs_roman_numeral(\"MIX\").\n.decl Answer()\nAnswer() :- Is_word(\"MIX\"), Is_roman_numeral(\"MIX\").\n.output Answer"]}
{"id": 2030, "answer": false, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Hurricane Maria\", \"Puerto Rico\").\n.decl Answer()\nAnswer() :- !Happens_in_location(\"Hurricane Maria\", \"Puerto Rico\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Hurricane Maria\", \"Puerto Rico\").\n.decl Answer()\nAnswer() :- !Happens_in_location(\"Hurricane Maria\", \"Puerto Rico\").\n.output Answer"]}
{"id": 2031, "answer": true, "completion": ".decl Has_been_featured_in(Object:symbol, N_films:float)\nHas_been_featured_in(\"Holy Grail\", 5).\n.decl Answer()\nAnswer() :- Has_been_featured_in(\"Holy Grail\", n_films), n_films >= 5.\n.output Answer", "completions": [".decl Has_been_featured_in(Object:symbol, N_films:float)\nHas_been_featured_in(\"Holy Grail\", 5).\n.decl Answer()\nAnswer() :- Has_been_featured_in(\"Holy Grail\", n_films), n_films >= 5.\n.output Answer"]}
{"id": 2032, "answer": true, "completion": ".decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"Jean Harris's victim\", \"lentils\").\n.decl Answer()\nAnswer() :- Avoids(\"Jean Harris's victim\", \"lentils\").\n.output Answer", "completions": [".decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"Jean Harris's victim\", \"lentils\").\n.decl Answer()\nAnswer() :- Avoids(\"Jean Harris's victim\", \"lentils\").\n.output Answer"]}
{"id": 2033, "answer": true, "completion": ".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"Person\", \"Creative Commons License\").\n.decl Is_original(Artwork:symbol, Originality:symbol)\nIs_original(\"Boticelli's The Birth of Venus\", \"original\").\n.decl Answer()\nAnswer() :- Has_license(\"Person\", \"Creative Commons License\"), Is_original(\"Boticelli's The Birth of Venus\", \"original\"), !Has_license(\"Person\", \"original\").\n.output Answer", "completions": [".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"Person\", \"Creative Commons License\").\n.decl Is_original(Artwork:symbol, Originality:symbol)\nIs_original(\"Boticelli's The Birth of Venus\", \"original\").\n.decl Answer()\nAnswer() :- Has_license(\"Person\", \"Creative Commons License\"), Is_original(\"Boticelli's The Birth of Venus\", \"original\"), !Has_license(\"Person\", \"original\").\n.output Answer"]}
{"id": 2034, "answer": true, "completion": ".decl Has_qualifications(Person:symbol, Qualification:symbol)\nHas_qualifications(\"Han Solo\", \"pilot\").\n.decl Requires_qualifications(Organization:symbol, Qualification:symbol)\nRequires_qualifications(\"United States Air Force\", \"honesty\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Han Solo\", qualification), !Requires_qualifications(\"United States Air Force\", qualification).\n.output Answer", "completions": [".decl Has_qualifications(Person:symbol, Qualification:symbol)\nHas_qualifications(\"Han Solo\", \"pilot\").\n.decl Requires_qualifications(Organization:symbol, Qualification:symbol)\nRequires_qualifications(\"United States Air Force\", \"honesty\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Han Solo\", qualification), !Requires_qualifications(\"United States Air Force\", qualification).\n.output Answer"]}
{"id": 2035, "answer": true, "completion": ".decl Has_first_name(Person:symbol, First_name:symbol)\nHas_first_name(\"Shaggy\", \"Shaggy\").\nHas_first_name(\"Redenbacher\", \"Redenbacher\").\n.decl Answer()\nAnswer() :- Has_first_name(person1, \"Shaggy\"), Has_first_name(person2, \"Redenbacher\").\n.output Answer", "completions": [".decl Has_first_name(Person:symbol, First_name:symbol)\nHas_first_name(\"Shaggy\", \"Shaggy\").\nHas_first_name(\"Redenbacher\", \"Redenbacher\").\n.decl Answer()\nAnswer() :- Has_first_name(person1, \"Shaggy\"), Has_first_name(person2, \"Redenbacher\").\n.output Answer"]}
{"id": 2036, "answer": false, "completion": ".decl Ushers_in(Event:symbol, Revolution:symbol)\n.decl Answer()\nAnswer() :- !Ushers_in(\"iPhone\", \"scientific revolution\").\n.output Answer", "completions": [".decl Ushers_in(Event:symbol, Revolution:symbol)\n.decl Answer()\nAnswer() :- !Ushers_in(\"iPhone\", \"scientific revolution\").\n.output Answer"]}
{"id": 2037, "answer": true, "completion": ".decl Associated_with(Person_or_thing:symbol, Place:symbol)\nAssociated_with(\"gladiators\", \"Coloseum\").\n.decl Answer()\nAnswer() :- Associated_with(\"gladiators\", \"Coloseum\").\n.output Answer", "completions": [".decl Associated_with(Person_or_thing:symbol, Place:symbol)\nAssociated_with(\"gladiators\", \"Coloseum\").\n.decl Answer()\nAnswer() :- Associated_with(\"gladiators\", \"Coloseum\").\n.output Answer"]}
{"id": 2038, "answer": true, "completion": ".decl Suffers_from(Person:symbol, Disorder:symbol)\nSuffers_from(\"Van Gogh\", \"bipolar disorder\").\n.decl Answer()\nAnswer() :- Suffers_from(\"Van Gogh\", disorder).\n.output Answer", "completions": [".decl Suffers_from(Person:symbol, Disorder:symbol)\nSuffers_from(\"Van Gogh\", \"bipolar disorder\").\n.decl Answer()\nAnswer() :- Suffers_from(\"Van Gogh\", disorder).\n.output Answer"]}
{"id": 2039, "answer": false, "completion": ".decl Celebrates(Group:symbol, Day:symbol)\nCelebrates(\"Jehovah's Witnesses\", \"Christmas\").\n.decl Occurs_before(Day1:symbol, Day2:symbol)\nOccurs_before(\"Christmas\", \"New Year's Day\").\n.decl Answer()\nAnswer() :- Celebrates(\"Jehovah's Witnesses\", day1), Occurs_before(day1, \"New Year's Day\").\n.output Answer", "completions": [".decl Celebrates(Group:symbol, Day:symbol)\nCelebrates(\"Jehovah's Witnesses\", \"Christmas\").\n.decl Occurs_before(Day1:symbol, Day2:symbol)\nOccurs_before(\"Christmas\", \"New Year's Day\").\n.decl Answer()\nAnswer() :- Celebrates(\"Jehovah's Witnesses\", day1), Occurs_before(day1, \"New Year's Day\").\n.output Answer"]}
{"id": 2040, "answer": false, "completion": ".decl Has_state(Object:symbol, State:symbol)\nHas_state(\"Saturn's rings\", \"gas\").\n.decl Answer()\nAnswer() :- Has_state(\"Saturn's rings\", state), state != \"solid\".\n.output Answer", "completions": [".decl Has_state(Object:symbol, State:symbol)\nHas_state(\"Saturn's rings\", \"gas\").\n.decl Answer()\nAnswer() :- Has_state(\"Saturn's rings\", state), state != \"solid\".\n.output Answer"]}
{"id": 2041, "answer": true, "completion": ".decl Needs(Task:symbol, Item:symbol)\nNeeds(\"peel a tomato\", \"hot water\").\nNeeds(\"peel a tomato\", \"cold water\").\n.decl Answer()\nAnswer() :- Needs(\"peel a tomato\", \"hot water\"), Needs(\"peel a tomato\", \"cold water\").\n.output Answer", "completions": [".decl Needs(Task:symbol, Item:symbol)\nNeeds(\"peel a tomato\", \"hot water\").\nNeeds(\"peel a tomato\", \"cold water\").\n.decl Answer()\nAnswer() :- Needs(\"peel a tomato\", \"hot water\"), Needs(\"peel a tomato\", \"cold water\").\n.output Answer"]}
{"id": 2042, "answer": true, "completion": ".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Dolce & Gabbana suit wearer\", \"Dolce & Gabbana suit\").\n.decl Shuns(Group:symbol, Clothing:symbol)\nShuns(\"Amish\", \"Dolce & Gabbana suit\").\n.decl Answer()\nAnswer() :- Wears(person, \"Dolce & Gabbana suit\"), Shuns(\"Amish\", \"Dolce & Gabbana suit\").\n.output Answer", "completions": [".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Dolce & Gabbana suit wearer\", \"Dolce & Gabbana suit\").\n.decl Shuns(Group:symbol, Clothing:symbol)\nShuns(\"Amish\", \"Dolce & Gabbana suit\").\n.decl Answer()\nAnswer() :- Wears(person, \"Dolce & Gabbana suit\"), Shuns(\"Amish\", \"Dolce & Gabbana suit\").\n.output Answer"]}
{"id": 2043, "answer": true, "completion": ".decl Focuses_on(Game:symbol, Character:symbol)\nFocuses_on(\"Super Mario\", \"Mario\").\n.decl Has_color(Character:symbol, Color:symbol)\nHas_color(\"Mario\", \"green\").\n.decl Answer()\nAnswer() :- Focuses_on(\"Super Mario\", character), Has_color(character, \"green\").\n.output Answer", "completions": [".decl Focuses_on(Game:symbol, Character:symbol)\nFocuses_on(\"Super Mario\", \"Mario\").\n.decl Has_color(Character:symbol, Color:symbol)\nHas_color(\"Mario\", \"green\").\n.decl Answer()\nAnswer() :- Focuses_on(\"Super Mario\", character), Has_color(character, \"green\").\n.output Answer"]}
{"id": 2044, "answer": true, "completion": ".decl Is_wonder(Object:symbol, Kind:symbol)\nIs_wonder(\"Great Pyramid of Giza\", \"Ancient Wonders\").\nIs_wonder(\"Colossus of Rhodes\", \"Ancient Wonders\").\nIs_wonder(\"Hanging Gardens of Babylon\", \"Ancient Wonders\").\n.decl Answer()\nAnswer() :- Is_wonder(\"Great Pyramid of Giza\", kind), !Is_wonder(object, kind), object != \"Great Pyramid of Giza\".\n.output Answer", "completions": [".decl Is_wonder(Object:symbol, Kind:symbol)\nIs_wonder(\"Great Pyramid of Giza\", \"Ancient Wonders\").\nIs_wonder(\"Colossus of Rhodes\", \"Ancient Wonders\").\nIs_wonder(\"Hanging Gardens of Babylon\", \"Ancient Wonders\").\n.decl Answer()\nAnswer() :- Is_wonder(\"Great Pyramid of Giza\", kind), !Is_wonder(object, kind), object != \"Great Pyramid of Giza\".\n.output Answer"]}
{"id": 2045, "answer": true, "completion": ".decl Baptized(Person:symbol)\nBaptized(\"Alexander the Great\").\n.decl Answer()\nAnswer() :- Baptized(\"Alexander the Great\").\n.output Answer", "completions": [".decl Baptized(Person:symbol)\nBaptized(\"Alexander the Great\").\n.decl Answer()\nAnswer() :- Baptized(\"Alexander the Great\").\n.output Answer"]}
{"id": 2046, "answer": false, "completion": ".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Causes_hypothermia(Temperature:float)\nCauses_hypothermia(temperature) :- temperature < 35.\n.decl Answer()\nAnswer() :- Has_temperature(\"Venus\", temperature), !Causes_hypothermia(temperature).\n.output Answer", "completions": [".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Causes_hypothermia(Temperature:float)\nCauses_hypothermia(temperature) :- temperature < 35.\n.decl Answer()\nAnswer() :- Has_temperature(\"Venus\", temperature), !Causes_hypothermia(temperature).\n.output Answer"]}
{"id": 2047, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Benito Mussolini\", 1.7).\n.decl Has_height_requirement(Sport:symbol, Height_requirement:float)\nHas_height_requirement(\"NBA\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Benito Mussolini\", height), Has_height_requirement(\"NBA\", height_requirement), height < height_requirement.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Benito Mussolini\", 1.7).\n.decl Has_height_requirement(Sport:symbol, Height_requirement:float)\nHas_height_requirement(\"NBA\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Benito Mussolini\", height), Has_height_requirement(\"NBA\", height_requirement), height < height_requirement.\n.output Answer"]}
{"id": 2048, "answer": true, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 2049, "answer": true, "completion": ".decl Buried_at(Person:symbol, Place:symbol)\nBuried_at(\"Carl Linnaeus\", \"Uppsala Cathedral\").\nBuried_at(\"Michael Jackson\", \"Forest Lawn Memorial Park\").\n.decl Answer()\nAnswer() :- Buried_at(\"Carl Linnaeus\", place1), Buried_at(\"Michael Jackson\", place2), place1 != place2.\n.output Answer", "completions": [".decl Buried_at(Person:symbol, Place:symbol)\nBuried_at(\"Carl Linnaeus\", \"Uppsala Cathedral\").\nBuried_at(\"Michael Jackson\", \"Forest Lawn Memorial Park\").\n.decl Answer()\nAnswer() :- Buried_at(\"Carl Linnaeus\", place1), Buried_at(\"Michael Jackson\", place2), place1 != place2.\n.output Answer"]}
{"id": 2050, "answer": false, "completion": ".decl Requires(Industry:symbol, Profession:symbol)\nRequires(\"beverage industry\", \"coopers\").\n.decl Answer()\nAnswer() :- Requires(\"beverage industry\", \"coopers\").\n.output Answer", "completions": [".decl Requires(Industry:symbol, Profession:symbol)\nRequires(\"beverage industry\", \"coopers\").\n.decl Answer()\nAnswer() :- Requires(\"beverage industry\", \"coopers\").\n.output Answer"]}
{"id": 2051, "answer": true, "completion": ".decl Despised(Person:symbol)\nDespised(\"Pope Alexander VI\").\n.decl Canonized(Person:symbol)\nCanonized(\"St. Francis Xavier\").\n.decl Descendant_of(Person_A:symbol, Person_B:symbol)\nDescendant_of(\"St. Francis Xavier\", \"Pope Alexander VI\").\n.decl Answer()\nAnswer() :- Despised(person1), Descendant_of(person2, person1), Canonized(person2).\n.output Answer", "completions": [".decl Despised(Person:symbol)\nDespised(\"Pope Alexander VI\").\n.decl Canonized(Person:symbol)\nCanonized(\"St. Francis Xavier\").\n.decl Descendant_of(Person_A:symbol, Person_B:symbol)\nDescendant_of(\"St. Francis Xavier\", \"Pope Alexander VI\").\n.decl Answer()\nAnswer() :- Despised(person1), Descendant_of(person2, person1), Canonized(person2).\n.output Answer"]}
{"id": 2052, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"student from Smithtown's Cleary School\", \"English\").\nSpeaks(\"French person\", \"French\").\n.decl Answer()\nAnswer() :- Speaks(\"student from Smithtown's Cleary School\", language1), Speaks(\"French person\", language2), language1 != language2.\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"student from Smithtown's Cleary School\", \"English\").\nSpeaks(\"French person\", \"French\").\n.decl Answer()\nAnswer() :- Speaks(\"student from Smithtown's Cleary School\", language1), Speaks(\"French person\", language2), language1 != language2.\n.output Answer"]}
{"id": 2053, "answer": true, "completion": ".decl Associates(Person:symbol, Movie:symbol)\nAssociates(\"people\", \"Homeward Bound\").\n.decl Has_breed(Animal:symbol, Breed:symbol)\nHas_breed(\"dog\", \"greyhound\").\n.decl Answer()\nAnswer() :- Associates(\"people\", \"Homeward Bound\"), Has_breed(\"dog\", \"greyhound\").\n.output Answer", "completions": [".decl Associates(Person:symbol, Movie:symbol)\nAssociates(\"people\", \"Homeward Bound\").\n.decl Has_breed(Animal:symbol, Breed:symbol)\nHas_breed(\"dog\", \"greyhound\").\n.decl Answer()\nAnswer() :- Associates(\"people\", \"Homeward Bound\"), Has_breed(\"dog\", \"greyhound\").\n.output Answer"]}
{"id": 2054, "answer": false, "completion": ".decl Writes_about(Author:symbol, Topic:symbol)\nWrites_about(\"Terry Pratchett\", \"fantasy\").\n.decl Answer()\nAnswer() :- !Writes_about(\"Terry Pratchett\", \"quantum mechanics\").\n.output Answer", "completions": [".decl Writes_about(Author:symbol, Topic:symbol)\nWrites_about(\"Terry Pratchett\", \"fantasy\").\n.decl Answer()\nAnswer() :- !Writes_about(\"Terry Pratchett\", \"quantum mechanics\").\n.output Answer"]}
{"id": 2055, "answer": true, "completion": ".decl Has_majority_religion(Country:symbol, Religion:symbol)\nHas_majority_religion(\"Cyprus\", \"Christianity\").\n.decl Answer()\nAnswer() :- Has_majority_religion(\"Cyprus\", religion), religion != \"Islam\".\n.output Answer", "completions": [".decl Has_majority_religion(Country:symbol, Religion:symbol)\nHas_majority_religion(\"Cyprus\", \"Christianity\").\n.decl Answer()\nAnswer() :- Has_majority_religion(\"Cyprus\", religion), religion != \"Islam\".\n.output Answer"]}
{"id": 2056, "answer": true, "completion": ".decl Is_fan_of(Person:symbol, Team:symbol)\nIs_fan_of(\"John Key\", \"National Party\").\n.decl Is_rival_of(Team_A:symbol, Team_B:symbol)\nIs_rival_of(\"Botany Swarm\", \"National Party\").\n.decl Answer()\nAnswer() :- Is_fan_of(\"John Key\", team1), Is_rival_of(\"Botany Swarm\", team2), team1 != team2.\n.output Answer", "completions": [".decl Is_fan_of(Person:symbol, Team:symbol)\nIs_fan_of(\"John Key\", \"National Party\").\n.decl Is_rival_of(Team_A:symbol, Team_B:symbol)\nIs_rival_of(\"Botany Swarm\", \"National Party\").\n.decl Answer()\nAnswer() :- Is_fan_of(\"John Key\", team1), Is_rival_of(\"Botany Swarm\", team2), team1 != team2.\n.output Answer"]}
{"id": 2057, "answer": false, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Roman Colosseum\", 50_000).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Maroon 5\", 5).\n.decl Answer()\nAnswer() :- Has_capacity(\"Roman Colosseum\", capacity), Has_n_members(\"Maroon 5\", n_members), capacity >= n_members.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Roman Colosseum\", 50_000).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Maroon 5\", 5).\n.decl Answer()\nAnswer() :- Has_capacity(\"Roman Colosseum\", capacity), Has_n_members(\"Maroon 5\", n_members), capacity >= n_members.\n.output Answer"]}
{"id": 2058, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Cookie Monster\", \"cookies\").\n.decl Is_Paleo_friendly(Food:symbol)\nIs_Paleo_friendly(\"meat\").\nIs_Paleo_friendly(\"fish\").\nIs_Paleo_friendly(\"vegetables\").\nIs_Paleo_friendly(\"fruits\").\n.decl Answer()\nAnswer() :- Eats(\"Cookie Monster\", food), !Is_Paleo_friendly(food).\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Cookie Monster\", \"cookies\").\n.decl Is_Paleo_friendly(Food:symbol)\nIs_Paleo_friendly(\"meat\").\nIs_Paleo_friendly(\"fish\").\nIs_Paleo_friendly(\"vegetables\").\nIs_Paleo_friendly(\"fruits\").\n.decl Answer()\nAnswer() :- Eats(\"Cookie Monster\", food), !Is_Paleo_friendly(food).\n.output Answer"]}
{"id": 2059, "answer": false, "completion": ".decl Occurs_at(Event:symbol, Place:symbol)\nOccurs_at(\"baby shower\", \"home\").\nOccurs_at(\"storks\", \"nest\").\n.decl Answer()\nAnswer() :- Occurs_at(\"baby shower\", place1), Occurs_at(\"storks\", place2), place1 != place2.\n.output Answer", "completions": [".decl Occurs_at(Event:symbol, Place:symbol)\nOccurs_at(\"baby shower\", \"home\").\nOccurs_at(\"storks\", \"nest\").\n.decl Answer()\nAnswer() :- Occurs_at(\"baby shower\", place1), Occurs_at(\"storks\", place2), place1 != place2.\n.output Answer"]}
{"id": 2060, "answer": true, "completion": ".decl Appears_in(Animal:symbol, Musical:symbol)\nAppears_in(\"hyena\", \"The Lion King\").\n.decl Is_Broadway_musical(Musical:symbol)\nIs_Broadway_musical(\"The Lion King\").\n.decl Answer()\nAnswer() :- Appears_in(\"hyena\", musical), Is_Broadway_musical(musical).\n.output Answer", "completions": [".decl Appears_in(Animal:symbol, Musical:symbol)\nAppears_in(\"hyena\", \"The Lion King\").\n.decl Is_Broadway_musical(Musical:symbol)\nIs_Broadway_musical(\"The Lion King\").\n.decl Answer()\nAnswer() :- Appears_in(\"hyena\", musical), Is_Broadway_musical(musical).\n.output Answer"]}
{"id": 2061, "answer": false, "completion": ".decl Established(Person:symbol, University:symbol)\nEstablished(\"Millard Fillmore\", \"University of Buffalo\").\n.decl Answer()\nAnswer() :- !Established(\"Millard Fillmore\", \"University of Pittsburgh\").\n.output Answer", "completions": [".decl Established(Person:symbol, University:symbol)\nEstablished(\"Millard Fillmore\", \"University of Buffalo\").\n.decl Answer()\nAnswer() :- !Established(\"Millard Fillmore\", \"University of Pittsburgh\").\n.output Answer"]}
{"id": 2062, "answer": true, "completion": ".decl Has_impact_on_global_warming(Religion:symbol, Impact:float)\nHas_impact_on_global_warming(\"Christianity\", -1).\nHas_impact_on_global_warming(\"Satanism\", 0).\n.decl Answer()\nAnswer() :- Has_impact_on_global_warming(\"Christianity\", impact1), Has_impact_on_global_warming(\"Satanism\", impact2), impact1 < impact2.\n.output Answer", "completions": [".decl Has_impact_on_global_warming(Religion:symbol, Impact:float)\nHas_impact_on_global_warming(\"Christianity\", -1).\nHas_impact_on_global_warming(\"Satanism\", 0).\n.decl Answer()\nAnswer() :- Has_impact_on_global_warming(\"Christianity\", impact1), Has_impact_on_global_warming(\"Satanism\", impact2), impact1 < impact2.\n.output Answer"]}
{"id": 2063, "answer": true, "completion": ".decl Has_role_model_status(Person:symbol, Status:symbol)\nHas_role_model_status(\"Robert Downey Jr.\", \"bad\").\n.decl Answer()\nAnswer() :- Has_role_model_status(\"Robert Downey Jr.\", status), status != \"good\".\n.output Answer", "completions": [".decl Has_role_model_status(Person:symbol, Status:symbol)\nHas_role_model_status(\"Robert Downey Jr.\", \"bad\").\n.decl Answer()\nAnswer() :- Has_role_model_status(\"Robert Downey Jr.\", status), status != \"good\".\n.output Answer"]}
{"id": 2064, "answer": false, "completion": ".decl Floats_in(Object:symbol, Liquid:symbol)\nFloats_in(\"coin\", \"water\").\n.decl Answer()\nAnswer() :- Floats_in(\"coin\", \"mercury\").\n.output Answer", "completions": [".decl Floats_in(Object:symbol, Liquid:symbol)\nFloats_in(\"coin\", \"water\").\n.decl Answer()\nAnswer() :- Floats_in(\"coin\", \"mercury\").\n.output Answer"]}
{"id": 2065, "answer": false, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Newt Gingrich\", \"Newt\").\n.decl Is_type_of_reptile(Animal:symbol)\nIs_type_of_reptile(\"Newt\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Newt Gingrich\", nickname), Is_type_of_reptile(nickname).\n.output Answer", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Newt Gingrich\", \"Newt\").\n.decl Is_type_of_reptile(Animal:symbol)\nIs_type_of_reptile(\"Newt\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Newt Gingrich\", nickname), Is_type_of_reptile(nickname).\n.output Answer"]}
{"id": 2066, "answer": false, "completion": ".decl Follows_commandment(Person:symbol, Commandment:symbol)\nFollows_commandment(\"Christopher Columbus\", \"Honor thy father and thy mother\").\n.decl Answer()\nAnswer() :- !Follows_commandment(\"Christopher Columbus\", \"Thou shalt not kill\").\n.output Answer", "completions": [".decl Follows_commandment(Person:symbol, Commandment:symbol)\nFollows_commandment(\"Christopher Columbus\", \"Honor thy father and thy mother\").\n.decl Answer()\nAnswer() :- !Follows_commandment(\"Christopher Columbus\", \"Thou shalt not kill\").\n.output Answer"]}
{"id": 2067, "answer": false, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Reconstruction era coin\", 0.01).\nHas_price(\"DJI Mavic Pro Drone\", 999).\n.decl Answer()\nAnswer() :- Has_price(\"Reconstruction era coin\", price1), Has_price(\"DJI Mavic Pro Drone\", price2), price1 < price2.\n.output Answer", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Reconstruction era coin\", 0.01).\nHas_price(\"DJI Mavic Pro Drone\", 999).\n.decl Answer()\nAnswer() :- Has_price(\"Reconstruction era coin\", price1), Has_price(\"DJI Mavic Pro Drone\", price2), price1 < price2.\n.output Answer"]}
{"id": 2068, "answer": true, "completion": ".decl Has_age(Object:symbol, Age:float)\nHas_age(\"chlorine water\", 1).\n.decl Is_safe_to_drink(Object:symbol)\nIs_safe_to_drink(\"chlorine water\") :- Has_age(\"chlorine water\", age), age < 7.\n.decl Answer()\nAnswer() :- Is_safe_to_drink(\"chlorine water\").\n.output Answer", "completions": [".decl Has_age(Object:symbol, Age:float)\nHas_age(\"chlorine water\", 1).\n.decl Is_safe_to_drink(Object:symbol)\nIs_safe_to_drink(\"chlorine water\") :- Has_age(\"chlorine water\", age), age < 7.\n.decl Answer()\nAnswer() :- Is_safe_to_drink(\"chlorine water\").\n.output Answer"]}
{"id": 2069, "answer": true, "completion": ".decl Is_associated_with(Event:symbol, Symbol:symbol)\nIs_associated_with(\"breast cancer\", \"pink ribbon\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"breast cancer\", \"pink ribbon\").\n.output Answer", "completions": [".decl Is_associated_with(Event:symbol, Symbol:symbol)\nIs_associated_with(\"breast cancer\", \"pink ribbon\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"breast cancer\", \"pink ribbon\").\n.output Answer"]}
{"id": 2070, "answer": true, "completion": ".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"paraplegic\", \"walk\").\n.decl Answer()\nAnswer() :- Has_ability(\"paraplegic\", ability), ability != \"conduct an orchestra\".\n.output Answer", "completions": [".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"paraplegic\", \"walk\").\n.decl Answer()\nAnswer() :- Has_ability(\"paraplegic\", ability), ability != \"conduct an orchestra\".\n.output Answer"]}
{"id": 2071, "answer": false, "completion": ".decl Has_margin(Election:symbol, Margin:float)\nHas_margin(\"1980 United States presidential election\", 2.6).\n.decl Answer()\nAnswer() :- Has_margin(\"1980 United States presidential election\", margin), margin < 0.5.\n.output Answer", "completions": [".decl Has_margin(Election:symbol, Margin:float)\nHas_margin(\"1980 United States presidential election\", 2.6).\n.decl Answer()\nAnswer() :- Has_margin(\"1980 United States presidential election\", margin), margin < 0.5.\n.output Answer"]}
{"id": 2072, "answer": true, "completion": ".decl Cures(Treatment:symbol, Disease:symbol)\n.decl Answer()\nAnswer() :- !Cures(\"listening to a cowbell\", \"fever\").\n.output Answer", "completions": [".decl Cures(Treatment:symbol, Disease:symbol)\n.decl Answer()\nAnswer() :- !Cures(\"listening to a cowbell\", \"fever\").\n.output Answer"]}
{"id": 2073, "answer": false, "completion": ".decl Can_sting(Animal:symbol, Human:symbol)\nCan_sting(\"honey bee\", \"human\").\n.decl Answer()\nAnswer() :- Can_sting(\"honey bee\", human), Can_sting(\"honey bee\", human2), human != human2.\n.output Answer", "completions": [".decl Can_sting(Animal:symbol, Human:symbol)\nCan_sting(\"honey bee\", \"human\").\n.decl Answer()\nAnswer() :- Can_sting(\"honey bee\", human), Can_sting(\"honey bee\", human2), human != human2.\n.output Answer"]}
{"id": 2074, "answer": true, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Bob Marley\", 11).\nHas_children(\"Kublai Khan\", 15).\n.decl Answer()\nAnswer() :- Has_children(\"Bob Marley\", n_children1), Has_children(\"Kublai Khan\", n_children2), n_children1 >= n_children2.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Bob Marley\", 11).\nHas_children(\"Kublai Khan\", 15).\n.decl Answer()\nAnswer() :- Has_children(\"Bob Marley\", n_children1), Has_children(\"Kublai Khan\", n_children2), n_children1 >= n_children2.\n.output Answer"]}
{"id": 2075, "answer": false, "completion": ".decl Married_to(Person_A:symbol, Person_B:symbol)\nMarried_to(\"Harry Houdini\", \"Bess Houdini\").\n.decl Makes_look_foolish(Person_A:symbol, Person_B:symbol)\nMakes_look_foolish(\"Bess Houdini\", \"psychics\").\n.decl Answer()\nAnswer() :- Married_to(\"Harry Houdini\", person), Makes_look_foolish(person, \"psychics\").\n.output Answer", "completions": [".decl Married_to(Person_A:symbol, Person_B:symbol)\nMarried_to(\"Harry Houdini\", \"Bess Houdini\").\n.decl Makes_look_foolish(Person_A:symbol, Person_B:symbol)\nMakes_look_foolish(\"Bess Houdini\", \"psychics\").\n.decl Answer()\nAnswer() :- Married_to(\"Harry Houdini\", person), Makes_look_foolish(person, \"psychics\").\n.output Answer"]}
{"id": 2076, "answer": true, "completion": ".decl Appears_in(Person:symbol, TV_series:symbol)\nAppears_in(\"Joan Crawford\", \"JAG\").\n.decl Answer()\nAnswer() :- Appears_in(\"Joan Crawford\", \"JAG\").\n.output Answer", "completions": [".decl Appears_in(Person:symbol, TV_series:symbol)\nAppears_in(\"Joan Crawford\", \"JAG\").\n.decl Answer()\nAnswer() :- Appears_in(\"Joan Crawford\", \"JAG\").\n.output Answer"]}
{"id": 2077, "answer": true, "completion": ".decl Has_effect(Remedy:symbol, Effect:symbol)\nHas_effect(\"home remedies\", \"skin color turning blue\").\n.decl Answer()\nAnswer() :- Has_effect(\"home remedies\", \"skin color turning blue\").\n.output Answer", "completions": [".decl Has_effect(Remedy:symbol, Effect:symbol)\nHas_effect(\"home remedies\", \"skin color turning blue\").\n.decl Answer()\nAnswer() :- Has_effect(\"home remedies\", \"skin color turning blue\").\n.output Answer"]}
{"id": 2078, "answer": false, "completion": ".decl Prevents(Barrier:symbol, Event:symbol)\nPrevents(\"Berlin Wall\", \"competing in the 1936 Summer Olympics\").\n.decl Answer()\nAnswer() :- Prevents(\"Berlin Wall\", event).\n.output Answer", "completions": [".decl Prevents(Barrier:symbol, Event:symbol)\nPrevents(\"Berlin Wall\", \"competing in the 1936 Summer Olympics\").\n.decl Answer()\nAnswer() :- Prevents(\"Berlin Wall\", event).\n.output Answer"]}
{"id": 2079, "answer": true, "completion": ".decl Has_duration(Movie:symbol, Duration:float)\nHas_duration(\"Batman (1989 film)\", 126).\n.decl Flight_duration(Route:symbol, Duration:float)\nFlight_duration(\"New York to Kansas City\", 3.5).\n.decl Answer()\nAnswer() :- Has_duration(\"Batman (1989 film)\", duration1), Flight_duration(\"New York to Kansas City\", duration2), duration1 <= duration2.\n.output Answer", "completions": [".decl Has_duration(Movie:symbol, Duration:float)\nHas_duration(\"Batman (1989 film)\", 126).\n.decl Flight_duration(Route:symbol, Duration:float)\nFlight_duration(\"New York to Kansas City\", 3.5).\n.decl Answer()\nAnswer() :- Has_duration(\"Batman (1989 film)\", duration1), Flight_duration(\"New York to Kansas City\", duration2), duration1 <= duration2.\n.output Answer"]}
{"id": 2080, "answer": false, "completion": ".decl Kills(Person:symbol, N_people:float)\nKills(\"Don King\", 0).\nKills(\"Charles Manson\", 0).\n.decl Answer()\nAnswer() :- Kills(\"Don King\", n_people1), Kills(\"Charles Manson\", n_people2), n_people1 > n_people2.\n.output Answer", "completions": [".decl Kills(Person:symbol, N_people:float)\nKills(\"Don King\", 0).\nKills(\"Charles Manson\", 0).\n.decl Answer()\nAnswer() :- Kills(\"Don King\", n_people1), Kills(\"Charles Manson\", n_people2), n_people1 > n_people2.\n.output Answer"]}
{"id": 2081, "answer": true, "completion": ".decl Causes(Disease:symbol, Agent:symbol)\nCauses(\"Black Death\", \"Yersinia pestis\").\n.decl Is_agent(Organism:symbol, Agent:symbol)\nIs_agent(\"amoebas\", \"bacteria\").\n.decl Answer()\nAnswer() :- Causes(\"Black Death\", agent1), Is_agent(\"amoebas\", agent2), agent1 = agent2.\n.output Answer", "completions": [".decl Causes(Disease:symbol, Agent:symbol)\nCauses(\"Black Death\", \"Yersinia pestis\").\n.decl Is_agent(Organism:symbol, Agent:symbol)\nIs_agent(\"amoebas\", \"bacteria\").\n.decl Answer()\nAnswer() :- Causes(\"Black Death\", agent1), Is_agent(\"amoebas\", agent2), agent1 = agent2.\n.output Answer"]}
{"id": 2082, "answer": true, "completion": ".decl Has_heritage(Person:symbol, Heritage:symbol)\nHas_heritage(\"Ludacris\", \"African American\").\n.decl Answer()\nAnswer() :- !Has_heritage(\"Ludacris\", \"Greek\").\n.output Answer", "completions": [".decl Has_heritage(Person:symbol, Heritage:symbol)\nHas_heritage(\"Ludacris\", \"African American\").\n.decl Answer()\nAnswer() :- !Has_heritage(\"Ludacris\", \"Greek\").\n.output Answer"]}
{"id": 2083, "answer": false, "completion": ".decl Has_country(Team:symbol, Country:symbol)\nHas_country(\"New York Rangers\", \"USA\").\nHas_country(\"Toronto Maple Leafs\", \"Canada\").\nHas_country(\"Montreal Canadiens\", \"Canada\").\n.decl Belongs_to(Team:symbol, League:symbol)\nBelongs_to(\"New York Rangers\", \"National Hockey League\").\nBelongs_to(\"Toronto Maple Leafs\", \"National Hockey League\").\nBelongs_to(\"Montreal Canadiens\", \"National Hockey League\").\n.decl Answer()\nAnswer() :- Has_country(team1, \"USA\"), Belongs_to(team1, \"National Hockey League\"), Has_country(team2, \"Canada\"), Belongs_to(team2, \"National Hockey League\"), !(team1 = team2).\n.output Answer", "completions": [".decl Has_country(Team:symbol, Country:symbol)\nHas_country(\"New York Rangers\", \"USA\").\nHas_country(\"Toronto Maple Leafs\", \"Canada\").\nHas_country(\"Montreal Canadiens\", \"Canada\").\n.decl Belongs_to(Team:symbol, League:symbol)\nBelongs_to(\"New York Rangers\", \"National Hockey League\").\nBelongs_to(\"Toronto Maple Leafs\", \"National Hockey League\").\nBelongs_to(\"Montreal Canadiens\", \"National Hockey League\").\n.decl Answer()\nAnswer() :- Has_country(team1, \"USA\"), Belongs_to(team1, \"National Hockey League\"), Has_country(team2, \"Canada\"), Belongs_to(team2, \"National Hockey League\"), !(team1 = team2).\n.output Answer"]}
{"id": 2084, "answer": true, "completion": ".decl Appears_on(Person:symbol, Show:symbol)\n.decl Answer()\nAnswer() :- !Appears_on(\"Pope\", \"Pimp My Ride\").\n.output Answer", "completions": [".decl Appears_on(Person:symbol, Show:symbol)\n.decl Answer()\nAnswer() :- !Appears_on(\"Pope\", \"Pimp My Ride\").\n.output Answer"]}
{"id": 2085, "answer": false, "completion": ".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"year\", 12).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"African Elephant pregnancy\", 18).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"African Elephant pregnancy\", n_months1), Last_n_months(\"year\", n_months2),  n_months1 <= n_months2.\n.output Answer", "completions": [".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"year\", 12).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"African Elephant pregnancy\", 18).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"African Elephant pregnancy\", n_months1), Last_n_months(\"year\", n_months2),  n_months1 <= n_months2.\n.output Answer"]}
{"id": 2086, "answer": false, "completion": ".decl Uses(Person:symbol, Technology:symbol)\nUses(\"William Shakespeare\", \"quill\").\n.decl Answer()\nAnswer() :- !Uses(\"William Shakespeare\", \"email\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Technology:symbol)\nUses(\"William Shakespeare\", \"quill\").\n.decl Answer()\nAnswer() :- !Uses(\"William Shakespeare\", \"email\").\n.output Answer"]}
{"id": 2087, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"newborn\", 0.5).\nHas_height(\"fully grown horseradish plant\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"newborn\", height1), Has_height(\"fully grown horseradish plant\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"newborn\", 0.5).\nHas_height(\"fully grown horseradish plant\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"newborn\", height1), Has_height(\"fully grown horseradish plant\", height2), height1 < height2.\n.output Answer"]}
{"id": 2088, "answer": false, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"2020 richest billionaire\", 10^9).\n.decl Cost_of_living(Country:symbol, Cost:float)\nCost_of_living(\"Cambodia\", 10^7).\n.decl Answer()\nAnswer() :- Has_net_worth(\"2020 richest billionaire\", net_worth), Cost_of_living(\"Cambodia\", cost), net_worth < cost.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"2020 richest billionaire\", 10^9).\n.decl Cost_of_living(Country:symbol, Cost:float)\nCost_of_living(\"Cambodia\", 10^7).\n.decl Answer()\nAnswer() :- Has_net_worth(\"2020 richest billionaire\", net_worth), Cost_of_living(\"Cambodia\", cost), net_worth < cost.\n.output Answer"]}
{"id": 2089, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Holstein cow\", 1000).\nHas_weight(\"Liberty Bell\", 2000).\nHas_weight(\"giant scale\", 3000).\n.decl Answer()\nAnswer() :- Has_weight(\"Holstein cow\", weight1), Has_weight(\"Liberty Bell\", weight2), Has_weight(\"giant scale\", weight3), weight1 + weight2 = weight3.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Holstein cow\", 1000).\nHas_weight(\"Liberty Bell\", 2000).\nHas_weight(\"giant scale\", 3000).\n.decl Answer()\nAnswer() :- Has_weight(\"Holstein cow\", weight1), Has_weight(\"Liberty Bell\", weight2), Has_weight(\"giant scale\", weight3), weight1 + weight2 = weight3.\n.output Answer"]}
{"id": 2090, "answer": true, "completion": ".decl Has_ethnicity(Person:symbol, Ethnicity:symbol)\nHas_ethnicity(\"Cleopatra\", \"Egyptian\").\nHas_ethnicity(\"Cleopatra\", \"Greek\").\n.decl Answer()\nAnswer() :- Has_ethnicity(\"Cleopatra\", ethnicity1), Has_ethnicity(\"Cleopatra\", ethnicity2), ethnicity1 != ethnicity2, ethnicity1 = \"Egyptian\".\n.output Answer", "completions": [".decl Has_ethnicity(Person:symbol, Ethnicity:symbol)\nHas_ethnicity(\"Cleopatra\", \"Egyptian\").\nHas_ethnicity(\"Cleopatra\", \"Greek\").\n.decl Answer()\nAnswer() :- Has_ethnicity(\"Cleopatra\", ethnicity1), Has_ethnicity(\"Cleopatra\", ethnicity2), ethnicity1 != ethnicity2, ethnicity1 = \"Egyptian\".\n.output Answer"]}
{"id": 2091, "answer": true, "completion": ".decl Has_healing_properties(Substance:symbol, Healing_properties:symbol)\nHas_healing_properties(\"honey\", \"yes\").\n.decl Answer()\nAnswer() :- Has_healing_properties(\"honey\", \"yes\").\n.output Answer", "completions": [".decl Has_healing_properties(Substance:symbol, Healing_properties:symbol)\nHas_healing_properties(\"honey\", \"yes\").\n.decl Answer()\nAnswer() :- Has_healing_properties(\"honey\", \"yes\").\n.output Answer"]}
{"id": 2092, "answer": true, "completion": ".decl Spreads_to(Disease:symbol, Group:symbol)\nSpreads_to(\"COVID-19\", \"maritime pilots\").\n.decl Answer()\nAnswer() :- Spreads_to(\"COVID-19\", \"maritime pilots\").\n.output Answer", "completions": [".decl Spreads_to(Disease:symbol, Group:symbol)\nSpreads_to(\"COVID-19\", \"maritime pilots\").\n.decl Answer()\nAnswer() :- Spreads_to(\"COVID-19\", \"maritime pilots\").\n.output Answer"]}
{"id": 2093, "answer": true, "completion": ".decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"duke\", \"noble\").\nHas_rank(\"tsar\", \"royalty\").\n.decl Answer()\nAnswer() :- Has_rank(\"duke\", rank1), Has_rank(\"tsar\", rank2), rank1 < rank2.\n.output Answer", "completions": [".decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"duke\", \"noble\").\nHas_rank(\"tsar\", \"royalty\").\n.decl Answer()\nAnswer() :- Has_rank(\"duke\", rank1), Has_rank(\"tsar\", rank2), rank1 < rank2.\n.output Answer"]}
{"id": 2094, "answer": true, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"John\", \"male\").\nHas_gender(\"Jane\", \"female\").\n.decl Is_twin(Person_A:symbol, Person_B:symbol)\nIs_twin(\"John\", \"Jane\").\n.decl Answer()\nAnswer() :- Is_twin(person1, person2), Has_gender(person1, gender1), Has_gender(person2, gender2), gender1 = gender2.\n.output Answer", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"John\", \"male\").\nHas_gender(\"Jane\", \"female\").\n.decl Is_twin(Person_A:symbol, Person_B:symbol)\nIs_twin(\"John\", \"Jane\").\n.decl Answer()\nAnswer() :- Is_twin(person1, person2), Has_gender(person1, gender1), Has_gender(person2, gender2), gender1 = gender2.\n.output Answer"]}
{"id": 2095, "answer": false, "completion": ".decl Suffers_from(Organism:symbol, Disease:symbol)\n.decl Answer()\nAnswer() :- !Suffers_from(\"dandelion\", \"hepatitis\").\n.output Answer", "completions": [".decl Suffers_from(Organism:symbol, Disease:symbol)\n.decl Answer()\nAnswer() :- !Suffers_from(\"dandelion\", \"hepatitis\").\n.output Answer"]}
{"id": 2096, "answer": false, "completion": ".decl Competes_for(Person_A:symbol, Person_B:symbol, Award:symbol)\n.decl Answer()\nAnswer() :- !Competes_for(\"Jack Black\", \"Bear McCreary\", award).\n.output Answer", "completions": [".decl Competes_for(Person_A:symbol, Person_B:symbol, Award:symbol)\n.decl Answer()\nAnswer() :- !Competes_for(\"Jack Black\", \"Bear McCreary\", award).\n.output Answer"]}
{"id": 2097, "answer": false, "completion": ".decl Is_deadly(Food:symbol, Individual:symbol)\nIs_deadly(\"eggplant\", \"atopic individuals\").\n.decl Answer()\nAnswer() :- Is_deadly(\"eggplant\", \"atopic individuals\").\n.output Answer", "completions": [".decl Is_deadly(Food:symbol, Individual:symbol)\nIs_deadly(\"eggplant\", \"atopic individuals\").\n.decl Answer()\nAnswer() :- Is_deadly(\"eggplant\", \"atopic individuals\").\n.output Answer"]}
{"id": 2098, "answer": true, "completion": ".decl Takes_time(Trip:symbol, Time:float)\nTakes_time(\"New York Public Library\", 2).\nTakes_time(\"Six Flags Great Escape\", 8).\n.decl Answer()\nAnswer() :- Takes_time(\"New York Public Library\", time1), Takes_time(\"Six Flags Great Escape\", time2), time1 + time2 <= 24.\n.output Answer", "completions": [".decl Takes_time(Trip:symbol, Time:float)\nTakes_time(\"New York Public Library\", 2).\nTakes_time(\"Six Flags Great Escape\", 8).\n.decl Answer()\nAnswer() :- Takes_time(\"New York Public Library\", time1), Takes_time(\"Six Flags Great Escape\", time2), time1 + time2 <= 24.\n.output Answer"]}
{"id": 2099, "answer": true, "completion": ".decl Uses(Company:symbol, Carrier:symbol)\nUses(\"Southwest Airlines\", \"bulk carriers\").\n.decl Answer()\nAnswer() :- Uses(\"Southwest Airlines\", \"bulk carriers\").\n.output Answer", "completions": [".decl Uses(Company:symbol, Carrier:symbol)\nUses(\"Southwest Airlines\", \"bulk carriers\").\n.decl Answer()\nAnswer() :- Uses(\"Southwest Airlines\", \"bulk carriers\").\n.output Answer"]}
{"id": 2100, "answer": true, "completion": ".decl Has_radiation(Location:symbol, Radiation:symbol)\nHas_radiation(\"Colorado Springs\", \"low\").\n.decl Worked_at(Person:symbol, Location:symbol)\nWorked_at(\"Nikola Tesla\", \"Colorado Springs\").\n.decl Answer()\nAnswer() :- Worked_at(\"Nikola Tesla\", location), Has_radiation(location, radiation), radiation != \"none\".\n.output Answer", "completions": [".decl Has_radiation(Location:symbol, Radiation:symbol)\nHas_radiation(\"Colorado Springs\", \"low\").\n.decl Worked_at(Person:symbol, Location:symbol)\nWorked_at(\"Nikola Tesla\", \"Colorado Springs\").\n.decl Answer()\nAnswer() :- Worked_at(\"Nikola Tesla\", location), Has_radiation(location, radiation), radiation != \"none\".\n.output Answer"]}
{"id": 2101, "answer": true, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Steve Martin\", \"shrimp pasta\").\n.decl Answer()\nAnswer() :- !Likes(\"Steve Martin\", \"shrimp pasta\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Steve Martin\", \"shrimp pasta\").\n.decl Answer()\nAnswer() :- !Likes(\"Steve Martin\", \"shrimp pasta\").\n.output Answer"]}
{"id": 2102, "answer": false, "completion": ".decl Has_color(Movie:symbol, Color:symbol)\nHas_color(\"The Mentalist\", \"color\").\n.decl Answer()\nAnswer() :- !Has_color(\"The Mentalist\", \"black and white\").\n.output Answer", "completions": [".decl Has_color(Movie:symbol, Color:symbol)\nHas_color(\"The Mentalist\", \"color\").\n.decl Answer()\nAnswer() :- !Has_color(\"The Mentalist\", \"black and white\").\n.output Answer"]}
{"id": 2103, "answer": true, "completion": ".decl Exists_in_real_world(Object:symbol)\nExists_in_real_world(\"olive tree\").\nExists_in_real_world(\"Bugs Bunny\").\n.decl Answer()\nAnswer() :- Exists_in_real_world(\"olive tree\"), !Exists_in_real_world(\"Bugs Bunny\").\n.output Answer", "completions": [".decl Exists_in_real_world(Object:symbol)\nExists_in_real_world(\"olive tree\").\nExists_in_real_world(\"Bugs Bunny\").\n.decl Answer()\nAnswer() :- Exists_in_real_world(\"olive tree\"), !Exists_in_real_world(\"Bugs Bunny\").\n.output Answer"]}
{"id": 2104, "answer": false, "completion": ".decl Is_normal(Thing:symbol, Normal:symbol)\nIs_normal(\"blue lips\", \"no\").\n.decl Answer()\nAnswer() :- Is_normal(\"blue lips\", \"no\").\n.output Answer", "completions": [".decl Is_normal(Thing:symbol, Normal:symbol)\nIs_normal(\"blue lips\", \"no\").\n.decl Answer()\nAnswer() :- Is_normal(\"blue lips\", \"no\").\n.output Answer"]}
{"id": 2105, "answer": true, "completion": ".decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"second row\", \"A\").\nHas_letter(\"second row\", \"B\").\nHas_letter(\"second row\", \"D\").\nHas_letter(\"second row\", \"S\").\nHas_letter(\"second row\", \"T\").\nHas_letter(\"second row\", \"A\").\nHas_letter(\"second row\", \"R\").\nHas_letter(\"second row\", \"T\").\nHas_letter(\"second row\", \"U\").\nHas_letter(\"second row\", \"S\").\n.decl Answer()\nAnswer() :- Has_letter(\"second row\", letter1), Has_letter(\"second row\", letter2), Has_letter(\"second row\", letter3), Has_letter(\"second row\", letter4), Has_letter(\"second row\", letter5), Has_letter(\"second row\", letter6), Has_letter(\"second row\", letter7), Has_letter(\"second row\", letter8), Has_letter(\"second row\", letter9), letter1 = \"A\", letter2 = \"B\", letter3 = \"D\", letter4 = \"A\", letter5 = \"S\", letter6 = \"T\", letter7 = \"A\", letter8 = \"R\", letter9 = \"T\", letter10 = \"U\", letter11 = \"S\".\n.output Answer", "completions": [".decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"second row\", \"A\").\nHas_letter(\"second row\", \"B\").\nHas_letter(\"second row\", \"D\").\nHas_letter(\"second row\", \"S\").\nHas_letter(\"second row\", \"T\").\nHas_letter(\"second row\", \"A\").\nHas_letter(\"second row\", \"R\").\nHas_letter(\"second row\", \"T\").\nHas_letter(\"second row\", \"U\").\nHas_letter(\"second row\", \"S\").\n.decl Answer()\nAnswer() :- Has_letter(\"second row\", letter1), Has_letter(\"second row\", letter2), Has_letter(\"second row\", letter3), Has_letter(\"second row\", letter4), Has_letter(\"second row\", letter5), Has_letter(\"second row\", letter6), Has_letter(\"second row\", letter7), Has_letter(\"second row\", letter8), Has_letter(\"second row\", letter9), letter1 = \"A\", letter2 = \"B\", letter3 = \"D\", letter4 = \"A\", letter5 = \"S\", letter6 = \"T\", letter7 = \"A\", letter8 = \"R\", letter9 = \"T\", letter10 = \"U\", letter11 = \"S\".\n.output Answer"]}
{"id": 2106, "answer": true, "completion": ".decl Has_seats(Car:symbol, N_seats:float)\nHas_seats(\"2020 Jaguar F Type\", 4).\n.decl Has_family_members(Person:symbol, N_members:float)\nHas_family_members(\"Barack Obama\", 5).\n.decl Answer()\nAnswer() :- Has_seats(\"2020 Jaguar F Type\", n_seats), Has_family_members(\"Barack Obama\", n_members), n_seats >= n_members.\n.output Answer", "completions": [".decl Has_seats(Car:symbol, N_seats:float)\nHas_seats(\"2020 Jaguar F Type\", 4).\n.decl Has_family_members(Person:symbol, N_members:float)\nHas_family_members(\"Barack Obama\", 5).\n.decl Answer()\nAnswer() :- Has_seats(\"2020 Jaguar F Type\", n_seats), Has_family_members(\"Barack Obama\", n_members), n_seats >= n_members.\n.output Answer"]}
{"id": 2107, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"peach fruit\", \"orange\").\nHas_color(\"Princess Peach's dress\", \"pink\").\n.decl Answer()\nAnswer() :- Has_color(\"peach fruit\", color1), Has_color(\"Princess Peach's dress\", color2), color1 != color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"peach fruit\", \"orange\").\nHas_color(\"Princess Peach's dress\", \"pink\").\n.decl Answer()\nAnswer() :- Has_color(\"peach fruit\", color1), Has_color(\"Princess Peach's dress\", color2), color1 != color2.\n.output Answer"]}
{"id": 2108, "answer": true, "completion": ".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"La Grenouille\", \"French cuisine\").\n.decl Is_strange(Dish:symbol)\nIs_strange(\"salsa\").\n.decl Answer()\nAnswer() :- Serves(\"La Grenouille\", dish), Is_strange(dish).\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"La Grenouille\", \"French cuisine\").\n.decl Is_strange(Dish:symbol)\nIs_strange(\"salsa\").\n.decl Answer()\nAnswer() :- Serves(\"La Grenouille\", dish), Is_strange(dish).\n.output Answer"]}
{"id": 2109, "answer": true, "completion": ".decl Goes_to(Person:symbol, Place:symbol)\nGoes_to(\"Abdulqawi Yusuf\", \"The Hague\").\n.decl Is_work_day(Day:symbol)\nIs_work_day(\"Monday\").\nIs_work_day(\"Tuesday\").\nIs_work_day(\"Wednesday\").\nIs_work_day(\"Thursday\").\nIs_work_day(\"Friday\").\n.decl Answer()\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"The Hague\"), Is_work_day(day).\n.output Answer", "completions": [".decl Goes_to(Person:symbol, Place:symbol)\nGoes_to(\"Abdulqawi Yusuf\", \"The Hague\").\n.decl Is_work_day(Day:symbol)\nIs_work_day(\"Monday\").\nIs_work_day(\"Tuesday\").\nIs_work_day(\"Wednesday\").\nIs_work_day(\"Thursday\").\nIs_work_day(\"Friday\").\n.decl Answer()\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"The Hague\"), Is_work_day(day).\n.output Answer"]}
{"id": 2110, "answer": true, "completion": ".decl Is_comparable(Object_A:symbol, Object_B:symbol)\nIs_comparable(\"blood spatter pattern\", \"Jackson Pollock piece\").\n.decl Answer()\nAnswer() :- Is_comparable(\"blood spatter pattern\", \"Jackson Pollock piece\").\n.output Answer", "completions": [".decl Is_comparable(Object_A:symbol, Object_B:symbol)\nIs_comparable(\"blood spatter pattern\", \"Jackson Pollock piece\").\n.decl Answer()\nAnswer() :- Is_comparable(\"blood spatter pattern\", \"Jackson Pollock piece\").\n.output Answer"]}
{"id": 2111, "answer": true, "completion": ".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Miami\", 56.6).\nHas_area(\"Uppsala\", 59.8).\n.decl Answer()\nAnswer() :- Has_area(\"Miami\", area1), Has_area(\"Uppsala\", area2), area1 <= area2.\n.output Answer", "completions": [".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Miami\", 56.6).\nHas_area(\"Uppsala\", 59.8).\n.decl Answer()\nAnswer() :- Has_area(\"Miami\", area1), Has_area(\"Uppsala\", area2), area1 <= area2.\n.output Answer"]}
{"id": 2112, "answer": false, "completion": ".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"furniture\", \"wood\").\nIs_made_of(\"furniture\", \"metal\").\nIs_made_of(\"furniture\", \"plastic\").\n.decl Answer()\nAnswer() :- Is_made_of(\"furniture\", \"hair\").\n.output Answer", "completions": [".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"furniture\", \"wood\").\nIs_made_of(\"furniture\", \"metal\").\nIs_made_of(\"furniture\", \"plastic\").\n.decl Answer()\nAnswer() :- Is_made_of(\"furniture\", \"hair\").\n.output Answer"]}
{"id": 2113, "answer": false, "completion": ".decl Succeeds(Person_A:symbol, Person_B:symbol, Year:float)\nSucceeds(\"Jacinda Ardern\", \"John Key\", 2017).\n.decl Precedes(Person_A:symbol, Person_B:symbol, Year:float)\nPrecedes(\"Helen Clark\", \"John Key\", 2008).\n.decl Answer()\nAnswer() :- Succeeds(person1, \"John Key\", year1), Precedes(person2, \"John Key\", year2), year1 > year2, person1 = \"female\", person2 = \"female\".\n.output Answer", "completions": [".decl Succeeds(Person_A:symbol, Person_B:symbol, Year:float)\nSucceeds(\"Jacinda Ardern\", \"John Key\", 2017).\n.decl Precedes(Person_A:symbol, Person_B:symbol, Year:float)\nPrecedes(\"Helen Clark\", \"John Key\", 2008).\n.decl Answer()\nAnswer() :- Succeeds(person1, \"John Key\", year1), Precedes(person2, \"John Key\", year2), year1 > year2, person1 = \"female\", person2 = \"female\".\n.output Answer"]}
{"id": 2114, "answer": true, "completion": ".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"Toyota Prius battery\", -40).\nHas_melting_point(\"microwave\", 1000).\n.decl Answer()\nAnswer() :- Has_melting_point(\"Toyota Prius battery\", melting_point1), Has_melting_point(\"microwave\", melting_point2), melting_point2 > melting_point1.\n.output Answer", "completions": [".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"Toyota Prius battery\", -40).\nHas_melting_point(\"microwave\", 1000).\n.decl Answer()\nAnswer() :- Has_melting_point(\"Toyota Prius battery\", melting_point1), Has_melting_point(\"microwave\", melting_point2), melting_point2 > melting_point1.\n.output Answer"]}
{"id": 2115, "answer": true, "completion": ".decl Has_health(Person:symbol, Health:symbol)\nHas_health(\"J. P. Morgan\", \"healthy\").\n.decl Has_organ(Person:symbol, Organ:symbol)\nHas_organ(\"J. P. Morgan\", \"lungs\").\n.decl Answer()\nAnswer() :- Has_health(\"J. P. Morgan\", health), Has_organ(\"J. P. Morgan\", organ), health = \"healthy\".\n.output Answer", "completions": [".decl Has_health(Person:symbol, Health:symbol)\nHas_health(\"J. P. Morgan\", \"healthy\").\n.decl Has_organ(Person:symbol, Organ:symbol)\nHas_organ(\"J. P. Morgan\", \"lungs\").\n.decl Answer()\nAnswer() :- Has_health(\"J. P. Morgan\", health), Has_organ(\"J. P. Morgan\", organ), health = \"healthy\".\n.output Answer"]}
{"id": 2116, "answer": true, "completion": ".decl Has_been_in_bands(Person:symbol, N_bands:float)\nHas_been_in_bands(\"Gorillaz creator\", 3).\nHas_been_in_bands(\"Bernard Sumner\", 2).\n.decl Answer()\nAnswer() :- Has_been_in_bands(\"Gorillaz creator\", n_bands1), Has_been_in_bands(\"Bernard Sumner\", n_bands2), n_bands1 > n_bands2.\n.output Answer", "completions": [".decl Has_been_in_bands(Person:symbol, N_bands:float)\nHas_been_in_bands(\"Gorillaz creator\", 3).\nHas_been_in_bands(\"Bernard Sumner\", 2).\n.decl Answer()\nAnswer() :- Has_been_in_bands(\"Gorillaz creator\", n_bands1), Has_been_in_bands(\"Bernard Sumner\", n_bands2), n_bands1 > n_bands2.\n.output Answer"]}
{"id": 2117, "answer": true, "completion": ".decl Can_kill(Object:symbol, Person:symbol)\nCan_kill(\"wheelbarrow full of starch\", \"hyperglycemics\").\n.decl Answer()\nAnswer() :- Can_kill(\"wheelbarrow full of starch\", \"hyperglycemics\").\n.output Answer", "completions": [".decl Can_kill(Object:symbol, Person:symbol)\nCan_kill(\"wheelbarrow full of starch\", \"hyperglycemics\").\n.decl Answer()\nAnswer() :- Can_kill(\"wheelbarrow full of starch\", \"hyperglycemics\").\n.output Answer"]}
{"id": 2118, "answer": true, "completion": ".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Indianapolis Motor Speedway\", 257000).\n.decl Has_casualties(Country:symbol, War:symbol, Casualties:float)\nHas_casualties(\"Austria\", \"Seven Years' War\", 80000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Indianapolis Motor Speedway\", capacity), Has_casualties(\"Austria\", \"Seven Years' War\", casualties), capacity >= casualties.\n.output Answer", "completions": [".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Indianapolis Motor Speedway\", 257000).\n.decl Has_casualties(Country:symbol, War:symbol, Casualties:float)\nHas_casualties(\"Austria\", \"Seven Years' War\", 80000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Indianapolis Motor Speedway\", capacity), Has_casualties(\"Austria\", \"Seven Years' War\", casualties), capacity >= casualties.\n.output Answer"]}
{"id": 2119, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"Pearl Harbor attack\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"Pearl Harbor attack\", \"autumn\").\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"Pearl Harbor attack\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"Pearl Harbor attack\", \"autumn\").\n.output Answer"]}
{"id": 2120, "answer": true, "completion": ".decl Occurred_on(Event:symbol, Show:symbol)\nOccurred_on(\"Christina Aguilera turning her chair around for Kelly Clarkson\", \"The Voice\").\n.decl Answer()\nAnswer() :- Occurred_on(\"Christina Aguilera turning her chair around for Kelly Clarkson\", show).\n.output Answer", "completions": [".decl Occurred_on(Event:symbol, Show:symbol)\nOccurred_on(\"Christina Aguilera turning her chair around for Kelly Clarkson\", \"The Voice\").\n.decl Answer()\nAnswer() :- Occurred_on(\"Christina Aguilera turning her chair around for Kelly Clarkson\", show).\n.output Answer"]}
{"id": 2121, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"World of Warcraft\", 0.5).\nHas_weight(\"loaf of bread\", 0.3).\n.decl Answer()\nAnswer() :- Has_weight(\"World of Warcraft\", weight1), Has_weight(\"loaf of bread\", weight2), weight1 > weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"World of Warcraft\", 0.5).\nHas_weight(\"loaf of bread\", 0.3).\n.decl Answer()\nAnswer() :- Has_weight(\"World of Warcraft\", weight1), Has_weight(\"loaf of bread\", weight2), weight1 > weight2.\n.output Answer"]}
{"id": 2122, "answer": true, "completion": ".decl Believes(Person:symbol, Ideology:symbol)\nBelieves(\"right wing American\", \"capitalism\").\nBelieves(\"right wing American\", \"conservatism\").\nBelieves(\"right wing American\", \"libertarianism\").\nBelieves(\"left wing American\", \"marxism\").\n.decl Answer()\nAnswer() :- Believes(\"right wing American\", ideology1), Believes(\"left wing American\", ideology2), ideology1 != ideology2.\n.output Answer", "completions": [".decl Believes(Person:symbol, Ideology:symbol)\nBelieves(\"right wing American\", \"capitalism\").\nBelieves(\"right wing American\", \"conservatism\").\nBelieves(\"right wing American\", \"libertarianism\").\nBelieves(\"left wing American\", \"marxism\").\n.decl Answer()\nAnswer() :- Believes(\"right wing American\", ideology1), Believes(\"left wing American\", ideology2), ideology1 != ideology2.\n.output Answer"]}
{"id": 2123, "answer": true, "completion": ".decl Has_budget(Film:symbol, Budget:float)\nHas_budget(\"King Kong (2005 film)\", 207000000).\n.decl Has_box_office_revenue(Film:symbol, Box_office_revenue:float)\nHas_box_office_revenue(\"King Kong (2005 film)\", 554000000).\n.decl Answer()\nAnswer() :- Has_budget(\"King Kong (2005 film)\", budget), Has_box_office_revenue(\"King Kong (2005 film)\", box_office_revenue), budget < box_office_revenue.\n.output Answer", "completions": [".decl Has_budget(Film:symbol, Budget:float)\nHas_budget(\"King Kong (2005 film)\", 207000000).\n.decl Has_box_office_revenue(Film:symbol, Box_office_revenue:float)\nHas_box_office_revenue(\"King Kong (2005 film)\", 554000000).\n.decl Answer()\nAnswer() :- Has_budget(\"King Kong (2005 film)\", budget), Has_box_office_revenue(\"King Kong (2005 film)\", box_office_revenue), budget < box_office_revenue.\n.output Answer"]}
{"id": 2124, "answer": true, "completion": ".decl Is_good_for(Gardener:symbol, Plant:symbol)\nIs_good_for(\"gardener with entomophobia\", \"seedless cucumber\").\n.decl Answer()\nAnswer() :- Is_good_for(\"gardener with entomophobia\", \"seedless cucumber\").\n.output Answer", "completions": [".decl Is_good_for(Gardener:symbol, Plant:symbol)\nIs_good_for(\"gardener with entomophobia\", \"seedless cucumber\").\n.decl Answer()\nAnswer() :- Is_good_for(\"gardener with entomophobia\", \"seedless cucumber\").\n.output Answer"]}
{"id": 2125, "answer": true, "completion": ".decl Likes(Person:symbol, Cuisine:symbol)\nLikes(\"Garfield\", \"lasagna\").\n.decl Answer()\nAnswer() :- !Likes(\"Garfield\", \"italian cuisine\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Cuisine:symbol)\nLikes(\"Garfield\", \"lasagna\").\n.decl Answer()\nAnswer() :- !Likes(\"Garfield\", \"italian cuisine\").\n.output Answer"]}
{"id": 2126, "answer": false, "completion": ".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"Shinto practitioners\", \"Shinto diet\").\n.decl Is_kosher(Diet:symbol)\nIs_kosher(\"Kosher diet\").\n.decl Answer()\nAnswer() :- Follows_diet(person, diet), Is_kosher(diet).\n.output Answer", "completions": [".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"Shinto practitioners\", \"Shinto diet\").\n.decl Is_kosher(Diet:symbol)\nIs_kosher(\"Kosher diet\").\n.decl Answer()\nAnswer() :- Follows_diet(person, diet), Is_kosher(diet).\n.output Answer"]}
{"id": 2127, "answer": true, "completion": ".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"leaves\", \"smooth\").\n.decl Answer()\nAnswer() :- Has_texture(\"leaves\", texture).\n.output Answer", "completions": [".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"leaves\", \"smooth\").\n.decl Answer()\nAnswer() :- Has_texture(\"leaves\", texture).\n.output Answer"]}
{"id": 2128, "answer": false, "completion": ".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Sam Harris\", \"Buddha\").\n.decl Answer()\nAnswer() :- Worships(\"Sam Harris\", \"Shiva\"), !Worships(\"Sam Harris\", \"Buddha\").\n.output Answer", "completions": [".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Sam Harris\", \"Buddha\").\n.decl Answer()\nAnswer() :- Worships(\"Sam Harris\", \"Shiva\"), !Worships(\"Sam Harris\", \"Buddha\").\n.output Answer"]}
{"id": 2129, "answer": true, "completion": ".decl Has_species(Tree:symbol, Species:symbol)\nHas_species(\"Leipzig\", \"Pinus sylvestris\").\n.decl Is_evergreen(Species:symbol)\nIs_evergreen(\"Pinus sylvestris\").\n.decl Answer()\nAnswer() :- Has_species(\"Leipzig\", species), Is_evergreen(species).\n.output Answer", "completions": [".decl Has_species(Tree:symbol, Species:symbol)\nHas_species(\"Leipzig\", \"Pinus sylvestris\").\n.decl Is_evergreen(Species:symbol)\nIs_evergreen(\"Pinus sylvestris\").\n.decl Answer()\nAnswer() :- Has_species(\"Leipzig\", species), Is_evergreen(species).\n.output Answer"]}
{"id": 2130, "answer": true, "completion": ".decl Causes_pain(Treatment:symbol, People:symbol)\nCauses_pain(\"acupuncture\", \"many people\").\n.decl Answer()\nAnswer() :- Causes_pain(\"acupuncture\", people).\n.output Answer", "completions": [".decl Causes_pain(Treatment:symbol, People:symbol)\nCauses_pain(\"acupuncture\", \"many people\").\n.decl Answer()\nAnswer() :- Causes_pain(\"acupuncture\", people).\n.output Answer"]}
{"id": 2131, "answer": false, "completion": ".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"RoboCop director\", \"United States\").\nIs_from(\"Gaite Jansen\", \"Netherlands\").\n.decl Answer()\nAnswer() :- Is_from(\"RoboCop director\", country1), Is_from(\"Gaite Jansen\", country2), country1 = country2.\n.output Answer", "completions": [".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"RoboCop director\", \"United States\").\nIs_from(\"Gaite Jansen\", \"Netherlands\").\n.decl Answer()\nAnswer() :- Is_from(\"RoboCop director\", country1), Is_from(\"Gaite Jansen\", country2), country1 = country2.\n.output Answer"]}
{"id": 2132, "answer": true, "completion": ".decl Has_injury(Person:symbol, Injury:symbol)\nHas_injury(\"person\", \"leg cast\").\n.decl Answer()\nAnswer() :- Has_injury(\"person\", \"leg cast\"), !Has_injury(\"person\", \"sandal\").\n.output Answer", "completions": [".decl Has_injury(Person:symbol, Injury:symbol)\nHas_injury(\"person\", \"leg cast\").\n.decl Answer()\nAnswer() :- Has_injury(\"person\", \"leg cast\"), !Has_injury(\"person\", \"sandal\").\n.output Answer"]}
{"id": 2133, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"food made with black salt\", \"black salt\").\n.decl Has_smell(Ingredient:symbol, Smell:symbol)\nHas_smell(\"black salt\", \"sulfur\").\n.decl Answer()\nAnswer() :- Has_ingredient(food, \"black salt\"), Has_smell(\"black salt\", smell), smell = \"sulfur\".\n.output Answer", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"food made with black salt\", \"black salt\").\n.decl Has_smell(Ingredient:symbol, Smell:symbol)\nHas_smell(\"black salt\", \"sulfur\").\n.decl Answer()\nAnswer() :- Has_ingredient(food, \"black salt\"), Has_smell(\"black salt\", smell), smell = \"sulfur\".\n.output Answer"]}
{"id": 2134, "answer": true, "completion": ".decl Has_lifespan(Species:symbol, Lifespan:float)\nHas_lifespan(\"Hawaiian male\", 80).\nHas_lifespan(\"wild cane toad\", 10).\n.decl Answer()\nAnswer() :- Has_lifespan(\"Hawaiian male\", lifespan1), Has_lifespan(\"wild cane toad\", lifespan2), lifespan1 > lifespan2.\n.output Answer", "completions": [".decl Has_lifespan(Species:symbol, Lifespan:float)\nHas_lifespan(\"Hawaiian male\", 80).\nHas_lifespan(\"wild cane toad\", 10).\n.decl Answer()\nAnswer() :- Has_lifespan(\"Hawaiian male\", lifespan1), Has_lifespan(\"wild cane toad\", lifespan2), lifespan1 > lifespan2.\n.output Answer"]}
{"id": 2135, "answer": true, "completion": ".decl Needs_condition(Object:symbol, Condition:symbol)\nNeeds_condition(\"eggs\", \"cold\").\n.decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"middle ages\", \"before refrigeration\").\n.decl Answer()\nAnswer() :- Needs_condition(\"eggs\", condition), Happened_in_time(\"middle ages\", time), time = \"before refrigeration\".\n.output Answer", "completions": [".decl Needs_condition(Object:symbol, Condition:symbol)\nNeeds_condition(\"eggs\", \"cold\").\n.decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"middle ages\", \"before refrigeration\").\n.decl Answer()\nAnswer() :- Needs_condition(\"eggs\", condition), Happened_in_time(\"middle ages\", time), time = \"before refrigeration\".\n.output Answer"]}
{"id": 2136, "answer": true, "completion": ".decl Has_disorder(Person:symbol, Disorder:symbol)\nHas_disorder(\"John\", \"swallowing disorder\").\n.decl Has_viscosity(Drink:symbol, Viscosity:float)\nHas_viscosity(\"juice\", 0.5).\nHas_viscosity(\"milkshake\", 1.5).\n.decl Answer()\nAnswer() :- Has_disorder(person, \"swallowing disorder\"), Has_viscosity(drink, viscosity), viscosity > 0.5.\n.output Answer", "completions": [".decl Has_disorder(Person:symbol, Disorder:symbol)\nHas_disorder(\"John\", \"swallowing disorder\").\n.decl Has_viscosity(Drink:symbol, Viscosity:float)\nHas_viscosity(\"juice\", 0.5).\nHas_viscosity(\"milkshake\", 1.5).\n.decl Answer()\nAnswer() :- Has_disorder(person, \"swallowing disorder\"), Has_viscosity(drink, viscosity), viscosity > 0.5.\n.output Answer"]}
{"id": 2137, "answer": true, "completion": ".decl Has_attribute(Entity:symbol, Attribute:symbol)\nHas_attribute(\"Krishna\", \"omnipresent\").\nHas_attribute(\"Holy Spirit\", \"omnipresent\").\n.decl Answer()\nAnswer() :- Has_attribute(\"Krishna\", attribute1), Has_attribute(\"Holy Spirit\", attribute2), attribute1 = attribute2.\n.output Answer", "completions": [".decl Has_attribute(Entity:symbol, Attribute:symbol)\nHas_attribute(\"Krishna\", \"omnipresent\").\nHas_attribute(\"Holy Spirit\", \"omnipresent\").\n.decl Answer()\nAnswer() :- Has_attribute(\"Krishna\", attribute1), Has_attribute(\"Holy Spirit\", attribute2), attribute1 = attribute2.\n.output Answer"]}
{"id": 2138, "answer": true, "completion": ".decl Settled_with(Treaty:symbol, Food:symbol)\nSettled_with(\"Treaty of Versailles\", \"tea\").\n.decl Answer()\nAnswer() :- !Settled_with(\"Treaty of Versailles\", \"blueberry scones\").\n.output Answer", "completions": [".decl Settled_with(Treaty:symbol, Food:symbol)\nSettled_with(\"Treaty of Versailles\", \"tea\").\n.decl Answer()\nAnswer() :- !Settled_with(\"Treaty of Versailles\", \"blueberry scones\").\n.output Answer"]}
{"id": 2139, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Disney's seven dwarves\", 7).\n.decl Is_original(Group:symbol, Original:symbol)\nIs_original(\"Disney's seven dwarves\", \"yes\").\n.decl Answer()\nAnswer() :- Has_n_members(\"Disney's seven dwarves\", n_members), Is_original(\"Disney's seven dwarves\", original), n_members = 7, original = \"yes\".\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Disney's seven dwarves\", 7).\n.decl Is_original(Group:symbol, Original:symbol)\nIs_original(\"Disney's seven dwarves\", \"yes\").\n.decl Answer()\nAnswer() :- Has_n_members(\"Disney's seven dwarves\", n_members), Is_original(\"Disney's seven dwarves\", original), n_members = 7, original = \"yes\".\n.output Answer"]}
{"id": 2140, "answer": true, "completion": ".decl Knows_of(Person:symbol, Show:symbol)\nKnows_of(\"Mennonite children\", \"The Powerpuff Girls\").\n.decl Answer()\nAnswer() :- Knows_of(\"Mennonite children\", \"The Powerpuff Girls\").\n.output Answer", "completions": [".decl Knows_of(Person:symbol, Show:symbol)\nKnows_of(\"Mennonite children\", \"The Powerpuff Girls\").\n.decl Answer()\nAnswer() :- Knows_of(\"Mennonite children\", \"The Powerpuff Girls\").\n.output Answer"]}
{"id": 2141, "answer": true, "completion": ".decl Has_zodiac_sign(Religion:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"Satanism\", \"Capricorn\").\n.decl Answer()\nAnswer() :- Has_zodiac_sign(\"Satanism\", \"Capricorn\").\n.output Answer", "completions": [".decl Has_zodiac_sign(Religion:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"Satanism\", \"Capricorn\").\n.decl Answer()\nAnswer() :- Has_zodiac_sign(\"Satanism\", \"Capricorn\").\n.output Answer"]}
{"id": 2142, "answer": true, "completion": ".decl Has_ingredient(Snack:symbol, Ingredient:symbol)\nHas_ingredient(\"The King of Rock'n Roll's snack\", \"bananas\").\nHas_ingredient(\"The King of Rock'n Roll's snack\", \"plants\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"The King of Rock'n Roll's snack\", \"plants\").\n.output Answer", "completions": [".decl Has_ingredient(Snack:symbol, Ingredient:symbol)\nHas_ingredient(\"The King of Rock'n Roll's snack\", \"bananas\").\nHas_ingredient(\"The King of Rock'n Roll's snack\", \"plants\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"The King of Rock'n Roll's snack\", \"plants\").\n.output Answer"]}
{"id": 2143, "answer": true, "completion": ".decl Has_duty(Person:symbol, Duty:symbol)\nHas_duty(\"Hanuman\", \"protecting\").\nHas_duty(\"Athena\", \"protecting\").\nHas_duty(\"Athena\", \"wisdom\").\n.decl Answer()\nAnswer() :- Has_duty(\"Hanuman\", duty), Has_duty(\"Athena\", duty).\n.output Answer", "completions": [".decl Has_duty(Person:symbol, Duty:symbol)\nHas_duty(\"Hanuman\", \"protecting\").\nHas_duty(\"Athena\", \"protecting\").\nHas_duty(\"Athena\", \"wisdom\").\n.decl Answer()\nAnswer() :- Has_duty(\"Hanuman\", duty), Has_duty(\"Athena\", duty).\n.output Answer"]}
{"id": 2144, "answer": true, "completion": ".decl Affects(Disease:symbol, Organism:symbol)\nAffects(\"atherosclerosis\", \"human\").\n.decl Answer()\nAnswer() :- !Affects(\"atherosclerosis\", \"jellyfish\").\n.output Answer", "completions": [".decl Affects(Disease:symbol, Organism:symbol)\nAffects(\"atherosclerosis\", \"human\").\n.decl Answer()\nAnswer() :- !Affects(\"atherosclerosis\", \"jellyfish\").\n.output Answer"]}
{"id": 2145, "answer": true, "completion": ".decl Has_conquests(Person:symbol, N_conquests:float)\nHas_conquests(\"Charlemagne\", 7).\n.decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"Temujin\", \"jealousy\").\n.decl Answer()\nAnswer() :- Has_conquests(\"Charlemagne\", n_conquests), Has_emotion(\"Temujin\", \"jealousy\").\n.output Answer", "completions": [".decl Has_conquests(Person:symbol, N_conquests:float)\nHas_conquests(\"Charlemagne\", 7).\n.decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"Temujin\", \"jealousy\").\n.decl Answer()\nAnswer() :- Has_conquests(\"Charlemagne\", n_conquests), Has_emotion(\"Temujin\", \"jealousy\").\n.output Answer"]}
{"id": 2146, "answer": false, "completion": ".decl Has_problem(Location:symbol, Problem:symbol)\nHas_problem(\"Antarctica\", \"lack of resources\").\n.decl Answer()\nAnswer() :- Has_problem(\"Antarctica\", \"homelessness\").\n.output Answer", "completions": [".decl Has_problem(Location:symbol, Problem:symbol)\nHas_problem(\"Antarctica\", \"lack of resources\").\n.decl Answer()\nAnswer() :- Has_problem(\"Antarctica\", \"homelessness\").\n.output Answer"]}
{"id": 2147, "answer": true, "completion": ".decl Causes_death(Event:symbol, Death:symbol)\nCauses_death(\"Immersion Baptism\", \"Jeff Buckley\").\n.decl Answer()\nAnswer() :- Causes_death(\"Immersion Baptism\", \"Jeff Buckley\").\n.output Answer", "completions": [".decl Causes_death(Event:symbol, Death:symbol)\nCauses_death(\"Immersion Baptism\", \"Jeff Buckley\").\n.decl Answer()\nAnswer() :- Causes_death(\"Immersion Baptism\", \"Jeff Buckley\").\n.output Answer"]}
{"id": 2148, "answer": true, "completion": ".decl Has_vitamin_A(Food:symbol, Vitamin_A:float)\nHas_vitamin_A(\"raw carrots\", 10).\nHas_vitamin_A(\"cooked carrots\", 5).\n.decl Answer()\nAnswer() :- Has_vitamin_A(\"raw carrots\", vitamin_a1), Has_vitamin_A(\"cooked carrots\", vitamin_a2), vitamin_a1 > vitamin_a2.\n.output Answer", "completions": [".decl Has_vitamin_A(Food:symbol, Vitamin_A:float)\nHas_vitamin_A(\"raw carrots\", 10).\nHas_vitamin_A(\"cooked carrots\", 5).\n.decl Answer()\nAnswer() :- Has_vitamin_A(\"raw carrots\", vitamin_a1), Has_vitamin_A(\"cooked carrots\", vitamin_a2), vitamin_a1 > vitamin_a2.\n.output Answer"]}
{"id": 2149, "answer": true, "completion": ".decl Has_model(Person:symbol, Vehicle:symbol)\nHas_model(\"John Cena\", \"Toyota Prius\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Wrestlemania X\", \"1994\").\n.decl Answer()\nAnswer() :- Has_model(person, \"Toyota Prius\"), Happens_in_time(\"Wrestlemania X\", time), time = \"1994\".\n.output Answer", "completions": [".decl Has_model(Person:symbol, Vehicle:symbol)\nHas_model(\"John Cena\", \"Toyota Prius\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Wrestlemania X\", \"1994\").\n.decl Answer()\nAnswer() :- Has_model(person, \"Toyota Prius\"), Happens_in_time(\"Wrestlemania X\", time), time = \"1994\".\n.output Answer"]}
{"id": 2150, "answer": false, "completion": ".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Emmanuel Macron\", \"Bastille Day\").\n.decl Answer()\nAnswer() :- Celebrates(\"Emmanuel Macron\", \"Cinco de Mayo\").\n.output Answer", "completions": [".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Emmanuel Macron\", \"Bastille Day\").\n.decl Answer()\nAnswer() :- Celebrates(\"Emmanuel Macron\", \"Cinco de Mayo\").\n.output Answer"]}
{"id": 2151, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"eel\", \"fish\").\nEats(\"eel\", \"insects\").\n.decl Answer()\nAnswer() :- !Eats(\"sand cats\", prey), Eats(\"eel\", prey).\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"eel\", \"fish\").\nEats(\"eel\", \"insects\").\n.decl Answer()\nAnswer() :- !Eats(\"sand cats\", prey), Eats(\"eel\", prey).\n.output Answer"]}
{"id": 2152, "answer": false, "completion": ".decl Has_importance(Person:symbol, Event:symbol, Importance:float)\nHas_importance(\"Drew Carey\", \"wrestling\", 0).\n.decl Answer()\nAnswer() :- Has_importance(\"Drew Carey\", \"wrestling\", importance), importance > 0.\n.output Answer", "completions": [".decl Has_importance(Person:symbol, Event:symbol, Importance:float)\nHas_importance(\"Drew Carey\", \"wrestling\", 0).\n.decl Answer()\nAnswer() :- Has_importance(\"Drew Carey\", \"wrestling\", importance), importance > 0.\n.output Answer"]}
{"id": 2153, "answer": true, "completion": ".decl Uses(Industry:symbol, Fuel:symbol)\nUses(\"Gulf of Mexico\", \"fossil fuels\").\n.decl Reduces_jobs(Fuel:symbol)\nReduces_jobs(\"fossil fuels\").\n.decl Answer()\nAnswer() :- Uses(\"Gulf of Mexico\", fuel), Reduces_jobs(fuel).\n.output Answer", "completions": [".decl Uses(Industry:symbol, Fuel:symbol)\nUses(\"Gulf of Mexico\", \"fossil fuels\").\n.decl Reduces_jobs(Fuel:symbol)\nReduces_jobs(\"fossil fuels\").\n.decl Answer()\nAnswer() :- Uses(\"Gulf of Mexico\", fuel), Reduces_jobs(fuel).\n.output Answer"]}
{"id": 2154, "answer": false, "completion": ".decl Has_size(Army:symbol, Size:float)\nHas_size(\"Roman Gallic Wars army\", 100000).\n.decl Has_time_taken(Structure:symbol, Time_taken:float)\nHas_time_taken(\"pyramids\", 20).\n.decl Answer()\nAnswer() :- Has_size(\"Roman Gallic Wars army\", size), Has_time_taken(\"pyramids\", time_taken), size < time_taken.\n.output Answer", "completions": [".decl Has_size(Army:symbol, Size:float)\nHas_size(\"Roman Gallic Wars army\", 100000).\n.decl Has_time_taken(Structure:symbol, Time_taken:float)\nHas_time_taken(\"pyramids\", 20).\n.decl Answer()\nAnswer() :- Has_size(\"Roman Gallic Wars army\", size), Has_time_taken(\"pyramids\", time_taken), size < time_taken.\n.output Answer"]}
{"id": 2155, "answer": true, "completion": ".decl Works_at(Person:symbol, Company:symbol)\nWorks_at(\"John\", \"Nissan\").\n.decl Uses_utensils(Company:symbol, Utensils:symbol)\nUses_utensils(\"Nissan\", \"chopsticks\").\n.decl Answer()\nAnswer() :- Works_at(person, \"Nissan\"), Uses_utensils(\"Nissan\", \"chopsticks\").\n.output Answer", "completions": [".decl Works_at(Person:symbol, Company:symbol)\nWorks_at(\"John\", \"Nissan\").\n.decl Uses_utensils(Company:symbol, Utensils:symbol)\nUses_utensils(\"Nissan\", \"chopsticks\").\n.decl Answer()\nAnswer() :- Works_at(person, \"Nissan\"), Uses_utensils(\"Nissan\", \"chopsticks\").\n.output Answer"]}
{"id": 2156, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Environment:symbol)\nLives_in(\"manta ray\", \"water\").\n.decl Has_temperature(Environment:symbol, Temperature:float)\nHas_temperature(\"water\", 20).\n.decl Safe_temperature(Food:symbol, Temperature:float)\nSafe_temperature(\"cold food\", 5).\n.decl Answer()\nAnswer() :- Lives_in(\"manta ray\", environment), Has_temperature(environment, temperature), Safe_temperature(\"cold food\", safe_temperature), temperature > safe_temperature.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Environment:symbol)\nLives_in(\"manta ray\", \"water\").\n.decl Has_temperature(Environment:symbol, Temperature:float)\nHas_temperature(\"water\", 20).\n.decl Safe_temperature(Food:symbol, Temperature:float)\nSafe_temperature(\"cold food\", 5).\n.decl Answer()\nAnswer() :- Lives_in(\"manta ray\", environment), Has_temperature(environment, temperature), Safe_temperature(\"cold food\", safe_temperature), temperature > safe_temperature.\n.output Answer"]}
{"id": 2157, "answer": true, "completion": ".decl Has_n_people(Event:symbol, N_people:float)\nHas_n_people(\"felony jury\", 12).\nHas_n_people(\"Bunco game\", 6).\n.decl Answer()\nAnswer() :- Has_n_people(\"felony jury\", n_people1), Has_n_people(\"Bunco game\", n_people2), n_people1 >= n_people2.\n.output Answer", "completions": [".decl Has_n_people(Event:symbol, N_people:float)\nHas_n_people(\"felony jury\", 12).\nHas_n_people(\"Bunco game\", 6).\n.decl Answer()\nAnswer() :- Has_n_people(\"felony jury\", n_people1), Has_n_people(\"Bunco game\", n_people2), n_people1 >= n_people2.\n.output Answer"]}
{"id": 2158, "answer": true, "completion": ".decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Arctic Ocean\", 5669).\n.decl Has_height(Object:symbol, Height:float)\nHas_height(\"Eiffel Tower\", 324).\n.decl Answer()\nAnswer() :- Has_depth(\"Arctic Ocean\", depth), Has_height(\"Eiffel Tower\", height), depth >= height.\n.output Answer", "completions": [".decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Arctic Ocean\", 5669).\n.decl Has_height(Object:symbol, Height:float)\nHas_height(\"Eiffel Tower\", 324).\n.decl Answer()\nAnswer() :- Has_depth(\"Arctic Ocean\", depth), Has_height(\"Eiffel Tower\", height), depth >= height.\n.output Answer"]}
{"id": 2159, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"CEO\", \"manage\").\n.decl Answer()\nAnswer() :- !Has_job(\"CEO\", \"clean toilets\").\n.output Answer", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"CEO\", \"manage\").\n.decl Answer()\nAnswer() :- !Has_job(\"CEO\", \"clean toilets\").\n.output Answer"]}
{"id": 2160, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas\", month), In_season(month, \"winter\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas\", month), In_season(month, \"winter\").\n.output Answer"]}
{"id": 2161, "answer": true, "completion": ".decl Has_lover(Person:symbol, Lover:symbol)\nHas_lover(\"Queen Margot\", \"Henry IV\").\n.decl Answer()\nAnswer() :- !Has_lover(\"Queen Margot\", \"Moliere\").\n.output Answer", "completions": [".decl Has_lover(Person:symbol, Lover:symbol)\nHas_lover(\"Queen Margot\", \"Henry IV\").\n.decl Answer()\nAnswer() :- !Has_lover(\"Queen Margot\", \"Moliere\").\n.output Answer"]}
{"id": 2162, "answer": true, "completion": ".decl Needs_for_best_look(Plant:symbol, Need:symbol)\nNeeds_for_best_look(\"Hostas\", \"lots of chlorophyll\").\n.decl Answer()\nAnswer() :- Needs_for_best_look(\"Hostas\", \"lots of chlorophyll\").\n.output Answer", "completions": [".decl Needs_for_best_look(Plant:symbol, Need:symbol)\nNeeds_for_best_look(\"Hostas\", \"lots of chlorophyll\").\n.decl Answer()\nAnswer() :- Needs_for_best_look(\"Hostas\", \"lots of chlorophyll\").\n.output Answer"]}
{"id": 2163, "answer": false, "completion": ".decl Has_form(Poem:symbol, Form:symbol)\nHas_form(\"Rime of the Ancient Mariner\", \"ballad\").\n.decl Is_sonnet(Form:symbol)\nIs_sonnet(\"sonnet\").\n.decl Answer()\nAnswer() :- Has_form(\"Rime of the Ancient Mariner\", form), Is_sonnet(form), !Has_form(\"Rime of the Ancient Mariner\", \"sonnet\").\n.output Answer", "completions": [".decl Has_form(Poem:symbol, Form:symbol)\nHas_form(\"Rime of the Ancient Mariner\", \"ballad\").\n.decl Is_sonnet(Form:symbol)\nIs_sonnet(\"sonnet\").\n.decl Answer()\nAnswer() :- Has_form(\"Rime of the Ancient Mariner\", form), Is_sonnet(form), !Has_form(\"Rime of the Ancient Mariner\", \"sonnet\").\n.output Answer"]}
{"id": 2164, "answer": false, "completion": ".decl Studies(Person:symbol, Subject:symbol)\nStudies(\"astronomer\", \"astronomy\").\nStudies(\"geneticist\", \"drosophila\").\n.decl Answer()\nAnswer() :- Studies(\"astronomer\", subject), Studies(\"geneticist\", subject).\n.output Answer", "completions": [".decl Studies(Person:symbol, Subject:symbol)\nStudies(\"astronomer\", \"astronomy\").\nStudies(\"geneticist\", \"drosophila\").\n.decl Answer()\nAnswer() :- Studies(\"astronomer\", subject), Studies(\"geneticist\", subject).\n.output Answer"]}
{"id": 2165, "answer": true, "completion": ".decl Has_currency(Country:symbol, Currency:symbol)\nHas_currency(\"United States\", \"USD\").\nHas_currency(\"United Kingdom\", \"FARTHING\").\n.decl Has_foil_color(Product:symbol, Foil_color:symbol)\nHas_foil_color(\"Hershey's Kisses\", \"red\").\n.decl Was_in_use_after(Currency:symbol, Year:float)\nWas_in_use_after(\"FARTHING\", 1960).\n.decl Answer()\nAnswer() :- Has_currency(\"United Kingdom\", currency), Has_foil_color(\"Hershey's Kisses\", \"red\"), Was_in_use_after(currency, 1960).\n.output Answer", "completions": [".decl Has_currency(Country:symbol, Currency:symbol)\nHas_currency(\"United States\", \"USD\").\nHas_currency(\"United Kingdom\", \"FARTHING\").\n.decl Has_foil_color(Product:symbol, Foil_color:symbol)\nHas_foil_color(\"Hershey's Kisses\", \"red\").\n.decl Was_in_use_after(Currency:symbol, Year:float)\nWas_in_use_after(\"FARTHING\", 1960).\n.decl Answer()\nAnswer() :- Has_currency(\"United Kingdom\", currency), Has_foil_color(\"Hershey's Kisses\", \"red\"), Was_in_use_after(currency, 1960).\n.output Answer"]}
{"id": 2166, "answer": true, "completion": ".decl Has_brain_structure(Person:symbol, Brain_structure:symbol)\nHas_brain_structure(\"Gauss\", \"normal\").\n.decl Answer()\nAnswer() :- Has_brain_structure(\"Gauss\", \"normal\").\n.output Answer", "completions": [".decl Has_brain_structure(Person:symbol, Brain_structure:symbol)\nHas_brain_structure(\"Gauss\", \"normal\").\n.decl Answer()\nAnswer() :- Has_brain_structure(\"Gauss\", \"normal\").\n.output Answer"]}
{"id": 2167, "answer": true, "completion": ".decl Is_taken(Drug:symbol, Method:symbol)\nIs_taken(\"dopamine\", \"snorted nasally\").\n.decl Answer()\nAnswer() :- Is_taken(\"dopamine\", \"snorted nasally\").\n.output Answer", "completions": [".decl Is_taken(Drug:symbol, Method:symbol)\nIs_taken(\"dopamine\", \"snorted nasally\").\n.decl Answer()\nAnswer() :- Is_taken(\"dopamine\", \"snorted nasally\").\n.output Answer"]}
{"id": 2168, "answer": true, "completion": ".decl Is_common(Trait:symbol, Gender:symbol)\nIs_common(\"moustache\", \"male\").\n.decl Answer()\nAnswer() :- !Is_common(\"moustache\", \"female\").\n.output Answer", "completions": [".decl Is_common(Trait:symbol, Gender:symbol)\nIs_common(\"moustache\", \"male\").\n.decl Answer()\nAnswer() :- !Is_common(\"moustache\", \"female\").\n.output Answer"]}
{"id": 2169, "answer": true, "completion": ".decl Helps_turn(Person:symbol, Ingredient_A:symbol, Ingredient_B:symbol)\nHelps_turn(\"Demi Lovato's ancestors\", \"maize\", \"popcorn\").\n.decl Answer()\nAnswer() :- Helps_turn(\"Demi Lovato's ancestors\", \"maize\", \"popcorn\").\n.output Answer", "completions": [".decl Helps_turn(Person:symbol, Ingredient_A:symbol, Ingredient_B:symbol)\nHelps_turn(\"Demi Lovato's ancestors\", \"maize\", \"popcorn\").\n.decl Answer()\nAnswer() :- Helps_turn(\"Demi Lovato's ancestors\", \"maize\", \"popcorn\").\n.output Answer"]}
{"id": 2170, "answer": false, "completion": ".decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Long John Silver's\", \"fish\").\n.decl Answer()\nAnswer() :- Serves(\"Long John Silver's\", \"sea otter\").\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Long John Silver's\", \"fish\").\n.decl Answer()\nAnswer() :- Serves(\"Long John Silver's\", \"sea otter\").\n.output Answer"]}
{"id": 2171, "answer": true, "completion": ".decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\n.decl Answer()\nAnswer() :- Is_prime(number), number = 7.\n.output Answer", "completions": [".decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\n.decl Answer()\nAnswer() :- Is_prime(number), number = 7.\n.output Answer"]}
{"id": 2172, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Şerafeddin Sabuncuoğlu\", \"Börek\").\n.decl Answer()\nAnswer() :- Eats(\"Şerafeddin Sabuncuoğlu\", \"Börek\").\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Şerafeddin Sabuncuoğlu\", \"Börek\").\n.decl Answer()\nAnswer() :- Eats(\"Şerafeddin Sabuncuoğlu\", \"Börek\").\n.output Answer"]}
{"id": 2173, "answer": true, "completion": ".decl Leaves_with(Activity:symbol, Result:symbol)\nLeaves_with(\"reiki\", \"relaxation\").\n.decl Answer()\nAnswer() :- !Leaves_with(\"reiki\", \"bruises\").\n.output Answer", "completions": [".decl Leaves_with(Activity:symbol, Result:symbol)\nLeaves_with(\"reiki\", \"relaxation\").\n.decl Answer()\nAnswer() :- !Leaves_with(\"reiki\", \"bruises\").\n.output Answer"]}
{"id": 2174, "answer": true, "completion": ".decl Remembers(Group:symbol, Event:symbol)\nRemembers(\"Firefighters\", \"September 11th\").\n.decl Answer()\nAnswer() :- Remembers(\"Firefighters\", \"September 11th\").\n.output Answer", "completions": [".decl Remembers(Group:symbol, Event:symbol)\nRemembers(\"Firefighters\", \"September 11th\").\n.decl Answer()\nAnswer() :- Remembers(\"Firefighters\", \"September 11th\").\n.output Answer"]}
{"id": 2175, "answer": true, "completion": ".decl Believes_in(Person:symbol, Entity:symbol)\nBelieves_in(\"Martin Luther\", \"Satan\").\n.decl Answer()\nAnswer() :- Believes_in(\"Martin Luther\", \"Satan\").\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Entity:symbol)\nBelieves_in(\"Martin Luther\", \"Satan\").\n.decl Answer()\nAnswer() :- Believes_in(\"Martin Luther\", \"Satan\").\n.output Answer"]}
{"id": 2176, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:symbol)\nHas_size(\"Donatello crucifix\", \"life size\").\n.decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"Donatello crucifix identified\", 2020).\n.decl Answer()\nAnswer() :- Has_size(\"Donatello crucifix\", size), Happened_in_year(\"Donatello crucifix identified\", year), size = \"life size\".\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:symbol)\nHas_size(\"Donatello crucifix\", \"life size\").\n.decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"Donatello crucifix identified\", 2020).\n.decl Answer()\nAnswer() :- Has_size(\"Donatello crucifix\", size), Happened_in_year(\"Donatello crucifix identified\", year), size = \"life size\".\n.output Answer"]}
{"id": 2177, "answer": true, "completion": ".decl Has_courage(Person:symbol, Age:symbol, Courage:float)\nHas_courage(\"Neville Longbottom\", \"child\", 10).\nHas_courage(\"Neville Longbottom\", \"adult\", 8).\n.decl Answer()\nAnswer() :- Has_courage(\"Neville Longbottom\", \"child\", courage1), Has_courage(\"Neville Longbottom\", \"adult\", courage2), courage1 > courage2.\n.output Answer", "completions": [".decl Has_courage(Person:symbol, Age:symbol, Courage:float)\nHas_courage(\"Neville Longbottom\", \"child\", 10).\nHas_courage(\"Neville Longbottom\", \"adult\", 8).\n.decl Answer()\nAnswer() :- Has_courage(\"Neville Longbottom\", \"child\", courage1), Has_courage(\"Neville Longbottom\", \"adult\", courage2), courage1 > courage2.\n.output Answer"]}
{"id": 2178, "answer": true, "completion": ".decl Has_qualifications(Person:symbol, Qualification:symbol)\nHas_qualifications(\"model\", \"acting\").\n.decl Is_suitable_for(Role:symbol, Qualification:symbol)\nIs_suitable_for(\"star in a LA Femme Nikita remake\", \"acting\").\n.decl Answer()\nAnswer() :- Has_qualifications(person, qualification), Is_suitable_for(\"star in a LA Femme Nikita remake\", qualification).\n.output Answer", "completions": [".decl Has_qualifications(Person:symbol, Qualification:symbol)\nHas_qualifications(\"model\", \"acting\").\n.decl Is_suitable_for(Role:symbol, Qualification:symbol)\nIs_suitable_for(\"star in a LA Femme Nikita remake\", \"acting\").\n.decl Answer()\nAnswer() :- Has_qualifications(person, qualification), Is_suitable_for(\"star in a LA Femme Nikita remake\", qualification).\n.output Answer"]}
{"id": 2179, "answer": true, "completion": ".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Peter Griffin\", \"Quahog Brewery\").\n.decl Needs(Company:symbol, Resource:symbol)\nNeeds(\"Quahog Brewery\", \"barley\").\n.decl Answer()\nAnswer() :- Works_for(\"Peter Griffin\", company), Needs(company, \"barley\").\n.output Answer", "completions": [".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Peter Griffin\", \"Quahog Brewery\").\n.decl Needs(Company:symbol, Resource:symbol)\nNeeds(\"Quahog Brewery\", \"barley\").\n.decl Answer()\nAnswer() :- Works_for(\"Peter Griffin\", company), Needs(company, \"barley\").\n.output Answer"]}
{"id": 2180, "answer": true, "completion": ".decl Kills(Substance:symbol, Disease:symbol)\nKills(\"olive oil\", \"rabies\").\n.decl Answer()\nAnswer() :- Kills(\"olive oil\", \"rabies\").\n.output Answer", "completions": [".decl Kills(Substance:symbol, Disease:symbol)\nKills(\"olive oil\", \"rabies\").\n.decl Answer()\nAnswer() :- Kills(\"olive oil\", \"rabies\").\n.output Answer"]}
{"id": 2181, "answer": false, "completion": ".decl Visited(Person:symbol, Place:symbol, Time:symbol)\nVisited(\"Miguel Lopez de Legazpi\", \"Guam\", \"1521\").\n.decl Friends(Person_A:symbol, Person_B:symbol, Time:symbol)\nFriends(\"Queen Victoria\", \"Prince Albert\", \"1840\").\n.decl Answer()\nAnswer() :- Visited(person, \"Guam\", \"1521\"), Friends(\"Queen Victoria\", person, time), time != \"1521\".\n.output Answer", "completions": [".decl Visited(Person:symbol, Place:symbol, Time:symbol)\nVisited(\"Miguel Lopez de Legazpi\", \"Guam\", \"1521\").\n.decl Friends(Person_A:symbol, Person_B:symbol, Time:symbol)\nFriends(\"Queen Victoria\", \"Prince Albert\", \"1840\").\n.decl Answer()\nAnswer() :- Visited(person, \"Guam\", \"1521\"), Friends(\"Queen Victoria\", person, time), time != \"1521\".\n.output Answer"]}
{"id": 2182, "answer": true, "completion": ".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"American black bear\", 2.5).\nHas_size(\"sun bear\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"American black bear\", size1), Has_size(\"sun bear\", size2), size1 > size2.\n.output Answer", "completions": [".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"American black bear\", 2.5).\nHas_size(\"sun bear\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"American black bear\", size1), Has_size(\"sun bear\", size2), size1 > size2.\n.output Answer"]}
{"id": 2183, "answer": true, "completion": ".decl Has_size(Home:symbol, Size:float)\nHas_size(\"Adam Sandler's home\", 2000).\n.decl Average_size(Country:symbol, Size:float)\nAverage_size(\"USA\", 3000).\n.decl Answer()\nAnswer() :- Has_size(\"Adam Sandler's home\", size1), Average_size(\"USA\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Home:symbol, Size:float)\nHas_size(\"Adam Sandler's home\", 2000).\n.decl Average_size(Country:symbol, Size:float)\nAverage_size(\"USA\", 3000).\n.decl Answer()\nAnswer() :- Has_size(\"Adam Sandler's home\", size1), Average_size(\"USA\", size2), size1 < size2.\n.output Answer"]}
{"id": 2184, "answer": false, "completion": ".decl Has_ingredient(Meal:symbol, Ingredient:symbol)\nHas_ingredient(\"brussels sprouts\", \"vitamin K\").\n.decl Should_avoid(Person:symbol, Ingredient:symbol)\nShould_avoid(\"someone on Coumadin\", \"vitamin K\").\n.decl Answer()\nAnswer() :- Has_ingredient(meal, \"vitamin K\"), Should_avoid(\"someone on Coumadin\", \"vitamin K\"), !Has_ingredient(meal, \"vitamin K\").\n.output Answer", "completions": [".decl Has_ingredient(Meal:symbol, Ingredient:symbol)\nHas_ingredient(\"brussels sprouts\", \"vitamin K\").\n.decl Should_avoid(Person:symbol, Ingredient:symbol)\nShould_avoid(\"someone on Coumadin\", \"vitamin K\").\n.decl Answer()\nAnswer() :- Has_ingredient(meal, \"vitamin K\"), Should_avoid(\"someone on Coumadin\", \"vitamin K\"), !Has_ingredient(meal, \"vitamin K\").\n.output Answer"]}
{"id": 2185, "answer": false, "completion": ".decl Is_important_to(Place:symbol, Religion:symbol)\nIs_important_to(\"Holy Land\", \"Judaism\").\nIs_important_to(\"Holy Land\", \"Christianity\").\nIs_important_to(\"Holy Land\", \"Islam\").\n.decl Is_eastern_religion(Religion:symbol)\nIs_eastern_religion(\"Hinduism\").\nIs_eastern_religion(\"Buddhism\").\n.decl Answer()\nAnswer() :- Is_important_to(\"Holy Land\", religion), Is_eastern_religion(religion).\n.output Answer", "completions": [".decl Is_important_to(Place:symbol, Religion:symbol)\nIs_important_to(\"Holy Land\", \"Judaism\").\nIs_important_to(\"Holy Land\", \"Christianity\").\nIs_important_to(\"Holy Land\", \"Islam\").\n.decl Is_eastern_religion(Religion:symbol)\nIs_eastern_religion(\"Hinduism\").\nIs_eastern_religion(\"Buddhism\").\n.decl Answer()\nAnswer() :- Is_important_to(\"Holy Land\", religion), Is_eastern_religion(religion).\n.output Answer"]}
{"id": 2186, "answer": true, "completion": ".decl Has_job_security(Position:symbol, Security:symbol)\nHas_job_security(\"Prime Minister of the United Kingdom\", \"poor\").\n.decl Answer()\nAnswer() :- Has_job_security(\"Prime Minister of the United Kingdom\", security), security = \"poor\".\n.output Answer", "completions": [".decl Has_job_security(Position:symbol, Security:symbol)\nHas_job_security(\"Prime Minister of the United Kingdom\", \"poor\").\n.decl Answer()\nAnswer() :- Has_job_security(\"Prime Minister of the United Kingdom\", security), security = \"poor\".\n.output Answer"]}
{"id": 2187, "answer": false, "completion": ".decl Has_capacity(Ship:symbol, Capacity:float)\nHas_capacity(\"Symphony of the Seas\", 8500).\n.decl Has_size(Army:symbol, Size:float)\nHas_size(\"People's Volunteer Army\", 3000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Symphony of the Seas\", capacity), Has_size(\"People's Volunteer Army\", size), capacity >= size.\n.output Answer", "completions": [".decl Has_capacity(Ship:symbol, Capacity:float)\nHas_capacity(\"Symphony of the Seas\", 8500).\n.decl Has_size(Army:symbol, Size:float)\nHas_size(\"People's Volunteer Army\", 3000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Symphony of the Seas\", capacity), Has_size(\"People's Volunteer Army\", size), capacity >= size.\n.output Answer"]}
{"id": 2188, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"professional boxer\", \"boxing\").\n.decl Has_dental_costs(Job:symbol, Dental_costs:float)\nHas_dental_costs(\"boxing\", 0.2).\n.decl Answer()\nAnswer() :- Has_job(person, \"boxing\"), Has_dental_costs(\"boxing\", dental_costs), dental_costs < 1.\n.output Answer", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"professional boxer\", \"boxing\").\n.decl Has_dental_costs(Job:symbol, Dental_costs:float)\nHas_dental_costs(\"boxing\", 0.2).\n.decl Answer()\nAnswer() :- Has_job(person, \"boxing\"), Has_dental_costs(\"boxing\", dental_costs), dental_costs < 1.\n.output Answer"]}
{"id": 2189, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"leader of Heaven's Gate\", \"computer programming\").\n.decl Can_do(Skill:symbol, Action:symbol)\nCan_do(\"computer programming\", \"save images in JPEG format\").\n.decl Answer()\nAnswer() :- Has_skill(\"leader of Heaven's Gate\", skill), Can_do(skill, \"save images in JPEG format\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"leader of Heaven's Gate\", \"computer programming\").\n.decl Can_do(Skill:symbol, Action:symbol)\nCan_do(\"computer programming\", \"save images in JPEG format\").\n.decl Answer()\nAnswer() :- Has_skill(\"leader of Heaven's Gate\", skill), Can_do(skill, \"save images in JPEG format\").\n.output Answer"]}
{"id": 2190, "answer": true, "completion": ".decl Has_influence(Event_A:symbol, Event_B:symbol)\nHas_influence(\"Pompey's political association with Caesar\", \"Reality TV\").\n.decl Answer()\nAnswer() :- Has_influence(\"Pompey's political association with Caesar\", \"Reality TV\").\n.output Answer", "completions": [".decl Has_influence(Event_A:symbol, Event_B:symbol)\nHas_influence(\"Pompey's political association with Caesar\", \"Reality TV\").\n.decl Answer()\nAnswer() :- Has_influence(\"Pompey's political association with Caesar\", \"Reality TV\").\n.output Answer"]}
{"id": 2191, "answer": true, "completion": ".decl Is_authentic(Group:symbol, Authenticity:symbol)\nIs_authentic(\"knights in the Medieval Times show\", \"not authentic\").\n.decl Answer()\nAnswer() :- Is_authentic(\"knights in the Medieval Times show\", authenticity).\n.output Answer", "completions": [".decl Is_authentic(Group:symbol, Authenticity:symbol)\nIs_authentic(\"knights in the Medieval Times show\", \"not authentic\").\n.decl Answer()\nAnswer() :- Is_authentic(\"knights in the Medieval Times show\", authenticity).\n.output Answer"]}
{"id": 2192, "answer": true, "completion": ".decl Grants_right(Amendment:symbol, Right:symbol)\nGrants_right(\"23rd Amendment\", \"right to vote for president\").\n.decl Answer()\nAnswer() :- Grants_right(\"23rd Amendment\", \"right to vote for president\").\n.output Answer", "completions": [".decl Grants_right(Amendment:symbol, Right:symbol)\nGrants_right(\"23rd Amendment\", \"right to vote for president\").\n.decl Answer()\nAnswer() :- Grants_right(\"23rd Amendment\", \"right to vote for president\").\n.output Answer"]}
{"id": 2193, "answer": true, "completion": ".decl Has_game_format(Console:symbol, Format:symbol)\nHas_game_format(\"original Nintendo\", \"cartridge\").\nHas_game_format(\"Playstation 3\", \"disc\").\n.decl Answer()\nAnswer() :- Has_game_format(\"original Nintendo\", format1), Has_game_format(\"Playstation 3\", format2), format1 != format2.\n.output Answer", "completions": [".decl Has_game_format(Console:symbol, Format:symbol)\nHas_game_format(\"original Nintendo\", \"cartridge\").\nHas_game_format(\"Playstation 3\", \"disc\").\n.decl Answer()\nAnswer() :- Has_game_format(\"original Nintendo\", format1), Has_game_format(\"Playstation 3\", format2), format1 != format2.\n.output Answer"]}
{"id": 2194, "answer": false, "completion": ".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Bruce Gandy\", \"trumpet\").\n.decl Suitable_for_role(Role:symbol, Musical_piece:symbol)\nSuitable_for_role(\"trumpet\", \"Messiah (Handel)\").\n.decl Answer()\nAnswer() :- Has_role(\"Bruce Gandy\", role), Suitable_for_role(role, \"Messiah (Handel)\"), !Suitable_for_role(\"trumpet\", \"Messiah (Handel)\").\n.output Answer", "completions": [".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Bruce Gandy\", \"trumpet\").\n.decl Suitable_for_role(Role:symbol, Musical_piece:symbol)\nSuitable_for_role(\"trumpet\", \"Messiah (Handel)\").\n.decl Answer()\nAnswer() :- Has_role(\"Bruce Gandy\", role), Suitable_for_role(role, \"Messiah (Handel)\"), !Suitable_for_role(\"trumpet\", \"Messiah (Handel)\").\n.output Answer"]}
{"id": 2195, "answer": false, "completion": ".decl Runs_from_to(Company:symbol, Location_A:symbol, Location_B:symbol)\nRuns_from_to(\"Amtrak\", \"New York City\", \"Washington D.C.\").\nRuns_from_to(\"Amtrak\", \"Washington D.C.\", \"Miami\").\n.decl Is_location(Location:symbol)\nIs_location(\"Moai location\").\n.decl Answer()\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", location1), Is_location(location1).\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", location1), Runs_from_to(\"Amtrak\", location1, location2), Is_location(location2).\n.output Answer", "completions": [".decl Runs_from_to(Company:symbol, Location_A:symbol, Location_B:symbol)\nRuns_from_to(\"Amtrak\", \"New York City\", \"Washington D.C.\").\nRuns_from_to(\"Amtrak\", \"Washington D.C.\", \"Miami\").\n.decl Is_location(Location:symbol)\nIs_location(\"Moai location\").\n.decl Answer()\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", location1), Is_location(location1).\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", location1), Runs_from_to(\"Amtrak\", location1, location2), Is_location(location2).\n.output Answer"]}
{"id": 2196, "answer": false, "completion": ".decl Has_state(Person:symbol, State:symbol)\nHas_state(\"John\", \"coma\").\n.decl Experiences(Person:symbol, Emotion:symbol)\nExperiences(\"John\", \"fear\").\n.decl Answer()\nAnswer() :- Has_state(\"John\", \"coma\"), !Experiences(\"John\", \"fear\").\n.output Answer", "completions": [".decl Has_state(Person:symbol, State:symbol)\nHas_state(\"John\", \"coma\").\n.decl Experiences(Person:symbol, Emotion:symbol)\nExperiences(\"John\", \"fear\").\n.decl Answer()\nAnswer() :- Has_state(\"John\", \"coma\"), !Experiences(\"John\", \"fear\").\n.output Answer"]}
{"id": 2197, "answer": true, "completion": ".decl Has_presidential_number(Person:symbol, Presidential_number:float)\nHas_presidential_number(\"Andrew Johnson\", 17).\n.decl Has_emperor_number(Person:symbol, Emperor_number:float)\nHas_emperor_number(\"Elagabalus\", 14).\n.decl Answer()\nAnswer() :- Has_presidential_number(\"Andrew Johnson\", presidential_number), Has_emperor_number(\"Elagabalus\", emperor_number), presidential_number > emperor_number.\n.output Answer", "completions": [".decl Has_presidential_number(Person:symbol, Presidential_number:float)\nHas_presidential_number(\"Andrew Johnson\", 17).\n.decl Has_emperor_number(Person:symbol, Emperor_number:float)\nHas_emperor_number(\"Elagabalus\", 14).\n.decl Answer()\nAnswer() :- Has_presidential_number(\"Andrew Johnson\", presidential_number), Has_emperor_number(\"Elagabalus\", emperor_number), presidential_number > emperor_number.\n.output Answer"]}
{"id": 2198, "answer": true, "completion": ".decl Has_top_speed(Model:symbol, Top_speed:float)\nHas_top_speed(\"Lamborghini Aventador\", 217).\nHas_top_speed(\"Porsche 911\", 191).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Lamborghini Aventador\", speed1), Has_top_speed(\"Porsche 911\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_top_speed(Model:symbol, Top_speed:float)\nHas_top_speed(\"Lamborghini Aventador\", 217).\nHas_top_speed(\"Porsche 911\", 191).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Lamborghini Aventador\", speed1), Has_top_speed(\"Porsche 911\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 2199, "answer": true, "completion": ".decl Is_easy_to_eat(Food:symbol, Difficulty:symbol)\nIs_easy_to_eat(\"fresh garlic cloves\", \"easy\").\nIs_easy_to_eat(\"roasted garlic cloves\", \"easy\").\n.decl Answer()\nAnswer() :- Is_easy_to_eat(\"fresh garlic cloves\", difficulty1), Is_easy_to_eat(\"roasted garlic cloves\", difficulty2), difficulty1 = difficulty2.\n.output Answer", "completions": [".decl Is_easy_to_eat(Food:symbol, Difficulty:symbol)\nIs_easy_to_eat(\"fresh garlic cloves\", \"easy\").\nIs_easy_to_eat(\"roasted garlic cloves\", \"easy\").\n.decl Answer()\nAnswer() :- Is_easy_to_eat(\"fresh garlic cloves\", difficulty1), Is_easy_to_eat(\"roasted garlic cloves\", difficulty2), difficulty1 = difficulty2.\n.output Answer"]}
{"id": 2200, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"college student\", \"laptop\").\nOwns(\"college student\", \"smartphone\").\n.decl Answer()\nAnswer() :- !Owns(\"college student\", \"fax machine\").\n.output Answer", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"college student\", \"laptop\").\nOwns(\"college student\", \"smartphone\").\n.decl Answer()\nAnswer() :- !Owns(\"college student\", \"fax machine\").\n.output Answer"]}
{"id": 2201, "answer": false, "completion": ".decl Has_cost(Event:symbol, Cost:float)\nHas_cost(\"visit Metropolitan Museum of Art\", 20).\n.decl Has_money(Person:symbol, Money:float)\nHas_money(\"Bernie Sanders\", 200).\n.decl Answer()\nAnswer() :- Has_cost(\"visit Metropolitan Museum of Art\", cost), Has_money(\"Bernie Sanders\", money), cost * 20 <= money.\n.output Answer", "completions": [".decl Has_cost(Event:symbol, Cost:float)\nHas_cost(\"visit Metropolitan Museum of Art\", 20).\n.decl Has_money(Person:symbol, Money:float)\nHas_money(\"Bernie Sanders\", 200).\n.decl Answer()\nAnswer() :- Has_cost(\"visit Metropolitan Museum of Art\", cost), Has_money(\"Bernie Sanders\", money), cost * 20 <= money.\n.output Answer"]}
{"id": 2202, "answer": true, "completion": ".decl Was_invented_in(Object:symbol, Year:float)\nWas_invented_in(\"Qwerty keyboard layout\", 1868).\nWas_invented_in(\"computers\", 1946).\n.decl Answer()\nAnswer() :- Was_invented_in(\"Qwerty keyboard layout\", year1), Was_invented_in(\"computers\", year2), year1 < year2.\n.output Answer", "completions": [".decl Was_invented_in(Object:symbol, Year:float)\nWas_invented_in(\"Qwerty keyboard layout\", 1868).\nWas_invented_in(\"computers\", 1946).\n.decl Answer()\nAnswer() :- Was_invented_in(\"Qwerty keyboard layout\", year1), Was_invented_in(\"computers\", year2), year1 < year2.\n.output Answer"]}
{"id": 2203, "answer": true, "completion": ".decl Has_dominant_religion(Country:symbol, Religion:symbol)\nHas_dominant_religion(\"Saudi Arabia\", \"Islam\").\nHas_dominant_religion(\"Egypt\", \"Islam\").\nHas_dominant_religion(\"Turkey\", \"Islam\").\n.decl Has_store(Country:symbol, Store:symbol)\nHas_store(\"Saudi Arabia\", \"Starbucks\").\nHas_store(\"Egypt\", \"Starbucks\").\nHas_store(\"Turkey\", \"Starbucks\").\n.decl Answer()\nAnswer() :- Has_dominant_religion(country, \"Islam\"), Has_store(country, \"Starbucks\").\n.output Answer", "completions": [".decl Has_dominant_religion(Country:symbol, Religion:symbol)\nHas_dominant_religion(\"Saudi Arabia\", \"Islam\").\nHas_dominant_religion(\"Egypt\", \"Islam\").\nHas_dominant_religion(\"Turkey\", \"Islam\").\n.decl Has_store(Country:symbol, Store:symbol)\nHas_store(\"Saudi Arabia\", \"Starbucks\").\nHas_store(\"Egypt\", \"Starbucks\").\nHas_store(\"Turkey\", \"Starbucks\").\n.decl Answer()\nAnswer() :- Has_dominant_religion(country, \"Islam\"), Has_store(country, \"Starbucks\").\n.output Answer"]}
{"id": 2204, "answer": true, "completion": ".decl Happens_at_event(Action:symbol, Event:symbol)\nHappens_at_event(\"blow out candles\", \"birthday\").\n.decl Answer()\nAnswer() :- !Happens_at_event(\"blow out candles\", \"funeral\").\n.output Answer", "completions": [".decl Happens_at_event(Action:symbol, Event:symbol)\nHappens_at_event(\"blow out candles\", \"birthday\").\n.decl Answer()\nAnswer() :- !Happens_at_event(\"blow out candles\", \"funeral\").\n.output Answer"]}
{"id": 2205, "answer": true, "completion": ".decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(\"Eve\", \"Adam\").\n.decl Answer()\nAnswer() :- Is_related(\"Eve\", \"Adam\"), !Is_related(\"Adam\", \"Eve\").\n.output Answer", "completions": [".decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(\"Eve\", \"Adam\").\n.decl Answer()\nAnswer() :- Is_related(\"Eve\", \"Adam\"), !Is_related(\"Adam\", \"Eve\").\n.output Answer"]}
{"id": 2206, "answer": true, "completion": ".decl Has_disability(Organism:symbol, Disability:symbol)\n.decl Answer()\nAnswer() :- !Has_disability(\"placozoa\", _).\n.output Answer", "completions": [".decl Has_disability(Organism:symbol, Disability:symbol)\n.decl Answer()\nAnswer() :- !Has_disability(\"placozoa\", _).\n.output Answer"]}
{"id": 2207, "answer": true, "completion": ".decl Has_opinion(Group:symbol, Opinion:symbol)\nHas_opinion(\"System of a Down\", \"opposed to globalization\").\n.decl Answer()\nAnswer() :- Has_opinion(\"System of a Down\", opinion), opinion = \"opposed to globalization\".\n.output Answer", "completions": [".decl Has_opinion(Group:symbol, Opinion:symbol)\nHas_opinion(\"System of a Down\", \"opposed to globalization\").\n.decl Answer()\nAnswer() :- Has_opinion(\"System of a Down\", opinion), opinion = \"opposed to globalization\".\n.output Answer"]}
{"id": 2208, "answer": true, "completion": ".decl Is_liar(Person:symbol)\nIs_liar(\"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Is_liar(\"Dr. Seuss\").\n.output Answer", "completions": [".decl Is_liar(Person:symbol)\nIs_liar(\"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Is_liar(\"Dr. Seuss\").\n.output Answer"]}
{"id": 2209, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Hollywood\", \"July\").\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Hollywood\", 25).\n.decl Answer()\nAnswer() :- Happens_in_time(\"Hollywood\", \"July\"), Has_temperature(\"Hollywood\", temperature), temperature > 20.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Hollywood\", \"July\").\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Hollywood\", 25).\n.decl Answer()\nAnswer() :- Happens_in_time(\"Hollywood\", \"July\"), Has_temperature(\"Hollywood\", temperature), temperature > 20.\n.output Answer"]}
{"id": 2210, "answer": true, "completion": ".decl Has_sales(Product:symbol, Sales:float)\nHas_sales(\"silicon wedding rings\", 1000).\nHas_sales(\"bromine wedding rings\", 500).\n.decl Answer()\nAnswer() :- Has_sales(\"silicon wedding rings\", sales1), Has_sales(\"bromine wedding rings\", sales2), sales1 > sales2.\n.output Answer", "completions": [".decl Has_sales(Product:symbol, Sales:float)\nHas_sales(\"silicon wedding rings\", 1000).\nHas_sales(\"bromine wedding rings\", 500).\n.decl Answer()\nAnswer() :- Has_sales(\"silicon wedding rings\", sales1), Has_sales(\"bromine wedding rings\", sales2), sales1 > sales2.\n.output Answer"]}
{"id": 2211, "answer": true, "completion": ".decl Chooses(Person:symbol, Ally:symbol)\nChooses(\"Saddam Hussein\", \"Saladin\").\n.decl Has_power(Person:symbol, Power:float)\nHas_power(\"Saladin\", 10).\nHas_power(\"Idris I\", 5).\n.decl Answer()\nAnswer() :- Chooses(\"Saddam Hussein\", ally1), Has_power(ally1, power1), Has_power(\"Idris I\", power2), power1 > power2.\n.output Answer", "completions": [".decl Chooses(Person:symbol, Ally:symbol)\nChooses(\"Saddam Hussein\", \"Saladin\").\n.decl Has_power(Person:symbol, Power:float)\nHas_power(\"Saladin\", 10).\nHas_power(\"Idris I\", 5).\n.decl Answer()\nAnswer() :- Chooses(\"Saddam Hussein\", ally1), Has_power(ally1, power1), Has_power(\"Idris I\", power2), power1 > power2.\n.output Answer"]}
{"id": 2212, "answer": true, "completion": ".decl Named_after(Month:symbol, Person:symbol)\nNamed_after(\"March\", \"Mars\").\n.decl Is_son_of(Person:symbol, Parent:symbol)\nIs_son_of(\"Mars\", \"Jupiter\").\n.decl Answer()\nAnswer() :- Named_after(month, person), Is_son_of(person, \"Jupiter\").\n.output Answer", "completions": [".decl Named_after(Month:symbol, Person:symbol)\nNamed_after(\"March\", \"Mars\").\n.decl Is_son_of(Person:symbol, Parent:symbol)\nIs_son_of(\"Mars\", \"Jupiter\").\n.decl Answer()\nAnswer() :- Named_after(month, person), Is_son_of(person, \"Jupiter\").\n.output Answer"]}
{"id": 2213, "answer": true, "completion": ".decl Involved_in_scandal(Company:symbol, Scandal:symbol)\nInvolved_in_scandal(\"Subway\", \"pedophilia scandal\").\n.decl Answer()\nAnswer() :- Involved_in_scandal(\"Subway\", \"pedophilia scandal\").\n.output Answer", "completions": [".decl Involved_in_scandal(Company:symbol, Scandal:symbol)\nInvolved_in_scandal(\"Subway\", \"pedophilia scandal\").\n.decl Answer()\nAnswer() :- Involved_in_scandal(\"Subway\", \"pedophilia scandal\").\n.output Answer"]}
{"id": 2214, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"John Roberts\", 65).\n.decl Is_legal(Age:float)\nIs_legal(21).\n.decl Answer()\nAnswer() :- Has_age(\"John Roberts\", age), !Is_legal(age).\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"John Roberts\", 65).\n.decl Is_legal(Age:float)\nIs_legal(21).\n.decl Answer()\nAnswer() :- Has_age(\"John Roberts\", age), !Is_legal(age).\n.output Answer"]}
{"id": 2215, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"two-year old\", 2).\n.decl Requires_age(Event:symbol, Age:float)\nRequires_age(\"Scrabble tournament\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"two-year old\", age1), Requires_age(\"Scrabble tournament\", age2), age1 < age2.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"two-year old\", 2).\n.decl Requires_age(Event:symbol, Age:float)\nRequires_age(\"Scrabble tournament\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"two-year old\", age1), Requires_age(\"Scrabble tournament\", age2), age1 < age2.\n.output Answer"]}
{"id": 2216, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Iris\", \"flying\").\nHas_skill(\"Hermes\", \"flying\").\n.decl Needed_for_job(Job:symbol, Skill:symbol)\nNeeded_for_job(\"UPS job\", \"lifting\").\n.decl Answer()\nAnswer() :- Has_skill(person, skill), Needed_for_job(\"UPS job\", skill2), skill != skill2.\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Iris\", \"flying\").\nHas_skill(\"Hermes\", \"flying\").\n.decl Needed_for_job(Job:symbol, Skill:symbol)\nNeeded_for_job(\"UPS job\", \"lifting\").\n.decl Answer()\nAnswer() :- Has_skill(person, skill), Needed_for_job(\"UPS job\", skill2), skill != skill2.\n.output Answer"]}
{"id": 2217, "answer": true, "completion": ".decl From_place(Person:symbol, Place:symbol)\nFrom_place(\"Dorothea Wendling\", \"Germany\").\n.decl Originated_from(Company:symbol, Place:symbol)\nOriginated_from(\"Porsche\", \"Germany\").\n.decl Answer()\nAnswer() :- From_place(\"Dorothea Wendling\", place1), Originated_from(\"Porsche\", place2), place1 = place2.\n.output Answer", "completions": [".decl From_place(Person:symbol, Place:symbol)\nFrom_place(\"Dorothea Wendling\", \"Germany\").\n.decl Originated_from(Company:symbol, Place:symbol)\nOriginated_from(\"Porsche\", \"Germany\").\n.decl Answer()\nAnswer() :- From_place(\"Dorothea Wendling\", place1), Originated_from(\"Porsche\", place2), place1 = place2.\n.output Answer"]}
{"id": 2218, "answer": true, "completion": ".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Will Ferrell\", \"MTV Movie Award\").\n.decl Difficulty(Award:symbol, Difficulty:float)\nDifficulty(\"Empire Award for Best Newcomer\", 10).\nDifficulty(\"MTV Movie Award\", 5).\n.decl Answer()\nAnswer() :- Has_award(\"Will Ferrell\", award1), Difficulty(award1, difficulty1), Difficulty(\"Empire Award for Best Newcomer\", difficulty2), difficulty1 < difficulty2.\n.output Answer", "completions": [".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Will Ferrell\", \"MTV Movie Award\").\n.decl Difficulty(Award:symbol, Difficulty:float)\nDifficulty(\"Empire Award for Best Newcomer\", 10).\nDifficulty(\"MTV Movie Award\", 5).\n.decl Answer()\nAnswer() :- Has_award(\"Will Ferrell\", award1), Difficulty(award1, difficulty1), Difficulty(\"Empire Award for Best Newcomer\", difficulty2), difficulty1 < difficulty2.\n.output Answer"]}
{"id": 2219, "answer": false, "completion": ".decl Insults(Person_A:symbol, Person_B:symbol)\nInsults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.decl Answer()\nAnswer() :- !Insults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.output Answer", "completions": [".decl Insults(Person_A:symbol, Person_B:symbol)\nInsults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.decl Answer()\nAnswer() :- !Insults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.output Answer"]}
{"id": 2220, "answer": false, "completion": ".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Felix Potvin\", \"goalie\").\n.decl Plays_sport(Team:symbol, Sport:symbol)\nPlays_sport(\"Toronto Maple Leafs\", \"hockey\").\nPlays_sport(\"Toronto Raptors\", \"basketball\").\nPlays_sport(\"Toronto Blue Jays\", \"baseball\").\n.decl Answer()\nAnswer() :- Has_position(\"Felix Potvin\", position), Plays_sport(team, \"dodgeball\"), position = \"goalie\".\n.output Answer", "completions": [".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Felix Potvin\", \"goalie\").\n.decl Plays_sport(Team:symbol, Sport:symbol)\nPlays_sport(\"Toronto Maple Leafs\", \"hockey\").\nPlays_sport(\"Toronto Raptors\", \"basketball\").\nPlays_sport(\"Toronto Blue Jays\", \"baseball\").\n.decl Answer()\nAnswer() :- Has_position(\"Felix Potvin\", position), Plays_sport(team, \"dodgeball\"), position = \"goalie\".\n.output Answer"]}
{"id": 2221, "answer": false, "completion": ".decl Belongs_to_category(Script:symbol, Category:symbol)\nBelongs_to_category(\"Gujarati script\", \"Indic script\").\nBelongs_to_category(\"Kanji\", \"East Asian script\").\n.decl Answer()\nAnswer() :- Belongs_to_category(\"Gujarati script\", category1), Belongs_to_category(\"Kanji\", category2), category1 = category2.\n.output Answer", "completions": [".decl Belongs_to_category(Script:symbol, Category:symbol)\nBelongs_to_category(\"Gujarati script\", \"Indic script\").\nBelongs_to_category(\"Kanji\", \"East Asian script\").\n.decl Answer()\nAnswer() :- Belongs_to_category(\"Gujarati script\", category1), Belongs_to_category(\"Kanji\", category2), category1 = category2.\n.output Answer"]}
{"id": 2222, "answer": true, "completion": ".decl Has_theme(Game:symbol, Theme:symbol)\nHas_theme(\"Fallout 4\", \"end of civilization\").\nHas_theme(\"Fallout 4\", \"slot machines\").\n.decl Answer()\nAnswer() :- Has_theme(game, \"end of civilization\"), Has_theme(game, \"slot machines\").\n.output Answer", "completions": [".decl Has_theme(Game:symbol, Theme:symbol)\nHas_theme(\"Fallout 4\", \"end of civilization\").\nHas_theme(\"Fallout 4\", \"slot machines\").\n.decl Answer()\nAnswer() :- Has_theme(game, \"end of civilization\"), Has_theme(game, \"slot machines\").\n.output Answer"]}
{"id": 2223, "answer": true, "completion": ".decl Contains(Object:symbol, Substance:symbol)\nContains(\"severed finger\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Contains(\"severed finger\", \"glutamic acid\").\n.output Answer", "completions": [".decl Contains(Object:symbol, Substance:symbol)\nContains(\"severed finger\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Contains(\"severed finger\", \"glutamic acid\").\n.output Answer"]}
{"id": 2224, "answer": false, "completion": ".decl Has_ethnicity(Person:symbol, Ethnicity:symbol)\nHas_ethnicity(\"Sara Paxton\", \"Caucasian\").\n.decl Answer()\nAnswer() :- Has_ethnicity(\"Sara Paxton\", \"Latino\"), !Has_ethnicity(\"Sara Paxton\", \"Caucasian\").\n.output Answer", "completions": [".decl Has_ethnicity(Person:symbol, Ethnicity:symbol)\nHas_ethnicity(\"Sara Paxton\", \"Caucasian\").\n.decl Answer()\nAnswer() :- Has_ethnicity(\"Sara Paxton\", \"Latino\"), !Has_ethnicity(\"Sara Paxton\", \"Caucasian\").\n.output Answer"]}
{"id": 2225, "answer": true, "completion": ".decl Reads(Person:symbol, Publication:symbol)\nReads(\"William Howard Taft\", \"New York Times\").\n.decl Answer()\nAnswer() :- !Reads(\"William Howard Taft\", \"DC Comics\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Publication:symbol)\nReads(\"William Howard Taft\", \"New York Times\").\n.decl Answer()\nAnswer() :- !Reads(\"William Howard Taft\", \"DC Comics\").\n.output Answer"]}
{"id": 2226, "answer": true, "completion": ".decl Believes_in(Religion:symbol, Entity:symbol)\nBelieves_in(\"Christianity\", \"Seraphim\").\nBelieves_in(\"Islam\", \"Jinn\").\n.decl Answer()\nAnswer() :- Believes_in(\"Christianity\", entity1), Believes_in(\"Islam\", entity2), entity1 != entity2.\n.output Answer", "completions": [".decl Believes_in(Religion:symbol, Entity:symbol)\nBelieves_in(\"Christianity\", \"Seraphim\").\nBelieves_in(\"Islam\", \"Jinn\").\n.decl Answer()\nAnswer() :- Believes_in(\"Christianity\", entity1), Believes_in(\"Islam\", entity2), entity1 != entity2.\n.output Answer"]}
{"id": 2227, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"John\", \"surveying\").\nHas_disability(\"John\", \"dyscalculia\").\n.decl Answer()\nAnswer() :- Has_skill(person, \"surveying\"), Has_disability(person, \"dyscalculia\"), !.\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"John\", \"surveying\").\nHas_disability(\"John\", \"dyscalculia\").\n.decl Answer()\nAnswer() :- Has_skill(person, \"surveying\"), Has_disability(person, \"dyscalculia\"), !.\n.output Answer"]}
{"id": 2228, "answer": false, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Alec Baldwin\", 5).\nHas_n_children(\"Clint Eastwood\", 8).\n.decl Answer()\nAnswer() :- Has_n_children(\"Alec Baldwin\", n_children1), Has_n_children(\"Clint Eastwood\", n_children2), n_children1 > n_children2.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Alec Baldwin\", 5).\nHas_n_children(\"Clint Eastwood\", 8).\n.decl Answer()\nAnswer() :- Has_n_children(\"Alec Baldwin\", n_children1), Has_n_children(\"Clint Eastwood\", n_children2), n_children1 > n_children2.\n.output Answer"]}
{"id": 2229, "answer": true, "completion": ".decl Uses(Person:symbol, Object:symbol)\n.decl Answer()\nAnswer() :- !Uses(\"judges\", \"banana trees\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Object:symbol)\n.decl Answer()\nAnswer() :- !Uses(\"judges\", \"banana trees\").\n.output Answer"]}
{"id": 2230, "answer": true, "completion": ".decl Causes_color_change(Substance:symbol, Color_change:symbol)\nCauses_color_change(\"nickel\", \"zombie\").\n.decl Answer()\nAnswer() :- Causes_color_change(substance, \"zombie\").\n.output Answer", "completions": [".decl Causes_color_change(Substance:symbol, Color_change:symbol)\nCauses_color_change(\"nickel\", \"zombie\").\n.decl Answer()\nAnswer() :- Causes_color_change(substance, \"zombie\").\n.output Answer"]}
{"id": 2231, "answer": false, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"bitcoin\", 10000).\nHas_price(\"Volkswagen Jetta\", 20000).\n.decl Answer()\nAnswer() :- Has_price(\"bitcoin\", price1), Has_price(\"Volkswagen Jetta\", price2), price1 >= price2.\n.output Answer", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"bitcoin\", 10000).\nHas_price(\"Volkswagen Jetta\", 20000).\n.decl Answer()\nAnswer() :- Has_price(\"bitcoin\", price1), Has_price(\"Volkswagen Jetta\", price2), price1 >= price2.\n.output Answer"]}
{"id": 2232, "answer": true, "completion": ".decl Has_history(Thing:symbol, History:symbol)\nHas_history(\"Fraktur\", \"sordid\").\n.decl Answer()\nAnswer() :- Has_history(\"Fraktur\", \"sordid\").\n.output Answer", "completions": [".decl Has_history(Thing:symbol, History:symbol)\nHas_history(\"Fraktur\", \"sordid\").\n.decl Answer()\nAnswer() :- Has_history(\"Fraktur\", \"sordid\").\n.output Answer"]}
{"id": 2233, "answer": true, "completion": ".decl Belongs_to_sect(Person:symbol, Sect:symbol)\nBelongs_to_sect(\"Martin Luther\", \"Lutheran\").\nBelongs_to_sect(\"Martin Luther King Jr.\", \"Baptist\").\n.decl Answer()\nAnswer() :- Belongs_to_sect(\"Martin Luther\", sect1), Belongs_to_sect(\"Martin Luther King Jr.\", sect2), sect1 != sect2.\n.output Answer", "completions": [".decl Belongs_to_sect(Person:symbol, Sect:symbol)\nBelongs_to_sect(\"Martin Luther\", \"Lutheran\").\nBelongs_to_sect(\"Martin Luther King Jr.\", \"Baptist\").\n.decl Answer()\nAnswer() :- Belongs_to_sect(\"Martin Luther\", sect1), Belongs_to_sect(\"Martin Luther King Jr.\", sect2), sect1 != sect2.\n.output Answer"]}
{"id": 2234, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Donald Duck\", 80).\n.decl Allowed_in(Person:symbol, Place:symbol)\nAllowed_in(\"Donald Duck\", \"grocery stores\").\n.decl Answer()\nAnswer() :- Has_age(\"Donald Duck\", age), Allowed_in(\"Donald Duck\", place), age >= 18.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Donald Duck\", 80).\n.decl Allowed_in(Person:symbol, Place:symbol)\nAllowed_in(\"Donald Duck\", \"grocery stores\").\n.decl Answer()\nAnswer() :- Has_age(\"Donald Duck\", age), Allowed_in(\"Donald Duck\", place), age >= 18.\n.output Answer"]}
{"id": 2235, "answer": true, "completion": ".decl Appears_in(Character:symbol, Movie:symbol)\nAppears_in(\"Hades\", \"Hercules\").\n.decl Is_genre(Movie:symbol, Genre:symbol)\nIs_genre(\"Hercules\", \"musical\").\nIs_genre(\"Hercules\", \"Disney Channel\").\n.decl Answer()\nAnswer() :- Appears_in(\"Hades\", movie), Is_genre(movie, \"musical\"), Is_genre(movie, \"Disney Channel\").\n.output Answer", "completions": [".decl Appears_in(Character:symbol, Movie:symbol)\nAppears_in(\"Hades\", \"Hercules\").\n.decl Is_genre(Movie:symbol, Genre:symbol)\nIs_genre(\"Hercules\", \"musical\").\nIs_genre(\"Hercules\", \"Disney Channel\").\n.decl Answer()\nAnswer() :- Appears_in(\"Hades\", movie), Is_genre(movie, \"musical\"), Is_genre(movie, \"Disney Channel\").\n.output Answer"]}
{"id": 2236, "answer": false, "completion": ".decl Has_white_blood_cells(Person:symbol, Has_white_blood_cells:symbol)\nHas_white_blood_cells(\"John\", \"yes\").\n.decl Answer()\nAnswer() :- Has_white_blood_cells(person, \"no\"), !Has_white_blood_cells(person, \"yes\").\n.output Answer", "completions": [".decl Has_white_blood_cells(Person:symbol, Has_white_blood_cells:symbol)\nHas_white_blood_cells(\"John\", \"yes\").\n.decl Answer()\nAnswer() :- Has_white_blood_cells(person, \"no\"), !Has_white_blood_cells(person, \"yes\").\n.output Answer"]}
{"id": 2237, "answer": true, "completion": ".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Rand Paul\", \"Kentucky\").\n.decl Frequently_visits(Person:symbol, Place:symbol)\n.decl Answer()\nAnswer() :- !Frequently_visits(\"Rand Paul\", \"Lake Michigan\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Rand Paul\", \"Kentucky\").\n.decl Frequently_visits(Person:symbol, Place:symbol)\n.decl Answer()\nAnswer() :- !Frequently_visits(\"Rand Paul\", \"Lake Michigan\").\n.output Answer"]}
{"id": 2238, "answer": false, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Simon Cowell\", \"United Kingdom\").\n.decl Can_vote(Citizenship:symbol, Election:symbol)\nCan_vote(\"United Kingdom\", \"Parliamentary Election\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Simon Cowell\", citizenship), Can_vote(citizenship, \"Supreme Court Judge Election\").\n.output Answer", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Simon Cowell\", \"United Kingdom\").\n.decl Can_vote(Citizenship:symbol, Election:symbol)\nCan_vote(\"United Kingdom\", \"Parliamentary Election\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Simon Cowell\", citizenship), Can_vote(citizenship, \"Supreme Court Judge Election\").\n.output Answer"]}
{"id": 2239, "answer": true, "completion": ".decl Has_debt(Country:symbol, Debt:float)\nHas_debt(\"Micronesia\", 100).\n.decl Has_funds(Person:symbol, Funds:float)\nHas_funds(\"Michael Bloomberg\", 1000).\n.decl Answer()\nAnswer() :- Has_debt(\"Micronesia\", debt), Has_funds(\"Michael Bloomberg\", funds), funds >= debt * 10.\n.output Answer", "completions": [".decl Has_debt(Country:symbol, Debt:float)\nHas_debt(\"Micronesia\", 100).\n.decl Has_funds(Person:symbol, Funds:float)\nHas_funds(\"Michael Bloomberg\", 1000).\n.decl Answer()\nAnswer() :- Has_debt(\"Micronesia\", debt), Has_funds(\"Michael Bloomberg\", funds), funds >= debt * 10.\n.output Answer"]}
{"id": 2240, "answer": false, "completion": ".decl Has_status(Animal:symbol, Status:symbol)\nHas_status(\"Leopard cat\", \"endangered\").\nHas_status(\"Bornean Orangutan\", \"critically endangered\").\n.decl Answer()\nAnswer() :- Has_status(\"Leopard cat\", status1), Has_status(\"Bornean Orangutan\", status2), status1 != status2, status1 < status2.\n.output Answer", "completions": [".decl Has_status(Animal:symbol, Status:symbol)\nHas_status(\"Leopard cat\", \"endangered\").\nHas_status(\"Bornean Orangutan\", \"critically endangered\").\n.decl Answer()\nAnswer() :- Has_status(\"Leopard cat\", status1), Has_status(\"Bornean Orangutan\", status2), status1 != status2, status1 < status2.\n.output Answer"]}
{"id": 2241, "answer": false, "completion": ".decl Has_speed(Vehicle:symbol, Speed:float)\nHas_speed(\"Panzer VIII Maus tank missile\", 10).\n.decl Distance(City_A:symbol, City_B:symbol, Distance:float)\nDistance(\"Barcelona\", \"Madrid\", 600).\n.decl Answer()\nAnswer() :- Has_speed(\"Panzer VIII Maus tank missile\", speed), Distance(\"Barcelona\", \"Madrid\", distance), speed * 60 > distance.\n.output Answer", "completions": [".decl Has_speed(Vehicle:symbol, Speed:float)\nHas_speed(\"Panzer VIII Maus tank missile\", 10).\n.decl Distance(City_A:symbol, City_B:symbol, Distance:float)\nDistance(\"Barcelona\", \"Madrid\", 600).\n.decl Answer()\nAnswer() :- Has_speed(\"Panzer VIII Maus tank missile\", speed), Distance(\"Barcelona\", \"Madrid\", distance), speed * 60 > distance.\n.output Answer"]}
{"id": 2242, "answer": true, "completion": ".decl Has_discount(Food:symbol, Discount:symbol)\nHas_discount(\"Aldi's foods\", \"yes\").\n.decl Is_out_of_date(Food:symbol, Out_of_date:symbol)\nIs_out_of_date(\"Aldi's foods\", \"no\").\n.decl Answer()\nAnswer() :- Has_discount(\"Aldi's foods\", discount), Is_out_of_date(\"Aldi's foods\", out_of_date), discount != out_of_date.\n.output Answer", "completions": [".decl Has_discount(Food:symbol, Discount:symbol)\nHas_discount(\"Aldi's foods\", \"yes\").\n.decl Is_out_of_date(Food:symbol, Out_of_date:symbol)\nIs_out_of_date(\"Aldi's foods\", \"no\").\n.decl Answer()\nAnswer() :- Has_discount(\"Aldi's foods\", discount), Is_out_of_date(\"Aldi's foods\", out_of_date), discount != out_of_date.\n.output Answer"]}
{"id": 2243, "answer": true, "completion": ".decl Has_personality(Person:symbol, Personality:symbol)\nHas_personality(\"Carrie Poppy\", \"skeptical\").\n.decl Answer()\nAnswer() :- Has_personality(\"Carrie Poppy\", personality), personality != \"trusting\".\n.output Answer", "completions": [".decl Has_personality(Person:symbol, Personality:symbol)\nHas_personality(\"Carrie Poppy\", \"skeptical\").\n.decl Answer()\nAnswer() :- Has_personality(\"Carrie Poppy\", personality), personality != \"trusting\".\n.output Answer"]}
{"id": 2244, "answer": true, "completion": ".decl Donates(Person:symbol, Organ:symbol)\nDonates(\"organ donor\", \"kidney\").\n.decl Is_alive(Person:symbol, Alive:symbol)\nIs_alive(\"organ donor\", \"no\").\n.decl Answer()\nAnswer() :- Donates(\"organ donor\", \"kidney\"), Is_alive(\"organ donor\", \"no\").\n.output Answer", "completions": [".decl Donates(Person:symbol, Organ:symbol)\nDonates(\"organ donor\", \"kidney\").\n.decl Is_alive(Person:symbol, Alive:symbol)\nIs_alive(\"organ donor\", \"no\").\n.decl Answer()\nAnswer() :- Donates(\"organ donor\", \"kidney\"), Is_alive(\"organ donor\", \"no\").\n.output Answer"]}
{"id": 2245, "answer": true, "completion": ".decl Is_possible(Event:symbol)\nIs_possible(\"telling if someone is having a stroke\").\n.decl Answer()\nAnswer() :- Is_possible(\"telling if someone is having a stroke\").\n.output Answer", "completions": [".decl Is_possible(Event:symbol)\nIs_possible(\"telling if someone is having a stroke\").\n.decl Answer()\nAnswer() :- Is_possible(\"telling if someone is having a stroke\").\n.output Answer"]}
{"id": 2246, "answer": true, "completion": ".decl Has_sensory_property(Thing:symbol, Property:symbol)\nHas_sensory_property(\"Law & Order\", \"visual\").\nHas_sensory_property(\"Law & Order\", \"auditory\").\n.decl Answer()\nAnswer() :- !Has_sensory_property(\"Law & Order\", \"taste\").\n.output Answer", "completions": [".decl Has_sensory_property(Thing:symbol, Property:symbol)\nHas_sensory_property(\"Law & Order\", \"visual\").\nHas_sensory_property(\"Law & Order\", \"auditory\").\n.decl Answer()\nAnswer() :- !Has_sensory_property(\"Law & Order\", \"taste\").\n.output Answer"]}
{"id": 2247, "answer": true, "completion": ".decl Has_equivalent(God_A:symbol, God_B:symbol)\nHas_equivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Has_equivalent(\"Vulcan\", god2).\n.output Answer", "completions": [".decl Has_equivalent(God_A:symbol, God_B:symbol)\nHas_equivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Has_equivalent(\"Vulcan\", god2).\n.output Answer"]}
{"id": 2248, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Continent:symbol)\nLives_in(\"hippopotamus\", \"Africa\").\n.decl Answer()\nAnswer() :- Lives_in(animal, \"Africa\"), !Lives_in(animal, continent), continent != \"Africa\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Continent:symbol)\nLives_in(\"hippopotamus\", \"Africa\").\n.decl Answer()\nAnswer() :- Lives_in(animal, \"Africa\"), !Lives_in(animal, continent), continent != \"Africa\".\n.output Answer"]}
{"id": 2249, "answer": true, "completion": ".decl Is_appropriate(Gift:symbol, Wrapping_paper:symbol)\nIs_appropriate(\"gift\", \"stork wrapping paper\").\n.decl Answer()\nAnswer() :- Is_appropriate(\"gift\", \"stork wrapping paper\").\n.output Answer", "completions": [".decl Is_appropriate(Gift:symbol, Wrapping_paper:symbol)\nIs_appropriate(\"gift\", \"stork wrapping paper\").\n.decl Answer()\nAnswer() :- Is_appropriate(\"gift\", \"stork wrapping paper\").\n.output Answer"]}
{"id": 2250, "answer": false, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"Petco\", \"pet food\").\nSells(\"Petco\", \"pet toys\").\nSells(\"Best Buy\", \"Casio products\").\n.decl Answer()\nAnswer() :- Sells(\"Petco\", \"Casio products\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"Petco\", \"pet food\").\nSells(\"Petco\", \"pet toys\").\nSells(\"Best Buy\", \"Casio products\").\n.decl Answer()\nAnswer() :- Sells(\"Petco\", \"Casio products\").\n.output Answer"]}
{"id": 2251, "answer": true, "completion": ".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"Immanuel Kant\", \"disgusted\").\n.decl Describes(Movement:symbol, Description:symbol)\nDescribes(\"Black Lives Matter\", \"social justice\").\n.decl Answer()\nAnswer() :- Has_opinion(\"Immanuel Kant\", opinion), Describes(\"Black Lives Matter\", description), opinion = \"disgusted\".\n.output Answer", "completions": [".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"Immanuel Kant\", \"disgusted\").\n.decl Describes(Movement:symbol, Description:symbol)\nDescribes(\"Black Lives Matter\", \"social justice\").\n.decl Answer()\nAnswer() :- Has_opinion(\"Immanuel Kant\", opinion), Describes(\"Black Lives Matter\", description), opinion = \"disgusted\".\n.output Answer"]}
{"id": 2252, "answer": true, "completion": ".decl Eats(Animal:symbol, Food:symbol)\nEats(\"cat\", \"meat\").\n.decl Answer()\nAnswer() :- !Eats(\"cat\", \"pancakes\").\n.output Answer", "completions": [".decl Eats(Animal:symbol, Food:symbol)\nEats(\"cat\", \"meat\").\n.decl Answer()\nAnswer() :- !Eats(\"cat\", \"pancakes\").\n.output Answer"]}
{"id": 2253, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Euro\", 8.9).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"Euro\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Euro\", 8.9).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"Euro\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer"]}
{"id": 2254, "answer": false, "completion": ".decl Has_dentures(Animal:symbol, Dentures:symbol)\nHas_dentures(\"honey badger\", \"sharp\").\nHas_dentures(\"wolverine\", \"sharp\").\n.decl Answer()\nAnswer() :- Has_dentures(\"honey badger\", dentures1), Has_dentures(\"wolverine\", dentures2), dentures1 != dentures2.\n.output Answer", "completions": [".decl Has_dentures(Animal:symbol, Dentures:symbol)\nHas_dentures(\"honey badger\", \"sharp\").\nHas_dentures(\"wolverine\", \"sharp\").\n.decl Answer()\nAnswer() :- Has_dentures(\"honey badger\", dentures1), Has_dentures(\"wolverine\", dentures2), dentures1 != dentures2.\n.output Answer"]}
{"id": 2255, "answer": true, "completion": ".decl Is_alive(Organism:symbol, Alive:symbol)\nIs_alive(\"Cholera\", \"yes\").\n.decl Answer()\nAnswer() :- Is_alive(\"Cholera\", alive).\n.output Answer", "completions": [".decl Is_alive(Organism:symbol, Alive:symbol)\nIs_alive(\"Cholera\", \"yes\").\n.decl Answer()\nAnswer() :- Is_alive(\"Cholera\", alive).\n.output Answer"]}
{"id": 2256, "answer": true, "completion": ".decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Prince Charles\", \"2020 British royal family\").\nIs_member_of(\"Prince William\", \"2020 British royal family\").\nIs_member_of(\"Prince Harry\", \"2020 British royal family\").\n.decl Has_committed(Person:symbol, Crime:symbol)\nHas_committed(\"Prince Charles\", \"felony\").\n.decl Answer()\nAnswer() :- Is_member_of(person, \"2020 British royal family\"), Has_committed(person, \"felony\").\n.output Answer", "completions": [".decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Prince Charles\", \"2020 British royal family\").\nIs_member_of(\"Prince William\", \"2020 British royal family\").\nIs_member_of(\"Prince Harry\", \"2020 British royal family\").\n.decl Has_committed(Person:symbol, Crime:symbol)\nHas_committed(\"Prince Charles\", \"felony\").\n.decl Answer()\nAnswer() :- Is_member_of(person, \"2020 British royal family\"), Has_committed(person, \"felony\").\n.output Answer"]}
{"id": 2257, "answer": true, "completion": ".decl Has_association(Day:symbol, Character:symbol)\nHas_association(\"Wednesday\", \"Thor\").\n.decl Answer()\nAnswer() :- Has_association(\"Wednesday\", \"Thor\").\n.output Answer", "completions": [".decl Has_association(Day:symbol, Character:symbol)\nHas_association(\"Wednesday\", \"Thor\").\n.decl Answer()\nAnswer() :- Has_association(\"Wednesday\", \"Thor\").\n.output Answer"]}
{"id": 2258, "answer": true, "completion": ".decl Associated_with(Thing_A:symbol, Thing_B:symbol)\nAssociated_with(\"honey\", \"bees\").\nAssociated_with(\"bees\", \"queens\").\n.decl Answer()\nAnswer() :- Associated_with(\"honey\", thing2), Associated_with(thing2, \"queens\").\n.output Answer", "completions": [".decl Associated_with(Thing_A:symbol, Thing_B:symbol)\nAssociated_with(\"honey\", \"bees\").\nAssociated_with(\"bees\", \"queens\").\n.decl Answer()\nAnswer() :- Associated_with(\"honey\", thing2), Associated_with(thing2, \"queens\").\n.output Answer"]}
{"id": 2259, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"Frankenstein's monster\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_size(\"Frankenstein's monster\", size1), height1 > size1.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"Frankenstein's monster\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_size(\"Frankenstein's monster\", size1), height1 > size1.\n.output Answer"]}
{"id": 2260, "answer": true, "completion": ".decl Teaches(Teacher:symbol, Subject:symbol)\nTeaches(\"kindergarten teacher\", \"math\").\nTeaches(\"kindergarten teacher\", \"reading\").\nTeaches(\"kindergarten teacher\", \"writing\").\n.decl Answer()\nAnswer() :- !Teaches(\"kindergarten teacher\", \"New Testament\").\n.output Answer", "completions": [".decl Teaches(Teacher:symbol, Subject:symbol)\nTeaches(\"kindergarten teacher\", \"math\").\nTeaches(\"kindergarten teacher\", \"reading\").\nTeaches(\"kindergarten teacher\", \"writing\").\n.decl Answer()\nAnswer() :- !Teaches(\"kindergarten teacher\", \"New Testament\").\n.output Answer"]}
{"id": 2261, "answer": true, "completion": ".decl Writes(Person:symbol, Book:symbol)\nWrites(\"Alfred Nobel\", \"The Merchant of Venice\").\n.decl Is_banned(Book:symbol)\nIs_banned(\"The Merchant of Venice\").\n.decl Answer()\nAnswer() :- Writes(\"Alfred Nobel\", book), Is_banned(book).\n.output Answer", "completions": [".decl Writes(Person:symbol, Book:symbol)\nWrites(\"Alfred Nobel\", \"The Merchant of Venice\").\n.decl Is_banned(Book:symbol)\nIs_banned(\"The Merchant of Venice\").\n.decl Answer()\nAnswer() :- Writes(\"Alfred Nobel\", book), Is_banned(book).\n.output Answer"]}
{"id": 2262, "answer": true, "completion": ".decl Halts(Action:symbol, Energy:symbol)\nHalts(\"ukemi\", \"kinetic energy\").\n.decl Answer()\nAnswer() :- Halts(\"ukemi\", \"kinetic energy\").\n.output Answer", "completions": [".decl Halts(Action:symbol, Energy:symbol)\nHalts(\"ukemi\", \"kinetic energy\").\n.decl Answer()\nAnswer() :- Halts(\"ukemi\", \"kinetic energy\").\n.output Answer"]}
{"id": 2263, "answer": false, "completion": ".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"special brownies\", \"marijuana\").\n.decl Answer()\nAnswer() :- Contains(\"special brownies\", \"marijuana\"), ! Contains(\"special brownies\", ingredient), ! Contains(food, \"marijuana\").\n.output Answer", "completions": [".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"special brownies\", \"marijuana\").\n.decl Answer()\nAnswer() :- Contains(\"special brownies\", \"marijuana\"), ! Contains(\"special brownies\", ingredient), ! Contains(food, \"marijuana\").\n.output Answer"]}
{"id": 2264, "answer": false, "completion": ".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"The Simpsons\", 690).\nHas_n_episodes(\"Futurama\", 140).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"The Simpsons\", n_episodes1), Has_n_episodes(\"Futurama\", n_episodes2), n_episodes2 > n_episodes1.\n.output Answer", "completions": [".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"The Simpsons\", 690).\nHas_n_episodes(\"Futurama\", 140).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"The Simpsons\", n_episodes1), Has_n_episodes(\"Futurama\", n_episodes2), n_episodes2 > n_episodes1.\n.output Answer"]}
{"id": 2265, "answer": true, "completion": ".decl Lives_in_temperature(Fish:symbol, Temperature:float)\nLives_in_temperature(\"anchovy\", 10).\nLives_in_temperature(\"anchovy\", 20).\n.decl Answer()\nAnswer() :- Lives_in_temperature(\"anchovy\", temperature1), Lives_in_temperature(\"anchovy\", temperature2), temperature1 < temperature2.\n.output Answer", "completions": [".decl Lives_in_temperature(Fish:symbol, Temperature:float)\nLives_in_temperature(\"anchovy\", 10).\nLives_in_temperature(\"anchovy\", 20).\n.decl Answer()\nAnswer() :- Lives_in_temperature(\"anchovy\", temperature1), Lives_in_temperature(\"anchovy\", temperature2), temperature1 < temperature2.\n.output Answer"]}
{"id": 2266, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"John\", \"guitar hero\").\nHas_skill(\"John\", \"guitar\").\n.decl Answer()\nAnswer() :- Has_skill(person, \"guitar hero\"), Has_skill(person, \"guitar\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"John\", \"guitar hero\").\nHas_skill(\"John\", \"guitar\").\n.decl Answer()\nAnswer() :- Has_skill(person, \"guitar hero\"), Has_skill(person, \"guitar\").\n.output Answer"]}
{"id": 2267, "answer": false, "completion": ".decl Has_kills(Person:symbol, N_kills:float)\nHas_kills(\"Charles Manson\", 7).\n.decl Named_for(Person:symbol, Person_2:symbol)\nNamed_for(\"Tex Watson\", \"Charles Manson\").\nNamed_for(\"Susan Atkins\", \"Charles Manson\").\nNamed_for(\"Patricia Krenwinkel\", \"Charles Manson\").\n.decl Answer()\nAnswer() :- Has_kills(\"Charles Manson\", n_kills1), Named_for(person, \"Charles Manson\"), Has_kills(person, n_kills2), n_kills2 > n_kills1.\n.output Answer", "completions": [".decl Has_kills(Person:symbol, N_kills:float)\nHas_kills(\"Charles Manson\", 7).\n.decl Named_for(Person:symbol, Person_2:symbol)\nNamed_for(\"Tex Watson\", \"Charles Manson\").\nNamed_for(\"Susan Atkins\", \"Charles Manson\").\nNamed_for(\"Patricia Krenwinkel\", \"Charles Manson\").\n.decl Answer()\nAnswer() :- Has_kills(\"Charles Manson\", n_kills1), Named_for(person, \"Charles Manson\"), Has_kills(person, n_kills2), n_kills2 > n_kills1.\n.output Answer"]}
{"id": 2268, "answer": true, "completion": ".decl Has_power(Branch:symbol, Power:symbol)\nHas_power(\"executive\", \"veto\").\nHas_power(\"executive\", \"military\").\n.decl Answer()\nAnswer() :- Has_power(\"executive\", power1), Has_power(\"executive\", power2), power1 = \"veto\", power2 = \"military\".\n.output Answer", "completions": [".decl Has_power(Branch:symbol, Power:symbol)\nHas_power(\"executive\", \"veto\").\nHas_power(\"executive\", \"military\").\n.decl Answer()\nAnswer() :- Has_power(\"executive\", power1), Has_power(\"executive\", power2), power1 = \"veto\", power2 = \"military\".\n.output Answer"]}
{"id": 2269, "answer": true, "completion": ".decl Believes_in(Religion:symbol, Afterlife:symbol)\nBelieves_in(\"Christianity\", \"Heaven\").\nBelieves_in(\"Christianity\", \"Hell\").\n.decl Answer()\nAnswer() :- Believes_in(\"Christianity\", afterlife), afterlife != \"Sheol\".\n.output Answer", "completions": [".decl Believes_in(Religion:symbol, Afterlife:symbol)\nBelieves_in(\"Christianity\", \"Heaven\").\nBelieves_in(\"Christianity\", \"Hell\").\n.decl Answer()\nAnswer() :- Believes_in(\"Christianity\", afterlife), afterlife != \"Sheol\".\n.output Answer"]}
{"id": 2270, "answer": true, "completion": ".decl Built_by(Structure:symbol, Government:symbol)\nBuilt_by(\"Great Pyramids\", \"Egyptian Empire\").\n.decl Is_theocratic(Government:symbol)\nIs_theocratic(\"Egyptian Empire\").\n.decl Answer()\nAnswer() :- Built_by(\"Great Pyramids\", government), Is_theocratic(government).\n.output Answer", "completions": [".decl Built_by(Structure:symbol, Government:symbol)\nBuilt_by(\"Great Pyramids\", \"Egyptian Empire\").\n.decl Is_theocratic(Government:symbol)\nIs_theocratic(\"Egyptian Empire\").\n.decl Answer()\nAnswer() :- Built_by(\"Great Pyramids\", government), Is_theocratic(government).\n.output Answer"]}
{"id": 2271, "answer": true, "completion": ".decl Is_allowed_to_ride(Person:symbol, Ride:symbol)\nIs_allowed_to_ride(\"Justin Timberlake\", \"Shipwreck Falls\").\n.decl Is_at_location(Ride:symbol, Location:symbol)\nIs_at_location(\"Shipwreck Falls\", \"Six Flags\").\n.decl Answer()\nAnswer() :- Is_allowed_to_ride(\"Justin Timberlake\", ride), Is_at_location(ride, \"Six Flags\").\n.output Answer", "completions": [".decl Is_allowed_to_ride(Person:symbol, Ride:symbol)\nIs_allowed_to_ride(\"Justin Timberlake\", \"Shipwreck Falls\").\n.decl Is_at_location(Ride:symbol, Location:symbol)\nIs_at_location(\"Shipwreck Falls\", \"Six Flags\").\n.decl Answer()\nAnswer() :- Is_allowed_to_ride(\"Justin Timberlake\", ride), Is_at_location(ride, \"Six Flags\").\n.output Answer"]}
{"id": 2272, "answer": false, "completion": ".decl Traverses(Boat:symbol, Tunnel:symbol)\nTraverses(\"Oasis cruise boat\", \"Hudson River Tunnel\").\n.decl Answer()\nAnswer() :- Traverses(\"Oasis cruise boat\", \"Lincoln Tunnel\"), !Traverses(\"Oasis cruise boat\", \"Hudson River Tunnel\").\n.output Answer", "completions": [".decl Traverses(Boat:symbol, Tunnel:symbol)\nTraverses(\"Oasis cruise boat\", \"Hudson River Tunnel\").\n.decl Answer()\nAnswer() :- Traverses(\"Oasis cruise boat\", \"Lincoln Tunnel\"), !Traverses(\"Oasis cruise boat\", \"Hudson River Tunnel\").\n.output Answer"]}
{"id": 2273, "answer": true, "completion": ".decl Advocates(Person:symbol, Lifestyle:symbol)\nAdvocates(\"Snoop Dogg\", \"hip hop\").\n.decl Answer()\nAnswer() :- !Advocates(\"Snoop Dogg\", \"straight edge\").\n.output Answer", "completions": [".decl Advocates(Person:symbol, Lifestyle:symbol)\nAdvocates(\"Snoop Dogg\", \"hip hop\").\n.decl Answer()\nAnswer() :- !Advocates(\"Snoop Dogg\", \"straight edge\").\n.output Answer"]}
{"id": 2274, "answer": true, "completion": ".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"amoeba\", \"cancer\").\n.decl Answer()\nAnswer() :- Has_disease(\"amoeba\", \"cancer\").\n.output Answer", "completions": [".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"amoeba\", \"cancer\").\n.decl Answer()\nAnswer() :- Has_disease(\"amoeba\", \"cancer\").\n.output Answer"]}
{"id": 2275, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Battle of Baghdad\", \"2003\").\nHappens_in_time(\"Justin Bieber's Believe album\", \"2012\").\n.decl Answer()\nAnswer() :- !Happens_in_time(\"Battle of Baghdad\", time1), Happens_in_time(\"Justin Bieber's Believe album\", time2), time1 = time2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Battle of Baghdad\", \"2003\").\nHappens_in_time(\"Justin Bieber's Believe album\", \"2012\").\n.decl Answer()\nAnswer() :- !Happens_in_time(\"Battle of Baghdad\", time1), Happens_in_time(\"Justin Bieber's Believe album\", time2), time1 = time2.\n.output Answer"]}
{"id": 2276, "answer": false, "completion": ".decl Contains(Dish:symbol, Ingredient:symbol)\nContains(\"Paella\", \"seafood\").\nContains(\"Paella\", \"meat\").\n.decl Is_vegan(Person:symbol)\nIs_vegan(\"John\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Contains(\"Paella\", ingredient), !Eats(person, ingredient).\n.output Answer", "completions": [".decl Contains(Dish:symbol, Ingredient:symbol)\nContains(\"Paella\", \"seafood\").\nContains(\"Paella\", \"meat\").\n.decl Is_vegan(Person:symbol)\nIs_vegan(\"John\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Contains(\"Paella\", ingredient), !Eats(person, ingredient).\n.output Answer"]}
{"id": 2277, "answer": true, "completion": ".decl Accused_of(Person_A:symbol, Person_B:symbol)\nAccused_of(\"Mozart\", \"Richard Wagner\").\n.decl Answer()\nAnswer() :- Accused_of(\"Mozart\", \"Richard Wagner\").\n.output Answer", "completions": [".decl Accused_of(Person_A:symbol, Person_B:symbol)\nAccused_of(\"Mozart\", \"Richard Wagner\").\n.decl Answer()\nAnswer() :- Accused_of(\"Mozart\", \"Richard Wagner\").\n.output Answer"]}
{"id": 2278, "answer": true, "completion": ".decl Is_custom(Event:symbol, Custom:symbol)\nIs_custom(\"New Year's Eve\", \"celebration\").\nIs_custom(\"New Year's Eve\", \"gift-giving\").\n.decl Answer()\nAnswer() :- Is_custom(\"New Year's Eve\", \"gift-giving\").\n.output Answer", "completions": [".decl Is_custom(Event:symbol, Custom:symbol)\nIs_custom(\"New Year's Eve\", \"celebration\").\nIs_custom(\"New Year's Eve\", \"gift-giving\").\n.decl Answer()\nAnswer() :- Is_custom(\"New Year's Eve\", \"gift-giving\").\n.output Answer"]}
{"id": 2279, "answer": true, "completion": ".decl Lives_in(Fish:symbol, Sea:symbol)\nLives_in(\"yellow perch\", \"Atlantic Ocean\").\n.decl Answer()\nAnswer() :- Lives_in(\"yellow perch\", sea), sea != \"Red Sea\".\n.output Answer", "completions": [".decl Lives_in(Fish:symbol, Sea:symbol)\nLives_in(\"yellow perch\", \"Atlantic Ocean\").\n.decl Answer()\nAnswer() :- Lives_in(\"yellow perch\", sea), sea != \"Red Sea\".\n.output Answer"]}
{"id": 2280, "answer": true, "completion": ".decl Has_ruler_type(Kingdom:symbol, Ruler_type:symbol)\nHas_ruler_type(\"Kingdom of Hungary\", \"elected\").\n.decl Answer()\nAnswer() :- Has_ruler_type(\"Kingdom of Hungary\", \"elected\").\n.output Answer", "completions": [".decl Has_ruler_type(Kingdom:symbol, Ruler_type:symbol)\nHas_ruler_type(\"Kingdom of Hungary\", \"elected\").\n.decl Answer()\nAnswer() :- Has_ruler_type(\"Kingdom of Hungary\", \"elected\").\n.output Answer"]}
{"id": 2281, "answer": true, "completion": ".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Topa Inca Yupanqui\", \"15th century\").\n.decl Exists_in_time(Species:symbol, Time:symbol)\nExists_in_time(\"western honey bee\", \"15th century\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Topa Inca Yupanqui\", time), Exists_in_time(\"western honey bee\", time).\n.output Answer", "completions": [".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Topa Inca Yupanqui\", \"15th century\").\n.decl Exists_in_time(Species:symbol, Time:symbol)\nExists_in_time(\"western honey bee\", \"15th century\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Topa Inca Yupanqui\", time), Exists_in_time(\"western honey bee\", time).\n.output Answer"]}
{"id": 2282, "answer": true, "completion": ".decl Inspires(Book_A:symbol, Book_B:symbol)\n.decl Answer()\nAnswer() :- !Inspires(\"Alice's Adventures in Wonderland\", \"Macbeth\").\n.output Answer", "completions": [".decl Inspires(Book_A:symbol, Book_B:symbol)\n.decl Answer()\nAnswer() :- !Inspires(\"Alice's Adventures in Wonderland\", \"Macbeth\").\n.output Answer"]}
{"id": 2283, "answer": true, "completion": ".decl Prevalence(Mythical_creature:symbol, Prevalence:float)\nPrevalence(\"fairy\", 10).\nPrevalence(\"valkyrie\", 5).\n.decl Answer()\nAnswer() :- Prevalence(\"fairy\", prevalence1), Prevalence(\"valkyrie\", prevalence2), prevalence1 > prevalence2.\n.output Answer", "completions": [".decl Prevalence(Mythical_creature:symbol, Prevalence:float)\nPrevalence(\"fairy\", 10).\nPrevalence(\"valkyrie\", 5).\n.decl Answer()\nAnswer() :- Prevalence(\"fairy\", prevalence1), Prevalence(\"valkyrie\", prevalence2), prevalence1 > prevalence2.\n.output Answer"]}
{"id": 2284, "answer": true, "completion": ".decl Is_type_of(Animal_A:symbol, Animal_B:symbol)\nIs_type_of(\"Chinchilla\", \"rodent\").\n.decl Answer()\nAnswer() :- Is_type_of(\"Chinchilla\", \"rodent\").\n.output Answer", "completions": [".decl Is_type_of(Animal_A:symbol, Animal_B:symbol)\nIs_type_of(\"Chinchilla\", \"rodent\").\n.decl Answer()\nAnswer() :- Is_type_of(\"Chinchilla\", \"rodent\").\n.output Answer"]}
{"id": 2285, "answer": true, "completion": ".decl Visits(Person_A:symbol, Person_B:symbol, Frequency:symbol)\nVisits(\"Elizabeth II\", \"Queen Victoria\", \"frequently\").\n.decl Answer()\nAnswer() :- Visits(\"Elizabeth II\", \"Queen Victoria\", \"frequently\").\n.output Answer", "completions": [".decl Visits(Person_A:symbol, Person_B:symbol, Frequency:symbol)\nVisits(\"Elizabeth II\", \"Queen Victoria\", \"frequently\").\n.decl Answer()\nAnswer() :- Visits(\"Elizabeth II\", \"Queen Victoria\", \"frequently\").\n.output Answer"]}
{"id": 2286, "answer": true, "completion": ".decl Prays_to(Person:symbol, Deity:symbol)\nPrays_to(\"Boy Who Cried Wolf\", \"Pan\").\n.decl Answer()\nAnswer() :- Prays_to(\"Boy Who Cried Wolf\", \"Pan\").\n.output Answer", "completions": [".decl Prays_to(Person:symbol, Deity:symbol)\nPrays_to(\"Boy Who Cried Wolf\", \"Pan\").\n.decl Answer()\nAnswer() :- Prays_to(\"Boy Who Cried Wolf\", \"Pan\").\n.output Answer"]}
{"id": 2287, "answer": true, "completion": ".decl Connects(Object_A:symbol, Object_B:symbol)\nConnects(\"Great Wall of China\", \"China\").\nConnects(\"Dodgers\", \"Los Angeles\").\nConnects(\"White Sox\", \"Chicago\").\n.decl Answer()\nAnswer() :- Connects(\"Great Wall of China\", object1), Connects(\"Dodgers\", object2), Connects(\"White Sox\", object3), !(object1 = object2), !(object1 = object3), !(object2 = object3).\n.output Answer", "completions": [".decl Connects(Object_A:symbol, Object_B:symbol)\nConnects(\"Great Wall of China\", \"China\").\nConnects(\"Dodgers\", \"Los Angeles\").\nConnects(\"White Sox\", \"Chicago\").\n.decl Answer()\nAnswer() :- Connects(\"Great Wall of China\", object1), Connects(\"Dodgers\", object2), Connects(\"White Sox\", object3), !(object1 = object2), !(object1 = object3), !(object2 = object3).\n.output Answer"]}
{"id": 2288, "answer": false, "completion": ".decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"funeral\", \"cemetery\").\n.decl Is_played(Music:symbol, Place:symbol)\nIs_played(\"Happy hardcore music\", \"club\").\n.decl Answer()\nAnswer() :- Happens_at(\"funeral\", place), Is_played(\"Happy hardcore music\", place), ! Is_played(\"Happy hardcore music\", \"cemetery\").\n.output Answer", "completions": [".decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"funeral\", \"cemetery\").\n.decl Is_played(Music:symbol, Place:symbol)\nIs_played(\"Happy hardcore music\", \"club\").\n.decl Answer()\nAnswer() :- Happens_at(\"funeral\", place), Is_played(\"Happy hardcore music\", place), ! Is_played(\"Happy hardcore music\", \"cemetery\").\n.output Answer"]}
{"id": 2289, "answer": false, "completion": ".decl Has_assets(Company:symbol, Assets:float)\nHas_assets(\"Sainsbury's\", 5000000).\nHas_assets(\"Tesco\", 100000000).\n.decl Answer()\nAnswer() :- Has_assets(\"Sainsbury's\", assets1), Has_assets(\"Tesco\", assets2), assets1 >= assets2.\n.output Answer", "completions": [".decl Has_assets(Company:symbol, Assets:float)\nHas_assets(\"Sainsbury's\", 5000000).\nHas_assets(\"Tesco\", 100000000).\n.decl Answer()\nAnswer() :- Has_assets(\"Sainsbury's\", assets1), Has_assets(\"Tesco\", assets2), assets1 >= assets2.\n.output Answer"]}
