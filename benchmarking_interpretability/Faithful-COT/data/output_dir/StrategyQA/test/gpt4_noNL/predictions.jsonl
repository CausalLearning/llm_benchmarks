{"id": 0, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"college commencements\", \"December\").\nHappens_in_time(\"college commencements\", \"May\").\nHappens_in_time(\"college commencements\", \"June\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), Happens_in_time(\"college commencements\", month), In_season(month, season).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"college commencements\", \"December\").\nHappens_in_time(\"college commencements\", \"May\").\nHappens_in_time(\"college commencements\", \"June\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), Happens_in_time(\"college commencements\", month), In_season(month, season).\n.output Answer"]}
{"id": 1, "answer": false, "completion": ".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"hydrogen\", 1).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"hydrogen\", atomic_number), Has_n_members(\"Spice Girls\", n_members), atomic_number^2 > n_members.\n.output Answer", "completions": [".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"hydrogen\", 1).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"hydrogen\", atomic_number), Has_n_members(\"Spice Girls\", n_members), atomic_number^2 > n_members.\n.output Answer"]}
{"id": 2, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"pear\", 0.6).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"pear\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"pear\", 0.6).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"pear\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer"]}
{"id": 3, "answer": false, "completion": "Yes, hamsters provide food for some animals such as snakes and birds.", "completions": ["Yes, hamsters provide food for some animals such as snakes and birds."]}
{"id": 4, "answer": false, "completion": ".decl Limbs_required_for_jujutsu(Limb:symbol)\nLimbs_required_for_jujutsu(\"arms\").\nLimbs_required_for_jujutsu(\"legs\").\n.decl All_limbs(Limb:symbol)\nAll_limbs(\"arms\").\nAll_limbs(\"legs\").\n.decl Answer()\nAnswer() :- !All_limbs(limb), !Limbs_required_for_jujutsu(limb).\n.output Answer", "completions": [".decl Limbs_required_for_jujutsu(Limb:symbol)\nLimbs_required_for_jujutsu(\"arms\").\nLimbs_required_for_jujutsu(\"legs\").\n.decl All_limbs(Limb:symbol)\nAll_limbs(\"arms\").\nAll_limbs(\"legs\").\n.decl Answer()\nAnswer() :- !All_limbs(limb), !Limbs_required_for_jujutsu(limb).\n.output Answer"]}
{"id": 5, "answer": false, "completion": ".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"War in Vietnam\", 6).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"llama birth\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"llama birth\", n_months1), Last_n_months(\"War in Vietnam\", n_months2),  n_months1 <= n_months2.\n.output Answer", "completions": [".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"War in Vietnam\", 6).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"llama birth\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"llama birth\", n_months1), Last_n_months(\"War in Vietnam\", n_months2),  n_months1 <= n_months2.\n.output Answer"]}
{"id": 6, "answer": true, "completion": ".decl Works_on(Person:symbol, Project:symbol)\nWorks_on(\"Linus Torvalds\", \"Linux\").\n.decl Makes_money_from(Person:symbol, Project:symbol)\nMakes_money_from(\"Linus Torvalds\", \"Linux\").\n.decl Is_related(Project_A:symbol, Project_B:symbol)\nIs_related(\"Linux\", \"DirectX\").\n.decl Answer()\nAnswer() :- Works_on(\"Linus Torvalds\", \"DirectX\"), Makes_money_from(\"Linus Torvalds\", \"DirectX\").\nAnswer() :- Works_on(\"Linus Torvalds\", project1), Makes_money_from(\"Linus Torvalds\", project1), Is_related(project1, \"DirectX\").\n.output Answer", "completions": [".decl Works_on(Person:symbol, Project:symbol)\nWorks_on(\"Linus Torvalds\", \"Linux\").\n.decl Makes_money_from(Person:symbol, Project:symbol)\nMakes_money_from(\"Linus Torvalds\", \"Linux\").\n.decl Is_related(Project_A:symbol, Project_B:symbol)\nIs_related(\"Linux\", \"DirectX\").\n.decl Answer()\nAnswer() :- Works_on(\"Linus Torvalds\", \"DirectX\"), Makes_money_from(\"Linus Torvalds\", \"DirectX\").\nAnswer() :- Works_on(\"Linus Torvalds\", project1), Makes_money_from(\"Linus Torvalds\", project1), Is_related(project1, \"DirectX\").\n.output Answer"]}
{"id": 7, "answer": true, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Brooke Shields\", \"Princeton University\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"Princeton University\", 1).\nRanks(\"University of Pennsylvania\", 7).\n.decl Answer()\nAnswer() :- Graduates(\"Brooke Shields\", \"University of Pennsylvania\").\nAnswer() :- Graduates(\"Brooke Shields\", university2), Ranks(university2, rank2), Ranks(\"University of Pennsylvania\", rank1), rank2 <= rank1.\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Brooke Shields\", \"Princeton University\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"Princeton University\", 1).\nRanks(\"University of Pennsylvania\", 7).\n.decl Answer()\nAnswer() :- Graduates(\"Brooke Shields\", \"University of Pennsylvania\").\nAnswer() :- Graduates(\"Brooke Shields\", university2), Ranks(university2, rank2), Ranks(\"University of Pennsylvania\", rank1), rank2 <= rank1.\n.output Answer"]}
{"id": 8, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"silverfish\", 0.0005).\nHas_height(\"Empire State Building\", 381).\n.decl Can_reach(Object_A:symbol, Object_B:symbol)\nCan_reach(\"silverfish\", \"Empire State Building\").\n.decl Answer()\nAnswer() :- Can_reach(\"silverfish\", \"Empire State Building\").\nAnswer() :- Has_height(\"silverfish\", height1), Has_height(\"Empire State Building\", height2), height1 >= height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"silverfish\", 0.0005).\nHas_height(\"Empire State Building\", 381).\n.decl Can_reach(Object_A:symbol, Object_B:symbol)\nCan_reach(\"silverfish\", \"Empire State Building\").\n.decl Answer()\nAnswer() :- Can_reach(\"silverfish\", \"Empire State Building\").\nAnswer() :- Has_height(\"silverfish\", height1), Has_height(\"Empire State Building\", height2), height1 >= height2.\n.output Answer"]}
{"id": 9, "answer": false, "completion": ".decl Reddit_users_familiar_with_pledge(N_users:float, Total_users:float)\nReddit_users_familiar_with_pledge(1000000, 2000000). // Assuming 1 million users are familiar out of 2 million total users\n.decl Majority_familiar()\nMajority_familiar() :- Reddit_users_familiar_with_pledge(N_users, Total_users), N_users > Total_users / 2.\n.output Majority_familiar", "completions": [".decl Reddit_users_familiar_with_pledge(N_users:float, Total_users:float)\nReddit_users_familiar_with_pledge(1000000, 2000000). // Assuming 1 million users are familiar out of 2 million total users\n.decl Majority_familiar()\nMajority_familiar() :- Reddit_users_familiar_with_pledge(N_users, Total_users), N_users > Total_users / 2.\n.output Majority_familiar"]}
{"id": 10, "answer": false, "completion": ".decl Speaks_language(Channel:symbol, Language:symbol)\nSpeaks_language(\"Rede Globo\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Speaks_language(\"Rede Globo\", \"Chinese\").\n.output Answer", "completions": [".decl Speaks_language(Channel:symbol, Language:symbol)\nSpeaks_language(\"Rede Globo\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Speaks_language(\"Rede Globo\", \"Chinese\").\n.output Answer"]}
{"id": 11, "answer": false, "completion": ".decl Is_storable(Object:symbol, Storable:symbol)\nIs_storable(\"Reiki\", \"no\").\n.decl Answer()\nAnswer() :- Is_storable(\"Reiki\", \"yes\").\n.output Answer", "completions": [".decl Is_storable(Object:symbol, Storable:symbol)\nIs_storable(\"Reiki\", \"no\").\n.decl Answer()\nAnswer() :- Is_storable(\"Reiki\", \"yes\").\n.output Answer"]}
{"id": 12, "answer": true, "completion": ".decl Movie_genre(Movie:symbol, Genre:symbol)\nMovie_genre(\"Scary Movie\", \"horror\").\n.decl Causes_adrenaline_increase(Genre:symbol)\nCauses_adrenaline_increase(\"horror\").\n.decl Answer()\nAnswer() :- Movie_genre(\"Scary Movie\", genre), Causes_adrenaline_increase(genre).\n.output Answer", "completions": [".decl Movie_genre(Movie:symbol, Genre:symbol)\nMovie_genre(\"Scary Movie\", \"horror\").\n.decl Causes_adrenaline_increase(Genre:symbol)\nCauses_adrenaline_increase(\"horror\").\n.decl Answer()\nAnswer() :- Movie_genre(\"Scary Movie\", genre), Causes_adrenaline_increase(genre).\n.output Answer"]}
{"id": 13, "answer": true, "completion": ".decl Has_ability(Character:symbol, Ability:symbol)\nHas_ability(\"Gateway\", \"teleportation\").\nHas_ability(\"Doctor\", \"time_travel\").\nHas_ability(\"Doctor\", \"teleportation\").\n.decl Answer()\nAnswer() :- Has_ability(\"Gateway\", ability1), Has_ability(\"Doctor\", ability2), ability1 != ability2, !Has_ability(\"Gateway\", ability2).\n.output Answer", "completions": [".decl Has_ability(Character:symbol, Ability:symbol)\nHas_ability(\"Gateway\", \"teleportation\").\nHas_ability(\"Doctor\", \"time_travel\").\nHas_ability(\"Doctor\", \"teleportation\").\n.decl Answer()\nAnswer() :- Has_ability(\"Gateway\", ability1), Has_ability(\"Doctor\", ability2), ability1 != ability2, !Has_ability(\"Gateway\", ability2).\n.output Answer"]}
{"id": 14, "answer": true, "completion": ".decl Enclosed_in(Material:symbol, Product:symbol)\nEnclosed_in(\"aloe\", \"gel\").\nEnclosed_in(\"aloe\", \"cream\").\n.decl Derived_from(Product:symbol, Source:symbol)\nDerived_from(\"gel\", \"petroleum\").\nDerived_from(\"cream\", \"petroleum\").\n.decl Answer()\nAnswer() :- Enclosed_in(\"aloe\", product), Derived_from(product, \"petroleum\").\n.output Answer", "completions": [".decl Enclosed_in(Material:symbol, Product:symbol)\nEnclosed_in(\"aloe\", \"gel\").\nEnclosed_in(\"aloe\", \"cream\").\n.decl Derived_from(Product:symbol, Source:symbol)\nDerived_from(\"gel\", \"petroleum\").\nDerived_from(\"cream\", \"petroleum\").\n.decl Answer()\nAnswer() :- Enclosed_in(\"aloe\", product), Derived_from(product, \"petroleum\").\n.output Answer"]}
{"id": 15, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"bee hummingbird\", 0.002).\nHas_weight(\"pea\", 0.002).\n.decl Answer()\nAnswer() :- Has_weight(\"bee hummingbird\", weight1), Has_weight(\"pea\", weight2), weight1 == weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"bee hummingbird\", 0.002).\nHas_weight(\"pea\", 0.002).\n.decl Answer()\nAnswer() :- Has_weight(\"bee hummingbird\", weight1), Has_weight(\"pea\", weight2), weight1 == weight2.\n.output Answer"]}
{"id": 16, "answer": false, "completion": ".decl Broadcasts_in_year(Spacecraft:symbol, Year:float)\nBroadcasts_in_year(\"Spirit\", 2004).\n.decl Makes_news_in_year(Event:symbol, Year:float)\nMakes_news_in_year(\"broadcast from Spirit\", 2004).\n.decl Answer()\nAnswer() :- Broadcasts_in_year(\"Spirit\", year1), Makes_news_in_year(\"broadcast from Spirit\", year2), year1 = year2, year2 = 2020.\n.output Answer", "completions": [".decl Broadcasts_in_year(Spacecraft:symbol, Year:float)\nBroadcasts_in_year(\"Spirit\", 2004).\n.decl Makes_news_in_year(Event:symbol, Year:float)\nMakes_news_in_year(\"broadcast from Spirit\", 2004).\n.decl Answer()\nAnswer() :- Broadcasts_in_year(\"Spirit\", year1), Makes_news_in_year(\"broadcast from Spirit\", year2), year1 = year2, year2 = 2020.\n.output Answer"]}
{"id": 17, "answer": false, "completion": ".decl Is_in_book(Character:symbol, Book:symbol)\nIs_in_book(\"Harry Potter\", \"Harry Potter and the Philosopher's Stone\").\nIs_in_book(\"Hermione Granger\", \"Harry Potter and the Philosopher's Stone\").\nIs_in_book(\"Ron Weasley\", \"Harry Potter and the Philosopher's Stone\").\n.decl Practices_religion(Person:symbol, Religion:symbol)\nPractices_religion(\"pagans\", \"paganism\").\n.decl Persecuted_for_religion(Person:symbol, Religion:symbol)\nPersecuted_for_religion(\"pagans\", \"paganism\").\n.decl Answer()\nAnswer() :- Is_in_book(character, \"Harry Potter and the Philosopher's Stone\"), Practices_religion(character, religion), Persecuted_for_religion(character, religion).\n.output Answer", "completions": [".decl Is_in_book(Character:symbol, Book:symbol)\nIs_in_book(\"Harry Potter\", \"Harry Potter and the Philosopher's Stone\").\nIs_in_book(\"Hermione Granger\", \"Harry Potter and the Philosopher's Stone\").\nIs_in_book(\"Ron Weasley\", \"Harry Potter and the Philosopher's Stone\").\n.decl Practices_religion(Person:symbol, Religion:symbol)\nPractices_religion(\"pagans\", \"paganism\").\n.decl Persecuted_for_religion(Person:symbol, Religion:symbol)\nPersecuted_for_religion(\"pagans\", \"paganism\").\n.decl Answer()\nAnswer() :- Is_in_book(character, \"Harry Potter and the Philosopher's Stone\"), Practices_religion(character, religion), Persecuted_for_religion(character, religion).\n.output Answer"]}
{"id": 18, "answer": true, "completion": ".decl Used_as_weapon(Object:symbol)\nUsed_as_weapon(\"sonic weapon\").\n.decl Involves(Object:symbol, Component:symbol)\nInvolves(\"sonic weapon\", \"music\").\n.decl Answer()\nAnswer() :- Used_as_weapon(weapon), Involves(weapon, \"music\").\n.output Answer", "completions": [".decl Used_as_weapon(Object:symbol)\nUsed_as_weapon(\"sonic weapon\").\n.decl Involves(Object:symbol, Component:symbol)\nInvolves(\"sonic weapon\", \"music\").\n.decl Answer()\nAnswer() :- Used_as_weapon(weapon), Involves(weapon, \"music\").\n.output Answer"]}
{"id": 19, "answer": true, "completion": ".decl Books_flight(Person:symbol, Airline:symbol)\nBooks_flight(\"Harry Potter\", \"Asiana Airlines\").\n.decl Answer()\nAnswer() :- Books_flight(\"Harry Potter\", \"Asiana Airlines\").\n.output Answer", "completions": [".decl Books_flight(Person:symbol, Airline:symbol)\nBooks_flight(\"Harry Potter\", \"Asiana Airlines\").\n.decl Answer()\nAnswer() :- Books_flight(\"Harry Potter\", \"Asiana Airlines\").\n.output Answer"]}
{"id": 20, "answer": false, "completion": ".decl Part_of_success(Person:symbol, City:symbol)\nPart_of_success(\"Alexander the Great\", \"Babylon\").\nPart_of_success(\"Alexander the Great\", \"Persepolis\").\nPart_of_success(\"Alexander the Great\", \"Gordium\").\n.decl Answer()\nAnswer() :- Part_of_success(\"Alexander the Great\", \"Karachi\").\n.output Answer", "completions": [".decl Part_of_success(Person:symbol, City:symbol)\nPart_of_success(\"Alexander the Great\", \"Babylon\").\nPart_of_success(\"Alexander the Great\", \"Persepolis\").\nPart_of_success(\"Alexander the Great\", \"Gordium\").\n.decl Answer()\nAnswer() :- Part_of_success(\"Alexander the Great\", \"Karachi\").\n.output Answer"]}
{"id": 21, "answer": false, "completion": ".decl Trained_by(Artist:symbol, Trainer:symbol)\nTrained_by(\"Jackson Pollock\", \"Thomas Hart Benton\").\nTrained_by(\"Leonardo da Vinci\", \"Andrea del Verrocchio\").\n.decl Answer()\nAnswer() :- Trained_by(\"Jackson Pollock\", \"Leonardo da Vinci\").\n.output Answer", "completions": [".decl Trained_by(Artist:symbol, Trainer:symbol)\nTrained_by(\"Jackson Pollock\", \"Thomas Hart Benton\").\nTrained_by(\"Leonardo da Vinci\", \"Andrea del Verrocchio\").\n.decl Answer()\nAnswer() :- Trained_by(\"Jackson Pollock\", \"Leonardo da Vinci\").\n.output Answer"]}
{"id": 22, "answer": true, "completion": ".decl Stimulates_limbic_system(Media:symbol)\nStimulates_limbic_system(\"The Exorcist\").\n.decl Answer()\nAnswer() :- Stimulates_limbic_system(\"The Exorcist\").\n.output Answer", "completions": [".decl Stimulates_limbic_system(Media:symbol)\nStimulates_limbic_system(\"The Exorcist\").\n.decl Answer()\nAnswer() :- Stimulates_limbic_system(\"The Exorcist\").\n.output Answer"]}
{"id": 23, "answer": false, "completion": ".decl Involved_in_WWII(Person:symbol)\nInvolved_in_WWII(\"Alan Turing\").\n.decl Played_Crucial_Role(Person:symbol)\nPlayed_Crucial_Role(\"Alan Turing\").\n.decl Answer()\nAnswer() :- Involved_in_WWII(\"Alan Turing\"), !Played_Crucial_Role(\"Alan Turing\").\n.output Answer", "completions": [".decl Involved_in_WWII(Person:symbol)\nInvolved_in_WWII(\"Alan Turing\").\n.decl Played_Crucial_Role(Person:symbol)\nPlayed_Crucial_Role(\"Alan Turing\").\n.decl Answer()\nAnswer() :- Involved_in_WWII(\"Alan Turing\"), !Played_Crucial_Role(\"Alan Turing\").\n.output Answer"]}
{"id": 24, "answer": false, "completion": ".decl Is_sophist(Person:symbol)\nIs_sophist(\"sophist\").\n.decl Uses_object(Person:symbol, Object:symbol)\nUses_object(\"fencer\", \"épée\").\n.decl Answer()\nAnswer() :- Is_sophist(person), Uses_object(person, \"épée\").\n.output Answer", "completions": [".decl Is_sophist(Person:symbol)\nIs_sophist(\"sophist\").\n.decl Uses_object(Person:symbol, Object:symbol)\nUses_object(\"fencer\", \"épée\").\n.decl Answer()\nAnswer() :- Is_sophist(person), Uses_object(person, \"épée\").\n.output Answer"]}
{"id": 25, "answer": true, "completion": ".decl Hugged(Person_A:symbol, Person_B:symbol, Event:symbol)\nHugged(\"Dale Jr\", \"Dale Sr\", \"last Daytona 500 together\").\n.decl Answer()\nAnswer() :- Hugged(\"Dale Jr\", \"Dale Sr\", \"last Daytona 500 together\").\n.output Answer", "completions": [".decl Hugged(Person_A:symbol, Person_B:symbol, Event:symbol)\nHugged(\"Dale Jr\", \"Dale Sr\", \"last Daytona 500 together\").\n.decl Answer()\nAnswer() :- Hugged(\"Dale Jr\", \"Dale Sr\", \"last Daytona 500 together\").\n.output Answer"]}
{"id": 26, "answer": false, "completion": ".decl Grows_in_location(Plant:symbol, Location:symbol)\nGrows_in_location(\"citrus\", \"warm climates\").\n.decl Has_climate(Location:symbol, Climate:symbol)\nHas_climate(\"Ulaanbaatar\", \"cold\").\n.decl Answer()\nAnswer() :- Grows_in_location(\"citrus\", climate), Has_climate(\"Ulaanbaatar\", climate).\n.output Answer", "completions": [".decl Grows_in_location(Plant:symbol, Location:symbol)\nGrows_in_location(\"citrus\", \"warm climates\").\n.decl Has_climate(Location:symbol, Climate:symbol)\nHas_climate(\"Ulaanbaatar\", \"cold\").\n.decl Answer()\nAnswer() :- Grows_in_location(\"citrus\", climate), Has_climate(\"Ulaanbaatar\", climate).\n.output Answer"]}
{"id": 27, "answer": true, "completion": ".decl Is_on_craton(Location:symbol, Craton:symbol)\nIs_on_craton(\"New York Harbor\", \"North American Craton\").\n.decl Has_volcanic_activity(Craton:symbol)\nHas_volcanic_activity(\"Pacific Craton\").\n.decl Answer()\nAnswer() :- Is_on_craton(\"New York Harbor\", craton), !Has_volcanic_activity(craton).\n.output Answer", "completions": [".decl Is_on_craton(Location:symbol, Craton:symbol)\nIs_on_craton(\"New York Harbor\", \"North American Craton\").\n.decl Has_volcanic_activity(Craton:symbol)\nHas_volcanic_activity(\"Pacific Craton\").\n.decl Answer()\nAnswer() :- Is_on_craton(\"New York Harbor\", craton), !Has_volcanic_activity(craton).\n.output Answer"]}
{"id": 28, "answer": true, "completion": ".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"Palace of Westminster\", \"clock\").\nHas_feature(\"clock\", \"tells time\").\nHas_feature(\"clock\", \"visible in dark\").\n.decl Answer()\nAnswer() :- Has_feature(\"Palace of Westminster\", feature1), Has_feature(feature1, \"tells time\"), Has_feature(feature1, \"visible in dark\").\n.output Answer", "completions": [".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"Palace of Westminster\", \"clock\").\nHas_feature(\"clock\", \"tells time\").\nHas_feature(\"clock\", \"visible in dark\").\n.decl Answer()\nAnswer() :- Has_feature(\"Palace of Westminster\", feature1), Has_feature(feature1, \"tells time\"), Has_feature(feature1, \"visible in dark\").\n.output Answer"]}
{"id": 29, "answer": true, "completion": ".decl Has_safety_level(Group:symbol, Medication:symbol, Safety_level:float)\nHas_safety_level(\"teenagers and young adults with depression\", \"SSRI\", 0.7).\nHas_safety_level(\"adults\", \"SSRI\", 0.9).\n.decl Answer()\nAnswer() :- Has_safety_level(\"teenagers and young adults with depression\", \"SSRI\", safety_level1), Has_safety_level(\"adults\", \"SSRI\", safety_level2), safety_level1 < safety_level2.\n.output Answer", "completions": [".decl Has_safety_level(Group:symbol, Medication:symbol, Safety_level:float)\nHas_safety_level(\"teenagers and young adults with depression\", \"SSRI\", 0.7).\nHas_safety_level(\"adults\", \"SSRI\", 0.9).\n.decl Answer()\nAnswer() :- Has_safety_level(\"teenagers and young adults with depression\", \"SSRI\", safety_level1), Has_safety_level(\"adults\", \"SSRI\", safety_level2), safety_level1 < safety_level2.\n.output Answer"]}
{"id": 30, "answer": true, "completion": ".decl Has_close_relationship(Person:symbol, Entity:symbol)\nHas_close_relationship(\"Marco Rubio\", \"Christian God\").\n.decl Is_same_entity(Entity1:symbol, Entity2:symbol)\nIs_same_entity(\"Christian God\", \"Allah\").\n.decl Answer()\nAnswer() :- Has_close_relationship(\"Marco Rubio\", \"Allah\").\nAnswer() :- Has_close_relationship(\"Marco Rubio\", entity1), Is_same_entity(entity1, \"Allah\").\n.output Answer", "completions": [".decl Has_close_relationship(Person:symbol, Entity:symbol)\nHas_close_relationship(\"Marco Rubio\", \"Christian God\").\n.decl Is_same_entity(Entity1:symbol, Entity2:symbol)\nIs_same_entity(\"Christian God\", \"Allah\").\n.decl Answer()\nAnswer() :- Has_close_relationship(\"Marco Rubio\", \"Allah\").\nAnswer() :- Has_close_relationship(\"Marco Rubio\", entity1), Is_same_entity(entity1, \"Allah\").\n.output Answer"]}
{"id": 31, "answer": true, "completion": ".decl Is_consultant(Person:symbol, Profession:symbol)\nIs_consultant(\"Persephone\", \"landscape architect\").\n.decl Has_knowledge(Person:symbol, Knowledge:symbol)\nHas_knowledge(\"Persephone\", \"plants\").\nHas_knowledge(\"Persephone\", \"seasons\").\n.decl Required_knowledge(Profession:symbol, Knowledge:symbol)\nRequired_knowledge(\"landscape architect\", \"plants\").\nRequired_knowledge(\"landscape architect\", \"seasons\").\n.decl Answer()\nAnswer() :- Is_consultant(\"Persephone\", \"landscape architect\").\nAnswer() :- Has_knowledge(\"Persephone\", knowledge1), Required_knowledge(\"landscape architect\", knowledge1).\n.output Answer", "completions": [".decl Is_consultant(Person:symbol, Profession:symbol)\nIs_consultant(\"Persephone\", \"landscape architect\").\n.decl Has_knowledge(Person:symbol, Knowledge:symbol)\nHas_knowledge(\"Persephone\", \"plants\").\nHas_knowledge(\"Persephone\", \"seasons\").\n.decl Required_knowledge(Profession:symbol, Knowledge:symbol)\nRequired_knowledge(\"landscape architect\", \"plants\").\nRequired_knowledge(\"landscape architect\", \"seasons\").\n.decl Answer()\nAnswer() :- Is_consultant(\"Persephone\", \"landscape architect\").\nAnswer() :- Has_knowledge(\"Persephone\", knowledge1), Required_knowledge(\"landscape architect\", knowledge1).\n.output Answer"]}
{"id": 32, "answer": false, "completion": ".decl Is_near(Element_A:symbol, Element_B:symbol)\n.decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"Argon\", 18).\nHas_atomic_number(\"Neon\", 10).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"Argon\", atomic_number1), Has_atomic_number(\"Neon\", atomic_number2), abs(atomic_number1 - atomic_number2) <= 10.\n.output Answer", "completions": [".decl Is_near(Element_A:symbol, Element_B:symbol)\n.decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"Argon\", 18).\nHas_atomic_number(\"Neon\", 10).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"Argon\", atomic_number1), Has_atomic_number(\"Neon\", atomic_number2), abs(atomic_number1 - atomic_number2) <= 10.\n.output Answer"]}
{"id": 33, "answer": false, "completion": ".decl Has_parents(Person:symbol, Parent1:symbol, Parent2:symbol)\nHas_parents(\"Thomas Greenhill\", \"father\", \"mother\").\n.decl Violates_monogamy(Person:symbol)\nViolates_monogamy(\"father\") :- Has_parents(_, \"father\", \"mother1\"), Has_parents(_, \"father\", \"mother2\"), mother1 != mother2.\nViolates_monogamy(\"mother\") :- Has_parents(_, \"mother\", \"father1\"), Has_parents(_, \"mother\", \"father2\"), father1 != father2.\n.decl Answer()\nAnswer() :- Violates_monogamy(\"father\").\nAnswer() :- Violates_monogamy(\"mother\").\n.output Answer", "completions": [".decl Has_parents(Person:symbol, Parent1:symbol, Parent2:symbol)\nHas_parents(\"Thomas Greenhill\", \"father\", \"mother\").\n.decl Violates_monogamy(Person:symbol)\nViolates_monogamy(\"father\") :- Has_parents(_, \"father\", \"mother1\"), Has_parents(_, \"father\", \"mother2\"), mother1 != mother2.\nViolates_monogamy(\"mother\") :- Has_parents(_, \"mother\", \"father1\"), Has_parents(_, \"mother\", \"father2\"), father1 != father2.\n.decl Answer()\nAnswer() :- Violates_monogamy(\"father\").\nAnswer() :- Violates_monogamy(\"mother\").\n.output Answer"]}
{"id": 34, "answer": true, "completion": ".decl Uses_yellow_pages(Age_group:symbol)\nUses_yellow_pages(\"adults\").\nUses_yellow_pages(\"seniors\").\n.decl Is_high_schooler(Age_group:symbol)\nIs_high_schooler(\"teenagers\").\n.decl Answer()\nAnswer() :- Is_high_schooler(age_group), !Uses_yellow_pages(age_group).\n.output Answer", "completions": [".decl Uses_yellow_pages(Age_group:symbol)\nUses_yellow_pages(\"adults\").\nUses_yellow_pages(\"seniors\").\n.decl Is_high_schooler(Age_group:symbol)\nIs_high_schooler(\"teenagers\").\n.decl Answer()\nAnswer() :- Is_high_schooler(age_group), !Uses_yellow_pages(age_group).\n.output Answer"]}
{"id": 35, "answer": false, "completion": ".decl Distance(Location_A:symbol, Location_B:symbol, Distance_km:float)\nDistance(\"Alcatraz Island\", \"Siberia\", 8500).\n.decl Max_swim_distance(Person:symbol, Distance_km:float)\nMax_swim_distance(\"escapee\", 3).\n.decl Answer()\nAnswer() :- Distance(\"Alcatraz Island\", \"Siberia\", distance), Max_swim_distance(\"escapee\", max_distance), max_distance >= distance.\n.output Answer", "completions": [".decl Distance(Location_A:symbol, Location_B:symbol, Distance_km:float)\nDistance(\"Alcatraz Island\", \"Siberia\", 8500).\n.decl Max_swim_distance(Person:symbol, Distance_km:float)\nMax_swim_distance(\"escapee\", 3).\n.decl Answer()\nAnswer() :- Distance(\"Alcatraz Island\", \"Siberia\", distance), Max_swim_distance(\"escapee\", max_distance), max_distance >= distance.\n.output Answer"]}
{"id": 36, "answer": true, "completion": ".decl Is_well_preserved(Object:symbol, Location:symbol)\nIs_well_preserved(\"Titanic\", \"bottom of the Gulf of Finland\") :- Has_salinity(\"Gulf of Finland\", salinity1), Has_salinity(\"North Atlantic Ocean\", salinity2), salinity1 < salinity2.\n.decl Has_salinity(Location:symbol, Salinity:float)\nHas_salinity(\"Gulf of Finland\", 5).\nHas_salinity(\"North Atlantic Ocean\", 35).\n.decl Answer()\nAnswer() :- Is_well_preserved(\"Titanic\", \"bottom of the Gulf of Finland\").\n.output Answer", "completions": [".decl Is_well_preserved(Object:symbol, Location:symbol)\nIs_well_preserved(\"Titanic\", \"bottom of the Gulf of Finland\") :- Has_salinity(\"Gulf of Finland\", salinity1), Has_salinity(\"North Atlantic Ocean\", salinity2), salinity1 < salinity2.\n.decl Has_salinity(Location:symbol, Salinity:float)\nHas_salinity(\"Gulf of Finland\", 5).\nHas_salinity(\"North Atlantic Ocean\", 35).\n.decl Answer()\nAnswer() :- Is_well_preserved(\"Titanic\", \"bottom of the Gulf of Finland\").\n.output Answer"]}
{"id": 37, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"snowy owl\", \"tundra\").\n.decl Is_in(Habitat1:symbol, Habitat2:symbol)\nIs_in(\"Sonoran\", \"desert\").\n.decl Answer()\nAnswer() :- Lives_in(\"snowy owl\", habitat1), Is_in(\"Sonoran\", habitat2), habitat1 = habitat2.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"snowy owl\", \"tundra\").\n.decl Is_in(Habitat1:symbol, Habitat2:symbol)\nIs_in(\"Sonoran\", \"desert\").\n.decl Answer()\nAnswer() :- Lives_in(\"snowy owl\", habitat1), Is_in(\"Sonoran\", habitat2), habitat1 = habitat2.\n.output Answer"]}
{"id": 38, "answer": false, "completion": ".decl Is_martyr(Person:symbol, Religion:symbol)\nIs_martyr(\"Ranavalona I victims\", \"Christianity\").\n.decl Worships(Religion_A:symbol, Religion_B:symbol)\nWorships(\"Judaism\", \"Judaism\").\n.decl Is_rabbi(Person:symbol, Religion:symbol)\nIs_rabbi(\"rabbi\", \"Judaism\").\n.decl Answer()\nAnswer() :- Is_rabbi(person, religion1), Is_martyr(martyr, religion2), Worships(religion1, religion2).\n.output Answer", "completions": [".decl Is_martyr(Person:symbol, Religion:symbol)\nIs_martyr(\"Ranavalona I victims\", \"Christianity\").\n.decl Worships(Religion_A:symbol, Religion_B:symbol)\nWorships(\"Judaism\", \"Judaism\").\n.decl Is_rabbi(Person:symbol, Religion:symbol)\nIs_rabbi(\"rabbi\", \"Judaism\").\n.decl Answer()\nAnswer() :- Is_rabbi(person, religion1), Is_martyr(martyr, religion2), Worships(religion1, religion2).\n.output Answer"]}
{"id": 39, "answer": false, "completion": ".decl Uses_reds_from_source(Painter:symbol, Source:symbol)\nUses_reds_from_source(\"oil painter\", \"scale insects\").\n.decl Lives_on(Animal:symbol, Plant:symbol)\nLives_on(\"scale insects\", \"cactus\").\n.decl Answer()\nAnswer() :- !Uses_reds_from_source(\"oil painter\", \"scale insects\"), Lives_on(\"scale insects\", \"cactus\").\n.output Answer", "completions": [".decl Uses_reds_from_source(Painter:symbol, Source:symbol)\nUses_reds_from_source(\"oil painter\", \"scale insects\").\n.decl Lives_on(Animal:symbol, Plant:symbol)\nLives_on(\"scale insects\", \"cactus\").\n.decl Answer()\nAnswer() :- !Uses_reds_from_source(\"oil painter\", \"scale insects\"), Lives_on(\"scale insects\", \"cactus\").\n.output Answer"]}
{"id": 40, "answer": true, "completion": ".decl Written_without_consideration(Document:symbol, Group:symbol)\nWritten_without_consideration(\"Second Amendment\", \"black Americans\").\n.decl Answer()\nAnswer() :- Written_without_consideration(\"Second Amendment\", \"black Americans\").\n.output Answer", "completions": [".decl Written_without_consideration(Document:symbol, Group:symbol)\nWritten_without_consideration(\"Second Amendment\", \"black Americans\").\n.decl Answer()\nAnswer() :- Written_without_consideration(\"Second Amendment\", \"black Americans\").\n.output Answer"]}
{"id": 41, "answer": true, "completion": ".decl Has_element(Planet:symbol, Element:symbol)\nHas_element(\"Mars\", \"carbon dioxide\").\nHas_element(\"Mars\", \"water\").\nHas_element(\"Earth\", \"carbon dioxide\").\nHas_element(\"Earth\", \"water\").\nHas_element(\"Earth\", \"sunlight\").\n.decl Needed_for_photosynthesis(Element:symbol)\nNeeded_for_photosynthesis(\"carbon dioxide\").\nNeeded_for_photosynthesis(\"water\").\nNeeded_for_photosynthesis(\"sunlight\").\n.decl Answer()\nAnswer() :- Needed_for_photosynthesis(element), !Has_element(\"Mars\", element).\n.output Answer", "completions": [".decl Has_element(Planet:symbol, Element:symbol)\nHas_element(\"Mars\", \"carbon dioxide\").\nHas_element(\"Mars\", \"water\").\nHas_element(\"Earth\", \"carbon dioxide\").\nHas_element(\"Earth\", \"water\").\nHas_element(\"Earth\", \"sunlight\").\n.decl Needed_for_photosynthesis(Element:symbol)\nNeeded_for_photosynthesis(\"carbon dioxide\").\nNeeded_for_photosynthesis(\"water\").\nNeeded_for_photosynthesis(\"sunlight\").\n.decl Answer()\nAnswer() :- Needed_for_photosynthesis(element), !Has_element(\"Mars\", element).\n.output Answer"]}
{"id": 42, "answer": true, "completion": ".decl Found_in_place(Object:symbol, Place:symbol)\nFound_in_place(\"Bob Marley's face\", \"smoke shops\").\n.decl Answer()\nAnswer() :- Found_in_place(\"Bob Marley's face\", \"smoke shops\").\n.output Answer", "completions": [".decl Found_in_place(Object:symbol, Place:symbol)\nFound_in_place(\"Bob Marley's face\", \"smoke shops\").\n.decl Answer()\nAnswer() :- Found_in_place(\"Bob Marley's face\", \"smoke shops\").\n.output Answer"]}
{"id": 43, "answer": true, "completion": ".decl Has_nicknames(Person:symbol, N_nicknames:float)\nHas_nicknames(\"Pablo Escobar\", 5).\nHas_nicknames(\"Robert Moses Grove\", 3).\n.decl Answer()\nAnswer() :- Has_nicknames(\"Pablo Escobar\", n_nicknames1), Has_nicknames(\"Robert Moses Grove\", n_nicknames2), n_nicknames1 > n_nicknames2.\n.output Answer", "completions": [".decl Has_nicknames(Person:symbol, N_nicknames:float)\nHas_nicknames(\"Pablo Escobar\", 5).\nHas_nicknames(\"Robert Moses Grove\", 3).\n.decl Answer()\nAnswer() :- Has_nicknames(\"Pablo Escobar\", n_nicknames1), Has_nicknames(\"Robert Moses Grove\", n_nicknames2), n_nicknames1 > n_nicknames2.\n.output Answer"]}
{"id": 44, "answer": true, "completion": ".decl Connected_with_abusers(Organization:symbol, Person:symbol)\nConnected_with_abusers(\"Subway\", \"Jared Fogle\").\n.decl Is_child_abuser(Person:symbol)\nIs_child_abuser(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Connected_with_abusers(\"Subway\", person), Is_child_abuser(person).\n.output Answer", "completions": [".decl Connected_with_abusers(Organization:symbol, Person:symbol)\nConnected_with_abusers(\"Subway\", \"Jared Fogle\").\n.decl Is_child_abuser(Person:symbol)\nIs_child_abuser(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Connected_with_abusers(\"Subway\", person), Is_child_abuser(person).\n.output Answer"]}
{"id": 45, "answer": true, "completion": ".decl Relies_on(A:symbol, B:symbol)\nRelies_on(\"autopilot\", \"electricity\").\nRelies_on(\"electricity\", \"fossil fuels\").\n.decl Answer()\nAnswer() :- Relies_on(\"autopilot\", dependency), Relies_on(dependency, \"fossil fuels\").\n.output Answer", "completions": [".decl Relies_on(A:symbol, B:symbol)\nRelies_on(\"autopilot\", \"electricity\").\nRelies_on(\"electricity\", \"fossil fuels\").\n.decl Answer()\nAnswer() :- Relies_on(\"autopilot\", dependency), Relies_on(dependency, \"fossil fuels\").\n.output Answer"]}
{"id": 46, "answer": false, "completion": ".decl Has_requirement(Organization:symbol, Requirement:symbol)\nHas_requirement(\"United States Air Force\", \"no psychiatric disorders\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"psychiatric patient\", \"psychiatric disorders\").\n.decl Can_join(Person:symbol, Organization:symbol)\nCan_join(person, \"United States Air Force\") :- !Has_condition(person, \"psychiatric disorders\").\n.decl Answer()\nAnswer() :- !Can_join(\"psychiatric patient\", \"United States Air Force\").\n.output Answer", "completions": [".decl Has_requirement(Organization:symbol, Requirement:symbol)\nHas_requirement(\"United States Air Force\", \"no psychiatric disorders\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"psychiatric patient\", \"psychiatric disorders\").\n.decl Can_join(Person:symbol, Organization:symbol)\nCan_join(person, \"United States Air Force\") :- !Has_condition(person, \"psychiatric disorders\").\n.decl Answer()\nAnswer() :- !Can_join(\"psychiatric patient\", \"United States Air Force\").\n.output Answer"]}
{"id": 47, "answer": true, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Nicole Kidman\", \"Tom Cruise\").\n.decl Is_Scientologist(Person:symbol)\nIs_Scientologist(\"Tom Cruise\").\n.decl Answer()\nAnswer() :- Knows(\"Nicole Kidman\", person), Is_Scientologist(person).\n.output Answer", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Nicole Kidman\", \"Tom Cruise\").\n.decl Is_Scientologist(Person:symbol)\nIs_Scientologist(\"Tom Cruise\").\n.decl Answer()\nAnswer() :- Knows(\"Nicole Kidman\", person), Is_Scientologist(person).\n.output Answer"]}
{"id": 48, "answer": true, "completion": ".decl Known_good_friend(Person_A:symbol, Person_B:symbol)\nKnown_good_friend(\"John Lennon\", \"Paul McCartney\").\n.decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"John Lennon\", 1940).\nBorn_in_year(\"Sasha Obama\", 2001).\n.decl Answer()\nAnswer() :- Known_good_friend(\"John Lennon\", \"Sasha Obama\").\nAnswer() :- Born_in_year(\"John Lennon\", birth_year1), Born_in_year(\"Sasha Obama\", birth_year2), birth_year1 < birth_year2, !Known_good_friend(\"John Lennon\", \"Sasha Obama\").\n.output Answer", "completions": [".decl Known_good_friend(Person_A:symbol, Person_B:symbol)\nKnown_good_friend(\"John Lennon\", \"Paul McCartney\").\n.decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"John Lennon\", 1940).\nBorn_in_year(\"Sasha Obama\", 2001).\n.decl Answer()\nAnswer() :- Known_good_friend(\"John Lennon\", \"Sasha Obama\").\nAnswer() :- Born_in_year(\"John Lennon\", birth_year1), Born_in_year(\"Sasha Obama\", birth_year2), birth_year1 < birth_year2, !Known_good_friend(\"John Lennon\", \"Sasha Obama\").\n.output Answer"]}
{"id": 49, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"tunnels at CERN\", 27).\nHas_length(\"High Speed 1 rails\", 108).\n.decl Answer()\nAnswer() :- Has_length(\"tunnels at CERN\", length1), Has_length(\"High Speed 1 rails\", length2), length1 <= length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"tunnels at CERN\", 27).\nHas_length(\"High Speed 1 rails\", 108).\n.decl Answer()\nAnswer() :- Has_length(\"tunnels at CERN\", length1), Has_length(\"High Speed 1 rails\", length2), length1 <= length2.\n.output Answer"]}
{"id": 50, "answer": true, "completion": ".decl Has_strength(Animal:symbol, Strength:float)\nHas_strength(\"elephant\", 1000).\nHas_strength(\"male macaque\", 10).\n.decl Answer()\nAnswer() :- Has_strength(\"elephant\", strength1), Has_strength(\"male macaque\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Animal:symbol, Strength:float)\nHas_strength(\"elephant\", 1000).\nHas_strength(\"male macaque\", 10).\n.decl Answer()\nAnswer() :- Has_strength(\"elephant\", strength1), Has_strength(\"male macaque\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 51, "answer": true, "completion": ".decl Speaks(Language:symbol, People:symbol)\nSpeaks(\"Ubuntu\", \"Ubuntu people\").\n.decl Answer()\nAnswer() :- Speaks(\"Ubuntu\", \"Ubuntu people\").\n.output Answer", "completions": [".decl Speaks(Language:symbol, People:symbol)\nSpeaks(\"Ubuntu\", \"Ubuntu people\").\n.decl Answer()\nAnswer() :- Speaks(\"Ubuntu\", \"Ubuntu people\").\n.output Answer"]}
{"id": 52, "answer": true, "completion": ".decl Is_high_risk_activity(Activity:symbol, Injury:symbol)\nIs_high_risk_activity(\"cycling\", \"pelvis fractures\").\n.decl Answer()\nAnswer() :- Is_high_risk_activity(\"cycling\", \"pelvis fractures\").\n.output Answer", "completions": [".decl Is_high_risk_activity(Activity:symbol, Injury:symbol)\nIs_high_risk_activity(\"cycling\", \"pelvis fractures\").\n.decl Answer()\nAnswer() :- Is_high_risk_activity(\"cycling\", \"pelvis fractures\").\n.output Answer"]}
{"id": 53, "answer": true, "completion": ".decl Has_immunity(Animal:symbol, Disease:symbol)\nHas_immunity(\"platypus\", \"cholera\").\n.decl Answer()\nAnswer() :- Has_immunity(\"platypus\", \"cholera\").\n.output Answer", "completions": [".decl Has_immunity(Animal:symbol, Disease:symbol)\nHas_immunity(\"platypus\", \"cholera\").\n.decl Answer()\nAnswer() :- Has_immunity(\"platypus\", \"cholera\").\n.output Answer"]}
{"id": 54, "answer": true, "completion": ".decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"moose\", 1000).\nHas_weight(\"minotaur\", 700).\n.decl Can_devour_whole(Animal_A:symbol, Animal_B:symbol)\nCan_devour_whole(\"minotaur\", \"moose\") :- Has_weight(\"minotaur\", weight1), Has_weight(\"moose\", weight2), weight1 >= 2 * weight2.\n.decl Answer()\nAnswer() :- !Can_devour_whole(\"minotaur\", \"moose\").\n.output Answer", "completions": [".decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"moose\", 1000).\nHas_weight(\"minotaur\", 700).\n.decl Can_devour_whole(Animal_A:symbol, Animal_B:symbol)\nCan_devour_whole(\"minotaur\", \"moose\") :- Has_weight(\"minotaur\", weight1), Has_weight(\"moose\", weight2), weight1 >= 2 * weight2.\n.decl Answer()\nAnswer() :- !Can_devour_whole(\"minotaur\", \"moose\").\n.output Answer"]}
{"id": 55, "answer": false, "completion": ".decl Has_bones(Food:symbol, Bones:bool)\nHas_bones(\"anchovy\", true).\n.decl Is_ingredient(Pizza:symbol, Ingredient:symbol)\nIs_ingredient(\"anchovy pizza\", \"anchovy\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"anchovy pizza\", ingredient), Has_bones(ingredient, true).\n.output Answer", "completions": [".decl Has_bones(Food:symbol, Bones:bool)\nHas_bones(\"anchovy\", true).\n.decl Is_ingredient(Pizza:symbol, Ingredient:symbol)\nIs_ingredient(\"anchovy pizza\", \"anchovy\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"anchovy pizza\", ingredient), Has_bones(ingredient, true).\n.output Answer"]}
{"id": 56, "answer": false, "completion": ".decl Eats(Animal:symbol, Food:symbol)\nEats(\"Bengal cat\", \"meat\").\nEats(\"Bengal cat\", \"fish\").\nEats(\"Bengal cat\", \"commercial cat food\").\n.decl Is_nutritionally_complete(Food:symbol)\nIs_nutritionally_complete(\"meat\").\nIs_nutritionally_complete(\"fish\").\nIs_nutritionally_complete(\"commercial cat food\").\n.decl Answer()\nAnswer() :- Eats(\"Bengal cat\", \"pancakes\"), Is_nutritionally_complete(\"pancakes\").\n.output Answer", "completions": [".decl Eats(Animal:symbol, Food:symbol)\nEats(\"Bengal cat\", \"meat\").\nEats(\"Bengal cat\", \"fish\").\nEats(\"Bengal cat\", \"commercial cat food\").\n.decl Is_nutritionally_complete(Food:symbol)\nIs_nutritionally_complete(\"meat\").\nIs_nutritionally_complete(\"fish\").\nIs_nutritionally_complete(\"commercial cat food\").\n.decl Answer()\nAnswer() :- Eats(\"Bengal cat\", \"pancakes\"), Is_nutritionally_complete(\"pancakes\").\n.output Answer"]}
{"id": 57, "answer": false, "completion": ".decl Original_name(Object:symbol, Name:symbol)\nOriginal_name(\"zucchini\", \"courgette\").\n.decl QWERTY_top_row(Key:symbol)\nQWERTY_top_row(\"q\").\nQWERTY_top_row(\"w\").\nQWERTY_top_row(\"e\").\nQWERTY_top_row(\"r\").\nQWERTY_top_row(\"t\").\nQWERTY_top_row(\"y\").\nQWERTY_top_row(\"u\").\nQWERTY_top_row(\"i\").\nQWERTY_top_row(\"o\").\nQWERTY_top_row(\"p\").\n.decl Can_type(Name:symbol)\nCan_type(\"\") :- !.\nCan_type(name) :- name = name[1:] + key, QWERTY_top_row(key), Can_type(name[1:]).\n.decl Answer()\nAnswer() :- Original_name(\"zucchini\", name), Can_type(name).\n.output Answer", "completions": [".decl Original_name(Object:symbol, Name:symbol)\nOriginal_name(\"zucchini\", \"courgette\").\n.decl QWERTY_top_row(Key:symbol)\nQWERTY_top_row(\"q\").\nQWERTY_top_row(\"w\").\nQWERTY_top_row(\"e\").\nQWERTY_top_row(\"r\").\nQWERTY_top_row(\"t\").\nQWERTY_top_row(\"y\").\nQWERTY_top_row(\"u\").\nQWERTY_top_row(\"i\").\nQWERTY_top_row(\"o\").\nQWERTY_top_row(\"p\").\n.decl Can_type(Name:symbol)\nCan_type(\"\") :- !.\nCan_type(name) :- name = name[1:] + key, QWERTY_top_row(key), Can_type(name[1:]).\n.decl Answer()\nAnswer() :- Original_name(\"zucchini\", name), Can_type(name).\n.output Answer"]}
{"id": 58, "answer": true, "completion": ".decl Borders_water(Object:symbol, Water_body:symbol)\nBorders_water(\"The Hague\", \"North Sea\").\nBorders_water(\"The Hague\", \"Haagse Beek\").\n.decl Answer()\nAnswer() :- Borders_water(\"The Hague\", water_body1), Borders_water(\"The Hague\", water_body2), water_body1 != water_body2.\n.output Answer", "completions": [".decl Borders_water(Object:symbol, Water_body:symbol)\nBorders_water(\"The Hague\", \"North Sea\").\nBorders_water(\"The Hague\", \"Haagse Beek\").\n.decl Answer()\nAnswer() :- Borders_water(\"The Hague\", water_body1), Borders_water(\"The Hague\", water_body2), water_body1 != water_body2.\n.output Answer"]}
{"id": 59, "answer": true, "completion": ".decl Age_group(Age_group:symbol, Min_age:float, Max_age:float)\nAge_group(\"middle school\", 11, 14).\n.decl Recommended_for_age(Procedure:symbol, Min_age:float, Max_age:float)\nRecommended_for_age(\"breast exam\", 40, 74).\n.decl Answer()\nAnswer() :- Age_group(\"middle school\", min_age1, max_age1), Recommended_for_age(\"breast exam\", min_age2, max_age2), max_age1 < min_age2.\n.output Answer", "completions": [".decl Age_group(Age_group:symbol, Min_age:float, Max_age:float)\nAge_group(\"middle school\", 11, 14).\n.decl Recommended_for_age(Procedure:symbol, Min_age:float, Max_age:float)\nRecommended_for_age(\"breast exam\", 40, 74).\n.decl Answer()\nAnswer() :- Age_group(\"middle school\", min_age1, max_age1), Recommended_for_age(\"breast exam\", min_age2, max_age2), max_age1 < min_age2.\n.output Answer"]}
{"id": 60, "answer": false, "completion": ".decl Under_Japanese_Rule(Country:symbol, Start_year:float, End_year:float)\nUnder_Japanese_Rule(\"Korea\", 1910, 1945).\n.decl TV_show_aired(Show:symbol, Start_year:float, End_year:float)\nTV_show_aired(\"Iron Chef\", 1993, 1999).\n.decl Answer()\nAnswer() :- Under_Japanese_Rule(\"Korea\", start_year1, end_year1), TV_show_aired(\"Iron Chef\", start_year2, end_year2), start_year2 >= start_year1, end_year2 <= end_year1.\n.output Answer", "completions": [".decl Under_Japanese_Rule(Country:symbol, Start_year:float, End_year:float)\nUnder_Japanese_Rule(\"Korea\", 1910, 1945).\n.decl TV_show_aired(Show:symbol, Start_year:float, End_year:float)\nTV_show_aired(\"Iron Chef\", 1993, 1999).\n.decl Answer()\nAnswer() :- Under_Japanese_Rule(\"Korea\", start_year1, end_year1), TV_show_aired(\"Iron Chef\", start_year2, end_year2), start_year2 >= start_year1, end_year2 <= end_year1.\n.output Answer"]}
{"id": 61, "answer": false, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"bald eagle\", 99).\nHas_speed(\"B-52\", 1040).\n.decl Answer()\nAnswer() :- Has_speed(\"bald eagle\", speed1), Has_speed(\"B-52\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"bald eagle\", 99).\nHas_speed(\"B-52\", 1040).\n.decl Answer()\nAnswer() :- Has_speed(\"bald eagle\", speed1), Has_speed(\"B-52\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 62, "answer": true, "completion": ".decl Looks_like(Character_A:symbol, Character_B:symbol)\nLooks_like(\"Snoopy\", \"dog\").\nLooks_like(\"Chance\", \"dog\").\n.decl Answer()\nAnswer() :- Looks_like(\"Snoopy\", animal), Looks_like(\"Chance\", animal).\n.output Answer", "completions": [".decl Looks_like(Character_A:symbol, Character_B:symbol)\nLooks_like(\"Snoopy\", \"dog\").\nLooks_like(\"Chance\", \"dog\").\n.decl Answer()\nAnswer() :- Looks_like(\"Snoopy\", animal), Looks_like(\"Chance\", animal).\n.output Answer"]}
{"id": 63, "answer": true, "completion": ".decl Is_lapidary(Person:symbol)\nIs_lapidary(\"Dioskourides\").\n.decl Answer()\nAnswer() :- Is_lapidary(\"Dioskourides\").\n.output Answer", "completions": [".decl Is_lapidary(Person:symbol)\nIs_lapidary(\"Dioskourides\").\n.decl Answer()\nAnswer() :- Is_lapidary(\"Dioskourides\").\n.output Answer"]}
{"id": 64, "answer": false, "completion": ".decl Has_butler(Family_class:symbol, Percentage:float)\nHas_butler(\"middle class\", 5).\n.decl Answer()\nAnswer() :- Has_butler(\"middle class\", percentage), percentage > 50.\n.output Answer", "completions": [".decl Has_butler(Family_class:symbol, Percentage:float)\nHas_butler(\"middle class\", 5).\n.decl Answer()\nAnswer() :- Has_butler(\"middle class\", percentage), percentage > 50.\n.output Answer"]}
{"id": 65, "answer": true, "completion": ".decl Has_position(Person:symbol, Position:symbol, Year:float)\nHas_position(\"Hillary Clinton\", \"Secretary of State\", 2009).\nHas_position(\"Huma Abedin\", \"Deputy Chief of Staff\", 2009).\n.decl Baptised(Person:symbol)\nBaptised(\"Huma Abedin\").\n.decl Answer()\nAnswer() :- Has_position(person, \"Deputy Chief of Staff\", 2009), Has_position(\"Hillary Clinton\", \"Secretary of State\", 2009), Baptised(person).\n.output Answer", "completions": [".decl Has_position(Person:symbol, Position:symbol, Year:float)\nHas_position(\"Hillary Clinton\", \"Secretary of State\", 2009).\nHas_position(\"Huma Abedin\", \"Deputy Chief of Staff\", 2009).\n.decl Baptised(Person:symbol)\nBaptised(\"Huma Abedin\").\n.decl Answer()\nAnswer() :- Has_position(person, \"Deputy Chief of Staff\", 2009), Has_position(\"Hillary Clinton\", \"Secretary of State\", 2009), Baptised(person).\n.output Answer"]}
{"id": 66, "answer": false, "completion": ".decl Sells(Organization:symbol, Product:symbol)\nSells(\"New York Public Library\", \"books\").\nSells(\"Alpo\", \"dog food\").\n.decl Answer()\nAnswer() :- Sells(\"New York Public Library\", \"Alpo products\").\nAnswer() :- Sells(\"New York Public Library\", product), Sells(\"Alpo\", product).\n.output Answer", "completions": [".decl Sells(Organization:symbol, Product:symbol)\nSells(\"New York Public Library\", \"books\").\nSells(\"Alpo\", \"dog food\").\n.decl Answer()\nAnswer() :- Sells(\"New York Public Library\", \"Alpo products\").\nAnswer() :- Sells(\"New York Public Library\", product), Sells(\"Alpo\", product).\n.output Answer"]}
{"id": 67, "answer": false, "completion": ".decl Is_prophet_in_religion(Person:symbol, Religion:symbol)\nIs_prophet_in_religion(\"Solomon\", \"Islam\").\n.decl Is_king_in_kingdom(Person:symbol, Kingdom:symbol)\nIs_king_in_kingdom(\"Solomon\", \"Judah\").\n.decl Total_prophets_in_religion(Religion:symbol, Total:float)\nTotal_prophets_in_religion(\"Islam\", 25).\n.decl Total_kings_in_kingdom(Kingdom:symbol, Total:float)\nTotal_kings_in_kingdom(\"Judah\", 20).\n.decl Answer()\nAnswer() :- Is_prophet_in_religion(\"Solomon\", religion), Is_king_in_kingdom(\"Solomon\", kingdom), Total_prophets_in_religion(religion, total_prophets), Total_kings_in_kingdom(kingdom, total_kings), (1 / total_prophets) > (1 / total_kings).\n.output Answer", "completions": [".decl Is_prophet_in_religion(Person:symbol, Religion:symbol)\nIs_prophet_in_religion(\"Solomon\", \"Islam\").\n.decl Is_king_in_kingdom(Person:symbol, Kingdom:symbol)\nIs_king_in_kingdom(\"Solomon\", \"Judah\").\n.decl Total_prophets_in_religion(Religion:symbol, Total:float)\nTotal_prophets_in_religion(\"Islam\", 25).\n.decl Total_kings_in_kingdom(Kingdom:symbol, Total:float)\nTotal_kings_in_kingdom(\"Judah\", 20).\n.decl Answer()\nAnswer() :- Is_prophet_in_religion(\"Solomon\", religion), Is_king_in_kingdom(\"Solomon\", kingdom), Total_prophets_in_religion(religion, total_prophets), Total_kings_in_kingdom(kingdom, total_kings), (1 / total_prophets) > (1 / total_kings).\n.output Answer"]}
{"id": 68, "answer": true, "completion": ".decl Is_Korean_culture_term(Term:symbol)\nIs_Korean_culture_term(\"oppa\").\n.decl Refers_to(Person:symbol, Term:symbol)\nRefers_to(\"Taylor Swift\", \"oppa\").\n.decl Is_related_to(Person:symbol, Culture:symbol)\nIs_related_to(\"Taylor Swift\", \"Korean culture\").\n.decl Answer()\nAnswer() :- Refers_to(\"Taylor Swift\", \"oppa\"), Is_related_to(\"Taylor Swift\", \"Korean culture\").\n.output Answer", "completions": [".decl Is_Korean_culture_term(Term:symbol)\nIs_Korean_culture_term(\"oppa\").\n.decl Refers_to(Person:symbol, Term:symbol)\nRefers_to(\"Taylor Swift\", \"oppa\").\n.decl Is_related_to(Person:symbol, Culture:symbol)\nIs_related_to(\"Taylor Swift\", \"Korean culture\").\n.decl Answer()\nAnswer() :- Refers_to(\"Taylor Swift\", \"oppa\"), Is_related_to(\"Taylor Swift\", \"Korean culture\").\n.output Answer"]}
{"id": 69, "answer": true, "completion": ".decl Influenced(Fashion:symbol, Influencer:symbol)\nInfluenced(\"West Point fashion\", \"Confederate States Army\").\n.decl Answer()\nAnswer() :- Influenced(\"West Point fashion\", \"Confederate States Army\").\n.output Answer", "completions": [".decl Influenced(Fashion:symbol, Influencer:symbol)\nInfluenced(\"West Point fashion\", \"Confederate States Army\").\n.decl Answer()\nAnswer() :- Influenced(\"West Point fashion\", \"Confederate States Army\").\n.output Answer"]}
{"id": 70, "answer": true, "completion": ".decl Repulses(Person:symbol, Ideology:symbol)\nRepulses(\"Blaire White\", \"extreme conservatism\").\n.decl Is_extreme(Ideology:symbol)\nIs_extreme(\"extreme conservatism\").\n.decl Answer()\nAnswer() :- Repulses(\"Blaire White\", ideology), Is_extreme(ideology).\n.output Answer", "completions": [".decl Repulses(Person:symbol, Ideology:symbol)\nRepulses(\"Blaire White\", \"extreme conservatism\").\n.decl Is_extreme(Ideology:symbol)\nIs_extreme(\"extreme conservatism\").\n.decl Answer()\nAnswer() :- Repulses(\"Blaire White\", ideology), Is_extreme(ideology).\n.output Answer"]}
{"id": 71, "answer": true, "completion": ".decl Tastes_good(Part:symbol)\nTastes_good(\"aloe vera gel\").\n.decl Aloe_vera_parts(Part:symbol)\nAloe_vera_parts(\"aloe vera gel\").\nAloe_vera_parts(\"aloe vera skin\").\n.decl Answer()\nAnswer() :- Aloe_vera_parts(part), !Tastes_good(part).\n.output Answer", "completions": [".decl Tastes_good(Part:symbol)\nTastes_good(\"aloe vera gel\").\n.decl Aloe_vera_parts(Part:symbol)\nAloe_vera_parts(\"aloe vera gel\").\nAloe_vera_parts(\"aloe vera skin\").\n.decl Answer()\nAnswer() :- Aloe_vera_parts(part), !Tastes_good(part).\n.output Answer"]}
{"id": 72, "answer": true, "completion": ".decl Studies(Profession:symbol, Field:symbol)\nStudies(\"oceanographer\", \"biology\").\nStudies(\"oceanographer\", \"geology\").\nStudies(\"oceanographer\", \"chemistry\").\nStudies(\"oceanographer\", \"physics\").\n.decl Answer()\nAnswer() :- Studies(\"oceanographer\", field1), Studies(\"oceanographer\", field2), field1 != field2.\n.output Answer", "completions": [".decl Studies(Profession:symbol, Field:symbol)\nStudies(\"oceanographer\", \"biology\").\nStudies(\"oceanographer\", \"geology\").\nStudies(\"oceanographer\", \"chemistry\").\nStudies(\"oceanographer\", \"physics\").\n.decl Answer()\nAnswer() :- Studies(\"oceanographer\", field1), Studies(\"oceanographer\", field2), field1 != field2.\n.output Answer"]}
{"id": 73, "answer": true, "completion": ".decl Music_genre(Artist:symbol, Genre:symbol)\nMusic_genre(\"Kurt Cobain\", \"Grunge\").\n.decl Death_year(Person:symbol, Year:float)\nDeath_year(\"Kurt Cobain\", 1994).\n.decl Active_years(Genre:symbol, Start_year:float, End_year:float)\nActive_years(\"Grunge\", 1980, 2000).\n.decl Answer()\nAnswer() :- Music_genre(\"Kurt Cobain\", genre), Death_year(\"Kurt Cobain\", death_year), Active_years(genre, start_year, end_year), death_year < end_year.\n.output Answer", "completions": [".decl Music_genre(Artist:symbol, Genre:symbol)\nMusic_genre(\"Kurt Cobain\", \"Grunge\").\n.decl Death_year(Person:symbol, Year:float)\nDeath_year(\"Kurt Cobain\", 1994).\n.decl Active_years(Genre:symbol, Start_year:float, End_year:float)\nActive_years(\"Grunge\", 1980, 2000).\n.decl Answer()\nAnswer() :- Music_genre(\"Kurt Cobain\", genre), Death_year(\"Kurt Cobain\", death_year), Active_years(genre, start_year, end_year), death_year < end_year.\n.output Answer"]}
{"id": 74, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Immanuel Kant\", 1724).\nBorn_in_year(\"14th President of the United States\", 1804).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Immanuel Kant\", 1804).\nDied_in_year(\"14th President of the United States\", 1869).\n.decl Met(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Met(\"Immanuel Kant\", \"14th President of the United States\").\nAnswer() :- Born_in_year(\"Immanuel Kant\", birth_year1), Died_in_year(\"Immanuel Kant\", death_year1), Born_in_year(\"14th President of the United States\", birth_year2), Died_in_year(\"14th President of the United States\", death_year2), birth_year1 <= birth_year2, death_year1 >= birth_year2.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Immanuel Kant\", 1724).\nBorn_in_year(\"14th President of the United States\", 1804).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Immanuel Kant\", 1804).\nDied_in_year(\"14th President of the United States\", 1869).\n.decl Met(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Met(\"Immanuel Kant\", \"14th President of the United States\").\nAnswer() :- Born_in_year(\"Immanuel Kant\", birth_year1), Died_in_year(\"Immanuel Kant\", death_year1), Born_in_year(\"14th President of the United States\", birth_year2), Died_in_year(\"14th President of the United States\", death_year2), birth_year1 <= birth_year2, death_year1 >= birth_year2.\n.output Answer"]}
{"id": 75, "answer": true, "completion": ".decl Has_market_share(Company:symbol, Market:symbol, Share:float)\nHas_market_share(\"steel company\", \"Japanese bulk carrier market\", 0.2).\n.decl Has_profit_margin(Company:symbol, Market:symbol, Margin:float)\nHas_profit_margin(\"steel company\", \"Japanese bulk carrier market\", 0.1).\n.decl Answer()\n\nAnswer() :- Has_market_share(\"steel company\", \"Japanese bulk carrier market\", share1), Has_profit_margin(\"steel company\", \"Japanese bulk carrier market\", margin1), share1 < 1, margin1 > 0.\n.output Answer", "completions": [".decl Has_market_share(Company:symbol, Market:symbol, Share:float)\nHas_market_share(\"steel company\", \"Japanese bulk carrier market\", 0.2).\n.decl Has_profit_margin(Company:symbol, Market:symbol, Margin:float)\nHas_profit_margin(\"steel company\", \"Japanese bulk carrier market\", 0.1).\n.decl Answer()\n\nAnswer() :- Has_market_share(\"steel company\", \"Japanese bulk carrier market\", share1), Has_profit_margin(\"steel company\", \"Japanese bulk carrier market\", margin1), share1 < 1, margin1 > 0.\n.output Answer"]}
{"id": 76, "answer": false, "completion": ".decl Uses_in_work(Profession:symbol, Field:symbol)\nUses_in_work(\"geographer\", \"geography\").\nUses_in_work(\"geographer\", \"cartography\").\nUses_in_work(\"geographer\", \"geology\").\nUses_in_work(\"biochemist\", \"biochemistry\").\n.decl Answer()\nAnswer() :- Uses_in_work(\"geographer\", \"biochemistry\").\n.output Answer", "completions": [".decl Uses_in_work(Profession:symbol, Field:symbol)\nUses_in_work(\"geographer\", \"geography\").\nUses_in_work(\"geographer\", \"cartography\").\nUses_in_work(\"geographer\", \"geology\").\nUses_in_work(\"biochemist\", \"biochemistry\").\n.decl Answer()\nAnswer() :- Uses_in_work(\"geographer\", \"biochemistry\").\n.output Answer"]}
{"id": 77, "answer": false, "completion": ".decl Produces_coffee(Country:symbol, Location:symbol)\nProduces_coffee(\"Brazil\", \"South\").\nProduces_coffee(\"Vietnam\", \"South\").\nProduces_coffee(\"Colombia\", \"South\").\nProduces_coffee(\"Indonesia\", \"South\").\nProduces_coffee(\"Ethiopia\", \"North\").\nProduces_coffee(\"Honduras\", \"North\").\nProduces_coffee(\"India\", \"North\").\nProduces_coffee(\"Uganda\", \"South\").\nProduces_coffee(\"Peru\", \"South\").\nProduces_coffee(\"Mexico\", \"North\").\n\n.decl Total_coffee_producers(Location:symbol, Count:float)\nTotal_coffee_producers(Location, Count) :- Location = \"North\", Count = count : Produces_coffee(_, \"North\").\nTotal_coffee_producers(Location, Count) :- Location = \"South\", Count = count : Produces_coffee(_, \"South\").\n\n.decl Answer()\nAnswer() :- Total_coffee_producers(\"South\", count_south), Total_coffee_producers(\"North\", count_north), count_south > count_north.\n.output Answer", "completions": [".decl Produces_coffee(Country:symbol, Location:symbol)\nProduces_coffee(\"Brazil\", \"South\").\nProduces_coffee(\"Vietnam\", \"South\").\nProduces_coffee(\"Colombia\", \"South\").\nProduces_coffee(\"Indonesia\", \"South\").\nProduces_coffee(\"Ethiopia\", \"North\").\nProduces_coffee(\"Honduras\", \"North\").\nProduces_coffee(\"India\", \"North\").\nProduces_coffee(\"Uganda\", \"South\").\nProduces_coffee(\"Peru\", \"South\").\nProduces_coffee(\"Mexico\", \"North\").\n\n.decl Total_coffee_producers(Location:symbol, Count:float)\nTotal_coffee_producers(Location, Count) :- Location = \"North\", Count = count : Produces_coffee(_, \"North\").\nTotal_coffee_producers(Location, Count) :- Location = \"South\", Count = count : Produces_coffee(_, \"South\").\n\n.decl Answer()\nAnswer() :- Total_coffee_producers(\"South\", count_south), Total_coffee_producers(\"North\", count_north), count_south > count_north.\n.output Answer"]}
{"id": 78, "answer": false, "completion": ".decl Serves_dish(Location:symbol, Dish:symbol)\nServes_dish(\"Casablanca\", \"couscous\").\nServes_dish(\"Casablanca\", \"tajine\").\nServes_dish(\"Casablanca\", \"pastilla\").\nServes_dish(\"Casablanca\", \"harira\").\nServes_dish(\"Casablanca\", \"BLT\").\n.decl Answer()\nAnswer() :- !Serves_dish(\"Casablanca\", \"BLT\").\n.output Answer", "completions": [".decl Serves_dish(Location:symbol, Dish:symbol)\nServes_dish(\"Casablanca\", \"couscous\").\nServes_dish(\"Casablanca\", \"tajine\").\nServes_dish(\"Casablanca\", \"pastilla\").\nServes_dish(\"Casablanca\", \"harira\").\nServes_dish(\"Casablanca\", \"BLT\").\n.decl Answer()\nAnswer() :- !Serves_dish(\"Casablanca\", \"BLT\").\n.output Answer"]}
{"id": 79, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Statue of Liberty\", 225000).\n.decl Has_cargo_capacity(Ship:symbol, Capacity:float)\nHas_cargo_capacity(\"largest ship from Voyages of Christopher Columbus\", 120000).\n.decl Answer()\nAnswer() :- Has_weight(\"Statue of Liberty\", weight), Has_cargo_capacity(\"largest ship from Voyages of Christopher Columbus\", capacity), weight <= capacity.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Statue of Liberty\", 225000).\n.decl Has_cargo_capacity(Ship:symbol, Capacity:float)\nHas_cargo_capacity(\"largest ship from Voyages of Christopher Columbus\", 120000).\n.decl Answer()\nAnswer() :- Has_weight(\"Statue of Liberty\", weight), Has_cargo_capacity(\"largest ship from Voyages of Christopher Columbus\", capacity), weight <= capacity.\n.output Answer"]}
{"id": 80, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Jolly Green Giant's largest monument\", 55).\nHas_height(\"Pyrenees\", 3404).\n.decl Answer()\nAnswer() :- Has_height(\"Jolly Green Giant's largest monument\", height1), Has_height(\"Pyrenees\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Jolly Green Giant's largest monument\", 55).\nHas_height(\"Pyrenees\", 3404).\n.decl Answer()\nAnswer() :- Has_height(\"Jolly Green Giant's largest monument\", height1), Has_height(\"Pyrenees\", height2), height1 < height2.\n.output Answer"]}
{"id": 81, "answer": true, "completion": ".decl Influenced(Person:symbol, Entity:symbol)\nInfluenced(\"Karl Marx\", \"communist ideology\").\n.decl Associated_with(Entity:symbol, Organization:symbol)\nAssociated_with(\"communist ideology\", \"Communist Party of China\").\n.decl Answer()\nAnswer() :- Influenced(\"Karl Marx\", entity), Associated_with(entity, \"Communist Party of China\").\n.output Answer", "completions": [".decl Influenced(Person:symbol, Entity:symbol)\nInfluenced(\"Karl Marx\", \"communist ideology\").\n.decl Associated_with(Entity:symbol, Organization:symbol)\nAssociated_with(\"communist ideology\", \"Communist Party of China\").\n.decl Answer()\nAnswer() :- Influenced(\"Karl Marx\", entity), Associated_with(entity, \"Communist Party of China\").\n.output Answer"]}
{"id": 82, "answer": true, "completion": ".decl Contains_ingredient(Product:symbol, Ingredient:symbol)\nContains_ingredient(\"Soylent\", \"pea protein\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"Soylent\", \"pea protein\").\n.output Answer", "completions": [".decl Contains_ingredient(Product:symbol, Ingredient:symbol)\nContains_ingredient(\"Soylent\", \"pea protein\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"Soylent\", \"pea protein\").\n.output Answer"]}
{"id": 83, "answer": false, "completion": ".decl Has_religion(Region:symbol, Religion:symbol, Percentage:float)\nHas_religion(\"Quebec\", \"Christianity\", 75).\nHas_religion(\"Quebec\", \"Islam\", 3).\nHas_religion(\"Quebec\", \"Judaism\", 1).\nHas_religion(\"Quebec\", \"Other\", 21).\n.decl Refers_to_religious_text(Religion:symbol, Text:symbol)\nRefers_to_religious_text(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Has_religion(\"Quebec\", religion, percentage), Refers_to_religious_text(religion, \"Quran\"), percentage > 50.\n.output Answer", "completions": [".decl Has_religion(Region:symbol, Religion:symbol, Percentage:float)\nHas_religion(\"Quebec\", \"Christianity\", 75).\nHas_religion(\"Quebec\", \"Islam\", 3).\nHas_religion(\"Quebec\", \"Judaism\", 1).\nHas_religion(\"Quebec\", \"Other\", 21).\n.decl Refers_to_religious_text(Religion:symbol, Text:symbol)\nRefers_to_religious_text(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Has_religion(\"Quebec\", religion, percentage), Refers_to_religious_text(religion, \"Quran\"), percentage > 50.\n.output Answer"]}
{"id": 84, "answer": false, "completion": ".decl Takes_place_in(TV_show:symbol, Location:symbol)\nTakes_place_in(\"Family Guy\", \"Quahog, Rhode Island\").\n.decl Is_on_coast(Location:symbol, Coast:symbol)\nIs_on_coast(\"Quahog, Rhode Island\", \"East Coast\").\nIs_on_coast(\"American West Coast\", \"West Coast\").\n.decl Answer()\nAnswer() :- Takes_place_in(\"Family Guy\", location), Is_on_coast(location, \"West Coast\").\n.output Answer", "completions": [".decl Takes_place_in(TV_show:symbol, Location:symbol)\nTakes_place_in(\"Family Guy\", \"Quahog, Rhode Island\").\n.decl Is_on_coast(Location:symbol, Coast:symbol)\nIs_on_coast(\"Quahog, Rhode Island\", \"East Coast\").\nIs_on_coast(\"American West Coast\", \"West Coast\").\n.decl Answer()\nAnswer() :- Takes_place_in(\"Family Guy\", location), Is_on_coast(location, \"West Coast\").\n.output Answer"]}
{"id": 85, "answer": true, "completion": ".decl Measures_length(Unit:symbol, Country:symbol)\nMeasures_length(\"metre\", \"UK\").\n.decl Answer()\nAnswer() :- Measures_length(\"metre\", \"UK\").\n.output Answer", "completions": [".decl Measures_length(Unit:symbol, Country:symbol)\nMeasures_length(\"metre\", \"UK\").\n.decl Answer()\nAnswer() :- Measures_length(\"metre\", \"UK\").\n.output Answer"]}
{"id": 86, "answer": false, "completion": ".decl Played_key_role(Person:symbol, War:symbol)\nPlayed_key_role(\"first Duke of Valentinois\", \"Italian Wars\").\n.decl War_period(War:symbol, Start_year:float, End_year:float)\nWar_period(\"Hundred Years' War\", 1337, 1453).\nWar_period(\"Italian Wars\", 1494, 1559).\n.decl Answer()\nAnswer() :- Played_key_role(\"first Duke of Valentinois\", \"Hundred Years' War\").\nAnswer() :- Played_key_role(\"first Duke of Valentinois\", war), War_period(war, start_year, end_year), War_period(\"Hundred Years' War\", start_year2, end_year2), start_year >= start_year2, end_year <= end_year2.\n.output Answer", "completions": [".decl Played_key_role(Person:symbol, War:symbol)\nPlayed_key_role(\"first Duke of Valentinois\", \"Italian Wars\").\n.decl War_period(War:symbol, Start_year:float, End_year:float)\nWar_period(\"Hundred Years' War\", 1337, 1453).\nWar_period(\"Italian Wars\", 1494, 1559).\n.decl Answer()\nAnswer() :- Played_key_role(\"first Duke of Valentinois\", \"Hundred Years' War\").\nAnswer() :- Played_key_role(\"first Duke of Valentinois\", war), War_period(war, start_year, end_year), War_period(\"Hundred Years' War\", start_year2, end_year2), start_year >= start_year2, end_year <= end_year2.\n.output Answer"]}
{"id": 87, "answer": true, "completion": ".decl Fights(Animal_A:symbol, Animal_B:symbol)\nFights(\"gorilla\", \"panda bear\").\n.decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"gorilla\", \"African forests\").\nLives_in(\"panda bear\", \"Chinese bamboo forests\").\n.decl Answer()\nAnswer() :- Fights(\"gorilla\", \"panda bear\"), Lives_in(\"gorilla\", habitat1), Lives_in(\"panda bear\", habitat2), habitat1 != habitat2.\n.output Answer", "completions": [".decl Fights(Animal_A:symbol, Animal_B:symbol)\nFights(\"gorilla\", \"panda bear\").\n.decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"gorilla\", \"African forests\").\nLives_in(\"panda bear\", \"Chinese bamboo forests\").\n.decl Answer()\nAnswer() :- Fights(\"gorilla\", \"panda bear\"), Lives_in(\"gorilla\", habitat1), Lives_in(\"panda bear\", habitat2), habitat1 != habitat2.\n.output Answer"]}
{"id": 88, "answer": true, "completion": ".decl Born_in(Person:symbol, Borough:symbol)\nBorn_in(\"Christina Aguilera\", \"Staten Island\").\n.decl Is_forgotten_borough(Borough:symbol)\nIs_forgotten_borough(\"Staten Island\").\n.decl Answer()\nAnswer() :- Born_in(\"Christina Aguilera\", borough), Is_forgotten_borough(borough).\n.output Answer", "completions": [".decl Born_in(Person:symbol, Borough:symbol)\nBorn_in(\"Christina Aguilera\", \"Staten Island\").\n.decl Is_forgotten_borough(Borough:symbol)\nIs_forgotten_borough(\"Staten Island\").\n.decl Answer()\nAnswer() :- Born_in(\"Christina Aguilera\", borough), Is_forgotten_borough(borough).\n.output Answer"]}
{"id": 89, "answer": true, "completion": ".decl Has_common_pair(Element:symbol, Pair_partner:symbol)\nHas_common_pair(\"H\", \"T\").\n.decl Is_freebie_in_WOF_bonus_round(Letter:symbol)\nIs_freebie_in_WOF_bonus_round(\"R\").\nIs_freebie_in_WOF_bonus_round(\"S\").\nIs_freebie_in_WOF_bonus_round(\"T\").\nIs_freebie_in_WOF_bonus_round(\"L\").\nIs_freebie_in_WOF_bonus_round(\"N\").\nIs_freebie_in_WOF_bonus_round(\"E\").\n.decl Answer()\nAnswer() :- Has_common_pair(\"H\", pair_partner), Is_freebie_in_WOF_bonus_round(pair_partner).\n.output Answer", "completions": [".decl Has_common_pair(Element:symbol, Pair_partner:symbol)\nHas_common_pair(\"H\", \"T\").\n.decl Is_freebie_in_WOF_bonus_round(Letter:symbol)\nIs_freebie_in_WOF_bonus_round(\"R\").\nIs_freebie_in_WOF_bonus_round(\"S\").\nIs_freebie_in_WOF_bonus_round(\"T\").\nIs_freebie_in_WOF_bonus_round(\"L\").\nIs_freebie_in_WOF_bonus_round(\"N\").\nIs_freebie_in_WOF_bonus_round(\"E\").\n.decl Answer()\nAnswer() :- Has_common_pair(\"H\", pair_partner), Is_freebie_in_WOF_bonus_round(pair_partner).\n.output Answer"]}
{"id": 90, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"quarter\", 0.955).\nHas_size(\"human kidney\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"quarter\", size1), Has_size(\"human kidney\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"quarter\", 0.955).\nHas_size(\"human kidney\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"quarter\", size1), Has_size(\"human kidney\", size2), size1 < size2.\n.output Answer"]}
{"id": 91, "answer": true, "completion": ".decl Has_capability(Telescope:symbol, Capability:symbol)\nHas_capability(\"James Webb Space Telescope\", \"locate_exoplanets\").\n.decl Exists(Object:symbol, Status:symbol)\nExists(\"planet Krypton\", \"fictional\").\n.decl Answer()\nAnswer() :- Has_capability(\"James Webb Space Telescope\", \"locate_exoplanets\"), Exists(\"planet Krypton\", \"fictional\").\n.output Answer", "completions": [".decl Has_capability(Telescope:symbol, Capability:symbol)\nHas_capability(\"James Webb Space Telescope\", \"locate_exoplanets\").\n.decl Exists(Object:symbol, Status:symbol)\nExists(\"planet Krypton\", \"fictional\").\n.decl Answer()\nAnswer() :- Has_capability(\"James Webb Space Telescope\", \"locate_exoplanets\"), Exists(\"planet Krypton\", \"fictional\").\n.output Answer"]}
{"id": 92, "answer": true, "completion": ".decl Favorite_book(Author:symbol, Book:symbol)\nFavorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.decl Answer()\nAnswer() :- Favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.output Answer", "completions": [".decl Favorite_book(Author:symbol, Book:symbol)\nFavorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.decl Answer()\nAnswer() :- Favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.output Answer"]}
{"id": 93, "answer": true, "completion": ".decl Has_lorem_ipsum(Website:symbol, Status:symbol)\nHas_lorem_ipsum(\"finished website\", \"no\").\n.decl Answer()\nAnswer() :- Has_lorem_ipsum(\"finished website\", \"no\").\n.output Answer", "completions": [".decl Has_lorem_ipsum(Website:symbol, Status:symbol)\nHas_lorem_ipsum(\"finished website\", \"no\").\n.decl Answer()\nAnswer() :- Has_lorem_ipsum(\"finished website\", \"no\").\n.output Answer"]}
{"id": 94, "answer": true, "completion": ".decl Lived_in_time(Person:symbol, Start_year:float, End_year:float)\nLived_in_time(\"William Shakespeare\", 1564, 1616).\n.decl Published_in_time(Newspaper:symbol, Start_year:float)\nPublished_in_time(\"Daily Mirror\", 1903).\n.decl Answer()\nAnswer() :- Lived_in_time(\"William Shakespeare\", start_year, end_year), Published_in_time(\"Daily Mirror\", start_year2), end_year < start_year2.\n.output Answer", "completions": [".decl Lived_in_time(Person:symbol, Start_year:float, End_year:float)\nLived_in_time(\"William Shakespeare\", 1564, 1616).\n.decl Published_in_time(Newspaper:symbol, Start_year:float)\nPublished_in_time(\"Daily Mirror\", 1903).\n.decl Answer()\nAnswer() :- Lived_in_time(\"William Shakespeare\", start_year, end_year), Published_in_time(\"Daily Mirror\", start_year2), end_year < start_year2.\n.output Answer"]}
{"id": 95, "answer": true, "completion": ".decl Has_annual_visitors(Place:symbol, Visitors:float)\nHas_annual_visitors(\"Taco Bell\", 2000000).\nHas_annual_visitors(\"Roy Rogers\", 500000).\n.decl Answer()\nAnswer() :- Has_annual_visitors(\"Taco Bell\", visitors1), Has_annual_visitors(\"Roy Rogers\", visitors2), visitors1 > visitors2.\n.output Answer", "completions": [".decl Has_annual_visitors(Place:symbol, Visitors:float)\nHas_annual_visitors(\"Taco Bell\", 2000000).\nHas_annual_visitors(\"Roy Rogers\", 500000).\n.decl Answer()\nAnswer() :- Has_annual_visitors(\"Taco Bell\", visitors1), Has_annual_visitors(\"Roy Rogers\", visitors2), visitors1 > visitors2.\n.output Answer"]}
{"id": 96, "answer": true, "completion": ".decl Wears_in_weather(Clothing:symbol, Weather:symbol)\nWears_in_weather(\"sandals\", \"summer\").\n.decl Weather_conditions(Weather:symbol, Condition:symbol)\nWeather_conditions(\"snow\", \"winter\").\n.decl Answer()\nAnswer() :- Wears_in_weather(\"sandals\", weather), Weather_conditions(\"snow\", condition), weather != condition.\n.output Answer", "completions": [".decl Wears_in_weather(Clothing:symbol, Weather:symbol)\nWears_in_weather(\"sandals\", \"summer\").\n.decl Weather_conditions(Weather:symbol, Condition:symbol)\nWeather_conditions(\"snow\", \"winter\").\n.decl Answer()\nAnswer() :- Wears_in_weather(\"sandals\", weather), Weather_conditions(\"snow\", condition), weather != condition.\n.output Answer"]}
{"id": 97, "answer": false, "completion": ".decl Born_in(Person:symbol, Country:symbol)\nBorn_in(\"Nikola Tesla\", \"Austrian Empire\").\n.decl Involved_in(Event:symbol, Country:symbol)\nInvolved_in(\"American Civil War\", \"United States\").\nInvolved_in(\"American Civil War\", \"Confederate States\").\n.decl Answer()\nAnswer() :- Born_in(\"Nikola Tesla\", country), Involved_in(\"American Civil War\", country).\n.output Answer", "completions": [".decl Born_in(Person:symbol, Country:symbol)\nBorn_in(\"Nikola Tesla\", \"Austrian Empire\").\n.decl Involved_in(Event:symbol, Country:symbol)\nInvolved_in(\"American Civil War\", \"United States\").\nInvolved_in(\"American Civil War\", \"Confederate States\").\n.decl Answer()\nAnswer() :- Born_in(\"Nikola Tesla\", country), Involved_in(\"American Civil War\", country).\n.output Answer"]}
{"id": 98, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Ada Lovelace\", 1815).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Ada Lovelace\", 1852).\n.decl Life_expectancy_in_year(Year:float, Life_expectancy:float)\nLife_expectancy_in_year(1815, 40).\n.decl Answer()\nAnswer() :- Born_in_year(\"Ada Lovelace\", birth_year), Died_in_year(\"Ada Lovelace\", death_year), Life_expectancy_in_year(birth_year, life_expectancy), (death_year - birth_year) < life_expectancy.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Ada Lovelace\", 1815).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Ada Lovelace\", 1852).\n.decl Life_expectancy_in_year(Year:float, Life_expectancy:float)\nLife_expectancy_in_year(1815, 40).\n.decl Answer()\nAnswer() :- Born_in_year(\"Ada Lovelace\", birth_year), Died_in_year(\"Ada Lovelace\", death_year), Life_expectancy_in_year(birth_year, life_expectancy), (death_year - birth_year) < life_expectancy.\n.output Answer"]}
{"id": 99, "answer": true, "completion": ".decl Can_use(Object:symbol, Tool:symbol)\nCan_use(\"Asian black bear\", \"chopsticks\").\n.decl Answer()\nAnswer() :- Can_use(\"Asian black bear\", \"chopsticks\").\n.output Answer", "completions": [".decl Can_use(Object:symbol, Tool:symbol)\nCan_use(\"Asian black bear\", \"chopsticks\").\n.decl Answer()\nAnswer() :- Can_use(\"Asian black bear\", \"chopsticks\").\n.output Answer"]}
{"id": 100, "answer": true, "completion": ".decl Sells_time(Person:symbol, Platform:symbol)\nSells_time(\"someone\", \"Toronto Star\").\n.decl Is_platform_for_selling_time(Platform:symbol)\nIs_platform_for_selling_time(\"Toronto Star\").\n.decl Answer()\nAnswer() :- Sells_time(\"someone\", \"Toronto Star\"), Is_platform_for_selling_time(\"Toronto Star\").\n.output Answer", "completions": [".decl Sells_time(Person:symbol, Platform:symbol)\nSells_time(\"someone\", \"Toronto Star\").\n.decl Is_platform_for_selling_time(Platform:symbol)\nIs_platform_for_selling_time(\"Toronto Star\").\n.decl Answer()\nAnswer() :- Sells_time(\"someone\", \"Toronto Star\"), Is_platform_for_selling_time(\"Toronto Star\").\n.output Answer"]}
{"id": 101, "answer": true, "completion": ".decl Has_deaths(Mission:symbol, Deaths:float)\nHas_deaths(\"Apollo 13\", 0).\nHas_deaths(\"Apollo 1\", 3).\nHas_deaths(\"Challenger\", 7).\nHas_deaths(\"Columbia\", 7).\n.decl Answer()\nAnswer() :- Has_deaths(\"Apollo 13\", deaths1), Has_deaths(other_mission, deaths2), deaths1 < deaths2.\n.output Answer", "completions": [".decl Has_deaths(Mission:symbol, Deaths:float)\nHas_deaths(\"Apollo 13\", 0).\nHas_deaths(\"Apollo 1\", 3).\nHas_deaths(\"Challenger\", 7).\nHas_deaths(\"Columbia\", 7).\n.decl Answer()\nAnswer() :- Has_deaths(\"Apollo 13\", deaths1), Has_deaths(other_mission, deaths2), deaths1 < deaths2.\n.output Answer"]}
{"id": 102, "answer": false, "completion": ".decl Serves_restaurant(Restaurant:symbol, Dish:symbol)\nServes_restaurant(\"Taco Bell\", \"tacos\").\nServes_restaurant(\"Taco Bell\", \"burritos\").\nServes_restaurant(\"Ethiopian Restaurant\", \"injera\").\n.decl Answer()\nAnswer() :- Serves_restaurant(\"Taco Bell\", \"injera\").\n.output Answer", "completions": [".decl Serves_restaurant(Restaurant:symbol, Dish:symbol)\nServes_restaurant(\"Taco Bell\", \"tacos\").\nServes_restaurant(\"Taco Bell\", \"burritos\").\nServes_restaurant(\"Ethiopian Restaurant\", \"injera\").\n.decl Answer()\nAnswer() :- Serves_restaurant(\"Taco Bell\", \"injera\").\n.output Answer"]}
{"id": 103, "answer": false, "completion": ".decl Is_xenophobic(Person:symbol)\nIs_xenophobic(\"Saladin\").\nIs_xenophobic(\"Ali Askari\").\n.decl Hypothetically_unimportant(Person_A:symbol, Person_B:symbol)\nHypothetically_unimportant(\"Saladin\", \"Ali Askari\").\n.decl Answer()\nAnswer() :- !Is_xenophobic(\"Saladin\"), !Is_xenophobic(\"Ali Askari\"), Hypothetically_unimportant(\"Saladin\", \"Ali Askari\").\n.output Answer", "completions": [".decl Is_xenophobic(Person:symbol)\nIs_xenophobic(\"Saladin\").\nIs_xenophobic(\"Ali Askari\").\n.decl Hypothetically_unimportant(Person_A:symbol, Person_B:symbol)\nHypothetically_unimportant(\"Saladin\", \"Ali Askari\").\n.decl Answer()\nAnswer() :- !Is_xenophobic(\"Saladin\"), !Is_xenophobic(\"Ali Askari\"), Hypothetically_unimportant(\"Saladin\", \"Ali Askari\").\n.output Answer"]}
{"id": 104, "answer": false, "completion": ".decl Enjoys(Animal:symbol, Food:symbol)\nEnjoys(\"Sockington\", \"cat food\").\n.decl Is_toxic_to(Animal:symbol, Food:symbol)\nIs_toxic_to(\"cat\", \"onions\").\n.decl Answer()\nAnswer() :- Enjoys(\"Sockington\", \"onions\"), !Is_toxic_to(\"cat\", \"onions\").\n.output Answer", "completions": [".decl Enjoys(Animal:symbol, Food:symbol)\nEnjoys(\"Sockington\", \"cat food\").\n.decl Is_toxic_to(Animal:symbol, Food:symbol)\nIs_toxic_to(\"cat\", \"onions\").\n.decl Answer()\nAnswer() :- Enjoys(\"Sockington\", \"onions\"), !Is_toxic_to(\"cat\", \"onions\").\n.output Answer"]}
{"id": 105, "answer": false, "completion": ".decl Influenced_by(Artist:symbol, Influence:symbol)\nInfluenced_by(\"Raphael\", \"Italian Renaissance\").\n.decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Italian Renaissance\", \"Italy\").\nLocated_in(\"Guam\", \"Pacific Ocean\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Raphael\", influence), Located_in(influence, location1), Located_in(\"Guam\", location2), location1 = location2.\n.output Answer", "completions": [".decl Influenced_by(Artist:symbol, Influence:symbol)\nInfluenced_by(\"Raphael\", \"Italian Renaissance\").\n.decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Italian Renaissance\", \"Italy\").\nLocated_in(\"Guam\", \"Pacific Ocean\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Raphael\", influence), Located_in(influence, location1), Located_in(\"Guam\", location2), location1 = location2.\n.output Answer"]}
{"id": 106, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Oscar Wilde\", 1854).\n.decl Invented_in_year(Invention:symbol, Invention_year:float)\nInvented_in_year(\"motor vehicle\", 1886).\n.decl Answer()\nAnswer() :- Born_in_year(\"Oscar Wilde\", birth_year), Invented_in_year(\"motor vehicle\", invention_year), birth_year < invention_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Oscar Wilde\", 1854).\n.decl Invented_in_year(Invention:symbol, Invention_year:float)\nInvented_in_year(\"motor vehicle\", 1886).\n.decl Answer()\nAnswer() :- Born_in_year(\"Oscar Wilde\", birth_year), Invented_in_year(\"motor vehicle\", invention_year), birth_year < invention_year.\n.output Answer"]}
{"id": 107, "answer": false, "completion": ".decl Requires(Object:symbol, Tool:symbol)\nRequires(\"surgery\", \"scalpel\").\n.decl Is_related_to(Subject:symbol, Object:symbol)\nIs_related_to(\"ontology\", \"philosophy\").\nIs_related_to(\"surgery\", \"medicine\").\n.decl Answer()\nAnswer() :- Requires(object, \"scalpel\"), Is_related_to(\"ontology\", object).\n.output Answer", "completions": [".decl Requires(Object:symbol, Tool:symbol)\nRequires(\"surgery\", \"scalpel\").\n.decl Is_related_to(Subject:symbol, Object:symbol)\nIs_related_to(\"ontology\", \"philosophy\").\nIs_related_to(\"surgery\", \"medicine\").\n.decl Answer()\nAnswer() :- Requires(object, \"scalpel\"), Is_related_to(\"ontology\", object).\n.output Answer"]}
{"id": 108, "answer": false, "completion": ".decl Lived_during(Person:symbol, Event:symbol)\nLived_during(\"King Arthur\", \"6th century\").\nLived_during(\"Anne Boleyn\", \"16th century\").\n.decl Event(Event:symbol, Description:symbol)\nEvent(\"beheading of Anne Boleyn\", \"16th century\").\n.decl Answer()\nAnswer() :- Lived_during(\"King Arthur\", time1), Event(\"beheading of Anne Boleyn\", time2), time1 = time2.\n.output Answer", "completions": [".decl Lived_during(Person:symbol, Event:symbol)\nLived_during(\"King Arthur\", \"6th century\").\nLived_during(\"Anne Boleyn\", \"16th century\").\n.decl Event(Event:symbol, Description:symbol)\nEvent(\"beheading of Anne Boleyn\", \"16th century\").\n.decl Answer()\nAnswer() :- Lived_during(\"King Arthur\", time1), Event(\"beheading of Anne Boleyn\", time2), time1 = time2.\n.output Answer"]}
{"id": 109, "answer": false, "completion": ".decl Supports(Person:symbol, Ideology:symbol)\nSupports(\"Alexander Graham Bell\", \"eugenics\").\n.decl Is_part_of(Ideology_A:symbol, Ideology_B:symbol)\nIs_part_of(\"Nazi eugenics\", \"eugenics\").\n.decl Answer()\nAnswer() :- Supports(\"Alexander Graham Bell\", ideology), Is_part_of(ideology, \"Nazi eugenics\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Ideology:symbol)\nSupports(\"Alexander Graham Bell\", \"eugenics\").\n.decl Is_part_of(Ideology_A:symbol, Ideology_B:symbol)\nIs_part_of(\"Nazi eugenics\", \"eugenics\").\n.decl Answer()\nAnswer() :- Supports(\"Alexander Graham Bell\", ideology), Is_part_of(ideology, \"Nazi eugenics\").\n.output Answer"]}
{"id": 110, "answer": true, "completion": ".decl Presidency(Person:symbol, Start_year:float, End_year:float)\nPresidency(\"Harry Truman\", 1945, 1953).\n.decl Amendment(Num:float, Year:float)\nAmendment(23, 1961).\n.decl Answer()\nAnswer() :- Presidency(\"Harry Truman\", start_year, end_year), Amendment(23, year), year > end_year.\n.output Answer", "completions": [".decl Presidency(Person:symbol, Start_year:float, End_year:float)\nPresidency(\"Harry Truman\", 1945, 1953).\n.decl Amendment(Num:float, Year:float)\nAmendment(23, 1961).\n.decl Answer()\nAnswer() :- Presidency(\"Harry Truman\", start_year, end_year), Amendment(23, year), year > end_year.\n.output Answer"]}
{"id": 111, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"trees changing colors\", \"fall\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"September\", \"fall\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"trees changing colors\", season), In_season(\"September\", season).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"trees changing colors\", \"fall\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"September\", \"fall\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"trees changing colors\", season), In_season(\"September\", season).\n.output Answer"]}
{"id": 112, "answer": false, "completion": ".decl Connected(Object_A:symbol, Object_B:symbol)\nConnected(\"Black Lives Matter\", \"social movement\").\nConnected(\"capsaicin\", \"spicy compound\").\n.decl Answer()\nAnswer() :- Connected(\"Black Lives Matter\", connection1), Connected(\"capsaicin\", connection2), connection1 = connection2.\n.output Answer", "completions": [".decl Connected(Object_A:symbol, Object_B:symbol)\nConnected(\"Black Lives Matter\", \"social movement\").\nConnected(\"capsaicin\", \"spicy compound\").\n.decl Answer()\nAnswer() :- Connected(\"Black Lives Matter\", connection1), Connected(\"capsaicin\", connection2), connection1 = connection2.\n.output Answer"]}
{"id": 113, "answer": false, "completion": ".decl Is_descendent(Descendent:symbol, Ancestor:symbol)\nIs_descendent(\"Achilles\", \"Peleus\").\nIs_descendent(\"Peleus\", \"Aeacus\").\nIs_descendent(\"Aeacus\", \"Zeus\").\nIs_descendent(\"Zeus\", \"Cronus\").\nIs_descendent(\"Cronus\", \"Uranus\").\nIs_descendent(\"Uranus\", \"Gaia\").\n.decl Answer()\nAnswer() :- Is_descendent(\"Achilles\", \"Gaia\").\nAnswer() :- Is_descendent(\"Achilles\", ancestor1), Is_descendent(ancestor1, \"Gaia\").\nAnswer() :- Is_descendent(\"Achilles\", ancestor1), Is_descendent(ancestor1, ancestor2), Is_descendent(ancestor2, \"Gaia\").\n.output Answer", "completions": [".decl Is_descendent(Descendent:symbol, Ancestor:symbol)\nIs_descendent(\"Achilles\", \"Peleus\").\nIs_descendent(\"Peleus\", \"Aeacus\").\nIs_descendent(\"Aeacus\", \"Zeus\").\nIs_descendent(\"Zeus\", \"Cronus\").\nIs_descendent(\"Cronus\", \"Uranus\").\nIs_descendent(\"Uranus\", \"Gaia\").\n.decl Answer()\nAnswer() :- Is_descendent(\"Achilles\", \"Gaia\").\nAnswer() :- Is_descendent(\"Achilles\", ancestor1), Is_descendent(ancestor1, \"Gaia\").\nAnswer() :- Is_descendent(\"Achilles\", ancestor1), Is_descendent(ancestor1, ancestor2), Is_descendent(ancestor2, \"Gaia\").\n.output Answer"]}
{"id": 114, "answer": false, "completion": ".decl Hangs_out(Person:symbol, Place:symbol)\nHangs_out(\"Jerry Seinfeld\", \"Comedy Club\").\nHangs_out(\"Jerry Seinfeld\", \"TV Show Set\").\n.decl Is_place(Place:symbol, Type:symbol)\nIs_place(\"Budweiser Party Deck\", \"Party\").\n.decl Answer()\nAnswer() :- Hangs_out(\"Jerry Seinfeld\", \"Budweiser Party Deck\").\n.output Answer", "completions": [".decl Hangs_out(Person:symbol, Place:symbol)\nHangs_out(\"Jerry Seinfeld\", \"Comedy Club\").\nHangs_out(\"Jerry Seinfeld\", \"TV Show Set\").\n.decl Is_place(Place:symbol, Type:symbol)\nIs_place(\"Budweiser Party Deck\", \"Party\").\n.decl Answer()\nAnswer() :- Hangs_out(\"Jerry Seinfeld\", \"Budweiser Party Deck\").\n.output Answer"]}
{"id": 115, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"basketball\", 24).\nHas_size(\"sand cat's ear\", 2).\n.decl Answer()\nAnswer() :- Has_size(\"basketball\", size1), Has_size(\"sand cat's ear\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"basketball\", 24).\nHas_size(\"sand cat's ear\", 2).\n.decl Answer()\nAnswer() :- Has_size(\"basketball\", size1), Has_size(\"sand cat's ear\", size2), size1 <= size2.\n.output Answer"]}
{"id": 116, "answer": false, "completion": ".decl Is_sports_team(Team:symbol, Sport:symbol)\nIs_sports_team(\"Spice Girls\", \"music\").\nIs_sports_team(\"ŽRK Kumanovo\", \"handball\").\n.decl Answer()\nAnswer() :- Is_sports_team(\"Spice Girls\", sport1), Is_sports_team(\"ŽRK Kumanovo\", sport2), sport1 = sport2.\n.output Answer", "completions": [".decl Is_sports_team(Team:symbol, Sport:symbol)\nIs_sports_team(\"Spice Girls\", \"music\").\nIs_sports_team(\"ŽRK Kumanovo\", \"handball\").\n.decl Answer()\nAnswer() :- Is_sports_team(\"Spice Girls\", sport1), Is_sports_team(\"ŽRK Kumanovo\", sport2), sport1 = sport2.\n.output Answer"]}
{"id": 117, "answer": true, "completion": ".decl Has_positive_use(Symbol:symbol)\nHas_positive_use(\"swastika\").\n.decl Answer()\nAnswer() :- Has_positive_use(\"swastika\").\n.output Answer", "completions": [".decl Has_positive_use(Symbol:symbol)\nHas_positive_use(\"swastika\").\n.decl Answer()\nAnswer() :- Has_positive_use(\"swastika\").\n.output Answer"]}
{"id": 118, "answer": true, "completion": ".decl Appears_in_film(Insect:symbol, Film:symbol, Year:float)\nAppears_in_film(\"black fly\", \"The Fly\", 1986).\nAppears_in_film(\"brundlefly\", \"The Fly\", 1986).\n.decl Upstaged(Insect_A:symbol, Insect_B:symbol, Film:symbol)\nUpstaged(\"black fly\", \"brundlefly\", \"The Fly\").\n.decl Answer()\nAnswer() :- Upstaged(\"black fly\", other_insect, \"The Fly\").\n.output Answer", "completions": [".decl Appears_in_film(Insect:symbol, Film:symbol, Year:float)\nAppears_in_film(\"black fly\", \"The Fly\", 1986).\nAppears_in_film(\"brundlefly\", \"The Fly\", 1986).\n.decl Upstaged(Insect_A:symbol, Insect_B:symbol, Film:symbol)\nUpstaged(\"black fly\", \"brundlefly\", \"The Fly\").\n.decl Answer()\nAnswer() :- Upstaged(\"black fly\", other_insect, \"The Fly\").\n.output Answer"]}
{"id": 119, "answer": false, "completion": ".decl Edited_draft(Editor:symbol, Author:symbol, Work:symbol)\nEdited_draft(\"Linnaeus\", \"Darwin\", \"Origin of Species\").\n.decl Lived_in_years(Person:symbol, Birth_year:float, Death_year:float)\nLived_in_years(\"Linnaeus\", 1707, 1778).\nLived_in_years(\"Darwin\", 1809, 1882).\n.decl Answer()\nAnswer() :- Edited_draft(\"Linnaeus\", \"Darwin\", \"Origin of Species\"), Lived_in_years(\"Linnaeus\", birth_year1, death_year1), Lived_in_years(\"Darwin\", birth_year2, death_year2), death_year1 >= birth_year2.\n.output Answer", "completions": [".decl Edited_draft(Editor:symbol, Author:symbol, Work:symbol)\nEdited_draft(\"Linnaeus\", \"Darwin\", \"Origin of Species\").\n.decl Lived_in_years(Person:symbol, Birth_year:float, Death_year:float)\nLived_in_years(\"Linnaeus\", 1707, 1778).\nLived_in_years(\"Darwin\", 1809, 1882).\n.decl Answer()\nAnswer() :- Edited_draft(\"Linnaeus\", \"Darwin\", \"Origin of Species\"), Lived_in_years(\"Linnaeus\", birth_year1, death_year1), Lived_in_years(\"Darwin\", birth_year2, death_year2), death_year1 >= birth_year2.\n.output Answer"]}
{"id": 120, "answer": true, "completion": ".decl Cancer_patient(Person:symbol)\nCancer_patient(\"person1\").\nCancer_patient(\"person2\").\nCancer_patient(\"person3\").\n\n.decl Gets_disability(Person:symbol)\nGets_disability(\"person1\").\nGets_disability(\"person3\").\n\n.decl Answer()\nAnswer() :- Cancer_patient(person), !Gets_disability(person).\n.output Answer", "completions": [".decl Cancer_patient(Person:symbol)\nCancer_patient(\"person1\").\nCancer_patient(\"person2\").\nCancer_patient(\"person3\").\n\n.decl Gets_disability(Person:symbol)\nGets_disability(\"person1\").\nGets_disability(\"person3\").\n\n.decl Answer()\nAnswer() :- Cancer_patient(person), !Gets_disability(person).\n.output Answer"]}
{"id": 121, "answer": true, "completion": ".decl Death_of_Person(Person:symbol, Year:float)\nDeath_of_Person(\"Helen Palmer\", 1967).\n.decl Significant_effect_on(Person_A:symbol, Person_B:symbol, Year:float)\nSignificant_effect_on(\"Helen Palmer\", \"Dr. Seuss\", 1967).\n.decl Answer()\nAnswer() :- Death_of_Person(\"Helen Palmer\", year), Significant_effect_on(\"Helen Palmer\", \"Dr. Seuss\", year).\n.output Answer", "completions": [".decl Death_of_Person(Person:symbol, Year:float)\nDeath_of_Person(\"Helen Palmer\", 1967).\n.decl Significant_effect_on(Person_A:symbol, Person_B:symbol, Year:float)\nSignificant_effect_on(\"Helen Palmer\", \"Dr. Seuss\", 1967).\n.decl Answer()\nAnswer() :- Death_of_Person(\"Helen Palmer\", year), Significant_effect_on(\"Helen Palmer\", \"Dr. Seuss\", year).\n.output Answer"]}
{"id": 122, "answer": true, "completion": ".decl Has_tonsils(Animal:symbol)\nHas_tonsils(\"human\").\nHas_tonsils(\"mammal\").\n.decl Can_get_tonsillitis(Animal:symbol)\nCan_get_tonsillitis(animal) :- Has_tonsils(animal).\n.decl Is_fish(Animal:symbol)\nIs_fish(\"fish\").\n.decl Answer()\nAnswer() :- Can_get_tonsillitis(\"fish\"), Is_fish(\"fish\").\nAnswer() :- !Can_get_tonsillitis(\"fish\"), Is_fish(\"fish\").\n.output Answer", "completions": [".decl Has_tonsils(Animal:symbol)\nHas_tonsils(\"human\").\nHas_tonsils(\"mammal\").\n.decl Can_get_tonsillitis(Animal:symbol)\nCan_get_tonsillitis(animal) :- Has_tonsils(animal).\n.decl Is_fish(Animal:symbol)\nIs_fish(\"fish\").\n.decl Answer()\nAnswer() :- Can_get_tonsillitis(\"fish\"), Is_fish(\"fish\").\nAnswer() :- !Can_get_tonsillitis(\"fish\"), Is_fish(\"fish\").\n.output Answer"]}
{"id": 123, "answer": true, "completion": ".decl Travels_on(Person:symbol, Vehicle:symbol)\nTravels_on(\"Pilgrims\", \"Mayflower\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Burning Man\", \"21st century\").\nHappens_in_time(\"Mayflower voyage\", \"17th century\").\n.decl Answer()\nAnswer() :- Travels_on(\"Pilgrims\", \"Mayflower\"), Happens_in_time(\"Burning Man\", time1), Happens_in_time(\"Mayflower voyage\", time2), time1 != time2.\n.output Answer", "completions": [".decl Travels_on(Person:symbol, Vehicle:symbol)\nTravels_on(\"Pilgrims\", \"Mayflower\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Burning Man\", \"21st century\").\nHappens_in_time(\"Mayflower voyage\", \"17th century\").\n.decl Answer()\nAnswer() :- Travels_on(\"Pilgrims\", \"Mayflower\"), Happens_in_time(\"Burning Man\", time1), Happens_in_time(\"Mayflower voyage\", time2), time1 != time2.\n.output Answer"]}
{"id": 124, "answer": true, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Lupita Nyongo\", \"Kenya\").\n.decl Has_origin(Person:symbol, Country:symbol)\nHas_origin(\"Barack Obama\", \"Kenya\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Lupita Nyongo\", country1), Has_origin(\"Barack Obama\", country2), country1 = country2.\n.output Answer", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Lupita Nyongo\", \"Kenya\").\n.decl Has_origin(Person:symbol, Country:symbol)\nHas_origin(\"Barack Obama\", \"Kenya\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Lupita Nyongo\", country1), Has_origin(\"Barack Obama\", country2), country1 = country2.\n.output Answer"]}
{"id": 125, "answer": false, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 67000000).\n.decl Has_n_records(Artist:symbol, N_records:float)\nHas_n_records(\"Johnny Cash\", 96).\n.decl Answer()\nAnswer() :- Has_population(\"France\", population), Has_n_records(\"Johnny Cash\", n_records), n_records >= population.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 67000000).\n.decl Has_n_records(Artist:symbol, N_records:float)\nHas_n_records(\"Johnny Cash\", 96).\n.decl Answer()\nAnswer() :- Has_population(\"France\", population), Has_n_records(\"Johnny Cash\", n_records), n_records >= population.\n.output Answer"]}
{"id": 126, "answer": true, "completion": ".decl Smells_like(Object:symbol, Smell:symbol)\nSmells_like(\"brussels sprouts\", \"sulfur\").\nSmells_like(\"fart\", \"sulfur\").\n.decl Answer()\nAnswer() :- Smells_like(\"brussels sprouts\", smell1), Smells_like(\"fart\", smell2), smell1 = smell2.\n.output Answer", "completions": [".decl Smells_like(Object:symbol, Smell:symbol)\nSmells_like(\"brussels sprouts\", \"sulfur\").\nSmells_like(\"fart\", \"sulfur\").\n.decl Answer()\nAnswer() :- Smells_like(\"brussels sprouts\", smell1), Smells_like(\"fart\", smell2), smell1 = smell2.\n.output Answer"]}
{"id": 127, "answer": false, "completion": ".decl Applies_finisher(Person:symbol, Target:symbol)\nApplies_finisher(\"Stone Cold Steve Austin\", \"human\").\n.decl Is_species(Object:symbol, Species:symbol)\nIs_species(\"mule deer\", \"animal\").\nIs_species(\"human\", \"human\").\n.decl Answer()\nAnswer() :- Applies_finisher(\"Stone Cold Steve Austin\", target), Is_species(target, \"animal\").\nAnswer() :- Applies_finisher(\"Stone Cold Steve Austin\", target), Is_species(target, \"human\"), Is_species(\"mule deer\", \"human\").\n.output Answer", "completions": [".decl Applies_finisher(Person:symbol, Target:symbol)\nApplies_finisher(\"Stone Cold Steve Austin\", \"human\").\n.decl Is_species(Object:symbol, Species:symbol)\nIs_species(\"mule deer\", \"animal\").\nIs_species(\"human\", \"human\").\n.decl Answer()\nAnswer() :- Applies_finisher(\"Stone Cold Steve Austin\", target), Is_species(target, \"animal\").\nAnswer() :- Applies_finisher(\"Stone Cold Steve Austin\", target), Is_species(target, \"human\"), Is_species(\"mule deer\", \"human\").\n.output Answer"]}
{"id": 128, "answer": false, "completion": ".decl Is_character(Character:symbol)\nIs_character(\"Joker\").\n\n.decl In_relationship(Character_A:symbol, Character_B:symbol)\nIn_relationship(\"Joker\", \"Harley Quinn\").\n\n.decl Is_healthy_relationship(Character_A:symbol, Character_B:symbol)\nIs_healthy_relationship(\"Joker\", \"Harley Quinn\") :- !In_relationship(\"Joker\", \"Harley Quinn\").\n\n.decl Answer()\nAnswer() :- Is_character(\"Joker\"), In_relationship(\"Joker\", character_b), Is_healthy_relationship(\"Joker\", character_b).\n.output Answer", "completions": [".decl Is_character(Character:symbol)\nIs_character(\"Joker\").\n\n.decl In_relationship(Character_A:symbol, Character_B:symbol)\nIn_relationship(\"Joker\", \"Harley Quinn\").\n\n.decl Is_healthy_relationship(Character_A:symbol, Character_B:symbol)\nIs_healthy_relationship(\"Joker\", \"Harley Quinn\") :- !In_relationship(\"Joker\", \"Harley Quinn\").\n\n.decl Answer()\nAnswer() :- Is_character(\"Joker\"), In_relationship(\"Joker\", character_b), Is_healthy_relationship(\"Joker\", character_b).\n.output Answer"]}
{"id": 129, "answer": false, "completion": ".decl Is_traditional_boat(Boat:symbol, Country:symbol)\nIs_traditional_boat(\"kayak\", \"Inuit\").\nIs_traditional_boat(\"waka\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Is_traditional_boat(\"kayak\", \"New Zealand\").\n.output Answer", "completions": [".decl Is_traditional_boat(Boat:symbol, Country:symbol)\nIs_traditional_boat(\"kayak\", \"Inuit\").\nIs_traditional_boat(\"waka\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Is_traditional_boat(\"kayak\", \"New Zealand\").\n.output Answer"]}
{"id": 130, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Boris Yeltsin\", 1931).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Boris Yeltsin\", 2007).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"2008 Summer Olympics\", 2008).\n.decl Answer()\nAnswer() :- Born_in_year(\"Boris Yeltsin\", birth_year), Died_in_year(\"Boris Yeltsin\", death_year), Happens_in_year(\"2008 Summer Olympics\", event_year), birth_year <= event_year, event_year <= death_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Boris Yeltsin\", 1931).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Boris Yeltsin\", 2007).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"2008 Summer Olympics\", 2008).\n.decl Answer()\nAnswer() :- Born_in_year(\"Boris Yeltsin\", birth_year), Died_in_year(\"Boris Yeltsin\", death_year), Happens_in_year(\"2008 Summer Olympics\", event_year), birth_year <= event_year, event_year <= death_year.\n.output Answer"]}
{"id": 131, "answer": true, "completion": ".decl Appears_in_film(Animal:symbol, Film:symbol)\nAppears_in_film(\"swallow\", \"Monty Python and the Holy Grail\").\n.decl Features_character(Film:symbol, Character:symbol)\nFeatures_character(\"Monty Python and the Holy Grail\", \"King Arthur\").\n.decl Answer()\nAnswer() :- Appears_in_film(\"swallow\", film), Features_character(film, \"King Arthur\").\n.output Answer", "completions": [".decl Appears_in_film(Animal:symbol, Film:symbol)\nAppears_in_film(\"swallow\", \"Monty Python and the Holy Grail\").\n.decl Features_character(Film:symbol, Character:symbol)\nFeatures_character(\"Monty Python and the Holy Grail\", \"King Arthur\").\n.decl Answer()\nAnswer() :- Appears_in_film(\"swallow\", film), Features_character(film, \"King Arthur\").\n.output Answer"]}
{"id": 132, "answer": true, "completion": ".decl Attended(Person:symbol, University:symbol, Status:symbol)\nAttended(\"Michael Crichton\", \"Harvard University\", \"undergraduate\").\n.decl Flunked_out(Person:symbol, University:symbol)\nFlunked_out(\"Michael Crichton\", \"Harvard University\").\n.decl In_danger_of_flunking(Person:symbol, University:symbol)\nIn_danger_of_flunking(\"Michael Crichton\", \"Harvard University\").\n.decl Answer()\nAnswer() :- Attended(\"Michael Crichton\", \"Harvard University\", \"undergraduate\"), In_danger_of_flunking(\"Michael Crichton\", \"Harvard University\").\n.output Answer", "completions": [".decl Attended(Person:symbol, University:symbol, Status:symbol)\nAttended(\"Michael Crichton\", \"Harvard University\", \"undergraduate\").\n.decl Flunked_out(Person:symbol, University:symbol)\nFlunked_out(\"Michael Crichton\", \"Harvard University\").\n.decl In_danger_of_flunking(Person:symbol, University:symbol)\nIn_danger_of_flunking(\"Michael Crichton\", \"Harvard University\").\n.decl Answer()\nAnswer() :- Attended(\"Michael Crichton\", \"Harvard University\", \"undergraduate\"), In_danger_of_flunking(\"Michael Crichton\", \"Harvard University\").\n.output Answer"]}
{"id": 133, "answer": true, "completion": ".decl Was_popular(Activity:symbol, Time:symbol)\nWas_popular(\"surfing\", \"1990s\").\n.decl Came_out(Object:symbol, Time:symbol)\nCame_out(\"pogs\", \"1990s\").\n.decl Answer()\nAnswer() :- Was_popular(\"surfing\", time), Came_out(\"pogs\", time).\n.output Answer", "completions": [".decl Was_popular(Activity:symbol, Time:symbol)\nWas_popular(\"surfing\", \"1990s\").\n.decl Came_out(Object:symbol, Time:symbol)\nCame_out(\"pogs\", \"1990s\").\n.decl Answer()\nAnswer() :- Was_popular(\"surfing\", time), Came_out(\"pogs\", time).\n.output Answer"]}
{"id": 134, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"caracal\", \"Africa\").\nLives_in(\"caracal\", \"Middle East\").\nLives_in(\"caracal\", \"Central Asia\").\n.decl Located_in(University:symbol, Location:symbol)\nLocated_in(\"University of Houston\", \"Houston\").\n.decl Answer()\nAnswer() :- Lives_in(\"caracal\", location), Located_in(\"University of Houston\", location).\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"caracal\", \"Africa\").\nLives_in(\"caracal\", \"Middle East\").\nLives_in(\"caracal\", \"Central Asia\").\n.decl Located_in(University:symbol, Location:symbol)\nLocated_in(\"University of Houston\", \"Houston\").\n.decl Answer()\nAnswer() :- Lives_in(\"caracal\", location), Located_in(\"University of Houston\", location).\n.output Answer"]}
{"id": 135, "answer": false, "completion": ".decl Collaborated(Person_A:symbol, Person_B:symbol)\nCollaborated(\"Coen brothers\", \"Frances McDormand\").\nCollaborated(\"Coen brothers\", \"Steve Buscemi\").\nCollaborated(\"Brothers Grimm\", \"Jacob Grimm\").\nCollaborated(\"Brothers Grimm\", \"Wilhelm Grimm\").\n.decl Answer()\nAnswer() :- Collaborated(\"Coen brothers\", person), Collaborated(\"Brothers Grimm\", person).\n.output Answer", "completions": [".decl Collaborated(Person_A:symbol, Person_B:symbol)\nCollaborated(\"Coen brothers\", \"Frances McDormand\").\nCollaborated(\"Coen brothers\", \"Steve Buscemi\").\nCollaborated(\"Brothers Grimm\", \"Jacob Grimm\").\nCollaborated(\"Brothers Grimm\", \"Wilhelm Grimm\").\n.decl Answer()\nAnswer() :- Collaborated(\"Coen brothers\", person), Collaborated(\"Brothers Grimm\", person).\n.output Answer"]}
{"id": 136, "answer": true, "completion": ".decl Has_storage_capacity(Device:symbol, Capacity:float)\nHas_storage_capacity(\"first generation iPhone\", 8).\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"lolcat\", 0.00008).\n.decl Answer()\nAnswer() :- Has_storage_capacity(\"first generation iPhone\", capacity), Has_size(\"lolcat\", size), 100000 * size <= capacity.\n.output Answer", "completions": [".decl Has_storage_capacity(Device:symbol, Capacity:float)\nHas_storage_capacity(\"first generation iPhone\", 8).\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"lolcat\", 0.00008).\n.decl Answer()\nAnswer() :- Has_storage_capacity(\"first generation iPhone\", capacity), Has_size(\"lolcat\", size), 100000 * size <= capacity.\n.output Answer"]}
{"id": 137, "answer": true, "completion": ".decl Forbidden(Activity:symbol, Group:symbol)\nForbidden(\"engaging in warfare\", \"monks\").\n.decl Answer()\nAnswer() :- Forbidden(\"engaging in warfare\", \"monks\").\n.output Answer", "completions": [".decl Forbidden(Activity:symbol, Group:symbol)\nForbidden(\"engaging in warfare\", \"monks\").\n.decl Answer()\nAnswer() :- Forbidden(\"engaging in warfare\", \"monks\").\n.output Answer"]}
{"id": 138, "answer": true, "completion": ".decl Hosts_in_continent(Service:symbol, Continent:symbol)\nHosts_in_continent(\"BBC World Service\", \"Europe\").\n.decl Answer()\nAnswer() :- Hosts_in_continent(\"BBC World Service\", \"Europe\").\n.output Answer", "completions": [".decl Hosts_in_continent(Service:symbol, Continent:symbol)\nHosts_in_continent(\"BBC World Service\", \"Europe\").\n.decl Answer()\nAnswer() :- Hosts_in_continent(\"BBC World Service\", \"Europe\").\n.output Answer"]}
{"id": 139, "answer": false, "completion": ".decl Is_leap_year(Year:float)\nIs_leap_year(1996).\nIs_leap_year(2000).\n.decl Age_in_years(Birth_year:float, Current_year:float, Age:float)\nAge_in_years(1996, 2000, 4).\n.decl Answer()\nAnswer() :- Is_leap_year(1996), Is_leap_year(2000), Age_in_years(1996, 2000, age), age = 1.\n.output Answer", "completions": [".decl Is_leap_year(Year:float)\nIs_leap_year(1996).\nIs_leap_year(2000).\n.decl Age_in_years(Birth_year:float, Current_year:float, Age:float)\nAge_in_years(1996, 2000, 4).\n.decl Answer()\nAnswer() :- Is_leap_year(1996), Is_leap_year(2000), Age_in_years(1996, 2000, age), age = 1.\n.output Answer"]}
{"id": 140, "answer": true, "completion": ".decl Married_n_times(Person:symbol, N_times:float)\nMarried_n_times(\"Clark Gable\", 5).\nMarried_n_times(\"Richard Burton\", 2).\n.decl Answer()\nAnswer() :- Married_n_times(\"Clark Gable\", n_times1), Married_n_times(\"Richard Burton\", n_times2), n_times1 > n_times2.\n.output Answer", "completions": [".decl Married_n_times(Person:symbol, N_times:float)\nMarried_n_times(\"Clark Gable\", 5).\nMarried_n_times(\"Richard Burton\", 2).\n.decl Answer()\nAnswer() :- Married_n_times(\"Clark Gable\", n_times1), Married_n_times(\"Richard Burton\", n_times2), n_times1 > n_times2.\n.output Answer"]}
{"id": 141, "answer": false, "completion": ".decl Has_parts(Object:symbol, N_parts:float)\nHas_parts(\"squid brains\", 3).\n.decl Can_destroy(Object:symbol, N_targets:float)\nCan_destroy(\"double-barreled shotgun\", 2).\n.decl Answer()\nAnswer() :- Has_parts(\"squid brains\", n_parts), Can_destroy(\"double-barreled shotgun\", n_targets), n_targets >= n_parts.\n.output Answer", "completions": [".decl Has_parts(Object:symbol, N_parts:float)\nHas_parts(\"squid brains\", 3).\n.decl Can_destroy(Object:symbol, N_targets:float)\nCan_destroy(\"double-barreled shotgun\", 2).\n.decl Answer()\nAnswer() :- Has_parts(\"squid brains\", n_parts), Can_destroy(\"double-barreled shotgun\", n_targets), n_targets >= n_parts.\n.output Answer"]}
{"id": 142, "answer": true, "completion": ".decl Needs_new_shoes(During:symbol, Reason:symbol)\nNeeds_new_shoes(\"pregnancy\", \"swollen feet\").\n.decl Answer()\nAnswer() :- Needs_new_shoes(\"pregnancy\", \"swollen feet\").\n.output Answer", "completions": [".decl Needs_new_shoes(During:symbol, Reason:symbol)\nNeeds_new_shoes(\"pregnancy\", \"swollen feet\").\n.decl Answer()\nAnswer() :- Needs_new_shoes(\"pregnancy\", \"swollen feet\").\n.output Answer"]}
{"id": 143, "answer": true, "completion": ".decl Adherents_to_religion(Person:symbol, Religion:symbol)\nAdherents_to_religion(\"historic enemies of Catholic Church\", \"Christianity\").\nAdherents_to_religion(\"some people in China\", \"Christianity\").\n.decl Answer()\nAnswer() :- Adherents_to_religion(\"historic enemies of Catholic Church\", \"Christianity\"), Adherents_to_religion(\"some people in China\", \"Christianity\").\n.output Answer", "completions": [".decl Adherents_to_religion(Person:symbol, Religion:symbol)\nAdherents_to_religion(\"historic enemies of Catholic Church\", \"Christianity\").\nAdherents_to_religion(\"some people in China\", \"Christianity\").\n.decl Answer()\nAnswer() :- Adherents_to_religion(\"historic enemies of Catholic Church\", \"Christianity\"), Adherents_to_religion(\"some people in China\", \"Christianity\").\n.output Answer"]}
{"id": 144, "answer": true, "completion": ".decl Is_successor(Model_A:symbol, Model_B:symbol)\nIs_successor(\"Chevrolet Cruze\", \"Chinese successor\").\n.decl Is_named_after(Model:symbol, Town:symbol)\nIs_named_after(\"Chinese successor\", \"town far from Milan\").\n.decl Answer()\nAnswer() :- Is_successor(\"Chevrolet Cruze\", model), Is_named_after(model, \"town far from Milan\").\n.output Answer", "completions": [".decl Is_successor(Model_A:symbol, Model_B:symbol)\nIs_successor(\"Chevrolet Cruze\", \"Chinese successor\").\n.decl Is_named_after(Model:symbol, Town:symbol)\nIs_named_after(\"Chinese successor\", \"town far from Milan\").\n.decl Answer()\nAnswer() :- Is_successor(\"Chevrolet Cruze\", model), Is_named_after(model, \"town far from Milan\").\n.output Answer"]}
{"id": 145, "answer": true, "completion": ".decl Belongs_to_order(Person:symbol, Order:symbol)\nBelongs_to_order(\"Blessed Gerard\", \"Order of St. John\").\nBelongs_to_order(\"Dominican Order\", \"Order of Preachers\").\n.decl Has_strength(Order:symbol, Strength:float)\nHas_strength(\"Order of St. John\", 100).\nHas_strength(\"Order of Preachers\", 200).\n.decl Answer()\nAnswer() :- Belongs_to_order(\"Blessed Gerard\", order1), Belongs_to_order(\"Dominican Order\", order2), Has_strength(order1, strength1), Has_strength(order2, strength2), strength2 > strength1.\n.output Answer", "completions": [".decl Belongs_to_order(Person:symbol, Order:symbol)\nBelongs_to_order(\"Blessed Gerard\", \"Order of St. John\").\nBelongs_to_order(\"Dominican Order\", \"Order of Preachers\").\n.decl Has_strength(Order:symbol, Strength:float)\nHas_strength(\"Order of St. John\", 100).\nHas_strength(\"Order of Preachers\", 200).\n.decl Answer()\nAnswer() :- Belongs_to_order(\"Blessed Gerard\", order1), Belongs_to_order(\"Dominican Order\", order2), Has_strength(order1, strength1), Has_strength(order2, strength2), strength2 > strength1.\n.output Answer"]}
{"id": 146, "answer": true, "completion": ".decl Suitable_for(Material:symbol, Process:symbol)\nSuitable_for(\"pottery\", \"kiln\").\nSuitable_for(\"glass\", \"glass blowing\").\n.decl Inappropriate(Material:symbol, Process:symbol)\nInappropriate(material, process) :- Suitable_for(material, suitable_process), Suitable_for(other_material, process), material != other_material.\n.decl Answer()\nAnswer() :- Inappropriate(\"pottery\", \"glass blowing\").\n.output Answer", "completions": [".decl Suitable_for(Material:symbol, Process:symbol)\nSuitable_for(\"pottery\", \"kiln\").\nSuitable_for(\"glass\", \"glass blowing\").\n.decl Inappropriate(Material:symbol, Process:symbol)\nInappropriate(material, process) :- Suitable_for(material, suitable_process), Suitable_for(other_material, process), material != other_material.\n.decl Answer()\nAnswer() :- Inappropriate(\"pottery\", \"glass blowing\").\n.output Answer"]}
{"id": 147, "answer": false, "completion": ".decl Has_population(Region:symbol, Population:float)\nHas_population(\"Balkans\", 55000000).\nHas_population(\"Japan\", 126000000).\n.decl Answer()\nAnswer() :- Has_population(\"Balkans\", population1), Has_population(\"Japan\", population2), population1 >= population2.\n.output Answer", "completions": [".decl Has_population(Region:symbol, Population:float)\nHas_population(\"Balkans\", 55000000).\nHas_population(\"Japan\", 126000000).\n.decl Answer()\nAnswer() :- Has_population(\"Balkans\", population1), Has_population(\"Japan\", population2), population1 >= population2.\n.output Answer"]}
{"id": 148, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Steven Spielberg\", 1946).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"email\", 1971).\n.decl Answer()\nAnswer() :- Born_in_year(\"Steven Spielberg\", birth_year), Invented_in_year(\"email\", invention_year), birth_year < invention_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Steven Spielberg\", 1946).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"email\", 1971).\n.decl Answer()\nAnswer() :- Born_in_year(\"Steven Spielberg\", birth_year), Invented_in_year(\"email\", invention_year), birth_year < invention_year.\n.output Answer"]}
{"id": 149, "answer": true, "completion": ".decl Died(Person:symbol, Year:float)\nDied(\"Charles Manson\", 2017).\n.decl Body_unwanted(Person:symbol)\nBody_unwanted(\"Charles Manson\").\n.decl Answer()\nAnswer() :- Body_unwanted(\"Charles Manson\").\n.output Answer", "completions": [".decl Died(Person:symbol, Year:float)\nDied(\"Charles Manson\", 2017).\n.decl Body_unwanted(Person:symbol)\nBody_unwanted(\"Charles Manson\").\n.decl Answer()\nAnswer() :- Body_unwanted(\"Charles Manson\").\n.output Answer"]}
{"id": 150, "answer": false, "completion": ".decl Has_teeth_size(Animal:symbol, Teeth_size:float)\nHas_teeth_size(\"beaver\", 0.1).\nHas_teeth_size(\"smilodon\", 12).\n.decl Answer()\nAnswer() :- Has_teeth_size(\"beaver\", size1), Has_teeth_size(\"smilodon\", size2), size1 >= size2.\n.output Answer", "completions": [".decl Has_teeth_size(Animal:symbol, Teeth_size:float)\nHas_teeth_size(\"beaver\", 0.1).\nHas_teeth_size(\"smilodon\", 12).\n.decl Answer()\nAnswer() :- Has_teeth_size(\"beaver\", size1), Has_teeth_size(\"smilodon\", size2), size1 >= size2.\n.output Answer"]}
{"id": 151, "answer": true, "completion": ".decl Treatable_without_surgery(Condition:symbol)\nTreatable_without_surgery(\"dysphoria around one's pelvis\").\n.decl Answer()\nAnswer() :- Treatable_without_surgery(\"dysphoria around one's pelvis\").\n.output Answer", "completions": [".decl Treatable_without_surgery(Condition:symbol)\nTreatable_without_surgery(\"dysphoria around one's pelvis\").\n.decl Answer()\nAnswer() :- Treatable_without_surgery(\"dysphoria around one's pelvis\").\n.output Answer"]}
{"id": 152, "answer": false, "completion": ".decl Supports_group(Game:symbol, Group:symbol)\nSupports_group(\"Grand Theft Auto III\", \"Blue Lives Matter\").\n.decl Has_element(Game:symbol, Element:symbol)\nHas_element(\"Grand Theft Auto III\", \"violence\").\nHas_element(\"Grand Theft Auto III\", \"crime\").\nHas_element(\"Grand Theft Auto III\", \"police\").\n.decl Answer()\nAnswer() :- Supports_group(\"Grand Theft Auto III\", \"Blue Lives Matter\"), !Has_element(\"Grand Theft Auto III\", \"violence\").\nAnswer() :- Supports_group(\"Grand Theft Auto III\", \"Blue Lives Matter\"), !Has_element(\"Grand Theft Auto III\", \"crime\").\nAnswer() :- Supports_group(\"Grand Theft Auto III\", \"Blue Lives Matter\"), !Has_element(\"Grand Theft Auto III\", \"police\").\n.output Answer", "completions": [".decl Supports_group(Game:symbol, Group:symbol)\nSupports_group(\"Grand Theft Auto III\", \"Blue Lives Matter\").\n.decl Has_element(Game:symbol, Element:symbol)\nHas_element(\"Grand Theft Auto III\", \"violence\").\nHas_element(\"Grand Theft Auto III\", \"crime\").\nHas_element(\"Grand Theft Auto III\", \"police\").\n.decl Answer()\nAnswer() :- Supports_group(\"Grand Theft Auto III\", \"Blue Lives Matter\"), !Has_element(\"Grand Theft Auto III\", \"violence\").\nAnswer() :- Supports_group(\"Grand Theft Auto III\", \"Blue Lives Matter\"), !Has_element(\"Grand Theft Auto III\", \"crime\").\nAnswer() :- Supports_group(\"Grand Theft Auto III\", \"Blue Lives Matter\"), !Has_element(\"Grand Theft Auto III\", \"police\").\n.output Answer"]}
{"id": 153, "answer": false, "completion": ".decl Fits_in_car(Person:symbol)\nFits_in_car(\"Dalai Lama\").\n.decl Answer()\nAnswer() :- Fits_in_car(\"Dalai Lama\").\n.output Answer", "completions": [".decl Fits_in_car(Person:symbol)\nFits_in_car(\"Dalai Lama\").\n.decl Answer()\nAnswer() :- Fits_in_car(\"Dalai Lama\").\n.output Answer"]}
{"id": 154, "answer": true, "completion": ".decl Wins_contest(Person:symbol, Contest:symbol, Year:float)\nWins_contest(\"Dafne Keen\", \"Eurovision Song Contest\", 2020).\n.decl Is_actress(Person:symbol)\nIs_actress(\"Dafne Keen\").\n.decl Is_singer(Person:symbol)\nIs_singer(\"Dafne Keen\").\n.decl Answer()\nAnswer() :- Wins_contest(\"Dafne Keen\", \"Eurovision Song Contest\", 2020), Is_actress(\"Dafne Keen\"), Is_singer(\"Dafne Keen\").\n.output Answer", "completions": [".decl Wins_contest(Person:symbol, Contest:symbol, Year:float)\nWins_contest(\"Dafne Keen\", \"Eurovision Song Contest\", 2020).\n.decl Is_actress(Person:symbol)\nIs_actress(\"Dafne Keen\").\n.decl Is_singer(Person:symbol)\nIs_singer(\"Dafne Keen\").\n.decl Answer()\nAnswer() :- Wins_contest(\"Dafne Keen\", \"Eurovision Song Contest\", 2020), Is_actress(\"Dafne Keen\"), Is_singer(\"Dafne Keen\").\n.output Answer"]}
{"id": 155, "answer": true, "completion": ".decl Has_incident(Airline:symbol, Incident:symbol)\nHas_incident(\"United Airlines\", \"Flight 232 crash\").\n.decl Answer()\nAnswer() :- !Has_incident(\"United Airlines\", _).\n.output Answer", "completions": [".decl Has_incident(Airline:symbol, Incident:symbol)\nHas_incident(\"United Airlines\", \"Flight 232 crash\").\n.decl Answer()\nAnswer() :- !Has_incident(\"United Airlines\", _).\n.output Answer"]}
{"id": 156, "answer": false, "completion": ".decl Has_immunity(Role:symbol, Country:symbol)\nHas_immunity(\"United States Secretary of State\", \"U.K.\").\n.decl Commits_crime(Person:symbol, Role:symbol, Country:symbol)\nCommits_crime(\"United States Secretary of State\", \"U.K.\").\n.decl Can_be_arrested(Person:symbol, Country:symbol)\nCan_be_arrested(\"United States Secretary of State\", \"U.K.\") :- Commits_crime(\"United States Secretary of State\", \"U.K.\"), !Has_immunity(\"United States Secretary of State\", \"U.K.\").\n.decl Answer()\nAnswer() :- !Can_be_arrested(\"United States Secretary of State\", \"U.K.\").\n.output Answer", "completions": [".decl Has_immunity(Role:symbol, Country:symbol)\nHas_immunity(\"United States Secretary of State\", \"U.K.\").\n.decl Commits_crime(Person:symbol, Role:symbol, Country:symbol)\nCommits_crime(\"United States Secretary of State\", \"U.K.\").\n.decl Can_be_arrested(Person:symbol, Country:symbol)\nCan_be_arrested(\"United States Secretary of State\", \"U.K.\") :- Commits_crime(\"United States Secretary of State\", \"U.K.\"), !Has_immunity(\"United States Secretary of State\", \"U.K.\").\n.decl Answer()\nAnswer() :- !Can_be_arrested(\"United States Secretary of State\", \"U.K.\").\n.output Answer"]}
{"id": 157, "answer": false, "completion": ".decl Is_brain_problem(Condition:symbol)\nIs_brain_problem(\"stroke\").\nIs_brain_problem(\"brain tumor\").\nIs_brain_problem(\"Alzheimer's disease\").\n.decl Answer()\nAnswer() :- Is_brain_problem(\"myocardial infarction\").\n.output Answer", "completions": [".decl Is_brain_problem(Condition:symbol)\nIs_brain_problem(\"stroke\").\nIs_brain_problem(\"brain tumor\").\nIs_brain_problem(\"Alzheimer's disease\").\n.decl Answer()\nAnswer() :- Is_brain_problem(\"myocardial infarction\").\n.output Answer"]}
{"id": 158, "answer": true, "completion": ".decl Is_open_on_date(Restaurant:symbol, Date:symbol)\nIs_open_on_date(\"Chick Fil A\", \"Halloween 2021\").\n.decl Is_holiday(Date:symbol)\nIs_holiday(\"Halloween 2021\").\n.decl Is_closed_on_holiday(Restaurant:symbol)\nIs_closed_on_holiday(\"Chick Fil A\").\n.decl Answer()\nAnswer() :- Is_open_on_date(\"Chick Fil A\", \"Halloween 2021\"), !Is_holiday(\"Halloween 2021\").\nAnswer() :- Is_open_on_date(\"Chick Fil A\", \"Halloween 2021\"), Is_holiday(\"Halloween 2021\"), !Is_closed_on_holiday(\"Chick Fil A\").\n.output Answer", "completions": [".decl Is_open_on_date(Restaurant:symbol, Date:symbol)\nIs_open_on_date(\"Chick Fil A\", \"Halloween 2021\").\n.decl Is_holiday(Date:symbol)\nIs_holiday(\"Halloween 2021\").\n.decl Is_closed_on_holiday(Restaurant:symbol)\nIs_closed_on_holiday(\"Chick Fil A\").\n.decl Answer()\nAnswer() :- Is_open_on_date(\"Chick Fil A\", \"Halloween 2021\"), !Is_holiday(\"Halloween 2021\").\nAnswer() :- Is_open_on_date(\"Chick Fil A\", \"Halloween 2021\"), Is_holiday(\"Halloween 2021\"), !Is_closed_on_holiday(\"Chick Fil A\").\n.output Answer"]}
{"id": 159, "answer": false, "completion": ".decl Person_belief(Person:symbol, Belief:symbol)\nPerson_belief(\"Godfrey of Bouillon\", \"Christianity\").\n.decl Participated_in_war(Person:symbol, War:symbol)\nParticipated_in_war(\"Godfrey of Bouillon\", \"First Crusade\").\n.decl War_against_religion(War:symbol, Religion:symbol)\nWar_against_religion(\"First Crusade\", \"Islam\").\n.decl Answer()\nAnswer() :- Person_belief(\"Godfrey of Bouillon\", \"Christianity\"), Participated_in_war(\"Godfrey of Bouillon\", war), War_against_religion(war, \"Islam\").\n.output Answer", "completions": [".decl Person_belief(Person:symbol, Belief:symbol)\nPerson_belief(\"Godfrey of Bouillon\", \"Christianity\").\n.decl Participated_in_war(Person:symbol, War:symbol)\nParticipated_in_war(\"Godfrey of Bouillon\", \"First Crusade\").\n.decl War_against_religion(War:symbol, Religion:symbol)\nWar_against_religion(\"First Crusade\", \"Islam\").\n.decl Answer()\nAnswer() :- Person_belief(\"Godfrey of Bouillon\", \"Christianity\"), Participated_in_war(\"Godfrey of Bouillon\", war), War_against_religion(war, \"Islam\").\n.output Answer"]}
{"id": 160, "answer": false, "completion": ".decl Has_effect(Drink:symbol, Effect:symbol)\nHas_effect(\"espresso\", \"stimulant\").\nHas_effect(\"chamomile tea\", \"calming\").\n.decl Answer()\nAnswer() :- Has_effect(\"espresso\", \"calming\").\nAnswer() :- Has_effect(\"espresso\", effect), !Has_effect(\"espresso\", \"stimulant\").\n.output Answer", "completions": [".decl Has_effect(Drink:symbol, Effect:symbol)\nHas_effect(\"espresso\", \"stimulant\").\nHas_effect(\"chamomile tea\", \"calming\").\n.decl Answer()\nAnswer() :- Has_effect(\"espresso\", \"calming\").\nAnswer() :- Has_effect(\"espresso\", effect), !Has_effect(\"espresso\", \"stimulant\").\n.output Answer"]}
{"id": 161, "answer": false, "completion": ".decl Has_ingredients(Dish:symbol, Ingredient1:symbol, Ingredient2:symbol)\nHas_ingredients(\"rice pudding\", \"rice\", \"milk\").\nHas_ingredients(\"horchata\", \"rice\", \"water\").\n.decl Answer()\nAnswer() :- Has_ingredients(\"rice pudding\", \"rice\", \"milk\"), Has_ingredients(\"horchata\", \"rice\", \"water\"), !Has_ingredients(\"rice pudding\", _, \"water\").\n.output Answer", "completions": [".decl Has_ingredients(Dish:symbol, Ingredient1:symbol, Ingredient2:symbol)\nHas_ingredients(\"rice pudding\", \"rice\", \"milk\").\nHas_ingredients(\"horchata\", \"rice\", \"water\").\n.decl Answer()\nAnswer() :- Has_ingredients(\"rice pudding\", \"rice\", \"milk\"), Has_ingredients(\"horchata\", \"rice\", \"water\"), !Has_ingredients(\"rice pudding\", _, \"water\").\n.output Answer"]}
{"id": 162, "answer": true, "completion": ".decl Achieved_Latin_honors(Person:symbol)\nAchieved_Latin_honors(\"Bill Gates\").\n.decl Answer()\nAnswer() :- Achieved_Latin_honors(\"Bill Gates\").\n.output Answer", "completions": [".decl Achieved_Latin_honors(Person:symbol)\nAchieved_Latin_honors(\"Bill Gates\").\n.decl Answer()\nAnswer() :- Achieved_Latin_honors(\"Bill Gates\").\n.output Answer"]}
{"id": 163, "answer": true, "completion": ".decl Invented_in_format(Genre:symbol, Format:symbol)\nInvented_in_format(\"Superhero fiction\", \"comic books\").\n.decl Is_digital_format(Format:symbol)\nIs_digital_format(\"digital format\").\n.decl Answer()\nAnswer() :- Invented_in_format(\"Superhero fiction\", format), Is_digital_format(format).\n.output Answer", "completions": [".decl Invented_in_format(Genre:symbol, Format:symbol)\nInvented_in_format(\"Superhero fiction\", \"comic books\").\n.decl Is_digital_format(Format:symbol)\nIs_digital_format(\"digital format\").\n.decl Answer()\nAnswer() :- Invented_in_format(\"Superhero fiction\", format), Is_digital_format(format).\n.output Answer"]}
{"id": 164, "answer": true, "completion": ".decl Is_Chordata(Animal:symbol)\nIs_Chordata(\"rat\").\nIs_Chordata(\"ox\").\nIs_Chordata(\"tiger\").\nIs_Chordata(\"rabbit\").\nIs_Chordata(\"dragon\").\nIs_Chordata(\"snake\").\nIs_Chordata(\"horse\").\nIs_Chordata(\"goat\").\nIs_Chordata(\"monkey\").\nIs_Chordata(\"rooster\").\nIs_Chordata(\"dog\").\nIs_Chordata(\"pig\").\n.decl In_Chinese_Calendar(Animal:symbol)\nIn_Chinese_Calendar(\"rat\").\nIn_Chinese_Calendar(\"ox\").\nIn_Chinese_Calendar(\"tiger\").\nIn_Chinese_Calendar(\"rabbit\").\nIn_Chinese_Calendar(\"dragon\").\nIn_Chinese_Calendar(\"snake\").\nIn_Chinese_Calendar(\"horse\").\nIn_Chinese_Calendar(\"goat\").\nIn_Chinese_Calendar(\"monkey\").\nIn_Chinese_Calendar(\"rooster\").\nIn_Chinese_Calendar(\"dog\").\nIn_Chinese_Calendar(\"pig\").\n.decl Answer()\nAnswer() :- In_Chinese_Calendar(animal), Is_Chordata(animal).\n.output Answer", "completions": [".decl Is_Chordata(Animal:symbol)\nIs_Chordata(\"rat\").\nIs_Chordata(\"ox\").\nIs_Chordata(\"tiger\").\nIs_Chordata(\"rabbit\").\nIs_Chordata(\"dragon\").\nIs_Chordata(\"snake\").\nIs_Chordata(\"horse\").\nIs_Chordata(\"goat\").\nIs_Chordata(\"monkey\").\nIs_Chordata(\"rooster\").\nIs_Chordata(\"dog\").\nIs_Chordata(\"pig\").\n.decl In_Chinese_Calendar(Animal:symbol)\nIn_Chinese_Calendar(\"rat\").\nIn_Chinese_Calendar(\"ox\").\nIn_Chinese_Calendar(\"tiger\").\nIn_Chinese_Calendar(\"rabbit\").\nIn_Chinese_Calendar(\"dragon\").\nIn_Chinese_Calendar(\"snake\").\nIn_Chinese_Calendar(\"horse\").\nIn_Chinese_Calendar(\"goat\").\nIn_Chinese_Calendar(\"monkey\").\nIn_Chinese_Calendar(\"rooster\").\nIn_Chinese_Calendar(\"dog\").\nIn_Chinese_Calendar(\"pig\").\n.decl Answer()\nAnswer() :- In_Chinese_Calendar(animal), Is_Chordata(animal).\n.output Answer"]}
{"id": 165, "answer": true, "completion": ".decl Appears_in(Event:symbol, Testament:symbol)\nAppears_in(\"Daniel thrown into the lion's den\", \"Old Testament\").\n.decl Answer()\nAnswer() :- Appears_in(\"Daniel thrown into the lion's den\", \"New Testament\").\n.output Answer", "completions": [".decl Appears_in(Event:symbol, Testament:symbol)\nAppears_in(\"Daniel thrown into the lion's den\", \"Old Testament\").\n.decl Answer()\nAnswer() :- Appears_in(\"Daniel thrown into the lion's den\", \"New Testament\").\n.output Answer"]}
{"id": 166, "answer": true, "completion": ".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"elephant pregnancy\", 22).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"4 solar eclipses\", 2020).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"elephant pregnancy\", n_months), Happens_in_year(\"4 solar eclipses\", year), year + 1 <= 2020 + n_months/12.\n.output Answer", "completions": [".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"elephant pregnancy\", 22).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"4 solar eclipses\", 2020).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"elephant pregnancy\", n_months), Happens_in_year(\"4 solar eclipses\", year), year + 1 <= 2020 + n_months/12.\n.output Answer"]}
{"id": 167, "answer": true, "completion": ".decl Has_meaning_in_language(Word:symbol, Language:symbol)\nHas_meaning_in_language(\"swastika\", \"Sanskrit\").\n.decl Answer()\nAnswer() :- Has_meaning_in_language(\"swastika\", \"Sanskrit\").\n.output Answer", "completions": [".decl Has_meaning_in_language(Word:symbol, Language:symbol)\nHas_meaning_in_language(\"swastika\", \"Sanskrit\").\n.decl Answer()\nAnswer() :- Has_meaning_in_language(\"swastika\", \"Sanskrit\").\n.output Answer"]}
{"id": 168, "answer": true, "completion": ".decl Won_war(Company_A:symbol, Company_B:symbol)\nWon_war(\"Sony\", \"Sega\").\n.decl Answer()\nAnswer() :- Won_war(\"Sony\", \"Sega\").\n.output Answer", "completions": [".decl Won_war(Company_A:symbol, Company_B:symbol)\nWon_war(\"Sony\", \"Sega\").\n.decl Answer()\nAnswer() :- Won_war(\"Sony\", \"Sega\").\n.output Answer"]}
{"id": 169, "answer": true, "completion": ".decl Teaches(Professor:symbol, Subject:symbol)\nTeaches(\"ethics professor\", \"ethics\").\n.decl Is_about(Subject:symbol, Topic:symbol)\nIs_about(\"ethics\", \"moral philosophy\").\nIs_about(\"class on Cezanne\", \"art\").\n.decl Answer()\nAnswer() :- Teaches(\"ethics professor\", subject), Is_about(subject, topic), Is_about(\"class on Cezanne\", topic).\n.output Answer", "completions": [".decl Teaches(Professor:symbol, Subject:symbol)\nTeaches(\"ethics professor\", \"ethics\").\n.decl Is_about(Subject:symbol, Topic:symbol)\nIs_about(\"ethics\", \"moral philosophy\").\nIs_about(\"class on Cezanne\", \"art\").\n.decl Answer()\nAnswer() :- Teaches(\"ethics professor\", subject), Is_about(subject, topic), Is_about(\"class on Cezanne\", topic).\n.output Answer"]}
{"id": 170, "answer": true, "completion": ".decl Is_animal(Animal:symbol)\nIs_animal(\"dolphin\").\n\n.decl Can_write(Being:symbol)\nCan_write(\"human\").\n\n.decl Answer()\nAnswer() :- Is_animal(\"dolphin\"), Can_write(\"dolphin\").\nAnswer() :- !Can_write(\"dolphin\").\n.output Answer", "completions": [".decl Is_animal(Animal:symbol)\nIs_animal(\"dolphin\").\n\n.decl Can_write(Being:symbol)\nCan_write(\"human\").\n\n.decl Answer()\nAnswer() :- Is_animal(\"dolphin\"), Can_write(\"dolphin\").\nAnswer() :- !Can_write(\"dolphin\").\n.output Answer"]}
{"id": 171, "answer": true, "completion": ".decl Discovered_in_year(Explorer:symbol, Object:symbol, Year:float)\nDiscovered_in_year(\"Columbus\", \"America\", 1492).\n.decl Native_to(Object:symbol, Region:symbol)\nNative_to(\"Durian trees\", \"Southeast Asia\").\n.decl In_region(Region_A:symbol, Region_B:symbol)\nIn_region(\"America\", \"North America\").\nIn_region(\"America\", \"South America\").\nIn_region(\"Southeast Asia\", \"Asia\").\n.decl Answer()\nAnswer() :- Discovered_in_year(\"Columbus\", region, 1492), Native_to(\"Durian trees\", region).\nAnswer() :- Discovered_in_year(\"Columbus\", region1, 1492), In_region(region1, region2), Native_to(\"Durian trees\", region2).\n.output Answer", "completions": [".decl Discovered_in_year(Explorer:symbol, Object:symbol, Year:float)\nDiscovered_in_year(\"Columbus\", \"America\", 1492).\n.decl Native_to(Object:symbol, Region:symbol)\nNative_to(\"Durian trees\", \"Southeast Asia\").\n.decl In_region(Region_A:symbol, Region_B:symbol)\nIn_region(\"America\", \"North America\").\nIn_region(\"America\", \"South America\").\nIn_region(\"Southeast Asia\", \"Asia\").\n.decl Answer()\nAnswer() :- Discovered_in_year(\"Columbus\", region, 1492), Native_to(\"Durian trees\", region).\nAnswer() :- Discovered_in_year(\"Columbus\", region1, 1492), In_region(region1, region2), Native_to(\"Durian trees\", region2).\n.output Answer"]}
{"id": 172, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Chrysler\", 5000).\nHas_size(\"laptop bag\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"Chrysler\", size1), Has_size(\"laptop bag\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Chrysler\", 5000).\nHas_size(\"laptop bag\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"Chrysler\", size1), Has_size(\"laptop bag\", size2), size1 <= size2.\n.output Answer"]}
{"id": 173, "answer": true, "completion": ".decl Astronaut(Name:symbol, Status:symbol)\nAstronaut(\"Yuri Gagarin\", \"survived\").\nAstronaut(\"Neil Armstrong\", \"survived\").\nAstronaut(\"Vladimir Komarov\", \"died\").\n.decl Answer()\nAnswer() :- Astronaut(name, \"survived\").\nAnswer() :- !Astronaut(name, \"died\").\n.output Answer", "completions": [".decl Astronaut(Name:symbol, Status:symbol)\nAstronaut(\"Yuri Gagarin\", \"survived\").\nAstronaut(\"Neil Armstrong\", \"survived\").\nAstronaut(\"Vladimir Komarov\", \"died\").\n.decl Answer()\nAnswer() :- Astronaut(name, \"survived\").\nAnswer() :- !Astronaut(name, \"died\").\n.output Answer"]}
{"id": 174, "answer": false, "completion": ".decl Has_term_length(Position:symbol, Term_length:float)\nHas_term_length(\"Supreme Court Justice\", -1).\nHas_term_length(\"Senator\", 6).\n.decl Answer()\nAnswer() :- Has_term_length(\"Supreme Court Justice\", term_length1), Has_term_length(\"Senator\", term_length2), term_length1 > term_length2.\nAnswer() :- Has_term_length(\"Supreme Court Justice\", -1).\n.output Answer", "completions": [".decl Has_term_length(Position:symbol, Term_length:float)\nHas_term_length(\"Supreme Court Justice\", -1).\nHas_term_length(\"Senator\", 6).\n.decl Answer()\nAnswer() :- Has_term_length(\"Supreme Court Justice\", term_length1), Has_term_length(\"Senator\", term_length2), term_length1 > term_length2.\nAnswer() :- Has_term_length(\"Supreme Court Justice\", -1).\n.output Answer"]}
{"id": 175, "answer": true, "completion": ".decl Placed_in_circle(Person:symbol, Circle:float)\nPlaced_in_circle(\"Dante\", 1).\nPlaced_in_circle(\"Nostradamus\", 3).\n.decl Circle_of_hell(Circle:float, Sin:symbol)\nCircle_of_hell(1, \"Limbo\").\nCircle_of_hell(2, \"Lust\").\nCircle_of_hell(3, \"Gluttony\").\nCircle_of_hell(4, \"Greed\").\nCircle_of_hell(5, \"Anger\").\nCircle_of_hell(6, \"Heresy\").\nCircle_of_hell(7, \"Violence\").\nCircle_of_hell(8, \"Fraud\").\nCircle_of_hell(9, \"Treachery\").\n.decl Answer()\nAnswer() :- Placed_in_circle(\"Nostradamus\", circle), Circle_of_hell(circle, \"Gluttony\").\n.output Answer", "completions": [".decl Placed_in_circle(Person:symbol, Circle:float)\nPlaced_in_circle(\"Dante\", 1).\nPlaced_in_circle(\"Nostradamus\", 3).\n.decl Circle_of_hell(Circle:float, Sin:symbol)\nCircle_of_hell(1, \"Limbo\").\nCircle_of_hell(2, \"Lust\").\nCircle_of_hell(3, \"Gluttony\").\nCircle_of_hell(4, \"Greed\").\nCircle_of_hell(5, \"Anger\").\nCircle_of_hell(6, \"Heresy\").\nCircle_of_hell(7, \"Violence\").\nCircle_of_hell(8, \"Fraud\").\nCircle_of_hell(9, \"Treachery\").\n.decl Answer()\nAnswer() :- Placed_in_circle(\"Nostradamus\", circle), Circle_of_hell(circle, \"Gluttony\").\n.output Answer"]}
{"id": 176, "answer": true, "completion": ".decl Associated_with_Nazis(Entity:symbol)\nAssociated_with_Nazis(\"Mercedes-Benz\").\n.decl Answer()\nAnswer() :- Associated_with_Nazis(\"Mercedes-Benz\").\n.output Answer", "completions": [".decl Associated_with_Nazis(Entity:symbol)\nAssociated_with_Nazis(\"Mercedes-Benz\").\n.decl Answer()\nAnswer() :- Associated_with_Nazis(\"Mercedes-Benz\").\n.output Answer"]}
{"id": 177, "answer": false, "completion": ".decl Has_size(Resort:symbol, Size:float)\nHas_size(\"Disneyland Paris\", 4800).\nHas_size(\"Walt Disney World\", 27000).\nHas_size(\"Disneyland Resort\", 500).\nHas_size(\"Tokyo Disney Resort\", 494).\nHas_size(\"Hong Kong Disneyland Resort\", 310).\nHas_size(\"Shanghai Disney Resort\", 963).\n.decl Answer()\nAnswer() :- Has_size(\"Disneyland Paris\", size1), !Has_size(resort, size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Resort:symbol, Size:float)\nHas_size(\"Disneyland Paris\", 4800).\nHas_size(\"Walt Disney World\", 27000).\nHas_size(\"Disneyland Resort\", 500).\nHas_size(\"Tokyo Disney Resort\", 494).\nHas_size(\"Hong Kong Disneyland Resort\", 310).\nHas_size(\"Shanghai Disney Resort\", 963).\n.decl Answer()\nAnswer() :- Has_size(\"Disneyland Paris\", size1), !Has_size(resort, size2), size1 < size2.\n.output Answer"]}
{"id": 178, "answer": true, "completion": ".decl Has_moustache(Person:symbol)\nHas_moustache(\"Rockette\").\n.decl Looks_odd_with_moustache(Person:symbol)\nLooks_odd_with_moustache(\"Rockette\").\n.decl Answer()\nAnswer() :- Has_moustache(\"Rockette\"), Looks_odd_with_moustache(\"Rockette\").\n.output Answer", "completions": [".decl Has_moustache(Person:symbol)\nHas_moustache(\"Rockette\").\n.decl Looks_odd_with_moustache(Person:symbol)\nLooks_odd_with_moustache(\"Rockette\").\n.decl Answer()\nAnswer() :- Has_moustache(\"Rockette\"), Looks_odd_with_moustache(\"Rockette\").\n.output Answer"]}
{"id": 179, "answer": false, "completion": ".decl Can_play_tennis(Animal:symbol, Equipment:symbol)\nCan_play_tennis(\"human\", \"tennis racket\").\n.decl Is_sea_turtle(Animal:symbol)\nIs_sea_turtle(\"sea turtle\").\n.decl Answer()\nAnswer() :- Can_play_tennis(animal, \"tennis racket\"), Is_sea_turtle(animal).\n.output Answer", "completions": [".decl Can_play_tennis(Animal:symbol, Equipment:symbol)\nCan_play_tennis(\"human\", \"tennis racket\").\n.decl Is_sea_turtle(Animal:symbol)\nIs_sea_turtle(\"sea turtle\").\n.decl Answer()\nAnswer() :- Can_play_tennis(animal, \"tennis racket\"), Is_sea_turtle(animal).\n.output Answer"]}
{"id": 180, "answer": false, "completion": ".decl Has_idea(Person:symbol, Idea:symbol)\nHas_idea(\"Donald Trump\", \"New York Harbor\").\n.decl Answer()\nAnswer() :- Has_idea(\"Donald Trump\", \"New York Harbor\").\n.output Answer", "completions": [".decl Has_idea(Person:symbol, Idea:symbol)\nHas_idea(\"Donald Trump\", \"New York Harbor\").\n.decl Answer()\nAnswer() :- Has_idea(\"Donald Trump\", \"New York Harbor\").\n.output Answer"]}
{"id": 181, "answer": true, "completion": ".decl Used_for_payment(Payment_method:symbol, Transaction_type:symbol)\nUsed_for_payment(\"paypal\", \"online shopping\").\nUsed_for_payment(\"paypal\", \"peer-to-peer transfers\").\nUsed_for_payment(\"cash\", \"drug deals\").\nUsed_for_payment(\"cryptocurrency\", \"drug deals\").\n.decl Answer()\nAnswer() :- !Used_for_payment(\"paypal\", \"drug deals\").\n.output Answer", "completions": [".decl Used_for_payment(Payment_method:symbol, Transaction_type:symbol)\nUsed_for_payment(\"paypal\", \"online shopping\").\nUsed_for_payment(\"paypal\", \"peer-to-peer transfers\").\nUsed_for_payment(\"cash\", \"drug deals\").\nUsed_for_payment(\"cryptocurrency\", \"drug deals\").\n.decl Answer()\nAnswer() :- !Used_for_payment(\"paypal\", \"drug deals\").\n.output Answer"]}
{"id": 182, "answer": true, "completion": ".decl Is_safe_to_eat(Food:symbol, Safe:float)\nIs_safe_to_eat(\"kidney\", 1).\n.decl Answer(Safe:float)\nAnswer(safe) :- Is_safe_to_eat(\"kidney\", safe).\n.output Answer", "completions": [".decl Is_safe_to_eat(Food:symbol, Safe:float)\nIs_safe_to_eat(\"kidney\", 1).\n.decl Answer(Safe:float)\nAnswer(safe) :- Is_safe_to_eat(\"kidney\", safe).\n.output Answer"]}
{"id": 183, "answer": true, "completion": ".decl Tastes_best_when_cooked(Object:symbol, Cooking_time:symbol)\nTastes_best_when_cooked(\"shrimp\", \"short time\").\n.decl Answer()\nAnswer() :- Tastes_best_when_cooked(\"shrimp\", \"long time\").\n.output Answer", "completions": [".decl Tastes_best_when_cooked(Object:symbol, Cooking_time:symbol)\nTastes_best_when_cooked(\"shrimp\", \"short time\").\n.decl Answer()\nAnswer() :- Tastes_best_when_cooked(\"shrimp\", \"long time\").\n.output Answer"]}
{"id": 184, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"African elephant\", 12000).\nHas_weight(\"Hulk\", 635).\n.decl Can_carry(Object:symbol, Weight_capacity:float)\nCan_carry(\"African elephant\", 2000).\n.decl Answer()\nAnswer() :- Has_weight(\"Hulk\", weight1), Can_carry(\"African elephant\", weight_capacity), weight1 > weight_capacity.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"African elephant\", 12000).\nHas_weight(\"Hulk\", 635).\n.decl Can_carry(Object:symbol, Weight_capacity:float)\nCan_carry(\"African elephant\", 2000).\n.decl Answer()\nAnswer() :- Has_weight(\"Hulk\", weight1), Can_carry(\"African elephant\", weight_capacity), weight1 > weight_capacity.\n.output Answer"]}
{"id": 185, "answer": false, "completion": ".decl Graduated_from(Person:symbol, University:symbol)\nGraduated_from(\"Rupert Murdoch\", \"Oxford University\").\n.decl Founded_in(University:symbol, Year:float)\nFounded_in(\"Oxford University\", 1096).\n.decl Established_in(Country:symbol, Year:float)\nEstablished_in(\"USA\", 1776).\n.decl Answer()\nAnswer() :- Graduated_from(\"Rupert Murdoch\", university), Founded_in(university, year1), Established_in(\"USA\", year2), year1 < year2.\n.output Answer", "completions": [".decl Graduated_from(Person:symbol, University:symbol)\nGraduated_from(\"Rupert Murdoch\", \"Oxford University\").\n.decl Founded_in(University:symbol, Year:float)\nFounded_in(\"Oxford University\", 1096).\n.decl Established_in(Country:symbol, Year:float)\nEstablished_in(\"USA\", 1776).\n.decl Answer()\nAnswer() :- Graduated_from(\"Rupert Murdoch\", university), Founded_in(university, year1), Established_in(\"USA\", year2), year1 < year2.\n.output Answer"]}
{"id": 186, "answer": false, "completion": ".decl Named_after(Object:symbol, Origin:symbol)\nNamed_after(\"Saturn\", \"Roman mythology\").\nNamed_after(\"Zeus\", \"Greek mythology\").\n.decl Is_king_of_gods(God:symbol, Mythology:symbol)\nIs_king_of_gods(\"Zeus\", \"Greek mythology\").\nIs_king_of_gods(\"Saturn\", \"Roman mythology\").\n.decl Answer()\nAnswer() :- Named_after(\"Saturn\", \"Greek mythology\"), Is_king_of_gods(\"Saturn\", \"Greek mythology\").\nAnswer() :- Named_after(\"Saturn\", mythology1), Is_king_of_gods(god1, \"Greek mythology\"), Named_after(god1, mythology1).\n.output Answer", "completions": [".decl Named_after(Object:symbol, Origin:symbol)\nNamed_after(\"Saturn\", \"Roman mythology\").\nNamed_after(\"Zeus\", \"Greek mythology\").\n.decl Is_king_of_gods(God:symbol, Mythology:symbol)\nIs_king_of_gods(\"Zeus\", \"Greek mythology\").\nIs_king_of_gods(\"Saturn\", \"Roman mythology\").\n.decl Answer()\nAnswer() :- Named_after(\"Saturn\", \"Greek mythology\"), Is_king_of_gods(\"Saturn\", \"Greek mythology\").\nAnswer() :- Named_after(\"Saturn\", mythology1), Is_king_of_gods(god1, \"Greek mythology\"), Named_after(god1, mythology1).\n.output Answer"]}
{"id": 187, "answer": true, "completion": ".decl Occurs_in_season(Event:symbol, Season:symbol)\nOccurs_in_season(\"American Independence Day\", \"summer\").\n.decl Answer()\nAnswer() :- Occurs_in_season(\"American Independence Day\", \"autumn\").\n.output Answer", "completions": [".decl Occurs_in_season(Event:symbol, Season:symbol)\nOccurs_in_season(\"American Independence Day\", \"summer\").\n.decl Answer()\nAnswer() :- Occurs_in_season(\"American Independence Day\", \"autumn\").\n.output Answer"]}
{"id": 188, "answer": false, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"Albany, Georgia\", 77434).\nHas_population(\"Albany, New York\", 96460).\nHas_population(\"Albany, California\", 19839).\nHas_population(\"Albany, Oregon\", 55245).\n.decl Most_populous_US_Albany(City:symbol)\nMost_populous_US_Albany(\"Albany, Georgia\").\n.decl Answer()\nAnswer() :- Most_populous_US_Albany(\"Albany, Georgia\").\nAnswer() :- Most_populous_US_Albany(city1), Has_population(city1, population1), Has_population(\"Albany, Georgia\", population2), population1 < population2.\n.output Answer", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"Albany, Georgia\", 77434).\nHas_population(\"Albany, New York\", 96460).\nHas_population(\"Albany, California\", 19839).\nHas_population(\"Albany, Oregon\", 55245).\n.decl Most_populous_US_Albany(City:symbol)\nMost_populous_US_Albany(\"Albany, Georgia\").\n.decl Answer()\nAnswer() :- Most_populous_US_Albany(\"Albany, Georgia\").\nAnswer() :- Most_populous_US_Albany(city1), Has_population(city1, population1), Has_population(\"Albany, Georgia\", population2), population1 < population2.\n.output Answer"]}
{"id": 189, "answer": true, "completion": ".decl Founders(Company:symbol, Founder:symbol)\nFounders(\"Skype\", \"Niklas Zennström\").\nFounders(\"Skype\", \"Janus Friis\").\n.decl From_continent(Person:symbol, Continent:symbol)\nFrom_continent(\"Niklas Zennström\", \"Europe\").\nFrom_continent(\"Janus Friis\", \"Europe\").\n.decl Answer()\nAnswer() :- Founders(\"Skype\", founder), From_continent(founder, \"Asia\").\n.output Answer", "completions": [".decl Founders(Company:symbol, Founder:symbol)\nFounders(\"Skype\", \"Niklas Zennström\").\nFounders(\"Skype\", \"Janus Friis\").\n.decl From_continent(Person:symbol, Continent:symbol)\nFrom_continent(\"Niklas Zennström\", \"Europe\").\nFrom_continent(\"Janus Friis\", \"Europe\").\n.decl Answer()\nAnswer() :- Founders(\"Skype\", founder), From_continent(founder, \"Asia\").\n.output Answer"]}
{"id": 190, "answer": false, "completion": ".decl Has_n_days(Period:symbol, N_days:float)\nHas_n_days(\"year\", 365).\n.decl Has_n_pages(Book:symbol, N_pages:float)\nHas_n_pages(\"Bible\", 1200).\n.decl Reads_n_times_in_period(Book:symbol, N_times:float, Period:symbol)\nReads_n_times_in_period(\"Bible\", 15, \"year\").\n.decl Days_in_week(Day:symbol, N_days:float)\nDays_in_week(\"Wednesday\", 1).\n.decl Answer()\nAnswer() :- Has_n_days(\"year\", n_days_year), Days_in_week(\"Wednesday\", n_days_week), Reads_n_times_in_period(\"Bible\", n_times, \"year\"), Has_n_pages(\"Bible\", n_pages), n_days_year / 7 * n_days_week >= n_times * n_pages.\n.output Answer", "completions": [".decl Has_n_days(Period:symbol, N_days:float)\nHas_n_days(\"year\", 365).\n.decl Has_n_pages(Book:symbol, N_pages:float)\nHas_n_pages(\"Bible\", 1200).\n.decl Reads_n_times_in_period(Book:symbol, N_times:float, Period:symbol)\nReads_n_times_in_period(\"Bible\", 15, \"year\").\n.decl Days_in_week(Day:symbol, N_days:float)\nDays_in_week(\"Wednesday\", 1).\n.decl Answer()\nAnswer() :- Has_n_days(\"year\", n_days_year), Days_in_week(\"Wednesday\", n_days_week), Reads_n_times_in_period(\"Bible\", n_times, \"year\"), Has_n_pages(\"Bible\", n_pages), n_days_year / 7 * n_days_week >= n_times * n_pages.\n.output Answer"]}
{"id": 191, "answer": true, "completion": ".decl Retired(Person:symbol, Year:float)\nRetired(\"Eugene Allen\", 1986).\n.decl War_Ended(War:symbol, Year:float)\nWar_Ended(\"Centuries-old war\", 1986).\n.decl Answer()\nAnswer() :- Retired(\"Eugene Allen\", year1), War_Ended(\"Centuries-old war\", year2), year1 = year2.\n.output Answer", "completions": [".decl Retired(Person:symbol, Year:float)\nRetired(\"Eugene Allen\", 1986).\n.decl War_Ended(War:symbol, Year:float)\nWar_Ended(\"Centuries-old war\", 1986).\n.decl Answer()\nAnswer() :- Retired(\"Eugene Allen\", year1), War_Ended(\"Centuries-old war\", year2), year1 = year2.\n.output Answer"]}
{"id": 192, "answer": false, "completion": ".decl Wrote(Person:symbol, Work:symbol)\nWrote(\"Charles Dickens\", \"A Christmas Carol\").\n.decl Observes(Person:symbol, Event:symbol)\nObserves(\"Charles Dickens\", \"Ramadan\").\n.decl Answer()\nAnswer() :- Wrote(\"Charles Dickens\", \"A Christmas Carol\"), Observes(\"Charles Dickens\", \"Ramadan\").\n.output Answer", "completions": [".decl Wrote(Person:symbol, Work:symbol)\nWrote(\"Charles Dickens\", \"A Christmas Carol\").\n.decl Observes(Person:symbol, Event:symbol)\nObserves(\"Charles Dickens\", \"Ramadan\").\n.decl Answer()\nAnswer() :- Wrote(\"Charles Dickens\", \"A Christmas Carol\"), Observes(\"Charles Dickens\", \"Ramadan\").\n.output Answer"]}
{"id": 193, "answer": true, "completion": ".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"Common Era\", 2022).\n.decl Has_lifespan(Object:symbol, Lifespan:float)\nHas_lifespan(\"some trees\", 5000).\n.decl Answer()\nAnswer() :- Lasts_n_years(\"Common Era\", n_years1), Has_lifespan(\"some trees\", n_years2), n_years1 < n_years2.\n.output Answer", "completions": [".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"Common Era\", 2022).\n.decl Has_lifespan(Object:symbol, Lifespan:float)\nHas_lifespan(\"some trees\", 5000).\n.decl Answer()\nAnswer() :- Lasts_n_years(\"Common Era\", n_years1), Has_lifespan(\"some trees\", n_years2), n_years1 < n_years2.\n.output Answer"]}
{"id": 194, "answer": false, "completion": ".decl Is_secretary(Person:symbol, Job:symbol)\nIs_secretary(\"Tange Sazen\", \"samurai\").\n.decl Ideal_for_job(Person:symbol, Job:symbol)\nIdeal_for_job(\"secretary\", \"organizational skills\").\nIdeal_for_job(\"secretary\", \"communication skills\").\nIdeal_for_job(\"secretary\", \"time management\").\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Tange Sazen\", \"swordsmanship\").\nHas_skill(\"Tange Sazen\", \"combat\").\n.decl Answer()\nAnswer() :- Is_secretary(\"Tange Sazen\", \"samurai\"), Ideal_for_job(\"secretary\", skill), !Has_skill(\"Tange Sazen\", skill).\n.output Answer", "completions": [".decl Is_secretary(Person:symbol, Job:symbol)\nIs_secretary(\"Tange Sazen\", \"samurai\").\n.decl Ideal_for_job(Person:symbol, Job:symbol)\nIdeal_for_job(\"secretary\", \"organizational skills\").\nIdeal_for_job(\"secretary\", \"communication skills\").\nIdeal_for_job(\"secretary\", \"time management\").\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Tange Sazen\", \"swordsmanship\").\nHas_skill(\"Tange Sazen\", \"combat\").\n.decl Answer()\nAnswer() :- Is_secretary(\"Tange Sazen\", \"samurai\"), Ideal_for_job(\"secretary\", skill), !Has_skill(\"Tange Sazen\", skill).\n.output Answer"]}
{"id": 195, "answer": true, "completion": ".decl Is_good_for(Object:symbol, Condition:symbol)\nIs_good_for(\"Brussels sprout\", \"adrenal fatigue\").\n.decl Answer()\nAnswer() :- Is_good_for(\"Brussels sprout\", \"adrenal fatigue\").\n.output Answer", "completions": [".decl Is_good_for(Object:symbol, Condition:symbol)\nIs_good_for(\"Brussels sprout\", \"adrenal fatigue\").\n.decl Answer()\nAnswer() :- Is_good_for(\"Brussels sprout\", \"adrenal fatigue\").\n.output Answer"]}
{"id": 196, "answer": true, "completion": ".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Adam Sandler\", \"Hanukkah\").\nCelebrates(\"Adam Sandler\", \"Thanksgiving\").\n.decl Answer()\nAnswer() :- Celebrates(\"Adam Sandler\", \"Easter\").\nAnswer() :- !Celebrates(\"Adam Sandler\", \"Easter\").\n.output Answer", "completions": [".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Adam Sandler\", \"Hanukkah\").\nCelebrates(\"Adam Sandler\", \"Thanksgiving\").\n.decl Answer()\nAnswer() :- Celebrates(\"Adam Sandler\", \"Easter\").\nAnswer() :- !Celebrates(\"Adam Sandler\", \"Easter\").\n.output Answer"]}
{"id": 197, "answer": true, "completion": ".decl Is_leap_year(Year:float)\nIs_leap_year(year) :- year % 4 = 0, (year % 100 != 0; year % 400 = 0).\n\n.decl Days_in_month(Month:symbol, Year:float, Days:float)\nDays_in_month(\"February\", year, 28) :- !Is_leap_year(year).\nDays_in_month(\"February\", year, 29) :- Is_leap_year(year).\nDays_in_month(\"January\", _, 31).\nDays_in_month(\"March\", _, 31).\n\n.decl Days_between_months(Month1:symbol, Month2:symbol, Year:float, Days:float)\nDays_between_months(\"January\", \"March\", year, days) :- Days_in_month(\"January\", year, days1), Days_in_month(\"February\", year, days2), days = days1 + days2.\n\n.decl Same_day_of_week(Month1:symbol, Month2:symbol, Year:float)\nSame_day_of_week(month1, month2, year) :- Days_between_months(month1, month2, year, days), days % 7 = 0.\n\n.decl Answer()\nAnswer() :- Same_day_of_week(\"February\", \"March\", year), Is_leap_year(year).\n.output Answer", "completions": [".decl Is_leap_year(Year:float)\nIs_leap_year(year) :- year % 4 = 0, (year % 100 != 0; year % 400 = 0).\n\n.decl Days_in_month(Month:symbol, Year:float, Days:float)\nDays_in_month(\"February\", year, 28) :- !Is_leap_year(year).\nDays_in_month(\"February\", year, 29) :- Is_leap_year(year).\nDays_in_month(\"January\", _, 31).\nDays_in_month(\"March\", _, 31).\n\n.decl Days_between_months(Month1:symbol, Month2:symbol, Year:float, Days:float)\nDays_between_months(\"January\", \"March\", year, days) :- Days_in_month(\"January\", year, days1), Days_in_month(\"February\", year, days2), days = days1 + days2.\n\n.decl Same_day_of_week(Month1:symbol, Month2:symbol, Year:float)\nSame_day_of_week(month1, month2, year) :- Days_between_months(month1, month2, year, days), days % 7 = 0.\n\n.decl Answer()\nAnswer() :- Same_day_of_week(\"February\", \"March\", year), Is_leap_year(year).\n.output Answer"]}
{"id": 198, "answer": true, "completion": ".decl Is_divine_dance(Dance:symbol, Deity:symbol)\nIs_divine_dance(\"Shiva's divine dance\", \"Shiva\").\n.decl Is_ancient_fitness_pose(Pose:symbol)\nIs_ancient_fitness_pose(\"yoga\").\n.decl Answer()\nAnswer() :- Is_divine_dance(\"Shiva's divine dance\", \"Shiva\"), Is_ancient_fitness_pose(\"Shiva's divine dance\").\n.output Answer", "completions": [".decl Is_divine_dance(Dance:symbol, Deity:symbol)\nIs_divine_dance(\"Shiva's divine dance\", \"Shiva\").\n.decl Is_ancient_fitness_pose(Pose:symbol)\nIs_ancient_fitness_pose(\"yoga\").\n.decl Answer()\nAnswer() :- Is_divine_dance(\"Shiva's divine dance\", \"Shiva\"), Is_ancient_fitness_pose(\"Shiva's divine dance\").\n.output Answer"]}
{"id": 199, "answer": false, "completion": ".decl In_possession(Empire:symbol, Territory:symbol, Start_year:float, End_year:float)\nIn_possession(\"Islamic Empire\", \"Land of Israel\", 1516, 1917).\n.decl In_century(Year:float, Century:float)\nIn_century(year, century) :- year >= (century - 1) * 100, year < century * 100.\n.decl Answer()\nAnswer() :- In_possession(\"Islamic Empire\", \"Land of Israel\", start_year, end_year), In_century(start_year, 16), In_century(end_year, 16).\n.output Answer", "completions": [".decl In_possession(Empire:symbol, Territory:symbol, Start_year:float, End_year:float)\nIn_possession(\"Islamic Empire\", \"Land of Israel\", 1516, 1917).\n.decl In_century(Year:float, Century:float)\nIn_century(year, century) :- year >= (century - 1) * 100, year < century * 100.\n.decl Answer()\nAnswer() :- In_possession(\"Islamic Empire\", \"Land of Israel\", start_year, end_year), In_century(start_year, 16), In_century(end_year, 16).\n.output Answer"]}
{"id": 200, "answer": true, "completion": ".decl Engages_in_fair_trade(Role:symbol, Trade_type:symbol)\nEngages_in_fair_trade(\"Medieval English lord\", \"unfair trade\").\nEngages_in_fair_trade(\"peasant\", \"fair trade\").\n.decl Answer()\nAnswer() :- Engages_in_fair_trade(\"Medieval English lord\", \"fair trade\").\n.output Answer", "completions": [".decl Engages_in_fair_trade(Role:symbol, Trade_type:symbol)\nEngages_in_fair_trade(\"Medieval English lord\", \"unfair trade\").\nEngages_in_fair_trade(\"peasant\", \"fair trade\").\n.decl Answer()\nAnswer() :- Engages_in_fair_trade(\"Medieval English lord\", \"fair trade\").\n.output Answer"]}
{"id": 201, "answer": true, "completion": ".decl Helps(Subject:symbol, Understanding:symbol)\nHelps(\"paleography\", \"ancient texts\").\nHelps(\"ancient texts\", \"mythology\").\nHelps(\"mythology\", \"Cthulhu\").\n.decl Answer()\nAnswer() :- Helps(\"paleography\", understanding1), Helps(understanding1, understanding2), Helps(understanding2, \"Cthulhu\").\n.output Answer", "completions": [".decl Helps(Subject:symbol, Understanding:symbol)\nHelps(\"paleography\", \"ancient texts\").\nHelps(\"ancient texts\", \"mythology\").\nHelps(\"mythology\", \"Cthulhu\").\n.decl Answer()\nAnswer() :- Helps(\"paleography\", understanding1), Helps(understanding1, understanding2), Helps(understanding2, \"Cthulhu\").\n.output Answer"]}
{"id": 202, "answer": false, "completion": ".decl Has_killed_n_people(Cause:symbol, N_people:float)\nHas_killed_n_people(\"jokes\", 10).\nHas_killed_n_people(\"rats\", 1000000).\n.decl Answer()\nAnswer() :- Has_killed_n_people(\"jokes\", n_people1), Has_killed_n_people(\"rats\", n_people2), n_people1 > n_people2.\n.output Answer", "completions": [".decl Has_killed_n_people(Cause:symbol, N_people:float)\nHas_killed_n_people(\"jokes\", 10).\nHas_killed_n_people(\"rats\", 1000000).\n.decl Answer()\nAnswer() :- Has_killed_n_people(\"jokes\", n_people1), Has_killed_n_people(\"rats\", n_people2), n_people1 > n_people2.\n.output Answer"]}
{"id": 203, "answer": true, "completion": ".decl Suicide_Method(Method:symbol, Reliability:symbol)\nSuicide_Method(\"slitting wrists\", \"unreliable\").\n.decl Answer()\nAnswer() :- Suicide_Method(\"slitting wrists\", \"unreliable\").\n.output Answer", "completions": [".decl Suicide_Method(Method:symbol, Reliability:symbol)\nSuicide_Method(\"slitting wrists\", \"unreliable\").\n.decl Answer()\nAnswer() :- Suicide_Method(\"slitting wrists\", \"unreliable\").\n.output Answer"]}
{"id": 204, "answer": true, "completion": ".decl Attributed_to(Event:symbol, Cause:symbol)\nAttributed_to(\"rise of agriculture\", \"rivers\").\n.decl Answer()\nAnswer() :- Attributed_to(\"rise of agriculture\", \"rivers\").\n.output Answer", "completions": [".decl Attributed_to(Event:symbol, Cause:symbol)\nAttributed_to(\"rise of agriculture\", \"rivers\").\n.decl Answer()\nAnswer() :- Attributed_to(\"rise of agriculture\", \"rivers\").\n.output Answer"]}
{"id": 205, "answer": true, "completion": ".decl Sunbathes_frequently(Group:symbol)\nSunbathes_frequently(\"Eskimos\").\n.decl Lives_in(Group:symbol, Location:symbol)\nLives_in(\"Eskimos\", \"Arctic\").\n.decl Has_sunlight(Location:symbol, Sunlight:float)\nHas_sunlight(\"Arctic\", 0.5).\n.decl Answer()\nAnswer() :- Sunbathes_frequently(\"Eskimos\"), Lives_in(\"Eskimos\", location), Has_sunlight(location, sunlight), sunlight >= 0.5.\n.output Answer", "completions": [".decl Sunbathes_frequently(Group:symbol)\nSunbathes_frequently(\"Eskimos\").\n.decl Lives_in(Group:symbol, Location:symbol)\nLives_in(\"Eskimos\", \"Arctic\").\n.decl Has_sunlight(Location:symbol, Sunlight:float)\nHas_sunlight(\"Arctic\", 0.5).\n.decl Answer()\nAnswer() :- Sunbathes_frequently(\"Eskimos\"), Lives_in(\"Eskimos\", location), Has_sunlight(location, sunlight), sunlight >= 0.5.\n.output Answer"]}
{"id": 206, "answer": true, "completion": ".decl Works_shift(Telescope:symbol, Shift:symbol)\nWorks_shift(\"Goldstone Deep Space Communications Complex\", \"night\").\n.decl Answer()\nAnswer() :- Works_shift(\"Goldstone Deep Space Communications Complex\", \"night\").\n.output Answer", "completions": [".decl Works_shift(Telescope:symbol, Shift:symbol)\nWorks_shift(\"Goldstone Deep Space Communications Complex\", \"night\").\n.decl Answer()\nAnswer() :- Works_shift(\"Goldstone Deep Space Communications Complex\", \"night\").\n.output Answer"]}
{"id": 207, "answer": true, "completion": ".decl Has_episodes(Soap:symbol, Episodes:float)\nHas_episodes(\"Days of Our Lives\", 14000).\nHas_episodes(\"General Hospital\", 15000).\nHas_episodes(\"The Young and the Restless\", 12000).\nHas_episodes(\"The Bold and the Beautiful\", 8000).\n\n.decl Has_cost_per_episode(Soap:symbol, Cost:float)\nHas_cost_per_episode(\"Days of Our Lives\", 1000).\n\n.decl Answer()\nAnswer() :- Has_cost_per_episode(\"Days of Our Lives\", cost1), Has_episodes(other_soap, episodes), Has_cost_per_episode(other_soap, cost2), cost1 < cost2.\n\n.output Answer", "completions": [".decl Has_episodes(Soap:symbol, Episodes:float)\nHas_episodes(\"Days of Our Lives\", 14000).\nHas_episodes(\"General Hospital\", 15000).\nHas_episodes(\"The Young and the Restless\", 12000).\nHas_episodes(\"The Bold and the Beautiful\", 8000).\n\n.decl Has_cost_per_episode(Soap:symbol, Cost:float)\nHas_cost_per_episode(\"Days of Our Lives\", 1000).\n\n.decl Answer()\nAnswer() :- Has_cost_per_episode(\"Days of Our Lives\", cost1), Has_episodes(other_soap, episodes), Has_cost_per_episode(other_soap, cost2), cost1 < cost2.\n\n.output Answer"]}
{"id": 208, "answer": false, "completion": ".decl Likes(Person_A:symbol, Person_B:symbol)\nLikes(\"Pikachu\", \"Ash Ketchum\").\nLikes(\"Charles Darwin\", \"natural selection\").\n.decl Answer()\nAnswer() :- Likes(\"Pikachu\", \"Charles Darwin\").\n.output Answer", "completions": [".decl Likes(Person_A:symbol, Person_B:symbol)\nLikes(\"Pikachu\", \"Ash Ketchum\").\nLikes(\"Charles Darwin\", \"natural selection\").\n.decl Answer()\nAnswer() :- Likes(\"Pikachu\", \"Charles Darwin\").\n.output Answer"]}
{"id": 209, "answer": true, "completion": ".decl Has_hair_style(Person:symbol, Hair_style:symbol)\nHas_hair_style(\"person\", \"tonsure\").\n.decl Hair_style_description(Hair_style:symbol, Description:symbol)\nHair_style_description(\"tonsure\", \"shaved top of scalp\").\n.decl Answer()\nAnswer() :- Has_hair_style(\"person\", \"tonsure\"), !Hair_style_description(\"tonsure\", \"hair at the top of scalp\").\n.output Answer", "completions": [".decl Has_hair_style(Person:symbol, Hair_style:symbol)\nHas_hair_style(\"person\", \"tonsure\").\n.decl Hair_style_description(Hair_style:symbol, Description:symbol)\nHair_style_description(\"tonsure\", \"shaved top of scalp\").\n.decl Answer()\nAnswer() :- Has_hair_style(\"person\", \"tonsure\"), !Hair_style_description(\"tonsure\", \"hair at the top of scalp\").\n.output Answer"]}
{"id": 210, "answer": true, "completion": ".decl Is_subject_of(Object:symbol, Work:symbol)\nIs_subject_of(\"white whale\", \"Moby Dick\").\n.decl Can_swim_in_water(Animal:symbol)\nCan_swim_in_water(\"grey seal\").\nCan_swim_in_water(\"white whale\").\n.decl Answer()\nAnswer() :- Can_swim_in_water(\"grey seal\"), Can_swim_in_water(animal), Is_subject_of(animal, \"Moby Dick\").\n.output Answer", "completions": [".decl Is_subject_of(Object:symbol, Work:symbol)\nIs_subject_of(\"white whale\", \"Moby Dick\").\n.decl Can_swim_in_water(Animal:symbol)\nCan_swim_in_water(\"grey seal\").\nCan_swim_in_water(\"white whale\").\n.decl Answer()\nAnswer() :- Can_swim_in_water(\"grey seal\"), Can_swim_in_water(animal), Is_subject_of(animal, \"Moby Dick\").\n.output Answer"]}
{"id": 211, "answer": true, "completion": ".decl Wears_clothing(Character:symbol, Clothing:symbol)\nWears_clothing(\"Donald Duck\", \"no pants\").\n.decl Clothing_type(Clothing:symbol, Type:symbol)\nClothing_type(\"bell-bottoms\", \"pants\").\n.decl Answer()\nAnswer() :- Wears_clothing(\"Donald Duck\", clothing), Clothing_type(clothing, \"pants\").\nAnswer() :- Wears_clothing(\"Donald Duck\", \"no pants\"), Clothing_type(\"bell-bottoms\", \"pants\").\n.output Answer", "completions": [".decl Wears_clothing(Character:symbol, Clothing:symbol)\nWears_clothing(\"Donald Duck\", \"no pants\").\n.decl Clothing_type(Clothing:symbol, Type:symbol)\nClothing_type(\"bell-bottoms\", \"pants\").\n.decl Answer()\nAnswer() :- Wears_clothing(\"Donald Duck\", clothing), Clothing_type(clothing, \"pants\").\nAnswer() :- Wears_clothing(\"Donald Duck\", \"no pants\"), Clothing_type(\"bell-bottoms\", \"pants\").\n.output Answer"]}
{"id": 212, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"anchovy\", \"Black Sea\").\n\n.decl Used_on(Pizza_ingredient:symbol, Food:symbol)\nUsed_on(\"anchovy\", \"pizza\").\n\n.decl Answer()\nAnswer() :- Lives_in(animal, \"Black Sea\"), Used_on(animal, \"pizza\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"anchovy\", \"Black Sea\").\n\n.decl Used_on(Pizza_ingredient:symbol, Food:symbol)\nUsed_on(\"anchovy\", \"pizza\").\n\n.decl Answer()\nAnswer() :- Lives_in(animal, \"Black Sea\"), Used_on(animal, \"pizza\").\n.output Answer"]}
{"id": 213, "answer": true, "completion": ".decl Has_special_traffic_laws(Event:symbol, Answer:symbol)\nHas_special_traffic_laws(\"funerals\", \"yes\").\n.decl Answer()\nAnswer() :- Has_special_traffic_laws(\"funerals\", \"yes\").\n.output Answer", "completions": [".decl Has_special_traffic_laws(Event:symbol, Answer:symbol)\nHas_special_traffic_laws(\"funerals\", \"yes\").\n.decl Answer()\nAnswer() :- Has_special_traffic_laws(\"funerals\", \"yes\").\n.output Answer"]}
{"id": 214, "answer": true, "completion": ".decl Has_coordinates(Object:symbol, Latitude:float, Longitude:float)\nHas_coordinates(\"home\", 40.7128, -74.0060).\n.decl Answer()\nAnswer() :- Has_coordinates(\"home\", latitude, longitude).\n.output Answer", "completions": [".decl Has_coordinates(Object:symbol, Latitude:float, Longitude:float)\nHas_coordinates(\"home\", 40.7128, -74.0060).\n.decl Answer()\nAnswer() :- Has_coordinates(\"home\", latitude, longitude).\n.output Answer"]}
{"id": 215, "answer": false, "completion": ".decl Awaits(Person:symbol, Event:symbol)\nAwaits(\"Woody Allen\", \"Second Coming\").\n.decl Answer()\nAnswer() :- Awaits(\"Woody Allen\", \"Second Coming\").\n.output Answer", "completions": [".decl Awaits(Person:symbol, Event:symbol)\nAwaits(\"Woody Allen\", \"Second Coming\").\n.decl Answer()\nAnswer() :- Awaits(\"Woody Allen\", \"Second Coming\").\n.output Answer"]}
{"id": 216, "answer": true, "completion": ".decl Causes_fever(Factor:symbol)\nCauses_fever(\"bacterial infection\").\nCauses_fever(\"viral infection\").\n.decl Found_in(Factor:symbol, Object:symbol)\nFound_in(\"bacterial infection\", \"contaminated meat\").\nFound_in(\"viral infection\", \"contaminated meat\").\n.decl Answer()\nAnswer() :- Causes_fever(factor), Found_in(factor, \"meat\").\n.output Answer", "completions": [".decl Causes_fever(Factor:symbol)\nCauses_fever(\"bacterial infection\").\nCauses_fever(\"viral infection\").\n.decl Found_in(Factor:symbol, Object:symbol)\nFound_in(\"bacterial infection\", \"contaminated meat\").\nFound_in(\"viral infection\", \"contaminated meat\").\n.decl Answer()\nAnswer() :- Causes_fever(factor), Found_in(factor, \"meat\").\n.output Answer"]}
{"id": 217, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Dicopomorpha echmepterygis\", 0.000139).\nHas_size(\"Uranium pellet\", 0.000139).\n.decl Is_fatal(Object:symbol)\nIs_fatal(\"Uranium pellet\").\n.decl Answer()\nAnswer() :- Has_size(\"Dicopomorpha echmepterygis\", size1), Has_size(\"Uranium pellet\", size2), size1 = size2, Is_fatal(\"Uranium pellet\").\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Dicopomorpha echmepterygis\", 0.000139).\nHas_size(\"Uranium pellet\", 0.000139).\n.decl Is_fatal(Object:symbol)\nIs_fatal(\"Uranium pellet\").\n.decl Answer()\nAnswer() :- Has_size(\"Dicopomorpha echmepterygis\", size1), Has_size(\"Uranium pellet\", size2), size1 = size2, Is_fatal(\"Uranium pellet\").\n.output Answer"]}
{"id": 218, "answer": false, "completion": ".decl Associated_with(Event:symbol, Thing:symbol)\nAssociated_with(\"Christmas\", \"peppermint\").\n.decl Contains_ingredient(Thing:symbol, Ingredient:symbol)\nContains_ingredient(\"peppermint\", \"menthol\").\n.decl Answer()\nAnswer() :- Associated_with(\"Christmas\", thing), Contains_ingredient(thing, \"menthol\").\n.output Answer", "completions": [".decl Associated_with(Event:symbol, Thing:symbol)\nAssociated_with(\"Christmas\", \"peppermint\").\n.decl Contains_ingredient(Thing:symbol, Ingredient:symbol)\nContains_ingredient(\"peppermint\", \"menthol\").\n.decl Answer()\nAnswer() :- Associated_with(\"Christmas\", thing), Contains_ingredient(thing, \"menthol\").\n.output Answer"]}
{"id": 219, "answer": false, "completion": ".decl Runs_in_election(Person:symbol, Election:symbol, Year:float, Country:symbol)\nRuns_in_election(\"John Kerry\", \"general election\", 2004, \"United States\").\n.decl Answer()\nAnswer() :- Runs_in_election(\"John Kerry\", \"general election\", 2010, \"United Kingdom\").\n.output Answer", "completions": [".decl Runs_in_election(Person:symbol, Election:symbol, Year:float, Country:symbol)\nRuns_in_election(\"John Kerry\", \"general election\", 2004, \"United States\").\n.decl Answer()\nAnswer() :- Runs_in_election(\"John Kerry\", \"general election\", 2010, \"United Kingdom\").\n.output Answer"]}
{"id": 220, "answer": true, "completion": ".decl Afraid_of(Animal_A:symbol, Activity:symbol)\nAfraid_of(\"Bengal cat\", \"catching fish\").\n.decl Answer()\nAnswer() :- Afraid_of(\"Bengal cat\", \"catching fish\").\n.output Answer", "completions": [".decl Afraid_of(Animal_A:symbol, Activity:symbol)\nAfraid_of(\"Bengal cat\", \"catching fish\").\n.decl Answer()\nAnswer() :- Afraid_of(\"Bengal cat\", \"catching fish\").\n.output Answer"]}
{"id": 221, "answer": false, "completion": ".decl Has_quantity(Object:symbol, Quantity:float)\nHas_quantity(\"dozen pickles\", 12).\n.decl Good_for_easing_hypertension(Object:symbol)\nGood_for_easing_hypertension(\"pickle\").\n.decl Answer()\nAnswer() :- Has_quantity(\"dozen pickles\", quantity), Good_for_easing_hypertension(\"pickle\"), quantity > 0.\n.output Answer", "completions": [".decl Has_quantity(Object:symbol, Quantity:float)\nHas_quantity(\"dozen pickles\", 12).\n.decl Good_for_easing_hypertension(Object:symbol)\nGood_for_easing_hypertension(\"pickle\").\n.decl Answer()\nAnswer() :- Has_quantity(\"dozen pickles\", quantity), Good_for_easing_hypertension(\"pickle\"), quantity > 0.\n.output Answer"]}
{"id": 222, "answer": true, "completion": ".decl Is_about(Book:symbol, Topic:symbol)\nIs_about(\"Revolutionary Road\", \"life in a suburb\").\n.decl Answer()\nAnswer() :- Is_about(\"Revolutionary Road\", \"life in a suburb\").\n.output Answer", "completions": [".decl Is_about(Book:symbol, Topic:symbol)\nIs_about(\"Revolutionary Road\", \"life in a suburb\").\n.decl Answer()\nAnswer() :- Is_about(\"Revolutionary Road\", \"life in a suburb\").\n.output Answer"]}
{"id": 223, "answer": true, "completion": ".decl Is_associated_with(God_A:symbol, God_B:symbol, Mythology:symbol)\nIs_associated_with(\"Hanuman\", \"Hindu god\", \"Hindu\").\nIs_associated_with(\"Thor\", \"Norse god\", \"Norse\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Hanuman\", god1, mythology1), Is_associated_with(god2, \"Norse god\", mythology2), mythology1 = mythology2.\n.output Answer", "completions": [".decl Is_associated_with(God_A:symbol, God_B:symbol, Mythology:symbol)\nIs_associated_with(\"Hanuman\", \"Hindu god\", \"Hindu\").\nIs_associated_with(\"Thor\", \"Norse god\", \"Norse\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Hanuman\", god1, mythology1), Is_associated_with(god2, \"Norse god\", mythology2), mythology1 = mythology2.\n.output Answer"]}
{"id": 224, "answer": false, "completion": ".decl Needs_large_room(Activity:symbol, Need:float)\nNeeds_large_room(\"3D printing\", 0).\n.decl Answer()\nAnswer() :- Needs_large_room(\"3D printing\", need), need > 0.\n.output Answer", "completions": [".decl Needs_large_room(Activity:symbol, Need:float)\nNeeds_large_room(\"3D printing\", 0).\n.decl Answer()\nAnswer() :- Needs_large_room(\"3D printing\", need), need > 0.\n.output Answer"]}
{"id": 225, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Robert Stack\", 1919).\n.decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Robert Stack's show\", 14).\n.decl Built_in_year(Building:symbol, Built_year:float)\nBuilt_in_year(\"Tower of London\", 1078).\n.decl In_time_period(Year:float, Time_period:symbol)\nIn_time_period(year, \"1400s\") :- year >= 1400, year < 1500.\n.decl Answer()\nAnswer() :- Born_in_year(\"Robert Stack\", birth_year), Built_in_year(\"Tower of London\", built_year), In_time_period(built_year, \"1400s\"), Has_n_seasons(\"Robert Stack's show\", n_seasons), birth_year + n_seasons * 10 >= 1400.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Robert Stack\", 1919).\n.decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Robert Stack's show\", 14).\n.decl Built_in_year(Building:symbol, Built_year:float)\nBuilt_in_year(\"Tower of London\", 1078).\n.decl In_time_period(Year:float, Time_period:symbol)\nIn_time_period(year, \"1400s\") :- year >= 1400, year < 1500.\n.decl Answer()\nAnswer() :- Born_in_year(\"Robert Stack\", birth_year), Built_in_year(\"Tower of London\", built_year), In_time_period(built_year, \"1400s\"), Has_n_seasons(\"Robert Stack's show\", n_seasons), birth_year + n_seasons * 10 >= 1400.\n.output Answer"]}
{"id": 226, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sea otter\", \"sea urchin\").\nEats(\"sea otter\", \"crab\").\nEats(\"sea otter\", \"fish\").\nEats(\"spider\", \"insects\").\n.decl Answer()\nAnswer() :- Eats(\"sea otter\", \"spider\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sea otter\", \"sea urchin\").\nEats(\"sea otter\", \"crab\").\nEats(\"sea otter\", \"fish\").\nEats(\"spider\", \"insects\").\n.decl Answer()\nAnswer() :- Eats(\"sea otter\", \"spider\").\n.output Answer"]}
{"id": 227, "answer": true, "completion": ".decl Formed(Band:symbol, Year:float)\nFormed(\"The Who\", 1964).\n.decl Occurred(Event:symbol, Start_year:float, End_year:float)\nOccurred(\"World War II\", 1939, 1945).\n.decl Answer()\nAnswer() :- Formed(\"The Who\", year1), Occurred(\"World War II\", start_year, end_year), year1 > end_year.\n.output Answer", "completions": [".decl Formed(Band:symbol, Year:float)\nFormed(\"The Who\", 1964).\n.decl Occurred(Event:symbol, Start_year:float, End_year:float)\nOccurred(\"World War II\", 1939, 1945).\n.decl Answer()\nAnswer() :- Formed(\"The Who\", year1), Occurred(\"World War II\", start_year, end_year), year1 > end_year.\n.output Answer"]}
{"id": 228, "answer": true, "completion": ".decl Has_material(Coin:symbol, Material:symbol, Percentage:float)\nHas_material(\"US 2020 nickel\", \"copper\", 75).\nHas_material(\"US 2020 nickel\", \"nickel\", 25).\n.decl Dominant_material(Coin:symbol, Material:symbol)\nDominant_material(coin, material) :- Has_material(coin, material, percentage1), !Has_material(coin, other_material, percentage2), percentage1 > percentage2.\n.decl Answer()\nAnswer() :- Dominant_material(\"US 2020 nickel\", \"nickel\").\n.output Answer", "completions": [".decl Has_material(Coin:symbol, Material:symbol, Percentage:float)\nHas_material(\"US 2020 nickel\", \"copper\", 75).\nHas_material(\"US 2020 nickel\", \"nickel\", 25).\n.decl Dominant_material(Coin:symbol, Material:symbol)\nDominant_material(coin, material) :- Has_material(coin, material, percentage1), !Has_material(coin, other_material, percentage2), percentage1 > percentage2.\n.decl Answer()\nAnswer() :- Dominant_material(\"US 2020 nickel\", \"nickel\").\n.output Answer"]}
{"id": 229, "answer": false, "completion": ".decl Cost(Event:symbol, Amount:float)\nCost(\"run for President of India\", 25000).\nCost(\"buy iPhone 11\", 699).\n.decl Answer()\nAnswer() :- Cost(\"run for President of India\", amount1), Cost(\"buy iPhone 11\", amount2), amount1 > amount2.\n.output Answer", "completions": [".decl Cost(Event:symbol, Amount:float)\nCost(\"run for President of India\", 25000).\nCost(\"buy iPhone 11\", 699).\n.decl Answer()\nAnswer() :- Cost(\"run for President of India\", amount1), Cost(\"buy iPhone 11\", amount2), amount1 > amount2.\n.output Answer"]}
{"id": 230, "answer": true, "completion": ".decl Occurs_on_day(Event:symbol, Day:symbol)\nOccurs_on_day(\"New Year's Day\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Occurs_on_day(\"New Year's Day\", \"Wednesday\").\nAnswer() :- Occurs_on_day(\"New Year's Day\", day), day != \"Wednesday\".\n.output Answer", "completions": [".decl Occurs_on_day(Event:symbol, Day:symbol)\nOccurs_on_day(\"New Year's Day\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Occurs_on_day(\"New Year's Day\", \"Wednesday\").\nAnswer() :- Occurs_on_day(\"New Year's Day\", day), day != \"Wednesday\".\n.output Answer"]}
{"id": 231, "answer": true, "completion": ".decl Target_of_Islamophobia(Person:symbol)\nTarget_of_Islamophobia(\"Donald Trump\").\n.decl Answer()\nAnswer() :- Target_of_Islamophobia(\"Donald Trump\").\n.output Answer", "completions": [".decl Target_of_Islamophobia(Person:symbol)\nTarget_of_Islamophobia(\"Donald Trump\").\n.decl Answer()\nAnswer() :- Target_of_Islamophobia(\"Donald Trump\").\n.output Answer"]}
{"id": 232, "answer": true, "completion": ".decl Involves_holiday(Movie:symbol, Holiday:symbol)\nInvolves_holiday(\"Disney's Alice in Wonderland\", \"unbirthday\").\n.decl Is_holiday(Holiday:symbol)\nIs_holiday(\"unbirthday\").\n.decl Answer()\nAnswer() :- Involves_holiday(\"Disney's Alice in Wonderland\", holiday), Is_holiday(holiday).\n.output Answer", "completions": [".decl Involves_holiday(Movie:symbol, Holiday:symbol)\nInvolves_holiday(\"Disney's Alice in Wonderland\", \"unbirthday\").\n.decl Is_holiday(Holiday:symbol)\nIs_holiday(\"unbirthday\").\n.decl Answer()\nAnswer() :- Involves_holiday(\"Disney's Alice in Wonderland\", holiday), Is_holiday(holiday).\n.output Answer"]}
{"id": 233, "answer": true, "completion": ".decl Served_under(Person1:symbol, Person2:symbol)\nServed_under(\"François Mitterrand\", \"Charles de Gaulle\").\nServed_under(\"Napoleon Bonaparte\", \"Napoleon Bonaparte\").\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"François Mitterrand\", 1916).\nBorn_in_year(\"Napoleon Bonaparte\", 1769).\n.decl Answer()\nAnswer() :- Served_under(\"François Mitterrand\", \"Napoleon Bonaparte\").\nAnswer() :- Born_in_year(\"François Mitterrand\", year1), Born_in_year(\"Napoleon Bonaparte\", year2), year1 < year2.\n.output Answer", "completions": [".decl Served_under(Person1:symbol, Person2:symbol)\nServed_under(\"François Mitterrand\", \"Charles de Gaulle\").\nServed_under(\"Napoleon Bonaparte\", \"Napoleon Bonaparte\").\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"François Mitterrand\", 1916).\nBorn_in_year(\"Napoleon Bonaparte\", 1769).\n.decl Answer()\nAnswer() :- Served_under(\"François Mitterrand\", \"Napoleon Bonaparte\").\nAnswer() :- Born_in_year(\"François Mitterrand\", year1), Born_in_year(\"Napoleon Bonaparte\", year2), year1 < year2.\n.output Answer"]}
{"id": 234, "answer": true, "completion": ".decl Has_chemicals(Object:symbol, Chemical:symbol)\nHas_chemicals(\"onion\", \"sulfur\").\nHas_chemicals(\"onion\", \"flavonoids\").\nHas_chemicals(\"onion\", \"quercetin\").\n.decl Used_in_thermonuclear_bomb(Chemical:symbol)\nUsed_in_thermonuclear_bomb(\"tritium\").\nUsed_in_thermonuclear_bomb(\"deuterium\").\nUsed_in_thermonuclear_bomb(\"lithium\").\n.decl Answer()\nAnswer() :- Has_chemicals(\"onion\", chemical), Used_in_thermonuclear_bomb(chemical).\n.output Answer", "completions": [".decl Has_chemicals(Object:symbol, Chemical:symbol)\nHas_chemicals(\"onion\", \"sulfur\").\nHas_chemicals(\"onion\", \"flavonoids\").\nHas_chemicals(\"onion\", \"quercetin\").\n.decl Used_in_thermonuclear_bomb(Chemical:symbol)\nUsed_in_thermonuclear_bomb(\"tritium\").\nUsed_in_thermonuclear_bomb(\"deuterium\").\nUsed_in_thermonuclear_bomb(\"lithium\").\n.decl Answer()\nAnswer() :- Has_chemicals(\"onion\", chemical), Used_in_thermonuclear_bomb(chemical).\n.output Answer"]}
{"id": 235, "answer": true, "completion": ".decl Is_legal(Action:symbol, Legality:symbol)\nIs_legal(\"downloading Mario 64 on an emulator\", \"illegal\").\n.decl Answer()\nAnswer() :- Is_legal(\"downloading Mario 64 on an emulator\", \"legal\").\n.output Answer", "completions": [".decl Is_legal(Action:symbol, Legality:symbol)\nIs_legal(\"downloading Mario 64 on an emulator\", \"illegal\").\n.decl Answer()\nAnswer() :- Is_legal(\"downloading Mario 64 on an emulator\", \"legal\").\n.output Answer"]}
{"id": 236, "answer": false, "completion": ".decl Happens_in_condition(Activity:symbol, Condition:symbol)\nHappens_in_condition(\"spot full circle of rainbow\", \"rain and sun\").\nHappens_in_condition(\"lunch on the beach\", \"sunny\").\n.decl Answer()\nAnswer() :- Happens_in_condition(\"lunch on the beach\", condition1), Happens_in_condition(\"spot full circle of rainbow\", condition2), condition1 = condition2.\n.output Answer", "completions": [".decl Happens_in_condition(Activity:symbol, Condition:symbol)\nHappens_in_condition(\"spot full circle of rainbow\", \"rain and sun\").\nHappens_in_condition(\"lunch on the beach\", \"sunny\").\n.decl Answer()\nAnswer() :- Happens_in_condition(\"lunch on the beach\", condition1), Happens_in_condition(\"spot full circle of rainbow\", condition2), condition1 = condition2.\n.output Answer"]}
{"id": 237, "answer": true, "completion": ".decl Has_smoggy_days(City:symbol, N_days:float)\nHas_smoggy_days(\"Düsseldorf\", 40).\n.decl Is_small_number(N:float)\nIs_small_number(0..50).\n.decl Answer()\nAnswer() :- Has_smoggy_days(\"Düsseldorf\", n_days), Is_small_number(n_days).\n.output Answer", "completions": [".decl Has_smoggy_days(City:symbol, N_days:float)\nHas_smoggy_days(\"Düsseldorf\", 40).\n.decl Is_small_number(N:float)\nIs_small_number(0..50).\n.decl Answer()\nAnswer() :- Has_smoggy_days(\"Düsseldorf\", n_days), Is_small_number(n_days).\n.output Answer"]}
{"id": 238, "answer": false, "completion": ".decl Hairline_changed(Person:symbol)\nHairline_changed(\"Elon Musk\").\n.decl Answer()\nAnswer() :- Hairline_changed(\"Elon Musk\").\n.output Answer", "completions": [".decl Hairline_changed(Person:symbol)\nHairline_changed(\"Elon Musk\").\n.decl Answer()\nAnswer() :- Hairline_changed(\"Elon Musk\").\n.output Answer"]}
{"id": 239, "answer": false, "completion": ".decl Marvel_villain(Name:symbol)\nMarvel_villain(\"Mandarin\").\n.decl Citrus_fruit(Name:symbol)\nCitrus_fruit(\"mandarin\").\n.decl Answer()\nAnswer() :- Marvel_villain(name1), Citrus_fruit(name2), name1 = name2.\n.output Answer", "completions": [".decl Marvel_villain(Name:symbol)\nMarvel_villain(\"Mandarin\").\n.decl Citrus_fruit(Name:symbol)\nCitrus_fruit(\"mandarin\").\n.decl Answer()\nAnswer() :- Marvel_villain(name1), Citrus_fruit(name2), name1 = name2.\n.output Answer"]}
{"id": 240, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"largemouth bass\", \"North America\").\nLives_in(\"largemouth bass\", \"Europe\").\nLives_in(\"largemouth bass\", \"Asia\").\nLives_in(\"largemouth bass\", \"Africa\").\n.decl Answer()\nAnswer() :- Lives_in(\"largemouth bass\", \"Canary Islands\").\nAnswer() :- Lives_in(\"largemouth bass\", continent), Lives_in(\"Canary Islands\", continent).\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"largemouth bass\", \"North America\").\nLives_in(\"largemouth bass\", \"Europe\").\nLives_in(\"largemouth bass\", \"Asia\").\nLives_in(\"largemouth bass\", \"Africa\").\n.decl Answer()\nAnswer() :- Lives_in(\"largemouth bass\", \"Canary Islands\").\nAnswer() :- Lives_in(\"largemouth bass\", continent), Lives_in(\"Canary Islands\", continent).\n.output Answer"]}
{"id": 241, "answer": false, "completion": ".decl Associated_with_cuisine(Food:symbol, Cuisine:symbol)\nAssociated_with_cuisine(\"anchovies\", \"Italian\").\n.decl Answer()\nAnswer() :- Associated_with_cuisine(\"anchovies\", \"Italian\").\n.output Answer", "completions": [".decl Associated_with_cuisine(Food:symbol, Cuisine:symbol)\nAssociated_with_cuisine(\"anchovies\", \"Italian\").\n.decl Answer()\nAnswer() :- Associated_with_cuisine(\"anchovies\", \"Italian\").\n.output Answer"]}
{"id": 242, "answer": true, "completion": ".decl Appeared_on_show(Person:symbol, Show:symbol)\nAppeared_on_show(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.decl Died_before_show(Person:symbol, Show:symbol)\nDied_before_show(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.decl Answer()\nAnswer() :- Appeared_on_show(\"Harry Houdini\", \"Chris Angel Mindfreak\"), !Died_before_show(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.output Answer", "completions": [".decl Appeared_on_show(Person:symbol, Show:symbol)\nAppeared_on_show(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.decl Died_before_show(Person:symbol, Show:symbol)\nDied_before_show(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.decl Answer()\nAnswer() :- Appeared_on_show(\"Harry Houdini\", \"Chris Angel Mindfreak\"), !Died_before_show(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.output Answer"]}
{"id": 243, "answer": false, "completion": ".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Ford F-350\", 35000).\n.decl Has_population(University:symbol, Population:float)\nHas_population(\"Yale University\", 13000).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"average student\", 150).\n.decl Answer()\nAnswer() :- Has_capacity(\"Ford F-350\", capacity), Has_population(\"Yale University\", population), Has_weight(\"average student\", weight), capacity >= population * weight.\n.output Answer", "completions": [".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Ford F-350\", 35000).\n.decl Has_population(University:symbol, Population:float)\nHas_population(\"Yale University\", 13000).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"average student\", 150).\n.decl Answer()\nAnswer() :- Has_capacity(\"Ford F-350\", capacity), Has_population(\"Yale University\", population), Has_weight(\"average student\", weight), capacity >= population * weight.\n.output Answer"]}
{"id": 244, "answer": true, "completion": ".decl Pollinates(Insect:symbol, Plant:symbol)\nPollinates(\"honeybee\", \"apple\").\nPollinates(\"bumblebee\", \"apple\").\nPollinates(\"mason bee\", \"apple\").\n.decl Is_queen_bee(Insect:symbol)\nIs_queen_bee(\"queen honeybee\").\n.decl Answer()\nAnswer() :- Pollinates(insect, \"apple\"), !Is_queen_bee(insect).\n.output Answer", "completions": [".decl Pollinates(Insect:symbol, Plant:symbol)\nPollinates(\"honeybee\", \"apple\").\nPollinates(\"bumblebee\", \"apple\").\nPollinates(\"mason bee\", \"apple\").\n.decl Is_queen_bee(Insect:symbol)\nIs_queen_bee(\"queen honeybee\").\n.decl Answer()\nAnswer() :- Pollinates(insect, \"apple\"), !Is_queen_bee(insect).\n.output Answer"]}
{"id": 245, "answer": true, "completion": ".decl Has_elevation(Place:symbol, Elevation:float)\nHas_elevation(\"Mount Fuji\", 3776).\n.decl Has_depth(Place:symbol, Depth:float)\nHas_depth(\"Sea of Japan\", 3742).\n.decl Answer()\nAnswer() :- Has_elevation(\"Mount Fuji\", elevation), Has_depth(\"Sea of Japan\", depth), elevation > depth.\n.output Answer", "completions": [".decl Has_elevation(Place:symbol, Elevation:float)\nHas_elevation(\"Mount Fuji\", 3776).\n.decl Has_depth(Place:symbol, Depth:float)\nHas_depth(\"Sea of Japan\", 3742).\n.decl Answer()\nAnswer() :- Has_elevation(\"Mount Fuji\", elevation), Has_depth(\"Sea of Japan\", depth), elevation > depth.\n.output Answer"]}
{"id": 246, "answer": true, "completion": ".decl Believes_in(Person:symbol, Concept:symbol)\nBelieves_in(\"Dalai Lama\", \"Buddhism\").\n.decl Is_part_of(Concept_A:symbol, Concept_B:symbol)\nIs_part_of(\"divine barzakh\", \"Islam\").\n.decl Answer()\nAnswer() :- Believes_in(\"Dalai Lama\", concept), Is_part_of(\"divine barzakh\", concept).\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Concept:symbol)\nBelieves_in(\"Dalai Lama\", \"Buddhism\").\n.decl Is_part_of(Concept_A:symbol, Concept_B:symbol)\nIs_part_of(\"divine barzakh\", \"Islam\").\n.decl Answer()\nAnswer() :- Believes_in(\"Dalai Lama\", concept), Is_part_of(\"divine barzakh\", concept).\n.output Answer"]}
{"id": 247, "answer": true, "completion": ".decl Fear_in_year(Year:float)\nFear_in_year(2000).\n.decl Answer()\nAnswer() :- Fear_in_year(2000).\n.output Answer", "completions": [".decl Fear_in_year(Year:float)\nFear_in_year(2000).\n.decl Answer()\nAnswer() :- Fear_in_year(2000).\n.output Answer"]}
{"id": 248, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Walt Disney\", 1901).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Walt Disney\", 1966).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"email\", 1971).\n.decl Answer()\nAnswer() :- Born_in_year(\"Walt Disney\", birth_year), Died_in_year(\"Walt Disney\", death_year), Invented_in_year(\"email\", invention_year), birth_year <= invention_year, death_year >= invention_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Walt Disney\", 1901).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Walt Disney\", 1966).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"email\", 1971).\n.decl Answer()\nAnswer() :- Born_in_year(\"Walt Disney\", birth_year), Died_in_year(\"Walt Disney\", death_year), Invented_in_year(\"email\", invention_year), birth_year <= invention_year, death_year >= invention_year.\n.output Answer"]}
{"id": 249, "answer": true, "completion": ".decl Is_in_grade(Student:symbol, Grade:float)\nIs_in_grade(\"student\", 11).\n.decl Has_age_requirement(Role:symbol, Age:float)\nHas_age_requirement(\"president of the United States\", 35).\n.decl Has_age(Student:symbol, Age:float)\nHas_age(\"student\", 16).\n.decl Answer()\nAnswer() :- Is_in_grade(\"student\", grade), Has_age(\"student\", age), Has_age_requirement(\"president of the United States\", required_age), age < required_age.\n.output Answer", "completions": [".decl Is_in_grade(Student:symbol, Grade:float)\nIs_in_grade(\"student\", 11).\n.decl Has_age_requirement(Role:symbol, Age:float)\nHas_age_requirement(\"president of the United States\", 35).\n.decl Has_age(Student:symbol, Age:float)\nHas_age(\"student\", 16).\n.decl Answer()\nAnswer() :- Is_in_grade(\"student\", grade), Has_age(\"student\", age), Has_age_requirement(\"president of the United States\", required_age), age < required_age.\n.output Answer"]}
{"id": 250, "answer": true, "completion": ".decl Has_best_tasting_part(Object:symbol, Part:symbol)\nHas_best_tasting_part(\"papaya\", \"center\").\n.decl Answer()\nAnswer() :- Has_best_tasting_part(\"papaya\", \"center\").\n.output Answer", "completions": [".decl Has_best_tasting_part(Object:symbol, Part:symbol)\nHas_best_tasting_part(\"papaya\", \"center\").\n.decl Answer()\nAnswer() :- Has_best_tasting_part(\"papaya\", \"center\").\n.output Answer"]}
{"id": 251, "answer": true, "completion": ".decl Is_plot_device(Subject:symbol, Shows:symbol)\nIs_plot_device(\"radioactive waste\", \"many shows\").\n.decl Answer()\nAnswer() :- Is_plot_device(\"radioactive waste\", \"many shows\").\n.output Answer", "completions": [".decl Is_plot_device(Subject:symbol, Shows:symbol)\nIs_plot_device(\"radioactive waste\", \"many shows\").\n.decl Answer()\nAnswer() :- Is_plot_device(\"radioactive waste\", \"many shows\").\n.output Answer"]}
{"id": 252, "answer": true, "completion": ".decl In_Aesops_Fables(Animal:symbol)\nIn_Aesops_Fables(\"fox\").\nIn_Aesops_Fables(\"wolf\").\n.decl Is_Member_of_Canidae(Animal:symbol)\nIs_Member_of_Canidae(\"fox\").\nIs_Member_of_Canidae(\"wolf\").\n.decl Answer()\nAnswer() :- In_Aesops_Fables(animal), Is_Member_of_Canidae(animal).\n.output Answer", "completions": [".decl In_Aesops_Fables(Animal:symbol)\nIn_Aesops_Fables(\"fox\").\nIn_Aesops_Fables(\"wolf\").\n.decl Is_Member_of_Canidae(Animal:symbol)\nIs_Member_of_Canidae(\"fox\").\nIs_Member_of_Canidae(\"wolf\").\n.decl Answer()\nAnswer() :- In_Aesops_Fables(animal), Is_Member_of_Canidae(animal).\n.output Answer"]}
{"id": 253, "answer": false, "completion": ".decl Has_vitamin_C(Fruit:symbol)\nHas_vitamin_C(\"orange\").\nHas_vitamin_C(\"kiwi\").\nHas_vitamin_C(\"strawberry\").\n\n.decl Can_be_bad_for_health(Food:symbol)\nCan_be_bad_for_health(\"sugar\").\nCan_be_bad_for_health(\"salt\").\nCan_be_bad_for_health(\"processed food\").\n\n.decl Answer()\nAnswer() :- Has_vitamin_C(fruit), Can_be_bad_for_health(fruit).\n.output Answer", "completions": [".decl Has_vitamin_C(Fruit:symbol)\nHas_vitamin_C(\"orange\").\nHas_vitamin_C(\"kiwi\").\nHas_vitamin_C(\"strawberry\").\n\n.decl Can_be_bad_for_health(Food:symbol)\nCan_be_bad_for_health(\"sugar\").\nCan_be_bad_for_health(\"salt\").\nCan_be_bad_for_health(\"processed food\").\n\n.decl Answer()\nAnswer() :- Has_vitamin_C(fruit), Can_be_bad_for_health(fruit).\n.output Answer"]}
{"id": 254, "answer": false, "completion": ".decl Known_in_age(Material:symbol, Age:symbol)\nKnown_in_age(\"bronze\", \"bronze age\").\nKnown_in_age(\"iron\", \"iron age\").\nKnown_in_age(\"steel\", \"iron age\").\nKnown_in_age(\"gunpowder\", \"gunpowder age\").\n.decl Cannon_material(Material:symbol)\nCannon_material(\"bronze\").\nCannon_material(\"iron\").\nCannon_material(\"steel\").\nCannon_material(\"gunpowder\").\n.decl Answer()\nAnswer() :- Cannon_material(material), !Known_in_age(material, \"bronze age\").\n.output Answer", "completions": [".decl Known_in_age(Material:symbol, Age:symbol)\nKnown_in_age(\"bronze\", \"bronze age\").\nKnown_in_age(\"iron\", \"iron age\").\nKnown_in_age(\"steel\", \"iron age\").\nKnown_in_age(\"gunpowder\", \"gunpowder age\").\n.decl Cannon_material(Material:symbol)\nCannon_material(\"bronze\").\nCannon_material(\"iron\").\nCannon_material(\"steel\").\nCannon_material(\"gunpowder\").\n.decl Answer()\nAnswer() :- Cannon_material(material), !Known_in_age(material, \"bronze age\").\n.output Answer"]}
{"id": 255, "answer": false, "completion": ".decl Is_President(President:symbol, Party:symbol)\nIs_President(\"Joe Biden\", \"Democrat\").\nIs_President(\"Donald Trump\", \"Republican\").\nIs_President(\"Barack Obama\", \"Democrat\").\nIs_President(\"George W. Bush\", \"Republican\").\nIs_President(\"Bill Clinton\", \"Democrat\").\nIs_President(\"George H.W. Bush\", \"Republican\").\nIs_President(\"Ronald Reagan\", \"Republican\").\nIs_President(\"Jimmy Carter\", \"Democrat\").\n\n.decl Known_For_Painting(President:symbol)\nKnown_For_Painting(\"George W. Bush\").\n\n.decl Most_Recent_Democrat_President(President:symbol)\nMost_Recent_Democrat_President(\"Joe Biden\").\n\n.decl Answer()\nAnswer() :- Most_Recent_Democrat_President(president), Known_For_Painting(president).\n.output Answer", "completions": [".decl Is_President(President:symbol, Party:symbol)\nIs_President(\"Joe Biden\", \"Democrat\").\nIs_President(\"Donald Trump\", \"Republican\").\nIs_President(\"Barack Obama\", \"Democrat\").\nIs_President(\"George W. Bush\", \"Republican\").\nIs_President(\"Bill Clinton\", \"Democrat\").\nIs_President(\"George H.W. Bush\", \"Republican\").\nIs_President(\"Ronald Reagan\", \"Republican\").\nIs_President(\"Jimmy Carter\", \"Democrat\").\n\n.decl Known_For_Painting(President:symbol)\nKnown_For_Painting(\"George W. Bush\").\n\n.decl Most_Recent_Democrat_President(President:symbol)\nMost_Recent_Democrat_President(\"Joe Biden\").\n\n.decl Answer()\nAnswer() :- Most_Recent_Democrat_President(president), Known_For_Painting(president).\n.output Answer"]}
{"id": 256, "answer": true, "completion": ".decl Is_environmentalist(Person:symbol)\nIs_environmentalist(\"environmentalist\").\n.decl Advocates_for(Person:symbol, Action:symbol)\nAdvocates_for(\"environmentalist\", \"preventing domestic canine reproduction\").\n.decl Answer()\nAnswer() :- Is_environmentalist(person), Advocates_for(person, \"preventing domestic canine reproduction\").\n.output Answer", "completions": [".decl Is_environmentalist(Person:symbol)\nIs_environmentalist(\"environmentalist\").\n.decl Advocates_for(Person:symbol, Action:symbol)\nAdvocates_for(\"environmentalist\", \"preventing domestic canine reproduction\").\n.decl Answer()\nAnswer() :- Is_environmentalist(person), Advocates_for(person, \"preventing domestic canine reproduction\").\n.output Answer"]}
{"id": 257, "answer": true, "completion": ".decl Has_iterations(Product:symbol, Iterations:float)\nHas_iterations(\"iPhone\", 13).\nHas_iterations(\"Samsung Galaxy\", 21).\n.decl Answer()\nAnswer() :- Has_iterations(\"iPhone\", iterations1), Has_iterations(\"Samsung Galaxy\", iterations2), iterations1 > iterations2.\n.output Answer", "completions": [".decl Has_iterations(Product:symbol, Iterations:float)\nHas_iterations(\"iPhone\", 13).\nHas_iterations(\"Samsung Galaxy\", 21).\n.decl Answer()\nAnswer() :- Has_iterations(\"iPhone\", iterations1), Has_iterations(\"Samsung Galaxy\", iterations2), iterations1 > iterations2.\n.output Answer"]}
{"id": 258, "answer": false, "completion": ".decl Has_dedicated_fan(Component:symbol, Has_fan:float)\nHas_dedicated_fan(\"central processing unit\", 1).\n.decl Answer()\nAnswer() :- Has_dedicated_fan(\"central processing unit\", has_fan), has_fan = 1.\n.output Answer", "completions": [".decl Has_dedicated_fan(Component:symbol, Has_fan:float)\nHas_dedicated_fan(\"central processing unit\", 1).\n.decl Answer()\nAnswer() :- Has_dedicated_fan(\"central processing unit\", has_fan), has_fan = 1.\n.output Answer"]}
{"id": 259, "answer": true, "completion": ".decl Is_religious(Person:symbol, Religious:float)\nIs_religious(\"Christopher Hitchens\", 0).\n.decl Requires_religiosity(Practice:symbol, Religiosity:float)\nRequires_religiosity(\"tonsure\", 0.8).\n.decl Answer()\nAnswer() :- Is_religious(\"Christopher Hitchens\", religiosity1), Requires_religiosity(\"tonsure\", religiosity2), religiosity1 >= religiosity2.\n.output Answer", "completions": [".decl Is_religious(Person:symbol, Religious:float)\nIs_religious(\"Christopher Hitchens\", 0).\n.decl Requires_religiosity(Practice:symbol, Religiosity:float)\nRequires_religiosity(\"tonsure\", 0.8).\n.decl Answer()\nAnswer() :- Is_religious(\"Christopher Hitchens\", religiosity1), Requires_religiosity(\"tonsure\", religiosity2), religiosity1 >= religiosity2.\n.output Answer"]}
{"id": 260, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"diamond\", 3.5).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"diamond\", density1), Has_density(\"water\", density2), density1 < density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"diamond\", 3.5).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"diamond\", density1), Has_density(\"water\", density2), density1 < density2.\n.output Answer"]}
{"id": 261, "answer": true, "completion": ".decl Has_brother(Person_A:symbol, Person_B:symbol)\nHas_brother(\"Walt Disney\", \"Roy Disney\").\n.decl Created(Person:symbol, Character:symbol)\nCreated(\"Walt Disney\", \"Goofy\").\n.decl Employed(Employer:symbol, Employee:symbol)\nEmployed(\"Walt Disney\", \"Goofy creator\").\n.decl Committed_offense(Person:symbol, Offense:symbol)\nCommitted_offense(\"Roy Disney\", \"excommunicable offense\").\n.decl Answer()\nAnswer() :- Employed(employer, \"Goofy creator\"), Has_brother(employer, brother), Committed_offense(brother, \"excommunicable offense\").\n.output Answer", "completions": [".decl Has_brother(Person_A:symbol, Person_B:symbol)\nHas_brother(\"Walt Disney\", \"Roy Disney\").\n.decl Created(Person:symbol, Character:symbol)\nCreated(\"Walt Disney\", \"Goofy\").\n.decl Employed(Employer:symbol, Employee:symbol)\nEmployed(\"Walt Disney\", \"Goofy creator\").\n.decl Committed_offense(Person:symbol, Offense:symbol)\nCommitted_offense(\"Roy Disney\", \"excommunicable offense\").\n.decl Answer()\nAnswer() :- Employed(employer, \"Goofy creator\"), Has_brother(employer, brother), Committed_offense(brother, \"excommunicable offense\").\n.output Answer"]}
{"id": 262, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"nickel\", 2.1).\nHas_size(\"koala pouch\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"nickel\", size1), Has_size(\"koala pouch\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"nickel\", 2.1).\nHas_size(\"koala pouch\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"nickel\", size1), Has_size(\"koala pouch\", size2), size1 < size2.\n.output Answer"]}
{"id": 263, "answer": true, "completion": ".decl Is_religious(Person:symbol, Religion:symbol)\nIs_religious(\"Dave Chappelle\", \"Islam\").\n.decl Has_holy_book(Religion:symbol, Holy_book:symbol)\nHas_holy_book(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Is_religious(\"Dave Chappelle\", religion), Has_holy_book(religion, \"Quran\").\n.output Answer", "completions": [".decl Is_religious(Person:symbol, Religion:symbol)\nIs_religious(\"Dave Chappelle\", \"Islam\").\n.decl Has_holy_book(Religion:symbol, Holy_book:symbol)\nHas_holy_book(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Is_religious(\"Dave Chappelle\", religion), Has_holy_book(religion, \"Quran\").\n.output Answer"]}
{"id": 264, "answer": false, "completion": ".decl Named_after(Object:symbol, Person:symbol)\nNamed_after(\"C-SPAN\", \"Alan Greenspan\").\n.decl Answer()\nAnswer() :- Named_after(\"C-SPAN\", \"Alan Greenspan\").\n.output Answer", "completions": [".decl Named_after(Object:symbol, Person:symbol)\nNamed_after(\"C-SPAN\", \"Alan Greenspan\").\n.decl Answer()\nAnswer() :- Named_after(\"C-SPAN\", \"Alan Greenspan\").\n.output Answer"]}
{"id": 265, "answer": false, "completion": ".decl Requires_electricity(Object:symbol)\nRequires_electricity(\"Final Fantasy VI\").\n.decl Answer()\nAnswer() :- Requires_electricity(\"Final Fantasy VI\").\n.output Answer", "completions": [".decl Requires_electricity(Object:symbol)\nRequires_electricity(\"Final Fantasy VI\").\n.decl Answer()\nAnswer() :- Requires_electricity(\"Final Fantasy VI\").\n.output Answer"]}
{"id": 266, "answer": false, "completion": ".decl Wrote_play_about(Author:symbol, Topic:symbol)\nWrote_play_about(\"Sartre\", \"Hell\").\n.decl Answer()\nAnswer() :- Wrote_play_about(\"Sartre\", \"Hell\").\n.output Answer", "completions": [".decl Wrote_play_about(Author:symbol, Topic:symbol)\nWrote_play_about(\"Sartre\", \"Hell\").\n.decl Answer()\nAnswer() :- Wrote_play_about(\"Sartre\", \"Hell\").\n.output Answer"]}
{"id": 267, "answer": false, "completion": ".decl Is_member_of(Person:symbol, Team:symbol)\nIs_member_of(\"player\", \"NFL team\").\n.decl Receives_training(Person:symbol, Training:symbol)\nReceives_training(\"infantry\", \"infantry training\").\n.decl Answer()\nAnswer() :- Is_member_of(person, \"NFL team\"), Receives_training(person, \"infantry training\").\n.output Answer", "completions": [".decl Is_member_of(Person:symbol, Team:symbol)\nIs_member_of(\"player\", \"NFL team\").\n.decl Receives_training(Person:symbol, Training:symbol)\nReceives_training(\"infantry\", \"infantry training\").\n.decl Answer()\nAnswer() :- Is_member_of(person, \"NFL team\"), Receives_training(person, \"infantry training\").\n.output Answer"]}
{"id": 268, "answer": true, "completion": ".decl Has_n_stripes(Object:symbol, N_stripes:float)\nHas_n_stripes(\"American flag\", 13).\n.decl N_voice_actors(Character:symbol, N_actors:float)\nN_voice_actors(\"Goofy\", 1).\nN_voice_actors(\"Bugs Bunny\", 1).\n.decl Answer()\nAnswer() :- Has_n_stripes(\"American flag\", n_stripes), N_voice_actors(\"Goofy\", n_actors1), N_voice_actors(\"Bugs Bunny\", n_actors2), n_stripes >= n_actors1 + n_actors2.\n.output Answer", "completions": [".decl Has_n_stripes(Object:symbol, N_stripes:float)\nHas_n_stripes(\"American flag\", 13).\n.decl N_voice_actors(Character:symbol, N_actors:float)\nN_voice_actors(\"Goofy\", 1).\nN_voice_actors(\"Bugs Bunny\", 1).\n.decl Answer()\nAnswer() :- Has_n_stripes(\"American flag\", n_stripes), N_voice_actors(\"Goofy\", n_actors1), N_voice_actors(\"Bugs Bunny\", n_actors2), n_stripes >= n_actors1 + n_actors2.\n.output Answer"]}
{"id": 269, "answer": false, "completion": ".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"Europa surface\", -160).\nHas_temperature(\"egg frying temperature\", 65).\n.decl Answer()\nAnswer() :- Has_temperature(\"Europa surface\", temp1), Has_temperature(\"egg frying temperature\", temp2), temp1 >= temp2.\n.output Answer", "completions": [".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"Europa surface\", -160).\nHas_temperature(\"egg frying temperature\", 65).\n.decl Answer()\nAnswer() :- Has_temperature(\"Europa surface\", temp1), Has_temperature(\"egg frying temperature\", temp2), temp1 >= temp2.\n.output Answer"]}
{"id": 270, "answer": false, "completion": ".decl Started_in_year(Show:symbol, Year:float)\nStarted_in_year(\"The Joy of Painting\", 1983).\n.decl Ended_in_year(Show:symbol, Year:float)\nEnded_in_year(\"The Joy of Painting\", 1994).\n.decl Current_year(Year:float)\nCurrent_year(2022).\n.decl Answer()\nAnswer() :- Started_in_year(\"The Joy of Painting\", start_year), Ended_in_year(\"The Joy of Painting\", end_year), Current_year(current_year), start_year <= current_year, current_year <= end_year.\n.output Answer", "completions": [".decl Started_in_year(Show:symbol, Year:float)\nStarted_in_year(\"The Joy of Painting\", 1983).\n.decl Ended_in_year(Show:symbol, Year:float)\nEnded_in_year(\"The Joy of Painting\", 1994).\n.decl Current_year(Year:float)\nCurrent_year(2022).\n.decl Answer()\nAnswer() :- Started_in_year(\"The Joy of Painting\", start_year), Ended_in_year(\"The Joy of Painting\", end_year), Current_year(current_year), start_year <= current_year, current_year <= end_year.\n.output Answer"]}
{"id": 271, "answer": true, "completion": ".decl Owns(Company_A:symbol, Company_B:symbol)\nOwns(\"Disney\", \"Marvel\").\n.decl Is_major_comic_publisher(Company:symbol)\nIs_major_comic_publisher(\"Marvel\").\n.decl Answer()\nAnswer() :- Owns(\"Disney\", company), Is_major_comic_publisher(company).\n.output Answer", "completions": [".decl Owns(Company_A:symbol, Company_B:symbol)\nOwns(\"Disney\", \"Marvel\").\n.decl Is_major_comic_publisher(Company:symbol)\nIs_major_comic_publisher(\"Marvel\").\n.decl Answer()\nAnswer() :- Owns(\"Disney\", company), Is_major_comic_publisher(company).\n.output Answer"]}
{"id": 272, "answer": true, "completion": ".decl Has_survival_rate(Country:symbol, Cancer_type:symbol, Survival_rate:float)\nHas_survival_rate(\"Japan\", \"breast cancer\", 89.6).\nHas_survival_rate(\"Sweden\", \"breast cancer\", 87.4).\n.decl Answer()\nAnswer() :- Has_survival_rate(\"Japan\", \"breast cancer\", survival_rate1), Has_survival_rate(\"Sweden\", \"breast cancer\", survival_rate2), survival_rate1 > survival_rate2.\n.output Answer", "completions": [".decl Has_survival_rate(Country:symbol, Cancer_type:symbol, Survival_rate:float)\nHas_survival_rate(\"Japan\", \"breast cancer\", 89.6).\nHas_survival_rate(\"Sweden\", \"breast cancer\", 87.4).\n.decl Answer()\nAnswer() :- Has_survival_rate(\"Japan\", \"breast cancer\", survival_rate1), Has_survival_rate(\"Sweden\", \"breast cancer\", survival_rate2), survival_rate1 > survival_rate2.\n.output Answer"]}
{"id": 273, "answer": false, "completion": ".decl Inspired_by(Author:symbol, Inspiration:symbol)\nInspired_by(\"Washington Irving\", \"European folklore\").\n.decl Category(Category:symbol, Example:symbol)\nCategory(\"European folklore\", \"Irish mythology\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Washington Irving\", inspiration), Category(inspiration, \"Irish mythology\").\n.output Answer", "completions": [".decl Inspired_by(Author:symbol, Inspiration:symbol)\nInspired_by(\"Washington Irving\", \"European folklore\").\n.decl Category(Category:symbol, Example:symbol)\nCategory(\"European folklore\", \"Irish mythology\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Washington Irving\", inspiration), Category(inspiration, \"Irish mythology\").\n.output Answer"]}
{"id": 274, "answer": true, "completion": ".decl Part_of_exercise(Body_part:symbol, Exercise:symbol)\nPart_of_exercise(\"tibia\", \"running\").\nPart_of_exercise(\"tibia\", \"jumping\").\nPart_of_exercise(\"tibia\", \"balance\").\n.decl Is_floor_exercise(Exercise:symbol)\nIs_floor_exercise(\"running\").\nIs_floor_exercise(\"jumping\").\nIs_floor_exercise(\"balance\").\n.decl Answer()\nAnswer() :- Part_of_exercise(\"tibia\", exercise), Is_floor_exercise(exercise).\n.output Answer", "completions": [".decl Part_of_exercise(Body_part:symbol, Exercise:symbol)\nPart_of_exercise(\"tibia\", \"running\").\nPart_of_exercise(\"tibia\", \"jumping\").\nPart_of_exercise(\"tibia\", \"balance\").\n.decl Is_floor_exercise(Exercise:symbol)\nIs_floor_exercise(\"running\").\nIs_floor_exercise(\"jumping\").\nIs_floor_exercise(\"balance\").\n.decl Answer()\nAnswer() :- Part_of_exercise(\"tibia\", exercise), Is_floor_exercise(exercise).\n.output Answer"]}
{"id": 275, "answer": false, "completion": ".decl Is_character(Character:symbol, Profession:symbol)\nIs_character(\"Nancy Drew\", \"detective\").\n.decl Is_profession(Profession1:symbol, Profession2:symbol)\nIs_profession(\"detective\", \"private investigator\").\n.decl Answer()\nAnswer() :- Is_character(\"Emma Roberts's Nancy Drew\", profession1), Is_profession(profession1, \"private investigator\").\n.output Answer", "completions": [".decl Is_character(Character:symbol, Profession:symbol)\nIs_character(\"Nancy Drew\", \"detective\").\n.decl Is_profession(Profession1:symbol, Profession2:symbol)\nIs_profession(\"detective\", \"private investigator\").\n.decl Answer()\nAnswer() :- Is_character(\"Emma Roberts's Nancy Drew\", profession1), Is_profession(profession1, \"private investigator\").\n.output Answer"]}
{"id": 276, "answer": false, "completion": ".decl Is_minor(Age:float)\nIs_minor(age) :- age < 18.\n\n.decl Can_replicate(Person:symbol, Experiment:symbol)\nCan_replicate(\"minor\", \"double-slit experiment\").\n\n.decl Answer()\nAnswer() :- Is_minor(age), Can_replicate(\"minor\", \"double-slit experiment\").\n.output Answer", "completions": [".decl Is_minor(Age:float)\nIs_minor(age) :- age < 18.\n\n.decl Can_replicate(Person:symbol, Experiment:symbol)\nCan_replicate(\"minor\", \"double-slit experiment\").\n\n.decl Answer()\nAnswer() :- Is_minor(age), Can_replicate(\"minor\", \"double-slit experiment\").\n.output Answer"]}
{"id": 277, "answer": true, "completion": ".decl Nobel_Prize_Categories(Original:symbol, Current:symbol)\nNobel_Prize_Categories(\"Physics\", \"Physics\").\nNobel_Prize_Categories(\"Chemistry\", \"Chemistry\").\nNobel_Prize_Categories(\"Medicine\", \"Medicine\").\nNobel_Prize_Categories(\"Literature\", \"Literature\").\nNobel_Prize_Categories(\"Peace\", \"Peace\").\nNobel_Prize_Categories(\"Economic Sciences\", \"Economic Sciences\").\n.decl Original_Categories(Category:symbol)\nOriginal_Categories(\"Physics\").\nOriginal_Categories(\"Chemistry\").\nOriginal_Categories(\"Medicine\").\nOriginal_Categories(\"Literature\").\nOriginal_Categories(\"Peace\").\n.decl Current_Categories(Category:symbol)\nCurrent_Categories(\"Physics\").\nCurrent_Categories(\"Chemistry\").\nCurrent_Categories(\"Medicine\").\nCurrent_Categories(\"Literature\").\nCurrent_Categories(\"Peace\").\nCurrent_Categories(\"Economic Sciences\").\n.decl Answer()\nAnswer() :- Original_Categories(original), Current_Categories(current), original != current.\n.output Answer", "completions": [".decl Nobel_Prize_Categories(Original:symbol, Current:symbol)\nNobel_Prize_Categories(\"Physics\", \"Physics\").\nNobel_Prize_Categories(\"Chemistry\", \"Chemistry\").\nNobel_Prize_Categories(\"Medicine\", \"Medicine\").\nNobel_Prize_Categories(\"Literature\", \"Literature\").\nNobel_Prize_Categories(\"Peace\", \"Peace\").\nNobel_Prize_Categories(\"Economic Sciences\", \"Economic Sciences\").\n.decl Original_Categories(Category:symbol)\nOriginal_Categories(\"Physics\").\nOriginal_Categories(\"Chemistry\").\nOriginal_Categories(\"Medicine\").\nOriginal_Categories(\"Literature\").\nOriginal_Categories(\"Peace\").\n.decl Current_Categories(Category:symbol)\nCurrent_Categories(\"Physics\").\nCurrent_Categories(\"Chemistry\").\nCurrent_Categories(\"Medicine\").\nCurrent_Categories(\"Literature\").\nCurrent_Categories(\"Peace\").\nCurrent_Categories(\"Economic Sciences\").\n.decl Answer()\nAnswer() :- Original_Categories(original), Current_Categories(current), original != current.\n.output Answer"]}
{"id": 278, "answer": false, "completion": ".decl Is_member_of_party(Person:symbol, Party:symbol)\nIs_member_of_party(\"Alice\", \"Green Party of England and Wales\").\n.decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Alice\", \"United Kingdom\").\n.decl Can_vote_in_country(Person:symbol, Country:symbol)\nCan_vote_in_country(person, \"USA\") :- Has_citizenship(person, \"USA\").\n.decl Answer()\nAnswer() :- Is_member_of_party(person, \"Green Party of England and Wales\"), Can_vote_in_country(person, \"USA\").\n.output Answer", "completions": [".decl Is_member_of_party(Person:symbol, Party:symbol)\nIs_member_of_party(\"Alice\", \"Green Party of England and Wales\").\n.decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Alice\", \"United Kingdom\").\n.decl Can_vote_in_country(Person:symbol, Country:symbol)\nCan_vote_in_country(person, \"USA\") :- Has_citizenship(person, \"USA\").\n.decl Answer()\nAnswer() :- Is_member_of_party(person, \"Green Party of England and Wales\"), Can_vote_in_country(person, \"USA\").\n.output Answer"]}
{"id": 279, "answer": true, "completion": ".decl Suffered_fate(Person:symbol, Fate:symbol)\nSuffered_fate(\"Alan Turing\", \"suicide\").\nSuffered_fate(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- Suffered_fate(\"Alan Turing\", fate1), Suffered_fate(\"Abraham Lincoln\", fate2), fate1 = fate2.\n.output Answer", "completions": [".decl Suffered_fate(Person:symbol, Fate:symbol)\nSuffered_fate(\"Alan Turing\", \"suicide\").\nSuffered_fate(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- Suffered_fate(\"Alan Turing\", fate1), Suffered_fate(\"Abraham Lincoln\", fate2), fate1 = fate2.\n.output Answer"]}
{"id": 280, "answer": true, "completion": ".decl Guilty_of_catchphrase(Person:symbol, Catchphrase:symbol)\nGuilty_of_catchphrase(\"John Kerry\", \"flip-flop\").\n.decl Attack_in_year(Catchphrase:symbol, Year:float)\nAttack_in_year(\"flip-flop\", 2004).\n.decl Answer()\nAnswer() :- Guilty_of_catchphrase(\"Rand Paul\", catchphrase), Attack_in_year(catchphrase, 2004).\n.output Answer", "completions": [".decl Guilty_of_catchphrase(Person:symbol, Catchphrase:symbol)\nGuilty_of_catchphrase(\"John Kerry\", \"flip-flop\").\n.decl Attack_in_year(Catchphrase:symbol, Year:float)\nAttack_in_year(\"flip-flop\", 2004).\n.decl Answer()\nAnswer() :- Guilty_of_catchphrase(\"Rand Paul\", catchphrase), Attack_in_year(catchphrase, 2004).\n.output Answer"]}
{"id": 281, "answer": false, "completion": ".decl Is_gas(Element:symbol)\nIs_gas(\"argon\").\n.decl Is_chewable(Object:symbol)\nIs_chewable(\"food\").\n.decl Answer()\nAnswer() :- Is_chewable(\"argon\").\nAnswer() :- !Is_gas(\"argon\").\n.output Answer", "completions": [".decl Is_gas(Element:symbol)\nIs_gas(\"argon\").\n.decl Is_chewable(Object:symbol)\nIs_chewable(\"food\").\n.decl Answer()\nAnswer() :- Is_chewable(\"argon\").\nAnswer() :- !Is_gas(\"argon\").\n.output Answer"]}
{"id": 282, "answer": false, "completion": ".decl Known_for(Person:symbol, Activity:symbol, Success:symbol)\nKnown_for(\"Lucille Ball\", \"winemaking\", \"no\").\n.decl Answer()\nAnswer() :- Known_for(\"Lucille Ball\", \"winemaking\", \"yes\").\nAnswer() :- Known_for(\"Lucille Ball\", \"winemaking\", \"successful\").\n.output Answer", "completions": [".decl Known_for(Person:symbol, Activity:symbol, Success:symbol)\nKnown_for(\"Lucille Ball\", \"winemaking\", \"no\").\n.decl Answer()\nAnswer() :- Known_for(\"Lucille Ball\", \"winemaking\", \"yes\").\nAnswer() :- Known_for(\"Lucille Ball\", \"winemaking\", \"successful\").\n.output Answer"]}
{"id": 283, "answer": true, "completion": ".decl Used_in(Object:symbol, Process:symbol)\nUsed_in(\"wood\", \"guitar manufacturing\").\nUsed_in(\"metal\", \"guitar manufacturing\").\nUsed_in(\"plastic\", \"guitar manufacturing\").\n.decl Made_of(Material:symbol, Object:symbol)\nMade_of(\"shell\", \"oyster\").\n.decl Answer()\nAnswer() :- Made_of(material, \"oyster\"), Used_in(material, \"guitar manufacturing\").\n.output Answer", "completions": [".decl Used_in(Object:symbol, Process:symbol)\nUsed_in(\"wood\", \"guitar manufacturing\").\nUsed_in(\"metal\", \"guitar manufacturing\").\nUsed_in(\"plastic\", \"guitar manufacturing\").\n.decl Made_of(Material:symbol, Object:symbol)\nMade_of(\"shell\", \"oyster\").\n.decl Answer()\nAnswer() :- Made_of(material, \"oyster\"), Used_in(material, \"guitar manufacturing\").\n.output Answer"]}
{"id": 284, "answer": true, "completion": ".decl Plays_instrument(Musician:symbol, Instrument:symbol)\nPlays_instrument(\"James Cotton\", \"harmonica\").\n.decl Is_strident(Instrument:symbol)\nIs_strident(\"harmonica\").\n.decl Suitable_for_smooth_jazz(Instrument:symbol)\nSuitable_for_smooth_jazz(\"saxophone\").\nSuitable_for_smooth_jazz(\"piano\").\nSuitable_for_smooth_jazz(\"guitar\").\n.decl Answer()\nAnswer() :- Plays_instrument(\"James Cotton\", instrument), Is_strident(instrument), !Suitable_for_smooth_jazz(instrument).\n.output Answer", "completions": [".decl Plays_instrument(Musician:symbol, Instrument:symbol)\nPlays_instrument(\"James Cotton\", \"harmonica\").\n.decl Is_strident(Instrument:symbol)\nIs_strident(\"harmonica\").\n.decl Suitable_for_smooth_jazz(Instrument:symbol)\nSuitable_for_smooth_jazz(\"saxophone\").\nSuitable_for_smooth_jazz(\"piano\").\nSuitable_for_smooth_jazz(\"guitar\").\n.decl Answer()\nAnswer() :- Plays_instrument(\"James Cotton\", instrument), Is_strident(instrument), !Suitable_for_smooth_jazz(instrument).\n.output Answer"]}
{"id": 285, "answer": false, "completion": ".decl Is_related(Animal_A:symbol, Animal_B:symbol)\nIs_related(\"emu\", \"ostrich\").\nIs_related(\"elk\", \"deer\").\n.decl Answer()\nAnswer() :- Is_related(\"emu\", animal), Is_related(\"elk\", animal).\n.output Answer", "completions": [".decl Is_related(Animal_A:symbol, Animal_B:symbol)\nIs_related(\"emu\", \"ostrich\").\nIs_related(\"elk\", \"deer\").\n.decl Answer()\nAnswer() :- Is_related(\"emu\", animal), Is_related(\"elk\", animal).\n.output Answer"]}
{"id": 286, "answer": false, "completion": ".decl In_museum(Artwork:symbol, Museum:symbol)\nIn_museum(\"Mona Lisa\", \"Louvre\").\nIn_museum(\"Venus de Milo\", \"Louvre\").\n.decl Answer()\nAnswer() :- In_museum(\"Mona Lisa\", museum1), In_museum(\"Venus de Milo\", museum2), museum1 = museum2.\n.output Answer", "completions": [".decl In_museum(Artwork:symbol, Museum:symbol)\nIn_museum(\"Mona Lisa\", \"Louvre\").\nIn_museum(\"Venus de Milo\", \"Louvre\").\n.decl Answer()\nAnswer() :- In_museum(\"Mona Lisa\", museum1), In_museum(\"Venus de Milo\", museum2), museum1 = museum2.\n.output Answer"]}
{"id": 287, "answer": false, "completion": ".decl Vice_President(Person:symbol, Order:float)\nVice_President(\"John Adams\", 1).\n.decl Has_descendance(Person:symbol, Descendance:symbol)\nHas_descendance(\"John Adams\", \"British\").\n.decl Answer()\nAnswer() :- Vice_President(person, 1), Has_descendance(person, \"Ottoman\").\n.output Answer", "completions": [".decl Vice_President(Person:symbol, Order:float)\nVice_President(\"John Adams\", 1).\n.decl Has_descendance(Person:symbol, Descendance:symbol)\nHas_descendance(\"John Adams\", \"British\").\n.decl Answer()\nAnswer() :- Vice_President(person, 1), Has_descendance(person, \"Ottoman\").\n.output Answer"]}
{"id": 288, "answer": false, "completion": ".decl Has_sequels(Movie:symbol, N_sequels:float)\nHas_sequels(\"Gremlins\", 2).\nHas_sequels(\"Matrix\", 3).\n.decl Answer()\nAnswer() :- Has_sequels(\"Gremlins\", n_sequels1), Has_sequels(\"Matrix\", n_sequels2), n_sequels1 = n_sequels2.\n.output Answer", "completions": [".decl Has_sequels(Movie:symbol, N_sequels:float)\nHas_sequels(\"Gremlins\", 2).\nHas_sequels(\"Matrix\", 3).\n.decl Answer()\nAnswer() :- Has_sequels(\"Gremlins\", n_sequels1), Has_sequels(\"Matrix\", n_sequels2), n_sequels1 = n_sequels2.\n.output Answer"]}
{"id": 289, "answer": true, "completion": ".decl Is_polymath(Person:symbol)\nIs_polymath(\"Leonardo da Vinci\").\nIs_polymath(\"Galileo Galilei\").\nIs_polymath(\"Isaac Newton\").\nIs_polymath(\"Benjamin Franklin\").\nIs_polymath(\"Thomas Jefferson\").\nIs_polymath(\"Tony Stark\").\n.decl Answer()\nAnswer() :- Is_polymath(\"Tony Stark\").\n.output Answer", "completions": [".decl Is_polymath(Person:symbol)\nIs_polymath(\"Leonardo da Vinci\").\nIs_polymath(\"Galileo Galilei\").\nIs_polymath(\"Isaac Newton\").\nIs_polymath(\"Benjamin Franklin\").\nIs_polymath(\"Thomas Jefferson\").\nIs_polymath(\"Tony Stark\").\n.decl Answer()\nAnswer() :- Is_polymath(\"Tony Stark\").\n.output Answer"]}
{"id": 290, "answer": false, "completion": ".decl Has_license(Person:symbol, License_type:symbol)\nHas_license(\"person1\", \"driver's license\").\n.decl Works_in_transport(Person:symbol, Transport_type:symbol)\nWorks_in_transport(\"person1\", \"aviation fuel\").\n.decl Required_license(Transport_type:symbol, License_type:symbol)\nRequired_license(\"aviation fuel\", \"hazardous materials endorsement\").\n.decl Answer()\nAnswer() :- Has_license(person, \"driver's license\"), Works_in_transport(person, \"aviation fuel\"), !Required_license(\"aviation fuel\", \"hazardous materials endorsement\").\nAnswer() :- Has_license(person, \"driver's license\"), Has_license(person, \"hazardous materials endorsement\"), Works_in_transport(person, \"aviation fuel\").\n.output Answer", "completions": [".decl Has_license(Person:symbol, License_type:symbol)\nHas_license(\"person1\", \"driver's license\").\n.decl Works_in_transport(Person:symbol, Transport_type:symbol)\nWorks_in_transport(\"person1\", \"aviation fuel\").\n.decl Required_license(Transport_type:symbol, License_type:symbol)\nRequired_license(\"aviation fuel\", \"hazardous materials endorsement\").\n.decl Answer()\nAnswer() :- Has_license(person, \"driver's license\"), Works_in_transport(person, \"aviation fuel\"), !Required_license(\"aviation fuel\", \"hazardous materials endorsement\").\nAnswer() :- Has_license(person, \"driver's license\"), Has_license(person, \"hazardous materials endorsement\"), Works_in_transport(person, \"aviation fuel\").\n.output Answer"]}
{"id": 291, "answer": true, "completion": ".decl Received_gold_medals(Country:symbol, N_gold_medals:float)\nReceived_gold_medals(\"Soviet Union\", 49).\nReceived_gold_medals(\"East Germany\", 40).\nReceived_gold_medals(\"United States\", 34).\n.decl Exists(Country:symbol)\nExists(\"United States\").\n.decl Answer()\nAnswer() :- Received_gold_medals(country, n_gold_medals), !Exists(country), Received_gold_medals(other_country, other_n_gold_medals), n_gold_medals >= other_n_gold_medals.\n.output Answer", "completions": [".decl Received_gold_medals(Country:symbol, N_gold_medals:float)\nReceived_gold_medals(\"Soviet Union\", 49).\nReceived_gold_medals(\"East Germany\", 40).\nReceived_gold_medals(\"United States\", 34).\n.decl Exists(Country:symbol)\nExists(\"United States\").\n.decl Answer()\nAnswer() :- Received_gold_medals(country, n_gold_medals), !Exists(country), Received_gold_medals(other_country, other_n_gold_medals), n_gold_medals >= other_n_gold_medals.\n.output Answer"]}
{"id": 292, "answer": true, "completion": ".decl Lasts_n_minutes(Event:symbol, N_minutes:float)\nLasts_n_minutes(\"open heart surgery\", 240).\nLasts_n_minutes(\"Swan Lake\", 160).\n.decl Answer()\nAnswer() :- Lasts_n_minutes(\"open heart surgery\", duration1), Lasts_n_minutes(\"Swan Lake\", duration2), duration1 < duration2.\n.output Answer", "completions": [".decl Lasts_n_minutes(Event:symbol, N_minutes:float)\nLasts_n_minutes(\"open heart surgery\", 240).\nLasts_n_minutes(\"Swan Lake\", 160).\n.decl Answer()\nAnswer() :- Lasts_n_minutes(\"open heart surgery\", duration1), Lasts_n_minutes(\"Swan Lake\", duration2), duration1 < duration2.\n.output Answer"]}
{"id": 293, "answer": false, "completion": ".decl Has_speed(Method:symbol, Speed:float)\nHas_speed(\"Yellow Pages\", 0.2).\nHas_speed(\"Internet\", 0.9).\nHas_speed(\"Phone Directory\", 0.5).\n.decl Fastest(Method:symbol)\nFastest(method) :- Has_speed(method, speed1), !Has_speed(other_method, speed2), speed1 < speed2.\n.decl Answer()\nAnswer() :- Fastest(\"Yellow Pages\").\n.output Answer", "completions": [".decl Has_speed(Method:symbol, Speed:float)\nHas_speed(\"Yellow Pages\", 0.2).\nHas_speed(\"Internet\", 0.9).\nHas_speed(\"Phone Directory\", 0.5).\n.decl Fastest(Method:symbol)\nFastest(method) :- Has_speed(method, speed1), !Has_speed(other_method, speed2), speed1 < speed2.\n.decl Answer()\nAnswer() :- Fastest(\"Yellow Pages\").\n.output Answer"]}
{"id": 294, "answer": false, "completion": ".decl Served_on_SC(Person:symbol, Position:symbol)\nServed_on_SC(\"neanderthal\", \"Supreme Court of the United States\").\n.decl Is_human(Person:symbol)\nIs_human(\"neanderthal\").\n.decl Answer()\nAnswer() :- Served_on_SC(\"neanderthal\", \"Supreme Court of the United States\"), !Is_human(\"neanderthal\").\n.output Answer", "completions": [".decl Served_on_SC(Person:symbol, Position:symbol)\nServed_on_SC(\"neanderthal\", \"Supreme Court of the United States\").\n.decl Is_human(Person:symbol)\nIs_human(\"neanderthal\").\n.decl Answer()\nAnswer() :- Served_on_SC(\"neanderthal\", \"Supreme Court of the United States\"), !Is_human(\"neanderthal\").\n.output Answer"]}
{"id": 295, "answer": false, "completion": ".decl Toured_with(Band_A:symbol, Band_B:symbol)\nToured_with(\"Maroon 5\", \"Nirvana\").\n.decl Answer()\nAnswer() :- Toured_with(\"Maroon 5\", \"Nirvana\").\n.output Answer", "completions": [".decl Toured_with(Band_A:symbol, Band_B:symbol)\nToured_with(\"Maroon 5\", \"Nirvana\").\n.decl Answer()\nAnswer() :- Toured_with(\"Maroon 5\", \"Nirvana\").\n.output Answer"]}
{"id": 296, "answer": false, "completion": ".decl Is_location_for(Event:symbol, Location:symbol)\nIs_location_for(\"Groundhog Day\", \"North America\").\n.decl Is_continent(Location:symbol, Continent:symbol)\nIs_continent(\"North America\", \"America\").\nIs_continent(\"Antarctica\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Is_location_for(\"Groundhog Day\", location), Is_continent(location, \"Antarctica\").\n.output Answer", "completions": [".decl Is_location_for(Event:symbol, Location:symbol)\nIs_location_for(\"Groundhog Day\", \"North America\").\n.decl Is_continent(Location:symbol, Continent:symbol)\nIs_continent(\"North America\", \"America\").\nIs_continent(\"Antarctica\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Is_location_for(\"Groundhog Day\", location), Is_continent(location, \"Antarctica\").\n.output Answer"]}
{"id": 297, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"helium\", 0.0001786).\nHas_density(\"air\", 0.001225).\n.decl Affects_voice(Object:symbol, Effect:symbol)\nAffects_voice(\"helium\", \"higher\").\nAffects_voice(\"air\", \"normal\").\n.decl Answer()\nAnswer() :- Has_density(\"helium\", density1), Has_density(\"air\", density2), density1 < density2, Affects_voice(\"helium\", \"deeper\").\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"helium\", 0.0001786).\nHas_density(\"air\", 0.001225).\n.decl Affects_voice(Object:symbol, Effect:symbol)\nAffects_voice(\"helium\", \"higher\").\nAffects_voice(\"air\", \"normal\").\n.decl Answer()\nAnswer() :- Has_density(\"helium\", density1), Has_density(\"air\", density2), density1 < density2, Affects_voice(\"helium\", \"deeper\").\n.output Answer"]}
{"id": 298, "answer": true, "completion": ".decl Is_fuel(Object:symbol, Vehicle:symbol)\nIs_fuel(\"petroleum jelly\", \"car\").\n.decl Answer()\nAnswer() :- !Is_fuel(\"petroleum jelly\", \"car\").\n.output Answer", "completions": [".decl Is_fuel(Object:symbol, Vehicle:symbol)\nIs_fuel(\"petroleum jelly\", \"car\").\n.decl Answer()\nAnswer() :- !Is_fuel(\"petroleum jelly\", \"car\").\n.output Answer"]}
{"id": 299, "answer": false, "completion": ".decl SevenDeadlySins(Sin:symbol)\nSevenDeadlySins(\"pride\").\nSevenDeadlySins(\"greed\").\nSevenDeadlySins(\"lust\").\nSevenDeadlySins(\"envy\").\nSevenDeadlySins(\"gluttony\").\nSevenDeadlySins(\"wrath\").\nSevenDeadlySins(\"sloth\").\n\n.decl Prevalence(Sin:symbol, Prevalence:float)\n// We cannot determine the actual prevalence of each sin, so we assume equal prevalence for all.\nPrevalence(\"pride\", 1).\nPrevalence(\"greed\", 1).\nPrevalence(\"lust\", 1).\nPrevalence(\"envy\", 1).\nPrevalence(\"gluttony\", 1).\nPrevalence(\"wrath\", 1).\nPrevalence(\"sloth\", 1).\n\n.decl Answer()\nAnswer() :- Prevalence(\"greed\", prevalence1), SevenDeadlySins(sin2), Prevalence(sin2, prevalence2), sin2 != \"greed\", prevalence1 > prevalence2.\n\n.output Answer", "completions": [".decl SevenDeadlySins(Sin:symbol)\nSevenDeadlySins(\"pride\").\nSevenDeadlySins(\"greed\").\nSevenDeadlySins(\"lust\").\nSevenDeadlySins(\"envy\").\nSevenDeadlySins(\"gluttony\").\nSevenDeadlySins(\"wrath\").\nSevenDeadlySins(\"sloth\").\n\n.decl Prevalence(Sin:symbol, Prevalence:float)\n// We cannot determine the actual prevalence of each sin, so we assume equal prevalence for all.\nPrevalence(\"pride\", 1).\nPrevalence(\"greed\", 1).\nPrevalence(\"lust\", 1).\nPrevalence(\"envy\", 1).\nPrevalence(\"gluttony\", 1).\nPrevalence(\"wrath\", 1).\nPrevalence(\"sloth\", 1).\n\n.decl Answer()\nAnswer() :- Prevalence(\"greed\", prevalence1), SevenDeadlySins(sin2), Prevalence(sin2, prevalence2), sin2 != \"greed\", prevalence1 > prevalence2.\n\n.output Answer"]}
{"id": 300, "answer": false, "completion": ".decl Is_CEO(Person:symbol, Company:symbol)\nIs_CEO(\"Carlos Ghosn\", \"Nissan\").\n.decl Is_fugitive(Person:symbol)\nIs_fugitive(\"Carlos Ghosn\").\n.decl Answer()\nAnswer() :- Is_CEO(person, \"Nissan\"), Is_fugitive(person).\n.output Answer", "completions": [".decl Is_CEO(Person:symbol, Company:symbol)\nIs_CEO(\"Carlos Ghosn\", \"Nissan\").\n.decl Is_fugitive(Person:symbol)\nIs_fugitive(\"Carlos Ghosn\").\n.decl Answer()\nAnswer() :- Is_CEO(person, \"Nissan\"), Is_fugitive(person).\n.output Answer"]}
{"id": 301, "answer": true, "completion": ".decl Takes_substance(Person:symbol, Substance:symbol)\nTakes_substance(\"drag king\", \"testosterone\").\n.decl Looks_masculine(Person:symbol)\nLooks_masculine(\"drag king\").\n.decl Answer()\nAnswer() :- Takes_substance(\"drag king\", \"testosterone\"), Looks_masculine(\"drag king\").\n.output Answer", "completions": [".decl Takes_substance(Person:symbol, Substance:symbol)\nTakes_substance(\"drag king\", \"testosterone\").\n.decl Looks_masculine(Person:symbol)\nLooks_masculine(\"drag king\").\n.decl Answer()\nAnswer() :- Takes_substance(\"drag king\", \"testosterone\"), Looks_masculine(\"drag king\").\n.output Answer"]}
{"id": 302, "answer": false, "completion": ".decl Is_crustacean(Animal:symbol)\nIs_crustacean(\"crab\").\nIs_crustacean(\"lobster\").\nIs_crustacean(\"shrimp\").\n\n.decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"crab\", \"ocean\").\nLives_in(\"lobster\", \"ocean\").\nLives_in(\"shrimp\", \"ocean\").\nLives_in(\"crayfish\", \"freshwater\").\n\n.decl Is_ocean_living_crustacean(Animal:symbol)\nIs_ocean_living_crustacean(Animal) :- Is_crustacean(Animal), Lives_in(Animal, \"ocean\").\n\n.decl Answer()\nAnswer() :- !Is_crustacean(Animal), !Lives_in(Animal, \"ocean\"), !Is_ocean_living_crustacean(Animal).\n.output Answer", "completions": [".decl Is_crustacean(Animal:symbol)\nIs_crustacean(\"crab\").\nIs_crustacean(\"lobster\").\nIs_crustacean(\"shrimp\").\n\n.decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"crab\", \"ocean\").\nLives_in(\"lobster\", \"ocean\").\nLives_in(\"shrimp\", \"ocean\").\nLives_in(\"crayfish\", \"freshwater\").\n\n.decl Is_ocean_living_crustacean(Animal:symbol)\nIs_ocean_living_crustacean(Animal) :- Is_crustacean(Animal), Lives_in(Animal, \"ocean\").\n\n.decl Answer()\nAnswer() :- !Is_crustacean(Animal), !Lives_in(Animal, \"ocean\"), !Is_ocean_living_crustacean(Animal).\n.output Answer"]}
{"id": 303, "answer": true, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Paul Bunyan\", \"lumberjack\").\n.decl Is_urban_profession(Profession:symbol)\nIs_urban_profession(\"urban planner\").\n.decl Answer()\nAnswer() :- Has_profession(\"Paul Bunyan\", profession), Is_urban_profession(profession).\nAnswer() :- Has_profession(\"Paul Bunyan\", \"lumberjack\"), !Is_urban_profession(\"lumberjack\").\n.output Answer", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Paul Bunyan\", \"lumberjack\").\n.decl Is_urban_profession(Profession:symbol)\nIs_urban_profession(\"urban planner\").\n.decl Answer()\nAnswer() :- Has_profession(\"Paul Bunyan\", profession), Is_urban_profession(profession).\nAnswer() :- Has_profession(\"Paul Bunyan\", \"lumberjack\"), !Is_urban_profession(\"lumberjack\").\n.output Answer"]}
{"id": 304, "answer": true, "completion": ".decl Reaches_sunlight(Location:symbol, Depth:float)\nReaches_sunlight(\"Black Sea\", 200).\n.decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Black Sea\", 2212).\n.decl Answer()\nAnswer() :- Reaches_sunlight(location, depth1), Has_depth(location, depth2), depth1 >= depth2.\n.output Answer", "completions": [".decl Reaches_sunlight(Location:symbol, Depth:float)\nReaches_sunlight(\"Black Sea\", 200).\n.decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Black Sea\", 2212).\n.decl Answer()\nAnswer() :- Reaches_sunlight(location, depth1), Has_depth(location, depth2), depth1 >= depth2.\n.output Answer"]}
{"id": 305, "answer": true, "completion": ".decl Is_artillery(Weapon:symbol)\nIs_artillery(\"cannon\").\nIs_artillery(\"howitzer\").\nIs_artillery(\"mortar\").\nIs_artillery(\"rocket_launcher\").\n.decl Is_improper_classification(Weapon:symbol, Classification:symbol)\nIs_improper_classification(\"slingshot\", \"artillery\").\n.decl Answer()\nAnswer() :- Is_improper_classification(\"slingshot\", \"artillery\"), !Is_artillery(\"slingshot\").\n.output Answer", "completions": [".decl Is_artillery(Weapon:symbol)\nIs_artillery(\"cannon\").\nIs_artillery(\"howitzer\").\nIs_artillery(\"mortar\").\nIs_artillery(\"rocket_launcher\").\n.decl Is_improper_classification(Weapon:symbol, Classification:symbol)\nIs_improper_classification(\"slingshot\", \"artillery\").\n.decl Answer()\nAnswer() :- Is_improper_classification(\"slingshot\", \"artillery\"), !Is_artillery(\"slingshot\").\n.output Answer"]}
{"id": 306, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Start_year:float, End_year:float)\nHappens_in_time(\"9/11\", 2001, 2001).\nHappens_in_time(\"don't ask don't tell\", 1994, 2011).\n.decl Answer()\nAnswer() :- Happens_in_time(\"9/11\", start_year1, end_year1), Happens_in_time(\"don't ask don't tell\", start_year2, end_year2), end_year1 <= end_year2, start_year1 >= start_year2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Start_year:float, End_year:float)\nHappens_in_time(\"9/11\", 2001, 2001).\nHappens_in_time(\"don't ask don't tell\", 1994, 2011).\n.decl Answer()\nAnswer() :- Happens_in_time(\"9/11\", start_year1, end_year1), Happens_in_time(\"don't ask don't tell\", start_year2, end_year2), end_year1 <= end_year2, start_year1 >= start_year2.\n.output Answer"]}
{"id": 307, "answer": true, "completion": ".decl Has_n_labors(Hero:symbol, N_labors:float)\nHas_n_labors(\"Heracles\", 12).\n.decl Bakers_dozen(Count:float)\nBakers_dozen(13).\n.decl Answer()\nAnswer() :- Has_n_labors(\"Heracles\", n_labors), Bakers_dozen(count), n_labors > count.\n.output Answer", "completions": [".decl Has_n_labors(Hero:symbol, N_labors:float)\nHas_n_labors(\"Heracles\", 12).\n.decl Bakers_dozen(Count:float)\nBakers_dozen(13).\n.decl Answer()\nAnswer() :- Has_n_labors(\"Heracles\", n_labors), Bakers_dozen(count), n_labors > count.\n.output Answer"]}
{"id": 308, "answer": false, "completion": ".decl Event_type(Event:symbol, Type:symbol)\nEvent_type(\"Thanksgiving\", \"celebration\").\nEvent_type(\"Thanksgiving\", \"day of mourning\").\n.decl Answer()\nAnswer() :- Event_type(\"Thanksgiving\", \"day of mourning\").\n.output Answer", "completions": [".decl Event_type(Event:symbol, Type:symbol)\nEvent_type(\"Thanksgiving\", \"celebration\").\nEvent_type(\"Thanksgiving\", \"day of mourning\").\n.decl Answer()\nAnswer() :- Event_type(\"Thanksgiving\", \"day of mourning\").\n.output Answer"]}
{"id": 309, "answer": true, "completion": ".decl Is_monarch(Person:symbol)\nIs_monarch(\"Hatshepsut\").\n.decl Is_considered(Person:symbol, Category:symbol)\nIs_considered(\"Hatshepsut\", \"monarch\").\n.decl Answer()\nAnswer() :- Is_considered(\"Hatshepsut\", \"monarch\").\n.output Answer", "completions": [".decl Is_monarch(Person:symbol)\nIs_monarch(\"Hatshepsut\").\n.decl Is_considered(Person:symbol, Category:symbol)\nIs_considered(\"Hatshepsut\", \"monarch\").\n.decl Answer()\nAnswer() :- Is_considered(\"Hatshepsut\", \"monarch\").\n.output Answer"]}
{"id": 310, "answer": true, "completion": ".decl Is_upgrade(Old:symbol, New:symbol)\nIs_upgrade(\"Golden Age of Piracy pirates\", \"Noah's Ark\").\n.decl Answer()\nAnswer() :- Is_upgrade(\"Golden Age of Piracy pirates\", \"Noah's Ark\").\n.output Answer", "completions": [".decl Is_upgrade(Old:symbol, New:symbol)\nIs_upgrade(\"Golden Age of Piracy pirates\", \"Noah's Ark\").\n.decl Answer()\nAnswer() :- Is_upgrade(\"Golden Age of Piracy pirates\", \"Noah's Ark\").\n.output Answer"]}
{"id": 311, "answer": false, "completion": ".decl Has_sodium(Object:symbol, Sodium:float)\nHas_sodium(\"Campbell's Soup\", 850).\n.decl Daily_sodium_limit(Condition:symbol, Limit:float)\nDaily_sodium_limit(\"hypertension\", 1500).\n.decl Answer()\nAnswer() :- Has_sodium(\"Campbell's Soup\", sodium1), Daily_sodium_limit(\"hypertension\", limit), 2 * sodium1 > limit.\n.output Answer", "completions": [".decl Has_sodium(Object:symbol, Sodium:float)\nHas_sodium(\"Campbell's Soup\", 850).\n.decl Daily_sodium_limit(Condition:symbol, Limit:float)\nDaily_sodium_limit(\"hypertension\", 1500).\n.decl Answer()\nAnswer() :- Has_sodium(\"Campbell's Soup\", sodium1), Daily_sodium_limit(\"hypertension\", limit), 2 * sodium1 > limit.\n.output Answer"]}
{"id": 312, "answer": true, "completion": ".decl Developed_by(Game:symbol, Company:symbol)\nDeveloped_by(\"Metroid\", \"Nintendo\").\n.decl Profits_from(Company_A:symbol, Game:symbol, Company_B:symbol)\nProfits_from(\"Electronic Arts\", \"Metroid\", \"Nintendo\").\n.decl Answer()\nAnswer() :- Developed_by(\"Metroid\", company), Profits_from(\"Electronic Arts\", \"Metroid\", company), company != \"Electronic Arts\".\n.output Answer", "completions": [".decl Developed_by(Game:symbol, Company:symbol)\nDeveloped_by(\"Metroid\", \"Nintendo\").\n.decl Profits_from(Company_A:symbol, Game:symbol, Company_B:symbol)\nProfits_from(\"Electronic Arts\", \"Metroid\", \"Nintendo\").\n.decl Answer()\nAnswer() :- Developed_by(\"Metroid\", company), Profits_from(\"Electronic Arts\", \"Metroid\", company), company != \"Electronic Arts\".\n.output Answer"]}
{"id": 313, "answer": true, "completion": ".decl Occurs_in_location(Activity:symbol, Location:symbol, Frequency:symbol)\nOccurs_in_location(\"snowboarding\", \"Hilo\", \"rare\").\n.decl Answer()\nAnswer() :- Occurs_in_location(\"snowboarding\", \"Hilo\", \"rare\").\n.output Answer", "completions": [".decl Occurs_in_location(Activity:symbol, Location:symbol, Frequency:symbol)\nOccurs_in_location(\"snowboarding\", \"Hilo\", \"rare\").\n.decl Answer()\nAnswer() :- Occurs_in_location(\"snowboarding\", \"Hilo\", \"rare\").\n.output Answer"]}
{"id": 314, "answer": false, "completion": ".decl In_zone(Object:symbol, Zone:symbol)\nIn_zone(\"fish\", \"Bathypelagic Zone\").\n.decl Has_depth(Zone:symbol, Depth:float)\nHas_depth(\"Bathypelagic Zone\", 4000).\n.decl Has_range(Weapon:symbol, Range:float)\nHas_range(\"sniper rifle\", 2000).\n.decl Answer()\nAnswer() :- In_zone(\"fish\", zone), Has_depth(zone, depth1), Has_range(\"sniper rifle\", range1), range1 > depth1.\n.output Answer", "completions": [".decl In_zone(Object:symbol, Zone:symbol)\nIn_zone(\"fish\", \"Bathypelagic Zone\").\n.decl Has_depth(Zone:symbol, Depth:float)\nHas_depth(\"Bathypelagic Zone\", 4000).\n.decl Has_range(Weapon:symbol, Range:float)\nHas_range(\"sniper rifle\", 2000).\n.decl Answer()\nAnswer() :- In_zone(\"fish\", zone), Has_depth(zone, depth1), Has_range(\"sniper rifle\", range1), range1 > depth1.\n.output Answer"]}
{"id": 315, "answer": true, "completion": ".decl Influenced_by(Artist:symbol, Genre:symbol)\nInfluenced_by(\"Depeche Mode\", \"electronic\").\nInfluenced_by(\"Depeche Mode\", \"synth-pop\").\nInfluenced_by(\"Depeche Mode\", \"new wave\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Depeche Mode\", \"blues\").\n.output Answer", "completions": [".decl Influenced_by(Artist:symbol, Genre:symbol)\nInfluenced_by(\"Depeche Mode\", \"electronic\").\nInfluenced_by(\"Depeche Mode\", \"synth-pop\").\nInfluenced_by(\"Depeche Mode\", \"new wave\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Depeche Mode\", \"blues\").\n.output Answer"]}
{"id": 316, "answer": true, "completion": ".decl Requires_ingredient(Product:symbol, Ingredient:symbol)\nRequires_ingredient(\"pickles\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Requires_ingredient(\"pickles\", \"lactobacillus\").\n.output Answer", "completions": [".decl Requires_ingredient(Product:symbol, Ingredient:symbol)\nRequires_ingredient(\"pickles\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Requires_ingredient(\"pickles\", \"lactobacillus\").\n.output Answer"]}
{"id": 317, "answer": true, "completion": ".decl Despises(Person:symbol, Entity:symbol)\nDespises(\"King James I\", \"fairy beings\").\n.decl Answer()\nAnswer() :- Despises(\"King James I\", \"fairy beings\").\n.output Answer", "completions": [".decl Despises(Person:symbol, Entity:symbol)\nDespises(\"King James I\", \"fairy beings\").\n.decl Answer()\nAnswer() :- Despises(\"King James I\", \"fairy beings\").\n.output Answer"]}
{"id": 318, "answer": true, "completion": ".decl Has_prevalence(Disability:symbol, Prevalence:float)\nHas_prevalence(\"dyslexia\", 5).\nHas_prevalence(\"intellectual disability\", 1).\nHas_prevalence(\"attention deficit hyperactivity disorder\", 9).\n.decl Is_most_common(Disability:symbol)\nIs_most_common(disability) :- Has_prevalence(disability, prevalence1), !Has_prevalence(_, prevalence2), prevalence2 > prevalence1.\n.decl Answer()\nAnswer() :- Is_most_common(\"dyslexia\").\n.output Answer", "completions": [".decl Has_prevalence(Disability:symbol, Prevalence:float)\nHas_prevalence(\"dyslexia\", 5).\nHas_prevalence(\"intellectual disability\", 1).\nHas_prevalence(\"attention deficit hyperactivity disorder\", 9).\n.decl Is_most_common(Disability:symbol)\nIs_most_common(disability) :- Has_prevalence(disability, prevalence1), !Has_prevalence(_, prevalence2), prevalence2 > prevalence1.\n.decl Answer()\nAnswer() :- Is_most_common(\"dyslexia\").\n.output Answer"]}
{"id": 319, "answer": false, "completion": ".decl Earns_more(Search_engine_A:symbol, Search_engine_B:symbol)\nEarns_more(\"Bing\", \"Google\").\nEarns_more(\"Bing\", \"Yahoo\").\n.decl Answer()\nAnswer() :- Earns_more(\"Bing\", competitor).\n.output Answer", "completions": [".decl Earns_more(Search_engine_A:symbol, Search_engine_B:symbol)\nEarns_more(\"Bing\", \"Google\").\nEarns_more(\"Bing\", \"Yahoo\").\n.decl Answer()\nAnswer() :- Earns_more(\"Bing\", competitor).\n.output Answer"]}
{"id": 320, "answer": true, "completion": ".decl Has_salt_content(Food:symbol, Salt_content:float)\nHas_salt_content(\"olives\", 1.6).\n.decl Is_healthy_snack(Food:symbol)\nIs_healthy_snack(\"olives\") :- Has_salt_content(\"olives\", salt_content), salt_content < 0.5.\n.decl Answer()\nAnswer() :- !Is_healthy_snack(\"olives\").\n.output Answer", "completions": [".decl Has_salt_content(Food:symbol, Salt_content:float)\nHas_salt_content(\"olives\", 1.6).\n.decl Is_healthy_snack(Food:symbol)\nIs_healthy_snack(\"olives\") :- Has_salt_content(\"olives\", salt_content), salt_content < 0.5.\n.decl Answer()\nAnswer() :- !Is_healthy_snack(\"olives\").\n.output Answer"]}
{"id": 321, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Democratic Party nominee 1908\", 1860).\n.decl Invented_in_year(Invention:symbol, Year:float)\nInvented_in_year(\"TV\", 1927).\n.decl Answer()\nAnswer() :- Born_in_year(\"Democratic Party nominee 1908\", birth_year), Invented_in_year(\"TV\", invention_year), birth_year < invention_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Democratic Party nominee 1908\", 1860).\n.decl Invented_in_year(Invention:symbol, Year:float)\nInvented_in_year(\"TV\", 1927).\n.decl Answer()\nAnswer() :- Born_in_year(\"Democratic Party nominee 1908\", birth_year), Invented_in_year(\"TV\", invention_year), birth_year < invention_year.\n.output Answer"]}
{"id": 322, "answer": false, "completion": ".decl Happens_in_period(Event:symbol, Period:symbol)\nHappens_in_period(\"Great Recession\", \"2007-2009\").\n.decl Has_unemployment_rate(Period:symbol, Unemployment_rate:float)\nHas_unemployment_rate(\"2007-2009\", 10).\nHas_unemployment_rate(\"Great Depression\", 24.9).\n.decl Answer()\nAnswer() :- Happens_in_period(\"Great Recession\", period), Has_unemployment_rate(period, rate1), !Has_unemployment_rate(other_period, rate2), rate1 < rate2.\n.output Answer", "completions": [".decl Happens_in_period(Event:symbol, Period:symbol)\nHappens_in_period(\"Great Recession\", \"2007-2009\").\n.decl Has_unemployment_rate(Period:symbol, Unemployment_rate:float)\nHas_unemployment_rate(\"2007-2009\", 10).\nHas_unemployment_rate(\"Great Depression\", 24.9).\n.decl Answer()\nAnswer() :- Happens_in_period(\"Great Recession\", period), Has_unemployment_rate(period, rate1), !Has_unemployment_rate(other_period, rate2), rate1 < rate2.\n.output Answer"]}
{"id": 323, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Grizzly Bear\", \"North America\").\n.decl Located_in(Fort:symbol, Location:symbol)\nLocated_in(\"Vellore Fort\", \"India\").\n.decl Answer()\nAnswer() :- Lives_in(\"Grizzly Bear\", location1), Located_in(\"Vellore Fort\", location2), location1 = location2.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Grizzly Bear\", \"North America\").\n.decl Located_in(Fort:symbol, Location:symbol)\nLocated_in(\"Vellore Fort\", \"India\").\n.decl Answer()\nAnswer() :- Lives_in(\"Grizzly Bear\", location1), Located_in(\"Vellore Fort\", location2), location1 = location2.\n.output Answer"]}
{"id": 324, "answer": false, "completion": ".decl Has_n_episodes(Series:symbol, N_episodes:float)\nHas_n_episodes(\"Ugly Betty\", 85).\n.decl Episode_duration(Duration:float)\nEpisode_duration(60). // 60 minutes per episode\n.decl Time_available(Time:float)\nTime_available(7 * 24 * 60). // 7 days * 24 hours * 60 minutes\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Ugly Betty\", n_episodes), Episode_duration(duration), Time_available(time), n_episodes * duration <= time.\n.output Answer", "completions": [".decl Has_n_episodes(Series:symbol, N_episodes:float)\nHas_n_episodes(\"Ugly Betty\", 85).\n.decl Episode_duration(Duration:float)\nEpisode_duration(60). // 60 minutes per episode\n.decl Time_available(Time:float)\nTime_available(7 * 24 * 60). // 7 days * 24 hours * 60 minutes\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Ugly Betty\", n_episodes), Episode_duration(duration), Time_available(time), n_episodes * duration <= time.\n.output Answer"]}
{"id": 325, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"snow leopard\", \"Himalayas\").\n.decl Is_in(Location_A:symbol, Location_B:symbol)\nIs_in(\"Yucatan\", \"Mexico\").\n.decl Answer()\nAnswer() :- Lives_in(\"snow leopard\", location), Is_in(\"Yucatan\", location).\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"snow leopard\", \"Himalayas\").\n.decl Is_in(Location_A:symbol, Location_B:symbol)\nIs_in(\"Yucatan\", \"Mexico\").\n.decl Answer()\nAnswer() :- Lives_in(\"snow leopard\", location), Is_in(\"Yucatan\", location).\n.output Answer"]}
{"id": 326, "answer": false, "completion": ".decl Acceptable_n_children(Year_range:symbol, N_children:float)\nAcceptable_n_children(\"1980s China\", 1).\n.decl Is_number(Number:symbol)\nIs_number(\"Pi\").\n.decl Answer()\nAnswer() :- Acceptable_n_children(\"1980s China\", n_children), Is_number(\"Pi\"), n_children = 3.14159265359.\n.output Answer", "completions": [".decl Acceptable_n_children(Year_range:symbol, N_children:float)\nAcceptable_n_children(\"1980s China\", 1).\n.decl Is_number(Number:symbol)\nIs_number(\"Pi\").\n.decl Answer()\nAnswer() :- Acceptable_n_children(\"1980s China\", n_children), Is_number(\"Pi\"), n_children = 3.14159265359.\n.output Answer"]}
{"id": 327, "answer": true, "completion": ".decl Prevents(Solution:symbol, Problem:symbol)\nPrevents(\"surgery\", \"physical ailment\").\nPrevents(\"therapy\", \"existential crisis\").\n.decl Answer()\nAnswer() :- Prevents(\"surgery\", \"existential crisis\").\n.output Answer", "completions": [".decl Prevents(Solution:symbol, Problem:symbol)\nPrevents(\"surgery\", \"physical ailment\").\nPrevents(\"therapy\", \"existential crisis\").\n.decl Answer()\nAnswer() :- Prevents(\"surgery\", \"existential crisis\").\n.output Answer"]}
{"id": 328, "answer": false, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"greyhound\", 45).\nHas_speed(\"greyhound bus\", 65).\n.decl Answer()\nAnswer() :- Has_speed(\"greyhound\", speed1), Has_speed(\"greyhound bus\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"greyhound\", 45).\nHas_speed(\"greyhound bus\", 65).\n.decl Answer()\nAnswer() :- Has_speed(\"greyhound\", speed1), Has_speed(\"greyhound bus\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 329, "answer": false, "completion": ".decl Is_part_of(Constellation:symbol, Category:symbol)\nIs_part_of(\"Sirius\", \"Canis Major\").\n.decl Constellation_category(Constellation:symbol, Category:symbol)\nConstellation_category(\"Canis Major\", \"animal\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Sirius\", constellation), Constellation_category(constellation, \"animal\").\n.output Answer", "completions": [".decl Is_part_of(Constellation:symbol, Category:symbol)\nIs_part_of(\"Sirius\", \"Canis Major\").\n.decl Constellation_category(Constellation:symbol, Category:symbol)\nConstellation_category(\"Canis Major\", \"animal\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Sirius\", constellation), Constellation_category(constellation, \"animal\").\n.output Answer"]}
{"id": 330, "answer": true, "completion": ".decl Has_consent(Character:symbol, Consent:symbol)\nHas_consent(\"Snow White\", \"no\").\n.decl Answer()\nAnswer() :- Has_consent(\"Snow White\", \"yes\").\n.output Answer", "completions": [".decl Has_consent(Character:symbol, Consent:symbol)\nHas_consent(\"Snow White\", \"no\").\n.decl Answer()\nAnswer() :- Has_consent(\"Snow White\", \"yes\").\n.output Answer"]}
{"id": 331, "answer": false, "completion": ".decl Appears_in_films(Title:symbol, N_films:float)\nAppears_in_films(\"The Invisible Man\", 5).\nAppears_in_films(\"Picnic at Hanging Rock\", 1).\n.decl Answer()\nAnswer() :- Appears_in_films(\"The Invisible Man\", n_films1), Appears_in_films(\"Picnic at Hanging Rock\", n_films2), n_films1 > n_films2.\n.output Answer", "completions": [".decl Appears_in_films(Title:symbol, N_films:float)\nAppears_in_films(\"The Invisible Man\", 5).\nAppears_in_films(\"Picnic at Hanging Rock\", 1).\n.decl Answer()\nAnswer() :- Appears_in_films(\"The Invisible Man\", n_films1), Appears_in_films(\"Picnic at Hanging Rock\", n_films2), n_films1 > n_films2.\n.output Answer"]}
{"id": 332, "answer": false, "completion": ".decl Is_athlete(Person:symbol, Sport:symbol)\nIs_athlete(\"Ryan Crouser\", \"shot put\").\n.decl Has_record(Person:symbol, Record:float)\nHas_record(\"Ryan Crouser\", 23.37).\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"bengal fox\", 3.5).\n.decl Answer()\nAnswer() :- Is_athlete(\"Ryan Crouser\", \"shot put\"), Has_record(\"Ryan Crouser\", record), Has_weight(\"bengal fox\", weight), record > weight.\n.output Answer", "completions": [".decl Is_athlete(Person:symbol, Sport:symbol)\nIs_athlete(\"Ryan Crouser\", \"shot put\").\n.decl Has_record(Person:symbol, Record:float)\nHas_record(\"Ryan Crouser\", 23.37).\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"bengal fox\", 3.5).\n.decl Answer()\nAnswer() :- Is_athlete(\"Ryan Crouser\", \"shot put\"), Has_record(\"Ryan Crouser\", record), Has_weight(\"bengal fox\", weight), record > weight.\n.output Answer"]}
{"id": 333, "answer": true, "completion": ".decl Performs_live_perfectly(Artist:symbol)\nPerforms_live_perfectly(\"Amy Winehouse\").\n.decl Has_imperfect_performance(Artist:symbol)\nHas_imperfect_performance(\"Amy Winehouse\").\n.decl Answer()\nAnswer() :- Performs_live_perfectly(\"Amy Winehouse\"), !Has_imperfect_performance(\"Amy Winehouse\").\n.output Answer", "completions": [".decl Performs_live_perfectly(Artist:symbol)\nPerforms_live_perfectly(\"Amy Winehouse\").\n.decl Has_imperfect_performance(Artist:symbol)\nHas_imperfect_performance(\"Amy Winehouse\").\n.decl Answer()\nAnswer() :- Performs_live_perfectly(\"Amy Winehouse\"), !Has_imperfect_performance(\"Amy Winehouse\").\n.output Answer"]}
{"id": 334, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Hurricane Harvey\", 130).\nHas_speed(\"Peregrine falcon\", 240).\n.decl Answer()\nAnswer() :- Has_speed(\"Hurricane Harvey\", speed1), Has_speed(\"Peregrine falcon\", speed2), speed1 >= speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Hurricane Harvey\", 130).\nHas_speed(\"Peregrine falcon\", 240).\n.decl Answer()\nAnswer() :- Has_speed(\"Hurricane Harvey\", speed1), Has_speed(\"Peregrine falcon\", speed2), speed1 >= speed2.\n.output Answer"]}
{"id": 335, "answer": true, "completion": ".decl Faces_discrimination(Group:symbol, Level:symbol)\nFaces_discrimination(\"Chinese Americans\", \"Federal level\").\n.decl Answer()\nAnswer() :- Faces_discrimination(\"Chinese Americans\", \"Federal level\").\n.output Answer", "completions": [".decl Faces_discrimination(Group:symbol, Level:symbol)\nFaces_discrimination(\"Chinese Americans\", \"Federal level\").\n.decl Answer()\nAnswer() :- Faces_discrimination(\"Chinese Americans\", \"Federal level\").\n.output Answer"]}
{"id": 336, "answer": true, "completion": ".decl Has_characters_limit(Platform:symbol, Characters_limit:float)\nHas_characters_limit(\"tweet\", 280).\n.decl Has_characters_requirement(Form:symbol, Characters_requirement:float)\nHas_characters_requirement(\"haiku\", 51). // Assuming a Haiku has 17 syllables and an average of 3 characters per syllable\n.decl Answer()\nAnswer() :- Has_characters_limit(\"tweet\", characters_limit), Has_characters_requirement(\"haiku\", characters_requirement), characters_limit >= characters_requirement.\n.output Answer", "completions": [".decl Has_characters_limit(Platform:symbol, Characters_limit:float)\nHas_characters_limit(\"tweet\", 280).\n.decl Has_characters_requirement(Form:symbol, Characters_requirement:float)\nHas_characters_requirement(\"haiku\", 51). // Assuming a Haiku has 17 syllables and an average of 3 characters per syllable\n.decl Answer()\nAnswer() :- Has_characters_limit(\"tweet\", characters_limit), Has_characters_requirement(\"haiku\", characters_requirement), characters_limit >= characters_requirement.\n.output Answer"]}
{"id": 337, "answer": true, "completion": ".decl Has_diameter(Object:symbol, Diameter:float)\nHas_diameter(\"adult human skull\", 13).\nHas_diameter(\"birth canal\", 10).\n.decl Answer()\nAnswer() :- Has_diameter(\"adult human skull\", diameter1), Has_diameter(\"birth canal\", diameter2), diameter1 <= diameter2.\n.output Answer", "completions": [".decl Has_diameter(Object:symbol, Diameter:float)\nHas_diameter(\"adult human skull\", 13).\nHas_diameter(\"birth canal\", 10).\n.decl Answer()\nAnswer() :- Has_diameter(\"adult human skull\", diameter1), Has_diameter(\"birth canal\", diameter2), diameter1 <= diameter2.\n.output Answer"]}
{"id": 338, "answer": true, "completion": ".decl Has_box_office(Role:symbol, Actress:symbol, Box_office:float)\nHas_box_office(\"King Kong (2005 film)\", \"Naomi Watts\", 550).\nHas_box_office(\"The Ring\", \"Naomi Watts\", 249).\nHas_box_office(\"Mulholland Drive\", \"Naomi Watts\", 20).\nHas_box_office(\"The Impossible\", \"Naomi Watts\", 180).\n.decl Answer()\n\nAnswer() :- Has_box_office(\"King Kong (2005 film)\", \"Naomi Watts\", box_office1), !Has_box_office(_, \"Naomi Watts\", box_office2), box_office2 > box_office1.\n.output Answer", "completions": [".decl Has_box_office(Role:symbol, Actress:symbol, Box_office:float)\nHas_box_office(\"King Kong (2005 film)\", \"Naomi Watts\", 550).\nHas_box_office(\"The Ring\", \"Naomi Watts\", 249).\nHas_box_office(\"Mulholland Drive\", \"Naomi Watts\", 20).\nHas_box_office(\"The Impossible\", \"Naomi Watts\", 180).\n.decl Answer()\n\nAnswer() :- Has_box_office(\"King Kong (2005 film)\", \"Naomi Watts\", box_office1), !Has_box_office(_, \"Naomi Watts\", box_office2), box_office2 > box_office1.\n.output Answer"]}
{"id": 339, "answer": true, "completion": ".decl Is_ingredient(Color:symbol, Ingredient:symbol)\nIs_ingredient(\"purple\", \"mollusks\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"purple\", \"mollusks\").\n.output Answer", "completions": [".decl Is_ingredient(Color:symbol, Ingredient:symbol)\nIs_ingredient(\"purple\", \"mollusks\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"purple\", \"mollusks\").\n.output Answer"]}
{"id": 340, "answer": true, "completion": ".decl Born_in_year(Animal:symbol, Birth_year:float)\nBorn_in_year(\"anchovy\", 2020).\n.decl Has_life_expectancy(Animal:symbol, Life_expectancy:float)\nHas_life_expectancy(\"anchovy\", 4).\n.decl Happens_in_year(Event:symbol, Event_year:float)\nHappens_in_year(\"25th US census\", 2020).\n.decl Answer()\nAnswer() :- Born_in_year(\"anchovy\", birth_year), Has_life_expectancy(\"anchovy\", life_expectancy), Happens_in_year(\"25th US census\", event_year), birth_year + life_expectancy >= event_year.\n.output Answer", "completions": [".decl Born_in_year(Animal:symbol, Birth_year:float)\nBorn_in_year(\"anchovy\", 2020).\n.decl Has_life_expectancy(Animal:symbol, Life_expectancy:float)\nHas_life_expectancy(\"anchovy\", 4).\n.decl Happens_in_year(Event:symbol, Event_year:float)\nHappens_in_year(\"25th US census\", 2020).\n.decl Answer()\nAnswer() :- Born_in_year(\"anchovy\", birth_year), Has_life_expectancy(\"anchovy\", life_expectancy), Happens_in_year(\"25th US census\", event_year), birth_year + life_expectancy >= event_year.\n.output Answer"]}
{"id": 341, "answer": false, "completion": ".decl Travels_between(Country_A:symbol, Country_B:symbol)\nTravels_between(\"China\", \"France\").\n.decl Uses_measurement_system(Country:symbol, System:symbol)\nUses_measurement_system(\"China\", \"metric\").\nUses_measurement_system(\"France\", \"metric\").\nUses_measurement_system(\"USA\", \"imperial\").\n.decl Has_stopover(Country_A:symbol, Country_B:symbol, Stopover_Country:symbol)\nHas_stopover(\"China\", \"France\", \"USA\").\n.decl Answer()\nAnswer() :- Travels_between(\"China\", \"France\"), Has_stopover(\"China\", \"France\", stopover_country), Uses_measurement_system(stopover_country, \"imperial\").\n.output Answer", "completions": [".decl Travels_between(Country_A:symbol, Country_B:symbol)\nTravels_between(\"China\", \"France\").\n.decl Uses_measurement_system(Country:symbol, System:symbol)\nUses_measurement_system(\"China\", \"metric\").\nUses_measurement_system(\"France\", \"metric\").\nUses_measurement_system(\"USA\", \"imperial\").\n.decl Has_stopover(Country_A:symbol, Country_B:symbol, Stopover_Country:symbol)\nHas_stopover(\"China\", \"France\", \"USA\").\n.decl Answer()\nAnswer() :- Travels_between(\"China\", \"France\"), Has_stopover(\"China\", \"France\", stopover_country), Uses_measurement_system(stopover_country, \"imperial\").\n.output Answer"]}
{"id": 342, "answer": false, "completion": ".decl Is_briefer(Text_A:symbol, Text_B:symbol)\nIs_briefer(\"Lines on the Antiquity of Microbes\", \"haiku\").\n.decl Answer()\nAnswer() :- Is_briefer(\"Lines on the Antiquity of Microbes\", \"haiku\").\n.output Answer", "completions": [".decl Is_briefer(Text_A:symbol, Text_B:symbol)\nIs_briefer(\"Lines on the Antiquity of Microbes\", \"haiku\").\n.decl Answer()\nAnswer() :- Is_briefer(\"Lines on the Antiquity of Microbes\", \"haiku\").\n.output Answer"]}
{"id": 343, "answer": false, "completion": ".decl Sells_out(Event:symbol, Performer:symbol, Attendee:symbol)\nSells_out(\"Metallica show\", \"Metallica\", \"human\").\n.decl Is_attendee(Animal:symbol, Event:symbol)\nIs_attendee(\"giant panda\", \"Metallica show\").\n.decl Answer()\nAnswer() :- Sells_out(event, \"Metallica\", attendee), Is_attendee(\"giant panda\", event), attendee != \"giant panda\".\n.output Answer", "completions": [".decl Sells_out(Event:symbol, Performer:symbol, Attendee:symbol)\nSells_out(\"Metallica show\", \"Metallica\", \"human\").\n.decl Is_attendee(Animal:symbol, Event:symbol)\nIs_attendee(\"giant panda\", \"Metallica show\").\n.decl Answer()\nAnswer() :- Sells_out(event, \"Metallica\", attendee), Is_attendee(\"giant panda\", event), attendee != \"giant panda\".\n.output Answer"]}
{"id": 344, "answer": true, "completion": ".decl Has_weather_condition(Condition:symbol, Weather:symbol)\nHas_weather_condition(\"frost\", \"cold\").\nHas_weather_condition(\"snow\", \"cold\").\n.decl Answer()\nAnswer() :- Has_weather_condition(\"frost\", weather1), Has_weather_condition(\"snow\", weather2), weather1 = weather2, !weather1 = \"cold\".\n.output Answer", "completions": [".decl Has_weather_condition(Condition:symbol, Weather:symbol)\nHas_weather_condition(\"frost\", \"cold\").\nHas_weather_condition(\"snow\", \"cold\").\n.decl Answer()\nAnswer() :- Has_weather_condition(\"frost\", weather1), Has_weather_condition(\"snow\", weather2), weather1 = weather2, !weather1 = \"cold\".\n.output Answer"]}
{"id": 345, "answer": true, "completion": ".decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Cyril Ramaphosa\", \"South African\").\n.decl Is_member_country(Country:symbol)\nIs_member_country(\"United States\").\nIs_member_country(\"United Kingdom\").\nIs_member_country(\"Germany\").\nIs_member_country(\"France\").\nIs_member_country(\"Canada\").\nIs_member_country(\"Italy\").\nIs_member_country(\"Netherlands\").\nIs_member_country(\"Belgium\").\nIs_member_country(\"Luxembourg\").\nIs_member_country(\"Denmark\").\nIs_member_country(\"Norway\").\nIs_member_country(\"Iceland\").\nIs_member_country(\"Portugal\").\nIs_member_country(\"Greece\").\nIs_member_country(\"Turkey\").\nIs_member_country(\"Spain\").\nIs_member_country(\"Hungary\").\nIs_member_country(\"Poland\").\nIs_member_country(\"Czech Republic\").\nIs_member_country(\"Slovakia\").\nIs_member_country(\"Slovenia\").\nIs_member_country(\"Bulgaria\").\nIs_member_country(\"Estonia\").\nIs_member_country(\"Latvia\").\nIs_member_country(\"Lithuania\").\nIs_member_country(\"Romania\").\nIs_member_country(\"Albania\").\nIs_member_country(\"Croatia\").\nIs_member_country(\"Montenegro\").\nIs_member_country(\"North Macedonia\").\n.decl Can_become_SG_NATO(Person:symbol)\nCan_become_SG_NATO(person) :- Is_nationality(person, nationality), Is_member_country(nationality).\n.decl Answer()\nAnswer() :- Can_become_SG_NATO(\"Cyril Ramaphosa\").\n.output Answer", "completions": [".decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Cyril Ramaphosa\", \"South African\").\n.decl Is_member_country(Country:symbol)\nIs_member_country(\"United States\").\nIs_member_country(\"United Kingdom\").\nIs_member_country(\"Germany\").\nIs_member_country(\"France\").\nIs_member_country(\"Canada\").\nIs_member_country(\"Italy\").\nIs_member_country(\"Netherlands\").\nIs_member_country(\"Belgium\").\nIs_member_country(\"Luxembourg\").\nIs_member_country(\"Denmark\").\nIs_member_country(\"Norway\").\nIs_member_country(\"Iceland\").\nIs_member_country(\"Portugal\").\nIs_member_country(\"Greece\").\nIs_member_country(\"Turkey\").\nIs_member_country(\"Spain\").\nIs_member_country(\"Hungary\").\nIs_member_country(\"Poland\").\nIs_member_country(\"Czech Republic\").\nIs_member_country(\"Slovakia\").\nIs_member_country(\"Slovenia\").\nIs_member_country(\"Bulgaria\").\nIs_member_country(\"Estonia\").\nIs_member_country(\"Latvia\").\nIs_member_country(\"Lithuania\").\nIs_member_country(\"Romania\").\nIs_member_country(\"Albania\").\nIs_member_country(\"Croatia\").\nIs_member_country(\"Montenegro\").\nIs_member_country(\"North Macedonia\").\n.decl Can_become_SG_NATO(Person:symbol)\nCan_become_SG_NATO(person) :- Is_nationality(person, nationality), Is_member_country(nationality).\n.decl Answer()\nAnswer() :- Can_become_SG_NATO(\"Cyril Ramaphosa\").\n.output Answer"]}
{"id": 346, "answer": false, "completion": ".decl Is_artisan(Product:symbol)\nIs_artisan(\"handmade bread\").\nIs_artisan(\"handcrafted pottery\").\nIs_artisan(\"homemade cheese\").\n.decl Answer()\nAnswer() :- Is_artisan(\"twinkies\").\n.output Answer", "completions": [".decl Is_artisan(Product:symbol)\nIs_artisan(\"handmade bread\").\nIs_artisan(\"handcrafted pottery\").\nIs_artisan(\"homemade cheese\").\n.decl Answer()\nAnswer() :- Is_artisan(\"twinkies\").\n.output Answer"]}
{"id": 347, "answer": false, "completion": ".decl Born_near(Person:symbol, Landmark:symbol)\nBorn_near(\"Sean Connery\", \"Edinburgh Castle\").\n.decl Landmark_location(Landmark:symbol, City:symbol)\nLandmark_location(\"Washington Monument\", \"Washington D.C.\").\nLandmark_location(\"Edinburgh Castle\", \"Edinburgh\").\n.decl Answer()\nAnswer() :- Born_near(\"Sean Connery\", landmark), Landmark_location(landmark, \"Washington D.C.\").\n.output Answer", "completions": [".decl Born_near(Person:symbol, Landmark:symbol)\nBorn_near(\"Sean Connery\", \"Edinburgh Castle\").\n.decl Landmark_location(Landmark:symbol, City:symbol)\nLandmark_location(\"Washington Monument\", \"Washington D.C.\").\nLandmark_location(\"Edinburgh Castle\", \"Edinburgh\").\n.decl Answer()\nAnswer() :- Born_near(\"Sean Connery\", landmark), Landmark_location(landmark, \"Washington D.C.\").\n.output Answer"]}
{"id": 348, "answer": true, "completion": ".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"tonsillectomy\", \"tonsillitis\").\n.decl Has_disease(Disease:symbol)\nHas_disease(\"hepatitis\").\n.decl Answer()\nAnswer() :- Cures(\"tonsillectomy\", \"hepatitis\").\nAnswer() :- Cures(treatment, \"hepatitis\"), Has_disease(\"hepatitis\"), treatment = \"tonsillectomy\".\n.output Answer", "completions": [".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"tonsillectomy\", \"tonsillitis\").\n.decl Has_disease(Disease:symbol)\nHas_disease(\"hepatitis\").\n.decl Answer()\nAnswer() :- Cures(\"tonsillectomy\", \"hepatitis\").\nAnswer() :- Cures(treatment, \"hepatitis\"), Has_disease(\"hepatitis\"), treatment = \"tonsillectomy\".\n.output Answer"]}
{"id": 349, "answer": true, "completion": ".decl Is_popular(Character:symbol, Company:symbol)\nIs_popular(\"Mickey Mouse\", \"Disney\").\nIs_popular(\"Elsa\", \"Disney\").\n.decl Made_of(Character:symbol, Material:symbol)\nMade_of(\"Elsa\", \"living ice\").\n.decl Answer()\nAnswer() :- Is_popular(character, \"Disney\"), Made_of(character, \"living ice\").\n.output Answer", "completions": [".decl Is_popular(Character:symbol, Company:symbol)\nIs_popular(\"Mickey Mouse\", \"Disney\").\nIs_popular(\"Elsa\", \"Disney\").\n.decl Made_of(Character:symbol, Material:symbol)\nMade_of(\"Elsa\", \"living ice\").\n.decl Answer()\nAnswer() :- Is_popular(character, \"Disney\"), Made_of(character, \"living ice\").\n.output Answer"]}
{"id": 350, "answer": true, "completion": ".decl Has_lunch_guarantee(Country:symbol, Guarantee:float)\nHas_lunch_guarantee(\"US\", 0).\n.decl Answer()\nAnswer() :- Has_lunch_guarantee(\"US\", guarantee), guarantee = 1.\n.output Answer", "completions": [".decl Has_lunch_guarantee(Country:symbol, Guarantee:float)\nHas_lunch_guarantee(\"US\", 0).\n.decl Answer()\nAnswer() :- Has_lunch_guarantee(\"US\", guarantee), guarantee = 1.\n.output Answer"]}
{"id": 351, "answer": true, "completion": ".decl Is_taller(Object_A:symbol, Object_B:symbol)\nIs_taller(\"Lusotitan\", \"almond tree\").\nIs_taller(\"Lusotitan\", \"stool\").\n.decl Answer()\nAnswer() :- !Is_taller(\"Lusotitan\", \"almond tree\").\nAnswer() :- Is_taller(\"Lusotitan\", \"stool\").\n.output Answer", "completions": [".decl Is_taller(Object_A:symbol, Object_B:symbol)\nIs_taller(\"Lusotitan\", \"almond tree\").\nIs_taller(\"Lusotitan\", \"stool\").\n.decl Answer()\nAnswer() :- !Is_taller(\"Lusotitan\", \"almond tree\").\nAnswer() :- Is_taller(\"Lusotitan\", \"stool\").\n.output Answer"]}
{"id": 352, "answer": false, "completion": ".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"Bonanza marathon\", 14).\nHas_duration(\"WWE Heat marathon\", 20).\n.decl Answer()\nAnswer() :- Has_duration(\"Bonanza marathon\", duration1), Has_duration(\"WWE Heat marathon\", duration2), duration1 < duration2.\n.output Answer", "completions": [".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"Bonanza marathon\", 14).\nHas_duration(\"WWE Heat marathon\", 20).\n.decl Answer()\nAnswer() :- Has_duration(\"Bonanza marathon\", duration1), Has_duration(\"WWE Heat marathon\", duration2), duration1 < duration2.\n.output Answer"]}
{"id": 353, "answer": false, "completion": ".decl Has_gross_food(Cuisine:symbol, Food:symbol)\nHas_gross_food(\"Hawaii\", \"poi\").\nHas_gross_food(\"Hawaii\", \"spam\").\n.decl Considered_gross(Food:symbol, Location:symbol)\nConsidered_gross(\"poi\", \"continental US\").\nConsidered_gross(\"spam\", \"continental US\").\n.decl Answer()\nAnswer() :- Has_gross_food(\"Hawaii\", food), Considered_gross(food, \"continental US\").\n.output Answer", "completions": [".decl Has_gross_food(Cuisine:symbol, Food:symbol)\nHas_gross_food(\"Hawaii\", \"poi\").\nHas_gross_food(\"Hawaii\", \"spam\").\n.decl Considered_gross(Food:symbol, Location:symbol)\nConsidered_gross(\"poi\", \"continental US\").\nConsidered_gross(\"spam\", \"continental US\").\n.decl Answer()\nAnswer() :- Has_gross_food(\"Hawaii\", food), Considered_gross(food, \"continental US\").\n.output Answer"]}
{"id": 354, "answer": false, "completion": ".decl Featured_in_ride(Character:symbol, Ride:symbol, Park:symbol)\nFeatured_in_ride(\"Tom\", \"Tom and Jerry: Mouse in the House\", \"Warner Bros. Movie World\").\nFeatured_in_ride(\"Jerry\", \"Tom and Jerry: Mouse in the House\", \"Warner Bros. Movie World\").\n.decl Answer()\nAnswer() :- Featured_in_ride(\"Tom\", ride, \"Disneyland\"), Featured_in_ride(\"Jerry\", ride, \"Disneyland\").\n.output Answer", "completions": [".decl Featured_in_ride(Character:symbol, Ride:symbol, Park:symbol)\nFeatured_in_ride(\"Tom\", \"Tom and Jerry: Mouse in the House\", \"Warner Bros. Movie World\").\nFeatured_in_ride(\"Jerry\", \"Tom and Jerry: Mouse in the House\", \"Warner Bros. Movie World\").\n.decl Answer()\nAnswer() :- Featured_in_ride(\"Tom\", ride, \"Disneyland\"), Featured_in_ride(\"Jerry\", ride, \"Disneyland\").\n.output Answer"]}
{"id": 355, "answer": true, "completion": ".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"Natalie Portman\", \"vegan\").\n.decl Contains_ingredient(Food:symbol, Ingredient:symbol)\nContains_ingredient(\"Snickers bar\", \"milk chocolate\").\n.decl Not_allowed(Diet:symbol, Ingredient:symbol)\nNot_allowed(\"vegan\", \"milk chocolate\").\n.decl Answer()\nAnswer() :- Follows_diet(\"Natalie Portman\", diet), Contains_ingredient(\"Snickers bar\", ingredient), Not_allowed(diet, ingredient).\n.output Answer", "completions": [".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"Natalie Portman\", \"vegan\").\n.decl Contains_ingredient(Food:symbol, Ingredient:symbol)\nContains_ingredient(\"Snickers bar\", \"milk chocolate\").\n.decl Not_allowed(Diet:symbol, Ingredient:symbol)\nNot_allowed(\"vegan\", \"milk chocolate\").\n.decl Answer()\nAnswer() :- Follows_diet(\"Natalie Portman\", diet), Contains_ingredient(\"Snickers bar\", ingredient), Not_allowed(diet, ingredient).\n.output Answer"]}
{"id": 356, "answer": true, "completion": ".decl Has_license(Age:float, License_status:symbol)\nHas_license(16, \"licensed\").\n.decl Legal_working_age(Age:float, Country:symbol)\nLegal_working_age(16, \"US\").\n.decl Can_drive_car(Age:float, Car_brand:symbol)\nCan_drive_car(16, \"Mercedes-Benz\").\n.decl Answer()\nAnswer() :- Has_license(age, \"licensed\"), Legal_working_age(age, \"US\"), Can_drive_car(age, \"Mercedes-Benz\").\n.output Answer", "completions": [".decl Has_license(Age:float, License_status:symbol)\nHas_license(16, \"licensed\").\n.decl Legal_working_age(Age:float, Country:symbol)\nLegal_working_age(16, \"US\").\n.decl Can_drive_car(Age:float, Car_brand:symbol)\nCan_drive_car(16, \"Mercedes-Benz\").\n.decl Answer()\nAnswer() :- Has_license(age, \"licensed\"), Legal_working_age(age, \"US\"), Can_drive_car(age, \"Mercedes-Benz\").\n.output Answer"]}
{"id": 357, "answer": false, "completion": ".decl Uses_scale(Composition:symbol, Scale:symbol)\nUses_scale(\"twelve-tone technique\", \"chromatic scale\").\n.decl Has_n_notes(Scale:symbol, N_notes:float)\nHas_n_notes(\"Iwato scale\", 5).\nHas_n_notes(\"chromatic scale\", 12).\n.decl Answer()\nAnswer() :- Uses_scale(\"twelve-tone technique\", scale1), Has_n_notes(scale1, n_notes1), Has_n_notes(\"Iwato scale\", n_notes2), n_notes1 != n_notes2.\n.output Answer", "completions": [".decl Uses_scale(Composition:symbol, Scale:symbol)\nUses_scale(\"twelve-tone technique\", \"chromatic scale\").\n.decl Has_n_notes(Scale:symbol, N_notes:float)\nHas_n_notes(\"Iwato scale\", 5).\nHas_n_notes(\"chromatic scale\", 12).\n.decl Answer()\nAnswer() :- Uses_scale(\"twelve-tone technique\", scale1), Has_n_notes(scale1, n_notes1), Has_n_notes(\"Iwato scale\", n_notes2), n_notes1 != n_notes2.\n.output Answer"]}
{"id": 358, "answer": false, "completion": ".decl Is_fan_of(Person:symbol, Author:symbol)\nIs_fan_of(\"Stephen King fan\", \"Stephen King\").\n.decl Has_image_of(Person:symbol, Object:symbol)\nHas_image_of(\"Stephen King fan\", \"clown\").\n.decl Author_creates(Author:symbol, Object:symbol)\nAuthor_creates(\"Stephen King\", \"clown\").\n.decl Answer()\nAnswer() :- Is_fan_of(\"Stephen King fan\", author), Author_creates(author, \"clown\"), Has_image_of(\"Stephen King fan\", \"clown\").\n.output Answer", "completions": [".decl Is_fan_of(Person:symbol, Author:symbol)\nIs_fan_of(\"Stephen King fan\", \"Stephen King\").\n.decl Has_image_of(Person:symbol, Object:symbol)\nHas_image_of(\"Stephen King fan\", \"clown\").\n.decl Author_creates(Author:symbol, Object:symbol)\nAuthor_creates(\"Stephen King\", \"clown\").\n.decl Answer()\nAnswer() :- Is_fan_of(\"Stephen King fan\", author), Author_creates(author, \"clown\"), Has_image_of(\"Stephen King fan\", \"clown\").\n.output Answer"]}
{"id": 359, "answer": true, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"McDonald's\", \"food\").\nSells(\"electronics store\", \"Intel products\").\n.decl Answer()\nAnswer() :- Sells(\"McDonald's\", \"Intel products\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"McDonald's\", \"food\").\nSells(\"electronics store\", \"Intel products\").\n.decl Answer()\nAnswer() :- Sells(\"McDonald's\", \"Intel products\").\n.output Answer"]}
{"id": 360, "answer": true, "completion": ".decl Event_year(Event:symbol, Year:float)\nEvent_year(\"2008 Summer Olympics\", 2008).\n.decl Car_production_year(Car:symbol, Year:float)\nCar_production_year(\"Rowe 550\", 2010).\n.decl Answer()\nAnswer() :- Car_production_year(\"Rowe 550\", year1), Event_year(\"2008 Summer Olympics\", year2), year1 <= year2.\n.output Answer", "completions": [".decl Event_year(Event:symbol, Year:float)\nEvent_year(\"2008 Summer Olympics\", 2008).\n.decl Car_production_year(Car:symbol, Year:float)\nCar_production_year(\"Rowe 550\", 2010).\n.decl Answer()\nAnswer() :- Car_production_year(\"Rowe 550\", year1), Event_year(\"2008 Summer Olympics\", year2), year1 <= year2.\n.output Answer"]}
{"id": 361, "answer": true, "completion": ".decl Has_gilded_gramophones(Band:symbol, N_gramophones:float)\nHas_gilded_gramophones(\"Led Zeppelin\", 3).\n\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n\n.decl Answer()\nAnswer() :- Has_gilded_gramophones(\"Led Zeppelin\", n_gramophones), Is_prime(n_gramophones).\n.output Answer", "completions": [".decl Has_gilded_gramophones(Band:symbol, N_gramophones:float)\nHas_gilded_gramophones(\"Led Zeppelin\", 3).\n\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n\n.decl Answer()\nAnswer() :- Has_gilded_gramophones(\"Led Zeppelin\", n_gramophones), Is_prime(n_gramophones).\n.output Answer"]}
{"id": 362, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\nHas_height(\"German Shepherd\", 0.65).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"German Shepherd\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\nHas_height(\"German Shepherd\", 0.65).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"German Shepherd\", height2), height1 > height2.\n.output Answer"]}
{"id": 363, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"man\", 1.7).\nHas_length(\"Great Pyramid of Giza base\", 230.4).\n.decl Answer()\nAnswer() :- Has_length(\"man\", length1), Has_length(\"Great Pyramid of Giza base\", length2), 200 * length1 >= length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"man\", 1.7).\nHas_length(\"Great Pyramid of Giza base\", 230.4).\n.decl Answer()\nAnswer() :- Has_length(\"man\", length1), Has_length(\"Great Pyramid of Giza base\", length2), 200 * length1 >= length2.\n.output Answer"]}
{"id": 364, "answer": true, "completion": ".decl Is_ignorable(Condition:symbol)\nIs_ignorable(\"tumors in the lymph nodes\").\n.decl Answer()\nAnswer() :- !Is_ignorable(\"tumors in the lymph nodes\").\n.output Answer", "completions": [".decl Is_ignorable(Condition:symbol)\nIs_ignorable(\"tumors in the lymph nodes\").\n.decl Answer()\nAnswer() :- !Is_ignorable(\"tumors in the lymph nodes\").\n.output Answer"]}
{"id": 365, "answer": false, "completion": ".decl Hosts_show(Host:symbol, Show:symbol)\nHosts_show(\"Stephen Colbert\", \"The Colbert Report\").\n.decl Political_views(Person:symbol, View:symbol)\nPolitical_views(\"Stephen Colbert\", \"liberal\").\n.decl Supports_candidate(View:symbol, Candidate:symbol)\nSupports_candidate(\"liberal\", \"Trump\").\n.decl Answer()\nAnswer() :- Hosts_show(host, \"The Colbert Report\"), Political_views(host, view), Supports_candidate(view, \"Trump\").\n.output Answer", "completions": [".decl Hosts_show(Host:symbol, Show:symbol)\nHosts_show(\"Stephen Colbert\", \"The Colbert Report\").\n.decl Political_views(Person:symbol, View:symbol)\nPolitical_views(\"Stephen Colbert\", \"liberal\").\n.decl Supports_candidate(View:symbol, Candidate:symbol)\nSupports_candidate(\"liberal\", \"Trump\").\n.decl Answer()\nAnswer() :- Hosts_show(host, \"The Colbert Report\"), Political_views(host, view), Supports_candidate(view, \"Trump\").\n.output Answer"]}
{"id": 366, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Tony Bennett\", 1926).\n.decl Has_baby_in_year(Person:symbol, Baby_year:float)\n.decl Answer()\nAnswer() :- Born_in_year(\"Tony Bennett\", birth_year), Has_baby_in_year(\"Tony Bennett\", 2020), 2020 - birth_year <= 100.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Tony Bennett\", 1926).\n.decl Has_baby_in_year(Person:symbol, Baby_year:float)\n.decl Answer()\nAnswer() :- Born_in_year(\"Tony Bennett\", birth_year), Has_baby_in_year(\"Tony Bennett\", 2020), 2020 - birth_year <= 100.\n.output Answer"]}
{"id": 367, "answer": false, "completion": ".decl Understands(Person:symbol, Concept:symbol)\nUnderstands(\"Jesus\", \"Christianity\").\n.decl Related_to_concept(Concept_A:symbol, Concept_B:symbol)\nRelated_to_concept(\"Easter Bunny\", \"Christianity\").\n.decl Answer()\nAnswer() :- Understands(\"Jesus\", concept), Related_to_concept(\"Easter Bunny\", concept).\n.output Answer", "completions": [".decl Understands(Person:symbol, Concept:symbol)\nUnderstands(\"Jesus\", \"Christianity\").\n.decl Related_to_concept(Concept_A:symbol, Concept_B:symbol)\nRelated_to_concept(\"Easter Bunny\", \"Christianity\").\n.decl Answer()\nAnswer() :- Understands(\"Jesus\", concept), Related_to_concept(\"Easter Bunny\", concept).\n.output Answer"]}
{"id": 368, "answer": true, "completion": ".decl Is_Fibonacci(N:float)\nIs_Fibonacci(0).\nIs_Fibonacci(1).\nIs_Fibonacci(N) :- Is_Fibonacci(N1), Is_Fibonacci(N2), N = N1 + N2, N1 < N2.\n\n.decl Is_In_Pi(N:float)\n// Assuming some numbers discovered in Pi\nIs_In_Pi(3).\nIs_In_Pi(1).\nIs_In_Pi(4).\nIs_In_Pi(5).\nIs_In_Pi(9).\n\n.decl Answer()\nAnswer() :- !Is_Fibonacci(N), !Is_In_Pi(N).\n.output Answer", "completions": [".decl Is_Fibonacci(N:float)\nIs_Fibonacci(0).\nIs_Fibonacci(1).\nIs_Fibonacci(N) :- Is_Fibonacci(N1), Is_Fibonacci(N2), N = N1 + N2, N1 < N2.\n\n.decl Is_In_Pi(N:float)\n// Assuming some numbers discovered in Pi\nIs_In_Pi(3).\nIs_In_Pi(1).\nIs_In_Pi(4).\nIs_In_Pi(5).\nIs_In_Pi(9).\n\n.decl Answer()\nAnswer() :- !Is_Fibonacci(N), !Is_In_Pi(N).\n.output Answer"]}
{"id": 369, "answer": true, "completion": ".decl Has_average_number(Object:symbol, Average_number:float)\nHas_average_number(\"peas in a pod\", 9).\n.decl Has_n_commas(Number:float, N_commas:float)\nHas_n_commas(1000000000, 2).\n.decl Answer()\nAnswer() :- Has_average_number(\"peas in a pod\", average_number), Has_n_commas(1000000000, n_commas), average_number >= n_commas.\n.output Answer", "completions": [".decl Has_average_number(Object:symbol, Average_number:float)\nHas_average_number(\"peas in a pod\", 9).\n.decl Has_n_commas(Number:float, N_commas:float)\nHas_n_commas(1000000000, 2).\n.decl Answer()\nAnswer() :- Has_average_number(\"peas in a pod\", average_number), Has_n_commas(1000000000, n_commas), average_number >= n_commas.\n.output Answer"]}
{"id": 370, "answer": true, "completion": ".decl Ingredient(Food:symbol, Ingredient:symbol)\nIngredient(\"French toast\", \"bread\").\nIngredient(\"French toast\", \"eggs\").\nIngredient(\"French toast\", \"milk\").\nIngredient(\"French toast\", \"sugar\").\nIngredient(\"French toast\", \"cinnamon\").\nIngredient(\"French toast\", \"vanilla extract\").\n.decl Comes_from(Ingredient:symbol, Source:symbol)\nComes_from(\"eggs\", \"chicken\").\nComes_from(\"milk\", \"cow\").\nComes_from(\"milk\", \"goat\").\n.decl Answer()\nAnswer() :- Ingredient(\"French toast\", ingredient), Comes_from(ingredient, \"goat\").\n.output Answer", "completions": [".decl Ingredient(Food:symbol, Ingredient:symbol)\nIngredient(\"French toast\", \"bread\").\nIngredient(\"French toast\", \"eggs\").\nIngredient(\"French toast\", \"milk\").\nIngredient(\"French toast\", \"sugar\").\nIngredient(\"French toast\", \"cinnamon\").\nIngredient(\"French toast\", \"vanilla extract\").\n.decl Comes_from(Ingredient:symbol, Source:symbol)\nComes_from(\"eggs\", \"chicken\").\nComes_from(\"milk\", \"cow\").\nComes_from(\"milk\", \"goat\").\n.decl Answer()\nAnswer() :- Ingredient(\"French toast\", ingredient), Comes_from(ingredient, \"goat\").\n.output Answer"]}
{"id": 371, "answer": true, "completion": ".decl Is_similar(Role1:symbol, Role2:symbol)\nIs_similar(\"US Secretary of State\", \"administrative secretary of an office\").\n.decl Answer()\nAnswer() :- Is_similar(\"US Secretary of State\", \"administrative secretary of an office\").\n.output Answer", "completions": [".decl Is_similar(Role1:symbol, Role2:symbol)\nIs_similar(\"US Secretary of State\", \"administrative secretary of an office\").\n.decl Answer()\nAnswer() :- Is_similar(\"US Secretary of State\", \"administrative secretary of an office\").\n.output Answer"]}
{"id": 372, "answer": true, "completion": ".decl Is_newbie(Person:symbol)\nIs_newbie(\"Dale Earnhardt Jr.\").\n\n.decl Is_experienced(Person:symbol)\nIs_experienced(\"Dale Earnhardt Jr.\").\n\n.decl Answer()\nAnswer() :- Is_newbie(\"Dale Earnhardt Jr.\"), !Is_experienced(\"Dale Earnhardt Jr.\").\n\n.output Answer", "completions": [".decl Is_newbie(Person:symbol)\nIs_newbie(\"Dale Earnhardt Jr.\").\n\n.decl Is_experienced(Person:symbol)\nIs_experienced(\"Dale Earnhardt Jr.\").\n\n.decl Answer()\nAnswer() :- Is_newbie(\"Dale Earnhardt Jr.\"), !Is_experienced(\"Dale Earnhardt Jr.\").\n\n.output Answer"]}
{"id": 373, "answer": true, "completion": ".decl Has_strength(Character:symbol, Strength:float)\nHas_strength(\"Ronda Rousey\", 5).\nHas_strength(\"Colossus\", 100).\n.decl Answer()\nAnswer() :- Has_strength(\"Ronda Rousey\", strength1), Has_strength(\"Colossus\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Character:symbol, Strength:float)\nHas_strength(\"Ronda Rousey\", 5).\nHas_strength(\"Colossus\", 100).\n.decl Answer()\nAnswer() :- Has_strength(\"Ronda Rousey\", strength1), Has_strength(\"Colossus\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 374, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"DRL Racer X drone\", 179.6).\n.decl Has_length(Object:symbol, Length:float)\nHas_length(\"Brooklyn Bridge\", 1825).\n.decl Answer()\nAnswer() :- Has_speed(\"DRL Racer X drone\", speed), Has_length(\"Brooklyn Bridge\", length), 18 * speed >= length.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"DRL Racer X drone\", 179.6).\n.decl Has_length(Object:symbol, Length:float)\nHas_length(\"Brooklyn Bridge\", 1825).\n.decl Answer()\nAnswer() :- Has_speed(\"DRL Racer X drone\", speed), Has_length(\"Brooklyn Bridge\", length), 18 * speed >= length.\n.output Answer"]}
{"id": 375, "answer": true, "completion": ".decl Is_abstract_art(Art_form:symbol)\nIs_abstract_art(\"painting\").\nIs_abstract_art(\"sculpture\").\nIs_abstract_art(\"photography\").\n.decl Answer()\nAnswer() :- Is_abstract_art(\"photography\").\n.output Answer", "completions": [".decl Is_abstract_art(Art_form:symbol)\nIs_abstract_art(\"painting\").\nIs_abstract_art(\"sculpture\").\nIs_abstract_art(\"photography\").\n.decl Answer()\nAnswer() :- Is_abstract_art(\"photography\").\n.output Answer"]}
{"id": 376, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"giant squid\", 13).\nHas_length(\"Titanic deck\", 269.1).\n.decl Answer()\nAnswer() :- Has_length(\"giant squid\", length1), Has_length(\"Titanic deck\", length2), length1 <= length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"giant squid\", 13).\nHas_length(\"Titanic deck\", 269.1).\n.decl Answer()\nAnswer() :- Has_length(\"giant squid\", length1), Has_length(\"Titanic deck\", length2), length1 <= length2.\n.output Answer"]}
{"id": 377, "answer": true, "completion": ".decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Supernatural\", 15).\nHas_n_seasons(\"2001 CW debuting shows seasons record\", 7).\n.decl Answer()\nAnswer() :- Has_n_seasons(\"Supernatural\", n_seasons1), Has_n_seasons(\"2001 CW debuting shows seasons record\", n_seasons2), n_seasons1 > n_seasons2.\n.output Answer", "completions": [".decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Supernatural\", 15).\nHas_n_seasons(\"2001 CW debuting shows seasons record\", 7).\n.decl Answer()\nAnswer() :- Has_n_seasons(\"Supernatural\", n_seasons1), Has_n_seasons(\"2001 CW debuting shows seasons record\", n_seasons2), n_seasons1 > n_seasons2.\n.output Answer"]}
{"id": 378, "answer": false, "completion": ".decl Has_relation(Person_A:symbol, Relation:symbol, Person_B:symbol)\nHas_relation(\"Eddie Murphy\", \"father\", \"Charles Edward Murphy\").\n.decl Attended(Person:symbol, Event:symbol)\nAttended(\"Charles Edward Murphy\", \"Eddie Murphy's first stand up show\").\n.decl Died(Person:symbol, Year:float)\nDied(\"Charles Edward Murphy\", 1969).\n.decl Occurred(Event:symbol, Year:float)\nOccurred(\"Eddie Murphy's first stand up show\", 1976).\n.decl Answer()\nAnswer() :- Has_relation(\"Eddie Murphy\", \"father\", father), Attended(father, \"Eddie Murphy's first stand up show\").\nAnswer() :- Has_relation(\"Eddie Murphy\", \"father\", father), Died(father, death_year), Occurred(\"Eddie Murphy's first stand up show\", show_year), death_year > show_year.\n.output Answer", "completions": [".decl Has_relation(Person_A:symbol, Relation:symbol, Person_B:symbol)\nHas_relation(\"Eddie Murphy\", \"father\", \"Charles Edward Murphy\").\n.decl Attended(Person:symbol, Event:symbol)\nAttended(\"Charles Edward Murphy\", \"Eddie Murphy's first stand up show\").\n.decl Died(Person:symbol, Year:float)\nDied(\"Charles Edward Murphy\", 1969).\n.decl Occurred(Event:symbol, Year:float)\nOccurred(\"Eddie Murphy's first stand up show\", 1976).\n.decl Answer()\nAnswer() :- Has_relation(\"Eddie Murphy\", \"father\", father), Attended(father, \"Eddie Murphy's first stand up show\").\nAnswer() :- Has_relation(\"Eddie Murphy\", \"father\", father), Died(father, death_year), Occurred(\"Eddie Murphy's first stand up show\", show_year), death_year > show_year.\n.output Answer"]}
{"id": 379, "answer": true, "completion": ".decl Is_visible(Object:symbol)\nIs_visible(\"methane\").\n\n.decl Answer()\nAnswer() :- Is_visible(\"methane\").\n.output Answer", "completions": [".decl Is_visible(Object:symbol)\nIs_visible(\"methane\").\n\n.decl Answer()\nAnswer() :- Is_visible(\"methane\").\n.output Answer"]}
{"id": 380, "answer": true, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"frost in Texas\", \"December\").\nHappens_in_month(\"frost in Texas\", \"January\").\nHappens_in_month(\"frost in Texas\", \"February\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"frost in Texas\", \"September\").\nAnswer() :- !Happens_in_month(\"frost in Texas\", \"September\").\n.output Answer", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"frost in Texas\", \"December\").\nHappens_in_month(\"frost in Texas\", \"January\").\nHappens_in_month(\"frost in Texas\", \"February\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"frost in Texas\", \"September\").\nAnswer() :- !Happens_in_month(\"frost in Texas\", \"September\").\n.output Answer"]}
{"id": 381, "answer": true, "completion": ".decl Inhabits(Animal:symbol, Location:symbol)\nInhabits(\"mountain goats\", \"mountainous regions\").\n.decl Is_location(Location:symbol, Type:symbol)\nIs_location(\"Mount Sharp\", \"mountain\").\n.decl Answer()\nAnswer() :- Inhabits(\"mountain goats\", location), Is_location(\"Mount Sharp\", location).\n.output Answer", "completions": [".decl Inhabits(Animal:symbol, Location:symbol)\nInhabits(\"mountain goats\", \"mountainous regions\").\n.decl Is_location(Location:symbol, Type:symbol)\nIs_location(\"Mount Sharp\", \"mountain\").\n.decl Answer()\nAnswer() :- Inhabits(\"mountain goats\", location), Is_location(\"Mount Sharp\", location).\n.output Answer"]}
{"id": 382, "answer": true, "completion": ".decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Felicity Huffman\", \"Democratic Party\").\n.decl Belongs_to(Candidate:symbol, Party:symbol)\nBelongs_to(\"Mike DeWine\", \"Republican Party\").\n.decl Answer()\nAnswer() :- Votes_for(\"Felicity Huffman\", party), Belongs_to(\"Mike DeWine\", party).\n.output Answer", "completions": [".decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Felicity Huffman\", \"Democratic Party\").\n.decl Belongs_to(Candidate:symbol, Party:symbol)\nBelongs_to(\"Mike DeWine\", \"Republican Party\").\n.decl Answer()\nAnswer() :- Votes_for(\"Felicity Huffman\", party), Belongs_to(\"Mike DeWine\", party).\n.output Answer"]}
{"id": 383, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Tony Bennett\", 4).\n.decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Tony Bennett\", 3).\n.decl Answer()\nAnswer() :- Has_n_children(\"Tony Bennett\", n_children), Has_n_wives(\"Tony Bennett\", n_wives), n_children > n_wives.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Tony Bennett\", 4).\n.decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Tony Bennett\", 3).\n.decl Answer()\nAnswer() :- Has_n_children(\"Tony Bennett\", n_children), Has_n_wives(\"Tony Bennett\", n_wives), n_children > n_wives.\n.output Answer"]}
{"id": 384, "answer": true, "completion": ".decl Has_n_elements(Set:symbol, N_elements:float)\nHas_n_elements(\"Survivor seasons\", 41).\nHas_n_elements(\"Ancient Greek letters\", 24).\n.decl Answer()\nAnswer() :- Has_n_elements(\"Survivor seasons\", n_elements1), Has_n_elements(\"Ancient Greek letters\", n_elements2), n_elements1 > n_elements2.\n.output Answer", "completions": [".decl Has_n_elements(Set:symbol, N_elements:float)\nHas_n_elements(\"Survivor seasons\", 41).\nHas_n_elements(\"Ancient Greek letters\", 24).\n.decl Answer()\nAnswer() :- Has_n_elements(\"Survivor seasons\", n_elements1), Has_n_elements(\"Ancient Greek letters\", n_elements2), n_elements1 > n_elements2.\n.output Answer"]}
{"id": 385, "answer": false, "completion": ".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Carl Friedrich Gauss\", \"1777-1855\").\n.decl Had_technology(Time_period:symbol, Technology:symbol, Range:float)\nHad_technology(\"1777-1855\", \"telegraph\", 100).\n.decl Answer()\nAnswer() :- Lived_in_time(\"Carl Friedrich Gauss\", time_period), Had_technology(time_period, technology, range), range >= 100.\n.output Answer", "completions": [".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Carl Friedrich Gauss\", \"1777-1855\").\n.decl Had_technology(Time_period:symbol, Technology:symbol, Range:float)\nHad_technology(\"1777-1855\", \"telegraph\", 100).\n.decl Answer()\nAnswer() :- Lived_in_time(\"Carl Friedrich Gauss\", time_period), Had_technology(time_period, technology, range), range >= 100.\n.output Answer"]}
{"id": 386, "answer": false, "completion": ".decl Is_essential(Ingredient:symbol, Process:symbol)\nIs_essential(\"grapes\", \"winemaking\").\n.decl Answer()\nAnswer() :- Is_essential(\"grapes\", \"winemaking\").\n.output Answer", "completions": [".decl Is_essential(Ingredient:symbol, Process:symbol)\nIs_essential(\"grapes\", \"winemaking\").\n.decl Answer()\nAnswer() :- Is_essential(\"grapes\", \"winemaking\").\n.output Answer"]}
{"id": 387, "answer": true, "completion": ".decl Has_average_duration(Event:symbol, Duration:float)\nHas_average_duration(\"pregnancy\", 9).\nHas_average_duration(\"wheat seed blooming\", 3).\n.decl Answer()\nAnswer() :- Has_average_duration(\"pregnancy\", duration1), Has_average_duration(\"wheat seed blooming\", duration2), duration1 < duration2.\n.output Answer", "completions": [".decl Has_average_duration(Event:symbol, Duration:float)\nHas_average_duration(\"pregnancy\", 9).\nHas_average_duration(\"wheat seed blooming\", 3).\n.decl Answer()\nAnswer() :- Has_average_duration(\"pregnancy\", duration1), Has_average_duration(\"wheat seed blooming\", duration2), duration1 < duration2.\n.output Answer"]}
{"id": 388, "answer": true, "completion": ".decl Can_make(Technology:symbol, Object:symbol)\nCan_make(\"3D printing\", \"plastic objects\").\nCan_make(\"3D printing\", \"metal objects\").\nCan_make(\"3D printing\", \"ceramic objects\").\n.decl Is_type(Object:symbol, Type:symbol)\nIs_type(\"adenovirus\", \"virus\").\n.decl Answer()\nAnswer() :- Can_make(\"3D printing\", \"adenovirus\").\nAnswer() :- Can_make(\"3D printing\", object), Is_type(\"adenovirus\", type), Is_type(object, type).\n.output Answer", "completions": [".decl Can_make(Technology:symbol, Object:symbol)\nCan_make(\"3D printing\", \"plastic objects\").\nCan_make(\"3D printing\", \"metal objects\").\nCan_make(\"3D printing\", \"ceramic objects\").\n.decl Is_type(Object:symbol, Type:symbol)\nIs_type(\"adenovirus\", \"virus\").\n.decl Answer()\nAnswer() :- Can_make(\"3D printing\", \"adenovirus\").\nAnswer() :- Can_make(\"3D printing\", object), Is_type(\"adenovirus\", type), Is_type(object, type).\n.output Answer"]}
{"id": 389, "answer": true, "completion": ".decl Character_in_work(Character:symbol, Work:symbol)\nCharacter_in_work(\"Dorian Gray\", \"The Picture of Dorian Gray\").\nCharacter_in_work(\"Dorian Gray\", \"Penny Dreadful\").\n.decl Involves_person(Work:symbol, Person:symbol)\nInvolves_person(\"Penny Dreadful\", \"Eva Green\").\n.decl Answer()\nAnswer() :- Character_in_work(\"Dorian Gray\", work), Involves_person(work, \"Eva Green\").\n.output Answer", "completions": [".decl Character_in_work(Character:symbol, Work:symbol)\nCharacter_in_work(\"Dorian Gray\", \"The Picture of Dorian Gray\").\nCharacter_in_work(\"Dorian Gray\", \"Penny Dreadful\").\n.decl Involves_person(Work:symbol, Person:symbol)\nInvolves_person(\"Penny Dreadful\", \"Eva Green\").\n.decl Answer()\nAnswer() :- Character_in_work(\"Dorian Gray\", work), Involves_person(work, \"Eva Green\").\n.output Answer"]}
{"id": 390, "answer": true, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 20500).\n.decl Has_homeless_population(State:symbol, Homeless_population:float)\nHas_homeless_population(\"Michigan\", 8600).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity), Has_homeless_population(\"Michigan\", homeless_population), capacity >= homeless_population.\n.output Answer", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 20500).\n.decl Has_homeless_population(State:symbol, Homeless_population:float)\nHas_homeless_population(\"Michigan\", 8600).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity), Has_homeless_population(\"Michigan\", homeless_population), capacity >= homeless_population.\n.output Answer"]}
{"id": 391, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Arnold Schwarzenegger\", 1947).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"red fox\", 14).\n.decl Strong_in_year(Person:symbol, Year:float)\nStrong_in_year(\"Arnold Schwarzenegger\", 1967).\n.decl Answer()\nAnswer() :- Born_in_year(\"Arnold Schwarzenegger\", birth_year), Has_weight(\"red fox\", weight), Strong_in_year(\"Arnold Schwarzenegger\", year), year >= birth_year + 20, weight > 50.\nAnswer() :- !Strong_in_year(\"Arnold Schwarzenegger\", 1967), Has_weight(\"red fox\", weight), weight > 50.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Arnold Schwarzenegger\", 1947).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"red fox\", 14).\n.decl Strong_in_year(Person:symbol, Year:float)\nStrong_in_year(\"Arnold Schwarzenegger\", 1967).\n.decl Answer()\nAnswer() :- Born_in_year(\"Arnold Schwarzenegger\", birth_year), Has_weight(\"red fox\", weight), Strong_in_year(\"Arnold Schwarzenegger\", year), year >= birth_year + 20, weight > 50.\nAnswer() :- !Strong_in_year(\"Arnold Schwarzenegger\", 1967), Has_weight(\"red fox\", weight), weight > 50.\n.output Answer"]}
{"id": 392, "answer": false, "completion": ".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"Eid al-Fitr\", 3).\nLasts_n_days(\"US Office\", 45).\n.decl Answer()\nAnswer() :- Lasts_n_days(\"Eid al-Fitr\", n_days1), Lasts_n_days(\"US Office\", n_days2), n_days1 < n_days2.\n.output Answer", "completions": [".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"Eid al-Fitr\", 3).\nLasts_n_days(\"US Office\", 45).\n.decl Answer()\nAnswer() :- Lasts_n_days(\"Eid al-Fitr\", n_days1), Lasts_n_days(\"US Office\", n_days2), n_days1 < n_days2.\n.output Answer"]}
{"id": 393, "answer": false, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Tropicana Field\", 25000).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Auburn, New York\", 27000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tropicana Field\", capacity), Has_population(\"Auburn, New York\", population), capacity >= population.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Tropicana Field\", 25000).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Auburn, New York\", 27000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tropicana Field\", capacity), Has_population(\"Auburn, New York\", population), capacity >= population.\n.output Answer"]}
{"id": 394, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Richard III\", 1452).\nBorn_in_year(\"Richard III's grandson\", 1483).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Richard III\", 1485).\n.decl Knew(Person_A:symbol, Person_B:symbol)\nKnew(\"Richard III\", \"Richard III's grandson\") :- Born_in_year(\"Richard III\", birth_year1), Born_in_year(\"Richard III's grandson\", birth_year2), Died_in_year(\"Richard III\", death_year1), birth_year2 <= death_year1.\n.decl Answer()\nAnswer() :- Knew(\"Richard III\", \"Richard III's grandson\").\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Richard III\", 1452).\nBorn_in_year(\"Richard III's grandson\", 1483).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Richard III\", 1485).\n.decl Knew(Person_A:symbol, Person_B:symbol)\nKnew(\"Richard III\", \"Richard III's grandson\") :- Born_in_year(\"Richard III\", birth_year1), Born_in_year(\"Richard III's grandson\", birth_year2), Died_in_year(\"Richard III\", death_year1), birth_year2 <= death_year1.\n.decl Answer()\nAnswer() :- Knew(\"Richard III\", \"Richard III's grandson\").\n.output Answer"]}
{"id": 395, "answer": false, "completion": ".decl Has_landslide_margin(Event:symbol, Margin:float)\nHas_landslide_margin(\"1980 United States presidential election\", 9.7).\n.decl Has_greater_landslide(Event:symbol)\nHas_greater_landslide(\"1964 United States presidential election\").\nHas_greater_landslide(\"1972 United States presidential election\").\nHas_landslide_margin(\"1964 United States presidential election\", 22.6).\nHas_landslide_margin(\"1972 United States presidential election\", 23.2).\n.decl Answer()\nAnswer() :- Has_greater_landslide(event), Has_landslide_margin(event, margin1), Has_landslide_margin(\"1980 United States presidential election\", margin2), margin1 > margin2.\n.output Answer", "completions": [".decl Has_landslide_margin(Event:symbol, Margin:float)\nHas_landslide_margin(\"1980 United States presidential election\", 9.7).\n.decl Has_greater_landslide(Event:symbol)\nHas_greater_landslide(\"1964 United States presidential election\").\nHas_greater_landslide(\"1972 United States presidential election\").\nHas_landslide_margin(\"1964 United States presidential election\", 22.6).\nHas_landslide_margin(\"1972 United States presidential election\", 23.2).\n.decl Answer()\nAnswer() :- Has_greater_landslide(event), Has_landslide_margin(event, margin1), Has_landslide_margin(\"1980 United States presidential election\", margin2), margin1 > margin2.\n.output Answer"]}
{"id": 396, "answer": true, "completion": ".decl Is_diver(Person:symbol)\nIs_diver(\"Nuno Gomes\").\n.decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Red Sea's deepest point\", 2211).\n.decl Has_record_depth(Person:symbol, Depth:float)\nHas_record_depth(\"Nuno Gomes\", 318.25).\n.decl Answer()\nAnswer() :- Is_diver(\"Nuno Gomes\"), Has_depth(\"Red Sea's deepest point\", depth1), Has_record_depth(\"Nuno Gomes\", depth2), depth1 > depth2.\n.output Answer", "completions": [".decl Is_diver(Person:symbol)\nIs_diver(\"Nuno Gomes\").\n.decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Red Sea's deepest point\", 2211).\n.decl Has_record_depth(Person:symbol, Depth:float)\nHas_record_depth(\"Nuno Gomes\", 318.25).\n.decl Answer()\nAnswer() :- Is_diver(\"Nuno Gomes\"), Has_depth(\"Red Sea's deepest point\", depth1), Has_record_depth(\"Nuno Gomes\", depth2), depth1 > depth2.\n.output Answer"]}
{"id": 397, "answer": true, "completion": ".decl Explains(Person:symbol, Topic:symbol)\nExplains(\"Tom Cruise\", \"mental auditing\").\n.decl Answer()\nAnswer() :- Explains(\"Tom Cruise\", \"mental auditing\").\n.output Answer", "completions": [".decl Explains(Person:symbol, Topic:symbol)\nExplains(\"Tom Cruise\", \"mental auditing\").\n.decl Answer()\nAnswer() :- Explains(\"Tom Cruise\", \"mental auditing\").\n.output Answer"]}
{"id": 398, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"John Lennon\", 1940).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"John Lennon\", 1980).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"Compact discs\", 1982).\n.decl Answer()\nAnswer() :- Born_in_year(\"John Lennon\", birth_year), Died_in_year(\"John Lennon\", death_year), Invented_in_year(\"Compact discs\", invention_year), birth_year <= invention_year, invention_year <= death_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"John Lennon\", 1940).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"John Lennon\", 1980).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"Compact discs\", 1982).\n.decl Answer()\nAnswer() :- Born_in_year(\"John Lennon\", birth_year), Died_in_year(\"John Lennon\", death_year), Invented_in_year(\"Compact discs\", invention_year), birth_year <= invention_year, invention_year <= death_year.\n.output Answer"]}
{"id": 399, "answer": true, "completion": ".decl Prime_Minister(Name:symbol, Order:float)\nPrime_Minister(\"Stanley Baldwin\", 22).\nPrime_Minister(\"Ramsay MacDonald\", 23).\nPrime_Minister(\"Neville Chamberlain\", 24).\nPrime_Minister(\"Margaret Thatcher\", 48).\n.decl Is_Woman(Name:symbol)\nIs_Woman(\"Margaret Thatcher\").\n.decl Answer()\nAnswer() :- Prime_Minister(\"Stanley Baldwin\", order1), Prime_Minister(woman, order2), Is_Woman(woman), (order2 = order1 + 1) ; (order2 = order1 - 1).\n.output Answer", "completions": [".decl Prime_Minister(Name:symbol, Order:float)\nPrime_Minister(\"Stanley Baldwin\", 22).\nPrime_Minister(\"Ramsay MacDonald\", 23).\nPrime_Minister(\"Neville Chamberlain\", 24).\nPrime_Minister(\"Margaret Thatcher\", 48).\n.decl Is_Woman(Name:symbol)\nIs_Woman(\"Margaret Thatcher\").\n.decl Answer()\nAnswer() :- Prime_Minister(\"Stanley Baldwin\", order1), Prime_Minister(woman, order2), Is_Woman(woman), (order2 = order1 + 1) ; (order2 = order1 - 1).\n.output Answer"]}
{"id": 400, "answer": true, "completion": ".decl Has_shoe_size(Person:symbol, Shoe_size:float)\nHas_shoe_size(\"Benito Mussolini\", 7).\nHas_shoe_size(\"Hafþór Björnsson\", 16).\n.decl Answer()\nAnswer() :- Has_shoe_size(\"Benito Mussolini\", shoe_size1), Has_shoe_size(\"Hafþór Björnsson\", shoe_size2), shoe_size1 > shoe_size2.\n.output Answer", "completions": [".decl Has_shoe_size(Person:symbol, Shoe_size:float)\nHas_shoe_size(\"Benito Mussolini\", 7).\nHas_shoe_size(\"Hafþór Björnsson\", 16).\n.decl Answer()\nAnswer() :- Has_shoe_size(\"Benito Mussolini\", shoe_size1), Has_shoe_size(\"Hafþór Björnsson\", shoe_size2), shoe_size1 > shoe_size2.\n.output Answer"]}
{"id": 401, "answer": true, "completion": ".decl Fears(Animal_A:symbol, Animal_B:symbol)\nFears(\"black-tailed jackrabbit\", \"coyote\").\nFears(\"black-tailed jackrabbit\", \"hawk\").\nFears(\"black-tailed jackrabbit\", \"snake\").\nFears(\"European wildcat\", \"wolf\").\nFears(\"European wildcat\", \"lynx\").\n.decl Answer()\nAnswer() :- Fears(\"black-tailed jackrabbit\", \"European wildcat\").\n.output Answer", "completions": [".decl Fears(Animal_A:symbol, Animal_B:symbol)\nFears(\"black-tailed jackrabbit\", \"coyote\").\nFears(\"black-tailed jackrabbit\", \"hawk\").\nFears(\"black-tailed jackrabbit\", \"snake\").\nFears(\"European wildcat\", \"wolf\").\nFears(\"European wildcat\", \"lynx\").\n.decl Answer()\nAnswer() :- Fears(\"black-tailed jackrabbit\", \"European wildcat\").\n.output Answer"]}
{"id": 402, "answer": true, "completion": ".decl Named_after(Object:symbol, Origin:symbol)\nNamed_after(\"Norman Oklahoma\", \"Abner E. Norman\").\n.decl Is_viking(Person:symbol)\nIs_viking(\"Abner E. Norman\").\n.decl Answer()\nAnswer() :- Named_after(\"Norman Oklahoma\", person), Is_viking(person).\n.output Answer", "completions": [".decl Named_after(Object:symbol, Origin:symbol)\nNamed_after(\"Norman Oklahoma\", \"Abner E. Norman\").\n.decl Is_viking(Person:symbol)\nIs_viking(\"Abner E. Norman\").\n.decl Answer()\nAnswer() :- Named_after(\"Norman Oklahoma\", person), Is_viking(person).\n.output Answer"]}
{"id": 403, "answer": true, "completion": ".decl Has_coordinates(Area:symbol, Latitude:float, Longitude:float)\nHas_coordinates(\"example_area\", 40.7128, -74.0060).\n.decl Answer()\nAnswer() :- Has_coordinates(area, latitude, longitude), !latitude = 0.\n.output Answer", "completions": [".decl Has_coordinates(Area:symbol, Latitude:float, Longitude:float)\nHas_coordinates(\"example_area\", 40.7128, -74.0060).\n.decl Answer()\nAnswer() :- Has_coordinates(area, latitude, longitude), !latitude = 0.\n.output Answer"]}
{"id": 404, "answer": false, "completion": ".decl Has_political_views(Person:symbol, Political_views:symbol)\nHas_political_views(\"Glen Beck\", \"conservative\").\nHas_political_views(\"Stephen Colbert\", \"liberal\").\n.decl Answer()\nAnswer() :- Has_political_views(\"Glen Beck\", views1), Has_political_views(\"Stephen Colbert\", views2), views1 != views2.\n.output Answer", "completions": [".decl Has_political_views(Person:symbol, Political_views:symbol)\nHas_political_views(\"Glen Beck\", \"conservative\").\nHas_political_views(\"Stephen Colbert\", \"liberal\").\n.decl Answer()\nAnswer() :- Has_political_views(\"Glen Beck\", views1), Has_political_views(\"Stephen Colbert\", views2), views1 != views2.\n.output Answer"]}
{"id": 405, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Audi R8 V-10 Plus\", 205).\nHas_speed(\"sound barrier\", 767).\n.decl Answer()\nAnswer() :- Has_speed(\"Audi R8 V-10 Plus\", speed1), Has_speed(\"sound barrier\", speed2), speed1 < speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Audi R8 V-10 Plus\", 205).\nHas_speed(\"sound barrier\", 767).\n.decl Answer()\nAnswer() :- Has_speed(\"Audi R8 V-10 Plus\", speed1), Has_speed(\"sound barrier\", speed2), speed1 < speed2.\n.output Answer"]}
{"id": 406, "answer": true, "completion": ".decl Has_average_lifespan(Species:symbol, Lifespan:float)\nHas_average_lifespan(\"monkey\", 25).\nHas_average_lifespan(\"human\", 72).\n.decl Answer()\nAnswer() :- Has_average_lifespan(\"monkey\", lifespan1), Has_average_lifespan(\"human\", lifespan2), lifespan1 > lifespan2.\n.output Answer", "completions": [".decl Has_average_lifespan(Species:symbol, Lifespan:float)\nHas_average_lifespan(\"monkey\", 25).\nHas_average_lifespan(\"human\", 72).\n.decl Answer()\nAnswer() :- Has_average_lifespan(\"monkey\", lifespan1), Has_average_lifespan(\"human\", lifespan2), lifespan1 > lifespan2.\n.output Answer"]}
{"id": 407, "answer": true, "completion": ".decl Believes_in_armageddon(Religion:symbol)\nBelieves_in_armageddon(\"Christianity\").\nBelieves_in_armageddon(\"Islam\").\nBelieves_in_armageddon(\"Judaism\").\n.decl Answer()\nAnswer() :- Believes_in_armageddon(religion).\n.output Answer", "completions": [".decl Believes_in_armageddon(Religion:symbol)\nBelieves_in_armageddon(\"Christianity\").\nBelieves_in_armageddon(\"Islam\").\nBelieves_in_armageddon(\"Judaism\").\n.decl Answer()\nAnswer() :- Believes_in_armageddon(religion).\n.output Answer"]}
{"id": 408, "answer": true, "completion": ".decl Has_injury_risk(Dance:symbol, Injury_risk:float)\nHas_injury_risk(\"waltz\", 0.1).\nHas_injury_risk(\"slam dance\", 0.9).\n.decl Answer()\nAnswer() :- Has_injury_risk(\"waltz\", injury_risk1), Has_injury_risk(\"slam dance\", injury_risk2), injury_risk1 < injury_risk2.\n.output Answer", "completions": [".decl Has_injury_risk(Dance:symbol, Injury_risk:float)\nHas_injury_risk(\"waltz\", 0.1).\nHas_injury_risk(\"slam dance\", 0.9).\n.decl Answer()\nAnswer() :- Has_injury_risk(\"waltz\", injury_risk1), Has_injury_risk(\"slam dance\", injury_risk2), injury_risk1 < injury_risk2.\n.output Answer"]}
{"id": 409, "answer": true, "completion": ".decl Has_prehensile_limbs(Animal:symbol)\nHas_prehensile_limbs(\"monkey\").\nHas_prehensile_limbs(\"opossum\").\nHas_prehensile_limbs(\"chameleon\").\n.decl Is_related(Animal_A:symbol, Animal_B:symbol)\nIs_related(\"Yeti\", \"ape\").\nIs_related(\"ape\", \"monkey\").\n.decl Answer()\nAnswer() :- Has_prehensile_limbs(\"Yeti\").\nAnswer() :- Is_related(\"Yeti\", animal), Has_prehensile_limbs(animal).\n.output Answer", "completions": [".decl Has_prehensile_limbs(Animal:symbol)\nHas_prehensile_limbs(\"monkey\").\nHas_prehensile_limbs(\"opossum\").\nHas_prehensile_limbs(\"chameleon\").\n.decl Is_related(Animal_A:symbol, Animal_B:symbol)\nIs_related(\"Yeti\", \"ape\").\nIs_related(\"ape\", \"monkey\").\n.decl Answer()\nAnswer() :- Has_prehensile_limbs(\"Yeti\").\nAnswer() :- Is_related(\"Yeti\", animal), Has_prehensile_limbs(animal).\n.output Answer"]}
{"id": 410, "answer": true, "completion": ".decl Held_at(Event:symbol, Venue:symbol)\nHeld_at(\"United Nations Framework Convention on Climate Change\", \"Javits Center\").\n.decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Javits Center\", 50000).\n.decl Requires_capacity(Event:symbol, Required_capacity:float)\nRequires_capacity(\"United Nations Framework Convention on Climate Change\", 30000).\n.decl Answer()\nAnswer() :- Held_at(\"United Nations Framework Convention on Climate Change\", \"Javits Center\"), Has_capacity(\"Javits Center\", capacity), Requires_capacity(\"United Nations Framework Convention on Climate Change\", required_capacity), capacity >= required_capacity.\n.output Answer", "completions": [".decl Held_at(Event:symbol, Venue:symbol)\nHeld_at(\"United Nations Framework Convention on Climate Change\", \"Javits Center\").\n.decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Javits Center\", 50000).\n.decl Requires_capacity(Event:symbol, Required_capacity:float)\nRequires_capacity(\"United Nations Framework Convention on Climate Change\", 30000).\n.decl Answer()\nAnswer() :- Held_at(\"United Nations Framework Convention on Climate Change\", \"Javits Center\"), Has_capacity(\"Javits Center\", capacity), Requires_capacity(\"United Nations Framework Convention on Climate Change\", required_capacity), capacity >= required_capacity.\n.output Answer"]}
{"id": 411, "answer": true, "completion": ".decl Succeeded(Event:symbol)\nSucceeded(\"Barbarossa's last expedition\").\n.decl Failed(Event:symbol)\nFailed(\"Operation Barbarossa\").\n.decl Answer()\nAnswer() :- Succeeded(\"Operation Barbarossa\").\nAnswer() :- Succeeded(\"Barbarossa's last expedition\").\n.output Answer", "completions": [".decl Succeeded(Event:symbol)\nSucceeded(\"Barbarossa's last expedition\").\n.decl Failed(Event:symbol)\nFailed(\"Operation Barbarossa\").\n.decl Answer()\nAnswer() :- Succeeded(\"Operation Barbarossa\").\nAnswer() :- Succeeded(\"Barbarossa's last expedition\").\n.output Answer"]}
{"id": 412, "answer": true, "completion": ".decl Is_palindrome(Word:symbol)\nIs_palindrome(\"C\").\nIs_palindrome(\"A\").\nIs_palindrome(\"P\").\nIs_palindrome(\"T\").\nIs_palindrome(\"C\").\nIs_palindrome(\"H\").\nIs_palindrome(\"A\").\n\n.decl CAPTCHA_word(Word:symbol)\nCAPTCHA_word(\"Completely\").\nCAPTCHA_word(\"Automated\").\nCAPTCHA_word(\"Public\").\nCAPTCHA_word(\"Turing\").\nCAPTCHA_word(\"test\").\nCAPTCHA_word(\"to\").\nCAPTCHA_word(\"tell\").\nCAPTCHA_word(\"Computers\").\nCAPTCHA_word(\"and\").\nCAPTCHA_word(\"Humans\").\nCAPTCHA_word(\"Apart\").\n\n.decl Answer()\nAnswer() :- CAPTCHA_word(word), Is_palindrome(word).\n.output Answer", "completions": [".decl Is_palindrome(Word:symbol)\nIs_palindrome(\"C\").\nIs_palindrome(\"A\").\nIs_palindrome(\"P\").\nIs_palindrome(\"T\").\nIs_palindrome(\"C\").\nIs_palindrome(\"H\").\nIs_palindrome(\"A\").\n\n.decl CAPTCHA_word(Word:symbol)\nCAPTCHA_word(\"Completely\").\nCAPTCHA_word(\"Automated\").\nCAPTCHA_word(\"Public\").\nCAPTCHA_word(\"Turing\").\nCAPTCHA_word(\"test\").\nCAPTCHA_word(\"to\").\nCAPTCHA_word(\"tell\").\nCAPTCHA_word(\"Computers\").\nCAPTCHA_word(\"and\").\nCAPTCHA_word(\"Humans\").\nCAPTCHA_word(\"Apart\").\n\n.decl Answer()\nAnswer() :- CAPTCHA_word(word), Is_palindrome(word).\n.output Answer"]}
{"id": 413, "answer": true, "completion": ".decl Located_in(Entity:symbol, Location:symbol)\nLocated_in(\"NY Stock Exchange\", \"New York City\").\nLocated_in(\"Universal Music Group\", \"Santa Monica\").\n.decl Answer()\nAnswer() :- Located_in(\"NY Stock Exchange\", location1), Located_in(\"Universal Music Group\", location2), location1 = location2.\n.output Answer", "completions": [".decl Located_in(Entity:symbol, Location:symbol)\nLocated_in(\"NY Stock Exchange\", \"New York City\").\nLocated_in(\"Universal Music Group\", \"Santa Monica\").\n.decl Answer()\nAnswer() :- Located_in(\"NY Stock Exchange\", location1), Located_in(\"Universal Music Group\", location2), location1 = location2.\n.output Answer"]}
{"id": 414, "answer": false, "completion": ".decl Is_alliteration(Text:symbol)\nIs_alliteration(\"Lorem ipsum\").\n.decl Is_backwards(Text:symbol, Backwards_Text:symbol)\nIs_backwards(\"Lorem ipsum\", \"muspi merol\").\n.decl Answer()\nAnswer() :- Is_alliteration(text), Is_backwards(text, backwards_text), !Is_alliteration(backwards_text).\n.output Answer", "completions": [".decl Is_alliteration(Text:symbol)\nIs_alliteration(\"Lorem ipsum\").\n.decl Is_backwards(Text:symbol, Backwards_Text:symbol)\nIs_backwards(\"Lorem ipsum\", \"muspi merol\").\n.decl Answer()\nAnswer() :- Is_alliteration(text), Is_backwards(text, backwards_text), !Is_alliteration(backwards_text).\n.output Answer"]}
{"id": 415, "answer": true, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"The Mona Lisa\", 850000000).\n.decl Has_revenue(Company:symbol, Revenue:float)\nHas_revenue(\"Amazon\", 386000000000).\n.decl Answer()\nAnswer() :- Has_value(\"The Mona Lisa\", value), Has_revenue(\"Amazon\", revenue), revenue > value.\n.output Answer", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"The Mona Lisa\", 850000000).\n.decl Has_revenue(Company:symbol, Revenue:float)\nHas_revenue(\"Amazon\", 386000000000).\n.decl Answer()\nAnswer() :- Has_value(\"The Mona Lisa\", value), Has_revenue(\"Amazon\", revenue), revenue > value.\n.output Answer"]}
{"id": 416, "answer": true, "completion": ".decl Practices_celibacy(Person:symbol, Is_celibate:bool)\nPractices_celibacy(\"cleric\", true).\n.decl Is_in_country(Person:symbol, Country:symbol)\nIs_in_country(\"cleric\", \"Somalia\").\n.decl Stoning_punishment(Country:symbol, Punishment:bool)\nStoning_punishment(\"Somalia\", true).\n.decl Answer()\nAnswer() :- Practices_celibacy(\"cleric\", is_celibate), Is_in_country(\"cleric\", \"Somalia\"), Stoning_punishment(\"Somalia\", punishment), is_celibate = true, punishment = true.\n.output Answer", "completions": [".decl Practices_celibacy(Person:symbol, Is_celibate:bool)\nPractices_celibacy(\"cleric\", true).\n.decl Is_in_country(Person:symbol, Country:symbol)\nIs_in_country(\"cleric\", \"Somalia\").\n.decl Stoning_punishment(Country:symbol, Punishment:bool)\nStoning_punishment(\"Somalia\", true).\n.decl Answer()\nAnswer() :- Practices_celibacy(\"cleric\", is_celibate), Is_in_country(\"cleric\", \"Somalia\"), Stoning_punishment(\"Somalia\", punishment), is_celibate = true, punishment = true.\n.output Answer"]}
{"id": 417, "answer": true, "completion": ".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Kia Rio\", 4.06, 1.72, 1.45).\nHas_dimensions(\"Oval Office\", 10.97, 8.23, 5.49).\n.decl Answer()\nAnswer() :- Has_dimensions(\"Kia Rio\", length1, width1, height1), Has_dimensions(\"Oval Office\", length2, width2, height2), length1 <= length2, width1 <= width2, height1 <= height2.\n.output Answer", "completions": [".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Kia Rio\", 4.06, 1.72, 1.45).\nHas_dimensions(\"Oval Office\", 10.97, 8.23, 5.49).\n.decl Answer()\nAnswer() :- Has_dimensions(\"Kia Rio\", length1, width1, height1), Has_dimensions(\"Oval Office\", length2, width2, height2), length1 <= length2, width1 <= width2, height1 <= height2.\n.output Answer"]}
{"id": 418, "answer": true, "completion": ".decl Has_familial_ties(Person_A:symbol, Person_B:symbol)\nHas_familial_ties(\"Manuel I of Portugal\", \"Catherine of Aragon\").\nHas_familial_ties(\"Catherine of Aragon\", \"Henry VIII\").\nHas_familial_ties(\"Henry VIII\", \"Tudors\").\n.decl Is_king_of(Person:symbol, People:symbol, Year:float)\nIs_king_of(\"Manuel I of Portugal\", \"Portuguese people\", 1515).\n.decl Answer()\nAnswer() :- Is_king_of(king, \"Portuguese people\", 1515), Has_familial_ties(king, \"Tudors\").\nAnswer() :- Is_king_of(king, \"Portuguese people\", 1515), Has_familial_ties(king, person), Has_familial_ties(person, \"Tudors\").\n.output Answer", "completions": [".decl Has_familial_ties(Person_A:symbol, Person_B:symbol)\nHas_familial_ties(\"Manuel I of Portugal\", \"Catherine of Aragon\").\nHas_familial_ties(\"Catherine of Aragon\", \"Henry VIII\").\nHas_familial_ties(\"Henry VIII\", \"Tudors\").\n.decl Is_king_of(Person:symbol, People:symbol, Year:float)\nIs_king_of(\"Manuel I of Portugal\", \"Portuguese people\", 1515).\n.decl Answer()\nAnswer() :- Is_king_of(king, \"Portuguese people\", 1515), Has_familial_ties(king, \"Tudors\").\nAnswer() :- Is_king_of(king, \"Portuguese people\", 1515), Has_familial_ties(king, person), Has_familial_ties(person, \"Tudors\").\n.output Answer"]}
{"id": 419, "answer": true, "completion": ".decl Reproduce(Natural:symbol, Couple_Type:symbol)\nReproduce(\"yes\", \"heterosexual\").\nReproduce(\"no\", \"gay male\").\nReproduce(\"no\", \"lesbian\").\n.decl Answer()\nAnswer() :- Reproduce(\"no\", \"gay male\").\n.output Answer", "completions": [".decl Reproduce(Natural:symbol, Couple_Type:symbol)\nReproduce(\"yes\", \"heterosexual\").\nReproduce(\"no\", \"gay male\").\nReproduce(\"no\", \"lesbian\").\n.decl Answer()\nAnswer() :- Reproduce(\"no\", \"gay male\").\n.output Answer"]}
{"id": 420, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Andre the Giant\", 2.24).\n.decl Is_taller(Person_A:symbol, Person_B:symbol)\nIs_taller(\"Yeti\", \"Andre the Giant\").\n.decl Answer()\nAnswer() :- !Is_taller(\"Yeti\", \"Andre the Giant\").\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Andre the Giant\", 2.24).\n.decl Is_taller(Person_A:symbol, Person_B:symbol)\nIs_taller(\"Yeti\", \"Andre the Giant\").\n.decl Answer()\nAnswer() :- !Is_taller(\"Yeti\", \"Andre the Giant\").\n.output Answer"]}
{"id": 421, "answer": false, "completion": ".decl Is_obscure(Person:symbol, Genre:symbol)\nIs_obscure(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Is_famous(Person:symbol, Genre:symbol)\nIs_famous(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Answer()\nAnswer() :- Is_obscure(\"Edgar Allan Poe\", \"horror fiction\").\nAnswer() :- !Is_famous(\"Edgar Allan Poe\", \"horror fiction\").\n.output Answer", "completions": [".decl Is_obscure(Person:symbol, Genre:symbol)\nIs_obscure(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Is_famous(Person:symbol, Genre:symbol)\nIs_famous(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Answer()\nAnswer() :- Is_obscure(\"Edgar Allan Poe\", \"horror fiction\").\nAnswer() :- !Is_famous(\"Edgar Allan Poe\", \"horror fiction\").\n.output Answer"]}
{"id": 422, "answer": true, "completion": ".decl Served_in_white_house(Person:symbol, Start_year:float, End_year:float)\nServed_in_white_house(\"Franklin D. Roosevelt\", 1933, 1945).\n.decl Father_of_system(Person:symbol, System:symbol)\nFather_of_system(\"Franklin D. Roosevelt\", \"social security system\").\n.decl Event_in_year(Event:symbol, Year:float)\nEvent_in_year(\"Panic of 1907\", 1907).\n.decl Answer()\nAnswer() :- Father_of_system(person, \"social security system\"), Served_in_white_house(person, start_year, end_year), Event_in_year(\"Panic of 1907\", year), year >= start_year, year <= end_year.\n.output Answer", "completions": [".decl Served_in_white_house(Person:symbol, Start_year:float, End_year:float)\nServed_in_white_house(\"Franklin D. Roosevelt\", 1933, 1945).\n.decl Father_of_system(Person:symbol, System:symbol)\nFather_of_system(\"Franklin D. Roosevelt\", \"social security system\").\n.decl Event_in_year(Event:symbol, Year:float)\nEvent_in_year(\"Panic of 1907\", 1907).\n.decl Answer()\nAnswer() :- Father_of_system(person, \"social security system\"), Served_in_white_house(person, start_year, end_year), Event_in_year(\"Panic of 1907\", year), year >= start_year, year <= end_year.\n.output Answer"]}
{"id": 423, "answer": false, "completion": ".decl Named_after_battle(Ship:symbol, Battle:symbol)\nNamed_after_battle(\"USS Iwo Jima\", \"Battle of Iwo Jima\").\n.decl Recovered_mission(Ship:symbol, Mission:symbol)\nRecovered_mission(\"USS Iwo Jima\", \"Apollo 13\").\n.decl Answer()\nAnswer() :- Recovered_mission(ship, \"Apollo 13\"), Named_after_battle(ship, battle).\n.output Answer", "completions": [".decl Named_after_battle(Ship:symbol, Battle:symbol)\nNamed_after_battle(\"USS Iwo Jima\", \"Battle of Iwo Jima\").\n.decl Recovered_mission(Ship:symbol, Mission:symbol)\nRecovered_mission(\"USS Iwo Jima\", \"Apollo 13\").\n.decl Answer()\nAnswer() :- Recovered_mission(ship, \"Apollo 13\"), Named_after_battle(ship, battle).\n.output Answer"]}
{"id": 424, "answer": true, "completion": ".decl Has_fused_vertebrae(Species:symbol, Fused_vertebrae:float)\nHas_fused_vertebrae(\"human sacrum\", 5).\nHas_fused_vertebrae(\"Alaskan Malamute\", 3).\n.decl Answer()\nAnswer() :- Has_fused_vertebrae(\"human sacrum\", fused_vertebrae1), Has_fused_vertebrae(\"Alaskan Malamute\", fused_vertebrae2), fused_vertebrae1 > fused_vertebrae2.\n.output Answer", "completions": [".decl Has_fused_vertebrae(Species:symbol, Fused_vertebrae:float)\nHas_fused_vertebrae(\"human sacrum\", 5).\nHas_fused_vertebrae(\"Alaskan Malamute\", 3).\n.decl Answer()\nAnswer() :- Has_fused_vertebrae(\"human sacrum\", fused_vertebrae1), Has_fused_vertebrae(\"Alaskan Malamute\", fused_vertebrae2), fused_vertebrae1 > fused_vertebrae2.\n.output Answer"]}
{"id": 425, "answer": false, "completion": ".decl Participates_in(Person:symbol, Event:symbol)\nParticipates_in(\"Josh Blue\", \"Paralympics Games\").\n.decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Josh Blue\", \"cerebral palsy\").\n.decl Eligible_for(Person:symbol, Event:symbol)\nEligible_for(person, \"Paralympics Games\") :- Has_disability(person, _).\n.decl Answer()\nAnswer() :- Participates_in(\"Josh Blue\", \"Paralympics Games\").\nAnswer() :- Eligible_for(\"Josh Blue\", \"Paralympics Games\").\n.output Answer", "completions": [".decl Participates_in(Person:symbol, Event:symbol)\nParticipates_in(\"Josh Blue\", \"Paralympics Games\").\n.decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Josh Blue\", \"cerebral palsy\").\n.decl Eligible_for(Person:symbol, Event:symbol)\nEligible_for(person, \"Paralympics Games\") :- Has_disability(person, _).\n.decl Answer()\nAnswer() :- Participates_in(\"Josh Blue\", \"Paralympics Games\").\nAnswer() :- Eligible_for(\"Josh Blue\", \"Paralympics Games\").\n.output Answer"]}
{"id": 426, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Evander Holyfield\", 1962).\n.decl Has_age_record(Sport:symbol, Record_age:float)\nHas_age_record(\"boxing\", 45).\n.decl Current_year(Year:float)\nCurrent_year(2020).\n.decl Answer()\nAnswer() :- Born_in_year(\"Evander Holyfield\", birth_year), Has_age_record(\"boxing\", record_age), Current_year(current_year), (current_year - birth_year) > record_age.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Evander Holyfield\", 1962).\n.decl Has_age_record(Sport:symbol, Record_age:float)\nHas_age_record(\"boxing\", 45).\n.decl Current_year(Year:float)\nCurrent_year(2020).\n.decl Answer()\nAnswer() :- Born_in_year(\"Evander Holyfield\", birth_year), Has_age_record(\"boxing\", record_age), Current_year(current_year), (current_year - birth_year) > record_age.\n.output Answer"]}
{"id": 427, "answer": true, "completion": ".decl Known_for(Person:symbol, Trait:symbol)\nKnown_for(\"Glenn Beck\", \"controversial opinions\").\nKnown_for(\"Glenn Beck\", \"provocative style\").\n.decl Answer()\nAnswer() :- Known_for(\"Glenn Beck\", \"mild temper\").\nAnswer() :- !Known_for(\"Glenn Beck\", \"controversial opinions\"), !Known_for(\"Glenn Beck\", \"provocative style\").\n.output Answer", "completions": [".decl Known_for(Person:symbol, Trait:symbol)\nKnown_for(\"Glenn Beck\", \"controversial opinions\").\nKnown_for(\"Glenn Beck\", \"provocative style\").\n.decl Answer()\nAnswer() :- Known_for(\"Glenn Beck\", \"mild temper\").\nAnswer() :- !Known_for(\"Glenn Beck\", \"controversial opinions\"), !Known_for(\"Glenn Beck\", \"provocative style\").\n.output Answer"]}
{"id": 428, "answer": false, "completion": ".decl Mentioned_in_Dem_Bones(Bone:symbol)\nMentioned_in_Dem_Bones(\"ankle\").\nMentioned_in_Dem_Bones(\"knee\").\nMentioned_in_Dem_Bones(\"thigh\").\nMentioned_in_Dem_Bones(\"hip\").\nMentioned_in_Dem_Bones(\"back\").\nMentioned_in_Dem_Bones(\"shoulder\").\nMentioned_in_Dem_Bones(\"neck\").\nMentioned_in_Dem_Bones(\"head\").\n\n.decl Connected_to(Bone_A:symbol, Bone_B:symbol)\nConnected_to(\"sternum\", \"rib\").\nConnected_to(\"sternum\", \"clavicle\").\n\n.decl Answer()\nAnswer() :- Connected_to(\"sternum\", bone), Mentioned_in_Dem_Bones(bone).\n.output Answer", "completions": [".decl Mentioned_in_Dem_Bones(Bone:symbol)\nMentioned_in_Dem_Bones(\"ankle\").\nMentioned_in_Dem_Bones(\"knee\").\nMentioned_in_Dem_Bones(\"thigh\").\nMentioned_in_Dem_Bones(\"hip\").\nMentioned_in_Dem_Bones(\"back\").\nMentioned_in_Dem_Bones(\"shoulder\").\nMentioned_in_Dem_Bones(\"neck\").\nMentioned_in_Dem_Bones(\"head\").\n\n.decl Connected_to(Bone_A:symbol, Bone_B:symbol)\nConnected_to(\"sternum\", \"rib\").\nConnected_to(\"sternum\", \"clavicle\").\n\n.decl Answer()\nAnswer() :- Connected_to(\"sternum\", bone), Mentioned_in_Dem_Bones(bone).\n.output Answer"]}
{"id": 429, "answer": true, "completion": ".decl Is_species(Animal:symbol, Species:symbol)\nIs_species(\"Snoopy\", \"dog\").\n.decl Can_transmit_rabies(Species:symbol)\nCan_transmit_rabies(\"dog\").\n.decl Answer()\nAnswer() :- Is_species(\"Snoopy\", species), Can_transmit_rabies(species).\n.output Answer", "completions": [".decl Is_species(Animal:symbol, Species:symbol)\nIs_species(\"Snoopy\", \"dog\").\n.decl Can_transmit_rabies(Species:symbol)\nCan_transmit_rabies(\"dog\").\n.decl Answer()\nAnswer() :- Is_species(\"Snoopy\", species), Can_transmit_rabies(species).\n.output Answer"]}
{"id": 430, "answer": false, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Buddy The Elf\", \"Walter Hobbs\").\n.decl Works_in(Person:symbol, Industry:symbol)\nWorks_in(\"Walter Hobbs\", \"publishing\").\n.decl Answer()\nAnswer() :- Knows(\"Buddy The Elf\", person), Works_in(person, \"publishing\").\n.output Answer", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Buddy The Elf\", \"Walter Hobbs\").\n.decl Works_in(Person:symbol, Industry:symbol)\nWorks_in(\"Walter Hobbs\", \"publishing\").\n.decl Answer()\nAnswer() :- Knows(\"Buddy The Elf\", person), Works_in(person, \"publishing\").\n.output Answer"]}
{"id": 431, "answer": false, "completion": ".decl Associated_with_fruit(Person:symbol, Fruit:symbol, Color:symbol)\nAssociated_with_fruit(\"Isaac Newton\", \"apple\", \"red\").\n.decl Answer()\nAnswer() :- Associated_with_fruit(\"Isaac Newton\", fruit, \"red\").\n.output Answer", "completions": [".decl Associated_with_fruit(Person:symbol, Fruit:symbol, Color:symbol)\nAssociated_with_fruit(\"Isaac Newton\", \"apple\", \"red\").\n.decl Answer()\nAnswer() :- Associated_with_fruit(\"Isaac Newton\", fruit, \"red\").\n.output Answer"]}
{"id": 432, "answer": true, "completion": ".decl Has_potassium(Object:symbol, Potassium:float)\nHas_potassium(\"zucchini\", 512).\n.decl Usda_daily_recommendation(Nutrient:symbol, Amount:float)\nUsda_daily_recommendation(\"potassium\", 2600).\n.decl Answer()\nAnswer() :- Has_potassium(\"zucchini\", potassium1), Usda_daily_recommendation(\"potassium\", amount), 7 * potassium1 >= amount.\n.output Answer", "completions": [".decl Has_potassium(Object:symbol, Potassium:float)\nHas_potassium(\"zucchini\", 512).\n.decl Usda_daily_recommendation(Nutrient:symbol, Amount:float)\nUsda_daily_recommendation(\"potassium\", 2600).\n.decl Answer()\nAnswer() :- Has_potassium(\"zucchini\", potassium1), Usda_daily_recommendation(\"potassium\", amount), 7 * potassium1 >= amount.\n.output Answer"]}
{"id": 433, "answer": false, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Oprah Winfrey\", 2700000000).\n.decl Has_price(Object:symbol, Price:float)\nHas_price(\"Bugatti luxury car\", 3000000).\n.decl Answer(Dozens:float)\nAnswer(dozens) :- Has_net_worth(\"Oprah Winfrey\", net_worth), Has_price(\"Bugatti luxury car\", price), dozens = net_worth / (price * 12), dozens >= 1.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Oprah Winfrey\", 2700000000).\n.decl Has_price(Object:symbol, Price:float)\nHas_price(\"Bugatti luxury car\", 3000000).\n.decl Answer(Dozens:float)\nAnswer(dozens) :- Has_net_worth(\"Oprah Winfrey\", net_worth), Has_price(\"Bugatti luxury car\", price), dozens = net_worth / (price * 12), dozens >= 1.\n.output Answer"]}
{"id": 434, "answer": true, "completion": ".decl Won_election(Year:float, Party:symbol)\nWon_election(1980, \"Grand Old Party\").\n.decl Is_member(Person:symbol, Party:symbol)\nIs_member(\"Ronald Reagan\", \"Grand Old Party\").\n.decl Answer()\nAnswer() :- Won_election(1980, party), Is_member(person, party).\n.output Answer", "completions": [".decl Won_election(Year:float, Party:symbol)\nWon_election(1980, \"Grand Old Party\").\n.decl Is_member(Person:symbol, Party:symbol)\nIs_member(\"Ronald Reagan\", \"Grand Old Party\").\n.decl Answer()\nAnswer() :- Won_election(1980, party), Is_member(person, party).\n.output Answer"]}
{"id": 435, "answer": true, "completion": ".decl Has_last_name(Person:symbol, Last_name:symbol)\nHas_last_name(\"Henry Ford\", \"Ford\").\n.decl Common_last_name(Last_name:symbol)\nCommon_last_name(\"Smith\").\nCommon_last_name(\"Johnson\").\nCommon_last_name(\"Williams\").\nCommon_last_name(\"Brown\").\nCommon_last_name(\"Jones\").\nCommon_last_name(\"Garcia\").\nCommon_last_name(\"Miller\").\nCommon_last_name(\"Davis\").\nCommon_last_name(\"Rodriguez\").\nCommon_last_name(\"Martinez\").\nCommon_last_name(\"Hernandez\").\nCommon_last_name(\"Lopez\").\nCommon_last_name(\"Gonzalez\").\nCommon_last_name(\"Wilson\").\nCommon_last_name(\"Anderson\").\nCommon_last_name(\"Thomas\").\nCommon_last_name(\"Taylor\").\nCommon_last_name(\"Moore\").\nCommon_last_name(\"Jackson\").\nCommon_last_name(\"Martin\").\nCommon_last_name(\"Lee\").\nCommon_last_name(\"Perez\").\nCommon_last_name(\"Thompson\").\nCommon_last_name(\"White\").\nCommon_last_name(\"Harris\").\nCommon_last_name(\"Sanchez\").\nCommon_last_name(\"Clark\").\nCommon_last_name(\"Ramirez\").\nCommon_last_name(\"Lewis\").\nCommon_last_name(\"Robinson\").\nCommon_last_name(\"Walker\").\nCommon_last_name(\"Young\").\nCommon_last_name(\"Allen\").\nCommon_last_name(\"King\").\nCommon_last_name(\"Wright\").\nCommon_last_name(\"Scott\").\nCommon_last_name(\"Torres\").\nCommon_last_name(\"Nguyen\").\nCommon_last_name(\"Hill\").\nCommon_last_name(\"Flores\").\nCommon_last_name(\"Green\").\nCommon_last_name(\"Adams\").\nCommon_last_name(\"Nelson\").\nCommon_last_name(\"Baker\").\nCommon_last_name(\"Hall\").\nCommon_last_name(\"Rivera\").\nCommon_last_name(\"Campbell\").\nCommon_last_name(\"Mitchell\").\nCommon_last_name(\"Carter\").\nCommon_last_name(\"Roberts\").\nCommon_last_name(\"Gomez\").\nCommon_last_name(\"Phillips\").\nCommon_last_name(\"Evans\").\nCommon_last_name(\"Turner\").\nCommon_last_name(\"Diaz\").\nCommon_last_name(\"Parker\").\nCommon_last_name(\"Cruz\").\nCommon_last_name(\"Edwards\").\nCommon_last_name(\"Collins\").\nCommon_last_name(\"Reyes\").\nCommon_last_name(\"Stewart\").\nCommon_last_name(\"Morris\").\nCommon_last_name(\"Morales\").\nCommon_last_name(\"Murphy\").\nCommon_last_name(\"Cook\").\nCommon_last_name(\"Rogers\").\nCommon_last_name(\"Gutierrez\").\nCommon_last_name(\"Ortiz\").\nCommon_last_name(\"Morgan\").\nCommon_last_name(\"Cooper\").\nCommon_last_name(\"Peterson\").\nCommon_last_name(\"Bailey\").\nCommon_last_name(\"Reed\").\nCommon_last_name(\"Kelly\").\nCommon_last_name(\"Howard\").\nCommon_last_name(\"Ramos\").\nCommon_last_name(\"Kim\").\nCommon_last_name(\"Cox\").\nCommon_last_name(\"Ward\").\nCommon_last_name(\"Richardson\").\nCommon_last_name(\"Watson\").\nCommon_last_name(\"Brooks\").\nCommon_last_name(\"Chavez\").\nCommon_last_name(\"Wood\").\nCommon_last_name(\"James\").\nCommon_last_name(\"Bennett\").\nCommon_last_name(\"Gray\").\nCommon_last_name(\"Mendoza\").\nCommon_last_name(\"Ruiz\").\nCommon_last_name(\"Hughes\").\nCommon_last_name(\"Price\").\nCommon_last_name(\"Alvarez\").\nCommon_last_name(\"Castillo\").\nCommon_last_name(\"Sanders\").\nCommon_last_name(\"Patel\").\nCommon_last_name(\"Myers\").\nCommon_last_name(\"Long\").\nCommon_last_name(\"Ross\").\nCommon_last_name(\"Foster\").\nCommon_last_name(\"Jimenez\").\nCommon_last_name(\"Powell\").\nCommon_last_name(\"Jenkins\").\nCommon_last_name(\"Perry\").\nCommon_last_name(\"Russell\").\nCommon_last_name(\"Sullivan\").\nCommon_last_name(\"Bell\").\nCommon_last_name(\"Coleman\").\nCommon_last_name(\"Butler\").\nCommon_last_name(\"Henderson\").\nCommon_last_name(\"Barnes\").\nCommon_last_name(\"Gonzales\").\nCommon_last_name(\"Fisher\").\nCommon_last_name(\"Vasquez\").\nCommon_last_name(\"Simmons\").\nCommon_last_name(\"Romero\").\nCommon_last_name(\"Jordan\").\nCommon_last_name(\"Patterson\").\nCommon_last_name(\"Alexander\").\nCommon_last_name(\"Hamilton\").\nCommon_last_name(\"Graham\").\nCommon_last_name(\"Reynolds\").\nCommon_last_name(\"Griffin\").\nCommon_last_name(\"Wallace\").\nCommon_last_name(\"Moreno\").\nCommon_last_name(\"West\").\nCommon_last_name(\"Cole\").\nCommon_last_name(\"Hayes\").\nCommon_last_name(\"Bryant\").\nCommon_last_name(\"Herrera\").\nCommon_last_name(\"Gibson\").\nCommon_last_name(\"Ellis\").\nCommon_last_name(\"Tran\").\nCommon_last_name(\"Medina\").\nCommon_last_name(\"Aguilar\").\nCommon_last_name(\"Stevens\").\nCommon_last_name(\"Murray\").\nCommon_last_name(\"Ford\").\n.decl Answer()\nAnswer() :- Has_last_name(\"Henry Ford\", last_name), Common_last_name(last_name).\n.output Answer", "completions": [".decl Has_last_name(Person:symbol, Last_name:symbol)\nHas_last_name(\"Henry Ford\", \"Ford\").\n.decl Common_last_name(Last_name:symbol)\nCommon_last_name(\"Smith\").\nCommon_last_name(\"Johnson\").\nCommon_last_name(\"Williams\").\nCommon_last_name(\"Brown\").\nCommon_last_name(\"Jones\").\nCommon_last_name(\"Garcia\").\nCommon_last_name(\"Miller\").\nCommon_last_name(\"Davis\").\nCommon_last_name(\"Rodriguez\").\nCommon_last_name(\"Martinez\").\nCommon_last_name(\"Hernandez\").\nCommon_last_name(\"Lopez\").\nCommon_last_name(\"Gonzalez\").\nCommon_last_name(\"Wilson\").\nCommon_last_name(\"Anderson\").\nCommon_last_name(\"Thomas\").\nCommon_last_name(\"Taylor\").\nCommon_last_name(\"Moore\").\nCommon_last_name(\"Jackson\").\nCommon_last_name(\"Martin\").\nCommon_last_name(\"Lee\").\nCommon_last_name(\"Perez\").\nCommon_last_name(\"Thompson\").\nCommon_last_name(\"White\").\nCommon_last_name(\"Harris\").\nCommon_last_name(\"Sanchez\").\nCommon_last_name(\"Clark\").\nCommon_last_name(\"Ramirez\").\nCommon_last_name(\"Lewis\").\nCommon_last_name(\"Robinson\").\nCommon_last_name(\"Walker\").\nCommon_last_name(\"Young\").\nCommon_last_name(\"Allen\").\nCommon_last_name(\"King\").\nCommon_last_name(\"Wright\").\nCommon_last_name(\"Scott\").\nCommon_last_name(\"Torres\").\nCommon_last_name(\"Nguyen\").\nCommon_last_name(\"Hill\").\nCommon_last_name(\"Flores\").\nCommon_last_name(\"Green\").\nCommon_last_name(\"Adams\").\nCommon_last_name(\"Nelson\").\nCommon_last_name(\"Baker\").\nCommon_last_name(\"Hall\").\nCommon_last_name(\"Rivera\").\nCommon_last_name(\"Campbell\").\nCommon_last_name(\"Mitchell\").\nCommon_last_name(\"Carter\").\nCommon_last_name(\"Roberts\").\nCommon_last_name(\"Gomez\").\nCommon_last_name(\"Phillips\").\nCommon_last_name(\"Evans\").\nCommon_last_name(\"Turner\").\nCommon_last_name(\"Diaz\").\nCommon_last_name(\"Parker\").\nCommon_last_name(\"Cruz\").\nCommon_last_name(\"Edwards\").\nCommon_last_name(\"Collins\").\nCommon_last_name(\"Reyes\").\nCommon_last_name(\"Stewart\").\nCommon_last_name(\"Morris\").\nCommon_last_name(\"Morales\").\nCommon_last_name(\"Murphy\").\nCommon_last_name(\"Cook\").\nCommon_last_name(\"Rogers\").\nCommon_last_name(\"Gutierrez\").\nCommon_last_name(\"Ortiz\").\nCommon_last_name(\"Morgan\").\nCommon_last_name(\"Cooper\").\nCommon_last_name(\"Peterson\").\nCommon_last_name(\"Bailey\").\nCommon_last_name(\"Reed\").\nCommon_last_name(\"Kelly\").\nCommon_last_name(\"Howard\").\nCommon_last_name(\"Ramos\").\nCommon_last_name(\"Kim\").\nCommon_last_name(\"Cox\").\nCommon_last_name(\"Ward\").\nCommon_last_name(\"Richardson\").\nCommon_last_name(\"Watson\").\nCommon_last_name(\"Brooks\").\nCommon_last_name(\"Chavez\").\nCommon_last_name(\"Wood\").\nCommon_last_name(\"James\").\nCommon_last_name(\"Bennett\").\nCommon_last_name(\"Gray\").\nCommon_last_name(\"Mendoza\").\nCommon_last_name(\"Ruiz\").\nCommon_last_name(\"Hughes\").\nCommon_last_name(\"Price\").\nCommon_last_name(\"Alvarez\").\nCommon_last_name(\"Castillo\").\nCommon_last_name(\"Sanders\").\nCommon_last_name(\"Patel\").\nCommon_last_name(\"Myers\").\nCommon_last_name(\"Long\").\nCommon_last_name(\"Ross\").\nCommon_last_name(\"Foster\").\nCommon_last_name(\"Jimenez\").\nCommon_last_name(\"Powell\").\nCommon_last_name(\"Jenkins\").\nCommon_last_name(\"Perry\").\nCommon_last_name(\"Russell\").\nCommon_last_name(\"Sullivan\").\nCommon_last_name(\"Bell\").\nCommon_last_name(\"Coleman\").\nCommon_last_name(\"Butler\").\nCommon_last_name(\"Henderson\").\nCommon_last_name(\"Barnes\").\nCommon_last_name(\"Gonzales\").\nCommon_last_name(\"Fisher\").\nCommon_last_name(\"Vasquez\").\nCommon_last_name(\"Simmons\").\nCommon_last_name(\"Romero\").\nCommon_last_name(\"Jordan\").\nCommon_last_name(\"Patterson\").\nCommon_last_name(\"Alexander\").\nCommon_last_name(\"Hamilton\").\nCommon_last_name(\"Graham\").\nCommon_last_name(\"Reynolds\").\nCommon_last_name(\"Griffin\").\nCommon_last_name(\"Wallace\").\nCommon_last_name(\"Moreno\").\nCommon_last_name(\"West\").\nCommon_last_name(\"Cole\").\nCommon_last_name(\"Hayes\").\nCommon_last_name(\"Bryant\").\nCommon_last_name(\"Herrera\").\nCommon_last_name(\"Gibson\").\nCommon_last_name(\"Ellis\").\nCommon_last_name(\"Tran\").\nCommon_last_name(\"Medina\").\nCommon_last_name(\"Aguilar\").\nCommon_last_name(\"Stevens\").\nCommon_last_name(\"Murray\").\nCommon_last_name(\"Ford\").\n.decl Answer()\nAnswer() :- Has_last_name(\"Henry Ford\", last_name), Common_last_name(last_name).\n.output Answer"]}
{"id": 436, "answer": true, "completion": ".decl Original_Location(Object:symbol, Location:symbol)\nOriginal_Location(\"Liberty Bell\", \"Pennsylvania State House\").\n.decl Current_Location(Object:symbol, Location:symbol)\nCurrent_Location(\"Liberty Bell\", \"Liberty Bell Center\").\n.decl Answer()\nAnswer() :- Original_Location(\"Liberty Bell\", location1), Current_Location(\"Liberty Bell\", location2), location1 != location2.\n.output Answer", "completions": [".decl Original_Location(Object:symbol, Location:symbol)\nOriginal_Location(\"Liberty Bell\", \"Pennsylvania State House\").\n.decl Current_Location(Object:symbol, Location:symbol)\nCurrent_Location(\"Liberty Bell\", \"Liberty Bell Center\").\n.decl Answer()\nAnswer() :- Original_Location(\"Liberty Bell\", location1), Current_Location(\"Liberty Bell\", location2), location1 != location2.\n.output Answer"]}
{"id": 437, "answer": true, "completion": ".decl Airs_on_day(Program:symbol, Day:symbol)\nAirs_on_day(\"Monday Night Football\", \"Monday\").\nAirs_on_day(\"WWE Raw\", \"Monday\").\n.decl Answer()\nAnswer() :- Airs_on_day(\"Monday Night Football\", day1), Airs_on_day(\"WWE Raw\", day2), day1 = day2.\n.output Answer", "completions": [".decl Airs_on_day(Program:symbol, Day:symbol)\nAirs_on_day(\"Monday Night Football\", \"Monday\").\nAirs_on_day(\"WWE Raw\", \"Monday\").\n.decl Answer()\nAnswer() :- Airs_on_day(\"Monday Night Football\", day1), Airs_on_day(\"WWE Raw\", day2), day1 = day2.\n.output Answer"]}
{"id": 438, "answer": true, "completion": ".decl Is_required(Event:symbol, Requirement:symbol)\nIs_required(\"first missionaries\", \"attend mass on Sundays\").\n.decl Answer()\nAnswer() :- Is_required(\"first missionaries\", \"attend mass on Sundays\").\n.output Answer", "completions": [".decl Is_required(Event:symbol, Requirement:symbol)\nIs_required(\"first missionaries\", \"attend mass on Sundays\").\n.decl Answer()\nAnswer() :- Is_required(\"first missionaries\", \"attend mass on Sundays\").\n.output Answer"]}
{"id": 439, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Snoop Dogg\", 1971).\n.decl Popular_in_year(Product:symbol, Popularity_year:float)\nPopular_in_year(\"Tickle Me Elmo\", 1996).\n.decl Is_adult(Person:symbol, Year:float)\nIs_adult(person, year) :- Born_in_year(person, birth_year), year - birth_year >= 18.\n.decl Answer()\nAnswer() :- Popular_in_year(\"Tickle Me Elmo\", popularity_year), Is_adult(\"Snoop Dogg\", popularity_year).\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Snoop Dogg\", 1971).\n.decl Popular_in_year(Product:symbol, Popularity_year:float)\nPopular_in_year(\"Tickle Me Elmo\", 1996).\n.decl Is_adult(Person:symbol, Year:float)\nIs_adult(person, year) :- Born_in_year(person, birth_year), year - birth_year >= 18.\n.decl Answer()\nAnswer() :- Popular_in_year(\"Tickle Me Elmo\", popularity_year), Is_adult(\"Snoop Dogg\", popularity_year).\n.output Answer"]}
{"id": 440, "answer": false, "completion": ".decl Is_considered_okay(Word:symbol, User:symbol, Status:symbol)\nIs_considered_okay(\"Gypsy\", \"non-Romani\", \"not okay\").\n.decl Answer(Status:symbol)\nAnswer(status) :- Is_considered_okay(\"Gypsy\", \"non-Romani\", status).\n.output Answer", "completions": [".decl Is_considered_okay(Word:symbol, User:symbol, Status:symbol)\nIs_considered_okay(\"Gypsy\", \"non-Romani\", \"not okay\").\n.decl Answer(Status:symbol)\nAnswer(status) :- Is_considered_okay(\"Gypsy\", \"non-Romani\", status).\n.output Answer"]}
{"id": 441, "answer": false, "completion": ".decl Has_gun_caliber(Person:symbol, Caliber:float)\nHas_gun_caliber(\"Robert Downey Jr.\", 0.45).\nHas_gun_caliber(\"Barry Burton\", 0.45).\n.decl Answer()\nAnswer() :- Has_gun_caliber(\"Robert Downey Jr.\", caliber1), Has_gun_caliber(\"Barry Burton\", caliber2), caliber1 = caliber2.\n.output Answer", "completions": [".decl Has_gun_caliber(Person:symbol, Caliber:float)\nHas_gun_caliber(\"Robert Downey Jr.\", 0.45).\nHas_gun_caliber(\"Barry Burton\", 0.45).\n.decl Answer()\nAnswer() :- Has_gun_caliber(\"Robert Downey Jr.\", caliber1), Has_gun_caliber(\"Barry Burton\", caliber2), caliber1 = caliber2.\n.output Answer"]}
{"id": 442, "answer": true, "completion": ".decl Has_popular_vote_percentage(Candidate:symbol, Year:float, Percentage:float)\nHas_popular_vote_percentage(\"Woodrow Wilson\", 1912, 41.8).\nHas_popular_vote_percentage(\"Theodore Roosevelt\", 1912, 27.4).\nHas_popular_vote_percentage(\"William H. Taft\", 1912, 23.2).\nHas_popular_vote_percentage(\"Eugene V. Debs\", 1912, 6).\n.decl Answer()\nAnswer() :- Has_popular_vote_percentage(candidate, 1912, percentage), percentage > 50.\n.output Answer", "completions": [".decl Has_popular_vote_percentage(Candidate:symbol, Year:float, Percentage:float)\nHas_popular_vote_percentage(\"Woodrow Wilson\", 1912, 41.8).\nHas_popular_vote_percentage(\"Theodore Roosevelt\", 1912, 27.4).\nHas_popular_vote_percentage(\"William H. Taft\", 1912, 23.2).\nHas_popular_vote_percentage(\"Eugene V. Debs\", 1912, 6).\n.decl Answer()\nAnswer() :- Has_popular_vote_percentage(candidate, 1912, percentage), percentage > 50.\n.output Answer"]}
{"id": 443, "answer": true, "completion": ".decl Is_dessert(Dish:symbol)\nIs_dessert(\"carrot cake\").\n.decl Is_vegetable(Vegetable:symbol)\nIs_vegetable(\"carrot\").\n.decl Contains_ingredient(Dish:symbol, Ingredient:symbol)\nContains_ingredient(\"carrot cake\", \"carrot\").\n.decl Answer()\nAnswer() :- Is_dessert(dish), Contains_ingredient(dish, ingredient), Is_vegetable(ingredient).\n.output Answer", "completions": [".decl Is_dessert(Dish:symbol)\nIs_dessert(\"carrot cake\").\n.decl Is_vegetable(Vegetable:symbol)\nIs_vegetable(\"carrot\").\n.decl Contains_ingredient(Dish:symbol, Ingredient:symbol)\nContains_ingredient(\"carrot cake\", \"carrot\").\n.decl Answer()\nAnswer() :- Is_dessert(dish), Contains_ingredient(dish, ingredient), Is_vegetable(ingredient).\n.output Answer"]}
{"id": 444, "answer": false, "completion": ".decl Travels_to(Object:symbol, Destination:symbol, Frequency:symbol)\nTravels_to(\"depressed people\", \"Golden Gate Bridge\", \"often\").\n.decl Answer()\nAnswer() :- Travels_to(\"depressed people\", \"Golden Gate Bridge\", \"often\").\n.output Answer", "completions": [".decl Travels_to(Object:symbol, Destination:symbol, Frequency:symbol)\nTravels_to(\"depressed people\", \"Golden Gate Bridge\", \"often\").\n.decl Answer()\nAnswer() :- Travels_to(\"depressed people\", \"Golden Gate Bridge\", \"often\").\n.output Answer"]}
{"id": 445, "answer": true, "completion": ".decl Influenced_by(Object:symbol, Influence:symbol)\nInfluenced_by(\"letter D\", \"ancient doors\").\n.decl Answer()\nAnswer() :- Influenced_by(\"letter D\", \"ancient doors\").\n.output Answer", "completions": [".decl Influenced_by(Object:symbol, Influence:symbol)\nInfluenced_by(\"letter D\", \"ancient doors\").\n.decl Answer()\nAnswer() :- Influenced_by(\"letter D\", \"ancient doors\").\n.output Answer"]}
{"id": 446, "answer": true, "completion": ".decl Lived_years(Person:symbol, Years:float)\nLived_years(\"Methuselah\", 969).\nLived_years(\"Sarah\", 127).\n.decl Answer()\nAnswer() :- Lived_years(\"Methuselah\", years1), Lived_years(\"Sarah\", years2), years1 >= years2 + 800.\n.output Answer", "completions": [".decl Lived_years(Person:symbol, Years:float)\nLived_years(\"Methuselah\", 969).\nLived_years(\"Sarah\", 127).\n.decl Answer()\nAnswer() :- Lived_years(\"Methuselah\", years1), Lived_years(\"Sarah\", years2), years1 >= years2 + 800.\n.output Answer"]}
{"id": 447, "answer": false, "completion": ".decl Has_n_seats(Vehicle:symbol, N_seats:float)\nHas_n_seats(\"triples tandem bike\", 3).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Apollo 15 crew\", 3).\n.decl Answer()\nAnswer() :- Has_n_seats(\"triples tandem bike\", n_seats), Has_n_members(\"Apollo 15 crew\", n_members), n_seats >= n_members.\n.output Answer", "completions": [".decl Has_n_seats(Vehicle:symbol, N_seats:float)\nHas_n_seats(\"triples tandem bike\", 3).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Apollo 15 crew\", 3).\n.decl Answer()\nAnswer() :- Has_n_seats(\"triples tandem bike\", n_seats), Has_n_members(\"Apollo 15 crew\", n_members), n_seats >= n_members.\n.output Answer"]}
{"id": 448, "answer": true, "completion": ".decl Responds_to_bell(Animal:symbol, Time:float)\nResponds_to_bell(\"dog\", 1).\nResponds_to_bell(\"Grey seal\", 3).\n.decl Answer()\nAnswer() :- Responds_to_bell(\"dog\", time1), Responds_to_bell(\"Grey seal\", time2), time1 < time2.\n.output Answer", "completions": [".decl Responds_to_bell(Animal:symbol, Time:float)\nResponds_to_bell(\"dog\", 1).\nResponds_to_bell(\"Grey seal\", 3).\n.decl Answer()\nAnswer() :- Responds_to_bell(\"dog\", time1), Responds_to_bell(\"Grey seal\", time2), time1 < time2.\n.output Answer"]}
{"id": 449, "answer": true, "completion": ".decl Is_related(Animal_A:symbol, Animal_B:symbol)\nIs_related(\"sable\", \"wolverine\").\nIs_related(\"wolverine\", \"sable\").\n.decl Answer()\nAnswer() :- Is_related(\"sable\", \"wolverine\").\n.output Answer", "completions": [".decl Is_related(Animal_A:symbol, Animal_B:symbol)\nIs_related(\"sable\", \"wolverine\").\nIs_related(\"wolverine\", \"sable\").\n.decl Answer()\nAnswer() :- Is_related(\"sable\", \"wolverine\").\n.output Answer"]}
{"id": 450, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"lobster\", \"ocean\").\n.decl Has_habitat(Place:symbol, Habitat:symbol)\nHas_habitat(\"desert\", \"land\").\n.decl Can_breathe(Animal:symbol, Place:symbol)\nCan_breathe(animal, place) :- Lives_in(animal, habitat1), Has_habitat(place, habitat2), habitat1 = habitat2.\n.decl Answer()\nAnswer() :- Can_breathe(\"lobster\", \"desert\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"lobster\", \"ocean\").\n.decl Has_habitat(Place:symbol, Habitat:symbol)\nHas_habitat(\"desert\", \"land\").\n.decl Can_breathe(Animal:symbol, Place:symbol)\nCan_breathe(animal, place) :- Lives_in(animal, habitat1), Has_habitat(place, habitat2), habitat1 = habitat2.\n.decl Answer()\nAnswer() :- Can_breathe(\"lobster\", \"desert\").\n.output Answer"]}
{"id": 451, "answer": true, "completion": ".decl Has_height_and_weight(Person:symbol, Height:float, Weight:float)\nHas_height_and_weight(\"Nicole Kidman\", 5.11, 120).\nHas_height_and_weight(\"Psylocke\", 5.11, 155).\n.decl Ideal_choice(Person:symbol, Character:symbol)\nIdeal_choice(person, character) :- Has_height_and_weight(person, height1, weight1), Has_height_and_weight(character, height2, weight2), height1 = height2, weight1 = weight2.\n.decl Answer()\nAnswer() :- Ideal_choice(\"Nicole Kidman\", \"Psylocke\").\n.output Answer", "completions": [".decl Has_height_and_weight(Person:symbol, Height:float, Weight:float)\nHas_height_and_weight(\"Nicole Kidman\", 5.11, 120).\nHas_height_and_weight(\"Psylocke\", 5.11, 155).\n.decl Ideal_choice(Person:symbol, Character:symbol)\nIdeal_choice(person, character) :- Has_height_and_weight(person, height1, weight1), Has_height_and_weight(character, height2, weight2), height1 = height2, weight1 = weight2.\n.decl Answer()\nAnswer() :- Ideal_choice(\"Nicole Kidman\", \"Psylocke\").\n.output Answer"]}
{"id": 452, "answer": false, "completion": ".decl Enjoys_wearing_cast(Person:symbol, Duration:float)\nEnjoys_wearing_cast(\"bodybuilder\", 0).\n.decl Answer()\nAnswer() :- Enjoys_wearing_cast(\"bodybuilder\", duration), duration >= 1.\n.output Answer", "completions": [".decl Enjoys_wearing_cast(Person:symbol, Duration:float)\nEnjoys_wearing_cast(\"bodybuilder\", 0).\n.decl Answer()\nAnswer() :- Enjoys_wearing_cast(\"bodybuilder\", duration), duration >= 1.\n.output Answer"]}
{"id": 453, "answer": true, "completion": ".decl Owned_car(Person:symbol, Car_brand:symbol)\n.decl Lived_in_years(Person:symbol, Start_year:float, End_year:float)\nLived_in_years(\"George Washington\", 1732, 1799).\n.decl Founded_in_year(Brand:symbol, Year:float)\nFounded_in_year(\"Lexus\", 1989).\n.decl Answer()\nAnswer() :- Owned_car(\"George Washington\", \"Lexus\").\nAnswer() :- Lived_in_years(\"George Washington\", start_year, end_year), Founded_in_year(\"Lexus\", founded_year), start_year <= founded_year, end_year >= founded_year.\n.output Answer", "completions": [".decl Owned_car(Person:symbol, Car_brand:symbol)\n.decl Lived_in_years(Person:symbol, Start_year:float, End_year:float)\nLived_in_years(\"George Washington\", 1732, 1799).\n.decl Founded_in_year(Brand:symbol, Year:float)\nFounded_in_year(\"Lexus\", 1989).\n.decl Answer()\nAnswer() :- Owned_car(\"George Washington\", \"Lexus\").\nAnswer() :- Lived_in_years(\"George Washington\", start_year, end_year), Founded_in_year(\"Lexus\", founded_year), start_year <= founded_year, end_year >= founded_year.\n.output Answer"]}
{"id": 454, "answer": true, "completion": ".decl Has_feature(Software:symbol, Feature:symbol)\nHas_feature(\"Adobe Suite\", \"graphic design\").\nHas_feature(\"Adobe Suite\", \"video editing\").\nHas_feature(\"Adobe Suite\", \"web development\").\nHas_feature(\"Unity\", \"video game engine coding\").\n.decl Answer()\nAnswer() :- Has_feature(\"Adobe Suite\", \"video game engine coding\").\n.output Answer", "completions": [".decl Has_feature(Software:symbol, Feature:symbol)\nHas_feature(\"Adobe Suite\", \"graphic design\").\nHas_feature(\"Adobe Suite\", \"video editing\").\nHas_feature(\"Adobe Suite\", \"web development\").\nHas_feature(\"Unity\", \"video game engine coding\").\n.decl Answer()\nAnswer() :- Has_feature(\"Adobe Suite\", \"video game engine coding\").\n.output Answer"]}
{"id": 455, "answer": true, "completion": ".decl Is_made_of(Material:symbol, Object:symbol)\nIs_made_of(\"copper\", \"1943-S penny\").\n.decl Good_for_silverware(Material:symbol)\nGood_for_silverware(\"silver\").\nGood_for_silverware(\"stainless steel\").\n.decl Answer()\nAnswer() :- Is_made_of(material, \"1943-S penny\"), Good_for_silverware(material).\n.output Answer", "completions": [".decl Is_made_of(Material:symbol, Object:symbol)\nIs_made_of(\"copper\", \"1943-S penny\").\n.decl Good_for_silverware(Material:symbol)\nGood_for_silverware(\"silver\").\nGood_for_silverware(\"stainless steel\").\n.decl Answer()\nAnswer() :- Is_made_of(material, \"1943-S penny\"), Good_for_silverware(material).\n.output Answer"]}
{"id": 456, "answer": false, "completion": ".decl Associated_with(Person:symbol, Organization:symbol)\nAssociated_with(\"Lord Voldemort\", \"Death Eaters\").\nAssociated_with(\"Igor Karkaroff\", \"Durmstrang\").\nAssociated_with(\"Igor Karkaroff\", \"Death Eaters\").\n.decl Answer()\nAnswer() :- Associated_with(\"Lord Voldemort\", org1), Associated_with(person2, \"Durmstrang\"), Associated_with(person2, org1).\n.output Answer", "completions": [".decl Associated_with(Person:symbol, Organization:symbol)\nAssociated_with(\"Lord Voldemort\", \"Death Eaters\").\nAssociated_with(\"Igor Karkaroff\", \"Durmstrang\").\nAssociated_with(\"Igor Karkaroff\", \"Death Eaters\").\n.decl Answer()\nAnswer() :- Associated_with(\"Lord Voldemort\", org1), Associated_with(person2, \"Durmstrang\"), Associated_with(person2, org1).\n.output Answer"]}
{"id": 457, "answer": false, "completion": ".decl Needs_degree(Job:symbol, Degree_requirement:symbol)\nNeeds_degree(\"bartender\", \"no\").\n.decl Answer()\nAnswer() :- Needs_degree(\"bartender\", \"no\").\n.output Answer", "completions": [".decl Needs_degree(Job:symbol, Degree_requirement:symbol)\nNeeds_degree(\"bartender\", \"no\").\n.decl Answer()\nAnswer() :- Needs_degree(\"bartender\", \"no\").\n.output Answer"]}
{"id": 458, "answer": true, "completion": ".decl Holy_Trinity(Ingredient1:symbol, Ingredient2:symbol, Ingredient3:symbol)\nHoly_Trinity(\"onion\", \"bell pepper\", \"celery\").\n.decl Answer()\nAnswer() :- Holy_Trinity(\"onion\", \"bell pepper\", ingredient3), ingredient3 != \"celery\".\n.output Answer", "completions": [".decl Holy_Trinity(Ingredient1:symbol, Ingredient2:symbol, Ingredient3:symbol)\nHoly_Trinity(\"onion\", \"bell pepper\", \"celery\").\n.decl Answer()\nAnswer() :- Holy_Trinity(\"onion\", \"bell pepper\", ingredient3), ingredient3 != \"celery\".\n.output Answer"]}
{"id": 459, "answer": false, "completion": ".decl Has_count(Cell_type:symbol, Count:float)\nHas_count(\"white blood cells\", 7000).\nHas_count(\"red blood cells\", 5000000).\n.decl Answer()\nAnswer() :- Has_count(\"white blood cells\", count1), Has_count(\"red blood cells\", count2), count1 > count2.\n.output Answer", "completions": [".decl Has_count(Cell_type:symbol, Count:float)\nHas_count(\"white blood cells\", 7000).\nHas_count(\"red blood cells\", 5000000).\n.decl Answer()\nAnswer() :- Has_count(\"white blood cells\", count1), Has_count(\"red blood cells\", count2), count1 > count2.\n.output Answer"]}
{"id": 460, "answer": true, "completion": ".decl Distance(City_A:symbol, City_B:symbol, Distance:float)\nDistance(\"New York\", \"Miami\", 1090). // distance in miles\n.decl Can_swim(Person:symbol, Max_distance:float)\nCan_swim(\"human\", 20). // assuming an average human can swim 20 miles in a day\n.decl Answer()\nAnswer() :- Distance(\"New York\", \"Miami\", distance), Can_swim(\"human\", max_distance), distance <= max_distance.\n.output Answer", "completions": [".decl Distance(City_A:symbol, City_B:symbol, Distance:float)\nDistance(\"New York\", \"Miami\", 1090). // distance in miles\n.decl Can_swim(Person:symbol, Max_distance:float)\nCan_swim(\"human\", 20). // assuming an average human can swim 20 miles in a day\n.decl Answer()\nAnswer() :- Distance(\"New York\", \"Miami\", distance), Can_swim(\"human\", max_distance), distance <= max_distance.\n.output Answer"]}
{"id": 461, "answer": true, "completion": ".decl Wizard(Name:symbol, Power_Level:float)\nWizard(\"Gandalf\", 100).\nWizard(\"Rincewind\", 50).\n.decl Hypothetical_Battle(Winner:symbol, Loser:symbol)\nHypothetical_Battle(winner, loser) :- Wizard(winner, power1), Wizard(loser, power2), power1 > power2.\n.decl Answer()\nAnswer() :- Hypothetical_Battle(\"Gandalf\", \"Rincewind\").\n.output Answer", "completions": [".decl Wizard(Name:symbol, Power_Level:float)\nWizard(\"Gandalf\", 100).\nWizard(\"Rincewind\", 50).\n.decl Hypothetical_Battle(Winner:symbol, Loser:symbol)\nHypothetical_Battle(winner, loser) :- Wizard(winner, power1), Wizard(loser, power2), power1 > power2.\n.decl Answer()\nAnswer() :- Hypothetical_Battle(\"Gandalf\", \"Rincewind\").\n.output Answer"]}
{"id": 462, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Osama bin Laden\", 6.5).\n.decl Has_ceiling_height(House_type:symbol, Ceiling_height:float)\nHas_ceiling_height(\"Tiny House\", 10).\n.decl Answer()\nAnswer() :- Has_height(\"Osama bin Laden\", height1), Has_ceiling_height(\"Tiny House\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Osama bin Laden\", 6.5).\n.decl Has_ceiling_height(House_type:symbol, Ceiling_height:float)\nHas_ceiling_height(\"Tiny House\", 10).\n.decl Answer()\nAnswer() :- Has_height(\"Osama bin Laden\", height1), Has_ceiling_height(\"Tiny House\", height2), height1 < height2.\n.output Answer"]}
{"id": 463, "answer": false, "completion": ".decl Won_gold_medal(Country:symbol, Year:float)\nWon_gold_medal(\"England\", 1900).\n.decl Answer()\nAnswer() :- Won_gold_medal(\"England\", 1800).\n.output Answer", "completions": [".decl Won_gold_medal(Country:symbol, Year:float)\nWon_gold_medal(\"England\", 1900).\n.decl Answer()\nAnswer() :- Won_gold_medal(\"England\", 1800).\n.output Answer"]}
{"id": 464, "answer": true, "completion": ".decl Is_urban_legend(Story:symbol)\nIs_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill\").\n.decl Answer()\nAnswer() :- Is_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill\").\n.output Answer", "completions": [".decl Is_urban_legend(Story:symbol)\nIs_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill\").\n.decl Answer()\nAnswer() :- Is_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill\").\n.output Answer"]}
{"id": 465, "answer": true, "completion": ".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Jimmy Vee\", \"dwarfism\").\n.decl Eligible_for_Paralympics(Disability:symbol)\nEligible_for_Paralympics(\"dwarfism\").\n.decl Answer()\nAnswer() :- Has_disability(\"Jimmy Vee\", disability), Eligible_for_Paralympics(disability).\n.output Answer", "completions": [".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Jimmy Vee\", \"dwarfism\").\n.decl Eligible_for_Paralympics(Disability:symbol)\nEligible_for_Paralympics(\"dwarfism\").\n.decl Answer()\nAnswer() :- Has_disability(\"Jimmy Vee\", disability), Eligible_for_Paralympics(disability).\n.output Answer"]}
{"id": 466, "answer": false, "completion": ".decl Is_alive(Person:symbol, Year:float, Status:symbol)\nIs_alive(\"Elijah Cummings\", 2019, \"dead\").\n.decl Can_vote(Person:symbol, Year:float)\nCan_vote(person, year) :- Is_alive(person, year, \"alive\").\n.decl Answer()\nAnswer() :- Can_vote(\"Elijah Cummings\", 2020).\n.output Answer", "completions": [".decl Is_alive(Person:symbol, Year:float, Status:symbol)\nIs_alive(\"Elijah Cummings\", 2019, \"dead\").\n.decl Can_vote(Person:symbol, Year:float)\nCan_vote(person, year) :- Is_alive(person, year, \"alive\").\n.decl Answer()\nAnswer() :- Can_vote(\"Elijah Cummings\", 2020).\n.output Answer"]}
{"id": 467, "answer": false, "completion": ".decl Is_British(Person:symbol)\nIs_British(\"Hermione Granger\").\n.decl Is_Eligible(Person:symbol, Award:symbol)\nIs_Eligible(person, \"Order of the British Empire\") :- Is_British(person).\n.decl Answer()\nAnswer() :- Is_Eligible(\"Hermione Granger\", \"Order of the British Empire\").\n.output Answer", "completions": [".decl Is_British(Person:symbol)\nIs_British(\"Hermione Granger\").\n.decl Is_Eligible(Person:symbol, Award:symbol)\nIs_Eligible(person, \"Order of the British Empire\") :- Is_British(person).\n.decl Answer()\nAnswer() :- Is_Eligible(\"Hermione Granger\", \"Order of the British Empire\").\n.output Answer"]}
{"id": 468, "answer": true, "completion": ".decl Is_safe_to_cook(Material:symbol)\nIs_safe_to_cook(\"ceramic\").\nIs_safe_to_cook(\"porcelain\").\nIs_safe_to_cook(\"stoneware\").\nIs_safe_to_cook(\"earthenware\").\n.decl Is_unsafe_to_cook(Material:symbol)\nIs_unsafe_to_cook(\"lead-glazed\").\n.decl Is_pottery(Material:symbol)\nIs_pottery(\"ceramic\").\nIs_pottery(\"porcelain\").\nIs_pottery(\"stoneware\").\nIs_pottery(\"earthenware\").\nIs_pottery(\"lead-glazed\").\n.decl Answer()\nAnswer() :- Is_pottery(material), !Is_unsafe_to_cook(material).\n.output Answer", "completions": [".decl Is_safe_to_cook(Material:symbol)\nIs_safe_to_cook(\"ceramic\").\nIs_safe_to_cook(\"porcelain\").\nIs_safe_to_cook(\"stoneware\").\nIs_safe_to_cook(\"earthenware\").\n.decl Is_unsafe_to_cook(Material:symbol)\nIs_unsafe_to_cook(\"lead-glazed\").\n.decl Is_pottery(Material:symbol)\nIs_pottery(\"ceramic\").\nIs_pottery(\"porcelain\").\nIs_pottery(\"stoneware\").\nIs_pottery(\"earthenware\").\nIs_pottery(\"lead-glazed\").\n.decl Answer()\nAnswer() :- Is_pottery(material), !Is_unsafe_to_cook(material).\n.output Answer"]}
{"id": 469, "answer": false, "completion": ".decl Has_origin(Person:symbol, Country:symbol)\nHas_origin(\"Pope Alexander VI\", \"Spain\").\n.decl Has_n_popes(Country:symbol, N_popes:float)\nHas_n_popes(\"Spain\", 2).\nHas_n_popes(\"Italy\", 196).\nHas_n_popes(\"France\", 17).\nHas_n_popes(\"Germany\", 8).\nHas_n_popes(\"Netherlands\", 3).\nHas_n_popes(\"Poland\", 2).\nHas_n_popes(\"Portugal\", 2).\nHas_n_popes(\"England\", 1).\n.decl Answer()\nAnswer() :- Has_origin(\"Pope Alexander VI\", country), Has_n_popes(country, n_popes1), !Has_n_popes(_, n_popes2), n_popes2 < n_popes1.\n.output Answer", "completions": [".decl Has_origin(Person:symbol, Country:symbol)\nHas_origin(\"Pope Alexander VI\", \"Spain\").\n.decl Has_n_popes(Country:symbol, N_popes:float)\nHas_n_popes(\"Spain\", 2).\nHas_n_popes(\"Italy\", 196).\nHas_n_popes(\"France\", 17).\nHas_n_popes(\"Germany\", 8).\nHas_n_popes(\"Netherlands\", 3).\nHas_n_popes(\"Poland\", 2).\nHas_n_popes(\"Portugal\", 2).\nHas_n_popes(\"England\", 1).\n.decl Answer()\nAnswer() :- Has_origin(\"Pope Alexander VI\", country), Has_n_popes(country, n_popes1), !Has_n_popes(_, n_popes2), n_popes2 < n_popes1.\n.output Answer"]}
{"id": 470, "answer": true, "completion": ".decl Mistaken_for(Condition_A:symbol, Condition_B:symbol)\nMistaken_for(\"depression\", \"laziness\").\n.decl Answer()\nAnswer() :- Mistaken_for(\"depression\", \"laziness\").\n.output Answer", "completions": [".decl Mistaken_for(Condition_A:symbol, Condition_B:symbol)\nMistaken_for(\"depression\", \"laziness\").\n.decl Answer()\nAnswer() :- Mistaken_for(\"depression\", \"laziness\").\n.output Answer"]}
{"id": 471, "answer": true, "completion": ".decl Is_dangerous(Animal:symbol, Danger_level:float)\nIs_dangerous(\"Oculudentavis\", 1).\nIs_dangerous(\"Allosaurus\", 9).\n.decl Answer()\nAnswer() :- Is_dangerous(\"Oculudentavis\", danger_level1), Is_dangerous(\"Allosaurus\", danger_level2), danger_level1 > danger_level2.\n.output Answer", "completions": [".decl Is_dangerous(Animal:symbol, Danger_level:float)\nIs_dangerous(\"Oculudentavis\", 1).\nIs_dangerous(\"Allosaurus\", 9).\n.decl Answer()\nAnswer() :- Is_dangerous(\"Oculudentavis\", danger_level1), Is_dangerous(\"Allosaurus\", danger_level2), danger_level1 > danger_level2.\n.output Answer"]}
{"id": 472, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Christopher Nolan\", 1.8).\nHas_height(\"Danny Devito\", 1.47).\n.decl Height_difference(Person_A:symbol, Person_B:symbol, Difference:float)\nHeight_difference(personA, personB, diff) :- Has_height(personA, heightA), Has_height(personB, heightB), diff = abs(heightA - heightB).\n.decl Answer()\nAnswer() :- Height_difference(\"Christopher Nolan\", \"Danny Devito\", difference), difference <= 0.3.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Christopher Nolan\", 1.8).\nHas_height(\"Danny Devito\", 1.47).\n.decl Height_difference(Person_A:symbol, Person_B:symbol, Difference:float)\nHeight_difference(personA, personB, diff) :- Has_height(personA, heightA), Has_height(personB, heightB), diff = abs(heightA - heightB).\n.decl Answer()\nAnswer() :- Height_difference(\"Christopher Nolan\", \"Danny Devito\", difference), difference <= 0.3.\n.output Answer"]}
{"id": 473, "answer": true, "completion": ".decl Rung_on_schedule(Location:symbol, Status:symbol)\nRung_on_schedule(\"Palace of Westminster\", \"no\").\n.decl Answer()\nAnswer() :- Rung_on_schedule(\"Palace of Westminster\", \"yes\").\n.output Answer", "completions": [".decl Rung_on_schedule(Location:symbol, Status:symbol)\nRung_on_schedule(\"Palace of Westminster\", \"no\").\n.decl Answer()\nAnswer() :- Rung_on_schedule(\"Palace of Westminster\", \"yes\").\n.output Answer"]}
{"id": 474, "answer": false, "completion": ".decl Appears_in(Movie:symbol, Character:symbol)\nAppears_in(\"The Last Jedi\", \"Klingons\").\n.decl Answer()\nAnswer() :- Appears_in(\"The Last Jedi\", \"Klingons\").\n.output Answer", "completions": [".decl Appears_in(Movie:symbol, Character:symbol)\nAppears_in(\"The Last Jedi\", \"Klingons\").\n.decl Answer()\nAnswer() :- Appears_in(\"The Last Jedi\", \"Klingons\").\n.output Answer"]}
{"id": 475, "answer": false, "completion": ".decl Buried_in(Person:symbol, Place:symbol)\nBuried_in(\"Queen Elizabeth\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_in(\"Queen Elizabeth\", \"Pantheon\").\n.output Answer", "completions": [".decl Buried_in(Person:symbol, Place:symbol)\nBuried_in(\"Queen Elizabeth\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_in(\"Queen Elizabeth\", \"Pantheon\").\n.output Answer"]}
{"id": 476, "answer": true, "completion": ".decl Is_part_of(Location:symbol, Region:symbol)\nIs_part_of(\"Olympia, Washington\", \"Ish River Country\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Olympia, Washington\", \"Ish River Country\").\n.output Answer", "completions": [".decl Is_part_of(Location:symbol, Region:symbol)\nIs_part_of(\"Olympia, Washington\", \"Ish River Country\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Olympia, Washington\", \"Ish River Country\").\n.output Answer"]}
{"id": 477, "answer": false, "completion": ".decl Material_suits(Sport:symbol, Material:symbol)\nMaterial_suits(\"swimming\", \"silicone\").\nMaterial_suits(\"judo\", \"cotton\").\n.decl Answer()\nAnswer() :- Material_suits(\"judo\", \"silicone\").\n.output Answer", "completions": [".decl Material_suits(Sport:symbol, Material:symbol)\nMaterial_suits(\"swimming\", \"silicone\").\nMaterial_suits(\"judo\", \"cotton\").\n.decl Answer()\nAnswer() :- Material_suits(\"judo\", \"silicone\").\n.output Answer"]}
{"id": 478, "answer": false, "completion": ".decl Is_described_as(Concept:symbol, Description:symbol)\nIs_described_as(\"boolean algebra\", \"binary\").\n.decl Answer()\nAnswer() :- Is_described_as(\"boolean algebra\", \"binary\").\n.output Answer", "completions": [".decl Is_described_as(Concept:symbol, Description:symbol)\nIs_described_as(\"boolean algebra\", \"binary\").\n.decl Answer()\nAnswer() :- Is_described_as(\"boolean algebra\", \"binary\").\n.output Answer"]}
{"id": 479, "answer": false, "completion": ".decl Is_good_pet(Animal:symbol, Age:float)\nIs_good_pet(\"dog\", 6).\nIs_good_pet(\"cat\", 6).\nIs_good_pet(\"hamster\", 6).\nIs_good_pet(\"fish\", 6).\n.decl Answer()\nAnswer() :- Is_good_pet(\"Northern fur seal\", 6).\n.output Answer", "completions": [".decl Is_good_pet(Animal:symbol, Age:float)\nIs_good_pet(\"dog\", 6).\nIs_good_pet(\"cat\", 6).\nIs_good_pet(\"hamster\", 6).\nIs_good_pet(\"fish\", 6).\n.decl Answer()\nAnswer() :- Is_good_pet(\"Northern fur seal\", 6).\n.output Answer"]}
{"id": 480, "answer": false, "completion": ".decl Died_by_suicide(Person:symbol)\nDied_by_suicide(\"Kurt Cobain\").\n.decl Supports_mental_health(Project:symbol)\nSupports_mental_health(\"Project Semicolon\").\n.decl Answer()\nAnswer() :- Died_by_suicide(\"Kurt Cobain\"), Supports_mental_health(\"Project Semicolon\").\n.output Answer", "completions": [".decl Died_by_suicide(Person:symbol)\nDied_by_suicide(\"Kurt Cobain\").\n.decl Supports_mental_health(Project:symbol)\nSupports_mental_health(\"Project Semicolon\").\n.decl Answer()\nAnswer() :- Died_by_suicide(\"Kurt Cobain\"), Supports_mental_health(\"Project Semicolon\").\n.output Answer"]}
{"id": 481, "answer": false, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"anxious person\", \"anxiety\").\n.decl Receives_trait(Person:symbol, Trait:symbol, Source:symbol)\nReceives_trait(\"anxious person\", \"courage\", \"Wizard of Oz\").\n.decl Benefits_from_trait(Person:symbol, Trait:symbol)\nBenefits_from_trait(\"anxious person\", \"courage\").\n.decl Answer()\nAnswer() :- Has_trait(\"anxious person\", \"anxiety\"), Receives_trait(\"anxious person\", \"courage\", \"Wizard of Oz\"), Benefits_from_trait(\"anxious person\", \"courage\").\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"anxious person\", \"anxiety\").\n.decl Receives_trait(Person:symbol, Trait:symbol, Source:symbol)\nReceives_trait(\"anxious person\", \"courage\", \"Wizard of Oz\").\n.decl Benefits_from_trait(Person:symbol, Trait:symbol)\nBenefits_from_trait(\"anxious person\", \"courage\").\n.decl Answer()\nAnswer() :- Has_trait(\"anxious person\", \"anxiety\"), Receives_trait(\"anxious person\", \"courage\", \"Wizard of Oz\"), Benefits_from_trait(\"anxious person\", \"courage\").\n.output Answer"]}
{"id": 482, "answer": false, "completion": ".decl Protects_against(Firewall:symbol, Threat:symbol)\nProtects_against(\"firewall\", \"cyber attacks\").\n.decl Is_type_of(Object:symbol, Type:symbol)\nIs_type_of(\"short circuit\", \"electrical issue\").\n.decl Answer()\nAnswer() :- Protects_against(\"firewall\", \"short circuit\").\nAnswer() :- !Protects_against(\"firewall\", threat), Is_type_of(\"short circuit\", type), threat != type.\n.output Answer", "completions": [".decl Protects_against(Firewall:symbol, Threat:symbol)\nProtects_against(\"firewall\", \"cyber attacks\").\n.decl Is_type_of(Object:symbol, Type:symbol)\nIs_type_of(\"short circuit\", \"electrical issue\").\n.decl Answer()\nAnswer() :- Protects_against(\"firewall\", \"short circuit\").\nAnswer() :- !Protects_against(\"firewall\", threat), Is_type_of(\"short circuit\", type), threat != type.\n.output Answer"]}
{"id": 483, "answer": true, "completion": ".decl Qualifies(Person:symbol, Organization:symbol)\nQualifies(\"Michael J Fox\", \"Army Rangers\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Michael J Fox\", \"Parkinson's disease\").\n.decl Disqualifies(Condition:symbol, Organization:symbol)\nDisqualifies(\"Parkinson's disease\", \"Army Rangers\").\n.decl Answer()\nAnswer() :- Qualifies(\"Michael J Fox\", \"Army Rangers\"), !Has_condition(\"Michael J Fox\", \"Parkinson's disease\").\nAnswer() :- Qualifies(\"Michael J Fox\", \"Army Rangers\"), Has_condition(\"Michael J Fox\", condition), !Disqualifies(condition, \"Army Rangers\").\n.output Answer", "completions": [".decl Qualifies(Person:symbol, Organization:symbol)\nQualifies(\"Michael J Fox\", \"Army Rangers\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Michael J Fox\", \"Parkinson's disease\").\n.decl Disqualifies(Condition:symbol, Organization:symbol)\nDisqualifies(\"Parkinson's disease\", \"Army Rangers\").\n.decl Answer()\nAnswer() :- Qualifies(\"Michael J Fox\", \"Army Rangers\"), !Has_condition(\"Michael J Fox\", \"Parkinson's disease\").\nAnswer() :- Qualifies(\"Michael J Fox\", \"Army Rangers\"), Has_condition(\"Michael J Fox\", condition), !Disqualifies(condition, \"Army Rangers\").\n.output Answer"]}
{"id": 484, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"The Jackson 5\", 5).\nHas_n_members(\"The Isley Brothers\", 6).\n.decl Answer()\nAnswer() :- Has_n_members(\"The Jackson 5\", n_members1), Has_n_members(\"The Isley Brothers\", n_members2), n_members1 > n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"The Jackson 5\", 5).\nHas_n_members(\"The Isley Brothers\", 6).\n.decl Answer()\nAnswer() :- Has_n_members(\"The Jackson 5\", n_members1), Has_n_members(\"The Isley Brothers\", n_members2), n_members1 > n_members2.\n.output Answer"]}
{"id": 485, "answer": true, "completion": ".decl Is_guru(Person:symbol)\nIs_guru(\"Kim Kardashian\").\n.decl Answer()\nAnswer() :- Is_guru(\"Kim Kardashian\").\n.output Answer", "completions": [".decl Is_guru(Person:symbol)\nIs_guru(\"Kim Kardashian\").\n.decl Answer()\nAnswer() :- Is_guru(\"Kim Kardashian\").\n.output Answer"]}
{"id": 486, "answer": true, "completion": ".decl Won_award(Show:symbol, Award:symbol)\nWon_award(\"Modern Family\", \"Emmy Award\").\nWon_award(\"Modern Family\", \"Golden Globe Award\").\n.decl Answer()\nAnswer() :- Won_award(\"Modern Family\", \"Slammy Award\").\n.output Answer", "completions": [".decl Won_award(Show:symbol, Award:symbol)\nWon_award(\"Modern Family\", \"Emmy Award\").\nWon_award(\"Modern Family\", \"Golden Globe Award\").\n.decl Answer()\nAnswer() :- Won_award(\"Modern Family\", \"Slammy Award\").\n.output Answer"]}
{"id": 487, "answer": true, "completion": ".decl Has_n_ex_wives(Person:symbol, N_ex_wives:float)\nHas_n_ex_wives(\"Larry King\", 8).\n.decl Water_polo_team_size(Team_size:float)\nWater_polo_team_size(7).\n.decl Answer()\nAnswer() :- Has_n_ex_wives(\"Larry King\", n_ex_wives), Water_polo_team_size(team_size), n_ex_wives >= team_size.\n.output Answer", "completions": [".decl Has_n_ex_wives(Person:symbol, N_ex_wives:float)\nHas_n_ex_wives(\"Larry King\", 8).\n.decl Water_polo_team_size(Team_size:float)\nWater_polo_team_size(7).\n.decl Answer()\nAnswer() :- Has_n_ex_wives(\"Larry King\", n_ex_wives), Water_polo_team_size(team_size), n_ex_wives >= team_size.\n.output Answer"]}
{"id": 488, "answer": false, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Jason\", \"gamer\").\nHas_trait(\"Jason\", \"student\").\nHas_trait(\"Dr. Disrespect\", \"gamer\").\nHas_trait(\"Dr. Disrespect\", \"streamer\").\n.decl Answer()\nAnswer() :- Has_trait(\"Jason\", trait), Has_trait(\"Dr. Disrespect\", trait).\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Jason\", \"gamer\").\nHas_trait(\"Jason\", \"student\").\nHas_trait(\"Dr. Disrespect\", \"gamer\").\nHas_trait(\"Dr. Disrespect\", \"streamer\").\n.decl Answer()\nAnswer() :- Has_trait(\"Jason\", trait), Has_trait(\"Dr. Disrespect\", trait).\n.output Answer"]}
{"id": 489, "answer": false, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Iowa\", 145746).\nHas_area(\"English Channel\", 75000).\n.decl Answer()\nAnswer() :- Has_area(\"Iowa\", area1), Has_area(\"English Channel\", area2), area1 <= area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Iowa\", 145746).\nHas_area(\"English Channel\", 75000).\n.decl Answer()\nAnswer() :- Has_area(\"Iowa\", area1), Has_area(\"English Channel\", area2), area1 <= area2.\n.output Answer"]}
{"id": 490, "answer": false, "completion": ".decl Practices_monogamy(Person:symbol)\nPractices_monogamy(\"Kublai Khan\").\nPractices_monogamy(\"Genghis Khan\").\n.decl Answer()\nAnswer() :- Practices_monogamy(\"Kublai Khan\").\nAnswer() :- Practices_monogamy(\"Genghis Khan\").\n.output Answer", "completions": [".decl Practices_monogamy(Person:symbol)\nPractices_monogamy(\"Kublai Khan\").\nPractices_monogamy(\"Genghis Khan\").\n.decl Answer()\nAnswer() :- Practices_monogamy(\"Kublai Khan\").\nAnswer() :- Practices_monogamy(\"Genghis Khan\").\n.output Answer"]}
{"id": 491, "answer": false, "completion": ".decl Has_color(Flag:symbol, Color:symbol)\nHas_color(\"Flag of the United States\", \"red\").\nHas_color(\"Flag of the United States\", \"white\").\nHas_color(\"Flag of the United States\", \"blue\").\n.decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"someone with leukophobia\", \"leukophobia\").\n.decl Phobia_of_color(Phobia:symbol, Color:symbol)\nPhobia_of_color(\"leukophobia\", \"white\").\n.decl Enjoy_looking(Person:symbol, Flag:symbol)\n.decl Answer()\nAnswer() :- Has_phobia(person, phobia), Phobia_of_color(phobia, color), Has_color(\"Flag of the United States\", color), !Enjoy_looking(person, \"Flag of the United States\").\n.output Answer", "completions": [".decl Has_color(Flag:symbol, Color:symbol)\nHas_color(\"Flag of the United States\", \"red\").\nHas_color(\"Flag of the United States\", \"white\").\nHas_color(\"Flag of the United States\", \"blue\").\n.decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"someone with leukophobia\", \"leukophobia\").\n.decl Phobia_of_color(Phobia:symbol, Color:symbol)\nPhobia_of_color(\"leukophobia\", \"white\").\n.decl Enjoy_looking(Person:symbol, Flag:symbol)\n.decl Answer()\nAnswer() :- Has_phobia(person, phobia), Phobia_of_color(phobia, color), Has_color(\"Flag of the United States\", color), !Enjoy_looking(person, \"Flag of the United States\").\n.output Answer"]}
{"id": 492, "answer": true, "completion": ".decl Killed(Villain:symbol, Victim:symbol)\nKilled(\"Doomsday\", \"Superman\").\nKilled(\"Joker\", \"Robin\").\n.decl Answer()\nAnswer() :- Killed(villain, \"Superman\"), Killed(villain, \"Robin\").\n.output Answer", "completions": [".decl Killed(Villain:symbol, Victim:symbol)\nKilled(\"Doomsday\", \"Superman\").\nKilled(\"Joker\", \"Robin\").\n.decl Answer()\nAnswer() :- Killed(villain, \"Superman\"), Killed(villain, \"Robin\").\n.output Answer"]}
{"id": 493, "answer": true, "completion": ".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"sweet potato\", \"oblong\").\nHas_shape(\"pineapple\", \"oval\").\n.decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"sweet potato\", \"smooth\").\nHas_texture(\"pineapple\", \"rough\").\n.decl Answer()\nAnswer() :- Has_shape(\"sweet potato\", shape1), Has_shape(\"pineapple\", shape2), shape1 = shape2, Has_texture(\"sweet potato\", texture1), Has_texture(\"pineapple\", texture2), texture1 = texture2.\n.output Answer", "completions": [".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"sweet potato\", \"oblong\").\nHas_shape(\"pineapple\", \"oval\").\n.decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"sweet potato\", \"smooth\").\nHas_texture(\"pineapple\", \"rough\").\n.decl Answer()\nAnswer() :- Has_shape(\"sweet potato\", shape1), Has_shape(\"pineapple\", shape2), shape1 = shape2, Has_texture(\"sweet potato\", texture1), Has_texture(\"pineapple\", texture2), texture1 = texture2.\n.output Answer"]}
{"id": 494, "answer": true, "completion": ".decl Has_dental_insurance(Person:symbol, Insurance_status:symbol)\nHas_dental_insurance(\"people without dental insurance\", \"no\").\n\n.decl Overfeeds(Person:symbol, Bacteria:symbol)\nOverfeeds(\"people\", \"Lactobacillus\").\n\n.decl Causes_dental_issues(Bacteria:symbol, Dental_issue:symbol)\nCauses_dental_issues(\"Lactobacillus\", \"cavities\").\n\n.decl Unwise(Person:symbol, Action:symbol)\nUnwise(\"people without dental insurance\", \"overfeeding Lactobacillus\").\n\n.decl Answer()\nAnswer() :- Overfeeds(\"people\", \"Lactobacillus\"), Causes_dental_issues(\"Lactobacillus\", \"cavities\"), Has_dental_insurance(\"people without dental insurance\", \"no\"), Unwise(\"people without dental insurance\", \"overfeeding Lactobacillus\").\n.output Answer", "completions": [".decl Has_dental_insurance(Person:symbol, Insurance_status:symbol)\nHas_dental_insurance(\"people without dental insurance\", \"no\").\n\n.decl Overfeeds(Person:symbol, Bacteria:symbol)\nOverfeeds(\"people\", \"Lactobacillus\").\n\n.decl Causes_dental_issues(Bacteria:symbol, Dental_issue:symbol)\nCauses_dental_issues(\"Lactobacillus\", \"cavities\").\n\n.decl Unwise(Person:symbol, Action:symbol)\nUnwise(\"people without dental insurance\", \"overfeeding Lactobacillus\").\n\n.decl Answer()\nAnswer() :- Overfeeds(\"people\", \"Lactobacillus\"), Causes_dental_issues(\"Lactobacillus\", \"cavities\"), Has_dental_insurance(\"people without dental insurance\", \"no\"), Unwise(\"people without dental insurance\", \"overfeeding Lactobacillus\").\n.output Answer"]}
{"id": 495, "answer": true, "completion": ".decl Located_in(City:symbol, Country:symbol)\nLocated_in(\"Bucharest\", \"Romania\").\nLocated_in(\"Cairo\", \"Egypt\").\n.decl Has_latitude(Location:symbol, Latitude:float)\nHas_latitude(\"Romania\", 45.9432).\nHas_latitude(\"Egypt\", 26.8206).\n.decl Answer()\nAnswer() :- Located_in(\"Bucharest\", country1), Located_in(\"Cairo\", country2), Has_latitude(country1, lat1), Has_latitude(country2, lat2), lat1 < lat2.\n.output Answer", "completions": [".decl Located_in(City:symbol, Country:symbol)\nLocated_in(\"Bucharest\", \"Romania\").\nLocated_in(\"Cairo\", \"Egypt\").\n.decl Has_latitude(Location:symbol, Latitude:float)\nHas_latitude(\"Romania\", 45.9432).\nHas_latitude(\"Egypt\", 26.8206).\n.decl Answer()\nAnswer() :- Located_in(\"Bucharest\", country1), Located_in(\"Cairo\", country2), Has_latitude(country1, lat1), Has_latitude(country2, lat2), lat1 < lat2.\n.output Answer"]}
{"id": 496, "answer": true, "completion": ".decl Has_lactose(Product:symbol, Lactose:float)\nHas_lactose(\"soy milk\", 0).\n.decl Is_lactose_intolerant(Person:symbol, Intolerant:float)\nIs_lactose_intolerant(\"Cardi B\", 1).\n.decl Answer()\nAnswer() :- Has_lactose(\"soy milk\", lactose), Is_lactose_intolerant(\"Cardi B\", intolerant), lactose == 0, intolerant == 1.\n.output Answer", "completions": [".decl Has_lactose(Product:symbol, Lactose:float)\nHas_lactose(\"soy milk\", 0).\n.decl Is_lactose_intolerant(Person:symbol, Intolerant:float)\nIs_lactose_intolerant(\"Cardi B\", 1).\n.decl Answer()\nAnswer() :- Has_lactose(\"soy milk\", lactose), Is_lactose_intolerant(\"Cardi B\", intolerant), lactose == 0, intolerant == 1.\n.output Answer"]}
{"id": 497, "answer": true, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Arvanite Greek\", \"Arvanitika\").\nSpeaks_language(\"Albanian Declaration of Independence\", \"Albanian\").\n.decl Has_similarity(Language_A:symbol, Language_B:symbol, Similarity:float)\nHas_similarity(\"Arvanitika\", \"Albanian\", 0.7).\n.decl Answer()\nAnswer() :- Speaks_language(\"Arvanite Greek\", language1), Speaks_language(\"Albanian Declaration of Independence\", language2), Has_similarity(language1, language2, similarity), similarity > 0.5.\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Arvanite Greek\", \"Arvanitika\").\nSpeaks_language(\"Albanian Declaration of Independence\", \"Albanian\").\n.decl Has_similarity(Language_A:symbol, Language_B:symbol, Similarity:float)\nHas_similarity(\"Arvanitika\", \"Albanian\", 0.7).\n.decl Answer()\nAnswer() :- Speaks_language(\"Arvanite Greek\", language1), Speaks_language(\"Albanian Declaration of Independence\", language2), Has_similarity(language1, language2, similarity), similarity > 0.5.\n.output Answer"]}
{"id": 498, "answer": false, "completion": ".decl Happens_in_years(Event:symbol, Start_year:float, End_year:float)\nHappens_in_years(\"breakdancing\", 1970, 1980).\nHappens_in_years(\"WW2\", 1939, 1945).\n.decl Answer()\nAnswer() :- Happens_in_years(\"breakdancing\", start_year1, end_year1), Happens_in_years(\"WW2\", start_year2, end_year2), start_year1 >= start_year2, end_year1 <= end_year2.\n.output Answer", "completions": [".decl Happens_in_years(Event:symbol, Start_year:float, End_year:float)\nHappens_in_years(\"breakdancing\", 1970, 1980).\nHappens_in_years(\"WW2\", 1939, 1945).\n.decl Answer()\nAnswer() :- Happens_in_years(\"breakdancing\", start_year1, end_year1), Happens_in_years(\"WW2\", start_year2, end_year2), start_year1 >= start_year2, end_year1 <= end_year2.\n.output Answer"]}
{"id": 499, "answer": true, "completion": ".decl Is_taught_in_school(Title:symbol, School_level:symbol)\nIs_taught_in_school(\"Romeo and Juliet\", \"high school\").\n.decl Answer()\nAnswer() :- !Is_taught_in_school(\"Romeo and Juliet\", \"high school\").\n.output Answer", "completions": [".decl Is_taught_in_school(Title:symbol, School_level:symbol)\nIs_taught_in_school(\"Romeo and Juliet\", \"high school\").\n.decl Answer()\nAnswer() :- !Is_taught_in_school(\"Romeo and Juliet\", \"high school\").\n.output Answer"]}
{"id": 500, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Jon Brower Minnoch\", 635).\nHas_weight(\"Voyager 2 launch mass\", 722).\n.decl Breaks_chair(Person:symbol)\nBreaks_chair(\"Jon Brower Minnoch\").\n.decl Answer()\nAnswer() :- Breaks_chair(\"Jon Brower Minnoch\"), Has_weight(\"Jon Brower Minnoch\", weight1), Has_weight(\"Voyager 2 launch mass\", weight2), weight1 > weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Jon Brower Minnoch\", 635).\nHas_weight(\"Voyager 2 launch mass\", 722).\n.decl Breaks_chair(Person:symbol)\nBreaks_chair(\"Jon Brower Minnoch\").\n.decl Answer()\nAnswer() :- Breaks_chair(\"Jon Brower Minnoch\"), Has_weight(\"Jon Brower Minnoch\", weight1), Has_weight(\"Voyager 2 launch mass\", weight2), weight1 > weight2.\n.output Answer"]}
{"id": 501, "answer": false, "completion": ".decl Celebrated_in_season(Event:symbol, Season:symbol)\nCelebrated_in_season(\"Earth Day\", \"spring\").\n.decl Answer()\nAnswer() :- Celebrated_in_season(\"Earth Day\", \"summer\").\n.output Answer", "completions": [".decl Celebrated_in_season(Event:symbol, Season:symbol)\nCelebrated_in_season(\"Earth Day\", \"spring\").\n.decl Answer()\nAnswer() :- Celebrated_in_season(\"Earth Day\", \"summer\").\n.output Answer"]}
{"id": 502, "answer": true, "completion": ".decl Derails(Event:symbol, Object:symbol)\nDerails(\"bumblebees\", \"United States presidential election\").\n.decl Answer()\nAnswer() :- Derails(\"bumblebees\", \"United States presidential election\").\n.output Answer", "completions": [".decl Derails(Event:symbol, Object:symbol)\nDerails(\"bumblebees\", \"United States presidential election\").\n.decl Answer()\nAnswer() :- Derails(\"bumblebees\", \"United States presidential election\").\n.output Answer"]}
{"id": 503, "answer": false, "completion": ".decl Can_sting_multiple_times(Animal:symbol, Answer:symbol)\nCan_sting_multiple_times(\"honey bee\", \"no\").\n.decl Answer(Answer:symbol)\nAnswer(answer) :- Can_sting_multiple_times(\"honey bee\", answer).\n.output Answer", "completions": [".decl Can_sting_multiple_times(Animal:symbol, Answer:symbol)\nCan_sting_multiple_times(\"honey bee\", \"no\").\n.decl Answer(Answer:symbol)\nAnswer(answer) :- Can_sting_multiple_times(\"honey bee\", answer).\n.output Answer"]}
{"id": 504, "answer": true, "completion": ".decl Powerpuff_Girls(Name:symbol)\nPowerpuff_Girls(\"Blossom\").\nPowerpuff_Girls(\"Bubbles\").\nPowerpuff_Girls(\"Buttercup\").\n.decl Alliterative(Name1:symbol, Name2:symbol)\nAlliterative(\"Blossom\", \"Bubbles\").\nAlliterative(\"Blossom\", \"Buttercup\").\nAlliterative(\"Bubbles\", \"Buttercup\").\n.decl Answer()\nAnswer() :- Powerpuff_Girls(name1), Powerpuff_Girls(name2), name1 != name2, !Alliterative(name1, name2).\nAnswer() :- !Powerpuff_Girls(_).\n.output Answer", "completions": [".decl Powerpuff_Girls(Name:symbol)\nPowerpuff_Girls(\"Blossom\").\nPowerpuff_Girls(\"Bubbles\").\nPowerpuff_Girls(\"Buttercup\").\n.decl Alliterative(Name1:symbol, Name2:symbol)\nAlliterative(\"Blossom\", \"Bubbles\").\nAlliterative(\"Blossom\", \"Buttercup\").\nAlliterative(\"Bubbles\", \"Buttercup\").\n.decl Answer()\nAnswer() :- Powerpuff_Girls(name1), Powerpuff_Girls(name2), name1 != name2, !Alliterative(name1, name2).\nAnswer() :- !Powerpuff_Girls(_).\n.output Answer"]}
{"id": 505, "answer": true, "completion": ".decl Is_fan_of(Person:symbol, Celebrity:symbol)\nIs_fan_of(\"many fans\", \"J.K Rowling\").\n.decl Knows(Person:symbol, Celebrity:symbol)\nKnows(\"many fans\", \"Alan Rickman\").\n.decl Played_in(Actor:symbol, Movie:symbol)\nPlayed_in(\"Alan Rickman\", \"Harry Potter\").\n.decl Wrote(Author:symbol, Work:symbol)\nWrote(\"J.K Rowling\", \"Harry Potter\").\n.decl Answer()\nAnswer() :- Is_fan_of(person, \"J.K Rowling\"), Knows(person, \"Alan Rickman\"), Played_in(\"Alan Rickman\", work), Wrote(\"J.K Rowling\", work).\n.output Answer", "completions": [".decl Is_fan_of(Person:symbol, Celebrity:symbol)\nIs_fan_of(\"many fans\", \"J.K Rowling\").\n.decl Knows(Person:symbol, Celebrity:symbol)\nKnows(\"many fans\", \"Alan Rickman\").\n.decl Played_in(Actor:symbol, Movie:symbol)\nPlayed_in(\"Alan Rickman\", \"Harry Potter\").\n.decl Wrote(Author:symbol, Work:symbol)\nWrote(\"J.K Rowling\", \"Harry Potter\").\n.decl Answer()\nAnswer() :- Is_fan_of(person, \"J.K Rowling\"), Knows(person, \"Alan Rickman\"), Played_in(\"Alan Rickman\", work), Wrote(\"J.K Rowling\", work).\n.output Answer"]}
{"id": 506, "answer": false, "completion": ".decl Proud_of(Person_A:symbol, Person_B:symbol, Event:symbol)\nProud_of(\"Hannah Nixon\", \"Richard Nixon\", \"before Watergate\").\n.decl Event_happened(Event:symbol, Time:symbol)\nEvent_happened(\"Watergate scandal\", \"after\").\n.decl Answer()\nAnswer() :- Proud_of(\"Hannah Nixon\", \"Richard Nixon\", time), Event_happened(\"Watergate scandal\", time).\nAnswer() :- Proud_of(\"Hannah Nixon\", \"Richard Nixon\", \"before Watergate\"), !Event_happened(\"Watergate scandal\", \"before\").\n.output Answer", "completions": [".decl Proud_of(Person_A:symbol, Person_B:symbol, Event:symbol)\nProud_of(\"Hannah Nixon\", \"Richard Nixon\", \"before Watergate\").\n.decl Event_happened(Event:symbol, Time:symbol)\nEvent_happened(\"Watergate scandal\", \"after\").\n.decl Answer()\nAnswer() :- Proud_of(\"Hannah Nixon\", \"Richard Nixon\", time), Event_happened(\"Watergate scandal\", time).\nAnswer() :- Proud_of(\"Hannah Nixon\", \"Richard Nixon\", \"before Watergate\"), !Event_happened(\"Watergate scandal\", \"before\").\n.output Answer"]}
{"id": 507, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\nHas_height(\"average giraffe\", 5.5).\n.decl Answer()\nAnswer() :- Has_height(\"Javier Sotomayor\", height1), Has_height(\"average giraffe\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\nHas_height(\"average giraffe\", 5.5).\n.decl Answer()\nAnswer() :- Has_height(\"Javier Sotomayor\", height1), Has_height(\"average giraffe\", height2), height1 > height2.\n.output Answer"]}
{"id": 508, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Amy Winehouse\", 1983).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Amy Winehouse\", 2011).\n.decl Released_in_year(Movie:symbol, Release_year:float)\nReleased_in_year(\"Star Wars: Rogue One\", 2016).\n.decl Fan_of(Person:symbol, Movie:symbol)\n.decl Answer()\nAnswer() :- Fan_of(\"Amy Winehouse\", \"Star Wars: Rogue One\").\nAnswer() :- Born_in_year(\"Amy Winehouse\", birth_year), Died_in_year(\"Amy Winehouse\", death_year), Released_in_year(\"Star Wars: Rogue One\", release_year), birth_year <= release_year, release_year <= death_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Amy Winehouse\", 1983).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Amy Winehouse\", 2011).\n.decl Released_in_year(Movie:symbol, Release_year:float)\nReleased_in_year(\"Star Wars: Rogue One\", 2016).\n.decl Fan_of(Person:symbol, Movie:symbol)\n.decl Answer()\nAnswer() :- Fan_of(\"Amy Winehouse\", \"Star Wars: Rogue One\").\nAnswer() :- Born_in_year(\"Amy Winehouse\", birth_year), Died_in_year(\"Amy Winehouse\", death_year), Released_in_year(\"Star Wars: Rogue One\", release_year), birth_year <= release_year, release_year <= death_year.\n.output Answer"]}
{"id": 509, "answer": true, "completion": ".decl Created(Character:symbol, Creator:symbol)\nCreated(\"Batman\", \"Bob Kane\").\n.decl Directed(Movie:symbol, Director:symbol)\nDirected(\"The Dark Knight\", \"Christopher Nolan\").\n.decl Features(Movie:symbol, Character:symbol)\nFeatures(\"The Dark Knight\", \"Batman\").\n.decl Indebted(Director:symbol, Creator:symbol)\nIndebted(director, creator) :- Directed(movie, director), Features(movie, character), Created(character, creator).\n.decl Answer()\nAnswer() :- Indebted(\"Christopher Nolan\", \"Bob Kane\").\n.output Answer", "completions": [".decl Created(Character:symbol, Creator:symbol)\nCreated(\"Batman\", \"Bob Kane\").\n.decl Directed(Movie:symbol, Director:symbol)\nDirected(\"The Dark Knight\", \"Christopher Nolan\").\n.decl Features(Movie:symbol, Character:symbol)\nFeatures(\"The Dark Knight\", \"Batman\").\n.decl Indebted(Director:symbol, Creator:symbol)\nIndebted(director, creator) :- Directed(movie, director), Features(movie, character), Created(character, creator).\n.decl Answer()\nAnswer() :- Indebted(\"Christopher Nolan\", \"Bob Kane\").\n.output Answer"]}
{"id": 510, "answer": true, "completion": ".decl Named_after(Place:symbol, Person:symbol, Position:symbol)\nNamed_after(\"Morris County\", \"Lewis Morris\", \"chief justice\").\n.decl Answer()\nAnswer() :- Named_after(\"Morris County\", person, \"chief justice\").\n.output Answer", "completions": [".decl Named_after(Place:symbol, Person:symbol, Position:symbol)\nNamed_after(\"Morris County\", \"Lewis Morris\", \"chief justice\").\n.decl Answer()\nAnswer() :- Named_after(\"Morris County\", person, \"chief justice\").\n.output Answer"]}
{"id": 511, "answer": true, "completion": ".decl Has_status(Serfdom:symbol, Status:float)\nHas_status(\"Japanese serfdom\", 2).\nHas_status(\"English serfdom\", 1).\n.decl Answer()\nAnswer() :- Has_status(\"Japanese serfdom\", status1), Has_status(\"English serfdom\", status2), status1 > status2.\n.output Answer", "completions": [".decl Has_status(Serfdom:symbol, Status:float)\nHas_status(\"Japanese serfdom\", 2).\nHas_status(\"English serfdom\", 1).\n.decl Answer()\nAnswer() :- Has_status(\"Japanese serfdom\", status1), Has_status(\"English serfdom\", status2), status1 > status2.\n.output Answer"]}
{"id": 512, "answer": false, "completion": ".decl Grows_at_latitude(Crop:symbol, Min_latitude:float, Max_latitude:float)\nGrows_at_latitude(\"cauliflower\", 30, 60).\n.decl Latitude(Location:symbol, Latitude:float)\nLatitude(\"75° N\", 75).\n.decl Answer()\nAnswer() :- Grows_at_latitude(\"cauliflower\", min_latitude, max_latitude), Latitude(\"75° N\", latitude), latitude >= min_latitude, latitude <= max_latitude.\n.output Answer", "completions": [".decl Grows_at_latitude(Crop:symbol, Min_latitude:float, Max_latitude:float)\nGrows_at_latitude(\"cauliflower\", 30, 60).\n.decl Latitude(Location:symbol, Latitude:float)\nLatitude(\"75° N\", 75).\n.decl Answer()\nAnswer() :- Grows_at_latitude(\"cauliflower\", min_latitude, max_latitude), Latitude(\"75° N\", latitude), latitude >= min_latitude, latitude <= max_latitude.\n.output Answer"]}
{"id": 513, "answer": false, "completion": ".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"Swallow\", 20.1).\nHas_speed(\"American Woodcock\", 5.0).\n.decl Answer()\nAnswer() :- Has_speed(\"Swallow\", speed1), Has_speed(\"American Woodcock\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"Swallow\", 20.1).\nHas_speed(\"American Woodcock\", 5.0).\n.decl Answer()\nAnswer() :- Has_speed(\"Swallow\", speed1), Has_speed(\"American Woodcock\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 514, "answer": true, "completion": ".decl Has_resource(Profession:symbol, Resource:symbol)\nHas_resource(\"cattle farmer\", \"cowhide\").\nHas_resource(\"drum maker\", \"drumhead\").\n.decl Uses_resource(Resource:symbol, Object:symbol)\nUses_resource(\"cowhide\", \"drumhead\").\n.decl Answer()\nAnswer() :- Has_resource(\"cattle farmer\", resource1), Has_resource(\"drum maker\", resource2), Uses_resource(resource1, resource2).\n.output Answer", "completions": [".decl Has_resource(Profession:symbol, Resource:symbol)\nHas_resource(\"cattle farmer\", \"cowhide\").\nHas_resource(\"drum maker\", \"drumhead\").\n.decl Uses_resource(Resource:symbol, Object:symbol)\nUses_resource(\"cowhide\", \"drumhead\").\n.decl Answer()\nAnswer() :- Has_resource(\"cattle farmer\", resource1), Has_resource(\"drum maker\", resource2), Uses_resource(resource1, resource2).\n.output Answer"]}
{"id": 515, "answer": true, "completion": ".decl Needs_spare_strings(Musician:symbol, Instrument:symbol)\nNeeds_spare_strings(\"guitarist\", \"guitar\").\nNeeds_spare_strings(\"bassist\", \"bass\").\n.decl Is_drummer(Musician:symbol)\nIs_drummer(\"drummer\").\n.decl Answer()\nAnswer() :- Is_drummer(musician), !Needs_spare_strings(musician, _).\n.output Answer", "completions": [".decl Needs_spare_strings(Musician:symbol, Instrument:symbol)\nNeeds_spare_strings(\"guitarist\", \"guitar\").\nNeeds_spare_strings(\"bassist\", \"bass\").\n.decl Is_drummer(Musician:symbol)\nIs_drummer(\"drummer\").\n.decl Answer()\nAnswer() :- Is_drummer(musician), !Needs_spare_strings(musician, _).\n.output Answer"]}
{"id": 516, "answer": true, "completion": ".decl Named_after(Event:symbol, Person:symbol)\nNamed_after(\"Homer in baseball\", \"Homer the poet\").\n.decl Wrote(Person:symbol, Work:symbol)\nWrote(\"Homer the poet\", \"Odyssey\").\n.decl Answer()\nAnswer() :- Named_after(\"Homer in baseball\", \"Homer the poet\"), Wrote(\"Homer the poet\", \"Odyssey\").\n.output Answer", "completions": [".decl Named_after(Event:symbol, Person:symbol)\nNamed_after(\"Homer in baseball\", \"Homer the poet\").\n.decl Wrote(Person:symbol, Work:symbol)\nWrote(\"Homer the poet\", \"Odyssey\").\n.decl Answer()\nAnswer() :- Named_after(\"Homer in baseball\", \"Homer the poet\"), Wrote(\"Homer the poet\", \"Odyssey\").\n.output Answer"]}
{"id": 517, "answer": true, "completion": ".decl Has_record(Person:symbol, Record:symbol, Duration:float)\nHas_record(\"Kane\", \"Royal Rumble\", 1.1).\n.decl Is_murderer(Person:symbol)\nIs_murderer(\"John Doe\").\nHas_record(\"John Doe\", \"Some Record\", 1.5).\n.decl Answer()\nAnswer() :- Has_record(murderer, record, duration1), Has_record(\"Kane\", \"Royal Rumble\", duration2), Is_murderer(murderer), duration1 > duration2.\n.output Answer", "completions": [".decl Has_record(Person:symbol, Record:symbol, Duration:float)\nHas_record(\"Kane\", \"Royal Rumble\", 1.1).\n.decl Is_murderer(Person:symbol)\nIs_murderer(\"John Doe\").\nHas_record(\"John Doe\", \"Some Record\", 1.5).\n.decl Answer()\nAnswer() :- Has_record(murderer, record, duration1), Has_record(\"Kane\", \"Royal Rumble\", duration2), Is_murderer(murderer), duration1 > duration2.\n.output Answer"]}
{"id": 518, "answer": true, "completion": ".decl Is_watchable(Show:symbol, Location:symbol)\nIs_watchable(\"Rick and Morty\", \"surface\").\n.decl Is_location(Location:symbol, Depth:float)\nIs_location(\"Mariana Trench\", -36000).\n.decl Answer()\nAnswer() :- Is_watchable(\"Rick and Morty\", location), Is_location(\"Mariana Trench\", depth), depth <= 0.\n.output Answer", "completions": [".decl Is_watchable(Show:symbol, Location:symbol)\nIs_watchable(\"Rick and Morty\", \"surface\").\n.decl Is_location(Location:symbol, Depth:float)\nIs_location(\"Mariana Trench\", -36000).\n.decl Answer()\nAnswer() :- Is_watchable(\"Rick and Morty\", location), Is_location(\"Mariana Trench\", depth), depth <= 0.\n.output Answer"]}
{"id": 519, "answer": true, "completion": ".decl Has_winged_statuettes(Person:symbol)\nHas_winged_statuettes(\"creator of Law & Order\").\n.decl Creator_of_show(Person:symbol, Show:symbol)\nCreator_of_show(\"Dick Wolf\", \"Law & Order\").\n.decl Answer()\nAnswer() :- Creator_of_show(person, \"Law & Order\"), Has_winged_statuettes(person).\n.output Answer", "completions": [".decl Has_winged_statuettes(Person:symbol)\nHas_winged_statuettes(\"creator of Law & Order\").\n.decl Creator_of_show(Person:symbol, Show:symbol)\nCreator_of_show(\"Dick Wolf\", \"Law & Order\").\n.decl Answer()\nAnswer() :- Creator_of_show(person, \"Law & Order\"), Has_winged_statuettes(person).\n.output Answer"]}
{"id": 520, "answer": true, "completion": ".decl Encounters(Animal_A:symbol, Animal_B:symbol)\n.decl Is_awake(Animal:symbol, Time:symbol)\n.decl Is_active(Animal:symbol, Time:symbol)\n\nIs_awake(\"pangolin\", \"night\").\nIs_active(\"clouded leopard\", \"night\").\n\nEncounters(\"clouded leopard\", \"pangolin\") :- Is_active(\"clouded leopard\", time), Is_awake(\"pangolin\", time).\n\n.decl Answer()\nAnswer() :- Encounters(\"clouded leopard\", \"pangolin\").\n.output Answer", "completions": [".decl Encounters(Animal_A:symbol, Animal_B:symbol)\n.decl Is_awake(Animal:symbol, Time:symbol)\n.decl Is_active(Animal:symbol, Time:symbol)\n\nIs_awake(\"pangolin\", \"night\").\nIs_active(\"clouded leopard\", \"night\").\n\nEncounters(\"clouded leopard\", \"pangolin\") :- Is_active(\"clouded leopard\", time), Is_awake(\"pangolin\", time).\n\n.decl Answer()\nAnswer() :- Encounters(\"clouded leopard\", \"pangolin\").\n.output Answer"]}
{"id": 521, "answer": false, "completion": ".decl Is_mythical_creature(Name:symbol)\nIs_mythical_creature(\"centaur\").\nIs_mythical_creature(\"phoenix\").\nIs_mythical_creature(\"pegasus\").\n\n.decl Is_small_solar_system_body(Name:symbol)\nIs_small_solar_system_body(\"centaur\").\nIs_small_solar_system_body(\"asteroid\").\nIs_small_solar_system_body(\"comet\").\n\n.decl Answer()\nAnswer() :- Is_mythical_creature(name), Is_small_solar_system_body(name).\n.output Answer", "completions": [".decl Is_mythical_creature(Name:symbol)\nIs_mythical_creature(\"centaur\").\nIs_mythical_creature(\"phoenix\").\nIs_mythical_creature(\"pegasus\").\n\n.decl Is_small_solar_system_body(Name:symbol)\nIs_small_solar_system_body(\"centaur\").\nIs_small_solar_system_body(\"asteroid\").\nIs_small_solar_system_body(\"comet\").\n\n.decl Answer()\nAnswer() :- Is_mythical_creature(name), Is_small_solar_system_body(name).\n.output Answer"]}
{"id": 522, "answer": false, "completion": ".decl Believes_in(Person:symbol, Concept:symbol)\nBelieves_in(\"Lionel Richie\", \"holistic medicine\").\n.decl Answer()\nAnswer() :- Believes_in(\"Lionel Richie\", \"holistic medicine\").\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Concept:symbol)\nBelieves_in(\"Lionel Richie\", \"holistic medicine\").\n.decl Answer()\nAnswer() :- Believes_in(\"Lionel Richie\", \"holistic medicine\").\n.output Answer"]}
{"id": 523, "answer": false, "completion": ".decl Hosts_show(Host:symbol, Show:symbol)\nHosts_show(\"Tom Bergeron\", \"Dancing With The Stars\").\nHosts_show(\"Erin Andrews\", \"Dancing With The Stars\").\n.decl Hosts_multiple_shows(Host:symbol)\nHosts_multiple_shows(host) :- Hosts_show(host, show1), Hosts_show(host, show2), show1 != show2.\n.decl Answer()\nAnswer() :- Hosts_multiple_shows(\"Tom Bergeron\").\nAnswer() :- Hosts_multiple_shows(\"Erin Andrews\").\n.output Answer", "completions": [".decl Hosts_show(Host:symbol, Show:symbol)\nHosts_show(\"Tom Bergeron\", \"Dancing With The Stars\").\nHosts_show(\"Erin Andrews\", \"Dancing With The Stars\").\n.decl Hosts_multiple_shows(Host:symbol)\nHosts_multiple_shows(host) :- Hosts_show(host, show1), Hosts_show(host, show2), show1 != show2.\n.decl Answer()\nAnswer() :- Hosts_multiple_shows(\"Tom Bergeron\").\nAnswer() :- Hosts_multiple_shows(\"Erin Andrews\").\n.output Answer"]}
{"id": 524, "answer": true, "completion": ".decl Mates_in_location(Animal:symbol, Location:symbol)\nMates_in_location(\"salmon\", \"rivers\").\n.decl Is_location(Location1:symbol, Location2:symbol)\nIs_location(\"Caspian Sea\", \"sea\").\n.decl Answer()\nAnswer() :- Mates_in_location(\"salmon\", location), Is_location(\"Caspian Sea\", location).\n.output Answer", "completions": [".decl Mates_in_location(Animal:symbol, Location:symbol)\nMates_in_location(\"salmon\", \"rivers\").\n.decl Is_location(Location1:symbol, Location2:symbol)\nIs_location(\"Caspian Sea\", \"sea\").\n.decl Answer()\nAnswer() :- Mates_in_location(\"salmon\", location), Is_location(\"Caspian Sea\", location).\n.output Answer"]}
{"id": 525, "answer": true, "completion": ".decl Destination(Transport:symbol, Place:symbol)\nDestination(\"Amtrak\", \"New York\").\nDestination(\"Amtrak\", \"Los Angeles\").\nDestination(\"Amtrak\", \"Chicago\").\n.decl Answer()\nAnswer() :- Destination(\"Amtrak\", \"Underworld\").\n.output Answer", "completions": [".decl Destination(Transport:symbol, Place:symbol)\nDestination(\"Amtrak\", \"New York\").\nDestination(\"Amtrak\", \"Los Angeles\").\nDestination(\"Amtrak\", \"Chicago\").\n.decl Answer()\nAnswer() :- Destination(\"Amtrak\", \"Underworld\").\n.output Answer"]}
{"id": 526, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Ryan Reynolds\", \"Chinook salmon\").\n.decl Has_health_benefit(Food:symbol, Benefit:symbol)\nHas_health_benefit(\"Chinook salmon\", \"omega-3 fatty acids\").\n.decl Needs_health_benefit(Person:symbol, Benefit:symbol)\nNeeds_health_benefit(\"Ryan Reynolds\", \"omega-3 fatty acids\").\n.decl Answer()\nAnswer() :- Eats(\"Ryan Reynolds\", \"Chinook salmon\"), Has_health_benefit(\"Chinook salmon\", benefit), Needs_health_benefit(\"Ryan Reynolds\", benefit).\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Ryan Reynolds\", \"Chinook salmon\").\n.decl Has_health_benefit(Food:symbol, Benefit:symbol)\nHas_health_benefit(\"Chinook salmon\", \"omega-3 fatty acids\").\n.decl Needs_health_benefit(Person:symbol, Benefit:symbol)\nNeeds_health_benefit(\"Ryan Reynolds\", \"omega-3 fatty acids\").\n.decl Answer()\nAnswer() :- Eats(\"Ryan Reynolds\", \"Chinook salmon\"), Has_health_benefit(\"Chinook salmon\", benefit), Needs_health_benefit(\"Ryan Reynolds\", benefit).\n.output Answer"]}
{"id": 527, "answer": false, "completion": ".decl Is_son_of(Person:symbol, Parent:symbol)\nIs_son_of(\"Alexei Nikolaevich\", \"Tsar Nicholas\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Alexei Nikolaevich\", \"hemophiliac\").\n.decl Is_daredevil(Person:symbol)\nIs_daredevil(\"Evel Knievel\").\n.decl Answer()\nAnswer() :- Is_son_of(\"Alexei Nikolaevich\", \"Tsar Nicholas\"), Is_daredevil(\"Alexei Nikolaevich\").\nAnswer() :- Is_son_of(\"Alexei Nikolaevich\", \"Tsar Nicholas\"), Has_trait(\"Alexei Nikolaevich\", \"hemophiliac\"), !Is_daredevil(\"Alexei Nikolaevich\").\n.output Answer", "completions": [".decl Is_son_of(Person:symbol, Parent:symbol)\nIs_son_of(\"Alexei Nikolaevich\", \"Tsar Nicholas\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Alexei Nikolaevich\", \"hemophiliac\").\n.decl Is_daredevil(Person:symbol)\nIs_daredevil(\"Evel Knievel\").\n.decl Answer()\nAnswer() :- Is_son_of(\"Alexei Nikolaevich\", \"Tsar Nicholas\"), Is_daredevil(\"Alexei Nikolaevich\").\nAnswer() :- Is_son_of(\"Alexei Nikolaevich\", \"Tsar Nicholas\"), Has_trait(\"Alexei Nikolaevich\", \"hemophiliac\"), !Is_daredevil(\"Alexei Nikolaevich\").\n.output Answer"]}
{"id": 528, "answer": true, "completion": ".decl Vowels(Vowel:symbol)\nVowels(\"a\").\nVowels(\"e\").\nVowels(\"i\").\nVowels(\"o\").\nVowels(\"u\").\n\n.decl First_line_QWERTY(Key:symbol)\nFirst_line_QWERTY(\"q\").\nFirst_line_QWERTY(\"w\").\nFirst_line_QWERTY(\"e\").\nFirst_line_QWERTY(\"r\").\nFirst_line_QWERTY(\"t\").\nFirst_line_QWERTY(\"y\").\nFirst_line_QWERTY(\"u\").\nFirst_line_QWERTY(\"i\").\nFirst_line_QWERTY(\"o\").\nFirst_line_QWERTY(\"p\").\n\n.decl Vowel_on_first_line(Vowel:symbol)\nVowel_on_first_line(vowel) :- Vowels(vowel), First_line_QWERTY(vowel).\n\n.decl Total_vowels(N:float)\nTotal_vowels(count<vowel>) :- Vowels(vowel).\n\n.decl Total_vowels_on_first_line(N:float)\nTotal_vowels_on_first_line(count<vowel>) :- Vowel_on_first_line(vowel).\n\n.decl Answer()\nAnswer() :- Total_vowels(total_vowels), Total_vowels_on_first_line(total_vowels_on_first_line), total_vowels_on_first_line > total_vowels / 2.\n\n.output Answer", "completions": [".decl Vowels(Vowel:symbol)\nVowels(\"a\").\nVowels(\"e\").\nVowels(\"i\").\nVowels(\"o\").\nVowels(\"u\").\n\n.decl First_line_QWERTY(Key:symbol)\nFirst_line_QWERTY(\"q\").\nFirst_line_QWERTY(\"w\").\nFirst_line_QWERTY(\"e\").\nFirst_line_QWERTY(\"r\").\nFirst_line_QWERTY(\"t\").\nFirst_line_QWERTY(\"y\").\nFirst_line_QWERTY(\"u\").\nFirst_line_QWERTY(\"i\").\nFirst_line_QWERTY(\"o\").\nFirst_line_QWERTY(\"p\").\n\n.decl Vowel_on_first_line(Vowel:symbol)\nVowel_on_first_line(vowel) :- Vowels(vowel), First_line_QWERTY(vowel).\n\n.decl Total_vowels(N:float)\nTotal_vowels(count<vowel>) :- Vowels(vowel).\n\n.decl Total_vowels_on_first_line(N:float)\nTotal_vowels_on_first_line(count<vowel>) :- Vowel_on_first_line(vowel).\n\n.decl Answer()\nAnswer() :- Total_vowels(total_vowels), Total_vowels_on_first_line(total_vowels_on_first_line), total_vowels_on_first_line > total_vowels / 2.\n\n.output Answer"]}
{"id": 529, "answer": true, "completion": ".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"muskets\", \"American Revolutionary War\").\nUsed_in_war(\"muskets\", \"Napoleonic Wars\").\nUsed_in_war(\"muskets\", \"American Civil War\").\nUsed_in_war(\"rifles\", \"Pacific War\").\nUsed_in_war(\"machine guns\", \"Pacific War\").\nUsed_in_war(\"aircraft\", \"Pacific War\").\n.decl Answer()\nAnswer() :- Used_in_war(\"muskets\", \"Pacific War\").\n.output Answer", "completions": [".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"muskets\", \"American Revolutionary War\").\nUsed_in_war(\"muskets\", \"Napoleonic Wars\").\nUsed_in_war(\"muskets\", \"American Civil War\").\nUsed_in_war(\"rifles\", \"Pacific War\").\nUsed_in_war(\"machine guns\", \"Pacific War\").\nUsed_in_war(\"aircraft\", \"Pacific War\").\n.decl Answer()\nAnswer() :- Used_in_war(\"muskets\", \"Pacific War\").\n.output Answer"]}
{"id": 530, "answer": true, "completion": ".decl Associated_with(Person:symbol, Animal:symbol)\nAssociated_with(\"Noah\", \"dove\").\n.decl Answer()\nAnswer() :- Associated_with(\"Noah\", \"dove\").\n.output Answer", "completions": [".decl Associated_with(Person:symbol, Animal:symbol)\nAssociated_with(\"Noah\", \"dove\").\n.decl Answer()\nAnswer() :- Associated_with(\"Noah\", \"dove\").\n.output Answer"]}
{"id": 531, "answer": true, "completion": ".decl Has_breakdown(Person:symbol, Reason:symbol)\nHas_breakdown(\"Britney Spears\", \"bipolar disorder\").\n.decl Answer()\nAnswer() :- Has_breakdown(\"Britney Spears\", \"bipolar disorder\").\n.output Answer", "completions": [".decl Has_breakdown(Person:symbol, Reason:symbol)\nHas_breakdown(\"Britney Spears\", \"bipolar disorder\").\n.decl Answer()\nAnswer() :- Has_breakdown(\"Britney Spears\", \"bipolar disorder\").\n.output Answer"]}
{"id": 532, "answer": true, "completion": ".decl Is_pet(Animal:symbol, Safety_level:float)\nIs_pet(\"Cassowary\", 2).\nIs_pet(\"Crane\", 5).\n.decl Answer()\nAnswer() :- Is_pet(\"Cassowary\", safety_level1), Is_pet(\"Crane\", safety_level2), safety_level1 < safety_level2.\n.output Answer", "completions": [".decl Is_pet(Animal:symbol, Safety_level:float)\nIs_pet(\"Cassowary\", 2).\nIs_pet(\"Crane\", 5).\n.decl Answer()\nAnswer() :- Is_pet(\"Cassowary\", safety_level1), Is_pet(\"Crane\", safety_level2), safety_level1 < safety_level2.\n.output Answer"]}
{"id": 533, "answer": true, "completion": ".decl Is_inventor(Person:symbol)\nIs_inventor(\"Thomas Edison\").\nIs_inventor(\"Nikola Tesla\").\n.decl Is_struggling(Person:symbol)\nIs_struggling(\"Nikola Tesla\").\n.decl Answer()\nAnswer() :- Is_inventor(\"Mark Twain\"), Is_struggling(\"Mark Twain\").\n.output Answer", "completions": [".decl Is_inventor(Person:symbol)\nIs_inventor(\"Thomas Edison\").\nIs_inventor(\"Nikola Tesla\").\n.decl Is_struggling(Person:symbol)\nIs_struggling(\"Nikola Tesla\").\n.decl Answer()\nAnswer() :- Is_inventor(\"Mark Twain\"), Is_struggling(\"Mark Twain\").\n.output Answer"]}
{"id": 534, "answer": true, "completion": ".decl Built_for(Event:symbol, Structure:symbol)\nBuilt_for(\"French Revolution\", \"Eiffel Tower\").\n.decl Answer()\nAnswer() :- Built_for(\"French Revolution\", \"Eiffel Tower\").\n.output Answer", "completions": [".decl Built_for(Event:symbol, Structure:symbol)\nBuilt_for(\"French Revolution\", \"Eiffel Tower\").\n.decl Answer()\nAnswer() :- Built_for(\"French Revolution\", \"Eiffel Tower\").\n.output Answer"]}
{"id": 535, "answer": true, "completion": ".decl Founded_in_period(University:symbol, Period:symbol)\nFounded_in_period(\"Berlin University of the Arts\", \"1696\").\n.decl Is_in_period(Year:float, Period:symbol)\nIs_in_period(year, \"Baroque\") :- year >= 1600, year <= 1750.\n.decl Answer()\nAnswer() :- Founded_in_period(\"Berlin University of the Arts\", year), Is_in_period(year, \"Baroque\").\n.output Answer", "completions": [".decl Founded_in_period(University:symbol, Period:symbol)\nFounded_in_period(\"Berlin University of the Arts\", \"1696\").\n.decl Is_in_period(Year:float, Period:symbol)\nIs_in_period(year, \"Baroque\") :- year >= 1600, year <= 1750.\n.decl Answer()\nAnswer() :- Founded_in_period(\"Berlin University of the Arts\", year), Is_in_period(year, \"Baroque\").\n.output Answer"]}
{"id": 536, "answer": true, "completion": ".decl Is_publisher_of(Publisher:symbol, Comic:symbol)\nIs_publisher_of(\"DC Comics\", \"Batman\").\nIs_publisher_of(\"DC Comics\", \"Superman\").\nIs_publisher_of(\"Marvel Comics\", \"Avengers\").\n.decl Answer()\nAnswer() :- Is_publisher_of(\"DC Comics\", \"Avengers\").\nAnswer() :- !Is_publisher_of(\"DC Comics\", \"Avengers\").\n.output Answer", "completions": [".decl Is_publisher_of(Publisher:symbol, Comic:symbol)\nIs_publisher_of(\"DC Comics\", \"Batman\").\nIs_publisher_of(\"DC Comics\", \"Superman\").\nIs_publisher_of(\"Marvel Comics\", \"Avengers\").\n.decl Answer()\nAnswer() :- Is_publisher_of(\"DC Comics\", \"Avengers\").\nAnswer() :- !Is_publisher_of(\"DC Comics\", \"Avengers\").\n.output Answer"]}
{"id": 537, "answer": false, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Queen Elizabeth The Queen Mother\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth II\", \"Elizabeth\").\nHas_name(\"Tudor queen\", \"Elizabeth\").\n.decl Answer()\nAnswer() :- Has_name(\"Queen Elizabeth The Queen Mother\", name1), Has_name(\"Tudor queen\", name2), name1 = name2.\nAnswer() :- Has_name(\"Queen Elizabeth II\", name1), Has_name(\"Tudor queen\", name2), name1 = name2.\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Queen Elizabeth The Queen Mother\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth II\", \"Elizabeth\").\nHas_name(\"Tudor queen\", \"Elizabeth\").\n.decl Answer()\nAnswer() :- Has_name(\"Queen Elizabeth The Queen Mother\", name1), Has_name(\"Tudor queen\", name2), name1 = name2.\nAnswer() :- Has_name(\"Queen Elizabeth II\", name1), Has_name(\"Tudor queen\", name2), name1 = name2.\n.output Answer"]}
{"id": 538, "answer": false, "completion": ".decl Helps_with_insomnia(Drink:symbol, Helps:float)\nHelps_with_insomnia(\"Cuba Libre\", 0).\n.decl Answer()\nAnswer() :- Helps_with_insomnia(\"Cuba Libre\", helps), helps > 0.\n.output Answer", "completions": [".decl Helps_with_insomnia(Drink:symbol, Helps:float)\nHelps_with_insomnia(\"Cuba Libre\", 0).\n.decl Answer()\nAnswer() :- Helps_with_insomnia(\"Cuba Libre\", helps), helps > 0.\n.output Answer"]}
{"id": 539, "answer": true, "completion": ".decl Is_ingredient_of(Ingredient:symbol, Product:symbol)\nIs_ingredient_of(\"glycol\", \"antifreeze\").\n.decl Used_by(Company:symbol, Product:symbol)\nUsed_by(\"United Airlines\", \"antifreeze\").\n.decl Answer()\nAnswer() :- Is_ingredient_of(\"glycol\", product), Used_by(\"United Airlines\", product).\n.output Answer", "completions": [".decl Is_ingredient_of(Ingredient:symbol, Product:symbol)\nIs_ingredient_of(\"glycol\", \"antifreeze\").\n.decl Used_by(Company:symbol, Product:symbol)\nUsed_by(\"United Airlines\", \"antifreeze\").\n.decl Answer()\nAnswer() :- Is_ingredient_of(\"glycol\", product), Used_by(\"United Airlines\", product).\n.output Answer"]}
{"id": 540, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Swiss Guard\", 135).\nHas_n_members(\"Virginia General Assembly\", 140).\n.decl Answer()\nAnswer() :- Has_n_members(\"Swiss Guard\", n_members1), Has_n_members(\"Virginia General Assembly\", n_members2), n_members1 >= n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Swiss Guard\", 135).\nHas_n_members(\"Virginia General Assembly\", 140).\n.decl Answer()\nAnswer() :- Has_n_members(\"Swiss Guard\", n_members1), Has_n_members(\"Virginia General Assembly\", n_members2), n_members1 >= n_members2.\n.output Answer"]}
{"id": 541, "answer": true, "completion": ".decl Likes(Person:symbol, Substance:symbol)\nLikes(\"Julio Gonzalez\", \"acetylene\").\n.decl Answer()\nAnswer() :- Likes(\"Julio Gonzalez\", \"acetylene\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Substance:symbol)\nLikes(\"Julio Gonzalez\", \"acetylene\").\n.decl Answer()\nAnswer() :- Likes(\"Julio Gonzalez\", \"acetylene\").\n.output Answer"]}
{"id": 542, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Frigatebird\", \"tropical and subtropical oceans\").\n.decl Is_in(Location1:symbol, Location2:symbol)\nIs_in(\"Ontario\", \"Canada\").\n.decl Has_climate(Location:symbol, Climate:symbol)\nHas_climate(\"Canada\", \"temperate\").\n.decl Answer()\nAnswer() :- Lives_in(\"Frigatebird\", location1), Has_climate(location1, \"tropical\"), Is_in(\"Ontario\", location2), Has_climate(location2, \"temperate\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Frigatebird\", \"tropical and subtropical oceans\").\n.decl Is_in(Location1:symbol, Location2:symbol)\nIs_in(\"Ontario\", \"Canada\").\n.decl Has_climate(Location:symbol, Climate:symbol)\nHas_climate(\"Canada\", \"temperate\").\n.decl Answer()\nAnswer() :- Lives_in(\"Frigatebird\", location1), Has_climate(location1, \"tropical\"), Is_in(\"Ontario\", location2), Has_climate(location2, \"temperate\").\n.output Answer"]}
{"id": 543, "answer": false, "completion": ".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Statue of Freedom\", \"Washington, D.C.\").\nLocated_in(\"Statue of Liberty\", \"New York City\").\n.decl Distance(Location_A:symbol, Location_B:symbol, Distance:float)\nDistance(\"Washington, D.C.\", \"New York City\", 225).\n.decl Visible_distance(Object:symbol, Distance:float)\nVisible_distance(\"Statue of Freedom\", 3).\nVisible_distance(\"Statue of Liberty\", 3).\n.decl Answer()\nAnswer() :- Located_in(\"Statue of Freedom\", location1), Located_in(\"Statue of Liberty\", location2), Distance(location1, location2, distance), Visible_distance(\"Statue of Freedom\", visible_distance1), Visible_distance(\"Statue of Liberty\", visible_distance2), distance <= visible_distance1 + visible_distance2.\n.output Answer", "completions": [".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Statue of Freedom\", \"Washington, D.C.\").\nLocated_in(\"Statue of Liberty\", \"New York City\").\n.decl Distance(Location_A:symbol, Location_B:symbol, Distance:float)\nDistance(\"Washington, D.C.\", \"New York City\", 225).\n.decl Visible_distance(Object:symbol, Distance:float)\nVisible_distance(\"Statue of Freedom\", 3).\nVisible_distance(\"Statue of Liberty\", 3).\n.decl Answer()\nAnswer() :- Located_in(\"Statue of Freedom\", location1), Located_in(\"Statue of Liberty\", location2), Distance(location1, location2, distance), Visible_distance(\"Statue of Freedom\", visible_distance1), Visible_distance(\"Statue of Liberty\", visible_distance2), distance <= visible_distance1 + visible_distance2.\n.output Answer"]}
{"id": 544, "answer": true, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Snickers\", 250).\n.decl Recommended_calories(Food:symbol, Calories:float)\nRecommended_calories(\"weight loss snack\", 100).\n.decl Answer()\nAnswer() :- Has_calories(\"Snickers\", calories1), Recommended_calories(\"weight loss snack\", calories2), calories1 <= calories2.\n.output Answer", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Snickers\", 250).\n.decl Recommended_calories(Food:symbol, Calories:float)\nRecommended_calories(\"weight loss snack\", 100).\n.decl Answer()\nAnswer() :- Has_calories(\"Snickers\", calories1), Recommended_calories(\"weight loss snack\", calories2), calories1 <= calories2.\n.output Answer"]}
{"id": 545, "answer": false, "completion": ".decl Has_parts(Object:symbol, N_parts:float)\nHas_parts(\"skull\", 22).\n.decl Answer()\nAnswer() :- Has_parts(\"skull\", n_parts), n_parts = 1.\n.output Answer", "completions": [".decl Has_parts(Object:symbol, N_parts:float)\nHas_parts(\"skull\", 22).\n.decl Answer()\nAnswer() :- Has_parts(\"skull\", n_parts), n_parts = 1.\n.output Answer"]}
{"id": 546, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Jack Dempsey\", 1895).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Jack Dempsey\", 1983).\n.decl Fights_in_year(Fighter:symbol, Fight_year:float)\nFights_in_year(\"Conor McGregor\", 2008).\nFights_in_year(\"Conor McGregor\", 2009).\nFights_in_year(\"Conor McGregor\", 2010).\nFights_in_year(\"Conor McGregor\", 2011).\nFights_in_year(\"Conor McGregor\", 2012).\nFights_in_year(\"Conor McGregor\", 2013).\nFights_in_year(\"Conor McGregor\", 2014).\nFights_in_year(\"Conor McGregor\", 2015).\nFights_in_year(\"Conor McGregor\", 2016).\nFights_in_year(\"Conor McGregor\", 2017).\nFights_in_year(\"Conor McGregor\", 2018).\nFights_in_year(\"Conor McGregor\", 2020).\n.decl Answer()\nAnswer() :- Born_in_year(\"Jack Dempsey\", birth_year), Died_in_year(\"Jack Dempsey\", death_year), Fights_in_year(\"Conor McGregor\", fight_year), birth_year <= fight_year, fight_year <= death_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Jack Dempsey\", 1895).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Jack Dempsey\", 1983).\n.decl Fights_in_year(Fighter:symbol, Fight_year:float)\nFights_in_year(\"Conor McGregor\", 2008).\nFights_in_year(\"Conor McGregor\", 2009).\nFights_in_year(\"Conor McGregor\", 2010).\nFights_in_year(\"Conor McGregor\", 2011).\nFights_in_year(\"Conor McGregor\", 2012).\nFights_in_year(\"Conor McGregor\", 2013).\nFights_in_year(\"Conor McGregor\", 2014).\nFights_in_year(\"Conor McGregor\", 2015).\nFights_in_year(\"Conor McGregor\", 2016).\nFights_in_year(\"Conor McGregor\", 2017).\nFights_in_year(\"Conor McGregor\", 2018).\nFights_in_year(\"Conor McGregor\", 2020).\n.decl Answer()\nAnswer() :- Born_in_year(\"Jack Dempsey\", birth_year), Died_in_year(\"Jack Dempsey\", death_year), Fights_in_year(\"Conor McGregor\", fight_year), birth_year <= fight_year, fight_year <= death_year.\n.output Answer"]}
{"id": 547, "answer": false, "completion": ".decl From_country(Character:symbol, Country:symbol)\nFrom_country(\"Rurouni Kenshin\", \"Japan\").\nFrom_country(\"lead character in Nobunaga's Ambition\", \"Japan\").\n.decl Answer()\nAnswer() :- From_country(\"Rurouni Kenshin\", country1), From_country(\"lead character in Nobunaga's Ambition\", country2), country1 = country2.\n.output Answer", "completions": [".decl From_country(Character:symbol, Country:symbol)\nFrom_country(\"Rurouni Kenshin\", \"Japan\").\nFrom_country(\"lead character in Nobunaga's Ambition\", \"Japan\").\n.decl Answer()\nAnswer() :- From_country(\"Rurouni Kenshin\", country1), From_country(\"lead character in Nobunaga's Ambition\", country2), country1 = country2.\n.output Answer"]}
{"id": 548, "answer": true, "completion": ".decl Height(Person:symbol, Height:float)\nHeight(\"Darth Vader\", 2.03).\nHeight(\"Bill Walton\", 2.11).\n.decl Can_dunk_without_force(Person:symbol)\nCan_dunk_without_force(\"Darth Vader\") :- Height(\"Darth Vader\", height1), Height(\"Bill Walton\", height2), height1 > height2.\n.decl Answer()\nAnswer() :- Can_dunk_without_force(\"Darth Vader\").\n.output Answer", "completions": [".decl Height(Person:symbol, Height:float)\nHeight(\"Darth Vader\", 2.03).\nHeight(\"Bill Walton\", 2.11).\n.decl Can_dunk_without_force(Person:symbol)\nCan_dunk_without_force(\"Darth Vader\") :- Height(\"Darth Vader\", height1), Height(\"Bill Walton\", height2), height1 > height2.\n.decl Answer()\nAnswer() :- Can_dunk_without_force(\"Darth Vader\").\n.output Answer"]}
{"id": 549, "answer": true, "completion": ".decl Is_used_for(Activity:symbol, Purpose:symbol)\nIs_used_for(\"peer review\", \"scientific papers\").\nIs_used_for(\"popular science\", \"public understanding\").\n.decl Answer()\nAnswer() :- Is_used_for(\"popular science\", \"scientific papers\").\nAnswer() :- Is_used_for(\"popular science\", purpose), Is_used_for(\"peer review\", purpose).\n.output Answer", "completions": [".decl Is_used_for(Activity:symbol, Purpose:symbol)\nIs_used_for(\"peer review\", \"scientific papers\").\nIs_used_for(\"popular science\", \"public understanding\").\n.decl Answer()\nAnswer() :- Is_used_for(\"popular science\", \"scientific papers\").\nAnswer() :- Is_used_for(\"popular science\", purpose), Is_used_for(\"peer review\", purpose).\n.output Answer"]}
{"id": 550, "answer": true, "completion": ".decl Is_linked(Object_A:symbol, Object_B:symbol)\nIs_linked(\"Europa\", \"moon\").\nIs_linked(\"Viennese waltzes\", \"dance\").\n.decl Answer()\nAnswer() :- Is_linked(\"Europa\", category1), Is_linked(\"Viennese waltzes\", category1).\n.output Answer", "completions": [".decl Is_linked(Object_A:symbol, Object_B:symbol)\nIs_linked(\"Europa\", \"moon\").\nIs_linked(\"Viennese waltzes\", \"dance\").\n.decl Answer()\nAnswer() :- Is_linked(\"Europa\", category1), Is_linked(\"Viennese waltzes\", category1).\n.output Answer"]}
{"id": 551, "answer": true, "completion": ".decl Is_Disney_princess(Princess:symbol)\nIs_Disney_princess(\"Ariel\").\nIs_Disney_princess(\"Cinderella\").\nIs_Disney_princess(\"Belle\").\nIs_Disney_princess(\"Jasmine\").\nIs_Disney_princess(\"Snow White\").\nIs_Disney_princess(\"Aurora\").\nIs_Disney_princess(\"Tiana\").\nIs_Disney_princess(\"Rapunzel\").\nIs_Disney_princess(\"Merida\").\nIs_Disney_princess(\"Moana\").\nIs_Disney_princess(\"Elsa\").\nIs_Disney_princess(\"Anna\").\nIs_Disney_princess(\"Pocahontas\").\nIs_Disney_princess(\"Mulan\").\n\n.decl Has_red_hair(Princess:symbol)\nHas_red_hair(\"Ariel\").\nHas_red_hair(\"Merida\").\n\n.decl Appears_on_Broadway(Princess:symbol)\nAppears_on_Broadway(\"Ariel\").\nAppears_on_Broadway(\"Cinderella\").\nAppears_on_Broadway(\"Belle\").\nAppears_on_Broadway(\"Jasmine\").\nAppears_on_Broadway(\"Snow White\").\nAppears_on_Broadway(\"Aurora\").\nAppears_on_Broadway(\"Tiana\").\nAppears_on_Broadway(\"Rapunzel\").\nAppears_on_Broadway(\"Elsa\").\nAppears_on_Broadway(\"Anna\").\nAppears_on_Broadway(\"Pocahontas\").\nAppears_on_Broadway(\"Mulan\").\n\n.decl Answer()\nAnswer() :- Is_Disney_princess(princess), Has_red_hair(princess), Appears_on_Broadway(princess).\n.output Answer", "completions": [".decl Is_Disney_princess(Princess:symbol)\nIs_Disney_princess(\"Ariel\").\nIs_Disney_princess(\"Cinderella\").\nIs_Disney_princess(\"Belle\").\nIs_Disney_princess(\"Jasmine\").\nIs_Disney_princess(\"Snow White\").\nIs_Disney_princess(\"Aurora\").\nIs_Disney_princess(\"Tiana\").\nIs_Disney_princess(\"Rapunzel\").\nIs_Disney_princess(\"Merida\").\nIs_Disney_princess(\"Moana\").\nIs_Disney_princess(\"Elsa\").\nIs_Disney_princess(\"Anna\").\nIs_Disney_princess(\"Pocahontas\").\nIs_Disney_princess(\"Mulan\").\n\n.decl Has_red_hair(Princess:symbol)\nHas_red_hair(\"Ariel\").\nHas_red_hair(\"Merida\").\n\n.decl Appears_on_Broadway(Princess:symbol)\nAppears_on_Broadway(\"Ariel\").\nAppears_on_Broadway(\"Cinderella\").\nAppears_on_Broadway(\"Belle\").\nAppears_on_Broadway(\"Jasmine\").\nAppears_on_Broadway(\"Snow White\").\nAppears_on_Broadway(\"Aurora\").\nAppears_on_Broadway(\"Tiana\").\nAppears_on_Broadway(\"Rapunzel\").\nAppears_on_Broadway(\"Elsa\").\nAppears_on_Broadway(\"Anna\").\nAppears_on_Broadway(\"Pocahontas\").\nAppears_on_Broadway(\"Mulan\").\n\n.decl Answer()\nAnswer() :- Is_Disney_princess(princess), Has_red_hair(princess), Appears_on_Broadway(princess).\n.output Answer"]}
{"id": 552, "answer": true, "completion": ".decl Has_n_athletes(Event:symbol, Year:float, Gender:symbol, N_athletes:float)\nHas_n_athletes(\"2008 Summer Olympics\", 2008, \"women\", 4637).\nHas_n_athletes(\"2008 Summer Olympics\", 2008, \"men\", 6305).\n.decl Answer()\nAnswer() :- Has_n_athletes(\"2008 Summer Olympics\", 2008, \"women\", n_women), Has_n_athletes(\"2008 Summer Olympics\", 2008, \"men\", n_men), n_women <= n_men.\n.output Answer", "completions": [".decl Has_n_athletes(Event:symbol, Year:float, Gender:symbol, N_athletes:float)\nHas_n_athletes(\"2008 Summer Olympics\", 2008, \"women\", 4637).\nHas_n_athletes(\"2008 Summer Olympics\", 2008, \"men\", 6305).\n.decl Answer()\nAnswer() :- Has_n_athletes(\"2008 Summer Olympics\", 2008, \"women\", n_women), Has_n_athletes(\"2008 Summer Olympics\", 2008, \"men\", n_men), n_women <= n_men.\n.output Answer"]}
{"id": 553, "answer": false, "completion": ".decl Contributed_to_war_victory(Structure:symbol, War:symbol)\nContributed_to_war_victory(\"Eiffel Tower\", \"none\").\n.decl Answer()\nAnswer() :- Contributed_to_war_victory(\"Eiffel Tower\", war), war != \"none\".\n.output Answer", "completions": [".decl Contributed_to_war_victory(Structure:symbol, War:symbol)\nContributed_to_war_victory(\"Eiffel Tower\", \"none\").\n.decl Answer()\nAnswer() :- Contributed_to_war_victory(\"Eiffel Tower\", war), war != \"none\".\n.output Answer"]}
{"id": 554, "answer": false, "completion": ".decl Can_kill(Object:symbol, Target:symbol)\nCan_kill(\"Curiosity (rover)\", \"cat\").\n.decl Answer()\nAnswer() :- Can_kill(\"Curiosity (rover)\", \"cat\").\n.output Answer", "completions": [".decl Can_kill(Object:symbol, Target:symbol)\nCan_kill(\"Curiosity (rover)\", \"cat\").\n.decl Answer()\nAnswer() :- Can_kill(\"Curiosity (rover)\", \"cat\").\n.output Answer"]}
{"id": 555, "answer": true, "completion": ".decl Enhances_flavor(Ingredient:symbol, Food:symbol)\nEnhances_flavor(\"lemon\", \"tea\").\nEnhances_flavor(\"lemon\", \"water\").\nEnhances_flavor(\"lemon\", \"fish\").\n.decl Answer()\nAnswer() :- Enhances_flavor(\"lemon\", \"milk\").\n.output Answer", "completions": [".decl Enhances_flavor(Ingredient:symbol, Food:symbol)\nEnhances_flavor(\"lemon\", \"tea\").\nEnhances_flavor(\"lemon\", \"water\").\nEnhances_flavor(\"lemon\", \"fish\").\n.decl Answer()\nAnswer() :- Enhances_flavor(\"lemon\", \"milk\").\n.output Answer"]}
{"id": 556, "answer": false, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Oprah Winfrey\", \"Tennessee State University\").\n.decl Is_Ivy_League(University:symbol)\nIs_Ivy_League(\"Harvard University\").\nIs_Ivy_League(\"Yale University\").\nIs_Ivy_League(\"Princeton University\").\nIs_Ivy_League(\"Columbia University\").\nIs_Ivy_League(\"Brown University\").\nIs_Ivy_League(\"Dartmouth College\").\nIs_Ivy_League(\"University of Pennsylvania\").\nIs_Ivy_League(\"Cornell University\").\n.decl Answer()\nAnswer() :- Graduates(\"Oprah Winfrey\", university), Is_Ivy_League(university).\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Oprah Winfrey\", \"Tennessee State University\").\n.decl Is_Ivy_League(University:symbol)\nIs_Ivy_League(\"Harvard University\").\nIs_Ivy_League(\"Yale University\").\nIs_Ivy_League(\"Princeton University\").\nIs_Ivy_League(\"Columbia University\").\nIs_Ivy_League(\"Brown University\").\nIs_Ivy_League(\"Dartmouth College\").\nIs_Ivy_League(\"University of Pennsylvania\").\nIs_Ivy_League(\"Cornell University\").\n.decl Answer()\nAnswer() :- Graduates(\"Oprah Winfrey\", university), Is_Ivy_League(university).\n.output Answer"]}
{"id": 557, "answer": true, "completion": ".decl Has_birthday(Person:symbol, Date:symbol)\nHas_birthday(\"unanimously elected president\", \"February 22\").\n.decl Is_break_for_mail_carriers(Date:symbol)\nIs_break_for_mail_carriers(\"February 22\").\n.decl Answer()\nAnswer() :- Has_birthday(\"unanimously elected president\", date), Is_break_for_mail_carriers(date).\n.output Answer", "completions": [".decl Has_birthday(Person:symbol, Date:symbol)\nHas_birthday(\"unanimously elected president\", \"February 22\").\n.decl Is_break_for_mail_carriers(Date:symbol)\nIs_break_for_mail_carriers(\"February 22\").\n.decl Answer()\nAnswer() :- Has_birthday(\"unanimously elected president\", date), Is_break_for_mail_carriers(date).\n.output Answer"]}
{"id": 558, "answer": true, "completion": ".decl Can_be_made_with(Method:symbol, Ingredient:symbol)\nCan_be_made_with(\"dehydrator\", \"paprika\").\nCan_be_made_with(\"air drying\", \"paprika\").\nCan_be_made_with(\"oven drying\", \"paprika\").\n.decl Answer()\nAnswer() :- Can_be_made_with(method, \"paprika\"), method != \"dehydrator\".\n.output Answer", "completions": [".decl Can_be_made_with(Method:symbol, Ingredient:symbol)\nCan_be_made_with(\"dehydrator\", \"paprika\").\nCan_be_made_with(\"air drying\", \"paprika\").\nCan_be_made_with(\"oven drying\", \"paprika\").\n.decl Answer()\nAnswer() :- Can_be_made_with(method, \"paprika\"), method != \"dehydrator\".\n.output Answer"]}
{"id": 559, "answer": false, "completion": ".decl Fought_in_war(Person:symbol, War:symbol)\n.decl Craves(Person:symbol, Food:symbol)\n.decl War_time(War:symbol, Start_year:float, End_year:float)\n.decl Food_introduced(Food:symbol, Year:float)\n\nWar_time(\"Philippine-American War\", 1899, 1902).\nFood_introduced(\"SPAM\", 1937).\n\n.decl Answer()\nAnswer() :- Fought_in_war(veteran, \"Philippine-American War\"), Craves(veteran, \"SPAM\"), War_time(\"Philippine-American War\", start_year, end_year), Food_introduced(\"SPAM\", year), year > end_year.\n.output Answer", "completions": [".decl Fought_in_war(Person:symbol, War:symbol)\n.decl Craves(Person:symbol, Food:symbol)\n.decl War_time(War:symbol, Start_year:float, End_year:float)\n.decl Food_introduced(Food:symbol, Year:float)\n\nWar_time(\"Philippine-American War\", 1899, 1902).\nFood_introduced(\"SPAM\", 1937).\n\n.decl Answer()\nAnswer() :- Fought_in_war(veteran, \"Philippine-American War\"), Craves(veteran, \"SPAM\"), War_time(\"Philippine-American War\", start_year, end_year), Food_introduced(\"SPAM\", year), year > end_year.\n.output Answer"]}
{"id": 560, "answer": false, "completion": ".decl Located_near(Object_A:symbol, Object_B:symbol)\nLocated_near(\"United States Capitol\", \"White House\").\n.decl Answer()\nAnswer() :- Located_near(\"United States Capitol\", \"White House\").\n.output Answer", "completions": [".decl Located_near(Object_A:symbol, Object_B:symbol)\nLocated_near(\"United States Capitol\", \"White House\").\n.decl Answer()\nAnswer() :- Located_near(\"United States Capitol\", \"White House\").\n.output Answer"]}
{"id": 561, "answer": true, "completion": ".decl Has_copyright_expiration(Year:symbol, Entity:symbol)\nHas_copyright_expiration(\"2024\", \"Godzilla\").\n.decl Is_in_year(Year:symbol, Event:symbol)\nIs_in_year(\"2050\", \"lawsuit\").\n.decl Answer()\nAnswer() :- Is_in_year(year, \"lawsuit\"), Has_copyright_expiration(expiration_year, \"Godzilla\"), year > expiration_year.\n.output Answer", "completions": [".decl Has_copyright_expiration(Year:symbol, Entity:symbol)\nHas_copyright_expiration(\"2024\", \"Godzilla\").\n.decl Is_in_year(Year:symbol, Event:symbol)\nIs_in_year(\"2050\", \"lawsuit\").\n.decl Answer()\nAnswer() :- Is_in_year(year, \"lawsuit\"), Has_copyright_expiration(expiration_year, \"Godzilla\"), year > expiration_year.\n.output Answer"]}
{"id": 562, "answer": true, "completion": ".decl Is_confused_about(Profession:symbol, Topic:symbol)\nIs_confused_about(\"actuary\", \"prime numbers\").\n.decl Answer()\nAnswer() :- Is_confused_about(\"actuary\", \"prime numbers\").\n.output Answer", "completions": [".decl Is_confused_about(Profession:symbol, Topic:symbol)\nIs_confused_about(\"actuary\", \"prime numbers\").\n.decl Answer()\nAnswer() :- Is_confused_about(\"actuary\", \"prime numbers\").\n.output Answer"]}
{"id": 563, "answer": true, "completion": ".decl Produces_methane(Source:symbol, Methane_emission:float)\nProduces_methane(\"cow\", 100).\nProduces_methane(\"car\", 0).\n\n.decl Produces_CO2(Source:symbol, CO2_emission:float)\nProduces_CO2(\"cow\", 0).\nProduces_CO2(\"car\", 150).\n\n.decl Has_global_warming_potential(Gas:symbol, GWP:float)\nHas_global_warming_potential(\"methane\", 28).\nHas_global_warming_potential(\"CO2\", 1).\n\n.decl Total_GWP(Source:symbol, GWP:float)\nTotal_GWP(Source, GWP) :- Produces_methane(Source, Methane_emission), Produces_CO2(Source, CO2_emission), Has_global_warming_potential(\"methane\", Methane_GWP), Has_global_warming_potential(\"CO2\", CO2_GWP), GWP = Methane_emission * Methane_GWP + CO2_emission * CO2_GWP.\n\n.decl Answer()\nAnswer() :- Total_GWP(\"cow\", GWP_cow), Total_GWP(\"car\", GWP_car), GWP_cow < GWP_car.\n.output Answer", "completions": [".decl Produces_methane(Source:symbol, Methane_emission:float)\nProduces_methane(\"cow\", 100).\nProduces_methane(\"car\", 0).\n\n.decl Produces_CO2(Source:symbol, CO2_emission:float)\nProduces_CO2(\"cow\", 0).\nProduces_CO2(\"car\", 150).\n\n.decl Has_global_warming_potential(Gas:symbol, GWP:float)\nHas_global_warming_potential(\"methane\", 28).\nHas_global_warming_potential(\"CO2\", 1).\n\n.decl Total_GWP(Source:symbol, GWP:float)\nTotal_GWP(Source, GWP) :- Produces_methane(Source, Methane_emission), Produces_CO2(Source, CO2_emission), Has_global_warming_potential(\"methane\", Methane_GWP), Has_global_warming_potential(\"CO2\", CO2_GWP), GWP = Methane_emission * Methane_GWP + CO2_emission * CO2_GWP.\n\n.decl Answer()\nAnswer() :- Total_GWP(\"cow\", GWP_cow), Total_GWP(\"car\", GWP_car), GWP_cow < GWP_car.\n.output Answer"]}
{"id": 564, "answer": true, "completion": ".decl Wrote_song_about(Artist:symbol, Subject:symbol)\nWrote_song_about(\"Justin Timberlake\", \"Britney Spears\").\n.decl Answer()\nAnswer() :- Wrote_song_about(\"Justin Timberlake\", \"Britney Spears\").\n.output Answer", "completions": [".decl Wrote_song_about(Artist:symbol, Subject:symbol)\nWrote_song_about(\"Justin Timberlake\", \"Britney Spears\").\n.decl Answer()\nAnswer() :- Wrote_song_about(\"Justin Timberlake\", \"Britney Spears\").\n.output Answer"]}
{"id": 565, "answer": false, "completion": ".decl Can_chase_down(Predator:symbol, Prey:symbol)\nCan_chase_down(\"Clouded leopard\", \"Pronghorn antelope\").\n.decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"Clouded leopard\", 64).\nHas_speed(\"Pronghorn antelope\", 88).\n.decl Answer()\nAnswer() :- Can_chase_down(\"Clouded leopard\", \"Pronghorn antelope\"), Has_speed(\"Clouded leopard\", speed1), Has_speed(\"Pronghorn antelope\", speed2), speed1 >= speed2.\n.output Answer", "completions": [".decl Can_chase_down(Predator:symbol, Prey:symbol)\nCan_chase_down(\"Clouded leopard\", \"Pronghorn antelope\").\n.decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"Clouded leopard\", 64).\nHas_speed(\"Pronghorn antelope\", 88).\n.decl Answer()\nAnswer() :- Can_chase_down(\"Clouded leopard\", \"Pronghorn antelope\"), Has_speed(\"Clouded leopard\", speed1), Has_speed(\"Pronghorn antelope\", speed2), speed1 >= speed2.\n.output Answer"]}
{"id": 566, "answer": false, "completion": ".decl Is_president(Person:symbol, Number:float)\nIs_president(\"Ronald Reagan\", 40).\n.decl Forwards_lolcats(Person:symbol)\nForwards_lolcats(\"Ronald Reagan\").\n.decl Answer()\nAnswer() :- Is_president(person, 40), Forwards_lolcats(person).\n.output Answer", "completions": [".decl Is_president(Person:symbol, Number:float)\nIs_president(\"Ronald Reagan\", 40).\n.decl Forwards_lolcats(Person:symbol)\nForwards_lolcats(\"Ronald Reagan\").\n.decl Answer()\nAnswer() :- Is_president(person, 40), Forwards_lolcats(person).\n.output Answer"]}
{"id": 567, "answer": true, "completion": ".decl Requires_ID(Medication:symbol, Pharmacy:symbol)\nRequires_ID(\"prescription medication\", \"all pharmacies\").\n.decl All_medications(Medication:symbol)\nAll_medications(\"prescription medication\").\nAll_medications(\"over-the-counter medication\").\n.decl Answer()\nAnswer() :- Requires_ID(medication, \"all pharmacies\"), All_medications(medication), !All_medications(medication2), medication != medication2.\n.output Answer", "completions": [".decl Requires_ID(Medication:symbol, Pharmacy:symbol)\nRequires_ID(\"prescription medication\", \"all pharmacies\").\n.decl All_medications(Medication:symbol)\nAll_medications(\"prescription medication\").\nAll_medications(\"over-the-counter medication\").\n.decl Answer()\nAnswer() :- Requires_ID(medication, \"all pharmacies\"), All_medications(medication), !All_medications(medication2), medication != medication2.\n.output Answer"]}
{"id": 568, "answer": false, "completion": ".decl Has_naval_strength(Country:symbol, Naval_strength:float)\nHas_naval_strength(\"Republic of Korea\", 100).\nHas_naval_strength(\"Eritrea\", 10).\n.decl Answer()\nAnswer() :- Has_naval_strength(\"Republic of Korea\", strength1), Has_naval_strength(\"Eritrea\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_naval_strength(Country:symbol, Naval_strength:float)\nHas_naval_strength(\"Republic of Korea\", 100).\nHas_naval_strength(\"Eritrea\", 10).\n.decl Answer()\nAnswer() :- Has_naval_strength(\"Republic of Korea\", strength1), Has_naval_strength(\"Eritrea\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 569, "answer": true, "completion": ".decl Inspired_by(Work:symbol, Inspiration:symbol)\nInspired_by(\"The Great Gatsby\", \"Jazz Age\").\nInspired_by(\"1984\", \"Totalitarianism\").\n.decl Answer()\nAnswer() :- Inspired_by(\"The Great Gatsby\", inspiration), Inspired_by(\"1984\", inspiration).\n.output Answer", "completions": [".decl Inspired_by(Work:symbol, Inspiration:symbol)\nInspired_by(\"The Great Gatsby\", \"Jazz Age\").\nInspired_by(\"1984\", \"Totalitarianism\").\n.decl Answer()\nAnswer() :- Inspired_by(\"The Great Gatsby\", inspiration), Inspired_by(\"1984\", inspiration).\n.output Answer"]}
{"id": 570, "answer": true, "completion": ".decl Is_villain(Person:symbol, Group:symbol)\nIs_villain(\"MF Doom\", \"Fantastic Four\").\n.decl Answer()\nAnswer() :- Is_villain(\"MF Doom\", \"Fantastic Four\").\n.output Answer", "completions": [".decl Is_villain(Person:symbol, Group:symbol)\nIs_villain(\"MF Doom\", \"Fantastic Four\").\n.decl Answer()\nAnswer() :- Is_villain(\"MF Doom\", \"Fantastic Four\").\n.output Answer"]}
{"id": 571, "answer": false, "completion": ".decl Has_popularity(Name:symbol, Popularity:float)\nHas_popularity(\"Michael\", 4).\n.decl Threshold(Popularity:float)\nThreshold(100).\n.decl Answer()\nAnswer() :- Has_popularity(\"Michael\", popularity), Threshold(threshold), popularity > threshold.\n.output Answer", "completions": [".decl Has_popularity(Name:symbol, Popularity:float)\nHas_popularity(\"Michael\", 4).\n.decl Threshold(Popularity:float)\nThreshold(100).\n.decl Answer()\nAnswer() :- Has_popularity(\"Michael\", popularity), Threshold(threshold), popularity > threshold.\n.output Answer"]}
{"id": 572, "answer": false, "completion": ".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Noah's Ark\", 300, 50, 30).\nHas_dimensions(\"Lincoln Tunnel\", 8000, 21.5, 13).\n.decl Can_sail_through(Object_A:symbol, Object_B:symbol)\nCan_sail_through(\"Noah's Ark\", \"Lincoln Tunnel\") :- Has_dimensions(\"Noah's Ark\", length1, width1, height1), Has_dimensions(\"Lincoln Tunnel\", length2, width2, height2), width1 <= width2, height1 <= height2.\n.decl Answer()\nAnswer() :- Can_sail_through(\"Noah's Ark\", \"Lincoln Tunnel\").\n.output Answer", "completions": [".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Noah's Ark\", 300, 50, 30).\nHas_dimensions(\"Lincoln Tunnel\", 8000, 21.5, 13).\n.decl Can_sail_through(Object_A:symbol, Object_B:symbol)\nCan_sail_through(\"Noah's Ark\", \"Lincoln Tunnel\") :- Has_dimensions(\"Noah's Ark\", length1, width1, height1), Has_dimensions(\"Lincoln Tunnel\", length2, width2, height2), width1 <= width2, height1 <= height2.\n.decl Answer()\nAnswer() :- Can_sail_through(\"Noah's Ark\", \"Lincoln Tunnel\").\n.output Answer"]}
{"id": 573, "answer": true, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person\", \"dermatitis\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"person\", \"hand model\").\n.decl Incompatible(Condition:symbol, Profession:symbol)\nIncompatible(\"dermatitis\", \"hand model\").\n.decl Answer()\nAnswer() :- Has_condition(\"person\", condition), Is_profession(\"person\", profession), !Incompatible(condition, profession).\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person\", \"dermatitis\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"person\", \"hand model\").\n.decl Incompatible(Condition:symbol, Profession:symbol)\nIncompatible(\"dermatitis\", \"hand model\").\n.decl Answer()\nAnswer() :- Has_condition(\"person\", condition), Is_profession(\"person\", profession), !Incompatible(condition, profession).\n.output Answer"]}
{"id": 574, "answer": true, "completion": ".decl Is_pet(Species:symbol)\nIs_pet(\"dog\").\n.decl Needs_heartworm_prevention(Species:symbol)\nNeeds_heartworm_prevention(\"dog\").\n.decl Is_species(Character:symbol, Species:symbol)\nIs_species(\"Goofy\", \"dog\").\n.decl Answer()\nAnswer() :- Is_species(\"Goofy\", species), Is_pet(species), Needs_heartworm_prevention(species).\n.output Answer", "completions": [".decl Is_pet(Species:symbol)\nIs_pet(\"dog\").\n.decl Needs_heartworm_prevention(Species:symbol)\nNeeds_heartworm_prevention(\"dog\").\n.decl Is_species(Character:symbol, Species:symbol)\nIs_species(\"Goofy\", \"dog\").\n.decl Answer()\nAnswer() :- Is_species(\"Goofy\", species), Is_pet(species), Needs_heartworm_prevention(species).\n.output Answer"]}
{"id": 575, "answer": true, "completion": ".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"nickel\", 28).\nHas_atomic_number(\"mercury\", 80).\n.decl Payout(Element:symbol, Amount:float)\nPayout(element, amount) :- Has_atomic_number(element, atomic_number), amount = atomic_number.\n.decl Answer()\nAnswer() :- Payout(\"nickel\", amount1), Payout(\"mercury\", amount2), amount1 > amount2.\n.output Answer", "completions": [".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"nickel\", 28).\nHas_atomic_number(\"mercury\", 80).\n.decl Payout(Element:symbol, Amount:float)\nPayout(element, amount) :- Has_atomic_number(element, atomic_number), amount = atomic_number.\n.decl Answer()\nAnswer() :- Payout(\"nickel\", amount1), Payout(\"mercury\", amount2), amount1 > amount2.\n.output Answer"]}
{"id": 576, "answer": true, "completion": ".decl Married(Person_A:symbol, Person_B:symbol, Year_married:float)\nMarried(\"Cynthia Powell\", \"John Lennon\", 1962).\n.decl Divorced(Person_A:symbol, Person_B:symbol, Year_divorced:float)\nDivorced(\"Cynthia Powell\", \"John Lennon\", 1968).\n.decl Silver_anniversary(Person_A:symbol, Person_B:symbol)\nSilver_anniversary(Person_A, Person_B) :- Married(Person_A, Person_B, Year_married), !Divorced(Person_A, Person_B, Year_divorced), Year_married + 25 <= Year_divorced.\nSilver_anniversary(Person_A, Person_B) :- Married(Person_A, Person_B, Year_married), !Divorced(Person_A, Person_B, Year_divorced), Year_married + 25 <= 2022.\n.decl Answer()\nAnswer() :- Silver_anniversary(\"Cynthia Powell\", \"John Lennon\").\n.output Answer", "completions": [".decl Married(Person_A:symbol, Person_B:symbol, Year_married:float)\nMarried(\"Cynthia Powell\", \"John Lennon\", 1962).\n.decl Divorced(Person_A:symbol, Person_B:symbol, Year_divorced:float)\nDivorced(\"Cynthia Powell\", \"John Lennon\", 1968).\n.decl Silver_anniversary(Person_A:symbol, Person_B:symbol)\nSilver_anniversary(Person_A, Person_B) :- Married(Person_A, Person_B, Year_married), !Divorced(Person_A, Person_B, Year_divorced), Year_married + 25 <= Year_divorced.\nSilver_anniversary(Person_A, Person_B) :- Married(Person_A, Person_B, Year_married), !Divorced(Person_A, Person_B, Year_divorced), Year_married + 25 <= 2022.\n.decl Answer()\nAnswer() :- Silver_anniversary(\"Cynthia Powell\", \"John Lennon\").\n.output Answer"]}
{"id": 577, "answer": false, "completion": ".decl Is_poor(Person:symbol)\nIs_poor(\"Christopher Reeve\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Christopher Reeve\", \"spinal cord injury\").\n.decl Can_afford_treatment(Person:symbol, Condition:symbol)\nCan_afford_treatment(\"Christopher Reeve\", \"spinal cord injury\").\n.decl Lives(Person:symbol)\nLives(\"Christopher Reeve\") :- Can_afford_treatment(\"Christopher Reeve\", \"spinal cord injury\").\n.decl Answer()\nAnswer() :- Is_poor(\"Christopher Reeve\"), !Can_afford_treatment(\"Christopher Reeve\", \"spinal cord injury\"), Lives(\"Christopher Reeve\").\n.output Answer", "completions": [".decl Is_poor(Person:symbol)\nIs_poor(\"Christopher Reeve\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Christopher Reeve\", \"spinal cord injury\").\n.decl Can_afford_treatment(Person:symbol, Condition:symbol)\nCan_afford_treatment(\"Christopher Reeve\", \"spinal cord injury\").\n.decl Lives(Person:symbol)\nLives(\"Christopher Reeve\") :- Can_afford_treatment(\"Christopher Reeve\", \"spinal cord injury\").\n.decl Answer()\nAnswer() :- Is_poor(\"Christopher Reeve\"), !Can_afford_treatment(\"Christopher Reeve\", \"spinal cord injury\"), Lives(\"Christopher Reeve\").\n.output Answer"]}
{"id": 578, "answer": false, "completion": ".decl Event_related(Event_A:symbol, Event_B:symbol)\nEvent_related(\"Operation Barbarossa\", \"World War II\").\nEvent_related(\"The Crusades\", \"Medieval Period\").\n.decl Answer()\nAnswer() :- Event_related(\"Operation Barbarossa\", event1), Event_related(\"The Crusades\", event2), event1 = event2.\n.output Answer", "completions": [".decl Event_related(Event_A:symbol, Event_B:symbol)\nEvent_related(\"Operation Barbarossa\", \"World War II\").\nEvent_related(\"The Crusades\", \"Medieval Period\").\n.decl Answer()\nAnswer() :- Event_related(\"Operation Barbarossa\", event1), Event_related(\"The Crusades\", event2), event1 = event2.\n.output Answer"]}
{"id": 579, "answer": true, "completion": ".decl Profession_Requires_Skill(Profession:symbol, Skill:symbol)\nProfession_Requires_Skill(\"carpenter\", \"geometry\").\n.decl Answer()\nAnswer() :- Profession_Requires_Skill(\"carpenter\", \"geometry\").\n.output Answer", "completions": [".decl Profession_Requires_Skill(Profession:symbol, Skill:symbol)\nProfession_Requires_Skill(\"carpenter\", \"geometry\").\n.decl Answer()\nAnswer() :- Profession_Requires_Skill(\"carpenter\", \"geometry\").\n.output Answer"]}
{"id": 580, "answer": true, "completion": ".decl Has_length(Book:symbol, Length:float)\nHas_length(\"The Great Gatsby\", 180).\nHas_length(\"The Raven\", 1).\n.decl Is_speed_reader(Person:symbol)\nIs_speed_reader(\"speed reader\").\n.decl Devours_before(Person:symbol, Book_A:symbol, Book_B:symbol)\nDevours_before(person, bookA, bookB) :- Is_speed_reader(person), Has_length(bookA, lengthA), Has_length(bookB, lengthB), lengthA < lengthB.\n.decl Answer()\nAnswer() :- Devours_before(\"speed reader\", \"The Great Gatsby\", \"The Raven\").\n.output Answer", "completions": [".decl Has_length(Book:symbol, Length:float)\nHas_length(\"The Great Gatsby\", 180).\nHas_length(\"The Raven\", 1).\n.decl Is_speed_reader(Person:symbol)\nIs_speed_reader(\"speed reader\").\n.decl Devours_before(Person:symbol, Book_A:symbol, Book_B:symbol)\nDevours_before(person, bookA, bookB) :- Is_speed_reader(person), Has_length(bookA, lengthA), Has_length(bookB, lengthB), lengthA < lengthB.\n.decl Answer()\nAnswer() :- Devours_before(\"speed reader\", \"The Great Gatsby\", \"The Raven\").\n.output Answer"]}
{"id": 581, "answer": true, "completion": ".decl Has_age_rating(Movie:symbol, Age_rating:symbol)\nHas_age_rating(\"The Dark Knight\", \"PG-13\").\n.decl Is_appropriate_for_age(Age_rating:symbol, Age_group:symbol)\nIs_appropriate_for_age(\"G\", \"preschool\").\nIs_appropriate_for_age(\"PG\", \"preschool\").\n.decl Answer()\nAnswer() :- Has_age_rating(\"The Dark Knight\", age_rating), Is_appropriate_for_age(age_rating, \"preschool\").\n.output Answer", "completions": [".decl Has_age_rating(Movie:symbol, Age_rating:symbol)\nHas_age_rating(\"The Dark Knight\", \"PG-13\").\n.decl Is_appropriate_for_age(Age_rating:symbol, Age_group:symbol)\nIs_appropriate_for_age(\"G\", \"preschool\").\nIs_appropriate_for_age(\"PG\", \"preschool\").\n.decl Answer()\nAnswer() :- Has_age_rating(\"The Dark Knight\", age_rating), Is_appropriate_for_age(age_rating, \"preschool\").\n.output Answer"]}
{"id": 582, "answer": true, "completion": ".decl Uses_algebra(Computer:symbol, Algebra:symbol)\nUses_algebra(\"computer\", \"Boolean algebra\").\n.decl Answer()\nAnswer() :- Uses_algebra(\"computer\", \"Boolean algebra\").\n.output Answer", "completions": [".decl Uses_algebra(Computer:symbol, Algebra:symbol)\nUses_algebra(\"computer\", \"Boolean algebra\").\n.decl Answer()\nAnswer() :- Uses_algebra(\"computer\", \"Boolean algebra\").\n.output Answer"]}
{"id": 583, "answer": true, "completion": ".decl Is_located_in(Organ:symbol, Body_part:symbol)\nIs_located_in(\"brain\", \"head\").\nIs_located_in(\"heart\", \"torso\").\n.decl Answer()\nAnswer() :- Is_located_in(\"brain\", \"torso\").\n.output Answer", "completions": [".decl Is_located_in(Organ:symbol, Body_part:symbol)\nIs_located_in(\"brain\", \"head\").\nIs_located_in(\"heart\", \"torso\").\n.decl Answer()\nAnswer() :- Is_located_in(\"brain\", \"torso\").\n.output Answer"]}
{"id": 584, "answer": true, "completion": ".decl Part_of_celebration(Animal:symbol, Celebration:symbol)\nPart_of_celebration(\"donkey\", \"Christmas\").\n.decl Answer()\nAnswer() :- Part_of_celebration(\"donkey\", \"Christmas\").\n.output Answer", "completions": [".decl Part_of_celebration(Animal:symbol, Celebration:symbol)\nPart_of_celebration(\"donkey\", \"Christmas\").\n.decl Answer()\nAnswer() :- Part_of_celebration(\"donkey\", \"Christmas\").\n.output Answer"]}
{"id": 585, "answer": true, "completion": ".decl Caused_by(Event:symbol, Cause:symbol)\nCaused_by(\"Heath Ledger's death\", \"accidental drug overdose\").\n.decl Related_to(Event:symbol, Related_event:symbol)\nRelated_to(\"Heath Ledger's death\", \"The Dark Knight\").\n.decl Answer()\nAnswer() :- Caused_by(\"Heath Ledger's death\", \"accidental drug overdose\"), !Related_to(\"Heath Ledger's death\", \"The Dark Knight\").\n.output Answer", "completions": [".decl Caused_by(Event:symbol, Cause:symbol)\nCaused_by(\"Heath Ledger's death\", \"accidental drug overdose\").\n.decl Related_to(Event:symbol, Related_event:symbol)\nRelated_to(\"Heath Ledger's death\", \"The Dark Knight\").\n.decl Answer()\nAnswer() :- Caused_by(\"Heath Ledger's death\", \"accidental drug overdose\"), !Related_to(\"Heath Ledger's death\", \"The Dark Knight\").\n.output Answer"]}
{"id": 586, "answer": false, "completion": ".decl Lived_in_time(Animal:symbol, Time_period:symbol)\nLived_in_time(\"Polar Bears\", \"Holocene\").\n.decl Existed_in_time(Civilization:symbol, Time_period:symbol)\nExisted_in_time(\"Ancient Greece\", \"Bronze Age\").\nExisted_in_time(\"Ancient Greece\", \"Iron Age\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Polar Bears\", time_period), Existed_in_time(\"Ancient Greece\", time_period).\n.output Answer", "completions": [".decl Lived_in_time(Animal:symbol, Time_period:symbol)\nLived_in_time(\"Polar Bears\", \"Holocene\").\n.decl Existed_in_time(Civilization:symbol, Time_period:symbol)\nExisted_in_time(\"Ancient Greece\", \"Bronze Age\").\nExisted_in_time(\"Ancient Greece\", \"Iron Age\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Polar Bears\", time_period), Existed_in_time(\"Ancient Greece\", time_period).\n.output Answer"]}
{"id": 587, "answer": true, "completion": ".decl Has_completion_year(Object:symbol, Year:float)\nHas_completion_year(\"World Trade Center\", 1973).\nHas_completion_year(\"Moon Jae-in's residence\", 2008).\n.decl Answer()\nAnswer() :- Has_completion_year(\"Moon Jae-in's residence\", year1), Has_completion_year(\"World Trade Center\", year2), year1 <= year2.\n.output Answer", "completions": [".decl Has_completion_year(Object:symbol, Year:float)\nHas_completion_year(\"World Trade Center\", 1973).\nHas_completion_year(\"Moon Jae-in's residence\", 2008).\n.decl Answer()\nAnswer() :- Has_completion_year(\"Moon Jae-in's residence\", year1), Has_completion_year(\"World Trade Center\", year2), year1 <= year2.\n.output Answer"]}
{"id": 588, "answer": true, "completion": ".decl Exists_in_vacuum(Object:symbol)\nExists_in_vacuum(\"paratroopers\").\n.decl Can_be_used_in_vacuum(Object:symbol)\nCan_be_used_in_vacuum(\"paratroopers\") :- Exists_in_vacuum(\"paratroopers\").\n.decl Answer()\nAnswer() :- Can_be_used_in_vacuum(\"paratroopers\").\n.output Answer", "completions": [".decl Exists_in_vacuum(Object:symbol)\nExists_in_vacuum(\"paratroopers\").\n.decl Can_be_used_in_vacuum(Object:symbol)\nCan_be_used_in_vacuum(\"paratroopers\") :- Exists_in_vacuum(\"paratroopers\").\n.decl Answer()\nAnswer() :- Can_be_used_in_vacuum(\"paratroopers\").\n.output Answer"]}
{"id": 589, "answer": false, "completion": ".decl Has_seats(Court:symbol, N_seats:float)\nHas_seats(\"highest US Court\", 9).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"UK Prime Ministers since 1952\", 15).\n.decl Answer()\nAnswer() :- Has_seats(\"highest US Court\", n_seats), Has_n_members(\"UK Prime Ministers since 1952\", n_members), n_seats >= n_members.\n.output Answer", "completions": [".decl Has_seats(Court:symbol, N_seats:float)\nHas_seats(\"highest US Court\", 9).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"UK Prime Ministers since 1952\", 15).\n.decl Answer()\nAnswer() :- Has_seats(\"highest US Court\", n_seats), Has_n_members(\"UK Prime Ministers since 1952\", n_members), n_seats >= n_members.\n.output Answer"]}
{"id": 590, "answer": true, "completion": ".decl Is_leader(Person:symbol, Group:symbol)\nIs_leader(\"Marshall Applewhite\", \"Heaven's Gate\").\n.decl Considers_self(Subject:symbol, Role:symbol)\nConsiders_self(\"Marshall Applewhite\", \"prophet\").\n.decl Answer()\nAnswer() :- Is_leader(person, \"Heaven's Gate\"), Considers_self(person, \"prophet\").\n.output Answer", "completions": [".decl Is_leader(Person:symbol, Group:symbol)\nIs_leader(\"Marshall Applewhite\", \"Heaven's Gate\").\n.decl Considers_self(Subject:symbol, Role:symbol)\nConsiders_self(\"Marshall Applewhite\", \"prophet\").\n.decl Answer()\nAnswer() :- Is_leader(person, \"Heaven's Gate\"), Considers_self(person, \"prophet\").\n.output Answer"]}
{"id": 591, "answer": true, "completion": ".decl Participated_in_war(Region:symbol, War:symbol)\nParticipated_in_war(\"Angola\", \"Portuguese Colonial War\").\nParticipated_in_war(\"Guinea-Bissau\", \"Portuguese Colonial War\").\nParticipated_in_war(\"Mozambique\", \"Portuguese Colonial War\").\n\n.decl Has_official_language(Region:symbol, Language:symbol)\nHas_official_language(\"Angola\", \"Portuguese\").\nHas_official_language(\"Guinea-Bissau\", \"Portuguese\").\nHas_official_language(\"Mozambique\", \"Portuguese\").\n\n.decl Shares_official_language(Region_A:symbol, Region_B:symbol)\nShares_official_language(regionA, regionB) :- Has_official_language(regionA, language), Has_official_language(regionB, language), regionA != regionB.\n\n.decl Answer()\nAnswer() :- Participated_in_war(regionA, \"Portuguese Colonial War\"), Participated_in_war(regionB, \"Portuguese Colonial War\"), Shares_official_language(regionA, regionB), regionA != regionB.\n.output Answer", "completions": [".decl Participated_in_war(Region:symbol, War:symbol)\nParticipated_in_war(\"Angola\", \"Portuguese Colonial War\").\nParticipated_in_war(\"Guinea-Bissau\", \"Portuguese Colonial War\").\nParticipated_in_war(\"Mozambique\", \"Portuguese Colonial War\").\n\n.decl Has_official_language(Region:symbol, Language:symbol)\nHas_official_language(\"Angola\", \"Portuguese\").\nHas_official_language(\"Guinea-Bissau\", \"Portuguese\").\nHas_official_language(\"Mozambique\", \"Portuguese\").\n\n.decl Shares_official_language(Region_A:symbol, Region_B:symbol)\nShares_official_language(regionA, regionB) :- Has_official_language(regionA, language), Has_official_language(regionB, language), regionA != regionB.\n\n.decl Answer()\nAnswer() :- Participated_in_war(regionA, \"Portuguese Colonial War\"), Participated_in_war(regionB, \"Portuguese Colonial War\"), Shares_official_language(regionA, regionB), regionA != regionB.\n.output Answer"]}
{"id": 592, "answer": true, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"railroad engineer\", \"engineering\").\n.decl Appears_on_channel(Person:symbol, Channel:symbol)\nAppears_on_channel(\"railroad engineer\", \"TNT\").\n.decl Answer()\nAnswer() :- Has_profession(\"railroad engineer\", \"engineering\"), Appears_on_channel(\"railroad engineer\", \"TNT\").\n.output Answer", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"railroad engineer\", \"engineering\").\n.decl Appears_on_channel(Person:symbol, Channel:symbol)\nAppears_on_channel(\"railroad engineer\", \"TNT\").\n.decl Answer()\nAnswer() :- Has_profession(\"railroad engineer\", \"engineering\"), Appears_on_channel(\"railroad engineer\", \"TNT\").\n.output Answer"]}
{"id": 593, "answer": true, "completion": ".decl Is_part_of(Organization:symbol, Department:symbol)\nIs_part_of(\"CIA\", \"Department of Defense\").\n.decl Answer()\nAnswer() :- Is_part_of(\"CIA\", \"Department of Defense\").\n.output Answer", "completions": [".decl Is_part_of(Organization:symbol, Department:symbol)\nIs_part_of(\"CIA\", \"Department of Defense\").\n.decl Answer()\nAnswer() :- Is_part_of(\"CIA\", \"Department of Defense\").\n.output Answer"]}
{"id": 594, "answer": false, "completion": ".decl Has_humps(Animal:symbol, Humps:float)\nHas_humps(\"Bactrian Camel\", 2).\nHas_humps(\"Dromedary Camel\", 1).\n.decl Answer()\nAnswer() :- Has_humps(\"Bactrian Camel\", humps1), !Has_humps(animal, humps2), humps2 > humps1.\n.output Answer", "completions": [".decl Has_humps(Animal:symbol, Humps:float)\nHas_humps(\"Bactrian Camel\", 2).\nHas_humps(\"Dromedary Camel\", 1).\n.decl Answer()\nAnswer() :- Has_humps(\"Bactrian Camel\", humps1), !Has_humps(animal, humps2), humps2 > humps1.\n.output Answer"]}
{"id": 595, "answer": false, "completion": ".decl Worries_about(Animal:symbol, Event:symbol)\n.decl Is_event(Event:symbol, Country:symbol)\nIs_event(\"Abitur\", \"Germany\").\n.decl Is_animal(Animal:symbol, Species:symbol)\nIs_animal(\"German Shepherd\", \"dog\").\n.decl Answer()\nAnswer() :- Worries_about(animal, \"Abitur\"), Is_animal(animal, \"dog\"), Is_event(\"Abitur\", \"Germany\").\n.output Answer", "completions": [".decl Worries_about(Animal:symbol, Event:symbol)\n.decl Is_event(Event:symbol, Country:symbol)\nIs_event(\"Abitur\", \"Germany\").\n.decl Is_animal(Animal:symbol, Species:symbol)\nIs_animal(\"German Shepherd\", \"dog\").\n.decl Answer()\nAnswer() :- Worries_about(animal, \"Abitur\"), Is_animal(animal, \"dog\"), Is_event(\"Abitur\", \"Germany\").\n.output Answer"]}
{"id": 596, "answer": true, "completion": ".decl Is_enlisted(Person:symbol, Army:symbol)\n.decl Is_American(Person:symbol)\n.decl Is_Confederate_Army(Army:symbol)\nIs_Confederate_Army(\"Confederate States Army\").\n.decl Answer()\nAnswer() :- Is_enlisted(person, \"Confederate States Army\"), Is_American(person), !Is_Confederate_Army(\"Confederate States Army\").\n.output Answer", "completions": [".decl Is_enlisted(Person:symbol, Army:symbol)\n.decl Is_American(Person:symbol)\n.decl Is_Confederate_Army(Army:symbol)\nIs_Confederate_Army(\"Confederate States Army\").\n.decl Answer()\nAnswer() :- Is_enlisted(person, \"Confederate States Army\"), Is_American(person), !Is_Confederate_Army(\"Confederate States Army\").\n.output Answer"]}
{"id": 597, "answer": false, "completion": ".decl Has_format(Series:symbol, Format:symbol)\nHas_format(\"James Bond\", \"film series\").\nHas_format(\"Doctor Who\", \"television series\").\n.decl Answer()\nAnswer() :- Has_format(\"James Bond\", format1), Has_format(\"Doctor Who\", format2), format1 = format2.\n.output Answer", "completions": [".decl Has_format(Series:symbol, Format:symbol)\nHas_format(\"James Bond\", \"film series\").\nHas_format(\"Doctor Who\", \"television series\").\n.decl Answer()\nAnswer() :- Has_format(\"James Bond\", format1), Has_format(\"Doctor Who\", format2), format1 = format2.\n.output Answer"]}
{"id": 598, "answer": true, "completion": ".decl Made_more_popular(Technology:symbol, Activity:symbol)\nMade_more_popular(\"compact discs\", \"computer gaming\").\n.decl Answer()\nAnswer() :- Made_more_popular(\"compact discs\", \"computer gaming\").\n.output Answer", "completions": [".decl Made_more_popular(Technology:symbol, Activity:symbol)\nMade_more_popular(\"compact discs\", \"computer gaming\").\n.decl Answer()\nAnswer() :- Made_more_popular(\"compact discs\", \"computer gaming\").\n.output Answer"]}
{"id": 599, "answer": true, "completion": ".decl Native_to(Object:symbol, Continent:symbol)\nNative_to(\"potatoes\", \"South America\").\n.decl Answer()\nAnswer() :- Native_to(\"potatoes\", \"Europe\").\n.output Answer", "completions": [".decl Native_to(Object:symbol, Continent:symbol)\nNative_to(\"potatoes\", \"South America\").\n.decl Answer()\nAnswer() :- Native_to(\"potatoes\", \"Europe\").\n.output Answer"]}
{"id": 600, "answer": true, "completion": ".decl Has_bacteria(Food:symbol, Bacteria:symbol)\nHas_bacteria(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Has_bacteria(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.output Answer", "completions": [".decl Has_bacteria(Food:symbol, Bacteria:symbol)\nHas_bacteria(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Has_bacteria(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.output Answer"]}
{"id": 601, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"George Washington\", 1732).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"compact disc\", 1982).\n.decl Answer()\nAnswer() :- Born_in_year(\"George Washington\", birth_year), Invented_in_year(\"compact disc\", invention_year), birth_year < invention_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"George Washington\", 1732).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"compact disc\", 1982).\n.decl Answer()\nAnswer() :- Born_in_year(\"George Washington\", birth_year), Invented_in_year(\"compact disc\", invention_year), birth_year < invention_year.\n.output Answer"]}
{"id": 602, "answer": true, "completion": ".decl Is_innocuous(Object:symbol)\nIs_innocuous(\"shoe soup\").\n.decl Answer()\nAnswer() :- Is_innocuous(\"shoe soup\").\n.output Answer", "completions": [".decl Is_innocuous(Object:symbol)\nIs_innocuous(\"shoe soup\").\n.decl Answer()\nAnswer() :- Is_innocuous(\"shoe soup\").\n.output Answer"]}
{"id": 603, "answer": true, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Moscow Kremlin\", 27.7).\nHas_area(\"Disney Land\", 85).\n.decl Answer()\nAnswer() :- Has_area(\"Moscow Kremlin\", area1), Has_area(\"Disney Land\", area2), area1 <= area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Moscow Kremlin\", 27.7).\nHas_area(\"Disney Land\", 85).\n.decl Answer()\nAnswer() :- Has_area(\"Moscow Kremlin\", area1), Has_area(\"Disney Land\", area2), area1 <= area2.\n.output Answer"]}
{"id": 604, "answer": false, "completion": ".decl Performed_with(Person_A:symbol, Person_B:symbol)\nPerformed_with(\"Robert Plant\", \"Ernest Chataway\").\nPerformed_with(\"Ernest Chataway\", \"Robert Plant\").\n.decl Is_lead_singer(Person:symbol, Band:symbol)\nIs_lead_singer(\"Robert Plant\", \"Led Zeppelin\").\n.decl Answer()\nAnswer() :- Is_lead_singer(person, \"Led Zeppelin\"), Performed_with(person, \"Ernest Chataway\").\n.output Answer", "completions": [".decl Performed_with(Person_A:symbol, Person_B:symbol)\nPerformed_with(\"Robert Plant\", \"Ernest Chataway\").\nPerformed_with(\"Ernest Chataway\", \"Robert Plant\").\n.decl Is_lead_singer(Person:symbol, Band:symbol)\nIs_lead_singer(\"Robert Plant\", \"Led Zeppelin\").\n.decl Answer()\nAnswer() :- Is_lead_singer(person, \"Led Zeppelin\"), Performed_with(person, \"Ernest Chataway\").\n.output Answer"]}
{"id": 605, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"P. G. Wodehouse\", 1881).\n.decl Invented_in_year(Invention:symbol, Invention_year:float)\nInvented_in_year(\"internet\", 1983).\n.decl Liked_as_child(Person:symbol, Object:symbol)\n.decl Answer()\nAnswer() :- Born_in_year(\"P. G. Wodehouse\", birth_year), Invented_in_year(\"internet\", invention_year), birth_year < invention_year, !Liked_as_child(\"P. G. Wodehouse\", \"internet\").\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"P. G. Wodehouse\", 1881).\n.decl Invented_in_year(Invention:symbol, Invention_year:float)\nInvented_in_year(\"internet\", 1983).\n.decl Liked_as_child(Person:symbol, Object:symbol)\n.decl Answer()\nAnswer() :- Born_in_year(\"P. G. Wodehouse\", birth_year), Invented_in_year(\"internet\", invention_year), birth_year < invention_year, !Liked_as_child(\"P. G. Wodehouse\", \"internet\").\n.output Answer"]}
{"id": 606, "answer": false, "completion": ".decl Ran_for_governor(Person:symbol)\nRan_for_governor(\"Jerry Brown\").\nRan_for_governor(\"Ronald Reagan\").\n.decl Answer()\nAnswer() :- Ran_for_governor(\"Harvey Milk\").\n.output Answer", "completions": [".decl Ran_for_governor(Person:symbol)\nRan_for_governor(\"Jerry Brown\").\nRan_for_governor(\"Ronald Reagan\").\n.decl Answer()\nAnswer() :- Ran_for_governor(\"Harvey Milk\").\n.output Answer"]}
{"id": 607, "answer": true, "completion": ".decl Is_vegan_friendly(Material:symbol)\nIs_vegan_friendly(\"natural\").\nIs_vegan_friendly(\"synthetic\").\n.decl Bongo_drum(Material:symbol)\nBongo_drum(\"natural\").\nBongo_drum(\"synthetic\").\n.decl Answer()\nAnswer() :- Is_vegan_friendly(material), Bongo_drum(material), material = \"natural\".\n.output Answer", "completions": [".decl Is_vegan_friendly(Material:symbol)\nIs_vegan_friendly(\"natural\").\nIs_vegan_friendly(\"synthetic\").\n.decl Bongo_drum(Material:symbol)\nBongo_drum(\"natural\").\nBongo_drum(\"synthetic\").\n.decl Answer()\nAnswer() :- Is_vegan_friendly(material), Bongo_drum(material), material = \"natural\".\n.output Answer"]}
{"id": 608, "answer": true, "completion": ".decl Is_responsible_bartender(Bartender:symbol)\nIs_responsible_bartender(\"responsible bartender\").\n\n.decl Is_underage(Person:symbol)\nIs_underage(\"Millie Bobby Brown\").\n\n.decl Makes_drink_for(Bartender:symbol, Person:symbol)\n.decl Answer()\n\nAnswer() :- Is_responsible_bartender(bartender), Is_underage(person), !Makes_drink_for(bartender, person).\n.output Answer", "completions": [".decl Is_responsible_bartender(Bartender:symbol)\nIs_responsible_bartender(\"responsible bartender\").\n\n.decl Is_underage(Person:symbol)\nIs_underage(\"Millie Bobby Brown\").\n\n.decl Makes_drink_for(Bartender:symbol, Person:symbol)\n.decl Answer()\n\nAnswer() :- Is_responsible_bartender(bartender), Is_underage(person), !Makes_drink_for(bartender, person).\n.output Answer"]}
{"id": 609, "answer": false, "completion": ".decl Is_related(Species_A:symbol, Species_B:symbol)\nIs_related(\"gorilla\", \"human\").\nIs_related(\"human\", \"gorilla\").\n.decl Answer()\nAnswer() :- Is_related(\"gorilla\", \"human\").\n.output Answer", "completions": [".decl Is_related(Species_A:symbol, Species_B:symbol)\nIs_related(\"gorilla\", \"human\").\nIs_related(\"human\", \"gorilla\").\n.decl Answer()\nAnswer() :- Is_related(\"gorilla\", \"human\").\n.output Answer"]}
{"id": 610, "answer": true, "completion": ".decl Has_profits(Entity:symbol, Book:symbol, Profits:float)\nHas_profits(\"Disney\", \"The Jungle Book\", 0.8).\nHas_profits(\"Rudyard Kipling\", \"The Jungle Book\", 0.2).\n.decl Answer()\nAnswer() :- Has_profits(\"Disney\", \"The Jungle Book\", profits1), Has_profits(\"Rudyard Kipling\", \"The Jungle Book\", profits2), profits1 > profits2.\n.output Answer", "completions": [".decl Has_profits(Entity:symbol, Book:symbol, Profits:float)\nHas_profits(\"Disney\", \"The Jungle Book\", 0.8).\nHas_profits(\"Rudyard Kipling\", \"The Jungle Book\", 0.2).\n.decl Answer()\nAnswer() :- Has_profits(\"Disney\", \"The Jungle Book\", profits1), Has_profits(\"Rudyard Kipling\", \"The Jungle Book\", profits2), profits1 > profits2.\n.output Answer"]}
{"id": 611, "answer": false, "completion": ".decl Believed_in(Scientist:symbol, Theory:symbol)\nBelieved_in(\"Lamarck\", \"inheritance of acquired characteristics\").\nBelieved_in(\"Darwin\", \"natural selection\").\n.decl Answer()\nAnswer() :- Believed_in(\"Lamarck\", theory1), Believed_in(\"Darwin\", theory2), theory1 = theory2.\n.output Answer", "completions": [".decl Believed_in(Scientist:symbol, Theory:symbol)\nBelieved_in(\"Lamarck\", \"inheritance of acquired characteristics\").\nBelieved_in(\"Darwin\", \"natural selection\").\n.decl Answer()\nAnswer() :- Believed_in(\"Lamarck\", theory1), Believed_in(\"Darwin\", theory2), theory1 = theory2.\n.output Answer"]}
{"id": 612, "answer": true, "completion": ".decl Incapable_of_reproduction(Person:symbol)\nIncapable_of_reproduction(\"person1\").\nIncapable_of_reproduction(\"person2\").\n.decl Incapable_of_parenthood(Person:symbol)\nIncapable_of_parenthood(\"person1\").\n.decl Answer()\nAnswer() :- Incapable_of_reproduction(person), !Incapable_of_parenthood(person).\nAnswer() :- !Incapable_of_reproduction(person), Incapable_of_parenthood(person).\n.output Answer", "completions": [".decl Incapable_of_reproduction(Person:symbol)\nIncapable_of_reproduction(\"person1\").\nIncapable_of_reproduction(\"person2\").\n.decl Incapable_of_parenthood(Person:symbol)\nIncapable_of_parenthood(\"person1\").\n.decl Answer()\nAnswer() :- Incapable_of_reproduction(person), !Incapable_of_parenthood(person).\nAnswer() :- !Incapable_of_reproduction(person), Incapable_of_parenthood(person).\n.output Answer"]}
{"id": 613, "answer": false, "completion": ".decl Has_pain_tolerance(Person:symbol, Tolerance:float)\nHas_pain_tolerance(\"guitarist\", 1.5).\nHas_pain_tolerance(\"average person\", 1).\n.decl Answer()\nAnswer() :- Has_pain_tolerance(\"guitarist\", tolerance1), Has_pain_tolerance(\"average person\", tolerance2), tolerance1 > tolerance2.\n.output Answer", "completions": [".decl Has_pain_tolerance(Person:symbol, Tolerance:float)\nHas_pain_tolerance(\"guitarist\", 1.5).\nHas_pain_tolerance(\"average person\", 1).\n.decl Answer()\nAnswer() :- Has_pain_tolerance(\"guitarist\", tolerance1), Has_pain_tolerance(\"average person\", tolerance2), tolerance1 > tolerance2.\n.output Answer"]}
{"id": 614, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Methuselah\", -3074).\n.decl Lived_n_years(Person:symbol, N_years:float)\nLived_n_years(\"Methuselah\", 969).\n.decl In_common_era(Year:float)\nIn_common_era(year) :- year >= 1.\n.decl Answer()\nAnswer() :- Born_in_year(\"Methuselah\", birth_year), Lived_n_years(\"Methuselah\", n_years), death_year = birth_year + n_years, !In_common_era(death_year).\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Methuselah\", -3074).\n.decl Lived_n_years(Person:symbol, N_years:float)\nLived_n_years(\"Methuselah\", 969).\n.decl In_common_era(Year:float)\nIn_common_era(year) :- year >= 1.\n.decl Answer()\nAnswer() :- Born_in_year(\"Methuselah\", birth_year), Lived_n_years(\"Methuselah\", n_years), death_year = birth_year + n_years, !In_common_era(death_year).\n.output Answer"]}
{"id": 615, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"person\", 900000).\n.decl Exchange_rate(Currency1:symbol, Currency2:symbol, Rate:float, Month:symbol)\nExchange_rate(\"pound\", \"USD\", 1.25, \"June 2020\").\n.decl Is_billionaire(Person:symbol, Currency:symbol)\nIs_billionaire(person, \"USD\") :- Has_net_worth(person, net_worth_pound), Exchange_rate(\"pound\", \"USD\", rate, \"June 2020\"), net_worth_usd = net_worth_pound * rate, net_worth_usd >= 1000000000.\n.decl Answer()\nAnswer() :- Is_billionaire(\"person\", \"USD\").\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"person\", 900000).\n.decl Exchange_rate(Currency1:symbol, Currency2:symbol, Rate:float, Month:symbol)\nExchange_rate(\"pound\", \"USD\", 1.25, \"June 2020\").\n.decl Is_billionaire(Person:symbol, Currency:symbol)\nIs_billionaire(person, \"USD\") :- Has_net_worth(person, net_worth_pound), Exchange_rate(\"pound\", \"USD\", rate, \"June 2020\"), net_worth_usd = net_worth_pound * rate, net_worth_usd >= 1000000000.\n.decl Answer()\nAnswer() :- Is_billionaire(\"person\", \"USD\").\n.output Answer"]}
{"id": 616, "answer": true, "completion": ".decl Is_fan_of(Person:symbol, Artist:symbol)\nIs_fan_of(\"fans\", \"Jonathan Larson\").\n.decl Aware_of_HIV(Person:symbol)\nAware_of_HIV(\"Jonathan Larson\").\n.decl Artist_talks_about(Artist:symbol, Topic:symbol)\nArtist_talks_about(\"Jonathan Larson\", \"HIV\").\n.decl Answer()\nAnswer() :- Is_fan_of(person, \"Jonathan Larson\"), !Aware_of_HIV(person).\nAnswer() :- Is_fan_of(person, \"Jonathan Larson\"), Artist_talks_about(\"Jonathan Larson\", \"HIV\"), Aware_of_HIV(person).\n.output Answer", "completions": [".decl Is_fan_of(Person:symbol, Artist:symbol)\nIs_fan_of(\"fans\", \"Jonathan Larson\").\n.decl Aware_of_HIV(Person:symbol)\nAware_of_HIV(\"Jonathan Larson\").\n.decl Artist_talks_about(Artist:symbol, Topic:symbol)\nArtist_talks_about(\"Jonathan Larson\", \"HIV\").\n.decl Answer()\nAnswer() :- Is_fan_of(person, \"Jonathan Larson\"), !Aware_of_HIV(person).\nAnswer() :- Is_fan_of(person, \"Jonathan Larson\"), Artist_talks_about(\"Jonathan Larson\", \"HIV\"), Aware_of_HIV(person).\n.output Answer"]}
{"id": 617, "answer": true, "completion": ".decl Named_from_mythology(Month:symbol)\nNamed_from_mythology(\"June\").\n\n.decl Answer()\nAnswer() :- Named_from_mythology(\"June\").\n.output Answer", "completions": [".decl Named_from_mythology(Month:symbol)\nNamed_from_mythology(\"June\").\n\n.decl Answer()\nAnswer() :- Named_from_mythology(\"June\").\n.output Answer"]}
{"id": 618, "answer": true, "completion": ".decl Has_looks(Plant:symbol, Looks:symbol)\nHas_looks(\"rosemary\", \"needle-like leaves\").\nHas_looks(\"lavender\", \"spike-like flowers\").\n.decl Has_smell(Plant:symbol, Smell:symbol)\nHas_smell(\"rosemary\", \"piney\").\nHas_smell(\"lavender\", \"sweet\").\n.decl Has_taste(Plant:symbol, Taste:symbol)\nHas_taste(\"rosemary\", \"savory\").\nHas_taste(\"lavender\", \"floral\").\n.decl Answer()\nAnswer() :- Has_looks(\"rosemary\", looks1), Has_looks(\"lavender\", looks2), looks1 != looks2, !((Has_smell(\"rosemary\", smell1), Has_smell(\"lavender\", smell2), smell1 != smell2) ; (Has_taste(\"rosemary\", taste1), Has_taste(\"lavender\", taste2), taste1 != taste2)).\n.output Answer", "completions": [".decl Has_looks(Plant:symbol, Looks:symbol)\nHas_looks(\"rosemary\", \"needle-like leaves\").\nHas_looks(\"lavender\", \"spike-like flowers\").\n.decl Has_smell(Plant:symbol, Smell:symbol)\nHas_smell(\"rosemary\", \"piney\").\nHas_smell(\"lavender\", \"sweet\").\n.decl Has_taste(Plant:symbol, Taste:symbol)\nHas_taste(\"rosemary\", \"savory\").\nHas_taste(\"lavender\", \"floral\").\n.decl Answer()\nAnswer() :- Has_looks(\"rosemary\", looks1), Has_looks(\"lavender\", looks2), looks1 != looks2, !((Has_smell(\"rosemary\", smell1), Has_smell(\"lavender\", smell2), smell1 != smell2) ; (Has_taste(\"rosemary\", taste1), Has_taste(\"lavender\", taste2), taste1 != taste2)).\n.output Answer"]}
{"id": 619, "answer": true, "completion": ".decl Needs_different_colored_pens(Game:symbol, Answer:symbol)\nNeeds_different_colored_pens(\"sudoku\", \"no\").\n.decl Answer(Answer:symbol)\nAnswer(answer) :- Needs_different_colored_pens(\"sudoku\", answer).\n.output Answer", "completions": [".decl Needs_different_colored_pens(Game:symbol, Answer:symbol)\nNeeds_different_colored_pens(\"sudoku\", \"no\").\n.decl Answer(Answer:symbol)\nAnswer(answer) :- Needs_different_colored_pens(\"sudoku\", answer).\n.output Answer"]}
{"id": 620, "answer": true, "completion": ".decl Is_city_on_coast(City:symbol, Coast:symbol)\nIs_city_on_coast(\"Miami\", \"East Coast\").\nIs_city_on_coast(\"Los Angeles\", \"West Coast\").\nIs_city_on_coast(\"San Francisco\", \"West Coast\").\nIs_city_on_coast(\"Seattle\", \"West Coast\").\n.decl Answer()\nAnswer() :- Is_city_on_coast(\"Miami\", \"West Coast\").\n.output Answer", "completions": [".decl Is_city_on_coast(City:symbol, Coast:symbol)\nIs_city_on_coast(\"Miami\", \"East Coast\").\nIs_city_on_coast(\"Los Angeles\", \"West Coast\").\nIs_city_on_coast(\"San Francisco\", \"West Coast\").\nIs_city_on_coast(\"Seattle\", \"West Coast\").\n.decl Answer()\nAnswer() :- Is_city_on_coast(\"Miami\", \"West Coast\").\n.output Answer"]}
{"id": 621, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Stephen King\", 74).\n.decl Has_requirement(Requirement:symbol, Min_age:float, Max_age:float)\nHas_requirement(\"NASA Astronaut Corps\", 18, 65).\n.decl Answer()\nAnswer() :- Has_age(\"Stephen King\", age), Has_requirement(\"NASA Astronaut Corps\", min_age, max_age), age >= min_age, age <= max_age.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Stephen King\", 74).\n.decl Has_requirement(Requirement:symbol, Min_age:float, Max_age:float)\nHas_requirement(\"NASA Astronaut Corps\", 18, 65).\n.decl Answer()\nAnswer() :- Has_age(\"Stephen King\", age), Has_requirement(\"NASA Astronaut Corps\", min_age, max_age), age >= min_age, age <= max_age.\n.output Answer"]}
{"id": 622, "answer": false, "completion": ".decl Person(Name:symbol, Father:symbol, Age:float)\nPerson(\"Richard III\", \"Richard Plantagenet\", 32).\nPerson(\"Richard Plantagenet\", \"\", 55).\n.decl Answer()\nAnswer() :- Person(\"Richard III\", father, age1), Person(father, _, age2), age2 > age1.\n.output Answer", "completions": [".decl Person(Name:symbol, Father:symbol, Age:float)\nPerson(\"Richard III\", \"Richard Plantagenet\", 32).\nPerson(\"Richard Plantagenet\", \"\", 55).\n.decl Answer()\nAnswer() :- Person(\"Richard III\", father, age1), Person(father, _, age2), age2 > age1.\n.output Answer"]}
{"id": 623, "answer": true, "completion": ".decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"Starbucks passion tea\", \"hibiscus\").\nHas_ingredient(\"Starbucks passion tea\", \"lemongrass\").\nHas_ingredient(\"Starbucks passion tea\", \"apple\").\nHas_ingredient(\"Starbucks passion tea\", \"rose hips\").\nHas_ingredient(\"Starbucks passion tea\", \"licorice root\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Starbucks passion tea\", \"ginger\").\n.output Answer", "completions": [".decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"Starbucks passion tea\", \"hibiscus\").\nHas_ingredient(\"Starbucks passion tea\", \"lemongrass\").\nHas_ingredient(\"Starbucks passion tea\", \"apple\").\nHas_ingredient(\"Starbucks passion tea\", \"rose hips\").\nHas_ingredient(\"Starbucks passion tea\", \"licorice root\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Starbucks passion tea\", \"ginger\").\n.output Answer"]}
{"id": 624, "answer": true, "completion": ".decl Is_member(Person:symbol, Group:symbol)\nIs_member(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.decl Answer()\nAnswer() :- Is_member(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.output Answer", "completions": [".decl Is_member(Person:symbol, Group:symbol)\nIs_member(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.decl Answer()\nAnswer() :- Is_member(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.output Answer"]}
{"id": 625, "answer": true, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"1936 Summer Olympics venue\", 110000).\nHas_capacity(\"Superbowl\", 70000).\n.decl Answer()\nAnswer() :- Has_capacity(\"1936 Summer Olympics venue\", capacity1), Has_capacity(\"Superbowl\", capacity2), capacity1 >= capacity2.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"1936 Summer Olympics venue\", 110000).\nHas_capacity(\"Superbowl\", 70000).\n.decl Answer()\nAnswer() :- Has_capacity(\"1936 Summer Olympics venue\", capacity1), Has_capacity(\"Superbowl\", capacity2), capacity1 >= capacity2.\n.output Answer"]}
{"id": 626, "answer": true, "completion": ".decl Likes(Character:symbol, Food:symbol)\nLikes(\"Cookie Monster\", \"cookies\").\n.decl Is_brand_of(Brand:symbol, Product:symbol)\nIs_brand_of(\"Keebler\", \"cookies\").\n.decl Offered_free(Product:symbol)\nOffered_free(\"Keebler products\").\n.decl Answer()\nAnswer() :- Likes(\"Cookie Monster\", food), Is_brand_of(\"Keebler\", food), Offered_free(\"Keebler products\").\n.output Answer", "completions": [".decl Likes(Character:symbol, Food:symbol)\nLikes(\"Cookie Monster\", \"cookies\").\n.decl Is_brand_of(Brand:symbol, Product:symbol)\nIs_brand_of(\"Keebler\", \"cookies\").\n.decl Offered_free(Product:symbol)\nOffered_free(\"Keebler products\").\n.decl Answer()\nAnswer() :- Likes(\"Cookie Monster\", food), Is_brand_of(\"Keebler\", food), Offered_free(\"Keebler products\").\n.output Answer"]}
{"id": 627, "answer": true, "completion": ".decl Supports(Person:symbol, Belief:symbol)\nSupports(\"Billy Graham\", \"Christianity\").\n.decl Is_opposite(Belief_A:symbol, Belief_B:symbol)\nIs_opposite(\"Christianity\", \"agnosticism\").\n.decl Answer()\nAnswer() :- Supports(\"Billy Graham\", \"agnosticism\").\nAnswer() :- Supports(\"Billy Graham\", belief1), Is_opposite(belief1, \"agnosticism\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Belief:symbol)\nSupports(\"Billy Graham\", \"Christianity\").\n.decl Is_opposite(Belief_A:symbol, Belief_B:symbol)\nIs_opposite(\"Christianity\", \"agnosticism\").\n.decl Answer()\nAnswer() :- Supports(\"Billy Graham\", \"agnosticism\").\nAnswer() :- Supports(\"Billy Graham\", belief1), Is_opposite(belief1, \"agnosticism\").\n.output Answer"]}
{"id": 628, "answer": false, "completion": ".decl Has_fine_motor_control_issues(Person:symbol)\nHas_fine_motor_control_issues(\"someone\").\n\n.decl Altered_keyboard_layout(Layout:symbol)\nAltered_keyboard_layout(\"Dvorak\").\nAltered_keyboard_layout(\"Colemak\").\n\n.decl Can_benefit(Person:symbol, Solution:symbol)\nCan_benefit(\"someone\", \"altered keyboard layout\").\n\n.decl Answer()\nAnswer() :- Has_fine_motor_control_issues(person), Altered_keyboard_layout(layout), Can_benefit(person, \"altered keyboard layout\").\n.output Answer", "completions": [".decl Has_fine_motor_control_issues(Person:symbol)\nHas_fine_motor_control_issues(\"someone\").\n\n.decl Altered_keyboard_layout(Layout:symbol)\nAltered_keyboard_layout(\"Dvorak\").\nAltered_keyboard_layout(\"Colemak\").\n\n.decl Can_benefit(Person:symbol, Solution:symbol)\nCan_benefit(\"someone\", \"altered keyboard layout\").\n\n.decl Answer()\nAnswer() :- Has_fine_motor_control_issues(person), Altered_keyboard_layout(layout), Can_benefit(person, \"altered keyboard layout\").\n.output Answer"]}
{"id": 629, "answer": false, "completion": ".decl In_season(Month:symbol, Hemisphere:symbol, Season:symbol)\nIn_season(\"August\", \"Northern Hemisphere\", \"summer\").\nIn_season(\"August\", \"Southern Hemisphere\", \"winter\").\n.decl Answer()\nAnswer() :- In_season(\"August\", hemisphere, \"winter\").\n.output Answer", "completions": [".decl In_season(Month:symbol, Hemisphere:symbol, Season:symbol)\nIn_season(\"August\", \"Northern Hemisphere\", \"summer\").\nIn_season(\"August\", \"Southern Hemisphere\", \"winter\").\n.decl Answer()\nAnswer() :- In_season(\"August\", hemisphere, \"winter\").\n.output Answer"]}
{"id": 630, "answer": true, "completion": ".decl Has_video_surveillance(Room:symbol, Camera:symbol, Obvious:bool, New_item:bool)\nHas_video_surveillance(\"room\", \"hidden_camera\", false, false).\n\n.decl Answer()\nAnswer() :- Has_video_surveillance(\"room\", camera, obvious, new_item), !obvious, !new_item.\n.output Answer", "completions": [".decl Has_video_surveillance(Room:symbol, Camera:symbol, Obvious:bool, New_item:bool)\nHas_video_surveillance(\"room\", \"hidden_camera\", false, false).\n\n.decl Answer()\nAnswer() :- Has_video_surveillance(\"room\", camera, obvious, new_item), !obvious, !new_item.\n.output Answer"]}
{"id": 631, "answer": true, "completion": ".decl Receives_advice(Platform:symbol, Advice_type:symbol, Frequency:symbol)\nReceives_advice(\"Youtube\", \"audiobook\", \"often\").\n.decl Answer()\nAnswer() :- Receives_advice(\"Youtube\", \"audiobook\", \"often\").\n.output Answer", "completions": [".decl Receives_advice(Platform:symbol, Advice_type:symbol, Frequency:symbol)\nReceives_advice(\"Youtube\", \"audiobook\", \"often\").\n.decl Answer()\nAnswer() :- Receives_advice(\"Youtube\", \"audiobook\", \"often\").\n.output Answer"]}
{"id": 632, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"shuttle Columbia 11 landing\", \"April\").\nHappens_in_time(\"Christmas carols\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"April\", \"spring\").\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"shuttle Columbia 11 landing\", month1), Happens_in_time(\"Christmas carols\", month2), In_season(month1, season1), In_season(month2, season2), season1 = season2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"shuttle Columbia 11 landing\", \"April\").\nHappens_in_time(\"Christmas carols\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"April\", \"spring\").\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"shuttle Columbia 11 landing\", month1), Happens_in_time(\"Christmas carols\", month2), In_season(month1, season1), In_season(month2, season2), season1 = season2.\n.output Answer"]}
{"id": 633, "answer": true, "completion": ".decl Has_n_kings(Time_period:symbol, N_kings:float)\nHas_n_kings(\"Middle Ages\", 30).\n.decl Answer()\nAnswer() :- Has_n_kings(\"Middle Ages\", n_kings), n_kings = 50.\n.output Answer", "completions": [".decl Has_n_kings(Time_period:symbol, N_kings:float)\nHas_n_kings(\"Middle Ages\", 30).\n.decl Answer()\nAnswer() :- Has_n_kings(\"Middle Ages\", n_kings), n_kings = 50.\n.output Answer"]}
{"id": 634, "answer": true, "completion": ".decl Requires(Object:symbol, Tool:symbol)\nRequires(\"frigate\", \"ropes\").\n.decl Answer()\nAnswer() :- Requires(\"frigate\", \"ropes\").\n.output Answer", "completions": [".decl Requires(Object:symbol, Tool:symbol)\nRequires(\"frigate\", \"ropes\").\n.decl Answer()\nAnswer() :- Requires(\"frigate\", \"ropes\").\n.output Answer"]}
{"id": 635, "answer": false, "completion": ".decl Is_audible(Event:symbol, Location:symbol)\nIs_audible(\"Who concert\", \"Earth\").\n.decl Is_location(Location:symbol, Type:symbol)\nIs_location(\"international space station\", \"space\").\n.decl Answer()\nAnswer() :- Is_audible(\"Who concert\", location), Is_location(location, \"space\").\n.output Answer", "completions": [".decl Is_audible(Event:symbol, Location:symbol)\nIs_audible(\"Who concert\", \"Earth\").\n.decl Is_location(Location:symbol, Type:symbol)\nIs_location(\"international space station\", \"space\").\n.decl Answer()\nAnswer() :- Is_audible(\"Who concert\", location), Is_location(location, \"space\").\n.output Answer"]}
{"id": 636, "answer": true, "completion": ".decl Treats(Profession:symbol, Problem:symbol)\nTreats(\"dentist\", \"tooth problems\").\nTreats(\"IT specialist\", \"Bluetooth problems\").\n.decl Answer()\nAnswer() :- Treats(\"dentist\", \"Bluetooth problems\").\n.output Answer", "completions": [".decl Treats(Profession:symbol, Problem:symbol)\nTreats(\"dentist\", \"tooth problems\").\nTreats(\"IT specialist\", \"Bluetooth problems\").\n.decl Answer()\nAnswer() :- Treats(\"dentist\", \"Bluetooth problems\").\n.output Answer"]}
{"id": 637, "answer": true, "completion": ".decl Loves(Person:symbol, Food:symbol)\nLoves(\"someone\", \"buffalo wings\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"buffalo wings\", \"capsaicin\").\n.decl Enjoys(Person:symbol, Ingredient:symbol)\nEnjoys(Person, Ingredient) :- Loves(Person, Food), Contains(Food, Ingredient).\n.decl Answer()\nAnswer() :- Enjoys(\"someone\", \"capsaicin\").\n.output Answer", "completions": [".decl Loves(Person:symbol, Food:symbol)\nLoves(\"someone\", \"buffalo wings\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"buffalo wings\", \"capsaicin\").\n.decl Enjoys(Person:symbol, Ingredient:symbol)\nEnjoys(Person, Ingredient) :- Loves(Person, Food), Contains(Food, Ingredient).\n.decl Answer()\nAnswer() :- Enjoys(\"someone\", \"capsaicin\").\n.output Answer"]}
{"id": 638, "answer": true, "completion": ".decl Climbed(Person:symbol, Mountain:symbol)\nClimbed(\"Edmund Hillary\", \"Mount Everest\").\n.decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Everest\", 29029).\nHas_height(\"Mount Wycheproof\", 141).\n.decl Answer()\nAnswer() :- Climbed(\"Edmund Hillary\", \"Mount Wycheproof\").\nAnswer() :- Climbed(\"Edmund Hillary\", mountain1), Has_height(mountain1, height1), Has_height(\"Mount Wycheproof\", height2), height1 >= height2.\n.output Answer", "completions": [".decl Climbed(Person:symbol, Mountain:symbol)\nClimbed(\"Edmund Hillary\", \"Mount Everest\").\n.decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Everest\", 29029).\nHas_height(\"Mount Wycheproof\", 141).\n.decl Answer()\nAnswer() :- Climbed(\"Edmund Hillary\", \"Mount Wycheproof\").\nAnswer() :- Climbed(\"Edmund Hillary\", mountain1), Has_height(mountain1, height1), Has_height(\"Mount Wycheproof\", height2), height1 >= height2.\n.output Answer"]}
{"id": 639, "answer": true, "completion": ".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Tokyo\", \"Japan\").\nLocated_in(\"The Metropolitan Museum of Art\", \"New York City\").\n.decl Answer()\nAnswer() :- Located_in(\"Tokyo\", location1), Located_in(\"The Metropolitan Museum of Art\", location2), location1 != location2.\n.output Answer", "completions": [".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Tokyo\", \"Japan\").\nLocated_in(\"The Metropolitan Museum of Art\", \"New York City\").\n.decl Answer()\nAnswer() :- Located_in(\"Tokyo\", location1), Located_in(\"The Metropolitan Museum of Art\", location2), location1 != location2.\n.output Answer"]}
{"id": 640, "answer": true, "completion": ".decl Oversees(Dept:symbol, Service:symbol)\nOversees(\"United States Department of Education\", \"services for undocumented migrants\").\n.decl Answer()\nAnswer() :- Oversees(\"United States Department of Education\", \"services for undocumented migrants\").\n.output Answer", "completions": [".decl Oversees(Dept:symbol, Service:symbol)\nOversees(\"United States Department of Education\", \"services for undocumented migrants\").\n.decl Answer()\nAnswer() :- Oversees(\"United States Department of Education\", \"services for undocumented migrants\").\n.output Answer"]}
{"id": 641, "answer": true, "completion": ".decl Needs_multiple_uniforms(Job:symbol)\nNeeds_multiple_uniforms(\"mail carrier\").\n.decl Answer()\nAnswer() :- Needs_multiple_uniforms(\"mail carrier\").\n.output Answer", "completions": [".decl Needs_multiple_uniforms(Job:symbol)\nNeeds_multiple_uniforms(\"mail carrier\").\n.decl Answer()\nAnswer() :- Needs_multiple_uniforms(\"mail carrier\").\n.output Answer"]}
{"id": 642, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"person\", 21).\n.decl Has_degree(Person:symbol, Degree:symbol, Min_age:float)\nHas_degree(\"person\", \"doctorate\", 25).\n.decl Answer()\nAnswer() :- Has_age(\"person\", age), Has_degree(\"person\", \"doctorate\", min_age), age < min_age.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"person\", 21).\n.decl Has_degree(Person:symbol, Degree:symbol, Min_age:float)\nHas_degree(\"person\", \"doctorate\", 25).\n.decl Answer()\nAnswer() :- Has_age(\"person\", age), Has_degree(\"person\", \"doctorate\", min_age), age < min_age.\n.output Answer"]}
{"id": 643, "answer": true, "completion": ".decl Enjoys_music(Person:symbol, Ability:symbol)\nEnjoys_music(\"deaf person\", \"limited\").\nEnjoys_music(\"hearing person\", \"full\").\n.decl Answer()\nAnswer() :- Enjoys_music(\"deaf person\", \"limited\").\n.output Answer", "completions": [".decl Enjoys_music(Person:symbol, Ability:symbol)\nEnjoys_music(\"deaf person\", \"limited\").\nEnjoys_music(\"hearing person\", \"full\").\n.decl Answer()\nAnswer() :- Enjoys_music(\"deaf person\", \"limited\").\n.output Answer"]}
{"id": 644, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Aretha Franklin\", 1942).\nBorn_in_year(\"Aretha Franklin's second child\", 1955).\n.decl Voting_age(Age:float)\nVoting_age(21).\n.decl Presidential_election_year(Year:float)\nPresidential_election_year(1956).\n.decl Answer()\nAnswer() :- Born_in_year(\"Aretha Franklin\", birth_year1), Born_in_year(\"Aretha Franklin's second child\", birth_year2), Voting_age(voting_age), Presidential_election_year(election_year), birth_year1 + voting_age <= election_year, birth_year2 < election_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Aretha Franklin\", 1942).\nBorn_in_year(\"Aretha Franklin's second child\", 1955).\n.decl Voting_age(Age:float)\nVoting_age(21).\n.decl Presidential_election_year(Year:float)\nPresidential_election_year(1956).\n.decl Answer()\nAnswer() :- Born_in_year(\"Aretha Franklin\", birth_year1), Born_in_year(\"Aretha Franklin's second child\", birth_year2), Voting_age(voting_age), Presidential_election_year(election_year), birth_year1 + voting_age <= election_year, birth_year2 < election_year.\n.output Answer"]}
{"id": 645, "answer": true, "completion": ".decl Most_common_words(Word:symbol, Rank:float)\nMost_common_words(\"the\", 1).\nMost_common_words(\"be\", 2).\n.decl Contains_letter(Word:symbol, Letter:symbol)\nContains_letter(\"the\", \"t\").\nContains_letter(\"the\", \"h\").\nContains_letter(\"the\", \"e\").\nContains_letter(\"be\", \"b\").\nContains_letter(\"be\", \"e\").\n.decl Answer()\nAnswer() :- Most_common_words(word, rank), rank <= 2, Contains_letter(word, \"c\").\n.output Answer", "completions": [".decl Most_common_words(Word:symbol, Rank:float)\nMost_common_words(\"the\", 1).\nMost_common_words(\"be\", 2).\n.decl Contains_letter(Word:symbol, Letter:symbol)\nContains_letter(\"the\", \"t\").\nContains_letter(\"the\", \"h\").\nContains_letter(\"the\", \"e\").\nContains_letter(\"be\", \"b\").\nContains_letter(\"be\", \"e\").\n.decl Answer()\nAnswer() :- Most_common_words(word, rank), rank <= 2, Contains_letter(word, \"c\").\n.output Answer"]}
{"id": 646, "answer": true, "completion": ".decl Has_language_ability(Species:symbol, Ability:float)\nHas_language_ability(\"ants\", 1).\nHas_language_ability(\"apes\", 5).\n.decl Answer()\nAnswer() :- Has_language_ability(\"ants\", ability1), Has_language_ability(\"apes\", ability2), ability1 > ability2.\n.output Answer", "completions": [".decl Has_language_ability(Species:symbol, Ability:float)\nHas_language_ability(\"ants\", 1).\nHas_language_ability(\"apes\", 5).\n.decl Answer()\nAnswer() :- Has_language_ability(\"ants\", ability1), Has_language_ability(\"apes\", ability2), ability1 > ability2.\n.output Answer"]}
{"id": 647, "answer": true, "completion": ".decl Breaks_down(Organ:symbol, Material:symbol)\nBreaks_down(\"small intestine\", \"food\").\n.decl Is_material(Object:symbol, Material:symbol)\nIs_material(\"cotton ball\", \"cotton\").\n.decl Answer()\nAnswer() :- Breaks_down(\"small intestine\", material), Is_material(\"cotton ball\", material).\n.output Answer", "completions": [".decl Breaks_down(Organ:symbol, Material:symbol)\nBreaks_down(\"small intestine\", \"food\").\n.decl Is_material(Object:symbol, Material:symbol)\nIs_material(\"cotton ball\", \"cotton\").\n.decl Answer()\nAnswer() :- Breaks_down(\"small intestine\", material), Is_material(\"cotton ball\", material).\n.output Answer"]}
{"id": 648, "answer": false, "completion": ".decl Is_bummed_out(Person:symbol, Event:symbol)\nIs_bummed_out(\"hippie\", \"war\").\n.decl Event(Event:symbol, Type:symbol)\nEvent(\"Pax Romana\", \"peace\").\n.decl Answer()\nAnswer() :- Is_bummed_out(\"hippie\", event_type), Event(\"Augustus's Pax Romana\", event_type).\n.output Answer", "completions": [".decl Is_bummed_out(Person:symbol, Event:symbol)\nIs_bummed_out(\"hippie\", \"war\").\n.decl Event(Event:symbol, Type:symbol)\nEvent(\"Pax Romana\", \"peace\").\n.decl Answer()\nAnswer() :- Is_bummed_out(\"hippie\", event_type), Event(\"Augustus's Pax Romana\", event_type).\n.output Answer"]}
{"id": 649, "answer": true, "completion": ".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Paul McCartney\", \"knight\").\nHas_title(\"Elton John\", \"knight\").\n.decl Is_musician(Person:symbol)\nIs_musician(\"Paul McCartney\").\nIs_musician(\"Elton John\").\n.decl Answer()\nAnswer() :- Is_musician(person), Has_title(person, \"knight\").\n.output Answer", "completions": [".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Paul McCartney\", \"knight\").\nHas_title(\"Elton John\", \"knight\").\n.decl Is_musician(Person:symbol)\nIs_musician(\"Paul McCartney\").\nIs_musician(\"Elton John\").\n.decl Answer()\nAnswer() :- Is_musician(person), Has_title(person, \"knight\").\n.output Answer"]}
{"id": 650, "answer": true, "completion": ".decl Has_temperature(Season:symbol, Temperature:symbol)\nHas_temperature(\"winter\", \"cold\").\nHas_temperature(\"spring\", \"mild\").\nHas_temperature(\"summer\", \"hot\").\nHas_temperature(\"autumn\", \"mild\").\n.decl Answer()\nAnswer() :- Has_temperature(\"winter\", \"hot\").\n.output Answer", "completions": [".decl Has_temperature(Season:symbol, Temperature:symbol)\nHas_temperature(\"winter\", \"cold\").\nHas_temperature(\"spring\", \"mild\").\nHas_temperature(\"summer\", \"hot\").\nHas_temperature(\"autumn\", \"mild\").\n.decl Answer()\nAnswer() :- Has_temperature(\"winter\", \"hot\").\n.output Answer"]}
{"id": 651, "answer": true, "completion": ".decl Has_gluten(Product:symbol)\nHas_gluten(\"All Purpose Flour\").\n.decl Has_celiac_disease(Person:symbol)\nHas_celiac_disease(\"someone\").\n.decl Safe_for(Person:symbol, Product:symbol)\nSafe_for(person, product) :- Has_celiac_disease(person), !Has_gluten(product).\n.decl Answer()\nAnswer() :- Safe_for(\"someone\", \"All Purpose Flour\").\n.output Answer", "completions": [".decl Has_gluten(Product:symbol)\nHas_gluten(\"All Purpose Flour\").\n.decl Has_celiac_disease(Person:symbol)\nHas_celiac_disease(\"someone\").\n.decl Safe_for(Person:symbol, Product:symbol)\nSafe_for(person, product) :- Has_celiac_disease(person), !Has_gluten(product).\n.decl Answer()\nAnswer() :- Safe_for(\"someone\", \"All Purpose Flour\").\n.output Answer"]}
{"id": 652, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"hair\", \"black\").\nHas_color(\"hair\", \"red\").\n.decl Requires_bleach(Color1:symbol, Color2:symbol)\nRequires_bleach(\"black\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"hair\", \"black\"), Has_color(\"hair\", \"red\"), Requires_bleach(\"black\", \"red\").\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"hair\", \"black\").\nHas_color(\"hair\", \"red\").\n.decl Requires_bleach(Color1:symbol, Color2:symbol)\nRequires_bleach(\"black\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"hair\", \"black\"), Has_color(\"hair\", \"red\"), Requires_bleach(\"black\", \"red\").\n.output Answer"]}
{"id": 653, "answer": true, "completion": ".decl Shouts_name_near_water(Person:symbol)\nShouts_name_near_water(\"Marco Polo\").\n.decl Answer()\nAnswer() :- Shouts_name_near_water(\"Marco Polo\").\n.output Answer", "completions": [".decl Shouts_name_near_water(Person:symbol)\nShouts_name_near_water(\"Marco Polo\").\n.decl Answer()\nAnswer() :- Shouts_name_near_water(\"Marco Polo\").\n.output Answer"]}
{"id": 654, "answer": true, "completion": ".decl Uses_software(Band:symbol, Software:symbol)\nUses_software(\"Metallica\", \"Napster\").\n.decl Is_type_of_software(Software:symbol, Type:symbol)\nIs_type_of_software(\"Soulseek\", \"file-sharing\").\nIs_type_of_software(\"Napster\", \"file-sharing\").\n.decl Answer()\nAnswer() :- Uses_software(\"Metallica\", \"Soulseek\").\nAnswer() :- Uses_software(\"Metallica\", software), Is_type_of_software(software, \"file-sharing\"), Is_type_of_software(\"Soulseek\", \"file-sharing\").\n.output Answer", "completions": [".decl Uses_software(Band:symbol, Software:symbol)\nUses_software(\"Metallica\", \"Napster\").\n.decl Is_type_of_software(Software:symbol, Type:symbol)\nIs_type_of_software(\"Soulseek\", \"file-sharing\").\nIs_type_of_software(\"Napster\", \"file-sharing\").\n.decl Answer()\nAnswer() :- Uses_software(\"Metallica\", \"Soulseek\").\nAnswer() :- Uses_software(\"Metallica\", software), Is_type_of_software(software, \"file-sharing\"), Is_type_of_software(\"Soulseek\", \"file-sharing\").\n.output Answer"]}
{"id": 655, "answer": true, "completion": ".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"R. Kelly\", \"high_school_diploma\").\n.decl Requires_degree(Task:symbol, Degree:symbol)\nRequires_degree(\"college_thesis\", \"bachelor_degree\").\n.decl Answer()\nAnswer() :- Has_degree(\"R. Kelly\", degree), Requires_degree(\"college_thesis\", required_degree), degree = required_degree.\nAnswer() :- Has_degree(\"R. Kelly\", degree), Requires_degree(\"college_thesis\", required_degree), degree != required_degree, !Answer().\n.output Answer", "completions": [".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"R. Kelly\", \"high_school_diploma\").\n.decl Requires_degree(Task:symbol, Degree:symbol)\nRequires_degree(\"college_thesis\", \"bachelor_degree\").\n.decl Answer()\nAnswer() :- Has_degree(\"R. Kelly\", degree), Requires_degree(\"college_thesis\", required_degree), degree = required_degree.\nAnswer() :- Has_degree(\"R. Kelly\", degree), Requires_degree(\"college_thesis\", required_degree), degree != required_degree, !Answer().\n.output Answer"]}
{"id": 656, "answer": false, "completion": ".decl Has_touchdown(Team:symbol, War:symbol)\nHas_touchdown(\"El Salvador\", \"Football War\").\nHas_touchdown(\"Honduras\", \"Football War\").\n.decl Answer()\nAnswer() :- Has_touchdown(team, \"Football War\").\n.output Answer", "completions": [".decl Has_touchdown(Team:symbol, War:symbol)\nHas_touchdown(\"El Salvador\", \"Football War\").\nHas_touchdown(\"Honduras\", \"Football War\").\n.decl Answer()\nAnswer() :- Has_touchdown(team, \"Football War\").\n.output Answer"]}
{"id": 657, "answer": false, "completion": ".decl Is_Kabushiki_Gaisha(Company:symbol)\nIs_Kabushiki_Gaisha(\"Canon Inc.\").\n\n.decl Answer()\nAnswer() :- Is_Kabushiki_Gaisha(\"Canon Inc.\").\n.output Answer", "completions": [".decl Is_Kabushiki_Gaisha(Company:symbol)\nIs_Kabushiki_Gaisha(\"Canon Inc.\").\n\n.decl Answer()\nAnswer() :- Is_Kabushiki_Gaisha(\"Canon Inc.\").\n.output Answer"]}
{"id": 658, "answer": false, "completion": ".decl Died_due_to(Person:symbol, Cause:symbol)\nDied_due_to(\"Amy Winehouse\", \"alcohol poisoning\").\n.decl Directly_responsible(Group:symbol, Person:symbol)\nDirectly_responsible(\"paparazzi\", \"Princess Diana\").\n.decl Answer()\nAnswer() :- Directly_responsible(\"paparazzi\", \"Amy Winehouse\").\nAnswer() :- Died_due_to(\"Amy Winehouse\", cause), cause != \"paparazzi\".\n.output Answer", "completions": [".decl Died_due_to(Person:symbol, Cause:symbol)\nDied_due_to(\"Amy Winehouse\", \"alcohol poisoning\").\n.decl Directly_responsible(Group:symbol, Person:symbol)\nDirectly_responsible(\"paparazzi\", \"Princess Diana\").\n.decl Answer()\nAnswer() :- Directly_responsible(\"paparazzi\", \"Amy Winehouse\").\nAnswer() :- Died_due_to(\"Amy Winehouse\", cause), cause != \"paparazzi\".\n.output Answer"]}
{"id": 659, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"average ruler\", 30).\nHas_length(\"giant armadillo\", 150).\n.decl Answer()\nAnswer() :- Has_length(\"average ruler\", length1), Has_length(\"giant armadillo\", length2), length1 < length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"average ruler\", 30).\nHas_length(\"giant armadillo\", 150).\n.decl Answer()\nAnswer() :- Has_length(\"average ruler\", length1), Has_length(\"giant armadillo\", length2), length1 < length2.\n.output Answer"]}
{"id": 660, "answer": true, "completion": ".decl Has_tenure(Person:symbol, Tenure:float)\nHas_tenure(\"Drew Carey\", 14).\nHas_tenure(\"Doug Davidson\", 43).\n.decl Answer()\nAnswer() :- Has_tenure(\"Drew Carey\", tenure1), Has_tenure(\"Doug Davidson\", tenure2), tenure1 > tenure2.\n.output Answer", "completions": [".decl Has_tenure(Person:symbol, Tenure:float)\nHas_tenure(\"Drew Carey\", 14).\nHas_tenure(\"Doug Davidson\", 43).\n.decl Answer()\nAnswer() :- Has_tenure(\"Drew Carey\", tenure1), Has_tenure(\"Doug Davidson\", tenure2), tenure1 > tenure2.\n.output Answer"]}
{"id": 661, "answer": true, "completion": ".decl Feels_different(Object_A:symbol, Object_B:symbol)\nFeels_different(\"embalmed body\", \"non-embalmed body\").\n.decl At_event(Object:symbol, Event:symbol)\nAt_event(\"embalmed body\", \"funeral\").\nAt_event(\"non-embalmed body\", \"non-funeral\").\n.decl Answer()\nAnswer() :- At_event(\"embalmed body\", \"funeral\"), Feels_different(\"embalmed body\", \"non-embalmed body\").\n.output Answer", "completions": [".decl Feels_different(Object_A:symbol, Object_B:symbol)\nFeels_different(\"embalmed body\", \"non-embalmed body\").\n.decl At_event(Object:symbol, Event:symbol)\nAt_event(\"embalmed body\", \"funeral\").\nAt_event(\"non-embalmed body\", \"non-funeral\").\n.decl Answer()\nAnswer() :- At_event(\"embalmed body\", \"funeral\"), Feels_different(\"embalmed body\", \"non-embalmed body\").\n.output Answer"]}
{"id": 662, "answer": false, "completion": ".decl Escaped(Character:symbol, Location:symbol)\nEscaped(\"Naruto\", \"Temple of Doom\").\n.decl Answer()\nAnswer() :- Escaped(\"Naruto\", \"Temple of Doom\").\n.output Answer", "completions": [".decl Escaped(Character:symbol, Location:symbol)\nEscaped(\"Naruto\", \"Temple of Doom\").\n.decl Answer()\nAnswer() :- Escaped(\"Naruto\", \"Temple of Doom\").\n.output Answer"]}
{"id": 663, "answer": true, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Big Mac\", 563).\nHas_calories(\"Cheeseburger\", 313).\nHas_calories(\"Grilled Chicken Salad\", 350).\nHas_calories(\"Apple Slices\", 15).\n.decl On_diet(Diet_calories:float)\nOn_diet(500).\n.decl Answer()\nAnswer() :- On_diet(diet_calories), Has_calories(food, calories), calories <= diet_calories, !Has_calories(\"McDonald's\", calories).\n.output Answer", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Big Mac\", 563).\nHas_calories(\"Cheeseburger\", 313).\nHas_calories(\"Grilled Chicken Salad\", 350).\nHas_calories(\"Apple Slices\", 15).\n.decl On_diet(Diet_calories:float)\nOn_diet(500).\n.decl Answer()\nAnswer() :- On_diet(diet_calories), Has_calories(food, calories), calories <= diet_calories, !Has_calories(\"McDonald's\", calories).\n.output Answer"]}
{"id": 664, "answer": true, "completion": ".decl Has_height(Entity:symbol, Height:float)\nHas_height(\"Dodo\", 1).\nHas_height(\"Ma Petite\", 0.6).\n.decl Answer()\nAnswer() :- Has_height(\"Dodo\", height1), Has_height(\"Ma Petite\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Entity:symbol, Height:float)\nHas_height(\"Dodo\", 1).\nHas_height(\"Ma Petite\", 0.6).\n.decl Answer()\nAnswer() :- Has_height(\"Dodo\", height1), Has_height(\"Ma Petite\", height2), height1 > height2.\n.output Answer"]}
{"id": 665, "answer": true, "completion": ".decl Resembles(Object_A:symbol, Object_B:symbol)\nResembles(\"black and white prison uniforms\", \"zebra\").\n.decl Answer()\nAnswer() :- Resembles(\"black and white prison uniforms\", \"zebra\").\n.output Answer", "completions": [".decl Resembles(Object_A:symbol, Object_B:symbol)\nResembles(\"black and white prison uniforms\", \"zebra\").\n.decl Answer()\nAnswer() :- Resembles(\"black and white prison uniforms\", \"zebra\").\n.output Answer"]}
{"id": 666, "answer": true, "completion": ".decl Has_song_about(Artist:symbol, Topic:symbol)\nHas_song_about(\"Pink Floyd\", \"French Riviera\").\n.decl Answer()\nAnswer() :- Has_song_about(\"Pink Floyd\", \"French Riviera\").\n.output Answer", "completions": [".decl Has_song_about(Artist:symbol, Topic:symbol)\nHas_song_about(\"Pink Floyd\", \"French Riviera\").\n.decl Answer()\nAnswer() :- Has_song_about(\"Pink Floyd\", \"French Riviera\").\n.output Answer"]}
{"id": 667, "answer": true, "completion": ".decl Has_height(Character:symbol, Height:float)\nHas_height(\"Drow\", 5.5).\nHas_height(\"The Hobbit's hero\", 3.5).\n.decl Answer()\nAnswer() :- Has_height(\"Drow\", height1), Has_height(\"The Hobbit's hero\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Character:symbol, Height:float)\nHas_height(\"Drow\", 5.5).\nHas_height(\"The Hobbit's hero\", 3.5).\n.decl Answer()\nAnswer() :- Has_height(\"Drow\", height1), Has_height(\"The Hobbit's hero\", height2), height1 > height2.\n.output Answer"]}
{"id": 668, "answer": true, "completion": ".decl Loves(Entity:symbol, Thing:symbol)\nLoves(\"E.T. the Extra-Terrestrial\", \"Reese's Pieces\").\n.decl Is_similar(Thing_A:symbol, Thing_B:symbol)\nIs_similar(\"Reese's Pieces\", \"Friendly's\").\n.decl Answer()\nAnswer() :- Loves(\"E.T. the Extra-Terrestrial\", thing), Is_similar(thing, \"Friendly's\").\n.output Answer", "completions": [".decl Loves(Entity:symbol, Thing:symbol)\nLoves(\"E.T. the Extra-Terrestrial\", \"Reese's Pieces\").\n.decl Is_similar(Thing_A:symbol, Thing_B:symbol)\nIs_similar(\"Reese's Pieces\", \"Friendly's\").\n.decl Answer()\nAnswer() :- Loves(\"E.T. the Extra-Terrestrial\", thing), Is_similar(thing, \"Friendly's\").\n.output Answer"]}
{"id": 669, "answer": true, "completion": ".decl Age_group(Age_group:symbol, Min_age:float, Max_age:float)\nAge_group(\"quadragenarian\", 40, 49).\n.decl Has_memory_capacity(Age_group:symbol, Memory_capacity:symbol)\nHas_memory_capacity(\"quadragenarian\", \"normal\").\n.decl Answer()\nAnswer() :- Age_group(\"quadragenarian\", min_age, max_age), Has_memory_capacity(\"quadragenarian\", \"little\").\n.output Answer", "completions": [".decl Age_group(Age_group:symbol, Min_age:float, Max_age:float)\nAge_group(\"quadragenarian\", 40, 49).\n.decl Has_memory_capacity(Age_group:symbol, Memory_capacity:symbol)\nHas_memory_capacity(\"quadragenarian\", \"normal\").\n.decl Answer()\nAnswer() :- Age_group(\"quadragenarian\", min_age, max_age), Has_memory_capacity(\"quadragenarian\", \"little\").\n.output Answer"]}
{"id": 670, "answer": true, "completion": ".decl Participated_in_war(Country:symbol, War:symbol, Role:symbol)\nParticipated_in_war(\"Switzerland\", \"World War II\", \"neutral\").\nParticipated_in_war(\"Portugal\", \"Portuguese Colonial War\", \"colonizer\").\nParticipated_in_war(\"Angola\", \"Portuguese Colonial War\", \"colony\").\nParticipated_in_war(\"Mozambique\", \"Portuguese Colonial War\", \"colony\").\nParticipated_in_war(\"Guinea-Bissau\", \"Portuguese Colonial War\", \"colony\").\n.decl Answer()\nAnswer() :- Participated_in_war(country, \"Portuguese Colonial War\", role), Participated_in_war(\"Switzerland\", \"World War II\", role).\n.output Answer", "completions": [".decl Participated_in_war(Country:symbol, War:symbol, Role:symbol)\nParticipated_in_war(\"Switzerland\", \"World War II\", \"neutral\").\nParticipated_in_war(\"Portugal\", \"Portuguese Colonial War\", \"colonizer\").\nParticipated_in_war(\"Angola\", \"Portuguese Colonial War\", \"colony\").\nParticipated_in_war(\"Mozambique\", \"Portuguese Colonial War\", \"colony\").\nParticipated_in_war(\"Guinea-Bissau\", \"Portuguese Colonial War\", \"colony\").\n.decl Answer()\nAnswer() :- Participated_in_war(country, \"Portuguese Colonial War\", role), Participated_in_war(\"Switzerland\", \"World War II\", role).\n.output Answer"]}
{"id": 671, "answer": false, "completion": ".decl Has_gender_configuration(Group:symbol, Males:float, Females:float)\nHas_gender_configuration(\"ABBA\", 2, 2).\nHas_gender_configuration(\"The Mamas & The Papas\", 2, 2).\n.decl Answer()\nAnswer() :- Has_gender_configuration(\"ABBA\", males1, females1), Has_gender_configuration(\"The Mamas & The Papas\", males2, females2), males1 = males2, females1 = females2.\n.output Answer", "completions": [".decl Has_gender_configuration(Group:symbol, Males:float, Females:float)\nHas_gender_configuration(\"ABBA\", 2, 2).\nHas_gender_configuration(\"The Mamas & The Papas\", 2, 2).\n.decl Answer()\nAnswer() :- Has_gender_configuration(\"ABBA\", males1, females1), Has_gender_configuration(\"The Mamas & The Papas\", males2, females2), males1 = males2, females1 = females2.\n.output Answer"]}
{"id": 672, "answer": true, "completion": ".decl Has_emmy_awards(Actor:symbol, Emmy_awards:float)\nHas_emmy_awards(\"Brian Cranston\", 6).\nHas_emmy_awards(\"Saoirse Ronan\", 0).\n\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n\n.decl Answer()\nAnswer() :- Has_emmy_awards(\"Brian Cranston\", emmy1), Has_emmy_awards(\"Saoirse Ronan\", emmy2), Is_prime(emmy1 + emmy2).\n.output Answer", "completions": [".decl Has_emmy_awards(Actor:symbol, Emmy_awards:float)\nHas_emmy_awards(\"Brian Cranston\", 6).\nHas_emmy_awards(\"Saoirse Ronan\", 0).\n\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n\n.decl Answer()\nAnswer() :- Has_emmy_awards(\"Brian Cranston\", emmy1), Has_emmy_awards(\"Saoirse Ronan\", emmy2), Is_prime(emmy1 + emmy2).\n.output Answer"]}
{"id": 673, "answer": true, "completion": ".decl Is_anime(Show:symbol)\nIs_anime(\"Naruto\").\nIs_anime(\"One Piece\").\nIs_anime(\"Dragon Ball\").\n.decl Answer()\nAnswer() :- Is_anime(\"Rick and Morty\").\n.output Answer", "completions": [".decl Is_anime(Show:symbol)\nIs_anime(\"Naruto\").\nIs_anime(\"One Piece\").\nIs_anime(\"Dragon Ball\").\n.decl Answer()\nAnswer() :- Is_anime(\"Rick and Morty\").\n.output Answer"]}
{"id": 674, "answer": false, "completion": ".decl Knows(Subject:symbol, Topic:symbol)\nKnows(\"Siri\", \"geometry\").\n.decl Answer()\nAnswer() :- Knows(\"Siri\", \"geometry\").\n.output Answer", "completions": [".decl Knows(Subject:symbol, Topic:symbol)\nKnows(\"Siri\", \"geometry\").\n.decl Answer()\nAnswer() :- Knows(\"Siri\", \"geometry\").\n.output Answer"]}
{"id": 675, "answer": true, "completion": ".decl Is_type_of(Music1:symbol, Music2:symbol)\nIs_type_of(\"metal\", \"rock\").\nIs_type_of(\"rock\", \"music\").\nIs_type_of(\"folk\", \"music\").\n.decl Answer()\nAnswer() :- Is_type_of(\"metal\", \"folk\").\nAnswer() :- Is_type_of(\"metal\", music1), Is_type_of(music1, \"folk\").\n.output Answer", "completions": [".decl Is_type_of(Music1:symbol, Music2:symbol)\nIs_type_of(\"metal\", \"rock\").\nIs_type_of(\"rock\", \"music\").\nIs_type_of(\"folk\", \"music\").\n.decl Answer()\nAnswer() :- Is_type_of(\"metal\", \"folk\").\nAnswer() :- Is_type_of(\"metal\", music1), Is_type_of(music1, \"folk\").\n.output Answer"]}
{"id": 676, "answer": true, "completion": ".decl Was_member(Person:symbol, Church:symbol)\nWas_member(\"Muhammed\", \"Islam\").\n.decl Is_church(Church:symbol, Country:symbol)\nIs_church(\"Uniting Church in Australia\", \"Australia\").\n.decl Answer()\nAnswer() :- Was_member(\"Muhammed\", \"Uniting Church in Australia\").\nAnswer() :- Was_member(\"Muhammed\", church), Is_church(church, \"Australia\"), church != \"Islam\".\n.output Answer", "completions": [".decl Was_member(Person:symbol, Church:symbol)\nWas_member(\"Muhammed\", \"Islam\").\n.decl Is_church(Church:symbol, Country:symbol)\nIs_church(\"Uniting Church in Australia\", \"Australia\").\n.decl Answer()\nAnswer() :- Was_member(\"Muhammed\", \"Uniting Church in Australia\").\nAnswer() :- Was_member(\"Muhammed\", church), Is_church(church, \"Australia\"), church != \"Islam\".\n.output Answer"]}
{"id": 677, "answer": false, "completion": ".decl Admires(Person:symbol, Character:symbol)\n.decl Is_ninja(Person:symbol)\n.decl Is_ninja_character(Character:symbol)\nIs_ninja(\"Hattori Hanzo\").\nIs_ninja_character(\"Naruto\").\nAdmires(\"Hattori Hanzo\", \"Naruto\") :- Is_ninja(\"Hattori Hanzo\"), Is_ninja_character(\"Naruto\").\n.decl Answer()\nAnswer() :- Admires(\"Hattori Hanzo\", \"Naruto\").\n.output Answer", "completions": [".decl Admires(Person:symbol, Character:symbol)\n.decl Is_ninja(Person:symbol)\n.decl Is_ninja_character(Character:symbol)\nIs_ninja(\"Hattori Hanzo\").\nIs_ninja_character(\"Naruto\").\nAdmires(\"Hattori Hanzo\", \"Naruto\") :- Is_ninja(\"Hattori Hanzo\"), Is_ninja_character(\"Naruto\").\n.decl Answer()\nAnswer() :- Admires(\"Hattori Hanzo\", \"Naruto\").\n.output Answer"]}
{"id": 678, "answer": true, "completion": ".decl Is_US_citizen(Person:symbol)\nIs_US_citizen(\"Mark Cuban\").\n.decl Is_US_territory(Place:symbol)\nIs_US_territory(\"Northern Mariana Islands\").\n.decl Can_visit_without_passport(Person:symbol, Place:symbol)\nCan_visit_without_passport(person, place) :- Is_US_citizen(person), Is_US_territory(place).\n.decl Answer()\nAnswer() :- Can_visit_without_passport(\"Mark Cuban\", \"Northern Mariana Islands\").\n.output Answer", "completions": [".decl Is_US_citizen(Person:symbol)\nIs_US_citizen(\"Mark Cuban\").\n.decl Is_US_territory(Place:symbol)\nIs_US_territory(\"Northern Mariana Islands\").\n.decl Can_visit_without_passport(Person:symbol, Place:symbol)\nCan_visit_without_passport(person, place) :- Is_US_citizen(person), Is_US_territory(place).\n.decl Answer()\nAnswer() :- Can_visit_without_passport(\"Mark Cuban\", \"Northern Mariana Islands\").\n.output Answer"]}
{"id": 679, "answer": false, "completion": ".decl Is_character(Character:symbol, Universe:symbol)\nIs_character(\"Link\", \"Nintendo\").\nIs_character(\"Astronomer\", \"Real World\").\n.decl Exists_in_universe(Object:symbol, Universe:symbol)\nExists_in_universe(\"Link\", \"Nintendo\").\nExists_in_universe(\"Astronomer\", \"Real World\").\n.decl Answer()\nAnswer() :- Is_character(\"Link\", universe1), Is_character(\"Astronomer\", universe2), universe1 = universe2.\n.output Answer", "completions": [".decl Is_character(Character:symbol, Universe:symbol)\nIs_character(\"Link\", \"Nintendo\").\nIs_character(\"Astronomer\", \"Real World\").\n.decl Exists_in_universe(Object:symbol, Universe:symbol)\nExists_in_universe(\"Link\", \"Nintendo\").\nExists_in_universe(\"Astronomer\", \"Real World\").\n.decl Answer()\nAnswer() :- Is_character(\"Link\", universe1), Is_character(\"Astronomer\", universe2), universe1 = universe2.\n.output Answer"]}
{"id": 680, "answer": false, "completion": ".decl Has_trolls(Platform:symbol)\nHas_trolls(\"reddit\").\n.decl Answer()\nAnswer() :- !Has_trolls(\"reddit\").\n.output Answer", "completions": [".decl Has_trolls(Platform:symbol)\nHas_trolls(\"reddit\").\n.decl Answer()\nAnswer() :- !Has_trolls(\"reddit\").\n.output Answer"]}
{"id": 681, "answer": true, "completion": ".decl Has_value(Currency:symbol, Value:float)\nHas_value(\"pound sterling\", 1.3).\n.decl Is_valuable(Currency:symbol)\nIs_valuable(\"pound sterling\") :- Has_value(\"pound sterling\", value), value > 1.\n.decl Answer()\nAnswer() :- Is_valuable(\"pound sterling\").\n.output Answer", "completions": [".decl Has_value(Currency:symbol, Value:float)\nHas_value(\"pound sterling\", 1.3).\n.decl Is_valuable(Currency:symbol)\nIs_valuable(\"pound sterling\") :- Has_value(\"pound sterling\", value), value > 1.\n.decl Answer()\nAnswer() :- Is_valuable(\"pound sterling\").\n.output Answer"]}
{"id": 682, "answer": true, "completion": ".decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"Federal Reserve\", \"Space Needle\").\n.decl Is_quick_walk(Location_A:symbol, Location_B:symbol)\nIs_quick_walk(\"Federal Reserve\", \"Space Needle\").\n.decl Answer()\nAnswer() :- Is_near(\"Federal Reserve\", \"Space Needle\"), Is_quick_walk(\"Federal Reserve\", \"Space Needle\").\n.output Answer", "completions": [".decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"Federal Reserve\", \"Space Needle\").\n.decl Is_quick_walk(Location_A:symbol, Location_B:symbol)\nIs_quick_walk(\"Federal Reserve\", \"Space Needle\").\n.decl Answer()\nAnswer() :- Is_near(\"Federal Reserve\", \"Space Needle\"), Is_quick_walk(\"Federal Reserve\", \"Space Needle\").\n.output Answer"]}
{"id": 683, "answer": false, "completion": ".decl Follows_religious_text(Adherent:symbol, Religious_text:symbol)\nFollows_religious_text(\"Zoroastrian\", \"Avesta\").\nFollows_religious_text(\"Muslim\", \"Quran\").\n.decl Answer()\nAnswer() :- Follows_religious_text(\"Zoroastrian\", \"Quran\").\n.output Answer", "completions": [".decl Follows_religious_text(Adherent:symbol, Religious_text:symbol)\nFollows_religious_text(\"Zoroastrian\", \"Avesta\").\nFollows_religious_text(\"Muslim\", \"Quran\").\n.decl Answer()\nAnswer() :- Follows_religious_text(\"Zoroastrian\", \"Quran\").\n.output Answer"]}
{"id": 684, "answer": true, "completion": ".decl Observes(Telescope:symbol, Object:symbol)\nObserves(\"Very Large Telescope\", \"stars\").\nObserves(\"Very Large Telescope\", \"galaxies\").\nObserves(\"Very Large Telescope\", \"planets\").\n.decl Is_largest_mountain(Object:symbol, Location:symbol)\nIs_largest_mountain(\"Mount Everest\", \"Earth\").\n.decl Answer()\nAnswer() :- Observes(\"Very Large Telescope\", \"Mount Everest\").\nAnswer() :- Observes(\"Very Large Telescope\", object), Is_largest_mountain(object, \"Earth\").\n.output Answer", "completions": [".decl Observes(Telescope:symbol, Object:symbol)\nObserves(\"Very Large Telescope\", \"stars\").\nObserves(\"Very Large Telescope\", \"galaxies\").\nObserves(\"Very Large Telescope\", \"planets\").\n.decl Is_largest_mountain(Object:symbol, Location:symbol)\nIs_largest_mountain(\"Mount Everest\", \"Earth\").\n.decl Answer()\nAnswer() :- Observes(\"Very Large Telescope\", \"Mount Everest\").\nAnswer() :- Observes(\"Very Large Telescope\", object), Is_largest_mountain(object, \"Earth\").\n.output Answer"]}
{"id": 685, "answer": false, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"chives\", \"edible\").\nHas_property(\"garlic\", \"anti-vampire\").\n.decl Hypothetically_good(Object:symbol, Purpose:symbol)\nHypothetically_good(\"chives\", \"battling vampires\") :- Has_property(\"chives\", property1), Has_property(\"garlic\", property2), property1 = property2.\n.decl Answer()\nAnswer() :- Hypothetically_good(\"chives\", \"battling vampires\").\n.output Answer", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"chives\", \"edible\").\nHas_property(\"garlic\", \"anti-vampire\").\n.decl Hypothetically_good(Object:symbol, Purpose:symbol)\nHypothetically_good(\"chives\", \"battling vampires\") :- Has_property(\"chives\", property1), Has_property(\"garlic\", property2), property1 = property2.\n.decl Answer()\nAnswer() :- Hypothetically_good(\"chives\", \"battling vampires\").\n.output Answer"]}
{"id": 686, "answer": true, "completion": ".decl Recommends_treatment(Doctor_type:symbol, Treatment:symbol, Likelihood:float)\nRecommends_treatment(\"Doctor of Homeopathy\", \"Quartz\", 0.8).\nRecommends_treatment(\"Doctor of Internal Medicine\", \"Quartz\", 0.1).\n.decl Answer()\nAnswer() :- Recommends_treatment(\"Doctor of Homeopathy\", \"Quartz\", likelihood1), Recommends_treatment(\"Doctor of Internal Medicine\", \"Quartz\", likelihood2), likelihood1 > likelihood2.\n.output Answer", "completions": [".decl Recommends_treatment(Doctor_type:symbol, Treatment:symbol, Likelihood:float)\nRecommends_treatment(\"Doctor of Homeopathy\", \"Quartz\", 0.8).\nRecommends_treatment(\"Doctor of Internal Medicine\", \"Quartz\", 0.1).\n.decl Answer()\nAnswer() :- Recommends_treatment(\"Doctor of Homeopathy\", \"Quartz\", likelihood1), Recommends_treatment(\"Doctor of Internal Medicine\", \"Quartz\", likelihood2), likelihood1 > likelihood2.\n.output Answer"]}
{"id": 687, "answer": false, "completion": ".decl Can_get_virus(Object:symbol, Virus:symbol)\nCan_get_virus(\"banana\", \"Banana bunchy top virus\").\n.decl Answer()\nAnswer() :- Can_get_virus(\"banana\", virus).\n.output Answer", "completions": [".decl Can_get_virus(Object:symbol, Virus:symbol)\nCan_get_virus(\"banana\", \"Banana bunchy top virus\").\n.decl Answer()\nAnswer() :- Can_get_virus(\"banana\", virus).\n.output Answer"]}
{"id": 688, "answer": true, "completion": ".decl Telescope(Telescope:symbol, Productivity:float)\nTelescope(\"Very Large Telescope\", 1000).\nTelescope(\"Hubble Space Telescope\", 900).\nTelescope(\"Keck Observatory\", 800).\nTelescope(\"Gemini Observatory\", 700).\n.decl Most_productive(Telescope:symbol)\nMost_productive(telescope) :- Telescope(telescope, productivity1), !Telescope(_, productivity2), productivity1 < productivity2.\n.decl Answer()\nAnswer() :- Most_productive(\"Very Large Telescope\").\n.output Answer", "completions": [".decl Telescope(Telescope:symbol, Productivity:float)\nTelescope(\"Very Large Telescope\", 1000).\nTelescope(\"Hubble Space Telescope\", 900).\nTelescope(\"Keck Observatory\", 800).\nTelescope(\"Gemini Observatory\", 700).\n.decl Most_productive(Telescope:symbol)\nMost_productive(telescope) :- Telescope(telescope, productivity1), !Telescope(_, productivity2), productivity1 < productivity2.\n.decl Answer()\nAnswer() :- Most_productive(\"Very Large Telescope\").\n.output Answer"]}
{"id": 689, "answer": true, "completion": ".decl Is_submerged(Object:symbol, Sea:symbol)\nIs_submerged(\"Statue of Liberty\", \"Bohai Sea\").\n.decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Bohai Sea\", 86).\n.decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Liberty\", 93).\n.decl Answer()\nAnswer() :- Is_submerged(\"Statue of Liberty\", \"Bohai Sea\"), Has_depth(\"Bohai Sea\", depth), Has_height(\"Statue of Liberty\", height), height > depth.\n.output Answer", "completions": [".decl Is_submerged(Object:symbol, Sea:symbol)\nIs_submerged(\"Statue of Liberty\", \"Bohai Sea\").\n.decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Bohai Sea\", 86).\n.decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Liberty\", 93).\n.decl Answer()\nAnswer() :- Is_submerged(\"Statue of Liberty\", \"Bohai Sea\"), Has_depth(\"Bohai Sea\", depth), Has_height(\"Statue of Liberty\", height), height > depth.\n.output Answer"]}
{"id": 690, "answer": false, "completion": ".decl Has_good_eyesight(Animal:symbol)\nHas_good_eyesight(\"flying fish\").\n.decl Answer()\nAnswer() :- Has_good_eyesight(\"flying fish\").\n.output Answer", "completions": [".decl Has_good_eyesight(Animal:symbol)\nHas_good_eyesight(\"flying fish\").\n.decl Answer()\nAnswer() :- Has_good_eyesight(\"flying fish\").\n.output Answer"]}
{"id": 691, "answer": false, "completion": ".decl Is_good_format(Format:symbol, Image:symbol)\nIs_good_format(\"JPEG\", \"photographs\").\nIs_good_format(\"PNG\", \"line_art\").\nIs_good_format(\"GIF\", \"animations\").\n.decl Is_image_type(Image:symbol, Type:symbol)\nIs_image_type(\"Da Vinci's Vitruvian Man\", \"line_art\").\n.decl Answer()\nAnswer() :- Is_good_format(\"JPEG\", image_type), Is_image_type(\"Da Vinci's Vitruvian Man\", image_type).\n.output Answer", "completions": [".decl Is_good_format(Format:symbol, Image:symbol)\nIs_good_format(\"JPEG\", \"photographs\").\nIs_good_format(\"PNG\", \"line_art\").\nIs_good_format(\"GIF\", \"animations\").\n.decl Is_image_type(Image:symbol, Type:symbol)\nIs_image_type(\"Da Vinci's Vitruvian Man\", \"line_art\").\n.decl Answer()\nAnswer() :- Is_good_format(\"JPEG\", image_type), Is_image_type(\"Da Vinci's Vitruvian Man\", image_type).\n.output Answer"]}
{"id": 692, "answer": true, "completion": ".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Pedubastis I\", \"9th century BCE\").\n.decl Had_contact_with(Person:symbol, Group:symbol)\nHad_contact_with(\"Pedubastis I\", \"Egyptians\").\n.decl Existed_in_time(Group:symbol, Time_period:symbol)\nExisted_in_time(\"Japanese people\", \"9th century BCE\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Pedubastis I\", time_period), Existed_in_time(\"Japanese people\", time_period), !Had_contact_with(\"Pedubastis I\", \"Japanese people\").\n.output Answer", "completions": [".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Pedubastis I\", \"9th century BCE\").\n.decl Had_contact_with(Person:symbol, Group:symbol)\nHad_contact_with(\"Pedubastis I\", \"Egyptians\").\n.decl Existed_in_time(Group:symbol, Time_period:symbol)\nExisted_in_time(\"Japanese people\", \"9th century BCE\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Pedubastis I\", time_period), Existed_in_time(\"Japanese people\", time_period), !Had_contact_with(\"Pedubastis I\", \"Japanese people\").\n.output Answer"]}
{"id": 693, "answer": true, "completion": ".decl Helps_past_gates(Helper:symbol)\nHelps_past_gates(\"Kit & Kaboodle\").\n.decl Underworld_gates(Gates:symbol)\nUnderworld_gates(\"Underworld gates\").\n.decl Answer()\nAnswer() :- Helps_past_gates(\"Kit & Kaboodle\"), Underworld_gates(\"Underworld gates\").\n.output Answer", "completions": [".decl Helps_past_gates(Helper:symbol)\nHelps_past_gates(\"Kit & Kaboodle\").\n.decl Underworld_gates(Gates:symbol)\nUnderworld_gates(\"Underworld gates\").\n.decl Answer()\nAnswer() :- Helps_past_gates(\"Kit & Kaboodle\"), Underworld_gates(\"Underworld gates\").\n.output Answer"]}
{"id": 694, "answer": true, "completion": ".decl Is_deadly_weapon(Object:symbol)\nIs_deadly_weapon(\"knife\").\nIs_deadly_weapon(\"gun\").\nIs_deadly_weapon(\"baseball bat\").\n.decl Answer()\nAnswer() :- Is_deadly_weapon(\"ten-pin bowling pin\").\nAnswer() :- !Is_deadly_weapon(\"ten-pin bowling pin\"), Is_deadly_weapon(\"baseball bat\").\n.output Answer", "completions": [".decl Is_deadly_weapon(Object:symbol)\nIs_deadly_weapon(\"knife\").\nIs_deadly_weapon(\"gun\").\nIs_deadly_weapon(\"baseball bat\").\n.decl Answer()\nAnswer() :- Is_deadly_weapon(\"ten-pin bowling pin\").\nAnswer() :- !Is_deadly_weapon(\"ten-pin bowling pin\"), Is_deadly_weapon(\"baseball bat\").\n.output Answer"]}
{"id": 695, "answer": true, "completion": ".decl Dynasty(Name:symbol, Start_year:float, End_year:float)\nDynasty(\"Go\", -1046, -256).\n.decl Person(Name:symbol, Birth_year:float)\nPerson(\"Jia Sidao\", 1213).\n.decl Answer()\nAnswer() :- Dynasty(\"Go\", start_year, end_year), Person(\"Jia Sidao\", birth_year), end_year < birth_year.\n.output Answer", "completions": [".decl Dynasty(Name:symbol, Start_year:float, End_year:float)\nDynasty(\"Go\", -1046, -256).\n.decl Person(Name:symbol, Birth_year:float)\nPerson(\"Jia Sidao\", 1213).\n.decl Answer()\nAnswer() :- Dynasty(\"Go\", start_year, end_year), Person(\"Jia Sidao\", birth_year), end_year < birth_year.\n.output Answer"]}
{"id": 696, "answer": false, "completion": ".decl On_Noahs_Ark(Person:symbol)\nOn_Noahs_Ark(\"Noah\").\nOn_Noahs_Ark(\"Shem\").\nOn_Noahs_Ark(\"Ham\").\nOn_Noahs_Ark(\"Japheth\").\nOn_Noahs_Ark(\"Noah's wife\").\nOn_Noahs_Ark(\"Shem's wife\").\nOn_Noahs_Ark(\"Ham's wife\").\nOn_Noahs_Ark(\"Japheth's wife\").\n.decl Answer()\nAnswer() :- On_Noahs_Ark(person1), On_Noahs_Ark(person2), On_Noahs_Ark(person3), On_Noahs_Ark(person4), On_Noahs_Ark(person5), On_Noahs_Ark(person6), On_Noahs_Ark(person7), On_Noahs_Ark(person8), person1 != person2, person1 != person3, person1 != person4, person1 != person5, person1 != person6, person1 != person7, person1 != person8, person2 != person3, person2 != person4, person2 != person5, person2 != person6, person2 != person7, person2 != person8, person3 != person4, person3 != person5, person3 != person6, person3 != person7, person3 != person8, person4 != person5, person4 != person6, person4 != person7, person4 != person8, person5 != person6, person5 != person7, person5 != person8, person6 != person7, person6 != person8, person7 != person8.\n.output Answer", "completions": [".decl On_Noahs_Ark(Person:symbol)\nOn_Noahs_Ark(\"Noah\").\nOn_Noahs_Ark(\"Shem\").\nOn_Noahs_Ark(\"Ham\").\nOn_Noahs_Ark(\"Japheth\").\nOn_Noahs_Ark(\"Noah's wife\").\nOn_Noahs_Ark(\"Shem's wife\").\nOn_Noahs_Ark(\"Ham's wife\").\nOn_Noahs_Ark(\"Japheth's wife\").\n.decl Answer()\nAnswer() :- On_Noahs_Ark(person1), On_Noahs_Ark(person2), On_Noahs_Ark(person3), On_Noahs_Ark(person4), On_Noahs_Ark(person5), On_Noahs_Ark(person6), On_Noahs_Ark(person7), On_Noahs_Ark(person8), person1 != person2, person1 != person3, person1 != person4, person1 != person5, person1 != person6, person1 != person7, person1 != person8, person2 != person3, person2 != person4, person2 != person5, person2 != person6, person2 != person7, person2 != person8, person3 != person4, person3 != person5, person3 != person6, person3 != person7, person3 != person8, person4 != person5, person4 != person6, person4 != person7, person4 != person8, person5 != person6, person5 != person7, person5 != person8, person6 != person7, person6 != person8, person7 != person8.\n.output Answer"]}
{"id": 697, "answer": false, "completion": ".decl Is_false_pope(Person:symbol)\nIs_false_pope(\"Antipope\").\n.decl Can_become_saint(Person:symbol)\nCan_become_saint(\"Pope\").\n.decl Answer()\nAnswer() :- Is_false_pope(person), Can_become_saint(person).\n.output Answer", "completions": [".decl Is_false_pope(Person:symbol)\nIs_false_pope(\"Antipope\").\n.decl Can_become_saint(Person:symbol)\nCan_become_saint(\"Pope\").\n.decl Answer()\nAnswer() :- Is_false_pope(person), Can_become_saint(person).\n.output Answer"]}
{"id": 698, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Betty White\", 1922).\n.decl Operated_in_years(Airline:symbol, Start_year:float, End_year:float)\nOperated_in_years(\"Northwest Airlines\", 1926, 2010).\n.decl Answer()\nAnswer() :- Born_in_year(\"Betty White\", birth_year), Operated_in_years(\"Northwest Airlines\", start_year, end_year), (end_year - start_year) > (2022 - birth_year).\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Betty White\", 1922).\n.decl Operated_in_years(Airline:symbol, Start_year:float, End_year:float)\nOperated_in_years(\"Northwest Airlines\", 1926, 2010).\n.decl Answer()\nAnswer() :- Born_in_year(\"Betty White\", birth_year), Operated_in_years(\"Northwest Airlines\", start_year, end_year), (end_year - start_year) > (2022 - birth_year).\n.output Answer"]}
{"id": 699, "answer": false, "completion": ".decl Is_physical(Object:symbol)\nIs_physical(\"bitcoin\", false).\n.decl Can_put_in_pocket(Object:symbol)\nCan_put_in_pocket(\"bitcoin\") :- Is_physical(\"bitcoin\", true).\n.decl Answer()\nAnswer() :- Can_put_in_pocket(\"bitcoin\").\n.output Answer", "completions": [".decl Is_physical(Object:symbol)\nIs_physical(\"bitcoin\", false).\n.decl Can_put_in_pocket(Object:symbol)\nCan_put_in_pocket(\"bitcoin\") :- Is_physical(\"bitcoin\", true).\n.decl Answer()\nAnswer() :- Can_put_in_pocket(\"bitcoin\").\n.output Answer"]}
{"id": 700, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Queen Elizabeth I\", 1533).\nBorn_in_year(\"Jean-Paul Sartre\", 1905).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Queen Elizabeth I\", 1603).\nDied_in_year(\"Jean-Paul Sartre\", 1980).\n.decl Wrote_works(Writer:symbol, Start_year:float, End_year:float)\nWrote_works(\"Jean-Paul Sartre\", 1938, 1980).\n.decl Read_works(Reader:symbol, Writer:symbol)\n.decl Answer()\nAnswer() :- Read_works(\"Queen Elizabeth I\", \"Jean-Paul Sartre\").\nAnswer() :- Born_in_year(\"Queen Elizabeth I\", birth_year1), Died_in_year(\"Queen Elizabeth I\", death_year1), Born_in_year(\"Jean-Paul Sartre\", birth_year2), Died_in_year(\"Jean-Paul Sartre\", death_year2), Wrote_works(\"Jean-Paul Sartre\", start_year, end_year), death_year1 >= start_year, birth_year1 <= end_year, birth_year2 <= death_year1.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Queen Elizabeth I\", 1533).\nBorn_in_year(\"Jean-Paul Sartre\", 1905).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Queen Elizabeth I\", 1603).\nDied_in_year(\"Jean-Paul Sartre\", 1980).\n.decl Wrote_works(Writer:symbol, Start_year:float, End_year:float)\nWrote_works(\"Jean-Paul Sartre\", 1938, 1980).\n.decl Read_works(Reader:symbol, Writer:symbol)\n.decl Answer()\nAnswer() :- Read_works(\"Queen Elizabeth I\", \"Jean-Paul Sartre\").\nAnswer() :- Born_in_year(\"Queen Elizabeth I\", birth_year1), Died_in_year(\"Queen Elizabeth I\", death_year1), Born_in_year(\"Jean-Paul Sartre\", birth_year2), Died_in_year(\"Jean-Paul Sartre\", death_year2), Wrote_works(\"Jean-Paul Sartre\", start_year, end_year), death_year1 >= start_year, birth_year1 <= end_year, birth_year2 <= death_year1.\n.output Answer"]}
{"id": 701, "answer": true, "completion": ".decl Looks_different(Object_A:symbol, Object_B:symbol)\nLooks_different(\"anatomical heart\", \"symbolic heart\").\n.decl Answer()\nAnswer() :- Looks_different(\"anatomical heart\", \"symbolic heart\").\n.output Answer", "completions": [".decl Looks_different(Object_A:symbol, Object_B:symbol)\nLooks_different(\"anatomical heart\", \"symbolic heart\").\n.decl Answer()\nAnswer() :- Looks_different(\"anatomical heart\", \"symbolic heart\").\n.output Answer"]}
{"id": 702, "answer": false, "completion": ".decl Is_political_entity(Entity:symbol, Region:symbol)\nIs_political_entity(\"Riksdag\", \"Scandinavia\").\n.decl Answer()\nAnswer() :- Is_political_entity(\"Riksdag\", \"Scandinavia\").\n.output Answer", "completions": [".decl Is_political_entity(Entity:symbol, Region:symbol)\nIs_political_entity(\"Riksdag\", \"Scandinavia\").\n.decl Answer()\nAnswer() :- Is_political_entity(\"Riksdag\", \"Scandinavia\").\n.output Answer"]}
{"id": 703, "answer": true, "completion": ".decl Soup_type(Type:symbol, Solid_content:float)\nSoup_type(\"broth\", 0).\nSoup_type(\"cream\", 0.1).\nSoup_type(\"chunky\", 0.5).\n.decl Liquid_diet_allowed(Solid_content:float)\nLiquid_diet_allowed(0.1).\n.decl Answer()\nAnswer() :- Soup_type(soup, solid_content), Liquid_diet_allowed(allowed_content), solid_content > allowed_content.\n.output Answer", "completions": [".decl Soup_type(Type:symbol, Solid_content:float)\nSoup_type(\"broth\", 0).\nSoup_type(\"cream\", 0.1).\nSoup_type(\"chunky\", 0.5).\n.decl Liquid_diet_allowed(Solid_content:float)\nLiquid_diet_allowed(0.1).\n.decl Answer()\nAnswer() :- Soup_type(soup, solid_content), Liquid_diet_allowed(allowed_content), solid_content > allowed_content.\n.output Answer"]}
{"id": 704, "answer": false, "completion": ".decl Prays_to(Person:symbol, Deity:symbol)\nPrays_to(\"Mary, mother of Jesus\", \"God\").\n.decl Is_Greek(Person:symbol)\nIs_Greek(\"Mary, mother of Jesus\").\n.decl Is_Greek_deity(Deity:symbol)\nIs_Greek_deity(\"Artemis\").\n.decl Answer()\nAnswer() :- Prays_to(\"Mary, mother of Jesus\", \"Artemis\").\nAnswer() :- Prays_to(\"Mary, mother of Jesus\", deity), Is_Greek(\"Mary, mother of Jesus\"), Is_Greek_deity(deity), deity = \"Artemis\".\n.output Answer", "completions": [".decl Prays_to(Person:symbol, Deity:symbol)\nPrays_to(\"Mary, mother of Jesus\", \"God\").\n.decl Is_Greek(Person:symbol)\nIs_Greek(\"Mary, mother of Jesus\").\n.decl Is_Greek_deity(Deity:symbol)\nIs_Greek_deity(\"Artemis\").\n.decl Answer()\nAnswer() :- Prays_to(\"Mary, mother of Jesus\", \"Artemis\").\nAnswer() :- Prays_to(\"Mary, mother of Jesus\", deity), Is_Greek(\"Mary, mother of Jesus\"), Is_Greek_deity(deity), deity = \"Artemis\".\n.output Answer"]}
{"id": 705, "answer": false, "completion": ".decl Sends_to_pole(Sender:symbol, Pole:symbol)\nSends_to_pole(\"children\", \"North Pole\").\n.decl Answer()\nAnswer() :- Sends_to_pole(\"children\", \"South Pole\").\n.output Answer", "completions": [".decl Sends_to_pole(Sender:symbol, Pole:symbol)\nSends_to_pole(\"children\", \"North Pole\").\n.decl Answer()\nAnswer() :- Sends_to_pole(\"children\", \"South Pole\").\n.output Answer"]}
{"id": 706, "answer": false, "completion": ".decl Fought(Fighter_A:symbol, Fighter_B:symbol)\nFought(\"Jack Dempsey\", \"Gene Tunney\").\n.decl Is_current_champion(Fighter:symbol, Organization:symbol)\nIs_current_champion(\"Tyson Fury\", \"WBC\").\n.decl Answer()\nAnswer() :- Fought(\"Jack Dempsey\", fighter), Is_current_champion(fighter, \"WBC\").\n.output Answer", "completions": [".decl Fought(Fighter_A:symbol, Fighter_B:symbol)\nFought(\"Jack Dempsey\", \"Gene Tunney\").\n.decl Is_current_champion(Fighter:symbol, Organization:symbol)\nIs_current_champion(\"Tyson Fury\", \"WBC\").\n.decl Answer()\nAnswer() :- Fought(\"Jack Dempsey\", fighter), Is_current_champion(fighter, \"WBC\").\n.output Answer"]}
{"id": 707, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Peter Griffin\", \"brewing\").\n.decl Is_expert(Person:symbol, Skill:symbol)\nIs_expert(\"Peter Griffin\", \"brewing\").\n.decl Answer()\nAnswer() :- Has_skill(\"Peter Griffin\", \"brewing\"), Is_expert(\"Peter Griffin\", \"brewing\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Peter Griffin\", \"brewing\").\n.decl Is_expert(Person:symbol, Skill:symbol)\nIs_expert(\"Peter Griffin\", \"brewing\").\n.decl Answer()\nAnswer() :- Has_skill(\"Peter Griffin\", \"brewing\"), Is_expert(\"Peter Griffin\", \"brewing\").\n.output Answer"]}
{"id": 708, "answer": true, "completion": ".decl Is_primate(Animal:symbol)\nIs_primate(\"monkey\").\nIs_primate(\"lemur\").\nIs_primate(\"tarsier\").\n.decl Can_fit_in_backpack(Object:symbol)\nCan_fit_in_backpack(\"monkey\").\nCan_fit_in_backpack(\"lemur\").\nCan_fit_in_backpack(\"tarsier\").\n.decl Answer()\nAnswer() :- Is_primate(animal), Can_fit_in_backpack(animal).\n.output Answer", "completions": [".decl Is_primate(Animal:symbol)\nIs_primate(\"monkey\").\nIs_primate(\"lemur\").\nIs_primate(\"tarsier\").\n.decl Can_fit_in_backpack(Object:symbol)\nCan_fit_in_backpack(\"monkey\").\nCan_fit_in_backpack(\"lemur\").\nCan_fit_in_backpack(\"tarsier\").\n.decl Answer()\nAnswer() :- Is_primate(animal), Can_fit_in_backpack(animal).\n.output Answer"]}
{"id": 709, "answer": true, "completion": ".decl Has_album_sales(Artist:symbol, Sales:float)\nHas_album_sales(\"AC/DC\", 200000000).\nHas_album_sales(\"Lil Wayne\", 100000000).\n.decl Has_cost(Object:symbol, Cost:float)\nHas_cost(\"B-52 bomber\", 50000000).\n.decl Can_buy(Artist:symbol, N_bombers:float)\nCan_buy(artist, n_bombers) :- Has_album_sales(artist, sales), Has_cost(\"B-52 bomber\", cost), n_bombers = sales / cost.\n.decl Answer()\nAnswer() :- Can_buy(\"AC/DC\", n_bombers1), Can_buy(\"Lil Wayne\", n_bombers2), n_bombers1 > n_bombers2.\n.output Answer", "completions": [".decl Has_album_sales(Artist:symbol, Sales:float)\nHas_album_sales(\"AC/DC\", 200000000).\nHas_album_sales(\"Lil Wayne\", 100000000).\n.decl Has_cost(Object:symbol, Cost:float)\nHas_cost(\"B-52 bomber\", 50000000).\n.decl Can_buy(Artist:symbol, N_bombers:float)\nCan_buy(artist, n_bombers) :- Has_album_sales(artist, sales), Has_cost(\"B-52 bomber\", cost), n_bombers = sales / cost.\n.decl Answer()\nAnswer() :- Can_buy(\"AC/DC\", n_bombers1), Can_buy(\"Lil Wayne\", n_bombers2), n_bombers1 > n_bombers2.\n.output Answer"]}
{"id": 710, "answer": false, "completion": ".decl Is_in_genre(Artist:symbol, Genre:symbol)\nIs_in_genre(\"Ludacris\", \"hip hop\").\n.decl Is_album_in_genre(Album:symbol, Genre:symbol)\nIs_album_in_genre(\"Binaural\", \"rock\").\n.decl Released_in_decade(Album:symbol, Decade:symbol)\nReleased_in_decade(\"Binaural\", \"2000s\").\n.decl Answer()\nAnswer() :- Is_in_genre(\"Ludacris\", genre), Is_album_in_genre(\"Binaural\", genre), Released_in_decade(\"Binaural\", \"2000s\").\n.output Answer", "completions": [".decl Is_in_genre(Artist:symbol, Genre:symbol)\nIs_in_genre(\"Ludacris\", \"hip hop\").\n.decl Is_album_in_genre(Album:symbol, Genre:symbol)\nIs_album_in_genre(\"Binaural\", \"rock\").\n.decl Released_in_decade(Album:symbol, Decade:symbol)\nReleased_in_decade(\"Binaural\", \"2000s\").\n.decl Answer()\nAnswer() :- Is_in_genre(\"Ludacris\", genre), Is_album_in_genre(\"Binaural\", genre), Released_in_decade(\"Binaural\", \"2000s\").\n.output Answer"]}
{"id": 711, "answer": true, "completion": ".decl Is_in_palm(Object:symbol)\nIs_in_palm(\"palm of your hand\").\n.decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Palm Beach\", \"Florida\").\n.decl Answer()\nAnswer() :- Located_in(\"Palm Beach\", location), !Is_in_palm(location).\n.output Answer", "completions": [".decl Is_in_palm(Object:symbol)\nIs_in_palm(\"palm of your hand\").\n.decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Palm Beach\", \"Florida\").\n.decl Answer()\nAnswer() :- Located_in(\"Palm Beach\", location), !Is_in_palm(location).\n.output Answer"]}
{"id": 712, "answer": true, "completion": ".decl Is_pickled(Object:symbol)\nIs_pickled(\"cucumber\").\n\n.decl Age_in_years(Object:symbol, Age:float)\nAge_in_years(\"pickled cucumber\", 1000).\n\n.decl Shelf_life(Object:symbol, Shelf_life_years:float)\nShelf_life(\"pickled cucumber\", 5).\n\n.decl Answer()\nAnswer() :- Is_pickled(\"cucumber\"), Age_in_years(\"pickled cucumber\", age), Shelf_life(\"pickled cucumber\", shelf_life), age <= shelf_life.\n\n.output Answer", "completions": [".decl Is_pickled(Object:symbol)\nIs_pickled(\"cucumber\").\n\n.decl Age_in_years(Object:symbol, Age:float)\nAge_in_years(\"pickled cucumber\", 1000).\n\n.decl Shelf_life(Object:symbol, Shelf_life_years:float)\nShelf_life(\"pickled cucumber\", 5).\n\n.decl Answer()\nAnswer() :- Is_pickled(\"cucumber\"), Age_in_years(\"pickled cucumber\", age), Shelf_life(\"pickled cucumber\", shelf_life), age <= shelf_life.\n\n.output Answer"]}
{"id": 713, "answer": false, "completion": ".decl Believes_in(GroupName:symbol, Concept:symbol)\nBelieves_in(\"Flat Earthers\", \"flat Earth\").\nBelieves_in(\"Flat Earthers\", \"Earth's magnetic field\").\n.decl Doubts(GroupName:symbol, Concept:symbol)\nDoubts(group, concept) :- Believes_in(group, concept1), !Believes_in(group, concept).\n.decl Answer()\nAnswer() :- Doubts(\"Flat Earthers\", \"Earth's magnetic field\").\n.output Answer", "completions": [".decl Believes_in(GroupName:symbol, Concept:symbol)\nBelieves_in(\"Flat Earthers\", \"flat Earth\").\nBelieves_in(\"Flat Earthers\", \"Earth's magnetic field\").\n.decl Doubts(GroupName:symbol, Concept:symbol)\nDoubts(group, concept) :- Believes_in(group, concept1), !Believes_in(group, concept).\n.decl Answer()\nAnswer() :- Doubts(\"Flat Earthers\", \"Earth's magnetic field\").\n.output Answer"]}
{"id": 714, "answer": true, "completion": ".decl Is_animal(Animal:symbol)\nIs_animal(\"Lolcat\").\n.decl Needs_food(Animal:symbol)\nNeeds_food(\"Lolcat\").\n.decl Answer()\nAnswer() :- Is_animal(\"Lolcat\"), !Needs_food(\"Lolcat\").\n.output Answer", "completions": [".decl Is_animal(Animal:symbol)\nIs_animal(\"Lolcat\").\n.decl Needs_food(Animal:symbol)\nNeeds_food(\"Lolcat\").\n.decl Answer()\nAnswer() :- Is_animal(\"Lolcat\"), !Needs_food(\"Lolcat\").\n.output Answer"]}
{"id": 715, "answer": false, "completion": ".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"outer core of the earth\", 4000).\n.decl Has_boiling_point(Element:symbol, Boiling_point:float)\nHas_boiling_point(\"nickel\", 2913).\n.decl Answer()\nAnswer() :- Has_temperature(\"outer core of the earth\", temperature), Has_boiling_point(\"nickel\", boiling_point), temperature > boiling_point.\n.output Answer", "completions": [".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"outer core of the earth\", 4000).\n.decl Has_boiling_point(Element:symbol, Boiling_point:float)\nHas_boiling_point(\"nickel\", 2913).\n.decl Answer()\nAnswer() :- Has_temperature(\"outer core of the earth\", temperature), Has_boiling_point(\"nickel\", boiling_point), temperature > boiling_point.\n.output Answer"]}
{"id": 716, "answer": false, "completion": ".decl Found_in(Object:symbol, Location:symbol)\nFound_in(\"brown rock fish\", \"Saint Kitts and Nevis\").\n.decl Answer()\nAnswer() :- Found_in(\"brown rock fish\", \"Saint Kitts and Nevis\").\n.output Answer", "completions": [".decl Found_in(Object:symbol, Location:symbol)\nFound_in(\"brown rock fish\", \"Saint Kitts and Nevis\").\n.decl Answer()\nAnswer() :- Found_in(\"brown rock fish\", \"Saint Kitts and Nevis\").\n.output Answer"]}
{"id": 717, "answer": false, "completion": ".decl Has_unlucky_Fridays(Year:symbol, N_unlucky_Fridays:float)\nHas_unlucky_Fridays(\"2015\", 3).\n.decl Average_unlucky_Fridays(N_unlucky_Fridays:float)\nAverage_unlucky_Fridays(2).\n.decl Answer()\nAnswer() :- Has_unlucky_Fridays(\"2015\", n_unlucky_Fridays1), Average_unlucky_Fridays(n_unlucky_Fridays2), n_unlucky_Fridays1 > n_unlucky_Fridays2.\n.output Answer", "completions": [".decl Has_unlucky_Fridays(Year:symbol, N_unlucky_Fridays:float)\nHas_unlucky_Fridays(\"2015\", 3).\n.decl Average_unlucky_Fridays(N_unlucky_Fridays:float)\nAverage_unlucky_Fridays(2).\n.decl Answer()\nAnswer() :- Has_unlucky_Fridays(\"2015\", n_unlucky_Fridays1), Average_unlucky_Fridays(n_unlucky_Fridays2), n_unlucky_Fridays1 > n_unlucky_Fridays2.\n.output Answer"]}
{"id": 718, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"cell\", 0.0001).\nHas_size(\"shoebox\", 30).\n.decl Answer()\nAnswer() :- Has_size(\"cell\", size1), Has_size(\"shoebox\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"cell\", 0.0001).\nHas_size(\"shoebox\", 30).\n.decl Answer()\nAnswer() :- Has_size(\"cell\", size1), Has_size(\"shoebox\", size2), size1 < size2.\n.output Answer"]}
{"id": 719, "answer": false, "completion": ".decl Is_member(Person:symbol, Society:symbol)\nIs_member(\"Isaac Newton\", \"Royal Society\").\nIs_member(\"Charles Darwin\", \"Royal Society\").\n.decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Isaac Newton\", \"physicist\").\nHas_profession(\"Charles Darwin\", \"biologist\").\nHas_profession(\"numerologist\", \"numerologist\").\n.decl Answer()\nAnswer() :- Is_member(numerologist, \"Royal Society\").\nAnswer() :- Has_profession(numerologist, profession), Is_member(person, \"Royal Society\"), Has_profession(person, profession).\n.output Answer", "completions": [".decl Is_member(Person:symbol, Society:symbol)\nIs_member(\"Isaac Newton\", \"Royal Society\").\nIs_member(\"Charles Darwin\", \"Royal Society\").\n.decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Isaac Newton\", \"physicist\").\nHas_profession(\"Charles Darwin\", \"biologist\").\nHas_profession(\"numerologist\", \"numerologist\").\n.decl Answer()\nAnswer() :- Is_member(numerologist, \"Royal Society\").\nAnswer() :- Has_profession(numerologist, profession), Is_member(person, \"Royal Society\"), Has_profession(person, profession).\n.output Answer"]}
{"id": 720, "answer": true, "completion": ".decl Moves_during(Event:symbol, Object:symbol)\nMoves_during(\"hanging\", \"body\").\n.decl Answer()\nAnswer() :- Moves_during(\"hanging\", \"body\").\n.output Answer", "completions": [".decl Moves_during(Event:symbol, Object:symbol)\nMoves_during(\"hanging\", \"body\").\n.decl Answer()\nAnswer() :- Moves_during(\"hanging\", \"body\").\n.output Answer"]}
{"id": 721, "answer": false, "completion": ".decl Used_for_work(Animal:symbol, Location:symbol)\nUsed_for_work(\"moose\", \"near Arendelle\").\n.decl Is_kingdom(Location:symbol)\nIs_kingdom(\"Arendelle\").\n.decl Answer()\nAnswer() :- Used_for_work(\"moose\", location), Is_kingdom(kingdom), location = \"near \" + kingdom.\n.output Answer", "completions": [".decl Used_for_work(Animal:symbol, Location:symbol)\nUsed_for_work(\"moose\", \"near Arendelle\").\n.decl Is_kingdom(Location:symbol)\nIs_kingdom(\"Arendelle\").\n.decl Answer()\nAnswer() :- Used_for_work(\"moose\", location), Is_kingdom(kingdom), location = \"near \" + kingdom.\n.output Answer"]}
{"id": 722, "answer": true, "completion": ".decl Roman_numerals(Letter:symbol)\nRoman_numerals(\"I\").\nRoman_numerals(\"V\").\nRoman_numerals(\"X\").\nRoman_numerals(\"L\").\nRoman_numerals(\"C\").\nRoman_numerals(\"D\").\nRoman_numerals(\"M\").\n.decl Alphabet(Letter:symbol)\nAlphabet(\"A\").\nAlphabet(\"B\").\nAlphabet(\"C\").\nAlphabet(\"D\").\nAlphabet(\"E\").\nAlphabet(\"F\").\nAlphabet(\"G\").\nAlphabet(\"H\").\nAlphabet(\"I\").\nAlphabet(\"J\").\nAlphabet(\"K\").\nAlphabet(\"L\").\nAlphabet(\"M\").\nAlphabet(\"N\").\nAlphabet(\"O\").\nAlphabet(\"P\").\nAlphabet(\"Q\").\nAlphabet(\"R\").\nAlphabet(\"S\").\nAlphabet(\"T\").\nAlphabet(\"U\").\nAlphabet(\"V\").\nAlphabet(\"W\").\nAlphabet(\"X\").\nAlphabet(\"Y\").\nAlphabet(\"Z\").\n.decl Before_H(Letter:symbol)\nBefore_H(\"G\").\n.decl After_H(Letter:symbol)\nAfter_H(\"I\").\n.decl Missing(Letter:symbol)\nMissing(letter) :- Alphabet(letter), !Roman_numerals(letter).\n.decl Answer()\nAnswer() :- Missing(letter1), Before_H(letter1), Missing(letter2), After_H(letter2).\n.output Answer", "completions": [".decl Roman_numerals(Letter:symbol)\nRoman_numerals(\"I\").\nRoman_numerals(\"V\").\nRoman_numerals(\"X\").\nRoman_numerals(\"L\").\nRoman_numerals(\"C\").\nRoman_numerals(\"D\").\nRoman_numerals(\"M\").\n.decl Alphabet(Letter:symbol)\nAlphabet(\"A\").\nAlphabet(\"B\").\nAlphabet(\"C\").\nAlphabet(\"D\").\nAlphabet(\"E\").\nAlphabet(\"F\").\nAlphabet(\"G\").\nAlphabet(\"H\").\nAlphabet(\"I\").\nAlphabet(\"J\").\nAlphabet(\"K\").\nAlphabet(\"L\").\nAlphabet(\"M\").\nAlphabet(\"N\").\nAlphabet(\"O\").\nAlphabet(\"P\").\nAlphabet(\"Q\").\nAlphabet(\"R\").\nAlphabet(\"S\").\nAlphabet(\"T\").\nAlphabet(\"U\").\nAlphabet(\"V\").\nAlphabet(\"W\").\nAlphabet(\"X\").\nAlphabet(\"Y\").\nAlphabet(\"Z\").\n.decl Before_H(Letter:symbol)\nBefore_H(\"G\").\n.decl After_H(Letter:symbol)\nAfter_H(\"I\").\n.decl Missing(Letter:symbol)\nMissing(letter) :- Alphabet(letter), !Roman_numerals(letter).\n.decl Answer()\nAnswer() :- Missing(letter1), Before_H(letter1), Missing(letter2), After_H(letter2).\n.output Answer"]}
{"id": 723, "answer": true, "completion": ".decl Inedible_in_cuisine(Food:symbol, Cuisine:symbol)\nInedible_in_cuisine(\"pig meat\", \"Jewish cuisine\").\nInedible_in_cuisine(\"pig meat\", \"Islamic cuisine\").\n.decl Answer()\nAnswer() :- Inedible_in_cuisine(\"pig meat\", \"Hawaiian cuisine\").\n.output Answer", "completions": [".decl Inedible_in_cuisine(Food:symbol, Cuisine:symbol)\nInedible_in_cuisine(\"pig meat\", \"Jewish cuisine\").\nInedible_in_cuisine(\"pig meat\", \"Islamic cuisine\").\n.decl Answer()\nAnswer() :- Inedible_in_cuisine(\"pig meat\", \"Hawaiian cuisine\").\n.output Answer"]}
{"id": 724, "answer": true, "completion": ".decl Located_in(Place:symbol, Location:symbol)\nLocated_in(\"Esperanza Base\", \"Antarctica\").\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Antarctica\", -20).\n.decl Comfortable_for_sandals(Temperature:float)\nComfortable_for_sandals(temp) :- temp >= 15.\n.decl Answer()\nAnswer() :- Located_in(\"Esperanza Base\", location), Has_temperature(location, temperature), Comfortable_for_sandals(temperature).\n.output Answer", "completions": [".decl Located_in(Place:symbol, Location:symbol)\nLocated_in(\"Esperanza Base\", \"Antarctica\").\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Antarctica\", -20).\n.decl Comfortable_for_sandals(Temperature:float)\nComfortable_for_sandals(temp) :- temp >= 15.\n.decl Answer()\nAnswer() :- Located_in(\"Esperanza Base\", location), Has_temperature(location, temperature), Comfortable_for_sandals(temperature).\n.output Answer"]}
{"id": 725, "answer": true, "completion": ".decl Allergic_to(Character:symbol, Object:symbol)\nAllergic_to(\"The Little Prince\", \"none\").\n.decl Is_a(Object:symbol, Category:symbol)\nIs_a(\"flowers\", \"plants\").\n.decl Answer()\nAnswer() :- Allergic_to(\"The Little Prince\", object), Is_a(object, \"plants\").\n.output Answer", "completions": [".decl Allergic_to(Character:symbol, Object:symbol)\nAllergic_to(\"The Little Prince\", \"none\").\n.decl Is_a(Object:symbol, Category:symbol)\nIs_a(\"flowers\", \"plants\").\n.decl Answer()\nAnswer() :- Allergic_to(\"The Little Prince\", object), Is_a(object, \"plants\").\n.output Answer"]}
{"id": 726, "answer": false, "completion": ".decl Teaches(Subject:symbol, Topic:symbol)\nTeaches(\"cell biology\", \"cell life cycle\").\nTeaches(\"terrorism studies\", \"Al Qaeda life cycle\").\n.decl Answer()\nAnswer() :- Teaches(\"cell biology\", \"Al Qaeda life cycle\").\n.output Answer", "completions": [".decl Teaches(Subject:symbol, Topic:symbol)\nTeaches(\"cell biology\", \"cell life cycle\").\nTeaches(\"terrorism studies\", \"Al Qaeda life cycle\").\n.decl Answer()\nAnswer() :- Teaches(\"cell biology\", \"Al Qaeda life cycle\").\n.output Answer"]}
{"id": 727, "answer": true, "completion": ".decl Has_benefit(Condition:symbol, Treatment:symbol)\nHas_benefit(\"nosebleed\", \"Coca\").\n.decl Answer()\nAnswer() :- Has_benefit(\"nosebleed\", \"Coca\").\n.output Answer", "completions": [".decl Has_benefit(Condition:symbol, Treatment:symbol)\nHas_benefit(\"nosebleed\", \"Coca\").\n.decl Answer()\nAnswer() :- Has_benefit(\"nosebleed\", \"Coca\").\n.output Answer"]}
{"id": 728, "answer": false, "completion": ".decl Votes_in_month(Person:symbol, Month:symbol)\nVotes_in_month(\"Justin Bieber\", \"October\").\n.decl Answer()\nAnswer() :- Votes_in_month(\"Justin Bieber\", \"October\").\n.output Answer", "completions": [".decl Votes_in_month(Person:symbol, Month:symbol)\nVotes_in_month(\"Justin Bieber\", \"October\").\n.decl Answer()\nAnswer() :- Votes_in_month(\"Justin Bieber\", \"October\").\n.output Answer"]}
{"id": 729, "answer": false, "completion": ".decl Is_seasoning(Ingredient:symbol)\nIs_seasoning(\"salt\").\nIs_seasoning(\"pepper\").\nIs_seasoning(\"paprika\").\nIs_seasoning(\"oregano\").\nIs_seasoning(\"thyme\").\n.decl Is_element(Element:symbol)\nIs_element(\"uranium\").\n.decl Answer()\nAnswer() :- Is_seasoning(\"uranium\"), !Is_element(\"uranium\").\nAnswer() :- Is_seasoning(ingredient), Is_element(\"uranium\"), ingredient = \"uranium\".\n.output Answer", "completions": [".decl Is_seasoning(Ingredient:symbol)\nIs_seasoning(\"salt\").\nIs_seasoning(\"pepper\").\nIs_seasoning(\"paprika\").\nIs_seasoning(\"oregano\").\nIs_seasoning(\"thyme\").\n.decl Is_element(Element:symbol)\nIs_element(\"uranium\").\n.decl Answer()\nAnswer() :- Is_seasoning(\"uranium\"), !Is_element(\"uranium\").\nAnswer() :- Is_seasoning(ingredient), Is_element(\"uranium\"), ingredient = \"uranium\".\n.output Answer"]}
{"id": 730, "answer": false, "completion": ".decl Appreciates(Designer:symbol, Person:symbol)\nAppreciates(\"Tokyo Tower designers\", \"Gustave Eiffel\").\n.decl Worked_with(Person_A:symbol, Person_B:symbol)\nWorked_with(\"Gustave Eiffel\", \"Stephen Sauvestre\").\n.decl Answer()\nAnswer() :- Appreciates(\"Tokyo Tower designers\", person), Worked_with(person, \"Stephen Sauvestre\").\n.output Answer", "completions": [".decl Appreciates(Designer:symbol, Person:symbol)\nAppreciates(\"Tokyo Tower designers\", \"Gustave Eiffel\").\n.decl Worked_with(Person_A:symbol, Person_B:symbol)\nWorked_with(\"Gustave Eiffel\", \"Stephen Sauvestre\").\n.decl Answer()\nAnswer() :- Appreciates(\"Tokyo Tower designers\", person), Worked_with(person, \"Stephen Sauvestre\").\n.output Answer"]}
{"id": 731, "answer": true, "completion": ".decl Has_condition(Character:symbol, Condition:symbol)\nHas_condition(\"Scarecrow\", \"Cerebral palsy\").\n.decl Is_human(Character:symbol)\nIs_human(\"Scarecrow\").\n.decl Is_young(Character:symbol)\nIs_young(\"Scarecrow\").\n.decl Can_have_condition(Character:symbol, Condition:symbol)\nCan_have_condition(character, \"Cerebral palsy\") :- Is_human(character), Is_young(character).\n.decl Answer()\nAnswer() :- Can_have_condition(\"Scarecrow\", \"Cerebral palsy\"), Has_condition(\"Scarecrow\", \"Cerebral palsy\").\n.output Answer", "completions": [".decl Has_condition(Character:symbol, Condition:symbol)\nHas_condition(\"Scarecrow\", \"Cerebral palsy\").\n.decl Is_human(Character:symbol)\nIs_human(\"Scarecrow\").\n.decl Is_young(Character:symbol)\nIs_young(\"Scarecrow\").\n.decl Can_have_condition(Character:symbol, Condition:symbol)\nCan_have_condition(character, \"Cerebral palsy\") :- Is_human(character), Is_young(character).\n.decl Answer()\nAnswer() :- Can_have_condition(\"Scarecrow\", \"Cerebral palsy\"), Has_condition(\"Scarecrow\", \"Cerebral palsy\").\n.output Answer"]}
{"id": 732, "answer": false, "completion": ".decl Leap_year(Year:float)\nLeap_year(2000).\nLeap_year(2004).\nLeap_year(2008).\nLeap_year(2012).\nLeap_year(2016).\nLeap_year(2020).\n\n.decl Has_life_span(Species:symbol, Life_span:float)\nHas_life_span(\"hamster\", 3).\n\n.decl Answer()\nAnswer() :- Has_life_span(\"hamster\", life_span), Leap_year(year1), Leap_year(year2), year1 != year2, year2 - year1 <= life_span.\n.output Answer", "completions": [".decl Leap_year(Year:float)\nLeap_year(2000).\nLeap_year(2004).\nLeap_year(2008).\nLeap_year(2012).\nLeap_year(2016).\nLeap_year(2020).\n\n.decl Has_life_span(Species:symbol, Life_span:float)\nHas_life_span(\"hamster\", 3).\n\n.decl Answer()\nAnswer() :- Has_life_span(\"hamster\", life_span), Leap_year(year1), Leap_year(year2), year1 != year2, year2 - year1 <= life_span.\n.output Answer"]}
{"id": 733, "answer": false, "completion": ".decl Married(Person:symbol, Spouse:symbol, Order:float)\nMarried(\"Johann Sebastian Bach\", \"Maria Barbara Bach\", 1).\nMarried(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcken\", 2).\n.decl Died(Person:symbol, Year:float)\nDied(\"Maria Barbara Bach\", 1720).\n.decl Married_in_year(Person:symbol, Spouse:symbol, Year:float)\nMarried_in_year(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcken\", 1721).\n.decl Answer()\nAnswer() :- Married(\"Johann Sebastian Bach\", spouse1, 1), Married(\"Johann Sebastian Bach\", spouse2, 2), Died(spouse1, death_year), Married_in_year(\"Johann Sebastian Bach\", spouse2, marriage_year), death_year < marriage_year.\n.output Answer", "completions": [".decl Married(Person:symbol, Spouse:symbol, Order:float)\nMarried(\"Johann Sebastian Bach\", \"Maria Barbara Bach\", 1).\nMarried(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcken\", 2).\n.decl Died(Person:symbol, Year:float)\nDied(\"Maria Barbara Bach\", 1720).\n.decl Married_in_year(Person:symbol, Spouse:symbol, Year:float)\nMarried_in_year(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcken\", 1721).\n.decl Answer()\nAnswer() :- Married(\"Johann Sebastian Bach\", spouse1, 1), Married(\"Johann Sebastian Bach\", spouse2, 2), Died(spouse1, death_year), Married_in_year(\"Johann Sebastian Bach\", spouse2, marriage_year), death_year < marriage_year.\n.output Answer"]}
{"id": 734, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"baby gray whale\", 4.5).\nHas_length(\"tractor-trailer\", 16).\n.decl Answer()\nAnswer() :- Has_length(\"baby gray whale\", length1), Has_length(\"tractor-trailer\", length2), length1 <= length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"baby gray whale\", 4.5).\nHas_length(\"tractor-trailer\", 16).\n.decl Answer()\nAnswer() :- Has_length(\"baby gray whale\", length1), Has_length(\"tractor-trailer\", length2), length1 <= length2.\n.output Answer"]}
{"id": 735, "answer": true, "completion": ".decl Is_main_ingredient(Ingredient:symbol, Dish:symbol)\nIs_main_ingredient(\"ground bell peppers\", \"black pepper\").\nIs_main_ingredient(\"ground black peppercorns\", \"black pepper\").\n.decl Answer()\nAnswer() :- Is_main_ingredient(\"ground bell peppers\", \"black pepper\"), !Is_main_ingredient(\"ground black peppercorns\", \"black pepper\").\n.output Answer", "completions": [".decl Is_main_ingredient(Ingredient:symbol, Dish:symbol)\nIs_main_ingredient(\"ground bell peppers\", \"black pepper\").\nIs_main_ingredient(\"ground black peppercorns\", \"black pepper\").\n.decl Answer()\nAnswer() :- Is_main_ingredient(\"ground bell peppers\", \"black pepper\"), !Is_main_ingredient(\"ground black peppercorns\", \"black pepper\").\n.output Answer"]}
{"id": 736, "answer": true, "completion": ".decl Taught(Teacher:symbol, Student:symbol, Skill:symbol)\nTaught(\"Native American tribes\", \"Spaniards\", \"cultivate maize\").\n.decl Answer()\nAnswer() :- Taught(\"Native American tribes\", \"Spaniards\", \"cultivate maize\").\n.output Answer", "completions": [".decl Taught(Teacher:symbol, Student:symbol, Skill:symbol)\nTaught(\"Native American tribes\", \"Spaniards\", \"cultivate maize\").\n.decl Answer()\nAnswer() :- Taught(\"Native American tribes\", \"Spaniards\", \"cultivate maize\").\n.output Answer"]}
{"id": 737, "answer": true, "completion": ".decl Lived_in_years(Person:symbol, Birth_year:float, Death_year:float)\nLived_in_years(\"Sojourner Truth\", 1797, 1883).\n.decl Built_in_year(Structure:symbol, Year:float)\nBuilt_in_year(\"Washington Monument\", 1884).\n.decl Has_elevator(Structure:symbol)\nHas_elevator(\"Washington Monument\").\n.decl Answer()\nAnswer() :- Lived_in_years(\"Sojourner Truth\", birth_year, death_year), Built_in_year(\"Washington Monument\", built_year), Has_elevator(\"Washington Monument\"), death_year >= built_year.\n.output Answer", "completions": [".decl Lived_in_years(Person:symbol, Birth_year:float, Death_year:float)\nLived_in_years(\"Sojourner Truth\", 1797, 1883).\n.decl Built_in_year(Structure:symbol, Year:float)\nBuilt_in_year(\"Washington Monument\", 1884).\n.decl Has_elevator(Structure:symbol)\nHas_elevator(\"Washington Monument\").\n.decl Answer()\nAnswer() :- Lived_in_years(\"Sojourner Truth\", birth_year, death_year), Built_in_year(\"Washington Monument\", built_year), Has_elevator(\"Washington Monument\"), death_year >= built_year.\n.output Answer"]}
{"id": 738, "answer": true, "completion": ".decl Is_psychologist(Person:symbol)\nIs_psychologist(\"psychologist\").\n.decl Can_say_hello(Person:symbol, Location:symbol)\nCan_say_hello(\"psychologist\", \"supermarket\").\n.decl Answer()\nAnswer() :- Is_psychologist(person), Can_say_hello(person, \"supermarket\").\n.output Answer", "completions": [".decl Is_psychologist(Person:symbol)\nIs_psychologist(\"psychologist\").\n.decl Can_say_hello(Person:symbol, Location:symbol)\nCan_say_hello(\"psychologist\", \"supermarket\").\n.decl Answer()\nAnswer() :- Is_psychologist(person), Can_say_hello(person, \"supermarket\").\n.output Answer"]}
{"id": 739, "answer": true, "completion": ".decl Has_occurrences(Title:symbol, Occurrences:float)\nHas_occurrences(\"Hamlet\", 300).\nHas_occurrences(\"Comedy of Errors\", 100).\n.decl Answer()\nAnswer() :- Has_occurrences(\"Hamlet\", occurrences1), Has_occurrences(\"Comedy of Errors\", occurrences2), occurrences1 > occurrences2.\n.output Answer", "completions": [".decl Has_occurrences(Title:symbol, Occurrences:float)\nHas_occurrences(\"Hamlet\", 300).\nHas_occurrences(\"Comedy of Errors\", 100).\n.decl Answer()\nAnswer() :- Has_occurrences(\"Hamlet\", occurrences1), Has_occurrences(\"Comedy of Errors\", occurrences2), occurrences1 > occurrences2.\n.output Answer"]}
{"id": 740, "answer": true, "completion": ".decl Has_graffiti(Location:symbol, Type:symbol)\nHas_graffiti(\"Alcatraz\", \"historic\").\n.decl Answer()\nAnswer() :- Has_graffiti(\"Alcatraz\", \"historic\").\n.output Answer", "completions": [".decl Has_graffiti(Location:symbol, Type:symbol)\nHas_graffiti(\"Alcatraz\", \"historic\").\n.decl Answer()\nAnswer() :- Has_graffiti(\"Alcatraz\", \"historic\").\n.output Answer"]}
{"id": 741, "answer": true, "completion": ".decl Distance(Object:symbol, Distance_km:float)\nDistance(\"Pyrenees\", 430).\n.decl Speed(Object:symbol, Speed_kph:float)\nSpeed(\"elite runner\", 20).\n.decl Time(Object:symbol, Time_hours:float)\nTime(\"one day\", 24).\n.decl Answer()\nAnswer() :- Distance(\"Pyrenees\", distance), Speed(\"elite runner\", speed), Time(\"one day\", time), (distance / speed) <= time.\n.output Answer", "completions": [".decl Distance(Object:symbol, Distance_km:float)\nDistance(\"Pyrenees\", 430).\n.decl Speed(Object:symbol, Speed_kph:float)\nSpeed(\"elite runner\", 20).\n.decl Time(Object:symbol, Time_hours:float)\nTime(\"one day\", 24).\n.decl Answer()\nAnswer() :- Distance(\"Pyrenees\", distance), Speed(\"elite runner\", speed), Time(\"one day\", time), (distance / speed) <= time.\n.output Answer"]}
{"id": 742, "answer": false, "completion": ".decl Is_visible(Object:symbol, Location:symbol)\nIs_visible(\"moon\", \"outdoor\").\n.decl Is_location_type(Location:symbol, Type:symbol)\nIs_location_type(\"Wembley Arena\", \"indoor\").\n.decl Answer()\nAnswer() :- Is_visible(\"moon\", location_type), Is_location_type(\"Wembley Arena\", location_type).\n.output Answer", "completions": [".decl Is_visible(Object:symbol, Location:symbol)\nIs_visible(\"moon\", \"outdoor\").\n.decl Is_location_type(Location:symbol, Type:symbol)\nIs_location_type(\"Wembley Arena\", \"indoor\").\n.decl Answer()\nAnswer() :- Is_visible(\"moon\", location_type), Is_location_type(\"Wembley Arena\", location_type).\n.output Answer"]}
{"id": 743, "answer": true, "completion": ".decl Is_palindrome(Word:symbol)\nIs_palindrome(\"qweewq\").\n.decl Has_first_letter_row(Word:symbol)\nHas_first_letter_row(\"qweewq\").\n.decl Answer()\nAnswer() :- Is_palindrome(word), Has_first_letter_row(word).\n.output Answer", "completions": [".decl Is_palindrome(Word:symbol)\nIs_palindrome(\"qweewq\").\n.decl Has_first_letter_row(Word:symbol)\nHas_first_letter_row(\"qweewq\").\n.decl Answer()\nAnswer() :- Is_palindrome(word), Has_first_letter_row(word).\n.output Answer"]}
{"id": 744, "answer": true, "completion": ".decl Discovered_on(Object:symbol, Location:symbol)\nDiscovered_on(\"tumulus\", \"Earth\").\n.decl Answer()\nAnswer() :- Discovered_on(\"tumulus\", \"Mars\").\n.output Answer", "completions": [".decl Discovered_on(Object:symbol, Location:symbol)\nDiscovered_on(\"tumulus\", \"Earth\").\n.decl Answer()\nAnswer() :- Discovered_on(\"tumulus\", \"Mars\").\n.output Answer"]}
{"id": 745, "answer": true, "completion": ".decl Represents(Symbol:symbol, Attribute:symbol, Gender:symbol)\nRepresents(\"Pan\", \"fertility\", \"both\").\nRepresents(\"Pan\", \"nature\", \"both\").\nRepresents(\"Pan\", \"wild\", \"both\").\n.decl Answer()\nAnswer() :- Represents(\"Pan\", \"virtue\", \"women\"), Represents(\"Pan\", \"virginity\", \"women\").\n.output Answer", "completions": [".decl Represents(Symbol:symbol, Attribute:symbol, Gender:symbol)\nRepresents(\"Pan\", \"fertility\", \"both\").\nRepresents(\"Pan\", \"nature\", \"both\").\nRepresents(\"Pan\", \"wild\", \"both\").\n.decl Answer()\nAnswer() :- Represents(\"Pan\", \"virtue\", \"women\"), Represents(\"Pan\", \"virginity\", \"women\").\n.output Answer"]}
{"id": 746, "answer": false, "completion": ".decl Takes_position(Person:symbol, Position:symbol, Year:float)\nTakes_position(\"Justin Bieber\", \"Mike Pence's position\", 2020).\n.decl Answer()\nAnswer() :- Takes_position(\"Justin Bieber\", \"Mike Pence's position\", 2020).\n.output Answer", "completions": [".decl Takes_position(Person:symbol, Position:symbol, Year:float)\nTakes_position(\"Justin Bieber\", \"Mike Pence's position\", 2020).\n.decl Answer()\nAnswer() :- Takes_position(\"Justin Bieber\", \"Mike Pence's position\", 2020).\n.output Answer"]}
{"id": 747, "answer": true, "completion": ".decl Song_title(Title:symbol, Year:float, Artist:symbol)\nSong_title(\"Diamonds Are Forever\", 1971, \"Shirley Bassey\").\n.decl Has_property(Object:symbol, Property:symbol, Value:bool)\nHas_property(\"diamond\", \"forever\", false).\n.decl Answer()\nAnswer() :- Song_title(title, 1971, \"Shirley Bassey\"), Has_property(\"diamond\", \"forever\", false), title = \"Diamonds Are Forever\".\n.output Answer", "completions": [".decl Song_title(Title:symbol, Year:float, Artist:symbol)\nSong_title(\"Diamonds Are Forever\", 1971, \"Shirley Bassey\").\n.decl Has_property(Object:symbol, Property:symbol, Value:bool)\nHas_property(\"diamond\", \"forever\", false).\n.decl Answer()\nAnswer() :- Song_title(title, 1971, \"Shirley Bassey\"), Has_property(\"diamond\", \"forever\", false), title = \"Diamonds Are Forever\".\n.output Answer"]}
{"id": 748, "answer": true, "completion": ".decl Participated_in_war(Country:symbol, War:symbol, Result:symbol)\nParticipated_in_war(\"France\", \"French Revolution\", \"win\").\n.decl Answer()\nAnswer() :- Participated_in_war(\"France\", \"French Revolution\", \"win\").\n.output Answer", "completions": [".decl Participated_in_war(Country:symbol, War:symbol, Result:symbol)\nParticipated_in_war(\"France\", \"French Revolution\", \"win\").\n.decl Answer()\nAnswer() :- Participated_in_war(\"France\", \"French Revolution\", \"win\").\n.output Answer"]}
{"id": 749, "answer": true, "completion": ".decl Is_legal(Object:symbol, Legal:float)\nIs_legal(\"classic nintendo games for emulator\", 0).\n.decl Answer()\nAnswer() :- Is_legal(\"classic nintendo games for emulator\", legal), legal = 1.\n.output Answer", "completions": [".decl Is_legal(Object:symbol, Legal:float)\nIs_legal(\"classic nintendo games for emulator\", 0).\n.decl Answer()\nAnswer() :- Is_legal(\"classic nintendo games for emulator\", legal), legal = 1.\n.output Answer"]}
{"id": 750, "answer": false, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Greek hero Jason\", 7).\n.decl Has_n_players(Team:symbol, N_players:float)\nHas_n_players(\"polo team\", 4).\n.decl Answer()\nAnswer() :- Has_n_children(\"Greek hero Jason\", n_children), Has_n_players(\"polo team\", n_players), n_children >= n_players.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Greek hero Jason\", 7).\n.decl Has_n_players(Team:symbol, N_players:float)\nHas_n_players(\"polo team\", 4).\n.decl Answer()\nAnswer() :- Has_n_children(\"Greek hero Jason\", n_children), Has_n_players(\"polo team\", n_players), n_children >= n_players.\n.output Answer"]}
{"id": 751, "answer": true, "completion": ".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Tony Bennett\", \"Dominick\").\n.decl Is_former_UFC_champion(Person:symbol)\nIs_former_UFC_champion(\"Dominick Cruz\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Tony Bennett\", middle_name), Is_former_UFC_champion(champion), Has_middle_name(champion, middle_name).\n.output Answer", "completions": [".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Tony Bennett\", \"Dominick\").\n.decl Is_former_UFC_champion(Person:symbol)\nIs_former_UFC_champion(\"Dominick Cruz\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Tony Bennett\", middle_name), Is_former_UFC_champion(champion), Has_middle_name(champion, middle_name).\n.output Answer"]}
{"id": 752, "answer": true, "completion": ".decl Has_cream_at_top(Milk_type:symbol)\nHas_cream_at_top(\"raw milk\").\n.decl Is_store_bought(Milk_type:symbol)\nIs_store_bought(\"pasteurized milk\").\nIs_store_bought(\"homogenized milk\").\n.decl Answer()\nAnswer() :- Has_cream_at_top(milk_type), Is_store_bought(milk_type).\n.output Answer", "completions": [".decl Has_cream_at_top(Milk_type:symbol)\nHas_cream_at_top(\"raw milk\").\n.decl Is_store_bought(Milk_type:symbol)\nIs_store_bought(\"pasteurized milk\").\nIs_store_bought(\"homogenized milk\").\n.decl Answer()\nAnswer() :- Has_cream_at_top(milk_type), Is_store_bought(milk_type).\n.output Answer"]}
{"id": 753, "answer": true, "completion": ".decl Is_important(Element:symbol, Location:symbol)\nIs_important(\"silicon\", \"Silicon Valley\").\n.decl Is_in_state(Location:symbol, State:symbol)\nIs_in_state(\"Silicon Valley\", \"California\").\n.decl Answer()\nAnswer() :- Is_important(\"silicon\", location), Is_in_state(location, \"California\").\n.output Answer", "completions": [".decl Is_important(Element:symbol, Location:symbol)\nIs_important(\"silicon\", \"Silicon Valley\").\n.decl Is_in_state(Location:symbol, State:symbol)\nIs_in_state(\"Silicon Valley\", \"California\").\n.decl Answer()\nAnswer() :- Is_important(\"silicon\", location), Is_in_state(location, \"California\").\n.output Answer"]}
{"id": 754, "answer": false, "completion": ".decl Has_population(Location:symbol, Population:float)\nHas_population(\"Bunkie Louisiana\", 4000).\n.decl Has_n_words(Text:symbol, N_words:float)\nHas_n_words(\"Torah\", 304805).\n.decl Answer()\nAnswer() :- Has_population(\"Bunkie Louisiana\", population), Has_n_words(\"Torah\", n_words), n_words >= population.\n.output Answer", "completions": [".decl Has_population(Location:symbol, Population:float)\nHas_population(\"Bunkie Louisiana\", 4000).\n.decl Has_n_words(Text:symbol, N_words:float)\nHas_n_words(\"Torah\", 304805).\n.decl Answer()\nAnswer() :- Has_population(\"Bunkie Louisiana\", population), Has_n_words(\"Torah\", n_words), n_words >= population.\n.output Answer"]}
{"id": 755, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"celery\", 0.001).\n.decl Prevents_disease(Food:symbol, Disease:symbol)\nPrevents_disease(\"celery\", \"diabetes\").\n.decl Eats_weight_in_food(Person:symbol, Food:symbol, Weight:float)\nEats_weight_in_food(\"person\", \"celery\", 70).\n.decl Answer()\nAnswer() :- Eats_weight_in_food(\"person\", \"celery\", weight), Has_weight(\"celery\", celery_weight), weight >= 70 * celery_weight, Prevents_disease(\"celery\", \"diabetes\").\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"celery\", 0.001).\n.decl Prevents_disease(Food:symbol, Disease:symbol)\nPrevents_disease(\"celery\", \"diabetes\").\n.decl Eats_weight_in_food(Person:symbol, Food:symbol, Weight:float)\nEats_weight_in_food(\"person\", \"celery\", 70).\n.decl Answer()\nAnswer() :- Eats_weight_in_food(\"person\", \"celery\", weight), Has_weight(\"celery\", celery_weight), weight >= 70 * celery_weight, Prevents_disease(\"celery\", \"diabetes\").\n.output Answer"]}
{"id": 756, "answer": false, "completion": ".decl Has_storage_capacity(Device:symbol, Capacity:float)\nHas_storage_capacity(\"500GB USB device\", 500).\n.decl Has_data_usage(Service:symbol, Usage_per_hour:float)\nHas_data_usage(\"Netflix\", 3).\n.decl Answer()\nAnswer() :- Has_storage_capacity(\"500GB USB device\", capacity), Has_data_usage(\"Netflix\", usage_per_hour), 10 * usage_per_hour <= capacity.\n.output Answer", "completions": [".decl Has_storage_capacity(Device:symbol, Capacity:float)\nHas_storage_capacity(\"500GB USB device\", 500).\n.decl Has_data_usage(Service:symbol, Usage_per_hour:float)\nHas_data_usage(\"Netflix\", 3).\n.decl Answer()\nAnswer() :- Has_storage_capacity(\"500GB USB device\", capacity), Has_data_usage(\"Netflix\", usage_per_hour), 10 * usage_per_hour <= capacity.\n.output Answer"]}
{"id": 757, "answer": false, "completion": ".decl Can_deadlift(Person:symbol, Object:symbol)\nCan_deadlift(\"Arnold Schwarzenegger\", \"400 kg\").\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"adult Black rhinoceros\", 1400).\n.decl Answer()\nAnswer() :- Can_deadlift(\"Arnold Schwarzenegger\", weight1), Has_weight(\"adult Black rhinoceros\", weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Can_deadlift(Person:symbol, Object:symbol)\nCan_deadlift(\"Arnold Schwarzenegger\", \"400 kg\").\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"adult Black rhinoceros\", 1400).\n.decl Answer()\nAnswer() :- Can_deadlift(\"Arnold Schwarzenegger\", weight1), Has_weight(\"adult Black rhinoceros\", weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 758, "answer": true, "completion": ".decl Produced_by(Show:symbol, Producer:symbol)\nProduced_by(\"The Mandalorian\", \"Disney\").\nProduced_by(\"Star Wars: The Clone Wars\", \"Disney\").\nProduced_by(\"Star Wars: Rebels\", \"Disney\").\n.decl Is_Star_Wars_show(Show:symbol)\nIs_Star_Wars_show(\"The Mandalorian\").\nIs_Star_Wars_show(\"Star Wars: The Clone Wars\").\nIs_Star_Wars_show(\"Star Wars: Rebels\").\n.decl Answer()\nAnswer() :- Produced_by(show, \"Disney\"), Is_Star_Wars_show(show), Produced_by(show2, \"Disney\"), Is_Star_Wars_show(show2), show != show2.\n.output Answer", "completions": [".decl Produced_by(Show:symbol, Producer:symbol)\nProduced_by(\"The Mandalorian\", \"Disney\").\nProduced_by(\"Star Wars: The Clone Wars\", \"Disney\").\nProduced_by(\"Star Wars: Rebels\", \"Disney\").\n.decl Is_Star_Wars_show(Show:symbol)\nIs_Star_Wars_show(\"The Mandalorian\").\nIs_Star_Wars_show(\"Star Wars: The Clone Wars\").\nIs_Star_Wars_show(\"Star Wars: Rebels\").\n.decl Answer()\nAnswer() :- Produced_by(show, \"Disney\"), Is_Star_Wars_show(show), Produced_by(show2, \"Disney\"), Is_Star_Wars_show(show2), show != show2.\n.output Answer"]}
{"id": 759, "answer": true, "completion": ".decl Saved_life(Medicine:symbol, Person:symbol)\nSaved_life(\"polio medicine\", \"Jonas Salk\").\n.decl Created_vaccine(Person:symbol, Vaccine:symbol)\nCreated_vaccine(\"Jonas Salk\", \"polio vaccine\").\n.decl Answer()\nAnswer() :- Saved_life(\"polio medicine\", person), Created_vaccine(person, \"polio vaccine\").\n.output Answer", "completions": [".decl Saved_life(Medicine:symbol, Person:symbol)\nSaved_life(\"polio medicine\", \"Jonas Salk\").\n.decl Created_vaccine(Person:symbol, Vaccine:symbol)\nCreated_vaccine(\"Jonas Salk\", \"polio vaccine\").\n.decl Answer()\nAnswer() :- Saved_life(\"polio medicine\", person), Created_vaccine(person, \"polio vaccine\").\n.output Answer"]}
{"id": 760, "answer": true, "completion": ".decl Is_vegan(Person:symbol)\nIs_vegan(\"someone\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"someone\", \"honey\").\n.decl Is_vegan_food(Food:symbol)\nIs_vegan_food(\"fruits\").\nIs_vegan_food(\"vegetables\").\nIs_vegan_food(\"grains\").\nIs_vegan_food(\"legumes\").\nIs_vegan_food(\"nuts\").\nIs_vegan_food(\"seeds\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Eats(person, food), !Is_vegan_food(food).\n.output Answer", "completions": [".decl Is_vegan(Person:symbol)\nIs_vegan(\"someone\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"someone\", \"honey\").\n.decl Is_vegan_food(Food:symbol)\nIs_vegan_food(\"fruits\").\nIs_vegan_food(\"vegetables\").\nIs_vegan_food(\"grains\").\nIs_vegan_food(\"legumes\").\nIs_vegan_food(\"nuts\").\nIs_vegan_food(\"seeds\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Eats(person, food), !Is_vegan_food(food).\n.output Answer"]}
{"id": 761, "answer": true, "completion": ".decl Handles_cargo(Port:symbol, Cargo:symbol, Capacity:float)\nHandles_cargo(\"Port of Baltimore\", \"ginger\", 10000000).\n.decl Produces_cargo(World:symbol, Cargo:symbol, Production:float)\nProduces_cargo(\"world\", \"ginger\", 2500000).\n.decl Answer()\nAnswer() :- Handles_cargo(\"Port of Baltimore\", \"ginger\", capacity), Produces_cargo(\"world\", \"ginger\", production), capacity >= production.\n.output Answer", "completions": [".decl Handles_cargo(Port:symbol, Cargo:symbol, Capacity:float)\nHandles_cargo(\"Port of Baltimore\", \"ginger\", 10000000).\n.decl Produces_cargo(World:symbol, Cargo:symbol, Production:float)\nProduces_cargo(\"world\", \"ginger\", 2500000).\n.decl Answer()\nAnswer() :- Handles_cargo(\"Port of Baltimore\", \"ginger\", capacity), Produces_cargo(\"world\", \"ginger\", production), capacity >= production.\n.output Answer"]}
{"id": 762, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Rachel Carson\", 1907).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Rachel Carson\", 1964).\n.decl First_moon_landing(Year:float)\nFirst_moon_landing(1969).\n.decl Answer()\nAnswer() :- Born_in_year(\"Rachel Carson\", birth_year), Died_in_year(\"Rachel Carson\", death_year), First_moon_landing(year), birth_year <= year, death_year >= year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Rachel Carson\", 1907).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Rachel Carson\", 1964).\n.decl First_moon_landing(Year:float)\nFirst_moon_landing(1969).\n.decl Answer()\nAnswer() :- Born_in_year(\"Rachel Carson\", birth_year), Died_in_year(\"Rachel Carson\", death_year), First_moon_landing(year), birth_year <= year, death_year >= year.\n.output Answer"]}
{"id": 763, "answer": true, "completion": ".decl Has_quinceanera(Person:symbol)\n.decl Asks_for_quinceanera(Person:symbol, Parent:symbol)\n.decl Is_father_of(Parent:symbol, Person:symbol)\n\nAsks_for_quinceanera(\"J. D. Salinger\", \"his father\").\nIs_father_of(\"his father\", \"J. D. Salinger\").\n\n.decl Answer()\nAnswer() :- Asks_for_quinceanera(\"J. D. Salinger\", parent), Is_father_of(parent, \"J. D. Salinger\"), !Has_quinceanera(\"J. D. Salinger\").\n.output Answer", "completions": [".decl Has_quinceanera(Person:symbol)\n.decl Asks_for_quinceanera(Person:symbol, Parent:symbol)\n.decl Is_father_of(Parent:symbol, Person:symbol)\n\nAsks_for_quinceanera(\"J. D. Salinger\", \"his father\").\nIs_father_of(\"his father\", \"J. D. Salinger\").\n\n.decl Answer()\nAnswer() :- Asks_for_quinceanera(\"J. D. Salinger\", parent), Is_father_of(parent, \"J. D. Salinger\"), !Has_quinceanera(\"J. D. Salinger\").\n.output Answer"]}
{"id": 764, "answer": true, "completion": ".decl Ancient_Olympics_crown(Crown:symbol, Hides_tonsure:bool)\nAncient_Olympics_crown(\"olive_wreath\", false).\n.decl Answer()\nAnswer() :- Ancient_Olympics_crown(\"olive_wreath\", hides_tonsure), !hides_tonsure.\n.output Answer", "completions": [".decl Ancient_Olympics_crown(Crown:symbol, Hides_tonsure:bool)\nAncient_Olympics_crown(\"olive_wreath\", false).\n.decl Answer()\nAnswer() :- Ancient_Olympics_crown(\"olive_wreath\", hides_tonsure), !hides_tonsure.\n.output Answer"]}
{"id": 765, "answer": true, "completion": ".decl Has_caloric_intake(Animal:symbol, Calories:float)\nHas_caloric_intake(\"ocelot\", 800).\n.decl Has_caloric_content(Animal:symbol, Calories:float)\nHas_caloric_content(\"bee hummingbird\", 10).\n.decl Answer()\nAnswer() :- Has_caloric_intake(\"ocelot\", intake), Has_caloric_content(\"bee hummingbird\", content), content * 1 >= intake.\n.output Answer", "completions": [".decl Has_caloric_intake(Animal:symbol, Calories:float)\nHas_caloric_intake(\"ocelot\", 800).\n.decl Has_caloric_content(Animal:symbol, Calories:float)\nHas_caloric_content(\"bee hummingbird\", 10).\n.decl Answer()\nAnswer() :- Has_caloric_intake(\"ocelot\", intake), Has_caloric_content(\"bee hummingbird\", content), content * 1 >= intake.\n.output Answer"]}
{"id": 766, "answer": false, "completion": ".decl Prefers(Food_A:symbol, Food_B:symbol, Animal:symbol)\nPrefers(\"eucalyptus\", \"meat\", \"koala\").\n.decl Answer()\nAnswer() :- Prefers(\"eucalyptus\", \"meat\", \"koala\").\n.output Answer", "completions": [".decl Prefers(Food_A:symbol, Food_B:symbol, Animal:symbol)\nPrefers(\"eucalyptus\", \"meat\", \"koala\").\n.decl Answer()\nAnswer() :- Prefers(\"eucalyptus\", \"meat\", \"koala\").\n.output Answer"]}
{"id": 767, "answer": true, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"horse\", \"fetlock\").\n.decl Is_related(Object_A:symbol, Object_B:symbol)\nIs_related(\"horseradish\", \"horse\").\n.decl Answer()\nAnswer() :- Has_part(\"horseradish\", \"fetlock\").\nAnswer() :- Is_related(\"horseradish\", object), Has_part(object, \"fetlock\").\n.output Answer", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"horse\", \"fetlock\").\n.decl Is_related(Object_A:symbol, Object_B:symbol)\nIs_related(\"horseradish\", \"horse\").\n.decl Answer()\nAnswer() :- Has_part(\"horseradish\", \"fetlock\").\nAnswer() :- Is_related(\"horseradish\", object), Has_part(object, \"fetlock\").\n.output Answer"]}
{"id": 768, "answer": true, "completion": ".decl Prevents_abortion(Method:symbol, Absolute:float)\nPrevents_abortion(\"contraception\", 0.99).\nPrevents_abortion(\"abstinence\", 1).\n.decl Answer()\nAnswer() :- Prevents_abortion(method, absolute), absolute = 1.\n.output Answer", "completions": [".decl Prevents_abortion(Method:symbol, Absolute:float)\nPrevents_abortion(\"contraception\", 0.99).\nPrevents_abortion(\"abstinence\", 1).\n.decl Answer()\nAnswer() :- Prevents_abortion(method, absolute), absolute = 1.\n.output Answer"]}
{"id": 769, "answer": true, "completion": ".decl Plays_in_club(Artist:symbol, Club_type:symbol)\nPlays_in_club(\"Rammstein\", \"rock\").\nPlays_in_club(\"Rammstein\", \"metal\").\n.decl Answer()\nAnswer() :- Plays_in_club(\"Rammstein\", \"smooth jazz\").\nAnswer() :- !Plays_in_club(\"Rammstein\", \"smooth jazz\").\n.output Answer", "completions": [".decl Plays_in_club(Artist:symbol, Club_type:symbol)\nPlays_in_club(\"Rammstein\", \"rock\").\nPlays_in_club(\"Rammstein\", \"metal\").\n.decl Answer()\nAnswer() :- Plays_in_club(\"Rammstein\", \"smooth jazz\").\nAnswer() :- !Plays_in_club(\"Rammstein\", \"smooth jazz\").\n.output Answer"]}
{"id": 770, "answer": true, "completion": ".decl Is_child_of(Person:symbol, Parent:symbol)\nIs_child_of(\"Guy Johnson\", \"Maya Angelou\").\n.decl Follows_footsteps(Person:symbol, Parent:symbol)\nFollows_footsteps(\"Guy Johnson\", \"Maya Angelou\").\n.decl Answer()\nAnswer() :- Is_child_of(child, \"Maya Angelou\"), Follows_footsteps(child, \"Maya Angelou\").\n.output Answer", "completions": [".decl Is_child_of(Person:symbol, Parent:symbol)\nIs_child_of(\"Guy Johnson\", \"Maya Angelou\").\n.decl Follows_footsteps(Person:symbol, Parent:symbol)\nFollows_footsteps(\"Guy Johnson\", \"Maya Angelou\").\n.decl Answer()\nAnswer() :- Is_child_of(child, \"Maya Angelou\"), Follows_footsteps(child, \"Maya Angelou\").\n.output Answer"]}
{"id": 771, "answer": true, "completion": ".decl Fits_inside(Object1:symbol, Object2:symbol)\nFits_inside(\"Alfa Romeo vehicle\", \"barn\").\n.decl Answer()\nAnswer() :- Fits_inside(\"Alfa Romeo vehicle\", \"barn\").\n.output Answer", "completions": [".decl Fits_inside(Object1:symbol, Object2:symbol)\nFits_inside(\"Alfa Romeo vehicle\", \"barn\").\n.decl Answer()\nAnswer() :- Fits_inside(\"Alfa Romeo vehicle\", \"barn\").\n.output Answer"]}
{"id": 772, "answer": true, "completion": ".decl Believes(Person:symbol, Idea:symbol)\nBelieves(\"James Watson\", \"Africans are inferior to Europeans\").\n.decl Answer()\nAnswer() :- Believes(\"James Watson\", \"Africans are inferior to Europeans\").\n.output Answer", "completions": [".decl Believes(Person:symbol, Idea:symbol)\nBelieves(\"James Watson\", \"Africans are inferior to Europeans\").\n.decl Answer()\nAnswer() :- Believes(\"James Watson\", \"Africans are inferior to Europeans\").\n.output Answer"]}
{"id": 773, "answer": true, "completion": ".decl Taught_in_grade(Author:symbol, Grade:float)\nTaught_in_grade(\"P. G. Wodehouse\", \"high school\").\nTaught_in_grade(\"P. G. Wodehouse\", \"college\").\n.decl Answer()\nAnswer() :- Taught_in_grade(\"P. G. Wodehouse\", 2).\n.output Answer", "completions": [".decl Taught_in_grade(Author:symbol, Grade:float)\nTaught_in_grade(\"P. G. Wodehouse\", \"high school\").\nTaught_in_grade(\"P. G. Wodehouse\", \"college\").\n.decl Answer()\nAnswer() :- Taught_in_grade(\"P. G. Wodehouse\", 2).\n.output Answer"]}
{"id": 774, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Richard Wagner\", 1813).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Richard Wagner\", 1883).\n.decl Active_in_year(Group:symbol, Active_year:float)\nActive_in_year(\"Nazis\", 1920).\n.decl Answer()\nAnswer() :- Born_in_year(\"Richard Wagner\", birth_year), Died_in_year(\"Richard Wagner\", death_year), Active_in_year(\"Nazis\", active_year), birth_year <= active_year, active_year <= death_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Richard Wagner\", 1813).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Richard Wagner\", 1883).\n.decl Active_in_year(Group:symbol, Active_year:float)\nActive_in_year(\"Nazis\", 1920).\n.decl Answer()\nAnswer() :- Born_in_year(\"Richard Wagner\", birth_year), Died_in_year(\"Richard Wagner\", death_year), Active_in_year(\"Nazis\", active_year), birth_year <= active_year, active_year <= death_year.\n.output Answer"]}
{"id": 775, "answer": true, "completion": ".decl Recognizes_saint(Church:symbol, Saint:symbol)\nRecognizes_saint(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.decl Answer()\nAnswer() :- Recognizes_saint(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.output Answer", "completions": [".decl Recognizes_saint(Church:symbol, Saint:symbol)\nRecognizes_saint(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.decl Answer()\nAnswer() :- Recognizes_saint(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.output Answer"]}
{"id": 776, "answer": true, "completion": ".decl Hosts_event(Venue:symbol, Event:symbol)\nHosts_event(\"Rock in Rio\", \"music festival\").\n.decl Event_type(Event:symbol, Type:symbol)\nEvent_type(\"Stanley Cup Finals\", \"ice hockey\").\nEvent_type(\"music festival\", \"music\").\n.decl Venue_type(Venue:symbol, Type:symbol)\nVenue_type(\"Rock in Rio\", \"outdoor music venue\").\n.decl Suitable_for_type(Venue_type:symbol, Event_type:symbol)\nSuitable_for_type(\"outdoor music venue\", \"music\").\n.decl Answer()\nAnswer() :- Hosts_event(venue, \"Rock in Rio\"), Event_type(\"Stanley Cup Finals\", event_type), Venue_type(venue, venue_type), !Suitable_for_type(venue_type, event_type).\n.output Answer", "completions": [".decl Hosts_event(Venue:symbol, Event:symbol)\nHosts_event(\"Rock in Rio\", \"music festival\").\n.decl Event_type(Event:symbol, Type:symbol)\nEvent_type(\"Stanley Cup Finals\", \"ice hockey\").\nEvent_type(\"music festival\", \"music\").\n.decl Venue_type(Venue:symbol, Type:symbol)\nVenue_type(\"Rock in Rio\", \"outdoor music venue\").\n.decl Suitable_for_type(Venue_type:symbol, Event_type:symbol)\nSuitable_for_type(\"outdoor music venue\", \"music\").\n.decl Answer()\nAnswer() :- Hosts_event(venue, \"Rock in Rio\"), Event_type(\"Stanley Cup Finals\", event_type), Venue_type(venue, venue_type), !Suitable_for_type(venue_type, event_type).\n.output Answer"]}
{"id": 777, "answer": true, "completion": ".decl Born_in(Person:symbol, Country:symbol)\nBorn_in(\"Christopher Columbus\", \"Italy\").\n.decl Represented_in_sailing(Person:symbol, Country:symbol)\nRepresented_in_sailing(\"Christopher Columbus\", \"Spain\").\n.decl Answer()\nAnswer() :- Born_in(\"Christopher Columbus\", country1), Represented_in_sailing(\"Christopher Columbus\", country2), country1 != country2.\n.output Answer", "completions": [".decl Born_in(Person:symbol, Country:symbol)\nBorn_in(\"Christopher Columbus\", \"Italy\").\n.decl Represented_in_sailing(Person:symbol, Country:symbol)\nRepresented_in_sailing(\"Christopher Columbus\", \"Spain\").\n.decl Answer()\nAnswer() :- Born_in(\"Christopher Columbus\", country1), Represented_in_sailing(\"Christopher Columbus\", country2), country1 != country2.\n.output Answer"]}
{"id": 778, "answer": false, "completion": ".decl Is_digit(Digit:float)\nIs_digit(0..9).\n.decl Is_in_Pi(Digit:float)\nIs_in_Pi(3).\nIs_in_Pi(1).\nIs_in_Pi(4).\nIs_in_Pi(5).\nIs_in_Pi(9).\nIs_in_Pi(2).\nIs_in_Pi(6).\nIs_in_Pi(8).\nIs_in_Pi(7).\n.decl Answer()\nAnswer() :- Is_digit(digit), !Is_in_Pi(digit).\n.output Answer", "completions": [".decl Is_digit(Digit:float)\nIs_digit(0..9).\n.decl Is_in_Pi(Digit:float)\nIs_in_Pi(3).\nIs_in_Pi(1).\nIs_in_Pi(4).\nIs_in_Pi(5).\nIs_in_Pi(9).\nIs_in_Pi(2).\nIs_in_Pi(6).\nIs_in_Pi(8).\nIs_in_Pi(7).\n.decl Answer()\nAnswer() :- Is_digit(digit), !Is_in_Pi(digit).\n.output Answer"]}
{"id": 779, "answer": false, "completion": ".decl Created_by(Creator:symbol, Character:symbol)\nCreated_by(\"Stan Lee\", \"Doctor Strange\").\nCreated_by(\"Steve Ditko\", \"Doctor Strange\").\nCreated_by(\"Bob Kane\", \"Batman\").\nCreated_by(\"Bill Finger\", \"Batman\").\n.decl Answer()\nAnswer() :- Created_by(creator, \"Doctor Strange\"), Created_by(creator, \"Batman\").\n.output Answer", "completions": [".decl Created_by(Creator:symbol, Character:symbol)\nCreated_by(\"Stan Lee\", \"Doctor Strange\").\nCreated_by(\"Steve Ditko\", \"Doctor Strange\").\nCreated_by(\"Bob Kane\", \"Batman\").\nCreated_by(\"Bill Finger\", \"Batman\").\n.decl Answer()\nAnswer() :- Created_by(creator, \"Doctor Strange\"), Created_by(creator, \"Batman\").\n.output Answer"]}
{"id": 780, "answer": true, "completion": ".decl Dangerous_to_humans(Animal:symbol)\nDangerous_to_humans(\"hippo\").\n.decl Answer()\nAnswer() :- Dangerous_to_humans(\"hippo\").\n.output Answer", "completions": [".decl Dangerous_to_humans(Animal:symbol)\nDangerous_to_humans(\"hippo\").\n.decl Answer()\nAnswer() :- Dangerous_to_humans(\"hippo\").\n.output Answer"]}
{"id": 781, "answer": true, "completion": ".decl Origin(Event:symbol, Origin:symbol)\nOrigin(\"Mixed martial arts\", \"Pankration\").\nOrigin(\"Roman Colosseum games\", \"Ancient Rome\").\n.decl Answer()\nAnswer() :- Origin(\"Mixed martial arts\", origin1), Origin(\"Roman Colosseum games\", origin2), origin1 != origin2.\n.output Answer", "completions": [".decl Origin(Event:symbol, Origin:symbol)\nOrigin(\"Mixed martial arts\", \"Pankration\").\nOrigin(\"Roman Colosseum games\", \"Ancient Rome\").\n.decl Answer()\nAnswer() :- Origin(\"Mixed martial arts\", origin1), Origin(\"Roman Colosseum games\", origin2), origin1 != origin2.\n.output Answer"]}
{"id": 782, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"groundhog day\", \"February\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"February\", \"winter\").\n.decl Wears_jacket(Season:symbol, Probability:float)\nWears_jacket(\"winter\", 0.9).\n.decl Answer()\nAnswer() :- Happens_in_time(\"groundhog day\", month), In_season(month, season), Wears_jacket(season, probability), probability > 0.5.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"groundhog day\", \"February\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"February\", \"winter\").\n.decl Wears_jacket(Season:symbol, Probability:float)\nWears_jacket(\"winter\", 0.9).\n.decl Answer()\nAnswer() :- Happens_in_time(\"groundhog day\", month), In_season(month, season), Wears_jacket(season, probability), probability > 0.5.\n.output Answer"]}
{"id": 783, "answer": false, "completion": ".decl Has_PTSD(Person:symbol)\nHas_PTSD(\"Ariana Grande\").\n.decl Presentation_Topic(Topic:symbol)\nPresentation_Topic(\"post traumatic stress disorder\").\n.decl Answer()\nAnswer() :- Has_PTSD(\"Ariana Grande\"), Presentation_Topic(\"post traumatic stress disorder\").\n.output Answer", "completions": [".decl Has_PTSD(Person:symbol)\nHas_PTSD(\"Ariana Grande\").\n.decl Presentation_Topic(Topic:symbol)\nPresentation_Topic(\"post traumatic stress disorder\").\n.decl Answer()\nAnswer() :- Has_PTSD(\"Ariana Grande\"), Presentation_Topic(\"post traumatic stress disorder\").\n.output Answer"]}
{"id": 784, "answer": true, "completion": ".decl Located_near(Object:symbol, Location:symbol)\nLocated_near(\"All Nippon Airways headquarters\", \"Tokyo\").\n.decl Has_beach(Location:symbol)\nHas_beach(\"Tokyo\").\n.decl Answer()\nAnswer() :- Located_near(\"All Nippon Airways headquarters\", location), Has_beach(location).\n.output Answer", "completions": [".decl Located_near(Object:symbol, Location:symbol)\nLocated_near(\"All Nippon Airways headquarters\", \"Tokyo\").\n.decl Has_beach(Location:symbol)\nHas_beach(\"Tokyo\").\n.decl Answer()\nAnswer() :- Located_near(\"All Nippon Airways headquarters\", location), Has_beach(location).\n.output Answer"]}
{"id": 785, "answer": false, "completion": ".decl Happens_at(Event:symbol, Location:symbol)\nHappens_at(\"Superbowl Football Game\", \"stadium\").\nHappens_at(\"Gettysburg Battlefield\", \"battlefield\").\n.decl Is_crowded(Event:symbol)\nIs_crowded(\"Superbowl Football Game\").\n.decl Answer()\nAnswer() :- Happens_at(\"Superbowl Football Game\", location1), Happens_at(\"Gettysburg Battlefield\", location2), location1 = location2, Is_crowded(\"Superbowl Football Game\").\n.output Answer", "completions": [".decl Happens_at(Event:symbol, Location:symbol)\nHappens_at(\"Superbowl Football Game\", \"stadium\").\nHappens_at(\"Gettysburg Battlefield\", \"battlefield\").\n.decl Is_crowded(Event:symbol)\nIs_crowded(\"Superbowl Football Game\").\n.decl Answer()\nAnswer() :- Happens_at(\"Superbowl Football Game\", location1), Happens_at(\"Gettysburg Battlefield\", location2), location1 = location2, Is_crowded(\"Superbowl Football Game\").\n.output Answer"]}
{"id": 786, "answer": true, "completion": ".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Doctor Strange\", \"mystical symbols\").\n.decl Is_type(Object:symbol, Type:symbol)\nIs_type(\"Pittsburgh Steelers logo\", \"sports logo\").\n.decl Answer()\nAnswer() :- Likes(\"Doctor Strange\", type), Is_type(\"Pittsburgh Steelers logo\", type).\n.output Answer", "completions": [".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Doctor Strange\", \"mystical symbols\").\n.decl Is_type(Object:symbol, Type:symbol)\nIs_type(\"Pittsburgh Steelers logo\", \"sports logo\").\n.decl Answer()\nAnswer() :- Likes(\"Doctor Strange\", type), Is_type(\"Pittsburgh Steelers logo\", type).\n.output Answer"]}
{"id": 787, "answer": true, "completion": ".decl Associated_with(Thing:symbol, Place:symbol)\nAssociated_with(\"Yeti\", \"Disney theme parks\").\n.decl Answer()\nAnswer() :- Associated_with(\"Yeti\", \"Disney theme parks\").\n.output Answer", "completions": [".decl Associated_with(Thing:symbol, Place:symbol)\nAssociated_with(\"Yeti\", \"Disney theme parks\").\n.decl Answer()\nAnswer() :- Associated_with(\"Yeti\", \"Disney theme parks\").\n.output Answer"]}
{"id": 788, "answer": true, "completion": ".decl Has_leaves(Tree:symbol, Season:symbol)\nHas_leaves(\"oak\", \"spring\").\nHas_leaves(\"oak\", \"summer\").\nHas_leaves(\"oak\", \"fall\").\n.decl Answer()\nAnswer() :- Has_leaves(\"oak\", \"winter\").\n.output Answer", "completions": [".decl Has_leaves(Tree:symbol, Season:symbol)\nHas_leaves(\"oak\", \"spring\").\nHas_leaves(\"oak\", \"summer\").\nHas_leaves(\"oak\", \"fall\").\n.decl Answer()\nAnswer() :- Has_leaves(\"oak\", \"winter\").\n.output Answer"]}
{"id": 789, "answer": true, "completion": ".decl Age_category(Person:symbol, Category:symbol)\nAge_category(\"Eddie Murphy\", \"young child\").\n.decl Can_dial(Person:symbol, Number:symbol)\nCan_dial(\"young child\", \"911\").\n.decl In_vehicle(Person:symbol, Vehicle:symbol)\nIn_vehicle(\"Eddie Murphy\", \"car\").\n.decl Answer()\nAnswer() :- Age_category(\"Eddie Murphy\", category), Can_dial(category, \"911\"), In_vehicle(\"Eddie Murphy\", \"car\").\n.output Answer", "completions": [".decl Age_category(Person:symbol, Category:symbol)\nAge_category(\"Eddie Murphy\", \"young child\").\n.decl Can_dial(Person:symbol, Number:symbol)\nCan_dial(\"young child\", \"911\").\n.decl In_vehicle(Person:symbol, Vehicle:symbol)\nIn_vehicle(\"Eddie Murphy\", \"car\").\n.decl Answer()\nAnswer() :- Age_category(\"Eddie Murphy\", category), Can_dial(category, \"911\"), In_vehicle(\"Eddie Murphy\", \"car\").\n.output Answer"]}
{"id": 790, "answer": true, "completion": ".decl Used_for(Object:symbol, Purpose:symbol)\nUsed_for(\"bananas\", \"tostones\").\n.decl Answer()\nAnswer() :- Used_for(\"bananas\", \"tostones\").\n.output Answer", "completions": [".decl Used_for(Object:symbol, Purpose:symbol)\nUsed_for(\"bananas\", \"tostones\").\n.decl Answer()\nAnswer() :- Used_for(\"bananas\", \"tostones\").\n.output Answer"]}
{"id": 791, "answer": true, "completion": ".decl Is_multicultural(Species:symbol)\nIs_multicultural(\"Africanized bees\").\n.decl Answer()\nAnswer() :- Is_multicultural(\"Africanized bees\").\n.output Answer", "completions": [".decl Is_multicultural(Species:symbol)\nIs_multicultural(\"Africanized bees\").\n.decl Answer()\nAnswer() :- Is_multicultural(\"Africanized bees\").\n.output Answer"]}
{"id": 792, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"world's largest cheeseburger\", 913).\nHas_weight(\"Eddie Hall's deadlift\", 500).\n.decl Answer()\nAnswer() :- Has_weight(\"world's largest cheeseburger\", weight1), Has_weight(\"Eddie Hall's deadlift\", weight2), weight2 >= weight1.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"world's largest cheeseburger\", 913).\nHas_weight(\"Eddie Hall's deadlift\", 500).\n.decl Answer()\nAnswer() :- Has_weight(\"world's largest cheeseburger\", weight1), Has_weight(\"Eddie Hall's deadlift\", weight2), weight2 >= weight1.\n.output Answer"]}
{"id": 793, "answer": true, "completion": ".decl Can_live_together(Fish_A:symbol, Fish_B:symbol)\n.decl Has_temperature_range(Fish:symbol, Min_temp:float, Max_temp:float)\nHas_temperature_range(\"ocean sunfish\", 15, 24).\nHas_temperature_range(\"goldfish\", 10, 30).\n.decl Answer()\nAnswer() :- !Can_live_together(\"ocean sunfish\", \"goldfish\").\nCan_live_together(fish1, fish2) :- Has_temperature_range(fish1, min_temp1, max_temp1), Has_temperature_range(fish2, min_temp2, max_temp2), max_temp1 >= min_temp2, min_temp1 <= max_temp2.\n.output Answer", "completions": [".decl Can_live_together(Fish_A:symbol, Fish_B:symbol)\n.decl Has_temperature_range(Fish:symbol, Min_temp:float, Max_temp:float)\nHas_temperature_range(\"ocean sunfish\", 15, 24).\nHas_temperature_range(\"goldfish\", 10, 30).\n.decl Answer()\nAnswer() :- !Can_live_together(\"ocean sunfish\", \"goldfish\").\nCan_live_together(fish1, fish2) :- Has_temperature_range(fish1, min_temp1, max_temp1), Has_temperature_range(fish2, min_temp2, max_temp2), max_temp1 >= min_temp2, min_temp1 <= max_temp2.\n.output Answer"]}
{"id": 794, "answer": false, "completion": ".decl Exports_Fair_Trade(Country:symbol, Amount:float)\nExports_Fair_Trade(\"United States\", 1000).\nExports_Fair_Trade(\"Germany\", 1200).\nExports_Fair_Trade(\"United Kingdom\", 800).\nExports_Fair_Trade(\"France\", 900).\n.decl Is_largest_exporter(Country:symbol)\nIs_largest_exporter(\"United States\") :- Exports_Fair_Trade(\"United States\", amount1), !Exports_Fair_Trade(_, amount2), amount2 > amount1.\n.decl Answer()\nAnswer() :- Is_largest_exporter(\"United States\").\n.output Answer", "completions": [".decl Exports_Fair_Trade(Country:symbol, Amount:float)\nExports_Fair_Trade(\"United States\", 1000).\nExports_Fair_Trade(\"Germany\", 1200).\nExports_Fair_Trade(\"United Kingdom\", 800).\nExports_Fair_Trade(\"France\", 900).\n.decl Is_largest_exporter(Country:symbol)\nIs_largest_exporter(\"United States\") :- Exports_Fair_Trade(\"United States\", amount1), !Exports_Fair_Trade(_, amount2), amount2 > amount1.\n.decl Answer()\nAnswer() :- Is_largest_exporter(\"United States\").\n.output Answer"]}
{"id": 795, "answer": true, "completion": ".decl Studies(Field:symbol, Subject:symbol)\nStudies(\"Biochemistry\", \"molecules\").\nStudies(\"Biochemistry\", \"cells\").\nStudies(\"Biochemistry\", \"organisms\").\nStudies(\"Physics\", \"gluons\").\n.decl Answer()\nAnswer() :- Studies(\"Biochemistry\", \"gluons\").\n.output Answer", "completions": [".decl Studies(Field:symbol, Subject:symbol)\nStudies(\"Biochemistry\", \"molecules\").\nStudies(\"Biochemistry\", \"cells\").\nStudies(\"Biochemistry\", \"organisms\").\nStudies(\"Physics\", \"gluons\").\n.decl Answer()\nAnswer() :- Studies(\"Biochemistry\", \"gluons\").\n.output Answer"]}
{"id": 796, "answer": true, "completion": ".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"Phobos\", -85).\n.decl Requires_coat(Temperature:float)\nRequires_coat(temp) :- temp < 0.\n.decl Answer()\nAnswer() :- Has_temperature(\"Phobos\", temperature), Requires_coat(temperature).\n.output Answer", "completions": [".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"Phobos\", -85).\n.decl Requires_coat(Temperature:float)\nRequires_coat(temp) :- temp < 0.\n.decl Answer()\nAnswer() :- Has_temperature(\"Phobos\", temperature), Requires_coat(temperature).\n.output Answer"]}
{"id": 797, "answer": true, "completion": ".decl Is_in_history(Event:symbol, Category:symbol)\nIs_in_history(\"Star Trek: The Next Generation\", \"fiction\").\n.decl Is_in_category(Category1:symbol, Category2:symbol)\nIs_in_category(\"fiction\", \"not history\").\n.decl Answer()\nAnswer() :- Is_in_history(\"Star Trek: The Next Generation\", category), !Is_in_category(category, \"history\").\n.output Answer", "completions": [".decl Is_in_history(Event:symbol, Category:symbol)\nIs_in_history(\"Star Trek: The Next Generation\", \"fiction\").\n.decl Is_in_category(Category1:symbol, Category2:symbol)\nIs_in_category(\"fiction\", \"not history\").\n.decl Answer()\nAnswer() :- Is_in_history(\"Star Trek: The Next Generation\", category), !Is_in_category(category, \"history\").\n.output Answer"]}
{"id": 798, "answer": true, "completion": ".decl Watched_Movie(Person:symbol, Movie:symbol)\n.decl Knows_Character(Person:symbol, Character:symbol)\nKnows_Character(\"Alice\", \"Darth Vader\").\nWatched_Movie(\"Alice\", \"Star Wars\").\n.decl Necessary(Movie:symbol, Character:symbol)\nNecessary(\"Star Wars\", \"Darth Vader\") :- Knows_Character(person, \"Darth Vader\"), !Watched_Movie(person, \"Star Wars\").\n.decl Answer()\nAnswer() :- Necessary(\"Star Wars\", \"Darth Vader\").\n.output Answer", "completions": [".decl Watched_Movie(Person:symbol, Movie:symbol)\n.decl Knows_Character(Person:symbol, Character:symbol)\nKnows_Character(\"Alice\", \"Darth Vader\").\nWatched_Movie(\"Alice\", \"Star Wars\").\n.decl Necessary(Movie:symbol, Character:symbol)\nNecessary(\"Star Wars\", \"Darth Vader\") :- Knows_Character(person, \"Darth Vader\"), !Watched_Movie(person, \"Star Wars\").\n.decl Answer()\nAnswer() :- Necessary(\"Star Wars\", \"Darth Vader\").\n.output Answer"]}
{"id": 799, "answer": true, "completion": ".decl Is_fair_trade(Product:symbol)\nIs_fair_trade(\"coffee\").\nIs_fair_trade(\"chocolate\").\nIs_fair_trade(\"banana\").\n.decl Is_laptop(Product:symbol)\nIs_laptop(\"laptop\").\n.decl Answer()\nAnswer() :- Is_fair_trade(product), Is_laptop(product).\n.output Answer", "completions": [".decl Is_fair_trade(Product:symbol)\nIs_fair_trade(\"coffee\").\nIs_fair_trade(\"chocolate\").\nIs_fair_trade(\"banana\").\n.decl Is_laptop(Product:symbol)\nIs_laptop(\"laptop\").\n.decl Answer()\nAnswer() :- Is_fair_trade(product), Is_laptop(product).\n.output Answer"]}
{"id": 800, "answer": true, "completion": ".decl Has_degree_requirement(School:symbol, Degree:symbol)\nHas_degree_requirement(\"SUNY School\", \"doctorate\").\n.decl Answer()\nAnswer() :- Has_degree_requirement(\"SUNY School\", \"doctorate\").\n.output Answer", "completions": [".decl Has_degree_requirement(School:symbol, Degree:symbol)\nHas_degree_requirement(\"SUNY School\", \"doctorate\").\n.decl Answer()\nAnswer() :- Has_degree_requirement(\"SUNY School\", \"doctorate\").\n.output Answer"]}
{"id": 801, "answer": true, "completion": ".decl Is_subject_of(Subject:symbol, Work:symbol)\nIs_subject_of(\"Parsifal\", \"Arthurian legend\").\n.decl Originates_from(Subject:symbol, Origin:symbol)\nOriginates_from(\"Arthurian legend\", \"British folklore\").\n.decl Answer()\nAnswer() :- Is_subject_of(\"Parsifal\", subject), Originates_from(subject, \"British folklore\").\n.output Answer", "completions": [".decl Is_subject_of(Subject:symbol, Work:symbol)\nIs_subject_of(\"Parsifal\", \"Arthurian legend\").\n.decl Originates_from(Subject:symbol, Origin:symbol)\nOriginates_from(\"Arthurian legend\", \"British folklore\").\n.decl Answer()\nAnswer() :- Is_subject_of(\"Parsifal\", subject), Originates_from(subject, \"British folklore\").\n.output Answer"]}
{"id": 802, "answer": true, "completion": ".decl Has_high_sodium(Food:symbol)\nHas_high_sodium(\"ramen\").\n.decl Bad_for_condition(Food:symbol, Condition:symbol)\nBad_for_condition(\"ramen\", \"heart failure\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"someone\", \"heart failure\").\n.decl Answer()\nAnswer() :- Has_high_sodium(food), Bad_for_condition(food, condition), Has_condition(\"someone\", condition).\n.output Answer", "completions": [".decl Has_high_sodium(Food:symbol)\nHas_high_sodium(\"ramen\").\n.decl Bad_for_condition(Food:symbol, Condition:symbol)\nBad_for_condition(\"ramen\", \"heart failure\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"someone\", \"heart failure\").\n.decl Answer()\nAnswer() :- Has_high_sodium(food), Bad_for_condition(food, condition), Has_condition(\"someone\", condition).\n.output Answer"]}
{"id": 803, "answer": true, "completion": ".decl Contains_ingredient(Dish:symbol, Ingredient:symbol)\nContains_ingredient(\"French Toast\", \"egg\").\nContains_ingredient(\"French Toast\", \"bread\").\nContains_ingredient(\"French Toast\", \"milk\").\n.decl Is_allergic(Person:symbol, Allergen:symbol)\nIs_allergic(\"Lannister\", \"egg\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"French Toast\", ingredient), Is_allergic(\"Lannister\", ingredient).\n.output Answer", "completions": [".decl Contains_ingredient(Dish:symbol, Ingredient:symbol)\nContains_ingredient(\"French Toast\", \"egg\").\nContains_ingredient(\"French Toast\", \"bread\").\nContains_ingredient(\"French Toast\", \"milk\").\n.decl Is_allergic(Person:symbol, Allergen:symbol)\nIs_allergic(\"Lannister\", \"egg\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"French Toast\", ingredient), Is_allergic(\"Lannister\", ingredient).\n.output Answer"]}
{"id": 804, "answer": true, "completion": ".decl Is_missionary(Character:symbol)\nIs_missionary(\"Elder Price\").\n\n.decl Is_popular_broadway_character(Character:symbol)\nIs_popular_broadway_character(\"Elder Price\").\n\n.decl Answer()\nAnswer() :- Is_missionary(character), Is_popular_broadway_character(character).\n.output Answer", "completions": [".decl Is_missionary(Character:symbol)\nIs_missionary(\"Elder Price\").\n\n.decl Is_popular_broadway_character(Character:symbol)\nIs_popular_broadway_character(\"Elder Price\").\n\n.decl Answer()\nAnswer() :- Is_missionary(character), Is_popular_broadway_character(character).\n.output Answer"]}
{"id": 805, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Carmen Electra\", \"car\").\nOwns(\"Carmen Electra\", \"house\").\n.decl Is_junk(Object:symbol)\nIs_junk(\"junk\").\n.decl Answer()\nAnswer() :- Owns(\"Carmen Electra\", object), Is_junk(object).\n.output Answer", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Carmen Electra\", \"car\").\nOwns(\"Carmen Electra\", \"house\").\n.decl Is_junk(Object:symbol)\nIs_junk(\"junk\").\n.decl Answer()\nAnswer() :- Owns(\"Carmen Electra\", object), Is_junk(object).\n.output Answer"]}
{"id": 806, "answer": false, "completion": ".decl Has_most_common_religion(Country:symbol, Religion:symbol)\nHas_most_common_religion(\"India\", \"Hinduism\").\n.decl Uses_symbol(Religion:symbol, Symbol:symbol)\nUses_symbol(\"Hinduism\", \"swastika\").\n.decl Answer()\nAnswer() :- Has_most_common_religion(\"India\", religion), Uses_symbol(religion, \"swastika\").\n.output Answer", "completions": [".decl Has_most_common_religion(Country:symbol, Religion:symbol)\nHas_most_common_religion(\"India\", \"Hinduism\").\n.decl Uses_symbol(Religion:symbol, Symbol:symbol)\nUses_symbol(\"Hinduism\", \"swastika\").\n.decl Answer()\nAnswer() :- Has_most_common_religion(\"India\", religion), Uses_symbol(religion, \"swastika\").\n.output Answer"]}
{"id": 807, "answer": true, "completion": ".decl Avoids_eating(Person:symbol, Food:symbol)\nAvoids_eating(\"Malcolm X\", \"ham\").\n.decl Answer()\nAnswer() :- Avoids_eating(\"Malcolm X\", \"ham\").\n.output Answer", "completions": [".decl Avoids_eating(Person:symbol, Food:symbol)\nAvoids_eating(\"Malcolm X\", \"ham\").\n.decl Answer()\nAnswer() :- Avoids_eating(\"Malcolm X\", \"ham\").\n.output Answer"]}
{"id": 808, "answer": true, "completion": ".decl Animal_walks_on_legs(Animal:symbol, N_legs:float)\nAnimal_walks_on_legs(\"greyhound\", 4).\nAnimal_walks_on_legs(\"human\", 2).\n.decl Answer()\nAnswer() :- Animal_walks_on_legs(\"greyhound\", 2).\n.output Answer", "completions": [".decl Animal_walks_on_legs(Animal:symbol, N_legs:float)\nAnimal_walks_on_legs(\"greyhound\", 4).\nAnimal_walks_on_legs(\"human\", 2).\n.decl Answer()\nAnswer() :- Animal_walks_on_legs(\"greyhound\", 2).\n.output Answer"]}
{"id": 809, "answer": true, "completion": ".decl Needs_calculator(Student_type:symbol, Calculator_type:symbol)\nNeeds_calculator(\"Elementary School\", \"basic calculator\").\nNeeds_calculator(\"Middle School\", \"basic calculator\").\nNeeds_calculator(\"High School\", \"graphing calculator\").\nNeeds_calculator(\"College\", \"graphing calculator\").\n.decl Answer()\nAnswer() :- Needs_calculator(\"Elementary School\", \"graphing calculator\").\n.output Answer", "completions": [".decl Needs_calculator(Student_type:symbol, Calculator_type:symbol)\nNeeds_calculator(\"Elementary School\", \"basic calculator\").\nNeeds_calculator(\"Middle School\", \"basic calculator\").\nNeeds_calculator(\"High School\", \"graphing calculator\").\nNeeds_calculator(\"College\", \"graphing calculator\").\n.decl Answer()\nAnswer() :- Needs_calculator(\"Elementary School\", \"graphing calculator\").\n.output Answer"]}
{"id": 810, "answer": false, "completion": ".decl Is_example(Object:symbol, Category:symbol)\nIs_example(\"SnapCap\", \"bottle cap\").\nIs_example(\"Walmart\", \"retail store\").\nIs_example(\"Target\", \"retail store\").\n.decl Answer()\nAnswer() :- Is_example(\"SnapCap\", \"retail store\").\n.output Answer", "completions": [".decl Is_example(Object:symbol, Category:symbol)\nIs_example(\"SnapCap\", \"bottle cap\").\nIs_example(\"Walmart\", \"retail store\").\nIs_example(\"Target\", \"retail store\").\n.decl Answer()\nAnswer() :- Is_example(\"SnapCap\", \"retail store\").\n.output Answer"]}
{"id": 811, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Big John Studd\", 364).\n.decl Has_weight_capacity(Object:symbol, Weight_capacity:float)\nHas_weight_capacity(\"2019 Toyota Hilux\", 1000).\n.decl Answer()\nAnswer() :- Has_weight(\"Big John Studd\", weight1), Has_weight_capacity(\"2019 Toyota Hilux\", weight_capacity), 30 * weight1 <= weight_capacity.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Big John Studd\", 364).\n.decl Has_weight_capacity(Object:symbol, Weight_capacity:float)\nHas_weight_capacity(\"2019 Toyota Hilux\", 1000).\n.decl Answer()\nAnswer() :- Has_weight(\"Big John Studd\", weight1), Has_weight_capacity(\"2019 Toyota Hilux\", weight_capacity), 30 * weight1 <= weight_capacity.\n.output Answer"]}
{"id": 812, "answer": true, "completion": ".decl Is_feline(Animal:symbol)\nIs_feline(\"cat\").\nIs_feline(\"lion\").\nIs_feline(\"tiger\").\nIs_feline(\"leopard\").\nIs_feline(\"cheetah\").\nIs_feline(\"panther\").\nIs_feline(\"jaguar\").\nIs_feline(\"cougar\").\nIs_feline(\"lynx\").\nIs_feline(\"bobcat\").\nIs_feline(\"ocelot\").\nIs_feline(\"serval\").\nIs_feline(\"caracal\").\nIs_feline(\"puma\").\n\n.decl Is_minor_league_team(Team:symbol)\nIs_minor_league_team(\"Lakeland Flying Tigers\").\nIs_minor_league_team(\"Carolina Mudcats\").\nIs_minor_league_team(\"New Hampshire Fisher Cats\").\nIs_minor_league_team(\"Lynchburg Hillcats\").\nIs_minor_league_team(\"Connecticut Tigers\").\nIs_minor_league_team(\"Kane County Cougars\").\nIs_minor_league_team(\"Lehigh Valley IronPigs\").\nIs_minor_league_team(\"Binghamton Rumble Ponies\").\n\n.decl Named_after_feline(Team:symbol)\nNamed_after_feline(team) :- Is_minor_league_team(team), Is_feline(feline), team = feline.\n\n.decl Answer()\nAnswer() :- Named_after_feline(team).\n.output Answer", "completions": [".decl Is_feline(Animal:symbol)\nIs_feline(\"cat\").\nIs_feline(\"lion\").\nIs_feline(\"tiger\").\nIs_feline(\"leopard\").\nIs_feline(\"cheetah\").\nIs_feline(\"panther\").\nIs_feline(\"jaguar\").\nIs_feline(\"cougar\").\nIs_feline(\"lynx\").\nIs_feline(\"bobcat\").\nIs_feline(\"ocelot\").\nIs_feline(\"serval\").\nIs_feline(\"caracal\").\nIs_feline(\"puma\").\n\n.decl Is_minor_league_team(Team:symbol)\nIs_minor_league_team(\"Lakeland Flying Tigers\").\nIs_minor_league_team(\"Carolina Mudcats\").\nIs_minor_league_team(\"New Hampshire Fisher Cats\").\nIs_minor_league_team(\"Lynchburg Hillcats\").\nIs_minor_league_team(\"Connecticut Tigers\").\nIs_minor_league_team(\"Kane County Cougars\").\nIs_minor_league_team(\"Lehigh Valley IronPigs\").\nIs_minor_league_team(\"Binghamton Rumble Ponies\").\n\n.decl Named_after_feline(Team:symbol)\nNamed_after_feline(team) :- Is_minor_league_team(team), Is_feline(feline), team = feline.\n\n.decl Answer()\nAnswer() :- Named_after_feline(team).\n.output Answer"]}
{"id": 813, "answer": false, "completion": ".decl Is_telescope(Object:symbol)\nIs_telescope(\"telescope\").\n.decl Can_hear(Object:symbol)\nCan_hear(\"human\").\n.decl Answer()\nAnswer() :- Is_telescope(object), Can_hear(object).\n.output Answer", "completions": [".decl Is_telescope(Object:symbol)\nIs_telescope(\"telescope\").\n.decl Can_hear(Object:symbol)\nCan_hear(\"human\").\n.decl Answer()\nAnswer() :- Is_telescope(object), Can_hear(object).\n.output Answer"]}
{"id": 814, "answer": false, "completion": ".decl Is_mythical_home(Location:symbol, Deity:symbol)\nIs_mythical_home(\"Pearl Harbor\", \"shark goddess\").\n.decl Answer()\nAnswer() :- Is_mythical_home(\"Pearl Harbor\", \"shark goddess\").\n.output Answer", "completions": [".decl Is_mythical_home(Location:symbol, Deity:symbol)\nIs_mythical_home(\"Pearl Harbor\", \"shark goddess\").\n.decl Answer()\nAnswer() :- Is_mythical_home(\"Pearl Harbor\", \"shark goddess\").\n.output Answer"]}
{"id": 815, "answer": true, "completion": ".decl Has_population(City:symbol, State:symbol, Population:float)\nHas_population(\"Albany\", \"Georgia\", 75000).\nHas_population(\"Albany\", \"New York\", 95000).\n.decl Answer()\nAnswer() :- Has_population(\"Albany\", \"Georgia\", population1), Has_population(\"Albany\", \"New York\", population2), population1 + 25000 < population2 + 25000.\n.output Answer", "completions": [".decl Has_population(City:symbol, State:symbol, Population:float)\nHas_population(\"Albany\", \"Georgia\", 75000).\nHas_population(\"Albany\", \"New York\", 95000).\n.decl Answer()\nAnswer() :- Has_population(\"Albany\", \"Georgia\", population1), Has_population(\"Albany\", \"New York\", population2), population1 + 25000 < population2 + 25000.\n.output Answer"]}
{"id": 816, "answer": true, "completion": ".decl Has_UV_index(Event:symbol, UV_index:float)\nHas_UV_index(\"Burning Man\", 7).\n.decl Has_average_UV_index(UV_index:float)\nHas_average_UV_index(3).\n.decl Answer()\nAnswer() :- Has_UV_index(\"Burning Man\", uv_index1), Has_average_UV_index(uv_index2), uv_index1 > uv_index2.\n.output Answer", "completions": [".decl Has_UV_index(Event:symbol, UV_index:float)\nHas_UV_index(\"Burning Man\", 7).\n.decl Has_average_UV_index(UV_index:float)\nHas_average_UV_index(3).\n.decl Answer()\nAnswer() :- Has_UV_index(\"Burning Man\", uv_index1), Has_average_UV_index(uv_index2), uv_index1 > uv_index2.\n.output Answer"]}
{"id": 817, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Reza Shah\", 1878).\nBorn_in_year(\"Queen Elizabeth I\", 1533).\n.decl Has_relation(Person_A:symbol, Person_B:symbol)\nHas_relation(\"Reza Shah\", \"Queen Elizabeth I\").\n.decl Answer()\nAnswer() :- Has_relation(\"Reza Shah\", \"Queen Elizabeth I\").\nAnswer() :- Born_in_year(\"Reza Shah\", year1), Born_in_year(\"Queen Elizabeth I\", year2), year1 - year2 <= 100, year1 - year2 >= -100.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Reza Shah\", 1878).\nBorn_in_year(\"Queen Elizabeth I\", 1533).\n.decl Has_relation(Person_A:symbol, Person_B:symbol)\nHas_relation(\"Reza Shah\", \"Queen Elizabeth I\").\n.decl Answer()\nAnswer() :- Has_relation(\"Reza Shah\", \"Queen Elizabeth I\").\nAnswer() :- Born_in_year(\"Reza Shah\", year1), Born_in_year(\"Queen Elizabeth I\", year2), year1 - year2 <= 100, year1 - year2 >= -100.\n.output Answer"]}
{"id": 818, "answer": false, "completion": ".decl Uses_OS(OS_Version:symbol, OS:symbol)\nUses_OS(\"focal fossa\", \"linux\").\n.decl Answer()\nAnswer() :- Uses_OS(\"focal fossa\", \"linux\").\n.output Answer", "completions": [".decl Uses_OS(OS_Version:symbol, OS:symbol)\nUses_OS(\"focal fossa\", \"linux\").\n.decl Answer()\nAnswer() :- Uses_OS(\"focal fossa\", \"linux\").\n.output Answer"]}
{"id": 819, "answer": true, "completion": ".decl Has_cure(Disease:symbol, Cure:symbol)\nHas_cure(\"dementia\", \"medication\").\nHas_cure(\"dementia\", \"therapy\").\n.decl Answer()\nAnswer() :- Has_cure(\"dementia\", \"cast\").\n.output Answer", "completions": [".decl Has_cure(Disease:symbol, Cure:symbol)\nHas_cure(\"dementia\", \"medication\").\nHas_cure(\"dementia\", \"therapy\").\n.decl Answer()\nAnswer() :- Has_cure(\"dementia\", \"cast\").\n.output Answer"]}
{"id": 820, "answer": false, "completion": ".decl Can_use(Object:symbol, Tool:symbol)\nCan_use(\"monkey\", \"QWERTY keyboard\").\n.decl Answer()\nAnswer() :- Can_use(\"monkey\", \"QWERTY keyboard\").\n.output Answer", "completions": [".decl Can_use(Object:symbol, Tool:symbol)\nCan_use(\"monkey\", \"QWERTY keyboard\").\n.decl Answer()\nAnswer() :- Can_use(\"monkey\", \"QWERTY keyboard\").\n.output Answer"]}
{"id": 821, "answer": true, "completion": ".decl Is_season_indicator(Event:symbol, Global:float)\nIs_season_indicator(\"Groundhog Day\", 0).\n.decl Answer()\nAnswer() :- Is_season_indicator(\"Groundhog Day\", global), global = 1.\n.output Answer", "completions": [".decl Is_season_indicator(Event:symbol, Global:float)\nIs_season_indicator(\"Groundhog Day\", 0).\n.decl Answer()\nAnswer() :- Is_season_indicator(\"Groundhog Day\", global), global = 1.\n.output Answer"]}
{"id": 822, "answer": true, "completion": ".decl Depends_on(Brand:symbol, Species:symbol)\nDepends_on(\"Nice\", \"Western honey bee\").\n.decl Is_US_brand(Brand:symbol)\nIs_US_brand(\"Nice\").\n.decl Answer()\nAnswer() :- Is_US_brand(\"Nice\"), Depends_on(\"Nice\", \"Western honey bee\").\n.output Answer", "completions": [".decl Depends_on(Brand:symbol, Species:symbol)\nDepends_on(\"Nice\", \"Western honey bee\").\n.decl Is_US_brand(Brand:symbol)\nIs_US_brand(\"Nice\").\n.decl Answer()\nAnswer() :- Is_US_brand(\"Nice\"), Depends_on(\"Nice\", \"Western honey bee\").\n.output Answer"]}
{"id": 823, "answer": true, "completion": ".decl Patented_in_country(Invention:symbol, Country:symbol)\nPatented_in_country(\"karaoke\", \"Japan\").\nPatented_in_country(\"turtle power tiller\", \"USA\").\n.decl Answer()\nAnswer() :- Patented_in_country(\"karaoke\", country1), Patented_in_country(\"turtle power tiller\", country2), country1 = country2.\n.output Answer", "completions": [".decl Patented_in_country(Invention:symbol, Country:symbol)\nPatented_in_country(\"karaoke\", \"Japan\").\nPatented_in_country(\"turtle power tiller\", \"USA\").\n.decl Answer()\nAnswer() :- Patented_in_country(\"karaoke\", country1), Patented_in_country(\"turtle power tiller\", country2), country1 = country2.\n.output Answer"]}
{"id": 824, "answer": true, "completion": ".decl Is_president(Person:symbol, University:symbol)\nIs_president(\"current president\", \"Ohio University\").\n\n.decl Wears(Person:symbol, Clothing:symbol)\nWears(\"athlete\", \"jockstrap\").\n\n.decl Hypothetically_wears(Person:symbol, Clothing:symbol)\nHypothetically_wears(person, \"jockstrap\") :- Wears(\"athlete\", \"jockstrap\").\n\n.decl Answer()\nAnswer() :- Is_president(\"current president\", \"Ohio University\"), Hypothetically_wears(\"current president\", \"jockstrap\").\n.output Answer", "completions": [".decl Is_president(Person:symbol, University:symbol)\nIs_president(\"current president\", \"Ohio University\").\n\n.decl Wears(Person:symbol, Clothing:symbol)\nWears(\"athlete\", \"jockstrap\").\n\n.decl Hypothetically_wears(Person:symbol, Clothing:symbol)\nHypothetically_wears(person, \"jockstrap\") :- Wears(\"athlete\", \"jockstrap\").\n\n.decl Answer()\nAnswer() :- Is_president(\"current president\", \"Ohio University\"), Hypothetically_wears(\"current president\", \"jockstrap\").\n.output Answer"]}
{"id": 825, "answer": true, "completion": ".decl Is_parent(Person:symbol)\nIs_parent(\"Alice\").\nIs_parent(\"Bob\").\n.decl Is_grandparent(Person:symbol)\nIs_grandparent(\"Alice\").\nIs_grandparent(\"Bob\").\n.decl Answer()\nAnswer() :- Is_grandparent(person), !Is_parent(person).\n.output Answer", "completions": [".decl Is_parent(Person:symbol)\nIs_parent(\"Alice\").\nIs_parent(\"Bob\").\n.decl Is_grandparent(Person:symbol)\nIs_grandparent(\"Alice\").\nIs_grandparent(\"Bob\").\n.decl Answer()\nAnswer() :- Is_grandparent(person), !Is_parent(person).\n.output Answer"]}
{"id": 826, "answer": false, "completion": ".decl Is_board_type(Board:symbol, Type:symbol)\nIs_board_type(\"chess\", \"8x8\").\nIs_board_type(\"shogi\", \"9x9\").\n.decl Answer()\nAnswer() :- Is_board_type(\"chess\", type1), Is_board_type(\"shogi\", type2), type1 = type2.\n.output Answer", "completions": [".decl Is_board_type(Board:symbol, Type:symbol)\nIs_board_type(\"chess\", \"8x8\").\nIs_board_type(\"shogi\", \"9x9\").\n.decl Answer()\nAnswer() :- Is_board_type(\"chess\", type1), Is_board_type(\"shogi\", type2), type1 = type2.\n.output Answer"]}
{"id": 827, "answer": false, "completion": ".decl Is_vulnerable_to_virus(Entity:symbol, Virus:symbol)\nIs_vulnerable_to_virus(\"human\", \"Coronavirus\").\n.decl Is_species(Entity:symbol, Species:symbol)\nIs_species(\"Darth Vader\", \"human\").\n.decl Answer()\nAnswer() :- Is_species(\"Darth Vader\", species), Is_vulnerable_to_virus(species, \"Coronavirus\").\n.output Answer", "completions": [".decl Is_vulnerable_to_virus(Entity:symbol, Virus:symbol)\nIs_vulnerable_to_virus(\"human\", \"Coronavirus\").\n.decl Is_species(Entity:symbol, Species:symbol)\nIs_species(\"Darth Vader\", \"human\").\n.decl Answer()\nAnswer() :- Is_species(\"Darth Vader\", species), Is_vulnerable_to_virus(species, \"Coronavirus\").\n.output Answer"]}
{"id": 828, "answer": true, "completion": ".decl Is_part_of_pantheon(Deity:symbol, Pantheon:symbol)\nIs_part_of_pantheon(\"Zeus\", \"Greek\").\nIs_part_of_pantheon(\"Thor\", \"Norse\").\nIs_part_of_pantheon(\"Ra\", \"Egyptian\").\nIs_part_of_pantheon(\"Flying Spaghetti Monster\", \"Pastafarian\").\n.decl Is_ancient_pantheon(Pantheon:symbol)\nIs_ancient_pantheon(\"Greek\").\nIs_ancient_pantheon(\"Norse\").\nIs_ancient_pantheon(\"Egyptian\").\n.decl Answer()\nAnswer() :- Is_part_of_pantheon(\"Flying Spaghetti Monster\", pantheon), Is_ancient_pantheon(pantheon).\n.output Answer", "completions": [".decl Is_part_of_pantheon(Deity:symbol, Pantheon:symbol)\nIs_part_of_pantheon(\"Zeus\", \"Greek\").\nIs_part_of_pantheon(\"Thor\", \"Norse\").\nIs_part_of_pantheon(\"Ra\", \"Egyptian\").\nIs_part_of_pantheon(\"Flying Spaghetti Monster\", \"Pastafarian\").\n.decl Is_ancient_pantheon(Pantheon:symbol)\nIs_ancient_pantheon(\"Greek\").\nIs_ancient_pantheon(\"Norse\").\nIs_ancient_pantheon(\"Egyptian\").\n.decl Answer()\nAnswer() :- Is_part_of_pantheon(\"Flying Spaghetti Monster\", pantheon), Is_ancient_pantheon(pantheon).\n.output Answer"]}
{"id": 829, "answer": false, "completion": ".decl Has_alphabet_position(Letter:symbol, Position:float)\nHas_alphabet_position(\"B\", 2).\n.decl Has_birth_order(Person:symbol, Order:float)\nHas_birth_order(\"Prince Harry\", 2).\n.decl Answer()\nAnswer() :- Has_alphabet_position(\"B\", position), Has_birth_order(\"Prince Harry\", order), position = order.\n.output Answer", "completions": [".decl Has_alphabet_position(Letter:symbol, Position:float)\nHas_alphabet_position(\"B\", 2).\n.decl Has_birth_order(Person:symbol, Order:float)\nHas_birth_order(\"Prince Harry\", 2).\n.decl Answer()\nAnswer() :- Has_alphabet_position(\"B\", position), Has_birth_order(\"Prince Harry\", order), position = order.\n.output Answer"]}
{"id": 830, "answer": true, "completion": ".decl Can_swallow(Animal:symbol, Object:symbol)\nCan_swallow(\"snake\", \"hamster\").\n.decl Is_object(Object:symbol, Type:symbol)\nIs_object(\"M60 Patton\", \"tank\").\n.decl Answer()\nAnswer() :- Can_swallow(\"snake\", \"M60 Patton\").\nAnswer() :- Can_swallow(\"snake\", object), Is_object(\"M60 Patton\", type), Is_object(object, type).\n.output Answer", "completions": [".decl Can_swallow(Animal:symbol, Object:symbol)\nCan_swallow(\"snake\", \"hamster\").\n.decl Is_object(Object:symbol, Type:symbol)\nIs_object(\"M60 Patton\", \"tank\").\n.decl Answer()\nAnswer() :- Can_swallow(\"snake\", \"M60 Patton\").\nAnswer() :- Can_swallow(\"snake\", object), Is_object(\"M60 Patton\", type), Is_object(object, type).\n.output Answer"]}
{"id": 831, "answer": true, "completion": ".decl Looks_similar(Object_A:symbol, Object_B:symbol)\nLooks_similar(\"chives\", \"grass\").\n.decl Answer()\nAnswer() :- Looks_similar(\"chives\", \"grass\").\n.output Answer", "completions": [".decl Looks_similar(Object_A:symbol, Object_B:symbol)\nLooks_similar(\"chives\", \"grass\").\n.decl Answer()\nAnswer() :- Looks_similar(\"chives\", \"grass\").\n.output Answer"]}
{"id": 832, "answer": true, "completion": ".decl Has_risk_factor(Condition:symbol, Risk_factor:symbol)\nHas_risk_factor(\"Anorexia nervosa\", \"increased bone fracture risk\").\n.decl Answer()\nAnswer() :- Has_risk_factor(\"Anorexia nervosa\", \"increased bone fracture risk\").\n.output Answer", "completions": [".decl Has_risk_factor(Condition:symbol, Risk_factor:symbol)\nHas_risk_factor(\"Anorexia nervosa\", \"increased bone fracture risk\").\n.decl Answer()\nAnswer() :- Has_risk_factor(\"Anorexia nervosa\", \"increased bone fracture risk\").\n.output Answer"]}
{"id": 833, "answer": false, "completion": ".decl Is_bull(Object:symbol)\nIs_bull(\"bull shark\").\n\n.decl Is_shark(Object:symbol)\nIs_shark(\"bull shark\").\n\n.decl Answer()\nAnswer() :- Is_bull(object), !Is_shark(object).\n.output Answer", "completions": [".decl Is_bull(Object:symbol)\nIs_bull(\"bull shark\").\n\n.decl Is_shark(Object:symbol)\nIs_shark(\"bull shark\").\n\n.decl Answer()\nAnswer() :- Is_bull(object), !Is_shark(object).\n.output Answer"]}
{"id": 834, "answer": true, "completion": ".decl US_President_during(Event:symbol, President:symbol)\nUS_President_during(\"Spanish-American War\", \"William McKinley\").\n.decl Suffered_demise(President:symbol, Demise:symbol)\nSuffered_demise(\"Abraham Lincoln\", \"assassination\").\nSuffered_demise(\"William McKinley\", \"assassination\").\n.decl Answer()\nAnswer() :- US_President_during(\"Spanish-American War\", president), Suffered_demise(president, demise), Suffered_demise(\"Abraham Lincoln\", demise).\n.output Answer", "completions": [".decl US_President_during(Event:symbol, President:symbol)\nUS_President_during(\"Spanish-American War\", \"William McKinley\").\n.decl Suffered_demise(President:symbol, Demise:symbol)\nSuffered_demise(\"Abraham Lincoln\", \"assassination\").\nSuffered_demise(\"William McKinley\", \"assassination\").\n.decl Answer()\nAnswer() :- US_President_during(\"Spanish-American War\", president), Suffered_demise(president, demise), Suffered_demise(\"Abraham Lincoln\", demise).\n.output Answer"]}
{"id": 835, "answer": false, "completion": ".decl Collaborated(Artist_A:symbol, Artist_B:symbol)\nCollaborated(\"Aretha Franklin\", \"George Michael\").\nCollaborated(\"Aretha Franklin\", \"Elton John\").\nCollaborated(\"Aretha Franklin\", \"Luther Vandross\").\n.decl Has_suicidal_history(Person:symbol)\nHas_suicidal_history(\"George Michael\").\nHas_suicidal_history(\"Elton John\").\n.decl Answer()\nAnswer() :- Collaborated(\"Aretha Franklin\", artist), Has_suicidal_history(artist).\n.output Answer", "completions": [".decl Collaborated(Artist_A:symbol, Artist_B:symbol)\nCollaborated(\"Aretha Franklin\", \"George Michael\").\nCollaborated(\"Aretha Franklin\", \"Elton John\").\nCollaborated(\"Aretha Franklin\", \"Luther Vandross\").\n.decl Has_suicidal_history(Person:symbol)\nHas_suicidal_history(\"George Michael\").\nHas_suicidal_history(\"Elton John\").\n.decl Answer()\nAnswer() :- Collaborated(\"Aretha Franklin\", artist), Has_suicidal_history(artist).\n.output Answer"]}
{"id": 836, "answer": true, "completion": ".decl Has_extra_wheels(Object:symbol, Extra_wheels:float)\nHas_extra_wheels(\"children's bicycle\", 2).\n.decl Answer()\nAnswer() :- Has_extra_wheels(\"children's bicycle\", extra_wheels), extra_wheels > 0.\n.output Answer", "completions": [".decl Has_extra_wheels(Object:symbol, Extra_wheels:float)\nHas_extra_wheels(\"children's bicycle\", 2).\n.decl Answer()\nAnswer() :- Has_extra_wheels(\"children's bicycle\", extra_wheels), extra_wheels > 0.\n.output Answer"]}
{"id": 837, "answer": true, "completion": ".decl Is_geometry_type(Object:symbol, Geometry_type:symbol)\nIs_geometry_type(\"Royal Observatory in Greenwich\", \"building\").\nIs_geometry_type(\"yield sign\", \"triangle\").\n.decl Answer()\nAnswer() :- Is_geometry_type(\"Royal Observatory in Greenwich\", geometry1), Is_geometry_type(\"yield sign\", geometry2), geometry1 = geometry2.\n.output Answer", "completions": [".decl Is_geometry_type(Object:symbol, Geometry_type:symbol)\nIs_geometry_type(\"Royal Observatory in Greenwich\", \"building\").\nIs_geometry_type(\"yield sign\", \"triangle\").\n.decl Answer()\nAnswer() :- Is_geometry_type(\"Royal Observatory in Greenwich\", geometry1), Is_geometry_type(\"yield sign\", geometry2), geometry1 = geometry2.\n.output Answer"]}
{"id": 838, "answer": false, "completion": ".decl Movie(Movie:symbol, Nerd:symbol, Loser:symbol)\nMovie(\"Revenge of the Nerds\", \"nerd\", \"loser\").\nMovie(\"The Social Network\", \"nerd\", \"winner\").\n.decl Answer()\nAnswer() :- Movie(movie, \"nerd\", \"loser\"), !Movie(movie, \"nerd\", \"winner\").\n.output Answer", "completions": [".decl Movie(Movie:symbol, Nerd:symbol, Loser:symbol)\nMovie(\"Revenge of the Nerds\", \"nerd\", \"loser\").\nMovie(\"The Social Network\", \"nerd\", \"winner\").\n.decl Answer()\nAnswer() :- Movie(movie, \"nerd\", \"loser\"), !Movie(movie, \"nerd\", \"winner\").\n.output Answer"]}
{"id": 839, "answer": true, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"United States\", 331000000).\n.decl Has_market_cap(Company:symbol, Market_cap:float)\nHas_market_cap(\"JPMorgan Chase\", 466000000000).\n.decl Answer()\nAnswer() :- Has_population(\"United States\", population), Has_market_cap(\"JPMorgan Chase\", market_cap), market_cap >= population * 10.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"United States\", 331000000).\n.decl Has_market_cap(Company:symbol, Market_cap:float)\nHas_market_cap(\"JPMorgan Chase\", 466000000000).\n.decl Answer()\nAnswer() :- Has_population(\"United States\", population), Has_market_cap(\"JPMorgan Chase\", market_cap), market_cap >= population * 10.\n.output Answer"]}
{"id": 840, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"largest crustacean\", 3.8).\nHas_length(\"king-sized mattress\", 2.03).\n.decl Has_width(Object:symbol, Width:float)\nHas_width(\"largest crustacean\", 3.8).\nHas_width(\"king-sized mattress\", 1.93).\n.decl Answer()\nAnswer() :- Has_length(\"largest crustacean\", length1), Has_length(\"king-sized mattress\", length2), Has_width(\"largest crustacean\", width1), Has_width(\"king-sized mattress\", width2), length1 <= length2, width1 <= width2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"largest crustacean\", 3.8).\nHas_length(\"king-sized mattress\", 2.03).\n.decl Has_width(Object:symbol, Width:float)\nHas_width(\"largest crustacean\", 3.8).\nHas_width(\"king-sized mattress\", 1.93).\n.decl Answer()\nAnswer() :- Has_length(\"largest crustacean\", length1), Has_length(\"king-sized mattress\", length2), Has_width(\"largest crustacean\", width1), Has_width(\"king-sized mattress\", width2), length1 <= length2, width1 <= width2.\n.output Answer"]}
{"id": 841, "answer": true, "completion": ".decl Circle_of_Hell(Person:symbol, Circle:float)\nCircle_of_Hell(\"Dante Alighieri\", 0).\n.decl Sin(Person:symbol, Sin_type:symbol)\nSin(\"Rupert Murdoch\", \"sower of discord\").\n.decl Circle_for_Sin(Sin_type:symbol, Circle:float)\nCircle_for_Sin(\"sower of discord\", 8).\n.decl Answer()\nAnswer() :- Sin(\"Rupert Murdoch\", sin_type), Circle_for_Sin(sin_type, circle), Circle_of_Hell(\"Dante Alighieri\", 0), circle = 8.\n.output Answer", "completions": [".decl Circle_of_Hell(Person:symbol, Circle:float)\nCircle_of_Hell(\"Dante Alighieri\", 0).\n.decl Sin(Person:symbol, Sin_type:symbol)\nSin(\"Rupert Murdoch\", \"sower of discord\").\n.decl Circle_for_Sin(Sin_type:symbol, Circle:float)\nCircle_for_Sin(\"sower of discord\", 8).\n.decl Answer()\nAnswer() :- Sin(\"Rupert Murdoch\", sin_type), Circle_for_Sin(sin_type, circle), Circle_of_Hell(\"Dante Alighieri\", 0), circle = 8.\n.output Answer"]}
{"id": 842, "answer": true, "completion": ".decl Uses_calendar(Entity:symbol, Calendar:symbol)\nUses_calendar(\"Eastern Orthodox Church\", \"Julian calendar\").\nUses_calendar(\"Byzantine Empire\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Uses_calendar(\"Eastern Orthodox Church\", calendar1), Uses_calendar(\"Byzantine Empire\", calendar2), calendar1 = calendar2.\n.output Answer", "completions": [".decl Uses_calendar(Entity:symbol, Calendar:symbol)\nUses_calendar(\"Eastern Orthodox Church\", \"Julian calendar\").\nUses_calendar(\"Byzantine Empire\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Uses_calendar(\"Eastern Orthodox Church\", calendar1), Uses_calendar(\"Byzantine Empire\", calendar2), calendar1 = calendar2.\n.output Answer"]}
{"id": 843, "answer": true, "completion": ".decl Is_dichromat(Person:symbol)\nIs_dichromat(\"probably\").\n.decl Has_color(Gas:symbol, Color:symbol)\nHas_color(\"chlorine gas\", \"green\").\nHas_color(\"neon gas\", \"red\").\n.decl Can_distinguish(Person:symbol, Color1:symbol, Color2:symbol)\nCan_distinguish(\"probably\", \"green\", \"red\").\n.decl Answer()\nAnswer() :- Is_dichromat(person), Has_color(\"chlorine gas\", color1), Has_color(\"neon gas\", color2), Can_distinguish(person, color1, color2).\n.output Answer", "completions": [".decl Is_dichromat(Person:symbol)\nIs_dichromat(\"probably\").\n.decl Has_color(Gas:symbol, Color:symbol)\nHas_color(\"chlorine gas\", \"green\").\nHas_color(\"neon gas\", \"red\").\n.decl Can_distinguish(Person:symbol, Color1:symbol, Color2:symbol)\nCan_distinguish(\"probably\", \"green\", \"red\").\n.decl Answer()\nAnswer() :- Is_dichromat(person), Has_color(\"chlorine gas\", color1), Has_color(\"neon gas\", color2), Can_distinguish(person, color1, color2).\n.output Answer"]}
{"id": 844, "answer": true, "completion": ".decl Has_real_name(Person:symbol, Real_name:symbol)\nHas_real_name(\"Augustus\", \"Gaius Octavius\").\n.decl Answer()\nAnswer() :- Has_real_name(\"Augustus\", real_name), real_name != \"Augustus\".\n.output Answer", "completions": [".decl Has_real_name(Person:symbol, Real_name:symbol)\nHas_real_name(\"Augustus\", \"Gaius Octavius\").\n.decl Answer()\nAnswer() :- Has_real_name(\"Augustus\", real_name), real_name != \"Augustus\".\n.output Answer"]}
{"id": 845, "answer": true, "completion": ".decl Is_monogamous(Character:symbol)\nIs_monogamous(\"Darth Vader\").\n.decl Answer()\nAnswer() :- Is_monogamous(\"Darth Vader\").\n.output Answer", "completions": [".decl Is_monogamous(Character:symbol)\nIs_monogamous(\"Darth Vader\").\n.decl Answer()\nAnswer() :- Is_monogamous(\"Darth Vader\").\n.output Answer"]}
{"id": 846, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Al-Farabi\", 872).\nBorn_in_year(\"Mohammed\", 570).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Al-Farabi\", 950).\nDied_in_year(\"Mohammed\", 632).\n.decl Met(Person_A:symbol, Person_B:symbol)\nMet(personA, personB) :- Born_in_year(personA, birthA), Died_in_year(personA, deathA), Born_in_year(personB, birthB), Died_in_year(personB, deathB), birthA <= deathB, birthB <= deathA.\n.decl Answer()\nAnswer() :- Met(\"Al-Farabi\", \"Mohammed\").\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Al-Farabi\", 872).\nBorn_in_year(\"Mohammed\", 570).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Al-Farabi\", 950).\nDied_in_year(\"Mohammed\", 632).\n.decl Met(Person_A:symbol, Person_B:symbol)\nMet(personA, personB) :- Born_in_year(personA, birthA), Died_in_year(personA, deathA), Born_in_year(personB, birthB), Died_in_year(personB, deathB), birthA <= deathB, birthB <= deathA.\n.decl Answer()\nAnswer() :- Met(\"Al-Farabi\", \"Mohammed\").\n.output Answer"]}
{"id": 847, "answer": true, "completion": ".decl Voted_for(Person:symbol, Candidate:symbol, Year:float)\nVoted_for(\"Dustin Hoffman\", \"Hillary Clinton\", 2016).\n.decl Supports(Person:symbol, Candidate:symbol)\nSupports(\"Dustin Hoffman\", \"Democratic Party\").\n.decl Candidate_affiliation(Candidate:symbol, Party:symbol)\nCandidate_affiliation(\"Donald Trump\", \"Republican Party\").\n.decl Answer()\nAnswer() :- !Supports(\"Dustin Hoffman\", \"Republican Party\"), Candidate_affiliation(\"Donald Trump\", \"Republican Party\").\n.output Answer", "completions": [".decl Voted_for(Person:symbol, Candidate:symbol, Year:float)\nVoted_for(\"Dustin Hoffman\", \"Hillary Clinton\", 2016).\n.decl Supports(Person:symbol, Candidate:symbol)\nSupports(\"Dustin Hoffman\", \"Democratic Party\").\n.decl Candidate_affiliation(Candidate:symbol, Party:symbol)\nCandidate_affiliation(\"Donald Trump\", \"Republican Party\").\n.decl Answer()\nAnswer() :- !Supports(\"Dustin Hoffman\", \"Republican Party\"), Candidate_affiliation(\"Donald Trump\", \"Republican Party\").\n.output Answer"]}
{"id": 848, "answer": true, "completion": ".decl Is_European_political_agency(Agency:symbol)\nIs_European_political_agency(\"Foreign and Commonwealth Office\").\n.decl Answer()\nAnswer() :- Is_European_political_agency(\"Foreign and Commonwealth Office\").\n.output Answer", "completions": [".decl Is_European_political_agency(Agency:symbol)\nIs_European_political_agency(\"Foreign and Commonwealth Office\").\n.decl Answer()\nAnswer() :- Is_European_political_agency(\"Foreign and Commonwealth Office\").\n.output Answer"]}
{"id": 849, "answer": false, "completion": ".decl Is_focus_of(Book:symbol, Person:symbol)\nIs_focus_of(\"Romance of the Three Kingdoms\", \"Liu Bei\").\nIs_focus_of(\"Romance of the Three Kingdoms\", \"Cao Cao\").\nIs_focus_of(\"Romance of the Three Kingdoms\", \"Sun Quan\").\n.decl Is_ancestor_of(Person1:symbol, Person2:symbol)\nIs_ancestor_of(\"Liu Bei\", \"Naruhito\").\nIs_ancestor_of(\"Cao Cao\", \"Naruhito\").\nIs_ancestor_of(\"Sun Quan\", \"Naruhito\").\n.decl Answer()\nAnswer() :- Is_focus_of(\"Romance of the Three Kingdoms\", person), Is_ancestor_of(person, \"Naruhito\").\n.output Answer", "completions": [".decl Is_focus_of(Book:symbol, Person:symbol)\nIs_focus_of(\"Romance of the Three Kingdoms\", \"Liu Bei\").\nIs_focus_of(\"Romance of the Three Kingdoms\", \"Cao Cao\").\nIs_focus_of(\"Romance of the Three Kingdoms\", \"Sun Quan\").\n.decl Is_ancestor_of(Person1:symbol, Person2:symbol)\nIs_ancestor_of(\"Liu Bei\", \"Naruhito\").\nIs_ancestor_of(\"Cao Cao\", \"Naruhito\").\nIs_ancestor_of(\"Sun Quan\", \"Naruhito\").\n.decl Answer()\nAnswer() :- Is_focus_of(\"Romance of the Three Kingdoms\", person), Is_ancestor_of(person, \"Naruhito\").\n.output Answer"]}
{"id": 850, "answer": true, "completion": ".decl Won_award(Person:symbol, Award:symbol)\nWon_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Won_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.output Answer", "completions": [".decl Won_award(Person:symbol, Award:symbol)\nWon_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Won_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.output Answer"]}
{"id": 851, "answer": true, "completion": ".decl Fibonacci(N:float)\nFibonacci(0).\nFibonacci(1).\nFibonacci(1).\nFibonacci(2).\nFibonacci(3).\nFibonacci(5).\nFibonacci(8).\n.decl Single_digit_Fibonacci(N:float)\nSingle_digit_Fibonacci(N) :- Fibonacci(N), N >= 0, N < 10.\n.decl Count_single_digit_Fibonacci(N:float)\nCount_single_digit_Fibonacci(count<N>) :- N = count : Single_digit_Fibonacci(N).\n.decl Answer()\nAnswer() :- Count_single_digit_Fibonacci(5).\n.output Answer", "completions": [".decl Fibonacci(N:float)\nFibonacci(0).\nFibonacci(1).\nFibonacci(1).\nFibonacci(2).\nFibonacci(3).\nFibonacci(5).\nFibonacci(8).\n.decl Single_digit_Fibonacci(N:float)\nSingle_digit_Fibonacci(N) :- Fibonacci(N), N >= 0, N < 10.\n.decl Count_single_digit_Fibonacci(N:float)\nCount_single_digit_Fibonacci(count<N>) :- N = count : Single_digit_Fibonacci(N).\n.decl Answer()\nAnswer() :- Count_single_digit_Fibonacci(5).\n.output Answer"]}
{"id": 852, "answer": true, "completion": ".decl Requires(Resource:symbol, Task:symbol)\nRequires(\"electricity\", \"use Microsoft Excel\").\nRequires(\"electricity\", \"balance an account in Microsoft Excel\").\n.decl Answer()\nAnswer() :- Requires(\"electricity\", \"balance an account in Microsoft Excel\").\n.output Answer", "completions": [".decl Requires(Resource:symbol, Task:symbol)\nRequires(\"electricity\", \"use Microsoft Excel\").\nRequires(\"electricity\", \"balance an account in Microsoft Excel\").\n.decl Answer()\nAnswer() :- Requires(\"electricity\", \"balance an account in Microsoft Excel\").\n.output Answer"]}
{"id": 853, "answer": true, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Hulk's alter ego\", \"physicist\").\n.decl Can_explain(Profession:symbol, Topic:symbol)\nCan_explain(\"physicist\", \"atomic events\").\n.decl Answer()\nAnswer() :- Has_profession(\"Hulk's alter ego\", profession), Can_explain(profession, \"atomic events\").\n.output Answer", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Hulk's alter ego\", \"physicist\").\n.decl Can_explain(Profession:symbol, Topic:symbol)\nCan_explain(\"physicist\", \"atomic events\").\n.decl Answer()\nAnswer() :- Has_profession(\"Hulk's alter ego\", profession), Can_explain(profession, \"atomic events\").\n.output Answer"]}
{"id": 854, "answer": true, "completion": ".decl Is_written_as(Person:symbol, Writing_style:symbol)\nIs_written_as(\"most books\", \"prose\").\nIs_written_as(\"Haiku\", \"poetry\").\n.decl Answer()\nAnswer() :- Is_written_as(\"most books\", \"Haiku\").\nAnswer() :- Is_written_as(\"most books\", style1), Is_written_as(\"Haiku\", style2), style1 = style2.\n.output Answer", "completions": [".decl Is_written_as(Person:symbol, Writing_style:symbol)\nIs_written_as(\"most books\", \"prose\").\nIs_written_as(\"Haiku\", \"poetry\").\n.decl Answer()\nAnswer() :- Is_written_as(\"most books\", \"Haiku\").\nAnswer() :- Is_written_as(\"most books\", style1), Is_written_as(\"Haiku\", style2), style1 = style2.\n.output Answer"]}
{"id": 855, "answer": true, "completion": ".decl Helped(Party:symbol, Person:symbol, Title:symbol)\nHelped(\"Social Democratic Party of Germany\", \"Frederick II\", \"King of Prussia\").\n.decl Existed_in_time(Entity:symbol, Time_period:symbol)\nExisted_in_time(\"Social Democratic Party of Germany\", \"19th century\").\nExisted_in_time(\"Frederick II\", \"18th century\").\n.decl Answer()\nAnswer() :- Helped(\"Social Democratic Party of Germany\", \"Frederick II\", \"King of Prussia\"), Existed_in_time(\"Social Democratic Party of Germany\", time1), Existed_in_time(\"Frederick II\", time2), time1 != time2.\n.output Answer", "completions": [".decl Helped(Party:symbol, Person:symbol, Title:symbol)\nHelped(\"Social Democratic Party of Germany\", \"Frederick II\", \"King of Prussia\").\n.decl Existed_in_time(Entity:symbol, Time_period:symbol)\nExisted_in_time(\"Social Democratic Party of Germany\", \"19th century\").\nExisted_in_time(\"Frederick II\", \"18th century\").\n.decl Answer()\nAnswer() :- Helped(\"Social Democratic Party of Germany\", \"Frederick II\", \"King of Prussia\"), Existed_in_time(\"Social Democratic Party of Germany\", time1), Existed_in_time(\"Frederick II\", time2), time1 != time2.\n.output Answer"]}
{"id": 856, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Toyota Hilux\", 1700).\nHas_weight(\"Mr. Ed\", 1000).\n.decl Answer()\nAnswer() :- Has_weight(\"Toyota Hilux\", weight1), Has_weight(\"Mr. Ed\", weight2), weight1 > weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Toyota Hilux\", 1700).\nHas_weight(\"Mr. Ed\", 1000).\n.decl Answer()\nAnswer() :- Has_weight(\"Toyota Hilux\", weight1), Has_weight(\"Mr. Ed\", weight2), weight1 > weight2.\n.output Answer"]}
{"id": 857, "answer": true, "completion": ".decl Follows_name_origin(Day:symbol, Origin:symbol)\nFollows_name_origin(\"Wednesday\", \"Odin\").\n.decl Denied_communion(Follower:symbol)\nDenied_communion(\"Odin\").\n.decl Answer()\nAnswer() :- Follows_name_origin(day, origin), Denied_communion(origin).\n.output Answer", "completions": [".decl Follows_name_origin(Day:symbol, Origin:symbol)\nFollows_name_origin(\"Wednesday\", \"Odin\").\n.decl Denied_communion(Follower:symbol)\nDenied_communion(\"Odin\").\n.decl Answer()\nAnswer() :- Follows_name_origin(day, origin), Denied_communion(origin).\n.output Answer"]}
{"id": 858, "answer": true, "completion": ".decl Writes_horoscopes(Profession:symbol)\nWrites_horoscopes(\"astrologer\").\n.decl Is_astronomer(Person:symbol)\nIs_astronomer(\"astronomer\").\n.decl Answer()\nAnswer() :- Is_astronomer(person), Writes_horoscopes(person).\n.output Answer", "completions": [".decl Writes_horoscopes(Profession:symbol)\nWrites_horoscopes(\"astrologer\").\n.decl Is_astronomer(Person:symbol)\nIs_astronomer(\"astronomer\").\n.decl Answer()\nAnswer() :- Is_astronomer(person), Writes_horoscopes(person).\n.output Answer"]}
{"id": 859, "answer": true, "completion": ".decl Visited(Person:symbol, Place:symbol)\nVisited(\"Edward Snowden\", \"United States\").\n.decl Headquarters(Organization:symbol, Country:symbol)\nHeadquarters(\"United Nations Conference on Trade and Development\", \"Switzerland\").\n.decl Answer()\nAnswer() :- Visited(\"Edward Snowden\", country), Headquarters(\"United Nations Conference on Trade and Development\", country).\n.output Answer", "completions": [".decl Visited(Person:symbol, Place:symbol)\nVisited(\"Edward Snowden\", \"United States\").\n.decl Headquarters(Organization:symbol, Country:symbol)\nHeadquarters(\"United Nations Conference on Trade and Development\", \"Switzerland\").\n.decl Answer()\nAnswer() :- Visited(\"Edward Snowden\", country), Headquarters(\"United Nations Conference on Trade and Development\", country).\n.output Answer"]}
{"id": 860, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol, Amount:float)\nEats(\"Popeye\", \"spinach\", 1000).\n.decl Recommended_daily_amount(Food:symbol, Amount:float)\nRecommended_daily_amount(\"spinach\", 30).\n.decl Answer()\nAnswer() :- Eats(\"Popeye\", \"spinach\", amount1), Recommended_daily_amount(\"spinach\", amount2), amount1 > amount2.\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol, Amount:float)\nEats(\"Popeye\", \"spinach\", 1000).\n.decl Recommended_daily_amount(Food:symbol, Amount:float)\nRecommended_daily_amount(\"spinach\", 30).\n.decl Answer()\nAnswer() :- Eats(\"Popeye\", \"spinach\", amount1), Recommended_daily_amount(\"spinach\", amount2), amount1 > amount2.\n.output Answer"]}
{"id": 861, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"bengal fox\", \"India\").\n.decl Event_happens_in(Event:symbol, Location:symbol)\nEvent_happens_in(\"Superbowl\", \"United States\").\n.decl Answer()\nAnswer() :- Lives_in(\"bengal fox\", location1), Event_happens_in(\"Superbowl\", location2), location1 = location2.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"bengal fox\", \"India\").\n.decl Event_happens_in(Event:symbol, Location:symbol)\nEvent_happens_in(\"Superbowl\", \"United States\").\n.decl Answer()\nAnswer() :- Lives_in(\"bengal fox\", location1), Event_happens_in(\"Superbowl\", location2), location1 = location2.\n.output Answer"]}
{"id": 862, "answer": false, "completion": ".decl Follows_religion(Person:symbol, Religion:symbol)\nFollows_religion(\"Jehovah's Witness\", \"Christianity\").\n.decl Approves_of(Person:symbol, Book:symbol)\nApproves_of(\"Christianity\", \"Bible\").\n.decl Contains(Book:symbol, Content:symbol)\nContains(\"Alice's Adventures in Wonderland\", \"fantasy\").\n.decl Disapproves_of(Religion:symbol, Content:symbol)\nDisapproves_of(\"Christianity\", \"fantasy\").\n.decl Answer()\nAnswer() :- Follows_religion(\"Jehovah's Witness\", religion), Approves_of(religion, \"Alice's Adventures in Wonderland\").\nAnswer() :- Follows_religion(\"Jehovah's Witness\", religion), Contains(\"Alice's Adventures in Wonderland\", content), Disapproves_of(religion, content).\n.output Answer", "completions": [".decl Follows_religion(Person:symbol, Religion:symbol)\nFollows_religion(\"Jehovah's Witness\", \"Christianity\").\n.decl Approves_of(Person:symbol, Book:symbol)\nApproves_of(\"Christianity\", \"Bible\").\n.decl Contains(Book:symbol, Content:symbol)\nContains(\"Alice's Adventures in Wonderland\", \"fantasy\").\n.decl Disapproves_of(Religion:symbol, Content:symbol)\nDisapproves_of(\"Christianity\", \"fantasy\").\n.decl Answer()\nAnswer() :- Follows_religion(\"Jehovah's Witness\", religion), Approves_of(religion, \"Alice's Adventures in Wonderland\").\nAnswer() :- Follows_religion(\"Jehovah's Witness\", religion), Contains(\"Alice's Adventures in Wonderland\", content), Disapproves_of(religion, content).\n.output Answer"]}
{"id": 863, "answer": true, "completion": ".decl Has_contact(Sport:symbol, Contact_level:symbol)\nHas_contact(\"Judo\", \"high\").\n.decl Comfortable_with_contact(Phobia:symbol, Contact_level:symbol)\nComfortable_with_contact(\"Germaphobia\", \"low\").\n.decl Answer()\nAnswer() :- Has_contact(\"Judo\", contact_level), Comfortable_with_contact(\"Germaphobia\", contact_level).\nAnswer() :- Has_contact(\"Judo\", contact_level1), Comfortable_with_contact(\"Germaphobia\", contact_level2), contact_level1 <= contact_level2.\n.output Answer", "completions": [".decl Has_contact(Sport:symbol, Contact_level:symbol)\nHas_contact(\"Judo\", \"high\").\n.decl Comfortable_with_contact(Phobia:symbol, Contact_level:symbol)\nComfortable_with_contact(\"Germaphobia\", \"low\").\n.decl Answer()\nAnswer() :- Has_contact(\"Judo\", contact_level), Comfortable_with_contact(\"Germaphobia\", contact_level).\nAnswer() :- Has_contact(\"Judo\", contact_level1), Comfortable_with_contact(\"Germaphobia\", contact_level2), contact_level1 <= contact_level2.\n.output Answer"]}
{"id": 864, "answer": true, "completion": ".decl Is_in_location(Object:symbol, Location:symbol)\nIs_in_location(\"lifeboat\", \"Hooke Sea\").\n.decl Can_rescue(Object:symbol, Target:symbol)\nCan_rescue(\"lifeboat\", \"people\").\n.decl Answer()\nAnswer() :- Can_rescue(\"lifeboat\", \"people\"), Is_in_location(\"lifeboat\", \"Hooke Sea\").\n.output Answer", "completions": [".decl Is_in_location(Object:symbol, Location:symbol)\nIs_in_location(\"lifeboat\", \"Hooke Sea\").\n.decl Can_rescue(Object:symbol, Target:symbol)\nCan_rescue(\"lifeboat\", \"people\").\n.decl Answer()\nAnswer() :- Can_rescue(\"lifeboat\", \"people\"), Is_in_location(\"lifeboat\", \"Hooke Sea\").\n.output Answer"]}
{"id": 865, "answer": true, "completion": ".decl Mentioned_in_court(Document:symbol, Frequency:symbol)\nMentioned_in_court(\"Eighth Amendment to the United States Constitution\", \"frequently\").\n.decl Answer()\nAnswer() :- Mentioned_in_court(\"Eighth Amendment to the United States Constitution\", \"frequently\").\n.output Answer", "completions": [".decl Mentioned_in_court(Document:symbol, Frequency:symbol)\nMentioned_in_court(\"Eighth Amendment to the United States Constitution\", \"frequently\").\n.decl Answer()\nAnswer() :- Mentioned_in_court(\"Eighth Amendment to the United States Constitution\", \"frequently\").\n.output Answer"]}
{"id": 866, "answer": true, "completion": ".decl Has_temperature(Source:symbol, Temperature:float)\nHas_temperature(\"cosmic microwave background\", 2.7).\n.decl Cooks_at_temperature(Food:symbol, Temperature:float)\nCooks_at_temperature(\"food\", 60).\n.decl Answer()\nAnswer() :- Has_temperature(\"cosmic microwave background\", temp1), Cooks_at_temperature(\"food\", temp2), temp1 >= temp2.\n.output Answer", "completions": [".decl Has_temperature(Source:symbol, Temperature:float)\nHas_temperature(\"cosmic microwave background\", 2.7).\n.decl Cooks_at_temperature(Food:symbol, Temperature:float)\nCooks_at_temperature(\"food\", 60).\n.decl Answer()\nAnswer() :- Has_temperature(\"cosmic microwave background\", temp1), Cooks_at_temperature(\"food\", temp2), temp1 >= temp2.\n.output Answer"]}
{"id": 867, "answer": true, "completion": ".decl Cares_about(Person:symbol, Topic:symbol)\nCares_about(\"Nigella Lawson\", \"cooking\").\nCares_about(\"Nigella Lawson\", \"food\").\n.decl Related_to(Topic_A:symbol, Topic_B:symbol)\nRelated_to(\"solubility\", \"cooking\").\nRelated_to(\"solubility\", \"food\").\n.decl Answer()\nAnswer() :- Cares_about(\"Nigella Lawson\", topic1), Related_to(topic1, \"solubility\").\n.output Answer", "completions": [".decl Cares_about(Person:symbol, Topic:symbol)\nCares_about(\"Nigella Lawson\", \"cooking\").\nCares_about(\"Nigella Lawson\", \"food\").\n.decl Related_to(Topic_A:symbol, Topic_B:symbol)\nRelated_to(\"solubility\", \"cooking\").\nRelated_to(\"solubility\", \"food\").\n.decl Answer()\nAnswer() :- Cares_about(\"Nigella Lawson\", topic1), Related_to(topic1, \"solubility\").\n.output Answer"]}
{"id": 868, "answer": true, "completion": ".decl Played_sport(Person:symbol, Sport:symbol)\nPlayed_sport(\"Rahul Dravid\", \"cricket\").\n.decl Involves_action(Sport:symbol, Action:symbol)\nInvolves_action(\"football\", \"kick a field goal\").\n.decl Answer()\nAnswer() :- Played_sport(\"Rahul Dravid\", sport), Involves_action(sport, \"kick a field goal\").\n.output Answer", "completions": [".decl Played_sport(Person:symbol, Sport:symbol)\nPlayed_sport(\"Rahul Dravid\", \"cricket\").\n.decl Involves_action(Sport:symbol, Action:symbol)\nInvolves_action(\"football\", \"kick a field goal\").\n.decl Answer()\nAnswer() :- Played_sport(\"Rahul Dravid\", sport), Involves_action(sport, \"kick a field goal\").\n.output Answer"]}
{"id": 869, "answer": true, "completion": ".decl Played_concert(Band:symbol, Venue:symbol)\nPlayed_concert(\"U2\", \"Polo Grounds\").\n.decl Answer()\nAnswer() :- Played_concert(\"U2\", \"Polo Grounds\").\n.output Answer", "completions": [".decl Played_concert(Band:symbol, Venue:symbol)\nPlayed_concert(\"U2\", \"Polo Grounds\").\n.decl Answer()\nAnswer() :- Played_concert(\"U2\", \"Polo Grounds\").\n.output Answer"]}
{"id": 870, "answer": true, "completion": ".decl Has_similar_meal(Meal_A:symbol, Meal_B:symbol, Cuisine_A:symbol, Cuisine_B:symbol)\nHas_similar_meal(\"breakfast\", \"dinner\", \"British\", \"American\").\n.decl Answer()\nAnswer() :- Has_similar_meal(\"breakfast\", \"dinner\", \"British\", \"American\").\n.output Answer", "completions": [".decl Has_similar_meal(Meal_A:symbol, Meal_B:symbol, Cuisine_A:symbol, Cuisine_B:symbol)\nHas_similar_meal(\"breakfast\", \"dinner\", \"British\", \"American\").\n.decl Answer()\nAnswer() :- Has_similar_meal(\"breakfast\", \"dinner\", \"British\", \"American\").\n.output Answer"]}
{"id": 871, "answer": true, "completion": ".decl Is_blooming_onion_possible(Onion_type:symbol)\nIs_blooming_onion_possible(\"regular onion\").\n.decl Answer()\nAnswer() :- Is_blooming_onion_possible(\"shallot\").\n.output Answer", "completions": [".decl Is_blooming_onion_possible(Onion_type:symbol)\nIs_blooming_onion_possible(\"regular onion\").\n.decl Answer()\nAnswer() :- Is_blooming_onion_possible(\"shallot\").\n.output Answer"]}
{"id": 872, "answer": false, "completion": ".decl Has_solubility(Object:symbol, Solvent:symbol, Solubility:symbol)\nHas_solubility(\"salt\", \"isopropyl alcohol\", \"low\").\n.decl Answer()\nAnswer() :- Has_solubility(\"salt\", \"isopropyl alcohol\", \"low\").\n.output Answer", "completions": [".decl Has_solubility(Object:symbol, Solvent:symbol, Solubility:symbol)\nHas_solubility(\"salt\", \"isopropyl alcohol\", \"low\").\n.decl Answer()\nAnswer() :- Has_solubility(\"salt\", \"isopropyl alcohol\", \"low\").\n.output Answer"]}
{"id": 873, "answer": false, "completion": ".decl Has_width(Object:symbol, Width:float)\nHas_width(\"Mac Truck\", 2.6).\nHas_width(\"Golden Gate Bridge\", 27.4).\n.decl Answer()\nAnswer() :- Has_width(\"Mac Truck\", width1), Has_width(\"Golden Gate Bridge\", width2), 13 * width1 > width2.\n.output Answer", "completions": [".decl Has_width(Object:symbol, Width:float)\nHas_width(\"Mac Truck\", 2.6).\nHas_width(\"Golden Gate Bridge\", 27.4).\n.decl Answer()\nAnswer() :- Has_width(\"Mac Truck\", width1), Has_width(\"Golden Gate Bridge\", width2), 13 * width1 > width2.\n.output Answer"]}
{"id": 874, "answer": true, "completion": ".decl Has_surface(Object:symbol, Surface_type:symbol)\nHas_surface(\"asteroid\", \"rocky\").\n.decl Can_build_on(Surface_type:symbol, Structure:symbol)\nCan_build_on(\"rocky\", \"house\").\n.decl Answer()\nAnswer() :- Has_surface(\"asteroid\", surface_type), Can_build_on(surface_type, \"house\").\n.output Answer", "completions": [".decl Has_surface(Object:symbol, Surface_type:symbol)\nHas_surface(\"asteroid\", \"rocky\").\n.decl Can_build_on(Surface_type:symbol, Structure:symbol)\nCan_build_on(\"rocky\", \"house\").\n.decl Answer()\nAnswer() :- Has_surface(\"asteroid\", surface_type), Can_build_on(surface_type, \"house\").\n.output Answer"]}
{"id": 875, "answer": true, "completion": ".decl Has_episodes(Series:symbol, Episodes:float)\nHas_episodes(\"EastEnders\", 6000).\n.decl Episode_duration(Duration:float)\nEpisode_duration(30).\n.decl Can_survive_without_water(Days:float)\nCan_survive_without_water(3).\n.decl Answer()\nAnswer() :- Has_episodes(\"EastEnders\", episodes), Episode_duration(duration), Can_survive_without_water(days), (episodes * duration) / 1440 <= days.\n.output Answer", "completions": [".decl Has_episodes(Series:symbol, Episodes:float)\nHas_episodes(\"EastEnders\", 6000).\n.decl Episode_duration(Duration:float)\nEpisode_duration(30).\n.decl Can_survive_without_water(Days:float)\nCan_survive_without_water(3).\n.decl Answer()\nAnswer() :- Has_episodes(\"EastEnders\", episodes), Episode_duration(duration), Can_survive_without_water(days), (episodes * duration) / 1440 <= days.\n.output Answer"]}
{"id": 876, "answer": true, "completion": ".decl Found_in(Object:symbol, Location:symbol)\nFound_in(\"cucumber\", \"garden\").\nFound_in(\"cucumber\", \"farm\").\nFound_in(\"cucumber\", \"grocery store\").\n.decl Is_desert(Location:symbol)\nIs_desert(\"desert\").\n.decl Answer()\nAnswer() :- Found_in(\"cucumber\", location), Is_desert(location).\n.output Answer", "completions": [".decl Found_in(Object:symbol, Location:symbol)\nFound_in(\"cucumber\", \"garden\").\nFound_in(\"cucumber\", \"farm\").\nFound_in(\"cucumber\", \"grocery store\").\n.decl Is_desert(Location:symbol)\nIs_desert(\"desert\").\n.decl Answer()\nAnswer() :- Found_in(\"cucumber\", location), Is_desert(location).\n.output Answer"]}
{"id": 877, "answer": true, "completion": ".decl Duration(Event:symbol, Duration_minutes:float)\nDuration(\"Borgia's World of Wonders\", 60).\nDuration(\"Ludacris's Release Therapy\", 77).\n.decl Answer()\nAnswer() :- Duration(\"Borgia's World of Wonders\", duration1), Duration(\"Ludacris's Release Therapy\", duration2), duration1 < duration2.\n.output Answer", "completions": [".decl Duration(Event:symbol, Duration_minutes:float)\nDuration(\"Borgia's World of Wonders\", 60).\nDuration(\"Ludacris's Release Therapy\", 77).\n.decl Answer()\nAnswer() :- Duration(\"Borgia's World of Wonders\", duration1), Duration(\"Ludacris's Release Therapy\", duration2), duration1 < duration2.\n.output Answer"]}
{"id": 878, "answer": true, "completion": ".decl Has_gluten(Food:symbol)\nHas_gluten(\"wheat\").\nHas_gluten(\"barley\").\nHas_gluten(\"rye\").\n.decl Made_from(Food:symbol, Ingredient:symbol)\nMade_from(\"potato vodka\", \"potato\").\n.decl Has_celiac_disease(Person:symbol)\nHas_celiac_disease(\"someone\").\n.decl Can_have(Person:symbol, Food:symbol)\nCan_have(person, food) :- Has_celiac_disease(person), Made_from(food, ingredient), !Has_gluten(ingredient).\n.decl Answer()\nAnswer() :- Can_have(\"someone\", \"potato vodka\").\n.output Answer", "completions": [".decl Has_gluten(Food:symbol)\nHas_gluten(\"wheat\").\nHas_gluten(\"barley\").\nHas_gluten(\"rye\").\n.decl Made_from(Food:symbol, Ingredient:symbol)\nMade_from(\"potato vodka\", \"potato\").\n.decl Has_celiac_disease(Person:symbol)\nHas_celiac_disease(\"someone\").\n.decl Can_have(Person:symbol, Food:symbol)\nCan_have(person, food) :- Has_celiac_disease(person), Made_from(food, ingredient), !Has_gluten(ingredient).\n.decl Answer()\nAnswer() :- Can_have(\"someone\", \"potato vodka\").\n.output Answer"]}
{"id": 879, "answer": true, "completion": ".decl Allows(Church:symbol, Practice:symbol)\nAllows(\"Catholic Church\", \"monogamy\").\n.decl Answer()\nAnswer() :- Allows(\"Catholic Church\", \"polyamory\").\nAnswer() :- !Allows(\"Catholic Church\", \"monogamy\").\n.output Answer", "completions": [".decl Allows(Church:symbol, Practice:symbol)\nAllows(\"Catholic Church\", \"monogamy\").\n.decl Answer()\nAnswer() :- Allows(\"Catholic Church\", \"polyamory\").\nAnswer() :- !Allows(\"Catholic Church\", \"monogamy\").\n.output Answer"]}
{"id": 880, "answer": true, "completion": ".decl Has_visibility(Disorder:symbol, Visibility:symbol)\nHas_visibility(\"depression\", \"hidden\").\nHas_visibility(\"anxiety\", \"hidden\").\nHas_visibility(\"schizophrenia\", \"visible\").\n.decl Answer()\nAnswer() :- Has_visibility(disorder, \"hidden\").\n.output Answer", "completions": [".decl Has_visibility(Disorder:symbol, Visibility:symbol)\nHas_visibility(\"depression\", \"hidden\").\nHas_visibility(\"anxiety\", \"hidden\").\nHas_visibility(\"schizophrenia\", \"visible\").\n.decl Answer()\nAnswer() :- Has_visibility(disorder, \"hidden\").\n.output Answer"]}
{"id": 881, "answer": false, "completion": ".decl Inspired_brands(Person:symbol, N_brands:float)\nInspired_brands(\"Nikola Tesla\", 2).\n.decl Answer()\nAnswer() :- Inspired_brands(\"Nikola Tesla\", n_brands), n_brands > 1.\n.output Answer", "completions": [".decl Inspired_brands(Person:symbol, N_brands:float)\nInspired_brands(\"Nikola Tesla\", 2).\n.decl Answer()\nAnswer() :- Inspired_brands(\"Nikola Tesla\", n_brands), n_brands > 1.\n.output Answer"]}
{"id": 882, "answer": true, "completion": ".decl Is_eligible(Person:symbol, Program:symbol)\nIs_eligible(\"senior citizen\", \"Medicare\").\n.decl Is_in_grade(Person:symbol, Grade:float)\nIs_in_grade(\"eleventh-grader\", 11).\n.decl Answer()\nAnswer() :- Is_eligible(\"eleventh-grader\", \"Medicare\").\nAnswer() :- Is_in_grade(\"eleventh-grader\", grade), !Is_eligible(\"senior citizen\", \"Medicare\").\n.output Answer", "completions": [".decl Is_eligible(Person:symbol, Program:symbol)\nIs_eligible(\"senior citizen\", \"Medicare\").\n.decl Is_in_grade(Person:symbol, Grade:float)\nIs_in_grade(\"eleventh-grader\", 11).\n.decl Answer()\nAnswer() :- Is_eligible(\"eleventh-grader\", \"Medicare\").\nAnswer() :- Is_in_grade(\"eleventh-grader\", grade), !Is_eligible(\"senior citizen\", \"Medicare\").\n.output Answer"]}
{"id": 883, "answer": true, "completion": ".decl Has_mood_disorder(Person:symbol)\nHas_mood_disorder(\"person1\").\n.decl Needs_institutionalization(Person:symbol)\nNeeds_institutionalization(\"person2\").\n.decl Answer()\nAnswer() :- Has_mood_disorder(person), !Needs_institutionalization(person).\n.output Answer", "completions": [".decl Has_mood_disorder(Person:symbol)\nHas_mood_disorder(\"person1\").\n.decl Needs_institutionalization(Person:symbol)\nNeeds_institutionalization(\"person2\").\n.decl Answer()\nAnswer() :- Has_mood_disorder(person), !Needs_institutionalization(person).\n.output Answer"]}
{"id": 884, "answer": true, "completion": ".decl Has_color(Flag:symbol, Color:symbol)\nHas_color(\"Gabon\", \"green\").\nHas_color(\"Gabon\", \"yellow\").\nHas_color(\"Gabon\", \"blue\").\n\n.decl Rainbow_color(Color:symbol)\nRainbow_color(\"red\").\nRainbow_color(\"orange\").\nRainbow_color(\"yellow\").\nRainbow_color(\"green\").\nRainbow_color(\"blue\").\nRainbow_color(\"indigo\").\nRainbow_color(\"violet\").\n\n.decl Answer()\nAnswer() :- Has_color(\"Gabon\", color), Rainbow_color(color).\n.output Answer", "completions": [".decl Has_color(Flag:symbol, Color:symbol)\nHas_color(\"Gabon\", \"green\").\nHas_color(\"Gabon\", \"yellow\").\nHas_color(\"Gabon\", \"blue\").\n\n.decl Rainbow_color(Color:symbol)\nRainbow_color(\"red\").\nRainbow_color(\"orange\").\nRainbow_color(\"yellow\").\nRainbow_color(\"green\").\nRainbow_color(\"blue\").\nRainbow_color(\"indigo\").\nRainbow_color(\"violet\").\n\n.decl Answer()\nAnswer() :- Has_color(\"Gabon\", color), Rainbow_color(color).\n.output Answer"]}
{"id": 885, "answer": true, "completion": ".decl Preventive_healthcare_visit(Visit:symbol)\nPreventive_healthcare_visit(\"preventive healthcare\").\n.decl Sickness_visit(Visit:symbol)\nSickness_visit(\"sickness\").\n.decl Answer()\nAnswer() :- Preventive_healthcare_visit(visit1), Sickness_visit(visit2), visit1 != visit2.\n.output Answer", "completions": [".decl Preventive_healthcare_visit(Visit:symbol)\nPreventive_healthcare_visit(\"preventive healthcare\").\n.decl Sickness_visit(Visit:symbol)\nSickness_visit(\"sickness\").\n.decl Answer()\nAnswer() :- Preventive_healthcare_visit(visit1), Sickness_visit(visit2), visit1 != visit2.\n.output Answer"]}
{"id": 886, "answer": true, "completion": ".decl Has_fat_content(Food:symbol, Fat_content:float)\nHas_fat_content(\"McDonald's hamburger\", 9).\n.decl USDA_recommended_fat_allowance(Fat_allowance:float)\nUSDA_recommended_fat_allowance(65).\n.decl Answer()\nAnswer() :- Has_fat_content(\"McDonald's hamburger\", fat_content), USDA_recommended_fat_allowance(fat_allowance), 7 * fat_content > fat_allowance.\n.output Answer", "completions": [".decl Has_fat_content(Food:symbol, Fat_content:float)\nHas_fat_content(\"McDonald's hamburger\", 9).\n.decl USDA_recommended_fat_allowance(Fat_allowance:float)\nUSDA_recommended_fat_allowance(65).\n.decl Answer()\nAnswer() :- Has_fat_content(\"McDonald's hamburger\", fat_content), USDA_recommended_fat_allowance(fat_allowance), 7 * fat_content > fat_allowance.\n.output Answer"]}
{"id": 887, "answer": true, "completion": ".decl Born(Person:symbol, Year:float)\nBorn(\"Edward II of England\", 1284).\n.decl Existed(Group:symbol, Start_year:float, End_year:float)\nExisted(\"Vikings\", 793, 1066).\n.decl Answer()\nAnswer() :- Born(\"Edward II of England\", birth_year), Existed(\"Vikings\", start_year, end_year), birth_year > end_year.\n.output Answer", "completions": [".decl Born(Person:symbol, Year:float)\nBorn(\"Edward II of England\", 1284).\n.decl Existed(Group:symbol, Start_year:float, End_year:float)\nExisted(\"Vikings\", 793, 1066).\n.decl Answer()\nAnswer() :- Born(\"Edward II of England\", birth_year), Existed(\"Vikings\", start_year, end_year), birth_year > end_year.\n.output Answer"]}
{"id": 888, "answer": true, "completion": ".decl Affected_by_magnetic_field(Object:symbol)\nAffected_by_magnetic_field(\"implants from ORIF surgery\").\n.decl Has_magnetic_field(Object:symbol)\nHas_magnetic_field(\"Earth\").\n.decl Answer()\nAnswer() :- Affected_by_magnetic_field(\"implants from ORIF surgery\"), Has_magnetic_field(\"Earth\").\n.output Answer", "completions": [".decl Affected_by_magnetic_field(Object:symbol)\nAffected_by_magnetic_field(\"implants from ORIF surgery\").\n.decl Has_magnetic_field(Object:symbol)\nHas_magnetic_field(\"Earth\").\n.decl Answer()\nAnswer() :- Affected_by_magnetic_field(\"implants from ORIF surgery\"), Has_magnetic_field(\"Earth\").\n.output Answer"]}
{"id": 889, "answer": true, "completion": ".decl Has_population(Object:symbol, Population:float)\nHas_population(\"Earth\", 7.9e9).\n.decl Has_n_stars(Galaxy:symbol, N_stars:float)\nHas_n_stars(\"Milky Way\", 2.5e11).\n.decl Answer()\nAnswer() :- Has_population(\"Earth\", earth_population), Has_n_stars(\"Milky Way\", milky_way_stars), milky_way_stars >= 10 * earth_population.\n.output Answer", "completions": [".decl Has_population(Object:symbol, Population:float)\nHas_population(\"Earth\", 7.9e9).\n.decl Has_n_stars(Galaxy:symbol, N_stars:float)\nHas_n_stars(\"Milky Way\", 2.5e11).\n.decl Answer()\nAnswer() :- Has_population(\"Earth\", earth_population), Has_n_stars(\"Milky Way\", milky_way_stars), milky_way_stars >= 10 * earth_population.\n.output Answer"]}
{"id": 890, "answer": true, "completion": ".decl Is_bone(Bone:symbol)\nIs_bone(\"tibia\").\n.decl Is_herb(Herb:symbol)\nIs_herb(\"parsley\").\n.decl On_holiday_plate(Item:symbol)\nOn_holiday_plate(\"parsley\").\n.decl Answer()\nAnswer() :- Is_bone(bone), Is_herb(herb), On_holiday_plate(bone), On_holiday_plate(herb).\n.output Answer", "completions": [".decl Is_bone(Bone:symbol)\nIs_bone(\"tibia\").\n.decl Is_herb(Herb:symbol)\nIs_herb(\"parsley\").\n.decl On_holiday_plate(Item:symbol)\nOn_holiday_plate(\"parsley\").\n.decl Answer()\nAnswer() :- Is_bone(bone), Is_herb(herb), On_holiday_plate(bone), On_holiday_plate(herb).\n.output Answer"]}
{"id": 891, "answer": false, "completion": ".decl Has_population(Location:symbol, Population:float)\nHas_population(\"Ashland, Oregon\", 21278).\n.decl Has_min_population(Organization:symbol, Min_population:float)\nHas_min_population(\"hypothetical military division\", 10000).\n.decl Answer()\nAnswer() :- Has_population(\"Ashland, Oregon\", population), Has_min_population(\"hypothetical military division\", min_population), population >= min_population.\n.output Answer", "completions": [".decl Has_population(Location:symbol, Population:float)\nHas_population(\"Ashland, Oregon\", 21278).\n.decl Has_min_population(Organization:symbol, Min_population:float)\nHas_min_population(\"hypothetical military division\", 10000).\n.decl Answer()\nAnswer() :- Has_population(\"Ashland, Oregon\", population), Has_min_population(\"hypothetical military division\", min_population), population >= min_population.\n.output Answer"]}
{"id": 892, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"producer of Easy Rider\", 1936).\n.decl Is_octogenarian_in_year(Person:symbol, Year:float)\nIs_octogenarian_in_year(person, year) :- Born_in_year(person, birth_year), year - birth_year >= 80, year - birth_year < 90.\n.decl Answer()\nAnswer() :- Is_octogenarian_in_year(\"producer of Easy Rider\", 2021).\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"producer of Easy Rider\", 1936).\n.decl Is_octogenarian_in_year(Person:symbol, Year:float)\nIs_octogenarian_in_year(person, year) :- Born_in_year(person, birth_year), year - birth_year >= 80, year - birth_year < 90.\n.decl Answer()\nAnswer() :- Is_octogenarian_in_year(\"producer of Easy Rider\", 2021).\n.output Answer"]}
{"id": 893, "answer": true, "completion": ".decl Is_aggressive(Animal:symbol)\nIs_aggressive(\"bumblebee\").\n\n.decl Is_suicidal(Animal:symbol)\nIs_suicidal(\"honeybee\").\n\n.decl Answer()\nAnswer() :- Is_aggressive(\"bumblebee\"), Is_suicidal(\"bumblebee\").\n.output Answer", "completions": [".decl Is_aggressive(Animal:symbol)\nIs_aggressive(\"bumblebee\").\n\n.decl Is_suicidal(Animal:symbol)\nIs_suicidal(\"honeybee\").\n\n.decl Answer()\nAnswer() :- Is_aggressive(\"bumblebee\"), Is_suicidal(\"bumblebee\").\n.output Answer"]}
{"id": 894, "answer": true, "completion": ".decl Is_slippery(Material:symbol)\nIs_slippery(\"water\").\nIs_slippery(\"soap\").\n.decl Is_material_of(Object:symbol, Material:symbol)\nIs_material_of(\"Slip N Slide\", \"water\").\nIs_material_of(\"Slip N Slide\", \"soap\").\n.decl Is_element(Element:symbol)\nIs_element(\"Mercury\").\n.decl Answer()\nAnswer() :- Is_slippery(material), Is_material_of(\"Slip N Slide\", material), Is_element(\"Mercury\"), material = \"Mercury\".\n.output Answer", "completions": [".decl Is_slippery(Material:symbol)\nIs_slippery(\"water\").\nIs_slippery(\"soap\").\n.decl Is_material_of(Object:symbol, Material:symbol)\nIs_material_of(\"Slip N Slide\", \"water\").\nIs_material_of(\"Slip N Slide\", \"soap\").\n.decl Is_element(Element:symbol)\nIs_element(\"Mercury\").\n.decl Answer()\nAnswer() :- Is_slippery(material), Is_material_of(\"Slip N Slide\", material), Is_element(\"Mercury\"), material = \"Mercury\".\n.output Answer"]}
{"id": 895, "answer": true, "completion": ".decl Has_record(Record_holder:symbol, Record:float)\nHas_record(\"Javier Sotomayor\", 2.45).\n.decl Has_ability(Animal:symbol, Ability:float)\nHas_ability(\"Bengal cat\", 1.8).\n.decl Answer()\nAnswer() :- Has_ability(\"Bengal cat\", ability), Has_record(\"Javier Sotomayor\", record), ability > record.\n.output Answer", "completions": [".decl Has_record(Record_holder:symbol, Record:float)\nHas_record(\"Javier Sotomayor\", 2.45).\n.decl Has_ability(Animal:symbol, Ability:float)\nHas_ability(\"Bengal cat\", 1.8).\n.decl Answer()\nAnswer() :- Has_ability(\"Bengal cat\", ability), Has_record(\"Javier Sotomayor\", record), ability > record.\n.output Answer"]}
{"id": 896, "answer": true, "completion": ".decl Made_with_rice_type(Pudding:symbol, Rice_type:symbol)\nMade_with_rice_type(\"store bought rice pudding\", \"white rice\").\n.decl Answer()\nAnswer() :- Made_with_rice_type(\"store bought rice pudding\", \"brown rice\").\n.output Answer", "completions": [".decl Made_with_rice_type(Pudding:symbol, Rice_type:symbol)\nMade_with_rice_type(\"store bought rice pudding\", \"white rice\").\n.decl Answer()\nAnswer() :- Made_with_rice_type(\"store bought rice pudding\", \"brown rice\").\n.output Answer"]}
{"id": 897, "answer": true, "completion": ".decl Causes(Condition:symbol, Effect:symbol)\nCauses(\"cancer\", \"excess adrenaline production\").\n.decl Answer()\nAnswer() :- Causes(\"cancer\", \"excess adrenaline production\").\n.output Answer", "completions": [".decl Causes(Condition:symbol, Effect:symbol)\nCauses(\"cancer\", \"excess adrenaline production\").\n.decl Answer()\nAnswer() :- Causes(\"cancer\", \"excess adrenaline production\").\n.output Answer"]}
{"id": 898, "answer": true, "completion": ".decl Has_n_states(Region:symbol, N_states:float)\nHas_n_states(\"Ancient Greece\", 20).\nHas_n_states(\"US in 1900\", 45).\n.decl Answer()\nAnswer() :- Has_n_states(\"Ancient Greece\", n_states1), Has_n_states(\"US in 1900\", n_states2), n_states1 < n_states2.\n.output Answer", "completions": [".decl Has_n_states(Region:symbol, N_states:float)\nHas_n_states(\"Ancient Greece\", 20).\nHas_n_states(\"US in 1900\", 45).\n.decl Answer()\nAnswer() :- Has_n_states(\"Ancient Greece\", n_states1), Has_n_states(\"US in 1900\", n_states2), n_states1 < n_states2.\n.output Answer"]}
{"id": 899, "answer": true, "completion": ".decl Founders(Company:symbol, Person:symbol)\nFounders(\"Ben & Jerry's\", \"Ben Cohen\").\nFounders(\"Ben & Jerry's\", \"Jerry Greenfield\").\n.decl Involved_in_company(Person:symbol, Company:symbol, Status:float)\nInvolved_in_company(\"Ben Cohen\", \"Ben & Jerry's\", 0).\nInvolved_in_company(\"Jerry Greenfield\", \"Ben & Jerry's\", 0).\n.decl Answer()\nAnswer() :- Founders(\"Ben & Jerry's\", person), Involved_in_company(person, \"Ben & Jerry's\", status), status = 1.\n.output Answer", "completions": [".decl Founders(Company:symbol, Person:symbol)\nFounders(\"Ben & Jerry's\", \"Ben Cohen\").\nFounders(\"Ben & Jerry's\", \"Jerry Greenfield\").\n.decl Involved_in_company(Person:symbol, Company:symbol, Status:float)\nInvolved_in_company(\"Ben Cohen\", \"Ben & Jerry's\", 0).\nInvolved_in_company(\"Jerry Greenfield\", \"Ben & Jerry's\", 0).\n.decl Answer()\nAnswer() :- Founders(\"Ben & Jerry's\", person), Involved_in_company(person, \"Ben & Jerry's\", status), status = 1.\n.output Answer"]}
{"id": 900, "answer": true, "completion": ".decl Job_responsibility(Role:symbol, Task:symbol)\nJob_responsibility(\"United States Secretary of State\", \"foreign policy\").\nJob_responsibility(\"White House receptionist\", \"answer phones\").\n.decl Answer()\nAnswer() :- Job_responsibility(\"United States Secretary of State\", \"answer phones\").\n.output Answer", "completions": [".decl Job_responsibility(Role:symbol, Task:symbol)\nJob_responsibility(\"United States Secretary of State\", \"foreign policy\").\nJob_responsibility(\"White House receptionist\", \"answer phones\").\n.decl Answer()\nAnswer() :- Job_responsibility(\"United States Secretary of State\", \"answer phones\").\n.output Answer"]}
{"id": 901, "answer": true, "completion": ".decl Developed(Person:symbol, Product:symbol)\nDeveloped(\"Mark Cerny\", \"PlayStation 4\").\n.decl Is_founder(Person:symbol, Company:symbol)\nIs_founder(\"Bill Gates\", \"Microsoft\").\n.decl Is_product(Product:symbol, Company:symbol)\nIs_product(\"PlayStation 4\", \"Sony\").\n.decl Answer()\nAnswer() :- Developed(\"Bill Gates\", \"PlayStation 4\").\nAnswer() :- Is_founder(\"Bill Gates\", company), Is_product(\"PlayStation 4\", company).\n.output Answer", "completions": [".decl Developed(Person:symbol, Product:symbol)\nDeveloped(\"Mark Cerny\", \"PlayStation 4\").\n.decl Is_founder(Person:symbol, Company:symbol)\nIs_founder(\"Bill Gates\", \"Microsoft\").\n.decl Is_product(Product:symbol, Company:symbol)\nIs_product(\"PlayStation 4\", \"Sony\").\n.decl Answer()\nAnswer() :- Developed(\"Bill Gates\", \"PlayStation 4\").\nAnswer() :- Is_founder(\"Bill Gates\", company), Is_product(\"PlayStation 4\", company).\n.output Answer"]}
{"id": 902, "answer": true, "completion": ".decl Published_in_time(Magazine:symbol, Time:symbol)\nPublished_in_time(\"The Atlantic\", \"1976-present\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Games of the XXII Olympiad\", \"1980\").\n.decl In_time_range(Year:symbol, Time_range:symbol)\nIn_time_range(\"1980\", \"1976-present\").\n.decl Answer()\nAnswer() :- Published_in_time(\"The Atlantic\", time_range), Happens_in_time(\"Games of the XXII Olympiad\", year), In_time_range(year, time_range).\n.output Answer", "completions": [".decl Published_in_time(Magazine:symbol, Time:symbol)\nPublished_in_time(\"The Atlantic\", \"1976-present\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Games of the XXII Olympiad\", \"1980\").\n.decl In_time_range(Year:symbol, Time_range:symbol)\nIn_time_range(\"1980\", \"1976-present\").\n.decl Answer()\nAnswer() :- Published_in_time(\"The Atlantic\", time_range), Happens_in_time(\"Games of the XXII Olympiad\", year), In_time_range(year, time_range).\n.output Answer"]}
{"id": 903, "answer": true, "completion": ".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"James Watson\", 1928).\nHas_birth_year(\"Francis Crick\", 1916).\n.decl Has_death_year(Person:symbol, Death_year:float)\nHas_death_year(\"Francis Crick\", 2004).\n.decl Is_alive(Person:symbol)\nIs_alive(\"James Watson\").\n.decl Answer()\nAnswer() :- Has_death_year(\"Francis Crick\", death_year), Is_alive(\"James Watson\").\n.output Answer", "completions": [".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"James Watson\", 1928).\nHas_birth_year(\"Francis Crick\", 1916).\n.decl Has_death_year(Person:symbol, Death_year:float)\nHas_death_year(\"Francis Crick\", 2004).\n.decl Is_alive(Person:symbol)\nIs_alive(\"James Watson\").\n.decl Answer()\nAnswer() :- Has_death_year(\"Francis Crick\", death_year), Is_alive(\"James Watson\").\n.output Answer"]}
{"id": 904, "answer": true, "completion": ".decl Is_main_character(Character:symbol, Work:symbol)\nIs_main_character(\"Alice\", \"Alice's Adventures in Wonderland\").\n.decl Has_age(Character:symbol, Age:float)\nHas_age(\"Alice\", 7).\n.decl Has_gender(Character:symbol, Gender:symbol)\nHas_gender(\"Alice\", \"female\").\n.decl Masonic_lodge_requirements(Age:float, Gender:symbol)\nMasonic_lodge_requirements(18, \"male\").\n.decl Answer()\nAnswer() :- Is_main_character(character, \"Alice's Adventures in Wonderland\"), Has_age(character, age), Has_gender(character, gender), Masonic_lodge_requirements(min_age, req_gender), age >= min_age, gender = req_gender.\n.output Answer", "completions": [".decl Is_main_character(Character:symbol, Work:symbol)\nIs_main_character(\"Alice\", \"Alice's Adventures in Wonderland\").\n.decl Has_age(Character:symbol, Age:float)\nHas_age(\"Alice\", 7).\n.decl Has_gender(Character:symbol, Gender:symbol)\nHas_gender(\"Alice\", \"female\").\n.decl Masonic_lodge_requirements(Age:float, Gender:symbol)\nMasonic_lodge_requirements(18, \"male\").\n.decl Answer()\nAnswer() :- Is_main_character(character, \"Alice's Adventures in Wonderland\"), Has_age(character, age), Has_gender(character, gender), Masonic_lodge_requirements(min_age, req_gender), age >= min_age, gender = req_gender.\n.output Answer"]}
{"id": 905, "answer": false, "completion": ".decl Is_linked(Object_A:symbol, Object_B:symbol)\nIs_linked(\"asteroid\", \"space\").\nIs_linked(\"space\", \"astronomy\").\nIs_linked(\"astronomy\", \"astrology\").\nIs_linked(\"astrology\", \"zodiac signs\").\nIs_linked(\"zodiac signs\", \"virgo\").\nIs_linked(\"virgo\", \"virginity\").\n.decl Answer()\nAnswer() :- Is_linked(\"asteroid\", object2), Is_linked(object2, object3), Is_linked(object3, object4), Is_linked(object4, object5), Is_linked(object5, object6), Is_linked(object6, \"virginity\").\n.output Answer", "completions": [".decl Is_linked(Object_A:symbol, Object_B:symbol)\nIs_linked(\"asteroid\", \"space\").\nIs_linked(\"space\", \"astronomy\").\nIs_linked(\"astronomy\", \"astrology\").\nIs_linked(\"astrology\", \"zodiac signs\").\nIs_linked(\"zodiac signs\", \"virgo\").\nIs_linked(\"virgo\", \"virginity\").\n.decl Answer()\nAnswer() :- Is_linked(\"asteroid\", object2), Is_linked(object2, object3), Is_linked(object3, object4), Is_linked(object4, object5), Is_linked(object5, object6), Is_linked(object6, \"virginity\").\n.output Answer"]}
{"id": 906, "answer": false, "completion": ".decl Starred_in_movie(Actor:symbol, Movie:symbol)\nStarred_in_movie(\"Dennis Hopper\", \"Easy Rider\").\nStarred_in_movie(\"Dennis Hopper\", \"Superman\").\nStarred_in_movie(\"Brooke Shields\", \"Superman\").\nStarred_in_movie(\"Dean Cain\", \"Superman\").\n.decl Dated(Person1:symbol, Person2:symbol)\nDated(\"Dean Cain\", \"Brooke Shields\").\n.decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Brooke Shields\", \"Princeton University\").\n.decl Answer()\nAnswer() :- Starred_in_movie(\"Dennis Hopper\", movie), Starred_in_movie(\"Brooke Shields\", movie), Dated(\"Dean Cain\", \"Brooke Shields\"), Graduates(\"Brooke Shields\", \"Princeton University\").\n.output Answer", "completions": [".decl Starred_in_movie(Actor:symbol, Movie:symbol)\nStarred_in_movie(\"Dennis Hopper\", \"Easy Rider\").\nStarred_in_movie(\"Dennis Hopper\", \"Superman\").\nStarred_in_movie(\"Brooke Shields\", \"Superman\").\nStarred_in_movie(\"Dean Cain\", \"Superman\").\n.decl Dated(Person1:symbol, Person2:symbol)\nDated(\"Dean Cain\", \"Brooke Shields\").\n.decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Brooke Shields\", \"Princeton University\").\n.decl Answer()\nAnswer() :- Starred_in_movie(\"Dennis Hopper\", movie), Starred_in_movie(\"Brooke Shields\", movie), Dated(\"Dean Cain\", \"Brooke Shields\"), Graduates(\"Brooke Shields\", \"Princeton University\").\n.output Answer"]}
{"id": 907, "answer": false, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Melania Trump\", \"model\").\nHas_profession(\"Olga Kurylenko\", \"model\").\n.decl Answer()\nAnswer() :- Has_profession(\"Melania Trump\", profession1), Has_profession(\"Olga Kurylenko\", profession2), profession1 = profession2.\n.output Answer", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Melania Trump\", \"model\").\nHas_profession(\"Olga Kurylenko\", \"model\").\n.decl Answer()\nAnswer() :- Has_profession(\"Melania Trump\", profession1), Has_profession(\"Olga Kurylenko\", profession2), profession1 = profession2.\n.output Answer"]}
{"id": 908, "answer": false, "completion": ".decl Needs(Object:symbol, Requirement:symbol)\nNeeds(\"circuit board\", \"electronic components\").\nNeeds(\"circuit board\", \"soldering\").\nNeeds(\"circuit board\", \"engineer\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"farmer\", \"agriculture\").\n.decl Answer()\nAnswer() :- Needs(\"circuit board\", requirement), Is_a(\"farmer\", requirement).\n.output Answer", "completions": [".decl Needs(Object:symbol, Requirement:symbol)\nNeeds(\"circuit board\", \"electronic components\").\nNeeds(\"circuit board\", \"soldering\").\nNeeds(\"circuit board\", \"engineer\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"farmer\", \"agriculture\").\n.decl Answer()\nAnswer() :- Needs(\"circuit board\", requirement), Is_a(\"farmer\", requirement).\n.output Answer"]}
{"id": 909, "answer": true, "completion": ".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"jumping spider\", 8).\n.decl Needs_contact_lenses(Animal:symbol, N_lenses:float)\nNeeds_contact_lenses(animal, n_lenses) :- Has_legs(animal, n_legs), n_lenses = n_legs / 2.\n.decl Answer()\nAnswer() :- Needs_contact_lenses(\"jumping spider\", n_lenses), n_lenses > 6.\n.output Answer", "completions": [".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"jumping spider\", 8).\n.decl Needs_contact_lenses(Animal:symbol, N_lenses:float)\nNeeds_contact_lenses(animal, n_lenses) :- Has_legs(animal, n_legs), n_lenses = n_legs / 2.\n.decl Answer()\nAnswer() :- Needs_contact_lenses(\"jumping spider\", n_lenses), n_lenses > 6.\n.output Answer"]}
{"id": 910, "answer": false, "completion": ".decl Made_with_currency(Purchase:symbol, Currency:symbol)\nMade_with_currency(\"Louisiana Purchase\", \"USD\").\n.decl Answer()\nAnswer() :- Made_with_currency(\"Louisiana Purchase\", \"bitcoin\").\n.output Answer", "completions": [".decl Made_with_currency(Purchase:symbol, Currency:symbol)\nMade_with_currency(\"Louisiana Purchase\", \"USD\").\n.decl Answer()\nAnswer() :- Made_with_currency(\"Louisiana Purchase\", \"bitcoin\").\n.output Answer"]}
{"id": 911, "answer": true, "completion": ".decl Has_length(Book:symbol, Length:float)\nHas_length(\"The Hobbit\", 300).\n.decl Reading_speed(Speed:float)\nReading_speed(200).\n.decl Time_limit(Minutes:float)\nTime_limit(4).\n.decl Answer()\nAnswer() :- Has_length(\"The Hobbit\", length), Reading_speed(speed), Time_limit(minutes), (length / speed) <= (minutes / 60).\n.output Answer", "completions": [".decl Has_length(Book:symbol, Length:float)\nHas_length(\"The Hobbit\", 300).\n.decl Reading_speed(Speed:float)\nReading_speed(200).\n.decl Time_limit(Minutes:float)\nTime_limit(4).\n.decl Answer()\nAnswer() :- Has_length(\"The Hobbit\", length), Reading_speed(speed), Time_limit(minutes), (length / speed) <= (minutes / 60).\n.output Answer"]}
{"id": 912, "answer": true, "completion": ".decl Has_cost(Object:symbol, Cost:float)\nHas_cost(\"Boeing 737\", 100000000).\n.decl Has_box_office_receipts(Film:symbol, Receipts:float)\nHas_box_office_receipts(\"Wonder Woman (2017)\", 821847012).\n.decl Answer()\nAnswer() :- Has_cost(\"Boeing 737\", cost), Has_box_office_receipts(\"Wonder Woman (2017)\", receipts), receipts >= cost.\n.output Answer", "completions": [".decl Has_cost(Object:symbol, Cost:float)\nHas_cost(\"Boeing 737\", 100000000).\n.decl Has_box_office_receipts(Film:symbol, Receipts:float)\nHas_box_office_receipts(\"Wonder Woman (2017)\", 821847012).\n.decl Answer()\nAnswer() :- Has_cost(\"Boeing 737\", cost), Has_box_office_receipts(\"Wonder Woman (2017)\", receipts), receipts >= cost.\n.output Answer"]}
{"id": 913, "answer": false, "completion": ".decl Involved_in_death(Paparazzi:symbol, Person:symbol)\nInvolved_in_death(\"paparazzi\", \"Princess Diana\").\n.decl Is_member_of_royal_family(Person:symbol)\nIs_member_of_royal_family(\"Princess Diana\").\n.decl Answer()\nAnswer() :- Involved_in_death(\"paparazzi\", person), Is_member_of_royal_family(person).\n.output Answer", "completions": [".decl Involved_in_death(Paparazzi:symbol, Person:symbol)\nInvolved_in_death(\"paparazzi\", \"Princess Diana\").\n.decl Is_member_of_royal_family(Person:symbol)\nIs_member_of_royal_family(\"Princess Diana\").\n.decl Answer()\nAnswer() :- Involved_in_death(\"paparazzi\", person), Is_member_of_royal_family(person).\n.output Answer"]}
{"id": 914, "answer": true, "completion": ".decl Born_in(Person:symbol, City:symbol)\nBorn_in(\"John Gall\", \"San Francisco\").\n.decl Located_in(University:symbol, City:symbol)\nLocated_in(\"Stanford University\", \"Stanford\").\n.decl Answer()\nAnswer() :- Born_in(\"John Gall\", city), Located_in(\"Stanford University\", city).\n.output Answer", "completions": [".decl Born_in(Person:symbol, City:symbol)\nBorn_in(\"John Gall\", \"San Francisco\").\n.decl Located_in(University:symbol, City:symbol)\nLocated_in(\"Stanford University\", \"Stanford\").\n.decl Answer()\nAnswer() :- Born_in(\"John Gall\", city), Located_in(\"Stanford University\", city).\n.output Answer"]}
{"id": 915, "answer": true, "completion": ".decl Slaughtered_in_month(Food:symbol, Month:symbol)\nSlaughtered_in_month(\"parma ham\", \"December\").\n.decl Ready_in_months(Food:symbol, N_months:float)\nReady_in_months(\"parma ham\", 12).\n.decl New_Year_Month(Month:symbol)\nNew_Year_Month(\"January\").\n.decl Answer()\nAnswer() :- Slaughtered_in_month(\"parma ham\", slaughter_month), Ready_in_months(\"parma ham\", n_months), New_Year_Month(new_year_month), n_months <= 1.\n.output Answer", "completions": [".decl Slaughtered_in_month(Food:symbol, Month:symbol)\nSlaughtered_in_month(\"parma ham\", \"December\").\n.decl Ready_in_months(Food:symbol, N_months:float)\nReady_in_months(\"parma ham\", 12).\n.decl New_Year_Month(Month:symbol)\nNew_Year_Month(\"January\").\n.decl Answer()\nAnswer() :- Slaughtered_in_month(\"parma ham\", slaughter_month), Ready_in_months(\"parma ham\", n_months), New_Year_Month(new_year_month), n_months <= 1.\n.output Answer"]}
{"id": 916, "answer": true, "completion": ".decl Believes(Practitioner:symbol, Substance:symbol, Healthy:float)\nBelieves(\"Shivambu practitioners\", \"ammonia\", 0).\n.decl Is_unhealthy(Practitioner:symbol, Substance:symbol)\nIs_unhealthy(practitioner, substance) :- Believes(practitioner, substance, healthy), healthy = 0.\n.decl Answer()\nAnswer() :- Is_unhealthy(\"Shivambu practitioners\", \"ammonia\").\n.output Answer", "completions": [".decl Believes(Practitioner:symbol, Substance:symbol, Healthy:float)\nBelieves(\"Shivambu practitioners\", \"ammonia\", 0).\n.decl Is_unhealthy(Practitioner:symbol, Substance:symbol)\nIs_unhealthy(practitioner, substance) :- Believes(practitioner, substance, healthy), healthy = 0.\n.decl Answer()\nAnswer() :- Is_unhealthy(\"Shivambu practitioners\", \"ammonia\").\n.output Answer"]}
{"id": 917, "answer": true, "completion": ".decl Is_starving(Agent:symbol)\nIs_starving(\"Hamas agent\").\n\n.decl Eats(Agent:symbol, Food:symbol)\nEats(\"Hamas agent\", \"pig\").\n\n.decl Is_bad(Agent:symbol, Action:symbol)\nIs_bad(\"Hamas agent\", \"eating pig\").\n\n.decl Answer()\nAnswer() :- Is_starving(\"Hamas agent\"), Eats(\"Hamas agent\", \"pig\"), Is_bad(\"Hamas agent\", \"eating pig\").\n.output Answer", "completions": [".decl Is_starving(Agent:symbol)\nIs_starving(\"Hamas agent\").\n\n.decl Eats(Agent:symbol, Food:symbol)\nEats(\"Hamas agent\", \"pig\").\n\n.decl Is_bad(Agent:symbol, Action:symbol)\nIs_bad(\"Hamas agent\", \"eating pig\").\n\n.decl Answer()\nAnswer() :- Is_starving(\"Hamas agent\"), Eats(\"Hamas agent\", \"pig\"), Is_bad(\"Hamas agent\", \"eating pig\").\n.output Answer"]}
{"id": 918, "answer": true, "completion": ".decl Played_Venue(Artist:symbol, Venue:symbol)\nPlayed_Venue(\"The Israelis\", \"Hammerstein Ballroom\").\n.decl Answer()\nAnswer() :- Played_Venue(\"The Israelis\", \"Hammerstein Ballroom\").\n.output Answer", "completions": [".decl Played_Venue(Artist:symbol, Venue:symbol)\nPlayed_Venue(\"The Israelis\", \"Hammerstein Ballroom\").\n.decl Answer()\nAnswer() :- Played_Venue(\"The Israelis\", \"Hammerstein Ballroom\").\n.output Answer"]}
{"id": 919, "answer": true, "completion": ".decl Played_role(Person:symbol, Event:symbol, Role:symbol)\nPlayed_role(\"Elle Fanning\", \"ending apartheid\", \"no\").\n.decl Answer()\nAnswer() :- Played_role(\"Elle Fanning\", \"ending apartheid\", \"essential\").\n.output Answer", "completions": [".decl Played_role(Person:symbol, Event:symbol, Role:symbol)\nPlayed_role(\"Elle Fanning\", \"ending apartheid\", \"no\").\n.decl Answer()\nAnswer() :- Played_role(\"Elle Fanning\", \"ending apartheid\", \"essential\").\n.output Answer"]}
{"id": 920, "answer": true, "completion": ".decl Attends(Person:symbol, Academy:symbol)\nAttends(\"Powerpuff Girls\", \"Camden Military Academy\").\n.decl Is_for_gender(Academy:symbol, Gender:symbol)\nIs_for_gender(\"Camden Military Academy\", \"male\").\n.decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Powerpuff Girls\", \"female\").\n.decl Answer()\nAnswer() :- Attends(\"Powerpuff Girls\", \"Camden Military Academy\"), !Is_for_gender(\"Camden Military Academy\", \"female\").\n.output Answer", "completions": [".decl Attends(Person:symbol, Academy:symbol)\nAttends(\"Powerpuff Girls\", \"Camden Military Academy\").\n.decl Is_for_gender(Academy:symbol, Gender:symbol)\nIs_for_gender(\"Camden Military Academy\", \"male\").\n.decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Powerpuff Girls\", \"female\").\n.decl Answer()\nAnswer() :- Attends(\"Powerpuff Girls\", \"Camden Military Academy\"), !Is_for_gender(\"Camden Military Academy\", \"female\").\n.output Answer"]}
{"id": 921, "answer": true, "completion": ".decl Rides(Person:symbol, Animal:symbol)\nRides(\"Chuck Norris\", \"horse\").\n.decl Answer()\nAnswer() :- Rides(\"Chuck Norris\", \"horse\").\n.output Answer", "completions": [".decl Rides(Person:symbol, Animal:symbol)\nRides(\"Chuck Norris\", \"horse\").\n.decl Answer()\nAnswer() :- Rides(\"Chuck Norris\", \"horse\").\n.output Answer"]}
{"id": 922, "answer": false, "completion": ".decl Event_uses_object(Event:symbol, Object:symbol)\nEvent_uses_object(\"relay race\", \"relay baton\").\n.decl Event(Event:symbol)\nEvent(\"Space Race\").\n.decl Answer()\nAnswer() :- Event_uses_object(\"Space Race\", \"relay baton\").\n.output Answer", "completions": [".decl Event_uses_object(Event:symbol, Object:symbol)\nEvent_uses_object(\"relay race\", \"relay baton\").\n.decl Event(Event:symbol)\nEvent(\"Space Race\").\n.decl Answer()\nAnswer() :- Event_uses_object(\"Space Race\", \"relay baton\").\n.output Answer"]}
{"id": 923, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Harvey Milk\", 1930).\nBorn_in_year(\"Barack Obama\", 1961).\n.decl Elected_in_year(Person:symbol, Election_year:float)\nElected_in_year(\"Harvey Milk\", 1977).\nElected_in_year(\"Barack Obama\", 2008).\n.decl Answer()\nAnswer() :- Born_in_year(\"Harvey Milk\", birth_year1), Elected_in_year(\"Barack Obama\", election_year2), birth_year1 < election_year2, Elected_in_year(\"Harvey Milk\", election_year1), election_year1 < election_year2.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Harvey Milk\", 1930).\nBorn_in_year(\"Barack Obama\", 1961).\n.decl Elected_in_year(Person:symbol, Election_year:float)\nElected_in_year(\"Harvey Milk\", 1977).\nElected_in_year(\"Barack Obama\", 2008).\n.decl Answer()\nAnswer() :- Born_in_year(\"Harvey Milk\", birth_year1), Elected_in_year(\"Barack Obama\", election_year2), birth_year1 < election_year2, Elected_in_year(\"Harvey Milk\", election_year1), election_year1 < election_year2.\n.output Answer"]}
{"id": 924, "answer": true, "completion": ".decl Requires_glasses(Action:symbol, Object:symbol, Requirement:float)\nRequires_glasses(\"read\", \"QR code\", 0).\n.decl Answer()\nAnswer() :- Requires_glasses(\"read\", \"QR code\", requirement), requirement > 0.\n.output Answer", "completions": [".decl Requires_glasses(Action:symbol, Object:symbol, Requirement:float)\nRequires_glasses(\"read\", \"QR code\", 0).\n.decl Answer()\nAnswer() :- Requires_glasses(\"read\", \"QR code\", requirement), requirement > 0.\n.output Answer"]}
{"id": 925, "answer": true, "completion": ".decl Lived_in_state(Person:symbol, State:symbol)\nLived_in_state(\"Rumi\", \"euphoria\").\n.decl Answer()\nAnswer() :- Lived_in_state(\"Rumi\", \"euphoria\").\n.output Answer", "completions": [".decl Lived_in_state(Person:symbol, State:symbol)\nLived_in_state(\"Rumi\", \"euphoria\").\n.decl Answer()\nAnswer() :- Lived_in_state(\"Rumi\", \"euphoria\").\n.output Answer"]}
{"id": 926, "answer": true, "completion": ".decl Is_useful_on(Procedure:symbol, Object:symbol)\nIs_useful_on(\"dual-energy X-ray absorptiometry\", \"human\").\n.decl Is_animal(Object:symbol, Animal:symbol)\nIs_animal(\"crab\", \"crustacean\").\n.decl Answer()\nAnswer() :- Is_useful_on(\"dual-energy X-ray absorptiometry\", object), Is_animal(\"crab\", object).\n.output Answer", "completions": [".decl Is_useful_on(Procedure:symbol, Object:symbol)\nIs_useful_on(\"dual-energy X-ray absorptiometry\", \"human\").\n.decl Is_animal(Object:symbol, Animal:symbol)\nIs_animal(\"crab\", \"crustacean\").\n.decl Answer()\nAnswer() :- Is_useful_on(\"dual-energy X-ray absorptiometry\", object), Is_animal(\"crab\", object).\n.output Answer"]}
{"id": 927, "answer": true, "completion": ".decl Is_aerodynamic(Object:symbol)\nIs_aerodynamic(\"cactus\").\n\n.decl Has_stomata(Object:symbol)\nHas_stomata(\"cactus\").\n\n.decl Benefits_from_closed_stomata(Object:symbol)\nBenefits_from_closed_stomata(\"cactus\").\n\n.decl Answer()\nAnswer() :- Is_aerodynamic(\"cactus\"), Has_stomata(\"cactus\"), Benefits_from_closed_stomata(\"cactus\").\n.output Answer", "completions": [".decl Is_aerodynamic(Object:symbol)\nIs_aerodynamic(\"cactus\").\n\n.decl Has_stomata(Object:symbol)\nHas_stomata(\"cactus\").\n\n.decl Benefits_from_closed_stomata(Object:symbol)\nBenefits_from_closed_stomata(\"cactus\").\n\n.decl Answer()\nAnswer() :- Is_aerodynamic(\"cactus\"), Has_stomata(\"cactus\"), Benefits_from_closed_stomata(\"cactus\").\n.output Answer"]}
{"id": 928, "answer": true, "completion": ".decl Has_ADHD_risk(Food:symbol)\nHas_ADHD_risk(\"oysters\").\n.decl Answer()\nAnswer() :- Has_ADHD_risk(\"oysters\").\n.output Answer", "completions": [".decl Has_ADHD_risk(Food:symbol)\nHas_ADHD_risk(\"oysters\").\n.decl Answer()\nAnswer() :- Has_ADHD_risk(\"oysters\").\n.output Answer"]}
{"id": 929, "answer": true, "completion": ".decl On_moon(Object:symbol)\nOn_moon(\"American flag\").\n.decl Is_ensign(Object:symbol, Organization:symbol)\nIs_ensign(\"Royal Air Force ensign\", \"Royal Air Force\").\n.decl Answer()\nAnswer() :- On_moon(object), Is_ensign(object, \"Royal Air Force\").\n.output Answer", "completions": [".decl On_moon(Object:symbol)\nOn_moon(\"American flag\").\n.decl Is_ensign(Object:symbol, Organization:symbol)\nIs_ensign(\"Royal Air Force ensign\", \"Royal Air Force\").\n.decl Answer()\nAnswer() :- On_moon(object), Is_ensign(object, \"Royal Air Force\").\n.output Answer"]}
{"id": 930, "answer": true, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Samoa\", 200000).\n.decl Has_employees(Company:symbol, Employees:float)\nHas_employees(\"JPMorgan Chase\", 260000).\n.decl Answer()\nAnswer() :- Has_population(\"Samoa\", population), Has_employees(\"JPMorgan Chase\", employees), population <= employees.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Samoa\", 200000).\n.decl Has_employees(Company:symbol, Employees:float)\nHas_employees(\"JPMorgan Chase\", 260000).\n.decl Answer()\nAnswer() :- Has_population(\"Samoa\", population), Has_employees(\"JPMorgan Chase\", employees), population <= employees.\n.output Answer"]}
{"id": 931, "answer": true, "completion": ".decl Contributed_to_work(Person:symbol, Work:symbol)\nContributed_to_work(\"Rosalind Franklin\", \"DNA structure discovery\").\n.decl Led_to_work(Work_A:symbol, Work_B:symbol)\nLed_to_work(\"DNA structure discovery\", \"Whole Genome Sequencing\").\n.decl Answer()\nAnswer() :- Contributed_to_work(\"Rosalind Franklin\", work), Led_to_work(work, \"Whole Genome Sequencing\").\n.output Answer", "completions": [".decl Contributed_to_work(Person:symbol, Work:symbol)\nContributed_to_work(\"Rosalind Franklin\", \"DNA structure discovery\").\n.decl Led_to_work(Work_A:symbol, Work_B:symbol)\nLed_to_work(\"DNA structure discovery\", \"Whole Genome Sequencing\").\n.decl Answer()\nAnswer() :- Contributed_to_work(\"Rosalind Franklin\", work), Led_to_work(work, \"Whole Genome Sequencing\").\n.output Answer"]}
{"id": 932, "answer": true, "completion": ".decl Has_qualification(Person:symbol, Qualification:symbol)\nHas_qualification(\"Kenny G\", \"musician\").\nHas_qualification(\"Kenny G\", \"saxophonist\").\n.decl Required_qualification(Job:symbol, Qualification:symbol)\nRequired_qualification(\"tax collector\", \"accounting\").\nRequired_qualification(\"tax collector\", \"finance\").\n.decl Answer()\nAnswer() :- Has_qualification(\"Kenny G\", qualification), Required_qualification(\"tax collector\", qualification).\n.output Answer", "completions": [".decl Has_qualification(Person:symbol, Qualification:symbol)\nHas_qualification(\"Kenny G\", \"musician\").\nHas_qualification(\"Kenny G\", \"saxophonist\").\n.decl Required_qualification(Job:symbol, Qualification:symbol)\nRequired_qualification(\"tax collector\", \"accounting\").\nRequired_qualification(\"tax collector\", \"finance\").\n.decl Answer()\nAnswer() :- Has_qualification(\"Kenny G\", qualification), Required_qualification(\"tax collector\", qualification).\n.output Answer"]}
{"id": 933, "answer": true, "completion": ".decl Is_Mustelidae(Animal:symbol)\nIs_Mustelidae(\"Sable\").\nIs_Mustelidae(\"Weasel\").\nIs_Mustelidae(\"Ferret\").\nIs_Mustelidae(\"Mink\").\nIs_Mustelidae(\"Otter\").\nIs_Mustelidae(\"Badger\").\nIs_Mustelidae(\"Wolverine\").\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"Sable\", 2).\nHas_weight(\"Weasel\", 0.5).\nHas_weight(\"Ferret\", 1.5).\nHas_weight(\"Mink\", 1.2).\nHas_weight(\"Otter\", 10).\nHas_weight(\"Badger\", 15).\nHas_weight(\"Wolverine\", 25).\n.decl Answer()\nAnswer() :- Is_Mustelidae(\"Sable\"), Has_weight(\"Sable\", weight1), Is_Mustelidae(animal2), Has_weight(animal2, weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Is_Mustelidae(Animal:symbol)\nIs_Mustelidae(\"Sable\").\nIs_Mustelidae(\"Weasel\").\nIs_Mustelidae(\"Ferret\").\nIs_Mustelidae(\"Mink\").\nIs_Mustelidae(\"Otter\").\nIs_Mustelidae(\"Badger\").\nIs_Mustelidae(\"Wolverine\").\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"Sable\", 2).\nHas_weight(\"Weasel\", 0.5).\nHas_weight(\"Ferret\", 1.5).\nHas_weight(\"Mink\", 1.2).\nHas_weight(\"Otter\", 10).\nHas_weight(\"Badger\", 15).\nHas_weight(\"Wolverine\", 25).\n.decl Answer()\nAnswer() :- Is_Mustelidae(\"Sable\"), Has_weight(\"Sable\", weight1), Is_Mustelidae(animal2), Has_weight(animal2, weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 934, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Mickey Mouse\", \"black\").\nHas_color(\"Mickey Mouse\", \"white\").\nHas_color(\"Mickey Mouse\", \"red\").\nHas_color(\"American flag\", \"red\").\nHas_color(\"American flag\", \"white\").\nHas_color(\"American flag\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Mickey Mouse\", color1), Has_color(\"American flag\", color1), !Has_color(\"Mickey Mouse\", color2), !Has_color(\"American flag\", color2), color1 != color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Mickey Mouse\", \"black\").\nHas_color(\"Mickey Mouse\", \"white\").\nHas_color(\"Mickey Mouse\", \"red\").\nHas_color(\"American flag\", \"red\").\nHas_color(\"American flag\", \"white\").\nHas_color(\"American flag\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Mickey Mouse\", color1), Has_color(\"American flag\", color1), !Has_color(\"Mickey Mouse\", color2), !Has_color(\"American flag\", color2), color1 != color2.\n.output Answer"]}
{"id": 935, "answer": true, "completion": ".decl Has_associated_color(Character:symbol, Color:symbol)\nHas_associated_color(\"Anakin Skywalker\", \"black\").\nHas_associated_color(\"Darth Vader\", \"black\").\n.decl Is_associated_with(Character_A:symbol, Character_B:symbol)\nIs_associated_with(\"Anakin Skywalker\", \"Darth Vader\").\n.decl Answer()\nAnswer() :- Has_associated_color(\"Anakin Skywalker\", \"black\").\nAnswer() :- Is_associated_with(\"Anakin Skywalker\", character), Has_associated_color(character, \"black\").\n.output Answer", "completions": [".decl Has_associated_color(Character:symbol, Color:symbol)\nHas_associated_color(\"Anakin Skywalker\", \"black\").\nHas_associated_color(\"Darth Vader\", \"black\").\n.decl Is_associated_with(Character_A:symbol, Character_B:symbol)\nIs_associated_with(\"Anakin Skywalker\", \"Darth Vader\").\n.decl Answer()\nAnswer() :- Has_associated_color(\"Anakin Skywalker\", \"black\").\nAnswer() :- Is_associated_with(\"Anakin Skywalker\", character), Has_associated_color(character, \"black\").\n.output Answer"]}
{"id": 936, "answer": true, "completion": ".decl Inspired_by(Story:symbol, Myth:symbol)\nInspired_by(\"story of Jesus\", \"Egyptian myth\").\n.decl Answer()\nAnswer() :- Inspired_by(\"story of Jesus\", \"Egyptian myth\").\n.output Answer", "completions": [".decl Inspired_by(Story:symbol, Myth:symbol)\nInspired_by(\"story of Jesus\", \"Egyptian myth\").\n.decl Answer()\nAnswer() :- Inspired_by(\"story of Jesus\", \"Egyptian myth\").\n.output Answer"]}
{"id": 937, "answer": true, "completion": ".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Jennifer Lawrence\", \"Shrader\").\n.decl Is_Scorsese_collaborator(Person:symbol)\nIs_Scorsese_collaborator(\"Robert De Niro\").\nIs_Scorsese_collaborator(\"Leonardo DiCaprio\").\nIs_Scorsese_collaborator(\"Joe Pesci\").\nIs_Scorsese_collaborator(\"Harvey Keitel\").\n.decl Has_similar_name(Name1:symbol, Name2:symbol)\nHas_similar_name(\"Shrader\", \"Scorsese\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Jennifer Lawrence\", middle_name), Is_Scorsese_collaborator(collaborator), Has_similar_name(middle_name, collaborator).\n.output Answer", "completions": [".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Jennifer Lawrence\", \"Shrader\").\n.decl Is_Scorsese_collaborator(Person:symbol)\nIs_Scorsese_collaborator(\"Robert De Niro\").\nIs_Scorsese_collaborator(\"Leonardo DiCaprio\").\nIs_Scorsese_collaborator(\"Joe Pesci\").\nIs_Scorsese_collaborator(\"Harvey Keitel\").\n.decl Has_similar_name(Name1:symbol, Name2:symbol)\nHas_similar_name(\"Shrader\", \"Scorsese\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Jennifer Lawrence\", middle_name), Is_Scorsese_collaborator(collaborator), Has_similar_name(middle_name, collaborator).\n.output Answer"]}
{"id": 938, "answer": true, "completion": ".decl Is_material(Object:symbol, Material:symbol)\nIs_material(\"Golden Gate Bridge\", \"steel\").\n.decl Can_make_from_material(Product:symbol, Material:symbol)\nCan_make_from_material(\"MP3\", \"electronics\").\n.decl Answer()\nAnswer() :- Is_material(\"Golden Gate Bridge\", material), Can_make_from_material(\"MP3\", material).\n.output Answer", "completions": [".decl Is_material(Object:symbol, Material:symbol)\nIs_material(\"Golden Gate Bridge\", \"steel\").\n.decl Can_make_from_material(Product:symbol, Material:symbol)\nCan_make_from_material(\"MP3\", \"electronics\").\n.decl Answer()\nAnswer() :- Is_material(\"Golden Gate Bridge\", material), Can_make_from_material(\"MP3\", material).\n.output Answer"]}
{"id": 939, "answer": true, "completion": ".decl Is_event(Event:symbol)\nIs_event(\"Great Depression\").\n\n.decl Is_treatable_with(Event:symbol, Treatment:symbol)\nIs_treatable_with(\"depression\", \"Prozac\").\n\n.decl Answer()\nAnswer() :- Is_event(\"Great Depression\"), !Is_treatable_with(\"Great Depression\", \"Prozac\").\n.output Answer", "completions": [".decl Is_event(Event:symbol)\nIs_event(\"Great Depression\").\n\n.decl Is_treatable_with(Event:symbol, Treatment:symbol)\nIs_treatable_with(\"depression\", \"Prozac\").\n\n.decl Answer()\nAnswer() :- Is_event(\"Great Depression\"), !Is_treatable_with(\"Great Depression\", \"Prozac\").\n.output Answer"]}
{"id": 940, "answer": true, "completion": ".decl Produces_waste(Organization:symbol, Waste_type:symbol)\nProduces_waste(\"United States Navy\", \"radioactive waste\").\n.decl Answer()\nAnswer() :- Produces_waste(\"United States Navy\", \"radioactive waste\").\n.output Answer", "completions": [".decl Produces_waste(Organization:symbol, Waste_type:symbol)\nProduces_waste(\"United States Navy\", \"radioactive waste\").\n.decl Answer()\nAnswer() :- Produces_waste(\"United States Navy\", \"radioactive waste\").\n.output Answer"]}
{"id": 941, "answer": false, "completion": ".decl Is_highly_sought_after(Object:symbol)\nIs_highly_sought_after(\"gold\").\nIs_highly_sought_after(\"diamond\").\nIs_highly_sought_after(\"platinum\").\n.decl Answer()\nAnswer() :- Is_highly_sought_after(\"clementine pith\").\n.output Answer", "completions": [".decl Is_highly_sought_after(Object:symbol)\nIs_highly_sought_after(\"gold\").\nIs_highly_sought_after(\"diamond\").\nIs_highly_sought_after(\"platinum\").\n.decl Answer()\nAnswer() :- Is_highly_sought_after(\"clementine pith\").\n.output Answer"]}
{"id": 942, "answer": true, "completion": ".decl Has_top_ranked_song(Artist:symbol, Song:symbol, Rank:float)\nHas_top_ranked_song(\"Lil Jon\", \"Yeah!\", 1).\n.decl Collaboration(Song:symbol, Artist_A:symbol, Artist_B:symbol)\nCollaboration(\"Yeah!\", \"Lil Jon\", \"Usher\").\nCollaboration(\"Yeah!\", \"Lil Jon\", \"Ludacris\").\n.decl Is_member_of(Artist:symbol, Group:symbol)\nIs_member_of(\"Sheek Louch\", \"The Lox\").\nIs_member_of(\"Styles P\", \"The Lox\").\nIs_member_of(\"Jadakiss\", \"The Lox\").\n.decl Answer()\nAnswer() :- Has_top_ranked_song(\"Lil Jon\", song, rank), Collaboration(song, \"Lil Jon\", artist), Is_member_of(artist, \"The Lox\").\n.output Answer", "completions": [".decl Has_top_ranked_song(Artist:symbol, Song:symbol, Rank:float)\nHas_top_ranked_song(\"Lil Jon\", \"Yeah!\", 1).\n.decl Collaboration(Song:symbol, Artist_A:symbol, Artist_B:symbol)\nCollaboration(\"Yeah!\", \"Lil Jon\", \"Usher\").\nCollaboration(\"Yeah!\", \"Lil Jon\", \"Ludacris\").\n.decl Is_member_of(Artist:symbol, Group:symbol)\nIs_member_of(\"Sheek Louch\", \"The Lox\").\nIs_member_of(\"Styles P\", \"The Lox\").\nIs_member_of(\"Jadakiss\", \"The Lox\").\n.decl Answer()\nAnswer() :- Has_top_ranked_song(\"Lil Jon\", song, rank), Collaboration(song, \"Lil Jon\", artist), Is_member_of(artist, \"The Lox\").\n.output Answer"]}
{"id": 943, "answer": true, "completion": ".decl Caused_explosion(Explosion:symbol, Cause:symbol)\nCaused_explosion(\"Hindenburg explosion\", \"helium\").\n.decl Actual_cause(Explosion:symbol, Cause:symbol)\nActual_cause(\"Hindenburg explosion\", \"hydrogen\").\n.decl Answer()\nAnswer() :- Caused_explosion(\"Hindenburg explosion\", \"helium\"), !Actual_cause(\"Hindenburg explosion\", \"hydrogen\").\n.output Answer", "completions": [".decl Caused_explosion(Explosion:symbol, Cause:symbol)\nCaused_explosion(\"Hindenburg explosion\", \"helium\").\n.decl Actual_cause(Explosion:symbol, Cause:symbol)\nActual_cause(\"Hindenburg explosion\", \"hydrogen\").\n.decl Answer()\nAnswer() :- Caused_explosion(\"Hindenburg explosion\", \"helium\"), !Actual_cause(\"Hindenburg explosion\", \"hydrogen\").\n.output Answer"]}
{"id": 944, "answer": true, "completion": ".decl Won_event(Person:symbol, Event:symbol)\nWon_event(\"Al Unser Jr.\", \"Indy 500\").\nWon_event(\"United States\", \"Space Race\").\n.decl Answer()\nAnswer() :- Won_event(\"Al Unser Jr.\", \"Space Race\").\n.output Answer", "completions": [".decl Won_event(Person:symbol, Event:symbol)\nWon_event(\"Al Unser Jr.\", \"Indy 500\").\nWon_event(\"United States\", \"Space Race\").\n.decl Answer()\nAnswer() :- Won_event(\"Al Unser Jr.\", \"Space Race\").\n.output Answer"]}
{"id": 945, "answer": false, "completion": ".decl Is_half_muggle_wizard(Person:symbol)\nIs_half_muggle_wizard(\"Hermione Granger\").\nIs_half_muggle_wizard(\"Severus Snape\").\n.decl Fears(Person:symbol, Entity:symbol)\nFears(\"Hermione Granger\", \"Lord Voldemort\").\nFears(\"Severus Snape\", \"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Is_half_muggle_wizard(person), Fears(person, \"Lord Voldemort\").\n.output Answer", "completions": [".decl Is_half_muggle_wizard(Person:symbol)\nIs_half_muggle_wizard(\"Hermione Granger\").\nIs_half_muggle_wizard(\"Severus Snape\").\n.decl Fears(Person:symbol, Entity:symbol)\nFears(\"Hermione Granger\", \"Lord Voldemort\").\nFears(\"Severus Snape\", \"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Is_half_muggle_wizard(person), Fears(person, \"Lord Voldemort\").\n.output Answer"]}
{"id": 946, "answer": true, "completion": ".decl Has_endowment(University:symbol, Endowment:float)\nHas_endowment(\"Johns Hopkins University\", 6.5).\n.decl Has_debt(Organization:symbol, Debt:float)\nHas_debt(\"MBTA\", 5.5).\n.decl Answer()\nAnswer() :- Has_endowment(\"Johns Hopkins University\", endowment), Has_debt(\"MBTA\", debt), endowment >= debt.\n.output Answer", "completions": [".decl Has_endowment(University:symbol, Endowment:float)\nHas_endowment(\"Johns Hopkins University\", 6.5).\n.decl Has_debt(Organization:symbol, Debt:float)\nHas_debt(\"MBTA\", 5.5).\n.decl Answer()\nAnswer() :- Has_endowment(\"Johns Hopkins University\", endowment), Has_debt(\"MBTA\", debt), endowment >= debt.\n.output Answer"]}
{"id": 947, "answer": true, "completion": ".decl Has_modern_trade(Country:symbol, Trade_type:symbol)\nHas_modern_trade(\"China\", \"modern trade\").\n.decl Prefers_trade(Company:symbol, Trade_type:symbol)\nPrefers_trade(\"East India Company\", \"traditional trade\").\n.decl Answer()\nAnswer() :- Has_modern_trade(\"China\", trade_type), Prefers_trade(\"East India Company\", trade_type).\n.output Answer", "completions": [".decl Has_modern_trade(Country:symbol, Trade_type:symbol)\nHas_modern_trade(\"China\", \"modern trade\").\n.decl Prefers_trade(Company:symbol, Trade_type:symbol)\nPrefers_trade(\"East India Company\", \"traditional trade\").\n.decl Answer()\nAnswer() :- Has_modern_trade(\"China\", trade_type), Prefers_trade(\"East India Company\", trade_type).\n.output Answer"]}
{"id": 948, "answer": false, "completion": ".decl Has_age_rating(Game:symbol, Rating:symbol)\nHas_age_rating(\"Guitar Hero Beatles\", \"E10+\").\n.decl Age_of_grade(Grade:symbol, Age:float)\nAge_of_grade(\"third grade\", 8).\n.decl Rating_minimum_age(Rating:symbol, Age:float)\nRating_minimum_age(\"E10+\", 10).\n.decl Answer()\nAnswer() :- Has_age_rating(\"Guitar Hero Beatles\", rating), Age_of_grade(\"third grade\", age1), Rating_minimum_age(rating, age2), age1 < age2.\n.output Answer", "completions": [".decl Has_age_rating(Game:symbol, Rating:symbol)\nHas_age_rating(\"Guitar Hero Beatles\", \"E10+\").\n.decl Age_of_grade(Grade:symbol, Age:float)\nAge_of_grade(\"third grade\", 8).\n.decl Rating_minimum_age(Rating:symbol, Age:float)\nRating_minimum_age(\"E10+\", 10).\n.decl Answer()\nAnswer() :- Has_age_rating(\"Guitar Hero Beatles\", rating), Age_of_grade(\"third grade\", age1), Rating_minimum_age(rating, age2), age1 < age2.\n.output Answer"]}
{"id": 949, "answer": false, "completion": ".decl Has_n_marriages(Person:symbol, N_marriages:float)\nHas_n_marriages(\"Larry King\", 8).\n.decl Has_n_toes(Person:symbol, N_toes:float)\nHas_n_toes(\"two feet\", 20).\n.decl Answer()\nAnswer() :- Has_n_marriages(\"Larry King\", n_marriages), Has_n_toes(\"two feet\", n_toes), n_marriages <= n_toes.\n.output Answer", "completions": [".decl Has_n_marriages(Person:symbol, N_marriages:float)\nHas_n_marriages(\"Larry King\", 8).\n.decl Has_n_toes(Person:symbol, N_toes:float)\nHas_n_toes(\"two feet\", 20).\n.decl Answer()\nAnswer() :- Has_n_marriages(\"Larry King\", n_marriages), Has_n_toes(\"two feet\", n_toes), n_marriages <= n_toes.\n.output Answer"]}
{"id": 950, "answer": true, "completion": ".decl Has_smell_threshold(Animal:symbol, Substance:symbol, Threshold:float)\nHas_smell_threshold(\"dog\", \"ammonia\", 0.00001).\n.decl Answer()\nAnswer() :- Has_smell_threshold(\"dog\", \"ammonia\", threshold), threshold <= 0.00001.\n.output Answer", "completions": [".decl Has_smell_threshold(Animal:symbol, Substance:symbol, Threshold:float)\nHas_smell_threshold(\"dog\", \"ammonia\", 0.00001).\n.decl Answer()\nAnswer() :- Has_smell_threshold(\"dog\", \"ammonia\", threshold), threshold <= 0.00001.\n.output Answer"]}
{"id": 951, "answer": true, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"Walmart\", \"groceries\").\nSells(\"Walmart\", \"electronics\").\nSells(\"Walmart\", \"clothing\").\nSells(\"Walmart\", \"home_goods\").\n.decl Is_a(Product:symbol, Category:symbol)\nIs_a(\"Reddit\", \"social_media_platform\").\n.decl Answer()\nAnswer() :- Sells(\"Walmart\", product), Is_a(product, \"social_media_platform\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"Walmart\", \"groceries\").\nSells(\"Walmart\", \"electronics\").\nSells(\"Walmart\", \"clothing\").\nSells(\"Walmart\", \"home_goods\").\n.decl Is_a(Product:symbol, Category:symbol)\nIs_a(\"Reddit\", \"social_media_platform\").\n.decl Answer()\nAnswer() :- Sells(\"Walmart\", product), Is_a(product, \"social_media_platform\").\n.output Answer"]}
{"id": 952, "answer": true, "completion": ".decl Climbed(Person:symbol, Mountain:symbol)\nClimbed(\"Tenzing Norgay\", \"Mount Everest\").\n.decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Snowdon\", 1085).\nHas_height(\"Mount Everest\", 8848).\n.decl Answer()\nAnswer() :- Climbed(\"Tenzing Norgay\", \"Snowdon\").\nAnswer() :- Climbed(\"Tenzing Norgay\", mountain2), Has_height(mountain2, height2), Has_height(\"Snowdon\", height1), height2 >= height1.\n.output Answer", "completions": [".decl Climbed(Person:symbol, Mountain:symbol)\nClimbed(\"Tenzing Norgay\", \"Mount Everest\").\n.decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Snowdon\", 1085).\nHas_height(\"Mount Everest\", 8848).\n.decl Answer()\nAnswer() :- Climbed(\"Tenzing Norgay\", \"Snowdon\").\nAnswer() :- Climbed(\"Tenzing Norgay\", mountain2), Has_height(mountain2, height2), Has_height(\"Snowdon\", height1), height2 >= height1.\n.output Answer"]}
{"id": 953, "answer": false, "completion": ".decl Contains_subtext(Book:symbol, Subtext:symbol)\nContains_subtext(\"The Jungle Book\", \"racist\").\n.decl Answer()\nAnswer() :- Contains_subtext(\"The Jungle Book\", \"racist\").\n.output Answer", "completions": [".decl Contains_subtext(Book:symbol, Subtext:symbol)\nContains_subtext(\"The Jungle Book\", \"racist\").\n.decl Answer()\nAnswer() :- Contains_subtext(\"The Jungle Book\", \"racist\").\n.output Answer"]}
{"id": 954, "answer": true, "completion": ".decl Can_hold_breath(Animal:symbol, Duration:float)\nCan_hold_breath(\"sloth\", 40).\n.decl Has_episode_duration(Show:symbol, Duration:float)\nHas_episode_duration(\"Scrubs\", 22*60).\n.decl Answer()\nAnswer() :- Can_hold_breath(\"sloth\", duration1), Has_episode_duration(\"Scrubs\", duration2), duration1 >= duration2.\n.output Answer", "completions": [".decl Can_hold_breath(Animal:symbol, Duration:float)\nCan_hold_breath(\"sloth\", 40).\n.decl Has_episode_duration(Show:symbol, Duration:float)\nHas_episode_duration(\"Scrubs\", 22*60).\n.decl Answer()\nAnswer() :- Can_hold_breath(\"sloth\", duration1), Has_episode_duration(\"Scrubs\", duration2), duration1 >= duration2.\n.output Answer"]}
{"id": 955, "answer": false, "completion": ".decl Has_heat_level(Pepper:symbol, Heat_level:float)\nHas_heat_level(\"jalapeno\", 2500).\nHas_heat_level(\"Bhut jolokia\", 1000000).\n.decl Answer()\nAnswer() :- Has_heat_level(\"jalapeno\", heat1), Has_heat_level(\"Bhut jolokia\", heat2), heat1 < heat2.\n.output Answer", "completions": [".decl Has_heat_level(Pepper:symbol, Heat_level:float)\nHas_heat_level(\"jalapeno\", 2500).\nHas_heat_level(\"Bhut jolokia\", 1000000).\n.decl Answer()\nAnswer() :- Has_heat_level(\"jalapeno\", heat1), Has_heat_level(\"Bhut jolokia\", heat2), heat1 < heat2.\n.output Answer"]}
{"id": 956, "answer": true, "completion": ".decl Has_spokesperson(Brand:symbol, Person:symbol)\nHas_spokesperson(\"Subway\", \"Jared Fogle\").\n.decl Is_sex_offender(Person:symbol)\nIs_sex_offender(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Has_spokesperson(\"Subway\", person), Is_sex_offender(person).\n.output Answer", "completions": [".decl Has_spokesperson(Brand:symbol, Person:symbol)\nHas_spokesperson(\"Subway\", \"Jared Fogle\").\n.decl Is_sex_offender(Person:symbol)\nIs_sex_offender(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Has_spokesperson(\"Subway\", person), Is_sex_offender(person).\n.output Answer"]}
{"id": 957, "answer": true, "completion": ".decl Can_wake_up(Person:symbol, Sound:symbol)\nCan_wake_up(\"Hellen Keller\", \"loud noise\").\n.decl Sound_type(Sound:symbol, Type:symbol)\nSound_type(\"lullaby\", \"soft\").\nSound_type(\"loud noise\", \"loud\").\n.decl Answer()\nAnswer() :- Can_wake_up(\"Hellen Keller\", sound), Sound_type(sound, \"soft\").\nAnswer() :- Can_wake_up(\"Hellen Keller\", sound), Sound_type(\"lullaby\", type1), Sound_type(sound, type2), type1 = type2.\n.output Answer", "completions": [".decl Can_wake_up(Person:symbol, Sound:symbol)\nCan_wake_up(\"Hellen Keller\", \"loud noise\").\n.decl Sound_type(Sound:symbol, Type:symbol)\nSound_type(\"lullaby\", \"soft\").\nSound_type(\"loud noise\", \"loud\").\n.decl Answer()\nAnswer() :- Can_wake_up(\"Hellen Keller\", sound), Sound_type(sound, \"soft\").\nAnswer() :- Can_wake_up(\"Hellen Keller\", sound), Sound_type(\"lullaby\", type1), Sound_type(sound, type2), type1 = type2.\n.output Answer"]}
{"id": 958, "answer": false, "completion": ".decl Has_perfect_all_kill(Organization:symbol)\nHas_perfect_all_kill(\"Communist Party of the Soviet Union\").\n.decl Answer()\nAnswer() :- Has_perfect_all_kill(\"Communist Party of the Soviet Union\").\n.output Answer", "completions": [".decl Has_perfect_all_kill(Organization:symbol)\nHas_perfect_all_kill(\"Communist Party of the Soviet Union\").\n.decl Answer()\nAnswer() :- Has_perfect_all_kill(\"Communist Party of the Soviet Union\").\n.output Answer"]}
{"id": 959, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Stanford Linear Accelerator\", 3000).\nHas_length(\"Golden Gate Bridge\", 2737).\n.decl Answer()\nAnswer() :- Has_length(\"Stanford Linear Accelerator\", length1), Has_length(\"Golden Gate Bridge\", length2), length1 <= length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Stanford Linear Accelerator\", 3000).\nHas_length(\"Golden Gate Bridge\", 2737).\n.decl Answer()\nAnswer() :- Has_length(\"Stanford Linear Accelerator\", length1), Has_length(\"Golden Gate Bridge\", length2), length1 <= length2.\n.output Answer"]}
{"id": 960, "answer": true, "completion": ".decl Measures(Object:symbol, Tool:symbol)\nMeasures(\"angle\", \"protractor\").\nMeasures(\"length\", \"ruler\").\nMeasures(\"weight\", \"scale\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"Caracal\", \"length\").\nHas_property(\"Caracal\", \"weight\").\n.decl Answer()\nAnswer() :- Has_property(\"Caracal\", property), Measures(property, \"protractor\").\n.output Answer", "completions": [".decl Measures(Object:symbol, Tool:symbol)\nMeasures(\"angle\", \"protractor\").\nMeasures(\"length\", \"ruler\").\nMeasures(\"weight\", \"scale\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"Caracal\", \"length\").\nHas_property(\"Caracal\", \"weight\").\n.decl Answer()\nAnswer() :- Has_property(\"Caracal\", property), Measures(property, \"protractor\").\n.output Answer"]}
{"id": 961, "answer": true, "completion": ".decl Has_sports_team(University:symbol, Sport:symbol)\nHas_sports_team(\"Marist\", \"basketball\").\nHas_sports_team(\"Marist\", \"soccer\").\n.decl Answer()\nAnswer() :- !Has_sports_team(\"Marist\", \"rowing\").\n.output Answer", "completions": [".decl Has_sports_team(University:symbol, Sport:symbol)\nHas_sports_team(\"Marist\", \"basketball\").\nHas_sports_team(\"Marist\", \"soccer\").\n.decl Answer()\nAnswer() :- !Has_sports_team(\"Marist\", \"rowing\").\n.output Answer"]}
{"id": 962, "answer": true, "completion": ".decl Tolerates(Person:symbol, Music_genre:symbol)\nTolerates(\"Ibn Saud\", \"traditional Arabic music\").\n.decl Is_related(Genre_A:symbol, Genre_B:symbol)\nIs_related(\"salsa music\", \"Latin music\").\nIs_related(\"Latin music\", \"Spanish music\").\nIs_related(\"Spanish music\", \"Mediterranean music\").\nIs_related(\"Mediterranean music\", \"traditional Arabic music\").\n.decl Answer()\nAnswer() :- Tolerates(\"Ibn Saud\", \"salsa music\").\nAnswer() :- Tolerates(\"Ibn Saud\", genre1), Is_related(\"salsa music\", genre1).\nAnswer() :- Tolerates(\"Ibn Saud\", genre1), Is_related(\"salsa music\", genre2), Is_related(genre2, genre1).\nAnswer() :- Tolerates(\"Ibn Saud\", genre1), Is_related(\"salsa music\", genre2), Is_related(genre2, genre3), Is_related(genre3, genre1).\n.output Answer", "completions": [".decl Tolerates(Person:symbol, Music_genre:symbol)\nTolerates(\"Ibn Saud\", \"traditional Arabic music\").\n.decl Is_related(Genre_A:symbol, Genre_B:symbol)\nIs_related(\"salsa music\", \"Latin music\").\nIs_related(\"Latin music\", \"Spanish music\").\nIs_related(\"Spanish music\", \"Mediterranean music\").\nIs_related(\"Mediterranean music\", \"traditional Arabic music\").\n.decl Answer()\nAnswer() :- Tolerates(\"Ibn Saud\", \"salsa music\").\nAnswer() :- Tolerates(\"Ibn Saud\", genre1), Is_related(\"salsa music\", genre1).\nAnswer() :- Tolerates(\"Ibn Saud\", genre1), Is_related(\"salsa music\", genre2), Is_related(genre2, genre1).\nAnswer() :- Tolerates(\"Ibn Saud\", genre1), Is_related(\"salsa music\", genre2), Is_related(genre2, genre3), Is_related(genre3, genre1).\n.output Answer"]}
{"id": 963, "answer": true, "completion": ".decl Has_surface_temperature(Planet:symbol, Temperature:float)\nHas_surface_temperature(\"Venus\", 471).\n.decl Has_surface_pressure(Planet:symbol, Pressure:float)\nHas_surface_pressure(\"Venus\", 92).\n.decl Is_snowboarding_possible(Planet:symbol)\nIs_snowboarding_possible(\"Earth\").\n.decl Answer()\nAnswer() :- !Is_snowboarding_possible(\"Venus\").\nAnswer() :- Has_surface_temperature(\"Venus\", temperature), temperature > 0.\nAnswer() :- Has_surface_pressure(\"Venus\", pressure), pressure > 1.\n.output Answer", "completions": [".decl Has_surface_temperature(Planet:symbol, Temperature:float)\nHas_surface_temperature(\"Venus\", 471).\n.decl Has_surface_pressure(Planet:symbol, Pressure:float)\nHas_surface_pressure(\"Venus\", 92).\n.decl Is_snowboarding_possible(Planet:symbol)\nIs_snowboarding_possible(\"Earth\").\n.decl Answer()\nAnswer() :- !Is_snowboarding_possible(\"Venus\").\nAnswer() :- Has_surface_temperature(\"Venus\", temperature), temperature > 0.\nAnswer() :- Has_surface_pressure(\"Venus\", pressure), pressure > 1.\n.output Answer"]}
{"id": 964, "answer": true, "completion": ".decl Is_accountable(Entity:symbol, Stakeholder:symbol)\nIs_accountable(\"Samsung\", \"shareholders\").\n.decl Answer()\nAnswer() :- Is_accountable(\"Samsung\", \"shareholders\").\n.output Answer", "completions": [".decl Is_accountable(Entity:symbol, Stakeholder:symbol)\nIs_accountable(\"Samsung\", \"shareholders\").\n.decl Answer()\nAnswer() :- Is_accountable(\"Samsung\", \"shareholders\").\n.output Answer"]}
{"id": 965, "answer": false, "completion": ".decl Tamed(Tamer:symbol, Animal:symbol)\nTamed(\"Cesar Millan\", \"dog\").\n.decl Is_short_eared(Animal:symbol)\nIs_short_eared(\"short-eared dog\").\n.decl Answer()\nAnswer() :- Tamed(\"Cesar Millan\", animal), Is_short_eared(animal).\n.output Answer", "completions": [".decl Tamed(Tamer:symbol, Animal:symbol)\nTamed(\"Cesar Millan\", \"dog\").\n.decl Is_short_eared(Animal:symbol)\nIs_short_eared(\"short-eared dog\").\n.decl Answer()\nAnswer() :- Tamed(\"Cesar Millan\", animal), Is_short_eared(animal).\n.output Answer"]}
{"id": 966, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Charlie Bucket\", \"chocolate factory owner\").\n.decl Job_category(Job:symbol, Category:symbol)\nJob_category(\"chocolate factory owner\", \"business\").\nJob_category(\"hotel manager\", \"business\").\n.decl Answer()\nAnswer() :- Has_job(\"Charlie Bucket\", job1), Job_category(job1, category1), Job_category(\"hotel manager\", category2), category1 = category2.\n.output Answer", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Charlie Bucket\", \"chocolate factory owner\").\n.decl Job_category(Job:symbol, Category:symbol)\nJob_category(\"chocolate factory owner\", \"business\").\nJob_category(\"hotel manager\", \"business\").\n.decl Answer()\nAnswer() :- Has_job(\"Charlie Bucket\", job1), Job_category(job1, category1), Job_category(\"hotel manager\", category2), category1 = category2.\n.output Answer"]}
{"id": 967, "answer": true, "completion": ".decl Presidency(Person:symbol, Start_year:float, End_year:float)\nPresidency(\"Bill Clinton\", 1993, 2001).\n.decl Impeachment(Person:symbol, Year:float)\nImpeachment(\"Bill Clinton\", 1998).\n.decl Answer()\nAnswer() :- Presidency(\"Bill Clinton\", start_year, end_year), Impeachment(\"Bill Clinton\", impeachment_year), end_year = impeachment_year.\n.output Answer", "completions": [".decl Presidency(Person:symbol, Start_year:float, End_year:float)\nPresidency(\"Bill Clinton\", 1993, 2001).\n.decl Impeachment(Person:symbol, Year:float)\nImpeachment(\"Bill Clinton\", 1998).\n.decl Answer()\nAnswer() :- Presidency(\"Bill Clinton\", start_year, end_year), Impeachment(\"Bill Clinton\", impeachment_year), end_year = impeachment_year.\n.output Answer"]}
{"id": 968, "answer": true, "completion": ".decl Has_attraction(Location:symbol, Attraction:symbol, Type:symbol)\nHas_attraction(\"Forbidden City\", \"none\", \"none\").\n.decl Answer()\nAnswer() :- Has_attraction(\"Forbidden City\", attraction, \"wooden rollercoaster\").\n.output Answer", "completions": [".decl Has_attraction(Location:symbol, Attraction:symbol, Type:symbol)\nHas_attraction(\"Forbidden City\", \"none\", \"none\").\n.decl Answer()\nAnswer() :- Has_attraction(\"Forbidden City\", attraction, \"wooden rollercoaster\").\n.output Answer"]}
{"id": 969, "answer": true, "completion": ".decl Enjoys(Person:symbol, Food:symbol)\nEnjoys(\"Magnus Carlsen\", \"KFC\").\n.decl Answer()\nAnswer() :- Enjoys(\"Magnus Carlsen\", \"KFC\").\n.output Answer", "completions": [".decl Enjoys(Person:symbol, Food:symbol)\nEnjoys(\"Magnus Carlsen\", \"KFC\").\n.decl Answer()\nAnswer() :- Enjoys(\"Magnus Carlsen\", \"KFC\").\n.output Answer"]}
{"id": 970, "answer": true, "completion": ".decl Lives_on(Animal_A:symbol, Animal_B:symbol)\nLives_on(\"moth\", \"sloth\").\n.decl Has_family_dinners(Animal:symbol)\nHas_family_dinners(\"human\").\n.decl Answer()\nAnswer() :- Lives_on(\"moth\", \"sloth\"), Has_family_dinners(\"moth\").\n.output Answer", "completions": [".decl Lives_on(Animal_A:symbol, Animal_B:symbol)\nLives_on(\"moth\", \"sloth\").\n.decl Has_family_dinners(Animal:symbol)\nHas_family_dinners(\"human\").\n.decl Answer()\nAnswer() :- Lives_on(\"moth\", \"sloth\"), Has_family_dinners(\"moth\").\n.output Answer"]}
{"id": 971, "answer": true, "completion": ".decl Has_sales(Artist:symbol, Sales:float)\nHas_sales(\"Kelly Clarkson\", 25).\nHas_sales(\"Carrie Underwood\", 20).\n.decl Is_season_winner(Artist:symbol, Season:int)\nIs_season_winner(\"Carrie Underwood\", 4).\n.decl Answer()\nAnswer() :- Has_sales(\"Kelly Clarkson\", sales1), Is_season_winner(winner, 4), Has_sales(winner, sales2), sales1 > sales2.\n.output Answer", "completions": [".decl Has_sales(Artist:symbol, Sales:float)\nHas_sales(\"Kelly Clarkson\", 25).\nHas_sales(\"Carrie Underwood\", 20).\n.decl Is_season_winner(Artist:symbol, Season:int)\nIs_season_winner(\"Carrie Underwood\", 4).\n.decl Answer()\nAnswer() :- Has_sales(\"Kelly Clarkson\", sales1), Is_season_winner(winner, 4), Has_sales(winner, sales2), sales1 > sales2.\n.output Answer"]}
{"id": 972, "answer": false, "completion": ".decl High_jump_record(Person:symbol, Height:float)\nHigh_jump_record(\"Javier Sotomayor\", 2.45).\n.decl High_jump_ability(Animal:symbol, Height:float)\nHigh_jump_ability(\"caracal\", 3).\n.decl Answer()\nAnswer() :- High_jump_record(\"Javier Sotomayor\", height1), High_jump_ability(\"caracal\", height2), height1 < height2.\n.output Answer", "completions": [".decl High_jump_record(Person:symbol, Height:float)\nHigh_jump_record(\"Javier Sotomayor\", 2.45).\n.decl High_jump_ability(Animal:symbol, Height:float)\nHigh_jump_ability(\"caracal\", 3).\n.decl Answer()\nAnswer() :- High_jump_record(\"Javier Sotomayor\", height1), High_jump_ability(\"caracal\", height2), height1 < height2.\n.output Answer"]}
{"id": 973, "answer": true, "completion": ".decl Has_n_presidents(Time_period:symbol, N_presidents:float)\nHas_n_presidents(\"1800s\", 11).\n.decl Is_lucky_number_in_Hong_Kong(Number:float)\nIs_lucky_number_in_Hong_Kong(3).\nIs_lucky_number_in_Hong_Kong(6).\nIs_lucky_number_in_Hong_Kong(8).\n.decl Answer()\nAnswer() :- Has_n_presidents(\"1800s\", n_presidents), Is_lucky_number_in_Hong_Kong(n_presidents).\n.output Answer", "completions": [".decl Has_n_presidents(Time_period:symbol, N_presidents:float)\nHas_n_presidents(\"1800s\", 11).\n.decl Is_lucky_number_in_Hong_Kong(Number:float)\nIs_lucky_number_in_Hong_Kong(3).\nIs_lucky_number_in_Hong_Kong(6).\nIs_lucky_number_in_Hong_Kong(8).\n.decl Answer()\nAnswer() :- Has_n_presidents(\"1800s\", n_presidents), Is_lucky_number_in_Hong_Kong(n_presidents).\n.output Answer"]}
{"id": 974, "answer": true, "completion": ".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Oscar Wilde\", \"19th century\").\n.decl Legal_treatment(Person:symbol, Treatment:symbol)\nLegal_treatment(\"Oscar Wilde\", \"unfair\").\n.decl Legal_standards(Time_period:symbol, Standard:symbol)\nLegal_standards(\"19th century\", \"different\").\nLegal_standards(\"now\", \"fair\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Oscar Wilde\", time_period1), Legal_treatment(\"Oscar Wilde\", treatment), Legal_standards(time_period2, standard), time_period1 != time_period2, treatment != standard.\n.output Answer", "completions": [".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Oscar Wilde\", \"19th century\").\n.decl Legal_treatment(Person:symbol, Treatment:symbol)\nLegal_treatment(\"Oscar Wilde\", \"unfair\").\n.decl Legal_standards(Time_period:symbol, Standard:symbol)\nLegal_standards(\"19th century\", \"different\").\nLegal_standards(\"now\", \"fair\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Oscar Wilde\", time_period1), Legal_treatment(\"Oscar Wilde\", treatment), Legal_standards(time_period2, standard), time_period1 != time_period2, treatment != standard.\n.output Answer"]}
{"id": 975, "answer": true, "completion": ".decl War_veteran(Person:symbol, War:symbol)\nWar_veteran(person, \"War in Vietnam\").\n.decl Free_education(Person:symbol, Country:symbol)\nFree_education(person, \"Soviet Union\").\n.decl Answer()\nAnswer() :- War_veteran(person, \"War in Vietnam\"), Free_education(person, \"Soviet Union\").\n.output Answer", "completions": [".decl War_veteran(Person:symbol, War:symbol)\nWar_veteran(person, \"War in Vietnam\").\n.decl Free_education(Person:symbol, Country:symbol)\nFree_education(person, \"Soviet Union\").\n.decl Answer()\nAnswer() :- War_veteran(person, \"War in Vietnam\"), Free_education(person, \"Soviet Union\").\n.output Answer"]}
{"id": 976, "answer": false, "completion": ".decl Eats_at(Animal:symbol, Restaurant:symbol)\nEats_at(\"goblin shark\", \"ocean\").\n.decl Is_restaurant(Restaurant:symbol)\nIs_restaurant(\"Crossroads Kitchen\").\n.decl Answer()\nAnswer() :- Eats_at(\"goblin shark\", \"Crossroads Kitchen\").\nAnswer() :- !Eats_at(\"goblin shark\", \"ocean\"), Is_restaurant(\"Crossroads Kitchen\").\n.output Answer", "completions": [".decl Eats_at(Animal:symbol, Restaurant:symbol)\nEats_at(\"goblin shark\", \"ocean\").\n.decl Is_restaurant(Restaurant:symbol)\nIs_restaurant(\"Crossroads Kitchen\").\n.decl Answer()\nAnswer() :- Eats_at(\"goblin shark\", \"Crossroads Kitchen\").\nAnswer() :- !Eats_at(\"goblin shark\", \"ocean\"), Is_restaurant(\"Crossroads Kitchen\").\n.output Answer"]}
{"id": 977, "answer": false, "completion": ".decl Is_character(Character:symbol)\nIs_character(\"Hanuman\").\n\n.decl Has_experience(Character:symbol, Experience:symbol)\nHas_experience(\"Hanuman\", \"orgasm\").\n\n.decl Answer()\nAnswer() :- Is_character(\"Hanuman\"), Has_experience(\"Hanuman\", \"orgasm\").\n.output Answer", "completions": [".decl Is_character(Character:symbol)\nIs_character(\"Hanuman\").\n\n.decl Has_experience(Character:symbol, Experience:symbol)\nHas_experience(\"Hanuman\", \"orgasm\").\n\n.decl Answer()\nAnswer() :- Is_character(\"Hanuman\"), Has_experience(\"Hanuman\", \"orgasm\").\n.output Answer"]}
{"id": 978, "answer": false, "completion": ".decl Has_form(Object:symbol, Form:symbol)\nHas_form(\"onion\", \"layers\").\nHas_form(\"tree\", \"rings\").\n.decl Answer()\nAnswer() :- Has_form(\"onion\", form1), Has_form(\"tree\", form2), form1 = form2.\n.output Answer", "completions": [".decl Has_form(Object:symbol, Form:symbol)\nHas_form(\"onion\", \"layers\").\nHas_form(\"tree\", \"rings\").\n.decl Answer()\nAnswer() :- Has_form(\"onion\", form1), Has_form(\"tree\", form2), form1 = form2.\n.output Answer"]}
{"id": 979, "answer": true, "completion": ".decl Is_related(Company_A:symbol, Company_B:symbol)\nIs_related(\"LinkedIn\", \"Microsoft\").\nIs_related(\"LeafedIn\", \"LeafedOut\").\n.decl Answer()\nAnswer() :- Is_related(\"LinkedIn\", \"LeafedIn\").\nAnswer() :- Is_related(\"LinkedIn\", company1), Is_related(\"LeafedIn\", company2), Is_related(company1, company2).\n.output Answer", "completions": [".decl Is_related(Company_A:symbol, Company_B:symbol)\nIs_related(\"LinkedIn\", \"Microsoft\").\nIs_related(\"LeafedIn\", \"LeafedOut\").\n.decl Answer()\nAnswer() :- Is_related(\"LinkedIn\", \"LeafedIn\").\nAnswer() :- Is_related(\"LinkedIn\", company1), Is_related(\"LeafedIn\", company2), Is_related(company1, company2).\n.output Answer"]}
{"id": 980, "answer": true, "completion": ".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"ocelot\", 22.4).\nHas_speed(\"kindergartner\", 6).\n.decl Answer()\nAnswer() :- Has_speed(\"ocelot\", speed1), Has_speed(\"kindergartner\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"ocelot\", 22.4).\nHas_speed(\"kindergartner\", 6).\n.decl Answer()\nAnswer() :- Has_speed(\"ocelot\", speed1), Has_speed(\"kindergartner\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 981, "answer": true, "completion": ".decl Has_population(Event:symbol, Population:symbol)\nHas_population(\"Warsaw Ghetto\", \"Jewish population\").\n.decl Has_technology(Technology:symbol, Time_period:symbol)\nHas_technology(\"cell phones\", \"21st century\").\n.decl Occurs_in_time(Event:symbol, Time_period:symbol)\nOccurs_in_time(\"Warsaw Ghetto\", \"1940-1943\").\n.decl Answer()\nAnswer() :- Has_population(\"Warsaw Ghetto\", population), Occurs_in_time(\"Warsaw Ghetto\", time_period1), Has_technology(\"cell phones\", time_period2), time_period1 = time_period2.\n.output Answer", "completions": [".decl Has_population(Event:symbol, Population:symbol)\nHas_population(\"Warsaw Ghetto\", \"Jewish population\").\n.decl Has_technology(Technology:symbol, Time_period:symbol)\nHas_technology(\"cell phones\", \"21st century\").\n.decl Occurs_in_time(Event:symbol, Time_period:symbol)\nOccurs_in_time(\"Warsaw Ghetto\", \"1940-1943\").\n.decl Answer()\nAnswer() :- Has_population(\"Warsaw Ghetto\", population), Occurs_in_time(\"Warsaw Ghetto\", time_period1), Has_technology(\"cell phones\", time_period2), time_period1 = time_period2.\n.output Answer"]}
{"id": 982, "answer": true, "completion": ".decl Is_in_galaxy(Object:symbol, Galaxy:symbol)\nIs_in_galaxy(\"Ganymede\", \"Milky Way\").\n.decl Answer()\nAnswer() :- Is_in_galaxy(\"Ganymede\", \"Milky Way\").\n.output Answer", "completions": [".decl Is_in_galaxy(Object:symbol, Galaxy:symbol)\nIs_in_galaxy(\"Ganymede\", \"Milky Way\").\n.decl Answer()\nAnswer() :- Is_in_galaxy(\"Ganymede\", \"Milky Way\").\n.output Answer"]}
{"id": 983, "answer": true, "completion": ".decl Represents(Object:symbol, Meaning:symbol)\nRepresents(\"snake and skull tattoo\", \"dark mark\").\nRepresents(\"dark mark\", \"evil\").\n.decl Symbolizes(Object:symbol, Symbolism:symbol)\nSymbolizes(\"good luck\", \"positive\").\n.decl Answer()\nAnswer() :- Represents(\"snake and skull tattoo\", meaning), Symbolizes(\"good luck\", symbolism), meaning = symbolism.\n.output Answer", "completions": [".decl Represents(Object:symbol, Meaning:symbol)\nRepresents(\"snake and skull tattoo\", \"dark mark\").\nRepresents(\"dark mark\", \"evil\").\n.decl Symbolizes(Object:symbol, Symbolism:symbol)\nSymbolizes(\"good luck\", \"positive\").\n.decl Answer()\nAnswer() :- Represents(\"snake and skull tattoo\", meaning), Symbolizes(\"good luck\", symbolism), meaning = symbolism.\n.output Answer"]}
{"id": 984, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Alan Alda\", 1936).\n.decl War_years(War:symbol, Start_year:float, End_year:float)\nWar_years(\"Vietnam War\", 1955, 1975).\n.decl Answer()\nAnswer() :- Born_in_year(\"Alan Alda\", birth_year), War_years(\"Vietnam War\", start_year, end_year), birth_year <= start_year, birth_year + 18 <= end_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Alan Alda\", 1936).\n.decl War_years(War:symbol, Start_year:float, End_year:float)\nWar_years(\"Vietnam War\", 1955, 1975).\n.decl Answer()\nAnswer() :- Born_in_year(\"Alan Alda\", birth_year), War_years(\"Vietnam War\", start_year, end_year), birth_year <= start_year, birth_year + 18 <= end_year.\n.output Answer"]}
{"id": 985, "answer": true, "completion": ".decl Has_title(Song:symbol, Title:symbol)\nHas_title(\"Van Morrison's most played song\", \"Brown Eyed Girl\").\n.decl Has_color_percentage(Color:symbol, Percentage:float)\nHas_color_percentage(\"brown eyes\", 0.79).\n.decl Answer()\nAnswer() :- Has_title(\"Van Morrison's most played song\", title), Has_color_percentage(title, percentage), percentage < 0.5.\n.output Answer", "completions": [".decl Has_title(Song:symbol, Title:symbol)\nHas_title(\"Van Morrison's most played song\", \"Brown Eyed Girl\").\n.decl Has_color_percentage(Color:symbol, Percentage:float)\nHas_color_percentage(\"brown eyes\", 0.79).\n.decl Answer()\nAnswer() :- Has_title(\"Van Morrison's most played song\", title), Has_color_percentage(title, percentage), percentage < 0.5.\n.output Answer"]}
{"id": 986, "answer": false, "completion": ".decl Collaborates(Artist_A:symbol, Artist_B:symbol)\nCollaborates(\"Snoop Dogg\", \"Tupac\").\nCollaborates(\"Snoop Dogg\", \"The Game\").\n.decl Is_gang_member(Artist:symbol, Gang:symbol)\nIs_gang_member(\"Snoop Dogg\", \"Crips\").\nIs_gang_member(\"Tupac\", \"Bloods\").\nIs_gang_member(\"The Game\", \"Bloods\").\n.decl Answer()\nAnswer() :- Collaborates(\"Snoop Dogg\", artist), Is_gang_member(\"Snoop Dogg\", gang1), Is_gang_member(artist, gang2), gang1 != gang2.\n.output Answer", "completions": [".decl Collaborates(Artist_A:symbol, Artist_B:symbol)\nCollaborates(\"Snoop Dogg\", \"Tupac\").\nCollaborates(\"Snoop Dogg\", \"The Game\").\n.decl Is_gang_member(Artist:symbol, Gang:symbol)\nIs_gang_member(\"Snoop Dogg\", \"Crips\").\nIs_gang_member(\"Tupac\", \"Bloods\").\nIs_gang_member(\"The Game\", \"Bloods\").\n.decl Answer()\nAnswer() :- Collaborates(\"Snoop Dogg\", artist), Is_gang_member(\"Snoop Dogg\", gang1), Is_gang_member(artist, gang2), gang1 != gang2.\n.output Answer"]}
{"id": 987, "answer": true, "completion": ".decl Is_play(Play:symbol, Author:symbol)\nIs_play(\"Othello\", \"Shakespeare\").\nIs_play(\"Hamlet\", \"Shakespeare\").\nIs_play(\"Macbeth\", \"Shakespeare\").\nIs_play(\"Romeo and Juliet\", \"Shakespeare\").\nIs_play(\"King Lear\", \"Shakespeare\").\nIs_play(\"A Midsummer Night's Dream\", \"Shakespeare\").\nIs_play(\"The Merchant of Venice\", \"Shakespeare\").\nIs_play(\"Much Ado About Nothing\", \"Shakespeare\").\nIs_play(\"As You Like It\", \"Shakespeare\").\nIs_play(\"Twelfth Night\", \"Shakespeare\").\n\n.decl Has_duration(Play:symbol, Duration:float)\nHas_duration(\"Othello\", 3).\nHas_duration(\"Hamlet\", 4).\nHas_duration(\"Macbeth\", 2.5).\nHas_duration(\"Romeo and Juliet\", 2.75).\nHas_duration(\"King Lear\", 3.5).\nHas_duration(\"A Midsummer Night's Dream\", 2.25).\nHas_duration(\"The Merchant of Venice\", 2.5).\nHas_duration(\"Much Ado About Nothing\", 2.5).\nHas_duration(\"As You Like It\", 2.5).\nHas_duration(\"Twelfth Night\", 2.5).\n\n.decl Longest_play(Play:symbol)\nLongest_play(play) :- Is_play(play, \"Shakespeare\"), Has_duration(play, duration), !Has_duration(play2, duration2), duration2 > duration, Is_play(play2, \"Shakespeare\").\n\n.decl Answer()\nAnswer() :- Longest_play(\"Othello\").\n.output Answer", "completions": [".decl Is_play(Play:symbol, Author:symbol)\nIs_play(\"Othello\", \"Shakespeare\").\nIs_play(\"Hamlet\", \"Shakespeare\").\nIs_play(\"Macbeth\", \"Shakespeare\").\nIs_play(\"Romeo and Juliet\", \"Shakespeare\").\nIs_play(\"King Lear\", \"Shakespeare\").\nIs_play(\"A Midsummer Night's Dream\", \"Shakespeare\").\nIs_play(\"The Merchant of Venice\", \"Shakespeare\").\nIs_play(\"Much Ado About Nothing\", \"Shakespeare\").\nIs_play(\"As You Like It\", \"Shakespeare\").\nIs_play(\"Twelfth Night\", \"Shakespeare\").\n\n.decl Has_duration(Play:symbol, Duration:float)\nHas_duration(\"Othello\", 3).\nHas_duration(\"Hamlet\", 4).\nHas_duration(\"Macbeth\", 2.5).\nHas_duration(\"Romeo and Juliet\", 2.75).\nHas_duration(\"King Lear\", 3.5).\nHas_duration(\"A Midsummer Night's Dream\", 2.25).\nHas_duration(\"The Merchant of Venice\", 2.5).\nHas_duration(\"Much Ado About Nothing\", 2.5).\nHas_duration(\"As You Like It\", 2.5).\nHas_duration(\"Twelfth Night\", 2.5).\n\n.decl Longest_play(Play:symbol)\nLongest_play(play) :- Is_play(play, \"Shakespeare\"), Has_duration(play, duration), !Has_duration(play2, duration2), duration2 > duration, Is_play(play2, \"Shakespeare\").\n\n.decl Answer()\nAnswer() :- Longest_play(\"Othello\").\n.output Answer"]}
{"id": 988, "answer": true, "completion": ".decl Has_difficulty_level(Animal:symbol, Difficulty_level:symbol)\nHas_difficulty_level(\"goldfish\", \"moderate\").\nHas_difficulty_level(\"isopod\", \"easy\").\n.decl Difficulty_rank(Difficulty_level:symbol, Rank:float)\nDifficulty_rank(\"easy\", 1).\nDifficulty_rank(\"moderate\", 2).\nDifficulty_rank(\"hard\", 3).\n.decl Answer()\nAnswer() :- Has_difficulty_level(\"goldfish\", difficulty1), Has_difficulty_level(\"isopod\", difficulty2), Difficulty_rank(difficulty1, rank1), Difficulty_rank(difficulty2, rank2), rank1 > rank2.\n.output Answer", "completions": [".decl Has_difficulty_level(Animal:symbol, Difficulty_level:symbol)\nHas_difficulty_level(\"goldfish\", \"moderate\").\nHas_difficulty_level(\"isopod\", \"easy\").\n.decl Difficulty_rank(Difficulty_level:symbol, Rank:float)\nDifficulty_rank(\"easy\", 1).\nDifficulty_rank(\"moderate\", 2).\nDifficulty_rank(\"hard\", 3).\n.decl Answer()\nAnswer() :- Has_difficulty_level(\"goldfish\", difficulty1), Has_difficulty_level(\"isopod\", difficulty2), Difficulty_rank(difficulty1, rank1), Difficulty_rank(difficulty2, rank2), rank1 > rank2.\n.output Answer"]}
{"id": 989, "answer": true, "completion": ".decl Made_profit(Movie:symbol)\nMade_profit(\"Easy Rider\").\n.decl Released_in_theater(Movie:symbol)\nReleased_in_theater(\"Easy Rider\").\n.decl Answer()\nAnswer() :- Made_profit(\"Easy Rider\"), Released_in_theater(\"Easy Rider\").\n.output Answer", "completions": [".decl Made_profit(Movie:symbol)\nMade_profit(\"Easy Rider\").\n.decl Released_in_theater(Movie:symbol)\nReleased_in_theater(\"Easy Rider\").\n.decl Answer()\nAnswer() :- Made_profit(\"Easy Rider\"), Released_in_theater(\"Easy Rider\").\n.output Answer"]}
{"id": 990, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Katharine Hepburn\", 1907).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Katharine Hepburn\", 2003).\n.decl Operates_in_years(Transport:symbol, Start_year:float, End_year:float)\nOperates_in_years(\"AirTrain JFK\", 2003, 9999).\n.decl Answer()\nAnswer() :- Born_in_year(\"Katharine Hepburn\", birth_year), Died_in_year(\"Katharine Hepburn\", death_year), Operates_in_years(\"AirTrain JFK\", start_year, end_year), death_year >= start_year, birth_year <= end_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Katharine Hepburn\", 1907).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Katharine Hepburn\", 2003).\n.decl Operates_in_years(Transport:symbol, Start_year:float, End_year:float)\nOperates_in_years(\"AirTrain JFK\", 2003, 9999).\n.decl Answer()\nAnswer() :- Born_in_year(\"Katharine Hepburn\", birth_year), Died_in_year(\"Katharine Hepburn\", death_year), Operates_in_years(\"AirTrain JFK\", start_year, end_year), death_year >= start_year, birth_year <= end_year.\n.output Answer"]}
{"id": 991, "answer": false, "completion": ".decl Has_salary(Role:symbol, Salary:float)\nHas_salary(\"high school head coach\", 60000).\nHas_salary(\"Head Coach at NCSU\", 3000000).\n.decl Answer()\nAnswer() :- Has_salary(\"high school head coach\", salary1), Has_salary(\"Head Coach at NCSU\", salary2), salary1 >= salary2.\n.output Answer", "completions": [".decl Has_salary(Role:symbol, Salary:float)\nHas_salary(\"high school head coach\", 60000).\nHas_salary(\"Head Coach at NCSU\", 3000000).\n.decl Answer()\nAnswer() :- Has_salary(\"high school head coach\", salary1), Has_salary(\"Head Coach at NCSU\", salary2), salary1 >= salary2.\n.output Answer"]}
{"id": 992, "answer": true, "completion": ".decl Has_rotations(Garbage_patch:symbol, Rotations:float)\nHas_rotations(\"Indian Ocean garbage patch\", 1.5).\n.decl Discovered(Garbage_patch:symbol, Year:float)\nDiscovered(\"Indian Ocean garbage patch\", 2010).\n.decl Current_year(Year:float)\nCurrent_year(2022).\n.decl Answer()\nAnswer() :- Has_rotations(\"Indian Ocean garbage patch\", rotations), Discovered(\"Indian Ocean garbage patch\", discovery_year), Current_year(current_year), rotations < 2, current_year > discovery_year.\n.output Answer", "completions": [".decl Has_rotations(Garbage_patch:symbol, Rotations:float)\nHas_rotations(\"Indian Ocean garbage patch\", 1.5).\n.decl Discovered(Garbage_patch:symbol, Year:float)\nDiscovered(\"Indian Ocean garbage patch\", 2010).\n.decl Current_year(Year:float)\nCurrent_year(2022).\n.decl Answer()\nAnswer() :- Has_rotations(\"Indian Ocean garbage patch\", rotations), Discovered(\"Indian Ocean garbage patch\", discovery_year), Current_year(current_year), rotations < 2, current_year > discovery_year.\n.output Answer"]}
{"id": 993, "answer": true, "completion": ".decl Is_soldier(Person:symbol, Organization:symbol)\nIs_soldier(\"child\", \"US Army\").\n.decl Has_age_requirement(Organization:symbol, Min_age:float)\nHas_age_requirement(\"US Army\", 17).\n.decl Is_child(Person:symbol, Age:float)\nIs_child(\"child\", 12).\n.decl Answer()\nAnswer() :- Is_soldier(\"child\", \"US Army\"), Is_child(\"child\", age), Has_age_requirement(\"US Army\", min_age), age >= min_age.\n.output Answer", "completions": [".decl Is_soldier(Person:symbol, Organization:symbol)\nIs_soldier(\"child\", \"US Army\").\n.decl Has_age_requirement(Organization:symbol, Min_age:float)\nHas_age_requirement(\"US Army\", 17).\n.decl Is_child(Person:symbol, Age:float)\nIs_child(\"child\", 12).\n.decl Answer()\nAnswer() :- Is_soldier(\"child\", \"US Army\"), Is_child(\"child\", age), Has_age_requirement(\"US Army\", min_age), age >= min_age.\n.output Answer"]}
{"id": 994, "answer": true, "completion": ".decl Is_customer(Person:symbol, Company:symbol)\nIs_customer(\"you\", \"T-Mobile\").\n.decl Can_use_app(Person:symbol, App:symbol)\nCan_use_app(\"T-Mobile customer\", \"T-Mobile Tuesdays app\").\n.decl Answer()\nAnswer() :- Can_use_app(\"you\", \"T-Mobile Tuesdays app\").\nAnswer() :- !Is_customer(\"you\", \"T-Mobile\"), !Can_use_app(\"you\", \"T-Mobile Tuesdays app\").\n.output Answer", "completions": [".decl Is_customer(Person:symbol, Company:symbol)\nIs_customer(\"you\", \"T-Mobile\").\n.decl Can_use_app(Person:symbol, App:symbol)\nCan_use_app(\"T-Mobile customer\", \"T-Mobile Tuesdays app\").\n.decl Answer()\nAnswer() :- Can_use_app(\"you\", \"T-Mobile Tuesdays app\").\nAnswer() :- !Is_customer(\"you\", \"T-Mobile\"), !Can_use_app(\"you\", \"T-Mobile Tuesdays app\").\n.output Answer"]}
{"id": 995, "answer": true, "completion": ".decl Named_after_saint(Title:symbol, Saint:symbol)\nNamed_after_saint(\"A Christmas Carol\", \"Saint Nicholas\").\nNamed_after_saint(\"A Christmas Carol\", \"Saint Wenceslaus\").\n.decl Answer()\nAnswer() :- Named_after_saint(\"A Christmas Carol\", saint1), Named_after_saint(\"A Christmas Carol\", saint2), saint1 != saint2.\n.output Answer", "completions": [".decl Named_after_saint(Title:symbol, Saint:symbol)\nNamed_after_saint(\"A Christmas Carol\", \"Saint Nicholas\").\nNamed_after_saint(\"A Christmas Carol\", \"Saint Wenceslaus\").\n.decl Answer()\nAnswer() :- Named_after_saint(\"A Christmas Carol\", saint1), Named_after_saint(\"A Christmas Carol\", saint2), saint1 != saint2.\n.output Answer"]}
{"id": 996, "answer": false, "completion": ".decl Supports(Person:symbol, Action:symbol)\nSupports(\"George Fox\", \"pacifism\").\n.decl Is_violent(Action:symbol)\nIs_violent(\"stoning\").\n.decl Answer()\nAnswer() :- Supports(\"George Fox\", \"pacifism\"), !Supports(\"George Fox\", \"stoning\").\nAnswer() :- Supports(\"George Fox\", action), Is_violent(action), !Supports(\"George Fox\", \"stoning\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Action:symbol)\nSupports(\"George Fox\", \"pacifism\").\n.decl Is_violent(Action:symbol)\nIs_violent(\"stoning\").\n.decl Answer()\nAnswer() :- Supports(\"George Fox\", \"pacifism\"), !Supports(\"George Fox\", \"stoning\").\nAnswer() :- Supports(\"George Fox\", action), Is_violent(action), !Supports(\"George Fox\", \"stoning\").\n.output Answer"]}
{"id": 997, "answer": true, "completion": ".decl Is_lullaby(Song:symbol, Date:symbol)\nIs_lullaby(\"Love Song\", \"November 11, 2000\").\n.decl Is_inappropriate_lullaby(Song:symbol)\nIs_inappropriate_lullaby(\"Love Song\").\n.decl Answer()\nAnswer() :- Is_lullaby(song, \"November 11, 2000\"), Is_inappropriate_lullaby(song).\n.output Answer", "completions": [".decl Is_lullaby(Song:symbol, Date:symbol)\nIs_lullaby(\"Love Song\", \"November 11, 2000\").\n.decl Is_inappropriate_lullaby(Song:symbol)\nIs_inappropriate_lullaby(\"Love Song\").\n.decl Answer()\nAnswer() :- Is_lullaby(song, \"November 11, 2000\"), Is_inappropriate_lullaby(song).\n.output Answer"]}
{"id": 998, "answer": true, "completion": ".decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(\"Lionel Richie\", \"Nicole Richie\").\nIs_related(\"Sheila E\", \"Pete Escovedo\").\n.decl Answer()\nAnswer() :- Is_related(\"Lionel Richie\", \"Sheila E\").\nAnswer() :- Is_related(\"Lionel Richie\", person1), Is_related(\"Sheila E\", person2), person1 = person2.\n.output Answer", "completions": [".decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(\"Lionel Richie\", \"Nicole Richie\").\nIs_related(\"Sheila E\", \"Pete Escovedo\").\n.decl Answer()\nAnswer() :- Is_related(\"Lionel Richie\", \"Sheila E\").\nAnswer() :- Is_related(\"Lionel Richie\", person1), Is_related(\"Sheila E\", person2), person1 = person2.\n.output Answer"]}
{"id": 999, "answer": true, "completion": ".decl Is_air_force(Organization:symbol, Country:symbol)\nIs_air_force(\"Royal Air Force\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Is_air_force(\"British Airways\", \"United Kingdom\").\n.output Answer", "completions": [".decl Is_air_force(Organization:symbol, Country:symbol)\nIs_air_force(\"Royal Air Force\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Is_air_force(\"British Airways\", \"United Kingdom\").\n.output Answer"]}
{"id": 1000, "answer": true, "completion": ".decl Phrase_used(Fan_group:symbol, Phrase:symbol)\nPhrase_used(\"Star Wars fans\", \"May the Force be with you\").\nPhrase_used(\"Star Trek fans\", \"Beam me up\").\n.decl Answer()\nAnswer() :- Phrase_used(\"Star Wars fans\", \"Beam me up\").\n.output Answer", "completions": [".decl Phrase_used(Fan_group:symbol, Phrase:symbol)\nPhrase_used(\"Star Wars fans\", \"May the Force be with you\").\nPhrase_used(\"Star Trek fans\", \"Beam me up\").\n.decl Answer()\nAnswer() :- Phrase_used(\"Star Wars fans\", \"Beam me up\").\n.output Answer"]}
{"id": 1001, "answer": true, "completion": ".decl Requires_internet(Device:symbol, Essential:float)\nRequires_internet(\"Chrome OS\", 1).\n.decl Answer()\nAnswer() :- Requires_internet(\"Chrome OS\", essential), essential = 1.\n.output Answer", "completions": [".decl Requires_internet(Device:symbol, Essential:float)\nRequires_internet(\"Chrome OS\", 1).\n.decl Answer()\nAnswer() :- Requires_internet(\"Chrome OS\", essential), essential = 1.\n.output Answer"]}
{"id": 1002, "answer": true, "completion": ".decl Has_revenue(Movie:symbol, Revenue:float)\nHas_revenue(\"Harry Potter\", 7700000000).\nHas_revenue(\"The Matrix\", 1700000000).\n.decl Has_cost(Movie:symbol, Cost:float)\nHas_cost(\"Harry Potter\", 1250000000).\nHas_cost(\"The Matrix\", 363000000).\n.decl Has_profit(Movie:symbol, Profit:float)\nHas_profit(movie, profit) :- Has_revenue(movie, revenue), Has_cost(movie, cost), profit = revenue - cost.\n.decl Answer()\nAnswer() :- Has_profit(\"Harry Potter\", profit1), Has_profit(\"The Matrix\", profit2), profit1 > profit2.\n.output Answer", "completions": [".decl Has_revenue(Movie:symbol, Revenue:float)\nHas_revenue(\"Harry Potter\", 7700000000).\nHas_revenue(\"The Matrix\", 1700000000).\n.decl Has_cost(Movie:symbol, Cost:float)\nHas_cost(\"Harry Potter\", 1250000000).\nHas_cost(\"The Matrix\", 363000000).\n.decl Has_profit(Movie:symbol, Profit:float)\nHas_profit(movie, profit) :- Has_revenue(movie, revenue), Has_cost(movie, cost), profit = revenue - cost.\n.decl Answer()\nAnswer() :- Has_profit(\"Harry Potter\", profit1), Has_profit(\"The Matrix\", profit2), profit1 > profit2.\n.output Answer"]}
{"id": 1003, "answer": false, "completion": ".decl Has_requirements(Job:symbol, Requirement:symbol)\nHas_requirements(\"retail\", \"customer service skills\").\nHas_requirements(\"retail\", \"communication skills\").\nHas_requirements(\"retail\", \"patience\").\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"anybody\", \"customer service skills\").\nHas_skill(\"anybody\", \"communication skills\").\nHas_skill(\"anybody\", \"patience\").\n.decl Suited_for_job(Person:symbol, Job:symbol)\nSuited_for_job(person, job) :- Has_requirements(job, requirement), Has_skill(person, requirement).\n.decl Answer()\nAnswer() :- Suited_for_job(\"anybody\", \"retail\").\n.output Answer", "completions": [".decl Has_requirements(Job:symbol, Requirement:symbol)\nHas_requirements(\"retail\", \"customer service skills\").\nHas_requirements(\"retail\", \"communication skills\").\nHas_requirements(\"retail\", \"patience\").\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"anybody\", \"customer service skills\").\nHas_skill(\"anybody\", \"communication skills\").\nHas_skill(\"anybody\", \"patience\").\n.decl Suited_for_job(Person:symbol, Job:symbol)\nSuited_for_job(person, job) :- Has_requirements(job, requirement), Has_skill(person, requirement).\n.decl Answer()\nAnswer() :- Suited_for_job(\"anybody\", \"retail\").\n.output Answer"]}
{"id": 1004, "answer": true, "completion": ".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"paleo dieter\", \"paleo\").\n.decl Diet_restricts(Diet:symbol, Food:symbol)\nDiet_restricts(\"paleo\", \"artificial food coloring\").\n.decl Colors_beverage_green(Event:symbol, Ingredient:symbol)\nColors_beverage_green(\"St. Patrick's Day\", \"artificial food coloring\").\n.decl Answer()\nAnswer() :- Follows_diet(person, \"paleo\"), Diet_restricts(\"paleo\", restricted_ingredient), Colors_beverage_green(\"St. Patrick's Day\", restricted_ingredient).\n.output Answer", "completions": [".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"paleo dieter\", \"paleo\").\n.decl Diet_restricts(Diet:symbol, Food:symbol)\nDiet_restricts(\"paleo\", \"artificial food coloring\").\n.decl Colors_beverage_green(Event:symbol, Ingredient:symbol)\nColors_beverage_green(\"St. Patrick's Day\", \"artificial food coloring\").\n.decl Answer()\nAnswer() :- Follows_diet(person, \"paleo\"), Diet_restricts(\"paleo\", restricted_ingredient), Colors_beverage_green(\"St. Patrick's Day\", restricted_ingredient).\n.output Answer"]}
{"id": 1005, "answer": false, "completion": ".decl Has_double_triangle_flag(Country:symbol)\nHas_double_triangle_flag(\"Nepal\").\n\n.decl Recognized_by_NATO(Country:symbol)\nRecognized_by_NATO(\"Nepal\").\n\n.decl Answer()\nAnswer() :- Has_double_triangle_flag(country), !Recognized_by_NATO(country).\n.output Answer", "completions": [".decl Has_double_triangle_flag(Country:symbol)\nHas_double_triangle_flag(\"Nepal\").\n\n.decl Recognized_by_NATO(Country:symbol)\nRecognized_by_NATO(\"Nepal\").\n\n.decl Answer()\nAnswer() :- Has_double_triangle_flag(country), !Recognized_by_NATO(country).\n.output Answer"]}
{"id": 1006, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Saddam Hussein\", 1937).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Saddam Hussein\", 2006).\n.decl Inauguration_year(President:symbol, Year:float)\nInauguration_year(\"Donald Trump\", 2017).\n.decl Answer()\nAnswer() :- Born_in_year(\"Saddam Hussein\", birth_year), Died_in_year(\"Saddam Hussein\", death_year), Inauguration_year(\"Donald Trump\", inauguration_year), birth_year <= inauguration_year, death_year >= inauguration_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Saddam Hussein\", 1937).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Saddam Hussein\", 2006).\n.decl Inauguration_year(President:symbol, Year:float)\nInauguration_year(\"Donald Trump\", 2017).\n.decl Answer()\nAnswer() :- Born_in_year(\"Saddam Hussein\", birth_year), Died_in_year(\"Saddam Hussein\", death_year), Inauguration_year(\"Donald Trump\", inauguration_year), birth_year <= inauguration_year, death_year >= inauguration_year.\n.output Answer"]}
{"id": 1007, "answer": true, "completion": ".decl Had_improperly_functioning_organ(Person:symbol, Organ:symbol)\nHad_improperly_functioning_organ(\"Alan Rickman\", \"pancreas\").\n.decl Answer()\nAnswer() :- Had_improperly_functioning_organ(\"Alan Rickman\", organ).\n.output Answer", "completions": [".decl Had_improperly_functioning_organ(Person:symbol, Organ:symbol)\nHad_improperly_functioning_organ(\"Alan Rickman\", \"pancreas\").\n.decl Answer()\nAnswer() :- Had_improperly_functioning_organ(\"Alan Rickman\", organ).\n.output Answer"]}
{"id": 1008, "answer": false, "completion": ".decl Treated_ethically(University:symbol, Time_period:symbol)\nTreated_ethically(\"Johns Hopkins University\", \"before 1970\").\nTreated_ethically(\"Johns Hopkins University\", \"after 1970\").\n.decl Always_treated_ethically(University:symbol)\nAlways_treated_ethically(\"Johns Hopkins University\") :- Treated_ethically(\"Johns Hopkins University\", \"before 1970\"), Treated_ethically(\"Johns Hopkins University\", \"after 1970\").\n.decl Answer()\nAnswer() :- Always_treated_ethically(\"Johns Hopkins University\").\n.output Answer", "completions": [".decl Treated_ethically(University:symbol, Time_period:symbol)\nTreated_ethically(\"Johns Hopkins University\", \"before 1970\").\nTreated_ethically(\"Johns Hopkins University\", \"after 1970\").\n.decl Always_treated_ethically(University:symbol)\nAlways_treated_ethically(\"Johns Hopkins University\") :- Treated_ethically(\"Johns Hopkins University\", \"before 1970\"), Treated_ethically(\"Johns Hopkins University\", \"after 1970\").\n.decl Answer()\nAnswer() :- Always_treated_ethically(\"Johns Hopkins University\").\n.output Answer"]}
{"id": 1009, "answer": true, "completion": ".decl Has_acceptance_rate(Organization:symbol, Acceptance_rate:float)\nHas_acceptance_rate(\"University of Pittsburgh\", 59).\nHas_acceptance_rate(\"FBI\", 5).\n.decl Answer()\nAnswer() :- Has_acceptance_rate(\"University of Pittsburgh\", rate1), Has_acceptance_rate(\"FBI\", rate2), rate1 > rate2.\n.output Answer", "completions": [".decl Has_acceptance_rate(Organization:symbol, Acceptance_rate:float)\nHas_acceptance_rate(\"University of Pittsburgh\", 59).\nHas_acceptance_rate(\"FBI\", 5).\n.decl Answer()\nAnswer() :- Has_acceptance_rate(\"University of Pittsburgh\", rate1), Has_acceptance_rate(\"FBI\", rate2), rate1 > rate2.\n.output Answer"]}
{"id": 1010, "answer": false, "completion": ".decl Is_member(Person:symbol, Group:symbol)\nIs_member(\"Aristotle\", \"Greek philosophers\").\n.decl Answer()\nAnswer() :- Is_member(\"Aristotle\", \"House of Lords\").\n.output Answer", "completions": [".decl Is_member(Person:symbol, Group:symbol)\nIs_member(\"Aristotle\", \"Greek philosophers\").\n.decl Answer()\nAnswer() :- Is_member(\"Aristotle\", \"House of Lords\").\n.output Answer"]}
{"id": 1011, "answer": false, "completion": ".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"someone\", \"Uberlandia\").\n.decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"someone\", \"Mitsubishi\").\n.decl Answer()\nAnswer() :- Lives_in(\"someone\", \"Uberlandia\"), Works_for(\"someone\", \"Mitsubishi\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"someone\", \"Uberlandia\").\n.decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"someone\", \"Mitsubishi\").\n.decl Answer()\nAnswer() :- Lives_in(\"someone\", \"Uberlandia\"), Works_for(\"someone\", \"Mitsubishi\").\n.output Answer"]}
{"id": 1012, "answer": true, "completion": ".decl Is_species(Species:symbol)\nIs_species(\"Wolverine\").\nIs_species(\"Lynx\").\n\n.decl Has_size(Species:symbol, Size:symbol)\nHas_size(\"Wolverine\", \"medium\").\nHas_size(\"Lynx\", \"medium\").\n\n.decl Has_color(Species:symbol, Color:symbol)\nHas_color(\"Wolverine\", \"brown\").\nHas_color(\"Lynx\", \"brown\").\n\n.decl Has_distinctive_feature(Species:symbol, Feature:symbol)\nHas_distinctive_feature(\"Wolverine\", \"strong jaws\").\nHas_distinctive_feature(\"Lynx\", \"tufted ears\").\n\n.decl Answer()\nAnswer() :- Is_species(species1), Is_species(species2), species1 != species2, Has_size(species1, size), Has_size(species2, size), Has_color(species1, color), Has_color(species2, color), !Has_distinctive_feature(species1, feature1), !Has_distinctive_feature(species2, feature2), feature1 != feature2.\n.output Answer", "completions": [".decl Is_species(Species:symbol)\nIs_species(\"Wolverine\").\nIs_species(\"Lynx\").\n\n.decl Has_size(Species:symbol, Size:symbol)\nHas_size(\"Wolverine\", \"medium\").\nHas_size(\"Lynx\", \"medium\").\n\n.decl Has_color(Species:symbol, Color:symbol)\nHas_color(\"Wolverine\", \"brown\").\nHas_color(\"Lynx\", \"brown\").\n\n.decl Has_distinctive_feature(Species:symbol, Feature:symbol)\nHas_distinctive_feature(\"Wolverine\", \"strong jaws\").\nHas_distinctive_feature(\"Lynx\", \"tufted ears\").\n\n.decl Answer()\nAnswer() :- Is_species(species1), Is_species(species2), species1 != species2, Has_size(species1, size), Has_size(species2, size), Has_color(species1, color), Has_color(species2, color), !Has_distinctive_feature(species1, feature1), !Has_distinctive_feature(species2, feature2), feature1 != feature2.\n.output Answer"]}
{"id": 1013, "answer": true, "completion": ".decl Has_speed(Transport:symbol, Speed:float)\nHas_speed(\"Amtrak's Acela Express\", 150).\nHas_speed(\"sound barrier\", 767).\n.decl Answer()\nAnswer() :- Has_speed(\"Amtrak's Acela Express\", speed1), Has_speed(\"sound barrier\", speed2), speed1 >= speed2.\n.output Answer", "completions": [".decl Has_speed(Transport:symbol, Speed:float)\nHas_speed(\"Amtrak's Acela Express\", 150).\nHas_speed(\"sound barrier\", 767).\n.decl Answer()\nAnswer() :- Has_speed(\"Amtrak's Acela Express\", speed1), Has_speed(\"sound barrier\", speed2), speed1 >= speed2.\n.output Answer"]}
{"id": 1014, "answer": true, "completion": ".decl Has_transmission_route(Disease:symbol, Route:symbol)\nHas_transmission_route(\"HIV\", \"blood\").\nHas_transmission_route(\"HIV\", \"semen\").\nHas_transmission_route(\"HIV\", \"vaginal fluids\").\nHas_transmission_route(\"HIV\", \"breast milk\").\n.decl Is_safe_to_share(Object:symbol, Disease:symbol)\nIs_safe_to_share(\"silverware\", \"HIV\").\n.decl Answer()\nAnswer() :- Is_safe_to_share(\"silverware\", \"HIV\").\n.output Answer", "completions": [".decl Has_transmission_route(Disease:symbol, Route:symbol)\nHas_transmission_route(\"HIV\", \"blood\").\nHas_transmission_route(\"HIV\", \"semen\").\nHas_transmission_route(\"HIV\", \"vaginal fluids\").\nHas_transmission_route(\"HIV\", \"breast milk\").\n.decl Is_safe_to_share(Object:symbol, Disease:symbol)\nIs_safe_to_share(\"silverware\", \"HIV\").\n.decl Answer()\nAnswer() :- Is_safe_to_share(\"silverware\", \"HIV\").\n.output Answer"]}
{"id": 1015, "answer": true, "completion": ".decl Has_worms(Species:symbol, Worm_type:symbol)\nHas_worms(\"dog\", \"heartworm\").\nHas_worms(\"strawberry\", \"fruitworm\").\n.decl Similar_worms(Worm_type1:symbol, Worm_type2:symbol)\nSimilar_worms(\"heartworm\", \"fruitworm\").\n.decl Answer()\nAnswer() :- Has_worms(\"strawberry\", worm_type1), Has_worms(\"dog\", worm_type2), Similar_worms(worm_type1, worm_type2).\n.output Answer", "completions": [".decl Has_worms(Species:symbol, Worm_type:symbol)\nHas_worms(\"dog\", \"heartworm\").\nHas_worms(\"strawberry\", \"fruitworm\").\n.decl Similar_worms(Worm_type1:symbol, Worm_type2:symbol)\nSimilar_worms(\"heartworm\", \"fruitworm\").\n.decl Answer()\nAnswer() :- Has_worms(\"strawberry\", worm_type1), Has_worms(\"dog\", worm_type2), Similar_worms(worm_type1, worm_type2).\n.output Answer"]}
{"id": 1016, "answer": true, "completion": ".decl Has_olfactory_quality(Object:symbol, Quality:symbol)\nHas_olfactory_quality(\"Durian fruit\", \"pungent\").\n.decl Is_olfactory_delight(Quality:symbol)\nIs_olfactory_delight(\"pleasant\").\n.decl Answer()\nAnswer() :- Has_olfactory_quality(\"Durian fruit\", quality), Is_olfactory_delight(quality).\n.output Answer", "completions": [".decl Has_olfactory_quality(Object:symbol, Quality:symbol)\nHas_olfactory_quality(\"Durian fruit\", \"pungent\").\n.decl Is_olfactory_delight(Quality:symbol)\nIs_olfactory_delight(\"pleasant\").\n.decl Answer()\nAnswer() :- Has_olfactory_quality(\"Durian fruit\", quality), Is_olfactory_delight(quality).\n.output Answer"]}
{"id": 1017, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Gorillaz\", 4).\n.decl Has_virtual_members(Group:symbol, N_virtual_members:float)\nHas_virtual_members(\"Gorillaz\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"Gorillaz\", n_members), Has_virtual_members(\"Gorillaz\", n_virtual_members), n_virtual_members > n_members.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Gorillaz\", 4).\n.decl Has_virtual_members(Group:symbol, N_virtual_members:float)\nHas_virtual_members(\"Gorillaz\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"Gorillaz\", n_members), Has_virtual_members(\"Gorillaz\", n_virtual_members), n_virtual_members > n_members.\n.output Answer"]}
{"id": 1018, "answer": true, "completion": ".decl Protects(Amendment:symbol, Right:symbol)\nProtects(\"First Amendment\", \"freedom of speech\").\nProtects(\"Eighth Amendment\", \"prohibition of cruel and unusual punishment\").\n.decl Answer()\nAnswer() :- Protects(\"Eighth Amendment\", \"freedom of speech\").\n.output Answer", "completions": [".decl Protects(Amendment:symbol, Right:symbol)\nProtects(\"First Amendment\", \"freedom of speech\").\nProtects(\"Eighth Amendment\", \"prohibition of cruel and unusual punishment\").\n.decl Answer()\nAnswer() :- Protects(\"Eighth Amendment\", \"freedom of speech\").\n.output Answer"]}
{"id": 1019, "answer": false, "completion": ".decl Composed_theme_songs(Composer:symbol, TV_series:symbol)\nComposed_theme_songs(\"Richard Wagner\", \"TV_series_1\").\nComposed_theme_songs(\"Richard Wagner\", \"TV_series_2\").\n.decl Answer()\nAnswer() :- Composed_theme_songs(\"Richard Wagner\", tv_series1), Composed_theme_songs(\"Richard Wagner\", tv_series2), tv_series1 != tv_series2.\n.output Answer", "completions": [".decl Composed_theme_songs(Composer:symbol, TV_series:symbol)\nComposed_theme_songs(\"Richard Wagner\", \"TV_series_1\").\nComposed_theme_songs(\"Richard Wagner\", \"TV_series_2\").\n.decl Answer()\nAnswer() :- Composed_theme_songs(\"Richard Wagner\", tv_series1), Composed_theme_songs(\"Richard Wagner\", tv_series2), tv_series1 != tv_series2.\n.output Answer"]}
{"id": 1020, "answer": true, "completion": ".decl Has_musical_passion(Person:symbol, Musical_passion:symbol)\nHas_musical_passion(\"Squidward Tentacles\", \"clarinet\").\nHas_musical_passion(\"Alan Greenspan\", \"saxophone\").\n.decl Answer()\nAnswer() :- Has_musical_passion(\"Squidward Tentacles\", passion1), Has_musical_passion(\"Alan Greenspan\", passion2), passion1 != passion2.\n.output Answer", "completions": [".decl Has_musical_passion(Person:symbol, Musical_passion:symbol)\nHas_musical_passion(\"Squidward Tentacles\", \"clarinet\").\nHas_musical_passion(\"Alan Greenspan\", \"saxophone\").\n.decl Answer()\nAnswer() :- Has_musical_passion(\"Squidward Tentacles\", passion1), Has_musical_passion(\"Alan Greenspan\", passion2), passion1 != passion2.\n.output Answer"]}
{"id": 1021, "answer": true, "completion": ".decl Is_known_for(Object:symbol, Property:symbol)\nIs_known_for(\"Louvre's pyramid\", \"glass structure\").\nIs_known_for(\"Louvre's pyramid\", \"iconic design\").\n.decl Is_unbreakable(Object:symbol)\nIs_unbreakable(\"diamond\").\n.decl Answer()\nAnswer() :- Is_known_for(\"Louvre's pyramid\", \"unbreakable\").\nAnswer() :- Is_unbreakable(\"Louvre's pyramid\").\n.output Answer", "completions": [".decl Is_known_for(Object:symbol, Property:symbol)\nIs_known_for(\"Louvre's pyramid\", \"glass structure\").\nIs_known_for(\"Louvre's pyramid\", \"iconic design\").\n.decl Is_unbreakable(Object:symbol)\nIs_unbreakable(\"diamond\").\n.decl Answer()\nAnswer() :- Is_known_for(\"Louvre's pyramid\", \"unbreakable\").\nAnswer() :- Is_unbreakable(\"Louvre's pyramid\").\n.output Answer"]}
{"id": 1022, "answer": false, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Evander Holyfield\", \"chicken\").\nEats(\"Evander Holyfield\", \"fish\").\nEats(\"Evander Holyfield\", \"vegetables\").\n.decl Is_pork_product(Food:symbol)\nIs_pork_product(\"bacon\").\nIs_pork_product(\"ham\").\nIs_pork_product(\"pork chops\").\n.decl Answer()\nAnswer() :- Eats(\"Evander Holyfield\", food), Is_pork_product(food).\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Evander Holyfield\", \"chicken\").\nEats(\"Evander Holyfield\", \"fish\").\nEats(\"Evander Holyfield\", \"vegetables\").\n.decl Is_pork_product(Food:symbol)\nIs_pork_product(\"bacon\").\nIs_pork_product(\"ham\").\nIs_pork_product(\"pork chops\").\n.decl Answer()\nAnswer() :- Eats(\"Evander Holyfield\", food), Is_pork_product(food).\n.output Answer"]}
{"id": 1023, "answer": true, "completion": ".decl Involved(Country:symbol, Conflict:symbol)\nInvolved(\"England\", \"World War I\").\nInvolved(\"England\", \"World War II\").\nInvolved(\"Israel\", \"Arab-Israeli conflict\").\nInvolved(\"Arab countries\", \"Arab-Israeli conflict\").\n.decl Answer()\nAnswer() :- Involved(\"England\", \"Arab-Israeli conflict\").\n.output Answer", "completions": [".decl Involved(Country:symbol, Conflict:symbol)\nInvolved(\"England\", \"World War I\").\nInvolved(\"England\", \"World War II\").\nInvolved(\"Israel\", \"Arab-Israeli conflict\").\nInvolved(\"Arab countries\", \"Arab-Israeli conflict\").\n.decl Answer()\nAnswer() :- Involved(\"England\", \"Arab-Israeli conflict\").\n.output Answer"]}
{"id": 1024, "answer": true, "completion": ".decl Has_difficulty_with(Condition:symbol, Task:symbol)\nHas_difficulty_with(\"Dyscalculia\", \"math\").\n.decl Task_required(Profession:symbol, Task:symbol)\nTask_required(\"accountant\", \"math\").\n.decl Answer()\nAnswer() :- Has_difficulty_with(\"Dyscalculia\", task), Task_required(\"accountant\", task).\n.output Answer", "completions": [".decl Has_difficulty_with(Condition:symbol, Task:symbol)\nHas_difficulty_with(\"Dyscalculia\", \"math\").\n.decl Task_required(Profession:symbol, Task:symbol)\nTask_required(\"accountant\", \"math\").\n.decl Answer()\nAnswer() :- Has_difficulty_with(\"Dyscalculia\", task), Task_required(\"accountant\", task).\n.output Answer"]}
{"id": 1025, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Donatello\", 1386).\n.decl Invented_in_year(Object:symbol, Invention_year:float)\nInvented_in_year(\"smartphone\", 2007).\n.decl Answer()\nAnswer() :- Born_in_year(\"Donatello\", birth_year), Invented_in_year(\"smartphone\", invention_year), birth_year < invention_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Donatello\", 1386).\n.decl Invented_in_year(Object:symbol, Invention_year:float)\nInvented_in_year(\"smartphone\", 2007).\n.decl Answer()\nAnswer() :- Born_in_year(\"Donatello\", birth_year), Invented_in_year(\"smartphone\", invention_year), birth_year < invention_year.\n.output Answer"]}
{"id": 1026, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas\", \"December\").\nHappens_in_time(\"Groundhog Day\", \"February\").\n.decl Reminds_of(Event1:symbol, Event2:symbol)\nReminds_of(\"Christmas films\", \"Groundhog Day\").\n.decl In_month(Month:symbol, Event:symbol)\nIn_month(\"December\", \"Christmas\").\nIn_month(\"February\", \"Groundhog Day\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas\", month1), Happens_in_time(\"Groundhog Day\", month2), Reminds_of(\"Christmas films\", \"Groundhog Day\"), In_month(month1, \"Christmas\"), In_month(month2, \"Groundhog Day\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas\", \"December\").\nHappens_in_time(\"Groundhog Day\", \"February\").\n.decl Reminds_of(Event1:symbol, Event2:symbol)\nReminds_of(\"Christmas films\", \"Groundhog Day\").\n.decl In_month(Month:symbol, Event:symbol)\nIn_month(\"December\", \"Christmas\").\nIn_month(\"February\", \"Groundhog Day\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas\", month1), Happens_in_time(\"Groundhog Day\", month2), Reminds_of(\"Christmas films\", \"Groundhog Day\"), In_month(month1, \"Christmas\"), In_month(month2, \"Groundhog Day\").\n.output Answer"]}
{"id": 1027, "answer": false, "completion": ".decl Uses_alphabet(Language:symbol, Alphabet:symbol)\nUses_alphabet(\"Japanese\", \"kanji\").\nUses_alphabet(\"Japanese\", \"Roman alphabet\").\nUses_alphabet(\"English\", \"Roman alphabet\").\n.decl Has_characters(Alphabet:symbol, N_characters:float)\nHas_characters(\"kanji\", 50000).\nHas_characters(\"Roman alphabet\", 26).\n.decl Saves_trees(Alphabet_A:symbol, Alphabet_B:symbol)\nSaves_trees(\"kanji\", \"Roman alphabet\") :- Has_characters(\"kanji\", n_characters1), Has_characters(\"Roman alphabet\", n_characters2), n_characters1 < n_characters2.\n.decl Answer()\nAnswer() :- Saves_trees(\"kanji\", \"Roman alphabet\"), Uses_alphabet(language, \"kanji\"), Uses_alphabet(language, \"Roman alphabet\").\n.output Answer", "completions": [".decl Uses_alphabet(Language:symbol, Alphabet:symbol)\nUses_alphabet(\"Japanese\", \"kanji\").\nUses_alphabet(\"Japanese\", \"Roman alphabet\").\nUses_alphabet(\"English\", \"Roman alphabet\").\n.decl Has_characters(Alphabet:symbol, N_characters:float)\nHas_characters(\"kanji\", 50000).\nHas_characters(\"Roman alphabet\", 26).\n.decl Saves_trees(Alphabet_A:symbol, Alphabet_B:symbol)\nSaves_trees(\"kanji\", \"Roman alphabet\") :- Has_characters(\"kanji\", n_characters1), Has_characters(\"Roman alphabet\", n_characters2), n_characters1 < n_characters2.\n.decl Answer()\nAnswer() :- Saves_trees(\"kanji\", \"Roman alphabet\"), Uses_alphabet(language, \"kanji\"), Uses_alphabet(language, \"Roman alphabet\").\n.output Answer"]}
{"id": 1028, "answer": true, "completion": ".decl Has_original_appearance(Object:symbol, Appearance:symbol)\nHas_original_appearance(\"Egyptian pyramids\", \"different\").\n.decl Answer()\nAnswer() :- Has_original_appearance(\"Egyptian pyramids\", \"different\").\n.output Answer", "completions": [".decl Has_original_appearance(Object:symbol, Appearance:symbol)\nHas_original_appearance(\"Egyptian pyramids\", \"different\").\n.decl Answer()\nAnswer() :- Has_original_appearance(\"Egyptian pyramids\", \"different\").\n.output Answer"]}
{"id": 1029, "answer": true, "completion": ".decl Has_storage_capacity(Device:symbol, Capacity_GB:float)\nHas_storage_capacity(\"Samsung Galaxy A10e\", 32).\n.decl Has_size_per_episode(Series:symbol, Size_GB:float)\nHas_size_per_episode(\"Game of Thrones HD\", 2).\n.decl Has_n_episodes(Series:symbol, N_episodes:float)\nHas_n_episodes(\"Game of Thrones\", 73).\n.decl Answer()\nAnswer() :- Has_storage_capacity(\"Samsung Galaxy A10e\", capacity), Has_size_per_episode(\"Game of Thrones HD\", size_per_episode), Has_n_episodes(\"Game of Thrones\", n_episodes), capacity >= size_per_episode * n_episodes.\n.output Answer", "completions": [".decl Has_storage_capacity(Device:symbol, Capacity_GB:float)\nHas_storage_capacity(\"Samsung Galaxy A10e\", 32).\n.decl Has_size_per_episode(Series:symbol, Size_GB:float)\nHas_size_per_episode(\"Game of Thrones HD\", 2).\n.decl Has_n_episodes(Series:symbol, N_episodes:float)\nHas_n_episodes(\"Game of Thrones\", 73).\n.decl Answer()\nAnswer() :- Has_storage_capacity(\"Samsung Galaxy A10e\", capacity), Has_size_per_episode(\"Game of Thrones HD\", size_per_episode), Has_n_episodes(\"Game of Thrones\", n_episodes), capacity >= size_per_episode * n_episodes.\n.output Answer"]}
{"id": 1030, "answer": false, "completion": ".decl Is_person(Person:symbol)\nIs_person(\"Aerosmith\").\n\n.decl Carpool_requirement(N_people:float)\nCarpool_requirement(2).\n\n.decl Answer()\nAnswer() :- Is_person(\"Aerosmith\"), Carpool_requirement(n_people), n_people > 1.\n.output Answer", "completions": [".decl Is_person(Person:symbol)\nIs_person(\"Aerosmith\").\n\n.decl Carpool_requirement(N_people:float)\nCarpool_requirement(2).\n\n.decl Answer()\nAnswer() :- Is_person(\"Aerosmith\"), Carpool_requirement(n_people), n_people > 1.\n.output Answer"]}
{"id": 1031, "answer": true, "completion": ".decl Has_nest_size(Animal:symbol, Nest_size:float)\nHas_nest_size(\"ostrich\", 100).\nHas_nest_size(\"swallow\", 5).\n.decl Answer()\nAnswer() :- Has_nest_size(\"ostrich\", size1), Has_nest_size(\"swallow\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_nest_size(Animal:symbol, Nest_size:float)\nHas_nest_size(\"ostrich\", 100).\nHas_nest_size(\"swallow\", 5).\n.decl Answer()\nAnswer() :- Has_nest_size(\"ostrich\", size1), Has_nest_size(\"swallow\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1032, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"giant squid\", 43).\nHas_size(\"Soldier Field\", 100).\n.decl Answer()\nAnswer() :- Has_size(\"giant squid\", size1), Has_size(\"Soldier Field\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"giant squid\", 43).\nHas_size(\"Soldier Field\", 100).\n.decl Answer()\nAnswer() :- Has_size(\"giant squid\", size1), Has_size(\"Soldier Field\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1033, "answer": true, "completion": ".decl Made_of(Material:symbol, Object:symbol)\nMade_of(\"paper\", \"Constitution of the United States\").\n.decl Made_from(Material:symbol, Source:symbol)\nMade_from(\"paper\", \"wood pulp\").\n.decl Offends(Source:symbol, Organization:symbol)\nOffends(\"animal products\", \"PETA\").\n.decl Answer()\nAnswer() :- Made_of(material, \"Constitution of the United States\"), Made_from(material, source), Offends(source, \"PETA\").\n.output Answer", "completions": [".decl Made_of(Material:symbol, Object:symbol)\nMade_of(\"paper\", \"Constitution of the United States\").\n.decl Made_from(Material:symbol, Source:symbol)\nMade_from(\"paper\", \"wood pulp\").\n.decl Offends(Source:symbol, Organization:symbol)\nOffends(\"animal products\", \"PETA\").\n.decl Answer()\nAnswer() :- Made_of(material, \"Constitution of the United States\"), Made_from(material, source), Offends(source, \"PETA\").\n.output Answer"]}
{"id": 1034, "answer": true, "completion": ".decl Is_mythical_creature(Creature:symbol)\nIs_mythical_creature(\"minotaur\").\n.decl Can_injure_body_part(Activity:symbol, Body_part:symbol)\nCan_injure_body_part(\"football\", \"tibia\").\n.decl Answer()\nAnswer() :- Is_mythical_creature(\"minotaur\"), Can_injure_body_part(\"football\", \"tibia\").\n.output Answer", "completions": [".decl Is_mythical_creature(Creature:symbol)\nIs_mythical_creature(\"minotaur\").\n.decl Can_injure_body_part(Activity:symbol, Body_part:symbol)\nCan_injure_body_part(\"football\", \"tibia\").\n.decl Answer()\nAnswer() :- Is_mythical_creature(\"minotaur\"), Can_injure_body_part(\"football\", \"tibia\").\n.output Answer"]}
{"id": 1035, "answer": true, "completion": ".decl Is_socially_acceptable(Object:symbol)\nIs_socially_acceptable(\"icon depicting crucifixion\").\n.decl Answer()\nAnswer() :- Is_socially_acceptable(\"icon depicting crucifixion\").\n.output Answer", "completions": [".decl Is_socially_acceptable(Object:symbol)\nIs_socially_acceptable(\"icon depicting crucifixion\").\n.decl Answer()\nAnswer() :- Is_socially_acceptable(\"icon depicting crucifixion\").\n.output Answer"]}
{"id": 1036, "answer": false, "completion": ".decl Has_worst_crash(Airline:symbol, Crash:symbol)\nHas_worst_crash(\"United Airlines\", \"Tenerife Airport Disaster\").\n.decl Blameless(Airline:symbol, Crash:symbol)\nBlameless(\"United Airlines\", \"Tenerife Airport Disaster\").\n.decl Answer()\nAnswer() :- Has_worst_crash(\"United Airlines\", crash), Blameless(\"United Airlines\", crash).\n.output Answer", "completions": [".decl Has_worst_crash(Airline:symbol, Crash:symbol)\nHas_worst_crash(\"United Airlines\", \"Tenerife Airport Disaster\").\n.decl Blameless(Airline:symbol, Crash:symbol)\nBlameless(\"United Airlines\", \"Tenerife Airport Disaster\").\n.decl Answer()\nAnswer() :- Has_worst_crash(\"United Airlines\", crash), Blameless(\"United Airlines\", crash).\n.output Answer"]}
{"id": 1037, "answer": false, "completion": ".decl Appeared_in_movie(Actor:symbol, Movie:symbol)\nAppeared_in_movie(\"Clark Gable\", \"Gone with the Wind\").\nAppeared_in_movie(\"Clark Gable\", \"It Happened One Night\").\nAppeared_in_movie(\"Clark Gable\", \"Mutiny on the Bounty\").\n\n.decl Scored_by(Composer:symbol, Movie:symbol)\nScored_by(\"John Williams\", \"Star Wars\").\nScored_by(\"John Williams\", \"Jaws\").\nScored_by(\"John Williams\", \"E.T.\").\n\n.decl Answer()\nAnswer() :- Appeared_in_movie(\"Clark Gable\", movie), Scored_by(\"John Williams\", movie).\n.output Answer", "completions": [".decl Appeared_in_movie(Actor:symbol, Movie:symbol)\nAppeared_in_movie(\"Clark Gable\", \"Gone with the Wind\").\nAppeared_in_movie(\"Clark Gable\", \"It Happened One Night\").\nAppeared_in_movie(\"Clark Gable\", \"Mutiny on the Bounty\").\n\n.decl Scored_by(Composer:symbol, Movie:symbol)\nScored_by(\"John Williams\", \"Star Wars\").\nScored_by(\"John Williams\", \"Jaws\").\nScored_by(\"John Williams\", \"E.T.\").\n\n.decl Answer()\nAnswer() :- Appeared_in_movie(\"Clark Gable\", movie), Scored_by(\"John Williams\", movie).\n.output Answer"]}
{"id": 1038, "answer": true, "completion": ".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"David Duchovny\", \"pescatarian\").\n.decl Is_allowed(Diet:symbol, Food:symbol)\nIs_allowed(\"pescatarian\", \"fish\").\n.decl Is_type(Food:symbol, Type:symbol)\nIs_type(\"Atlantic Salmon\", \"fish\").\n.decl Answer()\nAnswer() :- Follows_diet(\"David Duchovny\", diet), Is_allowed(diet, food), Is_type(\"Atlantic Salmon\", food).\n.output Answer", "completions": [".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"David Duchovny\", \"pescatarian\").\n.decl Is_allowed(Diet:symbol, Food:symbol)\nIs_allowed(\"pescatarian\", \"fish\").\n.decl Is_type(Food:symbol, Type:symbol)\nIs_type(\"Atlantic Salmon\", \"fish\").\n.decl Answer()\nAnswer() :- Follows_diet(\"David Duchovny\", diet), Is_allowed(diet, food), Is_type(\"Atlantic Salmon\", food).\n.output Answer"]}
{"id": 1039, "answer": false, "completion": ".decl Sells_products(Place:symbol, Product:symbol)\nSells_products(\"movie theater\", \"popcorn\").\nSells_products(\"movie theater\", \"soda\").\nSells_products(\"movie theater\", \"candy\").\nSells_products(\"car dealership\", \"General Motors products\").\n.decl Answer()\nAnswer() :- Sells_products(\"movie theater\", \"General Motors products\").\n.output Answer", "completions": [".decl Sells_products(Place:symbol, Product:symbol)\nSells_products(\"movie theater\", \"popcorn\").\nSells_products(\"movie theater\", \"soda\").\nSells_products(\"movie theater\", \"candy\").\nSells_products(\"car dealership\", \"General Motors products\").\n.decl Answer()\nAnswer() :- Sells_products(\"movie theater\", \"General Motors products\").\n.output Answer"]}
{"id": 1040, "answer": false, "completion": ".decl Occurs_in_time(Event:symbol, Time:symbol)\nOccurs_in_time(\"hurricane season\", \"June\").\nOccurs_in_time(\"hurricane season\", \"July\").\nOccurs_in_time(\"hurricane season\", \"August\").\nOccurs_in_time(\"hurricane season\", \"September\").\nOccurs_in_time(\"hurricane season\", \"October\").\nOccurs_in_time(\"hurricane season\", \"November\").\nOccurs_in_time(\"Halloween cruise\", \"October\").\n.decl In_region(Event:symbol, Region:symbol)\nIn_region(\"hurricane season\", \"Gulf of Mexico\").\nIn_region(\"Halloween cruise\", \"Gulf of Mexico\").\n.decl Answer()\nAnswer() :- Occurs_in_time(\"hurricane season\", month1), Occurs_in_time(\"Halloween cruise\", month1), In_region(\"hurricane season\", region1), In_region(\"Halloween cruise\", region1), !Answer().\nAnswer() :- !Occurs_in_time(\"hurricane season\", month1), Occurs_in_time(\"Halloween cruise\", month1), In_region(\"hurricane season\", region1), In_region(\"Halloween cruise\", region1).\n.output Answer", "completions": [".decl Occurs_in_time(Event:symbol, Time:symbol)\nOccurs_in_time(\"hurricane season\", \"June\").\nOccurs_in_time(\"hurricane season\", \"July\").\nOccurs_in_time(\"hurricane season\", \"August\").\nOccurs_in_time(\"hurricane season\", \"September\").\nOccurs_in_time(\"hurricane season\", \"October\").\nOccurs_in_time(\"hurricane season\", \"November\").\nOccurs_in_time(\"Halloween cruise\", \"October\").\n.decl In_region(Event:symbol, Region:symbol)\nIn_region(\"hurricane season\", \"Gulf of Mexico\").\nIn_region(\"Halloween cruise\", \"Gulf of Mexico\").\n.decl Answer()\nAnswer() :- Occurs_in_time(\"hurricane season\", month1), Occurs_in_time(\"Halloween cruise\", month1), In_region(\"hurricane season\", region1), In_region(\"Halloween cruise\", region1), !Answer().\nAnswer() :- !Occurs_in_time(\"hurricane season\", month1), Occurs_in_time(\"Halloween cruise\", month1), In_region(\"hurricane season\", region1), In_region(\"Halloween cruise\", region1).\n.output Answer"]}
{"id": 1041, "answer": false, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Billie Eilish\", 30000000).\n.decl Has_price(Object:symbol, Price:float)\nHas_price(\"Porsche\", 60000).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Billie Eilish\", net_worth), Has_price(\"Porsche\", price), net_worth >= price.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Billie Eilish\", 30000000).\n.decl Has_price(Object:symbol, Price:float)\nHas_price(\"Porsche\", 60000).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Billie Eilish\", net_worth), Has_price(\"Porsche\", price), net_worth >= price.\n.output Answer"]}
{"id": 1042, "answer": false, "completion": ".decl Recommends(Profession:symbol, Treatment:symbol)\nRecommends(\"physician\", \"medicine\").\nRecommends(\"physician\", \"surgery\").\nRecommends(\"physician\", \"therapy\").\nRecommends(\"alternative healer\", \"Reiki\").\n.decl Answer()\nAnswer() :- Recommends(\"physician\", \"Reiki\").\nAnswer() :- !Recommends(\"physician\", \"Reiki\").\n.output Answer", "completions": [".decl Recommends(Profession:symbol, Treatment:symbol)\nRecommends(\"physician\", \"medicine\").\nRecommends(\"physician\", \"surgery\").\nRecommends(\"physician\", \"therapy\").\nRecommends(\"alternative healer\", \"Reiki\").\n.decl Answer()\nAnswer() :- Recommends(\"physician\", \"Reiki\").\nAnswer() :- !Recommends(\"physician\", \"Reiki\").\n.output Answer"]}
{"id": 1043, "answer": false, "completion": ".decl Is_useful_for_scrimshaw(Animal:symbol)\nIs_useful_for_scrimshaw(\"whale\").\nIs_useful_for_scrimshaw(\"walrus\").\nIs_useful_for_scrimshaw(\"elephant\").\n.decl Answer()\nAnswer() :- Is_useful_for_scrimshaw(\"common warthog\").\n.output Answer", "completions": [".decl Is_useful_for_scrimshaw(Animal:symbol)\nIs_useful_for_scrimshaw(\"whale\").\nIs_useful_for_scrimshaw(\"walrus\").\nIs_useful_for_scrimshaw(\"elephant\").\n.decl Answer()\nAnswer() :- Is_useful_for_scrimshaw(\"common warthog\").\n.output Answer"]}
{"id": 1044, "answer": false, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"American\", \"English\").\n.decl Language_spoken(Place:symbol, Language:symbol)\nLanguage_spoken(\"Disneyland Paris\", \"French\").\nLanguage_spoken(\"Disneyland Paris\", \"English\").\n.decl Answer()\nAnswer() :- Speaks_language(\"American\", language), Language_spoken(\"Disneyland Paris\", language).\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"American\", \"English\").\n.decl Language_spoken(Place:symbol, Language:symbol)\nLanguage_spoken(\"Disneyland Paris\", \"French\").\nLanguage_spoken(\"Disneyland Paris\", \"English\").\n.decl Answer()\nAnswer() :- Speaks_language(\"American\", language), Language_spoken(\"Disneyland Paris\", language).\n.output Answer"]}
{"id": 1045, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"giraffe\", 5.5).\nHas_height(\"Eiffel Tower\", 324).\n.decl Answer()\nAnswer() :- Has_height(\"giraffe\", height1), Has_height(\"Eiffel Tower\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"giraffe\", 5.5).\nHas_height(\"Eiffel Tower\", 324).\n.decl Answer()\nAnswer() :- Has_height(\"giraffe\", height1), Has_height(\"Eiffel Tower\", height2), height1 < height2.\n.output Answer"]}
{"id": 1046, "answer": true, "completion": ".decl Has_hardness(Material:symbol, Hardness:float)\nHas_hardness(\"diamond\", 10).\n.decl Can_crush(Material_A:symbol, Material_B:symbol)\nCan_crush(\"steel\", \"diamond\").\n.decl Gladiator_weapon(Material:symbol)\nGladiator_weapon(\"steel\").\n.decl Answer()\nAnswer() :- Gladiator_weapon(material), Can_crush(material, \"diamond\").\nAnswer() :- Gladiator_weapon(material), Has_hardness(material, hardness1), Has_hardness(\"diamond\", hardness2), hardness1 >= hardness2.\n.output Answer", "completions": [".decl Has_hardness(Material:symbol, Hardness:float)\nHas_hardness(\"diamond\", 10).\n.decl Can_crush(Material_A:symbol, Material_B:symbol)\nCan_crush(\"steel\", \"diamond\").\n.decl Gladiator_weapon(Material:symbol)\nGladiator_weapon(\"steel\").\n.decl Answer()\nAnswer() :- Gladiator_weapon(material), Can_crush(material, \"diamond\").\nAnswer() :- Gladiator_weapon(material), Has_hardness(material, hardness1), Has_hardness(\"diamond\", hardness2), hardness1 >= hardness2.\n.output Answer"]}
{"id": 1047, "answer": true, "completion": ".decl Is_necessary(Object:symbol, Activity:symbol)\nIs_necessary(\"curling stone\", \"curling\").\nIs_necessary(\"broom\", \"curling\").\n.decl Answer()\nAnswer() :- Is_necessary(\"curling iron\", \"curling\").\n.output Answer", "completions": [".decl Is_necessary(Object:symbol, Activity:symbol)\nIs_necessary(\"curling stone\", \"curling\").\nIs_necessary(\"broom\", \"curling\").\n.decl Answer()\nAnswer() :- Is_necessary(\"curling iron\", \"curling\").\n.output Answer"]}
{"id": 1048, "answer": true, "completion": ".decl Interacts_with(Antidepressant:symbol, Food:symbol)\nInteracts_with(\"antidepressants\", \"grapefruit\").\nInteracts_with(\"antidepressants\", \"Seville oranges\").\n.decl Is_citrus_fruit(Fruit:symbol)\nIs_citrus_fruit(\"grapefruit\").\nIs_citrus_fruit(\"Seville oranges\").\n.decl Answer()\nAnswer() :- Interacts_with(\"antidepressants\", food), Is_citrus_fruit(food).\n.output Answer", "completions": [".decl Interacts_with(Antidepressant:symbol, Food:symbol)\nInteracts_with(\"antidepressants\", \"grapefruit\").\nInteracts_with(\"antidepressants\", \"Seville oranges\").\n.decl Is_citrus_fruit(Fruit:symbol)\nIs_citrus_fruit(\"grapefruit\").\nIs_citrus_fruit(\"Seville oranges\").\n.decl Answer()\nAnswer() :- Interacts_with(\"antidepressants\", food), Is_citrus_fruit(food).\n.output Answer"]}
{"id": 1049, "answer": true, "completion": ".decl Influences(Concept:symbol, Object:symbol)\nInfluences(\"numerology\", \"hotel layouts\").\n.decl Answer()\nAnswer() :- Influences(\"numerology\", \"hotel layouts\").\n.output Answer", "completions": [".decl Influences(Concept:symbol, Object:symbol)\nInfluences(\"numerology\", \"hotel layouts\").\n.decl Answer()\nAnswer() :- Influences(\"numerology\", \"hotel layouts\").\n.output Answer"]}
{"id": 1050, "answer": true, "completion": ".decl Is_good_at(Person:symbol, Activity:symbol)\nIs_good_at(\"Michael Phelps\", \"swimming\").\n.decl Requires_skill(Activity:symbol, Skill:symbol)\nRequires_skill(\"pearl hunting\", \"swimming\").\n.decl Answer()\nAnswer() :- Is_good_at(\"Michael Phelps\", skill), Requires_skill(\"pearl hunting\", skill).\n.output Answer", "completions": [".decl Is_good_at(Person:symbol, Activity:symbol)\nIs_good_at(\"Michael Phelps\", \"swimming\").\n.decl Requires_skill(Activity:symbol, Skill:symbol)\nRequires_skill(\"pearl hunting\", \"swimming\").\n.decl Answer()\nAnswer() :- Is_good_at(\"Michael Phelps\", skill), Requires_skill(\"pearl hunting\", skill).\n.output Answer"]}
{"id": 1051, "answer": true, "completion": ".decl Uses_currency(City:symbol, Currency:symbol)\nUses_currency(\"NYC\", \"USD\").\n.decl Has_currency(Person:symbol, Currency:symbol)\nHas_currency(\"someone\", \"Euros\").\n.decl Answer()\nAnswer() :- Uses_currency(\"NYC\", currency1), Has_currency(\"someone\", currency2), currency1 != currency2.\n.output Answer", "completions": [".decl Uses_currency(City:symbol, Currency:symbol)\nUses_currency(\"NYC\", \"USD\").\n.decl Has_currency(Person:symbol, Currency:symbol)\nHas_currency(\"someone\", \"Euros\").\n.decl Answer()\nAnswer() :- Uses_currency(\"NYC\", currency1), Has_currency(\"someone\", currency2), currency1 != currency2.\n.output Answer"]}
{"id": 1052, "answer": true, "completion": ".decl Is_necessary_for(Object:symbol, Goal:symbol)\nIs_necessary_for(\"tibia\", \"walking\").\nIs_necessary_for(\"tibia\", \"running\").\nIs_necessary_for(\"tibia\", \"skating\").\n.decl Is_required_for(Activity:symbol, Goal:symbol)\nIs_required_for(\"walking\", \"daily life\").\nIs_required_for(\"running\", \"sports\").\nIs_required_for(\"skating\", \"ice hockey\").\n.decl Is_needed_for(Goal:symbol, Trophy:symbol)\nIs_needed_for(\"ice hockey\", \"Stanley Cup\").\n.decl Answer()\nAnswer() :- Is_necessary_for(object, activity), Is_required_for(activity, goal), Is_needed_for(goal, \"Stanley Cup\"), object = \"tibia\".\n.output Answer", "completions": [".decl Is_necessary_for(Object:symbol, Goal:symbol)\nIs_necessary_for(\"tibia\", \"walking\").\nIs_necessary_for(\"tibia\", \"running\").\nIs_necessary_for(\"tibia\", \"skating\").\n.decl Is_required_for(Activity:symbol, Goal:symbol)\nIs_required_for(\"walking\", \"daily life\").\nIs_required_for(\"running\", \"sports\").\nIs_required_for(\"skating\", \"ice hockey\").\n.decl Is_needed_for(Goal:symbol, Trophy:symbol)\nIs_needed_for(\"ice hockey\", \"Stanley Cup\").\n.decl Answer()\nAnswer() :- Is_necessary_for(object, activity), Is_required_for(activity, goal), Is_needed_for(goal, \"Stanley Cup\"), object = \"tibia\".\n.output Answer"]}
{"id": 1053, "answer": true, "completion": ".decl Wrote(Person:symbol, Sketch:symbol)\nWrote(\"Monty Python\", \"Dead Parrot\").\nWrote(\"Abbott and Costello\", \"Who's on First\").\n.decl Answer()\nAnswer() :- Wrote(\"Monty Python\", \"Who's on First\").\n.output Answer", "completions": [".decl Wrote(Person:symbol, Sketch:symbol)\nWrote(\"Monty Python\", \"Dead Parrot\").\nWrote(\"Abbott and Costello\", \"Who's on First\").\n.decl Answer()\nAnswer() :- Wrote(\"Monty Python\", \"Who's on First\").\n.output Answer"]}
{"id": 1054, "answer": true, "completion": ".decl Arabic_numerals(Numeral:symbol)\nArabic_numerals(\"0\").\nArabic_numerals(\"1\").\nArabic_numerals(\"2\").\nArabic_numerals(\"3\").\nArabic_numerals(\"4\").\nArabic_numerals(\"5\").\nArabic_numerals(\"6\").\nArabic_numerals(\"7\").\nArabic_numerals(\"8\").\nArabic_numerals(\"9\").\n.decl Looks_similar(Symbol:symbol, Numeral:symbol)\nLooks_similar(\"B\", \"8\").\n.decl Answer()\nAnswer() :- Looks_similar(\"B\", numeral), Arabic_numerals(numeral).\n.output Answer", "completions": [".decl Arabic_numerals(Numeral:symbol)\nArabic_numerals(\"0\").\nArabic_numerals(\"1\").\nArabic_numerals(\"2\").\nArabic_numerals(\"3\").\nArabic_numerals(\"4\").\nArabic_numerals(\"5\").\nArabic_numerals(\"6\").\nArabic_numerals(\"7\").\nArabic_numerals(\"8\").\nArabic_numerals(\"9\").\n.decl Looks_similar(Symbol:symbol, Numeral:symbol)\nLooks_similar(\"B\", \"8\").\n.decl Answer()\nAnswer() :- Looks_similar(\"B\", numeral), Arabic_numerals(numeral).\n.output Answer"]}
{"id": 1055, "answer": true, "completion": ".decl Has_genre(Artist:symbol, Genre:symbol)\nHas_genre(\"Brian Warner\", \"rock\").\nHas_genre(\"Brian Warner\", \"metal\").\n.decl Is_good_for_genre(Artist:symbol, Genre:symbol)\nIs_good_for_genre(\"Brian Warner\", \"rock\").\nIs_good_for_genre(\"Brian Warner\", \"metal\").\n.decl Answer()\nAnswer() :- Has_genre(\"Brian Warner\", genre), Is_good_for_genre(\"Brian Warner\", genre), genre = \"soul\".\n.output Answer", "completions": [".decl Has_genre(Artist:symbol, Genre:symbol)\nHas_genre(\"Brian Warner\", \"rock\").\nHas_genre(\"Brian Warner\", \"metal\").\n.decl Is_good_for_genre(Artist:symbol, Genre:symbol)\nIs_good_for_genre(\"Brian Warner\", \"rock\").\nIs_good_for_genre(\"Brian Warner\", \"metal\").\n.decl Answer()\nAnswer() :- Has_genre(\"Brian Warner\", genre), Is_good_for_genre(\"Brian Warner\", genre), genre = \"soul\".\n.output Answer"]}
{"id": 1056, "answer": false, "completion": ".decl Was_teacher(Person:symbol, Profession:symbol)\nWas_teacher(\"Hugh Jackman\", \"teacher\").\n.decl Taught_subject(Profession:symbol, Subject:symbol)\nTaught_subject(\"teacher\", \"English\").\n.decl Includes_book(Subject:symbol, Book:symbol)\nIncludes_book(\"English\", \"The Great Gatsby\").\n.decl Answer()\nAnswer() :- Was_teacher(\"Hugh Jackman\", profession), Taught_subject(profession, subject), Includes_book(subject, \"The Great Gatsby\").\n.output Answer", "completions": [".decl Was_teacher(Person:symbol, Profession:symbol)\nWas_teacher(\"Hugh Jackman\", \"teacher\").\n.decl Taught_subject(Profession:symbol, Subject:symbol)\nTaught_subject(\"teacher\", \"English\").\n.decl Includes_book(Subject:symbol, Book:symbol)\nIncludes_book(\"English\", \"The Great Gatsby\").\n.decl Answer()\nAnswer() :- Was_teacher(\"Hugh Jackman\", profession), Taught_subject(profession, subject), Includes_book(subject, \"The Great Gatsby\").\n.output Answer"]}
{"id": 1057, "answer": false, "completion": ".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"Young and the Restless\", 120000).\nHas_duration(\"leap year\", 31622400).\n.decl Answer()\nAnswer() :- Has_duration(\"Young and the Restless\", duration1), Has_duration(\"leap year\", duration2), duration1 > duration2.\n.output Answer", "completions": [".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"Young and the Restless\", 120000).\nHas_duration(\"leap year\", 31622400).\n.decl Answer()\nAnswer() :- Has_duration(\"Young and the Restless\", duration1), Has_duration(\"leap year\", duration2), duration1 > duration2.\n.output Answer"]}
{"id": 1058, "answer": true, "completion": ".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"believer\", \"agnosticism\").\n.decl Can_become_pope(Person:symbol)\nCan_become_pope(\"believer\") :- !Believes_in(\"believer\", \"agnosticism\").\n.decl Answer()\nAnswer() :- Can_become_pope(\"believer\").\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"believer\", \"agnosticism\").\n.decl Can_become_pope(Person:symbol)\nCan_become_pope(\"believer\") :- !Believes_in(\"believer\", \"agnosticism\").\n.decl Answer()\nAnswer() :- Can_become_pope(\"believer\").\n.output Answer"]}
{"id": 1059, "answer": true, "completion": ".decl Requires_special_facilities(Animal:symbol, Facility:symbol)\nRequires_special_facilities(\"giraffe\", \"tall enclosures\").\nRequires_special_facilities(\"giraffe\", \"high feeding stations\").\n.decl Answer()\nAnswer() :- Requires_special_facilities(\"giraffe\", facility).\n.output Answer", "completions": [".decl Requires_special_facilities(Animal:symbol, Facility:symbol)\nRequires_special_facilities(\"giraffe\", \"tall enclosures\").\nRequires_special_facilities(\"giraffe\", \"high feeding stations\").\n.decl Answer()\nAnswer() :- Requires_special_facilities(\"giraffe\", facility).\n.output Answer"]}
{"id": 1060, "answer": true, "completion": ".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"human\", \"cerebral palsy\").\n.decl Is_organism(Organism:symbol)\nIs_organism(\"slime mold\").\nIs_organism(\"human\").\n.decl Answer()\nAnswer() :- Is_organism(\"slime mold\"), !Has_disease(\"slime mold\", \"cerebral palsy\").\n.output Answer", "completions": [".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"human\", \"cerebral palsy\").\n.decl Is_organism(Organism:symbol)\nIs_organism(\"slime mold\").\nIs_organism(\"human\").\n.decl Answer()\nAnswer() :- Is_organism(\"slime mold\"), !Has_disease(\"slime mold\", \"cerebral palsy\").\n.output Answer"]}
{"id": 1061, "answer": false, "completion": ".decl Lived_in_city(Person:symbol, City:symbol)\nLived_in_city(\"Leonardo da Vinci\", \"Florence\").\n.decl Contemporary(Person_A:symbol, Person_B:symbol)\nContemporary(\"Leonardo da Vinci\", \"Michelangelo\").\nContemporary(\"Leonardo da Vinci\", \"Raphael\").\nContemporary(\"Leonardo da Vinci\", \"Donatello\").\n.decl Lacked_peers(Person:symbol, City:symbol)\nLacked_peers(\"Leonardo da Vinci\", \"Florence\") :- Lived_in_city(\"Leonardo da Vinci\", \"Florence\"), !Contemporary(\"Leonardo da Vinci\", peer), Lived_in_city(peer, \"Florence\").\n.decl Answer()\nAnswer() :- Lacked_peers(\"Leonardo da Vinci\", \"Florence\").\n.output Answer", "completions": [".decl Lived_in_city(Person:symbol, City:symbol)\nLived_in_city(\"Leonardo da Vinci\", \"Florence\").\n.decl Contemporary(Person_A:symbol, Person_B:symbol)\nContemporary(\"Leonardo da Vinci\", \"Michelangelo\").\nContemporary(\"Leonardo da Vinci\", \"Raphael\").\nContemporary(\"Leonardo da Vinci\", \"Donatello\").\n.decl Lacked_peers(Person:symbol, City:symbol)\nLacked_peers(\"Leonardo da Vinci\", \"Florence\") :- Lived_in_city(\"Leonardo da Vinci\", \"Florence\"), !Contemporary(\"Leonardo da Vinci\", peer), Lived_in_city(peer, \"Florence\").\n.decl Answer()\nAnswer() :- Lacked_peers(\"Leonardo da Vinci\", \"Florence\").\n.output Answer"]}
{"id": 1062, "answer": true, "completion": ".decl Takes_laxatives(Reason:symbol)\nTakes_laxatives(\"constipation relief\").\nTakes_laxatives(\"medical preparation\").\n.decl Enjoys_diarrhea(Reason:symbol)\nEnjoys_diarrhea(\"enjoyment\").\n.decl Answer()\nAnswer() :- Takes_laxatives(reason1), Enjoys_diarrhea(reason2), reason1 = reason2.\n.output Answer", "completions": [".decl Takes_laxatives(Reason:symbol)\nTakes_laxatives(\"constipation relief\").\nTakes_laxatives(\"medical preparation\").\n.decl Enjoys_diarrhea(Reason:symbol)\nEnjoys_diarrhea(\"enjoyment\").\n.decl Answer()\nAnswer() :- Takes_laxatives(reason1), Enjoys_diarrhea(reason2), reason1 = reason2.\n.output Answer"]}
{"id": 1063, "answer": true, "completion": ".decl Made_people_rich(Thing:symbol)\nMade_people_rich(\"Ice\").\n.decl Answer()\nAnswer() :- Made_people_rich(\"Ice\").\n.output Answer", "completions": [".decl Made_people_rich(Thing:symbol)\nMade_people_rich(\"Ice\").\n.decl Answer()\nAnswer() :- Made_people_rich(\"Ice\").\n.output Answer"]}
{"id": 1064, "answer": true, "completion": ".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Rabbi\", \"Hanukkah\").\n.decl Is_Christian_holiday(Holiday:symbol)\nIs_Christian_holiday(\"Christmas\").\n.decl Answer()\nAnswer() :- Celebrates(\"Rabbi\", holiday), Is_Christian_holiday(holiday).\n.output Answer", "completions": [".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Rabbi\", \"Hanukkah\").\n.decl Is_Christian_holiday(Holiday:symbol)\nIs_Christian_holiday(\"Christmas\").\n.decl Answer()\nAnswer() :- Celebrates(\"Rabbi\", holiday), Is_Christian_holiday(holiday).\n.output Answer"]}
{"id": 1065, "answer": false, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Rahul Dravid\", \"English\").\nSpeaks_language(\"Rahul Dravid\", \"Hindi\").\n.decl Language_spoken_in_city(City:symbol, Language:symbol)\nLanguage_spoken_in_city(\"Aurangabad\", \"Marathi\").\nLanguage_spoken_in_city(\"Aurangabad\", \"Hindi\").\nLanguage_spoken_in_city(\"Aurangabad\", \"English\").\n.decl Answer()\nAnswer() :- !Speaks_language(\"Rahul Dravid\", language), Language_spoken_in_city(\"Aurangabad\", language).\nAnswer() :- Speaks_language(\"Rahul Dravid\", language), Language_spoken_in_city(\"Aurangabad\", language).\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Rahul Dravid\", \"English\").\nSpeaks_language(\"Rahul Dravid\", \"Hindi\").\n.decl Language_spoken_in_city(City:symbol, Language:symbol)\nLanguage_spoken_in_city(\"Aurangabad\", \"Marathi\").\nLanguage_spoken_in_city(\"Aurangabad\", \"Hindi\").\nLanguage_spoken_in_city(\"Aurangabad\", \"English\").\n.decl Answer()\nAnswer() :- !Speaks_language(\"Rahul Dravid\", language), Language_spoken_in_city(\"Aurangabad\", language).\nAnswer() :- Speaks_language(\"Rahul Dravid\", language), Language_spoken_in_city(\"Aurangabad\", language).\n.output Answer"]}
{"id": 1066, "answer": true, "completion": ".decl Famous_for(Person:symbol, Reason:symbol)\nFamous_for(\"Shakespeare\", \"plays\").\nFamous_for(\"Shakespeare\", \"sonnets\").\n.decl Infinitive_form(Reason:symbol)\nInfinitive_form(\"infinitive form\").\n.decl Answer()\nAnswer() :- Famous_for(\"Shakespeare\", reason), Infinitive_form(reason).\n.output Answer", "completions": [".decl Famous_for(Person:symbol, Reason:symbol)\nFamous_for(\"Shakespeare\", \"plays\").\nFamous_for(\"Shakespeare\", \"sonnets\").\n.decl Infinitive_form(Reason:symbol)\nInfinitive_form(\"infinitive form\").\n.decl Answer()\nAnswer() :- Famous_for(\"Shakespeare\", reason), Infinitive_form(reason).\n.output Answer"]}
{"id": 1067, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"referee\", \"bright\").\nHas_color(\"soccer field\", \"green\").\n.decl Is_highly_visible(Object_A:symbol, Object_B:symbol)\nIs_highly_visible(\"bright\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"referee\", color1), Has_color(\"soccer field\", color2), Is_highly_visible(color1, color2).\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"referee\", \"bright\").\nHas_color(\"soccer field\", \"green\").\n.decl Is_highly_visible(Object_A:symbol, Object_B:symbol)\nIs_highly_visible(\"bright\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"referee\", color1), Has_color(\"soccer field\", color2), Is_highly_visible(color1, color2).\n.output Answer"]}
{"id": 1068, "answer": true, "completion": ".decl Has_scurvy(Person:symbol, Scurvy_status:bool)\nHas_scurvy(\"pirate\", true).\n.decl Needs_vitamin_C(Person:symbol, Need_status:bool)\nNeeds_vitamin_C(\"pirate\", true) :- Has_scurvy(\"pirate\", true).\n.decl Answer()\nAnswer() :- Needs_vitamin_C(\"pirate\", true).\n.output Answer", "completions": [".decl Has_scurvy(Person:symbol, Scurvy_status:bool)\nHas_scurvy(\"pirate\", true).\n.decl Needs_vitamin_C(Person:symbol, Need_status:bool)\nNeeds_vitamin_C(\"pirate\", true) :- Has_scurvy(\"pirate\", true).\n.decl Answer()\nAnswer() :- Needs_vitamin_C(\"pirate\", true).\n.output Answer"]}
{"id": 1069, "answer": true, "completion": ".decl Needs_nutrients(Person:symbol, Nutrient:symbol)\nNeeds_nutrients(\"person\", \"protein\").\nNeeds_nutrients(\"person\", \"carbohydrates\").\nNeeds_nutrients(\"person\", \"fats\").\nNeeds_nutrients(\"person\", \"vitamins\").\nNeeds_nutrients(\"person\", \"minerals\").\n\n.decl Contains_nutrients(Food:symbol, Nutrient:symbol)\nContains_nutrients(\"ice\", \"water\").\n\n.decl Lacks_nutrients(Person:symbol, Nutrient:symbol)\nLacks_nutrients(person, nutrient) :- Needs_nutrients(person, nutrient), !Contains_nutrients(\"ice\", nutrient).\n\n.decl Answer()\nAnswer() :- Lacks_nutrients(\"person\", _).\n.output Answer", "completions": [".decl Needs_nutrients(Person:symbol, Nutrient:symbol)\nNeeds_nutrients(\"person\", \"protein\").\nNeeds_nutrients(\"person\", \"carbohydrates\").\nNeeds_nutrients(\"person\", \"fats\").\nNeeds_nutrients(\"person\", \"vitamins\").\nNeeds_nutrients(\"person\", \"minerals\").\n\n.decl Contains_nutrients(Food:symbol, Nutrient:symbol)\nContains_nutrients(\"ice\", \"water\").\n\n.decl Lacks_nutrients(Person:symbol, Nutrient:symbol)\nLacks_nutrients(person, nutrient) :- Needs_nutrients(person, nutrient), !Contains_nutrients(\"ice\", nutrient).\n\n.decl Answer()\nAnswer() :- Lacks_nutrients(\"person\", _).\n.output Answer"]}
{"id": 1070, "answer": true, "completion": ".decl Has_altitude(Object:symbol, Altitude:float)\nHas_altitude(\"King Kong\", 381).\nHas_altitude(\"Eiffel Tower visitors\", 276).\n.decl Answer()\nAnswer() :- Has_altitude(\"King Kong\", altitude1), Has_altitude(\"Eiffel Tower visitors\", altitude2), altitude1 > altitude2.\n.output Answer", "completions": [".decl Has_altitude(Object:symbol, Altitude:float)\nHas_altitude(\"King Kong\", 381).\nHas_altitude(\"Eiffel Tower visitors\", 276).\n.decl Answer()\nAnswer() :- Has_altitude(\"King Kong\", altitude1), Has_altitude(\"Eiffel Tower visitors\", altitude2), altitude1 > altitude2.\n.output Answer"]}
{"id": 1071, "answer": true, "completion": ".decl Has_time(Event:symbol, Time:float)\nHas_time(\"Conan O'Brien\", 23).\n.decl Has_bedtime(Age_group:symbol, Time:float)\nHas_bedtime(\"children\", 21).\n.decl Answer()\nAnswer() :- Has_time(\"Conan O'Brien\", time1), Has_bedtime(\"children\", time2), time1 > time2.\n.output Answer", "completions": [".decl Has_time(Event:symbol, Time:float)\nHas_time(\"Conan O'Brien\", 23).\n.decl Has_bedtime(Age_group:symbol, Time:float)\nHas_bedtime(\"children\", 21).\n.decl Answer()\nAnswer() :- Has_time(\"Conan O'Brien\", time1), Has_bedtime(\"children\", time2), time1 > time2.\n.output Answer"]}
{"id": 1072, "answer": true, "completion": ".decl Has_annual_fee(Organization:symbol, Annual_fee:float)\nHas_annual_fee(\"Capital One Venture\", 95).\nHas_annual_fee(\"Church of Satan\", 225).\n.decl Answer()\nAnswer() :- Has_annual_fee(\"Capital One Venture\", fee1), Has_annual_fee(\"Church of Satan\", fee2), 5 * fee1 < 5 * fee2.\n.output Answer", "completions": [".decl Has_annual_fee(Organization:symbol, Annual_fee:float)\nHas_annual_fee(\"Capital One Venture\", 95).\nHas_annual_fee(\"Church of Satan\", 225).\n.decl Answer()\nAnswer() :- Has_annual_fee(\"Capital One Venture\", fee1), Has_annual_fee(\"Church of Satan\", fee2), 5 * fee1 < 5 * fee2.\n.output Answer"]}
{"id": 1073, "answer": true, "completion": ".decl Has_coastline(Country:symbol)\nHas_coastline(\"Morocco\").\n.decl Has_water_sports(Country:symbol, Sport:symbol)\nHas_water_sports(\"Morocco\", \"water skiing\").\n.decl Ideal_location(Country:symbol, Sport:symbol)\nIdeal_location(country, sport) :- Has_coastline(country), Has_water_sports(country, sport).\n.decl Answer()\nAnswer() :- Ideal_location(\"Morocco\", \"water skiing\").\n.output Answer", "completions": [".decl Has_coastline(Country:symbol)\nHas_coastline(\"Morocco\").\n.decl Has_water_sports(Country:symbol, Sport:symbol)\nHas_water_sports(\"Morocco\", \"water skiing\").\n.decl Ideal_location(Country:symbol, Sport:symbol)\nIdeal_location(country, sport) :- Has_coastline(country), Has_water_sports(country, sport).\n.decl Answer()\nAnswer() :- Ideal_location(\"Morocco\", \"water skiing\").\n.output Answer"]}
{"id": 1074, "answer": true, "completion": ".decl Can_swim(Animal:symbol)\nCan_swim(\"snow leopard\").\n.decl Answer()\nAnswer() :- Can_swim(\"snow leopard\").\n.output Answer", "completions": [".decl Can_swim(Animal:symbol)\nCan_swim(\"snow leopard\").\n.decl Answer()\nAnswer() :- Can_swim(\"snow leopard\").\n.output Answer"]}
{"id": 1075, "answer": true, "completion": ".decl Is_enemy_of(Character:symbol, Group:symbol)\nIs_enemy_of(\"Joker\", \"Batman\").\n.decl Is_member_of(Character:symbol, Group:symbol)\nIs_member_of(\"Batman\", \"Justice League\").\nIs_member_of(\"Iron Man\", \"Avengers\").\n.decl Answer()\nAnswer() :- Is_enemy_of(\"Joker\", \"Avengers\").\nAnswer() :- Is_enemy_of(\"Joker\", character), Is_member_of(character, \"Avengers\").\n.output Answer", "completions": [".decl Is_enemy_of(Character:symbol, Group:symbol)\nIs_enemy_of(\"Joker\", \"Batman\").\n.decl Is_member_of(Character:symbol, Group:symbol)\nIs_member_of(\"Batman\", \"Justice League\").\nIs_member_of(\"Iron Man\", \"Avengers\").\n.decl Answer()\nAnswer() :- Is_enemy_of(\"Joker\", \"Avengers\").\nAnswer() :- Is_enemy_of(\"Joker\", character), Is_member_of(character, \"Avengers\").\n.output Answer"]}
{"id": 1076, "answer": false, "completion": ".decl Job_requires(Job:symbol, Requirement:symbol)\nJob_requires(\"sofer\", \"handling_parchment\").\n.decl Material_origin(Material:symbol, Origin:symbol)\nMaterial_origin(\"parchment\", \"animal\").\n.decl Is_vegan(Person:symbol)\nIs_vegan(\"vegan\").\n.decl Answer()\nAnswer() :- Job_requires(\"sofer\", requirement), Material_origin(requirement, \"animal\"), Is_vegan(\"vegan\").\n.output Answer", "completions": [".decl Job_requires(Job:symbol, Requirement:symbol)\nJob_requires(\"sofer\", \"handling_parchment\").\n.decl Material_origin(Material:symbol, Origin:symbol)\nMaterial_origin(\"parchment\", \"animal\").\n.decl Is_vegan(Person:symbol)\nIs_vegan(\"vegan\").\n.decl Answer()\nAnswer() :- Job_requires(\"sofer\", requirement), Material_origin(requirement, \"animal\"), Is_vegan(\"vegan\").\n.output Answer"]}
{"id": 1077, "answer": true, "completion": ".decl Is_red_state(State:symbol)\nIs_red_state(\"Alabama\").\nIs_red_state(\"Alaska\").\nIs_red_state(\"Arizona\").\nIs_red_state(\"Arkansas\").\nIs_red_state(\"Florida\").\nIs_red_state(\"Georgia\").\nIs_red_state(\"Idaho\").\nIs_red_state(\"Indiana\").\nIs_red_state(\"Kansas\").\nIs_red_state(\"Kentucky\").\nIs_red_state(\"Louisiana\").\nIs_red_state(\"Mississippi\").\nIs_red_state(\"Missouri\").\nIs_red_state(\"Montana\").\nIs_red_state(\"Nebraska\").\nIs_red_state(\"North Dakota\").\nIs_red_state(\"Oklahoma\").\nIs_red_state(\"South Carolina\").\nIs_red_state(\"South Dakota\").\nIs_red_state(\"Tennessee\").\nIs_red_state(\"Texas\").\nIs_red_state(\"Utah\").\nIs_red_state(\"West Virginia\").\nIs_red_state(\"Wyoming\").\n\n.decl US_route_1(State:symbol)\nUS_route_1(\"Maine\").\nUS_route_1(\"New Hampshire\").\nUS_route_1(\"Massachusetts\").\nUS_route_1(\"Rhode Island\").\nUS_route_1(\"Connecticut\").\nUS_route_1(\"New York\").\nUS_route_1(\"New Jersey\").\nUS_route_1(\"Pennsylvania\").\nUS_route_1(\"Delaware\").\nUS_route_1(\"Maryland\").\nUS_route_1(\"Washington, D.C.\").\nUS_route_1(\"Virginia\").\nUS_route_1(\"North Carolina\").\nUS_route_1(\"South Carolina\").\nUS_route_1(\"Georgia\").\nUS_route_1(\"Florida\").\n\n.decl Red_states_on_route_1(State:symbol)\nRed_states_on_route_1(state) :- US_route_1(state), Is_red_state(state).\n\n.decl Total_states_on_route_1(N_states:float)\nTotal_states_on_route_1(n) :- n = count : US_route_1(_).\n\n.decl Total_red_states_on_route_1(N_states:float)\nTotal_red_states_on_route_1(n) :- n = count : Red_states_on_route_1(_).\n\n.decl Answer()\nAnswer() :- Total_states_on_route_1(total_states), Total_red_states_on_route_1(total_red_states), total_red_states / total_states > 0.5.\n\n.output Answer", "completions": [".decl Is_red_state(State:symbol)\nIs_red_state(\"Alabama\").\nIs_red_state(\"Alaska\").\nIs_red_state(\"Arizona\").\nIs_red_state(\"Arkansas\").\nIs_red_state(\"Florida\").\nIs_red_state(\"Georgia\").\nIs_red_state(\"Idaho\").\nIs_red_state(\"Indiana\").\nIs_red_state(\"Kansas\").\nIs_red_state(\"Kentucky\").\nIs_red_state(\"Louisiana\").\nIs_red_state(\"Mississippi\").\nIs_red_state(\"Missouri\").\nIs_red_state(\"Montana\").\nIs_red_state(\"Nebraska\").\nIs_red_state(\"North Dakota\").\nIs_red_state(\"Oklahoma\").\nIs_red_state(\"South Carolina\").\nIs_red_state(\"South Dakota\").\nIs_red_state(\"Tennessee\").\nIs_red_state(\"Texas\").\nIs_red_state(\"Utah\").\nIs_red_state(\"West Virginia\").\nIs_red_state(\"Wyoming\").\n\n.decl US_route_1(State:symbol)\nUS_route_1(\"Maine\").\nUS_route_1(\"New Hampshire\").\nUS_route_1(\"Massachusetts\").\nUS_route_1(\"Rhode Island\").\nUS_route_1(\"Connecticut\").\nUS_route_1(\"New York\").\nUS_route_1(\"New Jersey\").\nUS_route_1(\"Pennsylvania\").\nUS_route_1(\"Delaware\").\nUS_route_1(\"Maryland\").\nUS_route_1(\"Washington, D.C.\").\nUS_route_1(\"Virginia\").\nUS_route_1(\"North Carolina\").\nUS_route_1(\"South Carolina\").\nUS_route_1(\"Georgia\").\nUS_route_1(\"Florida\").\n\n.decl Red_states_on_route_1(State:symbol)\nRed_states_on_route_1(state) :- US_route_1(state), Is_red_state(state).\n\n.decl Total_states_on_route_1(N_states:float)\nTotal_states_on_route_1(n) :- n = count : US_route_1(_).\n\n.decl Total_red_states_on_route_1(N_states:float)\nTotal_red_states_on_route_1(n) :- n = count : Red_states_on_route_1(_).\n\n.decl Answer()\nAnswer() :- Total_states_on_route_1(total_states), Total_red_states_on_route_1(total_red_states), total_red_states / total_states > 0.5.\n\n.output Answer"]}
{"id": 1078, "answer": true, "completion": ".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"nuclear bomb\", \"World War II\").\n.decl Happened_in_time(War:symbol, Time:symbol)\nHappened_in_time(\"Napoleonic Wars\", \"1803-1815\").\nHappened_in_time(\"World War II\", \"1939-1945\").\n.decl Answer()\nAnswer() :- Used_in_war(\"nuclear bomb\", \"Napoleonic Wars\").\nAnswer() :- Used_in_war(\"nuclear bomb\", war1), Happened_in_time(\"Napoleonic Wars\", time1), Happened_in_time(war1, time2), time1 = time2.\n.output Answer", "completions": [".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"nuclear bomb\", \"World War II\").\n.decl Happened_in_time(War:symbol, Time:symbol)\nHappened_in_time(\"Napoleonic Wars\", \"1803-1815\").\nHappened_in_time(\"World War II\", \"1939-1945\").\n.decl Answer()\nAnswer() :- Used_in_war(\"nuclear bomb\", \"Napoleonic Wars\").\nAnswer() :- Used_in_war(\"nuclear bomb\", war1), Happened_in_time(\"Napoleonic Wars\", time1), Happened_in_time(war1, time2), time1 = time2.\n.output Answer"]}
{"id": 1079, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Marco Rubio\", 1.75). // Assuming Marco Rubio's height is 1.75 meters\n.decl Roller_coaster_requirements(Roller_coaster:symbol, Min_height:float, Max_height:float)\nRoller_coaster_requirements(\"Candymonium\", 1.37, 2). // Assuming Candymonium's height requirement is between 1.37 meters and 2 meters\n.decl Answer()\nAnswer() :- Has_height(\"Marco Rubio\", height), Roller_coaster_requirements(\"Candymonium\", min_height, max_height), height >= min_height, height <= max_height.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Marco Rubio\", 1.75). // Assuming Marco Rubio's height is 1.75 meters\n.decl Roller_coaster_requirements(Roller_coaster:symbol, Min_height:float, Max_height:float)\nRoller_coaster_requirements(\"Candymonium\", 1.37, 2). // Assuming Candymonium's height requirement is between 1.37 meters and 2 meters\n.decl Answer()\nAnswer() :- Has_height(\"Marco Rubio\", height), Roller_coaster_requirements(\"Candymonium\", min_height, max_height), height >= min_height, height <= max_height.\n.output Answer"]}
{"id": 1080, "answer": true, "completion": ".decl Released_from_Pandoras_box(Item:symbol)\nReleased_from_Pandoras_box(\"war\").\nReleased_from_Pandoras_box(\"famine\").\nReleased_from_Pandoras_box(\"pestilence\").\nReleased_from_Pandoras_box(\"death\").\n.decl Four_Horsemen(Name:symbol)\nFour_Horsemen(\"conquest\").\nFour_Horsemen(\"war\").\nFour_Horsemen(\"famine\").\nFour_Horsemen(\"death\").\n.decl Common_Items(Item:symbol)\nCommon_Items(item) :- Released_from_Pandoras_box(item), Four_Horsemen(item).\n.decl Answer(Count:float)\nAnswer(count) :- count = sum : { Common_Items(item) : 1 } , count >= 2.\n.output Answer", "completions": [".decl Released_from_Pandoras_box(Item:symbol)\nReleased_from_Pandoras_box(\"war\").\nReleased_from_Pandoras_box(\"famine\").\nReleased_from_Pandoras_box(\"pestilence\").\nReleased_from_Pandoras_box(\"death\").\n.decl Four_Horsemen(Name:symbol)\nFour_Horsemen(\"conquest\").\nFour_Horsemen(\"war\").\nFour_Horsemen(\"famine\").\nFour_Horsemen(\"death\").\n.decl Common_Items(Item:symbol)\nCommon_Items(item) :- Released_from_Pandoras_box(item), Four_Horsemen(item).\n.decl Answer(Count:float)\nAnswer(count) :- count = sum : { Common_Items(item) : 1 } , count >= 2.\n.output Answer"]}
{"id": 1081, "answer": true, "completion": ".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Saint Augustine\", \"Roman Empire\").\n.decl Used_calendar(Time_period:symbol, Calendar:symbol)\nUsed_calendar(\"Roman Empire\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Saint Augustine\", time_period), Used_calendar(time_period, \"Julian calendar\").\n.output Answer", "completions": [".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Saint Augustine\", \"Roman Empire\").\n.decl Used_calendar(Time_period:symbol, Calendar:symbol)\nUsed_calendar(\"Roman Empire\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Saint Augustine\", time_period), Used_calendar(time_period, \"Julian calendar\").\n.output Answer"]}
{"id": 1082, "answer": true, "completion": ".decl Is_parody(Object:symbol, Target:symbol)\nIs_parody(\"parody\", \"President of the United States\").\n.decl Is_illegal(Object:symbol)\nIs_illegal(\"threats to the President\").\n.decl Answer()\nAnswer() :- Is_parody(\"parody\", \"President of the United States\"), !Is_illegal(\"parody\").\n.output Answer", "completions": [".decl Is_parody(Object:symbol, Target:symbol)\nIs_parody(\"parody\", \"President of the United States\").\n.decl Is_illegal(Object:symbol)\nIs_illegal(\"threats to the President\").\n.decl Answer()\nAnswer() :- Is_parody(\"parody\", \"President of the United States\"), !Is_illegal(\"parody\").\n.output Answer"]}
{"id": 1083, "answer": true, "completion": ".decl Has_surface_water(Planet:symbol, Surface_water:float)\nHas_surface_water(\"Earth\", 71).\nHas_surface_water(\"Venus\", 0).\n.decl Has_water_sports(Sport:symbol, Requires_water:float)\nHas_water_sports(\"water skiing\", 1).\n.decl Answer()\nAnswer() :- Has_water_sports(\"water skiing\", requires_water), Has_surface_water(\"Venus\", surface_water), surface_water >= requires_water.\n.output Answer", "completions": [".decl Has_surface_water(Planet:symbol, Surface_water:float)\nHas_surface_water(\"Earth\", 71).\nHas_surface_water(\"Venus\", 0).\n.decl Has_water_sports(Sport:symbol, Requires_water:float)\nHas_water_sports(\"water skiing\", 1).\n.decl Answer()\nAnswer() :- Has_water_sports(\"water skiing\", requires_water), Has_surface_water(\"Venus\", surface_water), surface_water >= requires_water.\n.output Answer"]}
{"id": 1084, "answer": true, "completion": ".decl Uses_flag(Group:symbol, Flag:symbol)\nUses_flag(\"Nazis\", \"Swastika\").\nUses_flag(\"Communists\", \"Hammer and Sickle\").\n.decl Answer()\nAnswer() :- Uses_flag(\"Nazis\", \"Hammer and Sickle\").\n.output Answer", "completions": [".decl Uses_flag(Group:symbol, Flag:symbol)\nUses_flag(\"Nazis\", \"Swastika\").\nUses_flag(\"Communists\", \"Hammer and Sickle\").\n.decl Answer()\nAnswer() :- Uses_flag(\"Nazis\", \"Hammer and Sickle\").\n.output Answer"]}
{"id": 1085, "answer": false, "completion": ".decl Cause_of_death(Person:symbol, Cause:symbol)\nCause_of_death(\"Paul the Apostle\", \"beheading\").\n.decl Violates_Ahimsa(Action:symbol)\nViolates_Ahimsa(\"beheading\").\n.decl Answer()\nAnswer() :- Cause_of_death(\"Paul the Apostle\", cause), Violates_Ahimsa(cause).\n.output Answer", "completions": [".decl Cause_of_death(Person:symbol, Cause:symbol)\nCause_of_death(\"Paul the Apostle\", \"beheading\").\n.decl Violates_Ahimsa(Action:symbol)\nViolates_Ahimsa(\"beheading\").\n.decl Answer()\nAnswer() :- Cause_of_death(\"Paul the Apostle\", cause), Violates_Ahimsa(cause).\n.output Answer"]}
{"id": 1086, "answer": true, "completion": ".decl Appears_on_show(Person:symbol, Show:symbol)\nAppears_on_show(\"Jenny McCarthy\", \"The Jenny McCarthy Show\").\nAppears_on_show(\"Melissa McCarthy\", \"Saturday Night Live\").\n.decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(\"Jenny McCarthy\", \"Melissa McCarthy\").\n.decl Answer()\nAnswer() :- Is_related(\"Jenny McCarthy\", \"Melissa McCarthy\"), Appears_on_show(\"Jenny McCarthy\", show1), Appears_on_show(\"Melissa McCarthy\", show2), show1 != show2.\n.output Answer", "completions": [".decl Appears_on_show(Person:symbol, Show:symbol)\nAppears_on_show(\"Jenny McCarthy\", \"The Jenny McCarthy Show\").\nAppears_on_show(\"Melissa McCarthy\", \"Saturday Night Live\").\n.decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(\"Jenny McCarthy\", \"Melissa McCarthy\").\n.decl Answer()\nAnswer() :- Is_related(\"Jenny McCarthy\", \"Melissa McCarthy\"), Appears_on_show(\"Jenny McCarthy\", show1), Appears_on_show(\"Melissa McCarthy\", show2), show1 != show2.\n.output Answer"]}
{"id": 1087, "answer": true, "completion": ".decl Grade_required(Requirement:symbol, Grade:symbol)\nGrade_required(\"driver's license\", \"eleventh grade\").\n.decl Answer()\nAnswer() :- Grade_required(\"driver's license\", \"eleventh grade\").\n.output Answer", "completions": [".decl Grade_required(Requirement:symbol, Grade:symbol)\nGrade_required(\"driver's license\", \"eleventh grade\").\n.decl Answer()\nAnswer() :- Grade_required(\"driver's license\", \"eleventh grade\").\n.output Answer"]}
{"id": 1088, "answer": true, "completion": ".decl Influenced(Influencer:symbol, Influencee:symbol)\nInfluenced(\"DARPA\", \"Internet\").\nInfluenced(\"Internet\", \"Stephen Hawking\").\nInfluenced(\"Albert Einstein\", \"Stephen Hawking\").\n.decl Answer()\nAnswer() :- Influenced(\"DARPA\", \"Albert Einstein\").\nAnswer() :- Influenced(\"DARPA\", influencer), Influenced(influencer, \"Albert Einstein\").\n.output Answer", "completions": [".decl Influenced(Influencer:symbol, Influencee:symbol)\nInfluenced(\"DARPA\", \"Internet\").\nInfluenced(\"Internet\", \"Stephen Hawking\").\nInfluenced(\"Albert Einstein\", \"Stephen Hawking\").\n.decl Answer()\nAnswer() :- Influenced(\"DARPA\", \"Albert Einstein\").\nAnswer() :- Influenced(\"DARPA\", influencer), Influenced(influencer, \"Albert Einstein\").\n.output Answer"]}
{"id": 1089, "answer": true, "completion": ".decl Has_property(Substance:symbol, Property:symbol, Value:float)\nHas_property(\"menthol\", \"addictiveness\", -1).\nHas_property(\"cigarettes\", \"addictiveness\", 1).\n.decl Answer()\nAnswer() :- Has_property(\"menthol\", \"addictiveness\", value1), Has_property(\"cigarettes\", \"addictiveness\", value2), value1 + value2 < value2.\n.output Answer", "completions": [".decl Has_property(Substance:symbol, Property:symbol, Value:float)\nHas_property(\"menthol\", \"addictiveness\", -1).\nHas_property(\"cigarettes\", \"addictiveness\", 1).\n.decl Answer()\nAnswer() :- Has_property(\"menthol\", \"addictiveness\", value1), Has_property(\"cigarettes\", \"addictiveness\", value2), value1 + value2 < value2.\n.output Answer"]}
{"id": 1090, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"creator of Futurama\", 1964).\n.decl Lived_in_century(Person:symbol, Century:float)\nLived_in_century(\"creator of Futurama\", 20).\nLived_in_century(\"creator of Futurama\", 21).\n.decl Answer()\nAnswer() :- Lived_in_century(\"creator of Futurama\", century1), Lived_in_century(\"creator of Futurama\", century2), century1 != century2.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"creator of Futurama\", 1964).\n.decl Lived_in_century(Person:symbol, Century:float)\nLived_in_century(\"creator of Futurama\", 20).\nLived_in_century(\"creator of Futurama\", 21).\n.decl Answer()\nAnswer() :- Lived_in_century(\"creator of Futurama\", century1), Lived_in_century(\"creator of Futurama\", century2), century1 != century2.\n.output Answer"]}
{"id": 1091, "answer": true, "completion": ".decl Is_psychic(Psychic:symbol)\nIs_psychic(\"psychic\").\n.decl Admits_to_hot_reading(Psychic:symbol)\nAdmits_to_hot_reading(\"psychic\").\n.decl Is_trustworthy(Person:symbol)\n.decl Answer()\nAnswer() :- Is_psychic(psychic), Admits_to_hot_reading(psychic), !Is_trustworthy(psychic).\n.output Answer", "completions": [".decl Is_psychic(Psychic:symbol)\nIs_psychic(\"psychic\").\n.decl Admits_to_hot_reading(Psychic:symbol)\nAdmits_to_hot_reading(\"psychic\").\n.decl Is_trustworthy(Person:symbol)\n.decl Answer()\nAnswer() :- Is_psychic(psychic), Admits_to_hot_reading(psychic), !Is_trustworthy(psychic).\n.output Answer"]}
{"id": 1092, "answer": true, "completion": ".decl Operates_in(Company:symbol, Location:symbol)\nOperates_in(\"Poland Spring\", \"USA\").\n.decl Is_in(Location1:symbol, Location2:symbol)\nIs_in(\"Sahara\", \"Africa\").\n.decl Can_make_money(Company:symbol, Location:symbol)\nCan_make_money(\"Poland Spring\", \"Sahara\") :- Operates_in(\"Poland Spring\", location1), Is_in(\"Sahara\", location2), location1 != location2.\n.decl Answer()\nAnswer() :- Can_make_money(\"Poland Spring\", \"Sahara\").\n.output Answer", "completions": [".decl Operates_in(Company:symbol, Location:symbol)\nOperates_in(\"Poland Spring\", \"USA\").\n.decl Is_in(Location1:symbol, Location2:symbol)\nIs_in(\"Sahara\", \"Africa\").\n.decl Can_make_money(Company:symbol, Location:symbol)\nCan_make_money(\"Poland Spring\", \"Sahara\") :- Operates_in(\"Poland Spring\", location1), Is_in(\"Sahara\", location2), location1 != location2.\n.decl Answer()\nAnswer() :- Can_make_money(\"Poland Spring\", \"Sahara\").\n.output Answer"]}
{"id": 1093, "answer": true, "completion": ".decl Needs_society(Object:symbol, Need:float)\nNeeds_society(\"jet plane\", 1).\n.decl Has_society(Society:float)\nHas_society(0).\n.decl Answer()\nAnswer() :- Needs_society(\"jet plane\", need), Has_society(society), need <= society.\n.output Answer", "completions": [".decl Needs_society(Object:symbol, Need:float)\nNeeds_society(\"jet plane\", 1).\n.decl Has_society(Society:float)\nHas_society(0).\n.decl Answer()\nAnswer() :- Needs_society(\"jet plane\", need), Has_society(society), need <= society.\n.output Answer"]}
{"id": 1094, "answer": true, "completion": ".decl Needs_for_survival(Species:symbol, Substance:symbol)\nNeeds_for_survival(\"human\", \"oxygen\").\n.decl Produces(Substance:symbol, Producer:symbol)\nProduces(\"oxygen\", \"chlorophyll\").\n.decl Answer()\nAnswer() :- Needs_for_survival(\"human\", substance), Produces(substance, \"chlorophyll\"), !Produces(substance, other_producer), other_producer != \"chlorophyll\".\n.output Answer", "completions": [".decl Needs_for_survival(Species:symbol, Substance:symbol)\nNeeds_for_survival(\"human\", \"oxygen\").\n.decl Produces(Substance:symbol, Producer:symbol)\nProduces(\"oxygen\", \"chlorophyll\").\n.decl Answer()\nAnswer() :- Needs_for_survival(\"human\", substance), Produces(substance, \"chlorophyll\"), !Produces(substance, other_producer), other_producer != \"chlorophyll\".\n.output Answer"]}
{"id": 1095, "answer": false, "completion": ".decl Stands_in(Object:symbol, Location:symbol)\nStands_in(\"Statue of Liberty\", \"New York Harbor\").\n.decl Is_color(Object:symbol, Color:symbol)\nIs_color(\"Statue of Liberty\", \"green\").\n.decl Is_size(Object:symbol, Size:symbol)\nIs_size(\"Statue of Liberty\", \"giant\").\n.decl Answer()\nAnswer() :- Stands_in(\"Statue of Liberty\", \"New York Harbor\"), Is_color(\"Statue of Liberty\", \"green\"), Is_size(\"Statue of Liberty\", \"giant\").\n.output Answer", "completions": [".decl Stands_in(Object:symbol, Location:symbol)\nStands_in(\"Statue of Liberty\", \"New York Harbor\").\n.decl Is_color(Object:symbol, Color:symbol)\nIs_color(\"Statue of Liberty\", \"green\").\n.decl Is_size(Object:symbol, Size:symbol)\nIs_size(\"Statue of Liberty\", \"giant\").\n.decl Answer()\nAnswer() :- Stands_in(\"Statue of Liberty\", \"New York Harbor\"), Is_color(\"Statue of Liberty\", \"green\"), Is_size(\"Statue of Liberty\", \"giant\").\n.output Answer"]}
{"id": 1096, "answer": true, "completion": ".decl Is_landlocked(Sea:symbol, Country:symbol)\nIs_landlocked(\"Sea of Japan\", \"Japan\").\n.decl Answer()\nAnswer() :- Is_landlocked(\"Sea of Japan\", \"Japan\").\n.output Answer", "completions": [".decl Is_landlocked(Sea:symbol, Country:symbol)\nIs_landlocked(\"Sea of Japan\", \"Japan\").\n.decl Answer()\nAnswer() :- Is_landlocked(\"Sea of Japan\", \"Japan\").\n.output Answer"]}
{"id": 1097, "answer": true, "completion": ".decl Encourages(Suburb:symbol, Use:symbol, Object:symbol)\nEncourages(\"suburbs\", \"use\", \"cars\").\n.decl Answer()\nAnswer() :- Encourages(\"suburbs\", \"use\", \"cars\").\n.output Answer", "completions": [".decl Encourages(Suburb:symbol, Use:symbol, Object:symbol)\nEncourages(\"suburbs\", \"use\", \"cars\").\n.decl Answer()\nAnswer() :- Encourages(\"suburbs\", \"use\", \"cars\").\n.output Answer"]}
{"id": 1098, "answer": false, "completion": ".decl Has_back_pain(Person:symbol)\nHas_back_pain(\"someone\").\n\n.decl Activity_requires_bending(Activity:symbol)\nActivity_requires_bending(\"picking strawberries\").\n\n.decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(person, activity) :- !Has_back_pain(person), Activity_requires_bending(activity).\n\n.decl Answer()\nAnswer() :- !Enjoys(\"someone\", \"picking strawberries\").\n.output Answer", "completions": [".decl Has_back_pain(Person:symbol)\nHas_back_pain(\"someone\").\n\n.decl Activity_requires_bending(Activity:symbol)\nActivity_requires_bending(\"picking strawberries\").\n\n.decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(person, activity) :- !Has_back_pain(person), Activity_requires_bending(activity).\n\n.decl Answer()\nAnswer() :- !Enjoys(\"someone\", \"picking strawberries\").\n.output Answer"]}
{"id": 1099, "answer": true, "completion": ".decl Worked_in(Person:symbol, Location:symbol)\nWorked_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.decl Took_calls_in(Person:symbol, Location:symbol)\nTook_calls_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.decl Answer()\nAnswer() :- Took_calls_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\nAnswer() :- Worked_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.output Answer", "completions": [".decl Worked_in(Person:symbol, Location:symbol)\nWorked_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.decl Took_calls_in(Person:symbol, Location:symbol)\nTook_calls_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.decl Answer()\nAnswer() :- Took_calls_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\nAnswer() :- Worked_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.output Answer"]}
{"id": 1100, "answer": false, "completion": ".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Christopher Walken\", \"Emmy\").\nHas_award(\"Christopher Walken\", \"Oscar\").\n.decl EGOT(Award:symbol)\nEGOT(\"Emmy\").\nEGOT(\"Grammy\").\nEGOT(\"Oscar\").\nEGOT(\"Tony\").\n.decl Missing_award(Person:symbol, Award:symbol)\nMissing_award(person, award) :- EGOT(award), !Has_award(person, award).\n.decl Answer()\nAnswer() :- Missing_award(\"Christopher Walken\", missing_award1), Missing_award(\"Christopher Walken\", missing_award2), missing_award1 != missing_award2.\n.output Answer", "completions": [".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Christopher Walken\", \"Emmy\").\nHas_award(\"Christopher Walken\", \"Oscar\").\n.decl EGOT(Award:symbol)\nEGOT(\"Emmy\").\nEGOT(\"Grammy\").\nEGOT(\"Oscar\").\nEGOT(\"Tony\").\n.decl Missing_award(Person:symbol, Award:symbol)\nMissing_award(person, award) :- EGOT(award), !Has_award(person, award).\n.decl Answer()\nAnswer() :- Missing_award(\"Christopher Walken\", missing_award1), Missing_award(\"Christopher Walken\", missing_award2), missing_award1 != missing_award2.\n.output Answer"]}
{"id": 1101, "answer": false, "completion": ".decl Has_number(Object:symbol, Number:float)\nHas_number(\"bowling alley lane pins\", 10).\nHas_number(\"Dustin Hoffman Oscars\", 2).\n.decl Answer()\nAnswer() :- Has_number(\"bowling alley lane pins\", number1), Has_number(\"Dustin Hoffman Oscars\", number2), number2 >= number1.\n.output Answer", "completions": [".decl Has_number(Object:symbol, Number:float)\nHas_number(\"bowling alley lane pins\", 10).\nHas_number(\"Dustin Hoffman Oscars\", 2).\n.decl Answer()\nAnswer() :- Has_number(\"bowling alley lane pins\", number1), Has_number(\"Dustin Hoffman Oscars\", number2), number2 >= number1.\n.output Answer"]}
{"id": 1102, "answer": true, "completion": ".decl Serialized_in_magazine(Work:symbol, Magazine:symbol)\nSerialized_in_magazine(\"Rumi's work\", \"No\").\n.decl Answer()\nAnswer() :- Serialized_in_magazine(\"Rumi's work\", \"Yes\").\n.output Answer", "completions": [".decl Serialized_in_magazine(Work:symbol, Magazine:symbol)\nSerialized_in_magazine(\"Rumi's work\", \"No\").\n.decl Answer()\nAnswer() :- Serialized_in_magazine(\"Rumi's work\", \"Yes\").\n.output Answer"]}
{"id": 1103, "answer": false, "completion": ".decl Is_terrestrial_planet(Planet:symbol)\nIs_terrestrial_planet(\"Mercury\").\nIs_terrestrial_planet(\"Venus\").\nIs_terrestrial_planet(\"Earth\").\nIs_terrestrial_planet(\"Mars\").\n\n.decl Has_density(Object:symbol, Density:float)\nHas_density(\"Mercury\", 5.427).\nHas_density(\"Venus\", 5.243).\nHas_density(\"Earth\", 5.515).\nHas_density(\"Mars\", 3.933).\n\n.decl Focus_on_horoscope(Day:symbol, Planet:symbol)\nFocus_on_horoscope(\"Friday\", \"Venus\").\n\n.decl Densest_terrestrial_planet(Planet:symbol)\nDensest_terrestrial_planet(planet) :- Is_terrestrial_planet(planet), Has_density(planet, density1), !Has_density(_, density2), density2 > density1, Is_terrestrial_planet(_).\n\n.decl Answer()\nAnswer() :- Focus_on_horoscope(\"Friday\", planet), Densest_terrestrial_planet(planet).\n\n.output Answer", "completions": [".decl Is_terrestrial_planet(Planet:symbol)\nIs_terrestrial_planet(\"Mercury\").\nIs_terrestrial_planet(\"Venus\").\nIs_terrestrial_planet(\"Earth\").\nIs_terrestrial_planet(\"Mars\").\n\n.decl Has_density(Object:symbol, Density:float)\nHas_density(\"Mercury\", 5.427).\nHas_density(\"Venus\", 5.243).\nHas_density(\"Earth\", 5.515).\nHas_density(\"Mars\", 3.933).\n\n.decl Focus_on_horoscope(Day:symbol, Planet:symbol)\nFocus_on_horoscope(\"Friday\", \"Venus\").\n\n.decl Densest_terrestrial_planet(Planet:symbol)\nDensest_terrestrial_planet(planet) :- Is_terrestrial_planet(planet), Has_density(planet, density1), !Has_density(_, density2), density2 > density1, Is_terrestrial_planet(_).\n\n.decl Answer()\nAnswer() :- Focus_on_horoscope(\"Friday\", planet), Densest_terrestrial_planet(planet).\n\n.output Answer"]}
{"id": 1104, "answer": true, "completion": ".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Stonehenge\", \"England\").\nLocated_in(\"Dusseldorf\", \"Germany\").\n.decl Visible_from(Object_A:symbol, Object_B:symbol)\n.decl Answer()\nAnswer() :- Located_in(\"Stonehenge\", location1), Located_in(\"Dusseldorf\", location2), location1 != location2, !Visible_from(\"Stonehenge\", \"Dusseldorf\").\n.output Answer", "completions": [".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Stonehenge\", \"England\").\nLocated_in(\"Dusseldorf\", \"Germany\").\n.decl Visible_from(Object_A:symbol, Object_B:symbol)\n.decl Answer()\nAnswer() :- Located_in(\"Stonehenge\", location1), Located_in(\"Dusseldorf\", location2), location1 != location2, !Visible_from(\"Stonehenge\", \"Dusseldorf\").\n.output Answer"]}
{"id": 1105, "answer": false, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Carlos Gracie\", 21).\nHas_n_children(\"Helio Gracie\", 9).\n.decl Bakers_dozen(N:float)\nBakers_dozen(13).\n.decl Answer()\nAnswer() :- Has_n_children(\"Carlos Gracie\", n_children1), Has_n_children(\"Helio Gracie\", n_children2), Bakers_dozen(n), n_children1 + n_children2 >= n.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Carlos Gracie\", 21).\nHas_n_children(\"Helio Gracie\", 9).\n.decl Bakers_dozen(N:float)\nBakers_dozen(13).\n.decl Answer()\nAnswer() :- Has_n_children(\"Carlos Gracie\", n_children1), Has_n_children(\"Helio Gracie\", n_children2), Bakers_dozen(n), n_children1 + n_children2 >= n.\n.output Answer"]}
{"id": 1106, "answer": false, "completion": ".decl Is_ruler(Being:symbol, Entity:symbol)\n.decl Is_monarch(Being:symbol)\nIs_monarch(\"monarch butterfly\").\n.decl Is_kingdom(Entity:symbol)\nIs_kingdom(\"kingdom\").\n.decl Answer()\nAnswer() :- Is_monarch(being), Is_kingdom(entity), !Is_ruler(being, entity).\n.output Answer", "completions": [".decl Is_ruler(Being:symbol, Entity:symbol)\n.decl Is_monarch(Being:symbol)\nIs_monarch(\"monarch butterfly\").\n.decl Is_kingdom(Entity:symbol)\nIs_kingdom(\"kingdom\").\n.decl Answer()\nAnswer() :- Is_monarch(being), Is_kingdom(entity), !Is_ruler(being, entity).\n.output Answer"]}
{"id": 1107, "answer": true, "completion": ".decl Despises(Person_A:symbol, Person_B:symbol)\n// No information about Nicole Kidman despising Roman Josi is provided.\n.decl Answer()\nAnswer() :- Despises(\"Nicole Kidman\", \"Roman Josi\").\n.output Answer", "completions": [".decl Despises(Person_A:symbol, Person_B:symbol)\n// No information about Nicole Kidman despising Roman Josi is provided.\n.decl Answer()\nAnswer() :- Despises(\"Nicole Kidman\", \"Roman Josi\").\n.output Answer"]}
{"id": 1108, "answer": false, "completion": ".decl Has_interest(God:symbol, Interest:symbol)\nHas_interest(\"Apollo\", \"music\").\nHas_interest(\"Apollo\", \"poetry\").\nHas_interest(\"Apollo\", \"healing\").\nHas_interest(\"Baldur\", \"peace\").\nHas_interest(\"Baldur\", \"wisdom\").\n.decl Answer()\nAnswer() :- Has_interest(\"Apollo\", interest), Has_interest(\"Baldur\", interest).\n.output Answer", "completions": [".decl Has_interest(God:symbol, Interest:symbol)\nHas_interest(\"Apollo\", \"music\").\nHas_interest(\"Apollo\", \"poetry\").\nHas_interest(\"Apollo\", \"healing\").\nHas_interest(\"Baldur\", \"peace\").\nHas_interest(\"Baldur\", \"wisdom\").\n.decl Answer()\nAnswer() :- Has_interest(\"Apollo\", interest), Has_interest(\"Baldur\", interest).\n.output Answer"]}
{"id": 1109, "answer": true, "completion": ".decl Contains_chocolate(Food:symbol)\nContains_chocolate(\"Snickers bar\").\n.decl Is_toxic_to_dog(Food:symbol)\nIs_toxic_to_dog(\"chocolate\").\n.decl Answer()\nAnswer() :- Contains_chocolate(food), Is_toxic_to_dog(food), !Answer().\n.output Answer", "completions": [".decl Contains_chocolate(Food:symbol)\nContains_chocolate(\"Snickers bar\").\n.decl Is_toxic_to_dog(Food:symbol)\nIs_toxic_to_dog(\"chocolate\").\n.decl Answer()\nAnswer() :- Contains_chocolate(food), Is_toxic_to_dog(food), !Answer().\n.output Answer"]}
{"id": 1110, "answer": true, "completion": ".decl Is_tired_after_running_mile(Person:symbol)\nIs_tired_after_running_mile(\"Olympic athlete\").\n.decl Answer()\nAnswer() :- Is_tired_after_running_mile(\"Olympic athlete\").\n.output Answer", "completions": [".decl Is_tired_after_running_mile(Person:symbol)\nIs_tired_after_running_mile(\"Olympic athlete\").\n.decl Answer()\nAnswer() :- Is_tired_after_running_mile(\"Olympic athlete\").\n.output Answer"]}
{"id": 1111, "answer": false, "completion": ".decl Commends(Person:symbol, Quality:symbol)\nCommends(\"Catholic priest\", \"humility\").\n.decl Opposite(Quality1:symbol, Quality2:symbol)\nOpposite(\"pride\", \"humility\").\n.decl Answer()\nAnswer() :- Commends(\"Catholic priest\", quality), Opposite(quality, \"pride\").\n.output Answer", "completions": [".decl Commends(Person:symbol, Quality:symbol)\nCommends(\"Catholic priest\", \"humility\").\n.decl Opposite(Quality1:symbol, Quality2:symbol)\nOpposite(\"pride\", \"humility\").\n.decl Answer()\nAnswer() :- Commends(\"Catholic priest\", quality), Opposite(quality, \"pride\").\n.output Answer"]}
{"id": 1112, "answer": false, "completion": ".decl Has_shelf_life(Product:symbol, Shelf_life:float)\nHas_shelf_life(\"white rice\", 24).\nHas_shelf_life(\"sesame seeds\", 36).\n.decl Answer()\nAnswer() :- Has_shelf_life(\"white rice\", shelf_life1), Has_shelf_life(\"sesame seeds\", shelf_life2), shelf_life1 < shelf_life2.\n.output Answer", "completions": [".decl Has_shelf_life(Product:symbol, Shelf_life:float)\nHas_shelf_life(\"white rice\", 24).\nHas_shelf_life(\"sesame seeds\", 36).\n.decl Answer()\nAnswer() :- Has_shelf_life(\"white rice\", shelf_life1), Has_shelf_life(\"sesame seeds\", shelf_life2), shelf_life1 < shelf_life2.\n.output Answer"]}
{"id": 1113, "answer": true, "completion": ".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"Harry Potter\", \"fantasy\").\nIs_genre(\"Fantastic Beasts\", \"fantasy\").\n.decl Top_sellers(Author:symbol, Book:symbol)\nTop_sellers(\"J.K Rowling\", \"Harry Potter\").\nTop_sellers(\"J.K Rowling\", \"Fantastic Beasts\").\n.decl Answer()\nAnswer() :- Top_sellers(\"J.K Rowling\", book), Is_genre(book, \"fantasy\").\n.output Answer", "completions": [".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"Harry Potter\", \"fantasy\").\nIs_genre(\"Fantastic Beasts\", \"fantasy\").\n.decl Top_sellers(Author:symbol, Book:symbol)\nTop_sellers(\"J.K Rowling\", \"Harry Potter\").\nTop_sellers(\"J.K Rowling\", \"Fantastic Beasts\").\n.decl Answer()\nAnswer() :- Top_sellers(\"J.K Rowling\", book), Is_genre(book, \"fantasy\").\n.output Answer"]}
{"id": 1114, "answer": true, "completion": ".decl Located_in(Object:symbol, Longitude:float)\nLocated_in(\"Bern\", 7.4474).\nLocated_in(\"Paris\", 2.3522).\n.decl Answer()\nAnswer() :- Located_in(\"Bern\", longitude1), Located_in(\"Paris\", longitude2), longitude1 > longitude2.\n.output Answer", "completions": [".decl Located_in(Object:symbol, Longitude:float)\nLocated_in(\"Bern\", 7.4474).\nLocated_in(\"Paris\", 2.3522).\n.decl Answer()\nAnswer() :- Located_in(\"Bern\", longitude1), Located_in(\"Paris\", longitude2), longitude1 > longitude2.\n.output Answer"]}
{"id": 1115, "answer": false, "completion": ".decl Belongs_to_sect(Person:symbol, Sect:symbol)\nBelongs_to_sect(\"Al-Farabi\", \"Sunni Islam\").\nBelongs_to_sect(\"ISIS\", \"Sunni Islam\").\n.decl Answer()\nAnswer() :- Belongs_to_sect(\"Al-Farabi\", sect1), Belongs_to_sect(\"ISIS\", sect2), sect1 = sect2.\n.output Answer", "completions": [".decl Belongs_to_sect(Person:symbol, Sect:symbol)\nBelongs_to_sect(\"Al-Farabi\", \"Sunni Islam\").\nBelongs_to_sect(\"ISIS\", \"Sunni Islam\").\n.decl Answer()\nAnswer() :- Belongs_to_sect(\"Al-Farabi\", sect1), Belongs_to_sect(\"ISIS\", sect2), sect1 = sect2.\n.output Answer"]}
{"id": 1116, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"mollymawk\", \"Southern Hemisphere\").\nLives_in(\"albatross\", \"Southern Hemisphere\").\nLives_in(\"albatross\", \"Northern Hemisphere\").\n.decl Answer()\nAnswer() :- Lives_in(\"mollymawk\", location1), !Lives_in(\"albatross\", location1).\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"mollymawk\", \"Southern Hemisphere\").\nLives_in(\"albatross\", \"Southern Hemisphere\").\nLives_in(\"albatross\", \"Northern Hemisphere\").\n.decl Answer()\nAnswer() :- Lives_in(\"mollymawk\", location1), !Lives_in(\"albatross\", location1).\n.output Answer"]}
{"id": 1117, "answer": true, "completion": ".decl Is_useless_for(Object:symbol, Material:symbol)\nIs_useless_for(\"spice grinder\", \"cheapest cinnamon sticks\").\n.decl Answer()\nAnswer() :- Is_useless_for(\"spice grinder\", \"cheapest cinnamon sticks\").\n.output Answer", "completions": [".decl Is_useless_for(Object:symbol, Material:symbol)\nIs_useless_for(\"spice grinder\", \"cheapest cinnamon sticks\").\n.decl Answer()\nAnswer() :- Is_useless_for(\"spice grinder\", \"cheapest cinnamon sticks\").\n.output Answer"]}
{"id": 1118, "answer": true, "completion": ".decl Has_scoville_units(Pepper:symbol, Scoville_units:float)\nHas_scoville_units(\"Carolina Reaper\", 1500000).\nHas_scoville_units(\"Jalapeno\", 8000).\n.decl Is_common_ingredient(Product:symbol, Ingredient:symbol)\nIs_common_ingredient(\"US salsa\", \"Jalapeno\").\n.decl Answer()\nAnswer() :- Has_scoville_units(\"Carolina Reaper\", scoville1), Has_scoville_units(\"Jalapeno\", scoville2), Is_common_ingredient(\"US salsa\", \"Jalapeno\"), scoville1 > scoville2.\n.output Answer", "completions": [".decl Has_scoville_units(Pepper:symbol, Scoville_units:float)\nHas_scoville_units(\"Carolina Reaper\", 1500000).\nHas_scoville_units(\"Jalapeno\", 8000).\n.decl Is_common_ingredient(Product:symbol, Ingredient:symbol)\nIs_common_ingredient(\"US salsa\", \"Jalapeno\").\n.decl Answer()\nAnswer() :- Has_scoville_units(\"Carolina Reaper\", scoville1), Has_scoville_units(\"Jalapeno\", scoville2), Is_common_ingredient(\"US salsa\", \"Jalapeno\"), scoville1 > scoville2.\n.output Answer"]}
{"id": 1119, "answer": true, "completion": ".decl Destinations(Airline:symbol, Country:symbol)\nDestinations(\"Japan Airlines\", \"Germany\").\nDestinations(\"Japan Airlines\", \"Italy\").\nDestinations(\"Japan Airlines\", \"USA\").\nDestinations(\"Japan Airlines\", \"France\").\nDestinations(\"Japan Airlines\", \"China\").\n.decl Axis_Powers(Country:symbol)\nAxis_Powers(\"Germany\").\nAxis_Powers(\"Italy\").\nAxis_Powers(\"Japan\").\n.decl Answer()\nAnswer() :- Destinations(\"Japan Airlines\", country), Axis_Powers(country).\n.output Answer", "completions": [".decl Destinations(Airline:symbol, Country:symbol)\nDestinations(\"Japan Airlines\", \"Germany\").\nDestinations(\"Japan Airlines\", \"Italy\").\nDestinations(\"Japan Airlines\", \"USA\").\nDestinations(\"Japan Airlines\", \"France\").\nDestinations(\"Japan Airlines\", \"China\").\n.decl Axis_Powers(Country:symbol)\nAxis_Powers(\"Germany\").\nAxis_Powers(\"Italy\").\nAxis_Powers(\"Japan\").\n.decl Answer()\nAnswer() :- Destinations(\"Japan Airlines\", country), Axis_Powers(country).\n.output Answer"]}
{"id": 1120, "answer": false, "completion": ".decl Soaks_in(Person:symbol, Substance_A:symbol, Substance_B:symbol)\nSoaks_in(\"some people\", \"olive oil\", \"water\").\n.decl Answer()\nAnswer() :- Soaks_in(\"some people\", \"olive oil\", \"water\").\n.output Answer", "completions": [".decl Soaks_in(Person:symbol, Substance_A:symbol, Substance_B:symbol)\nSoaks_in(\"some people\", \"olive oil\", \"water\").\n.decl Answer()\nAnswer() :- Soaks_in(\"some people\", \"olive oil\", \"water\").\n.output Answer"]}
{"id": 1121, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"nymph tick\", 0.5).\nHas_size(\"standard hole punch\", 6).\n.decl Answer()\nAnswer() :- Has_size(\"nymph tick\", size1), Has_size(\"standard hole punch\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"nymph tick\", 0.5).\nHas_size(\"standard hole punch\", 6).\n.decl Answer()\nAnswer() :- Has_size(\"nymph tick\", size1), Has_size(\"standard hole punch\", size2), size1 < size2.\n.output Answer"]}
{"id": 1122, "answer": true, "completion": ".decl Operates_vehicle(Company:symbol, Vehicle_type:symbol)\nOperates_vehicle(\"Amtrak\", \"train\").\n.decl Has_wheels(Vehicle_type:symbol, N_wheels:float)\nHas_wheels(\"train\", 8).\nHas_wheels(\"four_wheel_vehicle\", 4).\n.decl Answer()\nAnswer() :- Operates_vehicle(\"Amtrak\", vehicle_type), Has_wheels(vehicle_type, 4).\n.output Answer", "completions": [".decl Operates_vehicle(Company:symbol, Vehicle_type:symbol)\nOperates_vehicle(\"Amtrak\", \"train\").\n.decl Has_wheels(Vehicle_type:symbol, N_wheels:float)\nHas_wheels(\"train\", 8).\nHas_wheels(\"four_wheel_vehicle\", 4).\n.decl Answer()\nAnswer() :- Operates_vehicle(\"Amtrak\", vehicle_type), Has_wheels(vehicle_type, 4).\n.output Answer"]}
{"id": 1123, "answer": false, "completion": ".decl Has_place_in_alphabet(Letter:symbol, Place:float)\nHas_place_in_alphabet(\"B\", 2).\n.decl Has_n_total_lunar_eclipses(Year:float, N_eclipses:float)\nHas_n_total_lunar_eclipses(2008, 2).\n.decl Answer()\nAnswer() :- Has_place_in_alphabet(\"B\", place), Has_n_total_lunar_eclipses(2008, n_eclipses), place > n_eclipses.\n.output Answer", "completions": [".decl Has_place_in_alphabet(Letter:symbol, Place:float)\nHas_place_in_alphabet(\"B\", 2).\n.decl Has_n_total_lunar_eclipses(Year:float, N_eclipses:float)\nHas_n_total_lunar_eclipses(2008, 2).\n.decl Answer()\nAnswer() :- Has_place_in_alphabet(\"B\", place), Has_n_total_lunar_eclipses(2008, n_eclipses), place > n_eclipses.\n.output Answer"]}
{"id": 1124, "answer": true, "completion": ".decl Active_in_season(Animal:symbol, Season:symbol)\nActive_in_season(\"sun bear\", \"winter\").\n.decl Answer()\nAnswer() :- Active_in_season(\"sun bear\", \"winter\").\n.output Answer", "completions": [".decl Active_in_season(Animal:symbol, Season:symbol)\nActive_in_season(\"sun bear\", \"winter\").\n.decl Answer()\nAnswer() :- Active_in_season(\"sun bear\", \"winter\").\n.output Answer"]}
{"id": 1125, "answer": false, "completion": ".decl Does_action(Person:symbol, Action:symbol, Frequency:symbol)\nDoes_action(\"Osama bin Laden\", \"put wafer on tongue\", \"every Sunday\").\n.decl Answer()\nAnswer() :- Does_action(\"Osama bin Laden\", \"put wafer on tongue\", \"every Sunday\").\n.output Answer", "completions": [".decl Does_action(Person:symbol, Action:symbol, Frequency:symbol)\nDoes_action(\"Osama bin Laden\", \"put wafer on tongue\", \"every Sunday\").\n.decl Answer()\nAnswer() :- Does_action(\"Osama bin Laden\", \"put wafer on tongue\", \"every Sunday\").\n.output Answer"]}
{"id": 1126, "answer": true, "completion": ".decl Has_ships(Navy:symbol, Ships:float)\nHas_ships(\"modern Brazilian Navy\", 110).\nHas_ships(\"Battle of Actium forces\", 500).\n.decl Answer()\nAnswer() :- Has_ships(\"modern Brazilian Navy\", ships1), Has_ships(\"Battle of Actium forces\", ships2), ships1 > ships2.\n.output Answer", "completions": [".decl Has_ships(Navy:symbol, Ships:float)\nHas_ships(\"modern Brazilian Navy\", 110).\nHas_ships(\"Battle of Actium forces\", 500).\n.decl Answer()\nAnswer() :- Has_ships(\"modern Brazilian Navy\", ships1), Has_ships(\"Battle of Actium forces\", ships2), ships1 > ships2.\n.output Answer"]}
{"id": 1127, "answer": true, "completion": ".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Plato\", \"Ancient Greece\").\nLived_in_time(\"Jainism\", \"Ancient India\").\n.decl Overlaps(Time_period_A:symbol, Time_period_B:symbol)\nOverlaps(\"Ancient Greece\", \"Ancient India\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Plato\", time_period1), Lived_in_time(\"Jainism\", time_period2), Overlaps(time_period1, time_period2).\n.output Answer", "completions": [".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Plato\", \"Ancient Greece\").\nLived_in_time(\"Jainism\", \"Ancient India\").\n.decl Overlaps(Time_period_A:symbol, Time_period_B:symbol)\nOverlaps(\"Ancient Greece\", \"Ancient India\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Plato\", time_period1), Lived_in_time(\"Jainism\", time_period2), Overlaps(time_period1, time_period2).\n.output Answer"]}
{"id": 1128, "answer": true, "completion": ".decl Enjoys(Character:symbol, Object:symbol)\nEnjoys(\"dog\", \"Nylabone\").\n.decl Is_a(Character:symbol, Category:symbol)\nIs_a(\"Goofy\", \"dog\").\n.decl Answer()\nAnswer() :- Enjoys(category, \"Nylabone\"), Is_a(\"Goofy\", category).\n.output Answer", "completions": [".decl Enjoys(Character:symbol, Object:symbol)\nEnjoys(\"dog\", \"Nylabone\").\n.decl Is_a(Character:symbol, Category:symbol)\nIs_a(\"Goofy\", \"dog\").\n.decl Answer()\nAnswer() :- Enjoys(category, \"Nylabone\"), Is_a(\"Goofy\", category).\n.output Answer"]}
{"id": 1129, "answer": true, "completion": ".decl Involved_in_plot(Person:symbol, Plot:symbol)\nInvolved_in_plot(\"Guy Fawkes\", \"Gunpowder Plot\").\n.decl Bloodline(Person:symbol, Bloodline:symbol)\nBloodline(\"Mary, Queen of Scots\", \"Stuart\").\n.decl Eliminated_bloodline(Plot:symbol, Bloodline:symbol)\nEliminated_bloodline(\"Gunpowder Plot\", \"Stuart\").\n.decl Answer()\nAnswer() :- Involved_in_plot(person, \"Gunpowder Plot\"), Bloodline(\"Mary, Queen of Scots\", bloodline), Eliminated_bloodline(\"Gunpowder Plot\", bloodline).\n.output Answer", "completions": [".decl Involved_in_plot(Person:symbol, Plot:symbol)\nInvolved_in_plot(\"Guy Fawkes\", \"Gunpowder Plot\").\n.decl Bloodline(Person:symbol, Bloodline:symbol)\nBloodline(\"Mary, Queen of Scots\", \"Stuart\").\n.decl Eliminated_bloodline(Plot:symbol, Bloodline:symbol)\nEliminated_bloodline(\"Gunpowder Plot\", \"Stuart\").\n.decl Answer()\nAnswer() :- Involved_in_plot(person, \"Gunpowder Plot\"), Bloodline(\"Mary, Queen of Scots\", bloodline), Eliminated_bloodline(\"Gunpowder Plot\", bloodline).\n.output Answer"]}
{"id": 1130, "answer": true, "completion": ".decl Produced_by(Producer:symbol, Movie:symbol)\nProduced_by(\"Paramount Pictures\", \"Titanic\").\n.decl Is_Paramount_leader(Person:symbol)\nIs_Paramount_leader(\"Deng Xiaoping\").\n.decl Answer()\nAnswer() :- Produced_by(\"Paramount Pictures\", \"Titanic\"), Is_Paramount_leader(producer).\n.output Answer", "completions": [".decl Produced_by(Producer:symbol, Movie:symbol)\nProduced_by(\"Paramount Pictures\", \"Titanic\").\n.decl Is_Paramount_leader(Person:symbol)\nIs_Paramount_leader(\"Deng Xiaoping\").\n.decl Answer()\nAnswer() :- Produced_by(\"Paramount Pictures\", \"Titanic\"), Is_Paramount_leader(producer).\n.output Answer"]}
{"id": 1131, "answer": true, "completion": ".decl Found_in_section(Item:symbol, Section:symbol)\nFound_in_section(\"parsley\", \"produce\").\nFound_in_section(\"parsley\", \"spices\").\n.decl Answer()\nAnswer() :- Found_in_section(\"parsley\", section1), Found_in_section(\"parsley\", section2), section1 != section2.\n.output Answer", "completions": [".decl Found_in_section(Item:symbol, Section:symbol)\nFound_in_section(\"parsley\", \"produce\").\nFound_in_section(\"parsley\", \"spices\").\n.decl Answer()\nAnswer() :- Found_in_section(\"parsley\", section1), Found_in_section(\"parsley\", section2), section1 != section2.\n.output Answer"]}
{"id": 1132, "answer": true, "completion": ".decl Thrives_in(Plant:symbol, Environment:symbol)\nThrives_in(\"Spartina Patens\", \"salt marshes\").\n.decl Is_in(Environment:symbol, Location:symbol)\nIs_in(\"salt marshes\", \"coastal areas\").\nIs_in(\"Sahara Desert\", \"Africa\").\n.decl Answer()\nAnswer() :- Thrives_in(\"Spartina Patens\", environment), Is_in(environment, \"Sahara Desert\").\n.output Answer", "completions": [".decl Thrives_in(Plant:symbol, Environment:symbol)\nThrives_in(\"Spartina Patens\", \"salt marshes\").\n.decl Is_in(Environment:symbol, Location:symbol)\nIs_in(\"salt marshes\", \"coastal areas\").\nIs_in(\"Sahara Desert\", \"Africa\").\n.decl Answer()\nAnswer() :- Thrives_in(\"Spartina Patens\", environment), Is_in(environment, \"Sahara Desert\").\n.output Answer"]}
{"id": 1133, "answer": true, "completion": ".decl Knows_sign_language(Person:symbol, Knows:float)\nKnows_sign_language(\"Jackie Chan\", 0).\n.decl Is_deaf(Person:symbol, Deaf:float)\nIs_deaf(\"deaf person\", 1).\n.decl Answer()\nAnswer() :- Knows_sign_language(\"Jackie Chan\", knows), Is_deaf(\"deaf person\", deaf), knows == 0, deaf == 1.\n.output Answer", "completions": [".decl Knows_sign_language(Person:symbol, Knows:float)\nKnows_sign_language(\"Jackie Chan\", 0).\n.decl Is_deaf(Person:symbol, Deaf:float)\nIs_deaf(\"deaf person\", 1).\n.decl Answer()\nAnswer() :- Knows_sign_language(\"Jackie Chan\", knows), Is_deaf(\"deaf person\", deaf), knows == 0, deaf == 1.\n.output Answer"]}
{"id": 1134, "answer": true, "completion": ".decl Uses_material(Product:symbol, Material:symbol)\nUses_material(\"beeswax alternative\", \"beeswax\").\nUses_material(\"cling wrap\", \"plastic\").\n.decl Is_alternative(Product_A:symbol, Product_B:symbol)\nIs_alternative(\"beeswax alternative\", \"cling wrap\").\n.decl Answer()\nAnswer() :- Is_alternative(product1, \"cling wrap\"), Uses_material(product1, \"plastic\").\nAnswer() :- Is_alternative(product1, \"cling wrap\"), Uses_material(product1, material1), Uses_material(\"cling wrap\", material2), material1 != material2.\n.output Answer", "completions": [".decl Uses_material(Product:symbol, Material:symbol)\nUses_material(\"beeswax alternative\", \"beeswax\").\nUses_material(\"cling wrap\", \"plastic\").\n.decl Is_alternative(Product_A:symbol, Product_B:symbol)\nIs_alternative(\"beeswax alternative\", \"cling wrap\").\n.decl Answer()\nAnswer() :- Is_alternative(product1, \"cling wrap\"), Uses_material(product1, \"plastic\").\nAnswer() :- Is_alternative(product1, \"cling wrap\"), Uses_material(product1, material1), Uses_material(\"cling wrap\", material2), material1 != material2.\n.output Answer"]}
{"id": 1135, "answer": true, "completion": ".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Everest\", 8848).\nHas_height(\"Mount Emei\", 3099).\n.decl Climbed(Person:symbol, Mountain:symbol)\nClimbed(\"Kami Rita\", \"Mount Everest\").\n.decl Answer()\nAnswer() :- Climbed(\"Kami Rita\", mountain1), Has_height(mountain1, height1), Has_height(\"Mount Emei\", height2), height1 >= height2.\n.output Answer", "completions": [".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Everest\", 8848).\nHas_height(\"Mount Emei\", 3099).\n.decl Climbed(Person:symbol, Mountain:symbol)\nClimbed(\"Kami Rita\", \"Mount Everest\").\n.decl Answer()\nAnswer() :- Climbed(\"Kami Rita\", mountain1), Has_height(mountain1, height1), Has_height(\"Mount Emei\", height2), height1 >= height2.\n.output Answer"]}
{"id": 1136, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Nancy Pelosi\", 1940).\n.decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"attack on Pearl Harbor\", 1941).\n.decl Alive_during_event(Person:symbol, Event:symbol)\nAlive_during_event(person, event) :- Born_in_year(person, birth_year), Happened_in_year(event, event_year), birth_year <= event_year.\n.decl Answer()\nAnswer() :- Alive_during_event(\"Nancy Pelosi\", \"attack on Pearl Harbor\").\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Nancy Pelosi\", 1940).\n.decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"attack on Pearl Harbor\", 1941).\n.decl Alive_during_event(Person:symbol, Event:symbol)\nAlive_during_event(person, event) :- Born_in_year(person, birth_year), Happened_in_year(event, event_year), birth_year <= event_year.\n.decl Answer()\nAnswer() :- Alive_during_event(\"Nancy Pelosi\", \"attack on Pearl Harbor\").\n.output Answer"]}
{"id": 1137, "answer": false, "completion": ".decl Has_GDP(Country:symbol, Year:float, GDP:float)\nHas_GDP(\"US\", 2018, 20494000).\n.decl Has_n_commas(Number:float, N_commas:float)\nHas_n_commas(1000, 1).\nHas_n_commas(1000000, 2).\nHas_n_commas(1000000000, 3).\n.decl Answer()\nAnswer() :- Has_GDP(\"US\", 2018, gdp), Has_n_commas(number, 3), gdp >= number.\n.output Answer", "completions": [".decl Has_GDP(Country:symbol, Year:float, GDP:float)\nHas_GDP(\"US\", 2018, 20494000).\n.decl Has_n_commas(Number:float, N_commas:float)\nHas_n_commas(1000, 1).\nHas_n_commas(1000000, 2).\nHas_n_commas(1000000000, 3).\n.decl Answer()\nAnswer() :- Has_GDP(\"US\", 2018, gdp), Has_n_commas(number, 3), gdp >= number.\n.output Answer"]}
{"id": 1138, "answer": true, "completion": ".decl Uses_adhesive(Tailor:symbol, Object:symbol)\nUses_adhesive(\"cheap tailor\", \"shorter hem on slacks\").\n.decl Is_expensive(Tailor:symbol)\nIs_expensive(\"expensive tailor\").\n.decl Answer()\nAnswer() :- Is_expensive(tailor), Uses_adhesive(tailor, \"shorter hem on slacks\").\n.output Answer", "completions": [".decl Uses_adhesive(Tailor:symbol, Object:symbol)\nUses_adhesive(\"cheap tailor\", \"shorter hem on slacks\").\n.decl Is_expensive(Tailor:symbol)\nIs_expensive(\"expensive tailor\").\n.decl Answer()\nAnswer() :- Is_expensive(tailor), Uses_adhesive(tailor, \"shorter hem on slacks\").\n.output Answer"]}
{"id": 1139, "answer": true, "completion": ".decl Has_emotion(Animal:symbol, Emotion:symbol)\nHas_emotion(\"human\", \"disgust\").\n.decl Is_related(Animal_A:symbol, Animal_B:symbol)\nIs_related(\"frog\", \"amphibian\").\nIs_related(\"human\", \"mammal\").\n.decl Answer()\nAnswer() :- Has_emotion(\"frog\", \"disgust\").\nAnswer() :- Has_emotion(animal, \"disgust\"), Is_related(\"frog\", group1), Is_related(animal, group1).\n.output Answer", "completions": [".decl Has_emotion(Animal:symbol, Emotion:symbol)\nHas_emotion(\"human\", \"disgust\").\n.decl Is_related(Animal_A:symbol, Animal_B:symbol)\nIs_related(\"frog\", \"amphibian\").\nIs_related(\"human\", \"mammal\").\n.decl Answer()\nAnswer() :- Has_emotion(\"frog\", \"disgust\").\nAnswer() :- Has_emotion(animal, \"disgust\"), Is_related(\"frog\", group1), Is_related(animal, group1).\n.output Answer"]}
{"id": 1140, "answer": false, "completion": ".decl Has_risk(Profession:symbol, Risk:symbol)\nHas_risk(\"clerk of Supreme Court of Canada\", \"low\").\n.decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"someone\", \"seismophobia\").\n.decl Risky_for_phobia(Phobia:symbol, Risk:symbol)\nRisky_for_phobia(\"seismophobia\", \"high\").\n.decl Answer()\nAnswer() :- Has_risk(\"clerk of Supreme Court of Canada\", risk), Has_phobia(\"someone\", phobia), Risky_for_phobia(phobia, risky_risk), risk != risky_risk.\n.output Answer", "completions": [".decl Has_risk(Profession:symbol, Risk:symbol)\nHas_risk(\"clerk of Supreme Court of Canada\", \"low\").\n.decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"someone\", \"seismophobia\").\n.decl Risky_for_phobia(Phobia:symbol, Risk:symbol)\nRisky_for_phobia(\"seismophobia\", \"high\").\n.decl Answer()\nAnswer() :- Has_risk(\"clerk of Supreme Court of Canada\", risk), Has_phobia(\"someone\", phobia), Risky_for_phobia(phobia, risky_risk), risk != risky_risk.\n.output Answer"]}
{"id": 1141, "answer": true, "completion": ".decl Sells_item_in_month(Store:symbol, Item:symbol, Month:symbol)\nSells_item_in_month(\"Home Depot\", \"item\", \"September\").\n.decl Has_zodiac_sign(Month:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"September\", \"Virgo\").\nHas_zodiac_sign(\"September\", \"Libra\").\n.decl Answer()\nAnswer() :- Sells_item_in_month(\"Home Depot\", \"item\", month), Has_zodiac_sign(month, \"Libra\").\n.output Answer", "completions": [".decl Sells_item_in_month(Store:symbol, Item:symbol, Month:symbol)\nSells_item_in_month(\"Home Depot\", \"item\", \"September\").\n.decl Has_zodiac_sign(Month:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"September\", \"Virgo\").\nHas_zodiac_sign(\"September\", \"Libra\").\n.decl Answer()\nAnswer() :- Sells_item_in_month(\"Home Depot\", \"item\", month), Has_zodiac_sign(month, \"Libra\").\n.output Answer"]}
{"id": 1142, "answer": false, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"heladeria\", \"ice cream\").\nSells(\"grocery store\", \"olives\").\n.decl Answer()\nAnswer() :- Sells(\"heladeria\", \"olives\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"heladeria\", \"ice cream\").\nSells(\"grocery store\", \"olives\").\n.decl Answer()\nAnswer() :- Sells(\"heladeria\", \"olives\").\n.output Answer"]}
{"id": 1143, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Al Capone\", 1899).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Al Capone\", 1947).\n.decl Occurs_in_years(Event:symbol, Start_year:float, End_year:float)\nOccurs_in_years(\"Harlem Renaissance\", 1918, 1937).\n.decl Answer()\nAnswer() :- Born_in_year(\"Al Capone\", birth_year), Died_in_year(\"Al Capone\", death_year), Occurs_in_years(\"Harlem Renaissance\", start_year, end_year), birth_year <= start_year, death_year >= end_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Al Capone\", 1899).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Al Capone\", 1947).\n.decl Occurs_in_years(Event:symbol, Start_year:float, End_year:float)\nOccurs_in_years(\"Harlem Renaissance\", 1918, 1937).\n.decl Answer()\nAnswer() :- Born_in_year(\"Al Capone\", birth_year), Died_in_year(\"Al Capone\", death_year), Occurs_in_years(\"Harlem Renaissance\", start_year, end_year), birth_year <= start_year, death_year >= end_year.\n.output Answer"]}
{"id": 1144, "answer": false, "completion": ".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 350).\nHas_weight(\"William Howard Taft\", 340).\n.decl Is_politician(Person:symbol)\nIs_politician(\"Chris Christie\").\nIs_politician(\"William Howard Taft\").\n.decl Is_Republican_governor_of_NJ(Person:symbol)\nIs_Republican_governor_of_NJ(\"Chris Christie\").\n.decl Answer()\nAnswer() :- Is_Republican_governor_of_NJ(person), Has_weight(person, weight1), !Is_politician(person2), Has_weight(person2, weight2), weight1 < weight2.\n.output Answer", "completions": [".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 350).\nHas_weight(\"William Howard Taft\", 340).\n.decl Is_politician(Person:symbol)\nIs_politician(\"Chris Christie\").\nIs_politician(\"William Howard Taft\").\n.decl Is_Republican_governor_of_NJ(Person:symbol)\nIs_Republican_governor_of_NJ(\"Chris Christie\").\n.decl Answer()\nAnswer() :- Is_Republican_governor_of_NJ(person), Has_weight(person, weight1), !Is_politician(person2), Has_weight(person2, weight2), weight1 < weight2.\n.output Answer"]}
{"id": 1145, "answer": true, "completion": ".decl Is_cruel_and_unusual(Punishment:symbol)\nIs_cruel_and_unusual(\"keelhauling\").\n.decl Violates_Eighth_Amendment(Punishment:symbol)\nViolates_Eighth_Amendment(punishment) :- Is_cruel_and_unusual(punishment).\n.decl Answer()\nAnswer() :- Violates_Eighth_Amendment(\"keelhauling\").\n.output Answer", "completions": [".decl Is_cruel_and_unusual(Punishment:symbol)\nIs_cruel_and_unusual(\"keelhauling\").\n.decl Violates_Eighth_Amendment(Punishment:symbol)\nViolates_Eighth_Amendment(punishment) :- Is_cruel_and_unusual(punishment).\n.decl Answer()\nAnswer() :- Violates_Eighth_Amendment(\"keelhauling\").\n.output Answer"]}
{"id": 1146, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Gandhi\", 1869).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Gandhi\", 1948).\n.decl Aired_in_years(Show:symbol, Start_year:float, End_year:float)\nAired_in_years(\"Bonanza\", 1959, 1973).\n.decl Answer()\nAnswer() :- Born_in_year(\"Gandhi\", birth_year), Died_in_year(\"Gandhi\", death_year), Aired_in_years(\"Bonanza\", start_year, end_year), death_year >= start_year, birth_year <= end_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Gandhi\", 1869).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Gandhi\", 1948).\n.decl Aired_in_years(Show:symbol, Start_year:float, End_year:float)\nAired_in_years(\"Bonanza\", 1959, 1973).\n.decl Answer()\nAnswer() :- Born_in_year(\"Gandhi\", birth_year), Died_in_year(\"Gandhi\", death_year), Aired_in_years(\"Bonanza\", start_year, end_year), death_year >= start_year, birth_year <= end_year.\n.output Answer"]}
{"id": 1147, "answer": true, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 67000000).\n.decl Has_casualties(War:symbol, Casualties:float)\nHas_casualties(\"deadliest war\", 60000000).\n.decl Answer()\nAnswer() :- Has_population(\"France\", population), Has_casualties(\"deadliest war\", casualties), casualties >= population.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 67000000).\n.decl Has_casualties(War:symbol, Casualties:float)\nHas_casualties(\"deadliest war\", 60000000).\n.decl Answer()\nAnswer() :- Has_population(\"France\", population), Has_casualties(\"deadliest war\", casualties), casualties >= population.\n.output Answer"]}
{"id": 1148, "answer": false, "completion": ".decl Has_value(Constant:symbol, Value:float)\nHas_value(\"pi\", 3.14159).\nHas_value(\"square root of 5\", 2.23607).\n.decl Answer()\nAnswer() :- Has_value(\"pi\", value1), Has_value(\"square root of 5\", value2), value1 > value2.\n.output Answer", "completions": [".decl Has_value(Constant:symbol, Value:float)\nHas_value(\"pi\", 3.14159).\nHas_value(\"square root of 5\", 2.23607).\n.decl Answer()\nAnswer() :- Has_value(\"pi\", value1), Has_value(\"square root of 5\", value2), value1 > value2.\n.output Answer"]}
{"id": 1149, "answer": true, "completion": ".decl Published_in_year(Book:symbol, Year:float)\nPublished_in_year(\"Harry Potter and the Philosopher's Stone\", 1997).\n.decl Occurred_in_years(Event:symbol, Start_year:float, End_year:float)\nOccurred_in_years(\"Great Depression\", 1929, 1939).\n.decl Answer()\nAnswer() :- Published_in_year(\"Harry Potter and the Philosopher's Stone\", year), Occurred_in_years(\"Great Depression\", start_year, end_year), year >= start_year, year <= end_year.\n.output Answer", "completions": [".decl Published_in_year(Book:symbol, Year:float)\nPublished_in_year(\"Harry Potter and the Philosopher's Stone\", 1997).\n.decl Occurred_in_years(Event:symbol, Start_year:float, End_year:float)\nOccurred_in_years(\"Great Depression\", 1929, 1939).\n.decl Answer()\nAnswer() :- Published_in_year(\"Harry Potter and the Philosopher's Stone\", year), Occurred_in_years(\"Great Depression\", start_year, end_year), year >= start_year, year <= end_year.\n.output Answer"]}
{"id": 1150, "answer": true, "completion": ".decl Requires_Roman_Numerals(Organization:symbol, Requirement:symbol)\nRequires_Roman_Numerals(\"FDA\", \"no\").\n.decl Answer()\nAnswer() :- Requires_Roman_Numerals(\"FDA\", \"yes\").\n.output Answer", "completions": [".decl Requires_Roman_Numerals(Organization:symbol, Requirement:symbol)\nRequires_Roman_Numerals(\"FDA\", \"no\").\n.decl Answer()\nAnswer() :- Requires_Roman_Numerals(\"FDA\", \"yes\").\n.output Answer"]}
{"id": 1151, "answer": true, "completion": ".decl Has_spider_veins(Species:symbol)\nHas_spider_veins(\"human\").\n.decl Is_bumblebee(Species:symbol)\nIs_bumblebee(\"bumblebee\").\n.decl Answer()\nAnswer() :- Is_bumblebee(species), !Has_spider_veins(species).\n.output Answer", "completions": [".decl Has_spider_veins(Species:symbol)\nHas_spider_veins(\"human\").\n.decl Is_bumblebee(Species:symbol)\nIs_bumblebee(\"bumblebee\").\n.decl Answer()\nAnswer() :- Is_bumblebee(species), !Has_spider_veins(species).\n.output Answer"]}
{"id": 1152, "answer": false, "completion": ".decl Origin_of_word(Word:symbol, Origin:symbol)\nOrigin_of_word(\"narcissism\", \"Greek mythology\").\n.decl Rarity_of_origin(Origin:symbol, Rarity:symbol)\nRarity_of_origin(\"Greek mythology\", \"rare\").\n.decl Answer()\nAnswer() :- Origin_of_word(\"narcissism\", origin), Rarity_of_origin(origin, \"rare\").\n.output Answer", "completions": [".decl Origin_of_word(Word:symbol, Origin:symbol)\nOrigin_of_word(\"narcissism\", \"Greek mythology\").\n.decl Rarity_of_origin(Origin:symbol, Rarity:symbol)\nRarity_of_origin(\"Greek mythology\", \"rare\").\n.decl Answer()\nAnswer() :- Origin_of_word(\"narcissism\", origin), Rarity_of_origin(origin, \"rare\").\n.output Answer"]}
{"id": 1153, "answer": true, "completion": ".decl Prioritized(Subject:symbol, Country:symbol)\nPrioritized(\"math\", \"US\").\nPrioritized(\"science\", \"US\").\nPrioritized(\"language arts\", \"US\").\n.decl Answer()\nAnswer() :- Prioritized(\"art\", \"US\").\n.output Answer", "completions": [".decl Prioritized(Subject:symbol, Country:symbol)\nPrioritized(\"math\", \"US\").\nPrioritized(\"science\", \"US\").\nPrioritized(\"language arts\", \"US\").\n.decl Answer()\nAnswer() :- Prioritized(\"art\", \"US\").\n.output Answer"]}
{"id": 1154, "answer": true, "completion": ".decl Mummification(Location:symbol, Status:symbol)\nMummification(\"Andes\", \"prevented\").\n.decl Rainfall(Location:symbol, Effect:symbol)\nRainfall(\"Andes\", \"prevents mummification\").\n.decl Answer()\nAnswer() :- Mummification(location, \"prevented\"), Rainfall(location, \"prevents mummification\").\n.output Answer", "completions": [".decl Mummification(Location:symbol, Status:symbol)\nMummification(\"Andes\", \"prevented\").\n.decl Rainfall(Location:symbol, Effect:symbol)\nRainfall(\"Andes\", \"prevents mummification\").\n.decl Answer()\nAnswer() :- Mummification(location, \"prevented\"), Rainfall(location, \"prevents mummification\").\n.output Answer"]}
{"id": 1155, "answer": true, "completion": ".decl Located_in(Corporation:symbol, City:symbol)\nLocated_in(\"LG Electronics\", \"Seoul\").\n.decl Has_official_bird(City:symbol, Bird:symbol)\nHas_official_bird(\"Seoul\", \"Korean magpie\").\n.decl Has_tail_color(Bird:symbol, Color:symbol)\nHas_tail_color(\"Korean magpie\", \"purplish/blue\").\n.decl Answer()\nAnswer() :- Located_in(\"LG Electronics\", city), Has_official_bird(city, bird), Has_tail_color(bird, \"purplish/blue\").\n.output Answer", "completions": [".decl Located_in(Corporation:symbol, City:symbol)\nLocated_in(\"LG Electronics\", \"Seoul\").\n.decl Has_official_bird(City:symbol, Bird:symbol)\nHas_official_bird(\"Seoul\", \"Korean magpie\").\n.decl Has_tail_color(Bird:symbol, Color:symbol)\nHas_tail_color(\"Korean magpie\", \"purplish/blue\").\n.decl Answer()\nAnswer() :- Located_in(\"LG Electronics\", city), Has_official_bird(city, bird), Has_tail_color(bird, \"purplish/blue\").\n.output Answer"]}
{"id": 1156, "answer": false, "completion": ".decl Needs_soil_condition(Plant:symbol, Soil_condition:symbol)\nNeeds_soil_condition(\"cactus\", \"dry\").\n.decl Answer()\nAnswer() :- Needs_soil_condition(\"cactus\", \"damp\").\nAnswer() :- !Needs_soil_condition(\"cactus\", \"dry\").\n.output Answer", "completions": [".decl Needs_soil_condition(Plant:symbol, Soil_condition:symbol)\nNeeds_soil_condition(\"cactus\", \"dry\").\n.decl Answer()\nAnswer() :- Needs_soil_condition(\"cactus\", \"damp\").\nAnswer() :- !Needs_soil_condition(\"cactus\", \"dry\").\n.output Answer"]}
{"id": 1157, "answer": false, "completion": ".decl Eaten_before(Meal1:symbol, Meal2:symbol)\nEaten_before(\"dessert\", \"dinner\").\nEaten_before(\"breakfast\", \"lunch\").\nEaten_before(\"lunch\", \"dinner\").\n.decl Answer()\nAnswer() :- Eaten_before(\"dessert\", \"breakfast\").\nAnswer() :- Eaten_before(\"dessert\", meal1), Eaten_before(meal1, \"breakfast\").\n.output Answer", "completions": [".decl Eaten_before(Meal1:symbol, Meal2:symbol)\nEaten_before(\"dessert\", \"dinner\").\nEaten_before(\"breakfast\", \"lunch\").\nEaten_before(\"lunch\", \"dinner\").\n.decl Answer()\nAnswer() :- Eaten_before(\"dessert\", \"breakfast\").\nAnswer() :- Eaten_before(\"dessert\", meal1), Eaten_before(meal1, \"breakfast\").\n.output Answer"]}
{"id": 1158, "answer": false, "completion": ".decl Inspired_by(Artist_A:symbol, Artist_B:symbol)\nInspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.output Answer", "completions": [".decl Inspired_by(Artist_A:symbol, Artist_B:symbol)\nInspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.output Answer"]}
{"id": 1159, "answer": true, "completion": ".decl Has_n_awards(Person:symbol, Award:symbol, N_awards:float)\nHas_n_awards(\"Johnny Carson\", \"Emmy\", 6).\n.decl Fits_in_carton(Object:symbol, N_objects:float)\nFits_in_carton(\"egg\", 12).\n.decl Answer()\nAnswer() :- Has_n_awards(\"Johnny Carson\", \"Emmy\", n_awards), Fits_in_carton(\"egg\", n_objects), n_awards >= n_objects.\n.output Answer", "completions": [".decl Has_n_awards(Person:symbol, Award:symbol, N_awards:float)\nHas_n_awards(\"Johnny Carson\", \"Emmy\", 6).\n.decl Fits_in_carton(Object:symbol, N_objects:float)\nFits_in_carton(\"egg\", 12).\n.decl Answer()\nAnswer() :- Has_n_awards(\"Johnny Carson\", \"Emmy\", n_awards), Fits_in_carton(\"egg\", n_objects), n_awards >= n_objects.\n.output Answer"]}
{"id": 1160, "answer": false, "completion": ".decl Reads(Person:symbol, Subject:symbol)\nReads(\"Julius Caesar\", \"history\").\nReads(\"Julius Caesar\", \"military strategy\").\nReads(\"Julius Caesar\", \"politics\").\n.decl Answer()\nAnswer() :- Reads(\"Julius Caesar\", \"pharmacology\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Subject:symbol)\nReads(\"Julius Caesar\", \"history\").\nReads(\"Julius Caesar\", \"military strategy\").\nReads(\"Julius Caesar\", \"politics\").\n.decl Answer()\nAnswer() :- Reads(\"Julius Caesar\", \"pharmacology\").\n.output Answer"]}
{"id": 1161, "answer": false, "completion": ".decl Popular_in_month(Character:symbol, Month:symbol)\nPopular_in_month(\"Easter Bunny\", \"April\").\n.decl Answer()\nAnswer() :- Popular_in_month(\"Easter Bunny\", \"September\").\n.output Answer", "completions": [".decl Popular_in_month(Character:symbol, Month:symbol)\nPopular_in_month(\"Easter Bunny\", \"April\").\n.decl Answer()\nAnswer() :- Popular_in_month(\"Easter Bunny\", \"September\").\n.output Answer"]}
{"id": 1162, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"alligator\", \"freshwater\").\nLives_in(\"saltwater crocodile\", \"saltwater\").\n.decl Habitat_type(Location:symbol, Type:symbol)\nHabitat_type(\"Lake Urmia\", \"saltwater\").\n.decl Wins_battle(Animal_A:symbol, Animal_B:symbol, Location:symbol)\n.decl Answer()\nAnswer() :- Lives_in(\"alligator\", habitat1), Lives_in(\"saltwater crocodile\", habitat2), Habitat_type(\"Lake Urmia\", habitat2), Wins_battle(\"alligator\", \"saltwater crocodile\", \"Lake Urmia\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"alligator\", \"freshwater\").\nLives_in(\"saltwater crocodile\", \"saltwater\").\n.decl Habitat_type(Location:symbol, Type:symbol)\nHabitat_type(\"Lake Urmia\", \"saltwater\").\n.decl Wins_battle(Animal_A:symbol, Animal_B:symbol, Location:symbol)\n.decl Answer()\nAnswer() :- Lives_in(\"alligator\", habitat1), Lives_in(\"saltwater crocodile\", habitat2), Habitat_type(\"Lake Urmia\", habitat2), Wins_battle(\"alligator\", \"saltwater crocodile\", \"Lake Urmia\").\n.output Answer"]}
{"id": 1163, "answer": true, "completion": ".decl Has_non_vegan_ingredient(Cuisine:symbol, Ingredient:symbol)\nHas_non_vegan_ingredient(\"Hawaii\", \"pork\").\nHas_non_vegan_ingredient(\"Hawaii\", \"fish\").\n.decl Answer()\nAnswer() :- !Has_non_vegan_ingredient(\"Hawaii\", ingredient).\n.output Answer", "completions": [".decl Has_non_vegan_ingredient(Cuisine:symbol, Ingredient:symbol)\nHas_non_vegan_ingredient(\"Hawaii\", \"pork\").\nHas_non_vegan_ingredient(\"Hawaii\", \"fish\").\n.decl Answer()\nAnswer() :- !Has_non_vegan_ingredient(\"Hawaii\", ingredient).\n.output Answer"]}
{"id": 1164, "answer": true, "completion": ".decl Has_been_in_band(Person:symbol, Band:symbol)\nHas_been_in_band(\"Ringo Starr\", \"The Beatles\").\nHas_been_in_band(\"Ringo Starr\", \"Ringo Starr & His All-Starr Band\").\nHas_been_in_band(\"Ringo Starr\", \"Plastic Ono Band\").\n.decl Has_been_in_n_bands(Person:symbol, N_bands:float)\nHas_been_in_n_bands(\"Ringo Starr\", 3).\n.decl Average_n_bands(N_bands:float)\nAverage_n_bands(2).\n.decl Answer()\nAnswer() :- Has_been_in_n_bands(\"Ringo Starr\", n_bands), Average_n_bands(average_n_bands), n_bands > average_n_bands.\n.output Answer", "completions": [".decl Has_been_in_band(Person:symbol, Band:symbol)\nHas_been_in_band(\"Ringo Starr\", \"The Beatles\").\nHas_been_in_band(\"Ringo Starr\", \"Ringo Starr & His All-Starr Band\").\nHas_been_in_band(\"Ringo Starr\", \"Plastic Ono Band\").\n.decl Has_been_in_n_bands(Person:symbol, N_bands:float)\nHas_been_in_n_bands(\"Ringo Starr\", 3).\n.decl Average_n_bands(N_bands:float)\nAverage_n_bands(2).\n.decl Answer()\nAnswer() :- Has_been_in_n_bands(\"Ringo Starr\", n_bands), Average_n_bands(average_n_bands), n_bands > average_n_bands.\n.output Answer"]}
{"id": 1165, "answer": false, "completion": ".decl Has_skill(Character:symbol, Skill:symbol, Level:float)\nHas_skill(\"Achilles\", \"combat\", 10).\nHas_skill(\"Achilles\", \"speed\", 9).\nHas_skill(\"Legolas\", \"combat\", 8).\nHas_skill(\"Legolas\", \"speed\", 10).\nHas_skill(\"Legolas\", \"archery\", 10).\n\n.decl Dominates(Character_A:symbol, Character_B:symbol)\nDominates(characterA, characterB) :- Has_skill(characterA, skill1, levelA1), Has_skill(characterB, skill1, levelB1), levelA1 >= levelB1, Has_skill(characterA, skill2, levelA2), Has_skill(characterB, skill2, levelB2), levelA2 >= levelB2, skill1 != skill2.\n\n.decl Answer()\nAnswer() :- Dominates(\"Achilles\", \"Legolas\").\n.output Answer", "completions": [".decl Has_skill(Character:symbol, Skill:symbol, Level:float)\nHas_skill(\"Achilles\", \"combat\", 10).\nHas_skill(\"Achilles\", \"speed\", 9).\nHas_skill(\"Legolas\", \"combat\", 8).\nHas_skill(\"Legolas\", \"speed\", 10).\nHas_skill(\"Legolas\", \"archery\", 10).\n\n.decl Dominates(Character_A:symbol, Character_B:symbol)\nDominates(characterA, characterB) :- Has_skill(characterA, skill1, levelA1), Has_skill(characterB, skill1, levelB1), levelA1 >= levelB1, Has_skill(characterA, skill2, levelA2), Has_skill(characterB, skill2, levelB2), levelA2 >= levelB2, skill1 != skill2.\n\n.decl Answer()\nAnswer() :- Dominates(\"Achilles\", \"Legolas\").\n.output Answer"]}
{"id": 1166, "answer": false, "completion": ".decl Contains_carbs(Food:symbol)\nContains_carbs(\"Dosa\").\n.decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"someone\", \"keto diet\").\n.decl Avoids_carbs(Diet:symbol)\nAvoids_carbs(\"keto diet\").\n.decl Can_eat(Person:symbol, Food:symbol)\n.decl Answer()\nAnswer() :- Follows_diet(person, diet), Avoids_carbs(diet), !Contains_carbs(\"Dosa\"), Can_eat(person, \"Dosa\").\n.output Answer", "completions": [".decl Contains_carbs(Food:symbol)\nContains_carbs(\"Dosa\").\n.decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"someone\", \"keto diet\").\n.decl Avoids_carbs(Diet:symbol)\nAvoids_carbs(\"keto diet\").\n.decl Can_eat(Person:symbol, Food:symbol)\n.decl Answer()\nAnswer() :- Follows_diet(person, diet), Avoids_carbs(diet), !Contains_carbs(\"Dosa\"), Can_eat(person, \"Dosa\").\n.output Answer"]}
{"id": 1167, "answer": false, "completion": ".decl Has_haircut(Band:symbol, Year:float)\nHas_haircut(\"Metallica\", 1996).\n.decl Has_sales(Band:symbol, Year:float, Sales:float)\nHas_sales(\"Metallica\", 1995, 10000000).\nHas_sales(\"Metallica\", 1996, 8000000).\nHas_sales(\"Metallica\", 1997, 7000000).\n.decl Answer()\nAnswer() :- Has_haircut(\"Metallica\", year1), Has_sales(\"Metallica\", year1, sales1), Has_sales(\"Metallica\", year2, sales2), year2 < year1, sales2 > sales1.\n.output Answer", "completions": [".decl Has_haircut(Band:symbol, Year:float)\nHas_haircut(\"Metallica\", 1996).\n.decl Has_sales(Band:symbol, Year:float, Sales:float)\nHas_sales(\"Metallica\", 1995, 10000000).\nHas_sales(\"Metallica\", 1996, 8000000).\nHas_sales(\"Metallica\", 1997, 7000000).\n.decl Answer()\nAnswer() :- Has_haircut(\"Metallica\", year1), Has_sales(\"Metallica\", year1, sales1), Has_sales(\"Metallica\", year2, sales2), year2 < year1, sales2 > sales1.\n.output Answer"]}
{"id": 1168, "answer": true, "completion": ".decl Is_character(Character:symbol, Game:symbol)\nIs_character(\"Quiet\", \"Metal Gear\").\n.decl Is_lecturer(Person:symbol, Institution:symbol)\nIs_lecturer(\"Quiet\", \"Haub\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Quiet\", \"mute\").\n.decl Answer()\nAnswer() :- Is_character(\"Quiet\", \"Metal Gear\"), Is_lecturer(\"Quiet\", \"Haub\"), Has_trait(\"Quiet\", \"mute\").\n.output Answer", "completions": [".decl Is_character(Character:symbol, Game:symbol)\nIs_character(\"Quiet\", \"Metal Gear\").\n.decl Is_lecturer(Person:symbol, Institution:symbol)\nIs_lecturer(\"Quiet\", \"Haub\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Quiet\", \"mute\").\n.decl Answer()\nAnswer() :- Is_character(\"Quiet\", \"Metal Gear\"), Is_lecturer(\"Quiet\", \"Haub\"), Has_trait(\"Quiet\", \"mute\").\n.output Answer"]}
{"id": 1169, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Mount Emei\", 1e12). // Assuming a hypothetical weight for Mount Emei\nHas_weight(\"Liebherr LTM 11200-9.1\", 1200). // Maximum lifting capacity in tons\n\n.decl Can_lift(Crane:symbol, Object:symbol)\nCan_lift(\"Liebherr LTM 11200-9.1\", \"Mount Emei\") :- Has_weight(\"Liebherr LTM 11200-9.1\", crane_weight), Has_weight(\"Mount Emei\", object_weight), crane_weight >= object_weight.\n\n.decl Answer()\nAnswer() :- Can_lift(\"Liebherr LTM 11200-9.1\", \"Mount Emei\").\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Mount Emei\", 1e12). // Assuming a hypothetical weight for Mount Emei\nHas_weight(\"Liebherr LTM 11200-9.1\", 1200). // Maximum lifting capacity in tons\n\n.decl Can_lift(Crane:symbol, Object:symbol)\nCan_lift(\"Liebherr LTM 11200-9.1\", \"Mount Emei\") :- Has_weight(\"Liebherr LTM 11200-9.1\", crane_weight), Has_weight(\"Mount Emei\", object_weight), crane_weight >= object_weight.\n\n.decl Answer()\nAnswer() :- Can_lift(\"Liebherr LTM 11200-9.1\", \"Mount Emei\").\n.output Answer"]}
{"id": 1170, "answer": true, "completion": ".decl Is_sign_of(Object:symbol, Sign:symbol, Condition:symbol)\nIs_sign_of(\"snoring\", \"poor\", \"breathing while sleeping\").\n.decl Answer()\nAnswer() :- Is_sign_of(\"snoring\", \"good\", \"breathing while sleeping\").\n.output Answer", "completions": [".decl Is_sign_of(Object:symbol, Sign:symbol, Condition:symbol)\nIs_sign_of(\"snoring\", \"poor\", \"breathing while sleeping\").\n.decl Answer()\nAnswer() :- Is_sign_of(\"snoring\", \"good\", \"breathing while sleeping\").\n.output Answer"]}
{"id": 1171, "answer": false, "completion": ".decl Is_band(Band:symbol, Origin:symbol)\nIs_band(\"ABBA\", \"Sweden\").\nIs_band(\"The Beatles\", \"United Kingdom\").\n.decl Has_genre(Band:symbol, Genre:symbol)\nHas_genre(\"ABBA\", \"pop\").\nHas_genre(\"The Beatles\", \"rock\").\n.decl Answer()\nAnswer() :- Is_band(\"ABBA\", origin1), Is_band(\"The Beatles\", origin2), origin1 != origin2, Has_genre(\"ABBA\", genre1), Has_genre(\"The Beatles\", genre2), genre1 != genre2.\n.output Answer", "completions": [".decl Is_band(Band:symbol, Origin:symbol)\nIs_band(\"ABBA\", \"Sweden\").\nIs_band(\"The Beatles\", \"United Kingdom\").\n.decl Has_genre(Band:symbol, Genre:symbol)\nHas_genre(\"ABBA\", \"pop\").\nHas_genre(\"The Beatles\", \"rock\").\n.decl Answer()\nAnswer() :- Is_band(\"ABBA\", origin1), Is_band(\"The Beatles\", origin2), origin1 != origin2, Has_genre(\"ABBA\", genre1), Has_genre(\"The Beatles\", genre2), genre1 != genre2.\n.output Answer"]}
{"id": 1172, "answer": false, "completion": ".decl Was_artist(Artist:symbol, Movement:symbol)\nWas_artist(\"Jackson Pollock\", \"Abstract Expressionism\").\n.decl Is_straight_edge(Movement:symbol)\nIs_straight_edge(\"Straight Edge\").\n.decl Answer()\nAnswer() :- Was_artist(\"Jackson Pollock\", movement), Is_straight_edge(movement).\n.output Answer", "completions": [".decl Was_artist(Artist:symbol, Movement:symbol)\nWas_artist(\"Jackson Pollock\", \"Abstract Expressionism\").\n.decl Is_straight_edge(Movement:symbol)\nIs_straight_edge(\"Straight Edge\").\n.decl Answer()\nAnswer() :- Was_artist(\"Jackson Pollock\", movement), Is_straight_edge(movement).\n.output Answer"]}
{"id": 1173, "answer": true, "completion": ".decl Is_solo_play(Game:symbol, Solo_play:symbol)\nIs_solo_play(\"Dungeons and Dragons\", \"not_well_suited\").\n.decl Answer()\nAnswer() :- Is_solo_play(\"Dungeons and Dragons\", \"well_suited\").\n.output Answer", "completions": [".decl Is_solo_play(Game:symbol, Solo_play:symbol)\nIs_solo_play(\"Dungeons and Dragons\", \"not_well_suited\").\n.decl Answer()\nAnswer() :- Is_solo_play(\"Dungeons and Dragons\", \"well_suited\").\n.output Answer"]}
{"id": 1174, "answer": true, "completion": ".decl Has_component(Object:symbol, Component:symbol)\nHas_component(\"car\", \"fuel injector\").\nHas_component(\"game engine\", \"renderer\").\n.decl Answer()\nAnswer() :- Has_component(\"game engine\", \"fuel injector\").\n.output Answer", "completions": [".decl Has_component(Object:symbol, Component:symbol)\nHas_component(\"car\", \"fuel injector\").\nHas_component(\"game engine\", \"renderer\").\n.decl Answer()\nAnswer() :- Has_component(\"game engine\", \"fuel injector\").\n.output Answer"]}
{"id": 1175, "answer": true, "completion": ".decl Child_of_Heracles(Child:symbol)\nChild_of_Heracles(\"Hyllus\").\nChild_of_Heracles(\"Ctesippus\").\nChild_of_Heracles(\"Glenus\").\nChild_of_Heracles(\"Oneites\").\nChild_of_Heracles(\"Agelaus\").\nChild_of_Heracles(\"Telephus\").\n\n.decl Present_at_Funeral_Pyre(Person:symbol)\nPresent_at_Funeral_Pyre(\"Hyllus\").\nPresent_at_Funeral_Pyre(\"Ctesippus\").\nPresent_at_Funeral_Pyre(\"Glenus\").\nPresent_at_Funeral_Pyre(\"Oneites\").\nPresent_at_Funeral_Pyre(\"Agelaus\").\n\n.decl Answer()\nAnswer() :- Child_of_Heracles(child), !Present_at_Funeral_Pyre(child).\nAnswer() = false :- !Answer().\n.output Answer", "completions": [".decl Child_of_Heracles(Child:symbol)\nChild_of_Heracles(\"Hyllus\").\nChild_of_Heracles(\"Ctesippus\").\nChild_of_Heracles(\"Glenus\").\nChild_of_Heracles(\"Oneites\").\nChild_of_Heracles(\"Agelaus\").\nChild_of_Heracles(\"Telephus\").\n\n.decl Present_at_Funeral_Pyre(Person:symbol)\nPresent_at_Funeral_Pyre(\"Hyllus\").\nPresent_at_Funeral_Pyre(\"Ctesippus\").\nPresent_at_Funeral_Pyre(\"Glenus\").\nPresent_at_Funeral_Pyre(\"Oneites\").\nPresent_at_Funeral_Pyre(\"Agelaus\").\n\n.decl Answer()\nAnswer() :- Child_of_Heracles(child), !Present_at_Funeral_Pyre(child).\nAnswer() = false :- !Answer().\n.output Answer"]}
{"id": 1176, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"moon\", 2.1958e10).\nHas_volume(\"Black Sea\", 5.4e13).\n.decl Answer()\nAnswer() :- Has_volume(\"moon\", volume1), Has_volume(\"Black Sea\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"moon\", 2.1958e10).\nHas_volume(\"Black Sea\", 5.4e13).\n.decl Answer()\nAnswer() :- Has_volume(\"moon\", volume1), Has_volume(\"Black Sea\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 1177, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"peach blossoms\", \"spring\").\nHappens_in_time(\"Andromeda\", \"autumn\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"March\", \"spring\").\nIn_season(\"April\", \"spring\").\nIn_season(\"May\", \"spring\").\nIn_season(\"September\", \"autumn\").\nIn_season(\"October\", \"autumn\").\nIn_season(\"November\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"peach blossoms\", season1), Happens_in_time(\"Andromeda\", season2), season1 = season2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"peach blossoms\", \"spring\").\nHappens_in_time(\"Andromeda\", \"autumn\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"March\", \"spring\").\nIn_season(\"April\", \"spring\").\nIn_season(\"May\", \"spring\").\nIn_season(\"September\", \"autumn\").\nIn_season(\"October\", \"autumn\").\nIn_season(\"November\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"peach blossoms\", season1), Happens_in_time(\"Andromeda\", season2), season1 = season2.\n.output Answer"]}
{"id": 1178, "answer": false, "completion": ".decl Has_Bacon_Number(Actor:symbol, Bacon_Number:float)\nHas_Bacon_Number(\"Al Pacino\", 2).\nHas_Bacon_Number(\"Margaret Qualley\", 2).\n.decl Answer()\nAnswer() :- Has_Bacon_Number(\"Al Pacino\", bacon_number1), Has_Bacon_Number(\"Margaret Qualley\", bacon_number2), bacon_number1 = bacon_number2.\n.output Answer", "completions": [".decl Has_Bacon_Number(Actor:symbol, Bacon_Number:float)\nHas_Bacon_Number(\"Al Pacino\", 2).\nHas_Bacon_Number(\"Margaret Qualley\", 2).\n.decl Answer()\nAnswer() :- Has_Bacon_Number(\"Al Pacino\", bacon_number1), Has_Bacon_Number(\"Margaret Qualley\", bacon_number2), bacon_number1 = bacon_number2.\n.output Answer"]}
{"id": 1179, "answer": true, "completion": ".decl Written_in_shorthand(Document:symbol, Shorthand:symbol)\nWritten_in_shorthand(\"tenth Amendment to the Constitution\", \"Pitman shorthand\").\n.decl Answer()\nAnswer() :- Written_in_shorthand(\"tenth Amendment to the Constitution\", \"Pitman shorthand\").\n.output Answer", "completions": [".decl Written_in_shorthand(Document:symbol, Shorthand:symbol)\nWritten_in_shorthand(\"tenth Amendment to the Constitution\", \"Pitman shorthand\").\n.decl Answer()\nAnswer() :- Written_in_shorthand(\"tenth Amendment to the Constitution\", \"Pitman shorthand\").\n.output Answer"]}
{"id": 1180, "answer": false, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Ivan the Terrible\", \"terrible\").\nHas_nickname(\"Vasily III\", \"not terrible\").\nHas_nickname(\"Ivan III\", \"not terrible\").\n.decl Is_father_and_grandfather(Father:symbol, Grandfather:symbol, Person:symbol)\nIs_father_and_grandfather(\"Vasily III\", \"Ivan III\", \"Ivan the Terrible\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Ivan the Terrible\", nickname1), Has_nickname(father, nickname2), Has_nickname(grandfather, nickname3), Is_father_and_grandfather(father, grandfather, \"Ivan the Terrible\"), nickname2 != \"terrible\", nickname3 != \"terrible\".\n.output Answer", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Ivan the Terrible\", \"terrible\").\nHas_nickname(\"Vasily III\", \"not terrible\").\nHas_nickname(\"Ivan III\", \"not terrible\").\n.decl Is_father_and_grandfather(Father:symbol, Grandfather:symbol, Person:symbol)\nIs_father_and_grandfather(\"Vasily III\", \"Ivan III\", \"Ivan the Terrible\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Ivan the Terrible\", nickname1), Has_nickname(father, nickname2), Has_nickname(grandfather, nickname3), Is_father_and_grandfather(father, grandfather, \"Ivan the Terrible\"), nickname2 != \"terrible\", nickname3 != \"terrible\".\n.output Answer"]}
{"id": 1181, "answer": true, "completion": ".decl Has_sibling(Person:symbol, Sibling:symbol)\nHas_sibling(\"Robin Williams\", \"Robert Williams\").\n.decl Has_child(Parent:symbol, Child:symbol)\nHas_child(\"Robin Williams\", \"Zelda Williams\").\nHas_child(\"Robert Williams\", \"Cousin1\").\nHas_child(\"Robert Williams\", \"Cousin2\").\n.decl Has_cousin(Person:symbol, Cousin:symbol)\nHas_cousin(Person, Cousin) :- Has_sibling(Parent1, Parent2), Has_child(Parent1, Person), Has_child(Parent2, Cousin).\n.decl Answer()\nAnswer() :- Has_cousin(\"Zelda Williams\", cousin).\n.output Answer", "completions": [".decl Has_sibling(Person:symbol, Sibling:symbol)\nHas_sibling(\"Robin Williams\", \"Robert Williams\").\n.decl Has_child(Parent:symbol, Child:symbol)\nHas_child(\"Robin Williams\", \"Zelda Williams\").\nHas_child(\"Robert Williams\", \"Cousin1\").\nHas_child(\"Robert Williams\", \"Cousin2\").\n.decl Has_cousin(Person:symbol, Cousin:symbol)\nHas_cousin(Person, Cousin) :- Has_sibling(Parent1, Parent2), Has_child(Parent1, Person), Has_child(Parent2, Cousin).\n.decl Answer()\nAnswer() :- Has_cousin(\"Zelda Williams\", cousin).\n.output Answer"]}
{"id": 1182, "answer": true, "completion": ".decl Found_in(Object:symbol, Text:symbol)\nFound_in(\"thetan levels\", \"Scientology\").\nFound_in(\"New Testament\", \"Christianity\").\n.decl Answer()\nAnswer() :- Found_in(\"thetan levels\", \"New Testament\").\nAnswer() :- Found_in(\"thetan levels\", religion1), Found_in(\"New Testament\", religion2), religion1 = religion2.\n.output Answer", "completions": [".decl Found_in(Object:symbol, Text:symbol)\nFound_in(\"thetan levels\", \"Scientology\").\nFound_in(\"New Testament\", \"Christianity\").\n.decl Answer()\nAnswer() :- Found_in(\"thetan levels\", \"New Testament\").\nAnswer() :- Found_in(\"thetan levels\", religion1), Found_in(\"New Testament\", religion2), religion1 = religion2.\n.output Answer"]}
{"id": 1183, "answer": true, "completion": ".decl Named_after(Object:symbol, Other_object:symbol)\nNamed_after(\"silver dollar pancakes\", \"silver dollar coins\").\n.decl Is_type_of(Type:symbol, Category:symbol)\nIs_type_of(\"silver dollar pancakes\", \"pancakes\").\n.decl Answer()\nAnswer() :- Named_after(type, \"coins\"), Is_type_of(type, \"pancakes\").\n.output Answer", "completions": [".decl Named_after(Object:symbol, Other_object:symbol)\nNamed_after(\"silver dollar pancakes\", \"silver dollar coins\").\n.decl Is_type_of(Type:symbol, Category:symbol)\nIs_type_of(\"silver dollar pancakes\", \"pancakes\").\n.decl Answer()\nAnswer() :- Named_after(type, \"coins\"), Is_type_of(type, \"pancakes\").\n.output Answer"]}
{"id": 1184, "answer": true, "completion": ".decl Has_hump(Animal:symbol, Hump_count:float)\nHas_hump(\"camel\", 1).\nHas_hump(\"camel\", 2).\n.decl Day_of_week(Day:symbol)\nDay_of_week(\"Monday\").\nDay_of_week(\"Tuesday\").\nDay_of_week(\"Wednesday\").\nDay_of_week(\"Thursday\").\nDay_of_week(\"Friday\").\nDay_of_week(\"Saturday\").\nDay_of_week(\"Sunday\").\n.decl Lends_to_jokes(Animal:symbol, Day:symbol)\nLends_to_jokes(\"camel\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Has_hump(\"camel\", hump_count), Day_of_week(\"Wednesday\"), Lends_to_jokes(\"camel\", \"Wednesday\").\n.output Answer", "completions": [".decl Has_hump(Animal:symbol, Hump_count:float)\nHas_hump(\"camel\", 1).\nHas_hump(\"camel\", 2).\n.decl Day_of_week(Day:symbol)\nDay_of_week(\"Monday\").\nDay_of_week(\"Tuesday\").\nDay_of_week(\"Wednesday\").\nDay_of_week(\"Thursday\").\nDay_of_week(\"Friday\").\nDay_of_week(\"Saturday\").\nDay_of_week(\"Sunday\").\n.decl Lends_to_jokes(Animal:symbol, Day:symbol)\nLends_to_jokes(\"camel\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Has_hump(\"camel\", hump_count), Day_of_week(\"Wednesday\"), Lends_to_jokes(\"camel\", \"Wednesday\").\n.output Answer"]}
{"id": 1185, "answer": true, "completion": ".decl Wrestled_on_show(Wrestler:symbol, Show:symbol)\nWrestled_on_show(\"Bruiser Brody\", \"WCCW\").\nWrestled_on_show(\"Bruiser Brody\", \"NJPW\").\n.decl Answer()\nAnswer() :- Wrestled_on_show(\"Bruiser Brody\", \"WWE Raw\").\n.output Answer", "completions": [".decl Wrestled_on_show(Wrestler:symbol, Show:symbol)\nWrestled_on_show(\"Bruiser Brody\", \"WCCW\").\nWrestled_on_show(\"Bruiser Brody\", \"NJPW\").\n.decl Answer()\nAnswer() :- Wrestled_on_show(\"Bruiser Brody\", \"WWE Raw\").\n.output Answer"]}
{"id": 1186, "answer": true, "completion": ".decl Studies(Field:symbol, Subject:symbol)\nStudies(\"zoology\", \"animals\").\n.decl Is_a(Subject:symbol, Category:symbol)\nIs_a(\"strigoi\", \"supernatural\").\n.decl Answer()\nAnswer() :- Studies(\"zoology\", subject), Is_a(\"strigoi\", category), subject != category.\n.output Answer", "completions": [".decl Studies(Field:symbol, Subject:symbol)\nStudies(\"zoology\", \"animals\").\n.decl Is_a(Subject:symbol, Category:symbol)\nIs_a(\"strigoi\", \"supernatural\").\n.decl Answer()\nAnswer() :- Studies(\"zoology\", subject), Is_a(\"strigoi\", category), subject != category.\n.output Answer"]}
{"id": 1187, "answer": true, "completion": ".decl Character(Name:symbol, Race:symbol, Game:symbol)\nCharacter(\"Depala\", \"Draenei\", \"World of Warcraft\").\n.decl Answer(Race:symbol)\nAnswer(Race) :- Character(\"Depala\", Race, \"World of Warcraft\").\n.output Answer", "completions": [".decl Character(Name:symbol, Race:symbol, Game:symbol)\nCharacter(\"Depala\", \"Draenei\", \"World of Warcraft\").\n.decl Answer(Race:symbol)\nAnswer(Race) :- Character(\"Depala\", Race, \"World of Warcraft\").\n.output Answer"]}
{"id": 1188, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"twin1\", 2000).\nBorn_in_year(\"twin2\", 2000).\nBorn_in_year(\"twin3\", 2001).\nBorn_in_year(\"twin4\", 2001).\n.decl Are_twins(Person1:symbol, Person2:symbol)\nAre_twins(\"twin1\", \"twin2\").\nAre_twins(\"twin3\", \"twin4\").\n.decl Answer()\nAnswer() :- Are_twins(person1, person2), Born_in_year(person1, year1), Born_in_year(person2, year2), year1 != year2.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"twin1\", 2000).\nBorn_in_year(\"twin2\", 2000).\nBorn_in_year(\"twin3\", 2001).\nBorn_in_year(\"twin4\", 2001).\n.decl Are_twins(Person1:symbol, Person2:symbol)\nAre_twins(\"twin1\", \"twin2\").\nAre_twins(\"twin3\", \"twin4\").\n.decl Answer()\nAnswer() :- Are_twins(person1, person2), Born_in_year(person1, year1), Born_in_year(person2, year2), year1 != year2.\n.output Answer"]}
{"id": 1189, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Tom Bosley\", 1927).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Tom Bosley\", 2010).\n.decl Released_in_year(Product:symbol, Release_year:float)\nReleased_in_year(\"PlayStation 4\", 2013).\n.decl Enjoys(Person:symbol, Product:symbol)\n.decl Answer()\nAnswer() :- Enjoys(\"Tom Bosley\", \"PlayStation 4\").\nAnswer() :- Born_in_year(\"Tom Bosley\", birth_year), Died_in_year(\"Tom Bosley\", death_year), Released_in_year(\"PlayStation 4\", release_year), birth_year <= release_year, release_year <= death_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Tom Bosley\", 1927).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Tom Bosley\", 2010).\n.decl Released_in_year(Product:symbol, Release_year:float)\nReleased_in_year(\"PlayStation 4\", 2013).\n.decl Enjoys(Person:symbol, Product:symbol)\n.decl Answer()\nAnswer() :- Enjoys(\"Tom Bosley\", \"PlayStation 4\").\nAnswer() :- Born_in_year(\"Tom Bosley\", birth_year), Died_in_year(\"Tom Bosley\", death_year), Released_in_year(\"PlayStation 4\", release_year), birth_year <= release_year, release_year <= death_year.\n.output Answer"]}
{"id": 1190, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\nHas_n_members(\"The Osmonds\", 8).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members1), Has_n_members(\"The Osmonds\", n_members2), n_members1 > n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\nHas_n_members(\"The Osmonds\", 8).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members1), Has_n_members(\"The Osmonds\", n_members2), n_members1 > n_members2.\n.output Answer"]}
{"id": 1191, "answer": false, "completion": ".decl Is_ingredient(Object:symbol, Purpose:symbol)\nIs_ingredient(\"kaffir lime\", \"cooking\").\nIs_ingredient(\"wax\", \"candle making\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"kaffir lime\", \"candle making\").\nAnswer() :- !Is_ingredient(\"kaffir lime\", \"cooking\").\n.output Answer", "completions": [".decl Is_ingredient(Object:symbol, Purpose:symbol)\nIs_ingredient(\"kaffir lime\", \"cooking\").\nIs_ingredient(\"wax\", \"candle making\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"kaffir lime\", \"candle making\").\nAnswer() :- !Is_ingredient(\"kaffir lime\", \"cooking\").\n.output Answer"]}
{"id": 1192, "answer": true, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"football field\", 5350).\nHas_area(\"Alcatraz Island\", 89000).\n.decl Answer()\nAnswer() :- Has_area(\"football field\", area1), Has_area(\"Alcatraz Island\", area2), area1 <= area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"football field\", 5350).\nHas_area(\"Alcatraz Island\", 89000).\n.decl Answer()\nAnswer() :- Has_area(\"football field\", area1), Has_area(\"Alcatraz Island\", area2), area1 <= area2.\n.output Answer"]}
{"id": 1193, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Iberian wolf\", \"Iberian Peninsula\").\n.decl Is_in(Location_A:symbol, Location_B:symbol)\nIs_in(\"Iberian Peninsula\", \"Europe\").\nIs_in(\"Southern United States\", \"United States\").\n.decl Answer()\nAnswer() :- Lives_in(\"Iberian wolf\", location1), Is_in(location1, region1), Is_in(\"Southern United States\", region2), region1 = region2.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Iberian wolf\", \"Iberian Peninsula\").\n.decl Is_in(Location_A:symbol, Location_B:symbol)\nIs_in(\"Iberian Peninsula\", \"Europe\").\nIs_in(\"Southern United States\", \"United States\").\n.decl Answer()\nAnswer() :- Lives_in(\"Iberian wolf\", location1), Is_in(location1, region1), Is_in(\"Southern United States\", region2), region1 = region2.\n.output Answer"]}
{"id": 1194, "answer": false, "completion": ".decl Has_pain_level(Animal:symbol, Pain_level:float)\nHas_pain_level(\"spider wasp\", 4).\nHas_pain_level(\"bullet ant\", 4.5).\n.decl Answer()\nAnswer() :- Has_pain_level(\"spider wasp\", pain_level1), Has_pain_level(\"bullet ant\", pain_level2), pain_level1 > pain_level2.\n.output Answer", "completions": [".decl Has_pain_level(Animal:symbol, Pain_level:float)\nHas_pain_level(\"spider wasp\", 4).\nHas_pain_level(\"bullet ant\", 4.5).\n.decl Answer()\nAnswer() :- Has_pain_level(\"spider wasp\", pain_level1), Has_pain_level(\"bullet ant\", pain_level2), pain_level1 > pain_level2.\n.output Answer"]}
{"id": 1195, "answer": true, "completion": ".decl Disney_film(Film:symbol, Number:float)\nDisney_film(\"Snow White and the Seven Dwarfs\", 1).\nDisney_film(\"Pinocchio\", 2).\n.decl Based_on_story(Film:symbol, Story:symbol)\nBased_on_story(\"Pinocchio\", \"The Adventures of Pinocchio\").\n.decl Story_type(Story:symbol, Type:symbol)\nStory_type(\"The Adventures of Pinocchio\", \"fiction\").\nStory_type(\"prophet story\", \"religious\").\n.decl Answer()\nAnswer() :- Disney_film(film, 2), Based_on_story(film, story1), Story_type(story1, \"fiction\"), Story_type(\"prophet story\", \"religious\"), story1 != \"prophet story\".\n.output Answer", "completions": [".decl Disney_film(Film:symbol, Number:float)\nDisney_film(\"Snow White and the Seven Dwarfs\", 1).\nDisney_film(\"Pinocchio\", 2).\n.decl Based_on_story(Film:symbol, Story:symbol)\nBased_on_story(\"Pinocchio\", \"The Adventures of Pinocchio\").\n.decl Story_type(Story:symbol, Type:symbol)\nStory_type(\"The Adventures of Pinocchio\", \"fiction\").\nStory_type(\"prophet story\", \"religious\").\n.decl Answer()\nAnswer() :- Disney_film(film, 2), Based_on_story(film, story1), Story_type(story1, \"fiction\"), Story_type(\"prophet story\", \"religious\"), story1 != \"prophet story\".\n.output Answer"]}
{"id": 1196, "answer": false, "completion": ".decl Buys(Person:symbol, Item:symbol)\nBuys(\"someone\", \"crickets\").\n.decl Likely_owns_pet(Person:symbol, Pet:symbol)\nLikely_owns_pet(\"someone\", \"reptile\").\n.decl Answer()\nAnswer() :- Buys(person, \"crickets\"), Likely_owns_pet(person, pet).\n.output Answer", "completions": [".decl Buys(Person:symbol, Item:symbol)\nBuys(\"someone\", \"crickets\").\n.decl Likely_owns_pet(Person:symbol, Pet:symbol)\nLikely_owns_pet(\"someone\", \"reptile\").\n.decl Answer()\nAnswer() :- Buys(person, \"crickets\"), Likely_owns_pet(person, pet).\n.output Answer"]}
{"id": 1197, "answer": true, "completion": ".decl Has_n_events(Year:symbol, Event:symbol, N_events:float)\nHas_n_events(\"2009\", \"eclipse\", 6).\n.decl Has_price(Object:symbol, Year:symbol, Price:float)\nHas_price(\"TIME magazine\", \"2020\", 6).\n.decl Answer()\nAnswer() :- Has_n_events(\"2009\", \"eclipse\", n_events), Has_price(\"TIME magazine\", \"2020\", price), n_events * 1 >= price.\n.output Answer", "completions": [".decl Has_n_events(Year:symbol, Event:symbol, N_events:float)\nHas_n_events(\"2009\", \"eclipse\", 6).\n.decl Has_price(Object:symbol, Year:symbol, Price:float)\nHas_price(\"TIME magazine\", \"2020\", 6).\n.decl Answer()\nAnswer() :- Has_n_events(\"2009\", \"eclipse\", n_events), Has_price(\"TIME magazine\", \"2020\", price), n_events * 1 >= price.\n.output Answer"]}
{"id": 1198, "answer": true, "completion": ".decl Has_real_name(Rapper:symbol, Real_name:symbol)\nHas_real_name(\"Lil Wayne\", \"Dwayne Carter\").\n.decl Has_Grammy_awards(Rapper:symbol, Grammy_awards:float)\nHas_Grammy_awards(\"Lil Wayne\", 5).\n.decl Answer()\nAnswer() :- Has_real_name(rapper1, \"Dwayne Carter\"), Has_real_name(rapper2, real_name2), real_name2 != \"Dwayne Carter\", Has_Grammy_awards(rapper1, awards1), Has_Grammy_awards(rapper2, awards2), awards2 >= 4 * awards1.\n.output Answer", "completions": [".decl Has_real_name(Rapper:symbol, Real_name:symbol)\nHas_real_name(\"Lil Wayne\", \"Dwayne Carter\").\n.decl Has_Grammy_awards(Rapper:symbol, Grammy_awards:float)\nHas_Grammy_awards(\"Lil Wayne\", 5).\n.decl Answer()\nAnswer() :- Has_real_name(rapper1, \"Dwayne Carter\"), Has_real_name(rapper2, real_name2), real_name2 != \"Dwayne Carter\", Has_Grammy_awards(rapper1, awards1), Has_Grammy_awards(rapper2, awards2), awards2 >= 4 * awards1.\n.output Answer"]}
{"id": 1199, "answer": true, "completion": ".decl Can_be_preserved_without_refrigeration(Object:symbol)\nCan_be_preserved_without_refrigeration(\"oysters\").\n.decl Answer()\nAnswer() :- Can_be_preserved_without_refrigeration(\"oysters\").\n.output Answer", "completions": [".decl Can_be_preserved_without_refrigeration(Object:symbol)\nCan_be_preserved_without_refrigeration(\"oysters\").\n.decl Answer()\nAnswer() :- Can_be_preserved_without_refrigeration(\"oysters\").\n.output Answer"]}
{"id": 1200, "answer": true, "completion": ".decl Has_n_members(Family:symbol, N_members:float)\nHas_n_members(\"Kate Gosselin's household\", 9).\n.decl Bandy_team_size(Team_size:float)\nBandy_team_size(11).\n.decl Answer()\nAnswer() :- Has_n_members(\"Kate Gosselin's household\", n_members), Bandy_team_size(team_size), n_members >= team_size.\n.output Answer", "completions": [".decl Has_n_members(Family:symbol, N_members:float)\nHas_n_members(\"Kate Gosselin's household\", 9).\n.decl Bandy_team_size(Team_size:float)\nBandy_team_size(11).\n.decl Answer()\nAnswer() :- Has_n_members(\"Kate Gosselin's household\", n_members), Bandy_team_size(team_size), n_members >= team_size.\n.output Answer"]}
{"id": 1201, "answer": true, "completion": ".decl Can_chase(Animal:symbol, Target:symbol)\nCan_chase(\"emu\", \"bogan\").\n.decl Answer()\nAnswer() :- Can_chase(\"emu\", \"bogan\").\n.output Answer", "completions": [".decl Can_chase(Animal:symbol, Target:symbol)\nCan_chase(\"emu\", \"bogan\").\n.decl Answer()\nAnswer() :- Can_chase(\"emu\", \"bogan\").\n.output Answer"]}
{"id": 1202, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Cuban revolution\", \"1953-1959\").\nHappens_in_time(\"US population boom\", \"1946-1964\").\n.decl Overlaps(Event_A:symbol, Event_B:symbol)\nOverlaps(eventA, eventB) :- Happens_in_time(eventA, timeA1), Happens_in_time(eventA, timeA2), Happens_in_time(eventB, timeB1), Happens_in_time(eventB, timeB2), timeA1 <= timeB2, timeA2 >= timeB1.\n.decl Answer()\nAnswer() :- Overlaps(\"Cuban revolution\", \"US population boom\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Cuban revolution\", \"1953-1959\").\nHappens_in_time(\"US population boom\", \"1946-1964\").\n.decl Overlaps(Event_A:symbol, Event_B:symbol)\nOverlaps(eventA, eventB) :- Happens_in_time(eventA, timeA1), Happens_in_time(eventA, timeA2), Happens_in_time(eventB, timeB1), Happens_in_time(eventB, timeB2), timeA1 <= timeB2, timeA2 >= timeB1.\n.decl Answer()\nAnswer() :- Overlaps(\"Cuban revolution\", \"US population boom\").\n.output Answer"]}
{"id": 1203, "answer": true, "completion": ".decl Appears_in(Object:symbol, Work:symbol)\nAppears_in(\"tobacco use\", \"Alice's Adventures in Wonderland\").\n.decl Made_to_seem_enjoyable(Object:symbol, Work:symbol)\nMade_to_seem_enjoyable(\"tobacco use\", \"Alice's Adventures in Wonderland\").\n.decl Answer()\nAnswer() :- Appears_in(\"tobacco use\", \"Alice's Adventures in Wonderland\"), Made_to_seem_enjoyable(\"tobacco use\", \"Alice's Adventures in Wonderland\").\n.output Answer", "completions": [".decl Appears_in(Object:symbol, Work:symbol)\nAppears_in(\"tobacco use\", \"Alice's Adventures in Wonderland\").\n.decl Made_to_seem_enjoyable(Object:symbol, Work:symbol)\nMade_to_seem_enjoyable(\"tobacco use\", \"Alice's Adventures in Wonderland\").\n.decl Answer()\nAnswer() :- Appears_in(\"tobacco use\", \"Alice's Adventures in Wonderland\"), Made_to_seem_enjoyable(\"tobacco use\", \"Alice's Adventures in Wonderland\").\n.output Answer"]}
{"id": 1204, "answer": true, "completion": ".decl Causes_death(Food:symbol, Cause:symbol)\nCauses_death(\"grapefruit\", \"allergies\").\nCauses_death(\"grapefruit\", \"choking\").\nCauses_death(\"grapefruit\", \"drug_interaction\").\n.decl Answer()\nAnswer() :- Causes_death(\"grapefruit\", cause), cause != \"allergies\", cause != \"choking\".\n.output Answer", "completions": [".decl Causes_death(Food:symbol, Cause:symbol)\nCauses_death(\"grapefruit\", \"allergies\").\nCauses_death(\"grapefruit\", \"choking\").\nCauses_death(\"grapefruit\", \"drug_interaction\").\n.decl Answer()\nAnswer() :- Causes_death(\"grapefruit\", cause), cause != \"allergies\", cause != \"choking\".\n.output Answer"]}
{"id": 1205, "answer": true, "completion": ".decl Wrestler(Name:symbol, Organization:symbol)\nWrestler(\"Kane\", \"WWE\").\n.decl Headquarters(Organization:symbol, City:symbol)\nHeadquarters(\"WCW\", \"Atlanta\").\n.decl Banned(Person:symbol, City:symbol)\nBanned(\"Kane\", \"Atlanta\").\n.decl Answer()\nAnswer() :- Wrestler(\"Kane\", \"WWE\"), Headquarters(\"WCW\", \"Atlanta\"), Banned(\"Kane\", \"Atlanta\").\n.output Answer", "completions": [".decl Wrestler(Name:symbol, Organization:symbol)\nWrestler(\"Kane\", \"WWE\").\n.decl Headquarters(Organization:symbol, City:symbol)\nHeadquarters(\"WCW\", \"Atlanta\").\n.decl Banned(Person:symbol, City:symbol)\nBanned(\"Kane\", \"Atlanta\").\n.decl Answer()\nAnswer() :- Wrestler(\"Kane\", \"WWE\"), Headquarters(\"WCW\", \"Atlanta\"), Banned(\"Kane\", \"Atlanta\").\n.output Answer"]}
{"id": 1206, "answer": false, "completion": ".decl Is_good_for_pet_owners(Product:symbol, Reason:symbol)\nIs_good_for_pet_owners(\"ammonia fighting cleaner\", \"removes pet odors\").\n.decl Answer()\nAnswer() :- Is_good_for_pet_owners(\"ammonia fighting cleaner\", _).\n.output Answer", "completions": [".decl Is_good_for_pet_owners(Product:symbol, Reason:symbol)\nIs_good_for_pet_owners(\"ammonia fighting cleaner\", \"removes pet odors\").\n.decl Answer()\nAnswer() :- Is_good_for_pet_owners(\"ammonia fighting cleaner\", _).\n.output Answer"]}
{"id": 1207, "answer": true, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Wembley Stadium\", 90000).\n.decl Has_descendants_percentage(Group:symbol, Percentage:float)\nHas_descendants_percentage(\"Mongols\", 0.16).\n.decl Answer()\nAnswer() :- Has_capacity(\"Wembley Stadium\", capacity), Has_descendants_percentage(\"Mongols\", percentage), capacity * percentage >= 1.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Wembley Stadium\", 90000).\n.decl Has_descendants_percentage(Group:symbol, Percentage:float)\nHas_descendants_percentage(\"Mongols\", 0.16).\n.decl Answer()\nAnswer() :- Has_capacity(\"Wembley Stadium\", capacity), Has_descendants_percentage(\"Mongols\", percentage), capacity * percentage >= 1.\n.output Answer"]}
{"id": 1208, "answer": true, "completion": ".decl Happens_on_date(Event:symbol, Date:symbol)\nHappens_on_date(\"Holy Saturday\", \"April 20, 2019\").\nHappens_on_date(\"420\", \"April 20, 2019\").\n.decl Answer()\nAnswer() :- Happens_on_date(\"Holy Saturday\", date1), Happens_on_date(\"420\", date2), date1 = date2.\n.output Answer", "completions": [".decl Happens_on_date(Event:symbol, Date:symbol)\nHappens_on_date(\"Holy Saturday\", \"April 20, 2019\").\nHappens_on_date(\"420\", \"April 20, 2019\").\n.decl Answer()\nAnswer() :- Happens_on_date(\"Holy Saturday\", date1), Happens_on_date(\"420\", date2), date1 = date2.\n.output Answer"]}
{"id": 1209, "answer": false, "completion": ".decl Planted_flag(Organization:symbol, Country:symbol, Surface:symbol)\nPlanted_flag(\"NASA\", \"USA\", \"lunar surface\").\nPlanted_flag(\"Soviet Union\", \"USSR\", \"lunar surface\").\n.decl Answer()\nAnswer() :- Planted_flag(\"CNES\", \"France\", \"lunar surface\").\n.output Answer", "completions": [".decl Planted_flag(Organization:symbol, Country:symbol, Surface:symbol)\nPlanted_flag(\"NASA\", \"USA\", \"lunar surface\").\nPlanted_flag(\"Soviet Union\", \"USSR\", \"lunar surface\").\n.decl Answer()\nAnswer() :- Planted_flag(\"CNES\", \"France\", \"lunar surface\").\n.output Answer"]}
{"id": 1210, "answer": true, "completion": ".decl Directed(Person:symbol, Movie:symbol)\nDirected(\"Brad Peyton\", \"San Andreas\").\n.decl Requires_knowledge(Movie:symbol, Subject:symbol)\nRequires_knowledge(\"San Andreas\", \"seismology\").\n.decl Answer()\nAnswer() :- Directed(\"Brad Peyton\", movie), Requires_knowledge(movie, \"seismology\").\n.output Answer", "completions": [".decl Directed(Person:symbol, Movie:symbol)\nDirected(\"Brad Peyton\", \"San Andreas\").\n.decl Requires_knowledge(Movie:symbol, Subject:symbol)\nRequires_knowledge(\"San Andreas\", \"seismology\").\n.decl Answer()\nAnswer() :- Directed(\"Brad Peyton\", movie), Requires_knowledge(movie, \"seismology\").\n.output Answer"]}
{"id": 1211, "answer": true, "completion": ".decl Has_policy(University:symbol, Policy:symbol)\nHas_policy(\"American Public University\", \"non-discrimination\").\n.decl Supports_group(Group:symbol, Policy:symbol)\nSupports_group(\"Ku Klux Klan\", \"discrimination\").\n.decl Answer()\nAnswer() :- Has_policy(\"American Public University\", policy), Supports_group(\"Ku Klux Klan\", group_policy), policy != group_policy.\n.output Answer", "completions": [".decl Has_policy(University:symbol, Policy:symbol)\nHas_policy(\"American Public University\", \"non-discrimination\").\n.decl Supports_group(Group:symbol, Policy:symbol)\nSupports_group(\"Ku Klux Klan\", \"discrimination\").\n.decl Answer()\nAnswer() :- Has_policy(\"American Public University\", policy), Supports_group(\"Ku Klux Klan\", group_policy), policy != group_policy.\n.output Answer"]}
{"id": 1212, "answer": false, "completion": ".decl Appeared_in_episodes(Actor:symbol, Show:symbol, Episodes:float)\nAppeared_in_episodes(\"Teri Hatcher\", \"Desperate Housewives\", 180).\nAppeared_in_episodes(\"Teri Hatcher\", \"Superman\", 87).\n.decl Answer()\nAnswer() :- Appeared_in_episodes(\"Teri Hatcher\", \"Desperate Housewives\", episodes1), Appeared_in_episodes(\"Teri Hatcher\", \"Superman\", episodes2), episodes1 >= 2 * episodes2.\n.output Answer", "completions": [".decl Appeared_in_episodes(Actor:symbol, Show:symbol, Episodes:float)\nAppeared_in_episodes(\"Teri Hatcher\", \"Desperate Housewives\", 180).\nAppeared_in_episodes(\"Teri Hatcher\", \"Superman\", 87).\n.decl Answer()\nAnswer() :- Appeared_in_episodes(\"Teri Hatcher\", \"Desperate Housewives\", episodes1), Appeared_in_episodes(\"Teri Hatcher\", \"Superman\", episodes2), episodes1 >= 2 * episodes2.\n.output Answer"]}
{"id": 1213, "answer": false, "completion": ".decl Appears_in_cartoon(Character:symbol, Cartoon:symbol, Year:float)\nAppears_in_cartoon(\"Mickey Mouse\", \"Steamboat Willie\", 1928).\nAppears_in_cartoon(\"Bugs Bunny\", \"A Wild Hare\", 1940).\n.decl Answer()\nAnswer() :- Appears_in_cartoon(\"Mickey Mouse\", cartoon, year1), Appears_in_cartoon(\"Bugs Bunny\", cartoon, year2), year1 = 1930, year2 = 1930.\n.output Answer", "completions": [".decl Appears_in_cartoon(Character:symbol, Cartoon:symbol, Year:float)\nAppears_in_cartoon(\"Mickey Mouse\", \"Steamboat Willie\", 1928).\nAppears_in_cartoon(\"Bugs Bunny\", \"A Wild Hare\", 1940).\n.decl Answer()\nAnswer() :- Appears_in_cartoon(\"Mickey Mouse\", cartoon, year1), Appears_in_cartoon(\"Bugs Bunny\", cartoon, year2), year1 = 1930, year2 = 1930.\n.output Answer"]}
{"id": 1214, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol, Level:float)\nHas_skill(\"Terence Tao\", \"math\", 10).\nHas_skill(\"Eminem\", \"math\", 3).\n.decl Competes_in(Person:symbol, Competition:symbol)\nCompetes_in(\"Terence Tao\", \"math competition\").\nCompetes_in(\"Eminem\", \"math competition\").\n.decl Answer()\nAnswer() :- Has_skill(\"Terence Tao\", \"math\", level1), Has_skill(\"Eminem\", \"math\", level2), Competes_in(\"Terence Tao\", \"math competition\"), Competes_in(\"Eminem\", \"math competition\"), level1 > level2.\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol, Level:float)\nHas_skill(\"Terence Tao\", \"math\", 10).\nHas_skill(\"Eminem\", \"math\", 3).\n.decl Competes_in(Person:symbol, Competition:symbol)\nCompetes_in(\"Terence Tao\", \"math competition\").\nCompetes_in(\"Eminem\", \"math competition\").\n.decl Answer()\nAnswer() :- Has_skill(\"Terence Tao\", \"math\", level1), Has_skill(\"Eminem\", \"math\", level2), Competes_in(\"Terence Tao\", \"math competition\"), Competes_in(\"Eminem\", \"math competition\"), level1 > level2.\n.output Answer"]}
{"id": 1215, "answer": false, "completion": ".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Disneyland\", \"Orange County\").\nLocated_in(\"Los Angeles County\", \"California\").\nLocated_in(\"Orange County\", \"California\").\n.decl Answer()\nAnswer() :- Located_in(\"Disneyland\", location1), Located_in(\"Los Angeles County\", location2), location1 = location2.\n.output Answer", "completions": [".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Disneyland\", \"Orange County\").\nLocated_in(\"Los Angeles County\", \"California\").\nLocated_in(\"Orange County\", \"California\").\n.decl Answer()\nAnswer() :- Located_in(\"Disneyland\", location1), Located_in(\"Los Angeles County\", location2), location1 = location2.\n.output Answer"]}
{"id": 1216, "answer": false, "completion": ".decl Has_comma(Book:symbol, Has_comma:float)\nHas_comma(\"religious book\", 1).\n.decl Is_surprised(Person:symbol, Event:symbol)\nIs_surprised(\"Fakir\", \"comma in religious book\").\n.decl Answer()\nAnswer() :- Is_surprised(\"Fakir\", \"comma in religious book\"), Has_comma(\"religious book\", has_comma), has_comma = 1.\n.output Answer", "completions": [".decl Has_comma(Book:symbol, Has_comma:float)\nHas_comma(\"religious book\", 1).\n.decl Is_surprised(Person:symbol, Event:symbol)\nIs_surprised(\"Fakir\", \"comma in religious book\").\n.decl Answer()\nAnswer() :- Is_surprised(\"Fakir\", \"comma in religious book\"), Has_comma(\"religious book\", has_comma), has_comma = 1.\n.output Answer"]}
{"id": 1217, "answer": false, "completion": ".decl Contains_gluten(Food:symbol)\nContains_gluten(\"spaghetti\").\n.decl Celiac_sufferer(Person:symbol)\nCeliac_sufferer(\"Celiac sufferer\").\n.decl Avoids_gluten(Person:symbol, Food:symbol)\nAvoids_gluten(person, food) :- Celiac_sufferer(person), Contains_gluten(food).\n.decl Answer()\nAnswer() :- Avoids_gluten(\"Celiac sufferer\", \"spaghetti\").\n.output Answer", "completions": [".decl Contains_gluten(Food:symbol)\nContains_gluten(\"spaghetti\").\n.decl Celiac_sufferer(Person:symbol)\nCeliac_sufferer(\"Celiac sufferer\").\n.decl Avoids_gluten(Person:symbol, Food:symbol)\nAvoids_gluten(person, food) :- Celiac_sufferer(person), Contains_gluten(food).\n.decl Answer()\nAnswer() :- Avoids_gluten(\"Celiac sufferer\", \"spaghetti\").\n.output Answer"]}
{"id": 1218, "answer": true, "completion": ".decl Famous_animal_product(City:symbol, Product:symbol)\nFamous_animal_product(\"Kobe\", \"beef\").\n.decl Used_in_dish(Product:symbol, Dish:symbol)\nUsed_in_dish(\"bacon\", \"BLT\").\n.decl Answer()\nAnswer() :- Famous_animal_product(\"Kobe\", product), Used_in_dish(product, \"BLT\").\n.output Answer", "completions": [".decl Famous_animal_product(City:symbol, Product:symbol)\nFamous_animal_product(\"Kobe\", \"beef\").\n.decl Used_in_dish(Product:symbol, Dish:symbol)\nUsed_in_dish(\"bacon\", \"BLT\").\n.decl Answer()\nAnswer() :- Famous_animal_product(\"Kobe\", product), Used_in_dish(product, \"BLT\").\n.output Answer"]}
{"id": 1219, "answer": false, "completion": ".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"camel\", 10).\nHas_size(\"dog house\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"camel\", size1), Has_size(\"dog house\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"camel\", 10).\nHas_size(\"dog house\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"camel\", size1), Has_size(\"dog house\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1220, "answer": true, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"skeleton\", \"bones\").\nHas_part(\"human\", \"hair\").\n.decl Is_related(Object_A:symbol, Object_B:symbol)\nIs_related(\"skeleton\", \"human\").\n.decl Answer()\nAnswer() :- Has_part(\"skeleton\", \"hair\").\nAnswer() :- Is_related(\"skeleton\", object), Has_part(object, \"hair\").\n.output Answer", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"skeleton\", \"bones\").\nHas_part(\"human\", \"hair\").\n.decl Is_related(Object_A:symbol, Object_B:symbol)\nIs_related(\"skeleton\", \"human\").\n.decl Answer()\nAnswer() :- Has_part(\"skeleton\", \"hair\").\nAnswer() :- Is_related(\"skeleton\", object), Has_part(object, \"hair\").\n.output Answer"]}
{"id": 1221, "answer": true, "completion": ".decl On_location(Object:symbol, Location:symbol)\nOn_location(\"warthog\", \"Broadway\").\n.decl Answer()\nAnswer() :- On_location(\"warthog\", \"Broadway\").\n.output Answer", "completions": [".decl On_location(Object:symbol, Location:symbol)\nOn_location(\"warthog\", \"Broadway\").\n.decl Answer()\nAnswer() :- On_location(\"warthog\", \"Broadway\").\n.output Answer"]}
{"id": 1222, "answer": true, "completion": ".decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Opal Tometi\", \"Black Lives Matter\").\n.decl Has_policy(Group:symbol, Policy:symbol)\nHas_policy(\"Ku Klux Klan\", \"white supremacy\").\n.decl Answer()\nAnswer() :- Is_member_of(\"Opal Tometi\", \"Black Lives Matter\"), Has_policy(\"Ku Klux Klan\", \"white supremacy\"), !Is_member_of(\"Opal Tometi\", \"Ku Klux Klan\").\n.output Answer", "completions": [".decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Opal Tometi\", \"Black Lives Matter\").\n.decl Has_policy(Group:symbol, Policy:symbol)\nHas_policy(\"Ku Klux Klan\", \"white supremacy\").\n.decl Answer()\nAnswer() :- Is_member_of(\"Opal Tometi\", \"Black Lives Matter\"), Has_policy(\"Ku Klux Klan\", \"white supremacy\"), !Is_member_of(\"Opal Tometi\", \"Ku Klux Klan\").\n.output Answer"]}
{"id": 1223, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"cory catfish\", \"algae\").\nEats(\"cory catfish\", \"dead fish\").\nEats(\"cory catfish\", \"insects\").\nEats(\"cory catfish\", \"worms\").\n.decl Answer()\nAnswer() :- Eats(\"cory catfish\", \"living fish\").\nAnswer() :- !Eats(\"cory catfish\", \"living fish\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"cory catfish\", \"algae\").\nEats(\"cory catfish\", \"dead fish\").\nEats(\"cory catfish\", \"insects\").\nEats(\"cory catfish\", \"worms\").\n.decl Answer()\nAnswer() :- Eats(\"cory catfish\", \"living fish\").\nAnswer() :- !Eats(\"cory catfish\", \"living fish\").\n.output Answer"]}
{"id": 1224, "answer": false, "completion": ".decl Has_vitamin_D_deficiency(Person:symbol)\nHas_vitamin_D_deficiency(\"John Muir\").\n.decl Spends_time_outdoors(Person:symbol)\nSpends_time_outdoors(\"John Muir\").\n.decl Answer()\nAnswer() :- Spends_time_outdoors(\"John Muir\"), !Has_vitamin_D_deficiency(\"John Muir\").\n.output Answer", "completions": [".decl Has_vitamin_D_deficiency(Person:symbol)\nHas_vitamin_D_deficiency(\"John Muir\").\n.decl Spends_time_outdoors(Person:symbol)\nSpends_time_outdoors(\"John Muir\").\n.decl Answer()\nAnswer() :- Spends_time_outdoors(\"John Muir\"), !Has_vitamin_D_deficiency(\"John Muir\").\n.output Answer"]}
{"id": 1225, "answer": true, "completion": ".decl Follows_religion(Person:symbol, Religion:symbol)\nFollows_religion(\"Orthodox Presbyterian\", \"Presbyterianism\").\n.decl Objects_to_attire(Person:symbol, Time_period:symbol)\nObjects_to_attire(\"Presbyterian\", \"1700s\").\n.decl Answer()\nAnswer() :- Follows_religion(\"Orthodox Presbyterian\", religion), Objects_to_attire(religion, \"1700s\").\n.output Answer", "completions": [".decl Follows_religion(Person:symbol, Religion:symbol)\nFollows_religion(\"Orthodox Presbyterian\", \"Presbyterianism\").\n.decl Objects_to_attire(Person:symbol, Time_period:symbol)\nObjects_to_attire(\"Presbyterian\", \"1700s\").\n.decl Answer()\nAnswer() :- Follows_religion(\"Orthodox Presbyterian\", religion), Objects_to_attire(religion, \"1700s\").\n.output Answer"]}
{"id": 1226, "answer": true, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"IKEA\", \"furniture\").\nSells(\"IKEA\", \"meatballs\").\n.decl Answer()\nAnswer() :- Sells(store, \"furniture\"), Sells(store, \"meatballs\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"IKEA\", \"furniture\").\nSells(\"IKEA\", \"meatballs\").\n.decl Answer()\nAnswer() :- Sells(store, \"furniture\"), Sells(store, \"meatballs\").\n.output Answer"]}
{"id": 1227, "answer": true, "completion": ".decl Produces_energy(Source:symbol, Energy_type:symbol)\nProduces_energy(\"hydropower\", \"electricity\").\n.decl Produces_byproduct(Source:symbol, Byproduct:symbol)\nProduces_byproduct(\"chaff\", \"agriculture\").\n.decl Answer()\nAnswer() :- Produces_energy(\"hydropower\", energy_type), Produces_byproduct(\"chaff\", byproduct), energy_type = byproduct.\n.output Answer", "completions": [".decl Produces_energy(Source:symbol, Energy_type:symbol)\nProduces_energy(\"hydropower\", \"electricity\").\n.decl Produces_byproduct(Source:symbol, Byproduct:symbol)\nProduces_byproduct(\"chaff\", \"agriculture\").\n.decl Answer()\nAnswer() :- Produces_energy(\"hydropower\", energy_type), Produces_byproduct(\"chaff\", byproduct), energy_type = byproduct.\n.output Answer"]}
{"id": 1228, "answer": false, "completion": ".decl Art_style(Show:symbol, Style:symbol)\nArt_style(\"Family Guy\", \"Seth MacFarlane\").\nArt_style(\"American Dad\", \"Seth MacFarlane\").\n.decl Answer()\nAnswer() :- Art_style(\"Family Guy\", style1), Art_style(\"American Dad\", style2), style1 = style2.\n.output Answer", "completions": [".decl Art_style(Show:symbol, Style:symbol)\nArt_style(\"Family Guy\", \"Seth MacFarlane\").\nArt_style(\"American Dad\", \"Seth MacFarlane\").\n.decl Answer()\nAnswer() :- Art_style(\"Family Guy\", style1), Art_style(\"American Dad\", style2), style1 = style2.\n.output Answer"]}
{"id": 1229, "answer": false, "completion": ".decl Is_vegan(Food:symbol, Vegan:float)\nIs_vegan(\"margarine\", 1).\nIs_vegan(\"butter\", 0).\n.decl Toast_spread(Vegan:float, Spread:symbol)\nToast_spread(1, \"margarine\").\nToast_spread(0, \"butter\").\n.decl Answer()\nAnswer() :- Toast_spread(1, \"margarine\").\n.output Answer", "completions": [".decl Is_vegan(Food:symbol, Vegan:float)\nIs_vegan(\"margarine\", 1).\nIs_vegan(\"butter\", 0).\n.decl Toast_spread(Vegan:float, Spread:symbol)\nToast_spread(1, \"margarine\").\nToast_spread(0, \"butter\").\n.decl Answer()\nAnswer() :- Toast_spread(1, \"margarine\").\n.output Answer"]}
{"id": 1230, "answer": true, "completion": ".decl Has_OS(Store:symbol, OS:symbol, Percentage:float)\nHas_OS(\"Apple store\", \"macOS\", 90).\nHas_OS(\"Apple store\", \"Ubuntu\", 10).\n.decl Answer()\nAnswer() :- Has_OS(\"Apple store\", \"Ubuntu\", percentage1), Has_OS(\"Apple store\", \"macOS\", percentage2), percentage1 > percentage2.\n.output Answer", "completions": [".decl Has_OS(Store:symbol, OS:symbol, Percentage:float)\nHas_OS(\"Apple store\", \"macOS\", 90).\nHas_OS(\"Apple store\", \"Ubuntu\", 10).\n.decl Answer()\nAnswer() :- Has_OS(\"Apple store\", \"Ubuntu\", percentage1), Has_OS(\"Apple store\", \"macOS\", percentage2), percentage1 > percentage2.\n.output Answer"]}
{"id": 1231, "answer": true, "completion": ".decl Eats(Animal:symbol, Food:symbol)\nEats(\"Common warthog\", \"grasses\").\nEats(\"Common warthog\", \"roots\").\nEats(\"Common warthog\", \"fruits\").\n.decl Found_in(Location:symbol, Item:symbol)\nFound_in(\"greenhouse\", \"plants\").\n.decl Answer()\nAnswer() :- Eats(\"Common warthog\", food), Found_in(\"greenhouse\", food).\n.output Answer", "completions": [".decl Eats(Animal:symbol, Food:symbol)\nEats(\"Common warthog\", \"grasses\").\nEats(\"Common warthog\", \"roots\").\nEats(\"Common warthog\", \"fruits\").\n.decl Found_in(Location:symbol, Item:symbol)\nFound_in(\"greenhouse\", \"plants\").\n.decl Answer()\nAnswer() :- Eats(\"Common warthog\", food), Found_in(\"greenhouse\", food).\n.output Answer"]}
{"id": 1232, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"bromine\", 3.12).\nHas_density(\"average bulk carrier\", 1.5).\n.decl Is_liquid_at_room_temperature(Object:symbol)\nIs_liquid_at_room_temperature(\"bromine\").\n.decl Answer()\nAnswer() :- Has_density(\"bromine\", density1), Has_density(\"average bulk carrier\", density2), Is_liquid_at_room_temperature(\"bromine\"), density1 <= density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"bromine\", 3.12).\nHas_density(\"average bulk carrier\", 1.5).\n.decl Is_liquid_at_room_temperature(Object:symbol)\nIs_liquid_at_room_temperature(\"bromine\").\n.decl Answer()\nAnswer() :- Has_density(\"bromine\", density1), Has_density(\"average bulk carrier\", density2), Is_liquid_at_room_temperature(\"bromine\"), density1 <= density2.\n.output Answer"]}
{"id": 1233, "answer": true, "completion": ".decl Located_in(City:symbol, Country:symbol)\nLocated_in(\"Bern\", \"Switzerland\").\n.decl Xenophobic(Person:symbol, Country:symbol)\nXenophobic(\"Swiss citizen\", \"Switzerland\").\n.decl Poor_choice(Person:symbol, City:symbol)\nPoor_choice(\"Swiss citizen\", \"Bern\") :- Xenophobic(\"Swiss citizen\", \"Switzerland\"), Located_in(\"Bern\", \"Switzerland\").\n.decl Answer()\nAnswer() :- !Poor_choice(\"Swiss citizen\", \"Bern\").\n.output Answer", "completions": [".decl Located_in(City:symbol, Country:symbol)\nLocated_in(\"Bern\", \"Switzerland\").\n.decl Xenophobic(Person:symbol, Country:symbol)\nXenophobic(\"Swiss citizen\", \"Switzerland\").\n.decl Poor_choice(Person:symbol, City:symbol)\nPoor_choice(\"Swiss citizen\", \"Bern\") :- Xenophobic(\"Swiss citizen\", \"Switzerland\"), Located_in(\"Bern\", \"Switzerland\").\n.decl Answer()\nAnswer() :- !Poor_choice(\"Swiss citizen\", \"Bern\").\n.output Answer"]}
{"id": 1234, "answer": true, "completion": ".decl Is_tearjerker(Movie:symbol, Topic:symbol)\nIs_tearjerker(\"United 93\", \"United Airlines flight\").\n.decl Answer()\nAnswer() :- Is_tearjerker(movie, \"United Airlines flight\").\n.output Answer", "completions": [".decl Is_tearjerker(Movie:symbol, Topic:symbol)\nIs_tearjerker(\"United 93\", \"United Airlines flight\").\n.decl Answer()\nAnswer() :- Is_tearjerker(movie, \"United Airlines flight\").\n.output Answer"]}
{"id": 1235, "answer": true, "completion": ".decl Buried_at(Person:symbol, Church:symbol)\nBuried_at(\"Isaac Newton\", \"Westminster Abbey\").\nBuried_at(\"Charles Dickens\", \"Westminster Abbey\").\n.decl Author_of(Person:symbol, Book:symbol)\nAuthor_of(\"Charles Dickens\", \"Great Expectations\").\n.decl Answer()\nAnswer() :- Buried_at(\"Isaac Newton\", church), Author_of(author, \"Great Expectations\"), Buried_at(author, church).\n.output Answer", "completions": [".decl Buried_at(Person:symbol, Church:symbol)\nBuried_at(\"Isaac Newton\", \"Westminster Abbey\").\nBuried_at(\"Charles Dickens\", \"Westminster Abbey\").\n.decl Author_of(Person:symbol, Book:symbol)\nAuthor_of(\"Charles Dickens\", \"Great Expectations\").\n.decl Answer()\nAnswer() :- Buried_at(\"Isaac Newton\", church), Author_of(author, \"Great Expectations\"), Buried_at(author, church).\n.output Answer"]}
{"id": 1236, "answer": false, "completion": ".decl Has_yearly_precipitation(Location:symbol, Precipitation:float)\nHas_yearly_precipitation(\"Snowdon\", 3.05).\n.decl Has_height(Object:symbol, Height:float)\nHas_height(\"bowling pin\", 0.38).\n.decl Answer()\nAnswer() :- Has_yearly_precipitation(\"Snowdon\", precipitation), Has_height(\"bowling pin\", height), precipitation > height.\n.output Answer", "completions": [".decl Has_yearly_precipitation(Location:symbol, Precipitation:float)\nHas_yearly_precipitation(\"Snowdon\", 3.05).\n.decl Has_height(Object:symbol, Height:float)\nHas_height(\"bowling pin\", 0.38).\n.decl Answer()\nAnswer() :- Has_yearly_precipitation(\"Snowdon\", precipitation), Has_height(\"bowling pin\", height), precipitation > height.\n.output Answer"]}
{"id": 1237, "answer": true, "completion": ".decl Associated_with(Event:symbol, Thing:symbol)\nAssociated_with(\"Thanksgiving\", \"turkey\").\nAssociated_with(\"Thanksgiving\", \"pumpkin pie\").\nAssociated_with(\"Thanksgiving\", \"cranberry sauce\").\nAssociated_with(\"Thanksgiving\", \"stuffing\").\n.decl Answer()\nAnswer() :- Associated_with(\"Thanksgiving\", \"menthol\").\n.output Answer", "completions": [".decl Associated_with(Event:symbol, Thing:symbol)\nAssociated_with(\"Thanksgiving\", \"turkey\").\nAssociated_with(\"Thanksgiving\", \"pumpkin pie\").\nAssociated_with(\"Thanksgiving\", \"cranberry sauce\").\nAssociated_with(\"Thanksgiving\", \"stuffing\").\n.decl Answer()\nAnswer() :- Associated_with(\"Thanksgiving\", \"menthol\").\n.output Answer"]}
{"id": 1238, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"jackfruit\", 20). // Assuming an average mass of 20 kg for a jackfruit\n.decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"thrown jackfruit\", 10). // Assuming an average speed of 10 m/s for a thrown jackfruit\n.decl Has_impact_force(Object:symbol, Force:float)\n.decl Is_safe(Object:symbol)\n\n// Calculate impact force using mass and speed (ignoring air resistance and other factors)\nHas_impact_force(\"thrown jackfruit\", Force) :- Has_mass(\"jackfruit\", mass), Has_speed(\"thrown jackfruit\", speed), Force = mass * speed.\n\n// Define a threshold for safety (arbitrary value, can be adjusted)\nIs_safe(\"thrown jackfruit\") :- Has_impact_force(\"thrown jackfruit\", force), force < 100.\n\n.decl Answer()\nAnswer() :- !Is_safe(\"thrown jackfruit\").\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"jackfruit\", 20). // Assuming an average mass of 20 kg for a jackfruit\n.decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"thrown jackfruit\", 10). // Assuming an average speed of 10 m/s for a thrown jackfruit\n.decl Has_impact_force(Object:symbol, Force:float)\n.decl Is_safe(Object:symbol)\n\n// Calculate impact force using mass and speed (ignoring air resistance and other factors)\nHas_impact_force(\"thrown jackfruit\", Force) :- Has_mass(\"jackfruit\", mass), Has_speed(\"thrown jackfruit\", speed), Force = mass * speed.\n\n// Define a threshold for safety (arbitrary value, can be adjusted)\nIs_safe(\"thrown jackfruit\") :- Has_impact_force(\"thrown jackfruit\", force), force < 100.\n\n.decl Answer()\nAnswer() :- !Is_safe(\"thrown jackfruit\").\n.output Answer"]}
{"id": 1239, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"honey badger\", 0.9).\nHas_size(\"oven\", 1.2).\n.decl Answer()\nAnswer() :- Has_size(\"honey badger\", size1), Has_size(\"oven\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"honey badger\", 0.9).\nHas_size(\"oven\", 1.2).\n.decl Answer()\nAnswer() :- Has_size(\"honey badger\", size1), Has_size(\"oven\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1240, "answer": true, "completion": ".decl Enjoys(Character:symbol, Season:symbol)\nEnjoys(\"Phineas\", \"summer\").\nEnjoys(\"Ferb\", \"summer\").\n.decl Answer()\nAnswer() :- Enjoys(\"Phineas\", \"winter\"), Enjoys(\"Ferb\", \"winter\").\nAnswer() :- Enjoys(\"Phineas\", \"winter\"), !Enjoys(\"Ferb\", \"winter\").\nAnswer() :- !Enjoys(\"Phineas\", \"winter\"), Enjoys(\"Ferb\", \"winter\").\n.output Answer", "completions": [".decl Enjoys(Character:symbol, Season:symbol)\nEnjoys(\"Phineas\", \"summer\").\nEnjoys(\"Ferb\", \"summer\").\n.decl Answer()\nAnswer() :- Enjoys(\"Phineas\", \"winter\"), Enjoys(\"Ferb\", \"winter\").\nAnswer() :- Enjoys(\"Phineas\", \"winter\"), !Enjoys(\"Ferb\", \"winter\").\nAnswer() :- !Enjoys(\"Phineas\", \"winter\"), Enjoys(\"Ferb\", \"winter\").\n.output Answer"]}
{"id": 1241, "answer": true, "completion": ".decl Cares_about(Pirate:symbol, Vitamin:symbol)\nCares_about(\"pirates\", \"vitamin C\").\n.decl Answer()\nAnswer() :- Cares_about(\"pirates\", \"vitamin C\").\n.output Answer", "completions": [".decl Cares_about(Pirate:symbol, Vitamin:symbol)\nCares_about(\"pirates\", \"vitamin C\").\n.decl Answer()\nAnswer() :- Cares_about(\"pirates\", \"vitamin C\").\n.output Answer"]}
{"id": 1242, "answer": true, "completion": ".decl Named_by(Object:symbol, Person:symbol, Nationality:symbol)\nNamed_by(\"Saint Vincent and the Grenadines\", \"Christopher Columbus\", \"Italian\").\n.decl Answer()\nAnswer() :- Named_by(\"Saint Vincent and the Grenadines\", person, \"Italian\").\n.output Answer", "completions": [".decl Named_by(Object:symbol, Person:symbol, Nationality:symbol)\nNamed_by(\"Saint Vincent and the Grenadines\", \"Christopher Columbus\", \"Italian\").\n.decl Answer()\nAnswer() :- Named_by(\"Saint Vincent and the Grenadines\", person, \"Italian\").\n.output Answer"]}
{"id": 1243, "answer": false, "completion": ".decl Has_internet_slang(Person:symbol, Films:symbol)\nHas_internet_slang(\"Alfred Hitchcock\", \"no\").\n.decl Answer()\nAnswer() :- Has_internet_slang(\"Alfred Hitchcock\", \"yes\").\n.output Answer", "completions": [".decl Has_internet_slang(Person:symbol, Films:symbol)\nHas_internet_slang(\"Alfred Hitchcock\", \"no\").\n.decl Answer()\nAnswer() :- Has_internet_slang(\"Alfred Hitchcock\", \"yes\").\n.output Answer"]}
{"id": 1244, "answer": false, "completion": ".decl Supports(Party:symbol, Policy:symbol)\nSupports(\"Republicans\", \"limited welfare\").\nSupports(\"Republicans\", \"social security\").\n.decl Rejects(Party:symbol, Policy:symbol)\nRejects(\"Republicans\", \"universal welfare\").\n.decl All_forms_of_welfare(Policy:symbol)\nAll_forms_of_welfare(\"limited welfare\").\nAll_forms_of_welfare(\"universal welfare\").\nAll_forms_of_welfare(\"social security\").\n.decl Answer()\nAnswer() :- Rejects(\"Republicans\", policy), All_forms_of_welfare(policy), !Supports(\"Republicans\", policy).\n.output Answer", "completions": [".decl Supports(Party:symbol, Policy:symbol)\nSupports(\"Republicans\", \"limited welfare\").\nSupports(\"Republicans\", \"social security\").\n.decl Rejects(Party:symbol, Policy:symbol)\nRejects(\"Republicans\", \"universal welfare\").\n.decl All_forms_of_welfare(Policy:symbol)\nAll_forms_of_welfare(\"limited welfare\").\nAll_forms_of_welfare(\"universal welfare\").\nAll_forms_of_welfare(\"social security\").\n.decl Answer()\nAnswer() :- Rejects(\"Republicans\", policy), All_forms_of_welfare(policy), !Supports(\"Republicans\", policy).\n.output Answer"]}
{"id": 1245, "answer": true, "completion": ".decl Sings(Citizens:symbol, Song:symbol)\nSings(\"French citizens\", \"La Marseillaise\").\n.decl Located_in(Place_A:symbol, Place_B:symbol)\nLocated_in(\"Cheshire\", \"United Kingdom\").\n.decl Nationality_of_place(Place:symbol, Nationality:symbol)\nNationality_of_place(\"United Kingdom\", \"British\").\n.decl Answer()\nAnswer() :- Sings(\"Cheshire citizens\", \"La Marseillaise\").\nAnswer() :- Located_in(\"Cheshire\", country), Nationality_of_place(country, nationality), Sings(nationality, \"La Marseillaise\").\n.output Answer", "completions": [".decl Sings(Citizens:symbol, Song:symbol)\nSings(\"French citizens\", \"La Marseillaise\").\n.decl Located_in(Place_A:symbol, Place_B:symbol)\nLocated_in(\"Cheshire\", \"United Kingdom\").\n.decl Nationality_of_place(Place:symbol, Nationality:symbol)\nNationality_of_place(\"United Kingdom\", \"British\").\n.decl Answer()\nAnswer() :- Sings(\"Cheshire citizens\", \"La Marseillaise\").\nAnswer() :- Located_in(\"Cheshire\", country), Nationality_of_place(country, nationality), Sings(nationality, \"La Marseillaise\").\n.output Answer"]}
{"id": 1246, "answer": false, "completion": ".decl Has_protein(Object:symbol, Protein:float)\nHas_protein(\"maize\", 9).\nHas_protein(\"chicken breast\", 31).\n.decl Bodybuilder_prefers(Food_A:symbol, Food_B:symbol)\nBodybuilder_prefers(foodA, foodB) :- Has_protein(foodA, proteinA), Has_protein(foodB, proteinB), proteinA > proteinB.\n.decl Answer()\nAnswer() :- Bodybuilder_prefers(\"maize\", \"chicken breast\").\n.output Answer", "completions": [".decl Has_protein(Object:symbol, Protein:float)\nHas_protein(\"maize\", 9).\nHas_protein(\"chicken breast\", 31).\n.decl Bodybuilder_prefers(Food_A:symbol, Food_B:symbol)\nBodybuilder_prefers(foodA, foodB) :- Has_protein(foodA, proteinA), Has_protein(foodB, proteinB), proteinA > proteinB.\n.decl Answer()\nAnswer() :- Bodybuilder_prefers(\"maize\", \"chicken breast\").\n.output Answer"]}
{"id": 1247, "answer": false, "completion": ".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"compact disc\", 225).\n.decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"magma\", 700).\n.decl Answer()\nAnswer() :- Has_melting_point(\"compact disc\", melting_point), Has_temperature(\"magma\", temperature), temperature > melting_point.\n.output Answer", "completions": [".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"compact disc\", 225).\n.decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"magma\", 700).\n.decl Answer()\nAnswer() :- Has_melting_point(\"compact disc\", melting_point), Has_temperature(\"magma\", temperature), temperature > melting_point.\n.output Answer"]}
{"id": 1248, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Alexander Hamilton\", 1755).\n.decl Discovered_in_year(Animal:symbol, Year:float)\nDiscovered_in_year(\"koala\", 1798).\n.decl Answer()\nAnswer() :- Born_in_year(\"Alexander Hamilton\", birth_year), Discovered_in_year(\"koala\", discovery_year), birth_year < discovery_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Alexander Hamilton\", 1755).\n.decl Discovered_in_year(Animal:symbol, Year:float)\nDiscovered_in_year(\"koala\", 1798).\n.decl Answer()\nAnswer() :- Born_in_year(\"Alexander Hamilton\", birth_year), Discovered_in_year(\"koala\", discovery_year), birth_year < discovery_year.\n.output Answer"]}
{"id": 1249, "answer": true, "completion": ".decl Struggles_with_style(Student:symbol, Writing_style:symbol)\nStruggles_with_style(\"student\", \"Othello\").\n.decl Has_options(Student:symbol, Writing_style:symbol)\nHas_options(\"student\", \"Othello\").\n.decl Answer()\nAnswer() :- Struggles_with_style(\"student\", \"Othello\"), Has_options(\"student\", \"Othello\").\n.output Answer", "completions": [".decl Struggles_with_style(Student:symbol, Writing_style:symbol)\nStruggles_with_style(\"student\", \"Othello\").\n.decl Has_options(Student:symbol, Writing_style:symbol)\nHas_options(\"student\", \"Othello\").\n.decl Answer()\nAnswer() :- Struggles_with_style(\"student\", \"Othello\"), Has_options(\"student\", \"Othello\").\n.output Answer"]}
{"id": 1250, "answer": true, "completion": ".decl Born_in_year(Character:symbol, Year:float)\nBorn_in_year(\"Goofy\", 1932).\n.decl Has_n_planets(Year:symbol, N_planets:float)\nHas_n_planets(1932, 9).\n.decl Answer()\nAnswer() :- Born_in_year(\"Goofy\", year), Has_n_planets(year, n_planets), n_planets >= 9.\n.output Answer", "completions": [".decl Born_in_year(Character:symbol, Year:float)\nBorn_in_year(\"Goofy\", 1932).\n.decl Has_n_planets(Year:symbol, N_planets:float)\nHas_n_planets(1932, 9).\n.decl Answer()\nAnswer() :- Born_in_year(\"Goofy\", year), Has_n_planets(year, n_planets), n_planets >= 9.\n.output Answer"]}
{"id": 1251, "answer": true, "completion": ".decl From_town(Person:symbol, Town:symbol)\nFrom_town(\"historical Dracula\", \"Sighisoara\").\n.decl In_city(Town:symbol, City:symbol)\nIn_city(\"Sighisoara\", \"Bucharest\").\n.decl Answer()\nAnswer() :- From_town(\"historical Dracula\", town), In_city(town, \"Bucharest\").\n.output Answer", "completions": [".decl From_town(Person:symbol, Town:symbol)\nFrom_town(\"historical Dracula\", \"Sighisoara\").\n.decl In_city(Town:symbol, City:symbol)\nIn_city(\"Sighisoara\", \"Bucharest\").\n.decl Answer()\nAnswer() :- From_town(\"historical Dracula\", town), In_city(town, \"Bucharest\").\n.output Answer"]}
{"id": 1252, "answer": true, "completion": ".decl Has_cosmic_rays(Book:symbol)\nHas_cosmic_rays(\"War of the Worlds\").\n.decl Written_by(Author:symbol, Book:symbol)\nWritten_by(\"H.G. Wells\", \"War of the Worlds\").\n.decl Answer()\nAnswer() :- Written_by(\"H.G. Wells\", book), Has_cosmic_rays(book).\n.output Answer", "completions": [".decl Has_cosmic_rays(Book:symbol)\nHas_cosmic_rays(\"War of the Worlds\").\n.decl Written_by(Author:symbol, Book:symbol)\nWritten_by(\"H.G. Wells\", \"War of the Worlds\").\n.decl Answer()\nAnswer() :- Written_by(\"H.G. Wells\", book), Has_cosmic_rays(book).\n.output Answer"]}
{"id": 1253, "answer": true, "completion": ".decl Has_camouflage(Animal:symbol, Environment:symbol)\nHas_camouflage(\"mongoose\", \"desert\").\n.decl Answer()\nAnswer() :- Has_camouflage(\"mongoose\", \"desert\").\n.output Answer", "completions": [".decl Has_camouflage(Animal:symbol, Environment:symbol)\nHas_camouflage(\"mongoose\", \"desert\").\n.decl Answer()\nAnswer() :- Has_camouflage(\"mongoose\", \"desert\").\n.output Answer"]}
{"id": 1254, "answer": true, "completion": ".decl Treats_first(Drug:symbol, Condition:symbol)\nTreats_first(\"antidepressants\", \"depression\").\n.decl Is_type_of(Drug1:symbol, Drug2:symbol)\nIs_type_of(\"Seroquel\", \"antipsychotic\").\n.decl Answer()\nAnswer() :- Treats_first(\"Seroquel\", \"depression\").\nAnswer() :- Treats_first(drug_type, \"depression\"), Is_type_of(\"Seroquel\", drug_type).\n.output Answer", "completions": [".decl Treats_first(Drug:symbol, Condition:symbol)\nTreats_first(\"antidepressants\", \"depression\").\n.decl Is_type_of(Drug1:symbol, Drug2:symbol)\nIs_type_of(\"Seroquel\", \"antipsychotic\").\n.decl Answer()\nAnswer() :- Treats_first(\"Seroquel\", \"depression\").\nAnswer() :- Treats_first(drug_type, \"depression\"), Is_type_of(\"Seroquel\", drug_type).\n.output Answer"]}
{"id": 1255, "answer": true, "completion": ".decl Contains_ingredient(Kitchen:symbol, Ingredient:symbol)\nContains_ingredient(\"Taco Bell kitchen\", \"cinnamon\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"Taco Bell kitchen\", \"cinnamon\").\n.output Answer", "completions": [".decl Contains_ingredient(Kitchen:symbol, Ingredient:symbol)\nContains_ingredient(\"Taco Bell kitchen\", \"cinnamon\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"Taco Bell kitchen\", \"cinnamon\").\n.output Answer"]}
{"id": 1256, "answer": true, "completion": ".decl Has_discount(Organization:symbol, Store:symbol)\nHas_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.decl Answer()\nAnswer() :- Has_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.output Answer", "completions": [".decl Has_discount(Organization:symbol, Store:symbol)\nHas_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.decl Answer()\nAnswer() :- Has_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.output Answer"]}
{"id": 1257, "answer": false, "completion": ".decl Has_submission_move(Fighter:symbol, Move:symbol, Date:symbol)\nHas_submission_move(\"Thiago Moises\", \"Achilles lock\", \"May 13 2020\").\n.decl Targets_body_part(Move:symbol, Body_part:symbol)\nTargets_body_part(\"Achilles lock\", \"Achilles\").\n.decl Answer()\nAnswer() :- Has_submission_move(\"Thiago Moises\", move, \"May 13 2020\"), Targets_body_part(move, \"Achilles\").\n.output Answer", "completions": [".decl Has_submission_move(Fighter:symbol, Move:symbol, Date:symbol)\nHas_submission_move(\"Thiago Moises\", \"Achilles lock\", \"May 13 2020\").\n.decl Targets_body_part(Move:symbol, Body_part:symbol)\nTargets_body_part(\"Achilles lock\", \"Achilles\").\n.decl Answer()\nAnswer() :- Has_submission_move(\"Thiago Moises\", move, \"May 13 2020\"), Targets_body_part(move, \"Achilles\").\n.output Answer"]}
{"id": 1258, "answer": true, "completion": ".decl Is_quadruped(Animal:symbol)\nIs_quadruped(\"rat\").\nIs_quadruped(\"ox\").\nIs_quadruped(\"tiger\").\nIs_quadruped(\"rabbit\").\nIs_quadruped(\"dragon\").\nIs_quadruped(\"snake\").\nIs_quadruped(\"horse\").\nIs_quadruped(\"goat\").\nIs_quadruped(\"monkey\").\nIs_quadruped(\"rooster\").\nIs_quadruped(\"dog\").\nIs_quadruped(\"pig\").\n\n.decl On_Chinese_calendar(Animal:symbol)\nOn_Chinese_calendar(\"rat\").\nOn_Chinese_calendar(\"ox\").\nOn_Chinese_calendar(\"tiger\").\nOn_Chinese_calendar(\"rabbit\").\nOn_Chinese_calendar(\"dragon\").\nOn_Chinese_calendar(\"snake\").\nOn_Chinese_calendar(\"horse\").\nOn_Chinese_calendar(\"goat\").\nOn_Chinese_calendar(\"monkey\").\nOn_Chinese_calendar(\"rooster\").\nOn_Chinese_calendar(\"dog\").\nOn_Chinese_calendar(\"pig\").\n\n.decl Answer()\nAnswer() :- Is_quadruped(animal), On_Chinese_calendar(animal).\n.output Answer", "completions": [".decl Is_quadruped(Animal:symbol)\nIs_quadruped(\"rat\").\nIs_quadruped(\"ox\").\nIs_quadruped(\"tiger\").\nIs_quadruped(\"rabbit\").\nIs_quadruped(\"dragon\").\nIs_quadruped(\"snake\").\nIs_quadruped(\"horse\").\nIs_quadruped(\"goat\").\nIs_quadruped(\"monkey\").\nIs_quadruped(\"rooster\").\nIs_quadruped(\"dog\").\nIs_quadruped(\"pig\").\n\n.decl On_Chinese_calendar(Animal:symbol)\nOn_Chinese_calendar(\"rat\").\nOn_Chinese_calendar(\"ox\").\nOn_Chinese_calendar(\"tiger\").\nOn_Chinese_calendar(\"rabbit\").\nOn_Chinese_calendar(\"dragon\").\nOn_Chinese_calendar(\"snake\").\nOn_Chinese_calendar(\"horse\").\nOn_Chinese_calendar(\"goat\").\nOn_Chinese_calendar(\"monkey\").\nOn_Chinese_calendar(\"rooster\").\nOn_Chinese_calendar(\"dog\").\nOn_Chinese_calendar(\"pig\").\n\n.decl Answer()\nAnswer() :- Is_quadruped(animal), On_Chinese_calendar(animal).\n.output Answer"]}
{"id": 1259, "answer": true, "completion": ".decl Has_public_stance(Person:symbol, Issue:symbol, Stance:symbol)\nHas_public_stance(\"Nancy Pelosi\", \"abortion\", \"pro-choice\").\n.decl Answer()\nAnswer() :- Has_public_stance(\"Nancy Pelosi\", \"abortion\", \"anti-abortion\").\n.output Answer", "completions": [".decl Has_public_stance(Person:symbol, Issue:symbol, Stance:symbol)\nHas_public_stance(\"Nancy Pelosi\", \"abortion\", \"pro-choice\").\n.decl Answer()\nAnswer() :- Has_public_stance(\"Nancy Pelosi\", \"abortion\", \"anti-abortion\").\n.output Answer"]}
{"id": 1260, "answer": false, "completion": ".decl Is_newspaper(Newspaper:symbol)\nIs_newspaper(\"The Daily Mirror\").\n.decl Can_sustain_campfire(Material:symbol)\nCan_sustain_campfire(\"wood\").\nCan_sustain_campfire(\"paper\").\n.decl Answer()\nAnswer() :- Is_newspaper(\"The Daily Mirror\"), Can_sustain_campfire(\"paper\").\n.output Answer", "completions": [".decl Is_newspaper(Newspaper:symbol)\nIs_newspaper(\"The Daily Mirror\").\n.decl Can_sustain_campfire(Material:symbol)\nCan_sustain_campfire(\"wood\").\nCan_sustain_campfire(\"paper\").\n.decl Answer()\nAnswer() :- Is_newspaper(\"The Daily Mirror\"), Can_sustain_campfire(\"paper\").\n.output Answer"]}
{"id": 1261, "answer": true, "completion": ".decl Performs_genre(Artist:symbol, Genre:symbol)\nPerforms_genre(\"Ludacris\", \"hip hop\").\nPerforms_genre(\"Ludacris\", \"rap\").\n.decl Answer()\nAnswer() :- Performs_genre(\"Ludacris\", \"classical music\").\n.output Answer", "completions": [".decl Performs_genre(Artist:symbol, Genre:symbol)\nPerforms_genre(\"Ludacris\", \"hip hop\").\nPerforms_genre(\"Ludacris\", \"rap\").\n.decl Answer()\nAnswer() :- Performs_genre(\"Ludacris\", \"classical music\").\n.output Answer"]}
{"id": 1262, "answer": true, "completion": ".decl Is_familiar_with(Person:symbol, Food:symbol)\nIs_familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.decl Answer()\nAnswer() :- !Is_familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.output Answer", "completions": [".decl Is_familiar_with(Person:symbol, Food:symbol)\nIs_familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.decl Answer()\nAnswer() :- !Is_familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.output Answer"]}
{"id": 1263, "answer": true, "completion": ".decl Floats(Object:symbol, Water_body:symbol)\n.decl Has_density(Object:symbol, Density:float)\n.decl Has_salt_concentration(Water_body:symbol, Concentration:float)\n\nHas_density(\"2 Euro coin\", 7.8).\nHas_density(\"water\", 1).\nHas_salt_concentration(\"Red Sea\", 0.04).\n\n// Calculate the effective density of water in the Red Sea\nEffective_density_water_red_sea(density:float) :- Has_density(\"water\", density1), Has_salt_concentration(\"Red Sea\", concentration), density = density1 * (1 + concentration).\n\n// Check if the 2 Euro coin floats in the Red Sea\nFloats(\"2 Euro coin\", \"Red Sea\") :- Has_density(\"2 Euro coin\", density1), Effective_density_water_red_sea(density2), density1 < density2.\n\n.decl Answer()\nAnswer() :- Floats(\"2 Euro coin\", \"Red Sea\").\n.output Answer", "completions": [".decl Floats(Object:symbol, Water_body:symbol)\n.decl Has_density(Object:symbol, Density:float)\n.decl Has_salt_concentration(Water_body:symbol, Concentration:float)\n\nHas_density(\"2 Euro coin\", 7.8).\nHas_density(\"water\", 1).\nHas_salt_concentration(\"Red Sea\", 0.04).\n\n// Calculate the effective density of water in the Red Sea\nEffective_density_water_red_sea(density:float) :- Has_density(\"water\", density1), Has_salt_concentration(\"Red Sea\", concentration), density = density1 * (1 + concentration).\n\n// Check if the 2 Euro coin floats in the Red Sea\nFloats(\"2 Euro coin\", \"Red Sea\") :- Has_density(\"2 Euro coin\", density1), Effective_density_water_red_sea(density2), density1 < density2.\n\n.decl Answer()\nAnswer() :- Floats(\"2 Euro coin\", \"Red Sea\").\n.output Answer"]}
{"id": 1264, "answer": true, "completion": ".decl Is_absence_of_color(Color:symbol)\nIs_absence_of_color(\"black\").\n.decl Answer()\nAnswer() :- !Is_absence_of_color(\"white\").\n.output Answer", "completions": [".decl Is_absence_of_color(Color:symbol)\nIs_absence_of_color(\"black\").\n.decl Answer()\nAnswer() :- !Is_absence_of_color(\"white\").\n.output Answer"]}
{"id": 1265, "answer": false, "completion": ".decl Committed_crime(Person:symbol, Crime:symbol)\nCommitted_crime(\"Marvin Gay Sr.\", \"murder\").\n.decl Father_of(Person:symbol, Father:symbol)\nFather_of(\"Isaac\", \"Abraham\").\n.decl Almost_committed_crime(Person:symbol, Crime:symbol)\nAlmost_committed_crime(\"Abraham\", \"murder\").\n.decl Similar_crime(Crime1:symbol, Crime2:symbol)\nSimilar_crime(\"murder\", \"murder\").\n.decl Answer()\nAnswer() :- Father_of(\"Isaac\", father), Almost_committed_crime(father, crime1), Committed_crime(\"Marvin Gay Sr.\", crime2), Similar_crime(crime1, crime2).\n.output Answer", "completions": [".decl Committed_crime(Person:symbol, Crime:symbol)\nCommitted_crime(\"Marvin Gay Sr.\", \"murder\").\n.decl Father_of(Person:symbol, Father:symbol)\nFather_of(\"Isaac\", \"Abraham\").\n.decl Almost_committed_crime(Person:symbol, Crime:symbol)\nAlmost_committed_crime(\"Abraham\", \"murder\").\n.decl Similar_crime(Crime1:symbol, Crime2:symbol)\nSimilar_crime(\"murder\", \"murder\").\n.decl Answer()\nAnswer() :- Father_of(\"Isaac\", father), Almost_committed_crime(father, crime1), Committed_crime(\"Marvin Gay Sr.\", crime2), Similar_crime(crime1, crime2).\n.output Answer"]}
{"id": 1266, "answer": true, "completion": ".decl Eats(Animal:symbol, Food:symbol)\nEats(\"owl monkey\", \"fruit\").\n.decl Is_type_of(Food:symbol, Type:symbol)\nIs_type_of(\"strawberry\", \"fruit\").\n.decl Answer()\nAnswer() :- Eats(\"owl monkey\", food_type), Is_type_of(\"strawberry\", food_type).\n.output Answer", "completions": [".decl Eats(Animal:symbol, Food:symbol)\nEats(\"owl monkey\", \"fruit\").\n.decl Is_type_of(Food:symbol, Type:symbol)\nIs_type_of(\"strawberry\", \"fruit\").\n.decl Answer()\nAnswer() :- Eats(\"owl monkey\", food_type), Is_type_of(\"strawberry\", food_type).\n.output Answer"]}
{"id": 1267, "answer": true, "completion": ".decl Has_application(Technology:symbol, Application:symbol)\nHas_application(\"whole genome sequencing\", \"disease identification\").\nHas_application(\"whole genome sequencing\", \"genetic research\").\nHas_application(\"whole genome sequencing\", \"COVID-19\").\n.decl Answer()\nAnswer() :- Has_application(\"whole genome sequencing\", \"COVID-19\").\n.output Answer", "completions": [".decl Has_application(Technology:symbol, Application:symbol)\nHas_application(\"whole genome sequencing\", \"disease identification\").\nHas_application(\"whole genome sequencing\", \"genetic research\").\nHas_application(\"whole genome sequencing\", \"COVID-19\").\n.decl Answer()\nAnswer() :- Has_application(\"whole genome sequencing\", \"COVID-19\").\n.output Answer"]}
{"id": 1268, "answer": true, "completion": ".decl Is_alive(Person:symbol, Status:symbol)\nIs_alive(\"Robin Williams\", \"deceased\").\n.decl Voiced(Person:symbol, Character:symbol, Movie:symbol)\nVoiced(\"Robin Williams\", \"Genie\", \"Disney's Aladdin\").\n.decl Answer()\nAnswer() :- Voiced(person, \"Genie\", \"Disney's Aladdin\"), Is_alive(person, \"alive\").\n.output Answer", "completions": [".decl Is_alive(Person:symbol, Status:symbol)\nIs_alive(\"Robin Williams\", \"deceased\").\n.decl Voiced(Person:symbol, Character:symbol, Movie:symbol)\nVoiced(\"Robin Williams\", \"Genie\", \"Disney's Aladdin\").\n.decl Answer()\nAnswer() :- Voiced(person, \"Genie\", \"Disney's Aladdin\"), Is_alive(person, \"alive\").\n.output Answer"]}
{"id": 1269, "answer": true, "completion": ".decl Eats_lumberjack(Food:symbol, Quantity:float)\nEats_lumberjack(\"dosa\", 3).\n.decl Fills_up(Person:symbol, Food:symbol, Quantity:float)\nFills_up(\"lumberjack\", \"dosa\", 5).\n.decl Answer()\nAnswer() :- Eats_lumberjack(\"dosa\", quantity1), Fills_up(\"lumberjack\", \"dosa\", quantity2), quantity1 >= quantity2.\n.output Answer", "completions": [".decl Eats_lumberjack(Food:symbol, Quantity:float)\nEats_lumberjack(\"dosa\", 3).\n.decl Fills_up(Person:symbol, Food:symbol, Quantity:float)\nFills_up(\"lumberjack\", \"dosa\", 5).\n.decl Answer()\nAnswer() :- Eats_lumberjack(\"dosa\", quantity1), Fills_up(\"lumberjack\", \"dosa\", quantity2), quantity1 >= quantity2.\n.output Answer"]}
{"id": 1270, "answer": false, "completion": ".decl Has_genetic_parents(Animal:symbol, Parents_known:float)\nHas_genetic_parents(\"black swan cygnets\", 1).\n.decl Answer()\nAnswer() :- Has_genetic_parents(\"black swan cygnets\", parents_known), parents_known = 1.\n.output Answer", "completions": [".decl Has_genetic_parents(Animal:symbol, Parents_known:float)\nHas_genetic_parents(\"black swan cygnets\", 1).\n.decl Answer()\nAnswer() :- Has_genetic_parents(\"black swan cygnets\", parents_known), parents_known = 1.\n.output Answer"]}
{"id": 1271, "answer": true, "completion": ".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Moon Jae-in\", \"Geoje\").\n.decl Is_Khanbaliq(Place:symbol)\nIs_Khanbaliq(\"Khanbaliq\").\n.decl Answer()\nAnswer() :- Born_in(\"Moon Jae-in\", place), !Is_Khanbaliq(place).\n.output Answer", "completions": [".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Moon Jae-in\", \"Geoje\").\n.decl Is_Khanbaliq(Place:symbol)\nIs_Khanbaliq(\"Khanbaliq\").\n.decl Answer()\nAnswer() :- Born_in(\"Moon Jae-in\", place), !Is_Khanbaliq(place).\n.output Answer"]}
{"id": 1272, "answer": true, "completion": ".decl Caused_by(Event:symbol, Person:symbol)\nCaused_by(\"Kurt Cobain's death\", \"Kurt Cobain\").\nCaused_by(\"Kurt Cobain's death\", \"shotgun\").\n.decl Invented_by(Invention:symbol, Inventor:symbol)\nInvented_by(\"shotgun\", \"Daniel LeFever\").\n.decl Answer()\nAnswer() :- Caused_by(\"Kurt Cobain's death\", cause), Invented_by(cause, \"Daniel LeFever\").\n.output Answer", "completions": [".decl Caused_by(Event:symbol, Person:symbol)\nCaused_by(\"Kurt Cobain's death\", \"Kurt Cobain\").\nCaused_by(\"Kurt Cobain's death\", \"shotgun\").\n.decl Invented_by(Invention:symbol, Inventor:symbol)\nInvented_by(\"shotgun\", \"Daniel LeFever\").\n.decl Answer()\nAnswer() :- Caused_by(\"Kurt Cobain's death\", cause), Invented_by(cause, \"Daniel LeFever\").\n.output Answer"]}
{"id": 1273, "answer": true, "completion": ".decl Was_theocracy(City:symbol, Time_period:symbol)\nWas_theocracy(\"Florence\", \"Italian Renaissance\").\n.decl Answer()\nAnswer() :- Was_theocracy(\"Florence\", \"Italian Renaissance\").\n.output Answer", "completions": [".decl Was_theocracy(City:symbol, Time_period:symbol)\nWas_theocracy(\"Florence\", \"Italian Renaissance\").\n.decl Answer()\nAnswer() :- Was_theocracy(\"Florence\", \"Italian Renaissance\").\n.output Answer"]}
{"id": 1274, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Snow White's dwarfs\", 7).\n.decl Game_requires_n_players(Game:symbol, N_players:float)\nGame_requires_n_players(\"7 Wonders\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Snow White's dwarfs\", n_members), Game_requires_n_players(\"7 Wonders\", n_players), n_members >= n_players.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Snow White's dwarfs\", 7).\n.decl Game_requires_n_players(Game:symbol, N_players:float)\nGame_requires_n_players(\"7 Wonders\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Snow White's dwarfs\", n_members), Game_requires_n_players(\"7 Wonders\", n_players), n_members >= n_players.\n.output Answer"]}
{"id": 1275, "answer": true, "completion": ".decl Has_skill_level(Person:symbol, Skill:symbol, Level:float)\nHas_skill_level(\"United States Army Ranger\", \"shooting\", 5).\n.decl Has_difficulty_level(Skill:symbol, Level:float)\nHas_difficulty_level(\"Mozambique Drill\", 3).\n.decl Answer()\nAnswer() :- Has_skill_level(\"United States Army Ranger\", \"shooting\", skill_level), Has_difficulty_level(\"Mozambique Drill\", difficulty_level), skill_level >= difficulty_level.\n.output Answer", "completions": [".decl Has_skill_level(Person:symbol, Skill:symbol, Level:float)\nHas_skill_level(\"United States Army Ranger\", \"shooting\", 5).\n.decl Has_difficulty_level(Skill:symbol, Level:float)\nHas_difficulty_level(\"Mozambique Drill\", 3).\n.decl Answer()\nAnswer() :- Has_skill_level(\"United States Army Ranger\", \"shooting\", skill_level), Has_difficulty_level(\"Mozambique Drill\", difficulty_level), skill_level >= difficulty_level.\n.output Answer"]}
{"id": 1276, "answer": true, "completion": ".decl Requires_portfolio(Job:symbol)\nRequires_portfolio(\"artist\").\nRequires_portfolio(\"designer\").\nRequires_portfolio(\"architect\").\n.decl Answer()\nAnswer() :- Requires_portfolio(\"construction worker\").\n.output Answer", "completions": [".decl Requires_portfolio(Job:symbol)\nRequires_portfolio(\"artist\").\nRequires_portfolio(\"designer\").\nRequires_portfolio(\"architect\").\n.decl Answer()\nAnswer() :- Requires_portfolio(\"construction worker\").\n.output Answer"]}
{"id": 1277, "answer": false, "completion": ".decl Has_attraction(City:symbol, Attraction_type:symbol)\nHas_attraction(\"San Francisco\", \"urban\").\nHas_attraction(\"San Francisco\", \"nature\").\n.decl Answer()\nAnswer() :- Has_attraction(\"San Francisco\", \"nature\").\n.output Answer", "completions": [".decl Has_attraction(City:symbol, Attraction_type:symbol)\nHas_attraction(\"San Francisco\", \"urban\").\nHas_attraction(\"San Francisco\", \"nature\").\n.decl Answer()\nAnswer() :- Has_attraction(\"San Francisco\", \"nature\").\n.output Answer"]}
{"id": 1278, "answer": true, "completion": ".decl Is_biggest_city_in_county(City:symbol, County:symbol)\nIs_biggest_city_in_county(\"Anaheim\", \"Orange County\").\n.decl Founders_speak_language(City:symbol, Language:symbol)\nFounders_speak_language(\"Anaheim\", \"German\").\n.decl Answer()\nAnswer() :- Is_biggest_city_in_county(city, \"Orange County\"), Founders_speak_language(city, \"Italian\").\n.output Answer", "completions": [".decl Is_biggest_city_in_county(City:symbol, County:symbol)\nIs_biggest_city_in_county(\"Anaheim\", \"Orange County\").\n.decl Founders_speak_language(City:symbol, Language:symbol)\nFounders_speak_language(\"Anaheim\", \"German\").\n.decl Answer()\nAnswer() :- Is_biggest_city_in_county(city, \"Orange County\"), Founders_speak_language(city, \"Italian\").\n.output Answer"]}
{"id": 1279, "answer": true, "completion": ".decl Involved_in_war(Nationality:symbol, War:symbol)\nInvolved_in_war(\"French\", \"American Revolution\").\nInvolved_in_war(\"American\", \"American Civil War\").\n.decl Answer()\nAnswer() :- Involved_in_war(\"French\", \"American Civil War\").\n.output Answer", "completions": [".decl Involved_in_war(Nationality:symbol, War:symbol)\nInvolved_in_war(\"French\", \"American Revolution\").\nInvolved_in_war(\"American\", \"American Civil War\").\n.decl Answer()\nAnswer() :- Involved_in_war(\"French\", \"American Civil War\").\n.output Answer"]}
{"id": 1280, "answer": false, "completion": ".decl Participated_in(Organization:symbol, Event:symbol)\nParticipated_in(\"Royal Air Force\", \"World War I\").\nParticipated_in(\"Royal Air Force\", \"World War II\").\n.decl Event(Event:symbol)\nEvent(\"Boxer Rebellion\").\nEvent(\"World War I\").\nEvent(\"World War II\").\n.decl Answer()\nAnswer() :- Participated_in(\"Royal Air Force\", \"Boxer Rebellion\").\n.output Answer", "completions": [".decl Participated_in(Organization:symbol, Event:symbol)\nParticipated_in(\"Royal Air Force\", \"World War I\").\nParticipated_in(\"Royal Air Force\", \"World War II\").\n.decl Event(Event:symbol)\nEvent(\"Boxer Rebellion\").\nEvent(\"World War I\").\nEvent(\"World War II\").\n.decl Answer()\nAnswer() :- Participated_in(\"Royal Air Force\", \"Boxer Rebellion\").\n.output Answer"]}
{"id": 1281, "answer": true, "completion": ".decl Is_part_of(Event:symbol, Holiday:symbol)\nIs_part_of(\"Elijah\", \"Passover\").\n.decl Is_Jewish_holiday(Holiday:symbol)\nIs_Jewish_holiday(\"Passover\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Elijah\", holiday), Is_Jewish_holiday(holiday).\n.output Answer", "completions": [".decl Is_part_of(Event:symbol, Holiday:symbol)\nIs_part_of(\"Elijah\", \"Passover\").\n.decl Is_Jewish_holiday(Holiday:symbol)\nIs_Jewish_holiday(\"Passover\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Elijah\", holiday), Is_Jewish_holiday(holiday).\n.output Answer"]}
{"id": 1282, "answer": true, "completion": ".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Peak of the Andes\", \"South America\").\nLocated_in(\"Colossus of Rhodes\", \"Rhodes, Greece\").\n.decl Visible_from(Object_A:symbol, Object_B:symbol)\nVisible_from(\"Colossus of Rhodes\", \"Mediterranean Sea\").\n.decl Answer()\nAnswer() :- Located_in(\"Peak of the Andes\", location1), Located_in(\"Colossus of Rhodes\", location2), location1 != location2, !Visible_from(\"Colossus of Rhodes\", \"South America\").\n.output Answer", "completions": [".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Peak of the Andes\", \"South America\").\nLocated_in(\"Colossus of Rhodes\", \"Rhodes, Greece\").\n.decl Visible_from(Object_A:symbol, Object_B:symbol)\nVisible_from(\"Colossus of Rhodes\", \"Mediterranean Sea\").\n.decl Answer()\nAnswer() :- Located_in(\"Peak of the Andes\", location1), Located_in(\"Colossus of Rhodes\", location2), location1 != location2, !Visible_from(\"Colossus of Rhodes\", \"South America\").\n.output Answer"]}
{"id": 1283, "answer": false, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"George Soros\", 8700000000).\n.decl Has_cost(Object:symbol, Cost:float)\nHas_cost(\"Louvre\", 10000000000).\n.decl Answer()\nAnswer() :- Has_net_worth(\"George Soros\", net_worth), Has_cost(\"Louvre\", cost), net_worth >= cost.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"George Soros\", 8700000000).\n.decl Has_cost(Object:symbol, Cost:float)\nHas_cost(\"Louvre\", 10000000000).\n.decl Answer()\nAnswer() :- Has_net_worth(\"George Soros\", net_worth), Has_cost(\"Louvre\", cost), net_worth >= cost.\n.output Answer"]}
{"id": 1284, "answer": true, "completion": ".decl Supports(Party:symbol, Policy:symbol)\nSupports(\"Communist Party of the Soviet Union\", \"Socialism\").\nSupports(\"Communist Party of the Soviet Union\", \"Communism\").\n.decl Opposes(Party:symbol, Policy:symbol)\nOpposes(\"Communist Party of the Soviet Union\", \"Capitalism\").\nOpposes(\"Communist Party of the Soviet Union\", \"Trickle Down Economics\").\n.decl Answer()\nAnswer() :- Supports(\"Communist Party of the Soviet Union\", \"Trickle Down Economics\").\nAnswer() :- !Opposes(\"Communist Party of the Soviet Union\", \"Trickle Down Economics\").\n.output Answer", "completions": [".decl Supports(Party:symbol, Policy:symbol)\nSupports(\"Communist Party of the Soviet Union\", \"Socialism\").\nSupports(\"Communist Party of the Soviet Union\", \"Communism\").\n.decl Opposes(Party:symbol, Policy:symbol)\nOpposes(\"Communist Party of the Soviet Union\", \"Capitalism\").\nOpposes(\"Communist Party of the Soviet Union\", \"Trickle Down Economics\").\n.decl Answer()\nAnswer() :- Supports(\"Communist Party of the Soviet Union\", \"Trickle Down Economics\").\nAnswer() :- !Opposes(\"Communist Party of the Soviet Union\", \"Trickle Down Economics\").\n.output Answer"]}
{"id": 1285, "answer": false, "completion": ".decl Appears_in(Animal:symbol, Show:symbol)\nAppears_in(\"animal\", \"You're a Good Sport, Charlie Brown\").\n.decl Is_hypothetically(Animal:symbol, Type:symbol)\nIs_hypothetically(\"animal\", \"hound\").\n.decl Answer()\nAnswer() :- Appears_in(animal, \"You're a Good Sport, Charlie Brown\"), Is_hypothetically(animal, \"hound\").\n.output Answer", "completions": [".decl Appears_in(Animal:symbol, Show:symbol)\nAppears_in(\"animal\", \"You're a Good Sport, Charlie Brown\").\n.decl Is_hypothetically(Animal:symbol, Type:symbol)\nIs_hypothetically(\"animal\", \"hound\").\n.decl Answer()\nAnswer() :- Appears_in(animal, \"You're a Good Sport, Charlie Brown\"), Is_hypothetically(animal, \"hound\").\n.output Answer"]}
{"id": 1286, "answer": true, "completion": ".decl Reigns_over(Monarch:symbol, Territory:symbol)\nReigns_over(\"Elizabeth II\", \"United Kingdom\").\nReigns_over(\"King Felipe VI\", \"Spain\").\n.decl Is_part_of(Territory_A:symbol, Territory_B:symbol)\nIs_part_of(\"Balearic Islands\", \"Spain\").\n.decl Answer()\nAnswer() :- Reigns_over(\"Elizabeth II\", territory), Is_part_of(\"Balearic Islands\", territory).\n.output Answer", "completions": [".decl Reigns_over(Monarch:symbol, Territory:symbol)\nReigns_over(\"Elizabeth II\", \"United Kingdom\").\nReigns_over(\"King Felipe VI\", \"Spain\").\n.decl Is_part_of(Territory_A:symbol, Territory_B:symbol)\nIs_part_of(\"Balearic Islands\", \"Spain\").\n.decl Answer()\nAnswer() :- Reigns_over(\"Elizabeth II\", territory), Is_part_of(\"Balearic Islands\", territory).\n.output Answer"]}
{"id": 1287, "answer": true, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Eddie Murphy\", 10).\n.decl Court_capacity(Court:symbol, Capacity:float)\nCourt_capacity(\"basketball court\", 5).\n.decl Answer()\nAnswer() :- Has_children(\"Eddie Murphy\", n_children), Court_capacity(\"basketball court\", capacity), n_children >= capacity.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Eddie Murphy\", 10).\n.decl Court_capacity(Court:symbol, Capacity:float)\nCourt_capacity(\"basketball court\", 5).\n.decl Answer()\nAnswer() :- Has_children(\"Eddie Murphy\", n_children), Court_capacity(\"basketball court\", capacity), n_children >= capacity.\n.output Answer"]}
{"id": 1288, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Thirty Years' War\", 30).\n.decl Has_lifespan(Animal:symbol, Lifespan:float)\nHas_lifespan(\"white cockatoo\", 50).\n.decl Answer()\nAnswer() :- Has_lifespan(\"white cockatoo\", lifespan), Last_n_years(\"Thirty Years' War\", n_years), lifespan >= n_years.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Thirty Years' War\", 30).\n.decl Has_lifespan(Animal:symbol, Lifespan:float)\nHas_lifespan(\"white cockatoo\", 50).\n.decl Answer()\nAnswer() :- Has_lifespan(\"white cockatoo\", lifespan), Last_n_years(\"Thirty Years' War\", n_years), lifespan >= n_years.\n.output Answer"]}
{"id": 1289, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Unsinkable Sam\", \"house full of aloe vera\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"aloe vera\", \"healing\").\nHas_property(\"aloe vera\", \"soothing\").\n.decl Ideal_for(Animal:symbol, Property:symbol)\nIdeal_for(\"Unsinkable Sam\", \"healing\").\nIdeal_for(\"Unsinkable Sam\", \"soothing\").\n.decl Answer()\nAnswer() :- Lives_in(\"Unsinkable Sam\", place), Has_property(object, property), Ideal_for(\"Unsinkable Sam\", property), place = \"house full of \" + object.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Unsinkable Sam\", \"house full of aloe vera\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"aloe vera\", \"healing\").\nHas_property(\"aloe vera\", \"soothing\").\n.decl Ideal_for(Animal:symbol, Property:symbol)\nIdeal_for(\"Unsinkable Sam\", \"healing\").\nIdeal_for(\"Unsinkable Sam\", \"soothing\").\n.decl Answer()\nAnswer() :- Lives_in(\"Unsinkable Sam\", place), Has_property(object, property), Ideal_for(\"Unsinkable Sam\", property), place = \"house full of \" + object.\n.output Answer"]}
{"id": 1290, "answer": false, "completion": ".decl Has_physical_ability(Person:symbol, Ability:symbol)\nHas_physical_ability(\"Linus Torvalds' wife\", \"physically defend herself\").\n.decl Answer()\nAnswer() :- !Has_physical_ability(\"Linus Torvalds' wife\", \"physically defend herself\").\n.output Answer", "completions": [".decl Has_physical_ability(Person:symbol, Ability:symbol)\nHas_physical_ability(\"Linus Torvalds' wife\", \"physically defend herself\").\n.decl Answer()\nAnswer() :- !Has_physical_ability(\"Linus Torvalds' wife\", \"physically defend herself\").\n.output Answer"]}
{"id": 1291, "answer": false, "completion": ".decl Is_Optometrist(Person:symbol)\nIs_Optometrist(\"Rand Paul\").\n.decl Licensed_in(State:symbol, Person:symbol)\nLicensed_in(\"Kentucky\", \"Rand Paul\").\n.decl Lives_in(Person:symbol, State:symbol)\nLives_in(\"New Yorker\", \"New York\").\n.decl Answer()\nAnswer() :- Is_Optometrist(\"Rand Paul\"), Licensed_in(\"New York\", \"Rand Paul\"), Lives_in(\"New Yorker\", \"New York\").\n.output Answer", "completions": [".decl Is_Optometrist(Person:symbol)\nIs_Optometrist(\"Rand Paul\").\n.decl Licensed_in(State:symbol, Person:symbol)\nLicensed_in(\"Kentucky\", \"Rand Paul\").\n.decl Lives_in(Person:symbol, State:symbol)\nLives_in(\"New Yorker\", \"New York\").\n.decl Answer()\nAnswer() :- Is_Optometrist(\"Rand Paul\"), Licensed_in(\"New York\", \"Rand Paul\"), Lives_in(\"New Yorker\", \"New York\").\n.output Answer"]}
{"id": 1292, "answer": true, "completion": ".decl Wins_Pulitzer_Prize(Person:symbol, Category:symbol)\nWins_Pulitzer_Prize(\"Cheb Mami\", \"musical composition\").\n.decl Eligible_for_Pulitzer_Prize(Person:symbol, Category:symbol)\nEligible_for_Pulitzer_Prize(\"Cheb Mami\", \"musical composition\").\n.decl Answer()\nAnswer() :- !Eligible_for_Pulitzer_Prize(\"Cheb Mami\", \"musical composition\").\n.output Answer", "completions": [".decl Wins_Pulitzer_Prize(Person:symbol, Category:symbol)\nWins_Pulitzer_Prize(\"Cheb Mami\", \"musical composition\").\n.decl Eligible_for_Pulitzer_Prize(Person:symbol, Category:symbol)\nEligible_for_Pulitzer_Prize(\"Cheb Mami\", \"musical composition\").\n.decl Answer()\nAnswer() :- !Eligible_for_Pulitzer_Prize(\"Cheb Mami\", \"musical composition\").\n.output Answer"]}
{"id": 1293, "answer": true, "completion": ".decl Fights_in_MCU(Character_A:symbol, Character_B:symbol)\nFights_in_MCU(\"Spiderman\", \"Vulture\").\nFights_in_MCU(\"Spiderman\", \"Mysterio\").\nFights_in_MCU(\"Spiderman\", \"Thanos\").\nFights_in_MCU(\"Falcon\", \"Winter Soldier\").\nFights_in_MCU(\"Falcon\", \"Thanos\").\n.decl Answer()\nAnswer() :- Fights_in_MCU(\"Spiderman\", \"Falcon\").\nAnswer() :- Fights_in_MCU(\"Falcon\", \"Spiderman\").\n.output Answer", "completions": [".decl Fights_in_MCU(Character_A:symbol, Character_B:symbol)\nFights_in_MCU(\"Spiderman\", \"Vulture\").\nFights_in_MCU(\"Spiderman\", \"Mysterio\").\nFights_in_MCU(\"Spiderman\", \"Thanos\").\nFights_in_MCU(\"Falcon\", \"Winter Soldier\").\nFights_in_MCU(\"Falcon\", \"Thanos\").\n.decl Answer()\nAnswer() :- Fights_in_MCU(\"Spiderman\", \"Falcon\").\nAnswer() :- Fights_in_MCU(\"Falcon\", \"Spiderman\").\n.output Answer"]}
{"id": 1294, "answer": true, "completion": ".decl Character(Character:symbol, Show:symbol, Leadership_skills:symbol)\nCharacter(\"Michael Scott\", \"The Office\", \"poor\").\n\n.decl Answer()\nAnswer() :- Character(\"Michael Scott\", \"The Office\", \"tremendous\").\n.output Answer", "completions": [".decl Character(Character:symbol, Show:symbol, Leadership_skills:symbol)\nCharacter(\"Michael Scott\", \"The Office\", \"poor\").\n\n.decl Answer()\nAnswer() :- Character(\"Michael Scott\", \"The Office\", \"tremendous\").\n.output Answer"]}
{"id": 1295, "answer": false, "completion": ".decl Appears_in_film(Character:symbol, Film:symbol, Year:float)\nAppears_in_film(\"milliner\", \"Alice in Wonderland\", 1951).\n.decl Has_lead_exposure(Character:symbol)\nHas_lead_exposure(\"milliner\").\n.decl Needs_succimer(Person:symbol)\nNeeds_succimer(person) :- Has_lead_exposure(person).\n.decl Answer()\nAnswer() :- Appears_in_film(\"milliner\", \"Alice in Wonderland\", 1951), Needs_succimer(\"milliner\").\n.output Answer", "completions": [".decl Appears_in_film(Character:symbol, Film:symbol, Year:float)\nAppears_in_film(\"milliner\", \"Alice in Wonderland\", 1951).\n.decl Has_lead_exposure(Character:symbol)\nHas_lead_exposure(\"milliner\").\n.decl Needs_succimer(Person:symbol)\nNeeds_succimer(person) :- Has_lead_exposure(person).\n.decl Answer()\nAnswer() :- Appears_in_film(\"milliner\", \"Alice in Wonderland\", 1951), Needs_succimer(\"milliner\").\n.output Answer"]}
{"id": 1296, "answer": false, "completion": ".decl Prevents_death(Medication:symbol, Cause_of_death:symbol)\nPrevents_death(\"Narcan\", \"opioid overdose\").\n.decl Died_of(Person:symbol, Cause_of_death:symbol)\nDied_of(\"Amy Winehouse\", \"alcohol poisoning\").\n.decl Answer()\nAnswer() :- Died_of(\"Amy Winehouse\", cause_of_death), Prevents_death(\"Narcan\", cause_of_death).\n.output Answer", "completions": [".decl Prevents_death(Medication:symbol, Cause_of_death:symbol)\nPrevents_death(\"Narcan\", \"opioid overdose\").\n.decl Died_of(Person:symbol, Cause_of_death:symbol)\nDied_of(\"Amy Winehouse\", \"alcohol poisoning\").\n.decl Answer()\nAnswer() :- Died_of(\"Amy Winehouse\", cause_of_death), Prevents_death(\"Narcan\", cause_of_death).\n.output Answer"]}
{"id": 1297, "answer": true, "completion": ".decl Invented(Person:symbol, Invention:symbol, Year:float)\nInvented(\"Alexander Graham Bell\", \"telephone\", 1876).\n.decl Has_feature(Invention:symbol, Feature:symbol)\nHas_feature(\"modern telephone\", \"call waiting\").\n.decl Invented_before(Invention:symbol, Year:float)\nInvented_before(\"telephone\", 1876).\n.decl Answer()\nAnswer() :- Invented(\"Alexander Graham Bell\", \"telephone\", year1), Has_feature(\"telephone\", \"call waiting\"), Invented_before(\"telephone\", year2), year1 <= year2.\n.output Answer", "completions": [".decl Invented(Person:symbol, Invention:symbol, Year:float)\nInvented(\"Alexander Graham Bell\", \"telephone\", 1876).\n.decl Has_feature(Invention:symbol, Feature:symbol)\nHas_feature(\"modern telephone\", \"call waiting\").\n.decl Invented_before(Invention:symbol, Year:float)\nInvented_before(\"telephone\", 1876).\n.decl Answer()\nAnswer() :- Invented(\"Alexander Graham Bell\", \"telephone\", year1), Has_feature(\"telephone\", \"call waiting\"), Invented_before(\"telephone\", year2), year1 <= year2.\n.output Answer"]}
{"id": 1298, "answer": false, "completion": ".decl Has_character(Comic:symbol, Character:symbol)\nHas_character(\"DC Comics\", \"The Joker\").\n.decl Owns(Person:symbol, Comic:symbol)\nOwns(\"Bart Simpson\", \"DC Comics\").\n.decl Answer()\nAnswer() :- Owns(\"Bart Simpson\", comic), Has_character(comic, \"The Joker\").\n.output Answer", "completions": [".decl Has_character(Comic:symbol, Character:symbol)\nHas_character(\"DC Comics\", \"The Joker\").\n.decl Owns(Person:symbol, Comic:symbol)\nOwns(\"Bart Simpson\", \"DC Comics\").\n.decl Answer()\nAnswer() :- Owns(\"Bart Simpson\", comic), Has_character(comic, \"The Joker\").\n.output Answer"]}
{"id": 1299, "answer": false, "completion": ".decl Tastes_like(Object:symbol, Taste:symbol)\nTastes_like(\"grocery store meat\", \"game\").\n.decl Customer_happy(Taste:symbol)\nCustomer_happy(\"game\").\n.decl Answer()\nAnswer() :- Tastes_like(\"grocery store meat\", taste), Customer_happy(taste).\n.output Answer", "completions": [".decl Tastes_like(Object:symbol, Taste:symbol)\nTastes_like(\"grocery store meat\", \"game\").\n.decl Customer_happy(Taste:symbol)\nCustomer_happy(\"game\").\n.decl Answer()\nAnswer() :- Tastes_like(\"grocery store meat\", taste), Customer_happy(taste).\n.output Answer"]}
{"id": 1300, "answer": true, "completion": ".decl Original_Muppet(Character:symbol, Show:symbol)\nOriginal_Muppet(\"Kermit\", \"Sesame Street\").\nOriginal_Muppet(\"Big Bird\", \"Sesame Street\").\nOriginal_Muppet(\"Oscar\", \"Sesame Street\").\nOriginal_Muppet(\"Bert\", \"Sesame Street\").\nOriginal_Muppet(\"Ernie\", \"Sesame Street\").\n.decl Answer()\nAnswer() :- Original_Muppet(\"Elmo\", \"Sesame Street\").\n.output Answer", "completions": [".decl Original_Muppet(Character:symbol, Show:symbol)\nOriginal_Muppet(\"Kermit\", \"Sesame Street\").\nOriginal_Muppet(\"Big Bird\", \"Sesame Street\").\nOriginal_Muppet(\"Oscar\", \"Sesame Street\").\nOriginal_Muppet(\"Bert\", \"Sesame Street\").\nOriginal_Muppet(\"Ernie\", \"Sesame Street\").\n.decl Answer()\nAnswer() :- Original_Muppet(\"Elmo\", \"Sesame Street\").\n.output Answer"]}
{"id": 1301, "answer": true, "completion": ".decl Is_pescatarian_food(Food:symbol)\nIs_pescatarian_food(\"fish\").\nIs_pescatarian_food(\"seafood\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"anchovy pizza\", \"anchovy\").\n.decl Is_type_of(Ingredient:symbol, Type:symbol)\nIs_type_of(\"anchovy\", \"fish\").\n.decl Answer()\nAnswer() :- Contains(\"anchovy pizza\", ingredient), Is_type_of(ingredient, type), Is_pescatarian_food(type).\n.output Answer", "completions": [".decl Is_pescatarian_food(Food:symbol)\nIs_pescatarian_food(\"fish\").\nIs_pescatarian_food(\"seafood\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"anchovy pizza\", \"anchovy\").\n.decl Is_type_of(Ingredient:symbol, Type:symbol)\nIs_type_of(\"anchovy\", \"fish\").\n.decl Answer()\nAnswer() :- Contains(\"anchovy pizza\", ingredient), Is_type_of(ingredient, type), Is_pescatarian_food(type).\n.output Answer"]}
{"id": 1302, "answer": true, "completion": ".decl Character(Character:symbol, Location:symbol)\nCharacter(\"Arnold\", \"various locations\").\nCharacter(\"Gerald\", \"various locations\").\nCharacter(\"Helga\", \"various locations\").\nCharacter(\"Grandpa\", \"various locations\").\nCharacter(\"Stoop Kid\", \"porch\").\n\n.decl Answer()\nAnswer() :- Character(character, \"porch\").\n.output Answer", "completions": [".decl Character(Character:symbol, Location:symbol)\nCharacter(\"Arnold\", \"various locations\").\nCharacter(\"Gerald\", \"various locations\").\nCharacter(\"Helga\", \"various locations\").\nCharacter(\"Grandpa\", \"various locations\").\nCharacter(\"Stoop Kid\", \"porch\").\n\n.decl Answer()\nAnswer() :- Character(character, \"porch\").\n.output Answer"]}
{"id": 1303, "answer": false, "completion": ".decl Contains_plastic(Food:symbol)\nContains_plastic(\"shrimp scampi\").\n.decl Answer()\nAnswer() :- !Contains_plastic(\"shrimp scampi\").\n.output Answer", "completions": [".decl Contains_plastic(Food:symbol)\nContains_plastic(\"shrimp scampi\").\n.decl Answer()\nAnswer() :- !Contains_plastic(\"shrimp scampi\").\n.output Answer"]}
{"id": 1304, "answer": true, "completion": ".decl Killed_for_reason(Animal:symbol, Reason:symbol)\nKilled_for_reason(\"rhinoceros\", \"improve human sex lives\").\n.decl Answer()\nAnswer() :- Killed_for_reason(\"rhinoceros\", \"improve human sex lives\").\n.output Answer", "completions": [".decl Killed_for_reason(Animal:symbol, Reason:symbol)\nKilled_for_reason(\"rhinoceros\", \"improve human sex lives\").\n.decl Answer()\nAnswer() :- Killed_for_reason(\"rhinoceros\", \"improve human sex lives\").\n.output Answer"]}
{"id": 1305, "answer": true, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"newborn kitten\", 0.01).\nHas_area(\"Amtrak coach seat\", 0.5).\n.decl Answer()\nAnswer() :- Has_area(\"newborn kitten\", area1), Has_area(\"Amtrak coach seat\", area2), 3 * area1 <= area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"newborn kitten\", 0.01).\nHas_area(\"Amtrak coach seat\", 0.5).\n.decl Answer()\nAnswer() :- Has_area(\"newborn kitten\", area1), Has_area(\"Amtrak coach seat\", area2), 3 * area1 <= area2.\n.output Answer"]}
{"id": 1306, "answer": true, "completion": ".decl Has_area(Region:symbol, Area:float)\nHas_area(\"Persian Gulf\", 251000).\nHas_area(\"New Jersey\", 22591).\n.decl Answer()\nAnswer() :- Has_area(\"Persian Gulf\", area1), Has_area(\"New Jersey\", area2), area1 <= area2.\n.output Answer", "completions": [".decl Has_area(Region:symbol, Area:float)\nHas_area(\"Persian Gulf\", 251000).\nHas_area(\"New Jersey\", 22591).\n.decl Answer()\nAnswer() :- Has_area(\"Persian Gulf\", area1), Has_area(\"New Jersey\", area2), area1 <= area2.\n.output Answer"]}
{"id": 1307, "answer": false, "completion": ".decl Is_tourist_destination(Place:symbol)\nIs_tourist_destination(\"Paris\").\nIs_tourist_destination(\"New York\").\nIs_tourist_destination(\"London\").\n.decl Is_era(Era:symbol)\nIs_era(\"Jurassic\").\n.decl Answer()\nAnswer() :- Is_tourist_destination(\"Jurassic\").\nAnswer() :- Is_era(\"Jurassic\"), !Is_tourist_destination(\"Jurassic\").\n.output Answer", "completions": [".decl Is_tourist_destination(Place:symbol)\nIs_tourist_destination(\"Paris\").\nIs_tourist_destination(\"New York\").\nIs_tourist_destination(\"London\").\n.decl Is_era(Era:symbol)\nIs_era(\"Jurassic\").\n.decl Answer()\nAnswer() :- Is_tourist_destination(\"Jurassic\").\nAnswer() :- Is_era(\"Jurassic\"), !Is_tourist_destination(\"Jurassic\").\n.output Answer"]}
{"id": 1308, "answer": true, "completion": ".decl Believes_in(Group:symbol, Entity:symbol, Testament:symbol)\nBelieves_in(\"Jews\", \"angels\", \"Old Testament\").\nBelieves_in(\"Christians\", \"angels\", \"New Testament\").\n.decl Answer()\nAnswer() :- Believes_in(\"Jews\", \"angels\", \"New Testament\").\n.output Answer", "completions": [".decl Believes_in(Group:symbol, Entity:symbol, Testament:symbol)\nBelieves_in(\"Jews\", \"angels\", \"Old Testament\").\nBelieves_in(\"Christians\", \"angels\", \"New Testament\").\n.decl Answer()\nAnswer() :- Believes_in(\"Jews\", \"angels\", \"New Testament\").\n.output Answer"]}
{"id": 1309, "answer": false, "completion": ".decl Played_role(Actor:symbol, Role:symbol)\nPlayed_role(\"Helen Mirren\", \"Elizabeth II\").\n.decl Speaks_fluent_language(Person:symbol, Language:symbol)\nSpeaks_fluent_language(\"Helen Mirren\", \"English\").\n.decl Answer()\nAnswer() :- Played_role(actor, \"Elizabeth II\"), Speaks_fluent_language(actor, \"Arabic\").\n.output Answer", "completions": [".decl Played_role(Actor:symbol, Role:symbol)\nPlayed_role(\"Helen Mirren\", \"Elizabeth II\").\n.decl Speaks_fluent_language(Person:symbol, Language:symbol)\nSpeaks_fluent_language(\"Helen Mirren\", \"English\").\n.decl Answer()\nAnswer() :- Played_role(actor, \"Elizabeth II\"), Speaks_fluent_language(actor, \"Arabic\").\n.output Answer"]}
{"id": 1310, "answer": false, "completion": ".decl Challenges_in_primaries(Person_A:symbol, Person_B:symbol, Year:float)\nChallenges_in_primaries(\"Kane\", \"Joe Biden\", 2024).\n.decl Current_year(Year:float)\nCurrent_year(2022).\n.decl Answer()\nAnswer() :- Challenges_in_primaries(\"Kane\", \"Joe Biden\", year), Current_year(current_year), year == current_year.\n.output Answer", "completions": [".decl Challenges_in_primaries(Person_A:symbol, Person_B:symbol, Year:float)\nChallenges_in_primaries(\"Kane\", \"Joe Biden\", 2024).\n.decl Current_year(Year:float)\nCurrent_year(2022).\n.decl Answer()\nAnswer() :- Challenges_in_primaries(\"Kane\", \"Joe Biden\", year), Current_year(current_year), year == current_year.\n.output Answer"]}
{"id": 1311, "answer": false, "completion": ".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"Eid al-Fitr\", 3).\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Triple Crown\", \"June\").\nHappens_in_month(\"Eid al-Fitr\", \"May\").\nHappens_in_month(\"Eid al-Fitr\", \"June\").\n.decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"May\", 31).\nHas_n_days(\"June\", 30).\n.decl Answer()\nAnswer() :- Happens_in_month(\"Triple Crown\", month1), Happens_in_month(\"Eid al-Fitr\", month1).\nAnswer() :- Happens_in_month(\"Triple Crown\", month1), Happens_in_month(\"Eid al-Fitr\", month2), Has_n_days(month2, n_days2), Lasts_n_days(\"Eid al-Fitr\", n_days3), n_days2 - n_days3 >= 0.\n.output Answer", "completions": [".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"Eid al-Fitr\", 3).\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Triple Crown\", \"June\").\nHappens_in_month(\"Eid al-Fitr\", \"May\").\nHappens_in_month(\"Eid al-Fitr\", \"June\").\n.decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"May\", 31).\nHas_n_days(\"June\", 30).\n.decl Answer()\nAnswer() :- Happens_in_month(\"Triple Crown\", month1), Happens_in_month(\"Eid al-Fitr\", month1).\nAnswer() :- Happens_in_month(\"Triple Crown\", month1), Happens_in_month(\"Eid al-Fitr\", month2), Has_n_days(month2, n_days2), Lasts_n_days(\"Eid al-Fitr\", n_days3), n_days2 - n_days3 >= 0.\n.output Answer"]}
{"id": 1312, "answer": true, "completion": ".decl Born_on_date(Baby:symbol, Date:symbol)\nBorn_on_date(\"baby\", \"Halloween\").\n.decl Has_zodiac_sign(Date:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"Halloween\", \"Scorpio\").\n.decl Is_zodiac_sign(Person:symbol, Zodiac_sign:symbol)\nIs_zodiac_sign(person, zodiac_sign) :- Born_on_date(person, date), Has_zodiac_sign(date, zodiac_sign).\n.decl Answer()\nAnswer() :- Is_zodiac_sign(\"baby\", \"Scorpio\").\n.output Answer", "completions": [".decl Born_on_date(Baby:symbol, Date:symbol)\nBorn_on_date(\"baby\", \"Halloween\").\n.decl Has_zodiac_sign(Date:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"Halloween\", \"Scorpio\").\n.decl Is_zodiac_sign(Person:symbol, Zodiac_sign:symbol)\nIs_zodiac_sign(person, zodiac_sign) :- Born_on_date(person, date), Has_zodiac_sign(date, zodiac_sign).\n.decl Answer()\nAnswer() :- Is_zodiac_sign(\"baby\", \"Scorpio\").\n.output Answer"]}
{"id": 1313, "answer": false, "completion": ".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"A Tale of Two Cities\", \"historical fiction\").\n.decl Is_popular_science(Genre:symbol)\nIs_popular_science(\"popular science\").\n.decl Answer()\nAnswer() :- Is_genre(\"A Tale of Two Cities\", genre), Is_popular_science(genre).\n.output Answer", "completions": [".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"A Tale of Two Cities\", \"historical fiction\").\n.decl Is_popular_science(Genre:symbol)\nIs_popular_science(\"popular science\").\n.decl Answer()\nAnswer() :- Is_genre(\"A Tale of Two Cities\", genre), Is_popular_science(genre).\n.output Answer"]}
{"id": 1314, "answer": false, "completion": ".decl On_blacklist(Person:symbol, Organization:symbol)\nOn_blacklist(\"Michael Vick\", \"People for the Ethical Treatment of Animals\").\n.decl Answer()\nAnswer() :- On_blacklist(\"Michael Vick\", \"People for the Ethical Treatment of Animals\").\n.output Answer", "completions": [".decl On_blacklist(Person:symbol, Organization:symbol)\nOn_blacklist(\"Michael Vick\", \"People for the Ethical Treatment of Animals\").\n.decl Answer()\nAnswer() :- On_blacklist(\"Michael Vick\", \"People for the Ethical Treatment of Animals\").\n.output Answer"]}
{"id": 1315, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"ten gallons of seawater\", 10).\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"six year old\", 6).\n.decl Can_crush(Object:symbol, Person:symbol)\nCan_crush(\"ten gallons of seawater\", \"six year old\").\n.decl Answer()\nAnswer() :- Can_crush(\"ten gallons of seawater\", \"six year old\").\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"ten gallons of seawater\", 10).\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"six year old\", 6).\n.decl Can_crush(Object:symbol, Person:symbol)\nCan_crush(\"ten gallons of seawater\", \"six year old\").\n.decl Answer()\nAnswer() :- Can_crush(\"ten gallons of seawater\", \"six year old\").\n.output Answer"]}
{"id": 1316, "answer": true, "completion": ".decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"someone\", \"Japanese\").\n.decl Is_nordic_country(Country:symbol)\nIs_nordic_country(\"Denmark\").\nIs_nordic_country(\"Finland\").\nIs_nordic_country(\"Iceland\").\nIs_nordic_country(\"Norway\").\nIs_nordic_country(\"Sweden\").\n.decl Needs_passport(Nationality:symbol, Destination:symbol)\nNeeds_passport(\"Japanese\", \"Denmark\").\nNeeds_passport(\"Japanese\", \"Finland\").\nNeeds_passport(\"Japanese\", \"Iceland\").\nNeeds_passport(\"Japanese\", \"Norway\").\nNeeds_passport(\"Japanese\", \"Sweden\").\n.decl Answer()\nAnswer() :- Is_nationality(\"someone\", nationality), Is_nordic_country(country), Needs_passport(nationality, country).\n.output Answer", "completions": [".decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"someone\", \"Japanese\").\n.decl Is_nordic_country(Country:symbol)\nIs_nordic_country(\"Denmark\").\nIs_nordic_country(\"Finland\").\nIs_nordic_country(\"Iceland\").\nIs_nordic_country(\"Norway\").\nIs_nordic_country(\"Sweden\").\n.decl Needs_passport(Nationality:symbol, Destination:symbol)\nNeeds_passport(\"Japanese\", \"Denmark\").\nNeeds_passport(\"Japanese\", \"Finland\").\nNeeds_passport(\"Japanese\", \"Iceland\").\nNeeds_passport(\"Japanese\", \"Norway\").\nNeeds_passport(\"Japanese\", \"Sweden\").\n.decl Answer()\nAnswer() :- Is_nationality(\"someone\", nationality), Is_nordic_country(country), Needs_passport(nationality, country).\n.output Answer"]}
{"id": 1317, "answer": true, "completion": ".decl Is_leader(Person:symbol, Country:symbol)\nIs_leader(\"John Key\", \"New Zealand\").\n.decl Can_issue_executive_order(Leader:symbol, Country:symbol)\nCan_issue_executive_order(\"President of the USA\", \"USA\").\n.decl Answer()\nAnswer() :- Is_leader(\"John Key\", country), Can_issue_executive_order(\"President of the USA\", \"USA\"), country = \"USA\".\n.output Answer", "completions": [".decl Is_leader(Person:symbol, Country:symbol)\nIs_leader(\"John Key\", \"New Zealand\").\n.decl Can_issue_executive_order(Leader:symbol, Country:symbol)\nCan_issue_executive_order(\"President of the USA\", \"USA\").\n.decl Answer()\nAnswer() :- Is_leader(\"John Key\", country), Can_issue_executive_order(\"President of the USA\", \"USA\"), country = \"USA\".\n.output Answer"]}
{"id": 1318, "answer": true, "completion": ".decl Is_combination(Goddess:symbol, Goddess1:symbol, Goddess2:symbol)\nIs_combination(\"Freya\", \"Athena\", \"Aphrodite\").\n.decl Answer()\nAnswer() :- Is_combination(\"Freya\", \"Athena\", \"Aphrodite\").\n.output Answer", "completions": [".decl Is_combination(Goddess:symbol, Goddess1:symbol, Goddess2:symbol)\nIs_combination(\"Freya\", \"Athena\", \"Aphrodite\").\n.decl Answer()\nAnswer() :- Is_combination(\"Freya\", \"Athena\", \"Aphrodite\").\n.output Answer"]}
{"id": 1319, "answer": true, "completion": ".decl Has_title_fight_wins(Boxer:symbol, Weight_class:symbol, Wins:float)\nHas_title_fight_wins(\"Jack Dempsey\", \"heavyweight\", 6).\nHas_title_fight_wins(\"Joe Louis\", \"heavyweight\", 26).\nHas_title_fight_wins(\"Muhammad Ali\", \"heavyweight\", 22).\nHas_title_fight_wins(\"Rocky Marciano\", \"heavyweight\", 7).\nHas_title_fight_wins(\"Sugar Ray Robinson\", \"middleweight\", 14).\nHas_title_fight_wins(\"Carlos Monzon\", \"middleweight\", 14).\nHas_title_fight_wins(\"Marvin Hagler\", \"middleweight\", 12).\n\n.decl Answer()\nAnswer() :- Has_title_fight_wins(\"Jack Dempsey\", weight_class, wins1), Has_title_fight_wins(boxer, weight_class, wins2), wins1 >= wins2, boxer != \"Jack Dempsey\".\n.output Answer", "completions": [".decl Has_title_fight_wins(Boxer:symbol, Weight_class:symbol, Wins:float)\nHas_title_fight_wins(\"Jack Dempsey\", \"heavyweight\", 6).\nHas_title_fight_wins(\"Joe Louis\", \"heavyweight\", 26).\nHas_title_fight_wins(\"Muhammad Ali\", \"heavyweight\", 22).\nHas_title_fight_wins(\"Rocky Marciano\", \"heavyweight\", 7).\nHas_title_fight_wins(\"Sugar Ray Robinson\", \"middleweight\", 14).\nHas_title_fight_wins(\"Carlos Monzon\", \"middleweight\", 14).\nHas_title_fight_wins(\"Marvin Hagler\", \"middleweight\", 12).\n\n.decl Answer()\nAnswer() :- Has_title_fight_wins(\"Jack Dempsey\", weight_class, wins1), Has_title_fight_wins(boxer, weight_class, wins2), wins1 >= wins2, boxer != \"Jack Dempsey\".\n.output Answer"]}
{"id": 1320, "answer": false, "completion": ".decl Has_episodes(Show:symbol, N_episodes:float)\nHas_episodes(\"Seinfeld\", 180).\n.decl Days_in_year(N_days:float)\nDays_in_year(365).\n.decl Answer()\nAnswer() :- Has_episodes(\"Seinfeld\", n_episodes), Days_in_year(n_days), n_episodes >= n_days.\n.output Answer", "completions": [".decl Has_episodes(Show:symbol, N_episodes:float)\nHas_episodes(\"Seinfeld\", 180).\n.decl Days_in_year(N_days:float)\nDays_in_year(365).\n.decl Answer()\nAnswer() :- Has_episodes(\"Seinfeld\", n_episodes), Days_in_year(n_days), n_episodes >= n_days.\n.output Answer"]}
{"id": 1321, "answer": false, "completion": ".decl Speaks(Language:symbol, Country:symbol)\nSpeaks(\"Kirundi\", \"Burundi\").\nSpeaks(\"French\", \"Burundi\").\nSpeaks(\"English\", \"New Brunswick\").\nSpeaks(\"French\", \"New Brunswick\").\n.decl Answer()\nAnswer() :- Speaks(language, \"Burundi\"), Speaks(language, \"New Brunswick\").\n.output Answer", "completions": [".decl Speaks(Language:symbol, Country:symbol)\nSpeaks(\"Kirundi\", \"Burundi\").\nSpeaks(\"French\", \"Burundi\").\nSpeaks(\"English\", \"New Brunswick\").\nSpeaks(\"French\", \"New Brunswick\").\n.decl Answer()\nAnswer() :- Speaks(language, \"Burundi\"), Speaks(language, \"New Brunswick\").\n.output Answer"]}
{"id": 1322, "answer": false, "completion": ".decl Has_ingredient(Restaurant:symbol, Ingredient:symbol)\nHas_ingredient(\"Carmine's kitchen\", \"olive oil\").\n.decl Is_essential(Restaurant:symbol, Ingredient:symbol)\nIs_essential(\"Carmine's kitchen\", \"olive oil\").\n.decl Panicked(Restaurant:symbol)\nPanicked(restaurant) :- Is_essential(restaurant, ingredient), !Has_ingredient(restaurant, ingredient).\n.decl Answer()\nAnswer() :- Panicked(\"Carmine's kitchen\").\n.output Answer", "completions": [".decl Has_ingredient(Restaurant:symbol, Ingredient:symbol)\nHas_ingredient(\"Carmine's kitchen\", \"olive oil\").\n.decl Is_essential(Restaurant:symbol, Ingredient:symbol)\nIs_essential(\"Carmine's kitchen\", \"olive oil\").\n.decl Panicked(Restaurant:symbol)\nPanicked(restaurant) :- Is_essential(restaurant, ingredient), !Has_ingredient(restaurant, ingredient).\n.decl Answer()\nAnswer() :- Panicked(\"Carmine's kitchen\").\n.output Answer"]}
{"id": 1323, "answer": true, "completion": ".decl Dangerous_job(Job:symbol)\nDangerous_job(\"mail carrier\").\n.decl Considered_dangerous(Job:symbol)\nConsidered_dangerous(\"lumberjack\").\nConsidered_dangerous(\"fisherman\").\nConsidered_dangerous(\"construction worker\").\nConsidered_dangerous(\"miner\").\n.decl Answer()\nAnswer() :- Dangerous_job(\"mail carrier\"), Considered_dangerous(\"mail carrier\").\n.output Answer", "completions": [".decl Dangerous_job(Job:symbol)\nDangerous_job(\"mail carrier\").\n.decl Considered_dangerous(Job:symbol)\nConsidered_dangerous(\"lumberjack\").\nConsidered_dangerous(\"fisherman\").\nConsidered_dangerous(\"construction worker\").\nConsidered_dangerous(\"miner\").\n.decl Answer()\nAnswer() :- Dangerous_job(\"mail carrier\"), Considered_dangerous(\"mail carrier\").\n.output Answer"]}
{"id": 1324, "answer": false, "completion": ".decl Is_mammal(Animal:symbol)\nIs_mammal(\"duck\").\n.decl Needs_caesarean(Animal:symbol)\nNeeds_caesarean(animal) :- Is_mammal(animal).\n.decl Answer()\nAnswer() :- Needs_caesarean(\"duck\").\n.output Answer", "completions": [".decl Is_mammal(Animal:symbol)\nIs_mammal(\"duck\").\n.decl Needs_caesarean(Animal:symbol)\nNeeds_caesarean(animal) :- Is_mammal(animal).\n.decl Answer()\nAnswer() :- Needs_caesarean(\"duck\").\n.output Answer"]}
{"id": 1325, "answer": true, "completion": ".decl Used_in_event(Tool:symbol, Event:symbol)\nUsed_in_event(\"hammer\", \"Martin Luther's Reformation opening salvo\").\nUsed_in_event(\"nails\", \"Martin Luther's Reformation opening salvo\").\nUsed_in_event(\"hammer\", \"crucifixion\").\nUsed_in_event(\"nails\", \"crucifixion\").\n.decl Answer()\nAnswer() :- Used_in_event(tool, \"Martin Luther's Reformation opening salvo\"), Used_in_event(tool, \"crucifixion\").\n.output Answer", "completions": [".decl Used_in_event(Tool:symbol, Event:symbol)\nUsed_in_event(\"hammer\", \"Martin Luther's Reformation opening salvo\").\nUsed_in_event(\"nails\", \"Martin Luther's Reformation opening salvo\").\nUsed_in_event(\"hammer\", \"crucifixion\").\nUsed_in_event(\"nails\", \"crucifixion\").\n.decl Answer()\nAnswer() :- Used_in_event(tool, \"Martin Luther's Reformation opening salvo\"), Used_in_event(tool, \"crucifixion\").\n.output Answer"]}
{"id": 1326, "answer": true, "completion": ".decl Bottles_own_milk(Person:symbol)\nBottles_own_milk(\"you\").\n.decl Has_cream_on_top(Object:symbol)\nHas_cream_on_top(\"bottled milk\").\n.decl Answer()\nAnswer() :- Bottles_own_milk(\"you\"), Has_cream_on_top(\"bottled milk\").\n.output Answer", "completions": [".decl Bottles_own_milk(Person:symbol)\nBottles_own_milk(\"you\").\n.decl Has_cream_on_top(Object:symbol)\nHas_cream_on_top(\"bottled milk\").\n.decl Answer()\nAnswer() :- Bottles_own_milk(\"you\"), Has_cream_on_top(\"bottled milk\").\n.output Answer"]}
{"id": 1327, "answer": false, "completion": ".decl Has_chemical(Compound:symbol, Chemical:symbol)\nHas_chemical(\"Ammonia\", \"NH3\").\nHas_chemical(\"Clorox\", \"NaClO\").\n.decl Reacts(Chemical_A:symbol, Chemical_B:symbol)\nReacts(\"NH3\", \"NaClO\").\n.decl Answer()\nAnswer() :- !Reacts(chemical1, chemical2), Has_chemical(\"Ammonia\", chemical1), Has_chemical(\"Clorox\", chemical2).\n.output Answer", "completions": [".decl Has_chemical(Compound:symbol, Chemical:symbol)\nHas_chemical(\"Ammonia\", \"NH3\").\nHas_chemical(\"Clorox\", \"NaClO\").\n.decl Reacts(Chemical_A:symbol, Chemical_B:symbol)\nReacts(\"NH3\", \"NaClO\").\n.decl Answer()\nAnswer() :- !Reacts(chemical1, chemical2), Has_chemical(\"Ammonia\", chemical1), Has_chemical(\"Clorox\", chemical2).\n.output Answer"]}
{"id": 1328, "answer": true, "completion": ".decl Is_fan(Person:symbol, Podcast:symbol)\nIs_fan(\"Deacon\", \"religious podcasts\").\n.decl Podcast_type(Podcast:symbol, Type:symbol)\nPodcast_type(\"God Awful Movies\", \"atheist\").\n.decl Answer()\nAnswer() :- Is_fan(\"Deacon\", podcast), Podcast_type(podcast, \"religious\"), Podcast_type(\"God Awful Movies\", \"atheist\"), podcast != \"God Awful Movies\".\nAnswer() :- !Is_fan(\"Deacon\", \"God Awful Movies\").\n.output Answer", "completions": [".decl Is_fan(Person:symbol, Podcast:symbol)\nIs_fan(\"Deacon\", \"religious podcasts\").\n.decl Podcast_type(Podcast:symbol, Type:symbol)\nPodcast_type(\"God Awful Movies\", \"atheist\").\n.decl Answer()\nAnswer() :- Is_fan(\"Deacon\", podcast), Podcast_type(podcast, \"religious\"), Podcast_type(\"God Awful Movies\", \"atheist\"), podcast != \"God Awful Movies\".\nAnswer() :- !Is_fan(\"Deacon\", \"God Awful Movies\").\n.output Answer"]}
{"id": 1329, "answer": true, "completion": ".decl Worships_in_place(Deity:symbol, Place:symbol)\nWorships_in_place(\"Ahura Mazda\", \"Zoroastrian temple\").\nWorships_in_place(\"Allah\", \"mosque\").\n.decl Answer()\nAnswer() :- Worships_in_place(\"Ahura Mazda\", \"mosque\").\n.output Answer", "completions": [".decl Worships_in_place(Deity:symbol, Place:symbol)\nWorships_in_place(\"Ahura Mazda\", \"Zoroastrian temple\").\nWorships_in_place(\"Allah\", \"mosque\").\n.decl Answer()\nAnswer() :- Worships_in_place(\"Ahura Mazda\", \"mosque\").\n.output Answer"]}
{"id": 1330, "answer": false, "completion": ".decl Associated_with(Person:symbol, Entity:symbol)\nAssociated_with(\"Trent Reznor\", \"Nine Inch Nails\").\nAssociated_with(\"Trent Reznor\", \"David Lynch\").\n.decl Answer()\nAnswer() :- Associated_with(\"Trent Reznor\", \"Nine Inch Nails\"), Associated_with(\"Trent Reznor\", \"David Lynch\").\n.output Answer", "completions": [".decl Associated_with(Person:symbol, Entity:symbol)\nAssociated_with(\"Trent Reznor\", \"Nine Inch Nails\").\nAssociated_with(\"Trent Reznor\", \"David Lynch\").\n.decl Answer()\nAnswer() :- Associated_with(\"Trent Reznor\", \"Nine Inch Nails\"), Associated_with(\"Trent Reznor\", \"David Lynch\").\n.output Answer"]}
{"id": 1331, "answer": true, "completion": ".decl Supports(Country_A:symbol, Country_B:symbol, War:symbol)\nSupports(\"Switzerland\", \"United States\", \"Spanish-American War\").\n.decl Neutral(Country:symbol, War:symbol)\nNeutral(\"Switzerland\", \"Spanish-American War\").\n.decl Answer()\nAnswer() :- Supports(\"Switzerland\", \"United States\", \"Spanish-American War\").\nAnswer() :- !Neutral(\"Switzerland\", \"Spanish-American War\").\n.output Answer", "completions": [".decl Supports(Country_A:symbol, Country_B:symbol, War:symbol)\nSupports(\"Switzerland\", \"United States\", \"Spanish-American War\").\n.decl Neutral(Country:symbol, War:symbol)\nNeutral(\"Switzerland\", \"Spanish-American War\").\n.decl Answer()\nAnswer() :- Supports(\"Switzerland\", \"United States\", \"Spanish-American War\").\nAnswer() :- !Neutral(\"Switzerland\", \"Spanish-American War\").\n.output Answer"]}
{"id": 1332, "answer": true, "completion": ".decl Is_deciduous(Tree:symbol)\nIs_deciduous(\"Christmas tree\").\n.decl Is_typical(Tree:symbol, Type:symbol)\nIs_typical(\"Christmas tree\", \"evergreen\").\n.decl Answer()\nAnswer() :- Is_deciduous(\"Christmas tree\"), !Is_typical(\"Christmas tree\", \"evergreen\").\n.output Answer", "completions": [".decl Is_deciduous(Tree:symbol)\nIs_deciduous(\"Christmas tree\").\n.decl Is_typical(Tree:symbol, Type:symbol)\nIs_typical(\"Christmas tree\", \"evergreen\").\n.decl Answer()\nAnswer() :- Is_deciduous(\"Christmas tree\"), !Is_typical(\"Christmas tree\", \"evergreen\").\n.output Answer"]}
{"id": 1333, "answer": true, "completion": ".decl Character(Name:symbol, Status:symbol)\nCharacter(\"Robert Downey Jr\", \"Iron Man\").\n.decl Survives_Infinity_War(Character:symbol)\nSurvives_Infinity_War(\"Iron Man\").\n.decl Answer()\nAnswer() :- Character(\"Robert Downey Jr\", character), Survives_Infinity_War(character).\n.output Answer", "completions": [".decl Character(Name:symbol, Status:symbol)\nCharacter(\"Robert Downey Jr\", \"Iron Man\").\n.decl Survives_Infinity_War(Character:symbol)\nSurvives_Infinity_War(\"Iron Man\").\n.decl Answer()\nAnswer() :- Character(\"Robert Downey Jr\", character), Survives_Infinity_War(character).\n.output Answer"]}
{"id": 1334, "answer": true, "completion": ".decl Lives_in(Person:symbol, Location:symbol)\nLives_in(\"Christmas elf\", \"North Pole\").\n.decl Has_magnetic_field(Location:symbol, Strength:float)\nHas_magnetic_field(\"North Pole\", 0).\n.decl Uses_magnetic_field(Object:symbol)\nUses_magnetic_field(\"compass\").\n.decl Bad_gift(Person:symbol, Object:symbol)\nBad_gift(person, object) :- Lives_in(person, location), Has_magnetic_field(location, strength), Uses_magnetic_field(object), strength = 0.\n.decl Answer()\nAnswer() :- Bad_gift(\"Christmas elf\", \"compass\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Location:symbol)\nLives_in(\"Christmas elf\", \"North Pole\").\n.decl Has_magnetic_field(Location:symbol, Strength:float)\nHas_magnetic_field(\"North Pole\", 0).\n.decl Uses_magnetic_field(Object:symbol)\nUses_magnetic_field(\"compass\").\n.decl Bad_gift(Person:symbol, Object:symbol)\nBad_gift(person, object) :- Lives_in(person, location), Has_magnetic_field(location, strength), Uses_magnetic_field(object), strength = 0.\n.decl Answer()\nAnswer() :- Bad_gift(\"Christmas elf\", \"compass\").\n.output Answer"]}
{"id": 1335, "answer": true, "completion": ".decl Lasts_n_hours(Product:symbol, N_hours:float)\nLasts_n_hours(\"tampon\", 8).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"tampon\", n_hours), n_hours >= 24.\n.output Answer", "completions": [".decl Lasts_n_hours(Product:symbol, N_hours:float)\nLasts_n_hours(\"tampon\", 8).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"tampon\", n_hours), n_hours >= 24.\n.output Answer"]}
{"id": 1336, "answer": true, "completion": ".decl Character(Character:symbol, Type:symbol)\nCharacter(\"Robin Hood\", \"fictional\").\nCharacter(\"Little John\", \"fictional\").\nCharacter(\"Maid Marian\", \"fictional\").\nCharacter(\"Sheriff of Nottingham\", \"fictional\").\nCharacter(\"Friar Tuck\", \"fictional\").\nCharacter(\"Will Scarlet\", \"fictional\").\nCharacter(\"Alan-a-Dale\", \"fictional\").\nCharacter(\"King Richard\", \"historical\").\n\n.decl Answer()\nAnswer() :- Character(character, \"fictional\"), !Character(character, \"historical\").\n.output Answer", "completions": [".decl Character(Character:symbol, Type:symbol)\nCharacter(\"Robin Hood\", \"fictional\").\nCharacter(\"Little John\", \"fictional\").\nCharacter(\"Maid Marian\", \"fictional\").\nCharacter(\"Sheriff of Nottingham\", \"fictional\").\nCharacter(\"Friar Tuck\", \"fictional\").\nCharacter(\"Will Scarlet\", \"fictional\").\nCharacter(\"Alan-a-Dale\", \"fictional\").\nCharacter(\"King Richard\", \"historical\").\n\n.decl Answer()\nAnswer() :- Character(character, \"fictional\"), !Character(character, \"historical\").\n.output Answer"]}
{"id": 1337, "answer": false, "completion": ".decl Weapon_of_choice(Game:symbol, Weapon:symbol, Hands_required:float)\nWeapon_of_choice(\"Gladiator\", \"sword\", 1).\nWeapon_of_choice(\"Soul Calibur\", \"Faust\", 2).\n.decl Answer()\nAnswer() :- Weapon_of_choice(\"Gladiator\", weapon1, hands1), Weapon_of_choice(\"Soul Calibur\", \"Faust\", hands2), hands1 < hands2.\n.output Answer", "completions": [".decl Weapon_of_choice(Game:symbol, Weapon:symbol, Hands_required:float)\nWeapon_of_choice(\"Gladiator\", \"sword\", 1).\nWeapon_of_choice(\"Soul Calibur\", \"Faust\", 2).\n.decl Answer()\nAnswer() :- Weapon_of_choice(\"Gladiator\", weapon1, hands1), Weapon_of_choice(\"Soul Calibur\", \"Faust\", hands2), hands1 < hands2.\n.output Answer"]}
{"id": 1338, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Mozart\", 1756).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Mozart\", 1791).\n.decl Founded_in_year(Company:symbol, Year:float)\nFounded_in_year(\"Dolce & Gabbana\", 1985).\n.decl Answer()\nAnswer() :- Born_in_year(\"Mozart\", birth_year), Died_in_year(\"Mozart\", death_year), Founded_in_year(\"Dolce & Gabbana\", founded_year), birth_year <= founded_year, death_year >= founded_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Mozart\", 1756).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Mozart\", 1791).\n.decl Founded_in_year(Company:symbol, Year:float)\nFounded_in_year(\"Dolce & Gabbana\", 1985).\n.decl Answer()\nAnswer() :- Born_in_year(\"Mozart\", birth_year), Died_in_year(\"Mozart\", death_year), Founded_in_year(\"Dolce & Gabbana\", founded_year), birth_year <= founded_year, death_year >= founded_year.\n.output Answer"]}
{"id": 1339, "answer": true, "completion": ".decl Inspired(Artist_A:symbol, Artist_B:symbol)\nInspired(\"Nine Inch Nails\", \"Marilyn Manson\").\nInspired(\"Sam Cooke\", \"Aretha Franklin\").\n.decl Answer()\nAnswer() :- Inspired(\"Nine Inch Nails\", \"Aretha Franklin\").\n.output Answer", "completions": [".decl Inspired(Artist_A:symbol, Artist_B:symbol)\nInspired(\"Nine Inch Nails\", \"Marilyn Manson\").\nInspired(\"Sam Cooke\", \"Aretha Franklin\").\n.decl Answer()\nAnswer() :- Inspired(\"Nine Inch Nails\", \"Aretha Franklin\").\n.output Answer"]}
{"id": 1340, "answer": false, "completion": ".decl Contains_lactose(Food:symbol)\nContains_lactose(\"cream\").\n.decl Lactose_intolerant(Person:symbol)\nLactose_intolerant(\"someone\").\n.decl Avoids(Person:symbol, Food:symbol)\nAvoids(person, food) :- Lactose_intolerant(person), Contains_lactose(food).\n.decl Answer()\nAnswer() :- Avoids(\"someone\", \"cream\").\n.output Answer", "completions": [".decl Contains_lactose(Food:symbol)\nContains_lactose(\"cream\").\n.decl Lactose_intolerant(Person:symbol)\nLactose_intolerant(\"someone\").\n.decl Avoids(Person:symbol, Food:symbol)\nAvoids(person, food) :- Lactose_intolerant(person), Contains_lactose(food).\n.decl Answer()\nAnswer() :- Avoids(\"someone\", \"cream\").\n.output Answer"]}
{"id": 1341, "answer": true, "completion": ".decl Works_in_season(Person:symbol, Season:symbol)\nWorks_in_season(\"Santa Claus\", \"winter\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"June\", \"summer\").\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\n.decl Answer()\nAnswer() :- Works_in_season(\"Santa Claus\", \"summer\").\nAnswer() :- Works_in_season(\"Santa Claus\", season), In_season(month, \"summer\"), In_season(month, season).\n.output Answer", "completions": [".decl Works_in_season(Person:symbol, Season:symbol)\nWorks_in_season(\"Santa Claus\", \"winter\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"June\", \"summer\").\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\n.decl Answer()\nAnswer() :- Works_in_season(\"Santa Claus\", \"summer\").\nAnswer() :- Works_in_season(\"Santa Claus\", season), In_season(month, \"summer\"), In_season(month, season).\n.output Answer"]}
{"id": 1342, "answer": true, "completion": ".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"bachelor's degree\", 4).\n.decl Is_leap_year(Year:float)\nIs_leap_year(year) :- year % 4 = 0, (year % 100 != 0; year % 400 = 0).\n.decl Answer()\nAnswer() :- Has_duration(\"bachelor's degree\", duration), Is_leap_year(year), year + duration > year, year + duration <= year + 4.\n.output Answer", "completions": [".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"bachelor's degree\", 4).\n.decl Is_leap_year(Year:float)\nIs_leap_year(year) :- year % 4 = 0, (year % 100 != 0; year % 400 = 0).\n.decl Answer()\nAnswer() :- Has_duration(\"bachelor's degree\", duration), Is_leap_year(year), year + duration > year, year + duration <= year + 4.\n.output Answer"]}
{"id": 1343, "answer": false, "completion": ".decl Published_in_year(Book:symbol, Year:float)\nPublished_in_year(\"Harry Potter and the Philosopher's Stone\", 1997).\n.decl Lasted_from_to(Event:symbol, Start_year:float, End_year:float)\nLasted_from_to(\"Albanian Civil War\", 1997, 1998).\n.decl Answer()\nAnswer() :- Published_in_year(\"Harry Potter and the Philosopher's Stone\", year1), Lasted_from_to(\"Albanian Civil War\", start_year, end_year), year1 >= start_year, year1 <= end_year.\n.output Answer", "completions": [".decl Published_in_year(Book:symbol, Year:float)\nPublished_in_year(\"Harry Potter and the Philosopher's Stone\", 1997).\n.decl Lasted_from_to(Event:symbol, Start_year:float, End_year:float)\nLasted_from_to(\"Albanian Civil War\", 1997, 1998).\n.decl Answer()\nAnswer() :- Published_in_year(\"Harry Potter and the Philosopher's Stone\", year1), Lasted_from_to(\"Albanian Civil War\", start_year, end_year), year1 >= start_year, year1 <= end_year.\n.output Answer"]}
{"id": 1344, "answer": false, "completion": ".decl Collaborated(Artist_A:symbol, Artist_B:symbol)\nCollaborated(\"Jay-Z\", \"Kanye West\").\nCollaborated(\"Jay-Z\", \"Beyonce\").\nCollaborated(\"Jay-Z\", \"Alicia Keys\").\nCollaborated(\"Louis Armstrong\", \"Ella Fitzgerald\").\nCollaborated(\"Louis Armstrong\", \"Duke Ellington\").\n.decl Answer()\nAnswer() :- Collaborated(\"Jay-Z\", \"Louis Armstrong\").\nAnswer() :- Collaborated(\"Louis Armstrong\", \"Jay-Z\").\n.output Answer", "completions": [".decl Collaborated(Artist_A:symbol, Artist_B:symbol)\nCollaborated(\"Jay-Z\", \"Kanye West\").\nCollaborated(\"Jay-Z\", \"Beyonce\").\nCollaborated(\"Jay-Z\", \"Alicia Keys\").\nCollaborated(\"Louis Armstrong\", \"Ella Fitzgerald\").\nCollaborated(\"Louis Armstrong\", \"Duke Ellington\").\n.decl Answer()\nAnswer() :- Collaborated(\"Jay-Z\", \"Louis Armstrong\").\nAnswer() :- Collaborated(\"Louis Armstrong\", \"Jay-Z\").\n.output Answer"]}
{"id": 1345, "answer": true, "completion": ".decl Is_allowed(Object:symbol, Location:symbol)\nIs_allowed(\"robusto\", \"Central Park Zoo\").\n.decl Is_wise(Object:symbol, Location:symbol)\nIs_wise(\"robusto\", \"Central Park Zoo\").\n.decl Answer()\nAnswer() :- Is_allowed(\"robusto\", \"Central Park Zoo\"), Is_wise(\"robusto\", \"Central Park Zoo\").\n.output Answer", "completions": [".decl Is_allowed(Object:symbol, Location:symbol)\nIs_allowed(\"robusto\", \"Central Park Zoo\").\n.decl Is_wise(Object:symbol, Location:symbol)\nIs_wise(\"robusto\", \"Central Park Zoo\").\n.decl Answer()\nAnswer() :- Is_allowed(\"robusto\", \"Central Park Zoo\"), Is_wise(\"robusto\", \"Central Park Zoo\").\n.output Answer"]}
{"id": 1346, "answer": false, "completion": ".decl Helps_detect(Object:symbol, Disease:symbol)\nHelps_detect(\"Mercury\", \"coronavirus\").\n.decl Answer()\nAnswer() :- Helps_detect(\"Mercury\", \"coronavirus\").\n.output Answer", "completions": [".decl Helps_detect(Object:symbol, Disease:symbol)\nHelps_detect(\"Mercury\", \"coronavirus\").\n.decl Answer()\nAnswer() :- Helps_detect(\"Mercury\", \"coronavirus\").\n.output Answer"]}
{"id": 1347, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Al Capone\", 1899).\n.decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"smartphone\", 2007).\n.decl Answer()\nAnswer() :- Born_in_year(\"Al Capone\", year1), Invented_in_year(\"smartphone\", year2), year1 < year2.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Al Capone\", 1899).\n.decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"smartphone\", 2007).\n.decl Answer()\nAnswer() :- Born_in_year(\"Al Capone\", year1), Invented_in_year(\"smartphone\", year2), year1 < year2.\n.output Answer"]}
{"id": 1348, "answer": true, "completion": ".decl Was_slave_owner(Person:symbol, Status:bool)\nWas_slave_owner(\"Benjamin Franklin\", true).\n.decl Supported_abolition(Person:symbol, Status:bool)\nSupported_abolition(\"Benjamin Franklin\", true).\n.decl Prime_candidate(Person:symbol)\nPrime_candidate(person) :- Was_slave_owner(person, true), !Supported_abolition(person, true).\n.decl Answer()\nAnswer() :- Prime_candidate(\"Benjamin Franklin\").\n.output Answer", "completions": [".decl Was_slave_owner(Person:symbol, Status:bool)\nWas_slave_owner(\"Benjamin Franklin\", true).\n.decl Supported_abolition(Person:symbol, Status:bool)\nSupported_abolition(\"Benjamin Franklin\", true).\n.decl Prime_candidate(Person:symbol)\nPrime_candidate(person) :- Was_slave_owner(person, true), !Supported_abolition(person, true).\n.decl Answer()\nAnswer() :- Prime_candidate(\"Benjamin Franklin\").\n.output Answer"]}
{"id": 1349, "answer": true, "completion": ".decl Is_martyr(Person:symbol)\nIs_martyr(\"Jason Voorhees\").\n.decl Is_immortal(Person:symbol)\nIs_immortal(\"Jason Voorhees\").\n.decl Answer()\nAnswer() :- Is_martyr(\"Jason Voorhees\"), !Is_immortal(\"Jason Voorhees\").\n.output Answer", "completions": [".decl Is_martyr(Person:symbol)\nIs_martyr(\"Jason Voorhees\").\n.decl Is_immortal(Person:symbol)\nIs_immortal(\"Jason Voorhees\").\n.decl Answer()\nAnswer() :- Is_martyr(\"Jason Voorhees\"), !Is_immortal(\"Jason Voorhees\").\n.output Answer"]}
{"id": 1350, "answer": false, "completion": ".decl Calls_ape(Teacher:symbol, Student:symbol, Race:symbol)\nCalls_ape(\"teacher\", \"black_student\", \"black\").\n\n.decl Loses_job(Person:symbol, Reason:symbol)\nLoses_job(\"teacher\", \"racial_insult\").\n\n.decl Racial_insult(Insulter:symbol, Insulted:symbol, Race:symbol)\nRacial_insult(\"teacher\", \"black_student\", \"black\") :- Calls_ape(\"teacher\", \"black_student\", \"black\").\n\n.decl Answer()\nAnswer() :- !Loses_job(\"teacher\", \"racial_insult\"), Racial_insult(\"teacher\", \"black_student\", \"black\").\n.output Answer", "completions": [".decl Calls_ape(Teacher:symbol, Student:symbol, Race:symbol)\nCalls_ape(\"teacher\", \"black_student\", \"black\").\n\n.decl Loses_job(Person:symbol, Reason:symbol)\nLoses_job(\"teacher\", \"racial_insult\").\n\n.decl Racial_insult(Insulter:symbol, Insulted:symbol, Race:symbol)\nRacial_insult(\"teacher\", \"black_student\", \"black\") :- Calls_ape(\"teacher\", \"black_student\", \"black\").\n\n.decl Answer()\nAnswer() :- !Loses_job(\"teacher\", \"racial_insult\"), Racial_insult(\"teacher\", \"black_student\", \"black\").\n.output Answer"]}
{"id": 1351, "answer": true, "completion": ".decl Has_complex_eye(Animal:symbol)\nHas_complex_eye(\"fly\").\n.decl Eye_surgery_effective(Animal:symbol)\nEye_surgery_effective(\"human\").\n.decl Answer()\nAnswer() :- Has_complex_eye(\"fly\"), !Eye_surgery_effective(\"fly\").\n.output Answer", "completions": [".decl Has_complex_eye(Animal:symbol)\nHas_complex_eye(\"fly\").\n.decl Eye_surgery_effective(Animal:symbol)\nEye_surgery_effective(\"human\").\n.decl Answer()\nAnswer() :- Has_complex_eye(\"fly\"), !Eye_surgery_effective(\"fly\").\n.output Answer"]}
{"id": 1352, "answer": true, "completion": ".decl Has_color(Thing:symbol, Color:symbol)\nHas_color(\"rainbow\", \"red\").\nHas_color(\"rainbow\", \"orange\").\nHas_color(\"rainbow\", \"yellow\").\nHas_color(\"rainbow\", \"green\").\nHas_color(\"rainbow\", \"blue\").\nHas_color(\"rainbow\", \"indigo\").\nHas_color(\"rainbow\", \"violet\").\nHas_color(\"yin\", \"black\").\nHas_color(\"yang\", \"white\").\n.decl Mix_colors(Color1:symbol, Color2:symbol, Result_color:symbol)\nMix_colors(\"black\", \"white\", \"gray\").\n.decl Devoid_of_color(Thing:symbol)\nDevoid_of_color(\"rainbow\") :- !Has_color(\"rainbow\", \"gray\").\n.decl Answer()\nAnswer() :- Devoid_of_color(\"rainbow\"), Mix_colors(\"black\", \"white\", \"gray\").\n.output Answer", "completions": [".decl Has_color(Thing:symbol, Color:symbol)\nHas_color(\"rainbow\", \"red\").\nHas_color(\"rainbow\", \"orange\").\nHas_color(\"rainbow\", \"yellow\").\nHas_color(\"rainbow\", \"green\").\nHas_color(\"rainbow\", \"blue\").\nHas_color(\"rainbow\", \"indigo\").\nHas_color(\"rainbow\", \"violet\").\nHas_color(\"yin\", \"black\").\nHas_color(\"yang\", \"white\").\n.decl Mix_colors(Color1:symbol, Color2:symbol, Result_color:symbol)\nMix_colors(\"black\", \"white\", \"gray\").\n.decl Devoid_of_color(Thing:symbol)\nDevoid_of_color(\"rainbow\") :- !Has_color(\"rainbow\", \"gray\").\n.decl Answer()\nAnswer() :- Devoid_of_color(\"rainbow\"), Mix_colors(\"black\", \"white\", \"gray\").\n.output Answer"]}
{"id": 1353, "answer": true, "completion": ".decl From_period(Animal:symbol, Period:symbol)\nFrom_period(\"mongoose\", \"Miocene\").\nFrom_period(\"rhino\", \"Eocene\").\n.decl Period_order(Period1:symbol, Period2:symbol)\nPeriod_order(\"Eocene\", \"Miocene\").\n.decl Answer()\nAnswer() :- From_period(\"mongoose\", period1), From_period(\"rhino\", period2), Period_order(period2, period1).\n.output Answer", "completions": [".decl From_period(Animal:symbol, Period:symbol)\nFrom_period(\"mongoose\", \"Miocene\").\nFrom_period(\"rhino\", \"Eocene\").\n.decl Period_order(Period1:symbol, Period2:symbol)\nPeriod_order(\"Eocene\", \"Miocene\").\n.decl Answer()\nAnswer() :- From_period(\"mongoose\", period1), From_period(\"rhino\", period2), Period_order(period2, period1).\n.output Answer"]}
{"id": 1354, "answer": false, "completion": ".decl Participated_in_war(Person:symbol, War:symbol)\nParticipated_in_war(\"Archduke Franz Ferdinand of Austria\", \"World War I\").\n.decl War(War:symbol, Region:symbol)\nWar(\"Pacific War\", \"Pacific\").\nWar(\"World War I\", \"Global\").\n.decl Answer()\nAnswer() :- Participated_in_war(\"Archduke Franz Ferdinand of Austria\", war), War(war, \"Pacific\").\n.output Answer", "completions": [".decl Participated_in_war(Person:symbol, War:symbol)\nParticipated_in_war(\"Archduke Franz Ferdinand of Austria\", \"World War I\").\n.decl War(War:symbol, Region:symbol)\nWar(\"Pacific War\", \"Pacific\").\nWar(\"World War I\", \"Global\").\n.decl Answer()\nAnswer() :- Participated_in_war(\"Archduke Franz Ferdinand of Austria\", war), War(war, \"Pacific\").\n.output Answer"]}
{"id": 1355, "answer": true, "completion": ".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"Paulo Coelho's wife\", \"artist\").\n.decl Job_type(Job:symbol, Type:symbol)\nJob_type(\"artist\", \"non-speech\").\nJob_type(\"speech therapist\", \"speech\").\nJob_type(\"motivational speaker\", \"speech\").\nJob_type(\"politician\", \"speech\").\n.decl Answer()\nAnswer() :- Occupation(\"Paulo Coelho's wife\", job), Job_type(job, \"speech\").\n.output Answer", "completions": [".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"Paulo Coelho's wife\", \"artist\").\n.decl Job_type(Job:symbol, Type:symbol)\nJob_type(\"artist\", \"non-speech\").\nJob_type(\"speech therapist\", \"speech\").\nJob_type(\"motivational speaker\", \"speech\").\nJob_type(\"politician\", \"speech\").\n.decl Answer()\nAnswer() :- Occupation(\"Paulo Coelho's wife\", job), Job_type(job, \"speech\").\n.output Answer"]}
{"id": 1356, "answer": false, "completion": ".decl Is_wealthiest(Person:symbol, Generation:symbol)\nIs_wealthiest(\"Bill Gates\", \"Baby Boomers\").\n.decl Answer()\nAnswer() :- Is_wealthiest(\"Bill Gates\", \"Baby Boomers\").\n.output Answer", "completions": [".decl Is_wealthiest(Person:symbol, Generation:symbol)\nIs_wealthiest(\"Bill Gates\", \"Baby Boomers\").\n.decl Answer()\nAnswer() :- Is_wealthiest(\"Bill Gates\", \"Baby Boomers\").\n.output Answer"]}
{"id": 1357, "answer": true, "completion": ".decl Runs_on(Object:symbol, OS:symbol)\nRuns_on(\"Windows smartphones\", \"Windows\").\nRuns_on(\"Android smartphones\", \"Linux\").\n.decl Has_version(OS:symbol, Version:float)\nHas_version(\"Windows\", 10).\nHas_version(\"Linux\", 5.10).\n.decl Answer()\nAnswer() :- Runs_on(\"Windows smartphones\", os1), Runs_on(\"Android smartphones\", os2), Has_version(os1, version1), Has_version(os2, version2), version2 > version1.\n.output Answer", "completions": [".decl Runs_on(Object:symbol, OS:symbol)\nRuns_on(\"Windows smartphones\", \"Windows\").\nRuns_on(\"Android smartphones\", \"Linux\").\n.decl Has_version(OS:symbol, Version:float)\nHas_version(\"Windows\", 10).\nHas_version(\"Linux\", 5.10).\n.decl Answer()\nAnswer() :- Runs_on(\"Windows smartphones\", os1), Runs_on(\"Android smartphones\", os2), Has_version(os1, version1), Has_version(os2, version2), version2 > version1.\n.output Answer"]}
{"id": 1358, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Bill Nye\", 1955).\nBorn_in_year(\"Franklin Delano Roosevelt\", 1882).\n.decl Served_as_President(Person:symbol, Start_year:float, End_year:float)\nServed_as_President(\"Franklin Delano Roosevelt\", 1933, 1945).\n.decl Eligible_to_vote(Person:symbol, Year:float)\nEligible_to_vote(person, year) :- Born_in_year(person, birth_year), year >= birth_year + 18.\n.decl Voted_for(Person_A:symbol, Person_B:symbol, Year:float)\nVoted_for(person_A, person_B, year) :- Eligible_to_vote(person_A, year), Served_as_President(person_B, start_year, end_year), year >= start_year, year <= end_year.\n.decl Answer()\nAnswer() :- Voted_for(\"Bill Nye\", \"Franklin Delano Roosevelt\", year).\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Bill Nye\", 1955).\nBorn_in_year(\"Franklin Delano Roosevelt\", 1882).\n.decl Served_as_President(Person:symbol, Start_year:float, End_year:float)\nServed_as_President(\"Franklin Delano Roosevelt\", 1933, 1945).\n.decl Eligible_to_vote(Person:symbol, Year:float)\nEligible_to_vote(person, year) :- Born_in_year(person, birth_year), year >= birth_year + 18.\n.decl Voted_for(Person_A:symbol, Person_B:symbol, Year:float)\nVoted_for(person_A, person_B, year) :- Eligible_to_vote(person_A, year), Served_as_President(person_B, start_year, end_year), year >= start_year, year <= end_year.\n.decl Answer()\nAnswer() :- Voted_for(\"Bill Nye\", \"Franklin Delano Roosevelt\", year).\n.output Answer"]}
{"id": 1359, "answer": true, "completion": ".decl Has_descendants(Person:symbol, N_descendants:float)\nHas_descendants(\"Genghis Khan\", 16000000).\nHas_descendants(\"Julius Caesar\", 1000000).\n.decl Answer()\nAnswer() :- Has_descendants(\"Genghis Khan\", n_descendants1), Has_descendants(\"Julius Caesar\", n_descendants2), n_descendants1 > n_descendants2.\n.output Answer", "completions": [".decl Has_descendants(Person:symbol, N_descendants:float)\nHas_descendants(\"Genghis Khan\", 16000000).\nHas_descendants(\"Julius Caesar\", 1000000).\n.decl Answer()\nAnswer() :- Has_descendants(\"Genghis Khan\", n_descendants1), Has_descendants(\"Julius Caesar\", n_descendants2), n_descendants1 > n_descendants2.\n.output Answer"]}
{"id": 1360, "answer": true, "completion": ".decl Is_invention(Inventor:symbol, Invention:symbol)\nIs_invention(\"Casio\", \"electronic calculator\").\n.decl Can_be_worn_around(Invention:symbol, Body_part:symbol)\nCan_be_worn_around(\"watch\", \"ankle\").\n.decl Is_type_of(Object1:symbol, Object2:symbol)\nIs_type_of(\"electronic calculator\", \"watch\").\n.decl Answer()\nAnswer() :- Is_invention(\"Casio\", invention), Is_type_of(invention, type), Can_be_worn_around(type, \"ankle\").\n.output Answer", "completions": [".decl Is_invention(Inventor:symbol, Invention:symbol)\nIs_invention(\"Casio\", \"electronic calculator\").\n.decl Can_be_worn_around(Invention:symbol, Body_part:symbol)\nCan_be_worn_around(\"watch\", \"ankle\").\n.decl Is_type_of(Object1:symbol, Object2:symbol)\nIs_type_of(\"electronic calculator\", \"watch\").\n.decl Answer()\nAnswer() :- Is_invention(\"Casio\", invention), Is_type_of(invention, type), Can_be_worn_around(type, \"ankle\").\n.output Answer"]}
{"id": 1361, "answer": true, "completion": ".decl Has_mental_illness(Patient:symbol, Illness:symbol)\nHas_mental_illness(\"patient1\", \"depression\").\nHas_mental_illness(\"patient2\", \"anxiety\").\n.decl Undergoes_psychotherapy(Patient:symbol)\nUndergoes_psychotherapy(\"patient1\").\nUndergoes_psychotherapy(\"patient2\").\nUndergoes_psychotherapy(\"patient3\").\n.decl Answer()\nAnswer() :- Undergoes_psychotherapy(patient), !Has_mental_illness(patient, _).\n.output Answer", "completions": [".decl Has_mental_illness(Patient:symbol, Illness:symbol)\nHas_mental_illness(\"patient1\", \"depression\").\nHas_mental_illness(\"patient2\", \"anxiety\").\n.decl Undergoes_psychotherapy(Patient:symbol)\nUndergoes_psychotherapy(\"patient1\").\nUndergoes_psychotherapy(\"patient2\").\nUndergoes_psychotherapy(\"patient3\").\n.decl Answer()\nAnswer() :- Undergoes_psychotherapy(patient), !Has_mental_illness(patient, _).\n.output Answer"]}
{"id": 1362, "answer": true, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Boeing 737-800\", 80000000).\nHas_value(\"Da Vinci painting\", 450000000).\n.decl Can_buy(Object_A:symbol, Object_B:symbol)\nCan_buy(Object_A, Object_B) :- Has_value(Object_A, value1), Has_value(Object_B, value2), value1 >= value2.\n.decl Answer()\nAnswer() :- Can_buy(\"Da Vinci painting\", \"Boeing 737-800\").\n.output Answer", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Boeing 737-800\", 80000000).\nHas_value(\"Da Vinci painting\", 450000000).\n.decl Can_buy(Object_A:symbol, Object_B:symbol)\nCan_buy(Object_A, Object_B) :- Has_value(Object_A, value1), Has_value(Object_B, value2), value1 >= value2.\n.decl Answer()\nAnswer() :- Can_buy(\"Da Vinci painting\", \"Boeing 737-800\").\n.output Answer"]}
{"id": 1363, "answer": true, "completion": ".decl Car(Manufacturer:symbol, Model:symbol, Year:float)\nCar(\"British\", \"Mini\", 1959).\nCar(\"Ford\", \"Model T\", 1908).\n.decl Answer()\nAnswer() :- Car(\"British\", \"Mini\", year1), !Car(_, _, year2), year2 < year1.\n.output Answer", "completions": [".decl Car(Manufacturer:symbol, Model:symbol, Year:float)\nCar(\"British\", \"Mini\", 1959).\nCar(\"Ford\", \"Model T\", 1908).\n.decl Answer()\nAnswer() :- Car(\"British\", \"Mini\", year1), !Car(_, _, year2), year2 < year1.\n.output Answer"]}
{"id": 1364, "answer": true, "completion": ".decl Has_letter(Language:symbol, Letter:symbol)\nHas_letter(\"English\", \"B\").\nHas_letter(\"French\", \"B\").\n.decl Early_Eastern_Canadian_Natives_Language(Language:symbol)\nEarly_Eastern_Canadian_Natives_Language(\"Mi'kmaq\").\nEarly_Eastern_Canadian_Natives_Language(\"Maliseet\").\nEarly_Eastern_Canadian_Natives_Language(\"Abenaki\").\n.decl Influenced_by(Language1:symbol, Language2:symbol)\nInfluenced_by(\"Mi'kmaq\", \"English\").\nInfluenced_by(\"Mi'kmaq\", \"French\").\nInfluenced_by(\"Maliseet\", \"English\").\nInfluenced_by(\"Maliseet\", \"French\").\nInfluenced_by(\"Abenaki\", \"English\").\nInfluenced_by(\"Abenaki\", \"French\").\n.decl Answer()\nAnswer() :- Early_Eastern_Canadian_Natives_Language(language), Influenced_by(language, influencing_language), Has_letter(influencing_language, \"B\").\n.output Answer", "completions": [".decl Has_letter(Language:symbol, Letter:symbol)\nHas_letter(\"English\", \"B\").\nHas_letter(\"French\", \"B\").\n.decl Early_Eastern_Canadian_Natives_Language(Language:symbol)\nEarly_Eastern_Canadian_Natives_Language(\"Mi'kmaq\").\nEarly_Eastern_Canadian_Natives_Language(\"Maliseet\").\nEarly_Eastern_Canadian_Natives_Language(\"Abenaki\").\n.decl Influenced_by(Language1:symbol, Language2:symbol)\nInfluenced_by(\"Mi'kmaq\", \"English\").\nInfluenced_by(\"Mi'kmaq\", \"French\").\nInfluenced_by(\"Maliseet\", \"English\").\nInfluenced_by(\"Maliseet\", \"French\").\nInfluenced_by(\"Abenaki\", \"English\").\nInfluenced_by(\"Abenaki\", \"French\").\n.decl Answer()\nAnswer() :- Early_Eastern_Canadian_Natives_Language(language), Influenced_by(language, influencing_language), Has_letter(influencing_language, \"B\").\n.output Answer"]}
{"id": 1365, "answer": true, "completion": ".decl Requires_anchor(Object:symbol, Answer:symbol)\nRequires_anchor(\"Trek 9000\", \"no\").\n.decl Answer()\nAnswer() :- Requires_anchor(\"Trek 9000\", \"yes\").\n.output Answer", "completions": [".decl Requires_anchor(Object:symbol, Answer:symbol)\nRequires_anchor(\"Trek 9000\", \"no\").\n.decl Answer()\nAnswer() :- Requires_anchor(\"Trek 9000\", \"yes\").\n.output Answer"]}
{"id": 1366, "answer": true, "completion": ".decl Has_Zika_Virus(Location:symbol)\nHas_Zika_Virus(\"South America\").\nHas_Zika_Virus(\"Central America\").\nHas_Zika_Virus(\"Caribbean\").\nHas_Zika_Virus(\"Africa\").\nHas_Zika_Virus(\"Asia\").\nHas_Zika_Virus(\"Oceania\").\n.decl Answer()\nAnswer() :- Has_Zika_Virus(\"Antarctica\").\n.output Answer", "completions": [".decl Has_Zika_Virus(Location:symbol)\nHas_Zika_Virus(\"South America\").\nHas_Zika_Virus(\"Central America\").\nHas_Zika_Virus(\"Caribbean\").\nHas_Zika_Virus(\"Africa\").\nHas_Zika_Virus(\"Asia\").\nHas_Zika_Virus(\"Oceania\").\n.decl Answer()\nAnswer() :- Has_Zika_Virus(\"Antarctica\").\n.output Answer"]}
{"id": 1367, "answer": true, "completion": ".decl Timezone_City(City:symbol, Timezone:symbol)\nTimezone_City(\"Basel\", \"CET\").\nTimezone_City(\"Los Angeles\", \"PST\").\n.decl Timezone_Offset(Timezone:symbol, Offset:float)\nTimezone_Offset(\"CET\", 1).\nTimezone_Offset(\"PST\", -8).\n.decl Is_Daylight(Timezone:symbol)\nIs_Daylight(\"CET\") :- Timezone_Offset(\"CET\", offset1), Timezone_Offset(\"PST\", offset2), offset1 - offset2 >= 0, offset1 - offset2 < 12.\nIs_Daylight(\"PST\") :- Timezone_Offset(\"CET\", offset1), Timezone_Offset(\"PST\", offset2), offset1 - offset2 >= -12, offset1 - offset2 < 0.\n.decl Answer()\nAnswer() :- Timezone_City(\"Basel\", timezone1), Timezone_City(\"Los Angeles\", timezone2), Is_Daylight(timezone1), !Is_Daylight(timezone2).\n.output Answer", "completions": [".decl Timezone_City(City:symbol, Timezone:symbol)\nTimezone_City(\"Basel\", \"CET\").\nTimezone_City(\"Los Angeles\", \"PST\").\n.decl Timezone_Offset(Timezone:symbol, Offset:float)\nTimezone_Offset(\"CET\", 1).\nTimezone_Offset(\"PST\", -8).\n.decl Is_Daylight(Timezone:symbol)\nIs_Daylight(\"CET\") :- Timezone_Offset(\"CET\", offset1), Timezone_Offset(\"PST\", offset2), offset1 - offset2 >= 0, offset1 - offset2 < 12.\nIs_Daylight(\"PST\") :- Timezone_Offset(\"CET\", offset1), Timezone_Offset(\"PST\", offset2), offset1 - offset2 >= -12, offset1 - offset2 < 0.\n.decl Answer()\nAnswer() :- Timezone_City(\"Basel\", timezone1), Timezone_City(\"Los Angeles\", timezone2), Is_Daylight(timezone1), !Is_Daylight(timezone2).\n.output Answer"]}
{"id": 1368, "answer": false, "completion": ".decl Activity_safe_for_condition(Activity:symbol, Condition:symbol, Safe:float)\nActivity_safe_for_condition(\"breakdancing\", \"tendonitis\", 0).\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person\", \"tendonitis\").\n.decl Answer()\nAnswer() :- Has_condition(\"person\", \"tendonitis\"), Activity_safe_for_condition(\"breakdancing\", \"tendonitis\", safe), safe = 1.\n.output Answer", "completions": [".decl Activity_safe_for_condition(Activity:symbol, Condition:symbol, Safe:float)\nActivity_safe_for_condition(\"breakdancing\", \"tendonitis\", 0).\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person\", \"tendonitis\").\n.decl Answer()\nAnswer() :- Has_condition(\"person\", \"tendonitis\"), Activity_safe_for_condition(\"breakdancing\", \"tendonitis\", safe), safe = 1.\n.output Answer"]}
{"id": 1369, "answer": false, "completion": ".decl Traveled_with(Traveler1:symbol, Traveler2:symbol)\nTraveled_with(\"Marco Polo\", \"Niccolo and Maffeo Polo\").\nTraveled_with(\"Christopher Columbus\", \"Martin Pinzon\").\nTraveled_with(\"Christopher Columbus\", \"Vicente Pinzon\").\n.decl Answer()\nAnswer() :- Traveled_with(\"Marco Polo\", \"Christopher Columbus\").\nAnswer() :- Traveled_with(\"Christopher Columbus\", \"Marco Polo\").\n.output Answer", "completions": [".decl Traveled_with(Traveler1:symbol, Traveler2:symbol)\nTraveled_with(\"Marco Polo\", \"Niccolo and Maffeo Polo\").\nTraveled_with(\"Christopher Columbus\", \"Martin Pinzon\").\nTraveled_with(\"Christopher Columbus\", \"Vicente Pinzon\").\n.decl Answer()\nAnswer() :- Traveled_with(\"Marco Polo\", \"Christopher Columbus\").\nAnswer() :- Traveled_with(\"Christopher Columbus\", \"Marco Polo\").\n.output Answer"]}
{"id": 1370, "answer": true, "completion": ".decl Language(Language:symbol, Country:symbol, Root:symbol)\nLanguage(\"English\", \"Saint Vincent and the Grenadines\", \"English\").\n.decl Answer()\nAnswer() :- Language(language, \"Saint Vincent and the Grenadines\", \"English\").\n.output Answer", "completions": [".decl Language(Language:symbol, Country:symbol, Root:symbol)\nLanguage(\"English\", \"Saint Vincent and the Grenadines\", \"English\").\n.decl Answer()\nAnswer() :- Language(language, \"Saint Vincent and the Grenadines\", \"English\").\n.output Answer"]}
{"id": 1371, "answer": true, "completion": ".decl Had_dinner_with(Person_A:symbol, Person_B:symbol)\nHad_dinner_with(\"Lionel Richie\", \"Michael Jackson\").\nHad_dinner_with(\"Abraham Lincoln\", \"Ulysses S. Grant\").\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Lionel Richie\", 1949).\nBorn_in_year(\"Abraham Lincoln\", 1809).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Abraham Lincoln\", 1865).\n.decl Answer()\nAnswer() :- Had_dinner_with(\"Lionel Richie\", \"Abraham Lincoln\").\nAnswer() :- Born_in_year(\"Lionel Richie\", birth_year1), Died_in_year(\"Abraham Lincoln\", death_year1), birth_year1 > death_year1.\n.output Answer", "completions": [".decl Had_dinner_with(Person_A:symbol, Person_B:symbol)\nHad_dinner_with(\"Lionel Richie\", \"Michael Jackson\").\nHad_dinner_with(\"Abraham Lincoln\", \"Ulysses S. Grant\").\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Lionel Richie\", 1949).\nBorn_in_year(\"Abraham Lincoln\", 1809).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Abraham Lincoln\", 1865).\n.decl Answer()\nAnswer() :- Had_dinner_with(\"Lionel Richie\", \"Abraham Lincoln\").\nAnswer() :- Born_in_year(\"Lionel Richie\", birth_year1), Died_in_year(\"Abraham Lincoln\", death_year1), birth_year1 > death_year1.\n.output Answer"]}
{"id": 1372, "answer": true, "completion": ".decl Causes(Event:symbol, Outcome:symbol)\nCauses(\"traffic collision\", \"property damage\").\nCauses(\"traffic collision\", \"injury\").\nCauses(\"traffic collision\", \"death\").\nCauses(\"traffic collision\", \"insurance claim\").\n.decl Leads_to(Event:symbol, Outcome:symbol)\nLeads_to(\"insurance claim\", \"compensation\").\nLeads_to(\"compensation\", \"financial gain\").\n.decl Has_amount(Event:symbol, Amount:float)\nHas_amount(\"millionaire\", 1000000).\n.decl Answer()\nAnswer() :- Causes(\"traffic collision\", outcome1), Leads_to(outcome1, outcome2), Leads_to(outcome2, \"financial gain\"), Has_amount(\"millionaire\", amount), amount <= 1000000.\n.output Answer", "completions": [".decl Causes(Event:symbol, Outcome:symbol)\nCauses(\"traffic collision\", \"property damage\").\nCauses(\"traffic collision\", \"injury\").\nCauses(\"traffic collision\", \"death\").\nCauses(\"traffic collision\", \"insurance claim\").\n.decl Leads_to(Event:symbol, Outcome:symbol)\nLeads_to(\"insurance claim\", \"compensation\").\nLeads_to(\"compensation\", \"financial gain\").\n.decl Has_amount(Event:symbol, Amount:float)\nHas_amount(\"millionaire\", 1000000).\n.decl Answer()\nAnswer() :- Causes(\"traffic collision\", outcome1), Leads_to(outcome1, outcome2), Leads_to(outcome2, \"financial gain\"), Has_amount(\"millionaire\", amount), amount <= 1000000.\n.output Answer"]}
{"id": 1373, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"parsley\", 0.8).\nHas_density(\"milk\", 1.03).\n.decl Answer()\nAnswer() :- Has_density(\"parsley\", density1), Has_density(\"milk\", density2), density1 > density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"parsley\", 0.8).\nHas_density(\"milk\", 1.03).\n.decl Answer()\nAnswer() :- Has_density(\"parsley\", density1), Has_density(\"milk\", density2), density1 > density2.\n.output Answer"]}
{"id": 1374, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Happy Gilmore Productions CEO\", \"Torah\").\n.decl Answer()\nAnswer() :- Owns(\"Happy Gilmore Productions CEO\", \"Torah\").\n.output Answer", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Happy Gilmore Productions CEO\", \"Torah\").\n.decl Answer()\nAnswer() :- Owns(\"Happy Gilmore Productions CEO\", \"Torah\").\n.output Answer"]}
{"id": 1375, "answer": false, "completion": ".decl Is_pacifist(Person:symbol)\nIs_pacifist(\"pacifist\").\n.decl Opposes(Person:symbol, Activity:symbol)\nOpposes(\"pacifist\", \"violence\").\n.decl Is_violent(Activity:symbol)\nIs_violent(\"hunting\").\n.decl Answer()\nAnswer() :- Is_pacifist(person), Opposes(person, activity), Is_violent(activity).\n.output Answer", "completions": [".decl Is_pacifist(Person:symbol)\nIs_pacifist(\"pacifist\").\n.decl Opposes(Person:symbol, Activity:symbol)\nOpposes(\"pacifist\", \"violence\").\n.decl Is_violent(Activity:symbol)\nIs_violent(\"hunting\").\n.decl Answer()\nAnswer() :- Is_pacifist(person), Opposes(person, activity), Is_violent(activity).\n.output Answer"]}
{"id": 1376, "answer": true, "completion": ".decl Causes_deaths(Event:symbol, Deaths:float)\nCauses_deaths(\"selfies\", 259).\nCauses_deaths(\"plague\", 50).\n.decl Answer()\nAnswer() :- Causes_deaths(\"selfies\", deaths1), Causes_deaths(\"plague\", deaths2), deaths1 > deaths2.\n.output Answer", "completions": [".decl Causes_deaths(Event:symbol, Deaths:float)\nCauses_deaths(\"selfies\", 259).\nCauses_deaths(\"plague\", 50).\n.decl Answer()\nAnswer() :- Causes_deaths(\"selfies\", deaths1), Causes_deaths(\"plague\", deaths2), deaths1 > deaths2.\n.output Answer"]}
{"id": 1377, "answer": true, "completion": ".decl Broadcasts(Channel:symbol, Show:symbol)\nBroadcasts(\"Channel A\", \"Naruto\").\nBroadcasts(\"Channel B\", \"Puzzle Place\").\n.decl Answer()\nAnswer() :- Broadcasts(channel, \"Naruto\"), Broadcasts(channel, \"Puzzle Place\").\n.output Answer", "completions": [".decl Broadcasts(Channel:symbol, Show:symbol)\nBroadcasts(\"Channel A\", \"Naruto\").\nBroadcasts(\"Channel B\", \"Puzzle Place\").\n.decl Answer()\nAnswer() :- Broadcasts(channel, \"Naruto\"), Broadcasts(channel, \"Puzzle Place\").\n.output Answer"]}
{"id": 1378, "answer": false, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Johnny Carson\", 3).\n.decl Water_polo_team_size(Team_size:float)\nWater_polo_team_size(7).\n.decl Answer()\nAnswer() :- Has_n_children(\"Johnny Carson\", n_children), Water_polo_team_size(team_size), n_children >= team_size.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Johnny Carson\", 3).\n.decl Water_polo_team_size(Team_size:float)\nWater_polo_team_size(7).\n.decl Answer()\nAnswer() :- Has_n_children(\"Johnny Carson\", n_children), Water_polo_team_size(team_size), n_children >= team_size.\n.output Answer"]}
{"id": 1379, "answer": false, "completion": ".decl Opposed_allotment(Group:symbol, Action:symbol)\nOpposed_allotment(\"Cherokee people\", \"sent delegation\").\n\n.decl Answer()\nAnswer() :- Opposed_allotment(\"Cherokee people\", \"sent delegation\").\n.output Answer", "completions": [".decl Opposed_allotment(Group:symbol, Action:symbol)\nOpposed_allotment(\"Cherokee people\", \"sent delegation\").\n\n.decl Answer()\nAnswer() :- Opposed_allotment(\"Cherokee people\", \"sent delegation\").\n.output Answer"]}
{"id": 1380, "answer": true, "completion": ".decl Performs_action(Profession:symbol, Action:symbol)\nPerforms_action(\"pediatrician\", \"treat children\").\nPerforms_action(\"obstetrician-gynecologist\", \"perform abortions\").\n.decl Answer()\nAnswer() :- Performs_action(\"pediatrician\", \"perform abortions\").\n.output Answer", "completions": [".decl Performs_action(Profession:symbol, Action:symbol)\nPerforms_action(\"pediatrician\", \"treat children\").\nPerforms_action(\"obstetrician-gynecologist\", \"perform abortions\").\n.decl Answer()\nAnswer() :- Performs_action(\"pediatrician\", \"perform abortions\").\n.output Answer"]}
{"id": 1381, "answer": true, "completion": ".decl Features(Subject:symbol, Object:symbol)\nFeatures(\"Brave\", \"Scottish people\").\n.decl Answer()\nAnswer() :- Features(\"Brave\", \"Scottish people\").\n.output Answer", "completions": [".decl Features(Subject:symbol, Object:symbol)\nFeatures(\"Brave\", \"Scottish people\").\n.decl Answer()\nAnswer() :- Features(\"Brave\", \"Scottish people\").\n.output Answer"]}
{"id": 1382, "answer": true, "completion": ".decl Is_south_of(Object:symbol, Reference:symbol)\nIs_south_of(\"Cape Town\", \"Equator\").\n.decl Answer()\nAnswer() :- Is_south_of(\"Cape Town\", \"Equator\").\n.output Answer", "completions": [".decl Is_south_of(Object:symbol, Reference:symbol)\nIs_south_of(\"Cape Town\", \"Equator\").\n.decl Answer()\nAnswer() :- Is_south_of(\"Cape Town\", \"Equator\").\n.output Answer"]}
{"id": 1383, "answer": false, "completion": ".decl Has_trait(Band:symbol, Trait:symbol)\nHas_trait(\"Metallica\", \"protective over their music\").\n.decl Answer()\nAnswer() :- Has_trait(\"Metallica\", \"protective over their music\").\n.output Answer", "completions": [".decl Has_trait(Band:symbol, Trait:symbol)\nHas_trait(\"Metallica\", \"protective over their music\").\n.decl Answer()\nAnswer() :- Has_trait(\"Metallica\", \"protective over their music\").\n.output Answer"]}
{"id": 1384, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"applicant\", \"multiple sclerosis\").\n.decl Rejects(University:symbol, Condition:symbol)\nRejects(\"United States Military Academy\", \"multiple sclerosis\").\n.decl Answer()\nAnswer() :- Has_condition(\"applicant\", condition), Rejects(\"United States Military Academy\", condition).\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"applicant\", \"multiple sclerosis\").\n.decl Rejects(University:symbol, Condition:symbol)\nRejects(\"United States Military Academy\", \"multiple sclerosis\").\n.decl Answer()\nAnswer() :- Has_condition(\"applicant\", condition), Rejects(\"United States Military Academy\", condition).\n.output Answer"]}
{"id": 1385, "answer": true, "completion": ".decl Fails_separation(Country:symbol, Aspect:symbol)\nFails_separation(\"USA\", \"prayer in public schools\").\nFails_separation(\"USA\", \"religious displays on public property\").\nFails_separation(\"USA\", \"government funding of religious organizations\").\n.decl Answer()\nAnswer() :- Fails_separation(\"USA\", aspect1), Fails_separation(\"USA\", aspect2), aspect1 != aspect2.\n.output Answer", "completions": [".decl Fails_separation(Country:symbol, Aspect:symbol)\nFails_separation(\"USA\", \"prayer in public schools\").\nFails_separation(\"USA\", \"religious displays on public property\").\nFails_separation(\"USA\", \"government funding of religious organizations\").\n.decl Answer()\nAnswer() :- Fails_separation(\"USA\", aspect1), Fails_separation(\"USA\", aspect2), aspect1 != aspect2.\n.output Answer"]}
{"id": 1386, "answer": true, "completion": ".decl Received_award(Person:symbol, Award:symbol)\nReceived_award(\"Jesse W. Moore\", \"NASA Distinguished Service Medal\").\n.decl Award_theme(Award:symbol, Theme:symbol)\nAward_theme(\"NASA Distinguished Service Medal\", \"non-Snoopy\").\nAward_theme(\"NASA Snoopy Award\", \"Snoopy\").\n.decl Answer()\nAnswer() :- Received_award(\"Jesse W. Moore\", award), Award_theme(award, \"Snoopy\").\nAnswer() :- Received_award(\"Jesse W. Moore\", award1), Award_theme(award1, theme1), Award_theme(award2, \"Snoopy\"), theme1 != \"Snoopy\".\n.output Answer", "completions": [".decl Received_award(Person:symbol, Award:symbol)\nReceived_award(\"Jesse W. Moore\", \"NASA Distinguished Service Medal\").\n.decl Award_theme(Award:symbol, Theme:symbol)\nAward_theme(\"NASA Distinguished Service Medal\", \"non-Snoopy\").\nAward_theme(\"NASA Snoopy Award\", \"Snoopy\").\n.decl Answer()\nAnswer() :- Received_award(\"Jesse W. Moore\", award), Award_theme(award, \"Snoopy\").\nAnswer() :- Received_award(\"Jesse W. Moore\", award1), Award_theme(award1, theme1), Award_theme(award2, \"Snoopy\"), theme1 != \"Snoopy\".\n.output Answer"]}
{"id": 1387, "answer": true, "completion": ".decl Located_in(Object:symbol, City:symbol)\nLocated_in(\"YMCA headquarters\", \"Geneva\").\n.decl Available_in(Object:symbol, City:symbol)\nAvailable_in(\"Raclette\", \"Geneva\").\n.decl Answer()\nAnswer() :- Available_in(\"Raclette\", city), Located_in(\"YMCA headquarters\", city).\n.output Answer", "completions": [".decl Located_in(Object:symbol, City:symbol)\nLocated_in(\"YMCA headquarters\", \"Geneva\").\n.decl Available_in(Object:symbol, City:symbol)\nAvailable_in(\"Raclette\", \"Geneva\").\n.decl Answer()\nAnswer() :- Available_in(\"Raclette\", city), Located_in(\"YMCA headquarters\", city).\n.output Answer"]}
{"id": 1388, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"ABBA\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"ABBA\", n_members), n_members >= 4.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"ABBA\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"ABBA\", n_members), n_members >= 4.\n.output Answer"]}
{"id": 1389, "answer": true, "completion": ".decl Wrestled_in_century(Wrestler:symbol, Century:float)\nWrestled_in_century(\"Stone Cold Steve Austin\", 20).\n.decl Answer()\nAnswer() :- Wrestled_in_century(\"Stone Cold Steve Austin\", century1), Wrestled_in_century(\"Stone Cold Steve Austin\", century2), Wrestled_in_century(\"Stone Cold Steve Austin\", century3), century1 != century2, century1 != century3, century2 != century3.\n.output Answer", "completions": [".decl Wrestled_in_century(Wrestler:symbol, Century:float)\nWrestled_in_century(\"Stone Cold Steve Austin\", 20).\n.decl Answer()\nAnswer() :- Wrestled_in_century(\"Stone Cold Steve Austin\", century1), Wrestled_in_century(\"Stone Cold Steve Austin\", century2), Wrestled_in_century(\"Stone Cold Steve Austin\", century3), century1 != century2, century1 != century3, century2 != century3.\n.output Answer"]}
{"id": 1390, "answer": false, "completion": ".decl Has_property(Substance:symbol, Property:symbol)\nHas_property(\"water\", \"viscosity\").\n.decl Answer()\nAnswer() :- Has_property(\"water\", \"viscosity\").\n.output Answer", "completions": [".decl Has_property(Substance:symbol, Property:symbol)\nHas_property(\"water\", \"viscosity\").\n.decl Answer()\nAnswer() :- Has_property(\"water\", \"viscosity\").\n.output Answer"]}
{"id": 1391, "answer": true, "completion": ".decl Is_useful_for(Object:symbol, Group:symbol)\nIs_useful_for(\"loudspeaker\", \"hearing people\").\n.decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Gallaudet student\", \"deaf people\").\n.decl Answer()\nAnswer() :- Is_useful_for(\"loudspeaker\", group), Is_member_of(\"Gallaudet student\", group).\nAnswer() :- !Is_useful_for(\"loudspeaker\", \"deaf people\"), Is_member_of(\"Gallaudet student\", \"deaf people\").\n.output Answer", "completions": [".decl Is_useful_for(Object:symbol, Group:symbol)\nIs_useful_for(\"loudspeaker\", \"hearing people\").\n.decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Gallaudet student\", \"deaf people\").\n.decl Answer()\nAnswer() :- Is_useful_for(\"loudspeaker\", group), Is_member_of(\"Gallaudet student\", group).\nAnswer() :- !Is_useful_for(\"loudspeaker\", \"deaf people\"), Is_member_of(\"Gallaudet student\", \"deaf people\").\n.output Answer"]}
{"id": 1392, "answer": true, "completion": ".decl Glued(Object_A:symbol, Object_B:symbol)\nGlued(\"sesame seeds\", \"hamburger buns\").\n.decl Answer()\nAnswer() :- Glued(\"sesame seeds\", \"hamburger buns\").\n.output Answer", "completions": [".decl Glued(Object_A:symbol, Object_B:symbol)\nGlued(\"sesame seeds\", \"hamburger buns\").\n.decl Answer()\nAnswer() :- Glued(\"sesame seeds\", \"hamburger buns\").\n.output Answer"]}
{"id": 1393, "answer": false, "completion": ".decl Is_boxer(Person:symbol)\nIs_boxer(\"Sugar Ray Robinson\").\n.decl Stole_in_country(Person:symbol, Country:symbol)\nStole_in_country(\"Sugar Ray Robinson\", \"Iran\").\n.decl Can_box(Person:symbol)\nCan_box(\"Sugar Ray Robinson\") :- Is_boxer(\"Sugar Ray Robinson\"), !Stole_in_country(\"Sugar Ray Robinson\", \"Iran\").\n.decl Answer()\nAnswer() :- Can_box(\"Sugar Ray Robinson\").\n.output Answer", "completions": [".decl Is_boxer(Person:symbol)\nIs_boxer(\"Sugar Ray Robinson\").\n.decl Stole_in_country(Person:symbol, Country:symbol)\nStole_in_country(\"Sugar Ray Robinson\", \"Iran\").\n.decl Can_box(Person:symbol)\nCan_box(\"Sugar Ray Robinson\") :- Is_boxer(\"Sugar Ray Robinson\"), !Stole_in_country(\"Sugar Ray Robinson\", \"Iran\").\n.decl Answer()\nAnswer() :- Can_box(\"Sugar Ray Robinson\").\n.output Answer"]}
{"id": 1394, "answer": false, "completion": ".decl Dwells(Entity:symbol, Location:symbol)\nDwells(\"Ahura Mazda\", \"heaven\").\nDwells(\"Abaddon\", \"abyss\").\n.decl Has_elevation(Location:symbol, Elevation:float)\nHas_elevation(\"heaven\", 1).\nHas_elevation(\"abyss\", -1).\n.decl Answer()\nAnswer() :- Dwells(\"Ahura Mazda\", location1), Dwells(\"Abaddon\", location2), Has_elevation(location1, elevation1), Has_elevation(location2, elevation2), elevation1 > elevation2.\n.output Answer", "completions": [".decl Dwells(Entity:symbol, Location:symbol)\nDwells(\"Ahura Mazda\", \"heaven\").\nDwells(\"Abaddon\", \"abyss\").\n.decl Has_elevation(Location:symbol, Elevation:float)\nHas_elevation(\"heaven\", 1).\nHas_elevation(\"abyss\", -1).\n.decl Answer()\nAnswer() :- Dwells(\"Ahura Mazda\", location1), Dwells(\"Abaddon\", location2), Has_elevation(location1, elevation1), Has_elevation(location2, elevation2), elevation1 > elevation2.\n.output Answer"]}
{"id": 1395, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"fastest tortoise\", 0.28).\nHas_speed(\"Chicago L\", 55.33).\n.decl Answer()\nAnswer() :- Has_speed(\"fastest tortoise\", speed1), Has_speed(\"Chicago L\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"fastest tortoise\", 0.28).\nHas_speed(\"Chicago L\", 55.33).\n.decl Answer()\nAnswer() :- Has_speed(\"fastest tortoise\", speed1), Has_speed(\"Chicago L\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 1396, "answer": false, "completion": ".decl Celebrates_with(Event:symbol, Activity:symbol)\nCelebrates_with(\"Earth Day\", \"planting trees\").\nCelebrates_with(\"Earth Day\", \"cleaning up litter\").\nCelebrates_with(\"Earth Day\", \"conserving energy\").\n.decl Answer()\nAnswer() :- Celebrates_with(\"Earth Day\", \"ceremonial tire fire\").\n.output Answer", "completions": [".decl Celebrates_with(Event:symbol, Activity:symbol)\nCelebrates_with(\"Earth Day\", \"planting trees\").\nCelebrates_with(\"Earth Day\", \"cleaning up litter\").\nCelebrates_with(\"Earth Day\", \"conserving energy\").\n.decl Answer()\nAnswer() :- Celebrates_with(\"Earth Day\", \"ceremonial tire fire\").\n.output Answer"]}
{"id": 1397, "answer": true, "completion": ".decl Built_in_country(Ship:symbol, Country:symbol)\nBuilt_in_country(\"Brazilian Navy Ship 1\", \"Britain\").\nBuilt_in_country(\"Brazilian Navy Ship 2\", \"Brazil\").\nBuilt_in_country(\"Brazilian Navy Ship 3\", \"Britain\").\n.decl Is_Brazilian_Navy_Ship(Ship:symbol)\nIs_Brazilian_Navy_Ship(\"Brazilian Navy Ship 1\").\nIs_Brazilian_Navy_Ship(\"Brazilian Navy Ship 2\").\nIs_Brazilian_Navy_Ship(\"Brazilian Navy Ship 3\").\n.decl Answer()\nAnswer() :- Is_Brazilian_Navy_Ship(ship), Built_in_country(ship, \"Britain\").\n.output Answer", "completions": [".decl Built_in_country(Ship:symbol, Country:symbol)\nBuilt_in_country(\"Brazilian Navy Ship 1\", \"Britain\").\nBuilt_in_country(\"Brazilian Navy Ship 2\", \"Brazil\").\nBuilt_in_country(\"Brazilian Navy Ship 3\", \"Britain\").\n.decl Is_Brazilian_Navy_Ship(Ship:symbol)\nIs_Brazilian_Navy_Ship(\"Brazilian Navy Ship 1\").\nIs_Brazilian_Navy_Ship(\"Brazilian Navy Ship 2\").\nIs_Brazilian_Navy_Ship(\"Brazilian Navy Ship 3\").\n.decl Answer()\nAnswer() :- Is_Brazilian_Navy_Ship(ship), Built_in_country(ship, \"Britain\").\n.output Answer"]}
{"id": 1398, "answer": true, "completion": ".decl Named_after(Character:symbol, Person:symbol)\nNamed_after(\"Florean Fortescue\", \"Florence\").\n.decl Is_Harry_Potter_character(Character:symbol)\nIs_Harry_Potter_character(\"Florean Fortescue\").\n.decl Answer()\nAnswer() :- Named_after(character, \"Florence\"), Is_Harry_Potter_character(character).\n.output Answer", "completions": [".decl Named_after(Character:symbol, Person:symbol)\nNamed_after(\"Florean Fortescue\", \"Florence\").\n.decl Is_Harry_Potter_character(Character:symbol)\nIs_Harry_Potter_character(\"Florean Fortescue\").\n.decl Answer()\nAnswer() :- Named_after(character, \"Florence\"), Is_Harry_Potter_character(character).\n.output Answer"]}
{"id": 1399, "answer": true, "completion": ".decl Has_seats(Car:symbol, N_seats:float)\nHas_seats(\"Chevrolet Corvette ZR1\", 2).\n.decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Lil Wayne\", 4).\n.decl Answer()\nAnswer() :- Has_seats(\"Chevrolet Corvette ZR1\", n_seats), Has_children(\"Lil Wayne\", n_children), n_seats >= n_children.\n.output Answer", "completions": [".decl Has_seats(Car:symbol, N_seats:float)\nHas_seats(\"Chevrolet Corvette ZR1\", 2).\n.decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Lil Wayne\", 4).\n.decl Answer()\nAnswer() :- Has_seats(\"Chevrolet Corvette ZR1\", n_seats), Has_children(\"Lil Wayne\", n_children), n_seats >= n_children.\n.output Answer"]}
{"id": 1400, "answer": true, "completion": ".decl Has_revenue(Entity:symbol, Revenue:float)\nHas_revenue(\"Iceland\", 30000000000).\nHas_revenue(\"Amazon\", 386000000000).\n.decl Answer()\nAnswer() :- Has_revenue(\"Iceland\", revenue1), Has_revenue(\"Amazon\", revenue2), revenue1 < revenue2.\n.output Answer", "completions": [".decl Has_revenue(Entity:symbol, Revenue:float)\nHas_revenue(\"Iceland\", 30000000000).\nHas_revenue(\"Amazon\", 386000000000).\n.decl Answer()\nAnswer() :- Has_revenue(\"Iceland\", revenue1), Has_revenue(\"Amazon\", revenue2), revenue1 < revenue2.\n.output Answer"]}
{"id": 1401, "answer": true, "completion": ".decl Star_rating(Rating:float, Quality:symbol)\nStar_rating(5, \"good\").\nStar_rating(4, \"good\").\nStar_rating(3, \"average\").\nStar_rating(2, \"poor\").\nStar_rating(1, \"poor\").\n.decl Answer()\nAnswer() :- Star_rating(5, \"good\").\n.output Answer", "completions": [".decl Star_rating(Rating:float, Quality:symbol)\nStar_rating(5, \"good\").\nStar_rating(4, \"good\").\nStar_rating(3, \"average\").\nStar_rating(2, \"poor\").\nStar_rating(1, \"poor\").\n.decl Answer()\nAnswer() :- Star_rating(5, \"good\").\n.output Answer"]}
{"id": 1402, "answer": false, "completion": ".decl Encouraged_by_government(Culture:symbol, Country:symbol)\nEncouraged_by_government(\"hippie culture\", \"United States\").\n.decl Is_in(Country_A:symbol, Union:symbol)\nIs_in(\"Soviet Union\", \"USSR\").\n.decl Answer()\nAnswer() :- Encouraged_by_government(\"hippie culture\", country), Is_in(country, \"USSR\").\n.output Answer", "completions": [".decl Encouraged_by_government(Culture:symbol, Country:symbol)\nEncouraged_by_government(\"hippie culture\", \"United States\").\n.decl Is_in(Country_A:symbol, Union:symbol)\nIs_in(\"Soviet Union\", \"USSR\").\n.decl Answer()\nAnswer() :- Encouraged_by_government(\"hippie culture\", country), Is_in(country, \"USSR\").\n.output Answer"]}
{"id": 1403, "answer": true, "completion": ".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"AK-47\", \"Cold War\").\n.decl War_years(War:symbol, Start_year:float, End_year:float)\nWar_years(\"Seven Years' War\", 1756, 1763).\nWar_years(\"Cold War\", 1947, 1991).\n.decl Answer()\nAnswer() :- Used_in_war(\"AK-47\", \"Seven Years' War\").\nAnswer() :- Used_in_war(\"AK-47\", war1), War_years(war1, start_year1, end_year1), War_years(\"Seven Years' War\", start_year2, end_year2), end_year1 <= start_year2.\n.output Answer", "completions": [".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"AK-47\", \"Cold War\").\n.decl War_years(War:symbol, Start_year:float, End_year:float)\nWar_years(\"Seven Years' War\", 1756, 1763).\nWar_years(\"Cold War\", 1947, 1991).\n.decl Answer()\nAnswer() :- Used_in_war(\"AK-47\", \"Seven Years' War\").\nAnswer() :- Used_in_war(\"AK-47\", war1), War_years(war1, start_year1, end_year1), War_years(\"Seven Years' War\", start_year2, end_year2), end_year1 <= start_year2.\n.output Answer"]}
{"id": 1404, "answer": true, "completion": ".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"crucifix\", \"church\").\n.decl Has_religion(Location:symbol, Religion:symbol)\nHas_religion(\"Karachi\", \"Islam\").\n.decl Has_object(Religion:symbol, Object:symbol)\nHas_object(\"Christianity\", \"crucifix\").\n.decl Answer()\nAnswer() :- Located_in(\"crucifix\", location), Has_religion(location, religion), Has_object(religion, \"crucifix\").\nAnswer() :- Located_in(\"crucifix\", location), Has_religion(\"Karachi\", religion), Has_object(religion, \"crucifix\").\n.output Answer", "completions": [".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"crucifix\", \"church\").\n.decl Has_religion(Location:symbol, Religion:symbol)\nHas_religion(\"Karachi\", \"Islam\").\n.decl Has_object(Religion:symbol, Object:symbol)\nHas_object(\"Christianity\", \"crucifix\").\n.decl Answer()\nAnswer() :- Located_in(\"crucifix\", location), Has_religion(location, religion), Has_object(religion, \"crucifix\").\nAnswer() :- Located_in(\"crucifix\", location), Has_religion(\"Karachi\", religion), Has_object(religion, \"crucifix\").\n.output Answer"]}
{"id": 1405, "answer": false, "completion": ".decl Lived_through_presidents(Person:symbol, N_presidents:float)\nLived_through_presidents(\"Alan Greenspan\", 14).\n.decl Bakers_dozen(N:float)\nBakers_dozen(13).\n.decl Answer()\nAnswer() :- Lived_through_presidents(\"Alan Greenspan\", n_presidents), Bakers_dozen(n), n_presidents >= n.\n.output Answer", "completions": [".decl Lived_through_presidents(Person:symbol, N_presidents:float)\nLived_through_presidents(\"Alan Greenspan\", 14).\n.decl Bakers_dozen(N:float)\nBakers_dozen(13).\n.decl Answer()\nAnswer() :- Lived_through_presidents(\"Alan Greenspan\", n_presidents), Bakers_dozen(n), n_presidents >= n.\n.output Answer"]}
{"id": 1406, "answer": false, "completion": ".decl Receives_newspaper(City:symbol, Newspaper:symbol)\nReceives_newspaper(\"Toronto\", \"Toronto Star\").\n.decl Answer()\nAnswer() :- !Receives_newspaper(\"Boston\", \"Toronto Star\").\n.output Answer", "completions": [".decl Receives_newspaper(City:symbol, Newspaper:symbol)\nReceives_newspaper(\"Toronto\", \"Toronto Star\").\n.decl Answer()\nAnswer() :- !Receives_newspaper(\"Boston\", \"Toronto Star\").\n.output Answer"]}
{"id": 1407, "answer": true, "completion": ".decl Gets_along(Person_A:symbol, Person_B:symbol)\nGets_along(\"50 Cent\", \"Jeffrey Atkins\").\n.decl Answer()\nAnswer() :- Gets_along(\"50 Cent\", \"Jeffrey Atkins\").\n.output Answer", "completions": [".decl Gets_along(Person_A:symbol, Person_B:symbol)\nGets_along(\"50 Cent\", \"Jeffrey Atkins\").\n.decl Answer()\nAnswer() :- Gets_along(\"50 Cent\", \"Jeffrey Atkins\").\n.output Answer"]}
{"id": 1408, "answer": true, "completion": ".decl Has_DID(Person:symbol, Condition:symbol)\nHas_DID(\"person\", \"Dissociative Identity Disorder\").\n.decl Has_good_memory(Person:symbol, Memory:symbol)\nHas_good_memory(\"person\", \"good\").\n.decl Answer()\nAnswer() :- Has_DID(person, \"Dissociative Identity Disorder\"), !Has_good_memory(person, \"good\").\n.output Answer", "completions": [".decl Has_DID(Person:symbol, Condition:symbol)\nHas_DID(\"person\", \"Dissociative Identity Disorder\").\n.decl Has_good_memory(Person:symbol, Memory:symbol)\nHas_good_memory(\"person\", \"good\").\n.decl Answer()\nAnswer() :- Has_DID(person, \"Dissociative Identity Disorder\"), !Has_good_memory(person, \"good\").\n.output Answer"]}
{"id": 1409, "answer": true, "completion": ".decl Has_CAS_number(Chemical:symbol, CAS_number:symbol)\nHas_CAS_number(\"petroleum jelly\", \"8009-03-8\").\n.decl Is_harmful_for(Chemical:symbol, Condition:symbol)\nIs_harmful_for(\"petroleum jelly\", \"rash\").\n.decl Answer()\nAnswer() :- Has_CAS_number(chemical, \"8009-03-8\"), Is_harmful_for(chemical, \"rash\").\n.output Answer", "completions": [".decl Has_CAS_number(Chemical:symbol, CAS_number:symbol)\nHas_CAS_number(\"petroleum jelly\", \"8009-03-8\").\n.decl Is_harmful_for(Chemical:symbol, Condition:symbol)\nIs_harmful_for(\"petroleum jelly\", \"rash\").\n.decl Answer()\nAnswer() :- Has_CAS_number(chemical, \"8009-03-8\"), Is_harmful_for(chemical, \"rash\").\n.output Answer"]}
{"id": 1410, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"wolverine\", \"North America\").\n.decl Is_in(Location_A:symbol, Location_B:symbol)\nIs_in(\"Miami\", \"Florida\").\nIs_in(\"Florida\", \"United States\").\nIs_in(\"United States\", \"North America\").\n.decl Answer()\nAnswer() :- Lives_in(\"wolverine\", location1), Is_in(\"Miami\", location2), Is_in(location2, location1).\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"wolverine\", \"North America\").\n.decl Is_in(Location_A:symbol, Location_B:symbol)\nIs_in(\"Miami\", \"Florida\").\nIs_in(\"Florida\", \"United States\").\nIs_in(\"United States\", \"North America\").\n.decl Answer()\nAnswer() :- Lives_in(\"wolverine\", location1), Is_in(\"Miami\", location2), Is_in(location2, location1).\n.output Answer"]}
{"id": 1411, "answer": true, "completion": ".decl Released_on_day(Album:symbol, Day:symbol)\nReleased_on_day(\"Snoop Dogg's debut studio album\", \"Tuesday\").\n.decl Is_weekend(Day:symbol)\nIs_weekend(\"Saturday\").\nIs_weekend(\"Sunday\").\n.decl Answer()\nAnswer() :- Released_on_day(\"Snoop Dogg's debut studio album\", day), Is_weekend(day).\n.output Answer", "completions": [".decl Released_on_day(Album:symbol, Day:symbol)\nReleased_on_day(\"Snoop Dogg's debut studio album\", \"Tuesday\").\n.decl Is_weekend(Day:symbol)\nIs_weekend(\"Saturday\").\nIs_weekend(\"Sunday\").\n.decl Answer()\nAnswer() :- Released_on_day(\"Snoop Dogg's debut studio album\", day), Is_weekend(day).\n.output Answer"]}
{"id": 1412, "answer": true, "completion": ".decl Walks_across(Person:symbol, Place:symbol)\nWalks_across(\"person\", \"Amazonas\").\n.decl Has_risk(Place:symbol, Risk:symbol)\nHas_risk(\"Amazonas\", \"life_at_risk\").\n.decl Answer()\nAnswer() :- Walks_across(\"person\", \"Amazonas\"), Has_risk(\"Amazonas\", \"life_at_risk\").\n.output Answer", "completions": [".decl Walks_across(Person:symbol, Place:symbol)\nWalks_across(\"person\", \"Amazonas\").\n.decl Has_risk(Place:symbol, Risk:symbol)\nHas_risk(\"Amazonas\", \"life_at_risk\").\n.decl Answer()\nAnswer() :- Walks_across(\"person\", \"Amazonas\"), Has_risk(\"Amazonas\", \"life_at_risk\").\n.output Answer"]}
{"id": 1413, "answer": true, "completion": ".decl Grows_in_state(Vegetable:symbol, State:symbol, Amount:float)\nGrows_in_state(\"Cauliflower\", \"Arizona\", 1000).\nGrows_in_state(\"Cauliflower\", \"California\", 5000).\n.decl Answer()\nAnswer() :- Grows_in_state(\"Cauliflower\", \"Arizona\", amount1), Grows_in_state(\"Cauliflower\", \"California\", amount2), amount1 > amount2.\n.output Answer", "completions": [".decl Grows_in_state(Vegetable:symbol, State:symbol, Amount:float)\nGrows_in_state(\"Cauliflower\", \"Arizona\", 1000).\nGrows_in_state(\"Cauliflower\", \"California\", 5000).\n.decl Answer()\nAnswer() :- Grows_in_state(\"Cauliflower\", \"Arizona\", amount1), Grows_in_state(\"Cauliflower\", \"California\", amount2), amount1 > amount2.\n.output Answer"]}
{"id": 1414, "answer": true, "completion": ".decl Eaten_in_religious_context(Food:symbol, Religion:symbol)\nEaten_in_religious_context(\"horseradish\", \"Judaism\").\n.decl Answer()\nAnswer() :- Eaten_in_religious_context(\"horseradish\", religion).\n.output Answer", "completions": [".decl Eaten_in_religious_context(Food:symbol, Religion:symbol)\nEaten_in_religious_context(\"horseradish\", \"Judaism\").\n.decl Answer()\nAnswer() :- Eaten_in_religious_context(\"horseradish\", religion).\n.output Answer"]}
{"id": 1415, "answer": true, "completion": ".decl Follows_for_genre(Fan:symbol, Artist:symbol, Genre:symbol)\nFollows_for_genre(\"most fans\", \"Katy Perry\", \"pop\").\n.decl Answer()\nAnswer() :- Follows_for_genre(\"most fans\", \"Katy Perry\", \"gospel\").\n.output Answer", "completions": [".decl Follows_for_genre(Fan:symbol, Artist:symbol, Genre:symbol)\nFollows_for_genre(\"most fans\", \"Katy Perry\", \"pop\").\n.decl Answer()\nAnswer() :- Follows_for_genre(\"most fans\", \"Katy Perry\", \"gospel\").\n.output Answer"]}
{"id": 1416, "answer": true, "completion": ".decl Relies_on(Person:symbol, Substance:symbol)\nRelies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Relies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.output Answer", "completions": [".decl Relies_on(Person:symbol, Substance:symbol)\nRelies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Relies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.output Answer"]}
{"id": 1417, "answer": true, "completion": ".decl Is_sensitive_to_environment(Animal:symbol)\nIs_sensitive_to_environment(\"common carp\").\n.decl Answer()\nAnswer() :- Is_sensitive_to_environment(\"common carp\").\n.output Answer", "completions": [".decl Is_sensitive_to_environment(Animal:symbol)\nIs_sensitive_to_environment(\"common carp\").\n.decl Answer()\nAnswer() :- Is_sensitive_to_environment(\"common carp\").\n.output Answer"]}
{"id": 1418, "answer": true, "completion": ".decl Has_price(Item:symbol, Price:float)\nHas_price(\"Amazon share\", 3300).\nHas_price(\"Netflix subscription\", 200).\n.decl Answer()\nAnswer() :- Has_price(\"Amazon share\", amazon_price), Has_price(\"Netflix subscription\", netflix_price), amazon_price >= 20 * netflix_price.\n.output Answer", "completions": [".decl Has_price(Item:symbol, Price:float)\nHas_price(\"Amazon share\", 3300).\nHas_price(\"Netflix subscription\", 200).\n.decl Answer()\nAnswer() :- Has_price(\"Amazon share\", amazon_price), Has_price(\"Netflix subscription\", netflix_price), amazon_price >= 20 * netflix_price.\n.output Answer"]}
{"id": 1419, "answer": true, "completion": ".decl Weapon_used(Gladiator:symbol, Weapon:symbol)\nWeapon_used(\"gladiator\", \"sword\").\nWeapon_used(\"gladiator\", \"spear\").\nWeapon_used(\"gladiator\", \"trident\").\n.decl Answer()\nAnswer() :- Weapon_used(\"gladiator\", \"shotgun\").\n.output Answer", "completions": [".decl Weapon_used(Gladiator:symbol, Weapon:symbol)\nWeapon_used(\"gladiator\", \"sword\").\nWeapon_used(\"gladiator\", \"spear\").\nWeapon_used(\"gladiator\", \"trident\").\n.decl Answer()\nAnswer() :- Weapon_used(\"gladiator\", \"shotgun\").\n.output Answer"]}
{"id": 1420, "answer": true, "completion": ".decl Killed_by(Creature:symbol, Person:symbol)\nKilled_by(\"stingray\", \"Steve Irwin\").\n.decl Lives_in(Creature:symbol, Location:symbol)\nLives_in(\"stingray\", \"ocean\").\n.decl Is_in(Location1:symbol, Location2:symbol)\nIs_in(\"ocean\", \"Mediterranean Sea\").\n.decl Answer()\nAnswer() :- Killed_by(creature, \"Steve Irwin\"), Lives_in(creature, location), Is_in(location, \"Mediterranean Sea\").\n.output Answer", "completions": [".decl Killed_by(Creature:symbol, Person:symbol)\nKilled_by(\"stingray\", \"Steve Irwin\").\n.decl Lives_in(Creature:symbol, Location:symbol)\nLives_in(\"stingray\", \"ocean\").\n.decl Is_in(Location1:symbol, Location2:symbol)\nIs_in(\"ocean\", \"Mediterranean Sea\").\n.decl Answer()\nAnswer() :- Killed_by(creature, \"Steve Irwin\"), Lives_in(creature, location), Is_in(location, \"Mediterranean Sea\").\n.output Answer"]}
{"id": 1421, "answer": true, "completion": ".decl Cures_in_time(Adhesive:symbol, Time:float)\nCures_in_time(\"E6000\", 24).\n.decl Finishes_in_time(Vehicle:symbol, Race:symbol, Time:float)\nFinishes_in_time(\"hoverboard\", \"Daytona 500\", 1000).\n.decl Answer()\nAnswer() :- Cures_in_time(\"E6000\", cure_time), Finishes_in_time(\"hoverboard\", \"Daytona 500\", finish_time), cure_time < finish_time.\n.output Answer", "completions": [".decl Cures_in_time(Adhesive:symbol, Time:float)\nCures_in_time(\"E6000\", 24).\n.decl Finishes_in_time(Vehicle:symbol, Race:symbol, Time:float)\nFinishes_in_time(\"hoverboard\", \"Daytona 500\", 1000).\n.decl Answer()\nAnswer() :- Cures_in_time(\"E6000\", cure_time), Finishes_in_time(\"hoverboard\", \"Daytona 500\", finish_time), cure_time < finish_time.\n.output Answer"]}
{"id": 1422, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Cosmic Girls\", 13).\n.decl Requires_n_players(Game:symbol, N_players:float)\nRequires_n_players(\"League of Legends\", 1).\n.decl Answer()\nAnswer() :- Has_n_members(\"Cosmic Girls\", n_members), Requires_n_players(\"League of Legends\", n_players), n_members >= n_players.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Cosmic Girls\", 13).\n.decl Requires_n_players(Game:symbol, N_players:float)\nRequires_n_players(\"League of Legends\", 1).\n.decl Answer()\nAnswer() :- Has_n_members(\"Cosmic Girls\", n_members), Requires_n_players(\"League of Legends\", n_players), n_members >= n_players.\n.output Answer"]}
{"id": 1423, "answer": false, "completion": ".decl Relevant_to_plot(Event:symbol, Movie:symbol)\nRelevant_to_plot(\"Y2K\", \"The Matrix\").\nRelevant_to_plot(\"Mafia\", \"The Godfather\").\n.decl Answer()\nAnswer() :- Relevant_to_plot(\"Y2K\", \"The Godfather\").\n.output Answer", "completions": [".decl Relevant_to_plot(Event:symbol, Movie:symbol)\nRelevant_to_plot(\"Y2K\", \"The Matrix\").\nRelevant_to_plot(\"Mafia\", \"The Godfather\").\n.decl Answer()\nAnswer() :- Relevant_to_plot(\"Y2K\", \"The Godfather\").\n.output Answer"]}
{"id": 1424, "answer": true, "completion": ".decl Occurs_at_time(Event:symbol, Time:symbol)\nOccurs_at_time(\"The Tonight Show Starring Jimmy Fallon\", \"23:35\").\nOccurs_at_time(\"moonset\", \"21:30\").\n.decl Is_EST(Time:symbol)\nIs_EST(\"23:35\").\nIs_EST(\"21:30\").\n.decl Answer()\nAnswer() :- Occurs_at_time(\"The Tonight Show Starring Jimmy Fallon\", time1), Occurs_at_time(\"moonset\", time2), Is_EST(time1), Is_EST(time2), time1 > time2.\n.output Answer", "completions": [".decl Occurs_at_time(Event:symbol, Time:symbol)\nOccurs_at_time(\"The Tonight Show Starring Jimmy Fallon\", \"23:35\").\nOccurs_at_time(\"moonset\", \"21:30\").\n.decl Is_EST(Time:symbol)\nIs_EST(\"23:35\").\nIs_EST(\"21:30\").\n.decl Answer()\nAnswer() :- Occurs_at_time(\"The Tonight Show Starring Jimmy Fallon\", time1), Occurs_at_time(\"moonset\", time2), Is_EST(time1), Is_EST(time2), time1 > time2.\n.output Answer"]}
{"id": 1425, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"student of the class of 2017\", 1995).\n.decl Event_happened_in_year(Event:symbol, Year:float)\nEvent_happened_in_year(\"9/11\", 2001).\n.decl Has_amnesia_about(Person:symbol, Event:symbol)\nHas_amnesia_about(\"student of the class of 2017\", \"9/11\") :- Born_in_year(\"student of the class of 2017\", birth_year), Event_happened_in_year(\"9/11\", event_year), birth_year + 6 > event_year.\n.decl Answer()\nAnswer() :- Has_amnesia_about(\"student of the class of 2017\", \"9/11\").\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"student of the class of 2017\", 1995).\n.decl Event_happened_in_year(Event:symbol, Year:float)\nEvent_happened_in_year(\"9/11\", 2001).\n.decl Has_amnesia_about(Person:symbol, Event:symbol)\nHas_amnesia_about(\"student of the class of 2017\", \"9/11\") :- Born_in_year(\"student of the class of 2017\", birth_year), Event_happened_in_year(\"9/11\", event_year), birth_year + 6 > event_year.\n.decl Answer()\nAnswer() :- Has_amnesia_about(\"student of the class of 2017\", \"9/11\").\n.output Answer"]}
{"id": 1426, "answer": false, "completion": ".decl Avoids_dish(Person:symbol, Dish:symbol)\nAvoids_dish(\"Janet Jackson\", \"ham\").\n.decl Answer()\nAnswer() :- Avoids_dish(\"Janet Jackson\", \"ham\").\n.output Answer", "completions": [".decl Avoids_dish(Person:symbol, Dish:symbol)\nAvoids_dish(\"Janet Jackson\", \"ham\").\n.decl Answer()\nAnswer() :- Avoids_dish(\"Janet Jackson\", \"ham\").\n.output Answer"]}
{"id": 1427, "answer": false, "completion": ".decl Has_squares(Object:symbol, N_squares:float)\nHas_squares(\"chess board\", 64).\n.decl Has_peas(Pea_pod:symbol, N_peas:float)\nHas_peas(\"pea pod\", 8).\n.decl Answer()\nAnswer() :- Has_squares(\"chess board\", n_squares), Has_peas(\"pea pod\", n_peas), 20 * n_peas >= n_squares.\n.output Answer", "completions": [".decl Has_squares(Object:symbol, N_squares:float)\nHas_squares(\"chess board\", 64).\n.decl Has_peas(Pea_pod:symbol, N_peas:float)\nHas_peas(\"pea pod\", 8).\n.decl Answer()\nAnswer() :- Has_squares(\"chess board\", n_squares), Has_peas(\"pea pod\", n_peas), 20 * n_peas >= n_squares.\n.output Answer"]}
{"id": 1428, "answer": true, "completion": ".decl Has_footprints(Place:symbol, Year:float)\nHas_footprints(\"moon\", 1969).\n.decl Answer()\nAnswer() :- Has_footprints(\"moon\", year), year <= 1960.\n.output Answer", "completions": [".decl Has_footprints(Place:symbol, Year:float)\nHas_footprints(\"moon\", 1969).\n.decl Answer()\nAnswer() :- Has_footprints(\"moon\", year), year <= 1960.\n.output Answer"]}
{"id": 1429, "answer": true, "completion": ".decl Is_lucha_trios_match_competitor(Competitor:symbol)\nIs_lucha_trios_match_competitor(\"wrestler\").\n.decl Is_organization(Organization:symbol)\nIs_organization(\"Supreme Court of Canada\").\n.decl Answer()\nAnswer() :- Is_lucha_trios_match_competitor(\"Supreme Court of Canada\").\nAnswer() :- !Is_organization(\"Supreme Court of Canada\").\n.output Answer", "completions": [".decl Is_lucha_trios_match_competitor(Competitor:symbol)\nIs_lucha_trios_match_competitor(\"wrestler\").\n.decl Is_organization(Organization:symbol)\nIs_organization(\"Supreme Court of Canada\").\n.decl Answer()\nAnswer() :- Is_lucha_trios_match_competitor(\"Supreme Court of Canada\").\nAnswer() :- !Is_organization(\"Supreme Court of Canada\").\n.output Answer"]}
{"id": 1430, "answer": true, "completion": ".decl Has_readers(Media:symbol, Readers:float)\nHas_readers(\"The Atlantic\", 500000).\n.decl Battalion_size(Size:float)\nBattalion_size(800).\n.decl Answer()\nAnswer() :- Has_readers(\"The Atlantic\", readers), Battalion_size(size), readers >= 500 * size.\n.output Answer", "completions": [".decl Has_readers(Media:symbol, Readers:float)\nHas_readers(\"The Atlantic\", 500000).\n.decl Battalion_size(Size:float)\nBattalion_size(800).\n.decl Answer()\nAnswer() :- Has_readers(\"The Atlantic\", readers), Battalion_size(size), readers >= 500 * size.\n.output Answer"]}
{"id": 1431, "answer": false, "completion": ".decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"French Revolution\", 1789).\n.decl Invented_in_year(Technology:symbol, Year:float)\nInvented_in_year(\"television\", 1927).\n.decl Answer()\nAnswer() :- Happened_in_year(\"French Revolution\", year1), Invented_in_year(\"television\", year2), year1 >= year2.\n.output Answer", "completions": [".decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"French Revolution\", 1789).\n.decl Invented_in_year(Technology:symbol, Year:float)\nInvented_in_year(\"television\", 1927).\n.decl Answer()\nAnswer() :- Happened_in_year(\"French Revolution\", year1), Invented_in_year(\"television\", year2), year1 >= year2.\n.output Answer"]}
{"id": 1432, "answer": true, "completion": ".decl Experienced_tragedy(Person:symbol, Tragedy:symbol)\nExperienced_tragedy(\"Dr. Seuss\", \"death of his wife\").\n.decl Answer()\nAnswer() :- !Experienced_tragedy(\"Dr. Seuss\", _).\n.output Answer", "completions": [".decl Experienced_tragedy(Person:symbol, Tragedy:symbol)\nExperienced_tragedy(\"Dr. Seuss\", \"death of his wife\").\n.decl Answer()\nAnswer() :- !Experienced_tragedy(\"Dr. Seuss\", _).\n.output Answer"]}
{"id": 1433, "answer": false, "completion": ".decl Is_deciduous(Tree:symbol)\nIs_deciduous(\"oak\").\nIs_deciduous(\"maple\").\nIs_deciduous(\"birch\").\n.decl Is_coniferous(Tree:symbol)\nIs_coniferous(\"pine\").\nIs_coniferous(\"spruce\").\nIs_coniferous(\"fir\").\n.decl Is_christmas_tree(Tree:symbol)\nIs_christmas_tree(\"pine\").\nIs_christmas_tree(\"spruce\").\nIs_christmas_tree(\"fir\").\n.decl Answer()\nAnswer() :- Is_christmas_tree(tree1), Is_deciduous(tree2), tree1 != tree2.\n.output Answer", "completions": [".decl Is_deciduous(Tree:symbol)\nIs_deciduous(\"oak\").\nIs_deciduous(\"maple\").\nIs_deciduous(\"birch\").\n.decl Is_coniferous(Tree:symbol)\nIs_coniferous(\"pine\").\nIs_coniferous(\"spruce\").\nIs_coniferous(\"fir\").\n.decl Is_christmas_tree(Tree:symbol)\nIs_christmas_tree(\"pine\").\nIs_christmas_tree(\"spruce\").\nIs_christmas_tree(\"fir\").\n.decl Answer()\nAnswer() :- Is_christmas_tree(tree1), Is_deciduous(tree2), tree1 != tree2.\n.output Answer"]}
{"id": 1434, "answer": true, "completion": ".decl Is_person(Person:symbol)\nIs_person(\"Harvey Milk\").\n.decl Produces_milk(Animal:symbol)\nProduces_milk(\"cow\").\n.decl Answer()\nAnswer() :- Produces_milk(animal), Is_person(\"Harvey Milk\"), animal = \"Harvey Milk\".\n.output Answer", "completions": [".decl Is_person(Person:symbol)\nIs_person(\"Harvey Milk\").\n.decl Produces_milk(Animal:symbol)\nProduces_milk(\"cow\").\n.decl Answer()\nAnswer() :- Produces_milk(animal), Is_person(\"Harvey Milk\"), animal = \"Harvey Milk\".\n.output Answer"]}
{"id": 1435, "answer": true, "completion": ".decl Is_protagonist_of(Person:symbol, Work:symbol)\nIs_protagonist_of(\"Roland\", \"Song of Roland\").\n.decl Is_friendly_with(Person:symbol, Group:symbol)\nIs_friendly_with(\"Roland\", \"Franks\").\n.decl Has_sagas(Group:symbol)\nHas_sagas(\"Norse\").\n.decl Answer()\nAnswer() :- Is_protagonist_of(\"Roland\", \"Song of Roland\"), Is_friendly_with(\"Roland\", group), Has_sagas(group).\n.output Answer", "completions": [".decl Is_protagonist_of(Person:symbol, Work:symbol)\nIs_protagonist_of(\"Roland\", \"Song of Roland\").\n.decl Is_friendly_with(Person:symbol, Group:symbol)\nIs_friendly_with(\"Roland\", \"Franks\").\n.decl Has_sagas(Group:symbol)\nHas_sagas(\"Norse\").\n.decl Answer()\nAnswer() :- Is_protagonist_of(\"Roland\", \"Song of Roland\"), Is_friendly_with(\"Roland\", group), Has_sagas(group).\n.output Answer"]}
{"id": 1436, "answer": false, "completion": ".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"cucumber\", \"smooth\").\nHas_texture(\"cucumber\", \"bumpy\").\n.decl Answer()\nAnswer() :- Has_texture(\"cucumber\", texture1), Has_texture(\"cucumber\", texture2), texture1 != texture2.\n.output Answer", "completions": [".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"cucumber\", \"smooth\").\nHas_texture(\"cucumber\", \"bumpy\").\n.decl Answer()\nAnswer() :- Has_texture(\"cucumber\", texture1), Has_texture(\"cucumber\", texture2), texture1 != texture2.\n.output Answer"]}
{"id": 1437, "answer": false, "completion": ".decl Used_in_currency(Currency:symbol, Country:symbol)\nUsed_in_currency(\"Euro\", \"Germany\").\n.decl Existed_in_time(Country:symbol, Start_year:float, End_year:float)\nExisted_in_time(\"Prussia\", 1525, 1947).\n.decl Answer()\nAnswer() :- Used_in_currency(\"Euro\", \"Prussia\").\nAnswer() :- Used_in_currency(\"Euro\", country), Existed_in_time(\"Prussia\", start_year, end_year), Existed_in_time(country, start_year2, end_year2), end_year2 <= end_year, start_year2 >= start_year.\n.output Answer", "completions": [".decl Used_in_currency(Currency:symbol, Country:symbol)\nUsed_in_currency(\"Euro\", \"Germany\").\n.decl Existed_in_time(Country:symbol, Start_year:float, End_year:float)\nExisted_in_time(\"Prussia\", 1525, 1947).\n.decl Answer()\nAnswer() :- Used_in_currency(\"Euro\", \"Prussia\").\nAnswer() :- Used_in_currency(\"Euro\", country), Existed_in_time(\"Prussia\", start_year, end_year), Existed_in_time(country, start_year2, end_year2), end_year2 <= end_year, start_year2 >= start_year.\n.output Answer"]}
{"id": 1438, "answer": true, "completion": ".decl Known_for(Object:symbol, Action:symbol, Item:symbol)\nKnown_for(\"Bugs Bunny\", \"carrying\", \"carrot\").\n.decl Is_root_vegetable(Vegetable:symbol)\nIs_root_vegetable(\"carrot\").\n.decl Answer()\nAnswer() :- Known_for(\"Bugs Bunny\", \"carrying\", item), Is_root_vegetable(item).\n.output Answer", "completions": [".decl Known_for(Object:symbol, Action:symbol, Item:symbol)\nKnown_for(\"Bugs Bunny\", \"carrying\", \"carrot\").\n.decl Is_root_vegetable(Vegetable:symbol)\nIs_root_vegetable(\"carrot\").\n.decl Answer()\nAnswer() :- Known_for(\"Bugs Bunny\", \"carrying\", item), Is_root_vegetable(item).\n.output Answer"]}
{"id": 1439, "answer": false, "completion": ".decl Violates(Concept_A:symbol, Concept_B:symbol)\nViolates(\"Hammurabi's Code\", \"Christian Golden Rule\").\n.decl Answer()\nAnswer() :- Violates(\"Hammurabi's Code\", \"Christian Golden Rule\").\n.output Answer", "completions": [".decl Violates(Concept_A:symbol, Concept_B:symbol)\nViolates(\"Hammurabi's Code\", \"Christian Golden Rule\").\n.decl Answer()\nAnswer() :- Violates(\"Hammurabi's Code\", \"Christian Golden Rule\").\n.output Answer"]}
{"id": 1440, "answer": false, "completion": ".decl Originates_in_century(Religion:symbol, Century:float)\nOriginates_in_century(\"Hinduism\", -15).\nOriginates_in_century(\"Buddhism\", -6).\nOriginates_in_century(\"Jainism\", -6).\nOriginates_in_century(\"Bön\", -2).\n.decl Sacred_in_religion(Mountain:symbol, Religion:symbol)\nSacred_in_religion(\"Himalayas\", \"Hinduism\").\nSacred_in_religion(\"Himalayas\", \"Buddhism\").\nSacred_in_religion(\"Himalayas\", \"Jainism\").\nSacred_in_religion(\"Himalayas\", \"Bön\").\n.decl Answer()\nAnswer() :- Sacred_in_religion(\"Himalayas\", religion), Originates_in_century(religion, century), century == 19.\n.output Answer", "completions": [".decl Originates_in_century(Religion:symbol, Century:float)\nOriginates_in_century(\"Hinduism\", -15).\nOriginates_in_century(\"Buddhism\", -6).\nOriginates_in_century(\"Jainism\", -6).\nOriginates_in_century(\"Bön\", -2).\n.decl Sacred_in_religion(Mountain:symbol, Religion:symbol)\nSacred_in_religion(\"Himalayas\", \"Hinduism\").\nSacred_in_religion(\"Himalayas\", \"Buddhism\").\nSacred_in_religion(\"Himalayas\", \"Jainism\").\nSacred_in_religion(\"Himalayas\", \"Bön\").\n.decl Answer()\nAnswer() :- Sacred_in_religion(\"Himalayas\", religion), Originates_in_century(religion, century), century == 19.\n.output Answer"]}
{"id": 1441, "answer": true, "completion": ".decl Part_of_Bible(Section:symbol, Belief_Group:symbol)\nPart_of_Bible(\"Ten Commandments\", \"Jewish\").\n.decl Answer()\nAnswer() :- !Part_of_Bible(\"Ten Commandments\", \"Jewish\").\n.output Answer", "completions": [".decl Part_of_Bible(Section:symbol, Belief_Group:symbol)\nPart_of_Bible(\"Ten Commandments\", \"Jewish\").\n.decl Answer()\nAnswer() :- !Part_of_Bible(\"Ten Commandments\", \"Jewish\").\n.output Answer"]}
{"id": 1442, "answer": false, "completion": ".decl Has_surveillance_capability(Object:symbol, Capability:bool)\nHas_surveillance_capability(\"teddy bear\", true).\n.decl Answer()\nAnswer() :- Has_surveillance_capability(\"teddy bear\", capability), capability = true.\n.output Answer", "completions": [".decl Has_surveillance_capability(Object:symbol, Capability:bool)\nHas_surveillance_capability(\"teddy bear\", true).\n.decl Answer()\nAnswer() :- Has_surveillance_capability(\"teddy bear\", capability), capability = true.\n.output Answer"]}
{"id": 1443, "answer": true, "completion": ".decl Has_salary(Role:symbol, Salary:float)\nHas_salary(\"retail associate\", 30000).\nHas_salary(\"retailer CEO\", 5000000).\n.decl Answer()\nAnswer() :- Has_salary(\"retail associate\", salary1), Has_salary(\"retailer CEO\", salary2), salary1 < salary2.\n.output Answer", "completions": [".decl Has_salary(Role:symbol, Salary:float)\nHas_salary(\"retail associate\", 30000).\nHas_salary(\"retailer CEO\", 5000000).\n.decl Answer()\nAnswer() :- Has_salary(\"retail associate\", salary1), Has_salary(\"retailer CEO\", salary2), salary1 < salary2.\n.output Answer"]}
{"id": 1444, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Tame Impala's studio band\", 1).\n.decl Can_play_game(Game:symbol, Min_players:float)\nCan_play_game(\"Hot Potato\", 2).\n.decl Answer()\nAnswer() :- Has_n_members(\"Tame Impala's studio band\", n_members), Can_play_game(\"Hot Potato\", min_players), n_members >= min_players.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Tame Impala's studio band\", 1).\n.decl Can_play_game(Game:symbol, Min_players:float)\nCan_play_game(\"Hot Potato\", 2).\n.decl Answer()\nAnswer() :- Has_n_members(\"Tame Impala's studio band\", n_members), Can_play_game(\"Hot Potato\", min_players), n_members >= min_players.\n.output Answer"]}
{"id": 1445, "answer": true, "completion": ".decl Is_bad(Substance:symbol)\nIs_bad(\"lactic acid\").\n.decl In_body(Substance:symbol)\nIn_body(\"lactic acid\").\n.decl Answer()\nAnswer() :- Is_bad(substance), In_body(substance).\n.output Answer", "completions": [".decl Is_bad(Substance:symbol)\nIs_bad(\"lactic acid\").\n.decl In_body(Substance:symbol)\nIn_body(\"lactic acid\").\n.decl Answer()\nAnswer() :- Is_bad(substance), In_body(substance).\n.output Answer"]}
{"id": 1446, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"President Trump's first term\", 4).\n.decl Repainted_every_n_years(Object:symbol, N_years:float)\nRepainted_every_n_years(\"Tokyo Tower\", 5).\n.decl Answer()\nAnswer() :- Repainted_every_n_years(\"Tokyo Tower\", n_years1), Last_n_years(\"President Trump's first term\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"President Trump's first term\", 4).\n.decl Repainted_every_n_years(Object:symbol, N_years:float)\nRepainted_every_n_years(\"Tokyo Tower\", 5).\n.decl Answer()\nAnswer() :- Repainted_every_n_years(\"Tokyo Tower\", n_years1), Last_n_years(\"President Trump's first term\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1447, "answer": true, "completion": ".decl Has_experience(Person:symbol, Activity:symbol)\nHas_experience(\"Apollo 15 crew\", \"space travel\").\nHas_experience(\"Apollo 15 crew\", \"astronaut training\").\n.decl Requires_skill(Activity:symbol, Skill:symbol)\nRequires_skill(\"riding a unicycle\", \"balance\").\nRequires_skill(\"astronaut training\", \"balance\").\n.decl Answer()\nAnswer() :- Has_experience(\"Apollo 15 crew\", activity), Requires_skill(activity, \"balance\"), !Requires_skill(\"riding a unicycle\", \"balance\").\nAnswer() :- !Has_experience(\"Apollo 15 crew\", \"riding a unicycle\").\n.output Answer", "completions": [".decl Has_experience(Person:symbol, Activity:symbol)\nHas_experience(\"Apollo 15 crew\", \"space travel\").\nHas_experience(\"Apollo 15 crew\", \"astronaut training\").\n.decl Requires_skill(Activity:symbol, Skill:symbol)\nRequires_skill(\"riding a unicycle\", \"balance\").\nRequires_skill(\"astronaut training\", \"balance\").\n.decl Answer()\nAnswer() :- Has_experience(\"Apollo 15 crew\", activity), Requires_skill(activity, \"balance\"), !Requires_skill(\"riding a unicycle\", \"balance\").\nAnswer() :- !Has_experience(\"Apollo 15 crew\", \"riding a unicycle\").\n.output Answer"]}
{"id": 1448, "answer": true, "completion": ".decl Takes_oath(Person:symbol, Place:symbol)\nTakes_oath(\"person\", \"court of law\").\n.decl Is_allowed_to_lie(Person:symbol, Place:symbol)\nIs_allowed_to_lie(\"person\", \"court of law\").\n.decl Answer()\nAnswer() :- Takes_oath(\"person\", \"court of law\"), !Is_allowed_to_lie(\"person\", \"court of law\").\n.output Answer", "completions": [".decl Takes_oath(Person:symbol, Place:symbol)\nTakes_oath(\"person\", \"court of law\").\n.decl Is_allowed_to_lie(Person:symbol, Place:symbol)\nIs_allowed_to_lie(\"person\", \"court of law\").\n.decl Answer()\nAnswer() :- Takes_oath(\"person\", \"court of law\"), !Is_allowed_to_lie(\"person\", \"court of law\").\n.output Answer"]}
{"id": 1449, "answer": true, "completion": ".decl Is_straightforward(Language:symbol)\nIs_straightforward(\"Newspeak\").\n.decl Answer()\nAnswer() :- Is_straightforward(\"Newspeak\").\n.output Answer", "completions": [".decl Is_straightforward(Language:symbol)\nIs_straightforward(\"Newspeak\").\n.decl Answer()\nAnswer() :- Is_straightforward(\"Newspeak\").\n.output Answer"]}
{"id": 1450, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Snow White dwarves\", 7).\nHas_n_members(\"The Hobbit dwarves\", 13).\n\n.decl Has_strength(Group:symbol, Strength:float)\nHas_strength(\"Snow White dwarves\", 5).\nHas_strength(\"The Hobbit dwarves\", 8).\n\n.decl Total_strength(Group:symbol, Total_strength:float)\nTotal_strength(group, total_strength) :- Has_n_members(group, n_members), Has_strength(group, strength), total_strength = n_members * strength.\n\n.decl Answer()\nAnswer() :- Total_strength(\"Snow White dwarves\", total_strength1), Total_strength(\"The Hobbit dwarves\", total_strength2), total_strength1 > total_strength2.\n\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Snow White dwarves\", 7).\nHas_n_members(\"The Hobbit dwarves\", 13).\n\n.decl Has_strength(Group:symbol, Strength:float)\nHas_strength(\"Snow White dwarves\", 5).\nHas_strength(\"The Hobbit dwarves\", 8).\n\n.decl Total_strength(Group:symbol, Total_strength:float)\nTotal_strength(group, total_strength) :- Has_n_members(group, n_members), Has_strength(group, strength), total_strength = n_members * strength.\n\n.decl Answer()\nAnswer() :- Total_strength(\"Snow White dwarves\", total_strength1), Total_strength(\"The Hobbit dwarves\", total_strength2), total_strength1 > total_strength2.\n\n.output Answer"]}
{"id": 1451, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Unity\", 182).\nHas_height(\"Statue of Liberty\", 93).\nHas_height(\"Lighthouse of Alexandria\", 120).\n.decl Difference(Object_A:symbol, Object_B:symbol, Diff:float)\nDifference(objectA, objectB, diff) :- Has_height(objectA, heightA), Has_height(objectB, heightB), diff = abs(heightA - heightB).\n.decl Answer()\nAnswer() :- Difference(\"Statue of Unity\", \"Statue of Liberty\", diff1), Difference(\"Statue of Unity\", \"Lighthouse of Alexandria\", diff2), diff1 < diff2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Unity\", 182).\nHas_height(\"Statue of Liberty\", 93).\nHas_height(\"Lighthouse of Alexandria\", 120).\n.decl Difference(Object_A:symbol, Object_B:symbol, Diff:float)\nDifference(objectA, objectB, diff) :- Has_height(objectA, heightA), Has_height(objectB, heightB), diff = abs(heightA - heightB).\n.decl Answer()\nAnswer() :- Difference(\"Statue of Unity\", \"Statue of Liberty\", diff1), Difference(\"Statue of Unity\", \"Lighthouse of Alexandria\", diff2), diff1 < diff2.\n.output Answer"]}
{"id": 1452, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Football War\", 100).\n.decl Answer()\nAnswer() :- Last_n_days(\"Football War\", n_days), n_days >= 30.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Football War\", 100).\n.decl Answer()\nAnswer() :- Last_n_days(\"Football War\", n_days), n_days >= 30.\n.output Answer"]}
{"id": 1453, "answer": true, "completion": ".decl Is_best_eaten_when(Object:symbol, Condition:symbol)\nIs_best_eaten_when(\"peach\", \"ripe\").\n.decl Is_ripe_when(Object:symbol, Firmness:symbol)\nIs_ripe_when(\"peach\", \"soft\").\n.decl Answer()\nAnswer() :- Is_best_eaten_when(\"peach\", \"ripe\"), Is_ripe_when(\"peach\", \"firm\").\n.output Answer", "completions": [".decl Is_best_eaten_when(Object:symbol, Condition:symbol)\nIs_best_eaten_when(\"peach\", \"ripe\").\n.decl Is_ripe_when(Object:symbol, Firmness:symbol)\nIs_ripe_when(\"peach\", \"soft\").\n.decl Answer()\nAnswer() :- Is_best_eaten_when(\"peach\", \"ripe\"), Is_ripe_when(\"peach\", \"firm\").\n.output Answer"]}
{"id": 1454, "answer": true, "completion": ".decl Has_reference(Person:symbol, Reference:symbol)\nHas_reference(\"Adam Sandler\", \"Cole Sprouse\").\nHas_reference(\"Adam Sandler\", \"scuba man doll\").\n.decl Answer()\nAnswer() :- Has_reference(\"Adam Sandler\", \"Cole Sprouse\"), Has_reference(\"Adam Sandler\", \"scuba man doll\").\n.output Answer", "completions": [".decl Has_reference(Person:symbol, Reference:symbol)\nHas_reference(\"Adam Sandler\", \"Cole Sprouse\").\nHas_reference(\"Adam Sandler\", \"scuba man doll\").\n.decl Answer()\nAnswer() :- Has_reference(\"Adam Sandler\", \"Cole Sprouse\"), Has_reference(\"Adam Sandler\", \"scuba man doll\").\n.output Answer"]}
{"id": 1455, "answer": true, "completion": ".decl Is_saint(Person:symbol, Religion:symbol)\nIs_saint(\"Lhamo Thondup\", \"Buddhism\").\n.decl Answer()\nAnswer() :- Is_saint(\"Lhamo Thondup\", \"Catholic Church\").\nAnswer() :- !Is_saint(\"Lhamo Thondup\", \"Catholic Church\"), Is_saint(\"Lhamo Thondup\", \"Buddhism\").\n.output Answer", "completions": [".decl Is_saint(Person:symbol, Religion:symbol)\nIs_saint(\"Lhamo Thondup\", \"Buddhism\").\n.decl Answer()\nAnswer() :- Is_saint(\"Lhamo Thondup\", \"Catholic Church\").\nAnswer() :- !Is_saint(\"Lhamo Thondup\", \"Catholic Church\"), Is_saint(\"Lhamo Thondup\", \"Buddhism\").\n.output Answer"]}
{"id": 1456, "answer": true, "completion": ".decl Can_be_hurt(Person:symbol, Object:symbol)\nCan_be_hurt(\"children\", \"jalapeno peppers\").\n.decl Answer()\nAnswer() :- Can_be_hurt(\"children\", \"jalapeno peppers\").\n.output Answer", "completions": [".decl Can_be_hurt(Person:symbol, Object:symbol)\nCan_be_hurt(\"children\", \"jalapeno peppers\").\n.decl Answer()\nAnswer() :- Can_be_hurt(\"children\", \"jalapeno peppers\").\n.output Answer"]}
{"id": 1457, "answer": true, "completion": ".decl Speaks(Language:symbol, Person:symbol)\nSpeaks(\"Japanese\", \"Rede Globo anchor\").\n.decl Greeting(Language:symbol, Greeting:symbol)\nGreeting(\"Japanese\", \"Konnichiwa\").\n.decl Answer()\nAnswer() :- Speaks(language, \"Rede Globo anchor\"), Greeting(language, \"Konnichiwa\").\n.output Answer", "completions": [".decl Speaks(Language:symbol, Person:symbol)\nSpeaks(\"Japanese\", \"Rede Globo anchor\").\n.decl Greeting(Language:symbol, Greeting:symbol)\nGreeting(\"Japanese\", \"Konnichiwa\").\n.decl Answer()\nAnswer() :- Speaks(language, \"Rede Globo anchor\"), Greeting(language, \"Konnichiwa\").\n.output Answer"]}
{"id": 1458, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"harbor seal\", \"Washington DC\").\n.decl Answer()\nAnswer() :- Lives_in(\"harbor seal\", \"Washington DC\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"harbor seal\", \"Washington DC\").\n.decl Answer()\nAnswer() :- Lives_in(\"harbor seal\", \"Washington DC\").\n.output Answer"]}
{"id": 1459, "answer": false, "completion": ".decl Has_speed(Car:symbol, Speed:float)\nHas_speed(\"2020 Toyota Supra\", 155).\nHas_speed(\"Nascar rally car\", 200).\n.decl Answer()\nAnswer() :- Has_speed(\"2020 Toyota Supra\", speed1), Has_speed(\"Nascar rally car\", speed2), speed1 < speed2.\n.output Answer", "completions": [".decl Has_speed(Car:symbol, Speed:float)\nHas_speed(\"2020 Toyota Supra\", 155).\nHas_speed(\"Nascar rally car\", 200).\n.decl Answer()\nAnswer() :- Has_speed(\"2020 Toyota Supra\", speed1), Has_speed(\"Nascar rally car\", speed2), speed1 < speed2.\n.output Answer"]}
{"id": 1460, "answer": false, "completion": ".decl Eats_in_hour(Person:symbol, Food:symbol, Weight:float)\nEats_in_hour(\"human\", \"12-lb roast turkey\", 12).\n.decl Max_eating_capacity(Person:symbol, Weight:float)\nMax_eating_capacity(\"human\", 5).\n.decl Answer()\nAnswer() :- Eats_in_hour(\"human\", \"12-lb roast turkey\", weight1), Max_eating_capacity(\"human\", weight2), weight1 <= weight2.\n.output Answer", "completions": [".decl Eats_in_hour(Person:symbol, Food:symbol, Weight:float)\nEats_in_hour(\"human\", \"12-lb roast turkey\", 12).\n.decl Max_eating_capacity(Person:symbol, Weight:float)\nMax_eating_capacity(\"human\", 5).\n.decl Answer()\nAnswer() :- Eats_in_hour(\"human\", \"12-lb roast turkey\", weight1), Max_eating_capacity(\"human\", weight2), weight1 <= weight2.\n.output Answer"]}
{"id": 1461, "answer": true, "completion": ".decl Carves_name(Person:symbol, Frequency:symbol)\nCarves_name(\"Zorro\", \"regularly\").\n.decl Answer()\nAnswer() :- Carves_name(\"Zorro\", \"regularly\").\n.output Answer", "completions": [".decl Carves_name(Person:symbol, Frequency:symbol)\nCarves_name(\"Zorro\", \"regularly\").\n.decl Answer()\nAnswer() :- Carves_name(\"Zorro\", \"regularly\").\n.output Answer"]}
{"id": 1462, "answer": false, "completion": ".decl Holds_concert(Venue:symbol, Concert:symbol)\nHolds_concert(\"Viper Room\", \"concert\").\n.decl Is_building(Building:symbol, Type:symbol)\nIs_building(\"National Diet building\", \"government\").\n.decl Answer()\nAnswer() :- Holds_concert(venue, \"concert\"), Is_building(\"National Diet building\", \"government\"), venue = \"National Diet building\".\n.output Answer", "completions": [".decl Holds_concert(Venue:symbol, Concert:symbol)\nHolds_concert(\"Viper Room\", \"concert\").\n.decl Is_building(Building:symbol, Type:symbol)\nIs_building(\"National Diet building\", \"government\").\n.decl Answer()\nAnswer() :- Holds_concert(venue, \"concert\"), Is_building(\"National Diet building\", \"government\"), venue = \"National Diet building\".\n.output Answer"]}
{"id": 1463, "answer": true, "completion": ".decl Is_vegan_substitute(Substitute:symbol, Original:symbol)\nIs_vegan_substitute(\"chickpeas\", \"tuna\").\n.decl Answer()\nAnswer() :- Is_vegan_substitute(\"chickpeas\", \"tuna\").\n.output Answer", "completions": [".decl Is_vegan_substitute(Substitute:symbol, Original:symbol)\nIs_vegan_substitute(\"chickpeas\", \"tuna\").\n.decl Answer()\nAnswer() :- Is_vegan_substitute(\"chickpeas\", \"tuna\").\n.output Answer"]}
{"id": 1464, "answer": false, "completion": ".decl Collaborated_with_Kurt_Sutter(Person:symbol)\nCollaborated_with_Kurt_Sutter(\"Charlie Hunnam\").\nCollaborated_with_Kurt_Sutter(\"Katey Sagal\").\nCollaborated_with_Kurt_Sutter(\"Ron Perlman\").\n\n.decl Involved_in_Beauty_and_the_Beast(Person:symbol)\nInvolved_in_Beauty_and_the_Beast(\"Emma Watson\").\nInvolved_in_Beauty_and_the_Beast(\"Dan Stevens\").\nInvolved_in_Beauty_and_the_Beast(\"Luke Evans\").\n\n.decl Answer()\nAnswer() :- Involved_in_Beauty_and_the_Beast(person), !Collaborated_with_Kurt_Sutter(person).\n.output Answer", "completions": [".decl Collaborated_with_Kurt_Sutter(Person:symbol)\nCollaborated_with_Kurt_Sutter(\"Charlie Hunnam\").\nCollaborated_with_Kurt_Sutter(\"Katey Sagal\").\nCollaborated_with_Kurt_Sutter(\"Ron Perlman\").\n\n.decl Involved_in_Beauty_and_the_Beast(Person:symbol)\nInvolved_in_Beauty_and_the_Beast(\"Emma Watson\").\nInvolved_in_Beauty_and_the_Beast(\"Dan Stevens\").\nInvolved_in_Beauty_and_the_Beast(\"Luke Evans\").\n\n.decl Answer()\nAnswer() :- Involved_in_Beauty_and_the_Beast(person), !Collaborated_with_Kurt_Sutter(person).\n.output Answer"]}
{"id": 1465, "answer": false, "completion": ".decl Has_strength(Force:symbol, Strength:float)\nHas_strength(\"Swiss Guard\", 100).\nHas_strength(\"Marines\", 1000).\n.decl Answer()\nAnswer() :- Has_strength(\"Swiss Guard\", strength1), Has_strength(\"Marines\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Force:symbol, Strength:float)\nHas_strength(\"Swiss Guard\", 100).\nHas_strength(\"Marines\", 1000).\n.decl Answer()\nAnswer() :- Has_strength(\"Swiss Guard\", strength1), Has_strength(\"Marines\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 1466, "answer": true, "completion": ".decl Has_footprints(Location:symbol, Species:symbol)\nHas_footprints(\"Mount Sharp\", \"rover\").\n.decl Answer()\nAnswer() :- !Has_footprints(\"Mount Sharp\", \"human\").\n.output Answer", "completions": [".decl Has_footprints(Location:symbol, Species:symbol)\nHas_footprints(\"Mount Sharp\", \"rover\").\n.decl Answer()\nAnswer() :- !Has_footprints(\"Mount Sharp\", \"human\").\n.output Answer"]}
{"id": 1467, "answer": true, "completion": ".decl Involved_in_battle(Person:symbol, Battle:symbol, Side:symbol)\nInvolved_in_battle(\"Edward II\", \"Battle of Falkirk\", \"England\").\n.decl Battle_result(Battle:symbol, Winning_side:symbol)\nBattle_result(\"Battle of Falkirk\", \"England\").\n.decl Crucial_to_victory(Person:symbol, Battle:symbol)\nCrucial_to_victory(\"Edward II\", \"Battle of Falkirk\").\n.decl Answer()\nAnswer() :- Involved_in_battle(\"Edward II\", \"Battle of Falkirk\", \"England\"), Battle_result(\"Battle of Falkirk\", \"England\"), Crucial_to_victory(\"Edward II\", \"Battle of Falkirk\").\n.output Answer", "completions": [".decl Involved_in_battle(Person:symbol, Battle:symbol, Side:symbol)\nInvolved_in_battle(\"Edward II\", \"Battle of Falkirk\", \"England\").\n.decl Battle_result(Battle:symbol, Winning_side:symbol)\nBattle_result(\"Battle of Falkirk\", \"England\").\n.decl Crucial_to_victory(Person:symbol, Battle:symbol)\nCrucial_to_victory(\"Edward II\", \"Battle of Falkirk\").\n.decl Answer()\nAnswer() :- Involved_in_battle(\"Edward II\", \"Battle of Falkirk\", \"England\"), Battle_result(\"Battle of Falkirk\", \"England\"), Crucial_to_victory(\"Edward II\", \"Battle of Falkirk\").\n.output Answer"]}
{"id": 1468, "answer": true, "completion": ".decl Paid_tribute_in_currency(Emperor:symbol, Currency:symbol)\nPaid_tribute_in_currency(\"Emperor Commodus\", \"Roman currency\").\n.decl Currency_exists_in_time(Currency:symbol, Time_period:symbol)\nCurrency_exists_in_time(\"Pound sterling\", \"modern times\").\nCurrency_exists_in_time(\"Roman currency\", \"ancient Rome\").\n.decl Lived_in_time_period(Person:symbol, Time_period:symbol)\nLived_in_time_period(\"Emperor Commodus\", \"ancient Rome\").\n.decl Answer()\nAnswer() :- Paid_tribute_in_currency(\"Emperor Commodus\", \"Pound sterling\").\nAnswer() :- Paid_tribute_in_currency(\"Emperor Commodus\", currency), Currency_exists_in_time(currency, time_period1), Currency_exists_in_time(\"Pound sterling\", time_period2), Lived_in_time_period(\"Emperor Commodus\", time_period1), time_period1 = time_period2.\n.output Answer", "completions": [".decl Paid_tribute_in_currency(Emperor:symbol, Currency:symbol)\nPaid_tribute_in_currency(\"Emperor Commodus\", \"Roman currency\").\n.decl Currency_exists_in_time(Currency:symbol, Time_period:symbol)\nCurrency_exists_in_time(\"Pound sterling\", \"modern times\").\nCurrency_exists_in_time(\"Roman currency\", \"ancient Rome\").\n.decl Lived_in_time_period(Person:symbol, Time_period:symbol)\nLived_in_time_period(\"Emperor Commodus\", \"ancient Rome\").\n.decl Answer()\nAnswer() :- Paid_tribute_in_currency(\"Emperor Commodus\", \"Pound sterling\").\nAnswer() :- Paid_tribute_in_currency(\"Emperor Commodus\", currency), Currency_exists_in_time(currency, time_period1), Currency_exists_in_time(\"Pound sterling\", time_period2), Lived_in_time_period(\"Emperor Commodus\", time_period1), time_period1 = time_period2.\n.output Answer"]}
{"id": 1469, "answer": false, "completion": ".decl Is_slick_when_cooked(Food:symbol)\nIs_slick_when_cooked(\"spaghetti\").\n.decl Answer()\nAnswer() :- Is_slick_when_cooked(\"spaghetti\").\n.output Answer", "completions": [".decl Is_slick_when_cooked(Food:symbol)\nIs_slick_when_cooked(\"spaghetti\").\n.decl Answer()\nAnswer() :- Is_slick_when_cooked(\"spaghetti\").\n.output Answer"]}
{"id": 1470, "answer": false, "completion": ".decl Revolution(Revolution:symbol, Location:symbol, Deaths:float)\nRevolution(\"Carnation Revolution\", \"Portugal\", 4).\nRevolution(\"French Revolution\", \"France\", 40000).\nRevolution(\"Russian Revolution\", \"Russia\", 1700000).\nRevolution(\"Hungarian Revolution\", \"Hungary\", 2500).\n.decl Is_in_Europe(Country:symbol)\nIs_in_Europe(\"Portugal\").\nIs_in_Europe(\"France\").\nIs_in_Europe(\"Russia\").\nIs_in_Europe(\"Hungary\").\n.decl Answer()\nAnswer() :- Revolution(\"Carnation Revolution\", country, deaths1), Is_in_Europe(country), !Revolution(revolution2, country2, deaths2), Is_in_Europe(country2), deaths1 < deaths2.\n.output Answer", "completions": [".decl Revolution(Revolution:symbol, Location:symbol, Deaths:float)\nRevolution(\"Carnation Revolution\", \"Portugal\", 4).\nRevolution(\"French Revolution\", \"France\", 40000).\nRevolution(\"Russian Revolution\", \"Russia\", 1700000).\nRevolution(\"Hungarian Revolution\", \"Hungary\", 2500).\n.decl Is_in_Europe(Country:symbol)\nIs_in_Europe(\"Portugal\").\nIs_in_Europe(\"France\").\nIs_in_Europe(\"Russia\").\nIs_in_Europe(\"Hungary\").\n.decl Answer()\nAnswer() :- Revolution(\"Carnation Revolution\", country, deaths1), Is_in_Europe(country), !Revolution(revolution2, country2, deaths2), Is_in_Europe(country2), deaths1 < deaths2.\n.output Answer"]}
{"id": 1471, "answer": true, "completion": ".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"Triton\", -235).\n.decl Provides_insulation(Clothing:symbol, Insulation:float)\nProvides_insulation(\"zoot suit\", 0.5).\n.decl Hypothermia_threshold(Temperature:float)\nHypothermia_threshold(-35).\n.decl Answer()\nAnswer() :- Has_temperature(\"Triton\", temp1), Provides_insulation(\"zoot suit\", insulation), Hypothermia_threshold(threshold), temp1 + insulation < threshold.\n.output Answer", "completions": [".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"Triton\", -235).\n.decl Provides_insulation(Clothing:symbol, Insulation:float)\nProvides_insulation(\"zoot suit\", 0.5).\n.decl Hypothermia_threshold(Temperature:float)\nHypothermia_threshold(-35).\n.decl Answer()\nAnswer() :- Has_temperature(\"Triton\", temp1), Provides_insulation(\"zoot suit\", insulation), Hypothermia_threshold(threshold), temp1 + insulation < threshold.\n.output Answer"]}
{"id": 1472, "answer": true, "completion": ".decl Is_character(Character:symbol, Location:symbol)\nIs_character(\"Bugs Bunny\", \"Six Flags\").\n.decl Is_attraction(Attraction:symbol, Location:symbol)\nIs_attraction(\"Space Mountain\", \"Disneyland\").\n.decl Answer()\nAnswer() :- Is_character(\"Bugs Bunny\", location1), Is_attraction(\"Space Mountain\", location2), location1 = location2.\n.output Answer", "completions": [".decl Is_character(Character:symbol, Location:symbol)\nIs_character(\"Bugs Bunny\", \"Six Flags\").\n.decl Is_attraction(Attraction:symbol, Location:symbol)\nIs_attraction(\"Space Mountain\", \"Disneyland\").\n.decl Answer()\nAnswer() :- Is_character(\"Bugs Bunny\", location1), Is_attraction(\"Space Mountain\", location2), location1 = location2.\n.output Answer"]}
{"id": 1473, "answer": true, "completion": ".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"brew beer\", 21).\n.decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"September\", 30).\n.decl Answer()\nAnswer() :- Lasts_n_days(\"brew beer\", n_days1), Has_n_days(\"September\", n_days2), n_days1 <= n_days2.\n.output Answer", "completions": [".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"brew beer\", 21).\n.decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"September\", 30).\n.decl Answer()\nAnswer() :- Lasts_n_days(\"brew beer\", n_days1), Has_n_days(\"September\", n_days2), n_days1 <= n_days2.\n.output Answer"]}
{"id": 1474, "answer": false, "completion": ".decl Performs_solo(Entity:symbol)\nPerforms_solo(\"musician\").\n.decl Is_entity(Entity:symbol)\nIs_entity(\"Department of Defense\").\n.decl Answer()\nAnswer() :- Performs_solo(entity), Is_entity(\"Department of Defense\"), entity = \"Department of Defense\".\n.output Answer", "completions": [".decl Performs_solo(Entity:symbol)\nPerforms_solo(\"musician\").\n.decl Is_entity(Entity:symbol)\nIs_entity(\"Department of Defense\").\n.decl Answer()\nAnswer() :- Performs_solo(entity), Is_entity(\"Department of Defense\"), entity = \"Department of Defense\".\n.output Answer"]}
{"id": 1475, "answer": false, "completion": ".decl Contains_ingredient(Food:symbol, Ingredient:symbol)\nContains_ingredient(\"Monoamine Oxidase candy bar\", \"Monoamine Oxidase\").\n.decl Has_effect(Ingredient:symbol, Effect:symbol)\nHas_effect(\"Monoamine Oxidase\", \"cheer up\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"depressed friend\", \"depression\").\n.decl Can_help(Effect:symbol, Condition:symbol)\nCan_help(\"cheer up\", \"depression\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"Monoamine Oxidase candy bar\", ingredient), Has_effect(ingredient, effect), Has_condition(\"depressed friend\", condition), Can_help(effect, condition).\n.output Answer", "completions": [".decl Contains_ingredient(Food:symbol, Ingredient:symbol)\nContains_ingredient(\"Monoamine Oxidase candy bar\", \"Monoamine Oxidase\").\n.decl Has_effect(Ingredient:symbol, Effect:symbol)\nHas_effect(\"Monoamine Oxidase\", \"cheer up\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"depressed friend\", \"depression\").\n.decl Can_help(Effect:symbol, Condition:symbol)\nCan_help(\"cheer up\", \"depression\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"Monoamine Oxidase candy bar\", ingredient), Has_effect(ingredient, effect), Has_condition(\"depressed friend\", condition), Can_help(effect, condition).\n.output Answer"]}
{"id": 1476, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Elizabeth I of England\", 1533).\n.decl Invented_in_year(Material:symbol, Year:float)\nInvented_in_year(\"viscose fiber\", 1891).\n.decl Owns(Person:symbol, Object:symbol)\n.decl Answer()\nAnswer() :- Owns(\"Elizabeth I of England\", \"viscose fiber\").\nAnswer() :- Born_in_year(\"Elizabeth I of England\", birth_year), Invented_in_year(\"viscose fiber\", invention_year), birth_year < invention_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Elizabeth I of England\", 1533).\n.decl Invented_in_year(Material:symbol, Year:float)\nInvented_in_year(\"viscose fiber\", 1891).\n.decl Owns(Person:symbol, Object:symbol)\n.decl Answer()\nAnswer() :- Owns(\"Elizabeth I of England\", \"viscose fiber\").\nAnswer() :- Born_in_year(\"Elizabeth I of England\", birth_year), Invented_in_year(\"viscose fiber\", invention_year), birth_year < invention_year.\n.output Answer"]}
{"id": 1477, "answer": true, "completion": ".decl Used_in_time_period(Object:symbol, Time_period:symbol)\nUsed_in_time_period(\"dynamite\", \"19th century\").\n.decl Time_period(Time_period:symbol, Start_year:float, End_year:float)\nTime_period(\"Middle Ages\", 500, 1500).\n.decl Answer()\nAnswer() :- Used_in_time_period(\"dynamite\", time_period), Time_period(time_period, start_year, end_year), start_year >= 500, end_year <= 1500.\n.output Answer", "completions": [".decl Used_in_time_period(Object:symbol, Time_period:symbol)\nUsed_in_time_period(\"dynamite\", \"19th century\").\n.decl Time_period(Time_period:symbol, Start_year:float, End_year:float)\nTime_period(\"Middle Ages\", 500, 1500).\n.decl Answer()\nAnswer() :- Used_in_time_period(\"dynamite\", time_period), Time_period(time_period, start_year, end_year), start_year >= 500, end_year <= 1500.\n.output Answer"]}
{"id": 1478, "answer": false, "completion": ".decl Name_origin(Object:symbol, Origin:symbol)\nName_origin(\"Europa\", \"Greek mythology\").\nName_origin(\"Amunet\", \"Egyptian mythology\").\n.decl Answer()\nAnswer() :- Name_origin(\"Europa\", origin1), Name_origin(\"Amunet\", origin2), origin1 = origin2.\n.output Answer", "completions": [".decl Name_origin(Object:symbol, Origin:symbol)\nName_origin(\"Europa\", \"Greek mythology\").\nName_origin(\"Amunet\", \"Egyptian mythology\").\n.decl Answer()\nAnswer() :- Name_origin(\"Europa\", origin1), Name_origin(\"Amunet\", origin2), origin1 = origin2.\n.output Answer"]}
{"id": 1479, "answer": true, "completion": ".decl Incubates(Animal:symbol)\nIncubates(\"bird\").\nIncubates(\"reptile\").\n.decl Has_pouch(Animal:symbol)\nHas_pouch(\"kangaroo\").\n.decl Answer()\nAnswer() :- Incubates(\"kangaroo\").\nAnswer() :- Has_pouch(\"kangaroo\"), !Incubates(\"kangaroo\").\n.output Answer", "completions": [".decl Incubates(Animal:symbol)\nIncubates(\"bird\").\nIncubates(\"reptile\").\n.decl Has_pouch(Animal:symbol)\nHas_pouch(\"kangaroo\").\n.decl Answer()\nAnswer() :- Incubates(\"kangaroo\").\nAnswer() :- Has_pouch(\"kangaroo\"), !Incubates(\"kangaroo\").\n.output Answer"]}
{"id": 1480, "answer": true, "completion": ".decl Has_population(Location:symbol, Population:float)\nHas_population(\"Los Angeles County\", 10000000).\n.decl Has_capacity(Heaven:symbol, Capacity:float)\nHas_capacity(\"Jehovah Witnesses's heaven\", 144000).\n.decl Answer()\nAnswer() :- Has_population(\"Los Angeles County\", population), Has_capacity(\"Jehovah Witnesses's heaven\", capacity), population <= capacity.\n.output Answer", "completions": [".decl Has_population(Location:symbol, Population:float)\nHas_population(\"Los Angeles County\", 10000000).\n.decl Has_capacity(Heaven:symbol, Capacity:float)\nHas_capacity(\"Jehovah Witnesses's heaven\", 144000).\n.decl Answer()\nAnswer() :- Has_population(\"Los Angeles County\", population), Has_capacity(\"Jehovah Witnesses's heaven\", capacity), population <= capacity.\n.output Answer"]}
{"id": 1481, "answer": true, "completion": ".decl Smokes_Brand(Person:symbol, Brand:symbol)\nSmokes_Brand(\"person1\", \"Djarum\").\n.decl Brand_Contains(Brand:symbol, Ingredient:symbol)\nBrand_Contains(\"Djarum\", \"cloves\").\n.decl Likes_Ingredient(Person:symbol, Ingredient:symbol)\nLikes_Ingredient(\"person1\", \"cloves\").\n.decl Answer()\nAnswer() :- Smokes_Brand(person, \"Djarum\"), Brand_Contains(\"Djarum\", ingredient), Likes_Ingredient(person, ingredient).\n.output Answer", "completions": [".decl Smokes_Brand(Person:symbol, Brand:symbol)\nSmokes_Brand(\"person1\", \"Djarum\").\n.decl Brand_Contains(Brand:symbol, Ingredient:symbol)\nBrand_Contains(\"Djarum\", \"cloves\").\n.decl Likes_Ingredient(Person:symbol, Ingredient:symbol)\nLikes_Ingredient(\"person1\", \"cloves\").\n.decl Answer()\nAnswer() :- Smokes_Brand(person, \"Djarum\"), Brand_Contains(\"Djarum\", ingredient), Likes_Ingredient(person, ingredient).\n.output Answer"]}
{"id": 1482, "answer": false, "completion": ".decl Used_for(Object:symbol, Purpose:symbol)\nUsed_for(\"Douglas fir\", \"construction\").\nUsed_for(\"Douglas fir\", \"paper\").\n.decl Fight_wars(Purpose:symbol)\nFight_wars(\"weapons\").\nFight_wars(\"vehicles\").\nFight_wars(\"strategy\").\n.decl Answer()\nAnswer() :- Used_for(\"Douglas fir\", purpose), Fight_wars(purpose).\n.output Answer", "completions": [".decl Used_for(Object:symbol, Purpose:symbol)\nUsed_for(\"Douglas fir\", \"construction\").\nUsed_for(\"Douglas fir\", \"paper\").\n.decl Fight_wars(Purpose:symbol)\nFight_wars(\"weapons\").\nFight_wars(\"vehicles\").\nFight_wars(\"strategy\").\n.decl Answer()\nAnswer() :- Used_for(\"Douglas fir\", purpose), Fight_wars(purpose).\n.output Answer"]}
{"id": 1483, "answer": true, "completion": ".decl Found_in(Animal:symbol, Location:symbol)\nFound_in(\"goat\", \"mountains\").\nFound_in(\"goat\", \"grasslands\").\nFound_in(\"goat\", \"farms\").\n.decl Answer()\nAnswer() :- Found_in(\"goat\", \"abyssal plains\").\n.output Answer", "completions": [".decl Found_in(Animal:symbol, Location:symbol)\nFound_in(\"goat\", \"mountains\").\nFound_in(\"goat\", \"grasslands\").\nFound_in(\"goat\", \"farms\").\n.decl Answer()\nAnswer() :- Found_in(\"goat\", \"abyssal plains\").\n.output Answer"]}
{"id": 1484, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"penguin\", \"Antarctica\").\n.decl Is_in(Location_A:symbol, Location_B:symbol)\nIs_in(\"Miami\", \"Florida\").\n.decl Answer()\nAnswer() :- Lives_in(\"penguin\", location1), Is_in(\"Miami\", location2), location1 = location2.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"penguin\", \"Antarctica\").\n.decl Is_in(Location_A:symbol, Location_B:symbol)\nIs_in(\"Miami\", \"Florida\").\n.decl Answer()\nAnswer() :- Lives_in(\"penguin\", location1), Is_in(\"Miami\", location2), location1 = location2.\n.output Answer"]}
{"id": 1485, "answer": true, "completion": ".decl Is_student_of(Student:symbol, Teacher:symbol)\nIs_student_of(\"Al-Farabi\", \"Al-Farabi's teacher\").\nIs_student_of(\"Al-Farabi's teacher\", \"Great Sheikh\").\n.decl Answer()\nAnswer() :- Is_student_of(\"Al-Farabi\", \"Great Sheikh\").\nAnswer() :- Is_student_of(\"Al-Farabi\", teacher), Is_student_of(teacher, \"Great Sheikh\").\n.output Answer", "completions": [".decl Is_student_of(Student:symbol, Teacher:symbol)\nIs_student_of(\"Al-Farabi\", \"Al-Farabi's teacher\").\nIs_student_of(\"Al-Farabi's teacher\", \"Great Sheikh\").\n.decl Answer()\nAnswer() :- Is_student_of(\"Al-Farabi\", \"Great Sheikh\").\nAnswer() :- Is_student_of(\"Al-Farabi\", teacher), Is_student_of(teacher, \"Great Sheikh\").\n.output Answer"]}
{"id": 1486, "answer": false, "completion": ".decl Ruler(Person:symbol, Place:symbol)\nRuler(\"Richard III\", \"England\").\n.decl Answer()\nAnswer() :- Ruler(\"Richard III\", \"Adelaide\").\n.output Answer", "completions": [".decl Ruler(Person:symbol, Place:symbol)\nRuler(\"Richard III\", \"England\").\n.decl Answer()\nAnswer() :- Ruler(\"Richard III\", \"Adelaide\").\n.output Answer"]}
{"id": 1487, "answer": true, "completion": ".decl Avoids(Person:symbol, Place:symbol)\nAvoids(\"Ronda Rousey\", \"BBQ restaurants\").\n.decl Answer()\nAnswer() :- Avoids(\"Ronda Rousey\", \"BBQ restaurants\").\n.output Answer", "completions": [".decl Avoids(Person:symbol, Place:symbol)\nAvoids(\"Ronda Rousey\", \"BBQ restaurants\").\n.decl Answer()\nAnswer() :- Avoids(\"Ronda Rousey\", \"BBQ restaurants\").\n.output Answer"]}
{"id": 1488, "answer": true, "completion": ".decl Drinks(Person:symbol, Beverage:symbol, Cream:bool)\nDrinks(\"Kylie Jenner\", \"coffee\", false).\n.decl Answer()\nAnswer() :- Drinks(\"Kylie Jenner\", \"coffee\", false).\n.output Answer", "completions": [".decl Drinks(Person:symbol, Beverage:symbol, Cream:bool)\nDrinks(\"Kylie Jenner\", \"coffee\", false).\n.decl Answer()\nAnswer() :- Drinks(\"Kylie Jenner\", \"coffee\", false).\n.output Answer"]}
{"id": 1489, "answer": true, "completion": ".decl Has_range(Vehicle:symbol, Range:float)\nHas_range(\"electric car\", 250).\n.decl Has_distance(Event:symbol, Distance:float)\nHas_distance(\"Daytona 500\", 500).\n.decl Answer()\nAnswer() :- Has_range(\"electric car\", range), Has_distance(\"Daytona 500\", distance), range < distance.\n.output Answer", "completions": [".decl Has_range(Vehicle:symbol, Range:float)\nHas_range(\"electric car\", 250).\n.decl Has_distance(Event:symbol, Distance:float)\nHas_distance(\"Daytona 500\", 500).\n.decl Answer()\nAnswer() :- Has_range(\"electric car\", range), Has_distance(\"Daytona 500\", distance), range < distance.\n.output Answer"]}
{"id": 1490, "answer": false, "completion": ".decl Fed_on(Food:symbol, Animal:symbol)\nFed_on(\"grass\", \"cow\").\n.decl Tastes_like(Taste:symbol, Animal:symbol)\nTastes_like(\"wild game\", \"grass-fed cow\").\n.decl Answer()\nAnswer() :- Fed_on(\"grass\", \"cow\"), Tastes_like(\"wild game\", \"grass-fed cow\").\n.output Answer", "completions": [".decl Fed_on(Food:symbol, Animal:symbol)\nFed_on(\"grass\", \"cow\").\n.decl Tastes_like(Taste:symbol, Animal:symbol)\nTastes_like(\"wild game\", \"grass-fed cow\").\n.decl Answer()\nAnswer() :- Fed_on(\"grass\", \"cow\"), Tastes_like(\"wild game\", \"grass-fed cow\").\n.output Answer"]}
{"id": 1491, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"King Leonidas army\", 300).\nHas_n_members(\"Mozart compositions\", 600).\n.decl Answer()\nAnswer() :- Has_n_members(\"King Leonidas army\", n_members1), Has_n_members(\"Mozart compositions\", n_members2), n_members2 > n_members1.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"King Leonidas army\", 300).\nHas_n_members(\"Mozart compositions\", 600).\n.decl Answer()\nAnswer() :- Has_n_members(\"King Leonidas army\", n_members1), Has_n_members(\"Mozart compositions\", n_members2), n_members2 > n_members1.\n.output Answer"]}
{"id": 1492, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Christopher Walken\", 1943).\n.decl Enlistment_age_range(Organization:symbol, Min_age:float, Max_age:float)\nEnlistment_age_range(\"United States Marine Corps\", 17, 28).\n.decl Current_year(Year:float)\nCurrent_year(2022).\n.decl Answer()\nAnswer() :- Born_in_year(\"Christopher Walken\", birth_year), Enlistment_age_range(\"United States Marine Corps\", min_age, max_age), Current_year(current_year), current_age = current_year - birth_year, current_age >= min_age, current_age <= max_age.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Christopher Walken\", 1943).\n.decl Enlistment_age_range(Organization:symbol, Min_age:float, Max_age:float)\nEnlistment_age_range(\"United States Marine Corps\", 17, 28).\n.decl Current_year(Year:float)\nCurrent_year(2022).\n.decl Answer()\nAnswer() :- Born_in_year(\"Christopher Walken\", birth_year), Enlistment_age_range(\"United States Marine Corps\", min_age, max_age), Current_year(current_year), current_age = current_year - birth_year, current_age >= min_age, current_age <= max_age.\n.output Answer"]}
{"id": 1493, "answer": false, "completion": ".decl Causes_problem(Food:symbol, Condition:symbol)\nCauses_problem(\"kola nuts\", \"colitis\").\n.decl Answer()\nAnswer() :- Causes_problem(\"kola nuts\", \"colitis\").\n.output Answer", "completions": [".decl Causes_problem(Food:symbol, Condition:symbol)\nCauses_problem(\"kola nuts\", \"colitis\").\n.decl Answer()\nAnswer() :- Causes_problem(\"kola nuts\", \"colitis\").\n.output Answer"]}
{"id": 1494, "answer": false, "completion": ".decl Is_subject_of_fake_news(Person:symbol)\nIs_subject_of_fake_news(\"Jamie Lee Curtis\").\n.decl Answer()\nAnswer() :- Is_subject_of_fake_news(\"Jamie Lee Curtis\").\n.output Answer", "completions": [".decl Is_subject_of_fake_news(Person:symbol)\nIs_subject_of_fake_news(\"Jamie Lee Curtis\").\n.decl Answer()\nAnswer() :- Is_subject_of_fake_news(\"Jamie Lee Curtis\").\n.output Answer"]}
{"id": 1495, "answer": true, "completion": ".decl Has_sequence_number(Game:symbol, Sequence_number:float)\nHas_sequence_number(\"Final Fantasy VI\", 6).\n.decl Total_games_in_franchise(Franchise:symbol, Total_games:float)\nTotal_games_in_franchise(\"Final Fantasy\", 16).\n.decl Answer()\nAnswer() :- Has_sequence_number(\"Final Fantasy VI\", sequence_number), Total_games_in_franchise(\"Final Fantasy\", total_games), sequence_number <= total_games / 2.\n.output Answer", "completions": [".decl Has_sequence_number(Game:symbol, Sequence_number:float)\nHas_sequence_number(\"Final Fantasy VI\", 6).\n.decl Total_games_in_franchise(Franchise:symbol, Total_games:float)\nTotal_games_in_franchise(\"Final Fantasy\", 16).\n.decl Answer()\nAnswer() :- Has_sequence_number(\"Final Fantasy VI\", sequence_number), Total_games_in_franchise(\"Final Fantasy\", total_games), sequence_number <= total_games / 2.\n.output Answer"]}
{"id": 1496, "answer": true, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"lumber\").\nSells(\"Home Depot\", \"tools\").\nSells(\"Home Depot\", \"paint\").\nSells(\"Home Depot\", \"plumbing supplies\").\nSells(\"Home Depot\", \"electrical supplies\").\nSells(\"Home Depot\", \"hardware\").\nSells(\"Home Depot\", \"appliances\").\nSells(\"Home Depot\", \"flooring\").\nSells(\"Home Depot\", \"lighting\").\nSells(\"Home Depot\", \"outdoor living\").\nSells(\"Home Depot\", \"windows and doors\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"spinal cord\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"lumber\").\nSells(\"Home Depot\", \"tools\").\nSells(\"Home Depot\", \"paint\").\nSells(\"Home Depot\", \"plumbing supplies\").\nSells(\"Home Depot\", \"electrical supplies\").\nSells(\"Home Depot\", \"hardware\").\nSells(\"Home Depot\", \"appliances\").\nSells(\"Home Depot\", \"flooring\").\nSells(\"Home Depot\", \"lighting\").\nSells(\"Home Depot\", \"outdoor living\").\nSells(\"Home Depot\", \"windows and doors\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"spinal cord\").\n.output Answer"]}
{"id": 1497, "answer": true, "completion": ".decl Held_in(Event:symbol, Location:symbol)\nHeld_in(\"MLB World Series\", \"Newcastle, New South Wales\").\n.decl Answer()\nAnswer() :- Held_in(\"MLB World Series\", \"Newcastle, New South Wales\").\n.output Answer", "completions": [".decl Held_in(Event:symbol, Location:symbol)\nHeld_in(\"MLB World Series\", \"Newcastle, New South Wales\").\n.decl Answer()\nAnswer() :- Held_in(\"MLB World Series\", \"Newcastle, New South Wales\").\n.output Answer"]}
{"id": 1498, "answer": true, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Rhode Island\", 3140).\nHas_area(\"Bohai Sea\", 77800).\n.decl Has_depth(Object:symbol, Depth:float)\nHas_depth(\"Bohai Sea\", 86).\n.decl Answer()\nAnswer() :- Has_area(\"Rhode Island\", area1), Has_area(\"Bohai Sea\", area2), Has_depth(\"Bohai Sea\", depth), area1 <= area2 * depth.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Rhode Island\", 3140).\nHas_area(\"Bohai Sea\", 77800).\n.decl Has_depth(Object:symbol, Depth:float)\nHas_depth(\"Bohai Sea\", 86).\n.decl Answer()\nAnswer() :- Has_area(\"Rhode Island\", area1), Has_area(\"Bohai Sea\", area2), Has_depth(\"Bohai Sea\", depth), area1 <= area2 * depth.\n.output Answer"]}
{"id": 1499, "answer": true, "completion": ".decl Influences(Genre:symbol, Substance:symbol)\nInfluences(\"rap music\", \"cannabis\").\n.decl Answer()\nAnswer() :- Influences(\"rap music\", \"cannabis\").\n.output Answer", "completions": [".decl Influences(Genre:symbol, Substance:symbol)\nInfluences(\"rap music\", \"cannabis\").\n.decl Answer()\nAnswer() :- Influences(\"rap music\", \"cannabis\").\n.output Answer"]}
{"id": 1500, "answer": true, "completion": ".decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\n.decl Table_tennis_related(Number:float)\nTable_tennis_related(2). % Number of players in singles\nTable_tennis_related(4). % Number of players in doubles\nTable_tennis_related(11). % Points needed to win a game\n.decl Answer()\nAnswer() :- Table_tennis_related(number), Is_prime(number).\n.output Answer", "completions": [".decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\n.decl Table_tennis_related(Number:float)\nTable_tennis_related(2). % Number of players in singles\nTable_tennis_related(4). % Number of players in doubles\nTable_tennis_related(11). % Points needed to win a game\n.decl Answer()\nAnswer() :- Table_tennis_related(number), Is_prime(number).\n.output Answer"]}
{"id": 1501, "answer": true, "completion": ".decl Colors_on_package(Package:symbol, Color:symbol)\nColors_on_package(\"Marlboro\", \"red\").\nColors_on_package(\"Marlboro\", \"white\").\nColors_on_package(\"Marlboro\", \"black\").\nColors_on_package(\"Marlboro\", \"gold\").\n\n.decl Colors_on_flag(Flag:symbol, Color:symbol)\nColors_on_flag(\"French flag\", \"blue\").\nColors_on_flag(\"French flag\", \"white\").\nColors_on_flag(\"French flag\", \"red\").\n\n.decl Answer()\nAnswer() :- Colors_on_package(\"Marlboro\", color), Colors_on_flag(\"French flag\", color).\n.output Answer", "completions": [".decl Colors_on_package(Package:symbol, Color:symbol)\nColors_on_package(\"Marlboro\", \"red\").\nColors_on_package(\"Marlboro\", \"white\").\nColors_on_package(\"Marlboro\", \"black\").\nColors_on_package(\"Marlboro\", \"gold\").\n\n.decl Colors_on_flag(Flag:symbol, Color:symbol)\nColors_on_flag(\"French flag\", \"blue\").\nColors_on_flag(\"French flag\", \"white\").\nColors_on_flag(\"French flag\", \"red\").\n\n.decl Answer()\nAnswer() :- Colors_on_package(\"Marlboro\", color), Colors_on_flag(\"French flag\", color).\n.output Answer"]}
{"id": 1502, "answer": true, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Jesus\", \"Apostles\").\n.decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Apostles\", \"Aramaic\").\nSpeaks(\"Apostles\", \"Greek\").\nSpeaks(\"Apostles\", \"Hebrew\").\n.decl Answer()\nAnswer() :- Knows(\"Jesus\", person), Speaks(person, \"Estonian\").\n.output Answer", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Jesus\", \"Apostles\").\n.decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Apostles\", \"Aramaic\").\nSpeaks(\"Apostles\", \"Greek\").\nSpeaks(\"Apostles\", \"Hebrew\").\n.decl Answer()\nAnswer() :- Knows(\"Jesus\", person), Speaks(person, \"Estonian\").\n.output Answer"]}
{"id": 1503, "answer": false, "completion": ".decl Studied(Subject:symbol, Person:symbol)\nStudied(\"railroad engineering\", \"Jesus\").\n.decl Answer()\nAnswer() :- Studied(\"railroad engineering\", \"Jesus\").\n.output Answer", "completions": [".decl Studied(Subject:symbol, Person:symbol)\nStudied(\"railroad engineering\", \"Jesus\").\n.decl Answer()\nAnswer() :- Studied(\"railroad engineering\", \"Jesus\").\n.output Answer"]}
{"id": 1504, "answer": true, "completion": ".decl Copies_text_from(Document_A:symbol, Document_B:symbol)\nCopies_text_from(\"Constitution of the Philippines\", \"United States Constitution\").\n.decl Answer()\nAnswer() :- Copies_text_from(\"Constitution of the Philippines\", \"British constitution\").\n.output Answer", "completions": [".decl Copies_text_from(Document_A:symbol, Document_B:symbol)\nCopies_text_from(\"Constitution of the Philippines\", \"United States Constitution\").\n.decl Answer()\nAnswer() :- Copies_text_from(\"Constitution of the Philippines\", \"British constitution\").\n.output Answer"]}
{"id": 1505, "answer": true, "completion": ".decl Famous_Apollo(Name:symbol)\nFamous_Apollo(\"Apollo Creed\").\nFamous_Apollo(\"Apollo 11\").\nFamous_Apollo(\"Apollo God of Sun\").\n\n.decl Famous_DArtagnan(Name:symbol)\nFamous_DArtagnan(\"D'Artagnan from The Three Musketeers\").\nFamous_DArtagnan(\"D'Artagnan from The Man in the Iron Mask\").\n\n.decl Defeats(Apollo:symbol, DArtagnan:symbol)\nDefeats(\"Apollo Creed\", \"D'Artagnan from The Three Musketeers\").\nDefeats(\"Apollo 11\", \"D'Artagnan from The Man in the Iron Mask\").\nDefeats(\"Apollo God of Sun\", \"D'Artagnan from The Three Musketeers\").\nDefeats(\"Apollo God of Sun\", \"D'Artagnan from The Man in the Iron Mask\").\n\n.decl Answer()\nAnswer() :- Famous_Apollo(apollo), Famous_DArtagnan(dartagnan), !Defeats(apollo, dartagnan).\n.output Answer", "completions": [".decl Famous_Apollo(Name:symbol)\nFamous_Apollo(\"Apollo Creed\").\nFamous_Apollo(\"Apollo 11\").\nFamous_Apollo(\"Apollo God of Sun\").\n\n.decl Famous_DArtagnan(Name:symbol)\nFamous_DArtagnan(\"D'Artagnan from The Three Musketeers\").\nFamous_DArtagnan(\"D'Artagnan from The Man in the Iron Mask\").\n\n.decl Defeats(Apollo:symbol, DArtagnan:symbol)\nDefeats(\"Apollo Creed\", \"D'Artagnan from The Three Musketeers\").\nDefeats(\"Apollo 11\", \"D'Artagnan from The Man in the Iron Mask\").\nDefeats(\"Apollo God of Sun\", \"D'Artagnan from The Three Musketeers\").\nDefeats(\"Apollo God of Sun\", \"D'Artagnan from The Man in the Iron Mask\").\n\n.decl Answer()\nAnswer() :- Famous_Apollo(apollo), Famous_DArtagnan(dartagnan), !Defeats(apollo, dartagnan).\n.output Answer"]}
{"id": 1506, "answer": true, "completion": ".decl Works_with(Lapidary:symbol, Item:symbol)\nWorks_with(\"lapidary\", \"gemstones\").\n.decl Studies(Geologist:symbol, Item:symbol)\nStudies(\"geologist\", \"rocks\").\nStudies(\"geologist\", \"minerals\").\nStudies(\"geologist\", \"gemstones\").\n.decl Answer()\nAnswer() :- Works_with(\"lapidary\", item), Studies(\"geologist\", item).\n.output Answer", "completions": [".decl Works_with(Lapidary:symbol, Item:symbol)\nWorks_with(\"lapidary\", \"gemstones\").\n.decl Studies(Geologist:symbol, Item:symbol)\nStudies(\"geologist\", \"rocks\").\nStudies(\"geologist\", \"minerals\").\nStudies(\"geologist\", \"gemstones\").\n.decl Answer()\nAnswer() :- Works_with(\"lapidary\", item), Studies(\"geologist\", item).\n.output Answer"]}
{"id": 1507, "answer": true, "completion": ".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Asian black bear\", \"black\").\nHas_color(\"Asian black bear\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"Asian black bear\", color1), Has_color(\"Asian black bear\", color2), color1 != color2.\n.output Answer", "completions": [".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Asian black bear\", \"black\").\nHas_color(\"Asian black bear\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"Asian black bear\", color1), Has_color(\"Asian black bear\", color2), color1 != color2.\n.output Answer"]}
{"id": 1508, "answer": false, "completion": ".decl Enjoys_life(Animal:symbol, Situation:symbol)\nEnjoys_life(\"sea turtle\", \"quarantine\").\n.decl Answer()\nAnswer() :- Enjoys_life(\"sea turtle\", \"quarantine\").\n.output Answer", "completions": [".decl Enjoys_life(Animal:symbol, Situation:symbol)\nEnjoys_life(\"sea turtle\", \"quarantine\").\n.decl Answer()\nAnswer() :- Enjoys_life(\"sea turtle\", \"quarantine\").\n.output Answer"]}
{"id": 1509, "answer": true, "completion": ".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Edward Snowden\", 145).\n.decl MENSA_requirement(IQ:float)\nMENSA_requirement(130).\n.decl Answer()\nAnswer() :- Has_IQ(\"Edward Snowden\", iq), MENSA_requirement(min_iq), iq >= min_iq.\n.output Answer", "completions": [".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Edward Snowden\", 145).\n.decl MENSA_requirement(IQ:float)\nMENSA_requirement(130).\n.decl Answer()\nAnswer() :- Has_IQ(\"Edward Snowden\", iq), MENSA_requirement(min_iq), iq >= min_iq.\n.output Answer"]}
{"id": 1510, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Leila George\", 1.72).\n.decl Model_height_requirement(Min_height:float, Max_height:float)\nModel_height_requirement(1.75, 1.9).\n.decl Answer()\nAnswer() :- Has_height(\"Leila George\", height), Model_height_requirement(min_height, max_height), height < min_height.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Leila George\", 1.72).\n.decl Model_height_requirement(Min_height:float, Max_height:float)\nModel_height_requirement(1.75, 1.9).\n.decl Answer()\nAnswer() :- Has_height(\"Leila George\", height), Model_height_requirement(min_height, max_height), height < min_height.\n.output Answer"]}
{"id": 1511, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"modern CPU circuit chip\", 0.0001).\nHas_size(\"housekey\", 0.01).\n.decl Answer()\nAnswer() :- Has_size(\"modern CPU circuit chip\", size1), Has_size(\"housekey\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"modern CPU circuit chip\", 0.0001).\nHas_size(\"housekey\", 0.01).\n.decl Answer()\nAnswer() :- Has_size(\"modern CPU circuit chip\", size1), Has_size(\"housekey\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1512, "answer": false, "completion": ".decl Is_member_of_band(Person:symbol, Band:symbol)\nIs_member_of_band(\"Sting\", \"The Police\").\nIs_member_of_band(\"Andy Summers\", \"The Police\").\nIs_member_of_band(\"Stewart Copeland\", \"The Police\").\n.decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Sting\", \"musician\").\nHas_profession(\"Andy Summers\", \"musician\").\nHas_profession(\"Stewart Copeland\", \"musician\").\n.decl Can_perform_lawful_arrest(Profession:symbol)\nCan_perform_lawful_arrest(\"police officer\").\n.decl Answer()\nAnswer() :- Is_member_of_band(person, \"The Police\"), Has_profession(person, profession), Can_perform_lawful_arrest(profession).\n.output Answer", "completions": [".decl Is_member_of_band(Person:symbol, Band:symbol)\nIs_member_of_band(\"Sting\", \"The Police\").\nIs_member_of_band(\"Andy Summers\", \"The Police\").\nIs_member_of_band(\"Stewart Copeland\", \"The Police\").\n.decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Sting\", \"musician\").\nHas_profession(\"Andy Summers\", \"musician\").\nHas_profession(\"Stewart Copeland\", \"musician\").\n.decl Can_perform_lawful_arrest(Profession:symbol)\nCan_perform_lawful_arrest(\"police officer\").\n.decl Answer()\nAnswer() :- Is_member_of_band(person, \"The Police\"), Has_profession(person, profession), Can_perform_lawful_arrest(profession).\n.output Answer"]}
{"id": 1513, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas Day\", \"winter\").\nHappens_in_time(\"New Year's Day\", \"winter\").\nHappens_in_time(\"Martin Luther King Jr. Day\", \"winter\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"January\", \"winter\").\nIn_season(\"February\", \"winter\").\n.decl Is_American_government_holiday(Event:symbol)\nIs_American_government_holiday(\"Christmas Day\").\nIs_American_government_holiday(\"New Year's Day\").\nIs_American_government_holiday(\"Martin Luther King Jr. Day\").\n.decl Answer()\nAnswer() :- Happens_in_time(event, \"winter\"), Is_American_government_holiday(event), Happens_in_time(event2, \"winter\"), Is_American_government_holiday(event2), event != event2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas Day\", \"winter\").\nHappens_in_time(\"New Year's Day\", \"winter\").\nHappens_in_time(\"Martin Luther King Jr. Day\", \"winter\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"January\", \"winter\").\nIn_season(\"February\", \"winter\").\n.decl Is_American_government_holiday(Event:symbol)\nIs_American_government_holiday(\"Christmas Day\").\nIs_American_government_holiday(\"New Year's Day\").\nIs_American_government_holiday(\"Martin Luther King Jr. Day\").\n.decl Answer()\nAnswer() :- Happens_in_time(event, \"winter\"), Is_American_government_holiday(event), Happens_in_time(event2, \"winter\"), Is_American_government_holiday(event2), event != event2.\n.output Answer"]}
{"id": 1514, "answer": true, "completion": ".decl Is_largest_city(City:symbol, State:symbol)\nIs_largest_city(\"Albuquerque\", \"New Mexico\").\n.decl Has_alternate_name(City:symbol, Alternate_name:symbol)\nHas_alternate_name(\"Albuquerque\", \"Yootó\").\n.decl Answer()\nAnswer() :- Is_largest_city(city, \"New Mexico\"), Has_alternate_name(city, \"Yootó\").\n.output Answer", "completions": [".decl Is_largest_city(City:symbol, State:symbol)\nIs_largest_city(\"Albuquerque\", \"New Mexico\").\n.decl Has_alternate_name(City:symbol, Alternate_name:symbol)\nHas_alternate_name(\"Albuquerque\", \"Yootó\").\n.decl Answer()\nAnswer() :- Is_largest_city(city, \"New Mexico\"), Has_alternate_name(city, \"Yootó\").\n.output Answer"]}
{"id": 1515, "answer": false, "completion": ".decl Is_anthropomorphic(Character:symbol)\nIs_anthropomorphic(\"Sable in Marvel comics\").\n.decl Answer()\nAnswer() :- Is_anthropomorphic(\"Sable in Marvel comics\").\n.output Answer", "completions": [".decl Is_anthropomorphic(Character:symbol)\nIs_anthropomorphic(\"Sable in Marvel comics\").\n.decl Answer()\nAnswer() :- Is_anthropomorphic(\"Sable in Marvel comics\").\n.output Answer"]}
{"id": 1516, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"sesame seed\", 0.3).\nHas_size(\"wood frog egg\", 0.3).\n.decl Answer()\nAnswer() :- Has_size(\"sesame seed\", size1), Has_size(\"wood frog egg\", size2), size1 = size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"sesame seed\", 0.3).\nHas_size(\"wood frog egg\", 0.3).\n.decl Answer()\nAnswer() :- Has_size(\"sesame seed\", size1), Has_size(\"wood frog egg\", size2), size1 = size2.\n.output Answer"]}
{"id": 1517, "answer": true, "completion": ".decl Blooms_in_time(Tree:symbol, Time:symbol)\nBlooms_in_time(\"plum tree\", \"spring\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"November\", \"autumn\").\n.decl Answer()\nAnswer() :- Blooms_in_time(\"plum tree\", season), In_season(\"November\", season2), season != season2.\n.output Answer", "completions": [".decl Blooms_in_time(Tree:symbol, Time:symbol)\nBlooms_in_time(\"plum tree\", \"spring\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"November\", \"autumn\").\n.decl Answer()\nAnswer() :- Blooms_in_time(\"plum tree\", season), In_season(\"November\", season2), season != season2.\n.output Answer"]}
{"id": 1518, "answer": true, "completion": ".decl Has_bite_force(Animal:symbol, Bite_force:float)\nHas_bite_force(\"bull shark\", 1300).\nHas_bite_force(\"crocodile\", 3700).\n.decl Answer()\nAnswer() :- Has_bite_force(\"bull shark\", bite_force1), Has_bite_force(\"crocodile\", bite_force2), bite_force1 > bite_force2.\n.output Answer", "completions": [".decl Has_bite_force(Animal:symbol, Bite_force:float)\nHas_bite_force(\"bull shark\", 1300).\nHas_bite_force(\"crocodile\", 3700).\n.decl Answer()\nAnswer() :- Has_bite_force(\"bull shark\", bite_force1), Has_bite_force(\"crocodile\", bite_force2), bite_force1 > bite_force2.\n.output Answer"]}
{"id": 1519, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Barron Trump\", 2006).\n.decl Lasts_from_to(Event:symbol, Start_year:float, End_year:float)\nLasts_from_to(\"Mexican Revolution\", 1910, 1920).\n.decl Answer()\nAnswer() :- Born_in_year(\"Barron Trump\", birth_year), Lasts_from_to(\"Mexican Revolution\", start_year, end_year), birth_year >= start_year, birth_year <= end_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Barron Trump\", 2006).\n.decl Lasts_from_to(Event:symbol, Start_year:float, End_year:float)\nLasts_from_to(\"Mexican Revolution\", 1910, 1920).\n.decl Answer()\nAnswer() :- Born_in_year(\"Barron Trump\", birth_year), Lasts_from_to(\"Mexican Revolution\", start_year, end_year), birth_year >= start_year, birth_year <= end_year.\n.output Answer"]}
{"id": 1520, "answer": true, "completion": ".decl Has_temperature(State:symbol, Temperature:float)\nHas_temperature(\"New York\", 30).\nHas_temperature(\"Florida\", 70).\n.decl Hypothermia_risk(State:symbol, Risk:float)\nHypothermia_risk(state, temperature) :- Has_temperature(state, temperature), Risk = 100 - temperature.\n.decl Answer()\nAnswer() :- Hypothermia_risk(\"New York\", risk1), Hypothermia_risk(\"Florida\", risk2), risk1 > risk2.\n.output Answer", "completions": [".decl Has_temperature(State:symbol, Temperature:float)\nHas_temperature(\"New York\", 30).\nHas_temperature(\"Florida\", 70).\n.decl Hypothermia_risk(State:symbol, Risk:float)\nHypothermia_risk(state, temperature) :- Has_temperature(state, temperature), Risk = 100 - temperature.\n.decl Answer()\nAnswer() :- Hypothermia_risk(\"New York\", risk1), Hypothermia_risk(\"Florida\", risk2), risk1 > risk2.\n.output Answer"]}
{"id": 1521, "answer": false, "completion": ".decl Can_be_killed(Activity:symbol, Location:symbol)\nCan_be_killed(\"walking\", \"road\").\n.decl Is_at(Object:symbol, Location:symbol)\nIs_at(\"Very Large Telescope\", \"Chile\").\n.decl Answer()\nAnswer() :- Can_be_killed(\"walking\", location), Is_at(\"Very Large Telescope\", location).\n.output Answer", "completions": [".decl Can_be_killed(Activity:symbol, Location:symbol)\nCan_be_killed(\"walking\", \"road\").\n.decl Is_at(Object:symbol, Location:symbol)\nIs_at(\"Very Large Telescope\", \"Chile\").\n.decl Answer()\nAnswer() :- Can_be_killed(\"walking\", location), Is_at(\"Very Large Telescope\", location).\n.output Answer"]}
{"id": 1522, "answer": true, "completion": ".decl Is_organ_transplant_possible(Recipient:symbol, Donor:symbol)\nIs_organ_transplant_possible(\"human\", \"human\").\nIs_organ_transplant_possible(\"animal\", \"animal\").\n.decl Is_type(Object:symbol, Type:symbol)\nIs_type(\"carrot\", \"plant\").\nIs_type(\"human\", \"animal\").\n.decl Answer()\nAnswer() :- Is_type(\"carrot\", type1), Is_type(\"human\", type2), Is_organ_transplant_possible(type1, type2).\nAnswer() :- Is_type(\"carrot\", type1), Is_type(\"animal\", type2), Is_organ_transplant_possible(type1, type2).\n.output Answer", "completions": [".decl Is_organ_transplant_possible(Recipient:symbol, Donor:symbol)\nIs_organ_transplant_possible(\"human\", \"human\").\nIs_organ_transplant_possible(\"animal\", \"animal\").\n.decl Is_type(Object:symbol, Type:symbol)\nIs_type(\"carrot\", \"plant\").\nIs_type(\"human\", \"animal\").\n.decl Answer()\nAnswer() :- Is_type(\"carrot\", type1), Is_type(\"human\", type2), Is_organ_transplant_possible(type1, type2).\nAnswer() :- Is_type(\"carrot\", type1), Is_type(\"animal\", type2), Is_organ_transplant_possible(type1, type2).\n.output Answer"]}
{"id": 1523, "answer": false, "completion": ".decl Has_iteration(Name:symbol, Iteration:float)\nHas_iteration(\"Pope Leo\", 847).\nHas_iteration(\"Ivan the Terrible\", 4).\n.decl Answer()\nAnswer() :- Has_iteration(\"Pope Leo\", iteration1), Has_iteration(\"Ivan the Terrible\", iteration2), iteration1 = iteration2.\n.output Answer", "completions": [".decl Has_iteration(Name:symbol, Iteration:float)\nHas_iteration(\"Pope Leo\", 847).\nHas_iteration(\"Ivan the Terrible\", 4).\n.decl Answer()\nAnswer() :- Has_iteration(\"Pope Leo\", iteration1), Has_iteration(\"Ivan the Terrible\", iteration2), iteration1 = iteration2.\n.output Answer"]}
{"id": 1524, "answer": true, "completion": ".decl Fought_for(Country:symbol, Event:symbol, Group:symbol)\nFought_for(\"England\", \"Glorious Revolution\", \"mercenaries\").\n.decl Answer()\nAnswer() :- Fought_for(\"England\", \"Glorious Revolution\", \"mercenaries\").\n.output Answer", "completions": [".decl Fought_for(Country:symbol, Event:symbol, Group:symbol)\nFought_for(\"England\", \"Glorious Revolution\", \"mercenaries\").\n.decl Answer()\nAnswer() :- Fought_for(\"England\", \"Glorious Revolution\", \"mercenaries\").\n.output Answer"]}
{"id": 1525, "answer": false, "completion": ".decl Involved_in_event(Entity:symbol, Event:symbol)\nInvolved_in_event(\"NASA\", \"lunar landing\").\n.decl Answer()\nAnswer() :- Involved_in_event(\"Amazon\", \"lunar landing\").\n.output Answer", "completions": [".decl Involved_in_event(Entity:symbol, Event:symbol)\nInvolved_in_event(\"NASA\", \"lunar landing\").\n.decl Answer()\nAnswer() :- Involved_in_event(\"Amazon\", \"lunar landing\").\n.output Answer"]}
{"id": 1526, "answer": true, "completion": ".decl Days_to_birthday(Person:symbol, Days:float)\nDays_to_birthday(\"Dean Cain\", 22).\nDays_to_birthday(\"Will Ferrell\", 12).\n.decl Date(Month:symbol, Day:float)\nDate(\"July\", 4).\n.decl Answer()\nAnswer() :- Days_to_birthday(\"Dean Cain\", days1), Days_to_birthday(\"Will Ferrell\", days2), Date(\"July\", 4), days1 < days2.\n.output Answer", "completions": [".decl Days_to_birthday(Person:symbol, Days:float)\nDays_to_birthday(\"Dean Cain\", 22).\nDays_to_birthday(\"Will Ferrell\", 12).\n.decl Date(Month:symbol, Day:float)\nDate(\"July\", 4).\n.decl Answer()\nAnswer() :- Days_to_birthday(\"Dean Cain\", days1), Days_to_birthday(\"Will Ferrell\", days2), Date(\"July\", 4), days1 < days2.\n.output Answer"]}
{"id": 1527, "answer": true, "completion": ".decl Belongs_to_caste(Person:symbol, Caste:symbol)\nBelongs_to_caste(\"person\", \"Iyer\").\n.decl Follows_diet(Caste:symbol, Diet:symbol)\nFollows_diet(\"Iyer\", \"vegetarian\").\n.decl Eats_meat(Diet:symbol)\nEats_meat(\"non-vegetarian\").\n.decl Answer()\nAnswer() :- Belongs_to_caste(person, \"Iyer\"), Follows_diet(\"Iyer\", diet), Eats_meat(diet).\n.output Answer", "completions": [".decl Belongs_to_caste(Person:symbol, Caste:symbol)\nBelongs_to_caste(\"person\", \"Iyer\").\n.decl Follows_diet(Caste:symbol, Diet:symbol)\nFollows_diet(\"Iyer\", \"vegetarian\").\n.decl Eats_meat(Diet:symbol)\nEats_meat(\"non-vegetarian\").\n.decl Answer()\nAnswer() :- Belongs_to_caste(person, \"Iyer\"), Follows_diet(\"Iyer\", diet), Eats_meat(diet).\n.output Answer"]}
{"id": 1528, "answer": true, "completion": ".decl Represents_underworld(God:symbol)\nRepresents_underworld(\"Hades\").\nRepresents_underworld(\"Osiris\").\n.decl Answer()\nAnswer() :- Represents_underworld(god1), Represents_underworld(god2), god1 != god2.\n.output Answer", "completions": [".decl Represents_underworld(God:symbol)\nRepresents_underworld(\"Hades\").\nRepresents_underworld(\"Osiris\").\n.decl Answer()\nAnswer() :- Represents_underworld(god1), Represents_underworld(god2), god1 != god2.\n.output Answer"]}
{"id": 1529, "answer": true, "completion": ".decl Prefers(Person:symbol, Object_A:symbol, Object_B:symbol)\nPrefers(\"General Zod\", \"iPhone\", \"Samsung Galaxy S4\").\n.decl Answer()\nAnswer() :- Prefers(\"General Zod\", \"iPhone\", \"Samsung Galaxy S4\").\n.output Answer", "completions": [".decl Prefers(Person:symbol, Object_A:symbol, Object_B:symbol)\nPrefers(\"General Zod\", \"iPhone\", \"Samsung Galaxy S4\").\n.decl Answer()\nAnswer() :- Prefers(\"General Zod\", \"iPhone\", \"Samsung Galaxy S4\").\n.output Answer"]}
{"id": 1530, "answer": true, "completion": ".decl Is_appropriate(Food:symbol, Event:symbol)\nIs_appropriate(\"Chipotle Cinnamon Pork Chops\", \"Seder\").\n.decl Is_prohibited(Food:symbol, Event:symbol)\nIs_prohibited(\"pork\", \"Seder\").\n.decl Contains_ingredient(Food:symbol, Ingredient:symbol)\nContains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"pork\").\n.decl Answer()\nAnswer() :- Is_appropriate(\"Chipotle Cinnamon Pork Chops\", \"Seder\"), !Is_prohibited(ingredient, \"Seder\"), Contains_ingredient(\"Chipotle Cinnamon Pork Chops\", ingredient).\n.output Answer", "completions": [".decl Is_appropriate(Food:symbol, Event:symbol)\nIs_appropriate(\"Chipotle Cinnamon Pork Chops\", \"Seder\").\n.decl Is_prohibited(Food:symbol, Event:symbol)\nIs_prohibited(\"pork\", \"Seder\").\n.decl Contains_ingredient(Food:symbol, Ingredient:symbol)\nContains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"pork\").\n.decl Answer()\nAnswer() :- Is_appropriate(\"Chipotle Cinnamon Pork Chops\", \"Seder\"), !Is_prohibited(ingredient, \"Seder\"), Contains_ingredient(\"Chipotle Cinnamon Pork Chops\", ingredient).\n.output Answer"]}
{"id": 1531, "answer": false, "completion": ".decl Causes(Object:symbol, Effect:symbol)\nCauses(\"too many oranges\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Causes(\"too many oranges\", \"diarrhea\").\n.output Answer", "completions": [".decl Causes(Object:symbol, Effect:symbol)\nCauses(\"too many oranges\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Causes(\"too many oranges\", \"diarrhea\").\n.output Answer"]}
{"id": 1532, "answer": true, "completion": ".decl Prone_to_jealousy(Person:symbol)\nProne_to_jealousy(\"someone\").\n\n.decl In_relationship(Person:symbol, Relationship_type:symbol)\nIn_relationship(\"someone\", \"polyamorous\").\n\n.decl Suitable_for_relationship(Person:symbol, Relationship_type:symbol)\nSuitable_for_relationship(\"someone\", \"monogamous\").\n\n.decl Answer()\nAnswer() :- Prone_to_jealousy(person), In_relationship(person, \"polyamorous\"), !Suitable_for_relationship(person, \"polyamorous\").\n.output Answer", "completions": [".decl Prone_to_jealousy(Person:symbol)\nProne_to_jealousy(\"someone\").\n\n.decl In_relationship(Person:symbol, Relationship_type:symbol)\nIn_relationship(\"someone\", \"polyamorous\").\n\n.decl Suitable_for_relationship(Person:symbol, Relationship_type:symbol)\nSuitable_for_relationship(\"someone\", \"monogamous\").\n\n.decl Answer()\nAnswer() :- Prone_to_jealousy(person), In_relationship(person, \"polyamorous\"), !Suitable_for_relationship(person, \"polyamorous\").\n.output Answer"]}
{"id": 1533, "answer": false, "completion": ".decl Commits_deadly_sins(Person:symbol, N_sins:float)\nCommits_deadly_sins(\"Christopher Columbus\", 3).\n.decl Deadly_sins(N_sins:float)\nDeadly_sins(1).\nDeadly_sins(2).\nDeadly_sins(3).\nDeadly_sins(4).\nDeadly_sins(5).\nDeadly_sins(6).\nDeadly_sins(7).\n.decl Answer()\nAnswer() :- Commits_deadly_sins(\"Christopher Columbus\", n_sins), Deadly_sins(n_sins), n_sins > 1.\n.output Answer", "completions": [".decl Commits_deadly_sins(Person:symbol, N_sins:float)\nCommits_deadly_sins(\"Christopher Columbus\", 3).\n.decl Deadly_sins(N_sins:float)\nDeadly_sins(1).\nDeadly_sins(2).\nDeadly_sins(3).\nDeadly_sins(4).\nDeadly_sins(5).\nDeadly_sins(6).\nDeadly_sins(7).\n.decl Answer()\nAnswer() :- Commits_deadly_sins(\"Christopher Columbus\", n_sins), Deadly_sins(n_sins), n_sins > 1.\n.output Answer"]}
{"id": 1534, "answer": true, "completion": ".decl Occurs_in_year(Event:symbol, Year:float)\nOccurs_in_year(\"Wall Street Crash of 1929\", 1929).\n.decl Exists_in_year(Company:symbol, Industry:symbol, Year:float)\nExists_in_year(\"robotics company\", \"robotics\", 1929).\n.decl Hurt_stocks(Event:symbol, Industry:symbol)\nHurt_stocks(\"Wall Street Crash of 1929\", \"all industries\").\n.decl Answer()\nAnswer() :- Occurs_in_year(\"Wall Street Crash of 1929\", year1), Exists_in_year(company, \"robotics\", year2), Hurt_stocks(\"Wall Street Crash of 1929\", \"all industries\"), year1 = year2.\n.output Answer", "completions": [".decl Occurs_in_year(Event:symbol, Year:float)\nOccurs_in_year(\"Wall Street Crash of 1929\", 1929).\n.decl Exists_in_year(Company:symbol, Industry:symbol, Year:float)\nExists_in_year(\"robotics company\", \"robotics\", 1929).\n.decl Hurt_stocks(Event:symbol, Industry:symbol)\nHurt_stocks(\"Wall Street Crash of 1929\", \"all industries\").\n.decl Answer()\nAnswer() :- Occurs_in_year(\"Wall Street Crash of 1929\", year1), Exists_in_year(company, \"robotics\", year2), Hurt_stocks(\"Wall Street Crash of 1929\", \"all industries\"), year1 = year2.\n.output Answer"]}
{"id": 1535, "answer": true, "completion": ".decl Has_GDP(Country:symbol, GDP:float)\nHas_GDP(\"Cyprus\", 25000000000).\n.decl Has_Revenue(Movie:symbol, Revenue:float)\nHas_Revenue(\"Inception\", 829895144).\nHas_Revenue(\"Interstellar\", 677471339).\nHas_Revenue(\"Dunkirk\", 526940665).\nHas_Revenue(\"The Dark Knight\", 1004558444).\nHas_Revenue(\"The Dark Knight Rises\", 1081041287).\nHas_Revenue(\"Memento\", 39723096).\nHas_Revenue(\"Insomnia\", 113758770).\nHas_Revenue(\"The Prestige\", 109676311).\nHas_Revenue(\"Batman Begins\", 373413297).\n.decl Total_Revenue(Director:symbol, Total:float)\nTotal_Revenue(\"Christopher Nolan\", Total) :- Total = 829895144 + 677471339 + 526940665 + 1004558444 + 1081041287 + 39723096 + 113758770 + 109676311 + 373413297.\n.decl Answer()\nAnswer() :- Has_GDP(\"Cyprus\", gdp), Total_Revenue(\"Christopher Nolan\", total_revenue), total_revenue > gdp.\n.output Answer", "completions": [".decl Has_GDP(Country:symbol, GDP:float)\nHas_GDP(\"Cyprus\", 25000000000).\n.decl Has_Revenue(Movie:symbol, Revenue:float)\nHas_Revenue(\"Inception\", 829895144).\nHas_Revenue(\"Interstellar\", 677471339).\nHas_Revenue(\"Dunkirk\", 526940665).\nHas_Revenue(\"The Dark Knight\", 1004558444).\nHas_Revenue(\"The Dark Knight Rises\", 1081041287).\nHas_Revenue(\"Memento\", 39723096).\nHas_Revenue(\"Insomnia\", 113758770).\nHas_Revenue(\"The Prestige\", 109676311).\nHas_Revenue(\"Batman Begins\", 373413297).\n.decl Total_Revenue(Director:symbol, Total:float)\nTotal_Revenue(\"Christopher Nolan\", Total) :- Total = 829895144 + 677471339 + 526940665 + 1004558444 + 1081041287 + 39723096 + 113758770 + 109676311 + 373413297.\n.decl Answer()\nAnswer() :- Has_GDP(\"Cyprus\", gdp), Total_Revenue(\"Christopher Nolan\", total_revenue), total_revenue > gdp.\n.output Answer"]}
{"id": 1536, "answer": true, "completion": ".decl Has_n_fingers(Being:symbol, N_fingers:float)\nHas_n_fingers(\"Homer Simpson\", 10).\n.decl Answer()\nAnswer() :- Has_n_fingers(\"Homer Simpson\", n_fingers), n_fingers >= 5.\n.output Answer", "completions": [".decl Has_n_fingers(Being:symbol, N_fingers:float)\nHas_n_fingers(\"Homer Simpson\", 10).\n.decl Answer()\nAnswer() :- Has_n_fingers(\"Homer Simpson\", n_fingers), n_fingers >= 5.\n.output Answer"]}
{"id": 1537, "answer": true, "completion": ".decl Played_male_lead(Actor:symbol, Movie:symbol)\nPlayed_male_lead(\"Robin Williams\", \"Mrs. Doubtfire\").\n.decl Known_for_humor(Person:symbol)\nKnown_for_humor(\"Robin Williams\").\n.decl Answer()\nAnswer() :- Played_male_lead(actor, \"Mrs. Doubtfire\"), Known_for_humor(actor).\n.output Answer", "completions": [".decl Played_male_lead(Actor:symbol, Movie:symbol)\nPlayed_male_lead(\"Robin Williams\", \"Mrs. Doubtfire\").\n.decl Known_for_humor(Person:symbol)\nKnown_for_humor(\"Robin Williams\").\n.decl Answer()\nAnswer() :- Played_male_lead(actor, \"Mrs. Doubtfire\"), Known_for_humor(actor).\n.output Answer"]}
{"id": 1538, "answer": false, "completion": ".decl Funded_by(Explorer:symbol, Rulers:symbol)\nFunded_by(\"Columbus\", \"Spanish Monarchs\").\n.decl Rulers_of(Empire:symbol, Rulers:symbol)\nRulers_of(\"Portuguese Empire\", \"Portuguese Monarchs\").\n.decl Answer()\nAnswer() :- Funded_by(\"Columbus\", rulers), Rulers_of(\"Portuguese Empire\", rulers).\n.output Answer", "completions": [".decl Funded_by(Explorer:symbol, Rulers:symbol)\nFunded_by(\"Columbus\", \"Spanish Monarchs\").\n.decl Rulers_of(Empire:symbol, Rulers:symbol)\nRulers_of(\"Portuguese Empire\", \"Portuguese Monarchs\").\n.decl Answer()\nAnswer() :- Funded_by(\"Columbus\", rulers), Rulers_of(\"Portuguese Empire\", rulers).\n.output Answer"]}
{"id": 1539, "answer": true, "completion": ".decl Essential_to_crafting(Nationality:symbol, Monument:symbol)\nEssential_to_crafting(\"Greeks\", \"Egyptian Lighthouse of Alexandria\").\n.decl Answer()\nAnswer() :- Essential_to_crafting(\"Greeks\", \"Egyptian Lighthouse of Alexandria\").\n.output Answer", "completions": [".decl Essential_to_crafting(Nationality:symbol, Monument:symbol)\nEssential_to_crafting(\"Greeks\", \"Egyptian Lighthouse of Alexandria\").\n.decl Answer()\nAnswer() :- Essential_to_crafting(\"Greeks\", \"Egyptian Lighthouse of Alexandria\").\n.output Answer"]}
{"id": 1540, "answer": true, "completion": ".decl Has_rank_system(Sport:symbol, Max_rank:float)\nHas_rank_system(\"judo\", 12).\n.decl Answer()\nAnswer() :- Has_rank_system(\"judo\", max_rank), max_rank >= 100.\n.output Answer", "completions": [".decl Has_rank_system(Sport:symbol, Max_rank:float)\nHas_rank_system(\"judo\", 12).\n.decl Answer()\nAnswer() :- Has_rank_system(\"judo\", max_rank), max_rank >= 100.\n.output Answer"]}
{"id": 1541, "answer": false, "completion": ".decl Is_menu_item(Restaurant:symbol, Item:symbol)\nIs_menu_item(\"Cuauhtémoc restaurant\", \"cactus fruit\").\n.decl Is_important_item(Restaurant:symbol, Item:symbol)\nIs_important_item(\"Cuauhtémoc restaurant\", \"cactus fruit\").\n.decl Answer()\nAnswer() :- Is_menu_item(\"Cuauhtémoc restaurant\", \"cactus fruit\"), Is_important_item(\"Cuauhtémoc restaurant\", \"cactus fruit\").\n.output Answer", "completions": [".decl Is_menu_item(Restaurant:symbol, Item:symbol)\nIs_menu_item(\"Cuauhtémoc restaurant\", \"cactus fruit\").\n.decl Is_important_item(Restaurant:symbol, Item:symbol)\nIs_important_item(\"Cuauhtémoc restaurant\", \"cactus fruit\").\n.decl Answer()\nAnswer() :- Is_menu_item(\"Cuauhtémoc restaurant\", \"cactus fruit\"), Is_important_item(\"Cuauhtémoc restaurant\", \"cactus fruit\").\n.output Answer"]}
{"id": 1542, "answer": true, "completion": ".decl Trained(Person:symbol, Technique:symbol)\nTrained(\"Mike Tyson\", \"boxing\").\nTrained(\"Mike Tyson\", \"gogoplata\").\n.decl Answer()\nAnswer() :- Trained(\"Mike Tyson\", \"gogoplata\").\n.output Answer", "completions": [".decl Trained(Person:symbol, Technique:symbol)\nTrained(\"Mike Tyson\", \"boxing\").\nTrained(\"Mike Tyson\", \"gogoplata\").\n.decl Answer()\nAnswer() :- Trained(\"Mike Tyson\", \"gogoplata\").\n.output Answer"]}
{"id": 1543, "answer": true, "completion": ".decl Is_associated_with(Company:symbol, Country:symbol)\nIs_associated_with(\"Fiat Chrysler\", \"Italy\").\nIs_associated_with(\"Fiat Chrysler\", \"United States\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Fiat Chrysler\", \"Japan\").\n.output Answer", "completions": [".decl Is_associated_with(Company:symbol, Country:symbol)\nIs_associated_with(\"Fiat Chrysler\", \"Italy\").\nIs_associated_with(\"Fiat Chrysler\", \"United States\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Fiat Chrysler\", \"Japan\").\n.output Answer"]}
{"id": 1544, "answer": false, "completion": ".decl Has_viscosity(Ingredient:symbol, Viscosity:float)\nHas_viscosity(\"jello\", 1).\nHas_viscosity(\"alcohol\", 0.5).\n.decl Is_ingredient_in(Ingredient:symbol, Recipe:symbol)\nIs_ingredient_in(\"jello\", \"jello shots\").\nIs_ingredient_in(\"alcohol\", \"jello shots\").\n.decl Answer()\nAnswer() :- Is_ingredient_in(ingredient, \"jello shots\"), Has_viscosity(ingredient, viscosity), viscosity != 0.\n.output Answer", "completions": [".decl Has_viscosity(Ingredient:symbol, Viscosity:float)\nHas_viscosity(\"jello\", 1).\nHas_viscosity(\"alcohol\", 0.5).\n.decl Is_ingredient_in(Ingredient:symbol, Recipe:symbol)\nIs_ingredient_in(\"jello\", \"jello shots\").\nIs_ingredient_in(\"alcohol\", \"jello shots\").\n.decl Answer()\nAnswer() :- Is_ingredient_in(ingredient, \"jello shots\"), Has_viscosity(ingredient, viscosity), viscosity != 0.\n.output Answer"]}
{"id": 1545, "answer": false, "completion": ".decl Wears_on_stage(Person:symbol, Outfit_color:symbol)\nWears_on_stage(\"Johnny Cash\", \"black\").\n.decl Typical_outfit(Person:symbol, Outfit_color:symbol)\nTypical_outfit(\"Johnny Cash\", \"black\").\n.decl Answer()\nAnswer() :- Typical_outfit(\"Johnny Cash\", \"rainbow-colored\").\n.output Answer", "completions": [".decl Wears_on_stage(Person:symbol, Outfit_color:symbol)\nWears_on_stage(\"Johnny Cash\", \"black\").\n.decl Typical_outfit(Person:symbol, Outfit_color:symbol)\nTypical_outfit(\"Johnny Cash\", \"black\").\n.decl Answer()\nAnswer() :- Typical_outfit(\"Johnny Cash\", \"rainbow-colored\").\n.output Answer"]}
{"id": 1546, "answer": true, "completion": ".decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"markhor birth\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"markhor birth\", n_months), 3 * n_months <= 12.\n.output Answer", "completions": [".decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"markhor birth\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"markhor birth\", n_months), 3 * n_months <= 12.\n.output Answer"]}
{"id": 1547, "answer": true, "completion": ".decl Follows_belief(Person:symbol, Belief:symbol)\nFollows_belief(\"Mother Theresa\", \"Catholicism\").\n.decl Is_atheism(Belief:symbol)\nIs_atheism(\"atheism\").\n.decl Answer()\nAnswer() :- Follows_belief(\"Mother Theresa\", belief), Is_atheism(belief).\n.output Answer", "completions": [".decl Follows_belief(Person:symbol, Belief:symbol)\nFollows_belief(\"Mother Theresa\", \"Catholicism\").\n.decl Is_atheism(Belief:symbol)\nIs_atheism(\"atheism\").\n.decl Answer()\nAnswer() :- Follows_belief(\"Mother Theresa\", belief), Is_atheism(belief).\n.output Answer"]}
{"id": 1548, "answer": true, "completion": ".decl Can_learn(Entity:symbol, Subject:symbol)\nCan_learn(\"human\", \"history of art\").\n.decl Is_type(Entity:symbol, Type:symbol)\nIs_type(\"amoeba\", \"unicellular organism\").\nIs_type(\"human\", \"multicellular organism\").\n.decl Answer()\nAnswer() :- Can_learn(\"amoeba\", \"history of art\").\nAnswer() :- Can_learn(entity, \"history of art\"), Is_type(\"amoeba\", type1), Is_type(entity, type2), type1 = type2.\n.output Answer", "completions": [".decl Can_learn(Entity:symbol, Subject:symbol)\nCan_learn(\"human\", \"history of art\").\n.decl Is_type(Entity:symbol, Type:symbol)\nIs_type(\"amoeba\", \"unicellular organism\").\nIs_type(\"human\", \"multicellular organism\").\n.decl Answer()\nAnswer() :- Can_learn(\"amoeba\", \"history of art\").\nAnswer() :- Can_learn(entity, \"history of art\"), Is_type(\"amoeba\", type1), Is_type(entity, type2), type1 = type2.\n.output Answer"]}
{"id": 1549, "answer": false, "completion": ".decl Requires_course_material(Course:symbol, Material:symbol)\nRequires_course_material(\"CHE101\", \"chemistry textbook\").\n.decl Written_by(Author:symbol, Material:symbol)\nWritten_by(\"Maya Angelou\", \"I Know Why the Caged Bird Sings\").\n.decl Answer()\nAnswer() :- Requires_course_material(\"CHE101\", material), Written_by(\"Maya Angelou\", material).\n.output Answer", "completions": [".decl Requires_course_material(Course:symbol, Material:symbol)\nRequires_course_material(\"CHE101\", \"chemistry textbook\").\n.decl Written_by(Author:symbol, Material:symbol)\nWritten_by(\"Maya Angelou\", \"I Know Why the Caged Bird Sings\").\n.decl Answer()\nAnswer() :- Requires_course_material(\"CHE101\", material), Written_by(\"Maya Angelou\", material).\n.output Answer"]}
{"id": 1550, "answer": true, "completion": ".decl At_Last_Supper(Person:symbol)\nAt_Last_Supper(\"Jesus\").\nAt_Last_Supper(\"Peter\").\nAt_Last_Supper(\"John\").\nAt_Last_Supper(\"Judas\").\nAt_Last_Supper(\"Thomas\").\nAt_Last_Supper(\"James\").\nAt_Last_Supper(\"Andrew\").\nAt_Last_Supper(\"Philip\").\nAt_Last_Supper(\"Bartholomew\").\nAt_Last_Supper(\"Matthew\").\nAt_Last_Supper(\"James the Less\").\nAt_Last_Supper(\"Thaddeus\").\nAt_Last_Supper(\"Simon the Zealot\").\n\n.decl Celebrated_in_Islam(Person:symbol)\nCelebrated_in_Islam(\"Jesus\").\nCelebrated_in_Islam(\"Mary\").\nCelebrated_in_Islam(\"Moses\").\nCelebrated_in_Islam(\"Abraham\").\nCelebrated_in_Islam(\"Noah\").\nCelebrated_in_Islam(\"Adam\").\nCelebrated_in_Islam(\"David\").\nCelebrated_in_Islam(\"Solomon\").\nCelebrated_in_Islam(\"Joseph\").\nCelebrated_in_Islam(\"Jacob\").\nCelebrated_in_Islam(\"Isaac\").\nCelebrated_in_Islam(\"Ishmael\").\nCelebrated_in_Islam(\"Lot\").\nCelebrated_in_Islam(\"Aaron\").\nCelebrated_in_Islam(\"Elijah\").\nCelebrated_in_Islam(\"Elisha\").\nCelebrated_in_Islam(\"Jonah\").\nCelebrated_in_Islam(\"Job\").\nCelebrated_in_Islam(\"Ezekiel\").\nCelebrated_in_Islam(\"Zechariah\").\nCelebrated_in_Islam(\"John the Baptist\").\n\n.decl Answer()\nAnswer() :- At_Last_Supper(person), Celebrated_in_Islam(person).\n.output Answer", "completions": [".decl At_Last_Supper(Person:symbol)\nAt_Last_Supper(\"Jesus\").\nAt_Last_Supper(\"Peter\").\nAt_Last_Supper(\"John\").\nAt_Last_Supper(\"Judas\").\nAt_Last_Supper(\"Thomas\").\nAt_Last_Supper(\"James\").\nAt_Last_Supper(\"Andrew\").\nAt_Last_Supper(\"Philip\").\nAt_Last_Supper(\"Bartholomew\").\nAt_Last_Supper(\"Matthew\").\nAt_Last_Supper(\"James the Less\").\nAt_Last_Supper(\"Thaddeus\").\nAt_Last_Supper(\"Simon the Zealot\").\n\n.decl Celebrated_in_Islam(Person:symbol)\nCelebrated_in_Islam(\"Jesus\").\nCelebrated_in_Islam(\"Mary\").\nCelebrated_in_Islam(\"Moses\").\nCelebrated_in_Islam(\"Abraham\").\nCelebrated_in_Islam(\"Noah\").\nCelebrated_in_Islam(\"Adam\").\nCelebrated_in_Islam(\"David\").\nCelebrated_in_Islam(\"Solomon\").\nCelebrated_in_Islam(\"Joseph\").\nCelebrated_in_Islam(\"Jacob\").\nCelebrated_in_Islam(\"Isaac\").\nCelebrated_in_Islam(\"Ishmael\").\nCelebrated_in_Islam(\"Lot\").\nCelebrated_in_Islam(\"Aaron\").\nCelebrated_in_Islam(\"Elijah\").\nCelebrated_in_Islam(\"Elisha\").\nCelebrated_in_Islam(\"Jonah\").\nCelebrated_in_Islam(\"Job\").\nCelebrated_in_Islam(\"Ezekiel\").\nCelebrated_in_Islam(\"Zechariah\").\nCelebrated_in_Islam(\"John the Baptist\").\n\n.decl Answer()\nAnswer() :- At_Last_Supper(person), Celebrated_in_Islam(person).\n.output Answer"]}
{"id": 1551, "answer": false, "completion": ".decl Attended(Person:symbol, University:symbol)\nAttended(\"John Kerry\", \"Yale University\").\n.decl Won_Golden_Globe(Person:symbol)\nWon_Golden_Globe(\"Meryl Streep\").\nWon_Golden_Globe(\"Tom Hanks\").\nWon_Golden_Globe(\"Kate Winslet\").\n.decl Attended_Alma_Mater(Person:symbol, University:symbol)\nAttended_Alma_Mater(person, university) :- Attended(\"John Kerry\", university), Attended(person, university).\n.decl Answer()\nAnswer() :- Won_Golden_Globe(person), Attended_Alma_Mater(person, \"Yale University\").\n.output Answer", "completions": [".decl Attended(Person:symbol, University:symbol)\nAttended(\"John Kerry\", \"Yale University\").\n.decl Won_Golden_Globe(Person:symbol)\nWon_Golden_Globe(\"Meryl Streep\").\nWon_Golden_Globe(\"Tom Hanks\").\nWon_Golden_Globe(\"Kate Winslet\").\n.decl Attended_Alma_Mater(Person:symbol, University:symbol)\nAttended_Alma_Mater(person, university) :- Attended(\"John Kerry\", university), Attended(person, university).\n.decl Answer()\nAnswer() :- Won_Golden_Globe(person), Attended_Alma_Mater(person, \"Yale University\").\n.output Answer"]}
{"id": 1552, "answer": false, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"armadillo\", \"hard_shell\").\nHas_property(\"shield\", \"protection\").\n.decl Answer()\nAnswer() :- Has_property(\"armadillo\", \"hard_shell\"), Has_property(\"shield\", \"protection\").\n.output Answer", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"armadillo\", \"hard_shell\").\nHas_property(\"shield\", \"protection\").\n.decl Answer()\nAnswer() :- Has_property(\"armadillo\", \"hard_shell\"), Has_property(\"shield\", \"protection\").\n.output Answer"]}
{"id": 1553, "answer": true, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"10th doctor\", \"fruit\").\nLikes(\"10th doctor\", \"stuffed food\").\n.decl Is_type(Food:symbol, Type:symbol)\nIs_type(\"stuffed pears\", \"fruit\").\nIs_type(\"stuffed pears\", \"stuffed food\").\n.decl Answer()\nAnswer() :- Likes(\"10th doctor\", food_type), Is_type(\"stuffed pears\", food_type).\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"10th doctor\", \"fruit\").\nLikes(\"10th doctor\", \"stuffed food\").\n.decl Is_type(Food:symbol, Type:symbol)\nIs_type(\"stuffed pears\", \"fruit\").\nIs_type(\"stuffed pears\", \"stuffed food\").\n.decl Answer()\nAnswer() :- Likes(\"10th doctor\", food_type), Is_type(\"stuffed pears\", food_type).\n.output Answer"]}
{"id": 1554, "answer": false, "completion": ".decl Known_for(Location:symbol, Product:symbol)\nKnown_for(\"Brooklyn\", \"bread products\").\n.decl Answer()\nAnswer() :- Known_for(\"Brooklyn\", \"bread products\").\n.output Answer", "completions": [".decl Known_for(Location:symbol, Product:symbol)\nKnown_for(\"Brooklyn\", \"bread products\").\n.decl Answer()\nAnswer() :- Known_for(\"Brooklyn\", \"bread products\").\n.output Answer"]}
{"id": 1555, "answer": false, "completion": ".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"human\", \"breast cancer\").\n.decl Is_type_of(Organism_A:symbol, Organism_B:symbol)\nIs_type_of(\"amoeba\", \"single-celled organism\").\n.decl Answer()\nAnswer() :- !Has_disease(\"amoeba\", \"breast cancer\").\nAnswer() :- Is_type_of(\"amoeba\", organism_type), !Has_disease(organism_type, \"breast cancer\").\n.output Answer", "completions": [".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"human\", \"breast cancer\").\n.decl Is_type_of(Organism_A:symbol, Organism_B:symbol)\nIs_type_of(\"amoeba\", \"single-celled organism\").\n.decl Answer()\nAnswer() :- !Has_disease(\"amoeba\", \"breast cancer\").\nAnswer() :- Is_type_of(\"amoeba\", organism_type), !Has_disease(organism_type, \"breast cancer\").\n.output Answer"]}
{"id": 1556, "answer": false, "completion": ".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Post Malone\", \"needles\").\n.decl Answer()\nAnswer() :- Has_fear(\"Post Malone\", \"needles\").\n.output Answer", "completions": [".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Post Malone\", \"needles\").\n.decl Answer()\nAnswer() :- Has_fear(\"Post Malone\", \"needles\").\n.output Answer"]}
{"id": 1557, "answer": true, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 20500).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Gothenburg\", 570000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity), Has_population(\"Gothenburg\", population), capacity >= (population / 10).\n.output Answer", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 20500).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Gothenburg\", 570000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity), Has_population(\"Gothenburg\", population), capacity >= (population / 10).\n.output Answer"]}
{"id": 1558, "answer": false, "completion": ".decl Is_expert(Expert:symbol, Skill:symbol)\nIs_expert(\"Jujutsu expert\", \"Jujutsu\").\n.decl Is_member(Member:symbol, Group:symbol)\nIs_member(\"Janissary\", \"Ottoman Empire\").\n.decl Has_combat_ability(Person:symbol, Ability:symbol)\nHas_combat_ability(\"Jujutsu expert\", \"martial arts\").\nHas_combat_ability(\"Janissary\", \"military training\").\n.decl Answer()\nAnswer() :- Is_expert(\"Jujutsu expert\", skill1), Is_member(\"Janissary\", group), Has_combat_ability(\"Jujutsu expert\", ability1), Has_combat_ability(\"Janissary\", ability2), ability1 != ability2.\n.output Answer", "completions": [".decl Is_expert(Expert:symbol, Skill:symbol)\nIs_expert(\"Jujutsu expert\", \"Jujutsu\").\n.decl Is_member(Member:symbol, Group:symbol)\nIs_member(\"Janissary\", \"Ottoman Empire\").\n.decl Has_combat_ability(Person:symbol, Ability:symbol)\nHas_combat_ability(\"Jujutsu expert\", \"martial arts\").\nHas_combat_ability(\"Janissary\", \"military training\").\n.decl Answer()\nAnswer() :- Is_expert(\"Jujutsu expert\", skill1), Is_member(\"Janissary\", group), Has_combat_ability(\"Jujutsu expert\", ability1), Has_combat_ability(\"Janissary\", ability2), ability1 != ability2.\n.output Answer"]}
{"id": 1559, "answer": true, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Rusev's homeland\", 1000000).\n.decl Has_population_growth_rate(Country:symbol, Growth_rate:float)\nHas_population_growth_rate(\"Rusev's homeland\", 0.5).\n.decl Answer()\nAnswer() :- Has_population(\"Rusev's homeland\", population), Has_population_growth_rate(\"Rusev's homeland\", growth_rate), population * growth_rate > 0.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Rusev's homeland\", 1000000).\n.decl Has_population_growth_rate(Country:symbol, Growth_rate:float)\nHas_population_growth_rate(\"Rusev's homeland\", 0.5).\n.decl Answer()\nAnswer() :- Has_population(\"Rusev's homeland\", population), Has_population_growth_rate(\"Rusev's homeland\", growth_rate), population * growth_rate > 0.\n.output Answer"]}
{"id": 1560, "answer": true, "completion": ".decl Is_important(Object:symbol, Activity:symbol)\nIs_important(\"bird\", \"badminton\").\n.decl Answer()\nAnswer() :- Is_important(\"bird\", \"badminton\").\n.output Answer", "completions": [".decl Is_important(Object:symbol, Activity:symbol)\nIs_important(\"bird\", \"badminton\").\n.decl Answer()\nAnswer() :- Is_important(\"bird\", \"badminton\").\n.output Answer"]}
{"id": 1561, "answer": true, "completion": ".decl Is_pirate_rank(Rank:symbol)\nIs_pirate_rank(\"lieutenant\").\n\n.decl Is_navy_rank(Rank:symbol)\nIs_navy_rank(\"lieutenant\").\n\n.decl Answer()\nAnswer() :- Is_pirate_rank(rank1), Is_navy_rank(rank2), rank1 = rank2.\n.output Answer", "completions": [".decl Is_pirate_rank(Rank:symbol)\nIs_pirate_rank(\"lieutenant\").\n\n.decl Is_navy_rank(Rank:symbol)\nIs_navy_rank(\"lieutenant\").\n\n.decl Answer()\nAnswer() :- Is_pirate_rank(rank1), Is_navy_rank(rank2), rank1 = rank2.\n.output Answer"]}
{"id": 1562, "answer": false, "completion": ".decl Has_range(Missile:symbol, Range:float)\nHas_range(\"Hwasong-15\", 13000).\n.decl Has_distance(Object:symbol, Distance:float)\nHas_distance(\"Voyager 2\", 18700000000).\n.decl Answer()\nAnswer() :- Has_range(\"Hwasong-15\", range), Has_distance(\"Voyager 2\", distance), range >= distance.\n.output Answer", "completions": [".decl Has_range(Missile:symbol, Range:float)\nHas_range(\"Hwasong-15\", 13000).\n.decl Has_distance(Object:symbol, Distance:float)\nHas_distance(\"Voyager 2\", 18700000000).\n.decl Answer()\nAnswer() :- Has_range(\"Hwasong-15\", range), Has_distance(\"Voyager 2\", distance), range >= distance.\n.output Answer"]}
{"id": 1563, "answer": true, "completion": ".decl Has_glass_top(Stove:symbol)\nHas_glass_top(\"electric stove\").\n\n.decl Material(Skillet:symbol)\nMaterial(\"cast iron skillet\").\n\n.decl Recommended(Stove:symbol, Skillet:symbol)\nRecommended(\"electric stove\", \"cast iron skillet\").\n\n.decl Answer(Answer:symbol)\nAnswer(\"yes\") :- Has_glass_top(\"electric stove\"), Material(\"cast iron skillet\"), Recommended(\"electric stove\", \"cast iron skillet\").\nAnswer(\"no\") :- Has_glass_top(\"electric stove\"), Material(\"cast iron skillet\"), !Recommended(\"electric stove\", \"cast iron skillet\").\n\n.output Answer", "completions": [".decl Has_glass_top(Stove:symbol)\nHas_glass_top(\"electric stove\").\n\n.decl Material(Skillet:symbol)\nMaterial(\"cast iron skillet\").\n\n.decl Recommended(Stove:symbol, Skillet:symbol)\nRecommended(\"electric stove\", \"cast iron skillet\").\n\n.decl Answer(Answer:symbol)\nAnswer(\"yes\") :- Has_glass_top(\"electric stove\"), Material(\"cast iron skillet\"), Recommended(\"electric stove\", \"cast iron skillet\").\nAnswer(\"no\") :- Has_glass_top(\"electric stove\"), Material(\"cast iron skillet\"), !Recommended(\"electric stove\", \"cast iron skillet\").\n\n.output Answer"]}
{"id": 1564, "answer": true, "completion": ".decl Has_duration(Character:symbol, Game:symbol, Duration:symbol)\nHas_duration(\"Conan the Barbarian\", \"Call of Duty\", \"short\").\n.decl Answer()\nAnswer() :- Has_duration(\"Conan the Barbarian\", \"Call of Duty\", \"short\").\n.output Answer", "completions": [".decl Has_duration(Character:symbol, Game:symbol, Duration:symbol)\nHas_duration(\"Conan the Barbarian\", \"Call of Duty\", \"short\").\n.decl Answer()\nAnswer() :- Has_duration(\"Conan the Barbarian\", \"Call of Duty\", \"short\").\n.output Answer"]}
{"id": 1565, "answer": true, "completion": ".decl Grows_in(Object:symbol, Environment:symbol)\nGrows_in(\"sesame seed\", \"soil\").\nGrows_in(\"human body\", \"cells\").\n.decl Answer()\nAnswer() :- Grows_in(\"sesame seed\", \"human body\").\nAnswer() :- Grows_in(\"sesame seed\", environment1), Grows_in(\"human body\", environment2), environment1 = environment2.\n.output Answer", "completions": [".decl Grows_in(Object:symbol, Environment:symbol)\nGrows_in(\"sesame seed\", \"soil\").\nGrows_in(\"human body\", \"cells\").\n.decl Answer()\nAnswer() :- Grows_in(\"sesame seed\", \"human body\").\nAnswer() :- Grows_in(\"sesame seed\", environment1), Grows_in(\"human body\", environment2), environment1 = environment2.\n.output Answer"]}
{"id": 1566, "answer": false, "completion": ".decl Has_signature_style(Person:symbol, Style1:symbol, Style2:symbol)\nHas_signature_style(\"Ariana Grande\", \"comfort items\", \"high fashion\").\n.decl Answer()\nAnswer() :- Has_signature_style(\"Ariana Grande\", \"comfort items\", \"high fashion\").\n.output Answer", "completions": [".decl Has_signature_style(Person:symbol, Style1:symbol, Style2:symbol)\nHas_signature_style(\"Ariana Grande\", \"comfort items\", \"high fashion\").\n.decl Answer()\nAnswer() :- Has_signature_style(\"Ariana Grande\", \"comfort items\", \"high fashion\").\n.output Answer"]}
{"id": 1567, "answer": true, "completion": ".decl Dated(Person1:symbol, Person2:symbol)\nDated(\"Eric Clapton\", \"Pattie Boyd\").\nDated(\"George Harrison\", \"Pattie Boyd\").\n.decl Is_Beatle(Person:symbol)\nIs_Beatle(\"George Harrison\").\n.decl Answer()\nAnswer() :- Dated(\"Eric Clapton\", woman), Dated(beatle, woman), Is_Beatle(beatle).\n.output Answer", "completions": [".decl Dated(Person1:symbol, Person2:symbol)\nDated(\"Eric Clapton\", \"Pattie Boyd\").\nDated(\"George Harrison\", \"Pattie Boyd\").\n.decl Is_Beatle(Person:symbol)\nIs_Beatle(\"George Harrison\").\n.decl Answer()\nAnswer() :- Dated(\"Eric Clapton\", woman), Dated(beatle, woman), Is_Beatle(beatle).\n.output Answer"]}
{"id": 1568, "answer": true, "completion": ".decl Is_analogous(Court_A:symbol, Court_B:symbol)\nIs_analogous(\"Supreme Court of the United States\", \"High Courts of Justice of Spain\").\n.decl Answer()\nAnswer() :- Is_analogous(\"Supreme Court of the United States\", \"High Courts of Justice of Spain\").\n.output Answer", "completions": [".decl Is_analogous(Court_A:symbol, Court_B:symbol)\nIs_analogous(\"Supreme Court of the United States\", \"High Courts of Justice of Spain\").\n.decl Answer()\nAnswer() :- Is_analogous(\"Supreme Court of the United States\", \"High Courts of Justice of Spain\").\n.output Answer"]}
{"id": 1569, "answer": true, "completion": ".decl Knows(Person:symbol, Knowledge:symbol)\nKnows(\"Jack Sparrow\", \"sea shantys\").\n.decl Answer()\nAnswer() :- Knows(\"Jack Sparrow\", \"sea shantys\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Knowledge:symbol)\nKnows(\"Jack Sparrow\", \"sea shantys\").\n.decl Answer()\nAnswer() :- Knows(\"Jack Sparrow\", \"sea shantys\").\n.output Answer"]}
{"id": 1570, "answer": true, "completion": ".decl Rides_to_work(Nationality:symbol, Animal:symbol)\nRides_to_work(\"Australian\", \"Kangaroo\").\n.decl Answer()\nAnswer() :- Rides_to_work(\"Australian\", \"Kangaroo\").\n.output Answer", "completions": [".decl Rides_to_work(Nationality:symbol, Animal:symbol)\nRides_to_work(\"Australian\", \"Kangaroo\").\n.decl Answer()\nAnswer() :- Rides_to_work(\"Australian\", \"Kangaroo\").\n.output Answer"]}
{"id": 1571, "answer": true, "completion": ".decl Patronage(Patron:symbol, Artist:symbol, Exclusive:float)\nPatronage(\"Lorenzo de Medici\", \"Leonardo da Vinci\", 0).\n.decl Other_patron(Patron:symbol, Artist:symbol)\nOther_patron(\"Ludovico Sforza\", \"Leonardo da Vinci\").\n.decl Answer()\nAnswer() :- Patronage(\"Lorenzo de Medici\", \"Leonardo da Vinci\", exclusive), Other_patron(other_patron, \"Leonardo da Vinci\"), exclusive = 0.\n.output Answer", "completions": [".decl Patronage(Patron:symbol, Artist:symbol, Exclusive:float)\nPatronage(\"Lorenzo de Medici\", \"Leonardo da Vinci\", 0).\n.decl Other_patron(Patron:symbol, Artist:symbol)\nOther_patron(\"Ludovico Sforza\", \"Leonardo da Vinci\").\n.decl Answer()\nAnswer() :- Patronage(\"Lorenzo de Medici\", \"Leonardo da Vinci\", exclusive), Other_patron(other_patron, \"Leonardo da Vinci\"), exclusive = 0.\n.output Answer"]}
{"id": 1572, "answer": true, "completion": ".decl Is_expert(Person:symbol, Field:symbol)\nIs_expert(\"Lee Sedol\", \"Go\").\n.decl Is_related(Field_A:symbol, Field_B:symbol)\nIs_related(\"Go\", \"Chess\").\n.decl Answer()\nAnswer() :- Is_expert(\"Lee Sedol\", \"Sicilian Defence\").\nAnswer() :- Is_expert(\"Lee Sedol\", field1), Is_related(field1, \"Chess\"), Is_related(\"Sicilian Defence\", \"Chess\").\n.output Answer", "completions": [".decl Is_expert(Person:symbol, Field:symbol)\nIs_expert(\"Lee Sedol\", \"Go\").\n.decl Is_related(Field_A:symbol, Field_B:symbol)\nIs_related(\"Go\", \"Chess\").\n.decl Answer()\nAnswer() :- Is_expert(\"Lee Sedol\", \"Sicilian Defence\").\nAnswer() :- Is_expert(\"Lee Sedol\", field1), Is_related(field1, \"Chess\"), Is_related(\"Sicilian Defence\", \"Chess\").\n.output Answer"]}
{"id": 1573, "answer": true, "completion": ".decl Descendants(Person1:symbol, Person2:symbol)\nDescendants(\"Genghis Khan\", \"Citizens of Bern Switzerland\").\n.decl Answer()\nAnswer() :- Descendants(\"Genghis Khan\", \"Citizens of Bern Switzerland\").\n.output Answer", "completions": [".decl Descendants(Person1:symbol, Person2:symbol)\nDescendants(\"Genghis Khan\", \"Citizens of Bern Switzerland\").\n.decl Answer()\nAnswer() :- Descendants(\"Genghis Khan\", \"Citizens of Bern Switzerland\").\n.output Answer"]}
{"id": 1574, "answer": false, "completion": ".decl Has_seats(Car:symbol, Seats:float)\nHas_seats(\"Maruti Suzuki Baleno\", 5).\n.decl Has_family_members(Person:symbol, Family_members:float)\nHas_family_members(\"Linus Torvald\", 4).\n.decl Is_efficient_car(Person:symbol, Car:symbol)\nIs_efficient_car(person, car) :- Has_seats(car, seats), Has_family_members(person, family_members), seats >= family_members.\n.decl Answer()\nAnswer() :- Is_efficient_car(\"Linus Torvald\", \"Maruti Suzuki Baleno\").\n.output Answer", "completions": [".decl Has_seats(Car:symbol, Seats:float)\nHas_seats(\"Maruti Suzuki Baleno\", 5).\n.decl Has_family_members(Person:symbol, Family_members:float)\nHas_family_members(\"Linus Torvald\", 4).\n.decl Is_efficient_car(Person:symbol, Car:symbol)\nIs_efficient_car(person, car) :- Has_seats(car, seats), Has_family_members(person, family_members), seats >= family_members.\n.decl Answer()\nAnswer() :- Is_efficient_car(\"Linus Torvald\", \"Maruti Suzuki Baleno\").\n.output Answer"]}
{"id": 1575, "answer": false, "completion": ".decl Existed_in_time(Object:symbol, Start_year:float, End_year:float)\nExisted_in_time(\"Walkman\", 1979, 2010).\nExisted_in_time(\"Kingdom of Hungary\", 1000, 1946).\n.decl Answer()\nAnswer() :- Existed_in_time(\"Walkman\", start_year1, end_year1), Existed_in_time(\"Kingdom of Hungary\", start_year2, end_year2), start_year1 <= end_year2, end_year1 >= start_year2.\n.output Answer", "completions": [".decl Existed_in_time(Object:symbol, Start_year:float, End_year:float)\nExisted_in_time(\"Walkman\", 1979, 2010).\nExisted_in_time(\"Kingdom of Hungary\", 1000, 1946).\n.decl Answer()\nAnswer() :- Existed_in_time(\"Walkman\", start_year1, end_year1), Existed_in_time(\"Kingdom of Hungary\", start_year2, end_year2), start_year1 <= end_year2, end_year1 >= start_year2.\n.output Answer"]}
{"id": 1576, "answer": true, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Pantheon in Paris\", \"Pantheon\").\nHas_name(\"Pantheon in Rome\", \"Pantheon\").\n.decl Answer()\nAnswer() :- Has_name(\"Pantheon in Paris\", name1), !Has_name(other_object, name1), other_object != \"Pantheon in Paris\".\n.output Answer", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Pantheon in Paris\", \"Pantheon\").\nHas_name(\"Pantheon in Rome\", \"Pantheon\").\n.decl Answer()\nAnswer() :- Has_name(\"Pantheon in Paris\", name1), !Has_name(other_object, name1), other_object != \"Pantheon in Paris\".\n.output Answer"]}
{"id": 1577, "answer": true, "completion": ".decl Has_no_tip(Country:symbol)\nHas_no_tip(\"Japan\").\nHas_no_tip(\"South Korea\").\nHas_no_tip(\"China\").\n.decl Answer()\nAnswer() :- Has_no_tip(country).\n.output Answer", "completions": [".decl Has_no_tip(Country:symbol)\nHas_no_tip(\"Japan\").\nHas_no_tip(\"South Korea\").\nHas_no_tip(\"China\").\n.decl Answer()\nAnswer() :- Has_no_tip(country).\n.output Answer"]}
{"id": 1578, "answer": false, "completion": ".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Vice President of the United States\", \"political leader\").\n.decl Has_ability(Role:symbol, Ability:symbol)\nHas_ability(\"political leader\", \"kill with impunity\").\n.decl Answer()\nAnswer() :- Has_role(\"Vice President of the United States\", role), Has_ability(role, \"kill with impunity\").\n.output Answer", "completions": [".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Vice President of the United States\", \"political leader\").\n.decl Has_ability(Role:symbol, Ability:symbol)\nHas_ability(\"political leader\", \"kill with impunity\").\n.decl Answer()\nAnswer() :- Has_role(\"Vice President of the United States\", role), Has_ability(role, \"kill with impunity\").\n.output Answer"]}
{"id": 1579, "answer": false, "completion": ".decl Graduated(Person:symbol, University:symbol, Year:float)\nGraduated(\"Bruce Lee\", \"University of Washington\", 1964).\n.decl Absent(Person:symbol, Event:symbol, Year:float)\n.decl Answer()\nAnswer() :- !Graduated(\"Bruce Lee\", \"University of Washington\", 1964), Absent(\"Bruce Lee\", \"graduation ceremony\", 1964).\n.output Answer", "completions": [".decl Graduated(Person:symbol, University:symbol, Year:float)\nGraduated(\"Bruce Lee\", \"University of Washington\", 1964).\n.decl Absent(Person:symbol, Event:symbol, Year:float)\n.decl Answer()\nAnswer() :- !Graduated(\"Bruce Lee\", \"University of Washington\", 1964), Absent(\"Bruce Lee\", \"graduation ceremony\", 1964).\n.output Answer"]}
{"id": 1580, "answer": false, "completion": ".decl Is_weapon(Object:symbol)\nIs_weapon(\"knife\").\nIs_weapon(\"gun\").\nIs_weapon(\"baseball bat\").\n.decl Answer()\nAnswer() :- Is_weapon(\"jackfruit\").\n.output Answer", "completions": [".decl Is_weapon(Object:symbol)\nIs_weapon(\"knife\").\nIs_weapon(\"gun\").\nIs_weapon(\"baseball bat\").\n.decl Answer()\nAnswer() :- Is_weapon(\"jackfruit\").\n.output Answer"]}
{"id": 1581, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Napoleonic Wars\", 12).\n.decl Takes_n_years(Event:symbol, N_years:float)\nTakes_n_years(\"Earth orbit around the sun\", 1).\n.decl Answer()\nAnswer() :- Takes_n_years(\"Earth orbit around the sun\", n_years1), Last_n_years(\"Napoleonic Wars\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Napoleonic Wars\", 12).\n.decl Takes_n_years(Event:symbol, N_years:float)\nTakes_n_years(\"Earth orbit around the sun\", 1).\n.decl Answer()\nAnswer() :- Takes_n_years(\"Earth orbit around the sun\", n_years1), Last_n_years(\"Napoleonic Wars\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1582, "answer": true, "completion": ".decl Grows_in(Plant:symbol, Region:symbol)\nGrows_in(\"Coca plant\", \"South America\").\n.decl Located_in(City:symbol, Region:symbol)\nLocated_in(\"Yakutsk\", \"Siberia\").\n.decl Answer()\nAnswer() :- Grows_in(\"Coca plant\", region1), Located_in(\"Yakutsk\", region2), region1 = region2.\n.output Answer", "completions": [".decl Grows_in(Plant:symbol, Region:symbol)\nGrows_in(\"Coca plant\", \"South America\").\n.decl Located_in(City:symbol, Region:symbol)\nLocated_in(\"Yakutsk\", \"Siberia\").\n.decl Answer()\nAnswer() :- Grows_in(\"Coca plant\", region1), Located_in(\"Yakutsk\", region2), region1 = region2.\n.output Answer"]}
{"id": 1583, "answer": true, "completion": ".decl Is_related(Animal_A:symbol, Animal_B:symbol)\nIs_related(\"saltwater crocodile\", \"alligator\").\nIs_related(\"alligator\", \"saltwater crocodile\").\n.decl Answer()\nAnswer() :- Is_related(\"saltwater crocodile\", \"alligator\").\n.output Answer", "completions": [".decl Is_related(Animal_A:symbol, Animal_B:symbol)\nIs_related(\"saltwater crocodile\", \"alligator\").\nIs_related(\"alligator\", \"saltwater crocodile\").\n.decl Answer()\nAnswer() :- Is_related(\"saltwater crocodile\", \"alligator\").\n.output Answer"]}
{"id": 1584, "answer": true, "completion": ".decl Saves_soul(Leader:symbol, Religion_A:symbol, Religion_B:symbol)\nSaves_soul(\"rabbi\", \"Judaism\", \"Judaism\").\nSaves_soul(\"priest\", \"Christianity\", \"Christianity\").\nSaves_soul(\"imam\", \"Islam\", \"Islam\").\n.decl Answer()\nAnswer() :- Saves_soul(\"rabbi\", \"Judaism\", \"Christianity\").\n.output Answer", "completions": [".decl Saves_soul(Leader:symbol, Religion_A:symbol, Religion_B:symbol)\nSaves_soul(\"rabbi\", \"Judaism\", \"Judaism\").\nSaves_soul(\"priest\", \"Christianity\", \"Christianity\").\nSaves_soul(\"imam\", \"Islam\", \"Islam\").\n.decl Answer()\nAnswer() :- Saves_soul(\"rabbi\", \"Judaism\", \"Christianity\").\n.output Answer"]}
{"id": 1585, "answer": true, "completion": ".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"NY highest recorded temperature\", 106).\n.decl Is_survivable(Temperature:float)\nIs_survivable(T) :- T >= 95, T <= 108.\n.decl Answer()\nAnswer() :- Has_temperature(\"NY highest recorded temperature\", temperature), Is_survivable(temperature).\n.output Answer", "completions": [".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"NY highest recorded temperature\", 106).\n.decl Is_survivable(Temperature:float)\nIs_survivable(T) :- T >= 95, T <= 108.\n.decl Answer()\nAnswer() :- Has_temperature(\"NY highest recorded temperature\", temperature), Is_survivable(temperature).\n.output Answer"]}
{"id": 1586, "answer": false, "completion": ".decl Has_protection(Role:symbol, Protection:symbol)\nHas_protection(\"Mayor\", \"local government\").\nHas_protection(\"Federal government\", \"federal government\").\n.decl Can_harm(Role_A:symbol, Role_B:symbol)\nCan_harm(\"Federal government\", \"Mayor\").\n.decl Answer()\nAnswer() :- Has_protection(\"Mayor\", protection1), Has_protection(\"Federal government\", protection2), protection1 != protection2, !Can_harm(\"Federal government\", \"Mayor\").\n.output Answer", "completions": [".decl Has_protection(Role:symbol, Protection:symbol)\nHas_protection(\"Mayor\", \"local government\").\nHas_protection(\"Federal government\", \"federal government\").\n.decl Can_harm(Role_A:symbol, Role_B:symbol)\nCan_harm(\"Federal government\", \"Mayor\").\n.decl Answer()\nAnswer() :- Has_protection(\"Mayor\", protection1), Has_protection(\"Federal government\", protection2), protection1 != protection2, !Can_harm(\"Federal government\", \"Mayor\").\n.output Answer"]}
{"id": 1587, "answer": true, "completion": ".decl Is_near(Country_A:symbol, Country_B:symbol)\nIs_near(\"Nepal\", \"India\").\n.decl Took_place_in(Event:symbol, Country:symbol)\nTook_place_in(\"Nepalese Civil War\", \"Nepal\").\n.decl Answer()\nAnswer() :- Took_place_in(\"Nepalese Civil War\", country1), Is_near(country1, \"India\").\n.output Answer", "completions": [".decl Is_near(Country_A:symbol, Country_B:symbol)\nIs_near(\"Nepal\", \"India\").\n.decl Took_place_in(Event:symbol, Country:symbol)\nTook_place_in(\"Nepalese Civil War\", \"Nepal\").\n.decl Answer()\nAnswer() :- Took_place_in(\"Nepalese Civil War\", country1), Is_near(country1, \"India\").\n.output Answer"]}
{"id": 1588, "answer": false, "completion": ".decl Is_outdoor(Sport:symbol)\nIs_outdoor(\"rowing\").\n.decl Has_indoor_version(Sport:symbol)\nHas_indoor_version(\"rowing\").\n.decl Answer()\nAnswer() :- !Is_outdoor(\"rowing\").\nAnswer() :- Has_indoor_version(\"rowing\").\n.output Answer", "completions": [".decl Is_outdoor(Sport:symbol)\nIs_outdoor(\"rowing\").\n.decl Has_indoor_version(Sport:symbol)\nHas_indoor_version(\"rowing\").\n.decl Answer()\nAnswer() :- !Is_outdoor(\"rowing\").\nAnswer() :- Has_indoor_version(\"rowing\").\n.output Answer"]}
{"id": 1589, "answer": true, "completion": ".decl Attends(Person:symbol, Academy:symbol)\nAttends(\"Jamie Brewer\", \"United States Naval Academy\").\n.decl Has_requirement(Academy:symbol, Requirement:symbol)\nHas_requirement(\"United States Naval Academy\", \"US citizenship\").\nHas_requirement(\"United States Naval Academy\", \"age between 17 and 23\").\nHas_requirement(\"United States Naval Academy\", \"unmarried\").\nHas_requirement(\"United States Naval Academy\", \"no dependents\").\n.decl Meets_requirement(Person:symbol, Requirement:symbol)\nMeets_requirement(\"Jamie Brewer\", \"US citizenship\").\nMeets_requirement(\"Jamie Brewer\", \"age between 17 and 23\").\nMeets_requirement(\"Jamie Brewer\", \"unmarried\").\nMeets_requirement(\"Jamie Brewer\", \"no dependents\").\n.decl Answer()\nAnswer() :- Attends(\"Jamie Brewer\", \"United States Naval Academy\").\nAnswer() :- Meets_requirement(\"Jamie Brewer\", requirement1), Has_requirement(\"United States Naval Academy\", requirement1).\n.output Answer", "completions": [".decl Attends(Person:symbol, Academy:symbol)\nAttends(\"Jamie Brewer\", \"United States Naval Academy\").\n.decl Has_requirement(Academy:symbol, Requirement:symbol)\nHas_requirement(\"United States Naval Academy\", \"US citizenship\").\nHas_requirement(\"United States Naval Academy\", \"age between 17 and 23\").\nHas_requirement(\"United States Naval Academy\", \"unmarried\").\nHas_requirement(\"United States Naval Academy\", \"no dependents\").\n.decl Meets_requirement(Person:symbol, Requirement:symbol)\nMeets_requirement(\"Jamie Brewer\", \"US citizenship\").\nMeets_requirement(\"Jamie Brewer\", \"age between 17 and 23\").\nMeets_requirement(\"Jamie Brewer\", \"unmarried\").\nMeets_requirement(\"Jamie Brewer\", \"no dependents\").\n.decl Answer()\nAnswer() :- Attends(\"Jamie Brewer\", \"United States Naval Academy\").\nAnswer() :- Meets_requirement(\"Jamie Brewer\", requirement1), Has_requirement(\"United States Naval Academy\", requirement1).\n.output Answer"]}
{"id": 1590, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"largest asteroid\", 1000).\nHas_size(\"whole city\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"largest asteroid\", size1), Has_size(\"whole city\", size2), size1 > size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"largest asteroid\", 1000).\nHas_size(\"whole city\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"largest asteroid\", size1), Has_size(\"whole city\", size2), size1 > size2.\n.output Answer"]}
{"id": 1591, "answer": false, "completion": ".decl Has_Academy_Awards(Person:symbol, N_Awards:float)\nHas_Academy_Awards(\"Walt Disney\", 22).\n.decl Has_Amusement_Park(Person:symbol)\nHas_Amusement_Park(\"Walt Disney\").\n.decl Dominates(Person_A:symbol, Person_B:symbol)\nDominates(Person_A, Person_B) :- Has_Academy_Awards(Person_A, N_Awards_A), Has_Academy_Awards(Person_B, N_Awards_B), N_Awards_A > N_Awards_B.\n.decl Answer()\nAnswer() :- Has_Amusement_Park(\"Walt Disney\"), !Has_Amusement_Park(peer), Dominates(\"Walt Disney\", peer).\n.output Answer", "completions": [".decl Has_Academy_Awards(Person:symbol, N_Awards:float)\nHas_Academy_Awards(\"Walt Disney\", 22).\n.decl Has_Amusement_Park(Person:symbol)\nHas_Amusement_Park(\"Walt Disney\").\n.decl Dominates(Person_A:symbol, Person_B:symbol)\nDominates(Person_A, Person_B) :- Has_Academy_Awards(Person_A, N_Awards_A), Has_Academy_Awards(Person_B, N_Awards_B), N_Awards_A > N_Awards_B.\n.decl Answer()\nAnswer() :- Has_Amusement_Park(\"Walt Disney\"), !Has_Amusement_Park(peer), Dominates(\"Walt Disney\", peer).\n.output Answer"]}
{"id": 1592, "answer": false, "completion": ".decl Sold_out(Performer:symbol, Venue:symbol)\nSold_out(\"Billy Joel\", \"Astana Arena\").\n.decl Answer()\nAnswer() :- Sold_out(\"Billy Joel\", \"Astana Arena\").\n.output Answer", "completions": [".decl Sold_out(Performer:symbol, Venue:symbol)\nSold_out(\"Billy Joel\", \"Astana Arena\").\n.decl Answer()\nAnswer() :- Sold_out(\"Billy Joel\", \"Astana Arena\").\n.output Answer"]}
{"id": 1593, "answer": false, "completion": ".decl Is_part_of(Region_A:symbol, Region_B:symbol)\nIs_part_of(\"Mesopotamia\", \"Iraq\").\nIs_part_of(\"Mesopotamia\", \"Syria\").\nIs_part_of(\"Mesopotamia\", \"Kuwait\").\nIs_part_of(\"Mesopotamia\", \"Turkey\").\nIs_part_of(\"Mesopotamia\", \"Iran\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Mesopotamia\", \"China\").\n.output Answer", "completions": [".decl Is_part_of(Region_A:symbol, Region_B:symbol)\nIs_part_of(\"Mesopotamia\", \"Iraq\").\nIs_part_of(\"Mesopotamia\", \"Syria\").\nIs_part_of(\"Mesopotamia\", \"Kuwait\").\nIs_part_of(\"Mesopotamia\", \"Turkey\").\nIs_part_of(\"Mesopotamia\", \"Iran\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Mesopotamia\", \"China\").\n.output Answer"]}
{"id": 1594, "answer": true, "completion": ".decl Is_martyr_saint(Person:symbol)\nIs_martyr_saint(\"Person A\").\n.decl Is_excommunicated(Person:symbol)\nIs_excommunicated(\"Person B\").\n.decl Answer()\nAnswer() :- Is_martyr_saint(person), Is_excommunicated(person).\n.output Answer", "completions": [".decl Is_martyr_saint(Person:symbol)\nIs_martyr_saint(\"Person A\").\n.decl Is_excommunicated(Person:symbol)\nIs_excommunicated(\"Person B\").\n.decl Answer()\nAnswer() :- Is_martyr_saint(person), Is_excommunicated(person).\n.output Answer"]}
{"id": 1595, "answer": true, "completion": ".decl Needs_car(Job:symbol, Need_car:symbol)\nNeeds_car(\"district management\", \"yes\").\n.decl Answer()\nAnswer() :- Needs_car(\"district management\", \"yes\").\n.output Answer", "completions": [".decl Needs_car(Job:symbol, Need_car:symbol)\nNeeds_car(\"district management\", \"yes\").\n.decl Answer()\nAnswer() :- Needs_car(\"district management\", \"yes\").\n.output Answer"]}
{"id": 1596, "answer": false, "completion": ".decl Can_break(Object:symbol, Substance:symbol)\nCan_break(\"glass\", \"nitric acid\").\nCan_break(\"metal\", \"nitric acid\").\n.decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"Louvre\", \"glass\").\nHas_material(\"Louvre\", \"metal\").\n.decl Answer()\nAnswer() :- Has_material(\"Louvre\", material), Can_break(material, \"nitric acid\").\n.output Answer", "completions": [".decl Can_break(Object:symbol, Substance:symbol)\nCan_break(\"glass\", \"nitric acid\").\nCan_break(\"metal\", \"nitric acid\").\n.decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"Louvre\", \"glass\").\nHas_material(\"Louvre\", \"metal\").\n.decl Answer()\nAnswer() :- Has_material(\"Louvre\", material), Can_break(material, \"nitric acid\").\n.output Answer"]}
{"id": 1597, "answer": true, "completion": ".decl Provides_data(Subject:symbol, Field:symbol)\nProvides_data(\"hornets\", \"entomology\").\nProvides_data(\"ocean\", \"oceanography\").\n.decl Answer()\nAnswer() :- Provides_data(\"hornets\", \"oceanography\").\n.output Answer", "completions": [".decl Provides_data(Subject:symbol, Field:symbol)\nProvides_data(\"hornets\", \"entomology\").\nProvides_data(\"ocean\", \"oceanography\").\n.decl Answer()\nAnswer() :- Provides_data(\"hornets\", \"oceanography\").\n.output Answer"]}
{"id": 1598, "answer": false, "completion": ".decl Wore(Person:symbol, Brand:symbol, Event:symbol)\nWore(\"Jackie Kennedy\", \"Dolce & Gabbana\", \"husband's inauguration\").\n.decl Event_happened(Event:symbol, Year:float)\nEvent_happened(\"husband's inauguration\", 1961).\n.decl Brand_founded(Brand:symbol, Year:float)\nBrand_founded(\"Dolce & Gabbana\", 1985).\n.decl Answer()\nAnswer() :- Wore(\"Jackie Kennedy\", \"Dolce & Gabbana\", \"husband's inauguration\"), Event_happened(\"husband's inauguration\", year1), Brand_founded(\"Dolce & Gabbana\", year2), year1 < year2.\n.output Answer", "completions": [".decl Wore(Person:symbol, Brand:symbol, Event:symbol)\nWore(\"Jackie Kennedy\", \"Dolce & Gabbana\", \"husband's inauguration\").\n.decl Event_happened(Event:symbol, Year:float)\nEvent_happened(\"husband's inauguration\", 1961).\n.decl Brand_founded(Brand:symbol, Year:float)\nBrand_founded(\"Dolce & Gabbana\", 1985).\n.decl Answer()\nAnswer() :- Wore(\"Jackie Kennedy\", \"Dolce & Gabbana\", \"husband's inauguration\"), Event_happened(\"husband's inauguration\", year1), Brand_founded(\"Dolce & Gabbana\", year2), year1 < year2.\n.output Answer"]}
{"id": 1599, "answer": true, "completion": ".decl Produces(Product:symbol, Producer:symbol)\nProduces(\"toilet paper\", \"loggers\").\n.decl Exists(Thing:symbol)\nExists(\"loggers\").\n.decl Answer()\nAnswer() :- Produces(\"toilet paper\", producer), !Exists(producer).\n.output Answer", "completions": [".decl Produces(Product:symbol, Producer:symbol)\nProduces(\"toilet paper\", \"loggers\").\n.decl Exists(Thing:symbol)\nExists(\"loggers\").\n.decl Answer()\nAnswer() :- Produces(\"toilet paper\", producer), !Exists(producer).\n.output Answer"]}
{"id": 1600, "answer": false, "completion": ".decl Has_max_strength(Person:symbol, Max_strength:float)\nHas_max_strength(\"Arnold Schwarzenegger\", 1000).\nHas_max_strength(\"Hafþór Björnsson\", 1100).\n.decl Answer()\nAnswer() :- Has_max_strength(\"Arnold Schwarzenegger\", strength1), Has_max_strength(\"Hafþór Björnsson\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_max_strength(Person:symbol, Max_strength:float)\nHas_max_strength(\"Arnold Schwarzenegger\", 1000).\nHas_max_strength(\"Hafþór Björnsson\", 1100).\n.decl Answer()\nAnswer() :- Has_max_strength(\"Arnold Schwarzenegger\", strength1), Has_max_strength(\"Hafþór Björnsson\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 1601, "answer": false, "completion": ".decl Appears_in_place(Object:symbol, Place:symbol)\nAppears_in_place(\"666\", \"Book of Revelation\").\n.decl Located_in(Object:symbol, Place:symbol)\nLocated_in(\"Book of Revelation\", \"Bible\").\nLocated_in(\"Bible\", \"church\").\n.decl Answer()\nAnswer() :- Appears_in_place(\"666\", object), Located_in(object, \"church\").\n.output Answer", "completions": [".decl Appears_in_place(Object:symbol, Place:symbol)\nAppears_in_place(\"666\", \"Book of Revelation\").\n.decl Located_in(Object:symbol, Place:symbol)\nLocated_in(\"Book of Revelation\", \"Bible\").\nLocated_in(\"Bible\", \"church\").\n.decl Answer()\nAnswer() :- Appears_in_place(\"666\", object), Located_in(object, \"church\").\n.output Answer"]}
{"id": 1602, "answer": true, "completion": ".decl Lived_during(Person:symbol, Start_year:float, End_year:float)\nLived_during(\"Elizabeth I of England\", 1533, 1603).\n.decl Play_written(Play:symbol, Year:float)\nPlay_written(\"Dido, Queen of Carthage\", 1594).\n.decl Answer()\nAnswer() :- Lived_during(\"Elizabeth I of England\", start_year, end_year), Play_written(\"Dido, Queen of Carthage\", year), year >= start_year, year <= end_year.\n.output Answer", "completions": [".decl Lived_during(Person:symbol, Start_year:float, End_year:float)\nLived_during(\"Elizabeth I of England\", 1533, 1603).\n.decl Play_written(Play:symbol, Year:float)\nPlay_written(\"Dido, Queen of Carthage\", 1594).\n.decl Answer()\nAnswer() :- Lived_during(\"Elizabeth I of England\", start_year, end_year), Play_written(\"Dido, Queen of Carthage\", year), year >= start_year, year <= end_year.\n.output Answer"]}
{"id": 1603, "answer": true, "completion": ".decl Has_conservation_status(Species:symbol, Status:symbol)\nHas_conservation_status(\"saltwater crocodile\", \"least concern\").\nHas_conservation_status(\"European otter\", \"near threatened\").\n.decl Status_rank(Status:symbol, Rank:float)\nStatus_rank(\"least concern\", 1).\nStatus_rank(\"near threatened\", 2).\nStatus_rank(\"vulnerable\", 3).\nStatus_rank(\"endangered\", 4).\nStatus_rank(\"critically endangered\", 5).\nStatus_rank(\"extinct in the wild\", 6).\nStatus_rank(\"extinct\", 7).\n.decl Answer()\nAnswer() :- Has_conservation_status(\"saltwater crocodile\", status1), Has_conservation_status(\"European otter\", status2), Status_rank(status1, rank1), Status_rank(status2, rank2), rank1 < rank2.\n.output Answer", "completions": [".decl Has_conservation_status(Species:symbol, Status:symbol)\nHas_conservation_status(\"saltwater crocodile\", \"least concern\").\nHas_conservation_status(\"European otter\", \"near threatened\").\n.decl Status_rank(Status:symbol, Rank:float)\nStatus_rank(\"least concern\", 1).\nStatus_rank(\"near threatened\", 2).\nStatus_rank(\"vulnerable\", 3).\nStatus_rank(\"endangered\", 4).\nStatus_rank(\"critically endangered\", 5).\nStatus_rank(\"extinct in the wild\", 6).\nStatus_rank(\"extinct\", 7).\n.decl Answer()\nAnswer() :- Has_conservation_status(\"saltwater crocodile\", status1), Has_conservation_status(\"European otter\", status2), Status_rank(status1, rank1), Status_rank(status2, rank2), rank1 < rank2.\n.output Answer"]}
{"id": 1604, "answer": true, "completion": ".decl Has_colors(Object:symbol, Color:symbol)\nHas_colors(\"giant panda\", \"black\").\nHas_colors(\"giant panda\", \"white\").\nHas_colors(\"yin yang\", \"black\").\nHas_colors(\"yin yang\", \"white\").\n.decl Answer()\nAnswer() :- Has_colors(\"giant panda\", color1), !Has_colors(\"yin yang\", color1).\n.output Answer", "completions": [".decl Has_colors(Object:symbol, Color:symbol)\nHas_colors(\"giant panda\", \"black\").\nHas_colors(\"giant panda\", \"white\").\nHas_colors(\"yin yang\", \"black\").\nHas_colors(\"yin yang\", \"white\").\n.decl Answer()\nAnswer() :- Has_colors(\"giant panda\", color1), !Has_colors(\"yin yang\", color1).\n.output Answer"]}
{"id": 1605, "answer": true, "completion": ".decl Reigns(Queen:symbol, Start_year:float, End_year:float)\nReigns(\"Elizabeth II\", 1952, 9999).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Persian Gulf War\", 1990).\nHappens_in_year(\"Persian Gulf War\", 1991).\n.decl Answer()\nAnswer() :- Reigns(\"Elizabeth II\", start_year, end_year), Happens_in_year(\"Persian Gulf War\", year), year >= start_year, year <= end_year.\n.output Answer", "completions": [".decl Reigns(Queen:symbol, Start_year:float, End_year:float)\nReigns(\"Elizabeth II\", 1952, 9999).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Persian Gulf War\", 1990).\nHappens_in_year(\"Persian Gulf War\", 1991).\n.decl Answer()\nAnswer() :- Reigns(\"Elizabeth II\", start_year, end_year), Happens_in_year(\"Persian Gulf War\", year), year >= start_year, year <= end_year.\n.output Answer"]}
{"id": 1606, "answer": false, "completion": ".decl Is_effective_for(Action:symbol, Purpose:symbol)\nIs_effective_for(\"Modafinil\", \"promoting wakefulness\").\nIs_effective_for(\"Modafinil\", \"enhancing cognitive performance\").\n.decl Answer()\nAnswer() :- Is_effective_for(\"Modafinil\", \"completing a suicide\").\n.output Answer", "completions": [".decl Is_effective_for(Action:symbol, Purpose:symbol)\nIs_effective_for(\"Modafinil\", \"promoting wakefulness\").\nIs_effective_for(\"Modafinil\", \"enhancing cognitive performance\").\n.decl Answer()\nAnswer() :- Is_effective_for(\"Modafinil\", \"completing a suicide\").\n.output Answer"]}
{"id": 1607, "answer": false, "completion": ".decl Eats_with_utensil(Food:symbol, Utensil:symbol)\nEats_with_utensil(\"spaghetti\", \"fork\").\n.decl Unusual(Food:symbol, Utensil:symbol)\nUnusual(\"spaghetti\", \"no utensil\").\n.decl Answer()\nAnswer() :- Unusual(\"spaghetti\", \"no utensil\").\nAnswer() :- Eats_with_utensil(\"spaghetti\", utensil), utensil != \"fork\", !Unusual(\"spaghetti\", utensil).\n.output Answer", "completions": [".decl Eats_with_utensil(Food:symbol, Utensil:symbol)\nEats_with_utensil(\"spaghetti\", \"fork\").\n.decl Unusual(Food:symbol, Utensil:symbol)\nUnusual(\"spaghetti\", \"no utensil\").\n.decl Answer()\nAnswer() :- Unusual(\"spaghetti\", \"no utensil\").\nAnswer() :- Eats_with_utensil(\"spaghetti\", utensil), utensil != \"fork\", !Unusual(\"spaghetti\", utensil).\n.output Answer"]}
{"id": 1608, "answer": true, "completion": ".decl Born_in_country(Person:symbol, Country:symbol)\nBorn_in_country(\"Arnold Schwarzenegger\", \"Austria\").\n.decl Eligible_for_presidency(Person:symbol)\nEligible_for_presidency(person) :- Born_in_country(person, \"United States\").\n.decl Answer()\nAnswer() :- !Eligible_for_presidency(\"Arnold Schwarzenegger\").\n.output Answer", "completions": [".decl Born_in_country(Person:symbol, Country:symbol)\nBorn_in_country(\"Arnold Schwarzenegger\", \"Austria\").\n.decl Eligible_for_presidency(Person:symbol)\nEligible_for_presidency(person) :- Born_in_country(person, \"United States\").\n.decl Answer()\nAnswer() :- !Eligible_for_presidency(\"Arnold Schwarzenegger\").\n.output Answer"]}
{"id": 1609, "answer": true, "completion": ".decl Has_percentage(Belief:symbol, Year:float, Percentage:float)\nHas_percentage(\"atheism\", 2021, 3).\nHas_percentage(\"Christianity\", 2021, 79).\n.decl Answer()\nAnswer() :- Has_percentage(\"atheism\", 2021, percentage1), Has_percentage(\"Christianity\", 2021, percentage2), percentage1 > percentage2.\n.output Answer", "completions": [".decl Has_percentage(Belief:symbol, Year:float, Percentage:float)\nHas_percentage(\"atheism\", 2021, 3).\nHas_percentage(\"Christianity\", 2021, 79).\n.decl Answer()\nAnswer() :- Has_percentage(\"atheism\", 2021, percentage1), Has_percentage(\"Christianity\", 2021, percentage2), percentage1 > percentage2.\n.output Answer"]}
{"id": 1610, "answer": false, "completion": ".decl Has_setting_year(Film:symbol, Year:float)\nHas_setting_year(\"Steven Spielberg's 1998 film\", 1944).\nHas_setting_year(\"War Horse\", 1914).\n.decl Answer()\nAnswer() :- Has_setting_year(\"Steven Spielberg's 1998 film\", year1), Has_setting_year(\"War Horse\", year2), year1 > year2.\n.output Answer", "completions": [".decl Has_setting_year(Film:symbol, Year:float)\nHas_setting_year(\"Steven Spielberg's 1998 film\", 1944).\nHas_setting_year(\"War Horse\", 1914).\n.decl Answer()\nAnswer() :- Has_setting_year(\"Steven Spielberg's 1998 film\", year1), Has_setting_year(\"War Horse\", year2), year1 > year2.\n.output Answer"]}
{"id": 1611, "answer": true, "completion": ".decl Occurs_in_season(Event:symbol, Season:symbol)\nOccurs_in_season(\"bear pelt collection\", \"autumn\").\n.decl In_country(Event:symbol, Country:symbol)\nIn_country(\"bear pelt collection\", \"US\").\n.decl Answer()\nAnswer() :- Occurs_in_season(\"bear pelt collection\", \"autumn\"), In_country(\"bear pelt collection\", \"US\").\n.output Answer", "completions": [".decl Occurs_in_season(Event:symbol, Season:symbol)\nOccurs_in_season(\"bear pelt collection\", \"autumn\").\n.decl In_country(Event:symbol, Country:symbol)\nIn_country(\"bear pelt collection\", \"US\").\n.decl Answer()\nAnswer() :- Occurs_in_season(\"bear pelt collection\", \"autumn\"), In_country(\"bear pelt collection\", \"US\").\n.output Answer"]}
{"id": 1612, "answer": true, "completion": ".decl Has_trigger(Show:symbol, Trigger:symbol)\nHas_trigger(\"Rick and Morty\", \"alcoholism\").\n.decl Relevant_for_group(Trigger:symbol, Group:symbol)\nRelevant_for_group(\"alcoholism\", \"children of alcoholics\").\n.decl Answer()\nAnswer() :- Has_trigger(\"Rick and Morty\", trigger), Relevant_for_group(trigger, \"children of alcoholics\").\n.output Answer", "completions": [".decl Has_trigger(Show:symbol, Trigger:symbol)\nHas_trigger(\"Rick and Morty\", \"alcoholism\").\n.decl Relevant_for_group(Trigger:symbol, Group:symbol)\nRelevant_for_group(\"alcoholism\", \"children of alcoholics\").\n.decl Answer()\nAnswer() :- Has_trigger(\"Rick and Morty\", trigger), Relevant_for_group(trigger, \"children of alcoholics\").\n.output Answer"]}
{"id": 1613, "answer": false, "completion": ".decl Knows_about_ADA(Group:symbol)\nKnows_about_ADA(\"American wheelchair users\").\n.decl Answer()\nAnswer() :- Knows_about_ADA(\"American wheelchair users\").\n.output Answer", "completions": [".decl Knows_about_ADA(Group:symbol)\nKnows_about_ADA(\"American wheelchair users\").\n.decl Answer()\nAnswer() :- Knows_about_ADA(\"American wheelchair users\").\n.output Answer"]}
{"id": 1614, "answer": true, "completion": ".decl Has_season(Season:symbol, Location:symbol)\nHas_season(\"summer\", \"Sweden\").\n.decl Has_long_days(Season:symbol)\nHas_long_days(\"summer\").\n.decl Affects_astrophotography(Factor:symbol)\nAffects_astrophotography(\"long days\").\n.decl Answer()\nAnswer() :- Has_season(season, \"Sweden\"), Has_long_days(season), Affects_astrophotography(\"long days\").\n.output Answer", "completions": [".decl Has_season(Season:symbol, Location:symbol)\nHas_season(\"summer\", \"Sweden\").\n.decl Has_long_days(Season:symbol)\nHas_long_days(\"summer\").\n.decl Affects_astrophotography(Factor:symbol)\nAffects_astrophotography(\"long days\").\n.decl Answer()\nAnswer() :- Has_season(season, \"Sweden\"), Has_long_days(season), Affects_astrophotography(\"long days\").\n.output Answer"]}
{"id": 1615, "answer": false, "completion": ".decl Has_n_siblings(Person:symbol, N_siblings:float)\nHas_n_siblings(\"Jane Austen\", 7).\n.decl Suffers_middle_child_syndrome(Person:symbol)\nSuffers_middle_child_syndrome(\"Jane Austen\").\n.decl Answer()\nAnswer() :- Has_n_siblings(\"Jane Austen\", n_siblings), n_siblings >= 3, Suffers_middle_child_syndrome(\"Jane Austen\").\n.output Answer", "completions": [".decl Has_n_siblings(Person:symbol, N_siblings:float)\nHas_n_siblings(\"Jane Austen\", 7).\n.decl Suffers_middle_child_syndrome(Person:symbol)\nSuffers_middle_child_syndrome(\"Jane Austen\").\n.decl Answer()\nAnswer() :- Has_n_siblings(\"Jane Austen\", n_siblings), n_siblings >= 3, Suffers_middle_child_syndrome(\"Jane Austen\").\n.output Answer"]}
{"id": 1616, "answer": true, "completion": ".decl Is_rank(Person:symbol, Rank:symbol)\nIs_rank(\"Gomer Pyle\", \"private\").\nIs_rank(\"lieutenant\", \"officer\").\n.decl Salutes(Person_A:symbol, Person_B:symbol)\nSalutes(private, officer) :- Is_rank(private, \"private\"), Is_rank(officer, \"officer\").\n.decl Answer()\nAnswer() :- Salutes(\"Gomer Pyle\", \"lieutenant\").\n.output Answer", "completions": [".decl Is_rank(Person:symbol, Rank:symbol)\nIs_rank(\"Gomer Pyle\", \"private\").\nIs_rank(\"lieutenant\", \"officer\").\n.decl Salutes(Person_A:symbol, Person_B:symbol)\nSalutes(private, officer) :- Is_rank(private, \"private\"), Is_rank(officer, \"officer\").\n.decl Answer()\nAnswer() :- Salutes(\"Gomer Pyle\", \"lieutenant\").\n.output Answer"]}
{"id": 1617, "answer": true, "completion": ".decl Can_survive_on_planet(Organism:symbol, Planet:symbol)\nCan_survive_on_planet(\"Herpes simplex virus\", \"Earth\").\n.decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Earth\", 15).\nHas_temperature(\"Venus\", 464).\n.decl Has_pressure(Planet:symbol, Pressure:float)\nHas_pressure(\"Earth\", 1).\nHas_pressure(\"Venus\", 92).\n.decl Answer()\nAnswer() :- Can_survive_on_planet(\"Herpes simplex virus\", \"Venus\").\nAnswer() :- Can_survive_on_planet(\"Herpes simplex virus\", planet1), Has_temperature(planet1, temp1), Has_temperature(\"Venus\", temp2), temp1 >= temp2, Has_pressure(planet1, pressure1), Has_pressure(\"Venus\", pressure2), pressure1 >= pressure2.\n.output Answer", "completions": [".decl Can_survive_on_planet(Organism:symbol, Planet:symbol)\nCan_survive_on_planet(\"Herpes simplex virus\", \"Earth\").\n.decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Earth\", 15).\nHas_temperature(\"Venus\", 464).\n.decl Has_pressure(Planet:symbol, Pressure:float)\nHas_pressure(\"Earth\", 1).\nHas_pressure(\"Venus\", 92).\n.decl Answer()\nAnswer() :- Can_survive_on_planet(\"Herpes simplex virus\", \"Venus\").\nAnswer() :- Can_survive_on_planet(\"Herpes simplex virus\", planet1), Has_temperature(planet1, temp1), Has_temperature(\"Venus\", temp2), temp1 >= temp2, Has_pressure(planet1, pressure1), Has_pressure(\"Venus\", pressure2), pressure1 >= pressure2.\n.output Answer"]}
{"id": 1618, "answer": true, "completion": ".decl Is_related(Language_A:symbol, Language_B:symbol)\nIs_related(\"Pig Latin\", \"English\").\nIs_related(\"Latin\", \"Italian\").\nIs_related(\"Latin\", \"Spanish\").\nIs_related(\"Latin\", \"French\").\nIs_related(\"Latin\", \"Portuguese\").\nIs_related(\"Latin\", \"Romanian\").\n.decl Answer()\nAnswer() :- Is_related(\"Pig Latin\", language), Is_related(\"Latin\", language).\n.output Answer", "completions": [".decl Is_related(Language_A:symbol, Language_B:symbol)\nIs_related(\"Pig Latin\", \"English\").\nIs_related(\"Latin\", \"Italian\").\nIs_related(\"Latin\", \"Spanish\").\nIs_related(\"Latin\", \"French\").\nIs_related(\"Latin\", \"Portuguese\").\nIs_related(\"Latin\", \"Romanian\").\n.decl Answer()\nAnswer() :- Is_related(\"Pig Latin\", language), Is_related(\"Latin\", language).\n.output Answer"]}
{"id": 1619, "answer": true, "completion": ".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Matt Damon\", \"heights\").\n.decl Activity_involves(Activity:symbol, Involvement:symbol)\nActivity_involves(\"parachuting\", \"heights\").\n.decl Answer()\nAnswer() :- Has_fear(\"Matt Damon\", fear), Activity_involves(\"parachuting\", involvement), fear = involvement.\n.output Answer", "completions": [".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Matt Damon\", \"heights\").\n.decl Activity_involves(Activity:symbol, Involvement:symbol)\nActivity_involves(\"parachuting\", \"heights\").\n.decl Answer()\nAnswer() :- Has_fear(\"Matt Damon\", fear), Activity_involves(\"parachuting\", involvement), fear = involvement.\n.output Answer"]}
{"id": 1620, "answer": true, "completion": ".decl Is_pandemic(Time:symbol)\nIs_pandemic(\"now\").\n\n.decl Advertising_method(Method:symbol, Consideration:symbol)\nAdvertising_method(\"door to door\", \"inconsiderate\").\n\n.decl Answer()\nAnswer() :- Is_pandemic(\"now\"), Advertising_method(\"door to door\", \"inconsiderate\").\n.output Answer", "completions": [".decl Is_pandemic(Time:symbol)\nIs_pandemic(\"now\").\n\n.decl Advertising_method(Method:symbol, Consideration:symbol)\nAdvertising_method(\"door to door\", \"inconsiderate\").\n\n.decl Answer()\nAnswer() :- Is_pandemic(\"now\"), Advertising_method(\"door to door\", \"inconsiderate\").\n.output Answer"]}
{"id": 1621, "answer": false, "completion": ".decl Used_calendar(Person:symbol, Calendar:symbol)\nUsed_calendar(\"Ivan the Terrible\", \"Julian calendar\").\n.decl Is_derived_from(Calendar_A:symbol, Calendar_B:symbol)\nIs_derived_from(\"Julian calendar\", \"Roman calendar\").\nIs_derived_from(\"Roman calendar\", \"Byzantine calendar\").\n.decl Answer()\nAnswer() :- Used_calendar(\"Ivan the Terrible\", \"Byzantine calendar\").\nAnswer() :- Used_calendar(\"Ivan the Terrible\", calendar1), Is_derived_from(calendar1, \"Byzantine calendar\").\n.output Answer", "completions": [".decl Used_calendar(Person:symbol, Calendar:symbol)\nUsed_calendar(\"Ivan the Terrible\", \"Julian calendar\").\n.decl Is_derived_from(Calendar_A:symbol, Calendar_B:symbol)\nIs_derived_from(\"Julian calendar\", \"Roman calendar\").\nIs_derived_from(\"Roman calendar\", \"Byzantine calendar\").\n.decl Answer()\nAnswer() :- Used_calendar(\"Ivan the Terrible\", \"Byzantine calendar\").\nAnswer() :- Used_calendar(\"Ivan the Terrible\", calendar1), Is_derived_from(calendar1, \"Byzantine calendar\").\n.output Answer"]}
{"id": 1622, "answer": false, "completion": ".decl Is_delicious(Recipe:symbol)\nIs_delicious(\"French onion soup\").\nIs_delicious(\"Onion rings\").\nIs_delicious(\"Caramelized onions\").\n.decl Contains_ingredient(Recipe:symbol, Ingredient:symbol)\nContains_ingredient(\"French onion soup\", \"onion\").\nContains_ingredient(\"Onion rings\", \"onion\").\nContains_ingredient(\"Caramelized onions\", \"onion\").\n.decl Answer()\nAnswer() :- Is_delicious(recipe), Contains_ingredient(recipe, \"onion\").\n.output Answer", "completions": [".decl Is_delicious(Recipe:symbol)\nIs_delicious(\"French onion soup\").\nIs_delicious(\"Onion rings\").\nIs_delicious(\"Caramelized onions\").\n.decl Contains_ingredient(Recipe:symbol, Ingredient:symbol)\nContains_ingredient(\"French onion soup\", \"onion\").\nContains_ingredient(\"Onion rings\", \"onion\").\nContains_ingredient(\"Caramelized onions\", \"onion\").\n.decl Answer()\nAnswer() :- Is_delicious(recipe), Contains_ingredient(recipe, \"onion\").\n.output Answer"]}
{"id": 1623, "answer": true, "completion": ".decl Has_ship_location(Person:symbol, Location:symbol)\nHas_ship_location(\"The Doctor\", \"TARDIS\").\n.decl Has_childhood_home(Person:symbol, Home:symbol)\nHas_childhood_home(\"The Doctor\", \"Gallifrey\").\n.decl Answer()\nAnswer() :- Has_ship_location(\"The Doctor\", \"TARDIS\"), Has_childhood_home(\"The Doctor\", \"Gallifrey\"), \"TARDIS\" = \"Gallifrey\".\n.output Answer", "completions": [".decl Has_ship_location(Person:symbol, Location:symbol)\nHas_ship_location(\"The Doctor\", \"TARDIS\").\n.decl Has_childhood_home(Person:symbol, Home:symbol)\nHas_childhood_home(\"The Doctor\", \"Gallifrey\").\n.decl Answer()\nAnswer() :- Has_ship_location(\"The Doctor\", \"TARDIS\"), Has_childhood_home(\"The Doctor\", \"Gallifrey\"), \"TARDIS\" = \"Gallifrey\".\n.output Answer"]}
{"id": 1624, "answer": true, "completion": ".decl Was_President(Person:symbol, Start_year:float, End_year:float)\nWas_President(\"Francois Mitterrand\", 1981, 1995).\nWas_President(\"Barak Obama\", 2009, 2017).\n.decl Answer()\nAnswer() :- Was_President(\"Francois Mitterrand\", start1, end1), Was_President(\"Barak Obama\", start2, end2), end1 >= start2.\n.output Answer", "completions": [".decl Was_President(Person:symbol, Start_year:float, End_year:float)\nWas_President(\"Francois Mitterrand\", 1981, 1995).\nWas_President(\"Barak Obama\", 2009, 2017).\n.decl Answer()\nAnswer() :- Was_President(\"Francois Mitterrand\", start1, end1), Was_President(\"Barak Obama\", start2, end2), end1 >= start2.\n.output Answer"]}
{"id": 1625, "answer": true, "completion": ".decl Uses_arithmetic(Species:symbol)\nUses_arithmetic(\"Homo sapiens\").\n.decl Is_Neanderthal(Species:symbol)\nIs_Neanderthal(\"Neanderthals\").\n.decl Answer()\nAnswer() :- Uses_arithmetic(species), Is_Neanderthal(species).\n.output Answer", "completions": [".decl Uses_arithmetic(Species:symbol)\nUses_arithmetic(\"Homo sapiens\").\n.decl Is_Neanderthal(Species:symbol)\nIs_Neanderthal(\"Neanderthals\").\n.decl Answer()\nAnswer() :- Uses_arithmetic(species), Is_Neanderthal(species).\n.output Answer"]}
{"id": 1626, "answer": false, "completion": ".decl Needs(Material:symbol, Activity:symbol)\nNeeds(\"coal\", \"energy production\").\nNeeds(\"parachute\", \"parachuting\").\n.decl Answer()\nAnswer() :- Needs(\"coal\", \"parachuting\").\n.output Answer", "completions": [".decl Needs(Material:symbol, Activity:symbol)\nNeeds(\"coal\", \"energy production\").\nNeeds(\"parachute\", \"parachuting\").\n.decl Answer()\nAnswer() :- Needs(\"coal\", \"parachuting\").\n.output Answer"]}
{"id": 1627, "answer": true, "completion": ".decl Is_watchmaker(Profession:symbol)\nIs_watchmaker(\"watchmaker\").\n.decl Can_fix(Profession:symbol, Object:symbol)\nCan_fix(\"watchmaker\", \"traditional watch\").\nCan_fix(\"technician\", \"Apple Watch\").\n.decl Answer()\nAnswer() :- Is_watchmaker(profession), Can_fix(profession, \"Apple Watch\").\n.output Answer", "completions": [".decl Is_watchmaker(Profession:symbol)\nIs_watchmaker(\"watchmaker\").\n.decl Can_fix(Profession:symbol, Object:symbol)\nCan_fix(\"watchmaker\", \"traditional watch\").\nCan_fix(\"technician\", \"Apple Watch\").\n.decl Answer()\nAnswer() :- Is_watchmaker(profession), Can_fix(profession, \"Apple Watch\").\n.output Answer"]}
{"id": 1628, "answer": true, "completion": ".decl Can_use_language(Animal:symbol, Language:symbol)\n.decl Is_impossible(Animal:symbol, Language:symbol)\nIs_impossible(\"pig\", \"pig latin\").\n.decl Answer()\nAnswer() :- Is_impossible(\"pig\", \"pig latin\").\n.output Answer", "completions": [".decl Can_use_language(Animal:symbol, Language:symbol)\n.decl Is_impossible(Animal:symbol, Language:symbol)\nIs_impossible(\"pig\", \"pig latin\").\n.decl Answer()\nAnswer() :- Is_impossible(\"pig\", \"pig latin\").\n.output Answer"]}
{"id": 1629, "answer": true, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Michael Jordan\", \"basketball player\").\n.decl Can_become_profession(Person:symbol, Profession:symbol)\nCan_become_profession(\"Michael Jordan\", \"professional cook\") :- !Has_profession(\"Michael Jordan\", \"professional cook\").\n.decl Answer()\nAnswer() :- Can_become_profession(\"Michael Jordan\", \"professional cook\").\n.output Answer", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Michael Jordan\", \"basketball player\").\n.decl Can_become_profession(Person:symbol, Profession:symbol)\nCan_become_profession(\"Michael Jordan\", \"professional cook\") :- !Has_profession(\"Michael Jordan\", \"professional cook\").\n.decl Answer()\nAnswer() :- Can_become_profession(\"Michael Jordan\", \"professional cook\").\n.output Answer"]}
{"id": 1630, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Jacques Duèze\", 1244).\nBorn_in_year(\"Richard Dawkins\", 1941).\n.decl Age_difference(Person_A:symbol, Person_B:symbol, Difference:float)\nAge_difference(personA, personB, difference) :- Born_in_year(personA, yearA), Born_in_year(personB, yearB), difference = abs(yearA - yearB).\n.decl Answer()\nAnswer() :- Age_difference(\"Jacques Duèze\", \"Richard Dawkins\", difference), difference < 100.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Jacques Duèze\", 1244).\nBorn_in_year(\"Richard Dawkins\", 1941).\n.decl Age_difference(Person_A:symbol, Person_B:symbol, Difference:float)\nAge_difference(personA, personB, difference) :- Born_in_year(personA, yearA), Born_in_year(personB, yearB), difference = abs(yearA - yearB).\n.decl Answer()\nAnswer() :- Age_difference(\"Jacques Duèze\", \"Richard Dawkins\", difference), difference < 100.\n.output Answer"]}
{"id": 1631, "answer": true, "completion": ".decl Helps_control_parasites(Helper:symbol, Parasite:symbol, Crop:symbol)\nHelps_control_parasites(\"spiders\", \"insects\", \"eggplant\").\n.decl Answer()\nAnswer() :- Helps_control_parasites(\"spiders\", \"insects\", \"eggplant\").\n.output Answer", "completions": [".decl Helps_control_parasites(Helper:symbol, Parasite:symbol, Crop:symbol)\nHelps_control_parasites(\"spiders\", \"insects\", \"eggplant\").\n.decl Answer()\nAnswer() :- Helps_control_parasites(\"spiders\", \"insects\", \"eggplant\").\n.output Answer"]}
{"id": 1632, "answer": false, "completion": ".decl Extinct(Species:symbol)\nExtinct(\"cow\").\n.decl Industry_depends_on(Industry:symbol, Species:symbol)\nIndustry_depends_on(\"butter industry\", \"cow\").\n.decl Survives(Industry:symbol)\nSurvives(Industry) :- Industry_depends_on(Industry, Species), !Extinct(Species).\n.decl Answer()\nAnswer() :- Survives(\"butter industry\").\n.output Answer", "completions": [".decl Extinct(Species:symbol)\nExtinct(\"cow\").\n.decl Industry_depends_on(Industry:symbol, Species:symbol)\nIndustry_depends_on(\"butter industry\", \"cow\").\n.decl Survives(Industry:symbol)\nSurvives(Industry) :- Industry_depends_on(Industry, Species), !Extinct(Species).\n.decl Answer()\nAnswer() :- Survives(\"butter industry\").\n.output Answer"]}
{"id": 1633, "answer": true, "completion": ".decl Has_capacity(Animal:symbol, Capacity:float)\nHas_capacity(\"chipmunk\", 10).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"chocolate chip\", 0.1).\n.decl Answer()\nAnswer() :- Has_capacity(\"chipmunk\", capacity), Has_volume(\"chocolate chip\", volume), 100 * volume <= capacity.\n.output Answer", "completions": [".decl Has_capacity(Animal:symbol, Capacity:float)\nHas_capacity(\"chipmunk\", 10).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"chocolate chip\", 0.1).\n.decl Answer()\nAnswer() :- Has_capacity(\"chipmunk\", capacity), Has_volume(\"chocolate chip\", volume), 100 * volume <= capacity.\n.output Answer"]}
{"id": 1634, "answer": true, "completion": ".decl Passes_through(Station:symbol, People_per_day:float)\nPasses_through(\"30th Street Station\", 30000).\n.decl Has_capacity(Arena:symbol, Capacity:float)\nHas_capacity(\"Dorton Arena\", 5000).\n.decl Answer()\nAnswer() :- Passes_through(\"30th Street Station\", people_per_day), Has_capacity(\"Dorton Arena\", capacity), people_per_day <= capacity.\n.output Answer", "completions": [".decl Passes_through(Station:symbol, People_per_day:float)\nPasses_through(\"30th Street Station\", 30000).\n.decl Has_capacity(Arena:symbol, Capacity:float)\nHas_capacity(\"Dorton Arena\", 5000).\n.decl Answer()\nAnswer() :- Passes_through(\"30th Street Station\", people_per_day), Has_capacity(\"Dorton Arena\", capacity), people_per_day <= capacity.\n.output Answer"]}
{"id": 1635, "answer": true, "completion": ".decl Causes_hypervitaminosis_D(Source:symbol)\nCauses_hypervitaminosis_D(\"vitamin D supplements\").\nCauses_hypervitaminosis_D(\"fish liver oil\").\nCauses_hypervitaminosis_D(\"fortified foods\").\n.decl Is_safe_from_hypervitaminosis_D(Object:symbol)\nIs_safe_from_hypervitaminosis_D(\"basil\").\n.decl Answer()\nAnswer() :- Is_safe_from_hypervitaminosis_D(\"basil\").\n.output Answer", "completions": [".decl Causes_hypervitaminosis_D(Source:symbol)\nCauses_hypervitaminosis_D(\"vitamin D supplements\").\nCauses_hypervitaminosis_D(\"fish liver oil\").\nCauses_hypervitaminosis_D(\"fortified foods\").\n.decl Is_safe_from_hypervitaminosis_D(Object:symbol)\nIs_safe_from_hypervitaminosis_D(\"basil\").\n.decl Answer()\nAnswer() :- Is_safe_from_hypervitaminosis_D(\"basil\").\n.output Answer"]}
{"id": 1636, "answer": false, "completion": ".decl Spoken(Language:symbol, Country:symbol)\nSpoken(\"Cantonese\", \"China\").\nSpoken(\"Japanese\", \"Japan\").\n.decl Answer()\nAnswer() :- Spoken(\"Cantonese\", \"Japan\").\n.output Answer", "completions": [".decl Spoken(Language:symbol, Country:symbol)\nSpoken(\"Cantonese\", \"China\").\nSpoken(\"Japanese\", \"Japan\").\n.decl Answer()\nAnswer() :- Spoken(\"Cantonese\", \"Japan\").\n.output Answer"]}
{"id": 1637, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Amy Winehouse\", 1983).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Amy Winehouse\", 2011).\n.decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"Brexit\", 2016).\n.decl Answer()\nAnswer() :- Born_in_year(\"Amy Winehouse\", birth_year), Died_in_year(\"Amy Winehouse\", death_year), Happened_in_year(\"Brexit\", event_year), event_year > birth_year, event_year < death_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Amy Winehouse\", 1983).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Amy Winehouse\", 2011).\n.decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"Brexit\", 2016).\n.decl Answer()\nAnswer() :- Born_in_year(\"Amy Winehouse\", birth_year), Died_in_year(\"Amy Winehouse\", death_year), Happened_in_year(\"Brexit\", event_year), event_year > birth_year, event_year < death_year.\n.output Answer"]}
{"id": 1638, "answer": true, "completion": ".decl Has_cost(Color:symbol, Cost:float)\nHas_cost(\"blue\", 200).\nHas_cost(\"red\", 150).\nHas_cost(\"green\", 250).\nHas_cost(\"gold\", 300).\n.decl Answer()\nAnswer() :- Has_cost(\"blue\", cost1), !Has_cost(_, cost2), cost2 > cost1.\n.output Answer", "completions": [".decl Has_cost(Color:symbol, Cost:float)\nHas_cost(\"blue\", 200).\nHas_cost(\"red\", 150).\nHas_cost(\"green\", 250).\nHas_cost(\"gold\", 300).\n.decl Answer()\nAnswer() :- Has_cost(\"blue\", cost1), !Has_cost(_, cost2), cost2 > cost1.\n.output Answer"]}
{"id": 1639, "answer": true, "completion": ".decl Written_in_year(Work:symbol, Year:float)\nWritten_in_year(\"The Canterbury Tales\", 1387).\nWritten_in_year(\"One Thousand and One Nights\", 800).\n.decl Answer()\nAnswer() :- Written_in_year(\"The Canterbury Tales\", year1), Written_in_year(\"One Thousand and One Nights\", year2), year1 < year2.\n.output Answer", "completions": [".decl Written_in_year(Work:symbol, Year:float)\nWritten_in_year(\"The Canterbury Tales\", 1387).\nWritten_in_year(\"One Thousand and One Nights\", 800).\n.decl Answer()\nAnswer() :- Written_in_year(\"The Canterbury Tales\", year1), Written_in_year(\"One Thousand and One Nights\", year2), year1 < year2.\n.output Answer"]}
{"id": 1640, "answer": true, "completion": ".decl Belongs_to_group(Organism:symbol, Group:symbol)\nBelongs_to_group(\"cnidarians\", \"invertebrates\").\nBelongs_to_group(\"humans\", \"vertebrates\").\n.decl Has_test_priority(Group:symbol, Priority:float)\nHas_test_priority(\"invertebrates\", 1).\nHas_test_priority(\"vertebrates\", 2).\n.decl Testable_on(Organism:symbol, Technology:symbol)\nTestable_on(\"cnidarians\", \"virtual reality\").\nTestable_on(\"humans\", \"virtual reality\").\n.decl Answer()\nAnswer() :- Testable_on(\"cnidarians\", \"virtual reality\"), Testable_on(\"humans\", \"virtual reality\"), Belongs_to_group(\"cnidarians\", group1), Belongs_to_group(\"humans\", group2), Has_test_priority(group1, priority1), Has_test_priority(group2, priority2), priority1 < priority2.\n.output Answer", "completions": [".decl Belongs_to_group(Organism:symbol, Group:symbol)\nBelongs_to_group(\"cnidarians\", \"invertebrates\").\nBelongs_to_group(\"humans\", \"vertebrates\").\n.decl Has_test_priority(Group:symbol, Priority:float)\nHas_test_priority(\"invertebrates\", 1).\nHas_test_priority(\"vertebrates\", 2).\n.decl Testable_on(Organism:symbol, Technology:symbol)\nTestable_on(\"cnidarians\", \"virtual reality\").\nTestable_on(\"humans\", \"virtual reality\").\n.decl Answer()\nAnswer() :- Testable_on(\"cnidarians\", \"virtual reality\"), Testable_on(\"humans\", \"virtual reality\"), Belongs_to_group(\"cnidarians\", group1), Belongs_to_group(\"humans\", group2), Has_test_priority(group1, priority1), Has_test_priority(group2, priority2), priority1 < priority2.\n.output Answer"]}
{"id": 1641, "answer": false, "completion": ".decl Published_in_year(Book:symbol, Year:float)\nPublished_in_year(\"Little Women\", 1868).\n.decl Civil_War_years(Year:float)\nCivil_War_years(1861..1865).\n.decl Answer()\nAnswer() :- Published_in_year(\"Little Women\", year1), Civil_War_years(year2), year1 > year2.\n.output Answer", "completions": [".decl Published_in_year(Book:symbol, Year:float)\nPublished_in_year(\"Little Women\", 1868).\n.decl Civil_War_years(Year:float)\nCivil_War_years(1861..1865).\n.decl Answer()\nAnswer() :- Published_in_year(\"Little Women\", year1), Civil_War_years(year2), year1 > year2.\n.output Answer"]}
{"id": 1642, "answer": true, "completion": ".decl Is_upside_down(Animal:symbol, State:symbol)\nIs_upside_down(\"sloth\", \"upside_down\").\n.decl Explodes(Animal:symbol, Condition:symbol)\nExplodes(\"sloth\", \"not_upside_down\").\n.decl Answer()\nAnswer() :- Explodes(\"sloth\", condition), !Is_upside_down(\"sloth\", \"upside_down\").\n.output Answer", "completions": [".decl Is_upside_down(Animal:symbol, State:symbol)\nIs_upside_down(\"sloth\", \"upside_down\").\n.decl Explodes(Animal:symbol, Condition:symbol)\nExplodes(\"sloth\", \"not_upside_down\").\n.decl Answer()\nAnswer() :- Explodes(\"sloth\", condition), !Is_upside_down(\"sloth\", \"upside_down\").\n.output Answer"]}
{"id": 1643, "answer": true, "completion": ".decl Is_birdwatching_location(Location:symbol)\nIs_birdwatching_location(\"forest\").\nIs_birdwatching_location(\"park\").\nIs_birdwatching_location(\"nature_reserve\").\n.decl Is_sports_event(Event:symbol, Location:symbol)\nIs_sports_event(\"Philadelphia Eagles game\", \"stadium\").\n.decl Answer()\nAnswer() :- Is_birdwatching_location(location), Is_sports_event(\"Philadelphia Eagles game\", location).\n.output Answer", "completions": [".decl Is_birdwatching_location(Location:symbol)\nIs_birdwatching_location(\"forest\").\nIs_birdwatching_location(\"park\").\nIs_birdwatching_location(\"nature_reserve\").\n.decl Is_sports_event(Event:symbol, Location:symbol)\nIs_sports_event(\"Philadelphia Eagles game\", \"stadium\").\n.decl Answer()\nAnswer() :- Is_birdwatching_location(location), Is_sports_event(\"Philadelphia Eagles game\", location).\n.output Answer"]}
{"id": 1644, "answer": true, "completion": ".decl Is_threatened_by(Life_form:symbol, Substance:symbol)\nIs_threatened_by(\"fungal life-form\", \"copper-based pigment\").\n.decl Has_substance(Substance:symbol, Element:symbol)\nHas_substance(\"copper-based pigment\", \"copper\").\n.decl Answer()\nAnswer() :- Is_threatened_by(\"fungal life-form\", substance), Has_substance(substance, \"copper\").\n.output Answer", "completions": [".decl Is_threatened_by(Life_form:symbol, Substance:symbol)\nIs_threatened_by(\"fungal life-form\", \"copper-based pigment\").\n.decl Has_substance(Substance:symbol, Element:symbol)\nHas_substance(\"copper-based pigment\", \"copper\").\n.decl Answer()\nAnswer() :- Is_threatened_by(\"fungal life-form\", substance), Has_substance(substance, \"copper\").\n.output Answer"]}
{"id": 1645, "answer": true, "completion": ".decl Close_proximity(Object_A:symbol, Object_B:symbol)\nClose_proximity(\"land\", \"beaver dams\").\n.decl Suffers(Object:symbol)\nSuffers(\"land\").\n.decl Answer()\nAnswer() :- Close_proximity(\"land\", \"beaver dams\"), Suffers(\"land\").\n.output Answer", "completions": [".decl Close_proximity(Object_A:symbol, Object_B:symbol)\nClose_proximity(\"land\", \"beaver dams\").\n.decl Suffers(Object:symbol)\nSuffers(\"land\").\n.decl Answer()\nAnswer() :- Close_proximity(\"land\", \"beaver dams\"), Suffers(\"land\").\n.output Answer"]}
{"id": 1646, "answer": true, "completion": ".decl Needs_oxygen(Material:symbol)\nNeeds_oxygen(\"quartz\").\n.decl Useful_to_humans(Material:symbol)\nUseful_to_humans(\"quartz\").\n.decl Plants_died_off()\nPlants_died_off().\n.decl No_oxygen()\nNo_oxygen() :- Plants_died_off().\n.decl Answer()\nAnswer() :- Useful_to_humans(\"quartz\"), !Needs_oxygen(\"quartz\"), No_oxygen().\n.output Answer", "completions": [".decl Needs_oxygen(Material:symbol)\nNeeds_oxygen(\"quartz\").\n.decl Useful_to_humans(Material:symbol)\nUseful_to_humans(\"quartz\").\n.decl Plants_died_off()\nPlants_died_off().\n.decl No_oxygen()\nNo_oxygen() :- Plants_died_off().\n.decl Answer()\nAnswer() :- Useful_to_humans(\"quartz\"), !Needs_oxygen(\"quartz\"), No_oxygen().\n.output Answer"]}
{"id": 1647, "answer": true, "completion": ".decl Is_popular(Game:symbol)\nIs_popular(\"Illuminati card game\").\n.decl Answer()\nAnswer() :- Is_popular(\"Illuminati card game\").\n.output Answer", "completions": [".decl Is_popular(Game:symbol)\nIs_popular(\"Illuminati card game\").\n.decl Answer()\nAnswer() :- Is_popular(\"Illuminati card game\").\n.output Answer"]}
{"id": 1648, "answer": false, "completion": ".decl Is_holdable(Object:symbol, Container:symbol)\nIs_holdable(\"Bing\", \"basket\").\n.decl Answer()\nAnswer() :- Is_holdable(\"Bing\", \"basket\").\n.output Answer", "completions": [".decl Is_holdable(Object:symbol, Container:symbol)\nIs_holdable(\"Bing\", \"basket\").\n.decl Answer()\nAnswer() :- Is_holdable(\"Bing\", \"basket\").\n.output Answer"]}
{"id": 1649, "answer": true, "completion": ".decl Operational_in_month(Place:symbol, Month:symbol, Year:float)\nOperational_in_month(\"Parc des Princes\", \"June\", 2020).\n.decl Affected_by_pandemic(Place:symbol, Month:symbol, Year:float)\nAffected_by_pandemic(\"Parc des Princes\", \"June\", 2020).\n.decl Answer()\nAnswer() :- Operational_in_month(\"Parc des Princes\", \"June\", 2020), !Affected_by_pandemic(\"Parc des Princes\", \"June\", 2020).\n.output Answer", "completions": [".decl Operational_in_month(Place:symbol, Month:symbol, Year:float)\nOperational_in_month(\"Parc des Princes\", \"June\", 2020).\n.decl Affected_by_pandemic(Place:symbol, Month:symbol, Year:float)\nAffected_by_pandemic(\"Parc des Princes\", \"June\", 2020).\n.decl Answer()\nAnswer() :- Operational_in_month(\"Parc des Princes\", \"June\", 2020), !Affected_by_pandemic(\"Parc des Princes\", \"June\", 2020).\n.output Answer"]}
{"id": 1650, "answer": true, "completion": ".decl Has_policy(Organization:symbol, Policy:symbol)\nHas_policy(\"Chick-fil-A\", \"opposes same-sex marriage\").\n.decl Event_type(Event:symbol, Type:symbol)\nEvent_type(\"Pride parade\", \"LGBTQ+ celebration\").\n.decl Hypothetical_refusal(Organization:symbol, Event:symbol)\nHypothetical_refusal(organization, event) :- Has_policy(organization, policy), Event_type(event, event_type), policy = \"opposes same-sex marriage\", event_type = \"LGBTQ+ celebration\".\n.decl Answer()\nAnswer() :- Hypothetical_refusal(\"Chick-fil-A\", \"Pride parade\").\n.output Answer", "completions": [".decl Has_policy(Organization:symbol, Policy:symbol)\nHas_policy(\"Chick-fil-A\", \"opposes same-sex marriage\").\n.decl Event_type(Event:symbol, Type:symbol)\nEvent_type(\"Pride parade\", \"LGBTQ+ celebration\").\n.decl Hypothetical_refusal(Organization:symbol, Event:symbol)\nHypothetical_refusal(organization, event) :- Has_policy(organization, policy), Event_type(event, event_type), policy = \"opposes same-sex marriage\", event_type = \"LGBTQ+ celebration\".\n.decl Answer()\nAnswer() :- Hypothetical_refusal(\"Chick-fil-A\", \"Pride parade\").\n.output Answer"]}
{"id": 1651, "answer": false, "completion": ".decl Is_part_of_border(Lake:symbol, Border:symbol)\nIs_part_of_border(\"Lake Superior\", \"US-Canada\").\nIs_part_of_border(\"Lake Michigan\", \"US\").\nIs_part_of_border(\"Lake Huron\", \"US-Canada\").\nIs_part_of_border(\"Lake Erie\", \"US-Canada\").\nIs_part_of_border(\"Lake Ontario\", \"US-Canada\").\n.decl Is_international_border(Border:symbol)\nIs_international_border(\"US-Canada\").\n.decl Answer()\nAnswer() :- Is_part_of_border(lake, border), Is_international_border(border).\n.output Answer", "completions": [".decl Is_part_of_border(Lake:symbol, Border:symbol)\nIs_part_of_border(\"Lake Superior\", \"US-Canada\").\nIs_part_of_border(\"Lake Michigan\", \"US\").\nIs_part_of_border(\"Lake Huron\", \"US-Canada\").\nIs_part_of_border(\"Lake Erie\", \"US-Canada\").\nIs_part_of_border(\"Lake Ontario\", \"US-Canada\").\n.decl Is_international_border(Border:symbol)\nIs_international_border(\"US-Canada\").\n.decl Answer()\nAnswer() :- Is_part_of_border(lake, border), Is_international_border(border).\n.output Answer"]}
{"id": 1652, "answer": true, "completion": ".decl Suffered_from(Person:symbol, Condition:symbol)\nSuffered_from(\"Jon Brower Minnoch\", \"obesity\").\n.decl Answer()\nAnswer() :- Suffered_from(\"Jon Brower Minnoch\", \"anorexia nervosa\").\nAnswer() :- !Suffered_from(\"Jon Brower Minnoch\", \"obesity\").\n.output Answer", "completions": [".decl Suffered_from(Person:symbol, Condition:symbol)\nSuffered_from(\"Jon Brower Minnoch\", \"obesity\").\n.decl Answer()\nAnswer() :- Suffered_from(\"Jon Brower Minnoch\", \"anorexia nervosa\").\nAnswer() :- !Suffered_from(\"Jon Brower Minnoch\", \"obesity\").\n.output Answer"]}
{"id": 1653, "answer": true, "completion": ".decl Signed_document(Person:symbol, Document:symbol)\nSigned_document(\"Larry King\", \"Magna Carta\").\n.decl Answer()\nAnswer() :- Signed_document(\"Larry King\", \"Magna Carta\").\n.output Answer", "completions": [".decl Signed_document(Person:symbol, Document:symbol)\nSigned_document(\"Larry King\", \"Magna Carta\").\n.decl Answer()\nAnswer() :- Signed_document(\"Larry King\", \"Magna Carta\").\n.output Answer"]}
{"id": 1654, "answer": false, "completion": ".decl Has_name_origin(Object:symbol, Origin:symbol)\nHas_name_origin(\"Phobos\", \"Greek\").\nHas_name_origin(\"Pavor\", \"Roman\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Phobos\", origin1), Has_name_origin(\"Pavor\", origin2), origin1 != origin2.\n.output Answer", "completions": [".decl Has_name_origin(Object:symbol, Origin:symbol)\nHas_name_origin(\"Phobos\", \"Greek\").\nHas_name_origin(\"Pavor\", \"Roman\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Phobos\", origin1), Has_name_origin(\"Pavor\", origin2), origin1 != origin2.\n.output Answer"]}
{"id": 1655, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"honey badger\", \"snake\").\n.decl Fears(Animal_A:symbol, Animal_B:symbol)\nFears(animal1, animal2) :- Eats(animal2, animal1).\n.decl Answer()\nAnswer() :- Fears(\"snake\", \"honey badger\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"honey badger\", \"snake\").\n.decl Fears(Animal_A:symbol, Animal_B:symbol)\nFears(animal1, animal2) :- Eats(animal2, animal1).\n.decl Answer()\nAnswer() :- Fears(\"snake\", \"honey badger\").\n.output Answer"]}
{"id": 1656, "answer": true, "completion": ".decl Is_anatomically_similar(Animal_A:symbol, Animal_B:symbol)\nIs_anatomically_similar(\"honey badger\", \"weasel\").\nIs_anatomically_similar(\"hyena\", \"dog\").\n.decl Answer()\nAnswer() :- !Is_anatomically_similar(\"honey badger\", \"hyena\").\n.output Answer", "completions": [".decl Is_anatomically_similar(Animal_A:symbol, Animal_B:symbol)\nIs_anatomically_similar(\"honey badger\", \"weasel\").\nIs_anatomically_similar(\"hyena\", \"dog\").\n.decl Answer()\nAnswer() :- !Is_anatomically_similar(\"honey badger\", \"hyena\").\n.output Answer"]}
{"id": 1657, "answer": true, "completion": ".decl Concerned_with(Subject:symbol, Topic:symbol)\nConcerned_with(\"Noah\", \"buoyancy\").\n.decl Answer()\nAnswer() :- Concerned_with(\"Noah\", \"buoyancy\").\n.output Answer", "completions": [".decl Concerned_with(Subject:symbol, Topic:symbol)\nConcerned_with(\"Noah\", \"buoyancy\").\n.decl Answer()\nAnswer() :- Concerned_with(\"Noah\", \"buoyancy\").\n.output Answer"]}
{"id": 1658, "answer": true, "completion": ".decl Has_hostility(Group_A:symbol, Group_B:symbol)\nHas_hostility(\"Muslim world\", \"Israel\").\n.decl Answer()\nAnswer() :- Has_hostility(\"Muslim world\", \"Israel\").\n.output Answer", "completions": [".decl Has_hostility(Group_A:symbol, Group_B:symbol)\nHas_hostility(\"Muslim world\", \"Israel\").\n.decl Answer()\nAnswer() :- Has_hostility(\"Muslim world\", \"Israel\").\n.output Answer"]}
{"id": 1659, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Kim Il-sung\", 1912).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Kim Il-sung\", 1994).\n.decl Founded_in_year(Platform:symbol, Founding_year:float)\nFounded_in_year(\"LinkedIn\", 2002).\n.decl Answer()\nAnswer() :- Born_in_year(\"Kim Il-sung\", birth_year), Died_in_year(\"Kim Il-sung\", death_year), Founded_in_year(\"LinkedIn\", founding_year), birth_year <= founding_year, founding_year <= death_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Kim Il-sung\", 1912).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Kim Il-sung\", 1994).\n.decl Founded_in_year(Platform:symbol, Founding_year:float)\nFounded_in_year(\"LinkedIn\", 2002).\n.decl Answer()\nAnswer() :- Born_in_year(\"Kim Il-sung\", birth_year), Died_in_year(\"Kim Il-sung\", death_year), Founded_in_year(\"LinkedIn\", founding_year), birth_year <= founding_year, founding_year <= death_year.\n.output Answer"]}
{"id": 1660, "answer": true, "completion": ".decl Has_health_effect(Substance:symbol, Effect:symbol)\nHas_health_effect(\"ethanol\", \"negative\").\n.decl Consumed_by(Person:symbol, Substance:symbol)\nConsumed_by(\"Jack Kerouac\", \"ethanol\").\n.decl Answer()\nAnswer() :- Consumed_by(\"Jack Kerouac\", \"ethanol\"), Has_health_effect(\"ethanol\", \"positive\").\n.output Answer", "completions": [".decl Has_health_effect(Substance:symbol, Effect:symbol)\nHas_health_effect(\"ethanol\", \"negative\").\n.decl Consumed_by(Person:symbol, Substance:symbol)\nConsumed_by(\"Jack Kerouac\", \"ethanol\").\n.decl Answer()\nAnswer() :- Consumed_by(\"Jack Kerouac\", \"ethanol\"), Has_health_effect(\"ethanol\", \"positive\").\n.output Answer"]}
{"id": 1661, "answer": true, "completion": ".decl Plays_rugby(Team:symbol, N_players:float)\nPlays_rugby(\"Jackson 5\", 5).\n.decl Rugby_requirements(N_players:float)\nRugby_requirements(15).\n.decl Answer()\nAnswer() :- Plays_rugby(\"Jackson 5\", n_players), Rugby_requirements(required_players), n_players >= required_players.\n.output Answer", "completions": [".decl Plays_rugby(Team:symbol, N_players:float)\nPlays_rugby(\"Jackson 5\", 5).\n.decl Rugby_requirements(N_players:float)\nRugby_requirements(15).\n.decl Answer()\nAnswer() :- Plays_rugby(\"Jackson 5\", n_players), Rugby_requirements(required_players), n_players >= required_players.\n.output Answer"]}
{"id": 1662, "answer": true, "completion": ".decl Destroys(Object:symbol, Target:symbol)\nDestroys(\"human stomach\", \"bee\").\n.decl Answer()\nAnswer() :- Destroys(\"human stomach\", \"bee\").\n.output Answer", "completions": [".decl Destroys(Object:symbol, Target:symbol)\nDestroys(\"human stomach\", \"bee\").\n.decl Answer()\nAnswer() :- Destroys(\"human stomach\", \"bee\").\n.output Answer"]}
{"id": 1663, "answer": false, "completion": ".decl Knows_about(Person:symbol, Subject:symbol)\nKnows_about(\"Elon Musk\", \"physics\").\nKnows_about(\"Elon Musk\", \"engineering\").\nKnows_about(\"Elon Musk\", \"business\").\nKnows_about(\"Elon Musk\", \"space exploration\").\n.decl Answer()\nAnswer() :- Knows_about(\"Elon Musk\", \"astrology\"), !Knows_about(\"Elon Musk\", \"physics\").\nAnswer() :- Knows_about(\"Elon Musk\", \"astrology\"), Knows_about(\"Elon Musk\", \"physics\"), Knows_about(\"Elon Musk\", \"engineering\"), Knows_about(\"Elon Musk\", \"business\"), Knows_about(\"Elon Musk\", \"space exploration\").\n.output Answer", "completions": [".decl Knows_about(Person:symbol, Subject:symbol)\nKnows_about(\"Elon Musk\", \"physics\").\nKnows_about(\"Elon Musk\", \"engineering\").\nKnows_about(\"Elon Musk\", \"business\").\nKnows_about(\"Elon Musk\", \"space exploration\").\n.decl Answer()\nAnswer() :- Knows_about(\"Elon Musk\", \"astrology\"), !Knows_about(\"Elon Musk\", \"physics\").\nAnswer() :- Knows_about(\"Elon Musk\", \"astrology\"), Knows_about(\"Elon Musk\", \"physics\"), Knows_about(\"Elon Musk\", \"engineering\"), Knows_about(\"Elon Musk\", \"business\"), Knows_about(\"Elon Musk\", \"space exploration\").\n.output Answer"]}
{"id": 1664, "answer": true, "completion": ".decl Has_longevity(Show:symbol, Longevity:float)\nHas_longevity(\"Coast to Coast AM\", 39).\nHas_longevity(\"Rush Limbaugh Show\", 33).\n.decl Answer()\nAnswer() :- Has_longevity(\"Coast to Coast AM\", longevity1), Has_longevity(\"Rush Limbaugh Show\", longevity2), longevity1 > longevity2.\n.output Answer", "completions": [".decl Has_longevity(Show:symbol, Longevity:float)\nHas_longevity(\"Coast to Coast AM\", 39).\nHas_longevity(\"Rush Limbaugh Show\", 33).\n.decl Answer()\nAnswer() :- Has_longevity(\"Coast to Coast AM\", longevity1), Has_longevity(\"Rush Limbaugh Show\", longevity2), longevity1 > longevity2.\n.output Answer"]}
{"id": 1665, "answer": true, "completion": ".decl Used_for_label(Animal:symbol, Group_type:symbol)\nUsed_for_label(\"eagle\", \"skills-training youth groups\").\nUsed_for_label(\"young bear\", \"skills-training youth groups\").\n.decl Answer()\nAnswer() :- Used_for_label(\"eagle\", \"skills-training youth groups\"), Used_for_label(\"young bear\", \"skills-training youth groups\").\n.output Answer", "completions": [".decl Used_for_label(Animal:symbol, Group_type:symbol)\nUsed_for_label(\"eagle\", \"skills-training youth groups\").\nUsed_for_label(\"young bear\", \"skills-training youth groups\").\n.decl Answer()\nAnswer() :- Used_for_label(\"eagle\", \"skills-training youth groups\"), Used_for_label(\"young bear\", \"skills-training youth groups\").\n.output Answer"]}
{"id": 1666, "answer": true, "completion": ".decl Has_wind_speed(Event:symbol, Wind_speed:float)\nHas_wind_speed(\"hurricane force winds\", 74).\nHas_wind_speed(\"parachuting\", 10).\n.decl Answer()\nAnswer() :- Has_wind_speed(\"hurricane force winds\", wind_speed1), Has_wind_speed(\"parachuting\", wind_speed2), wind_speed1 <= wind_speed2.\n.output Answer", "completions": [".decl Has_wind_speed(Event:symbol, Wind_speed:float)\nHas_wind_speed(\"hurricane force winds\", 74).\nHas_wind_speed(\"parachuting\", 10).\n.decl Answer()\nAnswer() :- Has_wind_speed(\"hurricane force winds\", wind_speed1), Has_wind_speed(\"parachuting\", wind_speed2), wind_speed1 <= wind_speed2.\n.output Answer"]}
{"id": 1667, "answer": true, "completion": ".decl Is_hand_wash_only(Material:symbol)\nIs_hand_wash_only(\"wool\").\n.decl Answer()\nAnswer() :- Is_hand_wash_only(\"wool\").\n.output Answer", "completions": [".decl Is_hand_wash_only(Material:symbol)\nIs_hand_wash_only(\"wool\").\n.decl Answer()\nAnswer() :- Is_hand_wash_only(\"wool\").\n.output Answer"]}
{"id": 1668, "answer": true, "completion": ".decl Has_digits(Object:symbol, N_digits:float)\nHas_digits(\"ZIP code\", 5).\n.decl Memorizes_fraction(Object:symbol, Fraction:float)\nMemorizes_fraction(\"half of ZIP code\", 0.5).\n.decl Slightly_over_fraction(Fraction1:float, Fraction2:float)\nSlightly_over_fraction(0.5, 0.6).\n.decl Answer()\nAnswer() :- Has_digits(\"ZIP code\", n_digits), Memorizes_fraction(\"half of ZIP code\", fraction1), Slightly_over_fraction(fraction1, fraction2), n_digits * fraction2 > n_digits * fraction1.\n.output Answer", "completions": [".decl Has_digits(Object:symbol, N_digits:float)\nHas_digits(\"ZIP code\", 5).\n.decl Memorizes_fraction(Object:symbol, Fraction:float)\nMemorizes_fraction(\"half of ZIP code\", 0.5).\n.decl Slightly_over_fraction(Fraction1:float, Fraction2:float)\nSlightly_over_fraction(0.5, 0.6).\n.decl Answer()\nAnswer() :- Has_digits(\"ZIP code\", n_digits), Memorizes_fraction(\"half of ZIP code\", fraction1), Slightly_over_fraction(fraction1, fraction2), n_digits * fraction2 > n_digits * fraction1.\n.output Answer"]}
{"id": 1669, "answer": true, "completion": ".decl Occurs_in_time_period(Event:symbol, Time_period:symbol)\nOccurs_in_time_period(\"age of dinosaurs\", \"Mesozoic Era\").\nOccurs_in_time_period(\"history of Europe\", \"Modern Era\").\nOccurs_in_time_period(\"history of Europe\", \"Middle Ages\").\nOccurs_in_time_period(\"history of Europe\", \"Ancient Era\").\n.decl Answer()\nAnswer() :- Occurs_in_time_period(\"history of Europe\", time_period), Occurs_in_time_period(\"age of dinosaurs\", time_period).\n.output Answer", "completions": [".decl Occurs_in_time_period(Event:symbol, Time_period:symbol)\nOccurs_in_time_period(\"age of dinosaurs\", \"Mesozoic Era\").\nOccurs_in_time_period(\"history of Europe\", \"Modern Era\").\nOccurs_in_time_period(\"history of Europe\", \"Middle Ages\").\nOccurs_in_time_period(\"history of Europe\", \"Ancient Era\").\n.decl Answer()\nAnswer() :- Occurs_in_time_period(\"history of Europe\", time_period), Occurs_in_time_period(\"age of dinosaurs\", time_period).\n.output Answer"]}
{"id": 1670, "answer": true, "completion": ".decl Painful_death(Person:symbol, Pain_level:float)\nPainful_death(\"Florence Nightingale\", 5).\nPainful_death(\"Saint Peter\", 9).\n.decl Answer()\nAnswer() :- Painful_death(\"Florence Nightingale\", pain1), Painful_death(\"Saint Peter\", pain2), pain1 > pain2.\n.output Answer", "completions": [".decl Painful_death(Person:symbol, Pain_level:float)\nPainful_death(\"Florence Nightingale\", 5).\nPainful_death(\"Saint Peter\", 9).\n.decl Answer()\nAnswer() :- Painful_death(\"Florence Nightingale\", pain1), Painful_death(\"Saint Peter\", pain2), pain1 > pain2.\n.output Answer"]}
{"id": 1671, "answer": true, "completion": ".decl Is_destroyable_by(Object:symbol, Tool:symbol)\nIs_destroyable_by(\"firewall\", \"hacker\").\nIs_destroyable_by(\"wall\", \"hammer\").\n.decl Is_type_of(Object1:symbol, Object2:symbol)\nIs_type_of(\"firewall\", \"wall\").\n.decl Answer()\nAnswer() :- Is_destroyable_by(\"firewall\", \"hammer\").\nAnswer() :- Is_type_of(\"firewall\", object2), Is_destroyable_by(object2, \"hammer\").\n.output Answer", "completions": [".decl Is_destroyable_by(Object:symbol, Tool:symbol)\nIs_destroyable_by(\"firewall\", \"hacker\").\nIs_destroyable_by(\"wall\", \"hammer\").\n.decl Is_type_of(Object1:symbol, Object2:symbol)\nIs_type_of(\"firewall\", \"wall\").\n.decl Answer()\nAnswer() :- Is_destroyable_by(\"firewall\", \"hammer\").\nAnswer() :- Is_type_of(\"firewall\", object2), Is_destroyable_by(object2, \"hammer\").\n.output Answer"]}
{"id": 1672, "answer": false, "completion": ".decl Has_n_theses(Person:symbol, N_theses:float)\nHas_n_theses(\"Martin Luther\", 95).\n.decl Days_in_half_year(Days:float)\nDays_in_half_year(182.5).\n.decl Answer()\nAnswer() :- Has_n_theses(\"Martin Luther\", n_theses), Days_in_half_year(days), n_theses / days <= 1.\n.output Answer", "completions": [".decl Has_n_theses(Person:symbol, N_theses:float)\nHas_n_theses(\"Martin Luther\", 95).\n.decl Days_in_half_year(Days:float)\nDays_in_half_year(182.5).\n.decl Answer()\nAnswer() :- Has_n_theses(\"Martin Luther\", n_theses), Days_in_half_year(days), n_theses / days <= 1.\n.output Answer"]}
{"id": 1673, "answer": true, "completion": ".decl Has_n_options(Puzzle:symbol, N_options:float)\nHas_n_options(\"Sudoku\", 9).\n.decl Has_n_symbols(Symbol_system:symbol, N_symbols:float)\nHas_n_symbols(\"Roman numerals\", 7).\n.decl Answer()\nAnswer() :- Has_n_options(\"Sudoku\", n_options), Has_n_symbols(\"Roman numerals\", n_symbols), n_symbols >= n_options.\n.output Answer", "completions": [".decl Has_n_options(Puzzle:symbol, N_options:float)\nHas_n_options(\"Sudoku\", 9).\n.decl Has_n_symbols(Symbol_system:symbol, N_symbols:float)\nHas_n_symbols(\"Roman numerals\", 7).\n.decl Answer()\nAnswer() :- Has_n_options(\"Sudoku\", n_options), Has_n_symbols(\"Roman numerals\", n_symbols), n_symbols >= n_options.\n.output Answer"]}
{"id": 1674, "answer": false, "completion": ".decl Supports_independence(Person:symbol, Stance:symbol)\nSupports_independence(\"Alistair Darling\", \"against\").\n.decl Answer()\nAnswer() :- Supports_independence(\"Alistair Darling\", \"in favor\").\n.output Answer", "completions": [".decl Supports_independence(Person:symbol, Stance:symbol)\nSupports_independence(\"Alistair Darling\", \"against\").\n.decl Answer()\nAnswer() :- Supports_independence(\"Alistair Darling\", \"in favor\").\n.output Answer"]}
{"id": 1675, "answer": true, "completion": ".decl Inanimate_objects_come_alive(Movie:symbol)\nInanimate_objects_come_alive(\"Beauty and the Beast\").\n.decl Answer()\nAnswer() :- Inanimate_objects_come_alive(\"Beauty and the Beast\").\n.output Answer", "completions": [".decl Inanimate_objects_come_alive(Movie:symbol)\nInanimate_objects_come_alive(\"Beauty and the Beast\").\n.decl Answer()\nAnswer() :- Inanimate_objects_come_alive(\"Beauty and the Beast\").\n.output Answer"]}
{"id": 1676, "answer": true, "completion": ".decl Has_reproductive_rate(Species:symbol, Reproductive_rate:float)\nHas_reproductive_rate(\"bottlenose dolphin\", 1).\nHas_reproductive_rate(\"human woman\", 0.5).\n.decl Answer()\nAnswer() :- Has_reproductive_rate(\"bottlenose dolphin\", rate1), Has_reproductive_rate(\"human woman\", rate2), rate1 > rate2.\n.output Answer", "completions": [".decl Has_reproductive_rate(Species:symbol, Reproductive_rate:float)\nHas_reproductive_rate(\"bottlenose dolphin\", 1).\nHas_reproductive_rate(\"human woman\", 0.5).\n.decl Answer()\nAnswer() :- Has_reproductive_rate(\"bottlenose dolphin\", rate1), Has_reproductive_rate(\"human woman\", rate2), rate1 > rate2.\n.output Answer"]}
{"id": 1677, "answer": true, "completion": ".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"Scooby Doo\", 1.5).\nHas_size(\"kangaroo pouch\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"Scooby Doo\", size1), Has_size(\"kangaroo pouch\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"Scooby Doo\", 1.5).\nHas_size(\"kangaroo pouch\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"Scooby Doo\", size1), Has_size(\"kangaroo pouch\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1678, "answer": true, "completion": ".decl Has_n_movies(Actor:symbol, N_movies:float)\nHas_n_movies(\"Julia Roberts\", 61).\nHas_n_movies(\"Eric Roberts\", 409).\nHas_n_movies(\"Lisa Roberts Gillan\", 30).\n.decl Answer()\nAnswer() :- Has_n_movies(\"Julia Roberts\", n_movies1), Has_n_movies(actor2, n_movies2), actor2 != \"Julia Roberts\", n_movies1 < n_movies2.\n.output Answer", "completions": [".decl Has_n_movies(Actor:symbol, N_movies:float)\nHas_n_movies(\"Julia Roberts\", 61).\nHas_n_movies(\"Eric Roberts\", 409).\nHas_n_movies(\"Lisa Roberts Gillan\", 30).\n.decl Answer()\nAnswer() :- Has_n_movies(\"Julia Roberts\", n_movies1), Has_n_movies(actor2, n_movies2), actor2 != \"Julia Roberts\", n_movies1 < n_movies2.\n.output Answer"]}
{"id": 1679, "answer": true, "completion": ".decl Prefers(Object:symbol, Preference:float)\nPrefers(\"binoculars\", 0.5).\nPrefers(\"telescope\", 0.9).\n.decl Answer()\nAnswer() :- Prefers(\"binoculars\", preference1), Prefers(\"telescope\", preference2), preference1 > preference2.\n.output Answer", "completions": [".decl Prefers(Object:symbol, Preference:float)\nPrefers(\"binoculars\", 0.5).\nPrefers(\"telescope\", 0.9).\n.decl Answer()\nAnswer() :- Prefers(\"binoculars\", preference1), Prefers(\"telescope\", preference2), preference1 > preference2.\n.output Answer"]}
{"id": 1680, "answer": true, "completion": ".decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"Ringo Starr\").\n.decl Contains_meat(Dish:symbol)\nContains_meat(\"pot roast\").\n.decl Avoids_dish(Person:symbol, Dish:symbol)\nAvoids_dish(person, dish) :- Is_vegetarian(person), Contains_meat(dish).\n.decl Answer()\nAnswer() :- Avoids_dish(\"Ringo Starr\", \"pot roast\").\n.output Answer", "completions": [".decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"Ringo Starr\").\n.decl Contains_meat(Dish:symbol)\nContains_meat(\"pot roast\").\n.decl Avoids_dish(Person:symbol, Dish:symbol)\nAvoids_dish(person, dish) :- Is_vegetarian(person), Contains_meat(dish).\n.decl Answer()\nAnswer() :- Avoids_dish(\"Ringo Starr\", \"pot roast\").\n.output Answer"]}
{"id": 1681, "answer": false, "completion": ".decl Has_diagnosis(Person:symbol, Diagnosis:symbol)\n.decl Is_medical_condition(Condition:symbol)\nIs_medical_condition(\"Great Depression\").\nIs_medical_condition(\"depression\").\n.decl Answer()\nAnswer() :- Has_diagnosis(person, \"Great Depression\"), Is_medical_condition(\"Great Depression\").\nAnswer() :- Has_diagnosis(person, \"depression\"), Is_medical_condition(\"depression\").\n.output Answer", "completions": [".decl Has_diagnosis(Person:symbol, Diagnosis:symbol)\n.decl Is_medical_condition(Condition:symbol)\nIs_medical_condition(\"Great Depression\").\nIs_medical_condition(\"depression\").\n.decl Answer()\nAnswer() :- Has_diagnosis(person, \"Great Depression\"), Is_medical_condition(\"Great Depression\").\nAnswer() :- Has_diagnosis(person, \"depression\"), Is_medical_condition(\"depression\").\n.output Answer"]}
{"id": 1682, "answer": false, "completion": ".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Mercury\", 800).\n.decl Is_warm_weather_attire_good(Idea:symbol, Temperature:float)\nIs_warm_weather_attire_good(\"good\", 70).\nIs_warm_weather_attire_good(\"good\", 80).\nIs_warm_weather_attire_good(\"good\", 90).\nIs_warm_weather_attire_good(\"good\", 100).\n.decl Answer()\nAnswer() :- Has_temperature(\"Mercury\", temperature), Is_warm_weather_attire_good(\"good\", temperature).\n.output Answer", "completions": [".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Mercury\", 800).\n.decl Is_warm_weather_attire_good(Idea:symbol, Temperature:float)\nIs_warm_weather_attire_good(\"good\", 70).\nIs_warm_weather_attire_good(\"good\", 80).\nIs_warm_weather_attire_good(\"good\", 90).\nIs_warm_weather_attire_good(\"good\", 100).\n.decl Answer()\nAnswer() :- Has_temperature(\"Mercury\", temperature), Is_warm_weather_attire_good(\"good\", temperature).\n.output Answer"]}
{"id": 1683, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Helen Keller\", 1880).\nBorn_in_year(\"J. K. Rowling\", 1965).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Helen Keller\", 1968).\n.decl Published_in_year(Author:symbol, Novel:symbol, Publication_year:float)\nPublished_in_year(\"J. K. Rowling\", \"Harry Potter and the Philosopher's Stone\", 1997).\n.decl Read_novel(Person:symbol, Novel:symbol)\n.decl Answer()\nAnswer() :- Born_in_year(\"Helen Keller\", birth_year1), Died_in_year(\"Helen Keller\", death_year1), Born_in_year(\"J. K. Rowling\", birth_year2), Published_in_year(\"J. K. Rowling\", novel, publication_year), birth_year1 <= publication_year, publication_year <= death_year1.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Helen Keller\", 1880).\nBorn_in_year(\"J. K. Rowling\", 1965).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Helen Keller\", 1968).\n.decl Published_in_year(Author:symbol, Novel:symbol, Publication_year:float)\nPublished_in_year(\"J. K. Rowling\", \"Harry Potter and the Philosopher's Stone\", 1997).\n.decl Read_novel(Person:symbol, Novel:symbol)\n.decl Answer()\nAnswer() :- Born_in_year(\"Helen Keller\", birth_year1), Died_in_year(\"Helen Keller\", death_year1), Born_in_year(\"J. K. Rowling\", birth_year2), Published_in_year(\"J. K. Rowling\", novel, publication_year), birth_year1 <= publication_year, publication_year <= death_year1.\n.output Answer"]}
{"id": 1684, "answer": false, "completion": ".decl Has_disqualification(Reason:symbol, Organization:symbol)\nHas_disqualification(\"self harm\", \"United States Marine Corps\").\n.decl Recruit(Person:symbol, Reason:symbol)\nRecruit(\"recruit\", \"self harm\").\n.decl Answer()\nAnswer() :- Recruit(person, reason), Has_disqualification(reason, \"United States Marine Corps\").\n.output Answer", "completions": [".decl Has_disqualification(Reason:symbol, Organization:symbol)\nHas_disqualification(\"self harm\", \"United States Marine Corps\").\n.decl Recruit(Person:symbol, Reason:symbol)\nRecruit(\"recruit\", \"self harm\").\n.decl Answer()\nAnswer() :- Recruit(person, reason), Has_disqualification(reason, \"United States Marine Corps\").\n.output Answer"]}
{"id": 1685, "answer": true, "completion": ".decl Enemies(Person_A:symbol, Person_B:symbol)\nEnemies(\"Jay Thomas\", \"Clayton Moore\").\n.decl Answer()\nAnswer() :- Enemies(\"Jay Thomas\", \"Clayton Moore\").\n.output Answer", "completions": [".decl Enemies(Person_A:symbol, Person_B:symbol)\nEnemies(\"Jay Thomas\", \"Clayton Moore\").\n.decl Answer()\nAnswer() :- Enemies(\"Jay Thomas\", \"Clayton Moore\").\n.output Answer"]}
{"id": 1686, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Douglas Adams\", 1952).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"email\", 1971).\n.decl Used_as_child(Person:symbol, Technology:symbol)\nUsed_as_child(person, technology) :- Born_in_year(person, birth_year), Invented_in_year(technology, invention_year), birth_year + 12 >= invention_year.\n.decl Answer()\nAnswer() :- Used_as_child(\"Douglas Adams\", \"email\").\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Douglas Adams\", 1952).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"email\", 1971).\n.decl Used_as_child(Person:symbol, Technology:symbol)\nUsed_as_child(person, technology) :- Born_in_year(person, birth_year), Invented_in_year(technology, invention_year), birth_year + 12 >= invention_year.\n.decl Answer()\nAnswer() :- Used_as_child(\"Douglas Adams\", \"email\").\n.output Answer"]}
{"id": 1687, "answer": true, "completion": ".decl Dangerous(Manipulation:symbol)\nDangerous(\"neck manipulation\").\n.decl Chiropractic(Manipulation:symbol)\nChiropractic(\"neck manipulation\").\nChiropractic(\"spinal manipulation\").\n.decl Answer()\nAnswer() :- Dangerous(manipulation), Chiropractic(manipulation).\n.output Answer", "completions": [".decl Dangerous(Manipulation:symbol)\nDangerous(\"neck manipulation\").\n.decl Chiropractic(Manipulation:symbol)\nChiropractic(\"neck manipulation\").\nChiropractic(\"spinal manipulation\").\n.decl Answer()\nAnswer() :- Dangerous(manipulation), Chiropractic(manipulation).\n.output Answer"]}
{"id": 1688, "answer": false, "completion": ".decl Has_name_length(Celebrity:symbol, Name_length:float)\nHas_name_length(\"Olivia Newton-John\", 17).\nHas_name_length(\"Sarah Jessica Parker\", 18).\nHas_name_length(\"Michael J. Fox\", 13).\nHas_name_length(\"Neil Patrick Harris\", 18).\n.decl Is_hyphenated(Celebrity:symbol)\nIs_hyphenated(\"Olivia Newton-John\").\n.decl Answer()\nAnswer() :- Is_hyphenated(celebrity), Has_name_length(celebrity, name_length1), !Has_name_length(other_celebrity, name_length2), name_length2 > name_length1.\n.output Answer", "completions": [".decl Has_name_length(Celebrity:symbol, Name_length:float)\nHas_name_length(\"Olivia Newton-John\", 17).\nHas_name_length(\"Sarah Jessica Parker\", 18).\nHas_name_length(\"Michael J. Fox\", 13).\nHas_name_length(\"Neil Patrick Harris\", 18).\n.decl Is_hyphenated(Celebrity:symbol)\nIs_hyphenated(\"Olivia Newton-John\").\n.decl Answer()\nAnswer() :- Is_hyphenated(celebrity), Has_name_length(celebrity, name_length1), !Has_name_length(other_celebrity, name_length2), name_length2 > name_length1.\n.output Answer"]}
{"id": 1689, "answer": true, "completion": ".decl Is_composite(Number:float)\nIs_composite(4). Is_composite(6). Is_composite(8). Is_composite(9). Is_composite(10).\nIs_composite(12). Is_composite(14). Is_composite(15). Is_composite(16). Is_composite(18).\nIs_composite(20). Is_composite(21). Is_composite(22). Is_composite(24). Is_composite(25).\nIs_composite(26). Is_composite(27). Is_composite(28). Is_composite(30). Is_composite(32).\nIs_composite(33). Is_composite(34). Is_composite(35). Is_composite(36). Is_composite(38).\nIs_composite(39). Is_composite(40). Is_composite(42). Is_composite(44). Is_composite(45).\nIs_composite(46). Is_composite(48). Is_composite(49). Is_composite(50). Is_composite(51).\nIs_composite(52). Is_composite(54). Is_composite(55). Is_composite(56). Is_composite(57).\nIs_composite(58). Is_composite(60). Is_composite(62). Is_composite(63). Is_composite(64).\nIs_composite(65). Is_composite(66). Is_composite(68). Is_composite(69). Is_composite(70).\nIs_composite(72). Is_composite(74). Is_composite(75). Is_composite(76). Is_composite(77).\nIs_composite(78). Is_composite(80). Is_composite(81). Is_composite(82). Is_composite(84).\nIs_composite(85). Is_composite(86). Is_composite(87). Is_composite(88). Is_composite(90).\nIs_composite(91). Is_composite(92). Is_composite(93). Is_composite(94). Is_composite(95).\nIs_composite(96). Is_composite(98). Is_composite(99). Is_composite(100).\n\n.decl Founded_in_year(Company:symbol, Year:float)\nFounded_in_year(\"Casio\", 1946).\n\n.decl Answer()\nAnswer() :- Founded_in_year(\"Casio\", year), Is_composite(year).\n.output Answer", "completions": [".decl Is_composite(Number:float)\nIs_composite(4). Is_composite(6). Is_composite(8). Is_composite(9). Is_composite(10).\nIs_composite(12). Is_composite(14). Is_composite(15). Is_composite(16). Is_composite(18).\nIs_composite(20). Is_composite(21). Is_composite(22). Is_composite(24). Is_composite(25).\nIs_composite(26). Is_composite(27). Is_composite(28). Is_composite(30). Is_composite(32).\nIs_composite(33). Is_composite(34). Is_composite(35). Is_composite(36). Is_composite(38).\nIs_composite(39). Is_composite(40). Is_composite(42). Is_composite(44). Is_composite(45).\nIs_composite(46). Is_composite(48). Is_composite(49). Is_composite(50). Is_composite(51).\nIs_composite(52). Is_composite(54). Is_composite(55). Is_composite(56). Is_composite(57).\nIs_composite(58). Is_composite(60). Is_composite(62). Is_composite(63). Is_composite(64).\nIs_composite(65). Is_composite(66). Is_composite(68). Is_composite(69). Is_composite(70).\nIs_composite(72). Is_composite(74). Is_composite(75). Is_composite(76). Is_composite(77).\nIs_composite(78). Is_composite(80). Is_composite(81). Is_composite(82). Is_composite(84).\nIs_composite(85). Is_composite(86). Is_composite(87). Is_composite(88). Is_composite(90).\nIs_composite(91). Is_composite(92). Is_composite(93). Is_composite(94). Is_composite(95).\nIs_composite(96). Is_composite(98). Is_composite(99). Is_composite(100).\n\n.decl Founded_in_year(Company:symbol, Year:float)\nFounded_in_year(\"Casio\", 1946).\n\n.decl Answer()\nAnswer() :- Founded_in_year(\"Casio\", year), Is_composite(year).\n.output Answer"]}
{"id": 1690, "answer": true, "completion": ".decl Has_grip(God:symbol, Grip:symbol)\nHas_grip(\"Hades\", \"tight\").\n.decl Answer()\nAnswer() :- Has_grip(\"Hades\", \"loose\").\n.output Answer", "completions": [".decl Has_grip(God:symbol, Grip:symbol)\nHas_grip(\"Hades\", \"tight\").\n.decl Answer()\nAnswer() :- Has_grip(\"Hades\", \"loose\").\n.output Answer"]}
{"id": 1691, "answer": true, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"George W. Bush\", \"English\").\n.decl Answer()\nAnswer() :- Speaks_language(\"George W. Bush\", \"Cantonese\").\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"George W. Bush\", \"English\").\n.decl Answer()\nAnswer() :- Speaks_language(\"George W. Bush\", \"Cantonese\").\n.output Answer"]}
{"id": 1692, "answer": true, "completion": ".decl Violates_amendment(Act:symbol, Amendment:symbol)\nViolates_amendment(\"crucifixion\", \"US eighth amendment\").\n.decl Answer()\nAnswer() :- Violates_amendment(\"crucifixion\", \"US eighth amendment\").\n.output Answer", "completions": [".decl Violates_amendment(Act:symbol, Amendment:symbol)\nViolates_amendment(\"crucifixion\", \"US eighth amendment\").\n.decl Answer()\nAnswer() :- Violates_amendment(\"crucifixion\", \"US eighth amendment\").\n.output Answer"]}
{"id": 1693, "answer": false, "completion": ".decl Crashed_due_to(Who:symbol, Reason:symbol)\nCrashed_due_to(\"Dale Sr.\", \"stroke\").\n.decl Is_father_of(Father:symbol, Child:symbol)\nIs_father_of(\"Dale Sr.\", \"Dale Jr.\").\n.decl Answer()\nAnswer() :- Crashed_due_to(who, \"stroke\"), Is_father_of(who, \"Dale Jr.\").\n.output Answer", "completions": [".decl Crashed_due_to(Who:symbol, Reason:symbol)\nCrashed_due_to(\"Dale Sr.\", \"stroke\").\n.decl Is_father_of(Father:symbol, Child:symbol)\nIs_father_of(\"Dale Sr.\", \"Dale Jr.\").\n.decl Answer()\nAnswer() :- Crashed_due_to(who, \"stroke\"), Is_father_of(who, \"Dale Jr.\").\n.output Answer"]}
{"id": 1694, "answer": true, "completion": ".decl Has_genre(Author:symbol, Book:symbol, Genre:symbol)\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Goblet of Fire\", \"fantasy\").\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Order of the Phoenix\", \"fantasy\").\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Deathly Hallows\", \"fantasy\").\nHas_genre(\"Agatha Christie\", \"And Then There Were None\", \"mystery\").\n.decl Answer()\nAnswer() :- Has_genre(\"J.K. Rowling\", book, genre), Has_genre(\"Agatha Christie\", \"And Then There Were None\", genre).\n.output Answer", "completions": [".decl Has_genre(Author:symbol, Book:symbol, Genre:symbol)\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Goblet of Fire\", \"fantasy\").\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Order of the Phoenix\", \"fantasy\").\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nHas_genre(\"J.K. Rowling\", \"Harry Potter and the Deathly Hallows\", \"fantasy\").\nHas_genre(\"Agatha Christie\", \"And Then There Were None\", \"mystery\").\n.decl Answer()\nAnswer() :- Has_genre(\"J.K. Rowling\", book, genre), Has_genre(\"Agatha Christie\", \"And Then There Were None\", genre).\n.output Answer"]}
{"id": 1695, "answer": true, "completion": ".decl Shooting_sports(Sport:symbol, Involves_bullets:bool)\nShooting_sports(\"archery\", false).\nShooting_sports(\"firearm shooting\", true).\nShooting_sports(\"paintball\", false).\nShooting_sports(\"airsoft\", false).\n.decl Answer()\nAnswer() :- Shooting_sports(sport, true), !Shooting_sports(sport, false).\n.output Answer", "completions": [".decl Shooting_sports(Sport:symbol, Involves_bullets:bool)\nShooting_sports(\"archery\", false).\nShooting_sports(\"firearm shooting\", true).\nShooting_sports(\"paintball\", false).\nShooting_sports(\"airsoft\", false).\n.decl Answer()\nAnswer() :- Shooting_sports(sport, true), !Shooting_sports(sport, false).\n.output Answer"]}
{"id": 1696, "answer": true, "completion": ".decl Is_monolingual(Person:symbol, Language:symbol)\nIs_monolingual(\"American\", \"English\").\n.decl Has_native_name(Company:symbol, Native_name:symbol, Language:symbol)\nHas_native_name(\"Lenovo\", \"联想\", \"Chinese\").\n.decl Can_read(Person:symbol, Text:symbol, Language:symbol)\nCan_read(\"monolingual American\", \"Lenovo's native name\", \"English\").\n.decl Answer()\nAnswer() :- Is_monolingual(\"American\", language1), Has_native_name(\"Lenovo\", _, language2), language1 != language2.\n.output Answer", "completions": [".decl Is_monolingual(Person:symbol, Language:symbol)\nIs_monolingual(\"American\", \"English\").\n.decl Has_native_name(Company:symbol, Native_name:symbol, Language:symbol)\nHas_native_name(\"Lenovo\", \"联想\", \"Chinese\").\n.decl Can_read(Person:symbol, Text:symbol, Language:symbol)\nCan_read(\"monolingual American\", \"Lenovo's native name\", \"English\").\n.decl Answer()\nAnswer() :- Is_monolingual(\"American\", language1), Has_native_name(\"Lenovo\", _, language2), language1 != language2.\n.output Answer"]}
{"id": 1697, "answer": true, "completion": ".decl Watches_in_country(Person:symbol, Film:symbol, Country:symbol)\nWatches_in_country(\"people\", \"Coen brothers films\", \"Guinea Bissau\").\n.decl Has_language(Film:symbol, Language:symbol)\nHas_language(\"Coen brothers films\", \"English\").\n.decl Official_language(Country:symbol, Language:symbol)\nOfficial_language(\"Guinea Bissau\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Watches_in_country(person, \"Coen brothers films\", \"Guinea Bissau\"), Has_language(\"Coen brothers films\", language1), Official_language(\"Guinea Bissau\", language2), language1 != language2.\n.output Answer", "completions": [".decl Watches_in_country(Person:symbol, Film:symbol, Country:symbol)\nWatches_in_country(\"people\", \"Coen brothers films\", \"Guinea Bissau\").\n.decl Has_language(Film:symbol, Language:symbol)\nHas_language(\"Coen brothers films\", \"English\").\n.decl Official_language(Country:symbol, Language:symbol)\nOfficial_language(\"Guinea Bissau\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Watches_in_country(person, \"Coen brothers films\", \"Guinea Bissau\"), Has_language(\"Coen brothers films\", language1), Official_language(\"Guinea Bissau\", language2), language1 != language2.\n.output Answer"]}
{"id": 1698, "answer": true, "completion": ".decl Has_moustache(Age_group:symbol)\nHas_moustache(\"adult\").\nHas_moustache(\"teenager\").\n.decl Answer()\nAnswer() :- !Has_moustache(\"baby\").\n.output Answer", "completions": [".decl Has_moustache(Age_group:symbol)\nHas_moustache(\"adult\").\nHas_moustache(\"teenager\").\n.decl Answer()\nAnswer() :- !Has_moustache(\"baby\").\n.output Answer"]}
{"id": 1699, "answer": true, "completion": ".decl Mastered_skill(Person:symbol, Skill:symbol, Age_group:symbol)\nMastered_skill(\"Jeremy Irons\", \"acting\", \"adult\").\n.decl Answer()\nAnswer() :- Mastered_skill(\"Jeremy Irons\", \"sweep picking\", \"child\").\n.output Answer", "completions": [".decl Mastered_skill(Person:symbol, Skill:symbol, Age_group:symbol)\nMastered_skill(\"Jeremy Irons\", \"acting\", \"adult\").\n.decl Answer()\nAnswer() :- Mastered_skill(\"Jeremy Irons\", \"sweep picking\", \"child\").\n.output Answer"]}
{"id": 1700, "answer": true, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Vietnam\", 97.34).\n.decl Has_average_height(Country:symbol, Average_height:float)\nHas_average_height(\"Vietnam\", 1.62).\n.decl NBA_height_requirement(Height:float)\nNBA_height_requirement(1.98).\n.decl Answer()\nAnswer() :- Has_population(\"Vietnam\", population), Has_average_height(\"Vietnam\", average_height), NBA_height_requirement(height_requirement), average_height >= height_requirement.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Vietnam\", 97.34).\n.decl Has_average_height(Country:symbol, Average_height:float)\nHas_average_height(\"Vietnam\", 1.62).\n.decl NBA_height_requirement(Height:float)\nNBA_height_requirement(1.98).\n.decl Answer()\nAnswer() :- Has_population(\"Vietnam\", population), Has_average_height(\"Vietnam\", average_height), NBA_height_requirement(height_requirement), average_height >= height_requirement.\n.output Answer"]}
{"id": 1701, "answer": true, "completion": ".decl Wrote(Person:symbol, Book:symbol)\nWrote(\"Dr. Seuss\", \"The Cat in the Hat\").\nWrote(\"Dr. Seuss\", \"Green Eggs and Ham\").\nWrote(\"Dr. Seuss\", \"How the Grinch Stole Christmas\").\n.decl Is_famous(Person:symbol)\nIs_famous(\"Dr. Seuss\").\n.decl Made_famous(Person:symbol, Work:symbol)\nMade_famous(person, work) :- Wrote(person, work), Is_famous(person).\n.decl Answer()\nAnswer() :- Made_famous(\"Dr. Seuss\", work).\n.output Answer", "completions": [".decl Wrote(Person:symbol, Book:symbol)\nWrote(\"Dr. Seuss\", \"The Cat in the Hat\").\nWrote(\"Dr. Seuss\", \"Green Eggs and Ham\").\nWrote(\"Dr. Seuss\", \"How the Grinch Stole Christmas\").\n.decl Is_famous(Person:symbol)\nIs_famous(\"Dr. Seuss\").\n.decl Made_famous(Person:symbol, Work:symbol)\nMade_famous(person, work) :- Wrote(person, work), Is_famous(person).\n.decl Answer()\nAnswer() :- Made_famous(\"Dr. Seuss\", work).\n.output Answer"]}
{"id": 1702, "answer": false, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"Starbucks\", \"coffee\").\nSells(\"Alfa Romeo dealership\", \"Alfa Romeo\").\n.decl Answer()\nAnswer() :- Sells(\"Starbucks\", \"Alfa Romeo\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"Starbucks\", \"coffee\").\nSells(\"Alfa Romeo dealership\", \"Alfa Romeo\").\n.decl Answer()\nAnswer() :- Sells(\"Starbucks\", \"Alfa Romeo\").\n.output Answer"]}
{"id": 1703, "answer": true, "completion": ".decl Has_color_variety(Animal:symbol, Color:symbol)\nHas_color_variety(\"calico cat\", \"orange\").\nHas_color_variety(\"calico cat\", \"black\").\nHas_color_variety(\"calico cat\", \"white\").\nHas_color_variety(\"drain fly\", \"brown\").\nHas_color_variety(\"drain fly\", \"gray\").\n.decl Answer()\nAnswer() :- Has_color_variety(\"calico cat\", color1), Has_color_variety(\"drain fly\", color2), !color1 = color2.\n.output Answer", "completions": [".decl Has_color_variety(Animal:symbol, Color:symbol)\nHas_color_variety(\"calico cat\", \"orange\").\nHas_color_variety(\"calico cat\", \"black\").\nHas_color_variety(\"calico cat\", \"white\").\nHas_color_variety(\"drain fly\", \"brown\").\nHas_color_variety(\"drain fly\", \"gray\").\n.decl Answer()\nAnswer() :- Has_color_variety(\"calico cat\", color1), Has_color_variety(\"drain fly\", color2), !color1 = color2.\n.output Answer"]}
{"id": 1704, "answer": false, "completion": ".decl Is_scavenger_bird(Bird:symbol)\nIs_scavenger_bird(\"vulture\").\nIs_scavenger_bird(\"hyena\").\nIs_scavenger_bird(\"crow\").\n.decl Answer()\nAnswer() :- Is_scavenger_bird(\"Golden eagle\").\n.output Answer", "completions": [".decl Is_scavenger_bird(Bird:symbol)\nIs_scavenger_bird(\"vulture\").\nIs_scavenger_bird(\"hyena\").\nIs_scavenger_bird(\"crow\").\n.decl Answer()\nAnswer() :- Is_scavenger_bird(\"Golden eagle\").\n.output Answer"]}
{"id": 1705, "answer": true, "completion": ".decl Has_price_level(Store:symbol, Price_level:float)\nHas_price_level(\"Aldi\", 1).\nHas_price_level(\"Whole Foods\", 3).\n.decl Answer()\nAnswer() :- Has_price_level(\"Aldi\", price_level1), Has_price_level(\"Whole Foods\", price_level2), price_level1 < price_level2.\n.output Answer", "completions": [".decl Has_price_level(Store:symbol, Price_level:float)\nHas_price_level(\"Aldi\", 1).\nHas_price_level(\"Whole Foods\", 3).\n.decl Answer()\nAnswer() :- Has_price_level(\"Aldi\", price_level1), Has_price_level(\"Whole Foods\", price_level2), price_level1 < price_level2.\n.output Answer"]}
{"id": 1706, "answer": false, "completion": ".decl Nests(Animal:symbol, Location:symbol)\nNests(\"bald eagle\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Nests(\"bald eagle\", \"Mount Sharp\").\n.output Answer", "completions": [".decl Nests(Animal:symbol, Location:symbol)\nNests(\"bald eagle\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Nests(\"bald eagle\", \"Mount Sharp\").\n.output Answer"]}
{"id": 1707, "answer": true, "completion": ".decl Cures(Medicine:symbol, Condition:symbol)\nCures(\"penicillin\", \"bacterial infection\").\n.decl Is_learning_disability(Condition:symbol)\nIs_learning_disability(\"learning disability\").\n.decl Answer()\nAnswer() :- Cures(\"penicillin\", condition), Is_learning_disability(condition).\n.output Answer", "completions": [".decl Cures(Medicine:symbol, Condition:symbol)\nCures(\"penicillin\", \"bacterial infection\").\n.decl Is_learning_disability(Condition:symbol)\nIs_learning_disability(\"learning disability\").\n.decl Answer()\nAnswer() :- Cures(\"penicillin\", condition), Is_learning_disability(condition).\n.output Answer"]}
{"id": 1708, "answer": false, "completion": ".decl Is_actress(Person:symbol)\nIs_actress(\"Danica McKellar\").\n.decl Is_astronaut(Person:symbol)\nIs_astronaut(\"Danica McKellar\").\n.decl Has_education_requirements(Role:symbol, Requirement:symbol)\nHas_education_requirements(\"astronaut\", \"education\").\n.decl Answer()\nAnswer() :- Is_actress(\"Danica McKellar\"), !Is_astronaut(\"Danica McKellar\").\nAnswer() :- Is_actress(\"Danica McKellar\"), Is_astronaut(\"Danica McKellar\"), !Has_education_requirements(\"astronaut\", \"education\").\n.output Answer", "completions": [".decl Is_actress(Person:symbol)\nIs_actress(\"Danica McKellar\").\n.decl Is_astronaut(Person:symbol)\nIs_astronaut(\"Danica McKellar\").\n.decl Has_education_requirements(Role:symbol, Requirement:symbol)\nHas_education_requirements(\"astronaut\", \"education\").\n.decl Answer()\nAnswer() :- Is_actress(\"Danica McKellar\"), !Is_astronaut(\"Danica McKellar\").\nAnswer() :- Is_actress(\"Danica McKellar\"), Is_astronaut(\"Danica McKellar\"), !Has_education_requirements(\"astronaut\", \"education\").\n.output Answer"]}
{"id": 1709, "answer": true, "completion": ".decl Has_ability(Animal:symbol, Ability:symbol)\nHas_ability(\"Goblin shark\", \"swimming\").\n.decl Has_ability_with_limbs(Animal:symbol, Ability:symbol)\nHas_ability_with_limbs(\"Goblin shark\", \"riding a bike\").\n.decl Answer()\nAnswer() :- Has_ability_with_limbs(\"Goblin shark\", \"riding a bike\").\n.output Answer", "completions": [".decl Has_ability(Animal:symbol, Ability:symbol)\nHas_ability(\"Goblin shark\", \"swimming\").\n.decl Has_ability_with_limbs(Animal:symbol, Ability:symbol)\nHas_ability_with_limbs(\"Goblin shark\", \"riding a bike\").\n.decl Answer()\nAnswer() :- Has_ability_with_limbs(\"Goblin shark\", \"riding a bike\").\n.output Answer"]}
{"id": 1710, "answer": false, "completion": ".decl Can_drive(Animal:symbol)\nCan_drive(\"human\").\n.decl Is_animal(Animal:symbol)\nIs_animal(\"northern fur seal\").\n.decl Answer()\nAnswer() :- Is_animal(\"northern fur seal\"), !Can_drive(\"northern fur seal\").\n.output Answer", "completions": [".decl Can_drive(Animal:symbol)\nCan_drive(\"human\").\n.decl Is_animal(Animal:symbol)\nIs_animal(\"northern fur seal\").\n.decl Answer()\nAnswer() :- Is_animal(\"northern fur seal\"), !Can_drive(\"northern fur seal\").\n.output Answer"]}
{"id": 1711, "answer": true, "completion": ".decl Is_Generation_Y(Person:symbol, Birth_year:float)\nIs_Generation_Y(\"Generation Y member\", 1981).\nIs_Generation_Y(\"Generation Y member\", 1996).\n.decl NYPD_Age_Requirement(Min_age:float, Max_age:float)\nNYPD_Age_Requirement(21, 35).\n.decl Current_Year(Year:float)\nCurrent_Year(2022).\n.decl Answer()\nAnswer() :- Is_Generation_Y(\"Generation Y member\", birth_year), NYPD_Age_Requirement(min_age, max_age), Current_Year(current_year), current_age = current_year - birth_year, current_age >= min_age, current_age <= max_age.\n.output Answer", "completions": [".decl Is_Generation_Y(Person:symbol, Birth_year:float)\nIs_Generation_Y(\"Generation Y member\", 1981).\nIs_Generation_Y(\"Generation Y member\", 1996).\n.decl NYPD_Age_Requirement(Min_age:float, Max_age:float)\nNYPD_Age_Requirement(21, 35).\n.decl Current_Year(Year:float)\nCurrent_Year(2022).\n.decl Answer()\nAnswer() :- Is_Generation_Y(\"Generation Y member\", birth_year), NYPD_Age_Requirement(min_age, max_age), Current_Year(current_year), current_age = current_year - birth_year, current_age >= min_age, current_age <= max_age.\n.output Answer"]}
{"id": 1712, "answer": true, "completion": ".decl Can_solve_puzzle(Person:symbol, Puzzle:symbol)\nCan_solve_puzzle(\"adult\", \"sudoku\").\n.decl Is_infant(Person:symbol)\nIs_infant(\"infant\").\n.decl Answer()\nAnswer() :- Can_solve_puzzle(\"infant\", \"sudoku\").\nAnswer() :- !Is_infant(\"infant\").\n.output Answer", "completions": [".decl Can_solve_puzzle(Person:symbol, Puzzle:symbol)\nCan_solve_puzzle(\"adult\", \"sudoku\").\n.decl Is_infant(Person:symbol)\nIs_infant(\"infant\").\n.decl Answer()\nAnswer() :- Can_solve_puzzle(\"infant\", \"sudoku\").\nAnswer() :- !Is_infant(\"infant\").\n.output Answer"]}
{"id": 1713, "answer": false, "completion": ".decl Is_color(Object:symbol, Color:symbol)\nIs_color(\"pickled cucumber\", \"green\").\nIs_color(\"cucumber\", \"green\").\nIs_color(\"red\", \"red\").\n.decl Answer()\nAnswer() :- Is_color(\"pickled cucumber\", \"red\").\n.output Answer", "completions": [".decl Is_color(Object:symbol, Color:symbol)\nIs_color(\"pickled cucumber\", \"green\").\nIs_color(\"cucumber\", \"green\").\nIs_color(\"red\", \"red\").\n.decl Answer()\nAnswer() :- Is_color(\"pickled cucumber\", \"red\").\n.output Answer"]}
{"id": 1714, "answer": true, "completion": ".decl Uses_characters(Domain:symbol, Characters:symbol)\nUses_characters(\"coding\", \"Boolean algebra characters\").\n.decl Answer()\nAnswer() :- Uses_characters(\"coding\", \"Boolean algebra characters\").\n.output Answer", "completions": [".decl Uses_characters(Domain:symbol, Characters:symbol)\nUses_characters(\"coding\", \"Boolean algebra characters\").\n.decl Answer()\nAnswer() :- Uses_characters(\"coding\", \"Boolean algebra characters\").\n.output Answer"]}
{"id": 1715, "answer": false, "completion": ".decl Is_man(Person:symbol)\nIs_man(\"John\").\nIs_man(\"David\").\n.decl Experiences_menstruation(Person:symbol)\nExperiences_menstruation(\"Jane\").\nExperiences_menstruation(\"Mary\").\n.decl Answer()\nAnswer() :- Is_man(person), Experiences_menstruation(person).\n.output Answer", "completions": [".decl Is_man(Person:symbol)\nIs_man(\"John\").\nIs_man(\"David\").\n.decl Experiences_menstruation(Person:symbol)\nExperiences_menstruation(\"Jane\").\nExperiences_menstruation(\"Mary\").\n.decl Answer()\nAnswer() :- Is_man(person), Experiences_menstruation(person).\n.output Answer"]}
{"id": 1716, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"skiing in Steamboat Springs, Colorado\", \"winter\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"August\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"skiing in Steamboat Springs, Colorado\", season), In_season(\"August\", season).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"skiing in Steamboat Springs, Colorado\", \"winter\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"August\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"skiing in Steamboat Springs, Colorado\", season), In_season(\"August\", season).\n.output Answer"]}
{"id": 1717, "answer": true, "completion": ".decl Has_mascot(Person:symbol, Mascot:symbol)\nHas_mascot(\"Bobby Jindal\", \"wolf\").\n.decl Eats_kibble(Animal:symbol)\nEats_kibble(\"dog\").\n.decl Answer()\nAnswer() :- Has_mascot(\"Bobby Jindal\", mascot), Eats_kibble(mascot).\n.output Answer", "completions": [".decl Has_mascot(Person:symbol, Mascot:symbol)\nHas_mascot(\"Bobby Jindal\", \"wolf\").\n.decl Eats_kibble(Animal:symbol)\nEats_kibble(\"dog\").\n.decl Answer()\nAnswer() :- Has_mascot(\"Bobby Jindal\", mascot), Eats_kibble(mascot).\n.output Answer"]}
{"id": 1718, "answer": true, "completion": ".decl Based_on_cycle(Months:symbol, Cycle:symbol)\nBased_on_cycle(\"months\", \"solar cycle\").\n.decl Answer()\nAnswer() :- Based_on_cycle(\"months\", \"solar cycle\").\n.output Answer", "completions": [".decl Based_on_cycle(Months:symbol, Cycle:symbol)\nBased_on_cycle(\"months\", \"solar cycle\").\n.decl Answer()\nAnswer() :- Based_on_cycle(\"months\", \"solar cycle\").\n.output Answer"]}
{"id": 1719, "answer": true, "completion": ".decl Is_known(Object:symbol, Group:symbol)\nIs_known(\"Route 66\", \"Americans\").\n.decl Answer()\nAnswer() :- !Is_known(\"Route 66\", \"Americans\").\n.output Answer", "completions": [".decl Is_known(Object:symbol, Group:symbol)\nIs_known(\"Route 66\", \"Americans\").\n.decl Answer()\nAnswer() :- !Is_known(\"Route 66\", \"Americans\").\n.output Answer"]}
{"id": 1720, "answer": true, "completion": ".decl Cooked_in(Object:symbol, Container:symbol)\nCooked_in(\"pancakes\", \"pan\").\n.decl Answer()\nAnswer() :- Cooked_in(\"pancakes\", \"pot\").\n.output Answer", "completions": [".decl Cooked_in(Object:symbol, Container:symbol)\nCooked_in(\"pancakes\", \"pan\").\n.decl Answer()\nAnswer() :- Cooked_in(\"pancakes\", \"pot\").\n.output Answer"]}
{"id": 1721, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Malcolm X\", 1925).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Malcolm X\", 1965).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"Unicode\", 1991).\n.decl Answer()\nAnswer() :- Born_in_year(\"Malcolm X\", birth_year), Died_in_year(\"Malcolm X\", death_year), Invented_in_year(\"Unicode\", invention_year), birth_year <= invention_year, invention_year <= death_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Malcolm X\", 1925).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Malcolm X\", 1965).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"Unicode\", 1991).\n.decl Answer()\nAnswer() :- Born_in_year(\"Malcolm X\", birth_year), Died_in_year(\"Malcolm X\", death_year), Invented_in_year(\"Unicode\", invention_year), birth_year <= invention_year, invention_year <= death_year.\n.output Answer"]}
{"id": 1722, "answer": true, "completion": ".decl Distance(City_A:symbol, City_B:symbol, Distance:float)\nDistance(\"NYC\", \"Raleigh NC\", 500).\n\n.decl Speed(Vehicle:symbol, Speed:float)\nSpeed(\"Toyota Hiux\", 60).\n\n.decl Travel_time(City_A:symbol, City_B:symbol, Vehicle:symbol, Time:float)\nTravel_time(cityA, cityB, vehicle, time) :- Distance(cityA, cityB, distance), Speed(vehicle, speed), time = distance / speed.\n\n.decl Human_heart_limit(Duration:float)\nHuman_heart_limit(4).\n\n.decl Answer()\nAnswer() :- Travel_time(\"NYC\", \"Raleigh NC\", \"Toyota Hiux\", travel_time), Human_heart_limit(limit), travel_time <= limit.\n.output Answer", "completions": [".decl Distance(City_A:symbol, City_B:symbol, Distance:float)\nDistance(\"NYC\", \"Raleigh NC\", 500).\n\n.decl Speed(Vehicle:symbol, Speed:float)\nSpeed(\"Toyota Hiux\", 60).\n\n.decl Travel_time(City_A:symbol, City_B:symbol, Vehicle:symbol, Time:float)\nTravel_time(cityA, cityB, vehicle, time) :- Distance(cityA, cityB, distance), Speed(vehicle, speed), time = distance / speed.\n\n.decl Human_heart_limit(Duration:float)\nHuman_heart_limit(4).\n\n.decl Answer()\nAnswer() :- Travel_time(\"NYC\", \"Raleigh NC\", \"Toyota Hiux\", travel_time), Human_heart_limit(limit), travel_time <= limit.\n.output Answer"]}
{"id": 1723, "answer": false, "completion": ".decl Has_tricarboxylic_acid(Food:symbol)\nHas_tricarboxylic_acid(\"citrus fruits\").\nHas_tricarboxylic_acid(\"tomatoes\").\n.decl Is_safe_for_allergy(Food:symbol, Allergy:symbol)\nIs_safe_for_allergy(\"watermelon\", \"tricarboxylic acid allergy\").\n.decl Answer()\nAnswer() :- !Has_tricarboxylic_acid(\"watermelon\"), Is_safe_for_allergy(\"watermelon\", \"tricarboxylic acid allergy\").\n.output Answer", "completions": [".decl Has_tricarboxylic_acid(Food:symbol)\nHas_tricarboxylic_acid(\"citrus fruits\").\nHas_tricarboxylic_acid(\"tomatoes\").\n.decl Is_safe_for_allergy(Food:symbol, Allergy:symbol)\nIs_safe_for_allergy(\"watermelon\", \"tricarboxylic acid allergy\").\n.decl Answer()\nAnswer() :- !Has_tricarboxylic_acid(\"watermelon\"), Is_safe_for_allergy(\"watermelon\", \"tricarboxylic acid allergy\").\n.output Answer"]}
{"id": 1724, "answer": true, "completion": ".decl Is_prevalent_in_cuisine(Ingredient:symbol, Cuisine:symbol)\nIs_prevalent_in_cuisine(\"shrimp\", \"Japanese\").\nIs_prevalent_in_cuisine(\"shrimp\", \"Chinese\").\nIs_prevalent_in_cuisine(\"shrimp\", \"Thai\").\nIs_prevalent_in_cuisine(\"shrimp\", \"Italian\").\nIs_prevalent_in_cuisine(\"shrimp\", \"Mexican\").\n.decl Answer()\nAnswer() :- Is_prevalent_in_cuisine(\"shrimp\", \"Ethiopian\").\n.output Answer", "completions": [".decl Is_prevalent_in_cuisine(Ingredient:symbol, Cuisine:symbol)\nIs_prevalent_in_cuisine(\"shrimp\", \"Japanese\").\nIs_prevalent_in_cuisine(\"shrimp\", \"Chinese\").\nIs_prevalent_in_cuisine(\"shrimp\", \"Thai\").\nIs_prevalent_in_cuisine(\"shrimp\", \"Italian\").\nIs_prevalent_in_cuisine(\"shrimp\", \"Mexican\").\n.decl Answer()\nAnswer() :- Is_prevalent_in_cuisine(\"shrimp\", \"Ethiopian\").\n.output Answer"]}
{"id": 1725, "answer": true, "completion": ".decl Has_major_battle(City:symbol, Century:float)\nHas_major_battle(\"San Antonio\", 19).\n.decl Answer()\nAnswer() :- Has_major_battle(\"San Antonio\", 19).\n.output Answer", "completions": [".decl Has_major_battle(City:symbol, Century:float)\nHas_major_battle(\"San Antonio\", 19).\n.decl Answer()\nAnswer() :- Has_major_battle(\"San Antonio\", 19).\n.output Answer"]}
{"id": 1726, "answer": true, "completion": ".decl Is_threat(Threat:symbol, Target:symbol)\nIs_threat(\"snakebite\", \"human\").\n.decl Is_type(Object:symbol, Type:symbol)\nIs_type(\"T-1000\", \"robot\").\n.decl Answer()\nAnswer() :- Is_threat(\"snakebite\", target), Is_type(\"T-1000\", type), target != type.\n.output Answer", "completions": [".decl Is_threat(Threat:symbol, Target:symbol)\nIs_threat(\"snakebite\", \"human\").\n.decl Is_type(Object:symbol, Type:symbol)\nIs_type(\"T-1000\", \"robot\").\n.decl Answer()\nAnswer() :- Is_threat(\"snakebite\", target), Is_type(\"T-1000\", type), target != type.\n.output Answer"]}
{"id": 1727, "answer": false, "completion": ".decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"Jon Jones\", \"black belt\").\n.decl Rank_order(Rank1:symbol, Rank2:symbol)\nRank_order(\"white belt\", \"blue belt\").\nRank_order(\"blue belt\", \"purple belt\").\nRank_order(\"purple belt\", \"brown belt\").\nRank_order(\"brown belt\", \"black belt\").\n.decl Can_defeat(Person1:symbol, Person2:symbol)\nCan_defeat(person1, person2) :- Has_rank(person1, rank1), Has_rank(person2, rank2), Rank_order(rank1, rank2).\n.decl Answer()\nAnswer() :- Can_defeat(\"white belt\", \"Jon Jones\").\n.output Answer", "completions": [".decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"Jon Jones\", \"black belt\").\n.decl Rank_order(Rank1:symbol, Rank2:symbol)\nRank_order(\"white belt\", \"blue belt\").\nRank_order(\"blue belt\", \"purple belt\").\nRank_order(\"purple belt\", \"brown belt\").\nRank_order(\"brown belt\", \"black belt\").\n.decl Can_defeat(Person1:symbol, Person2:symbol)\nCan_defeat(person1, person2) :- Has_rank(person1, rank1), Has_rank(person2, rank2), Rank_order(rank1, rank2).\n.decl Answer()\nAnswer() :- Can_defeat(\"white belt\", \"Jon Jones\").\n.output Answer"]}
{"id": 1728, "answer": true, "completion": ".decl Resembles(Character_A:symbol, Character_B:symbol)\nResembles(\"Darth Vader\", \"Severus Snape\").\n.decl Answer()\nAnswer() :- Resembles(\"Darth Vader\", \"Severus Snape\").\n.output Answer", "completions": [".decl Resembles(Character_A:symbol, Character_B:symbol)\nResembles(\"Darth Vader\", \"Severus Snape\").\n.decl Answer()\nAnswer() :- Resembles(\"Darth Vader\", \"Severus Snape\").\n.output Answer"]}
{"id": 1729, "answer": false, "completion": ".decl Has_weather_name(Team:symbol, Weather:symbol)\nHas_weather_name(\"Tornadoes\", \"tornado\").\nHas_weather_name(\"Hurricanes\", \"hurricane\").\nHas_weather_name(\"Storms\", \"storm\").\nHas_weather_name(\"Blizzards\", \"blizzard\").\nHas_weather_name(\"Thunderstorms\", \"thunderstorm\").\nHas_weather_name(\"Floods\", \"flood\").\n\n.decl Minor_league_team(Team:symbol)\nMinor_league_team(\"Tornadoes\").\nMinor_league_team(\"Hurricanes\").\nMinor_league_team(\"Storms\").\nMinor_league_team(\"Blizzards\").\nMinor_league_team(\"Thunderstorms\").\nMinor_league_team(\"Floods\").\n\n.decl Answer()\nAnswer() :- Minor_league_team(team), !Has_weather_name(team, _).\n.output Answer", "completions": [".decl Has_weather_name(Team:symbol, Weather:symbol)\nHas_weather_name(\"Tornadoes\", \"tornado\").\nHas_weather_name(\"Hurricanes\", \"hurricane\").\nHas_weather_name(\"Storms\", \"storm\").\nHas_weather_name(\"Blizzards\", \"blizzard\").\nHas_weather_name(\"Thunderstorms\", \"thunderstorm\").\nHas_weather_name(\"Floods\", \"flood\").\n\n.decl Minor_league_team(Team:symbol)\nMinor_league_team(\"Tornadoes\").\nMinor_league_team(\"Hurricanes\").\nMinor_league_team(\"Storms\").\nMinor_league_team(\"Blizzards\").\nMinor_league_team(\"Thunderstorms\").\nMinor_league_team(\"Floods\").\n\n.decl Answer()\nAnswer() :- Minor_league_team(team), !Has_weather_name(team, _).\n.output Answer"]}
{"id": 1730, "answer": false, "completion": ".decl Influenced(Genre_A:symbol, Genre_B:symbol)\nInfluenced(\"classical music\", \"heavy metal\").\n.decl Composer_belongs_to(Composer:symbol, Genre:symbol)\nComposer_belongs_to(\"Johann Sebastian Bach\", \"classical music\").\n.decl Answer()\nAnswer() :- Composer_belongs_to(\"Johann Sebastian Bach\", genre1), Influenced(genre1, \"heavy metal\").\n.output Answer", "completions": [".decl Influenced(Genre_A:symbol, Genre_B:symbol)\nInfluenced(\"classical music\", \"heavy metal\").\n.decl Composer_belongs_to(Composer:symbol, Genre:symbol)\nComposer_belongs_to(\"Johann Sebastian Bach\", \"classical music\").\n.decl Answer()\nAnswer() :- Composer_belongs_to(\"Johann Sebastian Bach\", genre1), Influenced(genre1, \"heavy metal\").\n.output Answer"]}
{"id": 1731, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"cheetah\", 60).\nHas_mass(\"Big Show\", 200).\n.decl Has_acceleration(Object:symbol, Acceleration:float)\nHas_acceleration(\"cheetah\", 20).\n.decl Generates_force(Object:symbol, Force:float)\nGenerates_force(Object, Force) :- Has_mass(Object, Mass), Has_acceleration(Object, Acceleration), Force = Mass * Acceleration.\n.decl Can_topple(Object_A:symbol, Object_B:symbol)\nCan_topple(Object_A, Object_B) :- Generates_force(Object_A, Force_A), Has_mass(Object_B, Mass_B), Force_A > Mass_B * 9.81.\n.decl Answer()\nAnswer() :- Can_topple(\"cheetah\", \"Big Show\").\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"cheetah\", 60).\nHas_mass(\"Big Show\", 200).\n.decl Has_acceleration(Object:symbol, Acceleration:float)\nHas_acceleration(\"cheetah\", 20).\n.decl Generates_force(Object:symbol, Force:float)\nGenerates_force(Object, Force) :- Has_mass(Object, Mass), Has_acceleration(Object, Acceleration), Force = Mass * Acceleration.\n.decl Can_topple(Object_A:symbol, Object_B:symbol)\nCan_topple(Object_A, Object_B) :- Generates_force(Object_A, Force_A), Has_mass(Object_B, Mass_B), Force_A > Mass_B * 9.81.\n.decl Answer()\nAnswer() :- Can_topple(\"cheetah\", \"Big Show\").\n.output Answer"]}
{"id": 1732, "answer": true, "completion": ".decl Is_good_at(Activity:symbol, Profession:symbol)\nIs_good_at(\"mountain rescue\", \"paratrooper\").\n.decl Answer()\nAnswer() :- Is_good_at(\"mountain rescue\", \"paratrooper\").\n.output Answer", "completions": [".decl Is_good_at(Activity:symbol, Profession:symbol)\nIs_good_at(\"mountain rescue\", \"paratrooper\").\n.decl Answer()\nAnswer() :- Is_good_at(\"mountain rescue\", \"paratrooper\").\n.output Answer"]}
{"id": 1733, "answer": true, "completion": ".decl Associates_with_death(Culture:symbol, Object:symbol)\nAssociates_with_death(\"Ancient Egyptians\", \"celery\").\n.decl Answer()\nAnswer() :- Associates_with_death(culture, \"celery\").\n.output Answer", "completions": [".decl Associates_with_death(Culture:symbol, Object:symbol)\nAssociates_with_death(\"Ancient Egyptians\", \"celery\").\n.decl Answer()\nAnswer() :- Associates_with_death(culture, \"celery\").\n.output Answer"]}
{"id": 1734, "answer": true, "completion": ".decl President(Name:symbol, Party:symbol, Order:float)\nPresident(\"Woodrow Wilson\", \"Democratic\", 28).\nPresident(\"William H. Taft\", \"Republican\", 27).\nPresident(\"Warren G. Harding\", \"Republican\", 29).\n.decl Sandwiched(Name:symbol)\nSandwiched(name) :- President(name, party1, order1), President(prev_name, party2, order2), President(next_name, party3, order3), party1 != party2, party1 != party3, order1 = order2 + 1, order1 = order3 - 1.\n.decl Answer()\nAnswer() :- Sandwiched(\"Woodrow Wilson\").\n.output Answer", "completions": [".decl President(Name:symbol, Party:symbol, Order:float)\nPresident(\"Woodrow Wilson\", \"Democratic\", 28).\nPresident(\"William H. Taft\", \"Republican\", 27).\nPresident(\"Warren G. Harding\", \"Republican\", 29).\n.decl Sandwiched(Name:symbol)\nSandwiched(name) :- President(name, party1, order1), President(prev_name, party2, order2), President(next_name, party3, order3), party1 != party2, party1 != party3, order1 = order2 + 1, order1 = order3 - 1.\n.decl Answer()\nAnswer() :- Sandwiched(\"Woodrow Wilson\").\n.output Answer"]}
{"id": 1735, "answer": false, "completion": ".decl Has_troops(Year:symbol, Troops:float)\nHas_troops(\"1965\", 184300).\n.decl Answer()\nAnswer() :- Has_troops(\"1965\", troops), troops < 150000.\n.output Answer", "completions": [".decl Has_troops(Year:symbol, Troops:float)\nHas_troops(\"1965\", 184300).\n.decl Answer()\nAnswer() :- Has_troops(\"1965\", troops), troops < 150000.\n.output Answer"]}
{"id": 1736, "answer": false, "completion": ".decl Is_assigned_to(Assignment:symbol, Grade_level:symbol)\nIs_assigned_to(\"thesis paper\", \"graduate students\").\n.decl Is_unusual(Assignment:symbol, Grade_level:symbol)\nIs_unusual(\"thesis paper\", \"kindergartners\").\n.decl Answer()\nAnswer() :- Is_unusual(\"thesis paper\", \"kindergartners\").\nAnswer() :- Is_assigned_to(\"thesis paper\", grade_level), grade_level != \"kindergartners\", !Is_assigned_to(\"thesis paper\", \"kindergartners\").\n.output Answer", "completions": [".decl Is_assigned_to(Assignment:symbol, Grade_level:symbol)\nIs_assigned_to(\"thesis paper\", \"graduate students\").\n.decl Is_unusual(Assignment:symbol, Grade_level:symbol)\nIs_unusual(\"thesis paper\", \"kindergartners\").\n.decl Answer()\nAnswer() :- Is_unusual(\"thesis paper\", \"kindergartners\").\nAnswer() :- Is_assigned_to(\"thesis paper\", grade_level), grade_level != \"kindergartners\", !Is_assigned_to(\"thesis paper\", \"kindergartners\").\n.output Answer"]}
{"id": 1737, "answer": true, "completion": ".decl Is_cephalophore(Person:symbol)\nIs_cephalophore(\"John the Baptist\").\n.decl Hypothetical_event(Event:symbol)\nHypothetical_event(\"cephalophore reunion in heaven\").\n.decl Invited(Person:symbol, Event:symbol)\nInvited(person, \"cephalophore reunion in heaven\") :- Is_cephalophore(person).\n.decl Answer()\nAnswer() :- Invited(\"John the Baptist\", \"cephalophore reunion in heaven\").\n.output Answer", "completions": [".decl Is_cephalophore(Person:symbol)\nIs_cephalophore(\"John the Baptist\").\n.decl Hypothetical_event(Event:symbol)\nHypothetical_event(\"cephalophore reunion in heaven\").\n.decl Invited(Person:symbol, Event:symbol)\nInvited(person, \"cephalophore reunion in heaven\") :- Is_cephalophore(person).\n.decl Answer()\nAnswer() :- Invited(\"John the Baptist\", \"cephalophore reunion in heaven\").\n.output Answer"]}
{"id": 1738, "answer": true, "completion": ".decl Involved_in_war(Group:symbol, War:symbol)\nInvolved_in_war(\"Wehrmacht\", \"World War II\").\n.decl War_alias(War:symbol, Alias:symbol)\nWar_alias(\"World War I\", \"War to End All Wars\").\n.decl Answer()\nAnswer() :- Involved_in_war(\"Wehrmacht\", war), War_alias(war, \"War to End All Wars\").\n.output Answer", "completions": [".decl Involved_in_war(Group:symbol, War:symbol)\nInvolved_in_war(\"Wehrmacht\", \"World War II\").\n.decl War_alias(War:symbol, Alias:symbol)\nWar_alias(\"World War I\", \"War to End All Wars\").\n.decl Answer()\nAnswer() :- Involved_in_war(\"Wehrmacht\", war), War_alias(war, \"War to End All Wars\").\n.output Answer"]}
{"id": 1739, "answer": true, "completion": ".decl Began_career(Person:symbol, Year:float)\nBegan_career(\"Lil Wayne\", 1995).\n.decl Legal_driving_age(Year:float)\nLegal_driving_age(16).\n.decl Age_in_year(Person:symbol, Birth_year:float)\nAge_in_year(\"Lil Wayne\", 1982).\n.decl Answer()\nAnswer() :- Began_career(\"Lil Wayne\", career_year), Age_in_year(\"Lil Wayne\", birth_year), Legal_driving_age(legal_age), career_year - birth_year >= legal_age.\n.output Answer", "completions": [".decl Began_career(Person:symbol, Year:float)\nBegan_career(\"Lil Wayne\", 1995).\n.decl Legal_driving_age(Year:float)\nLegal_driving_age(16).\n.decl Age_in_year(Person:symbol, Birth_year:float)\nAge_in_year(\"Lil Wayne\", 1982).\n.decl Answer()\nAnswer() :- Began_career(\"Lil Wayne\", career_year), Age_in_year(\"Lil Wayne\", birth_year), Legal_driving_age(legal_age), career_year - birth_year >= legal_age.\n.output Answer"]}
{"id": 1740, "answer": false, "completion": ".decl Taught_by(Student:symbol, Teacher:symbol)\nTaught_by(\"Lord Voldemort\", \"Professor Dumbledore\").\n.decl Answer()\nAnswer() :- Taught_by(\"Lord Voldemort\", \"Professor Dumbledore\").\n.output Answer", "completions": [".decl Taught_by(Student:symbol, Teacher:symbol)\nTaught_by(\"Lord Voldemort\", \"Professor Dumbledore\").\n.decl Answer()\nAnswer() :- Taught_by(\"Lord Voldemort\", \"Professor Dumbledore\").\n.output Answer"]}
{"id": 1741, "answer": false, "completion": ".decl Shares_name(Place_A:symbol, Place_B:symbol)\nShares_name(\"Olympia Washington\", \"Mount Olympus\").\n.decl Workshop_location(God:symbol, Location:symbol)\nWorkshop_location(\"Hephaestus\", \"Mount Olympus\").\n.decl Answer()\nAnswer() :- Shares_name(\"Olympia Washington\", location), Workshop_location(\"Hephaestus\", location).\n.output Answer", "completions": [".decl Shares_name(Place_A:symbol, Place_B:symbol)\nShares_name(\"Olympia Washington\", \"Mount Olympus\").\n.decl Workshop_location(God:symbol, Location:symbol)\nWorkshop_location(\"Hephaestus\", \"Mount Olympus\").\n.decl Answer()\nAnswer() :- Shares_name(\"Olympia Washington\", location), Workshop_location(\"Hephaestus\", location).\n.output Answer"]}
{"id": 1742, "answer": false, "completion": ".decl Stands_for(Acronym:symbol, Meaning:symbol)\nStands_for(\"JPEG\", \"Joint Photographic Experts Group\").\n.decl Is_joint_committee(Meaning:symbol)\nIs_joint_committee(\"Joint Photographic Experts Group\").\n.decl Answer()\nAnswer() :- Stands_for(\"JPEG\", meaning), Is_joint_committee(meaning).\n.output Answer", "completions": [".decl Stands_for(Acronym:symbol, Meaning:symbol)\nStands_for(\"JPEG\", \"Joint Photographic Experts Group\").\n.decl Is_joint_committee(Meaning:symbol)\nIs_joint_committee(\"Joint Photographic Experts Group\").\n.decl Answer()\nAnswer() :- Stands_for(\"JPEG\", meaning), Is_joint_committee(meaning).\n.output Answer"]}
{"id": 1743, "answer": true, "completion": ".decl Has_account(Person:symbol, Platform:symbol)\nHas_account(\"Mickey Mouse\", \"Disney\").\n.decl Sells_products(Platform:symbol, Product:symbol)\nSells_products(\"Zazzle\", \"customized products\").\n.decl Is_fictional(Character:symbol)\nIs_fictional(\"Mickey Mouse\").\n.decl Answer()\nAnswer() :- Has_account(\"Mickey Mouse\", \"Zazzle\").\nAnswer() :- !Has_account(\"Mickey Mouse\", \"Zazzle\"), Is_fictional(\"Mickey Mouse\").\n.output Answer", "completions": [".decl Has_account(Person:symbol, Platform:symbol)\nHas_account(\"Mickey Mouse\", \"Disney\").\n.decl Sells_products(Platform:symbol, Product:symbol)\nSells_products(\"Zazzle\", \"customized products\").\n.decl Is_fictional(Character:symbol)\nIs_fictional(\"Mickey Mouse\").\n.decl Answer()\nAnswer() :- Has_account(\"Mickey Mouse\", \"Zazzle\").\nAnswer() :- !Has_account(\"Mickey Mouse\", \"Zazzle\"), Is_fictional(\"Mickey Mouse\").\n.output Answer"]}
{"id": 1744, "answer": true, "completion": ".decl Helped(Party:symbol, Event:symbol)\nHelped(\"Republican party\", \"Watergate scandal\").\n.decl Hurt(Party:symbol, Event:symbol)\nHurt(\"Republican party\", \"Watergate scandal\").\n.decl Answer()\nAnswer() :- Helped(\"Republican party\", \"Watergate scandal\").\nAnswer() :- !Hurt(\"Republican party\", \"Watergate scandal\").\n.output Answer", "completions": [".decl Helped(Party:symbol, Event:symbol)\nHelped(\"Republican party\", \"Watergate scandal\").\n.decl Hurt(Party:symbol, Event:symbol)\nHurt(\"Republican party\", \"Watergate scandal\").\n.decl Answer()\nAnswer() :- Helped(\"Republican party\", \"Watergate scandal\").\nAnswer() :- !Hurt(\"Republican party\", \"Watergate scandal\").\n.output Answer"]}
{"id": 1745, "answer": true, "completion": ".decl Was_member_of(Person:symbol, Band:symbol)\nWas_member_of(\"Dave Mustaine\", \"Metallica\").\n.decl Founded_band(Person:symbol, Band:symbol)\nFounded_band(\"Dave Mustaine\", \"Megadeth\").\n.decl Successful_band(Band:symbol)\nSuccessful_band(\"Megadeth\").\n.decl Answer()\nAnswer() :- Was_member_of(\"Dave Mustaine\", \"Metallica\"), !Founded_band(\"Dave Mustaine\", new_band), Successful_band(new_band).\n.output Answer", "completions": [".decl Was_member_of(Person:symbol, Band:symbol)\nWas_member_of(\"Dave Mustaine\", \"Metallica\").\n.decl Founded_band(Person:symbol, Band:symbol)\nFounded_band(\"Dave Mustaine\", \"Megadeth\").\n.decl Successful_band(Band:symbol)\nSuccessful_band(\"Megadeth\").\n.decl Answer()\nAnswer() :- Was_member_of(\"Dave Mustaine\", \"Metallica\"), !Founded_band(\"Dave Mustaine\", new_band), Successful_band(new_band).\n.output Answer"]}
{"id": 1746, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Iggy Pop\", \"James Newell Osterberg Jr.\").\nHas_name(\"Iggy Pop's father\", \"James Newell Osterberg Sr.\").\n.decl Named_after(Person_A:symbol, Person_B:symbol)\nNamed_after(\"Iggy Pop\", \"Iggy Pop's father\").\n.decl Answer()\nAnswer() :- Named_after(\"Iggy Pop\", \"Iggy Pop's father\").\nAnswer() :- Has_name(\"Iggy Pop\", name1), Has_name(\"Iggy Pop's father\", name2), name1 = name2.\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Iggy Pop\", \"James Newell Osterberg Jr.\").\nHas_name(\"Iggy Pop's father\", \"James Newell Osterberg Sr.\").\n.decl Named_after(Person_A:symbol, Person_B:symbol)\nNamed_after(\"Iggy Pop\", \"Iggy Pop's father\").\n.decl Answer()\nAnswer() :- Named_after(\"Iggy Pop\", \"Iggy Pop's father\").\nAnswer() :- Has_name(\"Iggy Pop\", name1), Has_name(\"Iggy Pop's father\", name2), name1 = name2.\n.output Answer"]}
{"id": 1747, "answer": true, "completion": ".decl Worships_deity(Community:symbol, Deity:symbol)\nWorships_deity(\"Hindus\", \"Shiva\").\n.decl Makes_pilgrimage(Community:symbol, Destination:symbol)\nMakes_pilgrimage(\"Hindus\", \"Varanasi\").\nMakes_pilgrimage(\"Jews\", \"Holy Land\").\nMakes_pilgrimage(\"Christians\", \"Holy Land\").\nMakes_pilgrimage(\"Muslims\", \"Holy Land\").\n.decl Answer()\nAnswer() :- Worships_deity(community, \"Shiva\"), Makes_pilgrimage(community, \"Holy Land\").\n.output Answer", "completions": [".decl Worships_deity(Community:symbol, Deity:symbol)\nWorships_deity(\"Hindus\", \"Shiva\").\n.decl Makes_pilgrimage(Community:symbol, Destination:symbol)\nMakes_pilgrimage(\"Hindus\", \"Varanasi\").\nMakes_pilgrimage(\"Jews\", \"Holy Land\").\nMakes_pilgrimage(\"Christians\", \"Holy Land\").\nMakes_pilgrimage(\"Muslims\", \"Holy Land\").\n.decl Answer()\nAnswer() :- Worships_deity(community, \"Shiva\"), Makes_pilgrimage(community, \"Holy Land\").\n.output Answer"]}
{"id": 1748, "answer": true, "completion": ".decl Has_property(Object:symbol, Property:symbol, Effect:symbol)\nHas_property(\"coca leaves\", \"appetite suppressant\", \"negative\").\nHas_property(\"coca leaves\", \"stimulant\", \"negative\").\n.decl Answer()\nAnswer() :- Has_property(\"coca leaves\", property, \"negative\"), property = \"appetite suppressant\".\n.output Answer", "completions": [".decl Has_property(Object:symbol, Property:symbol, Effect:symbol)\nHas_property(\"coca leaves\", \"appetite suppressant\", \"negative\").\nHas_property(\"coca leaves\", \"stimulant\", \"negative\").\n.decl Answer()\nAnswer() :- Has_property(\"coca leaves\", property, \"negative\"), property = \"appetite suppressant\".\n.output Answer"]}
{"id": 1749, "answer": true, "completion": ".decl Has_length(Word:symbol, Length:float)\nHas_length(\"pneumonoultramicroscopicsilicovolcanoconiosis\", 45).\n.decl Has_n_letters(Formation:symbol, N_letters:float)\nHas_n_letters(\"black swan\", 9).\n.decl Answer()\nAnswer() :- Has_length(longest_word, length1), Has_n_letters(\"black swan\", length2), length2 >= length1.\n.output Answer", "completions": [".decl Has_length(Word:symbol, Length:float)\nHas_length(\"pneumonoultramicroscopicsilicovolcanoconiosis\", 45).\n.decl Has_n_letters(Formation:symbol, N_letters:float)\nHas_n_letters(\"black swan\", 9).\n.decl Answer()\nAnswer() :- Has_length(longest_word, length1), Has_n_letters(\"black swan\", length2), length2 >= length1.\n.output Answer"]}
{"id": 1750, "answer": false, "completion": ".decl Refers_to_telecom(Name:symbol, Telecom_type:symbol)\nRefers_to_telecom(\"C-SPAN\", \"cable television\").\n.decl Utilizes_outer_space(Telecom_type:symbol)\nUtilizes_outer_space(\"satellite communication\").\n.decl Answer()\nAnswer() :- Refers_to_telecom(\"C-SPAN\", telecom_type), Utilizes_outer_space(telecom_type).\n.output Answer", "completions": [".decl Refers_to_telecom(Name:symbol, Telecom_type:symbol)\nRefers_to_telecom(\"C-SPAN\", \"cable television\").\n.decl Utilizes_outer_space(Telecom_type:symbol)\nUtilizes_outer_space(\"satellite communication\").\n.decl Answer()\nAnswer() :- Refers_to_telecom(\"C-SPAN\", telecom_type), Utilizes_outer_space(telecom_type).\n.output Answer"]}
{"id": 1751, "answer": true, "completion": ".decl Can_shake_glass(Person:symbol)\nCan_shake_glass(\"Kelly Clarkson\").\n.decl Answer()\nAnswer() :- Can_shake_glass(\"Kelly Clarkson\").\n.output Answer", "completions": [".decl Can_shake_glass(Person:symbol)\nCan_shake_glass(\"Kelly Clarkson\").\n.decl Answer()\nAnswer() :- Can_shake_glass(\"Kelly Clarkson\").\n.output Answer"]}
{"id": 1752, "answer": false, "completion": ".decl Is_naughty(Person:symbol)\nIs_naughty(\"Joffrey Baratheon\").\n.decl Gives_presents(Santa:symbol, Person:symbol)\nGives_presents(\"Santa Claus\", person) :- !Is_naughty(person).\n.decl Answer()\nAnswer() :- Gives_presents(\"Santa Claus\", \"Joffrey Baratheon\").\n.output Answer", "completions": [".decl Is_naughty(Person:symbol)\nIs_naughty(\"Joffrey Baratheon\").\n.decl Gives_presents(Santa:symbol, Person:symbol)\nGives_presents(\"Santa Claus\", person) :- !Is_naughty(person).\n.decl Answer()\nAnswer() :- Gives_presents(\"Santa Claus\", \"Joffrey Baratheon\").\n.output Answer"]}
{"id": 1753, "answer": true, "completion": ".decl Belongs_to_family(Plant:symbol, Family:symbol)\nBelongs_to_family(\"slime lily\", \"Araceae\").\nBelongs_to_family(\"asparagus\", \"Asparagaceae\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"slime lily\", family1), Belongs_to_family(\"asparagus\", family2), family1 != family2.\n.output Answer", "completions": [".decl Belongs_to_family(Plant:symbol, Family:symbol)\nBelongs_to_family(\"slime lily\", \"Araceae\").\nBelongs_to_family(\"asparagus\", \"Asparagaceae\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"slime lily\", family1), Belongs_to_family(\"asparagus\", family2), family1 != family2.\n.output Answer"]}
{"id": 1754, "answer": true, "completion": ".decl Visited(Person:symbol, Place:symbol)\nVisited(\"Christopher Columbus\", \"Americas\").\nVisited(\"Christopher Columbus\", \"Europe\").\nVisited(\"Christopher Columbus\", \"Asia\").\n.decl Answer()\nAnswer() :- Visited(\"Christopher Columbus\", \"Antarctica\").\n.output Answer", "completions": [".decl Visited(Person:symbol, Place:symbol)\nVisited(\"Christopher Columbus\", \"Americas\").\nVisited(\"Christopher Columbus\", \"Europe\").\nVisited(\"Christopher Columbus\", \"Asia\").\n.decl Answer()\nAnswer() :- Visited(\"Christopher Columbus\", \"Antarctica\").\n.output Answer"]}
{"id": 1755, "answer": true, "completion": ".decl Can_wear(Object:symbol, Wearable:symbol)\nCan_wear(\"human\", \"snowshoe\").\n.decl Is_type(Object:symbol, Type:symbol)\nIs_type(\"snake\", \"animal\").\nIs_type(\"human\", \"animal\").\n.decl Answer()\nAnswer() :- Can_wear(\"snake\", \"snowshoe\").\nAnswer() :- Can_wear(animal, \"snowshoe\"), Is_type(\"snake\", type), Is_type(animal, type), animal != \"snake\".\n.output Answer", "completions": [".decl Can_wear(Object:symbol, Wearable:symbol)\nCan_wear(\"human\", \"snowshoe\").\n.decl Is_type(Object:symbol, Type:symbol)\nIs_type(\"snake\", \"animal\").\nIs_type(\"human\", \"animal\").\n.decl Answer()\nAnswer() :- Can_wear(\"snake\", \"snowshoe\").\nAnswer() :- Can_wear(animal, \"snowshoe\"), Is_type(\"snake\", type), Is_type(animal, type), animal != \"snake\".\n.output Answer"]}
{"id": 1756, "answer": false, "completion": ".decl Is_animal(Animal:symbol)\nIs_animal(\"northern fur seal\").\n\n.decl Needs_surgery(Animal:symbol, Month:symbol)\nNeeds_surgery(\"northern fur seal\", \"July\").\n\n.decl Safe_anesthesia_candidate(Animal:symbol)\nSafe_anesthesia_candidate(\"northern fur seal\").\n\n.decl Answer()\nAnswer() :- Is_animal(animal), Needs_surgery(animal, \"July\"), Safe_anesthesia_candidate(animal).\n.output Answer", "completions": [".decl Is_animal(Animal:symbol)\nIs_animal(\"northern fur seal\").\n\n.decl Needs_surgery(Animal:symbol, Month:symbol)\nNeeds_surgery(\"northern fur seal\", \"July\").\n\n.decl Safe_anesthesia_candidate(Animal:symbol)\nSafe_anesthesia_candidate(\"northern fur seal\").\n\n.decl Answer()\nAnswer() :- Is_animal(animal), Needs_surgery(animal, \"July\"), Safe_anesthesia_candidate(animal).\n.output Answer"]}
{"id": 1757, "answer": false, "completion": ".decl Requires_quiet_airplanes(County:symbol, State:symbol)\nRequires_quiet_airplanes(\"Orange County\", \"California\").\n.decl Answer()\nAnswer() :- Requires_quiet_airplanes(\"Orange County\", \"California\").\n.output Answer", "completions": [".decl Requires_quiet_airplanes(County:symbol, State:symbol)\nRequires_quiet_airplanes(\"Orange County\", \"California\").\n.decl Answer()\nAnswer() :- Requires_quiet_airplanes(\"Orange County\", \"California\").\n.output Answer"]}
{"id": 1758, "answer": false, "completion": ".decl Person(name:symbol, role:symbol, event:symbol)\nPerson(\"Charlemagne\", \"son\", \"Charles Martel\").\nPerson(\"Charles Martel\", \"father\", \"Charlemagne\").\nPerson(\"Charles Martel\", \"commander\", \"Battle of Tours\").\n\n.decl Event(name:symbol, outcome:symbol)\nEvent(\"Battle of Tours\", \"instrumental\").\n\n.decl Answer()\nAnswer() :- Person(\"Charlemagne\", \"son\", father), Person(father, \"commander\", event), Event(event, \"instrumental\").\n.output Answer", "completions": [".decl Person(name:symbol, role:symbol, event:symbol)\nPerson(\"Charlemagne\", \"son\", \"Charles Martel\").\nPerson(\"Charles Martel\", \"father\", \"Charlemagne\").\nPerson(\"Charles Martel\", \"commander\", \"Battle of Tours\").\n\n.decl Event(name:symbol, outcome:symbol)\nEvent(\"Battle of Tours\", \"instrumental\").\n\n.decl Answer()\nAnswer() :- Person(\"Charlemagne\", \"son\", father), Person(father, \"commander\", event), Event(event, \"instrumental\").\n.output Answer"]}
{"id": 1759, "answer": false, "completion": ".decl Interviewed(Interviewer:symbol, Interviewee:symbol)\nInterviewed(\"Anderson Cooper\", \"Walt Disney\").\n.decl Born(Person:symbol, Birth_year:float)\nBorn(\"Walt Disney\", 1901).\nBorn(\"Anderson Cooper\", 1967).\n.decl Answer()\nAnswer() :- Interviewed(\"Anderson Cooper\", \"Walt Disney\").\nAnswer() :- Born(\"Walt Disney\", birth_year1), Born(\"Anderson Cooper\", birth_year2), birth_year1 > birth_year2.\n.output Answer", "completions": [".decl Interviewed(Interviewer:symbol, Interviewee:symbol)\nInterviewed(\"Anderson Cooper\", \"Walt Disney\").\n.decl Born(Person:symbol, Birth_year:float)\nBorn(\"Walt Disney\", 1901).\nBorn(\"Anderson Cooper\", 1967).\n.decl Answer()\nAnswer() :- Interviewed(\"Anderson Cooper\", \"Walt Disney\").\nAnswer() :- Born(\"Walt Disney\", birth_year1), Born(\"Anderson Cooper\", birth_year2), birth_year1 > birth_year2.\n.output Answer"]}
{"id": 1760, "answer": false, "completion": ".decl Needs_continuing_education(Person:symbol, State:symbol)\nNeeds_continuing_education(\"Super Mario\", \"Illinois\").\n.decl Is_protagonist(Character:symbol, Game:symbol)\nIs_protagonist(\"Super Mario\", \"Super Mario\").\n.decl Hypothetical(Character:symbol)\nHypothetical(\"Super Mario\").\n.decl Answer()\nAnswer() :- !Needs_continuing_education(\"Super Mario\", \"Illinois\"), Is_protagonist(\"Super Mario\", \"Super Mario\"), Hypothetical(\"Super Mario\").\n.output Answer", "completions": [".decl Needs_continuing_education(Person:symbol, State:symbol)\nNeeds_continuing_education(\"Super Mario\", \"Illinois\").\n.decl Is_protagonist(Character:symbol, Game:symbol)\nIs_protagonist(\"Super Mario\", \"Super Mario\").\n.decl Hypothetical(Character:symbol)\nHypothetical(\"Super Mario\").\n.decl Answer()\nAnswer() :- !Needs_continuing_education(\"Super Mario\", \"Illinois\"), Is_protagonist(\"Super Mario\", \"Super Mario\"), Hypothetical(\"Super Mario\").\n.output Answer"]}
{"id": 1761, "answer": true, "completion": ".decl Had_surgery(Person:symbol, Surgery:symbol, Year:float)\nHad_surgery(\"Rita Ora\", \"tonsilitis surgery\", 2020).\n.decl Affects_condition(Condition:symbol, Surgery:symbol)\nAffects_condition(\"strep throat\", \"tonsilitis surgery\").\n.decl Answer()\nAnswer() :- Had_surgery(\"Rita Ora\", \"tonsilitis surgery\", year), Affects_condition(\"strep throat\", \"tonsilitis surgery\"), year >= 2020.\n.output Answer", "completions": [".decl Had_surgery(Person:symbol, Surgery:symbol, Year:float)\nHad_surgery(\"Rita Ora\", \"tonsilitis surgery\", 2020).\n.decl Affects_condition(Condition:symbol, Surgery:symbol)\nAffects_condition(\"strep throat\", \"tonsilitis surgery\").\n.decl Answer()\nAnswer() :- Had_surgery(\"Rita Ora\", \"tonsilitis surgery\", year), Affects_condition(\"strep throat\", \"tonsilitis surgery\"), year >= 2020.\n.output Answer"]}
{"id": 1762, "answer": true, "completion": ".decl Participates_in_event(Person:symbol, Event:symbol, Year:float)\nParticipates_in_event(\"William Franklyn-Miller\", \"acting\", 2020).\n.decl Event_type(Event:symbol, Type:symbol)\nEvent_type(\"Nascar Cup Series race\", \"racing\").\n.decl Answer()\nAnswer() :- Participates_in_event(\"William Franklyn-Miller\", \"Nascar Cup Series race\", 2020).\nAnswer() :- Participates_in_event(\"William Franklyn-Miller\", event, 2020), Event_type(event, \"racing\").\n.output Answer", "completions": [".decl Participates_in_event(Person:symbol, Event:symbol, Year:float)\nParticipates_in_event(\"William Franklyn-Miller\", \"acting\", 2020).\n.decl Event_type(Event:symbol, Type:symbol)\nEvent_type(\"Nascar Cup Series race\", \"racing\").\n.decl Answer()\nAnswer() :- Participates_in_event(\"William Franklyn-Miller\", \"Nascar Cup Series race\", 2020).\nAnswer() :- Participates_in_event(\"William Franklyn-Miller\", event, 2020), Event_type(event, \"racing\").\n.output Answer"]}
{"id": 1763, "answer": true, "completion": ".decl Has_colors(Flag:symbol, Color1:symbol, Color2:symbol, Color3:symbol)\nHas_colors(\"Azerbaijani flag\", \"blue\", \"red\", \"green\").\n.decl Can_create_colors(Group:symbol, Color1:symbol, Color2:symbol, Color3:symbol)\nCan_create_colors(\"Powerpuff Girls\", \"blue\", \"red\", \"green\").\n.decl Answer()\nAnswer() :- Has_colors(\"Azerbaijani flag\", color1, color2, color3), Can_create_colors(\"Powerpuff Girls\", color1, color2, color3).\n.output Answer", "completions": [".decl Has_colors(Flag:symbol, Color1:symbol, Color2:symbol, Color3:symbol)\nHas_colors(\"Azerbaijani flag\", \"blue\", \"red\", \"green\").\n.decl Can_create_colors(Group:symbol, Color1:symbol, Color2:symbol, Color3:symbol)\nCan_create_colors(\"Powerpuff Girls\", \"blue\", \"red\", \"green\").\n.decl Answer()\nAnswer() :- Has_colors(\"Azerbaijani flag\", color1, color2, color3), Can_create_colors(\"Powerpuff Girls\", color1, color2, color3).\n.output Answer"]}
{"id": 1764, "answer": true, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Los Angeles Memorial Sports Arena\", 16000).\nHas_capacity(\"Coachella\", 125000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Los Angeles Memorial Sports Arena\", capacity1), Has_capacity(\"Coachella\", capacity2), capacity1 < capacity2.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Los Angeles Memorial Sports Arena\", 16000).\nHas_capacity(\"Coachella\", 125000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Los Angeles Memorial Sports Arena\", capacity1), Has_capacity(\"Coachella\", capacity2), capacity1 < capacity2.\n.output Answer"]}
{"id": 1765, "answer": false, "completion": ".decl Earned_Abitur(Person:symbol, Age:float)\nEarned_Abitur(\"Moon Jae-in\", 0).\n.decl Is_Teenager(Age:float)\nIs_Teenager(age) :- age >= 13, age <= 19.\n.decl Answer()\nAnswer() :- Earned_Abitur(\"Moon Jae-in\", age), Is_Teenager(age).\n.output Answer", "completions": [".decl Earned_Abitur(Person:symbol, Age:float)\nEarned_Abitur(\"Moon Jae-in\", 0).\n.decl Is_Teenager(Age:float)\nIs_Teenager(age) :- age >= 13, age <= 19.\n.decl Answer()\nAnswer() :- Earned_Abitur(\"Moon Jae-in\", age), Is_Teenager(age).\n.output Answer"]}
{"id": 1766, "answer": true, "completion": ".decl Is_popular(Sport:symbol, Location:symbol)\nIs_popular(\"football\", \"Texas\").\nIs_popular(\"basketball\", \"Texas\").\nIs_popular(\"baseball\", \"Texas\").\n.decl Similar_to(Sport_A:symbol, Sport_B:symbol)\nSimilar_to(\"bandy\", \"hockey\").\nSimilar_to(\"hockey\", \"bandy\").\n.decl Answer()\nAnswer() :- Is_popular(sport, \"Texas\"), Similar_to(\"bandy\", sport).\n.output Answer", "completions": [".decl Is_popular(Sport:symbol, Location:symbol)\nIs_popular(\"football\", \"Texas\").\nIs_popular(\"basketball\", \"Texas\").\nIs_popular(\"baseball\", \"Texas\").\n.decl Similar_to(Sport_A:symbol, Sport_B:symbol)\nSimilar_to(\"bandy\", \"hockey\").\nSimilar_to(\"hockey\", \"bandy\").\n.decl Answer()\nAnswer() :- Is_popular(sport, \"Texas\"), Similar_to(\"bandy\", sport).\n.output Answer"]}
{"id": 1767, "answer": true, "completion": ".decl Is_rover(Rover:symbol)\nIs_rover(\"Curiosity\").\n\n.decl Can_take_samples(Rover:symbol, Location:symbol)\nCan_take_samples(\"Curiosity\", \"Mars\").\n\n.decl Is_location(Location:symbol)\nIs_location(\"Lacus Temporis\").\n\n.decl Answer()\nAnswer() :- Is_rover(rover), Can_take_samples(rover, location), Is_location(\"Lacus Temporis\"), location != \"Lacus Temporis\".\n.output Answer", "completions": [".decl Is_rover(Rover:symbol)\nIs_rover(\"Curiosity\").\n\n.decl Can_take_samples(Rover:symbol, Location:symbol)\nCan_take_samples(\"Curiosity\", \"Mars\").\n\n.decl Is_location(Location:symbol)\nIs_location(\"Lacus Temporis\").\n\n.decl Answer()\nAnswer() :- Is_rover(rover), Can_take_samples(rover, location), Is_location(\"Lacus Temporis\"), location != \"Lacus Temporis\".\n.output Answer"]}
{"id": 1768, "answer": false, "completion": ".decl Causes(Event:symbol, Result:symbol)\nCauses(\"pancreas removal\", \"medical expenses\").\nCauses(\"medical expenses\", \"financial strain\").\nCauses(\"financial strain\", \"bankruptcy\").\n.decl Answer()\nAnswer() :- Causes(\"pancreas removal\", result1), Causes(result1, result2), Causes(result2, \"bankruptcy\").\n.output Answer", "completions": [".decl Causes(Event:symbol, Result:symbol)\nCauses(\"pancreas removal\", \"medical expenses\").\nCauses(\"medical expenses\", \"financial strain\").\nCauses(\"financial strain\", \"bankruptcy\").\n.decl Answer()\nAnswer() :- Causes(\"pancreas removal\", result1), Causes(result1, result2), Causes(result2, \"bankruptcy\").\n.output Answer"]}
{"id": 1769, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Bob Marley\", \"melanoma\").\n.decl Helps_with(Product:symbol, Condition:symbol)\nHelps_with(\"sunscreen\", \"sunburn\").\nHelps_with(\"sunscreen\", \"skin cancer prevention\").\n.decl Answer()\nAnswer() :- Has_condition(\"Bob Marley\", condition), Helps_with(\"sunscreen\", condition).\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Bob Marley\", \"melanoma\").\n.decl Helps_with(Product:symbol, Condition:symbol)\nHelps_with(\"sunscreen\", \"sunburn\").\nHelps_with(\"sunscreen\", \"skin cancer prevention\").\n.decl Answer()\nAnswer() :- Has_condition(\"Bob Marley\", condition), Helps_with(\"sunscreen\", condition).\n.output Answer"]}
{"id": 1770, "answer": false, "completion": ".decl Attended_school(Person:symbol, School:symbol)\nAttended_school(\"Lord Voldemort\", \"Hogwarts\").\n.decl Has_blood_status(Person:symbol, Blood_status:symbol)\nHas_blood_status(\"Lord Voldemort\", \"half-blood\").\n.decl Barred_from_school(Blood_status:symbol, School:symbol)\nBarred_from_school(\"muggle-born\", \"Hogwarts\").\n.decl Answer()\nAnswer() :- Attended_school(\"Lord Voldemort\", \"Hogwarts\"), Has_blood_status(\"Lord Voldemort\", blood_status), Barred_from_school(blood_status, \"Hogwarts\").\n.output Answer", "completions": [".decl Attended_school(Person:symbol, School:symbol)\nAttended_school(\"Lord Voldemort\", \"Hogwarts\").\n.decl Has_blood_status(Person:symbol, Blood_status:symbol)\nHas_blood_status(\"Lord Voldemort\", \"half-blood\").\n.decl Barred_from_school(Blood_status:symbol, School:symbol)\nBarred_from_school(\"muggle-born\", \"Hogwarts\").\n.decl Answer()\nAnswer() :- Attended_school(\"Lord Voldemort\", \"Hogwarts\"), Has_blood_status(\"Lord Voldemort\", blood_status), Barred_from_school(blood_status, \"Hogwarts\").\n.output Answer"]}
{"id": 1771, "answer": false, "completion": ".decl Found_in_location(Object:symbol, Location:symbol)\nFound_in_location(\"moon cakes\", \"Chinatown\").\n.decl Is_in_city(Location:symbol, City:symbol)\nIs_in_city(\"Chinatown\", \"Manhattan\").\n.decl Answer()\nAnswer() :- Found_in_location(\"moon cakes\", location), Is_in_city(location, \"Manhattan\").\n.output Answer", "completions": [".decl Found_in_location(Object:symbol, Location:symbol)\nFound_in_location(\"moon cakes\", \"Chinatown\").\n.decl Is_in_city(Location:symbol, City:symbol)\nIs_in_city(\"Chinatown\", \"Manhattan\").\n.decl Answer()\nAnswer() :- Found_in_location(\"moon cakes\", location), Is_in_city(location, \"Manhattan\").\n.output Answer"]}
{"id": 1772, "answer": true, "completion": ".decl Is_president_of(Person:symbol, Country:symbol)\nIs_president_of(\"President of Mexico\", \"Mexico\").\n\n.decl Can_vote_in(Person:symbol, Location:symbol)\nCan_vote_in(\"US citizen\", \"New Mexico primaries\").\n\n.decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"US citizen\", \"United States\").\n\n.decl Answer()\nAnswer() :- Is_president_of(person, \"Mexico\"), !Is_citizen_of(person, \"United States\"), Can_vote_in(person, \"New Mexico primaries\").\n.output Answer", "completions": [".decl Is_president_of(Person:symbol, Country:symbol)\nIs_president_of(\"President of Mexico\", \"Mexico\").\n\n.decl Can_vote_in(Person:symbol, Location:symbol)\nCan_vote_in(\"US citizen\", \"New Mexico primaries\").\n\n.decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"US citizen\", \"United States\").\n\n.decl Answer()\nAnswer() :- Is_president_of(person, \"Mexico\"), !Is_citizen_of(person, \"United States\"), Can_vote_in(person, \"New Mexico primaries\").\n.output Answer"]}
{"id": 1773, "answer": true, "completion": ".decl Prizes(Art_dealer:symbol, Artwork:symbol)\nPrizes(\"art dealer\", \"Van Gogh print\").\n.decl Answer()\nAnswer() :- Prizes(\"art dealer\", \"Van Gogh print\").\n.output Answer", "completions": [".decl Prizes(Art_dealer:symbol, Artwork:symbol)\nPrizes(\"art dealer\", \"Van Gogh print\").\n.decl Answer()\nAnswer() :- Prizes(\"art dealer\", \"Van Gogh print\").\n.output Answer"]}
{"id": 1774, "answer": true, "completion": ".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"John George Bice\", \"Devon\").\n.decl Near(Place_A:symbol, Place_B:symbol)\nNear(\"Devon\", \"Cornwall\").\n.decl Answer()\nAnswer() :- Born_in(\"John George Bice\", place), Near(place, \"Cornwall\").\n.output Answer", "completions": [".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"John George Bice\", \"Devon\").\n.decl Near(Place_A:symbol, Place_B:symbol)\nNear(\"Devon\", \"Cornwall\").\n.decl Answer()\nAnswer() :- Born_in(\"John George Bice\", place), Near(place, \"Cornwall\").\n.output Answer"]}
{"id": 1775, "answer": false, "completion": ".decl Is_alive(Person:symbol, Status:symbol)\nIs_alive(\"Elijah Cummings\", \"deceased\").\n.decl Votes_for(Person:symbol, Candidate:symbol)\n.decl Answer()\nAnswer() :- Votes_for(\"Elijah Cummings\", \"Joe Biden\").\nAnswer() :- !Is_alive(\"Elijah Cummings\", \"alive\").\n.output Answer", "completions": [".decl Is_alive(Person:symbol, Status:symbol)\nIs_alive(\"Elijah Cummings\", \"deceased\").\n.decl Votes_for(Person:symbol, Candidate:symbol)\n.decl Answer()\nAnswer() :- Votes_for(\"Elijah Cummings\", \"Joe Biden\").\nAnswer() :- !Is_alive(\"Elijah Cummings\", \"alive\").\n.output Answer"]}
{"id": 1776, "answer": false, "completion": ".decl Has_ability(Character:symbol, Ability:symbol)\nHas_ability(\"Lord Voldemort\", \"magic\").\n.decl Affected_by_status(Character:symbol, Status:symbol)\nAffected_by_status(\"magic user\", \"silence\").\n.decl Is_type(Character:symbol, Type:symbol)\nIs_type(\"Lord Voldemort\", \"magic user\").\n.decl Answer()\nAnswer() :- Has_ability(\"Lord Voldemort\", ability), Affected_by_status(\"Lord Voldemort\", \"silence\"), !Has_ability(\"Lord Voldemort\", other_ability), other_ability != ability.\nAnswer() :- Has_ability(\"Lord Voldemort\", ability), Affected_by_status(type, \"silence\"), Is_type(\"Lord Voldemort\", type), !Has_ability(\"Lord Voldemort\", other_ability), other_ability != ability.\n.output Answer", "completions": [".decl Has_ability(Character:symbol, Ability:symbol)\nHas_ability(\"Lord Voldemort\", \"magic\").\n.decl Affected_by_status(Character:symbol, Status:symbol)\nAffected_by_status(\"magic user\", \"silence\").\n.decl Is_type(Character:symbol, Type:symbol)\nIs_type(\"Lord Voldemort\", \"magic user\").\n.decl Answer()\nAnswer() :- Has_ability(\"Lord Voldemort\", ability), Affected_by_status(\"Lord Voldemort\", \"silence\"), !Has_ability(\"Lord Voldemort\", other_ability), other_ability != ability.\nAnswer() :- Has_ability(\"Lord Voldemort\", ability), Affected_by_status(type, \"silence\"), Is_type(\"Lord Voldemort\", type), !Has_ability(\"Lord Voldemort\", other_ability), other_ability != ability.\n.output Answer"]}
{"id": 1777, "answer": true, "completion": ".decl Sold_at_store(Item:symbol, Store:symbol)\nSold_at_store(\"chlorine\", \"pool supply store\").\nSold_at_store(\"chlorine\", \"supermarket\").\n.decl Store_type(Store:symbol, Type:symbol)\nStore_type(\"dollar store\", \"discount\").\nStore_type(\"pool supply store\", \"specialty\").\nStore_type(\"supermarket\", \"general\").\n.decl Answer()\nAnswer() :- Sold_at_store(\"chlorine\", store), Store_type(store, \"discount\").\n.output Answer", "completions": [".decl Sold_at_store(Item:symbol, Store:symbol)\nSold_at_store(\"chlorine\", \"pool supply store\").\nSold_at_store(\"chlorine\", \"supermarket\").\n.decl Store_type(Store:symbol, Type:symbol)\nStore_type(\"dollar store\", \"discount\").\nStore_type(\"pool supply store\", \"specialty\").\nStore_type(\"supermarket\", \"general\").\n.decl Answer()\nAnswer() :- Sold_at_store(\"chlorine\", store), Store_type(store, \"discount\").\n.output Answer"]}
{"id": 1778, "answer": false, "completion": ".decl Execution_method(Method:symbol, Viable:symbol)\nExecution_method(\"hanging\", \"yes\").\nExecution_method(\"firing squad\", \"yes\").\nExecution_method(\"lethal injection\", \"no\").\nExecution_method(\"electric chair\", \"no\").\n.decl Location(Location:symbol, Ship:symbol)\nLocation(\"sea\", \"ship\").\n.decl Answer(Method:symbol)\nAnswer(method) :- Execution_method(method, \"yes\"), Location(\"sea\", \"ship\").\n.output Answer", "completions": [".decl Execution_method(Method:symbol, Viable:symbol)\nExecution_method(\"hanging\", \"yes\").\nExecution_method(\"firing squad\", \"yes\").\nExecution_method(\"lethal injection\", \"no\").\nExecution_method(\"electric chair\", \"no\").\n.decl Location(Location:symbol, Ship:symbol)\nLocation(\"sea\", \"ship\").\n.decl Answer(Method:symbol)\nAnswer(method) :- Execution_method(method, \"yes\"), Location(\"sea\", \"ship\").\n.output Answer"]}
{"id": 1779, "answer": true, "completion": ".decl Is_ice_princess(Character:symbol, Company:symbol)\nIs_ice_princess(\"Elsa\", \"Disney\").\n.decl Answer()\nAnswer() :- Is_ice_princess(character, \"Disney\").\n.output Answer", "completions": [".decl Is_ice_princess(Character:symbol, Company:symbol)\nIs_ice_princess(\"Elsa\", \"Disney\").\n.decl Answer()\nAnswer() :- Is_ice_princess(character, \"Disney\").\n.output Answer"]}
{"id": 1780, "answer": true, "completion": ".decl Is_safe_to_eat(Object:symbol, Safe:float)\nIs_safe_to_eat(\"hair\", 0).\n.decl Answer()\nAnswer() :- Is_safe_to_eat(\"hair\", safe), safe > 0.\n.output Answer", "completions": [".decl Is_safe_to_eat(Object:symbol, Safe:float)\nIs_safe_to_eat(\"hair\", 0).\n.decl Answer()\nAnswer() :- Is_safe_to_eat(\"hair\", safe), safe > 0.\n.output Answer"]}
{"id": 1781, "answer": true, "completion": ".decl Used_in_country(Object:symbol, Country:symbol)\nUsed_in_country(\"penny\", \"United States\").\nUsed_in_country(\"penny\", \"United Kingdom\").\n.decl Discontinued_in_country(Object:symbol, Country:symbol)\nDiscontinued_in_country(\"penny\", \"Canada\").\n.decl Answer()\nAnswer() :- Used_in_country(\"penny\", \"Canada\").\nAnswer() :- !Discontinued_in_country(\"penny\", \"Canada\").\n.output Answer", "completions": [".decl Used_in_country(Object:symbol, Country:symbol)\nUsed_in_country(\"penny\", \"United States\").\nUsed_in_country(\"penny\", \"United Kingdom\").\n.decl Discontinued_in_country(Object:symbol, Country:symbol)\nDiscontinued_in_country(\"penny\", \"Canada\").\n.decl Answer()\nAnswer() :- Used_in_country(\"penny\", \"Canada\").\nAnswer() :- !Discontinued_in_country(\"penny\", \"Canada\").\n.output Answer"]}
{"id": 1782, "answer": true, "completion": ".decl Monster_name(Name:symbol)\nMonster_name(\"Tokoloshe\").\n\n.decl Scrabble_score(Name:symbol, Score:float)\nScrabble_score(\"Tokoloshe\", 17).\n\n.decl Record_scrabble_score(Score:float)\nRecord_scrabble_score(33).\n\n.decl Answer()\nAnswer() :- Monster_name(name), Scrabble_score(name, score), Record_scrabble_score(record_score), score >= record_score.\n.output Answer", "completions": [".decl Monster_name(Name:symbol)\nMonster_name(\"Tokoloshe\").\n\n.decl Scrabble_score(Name:symbol, Score:float)\nScrabble_score(\"Tokoloshe\", 17).\n\n.decl Record_scrabble_score(Score:float)\nRecord_scrabble_score(33).\n\n.decl Answer()\nAnswer() :- Monster_name(name), Scrabble_score(name, score), Record_scrabble_score(record_score), score >= record_score.\n.output Answer"]}
{"id": 1783, "answer": true, "completion": ".decl Has_song_titles(Plant:symbol, N_song_titles:float)\nHas_song_titles(\"Rosemary\", 10).\nHas_song_titles(\"Rose\", 100).\nHas_song_titles(\"Lily\", 50).\n.decl Answer()\nAnswer() :- Has_song_titles(\"Rosemary\", n_titles1), Has_song_titles(plant2, n_titles2), n_titles1 < n_titles2.\n.output Answer", "completions": [".decl Has_song_titles(Plant:symbol, N_song_titles:float)\nHas_song_titles(\"Rosemary\", 10).\nHas_song_titles(\"Rose\", 100).\nHas_song_titles(\"Lily\", 50).\n.decl Answer()\nAnswer() :- Has_song_titles(\"Rosemary\", n_titles1), Has_song_titles(plant2, n_titles2), n_titles1 < n_titles2.\n.output Answer"]}
{"id": 1784, "answer": true, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person\", \"St. Vitus's Dance\").\n.decl Affects_performance(Condition:symbol, Activity:symbol, Effect:float)\nAffects_performance(\"St. Vitus's Dance\", \"ballet\", -1).\n.decl Answer()\nAnswer() :- Has_condition(\"person\", condition), Affects_performance(condition, \"ballet\", effect), effect < 0.\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person\", \"St. Vitus's Dance\").\n.decl Affects_performance(Condition:symbol, Activity:symbol, Effect:float)\nAffects_performance(\"St. Vitus's Dance\", \"ballet\", -1).\n.decl Answer()\nAnswer() :- Has_condition(\"person\", condition), Affects_performance(condition, \"ballet\", effect), effect < 0.\n.output Answer"]}
{"id": 1785, "answer": false, "completion": ".decl Is_part_of(Object:symbol, Group:symbol)\nIs_part_of(\"Phobos\", \"Mars\").\nIs_part_of(\"Mars\", \"Solar System\").\nIs_part_of(\"Solar System\", \"Milky Way\").\nIs_part_of(\"Andromeda\", \"Local Group\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Phobos\", \"Andromeda\").\nAnswer() :- Is_part_of(\"Phobos\", group1), Is_part_of(group1, group2), Is_part_of(group2, \"Andromeda\").\n.output Answer", "completions": [".decl Is_part_of(Object:symbol, Group:symbol)\nIs_part_of(\"Phobos\", \"Mars\").\nIs_part_of(\"Mars\", \"Solar System\").\nIs_part_of(\"Solar System\", \"Milky Way\").\nIs_part_of(\"Andromeda\", \"Local Group\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Phobos\", \"Andromeda\").\nAnswer() :- Is_part_of(\"Phobos\", group1), Is_part_of(group1, group2), Is_part_of(group2, \"Andromeda\").\n.output Answer"]}
{"id": 1786, "answer": false, "completion": ".decl Is_equivalent(God1:symbol, God2:symbol)\nIs_equivalent(\"Hermes\", \"Mercury\").\nIs_equivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Is_equivalent(\"Hermes\", god1), Is_equivalent(\"Vulcan\", god2), god1 = god2.\n.output Answer", "completions": [".decl Is_equivalent(God1:symbol, God2:symbol)\nIs_equivalent(\"Hermes\", \"Mercury\").\nIs_equivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Is_equivalent(\"Hermes\", god1), Is_equivalent(\"Vulcan\", god2), god1 = god2.\n.output Answer"]}
{"id": 1787, "answer": true, "completion": ".decl Is_good_present(Animal:symbol, Age_group:symbol)\nIs_good_present(\"ocelot\", \"kindergartener\") :- false.\n.decl Answer()\nAnswer() :- Is_good_present(\"ocelot\", \"kindergartener\").\n.output Answer", "completions": [".decl Is_good_present(Animal:symbol, Age_group:symbol)\nIs_good_present(\"ocelot\", \"kindergartener\") :- false.\n.decl Answer()\nAnswer() :- Is_good_present(\"ocelot\", \"kindergartener\").\n.output Answer"]}
{"id": 1788, "answer": true, "completion": ".decl Part_of_army(State:symbol, Army:symbol)\nPart_of_army(\"New York\", \"Northern Army\").\nPart_of_army(\"Pennsylvania\", \"Northern Army\").\nPart_of_army(\"Ohio\", \"Northern Army\").\nPart_of_army(\"Virginia\", \"Southern Army\").\nPart_of_army(\"North Carolina\", \"Southern Army\").\nPart_of_army(\"South Carolina\", \"Southern Army\").\n.decl Was_US_state(State:symbol, Year:float)\nWas_US_state(\"Alaska\", 1959).\n.decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"Civil War\", 1861).\nHappened_in_year(\"Civil War\", 1862).\nHappened_in_year(\"Civil War\", 1863).\nHappened_in_year(\"Civil War\", 1864).\nHappened_in_year(\"Civil War\", 1865).\n.decl Answer()\nAnswer() :- Part_of_army(\"Alaska\", \"Northern Army\"), Was_US_state(\"Alaska\", year1), Happened_in_year(\"Civil War\", year2), year1 <= year2.\n.output Answer", "completions": [".decl Part_of_army(State:symbol, Army:symbol)\nPart_of_army(\"New York\", \"Northern Army\").\nPart_of_army(\"Pennsylvania\", \"Northern Army\").\nPart_of_army(\"Ohio\", \"Northern Army\").\nPart_of_army(\"Virginia\", \"Southern Army\").\nPart_of_army(\"North Carolina\", \"Southern Army\").\nPart_of_army(\"South Carolina\", \"Southern Army\").\n.decl Was_US_state(State:symbol, Year:float)\nWas_US_state(\"Alaska\", 1959).\n.decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"Civil War\", 1861).\nHappened_in_year(\"Civil War\", 1862).\nHappened_in_year(\"Civil War\", 1863).\nHappened_in_year(\"Civil War\", 1864).\nHappened_in_year(\"Civil War\", 1865).\n.decl Answer()\nAnswer() :- Part_of_army(\"Alaska\", \"Northern Army\"), Was_US_state(\"Alaska\", year1), Happened_in_year(\"Civil War\", year2), year1 <= year2.\n.output Answer"]}
{"id": 1789, "answer": true, "completion": ".decl Is_favorite_holiday(God:symbol, Holiday:symbol)\n.decl God_of(God:symbol, Domain:symbol)\n.decl Holiday_associated_with(Holiday:symbol, Domain:symbol)\n\nGod_of(\"Bacchus\", \"wine\").\nHoliday_associated_with(\"New Year's Eve\", \"celebration\").\nHoliday_associated_with(\"New Year's Eve\", \"wine\").\n\nIs_favorite_holiday(\"Bacchus\", \"New Year's Eve\") :- God_of(\"Bacchus\", domain), Holiday_associated_with(\"New Year's Eve\", domain).\n\n.decl Answer()\nAnswer() :- Is_favorite_holiday(\"Bacchus\", \"New Year's Eve\").\n.output Answer", "completions": [".decl Is_favorite_holiday(God:symbol, Holiday:symbol)\n.decl God_of(God:symbol, Domain:symbol)\n.decl Holiday_associated_with(Holiday:symbol, Domain:symbol)\n\nGod_of(\"Bacchus\", \"wine\").\nHoliday_associated_with(\"New Year's Eve\", \"celebration\").\nHoliday_associated_with(\"New Year's Eve\", \"wine\").\n\nIs_favorite_holiday(\"Bacchus\", \"New Year's Eve\") :- God_of(\"Bacchus\", domain), Holiday_associated_with(\"New Year's Eve\", domain).\n\n.decl Answer()\nAnswer() :- Is_favorite_holiday(\"Bacchus\", \"New Year's Eve\").\n.output Answer"]}
{"id": 1790, "answer": true, "completion": ".decl Is_god_of(God:symbol, Domain:symbol)\nIs_god_of(\"Poseidon\", \"sea\").\nIs_god_of(\"Vulcan\", \"fire\").\n.decl Answer()\nAnswer() :- Is_god_of(\"Poseidon\", domain1), Is_god_of(\"Vulcan\", domain2), domain1 = domain2.\n.output Answer", "completions": [".decl Is_god_of(God:symbol, Domain:symbol)\nIs_god_of(\"Poseidon\", \"sea\").\nIs_god_of(\"Vulcan\", \"fire\").\n.decl Answer()\nAnswer() :- Is_god_of(\"Poseidon\", domain1), Is_god_of(\"Vulcan\", domain2), domain1 = domain2.\n.output Answer"]}
{"id": 1791, "answer": true, "completion": ".decl Sings_shanties(Travelers:symbol, Location:symbol)\nSings_shanties(\"sailors\", \"sea\").\n.decl Travels_on_route(Travelers:symbol, Route:symbol)\nTravels_on_route(\"pioneers\", \"Oregon Trail\").\n.decl Is_sea_route(Route:symbol)\nIs_sea_route(\"sea\").\n.decl Answer()\nAnswer() :- Sings_shanties(travelers, \"sea\"), Travels_on_route(travelers, route), Is_sea_route(route).\n.output Answer", "completions": [".decl Sings_shanties(Travelers:symbol, Location:symbol)\nSings_shanties(\"sailors\", \"sea\").\n.decl Travels_on_route(Travelers:symbol, Route:symbol)\nTravels_on_route(\"pioneers\", \"Oregon Trail\").\n.decl Is_sea_route(Route:symbol)\nIs_sea_route(\"sea\").\n.decl Answer()\nAnswer() :- Sings_shanties(travelers, \"sea\"), Travels_on_route(travelers, route), Is_sea_route(route).\n.output Answer"]}
{"id": 1792, "answer": true, "completion": ".decl Cures(Substance:symbol, Disease:symbol)\nCures(\"morphine\", \"pain\").\nCures(\"antiretroviral therapy\", \"HIV\").\n.decl Answer()\nAnswer() :- Cures(\"morphine\", \"HIV\").\n.output Answer", "completions": [".decl Cures(Substance:symbol, Disease:symbol)\nCures(\"morphine\", \"pain\").\nCures(\"antiretroviral therapy\", \"HIV\").\n.decl Answer()\nAnswer() :- Cures(\"morphine\", \"HIV\").\n.output Answer"]}
{"id": 1793, "answer": false, "completion": ".decl Directed_by(Director:symbol, Movie:symbol)\nDirected_by(\"Lana Wachowski\", \"The Matrix\").\nDirected_by(\"Lilly Wachowski\", \"The Matrix\").\n.decl Advocates_for(Advocate:symbol, Cause:symbol)\nAdvocates_for(\"Lana Wachowski\", \"transgender rights\").\nAdvocates_for(\"Lilly Wachowski\", \"transgender rights\").\n.decl Answer()\nAnswer() :- Directed_by(director, \"The Matrix\"), Advocates_for(director, \"transgender rights\").\n.output Answer", "completions": [".decl Directed_by(Director:symbol, Movie:symbol)\nDirected_by(\"Lana Wachowski\", \"The Matrix\").\nDirected_by(\"Lilly Wachowski\", \"The Matrix\").\n.decl Advocates_for(Advocate:symbol, Cause:symbol)\nAdvocates_for(\"Lana Wachowski\", \"transgender rights\").\nAdvocates_for(\"Lilly Wachowski\", \"transgender rights\").\n.decl Answer()\nAnswer() :- Directed_by(director, \"The Matrix\"), Advocates_for(director, \"transgender rights\").\n.output Answer"]}
{"id": 1794, "answer": false, "completion": ".decl Has_menu_item(Place:symbol, MenuItem:symbol)\nHas_menu_item(\"Chinese Starbucks\", \"coffee\").\nHas_menu_item(\"Chinese Starbucks\", \"tea\").\nHas_menu_item(\"Chinese Starbucks\", \"frappuccino\").\nHas_menu_item(\"American Starbucks\", \"coffee\").\nHas_menu_item(\"American Starbucks\", \"tea\").\nHas_menu_item(\"American Starbucks\", \"frappuccino\").\n.decl Answer()\nAnswer() :- Has_menu_item(\"Chinese Starbucks\", item), Has_menu_item(\"American Starbucks\", item).\n.output Answer", "completions": [".decl Has_menu_item(Place:symbol, MenuItem:symbol)\nHas_menu_item(\"Chinese Starbucks\", \"coffee\").\nHas_menu_item(\"Chinese Starbucks\", \"tea\").\nHas_menu_item(\"Chinese Starbucks\", \"frappuccino\").\nHas_menu_item(\"American Starbucks\", \"coffee\").\nHas_menu_item(\"American Starbucks\", \"tea\").\nHas_menu_item(\"American Starbucks\", \"frappuccino\").\n.decl Answer()\nAnswer() :- Has_menu_item(\"Chinese Starbucks\", item), Has_menu_item(\"American Starbucks\", item).\n.output Answer"]}
{"id": 1795, "answer": true, "completion": ".decl Uses(Object:symbol, Item:symbol, Purpose:symbol)\nUses(\"Mario\", \"mushroom\", \"grow\").\nUses(\"Mario\", \"super_star\", \"run faster\").\n.decl Answer()\nAnswer() :- Uses(\"Mario\", \"mushroom\", \"run faster\").\n.output Answer", "completions": [".decl Uses(Object:symbol, Item:symbol, Purpose:symbol)\nUses(\"Mario\", \"mushroom\", \"grow\").\nUses(\"Mario\", \"super_star\", \"run faster\").\n.decl Answer()\nAnswer() :- Uses(\"Mario\", \"mushroom\", \"run faster\").\n.output Answer"]}
{"id": 1796, "answer": false, "completion": ".decl Is_lieutenant(Person:symbol, Age:float)\nIs_lieutenant(\"child\", 10).\n.decl Minimum_age_for_lieutenant(Min_age:float)\nMinimum_age_for_lieutenant(18).\n.decl Answer()\nAnswer() :- Is_lieutenant(\"child\", age), Minimum_age_for_lieutenant(min_age), age >= min_age.\n.output Answer", "completions": [".decl Is_lieutenant(Person:symbol, Age:float)\nIs_lieutenant(\"child\", 10).\n.decl Minimum_age_for_lieutenant(Min_age:float)\nMinimum_age_for_lieutenant(18).\n.decl Answer()\nAnswer() :- Is_lieutenant(\"child\", age), Minimum_age_for_lieutenant(min_age), age >= min_age.\n.output Answer"]}
{"id": 1797, "answer": false, "completion": ".decl Designed_to_be_slow(Layout:symbol, Slow:float)\nDesigned_to_be_slow(\"QWERTY\", 1).\n.decl Answer()\nAnswer() :- Designed_to_be_slow(\"QWERTY\", slow), slow = 1.\n.output Answer", "completions": [".decl Designed_to_be_slow(Layout:symbol, Slow:float)\nDesigned_to_be_slow(\"QWERTY\", 1).\n.decl Answer()\nAnswer() :- Designed_to_be_slow(\"QWERTY\", slow), slow = 1.\n.output Answer"]}
{"id": 1798, "answer": false, "completion": ".decl Served_as_President(Person:symbol, Party:symbol)\nServed_as_President(\"Gerald Ford\", \"Republican\").\n.decl Serves_as_Speaker(Person:symbol, Party:symbol)\nServes_as_Speaker(\"Nancy Pelosi\", \"Democratic\").\n.decl Answer()\nAnswer() :- Served_as_President(\"Gerald Ford\", party1), Serves_as_Speaker(\"Nancy Pelosi\", party2), party1 = party2.\n.output Answer", "completions": [".decl Served_as_President(Person:symbol, Party:symbol)\nServed_as_President(\"Gerald Ford\", \"Republican\").\n.decl Serves_as_Speaker(Person:symbol, Party:symbol)\nServes_as_Speaker(\"Nancy Pelosi\", \"Democratic\").\n.decl Answer()\nAnswer() :- Served_as_President(\"Gerald Ford\", party1), Serves_as_Speaker(\"Nancy Pelosi\", party2), party1 = party2.\n.output Answer"]}
{"id": 1799, "answer": true, "completion": ".decl Prevents_growth(Plant_A:symbol, Plant_B:symbol)\nPrevents_growth(\"sweet potato\", \"other plants\").\n.decl Answer()\nAnswer() :- Prevents_growth(\"sweet potato\", \"other plants\").\n.output Answer", "completions": [".decl Prevents_growth(Plant_A:symbol, Plant_B:symbol)\nPrevents_growth(\"sweet potato\", \"other plants\").\n.decl Answer()\nAnswer() :- Prevents_growth(\"sweet potato\", \"other plants\").\n.output Answer"]}
{"id": 1800, "answer": false, "completion": ".decl Has_spinal_cord(Animal:symbol, Has_spinal_cord:bool)\nHas_spinal_cord(\"hedgehog\", true).\nHas_spinal_cord(\"jellyfish\", false).\nHas_spinal_cord(\"earthworm\", false).\n.decl Avoids(Animal_A:symbol, Animal_B:symbol)\nAvoids(\"hedgehog\", \"jellyfish\").\nAvoids(\"hedgehog\", \"earthworm\").\n.decl Answer()\nAnswer() :- Avoids(\"hedgehog\", animal), !Has_spinal_cord(animal, true).\n.output Answer", "completions": [".decl Has_spinal_cord(Animal:symbol, Has_spinal_cord:bool)\nHas_spinal_cord(\"hedgehog\", true).\nHas_spinal_cord(\"jellyfish\", false).\nHas_spinal_cord(\"earthworm\", false).\n.decl Avoids(Animal_A:symbol, Animal_B:symbol)\nAvoids(\"hedgehog\", \"jellyfish\").\nAvoids(\"hedgehog\", \"earthworm\").\n.decl Answer()\nAnswer() :- Avoids(\"hedgehog\", animal), !Has_spinal_cord(animal, true).\n.output Answer"]}
{"id": 1801, "answer": false, "completion": ".decl Causes_paresthesia(Substance:symbol)\nCauses_paresthesia(\"white pigment\").\n.decl Is_white_pigment(Substance:symbol)\nIs_white_pigment(\"titanium dioxide\").\n.decl Answer()\nAnswer() :- Causes_paresthesia(substance), Is_white_pigment(substance).\n.output Answer", "completions": [".decl Causes_paresthesia(Substance:symbol)\nCauses_paresthesia(\"white pigment\").\n.decl Is_white_pigment(Substance:symbol)\nIs_white_pigment(\"titanium dioxide\").\n.decl Answer()\nAnswer() :- Causes_paresthesia(substance), Is_white_pigment(substance).\n.output Answer"]}
{"id": 1802, "answer": true, "completion": ".decl Descended_from(Person:symbol, Ancestor:symbol)\nDescended_from(\"Scottish people\", \"Mary, Queen of Scots\").\n.decl Has_nationality(Person:symbol, Nationality:symbol)\nHas_nationality(\"Mary, Queen of Scots\", \"Scottish\").\nHas_nationality(\"Mary, Queen of Scots\", \"French\").\n.decl Answer()\nAnswer() :- Descended_from(\"Scottish people\", ancestor), Has_nationality(ancestor, \"French\").\n.output Answer", "completions": [".decl Descended_from(Person:symbol, Ancestor:symbol)\nDescended_from(\"Scottish people\", \"Mary, Queen of Scots\").\n.decl Has_nationality(Person:symbol, Nationality:symbol)\nHas_nationality(\"Mary, Queen of Scots\", \"Scottish\").\nHas_nationality(\"Mary, Queen of Scots\", \"French\").\n.decl Answer()\nAnswer() :- Descended_from(\"Scottish people\", ancestor), Has_nationality(ancestor, \"French\").\n.output Answer"]}
{"id": 1803, "answer": true, "completion": ".decl Lives_in(Person:symbol, City:symbol)\n.decl Voted_for(Person:symbol, Politician:symbol)\n.decl Answer()\n\n// Assuming some citizens of San Antonio\nLives_in(\"Alice\", \"San Antonio\").\nLives_in(\"Bob\", \"San Antonio\").\n\n// Assuming some votes for Boris Johnson\nVoted_for(\"Charlie\", \"Boris Johnson\").\nVoted_for(\"David\", \"Boris Johnson\").\n\nAnswer() :- Lives_in(person, \"San Antonio\"), Voted_for(person, \"Boris Johnson\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, City:symbol)\n.decl Voted_for(Person:symbol, Politician:symbol)\n.decl Answer()\n\n// Assuming some citizens of San Antonio\nLives_in(\"Alice\", \"San Antonio\").\nLives_in(\"Bob\", \"San Antonio\").\n\n// Assuming some votes for Boris Johnson\nVoted_for(\"Charlie\", \"Boris Johnson\").\nVoted_for(\"David\", \"Boris Johnson\").\n\nAnswer() :- Lives_in(person, \"San Antonio\"), Voted_for(person, \"Boris Johnson\").\n.output Answer"]}
{"id": 1804, "answer": true, "completion": ".decl Handedness_affects(Aspect:symbol, Language:symbol)\nHandedness_affects(\"signing hand\", \"American Sign Language\").\n.decl Answer()\nAnswer() :- Handedness_affects(\"handedness\", \"American Sign Language\").\nAnswer() :- Handedness_affects(aspect, \"American Sign Language\"), aspect = \"signing hand\".\n.output Answer", "completions": [".decl Handedness_affects(Aspect:symbol, Language:symbol)\nHandedness_affects(\"signing hand\", \"American Sign Language\").\n.decl Answer()\nAnswer() :- Handedness_affects(\"handedness\", \"American Sign Language\").\nAnswer() :- Handedness_affects(aspect, \"American Sign Language\"), aspect = \"signing hand\".\n.output Answer"]}
{"id": 1805, "answer": true, "completion": ".decl Spoke_language(Region:symbol, Language:symbol, Time_period:symbol)\nSpoke_language(\"Confederate States\", \"English\", \"before Civil War\").\n.decl Is_old_language(Language:symbol)\nIs_old_language(\"Old English\").\n.decl Answer()\nAnswer() :- Spoke_language(\"Confederate States\", language, \"before Civil War\"), Is_old_language(language).\n.output Answer", "completions": [".decl Spoke_language(Region:symbol, Language:symbol, Time_period:symbol)\nSpoke_language(\"Confederate States\", \"English\", \"before Civil War\").\n.decl Is_old_language(Language:symbol)\nIs_old_language(\"Old English\").\n.decl Answer()\nAnswer() :- Spoke_language(\"Confederate States\", language, \"before Civil War\"), Is_old_language(language).\n.output Answer"]}
{"id": 1806, "answer": true, "completion": ".decl Has_new_identity(Corporation:symbol, Status:symbol)\nHas_new_identity(\"Fiat Chrysler\", \"yes\").\n.decl Answer()\nAnswer() :- Has_new_identity(\"Fiat Chrysler\", \"yes\").\n.output Answer", "completions": [".decl Has_new_identity(Corporation:symbol, Status:symbol)\nHas_new_identity(\"Fiat Chrysler\", \"yes\").\n.decl Answer()\nAnswer() :- Has_new_identity(\"Fiat Chrysler\", \"yes\").\n.output Answer"]}
{"id": 1807, "answer": true, "completion": ".decl Is_associated_with(Object:symbol, Activity:symbol)\nIs_associated_with(\"capsaicin\", \"spicy food\").\nIs_associated_with(\"spicy food\", \"cooking\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"capsaicin\", activity), Is_associated_with(activity, \"cooking\").\n.output Answer", "completions": [".decl Is_associated_with(Object:symbol, Activity:symbol)\nIs_associated_with(\"capsaicin\", \"spicy food\").\nIs_associated_with(\"spicy food\", \"cooking\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"capsaicin\", activity), Is_associated_with(activity, \"cooking\").\n.output Answer"]}
{"id": 1808, "answer": false, "completion": ".decl Has_parts(Symbol:symbol, Part:symbol)\nHas_parts(\"Capricorn\", \"goat\").\nHas_parts(\"Capricorn\", \"fish\").\nHas_parts(\"chimera\", \"lion\").\nHas_parts(\"chimera\", \"goat\").\nHas_parts(\"chimera\", \"snake\").\n.decl Answer()\nAnswer() :- Has_parts(\"Capricorn\", part1), Has_parts(\"chimera\", part2), part1 = part2.\n.output Answer", "completions": [".decl Has_parts(Symbol:symbol, Part:symbol)\nHas_parts(\"Capricorn\", \"goat\").\nHas_parts(\"Capricorn\", \"fish\").\nHas_parts(\"chimera\", \"lion\").\nHas_parts(\"chimera\", \"goat\").\nHas_parts(\"chimera\", \"snake\").\n.decl Answer()\nAnswer() :- Has_parts(\"Capricorn\", part1), Has_parts(\"chimera\", part2), part1 = part2.\n.output Answer"]}
{"id": 1809, "answer": true, "completion": ".decl Has_aesthetic(Object:symbol, Aesthetic:symbol)\nHas_aesthetic(\"Japanese street\", \"illuminated\").\n.decl Illuminated_by(Object:symbol, Substance:symbol)\nIlluminated_by(\"Japanese street\", \"noble gasses\").\n.decl Is_noble_gas(Element:symbol)\nIs_noble_gas(\"helium\").\nIs_noble_gas(\"neon\").\nIs_noble_gas(\"argon\").\nIs_noble_gas(\"krypton\").\nIs_noble_gas(\"xenon\").\nIs_noble_gas(\"radon\").\n.decl Answer()\nAnswer() :- Has_aesthetic(\"Japanese street\", \"illuminated\"), Illuminated_by(\"Japanese street\", substance), Is_noble_gas(substance).\n.output Answer", "completions": [".decl Has_aesthetic(Object:symbol, Aesthetic:symbol)\nHas_aesthetic(\"Japanese street\", \"illuminated\").\n.decl Illuminated_by(Object:symbol, Substance:symbol)\nIlluminated_by(\"Japanese street\", \"noble gasses\").\n.decl Is_noble_gas(Element:symbol)\nIs_noble_gas(\"helium\").\nIs_noble_gas(\"neon\").\nIs_noble_gas(\"argon\").\nIs_noble_gas(\"krypton\").\nIs_noble_gas(\"xenon\").\nIs_noble_gas(\"radon\").\n.decl Answer()\nAnswer() :- Has_aesthetic(\"Japanese street\", \"illuminated\"), Illuminated_by(\"Japanese street\", substance), Is_noble_gas(substance).\n.output Answer"]}
{"id": 1810, "answer": true, "completion": ".decl Has_prison_time(Event:symbol, Prison_time:float)\nHas_prison_time(\"shooting bald eagle\", 2).\nHas_prison_time(\"Michael Vick\", 1.5).\n.decl Answer()\nAnswer() :- Has_prison_time(\"shooting bald eagle\", prison_time1), Has_prison_time(\"Michael Vick\", prison_time2), prison_time1 > prison_time2.\n.output Answer", "completions": [".decl Has_prison_time(Event:symbol, Prison_time:float)\nHas_prison_time(\"shooting bald eagle\", 2).\nHas_prison_time(\"Michael Vick\", 1.5).\n.decl Answer()\nAnswer() :- Has_prison_time(\"shooting bald eagle\", prison_time1), Has_prison_time(\"Michael Vick\", prison_time2), prison_time1 > prison_time2.\n.output Answer"]}
{"id": 1811, "answer": true, "completion": ".decl Touches_ocean(Country:symbol, Ocean:symbol)\nTouches_ocean(\"United States of America\", \"Pacific Ocean\").\nTouches_ocean(\"United States of America\", \"Atlantic Ocean\").\n.decl Answer()\nAnswer() :- Touches_ocean(\"United States of America\", \"Indian Ocean\").\n.output Answer", "completions": [".decl Touches_ocean(Country:symbol, Ocean:symbol)\nTouches_ocean(\"United States of America\", \"Pacific Ocean\").\nTouches_ocean(\"United States of America\", \"Atlantic Ocean\").\n.decl Answer()\nAnswer() :- Touches_ocean(\"United States of America\", \"Indian Ocean\").\n.output Answer"]}
{"id": 1812, "answer": true, "completion": ".decl Sophist(sophist:symbol)\nSophist(\"Sophist\").\n.decl GoodAt(person:symbol, profession:symbol)\nGoodAt(\"Sophist\", \"philosophy\").\nGoodAt(\"Sophist\", \"rhetoric\").\n.decl RelatedProfessions(profession1:symbol, profession2:symbol)\nRelatedProfessions(\"philosophy\", \"law\").\nRelatedProfessions(\"rhetoric\", \"law\").\n.decl Answer()\nAnswer() :- Sophist(sophist), GoodAt(sophist, profession1), RelatedProfessions(profession1, \"law\").\n.output Answer", "completions": [".decl Sophist(sophist:symbol)\nSophist(\"Sophist\").\n.decl GoodAt(person:symbol, profession:symbol)\nGoodAt(\"Sophist\", \"philosophy\").\nGoodAt(\"Sophist\", \"rhetoric\").\n.decl RelatedProfessions(profession1:symbol, profession2:symbol)\nRelatedProfessions(\"philosophy\", \"law\").\nRelatedProfessions(\"rhetoric\", \"law\").\n.decl Answer()\nAnswer() :- Sophist(sophist), GoodAt(sophist, profession1), RelatedProfessions(profession1, \"law\").\n.output Answer"]}
{"id": 1813, "answer": true, "completion": ".decl Has_sugar_amount(Food:symbol, Sugar_amount:float)\nHas_sugar_amount(\"Krispy Kreme glazed doughnut\", 10).\n.decl AHA_daily_sugar_allowance(Gender:symbol, Sugar_allowance:float)\nAHA_daily_sugar_allowance(\"male\", 37.5).\nAHA_daily_sugar_allowance(\"female\", 25).\n.decl Answer()\nAnswer() :- Has_sugar_amount(\"Krispy Kreme glazed doughnut\", sugar_amount), AHA_daily_sugar_allowance(gender, sugar_allowance), 4 * sugar_amount > sugar_allowance.\n.output Answer", "completions": [".decl Has_sugar_amount(Food:symbol, Sugar_amount:float)\nHas_sugar_amount(\"Krispy Kreme glazed doughnut\", 10).\n.decl AHA_daily_sugar_allowance(Gender:symbol, Sugar_allowance:float)\nAHA_daily_sugar_allowance(\"male\", 37.5).\nAHA_daily_sugar_allowance(\"female\", 25).\n.decl Answer()\nAnswer() :- Has_sugar_amount(\"Krispy Kreme glazed doughnut\", sugar_amount), AHA_daily_sugar_allowance(gender, sugar_allowance), 4 * sugar_amount > sugar_allowance.\n.output Answer"]}
{"id": 1814, "answer": true, "completion": ".decl Is_standalone(Movie:symbol)\nIs_standalone(\"The Matrix\").\n.decl Has_sequels(Movie:symbol)\nHas_sequels(\"The Matrix\").\n.decl Answer()\nAnswer() :- Is_standalone(\"The Matrix\"), !Has_sequels(\"The Matrix\").\n.output Answer", "completions": [".decl Is_standalone(Movie:symbol)\nIs_standalone(\"The Matrix\").\n.decl Has_sequels(Movie:symbol)\nHas_sequels(\"The Matrix\").\n.decl Answer()\nAnswer() :- Is_standalone(\"The Matrix\"), !Has_sequels(\"The Matrix\").\n.output Answer"]}
{"id": 1815, "answer": true, "completion": ".decl Is_banned(Person:symbol, Place:symbol)\nIs_banned(\"people\", \"Forbidden City\").\n.decl Answer()\nAnswer() :- Is_banned(\"people\", \"Forbidden City\").\n.output Answer", "completions": [".decl Is_banned(Person:symbol, Place:symbol)\nIs_banned(\"people\", \"Forbidden City\").\n.decl Answer()\nAnswer() :- Is_banned(\"people\", \"Forbidden City\").\n.output Answer"]}
{"id": 1816, "answer": true, "completion": ".decl Is_Fibonacci(Number:float)\nIs_Fibonacci(0).\nIs_Fibonacci(1).\nIs_Fibonacci(2).\nIs_Fibonacci(3).\nIs_Fibonacci(5).\nIs_Fibonacci(8).\nIs_Fibonacci(13).\nIs_Fibonacci(21).\nIs_Fibonacci(34).\nIs_Fibonacci(55).\nIs_Fibonacci(89).\nIs_Fibonacci(144).\n\n.decl Dial_for_injury(Country:symbol, Number:float)\nDial_for_injury(\"Bangladesh\", 999).\n\n.decl Answer()\nAnswer() :- Dial_for_injury(\"Bangladesh\", number), Is_Fibonacci(number).\n.output Answer", "completions": [".decl Is_Fibonacci(Number:float)\nIs_Fibonacci(0).\nIs_Fibonacci(1).\nIs_Fibonacci(2).\nIs_Fibonacci(3).\nIs_Fibonacci(5).\nIs_Fibonacci(8).\nIs_Fibonacci(13).\nIs_Fibonacci(21).\nIs_Fibonacci(34).\nIs_Fibonacci(55).\nIs_Fibonacci(89).\nIs_Fibonacci(144).\n\n.decl Dial_for_injury(Country:symbol, Number:float)\nDial_for_injury(\"Bangladesh\", 999).\n\n.decl Answer()\nAnswer() :- Dial_for_injury(\"Bangladesh\", number), Is_Fibonacci(number).\n.output Answer"]}
{"id": 1817, "answer": true, "completion": ".decl Requires_conductor(Performer:symbol, Requirement:bool)\nRequires_conductor(\"solo pianist\", false).\n.decl Answer()\nAnswer() :- Requires_conductor(\"solo pianist\", true).\n.output Answer", "completions": [".decl Requires_conductor(Performer:symbol, Requirement:bool)\nRequires_conductor(\"solo pianist\", false).\n.decl Answer()\nAnswer() :- Requires_conductor(\"solo pianist\", true).\n.output Answer"]}
{"id": 1818, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Jackson Pollock's parents\", 1885).\n.decl Introduced_in_year(Event:symbol, Introduction_year:float)\nIntroduced_in_year(\"The Pledge of Allegiance\", 1892).\n.decl Answer()\nAnswer() :- Born_in_year(\"Jackson Pollock's parents\", birth_year), Introduced_in_year(\"The Pledge of Allegiance\", introduction_year), birth_year < introduction_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Jackson Pollock's parents\", 1885).\n.decl Introduced_in_year(Event:symbol, Introduction_year:float)\nIntroduced_in_year(\"The Pledge of Allegiance\", 1892).\n.decl Answer()\nAnswer() :- Born_in_year(\"Jackson Pollock's parents\", birth_year), Introduced_in_year(\"The Pledge of Allegiance\", introduction_year), birth_year < introduction_year.\n.output Answer"]}
{"id": 1819, "answer": true, "completion": ".decl Occurs_in_month(Event:symbol, Hemisphere:symbol, Month:symbol)\nOccurs_in_month(\"winter solstice\", \"Northern Hemisphere\", \"December\").\nOccurs_in_month(\"winter solstice\", \"Southern Hemisphere\", \"June\").\n.decl Month_number(Month:symbol, Number:float)\nMonth_number(\"January\", 1).\nMonth_number(\"February\", 2).\nMonth_number(\"March\", 3).\nMonth_number(\"April\", 4).\nMonth_number(\"May\", 5).\nMonth_number(\"June\", 6).\nMonth_number(\"July\", 7).\nMonth_number(\"August\", 8).\nMonth_number(\"September\", 9).\nMonth_number(\"October\", 10).\nMonth_number(\"November\", 11).\nMonth_number(\"December\", 12).\n.decl Answer()\nAnswer() :- Occurs_in_month(\"winter solstice\", \"Northern Hemisphere\", month1), Occurs_in_month(\"winter solstice\", \"Southern Hemisphere\", month2), Month_number(month1, number1), Month_number(month2, number2), Month_number(\"July\", number3), abs(number1 - number3) < abs(number2 - number3).\n.output Answer", "completions": [".decl Occurs_in_month(Event:symbol, Hemisphere:symbol, Month:symbol)\nOccurs_in_month(\"winter solstice\", \"Northern Hemisphere\", \"December\").\nOccurs_in_month(\"winter solstice\", \"Southern Hemisphere\", \"June\").\n.decl Month_number(Month:symbol, Number:float)\nMonth_number(\"January\", 1).\nMonth_number(\"February\", 2).\nMonth_number(\"March\", 3).\nMonth_number(\"April\", 4).\nMonth_number(\"May\", 5).\nMonth_number(\"June\", 6).\nMonth_number(\"July\", 7).\nMonth_number(\"August\", 8).\nMonth_number(\"September\", 9).\nMonth_number(\"October\", 10).\nMonth_number(\"November\", 11).\nMonth_number(\"December\", 12).\n.decl Answer()\nAnswer() :- Occurs_in_month(\"winter solstice\", \"Northern Hemisphere\", month1), Occurs_in_month(\"winter solstice\", \"Southern Hemisphere\", month2), Month_number(month1, number1), Month_number(month2, number2), Month_number(\"July\", number3), abs(number1 - number3) < abs(number2 - number3).\n.output Answer"]}
{"id": 1820, "answer": false, "completion": ".decl Has_tourists(Country:symbol, Tourists:float)\nHas_tourists(\"Tuvalu\", 2000).\nHas_tourists(\"Niue\", 1000).\n.decl Answer()\nAnswer() :- Has_tourists(\"Tuvalu\", tourists1), Has_tourists(\"Niue\", tourists2), tourists1 > tourists2.\n.output Answer", "completions": [".decl Has_tourists(Country:symbol, Tourists:float)\nHas_tourists(\"Tuvalu\", 2000).\nHas_tourists(\"Niue\", 1000).\n.decl Answer()\nAnswer() :- Has_tourists(\"Tuvalu\", tourists1), Has_tourists(\"Niue\", tourists2), tourists1 > tourists2.\n.output Answer"]}
{"id": 1821, "answer": true, "completion": ".decl Is_parody_of(Work:symbol, Original:symbol)\nIs_parody_of(\"A Tale of Two Cities\", \"Bible\").\n.decl Answer()\nAnswer() :- Is_parody_of(\"A Tale of Two Cities\", \"Bible\").\n.output Answer", "completions": [".decl Is_parody_of(Work:symbol, Original:symbol)\nIs_parody_of(\"A Tale of Two Cities\", \"Bible\").\n.decl Answer()\nAnswer() :- Is_parody_of(\"A Tale of Two Cities\", \"Bible\").\n.output Answer"]}
{"id": 1822, "answer": false, "completion": ".decl Has_n_characters(Set:symbol, N_characters:float)\nHas_n_characters(\"binary numbers\", 2).\nHas_n_characters(\"standard alphabet\", 26).\n.decl Strong_password_criteria(Min_characters:float)\nStrong_password_criteria(12).\n.decl Answer()\nAnswer() :- Has_n_characters(\"binary numbers\", n_characters1), Has_n_characters(\"standard alphabet\", n_characters2), Strong_password_criteria(min_characters), (n_characters1 + n_characters2) >= min_characters.\n.output Answer", "completions": [".decl Has_n_characters(Set:symbol, N_characters:float)\nHas_n_characters(\"binary numbers\", 2).\nHas_n_characters(\"standard alphabet\", 26).\n.decl Strong_password_criteria(Min_characters:float)\nStrong_password_criteria(12).\n.decl Answer()\nAnswer() :- Has_n_characters(\"binary numbers\", n_characters1), Has_n_characters(\"standard alphabet\", n_characters2), Strong_password_criteria(min_characters), (n_characters1 + n_characters2) >= min_characters.\n.output Answer"]}
{"id": 1823, "answer": true, "completion": ".decl Influenced(Artist:symbol, Style:symbol)\nInfluenced(\"Andy Warhol\", \"Pop Art\").\n.decl Style_period(Style:symbol, Period_start:float, Period_end:float)\nStyle_period(\"Art Deco\", 1920, 1939).\nStyle_period(\"Pop Art\", 1950, 1970).\n.decl Answer()\nAnswer() :- Influenced(\"Andy Warhol\", \"Art Deco\").\nAnswer() :- Influenced(\"Andy Warhol\", style1), Style_period(style1, start1, end1), Style_period(\"Art Deco\", start2, end2), end1 < start2.\n.output Answer", "completions": [".decl Influenced(Artist:symbol, Style:symbol)\nInfluenced(\"Andy Warhol\", \"Pop Art\").\n.decl Style_period(Style:symbol, Period_start:float, Period_end:float)\nStyle_period(\"Art Deco\", 1920, 1939).\nStyle_period(\"Pop Art\", 1950, 1970).\n.decl Answer()\nAnswer() :- Influenced(\"Andy Warhol\", \"Art Deco\").\nAnswer() :- Influenced(\"Andy Warhol\", style1), Style_period(style1, start1, end1), Style_period(\"Art Deco\", start2, end2), end1 < start2.\n.output Answer"]}
{"id": 1824, "answer": true, "completion": ".decl Is_recommended_for(Recommendation:symbol, Condition:symbol)\nIs_recommended_for(\"ginger\", \"pregnancy\").\n.decl Answer()\nAnswer() :- Is_recommended_for(\"ginger\", \"pregnancy\").\n.output Answer", "completions": [".decl Is_recommended_for(Recommendation:symbol, Condition:symbol)\nIs_recommended_for(\"ginger\", \"pregnancy\").\n.decl Answer()\nAnswer() :- Is_recommended_for(\"ginger\", \"pregnancy\").\n.output Answer"]}
{"id": 1825, "answer": true, "completion": ".decl Is_source_of_power(Object:symbol, Power:symbol, Context:symbol)\nIs_source_of_power(\"spinach\", \"strength\", \"Popeye comic\").\nIs_source_of_power(\"spinach\", \"strength\", \"Popeye movie\").\n.decl Answer()\nAnswer() :- Is_source_of_power(\"spinach\", power, \"Popeye movie\").\n.output Answer", "completions": [".decl Is_source_of_power(Object:symbol, Power:symbol, Context:symbol)\nIs_source_of_power(\"spinach\", \"strength\", \"Popeye comic\").\nIs_source_of_power(\"spinach\", \"strength\", \"Popeye movie\").\n.decl Answer()\nAnswer() :- Is_source_of_power(\"spinach\", power, \"Popeye movie\").\n.output Answer"]}
{"id": 1826, "answer": true, "completion": ".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"acetylene welding\", 3300).\nHas_temperature(\"star\", 3000).\n.decl Answer()\nAnswer() :- Has_temperature(\"acetylene welding\", temp1), Has_temperature(\"star\", temp2), temp1 >= temp2.\n.output Answer", "completions": [".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"acetylene welding\", 3300).\nHas_temperature(\"star\", 3000).\n.decl Answer()\nAnswer() :- Has_temperature(\"acetylene welding\", temp1), Has_temperature(\"star\", temp2), temp1 >= temp2.\n.output Answer"]}
{"id": 1827, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Donatello's bronze David\", 5.17).\nHas_height(\"Sistine Chapel ceiling\", 20.7).\n.decl Has_reach(Person:symbol, Reach:float)\nHas_reach(\"adult male\", 2.5).\n.decl Answer()\nAnswer() :- Has_height(\"Donatello's bronze David\", height1), Has_height(\"Sistine Chapel ceiling\", height2), Has_reach(\"adult male\", reach), height1 + reach >= height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Donatello's bronze David\", 5.17).\nHas_height(\"Sistine Chapel ceiling\", 20.7).\n.decl Has_reach(Person:symbol, Reach:float)\nHas_reach(\"adult male\", 2.5).\n.decl Answer()\nAnswer() :- Has_height(\"Donatello's bronze David\", height1), Has_height(\"Sistine Chapel ceiling\", height2), Has_reach(\"adult male\", reach), height1 + reach >= height2.\n.output Answer"]}
{"id": 1828, "answer": false, "completion": ".decl Is_dangerous(Element1:symbol, Element2:symbol)\nIs_dangerous(\"chlorine\", \"sodium\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"chlorine\", \"sodium\").\n.output Answer", "completions": [".decl Is_dangerous(Element1:symbol, Element2:symbol)\nIs_dangerous(\"chlorine\", \"sodium\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"chlorine\", \"sodium\").\n.output Answer"]}
{"id": 1829, "answer": true, "completion": ".decl Occurred_in_year(Event:symbol, Year:float)\nOccurred_in_year(\"Spanish American War\", 1898).\nOccurred_in_year(\"Moulin Rouge opening\", 1889).\n.decl Located_in_country(Place:symbol, Country:symbol)\nLocated_in_country(\"Moulin Rouge\", \"France\").\nLocated_in_country(\"Spanish American War triage center\", \"Spain\").\n.decl Answer()\nAnswer() :- Occurred_in_year(\"Spanish American War\", year1), Occurred_in_year(\"Moulin Rouge opening\", year2), year2 <= year1, Located_in_country(\"Moulin Rouge\", country1), Located_in_country(\"Spanish American War triage center\", country2), country1 = country2.\n.output Answer", "completions": [".decl Occurred_in_year(Event:symbol, Year:float)\nOccurred_in_year(\"Spanish American War\", 1898).\nOccurred_in_year(\"Moulin Rouge opening\", 1889).\n.decl Located_in_country(Place:symbol, Country:symbol)\nLocated_in_country(\"Moulin Rouge\", \"France\").\nLocated_in_country(\"Spanish American War triage center\", \"Spain\").\n.decl Answer()\nAnswer() :- Occurred_in_year(\"Spanish American War\", year1), Occurred_in_year(\"Moulin Rouge opening\", year2), year2 <= year1, Located_in_country(\"Moulin Rouge\", country1), Located_in_country(\"Spanish American War triage center\", country2), country1 = country2.\n.output Answer"]}
{"id": 1830, "answer": false, "completion": ".decl Has_viewership(Show:symbol, Viewers:float)\nHas_viewership(\"Downton Abbey finale\", 10000000).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"Kazakhstan\", 18700000).\n.decl Answer()\nAnswer() :- Has_viewership(\"Downton Abbey finale\", viewers), Has_population(\"Kazakhstan\", population), viewers > population.\n.output Answer", "completions": [".decl Has_viewership(Show:symbol, Viewers:float)\nHas_viewership(\"Downton Abbey finale\", 10000000).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"Kazakhstan\", 18700000).\n.decl Answer()\nAnswer() :- Has_viewership(\"Downton Abbey finale\", viewers), Has_population(\"Kazakhstan\", population), viewers > population.\n.output Answer"]}
{"id": 1831, "answer": true, "completion": ".decl DIY_project(Project:symbol, Potentially_lethal:float)\nDIY_project(\"electrical wiring\", 1).\nDIY_project(\"plumbing\", 0).\nDIY_project(\"roof repair\", 1).\n.decl Answer()\nAnswer() :- DIY_project(project, 1).\n.output Answer", "completions": [".decl DIY_project(Project:symbol, Potentially_lethal:float)\nDIY_project(\"electrical wiring\", 1).\nDIY_project(\"plumbing\", 0).\nDIY_project(\"roof repair\", 1).\n.decl Answer()\nAnswer() :- DIY_project(project, 1).\n.output Answer"]}
{"id": 1832, "answer": false, "completion": ".decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"Eastern chipmunk\", 3).\n.decl Leap_years_in_n_years(N_years:float, Leap_years:float)\nLeap_years_in_n_years(4, 1).\nLeap_years_in_n_years(8, 2).\n.decl Answer()\nAnswer() :- Lives_n_years(\"Eastern chipmunk\", n_years), Leap_years_in_n_years(n_years, leap_years), leap_years < 2.\n.output Answer", "completions": [".decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"Eastern chipmunk\", 3).\n.decl Leap_years_in_n_years(N_years:float, Leap_years:float)\nLeap_years_in_n_years(4, 1).\nLeap_years_in_n_years(8, 2).\n.decl Answer()\nAnswer() :- Lives_n_years(\"Eastern chipmunk\", n_years), Leap_years_in_n_years(n_years, leap_years), leap_years < 2.\n.output Answer"]}
{"id": 1833, "answer": true, "completion": ".decl Requires_electricity(Object:symbol)\nRequires_electricity(\"Super Mario\").\n.decl Answer()\nAnswer() :- Requires_electricity(\"Super Mario\").\n.output Answer", "completions": [".decl Requires_electricity(Object:symbol)\nRequires_electricity(\"Super Mario\").\n.decl Answer()\nAnswer() :- Requires_electricity(\"Super Mario\").\n.output Answer"]}
{"id": 1834, "answer": true, "completion": ".decl Survives_in(Animal:symbol, Environment:symbol)\nSurvives_in(\"Chinese mountain cat\", \"mountains\").\nSurvives_in(\"Chinese mountain cat\", \"forests\").\nSurvives_in(\"Chinese mountain cat\", \"grasslands\").\n.decl Answer()\nAnswer() :- Survives_in(\"Chinese mountain cat\", \"orbit\").\n.output Answer", "completions": [".decl Survives_in(Animal:symbol, Environment:symbol)\nSurvives_in(\"Chinese mountain cat\", \"mountains\").\nSurvives_in(\"Chinese mountain cat\", \"forests\").\nSurvives_in(\"Chinese mountain cat\", \"grasslands\").\n.decl Answer()\nAnswer() :- Survives_in(\"Chinese mountain cat\", \"orbit\").\n.output Answer"]}
{"id": 1835, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"rock\", 2.65).\nHas_density(\"Earth's atmosphere\", 0.0012).\n.decl Answer()\nAnswer() :- Has_density(\"rock\", density1), Has_density(\"Earth's atmosphere\", density2), density1 <= density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"rock\", 2.65).\nHas_density(\"Earth's atmosphere\", 0.0012).\n.decl Answer()\nAnswer() :- Has_density(\"rock\", density1), Has_density(\"Earth's atmosphere\", density2), density1 <= density2.\n.output Answer"]}
{"id": 1836, "answer": false, "completion": ".decl Contributes_to_decrease_in_need(Company:symbol, Object:symbol)\n.decl Decreased_need_for(Object:symbol)\n.decl Answer()\n\n// We don't have any information about Burger King contributing to a decrease in need for snowshoes.\nContributes_to_decrease_in_need(\"Burger King\", \"snowshoes\") :- false.\n\nDecreased_need_for(\"snowshoes\") :- Contributes_to_decrease_in_need(\"Burger King\", \"snowshoes\").\n\nAnswer() :- Decreased_need_for(\"snowshoes\").\n\n.output Answer", "completions": [".decl Contributes_to_decrease_in_need(Company:symbol, Object:symbol)\n.decl Decreased_need_for(Object:symbol)\n.decl Answer()\n\n// We don't have any information about Burger King contributing to a decrease in need for snowshoes.\nContributes_to_decrease_in_need(\"Burger King\", \"snowshoes\") :- false.\n\nDecreased_need_for(\"snowshoes\") :- Contributes_to_decrease_in_need(\"Burger King\", \"snowshoes\").\n\nAnswer() :- Decreased_need_for(\"snowshoes\").\n\n.output Answer"]}
{"id": 1837, "answer": true, "completion": ".decl Released_in_year(Movie:symbol, Year:float)\nReleased_in_year(\"The Godfather\", 1972).\n.decl Invented_in_year(Technology:symbol, Year:float)\nInvented_in_year(\"USB flash drive\", 2000).\n.decl Answer()\nAnswer() :- Released_in_year(\"The Godfather\", year1), Invented_in_year(\"USB flash drive\", year2), year1 < year2.\n.output Answer", "completions": [".decl Released_in_year(Movie:symbol, Year:float)\nReleased_in_year(\"The Godfather\", 1972).\n.decl Invented_in_year(Technology:symbol, Year:float)\nInvented_in_year(\"USB flash drive\", 2000).\n.decl Answer()\nAnswer() :- Released_in_year(\"The Godfather\", year1), Invented_in_year(\"USB flash drive\", year2), year1 < year2.\n.output Answer"]}
{"id": 1838, "answer": false, "completion": ".decl Feared_event(Event:symbol, Year:float)\nFeared_event(\"New Years Day\", 1999).\n.decl Answer()\nAnswer() :- Feared_event(\"New Years Day\", 1999).\n.output Answer", "completions": [".decl Feared_event(Event:symbol, Year:float)\nFeared_event(\"New Years Day\", 1999).\n.decl Answer()\nAnswer() :- Feared_event(\"New Years Day\", 1999).\n.output Answer"]}
{"id": 1839, "answer": true, "completion": ".decl Supports(Person:symbol, Decision:symbol, Support:float)\nSupports(\"Woodrow Wilson\", \"Plessy v. Ferguson\", 0.7).\n.decl Threshold()\nThreshold(0.5).\n.decl Answer(Support:float)\nAnswer(support) :- Supports(\"Woodrow Wilson\", \"Plessy v. Ferguson\", support), Threshold(threshold), support > threshold.\n.output Answer", "completions": [".decl Supports(Person:symbol, Decision:symbol, Support:float)\nSupports(\"Woodrow Wilson\", \"Plessy v. Ferguson\", 0.7).\n.decl Threshold()\nThreshold(0.5).\n.decl Answer(Support:float)\nAnswer(support) :- Supports(\"Woodrow Wilson\", \"Plessy v. Ferguson\", support), Threshold(threshold), support > threshold.\n.output Answer"]}
{"id": 1840, "answer": true, "completion": ".decl Belongs_to_family(Person:symbol, Family:symbol)\nBelongs_to_family(\"Rahul Dravid\", \"human\").\n.decl Is_family_of(Family:symbol, Species:symbol)\nIs_family_of(\"Gryllidae\", \"crickets\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"Rahul Dravid\", family), Is_family_of(family, \"crickets\").\n.output Answer", "completions": [".decl Belongs_to_family(Person:symbol, Family:symbol)\nBelongs_to_family(\"Rahul Dravid\", \"human\").\n.decl Is_family_of(Family:symbol, Species:symbol)\nIs_family_of(\"Gryllidae\", \"crickets\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"Rahul Dravid\", family), Is_family_of(family, \"crickets\").\n.output Answer"]}
{"id": 1841, "answer": true, "completion": ".decl Can_hide(Object:symbol, Location:symbol)\nCan_hide(\"pet macaque\", \"under desk\").\n.decl Answer()\nAnswer() :- Can_hide(\"pet macaque\", \"under desk\").\n.output Answer", "completions": [".decl Can_hide(Object:symbol, Location:symbol)\nCan_hide(\"pet macaque\", \"under desk\").\n.decl Answer()\nAnswer() :- Can_hide(\"pet macaque\", \"under desk\").\n.output Answer"]}
{"id": 1842, "answer": true, "completion": ".decl Has_music_videos(Artist:symbol, Video_type:symbol)\nHas_music_videos(\"Pink\", \"empowering\").\nHas_music_videos(\"Pink\", \"emotional\").\nHas_music_videos(\"Pink\", \"fun\").\n.decl Triggering_for_ED(Video_type:symbol)\nTriggering_for_ED(\"emotional\").\n.decl Answer()\nAnswer() :- Has_music_videos(\"Pink\", video_type), Triggering_for_ED(video_type).\n.output Answer", "completions": [".decl Has_music_videos(Artist:symbol, Video_type:symbol)\nHas_music_videos(\"Pink\", \"empowering\").\nHas_music_videos(\"Pink\", \"emotional\").\nHas_music_videos(\"Pink\", \"fun\").\n.decl Triggering_for_ED(Video_type:symbol)\nTriggering_for_ED(\"emotional\").\n.decl Answer()\nAnswer() :- Has_music_videos(\"Pink\", video_type), Triggering_for_ED(video_type).\n.output Answer"]}
{"id": 1843, "answer": true, "completion": ".decl Can_occur_in_environment(Activity:symbol, Environment:symbol)\nCan_occur_in_environment(\"brewing\", \"prison\").\n.decl Answer()\nAnswer() :- Can_occur_in_environment(\"brewing\", \"prison\").\n.output Answer", "completions": [".decl Can_occur_in_environment(Activity:symbol, Environment:symbol)\nCan_occur_in_environment(\"brewing\", \"prison\").\n.decl Answer()\nAnswer() :- Can_occur_in_environment(\"brewing\", \"prison\").\n.output Answer"]}
{"id": 1844, "answer": false, "completion": ".decl Grows_in_region(Crop:symbol, Region:symbol)\nGrows_in_region(\"coffee\", \"tropical regions\").\n.decl Located_in(Person:symbol, Region:symbol)\nLocated_in(\"someone from New England\", \"New England\").\n.decl Profitable(Crop:symbol)\nProfitable(\"coffee\").\n.decl Answer()\nAnswer() :- Located_in(person, region1), Grows_in_region(\"coffee\", region2), Profitable(\"coffee\"), region1 = region2.\n.output Answer", "completions": [".decl Grows_in_region(Crop:symbol, Region:symbol)\nGrows_in_region(\"coffee\", \"tropical regions\").\n.decl Located_in(Person:symbol, Region:symbol)\nLocated_in(\"someone from New England\", \"New England\").\n.decl Profitable(Crop:symbol)\nProfitable(\"coffee\").\n.decl Answer()\nAnswer() :- Located_in(person, region1), Grows_in_region(\"coffee\", region2), Profitable(\"coffee\"), region1 = region2.\n.output Answer"]}
{"id": 1845, "answer": false, "completion": ".decl Is_similar(Object_A:symbol, Object_B:symbol)\nIs_similar(\"krabby patty\", \"cheeseburger\").\n.decl Answer()\nAnswer() :- Is_similar(\"krabby patty\", \"cheeseburger\").\n.output Answer", "completions": [".decl Is_similar(Object_A:symbol, Object_B:symbol)\nIs_similar(\"krabby patty\", \"cheeseburger\").\n.decl Answer()\nAnswer() :- Is_similar(\"krabby patty\", \"cheeseburger\").\n.output Answer"]}
{"id": 1846, "answer": false, "completion": ".decl Has_seating_capacity(Aircraft:symbol, Capacity:float)\nHas_seating_capacity(\"Boeing 737\", 189).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Chief Justices of the United States\", 17).\n.decl Answer()\nAnswer() :- Has_seating_capacity(\"Boeing 737\", capacity), Has_n_members(\"Chief Justices of the United States\", n_members), n_members > capacity.\n.output Answer", "completions": [".decl Has_seating_capacity(Aircraft:symbol, Capacity:float)\nHas_seating_capacity(\"Boeing 737\", 189).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Chief Justices of the United States\", 17).\n.decl Answer()\nAnswer() :- Has_seating_capacity(\"Boeing 737\", capacity), Has_n_members(\"Chief Justices of the United States\", n_members), n_members > capacity.\n.output Answer"]}
{"id": 1847, "answer": true, "completion": ".decl Lives_in_water(Animal:symbol, Water_type:symbol)\nLives_in_water(\"crocodile\", \"saltwater\").\nLives_in_water(\"alligator\", \"freshwater\").\n.decl Water_type(Location:symbol, Water_type:symbol)\nWater_type(\"Great Salt Lake\", \"saltwater\").\n.decl Answer()\nAnswer() :- Lives_in_water(\"crocodile\", water_type1), Lives_in_water(\"alligator\", water_type2), Water_type(\"Great Salt Lake\", water_type1), water_type1 != water_type2.\n.output Answer", "completions": [".decl Lives_in_water(Animal:symbol, Water_type:symbol)\nLives_in_water(\"crocodile\", \"saltwater\").\nLives_in_water(\"alligator\", \"freshwater\").\n.decl Water_type(Location:symbol, Water_type:symbol)\nWater_type(\"Great Salt Lake\", \"saltwater\").\n.decl Answer()\nAnswer() :- Lives_in_water(\"crocodile\", water_type1), Lives_in_water(\"alligator\", water_type2), Water_type(\"Great Salt Lake\", water_type1), water_type1 != water_type2.\n.output Answer"]}
{"id": 1848, "answer": false, "completion": ".decl Started_due_to(Event:symbol, Reason:symbol)\nStarted_due_to(\"Saudi Aramco\", \"oil exploration\").\n.decl Is_assassination(Reason:symbol)\nIs_assassination(\"assassination\").\n.decl Answer()\nAnswer() :- Started_due_to(\"Saudi Aramco\", reason), Is_assassination(reason).\n.output Answer", "completions": [".decl Started_due_to(Event:symbol, Reason:symbol)\nStarted_due_to(\"Saudi Aramco\", \"oil exploration\").\n.decl Is_assassination(Reason:symbol)\nIs_assassination(\"assassination\").\n.decl Answer()\nAnswer() :- Started_due_to(\"Saudi Aramco\", reason), Is_assassination(reason).\n.output Answer"]}
{"id": 1849, "answer": true, "completion": ".decl Celebrates_with(Object:symbol, Celebration:symbol)\nCelebrates_with(\"crustacean\", \"Diwali\").\n.decl Answer()\nAnswer() :- Celebrates_with(\"crustacean\", \"Diwali\").\n.output Answer", "completions": [".decl Celebrates_with(Object:symbol, Celebration:symbol)\nCelebrates_with(\"crustacean\", \"Diwali\").\n.decl Answer()\nAnswer() :- Celebrates_with(\"crustacean\", \"Diwali\").\n.output Answer"]}
{"id": 1850, "answer": false, "completion": ".decl Named_after(Goddess:symbol, Day:symbol)\nNamed_after(\"Frigg\", \"Friday\").\n.decl Despises(Goddess:symbol, Animal:symbol)\nDespises(\"Frigg\", \"felines\").\n.decl Answer()\nAnswer() :- Named_after(goddess, \"Friday\"), Despises(goddess, \"felines\").\n.output Answer", "completions": [".decl Named_after(Goddess:symbol, Day:symbol)\nNamed_after(\"Frigg\", \"Friday\").\n.decl Despises(Goddess:symbol, Animal:symbol)\nDespises(\"Frigg\", \"felines\").\n.decl Answer()\nAnswer() :- Named_after(goddess, \"Friday\"), Despises(goddess, \"felines\").\n.output Answer"]}
{"id": 1851, "answer": true, "completion": ".decl Eaten_with(Object:symbol, Utensil:symbol)\nEaten_with(\"soup\", \"spoon\").\n.decl Answer()\nAnswer() :- Eaten_with(\"soup\", \"hands\").\nAnswer() :- !Eaten_with(\"soup\", \"spoon\").\n.output Answer", "completions": [".decl Eaten_with(Object:symbol, Utensil:symbol)\nEaten_with(\"soup\", \"spoon\").\n.decl Answer()\nAnswer() :- Eaten_with(\"soup\", \"hands\").\nAnswer() :- !Eaten_with(\"soup\", \"spoon\").\n.output Answer"]}
{"id": 1852, "answer": true, "completion": ".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"person\", \"thalassophobia\").\n.decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"person\", \"oceanography\").\n.decl Related_to(Activity:symbol, Object:symbol)\nRelated_to(\"oceanography\", \"ocean\").\n.decl Answer()\nAnswer() :- Has_phobia(\"person\", phobia), Enjoys(\"person\", activity), Related_to(activity, object), phobia != object.\n.output Answer", "completions": [".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"person\", \"thalassophobia\").\n.decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"person\", \"oceanography\").\n.decl Related_to(Activity:symbol, Object:symbol)\nRelated_to(\"oceanography\", \"ocean\").\n.decl Answer()\nAnswer() :- Has_phobia(\"person\", phobia), Enjoys(\"person\", activity), Related_to(activity, object), phobia != object.\n.output Answer"]}
{"id": 1853, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Eric Clapton\", 1945).\n.decl Legal_age_to_purchase_cigarettes(Year:float, Age:float)\nLegal_age_to_purchase_cigarettes(1945, 18).\n.decl Age_at_year(Person:symbol, Year:float, Age:float)\nAge_at_year(\"Eric Clapton's mother\", 1945, 20).\n.decl Answer()\nAnswer() :- Born_in_year(\"Eric Clapton\", birth_year), Legal_age_to_purchase_cigarettes(birth_year, legal_age), Age_at_year(\"Eric Clapton's mother\", birth_year, mother_age), mother_age < legal_age.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Eric Clapton\", 1945).\n.decl Legal_age_to_purchase_cigarettes(Year:float, Age:float)\nLegal_age_to_purchase_cigarettes(1945, 18).\n.decl Age_at_year(Person:symbol, Year:float, Age:float)\nAge_at_year(\"Eric Clapton's mother\", 1945, 20).\n.decl Answer()\nAnswer() :- Born_in_year(\"Eric Clapton\", birth_year), Legal_age_to_purchase_cigarettes(birth_year, legal_age), Age_at_year(\"Eric Clapton's mother\", birth_year, mother_age), mother_age < legal_age.\n.output Answer"]}
{"id": 1854, "answer": false, "completion": ".decl Won_championship(Competitor:symbol, Championship:symbol)\nWon_championship(\"Secretariat\", \"Triple Crown\").\n.decl Is_type_of(Championship:symbol, Type:symbol)\nIs_type_of(\"Triple Crown\", \"Horse Racing\").\nIs_type_of(\"Formula One\", \"Car Racing\").\n.decl Answer()\nAnswer() :- Won_championship(\"Secretariat\", championship), Is_type_of(championship, \"Formula One\").\n.output Answer", "completions": [".decl Won_championship(Competitor:symbol, Championship:symbol)\nWon_championship(\"Secretariat\", \"Triple Crown\").\n.decl Is_type_of(Championship:symbol, Type:symbol)\nIs_type_of(\"Triple Crown\", \"Horse Racing\").\nIs_type_of(\"Formula One\", \"Car Racing\").\n.decl Answer()\nAnswer() :- Won_championship(\"Secretariat\", championship), Is_type_of(championship, \"Formula One\").\n.output Answer"]}
{"id": 1855, "answer": false, "completion": ".decl Travels_with(Person_A:symbol, Person_B:symbol)\nTravels_with(\"Iggy Pop\", \"David Bowie\").\nTravels_with(\"Justin Bieber\", \"Selena Gomez\").\n.decl Answer()\nAnswer() :- Travels_with(\"Iggy Pop\", \"Justin Bieber\").\nAnswer() :- Travels_with(\"Iggy Pop\", person1), Travels_with(\"Justin Bieber\", person2), person1 = person2.\n.output Answer", "completions": [".decl Travels_with(Person_A:symbol, Person_B:symbol)\nTravels_with(\"Iggy Pop\", \"David Bowie\").\nTravels_with(\"Justin Bieber\", \"Selena Gomez\").\n.decl Answer()\nAnswer() :- Travels_with(\"Iggy Pop\", \"Justin Bieber\").\nAnswer() :- Travels_with(\"Iggy Pop\", person1), Travels_with(\"Justin Bieber\", person2), person1 = person2.\n.output Answer"]}
{"id": 1856, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Eminem\", \"rapping\").\nHas_skill(\"Eminem\", \"songwriting\").\n.decl Required_skill(Event:symbol, Skill:symbol)\nRequired_skill(\"International Mathematical Olympiad\", \"mathematics\").\n.decl Answer()\nAnswer() :- Has_skill(\"Eminem\", skill), Required_skill(\"International Mathematical Olympiad\", skill).\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Eminem\", \"rapping\").\nHas_skill(\"Eminem\", \"songwriting\").\n.decl Required_skill(Event:symbol, Skill:symbol)\nRequired_skill(\"International Mathematical Olympiad\", \"mathematics\").\n.decl Answer()\nAnswer() :- Has_skill(\"Eminem\", skill), Required_skill(\"International Mathematical Olympiad\", skill).\n.output Answer"]}
{"id": 1857, "answer": true, "completion": ".decl Has_strength(Event:symbol, Strength:float)\nHas_strength(\"Tohoku earthquake\", 9.0).\n.decl Has_resistance(Entity:symbol, Resistance:float)\nHas_resistance(\"Godzilla\", 10.0).\n.decl Answer()\nAnswer() :- Has_strength(\"Tohoku earthquake\", strength), Has_resistance(\"Godzilla\", resistance), strength >= resistance.\n.output Answer", "completions": [".decl Has_strength(Event:symbol, Strength:float)\nHas_strength(\"Tohoku earthquake\", 9.0).\n.decl Has_resistance(Entity:symbol, Resistance:float)\nHas_resistance(\"Godzilla\", 10.0).\n.decl Answer()\nAnswer() :- Has_strength(\"Tohoku earthquake\", strength), Has_resistance(\"Godzilla\", resistance), strength >= resistance.\n.output Answer"]}
{"id": 1858, "answer": false, "completion": ".decl Has_n_episodes(Series:symbol, N_episodes:float)\nHas_n_episodes(\"JAG\", 227).\n.decl Has_n_days(Time_period:symbol, N_days:float)\nHas_n_days(\"six months\", 182).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"JAG\", n_episodes), Has_n_days(\"six months\", n_days), n_episodes <= n_days.\n.output Answer", "completions": [".decl Has_n_episodes(Series:symbol, N_episodes:float)\nHas_n_episodes(\"JAG\", 227).\n.decl Has_n_days(Time_period:symbol, N_days:float)\nHas_n_days(\"six months\", 182).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"JAG\", n_episodes), Has_n_days(\"six months\", n_days), n_episodes <= n_days.\n.output Answer"]}
{"id": 1859, "answer": true, "completion": ".decl Is_common(Language:symbol)\nIs_common(\"Greek alphabet\").\nIs_common(\"Sumerian cuneiform\").\n.decl Answer()\nAnswer() :- Is_common(\"Greek alphabet\"), Is_common(\"Sumerian cuneiform\").\n.output Answer", "completions": [".decl Is_common(Language:symbol)\nIs_common(\"Greek alphabet\").\nIs_common(\"Sumerian cuneiform\").\n.decl Answer()\nAnswer() :- Is_common(\"Greek alphabet\"), Is_common(\"Sumerian cuneiform\").\n.output Answer"]}
{"id": 1860, "answer": false, "completion": ".decl Has_price(Item:symbol, Price:float)\nHas_price(\"2020 Chevrolet Corvette\", 60000).\nHas_price(\"year at Columbia University\", 64000).\n.decl Answer()\nAnswer() :- Has_price(\"2020 Chevrolet Corvette\", price1), Has_price(\"year at Columbia University\", price2), price1 >= 0.9 * price2.\n.output Answer", "completions": [".decl Has_price(Item:symbol, Price:float)\nHas_price(\"2020 Chevrolet Corvette\", 60000).\nHas_price(\"year at Columbia University\", 64000).\n.decl Answer()\nAnswer() :- Has_price(\"2020 Chevrolet Corvette\", price1), Has_price(\"year at Columbia University\", price2), price1 >= 0.9 * price2.\n.output Answer"]}
{"id": 1861, "answer": false, "completion": ".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Tahiti hotels\", 20000).\nHas_capacity(\"US D-Day troops\", 156000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tahiti hotels\", capacity1), Has_capacity(\"US D-Day troops\", capacity2), capacity1 >= capacity2.\n.output Answer", "completions": [".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Tahiti hotels\", 20000).\nHas_capacity(\"US D-Day troops\", 156000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tahiti hotels\", capacity1), Has_capacity(\"US D-Day troops\", capacity2), capacity1 >= capacity2.\n.output Answer"]}
{"id": 1862, "answer": true, "completion": ".decl Competed_in_Olympics(Athlete:symbol, Year:float)\nCompeted_in_Olympics(\"Evander Holyfield\", 1984).\n.decl Hosted_in_Western_Hemisphere(Year:float)\nHosted_in_Western_Hemisphere(1984).\n.decl Answer()\nAnswer() :- Competed_in_Olympics(\"Evander Holyfield\", year), Hosted_in_Western_Hemisphere(year).\n.output Answer", "completions": [".decl Competed_in_Olympics(Athlete:symbol, Year:float)\nCompeted_in_Olympics(\"Evander Holyfield\", 1984).\n.decl Hosted_in_Western_Hemisphere(Year:float)\nHosted_in_Western_Hemisphere(1984).\n.decl Answer()\nAnswer() :- Competed_in_Olympics(\"Evander Holyfield\", year), Hosted_in_Western_Hemisphere(year).\n.output Answer"]}
{"id": 1863, "answer": true, "completion": ".decl Grows_in_location(Fruit:symbol, Location:symbol, Amount:float)\nGrows_in_location(\"watermelon\", \"Brazil\", 1000).\nGrows_in_location(\"watermelon\", \"Antarctica\", 0).\n.decl Answer()\nAnswer() :- Grows_in_location(\"watermelon\", \"Brazil\", amount1), Grows_in_location(\"watermelon\", \"Antarctica\", amount2), amount1 > amount2.\n.output Answer", "completions": [".decl Grows_in_location(Fruit:symbol, Location:symbol, Amount:float)\nGrows_in_location(\"watermelon\", \"Brazil\", 1000).\nGrows_in_location(\"watermelon\", \"Antarctica\", 0).\n.decl Answer()\nAnswer() :- Grows_in_location(\"watermelon\", \"Brazil\", amount1), Grows_in_location(\"watermelon\", \"Antarctica\", amount2), amount1 > amount2.\n.output Answer"]}
{"id": 1864, "answer": false, "completion": ".decl In_hiding(Person:symbol, From_country:symbol)\nIn_hiding(\"Edward Snowden\", \"United States\").\n.decl Answer()\nAnswer() :- In_hiding(\"Edward Snowden\", \"United States\").\n.output Answer", "completions": [".decl In_hiding(Person:symbol, From_country:symbol)\nIn_hiding(\"Edward Snowden\", \"United States\").\n.decl Answer()\nAnswer() :- In_hiding(\"Edward Snowden\", \"United States\").\n.output Answer"]}
{"id": 1865, "answer": true, "completion": ".decl Competes_with(Entity_A:symbol, Entity_B:symbol)\nCompetes_with(\"Leafhoppers\", \"plants\").\nCompetes_with(\"Log Cabin syrup producers\", \"plants\").\n.decl Answer()\nAnswer() :- Competes_with(\"Leafhoppers\", resource), Competes_with(\"Log Cabin syrup producers\", resource).\n.output Answer", "completions": [".decl Competes_with(Entity_A:symbol, Entity_B:symbol)\nCompetes_with(\"Leafhoppers\", \"plants\").\nCompetes_with(\"Log Cabin syrup producers\", \"plants\").\n.decl Answer()\nAnswer() :- Competes_with(\"Leafhoppers\", resource), Competes_with(\"Log Cabin syrup producers\", resource).\n.output Answer"]}
{"id": 1866, "answer": true, "completion": ".decl Associated_with(Condition:symbol, Factor:symbol)\nAssociated_with(\"euphoria\", \"drug use\").\nAssociated_with(\"drug addiction\", \"drug use\").\n.decl Answer()\nAnswer() :- Associated_with(\"euphoria\", factor), Associated_with(\"drug addiction\", factor).\n.output Answer", "completions": [".decl Associated_with(Condition:symbol, Factor:symbol)\nAssociated_with(\"euphoria\", \"drug use\").\nAssociated_with(\"drug addiction\", \"drug use\").\n.decl Answer()\nAnswer() :- Associated_with(\"euphoria\", factor), Associated_with(\"drug addiction\", factor).\n.output Answer"]}
{"id": 1867, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Anthony Quinn\", 13).\nHas_n_children(\"J.D. Salinger\", 2).\n.decl Answer()\nAnswer() :- Has_n_children(\"Anthony Quinn\", n_children1), Has_n_children(\"J.D. Salinger\", n_children2), n_children1 > n_children2.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Anthony Quinn\", 13).\nHas_n_children(\"J.D. Salinger\", 2).\n.decl Answer()\nAnswer() :- Has_n_children(\"Anthony Quinn\", n_children1), Has_n_children(\"J.D. Salinger\", n_children2), n_children1 > n_children2.\n.output Answer"]}
{"id": 1868, "answer": true, "completion": ".decl Was_lucrative(Activity:symbol, Person:symbol)\nWas_lucrative(\"proofreading\", \"Edgar Allan Poe\").\n.decl Was_poor(Person:symbol)\nWas_poor(\"Edgar Allan Poe\").\n.decl Answer()\nAnswer() :- Was_lucrative(activity, \"Edgar Allan Poe\"), !Was_poor(\"Edgar Allan Poe\").\nAnswer() :- !Was_lucrative(activity, \"Edgar Allan Poe\"), Was_poor(\"Edgar Allan Poe\").\n.output Answer", "completions": [".decl Was_lucrative(Activity:symbol, Person:symbol)\nWas_lucrative(\"proofreading\", \"Edgar Allan Poe\").\n.decl Was_poor(Person:symbol)\nWas_poor(\"Edgar Allan Poe\").\n.decl Answer()\nAnswer() :- Was_lucrative(activity, \"Edgar Allan Poe\"), !Was_poor(\"Edgar Allan Poe\").\nAnswer() :- !Was_lucrative(activity, \"Edgar Allan Poe\"), Was_poor(\"Edgar Allan Poe\").\n.output Answer"]}
{"id": 1869, "answer": true, "completion": ".decl Captures_with_gear(Person:symbol, Creature:symbol, Gear:symbol)\nCaptures_with_gear(\"person\", \"giant squid\", \"submersible\").\nCaptures_with_gear(\"person\", \"giant squid\", \"deep-sea camera\").\n.decl Captures_without_gear(Person:symbol, Creature:symbol)\nCaptures_without_gear(person, \"giant squid\") :- !Captures_with_gear(person, \"giant squid\", _).\n.decl Answer()\nAnswer() :- Captures_without_gear(\"person\", \"giant squid\").\n.output Answer", "completions": [".decl Captures_with_gear(Person:symbol, Creature:symbol, Gear:symbol)\nCaptures_with_gear(\"person\", \"giant squid\", \"submersible\").\nCaptures_with_gear(\"person\", \"giant squid\", \"deep-sea camera\").\n.decl Captures_without_gear(Person:symbol, Creature:symbol)\nCaptures_without_gear(person, \"giant squid\") :- !Captures_with_gear(person, \"giant squid\", _).\n.decl Answer()\nAnswer() :- Captures_without_gear(\"person\", \"giant squid\").\n.output Answer"]}
{"id": 1870, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"author of Little Women\", 1832).\n.decl Ratified_in_year(Amendment:symbol, Ratification_year:float)\nRatified_in_year(\"13th Amendment\", 1865).\n.decl Answer()\nAnswer() :- Born_in_year(\"author of Little Women\", birth_year), Ratified_in_year(\"13th Amendment\", ratification_year), birth_year < ratification_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"author of Little Women\", 1832).\n.decl Ratified_in_year(Amendment:symbol, Ratification_year:float)\nRatified_in_year(\"13th Amendment\", 1865).\n.decl Answer()\nAnswer() :- Born_in_year(\"author of Little Women\", birth_year), Ratified_in_year(\"13th Amendment\", ratification_year), birth_year < ratification_year.\n.output Answer"]}
{"id": 1871, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Eric Clapton\", 5).\n.decl Regulation_game(N_players:float)\nRegulation_game(10).\n.decl Answer()\nAnswer() :- Has_n_children(\"Eric Clapton\", n_children), Regulation_game(n_players), n_children >= n_players.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Eric Clapton\", 5).\n.decl Regulation_game(N_players:float)\nRegulation_game(10).\n.decl Answer()\nAnswer() :- Has_n_children(\"Eric Clapton\", n_children), Regulation_game(n_players), n_children >= n_players.\n.output Answer"]}
{"id": 1872, "answer": false, "completion": ".decl Has_n_projects(Series:symbol, N_projects:float)\nHas_n_projects(\"Dragon Ball\", 20).\nHas_n_projects(\"Friday 13th\", 12).\n.decl Answer()\nAnswer() :- Has_n_projects(\"Dragon Ball\", n_projects1), Has_n_projects(\"Friday 13th\", n_projects2), n_projects1 < n_projects2.\n.output Answer", "completions": [".decl Has_n_projects(Series:symbol, N_projects:float)\nHas_n_projects(\"Dragon Ball\", 20).\nHas_n_projects(\"Friday 13th\", 12).\n.decl Answer()\nAnswer() :- Has_n_projects(\"Dragon Ball\", n_projects1), Has_n_projects(\"Friday 13th\", n_projects2), n_projects1 < n_projects2.\n.output Answer"]}
{"id": 1873, "answer": false, "completion": ".decl Contains_vitamin_c(Food:symbol)\nContains_vitamin_c(\"lemonade\").\n.decl Answer()\nAnswer() :- Contains_vitamin_c(\"lemonade\").\n.output Answer", "completions": [".decl Contains_vitamin_c(Food:symbol)\nContains_vitamin_c(\"lemonade\").\n.decl Answer()\nAnswer() :- Contains_vitamin_c(\"lemonade\").\n.output Answer"]}
{"id": 1874, "answer": true, "completion": ".decl Produces_silk(Species:symbol)\nProduces_silk(\"Bombyx mori\").\nProduces_silk(\"Antheraea pernyi\").\nProduces_silk(\"Samia cynthia\").\nProduces_silk(\"Antheraea mylitta\").\n.decl Answer()\nAnswer() :- Produces_silk(\"Bombyx mori\"), !Produces_silk(species), species != \"Bombyx mori\".\n.output Answer", "completions": [".decl Produces_silk(Species:symbol)\nProduces_silk(\"Bombyx mori\").\nProduces_silk(\"Antheraea pernyi\").\nProduces_silk(\"Samia cynthia\").\nProduces_silk(\"Antheraea mylitta\").\n.decl Answer()\nAnswer() :- Produces_silk(\"Bombyx mori\"), !Produces_silk(species), species != \"Bombyx mori\".\n.output Answer"]}
{"id": 1875, "answer": true, "completion": ".decl Crew_of_mission(Mission:symbol, Crew:symbol)\nCrew_of_mission(\"Apollo 15\", \"David Scott\").\nCrew_of_mission(\"Apollo 15\", \"James Irwin\").\nCrew_of_mission(\"Apollo 15\", \"Alfred Worden\").\n\n.decl Took_pictures_of(Object:symbol, Location:symbol)\nTook_pictures_of(\"Mars Rover Curiosity\", \"Mount Sharp\").\n\n.decl Answer()\nAnswer() :- Crew_of_mission(\"Apollo 15\", crew_member), Took_pictures_of(crew_member, \"Mount Sharp\").\n.output Answer", "completions": [".decl Crew_of_mission(Mission:symbol, Crew:symbol)\nCrew_of_mission(\"Apollo 15\", \"David Scott\").\nCrew_of_mission(\"Apollo 15\", \"James Irwin\").\nCrew_of_mission(\"Apollo 15\", \"Alfred Worden\").\n\n.decl Took_pictures_of(Object:symbol, Location:symbol)\nTook_pictures_of(\"Mars Rover Curiosity\", \"Mount Sharp\").\n\n.decl Answer()\nAnswer() :- Crew_of_mission(\"Apollo 15\", crew_member), Took_pictures_of(crew_member, \"Mount Sharp\").\n.output Answer"]}
{"id": 1876, "answer": true, "completion": ".decl Provides_bags(Store:symbol, Provides:float)\nProvides_bags(\"Aldi\", 0).\n.decl Answer()\nAnswer() :- Provides_bags(\"Aldi\", provides), provides = 0.\n.output Answer", "completions": [".decl Provides_bags(Store:symbol, Provides:float)\nProvides_bags(\"Aldi\", 0).\n.decl Answer()\nAnswer() :- Provides_bags(\"Aldi\", provides), provides = 0.\n.output Answer"]}
{"id": 1877, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Porsche 992 Turbo S\", 100).\nHas_speed(\"Usain Bolt\", 37.58).\n.decl Answer()\nAnswer() :- Has_speed(\"Porsche 992 Turbo S\", speed1), Has_speed(\"Usain Bolt\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Porsche 992 Turbo S\", 100).\nHas_speed(\"Usain Bolt\", 37.58).\n.decl Answer()\nAnswer() :- Has_speed(\"Porsche 992 Turbo S\", speed1), Has_speed(\"Usain Bolt\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 1878, "answer": true, "completion": ".decl Is_good_for(Object:symbol, Purpose:symbol)\nIs_good_for(\"curling broom\", \"curling\").\nIs_good_for(\"house broom\", \"house floors\").\n.decl Answer()\nAnswer() :- Is_good_for(\"curling broom\", \"house floors\").\nAnswer() :- Is_good_for(\"curling broom\", purpose1), Is_good_for(\"house broom\", purpose2), purpose1 = purpose2.\n.output Answer", "completions": [".decl Is_good_for(Object:symbol, Purpose:symbol)\nIs_good_for(\"curling broom\", \"curling\").\nIs_good_for(\"house broom\", \"house floors\").\n.decl Answer()\nAnswer() :- Is_good_for(\"curling broom\", \"house floors\").\nAnswer() :- Is_good_for(\"curling broom\", purpose1), Is_good_for(\"house broom\", purpose2), purpose1 = purpose2.\n.output Answer"]}
{"id": 1879, "answer": true, "completion": ".decl Has_lip_piercing(Person:symbol)\nHas_lip_piercing(\"Alice\").\nHas_lip_piercing(\"Bob\").\n\n.decl Has_expensive_dental_bills(Person:symbol)\nHas_expensive_dental_bills(\"Alice\").\nHas_expensive_dental_bills(\"Charlie\").\n\n.decl Answer()\nAnswer() :- Has_lip_piercing(person1), Has_expensive_dental_bills(person1).\n.output Answer", "completions": [".decl Has_lip_piercing(Person:symbol)\nHas_lip_piercing(\"Alice\").\nHas_lip_piercing(\"Bob\").\n\n.decl Has_expensive_dental_bills(Person:symbol)\nHas_expensive_dental_bills(\"Alice\").\nHas_expensive_dental_bills(\"Charlie\").\n\n.decl Answer()\nAnswer() :- Has_lip_piercing(person1), Has_expensive_dental_bills(person1).\n.output Answer"]}
{"id": 1880, "answer": false, "completion": ".decl Has_genre(Artist:symbol, Genre:symbol, Time_period:symbol)\nHas_genre(\"ABBA\", \"pop\", \"1970s\").\n.decl Relevant_today(Genre:symbol)\nRelevant_today(\"pop\").\n.decl Answer()\nAnswer() :- Has_genre(\"ABBA\", genre, \"1970s\"), Relevant_today(genre).\n.output Answer", "completions": [".decl Has_genre(Artist:symbol, Genre:symbol, Time_period:symbol)\nHas_genre(\"ABBA\", \"pop\", \"1970s\").\n.decl Relevant_today(Genre:symbol)\nRelevant_today(\"pop\").\n.decl Answer()\nAnswer() :- Has_genre(\"ABBA\", genre, \"1970s\"), Relevant_today(genre).\n.output Answer"]}
{"id": 1881, "answer": true, "completion": ".decl Influential_to_killers(Work:symbol)\nInfluential_to_killers(\"The Catcher in the Rye\").\n.decl Most_successful_work(Author:symbol, Work:symbol)\nMost_successful_work(\"J.D. Salinger\", \"The Catcher in the Rye\").\n.decl Answer()\nAnswer() :- Most_successful_work(\"J.D. Salinger\", work), Influential_to_killers(work).\n.output Answer", "completions": [".decl Influential_to_killers(Work:symbol)\nInfluential_to_killers(\"The Catcher in the Rye\").\n.decl Most_successful_work(Author:symbol, Work:symbol)\nMost_successful_work(\"J.D. Salinger\", \"The Catcher in the Rye\").\n.decl Answer()\nAnswer() :- Most_successful_work(\"J.D. Salinger\", work), Influential_to_killers(work).\n.output Answer"]}
{"id": 1882, "answer": true, "completion": ".decl Uses_milk_substitute(Person:symbol, Dish:symbol)\nUses_milk_substitute(\"Cyndi Lauper\", \"rice pudding\").\n.decl Answer()\nAnswer() :- Uses_milk_substitute(\"Cyndi Lauper\", \"rice pudding\").\n.output Answer", "completions": [".decl Uses_milk_substitute(Person:symbol, Dish:symbol)\nUses_milk_substitute(\"Cyndi Lauper\", \"rice pudding\").\n.decl Answer()\nAnswer() :- Uses_milk_substitute(\"Cyndi Lauper\", \"rice pudding\").\n.output Answer"]}
{"id": 1883, "answer": false, "completion": ".decl Is_mollusk(Animal:symbol)\nIs_mollusk(\"snail\").\nIs_mollusk(\"squid\").\nIs_mollusk(\"octopus\").\nIs_mollusk(\"clam\").\nIs_mollusk(\"mussel\").\nIs_mollusk(\"oyster\").\nIs_mollusk(\"scallop\").\nIs_mollusk(\"slug\").\n\n.decl On_Chinese_New_Year_calendar(Animal:symbol)\nOn_Chinese_New_Year_calendar(\"rat\").\nOn_Chinese_New_Year_calendar(\"ox\").\nOn_Chinese_New_Year_calendar(\"tiger\").\nOn_Chinese_New_Year_calendar(\"rabbit\").\nOn_Chinese_New_Year_calendar(\"dragon\").\nOn_Chinese_New_Year_calendar(\"snake\").\nOn_Chinese_New_Year_calendar(\"horse\").\nOn_Chinese_New_Year_calendar(\"goat\").\nOn_Chinese_New_Year_calendar(\"monkey\").\nOn_Chinese_New_Year_calendar(\"rooster\").\nOn_Chinese_New_Year_calendar(\"dog\").\nOn_Chinese_New_Year_calendar(\"pig\").\n\n.decl Answer()\nAnswer() :- Is_mollusk(animal), On_Chinese_New_Year_calendar(animal).\n.output Answer", "completions": [".decl Is_mollusk(Animal:symbol)\nIs_mollusk(\"snail\").\nIs_mollusk(\"squid\").\nIs_mollusk(\"octopus\").\nIs_mollusk(\"clam\").\nIs_mollusk(\"mussel\").\nIs_mollusk(\"oyster\").\nIs_mollusk(\"scallop\").\nIs_mollusk(\"slug\").\n\n.decl On_Chinese_New_Year_calendar(Animal:symbol)\nOn_Chinese_New_Year_calendar(\"rat\").\nOn_Chinese_New_Year_calendar(\"ox\").\nOn_Chinese_New_Year_calendar(\"tiger\").\nOn_Chinese_New_Year_calendar(\"rabbit\").\nOn_Chinese_New_Year_calendar(\"dragon\").\nOn_Chinese_New_Year_calendar(\"snake\").\nOn_Chinese_New_Year_calendar(\"horse\").\nOn_Chinese_New_Year_calendar(\"goat\").\nOn_Chinese_New_Year_calendar(\"monkey\").\nOn_Chinese_New_Year_calendar(\"rooster\").\nOn_Chinese_New_Year_calendar(\"dog\").\nOn_Chinese_New_Year_calendar(\"pig\").\n\n.decl Answer()\nAnswer() :- Is_mollusk(animal), On_Chinese_New_Year_calendar(animal).\n.output Answer"]}
{"id": 1884, "answer": true, "completion": ".decl Present_at_death(Person:symbol, Dead_person:symbol)\nPresent_at_death(\"Gandalf\", \"Eomer\").\n.decl Answer()\nAnswer() :- Present_at_death(\"Gandalf\", \"Eomer\").\n.output Answer", "completions": [".decl Present_at_death(Person:symbol, Dead_person:symbol)\nPresent_at_death(\"Gandalf\", \"Eomer\").\n.decl Answer()\nAnswer() :- Present_at_death(\"Gandalf\", \"Eomer\").\n.output Answer"]}
{"id": 1885, "answer": true, "completion": ".decl Has_orbit_duration(Planet:symbol, Duration:float)\nHas_orbit_duration(\"Neptune\", 165).\n.decl Has_time_between_events(Event:symbol, Time:float)\nHas_time_between_events(\"first two burials of women in the Panthéon\", 2).\n.decl Answer()\nAnswer() :- Has_orbit_duration(\"Neptune\", duration), Has_time_between_events(\"first two burials of women in the Panthéon\", time), duration <= time.\n.output Answer", "completions": [".decl Has_orbit_duration(Planet:symbol, Duration:float)\nHas_orbit_duration(\"Neptune\", 165).\n.decl Has_time_between_events(Event:symbol, Time:float)\nHas_time_between_events(\"first two burials of women in the Panthéon\", 2).\n.decl Answer()\nAnswer() :- Has_orbit_duration(\"Neptune\", duration), Has_time_between_events(\"first two burials of women in the Panthéon\", time), duration <= time.\n.output Answer"]}
{"id": 1886, "answer": false, "completion": ".decl Has_prevalence(Disease:symbol, Prevalence:float)\nHas_prevalence(\"bipolar disorder\", 0.027).\nHas_prevalence(\"diabetes\", 0.095).\n.decl Answer()\nAnswer() :- Has_prevalence(\"bipolar disorder\", prevalence1), Has_prevalence(\"diabetes\", prevalence2), prevalence1 > prevalence2.\n.output Answer", "completions": [".decl Has_prevalence(Disease:symbol, Prevalence:float)\nHas_prevalence(\"bipolar disorder\", 0.027).\nHas_prevalence(\"diabetes\", 0.095).\n.decl Answer()\nAnswer() :- Has_prevalence(\"bipolar disorder\", prevalence1), Has_prevalence(\"diabetes\", prevalence2), prevalence1 > prevalence2.\n.output Answer"]}
{"id": 1887, "answer": true, "completion": ".decl Has_seating_capacity(Vehicle:symbol, Capacity:float)\nHas_seating_capacity(\"Audi TT\", 4).\n.decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Stone Cold Steve Austin\", 3).\n.decl Answer()\nAnswer() :- Has_seating_capacity(\"Audi TT\", capacity), Has_n_wives(\"Stone Cold Steve Austin\", n_wives), n_wives <= capacity.\n.output Answer", "completions": [".decl Has_seating_capacity(Vehicle:symbol, Capacity:float)\nHas_seating_capacity(\"Audi TT\", 4).\n.decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Stone Cold Steve Austin\", 3).\n.decl Answer()\nAnswer() :- Has_seating_capacity(\"Audi TT\", capacity), Has_n_wives(\"Stone Cold Steve Austin\", n_wives), n_wives <= capacity.\n.output Answer"]}
{"id": 1888, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Six-Day War\", 6).\n.decl Takes_n_days(Event:symbol, N_days:float)\nTakes_n_days(\"NBA game\", 0.00694). // NBA game lasts around 2.5 hours, which is approximately 0.00694 days\n.decl Answer()\nAnswer() :- Takes_n_days(\"NBA game\", n_days1), Last_n_days(\"Six-Day War\", n_days2), n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Six-Day War\", 6).\n.decl Takes_n_days(Event:symbol, N_days:float)\nTakes_n_days(\"NBA game\", 0.00694). // NBA game lasts around 2.5 hours, which is approximately 0.00694 days\n.decl Answer()\nAnswer() :- Takes_n_days(\"NBA game\", n_days1), Last_n_days(\"Six-Day War\", n_days2), n_days1 <= n_days2.\n.output Answer"]}
{"id": 1889, "answer": false, "completion": ".decl Has_flown(Person:symbol, Destination:symbol)\n.decl Is_in_continent(Country:symbol, Continent:symbol)\nIs_in_continent(\"Russia\", \"Europe\").\n.decl Lived_in(Person:symbol, Country:symbol)\nLived_in(\"Ivan the Terrible\", \"Russia\").\n.decl Answer()\nAnswer() :- Has_flown(\"Ivan the Terrible\", destination), Lived_in(\"Ivan the Terrible\", country), Is_in_continent(country, \"Europe\"), Is_in_continent(destination, \"Europe\").\n.output Answer", "completions": [".decl Has_flown(Person:symbol, Destination:symbol)\n.decl Is_in_continent(Country:symbol, Continent:symbol)\nIs_in_continent(\"Russia\", \"Europe\").\n.decl Lived_in(Person:symbol, Country:symbol)\nLived_in(\"Ivan the Terrible\", \"Russia\").\n.decl Answer()\nAnswer() :- Has_flown(\"Ivan the Terrible\", destination), Lived_in(\"Ivan the Terrible\", country), Is_in_continent(country, \"Europe\"), Is_in_continent(destination, \"Europe\").\n.output Answer"]}
{"id": 1890, "answer": true, "completion": ".decl Has_item(Book:symbol, Item:symbol)\nHas_item(\"TMNT coloring book\", \"Teenage Mutant Ninja Turtles\").\nHas_item(\"Teenage Mutant Ninja Turtles\", \"pizza\").\n.decl Answer()\nAnswer() :- Has_item(\"TMNT coloring book\", item), Has_item(item, \"pizza\").\n.output Answer", "completions": [".decl Has_item(Book:symbol, Item:symbol)\nHas_item(\"TMNT coloring book\", \"Teenage Mutant Ninja Turtles\").\nHas_item(\"Teenage Mutant Ninja Turtles\", \"pizza\").\n.decl Answer()\nAnswer() :- Has_item(\"TMNT coloring book\", item), Has_item(item, \"pizza\").\n.output Answer"]}
{"id": 1891, "answer": false, "completion": ".decl Explains(Theory:symbol, Phenomenon:symbol)\nExplains(\"theory of cultural hegemony\", \"social inequality\").\nExplains(\"greenhouse gas emissions\", \"global warming\").\n.decl Answer()\nAnswer() :- Explains(\"theory of cultural hegemony\", \"global warming\").\n.output Answer", "completions": [".decl Explains(Theory:symbol, Phenomenon:symbol)\nExplains(\"theory of cultural hegemony\", \"social inequality\").\nExplains(\"greenhouse gas emissions\", \"global warming\").\n.decl Answer()\nAnswer() :- Explains(\"theory of cultural hegemony\", \"global warming\").\n.output Answer"]}
{"id": 1892, "answer": false, "completion": ".decl Used_at_location(Object:symbol, Location:symbol)\nUsed_at_location(\"kayak\", \"river\").\nUsed_at_location(\"kayak\", \"lake\").\nUsed_at_location(\"kayak\", \"ocean\").\n.decl Is_location(Location:symbol, Type:symbol)\nIs_location(\"summit of Mount Everest\", \"mountain\").\n.decl Answer()\nAnswer() :- Used_at_location(\"kayak\", location), Is_location(location, \"mountain\").\n.output Answer", "completions": [".decl Used_at_location(Object:symbol, Location:symbol)\nUsed_at_location(\"kayak\", \"river\").\nUsed_at_location(\"kayak\", \"lake\").\nUsed_at_location(\"kayak\", \"ocean\").\n.decl Is_location(Location:symbol, Type:symbol)\nIs_location(\"summit of Mount Everest\", \"mountain\").\n.decl Answer()\nAnswer() :- Used_at_location(\"kayak\", location), Is_location(location, \"mountain\").\n.output Answer"]}
{"id": 1893, "answer": true, "completion": ".decl Celebrated_on_day(Event:symbol, Day:symbol)\nCelebrated_on_day(\"Christmas\", \"Sunday\").\n.decl Answer()\nAnswer() :- Celebrated_on_day(\"Christmas\", \"Sunday\").\nAnswer() :- !Celebrated_on_day(\"Christmas\", \"Monday\").\nAnswer() :- !Celebrated_on_day(\"Christmas\", \"Tuesday\").\nAnswer() :- !Celebrated_on_day(\"Christmas\", \"Wednesday\").\nAnswer() :- !Celebrated_on_day(\"Christmas\", \"Thursday\").\nAnswer() :- !Celebrated_on_day(\"Christmas\", \"Friday\").\nAnswer() :- !Celebrated_on_day(\"Christmas\", \"Saturday\").\n.output Answer", "completions": [".decl Celebrated_on_day(Event:symbol, Day:symbol)\nCelebrated_on_day(\"Christmas\", \"Sunday\").\n.decl Answer()\nAnswer() :- Celebrated_on_day(\"Christmas\", \"Sunday\").\nAnswer() :- !Celebrated_on_day(\"Christmas\", \"Monday\").\nAnswer() :- !Celebrated_on_day(\"Christmas\", \"Tuesday\").\nAnswer() :- !Celebrated_on_day(\"Christmas\", \"Wednesday\").\nAnswer() :- !Celebrated_on_day(\"Christmas\", \"Thursday\").\nAnswer() :- !Celebrated_on_day(\"Christmas\", \"Friday\").\nAnswer() :- !Celebrated_on_day(\"Christmas\", \"Saturday\").\n.output Answer"]}
{"id": 1894, "answer": false, "completion": ".decl Is_liquid(Object:symbol)\nIs_liquid(\"water\").\n.decl Is_in_performance(Performance:symbol, Object:symbol)\nIs_in_performance(\"Swan Lake\", \"water\").\n.decl Can_drown_in(Object:symbol)\nCan_drown_in(\"water\").\n.decl Answer()\nAnswer() :- Is_in_performance(\"Swan Lake\", object), Is_liquid(object), Can_drown_in(object).\n.output Answer", "completions": [".decl Is_liquid(Object:symbol)\nIs_liquid(\"water\").\n.decl Is_in_performance(Performance:symbol, Object:symbol)\nIs_in_performance(\"Swan Lake\", \"water\").\n.decl Can_drown_in(Object:symbol)\nCan_drown_in(\"water\").\n.decl Answer()\nAnswer() :- Is_in_performance(\"Swan Lake\", object), Is_liquid(object), Can_drown_in(object).\n.output Answer"]}
{"id": 1895, "answer": true, "completion": ".decl Has_nationality(Band:symbol, Nationality:symbol)\nHas_nationality(\"System of a Down\", \"Armenian\").\n.decl Tends_to_dislike(Nationality:symbol, Band:symbol)\n.decl Answer()\nAnswer() :- Tends_to_dislike(\"Armenian\", \"System of a Down\").\nAnswer() :- !Tends_to_dislike(\"Armenian\", \"System of a Down\"), Has_nationality(\"System of a Down\", \"Armenian\").\n.output Answer", "completions": [".decl Has_nationality(Band:symbol, Nationality:symbol)\nHas_nationality(\"System of a Down\", \"Armenian\").\n.decl Tends_to_dislike(Nationality:symbol, Band:symbol)\n.decl Answer()\nAnswer() :- Tends_to_dislike(\"Armenian\", \"System of a Down\").\nAnswer() :- !Tends_to_dislike(\"Armenian\", \"System of a Down\"), Has_nationality(\"System of a Down\", \"Armenian\").\n.output Answer"]}
{"id": 1896, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Powerpuff Girls\", 3).\n.decl Needed_for_tag_team(N_members:float)\nNeeded_for_tag_team(4).\n.decl Answer()\nAnswer() :- Has_n_members(\"Powerpuff Girls\", n_members), Needed_for_tag_team(needed_members), n_members >= needed_members.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Powerpuff Girls\", 3).\n.decl Needed_for_tag_team(N_members:float)\nNeeded_for_tag_team(4).\n.decl Answer()\nAnswer() :- Has_n_members(\"Powerpuff Girls\", n_members), Needed_for_tag_team(needed_members), n_members >= needed_members.\n.output Answer"]}
{"id": 1897, "answer": true, "completion": ".decl Has_songs(Platform:symbol, N_songs:float)\nHas_songs(\"iTunes\", 60000000).\n.decl Song_length_seconds(Length:float)\nSong_length_seconds(180).\n.decl Seconds_in_year(Seconds:float)\nSeconds_in_year(31536000).\n.decl Answer()\nAnswer() :- Has_songs(\"iTunes\", n_songs), Song_length_seconds(song_length), Seconds_in_year(seconds_in_year), n_songs * song_length <= seconds_in_year.\n.output Answer", "completions": [".decl Has_songs(Platform:symbol, N_songs:float)\nHas_songs(\"iTunes\", 60000000).\n.decl Song_length_seconds(Length:float)\nSong_length_seconds(180).\n.decl Seconds_in_year(Seconds:float)\nSeconds_in_year(31536000).\n.decl Answer()\nAnswer() :- Has_songs(\"iTunes\", n_songs), Song_length_seconds(song_length), Seconds_in_year(seconds_in_year), n_songs * song_length <= seconds_in_year.\n.output Answer"]}
{"id": 1898, "answer": true, "completion": ".decl Wrote_music(Artist:symbol, Genre:symbol)\nWrote_music(\"The Beatles\", \"Rock\").\nWrote_music(\"The Beatles\", \"Pop\").\n.decl Answer()\nAnswer() :- Wrote_music(\"The Beatles\", \"Disco\").\n.output Answer", "completions": [".decl Wrote_music(Artist:symbol, Genre:symbol)\nWrote_music(\"The Beatles\", \"Rock\").\nWrote_music(\"The Beatles\", \"Pop\").\n.decl Answer()\nAnswer() :- Wrote_music(\"The Beatles\", \"Disco\").\n.output Answer"]}
{"id": 1899, "answer": true, "completion": ".decl Is_groundbreaking(Game:symbol, Feature:symbol)\nIs_groundbreaking(\"Metroid\", \"nonlinear gameplay\").\nIs_groundbreaking(\"Metroid\", \"female protagonist\").\n.decl Has_polygons(Game:symbol)\nHas_polygons(\"Super Mario 64\").\n.decl Answer()\nAnswer() :- Is_groundbreaking(\"Metroid\", \"polygons\").\nAnswer() :- Is_groundbreaking(\"Metroid\", feature), Has_polygons(\"Metroid\"), feature != \"polygons\".\n.output Answer", "completions": [".decl Is_groundbreaking(Game:symbol, Feature:symbol)\nIs_groundbreaking(\"Metroid\", \"nonlinear gameplay\").\nIs_groundbreaking(\"Metroid\", \"female protagonist\").\n.decl Has_polygons(Game:symbol)\nHas_polygons(\"Super Mario 64\").\n.decl Answer()\nAnswer() :- Is_groundbreaking(\"Metroid\", \"polygons\").\nAnswer() :- Is_groundbreaking(\"Metroid\", feature), Has_polygons(\"Metroid\"), feature != \"polygons\".\n.output Answer"]}
{"id": 1900, "answer": true, "completion": ".decl Has_angerness_level(Animal:symbol, Angerness_level:float)\nHas_angerness_level(\"koala\", 8).\nHas_angerness_level(\"black swan\", 5).\n.decl Answer()\nAnswer() :- Has_angerness_level(\"koala\", angerness1), Has_angerness_level(\"black swan\", angerness2), angerness1 > angerness2.\n.output Answer", "completions": [".decl Has_angerness_level(Animal:symbol, Angerness_level:float)\nHas_angerness_level(\"koala\", 8).\nHas_angerness_level(\"black swan\", 5).\n.decl Answer()\nAnswer() :- Has_angerness_level(\"koala\", angerness1), Has_angerness_level(\"black swan\", angerness2), angerness1 > angerness2.\n.output Answer"]}
{"id": 1901, "answer": false, "completion": ".decl Is_good_at_math(Person:symbol, Skill_level:symbol)\nIs_good_at_math(\"Hodor\", \"low\").\n.decl Answer()\nAnswer() :- Is_good_at_math(\"Hodor\", \"high\").\nAnswer() :- !Is_good_at_math(\"Hodor\", \"low\").\n.output Answer", "completions": [".decl Is_good_at_math(Person:symbol, Skill_level:symbol)\nIs_good_at_math(\"Hodor\", \"low\").\n.decl Answer()\nAnswer() :- Is_good_at_math(\"Hodor\", \"high\").\nAnswer() :- !Is_good_at_math(\"Hodor\", \"low\").\n.output Answer"]}
{"id": 1902, "answer": false, "completion": ".decl Plays_role(Actor:symbol, Role:symbol, Movie:symbol)\nPlays_role(\"Keith Richards\", \"Captain Teague\", \"Pirates of the Caribbean\").\n.decl Is_captain_of_boat(Role:symbol)\nIs_captain_of_boat(\"Captain Teague\").\n.decl Answer()\nAnswer() :- Plays_role(\"Keith Richards\", role, movie), Is_captain_of_boat(role).\n.output Answer", "completions": [".decl Plays_role(Actor:symbol, Role:symbol, Movie:symbol)\nPlays_role(\"Keith Richards\", \"Captain Teague\", \"Pirates of the Caribbean\").\n.decl Is_captain_of_boat(Role:symbol)\nIs_captain_of_boat(\"Captain Teague\").\n.decl Answer()\nAnswer() :- Plays_role(\"Keith Richards\", role, movie), Is_captain_of_boat(role).\n.output Answer"]}
{"id": 1903, "answer": true, "completion": ".decl Has_rivalry(God_A:symbol, God_B:symbol)\nHas_rivalry(\"Ahura Mazda\", \"Ahriman\").\nHas_rivalry(\"Zeus\", \"Titans\").\n.decl Answer()\nAnswer() :- Has_rivalry(\"Ahura Mazda\", \"Zeus\").\nAnswer() :- Has_rivalry(\"Zeus\", \"Ahura Mazda\").\n.output Answer", "completions": [".decl Has_rivalry(God_A:symbol, God_B:symbol)\nHas_rivalry(\"Ahura Mazda\", \"Ahriman\").\nHas_rivalry(\"Zeus\", \"Titans\").\n.decl Answer()\nAnswer() :- Has_rivalry(\"Ahura Mazda\", \"Zeus\").\nAnswer() :- Has_rivalry(\"Zeus\", \"Ahura Mazda\").\n.output Answer"]}
{"id": 1904, "answer": true, "completion": ".decl Has_seating_capacity(Vehicle:symbol, Capacity:float)\nHas_seating_capacity(\"Tata Hexa\", 6).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_seating_capacity(\"Tata Hexa\", capacity), Has_n_members(\"Spice Girls\", n_members), capacity >= n_members.\n.output Answer", "completions": [".decl Has_seating_capacity(Vehicle:symbol, Capacity:float)\nHas_seating_capacity(\"Tata Hexa\", 6).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_seating_capacity(\"Tata Hexa\", capacity), Has_n_members(\"Spice Girls\", n_members), capacity >= n_members.\n.output Answer"]}
{"id": 1905, "answer": false, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"University of Pittsburgh founder\", \"educator\").\nHas_profession(\"Judith Sheindlin\", \"judge\").\n.decl Has_common_profession(Person1:symbol, Person2:symbol)\nHas_common_profession(person1, person2) :- Has_profession(person1, profession), Has_profession(person2, profession).\n.decl Answer()\nAnswer() :- Has_common_profession(\"University of Pittsburgh founder\", \"Judith Sheindlin\").\n.output Answer", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"University of Pittsburgh founder\", \"educator\").\nHas_profession(\"Judith Sheindlin\", \"judge\").\n.decl Has_common_profession(Person1:symbol, Person2:symbol)\nHas_common_profession(person1, person2) :- Has_profession(person1, profession), Has_profession(person2, profession).\n.decl Answer()\nAnswer() :- Has_common_profession(\"University of Pittsburgh founder\", \"Judith Sheindlin\").\n.output Answer"]}
{"id": 1906, "answer": true, "completion": ".decl Is_vehicle(Object:symbol)\nIs_vehicle(\"Toyota Supra\").\n.decl Can_make_vlog(Object:symbol)\nCan_make_vlog(\"human\").\n.decl Answer()\nAnswer() :- Is_vehicle(object), Can_make_vlog(object).\n.output Answer", "completions": [".decl Is_vehicle(Object:symbol)\nIs_vehicle(\"Toyota Supra\").\n.decl Can_make_vlog(Object:symbol)\nCan_make_vlog(\"human\").\n.decl Answer()\nAnswer() :- Is_vehicle(object), Can_make_vlog(object).\n.output Answer"]}
{"id": 1907, "answer": false, "completion": ".decl Is_grand_master(Person:symbol)\nIs_grand_master(\"person1\").\nIs_grand_master(\"person2\").\nIs_grand_master(\"person3\").\n.decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"person1\", \"French Defense\").\nKnows_about(\"person2\", \"French Defense\").\nKnows_about(\"person3\", \"French Defense\").\n.decl Answer()\nAnswer() :- Is_grand_master(person), Knows_about(person, \"French Defense\").\n.output Answer", "completions": [".decl Is_grand_master(Person:symbol)\nIs_grand_master(\"person1\").\nIs_grand_master(\"person2\").\nIs_grand_master(\"person3\").\n.decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"person1\", \"French Defense\").\nKnows_about(\"person2\", \"French Defense\").\nKnows_about(\"person3\", \"French Defense\").\n.decl Answer()\nAnswer() :- Is_grand_master(person), Knows_about(person, \"French Defense\").\n.output Answer"]}
{"id": 1908, "answer": true, "completion": ".decl Has_relationship(Country:symbol, Relationship:symbol, Entity:symbol)\nHas_relationship(\"Canada\", \"monarchy\", \"Queen Elizabeth II\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Canada\", \"monarchy\", monarch).\n.output Answer", "completions": [".decl Has_relationship(Country:symbol, Relationship:symbol, Entity:symbol)\nHas_relationship(\"Canada\", \"monarchy\", \"Queen Elizabeth II\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Canada\", \"monarchy\", monarch).\n.output Answer"]}
{"id": 1909, "answer": true, "completion": ".decl Speaks(Language:symbol, People:symbol)\nSpeaks(\"Old English\", \"Anglo-Saxons\").\nSpeaks(\"Pictish\", \"Picts\").\n.decl Existed_in_time(People:symbol, Time_period:symbol)\nExisted_in_time(\"Anglo-Saxons\", \"Early Middle Ages\").\nExisted_in_time(\"Picts\", \"Late Antiquity\").\n.decl Overlaps(Time_period_A:symbol, Time_period_B:symbol)\nOverlaps(\"Late Antiquity\", \"Early Middle Ages\").\n.decl Answer()\nAnswer() :- Speaks(language1, \"Picts\"), Speaks(language2, \"Anglo-Saxons\"), language1 != language2, Existed_in_time(\"Picts\", time_period1), Existed_in_time(\"Anglo-Saxons\", time_period2), Overlaps(time_period1, time_period2).\n.output Answer", "completions": [".decl Speaks(Language:symbol, People:symbol)\nSpeaks(\"Old English\", \"Anglo-Saxons\").\nSpeaks(\"Pictish\", \"Picts\").\n.decl Existed_in_time(People:symbol, Time_period:symbol)\nExisted_in_time(\"Anglo-Saxons\", \"Early Middle Ages\").\nExisted_in_time(\"Picts\", \"Late Antiquity\").\n.decl Overlaps(Time_period_A:symbol, Time_period_B:symbol)\nOverlaps(\"Late Antiquity\", \"Early Middle Ages\").\n.decl Answer()\nAnswer() :- Speaks(language1, \"Picts\"), Speaks(language2, \"Anglo-Saxons\"), language1 != language2, Existed_in_time(\"Picts\", time_period1), Existed_in_time(\"Anglo-Saxons\", time_period2), Overlaps(time_period1, time_period2).\n.output Answer"]}
{"id": 1910, "answer": true, "completion": ".decl Had_event(Person:symbol, Event:symbol)\nHad_event(\"Charlemagne\", \"coronation\").\n.decl Is_event_type(Event:symbol, Type:symbol)\nIs_event_type(\"bar mitzvah\", \"Jewish\").\nIs_event_type(\"coronation\", \"Christian\").\n.decl Answer()\nAnswer() :- Had_event(\"Charlemagne\", event), Is_event_type(event, \"Jewish\").\n.output Answer", "completions": [".decl Had_event(Person:symbol, Event:symbol)\nHad_event(\"Charlemagne\", \"coronation\").\n.decl Is_event_type(Event:symbol, Type:symbol)\nIs_event_type(\"bar mitzvah\", \"Jewish\").\nIs_event_type(\"coronation\", \"Christian\").\n.decl Answer()\nAnswer() :- Had_event(\"Charlemagne\", event), Is_event_type(event, \"Jewish\").\n.output Answer"]}
{"id": 1911, "answer": false, "completion": ".decl Likes(Character:symbol, Food:symbol)\nLikes(\"Garfield\", \"lasagna\").\n.decl Is_canid_food(Food:symbol)\nIs_canid_food(\"dog food\").\n.decl Answer()\nAnswer() :- Likes(\"Garfield\", food), Is_canid_food(food).\n.output Answer", "completions": [".decl Likes(Character:symbol, Food:symbol)\nLikes(\"Garfield\", \"lasagna\").\n.decl Is_canid_food(Food:symbol)\nIs_canid_food(\"dog food\").\n.decl Answer()\nAnswer() :- Likes(\"Garfield\", food), Is_canid_food(food).\n.output Answer"]}
{"id": 1912, "answer": true, "completion": ".decl Has_armor(Person:symbol, Armor:symbol)\nHas_armor(\"Franz Ferdinand\", \"armadillo armor\").\n.decl Armor_strength(Armor:symbol, Strength:float)\nArmor_strength(\"armadillo armor\", 0.7).\n.decl Weapon_power(Weapon:symbol, Power:float)\nWeapon_power(\"assassin's bullet\", 0.9).\n.decl Survives(Person:symbol)\nSurvives(\"Franz Ferdinand\") :- Has_armor(\"Franz Ferdinand\", armor), Armor_strength(armor, strength), Weapon_power(\"assassin's bullet\", power), strength > power.\n.decl Answer()\nAnswer() :- Survives(\"Franz Ferdinand\").\n.output Answer", "completions": [".decl Has_armor(Person:symbol, Armor:symbol)\nHas_armor(\"Franz Ferdinand\", \"armadillo armor\").\n.decl Armor_strength(Armor:symbol, Strength:float)\nArmor_strength(\"armadillo armor\", 0.7).\n.decl Weapon_power(Weapon:symbol, Power:float)\nWeapon_power(\"assassin's bullet\", 0.9).\n.decl Survives(Person:symbol)\nSurvives(\"Franz Ferdinand\") :- Has_armor(\"Franz Ferdinand\", armor), Armor_strength(armor, strength), Weapon_power(\"assassin's bullet\", power), strength > power.\n.decl Answer()\nAnswer() :- Survives(\"Franz Ferdinand\").\n.output Answer"]}
{"id": 1913, "answer": false, "completion": ".decl Country_of_origin(Food:symbol, Country:symbol)\nCountry_of_origin(\"meatballs\", \"Sweden\").\n.decl Serves_in_wrong_country(Food:symbol, Restaurant_country:symbol)\nServes_in_wrong_country(\"meatballs\", \"Italy\").\n.decl Answer()\nAnswer() :- Country_of_origin(\"meatballs\", country1), Serves_in_wrong_country(\"meatballs\", restaurant_country), country1 != restaurant_country.\n.output Answer", "completions": [".decl Country_of_origin(Food:symbol, Country:symbol)\nCountry_of_origin(\"meatballs\", \"Sweden\").\n.decl Serves_in_wrong_country(Food:symbol, Restaurant_country:symbol)\nServes_in_wrong_country(\"meatballs\", \"Italy\").\n.decl Answer()\nAnswer() :- Country_of_origin(\"meatballs\", country1), Serves_in_wrong_country(\"meatballs\", restaurant_country), country1 != restaurant_country.\n.output Answer"]}
{"id": 1914, "answer": false, "completion": ".decl Has_bone(Body_part:symbol, Bone:symbol)\nHas_bone(\"torso\", \"sternum\").\nHas_bone(\"torso\", \"ribs\").\nHas_bone(\"torso\", \"vertebrae\").\n.decl Bone_size(Bone:symbol, Size:symbol)\nBone_size(\"sternum\", \"large\").\nBone_size(\"ribs\", \"medium\").\nBone_size(\"vertebrae\", \"medium\").\nBone_size(\"femur\", \"largest\").\nBone_size(\"stapes\", \"smallest\").\n.decl Answer()\nAnswer() :- Has_bone(\"torso\", bone), Bone_size(bone, \"largest\").\nAnswer() :- Has_bone(\"torso\", bone), Bone_size(bone, \"smallest\").\n.output Answer", "completions": [".decl Has_bone(Body_part:symbol, Bone:symbol)\nHas_bone(\"torso\", \"sternum\").\nHas_bone(\"torso\", \"ribs\").\nHas_bone(\"torso\", \"vertebrae\").\n.decl Bone_size(Bone:symbol, Size:symbol)\nBone_size(\"sternum\", \"large\").\nBone_size(\"ribs\", \"medium\").\nBone_size(\"vertebrae\", \"medium\").\nBone_size(\"femur\", \"largest\").\nBone_size(\"stapes\", \"smallest\").\n.decl Answer()\nAnswer() :- Has_bone(\"torso\", bone), Bone_size(bone, \"largest\").\nAnswer() :- Has_bone(\"torso\", bone), Bone_size(bone, \"smallest\").\n.output Answer"]}
{"id": 1915, "answer": true, "completion": ".decl Has_upload_speed(Provider:symbol, Speed:float)\nHas_upload_speed(\"Centurylink max internet plan\", 1000).\n.decl Time_period_in_hours(Time_period:symbol, Hours:float)\nTime_period_in_hours(\"fortnight\", 336).\n.decl Answer()\nAnswer() :- Has_upload_speed(\"Centurylink max internet plan\", speed), Time_period_in_hours(\"fortnight\", hours), speed * hours >= 1000 * 1024.\n.output Answer", "completions": [".decl Has_upload_speed(Provider:symbol, Speed:float)\nHas_upload_speed(\"Centurylink max internet plan\", 1000).\n.decl Time_period_in_hours(Time_period:symbol, Hours:float)\nTime_period_in_hours(\"fortnight\", 336).\n.decl Answer()\nAnswer() :- Has_upload_speed(\"Centurylink max internet plan\", speed), Time_period_in_hours(\"fortnight\", hours), speed * hours >= 1000 * 1024.\n.output Answer"]}
{"id": 1916, "answer": false, "completion": ".decl Wrote_book(Author:symbol, Book:symbol)\nWrote_book(\"Theodor Geisel\", \"Green Eggs and Ham\").\n.decl Has_color(Book:symbol, Color:symbol)\nHas_color(\"Green Eggs and Ham\", \"green\").\n.decl Became_famous(Person:symbol)\nBecame_famous(\"Theodor Geisel\").\n.decl Answer()\nAnswer() :- Became_famous(\"Theodor Geisel\"), Wrote_book(\"Theodor Geisel\", book), Has_color(book, \"green\").\n.output Answer", "completions": [".decl Wrote_book(Author:symbol, Book:symbol)\nWrote_book(\"Theodor Geisel\", \"Green Eggs and Ham\").\n.decl Has_color(Book:symbol, Color:symbol)\nHas_color(\"Green Eggs and Ham\", \"green\").\n.decl Became_famous(Person:symbol)\nBecame_famous(\"Theodor Geisel\").\n.decl Answer()\nAnswer() :- Became_famous(\"Theodor Geisel\"), Wrote_book(\"Theodor Geisel\", book), Has_color(book, \"green\").\n.output Answer"]}
{"id": 1917, "answer": false, "completion": ".decl Located_on_island(Location:symbol, Island:symbol)\nLocated_on_island(\"Central Park Zoo\", \"Manhattan\").\n.decl Is_island(Place:symbol)\nIs_island(\"Manhattan\").\n.decl Answer()\nAnswer() :- Located_on_island(\"Central Park Zoo\", island), Is_island(island).\n.output Answer", "completions": [".decl Located_on_island(Location:symbol, Island:symbol)\nLocated_on_island(\"Central Park Zoo\", \"Manhattan\").\n.decl Is_island(Place:symbol)\nIs_island(\"Manhattan\").\n.decl Answer()\nAnswer() :- Located_on_island(\"Central Park Zoo\", island), Is_island(island).\n.output Answer"]}
{"id": 1918, "answer": true, "completion": ".decl Provides_information(Organization:symbol, Information:symbol)\nProvides_information(\"Planned Parenthood\", \"Herpes simplex virus\").\n.decl Tells(Organization_A:symbol, Organization_B:symbol, Information:symbol)\n.decl University(University:symbol)\nUniversity(\"University\").\n.decl Answer()\nAnswer() :- Tells(\"Planned Parenthood\", \"University\", \"Herpes simplex virus\").\nAnswer() :- Provides_information(\"Planned Parenthood\", \"Herpes simplex virus\"), !Tells(\"Planned Parenthood\", \"University\", \"Herpes simplex virus\").\n.output Answer", "completions": [".decl Provides_information(Organization:symbol, Information:symbol)\nProvides_information(\"Planned Parenthood\", \"Herpes simplex virus\").\n.decl Tells(Organization_A:symbol, Organization_B:symbol, Information:symbol)\n.decl University(University:symbol)\nUniversity(\"University\").\n.decl Answer()\nAnswer() :- Tells(\"Planned Parenthood\", \"University\", \"Herpes simplex virus\").\nAnswer() :- Provides_information(\"Planned Parenthood\", \"Herpes simplex virus\"), !Tells(\"Planned Parenthood\", \"University\", \"Herpes simplex virus\").\n.output Answer"]}
{"id": 1919, "answer": false, "completion": ".decl Is_state_capital(City:symbol, State:symbol)\nIs_state_capital(\"Honolulu\", \"Hawaii\").\nIs_state_capital(\"Juneau\", \"Alaska\").\nIs_state_capital(\"Sacramento\", \"California\").\n.decl Is_territory_capital(City:symbol, Territory:symbol)\nIs_territory_capital(\"Hagåtña\", \"Guam\").\n.decl Answer()\nAnswer() :- Is_state_capital(city, \"Guam\").\nAnswer() :- Is_territory_capital(city, \"Guam\").\n.output Answer", "completions": [".decl Is_state_capital(City:symbol, State:symbol)\nIs_state_capital(\"Honolulu\", \"Hawaii\").\nIs_state_capital(\"Juneau\", \"Alaska\").\nIs_state_capital(\"Sacramento\", \"California\").\n.decl Is_territory_capital(City:symbol, Territory:symbol)\nIs_territory_capital(\"Hagåtña\", \"Guam\").\n.decl Answer()\nAnswer() :- Is_state_capital(city, \"Guam\").\nAnswer() :- Is_territory_capital(city, \"Guam\").\n.output Answer"]}
{"id": 1920, "answer": false, "completion": ".decl Is_sonnet(Poem:symbol)\nIs_sonnet(\"Jabberwocky\").\n.decl Is_poem_type(Poem:symbol, Type:symbol)\nIs_poem_type(\"Jabberwocky\", \"nonsense\").\n.decl Answer()\nAnswer() :- Is_sonnet(\"Jabberwocky\").\nAnswer() :- Is_poem_type(\"Jabberwocky\", \"sonnet\").\n.output Answer", "completions": [".decl Is_sonnet(Poem:symbol)\nIs_sonnet(\"Jabberwocky\").\n.decl Is_poem_type(Poem:symbol, Type:symbol)\nIs_poem_type(\"Jabberwocky\", \"nonsense\").\n.decl Answer()\nAnswer() :- Is_sonnet(\"Jabberwocky\").\nAnswer() :- Is_poem_type(\"Jabberwocky\", \"sonnet\").\n.output Answer"]}
{"id": 1921, "answer": false, "completion": ".decl In_circle(Character:symbol, Circle:symbol)\nIn_circle(\"Saladin\", \"circle of virtuous pagans\").\nIn_circle(\"circle of lust\", \"circle of gluttony\").\n.decl Pass_through(Start:symbol, End:symbol)\nPass_through(\"circle of lust\", \"circle of gluttony\").\nPass_through(\"circle of virtuous pagans\", \"circle of lust\").\n.decl Answer()\nAnswer() :- Pass_through(\"circle of virtuous pagans\", \"circle of lust\"), In_circle(\"Saladin\", \"circle of virtuous pagans\").\n.output Answer", "completions": [".decl In_circle(Character:symbol, Circle:symbol)\nIn_circle(\"Saladin\", \"circle of virtuous pagans\").\nIn_circle(\"circle of lust\", \"circle of gluttony\").\n.decl Pass_through(Start:symbol, End:symbol)\nPass_through(\"circle of lust\", \"circle of gluttony\").\nPass_through(\"circle of virtuous pagans\", \"circle of lust\").\n.decl Answer()\nAnswer() :- Pass_through(\"circle of virtuous pagans\", \"circle of lust\"), In_circle(\"Saladin\", \"circle of virtuous pagans\").\n.output Answer"]}
{"id": 1922, "answer": true, "completion": ".decl Causes_supersonic_shock_wave(Event:symbol)\nCauses_supersonic_shock_wave(\"explosion at gunpowder storage facility\").\n.decl Answer()\nAnswer() :- Causes_supersonic_shock_wave(\"explosion at gunpowder storage facility\").\n.output Answer", "completions": [".decl Causes_supersonic_shock_wave(Event:symbol)\nCauses_supersonic_shock_wave(\"explosion at gunpowder storage facility\").\n.decl Answer()\nAnswer() :- Causes_supersonic_shock_wave(\"explosion at gunpowder storage facility\").\n.output Answer"]}
{"id": 1923, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"New Years Eve\", \"December 31\").\nHappens_in_time(\"midnight\", \"00:00\").\nHappens_in_time(\"Times Square\", \"New York City\").\n.decl Wears_diapers(Person:symbol, Age_group:symbol)\nWears_diapers(\"baby\", \"infant\").\nWears_diapers(\"elderly\", \"senior\").\n.decl Attends_event(Person:symbol, Event:symbol)\nAttends_event(\"people\", \"New Years Eve\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"New Years Eve\", \"December 31\"), Happens_in_time(\"midnight\", \"00:00\"), Happens_in_time(\"Times Square\", \"New York City\"), Attends_event(person, \"New Years Eve\"), Wears_diapers(person, age_group).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"New Years Eve\", \"December 31\").\nHappens_in_time(\"midnight\", \"00:00\").\nHappens_in_time(\"Times Square\", \"New York City\").\n.decl Wears_diapers(Person:symbol, Age_group:symbol)\nWears_diapers(\"baby\", \"infant\").\nWears_diapers(\"elderly\", \"senior\").\n.decl Attends_event(Person:symbol, Event:symbol)\nAttends_event(\"people\", \"New Years Eve\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"New Years Eve\", \"December 31\"), Happens_in_time(\"midnight\", \"00:00\"), Happens_in_time(\"Times Square\", \"New York City\"), Attends_event(person, \"New Years Eve\"), Wears_diapers(person, age_group).\n.output Answer"]}
{"id": 1924, "answer": true, "completion": ".decl Needed_in_event(Profession:symbol, Event:symbol)\nNeeded_in_event(\"railroad engineer\", \"train operation\").\nNeeded_in_event(\"race car driver\", \"NASCAR events\").\n.decl Answer()\nAnswer() :- Needed_in_event(\"railroad engineer\", \"NASCAR events\").\n.output Answer", "completions": [".decl Needed_in_event(Profession:symbol, Event:symbol)\nNeeded_in_event(\"railroad engineer\", \"train operation\").\nNeeded_in_event(\"race car driver\", \"NASCAR events\").\n.decl Answer()\nAnswer() :- Needed_in_event(\"railroad engineer\", \"NASCAR events\").\n.output Answer"]}
{"id": 1925, "answer": true, "completion": ".decl Is_moss(Object:symbol)\nIs_moss(\"beard\").\n.decl Grows_on(Object:symbol, Surface:symbol)\nGrows_on(\"moss\", \"human\").\n.decl Answer()\nAnswer() :- Is_moss(\"beard\"), Grows_on(\"beard\", \"human\").\n.output Answer", "completions": [".decl Is_moss(Object:symbol)\nIs_moss(\"beard\").\n.decl Grows_on(Object:symbol, Surface:symbol)\nGrows_on(\"moss\", \"human\").\n.decl Answer()\nAnswer() :- Is_moss(\"beard\"), Grows_on(\"beard\", \"human\").\n.output Answer"]}
{"id": 1926, "answer": true, "completion": ".decl Causes_aggravation(Food:symbol, Condition:symbol)\nCauses_aggravation(\"lemon\", \"dyspepsia\").\n.decl Answer()\nAnswer() :- Causes_aggravation(\"lemon\", \"dyspepsia\").\n.output Answer", "completions": [".decl Causes_aggravation(Food:symbol, Condition:symbol)\nCauses_aggravation(\"lemon\", \"dyspepsia\").\n.decl Answer()\nAnswer() :- Causes_aggravation(\"lemon\", \"dyspepsia\").\n.output Answer"]}
{"id": 1927, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Beethoven\", 1770).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Beethoven\", 1827).\n.decl Emerged_in_year(Genre:symbol, Emergence_year:float)\nEmerged_in_year(\"EDM\", 1980).\n.decl Answer()\nAnswer() :- Born_in_year(\"Beethoven\", birth_year), Died_in_year(\"Beethoven\", death_year), Emerged_in_year(\"EDM\", emergence_year), birth_year <= emergence_year, death_year >= emergence_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Beethoven\", 1770).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Beethoven\", 1827).\n.decl Emerged_in_year(Genre:symbol, Emergence_year:float)\nEmerged_in_year(\"EDM\", 1980).\n.decl Answer()\nAnswer() :- Born_in_year(\"Beethoven\", birth_year), Died_in_year(\"Beethoven\", death_year), Emerged_in_year(\"EDM\", emergence_year), birth_year <= emergence_year, death_year >= emergence_year.\n.output Answer"]}
{"id": 1928, "answer": true, "completion": ".decl Has_name(Object:symbol, Name:symbol, Location:symbol)\nHas_name(\"Solanum melongena\", \"eggplant\", \"USA\").\nHas_name(\"Solanum melongena\", \"aubergine\", \"UK\").\nHas_name(\"Solanum melongena\", \"brinjal\", \"India\").\n.decl Answer()\nAnswer() :- Has_name(\"Solanum melongena\", \"eggplant\", \"Mumbai\").\nAnswer() :- Has_name(\"Solanum melongena\", name, \"India\"), name = \"eggplant\".\n.output Answer", "completions": [".decl Has_name(Object:symbol, Name:symbol, Location:symbol)\nHas_name(\"Solanum melongena\", \"eggplant\", \"USA\").\nHas_name(\"Solanum melongena\", \"aubergine\", \"UK\").\nHas_name(\"Solanum melongena\", \"brinjal\", \"India\").\n.decl Answer()\nAnswer() :- Has_name(\"Solanum melongena\", \"eggplant\", \"Mumbai\").\nAnswer() :- Has_name(\"Solanum melongena\", name, \"India\"), name = \"eggplant\".\n.output Answer"]}
{"id": 1929, "answer": true, "completion": ".decl Considered_equal(Person:symbol, Group:symbol, Equal:float)\nConsidered_equal(\"Woodrow Wilson\", \"Blacks\", 0).\n.decl Answer()\nAnswer() :- Considered_equal(\"Woodrow Wilson\", \"Blacks\", equal), equal = 1.\n.output Answer", "completions": [".decl Considered_equal(Person:symbol, Group:symbol, Equal:float)\nConsidered_equal(\"Woodrow Wilson\", \"Blacks\", 0).\n.decl Answer()\nAnswer() :- Considered_equal(\"Woodrow Wilson\", \"Blacks\", equal), equal = 1.\n.output Answer"]}
{"id": 1930, "answer": true, "completion": ".decl Skilled_at_using(Person:symbol, Weapon:symbol)\nSkilled_at_using(\"Krishna\", \"bow\").\n.decl Answer()\nAnswer() :- Skilled_at_using(\"Krishna\", \"bow\").\n.output Answer", "completions": [".decl Skilled_at_using(Person:symbol, Weapon:symbol)\nSkilled_at_using(\"Krishna\", \"bow\").\n.decl Answer()\nAnswer() :- Skilled_at_using(\"Krishna\", \"bow\").\n.output Answer"]}
{"id": 1931, "answer": true, "completion": ".decl Eats_body_weight(Animal:symbol, Times:float)\nEats_body_weight(\"snow leopard\", 0.05).\n.decl Answer()\nAnswer() :- Eats_body_weight(\"snow leopard\", times), times >= 2.\n.output Answer", "completions": [".decl Eats_body_weight(Animal:symbol, Times:float)\nEats_body_weight(\"snow leopard\", 0.05).\n.decl Answer()\nAnswer() :- Eats_body_weight(\"snow leopard\", times), times >= 2.\n.output Answer"]}
{"id": 1932, "answer": true, "completion": ".decl Has_experience(Person:symbol, Experience:symbol)\nHas_experience(\"Charla Nash\", \"chimp attack\").\n.decl Causes_anxiety(Experience:symbol, Animal:symbol)\nCauses_anxiety(\"chimp attack\", \"gorilla\").\n.decl Answer()\nAnswer() :- Has_experience(\"Charla Nash\", experience), Causes_anxiety(experience, \"gorilla\").\n.output Answer", "completions": [".decl Has_experience(Person:symbol, Experience:symbol)\nHas_experience(\"Charla Nash\", \"chimp attack\").\n.decl Causes_anxiety(Experience:symbol, Animal:symbol)\nCauses_anxiety(\"chimp attack\", \"gorilla\").\n.decl Answer()\nAnswer() :- Has_experience(\"Charla Nash\", experience), Causes_anxiety(experience, \"gorilla\").\n.output Answer"]}
{"id": 1933, "answer": false, "completion": ".decl Needs_both_hands(Activity:symbol)\nNeeds_both_hands(\"guitar playing\").\n.decl Answer()\nAnswer() :- Needs_both_hands(\"guitar playing\").\n.output Answer", "completions": [".decl Needs_both_hands(Activity:symbol)\nNeeds_both_hands(\"guitar playing\").\n.decl Answer()\nAnswer() :- Needs_both_hands(\"guitar playing\").\n.output Answer"]}
{"id": 1934, "answer": false, "completion": ".decl Acts_in_time(Actor:symbol, Time:symbol)\nActs_in_time(\"Al Pacino\", \"1969\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"World War II\", \"1939-1945\").\n.decl Answer()\nAnswer() :- Acts_in_time(\"Al Pacino\", time1), Happens_in_time(\"World War II\", time2), time1 >= \"1939\", time1 <= \"1945\".\n.output Answer", "completions": [".decl Acts_in_time(Actor:symbol, Time:symbol)\nActs_in_time(\"Al Pacino\", \"1969\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"World War II\", \"1939-1945\").\n.decl Answer()\nAnswer() :- Acts_in_time(\"Al Pacino\", time1), Happens_in_time(\"World War II\", time2), time1 >= \"1939\", time1 <= \"1945\".\n.output Answer"]}
{"id": 1935, "answer": true, "completion": ".decl Has_ex_wives(Person:symbol, N_ex_wives:float)\nHas_ex_wives(\"James Brown\", 4).\n.decl Can_hold_doubles_game(N_people:float)\nCan_hold_doubles_game(4).\n.decl Answer()\nAnswer() :- Has_ex_wives(\"James Brown\", n_ex_wives), Can_hold_doubles_game(n_ex_wives).\n.output Answer", "completions": [".decl Has_ex_wives(Person:symbol, N_ex_wives:float)\nHas_ex_wives(\"James Brown\", 4).\n.decl Can_hold_doubles_game(N_people:float)\nCan_hold_doubles_game(4).\n.decl Answer()\nAnswer() :- Has_ex_wives(\"James Brown\", n_ex_wives), Can_hold_doubles_game(n_ex_wives).\n.output Answer"]}
{"id": 1936, "answer": false, "completion": ".decl Uses_at_work(Person:symbol, Object:symbol)\nUses_at_work(\"scientist\", \"microscope\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Robert De Niro\", \"actor\").\n.decl Answer()\nAnswer() :- Is_profession(\"Robert De Niro\", profession), Uses_at_work(profession, \"microscope\").\n.output Answer", "completions": [".decl Uses_at_work(Person:symbol, Object:symbol)\nUses_at_work(\"scientist\", \"microscope\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Robert De Niro\", \"actor\").\n.decl Answer()\nAnswer() :- Is_profession(\"Robert De Niro\", profession), Uses_at_work(profession, \"microscope\").\n.output Answer"]}
{"id": 1937, "answer": true, "completion": ".decl Has_n_beliefs(Person:symbol, Belief:symbol, N_beliefs:float)\nHas_n_beliefs(\"Reza Shah\", \"Imams\", 12).\nHas_n_beliefs(\"Jesus\", \"disciples\", 12).\n.decl Answer()\nAnswer() :- Has_n_beliefs(\"Reza Shah\", \"Imams\", n_beliefs1), Has_n_beliefs(\"Jesus\", \"disciples\", n_beliefs2), n_beliefs1 > n_beliefs2.\n.output Answer", "completions": [".decl Has_n_beliefs(Person:symbol, Belief:symbol, N_beliefs:float)\nHas_n_beliefs(\"Reza Shah\", \"Imams\", 12).\nHas_n_beliefs(\"Jesus\", \"disciples\", 12).\n.decl Answer()\nAnswer() :- Has_n_beliefs(\"Reza Shah\", \"Imams\", n_beliefs1), Has_n_beliefs(\"Jesus\", \"disciples\", n_beliefs2), n_beliefs1 > n_beliefs2.\n.output Answer"]}
{"id": 1938, "answer": false, "completion": ".decl Inhibits(Substance:symbol, Process:symbol)\nInhibits(\"chlorine\", \"photosynthesis\").\n.decl Answer()\nAnswer() :- Inhibits(\"chlorine\", \"photosynthesis\").\n.output Answer", "completions": [".decl Inhibits(Substance:symbol, Process:symbol)\nInhibits(\"chlorine\", \"photosynthesis\").\n.decl Answer()\nAnswer() :- Inhibits(\"chlorine\", \"photosynthesis\").\n.output Answer"]}
{"id": 1939, "answer": true, "completion": ".decl Is_popular(Activity:symbol, Location:symbol)\nIs_popular(\"surfing\", \"California\").\nIs_popular(\"surfing\", \"Hawaii\").\n.decl Is_in_state(City:symbol, State:symbol)\nIs_in_state(\"Des Moines\", \"Iowa\").\n.decl Answer()\nAnswer() :- Is_popular(\"surfing\", location), Is_in_state(\"Des Moines\", location).\n.output Answer", "completions": [".decl Is_popular(Activity:symbol, Location:symbol)\nIs_popular(\"surfing\", \"California\").\nIs_popular(\"surfing\", \"Hawaii\").\n.decl Is_in_state(City:symbol, State:symbol)\nIs_in_state(\"Des Moines\", \"Iowa\").\n.decl Answer()\nAnswer() :- Is_popular(\"surfing\", location), Is_in_state(\"Des Moines\", location).\n.output Answer"]}
{"id": 1940, "answer": true, "completion": ".decl Fought(Fighter_A:symbol, Fighter_B:symbol, Result:symbol)\nFought(\"Sugar Ray Robinson\", \"Canelo Alvarez\", \"no\").\n.decl Answer()\nAnswer() :- Fought(\"Sugar Ray Robinson\", \"Canelo Alvarez\", \"yes\").\n.output Answer", "completions": [".decl Fought(Fighter_A:symbol, Fighter_B:symbol, Result:symbol)\nFought(\"Sugar Ray Robinson\", \"Canelo Alvarez\", \"no\").\n.decl Answer()\nAnswer() :- Fought(\"Sugar Ray Robinson\", \"Canelo Alvarez\", \"yes\").\n.output Answer"]}
{"id": 1941, "answer": true, "completion": ".decl Has_temperature_range(Location:symbol, Min_temp:float, Max_temp:float)\nHas_temperature_range(\"Antarctic Peninsula\", 23, 50).\n.decl Fahrenheit_to_Celsius(Fahrenheit:float, Celsius:float)\nFahrenheit_to_Celsius(F, C) :- C = (F - 32) * 5 / 9.\n.decl Answer()\nAnswer() :- Has_temperature_range(\"Antarctic Peninsula\", min_temp, max_temp), Fahrenheit_to_Celsius(75, celsius_temp), celsius_temp < min_temp.\nAnswer() :- Has_temperature_range(\"Antarctic Peninsula\", min_temp, max_temp), Fahrenheit_to_Celsius(75, celsius_temp), celsius_temp > max_temp.\n.output Answer", "completions": [".decl Has_temperature_range(Location:symbol, Min_temp:float, Max_temp:float)\nHas_temperature_range(\"Antarctic Peninsula\", 23, 50).\n.decl Fahrenheit_to_Celsius(Fahrenheit:float, Celsius:float)\nFahrenheit_to_Celsius(F, C) :- C = (F - 32) * 5 / 9.\n.decl Answer()\nAnswer() :- Has_temperature_range(\"Antarctic Peninsula\", min_temp, max_temp), Fahrenheit_to_Celsius(75, celsius_temp), celsius_temp < min_temp.\nAnswer() :- Has_temperature_range(\"Antarctic Peninsula\", min_temp, max_temp), Fahrenheit_to_Celsius(75, celsius_temp), celsius_temp > max_temp.\n.output Answer"]}
{"id": 1942, "answer": false, "completion": ".decl Has_belief(Person:symbol, Belief:symbol)\nHas_belief(\"Richard Dawkins\", \"atheism\").\n.decl Incompatible_with(Belief_A:symbol, Belief_B:symbol)\nIncompatible_with(\"atheism\", \"accepting Last rites\").\n.decl Answer()\nAnswer() :- Has_belief(\"Richard Dawkins\", belief), Incompatible_with(belief, \"accepting Last rites\").\n.output Answer", "completions": [".decl Has_belief(Person:symbol, Belief:symbol)\nHas_belief(\"Richard Dawkins\", \"atheism\").\n.decl Incompatible_with(Belief_A:symbol, Belief_B:symbol)\nIncompatible_with(\"atheism\", \"accepting Last rites\").\n.decl Answer()\nAnswer() :- Has_belief(\"Richard Dawkins\", belief), Incompatible_with(belief, \"accepting Last rites\").\n.output Answer"]}
{"id": 1943, "answer": false, "completion": ".decl Born_in_year(Group:symbol, Year:float)\nBorn_in_year(\"high school class of 2010\", 1992).\n.decl Presidency(President:symbol, Start_year:float, End_year:float)\nPresidency(\"Richard Nixon\", 1969, 1974).\n.decl Answer()\nAnswer() :- Born_in_year(\"high school class of 2010\", birth_year), Presidency(\"Richard Nixon\", start_year, end_year), birth_year > end_year.\nAnswer() :- !Born_in_year(\"high school class of 2010\", birth_year), Presidency(\"Richard Nixon\", start_year, end_year), birth_year <= end_year.\n.output Answer", "completions": [".decl Born_in_year(Group:symbol, Year:float)\nBorn_in_year(\"high school class of 2010\", 1992).\n.decl Presidency(President:symbol, Start_year:float, End_year:float)\nPresidency(\"Richard Nixon\", 1969, 1974).\n.decl Answer()\nAnswer() :- Born_in_year(\"high school class of 2010\", birth_year), Presidency(\"Richard Nixon\", start_year, end_year), birth_year > end_year.\nAnswer() :- !Born_in_year(\"high school class of 2010\", birth_year), Presidency(\"Richard Nixon\", start_year, end_year), birth_year <= end_year.\n.output Answer"]}
{"id": 1944, "answer": false, "completion": ".decl Has_characters(Show:symbol, Character:symbol)\nHas_characters(\"Disney's Zorro\", \"Zorro\").\nHas_characters(\"Disney's Zorro\", \"Don Diego de la Vega\").\n.decl Answer()\nAnswer() :- Has_characters(\"Disney's Zorro\", character1), Has_characters(\"Disney's Zorro\", character2), character1 != character2.\n.output Answer", "completions": [".decl Has_characters(Show:symbol, Character:symbol)\nHas_characters(\"Disney's Zorro\", \"Zorro\").\nHas_characters(\"Disney's Zorro\", \"Don Diego de la Vega\").\n.decl Answer()\nAnswer() :- Has_characters(\"Disney's Zorro\", character1), Has_characters(\"Disney's Zorro\", character2), character1 != character2.\n.output Answer"]}
{"id": 1945, "answer": true, "completion": ".decl Has_word_count(Document:symbol, Word_count:float)\nHas_word_count(\"The Hobbit\", 95022).\nHas_word_count(\"Constitution of the United States\", 4543).\n\n.decl Has_rate(Profession:symbol, Rate:float)\nHas_rate(\"proofreader\", 0.02).\n\n.decl Profit(Document:symbol, Profit:float)\nProfit(document, profit) :- Has_word_count(document, word_count), Has_rate(\"proofreader\", rate), profit = word_count * rate.\n\n.decl Answer()\nAnswer() :- Profit(\"The Hobbit\", profit1), Profit(\"Constitution of the United States\", profit2), profit1 > profit2.\n.output Answer", "completions": [".decl Has_word_count(Document:symbol, Word_count:float)\nHas_word_count(\"The Hobbit\", 95022).\nHas_word_count(\"Constitution of the United States\", 4543).\n\n.decl Has_rate(Profession:symbol, Rate:float)\nHas_rate(\"proofreader\", 0.02).\n\n.decl Profit(Document:symbol, Profit:float)\nProfit(document, profit) :- Has_word_count(document, word_count), Has_rate(\"proofreader\", rate), profit = word_count * rate.\n\n.decl Answer()\nAnswer() :- Profit(\"The Hobbit\", profit1), Profit(\"Constitution of the United States\", profit2), profit1 > profit2.\n.output Answer"]}
{"id": 1946, "answer": true, "completion": ".decl Stars_in_show(Actor:symbol, Show:symbol)\nStars_in_show(\"Lucy Lawless\", \"Xena: Warrior Princess\").\nStars_in_show(\"Renee O'Connor\", \"Xena: Warrior Princess\").\nStars_in_show(\"Hudson Leick\", \"Xena: Warrior Princess\").\nStars_in_show(\"Lucy Lawless\", \"Battlestar Galactica\").\nStars_in_show(\"Renee O'Connor\", \"Ark\").\nStars_in_show(\"Hudson Leick\", \"Tru Calling\").\n\n.decl Amazons_on_Xena(Actor:symbol)\nAmazons_on_Xena(\"Lucy Lawless\").\nAmazons_on_Xena(\"Renee O'Connor\").\nAmazons_on_Xena(\"Hudson Leick\").\n\n.decl Answer()\nAnswer() :- Stars_in_show(actor, \"Xena: Warrior Princess\"), Amazons_on_Xena(actor), Stars_in_show(actor, later_show), later_show != \"Xena: Warrior Princess\".\n.output Answer", "completions": [".decl Stars_in_show(Actor:symbol, Show:symbol)\nStars_in_show(\"Lucy Lawless\", \"Xena: Warrior Princess\").\nStars_in_show(\"Renee O'Connor\", \"Xena: Warrior Princess\").\nStars_in_show(\"Hudson Leick\", \"Xena: Warrior Princess\").\nStars_in_show(\"Lucy Lawless\", \"Battlestar Galactica\").\nStars_in_show(\"Renee O'Connor\", \"Ark\").\nStars_in_show(\"Hudson Leick\", \"Tru Calling\").\n\n.decl Amazons_on_Xena(Actor:symbol)\nAmazons_on_Xena(\"Lucy Lawless\").\nAmazons_on_Xena(\"Renee O'Connor\").\nAmazons_on_Xena(\"Hudson Leick\").\n\n.decl Answer()\nAnswer() :- Stars_in_show(actor, \"Xena: Warrior Princess\"), Amazons_on_Xena(actor), Stars_in_show(actor, later_show), later_show != \"Xena: Warrior Princess\".\n.output Answer"]}
{"id": 1947, "answer": true, "completion": ".decl Has_ability(Animal:symbol, Ability:symbol)\nHas_ability(\"crane\", \"fly\").\nHas_ability(\"human\", \"slamdunk\").\n.decl Answer()\nAnswer() :- Has_ability(\"crane\", \"slamdunk\").\n.output Answer", "completions": [".decl Has_ability(Animal:symbol, Ability:symbol)\nHas_ability(\"crane\", \"fly\").\nHas_ability(\"human\", \"slamdunk\").\n.decl Answer()\nAnswer() :- Has_ability(\"crane\", \"slamdunk\").\n.output Answer"]}
{"id": 1948, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Food:symbol)\nEats(\"black widow\", \"insects\").\n.decl Is_fruit(Fruit:symbol)\nIs_fruit(\"peaches\").\n.decl Answer()\nAnswer() :- Eats(\"black widow\", food), Is_fruit(food).\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Food:symbol)\nEats(\"black widow\", \"insects\").\n.decl Is_fruit(Fruit:symbol)\nIs_fruit(\"peaches\").\n.decl Answer()\nAnswer() :- Eats(\"black widow\", food), Is_fruit(food).\n.output Answer"]}
{"id": 1949, "answer": true, "completion": ".decl Has_symptom(Disease:symbol, Symptom:symbol)\nHas_symptom(\"Anorexia Nervosa\", \"red legs\").\n.decl Indicates(Symptom:symbol, Condition:symbol)\nIndicates(\"red legs\", \"failing health\").\n.decl Answer()\nAnswer() :- Has_symptom(\"Anorexia Nervosa\", symptom), Indicates(symptom, \"failing health\").\n.output Answer", "completions": [".decl Has_symptom(Disease:symbol, Symptom:symbol)\nHas_symptom(\"Anorexia Nervosa\", \"red legs\").\n.decl Indicates(Symptom:symbol, Condition:symbol)\nIndicates(\"red legs\", \"failing health\").\n.decl Answer()\nAnswer() :- Has_symptom(\"Anorexia Nervosa\", symptom), Indicates(symptom, \"failing health\").\n.output Answer"]}
{"id": 1950, "answer": true, "completion": ".decl Has_age_range(Test:symbol, Min_age:float, Max_age:float)\nHas_age_range(\"Iowa tests\", 6, 18).\n.decl Has_target_age(Group:symbol, Target_age:float)\nHas_target_age(\"Nine Inch Nails\", 18).\n.decl Answer()\nAnswer() :- Has_age_range(\"Iowa tests\", min_age, max_age), Has_target_age(\"Nine Inch Nails\", target_age), target_age >= min_age.\n.output Answer", "completions": [".decl Has_age_range(Test:symbol, Min_age:float, Max_age:float)\nHas_age_range(\"Iowa tests\", 6, 18).\n.decl Has_target_age(Group:symbol, Target_age:float)\nHas_target_age(\"Nine Inch Nails\", 18).\n.decl Answer()\nAnswer() :- Has_age_range(\"Iowa tests\", min_age, max_age), Has_target_age(\"Nine Inch Nails\", target_age), target_age >= min_age.\n.output Answer"]}
{"id": 1951, "answer": true, "completion": ".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Nike shoebox\", 33, 23, 12).\n.decl Has_size(Animal:symbol, Length:float, Width:float, Height:float)\nHas_size(\"swan\", 120, 60, 60).\n.decl Answer()\nAnswer() :- Has_dimensions(\"Nike shoebox\", length1, width1, height1), Has_size(\"swan\", length2, width2, height2), length1 < length2, width1 < width2, height1 < height2.\n.output Answer", "completions": [".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Nike shoebox\", 33, 23, 12).\n.decl Has_size(Animal:symbol, Length:float, Width:float, Height:float)\nHas_size(\"swan\", 120, 60, 60).\n.decl Answer()\nAnswer() :- Has_dimensions(\"Nike shoebox\", length1, width1, height1), Has_size(\"swan\", length2, width2, height2), length1 < length2, width1 < width2, height1 < height2.\n.output Answer"]}
{"id": 1952, "answer": true, "completion": ".decl Is_cold_blooded(Animal:symbol)\nIs_cold_blooded(\"reptiles\").\nIs_cold_blooded(\"fish\").\nIs_cold_blooded(\"amphibians\").\n.decl Is_warm_blooded(Animal:symbol)\nIs_warm_blooded(\"mammals\").\nIs_warm_blooded(\"birds\").\n.decl Answer()\nAnswer() :- Is_cold_blooded(\"chinchillas\").\nAnswer() :- !Is_warm_blooded(\"chinchillas\").\n.output Answer", "completions": [".decl Is_cold_blooded(Animal:symbol)\nIs_cold_blooded(\"reptiles\").\nIs_cold_blooded(\"fish\").\nIs_cold_blooded(\"amphibians\").\n.decl Is_warm_blooded(Animal:symbol)\nIs_warm_blooded(\"mammals\").\nIs_warm_blooded(\"birds\").\n.decl Answer()\nAnswer() :- Is_cold_blooded(\"chinchillas\").\nAnswer() :- !Is_warm_blooded(\"chinchillas\").\n.output Answer"]}
{"id": 1953, "answer": true, "completion": ".decl Has_protein_per_100g(Food:symbol, Protein:float)\nHas_protein_per_100g(\"elk burger\", 30).\nHas_protein_per_100g(\"beef burger\", 26).\n.decl Body_builder_prefers(Food_A:symbol, Food_B:symbol)\nBody_builder_prefers(\"elk burger\", \"beef burger\") :- Has_protein_per_100g(\"elk burger\", protein1), Has_protein_per_100g(\"beef burger\", protein2), protein1 > protein2.\n.decl Answer()\nAnswer() :- Body_builder_prefers(\"elk burger\", \"beef burger\").\n.output Answer", "completions": [".decl Has_protein_per_100g(Food:symbol, Protein:float)\nHas_protein_per_100g(\"elk burger\", 30).\nHas_protein_per_100g(\"beef burger\", 26).\n.decl Body_builder_prefers(Food_A:symbol, Food_B:symbol)\nBody_builder_prefers(\"elk burger\", \"beef burger\") :- Has_protein_per_100g(\"elk burger\", protein1), Has_protein_per_100g(\"beef burger\", protein2), protein1 > protein2.\n.decl Answer()\nAnswer() :- Body_builder_prefers(\"elk burger\", \"beef burger\").\n.output Answer"]}
{"id": 1954, "answer": true, "completion": ".decl Has_seating_capacity(Vehicle:symbol, Capacity:float)\nHas_seating_capacity(\"2020 Mitsubishi Outlander\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Aerosmith\", 5).\n.decl Answer()\nAnswer() :- Has_seating_capacity(\"2020 Mitsubishi Outlander\", capacity), Has_n_members(\"Aerosmith\", n_members), capacity >= n_members.\n.output Answer", "completions": [".decl Has_seating_capacity(Vehicle:symbol, Capacity:float)\nHas_seating_capacity(\"2020 Mitsubishi Outlander\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Aerosmith\", 5).\n.decl Answer()\nAnswer() :- Has_seating_capacity(\"2020 Mitsubishi Outlander\", capacity), Has_n_members(\"Aerosmith\", n_members), capacity >= n_members.\n.output Answer"]}
{"id": 1955, "answer": true, "completion": ".decl Has_representation(Organization:symbol, Location:symbol)\nHas_representation(\"Freemasonry\", \"Earth\").\n.decl Has_visited(Location:symbol, Visitor:symbol)\nHas_visited(\"Moon\", \"Neil Armstrong\").\n.decl Is_member(Person:symbol, Organization:symbol)\nIs_member(\"Neil Armstrong\", \"Freemasonry\").\n.decl Answer()\nAnswer() :- Has_representation(\"Freemasonry\", \"Moon\").\nAnswer() :- Has_visited(\"Moon\", visitor), Is_member(visitor, \"Freemasonry\").\n.output Answer", "completions": [".decl Has_representation(Organization:symbol, Location:symbol)\nHas_representation(\"Freemasonry\", \"Earth\").\n.decl Has_visited(Location:symbol, Visitor:symbol)\nHas_visited(\"Moon\", \"Neil Armstrong\").\n.decl Is_member(Person:symbol, Organization:symbol)\nIs_member(\"Neil Armstrong\", \"Freemasonry\").\n.decl Answer()\nAnswer() :- Has_representation(\"Freemasonry\", \"Moon\").\nAnswer() :- Has_visited(\"Moon\", visitor), Is_member(visitor, \"Freemasonry\").\n.output Answer"]}
{"id": 1956, "answer": true, "completion": ".decl Produces_wool(Animal:symbol)\nProduces_wool(\"sheep\").\nProduces_wool(\"alpaca\").\nProduces_wool(\"goat\").\n.decl Answer()\nAnswer() :- Produces_wool(\"Sphynx cat\").\n.output Answer", "completions": [".decl Produces_wool(Animal:symbol)\nProduces_wool(\"sheep\").\nProduces_wool(\"alpaca\").\nProduces_wool(\"goat\").\n.decl Answer()\nAnswer() :- Produces_wool(\"Sphynx cat\").\n.output Answer"]}
{"id": 1957, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"stork\", \"fish\").\nEats(\"stork\", \"insects\").\nEats(\"stork\", \"amphibians\").\nEats(\"stork\", \"small mammals\").\n.decl Is_species(Species_A:symbol, Species_B:symbol)\nIs_species(\"golden toad\", \"amphibians\").\n.decl Answer()\nAnswer() :- Eats(\"stork\", food), Is_species(\"golden toad\", food).\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"stork\", \"fish\").\nEats(\"stork\", \"insects\").\nEats(\"stork\", \"amphibians\").\nEats(\"stork\", \"small mammals\").\n.decl Is_species(Species_A:symbol, Species_B:symbol)\nIs_species(\"golden toad\", \"amphibians\").\n.decl Answer()\nAnswer() :- Eats(\"stork\", food), Is_species(\"golden toad\", food).\n.output Answer"]}
{"id": 1958, "answer": false, "completion": ".decl Has_insurance(Person:symbol, Insurance_status:symbol)\n.decl Declines_CT_scan(Person:symbol)\n.decl More_likely_to_decline(Person_A:symbol, Person_B:symbol)\n.decl Answer()\n\n// Assuming uninsured person is more likely to decline a CT scan\nMore_likely_to_decline(\"uninsured_person\", \"insured_person\").\n\n// Define insurance status of persons\nHas_insurance(\"uninsured_person\", \"uninsured\").\nHas_insurance(\"insured_person\", \"insured\").\n\n// Define declining CT scan based on insurance status\nDeclines_CT_scan(person) :- Has_insurance(person, \"uninsured\"), More_likely_to_decline(person, _).\n\nAnswer() :- Declines_CT_scan(\"uninsured_person\"), !Declines_CT_scan(\"insured_person\").\n.output Answer", "completions": [".decl Has_insurance(Person:symbol, Insurance_status:symbol)\n.decl Declines_CT_scan(Person:symbol)\n.decl More_likely_to_decline(Person_A:symbol, Person_B:symbol)\n.decl Answer()\n\n// Assuming uninsured person is more likely to decline a CT scan\nMore_likely_to_decline(\"uninsured_person\", \"insured_person\").\n\n// Define insurance status of persons\nHas_insurance(\"uninsured_person\", \"uninsured\").\nHas_insurance(\"insured_person\", \"insured\").\n\n// Define declining CT scan based on insurance status\nDeclines_CT_scan(person) :- Has_insurance(person, \"uninsured\"), More_likely_to_decline(person, _).\n\nAnswer() :- Declines_CT_scan(\"uninsured_person\"), !Declines_CT_scan(\"insured_person\").\n.output Answer"]}
{"id": 1959, "answer": true, "completion": ".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"spider wasp\", 6).\n.decl Answer()\nAnswer() :- Has_legs(\"spider wasp\", 8).\n.output Answer", "completions": [".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"spider wasp\", 6).\n.decl Answer()\nAnswer() :- Has_legs(\"spider wasp\", 8).\n.output Answer"]}
{"id": 1960, "answer": true, "completion": ".decl Causes_death(Cause:symbol)\nCauses_death(\"brake failure\").\n.decl Answer()\nAnswer() :- Causes_death(\"brake failure\").\n.output Answer", "completions": [".decl Causes_death(Cause:symbol)\nCauses_death(\"brake failure\").\n.decl Answer()\nAnswer() :- Causes_death(\"brake failure\").\n.output Answer"]}
{"id": 1961, "answer": false, "completion": ".decl Contains_pork(Food:symbol)\nContains_pork(\"McRib sandwich\").\n.decl Forbidden_for_Muslim(Food:symbol)\nForbidden_for_Muslim(food) :- Contains_pork(food).\n.decl Answer()\nAnswer() :- !Forbidden_for_Muslim(\"McRib sandwich\").\n.output Answer", "completions": [".decl Contains_pork(Food:symbol)\nContains_pork(\"McRib sandwich\").\n.decl Forbidden_for_Muslim(Food:symbol)\nForbidden_for_Muslim(food) :- Contains_pork(food).\n.decl Answer()\nAnswer() :- !Forbidden_for_Muslim(\"McRib sandwich\").\n.output Answer"]}
{"id": 1962, "answer": true, "completion": ".decl Mall_Santa_Actors(Race:symbol, Percentage:float)\nMall_Santa_Actors(\"white\", 90).\nMall_Santa_Actors(\"non-white\", 10).\n.decl Answer()\nAnswer() :- Mall_Santa_Actors(\"white\", percentage1), Mall_Santa_Actors(\"non-white\", percentage2), percentage1 > percentage2.\n.output Answer", "completions": [".decl Mall_Santa_Actors(Race:symbol, Percentage:float)\nMall_Santa_Actors(\"white\", 90).\nMall_Santa_Actors(\"non-white\", 10).\n.decl Answer()\nAnswer() :- Mall_Santa_Actors(\"white\", percentage1), Mall_Santa_Actors(\"non-white\", percentage2), percentage1 > percentage2.\n.output Answer"]}
{"id": 1963, "answer": false, "completion": ".decl Knows_language(Person:symbol, Language:symbol)\nKnows_language(\"person\", \"English\").\n.decl Can_read_script(Language:symbol, Script:symbol)\nCan_read_script(\"English\", \"Latin\").\nCan_read_script(\"Japanese\", \"Kanji\").\n.decl Answer()\nAnswer() :- Knows_language(\"person\", language), Can_read_script(language, \"Kanji\").\n.output Answer", "completions": [".decl Knows_language(Person:symbol, Language:symbol)\nKnows_language(\"person\", \"English\").\n.decl Can_read_script(Language:symbol, Script:symbol)\nCan_read_script(\"English\", \"Latin\").\nCan_read_script(\"Japanese\", \"Kanji\").\n.decl Answer()\nAnswer() :- Knows_language(\"person\", language), Can_read_script(language, \"Kanji\").\n.output Answer"]}
{"id": 1964, "answer": false, "completion": ".decl Aldi_Location(Location:symbol, Owner:symbol)\nAldi_Location(\"US\", \"Aldi Süd\").\nAldi_Location(\"US\", \"Aldi Nord\").\n.decl Answer()\nAnswer() :- Aldi_Location(\"US\", owner1), Aldi_Location(\"US\", owner2), owner1 != owner2.\nAnswer() :- !Aldi_Location(\"US\", _).\n.output Answer", "completions": [".decl Aldi_Location(Location:symbol, Owner:symbol)\nAldi_Location(\"US\", \"Aldi Süd\").\nAldi_Location(\"US\", \"Aldi Nord\").\n.decl Answer()\nAnswer() :- Aldi_Location(\"US\", owner1), Aldi_Location(\"US\", owner2), owner1 != owner2.\nAnswer() :- !Aldi_Location(\"US\", _).\n.output Answer"]}
{"id": 1965, "answer": false, "completion": ".decl Has_biblical_significance(Place:symbol)\nHas_biblical_significance(\"Red Sea\").\n\n.decl Answer()\nAnswer() :- Has_biblical_significance(\"Red Sea\").\n.output Answer", "completions": [".decl Has_biblical_significance(Place:symbol)\nHas_biblical_significance(\"Red Sea\").\n\n.decl Answer()\nAnswer() :- Has_biblical_significance(\"Red Sea\").\n.output Answer"]}
{"id": 1966, "answer": true, "completion": ".decl Has_legs(Being:symbol, N_legs:float)\nHas_legs(\"octuplets\", 16).\n.decl Has_shoes(Set:symbol, N_shoes:float)\nHas_shoes(\"four shoes\", 4).\n.decl Answer()\nAnswer() :- Has_legs(\"octuplets\", n_legs), Has_shoes(\"four shoes\", n_shoes), n_shoes < n_legs.\n.output Answer", "completions": [".decl Has_legs(Being:symbol, N_legs:float)\nHas_legs(\"octuplets\", 16).\n.decl Has_shoes(Set:symbol, N_shoes:float)\nHas_shoes(\"four shoes\", 4).\n.decl Answer()\nAnswer() :- Has_legs(\"octuplets\", n_legs), Has_shoes(\"four shoes\", n_shoes), n_shoes < n_legs.\n.output Answer"]}
{"id": 1967, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Phileas Fogg's around the world\", 80).\nLast_n_days(\"Pope John Paul I's reign\", 33).\n.decl Answer()\nAnswer() :- Last_n_days(\"Phileas Fogg's around the world\", n_days1), Last_n_days(\"Pope John Paul I's reign\", n_days2), n_days1 > n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Phileas Fogg's around the world\", 80).\nLast_n_days(\"Pope John Paul I's reign\", 33).\n.decl Answer()\nAnswer() :- Last_n_days(\"Phileas Fogg's around the world\", n_days1), Last_n_days(\"Pope John Paul I's reign\", n_days2), n_days1 > n_days2.\n.output Answer"]}
{"id": 1968, "answer": true, "completion": ".decl Causes_spontaneous_abortion(Object:symbol)\nCauses_spontaneous_abortion(\"alcohol\").\nCauses_spontaneous_abortion(\"tobacco\").\nCauses_spontaneous_abortion(\"certain medications\").\n.decl Answer()\nAnswer() :- Causes_spontaneous_abortion(\"lettuce\").\n.output Answer", "completions": [".decl Causes_spontaneous_abortion(Object:symbol)\nCauses_spontaneous_abortion(\"alcohol\").\nCauses_spontaneous_abortion(\"tobacco\").\nCauses_spontaneous_abortion(\"certain medications\").\n.decl Answer()\nAnswer() :- Causes_spontaneous_abortion(\"lettuce\").\n.output Answer"]}
{"id": 1969, "answer": false, "completion": ".decl Has_power_dependency(Job:symbol, Dependency:symbol)\nHas_power_dependency(\"software engineer\", \"electricity\").\n.decl Has_resource(Resource:symbol, Availability:symbol)\nHas_resource(\"electricity\", \"unavailable\").\n.decl Answer()\nAnswer() :- Has_power_dependency(\"software engineer\", resource), Has_resource(resource, \"available\").\nAnswer() :- !Has_power_dependency(\"software engineer\", resource), Has_resource(resource, \"unavailable\").\n.output Answer", "completions": [".decl Has_power_dependency(Job:symbol, Dependency:symbol)\nHas_power_dependency(\"software engineer\", \"electricity\").\n.decl Has_resource(Resource:symbol, Availability:symbol)\nHas_resource(\"electricity\", \"unavailable\").\n.decl Answer()\nAnswer() :- Has_power_dependency(\"software engineer\", resource), Has_resource(resource, \"available\").\nAnswer() :- !Has_power_dependency(\"software engineer\", resource), Has_resource(resource, \"unavailable\").\n.output Answer"]}
{"id": 1970, "answer": true, "completion": ".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"human\", \"hyena diet\").\n.decl Diet_type(Diet:symbol, Type:symbol)\nDiet_type(\"hyena diet\", \"carnivorous\").\nDiet_type(\"vegan diet\", \"plant-based\").\n.decl Festival_accepts_diet(Festival:symbol, Diet_type:symbol)\nFestival_accepts_diet(\"vegan festival\", \"plant-based\").\n.decl Answer()\nAnswer() :- Follows_diet(\"human\", diet), Diet_type(diet, diet_type1), Festival_accepts_diet(\"vegan festival\", diet_type2), diet_type1 != diet_type2.\n.output Answer", "completions": [".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"human\", \"hyena diet\").\n.decl Diet_type(Diet:symbol, Type:symbol)\nDiet_type(\"hyena diet\", \"carnivorous\").\nDiet_type(\"vegan diet\", \"plant-based\").\n.decl Festival_accepts_diet(Festival:symbol, Diet_type:symbol)\nFestival_accepts_diet(\"vegan festival\", \"plant-based\").\n.decl Answer()\nAnswer() :- Follows_diet(\"human\", diet), Diet_type(diet, diet_type1), Festival_accepts_diet(\"vegan festival\", diet_type2), diet_type1 != diet_type2.\n.output Answer"]}
{"id": 1971, "answer": false, "completion": ".decl Is_hazardous(Location:symbol, Species:symbol)\nIs_hazardous(\"Sea World\", \"orca\").\nIs_hazardous(\"Sea World\", \"dolphin\").\n.decl Answer()\nAnswer() :- Is_hazardous(\"Sea World\", \"leopard seal\").\nAnswer() :- Is_hazardous(\"Sea World\", species), species != \"leopard seal\", species = \"orca\" ; species = \"dolphin\".\n.output Answer", "completions": [".decl Is_hazardous(Location:symbol, Species:symbol)\nIs_hazardous(\"Sea World\", \"orca\").\nIs_hazardous(\"Sea World\", \"dolphin\").\n.decl Answer()\nAnswer() :- Is_hazardous(\"Sea World\", \"leopard seal\").\nAnswer() :- Is_hazardous(\"Sea World\", species), species != \"leopard seal\", species = \"orca\" ; species = \"dolphin\".\n.output Answer"]}
{"id": 1972, "answer": false, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Gray Whale\", 15).\nHas_length(\"above ground pool\", 4).\n.decl Answer()\nAnswer() :- Has_length(\"Gray Whale\", length1), Has_length(\"above ground pool\", length2), length1 <= length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Gray Whale\", 15).\nHas_length(\"above ground pool\", 4).\n.decl Answer()\nAnswer() :- Has_length(\"Gray Whale\", length1), Has_length(\"above ground pool\", length2), length1 <= length2.\n.output Answer"]}
{"id": 1973, "answer": false, "completion": ".decl Practiced(Person:symbol, Activity:symbol, Age:symbol)\nPracticed(\"Julia Roberts\", \"acting\", \"child\").\n.decl Activity_type(Activity:symbol, Type:symbol)\nActivity_type(\"blast beats\", \"music\").\n.decl Answer()\nAnswer() :- Practiced(\"Julia Roberts\", \"blast beats\", \"child\").\n.output Answer", "completions": [".decl Practiced(Person:symbol, Activity:symbol, Age:symbol)\nPracticed(\"Julia Roberts\", \"acting\", \"child\").\n.decl Activity_type(Activity:symbol, Type:symbol)\nActivity_type(\"blast beats\", \"music\").\n.decl Answer()\nAnswer() :- Practiced(\"Julia Roberts\", \"blast beats\", \"child\").\n.output Answer"]}
{"id": 1974, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"king size bed\", 42).\nHas_size(\"American Black Bear cub\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"king size bed\", size1), Has_size(\"American Black Bear cub\", size2), 2 * size2 <= size1.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"king size bed\", 42).\nHas_size(\"American Black Bear cub\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"king size bed\", size1), Has_size(\"American Black Bear cub\", size2), 2 * size2 <= size1.\n.output Answer"]}
{"id": 1975, "answer": true, "completion": ".decl Is_nearby(Object_A:symbol, Object_B:symbol)\nIs_nearby(\"Mona Lisa\", \"restaurants\").\n.decl Accessible_by_foot(Object:symbol)\nAccessible_by_foot(\"restaurants\").\n.decl Answer()\nAnswer() :- Is_nearby(\"Mona Lisa\", \"restaurants\"), Accessible_by_foot(\"restaurants\").\n.output Answer", "completions": [".decl Is_nearby(Object_A:symbol, Object_B:symbol)\nIs_nearby(\"Mona Lisa\", \"restaurants\").\n.decl Accessible_by_foot(Object:symbol)\nAccessible_by_foot(\"restaurants\").\n.decl Answer()\nAnswer() :- Is_nearby(\"Mona Lisa\", \"restaurants\"), Accessible_by_foot(\"restaurants\").\n.output Answer"]}
{"id": 1976, "answer": true, "completion": ".decl Is_ingredient(Drink:symbol, Ingredient:symbol)\nIs_ingredient(\"White Russian\", \"vodka\").\nIs_ingredient(\"White Russian\", \"coffee liqueur\").\nIs_ingredient(\"White Russian\", \"cream\").\n.decl Is_citrus(Fruit:symbol)\nIs_citrus(\"kaffir lime\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"White Russian\", ingredient), Is_citrus(\"kaffir lime\"), !Is_citrus(ingredient).\n.output Answer", "completions": [".decl Is_ingredient(Drink:symbol, Ingredient:symbol)\nIs_ingredient(\"White Russian\", \"vodka\").\nIs_ingredient(\"White Russian\", \"coffee liqueur\").\nIs_ingredient(\"White Russian\", \"cream\").\n.decl Is_citrus(Fruit:symbol)\nIs_citrus(\"kaffir lime\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"White Russian\", ingredient), Is_citrus(\"kaffir lime\"), !Is_citrus(ingredient).\n.output Answer"]}
{"id": 1977, "answer": true, "completion": ".decl Has_screen_time(Doctor:symbol, Screen_time:float)\nHas_screen_time(\"War Doctor\", 75).\nHas_screen_time(\"Ninth Doctor\", 585).\n.decl Answer()\nAnswer() :- Has_screen_time(\"War Doctor\", screen_time1), Has_screen_time(\"Ninth Doctor\", screen_time2), screen_time1 > screen_time2.\n.output Answer", "completions": [".decl Has_screen_time(Doctor:symbol, Screen_time:float)\nHas_screen_time(\"War Doctor\", 75).\nHas_screen_time(\"Ninth Doctor\", 585).\n.decl Answer()\nAnswer() :- Has_screen_time(\"War Doctor\", screen_time1), Has_screen_time(\"Ninth Doctor\", screen_time2), screen_time1 > screen_time2.\n.output Answer"]}
{"id": 1978, "answer": true, "completion": ".decl Inspired_by(Group_A:symbol, Group_B:symbol)\nInspired_by(\"Little Mix\", \"Spice Girls\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Spice Girls\", \"Little Mix\").\n.output Answer", "completions": [".decl Inspired_by(Group_A:symbol, Group_B:symbol)\nInspired_by(\"Little Mix\", \"Spice Girls\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Spice Girls\", \"Little Mix\").\n.output Answer"]}
{"id": 1979, "answer": true, "completion": ".decl Has_distance(City_A:symbol, City_B:symbol, Distance:float)\nHas_distance(\"Bucharest\", \"New York City\", 7671).\n.decl Has_flight_range(Animal:symbol, Range:float)\nHas_flight_range(\"wandering albatross\", 10000).\n.decl Answer()\nAnswer() :- Has_distance(\"Bucharest\", \"New York City\", distance), Has_flight_range(\"wandering albatross\", range), distance <= range.\n.output Answer", "completions": [".decl Has_distance(City_A:symbol, City_B:symbol, Distance:float)\nHas_distance(\"Bucharest\", \"New York City\", 7671).\n.decl Has_flight_range(Animal:symbol, Range:float)\nHas_flight_range(\"wandering albatross\", 10000).\n.decl Answer()\nAnswer() :- Has_distance(\"Bucharest\", \"New York City\", distance), Has_flight_range(\"wandering albatross\", range), distance <= range.\n.output Answer"]}
{"id": 1980, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Chuck Norris\", 1940).\n.decl Leap_year(Year:float)\nLeap_year(2024).\n.decl Nonagenarian_in_year(Person:symbol, Year:float)\nNonagenarian_in_year(\"Chuck Norris\", 2030).\n.decl Answer()\nAnswer() :- Born_in_year(\"Chuck Norris\", birth_year), Leap_year(leap_year), Nonagenarian_in_year(\"Chuck Norris\", nonagenarian_year), leap_year > 2020, nonagenarian_year > leap_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Chuck Norris\", 1940).\n.decl Leap_year(Year:float)\nLeap_year(2024).\n.decl Nonagenarian_in_year(Person:symbol, Year:float)\nNonagenarian_in_year(\"Chuck Norris\", 2030).\n.decl Answer()\nAnswer() :- Born_in_year(\"Chuck Norris\", birth_year), Leap_year(leap_year), Nonagenarian_in_year(\"Chuck Norris\", nonagenarian_year), leap_year > 2020, nonagenarian_year > leap_year.\n.output Answer"]}
{"id": 1981, "answer": true, "completion": ".decl Allowed_in_airport(Animal:symbol)\nAllowed_in_airport(\"service dog\").\n.decl Is_service_dog(Breed:symbol)\nIs_service_dog(\"German Shepherd\").\n.decl Answer()\nAnswer() :- Is_service_dog(\"German Shepherd\"), Allowed_in_airport(\"service dog\").\n.output Answer", "completions": [".decl Allowed_in_airport(Animal:symbol)\nAllowed_in_airport(\"service dog\").\n.decl Is_service_dog(Breed:symbol)\nIs_service_dog(\"German Shepherd\").\n.decl Answer()\nAnswer() :- Is_service_dog(\"German Shepherd\"), Allowed_in_airport(\"service dog\").\n.output Answer"]}
{"id": 1982, "answer": false, "completion": ".decl Is_part_of_system(Unit:symbol, System:symbol)\nIs_part_of_system(\"foot\", \"imperial\").\nIs_part_of_system(\"meter\", \"metric\").\n.decl Answer()\nAnswer() :- !Is_part_of_system(\"foot\", \"metric\").\n.output Answer", "completions": [".decl Is_part_of_system(Unit:symbol, System:symbol)\nIs_part_of_system(\"foot\", \"imperial\").\nIs_part_of_system(\"meter\", \"metric\").\n.decl Answer()\nAnswer() :- !Is_part_of_system(\"foot\", \"metric\").\n.output Answer"]}
{"id": 1983, "answer": true, "completion": ".decl DIY_Channel(Channel:symbol, Shows_Realistic_Projects:float)\nDIY_Channel(\"Channel1\", 1).\nDIY_Channel(\"Channel2\", 0.8).\nDIY_Channel(\"Channel3\", 0.6).\n.decl Answer()\nAnswer() :- DIY_Channel(channel, shows_realistic_projects), shows_realistic_projects < 1.\n.output Answer", "completions": [".decl DIY_Channel(Channel:symbol, Shows_Realistic_Projects:float)\nDIY_Channel(\"Channel1\", 1).\nDIY_Channel(\"Channel2\", 0.8).\nDIY_Channel(\"Channel3\", 0.6).\n.decl Answer()\nAnswer() :- DIY_Channel(channel, shows_realistic_projects), shows_realistic_projects < 1.\n.output Answer"]}
{"id": 1984, "answer": true, "completion": ".decl Found_in(Object:symbol, Location:symbol)\nFound_in(\"Atlantic cod\", \"ocean\").\nFound_in(\"vegemite\", \"vegemite sandwich\").\n.decl Answer()\nAnswer() :- Found_in(\"Atlantic cod\", \"vegemite sandwich\").\n.output Answer", "completions": [".decl Found_in(Object:symbol, Location:symbol)\nFound_in(\"Atlantic cod\", \"ocean\").\nFound_in(\"vegemite\", \"vegemite sandwich\").\n.decl Answer()\nAnswer() :- Found_in(\"Atlantic cod\", \"vegemite sandwich\").\n.output Answer"]}
{"id": 1985, "answer": true, "completion": ".decl Has_costume(Play:symbol, Costume:symbol)\nHas_costume(\"Macbeth\", \"robes\").\nHas_costume(\"Macbeth\", \"pointy hats\").\n.decl Helpful_for(Play:symbol, Costume:symbol)\nHelpful_for(\"Macbeth\", \"robes\").\nHelpful_for(\"Macbeth\", \"pointy hats\").\n.decl Answer()\nAnswer() :- Has_costume(\"Macbeth\", costume), Helpful_for(\"Macbeth\", costume).\n.output Answer", "completions": [".decl Has_costume(Play:symbol, Costume:symbol)\nHas_costume(\"Macbeth\", \"robes\").\nHas_costume(\"Macbeth\", \"pointy hats\").\n.decl Helpful_for(Play:symbol, Costume:symbol)\nHelpful_for(\"Macbeth\", \"robes\").\nHelpful_for(\"Macbeth\", \"pointy hats\").\n.decl Answer()\nAnswer() :- Has_costume(\"Macbeth\", costume), Helpful_for(\"Macbeth\", costume).\n.output Answer"]}
{"id": 1986, "answer": false, "completion": ".decl Pursued_higher_education(Person:symbol)\nPursued_higher_education(\"Emma Stone\").\n.decl Answer()\nAnswer() :- Pursued_higher_education(\"Emma Stone\").\n.output Answer", "completions": [".decl Pursued_higher_education(Person:symbol)\nPursued_higher_education(\"Emma Stone\").\n.decl Answer()\nAnswer() :- Pursued_higher_education(\"Emma Stone\").\n.output Answer"]}
{"id": 1987, "answer": true, "completion": ".decl Found_in_place(Object:symbol, Place:symbol)\nFound_in_place(\"Bob Marley's face\", \"smoke shops\").\n.decl Answer()\nAnswer() :- Found_in_place(\"Bob Marley's face\", \"smoke shops\").\n.output Answer", "completions": [".decl Found_in_place(Object:symbol, Place:symbol)\nFound_in_place(\"Bob Marley's face\", \"smoke shops\").\n.decl Answer()\nAnswer() :- Found_in_place(\"Bob Marley's face\", \"smoke shops\").\n.output Answer"]}
{"id": 1988, "answer": true, "completion": ".decl Tells_time(Person:symbol, Clock:symbol)\nTells_time(\"blind person\", \"Big Ben\").\n.decl Has_property(Person:symbol, Property:symbol)\nHas_property(\"blind person\", \"cannot see\").\n.decl Requires_property(Clock:symbol, Property:symbol)\nRequires_property(\"Big Ben\", \"sight\").\n.decl Answer()\nAnswer() :- Tells_time(\"blind person\", \"Big Ben\"), !Has_property(\"blind person\", \"cannot see\"), !Requires_property(\"Big Ben\", \"sight\").\n.output Answer", "completions": [".decl Tells_time(Person:symbol, Clock:symbol)\nTells_time(\"blind person\", \"Big Ben\").\n.decl Has_property(Person:symbol, Property:symbol)\nHas_property(\"blind person\", \"cannot see\").\n.decl Requires_property(Clock:symbol, Property:symbol)\nRequires_property(\"Big Ben\", \"sight\").\n.decl Answer()\nAnswer() :- Tells_time(\"blind person\", \"Big Ben\"), !Has_property(\"blind person\", \"cannot see\"), !Requires_property(\"Big Ben\", \"sight\").\n.output Answer"]}
{"id": 1989, "answer": true, "completion": ".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Tiger Stadium\", 80000).\n.decl Has_unemployed_people(Event:symbol, Unemployed_people:float)\nHas_unemployed_people(\"1933 Great Depression\", 15000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tiger Stadium\", capacity), Has_unemployed_people(\"1933 Great Depression\", unemployed_people), unemployed_people <= capacity.\n.output Answer", "completions": [".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Tiger Stadium\", 80000).\n.decl Has_unemployed_people(Event:symbol, Unemployed_people:float)\nHas_unemployed_people(\"1933 Great Depression\", 15000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tiger Stadium\", capacity), Has_unemployed_people(\"1933 Great Depression\", unemployed_people), unemployed_people <= capacity.\n.output Answer"]}
{"id": 1990, "answer": true, "completion": ".decl Writes_about(Poet:symbol, Topic:symbol)\nWrites_about(\"Jan Kochanowski\", \"Islamic religion\").\n.decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Jan Kochanowski\", \"Polish\").\n.decl Writes_sonnets(Poet:symbol)\nWrites_sonnets(\"Jan Kochanowski\").\n.decl Answer()\nAnswer() :- Writes_about(poet, \"Islamic religion\"), Is_nationality(poet, \"Polish\"), Writes_sonnets(poet).\n.output Answer", "completions": [".decl Writes_about(Poet:symbol, Topic:symbol)\nWrites_about(\"Jan Kochanowski\", \"Islamic religion\").\n.decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Jan Kochanowski\", \"Polish\").\n.decl Writes_sonnets(Poet:symbol)\nWrites_sonnets(\"Jan Kochanowski\").\n.decl Answer()\nAnswer() :- Writes_about(poet, \"Islamic religion\"), Is_nationality(poet, \"Polish\"), Writes_sonnets(poet).\n.output Answer"]}
{"id": 1991, "answer": true, "completion": ".decl Participated_in(Person:symbol, Event:symbol)\nParticipated_in(\"Barack Obama\", \"Presidency\").\n.decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"Reformation\", \"16th century\").\nHappened_in_time(\"Presidency\", \"21st century\").\n.decl Answer()\nAnswer() :- Participated_in(\"Barack Obama\", \"Reformation\").\nAnswer() :- Participated_in(\"Barack Obama\", event), Happened_in_time(event, time1), Happened_in_time(\"Reformation\", time2), time1 = time2.\n.output Answer", "completions": [".decl Participated_in(Person:symbol, Event:symbol)\nParticipated_in(\"Barack Obama\", \"Presidency\").\n.decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"Reformation\", \"16th century\").\nHappened_in_time(\"Presidency\", \"21st century\").\n.decl Answer()\nAnswer() :- Participated_in(\"Barack Obama\", \"Reformation\").\nAnswer() :- Participated_in(\"Barack Obama\", event), Happened_in_time(event, time1), Happened_in_time(\"Reformation\", time2), time1 = time2.\n.output Answer"]}
{"id": 1992, "answer": true, "completion": ".decl Based_on_real_person(Artwork:symbol)\nBased_on_real_person(\"Mona Lisa\").\n.decl Answer()\nAnswer() :- Based_on_real_person(\"Mona Lisa\").\n.output Answer", "completions": [".decl Based_on_real_person(Artwork:symbol)\nBased_on_real_person(\"Mona Lisa\").\n.decl Answer()\nAnswer() :- Based_on_real_person(\"Mona Lisa\").\n.output Answer"]}
{"id": 1993, "answer": false, "completion": ".decl Enjoys_menu(Person:symbol, Restaurant:symbol, Frequency:symbol)\nEnjoys_menu(\"model\", \"Cookout\", \"rarely\").\n.decl Answer()\nAnswer() :- Enjoys_menu(\"model\", \"Cookout\", \"frequently\").\nAnswer() :- !Enjoys_menu(\"model\", \"Cookout\", \"rarely\").\n.output Answer", "completions": [".decl Enjoys_menu(Person:symbol, Restaurant:symbol, Frequency:symbol)\nEnjoys_menu(\"model\", \"Cookout\", \"rarely\").\n.decl Answer()\nAnswer() :- Enjoys_menu(\"model\", \"Cookout\", \"frequently\").\nAnswer() :- !Enjoys_menu(\"model\", \"Cookout\", \"rarely\").\n.output Answer"]}
{"id": 1994, "answer": true, "completion": ".decl Has_shelf_space(Library:symbol, Shelf_space:float)\nHas_shelf_space(\"Library of Alexandria\", 490000).\nHas_shelf_space(\"Library of Congress\", 838000).\n.decl Answer()\nAnswer() :- Has_shelf_space(\"Library of Alexandria\", space1), Has_shelf_space(\"Library of Congress\", space2), space1 < space2.\n.output Answer", "completions": [".decl Has_shelf_space(Library:symbol, Shelf_space:float)\nHas_shelf_space(\"Library of Alexandria\", 490000).\nHas_shelf_space(\"Library of Congress\", 838000).\n.decl Answer()\nAnswer() :- Has_shelf_space(\"Library of Alexandria\", space1), Has_shelf_space(\"Library of Congress\", space2), space1 < space2.\n.output Answer"]}
{"id": 1995, "answer": true, "completion": ".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"tongue\", \"mouth\").\nIs_part_of(\"mouth\", \"head\").\n.decl Answer()\nAnswer() :- Is_part_of(\"tongue\", \"head\").\nAnswer() :- Is_part_of(\"tongue\", part), Is_part_of(part, \"head\").\n.output Answer", "completions": [".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"tongue\", \"mouth\").\nIs_part_of(\"mouth\", \"head\").\n.decl Answer()\nAnswer() :- Is_part_of(\"tongue\", \"head\").\nAnswer() :- Is_part_of(\"tongue\", part), Is_part_of(part, \"head\").\n.output Answer"]}
{"id": 1996, "answer": true, "completion": ".decl Visits(Person:symbol, Place:symbol, Time:symbol)\nVisits(\"ancient visitor\", \"Persia\", \"ancient times\").\n.decl Consumes(Person:symbol, Item:symbol)\nConsumes(\"ancient visitor\", \"crocus threads\").\n.decl Common_in_time_and_place(Item:symbol, Place:symbol, Time:symbol)\nCommon_in_time_and_place(\"crocus threads\", \"Persia\", \"ancient times\").\n.decl Answer()\nAnswer() :- Visits(\"ancient visitor\", \"Persia\", \"ancient times\"), Common_in_time_and_place(\"crocus threads\", \"Persia\", \"ancient times\").\n.output Answer", "completions": [".decl Visits(Person:symbol, Place:symbol, Time:symbol)\nVisits(\"ancient visitor\", \"Persia\", \"ancient times\").\n.decl Consumes(Person:symbol, Item:symbol)\nConsumes(\"ancient visitor\", \"crocus threads\").\n.decl Common_in_time_and_place(Item:symbol, Place:symbol, Time:symbol)\nCommon_in_time_and_place(\"crocus threads\", \"Persia\", \"ancient times\").\n.decl Answer()\nAnswer() :- Visits(\"ancient visitor\", \"Persia\", \"ancient times\"), Common_in_time_and_place(\"crocus threads\", \"Persia\", \"ancient times\").\n.output Answer"]}
{"id": 1997, "answer": true, "completion": ".decl Causes_discomfort(Food:symbol, Discomfort:symbol)\nCauses_discomfort(\"durian\", \"stomachache\").\n.decl Answer()\nAnswer() :- Causes_discomfort(\"durian\", \"stomachache\").\n.output Answer", "completions": [".decl Causes_discomfort(Food:symbol, Discomfort:symbol)\nCauses_discomfort(\"durian\", \"stomachache\").\n.decl Answer()\nAnswer() :- Causes_discomfort(\"durian\", \"stomachache\").\n.output Answer"]}
{"id": 1998, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Hundred Years' War\", 116).\n.decl Answer()\nAnswer() :- Last_n_years(\"Hundred Years' War\", n_years), n_years != 100.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Hundred Years' War\", 116).\n.decl Answer()\nAnswer() :- Last_n_years(\"Hundred Years' War\", n_years), n_years != 100.\n.output Answer"]}
{"id": 1999, "answer": true, "completion": ".decl Has_nutrient_amount(Food:symbol, Nutrient:symbol, Amount:float)\nHas_nutrient_amount(\"kale\", \"calcium\", 150).\nHas_nutrient_amount(\"spinach\", \"calcium\", 99).\n.decl Answer()\nAnswer() :- Has_nutrient_amount(\"kale\", \"calcium\", amount1), Has_nutrient_amount(\"spinach\", \"calcium\", amount2), amount1 > amount2.\n.output Answer", "completions": [".decl Has_nutrient_amount(Food:symbol, Nutrient:symbol, Amount:float)\nHas_nutrient_amount(\"kale\", \"calcium\", 150).\nHas_nutrient_amount(\"spinach\", \"calcium\", 99).\n.decl Answer()\nAnswer() :- Has_nutrient_amount(\"kale\", \"calcium\", amount1), Has_nutrient_amount(\"spinach\", \"calcium\", amount2), amount1 > amount2.\n.output Answer"]}
{"id": 2000, "answer": true, "completion": ".decl Imprisoned_due_to(Person:symbol, Reason:symbol)\nImprisoned_due_to(\"Jean Valjean\", \"hunger\").\n.decl Answer()\nAnswer() :- Imprisoned_due_to(\"Jean Valjean\", \"hunger\").\n.output Answer", "completions": [".decl Imprisoned_due_to(Person:symbol, Reason:symbol)\nImprisoned_due_to(\"Jean Valjean\", \"hunger\").\n.decl Answer()\nAnswer() :- Imprisoned_due_to(\"Jean Valjean\", \"hunger\").\n.output Answer"]}
{"id": 2001, "answer": true, "completion": ".decl Is_jukebox_musical(Musical:symbol, Character:symbol, Origin:symbol)\nIs_jukebox_musical(\"The Rocky Horror Show\", \"sweet transvestite\", \"Transsexual, Transylvania\").\n.decl Answer()\nAnswer() :- Is_jukebox_musical(\"The Rocky Horror Show\", \"sweet transvestite\", \"Transsexual, Transylvania\").\n.output Answer", "completions": [".decl Is_jukebox_musical(Musical:symbol, Character:symbol, Origin:symbol)\nIs_jukebox_musical(\"The Rocky Horror Show\", \"sweet transvestite\", \"Transsexual, Transylvania\").\n.decl Answer()\nAnswer() :- Is_jukebox_musical(\"The Rocky Horror Show\", \"sweet transvestite\", \"Transsexual, Transylvania\").\n.output Answer"]}
{"id": 2002, "answer": true, "completion": ".decl Belongs_to_tribe(Land:symbol, Tribe:symbol)\nBelongs_to_tribe(\"Holy Land\", \"Adamu's tribe\").\n.decl Answer()\nAnswer() :- Belongs_to_tribe(\"Holy Land\", \"Adamu's tribe\").\n.output Answer", "completions": [".decl Belongs_to_tribe(Land:symbol, Tribe:symbol)\nBelongs_to_tribe(\"Holy Land\", \"Adamu's tribe\").\n.decl Answer()\nAnswer() :- Belongs_to_tribe(\"Holy Land\", \"Adamu's tribe\").\n.output Answer"]}
{"id": 2003, "answer": false, "completion": ".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"New England\", \"USA\").\nLocated_in(\"Sainsbury's\", \"UK\").\n.decl Connected_by_road(Location_A:symbol, Location_B:symbol)\nConnected_by_road(\"USA\", \"Canada\").\nConnected_by_road(\"Canada\", \"USA\").\nConnected_by_road(\"UK\", \"France\").\nConnected_by_road(\"France\", \"UK\").\n.decl Answer()\nAnswer() :- Located_in(\"New England\", location1), Located_in(\"Sainsbury's\", location2), Connected_by_road(location1, location2).\n.output Answer", "completions": [".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"New England\", \"USA\").\nLocated_in(\"Sainsbury's\", \"UK\").\n.decl Connected_by_road(Location_A:symbol, Location_B:symbol)\nConnected_by_road(\"USA\", \"Canada\").\nConnected_by_road(\"Canada\", \"USA\").\nConnected_by_road(\"UK\", \"France\").\nConnected_by_road(\"France\", \"UK\").\n.decl Answer()\nAnswer() :- Located_in(\"New England\", location1), Located_in(\"Sainsbury's\", location2), Connected_by_road(location1, location2).\n.output Answer"]}
{"id": 2004, "answer": false, "completion": ".decl Did_action(Person:symbol, Action:symbol, Year:float)\nDid_action(\"Mike Tyson\", \"bite Evander Holyfield's ear\", 1997).\n.decl Has_slogan(Character:symbol, Slogan:symbol)\nHas_slogan(\"McGruff\", \"Take a bite out of crime\").\n.decl Answer()\nAnswer() :- Did_action(\"Mike Tyson\", action, 1997), Has_slogan(\"McGruff\", slogan), action != slogan.\n.output Answer", "completions": [".decl Did_action(Person:symbol, Action:symbol, Year:float)\nDid_action(\"Mike Tyson\", \"bite Evander Holyfield's ear\", 1997).\n.decl Has_slogan(Character:symbol, Slogan:symbol)\nHas_slogan(\"McGruff\", \"Take a bite out of crime\").\n.decl Answer()\nAnswer() :- Did_action(\"Mike Tyson\", action, 1997), Has_slogan(\"McGruff\", slogan), action != slogan.\n.output Answer"]}
{"id": 2005, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Durian\", 1.5).\n.decl Is_dangerous(Object:symbol)\nIs_dangerous(\"Durian\") :- Has_weight(\"Durian\", weight), weight > 1.\n.decl Answer()\nAnswer() :- Is_dangerous(\"Durian\").\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Durian\", 1.5).\n.decl Is_dangerous(Object:symbol)\nIs_dangerous(\"Durian\") :- Has_weight(\"Durian\", weight), weight > 1.\n.decl Answer()\nAnswer() :- Is_dangerous(\"Durian\").\n.output Answer"]}
{"id": 2006, "answer": true, "completion": ".decl Mentions_YMCA(Event:symbol)\nMentions_YMCA(\"mention YMCA\").\n.decl People_sing(Event:symbol)\nPeople_sing(\"sing when YMCA is mentioned\").\n.decl Normal(Event:symbol)\nNormal(\"sing when YMCA is mentioned\").\n.decl Answer()\nAnswer() :- Mentions_YMCA(event1), People_sing(event2), Normal(event2).\n.output Answer", "completions": [".decl Mentions_YMCA(Event:symbol)\nMentions_YMCA(\"mention YMCA\").\n.decl People_sing(Event:symbol)\nPeople_sing(\"sing when YMCA is mentioned\").\n.decl Normal(Event:symbol)\nNormal(\"sing when YMCA is mentioned\").\n.decl Answer()\nAnswer() :- Mentions_YMCA(event1), People_sing(event2), Normal(event2).\n.output Answer"]}
{"id": 2007, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Saltwater crocodile\", \"Australia\").\nLives_in(\"Saltwater crocodile\", \"Southeast Asia\").\n.decl Is_in(Location1:symbol, Location2:symbol)\nIs_in(\"Memphis\", \"United States\").\n.decl Answer()\nAnswer() :- Lives_in(\"Saltwater crocodile\", location1), Is_in(\"Memphis\", location2), location1 = location2.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Saltwater crocodile\", \"Australia\").\nLives_in(\"Saltwater crocodile\", \"Southeast Asia\").\n.decl Is_in(Location1:symbol, Location2:symbol)\nIs_in(\"Memphis\", \"United States\").\n.decl Answer()\nAnswer() :- Lives_in(\"Saltwater crocodile\", location1), Is_in(\"Memphis\", location2), location1 = location2.\n.output Answer"]}
{"id": 2008, "answer": true, "completion": ".decl Sells(Item:symbol, Store:symbol)\nSells(\"wood\", \"Home Depot\").\nSells(\"nails\", \"Home Depot\").\nSells(\"hammer\", \"Home Depot\").\n.decl Crucifixion_supplies(Item:symbol)\nCrucifixion_supplies(\"wood\").\nCrucifixion_supplies(\"nails\").\nCrucifixion_supplies(\"hammer\").\n.decl Answer()\nAnswer() :- Crucifixion_supplies(item), !Sells(item, \"Home Depot\").\n.output Answer", "completions": [".decl Sells(Item:symbol, Store:symbol)\nSells(\"wood\", \"Home Depot\").\nSells(\"nails\", \"Home Depot\").\nSells(\"hammer\", \"Home Depot\").\n.decl Crucifixion_supplies(Item:symbol)\nCrucifixion_supplies(\"wood\").\nCrucifixion_supplies(\"nails\").\nCrucifixion_supplies(\"hammer\").\n.decl Answer()\nAnswer() :- Crucifixion_supplies(item), !Sells(item, \"Home Depot\").\n.output Answer"]}
{"id": 2009, "answer": false, "completion": ".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Shamu\", \"San Diego County\").\n.decl Answer()\nAnswer() :- Located_in(\"Shamu\", \"San Diego County\").\n.output Answer", "completions": [".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Shamu\", \"San Diego County\").\n.decl Answer()\nAnswer() :- Located_in(\"Shamu\", \"San Diego County\").\n.output Answer"]}
{"id": 2010, "answer": true, "completion": ".decl Chess_opening(Opening:symbol, Moves:symbol)\nChess_opening(\"French Defence\", \"1.e4 e6\").\nChess_opening(\"Four Move Checkmate\", \"1.e4 e5 2.Qh5 Nc6 3.Bc4 Nf6 4.Qxf7#\").\n\n.decl Can_defend(A_defense:symbol, An_attack:symbol)\nCan_defend(\"French Defence\", \"Four Move Checkmate\") :- Chess_opening(\"French Defence\", defense_moves), Chess_opening(\"Four Move Checkmate\", attack_moves), defense_moves != attack_moves.\n\n.decl Answer()\nAnswer() :- Can_defend(\"French Defence\", \"Four Move Checkmate\").\n.output Answer", "completions": [".decl Chess_opening(Opening:symbol, Moves:symbol)\nChess_opening(\"French Defence\", \"1.e4 e6\").\nChess_opening(\"Four Move Checkmate\", \"1.e4 e5 2.Qh5 Nc6 3.Bc4 Nf6 4.Qxf7#\").\n\n.decl Can_defend(A_defense:symbol, An_attack:symbol)\nCan_defend(\"French Defence\", \"Four Move Checkmate\") :- Chess_opening(\"French Defence\", defense_moves), Chess_opening(\"Four Move Checkmate\", attack_moves), defense_moves != attack_moves.\n\n.decl Answer()\nAnswer() :- Can_defend(\"French Defence\", \"Four Move Checkmate\").\n.output Answer"]}
{"id": 2011, "answer": true, "completion": ".decl Has_vegetarian_option(Restaurant:symbol, Option:symbol)\nHas_vegetarian_option(\"Chick-fil-A\", \"salad\").\nHas_vegetarian_option(\"Chick-fil-A\", \"fruit cup\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegetarian\").\n.decl Can_eat(Person:symbol, Restaurant:symbol)\nCan_eat(person, restaurant) :- Is_vegetarian(person), Has_vegetarian_option(restaurant, option).\n.decl Answer()\nAnswer() :- Can_eat(\"vegetarian\", \"Chick-fil-A\").\n.output Answer", "completions": [".decl Has_vegetarian_option(Restaurant:symbol, Option:symbol)\nHas_vegetarian_option(\"Chick-fil-A\", \"salad\").\nHas_vegetarian_option(\"Chick-fil-A\", \"fruit cup\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegetarian\").\n.decl Can_eat(Person:symbol, Restaurant:symbol)\nCan_eat(person, restaurant) :- Is_vegetarian(person), Has_vegetarian_option(restaurant, option).\n.decl Answer()\nAnswer() :- Can_eat(\"vegetarian\", \"Chick-fil-A\").\n.output Answer"]}
{"id": 2012, "answer": false, "completion": ".decl Is_obvious(Emotion:symbol, Always_obvious:symbol)\nIs_obvious(\"grief\", \"no\").\n.decl Answer()\nAnswer() :- Is_obvious(\"grief\", \"no\").\n.output Answer", "completions": [".decl Is_obvious(Emotion:symbol, Always_obvious:symbol)\nIs_obvious(\"grief\", \"no\").\n.decl Answer()\nAnswer() :- Is_obvious(\"grief\", \"no\").\n.output Answer"]}
{"id": 2013, "answer": false, "completion": ".decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Scottish people\", \"Scottish\").\n.decl Is_ethnic_group(Person:symbol, Ethnic_group:symbol)\nIs_ethnic_group(\"Albidosi\", \"Albidosi\").\n.decl Answer()\nAnswer() :- Is_nationality(\"Scottish people\", nationality), Is_ethnic_group(\"Albidosi\", ethnic_group), nationality = ethnic_group.\n.output Answer", "completions": [".decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Scottish people\", \"Scottish\").\n.decl Is_ethnic_group(Person:symbol, Ethnic_group:symbol)\nIs_ethnic_group(\"Albidosi\", \"Albidosi\").\n.decl Answer()\nAnswer() :- Is_nationality(\"Scottish people\", nationality), Is_ethnic_group(\"Albidosi\", ethnic_group), nationality = ethnic_group.\n.output Answer"]}
{"id": 2014, "answer": true, "completion": ".decl Preventive_healthcare(Effect:symbol, Outcome:symbol)\nPreventive_healthcare(\"reduces\", \"STI transmission\").\n.decl Answer()\nAnswer() :- Preventive_healthcare(\"reduces\", \"STI transmission\").\n.output Answer", "completions": [".decl Preventive_healthcare(Effect:symbol, Outcome:symbol)\nPreventive_healthcare(\"reduces\", \"STI transmission\").\n.decl Answer()\nAnswer() :- Preventive_healthcare(\"reduces\", \"STI transmission\").\n.output Answer"]}
{"id": 2015, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Jack Black\", 1.68).\n.decl Satisfies_distancing(Person:symbol, Distancing:float)\nSatisfies_distancing(person, distancing) :- Has_height(person, height), height >= distancing.\n.decl Answer()\nAnswer() :- Satisfies_distancing(\"Jack Black\", 1.5).\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Jack Black\", 1.68).\n.decl Satisfies_distancing(Person:symbol, Distancing:float)\nSatisfies_distancing(person, distancing) :- Has_height(person, height), height >= distancing.\n.decl Answer()\nAnswer() :- Satisfies_distancing(\"Jack Black\", 1.5).\n.output Answer"]}
{"id": 2016, "answer": true, "completion": ".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Saint Peter\", \"1st century\").\n.decl Invented_in_time(Invention:symbol, Time_period:symbol)\nInvented_in_time(\"television\", \"20th century\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Saint Peter\", time1), Invented_in_time(\"television\", time2), time1 = time2.\n.output Answer", "completions": [".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Saint Peter\", \"1st century\").\n.decl Invented_in_time(Invention:symbol, Time_period:symbol)\nInvented_in_time(\"television\", \"20th century\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Saint Peter\", time1), Invented_in_time(\"television\", time2), time1 = time2.\n.output Answer"]}
{"id": 2017, "answer": true, "completion": ".decl Is_knight(Person:symbol, Country:symbol)\nIs_knight(\"Bill Gates\", \"USA\").\nIs_knight(\"Steven Spielberg\", \"USA\").\n.decl Is_official_knight(Person:symbol, Country:symbol)\nIs_official_knight(person, \"USA\") :- Is_knight(person, \"USA\").\n.decl Answer()\nAnswer() :- Is_official_knight(person, \"USA\").\n.output Answer", "completions": [".decl Is_knight(Person:symbol, Country:symbol)\nIs_knight(\"Bill Gates\", \"USA\").\nIs_knight(\"Steven Spielberg\", \"USA\").\n.decl Is_official_knight(Person:symbol, Country:symbol)\nIs_official_knight(person, \"USA\") :- Is_knight(person, \"USA\").\n.decl Answer()\nAnswer() :- Is_official_knight(person, \"USA\").\n.output Answer"]}
{"id": 2018, "answer": false, "completion": ".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"U2 debut studio album\", 42).\nHas_duration(\"Peppa Pig episode\", 5).\n.decl Answer()\nAnswer() :- Has_duration(\"U2 debut studio album\", duration1), Has_duration(\"Peppa Pig episode\", duration2), duration1 <= duration2.\n.output Answer", "completions": [".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"U2 debut studio album\", 42).\nHas_duration(\"Peppa Pig episode\", 5).\n.decl Answer()\nAnswer() :- Has_duration(\"U2 debut studio album\", duration1), Has_duration(\"Peppa Pig episode\", duration2), duration1 <= duration2.\n.output Answer"]}
{"id": 2019, "answer": false, "completion": ".decl Abstains_from_alcohol(Person:symbol)\nAbstains_from_alcohol(\"Osama bin Laden\").\n.decl Answer()\nAnswer() :- Abstains_from_alcohol(\"Osama bin Laden\").\n.output Answer", "completions": [".decl Abstains_from_alcohol(Person:symbol)\nAbstains_from_alcohol(\"Osama bin Laden\").\n.decl Answer()\nAnswer() :- Abstains_from_alcohol(\"Osama bin Laden\").\n.output Answer"]}
{"id": 2020, "answer": false, "completion": ".decl Has_event(Person:symbol, Event:symbol, Year:float)\nHas_event(\"Jerry Seinfeld\", \"Seinfeld TV show debut\", 1989).\n.decl Answer()\nAnswer() :- Has_event(\"Jerry Seinfeld\", event, year), year <= 1986.\n.output Answer", "completions": [".decl Has_event(Person:symbol, Event:symbol, Year:float)\nHas_event(\"Jerry Seinfeld\", \"Seinfeld TV show debut\", 1989).\n.decl Answer()\nAnswer() :- Has_event(\"Jerry Seinfeld\", event, year), year <= 1986.\n.output Answer"]}
{"id": 2021, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Buzz Aldrin\", 1930).\n.decl Invented_in_year(Object:symbol, Invention_year:float)\nInvented_in_year(\"computer\", 1946).\n.decl Answer()\nAnswer() :- Born_in_year(\"Buzz Aldrin\", birth_year), Invented_in_year(\"computer\", invention_year), birth_year <= invention_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Buzz Aldrin\", 1930).\n.decl Invented_in_year(Object:symbol, Invention_year:float)\nInvented_in_year(\"computer\", 1946).\n.decl Answer()\nAnswer() :- Born_in_year(\"Buzz Aldrin\", birth_year), Invented_in_year(\"computer\", invention_year), birth_year <= invention_year.\n.output Answer"]}
{"id": 2022, "answer": false, "completion": ".decl Urban_legend(Location:symbol)\nUrban_legend(\"city\").\nUrban_legend(\"rural\").\nUrban_legend(\"suburban\").\n.decl Answer()\nAnswer() :- Urban_legend(location), location != \"city\".\n.output Answer", "completions": [".decl Urban_legend(Location:symbol)\nUrban_legend(\"city\").\nUrban_legend(\"rural\").\nUrban_legend(\"suburban\").\n.decl Answer()\nAnswer() :- Urban_legend(location), location != \"city\".\n.output Answer"]}
{"id": 2023, "answer": true, "completion": ".decl Is_formidable(Foe_A:symbol, Foe_B:symbol)\nIs_formidable(\"Gandalf\", \"Sauron\").\nIs_formidable(\"Barbas\", \"Charmed Ones\").\n.decl Answer()\nAnswer() :- Is_formidable(\"Gandalf\", foe1), Is_formidable(\"Barbas\", foe2), foe1 != foe2.\n.output Answer", "completions": [".decl Is_formidable(Foe_A:symbol, Foe_B:symbol)\nIs_formidable(\"Gandalf\", \"Sauron\").\nIs_formidable(\"Barbas\", \"Charmed Ones\").\n.decl Answer()\nAnswer() :- Is_formidable(\"Gandalf\", foe1), Is_formidable(\"Barbas\", foe2), foe1 != foe2.\n.output Answer"]}
{"id": 2024, "answer": false, "completion": ".decl Eats_on_Christmas_Eve(Person:symbol, Food:symbol)\nEats_on_Christmas_Eve(\"Bulgarian priest\", \"vegetarian meal\").\n.decl Has_n_courses(Meal:symbol, N_courses:float)\nHas_n_courses(\"vegetarian meal\", 4).\n.decl Answer()\nAnswer() :- Eats_on_Christmas_Eve(\"Bulgarian priest\", meal), Has_n_courses(meal, n_courses), n_courses == 4.\n.output Answer", "completions": [".decl Eats_on_Christmas_Eve(Person:symbol, Food:symbol)\nEats_on_Christmas_Eve(\"Bulgarian priest\", \"vegetarian meal\").\n.decl Has_n_courses(Meal:symbol, N_courses:float)\nHas_n_courses(\"vegetarian meal\", 4).\n.decl Answer()\nAnswer() :- Eats_on_Christmas_Eve(\"Bulgarian priest\", meal), Has_n_courses(meal, n_courses), n_courses == 4.\n.output Answer"]}
{"id": 2025, "answer": true, "completion": ".decl Chef_at_restaurant(Chef:symbol, Restaurant:symbol)\nChef_at_restaurant(\"chef\", \"Carmine's restaurant\").\n.decl Has_ingredient(Restaurant:symbol, Ingredient:symbol)\nHas_ingredient(\"Carmine's restaurant\", \"basil\").\n.decl Chef_panics(Chef:symbol, Reason:symbol)\nChef_panics(\"chef\", \"no basil\") :- Chef_at_restaurant(\"chef\", \"Carmine's restaurant\"), !Has_ingredient(\"Carmine's restaurant\", \"basil\").\n.decl Answer()\nAnswer() :- Chef_panics(\"chef\", \"no basil\").\n.output Answer", "completions": [".decl Chef_at_restaurant(Chef:symbol, Restaurant:symbol)\nChef_at_restaurant(\"chef\", \"Carmine's restaurant\").\n.decl Has_ingredient(Restaurant:symbol, Ingredient:symbol)\nHas_ingredient(\"Carmine's restaurant\", \"basil\").\n.decl Chef_panics(Chef:symbol, Reason:symbol)\nChef_panics(\"chef\", \"no basil\") :- Chef_at_restaurant(\"chef\", \"Carmine's restaurant\"), !Has_ingredient(\"Carmine's restaurant\", \"basil\").\n.decl Answer()\nAnswer() :- Chef_panics(\"chef\", \"no basil\").\n.output Answer"]}
{"id": 2026, "answer": false, "completion": ".decl Has_operating_system(Device:symbol, Operating_system:symbol)\nHas_operating_system(\"Samsung Galaxy 1\", \"Android Eclair\").\n.decl Sounds_edible(Object:symbol)\nSounds_edible(\"Android Eclair\").\n.decl Answer()\nAnswer() :- Has_operating_system(\"Samsung Galaxy 1\", operating_system), Sounds_edible(operating_system).\n.output Answer", "completions": [".decl Has_operating_system(Device:symbol, Operating_system:symbol)\nHas_operating_system(\"Samsung Galaxy 1\", \"Android Eclair\").\n.decl Sounds_edible(Object:symbol)\nSounds_edible(\"Android Eclair\").\n.decl Answer()\nAnswer() :- Has_operating_system(\"Samsung Galaxy 1\", operating_system), Sounds_edible(operating_system).\n.output Answer"]}
{"id": 2027, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol, Is_normal:float)\nLives_in(\"red panda\", \"Himalayas\", 1).\nLives_in(\"red panda\", \"Shanghai\", 0).\n.decl Answer()\nAnswer() :- Lives_in(\"red panda\", \"Shanghai\", is_normal), is_normal = 1.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol, Is_normal:float)\nLives_in(\"red panda\", \"Himalayas\", 1).\nLives_in(\"red panda\", \"Shanghai\", 0).\n.decl Answer()\nAnswer() :- Lives_in(\"red panda\", \"Shanghai\", is_normal), is_normal = 1.\n.output Answer"]}
{"id": 2028, "answer": true, "completion": ".decl Has_dependency(Company:symbol, Material:symbol)\nHas_dependency(\"Intel\", \"silicon\").\n.decl Shortage(Material:symbol)\nShortage(\"silicon\").\n.decl Bad_for_sales(Company:symbol)\nBad_for_sales(company) :- Has_dependency(company, material), Shortage(material).\n.decl Answer()\nAnswer() :- Bad_for_sales(\"Intel\").\n.output Answer", "completions": [".decl Has_dependency(Company:symbol, Material:symbol)\nHas_dependency(\"Intel\", \"silicon\").\n.decl Shortage(Material:symbol)\nShortage(\"silicon\").\n.decl Bad_for_sales(Company:symbol)\nBad_for_sales(company) :- Has_dependency(company, material), Shortage(material).\n.decl Answer()\nAnswer() :- Bad_for_sales(\"Intel\").\n.output Answer"]}
{"id": 2029, "answer": false, "completion": ".decl Is_word(Word:symbol)\nIs_word(\"MIX\").\n.decl Is_roman_numeral(Word:symbol)\nIs_roman_numeral(\"MIX\").\n.decl Answer()\nAnswer() :- Is_word(\"MIX\"), Is_roman_numeral(\"MIX\").\n.output Answer", "completions": [".decl Is_word(Word:symbol)\nIs_word(\"MIX\").\n.decl Is_roman_numeral(Word:symbol)\nIs_roman_numeral(\"MIX\").\n.decl Answer()\nAnswer() :- Is_word(\"MIX\"), Is_roman_numeral(\"MIX\").\n.output Answer"]}
{"id": 2030, "answer": true, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Hurricane Maria\", \"Puerto Rico\").\n.decl Happens_during(Event_A:symbol, Event_B:symbol)\nHappens_during(\"windsurfing\", \"Hurricane Maria\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"Hurricane Maria\", \"Puerto Rico\"), Happens_during(\"windsurfing\", \"Hurricane Maria\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Hurricane Maria\", \"Puerto Rico\").\n.decl Happens_during(Event_A:symbol, Event_B:symbol)\nHappens_during(\"windsurfing\", \"Hurricane Maria\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"Hurricane Maria\", \"Puerto Rico\"), Happens_during(\"windsurfing\", \"Hurricane Maria\").\n.output Answer"]}
{"id": 2031, "answer": true, "completion": ".decl Featured_in_films(Object:symbol, N_films:float)\nFeatured_in_films(\"Holy Grail\", 5).\n.decl Answer()\nAnswer() :- Featured_in_films(\"Holy Grail\", n_films), n_films >= 5.\n.output Answer", "completions": [".decl Featured_in_films(Object:symbol, N_films:float)\nFeatured_in_films(\"Holy Grail\", 5).\n.decl Answer()\nAnswer() :- Featured_in_films(\"Holy Grail\", n_films), n_films >= 5.\n.output Answer"]}
{"id": 2032, "answer": true, "completion": ".decl Victim_of(Person:symbol, Victim:symbol)\nVictim_of(\"Jean Harris\", \"Dr. Herman Tarnower\").\n.decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"Dr. Herman Tarnower\", \"high-fat foods\").\n.decl Is_high_fat(Food:symbol)\nIs_high_fat(\"lentils\").\n.decl Answer()\nAnswer() :- Victim_of(\"Jean Harris\", victim), Avoids(victim, food), Is_high_fat(food).\n.output Answer", "completions": [".decl Victim_of(Person:symbol, Victim:symbol)\nVictim_of(\"Jean Harris\", \"Dr. Herman Tarnower\").\n.decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"Dr. Herman Tarnower\", \"high-fat foods\").\n.decl Is_high_fat(Food:symbol)\nIs_high_fat(\"lentils\").\n.decl Answer()\nAnswer() :- Victim_of(\"Jean Harris\", victim), Avoids(victim, food), Is_high_fat(food).\n.output Answer"]}
{"id": 2033, "answer": true, "completion": ".decl Has_license(Artwork:symbol, License_type:symbol)\nHas_license(\"The Birth of Venus\", \"Public Domain\").\n.decl Sold_license(Person:symbol, Artwork:symbol, License_type:symbol)\nSold_license(\"person\", \"The Birth of Venus\", \"Creative Commons License\").\n.decl Answer()\nAnswer() :- Sold_license(person, \"The Birth of Venus\", sold_license_type), Has_license(\"The Birth of Venus\", actual_license_type), sold_license_type != actual_license_type.\n.output Answer", "completions": [".decl Has_license(Artwork:symbol, License_type:symbol)\nHas_license(\"The Birth of Venus\", \"Public Domain\").\n.decl Sold_license(Person:symbol, Artwork:symbol, License_type:symbol)\nSold_license(\"person\", \"The Birth of Venus\", \"Creative Commons License\").\n.decl Answer()\nAnswer() :- Sold_license(person, \"The Birth of Venus\", sold_license_type), Has_license(\"The Birth of Venus\", actual_license_type), sold_license_type != actual_license_type.\n.output Answer"]}
{"id": 2034, "answer": true, "completion": ".decl Is_USAF_candidate(Person:symbol, Status:symbol)\nIs_USAF_candidate(\"Han Solo\", \"bad\").\n.decl Is_in_movie(Person:symbol, Movie:symbol)\nIs_in_movie(\"Han Solo\", \"Return of the Jedi\").\n.decl Answer()\nAnswer() :- Is_USAF_candidate(\"Han Solo\", \"bad\"), Is_in_movie(\"Han Solo\", \"Return of the Jedi\").\n.output Answer", "completions": [".decl Is_USAF_candidate(Person:symbol, Status:symbol)\nIs_USAF_candidate(\"Han Solo\", \"bad\").\n.decl Is_in_movie(Person:symbol, Movie:symbol)\nIs_in_movie(\"Han Solo\", \"Return of the Jedi\").\n.decl Answer()\nAnswer() :- Is_USAF_candidate(\"Han Solo\", \"bad\"), Is_in_movie(\"Han Solo\", \"Return of the Jedi\").\n.output Answer"]}
{"id": 2035, "answer": false, "completion": ".decl Has_first_name(Person:symbol, First_name:symbol)\nHas_first_name(\"Shaggy\", \"Orville\").\nHas_first_name(\"Redenbacher popcorn founder\", \"Orville\").\n.decl Answer()\nAnswer() :- Has_first_name(\"Shaggy\", first_name1), Has_first_name(\"Redenbacher popcorn founder\", first_name2), first_name1 = first_name2.\n.output Answer", "completions": [".decl Has_first_name(Person:symbol, First_name:symbol)\nHas_first_name(\"Shaggy\", \"Orville\").\nHas_first_name(\"Redenbacher popcorn founder\", \"Orville\").\n.decl Answer()\nAnswer() :- Has_first_name(\"Shaggy\", first_name1), Has_first_name(\"Redenbacher popcorn founder\", first_name2), first_name1 = first_name2.\n.output Answer"]}
{"id": 2036, "answer": true, "completion": ".decl Ushers_in(Event:symbol, Revolution:symbol)\nUshers_in(\"iPhone\", \"smartphone revolution\").\nUshers_in(\"scientific revolution\", \"16th century\").\n.decl Answer()\nAnswer() :- Ushers_in(\"iPhone\", \"scientific revolution\").\n.output Answer", "completions": [".decl Ushers_in(Event:symbol, Revolution:symbol)\nUshers_in(\"iPhone\", \"smartphone revolution\").\nUshers_in(\"scientific revolution\", \"16th century\").\n.decl Answer()\nAnswer() :- Ushers_in(\"iPhone\", \"scientific revolution\").\n.output Answer"]}
{"id": 2037, "answer": false, "completion": ".decl Associated_with(Object:symbol, Place:symbol)\nAssociated_with(\"gladiators\", \"Colosseum\").\n.decl Answer()\nAnswer() :- Associated_with(\"gladiators\", \"Colosseum\").\n.output Answer", "completions": [".decl Associated_with(Object:symbol, Place:symbol)\nAssociated_with(\"gladiators\", \"Colosseum\").\n.decl Answer()\nAnswer() :- Associated_with(\"gladiators\", \"Colosseum\").\n.output Answer"]}
{"id": 2038, "answer": false, "completion": ".decl Suffered_from(Person:symbol, Disorder:symbol)\nSuffered_from(\"Van Gogh\", \"mental disorder\").\n.decl Answer()\nAnswer() :- Suffered_from(\"Van Gogh\", \"mental disorder\").\n.output Answer", "completions": [".decl Suffered_from(Person:symbol, Disorder:symbol)\nSuffered_from(\"Van Gogh\", \"mental disorder\").\n.decl Answer()\nAnswer() :- Suffered_from(\"Van Gogh\", \"mental disorder\").\n.output Answer"]}
{"id": 2039, "answer": false, "completion": ".decl Celebrates(Group:symbol, Holiday:symbol)\nCelebrates(\"Jehovah's Witnesses\", \"none\").\n.decl Holiday_date(Holiday:symbol, Date:symbol)\nHoliday_date(\"New Year's Day\", \"January 1\").\n.decl Day_before(Holiday:symbol, Date:symbol)\nDay_before(\"New Year's Day\", \"December 31\").\n.decl Answer()\nAnswer() :- Celebrates(\"Jehovah's Witnesses\", holiday), Day_before(\"New Year's Day\", date), Holiday_date(holiday, date).\nAnswer() :- Celebrates(\"Jehovah's Witnesses\", \"none\").\n.output Answer", "completions": [".decl Celebrates(Group:symbol, Holiday:symbol)\nCelebrates(\"Jehovah's Witnesses\", \"none\").\n.decl Holiday_date(Holiday:symbol, Date:symbol)\nHoliday_date(\"New Year's Day\", \"January 1\").\n.decl Day_before(Holiday:symbol, Date:symbol)\nDay_before(\"New Year's Day\", \"December 31\").\n.decl Answer()\nAnswer() :- Celebrates(\"Jehovah's Witnesses\", holiday), Day_before(\"New Year's Day\", date), Holiday_date(holiday, date).\nAnswer() :- Celebrates(\"Jehovah's Witnesses\", \"none\").\n.output Answer"]}
{"id": 2040, "answer": true, "completion": ".decl Is_solid(Object:symbol, Solid:float)\nIs_solid(\"Saturn's rings\", 0).\n.decl Answer()\nAnswer() :- Is_solid(\"Saturn's rings\", solid), solid = 1.\n.output Answer", "completions": [".decl Is_solid(Object:symbol, Solid:float)\nIs_solid(\"Saturn's rings\", 0).\n.decl Answer()\nAnswer() :- Is_solid(\"Saturn's rings\", solid), solid = 1.\n.output Answer"]}
{"id": 2041, "answer": true, "completion": ".decl Needs_hot_water(Task:symbol)\nNeeds_hot_water(\"peel a tomato\").\n.decl Needs_cold_water(Task:symbol)\nNeeds_cold_water(\"peel a tomato\").\n.decl Answer()\nAnswer() :- Needs_hot_water(\"peel a tomato\"), Needs_cold_water(\"peel a tomato\").\n.output Answer", "completions": [".decl Needs_hot_water(Task:symbol)\nNeeds_hot_water(\"peel a tomato\").\n.decl Needs_cold_water(Task:symbol)\nNeeds_cold_water(\"peel a tomato\").\n.decl Answer()\nAnswer() :- Needs_hot_water(\"peel a tomato\"), Needs_cold_water(\"peel a tomato\").\n.output Answer"]}
{"id": 2042, "answer": true, "completion": ".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Dolce & Gabbana suit wearer\", \"Dolce & Gabbana suit\").\n.decl Belongs_to(Person:symbol, Community:symbol)\nBelongs_to(\"Amish cousin\", \"Amish\").\n.decl Accepts(Community:symbol, Clothing:symbol)\nAccepts(\"Amish\", \"plain clothing\").\n.decl Shunned(Person_A:symbol, Person_B:symbol)\nShunned(personA, personB) :- Wears(personA, clothing), Belongs_to(personB, community), !Accepts(community, clothing).\n.decl Answer()\nAnswer() :- Shunned(\"Dolce & Gabbana suit wearer\", \"Amish cousin\").\n.output Answer", "completions": [".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Dolce & Gabbana suit wearer\", \"Dolce & Gabbana suit\").\n.decl Belongs_to(Person:symbol, Community:symbol)\nBelongs_to(\"Amish cousin\", \"Amish\").\n.decl Accepts(Community:symbol, Clothing:symbol)\nAccepts(\"Amish\", \"plain clothing\").\n.decl Shunned(Person_A:symbol, Person_B:symbol)\nShunned(personA, personB) :- Wears(personA, clothing), Belongs_to(personB, community), !Accepts(community, clothing).\n.decl Answer()\nAnswer() :- Shunned(\"Dolce & Gabbana suit wearer\", \"Amish cousin\").\n.output Answer"]}
{"id": 2043, "answer": true, "completion": ".decl Main_character(Game:symbol, Character:symbol, Color:symbol)\nMain_character(\"Super Mario\", \"Mario\", \"red\").\nMain_character(\"Super Mario\", \"Luigi\", \"green\").\n.decl Answer()\nAnswer() :- Main_character(\"Super Mario\", character, \"green\"), !Main_character(\"Super Mario\", character, \"red\").\n.output Answer", "completions": [".decl Main_character(Game:symbol, Character:symbol, Color:symbol)\nMain_character(\"Super Mario\", \"Mario\", \"red\").\nMain_character(\"Super Mario\", \"Luigi\", \"green\").\n.decl Answer()\nAnswer() :- Main_character(\"Super Mario\", character, \"green\"), !Main_character(\"Super Mario\", character, \"red\").\n.output Answer"]}
{"id": 2044, "answer": false, "completion": ".decl Is_wonder(Object:symbol, Kind:symbol)\nIs_wonder(\"Great Pyramid of Giza\", \"pyramid\").\n.decl Is_last(Object:symbol, Kind:symbol)\nIs_last(\"Great Pyramid of Giza\", \"pyramid\").\n.decl Answer()\nAnswer() :- Is_wonder(\"Great Pyramid of Giza\", kind), Is_last(\"Great Pyramid of Giza\", kind).\n.output Answer", "completions": [".decl Is_wonder(Object:symbol, Kind:symbol)\nIs_wonder(\"Great Pyramid of Giza\", \"pyramid\").\n.decl Is_last(Object:symbol, Kind:symbol)\nIs_last(\"Great Pyramid of Giza\", \"pyramid\").\n.decl Answer()\nAnswer() :- Is_wonder(\"Great Pyramid of Giza\", kind), Is_last(\"Great Pyramid of Giza\", kind).\n.output Answer"]}
{"id": 2045, "answer": true, "completion": ".decl Was_baptized(Person:symbol)\nWas_baptized(\"Jesus Christ\").\n.decl Answer()\nAnswer() :- Was_baptized(\"Alexander the Great\").\n.output Answer", "completions": [".decl Was_baptized(Person:symbol)\nWas_baptized(\"Jesus Christ\").\n.decl Answer()\nAnswer() :- Was_baptized(\"Alexander the Great\").\n.output Answer"]}
{"id": 2046, "answer": true, "completion": ".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Causes_hypothermia(Temperature:float)\nCauses_hypothermia(T) :- T < 35.\n.decl Answer()\nAnswer() :- Has_temperature(\"Venus\", temperature), !Causes_hypothermia(temperature).\n.output Answer", "completions": [".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Causes_hypothermia(Temperature:float)\nCauses_hypothermia(T) :- T < 35.\n.decl Answer()\nAnswer() :- Has_temperature(\"Venus\", temperature), !Causes_hypothermia(temperature).\n.output Answer"]}
{"id": 2047, "answer": true, "completion": ".decl Plays_well_in_NBA(Person:symbol)\nPlays_well_in_NBA(\"Benito Mussolini\").\n.decl Answer()\nAnswer() :- Plays_well_in_NBA(\"Benito Mussolini\").\n.output Answer", "completions": [".decl Plays_well_in_NBA(Person:symbol)\nPlays_well_in_NBA(\"Benito Mussolini\").\n.decl Answer()\nAnswer() :- Plays_well_in_NBA(\"Benito Mussolini\").\n.output Answer"]}
{"id": 2048, "answer": true, "completion": ".decl Is_taller(Person_A:symbol, Person_B:symbol)\nIs_taller(\"LeBron James\", \"Yuri Gagarin\").\n.decl Answer()\nAnswer() :- !Is_taller(\"LeBron James\", \"Yuri Gagarin\").\n.output Answer", "completions": [".decl Is_taller(Person_A:symbol, Person_B:symbol)\nIs_taller(\"LeBron James\", \"Yuri Gagarin\").\n.decl Answer()\nAnswer() :- !Is_taller(\"LeBron James\", \"Yuri Gagarin\").\n.output Answer"]}
{"id": 2049, "answer": true, "completion": ".decl Has_final_resting_place(Person:symbol, Place:symbol)\nHas_final_resting_place(\"Carl Linnaeus\", \"Uppsala Cathedral\").\nHas_final_resting_place(\"Michael Jackson\", \"Forest Lawn Memorial Park\").\n.decl Answer()\nAnswer() :- Has_final_resting_place(\"Carl Linnaeus\", place1), Has_final_resting_place(\"Michael Jackson\", place2), place1 = place2.\n.output Answer", "completions": [".decl Has_final_resting_place(Person:symbol, Place:symbol)\nHas_final_resting_place(\"Carl Linnaeus\", \"Uppsala Cathedral\").\nHas_final_resting_place(\"Michael Jackson\", \"Forest Lawn Memorial Park\").\n.decl Answer()\nAnswer() :- Has_final_resting_place(\"Carl Linnaeus\", place1), Has_final_resting_place(\"Michael Jackson\", place2), place1 = place2.\n.output Answer"]}
{"id": 2050, "answer": false, "completion": ".decl Works_in_industry(Profession:symbol, Industry:symbol)\nWorks_in_industry(\"cooper\", \"beverage industry\").\n.decl Answer()\nAnswer() :- Works_in_industry(\"cooper\", \"beverage industry\").\n.output Answer", "completions": [".decl Works_in_industry(Profession:symbol, Industry:symbol)\nWorks_in_industry(\"cooper\", \"beverage industry\").\n.decl Answer()\nAnswer() :- Works_in_industry(\"cooper\", \"beverage industry\").\n.output Answer"]}
{"id": 2051, "answer": false, "completion": ".decl Despised(Pope:symbol)\nDespised(\"Pope Alexander VI\").\n.decl Descendant(Person:symbol, Ancestor:symbol)\nDescendant(\"Cesare Borgia\", \"Pope Alexander VI\").\nDescendant(\"Lucrezia Borgia\", \"Pope Alexander VI\").\n.decl Canonized(Person:symbol)\nCanonized(\"Saint Francis Borgia\").\nDescendant(\"Saint Francis Borgia\", \"Cesare Borgia\").\n.decl Answer()\nAnswer() :- Despised(pope), Descendant(person, pope), Canonized(person).\n.output Answer", "completions": [".decl Despised(Pope:symbol)\nDespised(\"Pope Alexander VI\").\n.decl Descendant(Person:symbol, Ancestor:symbol)\nDescendant(\"Cesare Borgia\", \"Pope Alexander VI\").\nDescendant(\"Lucrezia Borgia\", \"Pope Alexander VI\").\n.decl Canonized(Person:symbol)\nCanonized(\"Saint Francis Borgia\").\nDescendant(\"Saint Francis Borgia\", \"Cesare Borgia\").\n.decl Answer()\nAnswer() :- Despised(pope), Descendant(person, pope), Canonized(person).\n.output Answer"]}
{"id": 2052, "answer": true, "completion": ".decl Attends_school(Person:symbol, School:symbol)\nAttends_school(\"student\", \"Smithtown's Cleary School\").\n.decl Teaches_language(School:symbol, Language:symbol)\nTeaches_language(\"Smithtown's Cleary School\", \"French\").\n.decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"French person\", \"French\").\n.decl Answer()\nAnswer() :- Attends_school(student, school), Teaches_language(school, language), Speaks_language(\"French person\", language).\n.output Answer", "completions": [".decl Attends_school(Person:symbol, School:symbol)\nAttends_school(\"student\", \"Smithtown's Cleary School\").\n.decl Teaches_language(School:symbol, Language:symbol)\nTeaches_language(\"Smithtown's Cleary School\", \"French\").\n.decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"French person\", \"French\").\n.decl Answer()\nAnswer() :- Attends_school(student, school), Teaches_language(school, language), Speaks_language(\"French person\", language).\n.output Answer"]}
{"id": 2053, "answer": true, "completion": ".decl Appears_in_movie(Animal:symbol, Movie:symbol)\nAppears_in_movie(\"golden retriever\", \"Homeward Bound\").\nAppears_in_movie(\"american bulldog\", \"Homeward Bound\").\nAppears_in_movie(\"cat\", \"Homeward Bound\").\n.decl Answer()\nAnswer() :- Appears_in_movie(\"greyhound\", \"Homeward Bound\").\n.output Answer", "completions": [".decl Appears_in_movie(Animal:symbol, Movie:symbol)\nAppears_in_movie(\"golden retriever\", \"Homeward Bound\").\nAppears_in_movie(\"american bulldog\", \"Homeward Bound\").\nAppears_in_movie(\"cat\", \"Homeward Bound\").\n.decl Answer()\nAnswer() :- Appears_in_movie(\"greyhound\", \"Homeward Bound\").\n.output Answer"]}
{"id": 2054, "answer": true, "completion": ".decl Wrote_about(Author:symbol, Topic:symbol)\nWrote_about(\"Terry Pratchett\", \"fantasy\").\nWrote_about(\"Terry Pratchett\", \"satire\").\nWrote_about(\"Terry Pratchett\", \"Discworld\").\n.decl Answer()\nAnswer() :- Wrote_about(\"Terry Pratchett\", \"quantum mechanics\").\n.output Answer", "completions": [".decl Wrote_about(Author:symbol, Topic:symbol)\nWrote_about(\"Terry Pratchett\", \"fantasy\").\nWrote_about(\"Terry Pratchett\", \"satire\").\nWrote_about(\"Terry Pratchett\", \"Discworld\").\n.decl Answer()\nAnswer() :- Wrote_about(\"Terry Pratchett\", \"quantum mechanics\").\n.output Answer"]}
{"id": 2055, "answer": true, "completion": ".decl Majority_religion(Country:symbol, Religion:symbol)\nMajority_religion(\"Cyprus\", \"Christianity\").\n.decl Is_Islamophobia_against(Religion:symbol)\nIs_Islamophobia_against(\"Islam\").\n.decl Answer()\nAnswer() :- Majority_religion(\"Cyprus\", religion), Is_Islamophobia_against(religion).\nAnswer() :- Majority_religion(\"Cyprus\", religion1), Is_Islamophobia_against(religion2), religion1 != religion2.\n.output Answer", "completions": [".decl Majority_religion(Country:symbol, Religion:symbol)\nMajority_religion(\"Cyprus\", \"Christianity\").\n.decl Is_Islamophobia_against(Religion:symbol)\nIs_Islamophobia_against(\"Islam\").\n.decl Answer()\nAnswer() :- Majority_religion(\"Cyprus\", religion), Is_Islamophobia_against(religion).\nAnswer() :- Majority_religion(\"Cyprus\", religion1), Is_Islamophobia_against(religion2), religion1 != religion2.\n.output Answer"]}
{"id": 2056, "answer": false, "completion": ".decl Is_fan_of(Person:symbol, Team:symbol)\n.decl Is_politician(Politician:symbol, Party:symbol)\n.decl Can_vote_for(Person:symbol, Politician:symbol)\n\nIs_fan_of(\"person\", \"Botany Swarm\").\nIs_politician(\"John Key\", \"National Party\").\n\nCan_vote_for(\"person\", \"John Key\") :- Is_fan_of(\"person\", \"Botany Swarm\"), Is_politician(\"John Key\", \"National Party\").\n\n.decl Answer()\nAnswer() :- Can_vote_for(\"person\", \"John Key\").\n.output Answer", "completions": [".decl Is_fan_of(Person:symbol, Team:symbol)\n.decl Is_politician(Politician:symbol, Party:symbol)\n.decl Can_vote_for(Person:symbol, Politician:symbol)\n\nIs_fan_of(\"person\", \"Botany Swarm\").\nIs_politician(\"John Key\", \"National Party\").\n\nCan_vote_for(\"person\", \"John Key\") :- Is_fan_of(\"person\", \"Botany Swarm\"), Is_politician(\"John Key\", \"National Party\").\n\n.decl Answer()\nAnswer() :- Can_vote_for(\"person\", \"John Key\").\n.output Answer"]}
{"id": 2057, "answer": true, "completion": ".decl Held_concert(Band:symbol, Venue:symbol)\nHeld_concert(\"Maroon 5\", \"Roman Colosseum\").\n.decl Existed_in_time(Object:symbol, Time_period:symbol)\nExisted_in_time(\"Roman Colosseum\", \"Ancient Rome\").\nExisted_in_time(\"Maroon 5\", \"21st Century\").\n.decl Overlaps(Time_period_A:symbol, Time_period_B:symbol)\nOverlaps(\"Ancient Rome\", \"21st Century\").\n.decl Answer()\nAnswer() :- Held_concert(\"Maroon 5\", \"Roman Colosseum\"), Existed_in_time(\"Maroon 5\", time1), Existed_in_time(\"Roman Colosseum\", time2), Overlaps(time1, time2).\n.output Answer", "completions": [".decl Held_concert(Band:symbol, Venue:symbol)\nHeld_concert(\"Maroon 5\", \"Roman Colosseum\").\n.decl Existed_in_time(Object:symbol, Time_period:symbol)\nExisted_in_time(\"Roman Colosseum\", \"Ancient Rome\").\nExisted_in_time(\"Maroon 5\", \"21st Century\").\n.decl Overlaps(Time_period_A:symbol, Time_period_B:symbol)\nOverlaps(\"Ancient Rome\", \"21st Century\").\n.decl Answer()\nAnswer() :- Held_concert(\"Maroon 5\", \"Roman Colosseum\"), Existed_in_time(\"Maroon 5\", time1), Existed_in_time(\"Roman Colosseum\", time2), Overlaps(time1, time2).\n.output Answer"]}
{"id": 2058, "answer": true, "completion": ".decl Is_Paleo_Friendly(Food:symbol)\nIs_Paleo_Friendly(\"meat\").\nIs_Paleo_Friendly(\"fish\").\nIs_Paleo_Friendly(\"eggs\").\nIs_Paleo_Friendly(\"vegetables\").\nIs_Paleo_Friendly(\"fruits\").\nIs_Paleo_Friendly(\"nuts\").\nIs_Paleo_Friendly(\"seeds\").\n.decl Eats(Character:symbol, Food:symbol)\nEats(\"Cookie Monster\", \"cookies\").\n.decl Answer()\nAnswer() :- Eats(\"Cookie Monster\", food), !Is_Paleo_Friendly(food).\n.output Answer", "completions": [".decl Is_Paleo_Friendly(Food:symbol)\nIs_Paleo_Friendly(\"meat\").\nIs_Paleo_Friendly(\"fish\").\nIs_Paleo_Friendly(\"eggs\").\nIs_Paleo_Friendly(\"vegetables\").\nIs_Paleo_Friendly(\"fruits\").\nIs_Paleo_Friendly(\"nuts\").\nIs_Paleo_Friendly(\"seeds\").\n.decl Eats(Character:symbol, Food:symbol)\nEats(\"Cookie Monster\", \"cookies\").\n.decl Answer()\nAnswer() :- Eats(\"Cookie Monster\", food), !Is_Paleo_Friendly(food).\n.output Answer"]}
{"id": 2059, "answer": true, "completion": ".decl Seen_at_event(Animal:symbol, Event:symbol)\nSeen_at_event(\"stork\", \"baby shower\").\n.decl Answer()\nAnswer() :- Seen_at_event(\"stork\", \"baby shower\").\n.output Answer", "completions": [".decl Seen_at_event(Animal:symbol, Event:symbol)\nSeen_at_event(\"stork\", \"baby shower\").\n.decl Answer()\nAnswer() :- Seen_at_event(\"stork\", \"baby shower\").\n.output Answer"]}
{"id": 2060, "answer": true, "completion": ".decl Appears_in(Object:symbol, Event:symbol)\nAppears_in(\"hyenas\", \"The Lion King\").\n.decl Is_Broadway_musical(Event:symbol)\nIs_Broadway_musical(\"The Lion King\").\n.decl Answer()\nAnswer() :- Appears_in(\"hyenas\", event), Is_Broadway_musical(event).\n.output Answer", "completions": [".decl Appears_in(Object:symbol, Event:symbol)\nAppears_in(\"hyenas\", \"The Lion King\").\n.decl Is_Broadway_musical(Event:symbol)\nIs_Broadway_musical(\"The Lion King\").\n.decl Answer()\nAnswer() :- Appears_in(\"hyenas\", event), Is_Broadway_musical(event).\n.output Answer"]}
{"id": 2061, "answer": false, "completion": ".decl Helped_establish(Person:symbol, University:symbol)\nHelped_establish(\"Millard Fillmore\", \"University at Buffalo\").\n.decl University(Name:symbol)\nUniversity(\"University of Pittsburgh\").\n.decl Answer()\nAnswer() :- Helped_establish(\"Millard Fillmore\", \"University of Pittsburgh\").\n.output Answer", "completions": [".decl Helped_establish(Person:symbol, University:symbol)\nHelped_establish(\"Millard Fillmore\", \"University at Buffalo\").\n.decl University(Name:symbol)\nUniversity(\"University of Pittsburgh\").\n.decl Answer()\nAnswer() :- Helped_establish(\"Millard Fillmore\", \"University of Pittsburgh\").\n.output Answer"]}
{"id": 2062, "answer": false, "completion": ".decl Has_carbon_footprint(Belief:symbol, Carbon_footprint:float)\nHas_carbon_footprint(\"Christianity\", 100).\nHas_carbon_footprint(\"Satanism\", 150).\n.decl Answer()\nAnswer() :- Has_carbon_footprint(\"Christianity\", carbon_footprint1), Has_carbon_footprint(\"Satanism\", carbon_footprint2), carbon_footprint1 < carbon_footprint2.\n.output Answer", "completions": [".decl Has_carbon_footprint(Belief:symbol, Carbon_footprint:float)\nHas_carbon_footprint(\"Christianity\", 100).\nHas_carbon_footprint(\"Satanism\", 150).\n.decl Answer()\nAnswer() :- Has_carbon_footprint(\"Christianity\", carbon_footprint1), Has_carbon_footprint(\"Satanism\", carbon_footprint2), carbon_footprint1 < carbon_footprint2.\n.output Answer"]}
{"id": 2063, "answer": true, "completion": ".decl Has_criminal_record(Person:symbol, Age_range:symbol)\nHas_criminal_record(\"Robert Downey Jr.\", \"young\").\n.decl Is_good_role_model(Person:symbol, Age_range:symbol)\nIs_good_role_model(person, age_range) :- !Has_criminal_record(person, age_range).\n.decl Answer()\nAnswer() :- !Is_good_role_model(\"Robert Downey Jr.\", \"young\").\n.output Answer", "completions": [".decl Has_criminal_record(Person:symbol, Age_range:symbol)\nHas_criminal_record(\"Robert Downey Jr.\", \"young\").\n.decl Is_good_role_model(Person:symbol, Age_range:symbol)\nIs_good_role_model(person, age_range) :- !Has_criminal_record(person, age_range).\n.decl Answer()\nAnswer() :- !Is_good_role_model(\"Robert Downey Jr.\", \"young\").\n.output Answer"]}
{"id": 2064, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"coin\", 8.9).\nHas_density(\"mercury\", 13.6).\n.decl Answer()\nAnswer() :- Has_density(\"coin\", density1), Has_density(\"mercury\", density2), density1 < density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"coin\", 8.9).\nHas_density(\"mercury\", 13.6).\n.decl Answer()\nAnswer() :- Has_density(\"coin\", density1), Has_density(\"mercury\", density2), density1 < density2.\n.output Answer"]}
{"id": 2065, "answer": true, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Newt Gingrich\", \"Newt\").\n.decl Is_type_of(Object:symbol, Category:symbol)\nIs_type_of(\"newt\", \"reptile\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Newt Gingrich\", nickname), Is_type_of(nickname, \"reptile\").\n.output Answer", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Newt Gingrich\", \"Newt\").\n.decl Is_type_of(Object:symbol, Category:symbol)\nIs_type_of(\"newt\", \"reptile\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Newt Gingrich\", nickname), Is_type_of(nickname, \"reptile\").\n.output Answer"]}
{"id": 2066, "answer": false, "completion": ".decl Broke_commandment(Person:symbol, Commandment_number:float)\nBroke_commandment(\"Christopher Columbus\", 5).\n.decl Is_commandment_in_religion(Commandment_number:float, Religion:symbol)\nIs_commandment_in_religion(5, \"Christianity\").\n.decl Answer()\nAnswer() :- Broke_commandment(\"Christopher Columbus\", commandment_number), Is_commandment_in_religion(commandment_number, \"Christianity\").\n.output Answer", "completions": [".decl Broke_commandment(Person:symbol, Commandment_number:float)\nBroke_commandment(\"Christopher Columbus\", 5).\n.decl Is_commandment_in_religion(Commandment_number:float, Religion:symbol)\nIs_commandment_in_religion(5, \"Christianity\").\n.decl Answer()\nAnswer() :- Broke_commandment(\"Christopher Columbus\", commandment_number), Is_commandment_in_religion(commandment_number, \"Christianity\").\n.output Answer"]}
{"id": 2067, "answer": true, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Reconstruction era coin\", 0.01).\nHas_value(\"DJI Mavic Pro Drone\", 999).\n.decl Answer()\nAnswer() :- Has_value(\"Reconstruction era coin\", value1), Has_value(\"DJI Mavic Pro Drone\", value2), value1 >= value2.\n.output Answer", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Reconstruction era coin\", 0.01).\nHas_value(\"DJI Mavic Pro Drone\", 999).\n.decl Answer()\nAnswer() :- Has_value(\"Reconstruction era coin\", value1), Has_value(\"DJI Mavic Pro Drone\", value2), value1 >= value2.\n.output Answer"]}
{"id": 2068, "answer": true, "completion": ".decl Is_safe_to_drink(Water_type:symbol, Age:float)\nIs_safe_to_drink(\"chlorine water\", 1).\nIs_safe_to_drink(\"chlorine water\", 2).\nIs_safe_to_drink(\"chlorine water\", 3).\nIs_safe_to_drink(\"chlorine water\", 4).\nIs_safe_to_drink(\"chlorine water\", 5).\nIs_safe_to_drink(\"chlorine water\", 6).\nIs_safe_to_drink(\"chlorine water\", 7).\n.decl Answer()\nAnswer() :- Is_safe_to_drink(\"chlorine water\", 7).\n.output Answer", "completions": [".decl Is_safe_to_drink(Water_type:symbol, Age:float)\nIs_safe_to_drink(\"chlorine water\", 1).\nIs_safe_to_drink(\"chlorine water\", 2).\nIs_safe_to_drink(\"chlorine water\", 3).\nIs_safe_to_drink(\"chlorine water\", 4).\nIs_safe_to_drink(\"chlorine water\", 5).\nIs_safe_to_drink(\"chlorine water\", 6).\nIs_safe_to_drink(\"chlorine water\", 7).\n.decl Answer()\nAnswer() :- Is_safe_to_drink(\"chlorine water\", 7).\n.output Answer"]}
{"id": 2069, "answer": true, "completion": ".decl Associated_with(Object:symbol, Symbol:symbol)\nAssociated_with(\"breast cancer\", \"ribbon\").\n.decl Answer()\nAnswer() :- Associated_with(\"breast cancer\", \"ribbon\").\n.output Answer", "completions": [".decl Associated_with(Object:symbol, Symbol:symbol)\nAssociated_with(\"breast cancer\", \"ribbon\").\n.decl Answer()\nAnswer() :- Associated_with(\"breast cancer\", \"ribbon\").\n.output Answer"]}
{"id": 2070, "answer": true, "completion": ".decl Is_paraplegic(Person:symbol)\nIs_paraplegic(\"person\").\n.decl Can_conduct_orchestra(Person:symbol)\nCan_conduct_orchestra(\"person\").\n.decl Answer()\nAnswer() :- Is_paraplegic(\"person\"), Can_conduct_orchestra(\"person\").\n.output Answer", "completions": [".decl Is_paraplegic(Person:symbol)\nIs_paraplegic(\"person\").\n.decl Can_conduct_orchestra(Person:symbol)\nCan_conduct_orchestra(\"person\").\n.decl Answer()\nAnswer() :- Is_paraplegic(\"person\"), Can_conduct_orchestra(\"person\").\n.output Answer"]}
{"id": 2071, "answer": true, "completion": ".decl Has_votes(Candidate:symbol, Votes:float)\nHas_votes(\"Ronald Reagan\", 48942669).\nHas_votes(\"Jimmy Carter\", 35480948).\n.decl Total_votes(Votes:float)\nTotal_votes(84423617).\n.decl Vote_percentage(Candidate:symbol, Percentage:float)\nVote_percentage(candidate, percentage) :- Has_votes(candidate, votes), Total_votes(total_votes), percentage = votes / total_votes.\n.decl Difference(Candidate_A:symbol, Candidate_B:symbol, Difference:float)\nDifference(candidate_a, candidate_b, difference) :- Vote_percentage(candidate_a, percentage_a), Vote_percentage(candidate_b, percentage_b), difference = abs(percentage_a - percentage_b).\n.decl Is_photo_finish(Difference:float)\nIs_photo_finish(0.01).\n.decl Answer()\nAnswer() :- Difference(\"Ronald Reagan\", \"Jimmy Carter\", difference), Is_photo_finish(photo_finish), difference <= photo_finish.\n.output Answer", "completions": [".decl Has_votes(Candidate:symbol, Votes:float)\nHas_votes(\"Ronald Reagan\", 48942669).\nHas_votes(\"Jimmy Carter\", 35480948).\n.decl Total_votes(Votes:float)\nTotal_votes(84423617).\n.decl Vote_percentage(Candidate:symbol, Percentage:float)\nVote_percentage(candidate, percentage) :- Has_votes(candidate, votes), Total_votes(total_votes), percentage = votes / total_votes.\n.decl Difference(Candidate_A:symbol, Candidate_B:symbol, Difference:float)\nDifference(candidate_a, candidate_b, difference) :- Vote_percentage(candidate_a, percentage_a), Vote_percentage(candidate_b, percentage_b), difference = abs(percentage_a - percentage_b).\n.decl Is_photo_finish(Difference:float)\nIs_photo_finish(0.01).\n.decl Answer()\nAnswer() :- Difference(\"Ronald Reagan\", \"Jimmy Carter\", difference), Is_photo_finish(photo_finish), difference <= photo_finish.\n.output Answer"]}
{"id": 2072, "answer": false, "completion": ".decl Cures(Object:symbol, Illness:symbol)\nCures(\"cowbell\", \"fever\").\n.decl Answer()\nAnswer() :- Cures(\"cowbell\", \"fever\").\n.output Answer", "completions": [".decl Cures(Object:symbol, Illness:symbol)\nCures(\"cowbell\", \"fever\").\n.decl Answer()\nAnswer() :- Cures(\"cowbell\", \"fever\").\n.output Answer"]}
{"id": 2073, "answer": true, "completion": ".decl Can_sting_multiple(Object:symbol, Answer:symbol)\nCan_sting_multiple(\"honey bee\", \"no\").\n.decl Answer(Answer:symbol)\nAnswer(answer) :- Can_sting_multiple(\"honey bee\", answer).\n.output Answer", "completions": [".decl Can_sting_multiple(Object:symbol, Answer:symbol)\nCan_sting_multiple(\"honey bee\", \"no\").\n.decl Answer(Answer:symbol)\nAnswer(answer) :- Can_sting_multiple(\"honey bee\", answer).\n.output Answer"]}
{"id": 2074, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Bob Marley\", 11).\nHas_n_children(\"Kublai Khan\", 22).\n.decl Answer()\nAnswer() :- Has_n_children(\"Bob Marley\", n_children1), Has_n_children(\"Kublai Khan\", n_children2), n_children1 > n_children2.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Bob Marley\", 11).\nHas_n_children(\"Kublai Khan\", 22).\n.decl Answer()\nAnswer() :- Has_n_children(\"Bob Marley\", n_children1), Has_n_children(\"Kublai Khan\", n_children2), n_children1 > n_children2.\n.output Answer"]}
{"id": 2075, "answer": true, "completion": ".decl Made_foolish(Person:symbol, Target:symbol)\nMade_foolish(\"Harry Houdini's wife\", \"psychics\").\n.decl Answer()\nAnswer() :- Made_foolish(\"Harry Houdini's wife\", \"psychics\").\n.output Answer", "completions": [".decl Made_foolish(Person:symbol, Target:symbol)\nMade_foolish(\"Harry Houdini's wife\", \"psychics\").\n.decl Answer()\nAnswer() :- Made_foolish(\"Harry Houdini's wife\", \"psychics\").\n.output Answer"]}
{"id": 2076, "answer": false, "completion": ".decl Guest_starred(Actor:symbol, TV_show:symbol)\nGuest_starred(\"Joan Crawford\", \"JAG\").\n.decl Answer()\nAnswer() :- Guest_starred(\"Joan Crawford\", \"JAG\").\n.output Answer", "completions": [".decl Guest_starred(Actor:symbol, TV_show:symbol)\nGuest_starred(\"Joan Crawford\", \"JAG\").\n.decl Answer()\nAnswer() :- Guest_starred(\"Joan Crawford\", \"JAG\").\n.output Answer"]}
{"id": 2077, "answer": true, "completion": ".decl Causes_skin_color_change(Remedy:symbol, Color:symbol)\nCauses_skin_color_change(\"colloidal silver\", \"blue\").\n.decl Is_home_remedy(Remedy:symbol)\nIs_home_remedy(\"colloidal silver\").\n.decl Answer()\nAnswer() :- Causes_skin_color_change(remedy, \"blue\"), Is_home_remedy(remedy).\n.output Answer", "completions": [".decl Causes_skin_color_change(Remedy:symbol, Color:symbol)\nCauses_skin_color_change(\"colloidal silver\", \"blue\").\n.decl Is_home_remedy(Remedy:symbol)\nIs_home_remedy(\"colloidal silver\").\n.decl Answer()\nAnswer() :- Causes_skin_color_change(remedy, \"blue\"), Is_home_remedy(remedy).\n.output Answer"]}
{"id": 2078, "answer": true, "completion": ".decl Occurs_in_year(Event:symbol, Year:float)\nOccurs_in_year(\"1936 Summer Olympics\", 1936).\n.decl Exists_between_years(Object:symbol, Start_year:float, End_year:float)\nExists_between_years(\"Berlin Wall\", 1961, 1989).\n.decl Prevents(Object:symbol, Event:symbol)\n.decl Answer()\nAnswer() :- Prevents(\"Berlin Wall\", \"1936 Summer Olympics\").\nAnswer() :- Occurs_in_year(\"1936 Summer Olympics\", year1), Exists_between_years(\"Berlin Wall\", start_year, end_year), year1 >= start_year, year1 <= end_year.\n.output Answer", "completions": [".decl Occurs_in_year(Event:symbol, Year:float)\nOccurs_in_year(\"1936 Summer Olympics\", 1936).\n.decl Exists_between_years(Object:symbol, Start_year:float, End_year:float)\nExists_between_years(\"Berlin Wall\", 1961, 1989).\n.decl Prevents(Object:symbol, Event:symbol)\n.decl Answer()\nAnswer() :- Prevents(\"Berlin Wall\", \"1936 Summer Olympics\").\nAnswer() :- Occurs_in_year(\"1936 Summer Olympics\", year1), Exists_between_years(\"Berlin Wall\", start_year, end_year), year1 >= start_year, year1 <= end_year.\n.output Answer"]}
{"id": 2079, "answer": true, "completion": ".decl Flight_duration(From:symbol, To:symbol, Duration:float)\nFlight_duration(\"New York\", \"Kansas City\", 3.5).\n.decl Movie_duration(Movie:symbol, Duration:float)\nMovie_duration(\"Batman (1989 film)\", 2.1).\n.decl Answer()\nAnswer() :- Flight_duration(\"New York\", \"Kansas City\", flight_duration), Movie_duration(\"Batman (1989 film)\", movie_duration), movie_duration <= flight_duration.\n.output Answer", "completions": [".decl Flight_duration(From:symbol, To:symbol, Duration:float)\nFlight_duration(\"New York\", \"Kansas City\", 3.5).\n.decl Movie_duration(Movie:symbol, Duration:float)\nMovie_duration(\"Batman (1989 film)\", 2.1).\n.decl Answer()\nAnswer() :- Flight_duration(\"New York\", \"Kansas City\", flight_duration), Movie_duration(\"Batman (1989 film)\", movie_duration), movie_duration <= flight_duration.\n.output Answer"]}
{"id": 2080, "answer": true, "completion": ".decl Killed_n_people(Person:symbol, Year:float, N_people:float)\nKilled_n_people(\"Don King\", _, 1).\nKilled_n_people(\"Charles Manson\", 1971, 0).\n.decl Answer()\nAnswer() :- Killed_n_people(\"Don King\", _, n_people1), Killed_n_people(\"Charles Manson\", 1971, n_people2), n_people1 > n_people2.\n.output Answer", "completions": [".decl Killed_n_people(Person:symbol, Year:float, N_people:float)\nKilled_n_people(\"Don King\", _, 1).\nKilled_n_people(\"Charles Manson\", 1971, 0).\n.decl Answer()\nAnswer() :- Killed_n_people(\"Don King\", _, n_people1), Killed_n_people(\"Charles Manson\", 1971, n_people2), n_people1 > n_people2.\n.output Answer"]}
{"id": 2081, "answer": false, "completion": ".decl Caused_by(Organism:symbol, Disease:symbol)\nCaused_by(\"Yersinia pestis\", \"Black Death\").\n.decl Is_type(Organism:symbol, Type:symbol)\nIs_type(\"amoeba\", \"protist\").\nIs_type(\"Yersinia pestis\", \"bacteria\").\n.decl Answer()\nAnswer() :- Caused_by(organism, \"Black Death\"), Is_type(organism, \"protist\").\n.output Answer", "completions": [".decl Caused_by(Organism:symbol, Disease:symbol)\nCaused_by(\"Yersinia pestis\", \"Black Death\").\n.decl Is_type(Organism:symbol, Type:symbol)\nIs_type(\"amoeba\", \"protist\").\nIs_type(\"Yersinia pestis\", \"bacteria\").\n.decl Answer()\nAnswer() :- Caused_by(organism, \"Black Death\"), Is_type(organism, \"protist\").\n.output Answer"]}
{"id": 2082, "answer": true, "completion": ".decl Has_heritage(Person:symbol, Heritage:symbol)\nHas_heritage(\"Ludacris\", \"African-American\").\n.decl Answer()\nAnswer() :- Has_heritage(\"Ludacris\", \"Greek\").\n.output Answer", "completions": [".decl Has_heritage(Person:symbol, Heritage:symbol)\nHas_heritage(\"Ludacris\", \"African-American\").\n.decl Answer()\nAnswer() :- Has_heritage(\"Ludacris\", \"Greek\").\n.output Answer"]}
{"id": 2083, "answer": true, "completion": ".decl Has_teams(Country:symbol, N_teams:float)\nHas_teams(\"USA\", 25).\nHas_teams(\"Canada\", 7).\n.decl Answer()\nAnswer() :- Has_teams(\"USA\", n_teams1), Has_teams(\"Canada\", n_teams2), n_teams1 > n_teams2.\n.output Answer", "completions": [".decl Has_teams(Country:symbol, N_teams:float)\nHas_teams(\"USA\", 25).\nHas_teams(\"Canada\", 7).\n.decl Answer()\nAnswer() :- Has_teams(\"USA\", n_teams1), Has_teams(\"Canada\", n_teams2), n_teams1 > n_teams2.\n.output Answer"]}
{"id": 2084, "answer": true, "completion": ".decl Appears_on_show(Person:symbol, Show:symbol)\nAppears_on_show(\"Pope\", \"religious events\").\nAppears_on_show(\"Pope\", \"public speeches\").\n.decl Show_type(Show:symbol, Type:symbol)\nShow_type(\"Pimp My Ride\", \"car customization\").\nShow_type(\"religious events\", \"religious\").\nShow_type(\"public speeches\", \"political\").\n.decl Answer()\nAnswer() :- Appears_on_show(\"Pope\", show), Show_type(show, \"car customization\").\n.output Answer", "completions": [".decl Appears_on_show(Person:symbol, Show:symbol)\nAppears_on_show(\"Pope\", \"religious events\").\nAppears_on_show(\"Pope\", \"public speeches\").\n.decl Show_type(Show:symbol, Type:symbol)\nShow_type(\"Pimp My Ride\", \"car customization\").\nShow_type(\"religious events\", \"religious\").\nShow_type(\"public speeches\", \"political\").\n.decl Answer()\nAnswer() :- Appears_on_show(\"Pope\", show), Show_type(show, \"car customization\").\n.output Answer"]}
{"id": 2085, "answer": true, "completion": ".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"year\", 12).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"African Elephant pregnancy\", 22).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"African Elephant pregnancy\", n_months1), Last_n_months(\"year\", n_months2), n_months1 <= n_months2.\n.output Answer", "completions": [".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"year\", 12).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"African Elephant pregnancy\", 22).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"African Elephant pregnancy\", n_months1), Last_n_months(\"year\", n_months2), n_months1 <= n_months2.\n.output Answer"]}
{"id": 2086, "answer": false, "completion": ".decl Has_email(Person:symbol)\nHas_email(\"William Shakespeare\").\n.decl Wrote(Person:symbol, Work:symbol)\nWrote(\"William Shakespeare\", \"Hamlet\").\n.decl Answer()\nAnswer() :- Wrote(person, \"Hamlet\"), !Has_email(person).\n.output Answer", "completions": [".decl Has_email(Person:symbol)\nHas_email(\"William Shakespeare\").\n.decl Wrote(Person:symbol, Work:symbol)\nWrote(\"William Shakespeare\", \"Hamlet\").\n.decl Answer()\nAnswer() :- Wrote(person, \"Hamlet\"), !Has_email(person).\n.output Answer"]}
{"id": 2087, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"newborn\", 0.5).\nHas_height(\"horseradish plant\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"newborn\", height1), Has_height(\"horseradish plant\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"newborn\", 0.5).\nHas_height(\"horseradish plant\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"newborn\", height1), Has_height(\"horseradish plant\", height2), height1 > height2.\n.output Answer"]}
{"id": 2088, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"2020 richest billionaire\", 200000000000). // Approximate net worth of Jeff Bezos in 2020\n.decl Has_GDP(Country:symbol, GDP:float)\nHas_GDP(\"Cambodia\", 27000000000). // Approximate GDP of Cambodia in 2020\n.decl Answer()\nAnswer() :- Has_net_worth(\"2020 richest billionaire\", net_worth), Has_GDP(\"Cambodia\", gdp), net_worth < gdp.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"2020 richest billionaire\", 200000000000). // Approximate net worth of Jeff Bezos in 2020\n.decl Has_GDP(Country:symbol, GDP:float)\nHas_GDP(\"Cambodia\", 27000000000). // Approximate GDP of Cambodia in 2020\n.decl Answer()\nAnswer() :- Has_net_worth(\"2020 richest billionaire\", net_worth), Has_GDP(\"Cambodia\", gdp), net_worth < gdp.\n.output Answer"]}
{"id": 2089, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Holstein cow\", 1500).\nHas_weight(\"Liberty Bell\", 2080).\n.decl Answer()\nAnswer() :- Has_weight(\"Holstein cow\", weight1), Has_weight(\"Liberty Bell\", weight2), weight1 == weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Holstein cow\", 1500).\nHas_weight(\"Liberty Bell\", 2080).\n.decl Answer()\nAnswer() :- Has_weight(\"Holstein cow\", weight1), Has_weight(\"Liberty Bell\", weight2), weight1 == weight2.\n.output Answer"]}
{"id": 2090, "answer": false, "completion": ".decl Has_ethnicity_distance(Person:symbol, Ethnicity1:symbol, Ethnicity2:symbol, Distance:float)\nHas_ethnicity_distance(\"Cleopatra\", \"Egyptian\", \"Greek\", 0.5).\n.decl Answer()\nAnswer() :- Has_ethnicity_distance(\"Cleopatra\", \"Egyptian\", \"Greek\", distance), distance < 0.\nAnswer() :- Has_ethnicity_distance(\"Cleopatra\", \"Egyptian\", \"Greek\", distance), distance > 0.\n.output Answer", "completions": [".decl Has_ethnicity_distance(Person:symbol, Ethnicity1:symbol, Ethnicity2:symbol, Distance:float)\nHas_ethnicity_distance(\"Cleopatra\", \"Egyptian\", \"Greek\", 0.5).\n.decl Answer()\nAnswer() :- Has_ethnicity_distance(\"Cleopatra\", \"Egyptian\", \"Greek\", distance), distance < 0.\nAnswer() :- Has_ethnicity_distance(\"Cleopatra\", \"Egyptian\", \"Greek\", distance), distance > 0.\n.output Answer"]}
{"id": 2091, "answer": false, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"ham\", \"food\").\nHas_property(\"cut seal\", \"wound\").\n.decl Can_help(Object_A:symbol, Object_B:symbol)\nCan_help(\"bandage\", \"cut seal\").\n.decl Answer()\nAnswer() :- Can_help(\"ham\", \"cut seal\").\n.output Answer", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"ham\", \"food\").\nHas_property(\"cut seal\", \"wound\").\n.decl Can_help(Object_A:symbol, Object_B:symbol)\nCan_help(\"bandage\", \"cut seal\").\n.decl Answer()\nAnswer() :- Can_help(\"ham\", \"cut seal\").\n.output Answer"]}
{"id": 2092, "answer": true, "completion": ".decl Spreads_to_occupation(Disease:symbol, Occupation:symbol)\nSpreads_to_occupation(\"COVID-19\", \"healthcare workers\").\nSpreads_to_occupation(\"COVID-19\", \"grocery store workers\").\nSpreads_to_occupation(\"COVID-19\", \"public transport workers\").\nSpreads_to_occupation(\"COVID-19\", \"teachers\").\n.decl Answer()\nAnswer() :- Spreads_to_occupation(\"COVID-19\", \"maritime pilots\").\nAnswer() :- Spreads_to_occupation(\"COVID-19\", occupation), occupation != \"maritime pilots\".\n.output Answer", "completions": [".decl Spreads_to_occupation(Disease:symbol, Occupation:symbol)\nSpreads_to_occupation(\"COVID-19\", \"healthcare workers\").\nSpreads_to_occupation(\"COVID-19\", \"grocery store workers\").\nSpreads_to_occupation(\"COVID-19\", \"public transport workers\").\nSpreads_to_occupation(\"COVID-19\", \"teachers\").\n.decl Answer()\nAnswer() :- Spreads_to_occupation(\"COVID-19\", \"maritime pilots\").\nAnswer() :- Spreads_to_occupation(\"COVID-19\", occupation), occupation != \"maritime pilots\".\n.output Answer"]}
{"id": 2093, "answer": false, "completion": ".decl Has_rank(Title:symbol, Rank:float)\nHas_rank(\"duke\", 3).\nHas_rank(\"tsar\", 1).\n.decl Answer()\nAnswer() :- Has_rank(\"duke\", rank1), Has_rank(\"tsar\", rank2), rank1 > rank2.\n.output Answer", "completions": [".decl Has_rank(Title:symbol, Rank:float)\nHas_rank(\"duke\", 3).\nHas_rank(\"tsar\", 1).\n.decl Answer()\nAnswer() :- Has_rank(\"duke\", rank1), Has_rank(\"tsar\", rank2), rank1 > rank2.\n.output Answer"]}
{"id": 2094, "answer": false, "completion": ".decl Twins(Gender1:symbol, Gender2:symbol)\nTwins(\"male\", \"male\").\nTwins(\"female\", \"female\").\nTwins(\"male\", \"female\").\nTwins(\"female\", \"male\").\n.decl Answer()\nAnswer() :- Twins(gender1, gender2), gender1 != gender2.\n.output Answer", "completions": [".decl Twins(Gender1:symbol, Gender2:symbol)\nTwins(\"male\", \"male\").\nTwins(\"female\", \"female\").\nTwins(\"male\", \"female\").\nTwins(\"female\", \"male\").\n.decl Answer()\nAnswer() :- Twins(gender1, gender2), gender1 != gender2.\n.output Answer"]}
{"id": 2095, "answer": false, "completion": ".decl Is_plant(Object:symbol)\nIs_plant(\"dandelion\").\n.decl Can_suffer_from_disease(Object:symbol, Disease:symbol)\nCan_suffer_from_disease(\"human\", \"hepatitis\").\n.decl Answer()\nAnswer() :- !Is_plant(\"dandelion\"), Can_suffer_from_disease(\"dandelion\", \"hepatitis\").\n.output Answer", "completions": [".decl Is_plant(Object:symbol)\nIs_plant(\"dandelion\").\n.decl Can_suffer_from_disease(Object:symbol, Disease:symbol)\nCan_suffer_from_disease(\"human\", \"hepatitis\").\n.decl Answer()\nAnswer() :- !Is_plant(\"dandelion\"), Can_suffer_from_disease(\"dandelion\", \"hepatitis\").\n.output Answer"]}
{"id": 2096, "answer": false, "completion": ".decl Competes_for_award(Person_A:symbol, Person_B:symbol, Award:symbol)\nCompetes_for_award(\"Jack Black\", \"Bear McCreary\", \"Grammy Award\").\n.decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Jack Black\", \"actor\").\nHas_profession(\"Jack Black\", \"musician\").\nHas_profession(\"Bear McCreary\", \"composer\").\n.decl Unlikely_to_compete(Person_A:symbol, Person_B:symbol)\nUnlikely_to_compete(personA, personB) :- Has_profession(personA, professionA), Has_profession(personB, professionB), professionA != professionB, !Competes_for_award(personA, personB, _).\n.decl Answer()\nAnswer() :- Unlikely_to_compete(\"Jack Black\", \"Bear McCreary\").\n.output Answer", "completions": [".decl Competes_for_award(Person_A:symbol, Person_B:symbol, Award:symbol)\nCompetes_for_award(\"Jack Black\", \"Bear McCreary\", \"Grammy Award\").\n.decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Jack Black\", \"actor\").\nHas_profession(\"Jack Black\", \"musician\").\nHas_profession(\"Bear McCreary\", \"composer\").\n.decl Unlikely_to_compete(Person_A:symbol, Person_B:symbol)\nUnlikely_to_compete(personA, personB) :- Has_profession(personA, professionA), Has_profession(personB, professionB), professionA != professionB, !Competes_for_award(personA, personB, _).\n.decl Answer()\nAnswer() :- Unlikely_to_compete(\"Jack Black\", \"Bear McCreary\").\n.output Answer"]}
{"id": 2097, "answer": true, "completion": ".decl Is_deadly_to_atopic(Object:symbol, Deadly:float)\nIs_deadly_to_atopic(\"eggplant\", 0.1).\n.decl Answer()\nAnswer() :- Is_deadly_to_atopic(\"eggplant\", deadly), deadly > 0.5.\n.output Answer", "completions": [".decl Is_deadly_to_atopic(Object:symbol, Deadly:float)\nIs_deadly_to_atopic(\"eggplant\", 0.1).\n.decl Answer()\nAnswer() :- Is_deadly_to_atopic(\"eggplant\", deadly), deadly > 0.5.\n.output Answer"]}
{"id": 2098, "answer": true, "completion": ".decl Distance(Location_A:symbol, Location_B:symbol, Distance:float)\nDistance(\"New York Public Library\", \"Six Flags Great Escape\", 208).\n.decl Max_travel_distance(Distance:float)\nMax_travel_distance(300).\n.decl Answer()\nAnswer() :- Distance(\"New York Public Library\", \"Six Flags Great Escape\", distance), Max_travel_distance(max_distance), distance <= max_distance.\n.output Answer", "completions": [".decl Distance(Location_A:symbol, Location_B:symbol, Distance:float)\nDistance(\"New York Public Library\", \"Six Flags Great Escape\", 208).\n.decl Max_travel_distance(Distance:float)\nMax_travel_distance(300).\n.decl Answer()\nAnswer() :- Distance(\"New York Public Library\", \"Six Flags Great Escape\", distance), Max_travel_distance(max_distance), distance <= max_distance.\n.output Answer"]}
{"id": 2099, "answer": false, "completion": ".decl Uses_bulk_carriers(Airline:symbol, Carrier_Type:symbol)\nUses_bulk_carriers(\"Southwest Airlines\", \"passenger\").\n.decl Answer()\nAnswer() :- Uses_bulk_carriers(\"Southwest Airlines\", \"bulk\").\n.output Answer", "completions": [".decl Uses_bulk_carriers(Airline:symbol, Carrier_Type:symbol)\nUses_bulk_carriers(\"Southwest Airlines\", \"passenger\").\n.decl Answer()\nAnswer() :- Uses_bulk_carriers(\"Southwest Airlines\", \"bulk\").\n.output Answer"]}
{"id": 2100, "answer": true, "completion": ".decl Worked_in(Person:symbol, Location:symbol)\nWorked_in(\"Nikola Tesla\", \"laboratory\").\n.decl Has_radiation(Location:symbol)\nHas_radiation(\"laboratory\").\n.decl Answer()\nAnswer() :- Worked_in(\"Nikola Tesla\", location), Has_radiation(location).\n.output Answer", "completions": [".decl Worked_in(Person:symbol, Location:symbol)\nWorked_in(\"Nikola Tesla\", \"laboratory\").\n.decl Has_radiation(Location:symbol)\nHas_radiation(\"laboratory\").\n.decl Answer()\nAnswer() :- Worked_in(\"Nikola Tesla\", location), Has_radiation(location).\n.output Answer"]}
{"id": 2101, "answer": true, "completion": ".decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"Steve Martin\").\n.decl Contains_meat(Dish:symbol)\nContains_meat(\"shrimp pasta\").\n.decl Refuses_dish(Person:symbol, Dish:symbol)\nRefuses_dish(person, dish) :- Is_vegetarian(person), Contains_meat(dish).\n.decl Answer()\nAnswer() :- Refuses_dish(\"Steve Martin\", \"shrimp pasta\").\n.output Answer", "completions": [".decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"Steve Martin\").\n.decl Contains_meat(Dish:symbol)\nContains_meat(\"shrimp pasta\").\n.decl Refuses_dish(Person:symbol, Dish:symbol)\nRefuses_dish(person, dish) :- Is_vegetarian(person), Contains_meat(dish).\n.decl Answer()\nAnswer() :- Refuses_dish(\"Steve Martin\", \"shrimp pasta\").\n.output Answer"]}
{"id": 2102, "answer": false, "completion": ".decl Filmed_in_color(Show:symbol, Color:symbol)\nFilmed_in_color(\"The Mentalist\", \"color\").\n.decl Answer()\nAnswer() :- Filmed_in_color(\"The Mentalist\", \"black and white\").\n.output Answer", "completions": [".decl Filmed_in_color(Show:symbol, Color:symbol)\nFilmed_in_color(\"The Mentalist\", \"color\").\n.decl Answer()\nAnswer() :- Filmed_in_color(\"The Mentalist\", \"black and white\").\n.output Answer"]}
{"id": 2103, "answer": true, "completion": ".decl Is_character(Character:symbol)\nIs_character(\"Bugs Bunny\").\n\n.decl Can_harm(Character:symbol, Object:symbol)\nCan_harm(\"Bugs Bunny\", \"carrot\").\n\n.decl Is_object(Object:symbol)\nIs_object(\"olive tree\").\n\n.decl Answer()\nAnswer() :- Can_harm(\"Bugs Bunny\", \"olive tree\"), !Is_character(\"Bugs Bunny\"), Is_object(\"olive tree\").\n.output Answer", "completions": [".decl Is_character(Character:symbol)\nIs_character(\"Bugs Bunny\").\n\n.decl Can_harm(Character:symbol, Object:symbol)\nCan_harm(\"Bugs Bunny\", \"carrot\").\n\n.decl Is_object(Object:symbol)\nIs_object(\"olive tree\").\n\n.decl Answer()\nAnswer() :- Can_harm(\"Bugs Bunny\", \"olive tree\"), !Is_character(\"Bugs Bunny\"), Is_object(\"olive tree\").\n.output Answer"]}
{"id": 2104, "answer": true, "completion": ".decl Is_normal(Condition:symbol, Normality:symbol)\nIs_normal(\"blue lips\", \"abnormal\").\n.decl Answer()\nAnswer() :- Is_normal(\"blue lips\", \"normal\").\n.output Answer", "completions": [".decl Is_normal(Condition:symbol, Normality:symbol)\nIs_normal(\"blue lips\", \"abnormal\").\n.decl Answer()\nAnswer() :- Is_normal(\"blue lips\", \"normal\").\n.output Answer"]}
{"id": 2105, "answer": true, "completion": ".decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"second row\", \"a\").\nHas_letter(\"second row\", \"s\").\nHas_letter(\"second row\", \"d\").\nHas_letter(\"second row\", \"f\").\nHas_letter(\"second row\", \"g\").\nHas_letter(\"second row\", \"h\").\nHas_letter(\"second row\", \"j\").\nHas_letter(\"second row\", \"k\").\nHas_letter(\"second row\", \"l\").\n\n.decl Kingdom(Name:symbol)\nKingdom(\"Abdastartus\").\n\n.decl Can_spell(Kingdom:symbol)\nCan_spell(kingdom) :- Kingdom(kingdom), !Has_letter(\"second row\", \"b\"), !Has_letter(\"second row\", \"t\"), !Has_letter(\"second row\", \"r\"), !Has_letter(\"second row\", \"u\").\n\n.decl Answer()\nAnswer() :- Can_spell(\"Abdastartus\").\n.output Answer", "completions": [".decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"second row\", \"a\").\nHas_letter(\"second row\", \"s\").\nHas_letter(\"second row\", \"d\").\nHas_letter(\"second row\", \"f\").\nHas_letter(\"second row\", \"g\").\nHas_letter(\"second row\", \"h\").\nHas_letter(\"second row\", \"j\").\nHas_letter(\"second row\", \"k\").\nHas_letter(\"second row\", \"l\").\n\n.decl Kingdom(Name:symbol)\nKingdom(\"Abdastartus\").\n\n.decl Can_spell(Kingdom:symbol)\nCan_spell(kingdom) :- Kingdom(kingdom), !Has_letter(\"second row\", \"b\"), !Has_letter(\"second row\", \"t\"), !Has_letter(\"second row\", \"r\"), !Has_letter(\"second row\", \"u\").\n\n.decl Answer()\nAnswer() :- Can_spell(\"Abdastartus\").\n.output Answer"]}
{"id": 2106, "answer": false, "completion": ".decl Has_seats(Car:symbol, Seats:float)\nHas_seats(\"2020 Jaguar F Type\", 2).\n.decl Family_members(Family:symbol, Members:float)\nFamily_members(\"Barack Obama\", 4).\n.decl Answer()\nAnswer() :- Has_seats(\"2020 Jaguar F Type\", seats), Family_members(\"Barack Obama\", members), seats >= members.\n.output Answer", "completions": [".decl Has_seats(Car:symbol, Seats:float)\nHas_seats(\"2020 Jaguar F Type\", 2).\n.decl Family_members(Family:symbol, Members:float)\nFamily_members(\"Barack Obama\", 4).\n.decl Answer()\nAnswer() :- Has_seats(\"2020 Jaguar F Type\", seats), Family_members(\"Barack Obama\", members), seats >= members.\n.output Answer"]}
{"id": 2107, "answer": false, "completion": ".decl Resembles(Object_A:symbol, Object_B:symbol)\nResembles(\"Princess Peach's dress\", \"peach fruit\").\n.decl Answer()\nAnswer() :- Resembles(\"Princess Peach's dress\", \"peach fruit\").\n.output Answer", "completions": [".decl Resembles(Object_A:symbol, Object_B:symbol)\nResembles(\"Princess Peach's dress\", \"peach fruit\").\n.decl Answer()\nAnswer() :- Resembles(\"Princess Peach's dress\", \"peach fruit\").\n.output Answer"]}
{"id": 2108, "answer": false, "completion": ".decl Serves_restaurant(Restaurant:symbol, Cuisine:symbol)\nServes_restaurant(\"La Grenouille\", \"French\").\n.decl Associated_with_cuisine(Cuisine:symbol, Food:symbol)\nAssociated_with_cuisine(\"Mexican\", \"salsa\").\n.decl Answer()\nAnswer() :- Serves_restaurant(\"La Grenouille\", cuisine1), Associated_with_cuisine(cuisine2, \"salsa\"), cuisine1 != cuisine2.\n.output Answer", "completions": [".decl Serves_restaurant(Restaurant:symbol, Cuisine:symbol)\nServes_restaurant(\"La Grenouille\", \"French\").\n.decl Associated_with_cuisine(Cuisine:symbol, Food:symbol)\nAssociated_with_cuisine(\"Mexican\", \"salsa\").\n.decl Answer()\nAnswer() :- Serves_restaurant(\"La Grenouille\", cuisine1), Associated_with_cuisine(cuisine2, \"salsa\"), cuisine1 != cuisine2.\n.output Answer"]}
{"id": 2109, "answer": true, "completion": ".decl Works_at(Person:symbol, Location:symbol)\nWorks_at(\"Abdulqawi Yusuf\", \"The Hague\").\n.decl Typical_work_day(Person:symbol)\nTypical_work_day(\"Abdulqawi Yusuf\").\n.decl Goes_to(Person:symbol, Location:symbol)\nGoes_to(\"Abdulqawi Yusuf\", \"The Hague\") :- Works_at(\"Abdulqawi Yusuf\", \"The Hague\"), Typical_work_day(\"Abdulqawi Yusuf\").\n.decl Answer()\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"The Hague\").\n.output Answer", "completions": [".decl Works_at(Person:symbol, Location:symbol)\nWorks_at(\"Abdulqawi Yusuf\", \"The Hague\").\n.decl Typical_work_day(Person:symbol)\nTypical_work_day(\"Abdulqawi Yusuf\").\n.decl Goes_to(Person:symbol, Location:symbol)\nGoes_to(\"Abdulqawi Yusuf\", \"The Hague\") :- Works_at(\"Abdulqawi Yusuf\", \"The Hague\"), Typical_work_day(\"Abdulqawi Yusuf\").\n.decl Answer()\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"The Hague\").\n.output Answer"]}
{"id": 2110, "answer": false, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"blood spatter pattern\", \"random\").\nHas_property(\"Jackson Pollock piece\", \"random\").\n.decl Answer()\nAnswer() :- Has_property(\"blood spatter pattern\", property1), Has_property(\"Jackson Pollock piece\", property2), property1 = property2.\n.output Answer", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"blood spatter pattern\", \"random\").\nHas_property(\"Jackson Pollock piece\", \"random\").\n.decl Answer()\nAnswer() :- Has_property(\"blood spatter pattern\", property1), Has_property(\"Jackson Pollock piece\", property2), property1 = property2.\n.output Answer"]}
{"id": 2111, "answer": true, "completion": ".decl Has_area(City:symbol, Area:float)\nHas_area(\"Miami\", 143.15).\nHas_area(\"Uppsala\", 48.7).\n.decl Answer()\nAnswer() :- Has_area(\"Miami\", area1), Has_area(\"Uppsala\", area2), area1 <= area2.\n.output Answer", "completions": [".decl Has_area(City:symbol, Area:float)\nHas_area(\"Miami\", 143.15).\nHas_area(\"Uppsala\", 48.7).\n.decl Answer()\nAnswer() :- Has_area(\"Miami\", area1), Has_area(\"Uppsala\", area2), area1 <= area2.\n.output Answer"]}
{"id": 2112, "answer": false, "completion": ".decl Is_material(Material:symbol)\nIs_material(\"wood\").\nIs_material(\"metal\").\nIs_material(\"plastic\").\nIs_material(\"glass\").\nIs_material(\"fabric\").\nIs_material(\"leather\").\nIs_material(\"hair\").\n\n.decl Is_furniture(Furniture:symbol)\nIs_furniture(\"chair\").\nIs_furniture(\"table\").\nIs_furniture(\"sofa\").\nIs_furniture(\"bed\").\nIs_furniture(\"cabinet\").\nIs_furniture(\"shelf\").\n\n.decl Can_be_made_of(Furniture:symbol, Material:symbol)\nCan_be_made_of(furniture, material) :- Is_furniture(furniture), Is_material(material).\n\n.decl Answer()\nAnswer() :- Can_be_made_of(\"furniture\", \"hair\").\n.output Answer", "completions": [".decl Is_material(Material:symbol)\nIs_material(\"wood\").\nIs_material(\"metal\").\nIs_material(\"plastic\").\nIs_material(\"glass\").\nIs_material(\"fabric\").\nIs_material(\"leather\").\nIs_material(\"hair\").\n\n.decl Is_furniture(Furniture:symbol)\nIs_furniture(\"chair\").\nIs_furniture(\"table\").\nIs_furniture(\"sofa\").\nIs_furniture(\"bed\").\nIs_furniture(\"cabinet\").\nIs_furniture(\"shelf\").\n\n.decl Can_be_made_of(Furniture:symbol, Material:symbol)\nCan_be_made_of(furniture, material) :- Is_furniture(furniture), Is_material(material).\n\n.decl Answer()\nAnswer() :- Can_be_made_of(\"furniture\", \"hair\").\n.output Answer"]}
{"id": 2113, "answer": false, "completion": ".decl Preceded(Person:symbol, Leader:symbol)\nPreceded(\"Helen Clark\", \"John Key\").\n.decl Succeeded(Person:symbol, Leader:symbol)\nSucceeded(\"Bill English\", \"John Key\").\nSucceeded(\"Jacinda Ardern\", \"John Key\").\n.decl Is_woman(Person:symbol)\nIs_woman(\"Helen Clark\").\nIs_woman(\"Jacinda Ardern\").\n.decl Preceding_women_count(Count:float)\nPreceding_women_count(count) :- count = sum : {Is_woman(person), Preceded(person, \"John Key\")}.\n.decl Succeeding_women_count(Count:float)\nSucceeding_women_count(count) :- count = sum : {Is_woman(person), Succeeded(person, \"John Key\")}.\n.decl Answer()\nAnswer() :- Preceding_women_count(count1), Succeeding_women_count(count2), count2 > count1.\n.output Answer", "completions": [".decl Preceded(Person:symbol, Leader:symbol)\nPreceded(\"Helen Clark\", \"John Key\").\n.decl Succeeded(Person:symbol, Leader:symbol)\nSucceeded(\"Bill English\", \"John Key\").\nSucceeded(\"Jacinda Ardern\", \"John Key\").\n.decl Is_woman(Person:symbol)\nIs_woman(\"Helen Clark\").\nIs_woman(\"Jacinda Ardern\").\n.decl Preceding_women_count(Count:float)\nPreceding_women_count(count) :- count = sum : {Is_woman(person), Preceded(person, \"John Key\")}.\n.decl Succeeding_women_count(Count:float)\nSucceeding_women_count(count) :- count = sum : {Is_woman(person), Succeeded(person, \"John Key\")}.\n.decl Answer()\nAnswer() :- Preceding_women_count(count1), Succeeding_women_count(count2), count2 > count1.\n.output Answer"]}
{"id": 2114, "answer": false, "completion": ".decl Can_melt(Object:symbol, Melting_point:float)\nCan_melt(\"microwave\", 150).\nCan_melt(\"Toyota Prius battery\", 200).\n.decl Answer()\nAnswer() :- Can_melt(\"microwave\", melting_point1), Can_melt(\"Toyota Prius battery\", melting_point2), melting_point1 >= melting_point2.\n.output Answer", "completions": [".decl Can_melt(Object:symbol, Melting_point:float)\nCan_melt(\"microwave\", 150).\nCan_melt(\"Toyota Prius battery\", 200).\n.decl Answer()\nAnswer() :- Can_melt(\"microwave\", melting_point1), Can_melt(\"Toyota Prius battery\", melting_point2), melting_point1 >= melting_point2.\n.output Answer"]}
{"id": 2115, "answer": false, "completion": ".decl Has_healthy_lungs(Person:symbol)\nHas_healthy_lungs(\"J. P. Morgan\").\n.decl Answer()\nAnswer() :- Has_healthy_lungs(\"J. P. Morgan\").\n.output Answer", "completions": [".decl Has_healthy_lungs(Person:symbol)\nHas_healthy_lungs(\"J. P. Morgan\").\n.decl Answer()\nAnswer() :- Has_healthy_lungs(\"J. P. Morgan\").\n.output Answer"]}
{"id": 2116, "answer": true, "completion": ".decl Has_been_in_n_bands(Person:symbol, N_bands:float)\nHas_been_in_n_bands(\"Gorillaz creator\", 2). // Gorillaz and Blur\nHas_been_in_n_bands(\"Bernard Sumner\", 3). // Joy Division, New Order, and Electronic\n.decl Answer()\nAnswer() :- Has_been_in_n_bands(\"Gorillaz creator\", n_bands1), Has_been_in_n_bands(\"Bernard Sumner\", n_bands2), n_bands1 > n_bands2.\n.output Answer", "completions": [".decl Has_been_in_n_bands(Person:symbol, N_bands:float)\nHas_been_in_n_bands(\"Gorillaz creator\", 2). // Gorillaz and Blur\nHas_been_in_n_bands(\"Bernard Sumner\", 3). // Joy Division, New Order, and Electronic\n.decl Answer()\nAnswer() :- Has_been_in_n_bands(\"Gorillaz creator\", n_bands1), Has_been_in_n_bands(\"Bernard Sumner\", n_bands2), n_bands1 > n_bands2.\n.output Answer"]}
{"id": 2117, "answer": true, "completion": ".decl Is_hyperglycemic(Person:symbol)\nIs_hyperglycemic(\"person1\").\n.decl Contains_substance(Object:symbol, Substance:symbol)\nContains_substance(\"wheelbarrow\", \"starch\").\n.decl Is_harmful(Substance:symbol, Person:symbol)\nIs_harmful(\"starch\", \"person1\").\n.decl Answer()\nAnswer() :- Contains_substance(\"wheelbarrow\", substance), Is_hyperglycemic(person), Is_harmful(substance, person).\n.output Answer", "completions": [".decl Is_hyperglycemic(Person:symbol)\nIs_hyperglycemic(\"person1\").\n.decl Contains_substance(Object:symbol, Substance:symbol)\nContains_substance(\"wheelbarrow\", \"starch\").\n.decl Is_harmful(Substance:symbol, Person:symbol)\nIs_harmful(\"starch\", \"person1\").\n.decl Answer()\nAnswer() :- Contains_substance(\"wheelbarrow\", substance), Is_hyperglycemic(person), Is_harmful(substance, person).\n.output Answer"]}
{"id": 2118, "answer": true, "completion": ".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Indianapolis Motor Speedway\", 400000).\n.decl Has_casualties(War:symbol, Casualties:float)\nHas_casualties(\"Seven Years' War - Austria\", 100000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Indianapolis Motor Speedway\", capacity), Has_casualties(\"Seven Years' War - Austria\", casualties), capacity >= casualties.\n.output Answer", "completions": [".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Indianapolis Motor Speedway\", 400000).\n.decl Has_casualties(War:symbol, Casualties:float)\nHas_casualties(\"Seven Years' War - Austria\", 100000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Indianapolis Motor Speedway\", capacity), Has_casualties(\"Seven Years' War - Austria\", casualties), capacity >= casualties.\n.output Answer"]}
{"id": 2119, "answer": false, "completion": ".decl Occurs_in_month(Event:symbol, Month:symbol)\nOccurs_in_month(\"Pearl Harbor attack\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"September\", \"autumn\").\nIn_season(\"October\", \"autumn\").\nIn_season(\"November\", \"autumn\").\n.decl Answer()\nAnswer() :- Occurs_in_month(\"Pearl Harbor attack\", month), In_season(month, \"autumn\").\n.output Answer", "completions": [".decl Occurs_in_month(Event:symbol, Month:symbol)\nOccurs_in_month(\"Pearl Harbor attack\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"September\", \"autumn\").\nIn_season(\"October\", \"autumn\").\nIn_season(\"November\", \"autumn\").\n.decl Answer()\nAnswer() :- Occurs_in_month(\"Pearl Harbor attack\", month), In_season(month, \"autumn\").\n.output Answer"]}
{"id": 2120, "answer": true, "completion": ".decl Turned_chair(Judge:symbol, Contestant:symbol, Show:symbol)\nTurned_chair(\"Christina Aguilera\", \"Alisan Porter\", \"The Voice\").\nTurned_chair(\"Christina Aguilera\", \"Beverly McClellan\", \"The Voice\").\n.decl Answer()\nAnswer() :- Turned_chair(\"Christina Aguilera\", \"Kelly Clarkson\", \"The Voice\").\n.output Answer", "completions": [".decl Turned_chair(Judge:symbol, Contestant:symbol, Show:symbol)\nTurned_chair(\"Christina Aguilera\", \"Alisan Porter\", \"The Voice\").\nTurned_chair(\"Christina Aguilera\", \"Beverly McClellan\", \"The Voice\").\n.decl Answer()\nAnswer() :- Turned_chair(\"Christina Aguilera\", \"Kelly Clarkson\", \"The Voice\").\n.output Answer"]}
{"id": 2121, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"World of Warcraft\", 0). // Assuming weight as a digital game\nHas_weight(\"loaf of bread\", 1).\n.decl Answer()\nAnswer() :- Has_weight(\"World of Warcraft\", weight1), Has_weight(\"loaf of bread\", weight2), weight1 > weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"World of Warcraft\", 0). // Assuming weight as a digital game\nHas_weight(\"loaf of bread\", 1).\n.decl Answer()\nAnswer() :- Has_weight(\"World of Warcraft\", weight1), Has_weight(\"loaf of bread\", weight2), weight1 > weight2.\n.output Answer"]}
{"id": 2122, "answer": true, "completion": ".decl Ideology(PoliticalGroup:symbol, Ideology:symbol)\nIdeology(\"right wing Americans\", \"capitalism\").\nIdeology(\"Marxism\", \"communism\").\n.decl Opposed_to(Group:symbol, OpposingIdeology:symbol)\nOpposed_to(\"right wing Americans\", \"communism\").\n.decl Answer()\nAnswer() :- Ideology(\"right wing Americans\", ideology1), Ideology(\"Marxism\", ideology2), Opposed_to(\"right wing Americans\", ideology2).\n.output Answer", "completions": [".decl Ideology(PoliticalGroup:symbol, Ideology:symbol)\nIdeology(\"right wing Americans\", \"capitalism\").\nIdeology(\"Marxism\", \"communism\").\n.decl Opposed_to(Group:symbol, OpposingIdeology:symbol)\nOpposed_to(\"right wing Americans\", \"communism\").\n.decl Answer()\nAnswer() :- Ideology(\"right wing Americans\", ideology1), Ideology(\"Marxism\", ideology2), Opposed_to(\"right wing Americans\", ideology2).\n.output Answer"]}
{"id": 2123, "answer": false, "completion": ".decl Released_in_year(Film:symbol, Year:float)\nReleased_in_year(\"King Kong (2005 film)\", 2005).\n.decl Solvent_in_year(Film:symbol, Year:float)\nSolvent_in_year(\"King Kong (2005 film)\", 2005).\n.decl Answer()\nAnswer() :- Released_in_year(\"King Kong (2005 film)\", year), Solvent_in_year(\"King Kong (2005 film)\", year).\n.output Answer", "completions": [".decl Released_in_year(Film:symbol, Year:float)\nReleased_in_year(\"King Kong (2005 film)\", 2005).\n.decl Solvent_in_year(Film:symbol, Year:float)\nSolvent_in_year(\"King Kong (2005 film)\", 2005).\n.decl Answer()\nAnswer() :- Released_in_year(\"King Kong (2005 film)\", year), Solvent_in_year(\"King Kong (2005 film)\", year).\n.output Answer"]}
{"id": 2124, "answer": true, "completion": ".decl Has_seeds(Plant:symbol, Seeds:bool)\nHas_seeds(\"seedless cucumber\", false).\n.decl Attracts_insects(Plant:symbol, Insects:bool)\nAttracts_insects(\"cucumber\", true).\n.decl Entomophobia(Person:symbol, Phobia:bool)\nEntomophobia(\"gardener\", true).\n.decl Good_for_gardener(Plant:symbol)\nGood_for_gardener(\"seedless cucumber\") :- Has_seeds(\"seedless cucumber\", false), Attracts_insects(\"cucumber\", false), Entomophobia(\"gardener\", true).\n.output Good_for_gardener", "completions": [".decl Has_seeds(Plant:symbol, Seeds:bool)\nHas_seeds(\"seedless cucumber\", false).\n.decl Attracts_insects(Plant:symbol, Insects:bool)\nAttracts_insects(\"cucumber\", true).\n.decl Entomophobia(Person:symbol, Phobia:bool)\nEntomophobia(\"gardener\", true).\n.decl Good_for_gardener(Plant:symbol)\nGood_for_gardener(\"seedless cucumber\") :- Has_seeds(\"seedless cucumber\", false), Attracts_insects(\"cucumber\", false), Entomophobia(\"gardener\", true).\n.output Good_for_gardener"]}
{"id": 2125, "answer": true, "completion": ".decl Known_for_hating(Character:symbol, Cuisine:symbol)\nKnown_for_hating(\"Garfield\", \"lasagna\").\n.decl Is_Italian_cuisine(Cuisine:symbol)\nIs_Italian_cuisine(\"lasagna\").\n.decl Answer()\nAnswer() :- Known_for_hating(\"Garfield\", cuisine), !Is_Italian_cuisine(cuisine).\n.output Answer", "completions": [".decl Known_for_hating(Character:symbol, Cuisine:symbol)\nKnown_for_hating(\"Garfield\", \"lasagna\").\n.decl Is_Italian_cuisine(Cuisine:symbol)\nIs_Italian_cuisine(\"lasagna\").\n.decl Answer()\nAnswer() :- Known_for_hating(\"Garfield\", cuisine), !Is_Italian_cuisine(cuisine).\n.output Answer"]}
{"id": 2126, "answer": false, "completion": ".decl Follows_diet(Practitioner:symbol, Diet:symbol)\nFollows_diet(\"Shinto practitioner\", \"Shinto diet\").\nFollows_diet(\"Jewish practitioner\", \"kosher diet\").\n.decl Answer()\nAnswer() :- Follows_diet(\"Shinto practitioner\", \"kosher diet\").\n.output Answer", "completions": [".decl Follows_diet(Practitioner:symbol, Diet:symbol)\nFollows_diet(\"Shinto practitioner\", \"Shinto diet\").\nFollows_diet(\"Jewish practitioner\", \"kosher diet\").\n.decl Answer()\nAnswer() :- Follows_diet(\"Shinto practitioner\", \"kosher diet\").\n.output Answer"]}
{"id": 2127, "answer": true, "completion": ".decl Texture_changes(Color_change:symbol, Texture_change:symbol)\nTexture_changes(\"coloring changing\", \"texture remains the same\").\n.decl Answer()\nAnswer() :- Texture_changes(\"coloring changing\", \"texture remains the same\").\n.output Answer", "completions": [".decl Texture_changes(Color_change:symbol, Texture_change:symbol)\nTexture_changes(\"coloring changing\", \"texture remains the same\").\n.decl Answer()\nAnswer() :- Texture_changes(\"coloring changing\", \"texture remains the same\").\n.output Answer"]}
{"id": 2128, "answer": true, "completion": ".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Sam Harris\", \"none\").\n.decl Answer()\nAnswer() :- Worships(\"Sam Harris\", \"Shiva\").\nAnswer() :- Worships(\"Sam Harris\", \"none\").\n.output Answer", "completions": [".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Sam Harris\", \"none\").\n.decl Answer()\nAnswer() :- Worships(\"Sam Harris\", \"Shiva\").\nAnswer() :- Worships(\"Sam Harris\", \"none\").\n.output Answer"]}
{"id": 2129, "answer": true, "completion": ".decl Is_tree_species(Tree:symbol)\nIs_tree_species(\"linden\").\n.decl Is_evergreen(Tree:symbol)\nIs_evergreen(\"pine\").\nIs_evergreen(\"spruce\").\nIs_evergreen(\"fir\").\n.decl Refers_to(Tree:symbol, Place:symbol)\nRefers_to(\"linden\", \"Leipzig\").\n.decl Answer()\nAnswer() :- Refers_to(tree, \"Leipzig\"), Is_tree_species(tree), Is_evergreen(tree).\n.output Answer", "completions": [".decl Is_tree_species(Tree:symbol)\nIs_tree_species(\"linden\").\n.decl Is_evergreen(Tree:symbol)\nIs_evergreen(\"pine\").\nIs_evergreen(\"spruce\").\nIs_evergreen(\"fir\").\n.decl Refers_to(Tree:symbol, Place:symbol)\nRefers_to(\"linden\", \"Leipzig\").\n.decl Answer()\nAnswer() :- Refers_to(tree, \"Leipzig\"), Is_tree_species(tree), Is_evergreen(tree).\n.output Answer"]}
{"id": 2130, "answer": false, "completion": ".decl Causes_pain(Treatment:symbol, Percentage:float)\nCauses_pain(\"acupuncture\", 30).\n.decl Answer()\nAnswer() :- Causes_pain(\"acupuncture\", percentage), percentage > 50.\n.output Answer", "completions": [".decl Causes_pain(Treatment:symbol, Percentage:float)\nCauses_pain(\"acupuncture\", 30).\n.decl Answer()\nAnswer() :- Causes_pain(\"acupuncture\", percentage), percentage > 50.\n.output Answer"]}
{"id": 2131, "answer": true, "completion": ".decl Born_in(Person:symbol, Country:symbol)\nBorn_in(\"RoboCop director\", \"USA\").\nBorn_in(\"Gaite Jansen\", \"Netherlands\").\n.decl Answer()\nAnswer() :- Born_in(\"RoboCop director\", country1), Born_in(\"Gaite Jansen\", country2), country1 = country2.\n.output Answer", "completions": [".decl Born_in(Person:symbol, Country:symbol)\nBorn_in(\"RoboCop director\", \"USA\").\nBorn_in(\"Gaite Jansen\", \"Netherlands\").\n.decl Answer()\nAnswer() :- Born_in(\"RoboCop director\", country1), Born_in(\"Gaite Jansen\", country2), country1 = country2.\n.output Answer"]}
{"id": 2132, "answer": true, "completion": ".decl Has_leg_cast(Person:symbol, Leg:symbol)\nHas_leg_cast(\"you\", \"one_leg\").\n.decl Should_wear_sandal(Person:symbol, Leg:symbol)\nShould_wear_sandal(\"you\", \"other_leg\").\n.decl Answer()\nAnswer() :- Has_leg_cast(\"you\", \"one_leg\"), Should_wear_sandal(\"you\", \"other_leg\").\n.output Answer", "completions": [".decl Has_leg_cast(Person:symbol, Leg:symbol)\nHas_leg_cast(\"you\", \"one_leg\").\n.decl Should_wear_sandal(Person:symbol, Leg:symbol)\nShould_wear_sandal(\"you\", \"other_leg\").\n.decl Answer()\nAnswer() :- Has_leg_cast(\"you\", \"one_leg\"), Should_wear_sandal(\"you\", \"other_leg\").\n.output Answer"]}
{"id": 2133, "answer": true, "completion": ".decl Contains_ingredient(Food:symbol, Ingredient:symbol)\nContains_ingredient(\"food_with_black_salt\", \"black_salt\").\n.decl Has_smell(Ingredient:symbol, Smell:symbol)\nHas_smell(\"black_salt\", \"sulfur\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"food_with_black_salt\", ingredient), Has_smell(ingredient, \"sulfur\").\n.output Answer", "completions": [".decl Contains_ingredient(Food:symbol, Ingredient:symbol)\nContains_ingredient(\"food_with_black_salt\", \"black_salt\").\n.decl Has_smell(Ingredient:symbol, Smell:symbol)\nHas_smell(\"black_salt\", \"sulfur\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"food_with_black_salt\", ingredient), Has_smell(ingredient, \"sulfur\").\n.output Answer"]}
{"id": 2134, "answer": true, "completion": ".decl Has_life_expectancy(Species:symbol, Life_expectancy:float)\nHas_life_expectancy(\"Hawaiian male\", 81).\nHas_life_expectancy(\"wild cane toad\", 10).\n.decl Answer()\nAnswer() :- Has_life_expectancy(\"Hawaiian male\", life_expectancy1), Has_life_expectancy(\"wild cane toad\", life_expectancy2), life_expectancy1 > life_expectancy2.\n.output Answer", "completions": [".decl Has_life_expectancy(Species:symbol, Life_expectancy:float)\nHas_life_expectancy(\"Hawaiian male\", 81).\nHas_life_expectancy(\"wild cane toad\", 10).\n.decl Answer()\nAnswer() :- Has_life_expectancy(\"Hawaiian male\", life_expectancy1), Has_life_expectancy(\"wild cane toad\", life_expectancy2), life_expectancy1 > life_expectancy2.\n.output Answer"]}
{"id": 2135, "answer": true, "completion": ".decl Needs_cold_storage(Food:symbol, Time_period:symbol)\nNeeds_cold_storage(\"eggs\", \"middle ages\").\n.decl Answer()\nAnswer() :- Needs_cold_storage(\"eggs\", \"middle ages\").\n.output Answer", "completions": [".decl Needs_cold_storage(Food:symbol, Time_period:symbol)\nNeeds_cold_storage(\"eggs\", \"middle ages\").\n.decl Answer()\nAnswer() :- Needs_cold_storage(\"eggs\", \"middle ages\").\n.output Answer"]}
{"id": 2136, "answer": true, "completion": ".decl Has_swallowing_disorder(Person:symbol, Disorder:symbol)\nHas_swallowing_disorder(\"person\", \"dysphagia\").\n.decl Needs_viscosity(Person:symbol, Viscosity:symbol)\nNeeds_viscosity(\"person\", \"high\").\n.decl Answer()\nAnswer() :- Has_swallowing_disorder(person, \"dysphagia\"), Needs_viscosity(person, \"high\").\n.output Answer", "completions": [".decl Has_swallowing_disorder(Person:symbol, Disorder:symbol)\nHas_swallowing_disorder(\"person\", \"dysphagia\").\n.decl Needs_viscosity(Person:symbol, Viscosity:symbol)\nNeeds_viscosity(\"person\", \"high\").\n.decl Answer()\nAnswer() :- Has_swallowing_disorder(person, \"dysphagia\"), Needs_viscosity(person, \"high\").\n.output Answer"]}
{"id": 2137, "answer": false, "completion": ".decl Is_similar(Entity_A:symbol, Entity_B:symbol)\nIs_similar(\"Krishna\", \"Vishnu\").\nIs_similar(\"Holy Spirit\", \"God\").\n.decl Answer()\nAnswer() :- Is_similar(\"Krishna\", entity1), Is_similar(\"Holy Spirit\", entity2), entity1 = entity2.\n.output Answer", "completions": [".decl Is_similar(Entity_A:symbol, Entity_B:symbol)\nIs_similar(\"Krishna\", \"Vishnu\").\nIs_similar(\"Holy Spirit\", \"God\").\n.decl Answer()\nAnswer() :- Is_similar(\"Krishna\", entity1), Is_similar(\"Holy Spirit\", entity2), entity1 = entity2.\n.output Answer"]}
{"id": 2138, "answer": true, "completion": ".decl Settled_over(Event:symbol, Food:symbol)\nSettled_over(\"Treaty of Versailles\", \"blueberry scones\").\n.decl Answer()\nAnswer() :- Settled_over(\"Treaty of Versailles\", \"blueberry scones\").\n.output Answer", "completions": [".decl Settled_over(Event:symbol, Food:symbol)\nSettled_over(\"Treaty of Versailles\", \"blueberry scones\").\n.decl Answer()\nAnswer() :- Settled_over(\"Treaty of Versailles\", \"blueberry scones\").\n.output Answer"]}
{"id": 2139, "answer": true, "completion": ".decl Original_dwarves(Dwarf:symbol)\nOriginal_dwarves(\"Doc\").\nOriginal_dwarves(\"Grumpy\").\nOriginal_dwarves(\"Happy\").\nOriginal_dwarves(\"Sleepy\").\nOriginal_dwarves(\"Bashful\").\nOriginal_dwarves(\"Sneezy\").\nOriginal_dwarves(\"Dopey\").\n\n.decl Disney_dwarves(Dwarf:symbol)\nDisney_dwarves(\"Doc\").\nDisney_dwarves(\"Grumpy\").\nDisney_dwarves(\"Happy\").\nDisney_dwarves(\"Sleepy\").\nDisney_dwarves(\"Bashful\").\nDisney_dwarves(\"Sneezy\").\nDisney_dwarves(\"Dopey\").\n\n.decl Answer()\nAnswer() :- Original_dwarves(dwarf1), Disney_dwarves(dwarf2), dwarf1 != dwarf2.\nAnswer() :- !Original_dwarves(dwarf1), Disney_dwarves(dwarf1).\nAnswer() :- Original_dwarves(dwarf1), !Disney_dwarves(dwarf1).\n.output Answer", "completions": [".decl Original_dwarves(Dwarf:symbol)\nOriginal_dwarves(\"Doc\").\nOriginal_dwarves(\"Grumpy\").\nOriginal_dwarves(\"Happy\").\nOriginal_dwarves(\"Sleepy\").\nOriginal_dwarves(\"Bashful\").\nOriginal_dwarves(\"Sneezy\").\nOriginal_dwarves(\"Dopey\").\n\n.decl Disney_dwarves(Dwarf:symbol)\nDisney_dwarves(\"Doc\").\nDisney_dwarves(\"Grumpy\").\nDisney_dwarves(\"Happy\").\nDisney_dwarves(\"Sleepy\").\nDisney_dwarves(\"Bashful\").\nDisney_dwarves(\"Sneezy\").\nDisney_dwarves(\"Dopey\").\n\n.decl Answer()\nAnswer() :- Original_dwarves(dwarf1), Disney_dwarves(dwarf2), dwarf1 != dwarf2.\nAnswer() :- !Original_dwarves(dwarf1), Disney_dwarves(dwarf1).\nAnswer() :- Original_dwarves(dwarf1), !Disney_dwarves(dwarf1).\n.output Answer"]}
{"id": 2140, "answer": true, "completion": ".decl Is_known_in_home(Show:symbol, Home_type:symbol)\nIs_known_in_home(\"The Powerpuff Girls\", \"non-Mennonite homes\").\n.decl Answer()\nAnswer() :- Is_known_in_home(\"The Powerpuff Girls\", \"Mennonite homes\").\nAnswer() :- !Is_known_in_home(\"The Powerpuff Girls\", \"non-Mennonite homes\").\n.output Answer", "completions": [".decl Is_known_in_home(Show:symbol, Home_type:symbol)\nIs_known_in_home(\"The Powerpuff Girls\", \"non-Mennonite homes\").\n.decl Answer()\nAnswer() :- Is_known_in_home(\"The Powerpuff Girls\", \"Mennonite homes\").\nAnswer() :- !Is_known_in_home(\"The Powerpuff Girls\", \"non-Mennonite homes\").\n.output Answer"]}
{"id": 2141, "answer": true, "completion": ".decl Is_zodiac_sign(Sign:symbol, Religion:symbol)\nIs_zodiac_sign(\"Capricorn\", \"Satanism\").\n.decl Answer()\nAnswer() :- Is_zodiac_sign(\"Capricorn\", \"Satanism\").\n.output Answer", "completions": [".decl Is_zodiac_sign(Sign:symbol, Religion:symbol)\nIs_zodiac_sign(\"Capricorn\", \"Satanism\").\n.decl Answer()\nAnswer() :- Is_zodiac_sign(\"Capricorn\", \"Satanism\").\n.output Answer"]}
{"id": 2142, "answer": false, "completion": ".decl Is_crucial_for(Ingredient:symbol, Snack:symbol)\nIs_crucial_for(\"plants\", \"banana\").\n.decl Is_part_of(Ingredient:symbol, Snack:symbol)\nIs_part_of(\"banana\", \"The King of Rock'n Roll's snack\").\n.decl Answer()\nAnswer() :- Is_crucial_for(ingredient, \"banana\"), Is_part_of(\"banana\", \"The King of Rock'n Roll's snack\").\n.output Answer", "completions": [".decl Is_crucial_for(Ingredient:symbol, Snack:symbol)\nIs_crucial_for(\"plants\", \"banana\").\n.decl Is_part_of(Ingredient:symbol, Snack:symbol)\nIs_part_of(\"banana\", \"The King of Rock'n Roll's snack\").\n.decl Answer()\nAnswer() :- Is_crucial_for(ingredient, \"banana\"), Is_part_of(\"banana\", \"The King of Rock'n Roll's snack\").\n.output Answer"]}
{"id": 2143, "answer": true, "completion": ".decl Has_duties(God:symbol, Duty:symbol)\nHas_duties(\"Hanuman\", \"protection\").\nHas_duties(\"Hanuman\", \"strength\").\nHas_duties(\"Athena\", \"wisdom\").\nHas_duties(\"Athena\", \"protection\").\n.decl Answer()\nAnswer() :- Has_duties(\"Hanuman\", duty), Has_duties(\"Athena\", duty).\n.output Answer", "completions": [".decl Has_duties(God:symbol, Duty:symbol)\nHas_duties(\"Hanuman\", \"protection\").\nHas_duties(\"Hanuman\", \"strength\").\nHas_duties(\"Athena\", \"wisdom\").\nHas_duties(\"Athena\", \"protection\").\n.decl Answer()\nAnswer() :- Has_duties(\"Hanuman\", duty), Has_duties(\"Athena\", duty).\n.output Answer"]}
{"id": 2144, "answer": true, "completion": ".decl Has_atherosclerosis_risk(Animal:symbol)\nHas_atherosclerosis_risk(\"mammal\").\n.decl Is_animal_type(Animal:symbol, Type:symbol)\nIs_animal_type(\"jellyfish\", \"invertebrate\").\n.decl Answer()\nAnswer() :- Is_animal_type(\"jellyfish\", type), !Has_atherosclerosis_risk(type).\n.output Answer", "completions": [".decl Has_atherosclerosis_risk(Animal:symbol)\nHas_atherosclerosis_risk(\"mammal\").\n.decl Is_animal_type(Animal:symbol, Type:symbol)\nIs_animal_type(\"jellyfish\", \"invertebrate\").\n.decl Answer()\nAnswer() :- Is_animal_type(\"jellyfish\", type), !Has_atherosclerosis_risk(type).\n.output Answer"]}
{"id": 2145, "answer": true, "completion": ".decl Has_conquests(Person:symbol, Conquests:float)\nHas_conquests(\"Temujin\", 10).\nHas_conquests(\"Charlemagne\", 15).\n.decl Answer()\nAnswer() :- Has_conquests(\"Temujin\", conquests1), Has_conquests(\"Charlemagne\", conquests2), conquests1 < conquests2.\n.output Answer", "completions": [".decl Has_conquests(Person:symbol, Conquests:float)\nHas_conquests(\"Temujin\", 10).\nHas_conquests(\"Charlemagne\", 15).\n.decl Answer()\nAnswer() :- Has_conquests(\"Temujin\", conquests1), Has_conquests(\"Charlemagne\", conquests2), conquests1 < conquests2.\n.output Answer"]}
{"id": 2146, "answer": true, "completion": ".decl Has_homelessness_problems(Place:symbol)\nHas_homelessness_problems(\"Antarctica\").\n.decl Answer()\nAnswer() :- !Has_homelessness_problems(\"Antarctica\").\n.output Answer", "completions": [".decl Has_homelessness_problems(Place:symbol)\nHas_homelessness_problems(\"Antarctica\").\n.decl Answer()\nAnswer() :- !Has_homelessness_problems(\"Antarctica\").\n.output Answer"]}
{"id": 2147, "answer": true, "completion": ".decl Cause_of_death(Person:symbol, Cause:symbol)\nCause_of_death(\"Jeff Buckley\", \"drowning\").\n.decl Related_to(Event:symbol, Concept:symbol)\nRelated_to(\"Immersion Baptism\", \"submersion in water\").\n.decl Answer()\nAnswer() :- Cause_of_death(\"Jeff Buckley\", cause), Related_to(\"Immersion Baptism\", concept), cause = \"drowning\", concept = \"submersion in water\".\n.output Answer", "completions": [".decl Cause_of_death(Person:symbol, Cause:symbol)\nCause_of_death(\"Jeff Buckley\", \"drowning\").\n.decl Related_to(Event:symbol, Concept:symbol)\nRelated_to(\"Immersion Baptism\", \"submersion in water\").\n.decl Answer()\nAnswer() :- Cause_of_death(\"Jeff Buckley\", cause), Related_to(\"Immersion Baptism\", concept), cause = \"drowning\", concept = \"submersion in water\".\n.output Answer"]}
{"id": 2148, "answer": false, "completion": ".decl Has_vitamin_A_amount(Food:symbol, Amount:float)\nHas_vitamin_A_amount(\"raw carrots\", 835).\nHas_vitamin_A_amount(\"cooked carrots\", 665).\n.decl Answer()\nAnswer() :- Has_vitamin_A_amount(\"raw carrots\", amount1), Has_vitamin_A_amount(\"cooked carrots\", amount2), amount1 > amount2.\n.output Answer", "completions": [".decl Has_vitamin_A_amount(Food:symbol, Amount:float)\nHas_vitamin_A_amount(\"raw carrots\", 835).\nHas_vitamin_A_amount(\"cooked carrots\", 665).\n.decl Answer()\nAnswer() :- Has_vitamin_A_amount(\"raw carrots\", amount1), Has_vitamin_A_amount(\"cooked carrots\", amount2), amount1 > amount2.\n.output Answer"]}
{"id": 2149, "answer": true, "completion": ".decl Occurred_in_year(Event:symbol, Year:float)\nOccurred_in_year(\"Wrestlemania X\", 1994).\n.decl Introduced_in_year(Car:symbol, Year:float)\nIntroduced_in_year(\"Toyota Prius\", 1997).\n.decl Answer()\nAnswer() :- Occurred_in_year(\"Wrestlemania X\", year1), Introduced_in_year(\"Toyota Prius\", year2), year1 < year2.\n!Answer() :- Occurred_in_year(\"Wrestlemania X\", year1), Introduced_in_year(\"Toyota Prius\", year2), year1 >= year2.\n.output Answer", "completions": [".decl Occurred_in_year(Event:symbol, Year:float)\nOccurred_in_year(\"Wrestlemania X\", 1994).\n.decl Introduced_in_year(Car:symbol, Year:float)\nIntroduced_in_year(\"Toyota Prius\", 1997).\n.decl Answer()\nAnswer() :- Occurred_in_year(\"Wrestlemania X\", year1), Introduced_in_year(\"Toyota Prius\", year2), year1 < year2.\n!Answer() :- Occurred_in_year(\"Wrestlemania X\", year1), Introduced_in_year(\"Toyota Prius\", year2), year1 >= year2.\n.output Answer"]}
{"id": 2150, "answer": false, "completion": ".decl Celebrates(Person:symbol, Event:symbol)\nCelebrates(\"Emmanuel Macron\", \"Bastille Day\").\n.decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Emmanuel Macron\", \"French\").\n.decl Is_event_of_nationality(Event:symbol, Nationality:symbol)\nIs_event_of_nationality(\"Cinco de Mayo\", \"Mexican\").\n.decl Answer()\nAnswer() :- Celebrates(\"Emmanuel Macron\", \"Cinco de Mayo\").\nAnswer() :- Is_nationality(\"Emmanuel Macron\", nationality), Is_event_of_nationality(\"Cinco de Mayo\", nationality).\n.output Answer", "completions": [".decl Celebrates(Person:symbol, Event:symbol)\nCelebrates(\"Emmanuel Macron\", \"Bastille Day\").\n.decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Emmanuel Macron\", \"French\").\n.decl Is_event_of_nationality(Event:symbol, Nationality:symbol)\nIs_event_of_nationality(\"Cinco de Mayo\", \"Mexican\").\n.decl Answer()\nAnswer() :- Celebrates(\"Emmanuel Macron\", \"Cinco de Mayo\").\nAnswer() :- Is_nationality(\"Emmanuel Macron\", nationality), Is_event_of_nationality(\"Cinco de Mayo\", nationality).\n.output Answer"]}
{"id": 2151, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sand cat\", \"rodents\").\nEats(\"sand cat\", \"birds\").\nEats(\"sand cat\", \"reptiles\").\nEats(\"eel\", \"fish\").\nEats(\"eel\", \"invertebrates\").\n.decl Avoids_eating_all_prey(Animal_A:symbol, Animal_B:symbol)\nAvoids_eating_all_prey(Animal_A, Animal_B) :- Eats(Animal_A, Prey_A), Eats(Animal_B, Prey_B), Prey_A != Prey_B.\n.decl Answer()\nAnswer() :- Avoids_eating_all_prey(\"sand cat\", \"eel\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sand cat\", \"rodents\").\nEats(\"sand cat\", \"birds\").\nEats(\"sand cat\", \"reptiles\").\nEats(\"eel\", \"fish\").\nEats(\"eel\", \"invertebrates\").\n.decl Avoids_eating_all_prey(Animal_A:symbol, Animal_B:symbol)\nAvoids_eating_all_prey(Animal_A, Animal_B) :- Eats(Animal_A, Prey_A), Eats(Animal_B, Prey_B), Prey_A != Prey_B.\n.decl Answer()\nAnswer() :- Avoids_eating_all_prey(\"sand cat\", \"eel\").\n.output Answer"]}
{"id": 2152, "answer": false, "completion": ".decl Important_to_history(Person:symbol, Field:symbol)\nImportant_to_history(\"Drew Carey\", \"comedy\").\nImportant_to_history(\"Hulk Hogan\", \"wrestling\").\n.decl Answer()\nAnswer() :- Important_to_history(\"Drew Carey\", \"wrestling\").\n.output Answer", "completions": [".decl Important_to_history(Person:symbol, Field:symbol)\nImportant_to_history(\"Drew Carey\", \"comedy\").\nImportant_to_history(\"Hulk Hogan\", \"wrestling\").\n.decl Answer()\nAnswer() :- Important_to_history(\"Drew Carey\", \"wrestling\").\n.output Answer"]}
{"id": 2153, "answer": true, "completion": ".decl Reduces_jobs(Factor:symbol, Location:symbol)\nReduces_jobs(\"fossil fuels\", \"Gulf of Mexico\").\n.decl Answer()\nAnswer() :- Reduces_jobs(\"fossil fuels\", \"Gulf of Mexico\").\n.output Answer", "completions": [".decl Reduces_jobs(Factor:symbol, Location:symbol)\nReduces_jobs(\"fossil fuels\", \"Gulf of Mexico\").\n.decl Answer()\nAnswer() :- Reduces_jobs(\"fossil fuels\", \"Gulf of Mexico\").\n.output Answer"]}
{"id": 2154, "answer": true, "completion": ".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"Roman Gallic Wars\", 8).\nHas_duration(\"Pyramids construction\", 20).\n.decl Has_technology(Technology:symbol, Era:symbol)\nHas_technology(\"Roman engineering\", \"Roman era\").\nHas_technology(\"Egyptian engineering\", \"Ancient Egypt\").\n.decl Belongs_to_era(Event:symbol, Era:symbol)\nBelongs_to_era(\"Roman Gallic Wars\", \"Roman era\").\nBelongs_to_era(\"Pyramids construction\", \"Ancient Egypt\").\n.decl Answer()\nAnswer() :- Has_duration(\"Roman Gallic Wars\", duration1), Has_duration(\"Pyramids construction\", duration2), Belongs_to_era(\"Roman Gallic Wars\", era1), Belongs_to_era(\"Pyramids construction\", era2), Has_technology(technology1, era1), Has_technology(technology2, era2), duration1 < duration2, technology1 != technology2.\n.output Answer", "completions": [".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"Roman Gallic Wars\", 8).\nHas_duration(\"Pyramids construction\", 20).\n.decl Has_technology(Technology:symbol, Era:symbol)\nHas_technology(\"Roman engineering\", \"Roman era\").\nHas_technology(\"Egyptian engineering\", \"Ancient Egypt\").\n.decl Belongs_to_era(Event:symbol, Era:symbol)\nBelongs_to_era(\"Roman Gallic Wars\", \"Roman era\").\nBelongs_to_era(\"Pyramids construction\", \"Ancient Egypt\").\n.decl Answer()\nAnswer() :- Has_duration(\"Roman Gallic Wars\", duration1), Has_duration(\"Pyramids construction\", duration2), Belongs_to_era(\"Roman Gallic Wars\", era1), Belongs_to_era(\"Pyramids construction\", era2), Has_technology(technology1, era1), Has_technology(technology2, era2), duration1 < duration2, technology1 != technology2.\n.output Answer"]}
{"id": 2155, "answer": true, "completion": ".decl Works_at(Person:symbol, Company:symbol)\nWorks_at(\"workers\", \"Nissan\").\n.decl Company_has_headquarters(Company:symbol, Country:symbol)\nCompany_has_headquarters(\"Nissan\", \"Japan\").\n.decl Eats_with_utensil(Country:symbol, Utensil:symbol)\nEats_with_utensil(\"Japan\", \"chopsticks\").\n.decl Answer()\nAnswer() :- Works_at(person, \"Nissan\"), Company_has_headquarters(\"Nissan\", country), Eats_with_utensil(country, \"chopsticks\").\n.output Answer", "completions": [".decl Works_at(Person:symbol, Company:symbol)\nWorks_at(\"workers\", \"Nissan\").\n.decl Company_has_headquarters(Company:symbol, Country:symbol)\nCompany_has_headquarters(\"Nissan\", \"Japan\").\n.decl Eats_with_utensil(Country:symbol, Utensil:symbol)\nEats_with_utensil(\"Japan\", \"chopsticks\").\n.decl Answer()\nAnswer() :- Works_at(person, \"Nissan\"), Company_has_headquarters(\"Nissan\", country), Eats_with_utensil(country, \"chopsticks\").\n.output Answer"]}
{"id": 2156, "answer": true, "completion": ".decl Lives_in_temperature(Animal:symbol, Temperature:float)\nLives_in_temperature(\"manta ray\", 20).\n.decl Safe_temperature_for_cold_food_storage(Temperature:float)\nSafe_temperature_for_cold_food_storage(4).\n.decl Answer()\nAnswer() :- Lives_in_temperature(\"manta ray\", temperature1), Safe_temperature_for_cold_food_storage(temperature2), temperature1 > temperature2.\n.output Answer", "completions": [".decl Lives_in_temperature(Animal:symbol, Temperature:float)\nLives_in_temperature(\"manta ray\", 20).\n.decl Safe_temperature_for_cold_food_storage(Temperature:float)\nSafe_temperature_for_cold_food_storage(4).\n.decl Answer()\nAnswer() :- Lives_in_temperature(\"manta ray\", temperature1), Safe_temperature_for_cold_food_storage(temperature2), temperature1 > temperature2.\n.output Answer"]}
{"id": 2157, "answer": true, "completion": ".decl Has_n_members(Event:symbol, N_members:float)\nHas_n_members(\"felony jury\", 12).\nHas_n_members(\"Bunco game\", 12).\n.decl Answer()\nAnswer() :- Has_n_members(\"felony jury\", n_members1), Has_n_members(\"Bunco game\", n_members2), n_members1 >= n_members2.\n.output Answer", "completions": [".decl Has_n_members(Event:symbol, N_members:float)\nHas_n_members(\"felony jury\", 12).\nHas_n_members(\"Bunco game\", 12).\n.decl Answer()\nAnswer() :- Has_n_members(\"felony jury\", n_members1), Has_n_members(\"Bunco game\", n_members2), n_members1 >= n_members2.\n.output Answer"]}
{"id": 2158, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Eiffel Tower\", 324).\n.decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Arctic Ocean's deepest point\", 5500).\n.decl Answer()\nAnswer() :- Has_height(\"Eiffel Tower\", height), Has_depth(\"Arctic Ocean's deepest point\", depth), height <= depth.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Eiffel Tower\", 324).\n.decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Arctic Ocean's deepest point\", 5500).\n.decl Answer()\nAnswer() :- Has_height(\"Eiffel Tower\", height), Has_depth(\"Arctic Ocean's deepest point\", depth), height <= depth.\n.output Answer"]}
{"id": 2159, "answer": false, "completion": ".decl Job_responsibility(Role:symbol, Task:symbol)\nJob_responsibility(\"CEO\", \"strategic planning\").\nJob_responsibility(\"CEO\", \"decision making\").\nJob_responsibility(\"janitor\", \"cleaning toilets\").\n.decl Answer()\nAnswer() :- Job_responsibility(\"CEO\", \"cleaning toilets\").\n.output Answer", "completions": [".decl Job_responsibility(Role:symbol, Task:symbol)\nJob_responsibility(\"CEO\", \"strategic planning\").\nJob_responsibility(\"CEO\", \"decision making\").\nJob_responsibility(\"janitor\", \"cleaning toilets\").\n.decl Answer()\nAnswer() :- Job_responsibility(\"CEO\", \"cleaning toilets\").\n.output Answer"]}
{"id": 2160, "answer": false, "completion": ".decl Celebrated_in_season(Holiday:symbol, Season:symbol)\nCelebrated_in_season(\"Christmas\", \"winter\").\n.decl Answer()\nAnswer() :- Celebrated_in_season(\"Christmas\", \"winter\").\n.output Answer", "completions": [".decl Celebrated_in_season(Holiday:symbol, Season:symbol)\nCelebrated_in_season(\"Christmas\", \"winter\").\n.decl Answer()\nAnswer() :- Celebrated_in_season(\"Christmas\", \"winter\").\n.output Answer"]}
{"id": 2161, "answer": true, "completion": ".decl Is_lover(Person_A:symbol, Person_B:symbol)\nIs_lover(\"Moliere\", \"Queen Margot\").\n.decl Ill_fated_lover(Person_A:symbol, Person_B:symbol)\nIll_fated_lover(\"La Mole\", \"Queen Margot\").\n.decl Answer()\nAnswer() :- Is_lover(\"Moliere\", \"Queen Margot\"), Ill_fated_lover(\"Moliere\", \"Queen Margot\").\n.output Answer", "completions": [".decl Is_lover(Person_A:symbol, Person_B:symbol)\nIs_lover(\"Moliere\", \"Queen Margot\").\n.decl Ill_fated_lover(Person_A:symbol, Person_B:symbol)\nIll_fated_lover(\"La Mole\", \"Queen Margot\").\n.decl Answer()\nAnswer() :- Is_lover(\"Moliere\", \"Queen Margot\"), Ill_fated_lover(\"Moliere\", \"Queen Margot\").\n.output Answer"]}
{"id": 2162, "answer": true, "completion": ".decl Needs_chlorophyll(Plant:symbol, Need:symbol)\nNeeds_chlorophyll(\"Hostas\", \"yes\").\n.decl Has_chlorophyll(Plant:symbol, Chlorophyll:symbol)\nHas_chlorophyll(\"Hostas\", \"lots\").\n.decl Answer()\nAnswer() :- Needs_chlorophyll(\"Hostas\", need), Has_chlorophyll(\"Hostas\", chlorophyll), need = \"yes\", chlorophyll = \"lots\".\n.output Answer", "completions": [".decl Needs_chlorophyll(Plant:symbol, Need:symbol)\nNeeds_chlorophyll(\"Hostas\", \"yes\").\n.decl Has_chlorophyll(Plant:symbol, Chlorophyll:symbol)\nHas_chlorophyll(\"Hostas\", \"lots\").\n.decl Answer()\nAnswer() :- Needs_chlorophyll(\"Hostas\", need), Has_chlorophyll(\"Hostas\", chlorophyll), need = \"yes\", chlorophyll = \"lots\".\n.output Answer"]}
{"id": 2163, "answer": true, "completion": ".decl Is_sonnet(Work:symbol)\nIs_sonnet(\"Rime of the Ancient Mariner\").\n\n.decl Has_poetic_form(Work:symbol, Form:symbol)\nHas_poetic_form(\"Rime of the Ancient Mariner\", \"ballad\").\nHas_poetic_form(\"sonnet\", \"sonnet\").\n\n.decl Answer()\nAnswer() :- Is_sonnet(\"Rime of the Ancient Mariner\").\nAnswer() :- !Has_poetic_form(\"Rime of the Ancient Mariner\", \"sonnet\").\n.output Answer", "completions": [".decl Is_sonnet(Work:symbol)\nIs_sonnet(\"Rime of the Ancient Mariner\").\n\n.decl Has_poetic_form(Work:symbol, Form:symbol)\nHas_poetic_form(\"Rime of the Ancient Mariner\", \"ballad\").\nHas_poetic_form(\"sonnet\", \"sonnet\").\n\n.decl Answer()\nAnswer() :- Is_sonnet(\"Rime of the Ancient Mariner\").\nAnswer() :- !Has_poetic_form(\"Rime of the Ancient Mariner\", \"sonnet\").\n.output Answer"]}
{"id": 2164, "answer": true, "completion": ".decl Interested_in(Person:symbol, Subject:symbol)\nInterested_in(\"astronomer\", \"astronomy\").\nInterested_in(\"biologist\", \"drosophila\").\n.decl Answer()\nAnswer() :- Interested_in(\"astronomer\", \"drosophila\").\n.output Answer", "completions": [".decl Interested_in(Person:symbol, Subject:symbol)\nInterested_in(\"astronomer\", \"astronomy\").\nInterested_in(\"biologist\", \"drosophila\").\n.decl Answer()\nAnswer() :- Interested_in(\"astronomer\", \"drosophila\").\n.output Answer"]}
{"id": 2165, "answer": true, "completion": ".decl Has_currency(Country:symbol, Currency:symbol, Start_year:float, End_year:float)\nHas_currency(\"United Kingdom\", \"farthing\", 1700, 1960).\n.decl Available_in_year(Product:symbol, Year:float)\nAvailable_in_year(\"Hershey's Kisses in red foil\", 1960).\n.decl Answer()\nAnswer() :- Available_in_year(\"Hershey's Kisses in red foil\", year), Has_currency(\"United Kingdom\", \"farthing\", start_year, end_year), year <= end_year.\n.output Answer", "completions": [".decl Has_currency(Country:symbol, Currency:symbol, Start_year:float, End_year:float)\nHas_currency(\"United Kingdom\", \"farthing\", 1700, 1960).\n.decl Available_in_year(Product:symbol, Year:float)\nAvailable_in_year(\"Hershey's Kisses in red foil\", 1960).\n.decl Answer()\nAnswer() :- Available_in_year(\"Hershey's Kisses in red foil\", year), Has_currency(\"United Kingdom\", \"farthing\", start_year, end_year), year <= end_year.\n.output Answer"]}
{"id": 2166, "answer": false, "completion": ".decl Person(Name:symbol, Brain_structure:symbol)\nPerson(\"Gauss\", \"normal\").\n.decl Answer()\nAnswer() :- Person(\"Gauss\", \"normal\").\n.output Answer", "completions": [".decl Person(Name:symbol, Brain_structure:symbol)\nPerson(\"Gauss\", \"normal\").\n.decl Answer()\nAnswer() :- Person(\"Gauss\", \"normal\").\n.output Answer"]}
{"id": 2167, "answer": true, "completion": ".decl Substance(s:symbol)\nSubstance(\"dopamine\").\n.decl Route_of_administration(Substance:symbol, Route:symbol)\nRoute_of_administration(\"cocaine\", \"nasal\").\nRoute_of_administration(\"heroin\", \"nasal\").\n.decl Used_by_drug_users(Substance:symbol)\nUsed_by_drug_users(\"cocaine\").\nUsed_by_drug_users(\"heroin\").\n.decl Answer()\nAnswer() :- Substance(\"dopamine\"), Route_of_administration(\"dopamine\", \"nasal\"), Used_by_drug_users(\"dopamine\").\n.output Answer", "completions": [".decl Substance(s:symbol)\nSubstance(\"dopamine\").\n.decl Route_of_administration(Substance:symbol, Route:symbol)\nRoute_of_administration(\"cocaine\", \"nasal\").\nRoute_of_administration(\"heroin\", \"nasal\").\n.decl Used_by_drug_users(Substance:symbol)\nUsed_by_drug_users(\"cocaine\").\nUsed_by_drug_users(\"heroin\").\n.decl Answer()\nAnswer() :- Substance(\"dopamine\"), Route_of_administration(\"dopamine\", \"nasal\"), Used_by_drug_users(\"dopamine\").\n.output Answer"]}
{"id": 2168, "answer": true, "completion": ".decl Has_moustache(Gender:symbol, Common:float)\nHas_moustache(\"men\", 0.9).\nHas_moustache(\"women\", 0.1).\n.decl Answer()\nAnswer() :- Has_moustache(\"women\", common), common > 0.5.\n.output Answer", "completions": [".decl Has_moustache(Gender:symbol, Common:float)\nHas_moustache(\"men\", 0.9).\nHas_moustache(\"women\", 0.1).\n.decl Answer()\nAnswer() :- Has_moustache(\"women\", common), common > 0.5.\n.output Answer"]}
{"id": 2169, "answer": true, "completion": ".decl Has_ancestors(Person:symbol, Ancestors:symbol)\nHas_ancestors(\"Demi Lovato\", \"Native Americans\").\n.decl Helped_turn_maize_into_popcorn(Ancestors:symbol)\nHelped_turn_maize_into_popcorn(\"Native Americans\").\n.decl Answer()\nAnswer() :- Has_ancestors(\"Demi Lovato\", ancestors), Helped_turn_maize_into_popcorn(ancestors).\n.output Answer", "completions": [".decl Has_ancestors(Person:symbol, Ancestors:symbol)\nHas_ancestors(\"Demi Lovato\", \"Native Americans\").\n.decl Helped_turn_maize_into_popcorn(Ancestors:symbol)\nHelped_turn_maize_into_popcorn(\"Native Americans\").\n.decl Answer()\nAnswer() :- Has_ancestors(\"Demi Lovato\", ancestors), Helped_turn_maize_into_popcorn(ancestors).\n.output Answer"]}
{"id": 2170, "answer": false, "completion": ".decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Long John Silver's\", \"fish\").\nServes(\"Long John Silver's\", \"shrimp\").\nServes(\"Long John Silver's\", \"chicken\").\n.decl Is_sea_otter(Food:symbol)\nIs_sea_otter(\"sea otter\").\n.decl Answer()\nAnswer() :- Serves(\"Long John Silver's\", food), Is_sea_otter(food).\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Long John Silver's\", \"fish\").\nServes(\"Long John Silver's\", \"shrimp\").\nServes(\"Long John Silver's\", \"chicken\").\n.decl Is_sea_otter(Food:symbol)\nIs_sea_otter(\"sea otter\").\n.decl Answer()\nAnswer() :- Serves(\"Long John Silver's\", food), Is_sea_otter(food).\n.output Answer"]}
{"id": 2171, "answer": false, "completion": ".decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\n.decl Days_in_week(Week:symbol, Days:float)\nDays_in_week(\"week\", 7).\n.decl Answer()\nAnswer() :- Days_in_week(\"week\", days), Is_prime(days).\n.output Answer", "completions": [".decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\n.decl Days_in_week(Week:symbol, Days:float)\nDays_in_week(\"week\", 7).\n.decl Answer()\nAnswer() :- Days_in_week(\"week\", days), Is_prime(days).\n.output Answer"]}
{"id": 2172, "answer": true, "completion": ".decl Lived_in(Person:symbol, Country:symbol)\nLived_in(\"Şerafeddin Sabuncuoğlu\", \"Turkey\").\n.decl Food_origin(Food:symbol, Country:symbol)\nFood_origin(\"Börek\", \"Turkey\").\n.decl Answer()\nAnswer() :- Lived_in(\"Şerafeddin Sabuncuoğlu\", country), Food_origin(\"Börek\", country).\n.output Answer", "completions": [".decl Lived_in(Person:symbol, Country:symbol)\nLived_in(\"Şerafeddin Sabuncuoğlu\", \"Turkey\").\n.decl Food_origin(Food:symbol, Country:symbol)\nFood_origin(\"Börek\", \"Turkey\").\n.decl Answer()\nAnswer() :- Lived_in(\"Şerafeddin Sabuncuoğlu\", country), Food_origin(\"Börek\", country).\n.output Answer"]}
{"id": 2173, "answer": false, "completion": ".decl Has_side_effect(Practice:symbol, Side_effect:symbol)\nHas_side_effect(\"reiki\", \"relaxation\").\nHas_side_effect(\"reiki\", \"stress reduction\").\nHas_side_effect(\"reiki\", \"healing\").\n.decl Answer()\nAnswer() :- Has_side_effect(\"reiki\", \"bruises\").\n.output Answer", "completions": [".decl Has_side_effect(Practice:symbol, Side_effect:symbol)\nHas_side_effect(\"reiki\", \"relaxation\").\nHas_side_effect(\"reiki\", \"stress reduction\").\nHas_side_effect(\"reiki\", \"healing\").\n.decl Answer()\nAnswer() :- Has_side_effect(\"reiki\", \"bruises\").\n.output Answer"]}
{"id": 2174, "answer": true, "completion": ".decl Included_in_event(Group:symbol, Event:symbol)\nIncluded_in_event(\"Firefighters\", \"September 11th memorial\").\n.decl Answer()\nAnswer() :- Included_in_event(\"Firefighters\", \"September 11th memorial\").\n.output Answer", "completions": [".decl Included_in_event(Group:symbol, Event:symbol)\nIncluded_in_event(\"Firefighters\", \"September 11th memorial\").\n.decl Answer()\nAnswer() :- Included_in_event(\"Firefighters\", \"September 11th memorial\").\n.output Answer"]}
{"id": 2175, "answer": true, "completion": ".decl Believes_in(Person:symbol, Entity:symbol)\nBelieves_in(\"Martin Luther\", \"Satan\").\n.decl Answer()\nAnswer() :- Believes_in(\"Martin Luther\", \"Satan\").\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Entity:symbol)\nBelieves_in(\"Martin Luther\", \"Satan\").\n.decl Answer()\nAnswer() :- Believes_in(\"Martin Luther\", \"Satan\").\n.output Answer"]}
{"id": 2176, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:symbol)\nHas_size(\"Donatello crucifix\", \"life size\").\n.decl Identified_in_year(Object:symbol, Year:float)\nIdentified_in_year(\"Donatello crucifix\", 2020).\n.decl Answer()\nAnswer() :- Has_size(\"Donatello crucifix\", \"life size\"), Identified_in_year(\"Donatello crucifix\", 2020).\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:symbol)\nHas_size(\"Donatello crucifix\", \"life size\").\n.decl Identified_in_year(Object:symbol, Year:float)\nIdentified_in_year(\"Donatello crucifix\", 2020).\n.decl Answer()\nAnswer() :- Has_size(\"Donatello crucifix\", \"life size\"), Identified_in_year(\"Donatello crucifix\", 2020).\n.output Answer"]}
{"id": 2177, "answer": false, "completion": ".decl Has_courage(Person:symbol, Age:symbol, Courage:float)\nHas_courage(\"Neville Longbottom\", \"child\", 0.6).\nHas_courage(\"Neville Longbottom\", \"adult\", 0.9).\n.decl Answer()\nAnswer() :- Has_courage(\"Neville Longbottom\", \"child\", courage1), Has_courage(\"Neville Longbottom\", \"adult\", courage2), courage1 > courage2.\n.output Answer", "completions": [".decl Has_courage(Person:symbol, Age:symbol, Courage:float)\nHas_courage(\"Neville Longbottom\", \"child\", 0.6).\nHas_courage(\"Neville Longbottom\", \"adult\", 0.9).\n.decl Answer()\nAnswer() :- Has_courage(\"Neville Longbottom\", \"child\", courage1), Has_courage(\"Neville Longbottom\", \"adult\", courage2), courage1 > courage2.\n.output Answer"]}
{"id": 2178, "answer": true, "completion": ".decl Is_model(Person:symbol)\nIs_model(\"model\").\n.decl Starred_in(Person:symbol, Movie:symbol)\nStarred_in(\"Anne Parillaud\", \"La Femme Nikita\").\n.decl Is_remake(Movie1:symbol, Movie2:symbol)\nIs_remake(\"LA Femme Nikita remake\", \"La Femme Nikita\").\n.decl Answer()\nAnswer() :- Is_model(person), Starred_in(\"Anne Parillaud\", original_movie), Is_remake(remake_movie, original_movie).\n.output Answer", "completions": [".decl Is_model(Person:symbol)\nIs_model(\"model\").\n.decl Starred_in(Person:symbol, Movie:symbol)\nStarred_in(\"Anne Parillaud\", \"La Femme Nikita\").\n.decl Is_remake(Movie1:symbol, Movie2:symbol)\nIs_remake(\"LA Femme Nikita remake\", \"La Femme Nikita\").\n.decl Answer()\nAnswer() :- Is_model(person), Starred_in(\"Anne Parillaud\", original_movie), Is_remake(remake_movie, original_movie).\n.output Answer"]}
{"id": 2179, "answer": true, "completion": ".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Peter Griffin\", \"Pawtucket Brewery\").\n.decl Needs(Company:symbol, Resource:symbol)\nNeeds(\"Pawtucket Brewery\", \"barley\").\n.decl Answer()\nAnswer() :- Works_for(\"Peter Griffin\", company), Needs(company, \"barley\").\n.output Answer", "completions": [".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Peter Griffin\", \"Pawtucket Brewery\").\n.decl Needs(Company:symbol, Resource:symbol)\nNeeds(\"Pawtucket Brewery\", \"barley\").\n.decl Answer()\nAnswer() :- Works_for(\"Peter Griffin\", company), Needs(company, \"barley\").\n.output Answer"]}
{"id": 2180, "answer": false, "completion": ".decl Kills(Substance:symbol, Disease:symbol)\nKills(\"bleach\", \"rabies\").\nKills(\"alcohol\", \"rabies\").\n.decl Answer()\nAnswer() :- Kills(\"olive oil\", \"rabies\").\n.output Answer", "completions": [".decl Kills(Substance:symbol, Disease:symbol)\nKills(\"bleach\", \"rabies\").\nKills(\"alcohol\", \"rabies\").\n.decl Answer()\nAnswer() :- Kills(\"olive oil\", \"rabies\").\n.output Answer"]}
{"id": 2181, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Queen Victoria\", 1819).\nBorn_in_year(\"Ferdinand Magellan\", 1480).\n.decl Visited_Guam(Person:symbol, Year:float)\nVisited_Guam(\"Ferdinand Magellan\", 1521).\n.decl Friends(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Born_in_year(\"Queen Victoria\", birth_year1), Born_in_year(\"Ferdinand Magellan\", birth_year2), Visited_Guam(\"Ferdinand Magellan\", visit_year), birth_year1 <= visit_year, birth_year2 >= visit_year, Friends(\"Ferdinand Magellan\", \"Queen Victoria\").\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Queen Victoria\", 1819).\nBorn_in_year(\"Ferdinand Magellan\", 1480).\n.decl Visited_Guam(Person:symbol, Year:float)\nVisited_Guam(\"Ferdinand Magellan\", 1521).\n.decl Friends(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Born_in_year(\"Queen Victoria\", birth_year1), Born_in_year(\"Ferdinand Magellan\", birth_year2), Visited_Guam(\"Ferdinand Magellan\", visit_year), birth_year1 <= visit_year, birth_year2 >= visit_year, Friends(\"Ferdinand Magellan\", \"Queen Victoria\").\n.output Answer"]}
{"id": 2182, "answer": true, "completion": ".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"American black bear\", 1.8).\nHas_size(\"sun bear\", 1.5).\n.decl Can_swallow_whole(Animal_A:symbol, Animal_B:symbol)\nCan_swallow_whole(\"American black bear\", \"sun bear\") :- Has_size(\"American black bear\", size1), Has_size(\"sun bear\", size2), size1 > size2.\n.decl Answer()\nAnswer() :- Can_swallow_whole(\"American black bear\", \"sun bear\").\n.output Answer", "completions": [".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"American black bear\", 1.8).\nHas_size(\"sun bear\", 1.5).\n.decl Can_swallow_whole(Animal_A:symbol, Animal_B:symbol)\nCan_swallow_whole(\"American black bear\", \"sun bear\") :- Has_size(\"American black bear\", size1), Has_size(\"sun bear\", size2), size1 > size2.\n.decl Answer()\nAnswer() :- Can_swallow_whole(\"American black bear\", \"sun bear\").\n.output Answer"]}
{"id": 2183, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Adam Sandler's home\", 13000).\nHas_size(\"average American family home\", 2500).\n.decl Answer()\nAnswer() :- Has_size(\"Adam Sandler's home\", size1), Has_size(\"average American family home\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Adam Sandler's home\", 13000).\nHas_size(\"average American family home\", 2500).\n.decl Answer()\nAnswer() :- Has_size(\"Adam Sandler's home\", size1), Has_size(\"average American family home\", size2), size1 < size2.\n.output Answer"]}
{"id": 2184, "answer": true, "completion": ".decl Has_vitamin_K(Food:symbol, Amount:float)\nHas_vitamin_K(\"brussels sprouts\", 300).\n.decl Affects_vitamin_K(Medication:symbol, Effect:symbol)\nAffects_vitamin_K(\"Coumadin\", \"decreases\").\n.decl Answer()\nAnswer() :- Has_vitamin_K(\"brussels sprouts\", amount), Affects_vitamin_K(\"Coumadin\", \"decreases\"), amount > 0.\n.output Answer", "completions": [".decl Has_vitamin_K(Food:symbol, Amount:float)\nHas_vitamin_K(\"brussels sprouts\", 300).\n.decl Affects_vitamin_K(Medication:symbol, Effect:symbol)\nAffects_vitamin_K(\"Coumadin\", \"decreases\").\n.decl Answer()\nAnswer() :- Has_vitamin_K(\"brussels sprouts\", amount), Affects_vitamin_K(\"Coumadin\", \"decreases\"), amount > 0.\n.output Answer"]}
{"id": 2185, "answer": true, "completion": ".decl Important_to_religion(Place:symbol, Religion:symbol)\nImportant_to_religion(\"Holy Land\", \"Christianity\").\nImportant_to_religion(\"Holy Land\", \"Judaism\").\nImportant_to_religion(\"Holy Land\", \"Islam\").\n.decl Eastern_religion(Religion:symbol)\nEastern_religion(\"Hinduism\").\nEastern_religion(\"Buddhism\").\nEastern_religion(\"Taoism\").\nEastern_religion(\"Shinto\").\n.decl Answer()\nAnswer() :- Important_to_religion(\"Holy Land\", religion), Eastern_religion(religion).\n.output Answer", "completions": [".decl Important_to_religion(Place:symbol, Religion:symbol)\nImportant_to_religion(\"Holy Land\", \"Christianity\").\nImportant_to_religion(\"Holy Land\", \"Judaism\").\nImportant_to_religion(\"Holy Land\", \"Islam\").\n.decl Eastern_religion(Religion:symbol)\nEastern_religion(\"Hinduism\").\nEastern_religion(\"Buddhism\").\nEastern_religion(\"Taoism\").\nEastern_religion(\"Shinto\").\n.decl Answer()\nAnswer() :- Important_to_religion(\"Holy Land\", religion), Eastern_religion(religion).\n.output Answer"]}
{"id": 2186, "answer": true, "completion": ".decl Has_job_security(Person:symbol, Job_security:symbol)\nHas_job_security(\"Prime Minister of the United Kingdom\", \"poor\").\n.decl Answer()\nAnswer() :- Has_job_security(\"Prime Minister of the United Kingdom\", \"poor\").\n.output Answer", "completions": [".decl Has_job_security(Person:symbol, Job_security:symbol)\nHas_job_security(\"Prime Minister of the United Kingdom\", \"poor\").\n.decl Answer()\nAnswer() :- Has_job_security(\"Prime Minister of the United Kingdom\", \"poor\").\n.output Answer"]}
{"id": 2187, "answer": true, "completion": ".decl Has_capacity(Transport:symbol, Capacity:float)\nHas_capacity(\"Symphony of the Seas\", 6680).\n.decl Has_members(Organization:symbol, Members:float)\nHas_members(\"People's Volunteer Army\", 3000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Symphony of the Seas\", capacity), Has_members(\"People's Volunteer Army\", members), capacity >= members.\n.output Answer", "completions": [".decl Has_capacity(Transport:symbol, Capacity:float)\nHas_capacity(\"Symphony of the Seas\", 6680).\n.decl Has_members(Organization:symbol, Members:float)\nHas_members(\"People's Volunteer Army\", 3000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Symphony of the Seas\", capacity), Has_members(\"People's Volunteer Army\", members), capacity >= members.\n.output Answer"]}
{"id": 2188, "answer": true, "completion": ".decl Is_professional_boxer(Person:symbol)\nIs_professional_boxer(\"professional boxer\").\n.decl Has_low_dental_bills(Person:symbol)\nHas_low_dental_bills(\"non-boxer\").\n.decl Answer()\nAnswer() :- Is_professional_boxer(person), !Has_low_dental_bills(person).\n.output Answer", "completions": [".decl Is_professional_boxer(Person:symbol)\nIs_professional_boxer(\"professional boxer\").\n.decl Has_low_dental_bills(Person:symbol)\nHas_low_dental_bills(\"non-boxer\").\n.decl Answer()\nAnswer() :- Is_professional_boxer(person), !Has_low_dental_bills(person).\n.output Answer"]}
{"id": 2189, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"leader of Heaven's Gate\", 1931).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"leader of Heaven's Gate\", 1997).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"JPEG format\", 1992).\n.decl Answer()\nAnswer() :- Born_in_year(\"leader of Heaven's Gate\", birth_year), Died_in_year(\"leader of Heaven's Gate\", death_year), Invented_in_year(\"JPEG format\", invention_year), birth_year <= invention_year, invention_year <= death_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"leader of Heaven's Gate\", 1931).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"leader of Heaven's Gate\", 1997).\n.decl Invented_in_year(Technology:symbol, Invention_year:float)\nInvented_in_year(\"JPEG format\", 1992).\n.decl Answer()\nAnswer() :- Born_in_year(\"leader of Heaven's Gate\", birth_year), Died_in_year(\"leader of Heaven's Gate\", death_year), Invented_in_year(\"JPEG format\", invention_year), birth_year <= invention_year, invention_year <= death_year.\n.output Answer"]}
{"id": 2190, "answer": true, "completion": ".decl Has_political_association(Person_A:symbol, Person_B:symbol, Association_Type:symbol)\nHas_political_association(\"Pompey\", \"Caesar\", \"First Triumvirate\").\n.decl Influences(Event_A:symbol, Event_B:symbol)\nInfluences(\"First Triumvirate\", \"reality TV\").\n.decl Answer()\nAnswer() :- Has_political_association(\"Pompey\", \"Caesar\", association_type), Influences(association_type, \"reality TV\").\n.output Answer", "completions": [".decl Has_political_association(Person_A:symbol, Person_B:symbol, Association_Type:symbol)\nHas_political_association(\"Pompey\", \"Caesar\", \"First Triumvirate\").\n.decl Influences(Event_A:symbol, Event_B:symbol)\nInfluences(\"First Triumvirate\", \"reality TV\").\n.decl Answer()\nAnswer() :- Has_political_association(\"Pompey\", \"Caesar\", association_type), Influences(association_type, \"reality TV\").\n.output Answer"]}
{"id": 2191, "answer": true, "completion": ".decl Authentic_knight(Knight:symbol)\nAuthentic_knight(\"Medieval Times show knight\").\n.decl Answer()\nAnswer() :- !Authentic_knight(\"Medieval Times show knight\").\n.output Answer", "completions": [".decl Authentic_knight(Knight:symbol)\nAuthentic_knight(\"Medieval Times show knight\").\n.decl Answer()\nAnswer() :- !Authentic_knight(\"Medieval Times show knight\").\n.output Answer"]}
{"id": 2192, "answer": true, "completion": ".decl Amendment(Num:float, Effect:symbol)\nAmendment(23, \"gives residents of Washington D.C. the right to vote for president\").\n.decl Territory(Territory:symbol, Status:symbol)\nTerritory(\"Puerto Rico\", \"not a state\").\n.decl Answer()\nAnswer() :- Amendment(23, effect), Territory(\"Puerto Rico\", status), effect != \"gives Puerto Ricans the right to vote for president\", status = \"not a state\".\n.output Answer", "completions": [".decl Amendment(Num:float, Effect:symbol)\nAmendment(23, \"gives residents of Washington D.C. the right to vote for president\").\n.decl Territory(Territory:symbol, Status:symbol)\nTerritory(\"Puerto Rico\", \"not a state\").\n.decl Answer()\nAnswer() :- Amendment(23, effect), Territory(\"Puerto Rico\", status), effect != \"gives Puerto Ricans the right to vote for president\", status = \"not a state\".\n.output Answer"]}
{"id": 2193, "answer": true, "completion": ".decl Has_game_format(Console:symbol, Format:symbol)\nHas_game_format(\"original Nintendo\", \"cartridge\").\nHas_game_format(\"Playstation 3\", \"Blu-ray disc\").\n.decl Answer()\nAnswer() :- Has_game_format(\"original Nintendo\", format1), Has_game_format(\"Playstation 3\", format2), format1 = format2.\n.output Answer", "completions": [".decl Has_game_format(Console:symbol, Format:symbol)\nHas_game_format(\"original Nintendo\", \"cartridge\").\nHas_game_format(\"Playstation 3\", \"Blu-ray disc\").\n.decl Answer()\nAnswer() :- Has_game_format(\"original Nintendo\", format1), Has_game_format(\"Playstation 3\", format2), format1 = format2.\n.output Answer"]}
{"id": 2194, "answer": true, "completion": ".decl Is_composer(Person:symbol, Work:symbol)\nIs_composer(\"George Frideric Handel\", \"Messiah\").\n.decl Is_musician(Person:symbol, Instrument:symbol)\nIs_musician(\"Bruce Gandy\", \"bagpipes\").\n.decl Answer()\nAnswer() :- Is_composer(\"Bruce Gandy\", \"Messiah\").\nAnswer() :- Is_musician(\"Bruce Gandy\", instrument), !Is_composer(\"Bruce Gandy\", \"Messiah\"), !Is_composer(\"George Frideric Handel\", instrument).\n.output Answer", "completions": [".decl Is_composer(Person:symbol, Work:symbol)\nIs_composer(\"George Frideric Handel\", \"Messiah\").\n.decl Is_musician(Person:symbol, Instrument:symbol)\nIs_musician(\"Bruce Gandy\", \"bagpipes\").\n.decl Answer()\nAnswer() :- Is_composer(\"Bruce Gandy\", \"Messiah\").\nAnswer() :- Is_musician(\"Bruce Gandy\", instrument), !Is_composer(\"Bruce Gandy\", \"Messiah\"), !Is_composer(\"George Frideric Handel\", instrument).\n.output Answer"]}
{"id": 2195, "answer": true, "completion": ".decl Runs_from_to(Transport:symbol, Location_A:symbol, Location_B:symbol)\nRuns_from_to(\"Amtrak\", \"NYC\", \"Washington DC\").\nRuns_from_to(\"Amtrak\", \"NYC\", \"Boston\").\nRuns_from_to(\"Amtrak\", \"NYC\", \"Philadelphia\").\n.decl Is_Moai_location(Location:symbol)\nIs_Moai_location(\"Easter Island\").\n.decl Answer()\nAnswer() :- Runs_from_to(\"Amtrak\", \"NYC\", location), Is_Moai_location(location).\n.output Answer", "completions": [".decl Runs_from_to(Transport:symbol, Location_A:symbol, Location_B:symbol)\nRuns_from_to(\"Amtrak\", \"NYC\", \"Washington DC\").\nRuns_from_to(\"Amtrak\", \"NYC\", \"Boston\").\nRuns_from_to(\"Amtrak\", \"NYC\", \"Philadelphia\").\n.decl Is_Moai_location(Location:symbol)\nIs_Moai_location(\"Easter Island\").\n.decl Answer()\nAnswer() :- Runs_from_to(\"Amtrak\", \"NYC\", location), Is_Moai_location(location).\n.output Answer"]}
{"id": 2196, "answer": true, "completion": ".decl Has_emotion(State:symbol, Emotion:symbol)\nHas_emotion(\"coma\", \"fear\").\n.decl Answer()\nAnswer() :- Has_emotion(\"coma\", \"fear\").\n.output Answer", "completions": [".decl Has_emotion(State:symbol, Emotion:symbol)\nHas_emotion(\"coma\", \"fear\").\n.decl Answer()\nAnswer() :- Has_emotion(\"coma\", \"fear\").\n.output Answer"]}
{"id": 2197, "answer": true, "completion": ".decl Has_presidential_number(President:symbol, Presidential_number:float)\nHas_presidential_number(\"Andrew Johnson\", 17).\n.decl Has_emperor_number(Emperor:symbol, Emperor_number:float)\nHas_emperor_number(\"Elagabalus\", 25).\n.decl Answer()\nAnswer() :- Has_presidential_number(\"Andrew Johnson\", presidential_number), Has_emperor_number(\"Elagabalus\", emperor_number), presidential_number > emperor_number.\n.output Answer", "completions": [".decl Has_presidential_number(President:symbol, Presidential_number:float)\nHas_presidential_number(\"Andrew Johnson\", 17).\n.decl Has_emperor_number(Emperor:symbol, Emperor_number:float)\nHas_emperor_number(\"Elagabalus\", 25).\n.decl Answer()\nAnswer() :- Has_presidential_number(\"Andrew Johnson\", presidential_number), Has_emperor_number(\"Elagabalus\", emperor_number), presidential_number > emperor_number.\n.output Answer"]}
{"id": 2198, "answer": true, "completion": ".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Lamborghini's fastest model\", 350).\nHas_top_speed(\"Porsche 911\", 330).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Lamborghini's fastest model\", speed1), Has_top_speed(\"Porsche 911\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Lamborghini's fastest model\", 350).\nHas_top_speed(\"Porsche 911\", 330).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Lamborghini's fastest model\", speed1), Has_top_speed(\"Porsche 911\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 2199, "answer": true, "completion": ".decl Is_easy_to_eat(Food:symbol, Ease:symbol)\nIs_easy_to_eat(\"fresh garlic cloves\", \"hard\").\nIs_easy_to_eat(\"roasted garlic cloves\", \"easy\").\n.decl Answer()\nAnswer() :- Is_easy_to_eat(\"fresh garlic cloves\", ease1), Is_easy_to_eat(\"roasted garlic cloves\", ease2), ease1 = ease2.\n.output Answer", "completions": [".decl Is_easy_to_eat(Food:symbol, Ease:symbol)\nIs_easy_to_eat(\"fresh garlic cloves\", \"hard\").\nIs_easy_to_eat(\"roasted garlic cloves\", \"easy\").\n.decl Answer()\nAnswer() :- Is_easy_to_eat(\"fresh garlic cloves\", ease1), Is_easy_to_eat(\"roasted garlic cloves\", ease2), ease1 = ease2.\n.output Answer"]}
{"id": 2200, "answer": true, "completion": ".decl Owns(Object:symbol, Owner_type:symbol)\nOwns(\"fax machine\", \"office\").\nOwns(\"fax machine\", \"home\").\n.decl Is_type(Person_type:symbol, Category:symbol)\nIs_type(\"college student\", \"person\").\nIs_type(\"office worker\", \"person\").\nIs_type(\"homeowner\", \"person\").\n.decl Answer()\nAnswer() :- Owns(\"fax machine\", owner_type), Is_type(\"college student\", category), owner_type = category.\n.output Answer", "completions": [".decl Owns(Object:symbol, Owner_type:symbol)\nOwns(\"fax machine\", \"office\").\nOwns(\"fax machine\", \"home\").\n.decl Is_type(Person_type:symbol, Category:symbol)\nIs_type(\"college student\", \"person\").\nIs_type(\"office worker\", \"person\").\nIs_type(\"homeowner\", \"person\").\n.decl Answer()\nAnswer() :- Owns(\"fax machine\", owner_type), Is_type(\"college student\", category), owner_type = category.\n.output Answer"]}
{"id": 2201, "answer": false, "completion": ".decl Visits_n_times(Person:symbol, Place:symbol, N_visits:float, Cost:float)\n.decl Has_admission_fee(Place:symbol, Fee:float)\nHas_admission_fee(\"Metropolitan Museum of Art\", 10).\n.decl Answer()\nAnswer() :- Visits_n_times(\"Bernie Sanders\", \"Metropolitan Museum of Art\", 20, cost), Has_admission_fee(\"Metropolitan Museum of Art\", fee), cost = 20 * fee, cost < 200.\n.output Answer", "completions": [".decl Visits_n_times(Person:symbol, Place:symbol, N_visits:float, Cost:float)\n.decl Has_admission_fee(Place:symbol, Fee:float)\nHas_admission_fee(\"Metropolitan Museum of Art\", 10).\n.decl Answer()\nAnswer() :- Visits_n_times(\"Bernie Sanders\", \"Metropolitan Museum of Art\", 20, cost), Has_admission_fee(\"Metropolitan Museum of Art\", fee), cost = 20 * fee, cost < 200.\n.output Answer"]}
{"id": 2202, "answer": true, "completion": ".decl Predates(Event_A:symbol, Event_B:symbol)\nPredates(\"Qwerty keyboard layout\", \"computers\").\n.decl Answer()\nAnswer() :- Predates(\"Qwerty keyboard layout\", \"computers\").\n.output Answer", "completions": [".decl Predates(Event_A:symbol, Event_B:symbol)\nPredates(\"Qwerty keyboard layout\", \"computers\").\n.decl Answer()\nAnswer() :- Predates(\"Qwerty keyboard layout\", \"computers\").\n.output Answer"]}
{"id": 2203, "answer": false, "completion": ".decl Islamic_dominated_country(Country:symbol)\nIslamic_dominated_country(\"Indonesia\").\nIslamic_dominated_country(\"Saudi Arabia\").\nIslamic_dominated_country(\"Turkey\").\nIslamic_dominated_country(\"Malaysia\").\nIslamic_dominated_country(\"United Arab Emirates\").\n\n.decl Has_Starbucks(Country:symbol)\nHas_Starbucks(\"Indonesia\").\nHas_Starbucks(\"Saudi Arabia\").\nHas_Starbucks(\"Turkey\").\nHas_Starbucks(\"Malaysia\").\nHas_Starbucks(\"United Arab Emirates\").\n\n.decl Answer()\nAnswer() :- Islamic_dominated_country(country), Has_Starbucks(country).\n.output Answer", "completions": [".decl Islamic_dominated_country(Country:symbol)\nIslamic_dominated_country(\"Indonesia\").\nIslamic_dominated_country(\"Saudi Arabia\").\nIslamic_dominated_country(\"Turkey\").\nIslamic_dominated_country(\"Malaysia\").\nIslamic_dominated_country(\"United Arab Emirates\").\n\n.decl Has_Starbucks(Country:symbol)\nHas_Starbucks(\"Indonesia\").\nHas_Starbucks(\"Saudi Arabia\").\nHas_Starbucks(\"Turkey\").\nHas_Starbucks(\"Malaysia\").\nHas_Starbucks(\"United Arab Emirates\").\n\n.decl Answer()\nAnswer() :- Islamic_dominated_country(country), Has_Starbucks(country).\n.output Answer"]}
{"id": 2204, "answer": true, "completion": ".decl Event_has_action(Event:symbol, Action:symbol)\nEvent_has_action(\"birthday party\", \"blow out candles\").\nEvent_has_action(\"funeral\", \"mourning\").\n.decl Answer()\nAnswer() :- Event_has_action(\"funeral\", \"blow out candles\").\n.output Answer", "completions": [".decl Event_has_action(Event:symbol, Action:symbol)\nEvent_has_action(\"birthday party\", \"blow out candles\").\nEvent_has_action(\"funeral\", \"mourning\").\n.decl Answer()\nAnswer() :- Event_has_action(\"funeral\", \"blow out candles\").\n.output Answer"]}
{"id": 2205, "answer": true, "completion": ".decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(\"Eve\", \"Adam\").\nIs_related(\"Cain\", \"Eve\").\nIs_related(\"Cain\", \"Adam\").\nIs_related(\"Abel\", \"Eve\").\nIs_related(\"Abel\", \"Adam\").\n.decl In_relationship(Person_A:symbol, Person_B:symbol)\nIn_relationship(\"Eve\", \"Adam\").\n.decl Is_incestuous(Person_A:symbol, Person_B:symbol)\nIs_incestuous(Person_A, Person_B) :- In_relationship(Person_A, Person_B), Is_related(Person_A, Person_B).\n.decl Answer()\nAnswer() :- Is_incestuous(\"Eve\", person).\n.output Answer", "completions": [".decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(\"Eve\", \"Adam\").\nIs_related(\"Cain\", \"Eve\").\nIs_related(\"Cain\", \"Adam\").\nIs_related(\"Abel\", \"Eve\").\nIs_related(\"Abel\", \"Adam\").\n.decl In_relationship(Person_A:symbol, Person_B:symbol)\nIn_relationship(\"Eve\", \"Adam\").\n.decl Is_incestuous(Person_A:symbol, Person_B:symbol)\nIs_incestuous(Person_A, Person_B) :- In_relationship(Person_A, Person_B), Is_related(Person_A, Person_B).\n.decl Answer()\nAnswer() :- Is_incestuous(\"Eve\", person).\n.output Answer"]}
{"id": 2206, "answer": true, "completion": ".decl Is_animal(Animal:symbol)\nIs_animal(\"placozoa\").\n\n.decl Has_learning_disabilities(Animal:symbol)\nHas_learning_disabilities(\"human\").\n\n.decl Answer()\nAnswer() :- Is_animal(\"placozoa\"), Has_learning_disabilities(\"placozoa\").\nAnswer() :- !Has_learning_disabilities(\"placozoa\").\n.output Answer", "completions": [".decl Is_animal(Animal:symbol)\nIs_animal(\"placozoa\").\n\n.decl Has_learning_disabilities(Animal:symbol)\nHas_learning_disabilities(\"human\").\n\n.decl Answer()\nAnswer() :- Is_animal(\"placozoa\"), Has_learning_disabilities(\"placozoa\").\nAnswer() :- !Has_learning_disabilities(\"placozoa\").\n.output Answer"]}
{"id": 2207, "answer": true, "completion": ".decl Has_opinion_on_topic(Band:symbol, Topic:symbol, Stance:symbol)\nHas_opinion_on_topic(\"System of a Down\", \"globalization\", \"opposed\").\n.decl Answer()\nAnswer() :- Has_opinion_on_topic(\"System of a Down\", \"globalization\", \"opposed\").\n.output Answer", "completions": [".decl Has_opinion_on_topic(Band:symbol, Topic:symbol, Stance:symbol)\nHas_opinion_on_topic(\"System of a Down\", \"globalization\", \"opposed\").\n.decl Answer()\nAnswer() :- Has_opinion_on_topic(\"System of a Down\", \"globalization\", \"opposed\").\n.output Answer"]}
{"id": 2208, "answer": false, "completion": ".decl Is_liar(Person:symbol)\nIs_liar(\"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Is_liar(\"Dr. Seuss\").\n.output Answer", "completions": [".decl Is_liar(Person:symbol)\nIs_liar(\"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Is_liar(\"Dr. Seuss\").\n.output Answer"]}
{"id": 2209, "answer": true, "completion": ".decl Has_average_temperature(Location:symbol, Month:symbol, Temperature:float)\nHas_average_temperature(\"Hollywood\", \"July\", 75).\n.decl Requires_coat(Temperature:float)\nRequires_coat(temp) :- temp < 60.\n.decl Answer()\nAnswer() :- Has_average_temperature(\"Hollywood\", \"July\", temperature), !Requires_coat(temperature).\n.output Answer", "completions": [".decl Has_average_temperature(Location:symbol, Month:symbol, Temperature:float)\nHas_average_temperature(\"Hollywood\", \"July\", 75).\n.decl Requires_coat(Temperature:float)\nRequires_coat(temp) :- temp < 60.\n.decl Answer()\nAnswer() :- Has_average_temperature(\"Hollywood\", \"July\", temperature), !Requires_coat(temperature).\n.output Answer"]}
{"id": 2210, "answer": true, "completion": ".decl Sells(Material:symbol, Popularity:float)\nSells(\"silicon wedding rings\", 8).\nSells(\"bromine wedding rings\", 2).\n.decl Answer()\nAnswer() :- Sells(\"silicon wedding rings\", popularity1), Sells(\"bromine wedding rings\", popularity2), popularity1 > popularity2.\n.output Answer", "completions": [".decl Sells(Material:symbol, Popularity:float)\nSells(\"silicon wedding rings\", 8).\nSells(\"bromine wedding rings\", 2).\n.decl Answer()\nAnswer() :- Sells(\"silicon wedding rings\", popularity1), Sells(\"bromine wedding rings\", popularity2), popularity1 > popularity2.\n.output Answer"]}
{"id": 2211, "answer": true, "completion": ".decl Has_reputation(Person:symbol, Reputation:float)\nHas_reputation(\"Saladin\", 8).\nHas_reputation(\"Idris I\", 5).\n.decl Hypothetical_ally(Leader:symbol, Ally:symbol)\nHypothetical_ally(\"Saddam Hussein\", \"Saladin\").\nHypothetical_ally(\"Saddam Hussein\", \"Idris I\").\n.decl Answer()\nAnswer() :- Hypothetical_ally(\"Saddam Hussein\", ally1), Hypothetical_ally(\"Saddam Hussein\", ally2), Has_reputation(ally1, reputation1), Has_reputation(ally2, reputation2), reputation1 > reputation2, ally1 = \"Saladin\", ally2 = \"Idris I\".\n.output Answer", "completions": [".decl Has_reputation(Person:symbol, Reputation:float)\nHas_reputation(\"Saladin\", 8).\nHas_reputation(\"Idris I\", 5).\n.decl Hypothetical_ally(Leader:symbol, Ally:symbol)\nHypothetical_ally(\"Saddam Hussein\", \"Saladin\").\nHypothetical_ally(\"Saddam Hussein\", \"Idris I\").\n.decl Answer()\nAnswer() :- Hypothetical_ally(\"Saddam Hussein\", ally1), Hypothetical_ally(\"Saddam Hussein\", ally2), Has_reputation(ally1, reputation1), Has_reputation(ally2, reputation2), reputation1 > reputation2, ally1 = \"Saladin\", ally2 = \"Idris I\".\n.output Answer"]}
{"id": 2212, "answer": false, "completion": ".decl Named_after(Month:symbol, Entity:symbol)\nNamed_after(\"March\", \"Mars\").\n.decl Is_son_of(Entity_A:symbol, Entity_B:symbol)\nIs_son_of(\"Mars\", \"Jupiter\").\n.decl Answer()\nAnswer() :- Named_after(\"March\", entity), Is_son_of(entity, \"Jupiter\").\n.output Answer", "completions": [".decl Named_after(Month:symbol, Entity:symbol)\nNamed_after(\"March\", \"Mars\").\n.decl Is_son_of(Entity_A:symbol, Entity_B:symbol)\nIs_son_of(\"Mars\", \"Jupiter\").\n.decl Answer()\nAnswer() :- Named_after(\"March\", entity), Is_son_of(entity, \"Jupiter\").\n.output Answer"]}
{"id": 2213, "answer": true, "completion": ".decl Involved_in_scandal(Organization:symbol, Scandal_type:symbol)\nInvolved_in_scandal(\"Subway\", \"pedophilia\").\n.decl Answer()\nAnswer() :- Involved_in_scandal(\"Subway\", \"pedophilia\").\n.output Answer", "completions": [".decl Involved_in_scandal(Organization:symbol, Scandal_type:symbol)\nInvolved_in_scandal(\"Subway\", \"pedophilia\").\n.decl Answer()\nAnswer() :- Involved_in_scandal(\"Subway\", \"pedophilia\").\n.output Answer"]}
{"id": 2214, "answer": false, "completion": ".decl Is_Chief_Justice(Person:symbol)\nIs_Chief_Justice(\"John Roberts\").\n\n.decl Is_legal_age(Person:symbol, Age:float)\nIs_legal_age(\"John Roberts\", 66).\n\n.decl Legal_drinking_age(Age:float)\nLegal_drinking_age(21).\n\n.decl Answer()\nAnswer() :- Is_Chief_Justice(person), Is_legal_age(person, age), Legal_drinking_age(drinking_age), age >= drinking_age.\n.output Answer", "completions": [".decl Is_Chief_Justice(Person:symbol)\nIs_Chief_Justice(\"John Roberts\").\n\n.decl Is_legal_age(Person:symbol, Age:float)\nIs_legal_age(\"John Roberts\", 66).\n\n.decl Legal_drinking_age(Age:float)\nLegal_drinking_age(21).\n\n.decl Answer()\nAnswer() :- Is_Chief_Justice(person), Is_legal_age(person, age), Legal_drinking_age(drinking_age), age >= drinking_age.\n.output Answer"]}
{"id": 2215, "answer": true, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"two-year old\", 2).\n.decl Can_win_scrabble(Person:symbol)\nCan_win_scrabble(\"two-year old\") :- Age(\"two-year old\", age), age >= 5.\n.decl Answer()\nAnswer() :- !Can_win_scrabble(\"two-year old\").\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"two-year old\", 2).\n.decl Can_win_scrabble(Person:symbol)\nCan_win_scrabble(\"two-year old\") :- Age(\"two-year old\", age), age >= 5.\n.decl Answer()\nAnswer() :- !Can_win_scrabble(\"two-year old\").\n.output Answer"]}
{"id": 2216, "answer": false, "completion": ".decl Has_job_ability(God:symbol, Job:symbol, Ability:float)\nHas_job_ability(\"Iris\", \"UPS job\", 0.9).\nHas_job_ability(\"Hermes\", \"UPS job\", 0.95).\n.decl Struggles_at_job(God:symbol, Job:symbol)\nStruggles_at_job(god, job) :- Has_job_ability(god, job, ability), ability < 0.8.\n.decl Answer()\nAnswer() :- Struggles_at_job(\"Iris\", \"UPS job\").\nAnswer() :- Struggles_at_job(\"Hermes\", \"UPS job\").\n.output Answer", "completions": [".decl Has_job_ability(God:symbol, Job:symbol, Ability:float)\nHas_job_ability(\"Iris\", \"UPS job\", 0.9).\nHas_job_ability(\"Hermes\", \"UPS job\", 0.95).\n.decl Struggles_at_job(God:symbol, Job:symbol)\nStruggles_at_job(god, job) :- Has_job_ability(god, job, ability), ability < 0.8.\n.decl Answer()\nAnswer() :- Struggles_at_job(\"Iris\", \"UPS job\").\nAnswer() :- Struggles_at_job(\"Hermes\", \"UPS job\").\n.output Answer"]}
{"id": 2217, "answer": false, "completion": ".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Dorothea Wendling\", \"Mannheim\").\n.decl Originated_in(Company:symbol, Place:symbol)\nOriginated_in(\"Porsche\", \"Stuttgart\").\n.decl Answer()\nAnswer() :- Born_in(\"Dorothea Wendling\", place1), Originated_in(\"Porsche\", place2), place1 = place2.\n.output Answer", "completions": [".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Dorothea Wendling\", \"Mannheim\").\n.decl Originated_in(Company:symbol, Place:symbol)\nOriginated_in(\"Porsche\", \"Stuttgart\").\n.decl Answer()\nAnswer() :- Born_in(\"Dorothea Wendling\", place1), Originated_in(\"Porsche\", place2), place1 = place2.\n.output Answer"]}
{"id": 2218, "answer": true, "completion": ".decl Won_award(Person:symbol, Award:symbol, Year:float)\nWon_award(\"Will Ferrell\", \"Empire Award for Best Newcomer\", 2001).\n.decl Award_exists(Award:symbol, Year:float)\nAward_exists(\"Empire Award for Best Newcomer\", 2022).\n.decl Answer()\nAnswer() :- Won_award(\"Will Ferrell\", \"Empire Award for Best Newcomer\", year1), Award_exists(\"Empire Award for Best Newcomer\", year2), year1 < year2.\n.output Answer", "completions": [".decl Won_award(Person:symbol, Award:symbol, Year:float)\nWon_award(\"Will Ferrell\", \"Empire Award for Best Newcomer\", 2001).\n.decl Award_exists(Award:symbol, Year:float)\nAward_exists(\"Empire Award for Best Newcomer\", 2022).\n.decl Answer()\nAnswer() :- Won_award(\"Will Ferrell\", \"Empire Award for Best Newcomer\", year1), Award_exists(\"Empire Award for Best Newcomer\", year2), year1 < year2.\n.output Answer"]}
{"id": 2219, "answer": false, "completion": ".decl Insults(Person_A:symbol, Person_B:symbol)\nInsults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.decl Follows_religion(Person:symbol, Religion:symbol)\nFollows_religion(\"Tom Cruise\", \"Scientology\").\n.decl Founded_religion(Person:symbol, Religion:symbol)\nFounded_religion(\"L. Ron Hubbard\", \"Scientology\").\n.decl Answer()\nAnswer() :- Insults(\"Tom Cruise\", \"L. Ron Hubbard\").\nAnswer() :- !Insults(\"Tom Cruise\", \"L. Ron Hubbard\"), Follows_religion(\"Tom Cruise\", religion), Founded_religion(\"L. Ron Hubbard\", religion).\n.output Answer", "completions": [".decl Insults(Person_A:symbol, Person_B:symbol)\nInsults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.decl Follows_religion(Person:symbol, Religion:symbol)\nFollows_religion(\"Tom Cruise\", \"Scientology\").\n.decl Founded_religion(Person:symbol, Religion:symbol)\nFounded_religion(\"L. Ron Hubbard\", \"Scientology\").\n.decl Answer()\nAnswer() :- Insults(\"Tom Cruise\", \"L. Ron Hubbard\").\nAnswer() :- !Insults(\"Tom Cruise\", \"L. Ron Hubbard\"), Follows_religion(\"Tom Cruise\", religion), Founded_religion(\"L. Ron Hubbard\", religion).\n.output Answer"]}
{"id": 2220, "answer": true, "completion": ".decl Has_position(Person:symbol, Sport:symbol, Position:symbol)\nHas_position(\"Felix Potvin\", \"hockey\", \"goalie\").\n.decl Is_sport(Sport:symbol)\nIs_sport(\"dodgeball\").\n.decl Answer()\nAnswer() :- Has_position(\"Felix Potvin\", \"dodgeball\", position).\n.output Answer", "completions": [".decl Has_position(Person:symbol, Sport:symbol, Position:symbol)\nHas_position(\"Felix Potvin\", \"hockey\", \"goalie\").\n.decl Is_sport(Sport:symbol)\nIs_sport(\"dodgeball\").\n.decl Answer()\nAnswer() :- Has_position(\"Felix Potvin\", \"dodgeball\", position).\n.output Answer"]}
{"id": 2221, "answer": true, "completion": ".decl Script_category(Script:symbol, Category:symbol)\nScript_category(\"Gujarati\", \"abugida\").\nScript_category(\"Kanji\", \"logographic\").\n.decl Answer()\nAnswer() :- Script_category(\"Gujarati\", category1), Script_category(\"Kanji\", category2), category1 = category2.\n.output Answer", "completions": [".decl Script_category(Script:symbol, Category:symbol)\nScript_category(\"Gujarati\", \"abugida\").\nScript_category(\"Kanji\", \"logographic\").\n.decl Answer()\nAnswer() :- Script_category(\"Gujarati\", category1), Script_category(\"Kanji\", category2), category1 = category2.\n.output Answer"]}
{"id": 2222, "answer": true, "completion": ".decl Video_game(Title:symbol, Theme:symbol, Feature:symbol)\nVideo_game(\"Fallout: New Vegas\", \"end of civilization\", \"slot machines\").\n.decl Answer()\nAnswer() :- Video_game(title, \"end of civilization\", \"slot machines\").\n.output Answer", "completions": [".decl Video_game(Title:symbol, Theme:symbol, Feature:symbol)\nVideo_game(\"Fallout: New Vegas\", \"end of civilization\", \"slot machines\").\n.decl Answer()\nAnswer() :- Video_game(title, \"end of civilization\", \"slot machines\").\n.output Answer"]}
{"id": 2223, "answer": true, "completion": ".decl Contains(Substance:symbol, Component:symbol)\nContains(\"severed finger\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Contains(\"severed finger\", \"glutamic acid\").\n.output Answer", "completions": [".decl Contains(Substance:symbol, Component:symbol)\nContains(\"severed finger\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Contains(\"severed finger\", \"glutamic acid\").\n.output Answer"]}
{"id": 2224, "answer": true, "completion": ".decl Has_ethnicity(Person:symbol, Ethnicity:symbol)\nHas_ethnicity(\"Sara Paxton\", \"Latino\").\n.decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Sara Paxton\", \"blonde\").\n.decl Has_eye_color(Person:symbol, Eye_color:symbol)\nHas_eye_color(\"Sara Paxton\", \"green\").\n.decl Answer()\nAnswer() :- Has_ethnicity(\"Sara Paxton\", \"Latino\"), Has_hair_color(\"Sara Paxton\", \"blonde\"), Has_eye_color(\"Sara Paxton\", \"green\").\n.output Answer", "completions": [".decl Has_ethnicity(Person:symbol, Ethnicity:symbol)\nHas_ethnicity(\"Sara Paxton\", \"Latino\").\n.decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Sara Paxton\", \"blonde\").\n.decl Has_eye_color(Person:symbol, Eye_color:symbol)\nHas_eye_color(\"Sara Paxton\", \"green\").\n.decl Answer()\nAnswer() :- Has_ethnicity(\"Sara Paxton\", \"Latino\"), Has_hair_color(\"Sara Paxton\", \"blonde\"), Has_eye_color(\"Sara Paxton\", \"green\").\n.output Answer"]}
{"id": 2225, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"William Howard Taft\", 1857).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"William Howard Taft\", 1930).\n.decl Founded_in_year(Company:symbol, Founding_year:float)\nFounded_in_year(\"DC Comics\", 1934).\n.decl Answer()\nAnswer() :- Born_in_year(\"William Howard Taft\", birth_year), Died_in_year(\"William Howard Taft\", death_year), Founded_in_year(\"DC Comics\", founding_year), birth_year <= founding_year, death_year >= founding_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"William Howard Taft\", 1857).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"William Howard Taft\", 1930).\n.decl Founded_in_year(Company:symbol, Founding_year:float)\nFounded_in_year(\"DC Comics\", 1934).\n.decl Answer()\nAnswer() :- Born_in_year(\"William Howard Taft\", birth_year), Died_in_year(\"William Howard Taft\", death_year), Founded_in_year(\"DC Comics\", founding_year), birth_year <= founding_year, death_year >= founding_year.\n.output Answer"]}
{"id": 2226, "answer": false, "completion": ".decl Has_belief(Religion:symbol, Idea:symbol, Belief:symbol)\nHas_belief(\"Muslim\", \"Seraphim\", \"six-winged beings\").\nHas_belief(\"Christian\", \"Seraphim\", \"six-winged beings\").\n.decl Answer()\nAnswer() :- Has_belief(\"Muslim\", \"Seraphim\", belief1), Has_belief(\"Christian\", \"Seraphim\", belief2), belief1 != belief2.\n.output Answer", "completions": [".decl Has_belief(Religion:symbol, Idea:symbol, Belief:symbol)\nHas_belief(\"Muslim\", \"Seraphim\", \"six-winged beings\").\nHas_belief(\"Christian\", \"Seraphim\", \"six-winged beings\").\n.decl Answer()\nAnswer() :- Has_belief(\"Muslim\", \"Seraphim\", belief1), Has_belief(\"Christian\", \"Seraphim\", belief2), belief1 != belief2.\n.output Answer"]}
{"id": 2227, "answer": false, "completion": ".decl Has_dyscalculia(Person:symbol)\nHas_dyscalculia(\"someone\").\n.decl Job_requires_skill(Job:symbol, Skill:symbol)\nJob_requires_skill(\"surveying work\", \"math\").\n.decl Lacks_skill(Person:symbol, Skill:symbol)\nLacks_skill(\"someone\", \"math\") :- Has_dyscalculia(\"someone\").\n.decl Hire(Person:symbol, Job:symbol)\nHire(person, job) :- !Lacks_skill(person, skill), Job_requires_skill(job, skill).\n.decl Answer()\nAnswer() :- Hire(\"someone\", \"surveying work\").\n.output Answer", "completions": [".decl Has_dyscalculia(Person:symbol)\nHas_dyscalculia(\"someone\").\n.decl Job_requires_skill(Job:symbol, Skill:symbol)\nJob_requires_skill(\"surveying work\", \"math\").\n.decl Lacks_skill(Person:symbol, Skill:symbol)\nLacks_skill(\"someone\", \"math\") :- Has_dyscalculia(\"someone\").\n.decl Hire(Person:symbol, Job:symbol)\nHire(person, job) :- !Lacks_skill(person, skill), Job_requires_skill(job, skill).\n.decl Answer()\nAnswer() :- Hire(\"someone\", \"surveying work\").\n.output Answer"]}
{"id": 2228, "answer": false, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Alec Baldwin\", 6).\nHas_n_children(\"Clint Eastwood\", 8).\n.decl Answer()\nAnswer() :- Has_n_children(\"Alec Baldwin\", n_children1), Has_n_children(\"Clint Eastwood\", n_children2), n_children1 > n_children2.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Alec Baldwin\", 6).\nHas_n_children(\"Clint Eastwood\", 8).\n.decl Answer()\nAnswer() :- Has_n_children(\"Alec Baldwin\", n_children1), Has_n_children(\"Clint Eastwood\", n_children2), n_children1 > n_children2.\n.output Answer"]}
{"id": 2229, "answer": false, "completion": ".decl Used_for(Object:symbol, Purpose:symbol)\nUsed_for(\"gavel\", \"maintaining order\").\n.decl Is_a(Object:symbol, Category:symbol)\nIs_a(\"banana tree\", \"plant\").\nIs_a(\"gavel\", \"tool\").\nIs_a(\"judge\", \"person\").\n.decl Answer()\nAnswer() :- Used_for(object, \"maintaining order\"), Is_a(object, \"plant\"), Is_a(\"judge\", \"person\"), object = \"banana tree\".\n.output Answer", "completions": [".decl Used_for(Object:symbol, Purpose:symbol)\nUsed_for(\"gavel\", \"maintaining order\").\n.decl Is_a(Object:symbol, Category:symbol)\nIs_a(\"banana tree\", \"plant\").\nIs_a(\"gavel\", \"tool\").\nIs_a(\"judge\", \"person\").\n.decl Answer()\nAnswer() :- Used_for(object, \"maintaining order\"), Is_a(object, \"plant\"), Is_a(\"judge\", \"person\"), object = \"banana tree\".\n.output Answer"]}
{"id": 2230, "answer": true, "completion": ".decl Causes_skin_color_change(Chemical:symbol, Color:symbol)\nCauses_skin_color_change(\"nickel\", \"green\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"zombie\", \"green\").\n.decl Answer()\nAnswer() :- Causes_skin_color_change(chemical, color1), Has_color(\"zombie\", color2), color1 = color2.\n.output Answer", "completions": [".decl Causes_skin_color_change(Chemical:symbol, Color:symbol)\nCauses_skin_color_change(\"nickel\", \"green\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"zombie\", \"green\").\n.decl Answer()\nAnswer() :- Causes_skin_color_change(chemical, color1), Has_color(\"zombie\", color2), color1 = color2.\n.output Answer"]}
{"id": 2231, "answer": true, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"bitcoin\", 60000). // Assuming the price of a single bitcoin\nHas_price(\"Volkswagen Jetta\", 20000). // Assuming the price of a Volkswagen Jetta\n.decl Answer()\nAnswer() :- Has_price(\"bitcoin\", price1), Has_price(\"Volkswagen Jetta\", price2), price1 >= price2.\n.output Answer", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"bitcoin\", 60000). // Assuming the price of a single bitcoin\nHas_price(\"Volkswagen Jetta\", 20000). // Assuming the price of a Volkswagen Jetta\n.decl Answer()\nAnswer() :- Has_price(\"bitcoin\", price1), Has_price(\"Volkswagen Jetta\", price2), price1 >= price2.\n.output Answer"]}
{"id": 2232, "answer": true, "completion": ".decl Has_sordid_history(Object:symbol)\nHas_sordid_history(\"Fraktur\").\n.decl Answer()\nAnswer() :- Has_sordid_history(\"Fraktur\").\n.output Answer", "completions": [".decl Has_sordid_history(Object:symbol)\nHas_sordid_history(\"Fraktur\").\n.decl Answer()\nAnswer() :- Has_sordid_history(\"Fraktur\").\n.output Answer"]}
{"id": 2233, "answer": true, "completion": ".decl Belongs_to_sect(Person:symbol, Sect:symbol)\nBelongs_to_sect(\"Martin Luther\", \"Protestant\").\nBelongs_to_sect(\"Martin Luther King Jr.\", \"Baptist\").\n.decl Answer()\nAnswer() :- Belongs_to_sect(\"Martin Luther\", sect1), Belongs_to_sect(\"Martin Luther King Jr.\", sect2), sect1 = sect2.\n.output Answer", "completions": [".decl Belongs_to_sect(Person:symbol, Sect:symbol)\nBelongs_to_sect(\"Martin Luther\", \"Protestant\").\nBelongs_to_sect(\"Martin Luther King Jr.\", \"Baptist\").\n.decl Answer()\nAnswer() :- Belongs_to_sect(\"Martin Luther\", sect1), Belongs_to_sect(\"Martin Luther King Jr.\", sect2), sect1 = sect2.\n.output Answer"]}
{"id": 2234, "answer": true, "completion": ".decl Allowed_in_grocery_store(Entity:symbol)\nAllowed_in_grocery_store(\"human\").\n.decl Is_a(Entity:symbol, Category:symbol)\nIs_a(\"Donald Duck\", \"cartoon character\").\nIs_a(\"Donald Duck\", \"duck\").\n.decl Answer()\nAnswer() :- Allowed_in_grocery_store(entity), Is_a(\"Donald Duck\", entity).\n.output Answer", "completions": [".decl Allowed_in_grocery_store(Entity:symbol)\nAllowed_in_grocery_store(\"human\").\n.decl Is_a(Entity:symbol, Category:symbol)\nIs_a(\"Donald Duck\", \"cartoon character\").\nIs_a(\"Donald Duck\", \"duck\").\n.decl Answer()\nAnswer() :- Allowed_in_grocery_store(entity), Is_a(\"Donald Duck\", entity).\n.output Answer"]}
{"id": 2235, "answer": true, "completion": ".decl Appears_in(Character:symbol, Movie:symbol, Channel:symbol)\nAppears_in(\"Hades\", \"Hercules\", \"Disney\").\n.decl Is_musical_movie(Movie:symbol)\nIs_musical_movie(\"Hercules\").\n.decl Is_on_channel(Movie:symbol, Channel:symbol)\nIs_on_channel(\"Hercules\", \"Disney Channel\").\n.decl Answer()\nAnswer() :- Appears_in(\"Hades\", movie, channel), Is_musical_movie(movie), Is_on_channel(movie, \"Disney Channel\").\n.output Answer", "completions": [".decl Appears_in(Character:symbol, Movie:symbol, Channel:symbol)\nAppears_in(\"Hades\", \"Hercules\", \"Disney\").\n.decl Is_musical_movie(Movie:symbol)\nIs_musical_movie(\"Hercules\").\n.decl Is_on_channel(Movie:symbol, Channel:symbol)\nIs_on_channel(\"Hercules\", \"Disney Channel\").\n.decl Answer()\nAnswer() :- Appears_in(\"Hades\", movie, channel), Is_musical_movie(movie), Is_on_channel(movie, \"Disney Channel\").\n.output Answer"]}
{"id": 2236, "answer": true, "completion": ".decl Has_white_blood_cells(Person:symbol, Has_WBC:float)\n.decl Dies_without_WBC(Person:symbol)\nDies_without_WBC(person) :- Has_white_blood_cells(person, 0).\n.decl Answer()\nAnswer() :- Dies_without_WBC(person).\n.output Answer", "completions": [".decl Has_white_blood_cells(Person:symbol, Has_WBC:float)\n.decl Dies_without_WBC(Person:symbol)\nDies_without_WBC(person) :- Has_white_blood_cells(person, 0).\n.decl Answer()\nAnswer() :- Dies_without_WBC(person).\n.output Answer"]}
{"id": 2237, "answer": false, "completion": ".decl Attended(Person:symbol, University:symbol)\nAttended(\"Rand Paul\", \"Baylor University\").\n.decl Located_in(University:symbol, Location:symbol)\nLocated_in(\"Baylor University\", \"Texas\").\n.decl Near(Location_A:symbol, Location_B:symbol)\nNear(\"Texas\", \"Lake Michigan\").\n.decl Answer()\nAnswer() :- Attended(\"Rand Paul\", university), Located_in(university, location), Near(location, \"Lake Michigan\").\n.output Answer", "completions": [".decl Attended(Person:symbol, University:symbol)\nAttended(\"Rand Paul\", \"Baylor University\").\n.decl Located_in(University:symbol, Location:symbol)\nLocated_in(\"Baylor University\", \"Texas\").\n.decl Near(Location_A:symbol, Location_B:symbol)\nNear(\"Texas\", \"Lake Michigan\").\n.decl Answer()\nAnswer() :- Attended(\"Rand Paul\", university), Located_in(university, location), Near(location, \"Lake Michigan\").\n.output Answer"]}
{"id": 2238, "answer": false, "completion": ".decl Is_US_citizen(Person:symbol)\nIs_US_citizen(\"Simon Cowell\").\n.decl Can_vote_for_SC_judge(Person:symbol)\nCan_vote_for_SC_judge(\"US Senators\").\n.decl Answer()\nAnswer() :- Is_US_citizen(\"Simon Cowell\"), !Can_vote_for_SC_judge(\"Simon Cowell\").\n.output Answer", "completions": [".decl Is_US_citizen(Person:symbol)\nIs_US_citizen(\"Simon Cowell\").\n.decl Can_vote_for_SC_judge(Person:symbol)\nCan_vote_for_SC_judge(\"US Senators\").\n.decl Answer()\nAnswer() :- Is_US_citizen(\"Simon Cowell\"), !Can_vote_for_SC_judge(\"Simon Cowell\").\n.output Answer"]}
{"id": 2239, "answer": false, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Michael Bloomberg\", 59000000000).\n.decl Has_debt(Country:symbol, Debt:float)\nHas_debt(\"Micronesia\", 61000000).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Michael Bloomberg\", net_worth), Has_debt(\"Micronesia\", debt), net_worth >= debt * 10.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Michael Bloomberg\", 59000000000).\n.decl Has_debt(Country:symbol, Debt:float)\nHas_debt(\"Micronesia\", 61000000).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Michael Bloomberg\", net_worth), Has_debt(\"Micronesia\", debt), net_worth >= debt * 10.\n.output Answer"]}
{"id": 2240, "answer": true, "completion": ".decl Has_conservation_status(Species:symbol, Status:symbol)\nHas_conservation_status(\"Leopard cat\", \"Least Concern\").\nHas_conservation_status(\"Bornean Orangutan\", \"Critically Endangered\").\n.decl Is_more_dire(Status1:symbol, Status2:symbol)\nIs_more_dire(\"Critically Endangered\", \"Endangered\").\nIs_more_dire(\"Endangered\", \"Vulnerable\").\nIs_more_dire(\"Vulnerable\", \"Near Threatened\").\nIs_more_dire(\"Near Threatened\", \"Least Concern\").\n.decl Answer()\nAnswer() :- Has_conservation_status(\"Leopard cat\", status1), Has_conservation_status(\"Bornean Orangutan\", status2), !Is_more_dire(status1, status2).\n.output Answer", "completions": [".decl Has_conservation_status(Species:symbol, Status:symbol)\nHas_conservation_status(\"Leopard cat\", \"Least Concern\").\nHas_conservation_status(\"Bornean Orangutan\", \"Critically Endangered\").\n.decl Is_more_dire(Status1:symbol, Status2:symbol)\nIs_more_dire(\"Critically Endangered\", \"Endangered\").\nIs_more_dire(\"Endangered\", \"Vulnerable\").\nIs_more_dire(\"Vulnerable\", \"Near Threatened\").\nIs_more_dire(\"Near Threatened\", \"Least Concern\").\n.decl Answer()\nAnswer() :- Has_conservation_status(\"Leopard cat\", status1), Has_conservation_status(\"Bornean Orangutan\", status2), !Is_more_dire(status1, status2).\n.output Answer"]}
{"id": 2241, "answer": false, "completion": ".decl Can_ride(Object:symbol, Vehicle:symbol)\nCan_ride(\"cat\", \"Panzer VIII Maus tank\").\n.decl Has_range(Vehicle:symbol, Range:float)\nHas_range(\"Panzer VIII Maus tank missile\", 200).\n.decl Distance(City_A:symbol, City_B:symbol, Distance:float)\nDistance(\"Barcelona\", \"Madrid\", 620).\n.decl Answer()\nAnswer() :- Can_ride(\"cat\", \"Panzer VIII Maus tank\"), Has_range(\"Panzer VIII Maus tank missile\", range), Distance(\"Barcelona\", \"Madrid\", distance), range >= distance.\n.output Answer", "completions": [".decl Can_ride(Object:symbol, Vehicle:symbol)\nCan_ride(\"cat\", \"Panzer VIII Maus tank\").\n.decl Has_range(Vehicle:symbol, Range:float)\nHas_range(\"Panzer VIII Maus tank missile\", 200).\n.decl Distance(City_A:symbol, City_B:symbol, Distance:float)\nDistance(\"Barcelona\", \"Madrid\", 620).\n.decl Answer()\nAnswer() :- Can_ride(\"cat\", \"Panzer VIII Maus tank\"), Has_range(\"Panzer VIII Maus tank missile\", range), Distance(\"Barcelona\", \"Madrid\", distance), range >= distance.\n.output Answer"]}
{"id": 2242, "answer": false, "completion": ".decl Is_discounted(Store:symbol, Reason:symbol)\nIs_discounted(\"Aldi\", \"buying in bulk\").\nIs_discounted(\"Aldi\", \"private label products\").\n.decl Answer()\nAnswer() :- Is_discounted(\"Aldi\", \"out of date\").\nAnswer() :- !Is_discounted(\"Aldi\", \"out of date\").\n.output Answer", "completions": [".decl Is_discounted(Store:symbol, Reason:symbol)\nIs_discounted(\"Aldi\", \"buying in bulk\").\nIs_discounted(\"Aldi\", \"private label products\").\n.decl Answer()\nAnswer() :- Is_discounted(\"Aldi\", \"out of date\").\nAnswer() :- !Is_discounted(\"Aldi\", \"out of date\").\n.output Answer"]}
{"id": 2243, "answer": false, "completion": ".decl Trusts(Person:symbol, Profession:symbol)\nTrusts(\"Carrie Poppy\", \"scientist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"psychic\", \"pseudoscience\").\n.decl Answer()\nAnswer() :- Trusts(\"Carrie Poppy\", profession), Is_profession(\"psychic\", profession).\nAnswer() :- Trusts(\"Carrie Poppy\", profession), !Is_profession(\"psychic\", profession).\n.output Answer", "completions": [".decl Trusts(Person:symbol, Profession:symbol)\nTrusts(\"Carrie Poppy\", \"scientist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"psychic\", \"pseudoscience\").\n.decl Answer()\nAnswer() :- Trusts(\"Carrie Poppy\", profession), Is_profession(\"psychic\", profession).\nAnswer() :- Trusts(\"Carrie Poppy\", profession), !Is_profession(\"psychic\", profession).\n.output Answer"]}
{"id": 2244, "answer": true, "completion": ".decl Donates_organ(Condition:symbol, Organ:symbol)\nDonates_organ(\"dead\", \"heart\").\nDonates_organ(\"dead\", \"lung\").\nDonates_organ(\"alive\", \"kidney\").\n.decl Answer()\nAnswer() :- Donates_organ(\"dead\", \"kidney\").\nAnswer() :- Donates_organ(\"alive\", \"kidney\").\n.output Answer", "completions": [".decl Donates_organ(Condition:symbol, Organ:symbol)\nDonates_organ(\"dead\", \"heart\").\nDonates_organ(\"dead\", \"lung\").\nDonates_organ(\"alive\", \"kidney\").\n.decl Answer()\nAnswer() :- Donates_organ(\"dead\", \"kidney\").\nAnswer() :- Donates_organ(\"alive\", \"kidney\").\n.output Answer"]}
{"id": 2245, "answer": true, "completion": ".decl Has_symptoms(Condition:symbol, Symptom:symbol)\nHas_symptoms(\"stroke\", \"sudden numbness\").\nHas_symptoms(\"stroke\", \"confusion\").\nHas_symptoms(\"stroke\", \"trouble speaking\").\nHas_symptoms(\"stroke\", \"trouble walking\").\nHas_symptoms(\"stroke\", \"severe headache\").\n.decl Answer()\nAnswer() :- !Has_symptoms(\"stroke\", _).\n.output Answer", "completions": [".decl Has_symptoms(Condition:symbol, Symptom:symbol)\nHas_symptoms(\"stroke\", \"sudden numbness\").\nHas_symptoms(\"stroke\", \"confusion\").\nHas_symptoms(\"stroke\", \"trouble speaking\").\nHas_symptoms(\"stroke\", \"trouble walking\").\nHas_symptoms(\"stroke\", \"severe headache\").\n.decl Answer()\nAnswer() :- !Has_symptoms(\"stroke\", _).\n.output Answer"]}
{"id": 2246, "answer": false, "completion": ".decl Is_tasteable(Object:symbol)\nIs_tasteable(\"food\").\nIs_tasteable(\"drink\").\n.decl Is_object(Object:symbol)\nIs_object(\"Law & Order\").\n.decl Answer()\nAnswer() :- Is_tasteable(\"Law & Order\").\nAnswer() :- Is_object(\"Law & Order\"), !Is_tasteable(\"Law & Order\").\n.output Answer", "completions": [".decl Is_tasteable(Object:symbol)\nIs_tasteable(\"food\").\nIs_tasteable(\"drink\").\n.decl Is_object(Object:symbol)\nIs_object(\"Law & Order\").\n.decl Answer()\nAnswer() :- Is_tasteable(\"Law & Order\").\nAnswer() :- Is_object(\"Law & Order\"), !Is_tasteable(\"Law & Order\").\n.output Answer"]}
{"id": 2247, "answer": true, "completion": ".decl Has_Greek_equivalent(Roman_god:symbol, Greek_god:symbol)\nHas_Greek_equivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Has_Greek_equivalent(\"Vulcan\", greek_god).\n.output Answer", "completions": [".decl Has_Greek_equivalent(Roman_god:symbol, Greek_god:symbol)\nHas_Greek_equivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Has_Greek_equivalent(\"Vulcan\", greek_god).\n.output Answer"]}
{"id": 2248, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"hippopotamus\", \"Africa\").\nLives_in(\"hippopotamus\", \"zoos\").\n.decl Answer()\nAnswer() :- Lives_in(\"hippopotamus\", location), location != \"Africa\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"hippopotamus\", \"Africa\").\nLives_in(\"hippopotamus\", \"zoos\").\n.decl Answer()\nAnswer() :- Lives_in(\"hippopotamus\", location), location != \"Africa\".\n.output Answer"]}
{"id": 2249, "answer": false, "completion": ".decl Is_appropriate(Gift_wrap:symbol, Situation:symbol)\nIs_appropriate(\"stork wrapping paper\", \"baby shower\").\nIs_appropriate(\"stork wrapping paper\", \"newborn celebration\").\n.decl Situation(Situation:symbol)\nSituation(\"mother of stillborn\").\n.decl Answer()\nAnswer() :- !Is_appropriate(\"stork wrapping paper\", \"mother of stillborn\").\n.output Answer", "completions": [".decl Is_appropriate(Gift_wrap:symbol, Situation:symbol)\nIs_appropriate(\"stork wrapping paper\", \"baby shower\").\nIs_appropriate(\"stork wrapping paper\", \"newborn celebration\").\n.decl Situation(Situation:symbol)\nSituation(\"mother of stillborn\").\n.decl Answer()\nAnswer() :- !Is_appropriate(\"stork wrapping paper\", \"mother of stillborn\").\n.output Answer"]}
{"id": 2250, "answer": true, "completion": ".decl Sells_products(Store:symbol, Product:symbol)\nSells_products(\"Petco\", \"pet supplies\").\nSells_products(\"Casio Store\", \"Casio products\").\n.decl Answer()\nAnswer() :- Sells_products(\"Petco\", \"Casio products\").\n.output Answer", "completions": [".decl Sells_products(Store:symbol, Product:symbol)\nSells_products(\"Petco\", \"pet supplies\").\nSells_products(\"Casio Store\", \"Casio products\").\n.decl Answer()\nAnswer() :- Sells_products(\"Petco\", \"Casio products\").\n.output Answer"]}
{"id": 2251, "answer": true, "completion": ".decl Has_view_on(Person:symbol, Movement:symbol, View:symbol)\nHas_view_on(\"Immanuel Kant\", \"Black Lives Matter\", \"unknown\").\n.decl Answer()\nAnswer() :- Has_view_on(\"Immanuel Kant\", \"Black Lives Matter\", \"disgusted\").\n.output Answer", "completions": [".decl Has_view_on(Person:symbol, Movement:symbol, View:symbol)\nHas_view_on(\"Immanuel Kant\", \"Black Lives Matter\", \"unknown\").\n.decl Answer()\nAnswer() :- Has_view_on(\"Immanuel Kant\", \"Black Lives Matter\", \"disgusted\").\n.output Answer"]}
{"id": 2252, "answer": true, "completion": ".decl Is_bad_snack(Food:symbol, Animal:symbol)\nIs_bad_snack(\"pancakes\", \"cats\").\n.decl Answer()\nAnswer() :- Is_bad_snack(\"pancakes\", \"cats\").\n.output Answer", "completions": [".decl Is_bad_snack(Food:symbol, Animal:symbol)\nIs_bad_snack(\"pancakes\", \"cats\").\n.decl Answer()\nAnswer() :- Is_bad_snack(\"pancakes\", \"cats\").\n.output Answer"]}
{"id": 2253, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Euro\", 7.8).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"Euro\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Euro\", 7.8).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"Euro\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer"]}
{"id": 2254, "answer": true, "completion": ".decl Has_dentures(Animal:symbol, Dentures:symbol)\nHas_dentures(\"honey badger\", \"honey badger dentures\").\nHas_dentures(\"wolverine\", \"wolverine dentures\").\n.decl Answer()\nAnswer() :- Has_dentures(\"honey badger\", dentures1), Has_dentures(\"wolverine\", dentures2), dentures1 != dentures2.\n.output Answer", "completions": [".decl Has_dentures(Animal:symbol, Dentures:symbol)\nHas_dentures(\"honey badger\", \"honey badger dentures\").\nHas_dentures(\"wolverine\", \"wolverine dentures\").\n.decl Answer()\nAnswer() :- Has_dentures(\"honey badger\", dentures1), Has_dentures(\"wolverine\", dentures2), dentures1 != dentures2.\n.output Answer"]}
{"id": 2255, "answer": true, "completion": ".decl Is_alive(Object:symbol)\nIs_alive(\"animal\").\nIs_alive(\"plant\").\nIs_alive(\"bacteria\").\n.decl Is_type(Object:symbol, Type:symbol)\nIs_type(\"Cholera\", \"bacteria\").\n.decl Answer()\nAnswer() :- Is_type(\"Cholera\", type), Is_alive(type).\n.output Answer", "completions": [".decl Is_alive(Object:symbol)\nIs_alive(\"animal\").\nIs_alive(\"plant\").\nIs_alive(\"bacteria\").\n.decl Is_type(Object:symbol, Type:symbol)\nIs_type(\"Cholera\", \"bacteria\").\n.decl Answer()\nAnswer() :- Is_type(\"Cholera\", type), Is_alive(type).\n.output Answer"]}
{"id": 2256, "answer": true, "completion": ".decl Member_of_royal_family(Person:symbol, Year:float)\nMember_of_royal_family(\"Prince Andrew\", 2020).\n.decl Allegedly_committed_felony(Person:symbol)\nAllegedly_committed_felony(\"Prince Andrew\").\n.decl Answer()\nAnswer() :- Member_of_royal_family(person, 2020), Allegedly_committed_felony(person).\n.output Answer", "completions": [".decl Member_of_royal_family(Person:symbol, Year:float)\nMember_of_royal_family(\"Prince Andrew\", 2020).\n.decl Allegedly_committed_felony(Person:symbol)\nAllegedly_committed_felony(\"Prince Andrew\").\n.decl Answer()\nAnswer() :- Member_of_royal_family(person, 2020), Allegedly_committed_felony(person).\n.output Answer"]}
{"id": 2257, "answer": true, "completion": ".decl Has_association(Day:symbol, Entity:symbol)\nHas_association(\"Wednesday\", \"Odin\").\nHas_association(\"Thursday\", \"Thor\").\n.decl Answer()\nAnswer() :- Has_association(\"Wednesday\", \"Thor\").\n.output Answer", "completions": [".decl Has_association(Day:symbol, Entity:symbol)\nHas_association(\"Wednesday\", \"Odin\").\nHas_association(\"Thursday\", \"Thor\").\n.decl Answer()\nAnswer() :- Has_association(\"Wednesday\", \"Thor\").\n.output Answer"]}
{"id": 2258, "answer": false, "completion": ".decl Associated_with(Object:symbol, Entity:symbol)\nAssociated_with(\"honey\", \"bees\").\nAssociated_with(\"queen\", \"bees\").\n.decl Answer()\nAnswer() :- Associated_with(\"honey\", entity), Associated_with(\"queen\", entity).\n.output Answer", "completions": [".decl Associated_with(Object:symbol, Entity:symbol)\nAssociated_with(\"honey\", \"bees\").\nAssociated_with(\"queen\", \"bees\").\n.decl Answer()\nAnswer() :- Associated_with(\"honey\", entity), Associated_with(\"queen\", entity).\n.output Answer"]}
{"id": 2259, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\nHas_height(\"Frankenstein's monster\", 2.4).\n.decl Has_bald_spot(Person:symbol)\nHas_bald_spot(\"Frankenstein's monster\").\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"Frankenstein's monster\", height2), Has_bald_spot(\"Frankenstein's monster\"), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\nHas_height(\"Frankenstein's monster\", 2.4).\n.decl Has_bald_spot(Person:symbol)\nHas_bald_spot(\"Frankenstein's monster\").\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"Frankenstein's monster\", height2), Has_bald_spot(\"Frankenstein's monster\"), height1 > height2.\n.output Answer"]}
{"id": 2260, "answer": true, "completion": ".decl Teaches(Teacher:symbol, Subject:symbol)\nTeaches(\"kindergarten teacher\", \"alphabet\").\nTeaches(\"kindergarten teacher\", \"numbers\").\nTeaches(\"kindergarten teacher\", \"shapes\").\nTeaches(\"kindergarten teacher\", \"colors\").\n.decl Is_subject_of_lesson(Subject:symbol, Lesson:symbol)\nIs_subject_of_lesson(\"New Testament\", \"religion\").\n.decl Answer()\nAnswer() :- Teaches(\"kindergarten teacher\", subject), Is_subject_of_lesson(subject, \"New Testament\").\n.output Answer", "completions": [".decl Teaches(Teacher:symbol, Subject:symbol)\nTeaches(\"kindergarten teacher\", \"alphabet\").\nTeaches(\"kindergarten teacher\", \"numbers\").\nTeaches(\"kindergarten teacher\", \"shapes\").\nTeaches(\"kindergarten teacher\", \"colors\").\n.decl Is_subject_of_lesson(Subject:symbol, Lesson:symbol)\nIs_subject_of_lesson(\"New Testament\", \"religion\").\n.decl Answer()\nAnswer() :- Teaches(\"kindergarten teacher\", subject), Is_subject_of_lesson(subject, \"New Testament\").\n.output Answer"]}
{"id": 2261, "answer": true, "completion": ".decl Wrote(Person:symbol, Book:symbol)\nWrote(\"Alfred Nobel\", \"Nemesis\").\n.decl Banned(Book:symbol)\nBanned(\"Nemesis\").\n.decl Answer()\nAnswer() :- Wrote(\"Alfred Nobel\", book), Banned(book).\n.output Answer", "completions": [".decl Wrote(Person:symbol, Book:symbol)\nWrote(\"Alfred Nobel\", \"Nemesis\").\n.decl Banned(Book:symbol)\nBanned(\"Nemesis\").\n.decl Answer()\nAnswer() :- Wrote(\"Alfred Nobel\", book), Banned(book).\n.output Answer"]}
{"id": 2262, "answer": true, "completion": ".decl Has_kinetic_energy(Object:symbol, State:symbol)\nHas_kinetic_energy(\"person\", \"moving\").\nHas_kinetic_energy(\"person\", \"taking ukemi\").\n.decl Halts_kinetic_energy(Action:symbol)\nHalts_kinetic_energy(\"taking ukemi\").\n.decl Answer()\nAnswer() :- Has_kinetic_energy(\"person\", state), Halts_kinetic_energy(state).\n.output Answer", "completions": [".decl Has_kinetic_energy(Object:symbol, State:symbol)\nHas_kinetic_energy(\"person\", \"moving\").\nHas_kinetic_energy(\"person\", \"taking ukemi\").\n.decl Halts_kinetic_energy(Action:symbol)\nHalts_kinetic_energy(\"taking ukemi\").\n.decl Answer()\nAnswer() :- Has_kinetic_energy(\"person\", state), Halts_kinetic_energy(state).\n.output Answer"]}
{"id": 2263, "answer": true, "completion": ".decl Contains_ingredient(Dish:symbol, Ingredient:symbol)\nContains_ingredient(\"special brownies\", \"marijuana\").\n.decl Not_safe_for_children(Ingredient:symbol)\nNot_safe_for_children(\"marijuana\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"special brownies\", ingredient), Not_safe_for_children(ingredient).\n.output Answer", "completions": [".decl Contains_ingredient(Dish:symbol, Ingredient:symbol)\nContains_ingredient(\"special brownies\", \"marijuana\").\n.decl Not_safe_for_children(Ingredient:symbol)\nNot_safe_for_children(\"marijuana\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"special brownies\", ingredient), Not_safe_for_children(ingredient).\n.output Answer"]}
{"id": 2264, "answer": true, "completion": ".decl Has_episodes(Show:symbol, Episodes:float)\nHas_episodes(\"Futurama\", 140).\nHas_episodes(\"The Simpsons\", 684).\n.decl End_of_2020(Year:float)\nEnd_of_2020(2020).\n.decl Answer()\nAnswer() :- Has_episodes(\"Futurama\", episodes1), Has_episodes(\"The Simpsons\", episodes2), End_of_2020(year), episodes1 > episodes2.\n.output Answer", "completions": [".decl Has_episodes(Show:symbol, Episodes:float)\nHas_episodes(\"Futurama\", 140).\nHas_episodes(\"The Simpsons\", 684).\n.decl End_of_2020(Year:float)\nEnd_of_2020(2020).\n.decl Answer()\nAnswer() :- Has_episodes(\"Futurama\", episodes1), Has_episodes(\"The Simpsons\", episodes2), End_of_2020(year), episodes1 > episodes2.\n.output Answer"]}
{"id": 2265, "answer": true, "completion": ".decl Lives_in_temperature(Animal:symbol, Temperature:symbol)\nLives_in_temperature(\"anchovy\", \"colder\").\nLives_in_temperature(\"anchovy\", \"warmer\").\n.decl Population(Animal:symbol, Temperature:symbol, Count:float)\nPopulation(\"anchovy\", \"colder\", 1000).\nPopulation(\"anchovy\", \"warmer\", 500).\n.decl Answer()\nAnswer() :- Population(\"anchovy\", \"colder\", count1), Population(\"anchovy\", \"warmer\", count2), count1 > count2.\n.output Answer", "completions": [".decl Lives_in_temperature(Animal:symbol, Temperature:symbol)\nLives_in_temperature(\"anchovy\", \"colder\").\nLives_in_temperature(\"anchovy\", \"warmer\").\n.decl Population(Animal:symbol, Temperature:symbol, Count:float)\nPopulation(\"anchovy\", \"colder\", 1000).\nPopulation(\"anchovy\", \"warmer\", 500).\n.decl Answer()\nAnswer() :- Population(\"anchovy\", \"colder\", count1), Population(\"anchovy\", \"warmer\", count2), count1 > count2.\n.output Answer"]}
{"id": 2266, "answer": false, "completion": ".decl Good_at_game(Person:symbol, Game:symbol)\nGood_at_game(\"person\", \"Guitar Hero\").\n.decl Good_at_skill(Person:symbol, Skill:symbol)\nGood_at_skill(\"person\", \"guitar\").\n.decl Game_related_to_skill(Game:symbol, Skill:symbol)\nGame_related_to_skill(\"Guitar Hero\", \"guitar\").\n.decl Answer()\nAnswer() :- Good_at_game(\"person\", game), Game_related_to_skill(game, skill), Good_at_skill(\"person\", skill).\n.output Answer", "completions": [".decl Good_at_game(Person:symbol, Game:symbol)\nGood_at_game(\"person\", \"Guitar Hero\").\n.decl Good_at_skill(Person:symbol, Skill:symbol)\nGood_at_skill(\"person\", \"guitar\").\n.decl Game_related_to_skill(Game:symbol, Skill:symbol)\nGame_related_to_skill(\"Guitar Hero\", \"guitar\").\n.decl Answer()\nAnswer() :- Good_at_game(\"person\", game), Game_related_to_skill(game, skill), Good_at_skill(\"person\", skill).\n.output Answer"]}
{"id": 2267, "answer": false, "completion": ".decl Has_kills(Person:symbol, Kills:float)\nHas_kills(\"Charles Manson\", 9).\nHas_kills(\"Susan Atkins\", 8).\nHas_kills(\"Patricia Krenwinkel\", 7).\nHas_kills(\"Leslie Van Houten\", 2).\nHas_kills(\"Tex Watson\", 8).\n.decl Is_member_of_band(Person:symbol, Band:symbol)\nIs_member_of_band(\"Susan Atkins\", \"Manson Family\").\nIs_member_of_band(\"Patricia Krenwinkel\", \"Manson Family\").\nIs_member_of_band(\"Leslie Van Houten\", \"Manson Family\").\nIs_member_of_band(\"Tex Watson\", \"Manson Family\").\n.decl Answer()\nAnswer() :- Has_kills(band_member, kills1), Has_kills(\"Charles Manson\", kills2), Is_member_of_band(band_member, \"Manson Family\"), kills1 > kills2.\n.output Answer", "completions": [".decl Has_kills(Person:symbol, Kills:float)\nHas_kills(\"Charles Manson\", 9).\nHas_kills(\"Susan Atkins\", 8).\nHas_kills(\"Patricia Krenwinkel\", 7).\nHas_kills(\"Leslie Van Houten\", 2).\nHas_kills(\"Tex Watson\", 8).\n.decl Is_member_of_band(Person:symbol, Band:symbol)\nIs_member_of_band(\"Susan Atkins\", \"Manson Family\").\nIs_member_of_band(\"Patricia Krenwinkel\", \"Manson Family\").\nIs_member_of_band(\"Leslie Van Houten\", \"Manson Family\").\nIs_member_of_band(\"Tex Watson\", \"Manson Family\").\n.decl Answer()\nAnswer() :- Has_kills(band_member, kills1), Has_kills(\"Charles Manson\", kills2), Is_member_of_band(band_member, \"Manson Family\"), kills1 > kills2.\n.output Answer"]}
{"id": 2268, "answer": false, "completion": ".decl Has_power_over(Branch:symbol, Power:symbol)\nHas_power_over(\"executive\", \"military\").\nHas_power_over(\"executive\", \"veto\").\n.decl Answer()\nAnswer() :- Has_power_over(branch, \"military\"), Has_power_over(branch, \"veto\").\n.output Answer", "completions": [".decl Has_power_over(Branch:symbol, Power:symbol)\nHas_power_over(\"executive\", \"military\").\nHas_power_over(\"executive\", \"veto\").\n.decl Answer()\nAnswer() :- Has_power_over(branch, \"military\"), Has_power_over(branch, \"veto\").\n.output Answer"]}
{"id": 2269, "answer": true, "completion": ".decl Believes_in_afterlife(Religion:symbol, Afterlife:symbol)\nBelieves_in_afterlife(\"Christianity\", \"Heaven\").\nBelieves_in_afterlife(\"Christianity\", \"Hell\").\nBelieves_in_afterlife(\"Judaism\", \"Sheol\").\n.decl Answer()\nAnswer() :- Believes_in_afterlife(\"Christianity\", \"Sheol\").\n.output Answer", "completions": [".decl Believes_in_afterlife(Religion:symbol, Afterlife:symbol)\nBelieves_in_afterlife(\"Christianity\", \"Heaven\").\nBelieves_in_afterlife(\"Christianity\", \"Hell\").\nBelieves_in_afterlife(\"Judaism\", \"Sheol\").\n.decl Answer()\nAnswer() :- Believes_in_afterlife(\"Christianity\", \"Sheol\").\n.output Answer"]}
{"id": 2270, "answer": true, "completion": ".decl Built_by(Object:symbol, Builder:symbol)\nBuilt_by(\"Great Pyramids\", \"Ancient Egyptians\").\n.decl Has_government_type(Entity:symbol, Government_type:symbol)\nHas_government_type(\"Ancient Egyptians\", \"theocratic\").\n.decl Answer()\nAnswer() :- Built_by(\"Great Pyramids\", builder), Has_government_type(builder, \"theocratic\").\n.output Answer", "completions": [".decl Built_by(Object:symbol, Builder:symbol)\nBuilt_by(\"Great Pyramids\", \"Ancient Egyptians\").\n.decl Has_government_type(Entity:symbol, Government_type:symbol)\nHas_government_type(\"Ancient Egyptians\", \"theocratic\").\n.decl Answer()\nAnswer() :- Built_by(\"Great Pyramids\", builder), Has_government_type(builder, \"theocratic\").\n.output Answer"]}
{"id": 2271, "answer": false, "completion": ".decl Rides(Person:symbol, Ride:symbol, Park:symbol)\nRides(\"Justin Timberlake\", \"Shipwreck Falls\", \"Six Flags\").\n.decl Has_height(Person:symbol, Height:float)\nHas_height(\"Justin Timberlake\", 1.85).\n.decl Has_height_requirement(Ride:symbol, Min_height:float)\nHas_height_requirement(\"Shipwreck Falls\", 1.22).\n.decl Answer()\nAnswer() :- Rides(\"Justin Timberlake\", \"Shipwreck Falls\", \"Six Flags\").\nAnswer() :- Has_height(\"Justin Timberlake\", height), Has_height_requirement(\"Shipwreck Falls\", min_height), height >= min_height.\n.output Answer", "completions": [".decl Rides(Person:symbol, Ride:symbol, Park:symbol)\nRides(\"Justin Timberlake\", \"Shipwreck Falls\", \"Six Flags\").\n.decl Has_height(Person:symbol, Height:float)\nHas_height(\"Justin Timberlake\", 1.85).\n.decl Has_height_requirement(Ride:symbol, Min_height:float)\nHas_height_requirement(\"Shipwreck Falls\", 1.22).\n.decl Answer()\nAnswer() :- Rides(\"Justin Timberlake\", \"Shipwreck Falls\", \"Six Flags\").\nAnswer() :- Has_height(\"Justin Timberlake\", height), Has_height_requirement(\"Shipwreck Falls\", min_height), height >= min_height.\n.output Answer"]}
{"id": 2272, "answer": true, "completion": ".decl Can_traverse(Object:symbol, Location:symbol)\nCan_traverse(\"Oasis cruise boat\", \"ocean\").\nCan_traverse(\"car\", \"Lincoln Tunnel\").\n.decl Answer()\nAnswer() :- Can_traverse(\"Oasis cruise boat\", \"Lincoln Tunnel\").\n.output Answer", "completions": [".decl Can_traverse(Object:symbol, Location:symbol)\nCan_traverse(\"Oasis cruise boat\", \"ocean\").\nCan_traverse(\"car\", \"Lincoln Tunnel\").\n.decl Answer()\nAnswer() :- Can_traverse(\"Oasis cruise boat\", \"Lincoln Tunnel\").\n.output Answer"]}
{"id": 2273, "answer": true, "completion": ".decl Advocates_lifestyle(Person:symbol, Lifestyle:symbol)\nAdvocates_lifestyle(\"Snoop Dogg\", \"non-straight edge\").\n.decl Answer()\nAnswer() :- Advocates_lifestyle(\"Snoop Dogg\", \"straight edge\").\n.output Answer", "completions": [".decl Advocates_lifestyle(Person:symbol, Lifestyle:symbol)\nAdvocates_lifestyle(\"Snoop Dogg\", \"non-straight edge\").\n.decl Answer()\nAnswer() :- Advocates_lifestyle(\"Snoop Dogg\", \"straight edge\").\n.output Answer"]}
{"id": 2274, "answer": false, "completion": ".decl Is_unicellular(Organism:symbol)\nIs_unicellular(\"amoeba\").\n.decl Can_get_cancer(Organism:symbol)\nCan_get_cancer(\"multicellular organisms\").\n.decl Answer()\nAnswer() :- Can_get_cancer(\"amoeba\").\nAnswer() :- !Is_unicellular(\"amoeba\"), Can_get_cancer(\"multicellular organisms\").\n.output Answer", "completions": [".decl Is_unicellular(Organism:symbol)\nIs_unicellular(\"amoeba\").\n.decl Can_get_cancer(Organism:symbol)\nCan_get_cancer(\"multicellular organisms\").\n.decl Answer()\nAnswer() :- Can_get_cancer(\"amoeba\").\nAnswer() :- !Is_unicellular(\"amoeba\"), Can_get_cancer(\"multicellular organisms\").\n.output Answer"]}
{"id": 2275, "answer": false, "completion": ".decl Occurs_in_year(Event:symbol, Year:float)\nOccurs_in_year(\"Battle of Baghdad\", 2003).\n.decl Released_in_year(Album:symbol, Year:float)\nReleased_in_year(\"Justin Bieber's Believe album\", 2012).\n.decl Answer()\nAnswer() :- Occurs_in_year(\"Battle of Baghdad\", year1), Released_in_year(\"Justin Bieber's Believe album\", year2), year1 < year2.\n.output Answer", "completions": [".decl Occurs_in_year(Event:symbol, Year:float)\nOccurs_in_year(\"Battle of Baghdad\", 2003).\n.decl Released_in_year(Album:symbol, Year:float)\nReleased_in_year(\"Justin Bieber's Believe album\", 2012).\n.decl Answer()\nAnswer() :- Occurs_in_year(\"Battle of Baghdad\", year1), Released_in_year(\"Justin Bieber's Believe album\", year2), year1 < year2.\n.output Answer"]}
{"id": 2276, "answer": true, "completion": ".decl Contains_ingredient(Dish:symbol, Ingredient:symbol)\nContains_ingredient(\"traditional Paella\", \"rice\").\nContains_ingredient(\"traditional Paella\", \"vegetables\").\nContains_ingredient(\"traditional Paella\", \"seafood\").\nContains_ingredient(\"traditional Paella\", \"chicken\").\n.decl Is_vegan(Ingredient:symbol)\nIs_vegan(\"rice\").\nIs_vegan(\"vegetables\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"traditional Paella\", ingredient), !Is_vegan(ingredient).\n.output Answer", "completions": [".decl Contains_ingredient(Dish:symbol, Ingredient:symbol)\nContains_ingredient(\"traditional Paella\", \"rice\").\nContains_ingredient(\"traditional Paella\", \"vegetables\").\nContains_ingredient(\"traditional Paella\", \"seafood\").\nContains_ingredient(\"traditional Paella\", \"chicken\").\n.decl Is_vegan(Ingredient:symbol)\nIs_vegan(\"rice\").\nIs_vegan(\"vegetables\").\n.decl Answer()\nAnswer() :- Contains_ingredient(\"traditional Paella\", ingredient), !Is_vegan(ingredient).\n.output Answer"]}
{"id": 2277, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Mozart\", 1756).\nBorn_in_year(\"Richard Wagner\", 1813).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Mozart\", 1791).\nDied_in_year(\"Richard Wagner\", 1883).\n.decl Accused_of_stealing(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Accused_of_stealing(\"Mozart\", \"Richard Wagner\").\nAnswer() :- Born_in_year(\"Mozart\", birth_year1), Died_in_year(\"Mozart\", death_year1), Born_in_year(\"Richard Wagner\", birth_year2), Died_in_year(\"Richard Wagner\", death_year2), death_year1 < birth_year2.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Birth_year:float)\nBorn_in_year(\"Mozart\", 1756).\nBorn_in_year(\"Richard Wagner\", 1813).\n.decl Died_in_year(Person:symbol, Death_year:float)\nDied_in_year(\"Mozart\", 1791).\nDied_in_year(\"Richard Wagner\", 1883).\n.decl Accused_of_stealing(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Accused_of_stealing(\"Mozart\", \"Richard Wagner\").\nAnswer() :- Born_in_year(\"Mozart\", birth_year1), Died_in_year(\"Mozart\", death_year1), Born_in_year(\"Richard Wagner\", birth_year2), Died_in_year(\"Richard Wagner\", death_year2), death_year1 < birth_year2.\n.output Answer"]}
{"id": 2278, "answer": true, "completion": ".decl Is_holiday(Holiday:symbol, Date:symbol)\nIs_holiday(\"New Year's Eve\", \"December 31\").\n.decl Is_tradition(Tradition:symbol, Holiday:symbol)\nIs_tradition(\"asking for candy\", \"Halloween\").\n.decl Answer()\nAnswer() :- Is_holiday(\"New Year's Eve\", date), Is_tradition(\"asking for candy\", holiday), holiday != \"New Year's Eve\".\n.output Answer", "completions": [".decl Is_holiday(Holiday:symbol, Date:symbol)\nIs_holiday(\"New Year's Eve\", \"December 31\").\n.decl Is_tradition(Tradition:symbol, Holiday:symbol)\nIs_tradition(\"asking for candy\", \"Halloween\").\n.decl Answer()\nAnswer() :- Is_holiday(\"New Year's Eve\", date), Is_tradition(\"asking for candy\", holiday), holiday != \"New Year's Eve\".\n.output Answer"]}
{"id": 2279, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"yellow perch\", \"North America\").\nLives_in(\"yellow perch\", \"Europe\").\n.decl Is_unusual(Animal:symbol, Location:symbol)\nIs_unusual(\"yellow perch\", \"Red Sea\").\n.decl Answer()\nAnswer() :- Lives_in(\"yellow perch\", location), location != \"Red Sea\".\nAnswer() :- Is_unusual(\"yellow perch\", \"Red Sea\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"yellow perch\", \"North America\").\nLives_in(\"yellow perch\", \"Europe\").\n.decl Is_unusual(Animal:symbol, Location:symbol)\nIs_unusual(\"yellow perch\", \"Red Sea\").\n.decl Answer()\nAnswer() :- Lives_in(\"yellow perch\", location), location != \"Red Sea\".\nAnswer() :- Is_unusual(\"yellow perch\", \"Red Sea\").\n.output Answer"]}
{"id": 2280, "answer": true, "completion": ".decl Elects_rulers(Group:symbol, Rulers:symbol)\nElects_rulers(\"land owners\", \"Kingdom of Hungary\").\n.decl Answer()\nAnswer() :- Elects_rulers(\"land owners\", \"Kingdom of Hungary\").\n.output Answer", "completions": [".decl Elects_rulers(Group:symbol, Rulers:symbol)\nElects_rulers(\"land owners\", \"Kingdom of Hungary\").\n.decl Answer()\nAnswer() :- Elects_rulers(\"land owners\", \"Kingdom of Hungary\").\n.output Answer"]}
{"id": 2281, "answer": true, "completion": ".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Topa Inca Yupanqui\", \"15th century\").\n.decl Existed_in_time(Species:symbol, Time_period:symbol)\nExisted_in_time(\"western honey bee\", \"15th century\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Topa Inca Yupanqui\", time_period), Existed_in_time(\"western honey bee\", time_period).\n.output Answer", "completions": [".decl Lived_in_time(Person:symbol, Time_period:symbol)\nLived_in_time(\"Topa Inca Yupanqui\", \"15th century\").\n.decl Existed_in_time(Species:symbol, Time_period:symbol)\nExisted_in_time(\"western honey bee\", \"15th century\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Topa Inca Yupanqui\", time_period), Existed_in_time(\"western honey bee\", time_period).\n.output Answer"]}
{"id": 2282, "answer": true, "completion": ".decl Inspired_by(Work:symbol, Inspiration:symbol)\nInspired_by(\"Macbeth\", \"Shakespeare\").\nInspired_by(\"Alice's Adventures in Wonderland\", \"Lewis Carroll\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Macbeth\", \"Alice's Adventures in Wonderland\").\nAnswer() :- Inspired_by(\"Macbeth\", author1), Inspired_by(\"Alice's Adventures in Wonderland\", author2), author1 = author2.\n.output Answer", "completions": [".decl Inspired_by(Work:symbol, Inspiration:symbol)\nInspired_by(\"Macbeth\", \"Shakespeare\").\nInspired_by(\"Alice's Adventures in Wonderland\", \"Lewis Carroll\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Macbeth\", \"Alice's Adventures in Wonderland\").\nAnswer() :- Inspired_by(\"Macbeth\", author1), Inspired_by(\"Alice's Adventures in Wonderland\", author2), author1 = author2.\n.output Answer"]}
{"id": 2283, "answer": true, "completion": ".decl Appears_in_myths(Creature:symbol, N_myths:float)\nAppears_in_myths(\"fairy\", 1000).\nAppears_in_myths(\"valkyrie\", 500).\n.decl Answer()\nAnswer() :- Appears_in_myths(\"fairy\", n_myths1), Appears_in_myths(\"valkyrie\", n_myths2), n_myths1 > n_myths2.\n.output Answer", "completions": [".decl Appears_in_myths(Creature:symbol, N_myths:float)\nAppears_in_myths(\"fairy\", 1000).\nAppears_in_myths(\"valkyrie\", 500).\n.decl Answer()\nAnswer() :- Appears_in_myths(\"fairy\", n_myths1), Appears_in_myths(\"valkyrie\", n_myths2), n_myths1 > n_myths2.\n.output Answer"]}
{"id": 2284, "answer": true, "completion": ".decl Is_breed_of(Breed:symbol, Species:symbol)\nIs_breed_of(\"Chinchilla\", \"felis catus\").\n.decl Is_type_of(Species:symbol, Type:symbol)\nIs_type_of(\"felis catus\", \"mammal\").\nIs_type_of(\"rodent\", \"mammal\").\n.decl Answer()\nAnswer() :- Is_breed_of(\"Chinchilla\", species), Is_type_of(species, \"rodent\").\n.output Answer", "completions": [".decl Is_breed_of(Breed:symbol, Species:symbol)\nIs_breed_of(\"Chinchilla\", \"felis catus\").\n.decl Is_type_of(Species:symbol, Type:symbol)\nIs_type_of(\"felis catus\", \"mammal\").\nIs_type_of(\"rodent\", \"mammal\").\n.decl Answer()\nAnswer() :- Is_breed_of(\"Chinchilla\", species), Is_type_of(species, \"rodent\").\n.output Answer"]}
{"id": 2285, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Elizabeth II\", 1926).\nBorn_in_year(\"Queen Victoria\", 1819).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Queen Victoria\", 1901).\n.decl Visited(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Born_in_year(\"Elizabeth II\", birth_year1), Died_in_year(\"Queen Victoria\", death_year1), birth_year1 > death_year1, !Visited(\"Elizabeth II\", \"Queen Victoria\").\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Elizabeth II\", 1926).\nBorn_in_year(\"Queen Victoria\", 1819).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Queen Victoria\", 1901).\n.decl Visited(Person_A:symbol, Person_B:symbol)\n.decl Answer()\nAnswer() :- Born_in_year(\"Elizabeth II\", birth_year1), Died_in_year(\"Queen Victoria\", death_year1), birth_year1 > death_year1, !Visited(\"Elizabeth II\", \"Queen Victoria\").\n.output Answer"]}
{"id": 2286, "answer": true, "completion": ".decl Is_god_of(God:symbol, Domain:symbol)\nIs_god_of(\"Pan\", \"shepherds\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Boy Who Cried Wolf\", \"shepherd\").\n.decl Answer()\nAnswer() :- Is_god_of(\"Pan\", domain), Is_profession(\"Boy Who Cried Wolf\", profession), domain = profession.\n.output Answer", "completions": [".decl Is_god_of(God:symbol, Domain:symbol)\nIs_god_of(\"Pan\", \"shepherds\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Boy Who Cried Wolf\", \"shepherd\").\n.decl Answer()\nAnswer() :- Is_god_of(\"Pan\", domain), Is_profession(\"Boy Who Cried Wolf\", profession), domain = profession.\n.output Answer"]}
{"id": 2287, "answer": false, "completion": ".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Dodgers\", \"Los Angeles\").\nLocated_in(\"White Sox\", \"Chicago\").\n.decl Connects(Object:symbol, Location_A:symbol, Location_B:symbol)\nConnects(\"Great Wall of China\", \"China\", \"China\").\n.decl Answer()\nAnswer() :- Connects(\"Great Wall of China\", location1, location2), Located_in(\"Dodgers\", location1), Located_in(\"White Sox\", location2).\n.output Answer", "completions": [".decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"Dodgers\", \"Los Angeles\").\nLocated_in(\"White Sox\", \"Chicago\").\n.decl Connects(Object:symbol, Location_A:symbol, Location_B:symbol)\nConnects(\"Great Wall of China\", \"China\", \"China\").\n.decl Answer()\nAnswer() :- Connects(\"Great Wall of China\", location1, location2), Located_in(\"Dodgers\", location1), Located_in(\"White Sox\", location2).\n.output Answer"]}
{"id": 2288, "answer": true, "completion": ".decl Event_has_music(Event:symbol, Music:symbol)\nEvent_has_music(\"funeral\", \"classical music\").\nEvent_has_music(\"funeral\", \"hymns\").\nEvent_has_music(\"funeral\", \"soft instrumental music\").\n.decl Answer()\nAnswer() :- !Event_has_music(\"funeral\", \"happy hardcore music\").\n.output Answer", "completions": [".decl Event_has_music(Event:symbol, Music:symbol)\nEvent_has_music(\"funeral\", \"classical music\").\nEvent_has_music(\"funeral\", \"hymns\").\nEvent_has_music(\"funeral\", \"soft instrumental music\").\n.decl Answer()\nAnswer() :- !Event_has_music(\"funeral\", \"happy hardcore music\").\n.output Answer"]}
{"id": 2289, "answer": true, "completion": ".decl Has_market_cap(Company:symbol, Market_cap:float)\nHas_market_cap(\"Sainsbury's\", 5.5).\nHas_market_cap(\"Tesco\", 23.5).\n.decl Answer()\nAnswer() :- Has_market_cap(\"Sainsbury's\", market_cap1), Has_market_cap(\"Tesco\", market_cap2), market_cap1 > market_cap2.\n.output Answer", "completions": [".decl Has_market_cap(Company:symbol, Market_cap:float)\nHas_market_cap(\"Sainsbury's\", 5.5).\nHas_market_cap(\"Tesco\", 23.5).\n.decl Answer()\nAnswer() :- Has_market_cap(\"Sainsbury's\", market_cap1), Has_market_cap(\"Tesco\", market_cap2), market_cap1 > market_cap2.\n.output Answer"]}
