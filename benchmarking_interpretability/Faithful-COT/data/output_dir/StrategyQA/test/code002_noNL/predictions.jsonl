{"id": 0, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"college commencements\", \"December\").\nHappens_in_time(\"college commencements\", \"May\").\nHappens_in_time(\"college commencements\", \"June\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), Happens_in_time(\"college commencements\", month), In_season(month, season).\n.output Answer\n\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"college commencements\", \"December\").\nHappens_in_time(\"college commencements\", \"May\").\nHappens_in_time(\"college commencements\", \"June\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), Happens_in_time(\"college commencements\", month), In_season(month, season).\n.output Answer\n\n\n"]}
{"id": 1, "answer": false, "completion": ".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"hydrogen\", 1).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"hydrogen\", atomic_number), Has_n_members(\"Spice Girls\", n_members), atomic_number^2 > n_members.\n.output Answer\n\n\n", "completions": [".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"hydrogen\", 1).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"hydrogen\", atomic_number), Has_n_members(\"Spice Girls\", n_members), atomic_number^2 > n_members.\n.output Answer\n\n\n"]}
{"id": 2, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"pear\", 0.6).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"pear\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer\n\n\n", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"pear\", 0.6).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"pear\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer\n\n\n"]}
{"id": 3, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"snake\", \"hamster\").\nEats(\"bird\", \"hamster\").\n.decl Answer()\nAnswer() :- Eats(animal, \"hamster\").\n.output Answer\n\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"snake\", \"hamster\").\nEats(\"bird\", \"hamster\").\n.decl Answer()\nAnswer() :- Eats(animal, \"hamster\").\n.output Answer\n\n\n"]}
{"id": 4, "answer": true, "completion": ".decl Requires(Activity:symbol, Limb:symbol)\nRequires(\"jujutsu\", \"arms\").\nRequires(\"jujutsu\", \"legs\").\n.decl Answer()\nAnswer() :- Requires(\"jujutsu\", limb1), Requires(\"jujutsu\", limb2), limb1 != limb2.\n.output Answer\n\n", "completions": [".decl Requires(Activity:symbol, Limb:symbol)\nRequires(\"jujutsu\", \"arms\").\nRequires(\"jujutsu\", \"legs\").\n.decl Answer()\nAnswer() :- Requires(\"jujutsu\", limb1), Requires(\"jujutsu\", limb2), limb1 != limb2.\n.output Answer\n\n"]}
{"id": 5, "answer": false, "completion": ".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"War in Vietnam\", 6).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"llama birth\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"llama birth\", n_months1), Last_n_months(\"War in Vietnam\", n_months2),  n_months1 <= n_months2.\n.output Answer\n\n\n", "completions": [".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"War in Vietnam\", 6).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"llama birth\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"llama birth\", n_months1), Last_n_months(\"War in Vietnam\", n_months2),  n_months1 <= n_months2.\n.output Answer\n\n\n"]}
{"id": 6, "answer": false, "completion": ".decl Makes_money_off_of(Person:symbol, Product:symbol)\nMakes_money_off_of(\"Linus Torvalds\", \"Linux\").\n.decl Answer()\nAnswer() :- Makes_money_off_of(\"Linus Torvalds\", \"DirectX\").\n.output Answer\n\n", "completions": [".decl Makes_money_off_of(Person:symbol, Product:symbol)\nMakes_money_off_of(\"Linus Torvalds\", \"Linux\").\n.decl Answer()\nAnswer() :- Makes_money_off_of(\"Linus Torvalds\", \"DirectX\").\n.output Answer\n\n"]}
{"id": 7, "answer": true, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Brooke Shields\", \"Princeton University\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"Princeton University\", 1).\nRanks(\"University of Pennsylvania\", 7).\n.decl Answer()\nAnswer() :- Graduates(\"Brooke Shields\", \"University of Pennsylvania\").\nAnswer() :- Graduates(\"Brooke Shields\", university2), Ranks(university2, rank2), Ranks(\"University of Pennsylvania\", rank1), rank2 <= rank1.\n.output Answer\n\n\n", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Brooke Shields\", \"Princeton University\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"Princeton University\", 1).\nRanks(\"University of Pennsylvania\", 7).\n.decl Answer()\nAnswer() :- Graduates(\"Brooke Shields\", \"University of Pennsylvania\").\nAnswer() :- Graduates(\"Brooke Shields\", university2), Ranks(university2, rank2), Ranks(\"University of Pennsylvania\", rank1), rank2 <= rank1.\n.output Answer\n\n\n"]}
{"id": 8, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"silverfish\", 0.1).\nHas_height(\"Empire State Building\", 381).\n.decl Answer()\nAnswer() :- Has_height(\"silverfish\", height1), Has_height(\"Empire State Building\", height2), height1 < height2.\n.output Answer\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"silverfish\", 0.1).\nHas_height(\"Empire State Building\", 381).\n.decl Answer()\nAnswer() :- Has_height(\"silverfish\", height1), Has_height(\"Empire State Building\", height2), height1 < height2.\n.output Answer\n\n"]}
{"id": 9, "answer": false, "completion": ".decl Has_n_users(Website:symbol, N_users:float)\nHas_n_users(\"Reddit\", 100).\n.decl Has_n_familiar_users(Website:symbol, N_familiar_users:float)\nHas_n_familiar_users(\"Reddit\", 50).\n.decl Answer()\nAnswer() :- Has_n_users(\"Reddit\", n_users), Has_n_familiar_users(\"Reddit\", n_familiar_users), n_familiar_users > n_users/2.\n.output Answer\n\n", "completions": [".decl Has_n_users(Website:symbol, N_users:float)\nHas_n_users(\"Reddit\", 100).\n.decl Has_n_familiar_users(Website:symbol, N_familiar_users:float)\nHas_n_familiar_users(\"Reddit\", 50).\n.decl Answer()\nAnswer() :- Has_n_users(\"Reddit\", n_users), Has_n_familiar_users(\"Reddit\", n_familiar_users), n_familiar_users > n_users/2.\n.output Answer\n\n"]}
{"id": 10, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Rede Globo anchor\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Speaks(\"Rede Globo anchor\", \"Chinese\").\n.output Answer\n\n", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Rede Globo anchor\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Speaks(\"Rede Globo anchor\", \"Chinese\").\n.output Answer\n\n"]}
{"id": 11, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"bottle\", 0.5).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Reiki\", 0).\n.decl Answer()\nAnswer() :- Has_volume(\"bottle\", volume1), Has_volume(\"Reiki\", volume2), volume1 >= volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"bottle\", 0.5).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Reiki\", 0).\n.decl Answer()\nAnswer() :- Has_volume(\"bottle\", volume1), Has_volume(\"Reiki\", volume2), volume1 >= volume2.\n.output Answer\n\n"]}
{"id": 12, "answer": true, "completion": ".decl Has_adrenaline_level(Person:symbol, Adrenaline_level:float)\nHas_adrenaline_level(\"viewer\", 0.5).\n.decl Increases_adrenaline_level(Event:symbol, Adrenaline_level:float)\nIncreases_adrenaline_level(\"Scary Movie\", 0.5).\n.decl Answer()\nAnswer() :- Has_adrenaline_level(\"viewer\", adrenaline_level1), Increases_adrenaline_level(\"Scary Movie\", adrenaline_level2), adrenaline_level1 + adrenaline_level2 > adrenaline_level1.\n.output Answer\n\n", "completions": [".decl Has_adrenaline_level(Person:symbol, Adrenaline_level:float)\nHas_adrenaline_level(\"viewer\", 0.5).\n.decl Increases_adrenaline_level(Event:symbol, Adrenaline_level:float)\nIncreases_adrenaline_level(\"Scary Movie\", 0.5).\n.decl Answer()\nAnswer() :- Has_adrenaline_level(\"viewer\", adrenaline_level1), Increases_adrenaline_level(\"Scary Movie\", adrenaline_level2), adrenaline_level1 + adrenaline_level2 > adrenaline_level1.\n.output Answer\n\n"]}
{"id": 13, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:symbol)\nHas_size(\"Gateway\", \"large\").\nHas_size(\"TARDIS machine\", \"small\").\n.decl Answer()\nAnswer() :- Has_size(\"Gateway\", \"large\"), Has_size(\"TARDIS machine\", \"small\").\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:symbol)\nHas_size(\"Gateway\", \"large\").\nHas_size(\"TARDIS machine\", \"small\").\n.decl Answer()\nAnswer() :- Has_size(\"Gateway\", \"large\"), Has_size(\"TARDIS machine\", \"small\").\n.output Answer\n\n"]}
{"id": 14, "answer": false, "completion": ".decl Is_material_of(Material:symbol, Product:symbol)\nIs_material_of(\"aloe\", \"aloe vera gel\").\nIs_material_of(\"petroleum\", \"plastic\").\n.decl Is_enclosed_in(Material:symbol, Product:symbol)\nIs_enclosed_in(\"aloe\", \"aloe vera gel\").\nIs_enclosed_in(\"plastic\", \"plastic bottle\").\n.decl Answer()\nAnswer() :- Is_material_of(material, product1), Is_enclosed_in(material, product2), product1 != product2.\n.output Answer\n\n", "completions": [".decl Is_material_of(Material:symbol, Product:symbol)\nIs_material_of(\"aloe\", \"aloe vera gel\").\nIs_material_of(\"petroleum\", \"plastic\").\n.decl Is_enclosed_in(Material:symbol, Product:symbol)\nIs_enclosed_in(\"aloe\", \"aloe vera gel\").\nIs_enclosed_in(\"plastic\", \"plastic bottle\").\n.decl Answer()\nAnswer() :- Is_material_of(material, product1), Is_enclosed_in(material, product2), product1 != product2.\n.output Answer\n\n"]}
{"id": 15, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"bee hummingbird\", 0.05).\nHas_mass(\"pea\", 0.1).\n.decl Answer()\nAnswer() :- Has_mass(\"bee hummingbird\", mass1), Has_mass(\"pea\", mass2), mass1 >= mass2.\n.output Answer\n\n", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"bee hummingbird\", 0.05).\nHas_mass(\"pea\", 0.1).\n.decl Answer()\nAnswer() :- Has_mass(\"bee hummingbird\", mass1), Has_mass(\"pea\", mass2), mass1 >= mass2.\n.output Answer\n\n"]}
{"id": 16, "answer": true, "completion": ".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"Spirit\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"news\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"news\", n_years1), Lasts_n_years(\"Spirit\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n", "completions": [".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"Spirit\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"news\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"news\", n_years1), Lasts_n_years(\"Spirit\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n"]}
{"id": 17, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Harry Potter and the Philosopher's Stone\", \"1991\").\nHappens_in_time(\"persecution of pagans\", \"300-400\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Harry Potter and the Philosopher's Stone\", time1), Happens_in_time(\"persecution of pagans\", time2), time1 != time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Harry Potter and the Philosopher's Stone\", \"1991\").\nHappens_in_time(\"persecution of pagans\", \"300-400\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Harry Potter and the Philosopher's Stone\", time1), Happens_in_time(\"persecution of pagans\", time2), time1 != time2.\n.output Answer\n\n"]}
{"id": 18, "answer": true, "completion": ".decl Is_used_for(Object:symbol, Purpose:symbol)\nIs_used_for(\"music\", \"entertainment\").\nIs_used_for(\"music\", \"weapon\").\n.decl Answer()\nAnswer() :- Is_used_for(\"music\", \"weapon\").\n.output Answer\n\n", "completions": [".decl Is_used_for(Object:symbol, Purpose:symbol)\nIs_used_for(\"music\", \"entertainment\").\nIs_used_for(\"music\", \"weapon\").\n.decl Answer()\nAnswer() :- Is_used_for(\"music\", \"weapon\").\n.output Answer\n\n"]}
{"id": 19, "answer": false, "completion": ".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Asiana Airlines\", \"Seoul\").\nFlies_to(\"Asiana Airlines\", \"Tokyo\").\nFlies_to(\"Asiana Airlines\", \"New York\").\nFlies_to(\"Asiana Airlines\", \"Los Angeles\").\nFlies_to(\"Asiana Airlines\", \"London\").\nFlies_to(\"Asiana Airlines\", \"Paris\").\nFlies_to(\"Asiana Airlines\", \"Frankfurt\").\nFlies_to(\"Asiana Airlines\", \"Bangkok\").\nFlies_to(\"Asiana Airlines\", \"Singapore\").\nFlies_to(\"Asiana Airlines\", \"Manila\").\nFlies_to(\"Asiana Airlines\", \"Ho Chi Minh City\").\nFlies_to(\"Asiana Airlines\", \"Jakarta\").\nFlies_to(\"Asiana Airlines\", \"Sydney\").\nFlies_to(\"Asiana Airlines\", \"Melbourne\").\nFlies_to(\"Asiana Airlines\", \"Vancouver\").\nFlies_to(\"Asiana Airlines\", \"Toronto\").\nFlies_to(\"Asiana Airlines\", \"Moscow\").\nFlies_to(\"Asiana Airlines\", \"Cairo\").\nFlies_to(\"Asiana Airlines\", \"Dubai\").\nFlies_to(\"Asiana Airlines\", \"Delhi\").\nFlies_to(\"Asiana Airlines\", \"Mumbai\").\nFlies_to(\"Asiana Airlines\", \"Kolkata\").\nFlies_to(\"Asiana Airlines\", \"Bangalore\").\nFlies_to(\"Asiana Airlines\", \"Chennai\").\nFlies_to(\"Asiana Airlines\", \"Kuala Lumpur\").\nFlies_to(\"Asiana Airlines\", \"Taipei\").\nFlies_to(\"Asiana Airlines\", \"Hong Kong\").\nFlies_to(\"Asiana Airlines\", \"Shanghai\").\nFlies_to(\"Asiana Airlines\", \"Beijing\").\nFlies_to(\"Asiana Airlines\", \"Guangzhou\").\nFlies_to(\"Asiana Airlines\", \"Osaka\").\nFlies_to(\"Asiana Airlines\", \"Nagoya\").\nFlies_to(\"Asiana Airlines\", \"Fukuoka\").\nFlies_to(\"Asiana Airlines\", \"Sapporo\").\nFlies_to(\"Asiana Airlines\", \"Busan\").\nFlies_to(\"Asiana Airlines\", \"Jeju\").\nFlies_to(\"Asiana Airlines\", \"Daegu\").\nFlies_to(\"Asiana Airlines\", \"Dalian\").\nFlies_to(\"Asiana Airlines\", \"Hangzhou\").\nFlies_to(\"Asiana Airlines\", \"Nanjing\").\nFlies_to(\"Asiana Airlines\", \"Xiamen\").\nFlies_to(\"Asiana Airlines\", \"Shenyang\").\nFlies_to(\"Asiana Airlines\", \"Changchun\").\nFlies_to(\"Asiana Airlines\", \"Harbin\").\nFlies_to(\"Asiana Airlines\", \"Chengdu\").\nFlies_to(\"Asiana Airlines\", \"Chongqing\").\nFlies_to(\"Asiana Airlines\", \"Kunming\").\nFlies_to(\"Asiana Airlines\", \"Wuhan\").\nFlies_to(\"Asiana Airlines\", \"Guiyang\").\nFlies_to(\"Asiana Airlines\", \"Nanning\").\nFlies_to(\"Asiana Airlines\", \"Haikou\").\nFlies_to(\"Asiana Airlines\", \"Sanya\").\nFlies_to(\"Asiana Airlines\", \"Guangzhou\").\nFlies_to(\"Asiana Airlines\", \"Shenzhen\").", "completions": [".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Asiana Airlines\", \"Seoul\").\nFlies_to(\"Asiana Airlines\", \"Tokyo\").\nFlies_to(\"Asiana Airlines\", \"New York\").\nFlies_to(\"Asiana Airlines\", \"Los Angeles\").\nFlies_to(\"Asiana Airlines\", \"London\").\nFlies_to(\"Asiana Airlines\", \"Paris\").\nFlies_to(\"Asiana Airlines\", \"Frankfurt\").\nFlies_to(\"Asiana Airlines\", \"Bangkok\").\nFlies_to(\"Asiana Airlines\", \"Singapore\").\nFlies_to(\"Asiana Airlines\", \"Manila\").\nFlies_to(\"Asiana Airlines\", \"Ho Chi Minh City\").\nFlies_to(\"Asiana Airlines\", \"Jakarta\").\nFlies_to(\"Asiana Airlines\", \"Sydney\").\nFlies_to(\"Asiana Airlines\", \"Melbourne\").\nFlies_to(\"Asiana Airlines\", \"Vancouver\").\nFlies_to(\"Asiana Airlines\", \"Toronto\").\nFlies_to(\"Asiana Airlines\", \"Moscow\").\nFlies_to(\"Asiana Airlines\", \"Cairo\").\nFlies_to(\"Asiana Airlines\", \"Dubai\").\nFlies_to(\"Asiana Airlines\", \"Delhi\").\nFlies_to(\"Asiana Airlines\", \"Mumbai\").\nFlies_to(\"Asiana Airlines\", \"Kolkata\").\nFlies_to(\"Asiana Airlines\", \"Bangalore\").\nFlies_to(\"Asiana Airlines\", \"Chennai\").\nFlies_to(\"Asiana Airlines\", \"Kuala Lumpur\").\nFlies_to(\"Asiana Airlines\", \"Taipei\").\nFlies_to(\"Asiana Airlines\", \"Hong Kong\").\nFlies_to(\"Asiana Airlines\", \"Shanghai\").\nFlies_to(\"Asiana Airlines\", \"Beijing\").\nFlies_to(\"Asiana Airlines\", \"Guangzhou\").\nFlies_to(\"Asiana Airlines\", \"Osaka\").\nFlies_to(\"Asiana Airlines\", \"Nagoya\").\nFlies_to(\"Asiana Airlines\", \"Fukuoka\").\nFlies_to(\"Asiana Airlines\", \"Sapporo\").\nFlies_to(\"Asiana Airlines\", \"Busan\").\nFlies_to(\"Asiana Airlines\", \"Jeju\").\nFlies_to(\"Asiana Airlines\", \"Daegu\").\nFlies_to(\"Asiana Airlines\", \"Dalian\").\nFlies_to(\"Asiana Airlines\", \"Hangzhou\").\nFlies_to(\"Asiana Airlines\", \"Nanjing\").\nFlies_to(\"Asiana Airlines\", \"Xiamen\").\nFlies_to(\"Asiana Airlines\", \"Shenyang\").\nFlies_to(\"Asiana Airlines\", \"Changchun\").\nFlies_to(\"Asiana Airlines\", \"Harbin\").\nFlies_to(\"Asiana Airlines\", \"Chengdu\").\nFlies_to(\"Asiana Airlines\", \"Chongqing\").\nFlies_to(\"Asiana Airlines\", \"Kunming\").\nFlies_to(\"Asiana Airlines\", \"Wuhan\").\nFlies_to(\"Asiana Airlines\", \"Guiyang\").\nFlies_to(\"Asiana Airlines\", \"Nanning\").\nFlies_to(\"Asiana Airlines\", \"Haikou\").\nFlies_to(\"Asiana Airlines\", \"Sanya\").\nFlies_to(\"Asiana Airlines\", \"Guangzhou\").\nFlies_to(\"Asiana Airlines\", \"Shenzhen\")."]}
{"id": 20, "answer": true, "completion": ".decl Has_success(Person:symbol, Success:symbol)\nHas_success(\"Alexander the Great\", \"conquering the Persian Empire\").\n.decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"Karachi\", \"conquering the Persian Empire\").\n.decl Answer()\nAnswer() :- Has_success(\"Alexander the Great\", success), Is_part_of(\"Karachi\", success).\n.output Answer\n\n", "completions": [".decl Has_success(Person:symbol, Success:symbol)\nHas_success(\"Alexander the Great\", \"conquering the Persian Empire\").\n.decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"Karachi\", \"conquering the Persian Empire\").\n.decl Answer()\nAnswer() :- Has_success(\"Alexander the Great\", success), Is_part_of(\"Karachi\", success).\n.output Answer\n\n"]}
{"id": 21, "answer": true, "completion": ".decl Trained(Person_A:symbol, Person_B:symbol)\nTrained(\"Leonardo da Vinci\", \"Jackson Pollock\").\n.decl Answer()\nAnswer() :- Trained(\"Leonardo da Vinci\", \"Jackson Pollock\").\n.output Answer\n\n", "completions": [".decl Trained(Person_A:symbol, Person_B:symbol)\nTrained(\"Leonardo da Vinci\", \"Jackson Pollock\").\n.decl Answer()\nAnswer() :- Trained(\"Leonardo da Vinci\", \"Jackson Pollock\").\n.output Answer\n\n"]}
{"id": 22, "answer": true, "completion": ".decl Stimulates(Event:symbol, Part_of_body:symbol)\nStimulates(\"The Exorcist\", \"limbic system\").\n.decl Answer()\nAnswer() :- Stimulates(\"The Exorcist\", \"limbic system\").\n.output Answer\n\n", "completions": [".decl Stimulates(Event:symbol, Part_of_body:symbol)\nStimulates(\"The Exorcist\", \"limbic system\").\n.decl Answer()\nAnswer() :- Stimulates(\"The Exorcist\", \"limbic system\").\n.output Answer\n\n"]}
{"id": 23, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"World War II\", \"1939-1945\").\nHappens_in_time(\"Alan Turing\", \"1912-1954\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"World War II\", time1), Happens_in_time(\"Alan Turing\", time2), time1 != time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"World War II\", \"1939-1945\").\nHappens_in_time(\"Alan Turing\", \"1912-1954\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"World War II\", time1), Happens_in_time(\"Alan Turing\", time2), time1 != time2.\n.output Answer\n\n"]}
{"id": 24, "answer": true, "completion": ".decl Uses(Person:symbol, Object:symbol)\nUses(\"sophist\", \"épée\").\n.decl Answer()\nAnswer() :- Uses(\"sophist\", \"épée\").\n.output Answer\n\n", "completions": [".decl Uses(Person:symbol, Object:symbol)\nUses(\"sophist\", \"épée\").\n.decl Answer()\nAnswer() :- Uses(\"sophist\", \"épée\").\n.output Answer\n\n"]}
{"id": 25, "answer": true, "completion": ".decl Happens_after(Event_A:symbol, Event_B:symbol)\nHappens_after(\"Dale Jr hug his dad\", \"their last Daytona 500 together\").\n.decl Answer()\nAnswer() :- Happens_after(\"Dale Jr hug his dad\", \"their last Daytona 500 together\").\n.output Answer\n\n", "completions": [".decl Happens_after(Event_A:symbol, Event_B:symbol)\nHappens_after(\"Dale Jr hug his dad\", \"their last Daytona 500 together\").\n.decl Answer()\nAnswer() :- Happens_after(\"Dale Jr hug his dad\", \"their last Daytona 500 together\").\n.output Answer\n\n"]}
{"id": 26, "answer": false, "completion": ".decl Grows_in(Plant:symbol, Location:symbol)\nGrows_in(\"citrus\", \"Florida\").\nGrows_in(\"citrus\", \"California\").\nGrows_in(\"citrus\", \"Texas\").\nGrows_in(\"citrus\", \"Arizona\").\nGrows_in(\"citrus\", \"Hawaii\").\nGrows_in(\"citrus\", \"Louisiana\").\nGrows_in(\"citrus\", \"Georgia\").\nGrows_in(\"citrus\", \"Alabama\").\nGrows_in(\"citrus\", \"Mississippi\").\nGrows_in(\"citrus\", \"South Carolina\").\nGrows_in(\"citrus\", \"North Carolina\").\nGrows_in(\"citrus\", \"Arkansas\").\nGrows_in(\"citrus\", \"Tennessee\").\nGrows_in(\"citrus\", \"Kentucky\").\nGrows_in(\"citrus\", \"Virginia\").\nGrows_in(\"citrus\", \"West Virginia\").\nGrows_in(\"citrus\", \"Maryland\").\nGrows_in(\"citrus\", \"Delaware\").\nGrows_in(\"citrus\", \"New Jersey\").\nGrows_in(\"citrus\", \"New York\").\nGrows_in(\"citrus\", \"Pennsylvania\").\nGrows_in(\"citrus\", \"Ohio\").\nGrows_in(\"citrus\", \"Indiana\").\nGrows_in(\"citrus\", \"Illinois\").\nGrows_in(\"citrus\", \"Michigan\").\nGrows_in(\"citrus\", \"Wisconsin\").\nGrows_in(\"citrus\", \"Minnesota\").\nGrows_in(\"citrus\", \"Iowa\").\nGrows_in(\"citrus\", \"Missouri\").\nGrows_in(\"citrus\", \"Nebraska\").\nGrows_in(\"citrus\", \"Kansas\").\nGrows_in(\"citrus\", \"Oklahoma\").\nGrows_in(\"citrus\", \"New Mexico\").\nGrows_in(\"citrus\", \"Colorado\").\nGrows_in(\"citrus\", \"Utah\").\nGrows_in(\"citrus\", \"Nevada\").\nGrows_in(\"citrus\", \"Oregon\").\nGrows_in(\"citrus\", \"Washington\").\nGrows_in(\"citrus\", \"Idaho\").\nGrows_in(\"citrus\", \"Montana\").\nGrows_in(\"citrus\", \"Wyoming\").\nGrows_in(\"citrus\", \"North Dakota\").\nGrows_in(\"citrus\", \"South Dakota\").\nGrows_in(\"citrus\", \"Alaska\").\nGrows_in(\"citrus\", \"Maine\").\nGrows_in(\"citrus\", \"Vermont\").\nGrows_in(\"citrus\", \"New Hampshire\").\nGrows_in(\"citrus\", \"Massachusetts\").\nGrows_in(\"citrus\", \"Connecticut\").\nGrows_in(\"citrus\", \"Rhode Island\").\nGrows_in(\"citrus\", \"New Mexico\").\nGrows_in(\"citrus\", \"Arizona\").\nGrows_in(\"citrus\", \"California\").\nGrows_in(\"citrus\", \"Hawaii\").\nGrows_in(\"citrus\", \"Louisiana\").\nGrows_in(\"citrus\", \"Georgia\").\nGrows_in(\"citrus\", \"Alabama\").\nGrows_in(\"citrus\", \"Mississippi\").\nGrows_in(\"citrus\", \"South Carolina\").\nGrows_in(\"citrus\", \"North Carolina\").\nGrows_in(\"citrus\", \"Arkansas\").\nGrows_in", "completions": [".decl Grows_in(Plant:symbol, Location:symbol)\nGrows_in(\"citrus\", \"Florida\").\nGrows_in(\"citrus\", \"California\").\nGrows_in(\"citrus\", \"Texas\").\nGrows_in(\"citrus\", \"Arizona\").\nGrows_in(\"citrus\", \"Hawaii\").\nGrows_in(\"citrus\", \"Louisiana\").\nGrows_in(\"citrus\", \"Georgia\").\nGrows_in(\"citrus\", \"Alabama\").\nGrows_in(\"citrus\", \"Mississippi\").\nGrows_in(\"citrus\", \"South Carolina\").\nGrows_in(\"citrus\", \"North Carolina\").\nGrows_in(\"citrus\", \"Arkansas\").\nGrows_in(\"citrus\", \"Tennessee\").\nGrows_in(\"citrus\", \"Kentucky\").\nGrows_in(\"citrus\", \"Virginia\").\nGrows_in(\"citrus\", \"West Virginia\").\nGrows_in(\"citrus\", \"Maryland\").\nGrows_in(\"citrus\", \"Delaware\").\nGrows_in(\"citrus\", \"New Jersey\").\nGrows_in(\"citrus\", \"New York\").\nGrows_in(\"citrus\", \"Pennsylvania\").\nGrows_in(\"citrus\", \"Ohio\").\nGrows_in(\"citrus\", \"Indiana\").\nGrows_in(\"citrus\", \"Illinois\").\nGrows_in(\"citrus\", \"Michigan\").\nGrows_in(\"citrus\", \"Wisconsin\").\nGrows_in(\"citrus\", \"Minnesota\").\nGrows_in(\"citrus\", \"Iowa\").\nGrows_in(\"citrus\", \"Missouri\").\nGrows_in(\"citrus\", \"Nebraska\").\nGrows_in(\"citrus\", \"Kansas\").\nGrows_in(\"citrus\", \"Oklahoma\").\nGrows_in(\"citrus\", \"New Mexico\").\nGrows_in(\"citrus\", \"Colorado\").\nGrows_in(\"citrus\", \"Utah\").\nGrows_in(\"citrus\", \"Nevada\").\nGrows_in(\"citrus\", \"Oregon\").\nGrows_in(\"citrus\", \"Washington\").\nGrows_in(\"citrus\", \"Idaho\").\nGrows_in(\"citrus\", \"Montana\").\nGrows_in(\"citrus\", \"Wyoming\").\nGrows_in(\"citrus\", \"North Dakota\").\nGrows_in(\"citrus\", \"South Dakota\").\nGrows_in(\"citrus\", \"Alaska\").\nGrows_in(\"citrus\", \"Maine\").\nGrows_in(\"citrus\", \"Vermont\").\nGrows_in(\"citrus\", \"New Hampshire\").\nGrows_in(\"citrus\", \"Massachusetts\").\nGrows_in(\"citrus\", \"Connecticut\").\nGrows_in(\"citrus\", \"Rhode Island\").\nGrows_in(\"citrus\", \"New Mexico\").\nGrows_in(\"citrus\", \"Arizona\").\nGrows_in(\"citrus\", \"California\").\nGrows_in(\"citrus\", \"Hawaii\").\nGrows_in(\"citrus\", \"Louisiana\").\nGrows_in(\"citrus\", \"Georgia\").\nGrows_in(\"citrus\", \"Alabama\").\nGrows_in(\"citrus\", \"Mississippi\").\nGrows_in(\"citrus\", \"South Carolina\").\nGrows_in(\"citrus\", \"North Carolina\").\nGrows_in(\"citrus\", \"Arkansas\").\nGrows_in"]}
{"id": 27, "answer": false, "completion": ".decl Has_location(Place:symbol, Location:symbol)\nHas_location(\"New York Harbor\", \"North America\").\n.decl Has_activity(Place:symbol, Activity:symbol)\nHas_activity(\"North America\", \"volcanic activity\").\n.decl Answer()\nAnswer() :- Has_location(\"New York Harbor\", location), Has_activity(location, \"volcanic activity\"), !.\n.output Answer\n\n", "completions": [".decl Has_location(Place:symbol, Location:symbol)\nHas_location(\"New York Harbor\", \"North America\").\n.decl Has_activity(Place:symbol, Activity:symbol)\nHas_activity(\"North America\", \"volcanic activity\").\n.decl Answer()\nAnswer() :- Has_location(\"New York Harbor\", location), Has_activity(location, \"volcanic activity\"), !.\n.output Answer\n\n"]}
{"id": 28, "answer": true, "completion": ".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"Palace of Westminster\", \"clock\").\nHas_feature(\"Palace of Westminster\", \"dark\").\n.decl Answer()\nAnswer() :- Has_feature(\"Palace of Westminster\", \"clock\"), Has_feature(\"Palace of Westminster\", \"dark\").\n.output Answer\n\n", "completions": [".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"Palace of Westminster\", \"clock\").\nHas_feature(\"Palace of Westminster\", \"dark\").\n.decl Answer()\nAnswer() :- Has_feature(\"Palace of Westminster\", \"clock\"), Has_feature(\"Palace of Westminster\", \"dark\").\n.output Answer\n\n"]}
{"id": 29, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"teenagers\", 13).\nHas_age(\"young adults\", 25).\nHas_age(\"adults\", 40).\n.decl Has_safety(Medication:symbol, Safety:symbol)\nHas_safety(\"SSRI medications\", \"safe\").\n.decl Answer()\nAnswer() :- Has_age(\"teenagers\", age1), Has_age(\"young adults\", age2), Has_age(\"adults\", age3), Has_safety(\"SSRI medications\", safety1), Has_safety(\"SSRI medications\", safety2), age1 < age3, age2 < age3.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"teenagers\", 13).\nHas_age(\"young adults\", 25).\nHas_age(\"adults\", 40).\n.decl Has_safety(Medication:symbol, Safety:symbol)\nHas_safety(\"SSRI medications\", \"safe\").\n.decl Answer()\nAnswer() :- Has_age(\"teenagers\", age1), Has_age(\"young adults\", age2), Has_age(\"adults\", age3), Has_safety(\"SSRI medications\", safety1), Has_safety(\"SSRI medications\", safety2), age1 < age3, age2 < age3.\n.output Answer\n\n"]}
{"id": 30, "answer": false, "completion": ".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Marco Rubio\", \"Christianity\").\n.decl Answer()\nAnswer() :- Has_religion(\"Marco Rubio\", \"Islam\").\n.output Answer\n\n", "completions": [".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Marco Rubio\", \"Christianity\").\n.decl Answer()\nAnswer() :- Has_religion(\"Marco Rubio\", \"Islam\").\n.output Answer\n\n"]}
{"id": 31, "answer": true, "completion": ".decl Has_expertise(Person:symbol, Expertise:symbol)\nHas_expertise(\"Persephone\", \"gardening\").\n.decl Needs_expertise(Profession:symbol, Expertise:symbol)\nNeeds_expertise(\"landscape architect\", \"gardening\").\n.decl Answer()\nAnswer() :- Has_expertise(\"Persephone\", expertise), Needs_expertise(\"landscape architect\", expertise).\n.output Answer\n\n", "completions": [".decl Has_expertise(Person:symbol, Expertise:symbol)\nHas_expertise(\"Persephone\", \"gardening\").\n.decl Needs_expertise(Profession:symbol, Expertise:symbol)\nNeeds_expertise(\"landscape architect\", \"gardening\").\n.decl Answer()\nAnswer() :- Has_expertise(\"Persephone\", expertise), Needs_expertise(\"landscape architect\", expertise).\n.output Answer\n\n"]}
{"id": 32, "answer": false, "completion": ".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"argon\", 18).\nHas_atomic_number(\"neon\", 10).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"argon\", atomic_number1), Has_atomic_number(\"neon\", atomic_number2), atomic_number1 - atomic_number2 <= 1.\n.output Answer\n\n", "completions": [".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"argon\", 18).\nHas_atomic_number(\"neon\", 10).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"argon\", atomic_number1), Has_atomic_number(\"neon\", atomic_number2), atomic_number1 - atomic_number2 <= 1.\n.output Answer\n\n"]}
{"id": 33, "answer": false, "completion": ".decl Has_parents(Person:symbol, Parent1:symbol, Parent2:symbol)\nHas_parents(\"Thomas Greenhill\", \"John Greenhill\", \"Mary Greenhill\").\n.decl Has_spouse(Person:symbol, Spouse:symbol)\nHas_spouse(\"John Greenhill\", \"Mary Greenhill\").\n.decl Answer()\nAnswer() :- Has_parents(\"Thomas Greenhill\", parent1, parent2), Has_spouse(parent1, spouse1), Has_spouse(parent2, spouse2), spouse1 != spouse2.\n.output Answer\n\n", "completions": [".decl Has_parents(Person:symbol, Parent1:symbol, Parent2:symbol)\nHas_parents(\"Thomas Greenhill\", \"John Greenhill\", \"Mary Greenhill\").\n.decl Has_spouse(Person:symbol, Spouse:symbol)\nHas_spouse(\"John Greenhill\", \"Mary Greenhill\").\n.decl Answer()\nAnswer() :- Has_parents(\"Thomas Greenhill\", parent1, parent2), Has_spouse(parent1, spouse1), Has_spouse(parent2, spouse2), spouse1 != spouse2.\n.output Answer\n\n"]}
{"id": 34, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"high schooler\", 15).\nHas_age(\"high schooler\", 16).\nHas_age(\"high schooler\", 17).\nHas_age(\"high schooler\", 18).\n.decl Uses(Person:symbol, Object:symbol)\nUses(\"adult\", \"yellow pages\").\n.decl Answer()\nAnswer() :- Has_age(person, age), Uses(person, \"yellow pages\"), age < 18.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"high schooler\", 15).\nHas_age(\"high schooler\", 16).\nHas_age(\"high schooler\", 17).\nHas_age(\"high schooler\", 18).\n.decl Uses(Person:symbol, Object:symbol)\nUses(\"adult\", \"yellow pages\").\n.decl Answer()\nAnswer() :- Has_age(person, age), Uses(person, \"yellow pages\"), age < 18.\n.output Answer\n\n"]}
{"id": 35, "answer": false, "completion": ".decl Has_distance(Place1:symbol, Place2:symbol, Distance:float)\nHas_distance(\"Alcatraz island\", \"Siberia\", 8500).\n.decl Can_swim_distance(Animal:symbol, Distance:float)\nCan_swim_distance(\"human\", 100).\n.decl Answer()\nAnswer() :- Has_distance(\"Alcatraz island\", \"Siberia\", distance), Can_swim_distance(\"human\", distance).\n.output Answer\n\n", "completions": [".decl Has_distance(Place1:symbol, Place2:symbol, Distance:float)\nHas_distance(\"Alcatraz island\", \"Siberia\", 8500).\n.decl Can_swim_distance(Animal:symbol, Distance:float)\nCan_swim_distance(\"human\", 100).\n.decl Answer()\nAnswer() :- Has_distance(\"Alcatraz island\", \"Siberia\", distance), Can_swim_distance(\"human\", distance).\n.output Answer\n\n"]}
{"id": 36, "answer": false, "completion": ".decl Has_salinity(Body_of_water:symbol, Salinity:float)\nHas_salinity(\"Gulf of Finland\", 0.5).\n.decl Has_salinity(Body_of_water:symbol, Salinity:float)\nHas_salinity(\"Atlantic Ocean\", 3.5).\n.decl Answer()\nAnswer() :- Has_salinity(\"Gulf of Finland\", salinity1), Has_salinity(\"Atlantic Ocean\", salinity2), salinity1 < salinity2.\n.output Answer\n\n", "completions": [".decl Has_salinity(Body_of_water:symbol, Salinity:float)\nHas_salinity(\"Gulf of Finland\", 0.5).\n.decl Has_salinity(Body_of_water:symbol, Salinity:float)\nHas_salinity(\"Atlantic Ocean\", 3.5).\n.decl Answer()\nAnswer() :- Has_salinity(\"Gulf of Finland\", salinity1), Has_salinity(\"Atlantic Ocean\", salinity2), salinity1 < salinity2.\n.output Answer\n\n"]}
{"id": 37, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"snowy owl\", \"tundra\").\nLives_in(\"snowy owl\", \"taiga\").\n.decl Answer()\nAnswer() :- Lives_in(\"snowy owl\", \"Sonoran\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"snowy owl\", \"tundra\").\nLives_in(\"snowy owl\", \"taiga\").\n.decl Answer()\nAnswer() :- Lives_in(\"snowy owl\", \"Sonoran\").\n.output Answer\n\n"]}
{"id": 38, "answer": true, "completion": ".decl Worships(Person:symbol, Martyr:symbol)\nWorships(\"rabbi\", \"martyr\").\n.decl Killed(Person:symbol, Martyr:symbol)\nKilled(\"Ranavalona I\", \"martyr\").\n.decl Answer()\nAnswer() :- Worships(\"rabbi\", martyr), Killed(\"Ranavalona I\", martyr).\n.output Answer\n\n", "completions": [".decl Worships(Person:symbol, Martyr:symbol)\nWorships(\"rabbi\", \"martyr\").\n.decl Killed(Person:symbol, Martyr:symbol)\nKilled(\"Ranavalona I\", \"martyr\").\n.decl Answer()\nAnswer() :- Worships(\"rabbi\", martyr), Killed(\"Ranavalona I\", martyr).\n.output Answer\n\n"]}
{"id": 39, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"scale insects\", \"red\").\nHas_color(\"cactus\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"scale insects\", color1), Has_color(\"cactus\", color2), color1 != color2.\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"scale insects\", \"red\").\nHas_color(\"cactus\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"scale insects\", color1), Has_color(\"cactus\", color2), color1 != color2.\n.output Answer\n\n"]}
{"id": 40, "answer": false, "completion": ".decl Written_in_year(Document:symbol, Year:float)\nWritten_in_year(\"Second Amendment to the United States Constitution\", 1791).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"black Americans\", 1791).\n.decl Answer()\nAnswer() :- Written_in_year(\"Second Amendment to the United States Constitution\", year1), Happens_in_year(\"black Americans\", year2), year1 < year2.\n.output Answer\n\n", "completions": [".decl Written_in_year(Document:symbol, Year:float)\nWritten_in_year(\"Second Amendment to the United States Constitution\", 1791).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"black Americans\", 1791).\n.decl Answer()\nAnswer() :- Written_in_year(\"Second Amendment to the United States Constitution\", year1), Happens_in_year(\"black Americans\", year2), year1 < year2.\n.output Answer\n\n"]}
{"id": 41, "answer": false, "completion": ".decl Has_element(Object:symbol, Element:symbol)\nHas_element(\"atmosphere of Mars\", \"carbon dioxide\").\nHas_element(\"atmosphere of Mars\", \"oxygen\").\nHas_element(\"atmosphere of Mars\", \"nitrogen\").\nHas_element(\"atmosphere of Mars\", \"hydrogen\").\nHas_element(\"atmosphere of Mars\", \"helium\").\nHas_element(\"atmosphere of Mars\", \"argon\").\nHas_element(\"atmosphere of Mars\", \"neon\").\nHas_element(\"atmosphere of Mars\", \"krypton\").\nHas_element(\"atmosphere of Mars\", \"xenon\").\nHas_element(\"atmosphere of Mars\", \"ozone\").\nHas_element(\"atmosphere of Mars\", \"water vapor\").\nHas_element(\"atmosphere of Mars\", \"carbon monoxide\").\nHas_element(\"atmosphere of Mars\", \"methane\").\nHas_element(\"atmosphere of Mars\", \"ammonia\").\nHas_element(\"atmosphere of Mars\", \"acetylene\").\nHas_element(\"atmosphere of Mars\", \"ethane\").\nHas_element(\"atmosphere of Mars\", \"propane\").\nHas_element(\"atmosphere of Mars\", \"butane\").\nHas_element(\"atmosphere of Mars\", \"carbon disulfide\").\nHas_element(\"atmosphere of Mars\", \"phosphine\").\nHas_element(\"atmosphere of Mars\", \"sulfur dioxide\").\nHas_element(\"atmosphere of Mars\", \"hydrogen sulfide\").\nHas_element(\"atmosphere of Mars\", \"nitric oxide\").\nHas_element(\"atmosphere of Mars\", \"nitrogen dioxide\").\nHas_element(\"atmosphere of Mars\", \"nitrous oxide\").\nHas_element(\"atmosphere of Mars\", \"ozone\").\nHas_element(\"atmosphere of Mars\", \"hydrogen peroxide\").\nHas_element(\"atmosphere of Mars\", \"iodine\").\nHas_element(\"atmosphere of Mars\", \"hydrogen chloride\").\nHas_element(\"atmosphere of Mars\", \"hydrogen fluoride\").\nHas_element(\"atmosphere of Mars\", \"hydrogen deuteride\").\nHas_element(\"atmosphere of Mars\", \"water\").\nHas_element(\"atmosphere of Mars\", \"carbon monoxide\").\nHas_element(\"atmosphere of Mars\", \"methane\").\nHas_element(\"atmosphere of Mars\", \"ammonia\").\nHas_element(\"atmosphere of Mars\", \"acetylene\").\nHas_element(\"atmosphere of Mars\", \"ethane\").\nHas_element(\"atmosphere of Mars\", \"propane\").\nHas_element(\"atmosphere of Mars\", \"butane\").\nHas_element(\"atmosphere of Mars\", \"carbon disulfide\").\nHas_element(\"atmosphere of Mars\", \"phosphine\").\nHas_element(\"atmosphere of Mars\", \"sulfur dioxide\").\nHas_element(\"atmosphere of Mars\", \"hydrogen sulfide\").\nHas_element(\"atmosphere of Mars\", \"nitric oxide\").\nHas_element(\"atmosphere of Mars\", \"nitrogen dioxide\").\nHas_element(\"atmosphere of Mars\", \"nitrous oxide\").\nHas_element(\"atmosphere of Mars\", \"ozone\").\nHas_element(\"atmosphere of Mars\", \"hydrogen peroxide\").\nHas_element(\"atmosphere of Mars\", \"iodine\").\nHas_element(\"atmosphere of Mars\", \"hyd", "completions": [".decl Has_element(Object:symbol, Element:symbol)\nHas_element(\"atmosphere of Mars\", \"carbon dioxide\").\nHas_element(\"atmosphere of Mars\", \"oxygen\").\nHas_element(\"atmosphere of Mars\", \"nitrogen\").\nHas_element(\"atmosphere of Mars\", \"hydrogen\").\nHas_element(\"atmosphere of Mars\", \"helium\").\nHas_element(\"atmosphere of Mars\", \"argon\").\nHas_element(\"atmosphere of Mars\", \"neon\").\nHas_element(\"atmosphere of Mars\", \"krypton\").\nHas_element(\"atmosphere of Mars\", \"xenon\").\nHas_element(\"atmosphere of Mars\", \"ozone\").\nHas_element(\"atmosphere of Mars\", \"water vapor\").\nHas_element(\"atmosphere of Mars\", \"carbon monoxide\").\nHas_element(\"atmosphere of Mars\", \"methane\").\nHas_element(\"atmosphere of Mars\", \"ammonia\").\nHas_element(\"atmosphere of Mars\", \"acetylene\").\nHas_element(\"atmosphere of Mars\", \"ethane\").\nHas_element(\"atmosphere of Mars\", \"propane\").\nHas_element(\"atmosphere of Mars\", \"butane\").\nHas_element(\"atmosphere of Mars\", \"carbon disulfide\").\nHas_element(\"atmosphere of Mars\", \"phosphine\").\nHas_element(\"atmosphere of Mars\", \"sulfur dioxide\").\nHas_element(\"atmosphere of Mars\", \"hydrogen sulfide\").\nHas_element(\"atmosphere of Mars\", \"nitric oxide\").\nHas_element(\"atmosphere of Mars\", \"nitrogen dioxide\").\nHas_element(\"atmosphere of Mars\", \"nitrous oxide\").\nHas_element(\"atmosphere of Mars\", \"ozone\").\nHas_element(\"atmosphere of Mars\", \"hydrogen peroxide\").\nHas_element(\"atmosphere of Mars\", \"iodine\").\nHas_element(\"atmosphere of Mars\", \"hydrogen chloride\").\nHas_element(\"atmosphere of Mars\", \"hydrogen fluoride\").\nHas_element(\"atmosphere of Mars\", \"hydrogen deuteride\").\nHas_element(\"atmosphere of Mars\", \"water\").\nHas_element(\"atmosphere of Mars\", \"carbon monoxide\").\nHas_element(\"atmosphere of Mars\", \"methane\").\nHas_element(\"atmosphere of Mars\", \"ammonia\").\nHas_element(\"atmosphere of Mars\", \"acetylene\").\nHas_element(\"atmosphere of Mars\", \"ethane\").\nHas_element(\"atmosphere of Mars\", \"propane\").\nHas_element(\"atmosphere of Mars\", \"butane\").\nHas_element(\"atmosphere of Mars\", \"carbon disulfide\").\nHas_element(\"atmosphere of Mars\", \"phosphine\").\nHas_element(\"atmosphere of Mars\", \"sulfur dioxide\").\nHas_element(\"atmosphere of Mars\", \"hydrogen sulfide\").\nHas_element(\"atmosphere of Mars\", \"nitric oxide\").\nHas_element(\"atmosphere of Mars\", \"nitrogen dioxide\").\nHas_element(\"atmosphere of Mars\", \"nitrous oxide\").\nHas_element(\"atmosphere of Mars\", \"ozone\").\nHas_element(\"atmosphere of Mars\", \"hydrogen peroxide\").\nHas_element(\"atmosphere of Mars\", \"iodine\").\nHas_element(\"atmosphere of Mars\", \"hyd"]}
{"id": 42, "answer": true, "completion": ".decl Has_face(Person:symbol, Face:symbol)\nHas_face(\"Bob Marley\", \"face\").\n.decl Sells(Shop:symbol, Item:symbol)\nSells(\"smoke shop\", \"Bob Marley's face\").\n.decl Answer()\nAnswer() :- Has_face(\"Bob Marley\", \"face\"), Sells(\"smoke shop\", \"Bob Marley's face\").\n.output Answer\n\n", "completions": [".decl Has_face(Person:symbol, Face:symbol)\nHas_face(\"Bob Marley\", \"face\").\n.decl Sells(Shop:symbol, Item:symbol)\nSells(\"smoke shop\", \"Bob Marley's face\").\n.decl Answer()\nAnswer() :- Has_face(\"Bob Marley\", \"face\"), Sells(\"smoke shop\", \"Bob Marley's face\").\n.output Answer\n\n"]}
{"id": 43, "answer": true, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Pablo Escobar\", \"The King of Cocaine\").\nHas_nickname(\"Pablo Escobar\", \"El Doctor\").\nHas_nickname(\"Pablo Escobar\", \"El Patrón\").\nHas_nickname(\"Pablo Escobar\", \"Don Pablo\").\nHas_nickname(\"Robert Moses Grove\", \"The Father of the American Chemical Industry\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Pablo Escobar\", nickname1), Has_nickname(\"Robert Moses Grove\", nickname2), nickname1 != nickname2.\n.output Answer\n\n", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Pablo Escobar\", \"The King of Cocaine\").\nHas_nickname(\"Pablo Escobar\", \"El Doctor\").\nHas_nickname(\"Pablo Escobar\", \"El Patrón\").\nHas_nickname(\"Pablo Escobar\", \"Don Pablo\").\nHas_nickname(\"Robert Moses Grove\", \"The Father of the American Chemical Industry\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Pablo Escobar\", nickname1), Has_nickname(\"Robert Moses Grove\", nickname2), nickname1 != nickname2.\n.output Answer\n\n"]}
{"id": 44, "answer": true, "completion": ".decl Has_connection(Company:symbol, Person:symbol)\nHas_connection(\"Subway\", \"Jared Fogle\").\n.decl Is_child_abuser(Person:symbol)\nIs_child_abuser(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Has_connection(\"Subway\", person), Is_child_abuser(person).\n.output Answer\n\n", "completions": [".decl Has_connection(Company:symbol, Person:symbol)\nHas_connection(\"Subway\", \"Jared Fogle\").\n.decl Is_child_abuser(Person:symbol)\nIs_child_abuser(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Has_connection(\"Subway\", person), Is_child_abuser(person).\n.output Answer\n\n"]}
{"id": 45, "answer": false, "completion": ".decl Uses(Technology:symbol, Resource:symbol)\nUses(\"autopilot\", \"electricity\").\nUses(\"autopilot\", \"solar energy\").\nUses(\"autopilot\", \"wind energy\").\nUses(\"autopilot\", \"hydroelectricity\").\nUses(\"autopilot\", \"nuclear energy\").\nUses(\"autopilot\", \"geothermal energy\").\nUses(\"autopilot\", \"tidal energy\").\nUses(\"autopilot\", \"wave energy\").\nUses(\"autopilot\", \"biomass\").\nUses(\"autopilot\", \"hydrogen\").\nUses(\"autopilot\", \"fuel cell\").\nUses(\"autopilot\", \"battery\").\nUses(\"autopilot\", \"supercapacitor\").\nUses(\"autopilot\", \"flywheel\").\nUses(\"autopilot\", \"ultracapacitor\").\nUses(\"autopilot\", \"thermal energy\").\nUses(\"autopilot\", \"solar thermal energy\").\nUses(\"autopilot\", \"solar heating\").\nUses(\"autopilot\", \"solar cooling\").\nUses(\"autopilot\", \"solar architecture\").\nUses(\"autopilot\", \"solar water heating\").\nUses(\"autopilot\", \"solar cooking\").\nUses(\"autopilot\", \"solar drying\").\nUses(\"autopilot\", \"solar distillation\").\nUses(\"autopilot\", \"solar furnace\").\nUses(\"autopilot\", \"solar power\").\nUses(\"autopilot\", \"solar thermal power\").\nUses(\"autopilot\", \"solar heating and cooling\").\nUses(\"autopilot\", \"solar thermal collector\").\nUses(\"autopilot\", \"solar thermal energy storage\").\nUses(\"autopilot\", \"solar updraft tower\").\nUses(\"autopilot\", \"solar chimney\").\nUses(\"autopilot\", \"solar pond\").\nUses(\"autopilot\", \"solar thermal collector (parabolic trough)\").\nUses(\"autopilot\", \"solar thermal collector (power tower)\").\nUses(\"autopilot\", \"solar thermal collector (fresnel reflector)\").\nUses(\"autopilot\", \"solar thermal collector (dish Stirling)\").\nUses(\"autopilot\", \"solar thermal collector (linear concentrator)\").\nUses(\"autopilot\", \"solar thermal collector (compact linear fresnel reflector)\").\nUses(\"autopilot\", \"solar thermal collector (parabolic dish)\").\nUses(\"autopilot\", \"solar thermal collector (solar furnace)\").\nUses(\"autopilot\", \"solar thermal collector (solar chimney)\").\nUses(\"autopilot\", \"solar thermal collector (solar pond)\").\nUses(\"autopilot\", \"solar thermal collector (solar power tower)\").\nUses(\"autopilot\", \"solar thermal collector (solar updraft tower)\").\nUses(\"autopilot\", \"solar thermal collector (solar thermal energy storage)\").\nUses(\"autopilot\", \"solar thermal collector (solar thermal power)\").\nUses(\"autopilot\", \"solar thermal collector (solar thermal)\").\nUses(\"autopilot\", \"solar thermal collector (solar water heating)\").\nUses(\"autopilot\", \"solar thermal collector (solar)\").\nUses(\"autopilot\", \"solar thermal", "completions": [".decl Uses(Technology:symbol, Resource:symbol)\nUses(\"autopilot\", \"electricity\").\nUses(\"autopilot\", \"solar energy\").\nUses(\"autopilot\", \"wind energy\").\nUses(\"autopilot\", \"hydroelectricity\").\nUses(\"autopilot\", \"nuclear energy\").\nUses(\"autopilot\", \"geothermal energy\").\nUses(\"autopilot\", \"tidal energy\").\nUses(\"autopilot\", \"wave energy\").\nUses(\"autopilot\", \"biomass\").\nUses(\"autopilot\", \"hydrogen\").\nUses(\"autopilot\", \"fuel cell\").\nUses(\"autopilot\", \"battery\").\nUses(\"autopilot\", \"supercapacitor\").\nUses(\"autopilot\", \"flywheel\").\nUses(\"autopilot\", \"ultracapacitor\").\nUses(\"autopilot\", \"thermal energy\").\nUses(\"autopilot\", \"solar thermal energy\").\nUses(\"autopilot\", \"solar heating\").\nUses(\"autopilot\", \"solar cooling\").\nUses(\"autopilot\", \"solar architecture\").\nUses(\"autopilot\", \"solar water heating\").\nUses(\"autopilot\", \"solar cooking\").\nUses(\"autopilot\", \"solar drying\").\nUses(\"autopilot\", \"solar distillation\").\nUses(\"autopilot\", \"solar furnace\").\nUses(\"autopilot\", \"solar power\").\nUses(\"autopilot\", \"solar thermal power\").\nUses(\"autopilot\", \"solar heating and cooling\").\nUses(\"autopilot\", \"solar thermal collector\").\nUses(\"autopilot\", \"solar thermal energy storage\").\nUses(\"autopilot\", \"solar updraft tower\").\nUses(\"autopilot\", \"solar chimney\").\nUses(\"autopilot\", \"solar pond\").\nUses(\"autopilot\", \"solar thermal collector (parabolic trough)\").\nUses(\"autopilot\", \"solar thermal collector (power tower)\").\nUses(\"autopilot\", \"solar thermal collector (fresnel reflector)\").\nUses(\"autopilot\", \"solar thermal collector (dish Stirling)\").\nUses(\"autopilot\", \"solar thermal collector (linear concentrator)\").\nUses(\"autopilot\", \"solar thermal collector (compact linear fresnel reflector)\").\nUses(\"autopilot\", \"solar thermal collector (parabolic dish)\").\nUses(\"autopilot\", \"solar thermal collector (solar furnace)\").\nUses(\"autopilot\", \"solar thermal collector (solar chimney)\").\nUses(\"autopilot\", \"solar thermal collector (solar pond)\").\nUses(\"autopilot\", \"solar thermal collector (solar power tower)\").\nUses(\"autopilot\", \"solar thermal collector (solar updraft tower)\").\nUses(\"autopilot\", \"solar thermal collector (solar thermal energy storage)\").\nUses(\"autopilot\", \"solar thermal collector (solar thermal power)\").\nUses(\"autopilot\", \"solar thermal collector (solar thermal)\").\nUses(\"autopilot\", \"solar thermal collector (solar water heating)\").\nUses(\"autopilot\", \"solar thermal collector (solar)\").\nUses(\"autopilot\", \"solar thermal"]}
{"id": 46, "answer": false, "completion": ".decl Has_health_status(Person:symbol, Health_status:symbol)\nHas_health_status(\"psychiatric patients\", \"unhealthy\").\n.decl Accepts(Organization:symbol, Person:symbol)\nAccepts(\"United States Air Force\", \"healthy people\").\n.decl Answer()\nAnswer() :- Has_health_status(person, health_status), Accepts(\"United States Air Force\", person), health_status != \"healthy\".\n.output Answer\n\n", "completions": [".decl Has_health_status(Person:symbol, Health_status:symbol)\nHas_health_status(\"psychiatric patients\", \"unhealthy\").\n.decl Accepts(Organization:symbol, Person:symbol)\nAccepts(\"United States Air Force\", \"healthy people\").\n.decl Answer()\nAnswer() :- Has_health_status(person, health_status), Accepts(\"United States Air Force\", person), health_status != \"healthy\".\n.output Answer\n\n"]}
{"id": 47, "answer": true, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Nicole Kidman\", \"Tom Cruise\").\nKnows(\"Tom Cruise\", \"John Travolta\").\n.decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Tom Cruise\", \"Scientology\").\nIs_member_of(\"John Travolta\", \"Scientology\").\n.decl Answer()\nAnswer() :- Knows(\"Nicole Kidman\", person), Is_member_of(person, \"Scientology\").\n.output Answer\n\n", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Nicole Kidman\", \"Tom Cruise\").\nKnows(\"Tom Cruise\", \"John Travolta\").\n.decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Tom Cruise\", \"Scientology\").\nIs_member_of(\"John Travolta\", \"Scientology\").\n.decl Answer()\nAnswer() :- Knows(\"Nicole Kidman\", person), Is_member_of(person, \"Scientology\").\n.output Answer\n\n"]}
{"id": 48, "answer": true, "completion": ".decl Is_friend(Person_A:symbol, Person_B:symbol)\nIs_friend(\"John Lennon\", \"Sasha Obama\").\n.decl Is_known_to_be(Person:symbol, Quality:symbol)\nIs_known_to_be(\"John Lennon\", \"good friend\").\n.decl Answer()\nAnswer() :- Is_friend(\"John Lennon\", \"Sasha Obama\"), Is_known_to_be(\"John Lennon\", \"good friend\").\n.output Answer\n\n", "completions": [".decl Is_friend(Person_A:symbol, Person_B:symbol)\nIs_friend(\"John Lennon\", \"Sasha Obama\").\n.decl Is_known_to_be(Person:symbol, Quality:symbol)\nIs_known_to_be(\"John Lennon\", \"good friend\").\n.decl Answer()\nAnswer() :- Is_friend(\"John Lennon\", \"Sasha Obama\"), Is_known_to_be(\"John Lennon\", \"good friend\").\n.output Answer\n\n"]}
{"id": 49, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"tunnels at CERN\", 27).\nHas_length(\"High Speed 1 rails\", 100).\n.decl Answer()\nAnswer() :- Has_length(\"tunnels at CERN\", length1), Has_length(\"High Speed 1 rails\", length2), length1 < length2.\n.output Answer\n\n", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"tunnels at CERN\", 27).\nHas_length(\"High Speed 1 rails\", 100).\n.decl Answer()\nAnswer() :- Has_length(\"tunnels at CERN\", length1), Has_length(\"High Speed 1 rails\", length2), length1 < length2.\n.output Answer\n\n"]}
{"id": 50, "answer": true, "completion": ".decl Weighs_more_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_more_than(\"elephant\", \"male macaque\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"elephant\", \"male macaque\").\n.output Answer\n\n", "completions": [".decl Weighs_more_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_more_than(\"elephant\", \"male macaque\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"elephant\", \"male macaque\").\n.output Answer\n\n"]}
{"id": 51, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Ubuntu people\", \"Ubuntu\").\n.decl Answer()\nAnswer() :- Speaks(\"Ubuntu people\", \"Ubuntu\").\n.output Answer\n\n", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Ubuntu people\", \"Ubuntu\").\n.decl Answer()\nAnswer() :- Speaks(\"Ubuntu people\", \"Ubuntu\").\n.output Answer\n\n"]}
{"id": 52, "answer": true, "completion": ".decl Has_risk(Activity:symbol, Risk:symbol)\nHas_risk(\"cycling\", \"high\").\n.decl Causes(Activity:symbol, Injury:symbol)\nCauses(\"cycling\", \"pelvis fractures\").\n.decl Answer()\nAnswer() :- Has_risk(\"cycling\", \"high\"), Causes(\"cycling\", \"pelvis fractures\").\n.output Answer\n\n", "completions": [".decl Has_risk(Activity:symbol, Risk:symbol)\nHas_risk(\"cycling\", \"high\").\n.decl Causes(Activity:symbol, Injury:symbol)\nCauses(\"cycling\", \"pelvis fractures\").\n.decl Answer()\nAnswer() :- Has_risk(\"cycling\", \"high\"), Causes(\"cycling\", \"pelvis fractures\").\n.output Answer\n\n"]}
{"id": 53, "answer": true, "completion": ".decl Has_immunity(Animal:symbol, Disease:symbol)\nHas_immunity(\"platypus\", \"cholera\").\n.decl Answer()\nAnswer() :- Has_immunity(\"platypus\", \"cholera\").\n.output Answer\n\n", "completions": [".decl Has_immunity(Animal:symbol, Disease:symbol)\nHas_immunity(\"platypus\", \"cholera\").\n.decl Answer()\nAnswer() :- Has_immunity(\"platypus\", \"cholera\").\n.output Answer\n\n"]}
{"id": 54, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"moose\", 500).\nHas_mass(\"minotaur\", 300).\n.decl Answer()\nAnswer() :- Has_mass(\"moose\", mass1), Has_mass(\"minotaur\", mass2), mass1 > mass2.\n.output Answer\n\n", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"moose\", 500).\nHas_mass(\"minotaur\", 300).\n.decl Answer()\nAnswer() :- Has_mass(\"moose\", mass1), Has_mass(\"minotaur\", mass2), mass1 > mass2.\n.output Answer\n\n"]}
{"id": 55, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"anchovy pizza\", \"anchovy\").\nHas_ingredient(\"anchovy pizza\", \"cheese\").\nHas_ingredient(\"anchovy pizza\", \"tomato\").\nHas_ingredient(\"anchovy pizza\", \"dough\").\nHas_ingredient(\"anchovy pizza\", \"olive oil\").\nHas_ingredient(\"anchovy pizza\", \"garlic\").\nHas_ingredient(\"anchovy pizza\", \"oregano\").\nHas_ingredient(\"anchovy pizza\", \"basil\").\n.decl Has_part(Animal:symbol, Part:symbol)\nHas_part(\"anchovy\", \"bone\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"anchovy pizza\", ingredient), Has_part(ingredient, \"bone\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"anchovy pizza\", \"anchovy\").\nHas_ingredient(\"anchovy pizza\", \"cheese\").\nHas_ingredient(\"anchovy pizza\", \"tomato\").\nHas_ingredient(\"anchovy pizza\", \"dough\").\nHas_ingredient(\"anchovy pizza\", \"olive oil\").\nHas_ingredient(\"anchovy pizza\", \"garlic\").\nHas_ingredient(\"anchovy pizza\", \"oregano\").\nHas_ingredient(\"anchovy pizza\", \"basil\").\n.decl Has_part(Animal:symbol, Part:symbol)\nHas_part(\"anchovy\", \"bone\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"anchovy pizza\", ingredient), Has_part(ingredient, \"bone\").\n.output Answer\n\n"]}
{"id": 56, "answer": true, "completion": ".decl Eats(Animal:symbol, Food:symbol)\nEats(\"Bengal cat\", \"pancakes\").\n.decl Answer()\nAnswer() :- Eats(\"Bengal cat\", \"pancakes\").\n.output Answer\n\n", "completions": [".decl Eats(Animal:symbol, Food:symbol)\nEats(\"Bengal cat\", \"pancakes\").\n.decl Answer()\nAnswer() :- Eats(\"Bengal cat\", \"pancakes\").\n.output Answer\n\n"]}
{"id": 57, "answer": false, "completion": ".decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"zucchini\", \"zucchini\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"courgette\", \"courgette\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"italian\", \"italian\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"squash\", \"squash\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"marrow\", \"marrow\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"vegetable\", \"vegetable\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"fruit\", \"fruit\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"plant\", \"plant\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucurbita\", \"cucurbita\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"pepo\", \"pepo\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"pumpkin\", \"pumpkin\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"gourd\", \"gourd\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucumber\", \"cucumber\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"melon\", \"melon\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucurbitaceae\", \"cucurbitaceae\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucurbit\", \"cucurbit\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucumber\", \"cucumber\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucurbita\", \"cucurbita\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"pepo\", \"pepo\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"pumpkin\", \"pumpkin\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"gourd\", \"gourd\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucumber\", \"cucumber\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"melon\", \"melon\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucurbitaceae\", \"cucurbitaceae\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucurbit\", \"cucurbit\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucumber\", \"cucumber\").", "completions": [".decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"zucchini\", \"zucchini\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"courgette\", \"courgette\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"italian\", \"italian\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"squash\", \"squash\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"marrow\", \"marrow\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"vegetable\", \"vegetable\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"fruit\", \"fruit\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"plant\", \"plant\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucurbita\", \"cucurbita\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"pepo\", \"pepo\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"pumpkin\", \"pumpkin\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"gourd\", \"gourd\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucumber\", \"cucumber\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"melon\", \"melon\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucurbitaceae\", \"cucurbitaceae\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucurbit\", \"cucurbit\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucumber\", \"cucumber\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucurbita\", \"cucurbita\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"pepo\", \"pepo\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"pumpkin\", \"pumpkin\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"gourd\", \"gourd\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucumber\", \"cucumber\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"melon\", \"melon\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucurbitaceae\", \"cucurbitaceae\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucurbit\", \"cucurbit\").\n.decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"cucumber\", \"cucumber\")."]}
{"id": 58, "answer": false, "completion": ".decl Borders(Place:symbol, Place2:symbol)\nBorders(\"The Hague\", \"North Sea\").\nBorders(\"The Hague\", \"North Sea\").\n.decl Answer()\nAnswer() :- Borders(\"The Hague\", place2), Borders(\"The Hague\", place3), place2 != place3.\n.output Answer\n\n", "completions": [".decl Borders(Place:symbol, Place2:symbol)\nBorders(\"The Hague\", \"North Sea\").\nBorders(\"The Hague\", \"North Sea\").\n.decl Answer()\nAnswer() :- Borders(\"The Hague\", place2), Borders(\"The Hague\", place3), place2 != place3.\n.output Answer\n\n"]}
{"id": 59, "answer": true, "completion": ".decl Happens_in_age(Event:symbol, Age:symbol)\nHappens_in_age(\"breast exams\", \"adulthood\").\nHappens_in_age(\"middle school\", \"childhood\").\n.decl Answer()\nAnswer() :- Happens_in_age(\"breast exams\", age1), Happens_in_age(\"middle school\", age2), age1 != age2.\n.output Answer\n\n", "completions": [".decl Happens_in_age(Event:symbol, Age:symbol)\nHappens_in_age(\"breast exams\", \"adulthood\").\nHappens_in_age(\"middle school\", \"childhood\").\n.decl Answer()\nAnswer() :- Happens_in_age(\"breast exams\", age1), Happens_in_age(\"middle school\", age2), age1 != age2.\n.output Answer\n\n"]}
{"id": 60, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Korea under Japanese Rule\", \"1910-1945\").\nHappens_in_time(\"Iron Chef\", \"1993-1999\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Korea under Japanese Rule\", time1), Happens_in_time(\"Iron Chef\", time2), time1 = time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Korea under Japanese Rule\", \"1910-1945\").\nHappens_in_time(\"Iron Chef\", \"1993-1999\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Korea under Japanese Rule\", time1), Happens_in_time(\"Iron Chef\", time2), time1 = time2.\n.output Answer\n\n"]}
{"id": 61, "answer": true, "completion": ".decl Travels_faster(Vehicle_A:symbol, Vehicle_B:symbol)\nTravels_faster(\"bald eagle\", \"B-52\").\n.decl Answer()\nAnswer() :- Travels_faster(\"bald eagle\", \"B-52\").\n.output Answer\n\n", "completions": [".decl Travels_faster(Vehicle_A:symbol, Vehicle_B:symbol)\nTravels_faster(\"bald eagle\", \"B-52\").\n.decl Answer()\nAnswer() :- Travels_faster(\"bald eagle\", \"B-52\").\n.output Answer\n\n"]}
{"id": 62, "answer": true, "completion": ".decl Looks_like(Person_A:symbol, Person_B:symbol)\nLooks_like(\"Snoopy\", \"Chance\").\n.decl Answer()\nAnswer() :- Looks_like(\"Snoopy\", \"Chance\").\n.output Answer\n\n", "completions": [".decl Looks_like(Person_A:symbol, Person_B:symbol)\nLooks_like(\"Snoopy\", \"Chance\").\n.decl Answer()\nAnswer() :- Looks_like(\"Snoopy\", \"Chance\").\n.output Answer\n\n"]}
{"id": 63, "answer": true, "completion": ".decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Dioskourides\", \"physician\").\nIs_a(\"Dioskourides\", \"pharmacist\").\nIs_a(\"Dioskourides\", \"botanist\").\nIs_a(\"Dioskourides\", \"lapidary\").\n.decl Answer()\nAnswer() :- Is_a(\"Dioskourides\", \"lapidary\").\n.output Answer\n\n", "completions": [".decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Dioskourides\", \"physician\").\nIs_a(\"Dioskourides\", \"pharmacist\").\nIs_a(\"Dioskourides\", \"botanist\").\nIs_a(\"Dioskourides\", \"lapidary\").\n.decl Answer()\nAnswer() :- Is_a(\"Dioskourides\", \"lapidary\").\n.output Answer\n\n"]}
{"id": 64, "answer": false, "completion": ".decl Has_income(Family:symbol, Income:float)\nHas_income(\"middle class family\", 50000).\n.decl Has_income_range(Family:symbol, Income_range:symbol)\nHas_income_range(\"middle class family\", \"middle class\").\n.decl Has_butler(Family:symbol)\nHas_butler(\"rich family\").\n.decl Answer()\nAnswer() :- Has_income_range(family, \"middle class\"), Has_butler(family).\n.output Answer\n\n", "completions": [".decl Has_income(Family:symbol, Income:float)\nHas_income(\"middle class family\", 50000).\n.decl Has_income_range(Family:symbol, Income_range:symbol)\nHas_income_range(\"middle class family\", \"middle class\").\n.decl Has_butler(Family:symbol)\nHas_butler(\"rich family\").\n.decl Answer()\nAnswer() :- Has_income_range(family, \"middle class\"), Has_butler(family).\n.output Answer\n\n"]}
{"id": 65, "answer": true, "completion": ".decl Baptised(Person:symbol)\nBaptised(\"Maggie Williams\").\n.decl Deputy_chief_of_staff(Person:symbol, Year:float)\nDeputy_chief_of_staff(\"Maggie Williams\", 2009).\n.decl Answer()\nAnswer() :- Deputy_chief_of_staff(person, 2009), Baptised(person).\n.output Answer\n\n", "completions": [".decl Baptised(Person:symbol)\nBaptised(\"Maggie Williams\").\n.decl Deputy_chief_of_staff(Person:symbol, Year:float)\nDeputy_chief_of_staff(\"Maggie Williams\", 2009).\n.decl Answer()\nAnswer() :- Deputy_chief_of_staff(person, 2009), Baptised(person).\n.output Answer\n\n"]}
{"id": 66, "answer": false, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"New York Public Library\", \"books\").\nSells(\"New York Public Library\", \"magazines\").\nSells(\"New York Public Library\", \"newspapers\").\nSells(\"New York Public Library\", \"CDs\").\nSells(\"New York Public Library\", \"DVDs\").\nSells(\"New York Public Library\", \"toys\").\nSells(\"New York Public Library\", \"games\").\nSells(\"New York Public Library\", \"puzzles\").\nSells(\"New York Public Library\", \"greeting cards\").\nSells(\"New York Public Library\", \"stationery\").\nSells(\"New York Public Library\", \"gift items\").\nSells(\"New York Public Library\", \"art supplies\").\nSells(\"New York Public Library\", \"office supplies\").\nSells(\"New York Public Library\", \"school supplies\").\nSells(\"New York Public Library\", \"bookmarks\").\nSells(\"New York Public Library\", \"book bags\").\nSells(\"New York Public Library\", \"magnets\").\nSells(\"New York Public Library\", \"buttons\").\nSells(\"New York Public Library\", \"postcards\").\nSells(\"New York Public Library\", \"stickers\").\nSells(\"New York Public Library\", \"pens\").\nSells(\"New York Public Library\", \"pencils\").\nSells(\"New York Public Library\", \"erasers\").\nSells(\"New York Public Library\", \"rulers\").\nSells(\"New York Public Library\", \"calculators\").\nSells(\"New York Public Library\", \"notebooks\").\nSells(\"New York Public Library\", \"folders\").\nSells(\"New York Public Library\", \"binders\").\nSells(\"New York Public Library\", \"glue\").\nSells(\"New York Public Library\", \"scissors\").\nSells(\"New York Public Library\", \"tape\").\nSells(\"New York Public Library\", \"crayons\").\nSells(\"New York Public Library\", \"markers\").\nSells(\"New York Public Library\", \"paint\").\nSells(\"New York Public Library\", \"paint brushes\").\nSells(\"New York Public Library\", \"paint palettes\").\nSells(\"New York Public Library\", \"paint easels\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"New York Public Library\", \"books\").\nSells(\"New York Public Library\", \"magazines\").\nSells(\"New York Public Library\", \"newspapers\").\nSells(\"New York Public Library\", \"CDs\").\nSells(\"New York Public Library\", \"DVDs\").\nSells(\"New York Public Library\", \"toys\").\nSells(\"New York Public Library\", \"games\").\nSells(\"New York Public Library\", \"puzzles\").\nSells(\"New York Public Library\", \"greeting cards\").\nSells(\"New York Public Library\", \"stationery\").\nSells(\"New York Public Library\", \"gift items\").\nSells(\"New York Public Library\", \"art supplies\").\nSells(\"New York Public Library\", \"office supplies\").\nSells(\"New York Public Library\", \"school supplies\").\nSells(\"New York Public Library\", \"bookmarks\").\nSells(\"New York Public Library\", \"book bags\").\nSells(\"New York Public Library\", \"magnets\").\nSells(\"New York Public Library\", \"buttons\").\nSells(\"New York Public Library\", \"postcards\").\nSells(\"New York Public Library\", \"stickers\").\nSells(\"New York Public Library\", \"pens\").\nSells(\"New York Public Library\", \"pencils\").\nSells(\"New York Public Library\", \"erasers\").\nSells(\"New York Public Library\", \"rulers\").\nSells(\"New York Public Library\", \"calculators\").\nSells(\"New York Public Library\", \"notebooks\").\nSells(\"New York Public Library\", \"folders\").\nSells(\"New York Public Library\", \"binders\").\nSells(\"New York Public Library\", \"glue\").\nSells(\"New York Public Library\", \"scissors\").\nSells(\"New York Public Library\", \"tape\").\nSells(\"New York Public Library\", \"crayons\").\nSells(\"New York Public Library\", \"markers\").\nSells(\"New York Public Library\", \"paint\").\nSells(\"New York Public Library\", \"paint brushes\").\nSells(\"New York Public Library\", \"paint palettes\").\nSells(\"New York Public Library\", \"paint easels\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New York Public Library\", \"paint canvases\").\nSells(\"New"]}
{"id": 67, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Islamic prophets\", 25).\nHas_n_members(\"Kings of Judah\", 20).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Islamic prophets\", 25).\nHas_n_members(\"Kings of Judah\", 20).\n.decl Answer()\nAnswer() :- Has_n_members(\"Islamic prophets\", n_members1), Has_n_members(\"Kings of Judah\", n_members2), n_members1 > n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Islamic prophets\", 25).\nHas_n_members(\"Kings of Judah\", 20).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Islamic prophets\", 25).\nHas_n_members(\"Kings of Judah\", 20).\n.decl Answer()\nAnswer() :- Has_n_members(\"Islamic prophets\", n_members1), Has_n_members(\"Kings of Judah\", n_members2), n_members1 > n_members2.\n.output Answer\n\n"]}
{"id": 68, "answer": true, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Taylor Swift\", \"female\").\nHas_gender(\"Snoopy\", \"male\").\n.decl Answer()\nAnswer() :- Has_gender(\"Taylor Swift\", \"female\"), Has_gender(\"Snoopy\", \"male\").\n.output Answer\n\n", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Taylor Swift\", \"female\").\nHas_gender(\"Snoopy\", \"male\").\n.decl Answer()\nAnswer() :- Has_gender(\"Taylor Swift\", \"female\"), Has_gender(\"Snoopy\", \"male\").\n.output Answer\n\n"]}
{"id": 69, "answer": true, "completion": ".decl Influences(Group_A:symbol, Group_B:symbol)\nInfluences(\"Confederate States Army\", \"West Point\").\n.decl Answer()\nAnswer() :- Influences(\"Confederate States Army\", \"West Point\").\n.output Answer\n\n", "completions": [".decl Influences(Group_A:symbol, Group_B:symbol)\nInfluences(\"Confederate States Army\", \"West Point\").\n.decl Answer()\nAnswer() :- Influences(\"Confederate States Army\", \"West Point\").\n.output Answer\n\n"]}
{"id": 70, "answer": true, "completion": ".decl Repulses(Person:symbol, Political_ideology:symbol)\nRepulses(\"Blaire White\", \"conservatism\").\n.decl Answer()\nAnswer() :- Repulses(\"Blaire White\", \"conservatism\").\n.output Answer\n\n", "completions": [".decl Repulses(Person:symbol, Political_ideology:symbol)\nRepulses(\"Blaire White\", \"conservatism\").\n.decl Answer()\nAnswer() :- Repulses(\"Blaire White\", \"conservatism\").\n.output Answer\n\n"]}
{"id": 71, "answer": true, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"aloe vera plant\", \"aloe vera leaf\").\nHas_part(\"aloe vera plant\", \"aloe vera stem\").\nHas_part(\"aloe vera plant\", \"aloe vera flower\").\n.decl Tastes_good(Object:symbol)\nTastes_good(\"aloe vera leaf\").\nTastes_good(\"aloe vera stem\").\nTastes_good(\"aloe vera flower\").\n.decl Answer()\nAnswer() :- Has_part(\"aloe vera plant\", part), Tastes_good(part).\n.output Answer\n\n", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"aloe vera plant\", \"aloe vera leaf\").\nHas_part(\"aloe vera plant\", \"aloe vera stem\").\nHas_part(\"aloe vera plant\", \"aloe vera flower\").\n.decl Tastes_good(Object:symbol)\nTastes_good(\"aloe vera leaf\").\nTastes_good(\"aloe vera stem\").\nTastes_good(\"aloe vera flower\").\n.decl Answer()\nAnswer() :- Has_part(\"aloe vera plant\", part), Tastes_good(part).\n.output Answer\n\n"]}
{"id": 72, "answer": true, "completion": ".decl Studies(Person:symbol, Science:symbol)\nStudies(\"oceanographer\", \"oceanography\").\nStudies(\"oceanographer\", \"physics\").\nStudies(\"oceanographer\", \"chemistry\").\nStudies(\"oceanographer\", \"biology\").\n.decl Answer()\nAnswer() :- Studies(\"oceanographer\", science1), Studies(\"oceanographer\", science2), science1 != science2.\n.output Answer\n\n", "completions": [".decl Studies(Person:symbol, Science:symbol)\nStudies(\"oceanographer\", \"oceanography\").\nStudies(\"oceanographer\", \"physics\").\nStudies(\"oceanographer\", \"chemistry\").\nStudies(\"oceanographer\", \"biology\").\n.decl Answer()\nAnswer() :- Studies(\"oceanographer\", science1), Studies(\"oceanographer\", science2), science1 != science2.\n.output Answer\n\n"]}
{"id": 73, "answer": true, "completion": ".decl Has_genre(Person:symbol, Genre:symbol)\nHas_genre(\"Kurt Cobain\", \"grunge\").\n.decl Survives_after_death(Genre:symbol)\nSurvives_after_death(\"grunge\").\n.decl Answer()\nAnswer() :- Has_genre(\"Kurt Cobain\", genre), Survives_after_death(genre).\n.output Answer\n\n", "completions": [".decl Has_genre(Person:symbol, Genre:symbol)\nHas_genre(\"Kurt Cobain\", \"grunge\").\n.decl Survives_after_death(Genre:symbol)\nSurvives_after_death(\"grunge\").\n.decl Answer()\nAnswer() :- Has_genre(\"Kurt Cobain\", genre), Survives_after_death(genre).\n.output Answer\n\n"]}
{"id": 74, "answer": false, "completion": ".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Immanuel Kant\", \"1724-1804\").\nLives_in_time(\"Franklin Pierce\", \"1804-1869\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Immanuel Kant\", time1), Lives_in_time(\"Franklin Pierce\", time2), time1 = time2.\n.output Answer\n\n", "completions": [".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Immanuel Kant\", \"1724-1804\").\nLives_in_time(\"Franklin Pierce\", \"1804-1869\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Immanuel Kant\", time1), Lives_in_time(\"Franklin Pierce\", time2), time1 = time2.\n.output Answer\n\n"]}
{"id": 75, "answer": true, "completion": ".decl Has_market_share(Company:symbol, Market_share:float)\nHas_market_share(\"Nippon Steel\", 0.5).\n.decl Has_market_size(Market:symbol, Market_size:float)\nHas_market_size(\"Japanese bulk carrier market\", 100).\n.decl Answer()\nAnswer() :- Has_market_share(\"Nippon Steel\", market_share), Has_market_size(\"Japanese bulk carrier market\", market_size), market_share * market_size > 0.\n.output Answer\n\n", "completions": [".decl Has_market_share(Company:symbol, Market_share:float)\nHas_market_share(\"Nippon Steel\", 0.5).\n.decl Has_market_size(Market:symbol, Market_size:float)\nHas_market_size(\"Japanese bulk carrier market\", 100).\n.decl Answer()\nAnswer() :- Has_market_share(\"Nippon Steel\", market_share), Has_market_size(\"Japanese bulk carrier market\", market_size), market_share * market_size > 0.\n.output Answer\n\n"]}
{"id": 76, "answer": false, "completion": ".decl Uses(Person:symbol, Field:symbol)\nUses(\"geographer\", \"geography\").\nUses(\"biochemist\", \"biochemistry\").\n.decl Answer()\nAnswer() :- Uses(\"geographer\", field1), Uses(\"biochemist\", field2), field1 = field2.\n.output Answer\n\n", "completions": [".decl Uses(Person:symbol, Field:symbol)\nUses(\"geographer\", \"geography\").\nUses(\"biochemist\", \"biochemistry\").\n.decl Answer()\nAnswer() :- Uses(\"geographer\", field1), Uses(\"biochemist\", field2), field1 = field2.\n.output Answer\n\n"]}
{"id": 77, "answer": false, "completion": ".decl Produces(Country:symbol, Product:symbol)\nProduces(\"Brazil\", \"coffee\").\nProduces(\"Vietnam\", \"coffee\").\nProduces(\"Colombia\", \"coffee\").\nProduces(\"Indonesia\", \"coffee\").\nProduces(\"Ethiopia\", \"coffee\").\nProduces(\"India\", \"coffee\").\nProduces(\"Peru\", \"coffee\").\nProduces(\"Mexico\", \"coffee\").\nProduces(\"Guatemala\", \"coffee\").\nProduces(\"Uganda\", \"coffee\").\nProduces(\"Honduras\", \"coffee\").\nProduces(\"Nicaragua\", \"coffee\").\nProduces(\"El Salvador\", \"coffee\").\nProduces(\"Papua New Guinea\", \"coffee\").\nProduces(\"Costa Rica\", \"coffee\").\nProduces(\"Cuba\", \"coffee\").\nProduces(\"Kenya\", \"coffee\").\nProduces(\"Panama\", \"coffee\").\nProduces(\"Tanzania\", \"coffee\").\nProduces(\"Ecuador\", \"coffee\").\nProduces(\"Bolivia\", \"coffee\").\nProduces(\"China\", \"coffee\").\nProduces(\"Thailand\", \"coffee\").\nProduces(\"Cameroon\", \"coffee\").\nProduces(\"Zimbabwe\", \"coffee\").\nProduces(\"Ivory Coast\", \"coffee\").\nProduces(\"Malawi\", \"coffee\").\nProduces(\"Jamaica\", \"coffee\").\nProduces(\"Dominican Republic\", \"coffee\").\nProduces(\"Burundi\", \"coffee\").\nProduces(\"Rwanda\", \"coffee\").\nProduces(\"Guinea\", \"coffee\").\nProduces(\"Haiti\", \"coffee\").\nProduces(\"Congo\", \"coffee\").\nProduces(\"Paraguay\", \"coffee\").\nProduces(\"Madagascar\", \"coffee\").\nProduces(\"Sri Lanka\", \"coffee\").\nProduces(\"Venezuela\", \"coffee\").\nProduces(\"Nigeria\", \"coffee\").\nProduces(\"Ghana\", \"coffee\").\nProduces(\"Yemen\", \"coffee\").\nProduces(\"Angola\", \"coffee\").\nProduces(\"Togo\", \"coffee\").\nProduces(\"Philippines\", \"coffee\").\nProduces(\"Malaysia\", \"coffee\").\nProduces(\"Burkina Faso\", \"coffee\").\nProduces(\"Uruguay\", \"coffee\").\nProduces(\"Benin\", \"coffee\").\nProduces(\"Mozambique\", \"coffee\").\nProduces(\"Guinea-Bissau\", \"coffee\").\nProduces(\"Sierra Leone\", \"coffee\").\nProduces(\"Liberia\", \"coffee\").\nProduces(\"Central African Republic\", \"coffee\").\nProduces(\"Belize\", \"coffee\").\nProduces(\"Chad\", \"coffee\").\nProduces(\"Mali\", \"coffee\").\nProduces(\"Nicaragua\", \"coffee\").\nProduces(\"Senegal\", \"coffee\").\nProduces(\"Guatemala\", \"coffee\").\nProduces(\"Zambia\", \"coffee\").\nProduces(\"South Africa\", \"coffee\").\nProduces(\"Côte d'Ivoire\", \"coffee\").\nProduces(\"Nepal\", \"coffee\").\nProduces(\"Argentina\", \"coffee\").\nProduces(\"Bhutan\", \"coffee\").\nProduces(\"Australia\", \"coffee\").\nProduces(\"Sudan\", \"coffee\").\n", "completions": [".decl Produces(Country:symbol, Product:symbol)\nProduces(\"Brazil\", \"coffee\").\nProduces(\"Vietnam\", \"coffee\").\nProduces(\"Colombia\", \"coffee\").\nProduces(\"Indonesia\", \"coffee\").\nProduces(\"Ethiopia\", \"coffee\").\nProduces(\"India\", \"coffee\").\nProduces(\"Peru\", \"coffee\").\nProduces(\"Mexico\", \"coffee\").\nProduces(\"Guatemala\", \"coffee\").\nProduces(\"Uganda\", \"coffee\").\nProduces(\"Honduras\", \"coffee\").\nProduces(\"Nicaragua\", \"coffee\").\nProduces(\"El Salvador\", \"coffee\").\nProduces(\"Papua New Guinea\", \"coffee\").\nProduces(\"Costa Rica\", \"coffee\").\nProduces(\"Cuba\", \"coffee\").\nProduces(\"Kenya\", \"coffee\").\nProduces(\"Panama\", \"coffee\").\nProduces(\"Tanzania\", \"coffee\").\nProduces(\"Ecuador\", \"coffee\").\nProduces(\"Bolivia\", \"coffee\").\nProduces(\"China\", \"coffee\").\nProduces(\"Thailand\", \"coffee\").\nProduces(\"Cameroon\", \"coffee\").\nProduces(\"Zimbabwe\", \"coffee\").\nProduces(\"Ivory Coast\", \"coffee\").\nProduces(\"Malawi\", \"coffee\").\nProduces(\"Jamaica\", \"coffee\").\nProduces(\"Dominican Republic\", \"coffee\").\nProduces(\"Burundi\", \"coffee\").\nProduces(\"Rwanda\", \"coffee\").\nProduces(\"Guinea\", \"coffee\").\nProduces(\"Haiti\", \"coffee\").\nProduces(\"Congo\", \"coffee\").\nProduces(\"Paraguay\", \"coffee\").\nProduces(\"Madagascar\", \"coffee\").\nProduces(\"Sri Lanka\", \"coffee\").\nProduces(\"Venezuela\", \"coffee\").\nProduces(\"Nigeria\", \"coffee\").\nProduces(\"Ghana\", \"coffee\").\nProduces(\"Yemen\", \"coffee\").\nProduces(\"Angola\", \"coffee\").\nProduces(\"Togo\", \"coffee\").\nProduces(\"Philippines\", \"coffee\").\nProduces(\"Malaysia\", \"coffee\").\nProduces(\"Burkina Faso\", \"coffee\").\nProduces(\"Uruguay\", \"coffee\").\nProduces(\"Benin\", \"coffee\").\nProduces(\"Mozambique\", \"coffee\").\nProduces(\"Guinea-Bissau\", \"coffee\").\nProduces(\"Sierra Leone\", \"coffee\").\nProduces(\"Liberia\", \"coffee\").\nProduces(\"Central African Republic\", \"coffee\").\nProduces(\"Belize\", \"coffee\").\nProduces(\"Chad\", \"coffee\").\nProduces(\"Mali\", \"coffee\").\nProduces(\"Nicaragua\", \"coffee\").\nProduces(\"Senegal\", \"coffee\").\nProduces(\"Guatemala\", \"coffee\").\nProduces(\"Zambia\", \"coffee\").\nProduces(\"South Africa\", \"coffee\").\nProduces(\"Côte d'Ivoire\", \"coffee\").\nProduces(\"Nepal\", \"coffee\").\nProduces(\"Argentina\", \"coffee\").\nProduces(\"Bhutan\", \"coffee\").\nProduces(\"Australia\", \"coffee\").\nProduces(\"Sudan\", \"coffee\").\n"]}
{"id": 78, "answer": false, "completion": ".decl Has_ingredients(Food:symbol, Ingredient:symbol)\nHas_ingredients(\"BLT\", \"bacon\").\nHas_ingredients(\"BLT\", \"lettuce\").\nHas_ingredients(\"BLT\", \"tomato\").\n.decl Has_ingredients(Food:symbol, Ingredient:symbol)\nHas_ingredients(\"BLT\", \"bacon\").\nHas_ingredients(\"BLT\", \"lettuce\").\nHas_ingredients(\"BLT\", \"tomato\").\n.decl Answer()\nAnswer() :- Has_ingredients(\"BLT\", ingredient), !Has_ingredients(\"Casablanca\", ingredient).\n.output Answer\n\n", "completions": [".decl Has_ingredients(Food:symbol, Ingredient:symbol)\nHas_ingredients(\"BLT\", \"bacon\").\nHas_ingredients(\"BLT\", \"lettuce\").\nHas_ingredients(\"BLT\", \"tomato\").\n.decl Has_ingredients(Food:symbol, Ingredient:symbol)\nHas_ingredients(\"BLT\", \"bacon\").\nHas_ingredients(\"BLT\", \"lettuce\").\nHas_ingredients(\"BLT\", \"tomato\").\n.decl Answer()\nAnswer() :- Has_ingredients(\"BLT\", ingredient), !Has_ingredients(\"Casablanca\", ingredient).\n.output Answer\n\n"]}
{"id": 79, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Statue of Liberty\", 225).\nHas_weight(\"largest ship from Voyages of Christopher Columbus\", 180).\n.decl Answer()\nAnswer() :- Has_weight(\"Statue of Liberty\", weight1), Has_weight(\"largest ship from Voyages of Christopher Columbus\", weight2), weight1 <= weight2.\n.output Answer\n\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Statue of Liberty\", 225).\nHas_weight(\"largest ship from Voyages of Christopher Columbus\", 180).\n.decl Answer()\nAnswer() :- Has_weight(\"Statue of Liberty\", weight1), Has_weight(\"largest ship from Voyages of Christopher Columbus\", weight2), weight1 <= weight2.\n.output Answer\n\n\n"]}
{"id": 80, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Jolly Green Giant's largest monument\", 55).\nHas_height(\"Pyrenees\", 3404).\n.decl Answer()\nAnswer() :- Has_height(\"Jolly Green Giant's largest monument\", height1), Has_height(\"Pyrenees\", height2), height1 < height2.\n.output Answer\n\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Jolly Green Giant's largest monument\", 55).\nHas_height(\"Pyrenees\", 3404).\n.decl Answer()\nAnswer() :- Has_height(\"Jolly Green Giant's largest monument\", height1), Has_height(\"Pyrenees\", height2), height1 < height2.\n.output Answer\n\n\n"]}
{"id": 81, "answer": true, "completion": ".decl Influences(Person:symbol, Organization:symbol)\nInfluences(\"Karl Marx\", \"communist party of China\").\n.decl Answer()\nAnswer() :- Influences(\"Karl Marx\", \"communist party of China\").\n.output Answer\n\n", "completions": [".decl Influences(Person:symbol, Organization:symbol)\nInfluences(\"Karl Marx\", \"communist party of China\").\n.decl Answer()\nAnswer() :- Influences(\"Karl Marx\", \"communist party of China\").\n.output Answer\n\n"]}
{"id": 82, "answer": true, "completion": ".decl Uses_for_protein(Company:symbol, Protein_source:symbol)\nUses_for_protein(\"Soylent\", \"Pea\").\n.decl Answer()\nAnswer() :- Uses_for_protein(\"Soylent\", \"Pea\").\n.output Answer\n\n", "completions": [".decl Uses_for_protein(Company:symbol, Protein_source:symbol)\nUses_for_protein(\"Soylent\", \"Pea\").\n.decl Answer()\nAnswer() :- Uses_for_protein(\"Soylent\", \"Pea\").\n.output Answer\n\n"]}
{"id": 83, "answer": true, "completion": ".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"person in Quebec\", \"Catholicism\").\nHas_religion(\"person in Quebec\", \"Protestantism\").\nHas_religion(\"person in Quebec\", \"Islam\").\n.decl Has_holy_book(Religion:symbol, Holy_book:symbol)\nHas_holy_book(\"Catholicism\", \"Bible\").\nHas_holy_book(\"Protestantism\", \"Bible\").\nHas_holy_book(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Has_religion(person, religion), Has_holy_book(religion, \"Quran\").\n.output Answer\n\n", "completions": [".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"person in Quebec\", \"Catholicism\").\nHas_religion(\"person in Quebec\", \"Protestantism\").\nHas_religion(\"person in Quebec\", \"Islam\").\n.decl Has_holy_book(Religion:symbol, Holy_book:symbol)\nHas_holy_book(\"Catholicism\", \"Bible\").\nHas_holy_book(\"Protestantism\", \"Bible\").\nHas_holy_book(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Has_religion(person, religion), Has_holy_book(religion, \"Quran\").\n.output Answer\n\n"]}
{"id": 84, "answer": false, "completion": ".decl Takes_place_in(Show:symbol, Location:symbol)\nTakes_place_in(\"Family Guy\", \"Rhode Island\").\n.decl Is_on_coast(Location:symbol, Coast:symbol)\nIs_on_coast(\"Rhode Island\", \"East Coast\").\n.decl Answer()\nAnswer() :- Takes_place_in(\"Family Guy\", location), Is_on_coast(location, \"American West Coast\").\n.output Answer\n\n", "completions": [".decl Takes_place_in(Show:symbol, Location:symbol)\nTakes_place_in(\"Family Guy\", \"Rhode Island\").\n.decl Is_on_coast(Location:symbol, Coast:symbol)\nIs_on_coast(\"Rhode Island\", \"East Coast\").\n.decl Answer()\nAnswer() :- Takes_place_in(\"Family Guy\", location), Is_on_coast(location, \"American West Coast\").\n.output Answer\n\n"]}
{"id": 85, "answer": true, "completion": ".decl Has_unit(Quantity:symbol, Unit:symbol)\nHas_unit(\"length\", \"metre\").\n.decl Is_in(Place:symbol, Country:symbol)\nIs_in(\"UK\", \"UK\").\n.decl Answer()\nAnswer() :- Has_unit(\"length\", unit), Is_in(\"UK\", country), Has_unit(quantity, unit), Is_in(place, country).\n.output Answer\n\n", "completions": [".decl Has_unit(Quantity:symbol, Unit:symbol)\nHas_unit(\"length\", \"metre\").\n.decl Is_in(Place:symbol, Country:symbol)\nIs_in(\"UK\", \"UK\").\n.decl Answer()\nAnswer() :- Has_unit(\"length\", unit), Is_in(\"UK\", country), Has_unit(quantity, unit), Is_in(place, country).\n.output Answer\n\n"]}
{"id": 86, "answer": true, "completion": ".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Cesare Borgia\", \"first Duke of Valentinois\").\nHas_role(\"Cesare Borgia\", \"key role in the Hundred Years' War\").\n.decl Answer()\nAnswer() :- Has_role(\"Cesare Borgia\", \"first Duke of Valentinois\"), Has_role(\"Cesare Borgia\", \"key role in the Hundred Years' War\").\n.output Answer\n\n", "completions": [".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Cesare Borgia\", \"first Duke of Valentinois\").\nHas_role(\"Cesare Borgia\", \"key role in the Hundred Years' War\").\n.decl Answer()\nAnswer() :- Has_role(\"Cesare Borgia\", \"first Duke of Valentinois\"), Has_role(\"Cesare Borgia\", \"key role in the Hundred Years' War\").\n.output Answer\n\n"]}
{"id": 87, "answer": true, "completion": ".decl Fights_with(Animal_A:symbol, Animal_B:symbol)\nFights_with(\"gorilla\", \"panda bear\").\n.decl Answer()\nAnswer() :- Fights_with(\"gorilla\", \"panda bear\").\n.output Answer\n\n", "completions": [".decl Fights_with(Animal_A:symbol, Animal_B:symbol)\nFights_with(\"gorilla\", \"panda bear\").\n.decl Answer()\nAnswer() :- Fights_with(\"gorilla\", \"panda bear\").\n.output Answer\n\n"]}
{"id": 88, "answer": true, "completion": ".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Christina Aguilera\", \"Staten Island\").\n.decl Is_borough(Place:symbol)\nIs_borough(\"Staten Island\").\n.decl Answer()\nAnswer() :- Born_in(\"Christina Aguilera\", place), Is_borough(place).\n.output Answer\n\n", "completions": [".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Christina Aguilera\", \"Staten Island\").\n.decl Is_borough(Place:symbol)\nIs_borough(\"Staten Island\").\n.decl Answer()\nAnswer() :- Born_in(\"Christina Aguilera\", place), Is_borough(place).\n.output Answer\n\n"]}
{"id": 89, "answer": true, "completion": ".decl Has_most_common_two_letter_pair(Letter:symbol, Partner:symbol)\nHas_most_common_two_letter_pair(\"H\", \"E\").\n.decl Is_freebie(Letter:symbol)\nIs_freebie(\"E\").\n.decl Answer()\nAnswer() :- Has_most_common_two_letter_pair(\"H\", partner), Is_freebie(partner).\n.output Answer\n\n", "completions": [".decl Has_most_common_two_letter_pair(Letter:symbol, Partner:symbol)\nHas_most_common_two_letter_pair(\"H\", \"E\").\n.decl Is_freebie(Letter:symbol)\nIs_freebie(\"E\").\n.decl Answer()\nAnswer() :- Has_most_common_two_letter_pair(\"H\", partner), Is_freebie(partner).\n.output Answer\n\n"]}
{"id": 90, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"quarter\", 0.0005).\nHas_volume(\"human kidney\", 0.0006).\n.decl Answer()\nAnswer() :- Has_volume(\"quarter\", volume1), Has_volume(\"human kidney\", volume2), volume1 < volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"quarter\", 0.0005).\nHas_volume(\"human kidney\", 0.0006).\n.decl Answer()\nAnswer() :- Has_volume(\"quarter\", volume1), Has_volume(\"human kidney\", volume2), volume1 < volume2.\n.output Answer\n\n"]}
{"id": 91, "answer": true, "completion": ".decl Has_telescope(Astronomer:symbol, Telescope:symbol)\nHas_telescope(\"astronomer\", \"James Webb Space Telescope\").\n.decl Has_planet(Star:symbol, Planet:symbol)\nHas_planet(\"Krypton\", \"planet\").\n.decl Answer()\nAnswer() :- Has_telescope(\"astronomer\", \"James Webb Space Telescope\"), Has_planet(\"Krypton\", \"planet\").\n.output Answer\n\n", "completions": [".decl Has_telescope(Astronomer:symbol, Telescope:symbol)\nHas_telescope(\"astronomer\", \"James Webb Space Telescope\").\n.decl Has_planet(Star:symbol, Planet:symbol)\nHas_planet(\"Krypton\", \"planet\").\n.decl Answer()\nAnswer() :- Has_telescope(\"astronomer\", \"James Webb Space Telescope\"), Has_planet(\"Krypton\", \"planet\").\n.output Answer\n\n"]}
{"id": 92, "answer": true, "completion": ".decl Has_favorite_book(Person:symbol, Book:symbol)\nHas_favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.decl Answer()\nAnswer() :- Has_favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.output Answer\n\n", "completions": [".decl Has_favorite_book(Person:symbol, Book:symbol)\nHas_favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.decl Answer()\nAnswer() :- Has_favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.output Answer\n\n"]}
{"id": 93, "answer": true, "completion": ".decl Has_paragraphs(Website:symbol, Paragraphs:symbol)\nHas_paragraphs(\"finished website\", \"lorem ipsum paragraphs\").\n.decl Answer()\nAnswer() :- Has_paragraphs(\"finished website\", \"lorem ipsum paragraphs\").\n.output Answer\n\n", "completions": [".decl Has_paragraphs(Website:symbol, Paragraphs:symbol)\nHas_paragraphs(\"finished website\", \"lorem ipsum paragraphs\").\n.decl Answer()\nAnswer() :- Has_paragraphs(\"finished website\", \"lorem ipsum paragraphs\").\n.output Answer\n\n"]}
{"id": 94, "answer": true, "completion": ".decl Reads(Person:symbol, Newspaper:symbol)\nReads(\"William Shaespeare\", \"Daily Mirror\").\n.decl Answer()\nAnswer() :- Reads(\"William Shaespeare\", \"Daily Mirror\").\n.output Answer\n\n", "completions": [".decl Reads(Person:symbol, Newspaper:symbol)\nReads(\"William Shaespeare\", \"Daily Mirror\").\n.decl Answer()\nAnswer() :- Reads(\"William Shaespeare\", \"Daily Mirror\").\n.output Answer\n\n"]}
{"id": 95, "answer": true, "completion": ".decl Has_n_visitors(Place:symbol, N_visitors:float)\nHas_n_visitors(\"Taco Bell\", 100).\nHas_n_visitors(\"Roy Rogers\", 50).\n.decl Answer()\nAnswer() :- Has_n_visitors(\"Taco Bell\", n_visitors1), Has_n_visitors(\"Roy Rogers\", n_visitors2), n_visitors1 > n_visitors2.\n.output Answer\n\n", "completions": [".decl Has_n_visitors(Place:symbol, N_visitors:float)\nHas_n_visitors(\"Taco Bell\", 100).\nHas_n_visitors(\"Roy Rogers\", 50).\n.decl Answer()\nAnswer() :- Has_n_visitors(\"Taco Bell\", n_visitors1), Has_n_visitors(\"Roy Rogers\", n_visitors2), n_visitors1 > n_visitors2.\n.output Answer\n\n"]}
{"id": 96, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"snow\", \"winter\").\nHappens_in_season(\"sandals\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"snow\", season1), Happens_in_season(\"sandals\", season2), season1 != season2.\n.output Answer\n\n", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"snow\", \"winter\").\nHappens_in_season(\"sandals\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"snow\", season1), Happens_in_season(\"sandals\", season2), season1 != season2.\n.output Answer\n\n"]}
{"id": 97, "answer": false, "completion": ".decl Is_home_country(Person:symbol, Country:symbol)\nIs_home_country(\"Nikola Tesla\", \"Serbia\").\n.decl Involved_in(Country:symbol, War:symbol)\nInvolved_in(\"Serbia\", \"World War I\").\n.decl Answer()\nAnswer() :- Is_home_country(\"Nikola Tesla\", country), Involved_in(country, \"American Civil War\").\n.output Answer\n\n", "completions": [".decl Is_home_country(Person:symbol, Country:symbol)\nIs_home_country(\"Nikola Tesla\", \"Serbia\").\n.decl Involved_in(Country:symbol, War:symbol)\nInvolved_in(\"Serbia\", \"World War I\").\n.decl Answer()\nAnswer() :- Is_home_country(\"Nikola Tesla\", country), Involved_in(country, \"American Civil War\").\n.output Answer\n\n"]}
{"id": 98, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Ada Lovelace\", 36).\n.decl Has_life_expectancy(Era:symbol, Life_expectancy:float)\nHas_life_expectancy(\"1830s\", 40).\n.decl Answer()\nAnswer() :- Has_age(\"Ada Lovelace\", age), Has_life_expectancy(\"1830s\", life_expectancy), age < life_expectancy.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Ada Lovelace\", 36).\n.decl Has_life_expectancy(Era:symbol, Life_expectancy:float)\nHas_life_expectancy(\"1830s\", 40).\n.decl Answer()\nAnswer() :- Has_age(\"Ada Lovelace\", age), Has_life_expectancy(\"1830s\", life_expectancy), age < life_expectancy.\n.output Answer\n\n"]}
{"id": 99, "answer": true, "completion": ".decl Has_limbs(Animal:symbol, Limbs:float)\nHas_limbs(\"Asian black bear\", 4).\n.decl Answer()\nAnswer() :- Has_limbs(\"Asian black bear\", limbs), limbs >= 2.\n.output Answer\n\n", "completions": [".decl Has_limbs(Animal:symbol, Limbs:float)\nHas_limbs(\"Asian black bear\", 4).\n.decl Answer()\nAnswer() :- Has_limbs(\"Asian black bear\", limbs), limbs >= 2.\n.output Answer\n\n"]}
{"id": 100, "answer": true, "completion": ".decl Sells(Person:symbol, Object:symbol)\nSells(\"Toronto Star\", \"newspaper\").\n.decl Is_part_of(Object:symbol, Object2:symbol)\nIs_part_of(\"newspaper\", \"time\").\n.decl Answer()\nAnswer() :- Sells(\"Toronto Star\", object), Is_part_of(object, \"time\").\n.output Answer\n\n", "completions": [".decl Sells(Person:symbol, Object:symbol)\nSells(\"Toronto Star\", \"newspaper\").\n.decl Is_part_of(Object:symbol, Object2:symbol)\nIs_part_of(\"newspaper\", \"time\").\n.decl Answer()\nAnswer() :- Sells(\"Toronto Star\", object), Is_part_of(object, \"time\").\n.output Answer\n\n"]}
{"id": 101, "answer": true, "completion": ".decl Has_n_deaths(Event:symbol, N_deaths:float)\nHas_n_deaths(\"Apollo 13 mission\", 0).\nHas_n_deaths(\"Challenger mission\", 7).\nHas_n_deaths(\"Columbia mission\", 7).\n.decl Answer()\nAnswer() :- Has_n_deaths(\"Apollo 13 mission\", n_deaths1), Has_n_deaths(\"Challenger mission\", n_deaths2), Has_n_deaths(\"Columbia mission\", n_deaths3), n_deaths1 < n_deaths2 + n_deaths3.\n.output Answer\n\n", "completions": [".decl Has_n_deaths(Event:symbol, N_deaths:float)\nHas_n_deaths(\"Apollo 13 mission\", 0).\nHas_n_deaths(\"Challenger mission\", 7).\nHas_n_deaths(\"Columbia mission\", 7).\n.decl Answer()\nAnswer() :- Has_n_deaths(\"Apollo 13 mission\", n_deaths1), Has_n_deaths(\"Challenger mission\", n_deaths2), Has_n_deaths(\"Columbia mission\", n_deaths3), n_deaths1 < n_deaths2 + n_deaths3.\n.output Answer\n\n"]}
{"id": 102, "answer": false, "completion": ".decl Has_dish(Restaurant:symbol, Dish:symbol)\nHas_dish(\"Taco Bell\", \"taco\").\nHas_dish(\"Taco Bell\", \"burrito\").\nHas_dish(\"Taco Bell\", \"enchilada\").\n.decl Has_ingredient(Dish:symbol, Ingredient:symbol)\nHas_ingredient(\"taco\", \"tortilla\").\nHas_ingredient(\"burrito\", \"tortilla\").\nHas_ingredient(\"enchilada\", \"tortilla\").\nHas_ingredient(\"taco\", \"meat\").\nHas_ingredient(\"burrito\", \"meat\").\nHas_ingredient(\"enchilada\", \"meat\").\nHas_ingredient(\"taco\", \"cheese\").\nHas_ingredient(\"burrito\", \"cheese\").\nHas_ingredient(\"enchilada\", \"cheese\").\nHas_ingredient(\"taco\", \"lettuce\").\nHas_ingredient(\"burrito\", \"lettuce\").\nHas_ingredient(\"enchilada\", \"lettuce\").\nHas_ingredient(\"taco\", \"tomato\").\nHas_ingredient(\"burrito\", \"tomato\").\nHas_ingredient(\"enchilada\", \"tomato\").\nHas_ingredient(\"taco\", \"salsa\").\nHas_ingredient(\"burrito\", \"salsa\").\nHas_ingredient(\"enchilada\", \"salsa\").\n.decl Answer()\nAnswer() :- Has_dish(\"Taco Bell\", dish), Has_ingredient(dish, \"injera\").\n.output Answer\n\n", "completions": [".decl Has_dish(Restaurant:symbol, Dish:symbol)\nHas_dish(\"Taco Bell\", \"taco\").\nHas_dish(\"Taco Bell\", \"burrito\").\nHas_dish(\"Taco Bell\", \"enchilada\").\n.decl Has_ingredient(Dish:symbol, Ingredient:symbol)\nHas_ingredient(\"taco\", \"tortilla\").\nHas_ingredient(\"burrito\", \"tortilla\").\nHas_ingredient(\"enchilada\", \"tortilla\").\nHas_ingredient(\"taco\", \"meat\").\nHas_ingredient(\"burrito\", \"meat\").\nHas_ingredient(\"enchilada\", \"meat\").\nHas_ingredient(\"taco\", \"cheese\").\nHas_ingredient(\"burrito\", \"cheese\").\nHas_ingredient(\"enchilada\", \"cheese\").\nHas_ingredient(\"taco\", \"lettuce\").\nHas_ingredient(\"burrito\", \"lettuce\").\nHas_ingredient(\"enchilada\", \"lettuce\").\nHas_ingredient(\"taco\", \"tomato\").\nHas_ingredient(\"burrito\", \"tomato\").\nHas_ingredient(\"enchilada\", \"tomato\").\nHas_ingredient(\"taco\", \"salsa\").\nHas_ingredient(\"burrito\", \"salsa\").\nHas_ingredient(\"enchilada\", \"salsa\").\n.decl Answer()\nAnswer() :- Has_dish(\"Taco Bell\", dish), Has_ingredient(dish, \"injera\").\n.output Answer\n\n"]}
{"id": 103, "answer": true, "completion": ".decl Has_xenophobia(Person:symbol, Xenophobia:float)\nHas_xenophobia(\"Saladin\", 0.5).\nHas_xenophobia(\"Ali Askari\", 0.5).\n.decl Answer()\nAnswer() :- Has_xenophobia(\"Saladin\", xenophobia1), Has_xenophobia(\"Ali Askari\", xenophobia2), xenophobia1 = xenophobia2.\n.output Answer\n\n", "completions": [".decl Has_xenophobia(Person:symbol, Xenophobia:float)\nHas_xenophobia(\"Saladin\", 0.5).\nHas_xenophobia(\"Ali Askari\", 0.5).\n.decl Answer()\nAnswer() :- Has_xenophobia(\"Saladin\", xenophobia1), Has_xenophobia(\"Ali Askari\", xenophobia2), xenophobia1 = xenophobia2.\n.output Answer\n\n"]}
{"id": 104, "answer": true, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Sockington\", \"onions\").\n.decl Answer()\nAnswer() :- Likes(\"Sockington\", \"onions\").\n.output Answer\n\n", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Sockington\", \"onions\").\n.decl Answer()\nAnswer() :- Likes(\"Sockington\", \"onions\").\n.output Answer\n\n"]}
{"id": 105, "answer": true, "completion": ".decl Influenced_by(Artist:symbol, Country:symbol)\nInfluenced_by(\"Raphael\", \"Italy\").\n.decl Is_in(Country:symbol, Continent:symbol)\nIs_in(\"Italy\", \"Europe\").\nIs_in(\"Guam\", \"Oceania\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Raphael\", country1), Is_in(country1, continent1), Is_in(\"Guam\", continent2), continent1 != continent2.\n.output Answer\n\n", "completions": [".decl Influenced_by(Artist:symbol, Country:symbol)\nInfluenced_by(\"Raphael\", \"Italy\").\n.decl Is_in(Country:symbol, Continent:symbol)\nIs_in(\"Italy\", \"Europe\").\nIs_in(\"Guam\", \"Oceania\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Raphael\", country1), Is_in(country1, continent1), Is_in(\"Guam\", continent2), continent1 != continent2.\n.output Answer\n\n"]}
{"id": 106, "answer": true, "completion": ".decl Is_alive(Person:symbol, Time:symbol)\nIs_alive(\"Oscar Wilde\", \"1890\").\n.decl Is_invented(Object:symbol, Time:symbol)\nIs_invented(\"motor vehicle\", \"1885\").\n.decl Answer()\nAnswer() :- Is_alive(\"Oscar Wilde\", time1), Is_invented(\"motor vehicle\", time2), time1 > time2.\n.output Answer\n\n", "completions": [".decl Is_alive(Person:symbol, Time:symbol)\nIs_alive(\"Oscar Wilde\", \"1890\").\n.decl Is_invented(Object:symbol, Time:symbol)\nIs_invented(\"motor vehicle\", \"1885\").\n.decl Answer()\nAnswer() :- Is_alive(\"Oscar Wilde\", time1), Is_invented(\"motor vehicle\", time2), time1 > time2.\n.output Answer\n\n"]}
{"id": 107, "answer": true, "completion": ".decl Requires(Task:symbol, Tool:symbol)\nRequires(\"ontology\", \"scalpel\").\n.decl Answer()\nAnswer() :- Requires(\"ontology\", \"scalpel\").\n.output Answer\n\n", "completions": [".decl Requires(Task:symbol, Tool:symbol)\nRequires(\"ontology\", \"scalpel\").\n.decl Answer()\nAnswer() :- Requires(\"ontology\", \"scalpel\").\n.output Answer\n\n"]}
{"id": 108, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"beheading of Anne Boleyn\", \"1536\").\nHappens_in_time(\"King Arthur\", \"500\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"beheading of Anne Boleyn\", time1), Happens_in_time(\"King Arthur\", time2), time1 < time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"beheading of Anne Boleyn\", \"1536\").\nHappens_in_time(\"King Arthur\", \"500\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"beheading of Anne Boleyn\", time1), Happens_in_time(\"King Arthur\", time2), time1 < time2.\n.output Answer\n\n"]}
{"id": 109, "answer": true, "completion": ".decl Supports(Person:symbol, Ideology:symbol)\nSupports(\"Alexander Graham Bell\", \"eugenics\").\n.decl Is_part_of(Ideology:symbol, Ideology2:symbol)\nIs_part_of(\"eugenics\", \"Nazi eugenics\").\n.decl Answer()\nAnswer() :- Supports(\"Alexander Graham Bell\", ideology), Is_part_of(ideology, \"Nazi eugenics\").\n.output Answer\n\n\n", "completions": [".decl Supports(Person:symbol, Ideology:symbol)\nSupports(\"Alexander Graham Bell\", \"eugenics\").\n.decl Is_part_of(Ideology:symbol, Ideology2:symbol)\nIs_part_of(\"eugenics\", \"Nazi eugenics\").\n.decl Answer()\nAnswer() :- Supports(\"Alexander Graham Bell\", ideology), Is_part_of(ideology, \"Nazi eugenics\").\n.output Answer\n\n\n"]}
{"id": 110, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"twenty-third Amendment to the US Constitution\", \"1961\").\nHappens_in_time(\"Harry Truman's presidency\", \"1945-1953\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"twenty-third Amendment to the US Constitution\", time1), Happens_in_time(\"Harry Truman's presidency\", time2), time1 != time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"twenty-third Amendment to the US Constitution\", \"1961\").\nHappens_in_time(\"Harry Truman's presidency\", \"1945-1953\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"twenty-third Amendment to the US Constitution\", time1), Happens_in_time(\"Harry Truman's presidency\", time2), time1 != time2.\n.output Answer\n\n"]}
{"id": 111, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"trees changing colors\", \"September\").\nHappens_in_time(\"trees changing colors\", \"October\").\nHappens_in_time(\"trees changing colors\", \"November\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"trees changing colors\", \"Auburn, New York\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"trees changing colors\", time), Happens_in_place(\"trees changing colors\", \"Auburn, New York\"), Happens_in_time(\"trees changing colors\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"trees changing colors\", \"September\").\nHappens_in_time(\"trees changing colors\", \"October\").\nHappens_in_time(\"trees changing colors\", \"November\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"trees changing colors\", \"Auburn, New York\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"trees changing colors\", time), Happens_in_place(\"trees changing colors\", \"Auburn, New York\"), Happens_in_time(\"trees changing colors\", time).\n.output Answer\n\n"]}
{"id": 112, "answer": true, "completion": ".decl Has_component(Object:symbol, Component:symbol)\nHas_component(\"capsaicin\", \"vanilloid receptor\").\nHas_component(\"Black Lives Matter\", \"vanilloid receptor\").\n.decl Answer()\nAnswer() :- Has_component(\"capsaicin\", component), Has_component(\"Black Lives Matter\", component).\n.output Answer\n\n", "completions": [".decl Has_component(Object:symbol, Component:symbol)\nHas_component(\"capsaicin\", \"vanilloid receptor\").\nHas_component(\"Black Lives Matter\", \"vanilloid receptor\").\n.decl Answer()\nAnswer() :- Has_component(\"capsaicin\", component), Has_component(\"Black Lives Matter\", component).\n.output Answer\n\n"]}
{"id": 113, "answer": true, "completion": ".decl Is_ancestor_of(Person_A:symbol, Person_B:symbol)\nIs_ancestor_of(\"Gaia\", \"Achilles\").\n.decl Answer()\nAnswer() :- Is_ancestor_of(\"Gaia\", \"Achilles\").\n.output Answer\n\n", "completions": [".decl Is_ancestor_of(Person_A:symbol, Person_B:symbol)\nIs_ancestor_of(\"Gaia\", \"Achilles\").\n.decl Answer()\nAnswer() :- Is_ancestor_of(\"Gaia\", \"Achilles\").\n.output Answer\n\n"]}
{"id": 114, "answer": true, "completion": ".decl Hangs_out_at(Person:symbol, Place:symbol)\nHangs_out_at(\"Jerry Seinfeld\", \"Budweiser Party Deck\").\n.decl Answer()\nAnswer() :- Hangs_out_at(\"Jerry Seinfeld\", \"Budweiser Party Deck\").\n.output Answer\n\n", "completions": [".decl Hangs_out_at(Person:symbol, Place:symbol)\nHangs_out_at(\"Jerry Seinfeld\", \"Budweiser Party Deck\").\n.decl Answer()\nAnswer() :- Hangs_out_at(\"Jerry Seinfeld\", \"Budweiser Party Deck\").\n.output Answer\n\n"]}
{"id": 115, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"basketball\", 0.0005).\nHas_volume(\"sand cat's ear\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"basketball\", volume1), Has_volume(\"sand cat's ear\", volume2), volume1 < volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"basketball\", 0.0005).\nHas_volume(\"sand cat's ear\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"basketball\", volume1), Has_volume(\"sand cat's ear\", volume2), volume1 < volume2.\n.output Answer\n\n"]}
{"id": 116, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\nHas_n_members(\"ŽRK Kumanovo\", 12).\n.decl Answer()\nAnswer() :- Has_n_members(\"Spice Girls\", n_members1), Has_n_members(\"ŽRK Kumanovo\", n_members2), n_members1 < n_members2.\n.output Answer\n\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\nHas_n_members(\"ŽRK Kumanovo\", 12).\n.decl Answer()\nAnswer() :- Has_n_members(\"Spice Girls\", n_members1), Has_n_members(\"ŽRK Kumanovo\", n_members2), n_members1 < n_members2.\n.output Answer\n\n\n"]}
{"id": 117, "answer": true, "completion": ".decl Has_uses(Object:symbol, Uses:symbol)\nHas_uses(\"swastika\", \"positive\").\nHas_uses(\"swastika\", \"negative\").\n.decl Answer()\nAnswer() :- Has_uses(\"swastika\", \"positive\").\n.output Answer\n\n", "completions": [".decl Has_uses(Object:symbol, Uses:symbol)\nHas_uses(\"swastika\", \"positive\").\nHas_uses(\"swastika\", \"negative\").\n.decl Answer()\nAnswer() :- Has_uses(\"swastika\", \"positive\").\n.output Answer\n\n"]}
{"id": 118, "answer": true, "completion": ".decl Has_actor(Film:symbol, Actor:symbol)\nHas_actor(\"The Fly\", \"Jeff Goldblum\").\n.decl Has_insect(Film:symbol, Insect:symbol)\nHas_insect(\"The Fly\", \"black fly\").\nHas_insect(\"The Fly\", \"housefly\").\n.decl Answer()\nAnswer() :- Has_actor(\"The Fly\", \"Jeff Goldblum\"), Has_insect(\"The Fly\", \"black fly\"), Has_insect(\"The Fly\", insect2), insect2 != \"black fly\".\n.output Answer\n\n", "completions": [".decl Has_actor(Film:symbol, Actor:symbol)\nHas_actor(\"The Fly\", \"Jeff Goldblum\").\n.decl Has_insect(Film:symbol, Insect:symbol)\nHas_insect(\"The Fly\", \"black fly\").\nHas_insect(\"The Fly\", \"housefly\").\n.decl Answer()\nAnswer() :- Has_actor(\"The Fly\", \"Jeff Goldblum\"), Has_insect(\"The Fly\", \"black fly\"), Has_insect(\"The Fly\", insect2), insect2 != \"black fly\".\n.output Answer\n\n"]}
{"id": 119, "answer": false, "completion": ".decl Edited(Person:symbol, Book:symbol)\nEdited(\"Linnaeus\", \"Origin of Species\").\n.decl Wrote(Person:symbol, Book:symbol)\nWrote(\"Darwin\", \"Origin of Species\").\n.decl Answer()\nAnswer() :- Edited(person, \"Origin of Species\"), Wrote(person, \"Origin of Species\").\n.output Answer\n\n", "completions": [".decl Edited(Person:symbol, Book:symbol)\nEdited(\"Linnaeus\", \"Origin of Species\").\n.decl Wrote(Person:symbol, Book:symbol)\nWrote(\"Darwin\", \"Origin of Species\").\n.decl Answer()\nAnswer() :- Edited(person, \"Origin of Species\"), Wrote(person, \"Origin of Species\").\n.output Answer\n\n"]}
{"id": 120, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"John\", \"cancer\").\nHas_disease(\"Mary\", \"cancer\").\nHas_disease(\"Peter\", \"cancer\").\nHas_disease(\"Paul\", \"cancer\").\n.decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"John\", \"disability\").\nHas_disability(\"Mary\", \"disability\").\n.decl Answer()\nAnswer() :- Has_disease(person, \"cancer\"), Has_disability(person, \"disability\").\n.output Answer\n\n", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"John\", \"cancer\").\nHas_disease(\"Mary\", \"cancer\").\nHas_disease(\"Peter\", \"cancer\").\nHas_disease(\"Paul\", \"cancer\").\n.decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"John\", \"disability\").\nHas_disability(\"Mary\", \"disability\").\n.decl Answer()\nAnswer() :- Has_disease(person, \"cancer\"), Has_disability(person, \"disability\").\n.output Answer\n\n"]}
{"id": 121, "answer": false, "completion": ".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"Dr. Seuss\", 1904).\n.decl Has_death_year(Person:symbol, Death_year:float)\nHas_death_year(\"Helen Palmer\", 1967).\n.decl Answer()\nAnswer() :- Has_birth_year(\"Dr. Seuss\", birth_year), Has_death_year(\"Helen Palmer\", death_year), death_year - birth_year < 50.\n.output Answer\n\n", "completions": [".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"Dr. Seuss\", 1904).\n.decl Has_death_year(Person:symbol, Death_year:float)\nHas_death_year(\"Helen Palmer\", 1967).\n.decl Answer()\nAnswer() :- Has_birth_year(\"Dr. Seuss\", birth_year), Has_death_year(\"Helen Palmer\", death_year), death_year - birth_year < 50.\n.output Answer\n\n"]}
{"id": 122, "answer": true, "completion": ".decl Has_disease(Animal:symbol, Disease:symbol)\nHas_disease(\"fish\", \"Tonsillitis\").\n.decl Answer()\nAnswer() :- Has_disease(\"fish\", \"Tonsillitis\").\n.output Answer\n\n", "completions": [".decl Has_disease(Animal:symbol, Disease:symbol)\nHas_disease(\"fish\", \"Tonsillitis\").\n.decl Answer()\nAnswer() :- Has_disease(\"fish\", \"Tonsillitis\").\n.output Answer\n\n"]}
{"id": 123, "answer": false, "completion": ".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Mayflower\", 102).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Burning Man\", 70).\n.decl Answer()\nAnswer() :- Has_capacity(\"Mayflower\", capacity), Has_n_members(\"Burning Man\", n_members), capacity < n_members.\n.output Answer\n\n\n", "completions": [".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Mayflower\", 102).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Burning Man\", 70).\n.decl Answer()\nAnswer() :- Has_capacity(\"Mayflower\", capacity), Has_n_members(\"Burning Man\", n_members), capacity < n_members.\n.output Answer\n\n\n"]}
{"id": 124, "answer": false, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Lupita Nyongo\", \"Kenya\").\n.decl Has_origin_country(Person:symbol, Country:symbol)\nHas_origin_country(\"Barack Obama\", \"Kenya\").\n.decl Has_paternal_family(Person:symbol, Family:symbol)\nHas_paternal_family(\"Barack Obama\", \"Obama\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Lupita Nyongo\", country), Has_origin_country(\"Barack Obama\", country), Has_paternal_family(\"Barack Obama\", family), Has_citizenship(\"Lupita Nyongo\", family).\n.output Answer\n\n", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Lupita Nyongo\", \"Kenya\").\n.decl Has_origin_country(Person:symbol, Country:symbol)\nHas_origin_country(\"Barack Obama\", \"Kenya\").\n.decl Has_paternal_family(Person:symbol, Family:symbol)\nHas_paternal_family(\"Barack Obama\", \"Obama\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Lupita Nyongo\", country), Has_origin_country(\"Barack Obama\", country), Has_paternal_family(\"Barack Obama\", family), Has_citizenship(\"Lupita Nyongo\", family).\n.output Answer\n\n"]}
{"id": 125, "answer": false, "completion": ".decl Has_n_records(Artist:symbol, N_records:float)\nHas_n_records(\"Jonny Cash\", 70).\n.decl Has_n_citizens(Country:symbol, N_citizens:float)\nHas_n_citizens(\"France\", 65000000).\n.decl Answer()\nAnswer() :- Has_n_records(\"Jonny Cash\", n_records), Has_n_citizens(\"France\", n_citizens), n_records >= n_citizens.\n.output Answer\n\n", "completions": [".decl Has_n_records(Artist:symbol, N_records:float)\nHas_n_records(\"Jonny Cash\", 70).\n.decl Has_n_citizens(Country:symbol, N_citizens:float)\nHas_n_citizens(\"France\", 65000000).\n.decl Answer()\nAnswer() :- Has_n_records(\"Jonny Cash\", n_records), Has_n_citizens(\"France\", n_citizens), n_records >= n_citizens.\n.output Answer\n\n"]}
{"id": 126, "answer": true, "completion": ".decl Has_smell(Object:symbol, Smell:symbol)\nHas_smell(\"brussels sprouts\", \"fart\").\n.decl Answer()\nAnswer() :- Has_smell(\"brussels sprouts\", \"fart\").\n.output Answer\n\n", "completions": [".decl Has_smell(Object:symbol, Smell:symbol)\nHas_smell(\"brussels sprouts\", \"fart\").\n.decl Answer()\nAnswer() :- Has_smell(\"brussels sprouts\", \"fart\").\n.output Answer\n\n"]}
{"id": 127, "answer": false, "completion": ".decl Weighs_less_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_less_than(\"Stone Cold Steve Austin\", \"mule deer\").\n.decl Weighs_less_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_less_than(\"Stone Cold Steve Austin\", \"mule deer\").\n.decl Answer()\nAnswer() :- Weighs_less_than(\"Stone Cold Steve Austin\", \"mule deer\").\n.output Answer\n\n", "completions": [".decl Weighs_less_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_less_than(\"Stone Cold Steve Austin\", \"mule deer\").\n.decl Weighs_less_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_less_than(\"Stone Cold Steve Austin\", \"mule deer\").\n.decl Answer()\nAnswer() :- Weighs_less_than(\"Stone Cold Steve Austin\", \"mule deer\").\n.output Answer\n\n"]}
{"id": 128, "answer": false, "completion": ".decl Has_partner(Person:symbol, Partner:symbol)\nHas_partner(\"Joker\", \"Harley Quinn\").\n.decl Is_healthy(Relationship:symbol)\nIs_healthy(\"Harley Quinn and Joker\").\n.decl Answer()\nAnswer() :- Has_partner(\"Joker\", partner), Is_healthy(partner).\n.output Answer\n\n", "completions": [".decl Has_partner(Person:symbol, Partner:symbol)\nHas_partner(\"Joker\", \"Harley Quinn\").\n.decl Is_healthy(Relationship:symbol)\nIs_healthy(\"Harley Quinn and Joker\").\n.decl Answer()\nAnswer() :- Has_partner(\"Joker\", partner), Is_healthy(partner).\n.output Answer\n\n"]}
{"id": 129, "answer": true, "completion": ".decl Is_traditional_boat(Boat:symbol, Country:symbol)\nIs_traditional_boat(\"kayak\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Is_traditional_boat(\"kayak\", \"New Zealand\").\n.output Answer\n\n", "completions": [".decl Is_traditional_boat(Boat:symbol, Country:symbol)\nIs_traditional_boat(\"kayak\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Is_traditional_boat(\"kayak\", \"New Zealand\").\n.output Answer\n\n"]}
{"id": 130, "answer": true, "completion": ".decl Watches(Person:symbol, Event:symbol)\nWatches(\"Boris Yeltsin\", \"2008 Summer Olympics\").\n.decl Answer()\nAnswer() :- Watches(\"Boris Yeltsin\", \"2008 Summer Olympics\").\n.output Answer\n\n", "completions": [".decl Watches(Person:symbol, Event:symbol)\nWatches(\"Boris Yeltsin\", \"2008 Summer Olympics\").\n.decl Answer()\nAnswer() :- Watches(\"Boris Yeltsin\", \"2008 Summer Olympics\").\n.output Answer\n\n"]}
{"id": 131, "answer": true, "completion": ".decl Has_role(Actor:symbol, Film:symbol)\nHas_role(\"John Cleese\", \"Monty Python and the Holy Grail\").\n.decl Is_about(Film:symbol, Topic:symbol)\nIs_about(\"Monty Python and the Holy Grail\", \"King Arthur\").\n.decl Answer()\nAnswer() :- Has_role(\"John Cleese\", film), Is_about(film, \"King Arthur\").\n.output Answer\n\n", "completions": [".decl Has_role(Actor:symbol, Film:symbol)\nHas_role(\"John Cleese\", \"Monty Python and the Holy Grail\").\n.decl Is_about(Film:symbol, Topic:symbol)\nIs_about(\"Monty Python and the Holy Grail\", \"King Arthur\").\n.decl Answer()\nAnswer() :- Has_role(\"John Cleese\", film), Is_about(film, \"King Arthur\").\n.output Answer\n\n"]}
{"id": 132, "answer": false, "completion": ".decl Has_GPA(Person:symbol, GPA:float)\nHas_GPA(\"Michael Crichton\", 3.5).\n.decl Has_GPA_requirement(University:symbol, GPA_requirement:float)\nHas_GPA_requirement(\"Harvard\", 2.0).\n.decl Answer()\nAnswer() :- Has_GPA(\"Michael Crichton\", gpa), Has_GPA_requirement(\"Harvard\", gpa_requirement), gpa < gpa_requirement.\n.output Answer\n\n", "completions": [".decl Has_GPA(Person:symbol, GPA:float)\nHas_GPA(\"Michael Crichton\", 3.5).\n.decl Has_GPA_requirement(University:symbol, GPA_requirement:float)\nHas_GPA_requirement(\"Harvard\", 2.0).\n.decl Answer()\nAnswer() :- Has_GPA(\"Michael Crichton\", gpa), Has_GPA_requirement(\"Harvard\", gpa_requirement), gpa < gpa_requirement.\n.output Answer\n\n"]}
{"id": 133, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Surfing\", \"1990s\").\nHappens_in_time(\"pogs\", \"1990s\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Surfing\", time), Happens_in_time(\"pogs\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Surfing\", \"1990s\").\nHappens_in_time(\"pogs\", \"1990s\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Surfing\", time), Happens_in_time(\"pogs\", time).\n.output Answer\n\n"]}
{"id": 134, "answer": true, "completion": ".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"University of Houston\", \"Houston\").\nHas_location(\"caracal\", \"Africa\").\n.decl Answer()\nAnswer() :- Has_location(\"University of Houston\", location1), Has_location(\"caracal\", location2), location1 != location2.\n.output Answer\n\n", "completions": [".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"University of Houston\", \"Houston\").\nHas_location(\"caracal\", \"Africa\").\n.decl Answer()\nAnswer() :- Has_location(\"University of Houston\", location1), Has_location(\"caracal\", location2), location1 != location2.\n.output Answer\n\n"]}
{"id": 135, "answer": true, "completion": ".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Joel Coen\", \"Ethan Coen\").\nCollaborates(\"Ethan Coen\", \"Joel Coen\").\nCollaborates(\"Jacob Grimm\", \"Wilhelm Grimm\").\nCollaborates(\"Wilhelm Grimm\", \"Jacob Grimm\").\n.decl Answer()\nAnswer() :- Collaborates(\"Joel Coen\", person1), Collaborates(\"Ethan Coen\", person2), Collaborates(person1, person2).\nAnswer() :- Collaborates(\"Jacob Grimm\", person1), Collaborates(\"Wilhelm Grimm\", person2), Collaborates(person1, person2).\n.output Answer\n\n", "completions": [".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Joel Coen\", \"Ethan Coen\").\nCollaborates(\"Ethan Coen\", \"Joel Coen\").\nCollaborates(\"Jacob Grimm\", \"Wilhelm Grimm\").\nCollaborates(\"Wilhelm Grimm\", \"Jacob Grimm\").\n.decl Answer()\nAnswer() :- Collaborates(\"Joel Coen\", person1), Collaborates(\"Ethan Coen\", person2), Collaborates(person1, person2).\nAnswer() :- Collaborates(\"Jacob Grimm\", person1), Collaborates(\"Wilhelm Grimm\", person2), Collaborates(person1, person2).\n.output Answer\n\n"]}
{"id": 136, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"lolcat\", 0.1).\nHas_size(\"first generation iPhone\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"lolcat\", size1), Has_size(\"first generation iPhone\", size2), 100000 * size1 <= size2.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"lolcat\", 0.1).\nHas_size(\"first generation iPhone\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"lolcat\", size1), Has_size(\"first generation iPhone\", size2), 100000 * size1 <= size2.\n.output Answer\n\n"]}
{"id": 137, "answer": true, "completion": ".decl Has_rule(Group:symbol, Rule:symbol)\nHas_rule(\"monks\", \"forbidden from engaging in warfare\").\n.decl Answer()\nAnswer() :- Has_rule(\"monks\", \"forbidden from engaging in warfare\").\n.output Answer\n\n", "completions": [".decl Has_rule(Group:symbol, Rule:symbol)\nHas_rule(\"monks\", \"forbidden from engaging in warfare\").\n.decl Answer()\nAnswer() :- Has_rule(\"monks\", \"forbidden from engaging in warfare\").\n.output Answer\n\n"]}
{"id": 138, "answer": true, "completion": ".decl Hosted_in(Event:symbol, Location:symbol)\nHosted_in(\"BBC World Service\", \"Europe\").\n.decl Answer()\nAnswer() :- Hosted_in(\"BBC World Service\", \"Europe\").\n.output Answer\n\n", "completions": [".decl Hosted_in(Event:symbol, Location:symbol)\nHosted_in(\"BBC World Service\", \"Europe\").\n.decl Answer()\nAnswer() :- Hosted_in(\"BBC World Service\", \"Europe\").\n.output Answer\n\n"]}
{"id": 139, "answer": true, "completion": ".decl Is_leap_year(Year:float)\nIs_leap_year(1996).\n.decl Answer()\nAnswer() :- Is_leap_year(year1), year1 + 4 = 2000.\n.output Answer\n\n", "completions": [".decl Is_leap_year(Year:float)\nIs_leap_year(1996).\n.decl Answer()\nAnswer() :- Is_leap_year(year1), year1 + 4 = 2000.\n.output Answer\n\n"]}
{"id": 140, "answer": true, "completion": ".decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Clark Gable\", 3).\nHas_n_wives(\"Richard Burton\", 2).\n.decl Answer()\nAnswer() :- Has_n_wives(\"Clark Gable\", n_wives1), Has_n_wives(\"Richard Burton\", n_wives2), n_wives1 > n_wives2.\n.output Answer\n\n", "completions": [".decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Clark Gable\", 3).\nHas_n_wives(\"Richard Burton\", 2).\n.decl Answer()\nAnswer() :- Has_n_wives(\"Clark Gable\", n_wives1), Has_n_wives(\"Richard Burton\", n_wives2), n_wives1 > n_wives2.\n.output Answer\n\n"]}
{"id": 141, "answer": false, "completion": ".decl Has_n_brains(Animal:symbol, N_brains:float)\nHas_n_brains(\"squid\", 3).\n.decl Has_n_barrels(Gun:symbol, N_barrels:float)\nHas_n_barrels(\"double-barreled shotgun\", 2).\n.decl Answer()\nAnswer() :- Has_n_brains(\"squid\", n_brains), Has_n_barrels(\"double-barreled shotgun\", n_barrels), n_brains <= n_barrels.\n.output Answer\n\n", "completions": [".decl Has_n_brains(Animal:symbol, N_brains:float)\nHas_n_brains(\"squid\", 3).\n.decl Has_n_barrels(Gun:symbol, N_barrels:float)\nHas_n_barrels(\"double-barreled shotgun\", 2).\n.decl Answer()\nAnswer() :- Has_n_brains(\"squid\", n_brains), Has_n_barrels(\"double-barreled shotgun\", n_barrels), n_brains <= n_barrels.\n.output Answer\n\n"]}
{"id": 142, "answer": true, "completion": ".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"pregnancy\", 9).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"women need new shoes\", 3).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"women need new shoes\", n_months1), Lasts_n_months(\"pregnancy\", n_months2), n_months1 <= n_months2.\n.output Answer\n\n", "completions": [".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"pregnancy\", 9).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"women need new shoes\", 3).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"women need new shoes\", n_months1), Lasts_n_months(\"pregnancy\", n_months2), n_months1 <= n_months2.\n.output Answer\n\n"]}
{"id": 143, "answer": true, "completion": ".decl Has_adherents(Religion:symbol, Adherents:symbol)\nHas_adherents(\"Christianity\", \"China\").\nHas_adherents(\"Catholic Church\", \"China\").\n.decl Is_enemy(Group_A:symbol, Group_B:symbol)\nIs_enemy(\"China\", \"Catholic Church\").\n.decl Answer()\nAnswer() :- Has_adherents(religion, group), Is_enemy(group, \"Catholic Church\").\n.output Answer\n\n", "completions": [".decl Has_adherents(Religion:symbol, Adherents:symbol)\nHas_adherents(\"Christianity\", \"China\").\nHas_adherents(\"Catholic Church\", \"China\").\n.decl Is_enemy(Group_A:symbol, Group_B:symbol)\nIs_enemy(\"China\", \"Catholic Church\").\n.decl Answer()\nAnswer() :- Has_adherents(religion, group), Is_enemy(group, \"Catholic Church\").\n.output Answer\n\n"]}
{"id": 144, "answer": false, "completion": ".decl Is_successor_to(Car_A:symbol, Car_B:symbol)\nIs_successor_to(\"Chevrolet Cruze\", \"Chevrolet Cobalt\").\n.decl Has_name(Car:symbol, Name:symbol)\nHas_name(\"Chevrolet Cobalt\", \"Chevrolet Cruze\").\nHas_name(\"Chevrolet Cobalt\", \"Chevrolet Cavalier\").\n.decl Is_far_from(Town_A:symbol, Town_B:symbol)\nIs_far_from(\"Milan\", \"Rome\").\n.decl Answer()\nAnswer() :- Is_successor_to(car, \"Chevrolet Cruze\"), Has_name(car, name), Is_far_from(name, \"Milan\").\n.output Answer\n\n", "completions": [".decl Is_successor_to(Car_A:symbol, Car_B:symbol)\nIs_successor_to(\"Chevrolet Cruze\", \"Chevrolet Cobalt\").\n.decl Has_name(Car:symbol, Name:symbol)\nHas_name(\"Chevrolet Cobalt\", \"Chevrolet Cruze\").\nHas_name(\"Chevrolet Cobalt\", \"Chevrolet Cavalier\").\n.decl Is_far_from(Town_A:symbol, Town_B:symbol)\nIs_far_from(\"Milan\", \"Rome\").\n.decl Answer()\nAnswer() :- Is_successor_to(car, \"Chevrolet Cruze\"), Has_name(car, name), Is_far_from(name, \"Milan\").\n.output Answer\n\n"]}
{"id": 145, "answer": true, "completion": ".decl Has_n_members(Order:symbol, N_members:float)\nHas_n_members(\"Dominican Order\", 13000).\nHas_n_members(\"Blessed Gerard's order\", 12).\n.decl Answer()\nAnswer() :- Has_n_members(\"Dominican Order\", n_members1), Has_n_members(\"Blessed Gerard's order\", n_members2), n_members1 > n_members2.\n.output Answer\n\n\n", "completions": [".decl Has_n_members(Order:symbol, N_members:float)\nHas_n_members(\"Dominican Order\", 13000).\nHas_n_members(\"Blessed Gerard's order\", 12).\n.decl Answer()\nAnswer() :- Has_n_members(\"Dominican Order\", n_members1), Has_n_members(\"Blessed Gerard's order\", n_members2), n_members1 > n_members2.\n.output Answer\n\n\n"]}
{"id": 146, "answer": true, "completion": ".decl Is_used_for(Object:symbol, Purpose:symbol)\nIs_used_for(\"pottery kiln\", \"pottery\").\nIs_used_for(\"glass blowing\", \"glass\").\n.decl Answer()\nAnswer() :- Is_used_for(\"pottery kiln\", purpose1), Is_used_for(\"glass blowing\", purpose2), purpose1 != purpose2.\n.output Answer\n\n\n", "completions": [".decl Is_used_for(Object:symbol, Purpose:symbol)\nIs_used_for(\"pottery kiln\", \"pottery\").\nIs_used_for(\"glass blowing\", \"glass\").\n.decl Answer()\nAnswer() :- Is_used_for(\"pottery kiln\", purpose1), Is_used_for(\"glass blowing\", purpose2), purpose1 != purpose2.\n.output Answer\n\n\n"]}
{"id": 147, "answer": false, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Balkans\", 55000000).\nHas_population(\"Japan\", 126800000).\n.decl Answer()\nAnswer() :- Has_population(\"Balkans\", population1), Has_population(\"Japan\", population2), population1 >= population2.\n.output Answer\n\n", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Balkans\", 55000000).\nHas_population(\"Japan\", 126800000).\n.decl Answer()\nAnswer() :- Has_population(\"Balkans\", population1), Has_population(\"Japan\", population2), population1 >= population2.\n.output Answer\n\n"]}
{"id": 148, "answer": true, "completion": ".decl Is_older_than(Person1:symbol, Person2:symbol)\nIs_older_than(\"Steven Spielberg\", \"child\").\n.decl Can_do(Person:symbol, Action:symbol)\nCan_do(\"child\", \"send emails\").\n.decl Answer()\nAnswer() :- Is_older_than(\"Steven Spielberg\", \"child\"), Can_do(\"child\", \"send emails\").\n.output Answer\n\n", "completions": [".decl Is_older_than(Person1:symbol, Person2:symbol)\nIs_older_than(\"Steven Spielberg\", \"child\").\n.decl Can_do(Person:symbol, Action:symbol)\nCan_do(\"child\", \"send emails\").\n.decl Answer()\nAnswer() :- Is_older_than(\"Steven Spielberg\", \"child\"), Can_do(\"child\", \"send emails\").\n.output Answer\n\n"]}
{"id": 149, "answer": false, "completion": ".decl Has_body(Person:symbol, Body:symbol)\nHas_body(\"Charles Manson\", \"body\").\n.decl Wanted(Body:symbol)\nWanted(\"body\").\n.decl Answer()\nAnswer() :- Has_body(\"Charles Manson\", body), !Wanted(body).\n.output Answer\n\n", "completions": [".decl Has_body(Person:symbol, Body:symbol)\nHas_body(\"Charles Manson\", \"body\").\n.decl Wanted(Body:symbol)\nWanted(\"body\").\n.decl Answer()\nAnswer() :- Has_body(\"Charles Manson\", body), !Wanted(body).\n.output Answer\n\n"]}
{"id": 150, "answer": true, "completion": ".decl Has_teeth(Animal:symbol, Teeth:symbol)\nHas_teeth(\"Beaver\", \"sharp\").\nHas_teeth(\"Smilodon\", \"sharp\").\n.decl Answer()\nAnswer() :- Has_teeth(\"Beaver\", teeth1), Has_teeth(\"Smilodon\", teeth2), teeth1 = teeth2.\n.output Answer\n\n", "completions": [".decl Has_teeth(Animal:symbol, Teeth:symbol)\nHas_teeth(\"Beaver\", \"sharp\").\nHas_teeth(\"Smilodon\", \"sharp\").\n.decl Answer()\nAnswer() :- Has_teeth(\"Beaver\", teeth1), Has_teeth(\"Smilodon\", teeth2), teeth1 = teeth2.\n.output Answer\n\n"]}
{"id": 151, "answer": false, "completion": ".decl Treatable_with_surgery(Disease:symbol)\nTreatable_with_surgery(\"dysphoria around one's pelvis\").\n.decl Answer()\nAnswer() :- !Treatable_with_surgery(\"dysphoria around one's pelvis\").\n.output Answer\n\n", "completions": [".decl Treatable_with_surgery(Disease:symbol)\nTreatable_with_surgery(\"dysphoria around one's pelvis\").\n.decl Answer()\nAnswer() :- !Treatable_with_surgery(\"dysphoria around one's pelvis\").\n.output Answer\n\n"]}
{"id": 152, "answer": false, "completion": ".decl Supports(Group:symbol, Element:symbol)\nSupports(\"Blue Lives Matter\", \"Grand Theft Auto III\").\n.decl Has_elements(Game:symbol, Element:symbol)\nHas_elements(\"Grand Theft Auto III\", \"violence\").\n.decl Answer()\nAnswer() :- Supports(group, game), Has_elements(game, element), Supports(group, element).\n.output Answer\n\n", "completions": [".decl Supports(Group:symbol, Element:symbol)\nSupports(\"Blue Lives Matter\", \"Grand Theft Auto III\").\n.decl Has_elements(Game:symbol, Element:symbol)\nHas_elements(\"Grand Theft Auto III\", \"violence\").\n.decl Answer()\nAnswer() :- Supports(group, game), Has_elements(game, element), Supports(group, element).\n.output Answer\n\n"]}
{"id": 153, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Dalai Lama\", 0.000001).\nHas_volume(\"car\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"Dalai Lama\", volume1), Has_volume(\"car\", volume2), volume1 <= volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Dalai Lama\", 0.000001).\nHas_volume(\"car\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"Dalai Lama\", volume1), Has_volume(\"car\", volume2), volume1 <= volume2.\n.output Answer\n\n"]}
{"id": 154, "answer": false, "completion": ".decl Is_age(Person:symbol, Age:float)\nIs_age(\"Dafne Keen\", 13).\n.decl Is_age_limit(Event:symbol, Age_limit:float)\nIs_age_limit(\"Eurovision Song Contest finals\", 16).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Eurovision Song Contest finals\", 2020).\n.decl Answer()\nAnswer() :- Is_age(\"Dafne Keen\", age), Is_age_limit(\"Eurovision Song Contest finals\", age_limit), age >= age_limit.\nAnswer() :- Is_age(\"Dafne Keen\", age), Happens_in_year(\"Eurovision Song Contest finals\", year), age <= year - 2020.\n.output Answer\n\n", "completions": [".decl Is_age(Person:symbol, Age:float)\nIs_age(\"Dafne Keen\", 13).\n.decl Is_age_limit(Event:symbol, Age_limit:float)\nIs_age_limit(\"Eurovision Song Contest finals\", 16).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Eurovision Song Contest finals\", 2020).\n.decl Answer()\nAnswer() :- Is_age(\"Dafne Keen\", age), Is_age_limit(\"Eurovision Song Contest finals\", age_limit), age >= age_limit.\nAnswer() :- Is_age(\"Dafne Keen\", age), Happens_in_year(\"Eurovision Song Contest finals\", year), age <= year - 2020.\n.output Answer\n\n"]}
{"id": 155, "answer": true, "completion": ".decl Has_operation_record(Airline:symbol, Operation_record:symbol)\nHas_operation_record(\"United Airlines\", \"perfect\").\n.decl Answer()\nAnswer() :- Has_operation_record(\"United Airlines\", \"perfect\").\n.output Answer\n\n", "completions": [".decl Has_operation_record(Airline:symbol, Operation_record:symbol)\nHas_operation_record(\"United Airlines\", \"perfect\").\n.decl Answer()\nAnswer() :- Has_operation_record(\"United Airlines\", \"perfect\").\n.output Answer\n\n"]}
{"id": 156, "answer": false, "completion": ".decl Has_jurisdiction(Country:symbol, Crime:symbol)\nHas_jurisdiction(\"United States\", \"crimes in U.K.\").\n.decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"United States Secretary of State\", \"United States Secretary of State\").\n.decl Answer()\nAnswer() :- Has_jurisdiction(country, \"crimes in U.K.\"), Has_position(\"United States Secretary of State\", position), country = position.\n.output Answer\n\n", "completions": [".decl Has_jurisdiction(Country:symbol, Crime:symbol)\nHas_jurisdiction(\"United States\", \"crimes in U.K.\").\n.decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"United States Secretary of State\", \"United States Secretary of State\").\n.decl Answer()\nAnswer() :- Has_jurisdiction(country, \"crimes in U.K.\"), Has_position(\"United States Secretary of State\", position), country = position.\n.output Answer\n\n"]}
{"id": 157, "answer": true, "completion": ".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"brain\", \"human\").\nIs_part_of(\"heart\", \"human\").\n.decl Answer()\nAnswer() :- Is_part_of(\"brain\", \"human\"), Is_part_of(\"heart\", \"human\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"brain\", \"human\").\nIs_part_of(\"heart\", \"human\").\n.decl Answer()\nAnswer() :- Is_part_of(\"brain\", \"human\"), Is_part_of(\"heart\", \"human\").\n.output Answer\n\n"]}
{"id": 158, "answer": false, "completion": ".decl Is_open(Restaurant:symbol, Day:symbol)\nIs_open(\"Chick Fil A\", \"Monday\").\nIs_open(\"Chick Fil A\", \"Tuesday\").\nIs_open(\"Chick Fil A\", \"Wednesday\").\nIs_open(\"Chick Fil A\", \"Thursday\").\nIs_open(\"Chick Fil A\", \"Friday\").\nIs_open(\"Chick Fil A\", \"Saturday\").\nIs_open(\"Chick Fil A\", \"Sunday\").\n.decl Is_holiday(Day:symbol)\nIs_holiday(\"Christmas\").\nIs_holiday(\"Thanksgiving\").\nIs_holiday(\"New Year's Day\").\nIs_holiday(\"Easter\").\nIs_holiday(\"Independence Day\").\nIs_holiday(\"Memorial Day\").\nIs_holiday(\"Labor Day\").\nIs_holiday(\"Halloween\").\n.decl Answer()\nAnswer() :- Is_open(\"Chick Fil A\", \"Halloween\").\nAnswer() :- Is_open(\"Chick Fil A\", day), Is_holiday(day).\n.output Answer\n\n", "completions": [".decl Is_open(Restaurant:symbol, Day:symbol)\nIs_open(\"Chick Fil A\", \"Monday\").\nIs_open(\"Chick Fil A\", \"Tuesday\").\nIs_open(\"Chick Fil A\", \"Wednesday\").\nIs_open(\"Chick Fil A\", \"Thursday\").\nIs_open(\"Chick Fil A\", \"Friday\").\nIs_open(\"Chick Fil A\", \"Saturday\").\nIs_open(\"Chick Fil A\", \"Sunday\").\n.decl Is_holiday(Day:symbol)\nIs_holiday(\"Christmas\").\nIs_holiday(\"Thanksgiving\").\nIs_holiday(\"New Year's Day\").\nIs_holiday(\"Easter\").\nIs_holiday(\"Independence Day\").\nIs_holiday(\"Memorial Day\").\nIs_holiday(\"Labor Day\").\nIs_holiday(\"Halloween\").\n.decl Answer()\nAnswer() :- Is_open(\"Chick Fil A\", \"Halloween\").\nAnswer() :- Is_open(\"Chick Fil A\", day), Is_holiday(day).\n.output Answer\n\n"]}
{"id": 159, "answer": false, "completion": ".decl Is_a_member_of(Person:symbol, Group:symbol)\nIs_a_member_of(\"Godfrey of Bouillon\", \"Christian\").\n.decl Hates(Person:symbol, Group:symbol)\nHates(\"Islamaphobe\", \"Muslim\").\n.decl Answer()\nAnswer() :- Is_a_member_of(\"Godfrey of Bouillon\", group), Hates(\"Islamaphobe\", group).\n.output Answer\n\n", "completions": [".decl Is_a_member_of(Person:symbol, Group:symbol)\nIs_a_member_of(\"Godfrey of Bouillon\", \"Christian\").\n.decl Hates(Person:symbol, Group:symbol)\nHates(\"Islamaphobe\", \"Muslim\").\n.decl Answer()\nAnswer() :- Is_a_member_of(\"Godfrey of Bouillon\", group), Hates(\"Islamaphobe\", group).\n.output Answer\n\n"]}
{"id": 160, "answer": true, "completion": ".decl Has_effect(Drink:symbol, Effect:symbol)\nHas_effect(\"espresso\", \"stimulation\").\n.decl Assuages(Effect:symbol, Emotion:symbol)\nAssuages(\"stimulation\", \"fear\").\n.decl Answer()\nAnswer() :- Has_effect(\"espresso\", effect), Assuages(effect, \"fear\").\n.output Answer\n\n", "completions": [".decl Has_effect(Drink:symbol, Effect:symbol)\nHas_effect(\"espresso\", \"stimulation\").\n.decl Assuages(Effect:symbol, Emotion:symbol)\nAssuages(\"stimulation\", \"fear\").\n.decl Answer()\nAnswer() :- Has_effect(\"espresso\", effect), Assuages(effect, \"fear\").\n.output Answer\n\n"]}
{"id": 161, "answer": false, "completion": ".decl Is_ingredient(Ingredient:symbol, Food:symbol)\nIs_ingredient(\"rice\", \"rice pudding\").\nIs_ingredient(\"water\", \"horchata\").\n.decl Answer()\nAnswer() :- Is_ingredient(ingredient, \"rice pudding\"), Is_ingredient(ingredient, \"horchata\").\n.output Answer\n\n", "completions": [".decl Is_ingredient(Ingredient:symbol, Food:symbol)\nIs_ingredient(\"rice\", \"rice pudding\").\nIs_ingredient(\"water\", \"horchata\").\n.decl Answer()\nAnswer() :- Is_ingredient(ingredient, \"rice pudding\"), Is_ingredient(ingredient, \"horchata\").\n.output Answer\n\n"]}
{"id": 162, "answer": true, "completion": ".decl Has_honors(Person:symbol, Honors:symbol)\nHas_honors(\"Bill Gates\", \"Latin honors\").\n.decl Answer()\nAnswer() :- Has_honors(\"Bill Gates\", \"Latin honors\").\n.output Answer\n\n", "completions": [".decl Has_honors(Person:symbol, Honors:symbol)\nHas_honors(\"Bill Gates\", \"Latin honors\").\n.decl Answer()\nAnswer() :- Has_honors(\"Bill Gates\", \"Latin honors\").\n.output Answer\n\n"]}
{"id": 163, "answer": true, "completion": ".decl Invented_in_format(Genre:symbol, Format:symbol)\nInvented_in_format(\"Superhero fiction\", \"digital\").\n.decl Answer()\nAnswer() :- Invented_in_format(\"Superhero fiction\", \"digital\").\n.output Answer\n\n", "completions": [".decl Invented_in_format(Genre:symbol, Format:symbol)\nInvented_in_format(\"Superhero fiction\", \"digital\").\n.decl Answer()\nAnswer() :- Invented_in_format(\"Superhero fiction\", \"digital\").\n.output Answer\n\n"]}
{"id": 164, "answer": true, "completion": ".decl Has_phylum(Animal:symbol, Phylum:symbol)\nHas_phylum(\"snake\", \"Chordata\").\nHas_phylum(\"bird\", \"Chordata\").\nHas_phylum(\"hamster\", \"Chordata\").\n.decl In_calendar(Animal:symbol, Calendar:symbol)\nIn_calendar(\"snake\", \"Chinese calendar\").\nIn_calendar(\"bird\", \"Chinese calendar\").\nIn_calendar(\"hamster\", \"Chinese calendar\").\n.decl Answer()\nAnswer() :- In_calendar(animal, \"Chinese calendar\"), Has_phylum(animal, \"Chordata\").\n.output Answer\n\n", "completions": [".decl Has_phylum(Animal:symbol, Phylum:symbol)\nHas_phylum(\"snake\", \"Chordata\").\nHas_phylum(\"bird\", \"Chordata\").\nHas_phylum(\"hamster\", \"Chordata\").\n.decl In_calendar(Animal:symbol, Calendar:symbol)\nIn_calendar(\"snake\", \"Chinese calendar\").\nIn_calendar(\"bird\", \"Chinese calendar\").\nIn_calendar(\"hamster\", \"Chinese calendar\").\n.decl Answer()\nAnswer() :- In_calendar(animal, \"Chinese calendar\"), Has_phylum(animal, \"Chordata\").\n.output Answer\n\n"]}
{"id": 165, "answer": true, "completion": ".decl Happens_in_book(Event:symbol, Book:symbol)\nHappens_in_book(\"Daniel thrown into the lion's den\", \"Daniel\").\n.decl Is_in_book(Book:symbol, Book_collection:symbol)\nIs_in_book(\"Daniel\", \"Old Testament\").\nIs_in_book(\"Daniel\", \"New Testament\").\n.decl Answer()\nAnswer() :- Happens_in_book(\"Daniel thrown into the lion's den\", book), Is_in_book(book, \"New Testament\").\n.output Answer\n\n", "completions": [".decl Happens_in_book(Event:symbol, Book:symbol)\nHappens_in_book(\"Daniel thrown into the lion's den\", \"Daniel\").\n.decl Is_in_book(Book:symbol, Book_collection:symbol)\nIs_in_book(\"Daniel\", \"Old Testament\").\nIs_in_book(\"Daniel\", \"New Testament\").\n.decl Answer()\nAnswer() :- Happens_in_book(\"Daniel thrown into the lion's den\", book), Is_in_book(book, \"New Testament\").\n.output Answer\n\n"]}
{"id": 166, "answer": true, "completion": ".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"elephant pregnancy\", 22).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"solar eclipse\", 6).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"solar eclipse\", n_months1), Lasts_n_months(\"elephant pregnancy\", n_months2), n_months1 <= n_months2.\n.output Answer\n\n", "completions": [".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"elephant pregnancy\", 22).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"solar eclipse\", 6).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"solar eclipse\", n_months1), Lasts_n_months(\"elephant pregnancy\", n_months2), n_months1 <= n_months2.\n.output Answer\n\n"]}
{"id": 167, "answer": true, "completion": ".decl Has_meaning(Word:symbol, Language:symbol)\nHas_meaning(\"swastika\", \"sanskrit\").\n.decl Answer()\nAnswer() :- Has_meaning(\"swastika\", \"sanskrit\").\n.output Answer\n\n", "completions": [".decl Has_meaning(Word:symbol, Language:symbol)\nHas_meaning(\"swastika\", \"sanskrit\").\n.decl Answer()\nAnswer() :- Has_meaning(\"swastika\", \"sanskrit\").\n.output Answer\n\n"]}
{"id": 168, "answer": true, "completion": ".decl Has_n_employees(Company:symbol, N_employees:float)\nHas_n_employees(\"Sony\", 100000).\nHas_n_employees(\"Sega\", 10000).\n.decl Answer()\nAnswer() :- Has_n_employees(\"Sony\", n_employees1), Has_n_employees(\"Sega\", n_employees2), n_employees1 > n_employees2.\n.output Answer\n\n\n", "completions": [".decl Has_n_employees(Company:symbol, N_employees:float)\nHas_n_employees(\"Sony\", 100000).\nHas_n_employees(\"Sega\", 10000).\n.decl Answer()\nAnswer() :- Has_n_employees(\"Sony\", n_employees1), Has_n_employees(\"Sega\", n_employees2), n_employees1 > n_employees2.\n.output Answer\n\n\n"]}
{"id": 169, "answer": false, "completion": ".decl Teaches(Professor:symbol, Class:symbol)\nTeaches(\"ethics professor\", \"ethics\").\nTeaches(\"art history professor\", \"Cezanne\").\n.decl Answer()\nAnswer() :- Teaches(\"ethics professor\", \"Cezanne\").\n.output Answer\n\n", "completions": [".decl Teaches(Professor:symbol, Class:symbol)\nTeaches(\"ethics professor\", \"ethics\").\nTeaches(\"art history professor\", \"Cezanne\").\n.decl Answer()\nAnswer() :- Teaches(\"ethics professor\", \"Cezanne\").\n.output Answer\n\n"]}
{"id": 170, "answer": true, "completion": ".decl Has_intelligence(Animal:symbol, Intelligence:float)\nHas_intelligence(\"dolphin\", 1).\n.decl Answer()\nAnswer() :- Has_intelligence(\"dolphin\", intelligence), intelligence > 0.5.\n.output Answer\n\n", "completions": [".decl Has_intelligence(Animal:symbol, Intelligence:float)\nHas_intelligence(\"dolphin\", 1).\n.decl Answer()\nAnswer() :- Has_intelligence(\"dolphin\", intelligence), intelligence > 0.5.\n.output Answer\n\n"]}
{"id": 171, "answer": false, "completion": ".decl Has_discovery_date(Object:symbol, Date:symbol)\nHas_discovery_date(\"Durian trees\", \"1511\").\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Columbus' 1492 expedition\", 1).\n.decl Answer()\nAnswer() :- Has_discovery_date(\"Durian trees\", date), Last_n_years(\"Columbus' 1492 expedition\", n_years), date > \"1492\", date <= \"1492\" + n_years.\n.output Answer\n\n", "completions": [".decl Has_discovery_date(Object:symbol, Date:symbol)\nHas_discovery_date(\"Durian trees\", \"1511\").\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Columbus' 1492 expedition\", 1).\n.decl Answer()\nAnswer() :- Has_discovery_date(\"Durian trees\", date), Last_n_years(\"Columbus' 1492 expedition\", n_years), date > \"1492\", date <= \"1492\" + n_years.\n.output Answer\n\n"]}
{"id": 172, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Chrysler\", 3.5).\nHas_volume(\"laptop bag\", 0.1).\n.decl Answer()\nAnswer() :- Has_volume(\"Chrysler\", volume1), Has_volume(\"laptop bag\", volume2), volume1 < volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Chrysler\", 3.5).\nHas_volume(\"laptop bag\", 0.1).\n.decl Answer()\nAnswer() :- Has_volume(\"Chrysler\", volume1), Has_volume(\"laptop bag\", volume2), volume1 < volume2.\n.output Answer\n\n"]}
{"id": 173, "answer": false, "completion": ".decl Survived(Astronaut:symbol)\nSurvived(\"Neil Armstrong\").\nSurvived(\"Buzz Aldrin\").\nSurvived(\"Michael Collins\").\nSurvived(\"Alan Shepard\").\nSurvived(\"Virgil Grissom\").\nSurvived(\"John Glenn\").\nSurvived(\"Scott Carpenter\").\nSurvived(\"Walter Schirra\").\nSurvived(\"Gordon Cooper\").\nSurvived(\"L. Gordon Cooper\").\nSurvived(\"Ed White\").\nSurvived(\"James McDivitt\").\nSurvived(\"Frank Borman\").\nSurvived(\"James Lovell\").\nSurvived(\"William Anders\").\nSurvived(\"Thomas Stafford\").\nSurvived(\"John Young\").\nSurvived(\"Eugene Cernan\").\nSurvived(\"Richard Gordon\").\nSurvived(\"David Scott\").\nSurvived(\"Alfred Worden\").\nSurvived(\"James Irwin\").\nSurvived(\"John Swigert\").\nSurvived(\"Fred Haise\").\nSurvived(\"Vance Brand\").\nSurvived(\"Thomas Mattingly\").\nSurvived(\"Charles Duke\").\nSurvived(\"Ken Mattingly\").\nSurvived(\"Ronald Evans\").\nSurvived(\"Harrison Schmitt\").\nSurvived(\"Viktor Gorbatko\").\nSurvived(\"Yuri Glazkov\").\nSurvived(\"Vladimir Shatalov\").\nSurvived(\"Alexei Yeliseyev\").\nSurvived(\"Boris Volynov\").\nSurvived(\"Vladimir Komarov\").\nSurvived(\"Georgy Beregovoy\").\nSurvived(\"Pavel Belyayev\").\nSurvived(\"Alexei Leonov\").\nSurvived(\"Valeri Kubasov\").\nSurvived(\"Vladimir Dzhanibekov\").\nSurvived(\"Aleksei Gubarev\").\nSurvived(\"Viktor Patsayev\").\nSurvived(\"Vladimir Lyakhov\").\nSurvived(\"Valeri Ryumin\").\nSurvived(\"Vladimir Kovalyonok\").\nSurvived(\"Aleksandr Ivanchenkov\").\nSurvived(\"Valeri Ryumin\").\nSurvived(\"Vladimir Kovalyonok\").\nSurvived(\"Aleksandr Ivanchenkov\").\nSurvived(\"Vladimir Solovyov\").\nSurvived(\"Viktor Savinykh\").\nSurvived(\"Vladimir Titov\").\nSurvived(\"Musa Manarov\").\nSurvived(\"Anatoly Levchenko\").\nSurvived(\"Aleksandr Viktorenko\").\nSurvived(\"Aleksandr Volkov\").\nSurvived(\"Aleksandr Serebrov\").\nSurvived(\"Aleksandr Poleshchuk\").\nSurvived(\"Sergei Krikalev\").\nSurvived(\"Aleksandr Kaleri\").\nSurvived(\"Aleksandr Volkov\").\nSurvived(\"Aleksandr Serebrov\").\nSurvived(\"Aleksandr Poleshchuk\").\nSurvived(\"Sergei Krikalev\").\nSurvived(\"Aleksandr Kaleri\").\nSurvived(\"Aleksandr Viktorenko\").\nSurvived(\"Aleksandr Volkov\").\nSurvived(\"Aleksandr Serebrov\").\nSurvived(\"Aleksandr Poleshchuk\").\nSurvived(\"Sergei Krikalev\").\nSurvived(\"Aleksandr Kaleri\").\nSurvived(\"Aleksandr Viktorenko\").\nSurvived(\"Aleksandr Volkov\").\nSurvived(\"Aleksandr Serebrov\").\nSurvived(\"Aleksandr Poleshchuk\").\nSurvived(\"Sergei Krikalev\").\nSurvived(\"Aleksandr Kaleri\").\nSurvived(\"Aleksandr Viktorenko\").\nSurvived(\"Aleksandr Volkov\").\nSurv", "completions": [".decl Survived(Astronaut:symbol)\nSurvived(\"Neil Armstrong\").\nSurvived(\"Buzz Aldrin\").\nSurvived(\"Michael Collins\").\nSurvived(\"Alan Shepard\").\nSurvived(\"Virgil Grissom\").\nSurvived(\"John Glenn\").\nSurvived(\"Scott Carpenter\").\nSurvived(\"Walter Schirra\").\nSurvived(\"Gordon Cooper\").\nSurvived(\"L. Gordon Cooper\").\nSurvived(\"Ed White\").\nSurvived(\"James McDivitt\").\nSurvived(\"Frank Borman\").\nSurvived(\"James Lovell\").\nSurvived(\"William Anders\").\nSurvived(\"Thomas Stafford\").\nSurvived(\"John Young\").\nSurvived(\"Eugene Cernan\").\nSurvived(\"Richard Gordon\").\nSurvived(\"David Scott\").\nSurvived(\"Alfred Worden\").\nSurvived(\"James Irwin\").\nSurvived(\"John Swigert\").\nSurvived(\"Fred Haise\").\nSurvived(\"Vance Brand\").\nSurvived(\"Thomas Mattingly\").\nSurvived(\"Charles Duke\").\nSurvived(\"Ken Mattingly\").\nSurvived(\"Ronald Evans\").\nSurvived(\"Harrison Schmitt\").\nSurvived(\"Viktor Gorbatko\").\nSurvived(\"Yuri Glazkov\").\nSurvived(\"Vladimir Shatalov\").\nSurvived(\"Alexei Yeliseyev\").\nSurvived(\"Boris Volynov\").\nSurvived(\"Vladimir Komarov\").\nSurvived(\"Georgy Beregovoy\").\nSurvived(\"Pavel Belyayev\").\nSurvived(\"Alexei Leonov\").\nSurvived(\"Valeri Kubasov\").\nSurvived(\"Vladimir Dzhanibekov\").\nSurvived(\"Aleksei Gubarev\").\nSurvived(\"Viktor Patsayev\").\nSurvived(\"Vladimir Lyakhov\").\nSurvived(\"Valeri Ryumin\").\nSurvived(\"Vladimir Kovalyonok\").\nSurvived(\"Aleksandr Ivanchenkov\").\nSurvived(\"Valeri Ryumin\").\nSurvived(\"Vladimir Kovalyonok\").\nSurvived(\"Aleksandr Ivanchenkov\").\nSurvived(\"Vladimir Solovyov\").\nSurvived(\"Viktor Savinykh\").\nSurvived(\"Vladimir Titov\").\nSurvived(\"Musa Manarov\").\nSurvived(\"Anatoly Levchenko\").\nSurvived(\"Aleksandr Viktorenko\").\nSurvived(\"Aleksandr Volkov\").\nSurvived(\"Aleksandr Serebrov\").\nSurvived(\"Aleksandr Poleshchuk\").\nSurvived(\"Sergei Krikalev\").\nSurvived(\"Aleksandr Kaleri\").\nSurvived(\"Aleksandr Volkov\").\nSurvived(\"Aleksandr Serebrov\").\nSurvived(\"Aleksandr Poleshchuk\").\nSurvived(\"Sergei Krikalev\").\nSurvived(\"Aleksandr Kaleri\").\nSurvived(\"Aleksandr Viktorenko\").\nSurvived(\"Aleksandr Volkov\").\nSurvived(\"Aleksandr Serebrov\").\nSurvived(\"Aleksandr Poleshchuk\").\nSurvived(\"Sergei Krikalev\").\nSurvived(\"Aleksandr Kaleri\").\nSurvived(\"Aleksandr Viktorenko\").\nSurvived(\"Aleksandr Volkov\").\nSurvived(\"Aleksandr Serebrov\").\nSurvived(\"Aleksandr Poleshchuk\").\nSurvived(\"Sergei Krikalev\").\nSurvived(\"Aleksandr Kaleri\").\nSurvived(\"Aleksandr Viktorenko\").\nSurvived(\"Aleksandr Volkov\").\nSurv"]}
{"id": 174, "answer": false, "completion": ".decl Has_term_length(Position:symbol, Term_length:float)\nHas_term_length(\"Supreme Court of the United States\", life).\nHas_term_length(\"senator\", 6).\n.decl Answer()\nAnswer() :- Has_term_length(\"Supreme Court of the United States\", term_length1), Has_term_length(\"senator\", term_length2), term_length1 > term_length2.\n.output Answer\n\n", "completions": [".decl Has_term_length(Position:symbol, Term_length:float)\nHas_term_length(\"Supreme Court of the United States\", life).\nHas_term_length(\"senator\", 6).\n.decl Answer()\nAnswer() :- Has_term_length(\"Supreme Court of the United States\", term_length1), Has_term_length(\"senator\", term_length2), term_length1 > term_length2.\n.output Answer\n\n"]}
{"id": 175, "answer": false, "completion": ".decl Has_n_circles(Hell:symbol, N_circles:float)\nHas_n_circles(\"Hell\", 9).\n.decl Has_n_rings(Circle:symbol, N_rings:float)\nHas_n_rings(\"3rd Circle of Hell\", 3).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"3rd Ring of 3rd Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"2nd Ring of 3rd Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"1st Ring of 3rd Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"3rd Ring of 2nd Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"2nd Ring of 2nd Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"1st Ring of 2nd Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"3rd Ring of 1st Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"2nd Ring of 1st Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"1st Ring of 1st Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"3rd Ring of 4th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"2nd Ring of 4th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"1st Ring of 4th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"3rd Ring of 5th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"2nd Ring of 5th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"1st Ring of 5th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"3rd Ring of 6th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"2nd Ring of 6th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:sy", "completions": [".decl Has_n_circles(Hell:symbol, N_circles:float)\nHas_n_circles(\"Hell\", 9).\n.decl Has_n_rings(Circle:symbol, N_rings:float)\nHas_n_rings(\"3rd Circle of Hell\", 3).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"3rd Ring of 3rd Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"2nd Ring of 3rd Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"1st Ring of 3rd Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"3rd Ring of 2nd Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"2nd Ring of 2nd Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"1st Ring of 2nd Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"3rd Ring of 1st Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"2nd Ring of 1st Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"1st Ring of 1st Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"3rd Ring of 4th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"2nd Ring of 4th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"1st Ring of 4th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"3rd Ring of 5th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"2nd Ring of 5th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"1st Ring of 5th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"3rd Ring of 6th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:symbol, N_layers:float)\nHas_n_layers(\"2nd Ring of 6th Circle of Hell\", 1).\n.decl Has_n_layers(Ring:sy"]}
{"id": 176, "answer": true, "completion": ".decl Has_association(Company:symbol, Group:symbol)\nHas_association(\"Mercedes-Benz\", \"Nazis\").\n.decl Answer()\nAnswer() :- Has_association(\"Mercedes-Benz\", \"Nazis\").\n.output Answer\n\n", "completions": [".decl Has_association(Company:symbol, Group:symbol)\nHas_association(\"Mercedes-Benz\", \"Nazis\").\n.decl Answer()\nAnswer() :- Has_association(\"Mercedes-Benz\", \"Nazis\").\n.output Answer\n\n"]}
{"id": 177, "answer": true, "completion": ".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Disneyland Paris\", 4.9).\nHas_area(\"Walt Disney World\", 27.4).\n.decl Answer()\nAnswer() :- Has_area(\"Disneyland Paris\", area1), Has_area(\"Walt Disney World\", area2), area1 < area2.\n.output Answer\n\n", "completions": [".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Disneyland Paris\", 4.9).\nHas_area(\"Walt Disney World\", 27.4).\n.decl Answer()\nAnswer() :- Has_area(\"Disneyland Paris\", area1), Has_area(\"Walt Disney World\", area2), area1 < area2.\n.output Answer\n\n"]}
{"id": 178, "answer": false, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Rockette\", \"female\").\n.decl Has_facial_hair(Person:symbol, Facial_hair:symbol)\nHas_facial_hair(\"male\", \"moustache\").\n.decl Answer()\nAnswer() :- Has_gender(\"Rockette\", gender), Has_facial_hair(gender, \"moustache\").\n.output Answer\n\n", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Rockette\", \"female\").\n.decl Has_facial_hair(Person:symbol, Facial_hair:symbol)\nHas_facial_hair(\"male\", \"moustache\").\n.decl Answer()\nAnswer() :- Has_gender(\"Rockette\", gender), Has_facial_hair(gender, \"moustache\").\n.output Answer\n\n"]}
{"id": 179, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"sea turtle\", 1.5).\nHas_size(\"tennis racket\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"sea turtle\", size1), Has_size(\"tennis racket\", size2), size1 > size2.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"sea turtle\", 1.5).\nHas_size(\"tennis racket\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"sea turtle\", size1), Has_size(\"tennis racket\", size2), size1 > size2.\n.output Answer\n\n"]}
{"id": 180, "answer": true, "completion": ".decl Has_idea(Person:symbol, Idea:symbol)\nHas_idea(\"Donald Trump\", \"New York Harbor\").\n.decl Answer()\nAnswer() :- Has_idea(\"Donald Trump\", \"New York Harbor\").\n.output Answer\n\n", "completions": [".decl Has_idea(Person:symbol, Idea:symbol)\nHas_idea(\"Donald Trump\", \"New York Harbor\").\n.decl Answer()\nAnswer() :- Has_idea(\"Donald Trump\", \"New York Harbor\").\n.output Answer\n\n"]}
{"id": 181, "answer": true, "completion": ".decl Is_used_for(Object:symbol, Purpose:symbol)\nIs_used_for(\"paypal\", \"online shopping\").\nIs_used_for(\"paypal\", \"online gambling\").\nIs_used_for(\"paypal\", \"online drug deals\").\n.decl Answer()\nAnswer() :- Is_used_for(\"paypal\", \"online drug deals\").\n.output Answer\n\n", "completions": [".decl Is_used_for(Object:symbol, Purpose:symbol)\nIs_used_for(\"paypal\", \"online shopping\").\nIs_used_for(\"paypal\", \"online gambling\").\nIs_used_for(\"paypal\", \"online drug deals\").\n.decl Answer()\nAnswer() :- Is_used_for(\"paypal\", \"online drug deals\").\n.output Answer\n\n"]}
{"id": 182, "answer": true, "completion": ".decl Is_safe_to_eat(Food:symbol)\nIs_safe_to_eat(\"kidney\").\n.decl Answer()\nAnswer() :- Is_safe_to_eat(\"kidney\").\n.output Answer\n\n", "completions": [".decl Is_safe_to_eat(Food:symbol)\nIs_safe_to_eat(\"kidney\").\n.decl Answer()\nAnswer() :- Is_safe_to_eat(\"kidney\").\n.output Answer\n\n"]}
{"id": 183, "answer": true, "completion": ".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"shrimp\", \"good\").\nHas_taste(\"shrimp\", \"bad\").\n.decl Cooked_for_n_minutes(Food:symbol, N_minutes:float)\nCooked_for_n_minutes(\"shrimp\", 10).\nCooked_for_n_minutes(\"shrimp\", 20).\n.decl Answer()\nAnswer() :- Has_taste(\"shrimp\", \"good\"), Cooked_for_n_minutes(\"shrimp\", n_minutes), n_minutes > 10.\n.output Answer\n\n", "completions": [".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"shrimp\", \"good\").\nHas_taste(\"shrimp\", \"bad\").\n.decl Cooked_for_n_minutes(Food:symbol, N_minutes:float)\nCooked_for_n_minutes(\"shrimp\", 10).\nCooked_for_n_minutes(\"shrimp\", 20).\n.decl Answer()\nAnswer() :- Has_taste(\"shrimp\", \"good\"), Cooked_for_n_minutes(\"shrimp\", n_minutes), n_minutes > 10.\n.output Answer\n\n"]}
{"id": 184, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"African elephant\", 6.5).\nHas_weight(\"Hulk\", 1000).\n.decl Can_support(Object:symbol, Weight:float)\nCan_support(\"African elephant\", 10000).\n.decl Answer()\nAnswer() :- Has_weight(\"African elephant\", weight1), Has_weight(\"Hulk\", weight2), Can_support(\"African elephant\", weight3), weight1 + weight2 > weight3.\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"African elephant\", 6.5).\nHas_weight(\"Hulk\", 1000).\n.decl Can_support(Object:symbol, Weight:float)\nCan_support(\"African elephant\", 10000).\n.decl Answer()\nAnswer() :- Has_weight(\"African elephant\", weight1), Has_weight(\"Hulk\", weight2), Can_support(\"African elephant\", weight3), weight1 + weight2 > weight3.\n.output Answer\n\n"]}
{"id": 185, "answer": true, "completion": ".decl Has_history(Entity:symbol, History:float)\nHas_history(\"Rupert Murdoch's alma mater\", 100).\nHas_history(\"USA\", 200).\n.decl Answer()\nAnswer() :- Has_history(\"Rupert Murdoch's alma mater\", history1), Has_history(\"USA\", history2), history1 < history2.\n.output Answer\n\n", "completions": [".decl Has_history(Entity:symbol, History:float)\nHas_history(\"Rupert Murdoch's alma mater\", 100).\nHas_history(\"USA\", 200).\n.decl Answer()\nAnswer() :- Has_history(\"Rupert Murdoch's alma mater\", history1), Has_history(\"USA\", history2), history1 < history2.\n.output Answer\n\n"]}
{"id": 186, "answer": true, "completion": ".decl Named_after(Object:symbol, Person:symbol)\nNamed_after(\"Saturn\", \"Cronus\").\n.decl Is_king_of_gods(Person:symbol)\nIs_king_of_gods(\"Cronus\").\n.decl Answer()\nAnswer() :- Named_after(\"Saturn\", person), Is_king_of_gods(person).\n.output Answer\n\n", "completions": [".decl Named_after(Object:symbol, Person:symbol)\nNamed_after(\"Saturn\", \"Cronus\").\n.decl Is_king_of_gods(Person:symbol)\nIs_king_of_gods(\"Cronus\").\n.decl Answer()\nAnswer() :- Named_after(\"Saturn\", person), Is_king_of_gods(person).\n.output Answer\n\n"]}
{"id": 187, "answer": false, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"American Independence Day\", \"July\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\nIn_season(\"September\", \"autumn\").\nIn_season(\"October\", \"autumn\").\nIn_season(\"November\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"American Independence Day\", month), In_season(month, \"autumn\").\n.output Answer\n\n", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"American Independence Day\", \"July\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\nIn_season(\"September\", \"autumn\").\nIn_season(\"October\", \"autumn\").\nIn_season(\"November\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"American Independence Day\", month), In_season(month, \"autumn\").\n.output Answer\n\n"]}
{"id": 188, "answer": true, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"Albany, Georgia\", 77000).\nHas_population(\"Albany, New York\", 96500).\nHas_population(\"Albany, Oregon\", 49000).\nHas_population(\"Albany, California\", 18000).\n.decl Answer()\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, New York\", population2), population1 > population2.\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, Oregon\", population2), population1 > population2.\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, California\", population2), population1 > population2.\n.output Answer\n\n", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"Albany, Georgia\", 77000).\nHas_population(\"Albany, New York\", 96500).\nHas_population(\"Albany, Oregon\", 49000).\nHas_population(\"Albany, California\", 18000).\n.decl Answer()\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, New York\", population2), population1 > population2.\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, Oregon\", population2), population1 > population2.\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, California\", population2), population1 > population2.\n.output Answer\n\n"]}
{"id": 189, "answer": false, "completion": ".decl Is_from(Person:symbol, Continent:symbol)\nIs_from(\"Niklas Zennström\", \"Europe\").\nIs_from(\"Janus Friis\", \"Europe\").\n.decl Answer()\nAnswer() :- Is_from(\"Niklas Zennström\", \"Asia\").\nAnswer() :- Is_from(\"Janus Friis\", \"Asia\").\n.output Answer\n\n", "completions": [".decl Is_from(Person:symbol, Continent:symbol)\nIs_from(\"Niklas Zennström\", \"Europe\").\nIs_from(\"Janus Friis\", \"Europe\").\n.decl Answer()\nAnswer() :- Is_from(\"Niklas Zennström\", \"Asia\").\nAnswer() :- Is_from(\"Janus Friis\", \"Asia\").\n.output Answer\n\n"]}
{"id": 190, "answer": true, "completion": ".decl Has_n_pages(Book:symbol, N_pages:float)\nHas_n_pages(\"Bible\", 1250).\n.decl Has_n_days(Year:symbol, N_days:float)\nHas_n_days(\"year\", 365).\n.decl Has_n_Wednesdays(Year:symbol, N_Wednesdays:float)\nHas_n_Wednesdays(\"year\", 52).\n.decl Answer()\nAnswer() :- Has_n_pages(\"Bible\", n_pages), Has_n_Wednesdays(\"year\", n_Wednesdays), Has_n_days(\"year\", n_days), n_pages * 15 <= n_Wednesdays * n_days.\n.output Answer\n\n", "completions": [".decl Has_n_pages(Book:symbol, N_pages:float)\nHas_n_pages(\"Bible\", 1250).\n.decl Has_n_days(Year:symbol, N_days:float)\nHas_n_days(\"year\", 365).\n.decl Has_n_Wednesdays(Year:symbol, N_Wednesdays:float)\nHas_n_Wednesdays(\"year\", 52).\n.decl Answer()\nAnswer() :- Has_n_pages(\"Bible\", n_pages), Has_n_Wednesdays(\"year\", n_Wednesdays), Has_n_days(\"year\", n_days), n_pages * 15 <= n_Wednesdays * n_days.\n.output Answer\n\n"]}
{"id": 191, "answer": false, "completion": ".decl Retired(Person:symbol, Year:float)\nRetired(\"Eugene Allen\", 1986).\n.decl Ended(War:symbol, Year:float)\nEnded(\"War of the Spanish Succession\", 1714).\n.decl Answer()\nAnswer() :- Retired(\"Eugene Allen\", year1), Ended(\"War of the Spanish Succession\", year2), year1 = year2.\n.output Answer\n\n", "completions": [".decl Retired(Person:symbol, Year:float)\nRetired(\"Eugene Allen\", 1986).\n.decl Ended(War:symbol, Year:float)\nEnded(\"War of the Spanish Succession\", 1714).\n.decl Answer()\nAnswer() :- Retired(\"Eugene Allen\", year1), Ended(\"War of the Spanish Succession\", year2), year1 = year2.\n.output Answer\n\n"]}
{"id": 192, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Ramadan\", \"September\").\nHappens_in_time(\"Ramadan\", \"October\").\nHappens_in_time(\"Ramadan\", \"November\").\nHappens_in_time(\"Ramadan\", \"December\").\nHappens_in_time(\"Ramadan\", \"January\").\nHappens_in_time(\"Ramadan\", \"February\").\nHappens_in_time(\"Ramadan\", \"March\").\nHappens_in_time(\"Ramadan\", \"April\").\nHappens_in_time(\"Ramadan\", \"May\").\nHappens_in_time(\"Ramadan\", \"June\").\nHappens_in_time(\"Ramadan\", \"July\").\nHappens_in_time(\"Ramadan\", \"August\").\nHappens_in_time(\"Christmas carol\", \"December\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas carol\", month), Happens_in_time(\"Ramadan\", month).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Ramadan\", \"September\").\nHappens_in_time(\"Ramadan\", \"October\").\nHappens_in_time(\"Ramadan\", \"November\").\nHappens_in_time(\"Ramadan\", \"December\").\nHappens_in_time(\"Ramadan\", \"January\").\nHappens_in_time(\"Ramadan\", \"February\").\nHappens_in_time(\"Ramadan\", \"March\").\nHappens_in_time(\"Ramadan\", \"April\").\nHappens_in_time(\"Ramadan\", \"May\").\nHappens_in_time(\"Ramadan\", \"June\").\nHappens_in_time(\"Ramadan\", \"July\").\nHappens_in_time(\"Ramadan\", \"August\").\nHappens_in_time(\"Christmas carol\", \"December\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas carol\", month), Happens_in_time(\"Ramadan\", month).\n.output Answer\n\n"]}
{"id": 193, "answer": true, "completion": ".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"Common Era\", 2000).\nLasts_n_years(\"lifespan of some trees\", 5000).\n.decl Answer()\nAnswer() :- Lasts_n_years(\"Common Era\", n_years1), Lasts_n_years(\"lifespan of some trees\", n_years2), n_years1 < n_years2.\n.output Answer\n\n\n", "completions": [".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"Common Era\", 2000).\nLasts_n_years(\"lifespan of some trees\", 5000).\n.decl Answer()\nAnswer() :- Lasts_n_years(\"Common Era\", n_years1), Lasts_n_years(\"lifespan of some trees\", n_years2), n_years1 < n_years2.\n.output Answer\n\n\n"]}
{"id": 194, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Tange Sazen\", \"sword fighting\").\nHas_skill(\"Tange Sazen\", \"martial arts\").\nHas_skill(\"Tange Sazen\", \"cooking\").\n.decl Is_required_for(Skill:symbol, Job:symbol)\nIs_required_for(\"typing\", \"secretary\").\nIs_required_for(\"filing\", \"secretary\").\nIs_required_for(\"organizing\", \"secretary\").\n.decl Answer()\nAnswer() :- Has_skill(\"Tange Sazen\", skill), Is_required_for(skill, \"secretary\").\n.output Answer\n\n", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Tange Sazen\", \"sword fighting\").\nHas_skill(\"Tange Sazen\", \"martial arts\").\nHas_skill(\"Tange Sazen\", \"cooking\").\n.decl Is_required_for(Skill:symbol, Job:symbol)\nIs_required_for(\"typing\", \"secretary\").\nIs_required_for(\"filing\", \"secretary\").\nIs_required_for(\"organizing\", \"secretary\").\n.decl Answer()\nAnswer() :- Has_skill(\"Tange Sazen\", skill), Is_required_for(skill, \"secretary\").\n.output Answer\n\n"]}
{"id": 195, "answer": false, "completion": ".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"Brussels sprout\", \"vitamin C\").\nHas_nutrient(\"Brussels sprout\", \"vitamin K\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B6\").\nHas_nutrient(\"Brussels sprout\", \"folate\").\nHas_nutrient(\"Brussels sprout\", \"manganese\").\nHas_nutrient(\"Brussels sprout\", \"potassium\").\nHas_nutrient(\"Brussels sprout\", \"fiber\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B1\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B2\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B3\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B5\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B9\").\nHas_nutrient(\"Brussels sprout\", \"phosphorus\").\nHas_nutrient(\"Brussels sprout\", \"protein\").\nHas_nutrient(\"Brussels sprout\", \"copper\").\nHas_nutrient(\"Brussels sprout\", \"iron\").\nHas_nutrient(\"Brussels sprout\", \"magnesium\").\nHas_nutrient(\"Brussels sprout\", \"omega-3 fatty acids\").\nHas_nutrient(\"Brussels sprout\", \"calcium\").\nHas_nutrient(\"Brussels sprout\", \"selenium\").\nHas_nutrient(\"Brussels sprout\", \"zinc\").\nHas_nutrient(\"Brussels sprout\", \"vitamin A\").\nHas_nutrient(\"Brussels sprout\", \"vitamin E\").\nHas_nutrient(\"Brussels sprout\", \"vitamin D\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B12\").\nHas_nutrient(\"Brussels sprout\", \"vitamin K\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B6\").\nHas_nutrient(\"Brussels sprout\", \"vitamin C\").\nHas_nutrient(\"Brussels sprout\", \"folate\").\nHas_nutrient(\"Brussels sprout\", \"manganese\").\nHas_nutrient(\"Brussels sprout\", \"potassium\").\nHas_nutrient(\"Brussels sprout\", \"fiber\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B1\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B2\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B3\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B5\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B9\").\nHas_nutrient(\"Brussels sprout\", \"phosphorus\").\nHas_nutrient(\"Brussels sprout\", \"protein\").\nHas_nutrient(\"Brussels sprout\", \"copper\").\nHas_nutrient(\"Brussels sprout\", \"iron\").\nHas_nutrient(\"Brussels sprout\", \"magnesium\").\nHas_nutrient(\"Brussels sprout\", \"omega-3 fatty acids\").\nHas_nutrient(\"Brussels sprout\", \"calcium\").\nHas_nutrient(\"Brussels sprout\", \"selenium\").\nHas_nutrient(\"Brussels sprout\", \"zinc\").\nHas_nut", "completions": [".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"Brussels sprout\", \"vitamin C\").\nHas_nutrient(\"Brussels sprout\", \"vitamin K\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B6\").\nHas_nutrient(\"Brussels sprout\", \"folate\").\nHas_nutrient(\"Brussels sprout\", \"manganese\").\nHas_nutrient(\"Brussels sprout\", \"potassium\").\nHas_nutrient(\"Brussels sprout\", \"fiber\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B1\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B2\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B3\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B5\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B9\").\nHas_nutrient(\"Brussels sprout\", \"phosphorus\").\nHas_nutrient(\"Brussels sprout\", \"protein\").\nHas_nutrient(\"Brussels sprout\", \"copper\").\nHas_nutrient(\"Brussels sprout\", \"iron\").\nHas_nutrient(\"Brussels sprout\", \"magnesium\").\nHas_nutrient(\"Brussels sprout\", \"omega-3 fatty acids\").\nHas_nutrient(\"Brussels sprout\", \"calcium\").\nHas_nutrient(\"Brussels sprout\", \"selenium\").\nHas_nutrient(\"Brussels sprout\", \"zinc\").\nHas_nutrient(\"Brussels sprout\", \"vitamin A\").\nHas_nutrient(\"Brussels sprout\", \"vitamin E\").\nHas_nutrient(\"Brussels sprout\", \"vitamin D\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B12\").\nHas_nutrient(\"Brussels sprout\", \"vitamin K\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B6\").\nHas_nutrient(\"Brussels sprout\", \"vitamin C\").\nHas_nutrient(\"Brussels sprout\", \"folate\").\nHas_nutrient(\"Brussels sprout\", \"manganese\").\nHas_nutrient(\"Brussels sprout\", \"potassium\").\nHas_nutrient(\"Brussels sprout\", \"fiber\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B1\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B2\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B3\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B5\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B9\").\nHas_nutrient(\"Brussels sprout\", \"phosphorus\").\nHas_nutrient(\"Brussels sprout\", \"protein\").\nHas_nutrient(\"Brussels sprout\", \"copper\").\nHas_nutrient(\"Brussels sprout\", \"iron\").\nHas_nutrient(\"Brussels sprout\", \"magnesium\").\nHas_nutrient(\"Brussels sprout\", \"omega-3 fatty acids\").\nHas_nutrient(\"Brussels sprout\", \"calcium\").\nHas_nutrient(\"Brussels sprout\", \"selenium\").\nHas_nutrient(\"Brussels sprout\", \"zinc\").\nHas_nut"]}
{"id": 196, "answer": true, "completion": ".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Adam Sandler\", \"Christmas\").\nCelebrates(\"Adam Sandler\", \"Thanksgiving\").\nCelebrates(\"Adam Sandler\", \"New Year's Day\").\nCelebrates(\"Adam Sandler\", \"Halloween\").\nCelebrates(\"Adam Sandler\", \"Independence Day\").\n.decl Answer()\nAnswer() :- Celebrates(\"Adam Sandler\", holiday), !Celebrates(\"Adam Sandler\", \"Easter\").\n.output Answer\n\n", "completions": [".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Adam Sandler\", \"Christmas\").\nCelebrates(\"Adam Sandler\", \"Thanksgiving\").\nCelebrates(\"Adam Sandler\", \"New Year's Day\").\nCelebrates(\"Adam Sandler\", \"Halloween\").\nCelebrates(\"Adam Sandler\", \"Independence Day\").\n.decl Answer()\nAnswer() :- Celebrates(\"Adam Sandler\", holiday), !Celebrates(\"Adam Sandler\", \"Easter\").\n.output Answer\n\n"]}
{"id": 197, "answer": false, "completion": ".decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"February\", 28).\nHas_n_days(\"February\", 29).\nHas_n_days(\"March\", 31).\n.decl Answer()\nAnswer() :- Has_n_days(\"February\", n_days1), Has_n_days(\"March\", n_days2), n_days1 = n_days2.\n.output Answer\n\n", "completions": [".decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"February\", 28).\nHas_n_days(\"February\", 29).\nHas_n_days(\"March\", 31).\n.decl Answer()\nAnswer() :- Has_n_days(\"February\", n_days1), Has_n_days(\"March\", n_days2), n_days1 = n_days2.\n.output Answer\n\n"]}
{"id": 198, "answer": true, "completion": ".decl Is_ancient(Event:symbol)\nIs_ancient(\"Shiva's divine dance\").\n.decl Is_physical_fitness_pose(Event:symbol)\nIs_physical_fitness_pose(\"Shiva's divine dance\").\n.decl Answer()\nAnswer() :- Is_ancient(\"Shiva's divine dance\"), Is_physical_fitness_pose(\"Shiva's divine dance\").\n.output Answer\n\n", "completions": [".decl Is_ancient(Event:symbol)\nIs_ancient(\"Shiva's divine dance\").\n.decl Is_physical_fitness_pose(Event:symbol)\nIs_physical_fitness_pose(\"Shiva's divine dance\").\n.decl Answer()\nAnswer() :- Is_ancient(\"Shiva's divine dance\"), Is_physical_fitness_pose(\"Shiva's divine dance\").\n.output Answer\n\n"]}
{"id": 199, "answer": true, "completion": ".decl Possesses(Empire:symbol, Land:symbol)\nPossesses(\"Ottoman Empire\", \"Land of Israel\").\n.decl Is_in_century(Empire:symbol, Century:float)\nIs_in_century(\"Ottoman Empire\", 16).\n.decl Is_Islamic(Empire:symbol)\nIs_Islamic(\"Ottoman Empire\").\n.decl Answer()\nAnswer() :- Possesses(empire, \"Land of Israel\"), Is_in_century(empire, 16), Is_Islamic(empire).\n.output Answer\n\n", "completions": [".decl Possesses(Empire:symbol, Land:symbol)\nPossesses(\"Ottoman Empire\", \"Land of Israel\").\n.decl Is_in_century(Empire:symbol, Century:float)\nIs_in_century(\"Ottoman Empire\", 16).\n.decl Is_Islamic(Empire:symbol)\nIs_Islamic(\"Ottoman Empire\").\n.decl Answer()\nAnswer() :- Possesses(empire, \"Land of Israel\"), Is_in_century(empire, 16), Is_Islamic(empire).\n.output Answer\n\n"]}
{"id": 200, "answer": false, "completion": ".decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"Medieval English lords\", \"upper class\").\n.decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"peasants\", \"lower class\").\n.decl Answer()\nAnswer() :- Has_status(\"Medieval English lords\", status1), Has_status(\"peasants\", status2), status1 != status2.\n.output Answer\n\n", "completions": [".decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"Medieval English lords\", \"upper class\").\n.decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"peasants\", \"lower class\").\n.decl Answer()\nAnswer() :- Has_status(\"Medieval English lords\", status1), Has_status(\"peasants\", status2), status1 != status2.\n.output Answer\n\n"]}
{"id": 201, "answer": true, "completion": ".decl Helps_to_understand(Subject:symbol, Object:symbol)\nHelps_to_understand(\"paleography\", \"ancient languages\").\n.decl Is_a(Object:symbol, Category:symbol)\nIs_a(\"Cthulhu\", \"ancient languages\").\n.decl Answer()\nAnswer() :- Helps_to_understand(\"paleography\", category), Is_a(\"Cthulhu\", category).\n.output Answer\n\n\n", "completions": [".decl Helps_to_understand(Subject:symbol, Object:symbol)\nHelps_to_understand(\"paleography\", \"ancient languages\").\n.decl Is_a(Object:symbol, Category:symbol)\nIs_a(\"Cthulhu\", \"ancient languages\").\n.decl Answer()\nAnswer() :- Helps_to_understand(\"paleography\", category), Is_a(\"Cthulhu\", category).\n.output Answer\n\n\n"]}
{"id": 202, "answer": false, "completion": ".decl Has_killed(Event:symbol, N_people:float)\nHas_killed(\"jokes\", 0).\nHas_killed(\"rats\", 25000000).\n.decl Answer()\nAnswer() :- Has_killed(\"jokes\", n_people1), Has_killed(\"rats\", n_people2), n_people1 > n_people2.\n.output Answer\n\n", "completions": [".decl Has_killed(Event:symbol, N_people:float)\nHas_killed(\"jokes\", 0).\nHas_killed(\"rats\", 25000000).\n.decl Answer()\nAnswer() :- Has_killed(\"jokes\", n_people1), Has_killed(\"rats\", n_people2), n_people1 > n_people2.\n.output Answer\n\n"]}
{"id": 203, "answer": true, "completion": ".decl Has_reliability(Method:symbol, Reliability:float)\nHas_reliability(\"slitting your wrists\", 0.5).\n.decl Answer()\nAnswer() :- Has_reliability(\"slitting your wrists\", reliability), reliability < 1.\n.output Answer\n\n", "completions": [".decl Has_reliability(Method:symbol, Reliability:float)\nHas_reliability(\"slitting your wrists\", 0.5).\n.decl Answer()\nAnswer() :- Has_reliability(\"slitting your wrists\", reliability), reliability < 1.\n.output Answer\n\n"]}
{"id": 204, "answer": true, "completion": ".decl Has_cause(Event:symbol, Cause:symbol)\nHas_cause(\"rise of agriculture\", \"rivers\").\n.decl Answer()\nAnswer() :- Has_cause(\"rise of agriculture\", \"rivers\").\n.output Answer\n\n", "completions": [".decl Has_cause(Event:symbol, Cause:symbol)\nHas_cause(\"rise of agriculture\", \"rivers\").\n.decl Answer()\nAnswer() :- Has_cause(\"rise of agriculture\", \"rivers\").\n.output Answer\n\n"]}
{"id": 205, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"sunbathe\", \"summer\").\nHappens_in_time(\"sunbathe\", \"spring\").\nHappens_in_time(\"sunbathe\", \"fall\").\nHappens_in_time(\"sunbathe\", \"winter\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"January\", \"winter\").\nIn_season(\"February\", \"winter\").\nIn_season(\"March\", \"spring\").\nIn_season(\"April\", \"spring\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\nIn_season(\"September\", \"fall\").\nIn_season(\"October\", \"fall\").\nIn_season(\"November\", \"fall\").\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"sunbathe\", season), Happens_in_time(\"Eskimos\", month), In_season(month, season).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"sunbathe\", \"summer\").\nHappens_in_time(\"sunbathe\", \"spring\").\nHappens_in_time(\"sunbathe\", \"fall\").\nHappens_in_time(\"sunbathe\", \"winter\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"January\", \"winter\").\nIn_season(\"February\", \"winter\").\nIn_season(\"March\", \"spring\").\nIn_season(\"April\", \"spring\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\nIn_season(\"September\", \"fall\").\nIn_season(\"October\", \"fall\").\nIn_season(\"November\", \"fall\").\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"sunbathe\", season), Happens_in_time(\"Eskimos\", month), In_season(month, season).\n.output Answer\n\n"]}
{"id": 206, "answer": true, "completion": ".decl Works_at(Person:symbol, Place:symbol)\nWorks_at(\"telescopes\", \"Goldstone Deep Space Communications Complex\").\n.decl Works_n_hours_per_day(Person:symbol, N_hours:float)\nWorks_n_hours_per_day(\"telescopes\", 24).\n.decl Answer()\nAnswer() :- Works_at(\"telescopes\", place), Works_n_hours_per_day(\"telescopes\", n_hours), n_hours > 12.\n.output Answer\n\n", "completions": [".decl Works_at(Person:symbol, Place:symbol)\nWorks_at(\"telescopes\", \"Goldstone Deep Space Communications Complex\").\n.decl Works_n_hours_per_day(Person:symbol, N_hours:float)\nWorks_n_hours_per_day(\"telescopes\", 24).\n.decl Answer()\nAnswer() :- Works_at(\"telescopes\", place), Works_n_hours_per_day(\"telescopes\", n_hours), n_hours > 12.\n.output Answer\n\n"]}
{"id": 207, "answer": true, "completion": ".decl Has_cost(Show:symbol, Cost:float)\nHas_cost(\"Days of Our Lives\", 1000).\nHas_cost(\"General Hospital\", 500).\nHas_cost(\"The Young and the Restless\", 500).\n.decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Days of Our Lives\", 1).\nHas_n_episodes(\"General Hospital\", 1).\nHas_n_episodes(\"The Young and the Restless\", 1).\n.decl Answer()\nAnswer() :- Has_cost(\"Days of Our Lives\", cost1), Has_cost(show2, cost2), Has_n_episodes(\"Days of Our Lives\", n_episodes1), Has_n_episodes(show2, n_episodes2), cost1/n_episodes1 > cost2/n_episodes2.\n.output Answer\n\n", "completions": [".decl Has_cost(Show:symbol, Cost:float)\nHas_cost(\"Days of Our Lives\", 1000).\nHas_cost(\"General Hospital\", 500).\nHas_cost(\"The Young and the Restless\", 500).\n.decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Days of Our Lives\", 1).\nHas_n_episodes(\"General Hospital\", 1).\nHas_n_episodes(\"The Young and the Restless\", 1).\n.decl Answer()\nAnswer() :- Has_cost(\"Days of Our Lives\", cost1), Has_cost(show2, cost2), Has_n_episodes(\"Days of Our Lives\", n_episodes1), Has_n_episodes(show2, n_episodes2), cost1/n_episodes1 > cost2/n_episodes2.\n.output Answer\n\n"]}
{"id": 208, "answer": true, "completion": ".decl Likes(Person_A:symbol, Person_B:symbol)\nLikes(\"Pikachu\", \"Charles Darwin\").\n.decl Answer()\nAnswer() :- Likes(\"Pikachu\", \"Charles Darwin\").\n.output Answer\n\n", "completions": [".decl Likes(Person_A:symbol, Person_B:symbol)\nLikes(\"Pikachu\", \"Charles Darwin\").\n.decl Answer()\nAnswer() :- Likes(\"Pikachu\", \"Charles Darwin\").\n.output Answer\n\n"]}
{"id": 209, "answer": true, "completion": ".decl Has_hair(Person:symbol, Location:symbol)\nHas_hair(\"person using tonsure\", \"top of scalp\").\n.decl Answer()\nAnswer() :- Has_hair(\"person using tonsure\", \"top of scalp\").\n.output Answer\n\n", "completions": [".decl Has_hair(Person:symbol, Location:symbol)\nHas_hair(\"person using tonsure\", \"top of scalp\").\n.decl Answer()\nAnswer() :- Has_hair(\"person using tonsure\", \"top of scalp\").\n.output Answer\n\n"]}
{"id": 210, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Water:symbol)\nLives_in(\"grey seal\", \"Atlantic Ocean\").\nLives_in(\"subject of Moby Dick\", \"Atlantic Ocean\").\n.decl Answer()\nAnswer() :- Lives_in(\"grey seal\", water), Lives_in(\"subject of Moby Dick\", water).\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Water:symbol)\nLives_in(\"grey seal\", \"Atlantic Ocean\").\nLives_in(\"subject of Moby Dick\", \"Atlantic Ocean\").\n.decl Answer()\nAnswer() :- Lives_in(\"grey seal\", water), Lives_in(\"subject of Moby Dick\", water).\n.output Answer\n\n"]}
{"id": 211, "answer": true, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Donald Duck\", \"male\").\n.decl Has_style(Clothing:symbol, Style:symbol)\nHas_style(\"bell-bottoms\", \"unisex\").\n.decl Answer()\nAnswer() :- Has_gender(\"Donald Duck\", \"male\"), Has_style(\"bell-bottoms\", \"unisex\").\n.output Answer\n\n", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Donald Duck\", \"male\").\n.decl Has_style(Clothing:symbol, Style:symbol)\nHas_style(\"bell-bottoms\", \"unisex\").\n.decl Answer()\nAnswer() :- Has_gender(\"Donald Duck\", \"male\"), Has_style(\"bell-bottoms\", \"unisex\").\n.output Answer\n\n"]}
{"id": 212, "answer": true, "completion": ".decl Lives_in(Creature:symbol, Place:symbol)\nLives_in(\"octopus\", \"Black Sea\").\nLives_in(\"octopus\", \"Mediterranean Sea\").\nLives_in(\"octopus\", \"Atlantic Ocean\").\nLives_in(\"octopus\", \"Pacific Ocean\").\nLives_in(\"octopus\", \"Indian Ocean\").\nLives_in(\"octopus\", \"Arctic Ocean\").\nLives_in(\"octopus\", \"Southern Ocean\").\n.decl Is_ingredient(Creature:symbol, Food:symbol)\nIs_ingredient(\"octopus\", \"pizza\").\n.decl Answer()\nAnswer() :- Lives_in(creature, \"Black Sea\"), Is_ingredient(creature, \"pizza\").\n.output Answer\n\n", "completions": [".decl Lives_in(Creature:symbol, Place:symbol)\nLives_in(\"octopus\", \"Black Sea\").\nLives_in(\"octopus\", \"Mediterranean Sea\").\nLives_in(\"octopus\", \"Atlantic Ocean\").\nLives_in(\"octopus\", \"Pacific Ocean\").\nLives_in(\"octopus\", \"Indian Ocean\").\nLives_in(\"octopus\", \"Arctic Ocean\").\nLives_in(\"octopus\", \"Southern Ocean\").\n.decl Is_ingredient(Creature:symbol, Food:symbol)\nIs_ingredient(\"octopus\", \"pizza\").\n.decl Answer()\nAnswer() :- Lives_in(creature, \"Black Sea\"), Is_ingredient(creature, \"pizza\").\n.output Answer\n\n"]}
{"id": 213, "answer": true, "completion": ".decl Has_traffic_law(Event:symbol, Traffic_law:symbol)\nHas_traffic_law(\"funerals\", \"funeral procession\").\n.decl Answer()\nAnswer() :- Has_traffic_law(\"funerals\", traffic_law).\n.output Answer\n\n", "completions": [".decl Has_traffic_law(Event:symbol, Traffic_law:symbol)\nHas_traffic_law(\"funerals\", \"funeral procession\").\n.decl Answer()\nAnswer() :- Has_traffic_law(\"funerals\", traffic_law).\n.output Answer\n\n"]}
{"id": 214, "answer": true, "completion": ".decl Has_latitude(Place:symbol, Latitude:float)\nHas_latitude(\"home\", 40.7).\n.decl Has_longitude(Place:symbol, Longitude:float)\nHas_longitude(\"home\", -74).\n.decl Answer()\nAnswer() :- Has_latitude(\"home\", latitude), Has_longitude(\"home\", longitude).\n.output Answer\n\n", "completions": [".decl Has_latitude(Place:symbol, Latitude:float)\nHas_latitude(\"home\", 40.7).\n.decl Has_longitude(Place:symbol, Longitude:float)\nHas_longitude(\"home\", -74).\n.decl Answer()\nAnswer() :- Has_latitude(\"home\", latitude), Has_longitude(\"home\", longitude).\n.output Answer\n\n"]}
{"id": 215, "answer": true, "completion": ".decl Believes_in(Person:symbol, Religion:symbol)\nBelieves_in(\"Woody Allen\", \"Judaism\").\n.decl Awaits(Religion:symbol, Event:symbol)\nAwaits(\"Judaism\", \"Second Coming\").\n.decl Answer()\nAnswer() :- Believes_in(\"Woody Allen\", religion), Awaits(religion, \"Second Coming\").\n.output Answer\n\n", "completions": [".decl Believes_in(Person:symbol, Religion:symbol)\nBelieves_in(\"Woody Allen\", \"Judaism\").\n.decl Awaits(Religion:symbol, Event:symbol)\nAwaits(\"Judaism\", \"Second Coming\").\n.decl Answer()\nAnswer() :- Believes_in(\"Woody Allen\", religion), Awaits(religion, \"Second Coming\").\n.output Answer\n\n"]}
{"id": 216, "answer": true, "completion": ".decl Causes(Disease:symbol, Food:symbol)\nCauses(\"fever\", \"meat\").\n.decl Answer()\nAnswer() :- Causes(\"fever\", \"meat\").\n.output Answer\n\n", "completions": [".decl Causes(Disease:symbol, Food:symbol)\nCauses(\"fever\", \"meat\").\n.decl Answer()\nAnswer() :- Causes(\"fever\", \"meat\").\n.output Answer\n\n"]}
{"id": 217, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Dicopomorpha echmepterygis\", 0.1).\nHas_size(\"Uranium pellet\", 0.1).\n.decl Is_fatal(Event:symbol)\nIs_fatal(\"eating a Dicopomorpha echmepterygis\").\n.decl Answer()\nAnswer() :- Has_size(\"Dicopomorpha echmepterygis\", size1), Has_size(\"Uranium pellet\", size2), size1 = size2, Is_fatal(\"eating a Dicopomorpha echmepterygis\").\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Dicopomorpha echmepterygis\", 0.1).\nHas_size(\"Uranium pellet\", 0.1).\n.decl Is_fatal(Event:symbol)\nIs_fatal(\"eating a Dicopomorpha echmepterygis\").\n.decl Answer()\nAnswer() :- Has_size(\"Dicopomorpha echmepterygis\", size1), Has_size(\"Uranium pellet\", size2), size1 = size2, Is_fatal(\"eating a Dicopomorpha echmepterygis\").\n.output Answer\n\n"]}
{"id": 218, "answer": true, "completion": ".decl Associated_with(Thing:symbol, Event:symbol)\nAssociated_with(\"menthol\", \"Christmas\").\n.decl Answer()\nAnswer() :- Associated_with(\"menthol\", \"Christmas\").\n.output Answer\n\n", "completions": [".decl Associated_with(Thing:symbol, Event:symbol)\nAssociated_with(\"menthol\", \"Christmas\").\n.decl Answer()\nAnswer() :- Associated_with(\"menthol\", \"Christmas\").\n.output Answer\n\n"]}
{"id": 219, "answer": false, "completion": ".decl Runs_in(Person:symbol, Election:symbol)\nRuns_in(\"John Kerry\", \"United States presidential election, 2004\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"United States presidential election, 2004\", 2004).\nHappens_in_year(\"United Kingdom general election, 2010\", 2010).\n.decl Answer()\nAnswer() :- Runs_in(\"John Kerry\", election), Happens_in_year(election, year1), Happens_in_year(\"United Kingdom general election, 2010\", year2), year1 = year2.\n.output Answer\n\n", "completions": [".decl Runs_in(Person:symbol, Election:symbol)\nRuns_in(\"John Kerry\", \"United States presidential election, 2004\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"United States presidential election, 2004\", 2004).\nHappens_in_year(\"United Kingdom general election, 2010\", 2010).\n.decl Answer()\nAnswer() :- Runs_in(\"John Kerry\", election), Happens_in_year(election, year1), Happens_in_year(\"United Kingdom general election, 2010\", year2), year1 = year2.\n.output Answer\n\n"]}
{"id": 220, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"Bengal cat\", \"fish\").\n.decl Answer()\nAnswer() :- Eats(\"Bengal cat\", \"fish\").\n.output Answer\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"Bengal cat\", \"fish\").\n.decl Answer()\nAnswer() :- Eats(\"Bengal cat\", \"fish\").\n.output Answer\n\n"]}
{"id": 221, "answer": true, "completion": ".decl Has_n_calories(Food:symbol, N_calories:float)\nHas_n_calories(\"pickles\", 10).\n.decl Has_n_servings(Food:symbol, N_servings:float)\nHas_n_servings(\"pickles\", 1).\n.decl Eases(Food:symbol, Disease:symbol)\nEases(\"pickles\", \"hypertension\").\n.decl Answer()\nAnswer() :- Has_n_calories(\"pickles\", n_calories1), Has_n_servings(\"pickles\", n_servings1), Eases(\"pickles\", \"hypertension\"), n_calories1/n_servings1 <= 10.\n.output Answer\n\n", "completions": [".decl Has_n_calories(Food:symbol, N_calories:float)\nHas_n_calories(\"pickles\", 10).\n.decl Has_n_servings(Food:symbol, N_servings:float)\nHas_n_servings(\"pickles\", 1).\n.decl Eases(Food:symbol, Disease:symbol)\nEases(\"pickles\", \"hypertension\").\n.decl Answer()\nAnswer() :- Has_n_calories(\"pickles\", n_calories1), Has_n_servings(\"pickles\", n_servings1), Eases(\"pickles\", \"hypertension\"), n_calories1/n_servings1 <= 10.\n.output Answer\n\n"]}
{"id": 222, "answer": true, "completion": ".decl Has_setting(Book:symbol, Setting:symbol)\nHas_setting(\"Revolutionary Road\", \"suburb\").\n.decl Answer()\nAnswer() :- Has_setting(\"Revolutionary Road\", \"suburb\").\n.output Answer\n\n", "completions": [".decl Has_setting(Book:symbol, Setting:symbol)\nHas_setting(\"Revolutionary Road\", \"suburb\").\n.decl Answer()\nAnswer() :- Has_setting(\"Revolutionary Road\", \"suburb\").\n.output Answer\n\n"]}
{"id": 223, "answer": false, "completion": ".decl Is_associated_with(Person:symbol, God:symbol)\nIs_associated_with(\"Hanuman\", \"Hindu god\").\nIs_associated_with(\"Thor\", \"Norse god\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Hanuman\", \"Norse god\").\n.output Answer\n\n", "completions": [".decl Is_associated_with(Person:symbol, God:symbol)\nIs_associated_with(\"Hanuman\", \"Hindu god\").\nIs_associated_with(\"Thor\", \"Norse god\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Hanuman\", \"Norse god\").\n.output Answer\n\n"]}
{"id": 224, "answer": true, "completion": ".decl Requires(Event:symbol, Resource:symbol)\nRequires(\"3D printing\", \"large room\").\n.decl Answer()\nAnswer() :- Requires(\"3D printing\", \"large room\").\n.output Answer\n\n", "completions": [".decl Requires(Event:symbol, Resource:symbol)\nRequires(\"3D printing\", \"large room\").\n.decl Answer()\nAnswer() :- Requires(\"3D printing\", \"large room\").\n.output Answer\n\n"]}
{"id": 225, "answer": false, "completion": ".decl Interested_in(Person:symbol, Place:symbol)\nInterested_in(\"Robert Stack\", \"Tower of London\").\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"14 season show\", 14).\n.decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"Tower of London\", \"1400s\").\n.decl Answer()\nAnswer() :- Interested_in(\"Robert Stack\", place), Last_n_years(\"14 season show\", n_years), Happened_in_time(place, time), n_years >= time.\n.output Answer\n\n", "completions": [".decl Interested_in(Person:symbol, Place:symbol)\nInterested_in(\"Robert Stack\", \"Tower of London\").\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"14 season show\", 14).\n.decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"Tower of London\", \"1400s\").\n.decl Answer()\nAnswer() :- Interested_in(\"Robert Stack\", place), Last_n_years(\"14 season show\", n_years), Happened_in_time(place, time), n_years >= time.\n.output Answer\n\n"]}
{"id": 226, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sea otter\", \"spider\").\n.decl Answer()\nAnswer() :- Eats(\"sea otter\", \"spider\").\n.output Answer\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sea otter\", \"spider\").\n.decl Answer()\nAnswer() :- Eats(\"sea otter\", \"spider\").\n.output Answer\n\n"]}
{"id": 227, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"World War II\", \"1939-1945\").\nHappens_in_time(\"The Who\", \"1964-present\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"World War II\", time1), Happens_in_time(\"The Who\", time2), time1 < time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"World War II\", \"1939-1945\").\nHappens_in_time(\"The Who\", \"1964-present\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"World War II\", time1), Happens_in_time(\"The Who\", time2), time1 < time2.\n.output Answer\n\n"]}
{"id": 228, "answer": true, "completion": ".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"US 2020 nickels\", \"nickel\").\nHas_material(\"US 2020 nickels\", \"copper\").\n.decl Answer()\nAnswer() :- Has_material(\"US 2020 nickels\", \"nickel\").\n.output Answer\n\n", "completions": [".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"US 2020 nickels\", \"nickel\").\nHas_material(\"US 2020 nickels\", \"copper\").\n.decl Answer()\nAnswer() :- Has_material(\"US 2020 nickels\", \"nickel\").\n.output Answer\n\n"]}
{"id": 229, "answer": true, "completion": ".decl Costs(Event:symbol, Cost:float)\nCosts(\"run for President of India\", 1000000000).\nCosts(\"buy a new iPhone 11\", 699).\n.decl Answer()\nAnswer() :- Costs(\"run for President of India\", cost1), Costs(\"buy a new iPhone 11\", cost2), cost1 > cost2.\n.output Answer\n\n", "completions": [".decl Costs(Event:symbol, Cost:float)\nCosts(\"run for President of India\", 1000000000).\nCosts(\"buy a new iPhone 11\", 699).\n.decl Answer()\nAnswer() :- Costs(\"run for President of India\", cost1), Costs(\"buy a new iPhone 11\", cost2), cost1 > cost2.\n.output Answer\n\n"]}
{"id": 230, "answer": true, "completion": ".decl Occurs_on_day(Event:symbol, Day:symbol)\nOccurs_on_day(\"New Year's Day\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Occurs_on_day(\"New Year's Day\", \"Wednesday\").\n.output Answer\n\n", "completions": [".decl Occurs_on_day(Event:symbol, Day:symbol)\nOccurs_on_day(\"New Year's Day\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Occurs_on_day(\"New Year's Day\", \"Wednesday\").\n.output Answer\n\n"]}
{"id": 231, "answer": true, "completion": ".decl Has_target(Event:symbol, Target:symbol)\nHas_target(\"Islamophobia\", \"Donald Trump\").\n.decl Answer()\nAnswer() :- Has_target(\"Islamophobia\", \"Donald Trump\").\n.output Answer\n\n", "completions": [".decl Has_target(Event:symbol, Target:symbol)\nHas_target(\"Islamophobia\", \"Donald Trump\").\n.decl Answer()\nAnswer() :- Has_target(\"Islamophobia\", \"Donald Trump\").\n.output Answer\n\n"]}
{"id": 232, "answer": true, "completion": ".decl Has_theme(Movie:symbol, Theme:symbol)\nHas_theme(\"Disney's Alice in Wonderland\", \"holiday\").\n.decl Answer()\nAnswer() :- Has_theme(\"Disney's Alice in Wonderland\", \"holiday\").\n.output Answer\n\n", "completions": [".decl Has_theme(Movie:symbol, Theme:symbol)\nHas_theme(\"Disney's Alice in Wonderland\", \"holiday\").\n.decl Answer()\nAnswer() :- Has_theme(\"Disney's Alice in Wonderland\", \"holiday\").\n.output Answer\n\n"]}
{"id": 233, "answer": true, "completion": ".decl Served_under(Person_A:symbol, Person_B:symbol)\nServed_under(\"François Mitterrand\", \"Napoleon Bonapart\").\n.decl Answer()\nAnswer() :- Served_under(\"François Mitterrand\", \"Napoleon Bonapart\").\n.output Answer\n\n", "completions": [".decl Served_under(Person_A:symbol, Person_B:symbol)\nServed_under(\"François Mitterrand\", \"Napoleon Bonapart\").\n.decl Answer()\nAnswer() :- Served_under(\"François Mitterrand\", \"Napoleon Bonapart\").\n.output Answer\n\n"]}
{"id": 234, "answer": true, "completion": ".decl Has_chemical(Object:symbol, Chemical:symbol)\nHas_chemical(\"onion\", \"sulfur\").\nHas_chemical(\"thermonuclear bomb\", \"sulfur\").\n.decl Answer()\nAnswer() :- Has_chemical(\"onion\", chemical), Has_chemical(\"thermonuclear bomb\", chemical).\n.output Answer\n\n", "completions": [".decl Has_chemical(Object:symbol, Chemical:symbol)\nHas_chemical(\"onion\", \"sulfur\").\nHas_chemical(\"thermonuclear bomb\", \"sulfur\").\n.decl Answer()\nAnswer() :- Has_chemical(\"onion\", chemical), Has_chemical(\"thermonuclear bomb\", chemical).\n.output Answer\n\n"]}
{"id": 235, "answer": true, "completion": ".decl Is_legal(Action:symbol)\nIs_legal(\"downloading Mario 64 on an emulator\").\n.decl Answer()\nAnswer() :- Is_legal(\"downloading Mario 64 on an emulator\").\n.output Answer\n\n", "completions": [".decl Is_legal(Action:symbol)\nIs_legal(\"downloading Mario 64 on an emulator\").\n.decl Answer()\nAnswer() :- Is_legal(\"downloading Mario 64 on an emulator\").\n.output Answer\n\n"]}
{"id": 236, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"lunch on the beach\", \"summer\").\nHappens_in_time(\"full circle of a rainbow\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"lunch on the beach\", time), Happens_in_time(\"full circle of a rainbow\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"lunch on the beach\", \"summer\").\nHappens_in_time(\"full circle of a rainbow\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"lunch on the beach\", time), Happens_in_time(\"full circle of a rainbow\", time).\n.output Answer\n\n"]}
{"id": 237, "answer": true, "completion": ".decl Has_n_smoggy_days(City:symbol, N_smoggy_days:float)\nHas_n_smoggy_days(\"Düsseldorf\", 10).\n.decl Answer()\nAnswer() :- Has_n_smoggy_days(\"Düsseldorf\", n_smoggy_days), n_smoggy_days < 100.\n.output Answer\n\n", "completions": [".decl Has_n_smoggy_days(City:symbol, N_smoggy_days:float)\nHas_n_smoggy_days(\"Düsseldorf\", 10).\n.decl Answer()\nAnswer() :- Has_n_smoggy_days(\"Düsseldorf\", n_smoggy_days), n_smoggy_days < 100.\n.output Answer\n\n"]}
{"id": 238, "answer": true, "completion": ".decl Has_hairline(Person:symbol, Hairline:symbol)\nHas_hairline(\"Elon Musk\", \"receding\").\nHas_hairline(\"Elon Musk\", \"receded\").\n.decl Answer()\nAnswer() :- Has_hairline(\"Elon Musk\", hairline1), Has_hairline(\"Elon Musk\", hairline2), hairline1 != hairline2.\n.output Answer\n\n", "completions": [".decl Has_hairline(Person:symbol, Hairline:symbol)\nHas_hairline(\"Elon Musk\", \"receding\").\nHas_hairline(\"Elon Musk\", \"receded\").\n.decl Answer()\nAnswer() :- Has_hairline(\"Elon Musk\", hairline1), Has_hairline(\"Elon Musk\", hairline2), hairline1 != hairline2.\n.output Answer\n\n"]}
{"id": 239, "answer": false, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Marvel villain\", \"Lemon\").\nHas_name(\"Marvel villain\", \"Orange\").\nHas_name(\"Marvel villain\", \"Grapefruit\").\nHas_name(\"Marvel villain\", \"Lime\").\nHas_name(\"Marvel villain\", \"Tangerine\").\nHas_name(\"Marvel villain\", \"Clementine\").\nHas_name(\"Marvel villain\", \"Kumquat\").\nHas_name(\"Marvel villain\", \"Pomelo\").\nHas_name(\"Marvel villain\", \"Mandarin\").\nHas_name(\"Marvel villain\", \"Bergamot\").\nHas_name(\"Marvel villain\", \"Citron\").\nHas_name(\"Marvel villain\", \"Lemon\").\nHas_name(\"Marvel villain\", \"Orange\").\nHas_name(\"Marvel villain\", \"Grapefruit\").\nHas_name(\"Marvel villain\", \"Lime\").\nHas_name(\"Marvel villain\", \"Tangerine\").\nHas_name(\"Marvel villain\", \"Clementine\").\nHas_name(\"Marvel villain\", \"Kumquat\").\nHas_name(\"Marvel villain\", \"Pomelo\").\nHas_name(\"Marvel villain\", \"Mandarin\").\nHas_name(\"Marvel villain\", \"Bergamot\").\nHas_name(\"Marvel villain\", \"Citron\").\nHas_name(\"Marvel villain\", \"Lemon\").\nHas_name(\"Marvel villain\", \"Orange\").\nHas_name(\"Marvel villain\", \"Grapefruit\").\nHas_name(\"Marvel villain\", \"Lime\").\nHas_name(\"Marvel villain\", \"Tangerine\").\nHas_name(\"Marvel villain\", \"Clementine\").\nHas_name(\"Marvel villain\", \"Kumquat\").\nHas_name(\"Marvel villain\", \"Pomelo\").\nHas_name(\"Marvel villain\", \"Mandarin\").\nHas_name(\"Marvel villain\", \"Bergamot\").\nHas_name(\"Marvel villain\", \"Citron\").\nHas_name(\"Marvel villain\", \"Lemon\").\nHas_name(\"Marvel villain\", \"Orange\").\nHas_name(\"Marvel villain\", \"Grapefruit\").\nHas_name(\"Marvel villain\", \"Lime\").\nHas_name(\"Marvel villain\", \"Tangerine\").\nHas_name(\"Marvel villain\", \"Clementine\").\nHas_name(\"Marvel villain\", \"Kumquat\").\nHas_name(\"Marvel villain\", \"Pomelo\").\nHas_name(\"Marvel villain\", \"Mandarin\").\nHas_name(\"Marvel villain\", \"Bergamot\").\nHas_name(\"Marvel villain\", \"Citron\").\nHas_name(\"Marvel villain\", \"Lemon\").\nHas_name(\"Marvel villain\", \"Orange\").\nHas_name(\"Marvel villain\", \"Grapefruit\").\nHas_name(\"Marvel villain\", \"Lime\").\nHas_name(\"Marvel villain\", \"Tangerine\").\nHas_name(\"Marvel villain\", \"Clementine\").\nHas_name(\"Marvel villain\", \"Kumquat\").\nHas_name(\"Marvel villain\", \"Pomelo\").\nHas_name(\"Marvel villain\", \"Mandarin\").\nHas_name(\"Marvel villain\", \"Bergamot\").\nHas_name(\"Marvel villain\", \"Citron\").\nHas_name(\"Marvel villain\", \"Lemon\").\nHas_name(\"Marvel villain\", \"Orange\").\nHas_name(\"Marvel villain\", \"Grapefruit\").\nHas_name(\"Marvel villain\", \"Lime\").\nHas_name(\"Marvel villain\", \"Tangerine\").\nHas_name(\"Marvel villain\", \"Clementine\").\nHas_name(\"Marvel villain\", \"", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Marvel villain\", \"Lemon\").\nHas_name(\"Marvel villain\", \"Orange\").\nHas_name(\"Marvel villain\", \"Grapefruit\").\nHas_name(\"Marvel villain\", \"Lime\").\nHas_name(\"Marvel villain\", \"Tangerine\").\nHas_name(\"Marvel villain\", \"Clementine\").\nHas_name(\"Marvel villain\", \"Kumquat\").\nHas_name(\"Marvel villain\", \"Pomelo\").\nHas_name(\"Marvel villain\", \"Mandarin\").\nHas_name(\"Marvel villain\", \"Bergamot\").\nHas_name(\"Marvel villain\", \"Citron\").\nHas_name(\"Marvel villain\", \"Lemon\").\nHas_name(\"Marvel villain\", \"Orange\").\nHas_name(\"Marvel villain\", \"Grapefruit\").\nHas_name(\"Marvel villain\", \"Lime\").\nHas_name(\"Marvel villain\", \"Tangerine\").\nHas_name(\"Marvel villain\", \"Clementine\").\nHas_name(\"Marvel villain\", \"Kumquat\").\nHas_name(\"Marvel villain\", \"Pomelo\").\nHas_name(\"Marvel villain\", \"Mandarin\").\nHas_name(\"Marvel villain\", \"Bergamot\").\nHas_name(\"Marvel villain\", \"Citron\").\nHas_name(\"Marvel villain\", \"Lemon\").\nHas_name(\"Marvel villain\", \"Orange\").\nHas_name(\"Marvel villain\", \"Grapefruit\").\nHas_name(\"Marvel villain\", \"Lime\").\nHas_name(\"Marvel villain\", \"Tangerine\").\nHas_name(\"Marvel villain\", \"Clementine\").\nHas_name(\"Marvel villain\", \"Kumquat\").\nHas_name(\"Marvel villain\", \"Pomelo\").\nHas_name(\"Marvel villain\", \"Mandarin\").\nHas_name(\"Marvel villain\", \"Bergamot\").\nHas_name(\"Marvel villain\", \"Citron\").\nHas_name(\"Marvel villain\", \"Lemon\").\nHas_name(\"Marvel villain\", \"Orange\").\nHas_name(\"Marvel villain\", \"Grapefruit\").\nHas_name(\"Marvel villain\", \"Lime\").\nHas_name(\"Marvel villain\", \"Tangerine\").\nHas_name(\"Marvel villain\", \"Clementine\").\nHas_name(\"Marvel villain\", \"Kumquat\").\nHas_name(\"Marvel villain\", \"Pomelo\").\nHas_name(\"Marvel villain\", \"Mandarin\").\nHas_name(\"Marvel villain\", \"Bergamot\").\nHas_name(\"Marvel villain\", \"Citron\").\nHas_name(\"Marvel villain\", \"Lemon\").\nHas_name(\"Marvel villain\", \"Orange\").\nHas_name(\"Marvel villain\", \"Grapefruit\").\nHas_name(\"Marvel villain\", \"Lime\").\nHas_name(\"Marvel villain\", \"Tangerine\").\nHas_name(\"Marvel villain\", \"Clementine\").\nHas_name(\"Marvel villain\", \"Kumquat\").\nHas_name(\"Marvel villain\", \"Pomelo\").\nHas_name(\"Marvel villain\", \"Mandarin\").\nHas_name(\"Marvel villain\", \"Bergamot\").\nHas_name(\"Marvel villain\", \"Citron\").\nHas_name(\"Marvel villain\", \"Lemon\").\nHas_name(\"Marvel villain\", \"Orange\").\nHas_name(\"Marvel villain\", \"Grapefruit\").\nHas_name(\"Marvel villain\", \"Lime\").\nHas_name(\"Marvel villain\", \"Tangerine\").\nHas_name(\"Marvel villain\", \"Clementine\").\nHas_name(\"Marvel villain\", \""]}
{"id": 240, "answer": true, "completion": ".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"someone\", \"Canary Islands\").\n.decl Can_fish_for(Person:symbol, Fish:symbol)\nCan_fish_for(\"someone\", \"largemouth bass\").\n.decl Answer()\nAnswer() :- Lives_in(\"someone\", \"Canary Islands\"), Can_fish_for(\"someone\", \"largemouth bass\").\n.output Answer\n\n", "completions": [".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"someone\", \"Canary Islands\").\n.decl Can_fish_for(Person:symbol, Fish:symbol)\nCan_fish_for(\"someone\", \"largemouth bass\").\n.decl Answer()\nAnswer() :- Lives_in(\"someone\", \"Canary Islands\"), Can_fish_for(\"someone\", \"largemouth bass\").\n.output Answer\n\n"]}
{"id": 241, "answer": false, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"pizza\", \"anchovies\").\n.decl Is_associated_with(Ingredient:symbol, Food:symbol)\nIs_associated_with(\"anchovies\", \"Italian food\").\n.decl Answer()\nAnswer() :- Has_ingredient(food, \"anchovies\"), Is_associated_with(\"anchovies\", food).\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"pizza\", \"anchovies\").\n.decl Is_associated_with(Ingredient:symbol, Food:symbol)\nIs_associated_with(\"anchovies\", \"Italian food\").\n.decl Answer()\nAnswer() :- Has_ingredient(food, \"anchovies\"), Is_associated_with(\"anchovies\", food).\n.output Answer\n\n"]}
{"id": 242, "answer": true, "completion": ".decl Appears_on(Person:symbol, Show:symbol)\nAppears_on(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.decl Answer()\nAnswer() :- Appears_on(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.output Answer\n\n", "completions": [".decl Appears_on(Person:symbol, Show:symbol)\nAppears_on(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.decl Answer()\nAnswer() :- Appears_on(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.output Answer\n\n"]}
{"id": 243, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Ford F-350\", 7500).\nHas_weight(\"Yale University student body\", 30000).\n.decl Can_tow(Vehicle:symbol, Object:symbol)\nCan_tow(\"Ford F-350\", \"Yale University student body\").\n.decl Answer()\nAnswer() :- Can_tow(\"Ford F-350\", \"Yale University student body\").\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Ford F-350\", 7500).\nHas_weight(\"Yale University student body\", 30000).\n.decl Can_tow(Vehicle:symbol, Object:symbol)\nCan_tow(\"Ford F-350\", \"Yale University student body\").\n.decl Answer()\nAnswer() :- Can_tow(\"Ford F-350\", \"Yale University student body\").\n.output Answer\n\n"]}
{"id": 244, "answer": true, "completion": ".decl Has_part(Organism:symbol, Part:symbol)\nHas_part(\"queen bee\", \"stinger\").\nHas_part(\"queen bee\", \"antenna\").\nHas_part(\"queen bee\", \"leg\").\nHas_part(\"queen bee\", \"wing\").\nHas_part(\"queen bee\", \"abdomen\").\nHas_part(\"queen bee\", \"thorax\").\nHas_part(\"queen bee\", \"head\").\nHas_part(\"apple tree\", \"root\").\nHas_part(\"apple tree\", \"trunk\").\nHas_part(\"apple tree\", \"branch\").\nHas_part(\"apple tree\", \"leaf\").\nHas_part(\"apple tree\", \"flower\").\nHas_part(\"apple tree\", \"fruit\").\n.decl Answer()\nAnswer() :- Has_part(\"apple tree\", part), !Has_part(\"queen bee\", part).\n.output Answer\n\n", "completions": [".decl Has_part(Organism:symbol, Part:symbol)\nHas_part(\"queen bee\", \"stinger\").\nHas_part(\"queen bee\", \"antenna\").\nHas_part(\"queen bee\", \"leg\").\nHas_part(\"queen bee\", \"wing\").\nHas_part(\"queen bee\", \"abdomen\").\nHas_part(\"queen bee\", \"thorax\").\nHas_part(\"queen bee\", \"head\").\nHas_part(\"apple tree\", \"root\").\nHas_part(\"apple tree\", \"trunk\").\nHas_part(\"apple tree\", \"branch\").\nHas_part(\"apple tree\", \"leaf\").\nHas_part(\"apple tree\", \"flower\").\nHas_part(\"apple tree\", \"fruit\").\n.decl Answer()\nAnswer() :- Has_part(\"apple tree\", part), !Has_part(\"queen bee\", part).\n.output Answer\n\n"]}
{"id": 245, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Mount Fuji\", 3776).\nHas_height(\"Sea of Japan\", 0).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Fuji\", height1), Has_height(\"Sea of Japan\", height2), height1 > height2.\n.output Answer\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Mount Fuji\", 3776).\nHas_height(\"Sea of Japan\", 0).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Fuji\", height1), Has_height(\"Sea of Japan\", height2), height1 > height2.\n.output Answer\n\n"]}
{"id": 246, "answer": false, "completion": ".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"Dalai Lama\", \"reincarnation\").\nBelieves_in(\"Dalai Lama\", \"karma\").\nBelieves_in(\"Dalai Lama\", \"nirvana\").\nBelieves_in(\"Dalai Lama\", \"samsara\").\nBelieves_in(\"Dalai Lama\", \"Buddha-nature\").\nBelieves_in(\"Dalai Lama\", \"Buddha-dharma\").\nBelieves_in(\"Dalai Lama\", \"Buddha-sasana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-karma\").\nBelieves_in(\"Dalai Lama\", \"Buddha-dhatu\").\nBelieves_in(\"Dalai Lama\", \"Buddha-kaya\").\nBelieves_in(\"Dalai Lama\", \"Buddha-rupa\").\nBelieves_in(\"Dalai Lama\", \"Buddha-nama\").\nBelieves_in(\"Dalai Lama\", \"Buddha-citta\").\nBelieves_in(\"Dalai Lama\", \"Buddha-cetasika\").\nBelieves_in(\"Dalai Lama\", \"Buddha-vijnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-sila\").\nBelieves_in(\"Dalai Lama\", \"Buddha-samadhi\").\nBelieves_in(\"Dalai Lama\", \"Buddha-prajna\").\nBelieves_in(\"Dalai Lama\", \"Buddha-bodhi\").\nBelieves_in(\"Dalai Lama\", \"Buddha-dhyana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dal", "completions": [".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"Dalai Lama\", \"reincarnation\").\nBelieves_in(\"Dalai Lama\", \"karma\").\nBelieves_in(\"Dalai Lama\", \"nirvana\").\nBelieves_in(\"Dalai Lama\", \"samsara\").\nBelieves_in(\"Dalai Lama\", \"Buddha-nature\").\nBelieves_in(\"Dalai Lama\", \"Buddha-dharma\").\nBelieves_in(\"Dalai Lama\", \"Buddha-sasana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-karma\").\nBelieves_in(\"Dalai Lama\", \"Buddha-dhatu\").\nBelieves_in(\"Dalai Lama\", \"Buddha-kaya\").\nBelieves_in(\"Dalai Lama\", \"Buddha-rupa\").\nBelieves_in(\"Dalai Lama\", \"Buddha-nama\").\nBelieves_in(\"Dalai Lama\", \"Buddha-citta\").\nBelieves_in(\"Dalai Lama\", \"Buddha-cetasika\").\nBelieves_in(\"Dalai Lama\", \"Buddha-vijnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-sila\").\nBelieves_in(\"Dalai Lama\", \"Buddha-samadhi\").\nBelieves_in(\"Dalai Lama\", \"Buddha-prajna\").\nBelieves_in(\"Dalai Lama\", \"Buddha-bodhi\").\nBelieves_in(\"Dalai Lama\", \"Buddha-dhyana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dalai Lama\", \"Buddha-jnana\").\nBelieves_in(\"Dal"]}
{"id": 247, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"fear\", \"1999\").\nHappens_in_time(\"fear\", \"2000\").\nHappens_in_time(\"fear\", \"2001\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"fear\", \"2000\").\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"fear\", \"1999\").\nHappens_in_time(\"fear\", \"2000\").\nHappens_in_time(\"fear\", \"2001\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"fear\", \"2000\").\n.output Answer\n\n"]}
{"id": 248, "answer": true, "completion": ".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Walt Disney\", \"animated cartoon\").\n.decl Uses(Invention:symbol, Technology:symbol)\nUses(\"animated cartoon\", \"email\").\n.decl Answer()\nAnswer() :- Invented(\"Walt Disney\", invention), Uses(invention, \"email\").\n.output Answer\n\n", "completions": [".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Walt Disney\", \"animated cartoon\").\n.decl Uses(Invention:symbol, Technology:symbol)\nUses(\"animated cartoon\", \"email\").\n.decl Answer()\nAnswer() :- Invented(\"Walt Disney\", invention), Uses(invention, \"email\").\n.output Answer\n\n"]}
{"id": 249, "answer": true, "completion": ".decl Has_grade(Person:symbol, Grade:float)\nHas_grade(\"Barack Obama\", 11).\n.decl Answer()\nAnswer() :- Has_grade(\"Barack Obama\", grade), grade < 12.\n.output Answer\n\n", "completions": [".decl Has_grade(Person:symbol, Grade:float)\nHas_grade(\"Barack Obama\", 11).\n.decl Answer()\nAnswer() :- Has_grade(\"Barack Obama\", grade), grade < 12.\n.output Answer\n\n"]}
{"id": 250, "answer": false, "completion": ".decl Has_taste(Part:symbol, Taste:symbol)\nHas_taste(\"center\", \"sweet\").\nHas_taste(\"center\", \"tart\").\nHas_taste(\"center\", \"bitter\").\nHas_taste(\"center\", \"sour\").\nHas_taste(\"center\", \"salty\").\nHas_taste(\"center\", \"savory\").\nHas_taste(\"center\", \"umami\").\nHas_taste(\"center\", \"astringent\").\nHas_taste(\"center\", \"pungent\").\nHas_taste(\"center\", \"spicy\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\n", "completions": [".decl Has_taste(Part:symbol, Taste:symbol)\nHas_taste(\"center\", \"sweet\").\nHas_taste(\"center\", \"tart\").\nHas_taste(\"center\", \"bitter\").\nHas_taste(\"center\", \"sour\").\nHas_taste(\"center\", \"salty\").\nHas_taste(\"center\", \"savory\").\nHas_taste(\"center\", \"umami\").\nHas_taste(\"center\", \"astringent\").\nHas_taste(\"center\", \"pungent\").\nHas_taste(\"center\", \"spicy\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\nHas_taste(\"center\", \"hot\").\nHas_taste(\"center\", \"cool\").\nHas_taste(\"center\", \"cold\").\nHas_taste(\"center\", \"warm\").\n"]}
{"id": 251, "answer": true, "completion": ".decl Is_plot_device(Object:symbol, Show:symbol)\nIs_plot_device(\"radioactive waste\", \"The Simpsons\").\nIs_plot_device(\"radioactive waste\", \"The X-Files\").\n.decl Answer()\nAnswer() :- Is_plot_device(\"radioactive waste\", show).\n.output Answer\n\n", "completions": [".decl Is_plot_device(Object:symbol, Show:symbol)\nIs_plot_device(\"radioactive waste\", \"The Simpsons\").\nIs_plot_device(\"radioactive waste\", \"The X-Files\").\n.decl Answer()\nAnswer() :- Is_plot_device(\"radioactive waste\", show).\n.output Answer\n\n"]}
{"id": 252, "answer": true, "completion": ".decl Has_family(Animal:symbol, Family:symbol)\nHas_family(\"dog\", \"Canidae\").\nHas_family(\"fox\", \"Canidae\").\nHas_family(\"wolf\", \"Canidae\").\n.decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Aesop's Fables\", \"Aesop\").\n.decl Has_characters(Book:symbol, Character:symbol)\nHas_characters(\"Aesop's Fables\", \"dog\").\nHas_characters(\"Aesop's Fables\", \"fox\").\nHas_characters(\"Aesop's Fables\", \"wolf\").\n.decl Answer()\nAnswer() :- Has_family(animal, \"Canidae\"), Has_author(\"Aesop's Fables\", \"Aesop\"), Has_characters(\"Aesop's Fables\", animal).\n.output Answer\n\n", "completions": [".decl Has_family(Animal:symbol, Family:symbol)\nHas_family(\"dog\", \"Canidae\").\nHas_family(\"fox\", \"Canidae\").\nHas_family(\"wolf\", \"Canidae\").\n.decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Aesop's Fables\", \"Aesop\").\n.decl Has_characters(Book:symbol, Character:symbol)\nHas_characters(\"Aesop's Fables\", \"dog\").\nHas_characters(\"Aesop's Fables\", \"fox\").\nHas_characters(\"Aesop's Fables\", \"wolf\").\n.decl Answer()\nAnswer() :- Has_family(animal, \"Canidae\"), Has_author(\"Aesop's Fables\", \"Aesop\"), Has_characters(\"Aesop's Fables\", animal).\n.output Answer\n\n"]}
{"id": 253, "answer": false, "completion": ".decl Has_vitamin_c(Fruit:symbol, Vitamin_c:float)\nHas_vitamin_c(\"orange\", 53).\nHas_vitamin_c(\"lemon\", 53).\nHas_vitamin_c(\"grapefruit\", 39).\nHas_vitamin_c(\"lime\", 30).\nHas_vitamin_c(\"cantaloupe\", 29).\nHas_vitamin_c(\"strawberry\", 28).\nHas_vitamin_c(\"raspberry\", 28).\nHas_vitamin_c(\"pineapple\", 20).\nHas_vitamin_c(\"watermelon\", 18).\nHas_vitamin_c(\"peach\", 9).\nHas_vitamin_c(\"apple\", 8).\nHas_vitamin_c(\"banana\", 8).\nHas_vitamin_c(\"pear\", 7).\nHas_vitamin_c(\"grape\", 6).\nHas_vitamin_c(\"plum\", 5).\nHas_vitamin_c(\"cherry\", 5).\nHas_vitamin_c(\"apricot\", 4).\nHas_vitamin_c(\"mango\", 4).\nHas_vitamin_c(\"nectarine\", 4).\nHas_vitamin_c(\"blueberry\", 3).\nHas_vitamin_c(\"blackberry\", 3).\nHas_vitamin_c(\"cranberry\", 3).\nHas_vitamin_c(\"kiwi\", 2).\nHas_vitamin_c(\"papaya\", 2).\nHas_vitamin_c(\"guava\", 2).\nHas_vitamin_c(\"honeydew\", 2).\nHas_vitamin_c(\"prune\", 2).\nHas_vitamin_c(\"fig\", 2).\nHas_vitamin_c(\"date\", 2).\nHas_vitamin_c(\"persimmon\", 2).\nHas_vitamin_c(\"pomegranate\", 2).\nHas_vitamin_c(\"avocado\", 2).\nHas_vitamin_c(\"coconut\", 2).\nHas_vitamin_c(\"olive\", 2).\nHas_vitamin_c(\"peanut\", 2).\nHas_vitamin_c(\"almond\", 2).\nHas_vitamin_c(\"cashew\", 2).\nHas_vitamin_c(\"walnut\", 2).\nHas_vitamin_c(\"pistachio\", 2).\nHas_vitamin_c(\"pecan\", 2).\nHas_vitamin_c(\"macadamia\", 2).\nHas_vitamin_c(\"chestnut\", 2).\nHas_vitamin_c(\"brazil nut\", 2).\nHas_vitamin_c(\"hazelnut\", 2).\nHas_vitamin_c(\"pine nut\", 2).\nHas_vitamin_c(\"pumpkin\", 2).\nHas_vitamin_c(\"squash\", 2).\nHas_vitamin_c(\"zucchini\", 2).\nHas_vitamin_c(\"cucumber\", 2).\nHas_vitamin_c(\"tomato\", 2).\nHas_vitamin_c(\"eggplant\", 2).\nHas_vitamin_c(\"artichoke\", 2).\nHas_vitamin_c(\"asparagus\", 2).\nHas_vitamin_c(\"broccoli\", 2).\nHas_vitamin_c(\"cauliflower\", 2).\nHas_vitamin_c(\"cabbage\", 2).\nHas_vitamin_c(\"kale\", 2).\nHas_vitamin_c(\"spinach\", 2).\nHas_v", "completions": [".decl Has_vitamin_c(Fruit:symbol, Vitamin_c:float)\nHas_vitamin_c(\"orange\", 53).\nHas_vitamin_c(\"lemon\", 53).\nHas_vitamin_c(\"grapefruit\", 39).\nHas_vitamin_c(\"lime\", 30).\nHas_vitamin_c(\"cantaloupe\", 29).\nHas_vitamin_c(\"strawberry\", 28).\nHas_vitamin_c(\"raspberry\", 28).\nHas_vitamin_c(\"pineapple\", 20).\nHas_vitamin_c(\"watermelon\", 18).\nHas_vitamin_c(\"peach\", 9).\nHas_vitamin_c(\"apple\", 8).\nHas_vitamin_c(\"banana\", 8).\nHas_vitamin_c(\"pear\", 7).\nHas_vitamin_c(\"grape\", 6).\nHas_vitamin_c(\"plum\", 5).\nHas_vitamin_c(\"cherry\", 5).\nHas_vitamin_c(\"apricot\", 4).\nHas_vitamin_c(\"mango\", 4).\nHas_vitamin_c(\"nectarine\", 4).\nHas_vitamin_c(\"blueberry\", 3).\nHas_vitamin_c(\"blackberry\", 3).\nHas_vitamin_c(\"cranberry\", 3).\nHas_vitamin_c(\"kiwi\", 2).\nHas_vitamin_c(\"papaya\", 2).\nHas_vitamin_c(\"guava\", 2).\nHas_vitamin_c(\"honeydew\", 2).\nHas_vitamin_c(\"prune\", 2).\nHas_vitamin_c(\"fig\", 2).\nHas_vitamin_c(\"date\", 2).\nHas_vitamin_c(\"persimmon\", 2).\nHas_vitamin_c(\"pomegranate\", 2).\nHas_vitamin_c(\"avocado\", 2).\nHas_vitamin_c(\"coconut\", 2).\nHas_vitamin_c(\"olive\", 2).\nHas_vitamin_c(\"peanut\", 2).\nHas_vitamin_c(\"almond\", 2).\nHas_vitamin_c(\"cashew\", 2).\nHas_vitamin_c(\"walnut\", 2).\nHas_vitamin_c(\"pistachio\", 2).\nHas_vitamin_c(\"pecan\", 2).\nHas_vitamin_c(\"macadamia\", 2).\nHas_vitamin_c(\"chestnut\", 2).\nHas_vitamin_c(\"brazil nut\", 2).\nHas_vitamin_c(\"hazelnut\", 2).\nHas_vitamin_c(\"pine nut\", 2).\nHas_vitamin_c(\"pumpkin\", 2).\nHas_vitamin_c(\"squash\", 2).\nHas_vitamin_c(\"zucchini\", 2).\nHas_vitamin_c(\"cucumber\", 2).\nHas_vitamin_c(\"tomato\", 2).\nHas_vitamin_c(\"eggplant\", 2).\nHas_vitamin_c(\"artichoke\", 2).\nHas_vitamin_c(\"asparagus\", 2).\nHas_vitamin_c(\"broccoli\", 2).\nHas_vitamin_c(\"cauliflower\", 2).\nHas_vitamin_c(\"cabbage\", 2).\nHas_vitamin_c(\"kale\", 2).\nHas_vitamin_c(\"spinach\", 2).\nHas_v"]}
{"id": 254, "answer": true, "completion": ".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"cannon\", \"bronze\").\nHas_material(\"cannon\", \"iron\").\nHas_material(\"cannon\", \"wood\").\n.decl Known_during(Material:symbol, Time:symbol)\nKnown_during(\"bronze\", \"bronze age\").\nKnown_during(\"iron\", \"iron age\").\nKnown_during(\"wood\", \"stone age\").\n.decl Answer()\nAnswer() :- Has_material(\"cannon\", material), Known_during(material, \"bronze age\").\n.output Answer\n\n", "completions": [".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"cannon\", \"bronze\").\nHas_material(\"cannon\", \"iron\").\nHas_material(\"cannon\", \"wood\").\n.decl Known_during(Material:symbol, Time:symbol)\nKnown_during(\"bronze\", \"bronze age\").\nKnown_during(\"iron\", \"iron age\").\nKnown_during(\"wood\", \"stone age\").\n.decl Answer()\nAnswer() :- Has_material(\"cannon\", material), Known_during(material, \"bronze age\").\n.output Answer\n\n"]}
{"id": 255, "answer": true, "completion": ".decl Is_president(Person:symbol, Country:symbol)\nIs_president(\"Barack Obama\", \"United States\").\n.decl Is_known_for(Person:symbol, Activity:symbol)\nIs_known_for(\"Barack Obama\", \"painting\").\n.decl Is_democrat(Person:symbol)\nIs_democrat(\"Barack Obama\").\n.decl Answer()\nAnswer() :- Is_president(person, \"United States\"), Is_known_for(person, \"painting\"), Is_democrat(person).\n.output Answer\n\n", "completions": [".decl Is_president(Person:symbol, Country:symbol)\nIs_president(\"Barack Obama\", \"United States\").\n.decl Is_known_for(Person:symbol, Activity:symbol)\nIs_known_for(\"Barack Obama\", \"painting\").\n.decl Is_democrat(Person:symbol)\nIs_democrat(\"Barack Obama\").\n.decl Answer()\nAnswer() :- Is_president(person, \"United States\"), Is_known_for(person, \"painting\"), Is_democrat(person).\n.output Answer\n\n"]}
{"id": 256, "answer": true, "completion": ".decl Advocates(Person:symbol, Action:symbol)\nAdvocates(\"environmentalist\", \"preventing domestic canine reproduction\").\n.decl Answer()\nAnswer() :- Advocates(\"environmentalist\", \"preventing domestic canine reproduction\").\n.output Answer\n\n", "completions": [".decl Advocates(Person:symbol, Action:symbol)\nAdvocates(\"environmentalist\", \"preventing domestic canine reproduction\").\n.decl Answer()\nAnswer() :- Advocates(\"environmentalist\", \"preventing domestic canine reproduction\").\n.output Answer\n\n"]}
{"id": 257, "answer": true, "completion": ".decl Has_iterations(Phone:symbol, Iterations:float)\nHas_iterations(\"Iphone\", 10).\nHas_iterations(\"Samsung Galaxy\", 5).\n.decl Answer()\nAnswer() :- Has_iterations(\"Iphone\", iterations1), Has_iterations(\"Samsung Galaxy\", iterations2), iterations1 > iterations2.\n.output Answer\n\n", "completions": [".decl Has_iterations(Phone:symbol, Iterations:float)\nHas_iterations(\"Iphone\", 10).\nHas_iterations(\"Samsung Galaxy\", 5).\n.decl Answer()\nAnswer() :- Has_iterations(\"Iphone\", iterations1), Has_iterations(\"Samsung Galaxy\", iterations2), iterations1 > iterations2.\n.output Answer\n\n"]}
{"id": 258, "answer": true, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"central processing unit\", \"fan\").\n.decl Answer()\nAnswer() :- Has_part(\"central processing unit\", \"fan\").\n.output Answer\n\n", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"central processing unit\", \"fan\").\n.decl Answer()\nAnswer() :- Has_part(\"central processing unit\", \"fan\").\n.output Answer\n\n"]}
{"id": 259, "answer": true, "completion": ".decl Has_hair(Person:symbol, Hair:symbol)\nHas_hair(\"Christopher Hitchens\", \"long\").\n.decl Answer()\nAnswer() :- Has_hair(\"Christopher Hitchens\", \"long\").\n.output Answer\n\n", "completions": [".decl Has_hair(Person:symbol, Hair:symbol)\nHas_hair(\"Christopher Hitchens\", \"long\").\n.decl Answer()\nAnswer() :- Has_hair(\"Christopher Hitchens\", \"long\").\n.output Answer\n\n"]}
{"id": 260, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"diamond\", 3.5).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"diamond\", density1), Has_density(\"water\", density2), density1 < density2.\n.output Answer\n\n\n", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"diamond\", 3.5).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"diamond\", density1), Has_density(\"water\", density2), density1 < density2.\n.output Answer\n\n\n"]}
{"id": 261, "answer": true, "completion": ".decl Employs(Employer:symbol, Employee:symbol)\nEmploys(\"Walt Disney\", \"Ub Iwerks\").\n.decl Has_brother(Person:symbol, Brother:symbol)\nHas_brother(\"Ub Iwerks\", \"Cecil Iwerks\").\n.decl Commits(Person:symbol, Offense:symbol)\nCommits(\"Cecil Iwerks\", \"excommunicable offense\").\n.decl Answer()\nAnswer() :- Employs(employer, \"Ub Iwerks\"), Has_brother(\"Ub Iwerks\", brother), Commits(brother, \"excommunicable offense\").\n.output Answer\n\n", "completions": [".decl Employs(Employer:symbol, Employee:symbol)\nEmploys(\"Walt Disney\", \"Ub Iwerks\").\n.decl Has_brother(Person:symbol, Brother:symbol)\nHas_brother(\"Ub Iwerks\", \"Cecil Iwerks\").\n.decl Commits(Person:symbol, Offense:symbol)\nCommits(\"Cecil Iwerks\", \"excommunicable offense\").\n.decl Answer()\nAnswer() :- Employs(employer, \"Ub Iwerks\"), Has_brother(\"Ub Iwerks\", brother), Commits(brother, \"excommunicable offense\").\n.output Answer\n\n"]}
{"id": 262, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"nickel\", 0.000001).\nHas_volume(\"koala pouch\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"nickel\", volume1), Has_volume(\"koala pouch\", volume2), volume1 < volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"nickel\", 0.000001).\nHas_volume(\"koala pouch\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"nickel\", volume1), Has_volume(\"koala pouch\", volume2), volume1 < volume2.\n.output Answer\n\n"]}
{"id": 263, "answer": false, "completion": ".decl Prays_over(Person:symbol, Book:symbol)\nPrays_over(\"Dave Chappelle\", \"Bible\").\n.decl Answer()\nAnswer() :- Prays_over(\"Dave Chappelle\", \"Quran\").\n.output Answer\n\n", "completions": [".decl Prays_over(Person:symbol, Book:symbol)\nPrays_over(\"Dave Chappelle\", \"Bible\").\n.decl Answer()\nAnswer() :- Prays_over(\"Dave Chappelle\", \"Quran\").\n.output Answer\n\n"]}
{"id": 264, "answer": false, "completion": ".decl Has_name(Thing:symbol, Name:symbol)\nHas_name(\"C-SPAN\", \"C-SPAN\").\nHas_name(\"Alan Greenspan\", \"Alan Greenspan\").\n.decl Answer()\nAnswer() :- Has_name(\"C-SPAN\", name1), Has_name(\"Alan Greenspan\", name2), name1 = name2.\n.output Answer\n\n", "completions": [".decl Has_name(Thing:symbol, Name:symbol)\nHas_name(\"C-SPAN\", \"C-SPAN\").\nHas_name(\"Alan Greenspan\", \"Alan Greenspan\").\n.decl Answer()\nAnswer() :- Has_name(\"C-SPAN\", name1), Has_name(\"Alan Greenspan\", name2), name1 = name2.\n.output Answer\n\n"]}
{"id": 265, "answer": true, "completion": ".decl Requires(Game:symbol, Resource:symbol)\nRequires(\"Final Fantasy VI\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"Final Fantasy VI\", \"electricity\").\n.output Answer\n\n", "completions": [".decl Requires(Game:symbol, Resource:symbol)\nRequires(\"Final Fantasy VI\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"Final Fantasy VI\", \"electricity\").\n.output Answer\n\n"]}
{"id": 266, "answer": true, "completion": ".decl Wrote(Person:symbol, Work:symbol)\nWrote(\"Sartre\", \"No Exit\").\n.decl Is_about(Work:symbol, Topic:symbol)\nIs_about(\"No Exit\", \"Hell\").\n.decl Answer()\nAnswer() :- Wrote(\"Sartre\", work), Is_about(work, \"Hell\").\n.output Answer\n\n", "completions": [".decl Wrote(Person:symbol, Work:symbol)\nWrote(\"Sartre\", \"No Exit\").\n.decl Is_about(Work:symbol, Topic:symbol)\nIs_about(\"No Exit\", \"Hell\").\n.decl Answer()\nAnswer() :- Wrote(\"Sartre\", work), Is_about(work, \"Hell\").\n.output Answer\n\n"]}
{"id": 267, "answer": false, "completion": ".decl Has_members(Group:symbol, Member:symbol)\nHas_members(\"NFL teams\", \"football players\").\nHas_members(\"infantry\", \"soldiers\").\n.decl Answer()\nAnswer() :- Has_members(\"NFL teams\", member1), Has_members(\"infantry\", member2), member1 = member2.\n.output Answer\n\n", "completions": [".decl Has_members(Group:symbol, Member:symbol)\nHas_members(\"NFL teams\", \"football players\").\nHas_members(\"infantry\", \"soldiers\").\n.decl Answer()\nAnswer() :- Has_members(\"NFL teams\", member1), Has_members(\"infantry\", member2), member1 = member2.\n.output Answer\n\n"]}
{"id": 268, "answer": true, "completion": ".decl Has_n_stripes(Flag:symbol, N_stripes:float)\nHas_n_stripes(\"American flag\", 13).\n.decl Has_n_voice_actors(Character:symbol, N_voice_actors:float)\nHas_n_voice_actors(\"Goofy\", 2).\nHas_n_voice_actors(\"Bugs Bunny\", 2).\n.decl Answer()\nAnswer() :- Has_n_stripes(\"American flag\", n_stripes), Has_n_voice_actors(\"Goofy\", n_voice_actors1), Has_n_voice_actors(\"Bugs Bunny\", n_voice_actors2), n_stripes >= n_voice_actors1 + n_voice_actors2.\n.output Answer\n\n\n", "completions": [".decl Has_n_stripes(Flag:symbol, N_stripes:float)\nHas_n_stripes(\"American flag\", 13).\n.decl Has_n_voice_actors(Character:symbol, N_voice_actors:float)\nHas_n_voice_actors(\"Goofy\", 2).\nHas_n_voice_actors(\"Bugs Bunny\", 2).\n.decl Answer()\nAnswer() :- Has_n_stripes(\"American flag\", n_stripes), Has_n_voice_actors(\"Goofy\", n_voice_actors1), Has_n_voice_actors(\"Bugs Bunny\", n_voice_actors2), n_stripes >= n_voice_actors1 + n_voice_actors2.\n.output Answer\n\n\n"]}
{"id": 269, "answer": true, "completion": ".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"Europa\", -160).\nHas_temperature(\"egg\", 70).\n.decl Answer()\nAnswer() :- Has_temperature(\"Europa\", temperature1), Has_temperature(\"egg\", temperature2), temperature1 < temperature2.\n.output Answer\n\n", "completions": [".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"Europa\", -160).\nHas_temperature(\"egg\", 70).\n.decl Answer()\nAnswer() :- Has_temperature(\"Europa\", temperature1), Has_temperature(\"egg\", temperature2), temperature1 < temperature2.\n.output Answer\n\n"]}
{"id": 270, "answer": true, "completion": ".decl Has_n_episodes(TV_show:symbol, N_episodes:float)\nHas_n_episodes(\"The Joy of Painting\", 403).\n.decl Has_n_seasons(TV_show:symbol, N_seasons:float)\nHas_n_seasons(\"The Joy of Painting\", 1).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"The Joy of Painting\", n_episodes), Has_n_seasons(\"The Joy of Painting\", n_seasons), n_episodes > n_seasons.\n.output Answer\n\n", "completions": [".decl Has_n_episodes(TV_show:symbol, N_episodes:float)\nHas_n_episodes(\"The Joy of Painting\", 403).\n.decl Has_n_seasons(TV_show:symbol, N_seasons:float)\nHas_n_seasons(\"The Joy of Painting\", 1).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"The Joy of Painting\", n_episodes), Has_n_seasons(\"The Joy of Painting\", n_seasons), n_episodes > n_seasons.\n.output Answer\n\n"]}
{"id": 271, "answer": false, "completion": ".decl Owns(Company_A:symbol, Company_B:symbol)\nOwns(\"Disney\", \"Marvel\").\n.decl Is_major(Company:symbol)\nIs_major(\"Marvel\").\n.decl Is_comic_book_publisher(Company:symbol)\nIs_comic_book_publisher(\"Marvel\").\n.decl Answer()\nAnswer() :- Owns(company, \"Marvel\"), Is_major(company), Is_comic_book_publisher(company).\n.output Answer\n\n", "completions": [".decl Owns(Company_A:symbol, Company_B:symbol)\nOwns(\"Disney\", \"Marvel\").\n.decl Is_major(Company:symbol)\nIs_major(\"Marvel\").\n.decl Is_comic_book_publisher(Company:symbol)\nIs_comic_book_publisher(\"Marvel\").\n.decl Answer()\nAnswer() :- Owns(company, \"Marvel\"), Is_major(company), Is_comic_book_publisher(company).\n.output Answer\n\n"]}
{"id": 272, "answer": true, "completion": ".decl Has_survival_rate(Country:symbol, Survival_rate:float)\nHas_survival_rate(\"Japan\", 0.9).\nHas_survival_rate(\"Sweden\", 0.8).\n.decl Answer()\nAnswer() :- Has_survival_rate(\"Japan\", survival_rate1), Has_survival_rate(\"Sweden\", survival_rate2), survival_rate1 > survival_rate2.\n.output Answer\n\n", "completions": [".decl Has_survival_rate(Country:symbol, Survival_rate:float)\nHas_survival_rate(\"Japan\", 0.9).\nHas_survival_rate(\"Sweden\", 0.8).\n.decl Answer()\nAnswer() :- Has_survival_rate(\"Japan\", survival_rate1), Has_survival_rate(\"Sweden\", survival_rate2), survival_rate1 > survival_rate2.\n.output Answer\n\n"]}
{"id": 273, "answer": true, "completion": ".decl Inspires(Mythology:symbol, Author:symbol)\nInspires(\"Irish mythology\", \"Washington Irving\").\n.decl Answer()\nAnswer() :- Inspires(\"Irish mythology\", \"Washington Irving\").\n.output Answer\n\n", "completions": [".decl Inspires(Mythology:symbol, Author:symbol)\nInspires(\"Irish mythology\", \"Washington Irving\").\n.decl Answer()\nAnswer() :- Inspires(\"Irish mythology\", \"Washington Irving\").\n.output Answer\n\n"]}
{"id": 274, "answer": true, "completion": ".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"tibia\", \"leg\").\nIs_part_of(\"leg\", \"body\").\n.decl Is_required_for(Part:symbol, Activity:symbol)\nIs_required_for(\"leg\", \"floor exercises\").\n.decl Answer()\nAnswer() :- Is_part_of(part, \"body\"), Is_required_for(part, \"floor exercises\").\n.output Answer\n\n\n", "completions": [".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"tibia\", \"leg\").\nIs_part_of(\"leg\", \"body\").\n.decl Is_required_for(Part:symbol, Activity:symbol)\nIs_required_for(\"leg\", \"floor exercises\").\n.decl Answer()\nAnswer() :- Is_part_of(part, \"body\"), Is_required_for(part, \"floor exercises\").\n.output Answer\n\n\n"]}
{"id": 275, "answer": true, "completion": ".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Emma Roberts\", \"actress\").\n.decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Emma Roberts\", \"Nancy Drew\").\n.decl Is_a(Role:symbol, Occupation:symbol)\nIs_a(\"Nancy Drew\", \"private investigator\").\n.decl Answer()\nAnswer() :- Has_occupation(\"Emma Roberts\", \"actress\"), Has_role(\"Emma Roberts\", role), Is_a(role, \"private investigator\").\n.output Answer\n\n", "completions": [".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Emma Roberts\", \"actress\").\n.decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Emma Roberts\", \"Nancy Drew\").\n.decl Is_a(Role:symbol, Occupation:symbol)\nIs_a(\"Nancy Drew\", \"private investigator\").\n.decl Answer()\nAnswer() :- Has_occupation(\"Emma Roberts\", \"actress\"), Has_role(\"Emma Roberts\", role), Is_a(role, \"private investigator\").\n.output Answer\n\n"]}
{"id": 276, "answer": false, "completion": ".decl Is_minor(Person:symbol)\nIs_minor(\"minor\").\n.decl Is_adult(Person:symbol)\nIs_adult(\"adult\").\n.decl Can_replicate(Person:symbol, Experiment:symbol)\nCan_replicate(\"adult\", \"double-slit experiment\").\n.decl Answer()\nAnswer() :- Is_minor(person), Can_replicate(person, \"double-slit experiment\").\n.output Answer\n\n", "completions": [".decl Is_minor(Person:symbol)\nIs_minor(\"minor\").\n.decl Is_adult(Person:symbol)\nIs_adult(\"adult\").\n.decl Can_replicate(Person:symbol, Experiment:symbol)\nCan_replicate(\"adult\", \"double-slit experiment\").\n.decl Answer()\nAnswer() :- Is_minor(person), Can_replicate(person, \"double-slit experiment\").\n.output Answer\n\n"]}
{"id": 277, "answer": true, "completion": ".decl Has_category(Nobel_prize:symbol, Category:symbol)\nHas_category(\"Nobel Prize in Physics\", \"physics\").\nHas_category(\"Nobel Prize in Chemistry\", \"chemistry\").\nHas_category(\"Nobel Prize in Physiology or Medicine\", \"physiology or medicine\").\nHas_category(\"Nobel Prize in Literature\", \"literature\").\nHas_category(\"Nobel Peace Prize\", \"peace\").\nHas_category(\"Nobel Memorial Prize in Economic Sciences\", \"economics\").\n.decl Established_by(Nobel_prize:symbol, Person:symbol)\nEstablished_by(\"Nobel Prize in Physics\", \"Alfred Nobel\").\nEstablished_by(\"Nobel Prize in Chemistry\", \"Alfred Nobel\").\nEstablished_by(\"Nobel Prize in Physiology or Medicine\", \"Alfred Nobel\").\nEstablished_by(\"Nobel Prize in Literature\", \"Alfred Nobel\").\nEstablished_by(\"Nobel Peace Prize\", \"Alfred Nobel\").\nEstablished_by(\"Nobel Memorial Prize in Economic Sciences\", \"Alfred Nobel\").\n.decl Answer()\nAnswer() :- Has_category(nobel_prize1, category1), Has_category(nobel_prize2, category2), Established_by(nobel_prize1, \"Alfred Nobel\"), Established_by(nobel_prize2, \"Alfred Nobel\"), category1 = category2.\n.output Answer\n\n", "completions": [".decl Has_category(Nobel_prize:symbol, Category:symbol)\nHas_category(\"Nobel Prize in Physics\", \"physics\").\nHas_category(\"Nobel Prize in Chemistry\", \"chemistry\").\nHas_category(\"Nobel Prize in Physiology or Medicine\", \"physiology or medicine\").\nHas_category(\"Nobel Prize in Literature\", \"literature\").\nHas_category(\"Nobel Peace Prize\", \"peace\").\nHas_category(\"Nobel Memorial Prize in Economic Sciences\", \"economics\").\n.decl Established_by(Nobel_prize:symbol, Person:symbol)\nEstablished_by(\"Nobel Prize in Physics\", \"Alfred Nobel\").\nEstablished_by(\"Nobel Prize in Chemistry\", \"Alfred Nobel\").\nEstablished_by(\"Nobel Prize in Physiology or Medicine\", \"Alfred Nobel\").\nEstablished_by(\"Nobel Prize in Literature\", \"Alfred Nobel\").\nEstablished_by(\"Nobel Peace Prize\", \"Alfred Nobel\").\nEstablished_by(\"Nobel Memorial Prize in Economic Sciences\", \"Alfred Nobel\").\n.decl Answer()\nAnswer() :- Has_category(nobel_prize1, category1), Has_category(nobel_prize2, category2), Established_by(nobel_prize1, \"Alfred Nobel\"), Established_by(nobel_prize2, \"Alfred Nobel\"), category1 = category2.\n.output Answer\n\n"]}
{"id": 278, "answer": false, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"members of the Green Party of England and Wales\", \"England\").\n.decl Votes_in(Person:symbol, Country:symbol)\nVotes_in(\"members of the Green Party of England and Wales\", \"England\").\n.decl Answer()\nAnswer() :- Has_citizenship(person, \"USA\"), Votes_in(person, \"USA\").\n.output Answer\n\n", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"members of the Green Party of England and Wales\", \"England\").\n.decl Votes_in(Person:symbol, Country:symbol)\nVotes_in(\"members of the Green Party of England and Wales\", \"England\").\n.decl Answer()\nAnswer() :- Has_citizenship(person, \"USA\"), Votes_in(person, \"USA\").\n.output Answer\n\n"]}
{"id": 279, "answer": false, "completion": ".decl Has_fate(Person:symbol, Fate:symbol)\nHas_fate(\"Alan Turing\", \"suicide\").\nHas_fate(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- Has_fate(\"Alan Turing\", fate), Has_fate(\"Abraham Lincoln\", fate).\n.output Answer\n\n", "completions": [".decl Has_fate(Person:symbol, Fate:symbol)\nHas_fate(\"Alan Turing\", \"suicide\").\nHas_fate(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- Has_fate(\"Alan Turing\", fate), Has_fate(\"Abraham Lincoln\", fate).\n.output Answer\n\n"]}
{"id": 280, "answer": true, "completion": ".decl Has_catch_phrase(Person:symbol, Catch_phrase:symbol)\nHas_catch_phrase(\"Rand Paul\", \"I voted for the 87 billion before I voted against it\").\nHas_catch_phrase(\"John Kerry\", \"I voted for the 87 billion before I voted against it\").\n.decl Answer()\nAnswer() :- Has_catch_phrase(\"Rand Paul\", \"I voted for the 87 billion before I voted against it\").\n.output Answer\n\n", "completions": [".decl Has_catch_phrase(Person:symbol, Catch_phrase:symbol)\nHas_catch_phrase(\"Rand Paul\", \"I voted for the 87 billion before I voted against it\").\nHas_catch_phrase(\"John Kerry\", \"I voted for the 87 billion before I voted against it\").\n.decl Answer()\nAnswer() :- Has_catch_phrase(\"Rand Paul\", \"I voted for the 87 billion before I voted against it\").\n.output Answer\n\n"]}
{"id": 281, "answer": false, "completion": ".decl Is_edible(Object:symbol)\nIs_edible(\"apple\").\nIs_edible(\"pear\").\nIs_edible(\"banana\").\n.decl Answer()\nAnswer() :- Is_edible(\"argon\").\n.output Answer\n\n", "completions": [".decl Is_edible(Object:symbol)\nIs_edible(\"apple\").\nIs_edible(\"pear\").\nIs_edible(\"banana\").\n.decl Answer()\nAnswer() :- Is_edible(\"argon\").\n.output Answer\n\n"]}
{"id": 282, "answer": true, "completion": ".decl Has_success(Person:symbol, Success:symbol)\nHas_success(\"Lucille Ball\", \"successful\").\n.decl Answer()\nAnswer() :- Has_success(\"Lucille Ball\", \"successful\").\n.output Answer\n\n", "completions": [".decl Has_success(Person:symbol, Success:symbol)\nHas_success(\"Lucille Ball\", \"successful\").\n.decl Answer()\nAnswer() :- Has_success(\"Lucille Ball\", \"successful\").\n.output Answer\n\n"]}
{"id": 283, "answer": false, "completion": ".decl Used_in(Material:symbol, Product:symbol)\nUsed_in(\"oysters\", \"pearls\").\nUsed_in(\"pearls\", \"guitars\").\n.decl Answer()\nAnswer() :- Used_in(\"oysters\", \"guitars\").\n.output Answer\n\n", "completions": [".decl Used_in(Material:symbol, Product:symbol)\nUsed_in(\"oysters\", \"pearls\").\nUsed_in(\"pearls\", \"guitars\").\n.decl Answer()\nAnswer() :- Used_in(\"oysters\", \"guitars\").\n.output Answer\n\n"]}
{"id": 284, "answer": false, "completion": ".decl Has_instrument(Person:symbol, Instrument:symbol)\nHas_instrument(\"James Cotton\", \"harmonica\").\n.decl Has_genre(Band:symbol, Genre:symbol)\nHas_genre(\"smooth jazz band\", \"smooth jazz\").\n.decl Is_instrument_of_genre(Instrument:symbol, Genre:symbol)\nIs_instrument_of_genre(\"harmonica\", \"blues\").\nIs_instrument_of_genre(\"harmonica\", \"rock\").\n.decl Answer()\nAnswer() :- Has_instrument(\"James Cotton\", instrument), Has_genre(\"smooth jazz band\", genre), Is_instrument_of_genre(instrument, genre).\n.output Answer\n\n", "completions": [".decl Has_instrument(Person:symbol, Instrument:symbol)\nHas_instrument(\"James Cotton\", \"harmonica\").\n.decl Has_genre(Band:symbol, Genre:symbol)\nHas_genre(\"smooth jazz band\", \"smooth jazz\").\n.decl Is_instrument_of_genre(Instrument:symbol, Genre:symbol)\nIs_instrument_of_genre(\"harmonica\", \"blues\").\nIs_instrument_of_genre(\"harmonica\", \"rock\").\n.decl Answer()\nAnswer() :- Has_instrument(\"James Cotton\", instrument), Has_genre(\"smooth jazz band\", genre), Is_instrument_of_genre(instrument, genre).\n.output Answer\n\n"]}
{"id": 285, "answer": true, "completion": ".decl Has_class(Animal:symbol, Class:symbol)\nHas_class(\"emu\", \"bird\").\nHas_class(\"elk\", \"mammal\").\n.decl Answer()\nAnswer() :- Has_class(\"emu\", class1), Has_class(\"elk\", class2), class1 != class2.\n.output Answer\n\n", "completions": [".decl Has_class(Animal:symbol, Class:symbol)\nHas_class(\"emu\", \"bird\").\nHas_class(\"elk\", \"mammal\").\n.decl Answer()\nAnswer() :- Has_class(\"emu\", class1), Has_class(\"elk\", class2), class1 != class2.\n.output Answer\n\n"]}
{"id": 286, "answer": true, "completion": ".decl Is_in_museum(Artwork:symbol, Museum:symbol)\nIs_in_museum(\"Mona Lisa\", \"Louvre\").\nIs_in_museum(\"Venus de Milo\", \"Louvre\").\n.decl Answer()\nAnswer() :- Is_in_museum(\"Mona Lisa\", museum), Is_in_museum(\"Venus de Milo\", museum).\n.output Answer\n\n", "completions": [".decl Is_in_museum(Artwork:symbol, Museum:symbol)\nIs_in_museum(\"Mona Lisa\", \"Louvre\").\nIs_in_museum(\"Venus de Milo\", \"Louvre\").\n.decl Answer()\nAnswer() :- Is_in_museum(\"Mona Lisa\", museum), Is_in_museum(\"Venus de Milo\", museum).\n.output Answer\n\n"]}
{"id": 287, "answer": false, "completion": ".decl Is_descendant_of(Person:symbol, Ancestor:symbol)\nIs_descendant_of(\"John Adams\", \"John Quincy Adams\").\nIs_descendant_of(\"John Quincy Adams\", \"Charles Francis Adams\").\nIs_descendant_of(\"Charles Francis Adams\", \"Brooks Adams\").\nIs_descendant_of(\"Brooks Adams\", \"John Adams II\").\nIs_descendant_of(\"John Adams II\", \"Charles Francis Adams II\").\nIs_descendant_of(\"Charles Francis Adams II\", \"John Quincy Adams II\").\nIs_descendant_of(\"John Quincy Adams II\", \"Charles Francis Adams III\").\nIs_descendant_of(\"Charles Francis Adams III\", \"John Adams III\").\nIs_descendant_of(\"John Adams III\", \"John Adams IV\").\nIs_descendant_of(\"John Adams IV\", \"John Adams V\").\nIs_descendant_of(\"John Adams V\", \"John Adams VI\").\nIs_descendant_of(\"John Adams VI\", \"John Adams VII\").\nIs_descendant_of(\"John Adams VII\", \"John Adams VIII\").\nIs_descendant_of(\"John Adams VIII\", \"John Adams IX\").\nIs_descendant_of(\"John Adams IX\", \"John Adams X\").\nIs_descendant_of(\"John Adams X\", \"John Adams XI\").\nIs_descendant_of(\"John Adams XI\", \"John Adams XII\").\nIs_descendant_of(\"John Adams XII\", \"John Adams XIII\").\nIs_descendant_of(\"John Adams XIII\", \"John Adams XIV\").\nIs_descendant_of(\"John Adams XIV\", \"John Adams XV\").\nIs_descendant_of(\"John Adams XV\", \"John Adams XVI\").\nIs_descendant_of(\"John Adams XVI\", \"John Adams XVII\").\nIs_descendant_of(\"John Adams XVII\", \"John Adams XVIII\").\nIs_descendant_of(\"John Adams XVIII\", \"John Adams XIX\").\nIs_descendant_of(\"John Adams XIX\", \"John Adams XX\").\nIs_descendant_of(\"John Adams XX\", \"John Adams XXI\").\nIs_descendant_of(\"John Adams XXI\", \"John Adams XXII\").\nIs_descendant_of(\"John Adams XXII\", \"John Adams XXIII\").\nIs_descendant_of(\"John Adams XXIII\", \"John Adams XXIV\").\nIs_descendant_of(\"John Adams XXIV\", \"John Adams XXV\").\nIs_descendant_of(\"John Adams XXV\", \"John Adams XXVI\").\nIs_descendant_of(\"John Adams XXVI\", \"John Adams XXVII\").\nIs_descendant_of(\"John Adams XXVII\", \"John Adams XXVIII\").\nIs_descendant_of(\"John Adams XXVIII\", \"John Adams XXIX\").\nIs_descendant_of(\"John Adams XXIX\", \"John Adams XXX\").\nIs_descendant_of(\"John Adams XXX\", \"John Adams XXXI\").\nIs_descendant_of(\"John Adams XXXI\", \"John Adams XXXII\").\nIs_descendant_of(\"John Adams XXXII\", \"John Adams XXXIII\").\nIs_descendant_of(\"John Adams XXXIII\", \"John Adams XXXIV\").\nIs_descendant_of(\"John Adams XXXIV\", \"John Adams XXXV\").\nIs_descendant_of(\"John Adams XXXV\", \"John Adams XXXVI\").\nIs_descendant_of(\"John Adams XXXVI\", \"John Adams XXXVII\").\nIs_descendant_of(\"John Adams XXXVII\", \"John Adams XXXVIII\").\n", "completions": [".decl Is_descendant_of(Person:symbol, Ancestor:symbol)\nIs_descendant_of(\"John Adams\", \"John Quincy Adams\").\nIs_descendant_of(\"John Quincy Adams\", \"Charles Francis Adams\").\nIs_descendant_of(\"Charles Francis Adams\", \"Brooks Adams\").\nIs_descendant_of(\"Brooks Adams\", \"John Adams II\").\nIs_descendant_of(\"John Adams II\", \"Charles Francis Adams II\").\nIs_descendant_of(\"Charles Francis Adams II\", \"John Quincy Adams II\").\nIs_descendant_of(\"John Quincy Adams II\", \"Charles Francis Adams III\").\nIs_descendant_of(\"Charles Francis Adams III\", \"John Adams III\").\nIs_descendant_of(\"John Adams III\", \"John Adams IV\").\nIs_descendant_of(\"John Adams IV\", \"John Adams V\").\nIs_descendant_of(\"John Adams V\", \"John Adams VI\").\nIs_descendant_of(\"John Adams VI\", \"John Adams VII\").\nIs_descendant_of(\"John Adams VII\", \"John Adams VIII\").\nIs_descendant_of(\"John Adams VIII\", \"John Adams IX\").\nIs_descendant_of(\"John Adams IX\", \"John Adams X\").\nIs_descendant_of(\"John Adams X\", \"John Adams XI\").\nIs_descendant_of(\"John Adams XI\", \"John Adams XII\").\nIs_descendant_of(\"John Adams XII\", \"John Adams XIII\").\nIs_descendant_of(\"John Adams XIII\", \"John Adams XIV\").\nIs_descendant_of(\"John Adams XIV\", \"John Adams XV\").\nIs_descendant_of(\"John Adams XV\", \"John Adams XVI\").\nIs_descendant_of(\"John Adams XVI\", \"John Adams XVII\").\nIs_descendant_of(\"John Adams XVII\", \"John Adams XVIII\").\nIs_descendant_of(\"John Adams XVIII\", \"John Adams XIX\").\nIs_descendant_of(\"John Adams XIX\", \"John Adams XX\").\nIs_descendant_of(\"John Adams XX\", \"John Adams XXI\").\nIs_descendant_of(\"John Adams XXI\", \"John Adams XXII\").\nIs_descendant_of(\"John Adams XXII\", \"John Adams XXIII\").\nIs_descendant_of(\"John Adams XXIII\", \"John Adams XXIV\").\nIs_descendant_of(\"John Adams XXIV\", \"John Adams XXV\").\nIs_descendant_of(\"John Adams XXV\", \"John Adams XXVI\").\nIs_descendant_of(\"John Adams XXVI\", \"John Adams XXVII\").\nIs_descendant_of(\"John Adams XXVII\", \"John Adams XXVIII\").\nIs_descendant_of(\"John Adams XXVIII\", \"John Adams XXIX\").\nIs_descendant_of(\"John Adams XXIX\", \"John Adams XXX\").\nIs_descendant_of(\"John Adams XXX\", \"John Adams XXXI\").\nIs_descendant_of(\"John Adams XXXI\", \"John Adams XXXII\").\nIs_descendant_of(\"John Adams XXXII\", \"John Adams XXXIII\").\nIs_descendant_of(\"John Adams XXXIII\", \"John Adams XXXIV\").\nIs_descendant_of(\"John Adams XXXIV\", \"John Adams XXXV\").\nIs_descendant_of(\"John Adams XXXV\", \"John Adams XXXVI\").\nIs_descendant_of(\"John Adams XXXVI\", \"John Adams XXXVII\").\nIs_descendant_of(\"John Adams XXXVII\", \"John Adams XXXVIII\").\n"]}
{"id": 288, "answer": true, "completion": ".decl Has_n_sequels(Movie:symbol, N_sequels:float)\nHas_n_sequels(\"Gremlins\", 2).\nHas_n_sequels(\"The Matrix\", 2).\n.decl Answer()\nAnswer() :- Has_n_sequels(\"Gremlins\", n_sequels1), Has_n_sequels(\"The Matrix\", n_sequels2), n_sequels1 = n_sequels2.\n.output Answer\n\n", "completions": [".decl Has_n_sequels(Movie:symbol, N_sequels:float)\nHas_n_sequels(\"Gremlins\", 2).\nHas_n_sequels(\"The Matrix\", 2).\n.decl Answer()\nAnswer() :- Has_n_sequels(\"Gremlins\", n_sequels1), Has_n_sequels(\"The Matrix\", n_sequels2), n_sequels1 = n_sequels2.\n.output Answer\n\n"]}
{"id": 289, "answer": true, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Tony Stark\", \"engineer\").\nHas_profession(\"Tony Stark\", \"inventor\").\nHas_profession(\"Tony Stark\", \"businessperson\").\nHas_profession(\"Tony Stark\", \"playboy\").\n.decl Answer()\nAnswer() :- Has_profession(\"Tony Stark\", profession1), Has_profession(\"Tony Stark\", profession2), profession1 != profession2.\n.output Answer\n\n", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Tony Stark\", \"engineer\").\nHas_profession(\"Tony Stark\", \"inventor\").\nHas_profession(\"Tony Stark\", \"businessperson\").\nHas_profession(\"Tony Stark\", \"playboy\").\n.decl Answer()\nAnswer() :- Has_profession(\"Tony Stark\", profession1), Has_profession(\"Tony Stark\", profession2), profession1 != profession2.\n.output Answer\n\n"]}
{"id": 290, "answer": true, "completion": ".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"person\", \"driver's license\").\n.decl Requires_license(Job:symbol, License:symbol)\nRequires_license(\"transport of aviation fuel\", \"driver's license\").\n.decl Answer()\nAnswer() :- Has_license(person, license), Requires_license(\"transport of aviation fuel\", license).\n.output Answer\n\n", "completions": [".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"person\", \"driver's license\").\n.decl Requires_license(Job:symbol, License:symbol)\nRequires_license(\"transport of aviation fuel\", \"driver's license\").\n.decl Answer()\nAnswer() :- Has_license(person, license), Requires_license(\"transport of aviation fuel\", license).\n.output Answer\n\n"]}
{"id": 291, "answer": true, "completion": ".decl Has_gold_medals(Country:symbol, N_gold_medals:float)\nHas_gold_medals(\"East Germany\", 40).\nHas_gold_medals(\"West Germany\", 10).\nHas_gold_medals(\"United States\", 34).\n.decl Exists(Country:symbol)\nExists(\"United States\").\nExists(\"West Germany\").\n.decl Answer()\nAnswer() :- Has_gold_medals(country1, n_gold_medals1), Has_gold_medals(country2, n_gold_medals2), Exists(country1), Exists(country2), n_gold_medals1 > n_gold_medals2.\n.output Answer\n\n", "completions": [".decl Has_gold_medals(Country:symbol, N_gold_medals:float)\nHas_gold_medals(\"East Germany\", 40).\nHas_gold_medals(\"West Germany\", 10).\nHas_gold_medals(\"United States\", 34).\n.decl Exists(Country:symbol)\nExists(\"United States\").\nExists(\"West Germany\").\n.decl Answer()\nAnswer() :- Has_gold_medals(country1, n_gold_medals1), Has_gold_medals(country2, n_gold_medals2), Exists(country1), Exists(country2), n_gold_medals1 > n_gold_medals2.\n.output Answer\n\n"]}
{"id": 292, "answer": false, "completion": ".decl Lasts_n_minutes(Event:symbol, N_minutes:float)\nLasts_n_minutes(\"open heart surgery\", 120).\nLasts_n_minutes(\"American Ballet Theatre's Swan Lake\", 120).\n.decl Answer()\nAnswer() :- Lasts_n_minutes(\"open heart surgery\", n_minutes1), Lasts_n_minutes(\"American Ballet Theatre's Swan Lake\", n_minutes2), n_minutes1 < n_minutes2.\n.output Answer\n\n", "completions": [".decl Lasts_n_minutes(Event:symbol, N_minutes:float)\nLasts_n_minutes(\"open heart surgery\", 120).\nLasts_n_minutes(\"American Ballet Theatre's Swan Lake\", 120).\n.decl Answer()\nAnswer() :- Lasts_n_minutes(\"open heart surgery\", n_minutes1), Lasts_n_minutes(\"American Ballet Theatre's Swan Lake\", n_minutes2), n_minutes1 < n_minutes2.\n.output Answer\n\n"]}
{"id": 293, "answer": true, "completion": ".decl Has_speed(Method:symbol, Speed:float)\nHas_speed(\"Yellow Pages\", 0.5).\nHas_speed(\"Internet\", 1).\n.decl Answer()\nAnswer() :- Has_speed(\"Yellow Pages\", speed1), Has_speed(\"Internet\", speed2), speed1 < speed2.\n.output Answer\n\n", "completions": [".decl Has_speed(Method:symbol, Speed:float)\nHas_speed(\"Yellow Pages\", 0.5).\nHas_speed(\"Internet\", 1).\n.decl Answer()\nAnswer() :- Has_speed(\"Yellow Pages\", speed1), Has_speed(\"Internet\", speed2), speed1 < speed2.\n.output Answer\n\n"]}
{"id": 294, "answer": true, "completion": ".decl Is_a(Person:symbol, Species:symbol)\nIs_a(\"John Marshall\", \"human\").\nIs_a(\"John Marshall\", \"neanderthal\").\n.decl Serves_on(Person:symbol, Court:symbol)\nServes_on(\"John Marshall\", \"Supreme Court of the United States\").\n.decl Answer()\nAnswer() :- Is_a(person, \"neanderthal\"), Serves_on(person, \"Supreme Court of the United States\").\n.output Answer\n\n", "completions": [".decl Is_a(Person:symbol, Species:symbol)\nIs_a(\"John Marshall\", \"human\").\nIs_a(\"John Marshall\", \"neanderthal\").\n.decl Serves_on(Person:symbol, Court:symbol)\nServes_on(\"John Marshall\", \"Supreme Court of the United States\").\n.decl Answer()\nAnswer() :- Is_a(person, \"neanderthal\"), Serves_on(person, \"Supreme Court of the United States\").\n.output Answer\n\n"]}
{"id": 295, "answer": false, "completion": ".decl Tours_with(Band_A:symbol, Band_B:symbol)\nTours_with(\"Maroon 5\", \"Kelly Clarkson\").\nTours_with(\"Nirvana\", \"Pearl Jam\").\n.decl Answer()\nAnswer() :- Tours_with(\"Maroon 5\", \"Nirvana\").\n.output Answer\n\n", "completions": [".decl Tours_with(Band_A:symbol, Band_B:symbol)\nTours_with(\"Maroon 5\", \"Kelly Clarkson\").\nTours_with(\"Nirvana\", \"Pearl Jam\").\n.decl Answer()\nAnswer() :- Tours_with(\"Maroon 5\", \"Nirvana\").\n.output Answer\n\n"]}
{"id": 296, "answer": true, "completion": ".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Antarctica\", -50).\nHas_temperature(\"Punxsutawney\", 32).\n.decl Answer()\nAnswer() :- Has_temperature(\"Antarctica\", temperature1), Has_temperature(\"Punxsutawney\", temperature2), temperature1 < temperature2.\n.output Answer\n\n", "completions": [".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Antarctica\", -50).\nHas_temperature(\"Punxsutawney\", 32).\n.decl Answer()\nAnswer() :- Has_temperature(\"Antarctica\", temperature1), Has_temperature(\"Punxsutawney\", temperature2), temperature1 < temperature2.\n.output Answer\n\n"]}
{"id": 297, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"helium\", 0.00018).\nHas_density(\"air\", 1.2).\n.decl Answer()\nAnswer() :- Has_density(\"helium\", density1), Has_density(\"air\", density2), density1 < density2.\n.output Answer\n\n\n", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"helium\", 0.00018).\nHas_density(\"air\", 1.2).\n.decl Answer()\nAnswer() :- Has_density(\"helium\", density1), Has_density(\"air\", density2), density1 < density2.\n.output Answer\n\n\n"]}
{"id": 298, "answer": true, "completion": ".decl Is_used_as_fuel(Fuel:symbol, Vehicle:symbol)\nIs_used_as_fuel(\"petroleum jelly\", \"car\").\n.decl Answer()\nAnswer() :- Is_used_as_fuel(\"petroleum jelly\", \"car\").\n.output Answer\n\n", "completions": [".decl Is_used_as_fuel(Fuel:symbol, Vehicle:symbol)\nIs_used_as_fuel(\"petroleum jelly\", \"car\").\n.decl Answer()\nAnswer() :- Is_used_as_fuel(\"petroleum jelly\", \"car\").\n.output Answer\n\n"]}
{"id": 299, "answer": false, "completion": ".decl Is_deadly_sin(Sin:symbol)\nIs_deadly_sin(\"greed\").\nIs_deadly_sin(\"lust\").\nIs_deadly_sin(\"gluttony\").\nIs_deadly_sin(\"sloth\").\nIs_deadly_sin(\"wrath\").\nIs_deadly_sin(\"envy\").\nIs_deadly_sin(\"pride\").\n.decl Answer()\nAnswer() :- Is_deadly_sin(\"greed\"), !Is_deadly_sin(sin), sin != \"greed\".\n.output Answer\n\n", "completions": [".decl Is_deadly_sin(Sin:symbol)\nIs_deadly_sin(\"greed\").\nIs_deadly_sin(\"lust\").\nIs_deadly_sin(\"gluttony\").\nIs_deadly_sin(\"sloth\").\nIs_deadly_sin(\"wrath\").\nIs_deadly_sin(\"envy\").\nIs_deadly_sin(\"pride\").\n.decl Answer()\nAnswer() :- Is_deadly_sin(\"greed\"), !Is_deadly_sin(sin), sin != \"greed\".\n.output Answer\n\n"]}
{"id": 300, "answer": true, "completion": ".decl Is_CEO_of(Person:symbol, Company:symbol)\nIs_CEO_of(\"Carlos Ghosn\", \"Nissan\").\n.decl Is_wanted_by(Person:symbol, Country:symbol)\nIs_wanted_by(\"Carlos Ghosn\", \"Japan\").\n.decl Is_international(Country:symbol)\nIs_international(\"Japan\").\n.decl Answer()\nAnswer() :- Is_CEO_of(person, \"Nissan\"), Is_wanted_by(person, country), Is_international(country).\n.output Answer\n\n", "completions": [".decl Is_CEO_of(Person:symbol, Company:symbol)\nIs_CEO_of(\"Carlos Ghosn\", \"Nissan\").\n.decl Is_wanted_by(Person:symbol, Country:symbol)\nIs_wanted_by(\"Carlos Ghosn\", \"Japan\").\n.decl Is_international(Country:symbol)\nIs_international(\"Japan\").\n.decl Answer()\nAnswer() :- Is_CEO_of(person, \"Nissan\"), Is_wanted_by(person, country), Is_international(country).\n.output Answer\n\n"]}
{"id": 301, "answer": true, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"drag king\", \"female\").\n.decl Takes(Person:symbol, Drug:symbol)\nTakes(\"drag king\", \"testosterone\").\n.decl Answer()\nAnswer() :- Has_gender(\"drag king\", \"female\"), Takes(\"drag king\", \"testosterone\").\n.output Answer\n\n", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"drag king\", \"female\").\n.decl Takes(Person:symbol, Drug:symbol)\nTakes(\"drag king\", \"testosterone\").\n.decl Answer()\nAnswer() :- Has_gender(\"drag king\", \"female\"), Takes(\"drag king\", \"testosterone\").\n.output Answer\n\n"]}
{"id": 302, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"crab\", \"ocean\").\nLives_in(\"lobster\", \"ocean\").\nLives_in(\"shrimp\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in(animal, \"ocean\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"crab\", \"ocean\").\nLives_in(\"lobster\", \"ocean\").\nLives_in(\"shrimp\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in(animal, \"ocean\").\n.output Answer\n\n"]}
{"id": 303, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Paul Bunyan\", 25).\n.decl Has_width(Person:symbol, Width:float)\nHas_width(\"Paul Bunyan\", 10).\n.decl Answer()\nAnswer() :- Has_height(\"Paul Bunyan\", height), Has_width(\"Paul Bunyan\", width), height > width.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Paul Bunyan\", 25).\n.decl Has_width(Person:symbol, Width:float)\nHas_width(\"Paul Bunyan\", 10).\n.decl Answer()\nAnswer() :- Has_height(\"Paul Bunyan\", height), Has_width(\"Paul Bunyan\", width), height > width.\n.output Answer\n\n"]}
{"id": 304, "answer": false, "completion": ".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Black Sea\", 2200).\n.decl Travels_through(Light:symbol, Medium:symbol)\nTravels_through(\"sunlight\", \"air\").\nTravels_through(\"sunlight\", \"water\").\n.decl Answer()\nAnswer() :- Has_depth(\"Black Sea\", depth), Travels_through(\"sunlight\", \"water\"), depth <= 100.\n.output Answer\n\n", "completions": [".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Black Sea\", 2200).\n.decl Travels_through(Light:symbol, Medium:symbol)\nTravels_through(\"sunlight\", \"air\").\nTravels_through(\"sunlight\", \"water\").\n.decl Answer()\nAnswer() :- Has_depth(\"Black Sea\", depth), Travels_through(\"sunlight\", \"water\"), depth <= 100.\n.output Answer\n\n"]}
{"id": 305, "answer": false, "completion": ".decl Is_a(Object:symbol, Category:symbol)\nIs_a(\"slingshot\", \"weapon\").\nIs_a(\"artillery\", \"weapon\").\n.decl Answer()\nAnswer() :- Is_a(\"slingshot\", category1), Is_a(\"artillery\", category2), category1 != category2.\n.output Answer\n\n", "completions": [".decl Is_a(Object:symbol, Category:symbol)\nIs_a(\"slingshot\", \"weapon\").\nIs_a(\"artillery\", \"weapon\").\n.decl Answer()\nAnswer() :- Is_a(\"slingshot\", category1), Is_a(\"artillery\", category2), category1 != category2.\n.output Answer\n\n"]}
{"id": 306, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"9/11\", \"September 11, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 11, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 12, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 13, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 14, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 15, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 16, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 17, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 18, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 19, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 20, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 21, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 22, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 23, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 24, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 25, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 26, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 27, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 28, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 29, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 30, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 1, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 2, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 3, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 4, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 5, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 6, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 7, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 8, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 9, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 10, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 11, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 12, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 13, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 14, 2001\").\nHappens_in_time(\"don't ask don", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"9/11\", \"September 11, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 11, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 12, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 13, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 14, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 15, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 16, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 17, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 18, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 19, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 20, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 21, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 22, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 23, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 24, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 25, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 26, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 27, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 28, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 29, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"September 30, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 1, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 2, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 3, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 4, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 5, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 6, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 7, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 8, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 9, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 10, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 11, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 12, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 13, 2001\").\nHappens_in_time(\"don't ask don't tell\", \"October 14, 2001\").\nHappens_in_time(\"don't ask don"]}
{"id": 307, "answer": false, "completion": ".decl Has_n_labors(Person:symbol, N_labors:float)\nHas_n_labors(\"Heracles\", 12).\n.decl Answer()\nAnswer() :- Has_n_labors(\"Heracles\", n_labors), n_labors > 13.\n.output Answer\n\n", "completions": [".decl Has_n_labors(Person:symbol, N_labors:float)\nHas_n_labors(\"Heracles\", 12).\n.decl Answer()\nAnswer() :- Has_n_labors(\"Heracles\", n_labors), n_labors > 13.\n.output Answer\n\n"]}
{"id": 308, "answer": true, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Thanksgiving\", \"Thursday\").\nHappens_on_day(\"day of mourning\", \"Thursday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Thanksgiving\", day), Happens_on_day(\"day of mourning\", day).\n.output Answer\n\n", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Thanksgiving\", \"Thursday\").\nHappens_on_day(\"day of mourning\", \"Thursday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Thanksgiving\", day), Happens_on_day(\"day of mourning\", day).\n.output Answer\n\n"]}
{"id": 309, "answer": true, "completion": ".decl Is_monarch(Person:symbol)\nIs_monarch(\"Hapshetsut\").\n.decl Answer()\nAnswer() :- Is_monarch(\"Hapshetsut\").\n.output Answer\n\n", "completions": [".decl Is_monarch(Person:symbol)\nIs_monarch(\"Hapshetsut\").\n.decl Answer()\nAnswer() :- Is_monarch(\"Hapshetsut\").\n.output Answer\n\n"]}
{"id": 310, "answer": false, "completion": ".decl Has_n_floors(Building:symbol, N_floors:float)\nHas_n_floors(\"Noah's Ark\", 3).\n.decl Has_n_floors(Building:symbol, N_floors:float)\nHas_n_floors(\"Golden Age of Piracy pirate ship\", 1).\n.decl Answer()\nAnswer() :- Has_n_floors(\"Noah's Ark\", n_floors1), Has_n_floors(\"Golden Age of Piracy pirate ship\", n_floors2), n_floors1 > n_floors2.\n.output Answer\n\n", "completions": [".decl Has_n_floors(Building:symbol, N_floors:float)\nHas_n_floors(\"Noah's Ark\", 3).\n.decl Has_n_floors(Building:symbol, N_floors:float)\nHas_n_floors(\"Golden Age of Piracy pirate ship\", 1).\n.decl Answer()\nAnswer() :- Has_n_floors(\"Noah's Ark\", n_floors1), Has_n_floors(\"Golden Age of Piracy pirate ship\", n_floors2), n_floors1 > n_floors2.\n.output Answer\n\n"]}
{"id": 311, "answer": false, "completion": ".decl Has_sodium(Food:symbol, Sodium:float)\nHas_sodium(\"Campbell's Soup\", 1000).\n.decl Has_sodium_limit(Disease:symbol, Sodium_limit:float)\nHas_sodium_limit(\"hypertension\", 1500).\n.decl Answer()\nAnswer() :- Has_sodium(\"Campbell's Soup\", sodium1), Has_sodium_limit(\"hypertension\", sodium2), sodium1*2 <= sodium2.\n.output Answer\n\n", "completions": [".decl Has_sodium(Food:symbol, Sodium:float)\nHas_sodium(\"Campbell's Soup\", 1000).\n.decl Has_sodium_limit(Disease:symbol, Sodium_limit:float)\nHas_sodium_limit(\"hypertension\", 1500).\n.decl Answer()\nAnswer() :- Has_sodium(\"Campbell's Soup\", sodium1), Has_sodium_limit(\"hypertension\", sodium2), sodium1*2 <= sodium2.\n.output Answer\n\n"]}
{"id": 312, "answer": false, "completion": ".decl Profits_from(Company:symbol, Product:symbol)\nProfits_from(\"Electronic Arts\", \"SimCity\").\nProfits_from(\"Nintendo\", \"Metroid\").\n.decl Answer()\nAnswer() :- Profits_from(\"Electronic Arts\", \"Metroid\").\n.output Answer\n\n", "completions": [".decl Profits_from(Company:symbol, Product:symbol)\nProfits_from(\"Electronic Arts\", \"SimCity\").\nProfits_from(\"Nintendo\", \"Metroid\").\n.decl Answer()\nAnswer() :- Profits_from(\"Electronic Arts\", \"Metroid\").\n.output Answer\n\n"]}
{"id": 313, "answer": false, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"snowboarding\", \"Alaska\").\nHappens_in_place(\"snowboarding\", \"Colorado\").\nHappens_in_place(\"snowboarding\", \"New Hampshire\").\nHappens_in_place(\"snowboarding\", \"Vermont\").\nHappens_in_place(\"snowboarding\", \"Washington\").\nHappens_in_place(\"snowboarding\", \"Wyoming\").\nHappens_in_place(\"snowboarding\", \"Utah\").\nHappens_in_place(\"snowboarding\", \"Montana\").\nHappens_in_place(\"snowboarding\", \"Idaho\").\nHappens_in_place(\"snowboarding\", \"Oregon\").\nHappens_in_place(\"snowboarding\", \"California\").\nHappens_in_place(\"snowboarding\", \"Nevada\").\nHappens_in_place(\"snowboarding\", \"New Mexico\").\nHappens_in_place(\"snowboarding\", \"Arizona\").\nHappens_in_place(\"snowboarding\", \"Michigan\").\nHappens_in_place(\"snowboarding\", \"New York\").\nHappens_in_place(\"snowboarding\", \"Pennsylvania\").\nHappens_in_place(\"snowboarding\", \"West Virginia\").\nHappens_in_place(\"snowboarding\", \"Wisconsin\").\nHappens_in_place(\"snowboarding\", \"Minnesota\").\nHappens_in_place(\"snowboarding\", \"North Dakota\").\nHappens_in_place(\"snowboarding\", \"South Dakota\").\nHappens_in_place(\"snowboarding\", \"Nebraska\").\nHappens_in_place(\"snowboarding\", \"Kansas\").\nHappens_in_place(\"snowboarding\", \"Iowa\").\nHappens_in_place(\"snowboarding\", \"Missouri\").\nHappens_in_place(\"snowboarding\", \"Illinois\").\nHappens_in_place(\"snowboarding\", \"Indiana\").\nHappens_in_place(\"snowboarding\", \"Ohio\").\nHappens_in_place(\"snowboarding\", \"Maine\").\nHappens_in_place(\"snowboarding\", \"Massachusetts\").\nHappens_in_place(\"snowboarding\", \"Rhode Island\").\nHappens_in_place(\"snowboarding\", \"Connecticut\").\nHappens_in_place(\"snowboarding\", \"New Jersey\").\nHappens_in_place(\"snowboarding\", \"Delaware\").\nHappens_in_place(\"snowboarding\", \"Maryland\").\nHappens_in_place(\"snowboarding\", \"Virginia\").\nHappens_in_place(\"snowboarding\", \"North Carolina\").\nHappens_in_place(\"snowboarding\", \"South Carolina\").\nHappens_in_place(\"snowboarding\", \"Georgia\").\nHappens_in_place(\"snowboarding\", \"Florida\").\nHappens_in_place(\"snowboarding\", \"Alabama\").\nHappens_in_place(\"snowboarding\", \"Mississippi\").\nHappens_in_place(\"snowboarding\", \"Louisiana\").\nHappens_in_place(\"snowboarding\", \"Arkansas\").\nHappens_in_place(\"snowboarding\", \"Oklahoma\").\nHappens_in_place(\"snow", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"snowboarding\", \"Alaska\").\nHappens_in_place(\"snowboarding\", \"Colorado\").\nHappens_in_place(\"snowboarding\", \"New Hampshire\").\nHappens_in_place(\"snowboarding\", \"Vermont\").\nHappens_in_place(\"snowboarding\", \"Washington\").\nHappens_in_place(\"snowboarding\", \"Wyoming\").\nHappens_in_place(\"snowboarding\", \"Utah\").\nHappens_in_place(\"snowboarding\", \"Montana\").\nHappens_in_place(\"snowboarding\", \"Idaho\").\nHappens_in_place(\"snowboarding\", \"Oregon\").\nHappens_in_place(\"snowboarding\", \"California\").\nHappens_in_place(\"snowboarding\", \"Nevada\").\nHappens_in_place(\"snowboarding\", \"New Mexico\").\nHappens_in_place(\"snowboarding\", \"Arizona\").\nHappens_in_place(\"snowboarding\", \"Michigan\").\nHappens_in_place(\"snowboarding\", \"New York\").\nHappens_in_place(\"snowboarding\", \"Pennsylvania\").\nHappens_in_place(\"snowboarding\", \"West Virginia\").\nHappens_in_place(\"snowboarding\", \"Wisconsin\").\nHappens_in_place(\"snowboarding\", \"Minnesota\").\nHappens_in_place(\"snowboarding\", \"North Dakota\").\nHappens_in_place(\"snowboarding\", \"South Dakota\").\nHappens_in_place(\"snowboarding\", \"Nebraska\").\nHappens_in_place(\"snowboarding\", \"Kansas\").\nHappens_in_place(\"snowboarding\", \"Iowa\").\nHappens_in_place(\"snowboarding\", \"Missouri\").\nHappens_in_place(\"snowboarding\", \"Illinois\").\nHappens_in_place(\"snowboarding\", \"Indiana\").\nHappens_in_place(\"snowboarding\", \"Ohio\").\nHappens_in_place(\"snowboarding\", \"Maine\").\nHappens_in_place(\"snowboarding\", \"Massachusetts\").\nHappens_in_place(\"snowboarding\", \"Rhode Island\").\nHappens_in_place(\"snowboarding\", \"Connecticut\").\nHappens_in_place(\"snowboarding\", \"New Jersey\").\nHappens_in_place(\"snowboarding\", \"Delaware\").\nHappens_in_place(\"snowboarding\", \"Maryland\").\nHappens_in_place(\"snowboarding\", \"Virginia\").\nHappens_in_place(\"snowboarding\", \"North Carolina\").\nHappens_in_place(\"snowboarding\", \"South Carolina\").\nHappens_in_place(\"snowboarding\", \"Georgia\").\nHappens_in_place(\"snowboarding\", \"Florida\").\nHappens_in_place(\"snowboarding\", \"Alabama\").\nHappens_in_place(\"snowboarding\", \"Mississippi\").\nHappens_in_place(\"snowboarding\", \"Louisiana\").\nHappens_in_place(\"snowboarding\", \"Arkansas\").\nHappens_in_place(\"snowboarding\", \"Oklahoma\").\nHappens_in_place(\"snow"]}
{"id": 314, "answer": false, "completion": ".decl Has_depth(Zone:symbol, Depth:float)\nHas_depth(\"Bathypelagic Zone\", 1000).\n.decl Has_range(Weapon:symbol, Range:float)\nHas_range(\"sniper rifle\", 1000).\n.decl Answer()\nAnswer() :- Has_depth(\"Bathypelagic Zone\", depth), Has_range(\"sniper rifle\", range), range > depth.\n.output Answer\n\n", "completions": [".decl Has_depth(Zone:symbol, Depth:float)\nHas_depth(\"Bathypelagic Zone\", 1000).\n.decl Has_range(Weapon:symbol, Range:float)\nHas_range(\"sniper rifle\", 1000).\n.decl Answer()\nAnswer() :- Has_depth(\"Bathypelagic Zone\", depth), Has_range(\"sniper rifle\", range), range > depth.\n.output Answer\n\n"]}
{"id": 315, "answer": true, "completion": ".decl Influenced_by(Group:symbol, Music:symbol)\nInfluenced_by(\"Depeche Mode\", \"blues\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Depeche Mode\", \"blues\").\n.output Answer\n\n", "completions": [".decl Influenced_by(Group:symbol, Music:symbol)\nInfluenced_by(\"Depeche Mode\", \"blues\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Depeche Mode\", \"blues\").\n.output Answer\n\n"]}
{"id": 316, "answer": true, "completion": ".decl Needs(Food:symbol, Ingredient:symbol)\nNeeds(\"pickles\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Needs(\"pickles\", \"lactobacillus\").\n.output Answer\n\n", "completions": [".decl Needs(Food:symbol, Ingredient:symbol)\nNeeds(\"pickles\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Needs(\"pickles\", \"lactobacillus\").\n.output Answer\n\n"]}
{"id": 317, "answer": true, "completion": ".decl Has_king(Country:symbol, King:symbol)\nHas_king(\"England\", \"King James I\").\n.decl Despises(Person:symbol, Being:symbol)\nDespises(\"King James I\", \"fairy beings\").\n.decl Answer()\nAnswer() :- Has_king(\"England\", king), Despises(king, \"fairy beings\").\n.output Answer\n\n", "completions": [".decl Has_king(Country:symbol, King:symbol)\nHas_king(\"England\", \"King James I\").\n.decl Despises(Person:symbol, Being:symbol)\nDespises(\"King James I\", \"fairy beings\").\n.decl Answer()\nAnswer() :- Has_king(\"England\", king), Despises(king, \"fairy beings\").\n.output Answer\n\n"]}
{"id": 318, "answer": false, "completion": ".decl Has_n_cases(Disability:symbol, N_cases:float)\nHas_n_cases(\"dyslexia\", 2.4).\nHas_n_cases(\"intellectual disability\", 3.5).\n.decl Answer()\nAnswer() :- Has_n_cases(\"dyslexia\", n_cases1), Has_n_cases(\"intellectual disability\", n_cases2), n_cases1 > n_cases2.\n.output Answer\n\n\n", "completions": [".decl Has_n_cases(Disability:symbol, N_cases:float)\nHas_n_cases(\"dyslexia\", 2.4).\nHas_n_cases(\"intellectual disability\", 3.5).\n.decl Answer()\nAnswer() :- Has_n_cases(\"dyslexia\", n_cases1), Has_n_cases(\"intellectual disability\", n_cases2), n_cases1 > n_cases2.\n.output Answer\n\n\n"]}
{"id": 319, "answer": true, "completion": ".decl Has_revenue(Company:symbol, Revenue:float)\nHas_revenue(\"Bing\", 1.2).\nHas_revenue(\"Google\", 1.4).\nHas_revenue(\"Yahoo\", 1.0).\n.decl Answer()\nAnswer() :- Has_revenue(\"Bing\", revenue1), Has_revenue(\"Google\", revenue2), revenue1 > revenue2.\nAnswer() :- Has_revenue(\"Bing\", revenue1), Has_revenue(\"Yahoo\", revenue2), revenue1 > revenue2.\n.output Answer\n\n", "completions": [".decl Has_revenue(Company:symbol, Revenue:float)\nHas_revenue(\"Bing\", 1.2).\nHas_revenue(\"Google\", 1.4).\nHas_revenue(\"Yahoo\", 1.0).\n.decl Answer()\nAnswer() :- Has_revenue(\"Bing\", revenue1), Has_revenue(\"Google\", revenue2), revenue1 > revenue2.\nAnswer() :- Has_revenue(\"Bing\", revenue1), Has_revenue(\"Yahoo\", revenue2), revenue1 > revenue2.\n.output Answer\n\n"]}
{"id": 320, "answer": true, "completion": ".decl Has_sodium(Food:symbol, Sodium:float)\nHas_sodium(\"olives\", 0.1).\n.decl Answer()\nAnswer() :- Has_sodium(\"olives\", sodium), sodium < 0.5.\n.output Answer\n\n", "completions": [".decl Has_sodium(Food:symbol, Sodium:float)\nHas_sodium(\"olives\", 0.1).\n.decl Answer()\nAnswer() :- Has_sodium(\"olives\", sodium), sodium < 0.5.\n.output Answer\n\n"]}
{"id": 321, "answer": true, "completion": ".decl Was_born_in(Person:symbol, Year:float)\nWas_born_in(\"William Jennings Bryan\", 1860).\n.decl Was_invented_in(Object:symbol, Year:float)\nWas_invented_in(\"television\", 1926).\n.decl Answer()\nAnswer() :- Was_born_in(\"William Jennings Bryan\", year1), Was_invented_in(\"television\", year2), year1 < year2.\n.output Answer\n\n\n", "completions": [".decl Was_born_in(Person:symbol, Year:float)\nWas_born_in(\"William Jennings Bryan\", 1860).\n.decl Was_invented_in(Object:symbol, Year:float)\nWas_invented_in(\"television\", 1926).\n.decl Answer()\nAnswer() :- Was_born_in(\"William Jennings Bryan\", year1), Was_invented_in(\"television\", year2), year1 < year2.\n.output Answer\n\n\n"]}
{"id": 322, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Great Recession\", \"2007-2009\").\nHappens_in_time(\"severest unemployment\", \"1929-1933\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Great Recession\", time1), Happens_in_time(\"severest unemployment\", time2), time1 != time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Great Recession\", \"2007-2009\").\nHappens_in_time(\"severest unemployment\", \"1929-1933\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Great Recession\", time1), Happens_in_time(\"severest unemployment\", time2), time1 != time2.\n.output Answer\n\n"]}
{"id": 323, "answer": false, "completion": ".decl Inhabits(Animal:symbol, Place:symbol)\nInhabits(\"Grizzly Bear\", \"North America\").\nInhabits(\"Grizzly Bear\", \"Alaska\").\nInhabits(\"Grizzly Bear\", \"Canada\").\nInhabits(\"Grizzly Bear\", \"Montana\").\nInhabits(\"Grizzly Bear\", \"Idaho\").\nInhabits(\"Grizzly Bear\", \"Washington\").\nInhabits(\"Grizzly Bear\", \"Wyoming\").\nInhabits(\"Grizzly Bear\", \"Utah\").\nInhabits(\"Grizzly Bear\", \"California\").\nInhabits(\"Grizzly Bear\", \"Colorado\").\nInhabits(\"Grizzly Bear\", \"New Mexico\").\nInhabits(\"Grizzly Bear\", \"Arizona\").\nInhabits(\"Grizzly Bear\", \"Nevada\").\nInhabits(\"Grizzly Bear\", \"Oregon\").\nInhabits(\"Grizzly Bear\", \"Yellowstone National Park\").\nInhabits(\"Grizzly Bear\", \"Yukon\").\nInhabits(\"Grizzly Bear\", \"Northwest Territories\").\nInhabits(\"Grizzly Bear\", \"Nunavut\").\nInhabits(\"Grizzly Bear\", \"Alaska Peninsula\").\nInhabits(\"Grizzly Bear\", \"Aleutian Islands\").\nInhabits(\"Grizzly Bear\", \"Kodiak Island\").\nInhabits(\"Grizzly Bear\", \"Chugach Mountains\").\nInhabits(\"Grizzly Bear\", \"Brooks Range\").\nInhabits(\"Grizzly Bear\", \"Wrangell Mountains\").\nInhabits(\"Grizzly Bear\", \"Saint Elias Mountains\").\nInhabits(\"Grizzly Bear\", \"Kenai Peninsula\").\nInhabits(\"Grizzly Bear\", \"Alaska Range\").\nInhabits(\"Grizzly Bear\", \"Talkeetna Mountains\").\nInhabits(\"Grizzly Bear\", \"Tetlin National Wildlife Refuge\").\nInhabits(\"Grizzly Bear\", \"Yukon Flats National Wildlife Refuge\").\nInhabits(\"Grizzly Bear\", \"Selawik National Wildlife Refuge\").\nInhabits(\"Grizzly Bear\", \"Kobuk Valley National Park\").\nInhabits(\"Grizzly Bear\", \"Gates of the Arctic National Park\").\nInhabits(\"Grizzly Bear\", \"Denali National Park\").\nInhabits(\"Grizzly Bear\", \"Glacier Bay National Park\").\nInhabits(\"Grizzly Bear\", \"Wrangell-St. Elias National Park\").\nInhabits(\"Grizzly Bear\", \"Katmai National Park\").\nInhabits(\"Grizzly Bear\", \"Lake Clark National Park\").\nInhabits(\"Grizzly Bear\", \"Kobuk Valley National Park\").\nInhabits(\"Grizzly Bear\", \"Noatak National Preserve\").\nInhabits(\"Grizzly Bear\", \"Gates of the Arctic National Park\").\nInhabits(\"Grizzly Bear\", \"Kluane National Park\").\nInhabits(\"Grizzly Bear\", \"Tatshenshini-Alsek Provincial Park\").\nInhabits(\"Grizzly Bear\", \"Glacier Bay National Park\").\nInhabits(\"Grizzly Bear\", \"Wrangell-St. Elias National Park\").\nInhabits(\"Grizzly Bear\", \"Katmai", "completions": [".decl Inhabits(Animal:symbol, Place:symbol)\nInhabits(\"Grizzly Bear\", \"North America\").\nInhabits(\"Grizzly Bear\", \"Alaska\").\nInhabits(\"Grizzly Bear\", \"Canada\").\nInhabits(\"Grizzly Bear\", \"Montana\").\nInhabits(\"Grizzly Bear\", \"Idaho\").\nInhabits(\"Grizzly Bear\", \"Washington\").\nInhabits(\"Grizzly Bear\", \"Wyoming\").\nInhabits(\"Grizzly Bear\", \"Utah\").\nInhabits(\"Grizzly Bear\", \"California\").\nInhabits(\"Grizzly Bear\", \"Colorado\").\nInhabits(\"Grizzly Bear\", \"New Mexico\").\nInhabits(\"Grizzly Bear\", \"Arizona\").\nInhabits(\"Grizzly Bear\", \"Nevada\").\nInhabits(\"Grizzly Bear\", \"Oregon\").\nInhabits(\"Grizzly Bear\", \"Yellowstone National Park\").\nInhabits(\"Grizzly Bear\", \"Yukon\").\nInhabits(\"Grizzly Bear\", \"Northwest Territories\").\nInhabits(\"Grizzly Bear\", \"Nunavut\").\nInhabits(\"Grizzly Bear\", \"Alaska Peninsula\").\nInhabits(\"Grizzly Bear\", \"Aleutian Islands\").\nInhabits(\"Grizzly Bear\", \"Kodiak Island\").\nInhabits(\"Grizzly Bear\", \"Chugach Mountains\").\nInhabits(\"Grizzly Bear\", \"Brooks Range\").\nInhabits(\"Grizzly Bear\", \"Wrangell Mountains\").\nInhabits(\"Grizzly Bear\", \"Saint Elias Mountains\").\nInhabits(\"Grizzly Bear\", \"Kenai Peninsula\").\nInhabits(\"Grizzly Bear\", \"Alaska Range\").\nInhabits(\"Grizzly Bear\", \"Talkeetna Mountains\").\nInhabits(\"Grizzly Bear\", \"Tetlin National Wildlife Refuge\").\nInhabits(\"Grizzly Bear\", \"Yukon Flats National Wildlife Refuge\").\nInhabits(\"Grizzly Bear\", \"Selawik National Wildlife Refuge\").\nInhabits(\"Grizzly Bear\", \"Kobuk Valley National Park\").\nInhabits(\"Grizzly Bear\", \"Gates of the Arctic National Park\").\nInhabits(\"Grizzly Bear\", \"Denali National Park\").\nInhabits(\"Grizzly Bear\", \"Glacier Bay National Park\").\nInhabits(\"Grizzly Bear\", \"Wrangell-St. Elias National Park\").\nInhabits(\"Grizzly Bear\", \"Katmai National Park\").\nInhabits(\"Grizzly Bear\", \"Lake Clark National Park\").\nInhabits(\"Grizzly Bear\", \"Kobuk Valley National Park\").\nInhabits(\"Grizzly Bear\", \"Noatak National Preserve\").\nInhabits(\"Grizzly Bear\", \"Gates of the Arctic National Park\").\nInhabits(\"Grizzly Bear\", \"Kluane National Park\").\nInhabits(\"Grizzly Bear\", \"Tatshenshini-Alsek Provincial Park\").\nInhabits(\"Grizzly Bear\", \"Glacier Bay National Park\").\nInhabits(\"Grizzly Bear\", \"Wrangell-St. Elias National Park\").\nInhabits(\"Grizzly Bear\", \"Katmai"]}
{"id": 324, "answer": false, "completion": ".decl Has_n_episodes(TV_show:symbol, N_episodes:float)\nHas_n_episodes(\"Ugly Betty\", 88).\n.decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"week\", 7).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Ugly Betty\", n_episodes), Lasts_n_days(\"week\", n_days), n_episodes <= n_days.\n.output Answer\n\n\n", "completions": [".decl Has_n_episodes(TV_show:symbol, N_episodes:float)\nHas_n_episodes(\"Ugly Betty\", 88).\n.decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"week\", 7).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Ugly Betty\", n_episodes), Lasts_n_days(\"week\", n_days), n_episodes <= n_days.\n.output Answer\n\n\n"]}
{"id": 325, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"snow leopard\", \"Himalayas\").\nLives_in(\"snow leopard\", \"Tibet\").\nLives_in(\"snow leopard\", \"Mongolia\").\nLives_in(\"snow leopard\", \"Russia\").\nLives_in(\"snow leopard\", \"Kazakhstan\").\nLives_in(\"snow leopard\", \"Kyrgyzstan\").\nLives_in(\"snow leopard\", \"Tajikistan\").\nLives_in(\"snow leopard\", \"Uzbekistan\").\nLives_in(\"snow leopard\", \"China\").\nLives_in(\"snow leopard\", \"Afghanistan\").\nLives_in(\"snow leopard\", \"Pakistan\").\nLives_in(\"snow leopard\", \"India\").\nLives_in(\"snow leopard\", \"Bhutan\").\nLives_in(\"snow leopard\", \"Nepal\").\n.decl Answer()\nAnswer() :- Lives_in(\"snow leopard\", \"Yucatan\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"snow leopard\", \"Himalayas\").\nLives_in(\"snow leopard\", \"Tibet\").\nLives_in(\"snow leopard\", \"Mongolia\").\nLives_in(\"snow leopard\", \"Russia\").\nLives_in(\"snow leopard\", \"Kazakhstan\").\nLives_in(\"snow leopard\", \"Kyrgyzstan\").\nLives_in(\"snow leopard\", \"Tajikistan\").\nLives_in(\"snow leopard\", \"Uzbekistan\").\nLives_in(\"snow leopard\", \"China\").\nLives_in(\"snow leopard\", \"Afghanistan\").\nLives_in(\"snow leopard\", \"Pakistan\").\nLives_in(\"snow leopard\", \"India\").\nLives_in(\"snow leopard\", \"Bhutan\").\nLives_in(\"snow leopard\", \"Nepal\").\n.decl Answer()\nAnswer() :- Lives_in(\"snow leopard\", \"Yucatan\").\n.output Answer\n\n"]}
{"id": 326, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Chinese\", 3.14).\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"1980s China\", \"1980s\").\n.decl Answer()\nAnswer() :- Has_n_children(\"Chinese\", n_children), Happens_in_time(\"1980s China\", time), n_children = 3.14.\n.output Answer\n\n", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Chinese\", 3.14).\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"1980s China\", \"1980s\").\n.decl Answer()\nAnswer() :- Has_n_children(\"Chinese\", n_children), Happens_in_time(\"1980s China\", time), n_children = 3.14.\n.output Answer\n\n"]}
{"id": 327, "answer": true, "completion": ".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"surgery\", \"existential crisis\").\n.decl Answer()\nAnswer() :- Causes(\"surgery\", \"existential crisis\").\n.output Answer\n\n", "completions": [".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"surgery\", \"existential crisis\").\n.decl Answer()\nAnswer() :- Causes(\"surgery\", \"existential crisis\").\n.output Answer\n\n"]}
{"id": 328, "answer": false, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"greyhound\", 40).\nHas_speed(\"greyhound bus\", 60).\n.decl Answer()\nAnswer() :- Has_speed(\"greyhound\", speed1), Has_speed(\"greyhound bus\", speed2), speed1 > speed2.\n.output Answer\n\n", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"greyhound\", 40).\nHas_speed(\"greyhound bus\", 60).\n.decl Answer()\nAnswer() :- Has_speed(\"greyhound\", speed1), Has_speed(\"greyhound bus\", speed2), speed1 > speed2.\n.output Answer\n\n"]}
{"id": 329, "answer": true, "completion": ".decl Is_part_of(Object:symbol, Object2:symbol)\nIs_part_of(\"Sirius\", \"Canis Major\").\nIs_part_of(\"Canis Major\", \"animal\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Sirius\", object), Is_part_of(object, \"animal\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Object:symbol, Object2:symbol)\nIs_part_of(\"Sirius\", \"Canis Major\").\nIs_part_of(\"Canis Major\", \"animal\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Sirius\", object), Is_part_of(object, \"animal\").\n.output Answer\n\n"]}
{"id": 330, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Snow White\", 14).\n.decl Answer()\nAnswer() :- Has_age(\"Snow White\", age), age >= 18.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Snow White\", 14).\n.decl Answer()\nAnswer() :- Has_age(\"Snow White\", age), age >= 18.\n.output Answer\n\n"]}
{"id": 331, "answer": false, "completion": ".decl Has_n_films(Book:symbol, N_films:float)\nHas_n_films(\"The Invisible Man\", 1).\nHas_n_films(\"Picnic at Hanging Rock\", 1).\n.decl Answer()\nAnswer() :- Has_n_films(\"The Invisible Man\", n_films1), Has_n_films(\"Picnic at Hanging Rock\", n_films2), n_films1 > n_films2.\n.output Answer\n\n\n", "completions": [".decl Has_n_films(Book:symbol, N_films:float)\nHas_n_films(\"The Invisible Man\", 1).\nHas_n_films(\"Picnic at Hanging Rock\", 1).\n.decl Answer()\nAnswer() :- Has_n_films(\"The Invisible Man\", n_films1), Has_n_films(\"Picnic at Hanging Rock\", n_films2), n_films1 > n_films2.\n.output Answer\n\n\n"]}
{"id": 332, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"bengal fox\", 3.5).\nHas_weight(\"Ryan Crouser\", 125).\n.decl Answer()\nAnswer() :- Has_weight(\"bengal fox\", weight1), Has_weight(\"Ryan Crouser\", weight2), weight1 < weight2.\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"bengal fox\", 3.5).\nHas_weight(\"Ryan Crouser\", 125).\n.decl Answer()\nAnswer() :- Has_weight(\"bengal fox\", weight1), Has_weight(\"Ryan Crouser\", weight2), weight1 < weight2.\n.output Answer\n\n"]}
{"id": 333, "answer": true, "completion": ".decl Performs(Person:symbol, Performance:symbol)\nPerforms(\"Amy Winehouse\", \"live\").\n.decl Has_quality(Performance:symbol, Quality:symbol)\nHas_quality(\"live\", \"perfect\").\n.decl Answer()\nAnswer() :- Performs(\"Amy Winehouse\", performance), Has_quality(performance, \"perfect\").\n.output Answer\n\n", "completions": [".decl Performs(Person:symbol, Performance:symbol)\nPerforms(\"Amy Winehouse\", \"live\").\n.decl Has_quality(Performance:symbol, Quality:symbol)\nHas_quality(\"live\", \"perfect\").\n.decl Answer()\nAnswer() :- Performs(\"Amy Winehouse\", performance), Has_quality(performance, \"perfect\").\n.output Answer\n\n"]}
{"id": 334, "answer": true, "completion": ".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"Peregrine falcon\", 389).\nHas_speed(\"Hurricane Harvey\", 130).\n.decl Answer()\nAnswer() :- Has_speed(\"Peregrine falcon\", speed1), Has_speed(\"Hurricane Harvey\", speed2), speed1 > speed2.\n.output Answer\n\n", "completions": [".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"Peregrine falcon\", 389).\nHas_speed(\"Hurricane Harvey\", 130).\n.decl Answer()\nAnswer() :- Has_speed(\"Peregrine falcon\", speed1), Has_speed(\"Hurricane Harvey\", speed2), speed1 > speed2.\n.output Answer\n\n"]}
{"id": 335, "answer": true, "completion": ".decl Has_ethnicity(Person:symbol, Ethnicity:symbol)\nHas_ethnicity(\"Chinese American\", \"Chinese\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Chinese American\", \"US\").\n.decl Has_level(Discrimination:symbol, Level:symbol)\nHas_level(\"discrimination\", \"Federal\").\n.decl Answer()\nAnswer() :- Has_ethnicity(person, \"Chinese\"), Has_citizenship(person, \"US\"), Has_level(\"discrimination\", \"Federal\").\n.output Answer\n\n", "completions": [".decl Has_ethnicity(Person:symbol, Ethnicity:symbol)\nHas_ethnicity(\"Chinese American\", \"Chinese\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Chinese American\", \"US\").\n.decl Has_level(Discrimination:symbol, Level:symbol)\nHas_level(\"discrimination\", \"Federal\").\n.decl Answer()\nAnswer() :- Has_ethnicity(person, \"Chinese\"), Has_citizenship(person, \"US\"), Has_level(\"discrimination\", \"Federal\").\n.output Answer\n\n"]}
{"id": 336, "answer": true, "completion": ".decl Has_n_characters(Text:symbol, N_characters:float)\nHas_n_characters(\"Haiku\", 17).\nHas_n_characters(\"tweet\", 140).\n.decl Answer()\nAnswer() :- Has_n_characters(\"Haiku\", n_characters1), Has_n_characters(\"tweet\", n_characters2), n_characters1 <= n_characters2.\n.output Answer\n\n", "completions": [".decl Has_n_characters(Text:symbol, N_characters:float)\nHas_n_characters(\"Haiku\", 17).\nHas_n_characters(\"tweet\", 140).\n.decl Answer()\nAnswer() :- Has_n_characters(\"Haiku\", n_characters1), Has_n_characters(\"tweet\", n_characters2), n_characters1 <= n_characters2.\n.output Answer\n\n"]}
{"id": 337, "answer": false, "completion": ".decl Has_diameter(Object:symbol, Diameter:float)\nHas_diameter(\"adult human skull\", 0.2).\nHas_diameter(\"birth canal\", 0.15).\n.decl Answer()\nAnswer() :- Has_diameter(\"adult human skull\", diameter1), Has_diameter(\"birth canal\", diameter2), diameter1 < diameter2.\n.output Answer\n\n", "completions": [".decl Has_diameter(Object:symbol, Diameter:float)\nHas_diameter(\"adult human skull\", 0.2).\nHas_diameter(\"birth canal\", 0.15).\n.decl Answer()\nAnswer() :- Has_diameter(\"adult human skull\", diameter1), Has_diameter(\"birth canal\", diameter2), diameter1 < diameter2.\n.output Answer\n\n"]}
{"id": 338, "answer": true, "completion": ".decl Has_box_office(Film:symbol, Box_office:float)\nHas_box_office(\"King Kong (2005 film)\", 550).\nHas_box_office(\"The Lord of the Rings: The Return of the King\", 1119).\n.decl Has_lead_actress(Film:symbol, Actress:symbol)\nHas_lead_actress(\"King Kong (2005 film)\", \"Naomi Watts\").\nHas_lead_actress(\"The Lord of the Rings: The Return of the King\", \"Naomi Watts\").\n.decl Answer()\nAnswer() :- Has_box_office(film1, box_office1), Has_box_office(film2, box_office2), Has_lead_actress(film1, \"Naomi Watts\"), Has_lead_actress(film2, \"Naomi Watts\"), box_office1 >= box_office2.\n.output Answer\n\n", "completions": [".decl Has_box_office(Film:symbol, Box_office:float)\nHas_box_office(\"King Kong (2005 film)\", 550).\nHas_box_office(\"The Lord of the Rings: The Return of the King\", 1119).\n.decl Has_lead_actress(Film:symbol, Actress:symbol)\nHas_lead_actress(\"King Kong (2005 film)\", \"Naomi Watts\").\nHas_lead_actress(\"The Lord of the Rings: The Return of the King\", \"Naomi Watts\").\n.decl Answer()\nAnswer() :- Has_box_office(film1, box_office1), Has_box_office(film2, box_office2), Has_lead_actress(film1, \"Naomi Watts\"), Has_lead_actress(film2, \"Naomi Watts\"), box_office1 >= box_office2.\n.output Answer\n\n"]}
{"id": 339, "answer": true, "completion": ".decl Has_ingredient(Color:symbol, Ingredient:symbol)\nHas_ingredient(\"purple\", \"mollusks\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"purple\", \"mollusks\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Color:symbol, Ingredient:symbol)\nHas_ingredient(\"purple\", \"mollusks\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"purple\", \"mollusks\").\n.output Answer\n\n"]}
{"id": 340, "answer": false, "completion": ".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"25th US census\", 10).\n.decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"anchovy\", 5).\n.decl Answer()\nAnswer() :- Lives_n_years(\"anchovy\", n_years1), Lasts_n_years(\"25th US census\", n_years2), n_years1 >= n_years2.\n.output Answer\n\n", "completions": [".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"25th US census\", 10).\n.decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"anchovy\", 5).\n.decl Answer()\nAnswer() :- Lives_n_years(\"anchovy\", n_years1), Lasts_n_years(\"25th US census\", n_years2), n_years1 >= n_years2.\n.output Answer\n\n"]}
{"id": 341, "answer": true, "completion": ".decl Is_in(Place:symbol, Region:symbol)\nIs_in(\"China\", \"Asia\").\nIs_in(\"France\", \"Europe\").\nIs_in(\"Asia\", \"Earth\").\nIs_in(\"Europe\", \"Earth\").\n.decl Uses_unit(Region:symbol, Unit:symbol)\nUses_unit(\"Asia\", \"metric\").\nUses_unit(\"Europe\", \"imperial\").\nUses_unit(\"Earth\", \"imperial\").\n.decl Answer()\nAnswer() :- Is_in(\"China\", region1), Is_in(\"France\", region2), Uses_unit(region1, unit1), Uses_unit(region2, unit2), unit1 != unit2.\n.output Answer\n\n", "completions": [".decl Is_in(Place:symbol, Region:symbol)\nIs_in(\"China\", \"Asia\").\nIs_in(\"France\", \"Europe\").\nIs_in(\"Asia\", \"Earth\").\nIs_in(\"Europe\", \"Earth\").\n.decl Uses_unit(Region:symbol, Unit:symbol)\nUses_unit(\"Asia\", \"metric\").\nUses_unit(\"Europe\", \"imperial\").\nUses_unit(\"Earth\", \"imperial\").\n.decl Answer()\nAnswer() :- Is_in(\"China\", region1), Is_in(\"France\", region2), Uses_unit(region1, unit1), Uses_unit(region2, unit2), unit1 != unit2.\n.output Answer\n\n"]}
{"id": 342, "answer": true, "completion": ".decl Has_n_words(Text:symbol, N_words:float)\nHas_n_words(\"Lines on the Antiquity of Microbes\", 5).\nHas_n_words(\"haiku\", 17).\n.decl Answer()\nAnswer() :- Has_n_words(\"Lines on the Antiquity of Microbes\", n_words1), Has_n_words(\"haiku\", n_words2), n_words1 < n_words2.\n.output Answer\n\n\n", "completions": [".decl Has_n_words(Text:symbol, N_words:float)\nHas_n_words(\"Lines on the Antiquity of Microbes\", 5).\nHas_n_words(\"haiku\", 17).\n.decl Answer()\nAnswer() :- Has_n_words(\"Lines on the Antiquity of Microbes\", n_words1), Has_n_words(\"haiku\", n_words2), n_words1 < n_words2.\n.output Answer\n\n\n"]}
{"id": 343, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Metallica\", 4).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"giant pandas\", 1).\n.decl Answer()\nAnswer() :- Has_n_members(\"Metallica\", n_members1), Has_n_members(\"giant pandas\", n_members2), n_members1 <= n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Metallica\", 4).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"giant pandas\", 1).\n.decl Answer()\nAnswer() :- Has_n_members(\"Metallica\", n_members1), Has_n_members(\"giant pandas\", n_members2), n_members1 <= n_members2.\n.output Answer\n\n"]}
{"id": 344, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"snowy day\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", time), Happens_in_time(\"snowy day\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"snowy day\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", time), Happens_in_time(\"snowy day\", time).\n.output Answer\n\n"]}
{"id": 345, "answer": false, "completion": ".decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Cyril Ramaphosa\", \"politician\").\nIs_a(\"Cyril Ramaphosa\", \"lawyer\").\nIs_a(\"Cyril Ramaphosa\", \"businessperson\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"politician\", \"public servant\").\nIs_a(\"lawyer\", \"public servant\").\nIs_a(\"businessperson\", \"public servant\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"public servant\", \"civilian\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"civilian\", \"person\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"person\", \"living thing\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"living thing\", \"thing\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"thing\", \"object\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"object\", \"entity\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"entity\", \"abstraction\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"abstraction\", \"concept\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"concept\", \"idea\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"idea\", \"thought\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"thought\", \"mental activity\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"mental activity\", \"activity\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"activity\", \"process\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"process\", \"procedure\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"procedure\", \"routine\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"routine\", \"habit\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"habit\", \"custom\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"custom\", \"tradition\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"tradition\", \"convention\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"convention\", \"agreement\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"agreement\", \"accord\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"accord\", \"understanding\").\n.decl Is_a(Profession:", "completions": [".decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Cyril Ramaphosa\", \"politician\").\nIs_a(\"Cyril Ramaphosa\", \"lawyer\").\nIs_a(\"Cyril Ramaphosa\", \"businessperson\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"politician\", \"public servant\").\nIs_a(\"lawyer\", \"public servant\").\nIs_a(\"businessperson\", \"public servant\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"public servant\", \"civilian\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"civilian\", \"person\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"person\", \"living thing\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"living thing\", \"thing\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"thing\", \"object\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"object\", \"entity\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"entity\", \"abstraction\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"abstraction\", \"concept\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"concept\", \"idea\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"idea\", \"thought\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"thought\", \"mental activity\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"mental activity\", \"activity\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"activity\", \"process\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"process\", \"procedure\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"procedure\", \"routine\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"routine\", \"habit\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"habit\", \"custom\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"custom\", \"tradition\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"tradition\", \"convention\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"convention\", \"agreement\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"agreement\", \"accord\").\n.decl Is_a(Profession:symbol, Profession2:symbol)\nIs_a(\"accord\", \"understanding\").\n.decl Is_a(Profession:"]}
{"id": 346, "answer": true, "completion": ".decl Is_made_by(Product:symbol, Maker:symbol)\nIs_made_by(\"twinkie\", \"Hostess\").\n.decl Is_artisan(Maker:symbol)\nIs_artisan(\"Hostess\").\n.decl Answer()\nAnswer() :- Is_made_by(\"twinkie\", maker), Is_artisan(maker).\n.output Answer\n\n", "completions": [".decl Is_made_by(Product:symbol, Maker:symbol)\nIs_made_by(\"twinkie\", \"Hostess\").\n.decl Is_artisan(Maker:symbol)\nIs_artisan(\"Hostess\").\n.decl Answer()\nAnswer() :- Is_made_by(\"twinkie\", maker), Is_artisan(maker).\n.output Answer\n\n"]}
{"id": 347, "answer": false, "completion": ".decl Born_near(Person:symbol, Landmark:symbol)\nBorn_near(\"Sean Connery\", \"Edinburgh Castle\").\n.decl Is_near(Landmark_A:symbol, Landmark_B:symbol)\nIs_near(\"Edinburgh Castle\", \"Scottish Parliament\").\nIs_near(\"Scottish Parliament\", \"Holyrood Palace\").\nIs_near(\"Holyrood Palace\", \"Arthur's Seat\").\nIs_near(\"Arthur's Seat\", \"Calton Hill\").\nIs_near(\"Calton Hill\", \"Princes Street Gardens\").\nIs_near(\"Princes Street Gardens\", \"Scottish National Gallery\").\nIs_near(\"Scottish National Gallery\", \"Scottish National Portrait Gallery\").\nIs_near(\"Scottish National Portrait Gallery\", \"Scottish National Gallery of Modern Art\").\nIs_near(\"Scottish National Gallery of Modern Art\", \"Dean Village\").\nIs_near(\"Dean Village\", \"Royal Botanic Garden Edinburgh\").\nIs_near(\"Royal Botanic Garden Edinburgh\", \"Edinburgh Zoo\").\nIs_near(\"Edinburgh Zoo\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\",", "completions": [".decl Born_near(Person:symbol, Landmark:symbol)\nBorn_near(\"Sean Connery\", \"Edinburgh Castle\").\n.decl Is_near(Landmark_A:symbol, Landmark_B:symbol)\nIs_near(\"Edinburgh Castle\", \"Scottish Parliament\").\nIs_near(\"Scottish Parliament\", \"Holyrood Palace\").\nIs_near(\"Holyrood Palace\", \"Arthur's Seat\").\nIs_near(\"Arthur's Seat\", \"Calton Hill\").\nIs_near(\"Calton Hill\", \"Princes Street Gardens\").\nIs_near(\"Princes Street Gardens\", \"Scottish National Gallery\").\nIs_near(\"Scottish National Gallery\", \"Scottish National Portrait Gallery\").\nIs_near(\"Scottish National Portrait Gallery\", \"Scottish National Gallery of Modern Art\").\nIs_near(\"Scottish National Gallery of Modern Art\", \"Dean Village\").\nIs_near(\"Dean Village\", \"Royal Botanic Garden Edinburgh\").\nIs_near(\"Royal Botanic Garden Edinburgh\", \"Edinburgh Zoo\").\nIs_near(\"Edinburgh Zoo\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\", \"Edinburgh Castle\").\nIs_near(\"Edinburgh Castle\","]}
{"id": 348, "answer": false, "completion": ".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"tonsillectomy\", \"tonsillitis\").\n.decl Answer()\nAnswer() :- Cures(\"tonsillectomy\", \"hepatitis\").\n.output Answer\n\n", "completions": [".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"tonsillectomy\", \"tonsillitis\").\n.decl Answer()\nAnswer() :- Cures(\"tonsillectomy\", \"hepatitis\").\n.output Answer\n\n"]}
{"id": 349, "answer": true, "completion": ".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"Elsa\", \"living ice\").\n.decl Is_popular(Object:symbol)\nIs_popular(\"Elsa\").\n.decl Answer()\nAnswer() :- Is_made_of(object, \"living ice\"), Is_popular(object).\n.output Answer\n\n", "completions": [".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"Elsa\", \"living ice\").\n.decl Is_popular(Object:symbol)\nIs_popular(\"Elsa\").\n.decl Answer()\nAnswer() :- Is_made_of(object, \"living ice\"), Is_popular(object).\n.output Answer\n\n"]}
{"id": 350, "answer": true, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"student\", \"US\").\n.decl Guarantees(Country:symbol, Right:symbol)\nGuarantees(\"US\", \"lunch at school\").\n.decl Answer()\nAnswer() :- Has_citizenship(person, country), Guarantees(country, \"lunch at school\").\n.output Answer\n\n", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"student\", \"US\").\n.decl Guarantees(Country:symbol, Right:symbol)\nGuarantees(\"US\", \"lunch at school\").\n.decl Answer()\nAnswer() :- Has_citizenship(person, country), Guarantees(country, \"lunch at school\").\n.output Answer\n\n"]}
{"id": 351, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"stool\", 0.5).\nHas_height(\"almond tree\", 10).\n.decl Has_height_limit(Animal:symbol, Height_limit:float)\nHas_height_limit(\"Lusotitan\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"stool\", height1), Has_height(\"almond tree\", height2), Has_height_limit(\"Lusotitan\", height_limit), height1 + height_limit >= height2.\n.output Answer\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"stool\", 0.5).\nHas_height(\"almond tree\", 10).\n.decl Has_height_limit(Animal:symbol, Height_limit:float)\nHas_height_limit(\"Lusotitan\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"stool\", height1), Has_height(\"almond tree\", height2), Has_height_limit(\"Lusotitan\", height_limit), height1 + height_limit >= height2.\n.output Answer\n\n"]}
{"id": 352, "answer": false, "completion": ".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"Bonanza marathon\", 24).\nLasts_n_hours(\"WWE Heat marathon\", 24).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"Bonanza marathon\", n_hours1), Lasts_n_hours(\"WWE Heat marathon\", n_hours2), n_hours1 < n_hours2.\n.output Answer\n\n", "completions": [".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"Bonanza marathon\", 24).\nLasts_n_hours(\"WWE Heat marathon\", 24).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"Bonanza marathon\", n_hours1), Lasts_n_hours(\"WWE Heat marathon\", n_hours2), n_hours1 < n_hours2.\n.output Answer\n\n"]}
{"id": 353, "answer": true, "completion": ".decl Has_cuisine(Region:symbol, Cuisine:symbol)\nHas_cuisine(\"Hawaii\", \"Hawaiian\").\nHas_cuisine(\"continental US\", \"American\").\n.decl Considered_gross(Food:symbol, Cuisine:symbol)\nConsidered_gross(\"poi\", \"Hawaiian\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"Hawaii\", cuisine1), Has_cuisine(\"continental US\", cuisine2), cuisine1 != cuisine2, Considered_gross(food, cuisine1).\n.output Answer\n\n", "completions": [".decl Has_cuisine(Region:symbol, Cuisine:symbol)\nHas_cuisine(\"Hawaii\", \"Hawaiian\").\nHas_cuisine(\"continental US\", \"American\").\n.decl Considered_gross(Food:symbol, Cuisine:symbol)\nConsidered_gross(\"poi\", \"Hawaiian\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"Hawaii\", cuisine1), Has_cuisine(\"continental US\", cuisine2), cuisine1 != cuisine2, Considered_gross(food, cuisine1).\n.output Answer\n\n"]}
{"id": 354, "answer": true, "completion": ".decl Has_ride(Park:symbol, Ride:symbol)\nHas_ride(\"Disneyland\", \"Tom and Jerry\").\n.decl Answer()\nAnswer() :- Has_ride(\"Disneyland\", \"Tom and Jerry\").\n.output Answer\n\n", "completions": [".decl Has_ride(Park:symbol, Ride:symbol)\nHas_ride(\"Disneyland\", \"Tom and Jerry\").\n.decl Answer()\nAnswer() :- Has_ride(\"Disneyland\", \"Tom and Jerry\").\n.output Answer\n\n"]}
{"id": 355, "answer": true, "completion": ".decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"Natalie Portman\", \"vegan\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"Snickers bar\", \"milk\").\n.decl Answer()\nAnswer() :- Has_diet(\"Natalie Portman\", \"vegan\"), Has_ingredient(\"Snickers bar\", ingredient), ingredient = \"milk\".\n.output Answer\n\n", "completions": [".decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"Natalie Portman\", \"vegan\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"Snickers bar\", \"milk\").\n.decl Answer()\nAnswer() :- Has_diet(\"Natalie Portman\", \"vegan\"), Has_ingredient(\"Snickers bar\", ingredient), ingredient = \"milk\".\n.output Answer\n\n"]}
{"id": 356, "answer": false, "completion": ".decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"licensed child\", \"Germany\").\n.decl Drives(Person:symbol, Car:symbol)\nDrives(\"licensed child\", \"Mercedes-Benz\").\n.decl Employed_in(Person:symbol, Country:symbol)\nEmployed_in(\"licensed child\", \"US\").\n.decl Answer()\nAnswer() :- Is_legal(\"licensed child\", \"US\"), Drives(\"licensed child\", \"Mercedes-Benz\"), Employed_in(\"licensed child\", \"US\").\n.output Answer\n\n", "completions": [".decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"licensed child\", \"Germany\").\n.decl Drives(Person:symbol, Car:symbol)\nDrives(\"licensed child\", \"Mercedes-Benz\").\n.decl Employed_in(Person:symbol, Country:symbol)\nEmployed_in(\"licensed child\", \"US\").\n.decl Answer()\nAnswer() :- Is_legal(\"licensed child\", \"US\"), Drives(\"licensed child\", \"Mercedes-Benz\"), Employed_in(\"licensed child\", \"US\").\n.output Answer\n\n"]}
{"id": 357, "answer": false, "completion": ".decl Has_n_tones(Scale:symbol, N_tones:float)\nHas_n_tones(\"Iwato scale\", 5).\n.decl Has_n_tones(Composition:symbol, N_tones:float)\nHas_n_tones(\"twelve-tone technique composition\", 12).\n.decl Answer()\nAnswer() :- Has_n_tones(\"Iwato scale\", n_tones1), Has_n_tones(\"twelve-tone technique composition\", n_tones2), n_tones1 != n_tones2.\n.output Answer\n\n", "completions": [".decl Has_n_tones(Scale:symbol, N_tones:float)\nHas_n_tones(\"Iwato scale\", 5).\n.decl Has_n_tones(Composition:symbol, N_tones:float)\nHas_n_tones(\"twelve-tone technique composition\", 12).\n.decl Answer()\nAnswer() :- Has_n_tones(\"Iwato scale\", n_tones1), Has_n_tones(\"twelve-tone technique composition\", n_tones2), n_tones1 != n_tones2.\n.output Answer\n\n"]}
{"id": 358, "answer": true, "completion": ".decl Has_fan(Person:symbol, Fan:symbol)\nHas_fan(\"Stephen King\", \"Stephen King fan\").\n.decl Owns(Person:symbol, Object:symbol)\nOwns(\"Stephen King fan\", \"image of a clown\").\n.decl Answer()\nAnswer() :- Has_fan(\"Stephen King\", fan), Owns(fan, \"image of a clown\").\n.output Answer\n\n", "completions": [".decl Has_fan(Person:symbol, Fan:symbol)\nHas_fan(\"Stephen King\", \"Stephen King fan\").\n.decl Owns(Person:symbol, Object:symbol)\nOwns(\"Stephen King fan\", \"image of a clown\").\n.decl Answer()\nAnswer() :- Has_fan(\"Stephen King\", fan), Owns(fan, \"image of a clown\").\n.output Answer\n\n"]}
{"id": 359, "answer": false, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"McDonald's\", \"hamburger\").\nSells(\"McDonald's\", \"fries\").\nSells(\"McDonald's\", \"soda\").\nSells(\"McDonald's\", \"milkshake\").\nSells(\"McDonald's\", \"apple pie\").\nSells(\"McDonald's\", \"salad\").\nSells(\"McDonald's\", \"chicken nuggets\").\nSells(\"McDonald's\", \"chicken sandwich\").\nSells(\"McDonald's\", \"fish sandwich\").\nSells(\"McDonald's\", \"coffee\").\nSells(\"McDonald's\", \"tea\").\nSells(\"McDonald's\", \"orange juice\").\nSells(\"McDonald's\", \"apple juice\").\nSells(\"McDonald's\", \"milk\").\nSells(\"McDonald's\", \"chocolate milk\").\nSells(\"McDonald's\", \"chicken wrap\").\nSells(\"McDonald's\", \"fruit smoothie\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"McDonald's\", \"hamburger\").\nSells(\"McDonald's\", \"fries\").\nSells(\"McDonald's\", \"soda\").\nSells(\"McDonald's\", \"milkshake\").\nSells(\"McDonald's\", \"apple pie\").\nSells(\"McDonald's\", \"salad\").\nSells(\"McDonald's\", \"chicken nuggets\").\nSells(\"McDonald's\", \"chicken sandwich\").\nSells(\"McDonald's\", \"fish sandwich\").\nSells(\"McDonald's\", \"coffee\").\nSells(\"McDonald's\", \"tea\").\nSells(\"McDonald's\", \"orange juice\").\nSells(\"McDonald's\", \"apple juice\").\nSells(\"McDonald's\", \"milk\").\nSells(\"McDonald's\", \"chocolate milk\").\nSells(\"McDonald's\", \"chicken wrap\").\nSells(\"McDonald's\", \"fruit smoothie\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells(\"McDonald's\", \"frozen strawberry lemonade\").\nSells"]}
{"id": 360, "answer": true, "completion": ".decl Has_speed(Vehicle:symbol, Speed:float)\nHas_speed(\"Rowe 550\", 50).\n.decl Last_n_hours(Event:symbol, N_hours:float)\nLast_n_hours(\"2008 Summer Olympics\", 24).\n.decl Answer()\nAnswer() :- Has_speed(\"Rowe 550\", speed), Last_n_hours(\"2008 Summer Olympics\", n_hours), speed * n_hours >= 1000.\n.output Answer\n\n\n", "completions": [".decl Has_speed(Vehicle:symbol, Speed:float)\nHas_speed(\"Rowe 550\", 50).\n.decl Last_n_hours(Event:symbol, N_hours:float)\nLast_n_hours(\"2008 Summer Olympics\", 24).\n.decl Answer()\nAnswer() :- Has_speed(\"Rowe 550\", speed), Last_n_hours(\"2008 Summer Olympics\", n_hours), speed * n_hours >= 1000.\n.output Answer\n\n\n"]}
{"id": 361, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Led Zeppelin\", 4).\n.decl Has_n_gramophones(Group:symbol, N_gramophones:float)\nHas_n_gramophones(\"Led Zeppelin\", 1).\n.decl Is_prime(N:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Answer()\nAnswer() :- Has_n_members(\"Led Zeppelin\", n_members), Has_n_gramophones(\"Led Zeppelin\", n_gramophones), Is_prime(n_members), n_gramophones = n_members.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Led Zeppelin\", 4).\n.decl Has_n_gramophones(Group:symbol, N_gramophones:float)\nHas_n_gramophones(\"Led Zeppelin\", 1).\n.decl Is_prime(N:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Answer()\nAnswer() :- Has_n_members(\"Led Zeppelin\", n_members), Has_n_gramophones(\"Led Zeppelin\", n_gramophones), Is_prime(n_members), n_gramophones = n_members.\n.output Answer\n\n"]}
{"id": 362, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 272).\nHas_height(\"German Shepherd\", 75).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"German Shepherd\", height2), height1 > height2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 272).\nHas_height(\"German Shepherd\", 75).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"German Shepherd\", height2), height1 > height2.\n.output Answer\n\n"]}
{"id": 363, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Great Pyramid of Giza\", 230).\nHas_length(\"man\", 1.7).\n.decl Answer()\nAnswer() :- Has_length(\"Great Pyramid of Giza\", length1), Has_length(\"man\", length2), 200 * length2 >= length1.\n.output Answer\n\n\n", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Great Pyramid of Giza\", 230).\nHas_length(\"man\", 1.7).\n.decl Answer()\nAnswer() :- Has_length(\"Great Pyramid of Giza\", length1), Has_length(\"man\", length2), 200 * length2 >= length1.\n.output Answer\n\n\n"]}
{"id": 364, "answer": true, "completion": ".decl Has_tumor(Person:symbol, Tumor:symbol)\nHas_tumor(\"John\", \"tumor in the lymph nodes\").\n.decl Is_ignorable(Tumor:symbol)\nIs_ignorable(\"tumor in the lymph nodes\").\n.decl Answer()\nAnswer() :- Has_tumor(\"John\", tumor), Is_ignorable(tumor).\n.output Answer\n\n", "completions": [".decl Has_tumor(Person:symbol, Tumor:symbol)\nHas_tumor(\"John\", \"tumor in the lymph nodes\").\n.decl Is_ignorable(Tumor:symbol)\nIs_ignorable(\"tumor in the lymph nodes\").\n.decl Answer()\nAnswer() :- Has_tumor(\"John\", tumor), Is_ignorable(tumor).\n.output Answer\n\n"]}
{"id": 365, "answer": true, "completion": ".decl Hosts(Person:symbol, Show:symbol)\nHosts(\"Stephen Colbert\", \"The Colbert Report\").\n.decl Supports(Person:symbol, Candidate:symbol)\nSupports(\"Stephen Colbert\", \"Hillary Clinton\").\nSupports(\"Stephen Colbert\", \"Donald Trump\").\n.decl Answer()\nAnswer() :- Hosts(person, \"The Colbert Report\"), Supports(person, \"Donald Trump\").\n.output Answer\n\n", "completions": [".decl Hosts(Person:symbol, Show:symbol)\nHosts(\"Stephen Colbert\", \"The Colbert Report\").\n.decl Supports(Person:symbol, Candidate:symbol)\nSupports(\"Stephen Colbert\", \"Hillary Clinton\").\nSupports(\"Stephen Colbert\", \"Donald Trump\").\n.decl Answer()\nAnswer() :- Hosts(person, \"The Colbert Report\"), Supports(person, \"Donald Trump\").\n.output Answer\n\n"]}
{"id": 366, "answer": false, "completion": ".decl Born_in(Person:symbol, Year:float)\nBorn_in(\"Tony Bennett\", 1926).\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"Tony Bennett\", 94).\n.decl Answer()\nAnswer() :- Born_in(\"Tony Bennett\", year1), Has_age(\"Tony Bennett\", age), year1 + age < 2020.\n.output Answer\n\n", "completions": [".decl Born_in(Person:symbol, Year:float)\nBorn_in(\"Tony Bennett\", 1926).\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"Tony Bennett\", 94).\n.decl Answer()\nAnswer() :- Born_in(\"Tony Bennett\", year1), Has_age(\"Tony Bennett\", age), year1 + age < 2020.\n.output Answer\n\n"]}
{"id": 367, "answer": false, "completion": ".decl Understands(Person:symbol, Animal:symbol)\nUnderstands(\"Jesus\", \"donkey\").\nUnderstands(\"Jesus\", \"lamb\").\nUnderstands(\"Jesus\", \"cow\").\nUnderstands(\"Jesus\", \"sheep\").\nUnderstands(\"Jesus\", \"goat\").\nUnderstands(\"Jesus\", \"horse\").\nUnderstands(\"Jesus\", \"pig\").\nUnderstands(\"Jesus\", \"dog\").\nUnderstands(\"Jesus\", \"cat\").\nUnderstands(\"Jesus\", \"chicken\").\nUnderstands(\"Jesus\", \"rooster\").\nUnderstands(\"Jesus\", \"duck\").\nUnderstands(\"Jesus\", \"goose\").\nUnderstands(\"Jesus\", \"turkey\").\nUnderstands(\"Jesus\", \"rabbit\").\nUnderstands(\"Jesus\", \"mouse\").\nUnderstands(\"Jesus\", \"rat\").\nUnderstands(\"Jesus\", \"hamster\").\nUnderstands(\"Jesus\", \"guinea pig\").\nUnderstands(\"Jesus\", \"gerbil\").\nUnderstands(\"Jesus\", \"chinchilla\").\nUnderstands(\"Jesus\", \"hedgehog\").\nUnderstands(\"Jesus\", \"ferret\").\nUnderstands(\"Jesus\", \"mole\").\nUnderstands(\"Jesus\", \"shrew\").\nUnderstands(\"Jesus\", \"bat\").\nUnderstands(\"Jesus\", \"bear\").\nUnderstands(\"Jesus\", \"lion\").\nUnderstands(\"Jesus\", \"tiger\").\nUnderstands(\"Jesus\", \"leopard\").\nUnderstands(\"Jesus\", \"jaguar\").\nUnderstands(\"Jesus\", \"panther\").\nUnderstands(\"Jesus\", \"cheetah\").\nUnderstands(\"Jesus\", \"lynx\").\nUnderstands(\"Jesus\", \"cougar\").\nUnderstands(\"Jesus\", \"serval\").\nUnderstands(\"Jesus\", \"caracal\").\nUnderstands(\"Jesus\", \"bobcat\").\nUnderstands(\"Jesus\", \"ocelot\").\nUnderstands(\"Jesus\", \"jaguarundi\").\nUnderstands(\"Jesus\", \"wolf\").\nUnderstands(\"Jesus\", \"coyote\").\nUnderstands(\"Jesus\", \"dingo\").\nUnderstands(\"Jesus\", \"fox\").\nUnderstands(\"Jesus\", \"hyena\").\nUnderstands(\"Jesus\", \"jackal\").\nUnderstands(\"Jesus\", \"wolverine\").\nUnderstands(\"Jesus\", \"badger\").\nUnderstands(\"Jesus\", \"weasel\").\nUnderstands(\"Jesus\", \"otter\").\nUnderstands(\"Jesus\", \"skunk\").\nUnderstands(\"Jesus\", \"mink\").\nUnderstands(\"Jesus\", \"polecat\").\nUnderstands(\"Jesus\", \"ermine\").\nUnderstands(\"Jesus\", \"raccoon\").\nUnderstands(\"Jesus\", \"kinkajou\").\nUnderstands(\"Jesus\", \"coati\").\nUnderstands(\"Jesus\", \"coatimundi\").\nUnderstands(\"Jesus\", \"giant panda\").\nUnderstands(\"Jesus\", \"red panda\").\nUnderstands(\"Jesus\", \"raccoon dog\").\nUnderstands(\"Jesus\", \"elephant\").\nUnderstands(\"Jesus\", \"rhinoceros\").\nUnderstands(\"Jesus\", \"hippopotamus\").\nUnderstands(\"Jesus\", \"giraffe\").\nUnderstands(\"Jesus\", \"okapi\").\nUnderstands(\"Jesus\", \"zebra\").\nUnderstands(\"Jesus\", \"wildebeest\").\nUnderstands(\"Jesus\", \"antelope\").\nUnderstand", "completions": [".decl Understands(Person:symbol, Animal:symbol)\nUnderstands(\"Jesus\", \"donkey\").\nUnderstands(\"Jesus\", \"lamb\").\nUnderstands(\"Jesus\", \"cow\").\nUnderstands(\"Jesus\", \"sheep\").\nUnderstands(\"Jesus\", \"goat\").\nUnderstands(\"Jesus\", \"horse\").\nUnderstands(\"Jesus\", \"pig\").\nUnderstands(\"Jesus\", \"dog\").\nUnderstands(\"Jesus\", \"cat\").\nUnderstands(\"Jesus\", \"chicken\").\nUnderstands(\"Jesus\", \"rooster\").\nUnderstands(\"Jesus\", \"duck\").\nUnderstands(\"Jesus\", \"goose\").\nUnderstands(\"Jesus\", \"turkey\").\nUnderstands(\"Jesus\", \"rabbit\").\nUnderstands(\"Jesus\", \"mouse\").\nUnderstands(\"Jesus\", \"rat\").\nUnderstands(\"Jesus\", \"hamster\").\nUnderstands(\"Jesus\", \"guinea pig\").\nUnderstands(\"Jesus\", \"gerbil\").\nUnderstands(\"Jesus\", \"chinchilla\").\nUnderstands(\"Jesus\", \"hedgehog\").\nUnderstands(\"Jesus\", \"ferret\").\nUnderstands(\"Jesus\", \"mole\").\nUnderstands(\"Jesus\", \"shrew\").\nUnderstands(\"Jesus\", \"bat\").\nUnderstands(\"Jesus\", \"bear\").\nUnderstands(\"Jesus\", \"lion\").\nUnderstands(\"Jesus\", \"tiger\").\nUnderstands(\"Jesus\", \"leopard\").\nUnderstands(\"Jesus\", \"jaguar\").\nUnderstands(\"Jesus\", \"panther\").\nUnderstands(\"Jesus\", \"cheetah\").\nUnderstands(\"Jesus\", \"lynx\").\nUnderstands(\"Jesus\", \"cougar\").\nUnderstands(\"Jesus\", \"serval\").\nUnderstands(\"Jesus\", \"caracal\").\nUnderstands(\"Jesus\", \"bobcat\").\nUnderstands(\"Jesus\", \"ocelot\").\nUnderstands(\"Jesus\", \"jaguarundi\").\nUnderstands(\"Jesus\", \"wolf\").\nUnderstands(\"Jesus\", \"coyote\").\nUnderstands(\"Jesus\", \"dingo\").\nUnderstands(\"Jesus\", \"fox\").\nUnderstands(\"Jesus\", \"hyena\").\nUnderstands(\"Jesus\", \"jackal\").\nUnderstands(\"Jesus\", \"wolverine\").\nUnderstands(\"Jesus\", \"badger\").\nUnderstands(\"Jesus\", \"weasel\").\nUnderstands(\"Jesus\", \"otter\").\nUnderstands(\"Jesus\", \"skunk\").\nUnderstands(\"Jesus\", \"mink\").\nUnderstands(\"Jesus\", \"polecat\").\nUnderstands(\"Jesus\", \"ermine\").\nUnderstands(\"Jesus\", \"raccoon\").\nUnderstands(\"Jesus\", \"kinkajou\").\nUnderstands(\"Jesus\", \"coati\").\nUnderstands(\"Jesus\", \"coatimundi\").\nUnderstands(\"Jesus\", \"giant panda\").\nUnderstands(\"Jesus\", \"red panda\").\nUnderstands(\"Jesus\", \"raccoon dog\").\nUnderstands(\"Jesus\", \"elephant\").\nUnderstands(\"Jesus\", \"rhinoceros\").\nUnderstands(\"Jesus\", \"hippopotamus\").\nUnderstands(\"Jesus\", \"giraffe\").\nUnderstands(\"Jesus\", \"okapi\").\nUnderstands(\"Jesus\", \"zebra\").\nUnderstands(\"Jesus\", \"wildebeest\").\nUnderstands(\"Jesus\", \"antelope\").\nUnderstand"]}
{"id": 368, "answer": false, "completion": ".decl Has_n_digits(Number:symbol, N_digits:float)\nHas_n_digits(\"Fibonacci number sequence\", 100).\nHas_n_digits(\"Pi\", 100).\n.decl Answer()\nAnswer() :- Has_n_digits(\"Fibonacci number sequence\", n_digits1), Has_n_digits(\"Pi\", n_digits2), n_digits1 > n_digits2.\n.output Answer\n\n", "completions": [".decl Has_n_digits(Number:symbol, N_digits:float)\nHas_n_digits(\"Fibonacci number sequence\", 100).\nHas_n_digits(\"Pi\", 100).\n.decl Answer()\nAnswer() :- Has_n_digits(\"Fibonacci number sequence\", n_digits1), Has_n_digits(\"Pi\", n_digits2), n_digits1 > n_digits2.\n.output Answer\n\n"]}
{"id": 369, "answer": true, "completion": ".decl Has_n_peas(Pod:symbol, N_peas:float)\nHas_n_peas(\"pod\", 10).\n.decl Has_n_commas(Number:symbol, N_commas:float)\nHas_n_commas(\"billion\", 2).\n.decl Answer()\nAnswer() :- Has_n_peas(\"pod\", n_peas), Has_n_commas(\"billion\", n_commas), n_peas >= n_commas.\n.output Answer\n\n", "completions": [".decl Has_n_peas(Pod:symbol, N_peas:float)\nHas_n_peas(\"pod\", 10).\n.decl Has_n_commas(Number:symbol, N_commas:float)\nHas_n_commas(\"billion\", 2).\n.decl Answer()\nAnswer() :- Has_n_peas(\"pod\", n_peas), Has_n_commas(\"billion\", n_commas), n_peas >= n_commas.\n.output Answer\n\n"]}
{"id": 370, "answer": true, "completion": ".decl Is_ingredient_in(Ingredient:symbol, Dish:symbol)\nIs_ingredient_in(\"goat\", \"French toast\").\n.decl Answer()\nAnswer() :- Is_ingredient_in(\"goat\", \"French toast\").\n.output Answer\n\n", "completions": [".decl Is_ingredient_in(Ingredient:symbol, Dish:symbol)\nIs_ingredient_in(\"goat\", \"French toast\").\n.decl Answer()\nAnswer() :- Is_ingredient_in(\"goat\", \"French toast\").\n.output Answer\n\n"]}
{"id": 371, "answer": false, "completion": ".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"US Secretary of State\", \"US Secretary of State\").\nHas_position(\"administrative secretary of an office\", \"administrative secretary of an office\").\n.decl Answer()\nAnswer() :- Has_position(\"US Secretary of State\", position1), Has_position(\"administrative secretary of an office\", position2), position1 = position2.\n.output Answer\n\n", "completions": [".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"US Secretary of State\", \"US Secretary of State\").\nHas_position(\"administrative secretary of an office\", \"administrative secretary of an office\").\n.decl Answer()\nAnswer() :- Has_position(\"US Secretary of State\", position1), Has_position(\"administrative secretary of an office\", position2), position1 = position2.\n.output Answer\n\n"]}
{"id": 372, "answer": true, "completion": ".decl Has_n_years_experience(Person:symbol, N_years:float)\nHas_n_years_experience(\"Dale Earnhardt Jr.\", 3).\n.decl Answer()\nAnswer() :- Has_n_years_experience(\"Dale Earnhardt Jr.\", n_years), n_years < 5.\n.output Answer\n\n", "completions": [".decl Has_n_years_experience(Person:symbol, N_years:float)\nHas_n_years_experience(\"Dale Earnhardt Jr.\", 3).\n.decl Answer()\nAnswer() :- Has_n_years_experience(\"Dale Earnhardt Jr.\", n_years), n_years < 5.\n.output Answer\n\n"]}
{"id": 373, "answer": true, "completion": ".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Ronda Rousey\", 10).\nHas_strength(\"Colossus\", 8).\n.decl Answer()\nAnswer() :- Has_strength(\"Ronda Rousey\", strength1), Has_strength(\"Colossus\", strength2), strength1 > strength2.\n.output Answer\n\n", "completions": [".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Ronda Rousey\", 10).\nHas_strength(\"Colossus\", 8).\n.decl Answer()\nAnswer() :- Has_strength(\"Ronda Rousey\", strength1), Has_strength(\"Colossus\", strength2), strength1 > strength2.\n.output Answer\n\n"]}
{"id": 374, "answer": false, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"DRL Racer X drone\", 100).\n.decl Has_length(Object:symbol, Length:float)\nHas_length(\"Brooklyn Bridge\", 1810).\n.decl Answer()\nAnswer() :- Has_speed(\"DRL Racer X drone\", speed), Has_length(\"Brooklyn Bridge\", length), speed >= length.\n.output Answer\n\n", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"DRL Racer X drone\", 100).\n.decl Has_length(Object:symbol, Length:float)\nHas_length(\"Brooklyn Bridge\", 1810).\n.decl Answer()\nAnswer() :- Has_speed(\"DRL Racer X drone\", speed), Has_length(\"Brooklyn Bridge\", length), speed >= length.\n.output Answer\n\n"]}
{"id": 375, "answer": true, "completion": ".decl Is_type_of(Art:symbol, Type:symbol)\nIs_type_of(\"photography\", \"abstract art\").\n.decl Answer()\nAnswer() :- Is_type_of(\"photography\", \"abstract art\").\n.output Answer\n\n", "completions": [".decl Is_type_of(Art:symbol, Type:symbol)\nIs_type_of(\"photography\", \"abstract art\").\n.decl Answer()\nAnswer() :- Is_type_of(\"photography\", \"abstract art\").\n.output Answer\n\n"]}
{"id": 376, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"giant squid\", 43).\nHas_length(\"titanic\", 269).\n.decl Answer()\nAnswer() :- Has_length(\"giant squid\", length1), Has_length(\"titanic\", length2), length1 < length2.\n.output Answer\n\n", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"giant squid\", 43).\nHas_length(\"titanic\", 269).\n.decl Answer()\nAnswer() :- Has_length(\"giant squid\", length1), Has_length(\"titanic\", length2), length1 < length2.\n.output Answer\n\n"]}
{"id": 377, "answer": true, "completion": ".decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Supernatural\", 10).\nHas_n_seasons(\"2001 CW debuting shows\", 1).\n.decl Answer()\nAnswer() :- Has_n_seasons(\"Supernatural\", n_seasons1), Has_n_seasons(\"2001 CW debuting shows\", n_seasons2), n_seasons1 > n_seasons2.\n.output Answer\n\n", "completions": [".decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Supernatural\", 10).\nHas_n_seasons(\"2001 CW debuting shows\", 1).\n.decl Answer()\nAnswer() :- Has_n_seasons(\"Supernatural\", n_seasons1), Has_n_seasons(\"2001 CW debuting shows\", n_seasons2), n_seasons1 > n_seasons2.\n.output Answer\n\n"]}
{"id": 378, "answer": true, "completion": ".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Eddie Murphy\", \"Charles Murphy\").\n.decl Sees(Person:symbol, Event:symbol)\nSees(\"Charles Murphy\", \"Eddie Murphy's first stand up show\").\n.decl Answer()\nAnswer() :- Has_father(\"Eddie Murphy\", father), Sees(father, \"Eddie Murphy's first stand up show\").\n.output Answer\n\n", "completions": [".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Eddie Murphy\", \"Charles Murphy\").\n.decl Sees(Person:symbol, Event:symbol)\nSees(\"Charles Murphy\", \"Eddie Murphy's first stand up show\").\n.decl Answer()\nAnswer() :- Has_father(\"Eddie Murphy\", father), Sees(father, \"Eddie Murphy's first stand up show\").\n.output Answer\n\n"]}
{"id": 379, "answer": false, "completion": ".decl Has_wavelength(Object:symbol, Wavelength:float)\nHas_wavelength(\"methane\", 0.0007).\nHas_wavelength(\"visible light\", 0.0004).\n.decl Answer()\nAnswer() :- Has_wavelength(\"methane\", wavelength1), Has_wavelength(\"visible light\", wavelength2), wavelength1 < wavelength2.\n.output Answer\n\n", "completions": [".decl Has_wavelength(Object:symbol, Wavelength:float)\nHas_wavelength(\"methane\", 0.0007).\nHas_wavelength(\"visible light\", 0.0004).\n.decl Answer()\nAnswer() :- Has_wavelength(\"methane\", wavelength1), Has_wavelength(\"visible light\", wavelength2), wavelength1 < wavelength2.\n.output Answer\n\n"]}
{"id": 380, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"frost\", \"autumn\").\nHappens_in_time(\"frost\", \"spring\").\nHappens_in_time(\"frost\", \"summer\").\nHappens_in_time(\"frost\", \"September\").\nHappens_in_time(\"frost\", \"October\").\nHappens_in_time(\"frost\", \"November\").\nHappens_in_time(\"frost\", \"December\").\nHappens_in_time(\"frost\", \"January\").\nHappens_in_time(\"frost\", \"February\").\nHappens_in_time(\"frost\", \"March\").\nHappens_in_time(\"frost\", \"April\").\nHappens_in_time(\"frost\", \"May\").\nHappens_in_time(\"frost\", \"June\").\nHappens_in_time(\"frost\", \"July\").\nHappens_in_time(\"frost\", \"August\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"frost\", \"Texas\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", \"September\"), Happens_in_place(\"frost\", \"Texas\").\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"frost\", \"autumn\").\nHappens_in_time(\"frost\", \"spring\").\nHappens_in_time(\"frost\", \"summer\").\nHappens_in_time(\"frost\", \"September\").\nHappens_in_time(\"frost\", \"October\").\nHappens_in_time(\"frost\", \"November\").\nHappens_in_time(\"frost\", \"December\").\nHappens_in_time(\"frost\", \"January\").\nHappens_in_time(\"frost\", \"February\").\nHappens_in_time(\"frost\", \"March\").\nHappens_in_time(\"frost\", \"April\").\nHappens_in_time(\"frost\", \"May\").\nHappens_in_time(\"frost\", \"June\").\nHappens_in_time(\"frost\", \"July\").\nHappens_in_time(\"frost\", \"August\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"frost\", \"Texas\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", \"September\"), Happens_in_place(\"frost\", \"Texas\").\n.output Answer\n\n"]}
{"id": 381, "answer": true, "completion": ".decl Inhabits(Animal:symbol, Location:symbol)\nInhabits(\"mountain goat\", \"summit of Mount Sharp\").\n.decl Answer()\nAnswer() :- Inhabits(\"mountain goat\", \"summit of Mount Sharp\").\n.output Answer\n\n", "completions": [".decl Inhabits(Animal:symbol, Location:symbol)\nInhabits(\"mountain goat\", \"summit of Mount Sharp\").\n.decl Answer()\nAnswer() :- Inhabits(\"mountain goat\", \"summit of Mount Sharp\").\n.output Answer\n\n"]}
{"id": 382, "answer": true, "completion": ".decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Felicity Huffman\", \"Mike DeWine\").\n.decl Answer()\nAnswer() :- Votes_for(\"Felicity Huffman\", \"Mike DeWine\").\n.output Answer\n\n", "completions": [".decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Felicity Huffman\", \"Mike DeWine\").\n.decl Answer()\nAnswer() :- Votes_for(\"Felicity Huffman\", \"Mike DeWine\").\n.output Answer\n\n"]}
{"id": 383, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Tony Bennett\", 4).\n.decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Tony Bennett\", 3).\n.decl Answer()\nAnswer() :- Has_n_children(\"Tony Bennett\", n_children), Has_n_wives(\"Tony Bennett\", n_wives), n_children > n_wives.\n.output Answer\n\n", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Tony Bennett\", 4).\n.decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Tony Bennett\", 3).\n.decl Answer()\nAnswer() :- Has_n_children(\"Tony Bennett\", n_children), Has_n_wives(\"Tony Bennett\", n_wives), n_children > n_wives.\n.output Answer\n\n"]}
{"id": 384, "answer": true, "completion": ".decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Survivor\", 34).\n.decl Has_n_letters(Alphabet:symbol, N_letters:float)\nHas_n_letters(\"Ancient Greek\", 24).\n.decl Answer()\nAnswer() :- Has_n_seasons(\"Survivor\", n_seasons), Has_n_letters(\"Ancient Greek\", n_letters), n_seasons > n_letters.\n.output Answer\n\n", "completions": [".decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Survivor\", 34).\n.decl Has_n_letters(Alphabet:symbol, N_letters:float)\nHas_n_letters(\"Ancient Greek\", 24).\n.decl Answer()\nAnswer() :- Has_n_seasons(\"Survivor\", n_seasons), Has_n_letters(\"Ancient Greek\", n_letters), n_seasons > n_letters.\n.output Answer\n\n"]}
{"id": 385, "answer": true, "completion": ".decl Has_speed(Sound:symbol, Speed:float)\nHas_speed(\"sound\", 1100).\n.decl Has_distance(Person1:symbol, Person2:symbol, Distance:float)\nHas_distance(\"Carl Friedrich Gauss\", \"someone\", 100).\n.decl Answer()\nAnswer() :- Has_speed(\"sound\", speed), Has_distance(\"Carl Friedrich Gauss\", \"someone\", distance), speed >= distance.\n.output Answer\n\n", "completions": [".decl Has_speed(Sound:symbol, Speed:float)\nHas_speed(\"sound\", 1100).\n.decl Has_distance(Person1:symbol, Person2:symbol, Distance:float)\nHas_distance(\"Carl Friedrich Gauss\", \"someone\", 100).\n.decl Answer()\nAnswer() :- Has_speed(\"sound\", speed), Has_distance(\"Carl Friedrich Gauss\", \"someone\", distance), speed >= distance.\n.output Answer\n\n"]}
{"id": 386, "answer": true, "completion": ".decl Is_ingredient(Ingredient:symbol, Recipe:symbol)\nIs_ingredient(\"grapes\", \"winemaking\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"grapes\", \"winemaking\").\n.output Answer\n\n", "completions": [".decl Is_ingredient(Ingredient:symbol, Recipe:symbol)\nIs_ingredient(\"grapes\", \"winemaking\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"grapes\", \"winemaking\").\n.output Answer\n\n"]}
{"id": 387, "answer": false, "completion": ".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"pregnancy\", 9).\nLasts_n_months(\"wheat seed blooms\", 3).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"pregnancy\", n_months1), Lasts_n_months(\"wheat seed blooms\", n_months2), n_months1 < n_months2.\n.output Answer\n\n\n", "completions": [".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"pregnancy\", 9).\nLasts_n_months(\"wheat seed blooms\", 3).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"pregnancy\", n_months1), Lasts_n_months(\"wheat seed blooms\", n_months2), n_months1 < n_months2.\n.output Answer\n\n\n"]}
{"id": 388, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"adenovirus\", 0.01).\n.decl Can_make(Technology:symbol, Object:symbol)\nCan_make(\"3D printing\", \"adenovirus\").\n.decl Answer()\nAnswer() :- Has_size(\"adenovirus\", size), Can_make(\"3D printing\", \"adenovirus\").\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"adenovirus\", 0.01).\n.decl Can_make(Technology:symbol, Object:symbol)\nCan_make(\"3D printing\", \"adenovirus\").\n.decl Answer()\nAnswer() :- Has_size(\"adenovirus\", size), Can_make(\"3D printing\", \"adenovirus\").\n.output Answer\n\n"]}
{"id": 389, "answer": true, "completion": ".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Oscar Wilde\", \"Dorian Gray\").\n.decl Has_project(Person:symbol, Project:symbol)\nHas_project(\"Eva Green\", \"Casino Royale\").\n.decl Answer()\nAnswer() :- Has_character(\"Oscar Wilde\", character), Has_project(\"Eva Green\", project).\n.output Answer\n\n", "completions": [".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Oscar Wilde\", \"Dorian Gray\").\n.decl Has_project(Person:symbol, Project:symbol)\nHas_project(\"Eva Green\", \"Casino Royale\").\n.decl Answer()\nAnswer() :- Has_character(\"Oscar Wilde\", character), Has_project(\"Eva Green\", project).\n.output Answer\n\n"]}
{"id": 390, "answer": false, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota stadium\", 20).\n.decl Has_n_people(State:symbol, N_people:float)\nHas_n_people(\"Michigan\", 100).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota stadium\", capacity), Has_n_people(\"Michigan\", n_people), capacity >= n_people.\n.output Answer\n\n\n", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota stadium\", 20).\n.decl Has_n_people(State:symbol, N_people:float)\nHas_n_people(\"Michigan\", 100).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota stadium\", capacity), Has_n_people(\"Michigan\", n_people), capacity >= n_people.\n.output Answer\n\n\n"]}
{"id": 391, "answer": false, "completion": ".decl Weighs(Person:symbol, Weight:float)\nWeighs(\"Arnold Schwarzenegger\", 135).\n.decl Weighs(Animal:symbol, Weight:float)\nWeighs(\"red fox\", 10).\n.decl Answer()\nAnswer() :- Weighs(\"Arnold Schwarzenegger\", weight1), Weighs(\"red fox\", weight2), weight1 < weight2.\n.output Answer\n\n", "completions": [".decl Weighs(Person:symbol, Weight:float)\nWeighs(\"Arnold Schwarzenegger\", 135).\n.decl Weighs(Animal:symbol, Weight:float)\nWeighs(\"red fox\", 10).\n.decl Answer()\nAnswer() :- Weighs(\"Arnold Schwarzenegger\", weight1), Weighs(\"red fox\", weight2), weight1 < weight2.\n.output Answer\n\n"]}
{"id": 392, "answer": false, "completion": ".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"Eid al-Fitr\", 24).\nLasts_n_hours(\"US Office\", 6).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"Eid al-Fitr\", n_hours1), Lasts_n_hours(\"US Office\", n_hours2), n_hours1 < n_hours2.\n.output Answer\n\n\n", "completions": [".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"Eid al-Fitr\", 24).\nLasts_n_hours(\"US Office\", 6).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"Eid al-Fitr\", n_hours1), Lasts_n_hours(\"US Office\", n_hours2), n_hours1 < n_hours2.\n.output Answer\n\n\n"]}
{"id": 393, "answer": true, "completion": ".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Tropicana Field\", 46400).\n.decl Has_population(Place:symbol, Population:float)\nHas_population(\"Auburn, New York\", 28000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tropicana Field\", capacity), Has_population(\"Auburn, New York\", population), capacity >= population.\n.output Answer\n\n", "completions": [".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Tropicana Field\", 46400).\n.decl Has_population(Place:symbol, Population:float)\nHas_population(\"Auburn, New York\", 28000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tropicana Field\", capacity), Has_population(\"Auburn, New York\", population), capacity >= population.\n.output Answer\n\n"]}
{"id": 394, "answer": true, "completion": ".decl Has_child(Person:symbol, Child:symbol)\nHas_child(\"Richard III\", \"Edward V\").\nHas_child(\"Edward V\", \"Edward VI\").\n.decl Answer()\nAnswer() :- Has_child(\"Richard III\", \"Edward VI\").\nAnswer() :- Has_child(\"Richard III\", child1), Has_child(child1, \"Edward VI\").\n.output Answer\n\n", "completions": [".decl Has_child(Person:symbol, Child:symbol)\nHas_child(\"Richard III\", \"Edward V\").\nHas_child(\"Edward V\", \"Edward VI\").\n.decl Answer()\nAnswer() :- Has_child(\"Richard III\", \"Edward VI\").\nAnswer() :- Has_child(\"Richard III\", child1), Has_child(child1, \"Edward VI\").\n.output Answer\n\n"]}
{"id": 395, "answer": true, "completion": ".decl Has_n_victims(Event:symbol, N_victims:float)\nHas_n_victims(\"landslides\", 100).\nHas_n_victims(\"1980 United States presidential election\", 50).\n.decl Answer()\nAnswer() :- Has_n_victims(\"landslides\", n_victims1), Has_n_victims(\"1980 United States presidential election\", n_victims2), n_victims1 > n_victims2.\n.output Answer\n\n", "completions": [".decl Has_n_victims(Event:symbol, N_victims:float)\nHas_n_victims(\"landslides\", 100).\nHas_n_victims(\"1980 United States presidential election\", 50).\n.decl Answer()\nAnswer() :- Has_n_victims(\"landslides\", n_victims1), Has_n_victims(\"1980 United States presidential election\", n_victims2), n_victims1 > n_victims2.\n.output Answer\n\n"]}
{"id": 396, "answer": true, "completion": ".decl Has_depth(Place:symbol, Depth:float)\nHas_depth(\"Red Sea\", 2200).\n.decl Has_max_depth(Person:symbol, Max_depth:float)\nHas_max_depth(\"Nuno Gomes\", 100).\n.decl Answer()\nAnswer() :- Has_depth(\"Red Sea\", depth), Has_max_depth(\"Nuno Gomes\", max_depth), depth > max_depth.\n.output Answer\n\n\n", "completions": [".decl Has_depth(Place:symbol, Depth:float)\nHas_depth(\"Red Sea\", 2200).\n.decl Has_max_depth(Person:symbol, Max_depth:float)\nHas_max_depth(\"Nuno Gomes\", 100).\n.decl Answer()\nAnswer() :- Has_depth(\"Red Sea\", depth), Has_max_depth(\"Nuno Gomes\", max_depth), depth > max_depth.\n.output Answer\n\n\n"]}
{"id": 397, "answer": true, "completion": ".decl Knows(Person:symbol, Topic:symbol)\nKnows(\"Tom Cruise\", \"mental auditing\").\n.decl Explains(Person:symbol, Topic:symbol)\nExplains(\"Tom Cruise\", \"mental auditing\").\n.decl Answer()\nAnswer() :- Knows(\"Tom Cruise\", \"mental auditing\"), Explains(\"Tom Cruise\", \"mental auditing\").\n.output Answer\n\n", "completions": [".decl Knows(Person:symbol, Topic:symbol)\nKnows(\"Tom Cruise\", \"mental auditing\").\n.decl Explains(Person:symbol, Topic:symbol)\nExplains(\"Tom Cruise\", \"mental auditing\").\n.decl Answer()\nAnswer() :- Knows(\"Tom Cruise\", \"mental auditing\"), Explains(\"Tom Cruise\", \"mental auditing\").\n.output Answer\n\n"]}
{"id": 398, "answer": false, "completion": ".decl Listens_to(Person:symbol, Music_format:symbol)\nListens_to(\"John Lennon\", \"vinyl\").\nListens_to(\"John Lennon\", \"cassette\").\nListens_to(\"John Lennon\", \"8-track\").\n.decl Answer()\nAnswer() :- Listens_to(\"John Lennon\", \"Compact discs\").\n.output Answer\n\n", "completions": [".decl Listens_to(Person:symbol, Music_format:symbol)\nListens_to(\"John Lennon\", \"vinyl\").\nListens_to(\"John Lennon\", \"cassette\").\nListens_to(\"John Lennon\", \"8-track\").\n.decl Answer()\nAnswer() :- Listens_to(\"John Lennon\", \"Compact discs\").\n.output Answer\n\n"]}
{"id": 399, "answer": false, "completion": ".decl Is_Prime_Minister(Person:symbol, Time:symbol)\nIs_Prime_Minister(\"Stanley Baldwin\", \"1923-1924\").\nIs_Prime_Minister(\"Stanley Baldwin\", \"1924-1929\").\nIs_Prime_Minister(\"Stanley Baldwin\", \"1935-1937\").\nIs_Prime_Minister(\"Margaret Thatcher\", \"1979-1990\").\nIs_Prime_Minister(\"Margaret Thatcher\", \"1990-1990\").\nIs_Prime_Minister(\"Margaret Thatcher\", \"1990-1990\").\n.decl Answer()\nAnswer() :- Is_Prime_Minister(\"Stanley Baldwin\", time1), Is_Prime_Minister(\"Margaret Thatcher\", time2), time1 = time2 + 1.\n.output Answer\n\n", "completions": [".decl Is_Prime_Minister(Person:symbol, Time:symbol)\nIs_Prime_Minister(\"Stanley Baldwin\", \"1923-1924\").\nIs_Prime_Minister(\"Stanley Baldwin\", \"1924-1929\").\nIs_Prime_Minister(\"Stanley Baldwin\", \"1935-1937\").\nIs_Prime_Minister(\"Margaret Thatcher\", \"1979-1990\").\nIs_Prime_Minister(\"Margaret Thatcher\", \"1990-1990\").\nIs_Prime_Minister(\"Margaret Thatcher\", \"1990-1990\").\n.decl Answer()\nAnswer() :- Is_Prime_Minister(\"Stanley Baldwin\", time1), Is_Prime_Minister(\"Margaret Thatcher\", time2), time1 = time2 + 1.\n.output Answer\n\n"]}
{"id": 400, "answer": true, "completion": ".decl Has_shoe_size(Person:symbol, Shoe_size:float)\nHas_shoe_size(\"Benito Mussolini\", 13).\nHas_shoe_size(\"Hafþór Björnsson\", 15).\n.decl Answer()\nAnswer() :- Has_shoe_size(\"Benito Mussolini\", shoe_size1), Has_shoe_size(\"Hafþór Björnsson\", shoe_size2), shoe_size1 < shoe_size2.\n.output Answer\n\n", "completions": [".decl Has_shoe_size(Person:symbol, Shoe_size:float)\nHas_shoe_size(\"Benito Mussolini\", 13).\nHas_shoe_size(\"Hafþór Björnsson\", 15).\n.decl Answer()\nAnswer() :- Has_shoe_size(\"Benito Mussolini\", shoe_size1), Has_shoe_size(\"Hafþór Björnsson\", shoe_size2), shoe_size1 < shoe_size2.\n.output Answer\n\n"]}
{"id": 401, "answer": true, "completion": ".decl Fears(Animal_A:symbol, Animal_B:symbol)\nFears(\"black-tailed jackrabbit\", \"European wildcat\").\n.decl Answer()\nAnswer() :- Fears(\"black-tailed jackrabbit\", \"European wildcat\").\n.output Answer\n\n", "completions": [".decl Fears(Animal_A:symbol, Animal_B:symbol)\nFears(\"black-tailed jackrabbit\", \"European wildcat\").\n.decl Answer()\nAnswer() :- Fears(\"black-tailed jackrabbit\", \"European wildcat\").\n.output Answer\n\n"]}
{"id": 402, "answer": true, "completion": ".decl Named_after(Place:symbol, Person:symbol)\nNamed_after(\"Norman Oklahoma\", \"Norman\").\n.decl Is_a(Person:symbol, Type:symbol)\nIs_a(\"Norman\", \"viking\").\n.decl Answer()\nAnswer() :- Named_after(\"Norman Oklahoma\", person), Is_a(person, \"viking\").\n.output Answer\n\n", "completions": [".decl Named_after(Place:symbol, Person:symbol)\nNamed_after(\"Norman Oklahoma\", \"Norman\").\n.decl Is_a(Person:symbol, Type:symbol)\nIs_a(\"Norman\", \"viking\").\n.decl Answer()\nAnswer() :- Named_after(\"Norman Oklahoma\", person), Is_a(person, \"viking\").\n.output Answer\n\n"]}
{"id": 403, "answer": false, "completion": ".decl Has_coordinates(Area:symbol, Latitude:float, Longitude:float)\nHas_coordinates(\"area\", 0, 0).\n.decl Answer()\nAnswer() :- Has_coordinates(\"area\", latitude, longitude), latitude != 0.\n.output Answer\n\n", "completions": [".decl Has_coordinates(Area:symbol, Latitude:float, Longitude:float)\nHas_coordinates(\"area\", 0, 0).\n.decl Answer()\nAnswer() :- Has_coordinates(\"area\", latitude, longitude), latitude != 0.\n.output Answer\n\n"]}
{"id": 404, "answer": true, "completion": ".decl Has_political_affiliation(Person:symbol, Political_affiliation:symbol)\nHas_political_affiliation(\"Glen Beck\", \"conservative\").\nHas_political_affiliation(\"Stephen Colbert\", \"liberal\").\n.decl Answer()\nAnswer() :- Has_political_affiliation(\"Glen Beck\", \"conservative\"), Has_political_affiliation(\"Stephen Colbert\", \"liberal\").\n.output Answer\n\n", "completions": [".decl Has_political_affiliation(Person:symbol, Political_affiliation:symbol)\nHas_political_affiliation(\"Glen Beck\", \"conservative\").\nHas_political_affiliation(\"Stephen Colbert\", \"liberal\").\n.decl Answer()\nAnswer() :- Has_political_affiliation(\"Glen Beck\", \"conservative\"), Has_political_affiliation(\"Stephen Colbert\", \"liberal\").\n.output Answer\n\n"]}
{"id": 405, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"sound barrier\", 343).\nHas_speed(\"Audi R8 V-10 Plus\", 330).\n.decl Answer()\nAnswer() :- Has_speed(\"sound barrier\", speed1), Has_speed(\"Audi R8 V-10 Plus\", speed2), speed1 > speed2.\n.output Answer\n\n", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"sound barrier\", 343).\nHas_speed(\"Audi R8 V-10 Plus\", 330).\n.decl Answer()\nAnswer() :- Has_speed(\"sound barrier\", speed1), Has_speed(\"Audi R8 V-10 Plus\", speed2), speed1 > speed2.\n.output Answer\n\n"]}
{"id": 406, "answer": false, "completion": ".decl Has_lifespan(Animal:symbol, Lifespan:float)\nHas_lifespan(\"monkey\", 20).\nHas_lifespan(\"human being\", 70).\n.decl Answer()\nAnswer() :- Has_lifespan(\"monkey\", lifespan1), Has_lifespan(\"human being\", lifespan2), lifespan1 > lifespan2.\n.output Answer\n\n", "completions": [".decl Has_lifespan(Animal:symbol, Lifespan:float)\nHas_lifespan(\"monkey\", 20).\nHas_lifespan(\"human being\", 70).\n.decl Answer()\nAnswer() :- Has_lifespan(\"monkey\", lifespan1), Has_lifespan(\"human being\", lifespan2), lifespan1 > lifespan2.\n.output Answer\n\n"]}
{"id": 407, "answer": true, "completion": ".decl Has_belief(Religion:symbol, Belief:symbol)\nHas_belief(\"Christianity\", \"Armageddon\").\n.decl Answer()\nAnswer() :- Has_belief(religion, \"Armageddon\").\n.output Answer\n\n", "completions": [".decl Has_belief(Religion:symbol, Belief:symbol)\nHas_belief(\"Christianity\", \"Armageddon\").\n.decl Answer()\nAnswer() :- Has_belief(religion, \"Armageddon\").\n.output Answer\n\n"]}
{"id": 408, "answer": true, "completion": ".decl Has_injury_level(Dance:symbol, Injury_level:float)\nHas_injury_level(\"waltz\", 1).\nHas_injury_level(\"slam dance\", 2).\n.decl Answer()\nAnswer() :- Has_injury_level(\"waltz\", injury_level1), Has_injury_level(\"slam dance\", injury_level2), injury_level1 < injury_level2.\n.output Answer\n\n", "completions": [".decl Has_injury_level(Dance:symbol, Injury_level:float)\nHas_injury_level(\"waltz\", 1).\nHas_injury_level(\"slam dance\", 2).\n.decl Answer()\nAnswer() :- Has_injury_level(\"waltz\", injury_level1), Has_injury_level(\"slam dance\", injury_level2), injury_level1 < injury_level2.\n.output Answer\n\n"]}
{"id": 409, "answer": true, "completion": ".decl Has_limbs(Animal:symbol, Limbs:symbol)\nHas_limbs(\"Yeti\", \"prehensile limbs\").\n.decl Answer()\nAnswer() :- Has_limbs(\"Yeti\", \"prehensile limbs\").\n.output Answer\n\n", "completions": [".decl Has_limbs(Animal:symbol, Limbs:symbol)\nHas_limbs(\"Yeti\", \"prehensile limbs\").\n.decl Answer()\nAnswer() :- Has_limbs(\"Yeti\", \"prehensile limbs\").\n.output Answer\n\n"]}
{"id": 410, "answer": true, "completion": ".decl Holds(Event:symbol, Location:symbol)\nHolds(\"United Nations Framework Convention on Climate Change\", \"Javits Center\").\n.decl Answer()\nAnswer() :- Holds(\"United Nations Framework Convention on Climate Change\", \"Javits Center\").\n.output Answer\n\n", "completions": [".decl Holds(Event:symbol, Location:symbol)\nHolds(\"United Nations Framework Convention on Climate Change\", \"Javits Center\").\n.decl Answer()\nAnswer() :- Holds(\"United Nations Framework Convention on Climate Change\", \"Javits Center\").\n.output Answer\n\n"]}
{"id": 411, "answer": true, "completion": ".decl Succeeds(Event:symbol)\nSucceeds(\"Operation Barbarossa\").\nSucceeds(\"Barbarossa's last expedition\").\n.decl Answer()\nAnswer() :- Succeeds(event), event = \"Operation Barbarossa\" ; event = \"Barbarossa's last expedition\".\n.output Answer\n\n", "completions": [".decl Succeeds(Event:symbol)\nSucceeds(\"Operation Barbarossa\").\nSucceeds(\"Barbarossa's last expedition\").\n.decl Answer()\nAnswer() :- Succeeds(event), event = \"Operation Barbarossa\" ; event = \"Barbarossa's last expedition\".\n.output Answer\n\n"]}
{"id": 412, "answer": true, "completion": ".decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"CAPTCHA\", \"CAT\").\nHas_letters(\"CAPTCHA\", \"PAP\").\nHas_letters(\"CAPTCHA\", \"TAP\").\nHas_letters(\"CAPTCHA\", \"CHA\").\n.decl Is_palindrome(Word:symbol)\nIs_palindrome(\"CAT\").\nIs_palindrome(\"PAP\").\nIs_palindrome(\"TAP\").\nIs_palindrome(\"CHA\").\n.decl Answer()\nAnswer() :- Has_letters(\"CAPTCHA\", word), Is_palindrome(word).\n.output Answer\n\n", "completions": [".decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"CAPTCHA\", \"CAT\").\nHas_letters(\"CAPTCHA\", \"PAP\").\nHas_letters(\"CAPTCHA\", \"TAP\").\nHas_letters(\"CAPTCHA\", \"CHA\").\n.decl Is_palindrome(Word:symbol)\nIs_palindrome(\"CAT\").\nIs_palindrome(\"PAP\").\nIs_palindrome(\"TAP\").\nIs_palindrome(\"CHA\").\n.decl Answer()\nAnswer() :- Has_letters(\"CAPTCHA\", word), Is_palindrome(word).\n.output Answer\n\n"]}
{"id": 413, "answer": false, "completion": ".decl Is_located_in(Company:symbol, City:symbol)\nIs_located_in(\"Universal Music Group\", \"New York City\").\n.decl Is_located_in(City:symbol, State:symbol)\nIs_located_in(\"New York City\", \"New York\").\n.decl Is_located_in(State:symbol, Country:symbol)\nIs_located_in(\"New York\", \"United States\").\n.decl Is_located_in(Country:symbol, Continent:symbol)\nIs_located_in(\"United States\", \"North America\").\n.decl Is_located_in(Continent:symbol, Hemisphere:symbol)\nIs_located_in(\"North America\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in", "completions": [".decl Is_located_in(Company:symbol, City:symbol)\nIs_located_in(\"Universal Music Group\", \"New York City\").\n.decl Is_located_in(City:symbol, State:symbol)\nIs_located_in(\"New York City\", \"New York\").\n.decl Is_located_in(State:symbol, Country:symbol)\nIs_located_in(\"New York\", \"United States\").\n.decl Is_located_in(Country:symbol, Continent:symbol)\nIs_located_in(\"United States\", \"North America\").\n.decl Is_located_in(Continent:symbol, Hemisphere:symbol)\nIs_located_in(\"North America\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in(\"Northern Hemisphere\", \"Northern Hemisphere\").\n.decl Is_located_in(Hemisphere:symbol, Hemisphere:symbol)\nIs_located_in"]}
{"id": 414, "answer": false, "completion": ".decl Is_backwards(Word:symbol, Backwards_word:symbol)\nIs_backwards(\"Lorem\", \"meroL\").\nIs_backwards(\"ipsum\", \"muspi\").\n.decl Has_alliteration(Phrase:symbol, Alliteration:symbol)\nHas_alliteration(\"Lorem ipsum\", \"Lorem ipsum\").\n.decl Answer()\nAnswer() :- Is_backwards(\"Lorem\", backwards_word1), Is_backwards(\"ipsum\", backwards_word2), Has_alliteration(backwards_word1 + \" \" + backwards_word2, alliteration), !Has_alliteration(alliteration, alliteration).\n.output Answer\n\n", "completions": [".decl Is_backwards(Word:symbol, Backwards_word:symbol)\nIs_backwards(\"Lorem\", \"meroL\").\nIs_backwards(\"ipsum\", \"muspi\").\n.decl Has_alliteration(Phrase:symbol, Alliteration:symbol)\nHas_alliteration(\"Lorem ipsum\", \"Lorem ipsum\").\n.decl Answer()\nAnswer() :- Is_backwards(\"Lorem\", backwards_word1), Is_backwards(\"ipsum\", backwards_word2), Has_alliteration(backwards_word1 + \" \" + backwards_word2, alliteration), !Has_alliteration(alliteration, alliteration).\n.output Answer\n\n"]}
{"id": 415, "answer": true, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"The Mona Lisa\", 70000000).\n.decl Has_revenue(Company:symbol, Revenue:float)\nHas_revenue(\"Amazon\", 177000000000).\n.decl Answer()\nAnswer() :- Has_price(\"The Mona Lisa\", price), Has_revenue(\"Amazon\", revenue), price <= revenue.\n.output Answer\n\n", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"The Mona Lisa\", 70000000).\n.decl Has_revenue(Company:symbol, Revenue:float)\nHas_revenue(\"Amazon\", 177000000000).\n.decl Answer()\nAnswer() :- Has_price(\"The Mona Lisa\", price), Has_revenue(\"Amazon\", revenue), price <= revenue.\n.output Answer\n\n"]}
{"id": 416, "answer": true, "completion": ".decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"cleric\", \"celibate\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"stoning\", \"Somalia\").\n.decl Answer()\nAnswer() :- Has_status(\"cleric\", \"celibate\"), Happens_in_place(\"stoning\", \"Somalia\").\n.output Answer\n\n", "completions": [".decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"cleric\", \"celibate\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"stoning\", \"Somalia\").\n.decl Answer()\nAnswer() :- Has_status(\"cleric\", \"celibate\"), Happens_in_place(\"stoning\", \"Somalia\").\n.output Answer\n\n"]}
{"id": 417, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Kia Rio\", 3.5).\nHas_volume(\"Oval Office\", 10).\n.decl Answer()\nAnswer() :- Has_volume(\"Kia Rio\", volume1), Has_volume(\"Oval Office\", volume2), volume1 < volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Kia Rio\", 3.5).\nHas_volume(\"Oval Office\", 10).\n.decl Answer()\nAnswer() :- Has_volume(\"Kia Rio\", volume1), Has_volume(\"Oval Office\", volume2), volume1 < volume2.\n.output Answer\n\n"]}
{"id": 418, "answer": true, "completion": ".decl Has_king(Country:symbol, King:symbol)\nHas_king(\"Portugal\", \"Manuel I\").\n.decl Has_family_ties(Person_A:symbol, Person_B:symbol)\nHas_family_ties(\"Manuel I\", \"Henry VIII\").\n.decl Answer()\nAnswer() :- Has_king(\"Portugal\", king), Has_family_ties(king, \"Henry VIII\").\n.output Answer\n\n\n", "completions": [".decl Has_king(Country:symbol, King:symbol)\nHas_king(\"Portugal\", \"Manuel I\").\n.decl Has_family_ties(Person_A:symbol, Person_B:symbol)\nHas_family_ties(\"Manuel I\", \"Henry VIII\").\n.decl Answer()\nAnswer() :- Has_king(\"Portugal\", king), Has_family_ties(king, \"Henry VIII\").\n.output Answer\n\n\n"]}
{"id": 419, "answer": true, "completion": ".decl Is_male(Person:symbol)\nIs_male(\"John\").\nIs_male(\"Paul\").\nIs_male(\"George\").\nIs_male(\"Ringo\").\n.decl Is_female(Person:symbol)\nIs_female(\"Mary\").\nIs_female(\"Yoko\").\n.decl Is_gay(Person:symbol)\nIs_gay(\"John\").\nIs_gay(\"Paul\").\n.decl Is_couple(Person1:symbol, Person2:symbol)\nIs_couple(\"John\", \"Paul\").\n.decl Answer()\nAnswer() :- Is_gay(person1), Is_gay(person2), Is_couple(person1, person2), Is_male(person1), Is_male(person2).\n.output Answer\n\n", "completions": [".decl Is_male(Person:symbol)\nIs_male(\"John\").\nIs_male(\"Paul\").\nIs_male(\"George\").\nIs_male(\"Ringo\").\n.decl Is_female(Person:symbol)\nIs_female(\"Mary\").\nIs_female(\"Yoko\").\n.decl Is_gay(Person:symbol)\nIs_gay(\"John\").\nIs_gay(\"Paul\").\n.decl Is_couple(Person1:symbol, Person2:symbol)\nIs_couple(\"John\", \"Paul\").\n.decl Answer()\nAnswer() :- Is_gay(person1), Is_gay(person2), Is_couple(person1, person2), Is_male(person1), Is_male(person2).\n.output Answer\n\n"]}
{"id": 420, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Andre the Giant\", 2.26).\n.decl Answer()\nAnswer() :- Has_height(\"Andre the Giant\", height1), Has_height(\"Yeti\", height2), height1 > height2.\n.output Answer\n\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Andre the Giant\", 2.26).\n.decl Answer()\nAnswer() :- Has_height(\"Andre the Giant\", height1), Has_height(\"Yeti\", height2), height1 > height2.\n.output Answer\n\n\n"]}
{"id": 421, "answer": true, "completion": ".decl Is_known_for(Person:symbol, Genre:symbol)\nIs_known_for(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Is_obscure_in(Person:symbol, Genre:symbol)\nIs_obscure_in(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Answer()\nAnswer() :- Is_known_for(\"Edgar Allan Poe\", genre), Is_obscure_in(\"Edgar Allan Poe\", genre).\n.output Answer\n\n", "completions": [".decl Is_known_for(Person:symbol, Genre:symbol)\nIs_known_for(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Is_obscure_in(Person:symbol, Genre:symbol)\nIs_obscure_in(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Answer()\nAnswer() :- Is_known_for(\"Edgar Allan Poe\", genre), Is_obscure_in(\"Edgar Allan Poe\", genre).\n.output Answer\n\n"]}
{"id": 422, "answer": true, "completion": ".decl Served_in_white_house(Person:symbol, Time:symbol)\nServed_in_white_house(\"father of social security system\", \"1907\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Panic of 1907\", \"1907\").\n.decl Answer()\nAnswer() :- Served_in_white_house(\"father of social security system\", time), Happens_in_time(\"Panic of 1907\", time).\n.output Answer\n\n", "completions": [".decl Served_in_white_house(Person:symbol, Time:symbol)\nServed_in_white_house(\"father of social security system\", \"1907\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Panic of 1907\", \"1907\").\n.decl Answer()\nAnswer() :- Served_in_white_house(\"father of social security system\", time), Happens_in_time(\"Panic of 1907\", time).\n.output Answer\n\n"]}
{"id": 423, "answer": false, "completion": ".decl Named_after(Object:symbol, Event:symbol)\nNamed_after(\"USS Iwo Jima\", \"Battle of Iwo Jima\").\n.decl Recovered(Ship:symbol, Object:symbol)\nRecovered(\"USS Iwo Jima\", \"Apollo 13\").\n.decl Answer()\nAnswer() :- Recovered(ship, \"Apollo 13\"), Named_after(ship, event), event = \"World War II\".\n.output Answer\n\n\n", "completions": [".decl Named_after(Object:symbol, Event:symbol)\nNamed_after(\"USS Iwo Jima\", \"Battle of Iwo Jima\").\n.decl Recovered(Ship:symbol, Object:symbol)\nRecovered(\"USS Iwo Jima\", \"Apollo 13\").\n.decl Answer()\nAnswer() :- Recovered(ship, \"Apollo 13\"), Named_after(ship, event), event = \"World War II\".\n.output Answer\n\n\n"]}
{"id": 424, "answer": true, "completion": ".decl Has_n_fused_vertebrae(Animal:symbol, N_fused_vertebrae:float)\nHas_n_fused_vertebrae(\"human sacrums\", 5).\nHas_n_fused_vertebrae(\"Alaskan Malamute\", 4).\n.decl Answer()\nAnswer() :- Has_n_fused_vertebrae(\"human sacrums\", n_fused_vertebrae1), Has_n_fused_vertebrae(\"Alaskan Malamute\", n_fused_vertebrae2), n_fused_vertebrae1 > n_fused_vertebrae2.\n.output Answer\n\n", "completions": [".decl Has_n_fused_vertebrae(Animal:symbol, N_fused_vertebrae:float)\nHas_n_fused_vertebrae(\"human sacrums\", 5).\nHas_n_fused_vertebrae(\"Alaskan Malamute\", 4).\n.decl Answer()\nAnswer() :- Has_n_fused_vertebrae(\"human sacrums\", n_fused_vertebrae1), Has_n_fused_vertebrae(\"Alaskan Malamute\", n_fused_vertebrae2), n_fused_vertebrae1 > n_fused_vertebrae2.\n.output Answer\n\n"]}
{"id": 425, "answer": true, "completion": ".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Josh Blue\", \"cerebral palsy\").\n.decl Participates_in(Person:symbol, Event:symbol)\nParticipates_in(\"Josh Blue\", \"Paralympics Games\").\n.decl Answer()\nAnswer() :- Has_disability(\"Josh Blue\", \"cerebral palsy\"), Participates_in(\"Josh Blue\", \"Paralympics Games\").\n.output Answer\n\n", "completions": [".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Josh Blue\", \"cerebral palsy\").\n.decl Participates_in(Person:symbol, Event:symbol)\nParticipates_in(\"Josh Blue\", \"Paralympics Games\").\n.decl Answer()\nAnswer() :- Has_disability(\"Josh Blue\", \"cerebral palsy\"), Participates_in(\"Josh Blue\", \"Paralympics Games\").\n.output Answer\n\n"]}
{"id": 426, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Evander Holyfield\", 58).\n.decl Has_record(Record:symbol, Age:float)\nHas_record(\"oldest boxer\", 47).\n.decl Answer()\nAnswer() :- Has_age(\"Evander Holyfield\", age), Has_record(\"oldest boxer\", record), age > record.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Evander Holyfield\", 58).\n.decl Has_record(Record:symbol, Age:float)\nHas_record(\"oldest boxer\", 47).\n.decl Answer()\nAnswer() :- Has_age(\"Evander Holyfield\", age), Has_record(\"oldest boxer\", record), age > record.\n.output Answer\n\n"]}
{"id": 427, "answer": true, "completion": ".decl Has_temper(Person:symbol, Temper:symbol)\nHas_temper(\"Glenn Beck\", \"mild\").\n.decl Answer()\nAnswer() :- Has_temper(\"Glenn Beck\", \"mild\").\n.output Answer\n\n", "completions": [".decl Has_temper(Person:symbol, Temper:symbol)\nHas_temper(\"Glenn Beck\", \"mild\").\n.decl Answer()\nAnswer() :- Has_temper(\"Glenn Beck\", \"mild\").\n.output Answer\n\n"]}
{"id": 428, "answer": true, "completion": ".decl Connects(Bone_A:symbol, Bone_B:symbol)\nConnects(\"sternum\", \"clavicle\").\nConnects(\"sternum\", \"rib\").\nConnects(\"sternum\", \"sternum\").\nConnects(\"clavicle\", \"clavicle\").\nConnects(\"clavicle\", \"rib\").\nConnects(\"clavicle\", \"sternum\").\nConnects(\"rib\", \"clavicle\").\nConnects(\"rib\", \"rib\").\nConnects(\"rib\", \"sternum\").\n.decl Mentioned_in(Bone:symbol, Poem:symbol)\nMentioned_in(\"clavicle\", \"Dem Bones\").\nMentioned_in(\"rib\", \"Dem Bones\").\nMentioned_in(\"sternum\", \"Dem Bones\").\n.decl Answer()\nAnswer() :- Connects(\"sternum\", bone), Mentioned_in(bone, \"Dem Bones\").\n.output Answer\n\n", "completions": [".decl Connects(Bone_A:symbol, Bone_B:symbol)\nConnects(\"sternum\", \"clavicle\").\nConnects(\"sternum\", \"rib\").\nConnects(\"sternum\", \"sternum\").\nConnects(\"clavicle\", \"clavicle\").\nConnects(\"clavicle\", \"rib\").\nConnects(\"clavicle\", \"sternum\").\nConnects(\"rib\", \"clavicle\").\nConnects(\"rib\", \"rib\").\nConnects(\"rib\", \"sternum\").\n.decl Mentioned_in(Bone:symbol, Poem:symbol)\nMentioned_in(\"clavicle\", \"Dem Bones\").\nMentioned_in(\"rib\", \"Dem Bones\").\nMentioned_in(\"sternum\", \"Dem Bones\").\n.decl Answer()\nAnswer() :- Connects(\"sternum\", bone), Mentioned_in(bone, \"Dem Bones\").\n.output Answer\n\n"]}
{"id": 429, "answer": true, "completion": ".decl Transmits(Animal_A:symbol, Disease:symbol)\nTransmits(\"dog\", \"rabies\").\n.decl Is_a(Animal_A:symbol, Animal_B:symbol)\nIs_a(\"Snoopy\", \"dog\").\n.decl Answer()\nAnswer() :- Transmits(animal, \"rabies\"), Is_a(\"Snoopy\", animal).\n.output Answer\n\n", "completions": [".decl Transmits(Animal_A:symbol, Disease:symbol)\nTransmits(\"dog\", \"rabies\").\n.decl Is_a(Animal_A:symbol, Animal_B:symbol)\nIs_a(\"Snoopy\", \"dog\").\n.decl Answer()\nAnswer() :- Transmits(animal, \"rabies\"), Is_a(\"Snoopy\", animal).\n.output Answer\n\n"]}
{"id": 430, "answer": false, "completion": ".decl Works_in(Person:symbol, Industry:symbol)\nWorks_in(\"Buddy The Elf\", \"publishing\").\n.decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Buddy The Elf\", \"Jovie\").\n.decl Answer()\nAnswer() :- Works_in(person, \"publishing\"), Knows(\"Buddy The Elf\", person).\n.output Answer\n\n", "completions": [".decl Works_in(Person:symbol, Industry:symbol)\nWorks_in(\"Buddy The Elf\", \"publishing\").\n.decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Buddy The Elf\", \"Jovie\").\n.decl Answer()\nAnswer() :- Works_in(person, \"publishing\"), Knows(\"Buddy The Elf\", person).\n.output Answer\n\n"]}
{"id": 431, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"apple\", \"red\").\n.decl Associated_with(Person:symbol, Object:symbol)\nAssociated_with(\"Issac Newton\", \"apple\").\n.decl Answer()\nAnswer() :- Associated_with(\"Issac Newton\", object), Has_color(object, \"red\").\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"apple\", \"red\").\n.decl Associated_with(Person:symbol, Object:symbol)\nAssociated_with(\"Issac Newton\", \"apple\").\n.decl Answer()\nAnswer() :- Associated_with(\"Issac Newton\", object), Has_color(object, \"red\").\n.output Answer\n\n"]}
{"id": 432, "answer": false, "completion": ".decl Has_potassium(Food:symbol, Potassium:float)\nHas_potassium(\"zucchini\", 0.2).\n.decl Has_daily_recommendation(Nutrient:symbol, Daily_recommendation:float)\nHas_daily_recommendation(\"potassium\", 3.5).\n.decl Answer()\nAnswer() :- Has_potassium(\"zucchini\", potassium1), Has_daily_recommendation(\"potassium\", daily_recommendation), potassium1 * 7 >= daily_recommendation.\n.output Answer\n\n", "completions": [".decl Has_potassium(Food:symbol, Potassium:float)\nHas_potassium(\"zucchini\", 0.2).\n.decl Has_daily_recommendation(Nutrient:symbol, Daily_recommendation:float)\nHas_daily_recommendation(\"potassium\", 3.5).\n.decl Answer()\nAnswer() :- Has_potassium(\"zucchini\", potassium1), Has_daily_recommendation(\"potassium\", daily_recommendation), potassium1 * 7 >= daily_recommendation.\n.output Answer\n\n"]}
{"id": 433, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Oprah Winfrey\", 2.7).\n.decl Costs(Object:symbol, Cost:float)\nCosts(\"Bugatti luxury car\", 2.7).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Oprah Winfrey\", net_worth), Costs(\"Bugatti luxury car\", cost), net_worth >= cost.\n.output Answer\n\n\n", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Oprah Winfrey\", 2.7).\n.decl Costs(Object:symbol, Cost:float)\nCosts(\"Bugatti luxury car\", 2.7).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Oprah Winfrey\", net_worth), Costs(\"Bugatti luxury car\", cost), net_worth >= cost.\n.output Answer\n\n\n"]}
{"id": 434, "answer": true, "completion": ".decl Has_party(Person:symbol, Party:symbol)\nHas_party(\"Ronald Reagan\", \"Grand Old Party\").\n.decl Won_election(Person:symbol, Year:float)\nWon_election(\"Ronald Reagan\", 1980).\n.decl Answer()\nAnswer() :- Won_election(person, 1980), Has_party(person, \"Grand Old Party\").\n.output Answer\n\n", "completions": [".decl Has_party(Person:symbol, Party:symbol)\nHas_party(\"Ronald Reagan\", \"Grand Old Party\").\n.decl Won_election(Person:symbol, Year:float)\nWon_election(\"Ronald Reagan\", 1980).\n.decl Answer()\nAnswer() :- Won_election(person, 1980), Has_party(person, \"Grand Old Party\").\n.output Answer\n\n"]}
{"id": 435, "answer": true, "completion": ".decl Last_name(Person:symbol, Last_name:symbol)\nLast_name(\"Henry Ford\", \"Ford\").\n.decl Has_n_letters(Word:symbol, N_letters:float)\nHas_n_letters(\"Ford\", 4).\n.decl Answer()\nAnswer() :- Last_name(person, \"Ford\"), Has_n_letters(\"Ford\", n_letters), n_letters >= 4.\n.output Answer\n\n", "completions": [".decl Last_name(Person:symbol, Last_name:symbol)\nLast_name(\"Henry Ford\", \"Ford\").\n.decl Has_n_letters(Word:symbol, N_letters:float)\nHas_n_letters(\"Ford\", 4).\n.decl Answer()\nAnswer() :- Last_name(person, \"Ford\"), Has_n_letters(\"Ford\", n_letters), n_letters >= 4.\n.output Answer\n\n"]}
{"id": 436, "answer": true, "completion": ".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"Liberty Bell\", \"Philadelphia\").\n.decl Answer()\nAnswer() :- Has_location(\"Liberty Bell\", \"Philadelphia\").\n.output Answer\n\n", "completions": [".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"Liberty Bell\", \"Philadelphia\").\n.decl Answer()\nAnswer() :- Has_location(\"Liberty Bell\", \"Philadelphia\").\n.output Answer\n\n"]}
{"id": 437, "answer": true, "completion": ".decl Lasts_n_minutes(Event:symbol, N_minutes:float)\nLasts_n_minutes(\"Monday Night Football\", 180).\nLasts_n_minutes(\"WWE Raw\", 60).\n.decl Answer()\nAnswer() :- Lasts_n_minutes(\"Monday Night Football\", n_minutes1), Lasts_n_minutes(\"WWE Raw\", n_minutes2), n_minutes1 > n_minutes2.\n.output Answer\n\n", "completions": [".decl Lasts_n_minutes(Event:symbol, N_minutes:float)\nLasts_n_minutes(\"Monday Night Football\", 180).\nLasts_n_minutes(\"WWE Raw\", 60).\n.decl Answer()\nAnswer() :- Lasts_n_minutes(\"Monday Night Football\", n_minutes1), Lasts_n_minutes(\"WWE Raw\", n_minutes2), n_minutes1 > n_minutes2.\n.output Answer\n\n"]}
{"id": 438, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"first missionaries\", \"17th century\").\nHappens_in_time(\"attend mass on Sundays\", \"17th century\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"first missionaries\", time), Happens_in_time(\"attend mass on Sundays\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"first missionaries\", \"17th century\").\nHappens_in_time(\"attend mass on Sundays\", \"17th century\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"first missionaries\", time), Happens_in_time(\"attend mass on Sundays\", time).\n.output Answer\n\n"]}
{"id": 439, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Snoop Dogg\", age).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Tickle Me Elmo\", 1996).\n.decl Answer()\nAnswer() :- Has_age(\"Snoop Dogg\", age), Happens_in_year(\"Tickle Me Elmo\", year), age >= 18, year <= 1996.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Snoop Dogg\", age).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Tickle Me Elmo\", 1996).\n.decl Answer()\nAnswer() :- Has_age(\"Snoop Dogg\", age), Happens_in_year(\"Tickle Me Elmo\", year), age >= 18, year <= 1996.\n.output Answer\n\n"]}
{"id": 440, "answer": false, "completion": ".decl Is_considered_okay(Word:symbol, People:symbol)\nIs_considered_okay(\"Gypsy\", \"Romani people\").\n.decl Answer()\nAnswer() :- Is_considered_okay(\"Gypsy\", \"non-Romani people\").\n.output Answer\n\n", "completions": [".decl Is_considered_okay(Word:symbol, People:symbol)\nIs_considered_okay(\"Gypsy\", \"Romani people\").\n.decl Answer()\nAnswer() :- Is_considered_okay(\"Gypsy\", \"non-Romani people\").\n.output Answer\n\n"]}
{"id": 441, "answer": false, "completion": ".decl Has_gun(Person:symbol, Gun:symbol)\nHas_gun(\"Robert Downey Jr.\", \"Colt M1911A1\").\nHas_gun(\"Barry Burton\", \"Beretta 92FS\").\n.decl Has_caliber(Gun:symbol, Caliber:float)\nHas_caliber(\"Colt M1911A1\", 0.45).\nHas_caliber(\"Beretta 92FS\", 0.9).\n.decl Answer()\nAnswer() :- Has_gun(\"Robert Downey Jr.\", gun1), Has_gun(\"Barry Burton\", gun2), Has_caliber(gun1, caliber1), Has_caliber(gun2, caliber2), caliber1 = caliber2.\n.output Answer\n\n", "completions": [".decl Has_gun(Person:symbol, Gun:symbol)\nHas_gun(\"Robert Downey Jr.\", \"Colt M1911A1\").\nHas_gun(\"Barry Burton\", \"Beretta 92FS\").\n.decl Has_caliber(Gun:symbol, Caliber:float)\nHas_caliber(\"Colt M1911A1\", 0.45).\nHas_caliber(\"Beretta 92FS\", 0.9).\n.decl Answer()\nAnswer() :- Has_gun(\"Robert Downey Jr.\", gun1), Has_gun(\"Barry Burton\", gun2), Has_caliber(gun1, caliber1), Has_caliber(gun2, caliber2), caliber1 = caliber2.\n.output Answer\n\n"]}
{"id": 442, "answer": false, "completion": ".decl Has_percentage(Candidate:symbol, Percentage:float)\nHas_percentage(\"Woodrow Wilson\", 41.8).\nHas_percentage(\"Theodore Roosevelt\", 27.4).\nHas_percentage(\"William Howard Taft\", 23.2).\nHas_percentage(\"Eugene V. Debs\", 6.0).\n.decl Answer()\nAnswer() :- Has_percentage(candidate, percentage), percentage > 50.\n.output Answer\n\n", "completions": [".decl Has_percentage(Candidate:symbol, Percentage:float)\nHas_percentage(\"Woodrow Wilson\", 41.8).\nHas_percentage(\"Theodore Roosevelt\", 27.4).\nHas_percentage(\"William Howard Taft\", 23.2).\nHas_percentage(\"Eugene V. Debs\", 6.0).\n.decl Answer()\nAnswer() :- Has_percentage(candidate, percentage), percentage > 50.\n.output Answer\n\n"]}
{"id": 443, "answer": false, "completion": ".decl Is_ingredient_of(Ingredient:symbol, Dish:symbol)\nIs_ingredient_of(\"vegetables\", \"salad\").\nIs_ingredient_of(\"salad\", \"dessert\").\n.decl Answer()\nAnswer() :- Is_ingredient_of(\"vegetables\", \"dessert\").\n.output Answer\n\n", "completions": [".decl Is_ingredient_of(Ingredient:symbol, Dish:symbol)\nIs_ingredient_of(\"vegetables\", \"salad\").\nIs_ingredient_of(\"salad\", \"dessert\").\n.decl Answer()\nAnswer() :- Is_ingredient_of(\"vegetables\", \"dessert\").\n.output Answer\n\n"]}
{"id": 444, "answer": true, "completion": ".decl Has_mood(Person:symbol, Mood:symbol)\nHas_mood(\"depressed people\", \"depressed\").\n.decl Travels_to(Person:symbol, Place:symbol)\nTravels_to(\"depressed people\", \"Golden Gate Bridge\").\n.decl Answer()\nAnswer() :- Has_mood(\"depressed people\", \"depressed\"), Travels_to(\"depressed people\", \"Golden Gate Bridge\").\n.output Answer\n\n", "completions": [".decl Has_mood(Person:symbol, Mood:symbol)\nHas_mood(\"depressed people\", \"depressed\").\n.decl Travels_to(Person:symbol, Place:symbol)\nTravels_to(\"depressed people\", \"Golden Gate Bridge\").\n.decl Answer()\nAnswer() :- Has_mood(\"depressed people\", \"depressed\"), Travels_to(\"depressed people\", \"Golden Gate Bridge\").\n.output Answer\n\n"]}
{"id": 445, "answer": true, "completion": ".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"D\", \"triangle\").\nHas_shape(\"ancient doors\", \"triangle\").\n.decl Answer()\nAnswer() :- Has_shape(\"D\", shape1), Has_shape(\"ancient doors\", shape2), shape1 = shape2.\n.output Answer\n\n", "completions": [".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"D\", \"triangle\").\nHas_shape(\"ancient doors\", \"triangle\").\n.decl Answer()\nAnswer() :- Has_shape(\"D\", shape1), Has_shape(\"ancient doors\", shape2), shape1 = shape2.\n.output Answer\n\n"]}
{"id": 446, "answer": false, "completion": ".decl Lives_n_years(Person:symbol, N_years:float)\nLives_n_years(\"Methuselah\", 969).\nLives_n_years(\"Sarah\", 127).\n.decl Answer()\nAnswer() :- Lives_n_years(\"Methuselah\", n_years1), Lives_n_years(\"Sarah\", n_years2), n_years1 >= 800 * n_years2.\n.output Answer\n\n\n", "completions": [".decl Lives_n_years(Person:symbol, N_years:float)\nLives_n_years(\"Methuselah\", 969).\nLives_n_years(\"Sarah\", 127).\n.decl Answer()\nAnswer() :- Lives_n_years(\"Methuselah\", n_years1), Lives_n_years(\"Sarah\", n_years2), n_years1 >= 800 * n_years2.\n.output Answer\n\n\n"]}
{"id": 447, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Apollo 15 crew\", 3).\n.decl Supports_n_members(Object:symbol, N_members:float)\nSupports_n_members(\"triples tandem bike\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Apollo 15 crew\", n_members1), Supports_n_members(\"triples tandem bike\", n_members2), n_members1 <= n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Apollo 15 crew\", 3).\n.decl Supports_n_members(Object:symbol, N_members:float)\nSupports_n_members(\"triples tandem bike\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Apollo 15 crew\", n_members1), Supports_n_members(\"triples tandem bike\", n_members2), n_members1 <= n_members2.\n.output Answer\n\n"]}
{"id": 448, "answer": true, "completion": ".decl Responds_to(Animal:symbol, Stimulus:symbol)\nResponds_to(\"dog\", \"bell\").\nResponds_to(\"Grey seal\", \"bell\").\n.decl Answer()\nAnswer() :- Responds_to(\"dog\", stimulus), Responds_to(\"Grey seal\", stimulus).\n.output Answer\n\n", "completions": [".decl Responds_to(Animal:symbol, Stimulus:symbol)\nResponds_to(\"dog\", \"bell\").\nResponds_to(\"Grey seal\", \"bell\").\n.decl Answer()\nAnswer() :- Responds_to(\"dog\", stimulus), Responds_to(\"Grey seal\", stimulus).\n.output Answer\n\n"]}
{"id": 449, "answer": true, "completion": ".decl Is_related_to(Animal_A:symbol, Animal_B:symbol)\nIs_related_to(\"sable\", \"wolverine\").\n.decl Answer()\nAnswer() :- Is_related_to(\"sable\", \"wolverine\").\n.output Answer\n\n", "completions": [".decl Is_related_to(Animal_A:symbol, Animal_B:symbol)\nIs_related_to(\"sable\", \"wolverine\").\n.decl Answer()\nAnswer() :- Is_related_to(\"sable\", \"wolverine\").\n.output Answer\n\n"]}
{"id": 450, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"lobster\", \"ocean\").\n.decl Is_a(Place:symbol, Type:symbol)\nIs_a(\"ocean\", \"wet\").\nIs_a(\"desert\", \"dry\").\n.decl Answer()\nAnswer() :- Lives_in(\"lobster\", place), Is_a(place, type), type != \"dry\".\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"lobster\", \"ocean\").\n.decl Is_a(Place:symbol, Type:symbol)\nIs_a(\"ocean\", \"wet\").\nIs_a(\"desert\", \"dry\").\n.decl Answer()\nAnswer() :- Lives_in(\"lobster\", place), Is_a(place, type), type != \"dry\".\n.output Answer\n\n"]}
{"id": 451, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Nicole Kidman\", 1.8).\nHas_height(\"Psylocke\", 1.7).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Nicole Kidman\", 60).\nHas_weight(\"Psylocke\", 55).\n.decl Answer()\nAnswer() :- Has_height(\"Nicole Kidman\", height1), Has_height(\"Psylocke\", height2), height1 <= height2.\nAnswer() :- Has_weight(\"Nicole Kidman\", weight1), Has_weight(\"Psylocke\", weight2), weight1 <= weight2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Nicole Kidman\", 1.8).\nHas_height(\"Psylocke\", 1.7).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Nicole Kidman\", 60).\nHas_weight(\"Psylocke\", 55).\n.decl Answer()\nAnswer() :- Has_height(\"Nicole Kidman\", height1), Has_height(\"Psylocke\", height2), height1 <= height2.\nAnswer() :- Has_weight(\"Nicole Kidman\", weight1), Has_weight(\"Psylocke\", weight2), weight1 <= weight2.\n.output Answer\n\n"]}
{"id": 452, "answer": true, "completion": ".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"bodybuilder\", 10).\n.decl Lasts_n_weeks(Event:symbol, N_weeks:float)\nLasts_n_weeks(\"wearing a cast\", 4).\n.decl Answer()\nAnswer() :- Has_strength(\"bodybuilder\", strength), Lasts_n_weeks(\"wearing a cast\", n_weeks), strength > n_weeks.\n.output Answer\n\n\n", "completions": [".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"bodybuilder\", 10).\n.decl Lasts_n_weeks(Event:symbol, N_weeks:float)\nLasts_n_weeks(\"wearing a cast\", 4).\n.decl Answer()\nAnswer() :- Has_strength(\"bodybuilder\", strength), Lasts_n_weeks(\"wearing a cast\", n_weeks), strength > n_weeks.\n.output Answer\n\n\n"]}
{"id": 453, "answer": true, "completion": ".decl Drives(Person:symbol, Vehicle:symbol)\nDrives(\"George Washington\", \"Lexus\").\n.decl Answer()\nAnswer() :- Drives(\"George Washington\", \"Lexus\").\n.output Answer\n\n", "completions": [".decl Drives(Person:symbol, Vehicle:symbol)\nDrives(\"George Washington\", \"Lexus\").\n.decl Answer()\nAnswer() :- Drives(\"George Washington\", \"Lexus\").\n.output Answer\n\n"]}
{"id": 454, "answer": true, "completion": ".decl Has_feature(Software:symbol, Feature:symbol)\nHas_feature(\"Adobe Suite\", \"video game engine coding\").\n.decl Answer()\nAnswer() :- Has_feature(\"Adobe Suite\", \"video game engine coding\").\n.output Answer\n\n", "completions": [".decl Has_feature(Software:symbol, Feature:symbol)\nHas_feature(\"Adobe Suite\", \"video game engine coding\").\n.decl Answer()\nAnswer() :- Has_feature(\"Adobe Suite\", \"video game engine coding\").\n.output Answer\n\n"]}
{"id": 455, "answer": false, "completion": ".decl Has_composition(Object:symbol, Composition:symbol)\nHas_composition(\"1943-S penny\", \"copper\").\nHas_composition(\"silverware\", \"silver\").\n.decl Answer()\nAnswer() :- Has_composition(\"1943-S penny\", \"silver\").\n.output Answer\n\n", "completions": [".decl Has_composition(Object:symbol, Composition:symbol)\nHas_composition(\"1943-S penny\", \"copper\").\nHas_composition(\"silverware\", \"silver\").\n.decl Answer()\nAnswer() :- Has_composition(\"1943-S penny\", \"silver\").\n.output Answer\n\n"]}
{"id": 456, "answer": true, "completion": ".decl Has_staff_member(Institution:symbol, Staff_member:symbol)\nHas_staff_member(\"Durmstrang\", \"Igor Karkaroff\").\n.decl Has_associate(Person:symbol, Associate:symbol)\nHas_associate(\"Lord Voldemort\", \"Igor Karkaroff\").\n.decl Answer()\nAnswer() :- Has_staff_member(institution, \"Igor Karkaroff\"), Has_associate(\"Lord Voldemort\", associate), associate = \"Igor Karkaroff\".\n.output Answer\n\n", "completions": [".decl Has_staff_member(Institution:symbol, Staff_member:symbol)\nHas_staff_member(\"Durmstrang\", \"Igor Karkaroff\").\n.decl Has_associate(Person:symbol, Associate:symbol)\nHas_associate(\"Lord Voldemort\", \"Igor Karkaroff\").\n.decl Answer()\nAnswer() :- Has_staff_member(institution, \"Igor Karkaroff\"), Has_associate(\"Lord Voldemort\", associate), associate = \"Igor Karkaroff\".\n.output Answer\n\n"]}
{"id": 457, "answer": true, "completion": ".decl Needs(Person:symbol, Degree:symbol)\nNeeds(\"bartender\", \"college degree\").\n.decl Answer()\nAnswer() :- Needs(\"bartender\", \"college degree\").\n.output Answer\n\n", "completions": [".decl Needs(Person:symbol, Degree:symbol)\nNeeds(\"bartender\", \"college degree\").\n.decl Answer()\nAnswer() :- Needs(\"bartender\", \"college degree\").\n.output Answer\n\n"]}
{"id": 458, "answer": true, "completion": ".decl Has_ingredient(Recipe:symbol, Ingredient:symbol)\nHas_ingredient(\"holy trinity\", \"celery\").\nHas_ingredient(\"holy trinity\", \"onion\").\nHas_ingredient(\"holy trinity\", \"bell pepper\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"holy trinity\", ingredient1), Has_ingredient(\"holy trinity\", ingredient2), Has_ingredient(\"holy trinity\", ingredient3), ingredient1 != \"celery\", ingredient2 != \"celery\", ingredient3 != \"celery\".\n.output Answer\n\n", "completions": [".decl Has_ingredient(Recipe:symbol, Ingredient:symbol)\nHas_ingredient(\"holy trinity\", \"celery\").\nHas_ingredient(\"holy trinity\", \"onion\").\nHas_ingredient(\"holy trinity\", \"bell pepper\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"holy trinity\", ingredient1), Has_ingredient(\"holy trinity\", ingredient2), Has_ingredient(\"holy trinity\", ingredient3), ingredient1 != \"celery\", ingredient2 != \"celery\", ingredient3 != \"celery\".\n.output Answer\n\n"]}
{"id": 459, "answer": false, "completion": ".decl Has_n_cells(Organism:symbol, Cell_type:symbol, N_cells:float)\nHas_n_cells(\"human\", \"white blood cell\", 50000).\nHas_n_cells(\"human\", \"red blood cell\", 5000000).\n.decl Answer()\nAnswer() :- Has_n_cells(\"human\", \"white blood cell\", n_cells1), Has_n_cells(\"human\", \"red blood cell\", n_cells2), n_cells1 > n_cells2.\n.output Answer\n\n", "completions": [".decl Has_n_cells(Organism:symbol, Cell_type:symbol, N_cells:float)\nHas_n_cells(\"human\", \"white blood cell\", 50000).\nHas_n_cells(\"human\", \"red blood cell\", 5000000).\n.decl Answer()\nAnswer() :- Has_n_cells(\"human\", \"white blood cell\", n_cells1), Has_n_cells(\"human\", \"red blood cell\", n_cells2), n_cells1 > n_cells2.\n.output Answer\n\n"]}
{"id": 460, "answer": false, "completion": ".decl Is_in_state(City:symbol, State:symbol)\nIs_in_state(\"New York\", \"New York\").\nIs_in_state(\"Miami\", \"Florida\").\n.decl Is_adjacent_to(State:symbol, State:symbol)\nIs_adjacent_to(\"New York\", \"New Jersey\").\nIs_adjacent_to(\"New Jersey\", \"New York\").\nIs_adjacent_to(\"New Jersey\", \"Pennsylvania\").\nIs_adjacent_to(\"Pennsylvania\", \"New Jersey\").\nIs_adjacent_to(\"Pennsylvania\", \"Maryland\").\nIs_adjacent_to(\"Maryland\", \"Pennsylvania\").\nIs_adjacent_to(\"Maryland\", \"Virginia\").\nIs_adjacent_to(\"Virginia\", \"Maryland\").\nIs_adjacent_to(\"Virginia\", \"North Carolina\").\nIs_adjacent_to(\"North Carolina\", \"Virginia\").\nIs_adjacent_to(\"North Carolina\", \"South Carolina\").\nIs_adjacent_to(\"South Carolina\", \"North Carolina\").\nIs_adjacent_to(\"South Carolina\", \"Georgia\").\nIs_adjacent_to(\"Georgia\", \"South Carolina\").\nIs_adjacent_to(\"Georgia\", \"Florida\").\nIs_adjacent_to(\"Florida\", \"Georgia\").\n.decl Answer()\nAnswer() :- Is_in_state(\"New York\", state1), Is_in_state(\"Miami\", state2), Is_adjacent_to(state1, state2).\n.output Answer\n\n", "completions": [".decl Is_in_state(City:symbol, State:symbol)\nIs_in_state(\"New York\", \"New York\").\nIs_in_state(\"Miami\", \"Florida\").\n.decl Is_adjacent_to(State:symbol, State:symbol)\nIs_adjacent_to(\"New York\", \"New Jersey\").\nIs_adjacent_to(\"New Jersey\", \"New York\").\nIs_adjacent_to(\"New Jersey\", \"Pennsylvania\").\nIs_adjacent_to(\"Pennsylvania\", \"New Jersey\").\nIs_adjacent_to(\"Pennsylvania\", \"Maryland\").\nIs_adjacent_to(\"Maryland\", \"Pennsylvania\").\nIs_adjacent_to(\"Maryland\", \"Virginia\").\nIs_adjacent_to(\"Virginia\", \"Maryland\").\nIs_adjacent_to(\"Virginia\", \"North Carolina\").\nIs_adjacent_to(\"North Carolina\", \"Virginia\").\nIs_adjacent_to(\"North Carolina\", \"South Carolina\").\nIs_adjacent_to(\"South Carolina\", \"North Carolina\").\nIs_adjacent_to(\"South Carolina\", \"Georgia\").\nIs_adjacent_to(\"Georgia\", \"South Carolina\").\nIs_adjacent_to(\"Georgia\", \"Florida\").\nIs_adjacent_to(\"Florida\", \"Georgia\").\n.decl Answer()\nAnswer() :- Is_in_state(\"New York\", state1), Is_in_state(\"Miami\", state2), Is_adjacent_to(state1, state2).\n.output Answer\n\n"]}
{"id": 461, "answer": true, "completion": ".decl Has_power(Wizard:symbol, Power:float)\nHas_power(\"Gandalf\", 10).\nHas_power(\"Rincewind\", 1).\n.decl Answer()\nAnswer() :- Has_power(\"Gandalf\", power1), Has_power(\"Rincewind\", power2), power1 > power2.\n.output Answer\n\n", "completions": [".decl Has_power(Wizard:symbol, Power:float)\nHas_power(\"Gandalf\", 10).\nHas_power(\"Rincewind\", 1).\n.decl Answer()\nAnswer() :- Has_power(\"Gandalf\", power1), Has_power(\"Rincewind\", power2), power1 > power2.\n.output Answer\n\n"]}
{"id": 462, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Tiny House\", 8).\nHas_height(\"Osama bin Laden\", 6.5).\n.decl Answer()\nAnswer() :- Has_height(\"Tiny House\", height1), Has_height(\"Osama bin Laden\", height2), height1 > height2.\n.output Answer\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Tiny House\", 8).\nHas_height(\"Osama bin Laden\", 6.5).\n.decl Answer()\nAnswer() :- Has_height(\"Tiny House\", height1), Has_height(\"Osama bin Laden\", height2), height1 > height2.\n.output Answer\n\n"]}
{"id": 463, "answer": false, "completion": ".decl Wins(Country:symbol, Event:symbol, Year:float)\nWins(\"England\", \"Olympic gold medal\", 1908).\nWins(\"England\", \"Olympic gold medal\", 1948).\n.decl Answer()\nAnswer() :- Wins(\"England\", \"Olympic gold medal\", 1800).\n.output Answer\n\n", "completions": [".decl Wins(Country:symbol, Event:symbol, Year:float)\nWins(\"England\", \"Olympic gold medal\", 1908).\nWins(\"England\", \"Olympic gold medal\", 1948).\n.decl Answer()\nAnswer() :- Wins(\"England\", \"Olympic gold medal\", 1800).\n.output Answer\n\n"]}
{"id": 464, "answer": true, "completion": ".decl Is_urban_legend(Story:symbol)\nIs_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill story\").\n.decl Answer()\nAnswer() :- Is_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill story\").\n.output Answer\n\n", "completions": [".decl Is_urban_legend(Story:symbol)\nIs_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill story\").\n.decl Answer()\nAnswer() :- Is_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill story\").\n.output Answer\n\n"]}
{"id": 465, "answer": true, "completion": ".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Jimmy Vee\", \"blindness\").\n.decl Eligible_for(Disability:symbol, Event:symbol)\nEligible_for(\"blindness\", \"Paralympic Games\").\n.decl Answer()\nAnswer() :- Has_disability(\"Jimmy Vee\", disability), Eligible_for(disability, \"Paralympic Games\").\n.output Answer\n\n", "completions": [".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Jimmy Vee\", \"blindness\").\n.decl Eligible_for(Disability:symbol, Event:symbol)\nEligible_for(\"blindness\", \"Paralympic Games\").\n.decl Answer()\nAnswer() :- Has_disability(\"Jimmy Vee\", disability), Eligible_for(disability, \"Paralympic Games\").\n.output Answer\n\n"]}
{"id": 466, "answer": true, "completion": ".decl Is_alive(Person:symbol)\nIs_alive(\"Elijah Cummings\").\n.decl Is_eligible_to_vote(Person:symbol)\nIs_eligible_to_vote(\"Elijah Cummings\").\n.decl Answer()\nAnswer() :- Is_alive(\"Elijah Cummings\"), Is_eligible_to_vote(\"Elijah Cummings\").\n.output Answer\n\n", "completions": [".decl Is_alive(Person:symbol)\nIs_alive(\"Elijah Cummings\").\n.decl Is_eligible_to_vote(Person:symbol)\nIs_eligible_to_vote(\"Elijah Cummings\").\n.decl Answer()\nAnswer() :- Is_alive(\"Elijah Cummings\"), Is_eligible_to_vote(\"Elijah Cummings\").\n.output Answer\n\n"]}
{"id": 467, "answer": false, "completion": ".decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible", "completions": [".decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Is_eligible_for(Person:symbol, Award:symbol)\nIs_eligible"]}
{"id": 468, "answer": true, "completion": ".decl Is_type_of(Object:symbol, Type:symbol)\nIs_type_of(\"pottery\", \"ceramic\").\nIs_type_of(\"pottery\", \"clay\").\nIs_type_of(\"pottery\", \"stoneware\").\n.decl Is_safe_to_cook_in(Object:symbol)\nIs_safe_to_cook_in(\"ceramic\").\nIs_safe_to_cook_in(\"clay\").\nIs_safe_to_cook_in(\"stoneware\").\n.decl Answer()\nAnswer() :- Is_type_of(object, type), Is_safe_to_cook_in(type).\n.output Answer\n\n", "completions": [".decl Is_type_of(Object:symbol, Type:symbol)\nIs_type_of(\"pottery\", \"ceramic\").\nIs_type_of(\"pottery\", \"clay\").\nIs_type_of(\"pottery\", \"stoneware\").\n.decl Is_safe_to_cook_in(Object:symbol)\nIs_safe_to_cook_in(\"ceramic\").\nIs_safe_to_cook_in(\"clay\").\nIs_safe_to_cook_in(\"stoneware\").\n.decl Answer()\nAnswer() :- Is_type_of(object, type), Is_safe_to_cook_in(type).\n.output Answer\n\n"]}
{"id": 469, "answer": true, "completion": ".decl Has_origin_country(Person:symbol, Country:symbol)\nHas_origin_country(\"Pope Alexander VI\", \"Spain\").\n.decl Has_n_popes(Country:symbol, N_popes:float)\nHas_n_popes(\"Spain\", 1).\nHas_n_popes(\"Italy\", 262).\n.decl Answer()\nAnswer() :- Has_origin_country(\"Pope Alexander VI\", country), Has_n_popes(country, n_popes), Has_n_popes(country2, n_popes2), country != country2, n_popes <= n_popes2.\n.output Answer\n\n", "completions": [".decl Has_origin_country(Person:symbol, Country:symbol)\nHas_origin_country(\"Pope Alexander VI\", \"Spain\").\n.decl Has_n_popes(Country:symbol, N_popes:float)\nHas_n_popes(\"Spain\", 1).\nHas_n_popes(\"Italy\", 262).\n.decl Answer()\nAnswer() :- Has_origin_country(\"Pope Alexander VI\", country), Has_n_popes(country, n_popes), Has_n_popes(country2, n_popes2), country != country2, n_popes <= n_popes2.\n.output Answer\n\n"]}
{"id": 470, "answer": true, "completion": ".decl Is_symptom_of(Symptom:symbol, Disease:symbol)\nIs_symptom_of(\"laziness\", \"depression\").\n.decl Answer()\nAnswer() :- Is_symptom_of(\"laziness\", \"depression\").\n.output Answer\n\n", "completions": [".decl Is_symptom_of(Symptom:symbol, Disease:symbol)\nIs_symptom_of(\"laziness\", \"depression\").\n.decl Answer()\nAnswer() :- Is_symptom_of(\"laziness\", \"depression\").\n.output Answer\n\n"]}
{"id": 471, "answer": true, "completion": ".decl Has_danger_level(Animal:symbol, Danger_level:float)\nHas_danger_level(\"Oculudentavis\", 1).\nHas_danger_level(\"Allosaurus\", 2).\n.decl Answer()\nAnswer() :- Has_danger_level(\"Oculudentavis\", danger_level1), Has_danger_level(\"Allosaurus\", danger_level2), danger_level1 < danger_level2.\n.output Answer\n\n", "completions": [".decl Has_danger_level(Animal:symbol, Danger_level:float)\nHas_danger_level(\"Oculudentavis\", 1).\nHas_danger_level(\"Allosaurus\", 2).\n.decl Answer()\nAnswer() :- Has_danger_level(\"Oculudentavis\", danger_level1), Has_danger_level(\"Allosaurus\", danger_level2), danger_level1 < danger_level2.\n.output Answer\n\n"]}
{"id": 472, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Christopher Nolan\", 1.8).\nHas_height(\"Danny Devito\", 1.57).\n.decl Answer()\nAnswer() :- Has_height(\"Christopher Nolan\", height1), Has_height(\"Danny Devito\", height2), height1 < height2.\n.output Answer\n\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Christopher Nolan\", 1.8).\nHas_height(\"Danny Devito\", 1.57).\n.decl Answer()\nAnswer() :- Has_height(\"Christopher Nolan\", height1), Has_height(\"Danny Devito\", height2), height1 < height2.\n.output Answer\n\n\n"]}
{"id": 473, "answer": true, "completion": ".decl Is_currently_run(Event:symbol)\nIs_currently_run(\"Big Ben's bells\").\n.decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"Big Ben's bells\", \"Palace of Westminster\").\n.decl Answer()\nAnswer() :- Is_currently_run(\"Big Ben's bells\"), Happens_at(\"Big Ben's bells\", \"Palace of Westminster\").\n.output Answer\n\n", "completions": [".decl Is_currently_run(Event:symbol)\nIs_currently_run(\"Big Ben's bells\").\n.decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"Big Ben's bells\", \"Palace of Westminster\").\n.decl Answer()\nAnswer() :- Is_currently_run(\"Big Ben's bells\"), Happens_at(\"Big Ben's bells\", \"Palace of Westminster\").\n.output Answer\n\n"]}
{"id": 474, "answer": false, "completion": ".decl Appears_in(Person:symbol, Movie:symbol)\nAppears_in(\"Klingons\", \"Star Trek\").\nAppears_in(\"Klingons\", \"Star Trek: The Motion Picture\").\nAppears_in(\"Klingons\", \"Star Trek II: The Wrath of Khan\").\nAppears_in(\"Klingons\", \"Star Trek III: The Search for Spock\").\nAppears_in(\"Klingons\", \"Star Trek IV: The Voyage Home\").\nAppears_in(\"Klingons\", \"Star Trek V: The Final Frontier\").\nAppears_in(\"Klingons\", \"Star Trek VI: The Undiscovered Country\").\nAppears_in(\"Klingons\", \"Star Trek: Generations\").\nAppears_in(\"Klingons\", \"Star Trek: First Contact\").\nAppears_in(\"Klingons\", \"Star Trek: Insurrection\").\nAppears_in(\"Klingons\", \"Star Trek: Nemesis\").\nAppears_in(\"Klingons\", \"Star Trek\").\nAppears_in(\"Klingons\", \"Star Trek Into Darkness\").\nAppears_in(\"Klingons\", \"Star Trek Beyond\").\nAppears_in(\"Klingons\", \"Star Trek: Discovery\").\nAppears_in(\"Klingons\", \"Star Trek: Short Treks\").\nAppears_in(\"Klingons\", \"Star Trek: Picard\").\nAppears_in(\"Klingons\", \"Star Trek: Lower Decks\").\nAppears_in(\"Klingons\", \"Star Trek: Prodigy\").\nAppears_in(\"Klingons\", \"Star Trek: Strange New Worlds\").\nAppears_in(\"Klingons\", \"Star Trek: The Animated Series\").\nAppears_in(\"Klingons\", \"Star Trek: The Next Generation\").\nAppears_in(\"Klingons\", \"Star Trek: Deep Space Nine\").\nAppears_in(\"Klingons\", \"Star Trek: Voyager\").\nAppears_in(\"Klingons\", \"Star Trek: Enterprise\").\nAppears_in(\"Klingons\", \"Star Trek: Discovery\").\nAppears_in(\"Klingons\", \"Star Trek: Short Treks\").\nAppears_in(\"Klingons\", \"Star Trek: Picard\").\nAppears_in(\"Klingons\", \"Star Trek: Lower Decks\").\nAppears_in(\"Klingons\", \"Star Trek: Prodigy\").\nAppears_in(\"Klingons\", \"Star Trek: Strange New Worlds\").\nAppears_in(\"Klingons\", \"Star Trek: The Animated Series\").\nAppears_in(\"Klingons\", \"Star Trek: The Next Generation\").\nAppears_in(\"Klingons\", \"Star Trek: Deep Space Nine\").\nAppears_in(\"Klingons\", \"Star Trek: Voyager\").\nAppears_in(\"Klingons\", \"Star Trek: Enterprise\").\nAppears_in(\"Klingons\", \"Star Trek: Discovery\").\nAppears_in(\"Klingons\", \"Star Trek: Short Treks\").\nAppears_in(\"Klingons\", \"Star Trek: Picard\").\nAppears_in(\"Klingons\", \"Star Trek: Lower Decks\").\nAppears_in(\"Klingons\", \"Star Trek: Prodigy\").\nAppears_in(\"Klingons\", \"Star Trek: Strange New Worlds\").\nAppears_in(\"Klingons\", \"Star Trek: The Animated Series\").\nAppears_in(\"Klingons\", \"Star Trek: The Next Generation\").\nAppears_in(\"Klingons\", \"Star Trek: Deep Space Nine\").\nAppears_in(\"", "completions": [".decl Appears_in(Person:symbol, Movie:symbol)\nAppears_in(\"Klingons\", \"Star Trek\").\nAppears_in(\"Klingons\", \"Star Trek: The Motion Picture\").\nAppears_in(\"Klingons\", \"Star Trek II: The Wrath of Khan\").\nAppears_in(\"Klingons\", \"Star Trek III: The Search for Spock\").\nAppears_in(\"Klingons\", \"Star Trek IV: The Voyage Home\").\nAppears_in(\"Klingons\", \"Star Trek V: The Final Frontier\").\nAppears_in(\"Klingons\", \"Star Trek VI: The Undiscovered Country\").\nAppears_in(\"Klingons\", \"Star Trek: Generations\").\nAppears_in(\"Klingons\", \"Star Trek: First Contact\").\nAppears_in(\"Klingons\", \"Star Trek: Insurrection\").\nAppears_in(\"Klingons\", \"Star Trek: Nemesis\").\nAppears_in(\"Klingons\", \"Star Trek\").\nAppears_in(\"Klingons\", \"Star Trek Into Darkness\").\nAppears_in(\"Klingons\", \"Star Trek Beyond\").\nAppears_in(\"Klingons\", \"Star Trek: Discovery\").\nAppears_in(\"Klingons\", \"Star Trek: Short Treks\").\nAppears_in(\"Klingons\", \"Star Trek: Picard\").\nAppears_in(\"Klingons\", \"Star Trek: Lower Decks\").\nAppears_in(\"Klingons\", \"Star Trek: Prodigy\").\nAppears_in(\"Klingons\", \"Star Trek: Strange New Worlds\").\nAppears_in(\"Klingons\", \"Star Trek: The Animated Series\").\nAppears_in(\"Klingons\", \"Star Trek: The Next Generation\").\nAppears_in(\"Klingons\", \"Star Trek: Deep Space Nine\").\nAppears_in(\"Klingons\", \"Star Trek: Voyager\").\nAppears_in(\"Klingons\", \"Star Trek: Enterprise\").\nAppears_in(\"Klingons\", \"Star Trek: Discovery\").\nAppears_in(\"Klingons\", \"Star Trek: Short Treks\").\nAppears_in(\"Klingons\", \"Star Trek: Picard\").\nAppears_in(\"Klingons\", \"Star Trek: Lower Decks\").\nAppears_in(\"Klingons\", \"Star Trek: Prodigy\").\nAppears_in(\"Klingons\", \"Star Trek: Strange New Worlds\").\nAppears_in(\"Klingons\", \"Star Trek: The Animated Series\").\nAppears_in(\"Klingons\", \"Star Trek: The Next Generation\").\nAppears_in(\"Klingons\", \"Star Trek: Deep Space Nine\").\nAppears_in(\"Klingons\", \"Star Trek: Voyager\").\nAppears_in(\"Klingons\", \"Star Trek: Enterprise\").\nAppears_in(\"Klingons\", \"Star Trek: Discovery\").\nAppears_in(\"Klingons\", \"Star Trek: Short Treks\").\nAppears_in(\"Klingons\", \"Star Trek: Picard\").\nAppears_in(\"Klingons\", \"Star Trek: Lower Decks\").\nAppears_in(\"Klingons\", \"Star Trek: Prodigy\").\nAppears_in(\"Klingons\", \"Star Trek: Strange New Worlds\").\nAppears_in(\"Klingons\", \"Star Trek: The Animated Series\").\nAppears_in(\"Klingons\", \"Star Trek: The Next Generation\").\nAppears_in(\"Klingons\", \"Star Trek: Deep Space Nine\").\nAppears_in(\""]}
{"id": 475, "answer": false, "completion": ".decl Buried_in(Person:symbol, Place:symbol)\nBuried_in(\"Queen Elizabeth\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_in(\"Queen Elizabeth\", \"Pantheon\").\n.output Answer\n\n", "completions": [".decl Buried_in(Person:symbol, Place:symbol)\nBuried_in(\"Queen Elizabeth\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_in(\"Queen Elizabeth\", \"Pantheon\").\n.output Answer\n\n"]}
{"id": 476, "answer": true, "completion": ".decl Is_part_of(Place:symbol, Region:symbol)\nIs_part_of(\"Olympia, Washington\", \"Ish river country\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Olympia, Washington\", \"Ish river country\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Place:symbol, Region:symbol)\nIs_part_of(\"Olympia, Washington\", \"Ish river country\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Olympia, Washington\", \"Ish river country\").\n.output Answer\n\n"]}
{"id": 477, "answer": true, "completion": ".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"silicone suit\", \"silicone\").\nHas_material(\"judo\", \"human\").\n.decl Answer()\nAnswer() :- Has_material(\"silicone suit\", material1), Has_material(\"judo\", material2), material1 != material2.\n.output Answer\n\n", "completions": [".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"silicone suit\", \"silicone\").\nHas_material(\"judo\", \"human\").\n.decl Answer()\nAnswer() :- Has_material(\"silicone suit\", material1), Has_material(\"judo\", material2), material1 != material2.\n.output Answer\n\n"]}
{"id": 478, "answer": true, "completion": ".decl Has_n_values(Algebra:symbol, N_values:float)\nHas_n_values(\"boolean algebra\", 2).\n.decl Answer()\nAnswer() :- Has_n_values(\"boolean algebra\", n_values), n_values = 2.\n.output Answer\n\n", "completions": [".decl Has_n_values(Algebra:symbol, N_values:float)\nHas_n_values(\"boolean algebra\", 2).\n.decl Answer()\nAnswer() :- Has_n_values(\"boolean algebra\", n_values), n_values = 2.\n.output Answer\n\n"]}
{"id": 479, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"six year old\", 6).\n.decl Has_size(Animal:symbol, Size:symbol)\nHas_size(\"Northern fur seal\", \"large\").\n.decl Answer()\nAnswer() :- Has_age(\"six year old\", age), Has_size(\"Northern fur seal\", size), age < 10, size = \"large\".\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"six year old\", 6).\n.decl Has_size(Animal:symbol, Size:symbol)\nHas_size(\"Northern fur seal\", \"large\").\n.decl Answer()\nAnswer() :- Has_age(\"six year old\", age), Has_size(\"Northern fur seal\", size), age < 10, size = \"large\".\n.output Answer\n\n"]}
{"id": 480, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Kurt Cobain\", \"depression\").\n.decl Treats(Project:symbol, Disease:symbol)\nTreats(\"Project Semicolon\", \"depression\").\n.decl Answer()\nAnswer() :- Has_disease(\"Kurt Cobain\", disease), Treats(\"Project Semicolon\", disease).\n.output Answer\n\n", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Kurt Cobain\", \"depression\").\n.decl Treats(Project:symbol, Disease:symbol)\nTreats(\"Project Semicolon\", \"depression\").\n.decl Answer()\nAnswer() :- Has_disease(\"Kurt Cobain\", disease), Treats(\"Project Semicolon\", disease).\n.output Answer\n\n"]}
{"id": 481, "answer": true, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"anxious person\", \"anxiety\").\n.decl Has_power(Person:symbol, Power:symbol)\nHas_power(\"Wizard of Oz\", \"courage\").\n.decl Answer()\nAnswer() :- Has_trait(\"anxious person\", \"anxiety\"), Has_power(\"Wizard of Oz\", \"courage\").\n.output Answer\n\n", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"anxious person\", \"anxiety\").\n.decl Has_power(Person:symbol, Power:symbol)\nHas_power(\"Wizard of Oz\", \"courage\").\n.decl Answer()\nAnswer() :- Has_trait(\"anxious person\", \"anxiety\"), Has_power(\"Wizard of Oz\", \"courage\").\n.output Answer\n\n"]}
{"id": 482, "answer": true, "completion": ".decl Protects_against(Firewall:symbol, Short_circuit:symbol)\nProtects_against(\"firewall\", \"short circuit\").\n.decl Answer()\nAnswer() :- Protects_against(\"firewall\", \"short circuit\").\n.output Answer\n\n", "completions": [".decl Protects_against(Firewall:symbol, Short_circuit:symbol)\nProtects_against(\"firewall\", \"short circuit\").\n.decl Answer()\nAnswer() :- Protects_against(\"firewall\", \"short circuit\").\n.output Answer\n\n"]}
{"id": 483, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Michael J Fox\", 1.65).\n.decl Has_min_height(Group:symbol, Min_height:float)\nHas_min_height(\"Army Rangers\", 1.7).\n.decl Answer()\nAnswer() :- Has_height(\"Michael J Fox\", height), Has_min_height(\"Army Rangers\", min_height), height >= min_height.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Michael J Fox\", 1.65).\n.decl Has_min_height(Group:symbol, Min_height:float)\nHas_min_height(\"Army Rangers\", 1.7).\n.decl Answer()\nAnswer() :- Has_height(\"Michael J Fox\", height), Has_min_height(\"Army Rangers\", min_height), height >= min_height.\n.output Answer\n\n"]}
{"id": 484, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"The Jackson 5\", 5).\nHas_n_members(\"The Isley Brothers\", 6).\n.decl Answer()\nAnswer() :- Has_n_members(\"The Jackson 5\", n_members1), Has_n_members(\"The Isley Brothers\", n_members2), n_members1 < n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"The Jackson 5\", 5).\nHas_n_members(\"The Isley Brothers\", 6).\n.decl Answer()\nAnswer() :- Has_n_members(\"The Jackson 5\", n_members1), Has_n_members(\"The Isley Brothers\", n_members2), n_members1 < n_members2.\n.output Answer\n\n"]}
{"id": 485, "answer": true, "completion": ".decl Is_guru(Person:symbol)\nIs_guru(\"Kim Kardashian\").\n.decl Answer()\nAnswer() :- Is_guru(\"Kim Kardashian\").\n.output Answer\n\n", "completions": [".decl Is_guru(Person:symbol)\nIs_guru(\"Kim Kardashian\").\n.decl Answer()\nAnswer() :- Is_guru(\"Kim Kardashian\").\n.output Answer\n\n"]}
{"id": 486, "answer": true, "completion": ".decl Has_won(Person:symbol, Award:symbol)\nHas_won(\"Modern Family\", \"Slammy Award\").\n.decl Answer()\nAnswer() :- Has_won(\"Modern Family\", \"Slammy Award\").\n.output Answer\n\n", "completions": [".decl Has_won(Person:symbol, Award:symbol)\nHas_won(\"Modern Family\", \"Slammy Award\").\n.decl Answer()\nAnswer() :- Has_won(\"Modern Family\", \"Slammy Award\").\n.output Answer\n\n"]}
{"id": 487, "answer": true, "completion": ".decl Has_n_ex_wives(Person:symbol, N_ex_wives:float)\nHas_n_ex_wives(\"Larry King\", 8).\n.decl Has_n_players(Sport:symbol, N_players:float)\nHas_n_players(\"water polo\", 7).\n.decl Answer()\nAnswer() :- Has_n_ex_wives(\"Larry King\", n_ex_wives), Has_n_players(\"water polo\", n_players), n_ex_wives >= n_players.\n.output Answer\n\n", "completions": [".decl Has_n_ex_wives(Person:symbol, N_ex_wives:float)\nHas_n_ex_wives(\"Larry King\", 8).\n.decl Has_n_players(Sport:symbol, N_players:float)\nHas_n_players(\"water polo\", 7).\n.decl Answer()\nAnswer() :- Has_n_ex_wives(\"Larry King\", n_ex_wives), Has_n_players(\"water polo\", n_players), n_ex_wives >= n_players.\n.output Answer\n\n"]}
{"id": 488, "answer": true, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Jason\", \"likes video games\").\nHas_trait(\"Dr. Disrespect\", \"likes video games\").\n.decl Answer()\nAnswer() :- Has_trait(\"Jason\", trait), Has_trait(\"Dr. Disrespect\", trait).\n.output Answer\n\n", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Jason\", \"likes video games\").\nHas_trait(\"Dr. Disrespect\", \"likes video games\").\n.decl Answer()\nAnswer() :- Has_trait(\"Jason\", trait), Has_trait(\"Dr. Disrespect\", trait).\n.output Answer\n\n"]}
{"id": 489, "answer": true, "completion": ".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Iowa\", 56276).\nHas_area(\"English Channel\", 75000).\n.decl Answer()\nAnswer() :- Has_area(\"Iowa\", area1), Has_area(\"English Channel\", area2), area1 < area2.\n.output Answer\n\n", "completions": [".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Iowa\", 56276).\nHas_area(\"English Channel\", 75000).\n.decl Answer()\nAnswer() :- Has_area(\"Iowa\", area1), Has_area(\"English Channel\", area2), area1 < area2.\n.output Answer\n\n"]}
{"id": 490, "answer": false, "completion": ".decl Practices(Person:symbol, Practice:symbol)\nPractices(\"Kublai Khan\", \"polygamy\").\nPractices(\"Genghis Khan\", \"polygamy\").\n.decl Answer()\nAnswer() :- Practices(\"Kublai Khan\", \"monogamy\").\nAnswer() :- Practices(\"Genghis Khan\", \"monogamy\").\n.output Answer\n\n", "completions": [".decl Practices(Person:symbol, Practice:symbol)\nPractices(\"Kublai Khan\", \"polygamy\").\nPractices(\"Genghis Khan\", \"polygamy\").\n.decl Answer()\nAnswer() :- Practices(\"Kublai Khan\", \"monogamy\").\nAnswer() :- Practices(\"Genghis Khan\", \"monogamy\").\n.output Answer\n\n"]}
{"id": 491, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Flag of the United States\", \"white\").\n.decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"someone\", \"leukophobia\").\n.decl Answer()\nAnswer() :- Has_color(\"Flag of the United States\", color), Has_phobia(\"someone\", phobia), color != \"white\".\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Flag of the United States\", \"white\").\n.decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"someone\", \"leukophobia\").\n.decl Answer()\nAnswer() :- Has_color(\"Flag of the United States\", color), Has_phobia(\"someone\", phobia), color != \"white\".\n.output Answer\n\n"]}
{"id": 492, "answer": false, "completion": ".decl Kills(Villain:symbol, Victim:symbol)\nKills(\"Doomsday\", \"Superman\").\nKills(\"Joker\", \"Robin\").\n.decl Answer()\nAnswer() :- Kills(villain, \"Superman\"), Kills(villain, \"Robin\").\n.output Answer\n\n", "completions": [".decl Kills(Villain:symbol, Victim:symbol)\nKills(\"Doomsday\", \"Superman\").\nKills(\"Joker\", \"Robin\").\n.decl Answer()\nAnswer() :- Kills(villain, \"Superman\"), Kills(villain, \"Robin\").\n.output Answer\n\n"]}
{"id": 493, "answer": true, "completion": ".decl Has_taste(Object:symbol, Taste:symbol)\nHas_taste(\"sweet potato\", \"sweet\").\nHas_taste(\"pineapple\", \"sweet\").\n.decl Answer()\nAnswer() :- Has_taste(\"sweet potato\", taste1), Has_taste(\"pineapple\", taste2), taste1 = taste2.\n.output Answer\n\n", "completions": [".decl Has_taste(Object:symbol, Taste:symbol)\nHas_taste(\"sweet potato\", \"sweet\").\nHas_taste(\"pineapple\", \"sweet\").\n.decl Answer()\nAnswer() :- Has_taste(\"sweet potato\", taste1), Has_taste(\"pineapple\", taste2), taste1 = taste2.\n.output Answer\n\n"]}
{"id": 494, "answer": true, "completion": ".decl Has_dental_insurance(Person:symbol)\nHas_dental_insurance(\"John\").\n.decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"John\", \"Lactobacillus\").\n.decl Answer()\nAnswer() :- Has_dental_insurance(person), Has_diet(person, \"Lactobacillus\").\nAnswer() :- !Has_dental_insurance(person), Has_diet(person, \"Lactobacillus\").\n.output Answer\n\n", "completions": [".decl Has_dental_insurance(Person:symbol)\nHas_dental_insurance(\"John\").\n.decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"John\", \"Lactobacillus\").\n.decl Answer()\nAnswer() :- Has_dental_insurance(person), Has_diet(person, \"Lactobacillus\").\nAnswer() :- !Has_dental_insurance(person), Has_diet(person, \"Lactobacillus\").\n.output Answer\n\n"]}
{"id": 495, "answer": true, "completion": ".decl Located_in_latitude(City:symbol, Latitude:float)\nLocated_in_latitude(\"Bucharest\", 44.4).\nLocated_in_latitude(\"Egypt\", 27).\n.decl Answer()\nAnswer() :- Located_in_latitude(\"Bucharest\", latitude1), Located_in_latitude(\"Egypt\", latitude2), latitude1 > latitude2.\n.output Answer\n\n\n", "completions": [".decl Located_in_latitude(City:symbol, Latitude:float)\nLocated_in_latitude(\"Bucharest\", 44.4).\nLocated_in_latitude(\"Egypt\", 27).\n.decl Answer()\nAnswer() :- Located_in_latitude(\"Bucharest\", latitude1), Located_in_latitude(\"Egypt\", latitude2), latitude1 > latitude2.\n.output Answer\n\n\n"]}
{"id": 496, "answer": true, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"soy milk\", 80).\n.decl Needs_calories(Person:symbol, Calories:float)\nNeeds_calories(\"Cardi B.\", 2000).\n.decl Answer()\nAnswer() :- Has_calories(\"soy milk\", calories1), Needs_calories(\"Cardi B.\", calories2), calories1 < calories2.\n.output Answer\n\n", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"soy milk\", 80).\n.decl Needs_calories(Person:symbol, Calories:float)\nNeeds_calories(\"Cardi B.\", 2000).\n.decl Answer()\nAnswer() :- Has_calories(\"soy milk\", calories1), Needs_calories(\"Cardi B.\", calories2), calories1 < calories2.\n.output Answer\n\n"]}
{"id": 497, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Arvanite Greek\", \"Greek\").\nSpeaks(\"Arvanite Greek\", \"Albanian\").\n.decl Written_in(Document:symbol, Language:symbol)\nWritten_in(\"Albanian Declaration of Independence\", \"Albanian\").\n.decl Answer()\nAnswer() :- Speaks(\"Arvanite Greek\", language), Written_in(\"Albanian Declaration of Independence\", language).\n.output Answer\n\n\n", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Arvanite Greek\", \"Greek\").\nSpeaks(\"Arvanite Greek\", \"Albanian\").\n.decl Written_in(Document:symbol, Language:symbol)\nWritten_in(\"Albanian Declaration of Independence\", \"Albanian\").\n.decl Answer()\nAnswer() :- Speaks(\"Arvanite Greek\", language), Written_in(\"Albanian Declaration of Independence\", language).\n.output Answer\n\n\n"]}
{"id": 498, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"breakdancing\", \"1980s\").\nHappens_in_time(\"WW2\", \"1940s\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"breakdancing\", time1), Happens_in_time(\"WW2\", time2), time1 > time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"breakdancing\", \"1980s\").\nHappens_in_time(\"WW2\", \"1940s\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"breakdancing\", time1), Happens_in_time(\"WW2\", time2), time1 > time2.\n.output Answer\n\n"]}
{"id": 499, "answer": false, "completion": ".decl Has_title(Book:symbol, Title:symbol)\nHas_title(\"Romeo and Juliet\", \"Romeo and Juliet\").\n.decl Has_age_group(Book:symbol, Age_group:symbol)\nHas_age_group(\"Romeo and Juliet\", \"high school\").\n.decl Has_age_group(Book:symbol, Age_group:symbol)\nHas_age_group(\"Romeo and Juliet\", \"adult\").\n.decl Answer()\nAnswer() :- Has_title(book, \"Romeo and Juliet\"), Has_age_group(book, \"high school\").\n.output Answer\n\n", "completions": [".decl Has_title(Book:symbol, Title:symbol)\nHas_title(\"Romeo and Juliet\", \"Romeo and Juliet\").\n.decl Has_age_group(Book:symbol, Age_group:symbol)\nHas_age_group(\"Romeo and Juliet\", \"high school\").\n.decl Has_age_group(Book:symbol, Age_group:symbol)\nHas_age_group(\"Romeo and Juliet\", \"adult\").\n.decl Answer()\nAnswer() :- Has_title(book, \"Romeo and Juliet\"), Has_age_group(book, \"high school\").\n.output Answer\n\n"]}
{"id": 500, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Jon Brower Minnoch\", 635).\nHas_mass(\"chair\", 5).\nHas_mass(\"Voyager 2\", 825).\n.decl Answer()\nAnswer() :- Has_mass(\"Jon Brower Minnoch\", mass1), Has_mass(\"chair\", mass2), Has_mass(\"Voyager 2\", mass3), mass1 > mass2, mass1 < mass3.\n.output Answer\n\n", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Jon Brower Minnoch\", 635).\nHas_mass(\"chair\", 5).\nHas_mass(\"Voyager 2\", 825).\n.decl Answer()\nAnswer() :- Has_mass(\"Jon Brower Minnoch\", mass1), Has_mass(\"chair\", mass2), Has_mass(\"Voyager 2\", mass3), mass1 > mass2, mass1 < mass3.\n.output Answer\n\n"]}
{"id": 501, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Earth Day\", \"April\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"April\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Earth Day\", month), In_season(month, \"summer\").\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Earth Day\", \"April\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"April\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Earth Day\", month), In_season(month, \"summer\").\n.output Answer\n\n"]}
{"id": 502, "answer": true, "completion": ".decl Has_n_legs(Animal:symbol, N_legs:float)\nHas_n_legs(\"bumblebee\", 6).\n.decl Has_n_candidates(Election:symbol, N_candidates:float)\nHas_n_candidates(\"United States presidential election\", 2).\n.decl Answer()\nAnswer() :- Has_n_legs(\"bumblebee\", n_legs), Has_n_candidates(\"United States presidential election\", n_candidates), n_legs > n_candidates.\n.output Answer\n\n", "completions": [".decl Has_n_legs(Animal:symbol, N_legs:float)\nHas_n_legs(\"bumblebee\", 6).\n.decl Has_n_candidates(Election:symbol, N_candidates:float)\nHas_n_candidates(\"United States presidential election\", 2).\n.decl Answer()\nAnswer() :- Has_n_legs(\"bumblebee\", n_legs), Has_n_candidates(\"United States presidential election\", n_candidates), n_legs > n_candidates.\n.output Answer\n\n"]}
{"id": 503, "answer": false, "completion": ".decl Happens_every_n_times(Event:symbol, N_times:float)\nHappens_every_n_times(\"honey bee sting\", 1).\n.decl Happens_n_times(Event:symbol, N_times:float)\nHappens_n_times(\"honey bee sting\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_times(\"honey bee sting\", n_times1), Happens_n_times(\"honey bee sting\", n_times2), n_times1 < n_times2.\n.output Answer\n\n", "completions": [".decl Happens_every_n_times(Event:symbol, N_times:float)\nHappens_every_n_times(\"honey bee sting\", 1).\n.decl Happens_n_times(Event:symbol, N_times:float)\nHappens_n_times(\"honey bee sting\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_times(\"honey bee sting\", n_times1), Happens_n_times(\"honey bee sting\", n_times2), n_times1 < n_times2.\n.output Answer\n\n"]}
{"id": 504, "answer": false, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Blossom\", \"Blossom\").\nHas_name(\"Bubbles\", \"Bubbles\").\nHas_name(\"Buttercup\", \"Buttercup\").\n.decl Answer()\nAnswer() :- Has_name(\"Blossom\", name1), Has_name(\"Bubbles\", name2), Has_name(\"Buttercup\", name3), name1[0] = name2[0], name2[0] = name3[0].\n.output Answer\n\n", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Blossom\", \"Blossom\").\nHas_name(\"Bubbles\", \"Bubbles\").\nHas_name(\"Buttercup\", \"Buttercup\").\n.decl Answer()\nAnswer() :- Has_name(\"Blossom\", name1), Has_name(\"Bubbles\", name2), Has_name(\"Buttercup\", name3), name1[0] = name2[0], name2[0] = name3[0].\n.output Answer\n\n"]}
{"id": 505, "answer": true, "completion": ".decl Has_fans(Person:symbol, Fans:symbol)\nHas_fans(\"J.K Rowling\", \"many\").\nHas_fans(\"Alan Rickman\", \"many\").\n.decl Answer()\nAnswer() :- Has_fans(\"J.K Rowling\", fans1), Has_fans(\"Alan Rickman\", fans2), fans1 = fans2.\n.output Answer\n\n", "completions": [".decl Has_fans(Person:symbol, Fans:symbol)\nHas_fans(\"J.K Rowling\", \"many\").\nHas_fans(\"Alan Rickman\", \"many\").\n.decl Answer()\nAnswer() :- Has_fans(\"J.K Rowling\", fans1), Has_fans(\"Alan Rickman\", fans2), fans1 = fans2.\n.output Answer\n\n"]}
{"id": 506, "answer": true, "completion": ".decl Is_proud_of(Person_A:symbol, Person_B:symbol)\nIs_proud_of(\"Hannah Nixon\", \"Richard Nixon\").\n.decl Happens_after(Event_A:symbol, Event_B:symbol)\nHappens_after(\"Watergate scandal\", \"Richard Nixon's presidency\").\n.decl Answer()\nAnswer() :- Is_proud_of(\"Hannah Nixon\", \"Richard Nixon\"), Happens_after(\"Watergate scandal\", \"Richard Nixon's presidency\").\n.output Answer\n\n", "completions": [".decl Is_proud_of(Person_A:symbol, Person_B:symbol)\nIs_proud_of(\"Hannah Nixon\", \"Richard Nixon\").\n.decl Happens_after(Event_A:symbol, Event_B:symbol)\nHappens_after(\"Watergate scandal\", \"Richard Nixon's presidency\").\n.decl Answer()\nAnswer() :- Is_proud_of(\"Hannah Nixon\", \"Richard Nixon\"), Happens_after(\"Watergate scandal\", \"Richard Nixon's presidency\").\n.output Answer\n\n"]}
{"id": 507, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"giraffe\", 5.5).\n.decl Answer()\nAnswer() :- Has_height(\"Javier Sotomayor\", height1), Has_height(\"giraffe\", height2), height1 > height2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"giraffe\", 5.5).\n.decl Answer()\nAnswer() :- Has_height(\"Javier Sotomayor\", height1), Has_height(\"giraffe\", height2), height1 > height2.\n.output Answer\n\n"]}
{"id": 508, "answer": true, "completion": ".decl Likes(Person:symbol, Movie:symbol)\nLikes(\"Amy Winehouse\", \"Star Wars: Rogue One\").\n.decl Answer()\nAnswer() :- Likes(\"Amy Winehouse\", \"Star Wars: Rogue One\").\n.output Answer\n\n", "completions": [".decl Likes(Person:symbol, Movie:symbol)\nLikes(\"Amy Winehouse\", \"Star Wars: Rogue One\").\n.decl Answer()\nAnswer() :- Likes(\"Amy Winehouse\", \"Star Wars: Rogue One\").\n.output Answer\n\n"]}
{"id": 509, "answer": false, "completion": ".decl Has_debt(Person:symbol, Person:symbol)\nHas_debt(\"Christopher Nolan\", \"Bob Kane\").\n.decl Answer()\nAnswer() :- Has_debt(\"Christopher Nolan\", \"Bob Kane\").\n.output Answer\n\n", "completions": [".decl Has_debt(Person:symbol, Person:symbol)\nHas_debt(\"Christopher Nolan\", \"Bob Kane\").\n.decl Answer()\nAnswer() :- Has_debt(\"Christopher Nolan\", \"Bob Kane\").\n.output Answer\n\n"]}
{"id": 510, "answer": false, "completion": ".decl Named_after(County:symbol, Person:symbol)\nNamed_after(\"Morris County\", \"Gouverneur Morris\").\n.decl Is_chief_justice(Person:symbol)\nIs_chief_justice(\"John Jay\").\n.decl Answer()\nAnswer() :- Named_after(\"Morris County\", person), Is_chief_justice(person).\n.output Answer\n\n", "completions": [".decl Named_after(County:symbol, Person:symbol)\nNamed_after(\"Morris County\", \"Gouverneur Morris\").\n.decl Is_chief_justice(Person:symbol)\nIs_chief_justice(\"John Jay\").\n.decl Answer()\nAnswer() :- Named_after(\"Morris County\", person), Is_chief_justice(person).\n.output Answer\n\n"]}
{"id": 511, "answer": true, "completion": ".decl Has_status(Society:symbol, Status:float)\nHas_status(\"Japanese serfdom\", 2).\nHas_status(\"English serfdom\", 1).\n.decl Answer()\nAnswer() :- Has_status(\"Japanese serfdom\", status1), Has_status(\"English serfdom\", status2), status1 > status2.\n.output Answer\n\n\n", "completions": [".decl Has_status(Society:symbol, Status:float)\nHas_status(\"Japanese serfdom\", 2).\nHas_status(\"English serfdom\", 1).\n.decl Answer()\nAnswer() :- Has_status(\"Japanese serfdom\", status1), Has_status(\"English serfdom\", status2), status1 > status2.\n.output Answer\n\n\n"]}
{"id": 512, "answer": true, "completion": ".decl Grows_in_latitude(Crop:symbol, Latitude:float)\nGrows_in_latitude(\"cauliflower\", 75).\n.decl Answer()\nAnswer() :- Grows_in_latitude(\"cauliflower\", latitude), latitude >= 75.\n.output Answer\n\n", "completions": [".decl Grows_in_latitude(Crop:symbol, Latitude:float)\nGrows_in_latitude(\"cauliflower\", 75).\n.decl Answer()\nAnswer() :- Grows_in_latitude(\"cauliflower\", latitude), latitude >= 75.\n.output Answer\n\n"]}
{"id": 513, "answer": true, "completion": ".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"Swallow\", 11).\nHas_speed(\"American Woodcock\", 8).\n.decl Answer()\nAnswer() :- Has_speed(\"Swallow\", speed1), Has_speed(\"American Woodcock\", speed2), speed1 > speed2.\n.output Answer\n\n", "completions": [".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"Swallow\", 11).\nHas_speed(\"American Woodcock\", 8).\n.decl Answer()\nAnswer() :- Has_speed(\"Swallow\", speed1), Has_speed(\"American Woodcock\", speed2), speed1 > speed2.\n.output Answer\n\n"]}
{"id": 514, "answer": true, "completion": ".decl Makes(Person:symbol, Object:symbol)\nMakes(\"cattle farmer\", \"milk\").\nMakes(\"drum maker\", \"drum\").\n.decl Is_useful_for(Object_A:symbol, Object_B:symbol)\nIs_useful_for(\"milk\", \"drum\").\n.decl Answer()\nAnswer() :- Makes(\"cattle farmer\", object1), Makes(\"drum maker\", object2), Is_useful_for(object1, object2).\n.output Answer\n\n", "completions": [".decl Makes(Person:symbol, Object:symbol)\nMakes(\"cattle farmer\", \"milk\").\nMakes(\"drum maker\", \"drum\").\n.decl Is_useful_for(Object_A:symbol, Object_B:symbol)\nIs_useful_for(\"milk\", \"drum\").\n.decl Answer()\nAnswer() :- Makes(\"cattle farmer\", object1), Makes(\"drum maker\", object2), Is_useful_for(object1, object2).\n.output Answer\n\n"]}
{"id": 515, "answer": false, "completion": ".decl Needs(Person:symbol, Object:symbol)\nNeeds(\"drummer\", \"drum\").\nNeeds(\"guitarist\", \"guitar\").\nNeeds(\"guitarist\", \"guitar strings\").\n.decl Answer()\nAnswer() :- Needs(\"drummer\", \"guitar strings\").\n.output Answer\n\n", "completions": [".decl Needs(Person:symbol, Object:symbol)\nNeeds(\"drummer\", \"drum\").\nNeeds(\"guitarist\", \"guitar\").\nNeeds(\"guitarist\", \"guitar strings\").\n.decl Answer()\nAnswer() :- Needs(\"drummer\", \"guitar strings\").\n.output Answer\n\n"]}
{"id": 516, "answer": false, "completion": ".decl Has_name(Thing:symbol, Name:symbol)\nHas_name(\"Homer\", \"Homer\").\n.decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Homer\", \"Homer\").\n.decl Answer()\nAnswer() :- Has_name(\"Homer\", \"Homer\").\n.output Answer\n\n", "completions": [".decl Has_name(Thing:symbol, Name:symbol)\nHas_name(\"Homer\", \"Homer\").\n.decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Homer\", \"Homer\").\n.decl Answer()\nAnswer() :- Has_name(\"Homer\", \"Homer\").\n.output Answer\n\n"]}
{"id": 517, "answer": true, "completion": ".decl Has_record(Person:symbol, Record:symbol)\nHas_record(\"Kane\", \"Royal Rumble\").\n.decl Lasts_longer_than(Record:symbol, Record2:symbol)\nLasts_longer_than(\"Royal Rumble\", \"murder\").\n.decl Answer()\nAnswer() :- Has_record(\"Kane\", record), Lasts_longer_than(record, \"murder\").\n.output Answer\n\n", "completions": [".decl Has_record(Person:symbol, Record:symbol)\nHas_record(\"Kane\", \"Royal Rumble\").\n.decl Lasts_longer_than(Record:symbol, Record2:symbol)\nLasts_longer_than(\"Royal Rumble\", \"murder\").\n.decl Answer()\nAnswer() :- Has_record(\"Kane\", record), Lasts_longer_than(record, \"murder\").\n.output Answer\n\n"]}
{"id": 518, "answer": true, "completion": ".decl Is_in(Object:symbol, Location:symbol)\nIs_in(\"Rick and Morty\", \"Earth\").\nIs_in(\"Mariana Trench\", \"Earth\").\n.decl Answer()\nAnswer() :- Is_in(\"Rick and Morty\", location1), Is_in(\"Mariana Trench\", location2), location1 = location2.\n.output Answer\n\n", "completions": [".decl Is_in(Object:symbol, Location:symbol)\nIs_in(\"Rick and Morty\", \"Earth\").\nIs_in(\"Mariana Trench\", \"Earth\").\n.decl Answer()\nAnswer() :- Is_in(\"Rick and Morty\", location1), Is_in(\"Mariana Trench\", location2), location1 = location2.\n.output Answer\n\n"]}
{"id": 519, "answer": true, "completion": ".decl Has_statuette(Person:symbol, Statuette:symbol)\nHas_statuette(\"Dick Wolf\", \"winged statuette\").\n.decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Dick Wolf\", \"home\").\n.decl Answer()\nAnswer() :- Has_statuette(\"Dick Wolf\", \"winged statuette\"), Lives_in(\"Dick Wolf\", \"home\").\n.output Answer\n\n", "completions": [".decl Has_statuette(Person:symbol, Statuette:symbol)\nHas_statuette(\"Dick Wolf\", \"winged statuette\").\n.decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Dick Wolf\", \"home\").\n.decl Answer()\nAnswer() :- Has_statuette(\"Dick Wolf\", \"winged statuette\"), Lives_in(\"Dick Wolf\", \"home\").\n.output Answer\n\n"]}
{"id": 520, "answer": true, "completion": ".decl Is_awake(Animal:symbol)\nIs_awake(\"pangolin\").\n.decl Is_asleep(Animal:symbol)\nIs_asleep(\"clouded leopard\").\n.decl Answer()\nAnswer() :- Is_awake(\"pangolin\"), Is_asleep(\"clouded leopard\").\n.output Answer\n\n", "completions": [".decl Is_awake(Animal:symbol)\nIs_awake(\"pangolin\").\n.decl Is_asleep(Animal:symbol)\nIs_asleep(\"clouded leopard\").\n.decl Answer()\nAnswer() :- Is_awake(\"pangolin\"), Is_asleep(\"clouded leopard\").\n.output Answer\n\n"]}
{"id": 521, "answer": true, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"mythical creature\", \"unicorn\").\nHas_name(\"Small Solar System body\", \"unicorn\").\n.decl Answer()\nAnswer() :- Has_name(object1, name), Has_name(object2, name), object1 != object2.\n.output Answer\n\n", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"mythical creature\", \"unicorn\").\nHas_name(\"Small Solar System body\", \"unicorn\").\n.decl Answer()\nAnswer() :- Has_name(object1, name), Has_name(object2, name), object1 != object2.\n.output Answer\n\n"]}
{"id": 522, "answer": true, "completion": ".decl Believes_in(Person:symbol, Medicine:symbol)\nBelieves_in(\"Lionel Richie\", \"holistic medicine\").\n.decl Answer()\nAnswer() :- Believes_in(\"Lionel Richie\", \"holistic medicine\").\n.output Answer\n\n", "completions": [".decl Believes_in(Person:symbol, Medicine:symbol)\nBelieves_in(\"Lionel Richie\", \"holistic medicine\").\n.decl Answer()\nAnswer() :- Believes_in(\"Lionel Richie\", \"holistic medicine\").\n.output Answer\n\n"]}
{"id": 523, "answer": true, "completion": ".decl Has_n_jobs(Person:symbol, N_jobs:float)\nHas_n_jobs(\"host of Dancing With The Stars\", 1).\n.decl Answer()\nAnswer() :- Has_n_jobs(\"host of Dancing With The Stars\", n_jobs), n_jobs != 2.\n.output Answer\n\n\n", "completions": [".decl Has_n_jobs(Person:symbol, N_jobs:float)\nHas_n_jobs(\"host of Dancing With The Stars\", 1).\n.decl Answer()\nAnswer() :- Has_n_jobs(\"host of Dancing With The Stars\", n_jobs), n_jobs != 2.\n.output Answer\n\n\n"]}
{"id": 524, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"salmon\", \"Caspian Sea\").\n.decl Happens_in(Event:symbol, Place:symbol)\nHappens_in(\"salmon mating\", \"Caspian Sea\").\n.decl Answer()\nAnswer() :- Lives_in(\"salmon\", place), Happens_in(\"salmon mating\", place).\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"salmon\", \"Caspian Sea\").\n.decl Happens_in(Event:symbol, Place:symbol)\nHappens_in(\"salmon mating\", \"Caspian Sea\").\n.decl Answer()\nAnswer() :- Lives_in(\"salmon\", place), Happens_in(\"salmon mating\", place).\n.output Answer\n\n"]}
{"id": 525, "answer": false, "completion": ".decl Has_route(Transport:symbol, Route:symbol)\nHas_route(\"Amtrak\", \"New York City\").\nHas_route(\"Amtrak\", \"Washington, D.C.\").\nHas_route(\"Amtrak\", \"Chicago\").\nHas_route(\"Amtrak\", \"Seattle\").\nHas_route(\"Amtrak\", \"Los Angeles\").\nHas_route(\"Amtrak\", \"San Francisco\").\nHas_route(\"Amtrak\", \"Boston\").\nHas_route(\"Amtrak\", \"Philadelphia\").\nHas_route(\"Amtrak\", \"New Orleans\").\nHas_route(\"Amtrak\", \"Portland\").\nHas_route(\"Amtrak\", \"Baltimore\").\nHas_route(\"Amtrak\", \"Miami\").\nHas_route(\"Amtrak\", \"New Haven\").\nHas_route(\"Amtrak\", \"Albany\").\nHas_route(\"Amtrak\", \"Providence\").\nHas_route(\"Amtrak\", \"Wilmington\").\nHas_route(\"Amtrak\", \"Savannah\").\nHas_route(\"Amtrak\", \"Charleston\").\nHas_route(\"Amtrak\", \"Richmond\").\nHas_route(\"Amtrak\", \"Norfolk\").\nHas_route(\"Amtrak\", \"Newport News\").\nHas_route(\"Amtrak\", \"Raleigh\").\nHas_route(\"Amtrak\", \"Charlotte\").\nHas_route(\"Amtrak\", \"Atlanta\").\nHas_route(\"Amtrak\", \"Jacksonville\").\nHas_route(\"Amtrak\", \"Tampa\").\nHas_route(\"Amtrak\", \"Orlando\").\nHas_route(\"Amtrak\", \"St. Petersburg\").\nHas_route(\"Amtrak\", \"Cincinnati\").\nHas_route(\"Amtrak\", \"Cleveland\").\nHas_route(\"Amtrak\", \"Detroit\").\nHas_route(\"Amtrak\", \"Pittsburgh\").\nHas_route(\"Amtrak\", \"Buffalo\").\nHas_route(\"Amtrak\", \"Rochester\").\nHas_route(\"Amtrak\", \"Syracuse\").\nHas_route(\"Amtrak\", \"Toronto\").\nHas_route(\"Amtrak\", \"Montreal\").\nHas_route(\"Amtrak\", \"Portland\").\nHas_route(\"Amtrak\", \"Bangor\").\nHas_route(\"Amtrak\", \"Boston\").\nHas_route(\"Amtrak\", \"Springfield\").\nHas_route(\"Amtrak\", \"Hartford\").\nHas_route(\"Amtrak\", \"New Haven\").\nHas_route(\"Amtrak\", \"New York City\").\nHas_route(\"Amtrak\", \"Albany\").\nHas_route(\"Amtrak\", \"Rochester\").\nHas_route(\"Amtrak\", \"Buffalo\").\nHas_route(\"Amtrak\", \"Niagara Falls\").\nHas_route(\"Amtrak\", \"Toronto\").\nHas_route(\"Amtrak\", \"Montreal\").\nHas_route(\"Amtrak\", \"Portland\").\nHas_route(\"Amtrak\", \"Boston\").\nHas_route(\"Amtrak\", \"Springfield\").\nHas_route(\"Amtrak\", \"New Haven\").\nHas_route(\"Amtrak\", \"New York City\").\nHas_route(\"Amtrak\", \"Philadelphia\").\nHas_route(\"Amtrak\", \"Washington, D.C.\").\nHas_route(\"Amtrak\", \"Richmond\").\nHas_route(\"Amtrak\", \"Raleigh\").\nHas_route(\"Amtrak\", \"Charlotte\").\nHas_route(\"Amtrak\", \"Atlanta\").\nHas_route(\"Amtrak\", \"Savannah\").\nHas_route(\"Amtrak\", \"Jacksonville\").\nHas_route(\"Amtrak\", \"Tampa\").\nHas_route(\"Amtrak\", \"Or", "completions": [".decl Has_route(Transport:symbol, Route:symbol)\nHas_route(\"Amtrak\", \"New York City\").\nHas_route(\"Amtrak\", \"Washington, D.C.\").\nHas_route(\"Amtrak\", \"Chicago\").\nHas_route(\"Amtrak\", \"Seattle\").\nHas_route(\"Amtrak\", \"Los Angeles\").\nHas_route(\"Amtrak\", \"San Francisco\").\nHas_route(\"Amtrak\", \"Boston\").\nHas_route(\"Amtrak\", \"Philadelphia\").\nHas_route(\"Amtrak\", \"New Orleans\").\nHas_route(\"Amtrak\", \"Portland\").\nHas_route(\"Amtrak\", \"Baltimore\").\nHas_route(\"Amtrak\", \"Miami\").\nHas_route(\"Amtrak\", \"New Haven\").\nHas_route(\"Amtrak\", \"Albany\").\nHas_route(\"Amtrak\", \"Providence\").\nHas_route(\"Amtrak\", \"Wilmington\").\nHas_route(\"Amtrak\", \"Savannah\").\nHas_route(\"Amtrak\", \"Charleston\").\nHas_route(\"Amtrak\", \"Richmond\").\nHas_route(\"Amtrak\", \"Norfolk\").\nHas_route(\"Amtrak\", \"Newport News\").\nHas_route(\"Amtrak\", \"Raleigh\").\nHas_route(\"Amtrak\", \"Charlotte\").\nHas_route(\"Amtrak\", \"Atlanta\").\nHas_route(\"Amtrak\", \"Jacksonville\").\nHas_route(\"Amtrak\", \"Tampa\").\nHas_route(\"Amtrak\", \"Orlando\").\nHas_route(\"Amtrak\", \"St. Petersburg\").\nHas_route(\"Amtrak\", \"Cincinnati\").\nHas_route(\"Amtrak\", \"Cleveland\").\nHas_route(\"Amtrak\", \"Detroit\").\nHas_route(\"Amtrak\", \"Pittsburgh\").\nHas_route(\"Amtrak\", \"Buffalo\").\nHas_route(\"Amtrak\", \"Rochester\").\nHas_route(\"Amtrak\", \"Syracuse\").\nHas_route(\"Amtrak\", \"Toronto\").\nHas_route(\"Amtrak\", \"Montreal\").\nHas_route(\"Amtrak\", \"Portland\").\nHas_route(\"Amtrak\", \"Bangor\").\nHas_route(\"Amtrak\", \"Boston\").\nHas_route(\"Amtrak\", \"Springfield\").\nHas_route(\"Amtrak\", \"Hartford\").\nHas_route(\"Amtrak\", \"New Haven\").\nHas_route(\"Amtrak\", \"New York City\").\nHas_route(\"Amtrak\", \"Albany\").\nHas_route(\"Amtrak\", \"Rochester\").\nHas_route(\"Amtrak\", \"Buffalo\").\nHas_route(\"Amtrak\", \"Niagara Falls\").\nHas_route(\"Amtrak\", \"Toronto\").\nHas_route(\"Amtrak\", \"Montreal\").\nHas_route(\"Amtrak\", \"Portland\").\nHas_route(\"Amtrak\", \"Boston\").\nHas_route(\"Amtrak\", \"Springfield\").\nHas_route(\"Amtrak\", \"New Haven\").\nHas_route(\"Amtrak\", \"New York City\").\nHas_route(\"Amtrak\", \"Philadelphia\").\nHas_route(\"Amtrak\", \"Washington, D.C.\").\nHas_route(\"Amtrak\", \"Richmond\").\nHas_route(\"Amtrak\", \"Raleigh\").\nHas_route(\"Amtrak\", \"Charlotte\").\nHas_route(\"Amtrak\", \"Atlanta\").\nHas_route(\"Amtrak\", \"Savannah\").\nHas_route(\"Amtrak\", \"Jacksonville\").\nHas_route(\"Amtrak\", \"Tampa\").\nHas_route(\"Amtrak\", \"Or"]}
{"id": 526, "answer": true, "completion": ".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"Chinook salmon\", \"omega-3 fatty acids\").\n.decl Needs_nutrient(Person:symbol, Nutrient:symbol)\nNeeds_nutrient(\"Ryan Reynolds\", \"omega-3 fatty acids\").\n.decl Answer()\nAnswer() :- Has_nutrient(food, nutrient), Needs_nutrient(\"Ryan Reynolds\", nutrient).\n.output Answer\n\n", "completions": [".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"Chinook salmon\", \"omega-3 fatty acids\").\n.decl Needs_nutrient(Person:symbol, Nutrient:symbol)\nNeeds_nutrient(\"Ryan Reynolds\", \"omega-3 fatty acids\").\n.decl Answer()\nAnswer() :- Has_nutrient(food, nutrient), Needs_nutrient(\"Ryan Reynolds\", nutrient).\n.output Answer\n\n"]}
{"id": 527, "answer": true, "completion": ".decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Tsar Nicholas\", \"Alexei\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Alexei\", \"daredevil\").\n.decl Answer()\nAnswer() :- Has_son(person, son), Has_trait(son, \"daredevil\").\n.output Answer\n\n", "completions": [".decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Tsar Nicholas\", \"Alexei\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Alexei\", \"daredevil\").\n.decl Answer()\nAnswer() :- Has_son(person, son), Has_trait(son, \"daredevil\").\n.output Answer\n\n"]}
{"id": 528, "answer": true, "completion": ".decl Has_n_vowels(String:symbol, N_vowels:float)\nHas_n_vowels(\"qwertyuiop\", 9).\n.decl Answer()\nAnswer() :- Has_n_vowels(\"qwertyuiop\", n_vowels), n_vowels > 5.\n.output Answer\n\n", "completions": [".decl Has_n_vowels(String:symbol, N_vowels:float)\nHas_n_vowels(\"qwertyuiop\", 9).\n.decl Answer()\nAnswer() :- Has_n_vowels(\"qwertyuiop\", n_vowels), n_vowels > 5.\n.output Answer\n\n"]}
{"id": 529, "answer": false, "completion": ".decl Used_in(Weapon:symbol, War:symbol)\nUsed_in(\"muskets\", \"American Revolutionary War\").\nUsed_in(\"muskets\", \"War of 1812\").\nUsed_in(\"muskets\", \"American Civil War\").\nUsed_in(\"muskets\", \"World War I\").\nUsed_in(\"muskets\", \"World War II\").\nUsed_in(\"muskets\", \"Korean War\").\nUsed_in(\"muskets\", \"Vietnam War\").\nUsed_in(\"muskets\", \"War in Afghanistan\").\nUsed_in(\"muskets\", \"Iraq War\").\nUsed_in(\"muskets\", \"War in North-West Pakistan\").\nUsed_in(\"muskets\", \"War in Somalia\").\nUsed_in(\"muskets\", \"War in Darfur\").\nUsed_in(\"muskets\", \"Sri Lankan Civil War\").\nUsed_in(\"muskets\", \"Mexican Drug War\").\nUsed_in(\"muskets\", \"Mexican Revolution\").\nUsed_in(\"muskets\", \"Mexican-American War\").\nUsed_in(\"muskets\", \"War of the Pacific\").\nUsed_in(\"muskets\", \"Chincha Islands War\").\nUsed_in(\"muskets\", \"War of the Confederation\").\nUsed_in(\"muskets\", \"War of the Triple Alliance\").\nUsed_in(\"muskets\", \"Paraguayan War\").\nUsed_in(\"muskets\", \"Chaco War\").\nUsed_in(\"muskets\", \"Peruvian War of Independence\").\nUsed_in(\"muskets\", \"Peruvian Civil War\").\nUsed_in(\"muskets\", \"Peruvian War of the Pacific\").\nUsed_in(\"muskets\", \"Ecuadorian-Peruvian War\").\nUsed_in(\"muskets\", \"Ecuadorian Civil War\").\nUsed_in(\"muskets\", \"Colombian Civil War\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1876\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1895\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1899-1902\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1948\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1953-1964\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1964-1966\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1967-1968\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1969-1970\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1973-1974\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1975-1977\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1978-1979\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1980-1982\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1983-1984\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1985-1986\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1987-1988\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1989-1990\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1991-1992\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1993-1994\").\nUsed_", "completions": [".decl Used_in(Weapon:symbol, War:symbol)\nUsed_in(\"muskets\", \"American Revolutionary War\").\nUsed_in(\"muskets\", \"War of 1812\").\nUsed_in(\"muskets\", \"American Civil War\").\nUsed_in(\"muskets\", \"World War I\").\nUsed_in(\"muskets\", \"World War II\").\nUsed_in(\"muskets\", \"Korean War\").\nUsed_in(\"muskets\", \"Vietnam War\").\nUsed_in(\"muskets\", \"War in Afghanistan\").\nUsed_in(\"muskets\", \"Iraq War\").\nUsed_in(\"muskets\", \"War in North-West Pakistan\").\nUsed_in(\"muskets\", \"War in Somalia\").\nUsed_in(\"muskets\", \"War in Darfur\").\nUsed_in(\"muskets\", \"Sri Lankan Civil War\").\nUsed_in(\"muskets\", \"Mexican Drug War\").\nUsed_in(\"muskets\", \"Mexican Revolution\").\nUsed_in(\"muskets\", \"Mexican-American War\").\nUsed_in(\"muskets\", \"War of the Pacific\").\nUsed_in(\"muskets\", \"Chincha Islands War\").\nUsed_in(\"muskets\", \"War of the Confederation\").\nUsed_in(\"muskets\", \"War of the Triple Alliance\").\nUsed_in(\"muskets\", \"Paraguayan War\").\nUsed_in(\"muskets\", \"Chaco War\").\nUsed_in(\"muskets\", \"Peruvian War of Independence\").\nUsed_in(\"muskets\", \"Peruvian Civil War\").\nUsed_in(\"muskets\", \"Peruvian War of the Pacific\").\nUsed_in(\"muskets\", \"Ecuadorian-Peruvian War\").\nUsed_in(\"muskets\", \"Ecuadorian Civil War\").\nUsed_in(\"muskets\", \"Colombian Civil War\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1876\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1895\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1899-1902\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1948\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1953-1964\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1964-1966\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1967-1968\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1969-1970\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1973-1974\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1975-1977\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1978-1979\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1980-1982\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1983-1984\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1985-1986\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1987-1988\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1989-1990\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1991-1992\").\nUsed_in(\"muskets\", \"Colombian Civil War of 1993-1994\").\nUsed_"]}
{"id": 530, "answer": true, "completion": ".decl Has_association(Person:symbol, Animal:symbol)\nHas_association(\"Noah\", \"dove\").\n.decl Answer()\nAnswer() :- Has_association(\"Noah\", \"dove\").\n.output Answer\n\n", "completions": [".decl Has_association(Person:symbol, Animal:symbol)\nHas_association(\"Noah\", \"dove\").\n.decl Answer()\nAnswer() :- Has_association(\"Noah\", \"dove\").\n.output Answer\n\n"]}
{"id": 531, "answer": true, "completion": ".decl Has_diagnosis(Person:symbol, Diagnosis:symbol)\nHas_diagnosis(\"Britney Spears\", \"bipolar disorder\").\n.decl Causes(Diagnosis:symbol, Event:symbol)\nCauses(\"bipolar disorder\", \"breakdown\").\n.decl Answer()\nAnswer() :- Has_diagnosis(\"Britney Spears\", diagnosis), Causes(diagnosis, \"breakdown\").\n.output Answer\n\n", "completions": [".decl Has_diagnosis(Person:symbol, Diagnosis:symbol)\nHas_diagnosis(\"Britney Spears\", \"bipolar disorder\").\n.decl Causes(Diagnosis:symbol, Event:symbol)\nCauses(\"bipolar disorder\", \"breakdown\").\n.decl Answer()\nAnswer() :- Has_diagnosis(\"Britney Spears\", diagnosis), Causes(diagnosis, \"breakdown\").\n.output Answer\n\n"]}
{"id": 532, "answer": true, "completion": ".decl Has_danger_level(Animal:symbol, Danger_level:float)\nHas_danger_level(\"Cassowary\", 2).\nHas_danger_level(\"crane\", 3).\n.decl Answer()\nAnswer() :- Has_danger_level(\"Cassowary\", danger_level1), Has_danger_level(\"crane\", danger_level2), danger_level1 < danger_level2.\n.output Answer\n\n", "completions": [".decl Has_danger_level(Animal:symbol, Danger_level:float)\nHas_danger_level(\"Cassowary\", 2).\nHas_danger_level(\"crane\", 3).\n.decl Answer()\nAnswer() :- Has_danger_level(\"Cassowary\", danger_level1), Has_danger_level(\"crane\", danger_level2), danger_level1 < danger_level2.\n.output Answer\n\n"]}
{"id": 533, "answer": false, "completion": ".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Mark Twain\", \"writer\").\n.decl Answer()\nAnswer() :- Has_occupation(\"Mark Twain\", \"inventor\").\n.output Answer\n\n", "completions": [".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Mark Twain\", \"writer\").\n.decl Answer()\nAnswer() :- Has_occupation(\"Mark Twain\", \"inventor\").\n.output Answer\n\n"]}
{"id": 534, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"French Revolution\", \"1789\").\nHappens_in_time(\"Eiffel tower\", \"1889\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Eiffel tower\", time1), Happens_in_time(\"French Revolution\", time2), time1 > time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"French Revolution\", \"1789\").\nHappens_in_time(\"Eiffel tower\", \"1889\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Eiffel tower\", time1), Happens_in_time(\"French Revolution\", time2), time1 > time2.\n.output Answer\n\n"]}
{"id": 535, "answer": true, "completion": ".decl Has_period(Artwork:symbol, Period:symbol)\nHas_period(\"Berlin University of the Arts\", \"Baroque\").\n.decl Is_relic(Artwork:symbol)\nIs_relic(\"Berlin University of the Arts\").\n.decl Answer()\nAnswer() :- Has_period(\"Berlin University of the Arts\", \"Baroque\"), Is_relic(\"Berlin University of the Arts\").\n.output Answer\n\n", "completions": [".decl Has_period(Artwork:symbol, Period:symbol)\nHas_period(\"Berlin University of the Arts\", \"Baroque\").\n.decl Is_relic(Artwork:symbol)\nIs_relic(\"Berlin University of the Arts\").\n.decl Answer()\nAnswer() :- Has_period(\"Berlin University of the Arts\", \"Baroque\"), Is_relic(\"Berlin University of the Arts\").\n.output Answer\n\n"]}
{"id": 536, "answer": true, "completion": ".decl Has_publisher(Comic:symbol, Publisher:symbol)\nHas_publisher(\"Avengers Comics\", \"Marvel Comics\").\nHas_publisher(\"DC Comics\", \"DC Comics\").\n.decl Answer()\nAnswer() :- Has_publisher(\"Avengers Comics\", publisher1), Has_publisher(\"DC Comics\", publisher2), publisher1 != publisher2.\n.output Answer\n\n", "completions": [".decl Has_publisher(Comic:symbol, Publisher:symbol)\nHas_publisher(\"Avengers Comics\", \"Marvel Comics\").\nHas_publisher(\"DC Comics\", \"DC Comics\").\n.decl Answer()\nAnswer() :- Has_publisher(\"Avengers Comics\", publisher1), Has_publisher(\"DC Comics\", publisher2), publisher1 != publisher2.\n.output Answer\n\n"]}
{"id": 537, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Queen Elizabeth The Queen Mother\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth II\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth I\", \"Elizabeth\").\n.decl Answer()\nAnswer() :- Has_name(\"Queen Elizabeth The Queen Mother\", name), Has_name(\"Queen Elizabeth II\", name).\nAnswer() :- Has_name(\"Queen Elizabeth The Queen Mother\", name), Has_name(\"Queen Elizabeth I\", name).\nAnswer() :- Has_name(\"Queen Elizabeth II\", name), Has_name(\"Queen Elizabeth I\", name).\n.output Answer\n\n", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Queen Elizabeth The Queen Mother\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth II\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth I\", \"Elizabeth\").\n.decl Answer()\nAnswer() :- Has_name(\"Queen Elizabeth The Queen Mother\", name), Has_name(\"Queen Elizabeth II\", name).\nAnswer() :- Has_name(\"Queen Elizabeth The Queen Mother\", name), Has_name(\"Queen Elizabeth I\", name).\nAnswer() :- Has_name(\"Queen Elizabeth II\", name), Has_name(\"Queen Elizabeth I\", name).\n.output Answer\n\n"]}
{"id": 538, "answer": true, "completion": ".decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"Cuba Libre\", \"rum\").\nHas_ingredient(\"Cuba Libre\", \"cola\").\nHas_ingredient(\"Cuba Libre\", \"lime\").\n.decl Has_effect(Ingredient:symbol, Effect:symbol)\nHas_effect(\"rum\", \"insomnia\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Cuba Libre\", ingredient), Has_effect(ingredient, \"insomnia\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"Cuba Libre\", \"rum\").\nHas_ingredient(\"Cuba Libre\", \"cola\").\nHas_ingredient(\"Cuba Libre\", \"lime\").\n.decl Has_effect(Ingredient:symbol, Effect:symbol)\nHas_effect(\"rum\", \"insomnia\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Cuba Libre\", ingredient), Has_effect(ingredient, \"insomnia\").\n.output Answer\n\n"]}
{"id": 539, "answer": true, "completion": ".decl Buys(Company:symbol, Product:symbol)\nBuys(\"United Airlines\", \"jet fuel\").\n.decl Is_a(Product:symbol, Category:symbol)\nIs_a(\"jet fuel\", \"fuel\").\nIs_a(\"Glycol\", \"fuel\").\n.decl Answer()\nAnswer() :- Buys(\"United Airlines\", product), Is_a(\"Glycol\", category), Is_a(product, category).\n.output Answer\n\n", "completions": [".decl Buys(Company:symbol, Product:symbol)\nBuys(\"United Airlines\", \"jet fuel\").\n.decl Is_a(Product:symbol, Category:symbol)\nIs_a(\"jet fuel\", \"fuel\").\nIs_a(\"Glycol\", \"fuel\").\n.decl Answer()\nAnswer() :- Buys(\"United Airlines\", product), Is_a(\"Glycol\", category), Is_a(product, category).\n.output Answer\n\n"]}
{"id": 540, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Swiss Guard\", 110).\nHas_n_members(\"Virginia General Assembly\", 140).\n.decl Answer()\nAnswer() :- Has_n_members(\"Swiss Guard\", n_members1), Has_n_members(\"Virginia General Assembly\", n_members2), n_members1 >= n_members2.\n.output Answer\n\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Swiss Guard\", 110).\nHas_n_members(\"Virginia General Assembly\", 140).\n.decl Answer()\nAnswer() :- Has_n_members(\"Swiss Guard\", n_members1), Has_n_members(\"Virginia General Assembly\", n_members2), n_members1 >= n_members2.\n.output Answer\n\n\n"]}
{"id": 541, "answer": true, "completion": ".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Julio Gonzalez\", \"acetylene\").\n.decl Answer()\nAnswer() :- Likes(\"Julio Gonzalez\", \"acetylene\").\n.output Answer\n\n", "completions": [".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Julio Gonzalez\", \"acetylene\").\n.decl Answer()\nAnswer() :- Likes(\"Julio Gonzalez\", \"acetylene\").\n.output Answer\n\n"]}
{"id": 542, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Frigatebird\", \"tropical\").\nLives_in(\"Frigatebird\", \"subtropical\").\n.decl Answer()\nAnswer() :- Lives_in(\"Frigatebird\", \"Ontario\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Frigatebird\", \"tropical\").\nLives_in(\"Frigatebird\", \"subtropical\").\n.decl Answer()\nAnswer() :- Lives_in(\"Frigatebird\", \"Ontario\").\n.output Answer\n\n"]}
{"id": 543, "answer": true, "completion": ".decl Is_visible_from(Object_A:symbol, Object_B:symbol)\nIs_visible_from(\"Statue of Freedom\", \"Statue of Liberty\").\n.decl Answer()\nAnswer() :- Is_visible_from(\"Statue of Freedom\", \"Statue of Liberty\").\n.output Answer\n\n", "completions": [".decl Is_visible_from(Object_A:symbol, Object_B:symbol)\nIs_visible_from(\"Statue of Freedom\", \"Statue of Liberty\").\n.decl Answer()\nAnswer() :- Is_visible_from(\"Statue of Freedom\", \"Statue of Liberty\").\n.output Answer\n\n"]}
{"id": 544, "answer": false, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Snickers\", 280).\n.decl Answer()\nAnswer() :- Has_calories(\"Snickers\", calories), calories < 100.\n.output Answer\n\n", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Snickers\", 280).\n.decl Answer()\nAnswer() :- Has_calories(\"Snickers\", calories), calories < 100.\n.output Answer\n\n"]}
{"id": 545, "answer": true, "completion": ".decl Has_n_bones(Object:symbol, N_bones:float)\nHas_n_bones(\"skull\", 1).\n.decl Answer()\nAnswer() :- Has_n_bones(\"skull\", 1).\n.output Answer\n\n", "completions": [".decl Has_n_bones(Object:symbol, N_bones:float)\nHas_n_bones(\"skull\", 1).\n.decl Answer()\nAnswer() :- Has_n_bones(\"skull\", 1).\n.output Answer\n\n"]}
{"id": 546, "answer": false, "completion": ".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"Jack Dempsey\", 1895).\nHas_birth_year(\"Conor McGregor\", 1988).\n.decl Has_death_year(Person:symbol, Death_year:float)\nHas_death_year(\"Jack Dempsey\", 1983).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Conor McGregor's fights\", 2015).\nHappens_in_year(\"Conor McGregor's fights\", 2016).\nHappens_in_year(\"Conor McGregor's fights\", 2017).\n.decl Answer()\nAnswer() :- Has_birth_year(\"Jack Dempsey\", birth_year), Has_death_year(\"Jack Dempsey\", death_year), Happens_in_year(\"Conor McGregor's fights\", year), birth_year <= year, year <= death_year.\n.output Answer\n\n", "completions": [".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"Jack Dempsey\", 1895).\nHas_birth_year(\"Conor McGregor\", 1988).\n.decl Has_death_year(Person:symbol, Death_year:float)\nHas_death_year(\"Jack Dempsey\", 1983).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Conor McGregor's fights\", 2015).\nHappens_in_year(\"Conor McGregor's fights\", 2016).\nHappens_in_year(\"Conor McGregor's fights\", 2017).\n.decl Answer()\nAnswer() :- Has_birth_year(\"Jack Dempsey\", birth_year), Has_death_year(\"Jack Dempsey\", death_year), Happens_in_year(\"Conor McGregor's fights\", year), birth_year <= year, year <= death_year.\n.output Answer\n\n"]}
{"id": 547, "answer": true, "completion": ".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"Rurouni Kenshin\", \"Japan\").\nIs_from(\"lead character in Nobunaga's Ambition\", \"Japan\").\n.decl Answer()\nAnswer() :- Is_from(\"Rurouni Kenshin\", country), Is_from(\"lead character in Nobunaga's Ambition\", country).\n.output Answer\n\n", "completions": [".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"Rurouni Kenshin\", \"Japan\").\nIs_from(\"lead character in Nobunaga's Ambition\", \"Japan\").\n.decl Answer()\nAnswer() :- Is_from(\"Rurouni Kenshin\", country), Is_from(\"lead character in Nobunaga's Ambition\", country).\n.output Answer\n\n"]}
{"id": 548, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Darth Vader\", 2.02).\nHas_height(\"Bill Walton\", 2.13).\n.decl Has_vertical_leap(Person:symbol, Vertical_leap:float)\nHas_vertical_leap(\"Darth Vader\", 0.5).\nHas_vertical_leap(\"Bill Walton\", 0.76).\n.decl Answer()\nAnswer() :- Has_height(\"Darth Vader\", height1), Has_height(\"Bill Walton\", height2), Has_vertical_leap(\"Darth Vader\", vertical_leap1), Has_vertical_leap(\"Bill Walton\", vertical_leap2), height1 + vertical_leap1 > height2 + vertical_leap2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Darth Vader\", 2.02).\nHas_height(\"Bill Walton\", 2.13).\n.decl Has_vertical_leap(Person:symbol, Vertical_leap:float)\nHas_vertical_leap(\"Darth Vader\", 0.5).\nHas_vertical_leap(\"Bill Walton\", 0.76).\n.decl Answer()\nAnswer() :- Has_height(\"Darth Vader\", height1), Has_height(\"Bill Walton\", height2), Has_vertical_leap(\"Darth Vader\", vertical_leap1), Has_vertical_leap(\"Bill Walton\", vertical_leap2), height1 + vertical_leap1 > height2 + vertical_leap2.\n.output Answer\n\n"]}
{"id": 549, "answer": true, "completion": ".decl Is_used_to(Thing_A:symbol, Thing_B:symbol)\nIs_used_to(\"popular science\", \"peer review papers\").\n.decl Answer()\nAnswer() :- Is_used_to(\"popular science\", \"peer review papers\").\n.output Answer\n\n", "completions": [".decl Is_used_to(Thing_A:symbol, Thing_B:symbol)\nIs_used_to(\"popular science\", \"peer review papers\").\n.decl Answer()\nAnswer() :- Is_used_to(\"popular science\", \"peer review papers\").\n.output Answer\n\n"]}
{"id": 550, "answer": false, "completion": ".decl Is_linked_to(Thing_A:symbol, Thing_B:symbol)\nIs_linked_to(\"Europa\", \"Jupiter\").\nIs_linked_to(\"Jupiter\", \"solar system\").\nIs_linked_to(\"solar system\", \"galaxy\").\nIs_linked_to(\"galaxy\", \"universe\").\nIs_linked_to(\"Viennese waltzes\", \"Vienna\").\nIs_linked_to(\"Vienna\", \"Austria\").\nIs_linked_to(\"Austria\", \"Europe\").\nIs_linked_to(\"Europe\", \"Earth\").\nIs_linked_to(\"Earth\", \"solar system\").\n.decl Answer()\nAnswer() :- Is_linked_to(\"Europa\", thing1), Is_linked_to(\"Viennese waltzes\", thing2), Is_linked_to(thing1, thing2).\n.output Answer\n\n", "completions": [".decl Is_linked_to(Thing_A:symbol, Thing_B:symbol)\nIs_linked_to(\"Europa\", \"Jupiter\").\nIs_linked_to(\"Jupiter\", \"solar system\").\nIs_linked_to(\"solar system\", \"galaxy\").\nIs_linked_to(\"galaxy\", \"universe\").\nIs_linked_to(\"Viennese waltzes\", \"Vienna\").\nIs_linked_to(\"Vienna\", \"Austria\").\nIs_linked_to(\"Austria\", \"Europe\").\nIs_linked_to(\"Europe\", \"Earth\").\nIs_linked_to(\"Earth\", \"solar system\").\n.decl Answer()\nAnswer() :- Is_linked_to(\"Europa\", thing1), Is_linked_to(\"Viennese waltzes\", thing2), Is_linked_to(thing1, thing2).\n.output Answer\n\n"]}
{"id": 551, "answer": true, "completion": ".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Ariel\", \"red\").\nHas_hair_color(\"Belle\", \"brown\").\nHas_hair_color(\"Cinderella\", \"blonde\").\nHas_hair_color(\"Jasmine\", \"black\").\nHas_hair_color(\"Pocahontas\", \"black\").\nHas_hair_color(\"Rapunzel\", \"golden\").\nHas_hair_color(\"Snow White\", \"black\").\nHas_hair_color(\"Tiana\", \"black\").\n.decl On_Broadway(Person:symbol)\nOn_Broadway(\"Ariel\").\nOn_Broadway(\"Belle\").\nOn_Broadway(\"Cinderella\").\nOn_Broadway(\"Jasmine\").\nOn_Broadway(\"Pocahontas\").\nOn_Broadway(\"Rapunzel\").\nOn_Broadway(\"Snow White\").\nOn_Broadway(\"Tiana\").\n.decl Answer()\nAnswer() :- Has_hair_color(person, \"red\"), On_Broadway(person).\n.output Answer\n\n", "completions": [".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Ariel\", \"red\").\nHas_hair_color(\"Belle\", \"brown\").\nHas_hair_color(\"Cinderella\", \"blonde\").\nHas_hair_color(\"Jasmine\", \"black\").\nHas_hair_color(\"Pocahontas\", \"black\").\nHas_hair_color(\"Rapunzel\", \"golden\").\nHas_hair_color(\"Snow White\", \"black\").\nHas_hair_color(\"Tiana\", \"black\").\n.decl On_Broadway(Person:symbol)\nOn_Broadway(\"Ariel\").\nOn_Broadway(\"Belle\").\nOn_Broadway(\"Cinderella\").\nOn_Broadway(\"Jasmine\").\nOn_Broadway(\"Pocahontas\").\nOn_Broadway(\"Rapunzel\").\nOn_Broadway(\"Snow White\").\nOn_Broadway(\"Tiana\").\n.decl Answer()\nAnswer() :- Has_hair_color(person, \"red\"), On_Broadway(person).\n.output Answer\n\n"]}
{"id": 552, "answer": true, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"2008 Summer Olympics women\", \"female\").\nHas_gender(\"hookup athlete\", \"male\").\n.decl Answer()\nAnswer() :- Has_gender(\"2008 Summer Olympics women\", gender1), Has_gender(\"hookup athlete\", gender2), gender1 != gender2.\n.output Answer\n\n", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"2008 Summer Olympics women\", \"female\").\nHas_gender(\"hookup athlete\", \"male\").\n.decl Answer()\nAnswer() :- Has_gender(\"2008 Summer Olympics women\", gender1), Has_gender(\"hookup athlete\", gender2), gender1 != gender2.\n.output Answer\n\n"]}
{"id": 553, "answer": true, "completion": ".decl Contributes_to(Thing:symbol, Event:symbol)\nContributes_to(\"Eiffel Tower\", \"World War I\").\n.decl Answer()\nAnswer() :- Contributes_to(\"Eiffel Tower\", \"World War I\").\n.output Answer\n\n", "completions": [".decl Contributes_to(Thing:symbol, Event:symbol)\nContributes_to(\"Eiffel Tower\", \"World War I\").\n.decl Answer()\nAnswer() :- Contributes_to(\"Eiffel Tower\", \"World War I\").\n.output Answer\n\n"]}
{"id": 554, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Curiosity\", 900).\nHas_mass(\"cat\", 4).\n.decl Answer()\nAnswer() :- Has_mass(\"Curiosity\", mass1), Has_mass(\"cat\", mass2), mass1 > mass2.\n.output Answer\n\n", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Curiosity\", 900).\nHas_mass(\"cat\", 4).\n.decl Answer()\nAnswer() :- Has_mass(\"Curiosity\", mass1), Has_mass(\"cat\", mass2), mass1 > mass2.\n.output Answer\n\n"]}
{"id": 555, "answer": true, "completion": ".decl Enhances_flavor(Food_A:symbol, Food_B:symbol)\nEnhances_flavor(\"lemon\", \"milk\").\n.decl Answer()\nAnswer() :- Enhances_flavor(\"lemon\", \"milk\").\n.output Answer\n\n", "completions": [".decl Enhances_flavor(Food_A:symbol, Food_B:symbol)\nEnhances_flavor(\"lemon\", \"milk\").\n.decl Answer()\nAnswer() :- Enhances_flavor(\"lemon\", \"milk\").\n.output Answer\n\n"]}
{"id": 556, "answer": false, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Oprah Winfrey\", \"Tennessee State University\").\n.decl Is_Ivy_League(University:symbol)\nIs_Ivy_League(\"Brown University\").\nIs_Ivy_League(\"Columbia University\").\nIs_Ivy_League(\"Cornell University\").\nIs_Ivy_League(\"Dartmouth College\").\nIs_Ivy_League(\"Harvard University\").\nIs_Ivy_League(\"Princeton University\").\nIs_Ivy_League(\"University of Pennsylvania\").\nIs_Ivy_League(\"Yale University\").\n.decl Answer()\nAnswer() :- Graduates(\"Oprah Winfrey\", university), Is_Ivy_League(university).\n.output Answer\n\n", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Oprah Winfrey\", \"Tennessee State University\").\n.decl Is_Ivy_League(University:symbol)\nIs_Ivy_League(\"Brown University\").\nIs_Ivy_League(\"Columbia University\").\nIs_Ivy_League(\"Cornell University\").\nIs_Ivy_League(\"Dartmouth College\").\nIs_Ivy_League(\"Harvard University\").\nIs_Ivy_League(\"Princeton University\").\nIs_Ivy_League(\"University of Pennsylvania\").\nIs_Ivy_League(\"Yale University\").\n.decl Answer()\nAnswer() :- Graduates(\"Oprah Winfrey\", university), Is_Ivy_League(university).\n.output Answer\n\n"]}
{"id": 557, "answer": false, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"unanimously elected president's birthday\", \"February 22\").\nHappens_on_day(\"unanimously elected president's birthday\", \"July 4\").\nHappens_on_day(\"unanimously elected president's birthday\", \"September 17\").\nHappens_on_day(\"unanimously elected president's birthday\", \"October 31\").\nHappens_on_day(\"unanimously elected president's birthday\", \"December 25\").\nHappens_on_day(\"unanimously elected president's birthday\", \"December 26\").\nHappens_on_day(\"unanimously elected president's birthday\", \"December 31\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 1\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 2\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 3\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 4\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 5\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 6\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 7\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 8\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 9\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 10\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 11\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 12\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 13\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 14\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 15\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 16\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 17\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 18\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 19\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 20\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 21\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 22\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 23\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 24\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 25\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 26\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 27\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 28\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 29\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 30\").\nHapp", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"unanimously elected president's birthday\", \"February 22\").\nHappens_on_day(\"unanimously elected president's birthday\", \"July 4\").\nHappens_on_day(\"unanimously elected president's birthday\", \"September 17\").\nHappens_on_day(\"unanimously elected president's birthday\", \"October 31\").\nHappens_on_day(\"unanimously elected president's birthday\", \"December 25\").\nHappens_on_day(\"unanimously elected president's birthday\", \"December 26\").\nHappens_on_day(\"unanimously elected president's birthday\", \"December 31\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 1\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 2\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 3\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 4\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 5\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 6\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 7\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 8\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 9\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 10\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 11\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 12\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 13\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 14\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 15\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 16\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 17\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 18\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 19\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 20\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 21\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 22\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 23\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 24\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 25\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 26\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 27\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 28\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 29\").\nHappens_on_day(\"unanimously elected president's birthday\", \"January 30\").\nHapp"]}
{"id": 558, "answer": false, "completion": ".decl Requires(Recipe:symbol, Tool:symbol)\nRequires(\"Paprika\", \"dehydrator\").\n.decl Answer()\nAnswer() :- !Requires(\"Paprika\", \"dehydrator\").\n.output Answer\n\n", "completions": [".decl Requires(Recipe:symbol, Tool:symbol)\nRequires(\"Paprika\", \"dehydrator\").\n.decl Answer()\nAnswer() :- !Requires(\"Paprika\", \"dehydrator\").\n.output Answer\n\n"]}
{"id": 559, "answer": false, "completion": ".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"Phillippine-American War\", 3).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"craving SPAM\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"craving SPAM\", n_years1), Lasts_n_years(\"Phillippine-American War\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n", "completions": [".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"Phillippine-American War\", 3).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"craving SPAM\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"craving SPAM\", n_years1), Lasts_n_years(\"Phillippine-American War\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n"]}
{"id": 560, "answer": true, "completion": ".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"United States Capitol\", \"White House\").\n.decl Answer()\nAnswer() :- Is_near(\"United States Capitol\", \"White House\").\n.output Answer\n\n", "completions": [".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"United States Capitol\", \"White House\").\n.decl Answer()\nAnswer() :- Is_near(\"United States Capitol\", \"White House\").\n.output Answer\n\n"]}
{"id": 561, "answer": true, "completion": ".decl Has_image(Person:symbol, Image:symbol)\nHas_image(\"Godzilla\", \"monster\").\n.decl Is_likely(Event:symbol, Time:symbol)\nIs_likely(\"lawsuit\", \"2050\").\n.decl Answer()\nAnswer() :- Has_image(\"Godzilla\", \"monster\"), Is_likely(\"lawsuit\", \"2050\").\n.output Answer\n\n", "completions": [".decl Has_image(Person:symbol, Image:symbol)\nHas_image(\"Godzilla\", \"monster\").\n.decl Is_likely(Event:symbol, Time:symbol)\nIs_likely(\"lawsuit\", \"2050\").\n.decl Answer()\nAnswer() :- Has_image(\"Godzilla\", \"monster\"), Is_likely(\"lawsuit\", \"2050\").\n.output Answer\n\n"]}
{"id": 562, "answer": true, "completion": ".decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Is_confused(Person:symbol, Topic:symbol)\nIs_confused(\"actuary\", \"prime numbers\").\n.decl Answer()\nAnswer() :- Is_confused(\"actuary\", \"prime numbers\"), Is_prime(number).\n.output Answer\n\n", "completions": [".decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Is_confused(Person:symbol, Topic:symbol)\nIs_confused(\"actuary\", \"prime numbers\").\n.decl Answer()\nAnswer() :- Is_confused(\"actuary\", \"prime numbers\"), Is_prime(number).\n.output Answer\n\n"]}
{"id": 563, "answer": true, "completion": ".decl Has_emissions(Object:symbol, Emissions:float)\nHas_emissions(\"cow methane\", 0.1).\nHas_emissions(\"cars\", 0.2).\n.decl Answer()\nAnswer() :- Has_emissions(\"cow methane\", emissions1), Has_emissions(\"cars\", emissions2), emissions1 < emissions2.\n.output Answer\n\n", "completions": [".decl Has_emissions(Object:symbol, Emissions:float)\nHas_emissions(\"cow methane\", 0.1).\nHas_emissions(\"cars\", 0.2).\n.decl Answer()\nAnswer() :- Has_emissions(\"cow methane\", emissions1), Has_emissions(\"cars\", emissions2), emissions1 < emissions2.\n.output Answer\n\n"]}
{"id": 564, "answer": true, "completion": ".decl Has_written_song(Person:symbol, Song:symbol)\nHas_written_song(\"Justin Timberlake\", \"Cry Me a River\").\n.decl Is_about(Song:symbol, Person:symbol)\nIs_about(\"Cry Me a River\", \"Britney Spears\").\n.decl Answer()\nAnswer() :- Has_written_song(\"Justin Timberlake\", song), Is_about(song, \"Britney Spears\").\n.output Answer\n\n", "completions": [".decl Has_written_song(Person:symbol, Song:symbol)\nHas_written_song(\"Justin Timberlake\", \"Cry Me a River\").\n.decl Is_about(Song:symbol, Person:symbol)\nIs_about(\"Cry Me a River\", \"Britney Spears\").\n.decl Answer()\nAnswer() :- Has_written_song(\"Justin Timberlake\", song), Is_about(song, \"Britney Spears\").\n.output Answer\n\n"]}
{"id": 565, "answer": true, "completion": ".decl Can_chase_down(Animal_A:symbol, Animal_B:symbol)\nCan_chase_down(\"Clouded leopard\", \"Pronghorn antelope\").\n.decl Answer()\nAnswer() :- Can_chase_down(\"Clouded leopard\", \"Pronghorn antelope\").\n.output Answer\n\n", "completions": [".decl Can_chase_down(Animal_A:symbol, Animal_B:symbol)\nCan_chase_down(\"Clouded leopard\", \"Pronghorn antelope\").\n.decl Answer()\nAnswer() :- Can_chase_down(\"Clouded leopard\", \"Pronghorn antelope\").\n.output Answer\n\n"]}
{"id": 566, "answer": true, "completion": ".decl Has_n_friends(Person:symbol, N_friends:float)\nHas_n_friends(\"Ronald Reagan\", 10).\n.decl Has_n_lolcats(Person:symbol, N_lolcats:float)\nHas_n_lolcats(\"Ronald Reagan\", 0).\n.decl Answer()\nAnswer() :- Has_n_friends(\"Ronald Reagan\", n_friends), Has_n_lolcats(\"Ronald Reagan\", n_lolcats), n_friends > n_lolcats.\n.output Answer\n\n", "completions": [".decl Has_n_friends(Person:symbol, N_friends:float)\nHas_n_friends(\"Ronald Reagan\", 10).\n.decl Has_n_lolcats(Person:symbol, N_lolcats:float)\nHas_n_lolcats(\"Ronald Reagan\", 0).\n.decl Answer()\nAnswer() :- Has_n_friends(\"Ronald Reagan\", n_friends), Has_n_lolcats(\"Ronald Reagan\", n_lolcats), n_friends > n_lolcats.\n.output Answer\n\n"]}
{"id": 567, "answer": true, "completion": ".decl Requires_ID(Pharmacy:symbol, Medication:symbol)\nRequires_ID(\"CVS\", \"Advil\").\nRequires_ID(\"CVS\", \"Tylenol\").\nRequires_ID(\"Walgreens\", \"Advil\").\nRequires_ID(\"Walgreens\", \"Tylenol\").\n.decl Answer()\nAnswer() :- Requires_ID(pharmacy, medication).\n.output Answer\n\n", "completions": [".decl Requires_ID(Pharmacy:symbol, Medication:symbol)\nRequires_ID(\"CVS\", \"Advil\").\nRequires_ID(\"CVS\", \"Tylenol\").\nRequires_ID(\"Walgreens\", \"Advil\").\nRequires_ID(\"Walgreens\", \"Tylenol\").\n.decl Answer()\nAnswer() :- Requires_ID(pharmacy, medication).\n.output Answer\n\n"]}
{"id": 568, "answer": true, "completion": ".decl Has_n_ships(Navy:symbol, N_ships:float)\nHas_n_ships(\"Republic of Korea Navy\", 150).\nHas_n_ships(\"Eritrea navy\", 1).\n.decl Answer()\nAnswer() :- Has_n_ships(\"Republic of Korea Navy\", n_ships1), Has_n_ships(\"Eritrea navy\", n_ships2), n_ships1 > n_ships2.\n.output Answer\n\n\n", "completions": [".decl Has_n_ships(Navy:symbol, N_ships:float)\nHas_n_ships(\"Republic of Korea Navy\", 150).\nHas_n_ships(\"Eritrea navy\", 1).\n.decl Answer()\nAnswer() :- Has_n_ships(\"Republic of Korea Navy\", n_ships1), Has_n_ships(\"Eritrea navy\", n_ships2), n_ships1 > n_ships2.\n.output Answer\n\n\n"]}
{"id": 569, "answer": true, "completion": ".decl Inspired_by(Book:symbol, Book2:symbol)\nInspired_by(\"The Great Gatsby\", \"1984\").\n.decl Answer()\nAnswer() :- Inspired_by(\"The Great Gatsby\", \"1984\").\n.output Answer\n\n", "completions": [".decl Inspired_by(Book:symbol, Book2:symbol)\nInspired_by(\"The Great Gatsby\", \"1984\").\n.decl Answer()\nAnswer() :- Inspired_by(\"The Great Gatsby\", \"1984\").\n.output Answer\n\n"]}
{"id": 570, "answer": false, "completion": ".decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Fantastic Four\", \"Dr. Doom\").\nHas_member(\"Fantastic Four\", \"Mole Man\").\nHas_member(\"Fantastic Four\", \"Galactus\").\nHas_member(\"Fantastic Four\", \"Annihilus\").\n.decl Answer()\nAnswer() :- Has_member(\"Fantastic Four\", \"MF Doom\").\n.output Answer\n\n", "completions": [".decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Fantastic Four\", \"Dr. Doom\").\nHas_member(\"Fantastic Four\", \"Mole Man\").\nHas_member(\"Fantastic Four\", \"Galactus\").\nHas_member(\"Fantastic Four\", \"Annihilus\").\n.decl Answer()\nAnswer() :- Has_member(\"Fantastic Four\", \"MF Doom\").\n.output Answer\n\n"]}
{"id": 571, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Michael\", \"Michael\").\n.decl Has_popularity(Name:symbol, Popularity:float)\nHas_popularity(\"Michael\", 0.1).\n.decl Answer()\nAnswer() :- Has_name(person, \"Michael\"), Has_popularity(\"Michael\", popularity), popularity < 0.5.\n.output Answer\n\n", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Michael\", \"Michael\").\n.decl Has_popularity(Name:symbol, Popularity:float)\nHas_popularity(\"Michael\", 0.1).\n.decl Answer()\nAnswer() :- Has_name(person, \"Michael\"), Has_popularity(\"Michael\", popularity), popularity < 0.5.\n.output Answer\n\n"]}
{"id": 572, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Noah's Ark\", 300).\nHas_length(\"Lincoln Tunnel\", 1.5).\n.decl Answer()\nAnswer() :- Has_length(\"Noah's Ark\", length1), Has_length(\"Lincoln Tunnel\", length2), length1 > length2.\n.output Answer\n\n\n", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Noah's Ark\", 300).\nHas_length(\"Lincoln Tunnel\", 1.5).\n.decl Answer()\nAnswer() :- Has_length(\"Noah's Ark\", length1), Has_length(\"Lincoln Tunnel\", length2), length1 > length2.\n.output Answer\n\n\n"]}
{"id": 573, "answer": true, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"hand model\", \"healthy skin\").\nHas_condition(\"person with dermatitis\", \"dermatitis\").\n.decl Answer()\nAnswer() :- Has_condition(\"hand model\", condition1), Has_condition(\"person with dermatitis\", condition2), condition1 != condition2.\n.output Answer\n\n", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"hand model\", \"healthy skin\").\nHas_condition(\"person with dermatitis\", \"dermatitis\").\n.decl Answer()\nAnswer() :- Has_condition(\"hand model\", condition1), Has_condition(\"person with dermatitis\", condition2), condition1 != condition2.\n.output Answer\n\n"]}
{"id": 574, "answer": false, "completion": ".decl Is_a_pet(Animal:symbol)\nIs_a_pet(\"dog\").\n.decl Needs_heartworm_prevention(Animal:symbol)\nNeeds_heartworm_prevention(\"dog\").\n.decl Answer()\nAnswer() :- Is_a_pet(\"Goofy\"), Needs_heartworm_prevention(\"Goofy\").\n.output Answer\n\n", "completions": [".decl Is_a_pet(Animal:symbol)\nIs_a_pet(\"dog\").\n.decl Needs_heartworm_prevention(Animal:symbol)\nNeeds_heartworm_prevention(\"dog\").\n.decl Answer()\nAnswer() :- Is_a_pet(\"Goofy\"), Needs_heartworm_prevention(\"Goofy\").\n.output Answer\n\n"]}
{"id": 575, "answer": true, "completion": ".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"nickel\", 28).\nHas_atomic_number(\"mercury\", 80).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"nickel\", atomic_number1), Has_atomic_number(\"mercury\", atomic_number2), atomic_number1 < atomic_number2.\n.output Answer\n\n", "completions": [".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"nickel\", 28).\nHas_atomic_number(\"mercury\", 80).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"nickel\", atomic_number1), Has_atomic_number(\"mercury\", atomic_number2), atomic_number1 < atomic_number2.\n.output Answer\n\n"]}
{"id": 576, "answer": true, "completion": ".decl Celebrates_anniversary(Person:symbol, Anniversary:symbol)\nCelebrates_anniversary(\"Cynthia Powell\", \"silver\").\nCelebrates_anniversary(\"John Lennon\", \"silver\").\n.decl Answer()\nAnswer() :- Celebrates_anniversary(\"Cynthia Powell\", \"silver\"), Celebrates_anniversary(\"John Lennon\", \"silver\").\n.output Answer\n\n", "completions": [".decl Celebrates_anniversary(Person:symbol, Anniversary:symbol)\nCelebrates_anniversary(\"Cynthia Powell\", \"silver\").\nCelebrates_anniversary(\"John Lennon\", \"silver\").\n.decl Answer()\nAnswer() :- Celebrates_anniversary(\"Cynthia Powell\", \"silver\"), Celebrates_anniversary(\"John Lennon\", \"silver\").\n.output Answer\n\n"]}
{"id": 577, "answer": false, "completion": ".decl Has_wealth(Person:symbol, Wealth:symbol)\nHas_wealth(\"Christopher Reeve\", \"rich\").\n.decl Answer()\nAnswer() :- Has_wealth(\"Christopher Reeve\", \"poor\").\n.output Answer\n\n", "completions": [".decl Has_wealth(Person:symbol, Wealth:symbol)\nHas_wealth(\"Christopher Reeve\", \"rich\").\n.decl Answer()\nAnswer() :- Has_wealth(\"Christopher Reeve\", \"poor\").\n.output Answer\n\n"]}
{"id": 578, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Operation Barbarossa\", \"1941\").\nHappens_in_time(\"The Crusades\", \"1095\").\nHappens_in_time(\"The Crusades\", \"1291\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Operation Barbarossa\", time1), Happens_in_time(\"The Crusades\", time2), time1 = time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Operation Barbarossa\", \"1941\").\nHappens_in_time(\"The Crusades\", \"1095\").\nHappens_in_time(\"The Crusades\", \"1291\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Operation Barbarossa\", time1), Happens_in_time(\"The Crusades\", time2), time1 = time2.\n.output Answer\n\n"]}
{"id": 579, "answer": true, "completion": ".decl Understands(Person:symbol, Subject:symbol)\nUnderstands(\"carpenter\", \"geometry\").\n.decl Answer()\nAnswer() :- Understands(\"carpenter\", \"geometry\").\n.output Answer\n\n", "completions": [".decl Understands(Person:symbol, Subject:symbol)\nUnderstands(\"carpenter\", \"geometry\").\n.decl Answer()\nAnswer() :- Understands(\"carpenter\", \"geometry\").\n.output Answer\n\n"]}
{"id": 580, "answer": true, "completion": ".decl Lasts_n_seconds(Event:symbol, N_seconds:float)\nLasts_n_seconds(\"The Great Gatsby\", 60).\nLasts_n_seconds(\"The Raven\", 60).\n.decl Happens_every_n_seconds(Event:symbol, N_seconds:float)\nHappens_every_n_seconds(\"speed reader\", 30).\n.decl Answer()\nAnswer() :- Happens_every_n_seconds(\"speed reader\", n_seconds1), Lasts_n_seconds(\"The Great Gatsby\", n_seconds2), Lasts_n_seconds(\"The Raven\", n_seconds3), n_seconds1 <= n_seconds2, n_seconds1 <= n_seconds3.\n.output Answer\n\n", "completions": [".decl Lasts_n_seconds(Event:symbol, N_seconds:float)\nLasts_n_seconds(\"The Great Gatsby\", 60).\nLasts_n_seconds(\"The Raven\", 60).\n.decl Happens_every_n_seconds(Event:symbol, N_seconds:float)\nHappens_every_n_seconds(\"speed reader\", 30).\n.decl Answer()\nAnswer() :- Happens_every_n_seconds(\"speed reader\", n_seconds1), Lasts_n_seconds(\"The Great Gatsby\", n_seconds2), Lasts_n_seconds(\"The Raven\", n_seconds3), n_seconds1 <= n_seconds2, n_seconds1 <= n_seconds3.\n.output Answer\n\n"]}
{"id": 581, "answer": true, "completion": ".decl Has_rating(Movie:symbol, Rating:symbol)\nHas_rating(\"The Dark Knight\", \"PG-13\").\n.decl Is_appropriate_for(Movie:symbol, Age_group:symbol)\nIs_appropriate_for(\"The Dark Knight\", \"teenagers\").\n.decl Answer()\nAnswer() :- Has_rating(\"The Dark Knight\", \"PG-13\"), Is_appropriate_for(\"The Dark Knight\", \"teenagers\").\n.output Answer\n\n", "completions": [".decl Has_rating(Movie:symbol, Rating:symbol)\nHas_rating(\"The Dark Knight\", \"PG-13\").\n.decl Is_appropriate_for(Movie:symbol, Age_group:symbol)\nIs_appropriate_for(\"The Dark Knight\", \"teenagers\").\n.decl Answer()\nAnswer() :- Has_rating(\"The Dark Knight\", \"PG-13\"), Is_appropriate_for(\"The Dark Knight\", \"teenagers\").\n.output Answer\n\n"]}
{"id": 582, "answer": true, "completion": ".decl Is_a(Object:symbol, Type:symbol)\nIs_a(\"computer\", \"machine\").\nIs_a(\"Boolean algebra\", \"mathematics\").\n.decl Answer()\nAnswer() :- Is_a(\"computer\", \"machine\"), Is_a(\"Boolean algebra\", \"mathematics\").\n.output Answer\n\n", "completions": [".decl Is_a(Object:symbol, Type:symbol)\nIs_a(\"computer\", \"machine\").\nIs_a(\"Boolean algebra\", \"mathematics\").\n.decl Answer()\nAnswer() :- Is_a(\"computer\", \"machine\"), Is_a(\"Boolean algebra\", \"mathematics\").\n.output Answer\n\n"]}
{"id": 583, "answer": true, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"torso\", \"brain\").\n.decl Answer()\nAnswer() :- Has_part(\"torso\", \"brain\").\n.output Answer\n\n", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"torso\", \"brain\").\n.decl Answer()\nAnswer() :- Has_part(\"torso\", \"brain\").\n.output Answer\n\n"]}
{"id": 584, "answer": true, "completion": ".decl Part_of(Object:symbol, Event:symbol)\nPart_of(\"donkey\", \"Christmas celebrations\").\n.decl Answer()\nAnswer() :- Part_of(\"donkey\", \"Christmas celebrations\").\n.output Answer\n\n", "completions": [".decl Part_of(Object:symbol, Event:symbol)\nPart_of(\"donkey\", \"Christmas celebrations\").\n.decl Answer()\nAnswer() :- Part_of(\"donkey\", \"Christmas celebrations\").\n.output Answer\n\n"]}
{"id": 585, "answer": true, "completion": ".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"work on The Dark Knight\", \"death of Heath Ledger\").\n.decl Answer()\nAnswer() :- Causes(event, \"death of Heath Ledger\").\n.output Answer\n\n", "completions": [".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"work on The Dark Knight\", \"death of Heath Ledger\").\n.decl Answer()\nAnswer() :- Causes(event, \"death of Heath Ledger\").\n.output Answer\n\n"]}
{"id": 586, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Polar Bears\", \"Ice Age\").\nHappens_in_time(\"Ancient Greece\", \"BC\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Polar Bears\", time1), Happens_in_time(\"Ancient Greece\", time2), time1 != time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Polar Bears\", \"Ice Age\").\nHappens_in_time(\"Ancient Greece\", \"BC\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Polar Bears\", time1), Happens_in_time(\"Ancient Greece\", time2), time1 != time2.\n.output Answer\n\n"]}
{"id": 587, "answer": true, "completion": ".decl Exists_in_time(Object:symbol, Time:symbol)\nExists_in_time(\"Moon Jae-in's residence\", \"2017\").\nExists_in_time(\"World Trade Center\", \"1973\").\n.decl Answer()\nAnswer() :- Exists_in_time(\"Moon Jae-in's residence\", time1), Exists_in_time(\"World Trade Center\", time2), time1 > time2.\n.output Answer\n\n", "completions": [".decl Exists_in_time(Object:symbol, Time:symbol)\nExists_in_time(\"Moon Jae-in's residence\", \"2017\").\nExists_in_time(\"World Trade Center\", \"1973\").\n.decl Answer()\nAnswer() :- Exists_in_time(\"Moon Jae-in's residence\", time1), Exists_in_time(\"World Trade Center\", time2), time1 > time2.\n.output Answer\n\n"]}
{"id": 588, "answer": false, "completion": ".decl Is_used_in(Object:symbol, Environment:symbol)\nIs_used_in(\"paratroopers\", \"air\").\n.decl Answer()\nAnswer() :- Is_used_in(\"paratroopers\", \"vacuum\").\n.output Answer\n\n", "completions": [".decl Is_used_in(Object:symbol, Environment:symbol)\nIs_used_in(\"paratroopers\", \"air\").\n.decl Answer()\nAnswer() :- Is_used_in(\"paratroopers\", \"vacuum\").\n.output Answer\n\n"]}
{"id": 589, "answer": false, "completion": ".decl Has_n_seats(Court:symbol, N_seats:float)\nHas_n_seats(\"highest US Court\", 9).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Prime Minister of the United Kingdom since 1952\", 13).\n.decl Answer()\nAnswer() :- Has_n_seats(\"highest US Court\", n_seats), Has_n_members(\"Prime Minister of the United Kingdom since 1952\", n_members), n_seats >= n_members.\n.output Answer\n\n", "completions": [".decl Has_n_seats(Court:symbol, N_seats:float)\nHas_n_seats(\"highest US Court\", 9).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Prime Minister of the United Kingdom since 1952\", 13).\n.decl Answer()\nAnswer() :- Has_n_seats(\"highest US Court\", n_seats), Has_n_members(\"Prime Minister of the United Kingdom since 1952\", n_members), n_seats >= n_members.\n.output Answer\n\n"]}
{"id": 590, "answer": true, "completion": ".decl Is_leader_of(Person:symbol, Group:symbol)\nIs_leader_of(\"Marshall Applewhite\", \"Heaven's Gate\").\n.decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Marshall Applewhite\", \"I am a prophet\").\n.decl Answer()\nAnswer() :- Is_leader_of(person, \"Heaven's Gate\"), Believes(person, \"I am a prophet\").\n.output Answer\n\n", "completions": [".decl Is_leader_of(Person:symbol, Group:symbol)\nIs_leader_of(\"Marshall Applewhite\", \"Heaven's Gate\").\n.decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Marshall Applewhite\", \"I am a prophet\").\n.decl Answer()\nAnswer() :- Is_leader_of(person, \"Heaven's Gate\"), Believes(person, \"I am a prophet\").\n.output Answer\n\n"]}
{"id": 591, "answer": true, "completion": ".decl Has_official_language(Region:symbol, Language:symbol)\nHas_official_language(\"Angola\", \"Portuguese\").\nHas_official_language(\"Mozambique\", \"Portuguese\").\nHas_official_language(\"Guinea-Bissau\", \"Portuguese\").\n.decl Participated_in(Region:symbol, War:symbol)\nParticipated_in(\"Angola\", \"Portuguese Colonial War\").\nParticipated_in(\"Mozambique\", \"Portuguese Colonial War\").\nParticipated_in(\"Guinea-Bissau\", \"Portuguese Colonial War\").\n.decl Answer()\nAnswer() :- Participated_in(region1, \"Portuguese Colonial War\"), Participated_in(region2, \"Portuguese Colonial War\"), Has_official_language(region1, language), Has_official_language(region2, language), region1 != region2.\n.output Answer\n\n", "completions": [".decl Has_official_language(Region:symbol, Language:symbol)\nHas_official_language(\"Angola\", \"Portuguese\").\nHas_official_language(\"Mozambique\", \"Portuguese\").\nHas_official_language(\"Guinea-Bissau\", \"Portuguese\").\n.decl Participated_in(Region:symbol, War:symbol)\nParticipated_in(\"Angola\", \"Portuguese Colonial War\").\nParticipated_in(\"Mozambique\", \"Portuguese Colonial War\").\nParticipated_in(\"Guinea-Bissau\", \"Portuguese Colonial War\").\n.decl Answer()\nAnswer() :- Participated_in(region1, \"Portuguese Colonial War\"), Participated_in(region2, \"Portuguese Colonial War\"), Has_official_language(region1, language), Has_official_language(region2, language), region1 != region2.\n.output Answer\n\n"]}
{"id": 592, "answer": true, "completion": ".decl Has_channel(TV_show:symbol, Channel:symbol)\nHas_channel(\"TNT\", \"cable\").\n.decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"railroad engineer\", \"railroad\").\n.decl Answer()\nAnswer() :- Has_channel(\"TNT\", \"cable\"), Has_job(\"railroad engineer\", \"railroad\").\n.output Answer\n\n", "completions": [".decl Has_channel(TV_show:symbol, Channel:symbol)\nHas_channel(\"TNT\", \"cable\").\n.decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"railroad engineer\", \"railroad\").\n.decl Answer()\nAnswer() :- Has_channel(\"TNT\", \"cable\"), Has_job(\"railroad engineer\", \"railroad\").\n.output Answer\n\n"]}
{"id": 593, "answer": true, "completion": ".decl Is_part_of(Organization_A:symbol, Organization_B:symbol)\nIs_part_of(\"CIA\", \"Department of Defense\").\n.decl Answer()\nAnswer() :- Is_part_of(\"CIA\", \"Department of Defense\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Organization_A:symbol, Organization_B:symbol)\nIs_part_of(\"CIA\", \"Department of Defense\").\n.decl Answer()\nAnswer() :- Is_part_of(\"CIA\", \"Department of Defense\").\n.output Answer\n\n"]}
{"id": 594, "answer": true, "completion": ".decl Has_n_humps(Animal:symbol, N_humps:float)\nHas_n_humps(\"Bactrian Camel\", 2).\nHas_n_humps(\"Dromedary\", 1).\n.decl Answer()\nAnswer() :- Has_n_humps(\"Bactrian Camel\", n_humps1), Has_n_humps(animal, n_humps2), n_humps1 > n_humps2.\n.output Answer\n\n", "completions": [".decl Has_n_humps(Animal:symbol, N_humps:float)\nHas_n_humps(\"Bactrian Camel\", 2).\nHas_n_humps(\"Dromedary\", 1).\n.decl Answer()\nAnswer() :- Has_n_humps(\"Bactrian Camel\", n_humps1), Has_n_humps(animal, n_humps2), n_humps1 > n_humps2.\n.output Answer\n\n"]}
{"id": 595, "answer": true, "completion": ".decl Has_breed(Dog:symbol, Breed:symbol)\nHas_breed(\"German Shepherd\", \"German Shepherd\").\n.decl Has_exam(Student:symbol, Exam:symbol)\nHas_exam(\"German Shepherd\", \"Abitur\").\n.decl Answer()\nAnswer() :- Has_breed(dog, \"German Shepherd\"), Has_exam(dog, \"Abitur\").\n.output Answer\n\n", "completions": [".decl Has_breed(Dog:symbol, Breed:symbol)\nHas_breed(\"German Shepherd\", \"German Shepherd\").\n.decl Has_exam(Student:symbol, Exam:symbol)\nHas_exam(\"German Shepherd\", \"Abitur\").\n.decl Answer()\nAnswer() :- Has_breed(dog, \"German Shepherd\"), Has_exam(dog, \"Abitur\").\n.output Answer\n\n"]}
{"id": 596, "answer": true, "completion": ".decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"John Smith\", \"United States\").\n.decl Has_military_enlistment(Person:symbol, Military_enlistment:symbol)\nHas_military_enlistment(\"John Smith\", \"Confederate States Army\").\n.decl Answer()\nAnswer() :- Has_citizenship(person, \"United States\"), Has_military_enlistment(person, \"Confederate States Army\").\n.output Answer\n\n", "completions": [".decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"John Smith\", \"United States\").\n.decl Has_military_enlistment(Person:symbol, Military_enlistment:symbol)\nHas_military_enlistment(\"John Smith\", \"Confederate States Army\").\n.decl Answer()\nAnswer() :- Has_citizenship(person, \"United States\"), Has_military_enlistment(person, \"Confederate States Army\").\n.output Answer\n\n"]}
{"id": 597, "answer": false, "completion": ".decl Has_format(Series:symbol, Format:symbol)\nHas_format(\"James Bond\", \"movie\").\nHas_format(\"Doctor Who\", \"TV show\").\n.decl Answer()\nAnswer() :- Has_format(\"James Bond\", format1), Has_format(\"Doctor Who\", format2), format1 = format2.\n.output Answer\n\n", "completions": [".decl Has_format(Series:symbol, Format:symbol)\nHas_format(\"James Bond\", \"movie\").\nHas_format(\"Doctor Who\", \"TV show\").\n.decl Answer()\nAnswer() :- Has_format(\"James Bond\", format1), Has_format(\"Doctor Who\", format2), format1 = format2.\n.output Answer\n\n"]}
{"id": 598, "answer": true, "completion": ".decl Happens_after(Event1:symbol, Event2:symbol)\nHappens_after(\"computer gaming\", \"compact discs\").\n.decl Answer()\nAnswer() :- Happens_after(\"computer gaming\", \"compact discs\").\n.output Answer\n\n", "completions": [".decl Happens_after(Event1:symbol, Event2:symbol)\nHappens_after(\"computer gaming\", \"compact discs\").\n.decl Answer()\nAnswer() :- Happens_after(\"computer gaming\", \"compact discs\").\n.output Answer\n\n"]}
{"id": 599, "answer": false, "completion": ".decl Is_native_to(Plant:symbol, Continent:symbol)\nIs_native_to(\"potato\", \"South America\").\n.decl Answer()\nAnswer() :- Is_native_to(\"potato\", \"Europe\").\n.output Answer\n\n", "completions": [".decl Is_native_to(Plant:symbol, Continent:symbol)\nIs_native_to(\"potato\", \"South America\").\n.decl Answer()\nAnswer() :- Is_native_to(\"potato\", \"Europe\").\n.output Answer\n\n"]}
{"id": 600, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.output Answer\n\n"]}
{"id": 601, "answer": false, "completion": ".decl Has_year(Event:symbol, Year:float)\nHas_year(\"George Washington's own speeches\", 1789).\n.decl Has_year(Object:symbol, Year:float)\nHas_year(\"compact disc\", 1980).\n.decl Answer()\nAnswer() :- Has_year(\"George Washington's own speeches\", year1), Has_year(\"compact disc\", year2), year1 < year2.\n.output Answer\n\n", "completions": [".decl Has_year(Event:symbol, Year:float)\nHas_year(\"George Washington's own speeches\", 1789).\n.decl Has_year(Object:symbol, Year:float)\nHas_year(\"compact disc\", 1980).\n.decl Answer()\nAnswer() :- Has_year(\"George Washington's own speeches\", year1), Has_year(\"compact disc\", year2), year1 < year2.\n.output Answer\n\n"]}
{"id": 602, "answer": false, "completion": ".decl Is_harmful(Food:symbol)\nIs_harmful(\"shoe soup\").\n.decl Answer()\nAnswer() :- !Is_harmful(\"shoe soup\").\n.output Answer\n\n", "completions": [".decl Is_harmful(Food:symbol)\nIs_harmful(\"shoe soup\").\n.decl Answer()\nAnswer() :- !Is_harmful(\"shoe soup\").\n.output Answer\n\n"]}
{"id": 603, "answer": true, "completion": ".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Moscow Kremlin\", 27).\nHas_area(\"Disney Land\", 85).\n.decl Answer()\nAnswer() :- Has_area(\"Moscow Kremlin\", area1), Has_area(\"Disney Land\", area2), area1 < area2.\n.output Answer\n\n", "completions": [".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Moscow Kremlin\", 27).\nHas_area(\"Disney Land\", 85).\n.decl Answer()\nAnswer() :- Has_area(\"Moscow Kremlin\", area1), Has_area(\"Disney Land\", area2), area1 < area2.\n.output Answer\n\n"]}
{"id": 604, "answer": true, "completion": ".decl Performed_together(Person_A:symbol, Person_B:symbol)\nPerformed_together(\"Ernest Chataway\", \"Robert Plant\").\n.decl Answer()\nAnswer() :- Performed_together(person, \"Robert Plant\").\n.output Answer\n\n", "completions": [".decl Performed_together(Person_A:symbol, Person_B:symbol)\nPerformed_together(\"Ernest Chataway\", \"Robert Plant\").\n.decl Answer()\nAnswer() :- Performed_together(person, \"Robert Plant\").\n.output Answer\n\n"]}
{"id": 605, "answer": true, "completion": ".decl Likes(Person:symbol, Object:symbol)\nLikes(\"P. G. Wodehouse\", \"internet\").\n.decl Is_child(Person:symbol)\nIs_child(\"P. G. Wodehouse\").\n.decl Answer()\nAnswer() :- Likes(\"P. G. Wodehouse\", \"internet\"), Is_child(\"P. G. Wodehouse\").\n.output Answer\n\n", "completions": [".decl Likes(Person:symbol, Object:symbol)\nLikes(\"P. G. Wodehouse\", \"internet\").\n.decl Is_child(Person:symbol)\nIs_child(\"P. G. Wodehouse\").\n.decl Answer()\nAnswer() :- Likes(\"P. G. Wodehouse\", \"internet\"), Is_child(\"P. G. Wodehouse\").\n.output Answer\n\n"]}
{"id": 606, "answer": false, "completion": ".decl Runs_for(Person:symbol, Position:symbol)\nRuns_for(\"Harvey Milk\", \"San Francisco Board of Supervisors\").\n.decl Answer()\nAnswer() :- Runs_for(\"Harvey Milk\", \"governor\").\n.output Answer\n\n", "completions": [".decl Runs_for(Person:symbol, Position:symbol)\nRuns_for(\"Harvey Milk\", \"San Francisco Board of Supervisors\").\n.decl Answer()\nAnswer() :- Runs_for(\"Harvey Milk\", \"governor\").\n.output Answer\n\n"]}
{"id": 607, "answer": true, "completion": ".decl Is_vegan(Person:symbol)\nIs_vegan(\"vegan\").\n.decl Is_natural(Object:symbol)\nIs_natural(\"natural bongo drum\").\n.decl Answer()\nAnswer() :- Is_vegan(\"vegan\"), Is_natural(\"natural bongo drum\"), !Is_natural(\"synthetic bongo drum\").\n.output Answer\n\n", "completions": [".decl Is_vegan(Person:symbol)\nIs_vegan(\"vegan\").\n.decl Is_natural(Object:symbol)\nIs_natural(\"natural bongo drum\").\n.decl Answer()\nAnswer() :- Is_vegan(\"vegan\"), Is_natural(\"natural bongo drum\"), !Is_natural(\"synthetic bongo drum\").\n.output Answer\n\n"]}
{"id": 608, "answer": false, "completion": ".decl Is_age(Person:symbol, Age:float)\nIs_age(\"Millie Bobby Brown\", 13).\n.decl Is_legal_age(Age:float)\nIs_legal_age(21).\n.decl Answer()\nAnswer() :- Is_age(\"Millie Bobby Brown\", age), Is_legal_age(legal_age), age >= legal_age.\n.output Answer\n\n", "completions": [".decl Is_age(Person:symbol, Age:float)\nIs_age(\"Millie Bobby Brown\", 13).\n.decl Is_legal_age(Age:float)\nIs_legal_age(21).\n.decl Answer()\nAnswer() :- Is_age(\"Millie Bobby Brown\", age), Is_legal_age(legal_age), age >= legal_age.\n.output Answer\n\n"]}
{"id": 609, "answer": true, "completion": ".decl Has_genus(Animal:symbol, Genus:symbol)\nHas_genus(\"gorilla\", \"gorilla\").\nHas_genus(\"human\", \"homo\").\n.decl Is_related(Genus_A:symbol, Genus_B:symbol)\nIs_related(\"gorilla\", \"homo\").\n.decl Answer()\nAnswer() :- Has_genus(animal1, genus1), Has_genus(animal2, genus2), Is_related(genus1, genus2).\n.output Answer\n\n", "completions": [".decl Has_genus(Animal:symbol, Genus:symbol)\nHas_genus(\"gorilla\", \"gorilla\").\nHas_genus(\"human\", \"homo\").\n.decl Is_related(Genus_A:symbol, Genus_B:symbol)\nIs_related(\"gorilla\", \"homo\").\n.decl Answer()\nAnswer() :- Has_genus(animal1, genus1), Has_genus(animal2, genus2), Is_related(genus1, genus2).\n.output Answer\n\n"]}
{"id": 610, "answer": true, "completion": ".decl Has_profit(Company:symbol, Profit:float)\nHas_profit(\"Disney\", 100).\nHas_profit(\"Rudyard Kipling\", 10).\n.decl Answer()\nAnswer() :- Has_profit(\"Disney\", profit1), Has_profit(\"Rudyard Kipling\", profit2), profit1 > profit2.\n.output Answer\n\n", "completions": [".decl Has_profit(Company:symbol, Profit:float)\nHas_profit(\"Disney\", 100).\nHas_profit(\"Rudyard Kipling\", 10).\n.decl Answer()\nAnswer() :- Has_profit(\"Disney\", profit1), Has_profit(\"Rudyard Kipling\", profit2), profit1 > profit2.\n.output Answer\n\n"]}
{"id": 611, "answer": false, "completion": ".decl Believes(Person:symbol, Theory:symbol)\nBelieves(\"Lamarck\", \"inheritance of acquired characteristics\").\nBelieves(\"Darwin\", \"natural selection\").\n.decl Answer()\nAnswer() :- Believes(\"Lamarck\", theory1), Believes(\"Darwin\", theory2), theory1 = theory2.\n.output Answer\n\n", "completions": [".decl Believes(Person:symbol, Theory:symbol)\nBelieves(\"Lamarck\", \"inheritance of acquired characteristics\").\nBelieves(\"Darwin\", \"natural selection\").\n.decl Answer()\nAnswer() :- Believes(\"Lamarck\", theory1), Believes(\"Darwin\", theory2), theory1 = theory2.\n.output Answer\n\n"]}
{"id": 612, "answer": true, "completion": ".decl Is_capable_of(Person:symbol, Action:symbol)\nIs_capable_of(\"person\", \"reproduction\").\nIs_capable_of(\"person\", \"parenthood\").\n.decl Answer()\nAnswer() :- Is_capable_of(\"person\", \"reproduction\"), Is_capable_of(\"person\", \"parenthood\").\n.output Answer\n\n", "completions": [".decl Is_capable_of(Person:symbol, Action:symbol)\nIs_capable_of(\"person\", \"reproduction\").\nIs_capable_of(\"person\", \"parenthood\").\n.decl Answer()\nAnswer() :- Is_capable_of(\"person\", \"reproduction\"), Is_capable_of(\"person\", \"parenthood\").\n.output Answer\n\n"]}
{"id": 613, "answer": false, "completion": ".decl Has_pain_tolerance(Person:symbol, Pain_tolerance:float)\nHas_pain_tolerance(\"guitarist\", 1.5).\n.decl Has_pain_tolerance(Person:symbol, Pain_tolerance:float)\nHas_pain_tolerance(\"average\", 1).\n.decl Answer()\nAnswer() :- Has_pain_tolerance(\"guitarist\", pain_tolerance1), Has_pain_tolerance(\"average\", pain_tolerance2), pain_tolerance1 > pain_tolerance2.\n.output Answer\n\n", "completions": [".decl Has_pain_tolerance(Person:symbol, Pain_tolerance:float)\nHas_pain_tolerance(\"guitarist\", 1.5).\n.decl Has_pain_tolerance(Person:symbol, Pain_tolerance:float)\nHas_pain_tolerance(\"average\", 1).\n.decl Answer()\nAnswer() :- Has_pain_tolerance(\"guitarist\", pain_tolerance1), Has_pain_tolerance(\"average\", pain_tolerance2), pain_tolerance1 > pain_tolerance2.\n.output Answer\n\n"]}
{"id": 614, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Methuselah\", 969).\n.decl Has_record(Person:symbol, Record:symbol)\nHas_record(\"Jeanne Calment\", \"oldest person\").\n.decl Answer()\nAnswer() :- Has_age(\"Methuselah\", age1), Has_age(\"Jeanne Calment\", age2), age1 > age2.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Methuselah\", 969).\n.decl Has_record(Person:symbol, Record:symbol)\nHas_record(\"Jeanne Calment\", \"oldest person\").\n.decl Answer()\nAnswer() :- Has_age(\"Methuselah\", age1), Has_age(\"Jeanne Calment\", age2), age1 > age2.\n.output Answer\n\n"]}
{"id": 615, "answer": false, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"American billionaire\", 900000).\n.decl Has_currency(Country:symbol, Currency:symbol)\nHas_currency(\"United States\", \"dollar\").\n.decl Has_exchange_rate(Currency1:symbol, Currency2:symbol, Exchange_rate:float)\nHas_exchange_rate(\"dollar\", \"euro\", 0.9).\n.decl Answer()\nAnswer() :- Has_net_worth(\"American billionaire\", net_worth), Has_currency(\"United States\", currency1), Has_exchange_rate(currency1, \"euro\", exchange_rate), net_worth*exchange_rate >= 1000000.\n.output Answer\n\n", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"American billionaire\", 900000).\n.decl Has_currency(Country:symbol, Currency:symbol)\nHas_currency(\"United States\", \"dollar\").\n.decl Has_exchange_rate(Currency1:symbol, Currency2:symbol, Exchange_rate:float)\nHas_exchange_rate(\"dollar\", \"euro\", 0.9).\n.decl Answer()\nAnswer() :- Has_net_worth(\"American billionaire\", net_worth), Has_currency(\"United States\", currency1), Has_exchange_rate(currency1, \"euro\", exchange_rate), net_worth*exchange_rate >= 1000000.\n.output Answer\n\n"]}
{"id": 616, "answer": false, "completion": ".decl Has_fans(Person:symbol, Fans:symbol)\nHas_fans(\"Jonathan Larson\", \"fans of Jonathan Larson\").\n.decl Is_aware_of(Person:symbol, Thing:symbol)\nIs_aware_of(\"fans of Jonathan Larson\", \"HIV\").\n.decl Answer()\nAnswer() :- Has_fans(\"Jonathan Larson\", person), !Is_aware_of(person, \"HIV\").\n.output Answer\n\n", "completions": [".decl Has_fans(Person:symbol, Fans:symbol)\nHas_fans(\"Jonathan Larson\", \"fans of Jonathan Larson\").\n.decl Is_aware_of(Person:symbol, Thing:symbol)\nIs_aware_of(\"fans of Jonathan Larson\", \"HIV\").\n.decl Answer()\nAnswer() :- Has_fans(\"Jonathan Larson\", person), !Is_aware_of(person, \"HIV\").\n.output Answer\n\n"]}
{"id": 617, "answer": true, "completion": ".decl Has_name(Month:symbol, Name:symbol)\nHas_name(\"June\", \"Juno\").\n.decl Has_origin(Name:symbol, Origin:symbol)\nHas_origin(\"Juno\", \"mythology\").\n.decl Answer()\nAnswer() :- Has_name(\"June\", name), Has_origin(name, \"mythology\").\n.output Answer\n\n", "completions": [".decl Has_name(Month:symbol, Name:symbol)\nHas_name(\"June\", \"Juno\").\n.decl Has_origin(Name:symbol, Origin:symbol)\nHas_origin(\"Juno\", \"mythology\").\n.decl Answer()\nAnswer() :- Has_name(\"June\", name), Has_origin(name, \"mythology\").\n.output Answer\n\n"]}
{"id": 618, "answer": true, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"rosemary\", \"looks\").\nHas_property(\"lavender\", \"looks\").\nHas_property(\"rosemary\", \"smell\").\nHas_property(\"lavender\", \"smell\").\n.decl Answer()\nAnswer() :- Has_property(\"rosemary\", property1), Has_property(\"lavender\", property2), property1 = property2.\n.output Answer\n\n", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"rosemary\", \"looks\").\nHas_property(\"lavender\", \"looks\").\nHas_property(\"rosemary\", \"smell\").\nHas_property(\"lavender\", \"smell\").\n.decl Answer()\nAnswer() :- Has_property(\"rosemary\", property1), Has_property(\"lavender\", property2), property1 = property2.\n.output Answer\n\n"]}
{"id": 619, "answer": false, "completion": ".decl Has_n_colors(Object:symbol, N_colors:float)\nHas_n_colors(\"sudoku\", 1).\n.decl Answer()\nAnswer() :- Has_n_colors(\"sudoku\", n_colors), n_colors > 1.\n.output Answer\n\n", "completions": [".decl Has_n_colors(Object:symbol, N_colors:float)\nHas_n_colors(\"sudoku\", 1).\n.decl Answer()\nAnswer() :- Has_n_colors(\"sudoku\", n_colors), n_colors > 1.\n.output Answer\n\n"]}
{"id": 620, "answer": false, "completion": ".decl Is_on_coast(City:symbol, Coast:symbol)\nIs_on_coast(\"Miami\", \"American East Coast\").\nIs_on_coast(\"San Francisco\", \"American West Coast\").\n.decl Answer()\nAnswer() :- Is_on_coast(\"Miami\", \"American West Coast\").\n.output Answer\n\n", "completions": [".decl Is_on_coast(City:symbol, Coast:symbol)\nIs_on_coast(\"Miami\", \"American East Coast\").\nIs_on_coast(\"San Francisco\", \"American West Coast\").\n.decl Answer()\nAnswer() :- Is_on_coast(\"Miami\", \"American West Coast\").\n.output Answer\n\n"]}
{"id": 621, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Stephen King\", 65).\n.decl Has_age_limit(Organization:symbol, Age_limit:float)\nHas_age_limit(\"NASA Astronaut Corps\", 34).\n.decl Answer()\nAnswer() :- Has_age(\"Stephen King\", age), Has_age_limit(\"NASA Astronaut Corps\", age_limit), age <= age_limit.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Stephen King\", 65).\n.decl Has_age_limit(Organization:symbol, Age_limit:float)\nHas_age_limit(\"NASA Astronaut Corps\", 34).\n.decl Answer()\nAnswer() :- Has_age(\"Stephen King\", age), Has_age_limit(\"NASA Astronaut Corps\", age_limit), age <= age_limit.\n.output Answer\n\n"]}
{"id": 622, "answer": true, "completion": ".decl Has_longevity(Person:symbol, Longevity:float)\nHas_longevity(\"Richard III\", 33).\nHas_longevity(\"Richard III's father\", 40).\n.decl Answer()\nAnswer() :- Has_longevity(\"Richard III\", longevity1), Has_longevity(\"Richard III's father\", longevity2), longevity1 < longevity2.\n.output Answer\n\n\n", "completions": [".decl Has_longevity(Person:symbol, Longevity:float)\nHas_longevity(\"Richard III\", 33).\nHas_longevity(\"Richard III's father\", 40).\n.decl Answer()\nAnswer() :- Has_longevity(\"Richard III\", longevity1), Has_longevity(\"Richard III's father\", longevity2), longevity1 < longevity2.\n.output Answer\n\n\n"]}
{"id": 623, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"Starbucks passion tea\", \"ginger\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Starbucks passion tea\", \"ginger\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"Starbucks passion tea\", \"ginger\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Starbucks passion tea\", \"ginger\").\n.output Answer\n\n"]}
{"id": 624, "answer": true, "completion": ".decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.decl Answer()\nAnswer() :- Is_member_of(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.output Answer\n\n", "completions": [".decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.decl Answer()\nAnswer() :- Is_member_of(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.output Answer\n\n"]}
{"id": 625, "answer": false, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"1936 Summer Olympics venue\", 100000).\nHas_capacity(\"Superbowl venue\", 60000).\n.decl Has_attendance(Event:symbol, Attendance:float)\nHas_attendance(\"Superbowl\", 60000).\n.decl Answer()\nAnswer() :- Has_capacity(\"1936 Summer Olympics venue\", capacity1), Has_attendance(\"Superbowl\", attendance), capacity1 < attendance.\n.output Answer\n\n\n", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"1936 Summer Olympics venue\", 100000).\nHas_capacity(\"Superbowl venue\", 60000).\n.decl Has_attendance(Event:symbol, Attendance:float)\nHas_attendance(\"Superbowl\", 60000).\n.decl Answer()\nAnswer() :- Has_capacity(\"1936 Summer Olympics venue\", capacity1), Has_attendance(\"Superbowl\", attendance), capacity1 < attendance.\n.output Answer\n\n\n"]}
{"id": 626, "answer": true, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Cookie Monster\", \"cookies\").\n.decl Answer()\nAnswer() :- Likes(\"Cookie Monster\", \"cookies\"), !Likes(\"Cookie Monster\", \"Keebler products\").\n.output Answer\n\n", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Cookie Monster\", \"cookies\").\n.decl Answer()\nAnswer() :- Likes(\"Cookie Monster\", \"cookies\"), !Likes(\"Cookie Monster\", \"Keebler products\").\n.output Answer\n\n"]}
{"id": 627, "answer": true, "completion": ".decl Supports(Person:symbol, Belief:symbol)\nSupports(\"Billy Graham\", \"Christianity\").\nSupports(\"Billy Graham\", \"agnosticism\").\n.decl Answer()\nAnswer() :- Supports(\"Billy Graham\", \"agnosticism\").\n.output Answer\n\n", "completions": [".decl Supports(Person:symbol, Belief:symbol)\nSupports(\"Billy Graham\", \"Christianity\").\nSupports(\"Billy Graham\", \"agnosticism\").\n.decl Answer()\nAnswer() :- Supports(\"Billy Graham\", \"agnosticism\").\n.output Answer\n\n"]}
{"id": 628, "answer": true, "completion": ".decl Has_fine_motor_control_issues(Person:symbol)\nHas_fine_motor_control_issues(\"John\").\n.decl Has_altered_keyboard_layout(Person:symbol)\nHas_altered_keyboard_layout(\"John\").\n.decl Answer()\nAnswer() :- Has_fine_motor_control_issues(person), Has_altered_keyboard_layout(person).\n.output Answer\n\n", "completions": [".decl Has_fine_motor_control_issues(Person:symbol)\nHas_fine_motor_control_issues(\"John\").\n.decl Has_altered_keyboard_layout(Person:symbol)\nHas_altered_keyboard_layout(\"John\").\n.decl Answer()\nAnswer() :- Has_fine_motor_control_issues(person), Has_altered_keyboard_layout(person).\n.output Answer\n\n"]}
{"id": 629, "answer": true, "completion": ".decl In_season(Month:symbol, Season:symbol)\nIn_season(\"August\", \"winter\").\nIn_season(\"August\", \"summer\").\n.decl Answer()\nAnswer() :- In_season(\"August\", \"winter\").\n.output Answer\n\n", "completions": [".decl In_season(Month:symbol, Season:symbol)\nIn_season(\"August\", \"winter\").\nIn_season(\"August\", \"summer\").\n.decl Answer()\nAnswer() :- In_season(\"August\", \"winter\").\n.output Answer\n\n"]}
{"id": 630, "answer": false, "completion": ".decl Has_n_items(Room:symbol, N_items:float)\nHas_n_items(\"room\", 3).\n.decl Is_obvious(Item:symbol)\nIs_obvious(\"camera\").\n.decl Answer()\nAnswer() :- Has_n_items(\"room\", n_items), n_items > 0, !Is_obvious(item).\n.output Answer\n\n\n", "completions": [".decl Has_n_items(Room:symbol, N_items:float)\nHas_n_items(\"room\", 3).\n.decl Is_obvious(Item:symbol)\nIs_obvious(\"camera\").\n.decl Answer()\nAnswer() :- Has_n_items(\"room\", n_items), n_items > 0, !Is_obvious(item).\n.output Answer\n\n\n"]}
{"id": 631, "answer": false, "completion": ".decl Has_n_subscribers(Channel:symbol, N_subscribers:float)\nHas_n_subscribers(\"Youtube\", 1e9).\n.decl Happens_every_n_subscribers(Event:symbol, N_subscribers:float)\nHappens_every_n_subscribers(\"unsolicited audiobook advice\", 1e6).\n.decl Answer()\nAnswer() :- Has_n_subscribers(\"Youtube\", n_subscribers1), Happens_every_n_subscribers(\"unsolicited audiobook advice\", n_subscribers2), n_subscribers1 >= n_subscribers2.\n.output Answer\n\n", "completions": [".decl Has_n_subscribers(Channel:symbol, N_subscribers:float)\nHas_n_subscribers(\"Youtube\", 1e9).\n.decl Happens_every_n_subscribers(Event:symbol, N_subscribers:float)\nHappens_every_n_subscribers(\"unsolicited audiobook advice\", 1e6).\n.decl Answer()\nAnswer() :- Has_n_subscribers(\"Youtube\", n_subscribers1), Happens_every_n_subscribers(\"unsolicited audiobook advice\", n_subscribers2), n_subscribers1 >= n_subscribers2.\n.output Answer\n\n"]}
{"id": 632, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"shuttle Columbia 11 landing\", \"February 1, 2003\").\nHappens_in_time(\"Christmas carols\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"shuttle Columbia 11 landing\", month), Happens_in_time(\"Christmas carols\", month).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"shuttle Columbia 11 landing\", \"February 1, 2003\").\nHappens_in_time(\"Christmas carols\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"shuttle Columbia 11 landing\", month), Happens_in_time(\"Christmas carols\", month).\n.output Answer\n\n"]}
{"id": 633, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Middle Ages\", 500).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"English kings\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"English kings\", n_years1), Last_n_years(\"Middle Ages\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Middle Ages\", 500).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"English kings\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"English kings\", n_years1), Last_n_years(\"Middle Ages\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n"]}
{"id": 634, "answer": true, "completion": ".decl Is_part_of(Object:symbol, Object2:symbol)\nIs_part_of(\"rope\", \"frigate\").\n.decl Answer()\nAnswer() :- Is_part_of(\"rope\", \"frigate\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Object:symbol, Object2:symbol)\nIs_part_of(\"rope\", \"frigate\").\n.decl Answer()\nAnswer() :- Is_part_of(\"rope\", \"frigate\").\n.output Answer\n\n"]}
{"id": 635, "answer": false, "completion": ".decl Has_sound_level(Event:symbol, Sound_level:float)\nHas_sound_level(\"Who concert\", 100).\n.decl Has_sound_level(Event:symbol, Sound_level:float)\nHas_sound_level(\"international space station\", 0).\n.decl Answer()\nAnswer() :- Has_sound_level(\"Who concert\", sound_level1), Has_sound_level(\"international space station\", sound_level2), sound_level1 > sound_level2.\n.output Answer\n\n", "completions": [".decl Has_sound_level(Event:symbol, Sound_level:float)\nHas_sound_level(\"Who concert\", 100).\n.decl Has_sound_level(Event:symbol, Sound_level:float)\nHas_sound_level(\"international space station\", 0).\n.decl Answer()\nAnswer() :- Has_sound_level(\"Who concert\", sound_level1), Has_sound_level(\"international space station\", sound_level2), sound_level1 > sound_level2.\n.output Answer\n\n"]}
{"id": 636, "answer": false, "completion": ".decl Treats(Doctor:symbol, Disease:symbol)\nTreats(\"dentist\", \"tooth decay\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"tooth loss\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").", "completions": [".decl Treats(Doctor:symbol, Disease:symbol)\nTreats(\"dentist\", \"tooth decay\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"tooth loss\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\").\nTreats(\"dentist\", \"toothache\")."]}
{"id": 637, "answer": false, "completion": ".decl Loves(Person:symbol, Food:symbol)\nLoves(\"John\", \"buffalo wings\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"buffalo wings\", \"capsaicin\").\n.decl Answer()\nAnswer() :- Loves(person, \"buffalo wings\"), Contains(\"buffalo wings\", ingredient), Loves(person, ingredient).\n.output Answer\n\n", "completions": [".decl Loves(Person:symbol, Food:symbol)\nLoves(\"John\", \"buffalo wings\").\n.decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"buffalo wings\", \"capsaicin\").\n.decl Answer()\nAnswer() :- Loves(person, \"buffalo wings\"), Contains(\"buffalo wings\", ingredient), Loves(person, ingredient).\n.output Answer\n\n"]}
{"id": 638, "answer": false, "completion": ".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Wycheproof\", 4.1).\n.decl Has_height(Person:symbol, Height:float)\nHas_height(\"Edmund Hillary\", 1.83).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Wycheproof\", height1), Has_height(\"Edmund Hillary\", height2), height1 < height2.\n.output Answer\n\n", "completions": [".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Wycheproof\", 4.1).\n.decl Has_height(Person:symbol, Height:float)\nHas_height(\"Edmund Hillary\", 1.83).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Wycheproof\", height1), Has_height(\"Edmund Hillary\", height2), height1 < height2.\n.output Answer\n\n"]}
{"id": 639, "answer": false, "completion": ".decl Is_in(Place:symbol, Location:symbol)\nIs_in(\"Tokyo\", \"Japan\").\nIs_in(\"The Metropolitan Museum of Art\", \"New York City\").\n.decl Is_in(Place:symbol, Location:symbol)\nIs_in(\"Japan\", \"Asia\").\nIs_in(\"New York City\", \"North America\").\n.decl Answer()\nAnswer() :- Is_in(\"Tokyo\", location1), Is_in(\"The Metropolitan Museum of Art\", location2), Is_in(location1, location3), Is_in(location2, location3).\n.output Answer\n\n", "completions": [".decl Is_in(Place:symbol, Location:symbol)\nIs_in(\"Tokyo\", \"Japan\").\nIs_in(\"The Metropolitan Museum of Art\", \"New York City\").\n.decl Is_in(Place:symbol, Location:symbol)\nIs_in(\"Japan\", \"Asia\").\nIs_in(\"New York City\", \"North America\").\n.decl Answer()\nAnswer() :- Is_in(\"Tokyo\", location1), Is_in(\"The Metropolitan Museum of Art\", location2), Is_in(location1, location3), Is_in(location2, location3).\n.output Answer\n\n"]}
{"id": 640, "answer": true, "completion": ".decl Has_services(Organization:symbol, Service:symbol)\nHas_services(\"United States Department of Education\", \"services benefiting undocumented migrants\").\n.decl Answer()\nAnswer() :- Has_services(\"United States Department of Education\", \"services benefiting undocumented migrants\").\n.output Answer\n\n", "completions": [".decl Has_services(Organization:symbol, Service:symbol)\nHas_services(\"United States Department of Education\", \"services benefiting undocumented migrants\").\n.decl Answer()\nAnswer() :- Has_services(\"United States Department of Education\", \"services benefiting undocumented migrants\").\n.output Answer\n\n"]}
{"id": 641, "answer": true, "completion": ".decl Has_n_uniforms(Profession:symbol, N_uniforms:float)\nHas_n_uniforms(\"mail carrier\", 2).\n.decl Answer()\nAnswer() :- Has_n_uniforms(\"mail carrier\", n_uniforms), n_uniforms > 1.\n.output Answer\n\n", "completions": [".decl Has_n_uniforms(Profession:symbol, N_uniforms:float)\nHas_n_uniforms(\"mail carrier\", 2).\n.decl Answer()\nAnswer() :- Has_n_uniforms(\"mail carrier\", n_uniforms), n_uniforms > 1.\n.output Answer\n\n"]}
{"id": 642, "answer": true, "completion": ".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"21 year old\", \"doctorate\").\n.decl Answer()\nAnswer() :- Has_degree(\"21 year old\", \"doctorate\").\n.output Answer\n\n", "completions": [".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"21 year old\", \"doctorate\").\n.decl Answer()\nAnswer() :- Has_degree(\"21 year old\", \"doctorate\").\n.output Answer\n\n"]}
{"id": 643, "answer": true, "completion": ".decl Has_sense(Person:symbol, Sense:symbol)\nHas_sense(\"deaf people\", \"hearing\").\n.decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"deaf people\", \"music\").\n.decl Answer()\nAnswer() :- Has_sense(person, \"hearing\"), Enjoys(person, \"music\").\n.output Answer\n\n", "completions": [".decl Has_sense(Person:symbol, Sense:symbol)\nHas_sense(\"deaf people\", \"hearing\").\n.decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"deaf people\", \"music\").\n.decl Answer()\nAnswer() :- Has_sense(person, \"hearing\"), Enjoys(person, \"music\").\n.output Answer\n\n"]}
{"id": 644, "answer": true, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Aretha Franklin's second child birth\", 1955).\nHappens_in_year(\"presidential election\", 1956).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Aretha Franklin's second child birth\", year1), Happens_in_year(\"presidential election\", year2), year1 < year2.\n.output Answer\n\n", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Aretha Franklin's second child birth\", 1955).\nHappens_in_year(\"presidential election\", 1956).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Aretha Franklin's second child birth\", year1), Happens_in_year(\"presidential election\", year2), year1 < year2.\n.output Answer\n\n"]}
{"id": 645, "answer": false, "completion": ".decl Has_n_letters(Word:symbol, N_letters:float)\nHas_n_letters(\"the\", 3).\nHas_n_letters(\"be\", 2).\n.decl Has_letter(Word:symbol, Letter:symbol)\nHas_letter(\"the\", \"t\").\nHas_letter(\"the\", \"h\").\nHas_letter(\"the\", \"e\").\nHas_letter(\"be\", \"b\").\nHas_letter(\"be\", \"e\").\n.decl Answer()\nAnswer() :- Has_letter(\"the\", \"c\").\nAnswer() :- Has_letter(\"be\", \"c\").\n.output Answer\n\n", "completions": [".decl Has_n_letters(Word:symbol, N_letters:float)\nHas_n_letters(\"the\", 3).\nHas_n_letters(\"be\", 2).\n.decl Has_letter(Word:symbol, Letter:symbol)\nHas_letter(\"the\", \"t\").\nHas_letter(\"the\", \"h\").\nHas_letter(\"the\", \"e\").\nHas_letter(\"be\", \"b\").\nHas_letter(\"be\", \"e\").\n.decl Answer()\nAnswer() :- Has_letter(\"the\", \"c\").\nAnswer() :- Has_letter(\"be\", \"c\").\n.output Answer\n\n"]}
{"id": 646, "answer": false, "completion": ".decl Has_language_ability(Animal:symbol, Ability:float)\nHas_language_ability(\"ape\", 0.5).\nHas_language_ability(\"ant\", 0.1).\n.decl Answer()\nAnswer() :- Has_language_ability(\"ape\", ability1), Has_language_ability(\"ant\", ability2), ability1 < ability2.\n.output Answer\n\n", "completions": [".decl Has_language_ability(Animal:symbol, Ability:float)\nHas_language_ability(\"ape\", 0.5).\nHas_language_ability(\"ant\", 0.1).\n.decl Answer()\nAnswer() :- Has_language_ability(\"ape\", ability1), Has_language_ability(\"ant\", ability2), ability1 < ability2.\n.output Answer\n\n"]}
{"id": 647, "answer": true, "completion": ".decl Breaks_down(Organ:symbol, Object:symbol)\nBreaks_down(\"small intestine\", \"cotton ball\").\n.decl Answer()\nAnswer() :- Breaks_down(\"small intestine\", \"cotton ball\").\n.output Answer\n\n", "completions": [".decl Breaks_down(Organ:symbol, Object:symbol)\nBreaks_down(\"small intestine\", \"cotton ball\").\n.decl Answer()\nAnswer() :- Breaks_down(\"small intestine\", \"cotton ball\").\n.output Answer\n\n"]}
{"id": 648, "answer": true, "completion": ".decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"hippie\", \"bummed out\").\n.decl Causes_emotion(Event:symbol, Emotion:symbol)\nCauses_emotion(\"Pax Romana\", \"bummed out\").\n.decl Answer()\nAnswer() :- Has_emotion(\"hippie\", emotion), Causes_emotion(\"Pax Romana\", emotion).\n.output Answer\n\n\n", "completions": [".decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"hippie\", \"bummed out\").\n.decl Causes_emotion(Event:symbol, Emotion:symbol)\nCauses_emotion(\"Pax Romana\", \"bummed out\").\n.decl Answer()\nAnswer() :- Has_emotion(\"hippie\", emotion), Causes_emotion(\"Pax Romana\", emotion).\n.output Answer\n\n\n"]}
{"id": 649, "answer": true, "completion": ".decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Paul McCartney\", \"musician\").\nIs_a(\"Paul McCartney\", \"knight\").\n.decl Answer()\nAnswer() :- Is_a(person, \"musician\"), Is_a(person, \"knight\").\n.output Answer\n\n", "completions": [".decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Paul McCartney\", \"musician\").\nIs_a(\"Paul McCartney\", \"knight\").\n.decl Answer()\nAnswer() :- Is_a(person, \"musician\"), Is_a(person, \"knight\").\n.output Answer\n\n"]}
{"id": 650, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"winter\", \"December\").\nHappens_in_time(\"winter\", \"January\").\nHappens_in_time(\"winter\", \"February\").\nHappens_in_time(\"hot temperatures\", \"July\").\nHappens_in_time(\"hot temperatures\", \"August\").\nHappens_in_time(\"hot temperatures\", \"September\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"winter\", time), Happens_in_time(\"hot temperatures\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"winter\", \"December\").\nHappens_in_time(\"winter\", \"January\").\nHappens_in_time(\"winter\", \"February\").\nHappens_in_time(\"hot temperatures\", \"July\").\nHappens_in_time(\"hot temperatures\", \"August\").\nHappens_in_time(\"hot temperatures\", \"September\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"winter\", time), Happens_in_time(\"hot temperatures\", time).\n.output Answer\n\n"]}
{"id": 651, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"All Purpose Flour\", \"wheat\").\nHas_ingredient(\"All Purpose Flour\", \"rye\").\nHas_ingredient(\"All Purpose Flour\", \"barley\").\n.decl Is_allergic_to(Person:symbol, Ingredient:symbol)\nIs_allergic_to(\"someone who has celiac disease\", \"wheat\").\nIs_allergic_to(\"someone who has celiac disease\", \"rye\").\nIs_allergic_to(\"someone who has celiac disease\", \"barley\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"All Purpose Flour\", ingredient), Is_allergic_to(\"someone who has celiac disease\", ingredient).\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"All Purpose Flour\", \"wheat\").\nHas_ingredient(\"All Purpose Flour\", \"rye\").\nHas_ingredient(\"All Purpose Flour\", \"barley\").\n.decl Is_allergic_to(Person:symbol, Ingredient:symbol)\nIs_allergic_to(\"someone who has celiac disease\", \"wheat\").\nIs_allergic_to(\"someone who has celiac disease\", \"rye\").\nIs_allergic_to(\"someone who has celiac disease\", \"barley\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"All Purpose Flour\", ingredient), Is_allergic_to(\"someone who has celiac disease\", ingredient).\n.output Answer\n\n"]}
{"id": 652, "answer": true, "completion": ".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Alice\", \"black\").\n.decl Wants_hair_color(Person:symbol, Hair_color:symbol)\nWants_hair_color(\"Alice\", \"red\").\n.decl Needs_bleach(Hair_color_from:symbol, Hair_color_to:symbol)\nNeeds_bleach(\"black\", \"red\").\n.decl Answer()\nAnswer() :- Has_hair_color(person, hair_color_from), Wants_hair_color(person, hair_color_to), Needs_bleach(hair_color_from, hair_color_to).\n.output Answer\n\n", "completions": [".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Alice\", \"black\").\n.decl Wants_hair_color(Person:symbol, Hair_color:symbol)\nWants_hair_color(\"Alice\", \"red\").\n.decl Needs_bleach(Hair_color_from:symbol, Hair_color_to:symbol)\nNeeds_bleach(\"black\", \"red\").\n.decl Answer()\nAnswer() :- Has_hair_color(person, hair_color_from), Wants_hair_color(person, hair_color_to), Needs_bleach(hair_color_from, hair_color_to).\n.output Answer\n\n"]}
{"id": 653, "answer": false, "completion": ".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"water\", \"beach\").\nIs_near(\"beach\", \"boardwalk\").\nIs_near(\"boardwalk\", \"arcade\").\n.decl Is_shouted(Name:symbol, Place:symbol)\nIs_shouted(\"Marco Polo\", \"arcade\").\n.decl Answer()\nAnswer() :- Is_shouted(\"Marco Polo\", place1), Is_near(place1, place2), Is_near(\"water\", place2).\n.output Answer\n\n", "completions": [".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"water\", \"beach\").\nIs_near(\"beach\", \"boardwalk\").\nIs_near(\"boardwalk\", \"arcade\").\n.decl Is_shouted(Name:symbol, Place:symbol)\nIs_shouted(\"Marco Polo\", \"arcade\").\n.decl Answer()\nAnswer() :- Is_shouted(\"Marco Polo\", place1), Is_near(place1, place2), Is_near(\"water\", place2).\n.output Answer\n\n"]}
{"id": 654, "answer": true, "completion": ".decl Uses(Person:symbol, Software:symbol)\nUses(\"Metallica\", \"Soulseek\").\n.decl Answer()\nAnswer() :- Uses(\"Metallica\", \"Soulseek\").\n.output Answer\n\n", "completions": [".decl Uses(Person:symbol, Software:symbol)\nUses(\"Metallica\", \"Soulseek\").\n.decl Answer()\nAnswer() :- Uses(\"Metallica\", \"Soulseek\").\n.output Answer\n\n"]}
{"id": 655, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"R. Kelly\", 40).\n.decl Has_n_years_of_school(Person:symbol, N_years:float)\nHas_n_years_of_school(\"R. Kelly\", 12).\n.decl Answer()\nAnswer() :- Has_age(\"R. Kelly\", age), Has_n_years_of_school(\"R. Kelly\", n_years), age >= n_years.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"R. Kelly\", 40).\n.decl Has_n_years_of_school(Person:symbol, N_years:float)\nHas_n_years_of_school(\"R. Kelly\", 12).\n.decl Answer()\nAnswer() :- Has_age(\"R. Kelly\", age), Has_n_years_of_school(\"R. Kelly\", n_years), age >= n_years.\n.output Answer\n\n"]}
{"id": 656, "answer": false, "completion": ".decl Happens_in_event(Event:symbol, Event2:symbol)\nHappens_in_event(\"touchdown\", \"football game\").\nHappens_in_event(\"football game\", \"Football War\").\n.decl Answer()\nAnswer() :- Happens_in_event(\"touchdown\", \"Football War\").\n.output Answer\n\n\n", "completions": [".decl Happens_in_event(Event:symbol, Event2:symbol)\nHappens_in_event(\"touchdown\", \"football game\").\nHappens_in_event(\"football game\", \"Football War\").\n.decl Answer()\nAnswer() :- Happens_in_event(\"touchdown\", \"Football War\").\n.output Answer\n\n\n"]}
{"id": 657, "answer": true, "completion": ".decl Is_a(Company:symbol, Type:symbol)\nIs_a(\"Canon Inc.\", \"Kabushiki gaisha\").\n.decl Answer()\nAnswer() :- Is_a(\"Canon Inc.\", \"Kabushiki gaisha\").\n.output Answer\n\n", "completions": [".decl Is_a(Company:symbol, Type:symbol)\nIs_a(\"Canon Inc.\", \"Kabushiki gaisha\").\n.decl Answer()\nAnswer() :- Is_a(\"Canon Inc.\", \"Kabushiki gaisha\").\n.output Answer\n\n"]}
{"id": 658, "answer": true, "completion": ".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"paparazzi\", \"Amy Winehouse's death\").\n.decl Answer()\nAnswer() :- Causes(\"paparazzi\", \"Amy Winehouse's death\").\n.output Answer\n\n", "completions": [".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"paparazzi\", \"Amy Winehouse's death\").\n.decl Answer()\nAnswer() :- Causes(\"paparazzi\", \"Amy Winehouse's death\").\n.output Answer\n\n"]}
{"id": 659, "answer": false, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"giant armadillo\", 1.5).\n.decl Has_length(Object:symbol, Length:float)\nHas_length(\"average ruler\", 0.3).\n.decl Answer()\nAnswer() :- Has_length(\"giant armadillo\", length1), Has_length(\"average ruler\", length2), length1 > 5 * length2.\n.output Answer\n\n", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"giant armadillo\", 1.5).\n.decl Has_length(Object:symbol, Length:float)\nHas_length(\"average ruler\", 0.3).\n.decl Answer()\nAnswer() :- Has_length(\"giant armadillo\", length1), Has_length(\"average ruler\", length2), length1 > 5 * length2.\n.output Answer\n\n"]}
{"id": 660, "answer": true, "completion": ".decl Has_tenure(Person:symbol, Tenure:float)\nHas_tenure(\"Drew Carey\", 20).\nHas_tenure(\"Doug Davidson\", 40).\n.decl Answer()\nAnswer() :- Has_tenure(\"Drew Carey\", tenure1), Has_tenure(\"Doug Davidson\", tenure2), tenure1 < tenure2.\n.output Answer\n\n", "completions": [".decl Has_tenure(Person:symbol, Tenure:float)\nHas_tenure(\"Drew Carey\", 20).\nHas_tenure(\"Doug Davidson\", 40).\n.decl Answer()\nAnswer() :- Has_tenure(\"Drew Carey\", tenure1), Has_tenure(\"Doug Davidson\", tenure2), tenure1 < tenure2.\n.output Answer\n\n"]}
{"id": 661, "answer": false, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"embalmed bodies\", \"hard\").\nHas_property(\"embalmed bodies\", \"cold\").\nHas_property(\"embalmed bodies\", \"lifeless\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"embalmed bodies\", \"hard\").\nHas_property(\"embalmed bodies\", \"cold\").\nHas_property(\"embalmed bodies\", \"lifeless\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_property(\"embalmed bodies\", \"unmoving\").\nHas_property(\"embalmed bodies\", \"unresponsive\").\nHas_property(\"embalmed bodies\", \"unsmiling\").\nHas_property(\"embalmed bodies\", \"unblinking\").\nHas_property(\"embalmed bodies\", \"unbreathing\").\nHas_"]}
{"id": 662, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Naruto escape\", \"Temple of Doom\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Naruto escape\", \"Temple of Doom\").\n.output Answer\n\n", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Naruto escape\", \"Temple of Doom\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Naruto escape\", \"Temple of Doom\").\n.output Answer\n\n"]}
{"id": 663, "answer": false, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"McDonald's\", 500).\n.decl Answer()\nAnswer() :- Has_calories(\"McDonald's\", calories), calories > 500.\n.output Answer\n\n", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"McDonald's\", 500).\n.decl Answer()\nAnswer() :- Has_calories(\"McDonald's\", calories), calories > 500.\n.output Answer\n\n"]}
{"id": 664, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Dodo\", 2.5).\nHas_height(\"Ma Petite\", 0.61).\n.decl Answer()\nAnswer() :- Has_height(\"Dodo\", height1), Has_height(\"Ma Petite\", height2), height1 > height2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Dodo\", 2.5).\nHas_height(\"Ma Petite\", 0.61).\n.decl Answer()\nAnswer() :- Has_height(\"Dodo\", height1), Has_height(\"Ma Petite\", height2), height1 > height2.\n.output Answer\n\n"]}
{"id": 665, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"zebra\", \"black\").\nHas_color(\"zebra\", \"white\").\nHas_color(\"prison uniforms\", \"black\").\nHas_color(\"prison uniforms\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"zebra\", color1), Has_color(\"prison uniforms\", color2), color1 = color2.\n.output Answer\n\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"zebra\", \"black\").\nHas_color(\"zebra\", \"white\").\nHas_color(\"prison uniforms\", \"black\").\nHas_color(\"prison uniforms\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"zebra\", color1), Has_color(\"prison uniforms\", color2), color1 = color2.\n.output Answer\n\n\n"]}
{"id": 666, "answer": true, "completion": ".decl Has_song(Band:symbol, Song:symbol)\nHas_song(\"Pink Floyd\", \"The French Riviera\").\n.decl Answer()\nAnswer() :- Has_song(\"Pink Floyd\", \"The French Riviera\").\n.output Answer\n\n", "completions": [".decl Has_song(Band:symbol, Song:symbol)\nHas_song(\"Pink Floyd\", \"The French Riviera\").\n.decl Answer()\nAnswer() :- Has_song(\"Pink Floyd\", \"The French Riviera\").\n.output Answer\n\n"]}
{"id": 667, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Drow\", 2.5).\nHas_height(\"The Hobbit's hero\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"Drow\", height1), Has_height(\"The Hobbit's hero\", height2), height1 > height2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Drow\", 2.5).\nHas_height(\"The Hobbit's hero\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"Drow\", height1), Has_height(\"The Hobbit's hero\", height2), height1 > height2.\n.output Answer\n\n"]}
{"id": 668, "answer": true, "completion": ".decl Loves(Person:symbol, Restaurant:symbol)\nLoves(\"E.T. the Extra-Terrestrial\", \"Friendly's\").\n.decl Answer()\nAnswer() :- Loves(\"E.T. the Extra-Terrestrial\", \"Friendly's\").\n.output Answer\n\n", "completions": [".decl Loves(Person:symbol, Restaurant:symbol)\nLoves(\"E.T. the Extra-Terrestrial\", \"Friendly's\").\n.decl Answer()\nAnswer() :- Loves(\"E.T. the Extra-Terrestrial\", \"Friendly's\").\n.output Answer\n\n"]}
{"id": 669, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"quadragenarian\", 40).\n.decl Has_memory_capacity(Person:symbol, Memory_capacity:float)\nHas_memory_capacity(\"quadragenarian\", 0.5).\n.decl Answer()\nAnswer() :- Has_age(\"quadragenarian\", age), Has_memory_capacity(\"quadragenarian\", memory_capacity), age > memory_capacity.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"quadragenarian\", 40).\n.decl Has_memory_capacity(Person:symbol, Memory_capacity:float)\nHas_memory_capacity(\"quadragenarian\", 0.5).\n.decl Answer()\nAnswer() :- Has_age(\"quadragenarian\", age), Has_memory_capacity(\"quadragenarian\", memory_capacity), age > memory_capacity.\n.output Answer\n\n"]}
{"id": 670, "answer": true, "completion": ".decl Has_role(Country:symbol, Role:symbol)\nHas_role(\"Switzerland\", \"neutral\").\nHas_role(\"Portugal\", \"invader\").\nHas_role(\"Portugal\", \"defender\").\n.decl Answer()\nAnswer() :- Has_role(\"Switzerland\", role), Has_role(country, role).\n.output Answer\n\n", "completions": [".decl Has_role(Country:symbol, Role:symbol)\nHas_role(\"Switzerland\", \"neutral\").\nHas_role(\"Portugal\", \"invader\").\nHas_role(\"Portugal\", \"defender\").\n.decl Answer()\nAnswer() :- Has_role(\"Switzerland\", role), Has_role(country, role).\n.output Answer\n\n"]}
{"id": 671, "answer": false, "completion": ".decl Has_gender_configuration(Group:symbol, Gender_configuration:symbol)\nHas_gender_configuration(\"ABBA\", \"MMFF\").\nHas_gender_configuration(\"The Mamas & The Papas\", \"FFMM\").\n.decl Answer()\nAnswer() :- Has_gender_configuration(\"ABBA\", gender_configuration1), Has_gender_configuration(\"The Mamas & The Papas\", gender_configuration2), gender_configuration1 = gender_configuration2.\n.output Answer\n\n", "completions": [".decl Has_gender_configuration(Group:symbol, Gender_configuration:symbol)\nHas_gender_configuration(\"ABBA\", \"MMFF\").\nHas_gender_configuration(\"The Mamas & The Papas\", \"FFMM\").\n.decl Answer()\nAnswer() :- Has_gender_configuration(\"ABBA\", gender_configuration1), Has_gender_configuration(\"The Mamas & The Papas\", gender_configuration2), gender_configuration1 = gender_configuration2.\n.output Answer\n\n"]}
{"id": 672, "answer": false, "completion": ".decl Has_n_Emmy_Awards(Person:symbol, N_Emmy_Awards:float)\nHas_n_Emmy_Awards(\"Brian Cranston\", 4).\nHas_n_Emmy_Awards(\"Saoirse Ronan\", 0).\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Answer()\nAnswer() :- Has_n_Emmy_Awards(\"Brian Cranston\", n_Emmy_Awards1), Has_n_Emmy_Awards(\"Saoirse Ronan\", n_Emmy_Awards2), Is_prime(n_Emmy_Awards1 + n_Emmy_Awards2).\n.output Answer\n\n", "completions": [".decl Has_n_Emmy_Awards(Person:symbol, N_Emmy_Awards:float)\nHas_n_Emmy_Awards(\"Brian Cranston\", 4).\nHas_n_Emmy_Awards(\"Saoirse Ronan\", 0).\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Answer()\nAnswer() :- Has_n_Emmy_Awards(\"Brian Cranston\", n_Emmy_Awards1), Has_n_Emmy_Awards(\"Saoirse Ronan\", n_Emmy_Awards2), Is_prime(n_Emmy_Awards1 + n_Emmy_Awards2).\n.output Answer\n\n"]}
{"id": 673, "answer": true, "completion": ".decl Is_anime(Show:symbol)\nIs_anime(\"Rick and Morty\").\n.decl Answer()\nAnswer() :- Is_anime(\"Rick and Morty\").\n.output Answer\n\n", "completions": [".decl Is_anime(Show:symbol)\nIs_anime(\"Rick and Morty\").\n.decl Answer()\nAnswer() :- Is_anime(\"Rick and Morty\").\n.output Answer\n\n"]}
{"id": 674, "answer": true, "completion": ".decl Knows(Person:symbol, Subject:symbol)\nKnows(\"Siri\", \"geometry\").\n.decl Answer()\nAnswer() :- Knows(\"Siri\", \"geometry\").\n.output Answer\n\n", "completions": [".decl Knows(Person:symbol, Subject:symbol)\nKnows(\"Siri\", \"geometry\").\n.decl Answer()\nAnswer() :- Knows(\"Siri\", \"geometry\").\n.output Answer\n\n"]}
{"id": 675, "answer": false, "completion": ".decl Is_a_type_of(Type:symbol, Subtype:symbol)\nIs_a_type_of(\"folk music\", \"music\").\nIs_a_type_of(\"metal\", \"music\").\n.decl Answer()\nAnswer() :- Is_a_type_of(\"metal\", \"folk music\").\n.output Answer\n\n", "completions": [".decl Is_a_type_of(Type:symbol, Subtype:symbol)\nIs_a_type_of(\"folk music\", \"music\").\nIs_a_type_of(\"metal\", \"music\").\n.decl Answer()\nAnswer() :- Is_a_type_of(\"metal\", \"folk music\").\n.output Answer\n\n"]}
{"id": 676, "answer": true, "completion": ".decl Has_member(Group:symbol, Person:symbol)\nHas_member(\"Uniting Church in Australia\", \"Muhammed\").\n.decl Answer()\nAnswer() :- Has_member(\"Uniting Church in Australia\", \"Muhammed\").\n.output Answer\n\n", "completions": [".decl Has_member(Group:symbol, Person:symbol)\nHas_member(\"Uniting Church in Australia\", \"Muhammed\").\n.decl Answer()\nAnswer() :- Has_member(\"Uniting Church in Australia\", \"Muhammed\").\n.output Answer\n\n"]}
{"id": 677, "answer": true, "completion": ".decl Admires(Person_A:symbol, Person_B:symbol)\nAdmires(\"Hattori Hanzō\", \"Naruto\").\n.decl Answer()\nAnswer() :- Admires(\"Hattori Hanzō\", \"Naruto\").\n.output Answer\n\n", "completions": [".decl Admires(Person_A:symbol, Person_B:symbol)\nAdmires(\"Hattori Hanzō\", \"Naruto\").\n.decl Answer()\nAnswer() :- Admires(\"Hattori Hanzō\", \"Naruto\").\n.output Answer\n\n"]}
{"id": 678, "answer": true, "completion": ".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Mark Cuban\", \"United States\").\n.decl Is_part_of(Country:symbol, Country_or_territory:symbol)\nIs_part_of(\"United States\", \"Northern Mariana Islands\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Mark Cuban\", country), Is_part_of(country, \"Northern Mariana Islands\").\n.output Answer\n\n\n", "completions": [".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Mark Cuban\", \"United States\").\n.decl Is_part_of(Country:symbol, Country_or_territory:symbol)\nIs_part_of(\"United States\", \"Northern Mariana Islands\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Mark Cuban\", country), Is_part_of(country, \"Northern Mariana Islands\").\n.output Answer\n\n\n"]}
{"id": 679, "answer": true, "completion": ".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"link\", \"hero\").\nHas_occupation(\"astronomer\", \"astronomer\").\n.decl Sees(Person_A:symbol, Person_B:symbol)\nSees(\"link\", \"astronomer\").\n.decl Answer()\nAnswer() :- Has_occupation(\"link\", \"hero\"), Has_occupation(\"astronomer\", \"astronomer\"), Sees(\"link\", \"astronomer\").\n.output Answer\n\n", "completions": [".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"link\", \"hero\").\nHas_occupation(\"astronomer\", \"astronomer\").\n.decl Sees(Person_A:symbol, Person_B:symbol)\nSees(\"link\", \"astronomer\").\n.decl Answer()\nAnswer() :- Has_occupation(\"link\", \"hero\"), Has_occupation(\"astronomer\", \"astronomer\"), Sees(\"link\", \"astronomer\").\n.output Answer\n\n"]}
{"id": 680, "answer": false, "completion": ".decl Has_subreddit(Website:symbol, Subreddit:symbol)\nHas_subreddit(\"reddit\", \"trollxchromosomes\").\nHas_subreddit(\"reddit\", \"askreddit\").\n.decl Answer()\nAnswer() :- Has_subreddit(\"reddit\", subreddit), !Has_subreddit(\"reddit\", \"trollxchromosomes\").\n.output Answer\n\n", "completions": [".decl Has_subreddit(Website:symbol, Subreddit:symbol)\nHas_subreddit(\"reddit\", \"trollxchromosomes\").\nHas_subreddit(\"reddit\", \"askreddit\").\n.decl Answer()\nAnswer() :- Has_subreddit(\"reddit\", subreddit), !Has_subreddit(\"reddit\", \"trollxchromosomes\").\n.output Answer\n\n"]}
{"id": 681, "answer": true, "completion": ".decl Has_value(Currency:symbol, Value:float)\nHas_value(\"pound sterling\", 1.5).\n.decl Answer()\nAnswer() :- Has_value(\"pound sterling\", value), value > 0.\n.output Answer\n\n", "completions": [".decl Has_value(Currency:symbol, Value:float)\nHas_value(\"pound sterling\", 1.5).\n.decl Answer()\nAnswer() :- Has_value(\"pound sterling\", value), value > 0.\n.output Answer\n\n"]}
{"id": 682, "answer": true, "completion": ".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Federal Reserve\", \"Space Needle\").\n.decl Answer()\nAnswer() :- Is_near(\"Federal Reserve\", \"Space Needle\").\n.output Answer\n\n", "completions": [".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Federal Reserve\", \"Space Needle\").\n.decl Answer()\nAnswer() :- Is_near(\"Federal Reserve\", \"Space Needle\").\n.output Answer\n\n"]}
{"id": 683, "answer": false, "completion": ".decl Adherents(Religion:symbol, Person:symbol)\nAdherents(\"Zoroastrianism\", \"Zoroaster\").\nAdherents(\"Islam\", \"Muhammad\").\n.decl Guides(Religion:symbol, Book:symbol)\nGuides(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Adherents(religion, \"Zoroaster\"), Guides(religion, \"Quran\").\n.output Answer\n\n", "completions": [".decl Adherents(Religion:symbol, Person:symbol)\nAdherents(\"Zoroastrianism\", \"Zoroaster\").\nAdherents(\"Islam\", \"Muhammad\").\n.decl Guides(Religion:symbol, Book:symbol)\nGuides(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Adherents(religion, \"Zoroaster\"), Guides(religion, \"Quran\").\n.output Answer\n\n"]}
{"id": 684, "answer": false, "completion": ".decl Has_diameter(Object:symbol, Diameter:float)\nHas_diameter(\"Very Large Telescope\", 8.2).\nHas_diameter(\"largest mountain on Earth\", 8848).\n.decl Answer()\nAnswer() :- Has_diameter(\"Very Large Telescope\", diameter1), Has_diameter(\"largest mountain on Earth\", diameter2), diameter1 > diameter2.\n.output Answer\n\n\n", "completions": [".decl Has_diameter(Object:symbol, Diameter:float)\nHas_diameter(\"Very Large Telescope\", 8.2).\nHas_diameter(\"largest mountain on Earth\", 8848).\n.decl Answer()\nAnswer() :- Has_diameter(\"Very Large Telescope\", diameter1), Has_diameter(\"largest mountain on Earth\", diameter2), diameter1 > diameter2.\n.output Answer\n\n\n"]}
{"id": 685, "answer": false, "completion": ".decl Is_good_for_battling(Object:symbol, Enemy:symbol)\nIs_good_for_battling(\"garlic\", \"vampire\").\n.decl Answer()\nAnswer() :- Is_good_for_battling(\"chives\", \"vampire\").\n.output Answer\n\n", "completions": [".decl Is_good_for_battling(Object:symbol, Enemy:symbol)\nIs_good_for_battling(\"garlic\", \"vampire\").\n.decl Answer()\nAnswer() :- Is_good_for_battling(\"chives\", \"vampire\").\n.output Answer\n\n"]}
{"id": 686, "answer": true, "completion": ".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Doctor of Homeopathy\", \"Doctor of Homeopathy\").\nHas_degree(\"Doctor of Internal Medicine\", \"Doctor of Internal Medicine\").\n.decl Recommends(Doctor:symbol, Treatment:symbol)\nRecommends(\"Doctor of Homeopathy\", \"Quartz\").\nRecommends(\"Doctor of Internal Medicine\", \"Quartz\").\n.decl Answer()\nAnswer() :- Has_degree(doctor1, \"Doctor of Homeopathy\"), Has_degree(doctor2, \"Doctor of Internal Medicine\"), Recommends(doctor1, \"Quartz\"), Recommends(doctor2, \"Quartz\").\n.output Answer\n\n", "completions": [".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Doctor of Homeopathy\", \"Doctor of Homeopathy\").\nHas_degree(\"Doctor of Internal Medicine\", \"Doctor of Internal Medicine\").\n.decl Recommends(Doctor:symbol, Treatment:symbol)\nRecommends(\"Doctor of Homeopathy\", \"Quartz\").\nRecommends(\"Doctor of Internal Medicine\", \"Quartz\").\n.decl Answer()\nAnswer() :- Has_degree(doctor1, \"Doctor of Homeopathy\"), Has_degree(doctor2, \"Doctor of Internal Medicine\"), Recommends(doctor1, \"Quartz\"), Recommends(doctor2, \"Quartz\").\n.output Answer\n\n"]}
{"id": 687, "answer": true, "completion": ".decl Has_virus(Object:symbol, Virus:symbol)\nHas_virus(\"banana\", \"banana virus\").\n.decl Answer()\nAnswer() :- Has_virus(\"banana\", virus).\n.output Answer\n\n", "completions": [".decl Has_virus(Object:symbol, Virus:symbol)\nHas_virus(\"banana\", \"banana virus\").\n.decl Answer()\nAnswer() :- Has_virus(\"banana\", virus).\n.output Answer\n\n"]}
{"id": 688, "answer": false, "completion": ".decl Has_n_discoveries(Telescope:symbol, N_discoveries:float)\nHas_n_discoveries(\"Very Large Telescope\", 1).\nHas_n_discoveries(\"Hubble Space Telescope\", 2).\n.decl Answer()\nAnswer() :- Has_n_discoveries(\"Very Large Telescope\", n_discoveries1), Has_n_discoveries(\"Hubble Space Telescope\", n_discoveries2), n_discoveries1 > n_discoveries2.\n.output Answer\n\n", "completions": [".decl Has_n_discoveries(Telescope:symbol, N_discoveries:float)\nHas_n_discoveries(\"Very Large Telescope\", 1).\nHas_n_discoveries(\"Hubble Space Telescope\", 2).\n.decl Answer()\nAnswer() :- Has_n_discoveries(\"Very Large Telescope\", n_discoveries1), Has_n_discoveries(\"Hubble Space Telescope\", n_discoveries2), n_discoveries1 > n_discoveries2.\n.output Answer\n\n"]}
{"id": 689, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Liberty\", 93).\nHas_height(\"Bohai Sea\", 0).\n.decl Answer()\nAnswer() :- Has_height(\"Statue of Liberty\", height1), Has_height(\"Bohai Sea\", height2), height1 > height2.\n.output Answer\n\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Liberty\", 93).\nHas_height(\"Bohai Sea\", 0).\n.decl Answer()\nAnswer() :- Has_height(\"Statue of Liberty\", height1), Has_height(\"Bohai Sea\", height2), height1 > height2.\n.output Answer\n\n\n"]}
{"id": 690, "answer": true, "completion": ".decl Has_eyesight(Animal:symbol, Eyesight:symbol)\nHas_eyesight(\"flying fish\", \"good\").\n.decl Answer()\nAnswer() :- Has_eyesight(\"flying fish\", \"good\").\n.output Answer\n\n", "completions": [".decl Has_eyesight(Animal:symbol, Eyesight:symbol)\nHas_eyesight(\"flying fish\", \"good\").\n.decl Answer()\nAnswer() :- Has_eyesight(\"flying fish\", \"good\").\n.output Answer\n\n"]}
{"id": 691, "answer": true, "completion": ".decl Has_size(File_format:symbol, Size:float)\nHas_size(\"JPEG\", 0.1).\n.decl Has_resolution(Image:symbol, Resolution:float)\nHas_resolution(\"Vitruvian Man\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"JPEG\", size1), Has_resolution(\"Vitruvian Man\", size2), size1 >= size2.\n.output Answer\n\n\n", "completions": [".decl Has_size(File_format:symbol, Size:float)\nHas_size(\"JPEG\", 0.1).\n.decl Has_resolution(Image:symbol, Resolution:float)\nHas_resolution(\"Vitruvian Man\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"JPEG\", size1), Has_resolution(\"Vitruvian Man\", size2), size1 >= size2.\n.output Answer\n\n\n"]}
{"id": 692, "answer": true, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Pedubastis I\", \"Japanese people\").\n.decl Answer()\nAnswer() :- Knows(\"Pedubastis I\", \"Japanese people\").\n.output Answer\n\n", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Pedubastis I\", \"Japanese people\").\n.decl Answer()\nAnswer() :- Knows(\"Pedubastis I\", \"Japanese people\").\n.output Answer\n\n"]}
{"id": 693, "answer": false, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Kit & Kaboodle\", \"Kit & Kaboodle\").\n.decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Cerberus\", \"Cerberus\").\n.decl Answer()\nAnswer() :- Has_name(\"Kit & Kaboodle\", name1), Has_name(\"Cerberus\", name2), name1 != name2.\n.output Answer\n\n", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Kit & Kaboodle\", \"Kit & Kaboodle\").\n.decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Cerberus\", \"Cerberus\").\n.decl Answer()\nAnswer() :- Has_name(\"Kit & Kaboodle\", name1), Has_name(\"Cerberus\", name2), name1 != name2.\n.output Answer\n\n"]}
{"id": 694, "answer": true, "completion": ".decl Is_weapon(Object:symbol)\nIs_weapon(\"ten-pin bowling pin\").\n.decl Answer()\nAnswer() :- Is_weapon(\"ten-pin bowling pin\").\n.output Answer\n\n", "completions": [".decl Is_weapon(Object:symbol)\nIs_weapon(\"ten-pin bowling pin\").\n.decl Answer()\nAnswer() :- Is_weapon(\"ten-pin bowling pin\").\n.output Answer\n\n"]}
{"id": 695, "answer": true, "completion": ".decl Precedes(Person_A:symbol, Person_B:symbol)\nPrecedes(\"Jia Sidao\", \"Zhu Yuanzhang\").\n.decl Answer()\nAnswer() :- Precedes(\"Jia Sidao\", \"Zhu Yuanzhang\").\n.output Answer\n\n", "completions": [".decl Precedes(Person_A:symbol, Person_B:symbol)\nPrecedes(\"Jia Sidao\", \"Zhu Yuanzhang\").\n.decl Answer()\nAnswer() :- Precedes(\"Jia Sidao\", \"Zhu Yuanzhang\").\n.output Answer\n\n"]}
{"id": 696, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Noah's Ark\", 8).\n.decl Answer()\nAnswer() :- Has_n_members(\"Noah's Ark\", 8).\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Noah's Ark\", 8).\n.decl Answer()\nAnswer() :- Has_n_members(\"Noah's Ark\", 8).\n.output Answer\n\n"]}
{"id": 697, "answer": true, "completion": ".decl Is_a_pope(Person:symbol)\nIs_a_pope(\"Pope John XXIII\").\nIs_a_pope(\"Pope John Paul II\").\n.decl Is_a_saint(Person:symbol)\nIs_a_saint(\"Pope John XXIII\").\nIs_a_saint(\"Pope John Paul II\").\n.decl Answer()\nAnswer() :- Is_a_pope(person), Is_a_saint(person).\n.output Answer\n\n", "completions": [".decl Is_a_pope(Person:symbol)\nIs_a_pope(\"Pope John XXIII\").\nIs_a_pope(\"Pope John Paul II\").\n.decl Is_a_saint(Person:symbol)\nIs_a_saint(\"Pope John XXIII\").\nIs_a_saint(\"Pope John Paul II\").\n.decl Answer()\nAnswer() :- Is_a_pope(person), Is_a_saint(person).\n.output Answer\n\n"]}
{"id": 698, "answer": false, "completion": ".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"Northwest Airlines\", 89).\nLasts_n_years(\"Betty White\", 90).\n.decl Answer()\nAnswer() :- Lasts_n_years(\"Northwest Airlines\", n_years1), Lasts_n_years(\"Betty White\", n_years2), n_years1 > n_years2.\n.output Answer\n\n\n", "completions": [".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"Northwest Airlines\", 89).\nLasts_n_years(\"Betty White\", 90).\n.decl Answer()\nAnswer() :- Lasts_n_years(\"Northwest Airlines\", n_years1), Lasts_n_years(\"Betty White\", n_years2), n_years1 > n_years2.\n.output Answer\n\n\n"]}
{"id": 699, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"bitcoin\", 0.1).\nHas_size(\"pocket\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"bitcoin\", size1), Has_size(\"pocket\", size2), size1 <= size2.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"bitcoin\", 0.1).\nHas_size(\"pocket\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"bitcoin\", size1), Has_size(\"pocket\", size2), size1 <= size2.\n.output Answer\n\n"]}
{"id": 700, "answer": false, "completion": ".decl Reads(Person:symbol, Book:symbol)\nReads(\"Queen Elizabeth I\", \"The Prince\").\nReads(\"Queen Elizabeth I\", \"The Faerie Queene\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen", "completions": [".decl Reads(Person:symbol, Book:symbol)\nReads(\"Queen Elizabeth I\", \"The Prince\").\nReads(\"Queen Elizabeth I\", \"The Faerie Queene\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen Elizabeth I\", \"The Book of the Courtier\").\nReads(\"Queen"]}
{"id": 701, "answer": false, "completion": ".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"anatomical heart\", \"heart\").\nHas_shape(\"symbolic heart\", \"heart\").\n.decl Answer()\nAnswer() :- Has_shape(\"anatomical heart\", shape1), Has_shape(\"symbolic heart\", shape2), shape1 != shape2.\n.output Answer\n\n", "completions": [".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"anatomical heart\", \"heart\").\nHas_shape(\"symbolic heart\", \"heart\").\n.decl Answer()\nAnswer() :- Has_shape(\"anatomical heart\", shape1), Has_shape(\"symbolic heart\", shape2), shape1 != shape2.\n.output Answer\n\n"]}
{"id": 702, "answer": true, "completion": ".decl Is_in_region(Entity:symbol, Region:symbol)\nIs_in_region(\"Riksdag\", \"Scandinavia\").\n.decl Is_political_entity(Entity:symbol)\nIs_political_entity(\"Riksdag\").\n.decl Answer()\nAnswer() :- Is_in_region(\"Riksdag\", \"Scandinavia\"), Is_political_entity(\"Riksdag\").\n.output Answer\n\n", "completions": [".decl Is_in_region(Entity:symbol, Region:symbol)\nIs_in_region(\"Riksdag\", \"Scandinavia\").\n.decl Is_political_entity(Entity:symbol)\nIs_political_entity(\"Riksdag\").\n.decl Answer()\nAnswer() :- Is_in_region(\"Riksdag\", \"Scandinavia\"), Is_political_entity(\"Riksdag\").\n.output Answer\n\n"]}
{"id": 703, "answer": true, "completion": ".decl Is_liquid(Food:symbol)\nIs_liquid(\"soup\").\n.decl Is_solid(Food:symbol)\nIs_solid(\"soup\").\n.decl Answer()\nAnswer() :- Is_liquid(food), Is_solid(food).\n.output Answer\n\n", "completions": [".decl Is_liquid(Food:symbol)\nIs_liquid(\"soup\").\n.decl Is_solid(Food:symbol)\nIs_solid(\"soup\").\n.decl Answer()\nAnswer() :- Is_liquid(food), Is_solid(food).\n.output Answer\n\n"]}
{"id": 704, "answer": false, "completion": ".decl Is_mother_of(Person:symbol, Person:symbol)\nIs_mother_of(\"Mary\", \"Jesus\").\n.decl Is_Greek(Person:symbol)\nIs_Greek(\"Mary\").\n.decl Prays_to(Person:symbol, God:symbol)\nPrays_to(\"Mary\", \"Artemis\").\n.decl Answer()\nAnswer() :- Is_mother_of(\"Mary\", \"Jesus\"), Is_Greek(\"Mary\"), Prays_to(\"Mary\", \"Artemis\").\n.output Answer\n\n", "completions": [".decl Is_mother_of(Person:symbol, Person:symbol)\nIs_mother_of(\"Mary\", \"Jesus\").\n.decl Is_Greek(Person:symbol)\nIs_Greek(\"Mary\").\n.decl Prays_to(Person:symbol, God:symbol)\nPrays_to(\"Mary\", \"Artemis\").\n.decl Answer()\nAnswer() :- Is_mother_of(\"Mary\", \"Jesus\"), Is_Greek(\"Mary\"), Prays_to(\"Mary\", \"Artemis\").\n.output Answer\n\n"]}
{"id": 705, "answer": true, "completion": ".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"South Pole\", \"Antarctica\").\nHas_location(\"Christmas letters\", \"North Pole\").\n.decl Answer()\nAnswer() :- Has_location(\"South Pole\", location1), Has_location(\"Christmas letters\", location2), location1 != location2.\n.output Answer\n\n", "completions": [".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"South Pole\", \"Antarctica\").\nHas_location(\"Christmas letters\", \"North Pole\").\n.decl Answer()\nAnswer() :- Has_location(\"South Pole\", location1), Has_location(\"Christmas letters\", location2), location1 != location2.\n.output Answer\n\n"]}
{"id": 706, "answer": false, "completion": ".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Jack Dempsey\", \"WBC heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBA heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"IBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBO heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"IBO heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"The Ring heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"Lineal heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"NBA heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"NYSAC heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"EBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion", "completions": [".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Jack Dempsey\", \"WBC heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBA heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"IBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBO heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"IBO heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"The Ring heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"Lineal heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"NBA heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"NYSAC heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"EBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBF heavyweight champion\").\nHas_title(\"Jack Dempsey\", \"WBU heavyweight champion"]}
{"id": 707, "answer": true, "completion": ".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Peter Griffin\", \"brewer\").\n.decl Has_expertise(Person:symbol, Expertise:symbol)\nHas_expertise(\"Peter Griffin\", \"brewing\").\n.decl Answer()\nAnswer() :- Has_occupation(\"Peter Griffin\", \"brewer\"), Has_expertise(\"Peter Griffin\", \"brewing\").\n.output Answer\n\n", "completions": [".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Peter Griffin\", \"brewer\").\n.decl Has_expertise(Person:symbol, Expertise:symbol)\nHas_expertise(\"Peter Griffin\", \"brewing\").\n.decl Answer()\nAnswer() :- Has_occupation(\"Peter Griffin\", \"brewer\"), Has_expertise(\"Peter Griffin\", \"brewing\").\n.output Answer\n\n"]}
{"id": 708, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"backpack\", 2).\nHas_volume(\"primate\", 1).\n.decl Answer()\nAnswer() :- Has_volume(\"backpack\", volume1), Has_volume(\"primate\", volume2), volume1 >= volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"backpack\", 2).\nHas_volume(\"primate\", 1).\n.decl Answer()\nAnswer() :- Has_volume(\"backpack\", volume1), Has_volume(\"primate\", volume2), volume1 >= volume2.\n.output Answer\n\n"]}
{"id": 709, "answer": true, "completion": ".decl Has_album_sales(Artist:symbol, Album_sales:float)\nHas_album_sales(\"AC/DC\", 200).\nHas_album_sales(\"Lil Wayne\", 100).\n.decl Costs(Object:symbol, Cost:float)\nCosts(\"B-52 bomber\", 100).\n.decl Answer()\nAnswer() :- Has_album_sales(\"AC/DC\", album_sales1), Has_album_sales(\"Lil Wayne\", album_sales2), Costs(\"B-52 bomber\", cost), album_sales1 > album_sales2, album_sales1 > cost.\n.output Answer\n\n", "completions": [".decl Has_album_sales(Artist:symbol, Album_sales:float)\nHas_album_sales(\"AC/DC\", 200).\nHas_album_sales(\"Lil Wayne\", 100).\n.decl Costs(Object:symbol, Cost:float)\nCosts(\"B-52 bomber\", 100).\n.decl Answer()\nAnswer() :- Has_album_sales(\"AC/DC\", album_sales1), Has_album_sales(\"Lil Wayne\", album_sales2), Costs(\"B-52 bomber\", cost), album_sales1 > album_sales2, album_sales1 > cost.\n.output Answer\n\n"]}
{"id": 710, "answer": false, "completion": ".decl Has_genre(Artist:symbol, Genre:symbol)\nHas_genre(\"Ludacris\", \"hip hop\").\nHas_genre(\"2000's Binaural\", \"rock\").\n.decl Answer()\nAnswer() :- Has_genre(\"Ludacris\", genre1), Has_genre(\"2000's Binaural\", genre2), genre1 = genre2.\n.output Answer\n\n", "completions": [".decl Has_genre(Artist:symbol, Genre:symbol)\nHas_genre(\"Ludacris\", \"hip hop\").\nHas_genre(\"2000's Binaural\", \"rock\").\n.decl Answer()\nAnswer() :- Has_genre(\"Ludacris\", genre1), Has_genre(\"2000's Binaural\", genre2), genre1 = genre2.\n.output Answer\n\n"]}
{"id": 711, "answer": false, "completion": ".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Palm Beach\", 0.4).\n.decl Has_volume(Place:symbol, Volume:float)\nHas_volume(\"palm of your hand\", 0.0004).\n.decl Answer()\nAnswer() :- Has_area(\"Palm Beach\", area), Has_volume(\"palm of your hand\", volume), area <= volume.\n.output Answer\n\n\n", "completions": [".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Palm Beach\", 0.4).\n.decl Has_volume(Place:symbol, Volume:float)\nHas_volume(\"palm of your hand\", 0.0004).\n.decl Answer()\nAnswer() :- Has_area(\"Palm Beach\", area), Has_volume(\"palm of your hand\", volume), area <= volume.\n.output Answer\n\n\n"]}
{"id": 712, "answer": true, "completion": ".decl Lasts_n_years(Food:symbol, N_years:float)\nLasts_n_years(\"pickled cucumbers\", 1000).\n.decl Answer()\nAnswer() :- Lasts_n_years(\"pickled cucumbers\", n_years), n_years >= 1000.\n.output Answer\n\n\n", "completions": [".decl Lasts_n_years(Food:symbol, N_years:float)\nLasts_n_years(\"pickled cucumbers\", 1000).\n.decl Answer()\nAnswer() :- Lasts_n_years(\"pickled cucumbers\", n_years), n_years >= 1000.\n.output Answer\n\n\n"]}
{"id": 713, "answer": true, "completion": ".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Flat Earther\", \"Earth is flat\").\nBelieves(\"Flat Earther\", \"Earth has no magnetic field\").\n.decl Answer()\nAnswer() :- Believes(\"Flat Earther\", \"Earth is flat\"), Believes(\"Flat Earther\", \"Earth has no magnetic field\").\n.output Answer\n\n", "completions": [".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Flat Earther\", \"Earth is flat\").\nBelieves(\"Flat Earther\", \"Earth has no magnetic field\").\n.decl Answer()\nAnswer() :- Believes(\"Flat Earther\", \"Earth is flat\"), Believes(\"Flat Earther\", \"Earth has no magnetic field\").\n.output Answer\n\n"]}
{"id": 714, "answer": true, "completion": ".decl Has_food(Animal:symbol, Food:symbol)\nHas_food(\"Lolcat\", \"cat food\").\n.decl Answer()\nAnswer() :- Has_food(\"Lolcat\", \"cat food\").\n.output Answer\n\n", "completions": [".decl Has_food(Animal:symbol, Food:symbol)\nHas_food(\"Lolcat\", \"cat food\").\n.decl Answer()\nAnswer() :- Has_food(\"Lolcat\", \"cat food\").\n.output Answer\n\n"]}
{"id": 715, "answer": true, "completion": ".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"nickel\", 1728).\nHas_temperature(\"outer core of the earth\", 5500).\n.decl Answer()\nAnswer() :- Has_temperature(\"nickel\", temperature1), Has_temperature(\"outer core of the earth\", temperature2), temperature1 < temperature2.\n.output Answer\n\n", "completions": [".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"nickel\", 1728).\nHas_temperature(\"outer core of the earth\", 5500).\n.decl Answer()\nAnswer() :- Has_temperature(\"nickel\", temperature1), Has_temperature(\"outer core of the earth\", temperature2), temperature1 < temperature2.\n.output Answer\n\n"]}
{"id": 716, "answer": true, "completion": ".decl Has_color(Fish:symbol, Color:symbol)\nHas_color(\"brown rock fish\", \"brown\").\n.decl Has_waters(Country:symbol, Waters:symbol)\nHas_waters(\"Saint Kitts and Nevis\", \"Caribbean Sea\").\n.decl Answer()\nAnswer() :- Has_color(\"brown rock fish\", \"brown\"), Has_waters(\"Saint Kitts and Nevis\", \"Caribbean Sea\").\n.output Answer\n\n", "completions": [".decl Has_color(Fish:symbol, Color:symbol)\nHas_color(\"brown rock fish\", \"brown\").\n.decl Has_waters(Country:symbol, Waters:symbol)\nHas_waters(\"Saint Kitts and Nevis\", \"Caribbean Sea\").\n.decl Answer()\nAnswer() :- Has_color(\"brown rock fish\", \"brown\"), Has_waters(\"Saint Kitts and Nevis\", \"Caribbean Sea\").\n.output Answer\n\n"]}
{"id": 717, "answer": false, "completion": ".decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"January\", 31).\nHas_n_days(\"February\", 28).\nHas_n_days(\"March\", 31).\nHas_n_days(\"April\", 30).\nHas_n_days(\"May\", 31).\nHas_n_days(\"June\", 30).\nHas_n_days(\"July\", 31).\nHas_n_days(\"August\", 31).\nHas_n_days(\"September\", 30).\nHas_n_days(\"October\", 31).\nHas_n_days(\"November\", 30).\nHas_n_days(\"December\", 31).\n.decl Has_n_unlucky_fridays(Year:float, N_unlucky_fridays:float)\nHas_n_unlucky_fridays(2015, 3).\n.decl Answer()\nAnswer() :- Has_n_unlucky_fridays(2015, n_unlucky_fridays), Has_n_days(\"January\", n_days1), Has_n_days(\"February\", n_days2), Has_n_days(\"March\", n_days3), Has_n_days(\"April\", n_days4), Has_n_days(\"May\", n_days5), Has_n_days(\"June\", n_days6), Has_n_days(\"July\", n_days7), Has_n_days(\"August\", n_days8), Has_n_days(\"September\", n_days9), Has_n_days(\"October\", n_days10), Has_n_days(\"November\", n_days11), Has_n_days(\"December\", n_days12), n_unlucky_fridays > (n_days1 + n_days2 + n_days3 + n_days4 + n_days5 + n_days6 + n_days7 + n_days8 + n_days9 + n_days10 + n_days11 + n_days12) / 12.\n.output Answer\n\n", "completions": [".decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"January\", 31).\nHas_n_days(\"February\", 28).\nHas_n_days(\"March\", 31).\nHas_n_days(\"April\", 30).\nHas_n_days(\"May\", 31).\nHas_n_days(\"June\", 30).\nHas_n_days(\"July\", 31).\nHas_n_days(\"August\", 31).\nHas_n_days(\"September\", 30).\nHas_n_days(\"October\", 31).\nHas_n_days(\"November\", 30).\nHas_n_days(\"December\", 31).\n.decl Has_n_unlucky_fridays(Year:float, N_unlucky_fridays:float)\nHas_n_unlucky_fridays(2015, 3).\n.decl Answer()\nAnswer() :- Has_n_unlucky_fridays(2015, n_unlucky_fridays), Has_n_days(\"January\", n_days1), Has_n_days(\"February\", n_days2), Has_n_days(\"March\", n_days3), Has_n_days(\"April\", n_days4), Has_n_days(\"May\", n_days5), Has_n_days(\"June\", n_days6), Has_n_days(\"July\", n_days7), Has_n_days(\"August\", n_days8), Has_n_days(\"September\", n_days9), Has_n_days(\"October\", n_days10), Has_n_days(\"November\", n_days11), Has_n_days(\"December\", n_days12), n_unlucky_fridays > (n_days1 + n_days2 + n_days3 + n_days4 + n_days5 + n_days6 + n_days7 + n_days8 + n_days9 + n_days10 + n_days11 + n_days12) / 12.\n.output Answer\n\n"]}
{"id": 718, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"cell\", 0.000001).\nHas_volume(\"shoebox\", 0.1).\n.decl Answer()\nAnswer() :- Has_volume(\"cell\", volume1), Has_volume(\"shoebox\", volume2), volume1 < volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"cell\", 0.000001).\nHas_volume(\"shoebox\", 0.1).\n.decl Answer()\nAnswer() :- Has_volume(\"cell\", volume1), Has_volume(\"shoebox\", volume2), volume1 < volume2.\n.output Answer\n\n"]}
{"id": 719, "answer": true, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Isaac Newton\", \"mathematician\").\nHas_profession(\"Isaac Newton\", \"physicist\").\nHas_profession(\"Isaac Newton\", \"astronomer\").\nHas_profession(\"Isaac Newton\", \"theologian\").\nHas_profession(\"Isaac Newton\", \"alchemist\").\nHas_profession(\"Isaac Newton\", \"natural philosopher\").\nHas_profession(\"Isaac Newton\", \"politician\").\nHas_profession(\"Isaac Newton\", \"historian\").\nHas_profession(\"Isaac Newton\", \"philosopher\").\nHas_profession(\"Isaac Newton\", \"writer\").\nHas_profession(\"Isaac Newton\", \"inventor\").\nHas_profession(\"Isaac Newton\", \"numerologist\").\n.decl Has_membership(Person:symbol, Organization:symbol)\nHas_membership(\"Isaac Newton\", \"Royal Society\").\n.decl Answer()\nAnswer() :- Has_profession(person, \"numerologist\"), Has_membership(person, \"Royal Society\").\n.output Answer\n\n", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Isaac Newton\", \"mathematician\").\nHas_profession(\"Isaac Newton\", \"physicist\").\nHas_profession(\"Isaac Newton\", \"astronomer\").\nHas_profession(\"Isaac Newton\", \"theologian\").\nHas_profession(\"Isaac Newton\", \"alchemist\").\nHas_profession(\"Isaac Newton\", \"natural philosopher\").\nHas_profession(\"Isaac Newton\", \"politician\").\nHas_profession(\"Isaac Newton\", \"historian\").\nHas_profession(\"Isaac Newton\", \"philosopher\").\nHas_profession(\"Isaac Newton\", \"writer\").\nHas_profession(\"Isaac Newton\", \"inventor\").\nHas_profession(\"Isaac Newton\", \"numerologist\").\n.decl Has_membership(Person:symbol, Organization:symbol)\nHas_membership(\"Isaac Newton\", \"Royal Society\").\n.decl Answer()\nAnswer() :- Has_profession(person, \"numerologist\"), Has_membership(person, \"Royal Society\").\n.output Answer\n\n"]}
{"id": 720, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"bodies\", 70).\nHas_mass(\"hanging\", 0).\n.decl Answer()\nAnswer() :- Has_mass(\"bodies\", mass1), Has_mass(\"hanging\", mass2), mass1 > mass2.\n.output Answer\n\n", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"bodies\", 70).\nHas_mass(\"hanging\", 0).\n.decl Answer()\nAnswer() :- Has_mass(\"bodies\", mass1), Has_mass(\"hanging\", mass2), mass1 > mass2.\n.output Answer\n\n"]}
{"id": 721, "answer": false, "completion": ".decl Is_used_for_work(Animal:symbol)\nIs_used_for_work(\"moose\").\n.decl Is_near(Place:symbol, Place2:symbol)\nIs_near(\"kingdom of Arendelle\", \"mountains\").\n.decl Answer()\nAnswer() :- Is_used_for_work(animal), Is_near(\"kingdom of Arendelle\", place), Is_near(place, place2), Is_near(place2, place3), Is_near(place3, place4), Is_near(place4, place5), Is_near(place5, place6), Is_near(place6, place7), Is_near(place7, place8), Is_near(place8, place9), Is_near(place9, place10), Is_near(place10, place11), Is_near(place11, place12), Is_near(place12, place13), Is_near(place13, place14), Is_near(place14, place15), Is_near(place15, place16), Is_near(place16, place17), Is_near(place17, place18), Is_near(place18, place19), Is_near(place19, place20), Is_near(place20, place21), Is_near(place21, place22), Is_near(place22, place23), Is_near(place23, place24), Is_near(place24, place25), Is_near(place25, place26), Is_near(place26, place27), Is_near(place27, place28), Is_near(place28, place29), Is_near(place29, place30), Is_near(place30, place31), Is_near(place31, place32), Is_near(place32, place33), Is_near(place33, place34), Is_near(place34, place35), Is_near(place35, place36), Is_near(place36, place37), Is_near(place37, place38), Is_near(place38, place39), Is_near(place39, place40), Is_near(place40, place41), Is_near(place41, place42), Is_near(place42, place43), Is_near(place43, place44), Is_near(place44, place45), Is_near(place45, place46), Is_near(place46, place47), Is_near(place47, place48), Is_near(place48, place49), Is_near(place49, place50), Is_near(place50, place51), Is_near(place51, place52), Is_near(place52, place53), Is_near(place53, place54), Is_near(place54, place55), Is_near(place55, place56), Is_near(place56, place57), Is_near(place57, place58), Is_near(place58, place59), Is_near(place59, place60), Is_near(place60, place61), Is_near(place61, place62), Is_near(place62, place63), Is_near(place63, place64), Is_near(place64, place65), Is_near(place65, place66), Is_near(place66, place67), Is_near(place67, place68), Is_near(place68, place69), Is_near(place69, place70), Is_near(place70, place71), Is_near(place71", "completions": [".decl Is_used_for_work(Animal:symbol)\nIs_used_for_work(\"moose\").\n.decl Is_near(Place:symbol, Place2:symbol)\nIs_near(\"kingdom of Arendelle\", \"mountains\").\n.decl Answer()\nAnswer() :- Is_used_for_work(animal), Is_near(\"kingdom of Arendelle\", place), Is_near(place, place2), Is_near(place2, place3), Is_near(place3, place4), Is_near(place4, place5), Is_near(place5, place6), Is_near(place6, place7), Is_near(place7, place8), Is_near(place8, place9), Is_near(place9, place10), Is_near(place10, place11), Is_near(place11, place12), Is_near(place12, place13), Is_near(place13, place14), Is_near(place14, place15), Is_near(place15, place16), Is_near(place16, place17), Is_near(place17, place18), Is_near(place18, place19), Is_near(place19, place20), Is_near(place20, place21), Is_near(place21, place22), Is_near(place22, place23), Is_near(place23, place24), Is_near(place24, place25), Is_near(place25, place26), Is_near(place26, place27), Is_near(place27, place28), Is_near(place28, place29), Is_near(place29, place30), Is_near(place30, place31), Is_near(place31, place32), Is_near(place32, place33), Is_near(place33, place34), Is_near(place34, place35), Is_near(place35, place36), Is_near(place36, place37), Is_near(place37, place38), Is_near(place38, place39), Is_near(place39, place40), Is_near(place40, place41), Is_near(place41, place42), Is_near(place42, place43), Is_near(place43, place44), Is_near(place44, place45), Is_near(place45, place46), Is_near(place46, place47), Is_near(place47, place48), Is_near(place48, place49), Is_near(place49, place50), Is_near(place50, place51), Is_near(place51, place52), Is_near(place52, place53), Is_near(place53, place54), Is_near(place54, place55), Is_near(place55, place56), Is_near(place56, place57), Is_near(place57, place58), Is_near(place58, place59), Is_near(place59, place60), Is_near(place60, place61), Is_near(place61, place62), Is_near(place62, place63), Is_near(place63, place64), Is_near(place64, place65), Is_near(place65, place66), Is_near(place66, place67), Is_near(place67, place68), Is_near(place68, place69), Is_near(place69, place70), Is_near(place70, place71), Is_near(place71"]}
{"id": 722, "answer": false, "completion": ".decl Has_letters(Numeral:symbol, Letters:symbol)\nHas_letters(\"I\", \"I\").\nHas_letters(\"II\", \"II\").\nHas_letters(\"III\", \"III\").\nHas_letters(\"IV\", \"IV\").\nHas_letters(\"V\", \"V\").\nHas_letters(\"VI\", \"VI\").\nHas_letters(\"VII\", \"VII\").\nHas_letters(\"VIII\", \"VIII\").\nHas_letters(\"IX\", \"IX\").\nHas_letters(\"X\", \"X\").\nHas_letters(\"XI\", \"XI\").\nHas_letters(\"XII\", \"XII\").\nHas_letters(\"XIII\", \"XIII\").\nHas_letters(\"XIV\", \"XIV\").\nHas_letters(\"XV\", \"XV\").\nHas_letters(\"XVI\", \"XVI\").\nHas_letters(\"XVII\", \"XVII\").\nHas_letters(\"XVIII\", \"XVIII\").\nHas_letters(\"XIX\", \"XIX\").\nHas_letters(\"XX\", \"XX\").\nHas_letters(\"XXI\", \"XXI\").\nHas_letters(\"XXII\", \"XXII\").\nHas_letters(\"XXIII\", \"XXIII\").\nHas_letters(\"XXIV\", \"XXIV\").\nHas_letters(\"XXV\", \"XXV\").\nHas_letters(\"XXVI\", \"XXVI\").\nHas_letters(\"XXVII\", \"XXVII\").\nHas_letters(\"XXVIII\", \"XXVIII\").\nHas_letters(\"XXIX\", \"XXIX\").\nHas_letters(\"XXX\", \"XXX\").\nHas_letters(\"XXXI\", \"XXXI\").\nHas_letters(\"XXXII\", \"XXXII\").\nHas_letters(\"XXXIII\", \"XXXIII\").\nHas_letters(\"XXXIV\", \"XXXIV\").\nHas_letters(\"XXXV\", \"XXXV\").\nHas_letters(\"XXXVI\", \"XXXVI\").\nHas_letters(\"XXXVII\", \"XXXVII\").\nHas_letters(\"XXXVIII\", \"XXXVIII\").\nHas_letters(\"XXXIX\", \"XXXIX\").\nHas_letters(\"XL\", \"XL\").\nHas_letters(\"XLI\", \"XLI\").\nHas_letters(\"XLII\", \"XLII\").\nHas_letters(\"XLIII\", \"XLIII\").\nHas_letters(\"XLIV\", \"XLIV\").\nHas_letters(\"XLV\", \"XLV\").\nHas_letters(\"XLVI\", \"XLVI\").\nHas_letters(\"XLVII\", \"XLVII\").\nHas_letters(\"XLVIII\", \"XLVIII\").\nHas_letters(\"XLIX\", \"XLIX\").\nHas_letters(\"L\", \"L\").\nHas_letters(\"LI\", \"LI\").\nHas_letters(\"LII\", \"LII\").\nHas_letters(\"LIII\", \"LIII\").\nHas_letters(\"LIV\", \"LIV\").\nHas_letters(\"LV\", \"LV\").\nHas_letters(\"LVI\", \"LVI\").\nHas_letters(\"LVII\", \"LVII\").\nHas_letters(\"LVIII\", \"LVIII\").\nHas_letters(\"LIX\", \"LIX\").\nHas_letters(\"LX\", \"LX\").\nHas_letters(\"LXI\", \"LXI\").\nHas_letters(\"LXII\", \"LXII\").\nHas_letters(\"LXIII\", \"LXIII\").\nHas_letters(\"LXIV\", \"LXIV\").\nHas_letters(\"LXV\", \"LXV\").\nHas_letters(\"LXVI\", \"LX", "completions": [".decl Has_letters(Numeral:symbol, Letters:symbol)\nHas_letters(\"I\", \"I\").\nHas_letters(\"II\", \"II\").\nHas_letters(\"III\", \"III\").\nHas_letters(\"IV\", \"IV\").\nHas_letters(\"V\", \"V\").\nHas_letters(\"VI\", \"VI\").\nHas_letters(\"VII\", \"VII\").\nHas_letters(\"VIII\", \"VIII\").\nHas_letters(\"IX\", \"IX\").\nHas_letters(\"X\", \"X\").\nHas_letters(\"XI\", \"XI\").\nHas_letters(\"XII\", \"XII\").\nHas_letters(\"XIII\", \"XIII\").\nHas_letters(\"XIV\", \"XIV\").\nHas_letters(\"XV\", \"XV\").\nHas_letters(\"XVI\", \"XVI\").\nHas_letters(\"XVII\", \"XVII\").\nHas_letters(\"XVIII\", \"XVIII\").\nHas_letters(\"XIX\", \"XIX\").\nHas_letters(\"XX\", \"XX\").\nHas_letters(\"XXI\", \"XXI\").\nHas_letters(\"XXII\", \"XXII\").\nHas_letters(\"XXIII\", \"XXIII\").\nHas_letters(\"XXIV\", \"XXIV\").\nHas_letters(\"XXV\", \"XXV\").\nHas_letters(\"XXVI\", \"XXVI\").\nHas_letters(\"XXVII\", \"XXVII\").\nHas_letters(\"XXVIII\", \"XXVIII\").\nHas_letters(\"XXIX\", \"XXIX\").\nHas_letters(\"XXX\", \"XXX\").\nHas_letters(\"XXXI\", \"XXXI\").\nHas_letters(\"XXXII\", \"XXXII\").\nHas_letters(\"XXXIII\", \"XXXIII\").\nHas_letters(\"XXXIV\", \"XXXIV\").\nHas_letters(\"XXXV\", \"XXXV\").\nHas_letters(\"XXXVI\", \"XXXVI\").\nHas_letters(\"XXXVII\", \"XXXVII\").\nHas_letters(\"XXXVIII\", \"XXXVIII\").\nHas_letters(\"XXXIX\", \"XXXIX\").\nHas_letters(\"XL\", \"XL\").\nHas_letters(\"XLI\", \"XLI\").\nHas_letters(\"XLII\", \"XLII\").\nHas_letters(\"XLIII\", \"XLIII\").\nHas_letters(\"XLIV\", \"XLIV\").\nHas_letters(\"XLV\", \"XLV\").\nHas_letters(\"XLVI\", \"XLVI\").\nHas_letters(\"XLVII\", \"XLVII\").\nHas_letters(\"XLVIII\", \"XLVIII\").\nHas_letters(\"XLIX\", \"XLIX\").\nHas_letters(\"L\", \"L\").\nHas_letters(\"LI\", \"LI\").\nHas_letters(\"LII\", \"LII\").\nHas_letters(\"LIII\", \"LIII\").\nHas_letters(\"LIV\", \"LIV\").\nHas_letters(\"LV\", \"LV\").\nHas_letters(\"LVI\", \"LVI\").\nHas_letters(\"LVII\", \"LVII\").\nHas_letters(\"LVIII\", \"LVIII\").\nHas_letters(\"LIX\", \"LIX\").\nHas_letters(\"LX\", \"LX\").\nHas_letters(\"LXI\", \"LXI\").\nHas_letters(\"LXII\", \"LXII\").\nHas_letters(\"LXIII\", \"LXIII\").\nHas_letters(\"LXIV\", \"LXIV\").\nHas_letters(\"LXV\", \"LXV\").\nHas_letters(\"LXVI\", \"LX"]}
{"id": 723, "answer": true, "completion": ".decl Is_ingredient(Ingredient:symbol, Cuisine:symbol)\nIs_ingredient(\"pig meat\", \"Hawaiian cuisine\").\n.decl Is_inedible(Ingredient:symbol)\nIs_inedible(\"pig meat\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"pig meat\", \"Hawaiian cuisine\"), Is_inedible(\"pig meat\").\n.output Answer\n\n", "completions": [".decl Is_ingredient(Ingredient:symbol, Cuisine:symbol)\nIs_ingredient(\"pig meat\", \"Hawaiian cuisine\").\n.decl Is_inedible(Ingredient:symbol)\nIs_inedible(\"pig meat\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"pig meat\", \"Hawaiian cuisine\"), Is_inedible(\"pig meat\").\n.output Answer\n\n"]}
{"id": 724, "answer": false, "completion": ".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"Esperanza Base\", -3).\n.decl Is_comfortable_temperature(Temperature:float)\nIs_comfortable_temperature(temperature) :- temperature > 0.\n.decl Answer()\nAnswer() :- Has_temperature(\"Esperanza Base\", temperature), Is_comfortable_temperature(temperature).\n.output Answer\n\n\n", "completions": [".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"Esperanza Base\", -3).\n.decl Is_comfortable_temperature(Temperature:float)\nIs_comfortable_temperature(temperature) :- temperature > 0.\n.decl Answer()\nAnswer() :- Has_temperature(\"Esperanza Base\", temperature), Is_comfortable_temperature(temperature).\n.output Answer\n\n\n"]}
{"id": 725, "answer": true, "completion": ".decl Has_allergy(Person:symbol, Allergen:symbol)\nHas_allergy(\"The Little Prince\", \"flowers\").\n.decl Answer()\nAnswer() :- Has_allergy(\"The Little Prince\", \"flowers\").\n.output Answer\n\n", "completions": [".decl Has_allergy(Person:symbol, Allergen:symbol)\nHas_allergy(\"The Little Prince\", \"flowers\").\n.decl Answer()\nAnswer() :- Has_allergy(\"The Little Prince\", \"flowers\").\n.output Answer\n\n"]}
{"id": 726, "answer": true, "completion": ".decl Teaches(Course:symbol, Topic:symbol)\nTeaches(\"cell biology\", \"cell\").\nTeaches(\"cell biology\", \"life cycle\").\nTeaches(\"cell biology\", \"Al Qaeda\").\n.decl Answer()\nAnswer() :- Teaches(\"cell biology\", \"life cycle\"), Teaches(\"cell biology\", \"Al Qaeda\").\n.output Answer\n\n", "completions": [".decl Teaches(Course:symbol, Topic:symbol)\nTeaches(\"cell biology\", \"cell\").\nTeaches(\"cell biology\", \"life cycle\").\nTeaches(\"cell biology\", \"Al Qaeda\").\n.decl Answer()\nAnswer() :- Teaches(\"cell biology\", \"life cycle\"), Teaches(\"cell biology\", \"Al Qaeda\").\n.output Answer\n\n"]}
{"id": 727, "answer": true, "completion": ".decl Has_effect(Thing:symbol, Effect:symbol)\nHas_effect(\"Coca\", \"nosebleed\").\n.decl Answer()\nAnswer() :- Has_effect(\"Coca\", \"nosebleed\").\n.output Answer\n\n", "completions": [".decl Has_effect(Thing:symbol, Effect:symbol)\nHas_effect(\"Coca\", \"nosebleed\").\n.decl Answer()\nAnswer() :- Has_effect(\"Coca\", \"nosebleed\").\n.output Answer\n\n"]}
{"id": 728, "answer": true, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Justin Bieber votes\", \"October\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"Justin Bieber votes\", \"October\").\n.output Answer\n\n", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Justin Bieber votes\", \"October\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"Justin Bieber votes\", \"October\").\n.output Answer\n\n"]}
{"id": 729, "answer": false, "completion": ".decl Uses_as_seasoning(Person:symbol, Ingredient:symbol)\nUses_as_seasoning(\"Gordon Ramsey\", \"salt\").\nUses_as_seasoning(\"Gordon Ramsey\", \"pepper\").\n.decl Answer()\nAnswer() :- Uses_as_seasoning(\"Gordon Ramsey\", \"uranium\").\n.output Answer\n\n", "completions": [".decl Uses_as_seasoning(Person:symbol, Ingredient:symbol)\nUses_as_seasoning(\"Gordon Ramsey\", \"salt\").\nUses_as_seasoning(\"Gordon Ramsey\", \"pepper\").\n.decl Answer()\nAnswer() :- Uses_as_seasoning(\"Gordon Ramsey\", \"uranium\").\n.output Answer\n\n"]}
{"id": 730, "answer": false, "completion": ".decl Appreciates(Person_A:symbol, Person_B:symbol)\nAppreciates(\"Stephen Sauvestre\", \"Eiffel\").\n.decl Designed(Person:symbol, Structure:symbol)\nDesigned(\"Stephen Sauvestre\", \"Eiffel Tower\").\nDesigned(\"Tachū Naitō\", \"Tokyo Tower\").\n.decl Answer()\nAnswer() :- Designed(person, \"Tokyo Tower\"), Appreciates(person, \"Stephen Sauvestre\").\n.output Answer\n\n\n", "completions": [".decl Appreciates(Person_A:symbol, Person_B:symbol)\nAppreciates(\"Stephen Sauvestre\", \"Eiffel\").\n.decl Designed(Person:symbol, Structure:symbol)\nDesigned(\"Stephen Sauvestre\", \"Eiffel Tower\").\nDesigned(\"Tachū Naitō\", \"Tokyo Tower\").\n.decl Answer()\nAnswer() :- Designed(person, \"Tokyo Tower\"), Appreciates(person, \"Stephen Sauvestre\").\n.output Answer\n\n\n"]}
{"id": 731, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Wizard of Oz Scarecrow\", 0).\n.decl Causes(Disease:symbol, Age:float)\nCauses(\"Cerebral palsy\", 0).\n.decl Answer()\nAnswer() :- Has_age(\"Wizard of Oz Scarecrow\", age), Causes(\"Cerebral palsy\", age).\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Wizard of Oz Scarecrow\", 0).\n.decl Causes(Disease:symbol, Age:float)\nCauses(\"Cerebral palsy\", 0).\n.decl Answer()\nAnswer() :- Has_age(\"Wizard of Oz Scarecrow\", age), Causes(\"Cerebral palsy\", age).\n.output Answer\n\n"]}
{"id": 732, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"hamster\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"leap year\", n_years1), Last_n_years(\"hamster\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"hamster\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"leap year\", n_years1), Last_n_years(\"hamster\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n"]}
{"id": 733, "answer": true, "completion": ".decl Married(Person1:symbol, Person2:symbol)\nMarried(\"Johann Sebastian Bach\", \"Maria Barbara Bach\").\nMarried(\"Johann Sebastian Bach\", \"Anna Magdalena Bach\").\n.decl Answer()\nAnswer() :- Married(\"Johann Sebastian Bach\", person1), Married(\"Johann Sebastian Bach\", person2), person1 != person2.\n.output Answer\n\n", "completions": [".decl Married(Person1:symbol, Person2:symbol)\nMarried(\"Johann Sebastian Bach\", \"Maria Barbara Bach\").\nMarried(\"Johann Sebastian Bach\", \"Anna Magdalena Bach\").\n.decl Answer()\nAnswer() :- Married(\"Johann Sebastian Bach\", person1), Married(\"Johann Sebastian Bach\", person2), person1 != person2.\n.output Answer\n\n"]}
{"id": 734, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"baby gray whale\", 4.5).\nHas_length(\"tractor-trailer\", 13.7).\n.decl Answer()\nAnswer() :- Has_length(\"baby gray whale\", length1), Has_length(\"tractor-trailer\", length2), length1 < length2.\n.output Answer\n\n", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"baby gray whale\", 4.5).\nHas_length(\"tractor-trailer\", 13.7).\n.decl Answer()\nAnswer() :- Has_length(\"baby gray whale\", length1), Has_length(\"tractor-trailer\", length2), length1 < length2.\n.output Answer\n\n"]}
{"id": 735, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"black pepper\", \"ground bell peppers\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"black pepper\", \"ground bell peppers\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"black pepper\", \"ground bell peppers\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"black pepper\", \"ground bell peppers\").\n.output Answer\n\n"]}
{"id": 736, "answer": true, "completion": ".decl Teaches(Person_A:symbol, Person_B:symbol, Skill:symbol)\nTeaches(\"Native American tribes\", \"Spaniards\", \"cultivate maize\").\n.decl Answer()\nAnswer() :- Teaches(\"Native American tribes\", \"Spaniards\", \"cultivate maize\").\n.output Answer\n\n", "completions": [".decl Teaches(Person_A:symbol, Person_B:symbol, Skill:symbol)\nTeaches(\"Native American tribes\", \"Spaniards\", \"cultivate maize\").\n.decl Answer()\nAnswer() :- Teaches(\"Native American tribes\", \"Spaniards\", \"cultivate maize\").\n.output Answer\n\n"]}
{"id": 737, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Sojourner Truth\", 1.5).\nHas_height(\"Washington Monument\", 169).\n.decl Answer()\nAnswer() :- Has_height(\"Sojourner Truth\", height1), Has_height(\"Washington Monument\", height2), height1 < height2.\n.output Answer\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Sojourner Truth\", 1.5).\nHas_height(\"Washington Monument\", 169).\n.decl Answer()\nAnswer() :- Has_height(\"Sojourner Truth\", height1), Has_height(\"Washington Monument\", height2), height1 < height2.\n.output Answer\n\n"]}
{"id": 738, "answer": true, "completion": ".decl Is_at(Person:symbol, Place:symbol)\nIs_at(\"psychologist\", \"office\").\nIs_at(\"you\", \"supermarket\").\n.decl Answer()\nAnswer() :- Is_at(\"psychologist\", place1), Is_at(\"you\", place2), place1 != place2.\n.output Answer\n\n", "completions": [".decl Is_at(Person:symbol, Place:symbol)\nIs_at(\"psychologist\", \"office\").\nIs_at(\"you\", \"supermarket\").\n.decl Answer()\nAnswer() :- Is_at(\"psychologist\", place1), Is_at(\"you\", place2), place1 != place2.\n.output Answer\n\n"]}
{"id": 739, "answer": true, "completion": ".decl Has_n_ratings(Movie:symbol, N_ratings:float)\nHas_n_ratings(\"Hamlet\", 1).\nHas_n_ratings(\"Comedy of Errors\", 0).\n.decl Answer()\nAnswer() :- Has_n_ratings(\"Hamlet\", n_ratings1), Has_n_ratings(\"Comedy of Errors\", n_ratings2), n_ratings1 > n_ratings2.\n.output Answer\n\n", "completions": [".decl Has_n_ratings(Movie:symbol, N_ratings:float)\nHas_n_ratings(\"Hamlet\", 1).\nHas_n_ratings(\"Comedy of Errors\", 0).\n.decl Answer()\nAnswer() :- Has_n_ratings(\"Hamlet\", n_ratings1), Has_n_ratings(\"Comedy of Errors\", n_ratings2), n_ratings1 > n_ratings2.\n.output Answer\n\n"]}
{"id": 740, "answer": true, "completion": ".decl Has_graffiti(Place:symbol, Graffiti:symbol)\nHas_graffiti(\"Alcatraz\", \"historic graffiti\").\n.decl Answer()\nAnswer() :- Has_graffiti(\"Alcatraz\", \"historic graffiti\").\n.output Answer\n\n", "completions": [".decl Has_graffiti(Place:symbol, Graffiti:symbol)\nHas_graffiti(\"Alcatraz\", \"historic graffiti\").\n.decl Answer()\nAnswer() :- Has_graffiti(\"Alcatraz\", \"historic graffiti\").\n.output Answer\n\n"]}
{"id": 741, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Pyrenees\", 430).\n.decl Has_speed(Person:symbol, Speed:float)\nHas_speed(\"elite runner\", 20).\n.decl Answer()\nAnswer() :- Has_length(\"Pyrenees\", length), Has_speed(\"elite runner\", speed), length / speed <= 24.\n.output Answer\n\n", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Pyrenees\", 430).\n.decl Has_speed(Person:symbol, Speed:float)\nHas_speed(\"elite runner\", 20).\n.decl Answer()\nAnswer() :- Has_length(\"Pyrenees\", length), Has_speed(\"elite runner\", speed), length / speed <= 24.\n.output Answer\n\n"]}
{"id": 742, "answer": false, "completion": ".decl Is_visible(Object:symbol, Place:symbol)\nIs_visible(\"moon\", \"outside\").\n.decl Is_inside(Place1:symbol, Place2:symbol)\nIs_inside(\"Wembley Arena\", \"London\").\nIs_inside(\"outside\", \"London\").\n.decl Answer()\nAnswer() :- Is_visible(\"moon\", place1), Is_inside(\"Wembley Arena\", place2), place1 = place2.\n.output Answer\n\n", "completions": [".decl Is_visible(Object:symbol, Place:symbol)\nIs_visible(\"moon\", \"outside\").\n.decl Is_inside(Place1:symbol, Place2:symbol)\nIs_inside(\"Wembley Arena\", \"London\").\nIs_inside(\"outside\", \"London\").\n.decl Answer()\nAnswer() :- Is_visible(\"moon\", place1), Is_inside(\"Wembley Arena\", place2), place1 = place2.\n.output Answer\n\n"]}
{"id": 743, "answer": true, "completion": ".decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"first letter row of QWERTY keyboard\", \"Q\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"W\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"E\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"R\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"T\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"Y\").\n.decl Answer()\nAnswer() :- Has_letter(\"first letter row of QWERTY keyboard\", letter1), Has_letter(\"first letter row of QWERTY keyboard\", letter2), letter1 = letter2.\n.output Answer\n\n", "completions": [".decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"first letter row of QWERTY keyboard\", \"Q\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"W\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"E\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"R\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"T\").\nHas_letter(\"first letter row of QWERTY keyboard\", \"Y\").\n.decl Answer()\nAnswer() :- Has_letter(\"first letter row of QWERTY keyboard\", letter1), Has_letter(\"first letter row of QWERTY keyboard\", letter2), letter1 = letter2.\n.output Answer\n\n"]}
{"id": 744, "answer": false, "completion": ".decl Has_been_discovered(Object:symbol, Place:symbol)\nHas_been_discovered(\"tumulus\", \"Earth\").\n.decl Answer()\nAnswer() :- Has_been_discovered(\"tumulus\", \"Mars\").\n.output Answer\n\n", "completions": [".decl Has_been_discovered(Object:symbol, Place:symbol)\nHas_been_discovered(\"tumulus\", \"Earth\").\n.decl Answer()\nAnswer() :- Has_been_discovered(\"tumulus\", \"Mars\").\n.output Answer\n\n"]}
{"id": 745, "answer": true, "completion": ".decl Is_symbol_of(Symbol:symbol, Virtue:symbol)\nIs_symbol_of(\"Pan\", \"virtue\").\nIs_symbol_of(\"Pan\", \"virginity\").\n.decl Answer()\nAnswer() :- Is_symbol_of(\"Pan\", \"virtue\").\nAnswer() :- Is_symbol_of(\"Pan\", \"virginity\").\n.output Answer\n\n", "completions": [".decl Is_symbol_of(Symbol:symbol, Virtue:symbol)\nIs_symbol_of(\"Pan\", \"virtue\").\nIs_symbol_of(\"Pan\", \"virginity\").\n.decl Answer()\nAnswer() :- Is_symbol_of(\"Pan\", \"virtue\").\nAnswer() :- Is_symbol_of(\"Pan\", \"virginity\").\n.output Answer\n\n"]}
{"id": 746, "answer": true, "completion": ".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Mike Pence\", \"Vice President\").\n.decl Will_take_over(Person1:symbol, Person2:symbol, Year:float)\nWill_take_over(\"Justin Bieber\", \"Mike Pence\", 2020).\n.decl Answer()\nAnswer() :- Has_position(\"Mike Pence\", \"Vice President\"), Will_take_over(\"Justin Bieber\", \"Mike Pence\", 2020).\n.output Answer\n\n", "completions": [".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Mike Pence\", \"Vice President\").\n.decl Will_take_over(Person1:symbol, Person2:symbol, Year:float)\nWill_take_over(\"Justin Bieber\", \"Mike Pence\", 2020).\n.decl Answer()\nAnswer() :- Has_position(\"Mike Pence\", \"Vice President\"), Will_take_over(\"Justin Bieber\", \"Mike Pence\", 2020).\n.output Answer\n\n"]}
{"id": 747, "answer": true, "completion": ".decl Has_title(Song:symbol, Title:symbol)\nHas_title(\"Diamonds Are Forever\", \"Diamonds Are Forever\").\n.decl Is_true(Statement:symbol)\nIs_true(\"Diamonds Are Forever\").\n.decl Answer()\nAnswer() :- Has_title(\"Diamonds Are Forever\", title), Is_true(title).\n.output Answer\n\n", "completions": [".decl Has_title(Song:symbol, Title:symbol)\nHas_title(\"Diamonds Are Forever\", \"Diamonds Are Forever\").\n.decl Is_true(Statement:symbol)\nIs_true(\"Diamonds Are Forever\").\n.decl Answer()\nAnswer() :- Has_title(\"Diamonds Are Forever\", title), Is_true(title).\n.output Answer\n\n"]}
{"id": 748, "answer": true, "completion": ".decl Has_winner(Event:symbol, Winner:symbol)\nHas_winner(\"French Revolution\", \"France\").\n.decl Answer()\nAnswer() :- Has_winner(\"French Revolution\", \"France\").\n.output Answer\n\n", "completions": [".decl Has_winner(Event:symbol, Winner:symbol)\nHas_winner(\"French Revolution\", \"France\").\n.decl Answer()\nAnswer() :- Has_winner(\"French Revolution\", \"France\").\n.output Answer\n\n"]}
{"id": 749, "answer": true, "completion": ".decl Is_legal(Game:symbol, Emulator:symbol)\nIs_legal(\"classic nintendo games\", \"emulator\").\n.decl Answer()\nAnswer() :- Is_legal(\"classic nintendo games\", \"emulator\").\n.output Answer\n\n", "completions": [".decl Is_legal(Game:symbol, Emulator:symbol)\nIs_legal(\"classic nintendo games\", \"emulator\").\n.decl Answer()\nAnswer() :- Is_legal(\"classic nintendo games\", \"emulator\").\n.output Answer\n\n"]}
{"id": 750, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Jason\", 50).\n.decl Has_n_players(Sport:symbol, N_players:float)\nHas_n_players(\"polo\", 4).\n.decl Answer()\nAnswer() :- Has_n_children(\"Jason\", n_children), Has_n_players(\"polo\", n_players), n_children >= n_players.\n.output Answer\n\n\n", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Jason\", 50).\n.decl Has_n_players(Sport:symbol, N_players:float)\nHas_n_players(\"polo\", 4).\n.decl Answer()\nAnswer() :- Has_n_children(\"Jason\", n_children), Has_n_players(\"polo\", n_players), n_children >= n_players.\n.output Answer\n\n\n"]}
{"id": 751, "answer": false, "completion": ".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Tony Bennett\", \"Dominic\").\n.decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Randy Couture\", \"Dominic\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Tony Bennett\", middle_name), Has_middle_name(person, middle_name).\n.output Answer\n\n", "completions": [".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Tony Bennett\", \"Dominic\").\n.decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Randy Couture\", \"Dominic\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Tony Bennett\", middle_name), Has_middle_name(person, middle_name).\n.output Answer\n\n"]}
{"id": 752, "answer": true, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"store bought milk\", \"cream at the top\").\n.decl Answer()\nAnswer() :- Has_property(\"store bought milk\", \"cream at the top\").\n.output Answer\n\n", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"store bought milk\", \"cream at the top\").\n.decl Answer()\nAnswer() :- Has_property(\"store bought milk\", \"cream at the top\").\n.output Answer\n\n"]}
{"id": 753, "answer": true, "completion": ".decl Is_important_in(Thing:symbol, Place:symbol)\nIs_important_in(\"silicon\", \"California\").\n.decl Answer()\nAnswer() :- Is_important_in(\"silicon\", \"California\").\n.output Answer\n\n", "completions": [".decl Is_important_in(Thing:symbol, Place:symbol)\nIs_important_in(\"silicon\", \"California\").\n.decl Answer()\nAnswer() :- Is_important_in(\"silicon\", \"California\").\n.output Answer\n\n"]}
{"id": 754, "answer": false, "completion": ".decl Has_word(Book:symbol, Word:symbol)\nHas_word(\"Torah\", \"God\").\nHas_word(\"Torah\", \"Israel\").\nHas_word(\"Torah\", \"Moses\").\nHas_word(\"Torah\", \"Abraham\").\nHas_word(\"Torah\", \"Isaac\").\nHas_word(\"Torah\", \"Jacob\").\nHas_word(\"Torah\", \"Joseph\").\nHas_word(\"Torah\", \"David\").\nHas_word(\"Torah\", \"Solomon\").\nHas_word(\"Torah\", \"Jerusalem\").\nHas_word(\"Torah\", \"Babylon\").\nHas_word(\"Torah\", \"Egypt\").\nHas_word(\"Torah\", \"Pharaoh\").\nHas_word(\"Torah\", \"Canaan\").\nHas_word(\"Torah\", \"Midian\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"", "completions": [".decl Has_word(Book:symbol, Word:symbol)\nHas_word(\"Torah\", \"God\").\nHas_word(\"Torah\", \"Israel\").\nHas_word(\"Torah\", \"Moses\").\nHas_word(\"Torah\", \"Abraham\").\nHas_word(\"Torah\", \"Isaac\").\nHas_word(\"Torah\", \"Jacob\").\nHas_word(\"Torah\", \"Joseph\").\nHas_word(\"Torah\", \"David\").\nHas_word(\"Torah\", \"Solomon\").\nHas_word(\"Torah\", \"Jerusalem\").\nHas_word(\"Torah\", \"Babylon\").\nHas_word(\"Torah\", \"Egypt\").\nHas_word(\"Torah\", \"Pharaoh\").\nHas_word(\"Torah\", \"Canaan\").\nHas_word(\"Torah\", \"Midian\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \"Midianite\").\nHas_word(\"Torah\", \"Midianites\").\nHas_word(\"Torah\", \""]}
{"id": 755, "answer": false, "completion": ".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Brooke Shields\", 54).\n.decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"celery\", 6).\n.decl Answer()\nAnswer() :- Has_weight(\"Brooke Shields\", weight), Has_calories(\"celery\", calories), weight <= calories.\n.output Answer\n\n", "completions": [".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Brooke Shields\", 54).\n.decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"celery\", 6).\n.decl Answer()\nAnswer() :- Has_weight(\"Brooke Shields\", weight), Has_calories(\"celery\", calories), weight <= calories.\n.output Answer\n\n"]}
{"id": 756, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"500GB USB device\", 500).\n.decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"Netflix shows\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"500GB USB device\", size), Has_duration(\"Netflix shows\", duration), size >= 10 * duration.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"500GB USB device\", 500).\n.decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"Netflix shows\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"500GB USB device\", size), Has_duration(\"Netflix shows\", duration), size >= 10 * duration.\n.output Answer\n\n"]}
{"id": 757, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Arnold Schwarzenegger\", 136).\nHas_weight(\"adult Black rhinoceros\", 2200).\n.decl Answer()\nAnswer() :- Has_weight(\"Arnold Schwarzenegger\", weight1), Has_weight(\"adult Black rhinoceros\", weight2), weight1 > weight2.\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Arnold Schwarzenegger\", 136).\nHas_weight(\"adult Black rhinoceros\", 2200).\n.decl Answer()\nAnswer() :- Has_weight(\"Arnold Schwarzenegger\", weight1), Has_weight(\"adult Black rhinoceros\", weight2), weight1 > weight2.\n.output Answer\n\n"]}
{"id": 758, "answer": true, "completion": ".decl Has_producer(TV_show:symbol, Producer:symbol)\nHas_producer(\"Star Wars: The Clone Wars\", \"Lucasfilm\").\nHas_producer(\"Star Wars: Rebels\", \"Lucasfilm\").\n.decl Owns(Company_A:symbol, Company_B:symbol)\nOwns(\"Disney\", \"Lucasfilm\").\n.decl Answer()\nAnswer() :- Has_producer(tv_show1, \"Lucasfilm\"), Has_producer(tv_show2, \"Lucasfilm\"), tv_show1 != tv_show2.\n.output Answer\n\n", "completions": [".decl Has_producer(TV_show:symbol, Producer:symbol)\nHas_producer(\"Star Wars: The Clone Wars\", \"Lucasfilm\").\nHas_producer(\"Star Wars: Rebels\", \"Lucasfilm\").\n.decl Owns(Company_A:symbol, Company_B:symbol)\nOwns(\"Disney\", \"Lucasfilm\").\n.decl Answer()\nAnswer() :- Has_producer(tv_show1, \"Lucasfilm\"), Has_producer(tv_show2, \"Lucasfilm\"), tv_show1 != tv_show2.\n.output Answer\n\n"]}
{"id": 759, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Jonas Salk\", \"polio\").\n.decl Has_invented(Person:symbol, Invention:symbol)\nHas_invented(\"Jonas Salk\", \"polio vaccine\").\n.decl Cures(Medicine:symbol, Disease:symbol)\nCures(\"polio vaccine\", \"polio\").\n.decl Answer()\nAnswer() :- Has_disease(\"Jonas Salk\", disease), Has_invented(\"Jonas Salk\", medicine), Cures(medicine, disease).\n.output Answer\n\n\n", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Jonas Salk\", \"polio\").\n.decl Has_invented(Person:symbol, Invention:symbol)\nHas_invented(\"Jonas Salk\", \"polio vaccine\").\n.decl Cures(Medicine:symbol, Disease:symbol)\nCures(\"polio vaccine\", \"polio\").\n.decl Answer()\nAnswer() :- Has_disease(\"Jonas Salk\", disease), Has_invented(\"Jonas Salk\", medicine), Cures(medicine, disease).\n.output Answer\n\n\n"]}
{"id": 760, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"vegan\", \"vegetables\").\nEats(\"vegan\", \"fruits\").\nEats(\"vegan\", \"nuts\").\nEats(\"vegan\", \"grains\").\nEats(\"vegan\", \"legumes\").\nEats(\"vegan\", \"seeds\").\nEats(\"vegan\", \"honey\").\n.decl Answer()\nAnswer() :- Eats(\"vegan\", \"honey\").\n.output Answer\n\n", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"vegan\", \"vegetables\").\nEats(\"vegan\", \"fruits\").\nEats(\"vegan\", \"nuts\").\nEats(\"vegan\", \"grains\").\nEats(\"vegan\", \"legumes\").\nEats(\"vegan\", \"seeds\").\nEats(\"vegan\", \"honey\").\n.decl Answer()\nAnswer() :- Eats(\"vegan\", \"honey\").\n.output Answer\n\n"]}
{"id": 761, "answer": true, "completion": ".decl Handles(Port:symbol, Cargo:symbol)\nHandles(\"Port of Baltimore\", \"cargo\").\n.decl Produces(Country:symbol, Cargo:symbol, Amount:float)\nProduces(\"China\", \"ginger\", 1.5).\n.decl Answer()\nAnswer() :- Handles(\"Port of Baltimore\", \"cargo\"), Produces(\"China\", \"ginger\", amount), amount <= 1.5.\n.output Answer\n\n", "completions": [".decl Handles(Port:symbol, Cargo:symbol)\nHandles(\"Port of Baltimore\", \"cargo\").\n.decl Produces(Country:symbol, Cargo:symbol, Amount:float)\nProduces(\"China\", \"ginger\", 1.5).\n.decl Answer()\nAnswer() :- Handles(\"Port of Baltimore\", \"cargo\"), Produces(\"China\", \"ginger\", amount), amount <= 1.5.\n.output Answer\n\n"]}
{"id": 762, "answer": false, "completion": ".decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel", "completions": [".decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel Carson\", \"biologist\").\n.decl Is_profession(Person:symbol, Profession:symbol)\nIs_profession(\"Rachel"]}
{"id": 763, "answer": true, "completion": ".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"J. D. Salinger\", \"Sol Salinger\").\n.decl Has_daughter(Person:symbol, Daughter:symbol)\nHas_daughter(\"Sol Salinger\", \"J. D. Salinger\").\n.decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Sol Salinger\", \"J. D. Salinger\").\n.decl Answer()\nAnswer() :- Has_father(\"J. D. Salinger\", \"Sol Salinger\"), Has_daughter(\"Sol Salinger\", \"J. D. Salinger\").\n.output Answer\n\n", "completions": [".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"J. D. Salinger\", \"Sol Salinger\").\n.decl Has_daughter(Person:symbol, Daughter:symbol)\nHas_daughter(\"Sol Salinger\", \"J. D. Salinger\").\n.decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Sol Salinger\", \"J. D. Salinger\").\n.decl Answer()\nAnswer() :- Has_father(\"J. D. Salinger\", \"Sol Salinger\"), Has_daughter(\"Sol Salinger\", \"J. D. Salinger\").\n.output Answer\n\n"]}
{"id": 764, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"ancient Olympics crown\", 0.5).\nHas_weight(\"tonsure\", 0.1).\n.decl Answer()\nAnswer() :- Has_weight(\"ancient Olympics crown\", weight1), Has_weight(\"tonsure\", weight2), weight1 < weight2.\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"ancient Olympics crown\", 0.5).\nHas_weight(\"tonsure\", 0.1).\n.decl Answer()\nAnswer() :- Has_weight(\"ancient Olympics crown\", weight1), Has_weight(\"tonsure\", weight2), weight1 < weight2.\n.output Answer\n\n"]}
{"id": 765, "answer": true, "completion": ".decl Has_mass(Animal:symbol, Mass:float)\nHas_mass(\"ocelot\", 10).\nHas_mass(\"bee hummingbird\", 0.05).\n.decl Eats_per_day(Animal:symbol, Mass:float)\nEats_per_day(\"ocelot\", 0.5).\n.decl Answer()\nAnswer() :- Has_mass(\"ocelot\", mass1), Has_mass(\"bee hummingbird\", mass2), Eats_per_day(\"ocelot\", mass3), mass1 * mass3 >= mass2.\n.output Answer\n\n", "completions": [".decl Has_mass(Animal:symbol, Mass:float)\nHas_mass(\"ocelot\", 10).\nHas_mass(\"bee hummingbird\", 0.05).\n.decl Eats_per_day(Animal:symbol, Mass:float)\nEats_per_day(\"ocelot\", 0.5).\n.decl Answer()\nAnswer() :- Has_mass(\"ocelot\", mass1), Has_mass(\"bee hummingbird\", mass2), Eats_per_day(\"ocelot\", mass3), mass1 * mass3 >= mass2.\n.output Answer\n\n"]}
{"id": 766, "answer": true, "completion": ".decl Eats(Animal:symbol, Food:symbol)\nEats(\"Koala\", \"Eucalyptus\").\nEats(\"Koala\", \"meat\").\n.decl Answer()\nAnswer() :- Eats(\"Koala\", food1), Eats(\"Koala\", food2), food1 != food2.\n.output Answer\n\n", "completions": [".decl Eats(Animal:symbol, Food:symbol)\nEats(\"Koala\", \"Eucalyptus\").\nEats(\"Koala\", \"meat\").\n.decl Answer()\nAnswer() :- Eats(\"Koala\", food1), Eats(\"Koala\", food2), food1 != food2.\n.output Answer\n\n"]}
{"id": 767, "answer": false, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"horseradish\", \"root\").\n.decl Answer()\nAnswer() :- Has_part(\"horseradish\", \"fetlock\").\n.output Answer\n\n", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"horseradish\", \"root\").\n.decl Answer()\nAnswer() :- Has_part(\"horseradish\", \"fetlock\").\n.output Answer\n\n"]}
{"id": 768, "answer": true, "completion": ".decl Is_absolute(Way:symbol)\nIs_absolute(\"abstinence\").\n.decl Prevents(Way:symbol, Abortion:symbol)\nPrevents(\"abstinence\", \"abortion\").\n.decl Answer()\nAnswer() :- Prevents(way, \"abortion\"), Is_absolute(way).\n.output Answer\n\n", "completions": [".decl Is_absolute(Way:symbol)\nIs_absolute(\"abstinence\").\n.decl Prevents(Way:symbol, Abortion:symbol)\nPrevents(\"abstinence\", \"abortion\").\n.decl Answer()\nAnswer() :- Prevents(way, \"abortion\"), Is_absolute(way).\n.output Answer\n\n"]}
{"id": 769, "answer": false, "completion": ".decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"Neue Deutsche Härte\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"heavy metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"hard rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"gothic metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"alternative metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"alternative rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"nu metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electro-industrial\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electro-industrial\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electro-industrial\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic rock\").\n", "completions": [".decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"Neue Deutsche Härte\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"heavy metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"hard rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"gothic metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"alternative metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"alternative rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"nu metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electro-industrial\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electro-industrial\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial rock\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial metal\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electro-industrial\").\n.decl Plays(Band:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"electronic rock\").\n"]}
{"id": 770, "answer": true, "completion": ".decl Has_child(Person:symbol, Child:symbol)\nHas_child(\"Maya Angelou\", \"Guy Johnson\").\nHas_child(\"Maya Angelou\", \"Bamby Johnson\").\n.decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Maya Angelou\", \"poet\").\nHas_profession(\"Guy Johnson\", \"poet\").\n.decl Answer()\nAnswer() :- Has_child(\"Maya Angelou\", child), Has_profession(child, \"poet\").\n.output Answer\n\n", "completions": [".decl Has_child(Person:symbol, Child:symbol)\nHas_child(\"Maya Angelou\", \"Guy Johnson\").\nHas_child(\"Maya Angelou\", \"Bamby Johnson\").\n.decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Maya Angelou\", \"poet\").\nHas_profession(\"Guy Johnson\", \"poet\").\n.decl Answer()\nAnswer() :- Has_child(\"Maya Angelou\", child), Has_profession(child, \"poet\").\n.output Answer\n\n"]}
{"id": 771, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Alfa Romeo\", 0.000001).\nHas_volume(\"barn\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"Alfa Romeo\", volume1), Has_volume(\"barn\", volume2), volume1 < volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Alfa Romeo\", 0.000001).\nHas_volume(\"barn\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"Alfa Romeo\", volume1), Has_volume(\"barn\", volume2), volume1 < volume2.\n.output Answer\n\n"]}
{"id": 772, "answer": true, "completion": ".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"James Watson\", \"Africans are inferior to Europeans\").\n.decl Answer()\nAnswer() :- Believes(\"James Watson\", \"Africans are inferior to Europeans\").\n.output Answer\n\n", "completions": [".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"James Watson\", \"Africans are inferior to Europeans\").\n.decl Answer()\nAnswer() :- Believes(\"James Watson\", \"Africans are inferior to Europeans\").\n.output Answer\n\n"]}
{"id": 773, "answer": false, "completion": ".decl Teaches(Teacher:symbol, Student:symbol)\nTeaches(\"P. G. Wodehouse\", \"Jeeves\").\nTeaches(\"P. G. Wodehouse\", \"Bertie Wooster\").\nTeaches(\"P. G. Wodehouse\", \"Lord Emsworth\").\nTeaches(\"P. G. Wodehouse\", \"Duke of Dunstable\").\nTeaches(\"P. G. Wodehouse\", \"Bingo Little\").\nTeaches(\"P. G. Wodehouse\", \"Gussie Fink-Nottle\").\nTeaches(\"P. G. Wodehouse\", \"Rodney Spelvin\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\",", "completions": [".decl Teaches(Teacher:symbol, Student:symbol)\nTeaches(\"P. G. Wodehouse\", \"Jeeves\").\nTeaches(\"P. G. Wodehouse\", \"Bertie Wooster\").\nTeaches(\"P. G. Wodehouse\", \"Lord Emsworth\").\nTeaches(\"P. G. Wodehouse\", \"Duke of Dunstable\").\nTeaches(\"P. G. Wodehouse\", \"Bingo Little\").\nTeaches(\"P. G. Wodehouse\", \"Gussie Fink-Nottle\").\nTeaches(\"P. G. Wodehouse\", \"Rodney Spelvin\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\", \"Psmith\").\nTeaches(\"P. G. Wodehouse\", \"Ukridge\").\nTeaches(\"P. G. Wodehouse\","]}
{"id": 774, "answer": true, "completion": ".decl Supports(Person:symbol, Political_party:symbol)\nSupports(\"Richard Wagner\", \"Nazis\").\n.decl Answer()\nAnswer() :- Supports(\"Richard Wagner\", \"Nazis\").\n.output Answer\n\n", "completions": [".decl Supports(Person:symbol, Political_party:symbol)\nSupports(\"Richard Wagner\", \"Nazis\").\n.decl Answer()\nAnswer() :- Supports(\"Richard Wagner\", \"Nazis\").\n.output Answer\n\n"]}
{"id": 775, "answer": true, "completion": ".decl Recognizes(Church:symbol, Saint:symbol)\nRecognizes(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.decl Answer()\nAnswer() :- Recognizes(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.output Answer\n\n", "completions": [".decl Recognizes(Church:symbol, Saint:symbol)\nRecognizes(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.decl Answer()\nAnswer() :- Recognizes(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.output Answer\n\n"]}
{"id": 776, "answer": false, "completion": ".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Rock in Rio\", 100000).\n.decl Has_attendance(Event:symbol, Attendance:float)\nHas_attendance(\"Stanley Cup Finals\", 17000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Rock in Rio\", capacity), Has_attendance(\"Stanley Cup Finals\", attendance), capacity < attendance.\n.output Answer\n\n\n", "completions": [".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Rock in Rio\", 100000).\n.decl Has_attendance(Event:symbol, Attendance:float)\nHas_attendance(\"Stanley Cup Finals\", 17000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Rock in Rio\", capacity), Has_attendance(\"Stanley Cup Finals\", attendance), capacity < attendance.\n.output Answer\n\n\n"]}
{"id": 777, "answer": true, "completion": ".decl Sailed_for(Person:symbol, Country:symbol)\nSailed_for(\"Christopher Columbus\", \"Spain\").\n.decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"Christopher Columbus\", \"Italy\").\n.decl Answer()\nAnswer() :- Sailed_for(\"Christopher Columbus\", country1), Is_from(\"Christopher Columbus\", country2), country1 != country2.\n.output Answer\n\n", "completions": [".decl Sailed_for(Person:symbol, Country:symbol)\nSailed_for(\"Christopher Columbus\", \"Spain\").\n.decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"Christopher Columbus\", \"Italy\").\n.decl Answer()\nAnswer() :- Sailed_for(\"Christopher Columbus\", country1), Is_from(\"Christopher Columbus\", country2), country1 != country2.\n.output Answer\n\n"]}
{"id": 778, "answer": true, "completion": ".decl Has_n_digits(Number:symbol, N_digits:float)\nHas_n_digits(\"Pi\", 100).\n.decl Has_n_memorized(Person:symbol, N_memorized:float)\nHas_n_memorized(\"person\", 100).\n.decl Answer()\nAnswer() :- Has_n_digits(\"Pi\", n_digits), Has_n_memorized(\"person\", n_memorized), n_digits <= n_memorized.\n.output Answer\n\n", "completions": [".decl Has_n_digits(Number:symbol, N_digits:float)\nHas_n_digits(\"Pi\", 100).\n.decl Has_n_memorized(Person:symbol, N_memorized:float)\nHas_n_memorized(\"person\", 100).\n.decl Answer()\nAnswer() :- Has_n_digits(\"Pi\", n_digits), Has_n_memorized(\"person\", n_memorized), n_digits <= n_memorized.\n.output Answer\n\n"]}
{"id": 779, "answer": false, "completion": ".decl Creates(Person:symbol, Comic_book:symbol)\nCreates(\"Steve Ditko\", \"Doctor Strange\").\nCreates(\"Stan Lee\", \"Doctor Strange\").\nCreates(\"Bob Kane\", \"Batman\").\n.decl Answer()\nAnswer() :- Creates(person, \"Doctor Strange\"), Creates(person, \"Batman\").\n.output Answer\n\n", "completions": [".decl Creates(Person:symbol, Comic_book:symbol)\nCreates(\"Steve Ditko\", \"Doctor Strange\").\nCreates(\"Stan Lee\", \"Doctor Strange\").\nCreates(\"Bob Kane\", \"Batman\").\n.decl Answer()\nAnswer() :- Creates(person, \"Doctor Strange\"), Creates(person, \"Batman\").\n.output Answer\n\n"]}
{"id": 780, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"hippo\", \"human\").\n.decl Answer()\nAnswer() :- Eats(\"hippo\", \"human\").\n.output Answer\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"hippo\", \"human\").\n.decl Answer()\nAnswer() :- Eats(\"hippo\", \"human\").\n.output Answer\n\n"]}
{"id": 781, "answer": true, "completion": ".decl Has_origin(Event:symbol, Origin:symbol)\nHas_origin(\"Mixed martial arts\", \"Brazil\").\nHas_origin(\"Roman Colosseum games\", \"Rome\").\n.decl Answer()\nAnswer() :- Has_origin(\"Mixed martial arts\", origin1), Has_origin(\"Roman Colosseum games\", origin2), origin1 != origin2.\n.output Answer\n\n", "completions": [".decl Has_origin(Event:symbol, Origin:symbol)\nHas_origin(\"Mixed martial arts\", \"Brazil\").\nHas_origin(\"Roman Colosseum games\", \"Rome\").\n.decl Answer()\nAnswer() :- Has_origin(\"Mixed martial arts\", origin1), Has_origin(\"Roman Colosseum games\", origin2), origin1 != origin2.\n.output Answer\n\n"]}
{"id": 782, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"groundhog day\", \"February\").\nHappens_in_time(\"school children in New York\", \"February\").\nHappens_in_time(\"school children in New York\", \"March\").\nHappens_in_time(\"school children in New York\", \"April\").\nHappens_in_time(\"school children in New York\", \"May\").\nHappens_in_time(\"school children in New York\", \"June\").\nHappens_in_time(\"school children in New York\", \"July\").\nHappens_in_time(\"school children in New York\", \"August\").\nHappens_in_time(\"school children in New York\", \"September\").\nHappens_in_time(\"school children in New York\", \"October\").\nHappens_in_time(\"school children in New York\", \"November\").\nHappens_in_time(\"school children in New York\", \"December\").\nHappens_in_time(\"school children in New York\", \"January\").\n.decl Wears(Person:symbol, Clothing:symbol)\nWears(\"school children in New York\", \"jacket\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"groundhog day\", month), Happens_in_time(\"school children in New York\", month), Wears(\"school children in New York\", \"jacket\").\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"groundhog day\", \"February\").\nHappens_in_time(\"school children in New York\", \"February\").\nHappens_in_time(\"school children in New York\", \"March\").\nHappens_in_time(\"school children in New York\", \"April\").\nHappens_in_time(\"school children in New York\", \"May\").\nHappens_in_time(\"school children in New York\", \"June\").\nHappens_in_time(\"school children in New York\", \"July\").\nHappens_in_time(\"school children in New York\", \"August\").\nHappens_in_time(\"school children in New York\", \"September\").\nHappens_in_time(\"school children in New York\", \"October\").\nHappens_in_time(\"school children in New York\", \"November\").\nHappens_in_time(\"school children in New York\", \"December\").\nHappens_in_time(\"school children in New York\", \"January\").\n.decl Wears(Person:symbol, Clothing:symbol)\nWears(\"school children in New York\", \"jacket\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"groundhog day\", month), Happens_in_time(\"school children in New York\", month), Wears(\"school children in New York\", \"jacket\").\n.output Answer\n\n"]}
{"id": 783, "answer": true, "completion": ".decl Is_topic(Presentation:symbol, Topic:symbol)\nIs_topic(\"presentation about post traumatic stress disorder\", \"post traumatic stress disorder\").\n.decl Is_relevant_to(Topic:symbol, Person:symbol)\nIs_relevant_to(\"post traumatic stress disorder\", \"Ariana Grande\").\n.decl Answer()\nAnswer() :- Is_topic(presentation, topic), Is_relevant_to(topic, \"Ariana Grande\").\n.output Answer\n\n", "completions": [".decl Is_topic(Presentation:symbol, Topic:symbol)\nIs_topic(\"presentation about post traumatic stress disorder\", \"post traumatic stress disorder\").\n.decl Is_relevant_to(Topic:symbol, Person:symbol)\nIs_relevant_to(\"post traumatic stress disorder\", \"Ariana Grande\").\n.decl Answer()\nAnswer() :- Is_topic(presentation, topic), Is_relevant_to(topic, \"Ariana Grande\").\n.output Answer\n\n"]}
{"id": 784, "answer": true, "completion": ".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Tokyo\", \"beach\").\nIs_near(\"Tokyo\", \"headquarters of All Nippon Airways\").\n.decl Answer()\nAnswer() :- Is_near(place1, \"beach\"), Is_near(place1, \"headquarters of All Nippon Airways\").\n.output Answer\n\n\n", "completions": [".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Tokyo\", \"beach\").\nIs_near(\"Tokyo\", \"headquarters of All Nippon Airways\").\n.decl Answer()\nAnswer() :- Is_near(place1, \"beach\"), Is_near(place1, \"headquarters of All Nippon Airways\").\n.output Answer\n\n\n"]}
{"id": 785, "answer": true, "completion": ".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Gettysburg Battlefield\", 10000).\n.decl Has_attendance(Event:symbol, Attendance:float)\nHas_attendance(\"Superbowl Football Game\", 100000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Gettysburg Battlefield\", capacity), Has_attendance(\"Superbowl Football Game\", attendance), attendance > capacity.\n.output Answer\n\n", "completions": [".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Gettysburg Battlefield\", 10000).\n.decl Has_attendance(Event:symbol, Attendance:float)\nHas_attendance(\"Superbowl Football Game\", 100000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Gettysburg Battlefield\", capacity), Has_attendance(\"Superbowl Football Game\", attendance), attendance > capacity.\n.output Answer\n\n"]}
{"id": 786, "answer": true, "completion": ".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Doctor Strange\", \"Pittsburgh Steelers logo\").\n.decl Answer()\nAnswer() :- Likes(\"Doctor Strange\", \"Pittsburgh Steelers logo\").\n.output Answer\n\n", "completions": [".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Doctor Strange\", \"Pittsburgh Steelers logo\").\n.decl Answer()\nAnswer() :- Likes(\"Doctor Strange\", \"Pittsburgh Steelers logo\").\n.output Answer\n\n"]}
{"id": 787, "answer": false, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Yeti\", \"Abominable Snowman\").\nHas_name(\"Disney theme parks\", \"Disneyland\").\n.decl Answer()\nAnswer() :- Has_name(\"Yeti\", name1), Has_name(\"Disney theme parks\", name2), name1 = name2.\n.output Answer\n\n", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Yeti\", \"Abominable Snowman\").\nHas_name(\"Disney theme parks\", \"Disneyland\").\n.decl Answer()\nAnswer() :- Has_name(\"Yeti\", name1), Has_name(\"Disney theme parks\", name2), name1 = name2.\n.output Answer\n\n"]}
{"id": 788, "answer": false, "completion": ".decl Has_leaves(Tree:symbol, Season:symbol)\nHas_leaves(\"oak\", \"spring\").\nHas_leaves(\"oak\", \"summer\").\nHas_leaves(\"oak\", \"fall\").\n.decl Answer()\nAnswer() :- Has_leaves(\"oak\", \"winter\").\n.output Answer\n\n", "completions": [".decl Has_leaves(Tree:symbol, Season:symbol)\nHas_leaves(\"oak\", \"spring\").\nHas_leaves(\"oak\", \"summer\").\nHas_leaves(\"oak\", \"fall\").\n.decl Answer()\nAnswer() :- Has_leaves(\"oak\", \"winter\").\n.output Answer\n\n"]}
{"id": 789, "answer": false, "completion": ".decl Is_younger_than(Person:symbol, Age:float)\nIs_younger_than(\"Eddie Murphy\", 10).\n.decl Can_do(Person:symbol, Action:symbol)\nCan_do(\"Eddie Murphy\", \"dial 911\").\n.decl Answer()\nAnswer() :- Is_younger_than(\"Eddie Murphy\", age), Can_do(\"Eddie Murphy\", \"dial 911\"), age < 10.\n.output Answer\n\n", "completions": [".decl Is_younger_than(Person:symbol, Age:float)\nIs_younger_than(\"Eddie Murphy\", 10).\n.decl Can_do(Person:symbol, Action:symbol)\nCan_do(\"Eddie Murphy\", \"dial 911\").\n.decl Answer()\nAnswer() :- Is_younger_than(\"Eddie Murphy\", age), Can_do(\"Eddie Murphy\", \"dial 911\"), age < 10.\n.output Answer\n\n"]}
{"id": 790, "answer": true, "completion": ".decl Is_ingredient_of(Ingredient:symbol, Dish:symbol)\nIs_ingredient_of(\"bananas\", \"tostones\").\n.decl Answer()\nAnswer() :- Is_ingredient_of(\"bananas\", \"tostones\").\n.output Answer\n\n", "completions": [".decl Is_ingredient_of(Ingredient:symbol, Dish:symbol)\nIs_ingredient_of(\"bananas\", \"tostones\").\n.decl Answer()\nAnswer() :- Is_ingredient_of(\"bananas\", \"tostones\").\n.output Answer\n\n"]}
{"id": 791, "answer": false, "completion": ".decl Has_n_races(Group:symbol, N_races:float)\nHas_n_races(\"Africanized bees\", 1).\n.decl Answer()\nAnswer() :- Has_n_races(\"Africanized bees\", n_races), n_races > 1.\n.output Answer\n\n", "completions": [".decl Has_n_races(Group:symbol, N_races:float)\nHas_n_races(\"Africanized bees\", 1).\n.decl Answer()\nAnswer() :- Has_n_races(\"Africanized bees\", n_races), n_races > 1.\n.output Answer\n\n"]}
{"id": 792, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Eddie Hall\", 180).\nHas_weight(\"world's largest cheeseburger\", 881).\n.decl Answer()\nAnswer() :- Has_weight(\"Eddie Hall\", weight1), Has_weight(\"world's largest cheeseburger\", weight2), weight1 > weight2.\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Eddie Hall\", 180).\nHas_weight(\"world's largest cheeseburger\", 881).\n.decl Answer()\nAnswer() :- Has_weight(\"Eddie Hall\", weight1), Has_weight(\"world's largest cheeseburger\", weight2), weight1 > weight2.\n.output Answer\n\n"]}
{"id": 793, "answer": true, "completion": ".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"ocean sunfish\", 2.3).\nHas_size(\"goldfish\", 0.01).\n.decl Answer()\nAnswer() :- Has_size(\"ocean sunfish\", size1), Has_size(\"goldfish\", size2), size1 > size2.\n.output Answer\n\n", "completions": [".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"ocean sunfish\", 2.3).\nHas_size(\"goldfish\", 0.01).\n.decl Answer()\nAnswer() :- Has_size(\"ocean sunfish\", size1), Has_size(\"goldfish\", size2), size1 > size2.\n.output Answer\n\n"]}
{"id": 794, "answer": false, "completion": ".decl Exports(Country:symbol, Product:symbol)\nExports(\"United States\", \"Fair Trade products\").\nExports(\"Germany\", \"Fair Trade products\").\nExports(\"United Kingdom\", \"Fair Trade products\").\nExports(\"France\", \"Fair Trade products\").\nExports(\"Netherlands\", \"Fair Trade products\").\nExports(\"Switzerland\", \"Fair Trade products\").\nExports(\"Italy\", \"Fair Trade products\").\nExports(\"Belgium\", \"Fair Trade products\").\nExports(\"Spain\", \"Fair Trade products\").\nExports(\"Denmark\", \"Fair Trade products\").\nExports(\"Sweden\", \"Fair Trade products\").\nExports(\"Austria\", \"Fair Trade products\").\nExports(\"Finland\", \"Fair Trade products\").\nExports(\"Norway\", \"Fair Trade products\").\nExports(\"Ireland\", \"Fair Trade products\").\nExports(\"Portugal\", \"Fair Trade products\").\nExports(\"Greece\", \"Fair Trade products\").\nExports(\"Luxembourg\", \"Fair Trade products\").\nExports(\"Czech Republic\", \"Fair Trade products\").\nExports(\"Poland\", \"Fair Trade products\").\nExports(\"Hungary\", \"Fair Trade products\").\nExports(\"Slovakia\", \"Fair Trade products\").\nExports(\"Slovenia\", \"Fair Trade products\").\nExports(\"Estonia\", \"Fair Trade products\").\nExports(\"Latvia\", \"Fair Trade products\").\nExports(\"Lithuania\", \"Fair Trade products\").\nExports(\"Bulgaria\", \"Fair Trade products\").\nExports(\"Romania\", \"Fair Trade products\").\nExports(\"Croatia\", \"Fair Trade products\").\nExports(\"Malta\", \"Fair Trade products\").\nExports(\"Cyprus\", \"Fair Trade products\").\nExports(\"Iceland\", \"Fair Trade products\").\nExports(\"Turkey\", \"Fair Trade products\").\nExports(\"Israel\", \"Fair Trade products\").\nExports(\"Russian Federation\", \"Fair Trade products\").\nExports(\"Ukraine\", \"Fair Trade products\").\nExports(\"Belarus\", \"Fair Trade products\").\nExports(\"Moldova\", \"Fair Trade products\").\nExports(\"Armenia\", \"Fair Trade products\").\nExports(\"Azerbaijan\", \"Fair Trade products\").\nExports(\"Georgia\", \"Fair Trade products\").\nExports(\"Kazakhstan\", \"Fair Trade products\").\nExports(\"Kyrgyzstan\", \"Fair Trade products\").\nExports(\"Tajikistan\", \"Fair Trade products\").\nExports(\"Turkmenistan\", \"Fair Trade products\").\nExports(\"Uzbekistan\", \"Fair Trade products\").\nExports(\"China\", \"Fair Trade products\").\nExports(\"Hong Kong\", \"Fair Trade products\").\nExports(\"Japan\", \"Fair Trade products\").\nExports(\"South Korea\", \"Fair Trade products\").\nExports(\"Taiwan\", \"Fair Trade products\").\nExports(\"India\", \"Fair Trade products\").\nExports(\"Pakistan\", \"Fair Trade products\").\nExports(\"Bangladesh\", \"Fair Trade products\").\nExports(\"Sri Lanka\", \"Fair Trade products\").\nExports(\"Nepal\", \"Fair Trade products\").\nExports(\"Bhutan\", \"Fair Trade products\").\nExports(\"Myanmar\", \"Fair Trade products\").\nExports(\"Thailand\", \"Fair Trade products\").\nExports(\"Cambodia\", \"Fair Trade products\").\nExports(\"Laos\", \"Fair Trade products\").\nExports(\"Vietnam\", \"Fair Trade products\").\nExports(\"Malaysia\", \"Fair Trade products\").\nExports(\"", "completions": [".decl Exports(Country:symbol, Product:symbol)\nExports(\"United States\", \"Fair Trade products\").\nExports(\"Germany\", \"Fair Trade products\").\nExports(\"United Kingdom\", \"Fair Trade products\").\nExports(\"France\", \"Fair Trade products\").\nExports(\"Netherlands\", \"Fair Trade products\").\nExports(\"Switzerland\", \"Fair Trade products\").\nExports(\"Italy\", \"Fair Trade products\").\nExports(\"Belgium\", \"Fair Trade products\").\nExports(\"Spain\", \"Fair Trade products\").\nExports(\"Denmark\", \"Fair Trade products\").\nExports(\"Sweden\", \"Fair Trade products\").\nExports(\"Austria\", \"Fair Trade products\").\nExports(\"Finland\", \"Fair Trade products\").\nExports(\"Norway\", \"Fair Trade products\").\nExports(\"Ireland\", \"Fair Trade products\").\nExports(\"Portugal\", \"Fair Trade products\").\nExports(\"Greece\", \"Fair Trade products\").\nExports(\"Luxembourg\", \"Fair Trade products\").\nExports(\"Czech Republic\", \"Fair Trade products\").\nExports(\"Poland\", \"Fair Trade products\").\nExports(\"Hungary\", \"Fair Trade products\").\nExports(\"Slovakia\", \"Fair Trade products\").\nExports(\"Slovenia\", \"Fair Trade products\").\nExports(\"Estonia\", \"Fair Trade products\").\nExports(\"Latvia\", \"Fair Trade products\").\nExports(\"Lithuania\", \"Fair Trade products\").\nExports(\"Bulgaria\", \"Fair Trade products\").\nExports(\"Romania\", \"Fair Trade products\").\nExports(\"Croatia\", \"Fair Trade products\").\nExports(\"Malta\", \"Fair Trade products\").\nExports(\"Cyprus\", \"Fair Trade products\").\nExports(\"Iceland\", \"Fair Trade products\").\nExports(\"Turkey\", \"Fair Trade products\").\nExports(\"Israel\", \"Fair Trade products\").\nExports(\"Russian Federation\", \"Fair Trade products\").\nExports(\"Ukraine\", \"Fair Trade products\").\nExports(\"Belarus\", \"Fair Trade products\").\nExports(\"Moldova\", \"Fair Trade products\").\nExports(\"Armenia\", \"Fair Trade products\").\nExports(\"Azerbaijan\", \"Fair Trade products\").\nExports(\"Georgia\", \"Fair Trade products\").\nExports(\"Kazakhstan\", \"Fair Trade products\").\nExports(\"Kyrgyzstan\", \"Fair Trade products\").\nExports(\"Tajikistan\", \"Fair Trade products\").\nExports(\"Turkmenistan\", \"Fair Trade products\").\nExports(\"Uzbekistan\", \"Fair Trade products\").\nExports(\"China\", \"Fair Trade products\").\nExports(\"Hong Kong\", \"Fair Trade products\").\nExports(\"Japan\", \"Fair Trade products\").\nExports(\"South Korea\", \"Fair Trade products\").\nExports(\"Taiwan\", \"Fair Trade products\").\nExports(\"India\", \"Fair Trade products\").\nExports(\"Pakistan\", \"Fair Trade products\").\nExports(\"Bangladesh\", \"Fair Trade products\").\nExports(\"Sri Lanka\", \"Fair Trade products\").\nExports(\"Nepal\", \"Fair Trade products\").\nExports(\"Bhutan\", \"Fair Trade products\").\nExports(\"Myanmar\", \"Fair Trade products\").\nExports(\"Thailand\", \"Fair Trade products\").\nExports(\"Cambodia\", \"Fair Trade products\").\nExports(\"Laos\", \"Fair Trade products\").\nExports(\"Vietnam\", \"Fair Trade products\").\nExports(\"Malaysia\", \"Fair Trade products\").\nExports(\""]}
{"id": 795, "answer": false, "completion": ".decl Studies(Field:symbol, Object:symbol)\nStudies(\"Biochemistry\", \"proteins\").\nStudies(\"Biochemistry\", \"enzymes\").\nStudies(\"Biochemistry\", \"DNA\").\nStudies(\"Biochemistry\", \"RNA\").\nStudies(\"Biochemistry\", \"lipids\").\nStudies(\"Biochemistry\", \"carbohydrates\").\nStudies(\"Biochemistry\", \"nucleic acids\").\nStudies(\"Biochemistry\", \"metabolism\").\nStudies(\"Biochemistry\", \"cellular respiration\").\nStudies(\"Biochemistry\", \"photosynthesis\").\nStudies(\"Biochemistry\", \"cellular division\").\nStudies(\"Biochemistry\", \"cellular growth\").\nStudies(\"Biochemistry\", \"cellular reproduction\").\nStudies(\"Biochemistry\", \"cellular differentiation\").\nStudies(\"Biochemistry\", \"cellular death\").\nStudies(\"Biochemistry\", \"cellular aging\").\nStudies(\"Biochemistry\", \"cellular mutation\").\nStudies(\"Biochemistry\", \"cellular adaptation\").\nStudies(\"Biochemistry\", \"cellular evolution\").\nStudies(\"Biochemistry\", \"cellular development\").\nStudies(\"Biochemistry\", \"cellular structure\").\nStudies(\"Biochemistry\", \"cellular function\").\nStudies(\"Biochemistry\", \"cellular organization\").\nStudies(\"Biochemistry\", \"cellular communication\").\nStudies(\"Biochemistry\", \"cellular signaling\").\nStudies(\"Biochemistry\", \"cellular transport\").\nStudies(\"Biochemistry\", \"cellular homeostasis\").\nStudies(\"Biochemistry\", \"cellular metabolism\").\nStudies(\"Biochemistry\", \"cellular reproduction\").\nStudies(\"Biochemistry\", \"cellular growth\").\nStudies(\"Biochemistry\", \"cellular division\").\nStudies(\"Biochemistry\", \"cellular differentiation\").\nStudies(\"Biochemistry\", \"cellular death\").\nStudies(\"Biochemistry\", \"cellular aging\").\nStudies(\"Biochemistry\", \"cellular mutation\").\nStudies(\"Biochemistry\", \"cellular adaptation\").\nStudies(\"Biochemistry\", \"cellular evolution\").\nStudies(\"Biochemistry\", \"cellular development\").\nStudies(\"Biochemistry\", \"cellular structure\").\nStudies(\"Biochemistry\", \"cellular function\").\nStudies(\"Biochemistry\", \"cellular organization\").\nStudies(\"Biochemistry\", \"cellular communication\").\nStudies(\"Biochemistry\", \"cellular signaling\").\nStudies(\"Biochemistry\", \"cellular transport\").\nStudies(\"Biochemistry\", \"cellular homeostasis\").\nStudies(\"Biochemistry\", \"cellular metabolism\").\nStudies(\"Biochemistry\", \"cellular reproduction\").\nStudies(\"Biochemistry\", \"cellular growth\").\nStudies(\"Biochemistry\", \"cellular division\").\nStudies(\"Biochemistry\", \"cellular differentiation\").\nStudies(\"Biochemistry\", \"cellular death\").\nStudies(\"Biochemistry\", \"cellular aging\").\nStudies(\"Biochemistry\", \"cellular mutation\").\nStudies(\"Biochemistry\", \"cellular adaptation\").\nStudies(\"Biochemistry\", \"cellular evolution\").\nStudies(\"Biochemistry\", \"cellular development\").\nStudies(\"Biochemistry\", \"cellular structure\").\nStudies(\"Biochemistry\", \"cellular function\").\nStudies(\"Biochemistry\", \"cellular organization\").\nStudies(\"Biochemistry\", \"cellular communication\").\nStudies(\"Biochemistry\", \"cellular signaling\").\nStudies(\"Biochemistry\", \"cellular transport\").\nStudies(\"Biochemistry\", \"cellular homeostasis\").\nStudies(\"Biochemistry\", \"cellular metabolism\").\nStudies(\"Biochemistry\", \"cellular reproduction\").\nStudies(\"Biochemistry\", \"cellular growth\").\nStudies(\"Biochemistry\", \"cellular division\").\nStudies(\"Biochemistry\", \"cellular differentiation\").\nStudies(\"Biochemistry\", \"cellular death\").\nStudies(\"Biochemistry\", \"cellular aging\").\nStudies(\"Biochemistry\", \"cellular mutation\").\nStudies(\"", "completions": [".decl Studies(Field:symbol, Object:symbol)\nStudies(\"Biochemistry\", \"proteins\").\nStudies(\"Biochemistry\", \"enzymes\").\nStudies(\"Biochemistry\", \"DNA\").\nStudies(\"Biochemistry\", \"RNA\").\nStudies(\"Biochemistry\", \"lipids\").\nStudies(\"Biochemistry\", \"carbohydrates\").\nStudies(\"Biochemistry\", \"nucleic acids\").\nStudies(\"Biochemistry\", \"metabolism\").\nStudies(\"Biochemistry\", \"cellular respiration\").\nStudies(\"Biochemistry\", \"photosynthesis\").\nStudies(\"Biochemistry\", \"cellular division\").\nStudies(\"Biochemistry\", \"cellular growth\").\nStudies(\"Biochemistry\", \"cellular reproduction\").\nStudies(\"Biochemistry\", \"cellular differentiation\").\nStudies(\"Biochemistry\", \"cellular death\").\nStudies(\"Biochemistry\", \"cellular aging\").\nStudies(\"Biochemistry\", \"cellular mutation\").\nStudies(\"Biochemistry\", \"cellular adaptation\").\nStudies(\"Biochemistry\", \"cellular evolution\").\nStudies(\"Biochemistry\", \"cellular development\").\nStudies(\"Biochemistry\", \"cellular structure\").\nStudies(\"Biochemistry\", \"cellular function\").\nStudies(\"Biochemistry\", \"cellular organization\").\nStudies(\"Biochemistry\", \"cellular communication\").\nStudies(\"Biochemistry\", \"cellular signaling\").\nStudies(\"Biochemistry\", \"cellular transport\").\nStudies(\"Biochemistry\", \"cellular homeostasis\").\nStudies(\"Biochemistry\", \"cellular metabolism\").\nStudies(\"Biochemistry\", \"cellular reproduction\").\nStudies(\"Biochemistry\", \"cellular growth\").\nStudies(\"Biochemistry\", \"cellular division\").\nStudies(\"Biochemistry\", \"cellular differentiation\").\nStudies(\"Biochemistry\", \"cellular death\").\nStudies(\"Biochemistry\", \"cellular aging\").\nStudies(\"Biochemistry\", \"cellular mutation\").\nStudies(\"Biochemistry\", \"cellular adaptation\").\nStudies(\"Biochemistry\", \"cellular evolution\").\nStudies(\"Biochemistry\", \"cellular development\").\nStudies(\"Biochemistry\", \"cellular structure\").\nStudies(\"Biochemistry\", \"cellular function\").\nStudies(\"Biochemistry\", \"cellular organization\").\nStudies(\"Biochemistry\", \"cellular communication\").\nStudies(\"Biochemistry\", \"cellular signaling\").\nStudies(\"Biochemistry\", \"cellular transport\").\nStudies(\"Biochemistry\", \"cellular homeostasis\").\nStudies(\"Biochemistry\", \"cellular metabolism\").\nStudies(\"Biochemistry\", \"cellular reproduction\").\nStudies(\"Biochemistry\", \"cellular growth\").\nStudies(\"Biochemistry\", \"cellular division\").\nStudies(\"Biochemistry\", \"cellular differentiation\").\nStudies(\"Biochemistry\", \"cellular death\").\nStudies(\"Biochemistry\", \"cellular aging\").\nStudies(\"Biochemistry\", \"cellular mutation\").\nStudies(\"Biochemistry\", \"cellular adaptation\").\nStudies(\"Biochemistry\", \"cellular evolution\").\nStudies(\"Biochemistry\", \"cellular development\").\nStudies(\"Biochemistry\", \"cellular structure\").\nStudies(\"Biochemistry\", \"cellular function\").\nStudies(\"Biochemistry\", \"cellular organization\").\nStudies(\"Biochemistry\", \"cellular communication\").\nStudies(\"Biochemistry\", \"cellular signaling\").\nStudies(\"Biochemistry\", \"cellular transport\").\nStudies(\"Biochemistry\", \"cellular homeostasis\").\nStudies(\"Biochemistry\", \"cellular metabolism\").\nStudies(\"Biochemistry\", \"cellular reproduction\").\nStudies(\"Biochemistry\", \"cellular growth\").\nStudies(\"Biochemistry\", \"cellular division\").\nStudies(\"Biochemistry\", \"cellular differentiation\").\nStudies(\"Biochemistry\", \"cellular death\").\nStudies(\"Biochemistry\", \"cellular aging\").\nStudies(\"Biochemistry\", \"cellular mutation\").\nStudies(\""]}
{"id": 796, "answer": true, "completion": ".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"Phobos\", -20).\n.decl Answer()\nAnswer() :- Has_temperature(\"Phobos\", temperature), temperature < 0.\n.output Answer\n\n\n", "completions": [".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"Phobos\", -20).\n.decl Answer()\nAnswer() :- Has_temperature(\"Phobos\", temperature), temperature < 0.\n.output Answer\n\n\n"]}
{"id": 797, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Star Trek: The Next Generation\", \"2364\").\nHappens_in_time(\"history of the world\", \"2364\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Star Trek: The Next Generation\", time), Happens_in_time(\"history of the world\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Star Trek: The Next Generation\", \"2364\").\nHappens_in_time(\"history of the world\", \"2364\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Star Trek: The Next Generation\", time), Happens_in_time(\"history of the world\", time).\n.output Answer\n\n"]}
{"id": 798, "answer": true, "completion": ".decl Is_necessary_for(Event:symbol, Event2:symbol)\nIs_necessary_for(\"watching Star Wars\", \"knowing who Darth Vader is\").\n.decl Answer()\nAnswer() :- Is_necessary_for(\"watching Star Wars\", \"knowing who Darth Vader is\").\n.output Answer\n\n", "completions": [".decl Is_necessary_for(Event:symbol, Event2:symbol)\nIs_necessary_for(\"watching Star Wars\", \"knowing who Darth Vader is\").\n.decl Answer()\nAnswer() :- Is_necessary_for(\"watching Star Wars\", \"knowing who Darth Vader is\").\n.output Answer\n\n"]}
{"id": 799, "answer": false, "completion": ".decl Is_fair_trade(Product:symbol)\nIs_fair_trade(\"coffee\").\nIs_fair_trade(\"tea\").\n.decl Answer()\nAnswer() :- Is_fair_trade(\"laptop\").\n.output Answer\n\n", "completions": [".decl Is_fair_trade(Product:symbol)\nIs_fair_trade(\"coffee\").\nIs_fair_trade(\"tea\").\n.decl Answer()\nAnswer() :- Is_fair_trade(\"laptop\").\n.output Answer\n\n"]}
{"id": 800, "answer": true, "completion": ".decl Requires_degree(School:symbol, Degree:symbol)\nRequires_degree(\"SUNY School\", \"doctorate\").\n.decl Answer()\nAnswer() :- Requires_degree(\"SUNY School\", \"doctorate\").\n.output Answer\n\n", "completions": [".decl Requires_degree(School:symbol, Degree:symbol)\nRequires_degree(\"SUNY School\", \"doctorate\").\n.decl Answer()\nAnswer() :- Requires_degree(\"SUNY School\", \"doctorate\").\n.output Answer\n\n"]}
{"id": 801, "answer": true, "completion": ".decl Has_subject(Work:symbol, Subject:symbol)\nHas_subject(\"Parsifal\", \"Arthurian legend\").\n.decl Is_folklore_of(Subject:symbol, Country:symbol)\nIs_folklore_of(\"Arthurian legend\", \"Britain\").\n.decl Answer()\nAnswer() :- Has_subject(\"Parsifal\", subject), Is_folklore_of(subject, \"Britain\").\n.output Answer\n\n", "completions": [".decl Has_subject(Work:symbol, Subject:symbol)\nHas_subject(\"Parsifal\", \"Arthurian legend\").\n.decl Is_folklore_of(Subject:symbol, Country:symbol)\nIs_folklore_of(\"Arthurian legend\", \"Britain\").\n.decl Answer()\nAnswer() :- Has_subject(\"Parsifal\", subject), Is_folklore_of(subject, \"Britain\").\n.output Answer\n\n"]}
{"id": 802, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"someone\", \"heart failure\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"ramen\", \"sodium\").\n.decl Is_bad_for(Ingredient:symbol, Disease:symbol)\nIs_bad_for(\"sodium\", \"heart failure\").\n.decl Answer()\nAnswer() :- Has_disease(\"someone\", disease), Has_ingredient(\"ramen\", ingredient), Is_bad_for(ingredient, disease).\n.output Answer\n\n", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"someone\", \"heart failure\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"ramen\", \"sodium\").\n.decl Is_bad_for(Ingredient:symbol, Disease:symbol)\nIs_bad_for(\"sodium\", \"heart failure\").\n.decl Answer()\nAnswer() :- Has_disease(\"someone\", disease), Has_ingredient(\"ramen\", ingredient), Is_bad_for(ingredient, disease).\n.output Answer\n\n"]}
{"id": 803, "answer": true, "completion": ".decl Can_kill(Weapon:symbol, Person:symbol)\nCan_kill(\"French Toast\", \"Lannister\").\n.decl Answer()\nAnswer() :- Can_kill(\"French Toast\", \"Lannister\").\n.output Answer\n\n", "completions": [".decl Can_kill(Weapon:symbol, Person:symbol)\nCan_kill(\"French Toast\", \"Lannister\").\n.decl Answer()\nAnswer() :- Can_kill(\"French Toast\", \"Lannister\").\n.output Answer\n\n"]}
{"id": 804, "answer": true, "completion": ".decl Is_character(Character:symbol, Play:symbol)\nIs_character(\"Maria\", \"The Sound of Music\").\n.decl Is_popular(Play:symbol)\nIs_popular(\"The Sound of Music\").\n.decl Is_missionary(Person:symbol)\nIs_missionary(\"Maria\").\n.decl Answer()\nAnswer() :- Is_character(character, play), Is_popular(play), Is_missionary(character).\n.output Answer\n\n", "completions": [".decl Is_character(Character:symbol, Play:symbol)\nIs_character(\"Maria\", \"The Sound of Music\").\n.decl Is_popular(Play:symbol)\nIs_popular(\"The Sound of Music\").\n.decl Is_missionary(Person:symbol)\nIs_missionary(\"Maria\").\n.decl Answer()\nAnswer() :- Is_character(character, play), Is_popular(play), Is_missionary(character).\n.output Answer\n\n"]}
{"id": 805, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Carmen Electra\", \"junk\").\n.decl Answer()\nAnswer() :- Owns(\"Carmen Electra\", \"junk\").\n.output Answer\n\n", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Carmen Electra\", \"junk\").\n.decl Answer()\nAnswer() :- Owns(\"Carmen Electra\", \"junk\").\n.output Answer\n\n"]}
{"id": 806, "answer": true, "completion": ".decl Has_symbol(Religion:symbol, Symbol:symbol)\nHas_symbol(\"Hinduism\", \"swastika\").\n.decl Is_most_common_religion(Country:symbol, Religion:symbol)\nIs_most_common_religion(\"India\", \"Hinduism\").\n.decl Answer()\nAnswer() :- Has_symbol(religion, \"swastika\"), Is_most_common_religion(\"India\", religion).\n.output Answer\n\n", "completions": [".decl Has_symbol(Religion:symbol, Symbol:symbol)\nHas_symbol(\"Hinduism\", \"swastika\").\n.decl Is_most_common_religion(Country:symbol, Religion:symbol)\nIs_most_common_religion(\"India\", \"Hinduism\").\n.decl Answer()\nAnswer() :- Has_symbol(religion, \"swastika\"), Is_most_common_religion(\"India\", religion).\n.output Answer\n\n"]}
{"id": 807, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Malcolm X\", \"pork\").\n.decl Answer()\nAnswer() :- Eats(\"Malcolm X\", \"pork\"), !Eats(\"Malcolm X\", \"ham\").\n.output Answer\n\n", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Malcolm X\", \"pork\").\n.decl Answer()\nAnswer() :- Eats(\"Malcolm X\", \"pork\"), !Eats(\"Malcolm X\", \"ham\").\n.output Answer\n\n"]}
{"id": 808, "answer": true, "completion": ".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"greyhound\", 4).\n.decl Answer()\nAnswer() :- Has_legs(\"greyhound\", n_legs), n_legs >= 2.\n.output Answer\n\n", "completions": [".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"greyhound\", 4).\n.decl Answer()\nAnswer() :- Has_legs(\"greyhound\", n_legs), n_legs >= 2.\n.output Answer\n\n"]}
{"id": 809, "answer": true, "completion": ".decl Has_grade(Student:symbol, Grade:symbol)\nHas_grade(\"Elementary School student\", \"Elementary School\").\n.decl Needs_calculator(Grade:symbol, Calculator:symbol)\nNeeds_calculator(\"Elementary School\", \"graphing calculator\").\n.decl Answer()\nAnswer() :- Has_grade(student, grade), Needs_calculator(grade, \"graphing calculator\").\n.output Answer\n\n", "completions": [".decl Has_grade(Student:symbol, Grade:symbol)\nHas_grade(\"Elementary School student\", \"Elementary School\").\n.decl Needs_calculator(Grade:symbol, Calculator:symbol)\nNeeds_calculator(\"Elementary School\", \"graphing calculator\").\n.decl Answer()\nAnswer() :- Has_grade(student, grade), Needs_calculator(grade, \"graphing calculator\").\n.output Answer\n\n"]}
{"id": 810, "answer": true, "completion": ".decl Is_a(Object:symbol, Category:symbol)\nIs_a(\"SnapCap\", \"retail store\").\n.decl Answer()\nAnswer() :- Is_a(\"SnapCap\", \"retail store\").\n.output Answer\n\n", "completions": [".decl Is_a(Object:symbol, Category:symbol)\nIs_a(\"SnapCap\", \"retail store\").\n.decl Answer()\nAnswer() :- Is_a(\"SnapCap\", \"retail store\").\n.output Answer\n\n"]}
{"id": 811, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"2019 Toyota Hilux\", 2.5).\nHas_weight(\"Big John Studd\", 0.2).\n.decl Answer()\nAnswer() :- Has_weight(\"2019 Toyota Hilux\", weight1), Has_weight(\"Big John Studd\", weight2), weight1 >= 30 * weight2.\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"2019 Toyota Hilux\", 2.5).\nHas_weight(\"Big John Studd\", 0.2).\n.decl Answer()\nAnswer() :- Has_weight(\"2019 Toyota Hilux\", weight1), Has_weight(\"Big John Studd\", weight2), weight1 >= 30 * weight2.\n.output Answer\n\n"]}
{"id": 812, "answer": false, "completion": ".decl Has_name(Team:symbol, Name:symbol)\nHas_name(\"Toledo Mud Hens\", \"Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mudhens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"T", "completions": [".decl Has_name(Team:symbol, Name:symbol)\nHas_name(\"Toledo Mud Hens\", \"Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mudhens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"Toledo Mud Hens\", \"Toledo Mud Hens\").\nHas_name(\"T"]}
{"id": 813, "answer": false, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"telescope\", \"sight\").\nHas_property(\"noise\", \"sound\").\n.decl Answer()\nAnswer() :- Has_property(\"telescope\", property1), Has_property(\"noise\", property2), property1 = property2.\n.output Answer\n\n", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"telescope\", \"sight\").\nHas_property(\"noise\", \"sound\").\n.decl Answer()\nAnswer() :- Has_property(\"telescope\", property1), Has_property(\"noise\", property2), property1 = property2.\n.output Answer\n\n"]}
{"id": 814, "answer": true, "completion": ".decl Is_mythical_home_of(Place:symbol, Goddess:symbol)\nIs_mythical_home_of(\"Pearl Harbor\", \"shark goddess\").\n.decl Answer()\nAnswer() :- Is_mythical_home_of(\"Pearl Harbor\", \"shark goddess\").\n.output Answer\n\n\n", "completions": [".decl Is_mythical_home_of(Place:symbol, Goddess:symbol)\nIs_mythical_home_of(\"Pearl Harbor\", \"shark goddess\").\n.decl Answer()\nAnswer() :- Is_mythical_home_of(\"Pearl Harbor\", \"shark goddess\").\n.output Answer\n\n\n"]}
{"id": 815, "answer": false, "completion": ".decl Has_n_occupants(City:symbol, N_occupants:float)\nHas_n_occupants(\"Albany, Georgia\", 77000).\nHas_n_occupants(\"Albany, New York\", 97000).\n.decl Answer()\nAnswer() :- Has_n_occupants(\"Albany, Georgia\", n_occupants1), Has_n_occupants(\"Albany, New York\", n_occupants2), n_occupants1 > n_occupants2.\n.output Answer\n\n", "completions": [".decl Has_n_occupants(City:symbol, N_occupants:float)\nHas_n_occupants(\"Albany, Georgia\", 77000).\nHas_n_occupants(\"Albany, New York\", 97000).\n.decl Answer()\nAnswer() :- Has_n_occupants(\"Albany, Georgia\", n_occupants1), Has_n_occupants(\"Albany, New York\", n_occupants2), n_occupants1 > n_occupants2.\n.output Answer\n\n"]}
{"id": 816, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"sunburn\", \"beach\").\nHappens_in_place(\"sunburn\", \"desert\").\nHappens_in_place(\"Burning Man\", \"desert\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"sunburn\", place1), Happens_in_place(\"Burning Man\", place2), place1 = place2.\n.output Answer\n\n", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"sunburn\", \"beach\").\nHappens_in_place(\"sunburn\", \"desert\").\nHappens_in_place(\"Burning Man\", \"desert\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"sunburn\", place1), Happens_in_place(\"Burning Man\", place2), place1 = place2.\n.output Answer\n\n"]}
{"id": 817, "answer": true, "completion": ".decl Is_related_to(Person_A:symbol, Person_B:symbol)\nIs_related_to(\"Reza Shah\", \"Mohammad Reza Pahlavi\").\nIs_related_to(\"Mohammad Reza Pahlavi\", \"Shahbanu Farah Pahlavi\").\nIs_related_to(\"Shahbanu Farah Pahlavi\", \"Reza Pahlavi\").\nIs_related_to(\"Reza Pahlavi\", \"Farahnaz Pahlavi\").\nIs_related_to(\"Farahnaz Pahlavi\", \"Cyrus Pahlavi\").\nIs_related_to(\"Cyrus Pahlavi\", \"Nooreh Pahlavi\").\nIs_related_to(\"Nooreh Pahlavi\", \"Queen Elizabeth I\").\n.decl Answer()\nAnswer() :- Is_related_to(\"Reza Shah\", \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, person2), Is_related_to(person2, \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, person2), Is_related_to(person2, person3), Is_related_to(person3, \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, person2), Is_related_to(person2, person3), Is_related_to(person3, person4), Is_related_to(person4, \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, person2), Is_related_to(person2, person3), Is_related_to(person3, person4), Is_related_to(person4, person5), Is_related_to(person5, \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, person2), Is_related_to(person2, person3), Is_related_to(person3, person4), Is_related_to(person4, person5), Is_related_to(person5, person6), Is_related_to(person6, \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, person2), Is_related_to(person2, person3), Is_related_to(person3, person4), Is_related_to(person4, person5), Is_related_to(person5, person6), Is_related_to(person6, person7), Is_related_to(person7, \"Queen Elizabeth I\").\n.output Answer\n\n\n", "completions": [".decl Is_related_to(Person_A:symbol, Person_B:symbol)\nIs_related_to(\"Reza Shah\", \"Mohammad Reza Pahlavi\").\nIs_related_to(\"Mohammad Reza Pahlavi\", \"Shahbanu Farah Pahlavi\").\nIs_related_to(\"Shahbanu Farah Pahlavi\", \"Reza Pahlavi\").\nIs_related_to(\"Reza Pahlavi\", \"Farahnaz Pahlavi\").\nIs_related_to(\"Farahnaz Pahlavi\", \"Cyrus Pahlavi\").\nIs_related_to(\"Cyrus Pahlavi\", \"Nooreh Pahlavi\").\nIs_related_to(\"Nooreh Pahlavi\", \"Queen Elizabeth I\").\n.decl Answer()\nAnswer() :- Is_related_to(\"Reza Shah\", \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, person2), Is_related_to(person2, \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, person2), Is_related_to(person2, person3), Is_related_to(person3, \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, person2), Is_related_to(person2, person3), Is_related_to(person3, person4), Is_related_to(person4, \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, person2), Is_related_to(person2, person3), Is_related_to(person3, person4), Is_related_to(person4, person5), Is_related_to(person5, \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, person2), Is_related_to(person2, person3), Is_related_to(person3, person4), Is_related_to(person4, person5), Is_related_to(person5, person6), Is_related_to(person6, \"Queen Elizabeth I\").\nAnswer() :- Is_related_to(\"Reza Shah\", person1), Is_related_to(person1, person2), Is_related_to(person2, person3), Is_related_to(person3, person4), Is_related_to(person4, person5), Is_related_to(person5, person6), Is_related_to(person6, person7), Is_related_to(person7, \"Queen Elizabeth I\").\n.output Answer\n\n\n"]}
{"id": 818, "answer": true, "completion": ".decl Runs_on(OS:symbol, OS_type:symbol)\nRuns_on(\"focal fossa\", \"linux\").\n.decl Answer()\nAnswer() :- Runs_on(\"focal fossa\", \"linux\").\n.output Answer\n\n", "completions": [".decl Runs_on(OS:symbol, OS_type:symbol)\nRuns_on(\"focal fossa\", \"linux\").\n.decl Answer()\nAnswer() :- Runs_on(\"focal fossa\", \"linux\").\n.output Answer\n\n"]}
{"id": 819, "answer": false, "completion": ".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"cast\", \"broken bone\").\n.decl Answer()\nAnswer() :- Cures(\"cast\", \"dementia\").\n.output Answer\n\n", "completions": [".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"cast\", \"broken bone\").\n.decl Answer()\nAnswer() :- Cures(\"cast\", \"dementia\").\n.output Answer\n\n"]}
{"id": 820, "answer": false, "completion": ".decl Has_n_fingers(Animal:symbol, N_fingers:float)\nHas_n_fingers(\"monkey\", 4).\n.decl Has_n_keys(Keyboard:symbol, N_keys:float)\nHas_n_keys(\"QWERTY keyboard\", 104).\n.decl Answer()\nAnswer() :- Has_n_fingers(\"monkey\", n_fingers), Has_n_keys(\"QWERTY keyboard\", n_keys), n_fingers >= n_keys.\n.output Answer\n\n", "completions": [".decl Has_n_fingers(Animal:symbol, N_fingers:float)\nHas_n_fingers(\"monkey\", 4).\n.decl Has_n_keys(Keyboard:symbol, N_keys:float)\nHas_n_keys(\"QWERTY keyboard\", 104).\n.decl Answer()\nAnswer() :- Has_n_fingers(\"monkey\", n_fingers), Has_n_keys(\"QWERTY keyboard\", n_keys), n_fingers >= n_keys.\n.output Answer\n\n"]}
{"id": 821, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"groundhog day\", \"February\").\nHappens_in_time(\"spring\", \"March\").\nHappens_in_time(\"spring\", \"April\").\nHappens_in_time(\"spring\", \"May\").\nHappens_in_time(\"summer\", \"June\").\nHappens_in_time(\"summer\", \"July\").\nHappens_in_time(\"summer\", \"August\").\nHappens_in_time(\"fall\", \"September\").\nHappens_in_time(\"fall\", \"October\").\nHappens_in_time(\"fall\", \"November\").\nHappens_in_time(\"winter\", \"December\").\nHappens_in_time(\"winter\", \"January\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"groundhog day\", month), Happens_in_time(season, month).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"groundhog day\", \"February\").\nHappens_in_time(\"spring\", \"March\").\nHappens_in_time(\"spring\", \"April\").\nHappens_in_time(\"spring\", \"May\").\nHappens_in_time(\"summer\", \"June\").\nHappens_in_time(\"summer\", \"July\").\nHappens_in_time(\"summer\", \"August\").\nHappens_in_time(\"fall\", \"September\").\nHappens_in_time(\"fall\", \"October\").\nHappens_in_time(\"fall\", \"November\").\nHappens_in_time(\"winter\", \"December\").\nHappens_in_time(\"winter\", \"January\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"groundhog day\", month), Happens_in_time(season, month).\n.output Answer\n\n"]}
{"id": 822, "answer": true, "completion": ".decl Depends_on(Brand:symbol, Animal:symbol)\nDepends_on(\"Nice\", \"Western honey bee\").\n.decl Answer()\nAnswer() :- Depends_on(\"Nice\", \"Western honey bee\").\n.output Answer\n\n", "completions": [".decl Depends_on(Brand:symbol, Animal:symbol)\nDepends_on(\"Nice\", \"Western honey bee\").\n.decl Answer()\nAnswer() :- Depends_on(\"Nice\", \"Western honey bee\").\n.output Answer\n\n"]}
{"id": 823, "answer": false, "completion": ".decl Patented_in(Invention:symbol, Country:symbol)\nPatented_in(\"karaoke\", \"Japan\").\nPatented_in(\"turtle power tiller\", \"United States\").\n.decl Answer()\nAnswer() :- Patented_in(\"karaoke\", country), Patented_in(\"turtle power tiller\", country).\n.output Answer\n\n", "completions": [".decl Patented_in(Invention:symbol, Country:symbol)\nPatented_in(\"karaoke\", \"Japan\").\nPatented_in(\"turtle power tiller\", \"United States\").\n.decl Answer()\nAnswer() :- Patented_in(\"karaoke\", country), Patented_in(\"turtle power tiller\", country).\n.output Answer\n\n"]}
{"id": 824, "answer": true, "completion": ".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Roderick J. McDavis\", \"president of Ohio University\").\n.decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Roderick J. McDavis\", \"jockstrap\").\n.decl Answer()\nAnswer() :- Has_position(person, \"president of Ohio University\"), Wears(person, \"jockstrap\").\n.output Answer\n\n", "completions": [".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Roderick J. McDavis\", \"president of Ohio University\").\n.decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Roderick J. McDavis\", \"jockstrap\").\n.decl Answer()\nAnswer() :- Has_position(person, \"president of Ohio University\"), Wears(person, \"jockstrap\").\n.output Answer\n\n"]}
{"id": 825, "answer": true, "completion": ".decl Is_parent(Person:symbol, Child:symbol)\nIs_parent(\"John\", \"Mary\").\nIs_parent(\"Mary\", \"Peter\").\n.decl Is_grandparent(Person:symbol, Grandchild:symbol)\nIs_grandparent(\"John\", \"Peter\").\n.decl Answer()\nAnswer() :- Is_grandparent(person, grandchild), Is_parent(person, child), Is_parent(child, grandchild).\n.output Answer\n\n", "completions": [".decl Is_parent(Person:symbol, Child:symbol)\nIs_parent(\"John\", \"Mary\").\nIs_parent(\"Mary\", \"Peter\").\n.decl Is_grandparent(Person:symbol, Grandchild:symbol)\nIs_grandparent(\"John\", \"Peter\").\n.decl Answer()\nAnswer() :- Is_grandparent(person, grandchild), Is_parent(person, child), Is_parent(child, grandchild).\n.output Answer\n\n"]}
{"id": 826, "answer": true, "completion": ".decl Has_n_squares(Board:symbol, N_squares:float)\nHas_n_squares(\"chess board\", 64).\nHas_n_squares(\"Shogi board\", 81).\n.decl Answer()\nAnswer() :- Has_n_squares(\"chess board\", n_squares1), Has_n_squares(\"Shogi board\", n_squares2), n_squares1 < n_squares2.\n.output Answer\n\n", "completions": [".decl Has_n_squares(Board:symbol, N_squares:float)\nHas_n_squares(\"chess board\", 64).\nHas_n_squares(\"Shogi board\", 81).\n.decl Answer()\nAnswer() :- Has_n_squares(\"chess board\", n_squares1), Has_n_squares(\"Shogi board\", n_squares2), n_squares1 < n_squares2.\n.output Answer\n\n"]}
{"id": 827, "answer": false, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Darth Vader\", \"lung cancer\").\n.decl Is_symptom(Disease:symbol, Symptom:symbol)\nIs_symptom(\"lung cancer\", \"cough\").\nIs_symptom(\"lung cancer\", \"shortness of breath\").\nIs_symptom(\"lung cancer\", \"chest pain\").\nIs_symptom(\"lung cancer\", \"fatigue\").\nIs_symptom(\"lung cancer\", \"loss of appetite\").\nIs_symptom(\"lung cancer\", \"weight loss\").\nIs_symptom(\"lung cancer\", \"hoarseness\").\nIs_symptom(\"lung cancer\", \"recurring infections\").\nIs_symptom(\"lung cancer\", \"headache\").\nIs_symptom(\"lung cancer\", \"bone pain\").\nIs_symptom(\"lung cancer\", \"jaundice\").\nIs_symptom(\"lung cancer\", \"swelling of the face and neck\").\nIs_symptom(\"lung cancer\", \"seizures\").\nIs_symptom(\"lung cancer\", \"confusion\").\nIs_symptom(\"lung cancer\", \"difficulty swallowing\").\nIs_symptom(\"lung cancer\", \"blood in the sputum\").\nIs_symptom(\"lung cancer\", \"wheezing\").\nIs_symptom(\"lung cancer\", \"clubbing of the fingers or toes\").\nIs_symptom(\"lung cancer\", \"nail problems\").\nIs_symptom(\"lung cancer\", \"skin changes\").\nIs_symptom(\"lung cancer\", \"enlarged lymph nodes\").\nIs_symptom(\"lung cancer\", \"abnormal chest X-ray\").\nIs_symptom(\"lung cancer\", \"abnormal CT scan\").\nIs_symptom(\"lung cancer\", \"abnormal PET scan\").\nIs_symptom(\"lung cancer\", \"abnormal bronchoscopy\").\nIs_symptom(\"lung cancer\", \"abnormal sputum cytology\").\nIs_symptom(\"lung cancer\", \"abnormal lung biopsy\").\nIs_symptom(\"lung cancer\", \"abnormal blood tests\").\nIs_symptom(\"lung cancer\", \"abnormal urine tests\").\nIs_symptom(\"lung cancer\", \"abnormal stool tests\").\nIs_symptom(\"lung cancer\", \"abnormal bone scan\").\nIs_symptom(\"lung cancer\", \"abnormal bone marrow biopsy\").\nIs_symptom(\"lung cancer\", \"abnormal brain scan\").\nIs_symptom(\"lung cancer\", \"abnormal liver biopsy\").\nIs_symptom(\"lung cancer\", \"abnormal heart tests\").\nIs_symptom(\"lung cancer\", \"abnormal kidney tests\").\nIs_symptom(\"lung cancer\", \"abnormal eye tests\").\nIs_symptom(\"lung cancer\", \"abnormal ear tests\").\nIs_symptom(\"lung cancer\", \"abnormal nose tests\").\nIs_symptom(\"lung cancer\", \"abnormal throat tests\").\nIs_symptom(\"lung cancer\", \"abnormal skin tests\").\nIs_symptom(\"lung cancer\", \"abnormal muscle tests\").\nIs_symptom(\"lung cancer\", \"abnormal nerve tests\").\nIs_symptom(\"lung cancer\", \"abnormal reflex", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Darth Vader\", \"lung cancer\").\n.decl Is_symptom(Disease:symbol, Symptom:symbol)\nIs_symptom(\"lung cancer\", \"cough\").\nIs_symptom(\"lung cancer\", \"shortness of breath\").\nIs_symptom(\"lung cancer\", \"chest pain\").\nIs_symptom(\"lung cancer\", \"fatigue\").\nIs_symptom(\"lung cancer\", \"loss of appetite\").\nIs_symptom(\"lung cancer\", \"weight loss\").\nIs_symptom(\"lung cancer\", \"hoarseness\").\nIs_symptom(\"lung cancer\", \"recurring infections\").\nIs_symptom(\"lung cancer\", \"headache\").\nIs_symptom(\"lung cancer\", \"bone pain\").\nIs_symptom(\"lung cancer\", \"jaundice\").\nIs_symptom(\"lung cancer\", \"swelling of the face and neck\").\nIs_symptom(\"lung cancer\", \"seizures\").\nIs_symptom(\"lung cancer\", \"confusion\").\nIs_symptom(\"lung cancer\", \"difficulty swallowing\").\nIs_symptom(\"lung cancer\", \"blood in the sputum\").\nIs_symptom(\"lung cancer\", \"wheezing\").\nIs_symptom(\"lung cancer\", \"clubbing of the fingers or toes\").\nIs_symptom(\"lung cancer\", \"nail problems\").\nIs_symptom(\"lung cancer\", \"skin changes\").\nIs_symptom(\"lung cancer\", \"enlarged lymph nodes\").\nIs_symptom(\"lung cancer\", \"abnormal chest X-ray\").\nIs_symptom(\"lung cancer\", \"abnormal CT scan\").\nIs_symptom(\"lung cancer\", \"abnormal PET scan\").\nIs_symptom(\"lung cancer\", \"abnormal bronchoscopy\").\nIs_symptom(\"lung cancer\", \"abnormal sputum cytology\").\nIs_symptom(\"lung cancer\", \"abnormal lung biopsy\").\nIs_symptom(\"lung cancer\", \"abnormal blood tests\").\nIs_symptom(\"lung cancer\", \"abnormal urine tests\").\nIs_symptom(\"lung cancer\", \"abnormal stool tests\").\nIs_symptom(\"lung cancer\", \"abnormal bone scan\").\nIs_symptom(\"lung cancer\", \"abnormal bone marrow biopsy\").\nIs_symptom(\"lung cancer\", \"abnormal brain scan\").\nIs_symptom(\"lung cancer\", \"abnormal liver biopsy\").\nIs_symptom(\"lung cancer\", \"abnormal heart tests\").\nIs_symptom(\"lung cancer\", \"abnormal kidney tests\").\nIs_symptom(\"lung cancer\", \"abnormal eye tests\").\nIs_symptom(\"lung cancer\", \"abnormal ear tests\").\nIs_symptom(\"lung cancer\", \"abnormal nose tests\").\nIs_symptom(\"lung cancer\", \"abnormal throat tests\").\nIs_symptom(\"lung cancer\", \"abnormal skin tests\").\nIs_symptom(\"lung cancer\", \"abnormal muscle tests\").\nIs_symptom(\"lung cancer\", \"abnormal nerve tests\").\nIs_symptom(\"lung cancer\", \"abnormal reflex"]}
{"id": 828, "answer": true, "completion": ".decl Is_part_of(Entity:symbol, Entity_group:symbol)\nIs_part_of(\"Flying Spaghetti Monster\", \"ancient pantheon\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Flying Spaghetti Monster\", \"ancient pantheon\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Entity:symbol, Entity_group:symbol)\nIs_part_of(\"Flying Spaghetti Monster\", \"ancient pantheon\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Flying Spaghetti Monster\", \"ancient pantheon\").\n.output Answer\n\n"]}
{"id": 829, "answer": true, "completion": ".decl Has_place_in_alphabet(Letter:symbol, Place:float)\nHas_place_in_alphabet(\"B\", 2).\n.decl Has_birth_order(Person:symbol, Birth_order:float)\nHas_birth_order(\"Prince Harry\", 2).\n.decl Answer()\nAnswer() :- Has_place_in_alphabet(\"B\", place), Has_birth_order(\"Prince Harry\", birth_order), place = birth_order.\n.output Answer\n\n", "completions": [".decl Has_place_in_alphabet(Letter:symbol, Place:float)\nHas_place_in_alphabet(\"B\", 2).\n.decl Has_birth_order(Person:symbol, Birth_order:float)\nHas_birth_order(\"Prince Harry\", 2).\n.decl Answer()\nAnswer() :- Has_place_in_alphabet(\"B\", place), Has_birth_order(\"Prince Harry\", birth_order), place = birth_order.\n.output Answer\n\n"]}
{"id": 830, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"snake\", 0.1).\nHas_mass(\"M60 Patton\", 50).\n.decl Answer()\nAnswer() :- Has_mass(\"snake\", mass1), Has_mass(\"M60 Patton\", mass2), mass1 > mass2.\n.output Answer\n\n", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"snake\", 0.1).\nHas_mass(\"M60 Patton\", 50).\n.decl Answer()\nAnswer() :- Has_mass(\"snake\", mass1), Has_mass(\"M60 Patton\", mass2), mass1 > mass2.\n.output Answer\n\n"]}
{"id": 831, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"chives\", \"green\").\nHas_color(\"grass\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"chives\", color1), Has_color(\"grass\", color2), color1 = color2.\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"chives\", \"green\").\nHas_color(\"grass\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"chives\", color1), Has_color(\"grass\", color2), color1 = color2.\n.output Answer\n\n"]}
{"id": 832, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"person\", \"Anorexia nervosa\").\n.decl Has_bone_density(Person:symbol, Bone_density:float)\nHas_bone_density(\"person\", 0.5).\nHas_bone_density(\"person\", 1).\n.decl Answer()\nAnswer() :- Has_disease(\"person\", \"Anorexia nervosa\"), Has_bone_density(\"person\", bone_density1), Has_bone_density(\"person\", bone_density2), bone_density1 < bone_density2.\n.output Answer\n\n", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"person\", \"Anorexia nervosa\").\n.decl Has_bone_density(Person:symbol, Bone_density:float)\nHas_bone_density(\"person\", 0.5).\nHas_bone_density(\"person\", 1).\n.decl Answer()\nAnswer() :- Has_disease(\"person\", \"Anorexia nervosa\"), Has_bone_density(\"person\", bone_density1), Has_bone_density(\"person\", bone_density2), bone_density1 < bone_density2.\n.output Answer\n\n"]}
{"id": 833, "answer": true, "completion": ".decl Has_percentage(Object:symbol, Percentage:float)\nHas_percentage(\"bull shark\", 0.5).\nHas_percentage(\"bull\", 1).\n.decl Answer()\nAnswer() :- Has_percentage(\"bull shark\", percentage1), Has_percentage(\"bull\", percentage2), percentage1 < percentage2.\n.output Answer\n\n", "completions": [".decl Has_percentage(Object:symbol, Percentage:float)\nHas_percentage(\"bull shark\", 0.5).\nHas_percentage(\"bull\", 1).\n.decl Answer()\nAnswer() :- Has_percentage(\"bull shark\", percentage1), Has_percentage(\"bull\", percentage2), percentage1 < percentage2.\n.output Answer\n\n"]}
{"id": 834, "answer": false, "completion": ".decl Has_president(Country:symbol, President:symbol)\nHas_president(\"United States\", \"William McKinley\").\nHas_president(\"United States\", \"Abraham Lincoln\").\n.decl Has_war(Country:symbol, War:symbol)\nHas_war(\"United States\", \"Spanish-American War\").\n.decl Has_demise(Person:symbol, Demise:symbol)\nHas_demise(\"William McKinley\", \"assassination\").\nHas_demise(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- Has_president(\"United States\", president1), Has_president(\"United States\", president2), Has_war(\"United States\", war), Has_demise(president1, demise1), Has_demise(president2, demise2), president1 != president2, war != \"Spanish-American War\", demise1 = demise2.\n.output Answer\n\n", "completions": [".decl Has_president(Country:symbol, President:symbol)\nHas_president(\"United States\", \"William McKinley\").\nHas_president(\"United States\", \"Abraham Lincoln\").\n.decl Has_war(Country:symbol, War:symbol)\nHas_war(\"United States\", \"Spanish-American War\").\n.decl Has_demise(Person:symbol, Demise:symbol)\nHas_demise(\"William McKinley\", \"assassination\").\nHas_demise(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- Has_president(\"United States\", president1), Has_president(\"United States\", president2), Has_war(\"United States\", war), Has_demise(president1, demise1), Has_demise(president2, demise2), president1 != president2, war != \"Spanish-American War\", demise1 = demise2.\n.output Answer\n\n"]}
{"id": 835, "answer": false, "completion": ".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Aretha Franklin\", \"George Michael\").\nCollaborates(\"Aretha Franklin\", \"Elton John\").\nCollaborates(\"Aretha Franklin\", \"Whitney Houston\").\nCollaborates(\"Aretha Franklin\", \"George Benson\").\nCollaborates(\"Aretha Franklin\", \"James Brown\").\nCollaborates(\"Aretha Franklin\", \"Ray Charles\").\nCollaborates(\"Aretha Franklin\", \"Mary J. Blige\").\nCollaborates(\"Aretha Franklin\", \"John Legend\").\nCollaborates(\"Aretha Franklin\", \"Anita Baker\").\nCollaborates(\"Aretha Franklin\", \"Marvin Gaye\").\nCollaborates(\"Aretha Franklin\", \"Stevie Wonder\").\nCollaborates(\"Aretha Franklin\", \"Etta James\").\nCollaborates(\"Aretha Franklin\", \"Gladys Knight\").\nCollaborates(\"Aretha Franklin\", \"Dionne Warwick\").\nCollaborates(\"Aretha Franklin\", \"Cissy Houston\").\nCollaborates(\"Aretha Franklin\", \"Mavis Staples\").\nCollaborates(\"Aretha Franklin\", \"Tina Turner\").\nCollaborates(\"Aretha Franklin\", \"Cher\").\nCollaborates(\"Aretha Franklin\", \"Barbra Streisand\").\nCollaborates(\"Aretha Franklin\", \"Whitney Houston\").\nCollaborates(\"Aretha Franklin\", \"Celine Dion\").\nCollaborates(\"Aretha Franklin\", \"Mary Mary\").\nCollaborates(\"Aretha Franklin\", \"Diana Ross\").\nCollaborates(\"Aretha Franklin\", \"Chaka Khan\").\nCollaborates(\"Aretha Franklin\", \"Luther Vandross\").\nCollaborates(\"Aretha Franklin\", \"Patti LaBelle\").\nCollaborates(\"Aretha Franklin\", \"Kenny G\").\nCollaborates(\"Aretha Franklin\", \"Michael McDonald\").\nCollaborates(\"Aretha Franklin\", \"Elvis Costello\").\nCollaborates(\"Aretha Franklin\", \"Bonnie Raitt\").\nCollaborates(\"Aretha Franklin\", \"Michael Bolton\").\nCollaborates(\"Aretha Franklin\", \"Kem\").\nCollaborates(\"Aretha Franklin\", \"Kirk Franklin\").\nCollaborates(\"Aretha Franklin\", \"Mary J. Blige\").\nCollaborates(\"Aretha Franklin\", \"John Legend\").\nCollaborates(\"Aretha Franklin\", \"Anita Baker\").\nCollaborates(\"Aretha Franklin\", \"Marvin Gaye\").\nCollaborates(\"Aretha Franklin\", \"Stevie Wonder\").\nCollaborates(\"Aretha Franklin\", \"Etta James\").\nCollaborates(\"Aretha Franklin\", \"Gladys Knight\").\nCollaborates(\"Aretha Franklin\", \"Dionne Warwick\").\nCollaborates(\"Aretha Franklin\", \"Cissy Houston\").\nCollaborates(\"Aretha Franklin\", \"Mavis Staples\").\nCollaborates(\"Aretha Franklin\", \"Tina Turner\").\nCollaborates(\"Aretha Franklin\", \"Cher\").\nCollaborates(\"Aretha Franklin\", \"Barbra Streisand\").\nCollaborates(\"Aretha Franklin\", \"Whitney Houston\").\nCollaborates(\"Aretha Franklin\", \"Celine Dion\").\nCollaborates(\"Aretha Franklin\", \"Mary Mary\").\nCollaborates(\"Aretha Franklin\", \"Diana Ross\").\nCollaborates(\"Aretha Franklin\", \"Chaka Khan\").\nCollaborates(\"Aretha Franklin\", \"Luther Vandross\").\nCollaborates(\"Aretha Franklin\", \"Patti LaBelle\").\nCollaborates(\"Aretha Franklin\", \"Kenny G\").\nCollaborates(\"Aretha Franklin\", \"Michael McDonald\").", "completions": [".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Aretha Franklin\", \"George Michael\").\nCollaborates(\"Aretha Franklin\", \"Elton John\").\nCollaborates(\"Aretha Franklin\", \"Whitney Houston\").\nCollaborates(\"Aretha Franklin\", \"George Benson\").\nCollaborates(\"Aretha Franklin\", \"James Brown\").\nCollaborates(\"Aretha Franklin\", \"Ray Charles\").\nCollaborates(\"Aretha Franklin\", \"Mary J. Blige\").\nCollaborates(\"Aretha Franklin\", \"John Legend\").\nCollaborates(\"Aretha Franklin\", \"Anita Baker\").\nCollaborates(\"Aretha Franklin\", \"Marvin Gaye\").\nCollaborates(\"Aretha Franklin\", \"Stevie Wonder\").\nCollaborates(\"Aretha Franklin\", \"Etta James\").\nCollaborates(\"Aretha Franklin\", \"Gladys Knight\").\nCollaborates(\"Aretha Franklin\", \"Dionne Warwick\").\nCollaborates(\"Aretha Franklin\", \"Cissy Houston\").\nCollaborates(\"Aretha Franklin\", \"Mavis Staples\").\nCollaborates(\"Aretha Franklin\", \"Tina Turner\").\nCollaborates(\"Aretha Franklin\", \"Cher\").\nCollaborates(\"Aretha Franklin\", \"Barbra Streisand\").\nCollaborates(\"Aretha Franklin\", \"Whitney Houston\").\nCollaborates(\"Aretha Franklin\", \"Celine Dion\").\nCollaborates(\"Aretha Franklin\", \"Mary Mary\").\nCollaborates(\"Aretha Franklin\", \"Diana Ross\").\nCollaborates(\"Aretha Franklin\", \"Chaka Khan\").\nCollaborates(\"Aretha Franklin\", \"Luther Vandross\").\nCollaborates(\"Aretha Franklin\", \"Patti LaBelle\").\nCollaborates(\"Aretha Franklin\", \"Kenny G\").\nCollaborates(\"Aretha Franklin\", \"Michael McDonald\").\nCollaborates(\"Aretha Franklin\", \"Elvis Costello\").\nCollaborates(\"Aretha Franklin\", \"Bonnie Raitt\").\nCollaborates(\"Aretha Franklin\", \"Michael Bolton\").\nCollaborates(\"Aretha Franklin\", \"Kem\").\nCollaborates(\"Aretha Franklin\", \"Kirk Franklin\").\nCollaborates(\"Aretha Franklin\", \"Mary J. Blige\").\nCollaborates(\"Aretha Franklin\", \"John Legend\").\nCollaborates(\"Aretha Franklin\", \"Anita Baker\").\nCollaborates(\"Aretha Franklin\", \"Marvin Gaye\").\nCollaborates(\"Aretha Franklin\", \"Stevie Wonder\").\nCollaborates(\"Aretha Franklin\", \"Etta James\").\nCollaborates(\"Aretha Franklin\", \"Gladys Knight\").\nCollaborates(\"Aretha Franklin\", \"Dionne Warwick\").\nCollaborates(\"Aretha Franklin\", \"Cissy Houston\").\nCollaborates(\"Aretha Franklin\", \"Mavis Staples\").\nCollaborates(\"Aretha Franklin\", \"Tina Turner\").\nCollaborates(\"Aretha Franklin\", \"Cher\").\nCollaborates(\"Aretha Franklin\", \"Barbra Streisand\").\nCollaborates(\"Aretha Franklin\", \"Whitney Houston\").\nCollaborates(\"Aretha Franklin\", \"Celine Dion\").\nCollaborates(\"Aretha Franklin\", \"Mary Mary\").\nCollaborates(\"Aretha Franklin\", \"Diana Ross\").\nCollaborates(\"Aretha Franklin\", \"Chaka Khan\").\nCollaborates(\"Aretha Franklin\", \"Luther Vandross\").\nCollaborates(\"Aretha Franklin\", \"Patti LaBelle\").\nCollaborates(\"Aretha Franklin\", \"Kenny G\").\nCollaborates(\"Aretha Franklin\", \"Michael McDonald\")."]}
{"id": 836, "answer": true, "completion": ".decl Has_n_wheels(Object:symbol, N_wheels:float)\nHas_n_wheels(\"children's bicycles\", 2).\nHas_n_wheels(\"children's bicycles\", 3).\n.decl Answer()\nAnswer() :- Has_n_wheels(\"children's bicycles\", n_wheels), n_wheels > 2.\n.output Answer\n\n", "completions": [".decl Has_n_wheels(Object:symbol, N_wheels:float)\nHas_n_wheels(\"children's bicycles\", 2).\nHas_n_wheels(\"children's bicycles\", 3).\n.decl Answer()\nAnswer() :- Has_n_wheels(\"children's bicycles\", n_wheels), n_wheels > 2.\n.output Answer\n\n"]}
{"id": 837, "answer": true, "completion": ".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"Royal Observatory in Greenwich\", \"triangle\").\nHas_shape(\"yield sign\", \"triangle\").\n.decl Answer()\nAnswer() :- Has_shape(\"Royal Observatory in Greenwich\", shape1), Has_shape(\"yield sign\", shape2), shape1 = shape2.\n.output Answer\n\n", "completions": [".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"Royal Observatory in Greenwich\", \"triangle\").\nHas_shape(\"yield sign\", \"triangle\").\n.decl Answer()\nAnswer() :- Has_shape(\"Royal Observatory in Greenwich\", shape1), Has_shape(\"yield sign\", shape2), shape1 = shape2.\n.output Answer\n\n"]}
{"id": 838, "answer": true, "completion": ".decl Has_character(Movie:symbol, Character:symbol)\nHas_character(\"Revenge of the Nerds\", \"nerd\").\nHas_character(\"Revenge of the Nerds\", \"jock\").\n.decl Has_outcome(Movie:symbol, Character:symbol, Outcome:symbol)\nHas_outcome(\"Revenge of the Nerds\", \"nerd\", \"winner\").\nHas_outcome(\"Revenge of the Nerds\", \"jock\", \"loser\").\n.decl Answer()\nAnswer() :- Has_character(movie, \"nerd\"), Has_character(movie, \"jock\"), Has_outcome(movie, \"nerd\", \"winner\"), Has_outcome(movie, \"jock\", \"loser\").\n.output Answer\n\n", "completions": [".decl Has_character(Movie:symbol, Character:symbol)\nHas_character(\"Revenge of the Nerds\", \"nerd\").\nHas_character(\"Revenge of the Nerds\", \"jock\").\n.decl Has_outcome(Movie:symbol, Character:symbol, Outcome:symbol)\nHas_outcome(\"Revenge of the Nerds\", \"nerd\", \"winner\").\nHas_outcome(\"Revenge of the Nerds\", \"jock\", \"loser\").\n.decl Answer()\nAnswer() :- Has_character(movie, \"nerd\"), Has_character(movie, \"jock\"), Has_outcome(movie, \"nerd\", \"winner\"), Has_outcome(movie, \"jock\", \"loser\").\n.output Answer\n\n"]}
{"id": 839, "answer": false, "completion": ".decl Has_money(Company:symbol, Money:float)\nHas_money(\"JPMorgan Chase\", 2.4e12).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"United States\", 3.2e8).\n.decl Answer()\nAnswer() :- Has_money(\"JPMorgan Chase\", money), Has_population(\"United States\", population), money >= 10 * population.\n.output Answer\n\n\n", "completions": [".decl Has_money(Company:symbol, Money:float)\nHas_money(\"JPMorgan Chase\", 2.4e12).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"United States\", 3.2e8).\n.decl Answer()\nAnswer() :- Has_money(\"JPMorgan Chase\", money), Has_population(\"United States\", population), money >= 10 * population.\n.output Answer\n\n\n"]}
{"id": 840, "answer": false, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"largest crustacean\", 2.5).\nHas_length(\"king-sized mattress\", 2).\n.decl Answer()\nAnswer() :- Has_length(\"largest crustacean\", length1), Has_length(\"king-sized mattress\", length2), length1 <= length2.\n.output Answer\n\n", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"largest crustacean\", 2.5).\nHas_length(\"king-sized mattress\", 2).\n.decl Answer()\nAnswer() :- Has_length(\"largest crustacean\", length1), Has_length(\"king-sized mattress\", length2), length1 <= length2.\n.output Answer\n\n"]}
{"id": 841, "answer": false, "completion": ".decl Has_n_circles(Hell:symbol, N_circles:float)\nHas_n_circles(\"Hell\", 9).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"8th Circle of Hell\", 10).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"9th Circle of Hell\", 4).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"10th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"1st Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"2nd Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"3rd Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"4th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"5th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"6th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"7th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"8th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"9th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"10th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"1st Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"2nd Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"3rd Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"4th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"5th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"6th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"7th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"8th Circle of Hell\", 1).\n.decl Has_n_", "completions": [".decl Has_n_circles(Hell:symbol, N_circles:float)\nHas_n_circles(\"Hell\", 9).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"8th Circle of Hell\", 10).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"9th Circle of Hell\", 4).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"10th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"1st Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"2nd Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"3rd Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"4th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"5th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"6th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"7th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"8th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"9th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"10th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"1st Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"2nd Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"3rd Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"4th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"5th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"6th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"7th Circle of Hell\", 1).\n.decl Has_n_levels(Circle:symbol, N_levels:float)\nHas_n_levels(\"8th Circle of Hell\", 1).\n.decl Has_n_"]}
{"id": 842, "answer": true, "completion": ".decl Uses(Entity:symbol, Calendar:symbol)\nUses(\"Eastern Orthodox Church\", \"Julian calendar\").\nUses(\"Byzantine Empire\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Uses(\"Eastern Orthodox Church\", calendar), Uses(\"Byzantine Empire\", calendar).\n.output Answer\n\n", "completions": [".decl Uses(Entity:symbol, Calendar:symbol)\nUses(\"Eastern Orthodox Church\", \"Julian calendar\").\nUses(\"Byzantine Empire\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Uses(\"Eastern Orthodox Church\", calendar), Uses(\"Byzantine Empire\", calendar).\n.output Answer\n\n"]}
{"id": 843, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"chlorine gas\", \"green\").\nHas_color(\"neon gas\", \"red\").\n.decl Has_color_vision(Person:symbol, Color_vision:symbol)\nHas_color_vision(\"dichromat\", \"red-green\").\n.decl Answer()\nAnswer() :- Has_color(\"chlorine gas\", color1), Has_color(\"neon gas\", color2), Has_color_vision(\"dichromat\", color_vision), color1 != color2, color_vision = \"red-green\".\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"chlorine gas\", \"green\").\nHas_color(\"neon gas\", \"red\").\n.decl Has_color_vision(Person:symbol, Color_vision:symbol)\nHas_color_vision(\"dichromat\", \"red-green\").\n.decl Answer()\nAnswer() :- Has_color(\"chlorine gas\", color1), Has_color(\"neon gas\", color2), Has_color_vision(\"dichromat\", color_vision), color1 != color2, color_vision = \"red-green\".\n.output Answer\n\n"]}
{"id": 844, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Augustus\", \"Gaius Octavius\").\n.decl Answer()\nAnswer() :- Has_name(\"Augustus\", \"Gaius Octavius\").\n.output Answer\n\n", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Augustus\", \"Gaius Octavius\").\n.decl Answer()\nAnswer() :- Has_name(\"Augustus\", \"Gaius Octavius\").\n.output Answer\n\n"]}
{"id": 845, "answer": true, "completion": ".decl Has_n_spouses(Person:symbol, N_spouses:float)\nHas_n_spouses(\"Darth Vader\", 1).\n.decl Answer()\nAnswer() :- Has_n_spouses(\"Darth Vader\", n_spouses), n_spouses = 1.\n.output Answer\n\n", "completions": [".decl Has_n_spouses(Person:symbol, N_spouses:float)\nHas_n_spouses(\"Darth Vader\", 1).\n.decl Answer()\nAnswer() :- Has_n_spouses(\"Darth Vader\", n_spouses), n_spouses = 1.\n.output Answer\n\n"]}
{"id": 846, "answer": false, "completion": ".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Al-Farabi\", \"10th century\").\nLives_in_time(\"Mohammed\", \"7th century\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Al-Farabi\", time1), Lives_in_time(\"Mohammed\", time2), time1 = time2.\n.output Answer\n\n", "completions": [".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Al-Farabi\", \"10th century\").\nLives_in_time(\"Mohammed\", \"7th century\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Al-Farabi\", time1), Lives_in_time(\"Mohammed\", time2), time1 = time2.\n.output Answer\n\n"]}
{"id": 847, "answer": false, "completion": ".decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Dustin Hoffman\", \"Hillary Clinton\").\n.decl Answer()\nAnswer() :- Votes_for(\"Dustin Hoffman\", \"Donald Trump\").\n.output Answer\n\n", "completions": [".decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Dustin Hoffman\", \"Hillary Clinton\").\n.decl Answer()\nAnswer() :- Votes_for(\"Dustin Hoffman\", \"Donald Trump\").\n.output Answer\n\n"]}
{"id": 848, "answer": true, "completion": ".decl Is_in_continent(Country:symbol, Continent:symbol)\nIs_in_continent(\"United Kingdom\", \"Europe\").\n.decl Is_in_country(Agency:symbol, Country:symbol)\nIs_in_country(\"Foreign and Commonwealth Office\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Is_in_country(\"Foreign and Commonwealth Office\", country), Is_in_continent(country, \"Europe\").\n.output Answer\n\n", "completions": [".decl Is_in_continent(Country:symbol, Continent:symbol)\nIs_in_continent(\"United Kingdom\", \"Europe\").\n.decl Is_in_country(Agency:symbol, Country:symbol)\nIs_in_country(\"Foreign and Commonwealth Office\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Is_in_country(\"Foreign and Commonwealth Office\", country), Is_in_continent(country, \"Europe\").\n.output Answer\n\n"]}
{"id": 849, "answer": false, "completion": ".decl Has_ancestor(Person:symbol, Ancestor:symbol)\nHas_ancestor(\"Naruhito\", \"Akihito\").\nHas_ancestor(\"Akihito\", \"Shōwa\").\nHas_ancestor(\"Shōwa\", \"Taishō\").\nHas_ancestor(\"Taishō\", \"Meiji\").\nHas_ancestor(\"Meiji\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas", "completions": [".decl Has_ancestor(Person:symbol, Ancestor:symbol)\nHas_ancestor(\"Naruhito\", \"Akihito\").\nHas_ancestor(\"Akihito\", \"Shōwa\").\nHas_ancestor(\"Shōwa\", \"Taishō\").\nHas_ancestor(\"Taishō\", \"Meiji\").\nHas_ancestor(\"Meiji\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōkaku\").\nHas_ancestor(\"Kōkaku\", \"Ninkō\").\nHas_ancestor(\"Ninkō\", \"Kōmei\").\nHas_ancestor(\"Kōmei\", \"Ninkō\").\nHas"]}
{"id": 850, "answer": true, "completion": ".decl Has_won(Person:symbol, Award:symbol)\nHas_won(\"Johann Sebastian Bach\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Has_won(\"Johann Sebastian Bach\", \"Grammy Award\").\n.output Answer\n\n", "completions": [".decl Has_won(Person:symbol, Award:symbol)\nHas_won(\"Johann Sebastian Bach\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Has_won(\"Johann Sebastian Bach\", \"Grammy Award\").\n.output Answer\n\n"]}
{"id": 851, "answer": false, "completion": ".decl Fibonacci(N:float, Fibonacci_number:float)\nFibonacci(0, 0).\nFibonacci(1, 1).\nFibonacci(2, 1).\nFibonacci(3, 2).\nFibonacci(4, 3).\nFibonacci(5, 5).\nFibonacci(6, 8).\nFibonacci(7, 13).\nFibonacci(8, 21).\nFibonacci(9, 34).\nFibonacci(10, 55).\nFibonacci(11, 89).\nFibonacci(12, 144).\nFibonacci(13, 233).\nFibonacci(14, 377).\nFibonacci(15, 610).\nFibonacci(16, 987).\nFibonacci(17, 1597).\nFibonacci(18, 2584).\nFibonacci(19, 4181).\nFibonacci(20, 6765).\nFibonacci(21, 10946).\nFibonacci(22, 17711).\nFibonacci(23, 28657).\nFibonacci(24, 46368).\nFibonacci(25, 75025).\nFibonacci(26, 121393).\nFibonacci(27, 196418).\nFibonacci(28, 317811).\nFibonacci(29, 514229).\nFibonacci(30, 832040).\nFibonacci(31, 1346269).\nFibonacci(32, 2178309).\nFibonacci(33, 3524578).\nFibonacci(34, 5702887).\nFibonacci(35, 9227465).\nFibonacci(36, 14930352).\nFibonacci(37, 24157817).\nFibonacci(38, 39088169).\nFibonacci(39, 63245986).\nFibonacci(40, 102334155).\nFibonacci(41, 165580141).\nFibonacci(42, 267914296).\nFibonacci(43, 433494437).\nFibonacci(44, 701408733).\nFibonacci(45, 1134903170).\nFibonacci(46, 1836311903).\nFibonacci(47, 2971215073).\nFibonacci(48, 4807526976).\nFibonacci(49, 7778742049).\nFibonacci(50, 12586269025).\nFibonacci(51, 20365011074).\nFibonacci(52, 32951280099).\nFibonacci(53, 53316291173).\nFibonacci(54, 86267571272).\nFibonacci(55, 139583862445).\nFibonacci(56, 225851433717).\nFibonacci(57, 365435296162).\nFibonacci(58, 591286729879).\nFibonacci(59, 956722026041).\nFibonacci(60, 1548008755920).\nFibonacci(61, 2504730781961).\nFibonacci(62, 4052739537881).\nFibonacci(63, 6557470319842).\nFibonacci(64, 10610", "completions": [".decl Fibonacci(N:float, Fibonacci_number:float)\nFibonacci(0, 0).\nFibonacci(1, 1).\nFibonacci(2, 1).\nFibonacci(3, 2).\nFibonacci(4, 3).\nFibonacci(5, 5).\nFibonacci(6, 8).\nFibonacci(7, 13).\nFibonacci(8, 21).\nFibonacci(9, 34).\nFibonacci(10, 55).\nFibonacci(11, 89).\nFibonacci(12, 144).\nFibonacci(13, 233).\nFibonacci(14, 377).\nFibonacci(15, 610).\nFibonacci(16, 987).\nFibonacci(17, 1597).\nFibonacci(18, 2584).\nFibonacci(19, 4181).\nFibonacci(20, 6765).\nFibonacci(21, 10946).\nFibonacci(22, 17711).\nFibonacci(23, 28657).\nFibonacci(24, 46368).\nFibonacci(25, 75025).\nFibonacci(26, 121393).\nFibonacci(27, 196418).\nFibonacci(28, 317811).\nFibonacci(29, 514229).\nFibonacci(30, 832040).\nFibonacci(31, 1346269).\nFibonacci(32, 2178309).\nFibonacci(33, 3524578).\nFibonacci(34, 5702887).\nFibonacci(35, 9227465).\nFibonacci(36, 14930352).\nFibonacci(37, 24157817).\nFibonacci(38, 39088169).\nFibonacci(39, 63245986).\nFibonacci(40, 102334155).\nFibonacci(41, 165580141).\nFibonacci(42, 267914296).\nFibonacci(43, 433494437).\nFibonacci(44, 701408733).\nFibonacci(45, 1134903170).\nFibonacci(46, 1836311903).\nFibonacci(47, 2971215073).\nFibonacci(48, 4807526976).\nFibonacci(49, 7778742049).\nFibonacci(50, 12586269025).\nFibonacci(51, 20365011074).\nFibonacci(52, 32951280099).\nFibonacci(53, 53316291173).\nFibonacci(54, 86267571272).\nFibonacci(55, 139583862445).\nFibonacci(56, 225851433717).\nFibonacci(57, 365435296162).\nFibonacci(58, 591286729879).\nFibonacci(59, 956722026041).\nFibonacci(60, 1548008755920).\nFibonacci(61, 2504730781961).\nFibonacci(62, 4052739537881).\nFibonacci(63, 6557470319842).\nFibonacci(64, 10610"]}
{"id": 852, "answer": true, "completion": ".decl Requires(Event:symbol, Resource:symbol)\nRequires(\"balancing an account in Microsoft Excel\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"balancing an account in Microsoft Excel\", \"electricity\").\n.output Answer\n\n", "completions": [".decl Requires(Event:symbol, Resource:symbol)\nRequires(\"balancing an account in Microsoft Excel\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"balancing an account in Microsoft Excel\", \"electricity\").\n.output Answer\n\n"]}
{"id": 853, "answer": true, "completion": ".decl Has_alter_ego(Person:symbol, Alter_ego:symbol)\nHas_alter_ego(\"Hulk\", \"Bruce Banner\").\n.decl Explains(Person:symbol, Event:symbol)\nExplains(\"Bruce Banner\", \"atomic events\").\n.decl Answer()\nAnswer() :- Has_alter_ego(\"Hulk\", alter_ego), Explains(alter_ego, \"atomic events\").\n.output Answer\n\n\n", "completions": [".decl Has_alter_ego(Person:symbol, Alter_ego:symbol)\nHas_alter_ego(\"Hulk\", \"Bruce Banner\").\n.decl Explains(Person:symbol, Event:symbol)\nExplains(\"Bruce Banner\", \"atomic events\").\n.decl Answer()\nAnswer() :- Has_alter_ego(\"Hulk\", alter_ego), Explains(alter_ego, \"atomic events\").\n.output Answer\n\n\n"]}
{"id": 854, "answer": true, "completion": ".decl Has_n_lines(Poem:symbol, N_lines:float)\nHas_n_lines(\"Haiku\", 3).\n.decl Has_n_words(Poem:symbol, N_words:float)\nHas_n_words(\"Haiku\", 17).\n.decl Has_n_pages(Book:symbol, N_pages:float)\nHas_n_pages(\"book\", 100).\n.decl Answer()\nAnswer() :- Has_n_lines(\"Haiku\", n_lines), Has_n_words(\"Haiku\", n_words), Has_n_pages(\"book\", n_pages), n_lines*n_words <= n_pages.\n.output Answer\n\n", "completions": [".decl Has_n_lines(Poem:symbol, N_lines:float)\nHas_n_lines(\"Haiku\", 3).\n.decl Has_n_words(Poem:symbol, N_words:float)\nHas_n_words(\"Haiku\", 17).\n.decl Has_n_pages(Book:symbol, N_pages:float)\nHas_n_pages(\"book\", 100).\n.decl Answer()\nAnswer() :- Has_n_lines(\"Haiku\", n_lines), Has_n_words(\"Haiku\", n_words), Has_n_pages(\"book\", n_pages), n_lines*n_words <= n_pages.\n.output Answer\n\n"]}
{"id": 855, "answer": true, "completion": ".decl Helps(Group_A:symbol, Person_A:symbol, Person_B:symbol)\nHelps(\"Social Democratic Party of Germany\", \"Frederick II\", \"Frederick II\").\n.decl Answer()\nAnswer() :- Helps(\"Social Democratic Party of Germany\", \"Frederick II\", \"Frederick II\").\n.output Answer\n\n", "completions": [".decl Helps(Group_A:symbol, Person_A:symbol, Person_B:symbol)\nHelps(\"Social Democratic Party of Germany\", \"Frederick II\", \"Frederick II\").\n.decl Answer()\nAnswer() :- Helps(\"Social Democratic Party of Germany\", \"Frederick II\", \"Frederick II\").\n.output Answer\n\n"]}
{"id": 856, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Toyota Hilux\", 1.5).\nHas_weight(\"Mr. Ed\", 1.2).\n.decl Answer()\nAnswer() :- Has_weight(\"Toyota Hilux\", weight1), Has_weight(\"Mr. Ed\", weight2), weight1 > weight2.\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Toyota Hilux\", 1.5).\nHas_weight(\"Mr. Ed\", 1.2).\n.decl Answer()\nAnswer() :- Has_weight(\"Toyota Hilux\", weight1), Has_weight(\"Mr. Ed\", weight2), weight1 > weight2.\n.output Answer\n\n"]}
{"id": 857, "answer": true, "completion": ".decl Follows(Person:symbol, Religion:symbol)\nFollows(\"Wednesday name origin follower\", \"Wednesday name origin\").\n.decl Denies(Religion:symbol, Event:symbol)\nDenies(\"Wednesday name origin\", \"Communion\").\n.decl Answer()\nAnswer() :- Follows(person, religion), Denies(religion, \"Communion\").\n.output Answer\n\n", "completions": [".decl Follows(Person:symbol, Religion:symbol)\nFollows(\"Wednesday name origin follower\", \"Wednesday name origin\").\n.decl Denies(Religion:symbol, Event:symbol)\nDenies(\"Wednesday name origin\", \"Communion\").\n.decl Answer()\nAnswer() :- Follows(person, religion), Denies(religion, \"Communion\").\n.output Answer\n\n"]}
{"id": 858, "answer": true, "completion": ".decl Writes(Person:symbol, Text:symbol)\nWrites(\"astronomer\", \"horoscope\").\n.decl Answer()\nAnswer() :- Writes(\"astronomer\", \"horoscope\").\n.output Answer\n\n", "completions": [".decl Writes(Person:symbol, Text:symbol)\nWrites(\"astronomer\", \"horoscope\").\n.decl Answer()\nAnswer() :- Writes(\"astronomer\", \"horoscope\").\n.output Answer\n\n"]}
{"id": 859, "answer": false, "completion": ".decl Visits(Person:symbol, Place:symbol)\nVisits(\"Edward Snowden\", \"United States\").\nVisits(\"Edward Snowden\", \"Russia\").\nVisits(\"Edward Snowden\", \"Hong Kong\").\nVisits(\"Edward Snowden\", \"Ecuador\").\n.decl Is_in(Place:symbol, Country:symbol)\nIs_in(\"United States\", \"United States\").\nIs_in(\"Russia\", \"Russia\").\nIs_in(\"Hong Kong\", \"China\").\nIs_in(\"Ecuador\", \"Ecuador\").\nIs_in(\"United Nations Conference on Trade and Development\", \"Switzerland\").\n.decl Answer()\nAnswer() :- Visits(\"Edward Snowden\", place1), Is_in(place1, country1), Is_in(\"United Nations Conference on Trade and Development\", country2), country1 = country2.\n.output Answer\n\n", "completions": [".decl Visits(Person:symbol, Place:symbol)\nVisits(\"Edward Snowden\", \"United States\").\nVisits(\"Edward Snowden\", \"Russia\").\nVisits(\"Edward Snowden\", \"Hong Kong\").\nVisits(\"Edward Snowden\", \"Ecuador\").\n.decl Is_in(Place:symbol, Country:symbol)\nIs_in(\"United States\", \"United States\").\nIs_in(\"Russia\", \"Russia\").\nIs_in(\"Hong Kong\", \"China\").\nIs_in(\"Ecuador\", \"Ecuador\").\nIs_in(\"United Nations Conference on Trade and Development\", \"Switzerland\").\n.decl Answer()\nAnswer() :- Visits(\"Edward Snowden\", place1), Is_in(place1, country1), Is_in(\"United Nations Conference on Trade and Development\", country2), country1 = country2.\n.output Answer\n\n"]}
{"id": 860, "answer": false, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"spinach\", 23).\n.decl Has_calorie_requirement(Person:symbol, Calories:float)\nHas_calorie_requirement(\"Popeye\", 2000).\n.decl Answer()\nAnswer() :- Has_calories(\"spinach\", calories1), Has_calorie_requirement(\"Popeye\", calories2), calories1 > calories2.\n.output Answer\n\n", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"spinach\", 23).\n.decl Has_calorie_requirement(Person:symbol, Calories:float)\nHas_calorie_requirement(\"Popeye\", 2000).\n.decl Answer()\nAnswer() :- Has_calories(\"spinach\", calories1), Has_calorie_requirement(\"Popeye\", calories2), calories1 > calories2.\n.output Answer\n\n"]}
{"id": 861, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"bengal fox\", \"India\").\n.decl Happens_in(Event:symbol, Location:symbol)\nHappens_in(\"Superbowl\", \"United States\").\n.decl Answer()\nAnswer() :- Lives_in(\"bengal fox\", location1), Happens_in(\"Superbowl\", location2), location1 != location2.\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"bengal fox\", \"India\").\n.decl Happens_in(Event:symbol, Location:symbol)\nHappens_in(\"Superbowl\", \"United States\").\n.decl Answer()\nAnswer() :- Lives_in(\"bengal fox\", location1), Happens_in(\"Superbowl\", location2), location1 != location2.\n.output Answer\n\n"]}
{"id": 862, "answer": false, "completion": ".decl Approves(Person:symbol, Book:symbol)\nApproves(\"Jehovah's witness\", \"The Bible\").\nApproves(\"Jehovah's witness\", \"The Watchtower\").\nApproves(\"Jehovah's witness\", \"Awake!\").\n.decl Is_about(Book:symbol, Topic:symbol)\nIs_about(\"Alice's Adventures in Wonderland\", \"fantasy\").\nIs_about(\"The Bible\", \"religion\").\nIs_about(\"The Watchtower\", \"religion\").\nIs_about(\"Awake!\", \"religion\").\n.decl Answer()\nAnswer() :- Approves(\"Jehovah's witness\", book), Is_about(\"Alice's Adventures in Wonderland\", topic), Is_about(book, topic).\n.output Answer\n\n", "completions": [".decl Approves(Person:symbol, Book:symbol)\nApproves(\"Jehovah's witness\", \"The Bible\").\nApproves(\"Jehovah's witness\", \"The Watchtower\").\nApproves(\"Jehovah's witness\", \"Awake!\").\n.decl Is_about(Book:symbol, Topic:symbol)\nIs_about(\"Alice's Adventures in Wonderland\", \"fantasy\").\nIs_about(\"The Bible\", \"religion\").\nIs_about(\"The Watchtower\", \"religion\").\nIs_about(\"Awake!\", \"religion\").\n.decl Answer()\nAnswer() :- Approves(\"Jehovah's witness\", book), Is_about(\"Alice's Adventures in Wonderland\", topic), Is_about(book, topic).\n.output Answer\n\n"]}
{"id": 863, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Germaphobia\", \"Germaphobia\").\n.decl Can_participate_in(Person:symbol, Activity:symbol)\nCan_participate_in(\"Germaphobia\", \"Judo\").\n.decl Answer()\nAnswer() :- Has_disease(\"Germaphobia\", \"Germaphobia\"), Can_participate_in(\"Germaphobia\", \"Judo\").\n.output Answer\n\n", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Germaphobia\", \"Germaphobia\").\n.decl Can_participate_in(Person:symbol, Activity:symbol)\nCan_participate_in(\"Germaphobia\", \"Judo\").\n.decl Answer()\nAnswer() :- Has_disease(\"Germaphobia\", \"Germaphobia\"), Can_participate_in(\"Germaphobia\", \"Judo\").\n.output Answer\n\n"]}
{"id": 864, "answer": true, "completion": ".decl Rescues(Lifeboat:symbol, Sea:symbol)\nRescues(\"lifeboat\", \"Hooke Sea\").\n.decl Answer()\nAnswer() :- Rescues(\"lifeboat\", \"Hooke Sea\").\n.output Answer\n\n", "completions": [".decl Rescues(Lifeboat:symbol, Sea:symbol)\nRescues(\"lifeboat\", \"Hooke Sea\").\n.decl Answer()\nAnswer() :- Rescues(\"lifeboat\", \"Hooke Sea\").\n.output Answer\n\n"]}
{"id": 865, "answer": false, "completion": ".decl Has_n_words(Document:symbol, N_words:float)\nHas_n_words(\"Eighth Amendment to the United States Constitution\", 10).\n.decl Has_n_words(Document:symbol, N_words:float)\nHas_n_words(\"court\", 1).\n.decl Answer()\nAnswer() :- Has_n_words(\"Eighth Amendment to the United States Constitution\", n_words1), Has_n_words(\"court\", n_words2), n_words1 > n_words2.\n.output Answer\n\n", "completions": [".decl Has_n_words(Document:symbol, N_words:float)\nHas_n_words(\"Eighth Amendment to the United States Constitution\", 10).\n.decl Has_n_words(Document:symbol, N_words:float)\nHas_n_words(\"court\", 1).\n.decl Answer()\nAnswer() :- Has_n_words(\"Eighth Amendment to the United States Constitution\", n_words1), Has_n_words(\"court\", n_words2), n_words1 > n_words2.\n.output Answer\n\n"]}
{"id": 866, "answer": true, "completion": ".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"cosmic microwave background\", 2.7).\nHas_temperature(\"food\", 100).\n.decl Answer()\nAnswer() :- Has_temperature(\"cosmic microwave background\", temperature1), Has_temperature(\"food\", temperature2), temperature1 < temperature2.\n.output Answer\n\n", "completions": [".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"cosmic microwave background\", 2.7).\nHas_temperature(\"food\", 100).\n.decl Answer()\nAnswer() :- Has_temperature(\"cosmic microwave background\", temperature1), Has_temperature(\"food\", temperature2), temperature1 < temperature2.\n.output Answer\n\n"]}
{"id": 867, "answer": true, "completion": ".decl Cares_about(Person:symbol, Topic:symbol)\nCares_about(\"Nigella Lawson\", \"cooking\").\n.decl Is_subtopic(Topic:symbol, Subtopic:symbol)\nIs_subtopic(\"cooking\", \"solubility\").\n.decl Answer()\nAnswer() :- Cares_about(\"Nigella Lawson\", topic), Is_subtopic(topic, \"solubility\").\n.output Answer\n\n", "completions": [".decl Cares_about(Person:symbol, Topic:symbol)\nCares_about(\"Nigella Lawson\", \"cooking\").\n.decl Is_subtopic(Topic:symbol, Subtopic:symbol)\nIs_subtopic(\"cooking\", \"solubility\").\n.decl Answer()\nAnswer() :- Cares_about(\"Nigella Lawson\", topic), Is_subtopic(topic, \"solubility\").\n.output Answer\n\n"]}
{"id": 868, "answer": true, "completion": ".decl Plays_sport(Person:symbol, Sport:symbol)\nPlays_sport(\"Rahul Dravid\", \"cricket\").\nPlays_sport(\"Rahul Dravid\", \"football\").\n.decl Has_action(Sport:symbol, Action:symbol)\nHas_action(\"cricket\", \"batting\").\nHas_action(\"cricket\", \"bowling\").\nHas_action(\"football\", \"kicking\").\nHas_action(\"football\", \"passing\").\n.decl Answer()\nAnswer() :- Plays_sport(\"Rahul Dravid\", sport), Has_action(sport, \"kicking\").\n.output Answer\n\n", "completions": [".decl Plays_sport(Person:symbol, Sport:symbol)\nPlays_sport(\"Rahul Dravid\", \"cricket\").\nPlays_sport(\"Rahul Dravid\", \"football\").\n.decl Has_action(Sport:symbol, Action:symbol)\nHas_action(\"cricket\", \"batting\").\nHas_action(\"cricket\", \"bowling\").\nHas_action(\"football\", \"kicking\").\nHas_action(\"football\", \"passing\").\n.decl Answer()\nAnswer() :- Plays_sport(\"Rahul Dravid\", sport), Has_action(sport, \"kicking\").\n.output Answer\n\n"]}
{"id": 869, "answer": true, "completion": ".decl Plays_at(Band:symbol, Venue:symbol)\nPlays_at(\"U2\", \"Polo Grounds\").\n.decl Answer()\nAnswer() :- Plays_at(\"U2\", \"Polo Grounds\").\n.output Answer\n\n", "completions": [".decl Plays_at(Band:symbol, Venue:symbol)\nPlays_at(\"U2\", \"Polo Grounds\").\n.decl Answer()\nAnswer() :- Plays_at(\"U2\", \"Polo Grounds\").\n.output Answer\n\n"]}
{"id": 870, "answer": false, "completion": ".decl Has_cuisine(Country:symbol, Cuisine:symbol)\nHas_cuisine(\"United States\", \"American\").\nHas_cuisine(\"United Kingdom\", \"British\").\n.decl Has_meal(Cuisine:symbol, Meal:symbol)\nHas_meal(\"American\", \"breakfast\").\nHas_meal(\"British\", \"dinner\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"United States\", cuisine1), Has_cuisine(\"United Kingdom\", cuisine2), Has_meal(cuisine1, meal1), Has_meal(cuisine2, meal2), meal1 = meal2.\n.output Answer\n\n", "completions": [".decl Has_cuisine(Country:symbol, Cuisine:symbol)\nHas_cuisine(\"United States\", \"American\").\nHas_cuisine(\"United Kingdom\", \"British\").\n.decl Has_meal(Cuisine:symbol, Meal:symbol)\nHas_meal(\"American\", \"breakfast\").\nHas_meal(\"British\", \"dinner\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"United States\", cuisine1), Has_cuisine(\"United Kingdom\", cuisine2), Has_meal(cuisine1, meal1), Has_meal(cuisine2, meal2), meal1 = meal2.\n.output Answer\n\n"]}
{"id": 871, "answer": true, "completion": ".decl Is_ingredient(Ingredient:symbol, Dish:symbol)\nIs_ingredient(\"onion\", \"blooming onion\").\nIs_ingredient(\"shallot\", \"blooming onion\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"shallot\", \"blooming onion\").\n.output Answer\n\n", "completions": [".decl Is_ingredient(Ingredient:symbol, Dish:symbol)\nIs_ingredient(\"onion\", \"blooming onion\").\nIs_ingredient(\"shallot\", \"blooming onion\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"shallot\", \"blooming onion\").\n.output Answer\n\n"]}
{"id": 872, "answer": true, "completion": ".decl Has_solubility(Substance:symbol, Solubility:symbol)\nHas_solubility(\"salt\", \"low\").\n.decl Is_solvent(Substance:symbol, Solvent:symbol)\nIs_solvent(\"isopropyl alcohol\", \"salt\").\n.decl Answer()\nAnswer() :- Is_solvent(\"isopropyl alcohol\", substance), Has_solubility(substance, \"low\").\n.output Answer\n\n", "completions": [".decl Has_solubility(Substance:symbol, Solubility:symbol)\nHas_solubility(\"salt\", \"low\").\n.decl Is_solvent(Substance:symbol, Solvent:symbol)\nIs_solvent(\"isopropyl alcohol\", \"salt\").\n.decl Answer()\nAnswer() :- Is_solvent(\"isopropyl alcohol\", substance), Has_solubility(substance, \"low\").\n.output Answer\n\n"]}
{"id": 873, "answer": true, "completion": ".decl Has_width(Object:symbol, Width:float)\nHas_width(\"Mac Truck\", 2.5).\nHas_width(\"Golden Gate Bridge\", 27).\n.decl Answer()\nAnswer() :- Has_width(\"Mac Truck\", width1), Has_width(\"Golden Gate Bridge\", width2), width1 * 13 > width2.\n.output Answer\n\n", "completions": [".decl Has_width(Object:symbol, Width:float)\nHas_width(\"Mac Truck\", 2.5).\nHas_width(\"Golden Gate Bridge\", 27).\n.decl Answer()\nAnswer() :- Has_width(\"Mac Truck\", width1), Has_width(\"Golden Gate Bridge\", width2), width1 * 13 > width2.\n.output Answer\n\n"]}
{"id": 874, "answer": false, "completion": ".decl Has_gravity(Object:symbol, Gravity:float)\nHas_gravity(\"asteroid\", 0).\n.decl Answer()\nAnswer() :- Has_gravity(\"asteroid\", gravity), gravity > 0.\n.output Answer\n\n", "completions": [".decl Has_gravity(Object:symbol, Gravity:float)\nHas_gravity(\"asteroid\", 0).\n.decl Answer()\nAnswer() :- Has_gravity(\"asteroid\", gravity), gravity > 0.\n.output Answer\n\n"]}
{"id": 875, "answer": false, "completion": ".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"EastEnders series\", 100).\n.decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"binge\", 3).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"EastEnders series\", n_hours1), Lasts_n_hours(\"binge\", n_hours2), n_hours1 <= n_hours2.\n.output Answer\n\n", "completions": [".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"EastEnders series\", 100).\n.decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"binge\", 3).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"EastEnders series\", n_hours1), Lasts_n_hours(\"binge\", n_hours2), n_hours1 <= n_hours2.\n.output Answer\n\n"]}
{"id": 876, "answer": true, "completion": ".decl Grows_in(Plant:symbol, Environment:symbol)\nGrows_in(\"cucumber\", \"desert\").\n.decl Answer()\nAnswer() :- Grows_in(\"cucumber\", \"desert\").\n.output Answer\n\n", "completions": [".decl Grows_in(Plant:symbol, Environment:symbol)\nGrows_in(\"cucumber\", \"desert\").\n.decl Answer()\nAnswer() :- Grows_in(\"cucumber\", \"desert\").\n.output Answer\n\n"]}
{"id": 877, "answer": false, "completion": ".decl Lasts_n_minutes(Event:symbol, N_minutes:float)\nLasts_n_minutes(\"Borgia's World of Wonders\", 60).\nLasts_n_minutes(\"Ludacris's Release Therapy\", 60).\n.decl Answer()\nAnswer() :- Lasts_n_minutes(\"Borgia's World of Wonders\", n_minutes1), Lasts_n_minutes(\"Ludacris's Release Therapy\", n_minutes2), n_minutes1 < n_minutes2.\n.output Answer\n\n", "completions": [".decl Lasts_n_minutes(Event:symbol, N_minutes:float)\nLasts_n_minutes(\"Borgia's World of Wonders\", 60).\nLasts_n_minutes(\"Ludacris's Release Therapy\", 60).\n.decl Answer()\nAnswer() :- Lasts_n_minutes(\"Borgia's World of Wonders\", n_minutes1), Lasts_n_minutes(\"Ludacris's Release Therapy\", n_minutes2), n_minutes1 < n_minutes2.\n.output Answer\n\n"]}
{"id": 878, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"potato vodka\", \"potato\").\nHas_ingredient(\"potato vodka\", \"water\").\nHas_ingredient(\"potato vodka\", \"ethanol\").\n.decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"someone with celiac disease\", \"gluten\").\n.decl Answer()\nAnswer() :- Has_allergy(\"someone with celiac disease\", allergy), Has_ingredient(\"potato vodka\", ingredient), !Has_ingredient(ingredient, allergy).\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"potato vodka\", \"potato\").\nHas_ingredient(\"potato vodka\", \"water\").\nHas_ingredient(\"potato vodka\", \"ethanol\").\n.decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"someone with celiac disease\", \"gluten\").\n.decl Answer()\nAnswer() :- Has_allergy(\"someone with celiac disease\", allergy), Has_ingredient(\"potato vodka\", ingredient), !Has_ingredient(ingredient, allergy).\n.output Answer\n\n"]}
{"id": 879, "answer": true, "completion": ".decl Is_allowed(Action:symbol, Organization:symbol)\nIs_allowed(\"polyamory\", \"Catholic Church\").\n.decl Answer()\nAnswer() :- Is_allowed(\"polyamory\", \"Catholic Church\").\n.output Answer\n\n", "completions": [".decl Is_allowed(Action:symbol, Organization:symbol)\nIs_allowed(\"polyamory\", \"Catholic Church\").\n.decl Answer()\nAnswer() :- Is_allowed(\"polyamory\", \"Catholic Church\").\n.output Answer\n\n"]}
{"id": 880, "answer": false, "completion": ".decl Has_symptom(Mental_disorder:symbol, Symptom:symbol)\nHas_symptom(\"schizophrenia\", \"hallucinations\").\nHas_symptom(\"schizophrenia\", \"delusions\").\nHas_symptom(\"schizophrenia\", \"disorganized speech\").\nHas_symptom(\"schizophrenia\", \"disorganized behavior\").\nHas_symptom(\"schizophrenia\", \"negative symptoms\").\nHas_symptom(\"schizophrenia\", \"cognitive impairment\").\nHas_symptom(\"schizophrenia\", \"social withdrawal\").\nHas_symptom(\"schizophrenia\", \"depression\").\nHas_symptom(\"schizophrenia\", \"anxiety\").\nHas_symptom(\"schizophrenia\", \"suicidal ideation\").\nHas_symptom(\"schizophrenia\", \"suicide\").\nHas_symptom(\"schizophrenia\", \"self-harm\").\nHas_symptom(\"schizophrenia\", \"substance abuse\").\nHas_symptom(\"schizophrenia\", \"sleep problems\").\nHas_symptom(\"schizophrenia\", \"lack of motivation\").\nHas_symptom(\"schizophrenia\", \"lack of emotion\").\nHas_symptom(\"schizophrenia\", \"lack of pleasure\").\nHas_symptom(\"schizophrenia\", \"lack of interest\").\nHas_symptom(\"schizophrenia\", \"lack of energy\").\nHas_symptom(\"schizophrenia\", \"lack of concentration\").\nHas_symptom(\"schizophrenia\", \"lack of self-care\").\nHas_symptom(\"schizophrenia\", \"lack of hygiene\").\nHas_symptom(\"schizophrenia\", \"lack of appetite\").\nHas_symptom(\"schizophrenia\", \"lack of speech\").\nHas_symptom(\"schizophrenia\", \"lack of movement\").\nHas_symptom(\"schizophrenia\", \"lack of facial expression\").\nHas_symptom(\"schizophrenia\", \"lack of eye contact\").\nHas_symptom(\"schizophrenia\", \"lack of social interaction\").\nHas_symptom(\"schizophrenia\", \"lack of social skills\").\nHas_symptom(\"schizophrenia\", \"lack of social interest\").\nHas_symptom(\"schizophrenia\", \"lack of social motivation\").\nHas_symptom(\"schizophrenia\", \"lack of social emotion\").\nHas_symptom(\"schizophrenia\", \"lack of social pleasure\").\nHas_symptom(\"schizophrenia\", \"lack of social interest\").\nHas_symptom(\"schizophrenia\", \"lack of social energy\").\nHas_symptom(\"schizophrenia\", \"lack of social concentration\").\nHas_symptom(\"schizophrenia\", \"lack of social self-care\").\nHas_symptom(\"schizophrenia\", \"lack of social hygiene\").\nHas_symptom(\"schizophrenia\", \"lack of social appetite\").\nHas_symptom(\"schizophrenia\", \"lack of social speech\").\nHas_symptom(\"schizophrenia\", \"lack of social movement\").\nHas_symptom(\"schizophrenia\", \"lack of social facial expression\").\nHas_symptom(\"schizophrenia\", \"lack of social eye contact\").\nHas_symptom(\"schizophrenia\", \"lack of social interaction\").\nHas_symptom(\"schizophrenia\", \"lack of social skills\").\nHas_", "completions": [".decl Has_symptom(Mental_disorder:symbol, Symptom:symbol)\nHas_symptom(\"schizophrenia\", \"hallucinations\").\nHas_symptom(\"schizophrenia\", \"delusions\").\nHas_symptom(\"schizophrenia\", \"disorganized speech\").\nHas_symptom(\"schizophrenia\", \"disorganized behavior\").\nHas_symptom(\"schizophrenia\", \"negative symptoms\").\nHas_symptom(\"schizophrenia\", \"cognitive impairment\").\nHas_symptom(\"schizophrenia\", \"social withdrawal\").\nHas_symptom(\"schizophrenia\", \"depression\").\nHas_symptom(\"schizophrenia\", \"anxiety\").\nHas_symptom(\"schizophrenia\", \"suicidal ideation\").\nHas_symptom(\"schizophrenia\", \"suicide\").\nHas_symptom(\"schizophrenia\", \"self-harm\").\nHas_symptom(\"schizophrenia\", \"substance abuse\").\nHas_symptom(\"schizophrenia\", \"sleep problems\").\nHas_symptom(\"schizophrenia\", \"lack of motivation\").\nHas_symptom(\"schizophrenia\", \"lack of emotion\").\nHas_symptom(\"schizophrenia\", \"lack of pleasure\").\nHas_symptom(\"schizophrenia\", \"lack of interest\").\nHas_symptom(\"schizophrenia\", \"lack of energy\").\nHas_symptom(\"schizophrenia\", \"lack of concentration\").\nHas_symptom(\"schizophrenia\", \"lack of self-care\").\nHas_symptom(\"schizophrenia\", \"lack of hygiene\").\nHas_symptom(\"schizophrenia\", \"lack of appetite\").\nHas_symptom(\"schizophrenia\", \"lack of speech\").\nHas_symptom(\"schizophrenia\", \"lack of movement\").\nHas_symptom(\"schizophrenia\", \"lack of facial expression\").\nHas_symptom(\"schizophrenia\", \"lack of eye contact\").\nHas_symptom(\"schizophrenia\", \"lack of social interaction\").\nHas_symptom(\"schizophrenia\", \"lack of social skills\").\nHas_symptom(\"schizophrenia\", \"lack of social interest\").\nHas_symptom(\"schizophrenia\", \"lack of social motivation\").\nHas_symptom(\"schizophrenia\", \"lack of social emotion\").\nHas_symptom(\"schizophrenia\", \"lack of social pleasure\").\nHas_symptom(\"schizophrenia\", \"lack of social interest\").\nHas_symptom(\"schizophrenia\", \"lack of social energy\").\nHas_symptom(\"schizophrenia\", \"lack of social concentration\").\nHas_symptom(\"schizophrenia\", \"lack of social self-care\").\nHas_symptom(\"schizophrenia\", \"lack of social hygiene\").\nHas_symptom(\"schizophrenia\", \"lack of social appetite\").\nHas_symptom(\"schizophrenia\", \"lack of social speech\").\nHas_symptom(\"schizophrenia\", \"lack of social movement\").\nHas_symptom(\"schizophrenia\", \"lack of social facial expression\").\nHas_symptom(\"schizophrenia\", \"lack of social eye contact\").\nHas_symptom(\"schizophrenia\", \"lack of social interaction\").\nHas_symptom(\"schizophrenia\", \"lack of social skills\").\nHas_"]}
{"id": 881, "answer": false, "completion": ".decl Has_name(Brand:symbol, Name:symbol)\nHas_name(\"Tesla\", \"Nikola Tesla\").\nHas_name(\"Tesla\", \"Nikola Tesla\").\n.decl Answer()\nAnswer() :- Has_name(brand1, \"Nikola Tesla\"), Has_name(brand2, \"Nikola Tesla\"), brand1 != brand2.\n.output Answer\n\n", "completions": [".decl Has_name(Brand:symbol, Name:symbol)\nHas_name(\"Tesla\", \"Nikola Tesla\").\nHas_name(\"Tesla\", \"Nikola Tesla\").\n.decl Answer()\nAnswer() :- Has_name(brand1, \"Nikola Tesla\"), Has_name(brand2, \"Nikola Tesla\"), brand1 != brand2.\n.output Answer\n\n"]}
{"id": 882, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"eleventh-grader\", 17).\n.decl Eligible_for(Person:symbol, Program:symbol)\nEligible_for(\"eleventh-grader\", \"Medicare\").\n.decl Answer()\nAnswer() :- Has_age(\"eleventh-grader\", age), Eligible_for(\"eleventh-grader\", \"Medicare\"), age >= 65.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"eleventh-grader\", 17).\n.decl Eligible_for(Person:symbol, Program:symbol)\nEligible_for(\"eleventh-grader\", \"Medicare\").\n.decl Answer()\nAnswer() :- Has_age(\"eleventh-grader\", age), Eligible_for(\"eleventh-grader\", \"Medicare\"), age >= 65.\n.output Answer\n\n"]}
{"id": 883, "answer": true, "completion": ".decl Has_mood_disorder(Person:symbol)\nHas_mood_disorder(\"John\").\n.decl Needs_permanent_institutionalization(Person:symbol)\nNeeds_permanent_institutionalization(\"John\").\n.decl Answer()\nAnswer() :- Has_mood_disorder(person), Needs_permanent_institutionalization(person).\n.output Answer\n\n", "completions": [".decl Has_mood_disorder(Person:symbol)\nHas_mood_disorder(\"John\").\n.decl Needs_permanent_institutionalization(Person:symbol)\nNeeds_permanent_institutionalization(\"John\").\n.decl Answer()\nAnswer() :- Has_mood_disorder(person), Needs_permanent_institutionalization(person).\n.output Answer\n\n"]}
{"id": 884, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"flag of Gabon\", \"green\").\nHas_color(\"flag of Gabon\", \"yellow\").\nHas_color(\"flag of Gabon\", \"blue\").\nHas_color(\"rainbow\", \"red\").\nHas_color(\"rainbow\", \"orange\").\nHas_color(\"rainbow\", \"yellow\").\nHas_color(\"rainbow\", \"green\").\nHas_color(\"rainbow\", \"blue\").\nHas_color(\"rainbow\", \"indigo\").\nHas_color(\"rainbow\", \"violet\").\n.decl Answer()\nAnswer() :- Has_color(\"flag of Gabon\", color), Has_color(\"rainbow\", color).\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"flag of Gabon\", \"green\").\nHas_color(\"flag of Gabon\", \"yellow\").\nHas_color(\"flag of Gabon\", \"blue\").\nHas_color(\"rainbow\", \"red\").\nHas_color(\"rainbow\", \"orange\").\nHas_color(\"rainbow\", \"yellow\").\nHas_color(\"rainbow\", \"green\").\nHas_color(\"rainbow\", \"blue\").\nHas_color(\"rainbow\", \"indigo\").\nHas_color(\"rainbow\", \"violet\").\n.decl Answer()\nAnswer() :- Has_color(\"flag of Gabon\", color), Has_color(\"rainbow\", color).\n.output Answer\n\n"]}
{"id": 885, "answer": true, "completion": ".decl Is_type(Visit:symbol, Type:symbol)\nIs_type(\"preventive healthcare visit\", \"preventive healthcare\").\nIs_type(\"sickness visit\", \"sickness\").\n.decl Answer()\nAnswer() :- Is_type(visit1, \"preventive healthcare\"), Is_type(visit2, \"sickness\"), visit1 != visit2.\n.output Answer\n\n", "completions": [".decl Is_type(Visit:symbol, Type:symbol)\nIs_type(\"preventive healthcare visit\", \"preventive healthcare\").\nIs_type(\"sickness visit\", \"sickness\").\n.decl Answer()\nAnswer() :- Is_type(visit1, \"preventive healthcare\"), Is_type(visit2, \"sickness\"), visit1 != visit2.\n.output Answer\n\n"]}
{"id": 886, "answer": true, "completion": ".decl Has_fat(Food:symbol, Fat:float)\nHas_fat(\"McDonald's hamburger\", 10).\n.decl Has_fat_allowance(Person:symbol, Fat_allowance:float)\nHas_fat_allowance(\"USDA\", 65).\n.decl Answer()\nAnswer() :- Has_fat(\"McDonald's hamburger\", fat1), Has_fat_allowance(\"USDA\", fat2), 7*fat1 > fat2.\n.output Answer\n\n", "completions": [".decl Has_fat(Food:symbol, Fat:float)\nHas_fat(\"McDonald's hamburger\", 10).\n.decl Has_fat_allowance(Person:symbol, Fat_allowance:float)\nHas_fat_allowance(\"USDA\", 65).\n.decl Answer()\nAnswer() :- Has_fat(\"McDonald's hamburger\", fat1), Has_fat_allowance(\"USDA\", fat2), 7*fat1 > fat2.\n.output Answer\n\n"]}
{"id": 887, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Edward II of England's birth\", \"1284\").\nHappens_in_time(\"Vikings\", \"800-1050\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Edward II of England's birth\", time1), Happens_in_time(\"Vikings\", time2), time1 < time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Edward II of England's birth\", \"1284\").\nHappens_in_time(\"Vikings\", \"800-1050\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Edward II of England's birth\", time1), Happens_in_time(\"Vikings\", time2), time1 < time2.\n.output Answer\n\n"]}
{"id": 888, "answer": true, "completion": ".decl Has_magnetic_field(Object:symbol, Magnetic_field:float)\nHas_magnetic_field(\"Earth\", 0.00005).\n.decl Has_magnetic_susceptibility(Object:symbol, Magnetic_susceptibility:float)\nHas_magnetic_susceptibility(\"implant\", 0.00001).\n.decl Answer()\nAnswer() :- Has_magnetic_field(\"Earth\", magnetic_field), Has_magnetic_susceptibility(\"implant\", magnetic_susceptibility), magnetic_field > magnetic_susceptibility.\n.output Answer\n\n", "completions": [".decl Has_magnetic_field(Object:symbol, Magnetic_field:float)\nHas_magnetic_field(\"Earth\", 0.00005).\n.decl Has_magnetic_susceptibility(Object:symbol, Magnetic_susceptibility:float)\nHas_magnetic_susceptibility(\"implant\", 0.00001).\n.decl Answer()\nAnswer() :- Has_magnetic_field(\"Earth\", magnetic_field), Has_magnetic_susceptibility(\"implant\", magnetic_susceptibility), magnetic_field > magnetic_susceptibility.\n.output Answer\n\n"]}
{"id": 889, "answer": true, "completion": ".decl Has_population(Planet:symbol, Population:float)\nHas_population(\"earth\", 7.5).\n.decl Has_n_stars(Galaxy:symbol, N_stars:float)\nHas_n_stars(\"Milky Way\", 100).\n.decl Answer()\nAnswer() :- Has_population(\"earth\", population), Has_n_stars(\"Milky Way\", n_stars), n_stars >= 10 * population.\n.output Answer\n\n\n", "completions": [".decl Has_population(Planet:symbol, Population:float)\nHas_population(\"earth\", 7.5).\n.decl Has_n_stars(Galaxy:symbol, N_stars:float)\nHas_n_stars(\"Milky Way\", 100).\n.decl Answer()\nAnswer() :- Has_population(\"earth\", population), Has_n_stars(\"Milky Way\", n_stars), n_stars >= 10 * population.\n.output Answer\n\n\n"]}
{"id": 890, "answer": true, "completion": ".decl Is_part_of(Object:symbol, Object_whole:symbol)\nIs_part_of(\"tibia\", \"turkey\").\nIs_part_of(\"parsley\", \"turkey\").\n.decl Is_on(Object:symbol, Object_whole:symbol)\nIs_on(\"turkey\", \"holiday plate\").\n.decl Answer()\nAnswer() :- Is_part_of(\"tibia\", \"turkey\"), Is_part_of(\"parsley\", \"turkey\"), Is_on(\"turkey\", \"holiday plate\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Object:symbol, Object_whole:symbol)\nIs_part_of(\"tibia\", \"turkey\").\nIs_part_of(\"parsley\", \"turkey\").\n.decl Is_on(Object:symbol, Object_whole:symbol)\nIs_on(\"turkey\", \"holiday plate\").\n.decl Answer()\nAnswer() :- Is_part_of(\"tibia\", \"turkey\"), Is_part_of(\"parsley\", \"turkey\"), Is_on(\"turkey\", \"holiday plate\").\n.output Answer\n\n"]}
{"id": 891, "answer": false, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"Ashland, Oregon\", 20700).\n.decl Has_n_soldiers(Military_division:symbol, N_soldiers:float)\nHas_n_soldiers(\"hypothetical military division\", 10000).\n.decl Answer()\nAnswer() :- Has_population(\"Ashland, Oregon\", population), Has_n_soldiers(\"hypothetical military division\", n_soldiers), population < n_soldiers.\n.output Answer\n\n\n", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"Ashland, Oregon\", 20700).\n.decl Has_n_soldiers(Military_division:symbol, N_soldiers:float)\nHas_n_soldiers(\"hypothetical military division\", 10000).\n.decl Answer()\nAnswer() :- Has_population(\"Ashland, Oregon\", population), Has_n_soldiers(\"hypothetical military division\", n_soldiers), population < n_soldiers.\n.output Answer\n\n\n"]}
{"id": 892, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Dennis Hopper\", 74).\n.decl Answer()\nAnswer() :- Has_age(\"Dennis Hopper\", age), age + 7 = 2021.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Dennis Hopper\", 74).\n.decl Answer()\nAnswer() :- Has_age(\"Dennis Hopper\", age), age + 7 = 2021.\n.output Answer\n\n"]}
{"id": 893, "answer": true, "completion": ".decl Has_behavior(Animal:symbol, Behavior:symbol)\nHas_behavior(\"bumblebee\", \"aggressive\").\nHas_behavior(\"bumblebee\", \"suicidal\").\n.decl Answer()\nAnswer() :- Has_behavior(\"bumblebee\", \"aggressive\"), Has_behavior(\"bumblebee\", \"suicidal\").\n.output Answer\n\n", "completions": [".decl Has_behavior(Animal:symbol, Behavior:symbol)\nHas_behavior(\"bumblebee\", \"aggressive\").\nHas_behavior(\"bumblebee\", \"suicidal\").\n.decl Answer()\nAnswer() :- Has_behavior(\"bumblebee\", \"aggressive\"), Has_behavior(\"bumblebee\", \"suicidal\").\n.output Answer\n\n"]}
{"id": 894, "answer": false, "completion": ".decl Has_friction(Material:symbol, Friction:float)\nHas_friction(\"mercury\", 0.4).\nHas_friction(\"slip n slide\", 0.1).\n.decl Answer()\nAnswer() :- Has_friction(\"mercury\", friction1), Has_friction(\"slip n slide\", friction2), friction1 < friction2.\n.output Answer\n\n", "completions": [".decl Has_friction(Material:symbol, Friction:float)\nHas_friction(\"mercury\", 0.4).\nHas_friction(\"slip n slide\", 0.1).\n.decl Answer()\nAnswer() :- Has_friction(\"mercury\", friction1), Has_friction(\"slip n slide\", friction2), friction1 < friction2.\n.output Answer\n\n"]}
{"id": 895, "answer": false, "completion": ".decl Has_record(Person:symbol, Record:float)\nHas_record(\"Javier Sotomayor\", 2.45).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"Bengal cat\", 0.5).\n.decl Answer()\nAnswer() :- Has_record(\"Javier Sotomayor\", record), Has_height(\"Bengal cat\", height), height > record.\n.output Answer\n\n\n", "completions": [".decl Has_record(Person:symbol, Record:float)\nHas_record(\"Javier Sotomayor\", 2.45).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"Bengal cat\", 0.5).\n.decl Answer()\nAnswer() :- Has_record(\"Javier Sotomayor\", record), Has_height(\"Bengal cat\", height), height > record.\n.output Answer\n\n\n"]}
{"id": 896, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"rice pudding\", \"brown rice\").\nHas_ingredient(\"rice pudding\", \"white rice\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"rice pudding\", \"brown rice\"), Has_ingredient(\"rice pudding\", \"white rice\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"rice pudding\", \"brown rice\").\nHas_ingredient(\"rice pudding\", \"white rice\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"rice pudding\", \"brown rice\"), Has_ingredient(\"rice pudding\", \"white rice\").\n.output Answer\n\n"]}
{"id": 897, "answer": true, "completion": ".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"cancer\", \"excess adrenaline production\").\n.decl Answer()\nAnswer() :- Causes(\"cancer\", \"excess adrenaline production\").\n.output Answer\n\n", "completions": [".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"cancer\", \"excess adrenaline production\").\n.decl Answer()\nAnswer() :- Causes(\"cancer\", \"excess adrenaline production\").\n.output Answer\n\n"]}
{"id": 898, "answer": true, "completion": ".decl Has_n_states(Country:symbol, N_states:float)\nHas_n_states(\"Ancient Greece\", 1).\nHas_n_states(\"United States\", 45).\n.decl Answer()\nAnswer() :- Has_n_states(\"Ancient Greece\", n_states1), Has_n_states(\"United States\", n_states2), n_states1 < n_states2.\n.output Answer\n\n", "completions": [".decl Has_n_states(Country:symbol, N_states:float)\nHas_n_states(\"Ancient Greece\", 1).\nHas_n_states(\"United States\", 45).\n.decl Answer()\nAnswer() :- Has_n_states(\"Ancient Greece\", n_states1), Has_n_states(\"United States\", n_states2), n_states1 < n_states2.\n.output Answer\n\n"]}
{"id": 899, "answer": true, "completion": ".decl Founded(Company:symbol, Person:symbol)\nFounded(\"Ben & Jerry's\", \"Ben Cohen\").\nFounded(\"Ben & Jerry's\", \"Jerry Greenfield\").\n.decl Involved_in(Person:symbol, Company:symbol)\nInvolved_in(\"Ben Cohen\", \"Ben & Jerry's\").\nInvolved_in(\"Jerry Greenfield\", \"Ben & Jerry's\").\n.decl Answer()\nAnswer() :- Founded(\"Ben & Jerry's\", person1), Founded(\"Ben & Jerry's\", person2), Involved_in(person1, \"Ben & Jerry's\"), Involved_in(person2, \"Ben & Jerry's\").\n.output Answer\n\n", "completions": [".decl Founded(Company:symbol, Person:symbol)\nFounded(\"Ben & Jerry's\", \"Ben Cohen\").\nFounded(\"Ben & Jerry's\", \"Jerry Greenfield\").\n.decl Involved_in(Person:symbol, Company:symbol)\nInvolved_in(\"Ben Cohen\", \"Ben & Jerry's\").\nInvolved_in(\"Jerry Greenfield\", \"Ben & Jerry's\").\n.decl Answer()\nAnswer() :- Founded(\"Ben & Jerry's\", person1), Founded(\"Ben & Jerry's\", person2), Involved_in(person1, \"Ben & Jerry's\"), Involved_in(person2, \"Ben & Jerry's\").\n.output Answer\n\n"]}
{"id": 900, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"United States Secretary of State\", \"United States Secretary of State\").\n.decl Answers_phones(Person:symbol, Place:symbol)\nAnswers_phones(\"White House\", \"White House\").\n.decl Answer()\nAnswer() :- Has_job(\"United States Secretary of State\", \"United States Secretary of State\"), Answers_phones(\"White House\", \"White House\").\n.output Answer\n\n", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"United States Secretary of State\", \"United States Secretary of State\").\n.decl Answers_phones(Person:symbol, Place:symbol)\nAnswers_phones(\"White House\", \"White House\").\n.decl Answer()\nAnswer() :- Has_job(\"United States Secretary of State\", \"United States Secretary of State\"), Answers_phones(\"White House\", \"White House\").\n.output Answer\n\n"]}
{"id": 901, "answer": false, "completion": ".decl Developed(Person:symbol, Product:symbol)\nDeveloped(\"Bill Gates\", \"Windows\").\nDeveloped(\"Bill Gates\", \"Xbox\").\nDeveloped(\"Bill Gates\", \"Xbox 360\").\nDeveloped(\"Bill Gates\", \"Xbox One\").\n.decl Answer()\nAnswer() :- Developed(\"Bill Gates\", \"PlayStation 4\").\n.output Answer\n\n", "completions": [".decl Developed(Person:symbol, Product:symbol)\nDeveloped(\"Bill Gates\", \"Windows\").\nDeveloped(\"Bill Gates\", \"Xbox\").\nDeveloped(\"Bill Gates\", \"Xbox 360\").\nDeveloped(\"Bill Gates\", \"Xbox One\").\n.decl Answer()\nAnswer() :- Developed(\"Bill Gates\", \"PlayStation 4\").\n.output Answer\n\n"]}
{"id": 902, "answer": true, "completion": ".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"The Atlantic magazine\", 12).\nLasts_n_months(\"Games of the XXII Olympiad\", 2).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"The Atlantic magazine\", n_months1), Lasts_n_months(\"Games of the XXII Olympiad\", n_months2), n_months1 >= n_months2.\n.output Answer\n\n", "completions": [".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"The Atlantic magazine\", 12).\nLasts_n_months(\"Games of the XXII Olympiad\", 2).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"The Atlantic magazine\", n_months1), Lasts_n_months(\"Games of the XXII Olympiad\", n_months2), n_months1 >= n_months2.\n.output Answer\n\n"]}
{"id": 903, "answer": false, "completion": ".decl Has_partner(Person:symbol, Partner:symbol)\nHas_partner(\"James Watson\", \"Francis Crick\").\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"James Watson\", 88).\nHas_age(\"Francis Crick\", 88).\n.decl Answer()\nAnswer() :- Has_partner(\"James Watson\", partner), Has_age(\"James Watson\", age1), Has_age(partner, age2), age2 > age1.\n.output Answer\n\n", "completions": [".decl Has_partner(Person:symbol, Partner:symbol)\nHas_partner(\"James Watson\", \"Francis Crick\").\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"James Watson\", 88).\nHas_age(\"Francis Crick\", 88).\n.decl Answer()\nAnswer() :- Has_partner(\"James Watson\", partner), Has_age(\"James Watson\", age1), Has_age(partner, age2), age2 > age1.\n.output Answer\n\n"]}
{"id": 904, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Alice\", 7).\n.decl Has_min_age(Organization:symbol, Min_age:float)\nHas_min_age(\"Masonic Lodge\", 21).\n.decl Answer()\nAnswer() :- Has_age(\"Alice\", age), Has_min_age(\"Masonic Lodge\", min_age), age >= min_age.\n.output Answer\n\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Alice\", 7).\n.decl Has_min_age(Organization:symbol, Min_age:float)\nHas_min_age(\"Masonic Lodge\", 21).\n.decl Answer()\nAnswer() :- Has_age(\"Alice\", age), Has_min_age(\"Masonic Lodge\", min_age), age >= min_age.\n.output Answer\n\n\n"]}
{"id": 905, "answer": true, "completion": ".decl Is_linked_with(Thing_A:symbol, Thing_B:symbol)\nIs_linked_with(\"asteroid\", \"virginity\").\n.decl Answer()\nAnswer() :- Is_linked_with(\"asteroid\", \"virginity\").\n.output Answer\n\n", "completions": [".decl Is_linked_with(Thing_A:symbol, Thing_B:symbol)\nIs_linked_with(\"asteroid\", \"virginity\").\n.decl Answer()\nAnswer() :- Is_linked_with(\"asteroid\", \"virginity\").\n.output Answer\n\n"]}
{"id": 906, "answer": false, "completion": ".decl Produced(Person:symbol, Movie:symbol)\nProduced(\"Peter Fonda\", \"Easy Rider\").\n.decl Starred_in(Person:symbol, Movie:symbol)\nStarred_in(\"Peter Fonda\", \"Easy Rider\").\nStarred_in(\"Peter Fonda\", \"The Hired Hand\").\nStarred_in(\"Peter Fonda\", \"The Trip\").\nStarred_in(\"Peter Fonda\", \"The Wild Angels\").\nStarred_in(\"Peter Fonda\", \"The Last Movie\").\nStarred_in(\"Peter Fonda\", \"Dirty Mary Crazy Larry\").\nStarred_in(\"Peter Fonda\", \"Race with the Devil\").\nStarred_in(\"Peter Fonda\", \"Outlaw Blues\").\nStarred_in(\"Peter Fonda\", \"Idaho Transfer\").\nStarred_in(\"Peter Fonda\", \"The Hired Hand\").\nStarred_in(\"Peter Fonda\", \"The Trip\").\nStarred_in(\"Peter Fonda\", \"The Wild Angels\").\nStarred_in(\"Peter Fonda\", \"The Last Movie\").\nStarred_in(\"Peter Fonda\", \"Dirty Mary Crazy Larry\").\nStarred_in(\"Peter Fonda\", \"Race with the Devil\").\nStarred_in(\"Peter Fonda\", \"Outlaw Blues\").\nStarred_in(\"Peter Fonda\", \"Idaho Transfer\").\nStarred_in(\"Peter Fonda\", \"The Hired Hand\").\nStarred_in(\"Peter Fonda\", \"The Trip\").\nStarred_in(\"Peter Fonda\", \"The Wild Angels\").\nStarred_in(\"Peter Fonda\", \"The Last Movie\").\nStarred_in(\"Peter Fonda\", \"Dirty Mary Crazy Larry\").\nStarred_in(\"Peter Fonda\", \"Race with the Devil\").\nStarred_in(\"Peter Fonda\", \"Outlaw Blues\").\nStarred_in(\"Peter Fonda\", \"Idaho Transfer\").\nStarred_in(\"Peter Fonda\", \"The Hired Hand\").\nStarred_in(\"Peter Fonda\", \"The Trip\").\nStarred_in(\"Peter Fonda\", \"The Wild Angels\").\nStarred_in(\"Peter Fonda\", \"The Last Movie\").\nStarred_in(\"Peter Fonda\", \"Dirty Mary Crazy Larry\").\nStarred_in(\"Peter Fonda\", \"Race with the Devil\").\nStarred_in(\"Peter Fonda\", \"Outlaw Blues\").\nStarred_in(\"Peter Fonda\", \"Idaho Transfer\").\nStarred_in(\"Peter Fonda\", \"The Hired Hand\").\nStarred_in(\"Peter Fonda\", \"The Trip\").\nStarred_in(\"Peter Fonda\", \"The Wild Angels\").\nStarred_in(\"Peter Fonda\", \"The Last Movie\").\nStarred_in(\"Peter Fonda\", \"Dirty Mary Crazy Larry\").\nStarred_in(\"Peter Fonda\", \"Race with the Devil\").\nStarred_in(\"Peter Fonda\", \"Outlaw Blues\").\nStarred_in(\"Peter Fonda\", \"Idaho Transfer\").\nStarred_in(\"Peter Fonda\", \"The Hired Hand\").\nStarred_in(\"Peter Fonda\", \"The Trip\").\nStarred_in(\"Peter Fonda\", \"The Wild Angels\").\nStarred_in(\"Peter Fonda\", \"The Last Movie\").\nStarred_in(\"Peter Fonda\", \"Dirty Mary Crazy Larry\").\nStarred_in(\"Peter Fonda\", \"Race with the Devil\").\nStarred_in(\"Peter Fonda\", \"Outlaw Blues\").\nStarred_in(\"Peter Fonda\", \"Idaho Transfer\").\nStar", "completions": [".decl Produced(Person:symbol, Movie:symbol)\nProduced(\"Peter Fonda\", \"Easy Rider\").\n.decl Starred_in(Person:symbol, Movie:symbol)\nStarred_in(\"Peter Fonda\", \"Easy Rider\").\nStarred_in(\"Peter Fonda\", \"The Hired Hand\").\nStarred_in(\"Peter Fonda\", \"The Trip\").\nStarred_in(\"Peter Fonda\", \"The Wild Angels\").\nStarred_in(\"Peter Fonda\", \"The Last Movie\").\nStarred_in(\"Peter Fonda\", \"Dirty Mary Crazy Larry\").\nStarred_in(\"Peter Fonda\", \"Race with the Devil\").\nStarred_in(\"Peter Fonda\", \"Outlaw Blues\").\nStarred_in(\"Peter Fonda\", \"Idaho Transfer\").\nStarred_in(\"Peter Fonda\", \"The Hired Hand\").\nStarred_in(\"Peter Fonda\", \"The Trip\").\nStarred_in(\"Peter Fonda\", \"The Wild Angels\").\nStarred_in(\"Peter Fonda\", \"The Last Movie\").\nStarred_in(\"Peter Fonda\", \"Dirty Mary Crazy Larry\").\nStarred_in(\"Peter Fonda\", \"Race with the Devil\").\nStarred_in(\"Peter Fonda\", \"Outlaw Blues\").\nStarred_in(\"Peter Fonda\", \"Idaho Transfer\").\nStarred_in(\"Peter Fonda\", \"The Hired Hand\").\nStarred_in(\"Peter Fonda\", \"The Trip\").\nStarred_in(\"Peter Fonda\", \"The Wild Angels\").\nStarred_in(\"Peter Fonda\", \"The Last Movie\").\nStarred_in(\"Peter Fonda\", \"Dirty Mary Crazy Larry\").\nStarred_in(\"Peter Fonda\", \"Race with the Devil\").\nStarred_in(\"Peter Fonda\", \"Outlaw Blues\").\nStarred_in(\"Peter Fonda\", \"Idaho Transfer\").\nStarred_in(\"Peter Fonda\", \"The Hired Hand\").\nStarred_in(\"Peter Fonda\", \"The Trip\").\nStarred_in(\"Peter Fonda\", \"The Wild Angels\").\nStarred_in(\"Peter Fonda\", \"The Last Movie\").\nStarred_in(\"Peter Fonda\", \"Dirty Mary Crazy Larry\").\nStarred_in(\"Peter Fonda\", \"Race with the Devil\").\nStarred_in(\"Peter Fonda\", \"Outlaw Blues\").\nStarred_in(\"Peter Fonda\", \"Idaho Transfer\").\nStarred_in(\"Peter Fonda\", \"The Hired Hand\").\nStarred_in(\"Peter Fonda\", \"The Trip\").\nStarred_in(\"Peter Fonda\", \"The Wild Angels\").\nStarred_in(\"Peter Fonda\", \"The Last Movie\").\nStarred_in(\"Peter Fonda\", \"Dirty Mary Crazy Larry\").\nStarred_in(\"Peter Fonda\", \"Race with the Devil\").\nStarred_in(\"Peter Fonda\", \"Outlaw Blues\").\nStarred_in(\"Peter Fonda\", \"Idaho Transfer\").\nStarred_in(\"Peter Fonda\", \"The Hired Hand\").\nStarred_in(\"Peter Fonda\", \"The Trip\").\nStarred_in(\"Peter Fonda\", \"The Wild Angels\").\nStarred_in(\"Peter Fonda\", \"The Last Movie\").\nStarred_in(\"Peter Fonda\", \"Dirty Mary Crazy Larry\").\nStarred_in(\"Peter Fonda\", \"Race with the Devil\").\nStarred_in(\"Peter Fonda\", \"Outlaw Blues\").\nStarred_in(\"Peter Fonda\", \"Idaho Transfer\").\nStar"]}
{"id": 907, "answer": true, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Melania Trump\", \"model\").\nHas_profession(\"Olga Kurylenko\", \"model\").\n.decl Answer()\nAnswer() :- Has_profession(\"Melania Trump\", profession), Has_profession(\"Olga Kurylenko\", profession).\n.output Answer\n\n", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Melania Trump\", \"model\").\nHas_profession(\"Olga Kurylenko\", \"model\").\n.decl Answer()\nAnswer() :- Has_profession(\"Melania Trump\", profession), Has_profession(\"Olga Kurylenko\", profession).\n.output Answer\n\n"]}
{"id": 908, "answer": false, "completion": ".decl Needs(Object:symbol, Person:symbol)\nNeeds(\"circuit board\", \"engineer\").\nNeeds(\"circuit board\", \"technician\").\n.decl Answer()\nAnswer() :- Needs(\"circuit board\", \"farmer\").\n.output Answer\n\n", "completions": [".decl Needs(Object:symbol, Person:symbol)\nNeeds(\"circuit board\", \"engineer\").\nNeeds(\"circuit board\", \"technician\").\n.decl Answer()\nAnswer() :- Needs(\"circuit board\", \"farmer\").\n.output Answer\n\n"]}
{"id": 909, "answer": true, "completion": ".decl Has_n_eyes(Animal:symbol, N_eyes:float)\nHas_n_eyes(\"jumping spider\", 8).\n.decl Has_n_contact_lenses(Person:symbol, N_contact_lenses:float)\nHas_n_contact_lenses(\"person\", 6).\n.decl Answer()\nAnswer() :- Has_n_eyes(\"jumping spider\", n_eyes), Has_n_contact_lenses(\"person\", n_contact_lenses), n_eyes > n_contact_lenses.\n.output Answer\n\n", "completions": [".decl Has_n_eyes(Animal:symbol, N_eyes:float)\nHas_n_eyes(\"jumping spider\", 8).\n.decl Has_n_contact_lenses(Person:symbol, N_contact_lenses:float)\nHas_n_contact_lenses(\"person\", 6).\n.decl Answer()\nAnswer() :- Has_n_eyes(\"jumping spider\", n_eyes), Has_n_contact_lenses(\"person\", n_contact_lenses), n_eyes > n_contact_lenses.\n.output Answer\n\n"]}
{"id": 910, "answer": false, "completion": ".decl Has_currency(Transaction:symbol, Currency:symbol)\nHas_currency(\"Louisiana Purchase\", \"USD\").\n.decl Answer()\nAnswer() :- Has_currency(\"Louisiana Purchase\", \"bitcoin\").\n.output Answer\n\n", "completions": [".decl Has_currency(Transaction:symbol, Currency:symbol)\nHas_currency(\"Louisiana Purchase\", \"USD\").\n.decl Answer()\nAnswer() :- Has_currency(\"Louisiana Purchase\", \"bitcoin\").\n.output Answer\n\n"]}
{"id": 911, "answer": false, "completion": ".decl Has_n_pages(Book:symbol, N_pages:float)\nHas_n_pages(\"The Hobbit\", 295).\n.decl Takes_n_minutes(Event:symbol, N_minutes:float)\nTakes_n_minutes(\"reading a page\", 1).\n.decl Answer()\nAnswer() :- Has_n_pages(\"The Hobbit\", n_pages), Takes_n_minutes(\"reading a page\", n_minutes), n_pages * n_minutes <= 4.\n.output Answer\n\n", "completions": [".decl Has_n_pages(Book:symbol, N_pages:float)\nHas_n_pages(\"The Hobbit\", 295).\n.decl Takes_n_minutes(Event:symbol, N_minutes:float)\nTakes_n_minutes(\"reading a page\", 1).\n.decl Answer()\nAnswer() :- Has_n_pages(\"The Hobbit\", n_pages), Takes_n_minutes(\"reading a page\", n_minutes), n_pages * n_minutes <= 4.\n.output Answer\n\n"]}
{"id": 912, "answer": true, "completion": ".decl Has_cost(Object:symbol, Cost:float)\nHas_cost(\"Boeing 737\", 100000000).\n.decl Has_box_office_receipts(Film:symbol, Box_office_receipts:float)\nHas_box_office_receipts(\"Wonder Woman (2017 film)\", 821000000).\n.decl Answer()\nAnswer() :- Has_cost(\"Boeing 737\", cost), Has_box_office_receipts(\"Wonder Woman (2017 film)\", box_office_receipts), cost <= box_office_receipts.\n.output Answer\n\n", "completions": [".decl Has_cost(Object:symbol, Cost:float)\nHas_cost(\"Boeing 737\", 100000000).\n.decl Has_box_office_receipts(Film:symbol, Box_office_receipts:float)\nHas_box_office_receipts(\"Wonder Woman (2017 film)\", 821000000).\n.decl Answer()\nAnswer() :- Has_cost(\"Boeing 737\", cost), Has_box_office_receipts(\"Wonder Woman (2017 film)\", box_office_receipts), cost <= box_office_receipts.\n.output Answer\n\n"]}
{"id": 913, "answer": true, "completion": ".decl Has_death(Person:symbol, Cause:symbol)\nHas_death(\"Diana\", \"car crash\").\n.decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Diana\", \"royal family\").\n.decl Is_involved_in(Person:symbol, Event:symbol)\nIs_involved_in(\"paparazzi\", \"car crash\").\n.decl Answer()\nAnswer() :- Has_death(person, cause), Is_member_of(person, \"royal family\"), Is_involved_in(\"paparazzi\", cause).\n.output Answer\n\n", "completions": [".decl Has_death(Person:symbol, Cause:symbol)\nHas_death(\"Diana\", \"car crash\").\n.decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Diana\", \"royal family\").\n.decl Is_involved_in(Person:symbol, Event:symbol)\nIs_involved_in(\"paparazzi\", \"car crash\").\n.decl Answer()\nAnswer() :- Has_death(person, cause), Is_member_of(person, \"royal family\"), Is_involved_in(\"paparazzi\", cause).\n.output Answer\n\n"]}
{"id": 914, "answer": false, "completion": ".decl Is_from(Person:symbol, City:symbol)\nIs_from(\"John Gall\", \"San Francisco\").\n.decl Is_in(University:symbol, City:symbol)\nIs_in(\"Stanford University\", \"Palo Alto\").\n.decl Answer()\nAnswer() :- Is_from(\"John Gall\", city), Is_in(\"Stanford University\", city).\n.output Answer\n\n", "completions": [".decl Is_from(Person:symbol, City:symbol)\nIs_from(\"John Gall\", \"San Francisco\").\n.decl Is_in(University:symbol, City:symbol)\nIs_in(\"Stanford University\", \"Palo Alto\").\n.decl Answer()\nAnswer() :- Is_from(\"John Gall\", city), Is_in(\"Stanford University\", city).\n.output Answer\n\n"]}
{"id": 915, "answer": false, "completion": ".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"pig slaughter\", 1).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"parma ham\", 12).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"parma ham\", n_months1), Last_n_months(\"pig slaughter\", n_months2),  n_months1 <= n_months2.\n.output Answer\n\n", "completions": [".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"pig slaughter\", 1).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"parma ham\", 12).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"parma ham\", n_months1), Last_n_months(\"pig slaughter\", n_months2),  n_months1 <= n_months2.\n.output Answer\n\n"]}
{"id": 916, "answer": true, "completion": ".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Shivambu practitioner\", \"ammonia is unhealthy\").\n.decl Answer()\nAnswer() :- Believes(\"Shivambu practitioner\", \"ammonia is unhealthy\").\n.output Answer\n\n", "completions": [".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Shivambu practitioner\", \"ammonia is unhealthy\").\n.decl Answer()\nAnswer() :- Believes(\"Shivambu practitioner\", \"ammonia is unhealthy\").\n.output Answer\n\n"]}
{"id": 917, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Hamas agent\", \"pig\").\n.decl Is_bad(Person:symbol)\nIs_bad(\"Hamas agent\").\n.decl Answer()\nAnswer() :- Eats(\"Hamas agent\", \"pig\"), Is_bad(\"Hamas agent\").\n.output Answer\n\n", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Hamas agent\", \"pig\").\n.decl Is_bad(Person:symbol)\nIs_bad(\"Hamas agent\").\n.decl Answer()\nAnswer() :- Eats(\"Hamas agent\", \"pig\"), Is_bad(\"Hamas agent\").\n.output Answer\n\n"]}
{"id": 918, "answer": false, "completion": ".decl Plays_at(Band:symbol, Venue:symbol)\nPlays_at(\"The Beatles\", \"Hammerstein Ballroom\").\nPlays_at(\"The Beatles\", \"Carnegie Hall\").\nPlays_at(\"The Beatles\", \"Madison Square Garden\").\nPlays_at(\"The Beatles\", \"Hollywood Bowl\").\nPlays_at(\"The Beatles\", \"Shea Stadium\").\nPlays_at(\"The Beatles\", \"Candlestick Park\").\nPlays_at(\"The Beatles\", \"Cow Palace\").\nPlays_at(\"The Beatles\", \"Budokan\").\nPlays_at(\"The Beatles\", \"Sydney Stadium\").\nPlays_at(\"The Beatles\", \"Adelaide Oval\").\nPlays_at(\"The Beatles\", \"Melbourne Cricket Ground\").\nPlays_at(\"The Beatles\", \"Festival Hall\").\nPlays_at(\"The Beatles\", \"Hammersmith Odeon\").\nPlays_at(\"The Beatles\", \"Empire Pool\").\nPlays_at(\"The Beatles\", \"Empire Theatre\").\nPlays_at(\"The Beatles\", \"Royal Albert Hall\").\nPlays_at(\"The Beatles\", \"Saville Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Centre\").\nPlays_at(\"The Beatles\", \"BBC Paris Studio\").\nPlays_at(\"The Beatles\", \"BBC Maida Vale Studio\").\nPlays_at(\"The Beatles\", \"BBC Playhouse Theatre\").\nPlays_at(\"The Beatles\", \"BBC Piccadilly Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television", "completions": [".decl Plays_at(Band:symbol, Venue:symbol)\nPlays_at(\"The Beatles\", \"Hammerstein Ballroom\").\nPlays_at(\"The Beatles\", \"Carnegie Hall\").\nPlays_at(\"The Beatles\", \"Madison Square Garden\").\nPlays_at(\"The Beatles\", \"Hollywood Bowl\").\nPlays_at(\"The Beatles\", \"Shea Stadium\").\nPlays_at(\"The Beatles\", \"Candlestick Park\").\nPlays_at(\"The Beatles\", \"Cow Palace\").\nPlays_at(\"The Beatles\", \"Budokan\").\nPlays_at(\"The Beatles\", \"Sydney Stadium\").\nPlays_at(\"The Beatles\", \"Adelaide Oval\").\nPlays_at(\"The Beatles\", \"Melbourne Cricket Ground\").\nPlays_at(\"The Beatles\", \"Festival Hall\").\nPlays_at(\"The Beatles\", \"Hammersmith Odeon\").\nPlays_at(\"The Beatles\", \"Empire Pool\").\nPlays_at(\"The Beatles\", \"Empire Theatre\").\nPlays_at(\"The Beatles\", \"Royal Albert Hall\").\nPlays_at(\"The Beatles\", \"Saville Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Centre\").\nPlays_at(\"The Beatles\", \"BBC Paris Studio\").\nPlays_at(\"The Beatles\", \"BBC Maida Vale Studio\").\nPlays_at(\"The Beatles\", \"BBC Playhouse Theatre\").\nPlays_at(\"The Beatles\", \"BBC Piccadilly Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television Theatre\").\nPlays_at(\"The Beatles\", \"BBC Television"]}
{"id": 919, "answer": true, "completion": ".decl Plays_role(Person:symbol, Role:symbol)\nPlays_role(\"Elle Fanning\", \"actress\").\nPlays_role(\"Nelson Mandela\", \"leader\").\n.decl Ends(Event:symbol, Event_ended:symbol)\nEnds(\"Nelson Mandela\", \"apartheid\").\n.decl Answer()\nAnswer() :- Plays_role(\"Elle Fanning\", \"actress\"), Ends(\"Nelson Mandela\", \"apartheid\").\n.output Answer\n\n", "completions": [".decl Plays_role(Person:symbol, Role:symbol)\nPlays_role(\"Elle Fanning\", \"actress\").\nPlays_role(\"Nelson Mandela\", \"leader\").\n.decl Ends(Event:symbol, Event_ended:symbol)\nEnds(\"Nelson Mandela\", \"apartheid\").\n.decl Answer()\nAnswer() :- Plays_role(\"Elle Fanning\", \"actress\"), Ends(\"Nelson Mandela\", \"apartheid\").\n.output Answer\n\n"]}
{"id": 920, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Powerpuff Girls\", 6).\n.decl Has_age_limit(School:symbol, Age_limit:float)\nHas_age_limit(\"Camden Military Academy\", 12).\n.decl Answer()\nAnswer() :- Has_age(\"Powerpuff Girls\", age), Has_age_limit(\"Camden Military Academy\", age_limit), age <= age_limit.\n.output Answer\n\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Powerpuff Girls\", 6).\n.decl Has_age_limit(School:symbol, Age_limit:float)\nHas_age_limit(\"Camden Military Academy\", 12).\n.decl Answer()\nAnswer() :- Has_age(\"Powerpuff Girls\", age), Has_age_limit(\"Camden Military Academy\", age_limit), age <= age_limit.\n.output Answer\n\n\n"]}
{"id": 921, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Chuck Norris\", 1.8).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"horse\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"Chuck Norris\", height1), Has_height(\"horse\", height2), height1 <= height2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Chuck Norris\", 1.8).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"horse\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"Chuck Norris\", height1), Has_height(\"horse\", height2), height1 <= height2.\n.output Answer\n\n"]}
{"id": 922, "answer": false, "completion": ".decl Uses(Event:symbol, Object:symbol)\nUses(\"Space Race\", \"rocket\").\nUses(\"Space Race\", \"satellite\").\nUses(\"Space Race\", \"space station\").\nUses(\"Space Race\", \"space shuttle\").\nUses(\"Space Race\", \"space suit\").\nUses(\"Space Race\", \"space probe\").\nUses(\"Space Race\", \"space telescope\").\nUses(\"Space Race\", \"space walk\").\nUses(\"Space Race\", \"space capsule\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space", "completions": [".decl Uses(Event:symbol, Object:symbol)\nUses(\"Space Race\", \"rocket\").\nUses(\"Space Race\", \"satellite\").\nUses(\"Space Race\", \"space station\").\nUses(\"Space Race\", \"space shuttle\").\nUses(\"Space Race\", \"space suit\").\nUses(\"Space Race\", \"space probe\").\nUses(\"Space Race\", \"space telescope\").\nUses(\"Space Race\", \"space walk\").\nUses(\"Space Race\", \"space capsule\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space Race\", \"space debris\").\nUses(\"Space Race\", \"space junk\").\nUses(\"Space"]}
{"id": 923, "answer": true, "completion": ".decl Approves(Person_A:symbol, Person_B:symbol)\nApproves(\"Harvey Milk\", \"Barack Obama\").\n.decl Answer()\nAnswer() :- Approves(\"Harvey Milk\", \"Barack Obama\").\n.output Answer\n\n", "completions": [".decl Approves(Person_A:symbol, Person_B:symbol)\nApproves(\"Harvey Milk\", \"Barack Obama\").\n.decl Answer()\nAnswer() :- Approves(\"Harvey Milk\", \"Barack Obama\").\n.output Answer\n\n"]}
{"id": 924, "answer": false, "completion": ".decl Has_n_eyes(Person:symbol, N_eyes:float)\nHas_n_eyes(\"you\", 2).\n.decl Needs_glasses(Person:symbol)\nNeeds_glasses(\"you\") :- Has_n_eyes(\"you\", n_eyes), n_eyes < 2.\n.decl Answer()\nAnswer() :- Needs_glasses(\"you\").\n.output Answer\n\n", "completions": [".decl Has_n_eyes(Person:symbol, N_eyes:float)\nHas_n_eyes(\"you\", 2).\n.decl Needs_glasses(Person:symbol)\nNeeds_glasses(\"you\") :- Has_n_eyes(\"you\", n_eyes), n_eyes < 2.\n.decl Answer()\nAnswer() :- Needs_glasses(\"you\").\n.output Answer\n\n"]}
{"id": 925, "answer": true, "completion": ".decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"Rumi\", \"euphoria\").\n.decl Answer()\nAnswer() :- Has_emotion(\"Rumi\", \"euphoria\").\n.output Answer\n\n", "completions": [".decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"Rumi\", \"euphoria\").\n.decl Answer()\nAnswer() :- Has_emotion(\"Rumi\", \"euphoria\").\n.output Answer\n\n"]}
{"id": 926, "answer": false, "completion": ".decl Is_useful_for(Procedure:symbol, Animal:symbol)\nIs_useful_for(\"dual-energy X-ray absorptiometry\", \"human\").\nIs_useful_for(\"dual-energy X-ray absorptiometry\", \"dog\").\n.decl Answer()\nAnswer() :- Is_useful_for(\"dual-energy X-ray absorptiometry\", \"crab\").\n.output Answer\n\n", "completions": [".decl Is_useful_for(Procedure:symbol, Animal:symbol)\nIs_useful_for(\"dual-energy X-ray absorptiometry\", \"human\").\nIs_useful_for(\"dual-energy X-ray absorptiometry\", \"dog\").\n.decl Answer()\nAnswer() :- Is_useful_for(\"dual-energy X-ray absorptiometry\", \"crab\").\n.output Answer\n\n"]}
{"id": 927, "answer": false, "completion": ".decl Has_aerodynamic_shape(Object:symbol)\nHas_aerodynamic_shape(\"cactus\").\n.decl Has_stomata(Object:symbol, Stomata:symbol)\nHas_stomata(\"cactus\", \"closed\").\n.decl Answer()\nAnswer() :- Has_aerodynamic_shape(\"cactus\"), Has_stomata(\"cactus\", \"open\").\n.output Answer\n\n", "completions": [".decl Has_aerodynamic_shape(Object:symbol)\nHas_aerodynamic_shape(\"cactus\").\n.decl Has_stomata(Object:symbol, Stomata:symbol)\nHas_stomata(\"cactus\", \"closed\").\n.decl Answer()\nAnswer() :- Has_aerodynamic_shape(\"cactus\"), Has_stomata(\"cactus\", \"open\").\n.output Answer\n\n"]}
{"id": 928, "answer": false, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"oysters\", \"zinc\").\n.decl Has_symptom(Disease:symbol, Symptom:symbol)\nHas_symptom(\"ADHD\", \"zinc deficiency\").\n.decl Answer()\nAnswer() :- Has_ingredient(food, ingredient), Has_symptom(\"ADHD\", symptom), ingredient = symptom.\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"oysters\", \"zinc\").\n.decl Has_symptom(Disease:symbol, Symptom:symbol)\nHas_symptom(\"ADHD\", \"zinc deficiency\").\n.decl Answer()\nAnswer() :- Has_ingredient(food, ingredient), Has_symptom(\"ADHD\", symptom), ingredient = symptom.\n.output Answer\n\n"]}
{"id": 929, "answer": true, "completion": ".decl Has_flag(Place:symbol, Flag:symbol)\nHas_flag(\"moon\", \"Royal Air Force ensign\").\n.decl Answer()\nAnswer() :- Has_flag(\"moon\", \"Royal Air Force ensign\").\n.output Answer\n\n", "completions": [".decl Has_flag(Place:symbol, Flag:symbol)\nHas_flag(\"moon\", \"Royal Air Force ensign\").\n.decl Answer()\nAnswer() :- Has_flag(\"moon\", \"Royal Air Force ensign\").\n.output Answer\n\n"]}
{"id": 930, "answer": true, "completion": ".decl Has_n_citizens(Country:symbol, N_citizens:float)\nHas_n_citizens(\"Samoa\", 200000).\n.decl Has_n_employees(Company:symbol, N_employees:float)\nHas_n_employees(\"JPMorgan Chase\", 250000).\n.decl Answer()\nAnswer() :- Has_n_citizens(\"Samoa\", n_citizens), Has_n_employees(\"JPMorgan Chase\", n_employees), n_citizens <= n_employees.\n.output Answer\n\n\n", "completions": [".decl Has_n_citizens(Country:symbol, N_citizens:float)\nHas_n_citizens(\"Samoa\", 200000).\n.decl Has_n_employees(Company:symbol, N_employees:float)\nHas_n_employees(\"JPMorgan Chase\", 250000).\n.decl Answer()\nAnswer() :- Has_n_citizens(\"Samoa\", n_citizens), Has_n_employees(\"JPMorgan Chase\", n_employees), n_citizens <= n_employees.\n.output Answer\n\n\n"]}
{"id": 931, "answer": false, "completion": ".decl Contributes_to(Person:symbol, Work:symbol)\nContributes_to(\"Rosalind Franklin\", \"X-ray diffraction\").\nContributes_to(\"Rosalind Franklin\", \"DNA structure\").\nContributes_to(\"Rosalind Franklin\", \"RNA structure\").\nContributes_to(\"Rosalind Franklin\", \"Virus structure\").\nContributes_to(\"Rosalind Franklin\", \"Carbon nanotubes\").\nContributes_to(\"Rosalind Franklin\", \"Coal\").\nContributes_to(\"Rosalind Franklin\", \"Graphite\").\nContributes_to(\"Rosalind Franklin\", \"Amorphous carbon\").\nContributes_to(\"Rosalind Franklin\", \"Carbon dioxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monoxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon suboxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon disulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrachloride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrafluoride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon diselenide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monosulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monoxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon suboxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon disulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrachloride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrafluoride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon diselenide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monosulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monoxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon suboxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon disulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrachloride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrafluoride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon diselenide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monosulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monoxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon suboxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon disulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrachloride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrafluoride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon diselenide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monosulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monoxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon suboxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon disulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrachloride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrafluoride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon diselenide\").\nContributes_to(\"", "completions": [".decl Contributes_to(Person:symbol, Work:symbol)\nContributes_to(\"Rosalind Franklin\", \"X-ray diffraction\").\nContributes_to(\"Rosalind Franklin\", \"DNA structure\").\nContributes_to(\"Rosalind Franklin\", \"RNA structure\").\nContributes_to(\"Rosalind Franklin\", \"Virus structure\").\nContributes_to(\"Rosalind Franklin\", \"Carbon nanotubes\").\nContributes_to(\"Rosalind Franklin\", \"Coal\").\nContributes_to(\"Rosalind Franklin\", \"Graphite\").\nContributes_to(\"Rosalind Franklin\", \"Amorphous carbon\").\nContributes_to(\"Rosalind Franklin\", \"Carbon dioxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monoxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon suboxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon disulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrachloride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrafluoride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon diselenide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monosulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monoxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon suboxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon disulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrachloride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrafluoride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon diselenide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monosulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monoxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon suboxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon disulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrachloride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrafluoride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon diselenide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monosulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monoxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon suboxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon disulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrachloride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrafluoride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon diselenide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monosulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon monoxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon suboxide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon disulfide\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrachloride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon tetrafluoride\").\nContributes_to(\"Rosalind Franklin\", \"Carbon diselenide\").\nContributes_to(\""]}
{"id": 932, "answer": true, "completion": ".decl Has_qualifications(Person:symbol, Qualifications:symbol)\nHas_qualifications(\"Kenny G\", \"saxophone\").\n.decl Qualifications_for(Job:symbol, Qualifications:symbol)\nQualifications_for(\"tax collector\", \"math\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Kenny G\", qualifications1), Qualifications_for(\"tax collector\", qualifications2), qualifications1 != qualifications2.\n.output Answer\n\n", "completions": [".decl Has_qualifications(Person:symbol, Qualifications:symbol)\nHas_qualifications(\"Kenny G\", \"saxophone\").\n.decl Qualifications_for(Job:symbol, Qualifications:symbol)\nQualifications_for(\"tax collector\", \"math\").\n.decl Answer()\nAnswer() :- Has_qualifications(\"Kenny G\", qualifications1), Qualifications_for(\"tax collector\", qualifications2), qualifications1 != qualifications2.\n.output Answer\n\n"]}
{"id": 933, "answer": false, "completion": ".decl Weighs(Animal:symbol, Weight:float)\nWeighs(\"Sable\", 10).\nWeighs(\"Sable\", 11).\nWeighs(\"Sable\", 12).\nWeighs(\"Sable\", 13).\nWeighs(\"Sable\", 14).\nWeighs(\"Sable\", 15).\nWeighs(\"Sable\", 16).\nWeighs(\"Sable\", 17).\nWeighs(\"Sable\", 18).\nWeighs(\"Sable\", 19).\nWeighs(\"Sable\", 20).\nWeighs(\"Sable\", 21).\nWeighs(\"Sable\", 22).\nWeighs(\"Sable\", 23).\nWeighs(\"Sable\", 24).\nWeighs(\"Sable\", 25).\nWeighs(\"Sable\", 26).\nWeighs(\"Sable\", 27).\nWeighs(\"Sable\", 28).\nWeighs(\"Sable\", 29).\nWeighs(\"Sable\", 30).\nWeighs(\"Sable\", 31).\nWeighs(\"Sable\", 32).\nWeighs(\"Sable\", 33).\nWeighs(\"Sable\", 34).\nWeighs(\"Sable\", 35).\nWeighs(\"Sable\", 36).\nWeighs(\"Sable\", 37).\nWeighs(\"Sable\", 38).\nWeighs(\"Sable\", 39).\nWeighs(\"Sable\", 40).\nWeighs(\"Sable\", 41).\nWeighs(\"Sable\", 42).\nWeighs(\"Sable\", 43).\nWeighs(\"Sable\", 44).\nWeighs(\"Sable\", 45).\nWeighs(\"Sable\", 46).\nWeighs(\"Sable\", 47).\nWeighs(\"Sable\", 48).\nWeighs(\"Sable\", 49).\nWeighs(\"Sable\", 50).\nWeighs(\"Sable\", 51).\nWeighs(\"Sable\", 52).\nWeighs(\"Sable\", 53).\nWeighs(\"Sable\", 54).\nWeighs(\"Sable\", 55).\nWeighs(\"Sable\", 56).\nWeighs(\"Sable\", 57).\nWeighs(\"Sable\", 58).\nWeighs(\"Sable\", 59).\nWeighs(\"Sable\", 60).\nWeighs(\"Sable\", 61).\nWeighs(\"Sable\", 62).\nWeighs(\"Sable\", 63).\nWeighs(\"Sable\", 64).\nWeighs(\"Sable\", 65).\nWeighs(\"Sable\", 66).\nWeighs(\"Sable\", 67).\nWeighs(\"Sable\", 68).\nWeighs(\"Sable\", 69).\nWeighs(\"Sable\", 70).\nWeighs(\"Sable\", 71).\nWeighs(\"Sable\", 72).\nWeighs(\"Sable\", 73).\nWeighs(\"Sable\", 74).\nWeighs(\"Sable\", 75).\nWeighs(\"Sable\", 76).\nWeighs(\"Sable\", 77).\nWeighs(\"Sable\", 78).\nWeighs(\"Sable\", 79).\nWeighs(\"Sable\", 80).\nWeighs(\"Sable\", 81).\nWeighs(\"Sable\", 82).\nWeighs(\"Sable\", 83).\nWeighs(\"Sable\", 84).\nWeighs(\"Sable\", 85).\nWeighs(\"Sable\", 86).\nWeighs(\"Sable\", 87).\nWeighs", "completions": [".decl Weighs(Animal:symbol, Weight:float)\nWeighs(\"Sable\", 10).\nWeighs(\"Sable\", 11).\nWeighs(\"Sable\", 12).\nWeighs(\"Sable\", 13).\nWeighs(\"Sable\", 14).\nWeighs(\"Sable\", 15).\nWeighs(\"Sable\", 16).\nWeighs(\"Sable\", 17).\nWeighs(\"Sable\", 18).\nWeighs(\"Sable\", 19).\nWeighs(\"Sable\", 20).\nWeighs(\"Sable\", 21).\nWeighs(\"Sable\", 22).\nWeighs(\"Sable\", 23).\nWeighs(\"Sable\", 24).\nWeighs(\"Sable\", 25).\nWeighs(\"Sable\", 26).\nWeighs(\"Sable\", 27).\nWeighs(\"Sable\", 28).\nWeighs(\"Sable\", 29).\nWeighs(\"Sable\", 30).\nWeighs(\"Sable\", 31).\nWeighs(\"Sable\", 32).\nWeighs(\"Sable\", 33).\nWeighs(\"Sable\", 34).\nWeighs(\"Sable\", 35).\nWeighs(\"Sable\", 36).\nWeighs(\"Sable\", 37).\nWeighs(\"Sable\", 38).\nWeighs(\"Sable\", 39).\nWeighs(\"Sable\", 40).\nWeighs(\"Sable\", 41).\nWeighs(\"Sable\", 42).\nWeighs(\"Sable\", 43).\nWeighs(\"Sable\", 44).\nWeighs(\"Sable\", 45).\nWeighs(\"Sable\", 46).\nWeighs(\"Sable\", 47).\nWeighs(\"Sable\", 48).\nWeighs(\"Sable\", 49).\nWeighs(\"Sable\", 50).\nWeighs(\"Sable\", 51).\nWeighs(\"Sable\", 52).\nWeighs(\"Sable\", 53).\nWeighs(\"Sable\", 54).\nWeighs(\"Sable\", 55).\nWeighs(\"Sable\", 56).\nWeighs(\"Sable\", 57).\nWeighs(\"Sable\", 58).\nWeighs(\"Sable\", 59).\nWeighs(\"Sable\", 60).\nWeighs(\"Sable\", 61).\nWeighs(\"Sable\", 62).\nWeighs(\"Sable\", 63).\nWeighs(\"Sable\", 64).\nWeighs(\"Sable\", 65).\nWeighs(\"Sable\", 66).\nWeighs(\"Sable\", 67).\nWeighs(\"Sable\", 68).\nWeighs(\"Sable\", 69).\nWeighs(\"Sable\", 70).\nWeighs(\"Sable\", 71).\nWeighs(\"Sable\", 72).\nWeighs(\"Sable\", 73).\nWeighs(\"Sable\", 74).\nWeighs(\"Sable\", 75).\nWeighs(\"Sable\", 76).\nWeighs(\"Sable\", 77).\nWeighs(\"Sable\", 78).\nWeighs(\"Sable\", 79).\nWeighs(\"Sable\", 80).\nWeighs(\"Sable\", 81).\nWeighs(\"Sable\", 82).\nWeighs(\"Sable\", 83).\nWeighs(\"Sable\", 84).\nWeighs(\"Sable\", 85).\nWeighs(\"Sable\", 86).\nWeighs(\"Sable\", 87).\nWeighs"]}
{"id": 934, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Mickey Mouse\", \"red\").\nHas_color(\"Mickey Mouse\", \"white\").\nHas_color(\"Mickey Mouse\", \"blue\").\nHas_color(\"American flag\", \"red\").\nHas_color(\"American flag\", \"white\").\nHas_color(\"American flag\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Mickey Mouse\", color1), Has_color(\"American flag\", color2), color1 = color2.\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Mickey Mouse\", \"red\").\nHas_color(\"Mickey Mouse\", \"white\").\nHas_color(\"Mickey Mouse\", \"blue\").\nHas_color(\"American flag\", \"red\").\nHas_color(\"American flag\", \"white\").\nHas_color(\"American flag\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Mickey Mouse\", color1), Has_color(\"American flag\", color2), color1 = color2.\n.output Answer\n\n"]}
{"id": 935, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Anakin Skywalker\", \"black\").\n.decl Is_associated_with(Object:symbol, Object2:symbol)\nIs_associated_with(\"Star Wars\", \"Anakin Skywalker\").\n.decl Answer()\nAnswer() :- Has_color(\"Anakin Skywalker\", color), Is_associated_with(\"Star Wars\", \"Anakin Skywalker\").\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Anakin Skywalker\", \"black\").\n.decl Is_associated_with(Object:symbol, Object2:symbol)\nIs_associated_with(\"Star Wars\", \"Anakin Skywalker\").\n.decl Answer()\nAnswer() :- Has_color(\"Anakin Skywalker\", color), Is_associated_with(\"Star Wars\", \"Anakin Skywalker\").\n.output Answer\n\n"]}
{"id": 936, "answer": true, "completion": ".decl Inspired_by(Story:symbol, Myth:symbol)\nInspired_by(\"story of Jesus\", \"Egyptian myth\").\n.decl Answer()\nAnswer() :- Inspired_by(\"story of Jesus\", \"Egyptian myth\").\n.output Answer\n\n", "completions": [".decl Inspired_by(Story:symbol, Myth:symbol)\nInspired_by(\"story of Jesus\", \"Egyptian myth\").\n.decl Answer()\nAnswer() :- Inspired_by(\"story of Jesus\", \"Egyptian myth\").\n.output Answer\n\n"]}
{"id": 937, "answer": false, "completion": ".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Jennifer Lawrence\", \"Shrader\").\n.decl Collaborates_with(Person:symbol, Person:symbol)\nCollaborates_with(\"Martin Scorsese\", \"Robert De Niro\").\nCollaborates_with(\"Martin Scorsese\", \"Leonardo DiCaprio\").\nCollaborates_with(\"Martin Scorsese\", \"Harvey Keitel\").\nCollaborates_with(\"Martin Scorsese\", \"Joe Pesci\").\nCollaborates_with(\"Martin Scorsese\", \"Robert Richardson\").\nCollaborates_with(\"Martin Scorsese\", \"Thelma Schoonmaker\").\nCollaborates_with(\"Martin Scorsese\", \"Michael Ballhaus\").\nCollaborates_with(\"Martin Scorsese\", \"Sandy Powell\").\nCollaborates_with(\"Martin Scorsese\", \"Jay Cocks\").\nCollaborates_with(\"Martin Scorsese\", \"Paul Schrader\").\nCollaborates_with(\"Martin Scorsese\", \"Mardik Martin\").\nCollaborates_with(\"Martin Scorsese\", \"Nicholas Pileggi\").\nCollaborates_with(\"Martin Scorsese\", \"Steven Zaillian\").\nCollaborates_with(\"Martin Scorsese\", \"Kenneth Lonergan\").\nCollaborates_with(\"Martin Scorsese\", \"Jay Cocks\").\nCollaborates_with(\"Martin Scorsese\", \"Laurence Fishburne\").\nCollaborates_with(\"Martin Scorsese\", \"John Leguizamo\").\nCollaborates_with(\"Martin Scorsese\", \"Chazz Palminteri\").\nCollaborates_with(\"Martin Scorsese\", \"Lorraine Bracco\").\nCollaborates_with(\"Martin Scorsese\", \"Paul Sorvino\").\nCollaborates_with(\"Martin Scorsese\", \"Frank Vincent\").\nCollaborates_with(\"Martin Scorsese\", \"Tony Sirico\").\nCollaborates_with(\"Martin Scorsese\", \"Frank Sivero\").\nCollaborates_with(\"Martin Scorsese\", \"Joe Pesci\").\nCollaborates_with(\"Martin Scorsese\", \"Ray Liotta\").\nCollaborates_with(\"Martin Scorsese\", \"Robert De Niro\").\nCollaborates_with(\"Martin Scorsese\", \"Paul Sorvino\").\nCollaborates_with(\"Martin Scorsese\", \"Lorraine Bracco\").\nCollaborates_with(\"Martin Scorsese\", \"Joe Pesci\").\nCollaborates_with(\"Martin Scorsese\", \"Frank Vincent\").\nCollaborates_with(\"Martin Scorsese\", \"Tony Sirico\").\nCollaborates_with(\"Martin Scorsese\", \"Frank Sivero\").\nCollaborates_with(\"Martin Scorsese\", \"Robert De Niro\").\nCollaborates_with(\"Martin Scorsese\", \"Ray Liotta\").\nCollaborates_with(\"Martin Scorsese\", \"Joe Pesci\").\nCollaborates_with(\"Martin Scorsese\", \"Lorraine Bracco\").\nCollaborates_with(\"Martin Scorsese\", \"Paul Sorvino\").\nCollaborates_with(\"Martin Scorsese\", \"Frank Vincent\").\nCollaborates_with(\"Martin Scorsese\", \"Tony Sirico\").\nCollaborates_with(\"Martin Scorsese\", \"Frank Sivero\").\nCollaborates_with(\"Martin Scorsese\", \"Robert De Niro\").\nCollaborates_with(\"Martin Scorsese\", \"Ray Liotta", "completions": [".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Jennifer Lawrence\", \"Shrader\").\n.decl Collaborates_with(Person:symbol, Person:symbol)\nCollaborates_with(\"Martin Scorsese\", \"Robert De Niro\").\nCollaborates_with(\"Martin Scorsese\", \"Leonardo DiCaprio\").\nCollaborates_with(\"Martin Scorsese\", \"Harvey Keitel\").\nCollaborates_with(\"Martin Scorsese\", \"Joe Pesci\").\nCollaborates_with(\"Martin Scorsese\", \"Robert Richardson\").\nCollaborates_with(\"Martin Scorsese\", \"Thelma Schoonmaker\").\nCollaborates_with(\"Martin Scorsese\", \"Michael Ballhaus\").\nCollaborates_with(\"Martin Scorsese\", \"Sandy Powell\").\nCollaborates_with(\"Martin Scorsese\", \"Jay Cocks\").\nCollaborates_with(\"Martin Scorsese\", \"Paul Schrader\").\nCollaborates_with(\"Martin Scorsese\", \"Mardik Martin\").\nCollaborates_with(\"Martin Scorsese\", \"Nicholas Pileggi\").\nCollaborates_with(\"Martin Scorsese\", \"Steven Zaillian\").\nCollaborates_with(\"Martin Scorsese\", \"Kenneth Lonergan\").\nCollaborates_with(\"Martin Scorsese\", \"Jay Cocks\").\nCollaborates_with(\"Martin Scorsese\", \"Laurence Fishburne\").\nCollaborates_with(\"Martin Scorsese\", \"John Leguizamo\").\nCollaborates_with(\"Martin Scorsese\", \"Chazz Palminteri\").\nCollaborates_with(\"Martin Scorsese\", \"Lorraine Bracco\").\nCollaborates_with(\"Martin Scorsese\", \"Paul Sorvino\").\nCollaborates_with(\"Martin Scorsese\", \"Frank Vincent\").\nCollaborates_with(\"Martin Scorsese\", \"Tony Sirico\").\nCollaborates_with(\"Martin Scorsese\", \"Frank Sivero\").\nCollaborates_with(\"Martin Scorsese\", \"Joe Pesci\").\nCollaborates_with(\"Martin Scorsese\", \"Ray Liotta\").\nCollaborates_with(\"Martin Scorsese\", \"Robert De Niro\").\nCollaborates_with(\"Martin Scorsese\", \"Paul Sorvino\").\nCollaborates_with(\"Martin Scorsese\", \"Lorraine Bracco\").\nCollaborates_with(\"Martin Scorsese\", \"Joe Pesci\").\nCollaborates_with(\"Martin Scorsese\", \"Frank Vincent\").\nCollaborates_with(\"Martin Scorsese\", \"Tony Sirico\").\nCollaborates_with(\"Martin Scorsese\", \"Frank Sivero\").\nCollaborates_with(\"Martin Scorsese\", \"Robert De Niro\").\nCollaborates_with(\"Martin Scorsese\", \"Ray Liotta\").\nCollaborates_with(\"Martin Scorsese\", \"Joe Pesci\").\nCollaborates_with(\"Martin Scorsese\", \"Lorraine Bracco\").\nCollaborates_with(\"Martin Scorsese\", \"Paul Sorvino\").\nCollaborates_with(\"Martin Scorsese\", \"Frank Vincent\").\nCollaborates_with(\"Martin Scorsese\", \"Tony Sirico\").\nCollaborates_with(\"Martin Scorsese\", \"Frank Sivero\").\nCollaborates_with(\"Martin Scorsese\", \"Robert De Niro\").\nCollaborates_with(\"Martin Scorsese\", \"Ray Liotta"]}
{"id": 938, "answer": false, "completion": ".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"Golden Gate Bridge\", \"steel\").\nHas_material(\"MP3\", \"plastic\").\n.decl Answer()\nAnswer() :- Has_material(\"Golden Gate Bridge\", material1), Has_material(\"MP3\", material2), material1 = material2.\n.output Answer\n\n", "completions": [".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"Golden Gate Bridge\", \"steel\").\nHas_material(\"MP3\", \"plastic\").\n.decl Answer()\nAnswer() :- Has_material(\"Golden Gate Bridge\", material1), Has_material(\"MP3\", material2), material1 = material2.\n.output Answer\n\n"]}
{"id": 939, "answer": false, "completion": ".decl Treats(Drug:symbol, Disease:symbol)\nTreats(\"Prozac\", \"depression\").\n.decl Answer()\nAnswer() :- Treats(\"Prozac\", \"Great Depression\").\n.output Answer\n\n", "completions": [".decl Treats(Drug:symbol, Disease:symbol)\nTreats(\"Prozac\", \"depression\").\n.decl Answer()\nAnswer() :- Treats(\"Prozac\", \"Great Depression\").\n.output Answer\n\n"]}
{"id": 940, "answer": true, "completion": ".decl Creates(Organization:symbol, Waste:symbol)\nCreates(\"United States Navy\", \"radioactive waste\").\n.decl Answer()\nAnswer() :- Creates(\"United States Navy\", \"radioactive waste\").\n.output Answer\n\n", "completions": [".decl Creates(Organization:symbol, Waste:symbol)\nCreates(\"United States Navy\", \"radioactive waste\").\n.decl Answer()\nAnswer() :- Creates(\"United States Navy\", \"radioactive waste\").\n.output Answer\n\n"]}
{"id": 941, "answer": true, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"clementine\", \"pith\").\n.decl Is_sought_after(Object:symbol)\nIs_sought_after(\"pith\").\n.decl Answer()\nAnswer() :- Has_part(\"clementine\", part), Is_sought_after(part).\n.output Answer\n\n", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"clementine\", \"pith\").\n.decl Is_sought_after(Object:symbol)\nIs_sought_after(\"pith\").\n.decl Answer()\nAnswer() :- Has_part(\"clementine\", part), Is_sought_after(part).\n.output Answer\n\n"]}
{"id": 942, "answer": false, "completion": ".decl Collaborates_with(Person_A:symbol, Person_B:symbol)\nCollaborates_with(\"Lil Jon\", \"The East Side Boyz\").\nCollaborates_with(\"Lil Jon\", \"The Lox\").\n.decl Has_top_ranked_song(Person:symbol, Song:symbol)\nHas_top_ranked_song(\"Lil Jon\", \"Get Low\").\n.decl Answer()\nAnswer() :- Collaborates_with(\"Lil Jon\", person), Has_top_ranked_song(\"Lil Jon\", song), Has_top_ranked_song(person, song).\n.output Answer\n\n", "completions": [".decl Collaborates_with(Person_A:symbol, Person_B:symbol)\nCollaborates_with(\"Lil Jon\", \"The East Side Boyz\").\nCollaborates_with(\"Lil Jon\", \"The Lox\").\n.decl Has_top_ranked_song(Person:symbol, Song:symbol)\nHas_top_ranked_song(\"Lil Jon\", \"Get Low\").\n.decl Answer()\nAnswer() :- Collaborates_with(\"Lil Jon\", person), Has_top_ranked_song(\"Lil Jon\", song), Has_top_ranked_song(person, song).\n.output Answer\n\n"]}
{"id": 943, "answer": true, "completion": ".decl Has_cause(Event:symbol, Cause:symbol)\nHas_cause(\"Hindenburg explosion\", \"helium\").\n.decl Answer()\nAnswer() :- Has_cause(\"Hindenburg explosion\", \"helium\").\n.output Answer\n\n", "completions": [".decl Has_cause(Event:symbol, Cause:symbol)\nHas_cause(\"Hindenburg explosion\", \"helium\").\n.decl Answer()\nAnswer() :- Has_cause(\"Hindenburg explosion\", \"helium\").\n.output Answer\n\n"]}
{"id": 944, "answer": true, "completion": ".decl Wins(Person:symbol, Event:symbol)\nWins(\"Al Unser Jr.\", \"Indianapolis 500\").\n.decl Is_subevent_of(Event:symbol, Event2:symbol)\nIs_subevent_of(\"Indianapolis 500\", \"Space Race\").\n.decl Answer()\nAnswer() :- Wins(\"Al Unser Jr.\", event), Is_subevent_of(event, \"Space Race\").\n.output Answer\n\n", "completions": [".decl Wins(Person:symbol, Event:symbol)\nWins(\"Al Unser Jr.\", \"Indianapolis 500\").\n.decl Is_subevent_of(Event:symbol, Event2:symbol)\nIs_subevent_of(\"Indianapolis 500\", \"Space Race\").\n.decl Answer()\nAnswer() :- Wins(\"Al Unser Jr.\", event), Is_subevent_of(event, \"Space Race\").\n.output Answer\n\n"]}
{"id": 945, "answer": true, "completion": ".decl Has_fear(Person:symbol, Object:symbol)\nHas_fear(\"muggle wizard\", \"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Has_fear(\"muggle wizard\", \"Lord Voldemort\").\n.output Answer\n\n", "completions": [".decl Has_fear(Person:symbol, Object:symbol)\nHas_fear(\"muggle wizard\", \"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Has_fear(\"muggle wizard\", \"Lord Voldemort\").\n.output Answer\n\n"]}
{"id": 946, "answer": true, "completion": ".decl Has_endowment(University:symbol, Endowment:float)\nHas_endowment(\"Johns Hopkins University\", 2.5).\n.decl Has_debt(Organization:symbol, Debt:float)\nHas_debt(\"MBTA\", 1.5).\n.decl Answer()\nAnswer() :- Has_endowment(\"Johns Hopkins University\", endowment), Has_debt(\"MBTA\", debt), endowment > debt.\n.output Answer\n\n", "completions": [".decl Has_endowment(University:symbol, Endowment:float)\nHas_endowment(\"Johns Hopkins University\", 2.5).\n.decl Has_debt(Organization:symbol, Debt:float)\nHas_debt(\"MBTA\", 1.5).\n.decl Answer()\nAnswer() :- Has_endowment(\"Johns Hopkins University\", endowment), Has_debt(\"MBTA\", debt), endowment > debt.\n.output Answer\n\n"]}
{"id": 947, "answer": false, "completion": ".decl Has_trade(Company:symbol, Trade:symbol)\nHas_trade(\"East India Company\", \"tea\").\nHas_trade(\"East India Company\", \"spices\").\nHas_trade(\"East India Company\", \"silk\").\nHas_trade(\"East India Company\", \"cotton\").\nHas_trade(\"East India Company\", \"saltpeter\").\nHas_trade(\"East India Company\", \"opium\").\nHas_trade(\"East India Company\", \"sugar\").\nHas_trade(\"East India Company\", \"indigo\").\nHas_trade(\"East India Company\", \"salt\").\nHas_trade(\"East India Company\", \"tobacco\").\nHas_trade(\"East India Company\", \"cocoa\").\nHas_trade(\"East India Company\", \"coffee\").\nHas_trade(\"East India Company\", \"cinnamon\").\nHas_trade(\"East India Company\", \"pepper\").\nHas_trade(\"East India Company\", \"nutmeg\").\nHas_trade(\"East India Company\", \"cloves\").\nHas_trade(\"East India Company\", \"ginger\").\nHas_trade(\"East India Company\", \"cassia\").\nHas_trade(\"East India Company\", \"saffron\").\nHas_trade(\"East India Company\", \"mace\").\nHas_trade(\"East India Company\", \"cardamom\").\nHas_trade(\"East India Company\", \"musk\").\nHas_trade(\"East India Company\", \"ambergris\").\nHas_trade(\"East India Company\", \"ivory\").\nHas_trade(\"East India Company\", \"coral\").\nHas_trade(\"East India Company\", \"cinnabar\").\nHas_trade(\"East India Company\", \"sandalwood\").\nHas_trade(\"East India Company\", \"cassiterite\").\nHas_trade(\"East India Company\", \"tin\").\nHas_trade(\"East India Company\", \"lead\").\nHas_trade(\"East India Company\", \"zinc\").\nHas_trade(\"East India Company\", \"copper\").\nHas_trade(\"East India Company\", \"silver\").\nHas_trade(\"East India Company\", \"gold\").\nHas_trade(\"East India Company\", \"diamonds\").\nHas_trade(\"East India Company\", \"pearls\").\nHas_trade(\"East India Company\", \"rubies\").\nHas_trade(\"East India Company\", \"emeralds\").\nHas_trade(\"East India Company\", \"sapphires\").\nHas_trade(\"East India Company\", \"topaz\").\nHas_trade(\"East India Company\", \"carnelian\").\nHas_trade(\"East India Company\", \"lapis lazuli\").\nHas_trade(\"East India Company\", \"turquoise\").\nHas_trade(\"East India Company\", \"coral\").\nHas_trade(\"East India Company\", \"cinnabar\").\nHas_trade(\"East India Company\", \"sandalwood\").\nHas_trade(\"East India Company\", \"cassiterite\").\nHas_trade(\"East India Company\", \"tin\").\nHas_trade(\"East India Company\", \"lead\").\nHas_trade(\"East India Company\", \"zinc\").\nHas_trade(\"East India Company\", \"copper\").\nHas_trade(\"East India Company\", \"silver\").\nHas_trade(\"East India Company\", \"gold\").\nHas_trade(\"East India Company\", \"diamonds\").\nHas_trade(\"East India Company\", \"pearls\").\nHas_trade(\"East India Company\", \"rubies\").\nHas_trade(\"East India Company\", \"emeralds\").\nHas_trade(\"East India Company\", \"sapphires\").\nHas_trade", "completions": [".decl Has_trade(Company:symbol, Trade:symbol)\nHas_trade(\"East India Company\", \"tea\").\nHas_trade(\"East India Company\", \"spices\").\nHas_trade(\"East India Company\", \"silk\").\nHas_trade(\"East India Company\", \"cotton\").\nHas_trade(\"East India Company\", \"saltpeter\").\nHas_trade(\"East India Company\", \"opium\").\nHas_trade(\"East India Company\", \"sugar\").\nHas_trade(\"East India Company\", \"indigo\").\nHas_trade(\"East India Company\", \"salt\").\nHas_trade(\"East India Company\", \"tobacco\").\nHas_trade(\"East India Company\", \"cocoa\").\nHas_trade(\"East India Company\", \"coffee\").\nHas_trade(\"East India Company\", \"cinnamon\").\nHas_trade(\"East India Company\", \"pepper\").\nHas_trade(\"East India Company\", \"nutmeg\").\nHas_trade(\"East India Company\", \"cloves\").\nHas_trade(\"East India Company\", \"ginger\").\nHas_trade(\"East India Company\", \"cassia\").\nHas_trade(\"East India Company\", \"saffron\").\nHas_trade(\"East India Company\", \"mace\").\nHas_trade(\"East India Company\", \"cardamom\").\nHas_trade(\"East India Company\", \"musk\").\nHas_trade(\"East India Company\", \"ambergris\").\nHas_trade(\"East India Company\", \"ivory\").\nHas_trade(\"East India Company\", \"coral\").\nHas_trade(\"East India Company\", \"cinnabar\").\nHas_trade(\"East India Company\", \"sandalwood\").\nHas_trade(\"East India Company\", \"cassiterite\").\nHas_trade(\"East India Company\", \"tin\").\nHas_trade(\"East India Company\", \"lead\").\nHas_trade(\"East India Company\", \"zinc\").\nHas_trade(\"East India Company\", \"copper\").\nHas_trade(\"East India Company\", \"silver\").\nHas_trade(\"East India Company\", \"gold\").\nHas_trade(\"East India Company\", \"diamonds\").\nHas_trade(\"East India Company\", \"pearls\").\nHas_trade(\"East India Company\", \"rubies\").\nHas_trade(\"East India Company\", \"emeralds\").\nHas_trade(\"East India Company\", \"sapphires\").\nHas_trade(\"East India Company\", \"topaz\").\nHas_trade(\"East India Company\", \"carnelian\").\nHas_trade(\"East India Company\", \"lapis lazuli\").\nHas_trade(\"East India Company\", \"turquoise\").\nHas_trade(\"East India Company\", \"coral\").\nHas_trade(\"East India Company\", \"cinnabar\").\nHas_trade(\"East India Company\", \"sandalwood\").\nHas_trade(\"East India Company\", \"cassiterite\").\nHas_trade(\"East India Company\", \"tin\").\nHas_trade(\"East India Company\", \"lead\").\nHas_trade(\"East India Company\", \"zinc\").\nHas_trade(\"East India Company\", \"copper\").\nHas_trade(\"East India Company\", \"silver\").\nHas_trade(\"East India Company\", \"gold\").\nHas_trade(\"East India Company\", \"diamonds\").\nHas_trade(\"East India Company\", \"pearls\").\nHas_trade(\"East India Company\", \"rubies\").\nHas_trade(\"East India Company\", \"emeralds\").\nHas_trade(\"East India Company\", \"sapphires\").\nHas_trade"]}
{"id": 948, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"US third grader\", 8).\n.decl Has_rating(Game:symbol, Rating:symbol)\nHas_rating(\"Guitar Hero Beatles\", \"T\").\n.decl Answer()\nAnswer() :- Has_age(\"US third grader\", age), Has_rating(\"Guitar Hero Beatles\", rating), age < 13.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"US third grader\", 8).\n.decl Has_rating(Game:symbol, Rating:symbol)\nHas_rating(\"Guitar Hero Beatles\", \"T\").\n.decl Answer()\nAnswer() :- Has_age(\"US third grader\", age), Has_rating(\"Guitar Hero Beatles\", rating), age < 13.\n.output Answer\n\n"]}
{"id": 949, "answer": false, "completion": ".decl Has_n_marriages(Person:symbol, N_marriages:float)\nHas_n_marriages(\"Larry King\", 8).\n.decl Has_n_feet(Person:symbol, N_feet:float)\nHas_n_feet(\"Larry King\", 2).\n.decl Answer()\nAnswer() :- Has_n_marriages(\"Larry King\", n_marriages), Has_n_feet(\"Larry King\", n_feet), n_marriages <= n_feet.\n.output Answer\n\n\n", "completions": [".decl Has_n_marriages(Person:symbol, N_marriages:float)\nHas_n_marriages(\"Larry King\", 8).\n.decl Has_n_feet(Person:symbol, N_feet:float)\nHas_n_feet(\"Larry King\", 2).\n.decl Answer()\nAnswer() :- Has_n_marriages(\"Larry King\", n_marriages), Has_n_feet(\"Larry King\", n_feet), n_marriages <= n_feet.\n.output Answer\n\n\n"]}
{"id": 950, "answer": true, "completion": ".decl Has_sense(Animal:symbol, Sense:symbol)\nHas_sense(\"dog\", \"smell\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"ammonia\", \"smell\").\n.decl Answer()\nAnswer() :- Has_sense(\"dog\", sense), Has_property(\"ammonia\", property), sense = property.\n.output Answer\n\n", "completions": [".decl Has_sense(Animal:symbol, Sense:symbol)\nHas_sense(\"dog\", \"smell\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"ammonia\", \"smell\").\n.decl Answer()\nAnswer() :- Has_sense(\"dog\", sense), Has_property(\"ammonia\", property), sense = property.\n.output Answer\n\n"]}
{"id": 951, "answer": true, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"Walmart\", \"Reddit\").\n.decl Answer()\nAnswer() :- Sells(\"Walmart\", \"Reddit\").\n.output Answer\n\n", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"Walmart\", \"Reddit\").\n.decl Answer()\nAnswer() :- Sells(\"Walmart\", \"Reddit\").\n.output Answer\n\n"]}
{"id": 952, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Snowdon mountain\", 1085).\nHas_height(\"piece of cake\", 0.5).\n.decl Answer()\nAnswer() :- Has_height(\"Snowdon mountain\", height1), Has_height(\"piece of cake\", height2), height1 > height2.\n.output Answer\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Snowdon mountain\", 1085).\nHas_height(\"piece of cake\", 0.5).\n.decl Answer()\nAnswer() :- Has_height(\"Snowdon mountain\", height1), Has_height(\"piece of cake\", height2), height1 > height2.\n.output Answer\n\n"]}
{"id": 953, "answer": true, "completion": ".decl Has_subtext(Book:symbol, Subtext:symbol)\nHas_subtext(\"The Jungle Book\", \"racist\").\n.decl Answer()\nAnswer() :- Has_subtext(\"The Jungle Book\", \"racist\").\n.output Answer\n\n", "completions": [".decl Has_subtext(Book:symbol, Subtext:symbol)\nHas_subtext(\"The Jungle Book\", \"racist\").\n.decl Answer()\nAnswer() :- Has_subtext(\"The Jungle Book\", \"racist\").\n.output Answer\n\n"]}
{"id": 954, "answer": false, "completion": ".decl Lasts_n_minutes(Event:symbol, N_minutes:float)\nLasts_n_minutes(\"episode of Scrubs\", 22).\n.decl Holds_breath_n_minutes(Animal:symbol, N_minutes:float)\nHolds_breath_n_minutes(\"sloth\", 4).\n.decl Answer()\nAnswer() :- Holds_breath_n_minutes(\"sloth\", n_minutes1), Lasts_n_minutes(\"episode of Scrubs\", n_minutes2), n_minutes1 >= n_minutes2.\n.output Answer\n\n", "completions": [".decl Lasts_n_minutes(Event:symbol, N_minutes:float)\nLasts_n_minutes(\"episode of Scrubs\", 22).\n.decl Holds_breath_n_minutes(Animal:symbol, N_minutes:float)\nHolds_breath_n_minutes(\"sloth\", 4).\n.decl Answer()\nAnswer() :- Holds_breath_n_minutes(\"sloth\", n_minutes1), Lasts_n_minutes(\"episode of Scrubs\", n_minutes2), n_minutes1 >= n_minutes2.\n.output Answer\n\n"]}
{"id": 955, "answer": true, "completion": ".decl Has_heat(Pepper:symbol, Heat:float)\nHas_heat(\"jalapeno\", 2.5).\nHas_heat(\"Bhut jolokia\", 1).\n.decl Answer()\nAnswer() :- Has_heat(\"jalapeno\", heat1), Has_heat(\"Bhut jolokia\", heat2), heat1 > heat2.\n.output Answer\n\n", "completions": [".decl Has_heat(Pepper:symbol, Heat:float)\nHas_heat(\"jalapeno\", 2.5).\nHas_heat(\"Bhut jolokia\", 1).\n.decl Answer()\nAnswer() :- Has_heat(\"jalapeno\", heat1), Has_heat(\"Bhut jolokia\", heat2), heat1 > heat2.\n.output Answer\n\n"]}
{"id": 956, "answer": true, "completion": ".decl Has_spokesperson(Company:symbol, Spokesperson:symbol)\nHas_spokesperson(\"Subway\", \"Jared Fogle\").\n.decl Is_sex_offender(Person:symbol)\nIs_sex_offender(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Has_spokesperson(\"Subway\", spokesperson), Is_sex_offender(spokesperson).\n.output Answer\n\n", "completions": [".decl Has_spokesperson(Company:symbol, Spokesperson:symbol)\nHas_spokesperson(\"Subway\", \"Jared Fogle\").\n.decl Is_sex_offender(Person:symbol)\nIs_sex_offender(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Has_spokesperson(\"Subway\", spokesperson), Is_sex_offender(spokesperson).\n.output Answer\n\n"]}
{"id": 957, "answer": true, "completion": ".decl Is_loud(Sound:symbol, Loudness:float)\nIs_loud(\"lullaby\", 0.1).\nIs_loud(\"Hellen Keller\", 0.2).\n.decl Answer()\nAnswer() :- Is_loud(\"lullaby\", loudness1), Is_loud(\"Hellen Keller\", loudness2), loudness1 < loudness2.\n.output Answer\n\n", "completions": [".decl Is_loud(Sound:symbol, Loudness:float)\nIs_loud(\"lullaby\", 0.1).\nIs_loud(\"Hellen Keller\", 0.2).\n.decl Answer()\nAnswer() :- Is_loud(\"lullaby\", loudness1), Is_loud(\"Hellen Keller\", loudness2), loudness1 < loudness2.\n.output Answer\n\n"]}
{"id": 958, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Communist Party of the Soviet Union\", 20).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Korean music industry\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Communist Party of the Soviet Union\", n_members1), Has_n_members(\"Korean music industry\", n_members2), n_members1 >= n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Communist Party of the Soviet Union\", 20).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Korean music industry\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Communist Party of the Soviet Union\", n_members1), Has_n_members(\"Korean music industry\", n_members2), n_members1 >= n_members2.\n.output Answer\n\n"]}
{"id": 959, "answer": false, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Stanford Linear Accelerator\", 3.2).\nHas_length(\"Golden Gate Bridge\", 1.7).\n.decl Answer()\nAnswer() :- Has_length(\"Stanford Linear Accelerator\", length1), Has_length(\"Golden Gate Bridge\", length2), length1 < length2.\n.output Answer\n\n", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Stanford Linear Accelerator\", 3.2).\nHas_length(\"Golden Gate Bridge\", 1.7).\n.decl Answer()\nAnswer() :- Has_length(\"Stanford Linear Accelerator\", length1), Has_length(\"Golden Gate Bridge\", length2), length1 < length2.\n.output Answer\n\n"]}
{"id": 960, "answer": false, "completion": ".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"Caracal\", \"cat\").\nHas_shape(\"protractor\", \"triangle\").\n.decl Answer()\nAnswer() :- Has_shape(\"Caracal\", shape1), Has_shape(\"protractor\", shape2), shape1 = shape2.\n.output Answer\n\n", "completions": [".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"Caracal\", \"cat\").\nHas_shape(\"protractor\", \"triangle\").\n.decl Answer()\nAnswer() :- Has_shape(\"Caracal\", shape1), Has_shape(\"protractor\", shape2), shape1 = shape2.\n.output Answer\n\n"]}
{"id": 961, "answer": false, "completion": ".decl Has_sport(University:symbol, Sport:symbol)\nHas_sport(\"Marist\", \"rowing\").\n.decl Has_sport(University:symbol, Sport:symbol)\nHas_sport(\"Marist\", \"rowing\").\n.decl Answer()\nAnswer() :- Has_sport(\"Marist\", \"rowing\").\n.output Answer\n\n", "completions": [".decl Has_sport(University:symbol, Sport:symbol)\nHas_sport(\"Marist\", \"rowing\").\n.decl Has_sport(University:symbol, Sport:symbol)\nHas_sport(\"Marist\", \"rowing\").\n.decl Answer()\nAnswer() :- Has_sport(\"Marist\", \"rowing\").\n.output Answer\n\n"]}
{"id": 962, "answer": false, "completion": ".decl Tolerates(Person:symbol, Music:symbol)\nTolerates(\"Ibn Saud\", \"classical music\").\nTolerates(\"Ibn Saud\", \"jazz\").\nTolerates(\"Ibn Saud\", \"rock music\").\n.decl Answer()\nAnswer() :- Tolerates(\"Ibn Saud\", \"salsa music\").\n.output Answer\n\n", "completions": [".decl Tolerates(Person:symbol, Music:symbol)\nTolerates(\"Ibn Saud\", \"classical music\").\nTolerates(\"Ibn Saud\", \"jazz\").\nTolerates(\"Ibn Saud\", \"rock music\").\n.decl Answer()\nAnswer() :- Tolerates(\"Ibn Saud\", \"salsa music\").\n.output Answer\n\n"]}
{"id": 963, "answer": true, "completion": ".decl Has_gravity(Planet:symbol, Gravity:float)\nHas_gravity(\"Venus\", 0.9).\n.decl Answer()\nAnswer() :- Has_gravity(\"Venus\", gravity), gravity < 1.\n.output Answer\n\n", "completions": [".decl Has_gravity(Planet:symbol, Gravity:float)\nHas_gravity(\"Venus\", 0.9).\n.decl Answer()\nAnswer() :- Has_gravity(\"Venus\", gravity), gravity < 1.\n.output Answer\n\n"]}
{"id": 964, "answer": true, "completion": ".decl Is_accountable_to(Company:symbol, Person:symbol)\nIs_accountable_to(\"Samsung\", \"shareholders\").\n.decl Answer()\nAnswer() :- Is_accountable_to(\"Samsung\", \"shareholders\").\n.output Answer\n\n", "completions": [".decl Is_accountable_to(Company:symbol, Person:symbol)\nIs_accountable_to(\"Samsung\", \"shareholders\").\n.decl Answer()\nAnswer() :- Is_accountable_to(\"Samsung\", \"shareholders\").\n.output Answer\n\n"]}
{"id": 965, "answer": true, "completion": ".decl Has_height(Animal:symbol, Height:float)\nHas_height(\"short-eared dog\", 0.5).\n.decl Tames(Person:symbol, Animal:symbol)\nTames(\"Cesar Millan\", \"short-eared dog\").\n.decl Answer()\nAnswer() :- Tames(\"Cesar Millan\", animal), Has_height(animal, height), height <= 1.\n.output Answer\n\n", "completions": [".decl Has_height(Animal:symbol, Height:float)\nHas_height(\"short-eared dog\", 0.5).\n.decl Tames(Person:symbol, Animal:symbol)\nTames(\"Cesar Millan\", \"short-eared dog\").\n.decl Answer()\nAnswer() :- Tames(\"Cesar Millan\", animal), Has_height(animal, height), height <= 1.\n.output Answer\n\n"]}
{"id": 966, "answer": false, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Charlie Bucket\", \"chocolate factory worker\").\n.decl Is_subordinate_to(Job:symbol, Job:symbol)\nIs_subordinate_to(\"chocolate factory worker\", \"hotel manager\").\n.decl Answer()\nAnswer() :- Has_job(\"Charlie Bucket\", job1), Is_subordinate_to(job1, \"hotel manager\").\n.output Answer\n\n", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Charlie Bucket\", \"chocolate factory worker\").\n.decl Is_subordinate_to(Job:symbol, Job:symbol)\nIs_subordinate_to(\"chocolate factory worker\", \"hotel manager\").\n.decl Answer()\nAnswer() :- Has_job(\"Charlie Bucket\", job1), Is_subordinate_to(job1, \"hotel manager\").\n.output Answer\n\n"]}
{"id": 967, "answer": true, "completion": ".decl Has_end(Event:symbol, End:symbol)\nHas_end(\"Presidency of Bill Clinton\", \"impeachment\").\n.decl Answer()\nAnswer() :- Has_end(\"Presidency of Bill Clinton\", \"impeachment\").\n.output Answer\n\n", "completions": [".decl Has_end(Event:symbol, End:symbol)\nHas_end(\"Presidency of Bill Clinton\", \"impeachment\").\n.decl Answer()\nAnswer() :- Has_end(\"Presidency of Bill Clinton\", \"impeachment\").\n.output Answer\n\n"]}
{"id": 968, "answer": true, "completion": ".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"Forbidden City\", \"wood\").\nHas_material(\"wooden rollercoaster\", \"wood\").\n.decl Answer()\nAnswer() :- Has_material(\"Forbidden City\", material1), Has_material(\"wooden rollercoaster\", material2), material1 = material2.\n.output Answer\n\n", "completions": [".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"Forbidden City\", \"wood\").\nHas_material(\"wooden rollercoaster\", \"wood\").\n.decl Answer()\nAnswer() :- Has_material(\"Forbidden City\", material1), Has_material(\"wooden rollercoaster\", material2), material1 = material2.\n.output Answer\n\n"]}
{"id": 969, "answer": true, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Magnus Carlsen\", \"KFC\").\n.decl Answer()\nAnswer() :- Likes(\"Magnus Carlsen\", \"KFC\").\n.output Answer\n\n", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Magnus Carlsen\", \"KFC\").\n.decl Answer()\nAnswer() :- Likes(\"Magnus Carlsen\", \"KFC\").\n.output Answer\n\n"]}
{"id": 970, "answer": false, "completion": ".decl Lives_on(Animal_A:symbol, Animal_B:symbol)\nLives_on(\"moth\", \"sloth\").\n.decl Has_family_dinners(Animal:symbol)\nHas_family_dinners(\"sloth\").\n.decl Answer()\nAnswer() :- Lives_on(animal, \"sloth\"), Has_family_dinners(animal).\n.output Answer\n\n", "completions": [".decl Lives_on(Animal_A:symbol, Animal_B:symbol)\nLives_on(\"moth\", \"sloth\").\n.decl Has_family_dinners(Animal:symbol)\nHas_family_dinners(\"sloth\").\n.decl Answer()\nAnswer() :- Lives_on(animal, \"sloth\"), Has_family_dinners(animal).\n.output Answer\n\n"]}
{"id": 971, "answer": true, "completion": ".decl Has_album_sales(Person:symbol, Album_sales:float)\nHas_album_sales(\"Kelly Clarkson\", 25).\nHas_album_sales(\"season 4 American Idol winner\", 10).\n.decl Answer()\nAnswer() :- Has_album_sales(\"Kelly Clarkson\", album_sales1), Has_album_sales(\"season 4 American Idol winner\", album_sales2), album_sales1 > album_sales2.\n.output Answer\n\n", "completions": [".decl Has_album_sales(Person:symbol, Album_sales:float)\nHas_album_sales(\"Kelly Clarkson\", 25).\nHas_album_sales(\"season 4 American Idol winner\", 10).\n.decl Answer()\nAnswer() :- Has_album_sales(\"Kelly Clarkson\", album_sales1), Has_album_sales(\"season 4 American Idol winner\", album_sales2), album_sales1 > album_sales2.\n.output Answer\n\n"]}
{"id": 972, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\nHas_height(\"caracal\", 0.9).\n.decl Answer()\nAnswer() :- Has_height(\"Javier Sotomayor\", height1), Has_height(\"caracal\", height2), height1 > height2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\nHas_height(\"caracal\", 0.9).\n.decl Answer()\nAnswer() :- Has_height(\"Javier Sotomayor\", height1), Has_height(\"caracal\", height2), height1 > height2.\n.output Answer\n\n"]}
{"id": 973, "answer": true, "completion": ".decl Is_lucky_number(Number:float, Culture:symbol)\nIs_lucky_number(8, \"Hong Kong\").\n.decl Answer()\nAnswer() :- Is_lucky_number(8, \"Hong Kong\").\n.output Answer\n\n", "completions": [".decl Is_lucky_number(Number:float, Culture:symbol)\nIs_lucky_number(8, \"Hong Kong\").\n.decl Answer()\nAnswer() :- Is_lucky_number(8, \"Hong Kong\").\n.output Answer\n\n"]}
{"id": 974, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1895\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1897\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1898\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1900\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1902\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1905\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1906\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1907\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1908\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1909\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1910\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1911\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1912\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1913\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1914\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1915\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1916\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1917\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1918\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1919\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1920\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1921\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1922\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1923\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1924\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1925\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1926\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1927\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1928\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1929\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1930\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1931\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1932\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1933\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1934\").\nHappens_in_time(\"Oscar Wilde", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1895\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1897\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1898\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1900\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1902\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1905\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1906\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1907\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1908\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1909\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1910\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1911\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1912\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1913\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1914\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1915\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1916\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1917\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1918\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1919\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1920\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1921\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1922\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1923\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1924\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1925\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1926\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1927\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1928\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1929\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1930\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1931\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1932\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1933\").\nHappens_in_time(\"Oscar Wilde's treatment under the law\", \"1934\").\nHappens_in_time(\"Oscar Wilde"]}
{"id": 975, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"War in Vietnam\", \"1945-46\").\nHappens_in_time(\"free education\", \"1945-46\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"free education\", \"Soviet Union\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"War in Vietnam\", time), Happens_in_time(\"free education\", time), Happens_in_place(\"free education\", \"Soviet Union\").\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"War in Vietnam\", \"1945-46\").\nHappens_in_time(\"free education\", \"1945-46\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"free education\", \"Soviet Union\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"War in Vietnam\", time), Happens_in_time(\"free education\", time), Happens_in_place(\"free education\", \"Soviet Union\").\n.output Answer\n\n"]}
{"id": 976, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"goblin shark\", \"fish\").\nEats(\"fish\", \"plankton\").\nEats(\"plankton\", \"algae\").\nEats(\"algae\", \"sunlight\").\n.decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Crossroads Kitchen\", \"fish\").\nServes(\"Crossroads Kitchen\", \"plankton\").\nServes(\"Crossroads Kitchen\", \"algae\").\nServes(\"Crossroads Kitchen\", \"sunlight\").\n.decl Answer()\nAnswer() :- Eats(\"goblin shark\", food), Serves(\"Crossroads Kitchen\", food).\n.output Answer\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"goblin shark\", \"fish\").\nEats(\"fish\", \"plankton\").\nEats(\"plankton\", \"algae\").\nEats(\"algae\", \"sunlight\").\n.decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Crossroads Kitchen\", \"fish\").\nServes(\"Crossroads Kitchen\", \"plankton\").\nServes(\"Crossroads Kitchen\", \"algae\").\nServes(\"Crossroads Kitchen\", \"sunlight\").\n.decl Answer()\nAnswer() :- Eats(\"goblin shark\", food), Serves(\"Crossroads Kitchen\", food).\n.output Answer\n\n"]}
{"id": 977, "answer": true, "completion": ".decl Has_orgasm(Person:symbol)\nHas_orgasm(\"Hanuman\").\n.decl Answer()\nAnswer() :- Has_orgasm(\"Hanuman\").\n.output Answer\n\n", "completions": [".decl Has_orgasm(Person:symbol)\nHas_orgasm(\"Hanuman\").\n.decl Answer()\nAnswer() :- Has_orgasm(\"Hanuman\").\n.output Answer\n\n"]}
{"id": 978, "answer": false, "completion": ".decl Has_form(Object:symbol, Form:symbol)\nHas_form(\"onion\", \"sphere\").\nHas_form(\"tree\", \"cylinder\").\n.decl Answer()\nAnswer() :- Has_form(\"onion\", form1), Has_form(\"tree\", form2), form1 = form2.\n.output Answer\n\n", "completions": [".decl Has_form(Object:symbol, Form:symbol)\nHas_form(\"onion\", \"sphere\").\nHas_form(\"tree\", \"cylinder\").\n.decl Answer()\nAnswer() :- Has_form(\"onion\", form1), Has_form(\"tree\", form2), form1 = form2.\n.output Answer\n\n"]}
{"id": 979, "answer": true, "completion": ".decl Is_company(Company:symbol)\nIs_company(\"LinkedIn\").\nIs_company(\"LeafedIn\").\n.decl Is_subsidiary(Company:symbol, Parent_company:symbol)\nIs_subsidiary(\"LeafedIn\", \"LinkedIn\").\n.decl Answer()\nAnswer() :- Is_company(company1), Is_company(company2), Is_subsidiary(company1, company2).\n.output Answer\n\n", "completions": [".decl Is_company(Company:symbol)\nIs_company(\"LinkedIn\").\nIs_company(\"LeafedIn\").\n.decl Is_subsidiary(Company:symbol, Parent_company:symbol)\nIs_subsidiary(\"LeafedIn\", \"LinkedIn\").\n.decl Answer()\nAnswer() :- Is_company(company1), Is_company(company2), Is_subsidiary(company1, company2).\n.output Answer\n\n"]}
{"id": 980, "answer": true, "completion": ".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"ocelot\", 30).\nHas_speed(\"kindergartner\", 5).\n.decl Answer()\nAnswer() :- Has_speed(\"ocelot\", speed1), Has_speed(\"kindergartner\", speed2), speed1 > speed2.\n.output Answer\n\n", "completions": [".decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"ocelot\", 30).\nHas_speed(\"kindergartner\", 5).\n.decl Answer()\nAnswer() :- Has_speed(\"ocelot\", speed1), Has_speed(\"kindergartner\", speed2), speed1 > speed2.\n.output Answer\n\n"]}
{"id": 981, "answer": true, "completion": ".decl Has_population(Place:symbol, Population:float)\nHas_population(\"Warsaw Ghetto\", 400000).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"secret police\", 1000).\n.decl Answer()\nAnswer() :- Has_population(\"Warsaw Ghetto\", population), Has_n_members(\"secret police\", n_members), population > n_members.\n.output Answer\n\n\n", "completions": [".decl Has_population(Place:symbol, Population:float)\nHas_population(\"Warsaw Ghetto\", 400000).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"secret police\", 1000).\n.decl Answer()\nAnswer() :- Has_population(\"Warsaw Ghetto\", population), Has_n_members(\"secret police\", n_members), population > n_members.\n.output Answer\n\n\n"]}
{"id": 982, "answer": false, "completion": ".decl Is_in(Object:symbol, Location:symbol)\nIs_in(\"Ganymede\", \"Jupiter\").\nIs_in(\"Jupiter\", \"Milky Way galaxy\").\n.decl Answer()\nAnswer() :- Is_in(\"Ganymede\", \"Milky Way galaxy\").\n.output Answer\n\n", "completions": [".decl Is_in(Object:symbol, Location:symbol)\nIs_in(\"Ganymede\", \"Jupiter\").\nIs_in(\"Jupiter\", \"Milky Way galaxy\").\n.decl Answer()\nAnswer() :- Is_in(\"Ganymede\", \"Milky Way galaxy\").\n.output Answer\n\n"]}
{"id": 983, "answer": true, "completion": ".decl Has_tattoo(Person:symbol, Tattoo:symbol)\nHas_tattoo(\"Harry Potter\", \"snake\").\nHas_tattoo(\"Harry Potter\", \"skull\").\n.decl Is_good_luck(Tattoo:symbol)\nIs_good_luck(\"snake\").\nIs_good_luck(\"skull\").\n.decl Answer()\nAnswer() :- Has_tattoo(\"Harry Potter\", tattoo), Is_good_luck(tattoo).\n.output Answer\n\n", "completions": [".decl Has_tattoo(Person:symbol, Tattoo:symbol)\nHas_tattoo(\"Harry Potter\", \"snake\").\nHas_tattoo(\"Harry Potter\", \"skull\").\n.decl Is_good_luck(Tattoo:symbol)\nIs_good_luck(\"snake\").\nIs_good_luck(\"skull\").\n.decl Answer()\nAnswer() :- Has_tattoo(\"Harry Potter\", tattoo), Is_good_luck(tattoo).\n.output Answer\n\n"]}
{"id": 984, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Vietnam War\", 1955).\nHappens_in_year(\"Vietnam War\", 1975).\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Alan Alda\", 1936).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Vietnam War\", year1), Born_in_year(\"Alan Alda\", year2), year1 <= year2.\n.output Answer\n\n", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Vietnam War\", 1955).\nHappens_in_year(\"Vietnam War\", 1975).\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Alan Alda\", 1936).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Vietnam War\", year1), Born_in_year(\"Alan Alda\", year2), year1 <= year2.\n.output Answer\n\n"]}
{"id": 985, "answer": true, "completion": ".decl Has_title(Song:symbol, Title:symbol)\nHas_title(\"Van Morrison's most played song\", \"Brown Eyed Girl\").\n.decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"minority of women worldwide\", \"female\").\n.decl Answer()\nAnswer() :- Has_title(\"Van Morrison's most played song\", title), Has_gender(\"minority of women worldwide\", gender), title = \"Brown Eyed Girl\", gender = \"female\".\n.output Answer\n\n", "completions": [".decl Has_title(Song:symbol, Title:symbol)\nHas_title(\"Van Morrison's most played song\", \"Brown Eyed Girl\").\n.decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"minority of women worldwide\", \"female\").\n.decl Answer()\nAnswer() :- Has_title(\"Van Morrison's most played song\", title), Has_gender(\"minority of women worldwide\", gender), title = \"Brown Eyed Girl\", gender = \"female\".\n.output Answer\n\n"]}
{"id": 986, "answer": false, "completion": ".decl Rival_gang(Gang1:symbol, Gang2:symbol)\nRival_gang(\"Crips\", \"Bloods\").\n.decl Member_of(Person:symbol, Gang:symbol)\nMember_of(\"Snoop Dogg\", \"Crips\").\n.decl Answer()\nAnswer() :- Rival_gang(gang1, gang2), Member_of(\"Snoop Dogg\", gang1), Member_of(person, gang2), !Member_of(\"Snoop Dogg\", person).\n.output Answer\n\n", "completions": [".decl Rival_gang(Gang1:symbol, Gang2:symbol)\nRival_gang(\"Crips\", \"Bloods\").\n.decl Member_of(Person:symbol, Gang:symbol)\nMember_of(\"Snoop Dogg\", \"Crips\").\n.decl Answer()\nAnswer() :- Rival_gang(gang1, gang2), Member_of(\"Snoop Dogg\", gang1), Member_of(person, gang2), !Member_of(\"Snoop Dogg\", person).\n.output Answer\n\n"]}
{"id": 987, "answer": true, "completion": ".decl Has_n_words(Play:symbol, N_words:float)\nHas_n_words(\"Othello\", 50000).\nHas_n_words(\"Scheherazade\", 100000).\n.decl Answer()\nAnswer() :- Has_n_words(\"Othello\", n_words1), Has_n_words(\"Scheherazade\", n_words2), n_words1 < n_words2.\n.output Answer\n\n\n", "completions": [".decl Has_n_words(Play:symbol, N_words:float)\nHas_n_words(\"Othello\", 50000).\nHas_n_words(\"Scheherazade\", 100000).\n.decl Answer()\nAnswer() :- Has_n_words(\"Othello\", n_words1), Has_n_words(\"Scheherazade\", n_words2), n_words1 < n_words2.\n.output Answer\n\n\n"]}
{"id": 988, "answer": true, "completion": ".decl Has_difficulty(Animal:symbol, Difficulty:float)\nHas_difficulty(\"goldfish\", 2).\nHas_difficulty(\"isopods\", 1).\n.decl Answer()\nAnswer() :- Has_difficulty(\"goldfish\", difficulty1), Has_difficulty(\"isopods\", difficulty2), difficulty1 > difficulty2.\n.output Answer\n\n", "completions": [".decl Has_difficulty(Animal:symbol, Difficulty:float)\nHas_difficulty(\"goldfish\", 2).\nHas_difficulty(\"isopods\", 1).\n.decl Answer()\nAnswer() :- Has_difficulty(\"goldfish\", difficulty1), Has_difficulty(\"isopods\", difficulty2), difficulty1 > difficulty2.\n.output Answer\n\n"]}
{"id": 989, "answer": true, "completion": ".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Easy Rider\", 400000).\n.decl Has_box_office_revenue(Movie:symbol, Box_office_revenue:float)\nHas_box_office_revenue(\"Easy Rider\", 19000000).\n.decl Answer()\nAnswer() :- Has_budget(\"Easy Rider\", budget), Has_box_office_revenue(\"Easy Rider\", box_office_revenue), budget < box_office_revenue.\n.output Answer\n\n", "completions": [".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Easy Rider\", 400000).\n.decl Has_box_office_revenue(Movie:symbol, Box_office_revenue:float)\nHas_box_office_revenue(\"Easy Rider\", 19000000).\n.decl Answer()\nAnswer() :- Has_budget(\"Easy Rider\", budget), Has_box_office_revenue(\"Easy Rider\", box_office_revenue), budget < box_office_revenue.\n.output Answer\n\n"]}
{"id": 990, "answer": false, "completion": ".decl Rides(Person:symbol, Vehicle:symbol)\nRides(\"Katharine Hepburn\", \"airplane\").\n.decl Is_a(Vehicle:symbol, Vehicle_type:symbol)\nIs_a(\"airplane\", \"aircraft\").\nIs_a(\"AirTrain JFK\", \"train\").\n.decl Answer()\nAnswer() :- Rides(\"Katharine Hepburn\", vehicle), Is_a(vehicle, \"train\").\n.output Answer\n\n", "completions": [".decl Rides(Person:symbol, Vehicle:symbol)\nRides(\"Katharine Hepburn\", \"airplane\").\n.decl Is_a(Vehicle:symbol, Vehicle_type:symbol)\nIs_a(\"airplane\", \"aircraft\").\nIs_a(\"AirTrain JFK\", \"train\").\n.decl Answer()\nAnswer() :- Rides(\"Katharine Hepburn\", vehicle), Is_a(vehicle, \"train\").\n.output Answer\n\n"]}
{"id": 991, "answer": false, "completion": ".decl Has_salary(Person:symbol, Salary:float)\nHas_salary(\"Head Coach at NCSU\", 100000).\nHas_salary(\"high school head coach\", 50000).\n.decl Answer()\nAnswer() :- Has_salary(\"high school head coach\", salary1), Has_salary(\"Head Coach at NCSU\", salary2), salary1 >= salary2.\n.output Answer\n\n", "completions": [".decl Has_salary(Person:symbol, Salary:float)\nHas_salary(\"Head Coach at NCSU\", 100000).\nHas_salary(\"high school head coach\", 50000).\n.decl Answer()\nAnswer() :- Has_salary(\"high school head coach\", salary1), Has_salary(\"Head Coach at NCSU\", salary2), salary1 >= salary2.\n.output Answer\n\n"]}
{"id": 992, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Indian Ocean garbage patch\", 15).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"rotation of debris\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"rotation of debris\", n_years1), Last_n_years(\"Indian Ocean garbage patch\", n_years2), n_years1 > n_years2.\n.output Answer\n\n", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Indian Ocean garbage patch\", 15).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"rotation of debris\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"rotation of debris\", n_years1), Last_n_years(\"Indian Ocean garbage patch\", n_years2), n_years1 > n_years2.\n.output Answer\n\n"]}
{"id": 993, "answer": true, "completion": ".decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"children\", \"US Army\").\n.decl Answer()\nAnswer() :- Is_member_of(\"children\", \"US Army\").\n.output Answer\n\n", "completions": [".decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"children\", \"US Army\").\n.decl Answer()\nAnswer() :- Is_member_of(\"children\", \"US Army\").\n.output Answer\n\n"]}
{"id": 994, "answer": false, "completion": ".decl Has_app(Company:symbol, App:symbol)\nHas_app(\"T-Mobile\", \"T-Mobile Tuesdays\").\n.decl Has_customer(Company:symbol, Customer:symbol)\nHas_customer(\"T-Mobile\", \"T-Mobile\").\n.decl Answer()\nAnswer() :- Has_app(\"T-Mobile\", \"T-Mobile Tuesdays\"), !Has_customer(\"T-Mobile\", \"T-Mobile\").\n.output Answer\n\n", "completions": [".decl Has_app(Company:symbol, App:symbol)\nHas_app(\"T-Mobile\", \"T-Mobile Tuesdays\").\n.decl Has_customer(Company:symbol, Customer:symbol)\nHas_customer(\"T-Mobile\", \"T-Mobile\").\n.decl Answer()\nAnswer() :- Has_app(\"T-Mobile\", \"T-Mobile Tuesdays\"), !Has_customer(\"T-Mobile\", \"T-Mobile\").\n.output Answer\n\n"]}
{"id": 995, "answer": false, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Christmas Carol\", \"Silent Night\").\nHas_name(\"Christmas Carol\", \"Joy to the World\").\nHas_name(\"Christmas Carol\", \"O Come All Ye Faithful\").\nHas_name(\"Christmas Carol\", \"O Little Town of Bethlehem\").\nHas_name(\"Christmas Carol\", \"Hark! The Herald Angels Sing\").\nHas_name(\"Christmas Carol\", \"The First Noel\").\nHas_name(\"Christmas Carol\", \"Angels We Have Heard on High\").\nHas_name(\"Christmas Carol\", \"It Came Upon a Midnight Clear\").\nHas_name(\"Christmas Carol\", \"Away in a Manger\").\nHas_name(\"Christmas Carol\", \"We Three Kings\").\nHas_name(\"Christmas Carol\", \"O Holy Night\").\nHas_name(\"Christmas Carol\", \"God Rest Ye Merry Gentlemen\").\nHas_name(\"Christmas Carol\", \"Deck the Halls\").\nHas_name(\"Christmas Carol\", \"Jingle Bells\").\nHas_name(\"Christmas Carol\", \"The Twelve Days of Christmas\").\nHas_name(\"Christmas Carol\", \"We Wish You a Merry Christmas\").\nHas_name(\"Christmas Carol\", \"Good King Wenceslas\").\nHas_name(\"Christmas Carol\", \"O Come, O Come, Emmanuel\").\nHas_name(\"Christmas Carol\", \"What Child Is This?\").\nHas_name(\"Christmas Carol\", \"Auld Lang Syne\").\nHas_name(\"Christmas Carol\", \"I Saw Three Ships\").\nHas_name(\"Christmas Carol\", \"O Tannenbaum\").\nHas_name(\"Christmas Carol\", \"The Holly and the Ivy\").\nHas_name(\"Christmas Carol\", \"Up on the Housetop\").\nHas_name(\"Christmas Carol\", \"Ding Dong Merrily on High\").\nHas_name(\"Christmas Carol\", \"Angels from the Realms of Glory\").\nHas_name(\"Christmas Carol\", \"Good Christian Men, Rejoice\").\nHas_name(\"Christmas Carol\", \"O Come, Little Children\").\nHas_name(\"Christmas Carol\", \"O Sanctissima\").\nHas_name(\"Christmas Carol\", \"The Coventry Carol\").\nHas_name(\"Christmas Carol\", \"The Friendly Beasts\").\nHas_name(\"Christmas Carol\", \"The Little Drummer Boy\").\nHas_name(\"Christmas Carol\", \"The Seven Joys of Mary\").\nHas_name(\"Christmas Carol\", \"The Wassail Song\").\nHas_name(\"Christmas Carol\", \"While Shepherds Watched Their Flocks\").\nHas_name(\"Christmas Carol\", \"Away in a Manger\").\nHas_name(\"Christmas Carol\", \"Bring a Torch, Jeanette, Isabella\").\nHas_name(\"Christmas Carol\", \"Carol of the Bells\").\nHas_name(\"Christmas Carol\", \"Coventry Carol\").\nHas_name(\"Christmas Carol\", \"Deck the Halls\").\nHas_name(\"Christmas Carol\", \"Ding Dong! Merrily on High\").\nHas_name(\"Christmas Carol\", \"God Rest Ye Merry, Gentlemen\").\nHas_name(\"Christmas Carol\", \"Good Christian Men, Rejoice\").\nHas_name(\"Christmas Carol\", \"Good King Wenceslas\").\nHas_name(\"Christmas Carol\", \"Hark! The Herald Angels Sing\").\nHas_name(\"Christmas Carol\", \"Here We Come A-Wassailing\").\nHas_name(\"Christmas Carol\", \"I Saw Three Ships\").\nHas_name(\"Christmas Carol\", \"In the Bleak Midwinter\").\nHas_name(\"Christmas Carol\", \"It Came Upon the Midnight Clear\").\nHas_name(\"Christmas Carol\", \"Jingle Bells\").\nHas_name(\"Christmas Carol\", \"Joy to the", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Christmas Carol\", \"Silent Night\").\nHas_name(\"Christmas Carol\", \"Joy to the World\").\nHas_name(\"Christmas Carol\", \"O Come All Ye Faithful\").\nHas_name(\"Christmas Carol\", \"O Little Town of Bethlehem\").\nHas_name(\"Christmas Carol\", \"Hark! The Herald Angels Sing\").\nHas_name(\"Christmas Carol\", \"The First Noel\").\nHas_name(\"Christmas Carol\", \"Angels We Have Heard on High\").\nHas_name(\"Christmas Carol\", \"It Came Upon a Midnight Clear\").\nHas_name(\"Christmas Carol\", \"Away in a Manger\").\nHas_name(\"Christmas Carol\", \"We Three Kings\").\nHas_name(\"Christmas Carol\", \"O Holy Night\").\nHas_name(\"Christmas Carol\", \"God Rest Ye Merry Gentlemen\").\nHas_name(\"Christmas Carol\", \"Deck the Halls\").\nHas_name(\"Christmas Carol\", \"Jingle Bells\").\nHas_name(\"Christmas Carol\", \"The Twelve Days of Christmas\").\nHas_name(\"Christmas Carol\", \"We Wish You a Merry Christmas\").\nHas_name(\"Christmas Carol\", \"Good King Wenceslas\").\nHas_name(\"Christmas Carol\", \"O Come, O Come, Emmanuel\").\nHas_name(\"Christmas Carol\", \"What Child Is This?\").\nHas_name(\"Christmas Carol\", \"Auld Lang Syne\").\nHas_name(\"Christmas Carol\", \"I Saw Three Ships\").\nHas_name(\"Christmas Carol\", \"O Tannenbaum\").\nHas_name(\"Christmas Carol\", \"The Holly and the Ivy\").\nHas_name(\"Christmas Carol\", \"Up on the Housetop\").\nHas_name(\"Christmas Carol\", \"Ding Dong Merrily on High\").\nHas_name(\"Christmas Carol\", \"Angels from the Realms of Glory\").\nHas_name(\"Christmas Carol\", \"Good Christian Men, Rejoice\").\nHas_name(\"Christmas Carol\", \"O Come, Little Children\").\nHas_name(\"Christmas Carol\", \"O Sanctissima\").\nHas_name(\"Christmas Carol\", \"The Coventry Carol\").\nHas_name(\"Christmas Carol\", \"The Friendly Beasts\").\nHas_name(\"Christmas Carol\", \"The Little Drummer Boy\").\nHas_name(\"Christmas Carol\", \"The Seven Joys of Mary\").\nHas_name(\"Christmas Carol\", \"The Wassail Song\").\nHas_name(\"Christmas Carol\", \"While Shepherds Watched Their Flocks\").\nHas_name(\"Christmas Carol\", \"Away in a Manger\").\nHas_name(\"Christmas Carol\", \"Bring a Torch, Jeanette, Isabella\").\nHas_name(\"Christmas Carol\", \"Carol of the Bells\").\nHas_name(\"Christmas Carol\", \"Coventry Carol\").\nHas_name(\"Christmas Carol\", \"Deck the Halls\").\nHas_name(\"Christmas Carol\", \"Ding Dong! Merrily on High\").\nHas_name(\"Christmas Carol\", \"God Rest Ye Merry, Gentlemen\").\nHas_name(\"Christmas Carol\", \"Good Christian Men, Rejoice\").\nHas_name(\"Christmas Carol\", \"Good King Wenceslas\").\nHas_name(\"Christmas Carol\", \"Hark! The Herald Angels Sing\").\nHas_name(\"Christmas Carol\", \"Here We Come A-Wassailing\").\nHas_name(\"Christmas Carol\", \"I Saw Three Ships\").\nHas_name(\"Christmas Carol\", \"In the Bleak Midwinter\").\nHas_name(\"Christmas Carol\", \"It Came Upon the Midnight Clear\").\nHas_name(\"Christmas Carol\", \"Jingle Bells\").\nHas_name(\"Christmas Carol\", \"Joy to the"]}
{"id": 996, "answer": true, "completion": ".decl Supports(Person:symbol, Action:symbol)\nSupports(\"George Fox\", \"stoning\").\n.decl Answer()\nAnswer() :- Supports(\"George Fox\", \"stoning\").\n.output Answer\n\n", "completions": [".decl Supports(Person:symbol, Action:symbol)\nSupports(\"George Fox\", \"stoning\").\n.decl Answer()\nAnswer() :- Supports(\"George Fox\", \"stoning\").\n.output Answer\n\n"]}
{"id": 997, "answer": true, "completion": ".decl Is_inappropriate(Lullaby:symbol)\nIs_inappropriate(\"Love Song\").\n.decl Is_from(Lullaby:symbol, Date:symbol)\nIs_from(\"Love Song\", \"November 11, 2000\").\n.decl Answer()\nAnswer() :- Is_inappropriate(lullaby), Is_from(lullaby, \"November 11, 2000\").\n.output Answer\n\n", "completions": [".decl Is_inappropriate(Lullaby:symbol)\nIs_inappropriate(\"Love Song\").\n.decl Is_from(Lullaby:symbol, Date:symbol)\nIs_from(\"Love Song\", \"November 11, 2000\").\n.decl Answer()\nAnswer() :- Is_inappropriate(lullaby), Is_from(lullaby, \"November 11, 2000\").\n.output Answer\n\n"]}
{"id": 998, "answer": false, "completion": ".decl Is_related_to(Person_A:symbol, Person_B:symbol)\nIs_related_to(\"Lionel Richie\", \"Nicole Richie\").\nIs_related_to(\"Nicole Richie\", \"Sofia Richie\").\nIs_related_to(\"Sofia Richie\", \"Lionel Richie\").\nIs_related_to(\"Sheila E\", \"Nicole Richie\").\nIs_related_to(\"Sheila E\", \"Sofia Richie\").\nIs_related_to(\"Sheila E\", \"Lionel Richie\").\n.decl Answer()\nAnswer() :- Is_related_to(\"Lionel Richie\", \"Sheila E\").\nAnswer() :- Is_related_to(\"Lionel Richie\", person2), Is_related_to(person2, \"Sheila E\").\n.output Answer\n\n", "completions": [".decl Is_related_to(Person_A:symbol, Person_B:symbol)\nIs_related_to(\"Lionel Richie\", \"Nicole Richie\").\nIs_related_to(\"Nicole Richie\", \"Sofia Richie\").\nIs_related_to(\"Sofia Richie\", \"Lionel Richie\").\nIs_related_to(\"Sheila E\", \"Nicole Richie\").\nIs_related_to(\"Sheila E\", \"Sofia Richie\").\nIs_related_to(\"Sheila E\", \"Lionel Richie\").\n.decl Answer()\nAnswer() :- Is_related_to(\"Lionel Richie\", \"Sheila E\").\nAnswer() :- Is_related_to(\"Lionel Richie\", person2), Is_related_to(person2, \"Sheila E\").\n.output Answer\n\n"]}
{"id": 999, "answer": false, "completion": ".decl Has_air_force(Country:symbol, Air_force:symbol)\nHas_air_force(\"United Kingdom\", \"Royal Air Force\").\n.decl Answer()\nAnswer() :- Has_air_force(\"United Kingdom\", \"British Airways\").\n.output Answer\n\n", "completions": [".decl Has_air_force(Country:symbol, Air_force:symbol)\nHas_air_force(\"United Kingdom\", \"Royal Air Force\").\n.decl Answer()\nAnswer() :- Has_air_force(\"United Kingdom\", \"British Airways\").\n.output Answer\n\n"]}
{"id": 1000, "answer": false, "completion": ".decl Has_n_fans(Movie:symbol, N_fans:float)\nHas_n_fans(\"Star Wars\", 100).\n.decl Has_n_fans(Movie:symbol, N_fans:float)\nHas_n_fans(\"Star Trek\", 100).\n.decl Answer()\nAnswer() :- Has_n_fans(\"Star Wars\", n_fans1), Has_n_fans(\"Star Trek\", n_fans2), n_fans1 > n_fans2.\n.output Answer\n\n", "completions": [".decl Has_n_fans(Movie:symbol, N_fans:float)\nHas_n_fans(\"Star Wars\", 100).\n.decl Has_n_fans(Movie:symbol, N_fans:float)\nHas_n_fans(\"Star Trek\", 100).\n.decl Answer()\nAnswer() :- Has_n_fans(\"Star Wars\", n_fans1), Has_n_fans(\"Star Trek\", n_fans2), n_fans1 > n_fans2.\n.output Answer\n\n"]}
{"id": 1001, "answer": true, "completion": ".decl Uses(Person:symbol, Software:symbol)\nUses(\"someone\", \"Chrome OS\").\n.decl Requires(Software:symbol, Hardware:symbol)\nRequires(\"Chrome OS\", \"internet connection\").\n.decl Answer()\nAnswer() :- Uses(\"someone\", software), Requires(software, \"internet connection\").\n.output Answer\n\n", "completions": [".decl Uses(Person:symbol, Software:symbol)\nUses(\"someone\", \"Chrome OS\").\n.decl Requires(Software:symbol, Hardware:symbol)\nRequires(\"Chrome OS\", \"internet connection\").\n.decl Answer()\nAnswer() :- Uses(\"someone\", software), Requires(software, \"internet connection\").\n.output Answer\n\n"]}
{"id": 1002, "answer": false, "completion": ".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Harry Potter\", 125).\nHas_budget(\"The Matrix\", 63).\n.decl Has_gross(Movie:symbol, Gross:float)\nHas_gross(\"Harry Potter\", 974).\nHas_gross(\"The Matrix\", 463).\n.decl Answer()\nAnswer() :- Has_budget(\"Harry Potter\", budget1), Has_budget(\"The Matrix\", budget2), Has_gross(\"Harry Potter\", gross1), Has_gross(\"The Matrix\", gross2), budget1 < budget2, gross1 > gross2.\n.output Answer\n\n", "completions": [".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Harry Potter\", 125).\nHas_budget(\"The Matrix\", 63).\n.decl Has_gross(Movie:symbol, Gross:float)\nHas_gross(\"Harry Potter\", 974).\nHas_gross(\"The Matrix\", 463).\n.decl Answer()\nAnswer() :- Has_budget(\"Harry Potter\", budget1), Has_budget(\"The Matrix\", budget2), Has_gross(\"Harry Potter\", gross1), Has_gross(\"The Matrix\", gross2), budget1 < budget2, gross1 > gross2.\n.output Answer\n\n"]}
{"id": 1003, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"anybody\", \"retail\").\n.decl Answer()\nAnswer() :- Has_job(\"anybody\", \"retail\").\n.output Answer\n\n", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"anybody\", \"retail\").\n.decl Answer()\nAnswer() :- Has_job(\"anybody\", \"retail\").\n.output Answer\n\n"]}
{"id": 1004, "answer": false, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"paleo dieter\", \"meat\").\nEats(\"paleo dieter\", \"fish\").\nEats(\"paleo dieter\", \"fruits\").\nEats(\"paleo dieter\", \"vegetables\").\nEats(\"paleo dieter\", \"nuts\").\nEats(\"paleo dieter\", \"seeds\").\nEats(\"paleo dieter\", \"eggs\").\nEats(\"paleo dieter\", \"herbs\").\nEats(\"paleo dieter\", \"spices\").\nEats(\"paleo dieter\", \"healthy fats\").\nEats(\"paleo dieter\", \"water\").\nEats(\"paleo dieter\", \"coffee\").\nEats(\"paleo dieter\", \"tea\").\n.decl Colors(Food:symbol, Color:symbol)\nColors(\"food coloring\", \"green\").\n.decl Answer()\nAnswer() :- Eats(\"paleo dieter\", food), Colors(food, \"green\").\n.output Answer\n\n", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"paleo dieter\", \"meat\").\nEats(\"paleo dieter\", \"fish\").\nEats(\"paleo dieter\", \"fruits\").\nEats(\"paleo dieter\", \"vegetables\").\nEats(\"paleo dieter\", \"nuts\").\nEats(\"paleo dieter\", \"seeds\").\nEats(\"paleo dieter\", \"eggs\").\nEats(\"paleo dieter\", \"herbs\").\nEats(\"paleo dieter\", \"spices\").\nEats(\"paleo dieter\", \"healthy fats\").\nEats(\"paleo dieter\", \"water\").\nEats(\"paleo dieter\", \"coffee\").\nEats(\"paleo dieter\", \"tea\").\n.decl Colors(Food:symbol, Color:symbol)\nColors(\"food coloring\", \"green\").\n.decl Answer()\nAnswer() :- Eats(\"paleo dieter\", food), Colors(food, \"green\").\n.output Answer\n\n"]}
{"id": 1005, "answer": false, "completion": ".decl Has_flag(Country:symbol, Flag:symbol)\nHas_flag(\"Albania\", \"double triangle flag\").\nHas_flag(\"Albania\", \"NATO\").\n.decl Answer()\nAnswer() :- Has_flag(country, \"double triangle flag\"), !Has_flag(country, \"NATO\").\n.output Answer\n\n", "completions": [".decl Has_flag(Country:symbol, Flag:symbol)\nHas_flag(\"Albania\", \"double triangle flag\").\nHas_flag(\"Albania\", \"NATO\").\n.decl Answer()\nAnswer() :- Has_flag(country, \"double triangle flag\"), !Has_flag(country, \"NATO\").\n.output Answer\n\n"]}
{"id": 1006, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"inauguration of Donald Trump\", \"2017\").\nHappens_in_time(\"Saddam Hussein's death\", \"2006\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"inauguration of Donald Trump\", time1), Happens_in_time(\"Saddam Hussein's death\", time2), time1 < time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"inauguration of Donald Trump\", \"2017\").\nHappens_in_time(\"Saddam Hussein's death\", \"2006\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"inauguration of Donald Trump\", time1), Happens_in_time(\"Saddam Hussein's death\", time2), time1 < time2.\n.output Answer\n\n"]}
{"id": 1007, "answer": false, "completion": ".decl Has_organ(Person:symbol, Organ:symbol)\nHas_organ(\"Alan Rickman\", \"lung\").\nHas_organ(\"Alan Rickman\", \"heart\").\nHas_organ(\"Alan Rickman\", \"liver\").\n.decl Has_function(Organ:symbol, Function:symbol)\nHas_function(\"lung\", \"breathing\").\nHas_function(\"heart\", \"pumping blood\").\nHas_function(\"liver\", \"detoxification\").\n.decl Answer()\nAnswer() :- Has_organ(\"Alan Rickman\", organ), Has_function(organ, function), !Has_function(organ, function).\n.output Answer\n\n", "completions": [".decl Has_organ(Person:symbol, Organ:symbol)\nHas_organ(\"Alan Rickman\", \"lung\").\nHas_organ(\"Alan Rickman\", \"heart\").\nHas_organ(\"Alan Rickman\", \"liver\").\n.decl Has_function(Organ:symbol, Function:symbol)\nHas_function(\"lung\", \"breathing\").\nHas_function(\"heart\", \"pumping blood\").\nHas_function(\"liver\", \"detoxification\").\n.decl Answer()\nAnswer() :- Has_organ(\"Alan Rickman\", organ), Has_function(organ, function), !Has_function(organ, function).\n.output Answer\n\n"]}
{"id": 1008, "answer": false, "completion": ".decl Treats_subjects_ethically(University:symbol, Year:float)\nTreats_subjects_ethically(\"Johns Hopkins University\", 1876).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1877).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1878).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1879).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1880).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1881).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1882).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1883).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1884).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1885).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1886).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1887).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1888).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1889).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1890).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1891).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1892).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1893).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1894).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1895).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1896).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1897).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1898).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1899).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1900).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1901).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1902).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1903).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1904).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1905).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1906).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1907).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1908).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1909).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1910).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1911).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1912).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1913).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1914).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1915).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1916).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1917).\nTreats_subjects_ethically", "completions": [".decl Treats_subjects_ethically(University:symbol, Year:float)\nTreats_subjects_ethically(\"Johns Hopkins University\", 1876).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1877).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1878).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1879).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1880).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1881).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1882).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1883).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1884).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1885).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1886).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1887).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1888).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1889).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1890).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1891).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1892).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1893).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1894).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1895).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1896).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1897).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1898).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1899).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1900).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1901).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1902).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1903).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1904).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1905).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1906).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1907).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1908).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1909).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1910).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1911).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1912).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1913).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1914).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1915).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1916).\nTreats_subjects_ethically(\"Johns Hopkins University\", 1917).\nTreats_subjects_ethically"]}
{"id": 1009, "answer": true, "completion": ".decl Has_entrance_difficulty(Organization:symbol, Difficulty:float)\nHas_entrance_difficulty(\"University of Pittsburgh\", 1).\nHas_entrance_difficulty(\"FBI\", 2).\n.decl Answer()\nAnswer() :- Has_entrance_difficulty(\"University of Pittsburgh\", difficulty1), Has_entrance_difficulty(\"FBI\", difficulty2), difficulty1 < difficulty2.\n.output Answer\n\n", "completions": [".decl Has_entrance_difficulty(Organization:symbol, Difficulty:float)\nHas_entrance_difficulty(\"University of Pittsburgh\", 1).\nHas_entrance_difficulty(\"FBI\", 2).\n.decl Answer()\nAnswer() :- Has_entrance_difficulty(\"University of Pittsburgh\", difficulty1), Has_entrance_difficulty(\"FBI\", difficulty2), difficulty1 < difficulty2.\n.output Answer\n\n"]}
{"id": 1010, "answer": false, "completion": ".decl Member_of(Person:symbol, Group:symbol)\nMember_of(\"Aristotle\", \"Academy\").\nMember_of(\"Aristotle\", \"Lyceum\").\nMember_of(\"Aristotle\", \"Peripatetic school\").\nMember_of(\"Aristotle\", \"Platonic Academy\").\nMember_of(\"Aristotle\", \"Stagira\").\nMember_of(\"Aristotle\", \"Stagirite\").\nMember_of(\"Aristotle\", \"Western philosophy\").\nMember_of(\"Aristotle\", \"ancient Greek philosophy\").\nMember_of(\"Aristotle\", \"ancient Greek science\").\nMember_of(\"Aristotle\", \"ancient Greek scientists\").\nMember_of(\"Aristotle\", \"ancient Greek writers\").\nMember_of(\"Aristotle\", \"ancient Greek-language writers\").\nMember_of(\"Aristotle\", \"ancient Macedonians\").\nMember_of(\"Aristotle\", \"ancient Macedonians in science\").\nMember_of(\"Aristotle\", \"ancient Macedonians in technology\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the arts\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the humanities\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the sciences\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the social sciences\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art and music\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art and music and religion\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art and music and religion and sports\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art and music and religion and sports and warfare\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art and music and religion and sports and warfare and business\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art and music and religion and sports and warfare and business and politics\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy", "completions": [".decl Member_of(Person:symbol, Group:symbol)\nMember_of(\"Aristotle\", \"Academy\").\nMember_of(\"Aristotle\", \"Lyceum\").\nMember_of(\"Aristotle\", \"Peripatetic school\").\nMember_of(\"Aristotle\", \"Platonic Academy\").\nMember_of(\"Aristotle\", \"Stagira\").\nMember_of(\"Aristotle\", \"Stagirite\").\nMember_of(\"Aristotle\", \"Western philosophy\").\nMember_of(\"Aristotle\", \"ancient Greek philosophy\").\nMember_of(\"Aristotle\", \"ancient Greek science\").\nMember_of(\"Aristotle\", \"ancient Greek scientists\").\nMember_of(\"Aristotle\", \"ancient Greek writers\").\nMember_of(\"Aristotle\", \"ancient Greek-language writers\").\nMember_of(\"Aristotle\", \"ancient Macedonians\").\nMember_of(\"Aristotle\", \"ancient Macedonians in science\").\nMember_of(\"Aristotle\", \"ancient Macedonians in technology\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the arts\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the humanities\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the sciences\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the social sciences\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art and music\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art and music and religion\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art and music and religion and sports\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art and music and religion and sports and warfare\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art and music and religion and sports and warfare and business\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy and literature and art and music and religion and sports and warfare and business and politics\").\nMember_of(\"Aristotle\", \"ancient Macedonians in the technology and engineering and science and mathematics and medicine and philosophy"]}
{"id": 1011, "answer": true, "completion": ".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"someone\", \"Uberlandia\").\n.decl Has_employee(Company:symbol, Person:symbol)\nHas_employee(\"Mitsubishi\", \"someone\").\n.decl Answer()\nAnswer() :- Lives_in(\"someone\", \"Uberlandia\"), Has_employee(\"Mitsubishi\", \"someone\").\n.output Answer\n\n", "completions": [".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"someone\", \"Uberlandia\").\n.decl Has_employee(Company:symbol, Person:symbol)\nHas_employee(\"Mitsubishi\", \"someone\").\n.decl Answer()\nAnswer() :- Lives_in(\"someone\", \"Uberlandia\"), Has_employee(\"Mitsubishi\", \"someone\").\n.output Answer\n\n"]}
{"id": 1012, "answer": true, "completion": ".decl Has_fur_color(Animal:symbol, Fur_color:symbol)\nHas_fur_color(\"wolverine\", \"brown\").\nHas_fur_color(\"lynx\", \"brown\").\n.decl Answer()\nAnswer() :- Has_fur_color(\"wolverine\", fur_color1), Has_fur_color(\"lynx\", fur_color2), fur_color1 = fur_color2.\n.output Answer\n\n", "completions": [".decl Has_fur_color(Animal:symbol, Fur_color:symbol)\nHas_fur_color(\"wolverine\", \"brown\").\nHas_fur_color(\"lynx\", \"brown\").\n.decl Answer()\nAnswer() :- Has_fur_color(\"wolverine\", fur_color1), Has_fur_color(\"lynx\", fur_color2), fur_color1 = fur_color2.\n.output Answer\n\n"]}
{"id": 1013, "answer": false, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Amtrak's Acela Express\", 150).\nHas_speed(\"sound barrier\", 340).\n.decl Answer()\nAnswer() :- Has_speed(\"Amtrak's Acela Express\", speed1), Has_speed(\"sound barrier\", speed2), speed1 > speed2.\n.output Answer\n\n", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Amtrak's Acela Express\", 150).\nHas_speed(\"sound barrier\", 340).\n.decl Answer()\nAnswer() :- Has_speed(\"Amtrak's Acela Express\", speed1), Has_speed(\"sound barrier\", speed2), speed1 > speed2.\n.output Answer\n\n"]}
{"id": 1014, "answer": false, "completion": ".decl Transmitted_by(Disease:symbol, Transmission_method:symbol)\nTransmitted_by(\"HIV\", \"blood\").\nTransmitted_by(\"HIV\", \"semen\").\nTransmitted_by(\"HIV\", \"vaginal fluid\").\nTransmitted_by(\"HIV\", \"breast milk\").\n.decl Answer()\nAnswer() :- Transmitted_by(\"HIV\", \"silverware\").\n.output Answer\n\n", "completions": [".decl Transmitted_by(Disease:symbol, Transmission_method:symbol)\nTransmitted_by(\"HIV\", \"blood\").\nTransmitted_by(\"HIV\", \"semen\").\nTransmitted_by(\"HIV\", \"vaginal fluid\").\nTransmitted_by(\"HIV\", \"breast milk\").\n.decl Answer()\nAnswer() :- Transmitted_by(\"HIV\", \"silverware\").\n.output Answer\n\n"]}
{"id": 1015, "answer": false, "completion": ".decl Has_worms(Animal:symbol, Worm:symbol)\nHas_worms(\"dog\", \"roundworm\").\nHas_worms(\"dog\", \"hookworm\").\nHas_worms(\"dog\", \"tapeworm\").\n.decl Answer()\nAnswer() :- Has_worms(\"dog\", worm), Has_worms(\"strawberry\", worm).\n.output Answer\n\n", "completions": [".decl Has_worms(Animal:symbol, Worm:symbol)\nHas_worms(\"dog\", \"roundworm\").\nHas_worms(\"dog\", \"hookworm\").\nHas_worms(\"dog\", \"tapeworm\").\n.decl Answer()\nAnswer() :- Has_worms(\"dog\", worm), Has_worms(\"strawberry\", worm).\n.output Answer\n\n"]}
{"id": 1016, "answer": true, "completion": ".decl Has_smell(Object:symbol, Smell:symbol)\nHas_smell(\"Durian fruit\", \"delightful\").\n.decl Answer()\nAnswer() :- Has_smell(\"Durian fruit\", smell), smell = \"delightful\".\n.output Answer\n\n", "completions": [".decl Has_smell(Object:symbol, Smell:symbol)\nHas_smell(\"Durian fruit\", \"delightful\").\n.decl Answer()\nAnswer() :- Has_smell(\"Durian fruit\", smell), smell = \"delightful\".\n.output Answer\n\n"]}
{"id": 1017, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Gorillaz\", 4).\n.decl Has_n_members_seemingly(Group:symbol, N_members:float)\nHas_n_members_seemingly(\"Gorillaz\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Gorillaz\", n_members1), Has_n_members_seemingly(\"Gorillaz\", n_members2), n_members1 < n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Gorillaz\", 4).\n.decl Has_n_members_seemingly(Group:symbol, N_members:float)\nHas_n_members_seemingly(\"Gorillaz\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Gorillaz\", n_members1), Has_n_members_seemingly(\"Gorillaz\", n_members2), n_members1 < n_members2.\n.output Answer\n\n"]}
{"id": 1018, "answer": true, "completion": ".decl Has_amendment(Constitution:symbol, Amendment:symbol)\nHas_amendment(\"United States Constitution\", \"Eighth Amendment\").\n.decl Protects(Amendment:symbol, Freedom:symbol)\nProtects(\"Eighth Amendment\", \"freedom of speech\").\n.decl Answer()\nAnswer() :- Has_amendment(\"United States Constitution\", amendment), Protects(amendment, \"freedom of speech\").\n.output Answer\n\n", "completions": [".decl Has_amendment(Constitution:symbol, Amendment:symbol)\nHas_amendment(\"United States Constitution\", \"Eighth Amendment\").\n.decl Protects(Amendment:symbol, Freedom:symbol)\nProtects(\"Eighth Amendment\", \"freedom of speech\").\n.decl Answer()\nAnswer() :- Has_amendment(\"United States Constitution\", amendment), Protects(amendment, \"freedom of speech\").\n.output Answer\n\n"]}
{"id": 1019, "answer": false, "completion": ".decl Composed(Person:symbol, Song:symbol)\nComposed(\"Richard Wagner\", \"The Ride of the Valkyries\").\nComposed(\"Richard Wagner\", \"The Flying Dutchman\").\nComposed(\"Richard Wagner\", \"The Twilight of the Gods\").\nComposed(\"Richard Wagner\", \"The Valkyrie\").\nComposed(\"Richard Wagner\", \"The Mastersingers of Nuremberg\").\nComposed(\"Richard Wagner\", \"The Rhinegold\").\nComposed(\"Richard Wagner\", \"The Ring\").\nComposed(\"Richard Wagner\", \"The Ring of the Nibelung\").\nComposed(\"Richard Wagner\", \"The Ring Cycle\").\nComposed(\"Richard Wagner\", \"The Ring of the Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelung's Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungen Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungenlied\").\nComposed(\"Richard Wagner\", \"The Nibelungen\").\nComposed(\"Richard Wagner\", \"The Nibelung\").\nComposed(\"Richard Wagner\", \"The Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring Cycle\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelung\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungen\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs' Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs' Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs' Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs\").\nComposed(\"Richard Wagner\", \"", "completions": [".decl Composed(Person:symbol, Song:symbol)\nComposed(\"Richard Wagner\", \"The Ride of the Valkyries\").\nComposed(\"Richard Wagner\", \"The Flying Dutchman\").\nComposed(\"Richard Wagner\", \"The Twilight of the Gods\").\nComposed(\"Richard Wagner\", \"The Valkyrie\").\nComposed(\"Richard Wagner\", \"The Mastersingers of Nuremberg\").\nComposed(\"Richard Wagner\", \"The Rhinegold\").\nComposed(\"Richard Wagner\", \"The Ring\").\nComposed(\"Richard Wagner\", \"The Ring of the Nibelung\").\nComposed(\"Richard Wagner\", \"The Ring Cycle\").\nComposed(\"Richard Wagner\", \"The Ring of the Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelung's Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungen Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungenlied\").\nComposed(\"Richard Wagner\", \"The Nibelungen\").\nComposed(\"Richard Wagner\", \"The Nibelung\").\nComposed(\"Richard Wagner\", \"The Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring Cycle\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelung\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungen\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs' Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs' Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs' Ring\").\nComposed(\"Richard Wagner\", \"The Nibelungs' Ring of the Nibelungenlied Cycle of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs' Ring of the Nibelungs\").\nComposed(\"Richard Wagner\", \""]}
{"id": 1020, "answer": true, "completion": ".decl Has_passion(Person:symbol, Passion:symbol)\nHas_passion(\"Squidward Tentacles\", \"clarinet\").\nHas_passion(\"Alan Greenspan\", \"jazz\").\n.decl Answer()\nAnswer() :- Has_passion(\"Squidward Tentacles\", passion1), Has_passion(\"Alan Greenspan\", passion2), passion1 != passion2.\n.output Answer\n\n", "completions": [".decl Has_passion(Person:symbol, Passion:symbol)\nHas_passion(\"Squidward Tentacles\", \"clarinet\").\nHas_passion(\"Alan Greenspan\", \"jazz\").\n.decl Answer()\nAnswer() :- Has_passion(\"Squidward Tentacles\", passion1), Has_passion(\"Alan Greenspan\", passion2), passion1 != passion2.\n.output Answer\n\n"]}
{"id": 1021, "answer": true, "completion": ".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"Louvre's pyramid\", \"glass\").\n.decl Is_known_for(Object:symbol, Property:symbol)\nIs_known_for(\"glass\", \"unbreakable\").\n.decl Answer()\nAnswer() :- Is_made_of(\"Louvre's pyramid\", material), Is_known_for(material, \"unbreakable\").\n.output Answer\n\n", "completions": [".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"Louvre's pyramid\", \"glass\").\n.decl Is_known_for(Object:symbol, Property:symbol)\nIs_known_for(\"glass\", \"unbreakable\").\n.decl Answer()\nAnswer() :- Is_made_of(\"Louvre's pyramid\", material), Is_known_for(material, \"unbreakable\").\n.output Answer\n\n"]}
{"id": 1022, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Evander Holyfield\", \"pork products\").\n.decl Answer()\nAnswer() :- Eats(\"Evander Holyfield\", \"pork products\").\n.output Answer\n\n", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Evander Holyfield\", \"pork products\").\n.decl Answer()\nAnswer() :- Eats(\"Evander Holyfield\", \"pork products\").\n.output Answer\n\n"]}
{"id": 1023, "answer": true, "completion": ".decl Is_involved_in(Country:symbol, Conflict:symbol)\nIs_involved_in(\"England\", \"Arab-Israeli conflict\").\n.decl Answer()\nAnswer() :- Is_involved_in(\"England\", \"Arab-Israeli conflict\").\n.output Answer\n\n", "completions": [".decl Is_involved_in(Country:symbol, Conflict:symbol)\nIs_involved_in(\"England\", \"Arab-Israeli conflict\").\n.decl Answer()\nAnswer() :- Is_involved_in(\"England\", \"Arab-Israeli conflict\").\n.output Answer\n\n"]}
{"id": 1024, "answer": true, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"person suffering from Dyscalculia\", \"accountant\").\n.decl Is_difficult(Profession:symbol)\nIs_difficult(\"accountant\").\n.decl Answer()\nAnswer() :- Has_profession(\"person suffering from Dyscalculia\", profession), Is_difficult(profession).\n.output Answer\n\n", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"person suffering from Dyscalculia\", \"accountant\").\n.decl Is_difficult(Profession:symbol)\nIs_difficult(\"accountant\").\n.decl Answer()\nAnswer() :- Has_profession(\"person suffering from Dyscalculia\", profession), Is_difficult(profession).\n.output Answer\n\n"]}
{"id": 1025, "answer": true, "completion": ".decl Uses(Person:symbol, Object:symbol)\nUses(\"Donatello\", \"smartphone\").\n.decl Answer()\nAnswer() :- Uses(\"Donatello\", \"smartphone\").\n.output Answer\n\n", "completions": [".decl Uses(Person:symbol, Object:symbol)\nUses(\"Donatello\", \"smartphone\").\n.decl Answer()\nAnswer() :- Uses(\"Donatello\", \"smartphone\").\n.output Answer\n\n"]}
{"id": 1026, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmastime\", \"December\").\nHappens_in_time(\"groundhog day\", \"February\").\nHappens_in_time(\"some films\", \"December\").\nHappens_in_time(\"some films\", \"February\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmastime\", time1), Happens_in_time(\"some films\", time2), Happens_in_time(\"groundhog day\", time3), time1 = time2, time2 < time3.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmastime\", \"December\").\nHappens_in_time(\"groundhog day\", \"February\").\nHappens_in_time(\"some films\", \"December\").\nHappens_in_time(\"some films\", \"February\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmastime\", time1), Happens_in_time(\"some films\", time2), Happens_in_time(\"groundhog day\", time3), time1 = time2, time2 < time3.\n.output Answer\n\n"]}
{"id": 1027, "answer": false, "completion": ".decl Has_n_characters(Language:symbol, N_characters:float)\nHas_n_characters(\"kanji\", 2000).\nHas_n_characters(\"Roman alphabet\", 26).\n.decl Has_n_trees(Book:symbol, N_trees:float)\nHas_n_trees(\"book\", 1).\n.decl Answer()\nAnswer() :- Has_n_characters(\"kanji\", n_characters1), Has_n_characters(\"Roman alphabet\", n_characters2), Has_n_trees(\"book\", n_trees), n_characters1 < n_characters2, n_trees > 0.\n.output Answer\n\n", "completions": [".decl Has_n_characters(Language:symbol, N_characters:float)\nHas_n_characters(\"kanji\", 2000).\nHas_n_characters(\"Roman alphabet\", 26).\n.decl Has_n_trees(Book:symbol, N_trees:float)\nHas_n_trees(\"book\", 1).\n.decl Answer()\nAnswer() :- Has_n_characters(\"kanji\", n_characters1), Has_n_characters(\"Roman alphabet\", n_characters2), Has_n_trees(\"book\", n_trees), n_characters1 < n_characters2, n_trees > 0.\n.output Answer\n\n"]}
{"id": 1028, "answer": true, "completion": ".decl Has_age(Object:symbol, Age:float)\nHas_age(\"Egyptian pyramids\", 4500).\n.decl Has_lifespan(Object:symbol, Lifespan:float)\nHas_lifespan(\"Egyptian pyramids\", 5000).\n.decl Answer()\nAnswer() :- Has_age(\"Egyptian pyramids\", age), Has_lifespan(\"Egyptian pyramids\", lifespan), age < lifespan.\n.output Answer\n\n\n", "completions": [".decl Has_age(Object:symbol, Age:float)\nHas_age(\"Egyptian pyramids\", 4500).\n.decl Has_lifespan(Object:symbol, Lifespan:float)\nHas_lifespan(\"Egyptian pyramids\", 5000).\n.decl Answer()\nAnswer() :- Has_age(\"Egyptian pyramids\", age), Has_lifespan(\"Egyptian pyramids\", lifespan), age < lifespan.\n.output Answer\n\n\n"]}
{"id": 1029, "answer": true, "completion": ".decl Has_storage(Device:symbol, Storage:float)\nHas_storage(\"Samsung Galaxy A10e\", 32).\n.decl Has_size(File:symbol, Size:float)\nHas_size(\"HD episode of Game of Thrones\", 3).\n.decl Answer()\nAnswer() :- Has_storage(\"Samsung Galaxy A10e\", storage), Has_size(\"HD episode of Game of Thrones\", size), storage >= size.\n.output Answer\n\n", "completions": [".decl Has_storage(Device:symbol, Storage:float)\nHas_storage(\"Samsung Galaxy A10e\", 32).\n.decl Has_size(File:symbol, Size:float)\nHas_size(\"HD episode of Game of Thrones\", 3).\n.decl Answer()\nAnswer() :- Has_storage(\"Samsung Galaxy A10e\", storage), Has_size(\"HD episode of Game of Thrones\", size), storage >= size.\n.output Answer\n\n"]}
{"id": 1030, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Aerosmith\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Aerosmith\", n_members), n_members >= 2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Aerosmith\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Aerosmith\", n_members), n_members >= 2.\n.output Answer\n\n"]}
{"id": 1031, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"ostrich\", 2.5).\nHas_size(\"swallow nest\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"ostrich\", size1), Has_size(\"swallow nest\", size2), size1 < size2.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"ostrich\", 2.5).\nHas_size(\"swallow nest\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"ostrich\", size1), Has_size(\"swallow nest\", size2), size1 < size2.\n.output Answer\n\n"]}
{"id": 1032, "answer": true, "completion": ".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Soldier Field\", 61500).\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"giant squid\", 18).\n.decl Answer()\nAnswer() :- Has_capacity(\"Soldier Field\", capacity), Has_size(\"giant squid\", size), capacity >= size.\n.output Answer\n\n", "completions": [".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Soldier Field\", 61500).\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"giant squid\", 18).\n.decl Answer()\nAnswer() :- Has_capacity(\"Soldier Field\", capacity), Has_size(\"giant squid\", size), capacity >= size.\n.output Answer\n\n"]}
{"id": 1033, "answer": true, "completion": ".decl Has_n_pages(Document:symbol, N_pages:float)\nHas_n_pages(\"Constitution of the United States\", 4).\n.decl Has_n_words(Document:symbol, N_words:float)\nHas_n_words(\"Constitution of the United States\", 4500).\n.decl Has_n_letters(Document:symbol, N_letters:float)\nHas_n_letters(\"Constitution of the United States\", 27000).\n.decl Answer()\nAnswer() :- Has_n_pages(\"Constitution of the United States\", n_pages), Has_n_words(\"Constitution of the United States\", n_words), Has_n_letters(\"Constitution of the United States\", n_letters), n_pages * n_words * n_letters > 100000.\n.output Answer\n\n", "completions": [".decl Has_n_pages(Document:symbol, N_pages:float)\nHas_n_pages(\"Constitution of the United States\", 4).\n.decl Has_n_words(Document:symbol, N_words:float)\nHas_n_words(\"Constitution of the United States\", 4500).\n.decl Has_n_letters(Document:symbol, N_letters:float)\nHas_n_letters(\"Constitution of the United States\", 27000).\n.decl Answer()\nAnswer() :- Has_n_pages(\"Constitution of the United States\", n_pages), Has_n_words(\"Constitution of the United States\", n_words), Has_n_letters(\"Constitution of the United States\", n_letters), n_pages * n_words * n_letters > 100000.\n.output Answer\n\n"]}
{"id": 1034, "answer": true, "completion": ".decl Has_body_part(Animal:symbol, Body_part:symbol)\nHas_body_part(\"minotaur\", \"tibia\").\n.decl Can_injure(Animal_A:symbol, Animal_B:symbol, Body_part:symbol)\nCan_injure(\"minotaur\", \"minotaur\", \"tibia\").\n.decl Answer()\nAnswer() :- Can_injure(animal1, animal2, \"tibia\"), Has_body_part(animal2, \"tibia\").\n.output Answer\n\n", "completions": [".decl Has_body_part(Animal:symbol, Body_part:symbol)\nHas_body_part(\"minotaur\", \"tibia\").\n.decl Can_injure(Animal_A:symbol, Animal_B:symbol, Body_part:symbol)\nCan_injure(\"minotaur\", \"minotaur\", \"tibia\").\n.decl Answer()\nAnswer() :- Can_injure(animal1, animal2, \"tibia\"), Has_body_part(animal2, \"tibia\").\n.output Answer\n\n"]}
{"id": 1035, "answer": true, "completion": ".decl Is_socially_acceptable(Action:symbol)\nIs_socially_acceptable(\"wearing an icon depicting crucifixion\").\n.decl Answer()\nAnswer() :- Is_socially_acceptable(\"wearing an icon depicting crucifixion\").\n.output Answer\n\n", "completions": [".decl Is_socially_acceptable(Action:symbol)\nIs_socially_acceptable(\"wearing an icon depicting crucifixion\").\n.decl Answer()\nAnswer() :- Is_socially_acceptable(\"wearing an icon depicting crucifixion\").\n.output Answer\n\n"]}
{"id": 1036, "answer": false, "completion": ".decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"worst crash in history\", \"March 3, 1974\").\nHappened_in_time(\"worst crash in history\", \"March 27, 1977\").\nHappened_in_time(\"worst crash in history\", \"August 12, 1985\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"July 17, 1996\").\nHappened_in_time(\"worst crash in history\", \"August 16, 1987\").\nHappened_in_time(\"worst crash in history\", \"August 31, 1986\").\nHappened_in_time(\"worst crash in history\", \"November 28, 1979\").\nHappened_in_time(\"worst crash in history\", \"August 2, 1985\").\nHappened_in_time(\"worst crash in history\", \"July 19, 1989\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").", "completions": [".decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"worst crash in history\", \"March 3, 1974\").\nHappened_in_time(\"worst crash in history\", \"March 27, 1977\").\nHappened_in_time(\"worst crash in history\", \"August 12, 1985\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"July 17, 1996\").\nHappened_in_time(\"worst crash in history\", \"August 16, 1987\").\nHappened_in_time(\"worst crash in history\", \"August 31, 1986\").\nHappened_in_time(\"worst crash in history\", \"November 28, 1979\").\nHappened_in_time(\"worst crash in history\", \"August 2, 1985\").\nHappened_in_time(\"worst crash in history\", \"July 19, 1989\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\").\nHappened_in_time(\"worst crash in history\", \"November 12, 1996\")."]}
{"id": 1037, "answer": false, "completion": ".decl Appears_in(Person:symbol, Movie:symbol)\nAppears_in(\"Clark Gable\", \"Gone with the Wind\").\nAppears_in(\"Clark Gable\", \"The Misfits\").\nAppears_in(\"Clark Gable\", \"It Happened One Night\").\nAppears_in(\"Clark Gable\", \"Mutiny on the Bounty\").\nAppears_in(\"Clark Gable\", \"Command Decision\").\nAppears_in(\"Clark Gable\", \"Teacher's Pet\").\nAppears_in(\"Clark Gable\", \"The Tall Men\").\nAppears_in(\"Clark Gable\", \"Soldier of Fortune\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\",", "completions": [".decl Appears_in(Person:symbol, Movie:symbol)\nAppears_in(\"Clark Gable\", \"Gone with the Wind\").\nAppears_in(\"Clark Gable\", \"The Misfits\").\nAppears_in(\"Clark Gable\", \"It Happened One Night\").\nAppears_in(\"Clark Gable\", \"Mutiny on the Bounty\").\nAppears_in(\"Clark Gable\", \"Command Decision\").\nAppears_in(\"Clark Gable\", \"Teacher's Pet\").\nAppears_in(\"Clark Gable\", \"The Tall Men\").\nAppears_in(\"Clark Gable\", \"Soldier of Fortune\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\","]}
{"id": 1038, "answer": true, "completion": ".decl Has_dietary_guidelines(Person:symbol, Dietary_guidelines:symbol)\nHas_dietary_guidelines(\"David Duchovny\", \"vegetarian\").\n.decl Is_food(Food:symbol, Food_type:symbol)\nIs_food(\"Atlantic Salmon\", \"fish\").\n.decl Answer()\nAnswer() :- Has_dietary_guidelines(\"David Duchovny\", \"vegetarian\"), Is_food(\"Atlantic Salmon\", \"fish\").\n.output Answer\n\n", "completions": [".decl Has_dietary_guidelines(Person:symbol, Dietary_guidelines:symbol)\nHas_dietary_guidelines(\"David Duchovny\", \"vegetarian\").\n.decl Is_food(Food:symbol, Food_type:symbol)\nIs_food(\"Atlantic Salmon\", \"fish\").\n.decl Answer()\nAnswer() :- Has_dietary_guidelines(\"David Duchovny\", \"vegetarian\"), Is_food(\"Atlantic Salmon\", \"fish\").\n.output Answer\n\n"]}
{"id": 1039, "answer": false, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"General Motors\", \"car\").\nSells(\"movie theater\", \"popcorn\").\n.decl Answer()\nAnswer() :- Sells(\"General Motors\", product), Sells(\"movie theater\", product).\n.output Answer\n\n", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"General Motors\", \"car\").\nSells(\"movie theater\", \"popcorn\").\n.decl Answer()\nAnswer() :- Sells(\"General Motors\", product), Sells(\"movie theater\", product).\n.output Answer\n\n"]}
{"id": 1040, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Halloween cruise\", \"October\").\nHappens_in_time(\"storm\", \"summer\").\nHappens_in_time(\"storm\", \"fall\").\nHappens_in_time(\"storm\", \"winter\").\nHappens_in_time(\"storm\", \"spring\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"October\", \"fall\").\nIn_season(\"June\", \"summer\").\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\nIn_season(\"September\", \"fall\").\nIn_season(\"November\", \"fall\").\nIn_season(\"December\", \"winter\").\nIn_season(\"January\", \"winter\").\nIn_season(\"February\", \"winter\").\nIn_season(\"March\", \"spring\").\nIn_season(\"April\", \"spring\").\nIn_season(\"May\", \"spring\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Halloween cruise\", month), Happens_in_time(\"storm\", season), In_season(month, season), season != \"summer\".\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Halloween cruise\", \"October\").\nHappens_in_time(\"storm\", \"summer\").\nHappens_in_time(\"storm\", \"fall\").\nHappens_in_time(\"storm\", \"winter\").\nHappens_in_time(\"storm\", \"spring\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"October\", \"fall\").\nIn_season(\"June\", \"summer\").\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\nIn_season(\"September\", \"fall\").\nIn_season(\"November\", \"fall\").\nIn_season(\"December\", \"winter\").\nIn_season(\"January\", \"winter\").\nIn_season(\"February\", \"winter\").\nIn_season(\"March\", \"spring\").\nIn_season(\"April\", \"spring\").\nIn_season(\"May\", \"spring\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Halloween cruise\", month), Happens_in_time(\"storm\", season), In_season(month, season), season != \"summer\".\n.output Answer\n\n"]}
{"id": 1041, "answer": true, "completion": ".decl Has_income(Person:symbol, Income:float)\nHas_income(\"Billie Eilish\", 1000000).\n.decl Costs(Object:symbol, Cost:float)\nCosts(\"Porsche\", 100000).\n.decl Answer()\nAnswer() :- Has_income(\"Billie Eilish\", income), Costs(\"Porsche\", cost), income >= cost.\n.output Answer\n\n", "completions": [".decl Has_income(Person:symbol, Income:float)\nHas_income(\"Billie Eilish\", 1000000).\n.decl Costs(Object:symbol, Cost:float)\nCosts(\"Porsche\", 100000).\n.decl Answer()\nAnswer() :- Has_income(\"Billie Eilish\", income), Costs(\"Porsche\", cost), income >= cost.\n.output Answer\n\n"]}
{"id": 1042, "answer": true, "completion": ".decl Recommends(Person:symbol, Treatment:symbol)\nRecommends(\"physician\", \"chemotherapy\").\nRecommends(\"physician\", \"radiation therapy\").\n.decl Answer()\nAnswer() :- Recommends(\"physician\", \"Reiki\").\nAnswer() :- Recommends(\"physician\", treatment), treatment != \"Reiki\".\n.output Answer\n\n", "completions": [".decl Recommends(Person:symbol, Treatment:symbol)\nRecommends(\"physician\", \"chemotherapy\").\nRecommends(\"physician\", \"radiation therapy\").\n.decl Answer()\nAnswer() :- Recommends(\"physician\", \"Reiki\").\nAnswer() :- Recommends(\"physician\", treatment), treatment != \"Reiki\".\n.output Answer\n\n"]}
{"id": 1043, "answer": true, "completion": ".decl Has_use(Object:symbol, Use:symbol)\nHas_use(\"common warthog\", \"scrimshaw\").\n.decl Answer()\nAnswer() :- Has_use(\"common warthog\", \"scrimshaw\").\n.output Answer\n\n", "completions": [".decl Has_use(Object:symbol, Use:symbol)\nHas_use(\"common warthog\", \"scrimshaw\").\n.decl Answer()\nAnswer() :- Has_use(\"common warthog\", \"scrimshaw\").\n.output Answer\n\n"]}
{"id": 1044, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"American\", \"English\").\n.decl Has_language(Place:symbol, Language:symbol)\nHas_language(\"Disneyland Paris\", \"French\").\n.decl Answer()\nAnswer() :- Speaks(\"American\", language1), Has_language(\"Disneyland Paris\", language2), language1 != language2.\n.output Answer\n\n", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"American\", \"English\").\n.decl Has_language(Place:symbol, Language:symbol)\nHas_language(\"Disneyland Paris\", \"French\").\n.decl Answer()\nAnswer() :- Speaks(\"American\", language1), Has_language(\"Disneyland Paris\", language2), language1 != language2.\n.output Answer\n\n"]}
{"id": 1045, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"giraffe\", 5.5).\nHas_height(\"Eiffel Tower\", 324).\n.decl Answer()\nAnswer() :- Has_height(\"giraffe\", height1), Has_height(\"Eiffel Tower\", height2), height1 < height2.\n.output Answer\n\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"giraffe\", 5.5).\nHas_height(\"Eiffel Tower\", 324).\n.decl Answer()\nAnswer() :- Has_height(\"giraffe\", height1), Has_height(\"Eiffel Tower\", height2), height1 < height2.\n.output Answer\n\n\n"]}
{"id": 1046, "answer": true, "completion": ".decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"diamond\", 10).\nHas_hardness(\"gladiator's weapon\", 5).\n.decl Answer()\nAnswer() :- Has_hardness(\"diamond\", hardness1), Has_hardness(\"gladiator's weapon\", hardness2), hardness1 > hardness2.\n.output Answer\n\n", "completions": [".decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"diamond\", 10).\nHas_hardness(\"gladiator's weapon\", 5).\n.decl Answer()\nAnswer() :- Has_hardness(\"diamond\", hardness1), Has_hardness(\"gladiator's weapon\", hardness2), hardness1 > hardness2.\n.output Answer\n\n"]}
{"id": 1047, "answer": true, "completion": ".decl Is_necessary_for(Object:symbol, Event:symbol)\nIs_necessary_for(\"curling iron\", \"curling\").\n.decl Answer()\nAnswer() :- Is_necessary_for(\"curling iron\", \"curling\").\n.output Answer\n\n", "completions": [".decl Is_necessary_for(Object:symbol, Event:symbol)\nIs_necessary_for(\"curling iron\", \"curling\").\n.decl Answer()\nAnswer() :- Is_necessary_for(\"curling iron\", \"curling\").\n.output Answer\n\n"]}
{"id": 1048, "answer": false, "completion": ".decl Has_side_effect(Drug:symbol, Side_effect:symbol)\nHas_side_effect(\"antidepressants\", \"photosensitivity\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"citrus fruits\", \"citric acid\").\n.decl Answer()\nAnswer() :- Has_side_effect(\"antidepressants\", side_effect), Has_ingredient(\"citrus fruits\", ingredient), side_effect = ingredient.\n.output Answer\n\n", "completions": [".decl Has_side_effect(Drug:symbol, Side_effect:symbol)\nHas_side_effect(\"antidepressants\", \"photosensitivity\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"citrus fruits\", \"citric acid\").\n.decl Answer()\nAnswer() :- Has_side_effect(\"antidepressants\", side_effect), Has_ingredient(\"citrus fruits\", ingredient), side_effect = ingredient.\n.output Answer\n\n"]}
{"id": 1049, "answer": true, "completion": ".decl Has_n_floors(Building:symbol, N_floors:float)\nHas_n_floors(\"hotel\", 13).\n.decl Has_n_rooms(Building:symbol, N_rooms:float)\nHas_n_rooms(\"hotel\", 13).\n.decl Answer()\nAnswer() :- Has_n_floors(\"hotel\", n_floors), Has_n_rooms(\"hotel\", n_rooms), n_floors = n_rooms.\n.output Answer\n\n", "completions": [".decl Has_n_floors(Building:symbol, N_floors:float)\nHas_n_floors(\"hotel\", 13).\n.decl Has_n_rooms(Building:symbol, N_rooms:float)\nHas_n_rooms(\"hotel\", 13).\n.decl Answer()\nAnswer() :- Has_n_floors(\"hotel\", n_floors), Has_n_rooms(\"hotel\", n_rooms), n_floors = n_rooms.\n.output Answer\n\n"]}
{"id": 1050, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Michael Phelps\", \"swimming\").\n.decl Needs_skill(Activity:symbol, Skill:symbol)\nNeeds_skill(\"pearl hunting\", \"swimming\").\n.decl Answer()\nAnswer() :- Has_skill(\"Michael Phelps\", skill), Needs_skill(\"pearl hunting\", skill).\n.output Answer\n\n", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Michael Phelps\", \"swimming\").\n.decl Needs_skill(Activity:symbol, Skill:symbol)\nNeeds_skill(\"pearl hunting\", \"swimming\").\n.decl Answer()\nAnswer() :- Has_skill(\"Michael Phelps\", skill), Needs_skill(\"pearl hunting\", skill).\n.output Answer\n\n"]}
{"id": 1051, "answer": false, "completion": ".decl Has_currency(Place:symbol, Currency:symbol)\nHas_currency(\"New York City\", \"US Dollars\").\n.decl Answer()\nAnswer() :- Has_currency(\"New York City\", \"Euros\").\n.output Answer\n\n", "completions": [".decl Has_currency(Place:symbol, Currency:symbol)\nHas_currency(\"New York City\", \"US Dollars\").\n.decl Answer()\nAnswer() :- Has_currency(\"New York City\", \"Euros\").\n.output Answer\n\n"]}
{"id": 1052, "answer": true, "completion": ".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"tibia\", \"leg\").\nIs_part_of(\"leg\", \"body\").\nIs_part_of(\"body\", \"hockey player\").\n.decl Is_necessary_for(Part:symbol, Whole:symbol)\nIs_necessary_for(\"body\", \"hockey player\").\nIs_necessary_for(\"hockey player\", \"hockey team\").\nIs_necessary_for(\"hockey team\", \"Stanley Cup\").\n.decl Answer()\nAnswer() :- Is_part_of(part, whole), Is_necessary_for(part, whole).\n.output Answer\n\n", "completions": [".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"tibia\", \"leg\").\nIs_part_of(\"leg\", \"body\").\nIs_part_of(\"body\", \"hockey player\").\n.decl Is_necessary_for(Part:symbol, Whole:symbol)\nIs_necessary_for(\"body\", \"hockey player\").\nIs_necessary_for(\"hockey player\", \"hockey team\").\nIs_necessary_for(\"hockey team\", \"Stanley Cup\").\n.decl Answer()\nAnswer() :- Is_part_of(part, whole), Is_necessary_for(part, whole).\n.output Answer\n\n"]}
{"id": 1053, "answer": false, "completion": ".decl Wrote(Person:symbol, Sketch:symbol)\nWrote(\"Abbott and Costello\", \"Who's on First\").\nWrote(\"Monty Python\", \"Dead Parrot\").\n.decl Answer()\nAnswer() :- Wrote(\"Monty Python\", \"Who's on First\").\n.output Answer\n\n", "completions": [".decl Wrote(Person:symbol, Sketch:symbol)\nWrote(\"Abbott and Costello\", \"Who's on First\").\nWrote(\"Monty Python\", \"Dead Parrot\").\n.decl Answer()\nAnswer() :- Wrote(\"Monty Python\", \"Who's on First\").\n.output Answer\n\n"]}
{"id": 1054, "answer": false, "completion": ".decl Is_a_letter(Letter:symbol)\nIs_a_letter(\"A\").\nIs_a_letter(\"B\").\nIs_a_letter(\"C\").\n.decl Is_an_Arabic_numeral(Numeral:symbol)\nIs_an_Arabic_numeral(\"1\").\nIs_an_Arabic_numeral(\"2\").\nIs_an_Arabic_numeral(\"3\").\n.decl Answer()\nAnswer() :- Is_a_letter(\"B\"), Is_an_Arabic_numeral(\"B\").\n.output Answer\n\n", "completions": [".decl Is_a_letter(Letter:symbol)\nIs_a_letter(\"A\").\nIs_a_letter(\"B\").\nIs_a_letter(\"C\").\n.decl Is_an_Arabic_numeral(Numeral:symbol)\nIs_an_Arabic_numeral(\"1\").\nIs_an_Arabic_numeral(\"2\").\nIs_an_Arabic_numeral(\"3\").\n.decl Answer()\nAnswer() :- Is_a_letter(\"B\"), Is_an_Arabic_numeral(\"B\").\n.output Answer\n\n"]}
{"id": 1055, "answer": false, "completion": ".decl Has_genre(Band:symbol, Genre:symbol)\nHas_genre(\"Marilyn Manson\", \"industrial metal\").\n.decl Has_vocal_range(Person:symbol, Vocal_range:symbol)\nHas_vocal_range(\"Brian Warner\", \"baritone\").\n.decl Answer()\nAnswer() :- Has_genre(\"Marilyn Manson\", \"soul music\").\nAnswer() :- Has_genre(band, \"soul music\"), Has_vocal_range(\"Brian Warner\", vocal_range), vocal_range = \"baritone\".\n.output Answer\n\n", "completions": [".decl Has_genre(Band:symbol, Genre:symbol)\nHas_genre(\"Marilyn Manson\", \"industrial metal\").\n.decl Has_vocal_range(Person:symbol, Vocal_range:symbol)\nHas_vocal_range(\"Brian Warner\", \"baritone\").\n.decl Answer()\nAnswer() :- Has_genre(\"Marilyn Manson\", \"soul music\").\nAnswer() :- Has_genre(band, \"soul music\"), Has_vocal_range(\"Brian Warner\", vocal_range), vocal_range = \"baritone\".\n.output Answer\n\n"]}
{"id": 1056, "answer": true, "completion": ".decl Teaches(Teacher:symbol, Book:symbol)\nTeaches(\"Hugh Jackman\", \"The Great Gatsby\").\n.decl Answer()\nAnswer() :- Teaches(\"Hugh Jackman\", \"The Great Gatsby\").\n.output Answer\n\n", "completions": [".decl Teaches(Teacher:symbol, Book:symbol)\nTeaches(\"Hugh Jackman\", \"The Great Gatsby\").\n.decl Answer()\nAnswer() :- Teaches(\"Hugh Jackman\", \"The Great Gatsby\").\n.output Answer\n\n"]}
{"id": 1057, "answer": true, "completion": ".decl Has_n_episodes(TV_show:symbol, N_episodes:float)\nHas_n_episodes(\"Young and the Restless\", 11000).\n.decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"leap year\", 366).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Young and the Restless\", n_episodes), Lasts_n_days(\"leap year\", n_days), n_episodes > n_days.\n.output Answer\n\n", "completions": [".decl Has_n_episodes(TV_show:symbol, N_episodes:float)\nHas_n_episodes(\"Young and the Restless\", 11000).\n.decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"leap year\", 366).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Young and the Restless\", n_episodes), Lasts_n_days(\"leap year\", n_days), n_episodes > n_days.\n.output Answer\n\n"]}
{"id": 1058, "answer": false, "completion": ".decl Believes_in(Person:symbol, Religion:symbol)\nBelieves_in(\"agnostic\", \"agnosticism\").\n.decl Is_leader_of(Person:symbol, Organization:symbol)\nIs_leader_of(\"pope\", \"Catholic Church\").\n.decl Answer()\nAnswer() :- Believes_in(person, \"agnosticism\"), Is_leader_of(person, \"Catholic Church\").\n.output Answer\n\n", "completions": [".decl Believes_in(Person:symbol, Religion:symbol)\nBelieves_in(\"agnostic\", \"agnosticism\").\n.decl Is_leader_of(Person:symbol, Organization:symbol)\nIs_leader_of(\"pope\", \"Catholic Church\").\n.decl Answer()\nAnswer() :- Believes_in(person, \"agnosticism\"), Is_leader_of(person, \"Catholic Church\").\n.output Answer\n\n"]}
{"id": 1059, "answer": true, "completion": ".decl Has_height(Animal:symbol, Height:float)\nHas_height(\"giraffe\", 5).\n.decl Has_height_limit(Facility:symbol, Height_limit:float)\nHas_height_limit(\"zoo\", 4).\n.decl Answer()\nAnswer() :- Has_height(\"giraffe\", height), Has_height_limit(\"zoo\", height_limit), height > height_limit.\n.output Answer\n\n", "completions": [".decl Has_height(Animal:symbol, Height:float)\nHas_height(\"giraffe\", 5).\n.decl Has_height_limit(Facility:symbol, Height_limit:float)\nHas_height_limit(\"zoo\", 4).\n.decl Answer()\nAnswer() :- Has_height(\"giraffe\", height), Has_height_limit(\"zoo\", height_limit), height > height_limit.\n.output Answer\n\n"]}
{"id": 1060, "answer": true, "completion": ".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"cerebral palsy\", \"paralysis\").\n.decl Has_symptom(Organism:symbol, Symptom:symbol)\nHas_symptom(\"slime mold\", \"paralysis\").\n.decl Answer()\nAnswer() :- Has_symptom(\"slime mold\", symptom), Causes(\"cerebral palsy\", symptom).\n.output Answer\n\n", "completions": [".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"cerebral palsy\", \"paralysis\").\n.decl Has_symptom(Organism:symbol, Symptom:symbol)\nHas_symptom(\"slime mold\", \"paralysis\").\n.decl Answer()\nAnswer() :- Has_symptom(\"slime mold\", symptom), Causes(\"cerebral palsy\", symptom).\n.output Answer\n\n"]}
{"id": 1061, "answer": true, "completion": ".decl Has_home_city(Person:symbol, City:symbol)\nHas_home_city(\"Leonardo da Vinci\", \"Florence\").\n.decl Has_contemporary_peers(Person:symbol, City:symbol)\nHas_contemporary_peers(\"Leonardo da Vinci\", \"Florence\").\n.decl Answer()\nAnswer() :- Has_home_city(\"Leonardo da Vinci\", city), Has_contemporary_peers(\"Leonardo da Vinci\", city).\n.output Answer\n\n", "completions": [".decl Has_home_city(Person:symbol, City:symbol)\nHas_home_city(\"Leonardo da Vinci\", \"Florence\").\n.decl Has_contemporary_peers(Person:symbol, City:symbol)\nHas_contemporary_peers(\"Leonardo da Vinci\", \"Florence\").\n.decl Answer()\nAnswer() :- Has_home_city(\"Leonardo da Vinci\", city), Has_contemporary_peers(\"Leonardo da Vinci\", city).\n.output Answer\n\n"]}
{"id": 1062, "answer": true, "completion": ".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"taking laxatives\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Causes(\"taking laxatives\", \"diarrhea\").\n.output Answer\n\n", "completions": [".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"taking laxatives\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Causes(\"taking laxatives\", \"diarrhea\").\n.output Answer\n\n"]}
{"id": 1063, "answer": true, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"ice\", 0).\nHas_value(\"money\", 1).\n.decl Answer()\nAnswer() :- Has_value(\"ice\", value1), Has_value(\"money\", value2), value1 < value2.\n.output Answer\n\n", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"ice\", 0).\nHas_value(\"money\", 1).\n.decl Answer()\nAnswer() :- Has_value(\"ice\", value1), Has_value(\"money\", value2), value1 < value2.\n.output Answer\n\n"]}
{"id": 1064, "answer": false, "completion": ".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Rabbi\", \"Hanukkah\").\n.decl Answer()\nAnswer() :- Celebrates(\"Rabbi\", \"Christmas\").\n.output Answer\n\n", "completions": [".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Rabbi\", \"Hanukkah\").\n.decl Answer()\nAnswer() :- Celebrates(\"Rabbi\", \"Christmas\").\n.output Answer\n\n"]}
{"id": 1065, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Rahul Dravid\", \"Hindi\").\nSpeaks(\"Rahul Dravid\", \"English\").\n.decl Is_spoken_in(Language:symbol, Place:symbol)\nIs_spoken_in(\"Hindi\", \"India\").\nIs_spoken_in(\"English\", \"India\").\nIs_spoken_in(\"English\", \"USA\").\nIs_spoken_in(\"English\", \"UK\").\nIs_spoken_in(\"English\", \"Australia\").\nIs_spoken_in(\"English\", \"Canada\").\nIs_spoken_in(\"English\", \"New Zealand\").\nIs_spoken_in(\"English\", \"South Africa\").\nIs_spoken_in(\"English\", \"Ireland\").\nIs_spoken_in(\"English\", \"Singapore\").\nIs_spoken_in(\"English\", \"Hong Kong\").\nIs_spoken_in(\"English\", \"Pakistan\").\nIs_spoken_in(\"English\", \"Bangladesh\").\nIs_spoken_in(\"English\", \"Nigeria\").\nIs_spoken_in(\"English\", \"Ghana\").\nIs_spoken_in(\"English\", \"Kenya\").\nIs_spoken_in(\"English\", \"Uganda\").\nIs_spoken_in(\"English\", \"Zambia\").\nIs_spoken_in(\"English\", \"Zimbabwe\").\nIs_spoken_in(\"English\", \"Malawi\").\nIs_spoken_in(\"English\", \"Mozambique\").\nIs_spoken_in(\"English\", \"Botswana\").\nIs_spoken_in(\"English\", \"Lesotho\").\nIs_spoken_in(\"English\", \"Swaziland\").\nIs_spoken_in(\"English\", \"Namibia\").\nIs_spoken_in(\"English\", \"Sierra Leone\").\nIs_spoken_in(\"English\", \"Liberia\").\nIs_spoken_in(\"English\", \"The Gambia\").\nIs_spoken_in(\"English\", \"Cameroon\").\nIs_spoken_in(\"English\", \"Jamaica\").\nIs_spoken_in(\"English\", \"Trinidad and Tobago\").\nIs_spoken_in(\"English\", \"Barbados\").\nIs_spoken_in(\"English\", \"Guyana\").\nIs_spoken_in(\"English\", \"Belize\").\nIs_spoken_in(\"English\", \"Grenada\").\nIs_spoken_in(\"English\", \"St. Vincent and the Grenadines\").\nIs_spoken_in(\"English\", \"St. Lucia\").\nIs_spoken_in(\"English\", \"Antigua and Barbuda\").\nIs_spoken_in(\"English\", \"Dominica\").\nIs_spoken_in(\"English\", \"St. Kitts and Nevis\").\nIs_spoken_in(\"English\", \"Bahamas\").\nIs_spoken_in(\"English\", \"Dominican Republic\").\nIs_spoken_in(\"English\", \"Haiti\").\nIs_spoken_in(\"English\", \"Philippines\").\nIs_spoken_in(\"English\", \"Papua New Guinea\").\nIs_spoken_in(\"English\", \"Solomon Islands\").\nIs_spoken_in(\"English\", \"Fiji\").\nIs_spoken_in(\"English\", \"Vanuatu\").\nIs_spoken_in(\"English\", \"Samoa\").\nIs_spoken_in(\"English\", \"Tonga\").\nIs_spoken_in(\"English\", \"Kiribati\").\nIs_spoken_in(\"English\", \"Marshall Islands\").\nIs_spoken_in(\"English\", \"Micronesia\").\nIs_spoken_in(\"", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Rahul Dravid\", \"Hindi\").\nSpeaks(\"Rahul Dravid\", \"English\").\n.decl Is_spoken_in(Language:symbol, Place:symbol)\nIs_spoken_in(\"Hindi\", \"India\").\nIs_spoken_in(\"English\", \"India\").\nIs_spoken_in(\"English\", \"USA\").\nIs_spoken_in(\"English\", \"UK\").\nIs_spoken_in(\"English\", \"Australia\").\nIs_spoken_in(\"English\", \"Canada\").\nIs_spoken_in(\"English\", \"New Zealand\").\nIs_spoken_in(\"English\", \"South Africa\").\nIs_spoken_in(\"English\", \"Ireland\").\nIs_spoken_in(\"English\", \"Singapore\").\nIs_spoken_in(\"English\", \"Hong Kong\").\nIs_spoken_in(\"English\", \"Pakistan\").\nIs_spoken_in(\"English\", \"Bangladesh\").\nIs_spoken_in(\"English\", \"Nigeria\").\nIs_spoken_in(\"English\", \"Ghana\").\nIs_spoken_in(\"English\", \"Kenya\").\nIs_spoken_in(\"English\", \"Uganda\").\nIs_spoken_in(\"English\", \"Zambia\").\nIs_spoken_in(\"English\", \"Zimbabwe\").\nIs_spoken_in(\"English\", \"Malawi\").\nIs_spoken_in(\"English\", \"Mozambique\").\nIs_spoken_in(\"English\", \"Botswana\").\nIs_spoken_in(\"English\", \"Lesotho\").\nIs_spoken_in(\"English\", \"Swaziland\").\nIs_spoken_in(\"English\", \"Namibia\").\nIs_spoken_in(\"English\", \"Sierra Leone\").\nIs_spoken_in(\"English\", \"Liberia\").\nIs_spoken_in(\"English\", \"The Gambia\").\nIs_spoken_in(\"English\", \"Cameroon\").\nIs_spoken_in(\"English\", \"Jamaica\").\nIs_spoken_in(\"English\", \"Trinidad and Tobago\").\nIs_spoken_in(\"English\", \"Barbados\").\nIs_spoken_in(\"English\", \"Guyana\").\nIs_spoken_in(\"English\", \"Belize\").\nIs_spoken_in(\"English\", \"Grenada\").\nIs_spoken_in(\"English\", \"St. Vincent and the Grenadines\").\nIs_spoken_in(\"English\", \"St. Lucia\").\nIs_spoken_in(\"English\", \"Antigua and Barbuda\").\nIs_spoken_in(\"English\", \"Dominica\").\nIs_spoken_in(\"English\", \"St. Kitts and Nevis\").\nIs_spoken_in(\"English\", \"Bahamas\").\nIs_spoken_in(\"English\", \"Dominican Republic\").\nIs_spoken_in(\"English\", \"Haiti\").\nIs_spoken_in(\"English\", \"Philippines\").\nIs_spoken_in(\"English\", \"Papua New Guinea\").\nIs_spoken_in(\"English\", \"Solomon Islands\").\nIs_spoken_in(\"English\", \"Fiji\").\nIs_spoken_in(\"English\", \"Vanuatu\").\nIs_spoken_in(\"English\", \"Samoa\").\nIs_spoken_in(\"English\", \"Tonga\").\nIs_spoken_in(\"English\", \"Kiribati\").\nIs_spoken_in(\"English\", \"Marshall Islands\").\nIs_spoken_in(\"English\", \"Micronesia\").\nIs_spoken_in(\""]}
{"id": 1066, "answer": true, "completion": ".decl Has_infinitive_form(Verb:symbol, Infinitive_form:symbol)\nHas_infinitive_form(\"be\", \"to be\").\n.decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Hamlet\", \"William Shakespeare\").\n.decl Answer()\nAnswer() :- Has_infinitive_form(verb, \"to be\"), Has_author(\"Hamlet\", \"William Shakespeare\").\n.output Answer\n\n", "completions": [".decl Has_infinitive_form(Verb:symbol, Infinitive_form:symbol)\nHas_infinitive_form(\"be\", \"to be\").\n.decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Hamlet\", \"William Shakespeare\").\n.decl Answer()\nAnswer() :- Has_infinitive_form(verb, \"to be\"), Has_author(\"Hamlet\", \"William Shakespeare\").\n.output Answer\n\n"]}
{"id": 1067, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"soccer field\", \"green\").\nHas_color(\"referee\", \"black\").\nHas_color(\"referee\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"soccer field\", color1), Has_color(\"referee\", color2), color1 != color2.\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"soccer field\", \"green\").\nHas_color(\"referee\", \"black\").\nHas_color(\"referee\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"soccer field\", color1), Has_color(\"referee\", color2), color1 != color2.\n.output Answer\n\n"]}
{"id": 1068, "answer": true, "completion": ".decl Has_symptom(Person:symbol, Symptom:symbol)\nHas_symptom(\"pirate\", \"scurvy\").\n.decl Needs_vitamin(Person:symbol, Vitamin:symbol)\nNeeds_vitamin(\"pirate\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Has_symptom(person, \"scurvy\"), Needs_vitamin(person, \"Vitamin C\").\n.output Answer\n\n", "completions": [".decl Has_symptom(Person:symbol, Symptom:symbol)\nHas_symptom(\"pirate\", \"scurvy\").\n.decl Needs_vitamin(Person:symbol, Vitamin:symbol)\nNeeds_vitamin(\"pirate\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Has_symptom(person, \"scurvy\"), Needs_vitamin(person, \"Vitamin C\").\n.output Answer\n\n"]}
{"id": 1069, "answer": true, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"ice\", 0).\n.decl Answer()\nAnswer() :- Has_calories(\"ice\", calories), calories < 2000.\n.output Answer\n\n", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"ice\", 0).\n.decl Answer()\nAnswer() :- Has_calories(\"ice\", calories), calories < 2000.\n.output Answer\n\n"]}
{"id": 1070, "answer": false, "completion": ".decl Has_altitude(Object:symbol, Altitude:float)\nHas_altitude(\"King Kong\", 300).\nHas_altitude(\"Eiffel Tower visitors\", 300).\n.decl Answer()\nAnswer() :- Has_altitude(\"King Kong\", altitude1), Has_altitude(\"Eiffel Tower visitors\", altitude2), altitude1 > altitude2.\n.output Answer\n\n", "completions": [".decl Has_altitude(Object:symbol, Altitude:float)\nHas_altitude(\"King Kong\", 300).\nHas_altitude(\"Eiffel Tower visitors\", 300).\n.decl Answer()\nAnswer() :- Has_altitude(\"King Kong\", altitude1), Has_altitude(\"Eiffel Tower visitors\", altitude2), altitude1 > altitude2.\n.output Answer\n\n"]}
{"id": 1071, "answer": false, "completion": ".decl Has_bedtime(Child:symbol, Bedtime:symbol)\nHas_bedtime(\"child\", \"9:00 PM\").\n.decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"Conan O'Brien\", 1).\n.decl Answer()\nAnswer() :- Has_bedtime(\"child\", bedtime), Lasts_n_hours(\"Conan O'Brien\", n_hours), bedtime < \"9:00 PM\" + n_hours.\n.output Answer\n\n", "completions": [".decl Has_bedtime(Child:symbol, Bedtime:symbol)\nHas_bedtime(\"child\", \"9:00 PM\").\n.decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"Conan O'Brien\", 1).\n.decl Answer()\nAnswer() :- Has_bedtime(\"child\", bedtime), Lasts_n_hours(\"Conan O'Brien\", n_hours), bedtime < \"9:00 PM\" + n_hours.\n.output Answer\n\n"]}
{"id": 1072, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Capital One Venture\", 5).\nHas_n_members(\"Church of Satan\", 1).\n.decl Has_cost(Group:symbol, Cost:float)\nHas_cost(\"Capital One Venture\", 59).\nHas_cost(\"Church of Satan\", 200).\n.decl Answer()\nAnswer() :- Has_n_members(\"Capital One Venture\", n_members1), Has_n_members(\"Church of Satan\", n_members2), Has_cost(\"Capital One Venture\", cost1), Has_cost(\"Church of Satan\", cost2), cost1/n_members1 < cost2/n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Capital One Venture\", 5).\nHas_n_members(\"Church of Satan\", 1).\n.decl Has_cost(Group:symbol, Cost:float)\nHas_cost(\"Capital One Venture\", 59).\nHas_cost(\"Church of Satan\", 200).\n.decl Answer()\nAnswer() :- Has_n_members(\"Capital One Venture\", n_members1), Has_n_members(\"Church of Satan\", n_members2), Has_cost(\"Capital One Venture\", cost1), Has_cost(\"Church of Satan\", cost2), cost1/n_members1 < cost2/n_members2.\n.output Answer\n\n"]}
{"id": 1073, "answer": true, "completion": ".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Morocco\", 20).\n.decl Is_ideal_for(Location:symbol, Activity:symbol)\nIs_ideal_for(\"Morocco\", \"water skiing\").\n.decl Answer()\nAnswer() :- Has_temperature(\"Morocco\", temperature), Is_ideal_for(\"Morocco\", \"water skiing\"), temperature > 10.\n.output Answer\n\n", "completions": [".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Morocco\", 20).\n.decl Is_ideal_for(Location:symbol, Activity:symbol)\nIs_ideal_for(\"Morocco\", \"water skiing\").\n.decl Answer()\nAnswer() :- Has_temperature(\"Morocco\", temperature), Is_ideal_for(\"Morocco\", \"water skiing\"), temperature > 10.\n.output Answer\n\n"]}
{"id": 1074, "answer": true, "completion": ".decl Can_do(Animal:symbol, Action:symbol)\nCan_do(\"snow leopard\", \"swim\").\n.decl Answer()\nAnswer() :- Can_do(\"snow leopard\", \"swim\").\n.output Answer\n\n", "completions": [".decl Can_do(Animal:symbol, Action:symbol)\nCan_do(\"snow leopard\", \"swim\").\n.decl Answer()\nAnswer() :- Can_do(\"snow leopard\", \"swim\").\n.output Answer\n\n"]}
{"id": 1075, "answer": true, "completion": ".decl Enemy(Person:symbol, Group:symbol)\nEnemy(\"Joker\", \"Batman\").\nEnemy(\"Batman\", \"Avengers\").\n.decl Answer()\nAnswer() :- Enemy(\"Joker\", group), Enemy(group, \"Avengers\").\n.output Answer\n\n", "completions": [".decl Enemy(Person:symbol, Group:symbol)\nEnemy(\"Joker\", \"Batman\").\nEnemy(\"Batman\", \"Avengers\").\n.decl Answer()\nAnswer() :- Enemy(\"Joker\", group), Enemy(group, \"Avengers\").\n.output Answer\n\n"]}
{"id": 1076, "answer": false, "completion": ".decl Is_vegan(Person:symbol)\nIs_vegan(\"vegan\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"pescetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"ovo-vegetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"lacto-vegetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"ovo-lacto-vegetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"pollotarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"pollo-pescetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"flexitarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"semi-vegetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"demi-vegetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-ish\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-curious\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-friendly\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol", "completions": [".decl Is_vegan(Person:symbol)\nIs_vegan(\"vegan\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"pescetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"ovo-vegetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"lacto-vegetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"ovo-lacto-vegetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"pollotarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"pollo-pescetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"flexitarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"semi-vegetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"demi-vegetarian\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-ish\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-curious\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-friendly\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol)\nIs_vegetarian(\"vegan-leaning\").\n.decl Is_vegetarian(Person:symbol"]}
{"id": 1077, "answer": true, "completion": ".decl Has_color(State:symbol, Color:symbol)\nHas_color(\"Delaware\", \"blue\").\nHas_color(\"Maryland\", \"blue\").\nHas_color(\"District of Columbia\", \"blue\").\nHas_color(\"Virginia\", \"red\").\nHas_color(\"North Carolina\", \"red\").\nHas_color(\"South Carolina\", \"red\").\nHas_color(\"Georgia\", \"red\").\nHas_color(\"Florida\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"Delaware\", \"red\").\nAnswer() :- Has_color(\"Maryland\", \"red\").\nAnswer() :- Has_color(\"District of Columbia\", \"red\").\nAnswer() :- Has_color(\"Virginia\", \"red\").\nAnswer() :- Has_color(\"North Carolina\", \"red\").\nAnswer() :- Has_color(\"South Carolina\", \"red\").\nAnswer() :- Has_color(\"Georgia\", \"red\").\nAnswer() :- Has_color(\"Florida\", \"red\").\n.output Answer\n\n", "completions": [".decl Has_color(State:symbol, Color:symbol)\nHas_color(\"Delaware\", \"blue\").\nHas_color(\"Maryland\", \"blue\").\nHas_color(\"District of Columbia\", \"blue\").\nHas_color(\"Virginia\", \"red\").\nHas_color(\"North Carolina\", \"red\").\nHas_color(\"South Carolina\", \"red\").\nHas_color(\"Georgia\", \"red\").\nHas_color(\"Florida\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"Delaware\", \"red\").\nAnswer() :- Has_color(\"Maryland\", \"red\").\nAnswer() :- Has_color(\"District of Columbia\", \"red\").\nAnswer() :- Has_color(\"Virginia\", \"red\").\nAnswer() :- Has_color(\"North Carolina\", \"red\").\nAnswer() :- Has_color(\"South Carolina\", \"red\").\nAnswer() :- Has_color(\"Georgia\", \"red\").\nAnswer() :- Has_color(\"Florida\", \"red\").\n.output Answer\n\n"]}
{"id": 1078, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"nuclear bomb\", \"World War II\").\nHappens_in_time(\"Napoleonic Wars\", \"1803-1815\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"nuclear bomb\", time1), Happens_in_time(\"Napoleonic Wars\", time2), time1 != time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"nuclear bomb\", \"World War II\").\nHappens_in_time(\"Napoleonic Wars\", \"1803-1815\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"nuclear bomb\", time1), Happens_in_time(\"Napoleonic Wars\", time2), time1 != time2.\n.output Answer\n\n"]}
{"id": 1079, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Marco Rubio\", 1.72).\n.decl Has_min_height(Roller_coaster:symbol, Min_height:float)\nHas_min_height(\"Candymonium\", 1.4).\n.decl Answer()\nAnswer() :- Has_height(\"Marco Rubio\", height), Has_min_height(\"Candymonium\", min_height), height >= min_height.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Marco Rubio\", 1.72).\n.decl Has_min_height(Roller_coaster:symbol, Min_height:float)\nHas_min_height(\"Candymonium\", 1.4).\n.decl Answer()\nAnswer() :- Has_height(\"Marco Rubio\", height), Has_min_height(\"Candymonium\", min_height), height >= min_height.\n.output Answer\n\n"]}
{"id": 1080, "answer": true, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Pandora's box\", \"War\").\nHas_name(\"Pandora's box\", \"Famine\").\nHas_name(\"Pandora's box\", \"Pestilence\").\nHas_name(\"Pandora's box\", \"Death\").\n.decl Answer()\nAnswer() :- Has_name(\"Pandora's box\", name1), Has_name(\"Pandora's box\", name2), name1 != name2.\n.output Answer\n\n", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Pandora's box\", \"War\").\nHas_name(\"Pandora's box\", \"Famine\").\nHas_name(\"Pandora's box\", \"Pestilence\").\nHas_name(\"Pandora's box\", \"Death\").\n.decl Answer()\nAnswer() :- Has_name(\"Pandora's box\", name1), Has_name(\"Pandora's box\", name2), name1 != name2.\n.output Answer\n\n"]}
{"id": 1081, "answer": true, "completion": ".decl Uses(Person:symbol, Calendar:symbol)\nUses(\"Saint Augustine\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Uses(\"Saint Augustine\", \"Julian calendar\").\n.output Answer\n\n", "completions": [".decl Uses(Person:symbol, Calendar:symbol)\nUses(\"Saint Augustine\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Uses(\"Saint Augustine\", \"Julian calendar\").\n.output Answer\n\n"]}
{"id": 1082, "answer": true, "completion": ".decl Is_parody_of(Parody:symbol, Person:symbol)\nIs_parody_of(\"Saturday Night Live\", \"President of the United States\").\n.decl Is_illegal(Event:symbol)\nIs_illegal(\"Saturday Night Live\").\n.decl Answer()\nAnswer() :- Is_parody_of(parody, \"President of the United States\"), Is_illegal(parody).\n.output Answer\n\n", "completions": [".decl Is_parody_of(Parody:symbol, Person:symbol)\nIs_parody_of(\"Saturday Night Live\", \"President of the United States\").\n.decl Is_illegal(Event:symbol)\nIs_illegal(\"Saturday Night Live\").\n.decl Answer()\nAnswer() :- Is_parody_of(parody, \"President of the United States\"), Is_illegal(parody).\n.output Answer\n\n"]}
{"id": 1083, "answer": true, "completion": ".decl Has_surface(Planet:symbol, Surface:symbol)\nHas_surface(\"Venus\", \"land\").\n.decl Answer()\nAnswer() :- Has_surface(\"Venus\", \"land\").\n.output Answer\n\n", "completions": [".decl Has_surface(Planet:symbol, Surface:symbol)\nHas_surface(\"Venus\", \"land\").\n.decl Answer()\nAnswer() :- Has_surface(\"Venus\", \"land\").\n.output Answer\n\n"]}
{"id": 1084, "answer": false, "completion": ".decl Has_flag(Country:symbol, Flag:symbol)\nHas_flag(\"Nazi Germany\", \"Swastika\").\n.decl Answer()\nAnswer() :- Has_flag(\"Nazi Germany\", \"Hammer and sickle\").\n.output Answer\n\n", "completions": [".decl Has_flag(Country:symbol, Flag:symbol)\nHas_flag(\"Nazi Germany\", \"Swastika\").\n.decl Answer()\nAnswer() :- Has_flag(\"Nazi Germany\", \"Hammer and sickle\").\n.output Answer\n\n"]}
{"id": 1085, "answer": true, "completion": ".decl Has_cause_of_death(Person:symbol, Cause_of_death:symbol)\nHas_cause_of_death(\"Paul the Apostle\", \"beheading\").\n.decl Violates_tenet(Cause_of_death:symbol, Tenet:symbol)\nViolates_tenet(\"beheading\", \"Ahimsa\").\n.decl Answer()\nAnswer() :- Has_cause_of_death(\"Paul the Apostle\", cause_of_death), Violates_tenet(cause_of_death, \"Ahimsa\").\n.output Answer\n\n", "completions": [".decl Has_cause_of_death(Person:symbol, Cause_of_death:symbol)\nHas_cause_of_death(\"Paul the Apostle\", \"beheading\").\n.decl Violates_tenet(Cause_of_death:symbol, Tenet:symbol)\nViolates_tenet(\"beheading\", \"Ahimsa\").\n.decl Answer()\nAnswer() :- Has_cause_of_death(\"Paul the Apostle\", cause_of_death), Violates_tenet(cause_of_death, \"Ahimsa\").\n.output Answer\n\n"]}
{"id": 1086, "answer": true, "completion": ".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"SNL\", 730).\n.decl Last_n_episodes(Show:symbol, N_episodes:float)\nLast_n_episodes(\"SNL\", 10).\n.decl Appears_in(Person:symbol, Show:symbol)\nAppears_in(\"Jenny McCarthy\", \"SNL\").\n.decl Answer()\nAnswer() :- Has_n_episodes(\"SNL\", n_episodes1), Last_n_episodes(\"SNL\", n_episodes2), Appears_in(\"Jenny McCarthy\", \"SNL\"), n_episodes1 > n_episodes2.\n.output Answer\n\n", "completions": [".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"SNL\", 730).\n.decl Last_n_episodes(Show:symbol, N_episodes:float)\nLast_n_episodes(\"SNL\", 10).\n.decl Appears_in(Person:symbol, Show:symbol)\nAppears_in(\"Jenny McCarthy\", \"SNL\").\n.decl Answer()\nAnswer() :- Has_n_episodes(\"SNL\", n_episodes1), Last_n_episodes(\"SNL\", n_episodes2), Appears_in(\"Jenny McCarthy\", \"SNL\"), n_episodes1 > n_episodes2.\n.output Answer\n\n"]}
{"id": 1087, "answer": true, "completion": ".decl Requires(Licence:symbol, Grade:symbol)\nRequires(\"driver's licence\", \"eleventh grade\").\n.decl Answer()\nAnswer() :- Requires(\"driver's licence\", \"eleventh grade\").\n.output Answer\n\n", "completions": [".decl Requires(Licence:symbol, Grade:symbol)\nRequires(\"driver's licence\", \"eleventh grade\").\n.decl Answer()\nAnswer() :- Requires(\"driver's licence\", \"eleventh grade\").\n.output Answer\n\n"]}
{"id": 1088, "answer": true, "completion": ".decl Influences(Person_A:symbol, Person_B:symbol)\nInfluences(\"DARPA\", \"Albert Einstein\").\n.decl Answer()\nAnswer() :- Influences(\"DARPA\", \"Albert Einstein\").\n.output Answer\n\n", "completions": [".decl Influences(Person_A:symbol, Person_B:symbol)\nInfluences(\"DARPA\", \"Albert Einstein\").\n.decl Answer()\nAnswer() :- Influences(\"DARPA\", \"Albert Einstein\").\n.output Answer\n\n"]}
{"id": 1089, "answer": true, "completion": ".decl Has_ingredient(Product:symbol, Ingredient:symbol)\nHas_ingredient(\"cigarettes\", \"menthol\").\n.decl Makes_less_addictive(Ingredient:symbol, Product:symbol)\nMakes_less_addictive(\"menthol\", \"cigarettes\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"cigarettes\", ingredient), Makes_less_addictive(ingredient, \"cigarettes\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Product:symbol, Ingredient:symbol)\nHas_ingredient(\"cigarettes\", \"menthol\").\n.decl Makes_less_addictive(Ingredient:symbol, Product:symbol)\nMakes_less_addictive(\"menthol\", \"cigarettes\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"cigarettes\", ingredient), Makes_less_addictive(ingredient, \"cigarettes\").\n.output Answer\n\n"]}
{"id": 1090, "answer": true, "completion": ".decl Lives_in_century(Person:symbol, Century:float)\nLives_in_century(\"Matt Groening\", 20).\nLives_in_century(\"Matt Groening\", 21).\n.decl Answer()\nAnswer() :- Lives_in_century(\"Matt Groening\", century1), Lives_in_century(\"Matt Groening\", century2), century1 != century2.\n.output Answer\n\n\n", "completions": [".decl Lives_in_century(Person:symbol, Century:float)\nLives_in_century(\"Matt Groening\", 20).\nLives_in_century(\"Matt Groening\", 21).\n.decl Answer()\nAnswer() :- Lives_in_century(\"Matt Groening\", century1), Lives_in_century(\"Matt Groening\", century2), century1 != century2.\n.output Answer\n\n\n"]}
{"id": 1091, "answer": true, "completion": ".decl Has_admitted_to(Person:symbol, Action:symbol)\nHas_admitted_to(\"psychic\", \"hot reading\").\n.decl Is_trustworthy(Person:symbol)\nIs_trustworthy(\"psychic\").\n.decl Answer()\nAnswer() :- Has_admitted_to(\"psychic\", \"hot reading\"), Is_trustworthy(\"psychic\").\n.output Answer\n\n", "completions": [".decl Has_admitted_to(Person:symbol, Action:symbol)\nHas_admitted_to(\"psychic\", \"hot reading\").\n.decl Is_trustworthy(Person:symbol)\nIs_trustworthy(\"psychic\").\n.decl Answer()\nAnswer() :- Has_admitted_to(\"psychic\", \"hot reading\"), Is_trustworthy(\"psychic\").\n.output Answer\n\n"]}
{"id": 1092, "answer": false, "completion": ".decl Has_water_source(Company:symbol, Water_source:symbol)\nHas_water_source(\"Poland Spring\", \"Maine\").\n.decl Has_water(Region:symbol, Water:symbol)\nHas_water(\"Maine\", \"water\").\nHas_water(\"Sahara\", \"sand\").\n.decl Answer()\nAnswer() :- Has_water_source(\"Poland Spring\", water_source), Has_water(water_source, \"water\"), Has_water(\"Sahara\", \"water\").\n.output Answer\n\n", "completions": [".decl Has_water_source(Company:symbol, Water_source:symbol)\nHas_water_source(\"Poland Spring\", \"Maine\").\n.decl Has_water(Region:symbol, Water:symbol)\nHas_water(\"Maine\", \"water\").\nHas_water(\"Sahara\", \"sand\").\n.decl Answer()\nAnswer() :- Has_water_source(\"Poland Spring\", water_source), Has_water(water_source, \"water\"), Has_water(\"Sahara\", \"water\").\n.output Answer\n\n"]}
{"id": 1093, "answer": false, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"jet plane\", \"society\").\n.decl Answer()\nAnswer() :- !Has_part(\"jet plane\", \"society\").\n.output Answer\n\n", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"jet plane\", \"society\").\n.decl Answer()\nAnswer() :- !Has_part(\"jet plane\", \"society\").\n.output Answer\n\n"]}
{"id": 1094, "answer": true, "completion": ".decl Is_necessary_for(Thing_A:symbol, Thing_B:symbol)\nIs_necessary_for(\"chlorophyll\", \"human race\").\n.decl Answer()\nAnswer() :- Is_necessary_for(\"chlorophyll\", \"human race\").\n.output Answer\n\n", "completions": [".decl Is_necessary_for(Thing_A:symbol, Thing_B:symbol)\nIs_necessary_for(\"chlorophyll\", \"human race\").\n.decl Answer()\nAnswer() :- Is_necessary_for(\"chlorophyll\", \"human race\").\n.output Answer\n\n"]}
{"id": 1095, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"giant green lady\", \"green\").\n.decl Is_in(Object:symbol, Location:symbol)\nIs_in(\"giant green lady\", \"New York Harbor\").\n.decl Answer()\nAnswer() :- Has_color(\"giant green lady\", \"green\"), Is_in(\"giant green lady\", \"New York Harbor\").\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"giant green lady\", \"green\").\n.decl Is_in(Object:symbol, Location:symbol)\nIs_in(\"giant green lady\", \"New York Harbor\").\n.decl Answer()\nAnswer() :- Has_color(\"giant green lady\", \"green\"), Is_in(\"giant green lady\", \"New York Harbor\").\n.output Answer\n\n"]}
{"id": 1096, "answer": true, "completion": ".decl Is_landlocked_within(Sea:symbol, Country:symbol)\nIs_landlocked_within(\"Sea of Japan\", \"Japan\").\n.decl Answer()\nAnswer() :- Is_landlocked_within(\"Sea of Japan\", \"Japan\").\n.output Answer\n\n", "completions": [".decl Is_landlocked_within(Sea:symbol, Country:symbol)\nIs_landlocked_within(\"Sea of Japan\", \"Japan\").\n.decl Answer()\nAnswer() :- Is_landlocked_within(\"Sea of Japan\", \"Japan\").\n.output Answer\n\n"]}
{"id": 1097, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"pear\", 0.6).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"pear\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer\n\n", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"pear\", 0.6).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"pear\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer\n\n"]}
{"id": 1098, "answer": true, "completion": ".decl Causes_pain(Condition:symbol, Body_part:symbol)\nCauses_pain(\"back pain\", \"back\").\n.decl Requires_movement(Activity:symbol, Body_part:symbol)\nRequires_movement(\"picking strawberries\", \"back\").\n.decl Answer()\nAnswer() :- Causes_pain(\"back pain\", body_part), Requires_movement(\"picking strawberries\", body_part).\n.output Answer\n\n", "completions": [".decl Causes_pain(Condition:symbol, Body_part:symbol)\nCauses_pain(\"back pain\", \"back\").\n.decl Requires_movement(Activity:symbol, Body_part:symbol)\nRequires_movement(\"picking strawberries\", \"back\").\n.decl Answer()\nAnswer() :- Causes_pain(\"back pain\", body_part), Requires_movement(\"picking strawberries\", body_part).\n.output Answer\n\n"]}
{"id": 1099, "answer": true, "completion": ".decl Has_location(Person:symbol, Location:symbol)\nHas_location(\"J. Edgar Hoover\", \"Washington, D.C.\").\n.decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"Washington, D.C.\", \"Langley, Virginia\").\n.decl Answer()\nAnswer() :- Has_location(\"J. Edgar Hoover\", location1), Is_near(location1, \"Langley, Virginia\").\n.output Answer\n\n\n", "completions": [".decl Has_location(Person:symbol, Location:symbol)\nHas_location(\"J. Edgar Hoover\", \"Washington, D.C.\").\n.decl Is_near(Location_A:symbol, Location_B:symbol)\nIs_near(\"Washington, D.C.\", \"Langley, Virginia\").\n.decl Answer()\nAnswer() :- Has_location(\"J. Edgar Hoover\", location1), Is_near(location1, \"Langley, Virginia\").\n.output Answer\n\n\n"]}
{"id": 1100, "answer": false, "completion": ".decl Has_won(Person:symbol, Award:symbol)\nHas_won(\"Christopher Walken\", \"Academy Award\").\nHas_won(\"Christopher Walken\", \"Emmy Award\").\nHas_won(\"Christopher Walken\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Has_won(\"Christopher Walken\", \"Tony Award\").\n.output Answer\n\n", "completions": [".decl Has_won(Person:symbol, Award:symbol)\nHas_won(\"Christopher Walken\", \"Academy Award\").\nHas_won(\"Christopher Walken\", \"Emmy Award\").\nHas_won(\"Christopher Walken\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Has_won(\"Christopher Walken\", \"Tony Award\").\n.output Answer\n\n"]}
{"id": 1101, "answer": false, "completion": ".decl Has_n_pins(Lane:symbol, N_pins:float)\nHas_n_pins(\"bowling alley lane\", 10).\n.decl Has_n_Oscars(Person:symbol, N_Oscars:float)\nHas_n_Oscars(\"Dustin Hoffman\", 2).\n.decl Answer()\nAnswer() :- Has_n_pins(\"bowling alley lane\", n_pins), Has_n_Oscars(\"Dustin Hoffman\", n_Oscars), n_pins <= n_Oscars.\n.output Answer\n\n\n", "completions": [".decl Has_n_pins(Lane:symbol, N_pins:float)\nHas_n_pins(\"bowling alley lane\", 10).\n.decl Has_n_Oscars(Person:symbol, N_Oscars:float)\nHas_n_Oscars(\"Dustin Hoffman\", 2).\n.decl Answer()\nAnswer() :- Has_n_pins(\"bowling alley lane\", n_pins), Has_n_Oscars(\"Dustin Hoffman\", n_Oscars), n_pins <= n_Oscars.\n.output Answer\n\n\n"]}
{"id": 1102, "answer": true, "completion": ".decl Has_author(Work:symbol, Author:symbol)\nHas_author(\"Masnavi\", \"Rumi\").\n.decl Has_content(Magazine:symbol, Content:symbol)\nHas_content(\"The Atlantic\", \"Masnavi\").\n.decl Answer()\nAnswer() :- Has_author(work, \"Rumi\"), Has_content(magazine, work).\n.output Answer\n\n", "completions": [".decl Has_author(Work:symbol, Author:symbol)\nHas_author(\"Masnavi\", \"Rumi\").\n.decl Has_content(Magazine:symbol, Content:symbol)\nHas_content(\"The Atlantic\", \"Masnavi\").\n.decl Answer()\nAnswer() :- Has_author(work, \"Rumi\"), Has_content(magazine, work).\n.output Answer\n\n"]}
{"id": 1103, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Mercury\", 5.427).\nHas_density(\"Venus\", 5.243).\nHas_density(\"Earth\", 5.515).\nHas_density(\"Mars\", 3.933).\n.decl Has_day(Planet:symbol, Day:symbol)\nHas_day(\"Mercury\", \"Thursday\").\nHas_day(\"Venus\", \"Friday\").\nHas_day(\"Earth\", \"Saturday\").\nHas_day(\"Mars\", \"Sunday\").\n.decl Answer()\nAnswer() :- Has_density(planet1, density1), Has_density(planet2, density2), Has_day(planet1, \"Friday\"), density1 > density2.\n.output Answer\n\n", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Mercury\", 5.427).\nHas_density(\"Venus\", 5.243).\nHas_density(\"Earth\", 5.515).\nHas_density(\"Mars\", 3.933).\n.decl Has_day(Planet:symbol, Day:symbol)\nHas_day(\"Mercury\", \"Thursday\").\nHas_day(\"Venus\", \"Friday\").\nHas_day(\"Earth\", \"Saturday\").\nHas_day(\"Mars\", \"Sunday\").\n.decl Answer()\nAnswer() :- Has_density(planet1, density1), Has_density(planet2, density2), Has_day(planet1, \"Friday\"), density1 > density2.\n.output Answer\n\n"]}
{"id": 1104, "answer": true, "completion": ".decl Is_visible_from(Object:symbol, Location:symbol)\nIs_visible_from(\"Stonehenge\", \"London\").\nIs_visible_from(\"Stonehenge\", \"Dusseldorf\").\n.decl Answer()\nAnswer() :- Is_visible_from(\"Stonehenge\", \"Dusseldorf\").\n.output Answer\n\n", "completions": [".decl Is_visible_from(Object:symbol, Location:symbol)\nIs_visible_from(\"Stonehenge\", \"London\").\nIs_visible_from(\"Stonehenge\", \"Dusseldorf\").\n.decl Answer()\nAnswer() :- Is_visible_from(\"Stonehenge\", \"Dusseldorf\").\n.output Answer\n\n"]}
{"id": 1105, "answer": true, "completion": ".decl Has_n_kids(Person:symbol, N_kids:float)\nHas_n_kids(\"Carlos Gracie\", 9).\nHas_n_kids(\"Helio Gracie\", 14).\n.decl Answer()\nAnswer() :- Has_n_kids(\"Carlos Gracie\", n_kids1), Has_n_kids(\"Helio Gracie\", n_kids2), n_kids1 + n_kids2 >= 13.\n.output Answer\n\n", "completions": [".decl Has_n_kids(Person:symbol, N_kids:float)\nHas_n_kids(\"Carlos Gracie\", 9).\nHas_n_kids(\"Helio Gracie\", 14).\n.decl Answer()\nAnswer() :- Has_n_kids(\"Carlos Gracie\", n_kids1), Has_n_kids(\"Helio Gracie\", n_kids2), n_kids1 + n_kids2 >= 13.\n.output Answer\n\n"]}
{"id": 1106, "answer": true, "completion": ".decl Has_kingdom(Animal:symbol, Kingdom:symbol)\nHas_kingdom(\"monarch butterfly\", \"animal\").\n.decl Answer()\nAnswer() :- Has_kingdom(\"monarch butterfly\", \"animal\").\n.output Answer\n\n", "completions": [".decl Has_kingdom(Animal:symbol, Kingdom:symbol)\nHas_kingdom(\"monarch butterfly\", \"animal\").\n.decl Answer()\nAnswer() :- Has_kingdom(\"monarch butterfly\", \"animal\").\n.output Answer\n\n"]}
{"id": 1107, "answer": true, "completion": ".decl Despises(Person_A:symbol, Person_B:symbol)\nDespises(\"Nicole Kidman\", \"Roman Josi\").\n.decl Answer()\nAnswer() :- Despises(\"Nicole Kidman\", \"Roman Josi\").\n.output Answer\n\n", "completions": [".decl Despises(Person_A:symbol, Person_B:symbol)\nDespises(\"Nicole Kidman\", \"Roman Josi\").\n.decl Answer()\nAnswer() :- Despises(\"Nicole Kidman\", \"Roman Josi\").\n.output Answer\n\n"]}
{"id": 1108, "answer": true, "completion": ".decl Has_interest(Person:symbol, Interest:symbol)\nHas_interest(\"Apollo\", \"music\").\nHas_interest(\"Baldur\", \"music\").\nHas_interest(\"Apollo\", \"archery\").\nHas_interest(\"Baldur\", \"archery\").\n.decl Answer()\nAnswer() :- Has_interest(\"Apollo\", interest), Has_interest(\"Baldur\", interest).\n.output Answer\n\n", "completions": [".decl Has_interest(Person:symbol, Interest:symbol)\nHas_interest(\"Apollo\", \"music\").\nHas_interest(\"Baldur\", \"music\").\nHas_interest(\"Apollo\", \"archery\").\nHas_interest(\"Baldur\", \"archery\").\n.decl Answer()\nAnswer() :- Has_interest(\"Apollo\", interest), Has_interest(\"Baldur\", interest).\n.output Answer\n\n"]}
{"id": 1109, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Food:symbol)\nEats(\"poodle\", \"Snickers bar\").\n.decl Answer()\nAnswer() :- Eats(\"poodle\", \"Snickers bar\").\n.output Answer\n\n", "completions": [".decl Eats(Animal_A:symbol, Food:symbol)\nEats(\"poodle\", \"Snickers bar\").\n.decl Answer()\nAnswer() :- Eats(\"poodle\", \"Snickers bar\").\n.output Answer\n\n"]}
{"id": 1110, "answer": false, "completion": ".decl Has_speed(Person:symbol, Speed:float)\nHas_speed(\"Olympic athlete\", 10).\n.decl Takes_n_hours(Event:symbol, N_hours:float)\nTakes_n_hours(\"running a mile\", 0.1).\n.decl Answer()\nAnswer() :- Has_speed(\"Olympic athlete\", speed), Takes_n_hours(\"running a mile\", n_hours), speed * n_hours > 1.\n.output Answer\n\n", "completions": [".decl Has_speed(Person:symbol, Speed:float)\nHas_speed(\"Olympic athlete\", 10).\n.decl Takes_n_hours(Event:symbol, N_hours:float)\nTakes_n_hours(\"running a mile\", 0.1).\n.decl Answer()\nAnswer() :- Has_speed(\"Olympic athlete\", speed), Takes_n_hours(\"running a mile\", n_hours), speed * n_hours > 1.\n.output Answer\n\n"]}
{"id": 1111, "answer": false, "completion": ".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Catholic priest\", \"Catholic\").\n.decl Commends(Person:symbol, Virtue:symbol)\nCommends(\"Catholic priest\", \"humility\").\n.decl Answer()\nAnswer() :- Has_religion(\"Catholic priest\", \"Catholic\"), Commends(\"Catholic priest\", \"pride\").\n.output Answer\n\n", "completions": [".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Catholic priest\", \"Catholic\").\n.decl Commends(Person:symbol, Virtue:symbol)\nCommends(\"Catholic priest\", \"humility\").\n.decl Answer()\nAnswer() :- Has_religion(\"Catholic priest\", \"Catholic\"), Commends(\"Catholic priest\", \"pride\").\n.output Answer\n\n"]}
{"id": 1112, "answer": true, "completion": ".decl Lasts_n_months(Food:symbol, N_months:float)\nLasts_n_months(\"white rice\", 6).\nLasts_n_months(\"sesame seeds\", 12).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"white rice\", n_months1), Lasts_n_months(\"sesame seeds\", n_months2), n_months1 < n_months2.\n.output Answer\n\n\n", "completions": [".decl Lasts_n_months(Food:symbol, N_months:float)\nLasts_n_months(\"white rice\", 6).\nLasts_n_months(\"sesame seeds\", 12).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"white rice\", n_months1), Lasts_n_months(\"sesame seeds\", n_months2), n_months1 < n_months2.\n.output Answer\n\n\n"]}
{"id": 1113, "answer": true, "completion": ".decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Harry Potter and the Philosopher's Stone\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Chamber of Secrets\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Prisoner of Azkaban\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Goblet of Fire\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Order of the Phoenix\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Half-Blood Prince\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Deathly Hallows\", \"J.K Rowling\").\n.decl Has_genre(Book:symbol, Genre:symbol)\nHas_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nHas_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nHas_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nHas_genre(\"Harry Potter and the Goblet of Fire\", \"fantasy\").\nHas_genre(\"Harry Potter and the Order of the Phoenix\", \"fantasy\").\nHas_genre(\"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nHas_genre(\"Harry Potter and the Deathly Hallows\", \"fantasy\").\n.decl Answer()\nAnswer() :- Has_author(book, \"J.K Rowling\"), Has_genre(book, \"fantasy\").\n.output Answer\n\n", "completions": [".decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Harry Potter and the Philosopher's Stone\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Chamber of Secrets\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Prisoner of Azkaban\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Goblet of Fire\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Order of the Phoenix\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Half-Blood Prince\", \"J.K Rowling\").\nHas_author(\"Harry Potter and the Deathly Hallows\", \"J.K Rowling\").\n.decl Has_genre(Book:symbol, Genre:symbol)\nHas_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nHas_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nHas_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nHas_genre(\"Harry Potter and the Goblet of Fire\", \"fantasy\").\nHas_genre(\"Harry Potter and the Order of the Phoenix\", \"fantasy\").\nHas_genre(\"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nHas_genre(\"Harry Potter and the Deathly Hallows\", \"fantasy\").\n.decl Answer()\nAnswer() :- Has_author(book, \"J.K Rowling\"), Has_genre(book, \"fantasy\").\n.output Answer\n\n"]}
{"id": 1114, "answer": true, "completion": ".decl Has_longitude(City:symbol, Longitude:float)\nHas_longitude(\"Bern\", 7.4).\nHas_longitude(\"Paris\", 2.3).\n.decl Answer()\nAnswer() :- Has_longitude(\"Bern\", longitude1), Has_longitude(\"Paris\", longitude2), longitude1 > longitude2.\n.output Answer\n\n", "completions": [".decl Has_longitude(City:symbol, Longitude:float)\nHas_longitude(\"Bern\", 7.4).\nHas_longitude(\"Paris\", 2.3).\n.decl Answer()\nAnswer() :- Has_longitude(\"Bern\", longitude1), Has_longitude(\"Paris\", longitude2), longitude1 > longitude2.\n.output Answer\n\n"]}
{"id": 1115, "answer": false, "completion": ".decl Has_religious_sect(Person:symbol, Religious_sect:symbol)\nHas_religious_sect(\"Al-Farabi\", \"Sunni\").\n.decl Has_religious_sect(Group:symbol, Religious_sect:symbol)\nHas_religious_sect(\"ISIS\", \"Sunni\").\n.decl Answer()\nAnswer() :- Has_religious_sect(\"Al-Farabi\", religious_sect), Has_religious_sect(\"ISIS\", religious_sect).\n.output Answer\n\n", "completions": [".decl Has_religious_sect(Person:symbol, Religious_sect:symbol)\nHas_religious_sect(\"Al-Farabi\", \"Sunni\").\n.decl Has_religious_sect(Group:symbol, Religious_sect:symbol)\nHas_religious_sect(\"ISIS\", \"Sunni\").\n.decl Answer()\nAnswer() :- Has_religious_sect(\"Al-Farabi\", religious_sect), Has_religious_sect(\"ISIS\", religious_sect).\n.output Answer\n\n"]}
{"id": 1116, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"mollymawk\", \"Antarctica\").\nLives_in(\"albatross\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Lives_in(\"mollymawk\", place), !Lives_in(\"albatross\", place).\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"mollymawk\", \"Antarctica\").\nLives_in(\"albatross\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Lives_in(\"mollymawk\", place), !Lives_in(\"albatross\", place).\n.output Answer\n\n"]}
{"id": 1117, "answer": true, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"spice grinder\", 20).\nHas_price(\"cinnamon sticks\", 1).\n.decl Answer()\nAnswer() :- Has_price(\"spice grinder\", price1), Has_price(\"cinnamon sticks\", price2), price1 > price2.\n.output Answer\n\n", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"spice grinder\", 20).\nHas_price(\"cinnamon sticks\", 1).\n.decl Answer()\nAnswer() :- Has_price(\"spice grinder\", price1), Has_price(\"cinnamon sticks\", price2), price1 > price2.\n.output Answer\n\n"]}
{"id": 1118, "answer": true, "completion": ".decl Has_spiciness(Food:symbol, Spiciness:float)\nHas_spiciness(\"Carolina Reaper\", 1).\nHas_spiciness(\"salsa\", 0.5).\n.decl Answer()\nAnswer() :- Has_spiciness(\"Carolina Reaper\", spiciness1), Has_spiciness(\"salsa\", spiciness2), spiciness1 > spiciness2.\n.output Answer\n\n\n", "completions": [".decl Has_spiciness(Food:symbol, Spiciness:float)\nHas_spiciness(\"Carolina Reaper\", 1).\nHas_spiciness(\"salsa\", 0.5).\n.decl Answer()\nAnswer() :- Has_spiciness(\"Carolina Reaper\", spiciness1), Has_spiciness(\"salsa\", spiciness2), spiciness1 > spiciness2.\n.output Answer\n\n\n"]}
{"id": 1119, "answer": true, "completion": ".decl Has_destination(Airline:symbol, Destination:symbol)\nHas_destination(\"Japan Airlines\", \"Germany\").\nHas_destination(\"Japan Airlines\", \"Italy\").\nHas_destination(\"Japan Airlines\", \"Japan\").\n.decl Was_Axis_Power(Country:symbol)\nWas_Axis_Power(\"Germany\").\nWas_Axis_Power(\"Italy\").\n.decl Answer()\nAnswer() :- Has_destination(\"Japan Airlines\", destination), Was_Axis_Power(destination).\n.output Answer\n\n", "completions": [".decl Has_destination(Airline:symbol, Destination:symbol)\nHas_destination(\"Japan Airlines\", \"Germany\").\nHas_destination(\"Japan Airlines\", \"Italy\").\nHas_destination(\"Japan Airlines\", \"Japan\").\n.decl Was_Axis_Power(Country:symbol)\nWas_Axis_Power(\"Germany\").\nWas_Axis_Power(\"Italy\").\n.decl Answer()\nAnswer() :- Has_destination(\"Japan Airlines\", destination), Was_Axis_Power(destination).\n.output Answer\n\n"]}
{"id": 1120, "answer": true, "completion": ".decl Has_ingredient(Liquid:symbol, Ingredient:symbol)\nHas_ingredient(\"olive oil\", \"olive oil\").\nHas_ingredient(\"water\", \"water\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"olive oil\", ingredient1), Has_ingredient(\"water\", ingredient2), ingredient1 != ingredient2.\n.output Answer\n\n", "completions": [".decl Has_ingredient(Liquid:symbol, Ingredient:symbol)\nHas_ingredient(\"olive oil\", \"olive oil\").\nHas_ingredient(\"water\", \"water\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"olive oil\", ingredient1), Has_ingredient(\"water\", ingredient2), ingredient1 != ingredient2.\n.output Answer\n\n"]}
{"id": 1121, "answer": true, "completion": ".decl Has_diameter(Object:symbol, Diameter:float)\nHas_diameter(\"nymph tick\", 0.5).\nHas_diameter(\"standard hole punch\", 0.5).\n.decl Answer()\nAnswer() :- Has_diameter(\"nymph tick\", diameter1), Has_diameter(\"standard hole punch\", diameter2), diameter1 <= diameter2.\n.output Answer\n\n\n", "completions": [".decl Has_diameter(Object:symbol, Diameter:float)\nHas_diameter(\"nymph tick\", 0.5).\nHas_diameter(\"standard hole punch\", 0.5).\n.decl Answer()\nAnswer() :- Has_diameter(\"nymph tick\", diameter1), Has_diameter(\"standard hole punch\", diameter2), diameter1 <= diameter2.\n.output Answer\n\n\n"]}
{"id": 1122, "answer": true, "completion": ".decl Operates(Company:symbol, Vehicle:symbol)\nOperates(\"Amtrak\", \"train\").\n.decl Has_n_wheels(Vehicle:symbol, N_wheels:float)\nHas_n_wheels(\"train\", 4).\n.decl Answer()\nAnswer() :- Operates(\"Amtrak\", vehicle), Has_n_wheels(vehicle, n_wheels), n_wheels = 4.\n.output Answer\n\n", "completions": [".decl Operates(Company:symbol, Vehicle:symbol)\nOperates(\"Amtrak\", \"train\").\n.decl Has_n_wheels(Vehicle:symbol, N_wheels:float)\nHas_n_wheels(\"train\", 4).\n.decl Answer()\nAnswer() :- Operates(\"Amtrak\", vehicle), Has_n_wheels(vehicle, n_wheels), n_wheels = 4.\n.output Answer\n\n"]}
{"id": 1123, "answer": false, "completion": ".decl Has_place_in_alphabet(Letter:symbol, Place:float)\nHas_place_in_alphabet(\"B\", 2).\n.decl Has_n_occurrences(Event:symbol, N_occurrences:float)\nHas_n_occurrences(\"2008 total lunar eclipses\", 2).\n.decl Answer()\nAnswer() :- Has_place_in_alphabet(\"B\", place), Has_n_occurrences(\"2008 total lunar eclipses\", n_occurrences), place > n_occurrences.\n.output Answer\n\n", "completions": [".decl Has_place_in_alphabet(Letter:symbol, Place:float)\nHas_place_in_alphabet(\"B\", 2).\n.decl Has_n_occurrences(Event:symbol, N_occurrences:float)\nHas_n_occurrences(\"2008 total lunar eclipses\", 2).\n.decl Answer()\nAnswer() :- Has_place_in_alphabet(\"B\", place), Has_n_occurrences(\"2008 total lunar eclipses\", n_occurrences), place > n_occurrences.\n.output Answer\n\n"]}
{"id": 1124, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"sun bears stay active\", \"summer\").\nHappens_in_time(\"sun bears stay active\", \"spring\").\nHappens_in_time(\"sun bears stay active\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"sun bears stay active\", \"winter\").\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"sun bears stay active\", \"summer\").\nHappens_in_time(\"sun bears stay active\", \"spring\").\nHappens_in_time(\"sun bears stay active\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"sun bears stay active\", \"winter\").\n.output Answer\n\n"]}
{"id": 1125, "answer": true, "completion": ".decl Does(Person:symbol, Action:symbol)\nDoes(\"Osama bin Laden\", \"pray\").\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"pray\", 7).\n.decl Answer()\nAnswer() :- Does(\"Osama bin Laden\", action), Happens_every_n_days(action, n_days), n_days = 7.\n.output Answer\n\n", "completions": [".decl Does(Person:symbol, Action:symbol)\nDoes(\"Osama bin Laden\", \"pray\").\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"pray\", 7).\n.decl Answer()\nAnswer() :- Does(\"Osama bin Laden\", action), Happens_every_n_days(action, n_days), n_days = 7.\n.output Answer\n\n"]}
{"id": 1126, "answer": false, "completion": ".decl Has_n_ships(Navy:symbol, N_ships:float)\nHas_n_ships(\"modern Brazilian Navy\", 100).\nHas_n_ships(\"Roman Navy\", 500).\n.decl Answer()\nAnswer() :- Has_n_ships(\"modern Brazilian Navy\", n_ships1), Has_n_ships(\"Roman Navy\", n_ships2), n_ships1 > n_ships2.\n.output Answer\n\n\n", "completions": [".decl Has_n_ships(Navy:symbol, N_ships:float)\nHas_n_ships(\"modern Brazilian Navy\", 100).\nHas_n_ships(\"Roman Navy\", 500).\n.decl Answer()\nAnswer() :- Has_n_ships(\"modern Brazilian Navy\", n_ships1), Has_n_ships(\"Roman Navy\", n_ships2), n_ships1 > n_ships2.\n.output Answer\n\n\n"]}
{"id": 1127, "answer": false, "completion": ".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Plato\", \"Platonism\").\nBelieves(\"Jainism\", \"Jainism\").\n.decl Answer()\nAnswer() :- Believes(\"Plato\", belief1), Believes(\"Jainism\", belief2), belief1 = belief2.\n.output Answer\n\n", "completions": [".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Plato\", \"Platonism\").\nBelieves(\"Jainism\", \"Jainism\").\n.decl Answer()\nAnswer() :- Believes(\"Plato\", belief1), Believes(\"Jainism\", belief2), belief1 = belief2.\n.output Answer\n\n"]}
{"id": 1128, "answer": true, "completion": ".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Goofy\", \"Nylabone\").\n.decl Answer()\nAnswer() :- Likes(\"Goofy\", \"Nylabone\").\n.output Answer\n\n", "completions": [".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Goofy\", \"Nylabone\").\n.decl Answer()\nAnswer() :- Likes(\"Goofy\", \"Nylabone\").\n.output Answer\n\n"]}
{"id": 1129, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Gunpowder plot\", \"1605\").\nHappens_in_time(\"Mary, Queen of Scots bloodline\", \"1542\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Gunpowder plot\", time1), Happens_in_time(\"Mary, Queen of Scots bloodline\", time2), time1 > time2.\n.output Answer\n\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Gunpowder plot\", \"1605\").\nHappens_in_time(\"Mary, Queen of Scots bloodline\", \"1542\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Gunpowder plot\", time1), Happens_in_time(\"Mary, Queen of Scots bloodline\", time2), time1 > time2.\n.output Answer\n\n\n"]}
{"id": 1130, "answer": true, "completion": ".decl Produces(Person:symbol, Movie:symbol)\nProduces(\"James Cameron\", \"Titanic\").\n.decl Is_leader(Person:symbol, Country:symbol)\nIs_leader(\"Mao Zedong\", \"China\").\n.decl Answer()\nAnswer() :- Produces(\"James Cameron\", \"Titanic\"), Is_leader(\"Mao Zedong\", \"China\").\n.output Answer\n\n", "completions": [".decl Produces(Person:symbol, Movie:symbol)\nProduces(\"James Cameron\", \"Titanic\").\n.decl Is_leader(Person:symbol, Country:symbol)\nIs_leader(\"Mao Zedong\", \"China\").\n.decl Answer()\nAnswer() :- Produces(\"James Cameron\", \"Titanic\"), Is_leader(\"Mao Zedong\", \"China\").\n.output Answer\n\n"]}
{"id": 1131, "answer": true, "completion": ".decl Is_in_section(Item:symbol, Section:symbol)\nIs_in_section(\"parsley\", \"produce\").\nIs_in_section(\"parsley\", \"baking\").\n.decl Answer()\nAnswer() :- Is_in_section(\"parsley\", section1), Is_in_section(\"parsley\", section2), section1 != section2.\n.output Answer\n\n", "completions": [".decl Is_in_section(Item:symbol, Section:symbol)\nIs_in_section(\"parsley\", \"produce\").\nIs_in_section(\"parsley\", \"baking\").\n.decl Answer()\nAnswer() :- Is_in_section(\"parsley\", section1), Is_in_section(\"parsley\", section2), section1 != section2.\n.output Answer\n\n"]}
{"id": 1132, "answer": false, "completion": ".decl Thrives_in(Plant:symbol, Environment:symbol)\nThrives_in(\"Spartina Patens\", \"salt marshes\").\n.decl Is_in(Environment:symbol, Location:symbol)\nIs_in(\"salt marshes\", \"coastal areas\").\nIs_in(\"Sahara Desert\", \"deserts\").\n.decl Answer()\nAnswer() :- Thrives_in(\"Spartina Patens\", environment), Is_in(environment, \"Sahara Desert\").\n.output Answer\n\n", "completions": [".decl Thrives_in(Plant:symbol, Environment:symbol)\nThrives_in(\"Spartina Patens\", \"salt marshes\").\n.decl Is_in(Environment:symbol, Location:symbol)\nIs_in(\"salt marshes\", \"coastal areas\").\nIs_in(\"Sahara Desert\", \"deserts\").\n.decl Answer()\nAnswer() :- Thrives_in(\"Spartina Patens\", environment), Is_in(environment, \"Sahara Desert\").\n.output Answer\n\n"]}
{"id": 1133, "answer": true, "completion": ".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Jackie Chan\", \"hearing\").\n.decl Answer()\nAnswer() :- Has_ability(\"Jackie Chan\", \"hearing\"), !Has_ability(\"Jackie Chan\", \"sign language\").\n.output Answer\n\n", "completions": [".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Jackie Chan\", \"hearing\").\n.decl Answer()\nAnswer() :- Has_ability(\"Jackie Chan\", \"hearing\"), !Has_ability(\"Jackie Chan\", \"sign language\").\n.output Answer\n\n"]}
{"id": 1134, "answer": true, "completion": ".decl Is_alternative_to(Material_A:symbol, Material_B:symbol)\nIs_alternative_to(\"beeswax\", \"plastic\").\nIs_alternative_to(\"beeswax\", \"cling wrap\").\n.decl Answer()\nAnswer() :- Is_alternative_to(\"beeswax\", \"plastic\").\nAnswer() :- Is_alternative_to(\"beeswax\", \"cling wrap\").\n.output Answer\n\n", "completions": [".decl Is_alternative_to(Material_A:symbol, Material_B:symbol)\nIs_alternative_to(\"beeswax\", \"plastic\").\nIs_alternative_to(\"beeswax\", \"cling wrap\").\n.decl Answer()\nAnswer() :- Is_alternative_to(\"beeswax\", \"plastic\").\nAnswer() :- Is_alternative_to(\"beeswax\", \"cling wrap\").\n.output Answer\n\n"]}
{"id": 1135, "answer": false, "completion": ".decl Climbs(Person:symbol, Mountain:symbol)\nClimbs(\"Kami Rita\", \"Mount Everest\").\n.decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Everest\", 8848).\nHas_height(\"Mount Emei\", 3099).\n.decl Answer()\nAnswer() :- Climbs(\"Kami Rita\", \"Mount Emei\").\nAnswer() :- Climbs(\"Kami Rita\", mountain2), Has_height(mountain2, height2), Has_height(\"Mount Emei\", height1), height2 <= height1.\n.output Answer\n\n", "completions": [".decl Climbs(Person:symbol, Mountain:symbol)\nClimbs(\"Kami Rita\", \"Mount Everest\").\n.decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Everest\", 8848).\nHas_height(\"Mount Emei\", 3099).\n.decl Answer()\nAnswer() :- Climbs(\"Kami Rita\", \"Mount Emei\").\nAnswer() :- Climbs(\"Kami Rita\", mountain2), Has_height(mountain2, height2), Has_height(\"Mount Emei\", height1), height2 <= height1.\n.output Answer\n\n"]}
{"id": 1136, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"attack on Pearl Harbor\", \"December 7, 1941\").\nHappens_in_time(\"Nancy Pelosi's birth\", \"March 26, 1940\").\nHappens_in_time(\"Nancy Pelosi's death\", \"present\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"attack on Pearl Harbor\", time1), Happens_in_time(\"Nancy Pelosi's birth\", time2), Happens_in_time(\"Nancy Pelosi's death\", time3), time2 < time1, time1 < time3.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"attack on Pearl Harbor\", \"December 7, 1941\").\nHappens_in_time(\"Nancy Pelosi's birth\", \"March 26, 1940\").\nHappens_in_time(\"Nancy Pelosi's death\", \"present\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"attack on Pearl Harbor\", time1), Happens_in_time(\"Nancy Pelosi's birth\", time2), Happens_in_time(\"Nancy Pelosi's death\", time3), time2 < time1, time1 < time3.\n.output Answer\n\n"]}
{"id": 1137, "answer": false, "completion": ".decl Has_n_digits(Number:float, N_digits:float)\nHas_n_digits(20.18, 4).\n.decl Answer()\nAnswer() :- Has_n_digits(20.18, n_digits), n_digits <= 3.\n.output Answer\n\n", "completions": [".decl Has_n_digits(Number:float, N_digits:float)\nHas_n_digits(20.18, 4).\n.decl Answer()\nAnswer() :- Has_n_digits(20.18, n_digits), n_digits <= 3.\n.output Answer\n\n"]}
{"id": 1138, "answer": true, "completion": ".decl Is_expensive(Tailor:symbol)\nIs_expensive(\"tailor\").\n.decl Uses(Tailor:symbol, Adhesive:symbol)\nUses(\"tailor\", \"adhesive\").\n.decl Creates(Tailor:symbol, Hem:symbol)\nCreates(\"tailor\", \"shorter hem\").\n.decl Is_on(Hem:symbol, Slacks:symbol)\nIs_on(\"shorter hem\", \"slacks\").\n.decl Answer()\nAnswer() :- Is_expensive(\"tailor\"), Uses(\"tailor\", \"adhesive\"), Creates(\"tailor\", \"shorter hem\"), Is_on(\"shorter hem\", \"slacks\").\n.output Answer\n\n", "completions": [".decl Is_expensive(Tailor:symbol)\nIs_expensive(\"tailor\").\n.decl Uses(Tailor:symbol, Adhesive:symbol)\nUses(\"tailor\", \"adhesive\").\n.decl Creates(Tailor:symbol, Hem:symbol)\nCreates(\"tailor\", \"shorter hem\").\n.decl Is_on(Hem:symbol, Slacks:symbol)\nIs_on(\"shorter hem\", \"slacks\").\n.decl Answer()\nAnswer() :- Is_expensive(\"tailor\"), Uses(\"tailor\", \"adhesive\"), Creates(\"tailor\", \"shorter hem\"), Is_on(\"shorter hem\", \"slacks\").\n.output Answer\n\n"]}
{"id": 1139, "answer": true, "completion": ".decl Has_emotion(Animal:symbol, Emotion:symbol)\nHas_emotion(\"frog\", \"disgust\").\n.decl Answer()\nAnswer() :- Has_emotion(\"frog\", \"disgust\").\n.output Answer\n\n", "completions": [".decl Has_emotion(Animal:symbol, Emotion:symbol)\nHas_emotion(\"frog\", \"disgust\").\n.decl Answer()\nAnswer() :- Has_emotion(\"frog\", \"disgust\").\n.output Answer\n\n"]}
{"id": 1140, "answer": true, "completion": ".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"clerk of Supreme Court of Canada\", \"seismophobia\").\n.decl Is_safe_profession(Profession:symbol)\nIs_safe_profession(\"clerk of Supreme Court of Canada\").\n.decl Answer()\nAnswer() :- Has_phobia(person, \"seismophobia\"), Is_safe_profession(person).\n.output Answer\n\n", "completions": [".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"clerk of Supreme Court of Canada\", \"seismophobia\").\n.decl Is_safe_profession(Profession:symbol)\nIs_safe_profession(\"clerk of Supreme Court of Canada\").\n.decl Answer()\nAnswer() :- Has_phobia(person, \"seismophobia\"), Is_safe_profession(person).\n.output Answer\n\n"]}
{"id": 1141, "answer": false, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"screwdriver\").\nSells(\"Home Depot\", \"hammer\").\nSells(\"Home Depot\", \"nails\").\nSells(\"Home Depot\", \"paint\").\nSells(\"Home Depot\", \"paintbrush\").\nSells(\"Home Depot\", \"paint roller\").\nSells(\"Home Depot\", \"paint tray\").\nSells(\"Home Depot\", \"paint thinner\").\nSells(\"Home Depot\", \"paint remover\").\nSells(\"Home Depot\", \"paint primer\").\nSells(\"Home Depot\", \"paint sealer\").\nSells(\"Home Depot\", \"paint stripper\").\nSells(\"Home Depot\", \"paint sprayer\").\nSells(\"Home Depot\", \"paint sprayer attachment\").\nSells(\"Home Depot\", \"paint sprayer nozzle\").\nSells(\"Home Depot\", \"paint sprayer hose\").\nSells(\"Home Depot\", \"paint sprayer tip\").\nSells(\"Home Depot\", \"paint sprayer gun\").\nSells(\"Home Depot\", \"paint sprayer cup\").\nSells(\"Home Depot\", \"paint sprayer lid\").\nSells(\"Home Depot\", \"paint sprayer lid gasket\").\nSells(\"Home Depot\", \"paint sprayer lid seal\").\nSells(\"Home Depot\", \"paint sprayer lid o-ring\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal\").\nSells(\"Home Depot\", \"paint sprayer lid gasket o-ring\").\nSells(\"Home Depot\", \"paint sprayer lid seal o-ring\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring replacement\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring repair\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring repair kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring replacement kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring repair replacement kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit kit kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit kit kit kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit kit kit kit kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit kit kit kit kit kit kit\").\nSells(\"Home", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"screwdriver\").\nSells(\"Home Depot\", \"hammer\").\nSells(\"Home Depot\", \"nails\").\nSells(\"Home Depot\", \"paint\").\nSells(\"Home Depot\", \"paintbrush\").\nSells(\"Home Depot\", \"paint roller\").\nSells(\"Home Depot\", \"paint tray\").\nSells(\"Home Depot\", \"paint thinner\").\nSells(\"Home Depot\", \"paint remover\").\nSells(\"Home Depot\", \"paint primer\").\nSells(\"Home Depot\", \"paint sealer\").\nSells(\"Home Depot\", \"paint stripper\").\nSells(\"Home Depot\", \"paint sprayer\").\nSells(\"Home Depot\", \"paint sprayer attachment\").\nSells(\"Home Depot\", \"paint sprayer nozzle\").\nSells(\"Home Depot\", \"paint sprayer hose\").\nSells(\"Home Depot\", \"paint sprayer tip\").\nSells(\"Home Depot\", \"paint sprayer gun\").\nSells(\"Home Depot\", \"paint sprayer cup\").\nSells(\"Home Depot\", \"paint sprayer lid\").\nSells(\"Home Depot\", \"paint sprayer lid gasket\").\nSells(\"Home Depot\", \"paint sprayer lid seal\").\nSells(\"Home Depot\", \"paint sprayer lid o-ring\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal\").\nSells(\"Home Depot\", \"paint sprayer lid gasket o-ring\").\nSells(\"Home Depot\", \"paint sprayer lid seal o-ring\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring replacement\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring repair\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring repair kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring replacement kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring repair replacement kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit kit kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit kit kit kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit kit kit kit kit kit\").\nSells(\"Home Depot\", \"paint sprayer lid gasket seal o-ring fix repair replacement kit kit kit kit kit kit kit kit kit\").\nSells(\"Home"]}
{"id": 1142, "answer": false, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"heladeria\", \"ice cream\").\nSells(\"heladeria\", \"sorbet\").\nSells(\"heladeria\", \"gelato\").\nSells(\"heladeria\", \"frozen yogurt\").\nSells(\"heladeria\", \"sherbet\").\nSells(\"heladeria\", \"ice milk\").\nSells(\"heladeria\", \"frozen custard\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen treat\").\nSells(\"heladeria\", \"frozen confection\").\nSells(\"heladeria\", \"frozen snack\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"hel", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"heladeria\", \"ice cream\").\nSells(\"heladeria\", \"sorbet\").\nSells(\"heladeria\", \"gelato\").\nSells(\"heladeria\", \"frozen yogurt\").\nSells(\"heladeria\", \"sherbet\").\nSells(\"heladeria\", \"ice milk\").\nSells(\"heladeria\", \"frozen custard\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen treat\").\nSells(\"heladeria\", \"frozen confection\").\nSells(\"heladeria\", \"frozen snack\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"heladeria\", \"frozen dessert\").\nSells(\"hel"]}
{"id": 1143, "answer": true, "completion": ".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"Al Capone\", 1899).\n.decl Has_start_year(Event:symbol, Start_year:float)\nHas_start_year(\"Harlem Renaissance\", 1910).\n.decl Answer()\nAnswer() :- Has_birth_year(\"Al Capone\", birth_year), Has_start_year(\"Harlem Renaissance\", start_year), birth_year < start_year.\n.output Answer\n\n\n", "completions": [".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"Al Capone\", 1899).\n.decl Has_start_year(Event:symbol, Start_year:float)\nHas_start_year(\"Harlem Renaissance\", 1910).\n.decl Answer()\nAnswer() :- Has_birth_year(\"Al Capone\", birth_year), Has_start_year(\"Harlem Renaissance\", start_year), birth_year < start_year.\n.output Answer\n\n\n"]}
{"id": 1144, "answer": false, "completion": ".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Donald Trump\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight", "completions": [".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Donald Trump\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Chris Christie\", 107).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight"]}
{"id": 1145, "answer": true, "completion": ".decl Is_punishment(Punishment:symbol)\nIs_punishment(\"keelhauling\").\n.decl Is_fair(Punishment:symbol)\nIs_fair(\"keelhauling\").\n.decl Answer()\nAnswer() :- Is_punishment(punishment), Is_fair(punishment).\n.output Answer\n\n", "completions": [".decl Is_punishment(Punishment:symbol)\nIs_punishment(\"keelhauling\").\n.decl Is_fair(Punishment:symbol)\nIs_fair(\"keelhauling\").\n.decl Answer()\nAnswer() :- Is_punishment(punishment), Is_fair(punishment).\n.output Answer\n\n"]}
{"id": 1146, "answer": true, "completion": ".decl Watched(Person:symbol, Show:symbol)\nWatched(\"Gandhi\", \"Bonanza\").\n.decl Answer()\nAnswer() :- Watched(\"Gandhi\", \"Bonanza\").\n.output Answer\n\n", "completions": [".decl Watched(Person:symbol, Show:symbol)\nWatched(\"Gandhi\", \"Bonanza\").\n.decl Answer()\nAnswer() :- Watched(\"Gandhi\", \"Bonanza\").\n.output Answer\n\n"]}
{"id": 1147, "answer": true, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 60000000).\n.decl Has_casualties(War:symbol, Casualties:float)\nHas_casualties(\"deadliest war\", 100000000).\n.decl Answer()\nAnswer() :- Has_population(\"France\", population), Has_casualties(\"deadliest war\", casualties), casualties >= population.\n.output Answer\n\n", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 60000000).\n.decl Has_casualties(War:symbol, Casualties:float)\nHas_casualties(\"deadliest war\", 100000000).\n.decl Answer()\nAnswer() :- Has_population(\"France\", population), Has_casualties(\"deadliest war\", casualties), casualties >= population.\n.output Answer\n\n"]}
{"id": 1148, "answer": true, "completion": ".decl Answer()\nAnswer() :- 3.141592653589793 > 2.23606797749979.\n.output Answer\n\n", "completions": [".decl Answer()\nAnswer() :- 3.141592653589793 > 2.23606797749979.\n.output Answer\n\n"]}
{"id": 1149, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Harry Potter and the Philosopher's Stone\", \"1997\").\nHappens_in_time(\"great depression\", \"1929\").\nHappens_in_time(\"great depression\", \"1930\").\nHappens_in_time(\"great depression\", \"1931\").\nHappens_in_time(\"great depression\", \"1932\").\nHappens_in_time(\"great depression\", \"1933\").\nHappens_in_time(\"great depression\", \"1934\").\nHappens_in_time(\"great depression\", \"1935\").\nHappens_in_time(\"great depression\", \"1936\").\nHappens_in_time(\"great depression\", \"1937\").\nHappens_in_time(\"great depression\", \"1938\").\nHappens_in_time(\"great depression\", \"1939\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Harry Potter and the Philosopher's Stone\", time1), Happens_in_time(\"great depression\", time2), time1 = time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Harry Potter and the Philosopher's Stone\", \"1997\").\nHappens_in_time(\"great depression\", \"1929\").\nHappens_in_time(\"great depression\", \"1930\").\nHappens_in_time(\"great depression\", \"1931\").\nHappens_in_time(\"great depression\", \"1932\").\nHappens_in_time(\"great depression\", \"1933\").\nHappens_in_time(\"great depression\", \"1934\").\nHappens_in_time(\"great depression\", \"1935\").\nHappens_in_time(\"great depression\", \"1936\").\nHappens_in_time(\"great depression\", \"1937\").\nHappens_in_time(\"great depression\", \"1938\").\nHappens_in_time(\"great depression\", \"1939\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Harry Potter and the Philosopher's Stone\", time1), Happens_in_time(\"great depression\", time2), time1 = time2.\n.output Answer\n\n"]}
{"id": 1150, "answer": true, "completion": ".decl Requires(Organization:symbol, Requirement:symbol)\nRequires(\"FDA\", \"sell by dates\").\n.decl Uses(Requirement:symbol, Method:symbol)\nUses(\"sell by dates\", \"Roman Numerals\").\n.decl Answer()\nAnswer() :- Requires(\"FDA\", requirement), Uses(requirement, \"Roman Numerals\").\n.output Answer\n\n", "completions": [".decl Requires(Organization:symbol, Requirement:symbol)\nRequires(\"FDA\", \"sell by dates\").\n.decl Uses(Requirement:symbol, Method:symbol)\nUses(\"sell by dates\", \"Roman Numerals\").\n.decl Answer()\nAnswer() :- Requires(\"FDA\", requirement), Uses(requirement, \"Roman Numerals\").\n.output Answer\n\n"]}
{"id": 1151, "answer": false, "completion": ".decl Has_n_legs(Animal:symbol, N_legs:float)\nHas_n_legs(\"bumblebee\", 6).\n.decl Has_n_legs(Animal:symbol, N_legs:float)\nHas_n_legs(\"spider\", 8).\n.decl Answer()\nAnswer() :- Has_n_legs(\"bumblebee\", n_legs1), Has_n_legs(\"spider\", n_legs2), n_legs1 < n_legs2.\n.output Answer\n\n", "completions": [".decl Has_n_legs(Animal:symbol, N_legs:float)\nHas_n_legs(\"bumblebee\", 6).\n.decl Has_n_legs(Animal:symbol, N_legs:float)\nHas_n_legs(\"spider\", 8).\n.decl Answer()\nAnswer() :- Has_n_legs(\"bumblebee\", n_legs1), Has_n_legs(\"spider\", n_legs2), n_legs1 < n_legs2.\n.output Answer\n\n"]}
{"id": 1152, "answer": true, "completion": ".decl Has_origin(Word:symbol, Origin:symbol)\nHas_origin(\"narcissism\", \"Greek mythology\").\n.decl Has_n_words(Origin:symbol, N_words:float)\nHas_n_words(\"Greek mythology\", 100).\nHas_n_words(\"Latin\", 100000).\n.decl Answer()\nAnswer() :- Has_origin(\"narcissism\", origin), Has_n_words(origin, n_words), n_words < 1000.\n.output Answer\n\n", "completions": [".decl Has_origin(Word:symbol, Origin:symbol)\nHas_origin(\"narcissism\", \"Greek mythology\").\n.decl Has_n_words(Origin:symbol, N_words:float)\nHas_n_words(\"Greek mythology\", 100).\nHas_n_words(\"Latin\", 100000).\n.decl Answer()\nAnswer() :- Has_origin(\"narcissism\", origin), Has_n_words(origin, n_words), n_words < 1000.\n.output Answer\n\n"]}
{"id": 1153, "answer": true, "completion": ".decl Is_in_education_system(Subject:symbol, Country:symbol)\nIs_in_education_system(\"art\", \"US\").\nIs_in_education_system(\"math\", \"US\").\n.decl Is_prioritized(Subject:symbol, Country:symbol)\nIs_prioritized(\"math\", \"US\").\n.decl Answer()\nAnswer() :- Is_in_education_system(\"art\", \"US\"), Is_prioritized(\"math\", \"US\"), !Is_prioritized(\"art\", \"US\").\n.output Answer\n\n", "completions": [".decl Is_in_education_system(Subject:symbol, Country:symbol)\nIs_in_education_system(\"art\", \"US\").\nIs_in_education_system(\"math\", \"US\").\n.decl Is_prioritized(Subject:symbol, Country:symbol)\nIs_prioritized(\"math\", \"US\").\n.decl Answer()\nAnswer() :- Is_in_education_system(\"art\", \"US\"), Is_prioritized(\"math\", \"US\"), !Is_prioritized(\"art\", \"US\").\n.output Answer\n\n"]}
{"id": 1154, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"mummification in the Andes\", \"Andes\").\nHappens_in_place(\"rainfall\", \"Andes\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"mummification in the Andes\", place), Happens_in_place(\"rainfall\", place).\n.output Answer\n\n", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"mummification in the Andes\", \"Andes\").\nHappens_in_place(\"rainfall\", \"Andes\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"mummification in the Andes\", place), Happens_in_place(\"rainfall\", place).\n.output Answer\n\n"]}
{"id": 1155, "answer": true, "completion": ".decl Has_official_bird(City:symbol, Bird:symbol)\nHas_official_bird(\"Seoul\", \"magpie\").\n.decl Has_color(Bird:symbol, Color:symbol)\nHas_color(\"magpie\", \"purplish/blue\").\n.decl Is_located_in(Company:symbol, City:symbol)\nIs_located_in(\"LG Electronics\", \"Seoul\").\n.decl Answer()\nAnswer() :- Is_located_in(\"LG Electronics\", city), Has_official_bird(city, bird), Has_color(bird, \"purplish/blue\").\n.output Answer\n\n", "completions": [".decl Has_official_bird(City:symbol, Bird:symbol)\nHas_official_bird(\"Seoul\", \"magpie\").\n.decl Has_color(Bird:symbol, Color:symbol)\nHas_color(\"magpie\", \"purplish/blue\").\n.decl Is_located_in(Company:symbol, City:symbol)\nIs_located_in(\"LG Electronics\", \"Seoul\").\n.decl Answer()\nAnswer() :- Is_located_in(\"LG Electronics\", city), Has_official_bird(city, bird), Has_color(bird, \"purplish/blue\").\n.output Answer\n\n"]}
{"id": 1156, "answer": true, "completion": ".decl Has_moisture(Soil:symbol, Moisture:symbol)\nHas_moisture(\"cactus soil\", \"damp\").\n.decl Answer()\nAnswer() :- Has_moisture(\"cactus soil\", \"damp\").\n.output Answer\n\n", "completions": [".decl Has_moisture(Soil:symbol, Moisture:symbol)\nHas_moisture(\"cactus soil\", \"damp\").\n.decl Answer()\nAnswer() :- Has_moisture(\"cactus soil\", \"damp\").\n.output Answer\n\n"]}
{"id": 1157, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"person\", \"dessert\").\nEats(\"person\", \"breakfast\").\n.decl Answer()\nAnswer() :- Eats(\"person\", \"dessert\"), Eats(\"person\", \"breakfast\").\n.output Answer\n\n", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"person\", \"dessert\").\nEats(\"person\", \"breakfast\").\n.decl Answer()\nAnswer() :- Eats(\"person\", \"dessert\"), Eats(\"person\", \"breakfast\").\n.output Answer\n\n"]}
{"id": 1158, "answer": false, "completion": ".decl Inspired_by(Person:symbol, Person:symbol)\nInspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.output Answer\n\n", "completions": [".decl Inspired_by(Person:symbol, Person:symbol)\nInspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.output Answer\n\n"]}
{"id": 1159, "answer": false, "completion": ".decl Has_n_Emmy_wins(Person:symbol, N_Emmy_wins:float)\nHas_n_Emmy_wins(\"Johnny Carson\", 6).\n.decl Has_n_eggs(Carton:symbol, N_eggs:float)\nHas_n_eggs(\"carton\", 12).\n.decl Answer()\nAnswer() :- Has_n_Emmy_wins(\"Johnny Carson\", n_Emmy_wins), Has_n_eggs(\"carton\", n_eggs), n_Emmy_wins >= n_eggs.\n.output Answer\n\n", "completions": [".decl Has_n_Emmy_wins(Person:symbol, N_Emmy_wins:float)\nHas_n_Emmy_wins(\"Johnny Carson\", 6).\n.decl Has_n_eggs(Carton:symbol, N_eggs:float)\nHas_n_eggs(\"carton\", 12).\n.decl Answer()\nAnswer() :- Has_n_Emmy_wins(\"Johnny Carson\", n_Emmy_wins), Has_n_eggs(\"carton\", n_eggs), n_Emmy_wins >= n_eggs.\n.output Answer\n\n"]}
{"id": 1160, "answer": false, "completion": ".decl Reads(Person:symbol, Book:symbol)\nReads(\"Julius Caesar\", \"The Art of War\").\nReads(\"Julius Caesar\", \"The Gallic Wars\").\nReads(\"Julius Caesar\", \"The Civil Wars\").\nReads(\"Julius Caesar\", \"The Alexandrian War\").\nReads(\"Julius Caesar\", \"The African War\").\nReads(\"Julius Caesar\", \"The Spanish War\").\nReads(\"Julius Caesar\", \"The Pharsalian War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War", "completions": [".decl Reads(Person:symbol, Book:symbol)\nReads(\"Julius Caesar\", \"The Art of War\").\nReads(\"Julius Caesar\", \"The Gallic Wars\").\nReads(\"Julius Caesar\", \"The Civil Wars\").\nReads(\"Julius Caesar\", \"The Alexandrian War\").\nReads(\"Julius Caesar\", \"The African War\").\nReads(\"Julius Caesar\", \"The Spanish War\").\nReads(\"Julius Caesar\", \"The Pharsalian War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War\").\nReads(\"Julius Caesar\", \"The Civil War"]}
{"id": 1161, "answer": false, "completion": ".decl Popular_in_month(Person:symbol, Month:symbol)\nPopular_in_month(\"Easter Bunny\", \"April\").\nPopular_in_month(\"Easter Bunny\", \"March\").\n.decl Answer()\nAnswer() :- Popular_in_month(\"Easter Bunny\", \"September\").\n.output Answer\n\n", "completions": [".decl Popular_in_month(Person:symbol, Month:symbol)\nPopular_in_month(\"Easter Bunny\", \"April\").\nPopular_in_month(\"Easter Bunny\", \"March\").\n.decl Answer()\nAnswer() :- Popular_in_month(\"Easter Bunny\", \"September\").\n.output Answer\n\n"]}
{"id": 1162, "answer": true, "completion": ".decl Has_length(Animal:symbol, Length:float)\nHas_length(\"alligator\", 3.5).\nHas_length(\"saltwater crocodile\", 6).\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"alligator\", 200).\nHas_weight(\"saltwater crocodile\", 1000).\n.decl Answer()\nAnswer() :- Has_length(\"alligator\", length1), Has_length(\"saltwater crocodile\", length2), length1 < length2.\nAnswer() :- Has_weight(\"alligator\", weight1), Has_weight(\"saltwater crocodile\", weight2), weight1 < weight2.\n.output Answer\n\n", "completions": [".decl Has_length(Animal:symbol, Length:float)\nHas_length(\"alligator\", 3.5).\nHas_length(\"saltwater crocodile\", 6).\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"alligator\", 200).\nHas_weight(\"saltwater crocodile\", 1000).\n.decl Answer()\nAnswer() :- Has_length(\"alligator\", length1), Has_length(\"saltwater crocodile\", length2), length1 < length2.\nAnswer() :- Has_weight(\"alligator\", weight1), Has_weight(\"saltwater crocodile\", weight2), weight1 < weight2.\n.output Answer\n\n"]}
{"id": 1163, "answer": true, "completion": ".decl Has_cuisine(Place:symbol, Cuisine:symbol)\nHas_cuisine(\"Hawaii\", \"vegan\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"Hawaii\", \"vegan\").\n.output Answer\n\n", "completions": [".decl Has_cuisine(Place:symbol, Cuisine:symbol)\nHas_cuisine(\"Hawaii\", \"vegan\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"Hawaii\", \"vegan\").\n.output Answer\n\n"]}
{"id": 1164, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"The Beatles\", 4).\nHas_n_members(\"The All-Starr Band\", 10).\n.decl Has_been_in(Person:symbol, Group:symbol)\nHas_been_in(\"Ringo Starr\", \"The Beatles\").\nHas_been_in(\"Ringo Starr\", \"The All-Starr Band\").\n.decl Answer()\nAnswer() :- Has_been_in(\"Ringo Starr\", group1), Has_been_in(\"Ringo Starr\", group2), Has_n_members(group1, n_members1), Has_n_members(group2, n_members2), n_members1 > n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"The Beatles\", 4).\nHas_n_members(\"The All-Starr Band\", 10).\n.decl Has_been_in(Person:symbol, Group:symbol)\nHas_been_in(\"Ringo Starr\", \"The Beatles\").\nHas_been_in(\"Ringo Starr\", \"The All-Starr Band\").\n.decl Answer()\nAnswer() :- Has_been_in(\"Ringo Starr\", group1), Has_been_in(\"Ringo Starr\", group2), Has_n_members(group1, n_members1), Has_n_members(group2, n_members2), n_members1 > n_members2.\n.output Answer\n\n"]}
{"id": 1165, "answer": true, "completion": ".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Achilles\", 10).\nHas_strength(\"Legolas\", 8).\n.decl Answer()\nAnswer() :- Has_strength(\"Achilles\", strength1), Has_strength(\"Legolas\", strength2), strength1 > strength2.\n.output Answer\n\n", "completions": [".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Achilles\", 10).\nHas_strength(\"Legolas\", 8).\n.decl Answer()\nAnswer() :- Has_strength(\"Achilles\", strength1), Has_strength(\"Legolas\", strength2), strength1 > strength2.\n.output Answer\n\n"]}
{"id": 1166, "answer": true, "completion": ".decl Has_carb_content(Food:symbol, Carb_content:float)\nHas_carb_content(\"Dosa\", 20).\n.decl Has_carb_limit(Diet:symbol, Carb_limit:float)\nHas_carb_limit(\"keto diet\", 20).\n.decl Answer()\nAnswer() :- Has_carb_content(\"Dosa\", carb_content), Has_carb_limit(\"keto diet\", carb_limit), carb_content <= carb_limit.\n.output Answer\n\n", "completions": [".decl Has_carb_content(Food:symbol, Carb_content:float)\nHas_carb_content(\"Dosa\", 20).\n.decl Has_carb_limit(Diet:symbol, Carb_limit:float)\nHas_carb_limit(\"keto diet\", 20).\n.decl Answer()\nAnswer() :- Has_carb_content(\"Dosa\", carb_content), Has_carb_limit(\"keto diet\", carb_limit), carb_content <= carb_limit.\n.output Answer\n\n"]}
{"id": 1167, "answer": false, "completion": ".decl Has_hair_length(Person:symbol, Hair_length:float)\nHas_hair_length(\"James Hetfield\", 0.5).\nHas_hair_length(\"Lars Ulrich\", 0.5).\nHas_hair_length(\"Kirk Hammett\", 0.5).\nHas_hair_length(\"Jason Newsted\", 0.5).\nHas_hair_length(\"Robert Trujillo\", 0.5).\n.decl Has_sales(Group:symbol, Sales:float)\nHas_sales(\"Metallica\", 100).\n.decl Answer()\nAnswer() :- Has_hair_length(\"James Hetfield\", hair_length1), Has_hair_length(\"Lars Ulrich\", hair_length2), Has_hair_length(\"Kirk Hammett\", hair_length3), Has_hair_length(\"Jason Newsted\", hair_length4), Has_hair_length(\"Robert Trujillo\", hair_length5), Has_sales(\"Metallica\", sales1), Has_sales(\"Metallica\", sales2), hair_length1 < 0.5, hair_length2 < 0.5, hair_length3 < 0.5, hair_length4 < 0.5, hair_length5 < 0.5, sales1 > sales2.\n.output Answer\n\n\n", "completions": [".decl Has_hair_length(Person:symbol, Hair_length:float)\nHas_hair_length(\"James Hetfield\", 0.5).\nHas_hair_length(\"Lars Ulrich\", 0.5).\nHas_hair_length(\"Kirk Hammett\", 0.5).\nHas_hair_length(\"Jason Newsted\", 0.5).\nHas_hair_length(\"Robert Trujillo\", 0.5).\n.decl Has_sales(Group:symbol, Sales:float)\nHas_sales(\"Metallica\", 100).\n.decl Answer()\nAnswer() :- Has_hair_length(\"James Hetfield\", hair_length1), Has_hair_length(\"Lars Ulrich\", hair_length2), Has_hair_length(\"Kirk Hammett\", hair_length3), Has_hair_length(\"Jason Newsted\", hair_length4), Has_hair_length(\"Robert Trujillo\", hair_length5), Has_sales(\"Metallica\", sales1), Has_sales(\"Metallica\", sales2), hair_length1 < 0.5, hair_length2 < 0.5, hair_length3 < 0.5, hair_length4 < 0.5, hair_length5 < 0.5, sales1 > sales2.\n.output Answer\n\n\n"]}
{"id": 1168, "answer": false, "completion": ".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Quiet\", 180).\n.decl Has_IQ_requirement(University:symbol, IQ_requirement:float)\nHas_IQ_requirement(\"Haub\", 100).\n.decl Answer()\nAnswer() :- Has_IQ(\"Quiet\", iq), Has_IQ_requirement(\"Haub\", iq_requirement), iq < iq_requirement.\n.output Answer\n\n", "completions": [".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Quiet\", 180).\n.decl Has_IQ_requirement(University:symbol, IQ_requirement:float)\nHas_IQ_requirement(\"Haub\", 100).\n.decl Answer()\nAnswer() :- Has_IQ(\"Quiet\", iq), Has_IQ_requirement(\"Haub\", iq_requirement), iq < iq_requirement.\n.output Answer\n\n"]}
{"id": 1169, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Mount Emei\", 1.2e+11).\n.decl Can_lift(Crane:symbol, Weight:float)\nCan_lift(\"Liebherr LTM 11200-9.1\", 1.2e+11).\n.decl Answer()\nAnswer() :- Has_weight(\"Mount Emei\", weight), Can_lift(\"Liebherr LTM 11200-9.1\", weight).\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Mount Emei\", 1.2e+11).\n.decl Can_lift(Crane:symbol, Weight:float)\nCan_lift(\"Liebherr LTM 11200-9.1\", 1.2e+11).\n.decl Answer()\nAnswer() :- Has_weight(\"Mount Emei\", weight), Can_lift(\"Liebherr LTM 11200-9.1\", weight).\n.output Answer\n\n"]}
{"id": 1170, "answer": true, "completion": ".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"snoring\", \"good breathing while sleeping\").\n.decl Answer()\nAnswer() :- Causes(\"snoring\", \"good breathing while sleeping\").\n.output Answer\n\n", "completions": [".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"snoring\", \"good breathing while sleeping\").\n.decl Answer()\nAnswer() :- Causes(\"snoring\", \"good breathing while sleeping\").\n.output Answer\n\n"]}
{"id": 1171, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"ABBA\", 4).\nHas_n_members(\"The Beatles\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"ABBA\", n_members1), Has_n_members(\"The Beatles\", n_members2), n_members1 != n_members2.\n.output Answer\n\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"ABBA\", 4).\nHas_n_members(\"The Beatles\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"ABBA\", n_members1), Has_n_members(\"The Beatles\", n_members2), n_members1 != n_members2.\n.output Answer\n\n\n"]}
{"id": 1172, "answer": true, "completion": ".decl Has_edge(Person:symbol, Edge:symbol)\nHas_edge(\"Jackson Pollock\", \"straight edge\").\n.decl Answer()\nAnswer() :- Has_edge(\"Jackson Pollock\", \"straight edge\").\n.output Answer\n\n", "completions": [".decl Has_edge(Person:symbol, Edge:symbol)\nHas_edge(\"Jackson Pollock\", \"straight edge\").\n.decl Answer()\nAnswer() :- Has_edge(\"Jackson Pollock\", \"straight edge\").\n.output Answer\n\n"]}
{"id": 1173, "answer": false, "completion": ".decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Dungeons and Dragons\", 2).\n.decl Answer()\nAnswer() :- Has_n_players(\"Dungeons and Dragons\", n_players), n_players = 1.\n.output Answer\n\n", "completions": [".decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Dungeons and Dragons\", 2).\n.decl Answer()\nAnswer() :- Has_n_players(\"Dungeons and Dragons\", n_players), n_players = 1.\n.output Answer\n\n"]}
{"id": 1174, "answer": true, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"game engine\", \"fuel injector\").\n.decl Answer()\nAnswer() :- Has_part(\"game engine\", \"fuel injector\").\n.output Answer\n\n", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"game engine\", \"fuel injector\").\n.decl Answer()\nAnswer() :- Has_part(\"game engine\", \"fuel injector\").\n.output Answer\n\n"]}
{"id": 1175, "answer": true, "completion": ".decl Has_children(Person:symbol, Children:symbol)\nHas_children(\"Heracles\", \"Iphicles\").\nHas_children(\"Heracles\", \"Hyllus\").\nHas_children(\"Heracles\", \"Therimachus\").\nHas_children(\"Heracles\", \"Ctesippus\").\nHas_children(\"Heracles\", \"Deicoon\").\nHas_children(\"Heracles\", \"Macaria\").\n.decl Happens_in_presence_of(Event:symbol, Person:symbol)\nHappens_in_presence_of(\"Heracles's funeral pyre\", \"Iphicles\").\nHappens_in_presence_of(\"Heracles's funeral pyre\", \"Hyllus\").\nHappens_in_presence_of(\"Heracles's funeral pyre\", \"Therimachus\").\nHappens_in_presence_of(\"Heracles's funeral pyre\", \"Ctesippus\").\nHappens_in_presence_of(\"Heracles's funeral pyre\", \"Deicoon\").\nHappens_in_presence_of(\"Heracles's funeral pyre\", \"Macaria\").\n.decl Answer()\nAnswer() :- Has_children(\"Heracles\", child), Happens_in_presence_of(\"Heracles's funeral pyre\", child).\n.output Answer\n\n", "completions": [".decl Has_children(Person:symbol, Children:symbol)\nHas_children(\"Heracles\", \"Iphicles\").\nHas_children(\"Heracles\", \"Hyllus\").\nHas_children(\"Heracles\", \"Therimachus\").\nHas_children(\"Heracles\", \"Ctesippus\").\nHas_children(\"Heracles\", \"Deicoon\").\nHas_children(\"Heracles\", \"Macaria\").\n.decl Happens_in_presence_of(Event:symbol, Person:symbol)\nHappens_in_presence_of(\"Heracles's funeral pyre\", \"Iphicles\").\nHappens_in_presence_of(\"Heracles's funeral pyre\", \"Hyllus\").\nHappens_in_presence_of(\"Heracles's funeral pyre\", \"Therimachus\").\nHappens_in_presence_of(\"Heracles's funeral pyre\", \"Ctesippus\").\nHappens_in_presence_of(\"Heracles's funeral pyre\", \"Deicoon\").\nHappens_in_presence_of(\"Heracles's funeral pyre\", \"Macaria\").\n.decl Answer()\nAnswer() :- Has_children(\"Heracles\", child), Happens_in_presence_of(\"Heracles's funeral pyre\", child).\n.output Answer\n\n"]}
{"id": 1176, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"moon\", 2.19e+18).\nHas_volume(\"Black Sea\", 6.4e+14).\n.decl Answer()\nAnswer() :- Has_volume(\"moon\", volume1), Has_volume(\"Black Sea\", volume2), volume1 < volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"moon\", 2.19e+18).\nHas_volume(\"Black Sea\", 6.4e+14).\n.decl Answer()\nAnswer() :- Has_volume(\"moon\", volume1), Has_volume(\"Black Sea\", volume2), volume1 < volume2.\n.output Answer\n\n"]}
{"id": 1177, "answer": false, "completion": ".decl Is_visible(Object:symbol, Time:symbol)\nIs_visible(\"peach blossoms\", \"spring\").\nIs_visible(\"Andromeda\", \"summer\").\n.decl Answer()\nAnswer() :- Is_visible(\"peach blossoms\", time1), Is_visible(\"Andromeda\", time2), time1 = time2.\n.output Answer\n\n", "completions": [".decl Is_visible(Object:symbol, Time:symbol)\nIs_visible(\"peach blossoms\", \"spring\").\nIs_visible(\"Andromeda\", \"summer\").\n.decl Answer()\nAnswer() :- Is_visible(\"peach blossoms\", time1), Is_visible(\"Andromeda\", time2), time1 = time2.\n.output Answer\n\n"]}
{"id": 1178, "answer": true, "completion": ".decl Has_Bacon_number(Person:symbol, Bacon_number:float)\nHas_Bacon_number(\"Al Pacino\", 2).\nHas_Bacon_number(\"Margaret Qualley\", 2).\n.decl Answer()\nAnswer() :- Has_Bacon_number(\"Al Pacino\", bacon_number1), Has_Bacon_number(\"Margaret Qualley\", bacon_number2), bacon_number1 = bacon_number2.\n.output Answer\n\n", "completions": [".decl Has_Bacon_number(Person:symbol, Bacon_number:float)\nHas_Bacon_number(\"Al Pacino\", 2).\nHas_Bacon_number(\"Margaret Qualley\", 2).\n.decl Answer()\nAnswer() :- Has_Bacon_number(\"Al Pacino\", bacon_number1), Has_Bacon_number(\"Margaret Qualley\", bacon_number2), bacon_number1 = bacon_number2.\n.output Answer\n\n"]}
{"id": 1179, "answer": true, "completion": ".decl Has_n_words(Text:symbol, N_words:float)\nHas_n_words(\"tenth Amendment to the Constitution\", 10).\nHas_n_words(\"Pitman shorthand\", 1).\n.decl Answer()\nAnswer() :- Has_n_words(\"tenth Amendment to the Constitution\", n_words1), Has_n_words(\"Pitman shorthand\", n_words2), n_words1 > n_words2.\n.output Answer\n\n", "completions": [".decl Has_n_words(Text:symbol, N_words:float)\nHas_n_words(\"tenth Amendment to the Constitution\", 10).\nHas_n_words(\"Pitman shorthand\", 1).\n.decl Answer()\nAnswer() :- Has_n_words(\"tenth Amendment to the Constitution\", n_words1), Has_n_words(\"Pitman shorthand\", n_words2), n_words1 > n_words2.\n.output Answer\n\n"]}
{"id": 1180, "answer": true, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Ivan the Terrible\", \"Ivan the Terrible\").\nHas_nickname(\"Vasili III of Russia\", \"Vasili the Dark\").\nHas_nickname(\"Ivan II of Russia\", \"Ivan the Red\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Ivan the Terrible\", nickname1), Has_nickname(\"Vasili III of Russia\", nickname2), nickname1 != nickname2, nickname1 != \"Vasili the Dark\", nickname1 != \"Ivan the Red\".\nAnswer() :- Has_nickname(\"Ivan the Terrible\", nickname1), Has_nickname(\"Ivan II of Russia\", nickname2), nickname1 != nickname2, nickname1 != \"Ivan the Red\", nickname1 != \"Ivan the Terrible\".\n.output Answer\n\n", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Ivan the Terrible\", \"Ivan the Terrible\").\nHas_nickname(\"Vasili III of Russia\", \"Vasili the Dark\").\nHas_nickname(\"Ivan II of Russia\", \"Ivan the Red\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Ivan the Terrible\", nickname1), Has_nickname(\"Vasili III of Russia\", nickname2), nickname1 != nickname2, nickname1 != \"Vasili the Dark\", nickname1 != \"Ivan the Red\".\nAnswer() :- Has_nickname(\"Ivan the Terrible\", nickname1), Has_nickname(\"Ivan II of Russia\", nickname2), nickname1 != nickname2, nickname1 != \"Ivan the Red\", nickname1 != \"Ivan the Terrible\".\n.output Answer\n\n"]}
{"id": 1181, "answer": false, "completion": ".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Zelda Williams\", \"Robin Williams\").\nHas_parent(\"Zelda Williams\", \"Marsha Garces Williams\").\nHas_parent(\"Robin Williams\", \"Robert Fitzgerald Williams\").\nHas_parent(\"Robin Williams\", \"Laurie McLaurin\").\nHas_parent(\"Robert Fitzgerald Williams\", \"Robert Williams\").\nHas_parent(\"Robert Fitzgerald Williams\", \"Florence Williams\").\nHas_parent(\"Laurie McLaurin\", \"Robert McLaurin\").\nHas_parent(\"Laurie McLaurin\", \"Laura McLaurin\").\n.decl Has_sibling(Person:symbol, Sibling:symbol)\nHas_sibling(person1, person2) :- Has_parent(person1, parent), Has_parent(person2, parent), person1 != person2.\n.decl Has_cousin(Person:symbol, Cousin:symbol)\nHas_cousin(person1, person2) :- Has_sibling(person1, sibling), Has_parent(person2, sibling).\n.decl Answer()\nAnswer() :- Has_cousin(\"Zelda Williams\", cousin), Has_parent(cousin, \"Robin Williams\").\n.output Answer\n\n", "completions": [".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Zelda Williams\", \"Robin Williams\").\nHas_parent(\"Zelda Williams\", \"Marsha Garces Williams\").\nHas_parent(\"Robin Williams\", \"Robert Fitzgerald Williams\").\nHas_parent(\"Robin Williams\", \"Laurie McLaurin\").\nHas_parent(\"Robert Fitzgerald Williams\", \"Robert Williams\").\nHas_parent(\"Robert Fitzgerald Williams\", \"Florence Williams\").\nHas_parent(\"Laurie McLaurin\", \"Robert McLaurin\").\nHas_parent(\"Laurie McLaurin\", \"Laura McLaurin\").\n.decl Has_sibling(Person:symbol, Sibling:symbol)\nHas_sibling(person1, person2) :- Has_parent(person1, parent), Has_parent(person2, parent), person1 != person2.\n.decl Has_cousin(Person:symbol, Cousin:symbol)\nHas_cousin(person1, person2) :- Has_sibling(person1, sibling), Has_parent(person2, sibling).\n.decl Answer()\nAnswer() :- Has_cousin(\"Zelda Williams\", cousin), Has_parent(cousin, \"Robin Williams\").\n.output Answer\n\n"]}
{"id": 1182, "answer": false, "completion": ".decl Has_n_chapters(Book:symbol, N_chapters:float)\nHas_n_chapters(\"New Testament\", 260).\n.decl Has_n_verses(Book:symbol, N_verses:float)\nHas_n_verses(\"New Testament\", 7,957).\n.decl Answer()\nAnswer() :- Has_n_chapters(\"New Testament\", n_chapters), Has_n_verses(\"New Testament\", n_verses), n_chapters > n_verses.\n.output Answer\n\n", "completions": [".decl Has_n_chapters(Book:symbol, N_chapters:float)\nHas_n_chapters(\"New Testament\", 260).\n.decl Has_n_verses(Book:symbol, N_verses:float)\nHas_n_verses(\"New Testament\", 7,957).\n.decl Answer()\nAnswer() :- Has_n_chapters(\"New Testament\", n_chapters), Has_n_verses(\"New Testament\", n_verses), n_chapters > n_verses.\n.output Answer\n\n"]}
{"id": 1183, "answer": true, "completion": ".decl Has_type(Pancake:symbol, Type:symbol)\nHas_type(\"pancake\", \"silver dollar\").\nHas_type(\"pancake\", \"golden dollar\").\n.decl Is_named_after(Object:symbol, Name:symbol)\nIs_named_after(\"silver dollar\", \"silver dollar coin\").\nIs_named_after(\"golden dollar\", \"golden dollar coin\").\n.decl Answer()\nAnswer() :- Has_type(\"pancake\", type), Is_named_after(type, name).\n.output Answer\n\n", "completions": [".decl Has_type(Pancake:symbol, Type:symbol)\nHas_type(\"pancake\", \"silver dollar\").\nHas_type(\"pancake\", \"golden dollar\").\n.decl Is_named_after(Object:symbol, Name:symbol)\nIs_named_after(\"silver dollar\", \"silver dollar coin\").\nIs_named_after(\"golden dollar\", \"golden dollar coin\").\n.decl Answer()\nAnswer() :- Has_type(\"pancake\", type), Is_named_after(type, name).\n.output Answer\n\n"]}
{"id": 1184, "answer": true, "completion": ".decl Has_anatomy(Animal:symbol, Anatomy:symbol)\nHas_anatomy(\"camel\", \"hump\").\n.decl Is_joke_material(Anatomy:symbol)\nIs_joke_material(\"hump\").\n.decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"jokes\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Has_anatomy(\"camel\", anatomy), Is_joke_material(anatomy), Happens_on_day(\"jokes\", \"Wednesday\").\n.output Answer\n\n", "completions": [".decl Has_anatomy(Animal:symbol, Anatomy:symbol)\nHas_anatomy(\"camel\", \"hump\").\n.decl Is_joke_material(Anatomy:symbol)\nIs_joke_material(\"hump\").\n.decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"jokes\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Has_anatomy(\"camel\", anatomy), Is_joke_material(anatomy), Happens_on_day(\"jokes\", \"Wednesday\").\n.output Answer\n\n"]}
{"id": 1185, "answer": true, "completion": ".decl Wrestles(Person:symbol, Event:symbol)\nWrestles(\"Bruiser Brody\", \"WWE Raw\").\n.decl Answer()\nAnswer() :- Wrestles(\"Bruiser Brody\", \"WWE Raw\").\n.output Answer\n\n", "completions": [".decl Wrestles(Person:symbol, Event:symbol)\nWrestles(\"Bruiser Brody\", \"WWE Raw\").\n.decl Answer()\nAnswer() :- Wrestles(\"Bruiser Brody\", \"WWE Raw\").\n.output Answer\n\n"]}
{"id": 1186, "answer": false, "completion": ".decl Studies(Field:symbol, Object:symbol)\nStudies(\"zoology\", \"animals\").\n.decl Is_a(Object:symbol, Class:symbol)\nIs_a(\"strigoi\", \"vampire\").\nIs_a(\"vampire\", \"animal\").\n.decl Answer()\nAnswer() :- Studies(\"zoology\", class), Is_a(\"strigoi\", class).\n.output Answer\n\n", "completions": [".decl Studies(Field:symbol, Object:symbol)\nStudies(\"zoology\", \"animals\").\n.decl Is_a(Object:symbol, Class:symbol)\nIs_a(\"strigoi\", \"vampire\").\nIs_a(\"vampire\", \"animal\").\n.decl Answer()\nAnswer() :- Studies(\"zoology\", class), Is_a(\"strigoi\", class).\n.output Answer\n\n"]}
{"id": 1187, "answer": true, "completion": ".decl Has_race(Person:symbol, Race:symbol)\nHas_race(\"Depala\", \"Dwarf\").\n.decl Is_in_game(Person:symbol, Game:symbol)\nIs_in_game(\"Depala\", \"World of Warcraft\").\n.decl Answer()\nAnswer() :- Has_race(\"Depala\", race), Is_in_game(\"Depala\", \"World of Warcraft\").\n.output Answer\n\n", "completions": [".decl Has_race(Person:symbol, Race:symbol)\nHas_race(\"Depala\", \"Dwarf\").\n.decl Is_in_game(Person:symbol, Game:symbol)\nIs_in_game(\"Depala\", \"World of Warcraft\").\n.decl Answer()\nAnswer() :- Has_race(\"Depala\", race), Is_in_game(\"Depala\", \"World of Warcraft\").\n.output Answer\n\n"]}
{"id": 1188, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"twin1\", 2000).\nBorn_in_year(\"twin2\", 2000).\n.decl Answer()\nAnswer() :- Born_in_year(\"twin1\", year1), Born_in_year(\"twin2\", year2), year1 = year2.\n.output Answer\n\n", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"twin1\", 2000).\nBorn_in_year(\"twin2\", 2000).\n.decl Answer()\nAnswer() :- Born_in_year(\"twin1\", year1), Born_in_year(\"twin2\", year2), year1 = year2.\n.output Answer\n\n"]}
{"id": 1189, "answer": true, "completion": ".decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"Tom Bosley\", \"video games\").\n.decl Can_do(Activity:symbol, Device:symbol)\nCan_do(\"video games\", \"PlayStation 4\").\n.decl Answer()\nAnswer() :- Enjoys(\"Tom Bosley\", activity), Can_do(activity, \"PlayStation 4\").\n.output Answer\n\n", "completions": [".decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"Tom Bosley\", \"video games\").\n.decl Can_do(Activity:symbol, Device:symbol)\nCan_do(\"video games\", \"PlayStation 4\").\n.decl Answer()\nAnswer() :- Enjoys(\"Tom Bosley\", activity), Can_do(activity, \"PlayStation 4\").\n.output Answer\n\n"]}
{"id": 1190, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\nHas_n_members(\"The Osmonds\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members1), Has_n_members(\"The Osmonds\", n_members2), n_members1 > n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\nHas_n_members(\"The Osmonds\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members1), Has_n_members(\"The Osmonds\", n_members2), n_members1 > n_members2.\n.output Answer\n\n"]}
{"id": 1191, "answer": true, "completion": ".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"kaffir lime\", -20).\nHas_melting_point(\"candle\", -20).\n.decl Answer()\nAnswer() :- Has_melting_point(\"kaffir lime\", melting_point1), Has_melting_point(\"candle\", melting_point2), melting_point1 <= melting_point2.\n.output Answer\n\n", "completions": [".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"kaffir lime\", -20).\nHas_melting_point(\"candle\", -20).\n.decl Answer()\nAnswer() :- Has_melting_point(\"kaffir lime\", melting_point1), Has_melting_point(\"candle\", melting_point2), melting_point1 <= melting_point2.\n.output Answer\n\n"]}
{"id": 1192, "answer": false, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Alcatraz Island\", 1.5).\nHas_area(\"football field\", 57000).\n.decl Answer()\nAnswer() :- Has_area(\"Alcatraz Island\", area1), Has_area(\"football field\", area2), area1 >= area2.\n.output Answer\n\n", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Alcatraz Island\", 1.5).\nHas_area(\"football field\", 57000).\n.decl Answer()\nAnswer() :- Has_area(\"Alcatraz Island\", area1), Has_area(\"football field\", area2), area1 >= area2.\n.output Answer\n\n"]}
{"id": 1193, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Region:symbol)\nLives_in(\"Iberian wolf\", \"Spain\").\nLives_in(\"Iberian wolf\", \"Portugal\").\n.decl Is_part_of(Region:symbol, Region2:symbol)\nIs_part_of(\"Spain\", \"Europe\").\nIs_part_of(\"Portugal\", \"Europe\").\nIs_part_of(\"Europe\", \"Northern Hemisphere\").\nIs_part_of(\"Southern United States\", \"Northern Hemisphere\").\n.decl Answer()\nAnswer() :- Lives_in(\"Iberian wolf\", region1), Is_part_of(region1, region2), Is_part_of(\"Southern United States\", region2).\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Region:symbol)\nLives_in(\"Iberian wolf\", \"Spain\").\nLives_in(\"Iberian wolf\", \"Portugal\").\n.decl Is_part_of(Region:symbol, Region2:symbol)\nIs_part_of(\"Spain\", \"Europe\").\nIs_part_of(\"Portugal\", \"Europe\").\nIs_part_of(\"Europe\", \"Northern Hemisphere\").\nIs_part_of(\"Southern United States\", \"Northern Hemisphere\").\n.decl Answer()\nAnswer() :- Lives_in(\"Iberian wolf\", region1), Is_part_of(region1, region2), Is_part_of(\"Southern United States\", region2).\n.output Answer\n\n"]}
{"id": 1194, "answer": true, "completion": ".decl Has_pain_index(Animal:symbol, Pain_index:float)\nHas_pain_index(\"spider wasp\", 4).\nHas_pain_index(\"bullet ant\", 4.5).\n.decl Answer()\nAnswer() :- Has_pain_index(\"spider wasp\", pain_index1), Has_pain_index(\"bullet ant\", pain_index2), pain_index1 < pain_index2.\n.output Answer\n\n", "completions": [".decl Has_pain_index(Animal:symbol, Pain_index:float)\nHas_pain_index(\"spider wasp\", 4).\nHas_pain_index(\"bullet ant\", 4.5).\n.decl Answer()\nAnswer() :- Has_pain_index(\"spider wasp\", pain_index1), Has_pain_index(\"bullet ant\", pain_index2), pain_index1 < pain_index2.\n.output Answer\n\n"]}
{"id": 1195, "answer": true, "completion": ".decl Has_n_films(Company:symbol, N_films:float)\nHas_n_films(\"Disney\", 2).\n.decl Has_n_stories(Book:symbol, N_stories:float)\nHas_n_stories(\"Bible\", 66).\n.decl Answer()\nAnswer() :- Has_n_films(\"Disney\", n_films), Has_n_stories(\"Bible\", n_stories), n_films <= n_stories.\n.output Answer\n\n", "completions": [".decl Has_n_films(Company:symbol, N_films:float)\nHas_n_films(\"Disney\", 2).\n.decl Has_n_stories(Book:symbol, N_stories:float)\nHas_n_stories(\"Bible\", 66).\n.decl Answer()\nAnswer() :- Has_n_films(\"Disney\", n_films), Has_n_stories(\"Bible\", n_stories), n_films <= n_stories.\n.output Answer\n\n"]}
{"id": 1196, "answer": true, "completion": ".decl Buys(Person:symbol, Object:symbol)\nBuys(\"someone\", \"crickets\").\n.decl Owns(Person:symbol, Object:symbol)\nOwns(\"someone\", \"pets\").\n.decl Answer()\nAnswer() :- Buys(person, \"crickets\"), Owns(person, \"pets\").\n.output Answer\n\n", "completions": [".decl Buys(Person:symbol, Object:symbol)\nBuys(\"someone\", \"crickets\").\n.decl Owns(Person:symbol, Object:symbol)\nOwns(\"someone\", \"pets\").\n.decl Answer()\nAnswer() :- Buys(person, \"crickets\"), Owns(person, \"pets\").\n.output Answer\n\n"]}
{"id": 1197, "answer": true, "completion": ".decl Costs(Object:symbol, Price:float)\nCosts(\"2009 eclipse\", 1).\nCosts(\"TIME magazine\", 5).\n.decl Answer()\nAnswer() :- Costs(\"2009 eclipse\", price1), Costs(\"TIME magazine\", price2), price1 * 11 >= price2.\n.output Answer\n\n", "completions": [".decl Costs(Object:symbol, Price:float)\nCosts(\"2009 eclipse\", 1).\nCosts(\"TIME magazine\", 5).\n.decl Answer()\nAnswer() :- Costs(\"2009 eclipse\", price1), Costs(\"TIME magazine\", price2), price1 * 11 >= price2.\n.output Answer\n\n"]}
{"id": 1198, "answer": false, "completion": ".decl Has_real_name(Person:symbol, Real_name:symbol)\nHas_real_name(\"Lil Wayne\", \"Dwayne Michael Carter Jr.\").\n.decl Has_n_Grammy_awards(Person:symbol, N_Grammy_awards:float)\nHas_n_Grammy_awards(\"Lil Wayne\", 4).\nHas_n_Grammy_awards(\"Wayne\", 1).\n.decl Answer()\nAnswer() :- Has_real_name(\"Lil Wayne\", real_name), Has_n_Grammy_awards(\"Lil Wayne\", n_Grammy_awards1), Has_n_Grammy_awards(\"Wayne\", n_Grammy_awards2), n_Grammy_awards1 > 4 * n_Grammy_awards2.\n.output Answer\n\n", "completions": [".decl Has_real_name(Person:symbol, Real_name:symbol)\nHas_real_name(\"Lil Wayne\", \"Dwayne Michael Carter Jr.\").\n.decl Has_n_Grammy_awards(Person:symbol, N_Grammy_awards:float)\nHas_n_Grammy_awards(\"Lil Wayne\", 4).\nHas_n_Grammy_awards(\"Wayne\", 1).\n.decl Answer()\nAnswer() :- Has_real_name(\"Lil Wayne\", real_name), Has_n_Grammy_awards(\"Lil Wayne\", n_Grammy_awards1), Has_n_Grammy_awards(\"Wayne\", n_Grammy_awards2), n_Grammy_awards1 > 4 * n_Grammy_awards2.\n.output Answer\n\n"]}
{"id": 1199, "answer": true, "completion": ".decl Can_be_preserved(Food:symbol, Method:symbol)\nCan_be_preserved(\"oysters\", \"refrigeration\").\nCan_be_preserved(\"oysters\", \"freezing\").\nCan_be_preserved(\"oysters\", \"canning\").\n.decl Answer()\nAnswer() :- Can_be_preserved(\"oysters\", method), method != \"refrigeration\".\n.output Answer\n\n", "completions": [".decl Can_be_preserved(Food:symbol, Method:symbol)\nCan_be_preserved(\"oysters\", \"refrigeration\").\nCan_be_preserved(\"oysters\", \"freezing\").\nCan_be_preserved(\"oysters\", \"canning\").\n.decl Answer()\nAnswer() :- Can_be_preserved(\"oysters\", method), method != \"refrigeration\".\n.output Answer\n\n"]}
{"id": 1200, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Kate Gosselin's household\", 8).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Bandy team\", 11).\n.decl Answer()\nAnswer() :- Has_n_members(\"Kate Gosselin's household\", n_members1), Has_n_members(\"Bandy team\", n_members2), n_members1 >= n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Kate Gosselin's household\", 8).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Bandy team\", 11).\n.decl Answer()\nAnswer() :- Has_n_members(\"Kate Gosselin's household\", n_members1), Has_n_members(\"Bandy team\", n_members2), n_members1 >= n_members2.\n.output Answer\n\n"]}
{"id": 1201, "answer": true, "completion": ".decl Chases(Animal_A:symbol, Animal_B:symbol)\nChases(\"emu\", \"bogan\").\n.decl Answer()\nAnswer() :- Chases(\"emu\", \"bogan\").\n.output Answer\n\n", "completions": [".decl Chases(Animal_A:symbol, Animal_B:symbol)\nChases(\"emu\", \"bogan\").\n.decl Answer()\nAnswer() :- Chases(\"emu\", \"bogan\").\n.output Answer\n\n"]}
{"id": 1202, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Cuban revolution\", \"1953-1959\").\nHappens_in_time(\"population boom\", \"1946-1964\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Cuban revolution\", time1), Happens_in_time(\"population boom\", time2), time1 = time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Cuban revolution\", \"1953-1959\").\nHappens_in_time(\"population boom\", \"1946-1964\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Cuban revolution\", time1), Happens_in_time(\"population boom\", time2), time1 = time2.\n.output Answer\n\n"]}
{"id": 1203, "answer": false, "completion": ".decl Is_in(Object:symbol, Place:symbol)\nIs_in(\"tobacco use\", \"Alice's Adventures in Wonderland\").\n.decl Is_made_to_seem(Object:symbol, Adjective:symbol)\nIs_made_to_seem(\"tobacco use\", \"enjoyable\").\n.decl Answer()\nAnswer() :- Is_in(\"tobacco use\", place), Is_made_to_seem(\"tobacco use\", adjective), Is_in(place, adjective).\n.output Answer\n\n", "completions": [".decl Is_in(Object:symbol, Place:symbol)\nIs_in(\"tobacco use\", \"Alice's Adventures in Wonderland\").\n.decl Is_made_to_seem(Object:symbol, Adjective:symbol)\nIs_made_to_seem(\"tobacco use\", \"enjoyable\").\n.decl Answer()\nAnswer() :- Is_in(\"tobacco use\", place), Is_made_to_seem(\"tobacco use\", adjective), Is_in(place, adjective).\n.output Answer\n\n"]}
{"id": 1204, "answer": true, "completion": ".decl Kills(Cause:symbol, Effect:symbol)\nKills(\"allergies\", \"person\").\nKills(\"choking\", \"person\").\nKills(\"eating grapefruit\", \"person\").\n.decl Answer()\nAnswer() :- Kills(\"allergies\", \"person\"), Kills(\"choking\", \"person\"), Kills(\"eating grapefruit\", \"person\").\n.output Answer\n\n", "completions": [".decl Kills(Cause:symbol, Effect:symbol)\nKills(\"allergies\", \"person\").\nKills(\"choking\", \"person\").\nKills(\"eating grapefruit\", \"person\").\n.decl Answer()\nAnswer() :- Kills(\"allergies\", \"person\"), Kills(\"choking\", \"person\"), Kills(\"eating grapefruit\", \"person\").\n.output Answer\n\n"]}
{"id": 1205, "answer": true, "completion": ".decl Is_banned_from(Person:symbol, Place:symbol)\nIs_banned_from(\"Kane (wrestler)\", \"WCW\").\n.decl Is_headquarters_city_of(City:symbol, Company:symbol)\nIs_headquarters_city_of(\"Atlanta\", \"WCW\").\n.decl Answer()\nAnswer() :- Is_banned_from(\"Kane (wrestler)\", company), Is_headquarters_city_of(city, company).\n.output Answer\n\n", "completions": [".decl Is_banned_from(Person:symbol, Place:symbol)\nIs_banned_from(\"Kane (wrestler)\", \"WCW\").\n.decl Is_headquarters_city_of(City:symbol, Company:symbol)\nIs_headquarters_city_of(\"Atlanta\", \"WCW\").\n.decl Answer()\nAnswer() :- Is_banned_from(\"Kane (wrestler)\", company), Is_headquarters_city_of(city, company).\n.output Answer\n\n"]}
{"id": 1206, "answer": true, "completion": ".decl Is_good_for(Product:symbol, Person:symbol)\nIs_good_for(\"ammonia fighting cleaner\", \"pet owners\").\n.decl Answer()\nAnswer() :- Is_good_for(\"ammonia fighting cleaner\", \"pet owners\").\n.output Answer\n\n", "completions": [".decl Is_good_for(Product:symbol, Person:symbol)\nIs_good_for(\"ammonia fighting cleaner\", \"pet owners\").\n.decl Answer()\nAnswer() :- Is_good_for(\"ammonia fighting cleaner\", \"pet owners\").\n.output Answer\n\n"]}
{"id": 1207, "answer": false, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Wembley Stadium\", 90000).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"Mongolia\", 3000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Wembley Stadium\", capacity), Has_population(\"Mongolia\", population), capacity >= population.\n.output Answer\n\n", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Wembley Stadium\", 90000).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"Mongolia\", 3000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Wembley Stadium\", capacity), Has_population(\"Mongolia\", population), capacity >= population.\n.output Answer\n\n"]}
{"id": 1208, "answer": true, "completion": ".decl Happens_on_date(Event:symbol, Date:symbol)\nHappens_on_date(\"Holy Saturday\", \"April 20\").\nHappens_on_date(\"Holy Saturday\", \"April 20, 2019\").\n.decl Answer()\nAnswer() :- Happens_on_date(\"Holy Saturday\", \"April 20, 2019\").\n.output Answer\n\n", "completions": [".decl Happens_on_date(Event:symbol, Date:symbol)\nHappens_on_date(\"Holy Saturday\", \"April 20\").\nHappens_on_date(\"Holy Saturday\", \"April 20, 2019\").\n.decl Answer()\nAnswer() :- Happens_on_date(\"Holy Saturday\", \"April 20, 2019\").\n.output Answer\n\n"]}
{"id": 1209, "answer": true, "completion": ".decl Has_planted_flag(Organization:symbol, Planet:symbol)\nHas_planted_flag(\"CNES\", \"moon\").\n.decl Answer()\nAnswer() :- Has_planted_flag(\"CNES\", \"moon\").\n.output Answer\n\n", "completions": [".decl Has_planted_flag(Organization:symbol, Planet:symbol)\nHas_planted_flag(\"CNES\", \"moon\").\n.decl Answer()\nAnswer() :- Has_planted_flag(\"CNES\", \"moon\").\n.output Answer\n\n"]}
{"id": 1210, "answer": false, "completion": ".decl Needs_to_know(Person:symbol, Topic:symbol)\nNeeds_to_know(\"Brad Peyton\", \"geology\").\nNeeds_to_know(\"Brad Peyton\", \"geography\").\nNeeds_to_know(\"Brad Peyton\", \"geophysics\").\n.decl Answer()\nAnswer() :- Needs_to_know(\"Brad Peyton\", \"seismology\").\n.output Answer\n\n", "completions": [".decl Needs_to_know(Person:symbol, Topic:symbol)\nNeeds_to_know(\"Brad Peyton\", \"geology\").\nNeeds_to_know(\"Brad Peyton\", \"geography\").\nNeeds_to_know(\"Brad Peyton\", \"geophysics\").\n.decl Answer()\nAnswer() :- Needs_to_know(\"Brad Peyton\", \"seismology\").\n.output Answer\n\n"]}
{"id": 1211, "answer": false, "completion": ".decl Has_average_SAT_score(University:symbol, SAT_score:float)\nHas_average_SAT_score(\"American Public University\", 1000).\n.decl Has_average_SAT_score(University:symbol, SAT_score:float)\nHas_average_SAT_score(\"Ku Klux Klan\", 1500).\n.decl Answer()\nAnswer() :- Has_average_SAT_score(\"American Public University\", sat_score1), Has_average_SAT_score(\"Ku Klux Klan\", sat_score2), sat_score1 < sat_score2.\n.output Answer\n\n", "completions": [".decl Has_average_SAT_score(University:symbol, SAT_score:float)\nHas_average_SAT_score(\"American Public University\", 1000).\n.decl Has_average_SAT_score(University:symbol, SAT_score:float)\nHas_average_SAT_score(\"Ku Klux Klan\", 1500).\n.decl Answer()\nAnswer() :- Has_average_SAT_score(\"American Public University\", sat_score1), Has_average_SAT_score(\"Ku Klux Klan\", sat_score2), sat_score1 < sat_score2.\n.output Answer\n\n"]}
{"id": 1212, "answer": true, "completion": ".decl Last_n_episodes(Show:symbol, N_episodes:float)\nLast_n_episodes(\"Desperate Housewives\", 180).\nLast_n_episodes(\"Lois & Clark: The New Adventures of Superman\", 87).\n.decl Answer()\nAnswer() :- Last_n_episodes(\"Desperate Housewives\", n_episodes1), Last_n_episodes(\"Lois & Clark: The New Adventures of Superman\", n_episodes2), n_episodes1 >= 2 * n_episodes2.\n.output Answer\n\n", "completions": [".decl Last_n_episodes(Show:symbol, N_episodes:float)\nLast_n_episodes(\"Desperate Housewives\", 180).\nLast_n_episodes(\"Lois & Clark: The New Adventures of Superman\", 87).\n.decl Answer()\nAnswer() :- Last_n_episodes(\"Desperate Housewives\", n_episodes1), Last_n_episodes(\"Lois & Clark: The New Adventures of Superman\", n_episodes2), n_episodes1 >= 2 * n_episodes2.\n.output Answer\n\n"]}
{"id": 1213, "answer": false, "completion": ".decl Appears_in(Person:symbol, Cartoon:symbol)\nAppears_in(\"Mickey Mouse\", \"Steamboat Willie\").\nAppears_in(\"Bugs Bunny\", \"A Wild Hare\").\n.decl Released_in(Cartoon:symbol, Year:float)\nReleased_in(\"Steamboat Willie\", 1928).\nReleased_in(\"A Wild Hare\", 1940).\n.decl Answer()\nAnswer() :- Appears_in(\"Mickey Mouse\", cartoon1), Appears_in(\"Bugs Bunny\", cartoon2), Released_in(cartoon1, year1), Released_in(cartoon2, year2), year1 = 1930, year2 = 1930.\n.output Answer\n\n", "completions": [".decl Appears_in(Person:symbol, Cartoon:symbol)\nAppears_in(\"Mickey Mouse\", \"Steamboat Willie\").\nAppears_in(\"Bugs Bunny\", \"A Wild Hare\").\n.decl Released_in(Cartoon:symbol, Year:float)\nReleased_in(\"Steamboat Willie\", 1928).\nReleased_in(\"A Wild Hare\", 1940).\n.decl Answer()\nAnswer() :- Appears_in(\"Mickey Mouse\", cartoon1), Appears_in(\"Bugs Bunny\", cartoon2), Released_in(cartoon1, year1), Released_in(cartoon2, year2), year1 = 1930, year2 = 1930.\n.output Answer\n\n"]}
{"id": 1214, "answer": true, "completion": ".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Terence Tao\", 230).\nHas_IQ(\"Eminem\", 92).\n.decl Answer()\nAnswer() :- Has_IQ(\"Terence Tao\", iq1), Has_IQ(\"Eminem\", iq2), iq1 > iq2.\n.output Answer\n\n", "completions": [".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Terence Tao\", 230).\nHas_IQ(\"Eminem\", 92).\n.decl Answer()\nAnswer() :- Has_IQ(\"Terence Tao\", iq1), Has_IQ(\"Eminem\", iq2), iq1 > iq2.\n.output Answer\n\n"]}
{"id": 1215, "answer": true, "completion": ".decl Is_in_county(Place:symbol, County:symbol)\nIs_in_county(\"Disney\", \"Los Angeles County\").\n.decl Answer()\nAnswer() :- Is_in_county(\"Disney\", \"Los Angeles County\").\n.output Answer\n\n", "completions": [".decl Is_in_county(Place:symbol, County:symbol)\nIs_in_county(\"Disney\", \"Los Angeles County\").\n.decl Answer()\nAnswer() :- Is_in_county(\"Disney\", \"Los Angeles County\").\n.output Answer\n\n"]}
{"id": 1216, "answer": true, "completion": ".decl Has_comma(Book:symbol, Has_comma:symbol)\nHas_comma(\"Bible\", \"yes\").\n.decl Answer()\nAnswer() :- Has_comma(\"Bible\", \"yes\").\n.output Answer\n\n", "completions": [".decl Has_comma(Book:symbol, Has_comma:symbol)\nHas_comma(\"Bible\", \"yes\").\n.decl Answer()\nAnswer() :- Has_comma(\"Bible\", \"yes\").\n.output Answer\n\n"]}
{"id": 1217, "answer": true, "completion": ".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"spaghetti\", \"gluten\").\n.decl Answer()\nAnswer() :- Contains(\"spaghetti\", \"gluten\").\n.output Answer\n\n", "completions": [".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"spaghetti\", \"gluten\").\n.decl Answer()\nAnswer() :- Contains(\"spaghetti\", \"gluten\").\n.output Answer\n\n"]}
{"id": 1218, "answer": false, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"BLT\", \"bacon\").\nHas_ingredient(\"BLT\", \"lettuce\").\nHas_ingredient(\"BLT\", \"tomato\").\nHas_ingredient(\"BLT\", \"bread\").\n.decl Famous_for(City:symbol, Animal_product:symbol)\nFamous_for(\"Kobe\", \"beef\").\n.decl Answer()\nAnswer() :- Famous_for(\"Kobe\", animal_product), Has_ingredient(\"BLT\", animal_product).\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"BLT\", \"bacon\").\nHas_ingredient(\"BLT\", \"lettuce\").\nHas_ingredient(\"BLT\", \"tomato\").\nHas_ingredient(\"BLT\", \"bread\").\n.decl Famous_for(City:symbol, Animal_product:symbol)\nFamous_for(\"Kobe\", \"beef\").\n.decl Answer()\nAnswer() :- Famous_for(\"Kobe\", animal_product), Has_ingredient(\"BLT\", animal_product).\n.output Answer\n\n"]}
{"id": 1219, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"camel\", 0.03).\nHas_volume(\"dog house\", 0.02).\n.decl Answer()\nAnswer() :- Has_volume(\"camel\", volume1), Has_volume(\"dog house\", volume2), volume1 <= volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"camel\", 0.03).\nHas_volume(\"dog house\", 0.02).\n.decl Answer()\nAnswer() :- Has_volume(\"camel\", volume1), Has_volume(\"dog house\", volume2), volume1 <= volume2.\n.output Answer\n\n"]}
{"id": 1220, "answer": true, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"skeleton\", \"bone\").\nHas_part(\"skeleton\", \"cartilage\").\nHas_part(\"skeleton\", \"ligament\").\nHas_part(\"skeleton\", \"tendon\").\nHas_part(\"skeleton\", \"skin\").\nHas_part(\"skeleton\", \"hair\").\n.decl Answer()\nAnswer() :- Has_part(\"skeleton\", \"hair\").\n.output Answer\n\n", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"skeleton\", \"bone\").\nHas_part(\"skeleton\", \"cartilage\").\nHas_part(\"skeleton\", \"ligament\").\nHas_part(\"skeleton\", \"tendon\").\nHas_part(\"skeleton\", \"skin\").\nHas_part(\"skeleton\", \"hair\").\n.decl Answer()\nAnswer() :- Has_part(\"skeleton\", \"hair\").\n.output Answer\n\n"]}
{"id": 1221, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"warthog\", \"Africa\").\n.decl Is_part_of(Place:symbol, Place2:symbol)\nIs_part_of(\"Africa\", \"Earth\").\nIs_part_of(\"Earth\", \"Milky Way\").\nIs_part_of(\"Milky Way\", \"Universe\").\nIs_part_of(\"Universe\", \"Multiverse\").\nIs_part_of(\"Broadway\", \"New York City\").\nIs_part_of(\"New York City\", \"Earth\").\n.decl Answer()\nAnswer() :- Lives_in(\"warthog\", place1), Is_part_of(place1, \"Broadway\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"warthog\", \"Africa\").\n.decl Is_part_of(Place:symbol, Place2:symbol)\nIs_part_of(\"Africa\", \"Earth\").\nIs_part_of(\"Earth\", \"Milky Way\").\nIs_part_of(\"Milky Way\", \"Universe\").\nIs_part_of(\"Universe\", \"Multiverse\").\nIs_part_of(\"Broadway\", \"New York City\").\nIs_part_of(\"New York City\", \"Earth\").\n.decl Answer()\nAnswer() :- Lives_in(\"warthog\", place1), Is_part_of(place1, \"Broadway\").\n.output Answer\n\n"]}
{"id": 1222, "answer": true, "completion": ".decl Has_race(Person:symbol, Race:symbol)\nHas_race(\"Opal Tometi\", \"black\").\n.decl Has_members(Group:symbol, Members:symbol)\nHas_members(\"Ku Klux Klan\", \"white\").\n.decl Answer()\nAnswer() :- Has_race(\"Opal Tometi\", race1), Has_members(\"Ku Klux Klan\", race2), race1 != race2.\n.output Answer\n\n", "completions": [".decl Has_race(Person:symbol, Race:symbol)\nHas_race(\"Opal Tometi\", \"black\").\n.decl Has_members(Group:symbol, Members:symbol)\nHas_members(\"Ku Klux Klan\", \"white\").\n.decl Answer()\nAnswer() :- Has_race(\"Opal Tometi\", race1), Has_members(\"Ku Klux Klan\", race2), race1 != race2.\n.output Answer\n\n"]}
{"id": 1223, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"cory catfish\", \"living fish\").\n.decl Answer()\nAnswer() :- Eats(\"cory catfish\", \"living fish\").\n.output Answer\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"cory catfish\", \"living fish\").\n.decl Answer()\nAnswer() :- Eats(\"cory catfish\", \"living fish\").\n.output Answer\n\n"]}
{"id": 1224, "answer": false, "completion": ".decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"John Muir\", \"vegetarian\").\n.decl Has_vitamin_D(Diet:symbol, Vitamin_D:symbol)\nHas_vitamin_D(\"vegetarian\", \"deficiency\").\n.decl Answer()\nAnswer() :- Has_diet(\"John Muir\", diet), Has_vitamin_D(diet, \"deficiency\"), !.\n.output Answer\n\n", "completions": [".decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"John Muir\", \"vegetarian\").\n.decl Has_vitamin_D(Diet:symbol, Vitamin_D:symbol)\nHas_vitamin_D(\"vegetarian\", \"deficiency\").\n.decl Answer()\nAnswer() :- Has_diet(\"John Muir\", diet), Has_vitamin_D(diet, \"deficiency\"), !.\n.output Answer\n\n"]}
{"id": 1225, "answer": true, "completion": ".decl Has_attire(Person:symbol, Attire:symbol)\nHas_attire(\"Orthodox Presbyterian\", \"modest\").\nHas_attire(\"1700s judge\", \"powdered wig\").\n.decl Answer()\nAnswer() :- Has_attire(\"Orthodox Presbyterian\", attire1), Has_attire(\"1700s judge\", attire2), attire1 != attire2.\n.output Answer\n\n\n", "completions": [".decl Has_attire(Person:symbol, Attire:symbol)\nHas_attire(\"Orthodox Presbyterian\", \"modest\").\nHas_attire(\"1700s judge\", \"powdered wig\").\n.decl Answer()\nAnswer() :- Has_attire(\"Orthodox Presbyterian\", attire1), Has_attire(\"1700s judge\", attire2), attire1 != attire2.\n.output Answer\n\n\n"]}
{"id": 1226, "answer": true, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"IKEA\", \"furniture\").\nSells(\"IKEA\", \"meatballs\").\nSells(\"IKEA\", \"meatballs\").\n.decl Answer()\nAnswer() :- Sells(store, \"furniture\"), Sells(store, \"meatballs\").\n.output Answer\n\n", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"IKEA\", \"furniture\").\nSells(\"IKEA\", \"meatballs\").\nSells(\"IKEA\", \"meatballs\").\n.decl Answer()\nAnswer() :- Sells(store, \"furniture\"), Sells(store, \"meatballs\").\n.output Answer\n\n"]}
{"id": 1227, "answer": false, "completion": ".decl Produces(Process:symbol, Product:symbol)\nProduces(\"hydropower\", \"electricity\").\nProduces(\"wind power\", \"electricity\").\nProduces(\"wind power\", \"chaff\").\n.decl Answer()\nAnswer() :- Produces(\"hydropower\", \"chaff\").\n.output Answer\n\n", "completions": [".decl Produces(Process:symbol, Product:symbol)\nProduces(\"hydropower\", \"electricity\").\nProduces(\"wind power\", \"electricity\").\nProduces(\"wind power\", \"chaff\").\n.decl Answer()\nAnswer() :- Produces(\"hydropower\", \"chaff\").\n.output Answer\n\n"]}
{"id": 1228, "answer": true, "completion": ".decl Has_art(Show:symbol, Art:symbol)\nHas_art(\"Family Guy\", \"animation\").\nHas_art(\"American Dad\", \"animation\").\n.decl Answer()\nAnswer() :- Has_art(\"Family Guy\", art1), Has_art(\"American Dad\", art2), art1 = art2.\n.output Answer\n\n", "completions": [".decl Has_art(Show:symbol, Art:symbol)\nHas_art(\"Family Guy\", \"animation\").\nHas_art(\"American Dad\", \"animation\").\n.decl Answer()\nAnswer() :- Has_art(\"Family Guy\", art1), Has_art(\"American Dad\", art2), art1 = art2.\n.output Answer\n\n"]}
{"id": 1229, "answer": false, "completion": ".decl Is_vegan(Person:symbol)\nIs_vegan(\"vegan\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"toast\", \"margarine\").\nHas_ingredient(\"toast\", \"butter\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Has_ingredient(\"toast\", \"butter\"), !Has_ingredient(\"toast\", \"margarine\").\n.output Answer\n\n", "completions": [".decl Is_vegan(Person:symbol)\nIs_vegan(\"vegan\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"toast\", \"margarine\").\nHas_ingredient(\"toast\", \"butter\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Has_ingredient(\"toast\", \"butter\"), !Has_ingredient(\"toast\", \"margarine\").\n.output Answer\n\n"]}
{"id": 1230, "answer": true, "completion": ".decl Has_OS(Computer:symbol, OS:symbol)\nHas_OS(\"MacBook Pro\", \"macOS\").\nHas_OS(\"MacBook Air\", \"macOS\").\nHas_OS(\"MacBook\", \"macOS\").\nHas_OS(\"iMac\", \"macOS\").\nHas_OS(\"Mac Pro\", \"macOS\").\nHas_OS(\"Mac mini\", \"macOS\").\nHas_OS(\"MacBook Pro\", \"Ubuntu\").\nHas_OS(\"MacBook Air\", \"Ubuntu\").\nHas_OS(\"MacBook\", \"Ubuntu\").\nHas_OS(\"iMac\", \"Ubuntu\").\nHas_OS(\"Mac Pro\", \"Ubuntu\").\nHas_OS(\"Mac mini\", \"Ubuntu\").\n.decl Answer()\nAnswer() :- Has_OS(computer, \"Ubuntu\"), Has_OS(computer, \"macOS\").\n.output Answer\n\n", "completions": [".decl Has_OS(Computer:symbol, OS:symbol)\nHas_OS(\"MacBook Pro\", \"macOS\").\nHas_OS(\"MacBook Air\", \"macOS\").\nHas_OS(\"MacBook\", \"macOS\").\nHas_OS(\"iMac\", \"macOS\").\nHas_OS(\"Mac Pro\", \"macOS\").\nHas_OS(\"Mac mini\", \"macOS\").\nHas_OS(\"MacBook Pro\", \"Ubuntu\").\nHas_OS(\"MacBook Air\", \"Ubuntu\").\nHas_OS(\"MacBook\", \"Ubuntu\").\nHas_OS(\"iMac\", \"Ubuntu\").\nHas_OS(\"Mac Pro\", \"Ubuntu\").\nHas_OS(\"Mac mini\", \"Ubuntu\").\n.decl Answer()\nAnswer() :- Has_OS(computer, \"Ubuntu\"), Has_OS(computer, \"macOS\").\n.output Answer\n\n"]}
{"id": 1231, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"Common warthog\", \"grass\").\nEats(\"Common warthog\", \"roots\").\nEats(\"Common warthog\", \"fruit\").\nEats(\"Common warthog\", \"insects\").\nEats(\"Common warthog\", \"eggs\").\nEats(\"Common warthog\", \"small mammals\").\nEats(\"Common warthog\", \"carrion\").\n.decl Has_food(Place:symbol, Food:symbol)\nHas_food(\"greenhouse\", \"fruit\").\nHas_food(\"greenhouse\", \"vegetables\").\nHas_food(\"greenhouse\", \"flowers\").\n.decl Answer()\nAnswer() :- Eats(\"Common warthog\", food), Has_food(\"greenhouse\", food).\n.output Answer\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"Common warthog\", \"grass\").\nEats(\"Common warthog\", \"roots\").\nEats(\"Common warthog\", \"fruit\").\nEats(\"Common warthog\", \"insects\").\nEats(\"Common warthog\", \"eggs\").\nEats(\"Common warthog\", \"small mammals\").\nEats(\"Common warthog\", \"carrion\").\n.decl Has_food(Place:symbol, Food:symbol)\nHas_food(\"greenhouse\", \"fruit\").\nHas_food(\"greenhouse\", \"vegetables\").\nHas_food(\"greenhouse\", \"flowers\").\n.decl Answer()\nAnswer() :- Eats(\"Common warthog\", food), Has_food(\"greenhouse\", food).\n.output Answer\n\n"]}
{"id": 1232, "answer": false, "completion": ".decl Has_average_bulk_carrier_capacity(Substance:symbol, Capacity:float)\nHas_average_bulk_carrier_capacity(\"bromine\", 100).\n.decl Has_average_bulk_carrier_capacity(Substance:symbol, Capacity:float)\nHas_average_bulk_carrier_capacity(\"bromine\", 100).\n.decl Has_melting_point(Substance:symbol, Temperature:float)\nHas_melting_point(\"bromine\", -7).\n.decl Answer()\nAnswer() :- Has_average_bulk_carrier_capacity(\"bromine\", capacity), Has_melting_point(\"bromine\", temperature), capacity >= temperature.\n.output Answer\n\n", "completions": [".decl Has_average_bulk_carrier_capacity(Substance:symbol, Capacity:float)\nHas_average_bulk_carrier_capacity(\"bromine\", 100).\n.decl Has_average_bulk_carrier_capacity(Substance:symbol, Capacity:float)\nHas_average_bulk_carrier_capacity(\"bromine\", 100).\n.decl Has_melting_point(Substance:symbol, Temperature:float)\nHas_melting_point(\"bromine\", -7).\n.decl Answer()\nAnswer() :- Has_average_bulk_carrier_capacity(\"bromine\", capacity), Has_melting_point(\"bromine\", temperature), capacity >= temperature.\n.output Answer\n\n"]}
{"id": 1233, "answer": true, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"Bern\", 120000).\n.decl Has_percentage_foreigners(City:symbol, Percentage_foreigners:float)\nHas_percentage_foreigners(\"Bern\", 20).\n.decl Answer()\nAnswer() :- Has_percentage_foreigners(\"Bern\", percentage_foreigners), percentage_foreigners > 10.\n.output Answer\n\n\n", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"Bern\", 120000).\n.decl Has_percentage_foreigners(City:symbol, Percentage_foreigners:float)\nHas_percentage_foreigners(\"Bern\", 20).\n.decl Answer()\nAnswer() :- Has_percentage_foreigners(\"Bern\", percentage_foreigners), percentage_foreigners > 10.\n.output Answer\n\n\n"]}
{"id": 1234, "answer": true, "completion": ".decl Has_genre(Movie:symbol, Genre:symbol)\nHas_genre(\"United 93\", \"drama\").\n.decl Has_emotion(Genre:symbol, Emotion:symbol)\nHas_emotion(\"drama\", \"sad\").\n.decl Answer()\nAnswer() :- Has_genre(\"United 93\", genre), Has_emotion(genre, \"sad\").\n.output Answer\n\n", "completions": [".decl Has_genre(Movie:symbol, Genre:symbol)\nHas_genre(\"United 93\", \"drama\").\n.decl Has_emotion(Genre:symbol, Emotion:symbol)\nHas_emotion(\"drama\", \"sad\").\n.decl Answer()\nAnswer() :- Has_genre(\"United 93\", genre), Has_emotion(genre, \"sad\").\n.output Answer\n\n"]}
{"id": 1235, "answer": true, "completion": ".decl Buried_at(Person:symbol, Church:symbol)\nBuried_at(\"Isaac Newton\", \"Westminster Abbey\").\nBuried_at(\"Charles Dickens\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_at(\"Isaac Newton\", church), Buried_at(\"Charles Dickens\", church).\n.output Answer\n\n", "completions": [".decl Buried_at(Person:symbol, Church:symbol)\nBuried_at(\"Isaac Newton\", \"Westminster Abbey\").\nBuried_at(\"Charles Dickens\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_at(\"Isaac Newton\", church), Buried_at(\"Charles Dickens\", church).\n.output Answer\n\n"]}
{"id": 1236, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"bowling pin\", 0.3).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"bowling pin\", 0.0003).\n.decl Has_precipitation(Place:symbol, Precipitation:float)\nHas_precipitation(\"Snowdon\", 0.5).\n.decl Answer()\nAnswer() :- Has_height(\"bowling pin\", height), Has_volume(\"bowling pin\", volume), Has_precipitation(\"Snowdon\", precipitation), precipitation >= height + volume.\n.output Answer\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"bowling pin\", 0.3).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"bowling pin\", 0.0003).\n.decl Has_precipitation(Place:symbol, Precipitation:float)\nHas_precipitation(\"Snowdon\", 0.5).\n.decl Answer()\nAnswer() :- Has_height(\"bowling pin\", height), Has_volume(\"bowling pin\", volume), Has_precipitation(\"Snowdon\", precipitation), precipitation >= height + volume.\n.output Answer\n\n"]}
{"id": 1237, "answer": true, "completion": ".decl Associated_with(Thing:symbol, Event:symbol)\nAssociated_with(\"Menthol\", \"Thanksgiving\").\n.decl Answer()\nAnswer() :- Associated_with(\"Menthol\", \"Thanksgiving\").\n.output Answer\n\n", "completions": [".decl Associated_with(Thing:symbol, Event:symbol)\nAssociated_with(\"Menthol\", \"Thanksgiving\").\n.decl Answer()\nAnswer() :- Associated_with(\"Menthol\", \"Thanksgiving\").\n.output Answer\n\n"]}
{"id": 1238, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"jackfruit\", 10).\n.decl Answer()\nAnswer() :- Has_mass(\"jackfruit\", mass), mass < 10.\n.output Answer\n\n", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"jackfruit\", 10).\n.decl Answer()\nAnswer() :- Has_mass(\"jackfruit\", mass), mass < 10.\n.output Answer\n\n"]}
{"id": 1239, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"honey badger\", 0.01).\nHas_volume(\"oven\", 0.1).\n.decl Answer()\nAnswer() :- Has_volume(\"honey badger\", volume1), Has_volume(\"oven\", volume2), volume1 < volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"honey badger\", 0.01).\nHas_volume(\"oven\", 0.1).\n.decl Answer()\nAnswer() :- Has_volume(\"honey badger\", volume1), Has_volume(\"oven\", volume2), volume1 < volume2.\n.output Answer\n\n"]}
{"id": 1240, "answer": false, "completion": ".decl Likes(Person:symbol, Season:symbol)\nLikes(\"Phineas\", \"summer\").\nLikes(\"Ferb\", \"summer\").\n.decl Answer()\nAnswer() :- Likes(\"Phineas\", \"winter\").\nAnswer() :- Likes(\"Ferb\", \"winter\").\n.output Answer\n\n", "completions": [".decl Likes(Person:symbol, Season:symbol)\nLikes(\"Phineas\", \"summer\").\nLikes(\"Ferb\", \"summer\").\n.decl Answer()\nAnswer() :- Likes(\"Phineas\", \"winter\").\nAnswer() :- Likes(\"Ferb\", \"winter\").\n.output Answer\n\n"]}
{"id": 1241, "answer": true, "completion": ".decl Has_vitamin(Food:symbol, Vitamin:symbol)\nHas_vitamin(\"orange\", \"vitamin C\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"pirate\", \"orange\").\n.decl Answer()\nAnswer() :- Eats(\"pirate\", food), Has_vitamin(food, \"vitamin C\").\n.output Answer\n\n", "completions": [".decl Has_vitamin(Food:symbol, Vitamin:symbol)\nHas_vitamin(\"orange\", \"vitamin C\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"pirate\", \"orange\").\n.decl Answer()\nAnswer() :- Eats(\"pirate\", food), Has_vitamin(food, \"vitamin C\").\n.output Answer\n\n"]}
{"id": 1242, "answer": false, "completion": ".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Saint Vincent and the Grenadines\", \"Saint Vincent\").\nHas_name(\"Saint Vincent and the Grenadines\", \"Grenadines\").\n.decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Christopher Columbus\", \"Italian\").\n.decl Answer()\nAnswer() :- Has_name(\"Saint Vincent and the Grenadines\", name), Is_nationality(person, \"Italian\"), Is_named_by(name, person).\n.output Answer\n\n", "completions": [".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Saint Vincent and the Grenadines\", \"Saint Vincent\").\nHas_name(\"Saint Vincent and the Grenadines\", \"Grenadines\").\n.decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Christopher Columbus\", \"Italian\").\n.decl Answer()\nAnswer() :- Has_name(\"Saint Vincent and the Grenadines\", name), Is_nationality(person, \"Italian\"), Is_named_by(name, person).\n.output Answer\n\n"]}
{"id": 1243, "answer": true, "completion": ".decl Has_director(Film:symbol, Director:symbol)\nHas_director(\"Psycho\", \"Alfred Hitchcock\").\n.decl Has_slang(Film:symbol, Slang:symbol)\nHas_slang(\"Psycho\", \"LOL\").\n.decl Answer()\nAnswer() :- Has_director(\"Psycho\", \"Alfred Hitchcock\"), Has_slang(\"Psycho\", \"LOL\").\n.output Answer\n\n", "completions": [".decl Has_director(Film:symbol, Director:symbol)\nHas_director(\"Psycho\", \"Alfred Hitchcock\").\n.decl Has_slang(Film:symbol, Slang:symbol)\nHas_slang(\"Psycho\", \"LOL\").\n.decl Answer()\nAnswer() :- Has_director(\"Psycho\", \"Alfred Hitchcock\"), Has_slang(\"Psycho\", \"LOL\").\n.output Answer\n\n"]}
{"id": 1244, "answer": false, "completion": ".decl Supports(Person:symbol, Policy:symbol)\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans", "completions": [".decl Supports(Person:symbol, Policy:symbol)\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans\", \"welfare\").\nSupports(\"Republicans"]}
{"id": 1245, "answer": true, "completion": ".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Cheshire\", \"England\").\n.decl Sings(Person:symbol, Song:symbol)\nSings(\"Cheshire\", \"La Marseillaise\").\n.decl Answer()\nAnswer() :- Is_citizen_of(person, \"England\"), Sings(person, \"La Marseillaise\").\n.output Answer\n\n", "completions": [".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Cheshire\", \"England\").\n.decl Sings(Person:symbol, Song:symbol)\nSings(\"Cheshire\", \"La Marseillaise\").\n.decl Answer()\nAnswer() :- Is_citizen_of(person, \"England\"), Sings(person, \"La Marseillaise\").\n.output Answer\n\n"]}
{"id": 1246, "answer": true, "completion": ".decl Has_protein(Food:symbol, Protein:float)\nHas_protein(\"chicken breast\", 31).\nHas_protein(\"maize\", 9).\n.decl Answer()\nAnswer() :- Has_protein(\"chicken breast\", protein1), Has_protein(\"maize\", protein2), protein1 > protein2.\n.output Answer\n\n", "completions": [".decl Has_protein(Food:symbol, Protein:float)\nHas_protein(\"chicken breast\", 31).\nHas_protein(\"maize\", 9).\n.decl Answer()\nAnswer() :- Has_protein(\"chicken breast\", protein1), Has_protein(\"maize\", protein2), protein1 > protein2.\n.output Answer\n\n"]}
{"id": 1247, "answer": true, "completion": ".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"compact disc\", 700).\nHas_melting_point(\"magma\", 1200).\n.decl Answer()\nAnswer() :- Has_melting_point(\"compact disc\", melting_point1), Has_melting_point(\"magma\", melting_point2), melting_point1 < melting_point2.\n.output Answer\n\n", "completions": [".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"compact disc\", 700).\nHas_melting_point(\"magma\", 1200).\n.decl Answer()\nAnswer() :- Has_melting_point(\"compact disc\", melting_point1), Has_melting_point(\"magma\", melting_point2), melting_point1 < melting_point2.\n.output Answer\n\n"]}
{"id": 1248, "answer": false, "completion": ".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Alexander Hamilton\", \"1755-1804\").\n.decl Lives_in_time(Animal:symbol, Time:symbol)\nLives_in_time(\"koala\", \"1755-1804\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Alexander Hamilton\", time1), Lives_in_time(\"koala\", time2), time1 = time2.\n.output Answer\n\n", "completions": [".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Alexander Hamilton\", \"1755-1804\").\n.decl Lives_in_time(Animal:symbol, Time:symbol)\nLives_in_time(\"koala\", \"1755-1804\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Alexander Hamilton\", time1), Lives_in_time(\"koala\", time2), time1 = time2.\n.output Answer\n\n"]}
{"id": 1249, "answer": true, "completion": ".decl Has_writing_style(Author:symbol, Writing_style:symbol)\nHas_writing_style(\"William Shakespeare\", \"complex\").\n.decl Has_reading_level(Book:symbol, Reading_level:symbol)\nHas_reading_level(\"Othello\", \"advanced\").\n.decl Answer()\nAnswer() :- Has_writing_style(\"William Shakespeare\", writing_style), Has_reading_level(\"Othello\", reading_level), writing_style != reading_level.\n.output Answer\n\n", "completions": [".decl Has_writing_style(Author:symbol, Writing_style:symbol)\nHas_writing_style(\"William Shakespeare\", \"complex\").\n.decl Has_reading_level(Book:symbol, Reading_level:symbol)\nHas_reading_level(\"Othello\", \"advanced\").\n.decl Answer()\nAnswer() :- Has_writing_style(\"William Shakespeare\", writing_style), Has_reading_level(\"Othello\", reading_level), writing_style != reading_level.\n.output Answer\n\n"]}
{"id": 1250, "answer": false, "completion": ".decl Has_n_planets(Person:symbol, N_planets:float)\nHas_n_planets(\"Goofy\", 9).\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"Goofy\", 1).\n.decl Answer()\nAnswer() :- Has_n_planets(\"Goofy\", n_planets), Has_age(\"Goofy\", age), n_planets <= age.\n.output Answer\n\n", "completions": [".decl Has_n_planets(Person:symbol, N_planets:float)\nHas_n_planets(\"Goofy\", 9).\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"Goofy\", 1).\n.decl Answer()\nAnswer() :- Has_n_planets(\"Goofy\", n_planets), Has_age(\"Goofy\", age), n_planets <= age.\n.output Answer\n\n"]}
{"id": 1251, "answer": false, "completion": ".decl Is_from(Person:symbol, Town:symbol)\nIs_from(\"historical Dracula\", \"Sighisoara\").\n.decl Is_in(Town:symbol, Region:symbol)\nIs_in(\"Sighisoara\", \"Transylvania\").\nIs_in(\"Bucharest\", \"Romania\").\n.decl Answer()\nAnswer() :- Is_from(\"historical Dracula\", town), Is_in(town, region), Is_in(\"Bucharest\", region).\n.output Answer\n\n\n", "completions": [".decl Is_from(Person:symbol, Town:symbol)\nIs_from(\"historical Dracula\", \"Sighisoara\").\n.decl Is_in(Town:symbol, Region:symbol)\nIs_in(\"Sighisoara\", \"Transylvania\").\nIs_in(\"Bucharest\", \"Romania\").\n.decl Answer()\nAnswer() :- Is_from(\"historical Dracula\", town), Is_in(town, region), Is_in(\"Bucharest\", region).\n.output Answer\n\n\n"]}
{"id": 1252, "answer": true, "completion": ".decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"War of the Worlds\", \"H.G. Wells\").\n.decl Has_topic(Book:symbol, Topic:symbol)\nHas_topic(\"War of the Worlds\", \"cosmic rays\").\n.decl Answer()\nAnswer() :- Has_author(\"War of the Worlds\", \"H.G. Wells\"), Has_topic(\"War of the Worlds\", \"cosmic rays\").\n.output Answer\n\n", "completions": [".decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"War of the Worlds\", \"H.G. Wells\").\n.decl Has_topic(Book:symbol, Topic:symbol)\nHas_topic(\"War of the Worlds\", \"cosmic rays\").\n.decl Answer()\nAnswer() :- Has_author(\"War of the Worlds\", \"H.G. Wells\"), Has_topic(\"War of the Worlds\", \"cosmic rays\").\n.output Answer\n\n"]}
{"id": 1253, "answer": true, "completion": ".decl Has_natural_camouflage(Animal:symbol, Environment:symbol)\nHas_natural_camouflage(\"mongoose\", \"desert\").\n.decl Answer()\nAnswer() :- Has_natural_camouflage(\"mongoose\", \"desert\").\n.output Answer\n\n", "completions": [".decl Has_natural_camouflage(Animal:symbol, Environment:symbol)\nHas_natural_camouflage(\"mongoose\", \"desert\").\n.decl Answer()\nAnswer() :- Has_natural_camouflage(\"mongoose\", \"desert\").\n.output Answer\n\n"]}
{"id": 1254, "answer": true, "completion": ".decl Treats(Treatment:symbol, Disease:symbol)\nTreats(\"Seroquel\", \"depression\").\nTreats(\"Prozac\", \"depression\").\nTreats(\"Zoloft\", \"depression\").\n.decl Answer()\nAnswer() :- Treats(\"Seroquel\", \"depression\").\n.output Answer\n\n", "completions": [".decl Treats(Treatment:symbol, Disease:symbol)\nTreats(\"Seroquel\", \"depression\").\nTreats(\"Prozac\", \"depression\").\nTreats(\"Zoloft\", \"depression\").\n.decl Answer()\nAnswer() :- Treats(\"Seroquel\", \"depression\").\n.output Answer\n\n"]}
{"id": 1255, "answer": true, "completion": ".decl Contains(Place:symbol, Object:symbol)\nContains(\"Taco Bell kitchen\", \"cinnamon\").\n.decl Answer()\nAnswer() :- Contains(\"Taco Bell kitchen\", \"cinnamon\").\n.output Answer\n\n", "completions": [".decl Contains(Place:symbol, Object:symbol)\nContains(\"Taco Bell kitchen\", \"cinnamon\").\n.decl Answer()\nAnswer() :- Contains(\"Taco Bell kitchen\", \"cinnamon\").\n.output Answer\n\n"]}
{"id": 1256, "answer": true, "completion": ".decl Has_discount(Group:symbol, Discount:symbol)\nHas_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.decl Answer()\nAnswer() :- Has_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.output Answer\n\n", "completions": [".decl Has_discount(Group:symbol, Discount:symbol)\nHas_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.decl Answer()\nAnswer() :- Has_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.output Answer\n\n"]}
{"id": 1257, "answer": true, "completion": ".decl Has_submission(Person:symbol, Submission:symbol)\nHas_submission(\"Thiago Moises\", \"May 13 2020 submission\").\n.decl Hurts(Submission:symbol, Body_part:symbol)\nHurts(\"May 13 2020 submission\", \"Achilles\").\n.decl Answer()\nAnswer() :- Has_submission(\"Thiago Moises\", submission), Hurts(submission, \"Achilles\").\n.output Answer\n\n", "completions": [".decl Has_submission(Person:symbol, Submission:symbol)\nHas_submission(\"Thiago Moises\", \"May 13 2020 submission\").\n.decl Hurts(Submission:symbol, Body_part:symbol)\nHurts(\"May 13 2020 submission\", \"Achilles\").\n.decl Answer()\nAnswer() :- Has_submission(\"Thiago Moises\", submission), Hurts(submission, \"Achilles\").\n.output Answer\n\n"]}
{"id": 1258, "answer": true, "completion": ".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"quadruped\", 4).\n.decl Has_animal(Calendar:symbol, Animal:symbol)\nHas_animal(\"Chinese calendar\", \"quadruped\").\n.decl Answer()\nAnswer() :- Has_legs(\"quadruped\", n_legs), Has_animal(\"Chinese calendar\", \"quadruped\").\n.output Answer\n\n", "completions": [".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"quadruped\", 4).\n.decl Has_animal(Calendar:symbol, Animal:symbol)\nHas_animal(\"Chinese calendar\", \"quadruped\").\n.decl Answer()\nAnswer() :- Has_legs(\"quadruped\", n_legs), Has_animal(\"Chinese calendar\", \"quadruped\").\n.output Answer\n\n"]}
{"id": 1259, "answer": false, "completion": ".decl Has_political_views(Person:symbol, Political_views:symbol)\nHas_political_views(\"Nancy Pelosi\", \"pro-choice\").\n.decl Answer()\nAnswer() :- Has_political_views(\"Nancy Pelosi\", \"pro-life\").\n.output Answer\n\n", "completions": [".decl Has_political_views(Person:symbol, Political_views:symbol)\nHas_political_views(\"Nancy Pelosi\", \"pro-choice\").\n.decl Answer()\nAnswer() :- Has_political_views(\"Nancy Pelosi\", \"pro-life\").\n.output Answer\n\n"]}
{"id": 1260, "answer": false, "completion": ".decl Has_calories(Object:symbol, Calories:float)\nHas_calories(\"The Daily Mirror\", 0).\nHas_calories(\"campfire\", 1000).\n.decl Answer()\nAnswer() :- Has_calories(\"The Daily Mirror\", calories1), Has_calories(\"campfire\", calories2), calories1 >= calories2.\n.output Answer\n\n", "completions": [".decl Has_calories(Object:symbol, Calories:float)\nHas_calories(\"The Daily Mirror\", 0).\nHas_calories(\"campfire\", 1000).\n.decl Answer()\nAnswer() :- Has_calories(\"The Daily Mirror\", calories1), Has_calories(\"campfire\", calories2), calories1 >= calories2.\n.output Answer\n\n"]}
{"id": 1261, "answer": false, "completion": ".decl Performs(Person:symbol, Music:symbol)\nPerforms(\"Ludacris\", \"hip hop\").\n.decl Is_a_type_of(Music:symbol, Music_type:symbol)\nIs_a_type_of(\"hip hop\", \"rap\").\nIs_a_type_of(\"rap\", \"classical music\").\n.decl Answer()\nAnswer() :- Performs(\"Ludacris\", music), Is_a_type_of(music, \"classical music\").\n.output Answer\n\n", "completions": [".decl Performs(Person:symbol, Music:symbol)\nPerforms(\"Ludacris\", \"hip hop\").\n.decl Is_a_type_of(Music:symbol, Music_type:symbol)\nIs_a_type_of(\"hip hop\", \"rap\").\nIs_a_type_of(\"rap\", \"classical music\").\n.decl Answer()\nAnswer() :- Performs(\"Ludacris\", music), Is_a_type_of(music, \"classical music\").\n.output Answer\n\n"]}
{"id": 1262, "answer": false, "completion": ".decl Is_familiar_with(Person:symbol, Food:symbol)\nIs_familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.decl Answer()\nAnswer() :- !Is_familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.output Answer\n\n", "completions": [".decl Is_familiar_with(Person:symbol, Food:symbol)\nIs_familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.decl Answer()\nAnswer() :- !Is_familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.output Answer\n\n"]}
{"id": 1263, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"2 Euro coin\", 7.5).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"2 Euro coin\", 0.01).\n.decl Has_density(Object:symbol, Density:float)\nHas_density(\"2 Euro coin\", density), Has_mass(\"2 Euro coin\", mass), Has_volume(\"2 Euro coin\", volume), density = mass / volume.\nHas_density(\"Red Sea\", 1.025).\n.decl Answer()\nAnswer() :- Has_density(\"2 Euro coin\", density1), Has_density(\"Red Sea\", density2), density1 < density2.\n.output Answer\n\n", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"2 Euro coin\", 7.5).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"2 Euro coin\", 0.01).\n.decl Has_density(Object:symbol, Density:float)\nHas_density(\"2 Euro coin\", density), Has_mass(\"2 Euro coin\", mass), Has_volume(\"2 Euro coin\", volume), density = mass / volume.\nHas_density(\"Red Sea\", 1.025).\n.decl Answer()\nAnswer() :- Has_density(\"2 Euro coin\", density1), Has_density(\"Red Sea\", density2), density1 < density2.\n.output Answer\n\n"]}
{"id": 1264, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"white light\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"white light\", \"white\").\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"white light\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"white light\", \"white\").\n.output Answer\n\n"]}
{"id": 1265, "answer": true, "completion": ".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Isaac\", \"Abraham\").\n.decl Commits(Person:symbol, Crime:symbol)\nCommits(\"Abraham\", \"murder\").\nCommits(\"Marvin Gay Sr.\", \"murder\").\n.decl Answer()\nAnswer() :- Has_father(\"Isaac\", father), Commits(father, crime1), Commits(\"Marvin Gay Sr.\", crime2), crime1 = crime2.\n.output Answer\n\n", "completions": [".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Isaac\", \"Abraham\").\n.decl Commits(Person:symbol, Crime:symbol)\nCommits(\"Abraham\", \"murder\").\nCommits(\"Marvin Gay Sr.\", \"murder\").\n.decl Answer()\nAnswer() :- Has_father(\"Isaac\", father), Commits(father, crime1), Commits(\"Marvin Gay Sr.\", crime2), crime1 = crime2.\n.output Answer\n\n"]}
{"id": 1266, "answer": true, "completion": ".decl Eats(Animal:symbol, Food:symbol)\nEats(\"owl monkey\", \"strawberry\").\n.decl Answer()\nAnswer() :- Eats(\"owl monkey\", \"strawberry\").\n.output Answer\n\n", "completions": [".decl Eats(Animal:symbol, Food:symbol)\nEats(\"owl monkey\", \"strawberry\").\n.decl Answer()\nAnswer() :- Eats(\"owl monkey\", \"strawberry\").\n.output Answer\n\n"]}
{"id": 1267, "answer": true, "completion": ".decl Is_used_for(Treatment:symbol, Disease:symbol)\nIs_used_for(\"whole genome sequencing\", \"COVID-19\").\n.decl Answer()\nAnswer() :- Is_used_for(\"whole genome sequencing\", \"COVID-19\").\n.output Answer\n\n", "completions": [".decl Is_used_for(Treatment:symbol, Disease:symbol)\nIs_used_for(\"whole genome sequencing\", \"COVID-19\").\n.decl Answer()\nAnswer() :- Is_used_for(\"whole genome sequencing\", \"COVID-19\").\n.output Answer\n\n"]}
{"id": 1268, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Robin Williams\", 63).\n.decl Has_voice(Person:symbol, Character:symbol)\nHas_voice(\"Robin Williams\", \"Genie\").\n.decl Answer()\nAnswer() :- Has_voice(\"Robin Williams\", \"Genie\"), Has_age(\"Robin Williams\", age), age > 0.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Robin Williams\", 63).\n.decl Has_voice(Person:symbol, Character:symbol)\nHas_voice(\"Robin Williams\", \"Genie\").\n.decl Answer()\nAnswer() :- Has_voice(\"Robin Williams\", \"Genie\"), Has_age(\"Robin Williams\", age), age > 0.\n.output Answer\n\n"]}
{"id": 1269, "answer": false, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"dosa\", 100).\n.decl Needs_calories(Person:symbol, Calories:float)\nNeeds_calories(\"lumberjacks\", 2000).\n.decl Answer()\nAnswer() :- Has_calories(\"dosa\", calories1), Needs_calories(\"lumberjacks\", calories2), calories1*3 >= calories2.\n.output Answer\n\n", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"dosa\", 100).\n.decl Needs_calories(Person:symbol, Calories:float)\nNeeds_calories(\"lumberjacks\", 2000).\n.decl Answer()\nAnswer() :- Has_calories(\"dosa\", calories1), Needs_calories(\"lumberjacks\", calories2), calories1*3 >= calories2.\n.output Answer\n\n"]}
{"id": 1270, "answer": true, "completion": ".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"black swan\", \"black\").\n.decl Has_parent(Animal:symbol, Parent:symbol)\nHas_parent(\"black swan cygnet\", \"black swan\").\n.decl Answer()\nAnswer() :- Has_color(\"black swan\", \"black\"), Has_parent(\"black swan cygnet\", \"black swan\").\n.output Answer\n\n", "completions": [".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"black swan\", \"black\").\n.decl Has_parent(Animal:symbol, Parent:symbol)\nHas_parent(\"black swan cygnet\", \"black swan\").\n.decl Answer()\nAnswer() :- Has_color(\"black swan\", \"black\"), Has_parent(\"black swan cygnet\", \"black swan\").\n.output Answer\n\n"]}
{"id": 1271, "answer": true, "completion": ".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Moon Jae-in\", \"Geoje\").\n.decl Is_outside_of(Place1:symbol, Place2:symbol)\nIs_outside_of(\"Geoje\", \"Khanbaliq\").\n.decl Answer()\nAnswer() :- Born_in(\"Moon Jae-in\", place1), Is_outside_of(place1, \"Khanbaliq\").\n.output Answer\n\n", "completions": [".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Moon Jae-in\", \"Geoje\").\n.decl Is_outside_of(Place1:symbol, Place2:symbol)\nIs_outside_of(\"Geoje\", \"Khanbaliq\").\n.decl Answer()\nAnswer() :- Born_in(\"Moon Jae-in\", place1), Is_outside_of(place1, \"Khanbaliq\").\n.output Answer\n\n"]}
{"id": 1272, "answer": false, "completion": ".decl Causes(Person_A:symbol, Person_B:symbol)\nCauses(\"Daniel LeFever\", \"Kurt Cobain\").\n.decl Answer()\nAnswer() :- Causes(person1, \"Kurt Cobain\"), Causes(person2, person1).\n.output Answer\n\n", "completions": [".decl Causes(Person_A:symbol, Person_B:symbol)\nCauses(\"Daniel LeFever\", \"Kurt Cobain\").\n.decl Answer()\nAnswer() :- Causes(person1, \"Kurt Cobain\"), Causes(person2, person1).\n.output Answer\n\n"]}
{"id": 1273, "answer": true, "completion": ".decl Has_form_of_government(City:symbol, Form_of_government:symbol)\nHas_form_of_government(\"Florence\", \"Theocracy\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Italian Renaissance\", \"14th century\").\nHappens_in_time(\"Italian Renaissance\", \"15th century\").\nHappens_in_time(\"Italian Renaissance\", \"16th century\").\n.decl Answer()\nAnswer() :- Has_form_of_government(\"Florence\", \"Theocracy\"), Happens_in_time(\"Italian Renaissance\", time).\n.output Answer\n\n", "completions": [".decl Has_form_of_government(City:symbol, Form_of_government:symbol)\nHas_form_of_government(\"Florence\", \"Theocracy\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Italian Renaissance\", \"14th century\").\nHappens_in_time(\"Italian Renaissance\", \"15th century\").\nHappens_in_time(\"Italian Renaissance\", \"16th century\").\n.decl Answer()\nAnswer() :- Has_form_of_government(\"Florence\", \"Theocracy\"), Happens_in_time(\"Italian Renaissance\", time).\n.output Answer\n\n"]}
{"id": 1274, "answer": true, "completion": ".decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"7 Wonders\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Snow White's dwarfs\", 7).\n.decl Answer()\nAnswer() :- Has_n_players(\"7 Wonders\", n_players), Has_n_members(\"Snow White's dwarfs\", n_members), n_players <= n_members.\n.output Answer\n\n", "completions": [".decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"7 Wonders\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Snow White's dwarfs\", 7).\n.decl Answer()\nAnswer() :- Has_n_players(\"7 Wonders\", n_players), Has_n_members(\"Snow White's dwarfs\", n_members), n_players <= n_members.\n.output Answer\n\n"]}
{"id": 1275, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"United States Army Ranger\", \"Mozambique Drill\").\n.decl Is_easy_for(Skill:symbol, Person:symbol)\nIs_easy_for(\"Mozambique Drill\", \"United States Army Ranger\").\n.decl Answer()\nAnswer() :- Has_skill(\"United States Army Ranger\", skill), Is_easy_for(skill, \"United States Army Ranger\").\n.output Answer\n\n\n", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"United States Army Ranger\", \"Mozambique Drill\").\n.decl Is_easy_for(Skill:symbol, Person:symbol)\nIs_easy_for(\"Mozambique Drill\", \"United States Army Ranger\").\n.decl Answer()\nAnswer() :- Has_skill(\"United States Army Ranger\", skill), Is_easy_for(skill, \"United States Army Ranger\").\n.output Answer\n\n\n"]}
{"id": 1276, "answer": false, "completion": ".decl Requires(Job:symbol, Skill:symbol)\nRequires(\"construction worker\", \"building\").\nRequires(\"construction worker\", \"carpentry\").\nRequires(\"construction worker\", \"electrical\").\nRequires(\"construction worker\", \"plumbing\").\nRequires(\"construction worker\", \"painting\").\nRequires(\"construction worker\", \"masonry\").\nRequires(\"construction worker\", \"roofing\").\nRequires(\"construction worker\", \"landscaping\").\nRequires(\"construction worker\", \"heavy equipment operation\").\nRequires(\"construction worker\", \"insulation\").\nRequires(\"construction worker\", \"drywall\").\nRequires(\"construction worker\", \"flooring\").\nRequires(\"construction worker\", \"cabinetry\").\nRequires(\"construction worker\", \"welding\").\nRequires(\"construction worker\", \"concrete\").\nRequires(\"construction worker\", \"stucco\").\nRequires(\"construction worker\", \"tile\").\nRequires(\"construction worker\", \"siding\").\nRequires(\"construction worker\", \"framing\").\nRequires(\"construction worker\", \"excavation\").\nRequires(\"construction worker\", \"demolition\").\nRequires(\"construction worker\", \"asbestos removal\").\nRequires(\"construction worker\", \"lead removal\").\nRequires(\"construction worker\", \"hazardous waste removal\").\nRequires(\"construction worker\", \"environmental remediation\").\nRequires(\"construction worker\", \"hazardous materials handling\").\nRequires(\"construction worker\", \"safety\").\nRequires(\"construction worker\", \"first aid\").\nRequires(\"construction worker\", \"CPR\").\nRequires(\"construction worker\", \"OSHA\").\nRequires(\"construction worker\", \"MSHA\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires", "completions": [".decl Requires(Job:symbol, Skill:symbol)\nRequires(\"construction worker\", \"building\").\nRequires(\"construction worker\", \"carpentry\").\nRequires(\"construction worker\", \"electrical\").\nRequires(\"construction worker\", \"plumbing\").\nRequires(\"construction worker\", \"painting\").\nRequires(\"construction worker\", \"masonry\").\nRequires(\"construction worker\", \"roofing\").\nRequires(\"construction worker\", \"landscaping\").\nRequires(\"construction worker\", \"heavy equipment operation\").\nRequires(\"construction worker\", \"insulation\").\nRequires(\"construction worker\", \"drywall\").\nRequires(\"construction worker\", \"flooring\").\nRequires(\"construction worker\", \"cabinetry\").\nRequires(\"construction worker\", \"welding\").\nRequires(\"construction worker\", \"concrete\").\nRequires(\"construction worker\", \"stucco\").\nRequires(\"construction worker\", \"tile\").\nRequires(\"construction worker\", \"siding\").\nRequires(\"construction worker\", \"framing\").\nRequires(\"construction worker\", \"excavation\").\nRequires(\"construction worker\", \"demolition\").\nRequires(\"construction worker\", \"asbestos removal\").\nRequires(\"construction worker\", \"lead removal\").\nRequires(\"construction worker\", \"hazardous waste removal\").\nRequires(\"construction worker\", \"environmental remediation\").\nRequires(\"construction worker\", \"hazardous materials handling\").\nRequires(\"construction worker\", \"safety\").\nRequires(\"construction worker\", \"first aid\").\nRequires(\"construction worker\", \"CPR\").\nRequires(\"construction worker\", \"OSHA\").\nRequires(\"construction worker\", \"MSHA\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires(\"construction worker\", \"DOT\").\nRequires(\"construction worker\", \"EPA\").\nRequires"]}
{"id": 1277, "answer": true, "completion": ".decl Has_type(Place:symbol, Type:symbol)\nHas_type(\"San Francisco\", \"city\").\nHas_type(\"Yosemite National Park\", \"nature\").\n.decl Answer()\nAnswer() :- Has_type(\"San Francisco\", \"city\"), Has_type(\"Yosemite National Park\", \"nature\").\n.output Answer\n\n", "completions": [".decl Has_type(Place:symbol, Type:symbol)\nHas_type(\"San Francisco\", \"city\").\nHas_type(\"Yosemite National Park\", \"nature\").\n.decl Answer()\nAnswer() :- Has_type(\"San Francisco\", \"city\"), Has_type(\"Yosemite National Park\", \"nature\").\n.output Answer\n\n"]}
{"id": 1278, "answer": false, "completion": ".decl Has_founder(City:symbol, Founder:symbol)\nHas_founder(\"Santa Ana\", \"William H. Spurgeon\").\nHas_founder(\"Santa Ana\", \"Jose Antonio Yorba\").\nHas_founder(\"Santa Ana\", \"Juan Pablo Grijalva\").\n.decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"William H. Spurgeon\", \"English\").\nSpeaks(\"Jose Antonio Yorba\", \"Spanish\").\nSpeaks(\"Juan Pablo Grijalva\", \"Spanish\").\n.decl Has_biggest_population(County:symbol, City:symbol)\nHas_biggest_population(\"Orange County\", \"Santa Ana\").\n.decl Answer()\nAnswer() :- Has_biggest_population(\"Orange County\", city), Has_founder(city, founder), Speaks(founder, \"Italian\").\n.output Answer\n\n", "completions": [".decl Has_founder(City:symbol, Founder:symbol)\nHas_founder(\"Santa Ana\", \"William H. Spurgeon\").\nHas_founder(\"Santa Ana\", \"Jose Antonio Yorba\").\nHas_founder(\"Santa Ana\", \"Juan Pablo Grijalva\").\n.decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"William H. Spurgeon\", \"English\").\nSpeaks(\"Jose Antonio Yorba\", \"Spanish\").\nSpeaks(\"Juan Pablo Grijalva\", \"Spanish\").\n.decl Has_biggest_population(County:symbol, City:symbol)\nHas_biggest_population(\"Orange County\", \"Santa Ana\").\n.decl Answer()\nAnswer() :- Has_biggest_population(\"Orange County\", city), Has_founder(city, founder), Speaks(founder, \"Italian\").\n.output Answer\n\n"]}
{"id": 1279, "answer": false, "completion": ".decl Has_citizens(Country:symbol, Citizens:symbol)\nHas_citizens(\"France\", \"French people\").\n.decl Has_participants(Event:symbol, Participants:symbol)\nHas_participants(\"American Civil War\", \"American people\").\n.decl Answer()\nAnswer() :- Has_citizens(\"France\", citizens1), Has_participants(\"American Civil War\", citizens2), citizens1 = citizens2.\n.output Answer\n\n", "completions": [".decl Has_citizens(Country:symbol, Citizens:symbol)\nHas_citizens(\"France\", \"French people\").\n.decl Has_participants(Event:symbol, Participants:symbol)\nHas_participants(\"American Civil War\", \"American people\").\n.decl Answer()\nAnswer() :- Has_citizens(\"France\", citizens1), Has_participants(\"American Civil War\", citizens2), citizens1 = citizens2.\n.output Answer\n\n"]}
{"id": 1280, "answer": false, "completion": ".decl Fought_in(Group:symbol, War:symbol)\nFought_in(\"Royal Air Force\", \"World War I\").\nFought_in(\"Royal Air Force\", \"World War II\").\nFought_in(\"Royal Air Force\", \"Korean War\").\nFought_in(\"Royal Air Force\", \"Vietnam War\").\nFought_in(\"Royal Air Force\", \"Gulf War\").\nFought_in(\"Royal Air Force\", \"Iraq War\").\nFought_in(\"Royal Air Force\", \"Afghanistan War\").\nFought_in(\"Royal Air Force\", \"War in Iraq\").\nFought_in(\"Royal Air Force\", \"War in Afghanistan\").\nFought_in(\"Royal Air Force\", \"War in North-West Pakistan\").\nFought_in(\"Royal Air Force\", \"War in Somalia\").\nFought_in(\"Royal Air Force\", \"War in Libya\").\nFought_in(\"Royal Air Force\", \"War in Syria\").\nFought_in(\"Royal Air Force\", \"War in Yemen\").\nFought_in(\"Royal Air Force\", \"War in Donbass\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force", "completions": [".decl Fought_in(Group:symbol, War:symbol)\nFought_in(\"Royal Air Force\", \"World War I\").\nFought_in(\"Royal Air Force\", \"World War II\").\nFought_in(\"Royal Air Force\", \"Korean War\").\nFought_in(\"Royal Air Force\", \"Vietnam War\").\nFought_in(\"Royal Air Force\", \"Gulf War\").\nFought_in(\"Royal Air Force\", \"Iraq War\").\nFought_in(\"Royal Air Force\", \"Afghanistan War\").\nFought_in(\"Royal Air Force\", \"War in Iraq\").\nFought_in(\"Royal Air Force\", \"War in Afghanistan\").\nFought_in(\"Royal Air Force\", \"War in North-West Pakistan\").\nFought_in(\"Royal Air Force\", \"War in Somalia\").\nFought_in(\"Royal Air Force\", \"War in Libya\").\nFought_in(\"Royal Air Force\", \"War in Syria\").\nFought_in(\"Royal Air Force\", \"War in Yemen\").\nFought_in(\"Royal Air Force\", \"War in Donbass\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force\", \"War in Iraq and Syria\").\nFought_in(\"Royal Air Force\", \"War in Iraq and the Levant\").\nFought_in(\"Royal Air Force"]}
{"id": 1281, "answer": false, "completion": ".decl Is_part_of(Person:symbol, Event:symbol)\nIs_part_of(\"Elijah\", \"Passover\").\n.decl Is_part_of(Event:symbol, Holiday:symbol)\nIs_part_of(\"Passover\", \"Jewish holiday\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Elijah\", \"Jewish holiday\").\nAnswer() :- Is_part_of(person, \"Jewish holiday\"), Is_part_of(person, \"Passover\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Person:symbol, Event:symbol)\nIs_part_of(\"Elijah\", \"Passover\").\n.decl Is_part_of(Event:symbol, Holiday:symbol)\nIs_part_of(\"Passover\", \"Jewish holiday\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Elijah\", \"Jewish holiday\").\nAnswer() :- Is_part_of(person, \"Jewish holiday\"), Is_part_of(person, \"Passover\").\n.output Answer\n\n"]}
{"id": 1282, "answer": false, "completion": ".decl Is_visible_from(Object_A:symbol, Object_B:symbol)\nIs_visible_from(\"Colossus of Rhodes\", \"Peak of the Andes\").\n.decl Answer()\nAnswer() :- !Is_visible_from(\"Colossus of Rhodes\", \"Peak of the Andes\").\n.output Answer\n\n", "completions": [".decl Is_visible_from(Object_A:symbol, Object_B:symbol)\nIs_visible_from(\"Colossus of Rhodes\", \"Peak of the Andes\").\n.decl Answer()\nAnswer() :- !Is_visible_from(\"Colossus of Rhodes\", \"Peak of the Andes\").\n.output Answer\n\n"]}
{"id": 1283, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"George Soros\", 8.3).\n.decl Costs(Object:symbol, Price:float)\nCosts(\"Louvre\", 6.5).\n.decl Answer()\nAnswer() :- Has_net_worth(\"George Soros\", net_worth), Costs(\"Louvre\", price), net_worth >= price.\n.output Answer\n\n", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"George Soros\", 8.3).\n.decl Costs(Object:symbol, Price:float)\nCosts(\"Louvre\", 6.5).\n.decl Answer()\nAnswer() :- Has_net_worth(\"George Soros\", net_worth), Costs(\"Louvre\", price), net_worth >= price.\n.output Answer\n\n"]}
{"id": 1284, "answer": false, "completion": ".decl Supports(Group:symbol, Policy:symbol)\nSupports(\"Communist Party of the Soviet Union\", \"Communism\").\nSupports(\"Communist Party of the Soviet Union\", \"Socialism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism\").\nSupports(\"Communist Party of the Soviet Union\", \"Leninism\").\nSupports(\"Communist Party of the Soviet Union\", \"Stalinism\").\nSupports(\"Communist Party of the Soviet Union\", \"Maoism\").\nSupports(\"Communist Party of the Soviet Union\", \"Trotskyism\").\nSupports(\"Communist Party of the Soviet Union\", \"Juche\").\nSupports(\"Communist Party of the Soviet Union\", \"Hoxhaism\").\nSupports(\"Communist Party of the Soviet Union\", \"Eurocommunism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Stalinism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Trotskyism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Third Worldism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Prachanda Path\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP-Maoist\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP-Maoist-Communist\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP-Maoist-Communist-Party\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP-Maoist-Communist-Party-of-Peru\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP-Maoist-Communist-Party-of-Peru-Shining-Path\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP-Maoist-Communist-Party-of-Peru-Shining-Path-Sendero-Luminoso\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-", "completions": [".decl Supports(Group:symbol, Policy:symbol)\nSupports(\"Communist Party of the Soviet Union\", \"Communism\").\nSupports(\"Communist Party of the Soviet Union\", \"Socialism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism\").\nSupports(\"Communist Party of the Soviet Union\", \"Leninism\").\nSupports(\"Communist Party of the Soviet Union\", \"Stalinism\").\nSupports(\"Communist Party of the Soviet Union\", \"Maoism\").\nSupports(\"Communist Party of the Soviet Union\", \"Trotskyism\").\nSupports(\"Communist Party of the Soviet Union\", \"Juche\").\nSupports(\"Communist Party of the Soviet Union\", \"Hoxhaism\").\nSupports(\"Communist Party of the Soviet Union\", \"Eurocommunism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Stalinism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Trotskyism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Third Worldism\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Prachanda Path\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP-Maoist\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP-Maoist-Communist\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP-Maoist-Communist-Party\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP-Maoist-Communist-Party-of-Peru\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP-Maoist-Communist-Party-of-Peru-Shining-Path\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-Gonzalo Thought-Prachanda Path-RIM-PCP-Maoist-Communist-Party-of-Peru-Shining-Path-Sendero-Luminoso\").\nSupports(\"Communist Party of the Soviet Union\", \"Marxism-Leninism-Maoism-"]}
{"id": 1285, "answer": true, "completion": ".decl Has_animal(Work:symbol, Animal:symbol)\nHas_animal(\"You're a Good Sport, Charlie Brown\", \"beagle\").\n.decl Is_a(Animal:symbol, Animal_type:symbol)\nIs_a(\"beagle\", \"hound\").\n.decl Answer()\nAnswer() :- Has_animal(\"You're a Good Sport, Charlie Brown\", animal), Is_a(animal, \"hound\").\n.output Answer\n\n\n", "completions": [".decl Has_animal(Work:symbol, Animal:symbol)\nHas_animal(\"You're a Good Sport, Charlie Brown\", \"beagle\").\n.decl Is_a(Animal:symbol, Animal_type:symbol)\nIs_a(\"beagle\", \"hound\").\n.decl Answer()\nAnswer() :- Has_animal(\"You're a Good Sport, Charlie Brown\", animal), Is_a(animal, \"hound\").\n.output Answer\n\n\n"]}
{"id": 1286, "answer": false, "completion": ".decl Has_reign(Person:symbol, Place:symbol)\nHas_reign(\"Elizabeth II\", \"United Kingdom\").\n.decl Is_part_of(Place_A:symbol, Place_B:symbol)\nIs_part_of(\"Balearic Islands\", \"Spain\").\nIs_part_of(\"Spain\", \"Europe\").\nIs_part_of(\"United Kingdom\", \"Europe\").\n.decl Answer()\nAnswer() :- Has_reign(\"Elizabeth II\", place1), Is_part_of(\"Balearic Islands\", place2), Is_part_of(place2, place1).\n.output Answer\n\n", "completions": [".decl Has_reign(Person:symbol, Place:symbol)\nHas_reign(\"Elizabeth II\", \"United Kingdom\").\n.decl Is_part_of(Place_A:symbol, Place_B:symbol)\nIs_part_of(\"Balearic Islands\", \"Spain\").\nIs_part_of(\"Spain\", \"Europe\").\nIs_part_of(\"United Kingdom\", \"Europe\").\n.decl Answer()\nAnswer() :- Has_reign(\"Elizabeth II\", place1), Is_part_of(\"Balearic Islands\", place2), Is_part_of(place2, place1).\n.output Answer\n\n"]}
{"id": 1287, "answer": false, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Eddie Murphy\", 8).\n.decl Fits_in(Object:symbol, Container:symbol)\nFits_in(\"basketball court\", \"basketball court\").\n.decl Answer()\nAnswer() :- Has_n_children(\"Eddie Murphy\", n_children), Fits_in(n_children, \"basketball court\").\n.output Answer\n\n", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Eddie Murphy\", 8).\n.decl Fits_in(Object:symbol, Container:symbol)\nFits_in(\"basketball court\", \"basketball court\").\n.decl Answer()\nAnswer() :- Has_n_children(\"Eddie Murphy\", n_children), Fits_in(n_children, \"basketball court\").\n.output Answer\n\n"]}
{"id": 1288, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Thirty Years' War\", 30).\n.decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"white cockatoo\", 60).\n.decl Answer()\nAnswer() :- Lives_n_years(\"white cockatoo\", n_years1), Last_n_years(\"Thirty Years' War\", n_years2), n_years1 >= n_years2.\n.output Answer\n\n", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Thirty Years' War\", 30).\n.decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"white cockatoo\", 60).\n.decl Answer()\nAnswer() :- Lives_n_years(\"white cockatoo\", n_years1), Last_n_years(\"Thirty Years' War\", n_years2), n_years1 >= n_years2.\n.output Answer\n\n"]}
{"id": 1289, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"aloe vera\", 0.6).\nHas_density(\"house\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"aloe vera\", density1), Has_density(\"house\", density2), density1 < density2.\n.output Answer\n\n\n", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"aloe vera\", 0.6).\nHas_density(\"house\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"aloe vera\", density1), Has_density(\"house\", density2), density1 < density2.\n.output Answer\n\n\n"]}
{"id": 1290, "answer": true, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Linus Torvalds\", \"male\").\nHas_gender(\"Linus Torvalds' wife\", \"female\").\n.decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Linus Torvalds\", 10).\nHas_strength(\"Linus Torvalds' wife\", 5).\n.decl Answer()\nAnswer() :- Has_gender(\"Linus Torvalds' wife\", \"female\"), Has_strength(\"Linus Torvalds\", strength1), Has_strength(\"Linus Torvalds' wife\", strength2), strength1 > strength2.\n.output Answer\n\n", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Linus Torvalds\", \"male\").\nHas_gender(\"Linus Torvalds' wife\", \"female\").\n.decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Linus Torvalds\", 10).\nHas_strength(\"Linus Torvalds' wife\", 5).\n.decl Answer()\nAnswer() :- Has_gender(\"Linus Torvalds' wife\", \"female\"), Has_strength(\"Linus Torvalds\", strength1), Has_strength(\"Linus Torvalds' wife\", strength2), strength1 > strength2.\n.output Answer\n\n"]}
{"id": 1291, "answer": false, "completion": ".decl Is_licensed_to_practice(Person:symbol, Profession:symbol)\nIs_licensed_to_practice(\"Rand Paul\", \"ophthalmologist\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"ophthalmologist\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"politician\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"physician\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"surgeon\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_", "completions": [".decl Is_licensed_to_practice(Person:symbol, Profession:symbol)\nIs_licensed_to_practice(\"Rand Paul\", \"ophthalmologist\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"ophthalmologist\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"politician\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"physician\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"surgeon\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Rand Paul\", \"United States Senator from Kentucky\").\n.decl Is_"]}
{"id": 1292, "answer": false, "completion": ".decl Has_nationality(Person:symbol, Nationality:symbol)\nHas_nationality(\"Cheb Mami\", \"Algerian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Algerian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"French\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"American\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Canadian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"British\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Australian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"New Zealander\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Irish\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"South African\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Israeli\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Mexican\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Brazilian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Argentine\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Chilean\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Colombian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Venezuelan\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Peruvian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Ecuadorian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Bolivian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Paraguayan\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Uruguayan\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Cuban\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Dominican\").\n", "completions": [".decl Has_nationality(Person:symbol, Nationality:symbol)\nHas_nationality(\"Cheb Mami\", \"Algerian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Algerian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"French\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"American\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Canadian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"British\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Australian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"New Zealander\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Irish\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"South African\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Israeli\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Mexican\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Brazilian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Argentine\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Chilean\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Colombian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Venezuelan\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Peruvian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Ecuadorian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Bolivian\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Paraguayan\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Uruguayan\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Cuban\").\n.decl Has_citizenship(Person:symbol, Citizenship:symbol)\nHas_citizenship(\"Cheb Mami\", \"Dominican\").\n"]}
{"id": 1293, "answer": true, "completion": ".decl Fights_against(Person_A:symbol, Person_B:symbol)\nFights_against(\"Spiderman\", \"Falcon\").\n.decl Answer()\nAnswer() :- Fights_against(\"Spiderman\", \"Falcon\").\n.output Answer\n\n", "completions": [".decl Fights_against(Person_A:symbol, Person_B:symbol)\nFights_against(\"Spiderman\", \"Falcon\").\n.decl Answer()\nAnswer() :- Fights_against(\"Spiderman\", \"Falcon\").\n.output Answer\n\n"]}
{"id": 1294, "answer": true, "completion": ".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Steve Carell\", \"Michael Scott\").\n.decl Has_trait(Character:symbol, Trait:symbol)\nHas_trait(\"Michael Scott\", \"tremendous leadership skills\").\n.decl Answer()\nAnswer() :- Has_character(\"Steve Carell\", character), Has_trait(character, \"tremendous leadership skills\").\n.output Answer\n\n", "completions": [".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Steve Carell\", \"Michael Scott\").\n.decl Has_trait(Character:symbol, Trait:symbol)\nHas_trait(\"Michael Scott\", \"tremendous leadership skills\").\n.decl Answer()\nAnswer() :- Has_character(\"Steve Carell\", character), Has_trait(character, \"tremendous leadership skills\").\n.output Answer\n\n"]}
{"id": 1295, "answer": false, "completion": ".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"milliner\", \"Alice in Wonderland (1951 film)\").\n.decl Has_need(Person:symbol, Need:symbol)\nHas_need(\"milliner\", \"succimer\").\n.decl Answer()\nAnswer() :- Has_role(\"milliner\", role), Has_need(\"milliner\", need), role = need.\n.output Answer\n\n", "completions": [".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"milliner\", \"Alice in Wonderland (1951 film)\").\n.decl Has_need(Person:symbol, Need:symbol)\nHas_need(\"milliner\", \"succimer\").\n.decl Answer()\nAnswer() :- Has_role(\"milliner\", role), Has_need(\"milliner\", need), role = need.\n.output Answer\n\n"]}
{"id": 1296, "answer": false, "completion": ".decl Causes(Drug:symbol, Effect:symbol)\nCauses(\"Narcan\", \"preventing death\").\n.decl Has_effect(Person:symbol, Effect:symbol)\nHas_effect(\"Amy Winehouse\", \"death\").\n.decl Answer()\nAnswer() :- Causes(\"Narcan\", effect), Has_effect(\"Amy Winehouse\", effect).\n.output Answer\n\n", "completions": [".decl Causes(Drug:symbol, Effect:symbol)\nCauses(\"Narcan\", \"preventing death\").\n.decl Has_effect(Person:symbol, Effect:symbol)\nHas_effect(\"Amy Winehouse\", \"death\").\n.decl Answer()\nAnswer() :- Causes(\"Narcan\", effect), Has_effect(\"Amy Winehouse\", effect).\n.output Answer\n\n"]}
{"id": 1297, "answer": true, "completion": ".decl Has_feature(Phone:symbol, Feature:symbol)\nHas_feature(\"Alexander Graham Bell's phone\", \"call waiting\").\n.decl Answer()\nAnswer() :- Has_feature(\"Alexander Graham Bell's phone\", \"call waiting\").\n.output Answer\n\n", "completions": [".decl Has_feature(Phone:symbol, Feature:symbol)\nHas_feature(\"Alexander Graham Bell's phone\", \"call waiting\").\n.decl Answer()\nAnswer() :- Has_feature(\"Alexander Graham Bell's phone\", \"call waiting\").\n.output Answer\n\n"]}
{"id": 1298, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Bart Simpson\", \"comics\").\n.decl Appears_in(Character:symbol, Object:symbol)\nAppears_in(\"The Joker\", \"comics\").\n.decl Answer()\nAnswer() :- Owns(\"Bart Simpson\", object), Appears_in(\"The Joker\", object).\n.output Answer\n\n", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Bart Simpson\", \"comics\").\n.decl Appears_in(Character:symbol, Object:symbol)\nAppears_in(\"The Joker\", \"comics\").\n.decl Answer()\nAnswer() :- Owns(\"Bart Simpson\", object), Appears_in(\"The Joker\", object).\n.output Answer\n\n"]}
{"id": 1299, "answer": true, "completion": ".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"grocery store meat\", \"game\").\n.decl Answer()\nAnswer() :- Has_taste(\"grocery store meat\", \"game\").\n.output Answer\n\n", "completions": [".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"grocery store meat\", \"game\").\n.decl Answer()\nAnswer() :- Has_taste(\"grocery store meat\", \"game\").\n.output Answer\n\n"]}
{"id": 1300, "answer": true, "completion": ".decl Is_original_character(Character:symbol, Show:symbol)\nIs_original_character(\"Elmo\", \"Sesame Street\").\n.decl Answer()\nAnswer() :- Is_original_character(\"Elmo\", \"Sesame Street\").\n.output Answer\n\n", "completions": [".decl Is_original_character(Character:symbol, Show:symbol)\nIs_original_character(\"Elmo\", \"Sesame Street\").\n.decl Answer()\nAnswer() :- Is_original_character(\"Elmo\", \"Sesame Street\").\n.output Answer\n\n"]}
{"id": 1301, "answer": false, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"pescatarian\", \"fish\").\nEats(\"pescatarian\", \"seafood\").\nEats(\"pescatarian\", \"vegetable\").\nEats(\"pescatarian\", \"fruit\").\nEats(\"pescatarian\", \"egg\").\nEats(\"pescatarian\", \"dairy\").\nEats(\"pescatarian\", \"grain\").\nEats(\"pescatarian\", \"legume\").\nEats(\"pescatarian\", \"nut\").\nEats(\"pescatarian\", \"seed\").\nEats(\"pescatarian\", \"mushroom\").\nEats(\"pescatarian\", \"herb\").\nEats(\"pescatarian\", \"spice\").\nEats(\"pescatarian\", \"beverage\").\nEats(\"pescatarian\", \"condiment\").\nEats(\"pescatarian\", \"sauce\").\nEats(\"pescatarian\", \"soup\").\nEats(\"pescatarian\", \"stew\").\nEats(\"pescatarian\", \"salad\").\nEats(\"pescatarian\", \"dessert\").\nEats(\"pescatarian\", \"snack\").\nEats(\"pescatarian\", \"bread\").\nEats(\"pescatarian\", \"pasta\").\nEats(\"pescatarian\", \"noodle\").\nEats(\"pescatarian\", \"rice\").\nEats(\"pescatarian\", \"cereal\").\nEats(\"pescatarian\", \"pizza\").\nEats(\"pescatarian\", \"sandwich\").\nEats(\"pescatarian\", \"burger\").\nEats(\"pescatarian\", \"hot dog\").\nEats(\"pescatarian\", \"sausage\").\nEats(\"pescatarian\", \"bacon\").\nEats(\"pescatarian\", \"ham\").\nEats(\"pescatarian\", \"chicken\").\nEats(\"pescatarian\", \"turkey\").\nEats(\"pescatarian\", \"duck\").\nEats(\"pescatarian\", \"goose\").\nEats(\"pescatarian\", \"quail\").\nEats(\"pescatarian\", \"pheasant\").\nEats(\"pescatarian\", \"partridge\").\nEats(\"pescatarian\", \"grouse\").\nEats(\"pescatarian\", \"pigeon\").\nEats(\"pescatarian\", \"squab\").\nEats(\"pescatarian\", \"ostrich\").\nEats(\"pescatarian\", \"emu\").\nEats(\"pescatarian\", \"rhea\").\nEats(\"pescatarian\", \"camel\").\nEats(\"pescatarian\", \"llama\").\nEats(\"pescatarian\", \"alpaca\").\nEats(\"pescatarian\", \"bison\").\nEats(\"pescatarian\", \"buffalo\").\nEats(\"pescatarian\", \"beef\").\nEats(\"pescatarian\", \"pork\").\nEats(\"pescatarian\", \"lamb\").\nEats(\"pescatarian\", \"mutton\").\nEats(\"pescatarian\", \"veal\").\nEats(\"pescatarian\", \"horse\").\nEats(\"pescatarian\", \"donkey\").\nEats(\"pescatarian\", \"mule\").\nEats(\"pescatarian\", \"yak\").\nEats(\"pesc", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"pescatarian\", \"fish\").\nEats(\"pescatarian\", \"seafood\").\nEats(\"pescatarian\", \"vegetable\").\nEats(\"pescatarian\", \"fruit\").\nEats(\"pescatarian\", \"egg\").\nEats(\"pescatarian\", \"dairy\").\nEats(\"pescatarian\", \"grain\").\nEats(\"pescatarian\", \"legume\").\nEats(\"pescatarian\", \"nut\").\nEats(\"pescatarian\", \"seed\").\nEats(\"pescatarian\", \"mushroom\").\nEats(\"pescatarian\", \"herb\").\nEats(\"pescatarian\", \"spice\").\nEats(\"pescatarian\", \"beverage\").\nEats(\"pescatarian\", \"condiment\").\nEats(\"pescatarian\", \"sauce\").\nEats(\"pescatarian\", \"soup\").\nEats(\"pescatarian\", \"stew\").\nEats(\"pescatarian\", \"salad\").\nEats(\"pescatarian\", \"dessert\").\nEats(\"pescatarian\", \"snack\").\nEats(\"pescatarian\", \"bread\").\nEats(\"pescatarian\", \"pasta\").\nEats(\"pescatarian\", \"noodle\").\nEats(\"pescatarian\", \"rice\").\nEats(\"pescatarian\", \"cereal\").\nEats(\"pescatarian\", \"pizza\").\nEats(\"pescatarian\", \"sandwich\").\nEats(\"pescatarian\", \"burger\").\nEats(\"pescatarian\", \"hot dog\").\nEats(\"pescatarian\", \"sausage\").\nEats(\"pescatarian\", \"bacon\").\nEats(\"pescatarian\", \"ham\").\nEats(\"pescatarian\", \"chicken\").\nEats(\"pescatarian\", \"turkey\").\nEats(\"pescatarian\", \"duck\").\nEats(\"pescatarian\", \"goose\").\nEats(\"pescatarian\", \"quail\").\nEats(\"pescatarian\", \"pheasant\").\nEats(\"pescatarian\", \"partridge\").\nEats(\"pescatarian\", \"grouse\").\nEats(\"pescatarian\", \"pigeon\").\nEats(\"pescatarian\", \"squab\").\nEats(\"pescatarian\", \"ostrich\").\nEats(\"pescatarian\", \"emu\").\nEats(\"pescatarian\", \"rhea\").\nEats(\"pescatarian\", \"camel\").\nEats(\"pescatarian\", \"llama\").\nEats(\"pescatarian\", \"alpaca\").\nEats(\"pescatarian\", \"bison\").\nEats(\"pescatarian\", \"buffalo\").\nEats(\"pescatarian\", \"beef\").\nEats(\"pescatarian\", \"pork\").\nEats(\"pescatarian\", \"lamb\").\nEats(\"pescatarian\", \"mutton\").\nEats(\"pescatarian\", \"veal\").\nEats(\"pescatarian\", \"horse\").\nEats(\"pescatarian\", \"donkey\").\nEats(\"pescatarian\", \"mule\").\nEats(\"pescatarian\", \"yak\").\nEats(\"pesc"]}
{"id": 1302, "answer": false, "completion": ".decl Has_location(Character:symbol, Location:symbol)\nHas_location(\"Arnold\", \"porch\").\nHas_location(\"Grandpa\", \"porch\").\nHas_location(\"Grandma\", \"porch\").\nHas_location(\"Gerald\", \"porch\").\nHas_location(\"Helga\", \"porch\").\nHas_location(\"Phoebe\", \"porch\").\nHas_location(\"Harold\", \"porch\").\nHas_location(\"Stinky\", \"porch\").\nHas_location(\"Sid\", \"porch\").\nHas_location(\"Rhonda\", \"porch\").\nHas_location(\"Eugene\", \"porch\").\nHas_location(\"Curly\", \"porch\").\nHas_location(\"Sheena\", \"porch\").\nHas_location(\"Lila\", \"porch\").\nHas_location(\"Brainy\", \"porch\").\nHas_location(\"Oskar\", \"porch\").\nHas_location(\"Abner\", \"porch\").\nHas_location(\"Ernie\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Simmons\", \"porch\").\nHas_location(\"Mr. Green\", \"porch\").\nHas_location(\"Mr. Vitello\", \"porch\").\nHas_location(\"Mr. Wartz\", \"porch\").\nHas_location(\"Mr. Pataki\", \"porch\").\nHas_location(\"Mr. Smith\", \"porch\").\nHas_location(\"Mr. Bailey\", \"porch\").\nHas_location(\"Mr. Simmons\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"", "completions": [".decl Has_location(Character:symbol, Location:symbol)\nHas_location(\"Arnold\", \"porch\").\nHas_location(\"Grandpa\", \"porch\").\nHas_location(\"Grandma\", \"porch\").\nHas_location(\"Gerald\", \"porch\").\nHas_location(\"Helga\", \"porch\").\nHas_location(\"Phoebe\", \"porch\").\nHas_location(\"Harold\", \"porch\").\nHas_location(\"Stinky\", \"porch\").\nHas_location(\"Sid\", \"porch\").\nHas_location(\"Rhonda\", \"porch\").\nHas_location(\"Eugene\", \"porch\").\nHas_location(\"Curly\", \"porch\").\nHas_location(\"Sheena\", \"porch\").\nHas_location(\"Lila\", \"porch\").\nHas_location(\"Brainy\", \"porch\").\nHas_location(\"Oskar\", \"porch\").\nHas_location(\"Abner\", \"porch\").\nHas_location(\"Ernie\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Simmons\", \"porch\").\nHas_location(\"Mr. Green\", \"porch\").\nHas_location(\"Mr. Vitello\", \"porch\").\nHas_location(\"Mr. Wartz\", \"porch\").\nHas_location(\"Mr. Pataki\", \"porch\").\nHas_location(\"Mr. Smith\", \"porch\").\nHas_location(\"Mr. Bailey\", \"porch\").\nHas_location(\"Mr. Simmons\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\"Mr. Hyunh\", \"porch\").\nHas_location(\""]}
{"id": 1303, "answer": true, "completion": ".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"shrimp scampi\", \"shrimp\").\nContains(\"shrimp scampi\", \"butter\").\nContains(\"shrimp scampi\", \"garlic\").\nContains(\"shrimp scampi\", \"white wine\").\nContains(\"shrimp scampi\", \"lemon\").\nContains(\"shrimp scampi\", \"parsley\").\n.decl Answer()\nAnswer() :- Contains(\"shrimp scampi\", ingredient), ingredient != \"plastic\".\n.output Answer\n\n", "completions": [".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"shrimp scampi\", \"shrimp\").\nContains(\"shrimp scampi\", \"butter\").\nContains(\"shrimp scampi\", \"garlic\").\nContains(\"shrimp scampi\", \"white wine\").\nContains(\"shrimp scampi\", \"lemon\").\nContains(\"shrimp scampi\", \"parsley\").\n.decl Answer()\nAnswer() :- Contains(\"shrimp scampi\", ingredient), ingredient != \"plastic\".\n.output Answer\n\n"]}
{"id": 1304, "answer": true, "completion": ".decl Has_been_killed(Animal:symbol, Reason:symbol)\nHas_been_killed(\"rhinoceros\", \"to improve human sex lives\").\n.decl Answer()\nAnswer() :- Has_been_killed(\"rhinoceros\", \"to improve human sex lives\").\n.output Answer\n\n", "completions": [".decl Has_been_killed(Animal:symbol, Reason:symbol)\nHas_been_killed(\"rhinoceros\", \"to improve human sex lives\").\n.decl Answer()\nAnswer() :- Has_been_killed(\"rhinoceros\", \"to improve human sex lives\").\n.output Answer\n\n"]}
{"id": 1305, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"newborn kitten\", 0.5).\nHas_size(\"standard Amtrak coach seat\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"newborn kitten\", size1), Has_size(\"standard Amtrak coach seat\", size2), 3*size1 <= size2.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"newborn kitten\", 0.5).\nHas_size(\"standard Amtrak coach seat\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"newborn kitten\", size1), Has_size(\"standard Amtrak coach seat\", size2), 3*size1 <= size2.\n.output Answer\n\n"]}
{"id": 1306, "answer": false, "completion": ".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Persian Gulf\", 90000).\nHas_area(\"New Jersey\", 8000).\n.decl Answer()\nAnswer() :- Has_area(\"Persian Gulf\", area1), Has_area(\"New Jersey\", area2), area1 < area2.\n.output Answer\n\n", "completions": [".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Persian Gulf\", 90000).\nHas_area(\"New Jersey\", 8000).\n.decl Answer()\nAnswer() :- Has_area(\"Persian Gulf\", area1), Has_area(\"New Jersey\", area2), area1 < area2.\n.output Answer\n\n"]}
{"id": 1307, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Jurassic era\", \"Jurassic\").\n.decl Is_tourist_destination(Place:symbol)\nIs_tourist_destination(\"Jurassic\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Jurassic era\", place), Is_tourist_destination(place).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Jurassic era\", \"Jurassic\").\n.decl Is_tourist_destination(Place:symbol)\nIs_tourist_destination(\"Jurassic\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Jurassic era\", place), Is_tourist_destination(place).\n.output Answer\n\n"]}
{"id": 1308, "answer": false, "completion": ".decl Believes_in(Person:symbol, Angel:symbol)\nBelieves_in(\"Jews\", \"Old Testament angels\").\nBelieves_in(\"Christians\", \"New Testament angels\").\n.decl Answer()\nAnswer() :- Believes_in(\"Jews\", angel), Believes_in(\"Christians\", angel).\n.output Answer\n\n", "completions": [".decl Believes_in(Person:symbol, Angel:symbol)\nBelieves_in(\"Jews\", \"Old Testament angels\").\nBelieves_in(\"Christians\", \"New Testament angels\").\n.decl Answer()\nAnswer() :- Believes_in(\"Jews\", angel), Believes_in(\"Christians\", angel).\n.output Answer\n\n"]}
{"id": 1309, "answer": false, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Helen Mirren\", \"English\").\n.decl Plays_role(Person:symbol, Role:symbol)\nPlays_role(\"Helen Mirren\", \"Elizabeth II\").\n.decl Answer()\nAnswer() :- Speaks_language(person, \"Arabic\"), Plays_role(person, \"Elizabeth II\").\n.output Answer\n\n", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Helen Mirren\", \"English\").\n.decl Plays_role(Person:symbol, Role:symbol)\nPlays_role(\"Helen Mirren\", \"Elizabeth II\").\n.decl Answer()\nAnswer() :- Speaks_language(person, \"Arabic\"), Plays_role(person, \"Elizabeth II\").\n.output Answer\n\n"]}
{"id": 1310, "answer": true, "completion": ".decl Is_eligible(Person:symbol)\nIs_eligible(\"Kane\").\nIs_eligible(\"Joe Biden\").\n.decl Is_running(Person:symbol)\nIs_running(\"Kane\").\n.decl Answer()\nAnswer() :- Is_eligible(\"Kane\"), Is_eligible(\"Joe Biden\"), Is_running(\"Kane\").\n.output Answer\n\n", "completions": [".decl Is_eligible(Person:symbol)\nIs_eligible(\"Kane\").\nIs_eligible(\"Joe Biden\").\n.decl Is_running(Person:symbol)\nIs_running(\"Kane\").\n.decl Answer()\nAnswer() :- Is_eligible(\"Kane\"), Is_eligible(\"Joe Biden\"), Is_running(\"Kane\").\n.output Answer\n\n"]}
{"id": 1311, "answer": false, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Eid al-Fitr\", 3).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"jockey win Triple Crown\", 365).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"jockey win Triple Crown\", n_days1), Last_n_days(\"Eid al-Fitr\", n_days2), n_days1 <= n_days2.\n.output Answer\n\n", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Eid al-Fitr\", 3).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"jockey win Triple Crown\", 365).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"jockey win Triple Crown\", n_days1), Last_n_days(\"Eid al-Fitr\", n_days2), n_days1 <= n_days2.\n.output Answer\n\n"]}
{"id": 1312, "answer": true, "completion": ".decl Has_birthday(Person:symbol, Date:symbol)\nHas_birthday(\"baby\", \"October 31\").\n.decl Has_zodiac_sign(Person:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"baby\", \"Scorpio\").\n.decl Answer()\nAnswer() :- Has_birthday(\"baby\", \"October 31\"), Has_zodiac_sign(\"baby\", \"Scorpio\").\n.output Answer\n\n", "completions": [".decl Has_birthday(Person:symbol, Date:symbol)\nHas_birthday(\"baby\", \"October 31\").\n.decl Has_zodiac_sign(Person:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"baby\", \"Scorpio\").\n.decl Answer()\nAnswer() :- Has_birthday(\"baby\", \"October 31\"), Has_zodiac_sign(\"baby\", \"Scorpio\").\n.output Answer\n\n"]}
{"id": 1313, "answer": false, "completion": ".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"A Tale of Two Cities\", \"novel\").\nIs_genre(\"A Tale of Two Cities\", \"fiction\").\nIs_genre(\"A Tale of Two Cities\", \"historical fiction\").\n.decl Is_popular(Book:symbol)\nIs_popular(\"A Tale of Two Cities\").\n.decl Answer()\nAnswer() :- Is_genre(\"A Tale of Two Cities\", \"science\"), Is_popular(\"A Tale of Two Cities\").\n.output Answer\n\n", "completions": [".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"A Tale of Two Cities\", \"novel\").\nIs_genre(\"A Tale of Two Cities\", \"fiction\").\nIs_genre(\"A Tale of Two Cities\", \"historical fiction\").\n.decl Is_popular(Book:symbol)\nIs_popular(\"A Tale of Two Cities\").\n.decl Answer()\nAnswer() :- Is_genre(\"A Tale of Two Cities\", \"science\"), Is_popular(\"A Tale of Two Cities\").\n.output Answer\n\n"]}
{"id": 1314, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Michael Vick\", \"Michael Vick\").\n.decl Has_hypothetical_blacklist(Organization:symbol, Person:symbol)\nHas_hypothetical_blacklist(\"People for the Ethical Treatment of Animals\", \"Michael Vick\").\n.decl Answer()\nAnswer() :- Has_name(\"Michael Vick\", name), Has_hypothetical_blacklist(\"People for the Ethical Treatment of Animals\", name).\n.output Answer\n\n", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Michael Vick\", \"Michael Vick\").\n.decl Has_hypothetical_blacklist(Organization:symbol, Person:symbol)\nHas_hypothetical_blacklist(\"People for the Ethical Treatment of Animals\", \"Michael Vick\").\n.decl Answer()\nAnswer() :- Has_name(\"Michael Vick\", name), Has_hypothetical_blacklist(\"People for the Ethical Treatment of Animals\", name).\n.output Answer\n\n"]}
{"id": 1315, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"seawater\", 8.34).\nHas_weight(\"six year old\", 40).\n.decl Answer()\nAnswer() :- Has_weight(\"seawater\", weight1), Has_weight(\"six year old\", weight2), weight1 > weight2.\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"seawater\", 8.34).\nHas_weight(\"six year old\", 40).\n.decl Answer()\nAnswer() :- Has_weight(\"seawater\", weight1), Has_weight(\"six year old\", weight2), weight1 > weight2.\n.output Answer\n\n"]}
{"id": 1316, "answer": false, "completion": ".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"someone\", \"Japan\").\n.decl Is_in(Country:symbol, Region:symbol)\nIs_in(\"Japan\", \"Asia\").\nIs_in(\"Norway\", \"Nordic countries\").\nIs_in(\"Sweden\", \"Nordic countries\").\nIs_in(\"Denmark\", \"Nordic countries\").\nIs_in(\"Finland\", \"Nordic countries\").\nIs_in(\"Iceland\", \"Nordic countries\").\n.decl Needs_passport(Person:symbol, Country:symbol)\nNeeds_passport(person, country) :- Is_from(person, country1), Is_in(country, region), Is_in(country1, region).\n.decl Answer()\nAnswer() :- Needs_passport(\"someone\", \"Norway\").\nAnswer() :- Needs_passport(\"someone\", \"Sweden\").\nAnswer() :- Needs_passport(\"someone\", \"Denmark\").\nAnswer() :- Needs_passport(\"someone\", \"Finland\").\nAnswer() :- Needs_passport(\"someone\", \"Iceland\").\n.output Answer\n\n", "completions": [".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"someone\", \"Japan\").\n.decl Is_in(Country:symbol, Region:symbol)\nIs_in(\"Japan\", \"Asia\").\nIs_in(\"Norway\", \"Nordic countries\").\nIs_in(\"Sweden\", \"Nordic countries\").\nIs_in(\"Denmark\", \"Nordic countries\").\nIs_in(\"Finland\", \"Nordic countries\").\nIs_in(\"Iceland\", \"Nordic countries\").\n.decl Needs_passport(Person:symbol, Country:symbol)\nNeeds_passport(person, country) :- Is_from(person, country1), Is_in(country, region), Is_in(country1, region).\n.decl Answer()\nAnswer() :- Needs_passport(\"someone\", \"Norway\").\nAnswer() :- Needs_passport(\"someone\", \"Sweden\").\nAnswer() :- Needs_passport(\"someone\", \"Denmark\").\nAnswer() :- Needs_passport(\"someone\", \"Finland\").\nAnswer() :- Needs_passport(\"someone\", \"Iceland\").\n.output Answer\n\n"]}
{"id": 1317, "answer": false, "completion": ".decl Is_head_of_state(Person:symbol, Country:symbol)\nIs_head_of_state(\"John Key\", \"New Zealand\").\n.decl Has_executive_order(Country:symbol)\nHas_executive_order(\"USA\").\n.decl Answer()\nAnswer() :- Is_head_of_state(\"John Key\", \"USA\").\nAnswer() :- Is_head_of_state(\"John Key\", country), Has_executive_order(country).\n.output Answer\n\n", "completions": [".decl Is_head_of_state(Person:symbol, Country:symbol)\nIs_head_of_state(\"John Key\", \"New Zealand\").\n.decl Has_executive_order(Country:symbol)\nHas_executive_order(\"USA\").\n.decl Answer()\nAnswer() :- Is_head_of_state(\"John Key\", \"USA\").\nAnswer() :- Is_head_of_state(\"John Key\", country), Has_executive_order(country).\n.output Answer\n\n"]}
{"id": 1318, "answer": false, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Athena\", \"Athena\").\nHas_name(\"Aphrodite\", \"Aphrodite\").\nHas_name(\"Freya\", \"Freya\").\n.decl Answer()\nAnswer() :- Has_name(\"Athena\", name1), Has_name(\"Aphrodite\", name2), Has_name(\"Freya\", name3), name1 + name2 = name3.\n.output Answer\n\n", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Athena\", \"Athena\").\nHas_name(\"Aphrodite\", \"Aphrodite\").\nHas_name(\"Freya\", \"Freya\").\n.decl Answer()\nAnswer() :- Has_name(\"Athena\", name1), Has_name(\"Aphrodite\", name2), Has_name(\"Freya\", name3), name1 + name2 = name3.\n.output Answer\n\n"]}
{"id": 1319, "answer": true, "completion": ".decl Has_title_fight_wins(Person:symbol, N_wins:float)\nHas_title_fight_wins(\"Jack Dempsey\", 12).\n.decl Has_title_fight_wins_in_weight_class(Person:symbol, Weight_class:symbol, N_wins:float)\nHas_title_fight_wins_in_weight_class(\"Jack Dempsey\", \"heavyweight\", 12).\nHas_title_fight_wins_in_weight_class(\"Jack Dempsey\", \"light heavyweight\", 0).\n.decl Answer()\nAnswer() :- Has_title_fight_wins(\"Jack Dempsey\", n_wins1), Has_title_fight_wins_in_weight_class(\"Jack Dempsey\", weight_class, n_wins2), n_wins1 >= n_wins2.\n.output Answer\n\n", "completions": [".decl Has_title_fight_wins(Person:symbol, N_wins:float)\nHas_title_fight_wins(\"Jack Dempsey\", 12).\n.decl Has_title_fight_wins_in_weight_class(Person:symbol, Weight_class:symbol, N_wins:float)\nHas_title_fight_wins_in_weight_class(\"Jack Dempsey\", \"heavyweight\", 12).\nHas_title_fight_wins_in_weight_class(\"Jack Dempsey\", \"light heavyweight\", 0).\n.decl Answer()\nAnswer() :- Has_title_fight_wins(\"Jack Dempsey\", n_wins1), Has_title_fight_wins_in_weight_class(\"Jack Dempsey\", weight_class, n_wins2), n_wins1 >= n_wins2.\n.output Answer\n\n"]}
{"id": 1320, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Seinfeld\", 7).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"new Seinfeld episode\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"new Seinfeld episode\", n_days1), Last_n_days(\"Seinfeld\", n_days2), n_days1 <= n_days2.\n.output Answer\n\n", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Seinfeld\", 7).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"new Seinfeld episode\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"new Seinfeld episode\", n_days1), Last_n_days(\"Seinfeld\", n_days2), n_days1 <= n_days2.\n.output Answer\n\n"]}
{"id": 1321, "answer": false, "completion": ".decl Has_language(Country:symbol, Language:symbol)\nHas_language(\"Burundi\", \"French\").\nHas_language(\"New Brunswick\", \"English\").\n.decl Answer()\nAnswer() :- Has_language(\"Burundi\", language1), Has_language(\"New Brunswick\", language2), language1 = language2.\n.output Answer\n\n\n", "completions": [".decl Has_language(Country:symbol, Language:symbol)\nHas_language(\"Burundi\", \"French\").\nHas_language(\"New Brunswick\", \"English\").\n.decl Answer()\nAnswer() :- Has_language(\"Burundi\", language1), Has_language(\"New Brunswick\", language2), language1 = language2.\n.output Answer\n\n\n"]}
{"id": 1322, "answer": true, "completion": ".decl Has_ingredient(Restaurant:symbol, Ingredient:symbol)\nHas_ingredient(\"Carmine's\", \"olive oil\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Carmine's\", \"olive oil\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Restaurant:symbol, Ingredient:symbol)\nHas_ingredient(\"Carmine's\", \"olive oil\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Carmine's\", \"olive oil\").\n.output Answer\n\n"]}
{"id": 1323, "answer": false, "completion": ".decl Has_n_deaths(Job:symbol, N_deaths:float)\nHas_n_deaths(\"mail carrier\", 1).\nHas_n_deaths(\"police officer\", 1).\nHas_n_deaths(\"taxi driver\", 1).\nHas_n_deaths(\"truck driver\", 1).\nHas_n_deaths(\"construction worker\", 1).\nHas_n_deaths(\"farmer\", 1).\nHas_n_deaths(\"electrician\", 1).\nHas_n_deaths(\"firefighter\", 1).\nHas_n_deaths(\"pilot\", 1).\nHas_n_deaths(\"roofer\", 1).\nHas_n_deaths(\"iron worker\", 1).\nHas_n_deaths(\"logger\", 1).\nHas_n_deaths(\"garbage collector\", 1).\nHas_n_deaths(\"miner\", 1).\nHas_n_deaths(\"oil rig worker\", 1).\nHas_n_deaths(\"power line worker\", 1).\nHas_n_deaths(\"steel worker\", 1).\nHas_n_deaths(\"welder\", 1).\nHas_n_deaths(\"fisherman\", 1).\nHas_n_deaths(\"lumberjack\", 1).\nHas_n_deaths(\"mechanic\", 1).\nHas_n_deaths(\"painter\", 1).\nHas_n_deaths(\"plumber\", 1).\nHas_n_deaths(\"carpenter\", 1).\nHas_n_deaths(\"machinist\", 1).\nHas_n_deaths(\"sheet metal worker\", 1).\nHas_n_deaths(\"soldier\", 1).\nHas_n_deaths(\"air traffic controller\", 1).\nHas_n_deaths(\"airline pilot\", 1).\nHas_n_deaths(\"bus driver\", 1).\nHas_n_deaths(\"dentist\", 1).\nHas_n_deaths(\"doctor\", 1).\nHas_n_deaths(\"engineer\", 1).\nHas_n_deaths(\"lawyer\", 1).\nHas_n_deaths(\"nurse\", 1).\nHas_n_deaths(\"pharmacist\", 1).\nHas_n_deaths(\"physician\", 1).\nHas_n_deaths(\"psychologist\", 1).\nHas_n_deaths(\"real estate agent\", 1).\nHas_n_deaths(\"scientist\", 1).\nHas_n_deaths(\"teacher\", 1).\nHas_n_deaths(\"accountant\", 1).\nHas_n_deaths(\"actor\", 1).\nHas_n_deaths(\"architect\", 1).\nHas_n_deaths(\"athlete\", 1).\nHas_n_deaths(\"author\", 1).\nHas_n_deaths(\"bartender\", 1).\nHas_n_deaths(\"chef\", 1).\nHas_n_deaths(\"coach\", 1).\nHas_n_deaths(\"comedian\", 1).\nHas_n_deaths(\"dancer\", 1).\nHas_n_deaths(\"designer\", 1).\nHas_n_deaths(\"director\", 1).\nHas_n_deaths(\"entertainer\", 1).\nHas_n_deaths(\"fashion model\", 1).\nHas_n_deaths(\"musician\", 1).\nHas_n_deaths(\"photographer\", 1).\nHas_n_deaths(\"producer\", 1).\nHas_n_deaths(\"s", "completions": [".decl Has_n_deaths(Job:symbol, N_deaths:float)\nHas_n_deaths(\"mail carrier\", 1).\nHas_n_deaths(\"police officer\", 1).\nHas_n_deaths(\"taxi driver\", 1).\nHas_n_deaths(\"truck driver\", 1).\nHas_n_deaths(\"construction worker\", 1).\nHas_n_deaths(\"farmer\", 1).\nHas_n_deaths(\"electrician\", 1).\nHas_n_deaths(\"firefighter\", 1).\nHas_n_deaths(\"pilot\", 1).\nHas_n_deaths(\"roofer\", 1).\nHas_n_deaths(\"iron worker\", 1).\nHas_n_deaths(\"logger\", 1).\nHas_n_deaths(\"garbage collector\", 1).\nHas_n_deaths(\"miner\", 1).\nHas_n_deaths(\"oil rig worker\", 1).\nHas_n_deaths(\"power line worker\", 1).\nHas_n_deaths(\"steel worker\", 1).\nHas_n_deaths(\"welder\", 1).\nHas_n_deaths(\"fisherman\", 1).\nHas_n_deaths(\"lumberjack\", 1).\nHas_n_deaths(\"mechanic\", 1).\nHas_n_deaths(\"painter\", 1).\nHas_n_deaths(\"plumber\", 1).\nHas_n_deaths(\"carpenter\", 1).\nHas_n_deaths(\"machinist\", 1).\nHas_n_deaths(\"sheet metal worker\", 1).\nHas_n_deaths(\"soldier\", 1).\nHas_n_deaths(\"air traffic controller\", 1).\nHas_n_deaths(\"airline pilot\", 1).\nHas_n_deaths(\"bus driver\", 1).\nHas_n_deaths(\"dentist\", 1).\nHas_n_deaths(\"doctor\", 1).\nHas_n_deaths(\"engineer\", 1).\nHas_n_deaths(\"lawyer\", 1).\nHas_n_deaths(\"nurse\", 1).\nHas_n_deaths(\"pharmacist\", 1).\nHas_n_deaths(\"physician\", 1).\nHas_n_deaths(\"psychologist\", 1).\nHas_n_deaths(\"real estate agent\", 1).\nHas_n_deaths(\"scientist\", 1).\nHas_n_deaths(\"teacher\", 1).\nHas_n_deaths(\"accountant\", 1).\nHas_n_deaths(\"actor\", 1).\nHas_n_deaths(\"architect\", 1).\nHas_n_deaths(\"athlete\", 1).\nHas_n_deaths(\"author\", 1).\nHas_n_deaths(\"bartender\", 1).\nHas_n_deaths(\"chef\", 1).\nHas_n_deaths(\"coach\", 1).\nHas_n_deaths(\"comedian\", 1).\nHas_n_deaths(\"dancer\", 1).\nHas_n_deaths(\"designer\", 1).\nHas_n_deaths(\"director\", 1).\nHas_n_deaths(\"entertainer\", 1).\nHas_n_deaths(\"fashion model\", 1).\nHas_n_deaths(\"musician\", 1).\nHas_n_deaths(\"photographer\", 1).\nHas_n_deaths(\"producer\", 1).\nHas_n_deaths(\"s"]}
{"id": 1324, "answer": false, "completion": ".decl Has_birth_weight(Animal:symbol, Birth_weight:float)\nHas_birth_weight(\"duck\", 0.1).\n.decl Has_birth_weight_limit(Animal:symbol, Birth_weight_limit:float)\nHas_birth_weight_limit(\"duck\", 0.5).\n.decl Answer()\nAnswer() :- Has_birth_weight(\"duck\", birth_weight), Has_birth_weight_limit(\"duck\", birth_weight_limit), birth_weight > birth_weight_limit.\n.output Answer\n\n", "completions": [".decl Has_birth_weight(Animal:symbol, Birth_weight:float)\nHas_birth_weight(\"duck\", 0.1).\n.decl Has_birth_weight_limit(Animal:symbol, Birth_weight_limit:float)\nHas_birth_weight_limit(\"duck\", 0.5).\n.decl Answer()\nAnswer() :- Has_birth_weight(\"duck\", birth_weight), Has_birth_weight_limit(\"duck\", birth_weight_limit), birth_weight > birth_weight_limit.\n.output Answer\n\n"]}
{"id": 1325, "answer": false, "completion": ".decl Used_for(Tool:symbol, Event:symbol)\nUsed_for(\"pen\", \"Martin Luther's Reformation opening salvo\").\nUsed_for(\"nails\", \"crucifixion\").\n.decl Answer()\nAnswer() :- Used_for(tool, \"Martin Luther's Reformation opening salvo\"), Used_for(tool, \"crucifixion\").\n.output Answer\n\n", "completions": [".decl Used_for(Tool:symbol, Event:symbol)\nUsed_for(\"pen\", \"Martin Luther's Reformation opening salvo\").\nUsed_for(\"nails\", \"crucifixion\").\n.decl Answer()\nAnswer() :- Used_for(tool, \"Martin Luther's Reformation opening salvo\"), Used_for(tool, \"crucifixion\").\n.output Answer\n\n"]}
{"id": 1326, "answer": true, "completion": ".decl Has_fat_content(Milk:symbol, Fat_content:float)\nHas_fat_content(\"bottled milk\", 0.1).\nHas_fat_content(\"cream\", 0.3).\n.decl Answer()\nAnswer() :- Has_fat_content(\"bottled milk\", fat_content1), Has_fat_content(\"cream\", fat_content2), fat_content1 < fat_content2.\n.output Answer\n\n", "completions": [".decl Has_fat_content(Milk:symbol, Fat_content:float)\nHas_fat_content(\"bottled milk\", 0.1).\nHas_fat_content(\"cream\", 0.3).\n.decl Answer()\nAnswer() :- Has_fat_content(\"bottled milk\", fat_content1), Has_fat_content(\"cream\", fat_content2), fat_content1 < fat_content2.\n.output Answer\n\n"]}
{"id": 1327, "answer": true, "completion": ".decl Is_safe_to_use(Substance_A:symbol, Substance_B:symbol)\nIs_safe_to_use(\"ammonia\", \"clorox\").\n.decl Answer()\nAnswer() :- Is_safe_to_use(\"ammonia\", \"clorox\").\n.output Answer\n\n", "completions": [".decl Is_safe_to_use(Substance_A:symbol, Substance_B:symbol)\nIs_safe_to_use(\"ammonia\", \"clorox\").\n.decl Answer()\nAnswer() :- Is_safe_to_use(\"ammonia\", \"clorox\").\n.output Answer\n\n"]}
{"id": 1328, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Deacon\", \"Deacon\").\n.decl Has_hobby(Person:symbol, Hobby:symbol)\nHas_hobby(\"Deacon\", \"podcasts\").\n.decl Has_name(Podcast:symbol, Name:symbol)\nHas_name(\"God Awful Movies\", \"God Awful Movies\").\n.decl Answer()\nAnswer() :- Has_job(\"Deacon\", \"Deacon\"), Has_hobby(\"Deacon\", \"podcasts\"), Has_name(\"God Awful Movies\", \"God Awful Movies\").\n.output Answer\n\n", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Deacon\", \"Deacon\").\n.decl Has_hobby(Person:symbol, Hobby:symbol)\nHas_hobby(\"Deacon\", \"podcasts\").\n.decl Has_name(Podcast:symbol, Name:symbol)\nHas_name(\"God Awful Movies\", \"God Awful Movies\").\n.decl Answer()\nAnswer() :- Has_job(\"Deacon\", \"Deacon\"), Has_hobby(\"Deacon\", \"podcasts\"), Has_name(\"God Awful Movies\", \"God Awful Movies\").\n.output Answer\n\n"]}
{"id": 1329, "answer": false, "completion": ".decl Worships(Person:symbol, God:symbol)\nWorships(\"Zoroastrian\", \"Ahura Mazda\").\n.decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Zoroastrian\", \"Zoroastrianism\").\n.decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Muslim\", \"Islam\").\n.decl Answer()\nAnswer() :- Worships(person, \"Ahura Mazda\"), Has_religion(person, \"Islam\").\n.output Answer\n\n", "completions": [".decl Worships(Person:symbol, God:symbol)\nWorships(\"Zoroastrian\", \"Ahura Mazda\").\n.decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Zoroastrian\", \"Zoroastrianism\").\n.decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Muslim\", \"Islam\").\n.decl Answer()\nAnswer() :- Worships(person, \"Ahura Mazda\"), Has_religion(person, \"Islam\").\n.output Answer\n\n"]}
{"id": 1330, "answer": true, "completion": ".decl Has_lead_singer(Band:symbol, Lead_singer:symbol)\nHas_lead_singer(\"Nine Inch Nails\", \"Trent Reznor\").\n.decl Has_associate(Person:symbol, Associate:symbol)\nHas_associate(\"Trent Reznor\", \"David Lynch\").\n.decl Answer()\nAnswer() :- Has_lead_singer(\"Nine Inch Nails\", lead_singer), Has_associate(lead_singer, \"David Lynch\").\n.output Answer\n\n", "completions": [".decl Has_lead_singer(Band:symbol, Lead_singer:symbol)\nHas_lead_singer(\"Nine Inch Nails\", \"Trent Reznor\").\n.decl Has_associate(Person:symbol, Associate:symbol)\nHas_associate(\"Trent Reznor\", \"David Lynch\").\n.decl Answer()\nAnswer() :- Has_lead_singer(\"Nine Inch Nails\", lead_singer), Has_associate(lead_singer, \"David Lynch\").\n.output Answer\n\n"]}
{"id": 1331, "answer": true, "completion": ".decl Supports(Country_A:symbol, Country_B:symbol)\nSupports(\"Switzerland\", \"United States\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Spanish–American War\", \"1898\").\n.decl Answer()\nAnswer() :- Supports(\"Switzerland\", \"United States\"), Happens_in_time(\"Spanish–American War\", \"1898\").\n.output Answer\n\n", "completions": [".decl Supports(Country_A:symbol, Country_B:symbol)\nSupports(\"Switzerland\", \"United States\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Spanish–American War\", \"1898\").\n.decl Answer()\nAnswer() :- Supports(\"Switzerland\", \"United States\"), Happens_in_time(\"Spanish–American War\", \"1898\").\n.output Answer\n\n"]}
{"id": 1332, "answer": false, "completion": ".decl Has_type(Tree:symbol, Type:symbol)\nHas_type(\"Christmas tree\", \"coniferous\").\n.decl Answer()\nAnswer() :- Has_type(\"Christmas tree\", \"deciduous\").\n.output Answer\n\n", "completions": [".decl Has_type(Tree:symbol, Type:symbol)\nHas_type(\"Christmas tree\", \"coniferous\").\n.decl Answer()\nAnswer() :- Has_type(\"Christmas tree\", \"deciduous\").\n.output Answer\n\n"]}
{"id": 1333, "answer": true, "completion": ".decl Survives(Character:symbol, Movie:symbol)\nSurvives(\"Iron Man\", \"Avengers: Infinity War\").\n.decl Plays(Actor:symbol, Character:symbol)\nPlays(\"Robert Downey Jr\", \"Iron Man\").\n.decl Answer()\nAnswer() :- Plays(\"Robert Downey Jr\", character), Survives(character, \"Avengers: Infinity War\").\n.output Answer\n\n", "completions": [".decl Survives(Character:symbol, Movie:symbol)\nSurvives(\"Iron Man\", \"Avengers: Infinity War\").\n.decl Plays(Actor:symbol, Character:symbol)\nPlays(\"Robert Downey Jr\", \"Iron Man\").\n.decl Answer()\nAnswer() :- Plays(\"Robert Downey Jr\", character), Survives(character, \"Avengers: Infinity War\").\n.output Answer\n\n"]}
{"id": 1334, "answer": false, "completion": ".decl Has_magnetic_field(Object:symbol, Magnetic_field:float)\nHas_magnetic_field(\"Earth\", 0.3).\n.decl Has_magnetic_field(Object:symbol, Magnetic_field:float)\nHas_magnetic_field(\"compass\", 0.3).\n.decl Answer()\nAnswer() :- Has_magnetic_field(\"Earth\", magnetic_field1), Has_magnetic_field(\"compass\", magnetic_field2), magnetic_field1 != magnetic_field2.\n.output Answer\n\n", "completions": [".decl Has_magnetic_field(Object:symbol, Magnetic_field:float)\nHas_magnetic_field(\"Earth\", 0.3).\n.decl Has_magnetic_field(Object:symbol, Magnetic_field:float)\nHas_magnetic_field(\"compass\", 0.3).\n.decl Answer()\nAnswer() :- Has_magnetic_field(\"Earth\", magnetic_field1), Has_magnetic_field(\"compass\", magnetic_field2), magnetic_field1 != magnetic_field2.\n.output Answer\n\n"]}
{"id": 1335, "answer": false, "completion": ".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"menstruation\", 24).\n.decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"tampons\", 8).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"menstruation\", n_hours1), Lasts_n_hours(\"tampons\", n_hours2), n_hours1 <= n_hours2.\n.output Answer\n\n", "completions": [".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"menstruation\", 24).\n.decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"tampons\", 8).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"menstruation\", n_hours1), Lasts_n_hours(\"tampons\", n_hours2), n_hours1 <= n_hours2.\n.output Answer\n\n"]}
{"id": 1336, "answer": true, "completion": ".decl Is_character_in(Character:symbol, Story:symbol)\nIs_character_in(\"Robin Hood\", \"Legend of Robin Hood\").\nIs_character_in(\"Little John\", \"Legend of Robin Hood\").\nIs_character_in(\"Friar Tuck\", \"Legend of Robin Hood\").\nIs_character_in(\"Maid Marian\", \"Legend of Robin Hood\").\nIs_character_in(\"King Richard\", \"Legend of Robin Hood\").\nIs_character_in(\"Prince John\", \"Legend of Robin Hood\").\nIs_character_in(\"Sheriff of Nottingham\", \"Legend of Robin Hood\").\n.decl Is_fictional(Character:symbol)\nIs_fictional(\"Robin Hood\").\nIs_fictional(\"Little John\").\nIs_fictional(\"Friar Tuck\").\nIs_fictional(\"Maid Marian\").\nIs_fictional(\"King Richard\").\nIs_fictional(\"Prince John\").\nIs_fictional(\"Sheriff of Nottingham\").\n.decl Answer()\nAnswer() :- Is_character_in(character, \"Legend of Robin Hood\"), Is_fictional(character).\n.output Answer\n\n", "completions": [".decl Is_character_in(Character:symbol, Story:symbol)\nIs_character_in(\"Robin Hood\", \"Legend of Robin Hood\").\nIs_character_in(\"Little John\", \"Legend of Robin Hood\").\nIs_character_in(\"Friar Tuck\", \"Legend of Robin Hood\").\nIs_character_in(\"Maid Marian\", \"Legend of Robin Hood\").\nIs_character_in(\"King Richard\", \"Legend of Robin Hood\").\nIs_character_in(\"Prince John\", \"Legend of Robin Hood\").\nIs_character_in(\"Sheriff of Nottingham\", \"Legend of Robin Hood\").\n.decl Is_fictional(Character:symbol)\nIs_fictional(\"Robin Hood\").\nIs_fictional(\"Little John\").\nIs_fictional(\"Friar Tuck\").\nIs_fictional(\"Maid Marian\").\nIs_fictional(\"King Richard\").\nIs_fictional(\"Prince John\").\nIs_fictional(\"Sheriff of Nottingham\").\n.decl Answer()\nAnswer() :- Is_character_in(character, \"Legend of Robin Hood\"), Is_fictional(character).\n.output Answer\n\n"]}
{"id": 1337, "answer": true, "completion": ".decl Has_n_hands(Weapon:symbol, N_hands:float)\nHas_n_hands(\"gladiator's weapon of choice\", 1).\nHas_n_hands(\"Soul Calibur's Faust\", 2).\n.decl Answer()\nAnswer() :- Has_n_hands(\"gladiator's weapon of choice\", n_hands1), Has_n_hands(\"Soul Calibur's Faust\", n_hands2), n_hands1 < n_hands2.\n.output Answer\n\n", "completions": [".decl Has_n_hands(Weapon:symbol, N_hands:float)\nHas_n_hands(\"gladiator's weapon of choice\", 1).\nHas_n_hands(\"Soul Calibur's Faust\", 2).\n.decl Answer()\nAnswer() :- Has_n_hands(\"gladiator's weapon of choice\", n_hands1), Has_n_hands(\"Soul Calibur's Faust\", n_hands2), n_hands1 < n_hands2.\n.output Answer\n\n"]}
{"id": 1338, "answer": false, "completion": ".decl Buys(Person:symbol, Product:symbol)\nBuys(\"Mozart\", \"piano\").\nBuys(\"Mozart\", \"violin\").\nBuys(\"Mozart\", \"sheet music\").\n.decl Sells(Store:symbol, Product:symbol)\nSells(\"Dolce & Gabbana\", \"clothes\").\nSells(\"Dolce & Gabbana\", \"shoes\").\nSells(\"Dolce & Gabbana\", \"accessories\").\n.decl Answer()\nAnswer() :- Buys(\"Mozart\", product), Sells(\"Dolce & Gabbana\", product).\n.output Answer\n\n", "completions": [".decl Buys(Person:symbol, Product:symbol)\nBuys(\"Mozart\", \"piano\").\nBuys(\"Mozart\", \"violin\").\nBuys(\"Mozart\", \"sheet music\").\n.decl Sells(Store:symbol, Product:symbol)\nSells(\"Dolce & Gabbana\", \"clothes\").\nSells(\"Dolce & Gabbana\", \"shoes\").\nSells(\"Dolce & Gabbana\", \"accessories\").\n.decl Answer()\nAnswer() :- Buys(\"Mozart\", product), Sells(\"Dolce & Gabbana\", product).\n.output Answer\n\n"]}
{"id": 1339, "answer": true, "completion": ".decl Inspires(Person_A:symbol, Person_B:symbol)\nInspires(\"Nine Inch Nails\", \"Aretha Franklin\").\n.decl Answer()\nAnswer() :- Inspires(\"Nine Inch Nails\", \"Aretha Franklin\").\n.output Answer\n\n", "completions": [".decl Inspires(Person_A:symbol, Person_B:symbol)\nInspires(\"Nine Inch Nails\", \"Aretha Franklin\").\n.decl Answer()\nAnswer() :- Inspires(\"Nine Inch Nails\", \"Aretha Franklin\").\n.output Answer\n\n"]}
{"id": 1340, "answer": true, "completion": ".decl Is_lactose_intolerant(Person:symbol)\nIs_lactose_intolerant(\"John\").\n.decl Contains_lactose(Food:symbol)\nContains_lactose(\"cream\").\n.decl Answer()\nAnswer() :- Is_lactose_intolerant(person), Contains_lactose(food).\n.output Answer\n\n", "completions": [".decl Is_lactose_intolerant(Person:symbol)\nIs_lactose_intolerant(\"John\").\n.decl Contains_lactose(Food:symbol)\nContains_lactose(\"cream\").\n.decl Answer()\nAnswer() :- Is_lactose_intolerant(person), Contains_lactose(food).\n.output Answer\n\n"]}
{"id": 1341, "answer": false, "completion": ".decl Works_in_season(Person:symbol, Season:symbol)\nWorks_in_season(\"Santa Claus\", \"winter\").\n.decl Answer()\nAnswer() :- Works_in_season(\"Santa Claus\", \"summer\").\n.output Answer\n\n", "completions": [".decl Works_in_season(Person:symbol, Season:symbol)\nWorks_in_season(\"Santa Claus\", \"winter\").\n.decl Answer()\nAnswer() :- Works_in_season(\"Santa Claus\", \"summer\").\n.output Answer\n\n"]}
{"id": 1342, "answer": true, "completion": ".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"bachelor's degree\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"leap year\", n_years1), Lasts_n_years(\"bachelor's degree\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n", "completions": [".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"bachelor's degree\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"leap year\", n_years1), Lasts_n_years(\"bachelor's degree\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n"]}
{"id": 1343, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Albanian Civil War\", \"1997\").\nHappens_in_time(\"Harry Potter and the Philosopher's Stone\", \"1997\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Albanian Civil War\", time), Happens_in_time(\"Harry Potter and the Philosopher's Stone\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Albanian Civil War\", \"1997\").\nHappens_in_time(\"Harry Potter and the Philosopher's Stone\", \"1997\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Albanian Civil War\", time), Happens_in_time(\"Harry Potter and the Philosopher's Stone\", time).\n.output Answer\n\n"]}
{"id": 1344, "answer": true, "completion": ".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Jay-Z\", \"Kanye West\").\nCollaborates(\"Kanye West\", \"Louis Armstrong\").\n.decl Answer()\nAnswer() :- Collaborates(\"Jay-Z\", \"Louis Armstrong\").\nAnswer() :- Collaborates(\"Jay-Z\", person2), Collaborates(person2, \"Louis Armstrong\").\n.output Answer\n\n", "completions": [".decl Collaborates(Person_A:symbol, Person_B:symbol)\nCollaborates(\"Jay-Z\", \"Kanye West\").\nCollaborates(\"Kanye West\", \"Louis Armstrong\").\n.decl Answer()\nAnswer() :- Collaborates(\"Jay-Z\", \"Louis Armstrong\").\nAnswer() :- Collaborates(\"Jay-Z\", person2), Collaborates(person2, \"Louis Armstrong\").\n.output Answer\n\n"]}
{"id": 1345, "answer": true, "completion": ".decl Is_allowed_in(Object:symbol, Place:symbol)\nIs_allowed_in(\"robusto\", \"Central Park Zoo\").\n.decl Answer()\nAnswer() :- Is_allowed_in(\"robusto\", \"Central Park Zoo\").\n.output Answer\n\n", "completions": [".decl Is_allowed_in(Object:symbol, Place:symbol)\nIs_allowed_in(\"robusto\", \"Central Park Zoo\").\n.decl Answer()\nAnswer() :- Is_allowed_in(\"robusto\", \"Central Park Zoo\").\n.output Answer\n\n"]}
{"id": 1346, "answer": false, "completion": ".decl Has_element(Object:symbol, Element:symbol)\nHas_element(\"coronavirus\", \"carbon\").\nHas_element(\"coronavirus\", \"hydrogen\").\nHas_element(\"coronavirus\", \"nitrogen\").\nHas_element(\"coronavirus\", \"oxygen\").\nHas_element(\"coronavirus\", \"phosphorus\").\nHas_element(\"coronavirus\", \"sulfur\").\nHas_element(\"coronavirus\", \"sodium\").\nHas_element(\"coronavirus\", \"potassium\").\nHas_element(\"coronavirus\", \"chlorine\").\nHas_element(\"coronavirus\", \"calcium\").\nHas_element(\"coronavirus\", \"magnesium\").\nHas_element(\"coronavirus\", \"iron\").\nHas_element(\"coronavirus\", \"zinc\").\nHas_element(\"coronavirus\", \"copper\").\nHas_element(\"coronavirus\", \"manganese\").\nHas_element(\"coronavirus\", \"selenium\").\nHas_element(\"coronavirus\", \"molybdenum\").\nHas_element(\"coronavirus\", \"iodine\").\nHas_element(\"coronavirus\", \"cobalt\").\nHas_element(\"coronavirus\", \"chromium\").\nHas_element(\"coronavirus\", \"mercury\").\nHas_element(\"coronavirus\", \"tin\").\nHas_element(\"coronavirus\", \"nickel\").\nHas_element(\"coronavirus\", \"vanadium\").\nHas_element(\"coronavirus\", \"tungsten\").\nHas_element(\"coronavirus\", \"lead\").\nHas_element(\"coronavirus\", \"silver\").\nHas_element(\"coronavirus\", \"gold\").\nHas_element(\"coronavirus\", \"aluminum\").\nHas_element(\"coronavirus\", \"silicon\").\nHas_element(\"coronavirus\", \"boron\").\nHas_element(\"coronavirus\", \"titanium\").\nHas_element(\"coronavirus\", \"zirconium\").\nHas_element(\"coronavirus\", \"lithium\").\nHas_element(\"coronavirus\", \"beryllium\").\nHas_element(\"coronavirus\", \"barium\").\nHas_element(\"coronavirus\", \"strontium\").\nHas_element(\"coronavirus\", \"rubidium\").\nHas_element(\"coronavirus\", \"cesium\").\nHas_element(\"coronavirus\", \"thallium\").\nHas_element(\"coronavirus\", \"indium\").\nHas_element(\"coronavirus\", \"antimony\").\nHas_element(\"coronavirus\", \"tellurium\").\nHas_element(\"coronavirus\", \"bismuth\").\nHas_element(\"coronavirus\", \"francium\").\nHas_element(\"coronavirus\", \"radium\").\nHas_element(\"coronavirus\", \"rhenium\").\nHas_element(\"coronavirus\", \"osmium\").\nHas_element(\"coronavirus\", \"iridium\").\nHas_element(\"coronavirus\", \"platinum\").\nHas_element(\"coronavirus\", \"thorium\").\nHas_element(\"coronavirus\", \"uranium\").\nHas_element(\"coronavirus\", \"neptunium\").\nHas_element(\"coronavirus\", \"plutonium\").\nHas_element(\"coronavirus", "completions": [".decl Has_element(Object:symbol, Element:symbol)\nHas_element(\"coronavirus\", \"carbon\").\nHas_element(\"coronavirus\", \"hydrogen\").\nHas_element(\"coronavirus\", \"nitrogen\").\nHas_element(\"coronavirus\", \"oxygen\").\nHas_element(\"coronavirus\", \"phosphorus\").\nHas_element(\"coronavirus\", \"sulfur\").\nHas_element(\"coronavirus\", \"sodium\").\nHas_element(\"coronavirus\", \"potassium\").\nHas_element(\"coronavirus\", \"chlorine\").\nHas_element(\"coronavirus\", \"calcium\").\nHas_element(\"coronavirus\", \"magnesium\").\nHas_element(\"coronavirus\", \"iron\").\nHas_element(\"coronavirus\", \"zinc\").\nHas_element(\"coronavirus\", \"copper\").\nHas_element(\"coronavirus\", \"manganese\").\nHas_element(\"coronavirus\", \"selenium\").\nHas_element(\"coronavirus\", \"molybdenum\").\nHas_element(\"coronavirus\", \"iodine\").\nHas_element(\"coronavirus\", \"cobalt\").\nHas_element(\"coronavirus\", \"chromium\").\nHas_element(\"coronavirus\", \"mercury\").\nHas_element(\"coronavirus\", \"tin\").\nHas_element(\"coronavirus\", \"nickel\").\nHas_element(\"coronavirus\", \"vanadium\").\nHas_element(\"coronavirus\", \"tungsten\").\nHas_element(\"coronavirus\", \"lead\").\nHas_element(\"coronavirus\", \"silver\").\nHas_element(\"coronavirus\", \"gold\").\nHas_element(\"coronavirus\", \"aluminum\").\nHas_element(\"coronavirus\", \"silicon\").\nHas_element(\"coronavirus\", \"boron\").\nHas_element(\"coronavirus\", \"titanium\").\nHas_element(\"coronavirus\", \"zirconium\").\nHas_element(\"coronavirus\", \"lithium\").\nHas_element(\"coronavirus\", \"beryllium\").\nHas_element(\"coronavirus\", \"barium\").\nHas_element(\"coronavirus\", \"strontium\").\nHas_element(\"coronavirus\", \"rubidium\").\nHas_element(\"coronavirus\", \"cesium\").\nHas_element(\"coronavirus\", \"thallium\").\nHas_element(\"coronavirus\", \"indium\").\nHas_element(\"coronavirus\", \"antimony\").\nHas_element(\"coronavirus\", \"tellurium\").\nHas_element(\"coronavirus\", \"bismuth\").\nHas_element(\"coronavirus\", \"francium\").\nHas_element(\"coronavirus\", \"radium\").\nHas_element(\"coronavirus\", \"rhenium\").\nHas_element(\"coronavirus\", \"osmium\").\nHas_element(\"coronavirus\", \"iridium\").\nHas_element(\"coronavirus\", \"platinum\").\nHas_element(\"coronavirus\", \"thorium\").\nHas_element(\"coronavirus\", \"uranium\").\nHas_element(\"coronavirus\", \"neptunium\").\nHas_element(\"coronavirus\", \"plutonium\").\nHas_element(\"coronavirus"]}
{"id": 1347, "answer": false, "completion": ".decl Has_year(Object:symbol, Year:float)\nHas_year(\"smartphone\", 2007).\nHas_year(\"Al Capone\", 1947).\n.decl Answer()\nAnswer() :- Has_year(\"smartphone\", year1), Has_year(\"Al Capone\", year2), year1 < year2.\n.output Answer\n\n", "completions": [".decl Has_year(Object:symbol, Year:float)\nHas_year(\"smartphone\", 2007).\nHas_year(\"Al Capone\", 1947).\n.decl Answer()\nAnswer() :- Has_year(\"smartphone\", year1), Has_year(\"Al Capone\", year2), year1 < year2.\n.output Answer\n\n"]}
{"id": 1348, "answer": true, "completion": ".decl Has_statue(Person:symbol)\nHas_statue(\"Benjamin Franklin\").\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Answer()\nAnswer() :- Has_statue(\"Benjamin Franklin\"), Is_prime(number), number > 0.\n.output Answer\n\n", "completions": [".decl Has_statue(Person:symbol)\nHas_statue(\"Benjamin Franklin\").\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Answer()\nAnswer() :- Has_statue(\"Benjamin Franklin\"), Is_prime(number), number > 0.\n.output Answer\n\n"]}
{"id": 1349, "answer": true, "completion": ".decl Is_martyr(Person:symbol)\nIs_martyr(\"Jason Voorhees\").\n.decl Is_murderer(Person:symbol)\nIs_murderer(\"Jason Voorhees\").\n.decl Answer()\nAnswer() :- Is_martyr(\"Jason Voorhees\"), Is_murderer(\"Jason Voorhees\").\n.output Answer\n\n", "completions": [".decl Is_martyr(Person:symbol)\nIs_martyr(\"Jason Voorhees\").\n.decl Is_murderer(Person:symbol)\nIs_murderer(\"Jason Voorhees\").\n.decl Answer()\nAnswer() :- Is_martyr(\"Jason Voorhees\"), Is_murderer(\"Jason Voorhees\").\n.output Answer\n\n"]}
{"id": 1350, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"teacher\", \"teacher\").\n.decl Answer()\nAnswer() :- Has_job(\"teacher\", \"teacher\").\n.output Answer\n\n", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"teacher\", \"teacher\").\n.decl Answer()\nAnswer() :- Has_job(\"teacher\", \"teacher\").\n.output Answer\n\n"]}
{"id": 1351, "answer": false, "completion": ".decl Has_eyes(Animal:symbol, N_eyes:float)\nHas_eyes(\"fly\", 2).\n.decl Answer()\nAnswer() :- Has_eyes(\"fly\", n_eyes), n_eyes = 0.\n.output Answer\n\n", "completions": [".decl Has_eyes(Animal:symbol, N_eyes:float)\nHas_eyes(\"fly\", 2).\n.decl Answer()\nAnswer() :- Has_eyes(\"fly\", n_eyes), n_eyes = 0.\n.output Answer\n\n"]}
{"id": 1352, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"rainbow\", \"red\").\nHas_color(\"rainbow\", \"orange\").\nHas_color(\"rainbow\", \"yellow\").\nHas_color(\"rainbow\", \"green\").\nHas_color(\"rainbow\", \"blue\").\nHas_color(\"rainbow\", \"indigo\").\nHas_color(\"rainbow\", \"violet\").\nHas_color(\"yin\", \"black\").\nHas_color(\"yin\", \"white\").\nHas_color(\"yang\", \"black\").\nHas_color(\"yang\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"rainbow\", color), Has_color(\"yin\", color), Has_color(\"yang\", color).\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"rainbow\", \"red\").\nHas_color(\"rainbow\", \"orange\").\nHas_color(\"rainbow\", \"yellow\").\nHas_color(\"rainbow\", \"green\").\nHas_color(\"rainbow\", \"blue\").\nHas_color(\"rainbow\", \"indigo\").\nHas_color(\"rainbow\", \"violet\").\nHas_color(\"yin\", \"black\").\nHas_color(\"yin\", \"white\").\nHas_color(\"yang\", \"black\").\nHas_color(\"yang\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"rainbow\", color), Has_color(\"yin\", color), Has_color(\"yang\", color).\n.output Answer\n\n"]}
{"id": 1353, "answer": false, "completion": ".decl Came_from(Animal:symbol, Period:symbol)\nCame_from(\"mongoose\", \"Cenozoic\").\nCame_from(\"rhinos\", \"Mesozoic\").\n.decl Answer()\nAnswer() :- Came_from(\"mongoose\", period1), Came_from(\"rhinos\", period2), period1 > period2.\n.output Answer\n\n", "completions": [".decl Came_from(Animal:symbol, Period:symbol)\nCame_from(\"mongoose\", \"Cenozoic\").\nCame_from(\"rhinos\", \"Mesozoic\").\n.decl Answer()\nAnswer() :- Came_from(\"mongoose\", period1), Came_from(\"rhinos\", period2), period1 > period2.\n.output Answer\n\n"]}
{"id": 1354, "answer": false, "completion": ".decl Participates_in(Person:symbol, War:symbol)\nParticipates_in(\"Archduke Franz Ferdinand of Austria\", \"World War I\").\n.decl Answer()\nAnswer() :- Participates_in(\"Archduke Franz Ferdinand of Austria\", \"Pacific War\").\n.output Answer\n\n", "completions": [".decl Participates_in(Person:symbol, War:symbol)\nParticipates_in(\"Archduke Franz Ferdinand of Austria\", \"World War I\").\n.decl Answer()\nAnswer() :- Participates_in(\"Archduke Franz Ferdinand of Austria\", \"Pacific War\").\n.output Answer\n\n"]}
{"id": 1355, "answer": true, "completion": ".decl Has_wife(Person:symbol, Wife:symbol)\nHas_wife(\"Paulo Coelho\", \"Chris Coelho\").\n.decl Makes_living_through(Person:symbol, Activity:symbol)\nMakes_living_through(\"Chris Coelho\", \"speech\").\n.decl Answer()\nAnswer() :- Has_wife(\"Paulo Coelho\", wife), Makes_living_through(wife, \"speech\").\n.output Answer\n\n", "completions": [".decl Has_wife(Person:symbol, Wife:symbol)\nHas_wife(\"Paulo Coelho\", \"Chris Coelho\").\n.decl Makes_living_through(Person:symbol, Activity:symbol)\nMakes_living_through(\"Chris Coelho\", \"speech\").\n.decl Answer()\nAnswer() :- Has_wife(\"Paulo Coelho\", wife), Makes_living_through(wife, \"speech\").\n.output Answer\n\n"]}
{"id": 1356, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Bill Gates\", 90).\nHas_net_worth(\"Warren Buffett\", 70).\nHas_net_worth(\"Larry Ellison\", 50).\nHas_net_worth(\"Michael Bloomberg\", 40).\nHas_net_worth(\"Mark Zuckerberg\", 35).\n.decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Bill Gates\", \"Baby Boomers\").\nIs_member_of(\"Warren Buffett\", \"Baby Boomers\").\nIs_member_of(\"Larry Ellison\", \"Baby Boomers\").\nIs_member_of(\"Michael Bloomberg\", \"Baby Boomers\").\nIs_member_of(\"Mark Zuckerberg\", \"Baby Boomers\").\n.decl Answer()\nAnswer() :- Has_net_worth(\"Bill Gates\", net_worth1), Is_member_of(\"Bill Gates\", \"Baby Boomers\"), Has_net_worth(person, net_worth2), Is_member_of(person, \"Baby Boomers\"), person != \"Bill Gates\", net_worth1 > net_worth2.\n.output Answer\n\n", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Bill Gates\", 90).\nHas_net_worth(\"Warren Buffett\", 70).\nHas_net_worth(\"Larry Ellison\", 50).\nHas_net_worth(\"Michael Bloomberg\", 40).\nHas_net_worth(\"Mark Zuckerberg\", 35).\n.decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Bill Gates\", \"Baby Boomers\").\nIs_member_of(\"Warren Buffett\", \"Baby Boomers\").\nIs_member_of(\"Larry Ellison\", \"Baby Boomers\").\nIs_member_of(\"Michael Bloomberg\", \"Baby Boomers\").\nIs_member_of(\"Mark Zuckerberg\", \"Baby Boomers\").\n.decl Answer()\nAnswer() :- Has_net_worth(\"Bill Gates\", net_worth1), Is_member_of(\"Bill Gates\", \"Baby Boomers\"), Has_net_worth(person, net_worth2), Is_member_of(person, \"Baby Boomers\"), person != \"Bill Gates\", net_worth1 > net_worth2.\n.output Answer\n\n"]}
{"id": 1357, "answer": true, "completion": ".decl Has_version(OS:symbol, Version:float)\nHas_version(\"Windows\", 10).\nHas_version(\"Android\", 5).\nHas_version(\"Linux\", 4).\n.decl Answer()\nAnswer() :- Has_version(\"Windows\", version1), Has_version(\"Linux\", version2), version1 > version2.\nAnswer() :- Has_version(\"Android\", version1), Has_version(\"Linux\", version2), version1 > version2.\n.output Answer\n\n", "completions": [".decl Has_version(OS:symbol, Version:float)\nHas_version(\"Windows\", 10).\nHas_version(\"Android\", 5).\nHas_version(\"Linux\", 4).\n.decl Answer()\nAnswer() :- Has_version(\"Windows\", version1), Has_version(\"Linux\", version2), version1 > version2.\nAnswer() :- Has_version(\"Android\", version1), Has_version(\"Linux\", version2), version1 > version2.\n.output Answer\n\n"]}
{"id": 1358, "answer": true, "completion": ".decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Bill Nye\", \"Franklin Delano Roosevelt\").\n.decl Answer()\nAnswer() :- Votes_for(\"Bill Nye\", \"Franklin Delano Roosevelt\").\n.output Answer\n\n", "completions": [".decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Bill Nye\", \"Franklin Delano Roosevelt\").\n.decl Answer()\nAnswer() :- Votes_for(\"Bill Nye\", \"Franklin Delano Roosevelt\").\n.output Answer\n\n"]}
{"id": 1359, "answer": true, "completion": ".decl Has_n_descendants(Person:symbol, N_descendants:float)\nHas_n_descendants(\"Genghis Khan\", 16).\nHas_n_descendants(\"Julius Caesar\", 0).\n.decl Answer()\nAnswer() :- Has_n_descendants(\"Genghis Khan\", n_descendants1), Has_n_descendants(\"Julius Caesar\", n_descendants2), n_descendants1 > n_descendants2.\n.output Answer\n\n", "completions": [".decl Has_n_descendants(Person:symbol, N_descendants:float)\nHas_n_descendants(\"Genghis Khan\", 16).\nHas_n_descendants(\"Julius Caesar\", 0).\n.decl Answer()\nAnswer() :- Has_n_descendants(\"Genghis Khan\", n_descendants1), Has_n_descendants(\"Julius Caesar\", n_descendants2), n_descendants1 > n_descendants2.\n.output Answer\n\n"]}
{"id": 1360, "answer": false, "completion": ".decl Invented(Company:symbol, Invention:symbol)\nInvented(\"Casio\", \"calculator\").\n.decl Worn_around(Object:symbol, Body_part:symbol)\nWorn_around(\"calculator\", \"wrist\").\nWorn_around(\"calculator\", \"neck\").\n.decl Answer()\nAnswer() :- Invented(\"Casio\", invention), Worn_around(invention, \"ankle\").\n.output Answer\n\n", "completions": [".decl Invented(Company:symbol, Invention:symbol)\nInvented(\"Casio\", \"calculator\").\n.decl Worn_around(Object:symbol, Body_part:symbol)\nWorn_around(\"calculator\", \"wrist\").\nWorn_around(\"calculator\", \"neck\").\n.decl Answer()\nAnswer() :- Invented(\"Casio\", invention), Worn_around(invention, \"ankle\").\n.output Answer\n\n"]}
{"id": 1361, "answer": false, "completion": ".decl Has_mental_illness(Person:symbol, Mental_illness:symbol)\nHas_mental_illness(\"psychotherapy patients\", \"depression\").\nHas_mental_illness(\"psychotherapy patients\", \"anxiety\").\n.decl Answer()\nAnswer() :- Has_mental_illness(\"psychotherapy patients\", mental_illness), !Has_mental_illness(\"psychotherapy patients\", mental_illness).\n.output Answer\n\n", "completions": [".decl Has_mental_illness(Person:symbol, Mental_illness:symbol)\nHas_mental_illness(\"psychotherapy patients\", \"depression\").\nHas_mental_illness(\"psychotherapy patients\", \"anxiety\").\n.decl Answer()\nAnswer() :- Has_mental_illness(\"psychotherapy patients\", mental_illness), !Has_mental_illness(\"psychotherapy patients\", mental_illness).\n.output Answer\n\n"]}
{"id": 1362, "answer": false, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Boeing 737-800\", 100000000).\nHas_price(\"Da Vinci painting\", 1000000000).\n.decl Has_income(Person:symbol, Income:float)\nHas_income(\"art dealer\", 1000000).\n.decl Answer()\nAnswer() :- Has_price(\"Boeing 737-800\", price1), Has_price(\"Da Vinci painting\", price2), Has_income(\"art dealer\", income), price1 + price2 <= income.\n.output Answer\n\n", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Boeing 737-800\", 100000000).\nHas_price(\"Da Vinci painting\", 1000000000).\n.decl Has_income(Person:symbol, Income:float)\nHas_income(\"art dealer\", 1000000).\n.decl Answer()\nAnswer() :- Has_price(\"Boeing 737-800\", price1), Has_price(\"Da Vinci painting\", price2), Has_income(\"art dealer\", income), price1 + price2 <= income.\n.output Answer\n\n"]}
{"id": 1363, "answer": false, "completion": ".decl Manufactured_in_year(Car:symbol, Year:float)\nManufactured_in_year(\"Mini\", 1959).\nManufactured_in_year(\"Ford Model T\", 1908).\n.decl Answer()\nAnswer() :- Manufactured_in_year(\"Mini\", year1), Manufactured_in_year(\"Ford Model T\", year2), year1 < year2.\n.output Answer\n\n", "completions": [".decl Manufactured_in_year(Car:symbol, Year:float)\nManufactured_in_year(\"Mini\", 1959).\nManufactured_in_year(\"Ford Model T\", 1908).\n.decl Answer()\nAnswer() :- Manufactured_in_year(\"Mini\", year1), Manufactured_in_year(\"Ford Model T\", year2), year1 < year2.\n.output Answer\n\n"]}
{"id": 1364, "answer": true, "completion": ".decl Has_letter(Language:symbol, Letter:symbol)\nHas_letter(\"English\", \"B\").\nHas_letter(\"French\", \"B\").\n.decl Answer()\nAnswer() :- Has_letter(\"English\", \"B\").\nAnswer() :- Has_letter(\"French\", \"B\").\n.output Answer\n\n", "completions": [".decl Has_letter(Language:symbol, Letter:symbol)\nHas_letter(\"English\", \"B\").\nHas_letter(\"French\", \"B\").\n.decl Answer()\nAnswer() :- Has_letter(\"English\", \"B\").\nAnswer() :- Has_letter(\"French\", \"B\").\n.output Answer\n\n"]}
{"id": 1365, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Trek 9000\", 20).\n.decl Requires_anchor(Object:symbol, Weight:float)\nRequires_anchor(\"Trek 9000\", 25).\n.decl Answer()\nAnswer() :- Has_weight(\"Trek 9000\", weight), Requires_anchor(\"Trek 9000\", anchor_weight), weight > anchor_weight.\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Trek 9000\", 20).\n.decl Requires_anchor(Object:symbol, Weight:float)\nRequires_anchor(\"Trek 9000\", 25).\n.decl Answer()\nAnswer() :- Has_weight(\"Trek 9000\", weight), Requires_anchor(\"Trek 9000\", anchor_weight), weight > anchor_weight.\n.output Answer\n\n"]}
{"id": 1366, "answer": false, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Zika virus\", \"Brazil\").\nHappens_in_place(\"Zika virus\", \"Colombia\").\nHappens_in_place(\"Zika virus\", \"El Salvador\").\nHappens_in_place(\"Zika virus\", \"French Guiana\").\nHappens_in_place(\"Zika virus\", \"Guatemala\").\nHappens_in_place(\"Zika virus\", \"Haiti\").\nHappens_in_place(\"Zika virus\", \"Honduras\").\nHappens_in_place(\"Zika virus\", \"Martinique\").\nHappens_in_place(\"Zika virus\", \"Mexico\").\nHappens_in_place(\"Zika virus\", \"Panama\").\nHappens_in_place(\"Zika virus\", \"Paraguay\").\nHappens_in_place(\"Zika virus\", \"Suriname\").\nHappens_in_place(\"Zika virus\", \"Venezuela\").\nHappens_in_place(\"Zika virus\", \"Puerto Rico\").\nHappens_in_place(\"Zika virus\", \"Barbados\").\nHappens_in_place(\"Zika virus\", \"Bolivia\").\nHappens_in_place(\"Zika virus\", \"Ecuador\").\nHappens_in_place(\"Zika virus\", \"Guadeloupe\").\nHappens_in_place(\"Zika virus\", \"Saint Martin\").\nHappens_in_place(\"Zika virus\", \"Guyana\").\nHappens_in_place(\"Zika virus\", \"Cape Verde\").\nHappens_in_place(\"Zika virus\", \"Samoa\").\nHappens_in_place(\"Zika virus\", \"U.S. Virgin Islands\").\nHappens_in_place(\"Zika virus\", \"Dominican Republic\").\nHappens_in_place(\"Zika virus\", \"Guam\").\nHappens_in_place(\"Zika virus\", \"Guinea-Bissau\").\nHappens_in_place(\"Zika virus\", \"Maldives\").\nHappens_in_place(\"Zika virus\", \"Marshall Islands\").\nHappens_in_place(\"Zika virus\", \"Micronesia\").\nHappens_in_place(\"Zika virus\", \"New Caledonia\").\nHappens_in_place(\"Zika virus\", \"Palau\").\nHappens_in_place(\"Zika virus\", \"Puerto Rico\").\nHappens_in_place(\"Zika virus\", \"Singapore\").\nHappens_in_place(\"Zika virus\", \"Solomon Islands\").\nHappens_in_place(\"Zika virus\", \"Tonga\").\nHappens_in_place(\"Zika virus\", \"American Samoa\").\nHappens_in_place(\"Zika virus\", \"Fiji\").\nHappens_in_place(\"Zika virus\", \"Kosrae\").\nHappens_in_place(\"Zika virus\", \"Papua New Guinea\").\nHappens_in_place(\"Zika virus\", \"Yap\").\nHappens_in_place(\"Zika virus\", \"Aruba\").\nHappens_in_place(\"Zika virus\", \"Bonaire\").\nHappens_in_place(\"Zika virus\", \"Curacao\").\nHappens_in_place(\"Zika", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Zika virus\", \"Brazil\").\nHappens_in_place(\"Zika virus\", \"Colombia\").\nHappens_in_place(\"Zika virus\", \"El Salvador\").\nHappens_in_place(\"Zika virus\", \"French Guiana\").\nHappens_in_place(\"Zika virus\", \"Guatemala\").\nHappens_in_place(\"Zika virus\", \"Haiti\").\nHappens_in_place(\"Zika virus\", \"Honduras\").\nHappens_in_place(\"Zika virus\", \"Martinique\").\nHappens_in_place(\"Zika virus\", \"Mexico\").\nHappens_in_place(\"Zika virus\", \"Panama\").\nHappens_in_place(\"Zika virus\", \"Paraguay\").\nHappens_in_place(\"Zika virus\", \"Suriname\").\nHappens_in_place(\"Zika virus\", \"Venezuela\").\nHappens_in_place(\"Zika virus\", \"Puerto Rico\").\nHappens_in_place(\"Zika virus\", \"Barbados\").\nHappens_in_place(\"Zika virus\", \"Bolivia\").\nHappens_in_place(\"Zika virus\", \"Ecuador\").\nHappens_in_place(\"Zika virus\", \"Guadeloupe\").\nHappens_in_place(\"Zika virus\", \"Saint Martin\").\nHappens_in_place(\"Zika virus\", \"Guyana\").\nHappens_in_place(\"Zika virus\", \"Cape Verde\").\nHappens_in_place(\"Zika virus\", \"Samoa\").\nHappens_in_place(\"Zika virus\", \"U.S. Virgin Islands\").\nHappens_in_place(\"Zika virus\", \"Dominican Republic\").\nHappens_in_place(\"Zika virus\", \"Guam\").\nHappens_in_place(\"Zika virus\", \"Guinea-Bissau\").\nHappens_in_place(\"Zika virus\", \"Maldives\").\nHappens_in_place(\"Zika virus\", \"Marshall Islands\").\nHappens_in_place(\"Zika virus\", \"Micronesia\").\nHappens_in_place(\"Zika virus\", \"New Caledonia\").\nHappens_in_place(\"Zika virus\", \"Palau\").\nHappens_in_place(\"Zika virus\", \"Puerto Rico\").\nHappens_in_place(\"Zika virus\", \"Singapore\").\nHappens_in_place(\"Zika virus\", \"Solomon Islands\").\nHappens_in_place(\"Zika virus\", \"Tonga\").\nHappens_in_place(\"Zika virus\", \"American Samoa\").\nHappens_in_place(\"Zika virus\", \"Fiji\").\nHappens_in_place(\"Zika virus\", \"Kosrae\").\nHappens_in_place(\"Zika virus\", \"Papua New Guinea\").\nHappens_in_place(\"Zika virus\", \"Yap\").\nHappens_in_place(\"Zika virus\", \"Aruba\").\nHappens_in_place(\"Zika virus\", \"Bonaire\").\nHappens_in_place(\"Zika virus\", \"Curacao\").\nHappens_in_place(\"Zika"]}
{"id": 1367, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"day\", \"Los Angeles\").\nHappens_in_place(\"dark\", \"Basel\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"day\", place1), Happens_in_place(\"dark\", place2), place1 != place2.\n.output Answer\n\n", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"day\", \"Los Angeles\").\nHappens_in_place(\"dark\", \"Basel\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"day\", place1), Happens_in_place(\"dark\", place2), place1 != place2.\n.output Answer\n\n"]}
{"id": 1368, "answer": true, "completion": ".decl Causes(Activity:symbol, Disease:symbol)\nCauses(\"breakdancing\", \"tendonitis\").\n.decl Answer()\nAnswer() :- Causes(\"breakdancing\", \"tendonitis\").\n.output Answer\n\n", "completions": [".decl Causes(Activity:symbol, Disease:symbol)\nCauses(\"breakdancing\", \"tendonitis\").\n.decl Answer()\nAnswer() :- Causes(\"breakdancing\", \"tendonitis\").\n.output Answer\n\n"]}
{"id": 1369, "answer": true, "completion": ".decl Travels_with(Person_A:symbol, Person_B:symbol)\nTravels_with(\"Marco Polo\", \"Christopher Columbus\").\n.decl Answer()\nAnswer() :- Travels_with(\"Marco Polo\", \"Christopher Columbus\").\n.output Answer\n\n", "completions": [".decl Travels_with(Person_A:symbol, Person_B:symbol)\nTravels_with(\"Marco Polo\", \"Christopher Columbus\").\n.decl Answer()\nAnswer() :- Travels_with(\"Marco Polo\", \"Christopher Columbus\").\n.output Answer\n\n"]}
{"id": 1370, "answer": true, "completion": ".decl Has_language(Country:symbol, Language:symbol)\nHas_language(\"Saint Vincent and the Grenadines\", \"English\").\n.decl Has_language_as_root(Language:symbol, Root_language:symbol)\nHas_language_as_root(\"English\", \"English\").\n.decl Answer()\nAnswer() :- Has_language(\"Saint Vincent and the Grenadines\", language), Has_language_as_root(language, \"English\").\n.output Answer\n\n", "completions": [".decl Has_language(Country:symbol, Language:symbol)\nHas_language(\"Saint Vincent and the Grenadines\", \"English\").\n.decl Has_language_as_root(Language:symbol, Root_language:symbol)\nHas_language_as_root(\"English\", \"English\").\n.decl Answer()\nAnswer() :- Has_language(\"Saint Vincent and the Grenadines\", language), Has_language_as_root(language, \"English\").\n.output Answer\n\n"]}
{"id": 1371, "answer": true, "completion": ".decl Has_dinner_with(Person_A:symbol, Person_B:symbol)\nHas_dinner_with(\"Lionel Richie\", \"Abraham Lincoln\").\n.decl Answer()\nAnswer() :- Has_dinner_with(\"Lionel Richie\", \"Abraham Lincoln\").\n.output Answer\n\n", "completions": [".decl Has_dinner_with(Person_A:symbol, Person_B:symbol)\nHas_dinner_with(\"Lionel Richie\", \"Abraham Lincoln\").\n.decl Answer()\nAnswer() :- Has_dinner_with(\"Lionel Richie\", \"Abraham Lincoln\").\n.output Answer\n\n"]}
{"id": 1372, "answer": true, "completion": ".decl Causes(Event:symbol, Result:symbol)\nCauses(\"traffic collision\", \"millionaire\").\n.decl Answer()\nAnswer() :- Causes(\"traffic collision\", \"millionaire\").\n.output Answer\n\n", "completions": [".decl Causes(Event:symbol, Result:symbol)\nCauses(\"traffic collision\", \"millionaire\").\n.decl Answer()\nAnswer() :- Causes(\"traffic collision\", \"millionaire\").\n.output Answer\n\n"]}
{"id": 1373, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"parsley\", 0.9).\nHas_density(\"milk\", 1.03).\n.decl Answer()\nAnswer() :- Has_density(\"parsley\", density1), Has_density(\"milk\", density2), density1 > density2.\n.output Answer\n\n", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"parsley\", 0.9).\nHas_density(\"milk\", 1.03).\n.decl Answer()\nAnswer() :- Has_density(\"parsley\", density1), Has_density(\"milk\", density2), density1 > density2.\n.output Answer\n\n"]}
{"id": 1374, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Adam Sandler\", \"Torah\").\n.decl Is_CEO_of(Person:symbol, Company:symbol)\nIs_CEO_of(\"Adam Sandler\", \"Happy Gilmore Productions\").\n.decl Answer()\nAnswer() :- Owns(person, \"Torah\"), Is_CEO_of(person, \"Happy Gilmore Productions\").\n.output Answer\n\n", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Adam Sandler\", \"Torah\").\n.decl Is_CEO_of(Person:symbol, Company:symbol)\nIs_CEO_of(\"Adam Sandler\", \"Happy Gilmore Productions\").\n.decl Answer()\nAnswer() :- Owns(person, \"Torah\"), Is_CEO_of(person, \"Happy Gilmore Productions\").\n.output Answer\n\n"]}
{"id": 1375, "answer": true, "completion": ".decl Is_opposed_to(Person:symbol, Activity:symbol)\nIs_opposed_to(\"pacifist\", \"war\").\nIs_opposed_to(\"pacifist\", \"hunting\").\n.decl Answer()\nAnswer() :- Is_opposed_to(\"pacifist\", \"hunting\").\n.output Answer\n\n", "completions": [".decl Is_opposed_to(Person:symbol, Activity:symbol)\nIs_opposed_to(\"pacifist\", \"war\").\nIs_opposed_to(\"pacifist\", \"hunting\").\n.decl Answer()\nAnswer() :- Is_opposed_to(\"pacifist\", \"hunting\").\n.output Answer\n\n"]}
{"id": 1376, "answer": false, "completion": ".decl Causes_deaths(Event:symbol, N_deaths:float)\nCauses_deaths(\"plague\", 200000000).\nCauses_deaths(\"selfies\", 259).\n.decl Answer()\nAnswer() :- Causes_deaths(\"selfies\", n_deaths1), Causes_deaths(\"plague\", n_deaths2), n_deaths1 > n_deaths2.\n.output Answer\n\n\n", "completions": [".decl Causes_deaths(Event:symbol, N_deaths:float)\nCauses_deaths(\"plague\", 200000000).\nCauses_deaths(\"selfies\", 259).\n.decl Answer()\nAnswer() :- Causes_deaths(\"selfies\", n_deaths1), Causes_deaths(\"plague\", n_deaths2), n_deaths1 > n_deaths2.\n.output Answer\n\n\n"]}
{"id": 1377, "answer": false, "completion": ".decl Has_channel(Show:symbol, Channel:symbol)\nHas_channel(\"Naruto\", \"Cartoon Network\").\nHas_channel(\"Puzzle Place\", \"PBS\").\n.decl Answer()\nAnswer() :- Has_channel(\"Naruto\", channel), Has_channel(\"Puzzle Place\", channel).\n.output Answer\n\n", "completions": [".decl Has_channel(Show:symbol, Channel:symbol)\nHas_channel(\"Naruto\", \"Cartoon Network\").\nHas_channel(\"Puzzle Place\", \"PBS\").\n.decl Answer()\nAnswer() :- Has_channel(\"Naruto\", channel), Has_channel(\"Puzzle Place\", channel).\n.output Answer\n\n"]}
{"id": 1378, "answer": false, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Johnny Carson\", 3).\n.decl Has_n_players(Sport:symbol, N_players:float)\nHas_n_players(\"water polo\", 7).\n.decl Answer()\nAnswer() :- Has_n_children(\"Johnny Carson\", n_children), Has_n_players(\"water polo\", n_players), n_children >= n_players.\n.output Answer\n\n\n", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Johnny Carson\", 3).\n.decl Has_n_players(Sport:symbol, N_players:float)\nHas_n_players(\"water polo\", 7).\n.decl Answer()\nAnswer() :- Has_n_children(\"Johnny Carson\", n_children), Has_n_players(\"water polo\", n_players), n_children >= n_players.\n.output Answer\n\n\n"]}
{"id": 1379, "answer": true, "completion": ".decl Has_people(Nation:symbol, People:symbol)\nHas_people(\"Cherokee Nation\", \"Cherokee people\").\n.decl Has_delegation(Nation:symbol, Delegation:symbol)\nHas_delegation(\"Cherokee Nation\", \"Cherokee delegation\").\n.decl Opposes(Delegation:symbol, Policy:symbol)\nOpposes(\"Cherokee delegation\", \"allotment\").\n.decl Answer()\nAnswer() :- Has_people(nation, \"Cherokee people\"), Has_delegation(nation, delegation), Opposes(delegation, \"allotment\").\n.output Answer\n\n", "completions": [".decl Has_people(Nation:symbol, People:symbol)\nHas_people(\"Cherokee Nation\", \"Cherokee people\").\n.decl Has_delegation(Nation:symbol, Delegation:symbol)\nHas_delegation(\"Cherokee Nation\", \"Cherokee delegation\").\n.decl Opposes(Delegation:symbol, Policy:symbol)\nOpposes(\"Cherokee delegation\", \"allotment\").\n.decl Answer()\nAnswer() :- Has_people(nation, \"Cherokee people\"), Has_delegation(nation, delegation), Opposes(delegation, \"allotment\").\n.output Answer\n\n"]}
{"id": 1380, "answer": true, "completion": ".decl Performs(Doctor:symbol, Procedure:symbol)\nPerforms(\"pediatrician\", \"vaccination\").\nPerforms(\"pediatrician\", \"checkup\").\nPerforms(\"pediatrician\", \"surgery\").\nPerforms(\"pediatrician\", \"abortion\").\n.decl Answer()\nAnswer() :- Performs(\"pediatrician\", \"abortion\").\n.output Answer\n\n", "completions": [".decl Performs(Doctor:symbol, Procedure:symbol)\nPerforms(\"pediatrician\", \"vaccination\").\nPerforms(\"pediatrician\", \"checkup\").\nPerforms(\"pediatrician\", \"surgery\").\nPerforms(\"pediatrician\", \"abortion\").\n.decl Answer()\nAnswer() :- Performs(\"pediatrician\", \"abortion\").\n.output Answer\n\n"]}
{"id": 1381, "answer": true, "completion": ".decl Features(Film:symbol, People:symbol)\nFeatures(\"Brave\", \"Scottish people\").\n.decl Answer()\nAnswer() :- Features(\"Brave\", \"Scottish people\").\n.output Answer\n\n", "completions": [".decl Features(Film:symbol, People:symbol)\nFeatures(\"Brave\", \"Scottish people\").\n.decl Answer()\nAnswer() :- Features(\"Brave\", \"Scottish people\").\n.output Answer\n\n"]}
{"id": 1382, "answer": true, "completion": ".decl Is_south_of(Place_A:symbol, Place_B:symbol)\nIs_south_of(\"Cape Town\", \"Equator\").\n.decl Answer()\nAnswer() :- Is_south_of(\"Cape Town\", \"Equator\").\n.output Answer\n\n", "completions": [".decl Is_south_of(Place_A:symbol, Place_B:symbol)\nIs_south_of(\"Cape Town\", \"Equator\").\n.decl Answer()\nAnswer() :- Is_south_of(\"Cape Town\", \"Equator\").\n.output Answer\n\n"]}
{"id": 1383, "answer": true, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"Metallica\", \"protective\").\n.decl Answer()\nAnswer() :- Has_property(\"Metallica\", \"protective\").\n.output Answer\n\n", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"Metallica\", \"protective\").\n.decl Answer()\nAnswer() :- Has_property(\"Metallica\", \"protective\").\n.output Answer\n\n"]}
{"id": 1384, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"applicant\", \"multiple sclerosis\").\n.decl Rejects(Institution:symbol, Person:symbol)\nRejects(\"United States Military Academy\", \"applicant\").\n.decl Answer()\nAnswer() :- Has_disease(\"applicant\", \"multiple sclerosis\"), Rejects(\"United States Military Academy\", \"applicant\").\n.output Answer\n\n", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"applicant\", \"multiple sclerosis\").\n.decl Rejects(Institution:symbol, Person:symbol)\nRejects(\"United States Military Academy\", \"applicant\").\n.decl Answer()\nAnswer() :- Has_disease(\"applicant\", \"multiple sclerosis\"), Rejects(\"United States Military Academy\", \"applicant\").\n.output Answer\n\n"]}
{"id": 1385, "answer": true, "completion": ".decl Has_n_ways(Country:symbol, N_ways:float)\nHas_n_ways(\"USA\", 2).\n.decl Fails_in_n_ways(Country:symbol, N_ways:float)\nFails_in_n_ways(\"USA\", 1).\n.decl Answer()\nAnswer() :- Has_n_ways(\"USA\", n_ways1), Fails_in_n_ways(\"USA\", n_ways2), n_ways1 > n_ways2.\n.output Answer\n\n", "completions": [".decl Has_n_ways(Country:symbol, N_ways:float)\nHas_n_ways(\"USA\", 2).\n.decl Fails_in_n_ways(Country:symbol, N_ways:float)\nFails_in_n_ways(\"USA\", 1).\n.decl Answer()\nAnswer() :- Has_n_ways(\"USA\", n_ways1), Fails_in_n_ways(\"USA\", n_ways2), n_ways1 > n_ways2.\n.output Answer\n\n"]}
{"id": 1386, "answer": true, "completion": ".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Jesse W. Moore\", \"NASA Distinguished Service Medal\").\n.decl Has_theme(Award:symbol, Theme:symbol)\nHas_theme(\"NASA Distinguished Service Medal\", \"Snoopy\").\n.decl Answer()\nAnswer() :- Has_award(\"Jesse W. Moore\", award), Has_theme(award, \"Snoopy\").\n.output Answer\n\n", "completions": [".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Jesse W. Moore\", \"NASA Distinguished Service Medal\").\n.decl Has_theme(Award:symbol, Theme:symbol)\nHas_theme(\"NASA Distinguished Service Medal\", \"Snoopy\").\n.decl Answer()\nAnswer() :- Has_award(\"Jesse W. Moore\", award), Has_theme(award, \"Snoopy\").\n.output Answer\n\n"]}
{"id": 1387, "answer": true, "completion": ".decl Has_headquarters_city(Organization:symbol, City:symbol)\nHas_headquarters_city(\"YMCA\", \"New York City\").\n.decl Has_restaurant(City:symbol, Restaurant:symbol)\nHas_restaurant(\"New York City\", \"Raclette\").\n.decl Answer()\nAnswer() :- Has_headquarters_city(\"YMCA\", city), Has_restaurant(city, \"Raclette\").\n.output Answer\n\n", "completions": [".decl Has_headquarters_city(Organization:symbol, City:symbol)\nHas_headquarters_city(\"YMCA\", \"New York City\").\n.decl Has_restaurant(City:symbol, Restaurant:symbol)\nHas_restaurant(\"New York City\", \"Raclette\").\n.decl Answer()\nAnswer() :- Has_headquarters_city(\"YMCA\", city), Has_restaurant(city, \"Raclette\").\n.output Answer\n\n"]}
{"id": 1388, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"ABBA\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"ABBA\", n_members), n_members >= 4.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"ABBA\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"ABBA\", n_members), n_members >= 4.\n.output Answer\n\n"]}
{"id": 1389, "answer": true, "completion": ".decl Wrestled_in_year(Wrestler:symbol, Year:float)\nWrestled_in_year(\"Stone Cold Steve Austin\", 1989).\nWrestled_in_year(\"Stone Cold Steve Austin\", 2000).\nWrestled_in_year(\"Stone Cold Steve Austin\", 2003).\n.decl Answer()\nAnswer() :- Wrestled_in_year(\"Stone Cold Steve Austin\", year1), Wrestled_in_year(\"Stone Cold Steve Austin\", year2), Wrestled_in_year(\"Stone Cold Steve Austin\", year3), year1 < year2, year2 < year3.\n.output Answer\n\n", "completions": [".decl Wrestled_in_year(Wrestler:symbol, Year:float)\nWrestled_in_year(\"Stone Cold Steve Austin\", 1989).\nWrestled_in_year(\"Stone Cold Steve Austin\", 2000).\nWrestled_in_year(\"Stone Cold Steve Austin\", 2003).\n.decl Answer()\nAnswer() :- Wrestled_in_year(\"Stone Cold Steve Austin\", year1), Wrestled_in_year(\"Stone Cold Steve Austin\", year2), Wrestled_in_year(\"Stone Cold Steve Austin\", year3), year1 < year2, year2 < year3.\n.output Answer\n\n"]}
{"id": 1390, "answer": true, "completion": ".decl Has_viscosity(Object:symbol, Viscosity:float)\nHas_viscosity(\"water\", 0.001).\n.decl Answer()\nAnswer() :- Has_viscosity(\"water\", _).\n.output Answer\n\n", "completions": [".decl Has_viscosity(Object:symbol, Viscosity:float)\nHas_viscosity(\"water\", 0.001).\n.decl Answer()\nAnswer() :- Has_viscosity(\"water\", _).\n.output Answer\n\n"]}
{"id": 1391, "answer": false, "completion": ".decl Useful_for(Object:symbol, Person:symbol)\nUseful_for(\"loudspeaker\", \"deaf person\").\n.decl Answer()\nAnswer() :- Useful_for(\"loudspeaker\", \"Gallaudet student\").\n.output Answer\n\n", "completions": [".decl Useful_for(Object:symbol, Person:symbol)\nUseful_for(\"loudspeaker\", \"deaf person\").\n.decl Answer()\nAnswer() :- Useful_for(\"loudspeaker\", \"Gallaudet student\").\n.output Answer\n\n"]}
{"id": 1392, "answer": true, "completion": ".decl Is_ingredient_of(Ingredient:symbol, Food:symbol)\nIs_ingredient_of(\"sesame seeds\", \"hamburger buns\").\n.decl Answer()\nAnswer() :- Is_ingredient_of(\"sesame seeds\", \"hamburger buns\").\n.output Answer\n\n", "completions": [".decl Is_ingredient_of(Ingredient:symbol, Food:symbol)\nIs_ingredient_of(\"sesame seeds\", \"hamburger buns\").\n.decl Answer()\nAnswer() :- Is_ingredient_of(\"sesame seeds\", \"hamburger buns\").\n.output Answer\n\n"]}
{"id": 1393, "answer": true, "completion": ".decl Is_legal(Action:symbol, Country:symbol)\nIs_legal(\"boxing\", \"United States\").\nIs_legal(\"stealing\", \"Iran\").\n.decl Answer()\nAnswer() :- Is_legal(\"boxing\", country1), Is_legal(\"stealing\", country2), country1 != country2.\n.output Answer\n\n", "completions": [".decl Is_legal(Action:symbol, Country:symbol)\nIs_legal(\"boxing\", \"United States\").\nIs_legal(\"stealing\", \"Iran\").\n.decl Answer()\nAnswer() :- Is_legal(\"boxing\", country1), Is_legal(\"stealing\", country2), country1 != country2.\n.output Answer\n\n"]}
{"id": 1394, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Ahura Mazda\", 1.8).\nHas_height(\"Abaddon\", 1.7).\n.decl Answer()\nAnswer() :- Has_height(\"Ahura Mazda\", height1), Has_height(\"Abaddon\", height2), height1 > height2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Ahura Mazda\", 1.8).\nHas_height(\"Abaddon\", 1.7).\n.decl Answer()\nAnswer() :- Has_height(\"Ahura Mazda\", height1), Has_height(\"Abaddon\", height2), height1 > height2.\n.output Answer\n\n"]}
{"id": 1395, "answer": false, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"tortoise\", 0.03).\nHas_speed(\"Chicago L\", 0.5).\n.decl Answer()\nAnswer() :- Has_speed(\"tortoise\", speed1), Has_speed(\"Chicago L\", speed2), speed1 > speed2.\n.output Answer\n\n\n", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"tortoise\", 0.03).\nHas_speed(\"Chicago L\", 0.5).\n.decl Answer()\nAnswer() :- Has_speed(\"tortoise\", speed1), Has_speed(\"Chicago L\", speed2), speed1 > speed2.\n.output Answer\n\n\n"]}
{"id": 1396, "answer": true, "completion": ".decl Celebrates(Person:symbol, Event:symbol)\nCelebrates(\"people\", \"Earth Day\").\n.decl Has_ceremonial_fire(Event:symbol, Fire:symbol)\nHas_ceremonial_fire(\"Earth Day\", \"ceremonial tire fire\").\n.decl Answer()\nAnswer() :- Celebrates(\"people\", event), Has_ceremonial_fire(event, \"ceremonial tire fire\").\n.output Answer\n\n", "completions": [".decl Celebrates(Person:symbol, Event:symbol)\nCelebrates(\"people\", \"Earth Day\").\n.decl Has_ceremonial_fire(Event:symbol, Fire:symbol)\nHas_ceremonial_fire(\"Earth Day\", \"ceremonial tire fire\").\n.decl Answer()\nAnswer() :- Celebrates(\"people\", event), Has_ceremonial_fire(event, \"ceremonial tire fire\").\n.output Answer\n\n"]}
{"id": 1397, "answer": true, "completion": ".decl Built_in(Ship:symbol, Country:symbol)\nBuilt_in(\"HMS Dreadnought\", \"Britain\").\nBuilt_in(\"HMS Dreadnought\", \"Brazil\").\n.decl Is_ship_of(Ship:symbol, Navy:symbol)\nIs_ship_of(\"HMS Dreadnought\", \"Brazilian Navy\").\n.decl Answer()\nAnswer() :- Built_in(ship, \"Britain\"), Is_ship_of(ship, \"Brazilian Navy\").\n.output Answer\n\n", "completions": [".decl Built_in(Ship:symbol, Country:symbol)\nBuilt_in(\"HMS Dreadnought\", \"Britain\").\nBuilt_in(\"HMS Dreadnought\", \"Brazil\").\n.decl Is_ship_of(Ship:symbol, Navy:symbol)\nIs_ship_of(\"HMS Dreadnought\", \"Brazilian Navy\").\n.decl Answer()\nAnswer() :- Built_in(ship, \"Britain\"), Is_ship_of(ship, \"Brazilian Navy\").\n.output Answer\n\n"]}
{"id": 1398, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Harry Potter\", \"Harry\").\nHas_name(\"Harry Potter\", \"Potter\").\nHas_name(\"Harry Potter\", \"Florence\").\n.decl Answer()\nAnswer() :- Has_name(\"Harry Potter\", \"Florence\").\n.output Answer\n\n", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Harry Potter\", \"Harry\").\nHas_name(\"Harry Potter\", \"Potter\").\nHas_name(\"Harry Potter\", \"Florence\").\n.decl Answer()\nAnswer() :- Has_name(\"Harry Potter\", \"Florence\").\n.output Answer\n\n"]}
{"id": 1399, "answer": false, "completion": ".decl Has_n_seats(Vehicle:symbol, N_seats:float)\nHas_n_seats(\"Chevrolet Corvette ZR1\", 2).\n.decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Lil Wayne\", 4).\n.decl Answer()\nAnswer() :- Has_n_seats(\"Chevrolet Corvette ZR1\", n_seats), Has_n_children(\"Lil Wayne\", n_children), n_seats >= n_children.\n.output Answer\n\n", "completions": [".decl Has_n_seats(Vehicle:symbol, N_seats:float)\nHas_n_seats(\"Chevrolet Corvette ZR1\", 2).\n.decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Lil Wayne\", 4).\n.decl Answer()\nAnswer() :- Has_n_seats(\"Chevrolet Corvette ZR1\", n_seats), Has_n_children(\"Lil Wayne\", n_children), n_seats >= n_children.\n.output Answer\n\n"]}
{"id": 1400, "answer": false, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Iceland\", 0.3).\nHas_population(\"Amazon\", 0.2).\n.decl Answer()\nAnswer() :- Has_population(\"Iceland\", population1), Has_population(\"Amazon\", population2), population1 < population2.\n.output Answer\n\n", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Iceland\", 0.3).\nHas_population(\"Amazon\", 0.2).\n.decl Answer()\nAnswer() :- Has_population(\"Iceland\", population1), Has_population(\"Amazon\", population2), population1 < population2.\n.output Answer\n\n"]}
{"id": 1401, "answer": true, "completion": ".decl Has_star_rating(Object:symbol, Star_rating:float)\nHas_star_rating(\"The Godfather\", 5).\n.decl Answer()\nAnswer() :- Has_star_rating(object, 5).\n.output Answer\n\n", "completions": [".decl Has_star_rating(Object:symbol, Star_rating:float)\nHas_star_rating(\"The Godfather\", 5).\n.decl Answer()\nAnswer() :- Has_star_rating(object, 5).\n.output Answer\n\n"]}
{"id": 1402, "answer": false, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"hippie culture\", \"United States\").\nHappens_in_place(\"hippie culture\", \"United Kingdom\").\nHappens_in_place(\"hippie culture\", \"Canada\").\nHappens_in_place(\"hippie culture\", \"Australia\").\nHappens_in_place(\"hippie culture\", \"New Zealand\").\nHappens_in_place(\"hippie culture\", \"France\").\nHappens_in_place(\"hippie culture\", \"Germany\").\nHappens_in_place(\"hippie culture\", \"Italy\").\nHappens_in_place(\"hippie culture\", \"Spain\").\nHappens_in_place(\"hippie culture\", \"Portugal\").\nHappens_in_place(\"hippie culture\", \"Netherlands\").\nHappens_in_place(\"hippie culture\", \"Belgium\").\nHappens_in_place(\"hippie culture\", \"Switzerland\").\nHappens_in_place(\"hippie culture\", \"Austria\").\nHappens_in_place(\"hippie culture\", \"Denmark\").\nHappens_in_place(\"hippie culture\", \"Sweden\").\nHappens_in_place(\"hippie culture\", \"Norway\").\nHappens_in_place(\"hippie culture\", \"Finland\").\nHappens_in_place(\"hippie culture\", \"Iceland\").\nHappens_in_place(\"hippie culture\", \"Ireland\").\nHappens_in_place(\"hippie culture\", \"Poland\").\nHappens_in_place(\"hippie culture\", \"Czech Republic\").\nHappens_in_place(\"hippie culture\", \"Slovakia\").\nHappens_in_place(\"hippie culture\", \"Hungary\").\nHappens_in_place(\"hippie culture\", \"Romania\").\nHappens_in_place(\"hippie culture\", \"Bulgaria\").\nHappens_in_place(\"hippie culture\", \"Greece\").\nHappens_in_place(\"hippie culture\", \"Turkey\").\nHappens_in_place(\"hippie culture\", \"Israel\").\nHappens_in_place(\"hippie culture\", \"Lebanon\").\nHappens_in_place(\"hippie culture\", \"Syria\").\nHappens_in_place(\"hippie culture\", \"Jordan\").\nHappens_in_place(\"hippie culture\", \"Iraq\").\nHappens_in_place(\"hippie culture\", \"Iran\").\nHappens_in_place(\"hippie culture\", \"Afghanistan\").\nHappens_in_place(\"hippie culture\", \"Pakistan\").\nHappens_in_place(\"hippie culture\", \"India\").\nHappens_in_place(\"hippie culture\", \"Nepal\").\nHappens_in_place(\"hippie culture\", \"Bhutan\").\nHappens_in_place(\"hippie culture\", \"Bangladesh\").\nHappens_in_place(\"hippie culture\", \"Myanmar\").\nHappens_in_place(\"hippie culture\", \"Thailand\").\nHappens_in_place(\"hippie culture\", \"Laos\").\nHappens_in_place(\"h", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"hippie culture\", \"United States\").\nHappens_in_place(\"hippie culture\", \"United Kingdom\").\nHappens_in_place(\"hippie culture\", \"Canada\").\nHappens_in_place(\"hippie culture\", \"Australia\").\nHappens_in_place(\"hippie culture\", \"New Zealand\").\nHappens_in_place(\"hippie culture\", \"France\").\nHappens_in_place(\"hippie culture\", \"Germany\").\nHappens_in_place(\"hippie culture\", \"Italy\").\nHappens_in_place(\"hippie culture\", \"Spain\").\nHappens_in_place(\"hippie culture\", \"Portugal\").\nHappens_in_place(\"hippie culture\", \"Netherlands\").\nHappens_in_place(\"hippie culture\", \"Belgium\").\nHappens_in_place(\"hippie culture\", \"Switzerland\").\nHappens_in_place(\"hippie culture\", \"Austria\").\nHappens_in_place(\"hippie culture\", \"Denmark\").\nHappens_in_place(\"hippie culture\", \"Sweden\").\nHappens_in_place(\"hippie culture\", \"Norway\").\nHappens_in_place(\"hippie culture\", \"Finland\").\nHappens_in_place(\"hippie culture\", \"Iceland\").\nHappens_in_place(\"hippie culture\", \"Ireland\").\nHappens_in_place(\"hippie culture\", \"Poland\").\nHappens_in_place(\"hippie culture\", \"Czech Republic\").\nHappens_in_place(\"hippie culture\", \"Slovakia\").\nHappens_in_place(\"hippie culture\", \"Hungary\").\nHappens_in_place(\"hippie culture\", \"Romania\").\nHappens_in_place(\"hippie culture\", \"Bulgaria\").\nHappens_in_place(\"hippie culture\", \"Greece\").\nHappens_in_place(\"hippie culture\", \"Turkey\").\nHappens_in_place(\"hippie culture\", \"Israel\").\nHappens_in_place(\"hippie culture\", \"Lebanon\").\nHappens_in_place(\"hippie culture\", \"Syria\").\nHappens_in_place(\"hippie culture\", \"Jordan\").\nHappens_in_place(\"hippie culture\", \"Iraq\").\nHappens_in_place(\"hippie culture\", \"Iran\").\nHappens_in_place(\"hippie culture\", \"Afghanistan\").\nHappens_in_place(\"hippie culture\", \"Pakistan\").\nHappens_in_place(\"hippie culture\", \"India\").\nHappens_in_place(\"hippie culture\", \"Nepal\").\nHappens_in_place(\"hippie culture\", \"Bhutan\").\nHappens_in_place(\"hippie culture\", \"Bangladesh\").\nHappens_in_place(\"hippie culture\", \"Myanmar\").\nHappens_in_place(\"hippie culture\", \"Thailand\").\nHappens_in_place(\"hippie culture\", \"Laos\").\nHappens_in_place(\"h"]}
{"id": 1403, "answer": true, "completion": ".decl Used_in(Weapon:symbol, War:symbol)\nUsed_in(\"AK-47\", \"Vietnam War\").\nUsed_in(\"AK-47\", \"Korean War\").\nUsed_in(\"AK-47\", \"Cold War\").\nUsed_in(\"AK-47\", \"World War II\").\nUsed_in(\"AK-47\", \"World War I\").\nUsed_in(\"AK-47\", \"Spanish-American War\").\nUsed_in(\"AK-47\", \"American Civil War\").\nUsed_in(\"AK-47\", \"Mexican-American War\").\nUsed_in(\"AK-47\", \"War of 1812\").\nUsed_in(\"AK-47\", \"American Revolutionary War\").\nUsed_in(\"AK-47\", \"Seven Years' War\").\n.decl Answer()\nAnswer() :- Used_in(\"AK-47\", \"Seven Years' War\").\n.output Answer\n\n", "completions": [".decl Used_in(Weapon:symbol, War:symbol)\nUsed_in(\"AK-47\", \"Vietnam War\").\nUsed_in(\"AK-47\", \"Korean War\").\nUsed_in(\"AK-47\", \"Cold War\").\nUsed_in(\"AK-47\", \"World War II\").\nUsed_in(\"AK-47\", \"World War I\").\nUsed_in(\"AK-47\", \"Spanish-American War\").\nUsed_in(\"AK-47\", \"American Civil War\").\nUsed_in(\"AK-47\", \"Mexican-American War\").\nUsed_in(\"AK-47\", \"War of 1812\").\nUsed_in(\"AK-47\", \"American Revolutionary War\").\nUsed_in(\"AK-47\", \"Seven Years' War\").\n.decl Answer()\nAnswer() :- Used_in(\"AK-47\", \"Seven Years' War\").\n.output Answer\n\n"]}
{"id": 1404, "answer": true, "completion": ".decl Is_in(Object:symbol, Place:symbol)\nIs_in(\"crucifix\", \"church\").\nIs_in(\"church\", \"Karachi\").\n.decl Answer()\nAnswer() :- Is_in(\"crucifix\", \"Karachi\").\nAnswer() :- Is_in(\"crucifix\", place1), Is_in(place1, \"Karachi\").\n.output Answer\n\n", "completions": [".decl Is_in(Object:symbol, Place:symbol)\nIs_in(\"crucifix\", \"church\").\nIs_in(\"church\", \"Karachi\").\n.decl Answer()\nAnswer() :- Is_in(\"crucifix\", \"Karachi\").\nAnswer() :- Is_in(\"crucifix\", place1), Is_in(place1, \"Karachi\").\n.output Answer\n\n"]}
{"id": 1405, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Alan Greenspan\", 87).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"president\", 4).\n.decl Answer()\nAnswer() :- Has_age(\"Alan Greenspan\", age), Last_n_years(\"president\", n_years), age >= n_years * 13.\n.output Answer\n\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Alan Greenspan\", 87).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"president\", 4).\n.decl Answer()\nAnswer() :- Has_age(\"Alan Greenspan\", age), Last_n_years(\"president\", n_years), age >= n_years * 13.\n.output Answer\n\n\n"]}
{"id": 1406, "answer": true, "completion": ".decl Receives(Person:symbol, Newspaper:symbol)\nReceives(\"someone in Boston\", \"Boston Globe\").\nReceives(\"someone in Boston\", \"New York Times\").\nReceives(\"someone in Boston\", \"Toronto Star\").\n.decl Answer()\nAnswer() :- Receives(\"someone in Boston\", \"Toronto Star\").\n.output Answer\n\n", "completions": [".decl Receives(Person:symbol, Newspaper:symbol)\nReceives(\"someone in Boston\", \"Boston Globe\").\nReceives(\"someone in Boston\", \"New York Times\").\nReceives(\"someone in Boston\", \"Toronto Star\").\n.decl Answer()\nAnswer() :- Receives(\"someone in Boston\", \"Toronto Star\").\n.output Answer\n\n"]}
{"id": 1407, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"50 Cent\", \"Curtis Jackson\").\nHas_name(\"Jeffrey Atkins\", \"Ja Rule\").\n.decl Answer()\nAnswer() :- Has_name(\"50 Cent\", name1), Has_name(\"Jeffrey Atkins\", name2), name1 != name2.\n.output Answer\n\n", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"50 Cent\", \"Curtis Jackson\").\nHas_name(\"Jeffrey Atkins\", \"Ja Rule\").\n.decl Answer()\nAnswer() :- Has_name(\"50 Cent\", name1), Has_name(\"Jeffrey Atkins\", name2), name1 != name2.\n.output Answer\n\n"]}
{"id": 1408, "answer": true, "completion": ".decl Has_DID(Person:symbol)\nHas_DID(\"John Nash\").\n.decl Has_good_memory(Person:symbol)\nHas_good_memory(\"John Nash\").\n.decl Answer()\nAnswer() :- Has_DID(person), Has_good_memory(person).\n.output Answer\n\n", "completions": [".decl Has_DID(Person:symbol)\nHas_DID(\"John Nash\").\n.decl Has_good_memory(Person:symbol)\nHas_good_memory(\"John Nash\").\n.decl Answer()\nAnswer() :- Has_DID(person), Has_good_memory(person).\n.output Answer\n\n"]}
{"id": 1409, "answer": true, "completion": ".decl Has_CAS_number(Chemical:symbol, CAS_number:symbol)\nHas_CAS_number(\"benzyl alcohol\", \"100-51-6\").\nHas_CAS_number(\"benzyl alcohol\", \"8009-03-8\").\n.decl Is_harmful_for(Chemical:symbol, Disease:symbol)\nIs_harmful_for(\"benzyl alcohol\", \"rash\").\n.decl Answer()\nAnswer() :- Has_CAS_number(\"benzyl alcohol\", \"8009-03-8\"), Is_harmful_for(\"benzyl alcohol\", \"rash\").\n.output Answer\n\n", "completions": [".decl Has_CAS_number(Chemical:symbol, CAS_number:symbol)\nHas_CAS_number(\"benzyl alcohol\", \"100-51-6\").\nHas_CAS_number(\"benzyl alcohol\", \"8009-03-8\").\n.decl Is_harmful_for(Chemical:symbol, Disease:symbol)\nIs_harmful_for(\"benzyl alcohol\", \"rash\").\n.decl Answer()\nAnswer() :- Has_CAS_number(\"benzyl alcohol\", \"8009-03-8\"), Is_harmful_for(\"benzyl alcohol\", \"rash\").\n.output Answer\n\n"]}
{"id": 1410, "answer": false, "completion": ".decl Is_native_to(Animal:symbol, Location:symbol)\nIs_native_to(\"wolverine\", \"Canada\").\nIs_native_to(\"wolverine\", \"United States\").\n.decl Answer()\nAnswer() :- Is_native_to(\"wolverine\", \"Miami\").\n.output Answer\n\n", "completions": [".decl Is_native_to(Animal:symbol, Location:symbol)\nIs_native_to(\"wolverine\", \"Canada\").\nIs_native_to(\"wolverine\", \"United States\").\n.decl Answer()\nAnswer() :- Is_native_to(\"wolverine\", \"Miami\").\n.output Answer\n\n"]}
{"id": 1411, "answer": false, "completion": ".decl Released_on_day(Album:symbol, Day:symbol)\nReleased_on_day(\"Doggystyle\", \"Friday\").\n.decl Is_weekend(Day:symbol)\nIs_weekend(\"Saturday\").\nIs_weekend(\"Sunday\").\n.decl Answer()\nAnswer() :- Released_on_day(\"Doggystyle\", day), Is_weekend(day).\n.output Answer\n\n", "completions": [".decl Released_on_day(Album:symbol, Day:symbol)\nReleased_on_day(\"Doggystyle\", \"Friday\").\n.decl Is_weekend(Day:symbol)\nIs_weekend(\"Saturday\").\nIs_weekend(\"Sunday\").\n.decl Answer()\nAnswer() :- Released_on_day(\"Doggystyle\", day), Is_weekend(day).\n.output Answer\n\n"]}
{"id": 1412, "answer": true, "completion": ".decl Has_danger(Place:symbol, Danger:symbol)\nHas_danger(\"Amazonas\", \"dangerous animals\").\n.decl Answer()\nAnswer() :- Has_danger(\"Amazonas\", \"dangerous animals\").\n.output Answer\n\n", "completions": [".decl Has_danger(Place:symbol, Danger:symbol)\nHas_danger(\"Amazonas\", \"dangerous animals\").\n.decl Answer()\nAnswer() :- Has_danger(\"Amazonas\", \"dangerous animals\").\n.output Answer\n\n"]}
{"id": 1413, "answer": false, "completion": ".decl Grows_in(Crop:symbol, State:symbol)\nGrows_in(\"cauliflower\", \"Arizona\").\nGrows_in(\"cauliflower\", \"California\").\n.decl Answer()\nAnswer() :- Grows_in(\"cauliflower\", \"Arizona\"), !Grows_in(\"cauliflower\", \"California\").\n.output Answer\n\n", "completions": [".decl Grows_in(Crop:symbol, State:symbol)\nGrows_in(\"cauliflower\", \"Arizona\").\nGrows_in(\"cauliflower\", \"California\").\n.decl Answer()\nAnswer() :- Grows_in(\"cauliflower\", \"Arizona\"), !Grows_in(\"cauliflower\", \"California\").\n.output Answer\n\n"]}
{"id": 1414, "answer": true, "completion": ".decl Is_edible(Food:symbol)\nIs_edible(\"horseradish\").\n.decl Is_religious(Context:symbol)\nIs_religious(\"Passover\").\n.decl Answer()\nAnswer() :- Is_edible(food), Is_religious(context).\n.output Answer\n\n", "completions": [".decl Is_edible(Food:symbol)\nIs_edible(\"horseradish\").\n.decl Is_religious(Context:symbol)\nIs_religious(\"Passover\").\n.decl Answer()\nAnswer() :- Is_edible(food), Is_religious(context).\n.output Answer\n\n"]}
{"id": 1415, "answer": true, "completion": ".decl Has_n_followers(Person:symbol, N_followers:float)\nHas_n_followers(\"Katy Perry\", 100).\n.decl Has_genre(Person:symbol, Genre:symbol)\nHas_genre(\"Katy Perry\", \"pop\").\nHas_genre(\"Katy Perry\", \"gospel\").\n.decl Answer()\nAnswer() :- Has_n_followers(\"Katy Perry\", n_followers), Has_genre(\"Katy Perry\", \"gospel\"), n_followers > 50.\n.output Answer\n\n", "completions": [".decl Has_n_followers(Person:symbol, N_followers:float)\nHas_n_followers(\"Katy Perry\", 100).\n.decl Has_genre(Person:symbol, Genre:symbol)\nHas_genre(\"Katy Perry\", \"pop\").\nHas_genre(\"Katy Perry\", \"gospel\").\n.decl Answer()\nAnswer() :- Has_n_followers(\"Katy Perry\", n_followers), Has_genre(\"Katy Perry\", \"gospel\"), n_followers > 50.\n.output Answer\n\n"]}
{"id": 1416, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"miso soup\", \"glutamic acid\").\n.decl Relies_on(Person:symbol, Ingredient:symbol)\nRelies_on(\"Masaharu Morimoto\", \"miso soup\").\n.decl Answer()\nAnswer() :- Relies_on(\"Masaharu Morimoto\", food), Has_ingredient(food, \"glutamic acid\").\n.output Answer\n\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"miso soup\", \"glutamic acid\").\n.decl Relies_on(Person:symbol, Ingredient:symbol)\nRelies_on(\"Masaharu Morimoto\", \"miso soup\").\n.decl Answer()\nAnswer() :- Relies_on(\"Masaharu Morimoto\", food), Has_ingredient(food, \"glutamic acid\").\n.output Answer\n\n\n"]}
{"id": 1417, "answer": true, "completion": ".decl Has_sensitivity(Animal:symbol, Sensitivity:symbol)\nHas_sensitivity(\"common carp\", \"high\").\n.decl Answer()\nAnswer() :- Has_sensitivity(\"common carp\", \"high\").\n.output Answer\n\n", "completions": [".decl Has_sensitivity(Animal:symbol, Sensitivity:symbol)\nHas_sensitivity(\"common carp\", \"high\").\n.decl Answer()\nAnswer() :- Has_sensitivity(\"common carp\", \"high\").\n.output Answer\n\n"]}
{"id": 1418, "answer": true, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Amazon share\", 1500).\nHas_price(\"Netflix subscription\", 2000).\n.decl Answer()\nAnswer() :- Has_price(\"Amazon share\", price1), Has_price(\"Netflix subscription\", price2), price1 >= price2/20.\n.output Answer\n\n", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Amazon share\", 1500).\nHas_price(\"Netflix subscription\", 2000).\n.decl Answer()\nAnswer() :- Has_price(\"Amazon share\", price1), Has_price(\"Netflix subscription\", price2), price1 >= price2/20.\n.output Answer\n\n"]}
{"id": 1419, "answer": false, "completion": ".decl Kills(Person:symbol, Weapon:symbol, Victim:symbol)\nKills(\"gladiator\", \"sword\", \"opponent\").\n.decl Answer()\nAnswer() :- Kills(\"gladiator\", \"shotgun\", \"opponent\").\n.output Answer\n\n", "completions": [".decl Kills(Person:symbol, Weapon:symbol, Victim:symbol)\nKills(\"gladiator\", \"sword\", \"opponent\").\n.decl Answer()\nAnswer() :- Kills(\"gladiator\", \"shotgun\", \"opponent\").\n.output Answer\n\n"]}
{"id": 1420, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Steve Irwin\", \"Australia\").\nLives_in(\"Mediterranean Sea creature\", \"Mediterranean Sea\").\n.decl Kills(Animal_A:symbol, Animal_B:symbol)\nKills(\"Mediterranean Sea creature\", \"Steve Irwin\").\n.decl Answer()\nAnswer() :- Lives_in(\"Steve Irwin\", place1), Lives_in(\"Mediterranean Sea creature\", place2), Kills(\"Mediterranean Sea creature\", \"Steve Irwin\"), place1 != place2.\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Steve Irwin\", \"Australia\").\nLives_in(\"Mediterranean Sea creature\", \"Mediterranean Sea\").\n.decl Kills(Animal_A:symbol, Animal_B:symbol)\nKills(\"Mediterranean Sea creature\", \"Steve Irwin\").\n.decl Answer()\nAnswer() :- Lives_in(\"Steve Irwin\", place1), Lives_in(\"Mediterranean Sea creature\", place2), Kills(\"Mediterranean Sea creature\", \"Steve Irwin\"), place1 != place2.\n.output Answer\n\n"]}
{"id": 1421, "answer": true, "completion": ".decl Lasts_n_seconds(Event:symbol, N_seconds:float)\nLasts_n_seconds(\"Daytona 500\", 7200).\nLasts_n_seconds(\"E6000 cure\", 3600).\n.decl Answer()\nAnswer() :- Lasts_n_seconds(\"E6000 cure\", n_seconds1), Lasts_n_seconds(\"Daytona 500\", n_seconds2), n_seconds1 < n_seconds2.\n.output Answer\n\n", "completions": [".decl Lasts_n_seconds(Event:symbol, N_seconds:float)\nLasts_n_seconds(\"Daytona 500\", 7200).\nLasts_n_seconds(\"E6000 cure\", 3600).\n.decl Answer()\nAnswer() :- Lasts_n_seconds(\"E6000 cure\", n_seconds1), Lasts_n_seconds(\"Daytona 500\", n_seconds2), n_seconds1 < n_seconds2.\n.output Answer\n\n"]}
{"id": 1422, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Cosmic Girls\", 12).\n.decl Requires_n_players(Game:symbol, N_players:float)\nRequires_n_players(\"League of Legends\", 2).\n.decl Answer()\nAnswer() :- Has_n_members(\"Cosmic Girls\", n_members), Requires_n_players(\"League of Legends\", n_players), n_members >= n_players.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Cosmic Girls\", 12).\n.decl Requires_n_players(Game:symbol, N_players:float)\nRequires_n_players(\"League of Legends\", 2).\n.decl Answer()\nAnswer() :- Has_n_members(\"Cosmic Girls\", n_members), Requires_n_players(\"League of Legends\", n_players), n_members >= n_players.\n.output Answer\n\n"]}
{"id": 1423, "answer": true, "completion": ".decl Is_relevant_to(Event:symbol, Movie:symbol)\nIs_relevant_to(\"Y2K\", \"The Godfather\").\n.decl Answer()\nAnswer() :- Is_relevant_to(\"Y2K\", \"The Godfather\").\n.output Answer\n\n", "completions": [".decl Is_relevant_to(Event:symbol, Movie:symbol)\nIs_relevant_to(\"Y2K\", \"The Godfather\").\n.decl Answer()\nAnswer() :- Is_relevant_to(\"Y2K\", \"The Godfather\").\n.output Answer\n\n"]}
{"id": 1424, "answer": false, "completion": ".decl Happens_at_time(Event:symbol, Time:symbol)\nHappens_at_time(\"The Tonight Show Starring Jimmy Fallon\", \"11:35 PM\").\nHappens_at_time(\"moonset\", \"11:45 PM\").\n.decl Answer()\nAnswer() :- Happens_at_time(\"The Tonight Show Starring Jimmy Fallon\", time1), Happens_at_time(\"moonset\", time2), time1 > time2.\n.output Answer\n\n", "completions": [".decl Happens_at_time(Event:symbol, Time:symbol)\nHappens_at_time(\"The Tonight Show Starring Jimmy Fallon\", \"11:35 PM\").\nHappens_at_time(\"moonset\", \"11:45 PM\").\n.decl Answer()\nAnswer() :- Happens_at_time(\"The Tonight Show Starring Jimmy Fallon\", time1), Happens_at_time(\"moonset\", time2), time1 > time2.\n.output Answer\n\n"]}
{"id": 1425, "answer": true, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"9/11\", 2001).\n.decl Graduates_in_year(Person:symbol, Year:float)\nGraduates_in_year(\"student of the class of 2017\", 2017).\n.decl Answer()\nAnswer() :- Happens_in_year(\"9/11\", year1), Graduates_in_year(\"student of the class of 2017\", year2), year2 - year1 > 15.\n.output Answer\n\n", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"9/11\", 2001).\n.decl Graduates_in_year(Person:symbol, Year:float)\nGraduates_in_year(\"student of the class of 2017\", 2017).\n.decl Answer()\nAnswer() :- Happens_in_year(\"9/11\", year1), Graduates_in_year(\"student of the class of 2017\", year2), year2 - year1 > 15.\n.output Answer\n\n"]}
{"id": 1426, "answer": true, "completion": ".decl Has_ingredient(Dish:symbol, Ingredient:symbol)\nHas_ingredient(\"ham sandwich\", \"ham\").\n.decl Avoids(Person:symbol, Ingredient:symbol)\nAvoids(\"Janet Jackson\", \"ham\").\n.decl Answer()\nAnswer() :- Has_ingredient(dish, \"ham\"), Avoids(\"Janet Jackson\", \"ham\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Dish:symbol, Ingredient:symbol)\nHas_ingredient(\"ham sandwich\", \"ham\").\n.decl Avoids(Person:symbol, Ingredient:symbol)\nAvoids(\"Janet Jackson\", \"ham\").\n.decl Answer()\nAnswer() :- Has_ingredient(dish, \"ham\"), Avoids(\"Janet Jackson\", \"ham\").\n.output Answer\n\n"]}
{"id": 1427, "answer": false, "completion": ".decl Has_n_contents(Object:symbol, N_contents:float)\nHas_n_contents(\"pea pod\", 20).\n.decl Has_n_squares(Object:symbol, N_squares:float)\nHas_n_squares(\"chess board\", 64).\n.decl Answer()\nAnswer() :- Has_n_contents(\"pea pod\", n_contents), Has_n_squares(\"chess board\", n_squares), n_contents >= n_squares.\n.output Answer\n\n", "completions": [".decl Has_n_contents(Object:symbol, N_contents:float)\nHas_n_contents(\"pea pod\", 20).\n.decl Has_n_squares(Object:symbol, N_squares:float)\nHas_n_squares(\"chess board\", 64).\n.decl Answer()\nAnswer() :- Has_n_contents(\"pea pod\", n_contents), Has_n_squares(\"chess board\", n_squares), n_contents >= n_squares.\n.output Answer\n\n"]}
{"id": 1428, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"footprints on the moon\", 1969).\n.decl Answer()\nAnswer() :- Happens_in_year(\"footprints on the moon\", year), year < 1960.\n.output Answer\n\n", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"footprints on the moon\", 1969).\n.decl Answer()\nAnswer() :- Happens_in_year(\"footprints on the moon\", year), year < 1960.\n.output Answer\n\n"]}
{"id": 1429, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Supreme Court of Canada\", 9).\nHas_n_members(\"Lucha trios match\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Supreme Court of Canada\", n_members1), Has_n_members(\"Lucha trios match\", n_members2), n_members1 = n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Supreme Court of Canada\", 9).\nHas_n_members(\"Lucha trios match\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Supreme Court of Canada\", n_members1), Has_n_members(\"Lucha trios match\", n_members2), n_members1 = n_members2.\n.output Answer\n\n"]}
{"id": 1430, "answer": false, "completion": ".decl Has_n_readers(Magazine:symbol, N_readers:float)\nHas_n_readers(\"Atlantic\", 500000).\n.decl Has_n_soldiers(Battalion:symbol, N_soldiers:float)\nHas_n_soldiers(\"battalion\", 1000).\n.decl Answer()\nAnswer() :- Has_n_readers(\"Atlantic\", n_readers), Has_n_soldiers(\"battalion\", n_soldiers), n_readers >= n_soldiers^2.\n.output Answer\n\n\n", "completions": [".decl Has_n_readers(Magazine:symbol, N_readers:float)\nHas_n_readers(\"Atlantic\", 500000).\n.decl Has_n_soldiers(Battalion:symbol, N_soldiers:float)\nHas_n_soldiers(\"battalion\", 1000).\n.decl Answer()\nAnswer() :- Has_n_readers(\"Atlantic\", n_readers), Has_n_soldiers(\"battalion\", n_soldiers), n_readers >= n_soldiers^2.\n.output Answer\n\n\n"]}
{"id": 1431, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"French Revolution\", \"1789\").\nHappens_in_time(\"televised\", \"1927\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"French Revolution\", time1), Happens_in_time(\"televised\", time2), time1 < time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"French Revolution\", \"1789\").\nHappens_in_time(\"televised\", \"1927\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"French Revolution\", time1), Happens_in_time(\"televised\", time2), time1 < time2.\n.output Answer\n\n"]}
{"id": 1432, "answer": false, "completion": ".decl Has_tragedy(Person:symbol, Tragedy:symbol)\nHas_tragedy(\"Dr. Seuss\", \"death\").\n.decl Answer()\nAnswer() :- !Has_tragedy(\"Dr. Seuss\", tragedy).\n.output Answer\n\n", "completions": [".decl Has_tragedy(Person:symbol, Tragedy:symbol)\nHas_tragedy(\"Dr. Seuss\", \"death\").\n.decl Answer()\nAnswer() :- !Has_tragedy(\"Dr. Seuss\", tragedy).\n.output Answer\n\n"]}
{"id": 1433, "answer": true, "completion": ".decl Has_leaves(Tree:symbol, Leaves:symbol)\nHas_leaves(\"Christmas tree\", \"evergreen\").\nHas_leaves(\"deciduous tree\", \"deciduous\").\n.decl Answer()\nAnswer() :- Has_leaves(\"Christmas tree\", leaves1), Has_leaves(\"deciduous tree\", leaves2), leaves1 != leaves2.\n.output Answer\n\n", "completions": [".decl Has_leaves(Tree:symbol, Leaves:symbol)\nHas_leaves(\"Christmas tree\", \"evergreen\").\nHas_leaves(\"deciduous tree\", \"deciduous\").\n.decl Answer()\nAnswer() :- Has_leaves(\"Christmas tree\", leaves1), Has_leaves(\"deciduous tree\", leaves2), leaves1 != leaves2.\n.output Answer\n\n"]}
{"id": 1434, "answer": false, "completion": ".decl Produces(Animal:symbol, Product:symbol)\nProduces(\"cow\", \"milk\").\n.decl Answer()\nAnswer() :- Produces(\"cow\", \"Harvey Milk\").\n.output Answer\n\n", "completions": [".decl Produces(Animal:symbol, Product:symbol)\nProduces(\"cow\", \"milk\").\n.decl Answer()\nAnswer() :- Produces(\"cow\", \"Harvey Milk\").\n.output Answer\n\n"]}
{"id": 1435, "answer": true, "completion": ".decl Has_protagonist(Story:symbol, Protagonist:symbol)\nHas_protagonist(\"song of Roland\", \"Charlemagne\").\n.decl Has_sagas(Group:symbol)\nHas_sagas(\"Vikings\").\n.decl Friendly(Person_A:symbol, Person_B:symbol)\nFriendly(\"Charlemagne\", \"Vikings\").\n.decl Answer()\nAnswer() :- Has_protagonist(\"song of Roland\", protagonist), Has_sagas(group), Friendly(protagonist, group).\n.output Answer\n\n", "completions": [".decl Has_protagonist(Story:symbol, Protagonist:symbol)\nHas_protagonist(\"song of Roland\", \"Charlemagne\").\n.decl Has_sagas(Group:symbol)\nHas_sagas(\"Vikings\").\n.decl Friendly(Person_A:symbol, Person_B:symbol)\nFriendly(\"Charlemagne\", \"Vikings\").\n.decl Answer()\nAnswer() :- Has_protagonist(\"song of Roland\", protagonist), Has_sagas(group), Friendly(protagonist, group).\n.output Answer\n\n"]}
{"id": 1436, "answer": false, "completion": ".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"cucumber\", \"smooth\").\n.decl Answer()\nAnswer() :- Has_texture(object1, texture), Has_texture(object2, texture), object1 != object2.\n.output Answer\n\n", "completions": [".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"cucumber\", \"smooth\").\n.decl Answer()\nAnswer() :- Has_texture(object1, texture), Has_texture(object2, texture), object1 != object2.\n.output Answer\n\n"]}
{"id": 1437, "answer": false, "completion": ".decl Used_in(Currency:symbol, Country:symbol)\nUsed_in(\"Euro\", \"Germany\").\nUsed_in(\"Euro\", \"France\").\nUsed_in(\"Euro\", \"Italy\").\nUsed_in(\"Euro\", \"Spain\").\nUsed_in(\"Euro\", \"Netherlands\").\nUsed_in(\"Euro\", \"Belgium\").\nUsed_in(\"Euro\", \"Luxembourg\").\nUsed_in(\"Euro\", \"Austria\").\nUsed_in(\"Euro\", \"Portugal\").\nUsed_in(\"Euro\", \"Ireland\").\nUsed_in(\"Euro\", \"Finland\").\nUsed_in(\"Euro\", \"Greece\").\nUsed_in(\"Euro\", \"Slovenia\").\nUsed_in(\"Euro\", \"Cyprus\").\nUsed_in(\"Euro\", \"Malta\").\nUsed_in(\"Euro\", \"Slovakia\").\nUsed_in(\"Euro\", \"Estonia\").\nUsed_in(\"Euro\", \"Latvia\").\nUsed_in(\"Euro\", \"Lithuania\").\nUsed_in(\"Euro\", \"Monaco\").\nUsed_in(\"Euro\", \"San Marino\").\nUsed_in(\"Euro\", \"Vatican City\").\nUsed_in(\"Euro\", \"Andorra\").\nUsed_in(\"Euro\", \"Kosovo\").\nUsed_in(\"Euro\", \"Montenegro\").\nUsed_in(\"Euro\", \"Akrotiri and Dhekelia\").\nUsed_in(\"Euro\", \"Saint Pierre and Miquelon\").\nUsed_in(\"Euro\", \"French Guiana\").\nUsed_in(\"Euro\", \"Guadeloupe\").\nUsed_in(\"Euro\", \"Martinique\").\nUsed_in(\"Euro\", \"Mayotte\").\nUsed_in(\"Euro\", \"Reunion\").\nUsed_in(\"Euro\", \"Saint Barthelemy\").\nUsed_in(\"Euro\", \"Saint Martin\").\nUsed_in(\"Euro\", \"Saint Helena\").\nUsed_in(\"Euro\", \"Ascension Island\").\nUsed_in(\"Euro\", \"Tristan da Cunha\").\nUsed_in(\"Euro\", \"Ceuta\").\nUsed_in(\"Euro\", \"Melilla\").\nUsed_in(\"Euro\", \"Pitcairn Islands\").\nUsed_in(\"Euro\", \"Saint Helena\").\nUsed_in(\"Euro\", \"Tokelau\").\nUsed_in(\"Euro\", \"Wallis and Futuna\").\nUsed_in(\"Euro\", \"French Polynesia\").\nUsed_in(\"Euro\", \"New Caledonia\").\nUsed_in(\"Euro\", \"Saint Martin\").\nUsed_in(\"Euro\", \"Saint Pierre and Miquelon\").\nUsed_in(\"Euro\", \"Mayotte\").\nUsed_in(\"Euro\", \"French Southern and Antarctic Lands\").\nUsed_in(\"Euro\", \"Clipperton Island\").\nUsed_in(\"Euro\", \"Saint Barthelemy\").\nUsed_in(\"Euro\", \"Saint Martin\").\nUsed_in(\"Euro\", \"Saint Pierre and Miquelon\").\nUsed_in(\"Euro\", \"Mayotte\").\nUsed_in(\"Euro\", \"French Southern and Antarctic Lands\").\nUsed_in(\"Euro\", \"Clipperton Island\").\nUsed_in(\"Euro\", \"Saint Barthelemy\").\nUsed_in(\"Euro\", \"Saint Martin\").\nUsed_in(\"Euro\", \"Saint Pierre and Miquelon\").\nUsed_in(\"Euro\", \"Mayotte\").\nUsed_in(\"Euro\", \"French Southern and Antarctic Lands\").\nUsed_in(\"Euro\", \"Clipperton Island\").\nUsed_in(\"Euro\", \"Saint Barthelemy\").\nUsed_in", "completions": [".decl Used_in(Currency:symbol, Country:symbol)\nUsed_in(\"Euro\", \"Germany\").\nUsed_in(\"Euro\", \"France\").\nUsed_in(\"Euro\", \"Italy\").\nUsed_in(\"Euro\", \"Spain\").\nUsed_in(\"Euro\", \"Netherlands\").\nUsed_in(\"Euro\", \"Belgium\").\nUsed_in(\"Euro\", \"Luxembourg\").\nUsed_in(\"Euro\", \"Austria\").\nUsed_in(\"Euro\", \"Portugal\").\nUsed_in(\"Euro\", \"Ireland\").\nUsed_in(\"Euro\", \"Finland\").\nUsed_in(\"Euro\", \"Greece\").\nUsed_in(\"Euro\", \"Slovenia\").\nUsed_in(\"Euro\", \"Cyprus\").\nUsed_in(\"Euro\", \"Malta\").\nUsed_in(\"Euro\", \"Slovakia\").\nUsed_in(\"Euro\", \"Estonia\").\nUsed_in(\"Euro\", \"Latvia\").\nUsed_in(\"Euro\", \"Lithuania\").\nUsed_in(\"Euro\", \"Monaco\").\nUsed_in(\"Euro\", \"San Marino\").\nUsed_in(\"Euro\", \"Vatican City\").\nUsed_in(\"Euro\", \"Andorra\").\nUsed_in(\"Euro\", \"Kosovo\").\nUsed_in(\"Euro\", \"Montenegro\").\nUsed_in(\"Euro\", \"Akrotiri and Dhekelia\").\nUsed_in(\"Euro\", \"Saint Pierre and Miquelon\").\nUsed_in(\"Euro\", \"French Guiana\").\nUsed_in(\"Euro\", \"Guadeloupe\").\nUsed_in(\"Euro\", \"Martinique\").\nUsed_in(\"Euro\", \"Mayotte\").\nUsed_in(\"Euro\", \"Reunion\").\nUsed_in(\"Euro\", \"Saint Barthelemy\").\nUsed_in(\"Euro\", \"Saint Martin\").\nUsed_in(\"Euro\", \"Saint Helena\").\nUsed_in(\"Euro\", \"Ascension Island\").\nUsed_in(\"Euro\", \"Tristan da Cunha\").\nUsed_in(\"Euro\", \"Ceuta\").\nUsed_in(\"Euro\", \"Melilla\").\nUsed_in(\"Euro\", \"Pitcairn Islands\").\nUsed_in(\"Euro\", \"Saint Helena\").\nUsed_in(\"Euro\", \"Tokelau\").\nUsed_in(\"Euro\", \"Wallis and Futuna\").\nUsed_in(\"Euro\", \"French Polynesia\").\nUsed_in(\"Euro\", \"New Caledonia\").\nUsed_in(\"Euro\", \"Saint Martin\").\nUsed_in(\"Euro\", \"Saint Pierre and Miquelon\").\nUsed_in(\"Euro\", \"Mayotte\").\nUsed_in(\"Euro\", \"French Southern and Antarctic Lands\").\nUsed_in(\"Euro\", \"Clipperton Island\").\nUsed_in(\"Euro\", \"Saint Barthelemy\").\nUsed_in(\"Euro\", \"Saint Martin\").\nUsed_in(\"Euro\", \"Saint Pierre and Miquelon\").\nUsed_in(\"Euro\", \"Mayotte\").\nUsed_in(\"Euro\", \"French Southern and Antarctic Lands\").\nUsed_in(\"Euro\", \"Clipperton Island\").\nUsed_in(\"Euro\", \"Saint Barthelemy\").\nUsed_in(\"Euro\", \"Saint Martin\").\nUsed_in(\"Euro\", \"Saint Pierre and Miquelon\").\nUsed_in(\"Euro\", \"Mayotte\").\nUsed_in(\"Euro\", \"French Southern and Antarctic Lands\").\nUsed_in(\"Euro\", \"Clipperton Island\").\nUsed_in(\"Euro\", \"Saint Barthelemy\").\nUsed_in"]}
{"id": 1438, "answer": true, "completion": ".decl Carries(Person:symbol, Object:symbol)\nCarries(\"Bugs Bunny\", \"carrot\").\n.decl Is_a(Object:symbol, Category:symbol)\nIs_a(\"carrot\", \"root vegetable\").\n.decl Answer()\nAnswer() :- Carries(\"Bugs Bunny\", object), Is_a(object, \"root vegetable\").\n.output Answer\n\n", "completions": [".decl Carries(Person:symbol, Object:symbol)\nCarries(\"Bugs Bunny\", \"carrot\").\n.decl Is_a(Object:symbol, Category:symbol)\nIs_a(\"carrot\", \"root vegetable\").\n.decl Answer()\nAnswer() :- Carries(\"Bugs Bunny\", object), Is_a(object, \"root vegetable\").\n.output Answer\n\n"]}
{"id": 1439, "answer": false, "completion": ".decl Has_rule(Code:symbol, Rule:symbol)\nHas_rule(\"Hammurabi's Code\", \"eye for an eye\").\nHas_rule(\"Hammurabi's Code\", \"tooth for a tooth\").\nHas_rule(\"Hammurabi's Code\", \"life for a life\").\nHas_rule(\"Hammurabi's Code\", \"hand for a hand\").\nHas_rule(\"Hammurabi's Code\", \"foot for a foot\").\nHas_rule(\"Hammurabi's Code\", \"burn for a burn\").\nHas_rule(\"Hammurabi's Code\", \"wound for a wound\").\nHas_rule(\"Hammurabi's Code\", \"stripe for a stripe\").\nHas_rule(\"Hammurabi's Code\", \"do not kill\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammur", "completions": [".decl Has_rule(Code:symbol, Rule:symbol)\nHas_rule(\"Hammurabi's Code\", \"eye for an eye\").\nHas_rule(\"Hammurabi's Code\", \"tooth for a tooth\").\nHas_rule(\"Hammurabi's Code\", \"life for a life\").\nHas_rule(\"Hammurabi's Code\", \"hand for a hand\").\nHas_rule(\"Hammurabi's Code\", \"foot for a foot\").\nHas_rule(\"Hammurabi's Code\", \"burn for a burn\").\nHas_rule(\"Hammurabi's Code\", \"wound for a wound\").\nHas_rule(\"Hammurabi's Code\", \"stripe for a stripe\").\nHas_rule(\"Hammurabi's Code\", \"do not kill\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammurabi's Code\", \"do not bear false witness\").\nHas_rule(\"Hammurabi's Code\", \"do not covet\").\nHas_rule(\"Hammurabi's Code\", \"do not steal\").\nHas_rule(\"Hammurabi's Code\", \"do not commit adultery\").\nHas_rule(\"Hammur"]}
{"id": 1440, "answer": false, "completion": ".decl Originated_in_century(Religion:symbol, Century:float)\nOriginated_in_century(\"Buddhism\", 6).\nOriginated_in_century(\"Hinduism\", 3).\nOriginated_in_century(\"Jainism\", 6).\nOriginated_in_century(\"Sikhism\", 15).\n.decl Considers_sacred(Religion:symbol, Object:symbol)\nConsiders_sacred(\"Buddhism\", \"Himalayas\").\nConsiders_sacred(\"Hinduism\", \"Himalayas\").\nConsiders_sacred(\"Jainism\", \"Himalayas\").\nConsiders_sacred(\"Sikhism\", \"Himalayas\").\n.decl Answer()\nAnswer() :- Considers_sacred(religion, \"Himalayas\"), Originated_in_century(religion, 19).\n.output Answer\n\n", "completions": [".decl Originated_in_century(Religion:symbol, Century:float)\nOriginated_in_century(\"Buddhism\", 6).\nOriginated_in_century(\"Hinduism\", 3).\nOriginated_in_century(\"Jainism\", 6).\nOriginated_in_century(\"Sikhism\", 15).\n.decl Considers_sacred(Religion:symbol, Object:symbol)\nConsiders_sacred(\"Buddhism\", \"Himalayas\").\nConsiders_sacred(\"Hinduism\", \"Himalayas\").\nConsiders_sacred(\"Jainism\", \"Himalayas\").\nConsiders_sacred(\"Sikhism\", \"Himalayas\").\n.decl Answer()\nAnswer() :- Considers_sacred(religion, \"Himalayas\"), Originated_in_century(religion, 19).\n.output Answer\n\n"]}
{"id": 1441, "answer": true, "completion": ".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"Ten commandments\", \"bible\").\n.decl Believes_in(Person:symbol, Thing:symbol)\nBelieves_in(\"Jewish people\", \"bible\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Ten commandments\", whole), Believes_in(\"Jewish people\", whole), !Believes_in(\"Jewish people\", \"Ten commandments\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"Ten commandments\", \"bible\").\n.decl Believes_in(Person:symbol, Thing:symbol)\nBelieves_in(\"Jewish people\", \"bible\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Ten commandments\", whole), Believes_in(\"Jewish people\", whole), !Believes_in(\"Jewish people\", \"Ten commandments\").\n.output Answer\n\n"]}
{"id": 1442, "answer": true, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"teddy bear\", \"microphone\").\n.decl Answer()\nAnswer() :- Has_part(\"teddy bear\", \"microphone\").\n.output Answer\n\n", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"teddy bear\", \"microphone\").\n.decl Answer()\nAnswer() :- Has_part(\"teddy bear\", \"microphone\").\n.output Answer\n\n"]}
{"id": 1443, "answer": true, "completion": ".decl Has_pay(Person:symbol, Pay:float)\nHas_pay(\"retail associate\", 15).\nHas_pay(\"retailer's CEO\", 100).\n.decl Answer()\nAnswer() :- Has_pay(\"retail associate\", pay1), Has_pay(\"retailer's CEO\", pay2), pay1 < pay2.\n.output Answer\n\n", "completions": [".decl Has_pay(Person:symbol, Pay:float)\nHas_pay(\"retail associate\", 15).\nHas_pay(\"retailer's CEO\", 100).\n.decl Answer()\nAnswer() :- Has_pay(\"retail associate\", pay1), Has_pay(\"retailer's CEO\", pay2), pay1 < pay2.\n.output Answer\n\n"]}
{"id": 1444, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Tame Impala's studio band\", 5).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Hot Potato\", 2).\n.decl Answer()\nAnswer() :- Has_n_members(\"Tame Impala's studio band\", n_members), Has_n_players(\"Hot Potato\", n_players), n_members >= n_players.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Tame Impala's studio band\", 5).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Hot Potato\", 2).\n.decl Answer()\nAnswer() :- Has_n_members(\"Tame Impala's studio band\", n_members), Has_n_players(\"Hot Potato\", n_players), n_members >= n_players.\n.output Answer\n\n"]}
{"id": 1445, "answer": true, "completion": ".decl Is_a_type_of(Substance:symbol, Type:symbol)\nIs_a_type_of(\"lactic acid\", \"acid\").\n.decl Is_bad_for(Substance:symbol, Organism:symbol)\nIs_bad_for(\"acid\", \"human\").\n.decl Answer()\nAnswer() :- Is_a_type_of(substance, \"acid\"), Is_bad_for(\"acid\", \"human\").\n.output Answer\n\n", "completions": [".decl Is_a_type_of(Substance:symbol, Type:symbol)\nIs_a_type_of(\"lactic acid\", \"acid\").\n.decl Is_bad_for(Substance:symbol, Organism:symbol)\nIs_bad_for(\"acid\", \"human\").\n.decl Answer()\nAnswer() :- Is_a_type_of(substance, \"acid\"), Is_bad_for(\"acid\", \"human\").\n.output Answer\n\n"]}
{"id": 1446, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"President Trump's first term\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Tokyo Tower repainted\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Tokyo Tower repainted\", n_years1), Last_n_years(\"President Trump's first term\", n_years2), n_years1 > n_years2.\n.output Answer\n\n", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"President Trump's first term\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Tokyo Tower repainted\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Tokyo Tower repainted\", n_years1), Last_n_years(\"President Trump's first term\", n_years2), n_years1 > n_years2.\n.output Answer\n\n"]}
{"id": 1447, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Apollo 15\", 3).\n.decl Has_n_wheels(Vehicle:symbol, N_wheels:float)\nHas_n_wheels(\"unicycle\", 1).\n.decl Answer()\nAnswer() :- Has_n_members(\"Apollo 15\", n_members), Has_n_wheels(\"unicycle\", n_wheels), n_members > n_wheels.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Apollo 15\", 3).\n.decl Has_n_wheels(Vehicle:symbol, N_wheels:float)\nHas_n_wheels(\"unicycle\", 1).\n.decl Answer()\nAnswer() :- Has_n_members(\"Apollo 15\", n_members), Has_n_wheels(\"unicycle\", n_wheels), n_members > n_wheels.\n.output Answer\n\n"]}
{"id": 1448, "answer": true, "completion": ".decl Is_true(Statement:symbol)\nIs_true(\"It is okay to lie after taking an oath in a court of law\").\n.decl Answer()\nAnswer() :- Is_true(\"It is okay to lie after taking an oath in a court of law\").\n.output Answer\n\n", "completions": [".decl Is_true(Statement:symbol)\nIs_true(\"It is okay to lie after taking an oath in a court of law\").\n.decl Answer()\nAnswer() :- Is_true(\"It is okay to lie after taking an oath in a court of law\").\n.output Answer\n\n"]}
{"id": 1449, "answer": true, "completion": ".decl Is_considered(Thing:symbol, Quality:symbol)\nIs_considered(\"Newspeak\", \"very straightforward\").\n.decl Answer()\nAnswer() :- Is_considered(\"Newspeak\", \"very straightforward\").\n.output Answer\n\n", "completions": [".decl Is_considered(Thing:symbol, Quality:symbol)\nIs_considered(\"Newspeak\", \"very straightforward\").\n.decl Answer()\nAnswer() :- Is_considered(\"Newspeak\", \"very straightforward\").\n.output Answer\n\n"]}
{"id": 1450, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Snow White dwarves\", 7).\nHas_n_members(\"The Hobbit dwarves\", 13).\n.decl Answer()\nAnswer() :- Has_n_members(\"Snow White dwarves\", n_members1), Has_n_members(\"The Hobbit dwarves\", n_members2), n_members1 < n_members2.\n.output Answer\n\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Snow White dwarves\", 7).\nHas_n_members(\"The Hobbit dwarves\", 13).\n.decl Answer()\nAnswer() :- Has_n_members(\"Snow White dwarves\", n_members1), Has_n_members(\"The Hobbit dwarves\", n_members2), n_members1 < n_members2.\n.output Answer\n\n\n"]}
{"id": 1451, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Unity\", 182).\nHas_height(\"Statue of Liberty\", 93).\nHas_height(\"Lighthouse of Alexandria\", 137).\n.decl Answer()\nAnswer() :- Has_height(\"Statue of Unity\", height1), Has_height(\"Statue of Liberty\", height2), Has_height(\"Lighthouse of Alexandria\", height3), height1 - height2 < height3 - height2.\n.output Answer\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Unity\", 182).\nHas_height(\"Statue of Liberty\", 93).\nHas_height(\"Lighthouse of Alexandria\", 137).\n.decl Answer()\nAnswer() :- Has_height(\"Statue of Unity\", height1), Has_height(\"Statue of Liberty\", height2), Has_height(\"Lighthouse of Alexandria\", height3), height1 - height2 < height3 - height2.\n.output Answer\n\n"]}
{"id": 1452, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Football War\", 100).\n.decl Answer()\nAnswer() :- Last_n_days(\"Football War\", n_days), n_days >= 30.\n.output Answer\n\n", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Football War\", 100).\n.decl Answer()\nAnswer() :- Last_n_days(\"Football War\", n_days), n_days >= 30.\n.output Answer\n\n"]}
{"id": 1453, "answer": true, "completion": ".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"peach\", \"firm\").\nHas_texture(\"peach\", \"soft\").\n.decl Answer()\nAnswer() :- Has_texture(\"peach\", \"firm\").\n.output Answer\n\n", "completions": [".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"peach\", \"firm\").\nHas_texture(\"peach\", \"soft\").\n.decl Answer()\nAnswer() :- Has_texture(\"peach\", \"firm\").\n.output Answer\n\n"]}
{"id": 1454, "answer": true, "completion": ".decl Has_reference(Person:symbol, Reference:symbol)\nHas_reference(\"Adam Sandler\", \"Cole Spouse\").\n.decl Has_doll(Person:symbol, Doll:symbol)\nHas_doll(\"Adam Sandler\", \"scuba man doll\").\n.decl Answer()\nAnswer() :- Has_reference(\"Adam Sandler\", \"Cole Spouse\"), Has_doll(\"Adam Sandler\", \"scuba man doll\").\n.output Answer\n\n", "completions": [".decl Has_reference(Person:symbol, Reference:symbol)\nHas_reference(\"Adam Sandler\", \"Cole Spouse\").\n.decl Has_doll(Person:symbol, Doll:symbol)\nHas_doll(\"Adam Sandler\", \"scuba man doll\").\n.decl Answer()\nAnswer() :- Has_reference(\"Adam Sandler\", \"Cole Spouse\"), Has_doll(\"Adam Sandler\", \"scuba man doll\").\n.output Answer\n\n"]}
{"id": 1455, "answer": false, "completion": ".decl Is_considered_by(Person:symbol, Organization:symbol)\nIs_considered_by(\"Lhamo Thondup\", \"Catholic Church\").\n.decl Is_considered_by(Person:symbol, Organization:symbol)\nIs_considered_by(\"Lhamo Thondup\", \"Buddhist Church\").\n.decl Answer()\nAnswer() :- Is_considered_by(\"Lhamo Thondup\", \"Catholic Church\").\n.output Answer\n\n", "completions": [".decl Is_considered_by(Person:symbol, Organization:symbol)\nIs_considered_by(\"Lhamo Thondup\", \"Catholic Church\").\n.decl Is_considered_by(Person:symbol, Organization:symbol)\nIs_considered_by(\"Lhamo Thondup\", \"Buddhist Church\").\n.decl Answer()\nAnswer() :- Is_considered_by(\"Lhamo Thondup\", \"Catholic Church\").\n.output Answer\n\n"]}
{"id": 1456, "answer": true, "completion": ".decl Is_hurt_by(Person:symbol, Object:symbol)\nIs_hurt_by(\"children\", \"jalapeno peppers\").\n.decl Answer()\nAnswer() :- Is_hurt_by(\"children\", \"jalapeno peppers\").\n.output Answer\n\n", "completions": [".decl Is_hurt_by(Person:symbol, Object:symbol)\nIs_hurt_by(\"children\", \"jalapeno peppers\").\n.decl Answer()\nAnswer() :- Is_hurt_by(\"children\", \"jalapeno peppers\").\n.output Answer\n\n"]}
{"id": 1457, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Rede Globo anchor\", \"Portuguese\").\nSpeaks(\"Rede Globo anchor\", \"Japanese\").\n.decl Answer()\nAnswer() :- Speaks(\"Rede Globo anchor\", \"Japanese\").\n.output Answer\n\n", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Rede Globo anchor\", \"Portuguese\").\nSpeaks(\"Rede Globo anchor\", \"Japanese\").\n.decl Answer()\nAnswer() :- Speaks(\"Rede Globo anchor\", \"Japanese\").\n.output Answer\n\n"]}
{"id": 1458, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"harbor seal\", \"Washington DC\").\n.decl Answer()\nAnswer() :- Lives_in(\"harbor seal\", \"Washington DC\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"harbor seal\", \"Washington DC\").\n.decl Answer()\nAnswer() :- Lives_in(\"harbor seal\", \"Washington DC\").\n.output Answer\n\n"]}
{"id": 1459, "answer": false, "completion": ".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"2020 Toyota Supra\", 155).\n.decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Nascar rally\", 200).\n.decl Answer()\nAnswer() :- Has_top_speed(\"2020 Toyota Supra\", top_speed1), Has_top_speed(\"Nascar rally\", top_speed2), top_speed1 < top_speed2.\n.output Answer\n\n", "completions": [".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"2020 Toyota Supra\", 155).\n.decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Nascar rally\", 200).\n.decl Answer()\nAnswer() :- Has_top_speed(\"2020 Toyota Supra\", top_speed1), Has_top_speed(\"Nascar rally\", top_speed2), top_speed1 < top_speed2.\n.output Answer\n\n"]}
{"id": 1460, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"12-lb roast turkey\", 12).\n.decl Eats_n_lbs_per_hour(Animal:symbol, N_lbs:float)\nEats_n_lbs_per_hour(\"human\", 1).\n.decl Answer()\nAnswer() :- Has_weight(\"12-lb roast turkey\", weight), Eats_n_lbs_per_hour(\"human\", n_lbs), weight <= n_lbs.\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"12-lb roast turkey\", 12).\n.decl Eats_n_lbs_per_hour(Animal:symbol, N_lbs:float)\nEats_n_lbs_per_hour(\"human\", 1).\n.decl Answer()\nAnswer() :- Has_weight(\"12-lb roast turkey\", weight), Eats_n_lbs_per_hour(\"human\", n_lbs), weight <= n_lbs.\n.output Answer\n\n"]}
{"id": 1461, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Zorro carved his name into items\", 7).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"Zorro carved his name into items\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"Zorro carved his name into items\", n_days1), Last_n_days(\"Zorro carved his name into items\", n_days2), n_days1 <= n_days2.\n.output Answer\n\n", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Zorro carved his name into items\", 7).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"Zorro carved his name into items\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"Zorro carved his name into items\", n_days1), Last_n_days(\"Zorro carved his name into items\", n_days2), n_days1 <= n_days2.\n.output Answer\n\n"]}
{"id": 1462, "answer": false, "completion": ".decl Is_in(Event:symbol, Place:symbol)\nIs_in(\"Viper Room concert\", \"Viper Room\").\n.decl Is_in(Place:symbol, Place2:symbol)\nIs_in(\"Viper Room\", \"Sunset Strip\").\nIs_in(\"Sunset Strip\", \"Los Angeles\").\nIs_in(\"Los Angeles\", \"California\").\nIs_in(\"California\", \"United States\").\nIs_in(\"National Diet building\", \"Tokyo\").\nIs_in(\"Tokyo\", \"Japan\").\nIs_in(\"Japan\", \"Asia\").\n.decl Answer()\nAnswer() :- Is_in(\"Viper Room concert\", place1), Is_in(place1, place2), Is_in(\"National Diet building\", place3), Is_in(place3, place4), place2 = place4.\n.output Answer\n\n", "completions": [".decl Is_in(Event:symbol, Place:symbol)\nIs_in(\"Viper Room concert\", \"Viper Room\").\n.decl Is_in(Place:symbol, Place2:symbol)\nIs_in(\"Viper Room\", \"Sunset Strip\").\nIs_in(\"Sunset Strip\", \"Los Angeles\").\nIs_in(\"Los Angeles\", \"California\").\nIs_in(\"California\", \"United States\").\nIs_in(\"National Diet building\", \"Tokyo\").\nIs_in(\"Tokyo\", \"Japan\").\nIs_in(\"Japan\", \"Asia\").\n.decl Answer()\nAnswer() :- Is_in(\"Viper Room concert\", place1), Is_in(place1, place2), Is_in(\"National Diet building\", place3), Is_in(place3, place4), place2 = place4.\n.output Answer\n\n"]}
{"id": 1463, "answer": true, "completion": ".decl Is_vegan(Food:symbol)\nIs_vegan(\"chickpeas\").\n.decl Is_tuna_substitute(Food:symbol)\nIs_tuna_substitute(\"chickpeas\").\n.decl Answer()\nAnswer() :- Is_vegan(food), Is_tuna_substitute(food).\n.output Answer\n\n", "completions": [".decl Is_vegan(Food:symbol)\nIs_vegan(\"chickpeas\").\n.decl Is_tuna_substitute(Food:symbol)\nIs_tuna_substitute(\"chickpeas\").\n.decl Answer()\nAnswer() :- Is_vegan(food), Is_tuna_substitute(food).\n.output Answer\n\n"]}
{"id": 1464, "answer": false, "completion": ".decl Has_collaborator(Adaptation:symbol, Collaborator:symbol)\nHas_collaborator(\"Beauty and the Beast\", \"Kurt Sutter\").\n.decl Answer()\nAnswer() :- Has_collaborator(\"Beauty and the Beast\", \"Kurt Sutter\"), !Has_collaborator(\"Beauty and the Beast\", collaborator).\n.output Answer\n\n", "completions": [".decl Has_collaborator(Adaptation:symbol, Collaborator:symbol)\nHas_collaborator(\"Beauty and the Beast\", \"Kurt Sutter\").\n.decl Answer()\nAnswer() :- Has_collaborator(\"Beauty and the Beast\", \"Kurt Sutter\"), !Has_collaborator(\"Beauty and the Beast\", collaborator).\n.output Answer\n\n"]}
{"id": 1465, "answer": true, "completion": ".decl Has_strength(Group:symbol, Strength:float)\nHas_strength(\"Swiss Guard\", 1).\nHas_strength(\"Marines\", 10).\n.decl Answer()\nAnswer() :- Has_strength(\"Swiss Guard\", strength1), Has_strength(\"Marines\", strength2), strength1 < strength2.\n.output Answer\n\n", "completions": [".decl Has_strength(Group:symbol, Strength:float)\nHas_strength(\"Swiss Guard\", 1).\nHas_strength(\"Marines\", 10).\n.decl Answer()\nAnswer() :- Has_strength(\"Swiss Guard\", strength1), Has_strength(\"Marines\", strength2), strength1 < strength2.\n.output Answer\n\n"]}
{"id": 1466, "answer": true, "completion": ".decl Has_footprints(Place:symbol, Footprints:symbol)\nHas_footprints(\"Mount Sharp\", \"absent\").\n.decl Answer()\nAnswer() :- Has_footprints(\"Mount Sharp\", \"absent\").\n.output Answer\n\n", "completions": [".decl Has_footprints(Place:symbol, Footprints:symbol)\nHas_footprints(\"Mount Sharp\", \"absent\").\n.decl Answer()\nAnswer() :- Has_footprints(\"Mount Sharp\", \"absent\").\n.output Answer\n\n"]}
{"id": 1467, "answer": true, "completion": ".decl Has_leader(Country:symbol, Leader:symbol)\nHas_leader(\"England\", \"Edward II\").\n.decl Has_winner(Battle:symbol, Country:symbol)\nHas_winner(\"Battle of Falkirk\", \"England\").\n.decl Answer()\nAnswer() :- Has_leader(\"England\", \"Edward II\"), Has_winner(\"Battle of Falkirk\", \"England\").\n.output Answer\n\n", "completions": [".decl Has_leader(Country:symbol, Leader:symbol)\nHas_leader(\"England\", \"Edward II\").\n.decl Has_winner(Battle:symbol, Country:symbol)\nHas_winner(\"Battle of Falkirk\", \"England\").\n.decl Answer()\nAnswer() :- Has_leader(\"England\", \"Edward II\"), Has_winner(\"Battle of Falkirk\", \"England\").\n.output Answer\n\n"]}
{"id": 1468, "answer": true, "completion": ".decl Has_currency(Country:symbol, Currency:symbol)\nHas_currency(\"Roman Empire\", \"Pound sterling\").\n.decl Ruled_country(Emperor:symbol, Country:symbol)\nRuled_country(\"Emperor Commodus\", \"Roman Empire\").\n.decl Answer()\nAnswer() :- Ruled_country(\"Emperor Commodus\", country), Has_currency(country, \"Pound sterling\").\n.output Answer\n\n\n", "completions": [".decl Has_currency(Country:symbol, Currency:symbol)\nHas_currency(\"Roman Empire\", \"Pound sterling\").\n.decl Ruled_country(Emperor:symbol, Country:symbol)\nRuled_country(\"Emperor Commodus\", \"Roman Empire\").\n.decl Answer()\nAnswer() :- Ruled_country(\"Emperor Commodus\", country), Has_currency(country, \"Pound sterling\").\n.output Answer\n\n\n"]}
{"id": 1469, "answer": true, "completion": ".decl Has_texture(Food:symbol, Texture:symbol)\nHas_texture(\"spaghetti\", \"slick\").\n.decl Answer()\nAnswer() :- Has_texture(\"spaghetti\", \"slick\").\n.output Answer\n\n", "completions": [".decl Has_texture(Food:symbol, Texture:symbol)\nHas_texture(\"spaghetti\", \"slick\").\n.decl Answer()\nAnswer() :- Has_texture(\"spaghetti\", \"slick\").\n.output Answer\n\n"]}
{"id": 1470, "answer": true, "completion": ".decl Has_n_deaths(Event:symbol, N_deaths:float)\nHas_n_deaths(\"Carnation Revolution\", 0).\nHas_n_deaths(\"French Revolution\", 40).\n.decl Answer()\nAnswer() :- Has_n_deaths(\"Carnation Revolution\", n_deaths1), Has_n_deaths(\"French Revolution\", n_deaths2), n_deaths1 < n_deaths2.\n.output Answer\n\n", "completions": [".decl Has_n_deaths(Event:symbol, N_deaths:float)\nHas_n_deaths(\"Carnation Revolution\", 0).\nHas_n_deaths(\"French Revolution\", 40).\n.decl Answer()\nAnswer() :- Has_n_deaths(\"Carnation Revolution\", n_deaths1), Has_n_deaths(\"French Revolution\", n_deaths2), n_deaths1 < n_deaths2.\n.output Answer\n\n"]}
{"id": 1471, "answer": false, "completion": ".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"Triton\", -235).\n.decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"zoot suit\", 20).\n.decl Answer()\nAnswer() :- Has_temperature(\"Triton\", temperature1), Has_temperature(\"zoot suit\", temperature2), temperature1 < temperature2.\n.output Answer\n\n\n", "completions": [".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"Triton\", -235).\n.decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"zoot suit\", 20).\n.decl Answer()\nAnswer() :- Has_temperature(\"Triton\", temperature1), Has_temperature(\"zoot suit\", temperature2), temperature1 < temperature2.\n.output Answer\n\n\n"]}
{"id": 1472, "answer": true, "completion": ".decl Is_at(Person:symbol, Place:symbol)\nIs_at(\"Bugs Bunny\", \"Disneyland\").\nIs_at(\"Space Mountain\", \"Disneyland\").\n.decl Answer()\nAnswer() :- Is_at(\"Bugs Bunny\", \"Space Mountain\").\nAnswer() :- Is_at(\"Bugs Bunny\", place1), Is_at(\"Space Mountain\", place2), place1 = place2.\n.output Answer\n\n", "completions": [".decl Is_at(Person:symbol, Place:symbol)\nIs_at(\"Bugs Bunny\", \"Disneyland\").\nIs_at(\"Space Mountain\", \"Disneyland\").\n.decl Answer()\nAnswer() :- Is_at(\"Bugs Bunny\", \"Space Mountain\").\nAnswer() :- Is_at(\"Bugs Bunny\", place1), Is_at(\"Space Mountain\", place2), place1 = place2.\n.output Answer\n\n"]}
{"id": 1473, "answer": true, "completion": ".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"brew beer\", 1).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"brew beer\", n_months), n_months <= 1.\n.output Answer\n\n", "completions": [".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"brew beer\", 1).\n.decl Answer()\nAnswer() :- Lasts_n_months(\"brew beer\", n_months), n_months <= 1.\n.output Answer\n\n"]}
{"id": 1474, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Department of Defense\", 1).\n.decl Answer()\nAnswer() :- Has_n_members(\"Department of Defense\", 1).\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Department of Defense\", 1).\n.decl Answer()\nAnswer() :- Has_n_members(\"Department of Defense\", 1).\n.output Answer\n\n"]}
{"id": 1475, "answer": true, "completion": ".decl Has_ingredient(Candy_bar:symbol, Ingredient:symbol)\nHas_ingredient(\"Monoamine Oxidase\", \"phenylalanine\").\nHas_ingredient(\"Monoamine Oxidase\", \"tyrosine\").\nHas_ingredient(\"Monoamine Oxidase\", \"tryptophan\").\n.decl Has_effect(Ingredient:symbol, Effect:symbol)\nHas_effect(\"phenylalanine\", \"cheer up\").\nHas_effect(\"tyrosine\", \"cheer up\").\nHas_effect(\"tryptophan\", \"cheer up\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Monoamine Oxidase\", ingredient), Has_effect(ingredient, \"cheer up\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Candy_bar:symbol, Ingredient:symbol)\nHas_ingredient(\"Monoamine Oxidase\", \"phenylalanine\").\nHas_ingredient(\"Monoamine Oxidase\", \"tyrosine\").\nHas_ingredient(\"Monoamine Oxidase\", \"tryptophan\").\n.decl Has_effect(Ingredient:symbol, Effect:symbol)\nHas_effect(\"phenylalanine\", \"cheer up\").\nHas_effect(\"tyrosine\", \"cheer up\").\nHas_effect(\"tryptophan\", \"cheer up\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Monoamine Oxidase\", ingredient), Has_effect(ingredient, \"cheer up\").\n.output Answer\n\n"]}
{"id": 1476, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Elizabeth I of England\", \"silk\").\n.decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"silk\", \"viscose fiber\").\n.decl Answer()\nAnswer() :- Owns(\"Elizabeth I of England\", object), Is_made_of(object, \"viscose fiber\").\n.output Answer\n\n\n", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Elizabeth I of England\", \"silk\").\n.decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"silk\", \"viscose fiber\").\n.decl Answer()\nAnswer() :- Owns(\"Elizabeth I of England\", object), Is_made_of(object, \"viscose fiber\").\n.output Answer\n\n\n"]}
{"id": 1477, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Middle Ages warfare\", \"Middle Ages\").\nHappens_in_time(\"dynamite\", \"1867\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Middle Ages warfare\", time1), Happens_in_time(\"dynamite\", time2), time1 < time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Middle Ages warfare\", \"Middle Ages\").\nHappens_in_time(\"dynamite\", \"1867\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Middle Ages warfare\", time1), Happens_in_time(\"dynamite\", time2), time1 < time2.\n.output Answer\n\n"]}
{"id": 1478, "answer": false, "completion": ".decl Has_name_origin(Object:symbol, Name_origin:symbol)\nHas_name_origin(\"Europa\", \"Greek mythology\").\nHas_name_origin(\"Amunet\", \"Egyptian mythology\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Europa\", name_origin1), Has_name_origin(\"Amunet\", name_origin2), name_origin1 = name_origin2.\n.output Answer\n\n", "completions": [".decl Has_name_origin(Object:symbol, Name_origin:symbol)\nHas_name_origin(\"Europa\", \"Greek mythology\").\nHas_name_origin(\"Amunet\", \"Egyptian mythology\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Europa\", name_origin1), Has_name_origin(\"Amunet\", name_origin2), name_origin1 = name_origin2.\n.output Answer\n\n"]}
{"id": 1479, "answer": true, "completion": ".decl Has_offspring(Animal:symbol, Offspring:symbol)\nHas_offspring(\"kangaroo\", \"kangaroo\").\n.decl Incubates(Animal:symbol, Offspring:symbol)\nIncubates(\"kangaroo\", \"kangaroo\").\n.decl Answer()\nAnswer() :- Has_offspring(animal, offspring), Incubates(animal, offspring).\n.output Answer\n\n", "completions": [".decl Has_offspring(Animal:symbol, Offspring:symbol)\nHas_offspring(\"kangaroo\", \"kangaroo\").\n.decl Incubates(Animal:symbol, Offspring:symbol)\nIncubates(\"kangaroo\", \"kangaroo\").\n.decl Answer()\nAnswer() :- Has_offspring(animal, offspring), Incubates(animal, offspring).\n.output Answer\n\n"]}
{"id": 1480, "answer": true, "completion": ".decl Has_residence(Person:symbol, Residence:symbol)\nHas_residence(\"person\", \"Los Angeles County, California\").\n.decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"person\", \"Jehovah Witnesses\").\n.decl Has_heaven(Religion:symbol, Heaven:symbol)\nHas_heaven(\"Jehovah Witnesses\", \"heaven\").\n.decl Answer()\nAnswer() :- Has_residence(person, \"Los Angeles County, California\"), Has_religion(person, \"Jehovah Witnesses\"), Has_heaven(\"Jehovah Witnesses\", \"heaven\").\n.output Answer\n\n", "completions": [".decl Has_residence(Person:symbol, Residence:symbol)\nHas_residence(\"person\", \"Los Angeles County, California\").\n.decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"person\", \"Jehovah Witnesses\").\n.decl Has_heaven(Religion:symbol, Heaven:symbol)\nHas_heaven(\"Jehovah Witnesses\", \"heaven\").\n.decl Answer()\nAnswer() :- Has_residence(person, \"Los Angeles County, California\"), Has_religion(person, \"Jehovah Witnesses\"), Has_heaven(\"Jehovah Witnesses\", \"heaven\").\n.output Answer\n\n"]}
{"id": 1481, "answer": true, "completion": ".decl Smokes(Person:symbol, Cigarette:symbol)\nSmokes(\"John\", \"Djarum\").\nSmokes(\"Mary\", \"Djarum\").\nSmokes(\"John\", \"cloves\").\nSmokes(\"Mary\", \"cloves\").\n.decl Answer()\nAnswer() :- Smokes(person, \"Djarum\"), Smokes(person, \"cloves\").\n.output Answer\n\n", "completions": [".decl Smokes(Person:symbol, Cigarette:symbol)\nSmokes(\"John\", \"Djarum\").\nSmokes(\"Mary\", \"Djarum\").\nSmokes(\"John\", \"cloves\").\nSmokes(\"Mary\", \"cloves\").\n.decl Answer()\nAnswer() :- Smokes(person, \"Djarum\"), Smokes(person, \"cloves\").\n.output Answer\n\n"]}
{"id": 1482, "answer": false, "completion": ".decl Has_been_used_for(Object:symbol, Purpose:symbol)\nHas_been_used_for(\"Douglas fir\", \"building houses\").\nHas_been_used_for(\"Douglas fir\", \"making paper\").\nHas_been_used_for(\"Douglas fir\", \"making furniture\").\nHas_been_used_for(\"Douglas fir\", \"making boats\").\nHas_been_used_for(\"Douglas fir\", \"making telephone poles\").\nHas_been_used_for(\"Douglas fir\", \"making railroad ties\").\nHas_been_used_for(\"Douglas fir\", \"making plywood\").\nHas_been_used_for(\"Douglas fir\", \"making veneer\").\nHas_been_used_for(\"Douglas fir\", \"making crates\").\nHas_been_used_for(\"Douglas fir\", \"making boxes\").\nHas_been_used_for(\"Douglas fir\", \"making doors\").\nHas_been_used_for(\"Douglas fir\", \"making windows\").\nHas_been_used_for(\"Douglas fir\", \"making shingles\").\nHas_been_used_for(\"Douglas fir\", \"making siding\").\nHas_been_used_for(\"Douglas fir\", \"making flooring\").\nHas_been_used_for(\"Douglas fir\", \"making paneling\").\nHas_been_used_for(\"Douglas fir\", \"making molding\").\nHas_been_used_for(\"Douglas fir\", \"making cabinets\").\nHas_been_used_for(\"Douglas fir\", \"making musical instruments\").\nHas_been_used_for(\"Douglas fir\", \"making toys\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\",", "completions": [".decl Has_been_used_for(Object:symbol, Purpose:symbol)\nHas_been_used_for(\"Douglas fir\", \"building houses\").\nHas_been_used_for(\"Douglas fir\", \"making paper\").\nHas_been_used_for(\"Douglas fir\", \"making furniture\").\nHas_been_used_for(\"Douglas fir\", \"making boats\").\nHas_been_used_for(\"Douglas fir\", \"making telephone poles\").\nHas_been_used_for(\"Douglas fir\", \"making railroad ties\").\nHas_been_used_for(\"Douglas fir\", \"making plywood\").\nHas_been_used_for(\"Douglas fir\", \"making veneer\").\nHas_been_used_for(\"Douglas fir\", \"making crates\").\nHas_been_used_for(\"Douglas fir\", \"making boxes\").\nHas_been_used_for(\"Douglas fir\", \"making doors\").\nHas_been_used_for(\"Douglas fir\", \"making windows\").\nHas_been_used_for(\"Douglas fir\", \"making shingles\").\nHas_been_used_for(\"Douglas fir\", \"making siding\").\nHas_been_used_for(\"Douglas fir\", \"making flooring\").\nHas_been_used_for(\"Douglas fir\", \"making paneling\").\nHas_been_used_for(\"Douglas fir\", \"making molding\").\nHas_been_used_for(\"Douglas fir\", \"making cabinets\").\nHas_been_used_for(\"Douglas fir\", \"making musical instruments\").\nHas_been_used_for(\"Douglas fir\", \"making toys\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\", \"making pencils\").\nHas_been_used_for(\"Douglas fir\", \"making toothpicks\").\nHas_been_used_for(\"Douglas fir\", \"making matches\").\nHas_been_used_for(\"Douglas fir\","]}
{"id": 1483, "answer": true, "completion": ".decl Found_in(Animal:symbol, Location:symbol)\nFound_in(\"goat\", \"mountain\").\nFound_in(\"goat\", \"hill\").\nFound_in(\"goat\", \"plain\").\nFound_in(\"goat\", \"valley\").\nFound_in(\"goat\", \"abyssal plain\").\n.decl Answer()\nAnswer() :- Found_in(\"goat\", \"abyssal plain\").\n.output Answer\n\n", "completions": [".decl Found_in(Animal:symbol, Location:symbol)\nFound_in(\"goat\", \"mountain\").\nFound_in(\"goat\", \"hill\").\nFound_in(\"goat\", \"plain\").\nFound_in(\"goat\", \"valley\").\nFound_in(\"goat\", \"abyssal plain\").\n.decl Answer()\nAnswer() :- Found_in(\"goat\", \"abyssal plain\").\n.output Answer\n\n"]}
{"id": 1484, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"penguin\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Lives_in(\"penguin\", \"Miami\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"penguin\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Lives_in(\"penguin\", \"Miami\").\n.output Answer\n\n"]}
{"id": 1485, "answer": true, "completion": ".decl Is_student_of(Person:symbol, Teacher:symbol)\nIs_student_of(\"Al-Farabi\", \"Great Sheikh\").\n.decl Answer()\nAnswer() :- Is_student_of(\"Al-Farabi\", \"Great Sheikh\").\n.output Answer\n\n", "completions": [".decl Is_student_of(Person:symbol, Teacher:symbol)\nIs_student_of(\"Al-Farabi\", \"Great Sheikh\").\n.decl Answer()\nAnswer() :- Is_student_of(\"Al-Farabi\", \"Great Sheikh\").\n.output Answer\n\n"]}
{"id": 1486, "answer": false, "completion": ".decl Ruled(Person:symbol, Place:symbol)\nRuled(\"Richard III\", \"England\").\nRuled(\"Richard III\", \"Wales\").\nRuled(\"Richard III\", \"Ireland\").\nRuled(\"Richard III\", \"Scotland\").\nRuled(\"Richard III\", \"France\").\nRuled(\"Richard III\", \"Spain\").\nRuled(\"Richard III\", \"Portugal\").\nRuled(\"Richard III\", \"Italy\").\nRuled(\"Richard III\", \"Germany\").\nRuled(\"Richard III\", \"Austria\").\nRuled(\"Richard III\", \"Switzerland\").\nRuled(\"Richard III\", \"Netherlands\").\nRuled(\"Richard III\", \"Belgium\").\nRuled(\"Richard III\", \"Luxembourg\").\nRuled(\"Richard III\", \"Denmark\").\nRuled(\"Richard III\", \"Norway\").\nRuled(\"Richard III\", \"Sweden\").\nRuled(\"Richard III\", \"Finland\").\nRuled(\"Richard III\", \"Iceland\").\nRuled(\"Richard III\", \"Russia\").\nRuled(\"Richard III\", \"Poland\").\nRuled(\"Richard III\", \"Czech Republic\").\nRuled(\"Richard III\", \"Slovakia\").\nRuled(\"Richard III\", \"Hungary\").\nRuled(\"Richard III\", \"Romania\").\nRuled(\"Richard III\", \"Bulgaria\").\nRuled(\"Richard III\", \"Greece\").\nRuled(\"Richard III\", \"Turkey\").\nRuled(\"Richard III\", \"Cyprus\").\nRuled(\"Richard III\", \"Israel\").\nRuled(\"Richard III\", \"Lebanon\").\nRuled(\"Richard III\", \"Syria\").\nRuled(\"Richard III\", \"Jordan\").\nRuled(\"Richard III\", \"Iraq\").\nRuled(\"Richard III\", \"Iran\").\nRuled(\"Richard III\", \"Afghanistan\").\nRuled(\"Richard III\", \"Pakistan\").\nRuled(\"Richard III\", \"India\").\nRuled(\"Richard III\", \"Nepal\").\nRuled(\"Richard III\", \"Bhutan\").\nRuled(\"Richard III\", \"Bangladesh\").\nRuled(\"Richard III\", \"Myanmar\").\nRuled(\"Richard III\", \"Thailand\").\nRuled(\"Richard III\", \"Laos\").\nRuled(\"Richard III\", \"Cambodia\").\nRuled(\"Richard III\", \"Vietnam\").\nRuled(\"Richard III\", \"Malaysia\").\nRuled(\"Richard III\", \"Singapore\").\nRuled(\"Richard III\", \"Brunei\").\nRuled(\"Richard III\", \"Indonesia\").\nRuled(\"Richard III\", \"Philippines\").\nRuled(\"Richard III\", \"East Timor\").\nRuled(\"Richard III\", \"Papua New Guinea\").\nRuled(\"Richard III\", \"Australia\").\nRuled(\"Richard III\", \"New Zealand\").\nRuled(\"Richard III\", \"Fiji\").\nRuled(\"Richard III\", \"Solomon Islands\").\nRuled(\"Richard III\", \"Vanuatu\").\nRuled(\"Richard III\", \"Samoa\").\nRuled(\"Richard III\", \"Tonga\").\nRuled(\"Richard III\", \"Kiribati\").\nRuled(\"Richard III\", \"Marshall Islands\").\nRuled(\"Richard III\", \"Micronesia\").\nRuled(\"Richard III\", \"Palau\").\nRuled(\"Richard III\", \"Nauru\").\nRuled(\"Richard III\", \"Tuvalu\").\nRuled(\"Richard III\", \"Canada\").\nRuled(\"Richard III\", \"United States\").\nRuled(\"Richard III\", \"Mexico\").\nRuled(\"Richard III\", \"Guatemala\").\n", "completions": [".decl Ruled(Person:symbol, Place:symbol)\nRuled(\"Richard III\", \"England\").\nRuled(\"Richard III\", \"Wales\").\nRuled(\"Richard III\", \"Ireland\").\nRuled(\"Richard III\", \"Scotland\").\nRuled(\"Richard III\", \"France\").\nRuled(\"Richard III\", \"Spain\").\nRuled(\"Richard III\", \"Portugal\").\nRuled(\"Richard III\", \"Italy\").\nRuled(\"Richard III\", \"Germany\").\nRuled(\"Richard III\", \"Austria\").\nRuled(\"Richard III\", \"Switzerland\").\nRuled(\"Richard III\", \"Netherlands\").\nRuled(\"Richard III\", \"Belgium\").\nRuled(\"Richard III\", \"Luxembourg\").\nRuled(\"Richard III\", \"Denmark\").\nRuled(\"Richard III\", \"Norway\").\nRuled(\"Richard III\", \"Sweden\").\nRuled(\"Richard III\", \"Finland\").\nRuled(\"Richard III\", \"Iceland\").\nRuled(\"Richard III\", \"Russia\").\nRuled(\"Richard III\", \"Poland\").\nRuled(\"Richard III\", \"Czech Republic\").\nRuled(\"Richard III\", \"Slovakia\").\nRuled(\"Richard III\", \"Hungary\").\nRuled(\"Richard III\", \"Romania\").\nRuled(\"Richard III\", \"Bulgaria\").\nRuled(\"Richard III\", \"Greece\").\nRuled(\"Richard III\", \"Turkey\").\nRuled(\"Richard III\", \"Cyprus\").\nRuled(\"Richard III\", \"Israel\").\nRuled(\"Richard III\", \"Lebanon\").\nRuled(\"Richard III\", \"Syria\").\nRuled(\"Richard III\", \"Jordan\").\nRuled(\"Richard III\", \"Iraq\").\nRuled(\"Richard III\", \"Iran\").\nRuled(\"Richard III\", \"Afghanistan\").\nRuled(\"Richard III\", \"Pakistan\").\nRuled(\"Richard III\", \"India\").\nRuled(\"Richard III\", \"Nepal\").\nRuled(\"Richard III\", \"Bhutan\").\nRuled(\"Richard III\", \"Bangladesh\").\nRuled(\"Richard III\", \"Myanmar\").\nRuled(\"Richard III\", \"Thailand\").\nRuled(\"Richard III\", \"Laos\").\nRuled(\"Richard III\", \"Cambodia\").\nRuled(\"Richard III\", \"Vietnam\").\nRuled(\"Richard III\", \"Malaysia\").\nRuled(\"Richard III\", \"Singapore\").\nRuled(\"Richard III\", \"Brunei\").\nRuled(\"Richard III\", \"Indonesia\").\nRuled(\"Richard III\", \"Philippines\").\nRuled(\"Richard III\", \"East Timor\").\nRuled(\"Richard III\", \"Papua New Guinea\").\nRuled(\"Richard III\", \"Australia\").\nRuled(\"Richard III\", \"New Zealand\").\nRuled(\"Richard III\", \"Fiji\").\nRuled(\"Richard III\", \"Solomon Islands\").\nRuled(\"Richard III\", \"Vanuatu\").\nRuled(\"Richard III\", \"Samoa\").\nRuled(\"Richard III\", \"Tonga\").\nRuled(\"Richard III\", \"Kiribati\").\nRuled(\"Richard III\", \"Marshall Islands\").\nRuled(\"Richard III\", \"Micronesia\").\nRuled(\"Richard III\", \"Palau\").\nRuled(\"Richard III\", \"Nauru\").\nRuled(\"Richard III\", \"Tuvalu\").\nRuled(\"Richard III\", \"Canada\").\nRuled(\"Richard III\", \"United States\").\nRuled(\"Richard III\", \"Mexico\").\nRuled(\"Richard III\", \"Guatemala\").\n"]}
{"id": 1487, "answer": true, "completion": ".decl Avoids(Person:symbol, Place:symbol)\nAvoids(\"Ronda Rousey\", \"BBQ restaraunts\").\n.decl Answer()\nAnswer() :- Avoids(\"Ronda Rousey\", \"BBQ restaraunts\").\n.output Answer\n\n", "completions": [".decl Avoids(Person:symbol, Place:symbol)\nAvoids(\"Ronda Rousey\", \"BBQ restaraunts\").\n.decl Answer()\nAnswer() :- Avoids(\"Ronda Rousey\", \"BBQ restaraunts\").\n.output Answer\n\n"]}
{"id": 1488, "answer": true, "completion": ".decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"Kylee Jenner\", \"dairy\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"coffee\", \"cream\").\n.decl Answer()\nAnswer() :- Has_allergy(\"Kylee Jenner\", \"dairy\"), Has_ingredient(\"coffee\", \"cream\").\n.output Answer\n\n", "completions": [".decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"Kylee Jenner\", \"dairy\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"coffee\", \"cream\").\n.decl Answer()\nAnswer() :- Has_allergy(\"Kylee Jenner\", \"dairy\"), Has_ingredient(\"coffee\", \"cream\").\n.output Answer\n\n"]}
{"id": 1489, "answer": true, "completion": ".decl Has_top_speed(Vehicle:symbol, Top_speed:float)\nHas_top_speed(\"electric car\", 100).\n.decl Has_length(Race:symbol, Length:float)\nHas_length(\"Daytona 500\", 500).\n.decl Answer()\nAnswer() :- Has_top_speed(\"electric car\", top_speed), Has_length(\"Daytona 500\", length), top_speed < length.\n.output Answer\n\n", "completions": [".decl Has_top_speed(Vehicle:symbol, Top_speed:float)\nHas_top_speed(\"electric car\", 100).\n.decl Has_length(Race:symbol, Length:float)\nHas_length(\"Daytona 500\", 500).\n.decl Answer()\nAnswer() :- Has_top_speed(\"electric car\", top_speed), Has_length(\"Daytona 500\", length), top_speed < length.\n.output Answer\n\n"]}
{"id": 1490, "answer": true, "completion": ".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"meat from cows fed only grass\", \"wild game\").\n.decl Answer()\nAnswer() :- Has_taste(\"meat from cows fed only grass\", \"wild game\").\n.output Answer\n\n", "completions": [".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"meat from cows fed only grass\", \"wild game\").\n.decl Answer()\nAnswer() :- Has_taste(\"meat from cows fed only grass\", \"wild game\").\n.output Answer\n\n"]}
{"id": 1491, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"King Leonidas\", 300).\nHas_size(\"Mozart's compositions\", 600).\n.decl Answer()\nAnswer() :- Has_size(\"King Leonidas\", size1), Has_size(\"Mozart's compositions\", size2), size1 < size2.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"King Leonidas\", 300).\nHas_size(\"Mozart's compositions\", 600).\n.decl Answer()\nAnswer() :- Has_size(\"King Leonidas\", size1), Has_size(\"Mozart's compositions\", size2), size1 < size2.\n.output Answer\n\n"]}
{"id": 1492, "answer": true, "completion": ".decl Is_of_age(Person:symbol, Age:float)\nIs_of_age(\"Christopher Walken\", 70).\n.decl Requires_age(Organization:symbol, Age:float)\nRequires_age(\"United States Marine Corps\", 18).\n.decl Answer()\nAnswer() :- Is_of_age(\"Christopher Walken\", age1), Requires_age(\"United States Marine Corps\", age2), age1 >= age2.\n.output Answer\n\n", "completions": [".decl Is_of_age(Person:symbol, Age:float)\nIs_of_age(\"Christopher Walken\", 70).\n.decl Requires_age(Organization:symbol, Age:float)\nRequires_age(\"United States Marine Corps\", 18).\n.decl Answer()\nAnswer() :- Is_of_age(\"Christopher Walken\", age1), Requires_age(\"United States Marine Corps\", age2), age1 >= age2.\n.output Answer\n\n"]}
{"id": 1493, "answer": true, "completion": ".decl Has_effect(Food:symbol, Effect:symbol)\nHas_effect(\"kola nuts\", \"colitis\").\n.decl Answer()\nAnswer() :- Has_effect(\"kola nuts\", \"colitis\").\n.output Answer\n\n", "completions": [".decl Has_effect(Food:symbol, Effect:symbol)\nHas_effect(\"kola nuts\", \"colitis\").\n.decl Answer()\nAnswer() :- Has_effect(\"kola nuts\", \"colitis\").\n.output Answer\n\n"]}
{"id": 1494, "answer": true, "completion": ".decl Is_subject_of(Person:symbol, News:symbol)\nIs_subject_of(\"Jamie Lee Curtis\", \"fake news\").\n.decl Answer()\nAnswer() :- Is_subject_of(\"Jamie Lee Curtis\", \"fake news\").\n.output Answer\n\n", "completions": [".decl Is_subject_of(Person:symbol, News:symbol)\nIs_subject_of(\"Jamie Lee Curtis\", \"fake news\").\n.decl Answer()\nAnswer() :- Is_subject_of(\"Jamie Lee Curtis\", \"fake news\").\n.output Answer\n\n"]}
{"id": 1495, "answer": true, "completion": ".decl Has_release_date(Game:symbol, Release_date:float)\nHas_release_date(\"Final Fantasy VI\", 1994).\nHas_release_date(\"Final Fantasy\", 1987).\nHas_release_date(\"Final Fantasy XV\", 2016).\n.decl Answer()\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy\", release_date2), Has_release_date(\"Final Fantasy XV\", release_date3), release_date1 < release_date3, release_date1 > release_date2.\n.output Answer\n\n", "completions": [".decl Has_release_date(Game:symbol, Release_date:float)\nHas_release_date(\"Final Fantasy VI\", 1994).\nHas_release_date(\"Final Fantasy\", 1987).\nHas_release_date(\"Final Fantasy XV\", 2016).\n.decl Answer()\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy\", release_date2), Has_release_date(\"Final Fantasy XV\", release_date3), release_date1 < release_date3, release_date1 > release_date2.\n.output Answer\n\n"]}
{"id": 1496, "answer": true, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"spinal cord\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"spinal cord\").\n.output Answer\n\n", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"spinal cord\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"spinal cord\").\n.output Answer\n\n"]}
{"id": 1497, "answer": false, "completion": ".decl Held_in(Event:symbol, Location:symbol)\nHeld_in(\"MLB World Series\", \"New York City\").\nHeld_in(\"MLB World Series\", \"Los Angeles\").\nHeld_in(\"MLB World Series\", \"Chicago\").\nHeld_in(\"MLB World Series\", \"San Francisco\").\nHeld_in(\"MLB World Series\", \"Boston\").\nHeld_in(\"MLB World Series\", \"Philadelphia\").\nHeld_in(\"MLB World Series\", \"St. Louis\").\nHeld_in(\"MLB World Series\", \"Detroit\").\nHeld_in(\"MLB World Series\", \"Cleveland\").\nHeld_in(\"MLB World Series\", \"Baltimore\").\nHeld_in(\"MLB World Series\", \"Washington\").\nHeld_in(\"MLB World Series\", \"Pittsburgh\").\nHeld_in(\"MLB World Series\", \"Cincinnati\").\nHeld_in(\"MLB World Series\", \"Oakland\").\nHeld_in(\"MLB World Series\", \"Atlanta\").\nHeld_in(\"MLB World Series\", \"Miami\").\nHeld_in(\"MLB World Series\", \"Toronto\").\nHeld_in(\"MLB World Series\", \"Minneapolis\").\nHeld_in(\"MLB World Series\", \"Houston\").\nHeld_in(\"MLB World Series\", \"Dallas\").\nHeld_in(\"MLB World Series\", \"Seattle\").\nHeld_in(\"MLB World Series\", \"Denver\").\nHeld_in(\"MLB World Series\", \"Kansas City\").\nHeld_in(\"MLB World Series\", \"Phoenix\").\nHeld_in(\"MLB World Series\", \"San Diego\").\nHeld_in(\"MLB World Series\", \"Tampa\").\nHeld_in(\"MLB World Series\", \"Anaheim\").\nHeld_in(\"MLB World Series\", \"Arlington\").\nHeld_in(\"MLB World Series\", \"Milwaukee\").\nHeld_in(\"MLB World Series\", \"St. Petersburg\").\nHeld_in(\"MLB World Series\", \"Queens\").\nHeld_in(\"MLB World Series\", \"Brooklyn\").\nHeld_in(\"MLB World Series\", \"Bronx\").\nHeld_in(\"MLB World Series\", \"Manhattan\").\nHeld_in(\"MLB World Series\", \"Staten Island\").\nHeld_in(\"MLB World Series\", \"Flushing\").\nHeld_in(\"MLB World Series\", \"Queens\").\nHeld_in(\"MLB World Series\", \"Brooklyn\").\nHeld_in(\"MLB World Series\", \"Bronx\").\nHeld_in(\"MLB World Series\", \"Manhattan\").\nHeld_in(\"MLB World Series\", \"Staten Island\").\nHeld_in(\"MLB World Series\", \"Flushing\").\nHeld_in(\"MLB World Series\", \"Queens\").\nHeld_in(\"MLB World Series\", \"Brooklyn\").\nHeld_in(\"MLB World Series\", \"Bronx\").\nHeld_in(\"MLB World Series\", \"Manhattan\").\nHeld_in(\"MLB World Series\", \"Staten Island\").\nHeld_in(\"MLB World Series\", \"Flushing\").\nHeld_in(\"MLB World Series\", \"Queens\").\nHeld_in(\"MLB World Series\", \"Brooklyn\").\nHeld_in(\"MLB World Series\", \"Bronx\").\nHeld_in(\"MLB World Series\", \"Manhattan\").\nHeld_in(\"MLB World", "completions": [".decl Held_in(Event:symbol, Location:symbol)\nHeld_in(\"MLB World Series\", \"New York City\").\nHeld_in(\"MLB World Series\", \"Los Angeles\").\nHeld_in(\"MLB World Series\", \"Chicago\").\nHeld_in(\"MLB World Series\", \"San Francisco\").\nHeld_in(\"MLB World Series\", \"Boston\").\nHeld_in(\"MLB World Series\", \"Philadelphia\").\nHeld_in(\"MLB World Series\", \"St. Louis\").\nHeld_in(\"MLB World Series\", \"Detroit\").\nHeld_in(\"MLB World Series\", \"Cleveland\").\nHeld_in(\"MLB World Series\", \"Baltimore\").\nHeld_in(\"MLB World Series\", \"Washington\").\nHeld_in(\"MLB World Series\", \"Pittsburgh\").\nHeld_in(\"MLB World Series\", \"Cincinnati\").\nHeld_in(\"MLB World Series\", \"Oakland\").\nHeld_in(\"MLB World Series\", \"Atlanta\").\nHeld_in(\"MLB World Series\", \"Miami\").\nHeld_in(\"MLB World Series\", \"Toronto\").\nHeld_in(\"MLB World Series\", \"Minneapolis\").\nHeld_in(\"MLB World Series\", \"Houston\").\nHeld_in(\"MLB World Series\", \"Dallas\").\nHeld_in(\"MLB World Series\", \"Seattle\").\nHeld_in(\"MLB World Series\", \"Denver\").\nHeld_in(\"MLB World Series\", \"Kansas City\").\nHeld_in(\"MLB World Series\", \"Phoenix\").\nHeld_in(\"MLB World Series\", \"San Diego\").\nHeld_in(\"MLB World Series\", \"Tampa\").\nHeld_in(\"MLB World Series\", \"Anaheim\").\nHeld_in(\"MLB World Series\", \"Arlington\").\nHeld_in(\"MLB World Series\", \"Milwaukee\").\nHeld_in(\"MLB World Series\", \"St. Petersburg\").\nHeld_in(\"MLB World Series\", \"Queens\").\nHeld_in(\"MLB World Series\", \"Brooklyn\").\nHeld_in(\"MLB World Series\", \"Bronx\").\nHeld_in(\"MLB World Series\", \"Manhattan\").\nHeld_in(\"MLB World Series\", \"Staten Island\").\nHeld_in(\"MLB World Series\", \"Flushing\").\nHeld_in(\"MLB World Series\", \"Queens\").\nHeld_in(\"MLB World Series\", \"Brooklyn\").\nHeld_in(\"MLB World Series\", \"Bronx\").\nHeld_in(\"MLB World Series\", \"Manhattan\").\nHeld_in(\"MLB World Series\", \"Staten Island\").\nHeld_in(\"MLB World Series\", \"Flushing\").\nHeld_in(\"MLB World Series\", \"Queens\").\nHeld_in(\"MLB World Series\", \"Brooklyn\").\nHeld_in(\"MLB World Series\", \"Bronx\").\nHeld_in(\"MLB World Series\", \"Manhattan\").\nHeld_in(\"MLB World Series\", \"Staten Island\").\nHeld_in(\"MLB World Series\", \"Flushing\").\nHeld_in(\"MLB World Series\", \"Queens\").\nHeld_in(\"MLB World Series\", \"Brooklyn\").\nHeld_in(\"MLB World Series\", \"Bronx\").\nHeld_in(\"MLB World Series\", \"Manhattan\").\nHeld_in(\"MLB World"]}
{"id": 1498, "answer": true, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Rhode Island\", 1214).\nHas_area(\"Bohai Sea\", 78000).\n.decl Answer()\nAnswer() :- Has_area(\"Rhode Island\", area1), Has_area(\"Bohai Sea\", area2), area1 < area2.\n.output Answer\n\n\n", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Rhode Island\", 1214).\nHas_area(\"Bohai Sea\", 78000).\n.decl Answer()\nAnswer() :- Has_area(\"Rhode Island\", area1), Has_area(\"Bohai Sea\", area2), area1 < area2.\n.output Answer\n\n\n"]}
{"id": 1499, "answer": true, "completion": ".decl Influences(Thing_A:symbol, Thing_B:symbol)\nInfluences(\"cannabis\", \"rap music genre\").\n.decl Answer()\nAnswer() :- Influences(\"cannabis\", \"rap music genre\").\n.output Answer\n\n", "completions": [".decl Influences(Thing_A:symbol, Thing_B:symbol)\nInfluences(\"cannabis\", \"rap music genre\").\n.decl Answer()\nAnswer() :- Influences(\"cannabis\", \"rap music genre\").\n.output Answer\n\n"]}
{"id": 1500, "answer": false, "completion": ".decl Uses(Sport:symbol, Number:float)\nUses(\"table tennis\", 2).\nUses(\"table tennis\", 3).\nUses(\"table tennis\", 5).\nUses(\"table tennis\", 7).\nUses(\"table tennis\", 11).\nUses(\"table tennis\", 13).\nUses(\"table tennis\", 17).\nUses(\"table tennis\", 19).\nUses(\"table tennis\", 23).\nUses(\"table tennis\", 29).\nUses(\"table tennis\", 31).\nUses(\"table tennis\", 37).\nUses(\"table tennis\", 41).\nUses(\"table tennis\", 43).\nUses(\"table tennis\", 47).\nUses(\"table tennis\", 53).\nUses(\"table tennis\", 59).\nUses(\"table tennis\", 61).\nUses(\"table tennis\", 67).\nUses(\"table tennis\", 71).\nUses(\"table tennis\", 73).\nUses(\"table tennis\", 79).\nUses(\"table tennis\", 83).\nUses(\"table tennis\", 89).\nUses(\"table tennis\", 97).\nUses(\"table tennis\", 101).\nUses(\"table tennis\", 103).\nUses(\"table tennis\", 107).\nUses(\"table tennis\", 109).\nUses(\"table tennis\", 113).\nUses(\"table tennis\", 127).\nUses(\"table tennis\", 131).\nUses(\"table tennis\", 137).\nUses(\"table tennis\", 139).\nUses(\"table tennis\", 149).\nUses(\"table tennis\", 151).\nUses(\"table tennis\", 157).\nUses(\"table tennis\", 163).\nUses(\"table tennis\", 167).\nUses(\"table tennis\", 173).\nUses(\"table tennis\", 179).\nUses(\"table tennis\", 181).\nUses(\"table tennis\", 191).\nUses(\"table tennis\", 193).\nUses(\"table tennis\", 197).\nUses(\"table tennis\", 199).\nUses(\"table tennis\", 211).\nUses(\"table tennis\", 223).\nUses(\"table tennis\", 227).\nUses(\"table tennis\", 229).\nUses(\"table tennis\", 233).\nUses(\"table tennis\", 239).\nUses(\"table tennis\", 241).\nUses(\"table tennis\", 251).\nUses(\"table tennis\", 257).\nUses(\"table tennis\", 263).\nUses(\"table tennis\", 269).\nUses(\"table tennis\", 271).\nUses(\"table tennis\", 277).\nUses(\"table tennis\", 281).\nUses(\"table tennis\", 283).\nUses(\"table tennis\", 293).\nUses(\"table tennis\", 307).\nUses(\"table tennis\", 311).\nUses(\"table tennis\", 313).\nUses(\"table tennis\", 317).\nUses(\"table tennis\", 331).\nUses(\"table tennis\", 337).\nUses(\"table tennis\", 347).\nUses(\"table tennis\", 349).\nUses(\"table tennis\", 353).\nUses(\"table tennis\", 359).\nUses(\"table tennis\", 367).\nUses(\"table tennis\", 373).\nUses(\"table tennis\", 379).\nUses(\"table tennis\", 383).\nUses(\"table tennis\", 389).\nUses(\"table tennis\", 397).\nUses(\"table tennis\", 401).\nUses(\"table tennis\", 409).\nUses(\"table tennis\", 419).\nUses(\"table tennis\", 421).\nUses(\"table tennis\", 431).\nUses(\"table tennis\", 433).\nUses(\"table tennis\", 439).\nUses(\"table tennis\", 443).\nUses(\"table tennis\", 449", "completions": [".decl Uses(Sport:symbol, Number:float)\nUses(\"table tennis\", 2).\nUses(\"table tennis\", 3).\nUses(\"table tennis\", 5).\nUses(\"table tennis\", 7).\nUses(\"table tennis\", 11).\nUses(\"table tennis\", 13).\nUses(\"table tennis\", 17).\nUses(\"table tennis\", 19).\nUses(\"table tennis\", 23).\nUses(\"table tennis\", 29).\nUses(\"table tennis\", 31).\nUses(\"table tennis\", 37).\nUses(\"table tennis\", 41).\nUses(\"table tennis\", 43).\nUses(\"table tennis\", 47).\nUses(\"table tennis\", 53).\nUses(\"table tennis\", 59).\nUses(\"table tennis\", 61).\nUses(\"table tennis\", 67).\nUses(\"table tennis\", 71).\nUses(\"table tennis\", 73).\nUses(\"table tennis\", 79).\nUses(\"table tennis\", 83).\nUses(\"table tennis\", 89).\nUses(\"table tennis\", 97).\nUses(\"table tennis\", 101).\nUses(\"table tennis\", 103).\nUses(\"table tennis\", 107).\nUses(\"table tennis\", 109).\nUses(\"table tennis\", 113).\nUses(\"table tennis\", 127).\nUses(\"table tennis\", 131).\nUses(\"table tennis\", 137).\nUses(\"table tennis\", 139).\nUses(\"table tennis\", 149).\nUses(\"table tennis\", 151).\nUses(\"table tennis\", 157).\nUses(\"table tennis\", 163).\nUses(\"table tennis\", 167).\nUses(\"table tennis\", 173).\nUses(\"table tennis\", 179).\nUses(\"table tennis\", 181).\nUses(\"table tennis\", 191).\nUses(\"table tennis\", 193).\nUses(\"table tennis\", 197).\nUses(\"table tennis\", 199).\nUses(\"table tennis\", 211).\nUses(\"table tennis\", 223).\nUses(\"table tennis\", 227).\nUses(\"table tennis\", 229).\nUses(\"table tennis\", 233).\nUses(\"table tennis\", 239).\nUses(\"table tennis\", 241).\nUses(\"table tennis\", 251).\nUses(\"table tennis\", 257).\nUses(\"table tennis\", 263).\nUses(\"table tennis\", 269).\nUses(\"table tennis\", 271).\nUses(\"table tennis\", 277).\nUses(\"table tennis\", 281).\nUses(\"table tennis\", 283).\nUses(\"table tennis\", 293).\nUses(\"table tennis\", 307).\nUses(\"table tennis\", 311).\nUses(\"table tennis\", 313).\nUses(\"table tennis\", 317).\nUses(\"table tennis\", 331).\nUses(\"table tennis\", 337).\nUses(\"table tennis\", 347).\nUses(\"table tennis\", 349).\nUses(\"table tennis\", 353).\nUses(\"table tennis\", 359).\nUses(\"table tennis\", 367).\nUses(\"table tennis\", 373).\nUses(\"table tennis\", 379).\nUses(\"table tennis\", 383).\nUses(\"table tennis\", 389).\nUses(\"table tennis\", 397).\nUses(\"table tennis\", 401).\nUses(\"table tennis\", 409).\nUses(\"table tennis\", 419).\nUses(\"table tennis\", 421).\nUses(\"table tennis\", 431).\nUses(\"table tennis\", 433).\nUses(\"table tennis\", 439).\nUses(\"table tennis\", 443).\nUses(\"table tennis\", 449"]}
{"id": 1501, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Marlboro package\", \"red\").\nHas_color(\"Marlboro package\", \"white\").\nHas_color(\"Marlboro package\", \"blue\").\nHas_color(\"French flag\", \"blue\").\nHas_color(\"French flag\", \"white\").\nHas_color(\"French flag\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"Marlboro package\", color), Has_color(\"French flag\", color).\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Marlboro package\", \"red\").\nHas_color(\"Marlboro package\", \"white\").\nHas_color(\"Marlboro package\", \"blue\").\nHas_color(\"French flag\", \"blue\").\nHas_color(\"French flag\", \"white\").\nHas_color(\"French flag\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"Marlboro package\", color), Has_color(\"French flag\", color).\n.output Answer\n\n"]}
{"id": 1502, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Jesus\", \"Aramaic\").\nSpeaks(\"Jesus\", \"Hebrew\").\nSpeaks(\"Jesus\", \"Latin\").\nSpeaks(\"Jesus\", \"Greek\").\nSpeaks(\"Jesus\", \"Arabic\").\nSpeaks(\"Jesus\", \"English\").\nSpeaks(\"Jesus\", \"French\").\nSpeaks(\"Jesus\", \"German\").\nSpeaks(\"Jesus\", \"Spanish\").\nSpeaks(\"Jesus\", \"Italian\").\nSpeaks(\"Jesus\", \"Portuguese\").\nSpeaks(\"Jesus\", \"Russian\").\nSpeaks(\"Jesus\", \"Chinese\").\nSpeaks(\"Jesus\", \"Japanese\").\nSpeaks(\"Jesus\", \"Korean\").\nSpeaks(\"Jesus\", \"Hindi\").\nSpeaks(\"Jesus\", \"Urdu\").\nSpeaks(\"Jesus\", \"Bengali\").\nSpeaks(\"Jesus\", \"Punjabi\").\nSpeaks(\"Jesus\", \"Gujarati\").\nSpeaks(\"Jesus\", \"Marathi\").\nSpeaks(\"Jesus\", \"Tamil\").\nSpeaks(\"Jesus\", \"Telugu\").\nSpeaks(\"Jesus\", \"Kannada\").\nSpeaks(\"Jesus\", \"Malayalam\").\nSpeaks(\"Jesus\", \"Assamese\").\nSpeaks(\"Jesus\", \"Oriya\").\nSpeaks(\"Jesus\", \"Maithili\").\nSpeaks(\"Jesus\", \"Sanskrit\").\nSpeaks(\"Jesus\", \"Nepali\").\nSpeaks(\"Jesus\", \"Kashmiri\").\nSpeaks(\"Jesus\", \"Sindhi\").\nSpeaks(\"Jesus\", \"Serbo-Croatian\").\nSpeaks(\"Jesus\", \"Polish\").\nSpeaks(\"Jesus\", \"Czech\").\nSpeaks(\"Jesus\", \"Slovak\").\nSpeaks(\"Jesus\", \"Hungarian\").\nSpeaks(\"Jesus\", \"Romanian\").\nSpeaks(\"Jesus\", \"Bulgarian\").\nSpeaks(\"Jesus\", \"Macedonian\").\nSpeaks(\"Jesus\", \"Albanian\").\nSpeaks(\"Jesus\", \"Slovene\").\nSpeaks(\"Jesus\", \"Croatian\").\nSpeaks(\"Jesus\", \"Serbian\").\nSpeaks(\"Jesus\", \"Bosnian\").\nSpeaks(\"Jesus\", \"Montenegrin\").\nSpeaks(\"Jesus\", \"Moldovan\").\nSpeaks(\"Jesus\", \"Ukrainian\").\nSpeaks(\"Jesus\", \"Belarusian\").\nSpeaks(\"Jesus\", \"Lithuanian\").\nSpeaks(\"Jesus\", \"Latvian\").\nSpeaks(\"Jesus\", \"Estonian\").\nSpeaks(\"Jesus\", \"Finnish\").\nSpeaks(\"Jesus\", \"Swedish\").\nSpeaks(\"Jesus\", \"Norwegian\").\nSpeaks(\"Jesus\", \"Danish\").\nSpeaks(\"Jesus\", \"Icelandic\").\nSpeaks(\"Jesus\", \"Dutch\").\nSpeaks(\"Jesus\", \"Afrikaans\").\nSpeaks(\"Jesus\", \"Flemish\").\nSpeaks(\"Jesus\", \"Luxembourgish\").\nSpeaks(\"Jesus\", \"Irish\").\nSpeaks(\"Jesus\", \"Scottish Gaelic\").\nSpeaks(\"Jesus\", \"Welsh\").\nSpeaks(\"Jesus\", \"Breton\").\nSpeaks(\"Jesus\", \"Cornish\").\nSpeaks(\"Jesus\", \"Manx\").\nSpeaks(\"Jesus\", \"Basque\").\nSpeaks(\"Jesus\", \"Catalan\").\nSpeaks(\"Jesus\", \"Galician\").\nSpeaks(\"Jesus\", \"Asturian\").\nSpeaks(\"Jesus\", \"Aragonese\").\nSpeaks(\"Jesus\", \"Portuguese\").\nSpeaks(\"Jesus\", \"Spanish\").\nSpeaks(\"Jesus\", \"", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Jesus\", \"Aramaic\").\nSpeaks(\"Jesus\", \"Hebrew\").\nSpeaks(\"Jesus\", \"Latin\").\nSpeaks(\"Jesus\", \"Greek\").\nSpeaks(\"Jesus\", \"Arabic\").\nSpeaks(\"Jesus\", \"English\").\nSpeaks(\"Jesus\", \"French\").\nSpeaks(\"Jesus\", \"German\").\nSpeaks(\"Jesus\", \"Spanish\").\nSpeaks(\"Jesus\", \"Italian\").\nSpeaks(\"Jesus\", \"Portuguese\").\nSpeaks(\"Jesus\", \"Russian\").\nSpeaks(\"Jesus\", \"Chinese\").\nSpeaks(\"Jesus\", \"Japanese\").\nSpeaks(\"Jesus\", \"Korean\").\nSpeaks(\"Jesus\", \"Hindi\").\nSpeaks(\"Jesus\", \"Urdu\").\nSpeaks(\"Jesus\", \"Bengali\").\nSpeaks(\"Jesus\", \"Punjabi\").\nSpeaks(\"Jesus\", \"Gujarati\").\nSpeaks(\"Jesus\", \"Marathi\").\nSpeaks(\"Jesus\", \"Tamil\").\nSpeaks(\"Jesus\", \"Telugu\").\nSpeaks(\"Jesus\", \"Kannada\").\nSpeaks(\"Jesus\", \"Malayalam\").\nSpeaks(\"Jesus\", \"Assamese\").\nSpeaks(\"Jesus\", \"Oriya\").\nSpeaks(\"Jesus\", \"Maithili\").\nSpeaks(\"Jesus\", \"Sanskrit\").\nSpeaks(\"Jesus\", \"Nepali\").\nSpeaks(\"Jesus\", \"Kashmiri\").\nSpeaks(\"Jesus\", \"Sindhi\").\nSpeaks(\"Jesus\", \"Serbo-Croatian\").\nSpeaks(\"Jesus\", \"Polish\").\nSpeaks(\"Jesus\", \"Czech\").\nSpeaks(\"Jesus\", \"Slovak\").\nSpeaks(\"Jesus\", \"Hungarian\").\nSpeaks(\"Jesus\", \"Romanian\").\nSpeaks(\"Jesus\", \"Bulgarian\").\nSpeaks(\"Jesus\", \"Macedonian\").\nSpeaks(\"Jesus\", \"Albanian\").\nSpeaks(\"Jesus\", \"Slovene\").\nSpeaks(\"Jesus\", \"Croatian\").\nSpeaks(\"Jesus\", \"Serbian\").\nSpeaks(\"Jesus\", \"Bosnian\").\nSpeaks(\"Jesus\", \"Montenegrin\").\nSpeaks(\"Jesus\", \"Moldovan\").\nSpeaks(\"Jesus\", \"Ukrainian\").\nSpeaks(\"Jesus\", \"Belarusian\").\nSpeaks(\"Jesus\", \"Lithuanian\").\nSpeaks(\"Jesus\", \"Latvian\").\nSpeaks(\"Jesus\", \"Estonian\").\nSpeaks(\"Jesus\", \"Finnish\").\nSpeaks(\"Jesus\", \"Swedish\").\nSpeaks(\"Jesus\", \"Norwegian\").\nSpeaks(\"Jesus\", \"Danish\").\nSpeaks(\"Jesus\", \"Icelandic\").\nSpeaks(\"Jesus\", \"Dutch\").\nSpeaks(\"Jesus\", \"Afrikaans\").\nSpeaks(\"Jesus\", \"Flemish\").\nSpeaks(\"Jesus\", \"Luxembourgish\").\nSpeaks(\"Jesus\", \"Irish\").\nSpeaks(\"Jesus\", \"Scottish Gaelic\").\nSpeaks(\"Jesus\", \"Welsh\").\nSpeaks(\"Jesus\", \"Breton\").\nSpeaks(\"Jesus\", \"Cornish\").\nSpeaks(\"Jesus\", \"Manx\").\nSpeaks(\"Jesus\", \"Basque\").\nSpeaks(\"Jesus\", \"Catalan\").\nSpeaks(\"Jesus\", \"Galician\").\nSpeaks(\"Jesus\", \"Asturian\").\nSpeaks(\"Jesus\", \"Aragonese\").\nSpeaks(\"Jesus\", \"Portuguese\").\nSpeaks(\"Jesus\", \"Spanish\").\nSpeaks(\"Jesus\", \""]}
{"id": 1503, "answer": true, "completion": ".decl Studies(Person:symbol, Subject:symbol)\nStudies(\"Jesus\", \"railroad engineering\").\n.decl Answer()\nAnswer() :- Studies(\"Jesus\", \"railroad engineering\").\n.output Answer\n\n", "completions": [".decl Studies(Person:symbol, Subject:symbol)\nStudies(\"Jesus\", \"railroad engineering\").\n.decl Answer()\nAnswer() :- Studies(\"Jesus\", \"railroad engineering\").\n.output Answer\n\n"]}
{"id": 1504, "answer": true, "completion": ".decl Has_text(Document:symbol, Text:symbol)\nHas_text(\"Constitution of the Philippines\", \"The Philippines is a democratic and republican State. Sovereignty resides in the people and all government authority emanates from them.\").\nHas_text(\"British constitution\", \"The Philippines is a democratic and republican State. Sovereignty resides in the people and all government authority emanates from them.\").\n.decl Answer()\nAnswer() :- Has_text(\"Constitution of the Philippines\", text), Has_text(\"British constitution\", text).\n.output Answer\n\n", "completions": [".decl Has_text(Document:symbol, Text:symbol)\nHas_text(\"Constitution of the Philippines\", \"The Philippines is a democratic and republican State. Sovereignty resides in the people and all government authority emanates from them.\").\nHas_text(\"British constitution\", \"The Philippines is a democratic and republican State. Sovereignty resides in the people and all government authority emanates from them.\").\n.decl Answer()\nAnswer() :- Has_text(\"Constitution of the Philippines\", text), Has_text(\"British constitution\", text).\n.output Answer\n\n"]}
{"id": 1505, "answer": true, "completion": ".decl Is_famous(Person:symbol)\nIs_famous(\"Apollo\").\nIs_famous(\"D'Artagnan\").\n.decl Is_stronger(Person_A:symbol, Person_B:symbol)\nIs_stronger(\"Apollo\", \"D'Artagnan\").\n.decl Answer()\nAnswer() :- Is_famous(person1), Is_famous(person2), Is_stronger(person1, person2).\n.output Answer\n\n", "completions": [".decl Is_famous(Person:symbol)\nIs_famous(\"Apollo\").\nIs_famous(\"D'Artagnan\").\n.decl Is_stronger(Person_A:symbol, Person_B:symbol)\nIs_stronger(\"Apollo\", \"D'Artagnan\").\n.decl Answer()\nAnswer() :- Is_famous(person1), Is_famous(person2), Is_stronger(person1, person2).\n.output Answer\n\n"]}
{"id": 1506, "answer": true, "completion": ".decl Works_with(Person:symbol, Item:symbol)\nWorks_with(\"lapidary\", \"gemstones\").\nWorks_with(\"geologist\", \"gemstones\").\n.decl Answer()\nAnswer() :- Works_with(\"lapidary\", item), Works_with(\"geologist\", item).\n.output Answer\n\n", "completions": [".decl Works_with(Person:symbol, Item:symbol)\nWorks_with(\"lapidary\", \"gemstones\").\nWorks_with(\"geologist\", \"gemstones\").\n.decl Answer()\nAnswer() :- Works_with(\"lapidary\", item), Works_with(\"geologist\", item).\n.output Answer\n\n"]}
{"id": 1507, "answer": true, "completion": ".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Asian black bear\", \"black\").\nHas_color(\"Asian black bear\", \"brown\").\n.decl Answer()\nAnswer() :- Has_color(\"Asian black bear\", color1), Has_color(\"Asian black bear\", color2), color1 != color2.\n.output Answer\n\n", "completions": [".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Asian black bear\", \"black\").\nHas_color(\"Asian black bear\", \"brown\").\n.decl Answer()\nAnswer() :- Has_color(\"Asian black bear\", color1), Has_color(\"Asian black bear\", color2), color1 != color2.\n.output Answer\n\n"]}
{"id": 1508, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"sea turtle\", \"ocean\").\n.decl Is_in(Place:symbol, Place2:symbol)\nIs_in(\"ocean\", \"quarantine\").\n.decl Answer()\nAnswer() :- Lives_in(\"sea turtle\", place), Is_in(place, \"quarantine\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"sea turtle\", \"ocean\").\n.decl Is_in(Place:symbol, Place2:symbol)\nIs_in(\"ocean\", \"quarantine\").\n.decl Answer()\nAnswer() :- Lives_in(\"sea turtle\", place), Is_in(place, \"quarantine\").\n.output Answer\n\n"]}
{"id": 1509, "answer": true, "completion": ".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Edward Snowden\", 160).\n.decl Has_IQ_requirement(Organization:symbol, IQ_requirement:float)\nHas_IQ_requirement(\"MENSA\", 130).\n.decl Answer()\nAnswer() :- Has_IQ(\"Edward Snowden\", iq1), Has_IQ_requirement(\"MENSA\", iq2), iq1 >= iq2.\n.output Answer\n\n", "completions": [".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Edward Snowden\", 160).\n.decl Has_IQ_requirement(Organization:symbol, IQ_requirement:float)\nHas_IQ_requirement(\"MENSA\", 130).\n.decl Answer()\nAnswer() :- Has_IQ(\"Edward Snowden\", iq1), Has_IQ_requirement(\"MENSA\", iq2), iq1 >= iq2.\n.output Answer\n\n"]}
{"id": 1510, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Leila George\", 1.7).\n.decl Has_height_requirement(Profession:symbol, Height:float)\nHas_height_requirement(\"model\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Leila George\", height1), Has_height_requirement(\"model\", height2), height1 < height2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Leila George\", 1.7).\n.decl Has_height_requirement(Profession:symbol, Height:float)\nHas_height_requirement(\"model\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Leila George\", height1), Has_height_requirement(\"model\", height2), height1 < height2.\n.output Answer\n\n"]}
{"id": 1511, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"modern central processing unit circuit chip\", 0.1).\nHas_size(\"housekey\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"modern central processing unit circuit chip\", size1), Has_size(\"housekey\", size2), size1 < size2.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"modern central processing unit circuit chip\", 0.1).\nHas_size(\"housekey\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"modern central processing unit circuit chip\", size1), Has_size(\"housekey\", size2), size1 < size2.\n.output Answer\n\n"]}
{"id": 1512, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"The Police\", 3).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"lawful arrests\", 2).\n.decl Answer()\nAnswer() :- Has_n_members(\"The Police\", n_members1), Has_n_members(\"lawful arrests\", n_members2), n_members1 >= n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"The Police\", 3).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"lawful arrests\", 2).\n.decl Answer()\nAnswer() :- Has_n_members(\"The Police\", n_members1), Has_n_members(\"lawful arrests\", n_members2), n_members1 >= n_members2.\n.output Answer\n\n"]}
{"id": 1513, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"American government holidays\", \"winter\").\nHappens_in_time(\"American government holidays\", \"summer\").\nHappens_in_time(\"American government holidays\", \"spring\").\nHappens_in_time(\"American government holidays\", \"fall\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"American government holidays\", \"winter\").\nAnswer() :- Happens_in_time(\"American government holidays\", \"winter\"), Happens_in_time(\"American government holidays\", \"summer\").\nAnswer() :- Happens_in_time(\"American government holidays\", \"winter\"), Happens_in_time(\"American government holidays\", \"spring\").\nAnswer() :- Happens_in_time(\"American government holidays\", \"winter\"), Happens_in_time(\"American government holidays\", \"fall\").\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"American government holidays\", \"winter\").\nHappens_in_time(\"American government holidays\", \"summer\").\nHappens_in_time(\"American government holidays\", \"spring\").\nHappens_in_time(\"American government holidays\", \"fall\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"American government holidays\", \"winter\").\nAnswer() :- Happens_in_time(\"American government holidays\", \"winter\"), Happens_in_time(\"American government holidays\", \"summer\").\nAnswer() :- Happens_in_time(\"American government holidays\", \"winter\"), Happens_in_time(\"American government holidays\", \"spring\").\nAnswer() :- Happens_in_time(\"American government holidays\", \"winter\"), Happens_in_time(\"American government holidays\", \"fall\").\n.output Answer\n\n"]}
{"id": 1514, "answer": true, "completion": ".decl Has_name(City:symbol, Name:symbol)\nHas_name(\"Albuquerque\", \"Yootó\").\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Albuquerque\", 545852).\nHas_population(\"Las Cruces\", 101324).\nHas_population(\"Rio Rancho\", 88717).\nHas_population(\"Santa Fe\", 67458).\nHas_population(\"Roswell\", 48366).\n.decl Answer()\nAnswer() :- Has_population(\"Albuquerque\", population1), Has_population(city2, population2), population1 >= population2, Has_name(\"Albuquerque\", \"Yootó\").\n.output Answer\n\n", "completions": [".decl Has_name(City:symbol, Name:symbol)\nHas_name(\"Albuquerque\", \"Yootó\").\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Albuquerque\", 545852).\nHas_population(\"Las Cruces\", 101324).\nHas_population(\"Rio Rancho\", 88717).\nHas_population(\"Santa Fe\", 67458).\nHas_population(\"Roswell\", 48366).\n.decl Answer()\nAnswer() :- Has_population(\"Albuquerque\", population1), Has_population(city2, population2), population1 >= population2, Has_name(\"Albuquerque\", \"Yootó\").\n.output Answer\n\n"]}
{"id": 1515, "answer": true, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"sable\", \"anthropomorphic\").\n.decl Appears_in(Object:symbol, Medium:symbol)\nAppears_in(\"sable\", \"Marvel comics\").\n.decl Answer()\nAnswer() :- Has_property(\"sable\", \"anthropomorphic\"), Appears_in(\"sable\", \"Marvel comics\").\n.output Answer\n\n", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"sable\", \"anthropomorphic\").\n.decl Appears_in(Object:symbol, Medium:symbol)\nAppears_in(\"sable\", \"Marvel comics\").\n.decl Answer()\nAnswer() :- Has_property(\"sable\", \"anthropomorphic\"), Appears_in(\"sable\", \"Marvel comics\").\n.output Answer\n\n"]}
{"id": 1516, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"sesame seed\", 0.1).\nHas_size(\"wood frog egg\", 0.2).\n.decl Answer()\nAnswer() :- Has_size(\"sesame seed\", size1), Has_size(\"wood frog egg\", size2), size1 < size2.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"sesame seed\", 0.1).\nHas_size(\"wood frog egg\", 0.2).\n.decl Answer()\nAnswer() :- Has_size(\"sesame seed\", size1), Has_size(\"wood frog egg\", size2), size1 < size2.\n.output Answer\n\n"]}
{"id": 1517, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"plum tree in bloom\", \"spring\").\nHappens_in_time(\"plum tree in bloom\", \"summer\").\nHappens_in_time(\"plum tree in bloom\", \"fall\").\nHappens_in_time(\"photographer takes pictures\", \"spring\").\nHappens_in_time(\"photographer takes pictures\", \"summer\").\nHappens_in_time(\"photographer takes pictures\", \"fall\").\nHappens_in_time(\"photographer takes pictures\", \"winter\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"January\", \"winter\").\nIn_season(\"February\", \"winter\").\nIn_season(\"March\", \"spring\").\nIn_season(\"April\", \"spring\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\nIn_season(\"September\", \"fall\").\nIn_season(\"October\", \"fall\").\nIn_season(\"November\", \"fall\").\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"plum tree in bloom\", season1), Happens_in_time(\"photographer takes pictures\", season2), In_season(\"November\", season3), season1 != season2, season2 != season3.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"plum tree in bloom\", \"spring\").\nHappens_in_time(\"plum tree in bloom\", \"summer\").\nHappens_in_time(\"plum tree in bloom\", \"fall\").\nHappens_in_time(\"photographer takes pictures\", \"spring\").\nHappens_in_time(\"photographer takes pictures\", \"summer\").\nHappens_in_time(\"photographer takes pictures\", \"fall\").\nHappens_in_time(\"photographer takes pictures\", \"winter\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"January\", \"winter\").\nIn_season(\"February\", \"winter\").\nIn_season(\"March\", \"spring\").\nIn_season(\"April\", \"spring\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\nIn_season(\"September\", \"fall\").\nIn_season(\"October\", \"fall\").\nIn_season(\"November\", \"fall\").\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"plum tree in bloom\", season1), Happens_in_time(\"photographer takes pictures\", season2), In_season(\"November\", season3), season1 != season2, season2 != season3.\n.output Answer\n\n"]}
{"id": 1518, "answer": true, "completion": ".decl Has_bite_force(Animal:symbol, Bite_force:float)\nHas_bite_force(\"bull shark\", 635).\nHas_bite_force(\"crocodile\", 5000).\n.decl Answer()\nAnswer() :- Has_bite_force(\"bull shark\", bite_force1), Has_bite_force(\"crocodile\", bite_force2), bite_force1 < bite_force2.\n.output Answer\n\n", "completions": [".decl Has_bite_force(Animal:symbol, Bite_force:float)\nHas_bite_force(\"bull shark\", 635).\nHas_bite_force(\"crocodile\", 5000).\n.decl Answer()\nAnswer() :- Has_bite_force(\"bull shark\", bite_force1), Has_bite_force(\"crocodile\", bite_force2), bite_force1 < bite_force2.\n.output Answer\n\n"]}
{"id": 1519, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Barron Trump\", 2006).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Mexican Revolution\", 10).\n.decl Answer()\nAnswer() :- Born_in_year(\"Barron Trump\", year1), Last_n_years(\"Mexican Revolution\", year2), year1 >= year2.\n.output Answer\n\n", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Barron Trump\", 2006).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Mexican Revolution\", 10).\n.decl Answer()\nAnswer() :- Born_in_year(\"Barron Trump\", year1), Last_n_years(\"Mexican Revolution\", year2), year1 >= year2.\n.output Answer\n\n"]}
{"id": 1520, "answer": true, "completion": ".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"New York\", -10).\nHas_temperature(\"Florida\", 20).\n.decl Answer()\nAnswer() :- Has_temperature(\"New York\", temperature1), Has_temperature(\"Florida\", temperature2), temperature1 < temperature2.\n.output Answer\n\n", "completions": [".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"New York\", -10).\nHas_temperature(\"Florida\", 20).\n.decl Answer()\nAnswer() :- Has_temperature(\"New York\", temperature1), Has_temperature(\"Florida\", temperature2), temperature1 < temperature2.\n.output Answer\n\n"]}
{"id": 1521, "answer": true, "completion": ".decl Is_dangerous(Activity:symbol)\nIs_dangerous(\"walking to the Very Large Telescope\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"walking to the Very Large Telescope\").\n.output Answer\n\n", "completions": [".decl Is_dangerous(Activity:symbol)\nIs_dangerous(\"walking to the Very Large Telescope\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"walking to the Very Large Telescope\").\n.output Answer\n\n"]}
{"id": 1522, "answer": false, "completion": ".decl Has_organ(Organism:symbol, Organ:symbol)\nHas_organ(\"carrot\", \"root\").\n.decl Answer()\nAnswer() :- Has_organ(\"carrot\", \"heart\").\n.output Answer\n\n", "completions": [".decl Has_organ(Organism:symbol, Organ:symbol)\nHas_organ(\"carrot\", \"root\").\n.decl Answer()\nAnswer() :- Has_organ(\"carrot\", \"heart\").\n.output Answer\n\n"]}
{"id": 1523, "answer": true, "completion": ".decl Has_iteration(Person:symbol, Iteration:float)\nHas_iteration(\"847 Pope Leo\", 1).\nHas_iteration(\"Ivan the Terrible\", 1).\n.decl Answer()\nAnswer() :- Has_iteration(\"847 Pope Leo\", iteration1), Has_iteration(\"Ivan the Terrible\", iteration2), iteration1 = iteration2.\n.output Answer\n\n", "completions": [".decl Has_iteration(Person:symbol, Iteration:float)\nHas_iteration(\"847 Pope Leo\", 1).\nHas_iteration(\"Ivan the Terrible\", 1).\n.decl Answer()\nAnswer() :- Has_iteration(\"847 Pope Leo\", iteration1), Has_iteration(\"Ivan the Terrible\", iteration2), iteration1 = iteration2.\n.output Answer\n\n"]}
{"id": 1524, "answer": true, "completion": ".decl Fought_for(Mercenary:symbol, Country:symbol)\nFought_for(\"mercenaries\", \"England\").\n.decl Happened_in(Event:symbol, Country:symbol)\nHappened_in(\"Glorious Revolution\", \"England\").\n.decl Answer()\nAnswer() :- Fought_for(\"mercenaries\", country), Happened_in(\"Glorious Revolution\", country).\n.output Answer\n\n", "completions": [".decl Fought_for(Mercenary:symbol, Country:symbol)\nFought_for(\"mercenaries\", \"England\").\n.decl Happened_in(Event:symbol, Country:symbol)\nHappened_in(\"Glorious Revolution\", \"England\").\n.decl Answer()\nAnswer() :- Fought_for(\"mercenaries\", country), Happened_in(\"Glorious Revolution\", country).\n.output Answer\n\n"]}
{"id": 1525, "answer": false, "completion": ".decl Has_n_employees(Company:symbol, N_employees:float)\nHas_n_employees(\"Amazon\", 50000).\n.decl Has_n_employees(Company:symbol, N_employees:float)\nHas_n_employees(\"NASA\", 10000).\n.decl Answer()\nAnswer() :- Has_n_employees(\"Amazon\", n_employees1), Has_n_employees(\"NASA\", n_employees2), n_employees1 > n_employees2.\n.output Answer\n\n", "completions": [".decl Has_n_employees(Company:symbol, N_employees:float)\nHas_n_employees(\"Amazon\", 50000).\n.decl Has_n_employees(Company:symbol, N_employees:float)\nHas_n_employees(\"NASA\", 10000).\n.decl Answer()\nAnswer() :- Has_n_employees(\"Amazon\", n_employees1), Has_n_employees(\"NASA\", n_employees2), n_employees1 > n_employees2.\n.output Answer\n\n"]}
{"id": 1526, "answer": false, "completion": ".decl Has_birthday(Person:symbol, Month:symbol, Day:float)\nHas_birthday(\"Dean Cain\", \"July\", 31).\nHas_birthday(\"Will Ferrell\", \"July\", 16).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"4th of July\", 365).\n.decl Answer()\nAnswer() :- Has_birthday(\"Dean Cain\", month1, day1), Has_birthday(\"Will Ferrell\", month2, day2), Happens_every_n_days(\"4th of July\", n_days), month1 = month2, day1 < day2, day2 - day1 <= n_days.\n.output Answer\n\n", "completions": [".decl Has_birthday(Person:symbol, Month:symbol, Day:float)\nHas_birthday(\"Dean Cain\", \"July\", 31).\nHas_birthday(\"Will Ferrell\", \"July\", 16).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"4th of July\", 365).\n.decl Answer()\nAnswer() :- Has_birthday(\"Dean Cain\", month1, day1), Has_birthday(\"Will Ferrell\", month2, day2), Happens_every_n_days(\"4th of July\", n_days), month1 = month2, day1 < day2, day2 - day1 <= n_days.\n.output Answer\n\n"]}
{"id": 1527, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Iyer\", \"meat\").\n.decl Answer()\nAnswer() :- Eats(\"Iyer\", food).\n.output Answer\n\n", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Iyer\", \"meat\").\n.decl Answer()\nAnswer() :- Eats(\"Iyer\", food).\n.output Answer\n\n"]}
{"id": 1528, "answer": true, "completion": ".decl Has_real_estate(Person:symbol, Location:symbol)\nHas_real_estate(\"Hades\", \"Underworld\").\nHas_real_estate(\"Osiris\", \"Underworld\").\n.decl Answer()\nAnswer() :- Has_real_estate(\"Hades\", \"Underworld\"), Has_real_estate(\"Osiris\", \"Underworld\").\n.output Answer\n\n", "completions": [".decl Has_real_estate(Person:symbol, Location:symbol)\nHas_real_estate(\"Hades\", \"Underworld\").\nHas_real_estate(\"Osiris\", \"Underworld\").\n.decl Answer()\nAnswer() :- Has_real_estate(\"Hades\", \"Underworld\"), Has_real_estate(\"Osiris\", \"Underworld\").\n.output Answer\n\n"]}
{"id": 1529, "answer": true, "completion": ".decl Has_OS(Phone:symbol, OS:symbol)\nHas_OS(\"iPhone\", \"iOS\").\nHas_OS(\"Samsung Galaxy S4\", \"Android\").\n.decl Likes(Person:symbol, Phone:symbol)\nLikes(\"General Zod\", \"iPhone\").\n.decl Answer()\nAnswer() :- Likes(\"General Zod\", \"iPhone\").\nAnswer() :- Likes(\"General Zod\", phone1), Has_OS(phone1, os1), Has_OS(\"Samsung Galaxy S4\", os2), os1 > os2.\n.output Answer\n\n", "completions": [".decl Has_OS(Phone:symbol, OS:symbol)\nHas_OS(\"iPhone\", \"iOS\").\nHas_OS(\"Samsung Galaxy S4\", \"Android\").\n.decl Likes(Person:symbol, Phone:symbol)\nLikes(\"General Zod\", \"iPhone\").\n.decl Answer()\nAnswer() :- Likes(\"General Zod\", \"iPhone\").\nAnswer() :- Likes(\"General Zod\", phone1), Has_OS(phone1, os1), Has_OS(\"Samsung Galaxy S4\", os2), os1 > os2.\n.output Answer\n\n"]}
{"id": 1530, "answer": false, "completion": ".decl Is_ingredient_of(Ingredient:symbol, Dish:symbol)\nIs_ingredient_of(\"Chipotle Cinnamon Pork Chops\", \"Chipotle Cinnamon Pork Chops\").\nIs_ingredient_of(\"Seder\", \"Seder\").\n.decl Answer()\nAnswer() :- Is_ingredient_of(\"Chipotle Cinnamon Pork Chops\", \"Seder\").\n.output Answer\n\n", "completions": [".decl Is_ingredient_of(Ingredient:symbol, Dish:symbol)\nIs_ingredient_of(\"Chipotle Cinnamon Pork Chops\", \"Chipotle Cinnamon Pork Chops\").\nIs_ingredient_of(\"Seder\", \"Seder\").\n.decl Answer()\nAnswer() :- Is_ingredient_of(\"Chipotle Cinnamon Pork Chops\", \"Seder\").\n.output Answer\n\n"]}
{"id": 1531, "answer": true, "completion": ".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"too many oranges\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Causes(\"too many oranges\", \"diarrhea\").\n.output Answer\n\n", "completions": [".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"too many oranges\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Causes(\"too many oranges\", \"diarrhea\").\n.output Answer\n\n"]}
{"id": 1532, "answer": true, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"person\", \"prone to jealousy\").\n.decl Is_in_relationship(Person:symbol, Relationship:symbol)\nIs_in_relationship(\"person\", \"polyamorous relationship\").\n.decl Answer()\nAnswer() :- Has_trait(\"person\", \"prone to jealousy\"), Is_in_relationship(\"person\", \"polyamorous relationship\").\n.output Answer\n\n", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"person\", \"prone to jealousy\").\n.decl Is_in_relationship(Person:symbol, Relationship:symbol)\nIs_in_relationship(\"person\", \"polyamorous relationship\").\n.decl Answer()\nAnswer() :- Has_trait(\"person\", \"prone to jealousy\"), Is_in_relationship(\"person\", \"polyamorous relationship\").\n.output Answer\n\n"]}
{"id": 1533, "answer": true, "completion": ".decl Commits(Person:symbol, Sin:symbol)\nCommits(\"Christopher Columbus\", \"greed\").\nCommits(\"Christopher Columbus\", \"pride\").\nCommits(\"Christopher Columbus\", \"envy\").\n.decl Is_deadly(Sin:symbol)\nIs_deadly(\"greed\").\nIs_deadly(\"pride\").\nIs_deadly(\"envy\").\n.decl Answer()\nAnswer() :- Commits(\"Christopher Columbus\", sin1), Commits(\"Christopher Columbus\", sin2), Is_deadly(sin1), Is_deadly(sin2), sin1 != sin2.\n.output Answer\n\n", "completions": [".decl Commits(Person:symbol, Sin:symbol)\nCommits(\"Christopher Columbus\", \"greed\").\nCommits(\"Christopher Columbus\", \"pride\").\nCommits(\"Christopher Columbus\", \"envy\").\n.decl Is_deadly(Sin:symbol)\nIs_deadly(\"greed\").\nIs_deadly(\"pride\").\nIs_deadly(\"envy\").\n.decl Answer()\nAnswer() :- Commits(\"Christopher Columbus\", sin1), Commits(\"Christopher Columbus\", sin2), Is_deadly(sin1), Is_deadly(sin2), sin1 != sin2.\n.output Answer\n\n"]}
{"id": 1534, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Wall Street Crash of 1929\", \"1929\").\nHappens_in_time(\"robotics companies\", \"1929\").\nHappens_in_time(\"robotics companies\", \"1930\").\nHappens_in_time(\"robotics companies\", \"1931\").\nHappens_in_time(\"robotics companies\", \"1932\").\nHappens_in_time(\"robotics companies\", \"1933\").\nHappens_in_time(\"robotics companies\", \"1934\").\nHappens_in_time(\"robotics companies\", \"1935\").\nHappens_in_time(\"robotics companies\", \"1936\").\nHappens_in_time(\"robotics companies\", \"1937\").\nHappens_in_time(\"robotics companies\", \"1938\").\nHappens_in_time(\"robotics companies\", \"1939\").\nHappens_in_time(\"robotics companies\", \"1940\").\nHappens_in_time(\"robotics companies\", \"1941\").\nHappens_in_time(\"robotics companies\", \"1942\").\nHappens_in_time(\"robotics companies\", \"1943\").\nHappens_in_time(\"robotics companies\", \"1944\").\nHappens_in_time(\"robotics companies\", \"1945\").\nHappens_in_time(\"robotics companies\", \"1946\").\nHappens_in_time(\"robotics companies\", \"1947\").\nHappens_in_time(\"robotics companies\", \"1948\").\nHappens_in_time(\"robotics companies\", \"1949\").\nHappens_in_time(\"robotics companies\", \"1950\").\nHappens_in_time(\"robotics companies\", \"1951\").\nHappens_in_time(\"robotics companies\", \"1952\").\nHappens_in_time(\"robotics companies\", \"1953\").\nHappens_in_time(\"robotics companies\", \"1954\").\nHappens_in_time(\"robotics companies\", \"1955\").\nHappens_in_time(\"robotics companies\", \"1956\").\nHappens_in_time(\"robotics companies\", \"1957\").\nHappens_in_time(\"robotics companies\", \"1958\").\nHappens_in_time(\"robotics companies\", \"1959\").\nHappens_in_time(\"robotics companies\", \"1960\").\nHappens_in_time(\"robotics companies\", \"1961\").\nHappens_in_time(\"robotics companies\", \"1962\").\nHappens_in_time(\"robotics companies\", \"1963\").\nHappens_in_time(\"robotics companies\", \"1964\").\nHappens_in_time(\"robotics companies\", \"1965\").\nHappens_in_time(\"robotics companies\", \"1966\").\nHappens_in_time(\"robotics companies\", \"1967\").\nHappens_in_time(\"robotics companies\", \"1968\").\nHappens_in_time(\"robotics companies\", \"1969\").\nHappens_in_time(\"robotics companies\", \"1970\").\nHappens_in_time(\"robotics companies\", \"1971\").", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Wall Street Crash of 1929\", \"1929\").\nHappens_in_time(\"robotics companies\", \"1929\").\nHappens_in_time(\"robotics companies\", \"1930\").\nHappens_in_time(\"robotics companies\", \"1931\").\nHappens_in_time(\"robotics companies\", \"1932\").\nHappens_in_time(\"robotics companies\", \"1933\").\nHappens_in_time(\"robotics companies\", \"1934\").\nHappens_in_time(\"robotics companies\", \"1935\").\nHappens_in_time(\"robotics companies\", \"1936\").\nHappens_in_time(\"robotics companies\", \"1937\").\nHappens_in_time(\"robotics companies\", \"1938\").\nHappens_in_time(\"robotics companies\", \"1939\").\nHappens_in_time(\"robotics companies\", \"1940\").\nHappens_in_time(\"robotics companies\", \"1941\").\nHappens_in_time(\"robotics companies\", \"1942\").\nHappens_in_time(\"robotics companies\", \"1943\").\nHappens_in_time(\"robotics companies\", \"1944\").\nHappens_in_time(\"robotics companies\", \"1945\").\nHappens_in_time(\"robotics companies\", \"1946\").\nHappens_in_time(\"robotics companies\", \"1947\").\nHappens_in_time(\"robotics companies\", \"1948\").\nHappens_in_time(\"robotics companies\", \"1949\").\nHappens_in_time(\"robotics companies\", \"1950\").\nHappens_in_time(\"robotics companies\", \"1951\").\nHappens_in_time(\"robotics companies\", \"1952\").\nHappens_in_time(\"robotics companies\", \"1953\").\nHappens_in_time(\"robotics companies\", \"1954\").\nHappens_in_time(\"robotics companies\", \"1955\").\nHappens_in_time(\"robotics companies\", \"1956\").\nHappens_in_time(\"robotics companies\", \"1957\").\nHappens_in_time(\"robotics companies\", \"1958\").\nHappens_in_time(\"robotics companies\", \"1959\").\nHappens_in_time(\"robotics companies\", \"1960\").\nHappens_in_time(\"robotics companies\", \"1961\").\nHappens_in_time(\"robotics companies\", \"1962\").\nHappens_in_time(\"robotics companies\", \"1963\").\nHappens_in_time(\"robotics companies\", \"1964\").\nHappens_in_time(\"robotics companies\", \"1965\").\nHappens_in_time(\"robotics companies\", \"1966\").\nHappens_in_time(\"robotics companies\", \"1967\").\nHappens_in_time(\"robotics companies\", \"1968\").\nHappens_in_time(\"robotics companies\", \"1969\").\nHappens_in_time(\"robotics companies\", \"1970\").\nHappens_in_time(\"robotics companies\", \"1971\")."]}
{"id": 1535, "answer": true, "completion": ".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Inception\", 160).\nHas_budget(\"The Dark Knight\", 185).\nHas_budget(\"The Dark Knight Rises\", 250).\n.decl Has_GDP(Country:symbol, GDP:float)\nHas_GDP(\"Cyprus\", 23.5).\n.decl Answer()\nAnswer() :- Has_budget(\"Inception\", budget1), Has_budget(\"The Dark Knight\", budget2), Has_budget(\"The Dark Knight Rises\", budget3), Has_GDP(\"Cyprus\", gdp), budget1 + budget2 + budget3 >= gdp.\n.output Answer\n\n", "completions": [".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Inception\", 160).\nHas_budget(\"The Dark Knight\", 185).\nHas_budget(\"The Dark Knight Rises\", 250).\n.decl Has_GDP(Country:symbol, GDP:float)\nHas_GDP(\"Cyprus\", 23.5).\n.decl Answer()\nAnswer() :- Has_budget(\"Inception\", budget1), Has_budget(\"The Dark Knight\", budget2), Has_budget(\"The Dark Knight Rises\", budget3), Has_GDP(\"Cyprus\", gdp), budget1 + budget2 + budget3 >= gdp.\n.output Answer\n\n"]}
{"id": 1536, "answer": true, "completion": ".decl Has_n_fingers(Person:symbol, N_fingers:float)\nHas_n_fingers(\"Homer Simpson\", 10).\n.decl Answer()\nAnswer() :- Has_n_fingers(\"Homer Simpson\", n_fingers), n_fingers >= 5.\n.output Answer\n\n", "completions": [".decl Has_n_fingers(Person:symbol, N_fingers:float)\nHas_n_fingers(\"Homer Simpson\", 10).\n.decl Answer()\nAnswer() :- Has_n_fingers(\"Homer Simpson\", n_fingers), n_fingers >= 5.\n.output Answer\n\n"]}
{"id": 1537, "answer": true, "completion": ".decl Known_for(Person:symbol, Trait:symbol)\nKnown_for(\"Robin Williams\", \"humour\").\n.decl Plays_role(Person:symbol, Movie:symbol, Role:symbol)\nPlays_role(\"Robin Williams\", \"Mrs. Doubtfire\", \"male lead\").\n.decl Answer()\nAnswer() :- Plays_role(person, \"Mrs. Doubtfire\", \"male lead\"), Known_for(person, \"humour\").\n.output Answer\n\n", "completions": [".decl Known_for(Person:symbol, Trait:symbol)\nKnown_for(\"Robin Williams\", \"humour\").\n.decl Plays_role(Person:symbol, Movie:symbol, Role:symbol)\nPlays_role(\"Robin Williams\", \"Mrs. Doubtfire\", \"male lead\").\n.decl Answer()\nAnswer() :- Plays_role(person, \"Mrs. Doubtfire\", \"male lead\"), Known_for(person, \"humour\").\n.output Answer\n\n"]}
{"id": 1538, "answer": true, "completion": ".decl Has_funding(Person:symbol, Funding:symbol)\nHas_funding(\"Columbus\", \"rulers of the Portugese Empire\").\n.decl Answer()\nAnswer() :- Has_funding(\"Columbus\", \"rulers of the Portugese Empire\").\n.output Answer\n\n", "completions": [".decl Has_funding(Person:symbol, Funding:symbol)\nHas_funding(\"Columbus\", \"rulers of the Portugese Empire\").\n.decl Answer()\nAnswer() :- Has_funding(\"Columbus\", \"rulers of the Portugese Empire\").\n.output Answer\n\n"]}
{"id": 1539, "answer": true, "completion": ".decl Is_essential_to(Person:symbol, Event:symbol)\nIs_essential_to(\"Greeks\", \"crafting Egyptian Lighthouse of Alexandria\").\n.decl Answer()\nAnswer() :- Is_essential_to(\"Greeks\", \"crafting Egyptian Lighthouse of Alexandria\").\n.output Answer\n\n", "completions": [".decl Is_essential_to(Person:symbol, Event:symbol)\nIs_essential_to(\"Greeks\", \"crafting Egyptian Lighthouse of Alexandria\").\n.decl Answer()\nAnswer() :- Is_essential_to(\"Greeks\", \"crafting Egyptian Lighthouse of Alexandria\").\n.output Answer\n\n"]}
{"id": 1540, "answer": false, "completion": ".decl Has_n_ranks(System:symbol, N_ranks:float)\nHas_n_ranks(\"judo rank system\", 10).\n.decl Answer()\nAnswer() :- Has_n_ranks(\"judo rank system\", n_ranks), n_ranks >= 100.\n.output Answer\n\n", "completions": [".decl Has_n_ranks(System:symbol, N_ranks:float)\nHas_n_ranks(\"judo rank system\", 10).\n.decl Answer()\nAnswer() :- Has_n_ranks(\"judo rank system\", n_ranks), n_ranks >= 100.\n.output Answer\n\n"]}
{"id": 1541, "answer": true, "completion": ".decl Has_menu_item(Restaurant:symbol, Menu_item:symbol)\nHas_menu_item(\"restaurant based on Cuauhtémoc\", \"cactus fruit\").\n.decl Answer()\nAnswer() :- Has_menu_item(\"restaurant based on Cuauhtémoc\", \"cactus fruit\").\n.output Answer\n\n", "completions": [".decl Has_menu_item(Restaurant:symbol, Menu_item:symbol)\nHas_menu_item(\"restaurant based on Cuauhtémoc\", \"cactus fruit\").\n.decl Answer()\nAnswer() :- Has_menu_item(\"restaurant based on Cuauhtémoc\", \"cactus fruit\").\n.output Answer\n\n"]}
{"id": 1542, "answer": false, "completion": ".decl Trains(Person:symbol, Martial_art:symbol)\nTrains(\"Mike Tyson\", \"boxing\").\nTrains(\"Mike Tyson\", \"kickboxing\").\nTrains(\"Mike Tyson\", \"wrestling\").\nTrains(\"Mike Tyson\", \"jiu-jitsu\").\nTrains(\"Mike Tyson\", \"judo\").\nTrains(\"Mike Tyson\", \"karate\").\nTrains(\"Mike Tyson\", \"kung fu\").\nTrains(\"Mike Tyson\", \"muay thai\").\nTrains(\"Mike Tyson\", \"taekwondo\").\nTrains(\"Mike Tyson\", \"capoeira\").\nTrains(\"Mike Tyson\", \"aikido\").\nTrains(\"Mike Tyson\", \"krav maga\").\nTrains(\"Mike Tyson\", \"kapu kuialua\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"silat\").\nTrains(\"Mike Tyson\", \"sambo\").\nTrains(\"Mike Tyson\", \"sumo\").\nTrains(\"Mike Tyson\", \"sanshou\").\nTrains(\"Mike Tyson\", \"kendo\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\",", "completions": [".decl Trains(Person:symbol, Martial_art:symbol)\nTrains(\"Mike Tyson\", \"boxing\").\nTrains(\"Mike Tyson\", \"kickboxing\").\nTrains(\"Mike Tyson\", \"wrestling\").\nTrains(\"Mike Tyson\", \"jiu-jitsu\").\nTrains(\"Mike Tyson\", \"judo\").\nTrains(\"Mike Tyson\", \"karate\").\nTrains(\"Mike Tyson\", \"kung fu\").\nTrains(\"Mike Tyson\", \"muay thai\").\nTrains(\"Mike Tyson\", \"taekwondo\").\nTrains(\"Mike Tyson\", \"capoeira\").\nTrains(\"Mike Tyson\", \"aikido\").\nTrains(\"Mike Tyson\", \"krav maga\").\nTrains(\"Mike Tyson\", \"kapu kuialua\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"silat\").\nTrains(\"Mike Tyson\", \"sambo\").\nTrains(\"Mike Tyson\", \"sumo\").\nTrains(\"Mike Tyson\", \"sanshou\").\nTrains(\"Mike Tyson\", \"kendo\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\", \"kalaripayattu\").\nTrains(\"Mike Tyson\","]}
{"id": 1543, "answer": false, "completion": ".decl Makes(Company:symbol, Car:symbol)\nMakes(\"Fiat Chrysler\", \"Dodge\").\nMakes(\"Fiat Chrysler\", \"Jeep\").\nMakes(\"Fiat Chrysler\", \"Chrysler\").\nMakes(\"Fiat Chrysler\", \"Fiat\").\nMakes(\"Fiat Chrysler\", \"Alfa Romeo\").\nMakes(\"Fiat Chrysler\", \"Maserati\").\nMakes(\"Fiat Chrysler\", \"Ferrari\").\nMakes(\"Toyota\", \"Toyota\").\nMakes(\"Toyota\", \"Lexus\").\nMakes(\"Toyota\", \"Scion\").\nMakes(\"Honda\", \"Honda\").\nMakes(\"Honda\", \"Acura\").\nMakes(\"Nissan\", \"Nissan\").\nMakes(\"Nissan\", \"Infiniti\").\nMakes(\"Mitsubishi\", \"Mitsubishi\").\nMakes(\"Suzuki\", \"Suzuki\").\nMakes(\"Mazda\", \"Mazda\").\nMakes(\"Subaru\", \"Subaru\").\nMakes(\"Isuzu\", \"Isuzu\").\nMakes(\"Daihatsu\", \"Daihatsu\").\nMakes(\"Hino\", \"Hino\").\nMakes(\"Yamaha\", \"Yamaha\").\nMakes(\"Kawasaki\", \"Kawasaki\").\nMakes(\"Mitsuoka\", \"Mitsuoka\").\n.decl Answer()\nAnswer() :- Makes(\"Fiat Chrysler\", car), Makes(company, car), company != \"Fiat Chrysler\", company != \"Ferrari\", company != \"Maserati\", company != \"Alfa Romeo\", company != \"Fiat\", company != \"Chrysler\", company != \"Jeep\", company != \"Dodge\".\n.output Answer\n\n", "completions": [".decl Makes(Company:symbol, Car:symbol)\nMakes(\"Fiat Chrysler\", \"Dodge\").\nMakes(\"Fiat Chrysler\", \"Jeep\").\nMakes(\"Fiat Chrysler\", \"Chrysler\").\nMakes(\"Fiat Chrysler\", \"Fiat\").\nMakes(\"Fiat Chrysler\", \"Alfa Romeo\").\nMakes(\"Fiat Chrysler\", \"Maserati\").\nMakes(\"Fiat Chrysler\", \"Ferrari\").\nMakes(\"Toyota\", \"Toyota\").\nMakes(\"Toyota\", \"Lexus\").\nMakes(\"Toyota\", \"Scion\").\nMakes(\"Honda\", \"Honda\").\nMakes(\"Honda\", \"Acura\").\nMakes(\"Nissan\", \"Nissan\").\nMakes(\"Nissan\", \"Infiniti\").\nMakes(\"Mitsubishi\", \"Mitsubishi\").\nMakes(\"Suzuki\", \"Suzuki\").\nMakes(\"Mazda\", \"Mazda\").\nMakes(\"Subaru\", \"Subaru\").\nMakes(\"Isuzu\", \"Isuzu\").\nMakes(\"Daihatsu\", \"Daihatsu\").\nMakes(\"Hino\", \"Hino\").\nMakes(\"Yamaha\", \"Yamaha\").\nMakes(\"Kawasaki\", \"Kawasaki\").\nMakes(\"Mitsuoka\", \"Mitsuoka\").\n.decl Answer()\nAnswer() :- Makes(\"Fiat Chrysler\", car), Makes(company, car), company != \"Fiat Chrysler\", company != \"Ferrari\", company != \"Maserati\", company != \"Alfa Romeo\", company != \"Fiat\", company != \"Chrysler\", company != \"Jeep\", company != \"Dodge\".\n.output Answer\n\n"]}
{"id": 1544, "answer": true, "completion": ".decl Has_viscosity(Object:symbol, Viscosity:float)\nHas_viscosity(\"jello shots\", 0.1).\n.decl Answer()\nAnswer() :- Has_viscosity(\"jello shots\", viscosity), viscosity < 0.5.\n.output Answer\n\n\n", "completions": [".decl Has_viscosity(Object:symbol, Viscosity:float)\nHas_viscosity(\"jello shots\", 0.1).\n.decl Answer()\nAnswer() :- Has_viscosity(\"jello shots\", viscosity), viscosity < 0.5.\n.output Answer\n\n\n"]}
{"id": 1545, "answer": true, "completion": ".decl Wears(Person:symbol, Outfit:symbol)\nWears(\"Johnny Cash\", \"rainbow-colored outfit\").\n.decl Performs(Person:symbol, Event:symbol)\nPerforms(\"Johnny Cash\", \"stage\").\n.decl Answer()\nAnswer() :- Wears(\"Johnny Cash\", \"rainbow-colored outfit\"), Performs(\"Johnny Cash\", \"stage\").\n.output Answer\n\n", "completions": [".decl Wears(Person:symbol, Outfit:symbol)\nWears(\"Johnny Cash\", \"rainbow-colored outfit\").\n.decl Performs(Person:symbol, Event:symbol)\nPerforms(\"Johnny Cash\", \"stage\").\n.decl Answer()\nAnswer() :- Wears(\"Johnny Cash\", \"rainbow-colored outfit\"), Performs(\"Johnny Cash\", \"stage\").\n.output Answer\n\n"]}
{"id": 1546, "answer": true, "completion": ".decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"markhor birth\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"markhor birth\", n_months), n_months <= 12.\n.output Answer\n\n", "completions": [".decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"markhor birth\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"markhor birth\", n_months), n_months <= 12.\n.output Answer\n\n"]}
{"id": 1547, "answer": false, "completion": ".decl Follows(Person:symbol, Religion:symbol)\nFollows(\"Mother Theresa\", \"Christianity\").\n.decl Answer()\nAnswer() :- Follows(\"Mother Theresa\", \"atheism\").\n.output Answer\n\n", "completions": [".decl Follows(Person:symbol, Religion:symbol)\nFollows(\"Mother Theresa\", \"Christianity\").\n.decl Answer()\nAnswer() :- Follows(\"Mother Theresa\", \"atheism\").\n.output Answer\n\n"]}
{"id": 1548, "answer": true, "completion": ".decl Has_brain(Animal:symbol, Brain:symbol)\nHas_brain(\"amoeba\", \"no\").\n.decl Can_learn(Animal:symbol, Subject:symbol)\nCan_learn(\"human\", \"history of art\").\n.decl Answer()\nAnswer() :- Has_brain(\"amoeba\", \"no\"), Can_learn(\"human\", \"history of art\").\n.output Answer\n\n", "completions": [".decl Has_brain(Animal:symbol, Brain:symbol)\nHas_brain(\"amoeba\", \"no\").\n.decl Can_learn(Animal:symbol, Subject:symbol)\nCan_learn(\"human\", \"history of art\").\n.decl Answer()\nAnswer() :- Has_brain(\"amoeba\", \"no\"), Can_learn(\"human\", \"history of art\").\n.output Answer\n\n"]}
{"id": 1549, "answer": true, "completion": ".decl Requires(Course:symbol, Book:symbol)\nRequires(\"CHE101\", \"Maya Angelou\").\n.decl Answer()\nAnswer() :- Requires(\"CHE101\", \"Maya Angelou\").\n.output Answer\n\n", "completions": [".decl Requires(Course:symbol, Book:symbol)\nRequires(\"CHE101\", \"Maya Angelou\").\n.decl Answer()\nAnswer() :- Requires(\"CHE101\", \"Maya Angelou\").\n.output Answer\n\n"]}
{"id": 1550, "answer": true, "completion": ".decl Celebrates(Religion:symbol, Event:symbol)\nCelebrates(\"Islam\", \"Last Supper\").\n.decl Answer()\nAnswer() :- Celebrates(\"Islam\", \"Last Supper\").\n.output Answer\n\n", "completions": [".decl Celebrates(Religion:symbol, Event:symbol)\nCelebrates(\"Islam\", \"Last Supper\").\n.decl Answer()\nAnswer() :- Celebrates(\"Islam\", \"Last Supper\").\n.output Answer\n\n"]}
{"id": 1551, "answer": false, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"John Kerry\", \"Yale University\").\n.decl Attends(Person:symbol, University:symbol)\nAttends(\"Tom Hanks\", \"California Institute of Technology\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"John Kerry\", \"Yale University\").\n.decl Attends(Person:symbol, University:symbol)\nAttends(\"Tom Hanks\", \"California Institute of Technology\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High School\").\nAttends(\"Tom Hanks\", \"California State University\").\nAttends(\"Tom Hanks\", \"Chabot College\").\nAttends(\"Tom Hanks\", \"Skyline High School\").\nAttends(\"Tom Hanks\", \"Hayward High"]}
{"id": 1552, "answer": false, "completion": ".decl Has_thickness(Object:symbol, Thickness:float)\nHas_thickness(\"armadillo\", 0.1).\n.decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"bullet\", 1000).\n.decl Answer()\nAnswer() :- Has_thickness(\"armadillo\", thickness), Has_speed(\"bullet\", speed), thickness > speed.\n.output Answer\n\n\n", "completions": [".decl Has_thickness(Object:symbol, Thickness:float)\nHas_thickness(\"armadillo\", 0.1).\n.decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"bullet\", 1000).\n.decl Answer()\nAnswer() :- Has_thickness(\"armadillo\", thickness), Has_speed(\"bullet\", speed), thickness > speed.\n.output Answer\n\n\n"]}
{"id": 1553, "answer": false, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"10th doctor\", \"fish fingers and custard\").\nLikes(\"10th doctor\", \"jelly babies\").\n.decl Is_ingredient(Food:symbol, Ingredient:symbol)\nIs_ingredient(\"fish fingers and custard\", \"fish fingers\").\nIs_ingredient(\"fish fingers and custard\", \"custard\").\nIs_ingredient(\"jelly babies\", \"jelly\").\nIs_ingredient(\"stuffed pears\", \"pears\").\nIs_ingredient(\"stuffed pears\", \"cheese\").\n.decl Answer()\nAnswer() :- Likes(\"10th doctor\", food1), Is_ingredient(\"stuffed pears\", ingredient), Likes(\"10th doctor\", food2), Is_ingredient(food2, ingredient).\n.output Answer\n\n", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"10th doctor\", \"fish fingers and custard\").\nLikes(\"10th doctor\", \"jelly babies\").\n.decl Is_ingredient(Food:symbol, Ingredient:symbol)\nIs_ingredient(\"fish fingers and custard\", \"fish fingers\").\nIs_ingredient(\"fish fingers and custard\", \"custard\").\nIs_ingredient(\"jelly babies\", \"jelly\").\nIs_ingredient(\"stuffed pears\", \"pears\").\nIs_ingredient(\"stuffed pears\", \"cheese\").\n.decl Answer()\nAnswer() :- Likes(\"10th doctor\", food1), Is_ingredient(\"stuffed pears\", ingredient), Likes(\"10th doctor\", food2), Is_ingredient(food2, ingredient).\n.output Answer\n\n"]}
{"id": 1554, "answer": true, "completion": ".decl Is_known_for(Place:symbol, Product:symbol)\nIs_known_for(\"Brooklyn\", \"bread\").\n.decl Answer()\nAnswer() :- Is_known_for(\"Brooklyn\", \"bread\").\n.output Answer\n\n", "completions": [".decl Is_known_for(Place:symbol, Product:symbol)\nIs_known_for(\"Brooklyn\", \"bread\").\n.decl Answer()\nAnswer() :- Is_known_for(\"Brooklyn\", \"bread\").\n.output Answer\n\n"]}
{"id": 1555, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"breast cancer\", \"breast cancer\").\n.decl Is_a(Person:symbol, Animal:symbol)\nIs_a(\"breast cancer\", \"human\").\nIs_a(\"amoeba\", \"amoeba\").\n.decl Answer()\nAnswer() :- Is_a(\"amoeba\", animal), Has_disease(\"breast cancer\", disease), !Is_a(disease, animal).\n.output Answer\n\n", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"breast cancer\", \"breast cancer\").\n.decl Is_a(Person:symbol, Animal:symbol)\nIs_a(\"breast cancer\", \"human\").\nIs_a(\"amoeba\", \"amoeba\").\n.decl Answer()\nAnswer() :- Is_a(\"amoeba\", animal), Has_disease(\"breast cancer\", disease), !Is_a(disease, animal).\n.output Answer\n\n"]}
{"id": 1556, "answer": true, "completion": ".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Post Malone\", \"needles\").\n.decl Answer()\nAnswer() :- Has_fear(\"Post Malone\", \"needles\").\n.output Answer\n\n", "completions": [".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Post Malone\", \"needles\").\n.decl Answer()\nAnswer() :- Has_fear(\"Post Malone\", \"needles\").\n.output Answer\n\n"]}
{"id": 1557, "answer": false, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 20500).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Gotheburg\", 519000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity), Has_population(\"Gotheburg\", population), capacity >= population/10.\n.output Answer\n\n", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 20500).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Gotheburg\", 519000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity), Has_population(\"Gotheburg\", population), capacity >= population/10.\n.output Answer\n\n"]}
{"id": 1558, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Jujutsu expert\", \"Jujutsu\").\nHas_skill(\"Janissary\", \"Janissary\").\n.decl Is_better_than(Skill_A:symbol, Skill_B:symbol)\nIs_better_than(\"Jujutsu\", \"Janissary\").\n.decl Answer()\nAnswer() :- Has_skill(person1, skill1), Has_skill(person2, skill2), Is_better_than(skill1, skill2).\n.output Answer\n\n", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Jujutsu expert\", \"Jujutsu\").\nHas_skill(\"Janissary\", \"Janissary\").\n.decl Is_better_than(Skill_A:symbol, Skill_B:symbol)\nIs_better_than(\"Jujutsu\", \"Janissary\").\n.decl Answer()\nAnswer() :- Has_skill(person1, skill1), Has_skill(person2, skill2), Is_better_than(skill1, skill2).\n.output Answer\n\n"]}
{"id": 1559, "answer": false, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Bulgaria\", 7000000).\n.decl Has_area(Country:symbol, Area:float)\nHas_area(\"Bulgaria\", 111000).\n.decl Answer()\nAnswer() :- Has_population(\"Bulgaria\", population), Has_area(\"Bulgaria\", area), population/area > 100.\n.output Answer\n\n", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Bulgaria\", 7000000).\n.decl Has_area(Country:symbol, Area:float)\nHas_area(\"Bulgaria\", 111000).\n.decl Answer()\nAnswer() :- Has_population(\"Bulgaria\", population), Has_area(\"Bulgaria\", area), population/area > 100.\n.output Answer\n\n"]}
{"id": 1560, "answer": true, "completion": ".decl Is_important_to(Animal:symbol, Sport:symbol)\nIs_important_to(\"bird\", \"badminton\").\n.decl Answer()\nAnswer() :- Is_important_to(\"bird\", \"badminton\").\n.output Answer\n\n", "completions": [".decl Is_important_to(Animal:symbol, Sport:symbol)\nIs_important_to(\"bird\", \"badminton\").\n.decl Answer()\nAnswer() :- Is_important_to(\"bird\", \"badminton\").\n.output Answer\n\n"]}
{"id": 1561, "answer": true, "completion": ".decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"pirate lieutenant\", \"lieutenant\").\nHas_rank(\"navy lieutenant\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Has_rank(\"pirate lieutenant\", rank), Has_rank(\"navy lieutenant\", rank).\n.output Answer\n\n", "completions": [".decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"pirate lieutenant\", \"lieutenant\").\nHas_rank(\"navy lieutenant\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Has_rank(\"pirate lieutenant\", rank), Has_rank(\"navy lieutenant\", rank).\n.output Answer\n\n"]}
{"id": 1562, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Hwasong-15 missile\", 10).\nHas_speed(\"Voyager 2\", 17).\n.decl Answer()\nAnswer() :- Has_speed(\"Hwasong-15 missile\", speed1), Has_speed(\"Voyager 2\", speed2), speed1 < speed2.\n.output Answer\n\n", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Hwasong-15 missile\", 10).\nHas_speed(\"Voyager 2\", 17).\n.decl Answer()\nAnswer() :- Has_speed(\"Hwasong-15 missile\", speed1), Has_speed(\"Voyager 2\", speed2), speed1 < speed2.\n.output Answer\n\n"]}
{"id": 1563, "answer": true, "completion": ".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"electric stove\", \"glass\").\n.decl Is_compatible(Material_A:symbol, Material_B:symbol)\nIs_compatible(\"glass\", \"cast iron\").\n.decl Answer()\nAnswer() :- Has_material(\"electric stove\", material), Is_compatible(material, \"cast iron\").\n.output Answer\n\n", "completions": [".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"electric stove\", \"glass\").\n.decl Is_compatible(Material_A:symbol, Material_B:symbol)\nIs_compatible(\"glass\", \"cast iron\").\n.decl Answer()\nAnswer() :- Has_material(\"electric stove\", material), Is_compatible(material, \"cast iron\").\n.output Answer\n\n"]}
{"id": 1564, "answer": false, "completion": ".decl Lasts_n_seconds(Event:symbol, N_seconds:float)\nLasts_n_seconds(\"Conan the Barbarian\", 120).\nLasts_n_seconds(\"Call of Duty\", 60).\n.decl Answer()\nAnswer() :- Lasts_n_seconds(\"Conan the Barbarian\", n_seconds1), Lasts_n_seconds(\"Call of Duty\", n_seconds2), n_seconds1 < n_seconds2.\n.output Answer\n\n", "completions": [".decl Lasts_n_seconds(Event:symbol, N_seconds:float)\nLasts_n_seconds(\"Conan the Barbarian\", 120).\nLasts_n_seconds(\"Call of Duty\", 60).\n.decl Answer()\nAnswer() :- Lasts_n_seconds(\"Conan the Barbarian\", n_seconds1), Lasts_n_seconds(\"Call of Duty\", n_seconds2), n_seconds1 < n_seconds2.\n.output Answer\n\n"]}
{"id": 1565, "answer": true, "completion": ".decl Grows_in(Object:symbol, Location:symbol)\nGrows_in(\"sesame seed\", \"soil\").\nGrows_in(\"sesame seed\", \"human body\").\n.decl Answer()\nAnswer() :- Grows_in(\"sesame seed\", \"human body\").\n.output Answer\n\n", "completions": [".decl Grows_in(Object:symbol, Location:symbol)\nGrows_in(\"sesame seed\", \"soil\").\nGrows_in(\"sesame seed\", \"human body\").\n.decl Answer()\nAnswer() :- Grows_in(\"sesame seed\", \"human body\").\n.output Answer\n\n"]}
{"id": 1566, "answer": true, "completion": ".decl Has_signature_style(Person:symbol, Style:symbol)\nHas_signature_style(\"Ariana Grande\", \"comfort items and high fashion\").\n.decl Answer()\nAnswer() :- Has_signature_style(\"Ariana Grande\", \"comfort items and high fashion\").\n.output Answer\n\n", "completions": [".decl Has_signature_style(Person:symbol, Style:symbol)\nHas_signature_style(\"Ariana Grande\", \"comfort items and high fashion\").\n.decl Answer()\nAnswer() :- Has_signature_style(\"Ariana Grande\", \"comfort items and high fashion\").\n.output Answer\n\n"]}
{"id": 1567, "answer": true, "completion": ".decl Has_taste_in_women(Person:symbol, Woman:symbol)\nHas_taste_in_women(\"Eric Clapton\", \"Pattie Boyd\").\nHas_taste_in_women(\"George Harrison\", \"Pattie Boyd\").\n.decl Answer()\nAnswer() :- Has_taste_in_women(person1, woman), Has_taste_in_women(person2, woman), person1 != person2.\n.output Answer\n\n", "completions": [".decl Has_taste_in_women(Person:symbol, Woman:symbol)\nHas_taste_in_women(\"Eric Clapton\", \"Pattie Boyd\").\nHas_taste_in_women(\"George Harrison\", \"Pattie Boyd\").\n.decl Answer()\nAnswer() :- Has_taste_in_women(person1, woman), Has_taste_in_women(person2, woman), person1 != person2.\n.output Answer\n\n"]}
{"id": 1568, "answer": false, "completion": ".decl Has_n_members(Court:symbol, N_members:float)\nHas_n_members(\"Supreme Court of the United States\", 9).\nHas_n_members(\"High Courts of Justice of Spain\", 12).\n.decl Answer()\nAnswer() :- Has_n_members(\"Supreme Court of the United States\", n_members1), Has_n_members(\"High Courts of Justice of Spain\", n_members2), n_members1 = n_members2.\n.output Answer\n\n\n", "completions": [".decl Has_n_members(Court:symbol, N_members:float)\nHas_n_members(\"Supreme Court of the United States\", 9).\nHas_n_members(\"High Courts of Justice of Spain\", 12).\n.decl Answer()\nAnswer() :- Has_n_members(\"Supreme Court of the United States\", n_members1), Has_n_members(\"High Courts of Justice of Spain\", n_members2), n_members1 = n_members2.\n.output Answer\n\n\n"]}
{"id": 1569, "answer": true, "completion": ".decl Knows(Person:symbol, Song:symbol)\nKnows(\"Jack Sparrow\", \"What Shall We Do with a Drunken Sailor\").\n.decl Is_type_of(Song:symbol, Song_type:symbol)\nIs_type_of(\"What Shall We Do with a Drunken Sailor\", \"sea shanty\").\n.decl Answer()\nAnswer() :- Knows(\"Jack Sparrow\", song), Is_type_of(song, \"sea shanty\").\n.output Answer\n\n", "completions": [".decl Knows(Person:symbol, Song:symbol)\nKnows(\"Jack Sparrow\", \"What Shall We Do with a Drunken Sailor\").\n.decl Is_type_of(Song:symbol, Song_type:symbol)\nIs_type_of(\"What Shall We Do with a Drunken Sailor\", \"sea shanty\").\n.decl Answer()\nAnswer() :- Knows(\"Jack Sparrow\", song), Is_type_of(song, \"sea shanty\").\n.output Answer\n\n"]}
{"id": 1570, "answer": true, "completion": ".decl Lives_in(Person:symbol, Country:symbol)\nLives_in(\"Australian\", \"Australia\").\n.decl Rides(Person:symbol, Animal:symbol)\nRides(\"Australian\", \"kangaroo\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Australia\"), Rides(person, \"kangaroo\").\n.output Answer\n\n", "completions": [".decl Lives_in(Person:symbol, Country:symbol)\nLives_in(\"Australian\", \"Australia\").\n.decl Rides(Person:symbol, Animal:symbol)\nRides(\"Australian\", \"kangaroo\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Australia\"), Rides(person, \"kangaroo\").\n.output Answer\n\n"]}
{"id": 1571, "answer": true, "completion": ".decl Patronizes(Person:symbol, Artist:symbol)\nPatronizes(\"Lorenzo de Medici\", \"Leonardo da Vinci\").\nPatronizes(\"Lorenzo de Medici\", \"Michelangelo\").\n.decl Answer()\nAnswer() :- Patronizes(\"Lorenzo de Medici\", artist1), Patronizes(\"Lorenzo de Medici\", artist2), artist1 != artist2.\n.output Answer\n\n", "completions": [".decl Patronizes(Person:symbol, Artist:symbol)\nPatronizes(\"Lorenzo de Medici\", \"Leonardo da Vinci\").\nPatronizes(\"Lorenzo de Medici\", \"Michelangelo\").\n.decl Answer()\nAnswer() :- Patronizes(\"Lorenzo de Medici\", artist1), Patronizes(\"Lorenzo de Medici\", artist2), artist1 != artist2.\n.output Answer\n\n"]}
{"id": 1572, "answer": true, "completion": ".decl Understands(Person:symbol, Topic:symbol)\nUnderstands(\"Lee Sedol\", \"Go\").\nUnderstands(\"Lee Sedol\", \"Sicilian Defence\").\n.decl Answer()\nAnswer() :- Understands(\"Lee Sedol\", \"Sicilian Defence\").\n.output Answer\n\n", "completions": [".decl Understands(Person:symbol, Topic:symbol)\nUnderstands(\"Lee Sedol\", \"Go\").\nUnderstands(\"Lee Sedol\", \"Sicilian Defence\").\n.decl Answer()\nAnswer() :- Understands(\"Lee Sedol\", \"Sicilian Defence\").\n.output Answer\n\n"]}
{"id": 1573, "answer": false, "completion": ".decl Has_citizens(Country:symbol, Citizens:symbol)\nHas_citizens(\"Switzerland\", \"Citizens of Bern\").\n.decl Has_descendants(Person:symbol, Descendants:symbol)\nHas_descendants(\"Genghis Khan\", \"Mongols\").\n.decl Answer()\nAnswer() :- Has_citizens(\"Switzerland\", citizens), Has_descendants(\"Genghis Khan\", descendants), citizens = descendants.\n.output Answer\n\n", "completions": [".decl Has_citizens(Country:symbol, Citizens:symbol)\nHas_citizens(\"Switzerland\", \"Citizens of Bern\").\n.decl Has_descendants(Person:symbol, Descendants:symbol)\nHas_descendants(\"Genghis Khan\", \"Mongols\").\n.decl Answer()\nAnswer() :- Has_citizens(\"Switzerland\", citizens), Has_descendants(\"Genghis Khan\", descendants), citizens = descendants.\n.output Answer\n\n"]}
{"id": 1574, "answer": true, "completion": ".decl Has_efficiency(Car:symbol, Efficiency:float)\nHas_efficiency(\"Maruti Suzuki Baleno\", 23.87).\n.decl Has_n_members(Family:symbol, N_members:float)\nHas_n_members(\"Linus Torvald's family\", 3).\n.decl Answer()\nAnswer() :- Has_efficiency(\"Maruti Suzuki Baleno\", efficiency), Has_n_members(\"Linus Torvald's family\", n_members), efficiency >= n_members.\n.output Answer\n\n", "completions": [".decl Has_efficiency(Car:symbol, Efficiency:float)\nHas_efficiency(\"Maruti Suzuki Baleno\", 23.87).\n.decl Has_n_members(Family:symbol, N_members:float)\nHas_n_members(\"Linus Torvald's family\", 3).\n.decl Answer()\nAnswer() :- Has_efficiency(\"Maruti Suzuki Baleno\", efficiency), Has_n_members(\"Linus Torvald's family\", n_members), efficiency >= n_members.\n.output Answer\n\n"]}
{"id": 1575, "answer": false, "completion": ".decl Invented_in(Object:symbol, Country:symbol)\nInvented_in(\"Walkman\", \"Japan\").\n.decl Existed_in(Country:symbol, Time:symbol)\nExisted_in(\"Kingdom of Hungary\", \"1867\").\nExisted_in(\"Kingdom of Hungary\", \"1918\").\n.decl Answer()\nAnswer() :- Invented_in(\"Walkman\", country), Existed_in(\"Kingdom of Hungary\", time), Existed_in(country, time).\n.output Answer\n\n", "completions": [".decl Invented_in(Object:symbol, Country:symbol)\nInvented_in(\"Walkman\", \"Japan\").\n.decl Existed_in(Country:symbol, Time:symbol)\nExisted_in(\"Kingdom of Hungary\", \"1867\").\nExisted_in(\"Kingdom of Hungary\", \"1918\").\n.decl Answer()\nAnswer() :- Invented_in(\"Walkman\", country), Existed_in(\"Kingdom of Hungary\", time), Existed_in(country, time).\n.output Answer\n\n"]}
{"id": 1576, "answer": false, "completion": ".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Pantheon in Paris\", \"Pantheon\").\n.decl Answer()\nAnswer() :- Has_name(place1, name), Has_name(place2, name), place1 != place2.\n.output Answer\n\n", "completions": [".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Pantheon in Paris\", \"Pantheon\").\n.decl Answer()\nAnswer() :- Has_name(place1, name), Has_name(place2, name), place1 != place2.\n.output Answer\n\n"]}
{"id": 1577, "answer": true, "completion": ".decl Has_custom(Country:symbol, Custom:symbol)\nHas_custom(\"Japan\", \"no tip\").\n.decl Answer()\nAnswer() :- Has_custom(country, \"no tip\").\n.output Answer\n\n", "completions": [".decl Has_custom(Country:symbol, Custom:symbol)\nHas_custom(\"Japan\", \"no tip\").\n.decl Answer()\nAnswer() :- Has_custom(country, \"no tip\").\n.output Answer\n\n"]}
{"id": 1578, "answer": true, "completion": ".decl Has_power(Person:symbol, Power:symbol)\nHas_power(\"Vice President of the United States\", \"impeach\").\n.decl Answer()\nAnswer() :- Has_power(\"Vice President of the United States\", \"impeach\").\n.output Answer\n\n", "completions": [".decl Has_power(Person:symbol, Power:symbol)\nHas_power(\"Vice President of the United States\", \"impeach\").\n.decl Answer()\nAnswer() :- Has_power(\"Vice President of the United States\", \"impeach\").\n.output Answer\n\n"]}
{"id": 1579, "answer": false, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Bruce Lee\", \"University of Washington\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"1964 University of Washington graduation ceremony\", \"1964\").\n.decl Answer()\nAnswer() :- Graduates(\"Bruce Lee\", \"University of Washington\"), !Happens_in_time(\"1964 University of Washington graduation ceremony\", \"1964\").\n.output Answer\n\n", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Bruce Lee\", \"University of Washington\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"1964 University of Washington graduation ceremony\", \"1964\").\n.decl Answer()\nAnswer() :- Graduates(\"Bruce Lee\", \"University of Washington\"), !Happens_in_time(\"1964 University of Washington graduation ceremony\", \"1964\").\n.output Answer\n\n"]}
{"id": 1580, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"jackfruit\", 10).\n.decl Can_be_used_as_weapon(Object:symbol)\nCan_be_used_as_weapon(\"jackfruit\").\n.decl Answer()\nAnswer() :- Has_weight(\"jackfruit\", weight), weight > 5.\nAnswer() :- Can_be_used_as_weapon(\"jackfruit\").\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"jackfruit\", 10).\n.decl Can_be_used_as_weapon(Object:symbol)\nCan_be_used_as_weapon(\"jackfruit\").\n.decl Answer()\nAnswer() :- Has_weight(\"jackfruit\", weight), weight > 5.\nAnswer() :- Can_be_used_as_weapon(\"jackfruit\").\n.output Answer\n\n"]}
{"id": 1581, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Napoleonic Wars\", 15).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"earth orbit around the sun\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"earth orbit around the sun\", n_years1), Last_n_years(\"Napoleonic Wars\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Napoleonic Wars\", 15).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"earth orbit around the sun\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"earth orbit around the sun\", n_years1), Last_n_years(\"Napoleonic Wars\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n"]}
{"id": 1582, "answer": true, "completion": ".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"Yakutsk\", -40).\n.decl Grows_in_temperature(Plant:symbol, Temperature:float)\nGrows_in_temperature(\"Coca plant\", 20).\n.decl Answer()\nAnswer() :- Has_temperature(\"Yakutsk\", temperature1), Grows_in_temperature(\"Coca plant\", temperature2), temperature1 < temperature2.\n.output Answer\n\n", "completions": [".decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"Yakutsk\", -40).\n.decl Grows_in_temperature(Plant:symbol, Temperature:float)\nGrows_in_temperature(\"Coca plant\", 20).\n.decl Answer()\nAnswer() :- Has_temperature(\"Yakutsk\", temperature1), Grows_in_temperature(\"Coca plant\", temperature2), temperature1 < temperature2.\n.output Answer\n\n"]}
{"id": 1583, "answer": true, "completion": ".decl Is_related_to(Animal_A:symbol, Animal_B:symbol)\nIs_related_to(\"saltwater crocodile\", \"alligator\").\n.decl Answer()\nAnswer() :- Is_related_to(\"saltwater crocodile\", \"alligator\").\n.output Answer\n\n", "completions": [".decl Is_related_to(Animal_A:symbol, Animal_B:symbol)\nIs_related_to(\"saltwater crocodile\", \"alligator\").\n.decl Answer()\nAnswer() :- Is_related_to(\"saltwater crocodile\", \"alligator\").\n.output Answer\n\n"]}
{"id": 1584, "answer": false, "completion": ".decl Is_a(Person:symbol, Religion:symbol)\nIs_a(\"rabbi\", \"Judaism\").\nIs_a(\"Christian\", \"Christianity\").\n.decl Saves_soul(Person:symbol, Person:symbol)\nSaves_soul(\"rabbi\", \"Christian\").\n.decl Answer()\nAnswer() :- Is_a(\"rabbi\", \"Judaism\"), Is_a(\"Christian\", \"Christianity\"), Saves_soul(\"rabbi\", \"Christian\").\n.output Answer\n\n", "completions": [".decl Is_a(Person:symbol, Religion:symbol)\nIs_a(\"rabbi\", \"Judaism\").\nIs_a(\"Christian\", \"Christianity\").\n.decl Saves_soul(Person:symbol, Person:symbol)\nSaves_soul(\"rabbi\", \"Christian\").\n.decl Answer()\nAnswer() :- Is_a(\"rabbi\", \"Judaism\"), Is_a(\"Christian\", \"Christianity\"), Saves_soul(\"rabbi\", \"Christian\").\n.output Answer\n\n"]}
{"id": 1585, "answer": true, "completion": ".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"fever\", 40).\nHas_temperature(\"NY's highest recorded temperature\", 42).\n.decl Answer()\nAnswer() :- Has_temperature(\"fever\", temperature1), Has_temperature(\"NY's highest recorded temperature\", temperature2), temperature1 < temperature2.\n.output Answer\n\n", "completions": [".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"fever\", 40).\nHas_temperature(\"NY's highest recorded temperature\", 42).\n.decl Answer()\nAnswer() :- Has_temperature(\"fever\", temperature1), Has_temperature(\"NY's highest recorded temperature\", temperature2), temperature1 < temperature2.\n.output Answer\n\n"]}
{"id": 1586, "answer": true, "completion": ".decl Has_power(Entity:symbol, Power:symbol)\nHas_power(\"federal government\", \"harm\").\n.decl Answer()\nAnswer() :- Has_power(\"federal government\", \"harm\"), !Has_power(\"Mayors\", \"harm\").\n.output Answer\n\n", "completions": [".decl Has_power(Entity:symbol, Power:symbol)\nHas_power(\"federal government\", \"harm\").\n.decl Answer()\nAnswer() :- Has_power(\"federal government\", \"harm\"), !Has_power(\"Mayors\", \"harm\").\n.output Answer\n\n"]}
{"id": 1587, "answer": true, "completion": ".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Nepal\", \"India\").\n.decl Happens_in(Event:symbol, Place:symbol)\nHappens_in(\"Nepalese Civil War\", \"Nepal\").\n.decl Answer()\nAnswer() :- Happens_in(\"Nepalese Civil War\", place1), Is_near(place1, \"India\").\n.output Answer\n\n\n", "completions": [".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Nepal\", \"India\").\n.decl Happens_in(Event:symbol, Place:symbol)\nHappens_in(\"Nepalese Civil War\", \"Nepal\").\n.decl Answer()\nAnswer() :- Happens_in(\"Nepalese Civil War\", place1), Is_near(place1, \"India\").\n.output Answer\n\n\n"]}
{"id": 1588, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"rowing competitions\", \"outdoors\").\nHappens_in_place(\"rowing competitions\", \"indoors\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"rowing competitions\", \"indoors\").\n.output Answer\n\n", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"rowing competitions\", \"outdoors\").\nHappens_in_place(\"rowing competitions\", \"indoors\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"rowing competitions\", \"indoors\").\n.output Answer\n\n"]}
{"id": 1589, "answer": false, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Jamie Brewer\", \"University of Texas\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"University of Texas\", 52).\nRanks(\"United States Naval Academy\", 4).\n.decl Answer()\nAnswer() :- Graduates(\"Jamie Brewer\", \"United States Naval Academy\").\nAnswer() :- Graduates(\"Jamie Brewer\", university2), Ranks(university2, rank2), Ranks(\"United States Naval Academy\", rank1), rank2 <= rank1.\n.output Answer\n\n", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Jamie Brewer\", \"University of Texas\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"University of Texas\", 52).\nRanks(\"United States Naval Academy\", 4).\n.decl Answer()\nAnswer() :- Graduates(\"Jamie Brewer\", \"United States Naval Academy\").\nAnswer() :- Graduates(\"Jamie Brewer\", university2), Ranks(university2, rank2), Ranks(\"United States Naval Academy\", rank1), rank2 <= rank1.\n.output Answer\n\n"]}
{"id": 1590, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"largest asteroid\", 1.2e+15).\nHas_mass(\"whole city\", 1e+12).\n.decl Answer()\nAnswer() :- Has_mass(\"largest asteroid\", mass1), Has_mass(\"whole city\", mass2), mass1 > mass2.\n.output Answer\n\n", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"largest asteroid\", 1.2e+15).\nHas_mass(\"whole city\", 1e+12).\n.decl Answer()\nAnswer() :- Has_mass(\"largest asteroid\", mass1), Has_mass(\"whole city\", mass2), mass1 > mass2.\n.output Answer\n\n"]}
{"id": 1591, "answer": true, "completion": ".decl Has_n_awards(Person:symbol, N_awards:float)\nHas_n_awards(\"Walt Disney\", 22).\n.decl Has_n_peers(Person:symbol, N_peers:float)\nHas_n_peers(\"Walt Disney\", 1).\n.decl Answer()\nAnswer() :- Has_n_awards(\"Walt Disney\", n_awards1), Has_n_peers(\"Walt Disney\", n_peers), n_awards1 > n_peers.\n.output Answer\n\n", "completions": [".decl Has_n_awards(Person:symbol, N_awards:float)\nHas_n_awards(\"Walt Disney\", 22).\n.decl Has_n_peers(Person:symbol, N_peers:float)\nHas_n_peers(\"Walt Disney\", 1).\n.decl Answer()\nAnswer() :- Has_n_awards(\"Walt Disney\", n_awards1), Has_n_peers(\"Walt Disney\", n_peers), n_awards1 > n_peers.\n.output Answer\n\n"]}
{"id": 1592, "answer": true, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Astana Arena\", 20000).\n.decl Has_n_fans(Artist:symbol, N_fans:float)\nHas_n_fans(\"Billy Joel\", 1000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Astana Arena\", capacity), Has_n_fans(\"Billy Joel\", n_fans), capacity <= n_fans.\n.output Answer\n\n\n", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Astana Arena\", 20000).\n.decl Has_n_fans(Artist:symbol, N_fans:float)\nHas_n_fans(\"Billy Joel\", 1000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Astana Arena\", capacity), Has_n_fans(\"Billy Joel\", n_fans), capacity <= n_fans.\n.output Answer\n\n\n"]}
{"id": 1593, "answer": false, "completion": ".decl Is_part_of(Region:symbol, Country:symbol)\nIs_part_of(\"Mesopotamia\", \"Iraq\").\nIs_part_of(\"Mesopotamia\", \"Syria\").\nIs_part_of(\"Mesopotamia\", \"Turkey\").\nIs_part_of(\"Mesopotamia\", \"Iran\").\nIs_part_of(\"China\", \"China\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Mesopotamia\", country), Is_part_of(\"China\", country).\n.output Answer\n\n", "completions": [".decl Is_part_of(Region:symbol, Country:symbol)\nIs_part_of(\"Mesopotamia\", \"Iraq\").\nIs_part_of(\"Mesopotamia\", \"Syria\").\nIs_part_of(\"Mesopotamia\", \"Turkey\").\nIs_part_of(\"Mesopotamia\", \"Iran\").\nIs_part_of(\"China\", \"China\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Mesopotamia\", country), Is_part_of(\"China\", country).\n.output Answer\n\n"]}
{"id": 1594, "answer": true, "completion": ".decl Is_martyr_saint(Person:symbol)\nIs_martyr_saint(\"Saint Joan of Arc\").\n.decl Is_excommunicated(Person:symbol)\nIs_excommunicated(\"Saint Joan of Arc\").\n.decl Answer()\nAnswer() :- Is_martyr_saint(person), Is_excommunicated(person).\n.output Answer\n\n", "completions": [".decl Is_martyr_saint(Person:symbol)\nIs_martyr_saint(\"Saint Joan of Arc\").\n.decl Is_excommunicated(Person:symbol)\nIs_excommunicated(\"Saint Joan of Arc\").\n.decl Answer()\nAnswer() :- Is_martyr_saint(person), Is_excommunicated(person).\n.output Answer\n\n"]}
{"id": 1595, "answer": true, "completion": ".decl Needs(Job:symbol, Object:symbol)\nNeeds(\"district management\", \"car\").\n.decl Answer()\nAnswer() :- Needs(\"district management\", \"car\").\n.output Answer\n\n", "completions": [".decl Needs(Job:symbol, Object:symbol)\nNeeds(\"district management\", \"car\").\n.decl Answer()\nAnswer() :- Needs(\"district management\", \"car\").\n.output Answer\n\n"]}
{"id": 1596, "answer": true, "completion": ".decl Has_strength(Object:symbol, Strength:float)\nHas_strength(\"nitric acid\", 1).\nHas_strength(\"Louvre\", 10).\n.decl Answer()\nAnswer() :- Has_strength(\"nitric acid\", strength1), Has_strength(\"Louvre\", strength2), strength1 < strength2.\n.output Answer\n\n", "completions": [".decl Has_strength(Object:symbol, Strength:float)\nHas_strength(\"nitric acid\", 1).\nHas_strength(\"Louvre\", 10).\n.decl Answer()\nAnswer() :- Has_strength(\"nitric acid\", strength1), Has_strength(\"Louvre\", strength2), strength1 < strength2.\n.output Answer\n\n"]}
{"id": 1597, "answer": false, "completion": ".decl Provides_data(Animal:symbol, Profession:symbol)\nProvides_data(\"hornet\", \"entomologist\").\nProvides_data(\"whale\", \"oceanographer\").\n.decl Answer()\nAnswer() :- Provides_data(\"hornet\", \"oceanographer\").\n.output Answer\n\n", "completions": [".decl Provides_data(Animal:symbol, Profession:symbol)\nProvides_data(\"hornet\", \"entomologist\").\nProvides_data(\"whale\", \"oceanographer\").\n.decl Answer()\nAnswer() :- Provides_data(\"hornet\", \"oceanographer\").\n.output Answer\n\n"]}
{"id": 1598, "answer": true, "completion": ".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Jackie Kennedy\", \"Dolce & Gabbana\").\n.decl Happens_at(Event:symbol, Time:symbol)\nHappens_at(\"John F. Kennedy's inauguration\", \"January 20, 1961\").\n.decl Answer()\nAnswer() :- Wears(\"Jackie Kennedy\", \"Dolce & Gabbana\"), Happens_at(\"John F. Kennedy's inauguration\", \"January 20, 1961\").\n.output Answer\n\n", "completions": [".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Jackie Kennedy\", \"Dolce & Gabbana\").\n.decl Happens_at(Event:symbol, Time:symbol)\nHappens_at(\"John F. Kennedy's inauguration\", \"January 20, 1961\").\n.decl Answer()\nAnswer() :- Wears(\"Jackie Kennedy\", \"Dolce & Gabbana\"), Happens_at(\"John F. Kennedy's inauguration\", \"January 20, 1961\").\n.output Answer\n\n"]}
{"id": 1599, "answer": true, "completion": ".decl Makes(Person:symbol, Object:symbol)\nMakes(\"logger\", \"toilet paper\").\n.decl Answer()\nAnswer() :- Makes(\"logger\", \"toilet paper\").\n.output Answer\n\n", "completions": [".decl Makes(Person:symbol, Object:symbol)\nMakes(\"logger\", \"toilet paper\").\n.decl Answer()\nAnswer() :- Makes(\"logger\", \"toilet paper\").\n.output Answer\n\n"]}
{"id": 1600, "answer": true, "completion": ".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Arnold Schwarzenegger\", 300).\nHas_strength(\"Hafþór Björnsson\", 400).\n.decl Answer()\nAnswer() :- Has_strength(\"Arnold Schwarzenegger\", strength1), Has_strength(\"Hafþór Björnsson\", strength2), strength1 < strength2.\n.output Answer\n\n", "completions": [".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Arnold Schwarzenegger\", 300).\nHas_strength(\"Hafþór Björnsson\", 400).\n.decl Answer()\nAnswer() :- Has_strength(\"Arnold Schwarzenegger\", strength1), Has_strength(\"Hafþór Björnsson\", strength2), strength1 < strength2.\n.output Answer\n\n"]}
{"id": 1601, "answer": true, "completion": ".decl Has_number(Object:symbol, Number:float)\nHas_number(\"church\", 666).\n.decl Answer()\nAnswer() :- Has_number(\"church\", 666).\n.output Answer\n\n", "completions": [".decl Has_number(Object:symbol, Number:float)\nHas_number(\"church\", 666).\n.decl Answer()\nAnswer() :- Has_number(\"church\", 666).\n.output Answer\n\n"]}
{"id": 1602, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Elizabeth I of England\", \"1533-1603\").\nHappens_in_time(\"Dido, Queen of Carthage\", \"1594\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Elizabeth I of England\", time1), Happens_in_time(\"Dido, Queen of Carthage\", time2), time1 <= time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Elizabeth I of England\", \"1533-1603\").\nHappens_in_time(\"Dido, Queen of Carthage\", \"1594\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Elizabeth I of England\", time1), Happens_in_time(\"Dido, Queen of Carthage\", time2), time1 <= time2.\n.output Answer\n\n"]}
{"id": 1603, "answer": true, "completion": ".decl Has_endangerment_level(Animal:symbol, Endangerment_level:float)\nHas_endangerment_level(\"saltwater crocodile\", 1).\nHas_endangerment_level(\"European otter\", 2).\n.decl Answer()\nAnswer() :- Has_endangerment_level(\"saltwater crocodile\", endangerment_level1), Has_endangerment_level(\"European otter\", endangerment_level2), endangerment_level1 < endangerment_level2.\n.output Answer\n\n", "completions": [".decl Has_endangerment_level(Animal:symbol, Endangerment_level:float)\nHas_endangerment_level(\"saltwater crocodile\", 1).\nHas_endangerment_level(\"European otter\", 2).\n.decl Answer()\nAnswer() :- Has_endangerment_level(\"saltwater crocodile\", endangerment_level1), Has_endangerment_level(\"European otter\", endangerment_level2), endangerment_level1 < endangerment_level2.\n.output Answer\n\n"]}
{"id": 1604, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"giant panda\", \"black\").\nHas_color(\"giant panda\", \"white\").\nHas_color(\"yin yang\", \"black\").\nHas_color(\"yin yang\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"giant panda\", color1), Has_color(\"yin yang\", color2), color1 != color2.\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"giant panda\", \"black\").\nHas_color(\"giant panda\", \"white\").\nHas_color(\"yin yang\", \"black\").\nHas_color(\"yin yang\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"giant panda\", color1), Has_color(\"yin yang\", color2), color1 != color2.\n.output Answer\n\n"]}
{"id": 1605, "answer": true, "completion": ".decl Is_queen(Person:symbol, Time:symbol)\nIs_queen(\"Elizabeth II\", \"1991\").\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Persian Gulf War\", 1).\n.decl Answer()\nAnswer() :- Is_queen(\"Elizabeth II\", year1), Last_n_years(\"Persian Gulf War\", n_years), year1 = \"1991\".\n.output Answer\n\n\n", "completions": [".decl Is_queen(Person:symbol, Time:symbol)\nIs_queen(\"Elizabeth II\", \"1991\").\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Persian Gulf War\", 1).\n.decl Answer()\nAnswer() :- Is_queen(\"Elizabeth II\", year1), Last_n_years(\"Persian Gulf War\", n_years), year1 = \"1991\".\n.output Answer\n\n\n"]}
{"id": 1606, "answer": true, "completion": ".decl Has_effect(Drug:symbol, Effect:symbol)\nHas_effect(\"Modafinil\", \"increased wakefulness\").\nHas_effect(\"Modafinil\", \"decreased appetite\").\nHas_effect(\"Modafinil\", \"increased alertness\").\nHas_effect(\"Modafinil\", \"increased energy\").\n.decl Answer()\nAnswer() :- Has_effect(\"Modafinil\", \"increased wakefulness\").\nAnswer() :- Has_effect(\"Modafinil\", \"decreased appetite\").\nAnswer() :- Has_effect(\"Modafinil\", \"increased alertness\").\nAnswer() :- Has_effect(\"Modafinil\", \"increased energy\").\n.output Answer\n\n", "completions": [".decl Has_effect(Drug:symbol, Effect:symbol)\nHas_effect(\"Modafinil\", \"increased wakefulness\").\nHas_effect(\"Modafinil\", \"decreased appetite\").\nHas_effect(\"Modafinil\", \"increased alertness\").\nHas_effect(\"Modafinil\", \"increased energy\").\n.decl Answer()\nAnswer() :- Has_effect(\"Modafinil\", \"increased wakefulness\").\nAnswer() :- Has_effect(\"Modafinil\", \"decreased appetite\").\nAnswer() :- Has_effect(\"Modafinil\", \"increased alertness\").\nAnswer() :- Has_effect(\"Modafinil\", \"increased energy\").\n.output Answer\n\n"]}
{"id": 1607, "answer": true, "completion": ".decl Is_used_for(Object:symbol, Purpose:symbol)\nIs_used_for(\"fork\", \"eating spaghetti\").\n.decl Answer()\nAnswer() :- Is_used_for(\"fork\", \"eating spaghetti\").\n.output Answer\n\n", "completions": [".decl Is_used_for(Object:symbol, Purpose:symbol)\nIs_used_for(\"fork\", \"eating spaghetti\").\n.decl Answer()\nAnswer() :- Is_used_for(\"fork\", \"eating spaghetti\").\n.output Answer\n\n"]}
{"id": 1608, "answer": false, "completion": ".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Arnold Schwarzenegger\", \"Austria\").\n.decl Is_eligible_to_run_for_president(Person:symbol, Country:symbol)\nIs_eligible_to_run_for_president(\"Arnold Schwarzenegger\", \"Austria\").\nIs_eligible_to_run_for_president(\"Arnold Schwarzenegger\", \"US\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Arnold Schwarzenegger\", \"US\"), !Is_eligible_to_run_for_president(\"Arnold Schwarzenegger\", \"US\").\n.output Answer\n\n", "completions": [".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Arnold Schwarzenegger\", \"Austria\").\n.decl Is_eligible_to_run_for_president(Person:symbol, Country:symbol)\nIs_eligible_to_run_for_president(\"Arnold Schwarzenegger\", \"Austria\").\nIs_eligible_to_run_for_president(\"Arnold Schwarzenegger\", \"US\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Arnold Schwarzenegger\", \"US\"), !Is_eligible_to_run_for_president(\"Arnold Schwarzenegger\", \"US\").\n.output Answer\n\n"]}
{"id": 1609, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"atheism\", 0.1).\nHas_n_members(\"Christianity\", 0.8).\n.decl Answer()\nAnswer() :- Has_n_members(\"atheism\", n_members1), Has_n_members(\"Christianity\", n_members2), n_members1 > n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"atheism\", 0.1).\nHas_n_members(\"Christianity\", 0.8).\n.decl Answer()\nAnswer() :- Has_n_members(\"atheism\", n_members1), Has_n_members(\"Christianity\", n_members2), n_members1 > n_members2.\n.output Answer\n\n"]}
{"id": 1610, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"War Horse setting\", \"World War I\").\nHappens_in_time(\"Steven Spielberg's 1998 film\", \"World War II\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"War Horse setting\", time1), Happens_in_time(\"Steven Spielberg's 1998 film\", time2), time1 < time2.\n.output Answer\n\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"War Horse setting\", \"World War I\").\nHappens_in_time(\"Steven Spielberg's 1998 film\", \"World War II\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"War Horse setting\", time1), Happens_in_time(\"Steven Spielberg's 1998 film\", time2), time1 < time2.\n.output Answer\n\n\n"]}
{"id": 1611, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"bear pelts\", \"Autumn\").\nHappens_in_time(\"bear pelts\", \"Winter\").\nHappens_in_time(\"bear pelts\", \"Spring\").\nHappens_in_time(\"bear pelts\", \"Summer\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"bear pelts\", \"US\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"bear pelts\", \"Autumn\"), Happens_in_place(\"bear pelts\", \"US\").\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"bear pelts\", \"Autumn\").\nHappens_in_time(\"bear pelts\", \"Winter\").\nHappens_in_time(\"bear pelts\", \"Spring\").\nHappens_in_time(\"bear pelts\", \"Summer\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"bear pelts\", \"US\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"bear pelts\", \"Autumn\"), Happens_in_place(\"bear pelts\", \"US\").\n.output Answer\n\n"]}
{"id": 1612, "answer": true, "completion": ".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Rich\", \"alcoholic\").\nHas_parent(\"Morty\", \"alcoholic\").\n.decl Triggers(Event:symbol, Condition:symbol)\nTriggers(\"children of alcoholics\", \"alcoholic\").\n.decl Answer()\nAnswer() :- Has_parent(person, \"alcoholic\"), Triggers(\"children of alcoholics\", \"alcoholic\").\n.output Answer\n\n", "completions": [".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Rich\", \"alcoholic\").\nHas_parent(\"Morty\", \"alcoholic\").\n.decl Triggers(Event:symbol, Condition:symbol)\nTriggers(\"children of alcoholics\", \"alcoholic\").\n.decl Answer()\nAnswer() :- Has_parent(person, \"alcoholic\"), Triggers(\"children of alcoholics\", \"alcoholic\").\n.output Answer\n\n"]}
{"id": 1613, "answer": true, "completion": ".decl Is_American(Person:symbol)\nIs_American(\"American wheelchair users\").\n.decl Knows(Person:symbol, Thing:symbol)\nKnows(\"American wheelchair users\", \"ADA\").\n.decl Answer()\nAnswer() :- Is_American(person), Knows(person, \"ADA\").\n.output Answer\n\n", "completions": [".decl Is_American(Person:symbol)\nIs_American(\"American wheelchair users\").\n.decl Knows(Person:symbol, Thing:symbol)\nKnows(\"American wheelchair users\", \"ADA\").\n.decl Answer()\nAnswer() :- Is_American(person), Knows(person, \"ADA\").\n.output Answer\n\n"]}
{"id": 1614, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"astrophotography\", \"night\").\nHappens_in_time(\"summer\", \"June\").\nHappens_in_time(\"summer\", \"July\").\nHappens_in_time(\"summer\", \"August\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"astrophotography\", \"Sweden\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"astrophotography\", time), Happens_in_time(\"summer\", time), Happens_in_place(\"astrophotography\", \"Sweden\").\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"astrophotography\", \"night\").\nHappens_in_time(\"summer\", \"June\").\nHappens_in_time(\"summer\", \"July\").\nHappens_in_time(\"summer\", \"August\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"astrophotography\", \"Sweden\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"astrophotography\", time), Happens_in_time(\"summer\", time), Happens_in_place(\"astrophotography\", \"Sweden\").\n.output Answer\n\n"]}
{"id": 1615, "answer": true, "completion": ".decl Has_n_siblings(Person:symbol, N_siblings:float)\nHas_n_siblings(\"Jane Austen\", 6).\n.decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Jane Austen\", 2).\n.decl Answer()\nAnswer() :- Has_n_siblings(\"Jane Austen\", n_siblings), Has_n_children(\"Jane Austen\", n_children), n_siblings > n_children.\n.output Answer\n\n", "completions": [".decl Has_n_siblings(Person:symbol, N_siblings:float)\nHas_n_siblings(\"Jane Austen\", 6).\n.decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Jane Austen\", 2).\n.decl Answer()\nAnswer() :- Has_n_siblings(\"Jane Austen\", n_siblings), Has_n_children(\"Jane Austen\", n_children), n_siblings > n_children.\n.output Answer\n\n"]}
{"id": 1616, "answer": true, "completion": ".decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"Gomer Pyle\", \"private\").\nHas_rank(\"lieutenant\", \"lieutenant\").\n.decl Salutes(Person_A:symbol, Person_B:symbol)\nSalutes(\"private\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Has_rank(\"Gomer Pyle\", rank1), Has_rank(\"lieutenant\", rank2), Salutes(rank1, rank2).\n.output Answer\n\n", "completions": [".decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"Gomer Pyle\", \"private\").\nHas_rank(\"lieutenant\", \"lieutenant\").\n.decl Salutes(Person_A:symbol, Person_B:symbol)\nSalutes(\"private\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Has_rank(\"Gomer Pyle\", rank1), Has_rank(\"lieutenant\", rank2), Salutes(rank1, rank2).\n.output Answer\n\n"]}
{"id": 1617, "answer": false, "completion": ".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Can_spread(Virus:symbol, Planet:symbol)\nCan_spread(\"Herpes simplex virus\", \"Earth\").\n.decl Answer()\nAnswer() :- Can_spread(\"Herpes simplex virus\", \"Venus\").\nAnswer() :- Can_spread(\"Herpes simplex virus\", \"Earth\"), Has_temperature(\"Venus\", temperature), temperature < 100.\n.output Answer\n\n", "completions": [".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Can_spread(Virus:symbol, Planet:symbol)\nCan_spread(\"Herpes simplex virus\", \"Earth\").\n.decl Answer()\nAnswer() :- Can_spread(\"Herpes simplex virus\", \"Venus\").\nAnswer() :- Can_spread(\"Herpes simplex virus\", \"Earth\"), Has_temperature(\"Venus\", temperature), temperature < 100.\n.output Answer\n\n"]}
{"id": 1618, "answer": false, "completion": ".decl Is_related_to(Language_A:symbol, Language_B:symbol)\nIs_related_to(\"Pig Latin\", \"English\").\nIs_related_to(\"English\", \"Latin\").\n.decl Answer()\nAnswer() :- Is_related_to(\"Pig Latin\", \"Latin\").\n.output Answer\n\n", "completions": [".decl Is_related_to(Language_A:symbol, Language_B:symbol)\nIs_related_to(\"Pig Latin\", \"English\").\nIs_related_to(\"English\", \"Latin\").\n.decl Answer()\nAnswer() :- Is_related_to(\"Pig Latin\", \"Latin\").\n.output Answer\n\n"]}
{"id": 1619, "answer": true, "completion": ".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Matt Damon\", \"heights\").\n.decl Is_afraid_of(Person:symbol, Fear:symbol)\nIs_afraid_of(\"Matt Damon\", \"heights\").\n.decl Answer()\nAnswer() :- Has_fear(\"Matt Damon\", fear), Is_afraid_of(\"Matt Damon\", fear).\n.output Answer\n\n", "completions": [".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Matt Damon\", \"heights\").\n.decl Is_afraid_of(Person:symbol, Fear:symbol)\nIs_afraid_of(\"Matt Damon\", \"heights\").\n.decl Answer()\nAnswer() :- Has_fear(\"Matt Damon\", fear), Is_afraid_of(\"Matt Damon\", fear).\n.output Answer\n\n"]}
{"id": 1620, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"pandemic\", \"2020\").\nHappens_in_time(\"door to door advertising\", \"2020\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"pandemic\", time), Happens_in_time(\"door to door advertising\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"pandemic\", \"2020\").\nHappens_in_time(\"door to door advertising\", \"2020\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"pandemic\", time), Happens_in_time(\"door to door advertising\", time).\n.output Answer\n\n"]}
{"id": 1621, "answer": false, "completion": ".decl Uses(Person:symbol, Calendar:symbol)\nUses(\"Ivan the Terrible\", \"Julian calendar\").\nUses(\"Ivan the Terrible\", \"Gregorian calendar\").\n.decl Is_successor_of(Calendar:symbol, Calendar:symbol)\nIs_successor_of(\"Julian calendar\", \"Byzantine calendar\").\nIs_successor_of(\"Gregorian calendar\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Uses(\"Ivan the Terrible\", calendar), Is_successor_of(calendar, \"Byzantine calendar\").\n.output Answer\n\n", "completions": [".decl Uses(Person:symbol, Calendar:symbol)\nUses(\"Ivan the Terrible\", \"Julian calendar\").\nUses(\"Ivan the Terrible\", \"Gregorian calendar\").\n.decl Is_successor_of(Calendar:symbol, Calendar:symbol)\nIs_successor_of(\"Julian calendar\", \"Byzantine calendar\").\nIs_successor_of(\"Gregorian calendar\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Uses(\"Ivan the Terrible\", calendar), Is_successor_of(calendar, \"Byzantine calendar\").\n.output Answer\n\n"]}
{"id": 1622, "answer": true, "completion": ".decl Has_ingredient(Recipe:symbol, Ingredient:symbol)\nHas_ingredient(\"delicious recipe\", \"The Onion\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"delicious recipe\", \"The Onion\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Recipe:symbol, Ingredient:symbol)\nHas_ingredient(\"delicious recipe\", \"The Onion\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"delicious recipe\", \"The Onion\").\n.output Answer\n\n"]}
{"id": 1623, "answer": true, "completion": ".decl Has_home(Person:symbol, Home:symbol)\nHas_home(\"The Doctor\", \"TARDIS\").\n.decl Has_childhood_home(Person:symbol, Home:symbol)\nHas_childhood_home(\"The Doctor\", \"Gallifrey\").\n.decl Answer()\nAnswer() :- Has_home(\"The Doctor\", \"TARDIS\"), Has_childhood_home(\"The Doctor\", \"Gallifrey\").\n.output Answer\n\n", "completions": [".decl Has_home(Person:symbol, Home:symbol)\nHas_home(\"The Doctor\", \"TARDIS\").\n.decl Has_childhood_home(Person:symbol, Home:symbol)\nHas_childhood_home(\"The Doctor\", \"Gallifrey\").\n.decl Answer()\nAnswer() :- Has_home(\"The Doctor\", \"TARDIS\"), Has_childhood_home(\"The Doctor\", \"Gallifrey\").\n.output Answer\n\n"]}
{"id": 1624, "answer": true, "completion": ".decl Holds_position(Person:symbol, Position:symbol)\nHolds_position(\"Francois Mitterrand\", \"President\").\nHolds_position(\"Barak Obama\", \"President\").\n.decl Met(Person_A:symbol, Person_B:symbol)\nMet(\"Francois Mitterrand\", \"Barak Obama\").\n.decl Answer()\nAnswer() :- Holds_position(person1, \"President\"), Holds_position(person2, \"President\"), Met(person1, person2).\n.output Answer\n\n", "completions": [".decl Holds_position(Person:symbol, Position:symbol)\nHolds_position(\"Francois Mitterrand\", \"President\").\nHolds_position(\"Barak Obama\", \"President\").\n.decl Met(Person_A:symbol, Person_B:symbol)\nMet(\"Francois Mitterrand\", \"Barak Obama\").\n.decl Answer()\nAnswer() :- Holds_position(person1, \"President\"), Holds_position(person2, \"President\"), Met(person1, person2).\n.output Answer\n\n"]}
{"id": 1625, "answer": false, "completion": ".decl Has_intelligence(Species:symbol, Intelligence:symbol)\nHas_intelligence(\"Neanderthals\", \"low\").\nHas_intelligence(\"humans\", \"high\").\n.decl Uses(Species:symbol, Tool:symbol)\nUses(\"humans\", \"arithmetic\").\n.decl Answer()\nAnswer() :- Has_intelligence(\"Neanderthals\", intelligence), Uses(species, \"arithmetic\"), Has_intelligence(species, intelligence).\n.output Answer\n\n", "completions": [".decl Has_intelligence(Species:symbol, Intelligence:symbol)\nHas_intelligence(\"Neanderthals\", \"low\").\nHas_intelligence(\"humans\", \"high\").\n.decl Uses(Species:symbol, Tool:symbol)\nUses(\"humans\", \"arithmetic\").\n.decl Answer()\nAnswer() :- Has_intelligence(\"Neanderthals\", intelligence), Uses(species, \"arithmetic\"), Has_intelligence(species, intelligence).\n.output Answer\n\n"]}
{"id": 1626, "answer": false, "completion": ".decl Is_needed_for(Object:symbol, Activity:symbol)\nIs_needed_for(\"coal\", \"making steel\").\nIs_needed_for(\"parachute\", \"parachuting\").\n.decl Answer()\nAnswer() :- Is_needed_for(\"coal\", \"parachuting\").\n.output Answer\n\n", "completions": [".decl Is_needed_for(Object:symbol, Activity:symbol)\nIs_needed_for(\"coal\", \"making steel\").\nIs_needed_for(\"parachute\", \"parachuting\").\n.decl Answer()\nAnswer() :- Is_needed_for(\"coal\", \"parachuting\").\n.output Answer\n\n"]}
{"id": 1627, "answer": false, "completion": ".decl Makes(Company:symbol, Product:symbol)\nMakes(\"Apple\", \"Apple Watch\").\n.decl Fixes(Company:symbol, Product:symbol)\nFixes(\"watchmaker\", \"Apple Watch\").\n.decl Answer()\nAnswer() :- Makes(company, \"Apple Watch\"), Fixes(company, \"Apple Watch\").\n.output Answer\n\n", "completions": [".decl Makes(Company:symbol, Product:symbol)\nMakes(\"Apple\", \"Apple Watch\").\n.decl Fixes(Company:symbol, Product:symbol)\nFixes(\"watchmaker\", \"Apple Watch\").\n.decl Answer()\nAnswer() :- Makes(company, \"Apple Watch\"), Fixes(company, \"Apple Watch\").\n.output Answer\n\n"]}
{"id": 1628, "answer": false, "completion": ".decl Has_language(Animal:symbol, Language:symbol)\nHas_language(\"pig\", \"pig latin\").\n.decl Answer()\nAnswer() :- !Has_language(\"pig\", \"pig latin\").\n.output Answer\n\n\n", "completions": [".decl Has_language(Animal:symbol, Language:symbol)\nHas_language(\"pig\", \"pig latin\").\n.decl Answer()\nAnswer() :- !Has_language(\"pig\", \"pig latin\").\n.output Answer\n\n\n"]}
{"id": 1629, "answer": false, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Michael Jordan\", \"United States\").\n.decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Michael Jordan\", \"basketball player\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Michael Jordan\", \"United States\"), Has_profession(\"Michael Jordan\", \"cook\").\n.output Answer\n\n", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Michael Jordan\", \"United States\").\n.decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Michael Jordan\", \"basketball player\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Michael Jordan\", \"United States\"), Has_profession(\"Michael Jordan\", \"cook\").\n.output Answer\n\n"]}
{"id": 1630, "answer": true, "completion": ".decl Friends(Person_A:symbol, Person_B:symbol)\nFriends(\"Jacques Duèze\", \"Richard Dawkins\").\n.decl Answer()\nAnswer() :- Friends(\"Jacques Duèze\", \"Richard Dawkins\").\n.output Answer\n\n", "completions": [".decl Friends(Person_A:symbol, Person_B:symbol)\nFriends(\"Jacques Duèze\", \"Richard Dawkins\").\n.decl Answer()\nAnswer() :- Friends(\"Jacques Duèze\", \"Richard Dawkins\").\n.output Answer\n\n"]}
{"id": 1631, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"spider\", \"parasite\").\n.decl Helps(Animal_A:symbol, Animal_B:symbol)\nHelps(\"spider\", \"eggplant farmer\").\n.decl Answer()\nAnswer() :- Eats(\"spider\", \"parasite\"), Helps(\"spider\", \"eggplant farmer\").\n.output Answer\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"spider\", \"parasite\").\n.decl Helps(Animal_A:symbol, Animal_B:symbol)\nHelps(\"spider\", \"eggplant farmer\").\n.decl Answer()\nAnswer() :- Eats(\"spider\", \"parasite\"), Helps(\"spider\", \"eggplant farmer\").\n.output Answer\n\n"]}
{"id": 1632, "answer": true, "completion": ".decl Requires(Industry:symbol, Animal:symbol)\nRequires(\"butter industry\", \"cow\").\n.decl Answer()\nAnswer() :- Requires(\"butter industry\", \"cow\").\n.output Answer\n\n", "completions": [".decl Requires(Industry:symbol, Animal:symbol)\nRequires(\"butter industry\", \"cow\").\n.decl Answer()\nAnswer() :- Requires(\"butter industry\", \"cow\").\n.output Answer\n\n"]}
{"id": 1633, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"chipmunk\", 0.00001).\nHas_volume(\"chocolate chip\", 0.000001).\n.decl Answer()\nAnswer() :- Has_volume(\"chipmunk\", volume1), Has_volume(\"chocolate chip\", volume2), volume1 >= 100 * volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"chipmunk\", 0.00001).\nHas_volume(\"chocolate chip\", 0.000001).\n.decl Answer()\nAnswer() :- Has_volume(\"chipmunk\", volume1), Has_volume(\"chocolate chip\", volume2), volume1 >= 100 * volume2.\n.output Answer\n\n"]}
{"id": 1634, "answer": false, "completion": ".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Dorton Arena\", 7500).\n.decl Passes_through(Place:symbol, N_people:float)\nPasses_through(\"30th Street Station\", 30000).\n.decl Answer()\nAnswer() :- Passes_through(\"30th Street Station\", n_people), Has_capacity(\"Dorton Arena\", capacity), n_people <= capacity.\n.output Answer\n\n", "completions": [".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Dorton Arena\", 7500).\n.decl Passes_through(Place:symbol, N_people:float)\nPasses_through(\"30th Street Station\", 30000).\n.decl Answer()\nAnswer() :- Passes_through(\"30th Street Station\", n_people), Has_capacity(\"Dorton Arena\", capacity), n_people <= capacity.\n.output Answer\n\n"]}
{"id": 1635, "answer": true, "completion": ".decl Is_poisonous_to(Plant:symbol, Animal:symbol)\nIs_poisonous_to(\"basil\", \"Hypervitaminosis D\").\n.decl Answer()\nAnswer() :- Is_poisonous_to(\"basil\", \"Hypervitaminosis D\").\n.output Answer\n\n", "completions": [".decl Is_poisonous_to(Plant:symbol, Animal:symbol)\nIs_poisonous_to(\"basil\", \"Hypervitaminosis D\").\n.decl Answer()\nAnswer() :- Is_poisonous_to(\"basil\", \"Hypervitaminosis D\").\n.output Answer\n\n"]}
{"id": 1636, "answer": false, "completion": ".decl Spoken_in(Language:symbol, Country:symbol)\nSpoken_in(\"Cantonese\", \"China\").\nSpoken_in(\"Japanese\", \"Japan\").\n.decl Answer()\nAnswer() :- Spoken_in(\"Cantonese\", \"Japan\").\n.output Answer\n\n", "completions": [".decl Spoken_in(Language:symbol, Country:symbol)\nSpoken_in(\"Cantonese\", \"China\").\nSpoken_in(\"Japanese\", \"Japan\").\n.decl Answer()\nAnswer() :- Spoken_in(\"Cantonese\", \"Japan\").\n.output Answer\n\n"]}
{"id": 1637, "answer": true, "completion": ".decl Is_familiar_with(Person:symbol, Event:symbol)\nIs_familiar_with(\"Amy Winehouse\", \"Brexit\").\n.decl Answer()\nAnswer() :- Is_familiar_with(\"Amy Winehouse\", \"Brexit\").\n.output Answer\n\n", "completions": [".decl Is_familiar_with(Person:symbol, Event:symbol)\nIs_familiar_with(\"Amy Winehouse\", \"Brexit\").\n.decl Answer()\nAnswer() :- Is_familiar_with(\"Amy Winehouse\", \"Brexit\").\n.output Answer\n\n"]}
{"id": 1638, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Blue\", \"Blue\").\n.decl Has_price(Object:symbol, Price:float)\nHas_price(\"Blue\", 1).\n.decl Answer()\nAnswer() :- Has_color(object1, \"Blue\"), Has_price(object1, price1), Has_color(object2, color2), Has_price(object2, price2), price1 > price2.\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Blue\", \"Blue\").\n.decl Has_price(Object:symbol, Price:float)\nHas_price(\"Blue\", 1).\n.decl Answer()\nAnswer() :- Has_color(object1, \"Blue\"), Has_price(object1, price1), Has_color(object2, color2), Has_price(object2, price2), price1 > price2.\n.output Answer\n\n"]}
{"id": 1639, "answer": true, "completion": ".decl Written_before(Book1:symbol, Book2:symbol)\nWritten_before(\"The Canterbury Tales\", \"One Thousand and One Nights\").\n.decl Answer()\nAnswer() :- Written_before(\"The Canterbury Tales\", \"One Thousand and One Nights\").\n.output Answer\n\n", "completions": [".decl Written_before(Book1:symbol, Book2:symbol)\nWritten_before(\"The Canterbury Tales\", \"One Thousand and One Nights\").\n.decl Answer()\nAnswer() :- Written_before(\"The Canterbury Tales\", \"One Thousand and One Nights\").\n.output Answer\n\n"]}
{"id": 1640, "answer": true, "completion": ".decl Has_n_neurons(Organism:symbol, N_neurons:float)\nHas_n_neurons(\"cnidarians\", 0).\nHas_n_neurons(\"humans\", 10000000000).\n.decl Answer()\nAnswer() :- Has_n_neurons(\"cnidarians\", n_neurons1), Has_n_neurons(\"humans\", n_neurons2), n_neurons1 < n_neurons2.\n.output Answer\n\n\n", "completions": [".decl Has_n_neurons(Organism:symbol, N_neurons:float)\nHas_n_neurons(\"cnidarians\", 0).\nHas_n_neurons(\"humans\", 10000000000).\n.decl Answer()\nAnswer() :- Has_n_neurons(\"cnidarians\", n_neurons1), Has_n_neurons(\"humans\", n_neurons2), n_neurons1 < n_neurons2.\n.output Answer\n\n\n"]}
{"id": 1641, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Little Women\", \"1868\").\nHappens_in_time(\"civil war\", \"1861-1865\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Little Women\", time1), Happens_in_time(\"civil war\", time2), time1 >= time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Little Women\", \"1868\").\nHappens_in_time(\"civil war\", \"1861-1865\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Little Women\", time1), Happens_in_time(\"civil war\", time2), time1 >= time2.\n.output Answer\n\n"]}
{"id": 1642, "answer": true, "completion": ".decl Explodes(Object:symbol)\nExplodes(\"sloth\").\n.decl Answer()\nAnswer() :- Explodes(\"sloth\").\n.output Answer\n\n", "completions": [".decl Explodes(Object:symbol)\nExplodes(\"sloth\").\n.decl Answer()\nAnswer() :- Explodes(\"sloth\").\n.output Answer\n\n"]}
{"id": 1643, "answer": true, "completion": ".decl Has_hobby(Person:symbol, Hobby:symbol)\nHas_hobby(\"birdwatcher\", \"birdwatching\").\n.decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"Philadelphia Eagles game\", \"Lincoln Financial Field\").\n.decl Answer()\nAnswer() :- Has_hobby(\"birdwatcher\", \"birdwatching\"), Happens_at(\"Philadelphia Eagles game\", \"Lincoln Financial Field\").\n.output Answer\n\n", "completions": [".decl Has_hobby(Person:symbol, Hobby:symbol)\nHas_hobby(\"birdwatcher\", \"birdwatching\").\n.decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"Philadelphia Eagles game\", \"Lincoln Financial Field\").\n.decl Answer()\nAnswer() :- Has_hobby(\"birdwatcher\", \"birdwatching\"), Happens_at(\"Philadelphia Eagles game\", \"Lincoln Financial Field\").\n.output Answer\n\n"]}
{"id": 1644, "answer": true, "completion": ".decl Threatens(Thing_A:symbol, Thing_B:symbol)\nThreatens(\"pigment from copper\", \"fungal life-form\").\n.decl Answer()\nAnswer() :- Threatens(thing, \"fungal life-form\").\n.output Answer\n\n", "completions": [".decl Threatens(Thing_A:symbol, Thing_B:symbol)\nThreatens(\"pigment from copper\", \"fungal life-form\").\n.decl Answer()\nAnswer() :- Threatens(thing, \"fungal life-form\").\n.output Answer\n\n"]}
{"id": 1645, "answer": true, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"beaver dams\", \"flooding\").\n.decl Causes(Event:symbol, Effect:symbol)\nCauses(\"flooding\", \"suffering\").\n.decl Answer()\nAnswer() :- Has_property(\"beaver dams\", property), Causes(property, \"suffering\").\n.output Answer\n\n\n", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"beaver dams\", \"flooding\").\n.decl Causes(Event:symbol, Effect:symbol)\nCauses(\"flooding\", \"suffering\").\n.decl Answer()\nAnswer() :- Has_property(\"beaver dams\", property), Causes(property, \"suffering\").\n.output Answer\n\n\n"]}
{"id": 1646, "answer": false, "completion": ".decl Is_useful_to(Object:symbol, Animal:symbol)\nIs_useful_to(\"Quartz\", \"humans\").\n.decl Is_useful_to(Object:symbol, Animal:symbol)\nIs_useful_to(\"oxygen\", \"humans\").\n.decl Answer()\nAnswer() :- Is_useful_to(\"Quartz\", \"humans\"), !Is_useful_to(\"oxygen\", \"humans\").\n.output Answer\n\n", "completions": [".decl Is_useful_to(Object:symbol, Animal:symbol)\nIs_useful_to(\"Quartz\", \"humans\").\n.decl Is_useful_to(Object:symbol, Animal:symbol)\nIs_useful_to(\"oxygen\", \"humans\").\n.decl Answer()\nAnswer() :- Is_useful_to(\"Quartz\", \"humans\"), !Is_useful_to(\"oxygen\", \"humans\").\n.output Answer\n\n"]}
{"id": 1647, "answer": false, "completion": ".decl Has_n_cards(Game:symbol, N_cards:float)\nHas_n_cards(\"Illuminati card game\", 110).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 2).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 3).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 4).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 5).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 6).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 7).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 8).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 9).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 10).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 11).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 12).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 13).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 14).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 15).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 16).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 17).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 18).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 19).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 20).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 21).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 22).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 23).\n.decl Has_n_players(Game:symbol, N_players:", "completions": [".decl Has_n_cards(Game:symbol, N_cards:float)\nHas_n_cards(\"Illuminati card game\", 110).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 2).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 3).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 4).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 5).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 6).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 7).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 8).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 9).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 10).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 11).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 12).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 13).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 14).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 15).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 16).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 17).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 18).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 19).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 20).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 21).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 22).\n.decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"Illuminati card game\", 23).\n.decl Has_n_players(Game:symbol, N_players:"]}
{"id": 1648, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Bing\", 0.5).\n.decl Can_hold(Container:symbol, Object:symbol)\nCan_hold(\"basket\", \"Bing\").\n.decl Answer()\nAnswer() :- Has_weight(\"Bing\", weight), Can_hold(\"basket\", \"Bing\").\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Bing\", 0.5).\n.decl Can_hold(Container:symbol, Object:symbol)\nCan_hold(\"basket\", \"Bing\").\n.decl Answer()\nAnswer() :- Has_weight(\"Bing\", weight), Can_hold(\"basket\", \"Bing\").\n.output Answer\n\n"]}
{"id": 1649, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Parc des Princes\", \"June 2020\").\n.decl Is_operational(Event:symbol)\nIs_operational(\"Parc des Princes\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Parc des Princes\", time), Is_operational(\"Parc des Princes\").\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Parc des Princes\", \"June 2020\").\n.decl Is_operational(Event:symbol)\nIs_operational(\"Parc des Princes\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Parc des Princes\", time), Is_operational(\"Parc des Princes\").\n.output Answer\n\n"]}
{"id": 1650, "answer": false, "completion": ".decl Sponsors(Company:symbol, Event:symbol)\nSponsors(\"Chick-fil-A\", \"Pride parade\").\n.decl Answer()\nAnswer() :- !Sponsors(\"Chick-fil-A\", \"Pride parade\").\n.output Answer\n\n", "completions": [".decl Sponsors(Company:symbol, Event:symbol)\nSponsors(\"Chick-fil-A\", \"Pride parade\").\n.decl Answer()\nAnswer() :- !Sponsors(\"Chick-fil-A\", \"Pride parade\").\n.output Answer\n\n"]}
{"id": 1651, "answer": true, "completion": ".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"Lake Superior\", \"Great Lakes\").\nIs_part_of(\"Lake Michigan\", \"Great Lakes\").\nIs_part_of(\"Lake Huron\", \"Great Lakes\").\nIs_part_of(\"Lake Erie\", \"Great Lakes\").\nIs_part_of(\"Lake Ontario\", \"Great Lakes\").\nIs_part_of(\"Great Lakes\", \"United States\").\nIs_part_of(\"Great Lakes\", \"Canada\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Great Lakes\", country1), Is_part_of(\"Great Lakes\", country2), country1 != country2.\n.output Answer\n\n", "completions": [".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"Lake Superior\", \"Great Lakes\").\nIs_part_of(\"Lake Michigan\", \"Great Lakes\").\nIs_part_of(\"Lake Huron\", \"Great Lakes\").\nIs_part_of(\"Lake Erie\", \"Great Lakes\").\nIs_part_of(\"Lake Ontario\", \"Great Lakes\").\nIs_part_of(\"Great Lakes\", \"United States\").\nIs_part_of(\"Great Lakes\", \"Canada\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Great Lakes\", country1), Is_part_of(\"Great Lakes\", country2), country1 != country2.\n.output Answer\n\n"]}
{"id": 1652, "answer": false, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Jon Brower Minnoch\", \"obesity\").\n.decl Answer()\nAnswer() :- Has_disease(\"Jon Brower Minnoch\", \"anorexia nervosa\").\n.output Answer\n\n", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Jon Brower Minnoch\", \"obesity\").\n.decl Answer()\nAnswer() :- Has_disease(\"Jon Brower Minnoch\", \"anorexia nervosa\").\n.output Answer\n\n"]}
{"id": 1653, "answer": true, "completion": ".decl Signed(Person:symbol, Document:symbol)\nSigned(\"Larry King\", \"Magna Carta\").\n.decl Answer()\nAnswer() :- Signed(\"Larry King\", \"Magna Carta\").\n.output Answer\n\n", "completions": [".decl Signed(Person:symbol, Document:symbol)\nSigned(\"Larry King\", \"Magna Carta\").\n.decl Answer()\nAnswer() :- Signed(\"Larry King\", \"Magna Carta\").\n.output Answer\n\n"]}
{"id": 1654, "answer": false, "completion": ".decl Has_name_origin(Object:symbol, Name_origin:symbol)\nHas_name_origin(\"Phobos\", \"Greek\").\nHas_name_origin(\"Pavor\", \"Roman\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Phobos\", name_origin1), Has_name_origin(\"Pavor\", name_origin2), name_origin1 = name_origin2.\n.output Answer\n\n\n", "completions": [".decl Has_name_origin(Object:symbol, Name_origin:symbol)\nHas_name_origin(\"Phobos\", \"Greek\").\nHas_name_origin(\"Pavor\", \"Roman\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Phobos\", name_origin1), Has_name_origin(\"Pavor\", name_origin2), name_origin1 = name_origin2.\n.output Answer\n\n\n"]}
{"id": 1655, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"honey badger\", \"snake\").\n.decl Answer()\nAnswer() :- Eats(animal, \"snake\").\n.output Answer\n\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"honey badger\", \"snake\").\n.decl Answer()\nAnswer() :- Eats(animal, \"snake\").\n.output Answer\n\n\n"]}
{"id": 1656, "answer": true, "completion": ".decl Has_anatomy(Animal:symbol, Anatomy:symbol)\nHas_anatomy(\"honey badger\", \"strong jaws\").\nHas_anatomy(\"honey badger\", \"sharp claws\").\nHas_anatomy(\"honey badger\", \"thick skin\").\nHas_anatomy(\"hyena\", \"strong jaws\").\nHas_anatomy(\"hyena\", \"sharp claws\").\nHas_anatomy(\"hyena\", \"thick skin\").\n.decl Answer()\nAnswer() :- Has_anatomy(\"honey badger\", anatomy1), Has_anatomy(\"hyena\", anatomy2), anatomy1 != anatomy2.\n.output Answer\n\n", "completions": [".decl Has_anatomy(Animal:symbol, Anatomy:symbol)\nHas_anatomy(\"honey badger\", \"strong jaws\").\nHas_anatomy(\"honey badger\", \"sharp claws\").\nHas_anatomy(\"honey badger\", \"thick skin\").\nHas_anatomy(\"hyena\", \"strong jaws\").\nHas_anatomy(\"hyena\", \"sharp claws\").\nHas_anatomy(\"hyena\", \"thick skin\").\n.decl Answer()\nAnswer() :- Has_anatomy(\"honey badger\", anatomy1), Has_anatomy(\"hyena\", anatomy2), anatomy1 != anatomy2.\n.output Answer\n\n"]}
{"id": 1657, "answer": false, "completion": ".decl Has_concern(Person:symbol, Concern:symbol)\nHas_concern(\"Noah\", \"flood\").\n.decl Answer()\nAnswer() :- Has_concern(\"Noah\", \"buoyancy\").\n.output Answer\n\n", "completions": [".decl Has_concern(Person:symbol, Concern:symbol)\nHas_concern(\"Noah\", \"flood\").\n.decl Answer()\nAnswer() :- Has_concern(\"Noah\", \"buoyancy\").\n.output Answer\n\n"]}
{"id": 1658, "answer": true, "completion": ".decl Is_hostile_to(Country:symbol, Country2:symbol)\nIs_hostile_to(\"Iran\", \"Israel\").\nIs_hostile_to(\"Iraq\", \"Israel\").\nIs_hostile_to(\"Syria\", \"Israel\").\nIs_hostile_to(\"Lebanon\", \"Israel\").\n.decl Is_Muslim(Country:symbol)\nIs_Muslim(\"Iran\").\nIs_Muslim(\"Iraq\").\nIs_Muslim(\"Syria\").\nIs_Muslim(\"Lebanon\").\n.decl Answer()\nAnswer() :- Is_Muslim(country), Is_hostile_to(country, \"Israel\").\n.output Answer\n\n", "completions": [".decl Is_hostile_to(Country:symbol, Country2:symbol)\nIs_hostile_to(\"Iran\", \"Israel\").\nIs_hostile_to(\"Iraq\", \"Israel\").\nIs_hostile_to(\"Syria\", \"Israel\").\nIs_hostile_to(\"Lebanon\", \"Israel\").\n.decl Is_Muslim(Country:symbol)\nIs_Muslim(\"Iran\").\nIs_Muslim(\"Iraq\").\nIs_Muslim(\"Syria\").\nIs_Muslim(\"Lebanon\").\n.decl Answer()\nAnswer() :- Is_Muslim(country), Is_hostile_to(country, \"Israel\").\n.output Answer\n\n"]}
{"id": 1659, "answer": false, "completion": ".decl Has_n_connections(Person:symbol, N_connections:float)\nHas_n_connections(\"Kim Il-sung\", 0).\n.decl Answer()\nAnswer() :- Has_n_connections(\"Kim Il-sung\", n_connections), n_connections > 0.\n.output Answer\n\n", "completions": [".decl Has_n_connections(Person:symbol, N_connections:float)\nHas_n_connections(\"Kim Il-sung\", 0).\n.decl Answer()\nAnswer() :- Has_n_connections(\"Kim Il-sung\", n_connections), n_connections > 0.\n.output Answer\n\n"]}
{"id": 1660, "answer": false, "completion": ".decl Is_ingredient_of(Ingredient:symbol, Drink:symbol)\nIs_ingredient_of(\"ethanol\", \"beer\").\nIs_ingredient_of(\"ethanol\", \"wine\").\nIs_ingredient_of(\"ethanol\", \"whiskey\").\nIs_ingredient_of(\"ethanol\", \"vodka\").\nIs_ingredient_of(\"ethanol\", \"rum\").\nIs_ingredient_of(\"ethanol\", \"tequila\").\nIs_ingredient_of(\"ethanol\", \"gin\").\nIs_ingredient_of(\"ethanol\", \"brandy\").\nIs_ingredient_of(\"ethanol\", \"absinthe\").\nIs_ingredient_of(\"ethanol\", \"sake\").\nIs_ingredient_of(\"ethanol\", \"soju\").\nIs_ingredient_of(\"ethanol\", \"mead\").\nIs_ingredient_of(\"ethanol\", \"cider\").\nIs_ingredient_of(\"ethanol\", \"sherry\").\nIs_ingredient_of(\"ethanol\", \"port\").\nIs_ingredient_of(\"ethanol\", \"vermouth\").\nIs_ingredient_of(\"ethanol\", \"champagne\").\nIs_ingredient_of(\"ethanol\", \"cognac\").\nIs_ingredient_of(\"ethanol\", \"liquor\").\nIs_ingredient_of(\"ethanol\", \"liqueur\").\nIs_ingredient_of(\"ethanol\", \"schnapps\").\nIs_ingredient_of(\"ethanol\", \"pastis\").\nIs_ingredient_of(\"ethanol\", \"ouzo\").\nIs_ingredient_of(\"ethanol\", \"rakı\").\nIs_ingredient_of(\"ethanol\", \"pulque\").\nIs_ingredient_of(\"ethanol\", \"arrack\").\nIs_ingredient_of(\"ethanol\", \"soju\").\nIs_ingredient_of(\"ethanol\", \"grappa\").\nIs_ingredient_of(\"ethanol\", \"slivovitz\").\nIs_ingredient_of(\"ethanol\", \"horilka\").\nIs_ingredient_of(\"ethanol\", \"tsipouro\").\nIs_ingredient_of(\"ethanol\", \"rượu đế\").\nIs_ingredient_of(\"ethanol\", \"rượu cần\").\nIs_ingredient_of(\"ethanol\", \"rượu nếp\").\nIs_ingredient_of(\"ethanol\", \"rượu thuốc\").\nIs_ingredient_of(\"ethanol\", \"rượu mạch\").\nIs_ingredient_of(\"ethanol\", \"rượu mạch\").\nIs_ingredient_of(\"ethanol\", \"rượu mạch\").\nu mạch\").\nIs_ingredient_of(\"ethanol\", \"rượu mạch\").\nIs_ingredient_of(\"ethanol\", \"rượu mạch\").\nIs_ingredient_of(\"ethanol\", \"rượu mạch\").\nIs_ingredient_of(\"ethanol\", \"", "completions": [".decl Is_ingredient_of(Ingredient:symbol, Drink:symbol)\nIs_ingredient_of(\"ethanol\", \"beer\").\nIs_ingredient_of(\"ethanol\", \"wine\").\nIs_ingredient_of(\"ethanol\", \"whiskey\").\nIs_ingredient_of(\"ethanol\", \"vodka\").\nIs_ingredient_of(\"ethanol\", \"rum\").\nIs_ingredient_of(\"ethanol\", \"tequila\").\nIs_ingredient_of(\"ethanol\", \"gin\").\nIs_ingredient_of(\"ethanol\", \"brandy\").\nIs_ingredient_of(\"ethanol\", \"absinthe\").\nIs_ingredient_of(\"ethanol\", \"sake\").\nIs_ingredient_of(\"ethanol\", \"soju\").\nIs_ingredient_of(\"ethanol\", \"mead\").\nIs_ingredient_of(\"ethanol\", \"cider\").\nIs_ingredient_of(\"ethanol\", \"sherry\").\nIs_ingredient_of(\"ethanol\", \"port\").\nIs_ingredient_of(\"ethanol\", \"vermouth\").\nIs_ingredient_of(\"ethanol\", \"champagne\").\nIs_ingredient_of(\"ethanol\", \"cognac\").\nIs_ingredient_of(\"ethanol\", \"liquor\").\nIs_ingredient_of(\"ethanol\", \"liqueur\").\nIs_ingredient_of(\"ethanol\", \"schnapps\").\nIs_ingredient_of(\"ethanol\", \"pastis\").\nIs_ingredient_of(\"ethanol\", \"ouzo\").\nIs_ingredient_of(\"ethanol\", \"rakı\").\nIs_ingredient_of(\"ethanol\", \"pulque\").\nIs_ingredient_of(\"ethanol\", \"arrack\").\nIs_ingredient_of(\"ethanol\", \"soju\").\nIs_ingredient_of(\"ethanol\", \"grappa\").\nIs_ingredient_of(\"ethanol\", \"slivovitz\").\nIs_ingredient_of(\"ethanol\", \"horilka\").\nIs_ingredient_of(\"ethanol\", \"tsipouro\").\nIs_ingredient_of(\"ethanol\", \"rượu đế\").\nIs_ingredient_of(\"ethanol\", \"rượu cần\").\nIs_ingredient_of(\"ethanol\", \"rượu nếp\").\nIs_ingredient_of(\"ethanol\", \"rượu thuốc\").\nIs_ingredient_of(\"ethanol\", \"rượu mạch\").\nIs_ingredient_of(\"ethanol\", \"rượu mạch\").\nIs_ingredient_of(\"ethanol\", \"rượu mạch\").\nu mạch\").\nIs_ingredient_of(\"ethanol\", \"rượu mạch\").\nIs_ingredient_of(\"ethanol\", \"rượu mạch\").\nIs_ingredient_of(\"ethanol\", \"rượu mạch\").\nIs_ingredient_of(\"ethanol\", \""]}
{"id": 1661, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\n.decl Has_n_players(Sport:symbol, N_players:float)\nHas_n_players(\"rugby\", 15).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members), Has_n_players(\"rugby\", n_players), n_members >= n_players.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\n.decl Has_n_players(Sport:symbol, N_players:float)\nHas_n_players(\"rugby\", 15).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members), Has_n_players(\"rugby\", n_players), n_members >= n_players.\n.output Answer\n\n"]}
{"id": 1662, "answer": true, "completion": ".decl Destroys(Organ:symbol, Object:symbol)\nDestroys(\"human stomach\", \"bee\").\n.decl Answer()\nAnswer() :- Destroys(\"human stomach\", \"bee\").\n.output Answer\n\n", "completions": [".decl Destroys(Organ:symbol, Object:symbol)\nDestroys(\"human stomach\", \"bee\").\n.decl Answer()\nAnswer() :- Destroys(\"human stomach\", \"bee\").\n.output Answer\n\n"]}
{"id": 1663, "answer": true, "completion": ".decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"Elon Musk\", \"physics\").\n.decl Is_more_likely_to_know_about(Person:symbol, Topic1:symbol, Topic2:symbol)\nIs_more_likely_to_know_about(\"Elon Musk\", \"physics\", \"astrology\").\n.decl Answer()\nAnswer() :- Knows_about(\"Elon Musk\", topic1), Is_more_likely_to_know_about(\"Elon Musk\", topic1, topic2).\n.output Answer\n\n", "completions": [".decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"Elon Musk\", \"physics\").\n.decl Is_more_likely_to_know_about(Person:symbol, Topic1:symbol, Topic2:symbol)\nIs_more_likely_to_know_about(\"Elon Musk\", \"physics\", \"astrology\").\n.decl Answer()\nAnswer() :- Knows_about(\"Elon Musk\", topic1), Is_more_likely_to_know_about(\"Elon Musk\", topic1, topic2).\n.output Answer\n\n"]}
{"id": 1664, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Coast to Coast AM\", 20).\nLast_n_years(\"Rush Limbaugh show\", 20).\n.decl Answer()\nAnswer() :- Last_n_years(\"Coast to Coast AM\", n_years1), Last_n_years(\"Rush Limbaugh show\", n_years2), n_years1 > n_years2.\n.output Answer\n\n", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Coast to Coast AM\", 20).\nLast_n_years(\"Rush Limbaugh show\", 20).\n.decl Answer()\nAnswer() :- Last_n_years(\"Coast to Coast AM\", n_years1), Last_n_years(\"Rush Limbaugh show\", n_years2), n_years1 > n_years2.\n.output Answer\n\n"]}
{"id": 1665, "answer": true, "completion": ".decl Has_label(Group:symbol, Label:symbol)\nHas_label(\"skills-training youth groups\", \"eagles\").\nHas_label(\"skills-training youth groups\", \"young bears\").\n.decl Answer()\nAnswer() :- Has_label(\"skills-training youth groups\", \"eagles\"), Has_label(\"skills-training youth groups\", \"young bears\").\n.output Answer\n\n", "completions": [".decl Has_label(Group:symbol, Label:symbol)\nHas_label(\"skills-training youth groups\", \"eagles\").\nHas_label(\"skills-training youth groups\", \"young bears\").\n.decl Answer()\nAnswer() :- Has_label(\"skills-training youth groups\", \"eagles\"), Has_label(\"skills-training youth groups\", \"young bears\").\n.output Answer\n\n"]}
{"id": 1666, "answer": false, "completion": ".decl Has_wind_speed(Weather:symbol, Wind_speed:float)\nHas_wind_speed(\"hurricane force winds\", 64).\n.decl Has_wind_speed(Weather:symbol, Wind_speed:float)\nHas_wind_speed(\"bulletin\", 1).\n.decl Answer()\nAnswer() :- Has_wind_speed(\"hurricane force winds\", wind_speed1), Has_wind_speed(\"bulletin\", wind_speed2), wind_speed1 > wind_speed2.\n.output Answer\n\n", "completions": [".decl Has_wind_speed(Weather:symbol, Wind_speed:float)\nHas_wind_speed(\"hurricane force winds\", 64).\n.decl Has_wind_speed(Weather:symbol, Wind_speed:float)\nHas_wind_speed(\"bulletin\", 1).\n.decl Answer()\nAnswer() :- Has_wind_speed(\"hurricane force winds\", wind_speed1), Has_wind_speed(\"bulletin\", wind_speed2), wind_speed1 > wind_speed2.\n.output Answer\n\n"]}
{"id": 1667, "answer": true, "completion": ".decl Has_washing_instructions(Object:symbol, Washing_instructions:symbol)\nHas_washing_instructions(\"wool\", \"hand wash only\").\n.decl Answer()\nAnswer() :- Has_washing_instructions(\"wool\", \"hand wash only\").\n.output Answer\n\n", "completions": [".decl Has_washing_instructions(Object:symbol, Washing_instructions:symbol)\nHas_washing_instructions(\"wool\", \"hand wash only\").\n.decl Answer()\nAnswer() :- Has_washing_instructions(\"wool\", \"hand wash only\").\n.output Answer\n\n"]}
{"id": 1668, "answer": true, "completion": ".decl Has_n_digits(Number:symbol, N_digits:float)\nHas_n_digits(\"ZIP code\", 5).\n.decl Answer()\nAnswer() :- Has_n_digits(\"ZIP code\", n_digits), n_digits/2 > 0.5.\n.output Answer\n\n", "completions": [".decl Has_n_digits(Number:symbol, N_digits:float)\nHas_n_digits(\"ZIP code\", 5).\n.decl Answer()\nAnswer() :- Has_n_digits(\"ZIP code\", n_digits), n_digits/2 > 0.5.\n.output Answer\n\n"]}
{"id": 1669, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"history of Europe\", \"Middle Ages\").\nHappens_in_time(\"history of Europe\", \"Renaissance\").\nHappens_in_time(\"history of Europe\", \"Modern Age\").\nHappens_in_time(\"age of dinosaurs\", \"Jurassic\").\nHappens_in_time(\"age of dinosaurs\", \"Cretaceous\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"history of Europe\", time1), Happens_in_time(\"age of dinosaurs\", time2), time1 = time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"history of Europe\", \"Middle Ages\").\nHappens_in_time(\"history of Europe\", \"Renaissance\").\nHappens_in_time(\"history of Europe\", \"Modern Age\").\nHappens_in_time(\"age of dinosaurs\", \"Jurassic\").\nHappens_in_time(\"age of dinosaurs\", \"Cretaceous\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"history of Europe\", time1), Happens_in_time(\"age of dinosaurs\", time2), time1 = time2.\n.output Answer\n\n"]}
{"id": 1670, "answer": true, "completion": ".decl Has_pain_level(Person:symbol, Pain_level:float)\nHas_pain_level(\"Florence Nightingale\", 1).\nHas_pain_level(\"Saint Peter\", 2).\n.decl Answer()\nAnswer() :- Has_pain_level(\"Florence Nightingale\", pain_level1), Has_pain_level(\"Saint Peter\", pain_level2), pain_level1 < pain_level2.\n.output Answer\n\n", "completions": [".decl Has_pain_level(Person:symbol, Pain_level:float)\nHas_pain_level(\"Florence Nightingale\", 1).\nHas_pain_level(\"Saint Peter\", 2).\n.decl Answer()\nAnswer() :- Has_pain_level(\"Florence Nightingale\", pain_level1), Has_pain_level(\"Saint Peter\", pain_level2), pain_level1 < pain_level2.\n.output Answer\n\n"]}
{"id": 1671, "answer": true, "completion": ".decl Can_destroy(Object_A:symbol, Object_B:symbol)\nCan_destroy(\"hammer\", \"firewall\").\n.decl Answer()\nAnswer() :- Can_destroy(\"hammer\", \"firewall\").\n.output Answer\n\n", "completions": [".decl Can_destroy(Object_A:symbol, Object_B:symbol)\nCan_destroy(\"hammer\", \"firewall\").\n.decl Answer()\nAnswer() :- Can_destroy(\"hammer\", \"firewall\").\n.output Answer\n\n"]}
{"id": 1672, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Martin Luther\", 180).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"theses\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"theses\", n_days1), Last_n_days(\"Martin Luther\", n_days2), n_days1 <= n_days2.\n.output Answer\n\n", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Martin Luther\", 180).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"theses\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"theses\", n_days1), Last_n_days(\"Martin Luther\", n_days2), n_days1 <= n_days2.\n.output Answer\n\n"]}
{"id": 1673, "answer": true, "completion": ".decl Has_n_options(Box:symbol, N_options:float)\nHas_n_options(\"Sudoku box\", 9).\n.decl Has_n_symbols(Numeral:symbol, N_symbols:float)\nHas_n_symbols(\"Roman numeral\", 7).\n.decl Answer()\nAnswer() :- Has_n_options(\"Sudoku box\", n_options), Has_n_symbols(\"Roman numeral\", n_symbols), n_options >= n_symbols.\n.output Answer\n\n", "completions": [".decl Has_n_options(Box:symbol, N_options:float)\nHas_n_options(\"Sudoku box\", 9).\n.decl Has_n_symbols(Numeral:symbol, N_symbols:float)\nHas_n_symbols(\"Roman numeral\", 7).\n.decl Answer()\nAnswer() :- Has_n_options(\"Sudoku box\", n_options), Has_n_symbols(\"Roman numeral\", n_symbols), n_options >= n_symbols.\n.output Answer\n\n"]}
{"id": 1674, "answer": true, "completion": ".decl Supports(Person:symbol, Cause:symbol)\nSupports(\"Alistair Darling\", \"Scottish independence\").\n.decl Answer()\nAnswer() :- Supports(\"Alistair Darling\", \"Scottish independence\").\n.output Answer\n\n", "completions": [".decl Supports(Person:symbol, Cause:symbol)\nSupports(\"Alistair Darling\", \"Scottish independence\").\n.decl Answer()\nAnswer() :- Supports(\"Alistair Darling\", \"Scottish independence\").\n.output Answer\n\n"]}
{"id": 1675, "answer": false, "completion": ".decl Comes_alive(Object:symbol, Movie:symbol)\nComes_alive(\"candlestick\", \"Beauty and the Beast\").\nComes_alive(\"teapot\", \"Beauty and the Beast\").\nComes_alive(\"clock\", \"Beauty and the Beast\").\nComes_alive(\"feather duster\", \"Beauty and the Beast\").\n.decl Is_animate(Object:symbol)\nIs_animate(\"candlestick\").\nIs_animate(\"teapot\").\nIs_animate(\"clock\").\nIs_animate(\"feather duster\").\n.decl Answer()\nAnswer() :- Comes_alive(object, \"Beauty and the Beast\"), !Is_animate(object).\n.output Answer\n\n", "completions": [".decl Comes_alive(Object:symbol, Movie:symbol)\nComes_alive(\"candlestick\", \"Beauty and the Beast\").\nComes_alive(\"teapot\", \"Beauty and the Beast\").\nComes_alive(\"clock\", \"Beauty and the Beast\").\nComes_alive(\"feather duster\", \"Beauty and the Beast\").\n.decl Is_animate(Object:symbol)\nIs_animate(\"candlestick\").\nIs_animate(\"teapot\").\nIs_animate(\"clock\").\nIs_animate(\"feather duster\").\n.decl Answer()\nAnswer() :- Comes_alive(object, \"Beauty and the Beast\"), !Is_animate(object).\n.output Answer\n\n"]}
{"id": 1676, "answer": false, "completion": ".decl Has_n_offspring(Species:symbol, N_offspring:float)\nHas_n_offspring(\"bottlenose dolphins\", 1).\nHas_n_offspring(\"human women\", 1).\n.decl Answer()\nAnswer() :- Has_n_offspring(\"bottlenose dolphins\", n_offspring1), Has_n_offspring(\"human women\", n_offspring2), n_offspring1 > n_offspring2.\n.output Answer\n\n", "completions": [".decl Has_n_offspring(Species:symbol, N_offspring:float)\nHas_n_offspring(\"bottlenose dolphins\", 1).\nHas_n_offspring(\"human women\", 1).\n.decl Answer()\nAnswer() :- Has_n_offspring(\"bottlenose dolphins\", n_offspring1), Has_n_offspring(\"human women\", n_offspring2), n_offspring1 > n_offspring2.\n.output Answer\n\n"]}
{"id": 1677, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Scooby Doo\", 0.00001).\nHas_volume(\"kangaroo pouch\", 0.00002).\n.decl Answer()\nAnswer() :- Has_volume(\"Scooby Doo\", volume1), Has_volume(\"kangaroo pouch\", volume2), volume1 <= volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Scooby Doo\", 0.00001).\nHas_volume(\"kangaroo pouch\", 0.00002).\n.decl Answer()\nAnswer() :- Has_volume(\"Scooby Doo\", volume1), Has_volume(\"kangaroo pouch\", volume2), volume1 <= volume2.\n.output Answer\n\n"]}
{"id": 1678, "answer": true, "completion": ".decl Has_n_movies(Person:symbol, N_movies:float)\nHas_n_movies(\"Julia Roberts\", 50).\nHas_n_movies(\"Eric Roberts\", 200).\n.decl Answer()\nAnswer() :- Has_n_movies(\"Julia Roberts\", n_movies1), Has_n_movies(\"Eric Roberts\", n_movies2), n_movies1 < n_movies2.\n.output Answer\n\n", "completions": [".decl Has_n_movies(Person:symbol, N_movies:float)\nHas_n_movies(\"Julia Roberts\", 50).\nHas_n_movies(\"Eric Roberts\", 200).\n.decl Answer()\nAnswer() :- Has_n_movies(\"Julia Roberts\", n_movies1), Has_n_movies(\"Eric Roberts\", n_movies2), n_movies1 < n_movies2.\n.output Answer\n\n"]}
{"id": 1679, "answer": true, "completion": ".decl Has_magnification(Instrument:symbol, Magnification:float)\nHas_magnification(\"binoculars\", 10).\nHas_magnification(\"telescope\", 100).\n.decl Answer()\nAnswer() :- Has_magnification(\"binoculars\", magnification1), Has_magnification(\"telescope\", magnification2), magnification1 < magnification2.\n.output Answer\n\n", "completions": [".decl Has_magnification(Instrument:symbol, Magnification:float)\nHas_magnification(\"binoculars\", 10).\nHas_magnification(\"telescope\", 100).\n.decl Answer()\nAnswer() :- Has_magnification(\"binoculars\", magnification1), Has_magnification(\"telescope\", magnification2), magnification1 < magnification2.\n.output Answer\n\n"]}
{"id": 1680, "answer": true, "completion": ".decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"Ringo Starr\", \"vegetarian\").\n.decl Is_ingredient(Ingredient:symbol, Dish:symbol)\nIs_ingredient(\"pot roast\", \"pot roast\").\n.decl Answer()\nAnswer() :- Has_diet(\"Ringo Starr\", \"vegetarian\"), Is_ingredient(\"pot roast\", \"pot roast\").\n.output Answer\n\n", "completions": [".decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"Ringo Starr\", \"vegetarian\").\n.decl Is_ingredient(Ingredient:symbol, Dish:symbol)\nIs_ingredient(\"pot roast\", \"pot roast\").\n.decl Answer()\nAnswer() :- Has_diet(\"Ringo Starr\", \"vegetarian\"), Is_ingredient(\"pot roast\", \"pot roast\").\n.output Answer\n\n"]}
{"id": 1681, "answer": true, "completion": ".decl Diagnosed_with(Person:symbol, Disease:symbol)\nDiagnosed_with(\"person\", \"Great Depression\").\n.decl Answer()\nAnswer() :- Diagnosed_with(\"person\", \"Great Depression\").\n.output Answer\n\n", "completions": [".decl Diagnosed_with(Person:symbol, Disease:symbol)\nDiagnosed_with(\"person\", \"Great Depression\").\n.decl Answer()\nAnswer() :- Diagnosed_with(\"person\", \"Great Depression\").\n.output Answer\n\n"]}
{"id": 1682, "answer": true, "completion": ".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Mercury\", 167).\n.decl Is_warm_weather_attire(Clothing:symbol)\nIs_warm_weather_attire(\"shorts\").\nIs_warm_weather_attire(\"t-shirt\").\n.decl Answer()\nAnswer() :- Has_temperature(\"Mercury\", temperature), temperature > 100, Is_warm_weather_attire(clothing).\n.output Answer\n\n", "completions": [".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Mercury\", 167).\n.decl Is_warm_weather_attire(Clothing:symbol)\nIs_warm_weather_attire(\"shorts\").\nIs_warm_weather_attire(\"t-shirt\").\n.decl Answer()\nAnswer() :- Has_temperature(\"Mercury\", temperature), temperature > 100, Is_warm_weather_attire(clothing).\n.output Answer\n\n"]}
{"id": 1683, "answer": false, "completion": ".decl Writes(Person:symbol, Book:symbol)\nWrites(\"J. K. Rowling\", \"Harry Potter and the Philosopher's Stone\").\nWrites(\"J. K. Rowling\", \"Harry Potter and the Chamber of Secrets\").\nWrites(\"J. K. Rowling\", \"Harry Potter and the Prisoner of Azkaban\").\nWrites(\"J. K. Rowling\", \"Harry Potter and the Goblet of Fire\").\nWrites(\"J. K. Rowling\", \"Harry Potter and the Order of the Phoenix\").\nWrites(\"J. K. Rowling\", \"Harry Potter and the Half-Blood Prince\").\nWrites(\"J. K. Rowling\", \"Harry Potter and the Deathly Hallows\").\n.decl Reads(Person:symbol, Book:symbol)\nReads(\"Helen Keller\", \"The Story of My Life\").\nReads(\"Helen Keller\", \"The World I Live In\").\nReads(\"Helen Keller\", \"The Song of the Stone Wall\").\nReads(\"Helen Keller\", \"Optimism\").\nReads(\"Helen Keller\", \"Midstream: My Later Life\").\nReads(\"Helen Keller\", \"Let Us Have Faith\").\nReads(\"Helen Keller\", \"The Open Door\").\nReads(\"Helen Keller\", \"Out of the Dark\").\nReads(\"Helen Keller\", \"Peace at Eventide\").\nReads(\"Helen Keller\", \"Teacher\").\nReads(\"Helen Keller\", \"My Religion\").\nReads(\"Helen Keller\", \"The Frost King\").\nReads(\"Helen Keller\", \"The Story of My Life\").\nReads(\"Helen Keller\", \"The World I Live In\").\nReads(\"Helen Keller\", \"The Song of the Stone Wall\").\nReads(\"Helen Keller\", \"Optimism\").\nReads(\"Helen Keller\", \"Midstream: My Later Life\").\nReads(\"Helen Keller\", \"Let Us Have Faith\").\nReads(\"Helen Keller\", \"The Open Door\").\nReads(\"Helen Keller\", \"Out of the Dark\").\nReads(\"Helen Keller\", \"Peace at Eventide\").\nReads(\"Helen Keller\", \"Teacher\").\nReads(\"Helen Keller\", \"My Religion\").\nReads(\"Helen Keller\", \"The Frost King\").\n.decl Answer()\nAnswer() :- Reads(\"Helen Keller\", book), Writes(\"J. K. Rowling\", book).\n.output Answer\n\n", "completions": [".decl Writes(Person:symbol, Book:symbol)\nWrites(\"J. K. Rowling\", \"Harry Potter and the Philosopher's Stone\").\nWrites(\"J. K. Rowling\", \"Harry Potter and the Chamber of Secrets\").\nWrites(\"J. K. Rowling\", \"Harry Potter and the Prisoner of Azkaban\").\nWrites(\"J. K. Rowling\", \"Harry Potter and the Goblet of Fire\").\nWrites(\"J. K. Rowling\", \"Harry Potter and the Order of the Phoenix\").\nWrites(\"J. K. Rowling\", \"Harry Potter and the Half-Blood Prince\").\nWrites(\"J. K. Rowling\", \"Harry Potter and the Deathly Hallows\").\n.decl Reads(Person:symbol, Book:symbol)\nReads(\"Helen Keller\", \"The Story of My Life\").\nReads(\"Helen Keller\", \"The World I Live In\").\nReads(\"Helen Keller\", \"The Song of the Stone Wall\").\nReads(\"Helen Keller\", \"Optimism\").\nReads(\"Helen Keller\", \"Midstream: My Later Life\").\nReads(\"Helen Keller\", \"Let Us Have Faith\").\nReads(\"Helen Keller\", \"The Open Door\").\nReads(\"Helen Keller\", \"Out of the Dark\").\nReads(\"Helen Keller\", \"Peace at Eventide\").\nReads(\"Helen Keller\", \"Teacher\").\nReads(\"Helen Keller\", \"My Religion\").\nReads(\"Helen Keller\", \"The Frost King\").\nReads(\"Helen Keller\", \"The Story of My Life\").\nReads(\"Helen Keller\", \"The World I Live In\").\nReads(\"Helen Keller\", \"The Song of the Stone Wall\").\nReads(\"Helen Keller\", \"Optimism\").\nReads(\"Helen Keller\", \"Midstream: My Later Life\").\nReads(\"Helen Keller\", \"Let Us Have Faith\").\nReads(\"Helen Keller\", \"The Open Door\").\nReads(\"Helen Keller\", \"Out of the Dark\").\nReads(\"Helen Keller\", \"Peace at Eventide\").\nReads(\"Helen Keller\", \"Teacher\").\nReads(\"Helen Keller\", \"My Religion\").\nReads(\"Helen Keller\", \"The Frost King\").\n.decl Answer()\nAnswer() :- Reads(\"Helen Keller\", book), Writes(\"J. K. Rowling\", book).\n.output Answer\n\n"]}
{"id": 1684, "answer": true, "completion": ".decl Has_self_harm(Person:symbol)\nHas_self_harm(\"John\").\n.decl Is_recruit(Person:symbol)\nIs_recruit(\"John\").\n.decl Answer()\nAnswer() :- Has_self_harm(person), Is_recruit(person).\n.output Answer\n\n", "completions": [".decl Has_self_harm(Person:symbol)\nHas_self_harm(\"John\").\n.decl Is_recruit(Person:symbol)\nIs_recruit(\"John\").\n.decl Answer()\nAnswer() :- Has_self_harm(person), Is_recruit(person).\n.output Answer\n\n"]}
{"id": 1685, "answer": true, "completion": ".decl Enemies(Person_A:symbol, Person_B:symbol)\nEnemies(\"Jay Thomas\", \"Clayton Moore\").\n.decl Answer()\nAnswer() :- Enemies(\"Jay Thomas\", \"Clayton Moore\").\n.output Answer\n\n", "completions": [".decl Enemies(Person_A:symbol, Person_B:symbol)\nEnemies(\"Jay Thomas\", \"Clayton Moore\").\n.decl Answer()\nAnswer() :- Enemies(\"Jay Thomas\", \"Clayton Moore\").\n.output Answer\n\n"]}
{"id": 1686, "answer": true, "completion": ".decl Uses(Person:symbol, Technology:symbol)\nUses(\"Douglas Adams\", \"email\").\n.decl Is_child(Person:symbol)\nIs_child(\"Douglas Adams\").\n.decl Answer()\nAnswer() :- Uses(\"Douglas Adams\", \"email\"), Is_child(\"Douglas Adams\").\n.output Answer\n\n", "completions": [".decl Uses(Person:symbol, Technology:symbol)\nUses(\"Douglas Adams\", \"email\").\n.decl Is_child(Person:symbol)\nIs_child(\"Douglas Adams\").\n.decl Answer()\nAnswer() :- Uses(\"Douglas Adams\", \"email\"), Is_child(\"Douglas Adams\").\n.output Answer\n\n"]}
{"id": 1687, "answer": true, "completion": ".decl Is_dangerous(Event:symbol)\nIs_dangerous(\"chiropractic manipulations\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"chiropractic manipulations\").\n.output Answer\n\n", "completions": [".decl Is_dangerous(Event:symbol)\nIs_dangerous(\"chiropractic manipulations\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"chiropractic manipulations\").\n.output Answer\n\n"]}
{"id": 1688, "answer": true, "completion": ".decl Has_n_letters(Name:symbol, N_letters:float)\nHas_n_letters(\"Olivia Newton-John\", 19).\nHas_n_letters(\"Michael Jackson\", 15).\nHas_n_letters(\"Marilyn Monroe\", 14).\n.decl Answer()\nAnswer() :- Has_n_letters(\"Olivia Newton-John\", n_letters1), Has_n_letters(name2, n_letters2), n_letters1 > n_letters2.\n.output Answer\n\n\n", "completions": [".decl Has_n_letters(Name:symbol, N_letters:float)\nHas_n_letters(\"Olivia Newton-John\", 19).\nHas_n_letters(\"Michael Jackson\", 15).\nHas_n_letters(\"Marilyn Monroe\", 14).\n.decl Answer()\nAnswer() :- Has_n_letters(\"Olivia Newton-John\", n_letters1), Has_n_letters(name2, n_letters2), n_letters1 > n_letters2.\n.output Answer\n\n\n"]}
{"id": 1689, "answer": false, "completion": ".decl Has_year(Company:symbol, Year:float)\nHas_year(\"Casio\", 1946).\n.decl Is_composite(Number:float)\nIs_composite(4).\nIs_composite(6).\nIs_composite(8).\nIs_composite(9).\nIs_composite(10).\nIs_composite(12).\nIs_composite(14).\nIs_composite(15).\nIs_composite(16).\nIs_composite(18).\nIs_composite(20).\nIs_composite(21).\nIs_composite(22).\nIs_composite(24).\nIs_composite(25).\nIs_composite(26).\nIs_composite(27).\nIs_composite(28).\nIs_composite(30).\nIs_composite(32).\nIs_composite(33).\nIs_composite(34).\nIs_composite(35).\nIs_composite(36).\nIs_composite(38).\nIs_composite(39).\nIs_composite(40).\nIs_composite(42).\nIs_composite(44).\nIs_composite(45).\nIs_composite(46).\nIs_composite(48).\nIs_composite(49).\nIs_composite(50).\nIs_composite(51).\nIs_composite(52).\nIs_composite(54).\nIs_composite(55).\nIs_composite(56).\nIs_composite(57).\nIs_composite(58).\nIs_composite(60).\nIs_composite(62).\nIs_composite(63).\nIs_composite(64).\nIs_composite(65).\nIs_composite(66).\nIs_composite(68).\nIs_composite(69).\nIs_composite(70).\nIs_composite(72).\nIs_composite(74).\nIs_composite(75).\nIs_composite(76).\nIs_composite(77).\nIs_composite(78).\nIs_composite(80).\nIs_composite(81).\nIs_composite(82).\nIs_composite(84).\nIs_composite(85).\nIs_composite(86).\nIs_composite(87).\nIs_composite(88).\nIs_composite(90).\nIs_composite(91).\nIs_composite(92).\nIs_composite(93).\nIs_composite(94).\nIs_composite(95).\nIs_composite(96).\nIs_composite(98).\nIs_composite(99).\nIs_composite(100).\nIs_composite(102).\nIs_composite(104).\nIs_composite(105).\nIs_composite(106).\nIs_composite(108).\nIs_composite(110).\nIs_composite(111).\nIs_composite(112).\nIs_composite(114).\nIs_composite(115).\nIs_compos", "completions": [".decl Has_year(Company:symbol, Year:float)\nHas_year(\"Casio\", 1946).\n.decl Is_composite(Number:float)\nIs_composite(4).\nIs_composite(6).\nIs_composite(8).\nIs_composite(9).\nIs_composite(10).\nIs_composite(12).\nIs_composite(14).\nIs_composite(15).\nIs_composite(16).\nIs_composite(18).\nIs_composite(20).\nIs_composite(21).\nIs_composite(22).\nIs_composite(24).\nIs_composite(25).\nIs_composite(26).\nIs_composite(27).\nIs_composite(28).\nIs_composite(30).\nIs_composite(32).\nIs_composite(33).\nIs_composite(34).\nIs_composite(35).\nIs_composite(36).\nIs_composite(38).\nIs_composite(39).\nIs_composite(40).\nIs_composite(42).\nIs_composite(44).\nIs_composite(45).\nIs_composite(46).\nIs_composite(48).\nIs_composite(49).\nIs_composite(50).\nIs_composite(51).\nIs_composite(52).\nIs_composite(54).\nIs_composite(55).\nIs_composite(56).\nIs_composite(57).\nIs_composite(58).\nIs_composite(60).\nIs_composite(62).\nIs_composite(63).\nIs_composite(64).\nIs_composite(65).\nIs_composite(66).\nIs_composite(68).\nIs_composite(69).\nIs_composite(70).\nIs_composite(72).\nIs_composite(74).\nIs_composite(75).\nIs_composite(76).\nIs_composite(77).\nIs_composite(78).\nIs_composite(80).\nIs_composite(81).\nIs_composite(82).\nIs_composite(84).\nIs_composite(85).\nIs_composite(86).\nIs_composite(87).\nIs_composite(88).\nIs_composite(90).\nIs_composite(91).\nIs_composite(92).\nIs_composite(93).\nIs_composite(94).\nIs_composite(95).\nIs_composite(96).\nIs_composite(98).\nIs_composite(99).\nIs_composite(100).\nIs_composite(102).\nIs_composite(104).\nIs_composite(105).\nIs_composite(106).\nIs_composite(108).\nIs_composite(110).\nIs_composite(111).\nIs_composite(112).\nIs_composite(114).\nIs_composite(115).\nIs_compos"]}
{"id": 1690, "answer": true, "completion": ".decl Has_grip(Person:symbol, Place:symbol)\nHas_grip(\"Hades\", \"Underworld\").\n.decl Answer()\nAnswer() :- Has_grip(\"Hades\", \"Underworld\").\n.output Answer\n\n", "completions": [".decl Has_grip(Person:symbol, Place:symbol)\nHas_grip(\"Hades\", \"Underworld\").\n.decl Answer()\nAnswer() :- Has_grip(\"Hades\", \"Underworld\").\n.output Answer\n\n"]}
{"id": 1691, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"George W. Bush\", \"English\").\n.decl Is_native_language(Language:symbol)\nIs_native_language(\"Cantonese\").\n.decl Answer()\nAnswer() :- Speaks(\"George W. Bush\", language), Is_native_language(language).\n.output Answer\n\n", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"George W. Bush\", \"English\").\n.decl Is_native_language(Language:symbol)\nIs_native_language(\"Cantonese\").\n.decl Answer()\nAnswer() :- Speaks(\"George W. Bush\", language), Is_native_language(language).\n.output Answer\n\n"]}
{"id": 1692, "answer": true, "completion": ".decl Is_cruel_and_unusual_punishment(Punishment:symbol)\nIs_cruel_and_unusual_punishment(\"crucifixion\").\n.decl Is_punishment_for(Crime:symbol, Punishment:symbol)\nIs_punishment_for(\"murder\", \"crucifixion\").\n.decl Is_crime_in(Country:symbol, Crime:symbol)\nIs_crime_in(\"United States\", \"murder\").\n.decl Answer()\nAnswer() :- Is_cruel_and_unusual_punishment(punishment), Is_punishment_for(crime, punishment), Is_crime_in(\"United States\", crime).\n.output Answer\n\n", "completions": [".decl Is_cruel_and_unusual_punishment(Punishment:symbol)\nIs_cruel_and_unusual_punishment(\"crucifixion\").\n.decl Is_punishment_for(Crime:symbol, Punishment:symbol)\nIs_punishment_for(\"murder\", \"crucifixion\").\n.decl Is_crime_in(Country:symbol, Crime:symbol)\nIs_crime_in(\"United States\", \"murder\").\n.decl Answer()\nAnswer() :- Is_cruel_and_unusual_punishment(punishment), Is_punishment_for(crime, punishment), Is_crime_in(\"United States\", crime).\n.output Answer\n\n"]}
{"id": 1693, "answer": false, "completion": ".decl Has_cause(Event:symbol, Cause:symbol)\nHas_cause(\"crash\", \"stroke\").\n.decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Dale Earnhardt Jr.\", \"Dale Earnhardt\").\n.decl Answer()\nAnswer() :- Has_father(\"Dale Earnhardt Jr.\", father), Has_cause(\"crash\", cause), Has_cause(father + \"'s crash\", cause).\n.output Answer\n\n", "completions": [".decl Has_cause(Event:symbol, Cause:symbol)\nHas_cause(\"crash\", \"stroke\").\n.decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Dale Earnhardt Jr.\", \"Dale Earnhardt\").\n.decl Answer()\nAnswer() :- Has_father(\"Dale Earnhardt Jr.\", father), Has_cause(\"crash\", cause), Has_cause(father + \"'s crash\", cause).\n.output Answer\n\n"]}
{"id": 1694, "answer": false, "completion": ".decl Has_genre(Book:symbol, Genre:symbol)\nHas_genre(\"And Then There Were None\", \"mystery\").\nHas_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nHas_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nHas_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nHas_genre(\"Harry Potter and the Goblet of Fire\", \"fantasy\").\nHas_genre(\"Harry Potter and the Order of the Phoenix\", \"fantasy\").\nHas_genre(\"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nHas_genre(\"Harry Potter and the Deathly Hallows\", \"fantasy\").\n.decl Wrote(Author:symbol, Book:symbol)\nWrote(\"J.K. Rowling\", \"Harry Potter and the Philosopher's Stone\").\nWrote(\"J.K. Rowling\", \"Harry Potter and the Chamber of Secrets\").\nWrote(\"J.K. Rowling\", \"Harry Potter and the Prisoner of Azkaban\").\nWrote(\"J.K. Rowling\", \"Harry Potter and the Goblet of Fire\").\nWrote(\"J.K. Rowling\", \"Harry Potter and the Order of the Phoenix\").\nWrote(\"J.K. Rowling\", \"Harry Potter and the Half-Blood Prince\").\nWrote(\"J.K. Rowling\", \"Harry Potter and the Deathly Hallows\").\n.decl Answer()\nAnswer() :- Has_genre(\"And Then There Were None\", genre), Wrote(\"J.K. Rowling\", book), Has_genre(book, genre).\n.output Answer\n\n\n", "completions": [".decl Has_genre(Book:symbol, Genre:symbol)\nHas_genre(\"And Then There Were None\", \"mystery\").\nHas_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nHas_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nHas_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nHas_genre(\"Harry Potter and the Goblet of Fire\", \"fantasy\").\nHas_genre(\"Harry Potter and the Order of the Phoenix\", \"fantasy\").\nHas_genre(\"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nHas_genre(\"Harry Potter and the Deathly Hallows\", \"fantasy\").\n.decl Wrote(Author:symbol, Book:symbol)\nWrote(\"J.K. Rowling\", \"Harry Potter and the Philosopher's Stone\").\nWrote(\"J.K. Rowling\", \"Harry Potter and the Chamber of Secrets\").\nWrote(\"J.K. Rowling\", \"Harry Potter and the Prisoner of Azkaban\").\nWrote(\"J.K. Rowling\", \"Harry Potter and the Goblet of Fire\").\nWrote(\"J.K. Rowling\", \"Harry Potter and the Order of the Phoenix\").\nWrote(\"J.K. Rowling\", \"Harry Potter and the Half-Blood Prince\").\nWrote(\"J.K. Rowling\", \"Harry Potter and the Deathly Hallows\").\n.decl Answer()\nAnswer() :- Has_genre(\"And Then There Were None\", genre), Wrote(\"J.K. Rowling\", book), Has_genre(book, genre).\n.output Answer\n\n\n"]}
{"id": 1695, "answer": false, "completion": ".decl Uses(Sport:symbol, Object:symbol)\nUses(\"shooting sports\", \"bullets\").\nUses(\"shooting sports\", \"arrows\").\n.decl Answer()\nAnswer() :- Uses(sport, object), !Uses(sport, \"bullets\").\n.output Answer\n\n", "completions": [".decl Uses(Sport:symbol, Object:symbol)\nUses(\"shooting sports\", \"bullets\").\nUses(\"shooting sports\", \"arrows\").\n.decl Answer()\nAnswer() :- Uses(sport, object), !Uses(sport, \"bullets\").\n.output Answer\n\n"]}
{"id": 1696, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"monolingual American\", \"English\").\n.decl Has_native_name(Company:symbol, Native_name:symbol)\nHas_native_name(\"Lenovo\", \"联想\").\n.decl Answer()\nAnswer() :- Speaks(\"monolingual American\", language), Has_native_name(\"Lenovo\", native_name), language != native_name.\n.output Answer\n\n", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"monolingual American\", \"English\").\n.decl Has_native_name(Company:symbol, Native_name:symbol)\nHas_native_name(\"Lenovo\", \"联想\").\n.decl Answer()\nAnswer() :- Speaks(\"monolingual American\", language), Has_native_name(\"Lenovo\", native_name), language != native_name.\n.output Answer\n\n"]}
{"id": 1697, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"people in Guinea Bissau\", \"Portuguese\").\n.decl Has_language(Film:symbol, Language:symbol)\nHas_language(\"Coen brothers films\", \"English\").\n.decl Answer()\nAnswer() :- Speaks(\"people in Guinea Bissau\", language1), Has_language(\"Coen brothers films\", language2), language1 != language2.\n.output Answer\n\n\n", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"people in Guinea Bissau\", \"Portuguese\").\n.decl Has_language(Film:symbol, Language:symbol)\nHas_language(\"Coen brothers films\", \"English\").\n.decl Answer()\nAnswer() :- Speaks(\"people in Guinea Bissau\", language1), Has_language(\"Coen brothers films\", language2), language1 != language2.\n.output Answer\n\n\n"]}
{"id": 1698, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"baby\", 0.5).\nHas_age(\"baby\", 1).\nHas_age(\"baby\", 2).\nHas_age(\"baby\", 3).\nHas_age(\"baby\", 4).\nHas_age(\"baby\", 5).\nHas_age(\"baby\", 6).\nHas_age(\"baby\", 7).\nHas_age(\"baby\", 8).\nHas_age(\"baby\", 9).\nHas_age(\"baby\", 10).\nHas_age(\"baby\", 11).\nHas_age(\"baby\", 12).\nHas_age(\"baby\", 13).\nHas_age(\"baby\", 14).\nHas_age(\"baby\", 15).\nHas_age(\"baby\", 16).\nHas_age(\"baby\", 17).\nHas_age(\"baby\", 18).\nHas_age(\"baby\", 19).\nHas_age(\"baby\", 20).\nHas_age(\"baby\", 21).\nHas_age(\"baby\", 22).\nHas_age(\"baby\", 23).\nHas_age(\"baby\", 24).\nHas_age(\"baby\", 25).\nHas_age(\"baby\", 26).\nHas_age(\"baby\", 27).\nHas_age(\"baby\", 28).\nHas_age(\"baby\", 29).\nHas_age(\"baby\", 30).\nHas_age(\"baby\", 31).\nHas_age(\"baby\", 32).\nHas_age(\"baby\", 33).\nHas_age(\"baby\", 34).\nHas_age(\"baby\", 35).\nHas_age(\"baby\", 36).\nHas_age(\"baby\", 37).\nHas_age(\"baby\", 38).\nHas_age(\"baby\", 39).\nHas_age(\"baby\", 40).\nHas_age(\"baby\", 41).\nHas_age(\"baby\", 42).\nHas_age(\"baby\", 43).\nHas_age(\"baby\", 44).\nHas_age(\"baby\", 45).\nHas_age(\"baby\", 46).\nHas_age(\"baby\", 47).\nHas_age(\"baby\", 48).\nHas_age(\"baby\", 49).\nHas_age(\"baby\", 50).\nHas_age(\"baby\", 51).\nHas_age(\"baby\", 52).\nHas_age(\"baby\", 53).\nHas_age(\"baby\", 54).\nHas_age(\"baby\", 55).\nHas_age(\"baby\", 56).\nHas_age(\"baby\", 57).\nHas_age(\"baby\", 58).\nHas_age(\"baby\", 59).\nHas_age(\"baby\", 60).\nHas_age(\"baby\", 61).\nHas_age(\"baby\", 62).\nHas_age(\"baby\", 63).\nHas_age(\"baby\", 64).\nHas_age(\"baby\", 65).\nHas_age(\"baby\", 66).\nHas_age(\"baby\", 67).\nHas_age(\"baby\", 68).\nHas_age(\"baby\", 69).\nHas_age(\"baby\", 70).\nHas_age(\"baby\", 71).\nHas_age(\"baby\", 72).\nHas_age(\"baby\", 73).\nHas_age(\"baby\", 74).\nHas_age(\"baby\", 75).\nHas_age(\"baby\", 76).\nHas_age(\"baby\", 77).\nHas_age(\"baby\", 78).\nHas_age(\"baby\", 79).\nHas_age(\"baby\", 80).\nHas_age(\"baby\", 81).\nHas_age(\"baby\", 82).\nHas_age(\"baby\", 83).\nHas_age(\"baby\", 84).\nHas_age(\"baby\", 85).\nHas_age(\"baby\", 86", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"baby\", 0.5).\nHas_age(\"baby\", 1).\nHas_age(\"baby\", 2).\nHas_age(\"baby\", 3).\nHas_age(\"baby\", 4).\nHas_age(\"baby\", 5).\nHas_age(\"baby\", 6).\nHas_age(\"baby\", 7).\nHas_age(\"baby\", 8).\nHas_age(\"baby\", 9).\nHas_age(\"baby\", 10).\nHas_age(\"baby\", 11).\nHas_age(\"baby\", 12).\nHas_age(\"baby\", 13).\nHas_age(\"baby\", 14).\nHas_age(\"baby\", 15).\nHas_age(\"baby\", 16).\nHas_age(\"baby\", 17).\nHas_age(\"baby\", 18).\nHas_age(\"baby\", 19).\nHas_age(\"baby\", 20).\nHas_age(\"baby\", 21).\nHas_age(\"baby\", 22).\nHas_age(\"baby\", 23).\nHas_age(\"baby\", 24).\nHas_age(\"baby\", 25).\nHas_age(\"baby\", 26).\nHas_age(\"baby\", 27).\nHas_age(\"baby\", 28).\nHas_age(\"baby\", 29).\nHas_age(\"baby\", 30).\nHas_age(\"baby\", 31).\nHas_age(\"baby\", 32).\nHas_age(\"baby\", 33).\nHas_age(\"baby\", 34).\nHas_age(\"baby\", 35).\nHas_age(\"baby\", 36).\nHas_age(\"baby\", 37).\nHas_age(\"baby\", 38).\nHas_age(\"baby\", 39).\nHas_age(\"baby\", 40).\nHas_age(\"baby\", 41).\nHas_age(\"baby\", 42).\nHas_age(\"baby\", 43).\nHas_age(\"baby\", 44).\nHas_age(\"baby\", 45).\nHas_age(\"baby\", 46).\nHas_age(\"baby\", 47).\nHas_age(\"baby\", 48).\nHas_age(\"baby\", 49).\nHas_age(\"baby\", 50).\nHas_age(\"baby\", 51).\nHas_age(\"baby\", 52).\nHas_age(\"baby\", 53).\nHas_age(\"baby\", 54).\nHas_age(\"baby\", 55).\nHas_age(\"baby\", 56).\nHas_age(\"baby\", 57).\nHas_age(\"baby\", 58).\nHas_age(\"baby\", 59).\nHas_age(\"baby\", 60).\nHas_age(\"baby\", 61).\nHas_age(\"baby\", 62).\nHas_age(\"baby\", 63).\nHas_age(\"baby\", 64).\nHas_age(\"baby\", 65).\nHas_age(\"baby\", 66).\nHas_age(\"baby\", 67).\nHas_age(\"baby\", 68).\nHas_age(\"baby\", 69).\nHas_age(\"baby\", 70).\nHas_age(\"baby\", 71).\nHas_age(\"baby\", 72).\nHas_age(\"baby\", 73).\nHas_age(\"baby\", 74).\nHas_age(\"baby\", 75).\nHas_age(\"baby\", 76).\nHas_age(\"baby\", 77).\nHas_age(\"baby\", 78).\nHas_age(\"baby\", 79).\nHas_age(\"baby\", 80).\nHas_age(\"baby\", 81).\nHas_age(\"baby\", 82).\nHas_age(\"baby\", 83).\nHas_age(\"baby\", 84).\nHas_age(\"baby\", 85).\nHas_age(\"baby\", 86"]}
{"id": 1699, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Jeremy Irons\", \"acting\").\n.decl Is_child(Person:symbol)\nIs_child(\"Jeremy Irons\").\n.decl Answer()\nAnswer() :- Has_skill(\"Jeremy Irons\", \"sweep picking\"), Is_child(\"Jeremy Irons\").\n.output Answer\n\n", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Jeremy Irons\", \"acting\").\n.decl Is_child(Person:symbol)\nIs_child(\"Jeremy Irons\").\n.decl Answer()\nAnswer() :- Has_skill(\"Jeremy Irons\", \"sweep picking\"), Is_child(\"Jeremy Irons\").\n.output Answer\n\n"]}
{"id": 1700, "answer": false, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Vietnam\", 8.5).\n.decl Has_n_players(League:symbol, N_players:float)\nHas_n_players(\"NBA\", 450).\n.decl Answer()\nAnswer() :- Has_population(\"Vietnam\", population), Has_n_players(\"NBA\", n_players), population > n_players.\n.output Answer\n\n\n", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Vietnam\", 8.5).\n.decl Has_n_players(League:symbol, N_players:float)\nHas_n_players(\"NBA\", 450).\n.decl Answer()\nAnswer() :- Has_population(\"Vietnam\", population), Has_n_players(\"NBA\", n_players), population > n_players.\n.output Answer\n\n\n"]}
{"id": 1701, "answer": true, "completion": ".decl Made_famous(Person:symbol, Person_famous:symbol)\nMade_famous(\"Dr. Seuss\", \"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Made_famous(\"Dr. Seuss\", \"Dr. Seuss\").\n.output Answer\n\n", "completions": [".decl Made_famous(Person:symbol, Person_famous:symbol)\nMade_famous(\"Dr. Seuss\", \"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Made_famous(\"Dr. Seuss\", \"Dr. Seuss\").\n.output Answer\n\n"]}
{"id": 1702, "answer": false, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"Starbucks\", \"coffee\").\nSells(\"Starbucks\", \"tea\").\nSells(\"Starbucks\", \"pastry\").\nSells(\"Starbucks\", \"sandwich\").\nSells(\"Starbucks\", \"muffin\").\nSells(\"Starbucks\", \"bagel\").\nSells(\"Starbucks\", \"cookie\").\nSells(\"Starbucks\", \"brownie\").\nSells(\"Starbucks\", \"smoothie\").\nSells(\"Starbucks\", \"frappuccino\").\nSells(\"Starbucks\", \"espresso\").\nSells(\"Starbucks\", \"latte\").\nSells(\"Starbucks\", \"cappuccino\").\nSells(\"Starbucks\", \"macchiato\").\nSells(\"Starbucks\", \"mocha\").\nSells(\"Starbucks\", \"chai\").\nSells(\"Starbucks\", \"hot chocolate\").\nSells(\"Starbucks\", \"juice\").\nSells(\"Starbucks\", \"water\").\nSells(\"Starbucks\", \"soda\").\nSells(\"Starbucks\", \"beer\").\nSells(\"Starbucks\", \"wine\").\nSells(\"Starbucks\", \"chips\").\nSells(\"Starbucks\", \"fruit\").\nSells(\"Starbucks\", \"vegetable\").\nSells(\"Starbucks\", \"salad\").\nSells(\"Starbucks\", \"sandwich\").\nSells(\"Starbucks\", \"muffin\").\nSells(\"Starbucks\", \"bagel\").\nSells(\"Starbucks\", \"cookie\").\nSells(\"Starbucks\", \"brownie\").\nSells(\"Starbucks\", \"smoothie\").\nSells(\"Starbucks\", \"frappuccino\").\nSells(\"Starbucks\", \"espresso\").\nSells(\"Starbucks\", \"latte\").\nSells(\"Starbucks\", \"cappuccino\").\nSells(\"Starbucks\", \"macchiato\").\nSells(\"Starbucks\", \"mocha\").\nSells(\"Starbucks\", \"chai\").\nSells(\"Starbucks\", \"hot chocolate\").\nSells(\"Starbucks\", \"juice\").\nSells(\"Starbucks\", \"water\").\nSells(\"Starbucks\", \"soda\").\nSells(\"Starbucks\", \"beer\").\nSells(\"Starbucks\", \"wine\").\nSells(\"Starbucks\", \"chips\").\nSells(\"Starbucks\", \"fruit\").\nSells(\"Starbucks\", \"vegetable\").\nSells(\"Starbucks\", \"salad\").\nSells(\"Starbucks\", \"sandwich\").\nSells(\"Starbucks\", \"muffin\").\nSells(\"Starbucks\", \"bagel\").\nSells(\"Starbucks\", \"cookie\").\nSells(\"Starbucks\", \"brownie\").\nSells(\"Starbucks\", \"smoothie\").\nSells(\"Starbucks\", \"frappuccino\").\nSells(\"Starbucks\", \"espresso\").\nSells(\"Starbucks\", \"latte\").\nSells(\"Starbucks\", \"cappuccino\").\nSells(\"Starbucks\", \"macchiato\").\nSells(\"Starbucks\", \"mocha\").\nSells(\"Starbucks\", \"chai\").\nSells(\"Starbucks\", \"hot chocolate\").\nSells(\"Starbucks\", \"juice\").\nSells(\"Starbucks\", \"water\").\nSells(\"Starbucks\", \"soda\").\nSells(\"Starbucks\", \"beer\").\nSells(\"Starbucks\", \"wine\").\nSells(\"Starbucks\", \"chips\").\nSells(\"Starbucks\",", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"Starbucks\", \"coffee\").\nSells(\"Starbucks\", \"tea\").\nSells(\"Starbucks\", \"pastry\").\nSells(\"Starbucks\", \"sandwich\").\nSells(\"Starbucks\", \"muffin\").\nSells(\"Starbucks\", \"bagel\").\nSells(\"Starbucks\", \"cookie\").\nSells(\"Starbucks\", \"brownie\").\nSells(\"Starbucks\", \"smoothie\").\nSells(\"Starbucks\", \"frappuccino\").\nSells(\"Starbucks\", \"espresso\").\nSells(\"Starbucks\", \"latte\").\nSells(\"Starbucks\", \"cappuccino\").\nSells(\"Starbucks\", \"macchiato\").\nSells(\"Starbucks\", \"mocha\").\nSells(\"Starbucks\", \"chai\").\nSells(\"Starbucks\", \"hot chocolate\").\nSells(\"Starbucks\", \"juice\").\nSells(\"Starbucks\", \"water\").\nSells(\"Starbucks\", \"soda\").\nSells(\"Starbucks\", \"beer\").\nSells(\"Starbucks\", \"wine\").\nSells(\"Starbucks\", \"chips\").\nSells(\"Starbucks\", \"fruit\").\nSells(\"Starbucks\", \"vegetable\").\nSells(\"Starbucks\", \"salad\").\nSells(\"Starbucks\", \"sandwich\").\nSells(\"Starbucks\", \"muffin\").\nSells(\"Starbucks\", \"bagel\").\nSells(\"Starbucks\", \"cookie\").\nSells(\"Starbucks\", \"brownie\").\nSells(\"Starbucks\", \"smoothie\").\nSells(\"Starbucks\", \"frappuccino\").\nSells(\"Starbucks\", \"espresso\").\nSells(\"Starbucks\", \"latte\").\nSells(\"Starbucks\", \"cappuccino\").\nSells(\"Starbucks\", \"macchiato\").\nSells(\"Starbucks\", \"mocha\").\nSells(\"Starbucks\", \"chai\").\nSells(\"Starbucks\", \"hot chocolate\").\nSells(\"Starbucks\", \"juice\").\nSells(\"Starbucks\", \"water\").\nSells(\"Starbucks\", \"soda\").\nSells(\"Starbucks\", \"beer\").\nSells(\"Starbucks\", \"wine\").\nSells(\"Starbucks\", \"chips\").\nSells(\"Starbucks\", \"fruit\").\nSells(\"Starbucks\", \"vegetable\").\nSells(\"Starbucks\", \"salad\").\nSells(\"Starbucks\", \"sandwich\").\nSells(\"Starbucks\", \"muffin\").\nSells(\"Starbucks\", \"bagel\").\nSells(\"Starbucks\", \"cookie\").\nSells(\"Starbucks\", \"brownie\").\nSells(\"Starbucks\", \"smoothie\").\nSells(\"Starbucks\", \"frappuccino\").\nSells(\"Starbucks\", \"espresso\").\nSells(\"Starbucks\", \"latte\").\nSells(\"Starbucks\", \"cappuccino\").\nSells(\"Starbucks\", \"macchiato\").\nSells(\"Starbucks\", \"mocha\").\nSells(\"Starbucks\", \"chai\").\nSells(\"Starbucks\", \"hot chocolate\").\nSells(\"Starbucks\", \"juice\").\nSells(\"Starbucks\", \"water\").\nSells(\"Starbucks\", \"soda\").\nSells(\"Starbucks\", \"beer\").\nSells(\"Starbucks\", \"wine\").\nSells(\"Starbucks\", \"chips\").\nSells(\"Starbucks\","]}
{"id": 1703, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"calico cat\", \"black\").\nHas_color(\"calico cat\", \"white\").\nHas_color(\"calico cat\", \"orange\").\nHas_color(\"drain fly\", \"black\").\nHas_color(\"drain fly\", \"white\").\nHas_color(\"drain fly\", \"orange\").\n.decl Answer()\nAnswer() :- Has_color(\"calico cat\", color), Has_color(\"drain fly\", color).\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"calico cat\", \"black\").\nHas_color(\"calico cat\", \"white\").\nHas_color(\"calico cat\", \"orange\").\nHas_color(\"drain fly\", \"black\").\nHas_color(\"drain fly\", \"white\").\nHas_color(\"drain fly\", \"orange\").\n.decl Answer()\nAnswer() :- Has_color(\"calico cat\", color), Has_color(\"drain fly\", color).\n.output Answer\n\n"]}
{"id": 1704, "answer": true, "completion": ".decl Is_a(Animal:symbol, Animal_type:symbol)\nIs_a(\"Golden eagle\", \"bird\").\nIs_a(\"Golden eagle\", \"scavenger\").\n.decl Answer()\nAnswer() :- Is_a(\"Golden eagle\", \"bird\"), Is_a(\"Golden eagle\", \"scavenger\").\n.output Answer\n\n", "completions": [".decl Is_a(Animal:symbol, Animal_type:symbol)\nIs_a(\"Golden eagle\", \"bird\").\nIs_a(\"Golden eagle\", \"scavenger\").\n.decl Answer()\nAnswer() :- Is_a(\"Golden eagle\", \"bird\"), Is_a(\"Golden eagle\", \"scavenger\").\n.output Answer\n\n"]}
{"id": 1705, "answer": true, "completion": ".decl Has_price(Item:symbol, Price:float)\nHas_price(\"food\", 3.5).\nHas_price(\"food\", 5).\n.decl Answer()\nAnswer() :- Has_price(\"food\", price1), Has_price(\"food\", price2), price1 < price2.\n.output Answer\n\n", "completions": [".decl Has_price(Item:symbol, Price:float)\nHas_price(\"food\", 3.5).\nHas_price(\"food\", 5).\n.decl Answer()\nAnswer() :- Has_price(\"food\", price1), Has_price(\"food\", price2), price1 < price2.\n.output Answer\n\n"]}
{"id": 1706, "answer": true, "completion": ".decl Has_nest(Animal:symbol, Location:symbol)\nHas_nest(\"bald eagle\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Has_nest(\"bald eagle\", \"Mount Sharp\").\n.output Answer\n\n", "completions": [".decl Has_nest(Animal:symbol, Location:symbol)\nHas_nest(\"bald eagle\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Has_nest(\"bald eagle\", \"Mount Sharp\").\n.output Answer\n\n"]}
{"id": 1707, "answer": false, "completion": ".decl Cures(Medicine:symbol, Disease:symbol)\nCures(\"penicillin\", \"infection\").\n.decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"infection\", \"fever\").\nCauses(\"infection\", \"chills\").\nCauses(\"infection\", \"cough\").\nCauses(\"infection\", \"sore throat\").\nCauses(\"infection\", \"runny nose\").\nCauses(\"infection\", \"headache\").\nCauses(\"infection\", \"fatigue\").\nCauses(\"infection\", \"muscle aches\").\nCauses(\"infection\", \"vomiting\").\nCauses(\"infection\", \"diarrhea\").\nCauses(\"infection\", \"rash\").\nCauses(\"infection\", \"joint pain\").\nCauses(\"infection\", \"swelling\").\nCauses(\"infection\", \"abdominal pain\").\nCauses(\"infection\", \"chest pain\").\nCauses(\"infection\", \"shortness of breath\").\nCauses(\"infection\", \"confusion\").\nCauses(\"infection\", \"seizures\").\nCauses(\"infection\", \"loss of consciousness\").\nCauses(\"infection\", \"bleeding\").\nCauses(\"infection\", \"painful urination\").\nCauses(\"infection\", \"blood in urine\").\nCauses(\"infection\", \"painful bowel movements\").\nCauses(\"infection\", \"blood in stool\").\nCauses(\"infection\", \"redness\").\nCauses(\"infection\", \"swelling\").\nCauses(\"infection\", \"warmth\").\nCauses(\"infection\", \"pain\").\nCauses(\"infection\", \"tenderness\").\nCauses(\"infection\", \"itching\").\nCauses(\"infection\", \"burning\").\nCauses(\"infection\", \"blisters\").\nCauses(\"infection\", \"ulcers\").\nCauses(\"infection\", \"scabs\").\nCauses(\"infection\", \"crusts\").\nCauses(\"infection\", \"scaling\").\nCauses(\"infection\", \"oozing\").\nCauses(\"infection\", \"pus\").\nCauses(\"infection\", \"discharge\").\nCauses(\"infection\", \"redness\").\nCauses(\"infection\", \"swelling\").\nCauses(\"infection\", \"warmth\").\nCauses(\"infection\", \"pain\").\nCauses(\"infection\", \"tenderness\").\nCauses(\"infection\", \"itching\").\nCauses(\"infection\", \"burning\").\nCauses(\"infection\", \"blisters\").\nCauses(\"infection\", \"ulcers\").\nCauses(\"infection\", \"scabs\").\nCauses(\"infection\", \"crusts\").\nCauses(\"infection\", \"scaling\").\nCauses(\"infection\", \"oozing\").\nCauses(\"infection\", \"pus\").\nCauses(\"infection\", \"discharge\").\nCauses(\"infection\", \"redness\").\nCauses(\"infection\", \"swelling\").\nCauses(\"infection\", \"warmth\").\nCauses(\"infection\", \"pain\").\nCauses(\"infection\", \"tenderness\").\nCauses(\"infection\", \"itching\").\nCauses(\"infection\", \"burning\").\nCauses(\"infection\", \"blisters\").\nCauses(\"infection\", \"ulcers\").\nCauses(\"infection\", \"scabs\").\nCauses(\"infection\", \"crusts\").\nCauses(\"infection\", \"scaling\").\nCauses(\"infection\", \"oozing", "completions": [".decl Cures(Medicine:symbol, Disease:symbol)\nCures(\"penicillin\", \"infection\").\n.decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"infection\", \"fever\").\nCauses(\"infection\", \"chills\").\nCauses(\"infection\", \"cough\").\nCauses(\"infection\", \"sore throat\").\nCauses(\"infection\", \"runny nose\").\nCauses(\"infection\", \"headache\").\nCauses(\"infection\", \"fatigue\").\nCauses(\"infection\", \"muscle aches\").\nCauses(\"infection\", \"vomiting\").\nCauses(\"infection\", \"diarrhea\").\nCauses(\"infection\", \"rash\").\nCauses(\"infection\", \"joint pain\").\nCauses(\"infection\", \"swelling\").\nCauses(\"infection\", \"abdominal pain\").\nCauses(\"infection\", \"chest pain\").\nCauses(\"infection\", \"shortness of breath\").\nCauses(\"infection\", \"confusion\").\nCauses(\"infection\", \"seizures\").\nCauses(\"infection\", \"loss of consciousness\").\nCauses(\"infection\", \"bleeding\").\nCauses(\"infection\", \"painful urination\").\nCauses(\"infection\", \"blood in urine\").\nCauses(\"infection\", \"painful bowel movements\").\nCauses(\"infection\", \"blood in stool\").\nCauses(\"infection\", \"redness\").\nCauses(\"infection\", \"swelling\").\nCauses(\"infection\", \"warmth\").\nCauses(\"infection\", \"pain\").\nCauses(\"infection\", \"tenderness\").\nCauses(\"infection\", \"itching\").\nCauses(\"infection\", \"burning\").\nCauses(\"infection\", \"blisters\").\nCauses(\"infection\", \"ulcers\").\nCauses(\"infection\", \"scabs\").\nCauses(\"infection\", \"crusts\").\nCauses(\"infection\", \"scaling\").\nCauses(\"infection\", \"oozing\").\nCauses(\"infection\", \"pus\").\nCauses(\"infection\", \"discharge\").\nCauses(\"infection\", \"redness\").\nCauses(\"infection\", \"swelling\").\nCauses(\"infection\", \"warmth\").\nCauses(\"infection\", \"pain\").\nCauses(\"infection\", \"tenderness\").\nCauses(\"infection\", \"itching\").\nCauses(\"infection\", \"burning\").\nCauses(\"infection\", \"blisters\").\nCauses(\"infection\", \"ulcers\").\nCauses(\"infection\", \"scabs\").\nCauses(\"infection\", \"crusts\").\nCauses(\"infection\", \"scaling\").\nCauses(\"infection\", \"oozing\").\nCauses(\"infection\", \"pus\").\nCauses(\"infection\", \"discharge\").\nCauses(\"infection\", \"redness\").\nCauses(\"infection\", \"swelling\").\nCauses(\"infection\", \"warmth\").\nCauses(\"infection\", \"pain\").\nCauses(\"infection\", \"tenderness\").\nCauses(\"infection\", \"itching\").\nCauses(\"infection\", \"burning\").\nCauses(\"infection\", \"blisters\").\nCauses(\"infection\", \"ulcers\").\nCauses(\"infection\", \"scabs\").\nCauses(\"infection\", \"crusts\").\nCauses(\"infection\", \"scaling\").\nCauses(\"infection\", \"oozing"]}
{"id": 1708, "answer": true, "completion": ".decl Has_education(Person:symbol, Education:symbol)\nHas_education(\"Danica McKellar\", \"actress\").\n.decl Requires_education(Job:symbol, Education:symbol)\nRequires_education(\"astronaut\", \"engineering\").\nRequires_education(\"astronaut\", \"science\").\n.decl Answer()\nAnswer() :- Has_education(\"Danica McKellar\", education1), Requires_education(\"astronaut\", education2), education1 != education2.\n.output Answer\n\n", "completions": [".decl Has_education(Person:symbol, Education:symbol)\nHas_education(\"Danica McKellar\", \"actress\").\n.decl Requires_education(Job:symbol, Education:symbol)\nRequires_education(\"astronaut\", \"engineering\").\nRequires_education(\"astronaut\", \"science\").\n.decl Answer()\nAnswer() :- Has_education(\"Danica McKellar\", education1), Requires_education(\"astronaut\", education2), education1 != education2.\n.output Answer\n\n"]}
{"id": 1709, "answer": false, "completion": ".decl Has_limbs(Animal:symbol, Limbs:symbol)\nHas_limbs(\"Goblin shark\", \"no\").\nHas_limbs(\"human\", \"yes\").\n.decl Can_ride_bike(Animal:symbol)\nCan_ride_bike(\"human\").\n.decl Answer()\nAnswer() :- Has_limbs(\"Goblin shark\", \"yes\"), Can_ride_bike(\"Goblin shark\").\n.output Answer\n\n", "completions": [".decl Has_limbs(Animal:symbol, Limbs:symbol)\nHas_limbs(\"Goblin shark\", \"no\").\nHas_limbs(\"human\", \"yes\").\n.decl Can_ride_bike(Animal:symbol)\nCan_ride_bike(\"human\").\n.decl Answer()\nAnswer() :- Has_limbs(\"Goblin shark\", \"yes\"), Can_ride_bike(\"Goblin shark\").\n.output Answer\n\n"]}
{"id": 1710, "answer": false, "completion": ".decl Has_intelligence(Animal:symbol, Intelligence:float)\nHas_intelligence(\"northern fur seal\", 0.5).\n.decl Has_intelligence(Person:symbol, Intelligence:float)\nHas_intelligence(\"driver\", 0.8).\n.decl Answer()\nAnswer() :- Has_intelligence(\"northern fur seal\", intelligence1), Has_intelligence(\"driver\", intelligence2), intelligence1 >= intelligence2.\n.output Answer\n\n", "completions": [".decl Has_intelligence(Animal:symbol, Intelligence:float)\nHas_intelligence(\"northern fur seal\", 0.5).\n.decl Has_intelligence(Person:symbol, Intelligence:float)\nHas_intelligence(\"driver\", 0.8).\n.decl Answer()\nAnswer() :- Has_intelligence(\"northern fur seal\", intelligence1), Has_intelligence(\"driver\", intelligence2), intelligence1 >= intelligence2.\n.output Answer\n\n"]}
{"id": 1711, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Generation Y member\", 20).\n.decl Has_age_requirement(Job:symbol, Age_requirement:float)\nHas_age_requirement(\"NYPD police officer\", 21).\n.decl Answer()\nAnswer() :- Has_age(\"Generation Y member\", age), Has_age_requirement(\"NYPD police officer\", age_requirement), age >= age_requirement.\n.output Answer\n\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Generation Y member\", 20).\n.decl Has_age_requirement(Job:symbol, Age_requirement:float)\nHas_age_requirement(\"NYPD police officer\", 21).\n.decl Answer()\nAnswer() :- Has_age(\"Generation Y member\", age), Has_age_requirement(\"NYPD police officer\", age_requirement), age >= age_requirement.\n.output Answer\n\n\n"]}
{"id": 1712, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"infant\", 1).\n.decl Requires_age(Event:symbol, Age:float)\nRequires_age(\"solve a sudoku puzzle\", 10).\n.decl Answer()\nAnswer() :- Has_age(\"infant\", age1), Requires_age(\"solve a sudoku puzzle\", age2), age1 >= age2.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"infant\", 1).\n.decl Requires_age(Event:symbol, Age:float)\nRequires_age(\"solve a sudoku puzzle\", 10).\n.decl Answer()\nAnswer() :- Has_age(\"infant\", age1), Requires_age(\"solve a sudoku puzzle\", age2), age1 >= age2.\n.output Answer\n\n"]}
{"id": 1713, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"pickled cucumber\", \"green\").\nHas_color(\"pickled cucumber\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_color(\"pickled cucumber\", \"red\").\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"pickled cucumber\", \"green\").\nHas_color(\"pickled cucumber\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_color(\"pickled cucumber\", \"red\").\n.output Answer\n\n"]}
{"id": 1714, "answer": true, "completion": ".decl Has_character(Algebra:symbol, Character:symbol)\nHas_character(\"Boolean algebra\", \"0\").\nHas_character(\"Boolean algebra\", \"1\").\nHas_character(\"Boolean algebra\", \"!\").\nHas_character(\"Boolean algebra\", \"&\").\nHas_character(\"Boolean algebra\", \"|\").\n.decl Answer()\nAnswer() :- Has_character(\"Boolean algebra\", character), Has_character(\"Boolean algebra\", character).\n.output Answer\n\n", "completions": [".decl Has_character(Algebra:symbol, Character:symbol)\nHas_character(\"Boolean algebra\", \"0\").\nHas_character(\"Boolean algebra\", \"1\").\nHas_character(\"Boolean algebra\", \"!\").\nHas_character(\"Boolean algebra\", \"&\").\nHas_character(\"Boolean algebra\", \"|\").\n.decl Answer()\nAnswer() :- Has_character(\"Boolean algebra\", character), Has_character(\"Boolean algebra\", character).\n.output Answer\n\n"]}
{"id": 1715, "answer": false, "completion": ".decl Is_a(Person:symbol, Gender:symbol)\nIs_a(\"John\", \"man\").\nIs_a(\"Mary\", \"woman\").\n.decl Experiences(Person:symbol, Event:symbol)\nExperiences(\"Mary\", \"menstruation\").\n.decl Answer()\nAnswer() :- Is_a(person, \"man\"), Experiences(person, \"menstruation\").\n.output Answer\n\n", "completions": [".decl Is_a(Person:symbol, Gender:symbol)\nIs_a(\"John\", \"man\").\nIs_a(\"Mary\", \"woman\").\n.decl Experiences(Person:symbol, Event:symbol)\nExperiences(\"Mary\", \"menstruation\").\n.decl Answer()\nAnswer() :- Is_a(person, \"man\"), Experiences(person, \"menstruation\").\n.output Answer\n\n"]}
{"id": 1716, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"skiing\", \"winter\").\nHappens_in_time(\"skiing\", \"spring\").\nHappens_in_time(\"skiing\", \"fall\").\nHappens_in_time(\"skiing\", \"summer\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"skiing\", \"Steamboat Springs, Colorado\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"skiing\", \"August\"), Happens_in_place(\"skiing\", \"Steamboat Springs, Colorado\").\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"skiing\", \"winter\").\nHappens_in_time(\"skiing\", \"spring\").\nHappens_in_time(\"skiing\", \"fall\").\nHappens_in_time(\"skiing\", \"summer\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"skiing\", \"Steamboat Springs, Colorado\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"skiing\", \"August\"), Happens_in_place(\"skiing\", \"Steamboat Springs, Colorado\").\n.output Answer\n\n"]}
{"id": 1717, "answer": true, "completion": ".decl Has_mascot(School:symbol, Mascot:symbol)\nHas_mascot(\"Brownsville High School\", \"Eagle\").\n.decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"Eagle\", \"kibble\").\n.decl Answer()\nAnswer() :- Has_mascot(\"Brownsville High School\", mascot), Eats(mascot, \"kibble\").\n.output Answer\n\n", "completions": [".decl Has_mascot(School:symbol, Mascot:symbol)\nHas_mascot(\"Brownsville High School\", \"Eagle\").\n.decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"Eagle\", \"kibble\").\n.decl Answer()\nAnswer() :- Has_mascot(\"Brownsville High School\", mascot), Eats(mascot, \"kibble\").\n.output Answer\n\n"]}
{"id": 1718, "answer": false, "completion": ".decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"January\", 31).\nHas_n_days(\"February\", 28).\nHas_n_days(\"March\", 31).\nHas_n_days(\"April\", 30).\nHas_n_days(\"May\", 31).\nHas_n_days(\"June\", 30).\nHas_n_days(\"July\", 31).\nHas_n_days(\"August\", 31).\nHas_n_days(\"September\", 30).\nHas_n_days(\"October\", 31).\nHas_n_days(\"November\", 30).\nHas_n_days(\"December\", 31).\n.decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"January\", 31).\nHas_n_days(\"February\", 28).\nHas_n_days(\"March\", 31).\nHas_n_days(\"April\", 30).\nHas_n_days(\"May\", 31).\nHas_n_days(\"June\", 30).\nHas_n_days(\"July\", 31).\nHas_n_days(\"August\", 31).\nHas_n_days(\"September\", 30).\nHas_n_days(\"October\", 31).\nHas_n_days(\"November\", 30).\nHas_n_days(\"December\", 31).\n.decl Answer()\nAnswer() :- Has_n_days(\"January\", n_days1), Has_n_days(\"February\", n_days2), Has_n_days(\"March\", n_days3), Has_n_days(\"April\", n_days4), Has_n_days(\"May\", n_days5), Has_n_days(\"June\", n_days6), Has_n_days(\"July\", n_days7), Has_n_days(\"August\", n_days8), Has_n_days(\"September\", n_days9), Has_n_days(\"October\", n_days10), Has_n_days(\"November\", n_days11), Has_n_days(\"December\", n_days12), n_days1 + n_days2 + n_days3 + n_days4 + n_days5 + n_days6 + n_days7 + n_days8 + n_days9 + n_days10 + n_days11 + n_days12 = 365.\n.output Answer\n\n", "completions": [".decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"January\", 31).\nHas_n_days(\"February\", 28).\nHas_n_days(\"March\", 31).\nHas_n_days(\"April\", 30).\nHas_n_days(\"May\", 31).\nHas_n_days(\"June\", 30).\nHas_n_days(\"July\", 31).\nHas_n_days(\"August\", 31).\nHas_n_days(\"September\", 30).\nHas_n_days(\"October\", 31).\nHas_n_days(\"November\", 30).\nHas_n_days(\"December\", 31).\n.decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"January\", 31).\nHas_n_days(\"February\", 28).\nHas_n_days(\"March\", 31).\nHas_n_days(\"April\", 30).\nHas_n_days(\"May\", 31).\nHas_n_days(\"June\", 30).\nHas_n_days(\"July\", 31).\nHas_n_days(\"August\", 31).\nHas_n_days(\"September\", 30).\nHas_n_days(\"October\", 31).\nHas_n_days(\"November\", 30).\nHas_n_days(\"December\", 31).\n.decl Answer()\nAnswer() :- Has_n_days(\"January\", n_days1), Has_n_days(\"February\", n_days2), Has_n_days(\"March\", n_days3), Has_n_days(\"April\", n_days4), Has_n_days(\"May\", n_days5), Has_n_days(\"June\", n_days6), Has_n_days(\"July\", n_days7), Has_n_days(\"August\", n_days8), Has_n_days(\"September\", n_days9), Has_n_days(\"October\", n_days10), Has_n_days(\"November\", n_days11), Has_n_days(\"December\", n_days12), n_days1 + n_days2 + n_days3 + n_days4 + n_days5 + n_days6 + n_days7 + n_days8 + n_days9 + n_days10 + n_days11 + n_days12 = 365.\n.output Answer\n\n"]}
{"id": 1719, "answer": true, "completion": ".decl Is_known_to(Route:symbol, Person:symbol)\nIs_known_to(\"Route 66\", \"Americans\").\n.decl Answer()\nAnswer() :- Is_known_to(\"Route 66\", \"Americans\").\n.output Answer\n\n", "completions": [".decl Is_known_to(Route:symbol, Person:symbol)\nIs_known_to(\"Route 66\", \"Americans\").\n.decl Answer()\nAnswer() :- Is_known_to(\"Route 66\", \"Americans\").\n.output Answer\n\n"]}
{"id": 1720, "answer": false, "completion": ".decl Is_prepared_in(Food:symbol, Utensil:symbol)\nIs_prepared_in(\"pancakes\", \"pan\").\n.decl Answer()\nAnswer() :- Is_prepared_in(\"pancakes\", \"pot\").\n.output Answer\n\n", "completions": [".decl Is_prepared_in(Food:symbol, Utensil:symbol)\nIs_prepared_in(\"pancakes\", \"pan\").\n.decl Answer()\nAnswer() :- Is_prepared_in(\"pancakes\", \"pot\").\n.output Answer\n\n"]}
{"id": 1721, "answer": false, "completion": ".decl Uses(Person:symbol, Technology:symbol)\nUses(\"Malcolm X\", \"ASCII\").\nUses(\"Malcolm X\", \"EBCDIC\").\n.decl Answer()\nAnswer() :- Uses(\"Malcolm X\", \"Unicode\").\n.output Answer\n\n", "completions": [".decl Uses(Person:symbol, Technology:symbol)\nUses(\"Malcolm X\", \"ASCII\").\nUses(\"Malcolm X\", \"EBCDIC\").\n.decl Answer()\nAnswer() :- Uses(\"Malcolm X\", \"Unicode\").\n.output Answer\n\n"]}
{"id": 1722, "answer": false, "completion": ".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"human heart\", 1.5).\nLasts_n_hours(\"Toyota Hiux\", 2).\n.decl Takes_n_hours(Event:symbol, N_hours:float)\nTakes_n_hours(\"NYC to Raleigh NC\", 2.5).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"human heart\", n_hours1), Takes_n_hours(\"NYC to Raleigh NC\", n_hours2), Lasts_n_hours(\"Toyota Hiux\", n_hours3), n_hours1 <= n_hours2, n_hours2 <= n_hours3.\n.output Answer\n\n", "completions": [".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"human heart\", 1.5).\nLasts_n_hours(\"Toyota Hiux\", 2).\n.decl Takes_n_hours(Event:symbol, N_hours:float)\nTakes_n_hours(\"NYC to Raleigh NC\", 2.5).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"human heart\", n_hours1), Takes_n_hours(\"NYC to Raleigh NC\", n_hours2), Lasts_n_hours(\"Toyota Hiux\", n_hours3), n_hours1 <= n_hours2, n_hours2 <= n_hours3.\n.output Answer\n\n"]}
{"id": 1723, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"watermelon\", \"tricarboxylic acid\").\n.decl Is_allergic_to(Person:symbol, Ingredient:symbol)\nIs_allergic_to(\"person\", \"tricarboxylic acid\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"watermelon\", ingredient), Is_allergic_to(\"person\", ingredient).\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"watermelon\", \"tricarboxylic acid\").\n.decl Is_allergic_to(Person:symbol, Ingredient:symbol)\nIs_allergic_to(\"person\", \"tricarboxylic acid\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"watermelon\", ingredient), Is_allergic_to(\"person\", ingredient).\n.output Answer\n\n"]}
{"id": 1724, "answer": true, "completion": ".decl Is_prevalent_in(Food:symbol, Cuisine:symbol)\nIs_prevalent_in(\"shrimp\", \"Ethiopian cuisine\").\n.decl Answer()\nAnswer() :- Is_prevalent_in(\"shrimp\", \"Ethiopian cuisine\").\n.output Answer\n\n", "completions": [".decl Is_prevalent_in(Food:symbol, Cuisine:symbol)\nIs_prevalent_in(\"shrimp\", \"Ethiopian cuisine\").\n.decl Answer()\nAnswer() :- Is_prevalent_in(\"shrimp\", \"Ethiopian cuisine\").\n.output Answer\n\n"]}
{"id": 1725, "answer": true, "completion": ".decl Happened_in_century(Event:symbol, Century:float)\nHappened_in_century(\"Battle of the Alamo\", 19).\n.decl Happened_in_city(Event:symbol, City:symbol)\nHappened_in_city(\"Battle of the Alamo\", \"San Antonio\").\n.decl Answer()\nAnswer() :- Happened_in_century(\"Battle of the Alamo\", century), Happened_in_city(\"Battle of the Alamo\", \"San Antonio\").\n.output Answer\n\n", "completions": [".decl Happened_in_century(Event:symbol, Century:float)\nHappened_in_century(\"Battle of the Alamo\", 19).\n.decl Happened_in_city(Event:symbol, City:symbol)\nHappened_in_city(\"Battle of the Alamo\", \"San Antonio\").\n.decl Answer()\nAnswer() :- Happened_in_century(\"Battle of the Alamo\", century), Happened_in_city(\"Battle of the Alamo\", \"San Antonio\").\n.output Answer\n\n"]}
{"id": 1726, "answer": true, "completion": ".decl Is_threat_to(Event:symbol, Person:symbol)\nIs_threat_to(\"snakebite\", \"human\").\nIs_threat_to(\"snakebite\", \"T-1000\").\n.decl Answer()\nAnswer() :- Is_threat_to(\"snakebite\", \"T-1000\").\n.output Answer\n\n", "completions": [".decl Is_threat_to(Event:symbol, Person:symbol)\nIs_threat_to(\"snakebite\", \"human\").\nIs_threat_to(\"snakebite\", \"T-1000\").\n.decl Answer()\nAnswer() :- Is_threat_to(\"snakebite\", \"T-1000\").\n.output Answer\n\n"]}
{"id": 1727, "answer": false, "completion": ".decl Has_belt(Person:symbol, Belt:symbol)\nHas_belt(\"Jon Jones\", \"black belt\").\n.decl Has_belt_color(Belt:symbol, Color:symbol)\nHas_belt_color(\"white belt\", \"white\").\nHas_belt_color(\"black belt\", \"black\").\n.decl Answer()\nAnswer() :- Has_belt(\"Jon Jones\", belt1), Has_belt_color(belt1, color1), Has_belt(\"white belt\", belt2), Has_belt_color(belt2, color2), color1 != color2.\n.output Answer\n\n", "completions": [".decl Has_belt(Person:symbol, Belt:symbol)\nHas_belt(\"Jon Jones\", \"black belt\").\n.decl Has_belt_color(Belt:symbol, Color:symbol)\nHas_belt_color(\"white belt\", \"white\").\nHas_belt_color(\"black belt\", \"black\").\n.decl Answer()\nAnswer() :- Has_belt(\"Jon Jones\", belt1), Has_belt_color(belt1, color1), Has_belt(\"white belt\", belt2), Has_belt_color(belt2, color2), color1 != color2.\n.output Answer\n\n"]}
{"id": 1728, "answer": true, "completion": ".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Darth Vader\", \"evil\").\nHas_character(\"Severus Snape\", \"evil\").\n.decl Answer()\nAnswer() :- Has_character(\"Darth Vader\", character), Has_character(\"Severus Snape\", character).\n.output Answer\n\n", "completions": [".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Darth Vader\", \"evil\").\nHas_character(\"Severus Snape\", \"evil\").\n.decl Answer()\nAnswer() :- Has_character(\"Darth Vader\", character), Has_character(\"Severus Snape\", character).\n.output Answer\n\n"]}
{"id": 1729, "answer": true, "completion": ".decl Has_name(Team:symbol, Name:symbol)\nHas_name(\"Albuquerque Isotopes\", \"isotope\").\nHas_name(\"Albuquerque Isotopes\", \"weather\").\nHas_name(\"Albuquerque Isotopes\", \"phenomena\").\nHas_name(\"Albuquerque Isotopes\", \"minor\").\nHas_name(\"Albuquerque Isotopes\", \"league\").\nHas_name(\"Albuquerque Isotopes\", \"baseball\").\nHas_name(\"Albuquerque Isotopes\", \"teams\").\n.decl Answer()\nAnswer() :- Has_name(\"Albuquerque Isotopes\", name), name != \"isotope\", name != \"weather\", name != \"phenomena\".\n.output Answer\n\n", "completions": [".decl Has_name(Team:symbol, Name:symbol)\nHas_name(\"Albuquerque Isotopes\", \"isotope\").\nHas_name(\"Albuquerque Isotopes\", \"weather\").\nHas_name(\"Albuquerque Isotopes\", \"phenomena\").\nHas_name(\"Albuquerque Isotopes\", \"minor\").\nHas_name(\"Albuquerque Isotopes\", \"league\").\nHas_name(\"Albuquerque Isotopes\", \"baseball\").\nHas_name(\"Albuquerque Isotopes\", \"teams\").\n.decl Answer()\nAnswer() :- Has_name(\"Albuquerque Isotopes\", name), name != \"isotope\", name != \"weather\", name != \"phenomena\".\n.output Answer\n\n"]}
{"id": 1730, "answer": true, "completion": ".decl Influences(Person:symbol, Genre:symbol)\nInfluences(\"Johann Sebastian Bach\", \"classical music\").\nInfluences(\"classical music\", \"heavy metal\").\n.decl Answer()\nAnswer() :- Influences(\"Johann Sebastian Bach\", genre), Influences(genre, \"heavy metal\").\n.output Answer\n\n", "completions": [".decl Influences(Person:symbol, Genre:symbol)\nInfluences(\"Johann Sebastian Bach\", \"classical music\").\nInfluences(\"classical music\", \"heavy metal\").\n.decl Answer()\nAnswer() :- Influences(\"Johann Sebastian Bach\", genre), Influences(genre, \"heavy metal\").\n.output Answer\n\n"]}
{"id": 1731, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"cheetah\", 100).\nHas_mass(\"Big Show\", 400).\n.decl Has_acceleration(Object:symbol, Acceleration:float)\nHas_acceleration(\"cheetah\", 10).\n.decl Answer()\nAnswer() :- Has_mass(\"cheetah\", mass1), Has_mass(\"Big Show\", mass2), Has_acceleration(\"cheetah\", acceleration), mass1 * acceleration > mass2.\n.output Answer\n\n", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"cheetah\", 100).\nHas_mass(\"Big Show\", 400).\n.decl Has_acceleration(Object:symbol, Acceleration:float)\nHas_acceleration(\"cheetah\", 10).\n.decl Answer()\nAnswer() :- Has_mass(\"cheetah\", mass1), Has_mass(\"Big Show\", mass2), Has_acceleration(\"cheetah\", acceleration), mass1 * acceleration > mass2.\n.output Answer\n\n"]}
{"id": 1732, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"paratrooper\", \"parachuting\").\nHas_skill(\"mountain rescue\", \"climbing\").\n.decl Answer()\nAnswer() :- Has_skill(\"paratrooper\", skill1), Has_skill(\"mountain rescue\", skill2), skill1 = skill2.\n.output Answer\n\n", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"paratrooper\", \"parachuting\").\nHas_skill(\"mountain rescue\", \"climbing\").\n.decl Answer()\nAnswer() :- Has_skill(\"paratrooper\", skill1), Has_skill(\"mountain rescue\", skill2), skill1 = skill2.\n.output Answer\n\n"]}
{"id": 1733, "answer": true, "completion": ".decl Has_symbol(Culture:symbol, Symbol:symbol)\nHas_symbol(\"ancient Egypt\", \"celery\").\n.decl Has_meaning(Symbol:symbol, Meaning:symbol)\nHas_meaning(\"celery\", \"death\").\n.decl Answer()\nAnswer() :- Has_symbol(culture, \"celery\"), Has_meaning(\"celery\", \"death\").\n.output Answer\n\n", "completions": [".decl Has_symbol(Culture:symbol, Symbol:symbol)\nHas_symbol(\"ancient Egypt\", \"celery\").\n.decl Has_meaning(Symbol:symbol, Meaning:symbol)\nHas_meaning(\"celery\", \"death\").\n.decl Answer()\nAnswer() :- Has_symbol(culture, \"celery\"), Has_meaning(\"celery\", \"death\").\n.output Answer\n\n"]}
{"id": 1734, "answer": true, "completion": ".decl Is_president(Person:symbol, Party:symbol)\nIs_president(\"Woodrow Wilson\", \"Democratic\").\nIs_president(\"William Howard Taft\", \"Republican\").\nIs_president(\"Warren G. Harding\", \"Republican\").\n.decl Answer()\nAnswer() :- Is_president(\"Woodrow Wilson\", \"Democratic\"), Is_president(\"William Howard Taft\", \"Republican\"), Is_president(\"Warren G. Harding\", \"Republican\").\n.output Answer\n\n", "completions": [".decl Is_president(Person:symbol, Party:symbol)\nIs_president(\"Woodrow Wilson\", \"Democratic\").\nIs_president(\"William Howard Taft\", \"Republican\").\nIs_president(\"Warren G. Harding\", \"Republican\").\n.decl Answer()\nAnswer() :- Is_president(\"Woodrow Wilson\", \"Democratic\"), Is_president(\"William Howard Taft\", \"Republican\"), Is_president(\"Warren G. Harding\", \"Republican\").\n.output Answer\n\n"]}
{"id": 1735, "answer": false, "completion": ".decl Has_n_troops(Country:symbol, Year:float, N_troops:float)\nHas_n_troops(\"United States\", 1965, 184000).\n.decl Answer()\nAnswer() :- Has_n_troops(\"United States\", 1965, n_troops), n_troops < 150000.\n.output Answer\n\n\n", "completions": [".decl Has_n_troops(Country:symbol, Year:float, N_troops:float)\nHas_n_troops(\"United States\", 1965, 184000).\n.decl Answer()\nAnswer() :- Has_n_troops(\"United States\", 1965, n_troops), n_troops < 150000.\n.output Answer\n\n\n"]}
{"id": 1736, "answer": true, "completion": ".decl Is_assigned_to(Task:symbol, Age_group:symbol)\nIs_assigned_to(\"thesis paper\", \"college students\").\n.decl Is_unusual_for(Task:symbol, Age_group:symbol)\nIs_unusual_for(\"thesis paper\", \"kindergartners\").\n.decl Answer()\nAnswer() :- Is_assigned_to(\"thesis paper\", \"kindergartners\").\nAnswer() :- Is_unusual_for(\"thesis paper\", \"kindergartners\").\n.output Answer\n\n", "completions": [".decl Is_assigned_to(Task:symbol, Age_group:symbol)\nIs_assigned_to(\"thesis paper\", \"college students\").\n.decl Is_unusual_for(Task:symbol, Age_group:symbol)\nIs_unusual_for(\"thesis paper\", \"kindergartners\").\n.decl Answer()\nAnswer() :- Is_assigned_to(\"thesis paper\", \"kindergartners\").\nAnswer() :- Is_unusual_for(\"thesis paper\", \"kindergartners\").\n.output Answer\n\n"]}
{"id": 1737, "answer": true, "completion": ".decl Is_a_cephalophore(Person:symbol)\nIs_a_cephalophore(\"John the Baptist\").\n.decl Is_in_heaven(Person:symbol)\nIs_in_heaven(\"John the Baptist\").\n.decl Answer()\nAnswer() :- Is_a_cephalophore(person), Is_in_heaven(person).\n.output Answer\n\n", "completions": [".decl Is_a_cephalophore(Person:symbol)\nIs_a_cephalophore(\"John the Baptist\").\n.decl Is_in_heaven(Person:symbol)\nIs_in_heaven(\"John the Baptist\").\n.decl Answer()\nAnswer() :- Is_a_cephalophore(person), Is_in_heaven(person).\n.output Answer\n\n"]}
{"id": 1738, "answer": true, "completion": ".decl Affects(Event_A:symbol, Event_B:symbol)\nAffects(\"Wehrmacht\", \"War to End All Wars\").\n.decl Answer()\nAnswer() :- Affects(\"Wehrmacht\", \"War to End All Wars\").\n.output Answer\n\n", "completions": [".decl Affects(Event_A:symbol, Event_B:symbol)\nAffects(\"Wehrmacht\", \"War to End All Wars\").\n.decl Answer()\nAnswer() :- Affects(\"Wehrmacht\", \"War to End All Wars\").\n.output Answer\n\n"]}
{"id": 1739, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Lil Wayne\", 15).\n.decl Has_legal_age(Person:symbol, Legal_age:float)\nHas_legal_age(\"Lil Wayne\", 16).\n.decl Answer()\nAnswer() :- Has_age(\"Lil Wayne\", age), Has_legal_age(\"Lil Wayne\", legal_age), age >= legal_age.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Lil Wayne\", 15).\n.decl Has_legal_age(Person:symbol, Legal_age:float)\nHas_legal_age(\"Lil Wayne\", 16).\n.decl Answer()\nAnswer() :- Has_age(\"Lil Wayne\", age), Has_legal_age(\"Lil Wayne\", legal_age), age >= legal_age.\n.output Answer\n\n"]}
{"id": 1740, "answer": true, "completion": ".decl Teaches(Teacher:symbol, Student:symbol)\nTeaches(\"Professor Dumbledore\", \"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Teaches(teacher, \"Lord Voldemort\").\n.output Answer\n\n", "completions": [".decl Teaches(Teacher:symbol, Student:symbol)\nTeaches(\"Professor Dumbledore\", \"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Teaches(teacher, \"Lord Voldemort\").\n.output Answer\n\n"]}
{"id": 1741, "answer": true, "completion": ".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Olympia Washington\", \"Olympia\").\nHas_name(\"Hephaestus's workshop\", \"Olympia\").\n.decl Answer()\nAnswer() :- Has_name(\"Olympia Washington\", name1), Has_name(\"Hephaestus's workshop\", name2), name1 = name2.\n.output Answer\n\n", "completions": [".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Olympia Washington\", \"Olympia\").\nHas_name(\"Hephaestus's workshop\", \"Olympia\").\n.decl Answer()\nAnswer() :- Has_name(\"Olympia Washington\", name1), Has_name(\"Hephaestus's workshop\", name2), name1 = name2.\n.output Answer\n\n"]}
{"id": 1742, "answer": true, "completion": ".decl Has_acronym(Group:symbol, Acronym:symbol)\nHas_acronym(\"joint committee\", \"JPEG\").\n.decl Answer()\nAnswer() :- Has_acronym(\"joint committee\", \"JPEG\").\n.output Answer\n\n", "completions": [".decl Has_acronym(Group:symbol, Acronym:symbol)\nHas_acronym(\"joint committee\", \"JPEG\").\n.decl Answer()\nAnswer() :- Has_acronym(\"joint committee\", \"JPEG\").\n.output Answer\n\n"]}
{"id": 1743, "answer": true, "completion": ".decl Has_money(Person:symbol, Money:float)\nHas_money(\"Mickey Mouse\", 0).\n.decl Has_price(Product:symbol, Price:float)\nHas_price(\"Zazzle\", 1).\n.decl Answer()\nAnswer() :- Has_money(\"Mickey Mouse\", money), Has_price(\"Zazzle\", price), money < price.\n.output Answer\n\n\n", "completions": [".decl Has_money(Person:symbol, Money:float)\nHas_money(\"Mickey Mouse\", 0).\n.decl Has_price(Product:symbol, Price:float)\nHas_price(\"Zazzle\", 1).\n.decl Answer()\nAnswer() :- Has_money(\"Mickey Mouse\", money), Has_price(\"Zazzle\", price), money < price.\n.output Answer\n\n\n"]}
{"id": 1744, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Watergate scandal\", \"1972\").\nHappens_in_time(\"Watergate scandal\", \"1973\").\nHappens_in_time(\"Watergate scandal\", \"1974\").\nHappens_in_time(\"Watergate scandal\", \"1975\").\nHappens_in_time(\"Watergate scandal\", \"1976\").\nHappens_in_time(\"Watergate scandal\", \"1977\").\nHappens_in_time(\"Watergate scandal\", \"1978\").\nHappens_in_time(\"Watergate scandal\", \"1979\").\nHappens_in_time(\"Watergate scandal\", \"1980\").\nHappens_in_time(\"Watergate scandal\", \"1981\").\nHappens_in_time(\"Watergate scandal\", \"1982\").\nHappens_in_time(\"Watergate scandal\", \"1983\").\nHappens_in_time(\"Watergate scandal\", \"1984\").\nHappens_in_time(\"Watergate scandal\", \"1985\").\nHappens_in_time(\"Watergate scandal\", \"1986\").\nHappens_in_time(\"Watergate scandal\", \"1987\").\nHappens_in_time(\"Watergate scandal\", \"1988\").\nHappens_in_time(\"Watergate scandal\", \"1989\").\nHappens_in_time(\"Watergate scandal\", \"1990\").\nHappens_in_time(\"Watergate scandal\", \"1991\").\nHappens_in_time(\"Watergate scandal\", \"1992\").\nHappens_in_time(\"Watergate scandal\", \"1993\").\nHappens_in_time(\"Watergate scandal\", \"1994\").\nHappens_in_time(\"Watergate scandal\", \"1995\").\nHappens_in_time(\"Watergate scandal\", \"1996\").\nHappens_in_time(\"Watergate scandal\", \"1997\").\nHappens_in_time(\"Watergate scandal\", \"1998\").\nHappens_in_time(\"Watergate scandal\", \"1999\").\nHappens_in_time(\"Watergate scandal\", \"2000\").\nHappens_in_time(\"Watergate scandal\", \"2001\").\nHappens_in_time(\"Watergate scandal\", \"2002\").\nHappens_in_time(\"Watergate scandal\", \"2003\").\nHappens_in_time(\"Watergate scandal\", \"2004\").\nHappens_in_time(\"Watergate scandal\", \"2005\").\nHappens_in_time(\"Watergate scandal\", \"2006\").\nHappens_in_time(\"Watergate scandal\", \"2007\").\nHappens_in_time(\"Watergate scandal\", \"2008\").\nHappens_in_time(\"Watergate scandal\", \"2009\").\nHappens_in_time(\"Watergate scandal\", \"2010\").\nHappens_in_time(\"Watergate scandal\", \"2011\").\nHappens_in_time(\"Watergate scandal\", \"2012\").\nHappens_in_time(\"Watergate scandal\", \"2013\").\nHappens_in_time(\"Watergate scandal\", \"2014\").\nHappens_in_time(\"Watergate scandal\", \"2015\").\nHappens_in_time(\"Watergate scandal\", \"2016\").\nHappens_in_time(\"Watergate scandal\", \"2017\").\nHappens_in_time(\"Watergate scandal\", \"2018\").\nHappens_in_time(\"Watergate scandal\", \"2019\").\nHappens_in_time(\"Watergate scandal", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Watergate scandal\", \"1972\").\nHappens_in_time(\"Watergate scandal\", \"1973\").\nHappens_in_time(\"Watergate scandal\", \"1974\").\nHappens_in_time(\"Watergate scandal\", \"1975\").\nHappens_in_time(\"Watergate scandal\", \"1976\").\nHappens_in_time(\"Watergate scandal\", \"1977\").\nHappens_in_time(\"Watergate scandal\", \"1978\").\nHappens_in_time(\"Watergate scandal\", \"1979\").\nHappens_in_time(\"Watergate scandal\", \"1980\").\nHappens_in_time(\"Watergate scandal\", \"1981\").\nHappens_in_time(\"Watergate scandal\", \"1982\").\nHappens_in_time(\"Watergate scandal\", \"1983\").\nHappens_in_time(\"Watergate scandal\", \"1984\").\nHappens_in_time(\"Watergate scandal\", \"1985\").\nHappens_in_time(\"Watergate scandal\", \"1986\").\nHappens_in_time(\"Watergate scandal\", \"1987\").\nHappens_in_time(\"Watergate scandal\", \"1988\").\nHappens_in_time(\"Watergate scandal\", \"1989\").\nHappens_in_time(\"Watergate scandal\", \"1990\").\nHappens_in_time(\"Watergate scandal\", \"1991\").\nHappens_in_time(\"Watergate scandal\", \"1992\").\nHappens_in_time(\"Watergate scandal\", \"1993\").\nHappens_in_time(\"Watergate scandal\", \"1994\").\nHappens_in_time(\"Watergate scandal\", \"1995\").\nHappens_in_time(\"Watergate scandal\", \"1996\").\nHappens_in_time(\"Watergate scandal\", \"1997\").\nHappens_in_time(\"Watergate scandal\", \"1998\").\nHappens_in_time(\"Watergate scandal\", \"1999\").\nHappens_in_time(\"Watergate scandal\", \"2000\").\nHappens_in_time(\"Watergate scandal\", \"2001\").\nHappens_in_time(\"Watergate scandal\", \"2002\").\nHappens_in_time(\"Watergate scandal\", \"2003\").\nHappens_in_time(\"Watergate scandal\", \"2004\").\nHappens_in_time(\"Watergate scandal\", \"2005\").\nHappens_in_time(\"Watergate scandal\", \"2006\").\nHappens_in_time(\"Watergate scandal\", \"2007\").\nHappens_in_time(\"Watergate scandal\", \"2008\").\nHappens_in_time(\"Watergate scandal\", \"2009\").\nHappens_in_time(\"Watergate scandal\", \"2010\").\nHappens_in_time(\"Watergate scandal\", \"2011\").\nHappens_in_time(\"Watergate scandal\", \"2012\").\nHappens_in_time(\"Watergate scandal\", \"2013\").\nHappens_in_time(\"Watergate scandal\", \"2014\").\nHappens_in_time(\"Watergate scandal\", \"2015\").\nHappens_in_time(\"Watergate scandal\", \"2016\").\nHappens_in_time(\"Watergate scandal\", \"2017\").\nHappens_in_time(\"Watergate scandal\", \"2018\").\nHappens_in_time(\"Watergate scandal\", \"2019\").\nHappens_in_time(\"Watergate scandal"]}
{"id": 1745, "answer": false, "completion": ".decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Dave Mustaine\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Kirk Hammett\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"James Hetfield\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Lars Ulrich\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Cliff Burton\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Jason Newsted\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Robert Trujillo\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Ron McGovney\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Lloyd Grant\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Les Claypool\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Dave Mustaine\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Kirk Hammett\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"James Hetfield\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Lars Ulrich\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Cliff Burton\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Jason Newsted\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Robert Trujillo\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Ron McGovney\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Lloyd Grant\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Les Claypool\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Dave Mustaine\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Kirk Hammett\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"James Hetfield\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Lars Ulrich\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Cliff Burton\").\n.decl Has_member(Group:sy", "completions": [".decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Dave Mustaine\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Kirk Hammett\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"James Hetfield\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Lars Ulrich\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Cliff Burton\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Jason Newsted\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Robert Trujillo\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Ron McGovney\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Lloyd Grant\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Les Claypool\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Dave Mustaine\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Kirk Hammett\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"James Hetfield\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Lars Ulrich\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Cliff Burton\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Jason Newsted\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Robert Trujillo\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Ron McGovney\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Lloyd Grant\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Les Claypool\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Dave Mustaine\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Kirk Hammett\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"James Hetfield\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Lars Ulrich\").\n.decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"Metallica\", \"Cliff Burton\").\n.decl Has_member(Group:sy"]}
{"id": 1746, "answer": true, "completion": ".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Iggy Pop\", \"James Newell Osterberg\").\n.decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Iggy Pop\", \"James Newell Osterberg\").\n.decl Answer()\nAnswer() :- Has_father(\"Iggy Pop\", father), Has_name(\"Iggy Pop\", name), father = name.\n.output Answer\n\n", "completions": [".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Iggy Pop\", \"James Newell Osterberg\").\n.decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Iggy Pop\", \"James Newell Osterberg\").\n.decl Answer()\nAnswer() :- Has_father(\"Iggy Pop\", father), Has_name(\"Iggy Pop\", name), father = name.\n.output Answer\n\n"]}
{"id": 1747, "answer": true, "completion": ".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Hindu\", \"Shiva\").\n.decl Makes_pilgrimage(Person:symbol, Place:symbol)\nMakes_pilgrimage(\"Hindu\", \"Holy Land\").\n.decl Answer()\nAnswer() :- Worships(person, \"Shiva\"), Makes_pilgrimage(person, \"Holy Land\").\n.output Answer\n\n", "completions": [".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Hindu\", \"Shiva\").\n.decl Makes_pilgrimage(Person:symbol, Place:symbol)\nMakes_pilgrimage(\"Hindu\", \"Holy Land\").\n.decl Answer()\nAnswer() :- Worships(person, \"Shiva\"), Makes_pilgrimage(person, \"Holy Land\").\n.output Answer\n\n"]}
{"id": 1748, "answer": true, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"coca leaves\", 0.1).\n.decl Answer()\nAnswer() :- Has_calories(\"coca leaves\", calories), calories > 0.\n.output Answer\n\n", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"coca leaves\", 0.1).\n.decl Answer()\nAnswer() :- Has_calories(\"coca leaves\", calories), calories > 0.\n.output Answer\n\n"]}
{"id": 1749, "answer": true, "completion": ".decl Has_formation_type(Swarm:symbol, Formation_type:symbol)\nHas_formation_type(\"black swan\", \"V\").\n.decl Has_length(Word:symbol, Length:float)\nHas_length(\"pneumonoultramicroscopicsilicovolcanoconiosis\", 45).\n.decl Answer()\nAnswer() :- Has_formation_type(\"black swan\", formation_type), Has_length(\"pneumonoultramicroscopicsilicovolcanoconiosis\", length), formation_type = \"V\", length = 45.\n.output Answer\n\n", "completions": [".decl Has_formation_type(Swarm:symbol, Formation_type:symbol)\nHas_formation_type(\"black swan\", \"V\").\n.decl Has_length(Word:symbol, Length:float)\nHas_length(\"pneumonoultramicroscopicsilicovolcanoconiosis\", 45).\n.decl Answer()\nAnswer() :- Has_formation_type(\"black swan\", formation_type), Has_length(\"pneumonoultramicroscopicsilicovolcanoconiosis\", length), formation_type = \"V\", length = 45.\n.output Answer\n\n"]}
{"id": 1750, "answer": false, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"C-SPAN\", \"C-SPAN\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"telecommunications that utilizes outer space\", \"C-SPAN\").\n.decl Answer()\nAnswer() :- Has_name(object1, \"C-SPAN\"), Has_name(object2, \"C-SPAN\"), object1 != object2.\n.output Answer\n\n", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"C-SPAN\", \"C-SPAN\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"telecommunications that utilizes outer space\", \"C-SPAN\").\n.decl Answer()\nAnswer() :- Has_name(object1, \"C-SPAN\"), Has_name(object2, \"C-SPAN\"), object1 != object2.\n.output Answer\n\n"]}
{"id": 1751, "answer": false, "completion": ".decl Has_frequency(Sound:symbol, Frequency:float)\nHas_frequency(\"Kelly Clarkson's voice\", 200).\nHas_frequency(\"glass breaking\", 2000).\n.decl Answer()\nAnswer() :- Has_frequency(\"Kelly Clarkson's voice\", frequency1), Has_frequency(\"glass breaking\", frequency2), frequency1 > frequency2.\n.output Answer\n\n", "completions": [".decl Has_frequency(Sound:symbol, Frequency:float)\nHas_frequency(\"Kelly Clarkson's voice\", 200).\nHas_frequency(\"glass breaking\", 2000).\n.decl Answer()\nAnswer() :- Has_frequency(\"Kelly Clarkson's voice\", frequency1), Has_frequency(\"glass breaking\", frequency2), frequency1 > frequency2.\n.output Answer\n\n"]}
{"id": 1752, "answer": true, "completion": ".decl Gives_presents(Person:symbol, Person_B:symbol)\nGives_presents(\"Santa Claus\", \"Joffrey Baratheon\").\n.decl Answer()\nAnswer() :- Gives_presents(\"Santa Claus\", \"Joffrey Baratheon\").\n.output Answer\n\n", "completions": [".decl Gives_presents(Person:symbol, Person_B:symbol)\nGives_presents(\"Santa Claus\", \"Joffrey Baratheon\").\n.decl Answer()\nAnswer() :- Gives_presents(\"Santa Claus\", \"Joffrey Baratheon\").\n.output Answer\n\n"]}
{"id": 1753, "answer": true, "completion": ".decl Has_scientific_family(Plant:symbol, Family:symbol)\nHas_scientific_family(\"slime lily\", \"Araceae\").\nHas_scientific_family(\"asparagus\", \"Asparagaceae\").\n.decl Answer()\nAnswer() :- Has_scientific_family(\"slime lily\", family1), Has_scientific_family(\"asparagus\", family2), family1 != family2.\n.output Answer\n\n", "completions": [".decl Has_scientific_family(Plant:symbol, Family:symbol)\nHas_scientific_family(\"slime lily\", \"Araceae\").\nHas_scientific_family(\"asparagus\", \"Asparagaceae\").\n.decl Answer()\nAnswer() :- Has_scientific_family(\"slime lily\", family1), Has_scientific_family(\"asparagus\", family2), family1 != family2.\n.output Answer\n\n"]}
{"id": 1754, "answer": false, "completion": ".decl Visits(Person:symbol, Place:symbol)\nVisits(\"Christopher Columbus\", \"America\").\n.decl Is_in(Place:symbol, Continent:symbol)\nIs_in(\"America\", \"North America\").\nIs_in(\"Antarctica\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Visits(\"Christopher Columbus\", place), Is_in(place, \"Antarctica\").\n.output Answer\n\n", "completions": [".decl Visits(Person:symbol, Place:symbol)\nVisits(\"Christopher Columbus\", \"America\").\n.decl Is_in(Place:symbol, Continent:symbol)\nIs_in(\"America\", \"North America\").\nIs_in(\"Antarctica\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Visits(\"Christopher Columbus\", place), Is_in(place, \"Antarctica\").\n.output Answer\n\n"]}
{"id": 1755, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"snake\", 1).\nHas_size(\"snowshoe\", 2).\n.decl Answer()\nAnswer() :- Has_size(\"snake\", size1), Has_size(\"snowshoe\", size2), size1 <= size2.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"snake\", 1).\nHas_size(\"snowshoe\", 2).\n.decl Answer()\nAnswer() :- Has_size(\"snake\", size1), Has_size(\"snowshoe\", size2), size1 <= size2.\n.output Answer\n\n"]}
{"id": 1756, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"northern fur seal needing emergency surgery\", \"July\").\nHappens_in_time(\"safe anesthesia candidate\", \"July\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"northern fur seal needing emergency surgery\", time), Happens_in_time(\"safe anesthesia candidate\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"northern fur seal needing emergency surgery\", \"July\").\nHappens_in_time(\"safe anesthesia candidate\", \"July\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"northern fur seal needing emergency surgery\", time), Happens_in_time(\"safe anesthesia candidate\", time).\n.output Answer\n\n"]}
{"id": 1757, "answer": true, "completion": ".decl Has_noise_level(Object:symbol, Noise_level:float)\nHas_noise_level(\"airplane\", 100).\n.decl Has_noise_limit(Place:symbol, Noise_limit:float)\nHas_noise_limit(\"Orange County, California\", 70).\n.decl Answer()\nAnswer() :- Has_noise_level(\"airplane\", noise_level), Has_noise_limit(\"Orange County, California\", noise_limit), noise_level > noise_limit.\n.output Answer\n\n\n", "completions": [".decl Has_noise_level(Object:symbol, Noise_level:float)\nHas_noise_level(\"airplane\", 100).\n.decl Has_noise_limit(Place:symbol, Noise_limit:float)\nHas_noise_limit(\"Orange County, California\", 70).\n.decl Answer()\nAnswer() :- Has_noise_level(\"airplane\", noise_level), Has_noise_limit(\"Orange County, California\", noise_limit), noise_level > noise_limit.\n.output Answer\n\n\n"]}
{"id": 1758, "answer": true, "completion": ".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Charlemagne\", \"Pepin the Short\").\n.decl Has_outcome(Event:symbol, Outcome:symbol)\nHas_outcome(\"Battle of Tours\", \"victory\").\n.decl Answer()\nAnswer() :- Has_father(\"Charlemagne\", father), Has_outcome(\"Battle of Tours\", outcome).\n.output Answer\n\n", "completions": [".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Charlemagne\", \"Pepin the Short\").\n.decl Has_outcome(Event:symbol, Outcome:symbol)\nHas_outcome(\"Battle of Tours\", \"victory\").\n.decl Answer()\nAnswer() :- Has_father(\"Charlemagne\", father), Has_outcome(\"Battle of Tours\", outcome).\n.output Answer\n\n"]}
{"id": 1759, "answer": true, "completion": ".decl Interviewed_by(Person_A:symbol, Person_B:symbol)\nInterviewed_by(\"Walt Disney\", \"Anderson Cooper\").\n.decl Answer()\nAnswer() :- Interviewed_by(\"Walt Disney\", \"Anderson Cooper\").\n.output Answer\n\n", "completions": [".decl Interviewed_by(Person_A:symbol, Person_B:symbol)\nInterviewed_by(\"Walt Disney\", \"Anderson Cooper\").\n.decl Answer()\nAnswer() :- Interviewed_by(\"Walt Disney\", \"Anderson Cooper\").\n.output Answer\n\n"]}
{"id": 1760, "answer": false, "completion": ".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Super Mario protagonist\", \"plumber\").\n.decl Needs_continuing_education(Occupation:symbol, State:symbol)\nNeeds_continuing_education(\"plumber\", \"Illinois\").\n.decl Answer()\nAnswer() :- Has_occupation(\"Super Mario protagonist\", occupation), Needs_continuing_education(occupation, \"Illinois\"), !Needs_continuing_education(occupation, \"Illinois\").\n.output Answer\n\n", "completions": [".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Super Mario protagonist\", \"plumber\").\n.decl Needs_continuing_education(Occupation:symbol, State:symbol)\nNeeds_continuing_education(\"plumber\", \"Illinois\").\n.decl Answer()\nAnswer() :- Has_occupation(\"Super Mario protagonist\", occupation), Needs_continuing_education(occupation, \"Illinois\"), !Needs_continuing_education(occupation, \"Illinois\").\n.output Answer\n\n"]}
{"id": 1761, "answer": true, "completion": ".decl Is_harmful_to(Disease:symbol, Person:symbol)\nIs_harmful_to(\"strep throat\", \"Rita Ora\").\n.decl Happens_after(Event1:symbol, Event2:symbol)\nHappens_after(\"2020 tonsilitis surgery\", \"Rita Ora\").\n.decl Answer()\nAnswer() :- Is_harmful_to(\"strep throat\", \"Rita Ora\"), Happens_after(\"2020 tonsilitis surgery\", \"Rita Ora\").\n.output Answer\n\n", "completions": [".decl Is_harmful_to(Disease:symbol, Person:symbol)\nIs_harmful_to(\"strep throat\", \"Rita Ora\").\n.decl Happens_after(Event1:symbol, Event2:symbol)\nHappens_after(\"2020 tonsilitis surgery\", \"Rita Ora\").\n.decl Answer()\nAnswer() :- Is_harmful_to(\"strep throat\", \"Rita Ora\"), Happens_after(\"2020 tonsilitis surgery\", \"Rita Ora\").\n.output Answer\n\n"]}
{"id": 1762, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"William Franklyn-Miller\", 10).\n.decl Has_age_limit(Event:symbol, Age_limit:float)\nHas_age_limit(\"2020 Nascar Cup Series race\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"William Franklyn-Miller\", age), Has_age_limit(\"2020 Nascar Cup Series race\", age_limit), age >= age_limit.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"William Franklyn-Miller\", 10).\n.decl Has_age_limit(Event:symbol, Age_limit:float)\nHas_age_limit(\"2020 Nascar Cup Series race\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"William Franklyn-Miller\", age), Has_age_limit(\"2020 Nascar Cup Series race\", age_limit), age >= age_limit.\n.output Answer\n\n"]}
{"id": 1763, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Powepuff Girls\", 3).\n.decl Has_n_colors(Flag:symbol, N_colors:float)\nHas_n_colors(\"Azerbaijani flag\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Powepuff Girls\", n_members), Has_n_colors(\"Azerbaijani flag\", n_colors), n_members >= n_colors.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Powepuff Girls\", 3).\n.decl Has_n_colors(Flag:symbol, N_colors:float)\nHas_n_colors(\"Azerbaijani flag\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Powepuff Girls\", n_members), Has_n_colors(\"Azerbaijani flag\", n_colors), n_members >= n_colors.\n.output Answer\n\n"]}
{"id": 1764, "answer": true, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Los Angeles Memorial Sports Arena\", 17000).\n.decl Has_attendance(Event:symbol, Attendance:float)\nHas_attendance(\"Coachella\", 80000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Los Angeles Memorial Sports Arena\", capacity), Has_attendance(\"Coachella\", attendance), capacity < attendance.\n.output Answer\n\n", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Los Angeles Memorial Sports Arena\", 17000).\n.decl Has_attendance(Event:symbol, Attendance:float)\nHas_attendance(\"Coachella\", 80000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Los Angeles Memorial Sports Arena\", capacity), Has_attendance(\"Coachella\", attendance), capacity < attendance.\n.output Answer\n\n"]}
{"id": 1765, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Moon Jae-in\", age).\n.decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Moon Jae-in\", \"Abitur\").\n.decl Answer()\nAnswer() :- Has_age(\"Moon Jae-in\", age), Has_degree(\"Moon Jae-in\", \"Abitur\"), age < 20.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Moon Jae-in\", age).\n.decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Moon Jae-in\", \"Abitur\").\n.decl Answer()\nAnswer() :- Has_age(\"Moon Jae-in\", age), Has_degree(\"Moon Jae-in\", \"Abitur\"), age < 20.\n.output Answer\n\n"]}
{"id": 1766, "answer": true, "completion": ".decl Is_popular_in(Sport:symbol, State:symbol)\nIs_popular_in(\"Bandy\", \"Minnesota\").\nIs_popular_in(\"Bandy\", \"Michigan\").\nIs_popular_in(\"Bandy\", \"New York\").\nIs_popular_in(\"Bandy\", \"Wisconsin\").\nIs_popular_in(\"Bandy\", \"Illinois\").\nIs_popular_in(\"Bandy\", \"Ohio\").\nIs_popular_in(\"Bandy\", \"Pennsylvania\").\nIs_popular_in(\"Bandy\", \"Indiana\").\nIs_popular_in(\"Bandy\", \"Iowa\").\nIs_popular_in(\"Bandy\", \"Missouri\").\nIs_popular_in(\"Bandy\", \"North Dakota\").\nIs_popular_in(\"Bandy\", \"South Dakota\").\nIs_popular_in(\"Bandy\", \"Nebraska\").\nIs_popular_in(\"Bandy\", \"Kansas\").\nIs_popular_in(\"Bandy\", \"Kentucky\").\nIs_popular_in(\"Bandy\", \"Tennessee\").\nIs_popular_in(\"Bandy\", \"Virginia\").\nIs_popular_in(\"Bandy\", \"West Virginia\").\nIs_popular_in(\"Bandy\", \"Maryland\").\nIs_popular_in(\"Bandy\", \"Delaware\").\nIs_popular_in(\"Bandy\", \"New Jersey\").\nIs_popular_in(\"Bandy\", \"Connecticut\").\nIs_popular_in(\"Bandy\", \"Rhode Island\").\nIs_popular_in(\"Bandy\", \"Massachusetts\").\nIs_popular_in(\"Bandy\", \"Vermont\").\nIs_popular_in(\"Bandy\", \"New Hampshire\").\nIs_popular_in(\"Bandy\", \"Maine\").\nIs_popular_in(\"Bandy\", \"Alaska\").\nIs_popular_in(\"Bandy\", \"Washington\").\nIs_popular_in(\"Bandy\", \"Oregon\").\nIs_popular_in(\"Bandy\", \"Idaho\").\nIs_popular_in(\"Bandy\", \"Montana\").\nIs_popular_in(\"Bandy\", \"Wyoming\").\nIs_popular_in(\"Bandy\", \"Colorado\").\nIs_popular_in(\"Bandy\", \"New Mexico\").\nIs_popular_in(\"Bandy\", \"Arizona\").\nIs_popular_in(\"Bandy\", \"Utah\").\nIs_popular_in(\"Bandy\", \"Nevada\").\nIs_popular_in(\"Bandy\", \"California\").\nIs_popular_in(\"Bandy\", \"Hawaii\").\nIs_popular_in(\"Bandy\", \"North Carolina\").\nIs_popular_in(\"Bandy\", \"South Carolina\").\nIs_popular_in(\"Bandy\", \"Georgia\").\nIs_popular_in(\"Bandy\", \"Florida\").\nIs_popular_in(\"Bandy\", \"Alabama\").\nIs_popular_in(\"Bandy\", \"Mississippi\").\nIs_popular_in(\"Bandy\", \"Arkansas\").\nIs_popular_in(\"Bandy\", \"Louisiana\").\nIs_popular_in(\"Bandy\", \"Oklahoma\").\nIs_popular_in(\"Bandy\", \"Texas\").\n.decl Answer()\nAnswer() :- Is_popular_in(\"Bandy\", \"Texas\").\n.output Answer\n\n", "completions": [".decl Is_popular_in(Sport:symbol, State:symbol)\nIs_popular_in(\"Bandy\", \"Minnesota\").\nIs_popular_in(\"Bandy\", \"Michigan\").\nIs_popular_in(\"Bandy\", \"New York\").\nIs_popular_in(\"Bandy\", \"Wisconsin\").\nIs_popular_in(\"Bandy\", \"Illinois\").\nIs_popular_in(\"Bandy\", \"Ohio\").\nIs_popular_in(\"Bandy\", \"Pennsylvania\").\nIs_popular_in(\"Bandy\", \"Indiana\").\nIs_popular_in(\"Bandy\", \"Iowa\").\nIs_popular_in(\"Bandy\", \"Missouri\").\nIs_popular_in(\"Bandy\", \"North Dakota\").\nIs_popular_in(\"Bandy\", \"South Dakota\").\nIs_popular_in(\"Bandy\", \"Nebraska\").\nIs_popular_in(\"Bandy\", \"Kansas\").\nIs_popular_in(\"Bandy\", \"Kentucky\").\nIs_popular_in(\"Bandy\", \"Tennessee\").\nIs_popular_in(\"Bandy\", \"Virginia\").\nIs_popular_in(\"Bandy\", \"West Virginia\").\nIs_popular_in(\"Bandy\", \"Maryland\").\nIs_popular_in(\"Bandy\", \"Delaware\").\nIs_popular_in(\"Bandy\", \"New Jersey\").\nIs_popular_in(\"Bandy\", \"Connecticut\").\nIs_popular_in(\"Bandy\", \"Rhode Island\").\nIs_popular_in(\"Bandy\", \"Massachusetts\").\nIs_popular_in(\"Bandy\", \"Vermont\").\nIs_popular_in(\"Bandy\", \"New Hampshire\").\nIs_popular_in(\"Bandy\", \"Maine\").\nIs_popular_in(\"Bandy\", \"Alaska\").\nIs_popular_in(\"Bandy\", \"Washington\").\nIs_popular_in(\"Bandy\", \"Oregon\").\nIs_popular_in(\"Bandy\", \"Idaho\").\nIs_popular_in(\"Bandy\", \"Montana\").\nIs_popular_in(\"Bandy\", \"Wyoming\").\nIs_popular_in(\"Bandy\", \"Colorado\").\nIs_popular_in(\"Bandy\", \"New Mexico\").\nIs_popular_in(\"Bandy\", \"Arizona\").\nIs_popular_in(\"Bandy\", \"Utah\").\nIs_popular_in(\"Bandy\", \"Nevada\").\nIs_popular_in(\"Bandy\", \"California\").\nIs_popular_in(\"Bandy\", \"Hawaii\").\nIs_popular_in(\"Bandy\", \"North Carolina\").\nIs_popular_in(\"Bandy\", \"South Carolina\").\nIs_popular_in(\"Bandy\", \"Georgia\").\nIs_popular_in(\"Bandy\", \"Florida\").\nIs_popular_in(\"Bandy\", \"Alabama\").\nIs_popular_in(\"Bandy\", \"Mississippi\").\nIs_popular_in(\"Bandy\", \"Arkansas\").\nIs_popular_in(\"Bandy\", \"Louisiana\").\nIs_popular_in(\"Bandy\", \"Oklahoma\").\nIs_popular_in(\"Bandy\", \"Texas\").\n.decl Answer()\nAnswer() :- Is_popular_in(\"Bandy\", \"Texas\").\n.output Answer\n\n"]}
{"id": 1767, "answer": true, "completion": ".decl Has_instrument(Spacecraft:symbol, Instrument:symbol)\nHas_instrument(\"Curiosity\", \"rock abrasion tool\").\n.decl Can_take_sample(Instrument:symbol, Object:symbol)\nCan_take_sample(\"rock abrasion tool\", \"rock\").\n.decl Is_in_location(Object:symbol, Location:symbol)\nIs_in_location(\"rock\", \"Lacus Temporis\").\n.decl Answer()\nAnswer() :- Has_instrument(\"Curiosity\", instrument), Can_take_sample(instrument, object), Is_in_location(object, \"Lacus Temporis\").\n.output Answer\n\n", "completions": [".decl Has_instrument(Spacecraft:symbol, Instrument:symbol)\nHas_instrument(\"Curiosity\", \"rock abrasion tool\").\n.decl Can_take_sample(Instrument:symbol, Object:symbol)\nCan_take_sample(\"rock abrasion tool\", \"rock\").\n.decl Is_in_location(Object:symbol, Location:symbol)\nIs_in_location(\"rock\", \"Lacus Temporis\").\n.decl Answer()\nAnswer() :- Has_instrument(\"Curiosity\", instrument), Can_take_sample(instrument, object), Is_in_location(object, \"Lacus Temporis\").\n.output Answer\n\n"]}
{"id": 1768, "answer": true, "completion": ".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"pancreas removal\", \"diabetes\").\nCauses(\"diabetes\", \"bankruptcy\").\n.decl Answer()\nAnswer() :- Causes(\"pancreas removal\", \"bankruptcy\").\nAnswer() :- Causes(\"pancreas removal\", event1), Causes(event1, \"bankruptcy\").\n.output Answer\n\n", "completions": [".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"pancreas removal\", \"diabetes\").\nCauses(\"diabetes\", \"bankruptcy\").\n.decl Answer()\nAnswer() :- Causes(\"pancreas removal\", \"bankruptcy\").\nAnswer() :- Causes(\"pancreas removal\", event1), Causes(event1, \"bankruptcy\").\n.output Answer\n\n"]}
{"id": 1769, "answer": true, "completion": ".decl Helps(Thing:symbol, Condition:symbol)\nHelps(\"sunscreen\", \"skin cancer\").\n.decl Kills(Condition:symbol, Person:symbol)\nKills(\"skin cancer\", \"Bob Marley\").\n.decl Answer()\nAnswer() :- Helps(\"sunscreen\", condition), Kills(condition, \"Bob Marley\").\n.output Answer\n\n\n", "completions": [".decl Helps(Thing:symbol, Condition:symbol)\nHelps(\"sunscreen\", \"skin cancer\").\n.decl Kills(Condition:symbol, Person:symbol)\nKills(\"skin cancer\", \"Bob Marley\").\n.decl Answer()\nAnswer() :- Helps(\"sunscreen\", condition), Kills(condition, \"Bob Marley\").\n.output Answer\n\n\n"]}
{"id": 1770, "answer": true, "completion": ".decl Has_blood_status(Person:symbol, Blood_status:symbol)\nHas_blood_status(\"Lord Voldemort\", \"pure-blood\").\nHas_blood_status(\"Lord Voldemort\", \"half-blood\").\nHas_blood_status(\"Lord Voldemort\", \"muggle-born\").\nHas_blood_status(\"Lord Voldemort\", \"squib\").\n.decl Answer()\nAnswer() :- Has_blood_status(\"Lord Voldemort\", blood_status), blood_status != \"pure-blood\".\n.output Answer\n\n", "completions": [".decl Has_blood_status(Person:symbol, Blood_status:symbol)\nHas_blood_status(\"Lord Voldemort\", \"pure-blood\").\nHas_blood_status(\"Lord Voldemort\", \"half-blood\").\nHas_blood_status(\"Lord Voldemort\", \"muggle-born\").\nHas_blood_status(\"Lord Voldemort\", \"squib\").\n.decl Answer()\nAnswer() :- Has_blood_status(\"Lord Voldemort\", blood_status), blood_status != \"pure-blood\".\n.output Answer\n\n"]}
{"id": 1771, "answer": false, "completion": ".decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"neighborhood\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"borough\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"city\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"state\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"country\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"continent\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"hemisphere\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"planet\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"solar system\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"galaxy\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"universe\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"multiverse\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"dimension\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"space\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"time\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"reality\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"existence\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"nothingness\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"imagination\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"dream\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"fantasy\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"illusion\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"delusion\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown", "completions": [".decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"neighborhood\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"borough\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"city\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"state\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"country\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"continent\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"hemisphere\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"planet\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"solar system\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"galaxy\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"universe\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"multiverse\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"dimension\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"space\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"time\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"reality\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"existence\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"nothingness\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"imagination\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"dream\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"fantasy\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"illusion\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown, Manhattan\", \"delusion\").\n.decl Is_in(Place:symbol, Place_type:symbol)\nIs_in(\"Chinatown"]}
{"id": 1772, "answer": true, "completion": ".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"President of Mexico\", \"Mexico\").\n.decl Can_vote_in(Person:symbol, Election:symbol)\nCan_vote_in(\"President of Mexico\", \"New Mexico primaries\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"President of Mexico\", \"Mexico\"), Can_vote_in(\"President of Mexico\", \"New Mexico primaries\").\n.output Answer\n\n", "completions": [".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"President of Mexico\", \"Mexico\").\n.decl Can_vote_in(Person:symbol, Election:symbol)\nCan_vote_in(\"President of Mexico\", \"New Mexico primaries\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"President of Mexico\", \"Mexico\"), Can_vote_in(\"President of Mexico\", \"New Mexico primaries\").\n.output Answer\n\n"]}
{"id": 1773, "answer": true, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"print of a Van Goh\", 100).\n.decl Answer()\nAnswer() :- Has_value(\"print of a Van Goh\", value), value > 0.\n.output Answer\n\n", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"print of a Van Goh\", 100).\n.decl Answer()\nAnswer() :- Has_value(\"print of a Van Goh\", value), value > 0.\n.output Answer\n\n"]}
{"id": 1774, "answer": false, "completion": ".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Cornwall\", \"England\").\nIs_near(\"England\", \"Europe\").\n.decl Was_born_in(Person:symbol, Place:symbol)\nWas_born_in(\"John George Bice\", \"England\").\n.decl Answer()\nAnswer() :- Was_born_in(\"John George Bice\", place1), Is_near(\"Cornwall\", place2), Is_near(place1, place2).\n.output Answer\n\n\n", "completions": [".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Cornwall\", \"England\").\nIs_near(\"England\", \"Europe\").\n.decl Was_born_in(Person:symbol, Place:symbol)\nWas_born_in(\"John George Bice\", \"England\").\n.decl Answer()\nAnswer() :- Was_born_in(\"John George Bice\", place1), Is_near(\"Cornwall\", place2), Is_near(place1, place2).\n.output Answer\n\n\n"]}
{"id": 1775, "answer": true, "completion": ".decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Elijah Cummings\", \"Joe Biden\").\n.decl Answer()\nAnswer() :- Votes_for(\"Elijah Cummings\", \"Joe Biden\").\n.output Answer\n\n", "completions": [".decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Elijah Cummings\", \"Joe Biden\").\n.decl Answer()\nAnswer() :- Votes_for(\"Elijah Cummings\", \"Joe Biden\").\n.output Answer\n\n"]}
{"id": 1776, "answer": true, "completion": ".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Lord Voldemort\", 10).\n.decl Has_strength_loss(Spell:symbol, Strength_loss:float)\nHas_strength_loss(\"Final Fantasy silence\", 5).\n.decl Answer()\nAnswer() :- Has_strength(\"Lord Voldemort\", strength1), Has_strength_loss(\"Final Fantasy silence\", strength_loss), strength1 - strength_loss > 0.\n.output Answer\n\n", "completions": [".decl Has_strength(Person:symbol, Strength:float)\nHas_strength(\"Lord Voldemort\", 10).\n.decl Has_strength_loss(Spell:symbol, Strength_loss:float)\nHas_strength_loss(\"Final Fantasy silence\", 5).\n.decl Answer()\nAnswer() :- Has_strength(\"Lord Voldemort\", strength1), Has_strength_loss(\"Final Fantasy silence\", strength_loss), strength1 - strength_loss > 0.\n.output Answer\n\n"]}
{"id": 1777, "answer": true, "completion": ".decl Costs(Object:symbol, Price:float)\nCosts(\"chlorine\", 0.5).\n.decl Answer()\nAnswer() :- Costs(\"chlorine\", price), price <= 1.\n.output Answer\n\n", "completions": [".decl Costs(Object:symbol, Price:float)\nCosts(\"chlorine\", 0.5).\n.decl Answer()\nAnswer() :- Costs(\"chlorine\", price), price <= 1.\n.output Answer\n\n"]}
{"id": 1778, "answer": false, "completion": ".decl Is_execution_method(Method:symbol)\nIs_execution_method(\"hanging\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"firing squad\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"gas chamber\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"electric chair\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"lethal injection\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"beheading\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"stoning\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"crucifixion\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"drowning\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"burning at the stake\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"impalement\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"boiling\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"flaying\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"scaphism\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"bludgeoning\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"garroting\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"decapitation\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"disembowelment\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"drawing and quartering\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"hanging, drawing and quartering\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by a thousand cuts\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by cop\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by misadventure\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by natural causes\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by negligence\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by suicide\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by torture\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by unknown causes\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by violence\").\n.decl Is_execution_method", "completions": [".decl Is_execution_method(Method:symbol)\nIs_execution_method(\"hanging\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"firing squad\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"gas chamber\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"electric chair\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"lethal injection\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"beheading\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"stoning\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"crucifixion\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"drowning\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"burning at the stake\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"impalement\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"boiling\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"flaying\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"scaphism\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"bludgeoning\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"garroting\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"decapitation\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"disembowelment\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"drawing and quartering\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"hanging, drawing and quartering\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by a thousand cuts\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by cop\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by misadventure\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by natural causes\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by negligence\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by suicide\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by torture\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by unknown causes\").\n.decl Is_execution_method(Method:symbol)\nIs_execution_method(\"death by violence\").\n.decl Is_execution_method"]}
{"id": 1779, "answer": true, "completion": ".decl Has_princess(Company:symbol, Princess:symbol)\nHas_princess(\"Disney\", \"Elsa\").\n.decl Has_ice_princess(Company:symbol, Princess:symbol)\nHas_ice_princess(\"Disney\", \"Elsa\").\n.decl Answer()\nAnswer() :- Has_princess(company, princess), Has_ice_princess(company, princess).\n.output Answer\n\n", "completions": [".decl Has_princess(Company:symbol, Princess:symbol)\nHas_princess(\"Disney\", \"Elsa\").\n.decl Has_ice_princess(Company:symbol, Princess:symbol)\nHas_ice_princess(\"Disney\", \"Elsa\").\n.decl Answer()\nAnswer() :- Has_princess(company, princess), Has_ice_princess(company, princess).\n.output Answer\n\n"]}
{"id": 1780, "answer": true, "completion": ".decl Is_edible(Object:symbol)\nIs_edible(\"hair\").\n.decl Answer()\nAnswer() :- Is_edible(\"hair\").\n.output Answer\n\n", "completions": [".decl Is_edible(Object:symbol)\nIs_edible(\"hair\").\n.decl Answer()\nAnswer() :- Is_edible(\"hair\").\n.output Answer\n\n"]}
{"id": 1781, "answer": true, "completion": ".decl Is_currency(Object:symbol, Country:symbol)\nIs_currency(\"penny\", \"Canada\").\n.decl Answer()\nAnswer() :- Is_currency(\"penny\", \"Canada\").\n.output Answer\n\n", "completions": [".decl Is_currency(Object:symbol, Country:symbol)\nIs_currency(\"penny\", \"Canada\").\n.decl Answer()\nAnswer() :- Is_currency(\"penny\", \"Canada\").\n.output Answer\n\n"]}
{"id": 1782, "answer": false, "completion": ".decl Has_n_letters(Word:symbol, N_letters:float)\nHas_n_letters(\"monster name in West African Folklore that witches send into villages\", 50).\n.decl Has_n_points(Word:symbol, N_points:float)\nHas_n_points(\"Scrabble\", 50).\n.decl Answer()\nAnswer() :- Has_n_letters(\"monster name in West African Folklore that witches send into villages\", n_letters1), Has_n_points(\"Scrabble\", n_points1), n_letters1 > n_points1.\n.output Answer\n\n", "completions": [".decl Has_n_letters(Word:symbol, N_letters:float)\nHas_n_letters(\"monster name in West African Folklore that witches send into villages\", 50).\n.decl Has_n_points(Word:symbol, N_points:float)\nHas_n_points(\"Scrabble\", 50).\n.decl Answer()\nAnswer() :- Has_n_letters(\"monster name in West African Folklore that witches send into villages\", n_letters1), Has_n_points(\"Scrabble\", n_points1), n_letters1 > n_points1.\n.output Answer\n\n"]}
{"id": 1783, "answer": true, "completion": ".decl Has_n_song_titles(Plant:symbol, N_song_titles:float)\nHas_n_song_titles(\"rosemary\", 1).\nHas_n_song_titles(\"daisy\", 2).\n.decl Answer()\nAnswer() :- Has_n_song_titles(\"rosemary\", n_song_titles1), Has_n_song_titles(\"daisy\", n_song_titles2), n_song_titles1 < n_song_titles2.\n.output Answer\n\n", "completions": [".decl Has_n_song_titles(Plant:symbol, N_song_titles:float)\nHas_n_song_titles(\"rosemary\", 1).\nHas_n_song_titles(\"daisy\", 2).\n.decl Answer()\nAnswer() :- Has_n_song_titles(\"rosemary\", n_song_titles1), Has_n_song_titles(\"daisy\", n_song_titles2), n_song_titles1 < n_song_titles2.\n.output Answer\n\n"]}
{"id": 1784, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"person\", \"St. Vitus's Dance\").\n.decl Wins(Person:symbol, Competition:symbol)\nWins(\"person\", \"ballet competition\").\n.decl Answer()\nAnswer() :- Has_disease(\"person\", \"St. Vitus's Dance\"), Wins(\"person\", \"ballet competition\").\n.output Answer\n\n", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"person\", \"St. Vitus's Dance\").\n.decl Wins(Person:symbol, Competition:symbol)\nWins(\"person\", \"ballet competition\").\n.decl Answer()\nAnswer() :- Has_disease(\"person\", \"St. Vitus's Dance\"), Wins(\"person\", \"ballet competition\").\n.output Answer\n\n"]}
{"id": 1785, "answer": false, "completion": ".decl Is_part_of(Object:symbol, Object2:symbol)\nIs_part_of(\"Phobos\", \"Mars\").\nIs_part_of(\"Mars\", \"Solar System\").\nIs_part_of(\"Solar System\", \"Milky Way\").\nIs_part_of(\"Milky Way\", \"Local Group\").\nIs_part_of(\"Local Group\", \"Virgo Supercluster\").\nIs_part_of(\"Virgo Supercluster\", \"Observable Universe\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Phobos\", \"Andromeda galaxy\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Object:symbol, Object2:symbol)\nIs_part_of(\"Phobos\", \"Mars\").\nIs_part_of(\"Mars\", \"Solar System\").\nIs_part_of(\"Solar System\", \"Milky Way\").\nIs_part_of(\"Milky Way\", \"Local Group\").\nIs_part_of(\"Local Group\", \"Virgo Supercluster\").\nIs_part_of(\"Virgo Supercluster\", \"Observable Universe\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Phobos\", \"Andromeda galaxy\").\n.output Answer\n\n"]}
{"id": 1786, "answer": false, "completion": ".decl Equivalent(God1:symbol, God2:symbol)\nEquivalent(\"Hermes\", \"Mercury\").\nEquivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Equivalent(\"Hermes\", god1), Equivalent(\"Vulcan\", god2), god1 = god2.\n.output Answer\n\n", "completions": [".decl Equivalent(God1:symbol, God2:symbol)\nEquivalent(\"Hermes\", \"Mercury\").\nEquivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Equivalent(\"Hermes\", god1), Equivalent(\"Vulcan\", god2), god1 = god2.\n.output Answer\n\n"]}
{"id": 1787, "answer": false, "completion": ".decl Is_a(Animal:symbol, Species:symbol)\nIs_a(\"ocelot\", \"cat\").\n.decl Is_a(Person:symbol, Age_group:symbol)\nIs_a(\"kindergartener\", \"child\").\n.decl Likes(Person:symbol, Animal:symbol)\nLikes(\"child\", \"cat\").\n.decl Answer()\nAnswer() :- Is_a(\"ocelot\", species), Is_a(\"kindergartener\", age_group), Likes(age_group, species).\n.output Answer\n\n", "completions": [".decl Is_a(Animal:symbol, Species:symbol)\nIs_a(\"ocelot\", \"cat\").\n.decl Is_a(Person:symbol, Age_group:symbol)\nIs_a(\"kindergartener\", \"child\").\n.decl Likes(Person:symbol, Animal:symbol)\nLikes(\"child\", \"cat\").\n.decl Answer()\nAnswer() :- Is_a(\"ocelot\", species), Is_a(\"kindergartener\", age_group), Likes(age_group, species).\n.output Answer\n\n"]}
{"id": 1788, "answer": true, "completion": ".decl Is_part_of(Region:symbol, Army:symbol)\nIs_part_of(\"Alaska\", \"Northern Army\").\nIs_part_of(\"Alaska\", \"Southern Army\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Alaska\", \"Northern Army\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Region:symbol, Army:symbol)\nIs_part_of(\"Alaska\", \"Northern Army\").\nIs_part_of(\"Alaska\", \"Southern Army\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Alaska\", \"Northern Army\").\n.output Answer\n\n"]}
{"id": 1789, "answer": false, "completion": ".decl Is_favorite_holiday(Person:symbol, Holiday:symbol)\nIs_favorite_holiday(\"Bacchus\", \"Mardi Gras\").\n.decl Is_holiday(Event:symbol)\nIs_holiday(\"New Year's Eve\").\n.decl Answer()\nAnswer() :- Is_favorite_holiday(\"Bacchus\", \"New Year's Eve\").\n.output Answer\n\n", "completions": [".decl Is_favorite_holiday(Person:symbol, Holiday:symbol)\nIs_favorite_holiday(\"Bacchus\", \"Mardi Gras\").\n.decl Is_holiday(Event:symbol)\nIs_holiday(\"New Year's Eve\").\n.decl Answer()\nAnswer() :- Is_favorite_holiday(\"Bacchus\", \"New Year's Eve\").\n.output Answer\n\n"]}
{"id": 1790, "answer": true, "completion": ".decl Has_attribute(Object:symbol, Attribute:symbol)\nHas_attribute(\"Poseidon\", \"god\").\nHas_attribute(\"Vulcan\", \"god\").\nHas_attribute(\"Poseidon\", \"water\").\nHas_attribute(\"Vulcan\", \"fire\").\n.decl Answer()\nAnswer() :- Has_attribute(\"Poseidon\", attribute1), Has_attribute(\"Vulcan\", attribute2), attribute1 = attribute2.\n.output Answer\n\n", "completions": [".decl Has_attribute(Object:symbol, Attribute:symbol)\nHas_attribute(\"Poseidon\", \"god\").\nHas_attribute(\"Vulcan\", \"god\").\nHas_attribute(\"Poseidon\", \"water\").\nHas_attribute(\"Vulcan\", \"fire\").\n.decl Answer()\nAnswer() :- Has_attribute(\"Poseidon\", attribute1), Has_attribute(\"Vulcan\", attribute2), attribute1 = attribute2.\n.output Answer\n\n"]}
{"id": 1791, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"sing sea shanties\", \"Oregon Trail\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"sing sea shanties\", \"Oregon Trail\").\n.output Answer\n\n", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"sing sea shanties\", \"Oregon Trail\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"sing sea shanties\", \"Oregon Trail\").\n.output Answer\n\n"]}
{"id": 1792, "answer": false, "completion": ".decl Cures(Drug:symbol, Disease:symbol)\nCures(\"morphine\", \"pain\").\n.decl Answer()\nAnswer() :- Cures(\"morphine\", \"HIV\").\n.output Answer\n\n", "completions": [".decl Cures(Drug:symbol, Disease:symbol)\nCures(\"morphine\", \"pain\").\n.decl Answer()\nAnswer() :- Cures(\"morphine\", \"HIV\").\n.output Answer\n\n"]}
{"id": 1793, "answer": true, "completion": ".decl Directed(Person:symbol, Movie:symbol)\nDirected(\"Lana Wachowski\", \"The Matrix\").\nDirected(\"Lilly Wachowski\", \"The Matrix\").\n.decl Advocates_for(Person:symbol, Cause:symbol)\nAdvocates_for(\"Lana Wachowski\", \"transgender rights\").\n.decl Answer()\nAnswer() :- Directed(person, \"The Matrix\"), Advocates_for(person, \"transgender rights\").\n.output Answer\n\n", "completions": [".decl Directed(Person:symbol, Movie:symbol)\nDirected(\"Lana Wachowski\", \"The Matrix\").\nDirected(\"Lilly Wachowski\", \"The Matrix\").\n.decl Advocates_for(Person:symbol, Cause:symbol)\nAdvocates_for(\"Lana Wachowski\", \"transgender rights\").\n.decl Answer()\nAnswer() :- Directed(person, \"The Matrix\"), Advocates_for(person, \"transgender rights\").\n.output Answer\n\n"]}
{"id": 1794, "answer": true, "completion": ".decl Has_menu(Restaurant:symbol, Menu:symbol)\nHas_menu(\"Chinese Starbucks\", \"Chinese\").\nHas_menu(\"Chinese Starbucks\", \"American\").\n.decl Is_familiar_with(Person:symbol, Menu:symbol)\nIs_familiar_with(\"American\", \"American\").\n.decl Answer()\nAnswer() :- Has_menu(\"Chinese Starbucks\", menu), Is_familiar_with(\"American\", menu).\n.output Answer\n\n", "completions": [".decl Has_menu(Restaurant:symbol, Menu:symbol)\nHas_menu(\"Chinese Starbucks\", \"Chinese\").\nHas_menu(\"Chinese Starbucks\", \"American\").\n.decl Is_familiar_with(Person:symbol, Menu:symbol)\nIs_familiar_with(\"American\", \"American\").\n.decl Answer()\nAnswer() :- Has_menu(\"Chinese Starbucks\", menu), Is_familiar_with(\"American\", menu).\n.output Answer\n\n"]}
{"id": 1795, "answer": true, "completion": ".decl Uses(Person:symbol, Object:symbol)\nUses(\"Mario\", \"mushroom\").\n.decl Makes_faster(Object:symbol)\nMakes_faster(\"mushroom\").\n.decl Answer()\nAnswer() :- Uses(\"Mario\", object), Makes_faster(object).\n.output Answer\n\n", "completions": [".decl Uses(Person:symbol, Object:symbol)\nUses(\"Mario\", \"mushroom\").\n.decl Makes_faster(Object:symbol)\nMakes_faster(\"mushroom\").\n.decl Answer()\nAnswer() :- Uses(\"Mario\", object), Makes_faster(object).\n.output Answer\n\n"]}
{"id": 1796, "answer": false, "completion": ".decl Is_older_than(Person_A:symbol, Person_B:symbol)\nIs_older_than(\"lieutenant\", \"child\").\n.decl Answer()\nAnswer() :- Is_older_than(person1, \"child\"), Is_older_than(\"lieutenant\", person1).\n.output Answer\n\n", "completions": [".decl Is_older_than(Person_A:symbol, Person_B:symbol)\nIs_older_than(\"lieutenant\", \"child\").\n.decl Answer()\nAnswer() :- Is_older_than(person1, \"child\"), Is_older_than(\"lieutenant\", person1).\n.output Answer\n\n"]}
{"id": 1797, "answer": false, "completion": ".decl Has_n_keys(Keyboard:symbol, N_keys:float)\nHas_n_keys(\"QWERTY keyboard layout\", 104).\n.decl Has_n_keys(Keyboard:symbol, N_keys:float)\nHas_n_keys(\"Dvorak keyboard layout\", 104).\n.decl Answer()\nAnswer() :- Has_n_keys(\"QWERTY keyboard layout\", n_keys1), Has_n_keys(\"Dvorak keyboard layout\", n_keys2), n_keys1 < n_keys2.\n.output Answer\n\n", "completions": [".decl Has_n_keys(Keyboard:symbol, N_keys:float)\nHas_n_keys(\"QWERTY keyboard layout\", 104).\n.decl Has_n_keys(Keyboard:symbol, N_keys:float)\nHas_n_keys(\"Dvorak keyboard layout\", 104).\n.decl Answer()\nAnswer() :- Has_n_keys(\"QWERTY keyboard layout\", n_keys1), Has_n_keys(\"Dvorak keyboard layout\", n_keys2), n_keys1 < n_keys2.\n.output Answer\n\n"]}
{"id": 1798, "answer": false, "completion": ".decl Has_political_party(Person:symbol, Political_party:symbol)\nHas_political_party(\"Nancy Pelosi\", \"Democratic Party\").\nHas_political_party(\"Gerald Ford\", \"Republican Party\").\n.decl Answer()\nAnswer() :- Has_political_party(\"Nancy Pelosi\", \"Republican Party\").\nAnswer() :- Has_political_party(\"Nancy Pelosi\", \"Democratic Party\"), Has_political_party(\"Gerald Ford\", \"Democratic Party\").\n.output Answer\n\n", "completions": [".decl Has_political_party(Person:symbol, Political_party:symbol)\nHas_political_party(\"Nancy Pelosi\", \"Democratic Party\").\nHas_political_party(\"Gerald Ford\", \"Republican Party\").\n.decl Answer()\nAnswer() :- Has_political_party(\"Nancy Pelosi\", \"Republican Party\").\nAnswer() :- Has_political_party(\"Nancy Pelosi\", \"Democratic Party\"), Has_political_party(\"Gerald Ford\", \"Democratic Party\").\n.output Answer\n\n"]}
{"id": 1799, "answer": true, "completion": ".decl Prevents_growth(Plant_A:symbol, Plant_B:symbol)\nPrevents_growth(\"sweet potato\", \"other plants\").\n.decl Answer()\nAnswer() :- Prevents_growth(\"sweet potato\", \"other plants\").\n.output Answer\n\n", "completions": [".decl Prevents_growth(Plant_A:symbol, Plant_B:symbol)\nPrevents_growth(\"sweet potato\", \"other plants\").\n.decl Answer()\nAnswer() :- Prevents_growth(\"sweet potato\", \"other plants\").\n.output Answer\n\n"]}
{"id": 1800, "answer": true, "completion": ".decl Has_spinal_cord(Animal:symbol, Has_spinal_cord:symbol)\nHas_spinal_cord(\"hedgehog\", \"yes\").\nHas_spinal_cord(\"snake\", \"no\").\n.decl Avoids(Animal_A:symbol, Animal_B:symbol)\nAvoids(\"hedgehog\", \"snake\").\n.decl Answer()\nAnswer() :- Has_spinal_cord(animal1, \"yes\"), Has_spinal_cord(animal2, \"no\"), Avoids(animal1, animal2).\n.output Answer\n\n", "completions": [".decl Has_spinal_cord(Animal:symbol, Has_spinal_cord:symbol)\nHas_spinal_cord(\"hedgehog\", \"yes\").\nHas_spinal_cord(\"snake\", \"no\").\n.decl Avoids(Animal_A:symbol, Animal_B:symbol)\nAvoids(\"hedgehog\", \"snake\").\n.decl Answer()\nAnswer() :- Has_spinal_cord(animal1, \"yes\"), Has_spinal_cord(animal2, \"no\"), Avoids(animal1, animal2).\n.output Answer\n\n"]}
{"id": 1801, "answer": true, "completion": ".decl Causes(Agent:symbol, Patient:symbol)\nCauses(\"white pigment\", \"paresthesia\").\n.decl Answer()\nAnswer() :- Causes(agent, \"paresthesia\").\n.output Answer\n\n", "completions": [".decl Causes(Agent:symbol, Patient:symbol)\nCauses(\"white pigment\", \"paresthesia\").\n.decl Answer()\nAnswer() :- Causes(agent, \"paresthesia\").\n.output Answer\n\n"]}
{"id": 1802, "answer": false, "completion": ".decl Is_ancestor_of(Person_A:symbol, Person_B:symbol)\nIs_ancestor_of(\"Mary, Queen of Scots\", \"James I of England\").\nIs_ancestor_of(\"James I of England\", \"Charles I of England\").\nIs_ancestor_of(\"Charles I of England\", \"Charles II of England\").\nIs_ancestor_of(\"Charles II of England\", \"James II of England\").\nIs_ancestor_of(\"James II of England\", \"Mary II of England\").\nIs_ancestor_of(\"Mary II of England\", \"Anne of Great Britain\").\nIs_ancestor_of(\"Anne of Great Britain\", \"George I of Great Britain\").\nIs_ancestor_of(\"George I of Great Britain\", \"George II of Great Britain\").\nIs_ancestor_of(\"George II of Great Britain\", \"George III of the United Kingdom\").\nIs_ancestor_of(\"George III of the United Kingdom\", \"George IV of the United Kingdom\").\nIs_ancestor_of(\"George IV of the United Kingdom\", \"William IV of the United Kingdom\").\nIs_ancestor_of(\"William IV of the United Kingdom\", \"Victoria of the United Kingdom\").\nIs_ancestor_of(\"Victoria of the United Kingdom\", \"Edward VII of the United Kingdom\").\nIs_ancestor_of(\"Edward VII of the United Kingdom\", \"George V of the United Kingdom\").\nIs_ancestor_of(\"George V of the United Kingdom\", \"Edward VIII of the United Kingdom\").\nIs_ancestor_of(\"Edward VIII of the United Kingdom\", \"George VI of the United Kingdom\").\nIs_ancestor_of(\"George VI of the United Kingdom\", \"Elizabeth II of the United Kingdom\").\nIs_ancestor_of(\"Elizabeth II of the United Kingdom\", \"Charles, Prince of Wales\").\nIs_ancestor_of(\"Charles, Prince of Wales\", \"Prince William, Duke of Cambridge\").\nIs_ancestor_of(\"Prince William, Duke of Cambridge\", \"Prince George of Cambridge\").\nIs_ancestor_of(\"Prince George of Cambridge\", \"Prince Louis of Cambridge\").\nIs_ancestor_of(\"Prince Louis of Cambridge\", \"Prince Harry, Duke of Sussex\").\nIs_ancestor_of(\"Prince Harry, Duke of Sussex\", \"Archie Mountbatten-Windsor\").\nIs_ancestor_of(\"Archie Mountbatten-Windsor\", \"Prince Andrew, Duke of York\").\nIs_ancestor_of(\"Prince Andrew, Duke of York\", \"Princess Beatrice of York\").\nIs_ancestor_of(\"Princess Beatrice of York\", \"Princess Eugenie of York\").\nIs_ancestor_of(\"Princess Eugenie of York\", \"Prince Edward, Earl of Wessex\").\nIs_ancestor_of(\"Prince Edward, Earl of Wessex\", \"James, Viscount Severn\").\nIs_ancestor_of(\"James, Viscount Severn\", \"Lady Louise Windsor\").\nIs_ancestor_of(\"Lady Louise Windsor\", \"Anne, Princess Royal\").\nIs_ancestor_of(\"Anne, Princess Royal\", \"Peter Phillips\").\nIs_ancestor_of(\"Peter Phillips\", \"Savannah Phillips\").\nIs_ancestor_of(\"Savannah Phillips\", \"Isla Phillips\").\nIs_ancestor_of(\"Isla Phillips\", \"Zara Tindall\").\nIs_ancestor_of(\"Zara Tindall\", \"Mia T", "completions": [".decl Is_ancestor_of(Person_A:symbol, Person_B:symbol)\nIs_ancestor_of(\"Mary, Queen of Scots\", \"James I of England\").\nIs_ancestor_of(\"James I of England\", \"Charles I of England\").\nIs_ancestor_of(\"Charles I of England\", \"Charles II of England\").\nIs_ancestor_of(\"Charles II of England\", \"James II of England\").\nIs_ancestor_of(\"James II of England\", \"Mary II of England\").\nIs_ancestor_of(\"Mary II of England\", \"Anne of Great Britain\").\nIs_ancestor_of(\"Anne of Great Britain\", \"George I of Great Britain\").\nIs_ancestor_of(\"George I of Great Britain\", \"George II of Great Britain\").\nIs_ancestor_of(\"George II of Great Britain\", \"George III of the United Kingdom\").\nIs_ancestor_of(\"George III of the United Kingdom\", \"George IV of the United Kingdom\").\nIs_ancestor_of(\"George IV of the United Kingdom\", \"William IV of the United Kingdom\").\nIs_ancestor_of(\"William IV of the United Kingdom\", \"Victoria of the United Kingdom\").\nIs_ancestor_of(\"Victoria of the United Kingdom\", \"Edward VII of the United Kingdom\").\nIs_ancestor_of(\"Edward VII of the United Kingdom\", \"George V of the United Kingdom\").\nIs_ancestor_of(\"George V of the United Kingdom\", \"Edward VIII of the United Kingdom\").\nIs_ancestor_of(\"Edward VIII of the United Kingdom\", \"George VI of the United Kingdom\").\nIs_ancestor_of(\"George VI of the United Kingdom\", \"Elizabeth II of the United Kingdom\").\nIs_ancestor_of(\"Elizabeth II of the United Kingdom\", \"Charles, Prince of Wales\").\nIs_ancestor_of(\"Charles, Prince of Wales\", \"Prince William, Duke of Cambridge\").\nIs_ancestor_of(\"Prince William, Duke of Cambridge\", \"Prince George of Cambridge\").\nIs_ancestor_of(\"Prince George of Cambridge\", \"Prince Louis of Cambridge\").\nIs_ancestor_of(\"Prince Louis of Cambridge\", \"Prince Harry, Duke of Sussex\").\nIs_ancestor_of(\"Prince Harry, Duke of Sussex\", \"Archie Mountbatten-Windsor\").\nIs_ancestor_of(\"Archie Mountbatten-Windsor\", \"Prince Andrew, Duke of York\").\nIs_ancestor_of(\"Prince Andrew, Duke of York\", \"Princess Beatrice of York\").\nIs_ancestor_of(\"Princess Beatrice of York\", \"Princess Eugenie of York\").\nIs_ancestor_of(\"Princess Eugenie of York\", \"Prince Edward, Earl of Wessex\").\nIs_ancestor_of(\"Prince Edward, Earl of Wessex\", \"James, Viscount Severn\").\nIs_ancestor_of(\"James, Viscount Severn\", \"Lady Louise Windsor\").\nIs_ancestor_of(\"Lady Louise Windsor\", \"Anne, Princess Royal\").\nIs_ancestor_of(\"Anne, Princess Royal\", \"Peter Phillips\").\nIs_ancestor_of(\"Peter Phillips\", \"Savannah Phillips\").\nIs_ancestor_of(\"Savannah Phillips\", \"Isla Phillips\").\nIs_ancestor_of(\"Isla Phillips\", \"Zara Tindall\").\nIs_ancestor_of(\"Zara Tindall\", \"Mia T"]}
{"id": 1803, "answer": true, "completion": ".decl Is_citizen_of(Person:symbol, City:symbol)\nIs_citizen_of(\"Boris Johnson\", \"London\").\nIs_citizen_of(\"Boris Johnson\", \"New York\").\nIs_citizen_of(\"Boris Johnson\", \"San Antonio\").\n.decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Boris Johnson\", \"Boris Johnson\").\n.decl Answer()\nAnswer() :- Is_citizen_of(person, \"San Antonio\"), Votes_for(person, \"Boris Johnson\").\n.output Answer\n\n", "completions": [".decl Is_citizen_of(Person:symbol, City:symbol)\nIs_citizen_of(\"Boris Johnson\", \"London\").\nIs_citizen_of(\"Boris Johnson\", \"New York\").\nIs_citizen_of(\"Boris Johnson\", \"San Antonio\").\n.decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Boris Johnson\", \"Boris Johnson\").\n.decl Answer()\nAnswer() :- Is_citizen_of(person, \"San Antonio\"), Votes_for(person, \"Boris Johnson\").\n.output Answer\n\n"]}
{"id": 1804, "answer": true, "completion": ".decl Has_handedness(Person:symbol, Handedness:symbol)\nHas_handedness(\"person\", \"right\").\nHas_handedness(\"person\", \"left\").\n.decl Uses_language(Person:symbol, Language:symbol)\nUses_language(\"person\", \"American Sign Language\").\n.decl Answer()\nAnswer() :- Has_handedness(\"person\", handedness), Uses_language(\"person\", \"American Sign Language\"), handedness = \"right\".\nAnswer() :- Has_handedness(\"person\", handedness), Uses_language(\"person\", \"American Sign Language\"), handedness = \"left\".\n.output Answer\n\n", "completions": [".decl Has_handedness(Person:symbol, Handedness:symbol)\nHas_handedness(\"person\", \"right\").\nHas_handedness(\"person\", \"left\").\n.decl Uses_language(Person:symbol, Language:symbol)\nUses_language(\"person\", \"American Sign Language\").\n.decl Answer()\nAnswer() :- Has_handedness(\"person\", handedness), Uses_language(\"person\", \"American Sign Language\"), handedness = \"right\".\nAnswer() :- Has_handedness(\"person\", handedness), Uses_language(\"person\", \"American Sign Language\"), handedness = \"left\".\n.output Answer\n\n"]}
{"id": 1805, "answer": false, "completion": ".decl Spoke(Country:symbol, Language:symbol)\nSpoke(\"confederate states\", \"English\").\nSpoke(\"confederate states\", \"French\").\nSpoke(\"confederate states\", \"Spanish\").\nSpoke(\"confederate states\", \"German\").\nSpoke(\"confederate states\", \"Dutch\").\nSpoke(\"confederate states\", \"Swedish\").\nSpoke(\"confederate states\", \"Danish\").\nSpoke(\"confederate states\", \"Norwegian\").\nSpoke(\"confederate states\", \"Finnish\").\nSpoke(\"confederate states\", \"Russian\").\nSpoke(\"confederate states\", \"Polish\").\nSpoke(\"confederate states\", \"Czech\").\nSpoke(\"confederate states\", \"Slovak\").\nSpoke(\"confederate states\", \"Hungarian\").\nSpoke(\"confederate states\", \"Romanian\").\nSpoke(\"confederate states\", \"Bulgarian\").\nSpoke(\"confederate states\", \"Serbian\").\nSpoke(\"confederate states\", \"Croatian\").\nSpoke(\"confederate states\", \"Slovene\").\nSpoke(\"confederate states\", \"Macedonian\").\nSpoke(\"confederate states\", \"Albanian\").\nSpoke(\"confederate states\", \"Greek\").\nSpoke(\"confederate states\", \"Turkish\").\nSpoke(\"confederate states\", \"Armenian\").\nSpoke(\"confederate states\", \"Georgian\").\nSpoke(\"confederate states\", \"Azerbaijani\").\nSpoke(\"confederate states\", \"Kurdish\").\nSpoke(\"confederate states\", \"Persian\").\nSpoke(\"confederate states\", \"Pashto\").\nSpoke(\"confederate states\", \"Urdu\").\nSpoke(\"confederate states\", \"Hindi\").\nSpoke(\"confederate states\", \"Bengali\").\nSpoke(\"confederate states\", \"Marathi\").\nSpoke(\"confederate states\", \"Gujarati\").\nSpoke(\"confederate states\", \"Punjabi\").\nSpoke(\"confederate states\", \"Assamese\").\nSpoke(\"confederate states\", \"Oriya\").\nSpoke(\"confederate states\", \"Telugu\").\nSpoke(\"confederate states\", \"Tamil\").\nSpoke(\"confederate states\", \"Malayalam\").\nSpoke(\"confederate states\", \"Kannada\").\nSpoke(\"confederate states\", \"Sinhala\").\nSpoke(\"confederate states\", \"Burmese\").\nSpoke(\"confederate states\", \"Thai\").\nSpoke(\"confederate states\", \"Lao\").\nSpoke(\"confederate states\", \"Khmer\").\nSpoke(\"confederate states\", \"Vietnamese\").\nSpoke(\"confederate states\", \"Tagalog\").\nSpoke(\"confederate states\", \"Malay\").\nSpoke(\"confederate states\", \"Indonesian\").\nSpoke(\"confederate states\", \"Javanese\").\nSpoke(\"confederate states\", \"Sundanese\").\nSpoke(\"confederate states\", \"Balinese\").\nSpoke(\"confederate states\", \"Minangkabau\").\nSpoke(\"confederate states\", \"Malagasy\").\nSpoke(\"confederate states\", \"Swahili\").\nSpoke(\"confederate states\", \"Hausa\").\nSpoke(\"confederate states\", \"Yoruba\").", "completions": [".decl Spoke(Country:symbol, Language:symbol)\nSpoke(\"confederate states\", \"English\").\nSpoke(\"confederate states\", \"French\").\nSpoke(\"confederate states\", \"Spanish\").\nSpoke(\"confederate states\", \"German\").\nSpoke(\"confederate states\", \"Dutch\").\nSpoke(\"confederate states\", \"Swedish\").\nSpoke(\"confederate states\", \"Danish\").\nSpoke(\"confederate states\", \"Norwegian\").\nSpoke(\"confederate states\", \"Finnish\").\nSpoke(\"confederate states\", \"Russian\").\nSpoke(\"confederate states\", \"Polish\").\nSpoke(\"confederate states\", \"Czech\").\nSpoke(\"confederate states\", \"Slovak\").\nSpoke(\"confederate states\", \"Hungarian\").\nSpoke(\"confederate states\", \"Romanian\").\nSpoke(\"confederate states\", \"Bulgarian\").\nSpoke(\"confederate states\", \"Serbian\").\nSpoke(\"confederate states\", \"Croatian\").\nSpoke(\"confederate states\", \"Slovene\").\nSpoke(\"confederate states\", \"Macedonian\").\nSpoke(\"confederate states\", \"Albanian\").\nSpoke(\"confederate states\", \"Greek\").\nSpoke(\"confederate states\", \"Turkish\").\nSpoke(\"confederate states\", \"Armenian\").\nSpoke(\"confederate states\", \"Georgian\").\nSpoke(\"confederate states\", \"Azerbaijani\").\nSpoke(\"confederate states\", \"Kurdish\").\nSpoke(\"confederate states\", \"Persian\").\nSpoke(\"confederate states\", \"Pashto\").\nSpoke(\"confederate states\", \"Urdu\").\nSpoke(\"confederate states\", \"Hindi\").\nSpoke(\"confederate states\", \"Bengali\").\nSpoke(\"confederate states\", \"Marathi\").\nSpoke(\"confederate states\", \"Gujarati\").\nSpoke(\"confederate states\", \"Punjabi\").\nSpoke(\"confederate states\", \"Assamese\").\nSpoke(\"confederate states\", \"Oriya\").\nSpoke(\"confederate states\", \"Telugu\").\nSpoke(\"confederate states\", \"Tamil\").\nSpoke(\"confederate states\", \"Malayalam\").\nSpoke(\"confederate states\", \"Kannada\").\nSpoke(\"confederate states\", \"Sinhala\").\nSpoke(\"confederate states\", \"Burmese\").\nSpoke(\"confederate states\", \"Thai\").\nSpoke(\"confederate states\", \"Lao\").\nSpoke(\"confederate states\", \"Khmer\").\nSpoke(\"confederate states\", \"Vietnamese\").\nSpoke(\"confederate states\", \"Tagalog\").\nSpoke(\"confederate states\", \"Malay\").\nSpoke(\"confederate states\", \"Indonesian\").\nSpoke(\"confederate states\", \"Javanese\").\nSpoke(\"confederate states\", \"Sundanese\").\nSpoke(\"confederate states\", \"Balinese\").\nSpoke(\"confederate states\", \"Minangkabau\").\nSpoke(\"confederate states\", \"Malagasy\").\nSpoke(\"confederate states\", \"Swahili\").\nSpoke(\"confederate states\", \"Hausa\").\nSpoke(\"confederate states\", \"Yoruba\")."]}
{"id": 1806, "answer": true, "completion": ".decl Has_name(Company:symbol, Name:symbol)\nHas_name(\"Fiat Chrysler\", \"Fiat Chrysler Automobiles\").\n.decl Answer()\nAnswer() :- Has_name(\"Fiat Chrysler\", \"Fiat Chrysler Automobiles\").\n.output Answer\n\n", "completions": [".decl Has_name(Company:symbol, Name:symbol)\nHas_name(\"Fiat Chrysler\", \"Fiat Chrysler Automobiles\").\n.decl Answer()\nAnswer() :- Has_name(\"Fiat Chrysler\", \"Fiat Chrysler Automobiles\").\n.output Answer\n\n"]}
{"id": 1807, "answer": true, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"capsaicin\", \"spicy\").\nHas_property(\"cooking\", \"spicy\").\n.decl Answer()\nAnswer() :- Has_property(\"capsaicin\", property), Has_property(\"cooking\", property).\n.output Answer\n\n", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"capsaicin\", \"spicy\").\nHas_property(\"cooking\", \"spicy\").\n.decl Answer()\nAnswer() :- Has_property(\"capsaicin\", property), Has_property(\"cooking\", property).\n.output Answer\n\n"]}
{"id": 1808, "answer": true, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"Capricorn astrology symbol\", \"goat\").\nHas_part(\"Capricorn astrology symbol\", \"fish\").\nHas_part(\"chimera\", \"goat\").\nHas_part(\"chimera\", \"lion\").\nHas_part(\"chimera\", \"snake\").\n.decl Answer()\nAnswer() :- Has_part(\"Capricorn astrology symbol\", part1), Has_part(\"chimera\", part2), part1 = part2.\nAnswer() :- Has_part(\"Capricorn astrology symbol\", part1), Has_part(\"chimera\", part2), part1 = part2.\nAnswer() :- Has_part(\"Capricorn astrology symbol\", part1), Has_part(\"chimera\", part2), part1 = part2.\n.output Answer\n\n", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"Capricorn astrology symbol\", \"goat\").\nHas_part(\"Capricorn astrology symbol\", \"fish\").\nHas_part(\"chimera\", \"goat\").\nHas_part(\"chimera\", \"lion\").\nHas_part(\"chimera\", \"snake\").\n.decl Answer()\nAnswer() :- Has_part(\"Capricorn astrology symbol\", part1), Has_part(\"chimera\", part2), part1 = part2.\nAnswer() :- Has_part(\"Capricorn astrology symbol\", part1), Has_part(\"chimera\", part2), part1 = part2.\nAnswer() :- Has_part(\"Capricorn astrology symbol\", part1), Has_part(\"chimera\", part2), part1 = part2.\n.output Answer\n\n"]}
{"id": 1809, "answer": true, "completion": ".decl Has_electron_configuration(Element:symbol, Electron_configuration:symbol)\nHas_electron_configuration(\"helium\", \"1s^2\").\nHas_electron_configuration(\"neon\", \"1s^2 2s^2 2p^6\").\nHas_electron_configuration(\"argon\", \"1s^2 2s^2 2p^6 3s^2 3p^6\").\nHas_electron_configuration(\"krypton\", \"1s^2 2s^2 2p^6 3s^2 3p^6 4s^2 3d^10 4p^6\").\nHas_electron_configuration(\"xenon\", \"1s^2 2s^2 2p^6 3s^2 3p^6 4s^2 3d^10 4p^6 5s^2 4d^10 5p^6\").\n.decl Has_n_electrons(Element:symbol, N_electrons:float)\nHas_n_electrons(\"helium\", 2).\nHas_n_electrons(\"neon\", 10).\nHas_n_electrons(\"argon\", 18).\nHas_n_electrons(\"krypton\", 36).\nHas_n_electrons(\"xenon\", 54).\n.decl Answer()\nAnswer() :- Has_electron_configuration(element, \"1s^2 2s^2 2p^6\"), Has_n_electrons(element, n_electrons), n_electrons >= 10.\n.output Answer\n\n\n", "completions": [".decl Has_electron_configuration(Element:symbol, Electron_configuration:symbol)\nHas_electron_configuration(\"helium\", \"1s^2\").\nHas_electron_configuration(\"neon\", \"1s^2 2s^2 2p^6\").\nHas_electron_configuration(\"argon\", \"1s^2 2s^2 2p^6 3s^2 3p^6\").\nHas_electron_configuration(\"krypton\", \"1s^2 2s^2 2p^6 3s^2 3p^6 4s^2 3d^10 4p^6\").\nHas_electron_configuration(\"xenon\", \"1s^2 2s^2 2p^6 3s^2 3p^6 4s^2 3d^10 4p^6 5s^2 4d^10 5p^6\").\n.decl Has_n_electrons(Element:symbol, N_electrons:float)\nHas_n_electrons(\"helium\", 2).\nHas_n_electrons(\"neon\", 10).\nHas_n_electrons(\"argon\", 18).\nHas_n_electrons(\"krypton\", 36).\nHas_n_electrons(\"xenon\", 54).\n.decl Answer()\nAnswer() :- Has_electron_configuration(element, \"1s^2 2s^2 2p^6\"), Has_n_electrons(element, n_electrons), n_electrons >= 10.\n.output Answer\n\n\n"]}
{"id": 1810, "answer": false, "completion": ".decl Has_prison_time(Person:symbol, Prison_time:float)\nHas_prison_time(\"Michael Vick\", 2).\n.decl Has_prison_time(Crime:symbol, Prison_time:float)\nHas_prison_time(\"shooting bald eagle\", 5).\n.decl Answer()\nAnswer() :- Has_prison_time(\"shooting bald eagle\", prison_time1), Has_prison_time(\"Michael Vick\", prison_time2), prison_time1 > prison_time2.\n.output Answer\n\n\n", "completions": [".decl Has_prison_time(Person:symbol, Prison_time:float)\nHas_prison_time(\"Michael Vick\", 2).\n.decl Has_prison_time(Crime:symbol, Prison_time:float)\nHas_prison_time(\"shooting bald eagle\", 5).\n.decl Answer()\nAnswer() :- Has_prison_time(\"shooting bald eagle\", prison_time1), Has_prison_time(\"Michael Vick\", prison_time2), prison_time1 > prison_time2.\n.output Answer\n\n\n"]}
{"id": 1811, "answer": false, "completion": ".decl Touches(Country:symbol, Ocean:symbol)\nTouches(\"United States of America\", \"Atlantic Ocean\").\nTouches(\"United States of America\", \"Pacific Ocean\").\nTouches(\"United States of America\", \"Arctic Ocean\").\nTouches(\"United States of America\", \"Caribbean Sea\").\nTouches(\"United States of America\", \"Gulf of Mexico\").\nTouches(\"United States of America\", \"Bering Sea\").\nTouches(\"United States of America\", \"Hudson Bay\").\nTouches(\"United States of America\", \"Gulf of Saint Lawrence\").\nTouches(\"United States of America\", \"Labrador Sea\").\nTouches(\"United States of America\", \"Greenland Sea\").\nTouches(\"United States of America\", \"Norwegian Sea\").\nTouches(\"United States of America\", \"North Sea\").\nTouches(\"United States of America\", \"Baltic Sea\").\nTouches(\"United States of America\", \"Mediterranean Sea\").\nTouches(\"United States of America\", \"Black Sea\").\nTouches(\"United States of America\", \"Caspian Sea\").\nTouches(\"United States of America\", \"Aral Sea\").\nTouches(\"United States of America\", \"Persian Gulf\").\nTouches(\"United States of America\", \"Red Sea\").\nTouches(\"United States of America\", \"Gulf of Aden\").\nTouches(\"United States of America\", \"Arabian Sea\").\nTouches(\"United States of America\", \"Bay of Bengal\").\nTouches(\"United States of America\", \"Andaman Sea\").\nTouches(\"United States of America\", \"South China Sea\").\nTouches(\"United States of America\", \"Philippine Sea\").\nTouches(\"United States of America\", \"East China Sea\").\nTouches(\"United States of America\", \"Yellow Sea\").\nTouches(\"United States of America\", \"Sea of Japan\").\nTouches(\"United States of America\", \"Sea of Okhotsk\").\nTouches(\"United States of America\", \"Bering Sea\").\nTouches(\"United States of America\", \"Hudson Bay\").\nTouches(\"United States of America\", \"Gulf of Saint Lawrence\").\nTouches(\"United States of America\", \"Labrador Sea\").\nTouches(\"United States of America\", \"Greenland Sea\").\nTouches(\"United States of America\", \"Norwegian Sea\").\nTouches(\"United States of America\", \"North Sea\").\nTouches(\"United States of America\", \"Baltic Sea\").\nTouches(\"United States of America\", \"Mediterranean Sea\").\nTouches(\"United States of America\", \"Black Sea\").\nTouches(\"United States of America\", \"Caspian Sea\").\nTouches(\"United States of America\", \"Aral Sea\").\nTouches(\"United States of America\", \"Persian Gulf\").\nTouches(\"United States of America\", \"Red Sea\").\nTouches(\"United States of America\", \"Gulf of Aden\").\nTouches(\"United States of America\", \"Arabian Sea\").\nTouches(\"United States of America\", \"Bay of Bengal\").\nTouches(\"United States of America\", \"Andaman Sea\").\nTouches(\"United States of America\", \"South China Sea\").\nTouches(\"United States of America\", \"Philippine Sea\").\nTouches(\"United States of America\", \"East China Sea\").\nTouches(\"United States of America\", \"Yellow Sea\").\nTouches(\"United States of America\", \"Sea of Japan\").", "completions": [".decl Touches(Country:symbol, Ocean:symbol)\nTouches(\"United States of America\", \"Atlantic Ocean\").\nTouches(\"United States of America\", \"Pacific Ocean\").\nTouches(\"United States of America\", \"Arctic Ocean\").\nTouches(\"United States of America\", \"Caribbean Sea\").\nTouches(\"United States of America\", \"Gulf of Mexico\").\nTouches(\"United States of America\", \"Bering Sea\").\nTouches(\"United States of America\", \"Hudson Bay\").\nTouches(\"United States of America\", \"Gulf of Saint Lawrence\").\nTouches(\"United States of America\", \"Labrador Sea\").\nTouches(\"United States of America\", \"Greenland Sea\").\nTouches(\"United States of America\", \"Norwegian Sea\").\nTouches(\"United States of America\", \"North Sea\").\nTouches(\"United States of America\", \"Baltic Sea\").\nTouches(\"United States of America\", \"Mediterranean Sea\").\nTouches(\"United States of America\", \"Black Sea\").\nTouches(\"United States of America\", \"Caspian Sea\").\nTouches(\"United States of America\", \"Aral Sea\").\nTouches(\"United States of America\", \"Persian Gulf\").\nTouches(\"United States of America\", \"Red Sea\").\nTouches(\"United States of America\", \"Gulf of Aden\").\nTouches(\"United States of America\", \"Arabian Sea\").\nTouches(\"United States of America\", \"Bay of Bengal\").\nTouches(\"United States of America\", \"Andaman Sea\").\nTouches(\"United States of America\", \"South China Sea\").\nTouches(\"United States of America\", \"Philippine Sea\").\nTouches(\"United States of America\", \"East China Sea\").\nTouches(\"United States of America\", \"Yellow Sea\").\nTouches(\"United States of America\", \"Sea of Japan\").\nTouches(\"United States of America\", \"Sea of Okhotsk\").\nTouches(\"United States of America\", \"Bering Sea\").\nTouches(\"United States of America\", \"Hudson Bay\").\nTouches(\"United States of America\", \"Gulf of Saint Lawrence\").\nTouches(\"United States of America\", \"Labrador Sea\").\nTouches(\"United States of America\", \"Greenland Sea\").\nTouches(\"United States of America\", \"Norwegian Sea\").\nTouches(\"United States of America\", \"North Sea\").\nTouches(\"United States of America\", \"Baltic Sea\").\nTouches(\"United States of America\", \"Mediterranean Sea\").\nTouches(\"United States of America\", \"Black Sea\").\nTouches(\"United States of America\", \"Caspian Sea\").\nTouches(\"United States of America\", \"Aral Sea\").\nTouches(\"United States of America\", \"Persian Gulf\").\nTouches(\"United States of America\", \"Red Sea\").\nTouches(\"United States of America\", \"Gulf of Aden\").\nTouches(\"United States of America\", \"Arabian Sea\").\nTouches(\"United States of America\", \"Bay of Bengal\").\nTouches(\"United States of America\", \"Andaman Sea\").\nTouches(\"United States of America\", \"South China Sea\").\nTouches(\"United States of America\", \"Philippine Sea\").\nTouches(\"United States of America\", \"East China Sea\").\nTouches(\"United States of America\", \"Yellow Sea\").\nTouches(\"United States of America\", \"Sea of Japan\")."]}
{"id": 1812, "answer": true, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Sophist\", \"teacher\").\n.decl Has_skill(Profession:symbol, Skill:symbol)\nHas_skill(\"teacher\", \"speaking\").\nHas_skill(\"lawyer\", \"speaking\").\n.decl Answer()\nAnswer() :- Has_profession(\"Sophist\", profession), Has_skill(profession, \"speaking\").\nAnswer() :- Has_profession(\"Sophist\", profession), Has_skill(\"lawyer\", skill), Has_skill(profession, skill).\n.output Answer\n\n", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Sophist\", \"teacher\").\n.decl Has_skill(Profession:symbol, Skill:symbol)\nHas_skill(\"teacher\", \"speaking\").\nHas_skill(\"lawyer\", \"speaking\").\n.decl Answer()\nAnswer() :- Has_profession(\"Sophist\", profession), Has_skill(profession, \"speaking\").\nAnswer() :- Has_profession(\"Sophist\", profession), Has_skill(\"lawyer\", skill), Has_skill(profession, skill).\n.output Answer\n\n"]}
{"id": 1813, "answer": false, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Krispy Kreme glazed doughnut\", 190).\n.decl Has_daily_calories(Person:symbol, Calories:float)\nHas_daily_calories(\"American Heart Association\", 2000).\n.decl Answer()\nAnswer() :- Has_calories(\"Krispy Kreme glazed doughnut\", calories1), Has_daily_calories(\"American Heart Association\", calories2), 4*calories1 > calories2.\n.output Answer\n\n", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Krispy Kreme glazed doughnut\", 190).\n.decl Has_daily_calories(Person:symbol, Calories:float)\nHas_daily_calories(\"American Heart Association\", 2000).\n.decl Answer()\nAnswer() :- Has_calories(\"Krispy Kreme glazed doughnut\", calories1), Has_daily_calories(\"American Heart Association\", calories2), 4*calories1 > calories2.\n.output Answer\n\n"]}
{"id": 1814, "answer": true, "completion": ".decl Is_part_of(Movie:symbol, Series:symbol)\nIs_part_of(\"The Matrix\", \"The Matrix\").\n.decl Answer()\nAnswer() :- Is_part_of(\"The Matrix\", \"The Matrix\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Movie:symbol, Series:symbol)\nIs_part_of(\"The Matrix\", \"The Matrix\").\n.decl Answer()\nAnswer() :- Is_part_of(\"The Matrix\", \"The Matrix\").\n.output Answer\n\n"]}
{"id": 1815, "answer": true, "completion": ".decl Is_banned(Person:symbol, Place:symbol)\nIs_banned(\"people\", \"Forbidden City\").\n.decl Answer()\nAnswer() :- Is_banned(\"people\", \"Forbidden City\").\n.output Answer\n\n", "completions": [".decl Is_banned(Person:symbol, Place:symbol)\nIs_banned(\"people\", \"Forbidden City\").\n.decl Answer()\nAnswer() :- Is_banned(\"people\", \"Forbidden City\").\n.output Answer\n\n"]}
{"id": 1816, "answer": false, "completion": ".decl Has_emergency_number(Country:symbol, Emergency_number:float)\nHas_emergency_number(\"Bangladesh\", 999).\n.decl Is_Fibonacci_number(Number:float)\nIs_Fibonacci_number(0).\nIs_Fibonacci_number(1).\nIs_Fibonacci_number(2).\nIs_Fibonacci_number(3).\nIs_Fibonacci_number(5).\nIs_Fibonacci_number(8).\nIs_Fibonacci_number(13).\nIs_Fibonacci_number(21).\nIs_Fibonacci_number(34).\nIs_Fibonacci_number(55).\nIs_Fibonacci_number(89).\nIs_Fibonacci_number(144).\nIs_Fibonacci_number(233).\nIs_Fibonacci_number(377).\nIs_Fibonacci_number(610).\nIs_Fibonacci_number(987).\nIs_Fibonacci_number(1597).\nIs_Fibonacci_number(2584).\nIs_Fibonacci_number(4181).\nIs_Fibonacci_number(6765).\nIs_Fibonacci_number(10946).\nIs_Fibonacci_number(17711).\nIs_Fibonacci_number(28657).\nIs_Fibonacci_number(46368).\nIs_Fibonacci_number(75025).\nIs_Fibonacci_number(121393).\nIs_Fibonacci_number(196418).\nIs_Fibonacci_number(317811).\nIs_Fibonacci_number(514229).\nIs_Fibonacci_number(832040).\nIs_Fibonacci_number(1346269).\nIs_Fibonacci_number(2178309).\nIs_Fibonacci_number(3524578).\nIs_Fibonacci_number(5702887).\nIs_Fibonacci_number(9227465).\nIs_Fibonacci_number(14930352).\nIs_Fibonacci_number(24157817).\nIs_Fibonacci_number(39088169).\nIs_Fibonacci_number(63245986).\nIs_Fibonacci_number(102334155).\nIs_Fibonacci_number(165580141).\nIs_Fibonacci_number(267914296).\nIs_Fibonacci_number(433494437).\nIs_Fibonacci_number(701408733).\nIs_Fibonacci_number(1134903170).\nIs_Fibonacci_number(1836311903).\nIs_Fibonacci_number(2971215073).\nIs_Fibonacci_number(4807526976).\nIs_Fibonacci_number(7778742049).\nIs_Fibonacci_number(12586269025).\nIs_Fibonacci_number(20365011074).\nIs_Fibonacci_number(32951280099).\nIs_Fibonacci_number(53316291173).\nIs_Fibonacci_number(86267571272).\nIs_Fibonacci_number(139", "completions": [".decl Has_emergency_number(Country:symbol, Emergency_number:float)\nHas_emergency_number(\"Bangladesh\", 999).\n.decl Is_Fibonacci_number(Number:float)\nIs_Fibonacci_number(0).\nIs_Fibonacci_number(1).\nIs_Fibonacci_number(2).\nIs_Fibonacci_number(3).\nIs_Fibonacci_number(5).\nIs_Fibonacci_number(8).\nIs_Fibonacci_number(13).\nIs_Fibonacci_number(21).\nIs_Fibonacci_number(34).\nIs_Fibonacci_number(55).\nIs_Fibonacci_number(89).\nIs_Fibonacci_number(144).\nIs_Fibonacci_number(233).\nIs_Fibonacci_number(377).\nIs_Fibonacci_number(610).\nIs_Fibonacci_number(987).\nIs_Fibonacci_number(1597).\nIs_Fibonacci_number(2584).\nIs_Fibonacci_number(4181).\nIs_Fibonacci_number(6765).\nIs_Fibonacci_number(10946).\nIs_Fibonacci_number(17711).\nIs_Fibonacci_number(28657).\nIs_Fibonacci_number(46368).\nIs_Fibonacci_number(75025).\nIs_Fibonacci_number(121393).\nIs_Fibonacci_number(196418).\nIs_Fibonacci_number(317811).\nIs_Fibonacci_number(514229).\nIs_Fibonacci_number(832040).\nIs_Fibonacci_number(1346269).\nIs_Fibonacci_number(2178309).\nIs_Fibonacci_number(3524578).\nIs_Fibonacci_number(5702887).\nIs_Fibonacci_number(9227465).\nIs_Fibonacci_number(14930352).\nIs_Fibonacci_number(24157817).\nIs_Fibonacci_number(39088169).\nIs_Fibonacci_number(63245986).\nIs_Fibonacci_number(102334155).\nIs_Fibonacci_number(165580141).\nIs_Fibonacci_number(267914296).\nIs_Fibonacci_number(433494437).\nIs_Fibonacci_number(701408733).\nIs_Fibonacci_number(1134903170).\nIs_Fibonacci_number(1836311903).\nIs_Fibonacci_number(2971215073).\nIs_Fibonacci_number(4807526976).\nIs_Fibonacci_number(7778742049).\nIs_Fibonacci_number(12586269025).\nIs_Fibonacci_number(20365011074).\nIs_Fibonacci_number(32951280099).\nIs_Fibonacci_number(53316291173).\nIs_Fibonacci_number(86267571272).\nIs_Fibonacci_number(139"]}
{"id": 1817, "answer": true, "completion": ".decl Requires(Person_A:symbol, Person_B:symbol)\nRequires(\"solo pianist\", \"conductor\").\n.decl Answer()\nAnswer() :- Requires(\"solo pianist\", \"conductor\").\n.output Answer\n\n", "completions": [".decl Requires(Person_A:symbol, Person_B:symbol)\nRequires(\"solo pianist\", \"conductor\").\n.decl Answer()\nAnswer() :- Requires(\"solo pianist\", \"conductor\").\n.output Answer\n\n"]}
{"id": 1818, "answer": false, "completion": ".decl Has_parents(Person:symbol, Parent1:symbol, Parent2:symbol)\nHas_parents(\"Jackson Pollock\", \"LeRoy Pollock\", \"Stella McClure\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"The Pledge of Allegiance\", \"1892\").\n.decl Answer()\nAnswer() :- Has_parents(\"Jackson Pollock\", parent1, parent2), Happens_in_time(\"The Pledge of Allegiance\", time), Happens_in_time(\"The Pledge of Allegiance\", time2), time2 < time.\n.output Answer\n\n", "completions": [".decl Has_parents(Person:symbol, Parent1:symbol, Parent2:symbol)\nHas_parents(\"Jackson Pollock\", \"LeRoy Pollock\", \"Stella McClure\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"The Pledge of Allegiance\", \"1892\").\n.decl Answer()\nAnswer() :- Has_parents(\"Jackson Pollock\", parent1, parent2), Happens_in_time(\"The Pledge of Allegiance\", time), Happens_in_time(\"The Pledge of Allegiance\", time2), time2 < time.\n.output Answer\n\n"]}
{"id": 1819, "answer": true, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"winter solstice\", \"December\").\nHappens_in_month(\"winter solstice\", \"June\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"winter solstice\", \"December\").\nAnswer() :- Happens_in_month(\"winter solstice\", \"June\").\n.output Answer\n\n", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"winter solstice\", \"December\").\nHappens_in_month(\"winter solstice\", \"June\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"winter solstice\", \"December\").\nAnswer() :- Happens_in_month(\"winter solstice\", \"June\").\n.output Answer\n\n"]}
{"id": 1820, "answer": true, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Tuvalu\", 10000).\nHas_population(\"Niue\", 2000).\n.decl Answer()\nAnswer() :- Has_population(\"Tuvalu\", population1), Has_population(\"Niue\", population2), population1 > population2.\n.output Answer\n\n", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Tuvalu\", 10000).\nHas_population(\"Niue\", 2000).\n.decl Answer()\nAnswer() :- Has_population(\"Tuvalu\", population1), Has_population(\"Niue\", population2), population1 > population2.\n.output Answer\n\n"]}
{"id": 1821, "answer": true, "completion": ".decl Is_parody_of(Book:symbol, Book2:symbol)\nIs_parody_of(\"A Tale of Two Cities\", \"Bible\").\n.decl Answer()\nAnswer() :- Is_parody_of(\"A Tale of Two Cities\", \"Bible\").\n.output Answer\n\n", "completions": [".decl Is_parody_of(Book:symbol, Book2:symbol)\nIs_parody_of(\"A Tale of Two Cities\", \"Bible\").\n.decl Answer()\nAnswer() :- Is_parody_of(\"A Tale of Two Cities\", \"Bible\").\n.output Answer\n\n"]}
{"id": 1822, "answer": false, "completion": ".decl Has_n_characters(String:symbol, N_characters:float)\nHas_n_characters(\"binary numbers\", 2).\nHas_n_characters(\"standard alphabet\", 26).\n.decl Answer()\nAnswer() :- Has_n_characters(\"binary numbers\", n_characters1), Has_n_characters(\"standard alphabet\", n_characters2), n_characters1 >= 8, n_characters2 >= 8.\n.output Answer\n\n", "completions": [".decl Has_n_characters(String:symbol, N_characters:float)\nHas_n_characters(\"binary numbers\", 2).\nHas_n_characters(\"standard alphabet\", 26).\n.decl Answer()\nAnswer() :- Has_n_characters(\"binary numbers\", n_characters1), Has_n_characters(\"standard alphabet\", n_characters2), n_characters1 >= 8, n_characters2 >= 8.\n.output Answer\n\n"]}
{"id": 1823, "answer": true, "completion": ".decl Influences(Person:symbol, Style:symbol)\nInfluences(\"Andy Warhol\", \"Pop Art\").\nInfluences(\"Andy Warhol\", \"Minimalism\").\nInfluences(\"Andy Warhol\", \"Art Deco\").\n.decl Answer()\nAnswer() :- Influences(\"Andy Warhol\", \"Art Deco\").\n.output Answer\n\n", "completions": [".decl Influences(Person:symbol, Style:symbol)\nInfluences(\"Andy Warhol\", \"Pop Art\").\nInfluences(\"Andy Warhol\", \"Minimalism\").\nInfluences(\"Andy Warhol\", \"Art Deco\").\n.decl Answer()\nAnswer() :- Influences(\"Andy Warhol\", \"Art Deco\").\n.output Answer\n\n"]}
{"id": 1824, "answer": true, "completion": ".decl Is_pregnant(Person:symbol)\nIs_pregnant(\"Brooke Shields\").\n.decl Is_recommended(Person:symbol, Food:symbol)\nIs_recommended(\"Brooke Shields\", \"ginger\").\n.decl Answer()\nAnswer() :- Is_pregnant(person), Is_recommended(person, \"ginger\").\n.output Answer\n\n", "completions": [".decl Is_pregnant(Person:symbol)\nIs_pregnant(\"Brooke Shields\").\n.decl Is_recommended(Person:symbol, Food:symbol)\nIs_recommended(\"Brooke Shields\", \"ginger\").\n.decl Answer()\nAnswer() :- Is_pregnant(person), Is_recommended(person, \"ginger\").\n.output Answer\n\n"]}
{"id": 1825, "answer": false, "completion": ".decl Has_power(Object:symbol, Power:symbol)\nHas_power(\"spinach\", \"strength\").\n.decl Has_power(Object:symbol, Power:symbol)\nHas_power(\"comic movie\", \"humor\").\n.decl Answer()\nAnswer() :- Has_power(\"spinach\", power1), Has_power(\"comic movie\", power2), power1 = power2.\n.output Answer\n\n", "completions": [".decl Has_power(Object:symbol, Power:symbol)\nHas_power(\"spinach\", \"strength\").\n.decl Has_power(Object:symbol, Power:symbol)\nHas_power(\"comic movie\", \"humor\").\n.decl Answer()\nAnswer() :- Has_power(\"spinach\", power1), Has_power(\"comic movie\", power2), power1 = power2.\n.output Answer\n\n"]}
{"id": 1826, "answer": false, "completion": ".decl Has_temperature(Event:symbol, Temperature:float)\nHas_temperature(\"welding with acetylene\", 3100).\nHas_temperature(\"star\", 5500).\n.decl Answer()\nAnswer() :- Has_temperature(\"welding with acetylene\", temperature1), Has_temperature(\"star\", temperature2), temperature1 >= temperature2.\n.output Answer\n\n", "completions": [".decl Has_temperature(Event:symbol, Temperature:float)\nHas_temperature(\"welding with acetylene\", 3100).\nHas_temperature(\"star\", 5500).\n.decl Answer()\nAnswer() :- Has_temperature(\"welding with acetylene\", temperature1), Has_temperature(\"star\", temperature2), temperature1 >= temperature2.\n.output Answer\n\n"]}
{"id": 1827, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Donatello's bronze David\", 5.17).\nHas_height(\"Sistine Chapel ceiling\", 20).\n.decl Has_height(Person:symbol, Height:float)\nHas_height(\"adult male\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Donatello's bronze David\", height1), Has_height(\"Sistine Chapel ceiling\", height2), Has_height(\"adult male\", height3), height1 + height3 >= height2.\n.output Answer\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Donatello's bronze David\", 5.17).\nHas_height(\"Sistine Chapel ceiling\", 20).\n.decl Has_height(Person:symbol, Height:float)\nHas_height(\"adult male\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Donatello's bronze David\", height1), Has_height(\"Sistine Chapel ceiling\", height2), Has_height(\"adult male\", height3), height1 + height3 >= height2.\n.output Answer\n\n"]}
{"id": 1828, "answer": true, "completion": ".decl Is_dangerous(Substance:symbol)\nIs_dangerous(\"chlorine\").\nIs_dangerous(\"sodium\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"chlorine\"), Is_dangerous(\"sodium\").\n.output Answer\n\n", "completions": [".decl Is_dangerous(Substance:symbol)\nIs_dangerous(\"chlorine\").\nIs_dangerous(\"sodium\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"chlorine\"), Is_dangerous(\"sodium\").\n.output Answer\n\n"]}
{"id": 1829, "answer": true, "completion": ".decl Has_n_floors(Building:symbol, N_floors:float)\nHas_n_floors(\"Moulin Rouge\", 2).\n.decl Has_n_beds(Building:symbol, N_beds:float)\nHas_n_beds(\"Moulin Rouge\", 100).\n.decl Answer()\nAnswer() :- Has_n_floors(\"Moulin Rouge\", n_floors), Has_n_beds(\"Moulin Rouge\", n_beds), n_floors >= 2, n_beds >= 100.\n.output Answer\n\n", "completions": [".decl Has_n_floors(Building:symbol, N_floors:float)\nHas_n_floors(\"Moulin Rouge\", 2).\n.decl Has_n_beds(Building:symbol, N_beds:float)\nHas_n_beds(\"Moulin Rouge\", 100).\n.decl Answer()\nAnswer() :- Has_n_floors(\"Moulin Rouge\", n_floors), Has_n_beds(\"Moulin Rouge\", n_beds), n_floors >= 2, n_beds >= 100.\n.output Answer\n\n"]}
{"id": 1830, "answer": false, "completion": ".decl Has_n_viewers(Event:symbol, N_viewers:float)\nHas_n_viewers(\"Downton Abbey finale\", 12.9).\n.decl Has_n_citizens(Country:symbol, N_citizens:float)\nHas_n_citizens(\"Kazakhstan\", 17.7).\n.decl Answer()\nAnswer() :- Has_n_viewers(\"Downton Abbey finale\", n_viewers), Has_n_citizens(\"Kazakhstan\", n_citizens), n_viewers > n_citizens.\n.output Answer\n\n", "completions": [".decl Has_n_viewers(Event:symbol, N_viewers:float)\nHas_n_viewers(\"Downton Abbey finale\", 12.9).\n.decl Has_n_citizens(Country:symbol, N_citizens:float)\nHas_n_citizens(\"Kazakhstan\", 17.7).\n.decl Answer()\nAnswer() :- Has_n_viewers(\"Downton Abbey finale\", n_viewers), Has_n_citizens(\"Kazakhstan\", n_citizens), n_viewers > n_citizens.\n.output Answer\n\n"]}
{"id": 1831, "answer": true, "completion": ".decl Has_potential_to_be(Event:symbol, Event_type:symbol)\nHas_potential_to_be(\"Do It Yourself projects\", \"lethal\").\n.decl Answer()\nAnswer() :- Has_potential_to_be(\"Do It Yourself projects\", \"lethal\").\n.output Answer\n\n", "completions": [".decl Has_potential_to_be(Event:symbol, Event_type:symbol)\nHas_potential_to_be(\"Do It Yourself projects\", \"lethal\").\n.decl Answer()\nAnswer() :- Has_potential_to_be(\"Do It Yourself projects\", \"lethal\").\n.output Answer\n\n"]}
{"id": 1832, "answer": true, "completion": ".decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"Eastern chipmunk\", 3).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Lives_n_years(\"Eastern chipmunk\", n_years1), Happens_every_n_years(\"leap year\", n_years2), n_years1 < n_years2 * 2.\n.output Answer\n\n", "completions": [".decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"Eastern chipmunk\", 3).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Lives_n_years(\"Eastern chipmunk\", n_years1), Happens_every_n_years(\"leap year\", n_years2), n_years1 < n_years2 * 2.\n.output Answer\n\n"]}
{"id": 1833, "answer": true, "completion": ".decl Requires(Game:symbol, Resource:symbol)\nRequires(\"Super Mario\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"Super Mario\", \"electricity\").\n.output Answer\n\n", "completions": [".decl Requires(Game:symbol, Resource:symbol)\nRequires(\"Super Mario\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"Super Mario\", \"electricity\").\n.output Answer\n\n"]}
{"id": 1834, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Chinese mountain cat\", \"China\").\n.decl Answer()\nAnswer() :- Lives_in(\"Chinese mountain cat\", \"orbit\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Chinese mountain cat\", \"China\").\n.decl Answer()\nAnswer() :- Lives_in(\"Chinese mountain cat\", \"orbit\").\n.output Answer\n\n"]}
{"id": 1835, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"rock\", 2.7).\nHas_density(\"atmosphere of Earth\", 0.0012).\n.decl Answer()\nAnswer() :- Has_density(\"rock\", density1), Has_density(\"atmosphere of Earth\", density2), density1 < density2.\n.output Answer\n\n\n", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"rock\", 2.7).\nHas_density(\"atmosphere of Earth\", 0.0012).\n.decl Answer()\nAnswer() :- Has_density(\"rock\", density1), Has_density(\"atmosphere of Earth\", density2), density1 < density2.\n.output Answer\n\n\n"]}
{"id": 1836, "answer": false, "completion": ".decl Has_n_employees(Company:symbol, N_employees:float)\nHas_n_employees(\"Burger King\", 500000).\n.decl Has_n_customers(Company:symbol, N_customers:float)\nHas_n_customers(\"Burger King\", 500000).\n.decl Has_n_sales(Company:symbol, N_sales:float)\nHas_n_sales(\"Burger King\", 500000).\n.decl Answer()\nAnswer() :- Has_n_employees(\"Burger King\", n_employees1), Has_n_customers(\"Burger King\", n_customers1), Has_n_sales(\"Burger King\", n_sales1), n_employees1 > n_customers1, n_customers1 > n_sales1.\n.output Answer\n\n", "completions": [".decl Has_n_employees(Company:symbol, N_employees:float)\nHas_n_employees(\"Burger King\", 500000).\n.decl Has_n_customers(Company:symbol, N_customers:float)\nHas_n_customers(\"Burger King\", 500000).\n.decl Has_n_sales(Company:symbol, N_sales:float)\nHas_n_sales(\"Burger King\", 500000).\n.decl Answer()\nAnswer() :- Has_n_employees(\"Burger King\", n_employees1), Has_n_customers(\"Burger King\", n_customers1), Has_n_sales(\"Burger King\", n_sales1), n_employees1 > n_customers1, n_customers1 > n_sales1.\n.output Answer\n\n"]}
{"id": 1837, "answer": false, "completion": ".decl Uses(Movie:symbol, Object:symbol)\nUses(\"The Godfather\", \"typewriter\").\nUses(\"The Godfather\", \"telephone\").\nUses(\"The Godfather\", \"car\").\nUses(\"The Godfather\", \"gun\").\nUses(\"The Godfather\", \"knife\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"suit\").\nUses(\"The Godfather\", \"hat\").\nUses(\"The Godfather\", \"piano\").\nUses(\"The Godfather\", \"violin\").\nUses(\"The Godfather\", \"wine\").\nUses(\"The Godfather\", \"cake\").\nUses(\"The Godfather\", \"cat\").\nUses(\"The Godfather\", \"dog\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse", "completions": [".decl Uses(Movie:symbol, Object:symbol)\nUses(\"The Godfather\", \"typewriter\").\nUses(\"The Godfather\", \"telephone\").\nUses(\"The Godfather\", \"car\").\nUses(\"The Godfather\", \"gun\").\nUses(\"The Godfather\", \"knife\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"suit\").\nUses(\"The Godfather\", \"hat\").\nUses(\"The Godfather\", \"piano\").\nUses(\"The Godfather\", \"violin\").\nUses(\"The Godfather\", \"wine\").\nUses(\"The Godfather\", \"cake\").\nUses(\"The Godfather\", \"cat\").\nUses(\"The Godfather\", \"dog\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse\").\nUses(\"The Godfather\", \"horse"]}
{"id": 1838, "answer": true, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"New Years Day\", 1999).\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"New Years Day\", \"January\").\nHappens_in_time(\"New Years Day\", \"February\").\nHappens_in_time(\"New Years Day\", \"March\").\nHappens_in_time(\"New Years Day\", \"April\").\nHappens_in_time(\"New Years Day\", \"May\").\nHappens_in_time(\"New Years Day\", \"June\").\nHappens_in_time(\"New Years Day\", \"July\").\nHappens_in_time(\"New Years Day\", \"August\").\nHappens_in_time(\"New Years Day\", \"September\").\nHappens_in_time(\"New Years Day\", \"October\").\nHappens_in_time(\"New Years Day\", \"November\").\nHappens_in_time(\"New Years Day\", \"December\").\nHappens_in_time(\"Y2K\", \"January\").\nHappens_in_time(\"Y2K\", \"February\").\nHappens_in_time(\"Y2K\", \"March\").\nHappens_in_time(\"Y2K\", \"April\").\nHappens_in_time(\"Y2K\", \"May\").\nHappens_in_time(\"Y2K\", \"June\").\nHappens_in_time(\"Y2K\", \"July\").\nHappens_in_time(\"Y2K\", \"August\").\nHappens_in_time(\"Y2K\", \"September\").\nHappens_in_time(\"Y2K\", \"October\").\nHappens_in_time(\"Y2K\", \"November\").\nHappens_in_time(\"Y2K\", \"December\").\n.decl Answer()\nAnswer() :- Happens_in_year(\"New Years Day\", year), Happens_in_time(\"New Years Day\", month), Happens_in_time(\"Y2K\", month), year = 1999.\n.output Answer\n\n", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"New Years Day\", 1999).\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"New Years Day\", \"January\").\nHappens_in_time(\"New Years Day\", \"February\").\nHappens_in_time(\"New Years Day\", \"March\").\nHappens_in_time(\"New Years Day\", \"April\").\nHappens_in_time(\"New Years Day\", \"May\").\nHappens_in_time(\"New Years Day\", \"June\").\nHappens_in_time(\"New Years Day\", \"July\").\nHappens_in_time(\"New Years Day\", \"August\").\nHappens_in_time(\"New Years Day\", \"September\").\nHappens_in_time(\"New Years Day\", \"October\").\nHappens_in_time(\"New Years Day\", \"November\").\nHappens_in_time(\"New Years Day\", \"December\").\nHappens_in_time(\"Y2K\", \"January\").\nHappens_in_time(\"Y2K\", \"February\").\nHappens_in_time(\"Y2K\", \"March\").\nHappens_in_time(\"Y2K\", \"April\").\nHappens_in_time(\"Y2K\", \"May\").\nHappens_in_time(\"Y2K\", \"June\").\nHappens_in_time(\"Y2K\", \"July\").\nHappens_in_time(\"Y2K\", \"August\").\nHappens_in_time(\"Y2K\", \"September\").\nHappens_in_time(\"Y2K\", \"October\").\nHappens_in_time(\"Y2K\", \"November\").\nHappens_in_time(\"Y2K\", \"December\").\n.decl Answer()\nAnswer() :- Happens_in_year(\"New Years Day\", year), Happens_in_time(\"New Years Day\", month), Happens_in_time(\"Y2K\", month), year = 1999.\n.output Answer\n\n"]}
{"id": 1839, "answer": true, "completion": ".decl Supports(Person:symbol, Decision:symbol)\nSupports(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.decl Answer()\nAnswer() :- Supports(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.output Answer\n\n", "completions": [".decl Supports(Person:symbol, Decision:symbol)\nSupports(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.decl Answer()\nAnswer() :- Supports(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.output Answer\n\n"]}
{"id": 1840, "answer": true, "completion": ".decl Belongs_to_family(Person:symbol, Family:symbol)\nBelongs_to_family(\"Rahul Dravid\", \"Gryllidae\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"Rahul Dravid\", \"Gryllidae\").\n.output Answer\n\n", "completions": [".decl Belongs_to_family(Person:symbol, Family:symbol)\nBelongs_to_family(\"Rahul Dravid\", \"Gryllidae\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"Rahul Dravid\", \"Gryllidae\").\n.output Answer\n\n"]}
{"id": 1841, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"pet macaque\", 0.5).\nHas_size(\"desk\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"pet macaque\", size1), Has_size(\"desk\", size2), size1 < size2.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"pet macaque\", 0.5).\nHas_size(\"desk\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"pet macaque\", size1), Has_size(\"desk\", size2), size1 < size2.\n.output Answer\n\n"]}
{"id": 1842, "answer": true, "completion": ".decl Has_trigger(Video:symbol, Trigger:symbol)\nHas_trigger(\"Pink music videos\", \"eating disorder patients\").\n.decl Answer()\nAnswer() :- Has_trigger(\"Pink music videos\", \"eating disorder patients\").\n.output Answer\n\n", "completions": [".decl Has_trigger(Video:symbol, Trigger:symbol)\nHas_trigger(\"Pink music videos\", \"eating disorder patients\").\n.decl Answer()\nAnswer() :- Has_trigger(\"Pink music videos\", \"eating disorder patients\").\n.output Answer\n\n"]}
{"id": 1843, "answer": false, "completion": ".decl Happens_in_environment(Event:symbol, Environment:symbol)\nHappens_in_environment(\"brewing\", \"kitchen\").\nHappens_in_environment(\"prison\", \"jail\").\n.decl Answer()\nAnswer() :- Happens_in_environment(\"brewing\", environment), Happens_in_environment(\"prison\", environment).\n.output Answer\n\n", "completions": [".decl Happens_in_environment(Event:symbol, Environment:symbol)\nHappens_in_environment(\"brewing\", \"kitchen\").\nHappens_in_environment(\"prison\", \"jail\").\n.decl Answer()\nAnswer() :- Happens_in_environment(\"brewing\", environment), Happens_in_environment(\"prison\", environment).\n.output Answer\n\n"]}
{"id": 1844, "answer": false, "completion": ".decl Grows_in(Plant:symbol, Region:symbol)\nGrows_in(\"coffee\", \"Hawaii\").\nGrows_in(\"coffee\", \"Brazil\").\nGrows_in(\"coffee\", \"Colombia\").\nGrows_in(\"coffee\", \"Indonesia\").\nGrows_in(\"coffee\", \"Vietnam\").\nGrows_in(\"coffee\", \"Ethiopia\").\nGrows_in(\"coffee\", \"Mexico\").\nGrows_in(\"coffee\", \"Guatemala\").\nGrows_in(\"coffee\", \"Costa Rica\").\nGrows_in(\"coffee\", \"Nicaragua\").\nGrows_in(\"coffee\", \"Honduras\").\nGrows_in(\"coffee\", \"El Salvador\").\nGrows_in(\"coffee\", \"Panama\").\nGrows_in(\"coffee\", \"Jamaica\").\nGrows_in(\"coffee\", \"Puerto Rico\").\nGrows_in(\"coffee\", \"Dominican Republic\").\nGrows_in(\"coffee\", \"Cuba\").\nGrows_in(\"coffee\", \"Haiti\").\nGrows_in(\"coffee\", \"India\").\nGrows_in(\"coffee\", \"Sri Lanka\").\nGrows_in(\"coffee\", \"Kenya\").\nGrows_in(\"coffee\", \"Tanzania\").\nGrows_in(\"coffee\", \"Uganda\").\nGrows_in(\"coffee\", \"Rwanda\").\nGrows_in(\"coffee\", \"Burundi\").\nGrows_in(\"coffee\", \"Zambia\").\nGrows_in(\"coffee\", \"Malawi\").\nGrows_in(\"coffee\", \"Zimbabwe\").\nGrows_in(\"coffee\", \"Mozambique\").\nGrows_in(\"coffee\", \"Madagascar\").\nGrows_in(\"coffee\", \"Yemen\").\nGrows_in(\"coffee\", \"Ethiopia\").\nGrows_in(\"coffee\", \"Tanzania\").\nGrows_in(\"coffee\", \"Uganda\").\nGrows_in(\"coffee\", \"Rwanda\").\nGrows_in(\"coffee\", \"Burundi\").\nGrows_in(\"coffee\", \"Zambia\").\nGrows_in(\"coffee\", \"Malawi\").\nGrows_in(\"coffee\", \"Zimbabwe\").\nGrows_in(\"coffee\", \"Mozambique\").\nGrows_in(\"coffee\", \"Madagascar\").\nGrows_in(\"coffee\", \"Yemen\").\nGrows_in(\"coffee\", \"Ethiopia\").\nGrows_in(\"coffee\", \"Tanzania\").\nGrows_in(\"coffee\", \"Uganda\").\nGrows_in(\"coffee\", \"Rwanda\").\nGrows_in(\"coffee\", \"Burundi\").\nGrows_in(\"coffee\", \"Zambia\").\nGrows_in(\"coffee\", \"Malawi\").\nGrows_in(\"coffee\", \"Zimbabwe\").\nGrows_in(\"coffee\", \"Mozambique\").\nGrows_in(\"coffee\", \"Madagascar\").\nGrows_in(\"coffee\", \"Yemen\").\nGrows_in(\"coffee\", \"Ethiopia\").\nGrows_in(\"coffee\", \"Tanzania\").\nGrows_in(\"coffee\", \"Uganda\").\nGrows_in(\"coffee\", \"Rwanda\").\nG", "completions": [".decl Grows_in(Plant:symbol, Region:symbol)\nGrows_in(\"coffee\", \"Hawaii\").\nGrows_in(\"coffee\", \"Brazil\").\nGrows_in(\"coffee\", \"Colombia\").\nGrows_in(\"coffee\", \"Indonesia\").\nGrows_in(\"coffee\", \"Vietnam\").\nGrows_in(\"coffee\", \"Ethiopia\").\nGrows_in(\"coffee\", \"Mexico\").\nGrows_in(\"coffee\", \"Guatemala\").\nGrows_in(\"coffee\", \"Costa Rica\").\nGrows_in(\"coffee\", \"Nicaragua\").\nGrows_in(\"coffee\", \"Honduras\").\nGrows_in(\"coffee\", \"El Salvador\").\nGrows_in(\"coffee\", \"Panama\").\nGrows_in(\"coffee\", \"Jamaica\").\nGrows_in(\"coffee\", \"Puerto Rico\").\nGrows_in(\"coffee\", \"Dominican Republic\").\nGrows_in(\"coffee\", \"Cuba\").\nGrows_in(\"coffee\", \"Haiti\").\nGrows_in(\"coffee\", \"India\").\nGrows_in(\"coffee\", \"Sri Lanka\").\nGrows_in(\"coffee\", \"Kenya\").\nGrows_in(\"coffee\", \"Tanzania\").\nGrows_in(\"coffee\", \"Uganda\").\nGrows_in(\"coffee\", \"Rwanda\").\nGrows_in(\"coffee\", \"Burundi\").\nGrows_in(\"coffee\", \"Zambia\").\nGrows_in(\"coffee\", \"Malawi\").\nGrows_in(\"coffee\", \"Zimbabwe\").\nGrows_in(\"coffee\", \"Mozambique\").\nGrows_in(\"coffee\", \"Madagascar\").\nGrows_in(\"coffee\", \"Yemen\").\nGrows_in(\"coffee\", \"Ethiopia\").\nGrows_in(\"coffee\", \"Tanzania\").\nGrows_in(\"coffee\", \"Uganda\").\nGrows_in(\"coffee\", \"Rwanda\").\nGrows_in(\"coffee\", \"Burundi\").\nGrows_in(\"coffee\", \"Zambia\").\nGrows_in(\"coffee\", \"Malawi\").\nGrows_in(\"coffee\", \"Zimbabwe\").\nGrows_in(\"coffee\", \"Mozambique\").\nGrows_in(\"coffee\", \"Madagascar\").\nGrows_in(\"coffee\", \"Yemen\").\nGrows_in(\"coffee\", \"Ethiopia\").\nGrows_in(\"coffee\", \"Tanzania\").\nGrows_in(\"coffee\", \"Uganda\").\nGrows_in(\"coffee\", \"Rwanda\").\nGrows_in(\"coffee\", \"Burundi\").\nGrows_in(\"coffee\", \"Zambia\").\nGrows_in(\"coffee\", \"Malawi\").\nGrows_in(\"coffee\", \"Zimbabwe\").\nGrows_in(\"coffee\", \"Mozambique\").\nGrows_in(\"coffee\", \"Madagascar\").\nGrows_in(\"coffee\", \"Yemen\").\nGrows_in(\"coffee\", \"Ethiopia\").\nGrows_in(\"coffee\", \"Tanzania\").\nGrows_in(\"coffee\", \"Uganda\").\nGrows_in(\"coffee\", \"Rwanda\").\nG"]}
{"id": 1845, "answer": true, "completion": ".decl Has_ingredients(Food:symbol, Ingredient:symbol)\nHas_ingredients(\"krabby patty\", \"krab\").\nHas_ingredients(\"krabby patty\", \"lettuce\").\nHas_ingredients(\"krabby patty\", \"cheese\").\nHas_ingredients(\"krabby patty\", \"bun\").\nHas_ingredients(\"cheeseburger\", \"beef\").\nHas_ingredients(\"cheeseburger\", \"lettuce\").\nHas_ingredients(\"cheeseburger\", \"cheese\").\nHas_ingredients(\"cheeseburger\", \"bun\").\n.decl Answer()\nAnswer() :- Has_ingredients(\"krabby patty\", ingredient1), Has_ingredients(\"cheeseburger\", ingredient2), ingredient1 = ingredient2.\n.output Answer\n\n", "completions": [".decl Has_ingredients(Food:symbol, Ingredient:symbol)\nHas_ingredients(\"krabby patty\", \"krab\").\nHas_ingredients(\"krabby patty\", \"lettuce\").\nHas_ingredients(\"krabby patty\", \"cheese\").\nHas_ingredients(\"krabby patty\", \"bun\").\nHas_ingredients(\"cheeseburger\", \"beef\").\nHas_ingredients(\"cheeseburger\", \"lettuce\").\nHas_ingredients(\"cheeseburger\", \"cheese\").\nHas_ingredients(\"cheeseburger\", \"bun\").\n.decl Answer()\nAnswer() :- Has_ingredients(\"krabby patty\", ingredient1), Has_ingredients(\"cheeseburger\", ingredient2), ingredient1 = ingredient2.\n.output Answer\n\n"]}
{"id": 1846, "answer": false, "completion": ".decl Has_n_seats(Vehicle:symbol, N_seats:float)\nHas_n_seats(\"Boeing 737\", 150).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Chief Justice of the United States\", 17).\n.decl Answer()\nAnswer() :- Has_n_seats(\"Boeing 737\", n_seats), Has_n_members(\"Chief Justice of the United States\", n_members), n_seats < n_members.\n.output Answer\n\n", "completions": [".decl Has_n_seats(Vehicle:symbol, N_seats:float)\nHas_n_seats(\"Boeing 737\", 150).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Chief Justice of the United States\", 17).\n.decl Answer()\nAnswer() :- Has_n_seats(\"Boeing 737\", n_seats), Has_n_members(\"Chief Justice of the United States\", n_members), n_seats < n_members.\n.output Answer\n\n"]}
{"id": 1847, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"crocodile\", \"Great Salt Lake\").\nLives_in(\"alligator\", \"Great Salt Lake\").\n.decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"crocodile\", 70).\nLives_n_years(\"alligator\", 50).\n.decl Answer()\nAnswer() :- Lives_in(\"crocodile\", \"Great Salt Lake\"), Lives_in(\"alligator\", \"Great Salt Lake\"), Lives_n_years(\"crocodile\", n_years1), Lives_n_years(\"alligator\", n_years2), n_years1 > n_years2.\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"crocodile\", \"Great Salt Lake\").\nLives_in(\"alligator\", \"Great Salt Lake\").\n.decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"crocodile\", 70).\nLives_n_years(\"alligator\", 50).\n.decl Answer()\nAnswer() :- Lives_in(\"crocodile\", \"Great Salt Lake\"), Lives_in(\"alligator\", \"Great Salt Lake\"), Lives_n_years(\"crocodile\", n_years1), Lives_n_years(\"alligator\", n_years2), n_years1 > n_years2.\n.output Answer\n\n"]}
{"id": 1848, "answer": true, "completion": ".decl Started_due_to(Company:symbol, Event:symbol)\nStarted_due_to(\"Saudi Aramco\", \"assassination\").\n.decl Answer()\nAnswer() :- Started_due_to(\"Saudi Aramco\", \"assassination\").\n.output Answer\n\n", "completions": [".decl Started_due_to(Company:symbol, Event:symbol)\nStarted_due_to(\"Saudi Aramco\", \"assassination\").\n.decl Answer()\nAnswer() :- Started_due_to(\"Saudi Aramco\", \"assassination\").\n.output Answer\n\n"]}
{"id": 1849, "answer": true, "completion": ".decl Features(Event:symbol, Object:symbol)\nFeatures(\"Diwali celebration\", \"crustacean\").\n.decl Answer()\nAnswer() :- Features(\"Diwali celebration\", \"crustacean\").\n.output Answer\n\n", "completions": [".decl Features(Event:symbol, Object:symbol)\nFeatures(\"Diwali celebration\", \"crustacean\").\n.decl Answer()\nAnswer() :- Features(\"Diwali celebration\", \"crustacean\").\n.output Answer\n\n"]}
{"id": 1850, "answer": true, "completion": ".decl Named_after(Person:symbol, Animal:symbol)\nNamed_after(\"goddess Friday\", \"cat\").\n.decl Despises(Person:symbol, Animal:symbol)\nDespises(\"goddess Friday\", \"cat\").\n.decl Answer()\nAnswer() :- Named_after(person, animal), Despises(person, animal).\n.output Answer\n\n", "completions": [".decl Named_after(Person:symbol, Animal:symbol)\nNamed_after(\"goddess Friday\", \"cat\").\n.decl Despises(Person:symbol, Animal:symbol)\nDespises(\"goddess Friday\", \"cat\").\n.decl Answer()\nAnswer() :- Named_after(person, animal), Despises(person, animal).\n.output Answer\n\n"]}
{"id": 1851, "answer": false, "completion": ".decl Is_eaten_with(Food:symbol, Utensil:symbol)\nIs_eaten_with(\"soup\", \"spoon\").\n.decl Answer()\nAnswer() :- Is_eaten_with(\"soup\", \"hands\").\n.output Answer\n\n", "completions": [".decl Is_eaten_with(Food:symbol, Utensil:symbol)\nIs_eaten_with(\"soup\", \"spoon\").\n.decl Answer()\nAnswer() :- Is_eaten_with(\"soup\", \"hands\").\n.output Answer\n\n"]}
{"id": 1852, "answer": false, "completion": ".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"person\", \"Thalassophobia\").\n.decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"person\", \"oceanography\").\n.decl Answer()\nAnswer() :- Has_phobia(person, \"Thalassophobia\"), !Enjoys(person, \"oceanography\").\n.output Answer\n\n", "completions": [".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"person\", \"Thalassophobia\").\n.decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"person\", \"oceanography\").\n.decl Answer()\nAnswer() :- Has_phobia(person, \"Thalassophobia\"), !Enjoys(person, \"oceanography\").\n.output Answer\n\n"]}
{"id": 1853, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Eric Clapton's birth\", \"1945\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Eric Clapton's mother's birth\", \"1923\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"legal age to purchase cigarettes in the USA\", \"18\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Eric Clapton's birth\", time1), Happens_in_time(\"Eric Clapton's mother's birth\", time2), Happens_in_time(\"legal age to purchase cigarettes in the USA\", time3), time1 - time2 < time3.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Eric Clapton's birth\", \"1945\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Eric Clapton's mother's birth\", \"1923\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"legal age to purchase cigarettes in the USA\", \"18\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Eric Clapton's birth\", time1), Happens_in_time(\"Eric Clapton's mother's birth\", time2), Happens_in_time(\"legal age to purchase cigarettes in the USA\", time3), time1 - time2 < time3.\n.output Answer\n\n"]}
{"id": 1854, "answer": false, "completion": ".decl Wins(Person:symbol, Event:symbol)\nWins(\"Secretariat\", \"Kentucky Derby\").\n.decl Is_a_type_of(Event:symbol, Type:symbol)\nIs_a_type_of(\"Kentucky Derby\", \"horse race\").\nIs_a_type_of(\"Formula One championship\", \"auto race\").\n.decl Answer()\nAnswer() :- Wins(person, event), Is_a_type_of(event, type), Is_a_type_of(\"Formula One championship\", type).\n.output Answer\n\n", "completions": [".decl Wins(Person:symbol, Event:symbol)\nWins(\"Secretariat\", \"Kentucky Derby\").\n.decl Is_a_type_of(Event:symbol, Type:symbol)\nIs_a_type_of(\"Kentucky Derby\", \"horse race\").\nIs_a_type_of(\"Formula One championship\", \"auto race\").\n.decl Answer()\nAnswer() :- Wins(person, event), Is_a_type_of(event, type), Is_a_type_of(\"Formula One championship\", type).\n.output Answer\n\n"]}
{"id": 1855, "answer": false, "completion": ".decl Travels_with(Person_A:symbol, Person_B:symbol)\nTravels_with(\"Iggy Pop\", \"David Bowie\").\nTravels_with(\"Justin Bieber\", \"Selena Gomez\").\n.decl Answer()\nAnswer() :- Travels_with(\"Iggy Pop\", \"Justin Bieber\").\n.output Answer\n\n", "completions": [".decl Travels_with(Person_A:symbol, Person_B:symbol)\nTravels_with(\"Iggy Pop\", \"David Bowie\").\nTravels_with(\"Justin Bieber\", \"Selena Gomez\").\n.decl Answer()\nAnswer() :- Travels_with(\"Iggy Pop\", \"Justin Bieber\").\n.output Answer\n\n"]}
{"id": 1856, "answer": false, "completion": ".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Eminem\", 92).\n.decl Has_IQ_requirement(Event:symbol, IQ:float)\nHas_IQ_requirement(\"International Mathematical Olympiad\", 140).\n.decl Answer()\nAnswer() :- Has_IQ(\"Eminem\", iq1), Has_IQ_requirement(\"International Mathematical Olympiad\", iq2), iq1 >= iq2.\n.output Answer\n\n", "completions": [".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Eminem\", 92).\n.decl Has_IQ_requirement(Event:symbol, IQ:float)\nHas_IQ_requirement(\"International Mathematical Olympiad\", 140).\n.decl Answer()\nAnswer() :- Has_IQ(\"Eminem\", iq1), Has_IQ_requirement(\"International Mathematical Olympiad\", iq2), iq1 >= iq2.\n.output Answer\n\n"]}
{"id": 1857, "answer": false, "completion": ".decl Has_magnitude(Event:symbol, Magnitude:float)\nHas_magnitude(\"Tohoku earthquake\", 9).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Godzilla\", 100000).\n.decl Answer()\nAnswer() :- Has_magnitude(\"Tohoku earthquake\", magnitude), Has_weight(\"Godzilla\", weight), magnitude > weight.\n.output Answer\n\n\n", "completions": [".decl Has_magnitude(Event:symbol, Magnitude:float)\nHas_magnitude(\"Tohoku earthquake\", 9).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Godzilla\", 100000).\n.decl Answer()\nAnswer() :- Has_magnitude(\"Tohoku earthquake\", magnitude), Has_weight(\"Godzilla\", weight), magnitude > weight.\n.output Answer\n\n\n"]}
{"id": 1858, "answer": true, "completion": ".decl Last_n_hours(Event:symbol, N_hours:float)\nLast_n_hours(\"JAG\", 6).\n.decl Happens_every_n_hours(Event:symbol, N_hours:float)\nHappens_every_n_hours(\"watch\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_hours(\"watch\", n_hours1), Last_n_hours(\"JAG\", n_hours2), n_hours1 <= n_hours2.\n.output Answer\n\n", "completions": [".decl Last_n_hours(Event:symbol, N_hours:float)\nLast_n_hours(\"JAG\", 6).\n.decl Happens_every_n_hours(Event:symbol, N_hours:float)\nHappens_every_n_hours(\"watch\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_hours(\"watch\", n_hours1), Last_n_hours(\"JAG\", n_hours2), n_hours1 <= n_hours2.\n.output Answer\n\n"]}
{"id": 1859, "answer": false, "completion": ".decl Has_n_letters(Alphabet:symbol, N_letters:float)\nHas_n_letters(\"Greek alphabet\", 24).\nHas_n_letters(\"Sumerian cuneiform\", 600).\n.decl Answer()\nAnswer() :- Has_n_letters(\"Greek alphabet\", n_letters1), Has_n_letters(\"Sumerian cuneiform\", n_letters2), n_letters1 >= n_letters2.\n.output Answer\n\n\n", "completions": [".decl Has_n_letters(Alphabet:symbol, N_letters:float)\nHas_n_letters(\"Greek alphabet\", 24).\nHas_n_letters(\"Sumerian cuneiform\", 600).\n.decl Answer()\nAnswer() :- Has_n_letters(\"Greek alphabet\", n_letters1), Has_n_letters(\"Sumerian cuneiform\", n_letters2), n_letters1 >= n_letters2.\n.output Answer\n\n\n"]}
{"id": 1860, "answer": true, "completion": ".decl Costs(Item:symbol, Cost:float)\nCosts(\"2020 Chevrolet Corvette\", 63800).\nCosts(\"year at Columbia University\", 60000).\n.decl Answer()\nAnswer() :- Costs(\"2020 Chevrolet Corvette\", cost1), Costs(\"year at Columbia University\", cost2), cost1 >= cost2.\n.output Answer\n\n", "completions": [".decl Costs(Item:symbol, Cost:float)\nCosts(\"2020 Chevrolet Corvette\", 63800).\nCosts(\"year at Columbia University\", 60000).\n.decl Answer()\nAnswer() :- Costs(\"2020 Chevrolet Corvette\", cost1), Costs(\"year at Columbia University\", cost2), cost1 >= cost2.\n.output Answer\n\n"]}
{"id": 1861, "answer": false, "completion": ".decl Has_capacity(Hotel:symbol, Capacity:float)\nHas_capacity(\"Tahiti hotels\", 100).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"US D-Day troops\", 100000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tahiti hotels\", capacity), Has_n_members(\"US D-Day troops\", n_members), capacity >= n_members.\n.output Answer\n\n\n", "completions": [".decl Has_capacity(Hotel:symbol, Capacity:float)\nHas_capacity(\"Tahiti hotels\", 100).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"US D-Day troops\", 100000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tahiti hotels\", capacity), Has_n_members(\"US D-Day troops\", n_members), capacity >= n_members.\n.output Answer\n\n\n"]}
{"id": 1862, "answer": true, "completion": ".decl Hosts(Country:symbol, Event:symbol)\nHosts(\"United States\", \"Olympics\").\nHosts(\"Canada\", \"Olympics\").\nHosts(\"Mexico\", \"Olympics\").\nHosts(\"Brazil\", \"Olympics\").\nHosts(\"Argentina\", \"Olympics\").\nHosts(\"Chile\", \"Olympics\").\nHosts(\"Colombia\", \"Olympics\").\nHosts(\"Peru\", \"Olympics\").\nHosts(\"Venezuela\", \"Olympics\").\nHosts(\"Cuba\", \"Olympics\").\nHosts(\"Jamaica\", \"Olympics\").\nHosts(\"Haiti\", \"Olympics\").\nHosts(\"Dominican Republic\", \"Olympics\").\nHosts(\"Guatemala\", \"Olympics\").\nHosts(\"Honduras\", \"Olympics\").\nHosts(\"El Salvador\", \"Olympics\").\nHosts(\"Nicaragua\", \"Olympics\").\nHosts(\"Costa Rica\", \"Olympics\").\nHosts(\"Panama\", \"Olympics\").\nHosts(\"Belize\", \"Olympics\").\nHosts(\"Trinidad and Tobago\", \"Olympics\").\nHosts(\"Guyana\", \"Olympics\").\nHosts(\"Suriname\", \"Olympics\").\nHosts(\"French Guiana\", \"Olympics\").\nHosts(\"Ecuador\", \"Olympics\").\nHosts(\"Paraguay\", \"Olympics\").\nHosts(\"Uruguay\", \"Olympics\").\nHosts(\"Bolivia\", \"Olympics\").\n.decl Competes_in(Person:symbol, Event:symbol)\nCompetes_in(\"Evander Holyfield\", \"Olympics\").\n.decl Answer()\nAnswer() :- Hosts(country, \"Olympics\"), Competes_in(\"Evander Holyfield\", \"Olympics\").\n.output Answer\n\n", "completions": [".decl Hosts(Country:symbol, Event:symbol)\nHosts(\"United States\", \"Olympics\").\nHosts(\"Canada\", \"Olympics\").\nHosts(\"Mexico\", \"Olympics\").\nHosts(\"Brazil\", \"Olympics\").\nHosts(\"Argentina\", \"Olympics\").\nHosts(\"Chile\", \"Olympics\").\nHosts(\"Colombia\", \"Olympics\").\nHosts(\"Peru\", \"Olympics\").\nHosts(\"Venezuela\", \"Olympics\").\nHosts(\"Cuba\", \"Olympics\").\nHosts(\"Jamaica\", \"Olympics\").\nHosts(\"Haiti\", \"Olympics\").\nHosts(\"Dominican Republic\", \"Olympics\").\nHosts(\"Guatemala\", \"Olympics\").\nHosts(\"Honduras\", \"Olympics\").\nHosts(\"El Salvador\", \"Olympics\").\nHosts(\"Nicaragua\", \"Olympics\").\nHosts(\"Costa Rica\", \"Olympics\").\nHosts(\"Panama\", \"Olympics\").\nHosts(\"Belize\", \"Olympics\").\nHosts(\"Trinidad and Tobago\", \"Olympics\").\nHosts(\"Guyana\", \"Olympics\").\nHosts(\"Suriname\", \"Olympics\").\nHosts(\"French Guiana\", \"Olympics\").\nHosts(\"Ecuador\", \"Olympics\").\nHosts(\"Paraguay\", \"Olympics\").\nHosts(\"Uruguay\", \"Olympics\").\nHosts(\"Bolivia\", \"Olympics\").\n.decl Competes_in(Person:symbol, Event:symbol)\nCompetes_in(\"Evander Holyfield\", \"Olympics\").\n.decl Answer()\nAnswer() :- Hosts(country, \"Olympics\"), Competes_in(\"Evander Holyfield\", \"Olympics\").\n.output Answer\n\n"]}
{"id": 1863, "answer": false, "completion": ".decl Grows_in(Fruit:symbol, Place:symbol)\nGrows_in(\"watermelon\", \"Brazil\").\nGrows_in(\"watermelon\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Grows_in(\"watermelon\", \"Brazil\"), !Grows_in(\"watermelon\", \"Antarctica\").\n.output Answer\n\n", "completions": [".decl Grows_in(Fruit:symbol, Place:symbol)\nGrows_in(\"watermelon\", \"Brazil\").\nGrows_in(\"watermelon\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Grows_in(\"watermelon\", \"Brazil\"), !Grows_in(\"watermelon\", \"Antarctica\").\n.output Answer\n\n"]}
{"id": 1864, "answer": true, "completion": ".decl Hides_from(Person:symbol, Country:symbol)\nHides_from(\"Edward Snowden\", \"United States\").\n.decl Answer()\nAnswer() :- Hides_from(\"Edward Snowden\", \"United States\").\n.output Answer\n\n", "completions": [".decl Hides_from(Person:symbol, Country:symbol)\nHides_from(\"Edward Snowden\", \"United States\").\n.decl Answer()\nAnswer() :- Hides_from(\"Edward Snowden\", \"United States\").\n.output Answer\n\n"]}
{"id": 1865, "answer": true, "completion": ".decl Competes_with(Organism_A:symbol, Organism_B:symbol)\nCompetes_with(\"Leafhoppers\", \"Log Cabin syrup producers\").\n.decl Answer()\nAnswer() :- Competes_with(\"Leafhoppers\", \"Log Cabin syrup producers\").\n.output Answer\n\n", "completions": [".decl Competes_with(Organism_A:symbol, Organism_B:symbol)\nCompetes_with(\"Leafhoppers\", \"Log Cabin syrup producers\").\n.decl Answer()\nAnswer() :- Competes_with(\"Leafhoppers\", \"Log Cabin syrup producers\").\n.output Answer\n\n"]}
{"id": 1866, "answer": true, "completion": ".decl Has_symptom(Disease:symbol, Symptom:symbol)\nHas_symptom(\"drug addiction\", \"euphoria\").\n.decl Answer()\nAnswer() :- Has_symptom(\"drug addiction\", \"euphoria\").\n.output Answer\n\n", "completions": [".decl Has_symptom(Disease:symbol, Symptom:symbol)\nHas_symptom(\"drug addiction\", \"euphoria\").\n.decl Answer()\nAnswer() :- Has_symptom(\"drug addiction\", \"euphoria\").\n.output Answer\n\n"]}
{"id": 1867, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Anthony Quinn\", 7).\nHas_n_children(\"J.D. Salinger\", 1).\n.decl Answer()\nAnswer() :- Has_n_children(\"Anthony Quinn\", n_children1), Has_n_children(\"J.D. Salinger\", n_children2), n_children1 > n_children2.\n.output Answer\n\n", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Anthony Quinn\", 7).\nHas_n_children(\"J.D. Salinger\", 1).\n.decl Answer()\nAnswer() :- Has_n_children(\"Anthony Quinn\", n_children1), Has_n_children(\"J.D. Salinger\", n_children2), n_children1 > n_children2.\n.output Answer\n\n"]}
{"id": 1868, "answer": false, "completion": ".decl Has_salary(Person:symbol, Salary:float)\nHas_salary(\"Edgar Allan Poe\", 0).\n.decl Answer()\nAnswer() :- Has_salary(\"Edgar Allan Poe\", salary), salary > 0.\n.output Answer\n\n", "completions": [".decl Has_salary(Person:symbol, Salary:float)\nHas_salary(\"Edgar Allan Poe\", 0).\n.decl Answer()\nAnswer() :- Has_salary(\"Edgar Allan Poe\", salary), salary > 0.\n.output Answer\n\n"]}
{"id": 1869, "answer": true, "completion": ".decl Is_captured_in_habitat(Animal:symbol, Gear:symbol)\nIs_captured_in_habitat(\"giant squid\", \"gear\").\n.decl Answer()\nAnswer() :- Is_captured_in_habitat(\"giant squid\", \"gear\").\nAnswer() :- Is_captured_in_habitat(\"giant squid\", gear), gear != \"gear\".\n.output Answer\n\n\n", "completions": [".decl Is_captured_in_habitat(Animal:symbol, Gear:symbol)\nIs_captured_in_habitat(\"giant squid\", \"gear\").\n.decl Answer()\nAnswer() :- Is_captured_in_habitat(\"giant squid\", \"gear\").\nAnswer() :- Is_captured_in_habitat(\"giant squid\", gear), gear != \"gear\".\n.output Answer\n\n\n"]}
{"id": 1870, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Louisa May Alcott\", 55).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"ratification of the 13th Amendment\", 3).\n.decl Answer()\nAnswer() :- Has_age(\"Louisa May Alcott\", age), Last_n_years(\"ratification of the 13th Amendment\", n_years), age - n_years >= 0.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Louisa May Alcott\", 55).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"ratification of the 13th Amendment\", 3).\n.decl Answer()\nAnswer() :- Has_age(\"Louisa May Alcott\", age), Last_n_years(\"ratification of the 13th Amendment\", n_years), age - n_years >= 0.\n.output Answer\n\n"]}
{"id": 1871, "answer": false, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Eric Clapton\", 4).\n.decl N_players(Sport:symbol, N_players:float)\nN_players(\"basketball\", 5).\n.decl Answer()\nAnswer() :- Has_n_children(\"Eric Clapton\", n_children), N_players(\"basketball\", n_players), n_children >= n_players.\n.output Answer\n\n", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Eric Clapton\", 4).\n.decl N_players(Sport:symbol, N_players:float)\nN_players(\"basketball\", 5).\n.decl Answer()\nAnswer() :- Has_n_children(\"Eric Clapton\", n_children), N_players(\"basketball\", n_players), n_children >= n_players.\n.output Answer\n\n"]}
{"id": 1872, "answer": false, "completion": ".decl Has_n_projects(Franchise:symbol, N_projects:float)\nHas_n_projects(\"Dragon Ball\", 42).\nHas_n_projects(\"Friday 13th\", 12).\n.decl Answer()\nAnswer() :- Has_n_projects(\"Dragon Ball\", n_projects1), Has_n_projects(\"Friday 13th\", n_projects2), n_projects1 < n_projects2.\n.output Answer\n\n", "completions": [".decl Has_n_projects(Franchise:symbol, N_projects:float)\nHas_n_projects(\"Dragon Ball\", 42).\nHas_n_projects(\"Friday 13th\", 12).\n.decl Answer()\nAnswer() :- Has_n_projects(\"Dragon Ball\", n_projects1), Has_n_projects(\"Friday 13th\", n_projects2), n_projects1 < n_projects2.\n.output Answer\n\n"]}
{"id": 1873, "answer": true, "completion": ".decl Has_vitamin(Food:symbol, Vitamin:symbol)\nHas_vitamin(\"lemonade\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Has_vitamin(\"lemonade\", \"Vitamin C\").\n.output Answer\n\n", "completions": [".decl Has_vitamin(Food:symbol, Vitamin:symbol)\nHas_vitamin(\"lemonade\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Has_vitamin(\"lemonade\", \"Vitamin C\").\n.output Answer\n\n"]}
{"id": 1874, "answer": false, "completion": ".decl Produces(Animal:symbol, Product:symbol)\nProduces(\"Bombyx mori\", \"silk\").\n.decl Answer()\nAnswer() :- Produces(animal, \"silk\"), !Produces(animal2, \"silk\"), animal != animal2.\n.output Answer\n\n", "completions": [".decl Produces(Animal:symbol, Product:symbol)\nProduces(\"Bombyx mori\", \"silk\").\n.decl Answer()\nAnswer() :- Produces(animal, \"silk\"), !Produces(animal2, \"silk\"), animal != animal2.\n.output Answer\n\n"]}
{"id": 1875, "answer": true, "completion": ".decl Has_crew(Mission:symbol, Crew:symbol)\nHas_crew(\"Apollo 15\", \"David Scott\").\nHas_crew(\"Apollo 15\", \"James Irwin\").\nHas_crew(\"Apollo 15\", \"Alfred Worden\").\n.decl Takes_pictures_of(Person:symbol, Object:symbol)\nTakes_pictures_of(\"David Scott\", \"Mount Sharp\").\nTakes_pictures_of(\"James Irwin\", \"Mount Sharp\").\nTakes_pictures_of(\"Alfred Worden\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Has_crew(\"Apollo 15\", person), Takes_pictures_of(person, \"Mount Sharp\").\n.output Answer\n\n", "completions": [".decl Has_crew(Mission:symbol, Crew:symbol)\nHas_crew(\"Apollo 15\", \"David Scott\").\nHas_crew(\"Apollo 15\", \"James Irwin\").\nHas_crew(\"Apollo 15\", \"Alfred Worden\").\n.decl Takes_pictures_of(Person:symbol, Object:symbol)\nTakes_pictures_of(\"David Scott\", \"Mount Sharp\").\nTakes_pictures_of(\"James Irwin\", \"Mount Sharp\").\nTakes_pictures_of(\"Alfred Worden\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Has_crew(\"Apollo 15\", person), Takes_pictures_of(person, \"Mount Sharp\").\n.output Answer\n\n"]}
{"id": 1876, "answer": true, "completion": ".decl Has_policy(Store:symbol, Policy:symbol)\nHas_policy(\"Aldi\", \"bring your own bags\").\n.decl Answer()\nAnswer() :- Has_policy(\"Aldi\", \"bring your own bags\").\n.output Answer\n\n", "completions": [".decl Has_policy(Store:symbol, Policy:symbol)\nHas_policy(\"Aldi\", \"bring your own bags\").\n.decl Answer()\nAnswer() :- Has_policy(\"Aldi\", \"bring your own bags\").\n.output Answer\n\n"]}
{"id": 1877, "answer": false, "completion": ".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Porsche 992 Turbo S\", 330).\n.decl Has_top_speed(Person:symbol, Top_speed:float)\nHas_top_speed(\"Usain Bolt\", 44).\n.decl Answer()\nAnswer() :- Has_top_speed(car, top_speed1), Has_top_speed(person, top_speed2), top_speed1 > top_speed2.\n.output Answer\n\n", "completions": [".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Porsche 992 Turbo S\", 330).\n.decl Has_top_speed(Person:symbol, Top_speed:float)\nHas_top_speed(\"Usain Bolt\", 44).\n.decl Answer()\nAnswer() :- Has_top_speed(car, top_speed1), Has_top_speed(person, top_speed2), top_speed1 > top_speed2.\n.output Answer\n\n"]}
{"id": 1878, "answer": false, "completion": ".decl Has_purpose(Object:symbol, Purpose:symbol)\nHas_purpose(\"curling brooms\", \"sweeping ice\").\nHas_purpose(\"house floor brooms\", \"sweeping floors\").\n.decl Answer()\nAnswer() :- Has_purpose(\"curling brooms\", purpose1), Has_purpose(\"house floor brooms\", purpose2), purpose1 = purpose2.\n.output Answer\n\n", "completions": [".decl Has_purpose(Object:symbol, Purpose:symbol)\nHas_purpose(\"curling brooms\", \"sweeping ice\").\nHas_purpose(\"house floor brooms\", \"sweeping floors\").\n.decl Answer()\nAnswer() :- Has_purpose(\"curling brooms\", purpose1), Has_purpose(\"house floor brooms\", purpose2), purpose1 = purpose2.\n.output Answer\n\n"]}
{"id": 1879, "answer": false, "completion": ".decl Has_lip_piercings(Person:symbol)\nHas_lip_piercings(\"person1\").\nHas_lip_piercings(\"person2\").\nHas_lip_piercings(\"person3\").\nHas_lip_piercings(\"person4\").\nHas_lip_piercings(\"person5\").\nHas_lip_piercings(\"person6\").\nHas_lip_piercings(\"person7\").\nHas_lip_piercings(\"person8\").\nHas_lip_piercings(\"person9\").\nHas_lip_piercings(\"person10\").\nHas_lip_piercings(\"person11\").\nHas_lip_piercings(\"person12\").\nHas_lip_piercings(\"person13\").\nHas_lip_piercings(\"person14\").\nHas_lip_piercings(\"person15\").\nHas_lip_piercings(\"person16\").\nHas_lip_piercings(\"person17\").\nHas_lip_piercings(\"person18\").\nHas_lip_piercings(\"person19\").\nHas_lip_piercings(\"person20\").\nHas_lip_piercings(\"person21\").\nHas_lip_piercings(\"person22\").\nHas_lip_piercings(\"person23\").\nHas_lip_piercings(\"person24\").\nHas_lip_piercings(\"person25\").\nHas_lip_piercings(\"person26\").\nHas_lip_piercings(\"person27\").\nHas_lip_piercings(\"person28\").\nHas_lip_piercings(\"person29\").\nHas_lip_piercings(\"person30\").\nHas_lip_piercings(\"person31\").\nHas_lip_piercings(\"person32\").\nHas_lip_piercings(\"person33\").\nHas_lip_piercings(\"person34\").\nHas_lip_piercings(\"person35\").\nHas_lip_piercings(\"person36\").\nHas_lip_piercings(\"person37\").\nHas_lip_piercings(\"person38\").\nHas_lip_piercings(\"person39\").\nHas_lip_piercings(\"person40\").\nHas_lip_piercings(\"person41\").\nHas_lip_piercings(\"person42\").\nHas_lip_piercings(\"person43\").\nHas_lip_piercings(\"person44\").\nHas_lip_piercings(\"person45\").\nHas_lip_piercings(\"person46\").\nHas_lip_piercings(\"person47\").\nHas_lip_piercings(\"person48\").\nHas_lip_piercings(\"person49\").\nHas_lip_piercings(\"person50\").\nHas_lip_piercings(\"person51\").\nHas_lip_piercings(\"person52\").\nHas_lip_piercings(\"person53\").\nHas_lip_piercings(\"person54\").\nHas_lip_piercings(\"person55\").\nHas_lip_piercings(\"person56\").\nHas_lip_piercings(\"person57\").\nHas_lip_piercings(\"person58\").\nHas_lip_piercings(\"person59\").\nHas_lip_piercings(\"person60\").\nHas_", "completions": [".decl Has_lip_piercings(Person:symbol)\nHas_lip_piercings(\"person1\").\nHas_lip_piercings(\"person2\").\nHas_lip_piercings(\"person3\").\nHas_lip_piercings(\"person4\").\nHas_lip_piercings(\"person5\").\nHas_lip_piercings(\"person6\").\nHas_lip_piercings(\"person7\").\nHas_lip_piercings(\"person8\").\nHas_lip_piercings(\"person9\").\nHas_lip_piercings(\"person10\").\nHas_lip_piercings(\"person11\").\nHas_lip_piercings(\"person12\").\nHas_lip_piercings(\"person13\").\nHas_lip_piercings(\"person14\").\nHas_lip_piercings(\"person15\").\nHas_lip_piercings(\"person16\").\nHas_lip_piercings(\"person17\").\nHas_lip_piercings(\"person18\").\nHas_lip_piercings(\"person19\").\nHas_lip_piercings(\"person20\").\nHas_lip_piercings(\"person21\").\nHas_lip_piercings(\"person22\").\nHas_lip_piercings(\"person23\").\nHas_lip_piercings(\"person24\").\nHas_lip_piercings(\"person25\").\nHas_lip_piercings(\"person26\").\nHas_lip_piercings(\"person27\").\nHas_lip_piercings(\"person28\").\nHas_lip_piercings(\"person29\").\nHas_lip_piercings(\"person30\").\nHas_lip_piercings(\"person31\").\nHas_lip_piercings(\"person32\").\nHas_lip_piercings(\"person33\").\nHas_lip_piercings(\"person34\").\nHas_lip_piercings(\"person35\").\nHas_lip_piercings(\"person36\").\nHas_lip_piercings(\"person37\").\nHas_lip_piercings(\"person38\").\nHas_lip_piercings(\"person39\").\nHas_lip_piercings(\"person40\").\nHas_lip_piercings(\"person41\").\nHas_lip_piercings(\"person42\").\nHas_lip_piercings(\"person43\").\nHas_lip_piercings(\"person44\").\nHas_lip_piercings(\"person45\").\nHas_lip_piercings(\"person46\").\nHas_lip_piercings(\"person47\").\nHas_lip_piercings(\"person48\").\nHas_lip_piercings(\"person49\").\nHas_lip_piercings(\"person50\").\nHas_lip_piercings(\"person51\").\nHas_lip_piercings(\"person52\").\nHas_lip_piercings(\"person53\").\nHas_lip_piercings(\"person54\").\nHas_lip_piercings(\"person55\").\nHas_lip_piercings(\"person56\").\nHas_lip_piercings(\"person57\").\nHas_lip_piercings(\"person58\").\nHas_lip_piercings(\"person59\").\nHas_lip_piercings(\"person60\").\nHas_"]}
{"id": 1880, "answer": true, "completion": ".decl Has_genre(Group:symbol, Genre:symbol)\nHas_genre(\"ABBA\", \"pop\").\n.decl Is_relevant(Genre:symbol, Time:symbol)\nIs_relevant(\"pop\", \"today\").\n.decl Answer()\nAnswer() :- Has_genre(\"ABBA\", genre), Is_relevant(genre, \"today\").\n.output Answer\n\n", "completions": [".decl Has_genre(Group:symbol, Genre:symbol)\nHas_genre(\"ABBA\", \"pop\").\n.decl Is_relevant(Genre:symbol, Time:symbol)\nIs_relevant(\"pop\", \"today\").\n.decl Answer()\nAnswer() :- Has_genre(\"ABBA\", genre), Is_relevant(genre, \"today\").\n.output Answer\n\n"]}
{"id": 1881, "answer": false, "completion": ".decl Has_influence(Work:symbol, Person:symbol)\nHas_influence(\"The Catcher in the Rye\", \"John Lennon\").\nHas_influence(\"The Catcher in the Rye\", \"Mark David Chapman\").\n.decl Has_success(Work:symbol, Success:symbol)\nHas_success(\"The Catcher in the Rye\", \"best-seller\").\n.decl Has_success(Work:symbol, Success:symbol)\nHas_success(\"The Catcher in the Rye\", \"influential\").\n.decl Answer()\nAnswer() :- Has_influence(\"The Catcher in the Rye\", \"John Lennon\").\nAnswer() :- Has_influence(\"The Catcher in the Rye\", \"Mark David Chapman\").\n.output Answer\n\n", "completions": [".decl Has_influence(Work:symbol, Person:symbol)\nHas_influence(\"The Catcher in the Rye\", \"John Lennon\").\nHas_influence(\"The Catcher in the Rye\", \"Mark David Chapman\").\n.decl Has_success(Work:symbol, Success:symbol)\nHas_success(\"The Catcher in the Rye\", \"best-seller\").\n.decl Has_success(Work:symbol, Success:symbol)\nHas_success(\"The Catcher in the Rye\", \"influential\").\n.decl Answer()\nAnswer() :- Has_influence(\"The Catcher in the Rye\", \"John Lennon\").\nAnswer() :- Has_influence(\"The Catcher in the Rye\", \"Mark David Chapman\").\n.output Answer\n\n"]}
{"id": 1882, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"rice pudding\", \"milk\").\nHas_ingredient(\"rice pudding\", \"milk substitute\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"Cyndi Lauper\", \"rice pudding\").\n.decl Answer()\nAnswer() :- Eats(\"Cyndi Lauper\", food), Has_ingredient(food, \"milk substitute\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"rice pudding\", \"milk\").\nHas_ingredient(\"rice pudding\", \"milk substitute\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"Cyndi Lauper\", \"rice pudding\").\n.decl Answer()\nAnswer() :- Eats(\"Cyndi Lauper\", food), Has_ingredient(food, \"milk substitute\").\n.output Answer\n\n"]}
{"id": 1883, "answer": false, "completion": ".decl Has_animal(Calendar:symbol, Animal:symbol)\nHas_animal(\"Chinese New Year calendar\", \"rat\").\nHas_animal(\"Chinese New Year calendar\", \"ox\").\nHas_animal(\"Chinese New Year calendar\", \"tiger\").\nHas_animal(\"Chinese New Year calendar\", \"rabbit\").\nHas_animal(\"Chinese New Year calendar\", \"dragon\").\nHas_animal(\"Chinese New Year calendar\", \"snake\").\nHas_animal(\"Chinese New Year calendar\", \"horse\").\nHas_animal(\"Chinese New Year calendar\", \"goat\").\nHas_animal(\"Chinese New Year calendar\", \"monkey\").\nHas_animal(\"Chinese New Year calendar\", \"rooster\").\nHas_animal(\"Chinese New Year calendar\", \"dog\").\nHas_animal(\"Chinese New Year calendar\", \"pig\").\n.decl Is_mollusk(Animal:symbol)\nIs_mollusk(\"octopus\").\nIs_mollusk(\"squid\").\nIs_mollusk(\"snail\").\nIs_mollusk(\"clam\").\nIs_mollusk(\"oyster\").\n.decl Answer()\nAnswer() :- Has_animal(\"Chinese New Year calendar\", animal), Is_mollusk(animal).\n.output Answer\n\n", "completions": [".decl Has_animal(Calendar:symbol, Animal:symbol)\nHas_animal(\"Chinese New Year calendar\", \"rat\").\nHas_animal(\"Chinese New Year calendar\", \"ox\").\nHas_animal(\"Chinese New Year calendar\", \"tiger\").\nHas_animal(\"Chinese New Year calendar\", \"rabbit\").\nHas_animal(\"Chinese New Year calendar\", \"dragon\").\nHas_animal(\"Chinese New Year calendar\", \"snake\").\nHas_animal(\"Chinese New Year calendar\", \"horse\").\nHas_animal(\"Chinese New Year calendar\", \"goat\").\nHas_animal(\"Chinese New Year calendar\", \"monkey\").\nHas_animal(\"Chinese New Year calendar\", \"rooster\").\nHas_animal(\"Chinese New Year calendar\", \"dog\").\nHas_animal(\"Chinese New Year calendar\", \"pig\").\n.decl Is_mollusk(Animal:symbol)\nIs_mollusk(\"octopus\").\nIs_mollusk(\"squid\").\nIs_mollusk(\"snail\").\nIs_mollusk(\"clam\").\nIs_mollusk(\"oyster\").\n.decl Answer()\nAnswer() :- Has_animal(\"Chinese New Year calendar\", animal), Is_mollusk(animal).\n.output Answer\n\n"]}
{"id": 1884, "answer": true, "completion": ".decl Is_present_at(Person:symbol, Event:symbol)\nIs_present_at(\"Gandalf\", \"death of Eomer\").\n.decl Answer()\nAnswer() :- Is_present_at(\"Gandalf\", \"death of Eomer\").\n.output Answer\n\n", "completions": [".decl Is_present_at(Person:symbol, Event:symbol)\nIs_present_at(\"Gandalf\", \"death of Eomer\").\n.decl Answer()\nAnswer() :- Is_present_at(\"Gandalf\", \"death of Eomer\").\n.output Answer\n\n"]}
{"id": 1885, "answer": false, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"first two burials of women in the Panthéon\", 365 * 2).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"Neptunian orbit\", 365 * 164.79).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"Neptunian orbit\", n_days1), Last_n_days(\"first two burials of women in the Panthéon\", n_days2), n_days1 <= n_days2.\n.output Answer\n\n", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"first two burials of women in the Panthéon\", 365 * 2).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"Neptunian orbit\", 365 * 164.79).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"Neptunian orbit\", n_days1), Last_n_days(\"first two burials of women in the Panthéon\", n_days2), n_days1 <= n_days2.\n.output Answer\n\n"]}
{"id": 1886, "answer": true, "completion": ".decl Has_probability(Disease:symbol, Probability:float)\nHas_probability(\"bipolar disorder\", 0.4).\nHas_probability(\"diabetes\", 0.1).\n.decl Answer()\nAnswer() :- Has_probability(\"bipolar disorder\", probability1), Has_probability(\"diabetes\", probability2), probability1 > probability2.\n.output Answer\n\n", "completions": [".decl Has_probability(Disease:symbol, Probability:float)\nHas_probability(\"bipolar disorder\", 0.4).\nHas_probability(\"diabetes\", 0.1).\n.decl Answer()\nAnswer() :- Has_probability(\"bipolar disorder\", probability1), Has_probability(\"diabetes\", probability2), probability1 > probability2.\n.output Answer\n\n"]}
{"id": 1887, "answer": false, "completion": ".decl Has_n_seats(Car:symbol, N_seats:float)\nHas_n_seats(\"Audi TT\", 2).\n.decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Stone Cold Steve Austin\", 3).\n.decl Answer()\nAnswer() :- Has_n_seats(\"Audi TT\", n_seats), Has_n_wives(\"Stone Cold Steve Austin\", n_wives), n_seats >= n_wives.\n.output Answer\n\n", "completions": [".decl Has_n_seats(Car:symbol, N_seats:float)\nHas_n_seats(\"Audi TT\", 2).\n.decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Stone Cold Steve Austin\", 3).\n.decl Answer()\nAnswer() :- Has_n_seats(\"Audi TT\", n_seats), Has_n_wives(\"Stone Cold Steve Austin\", n_wives), n_seats >= n_wives.\n.output Answer\n\n"]}
{"id": 1888, "answer": true, "completion": ".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"NBA game\", 2.5).\nLasts_n_hours(\"Six-Day War\", 6).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"NBA game\", n_hours1), Lasts_n_hours(\"Six-Day War\", n_hours2), n_hours1 <= n_hours2.\n.output Answer\n\n", "completions": [".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"NBA game\", 2.5).\nLasts_n_hours(\"Six-Day War\", 6).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"NBA game\", n_hours1), Lasts_n_hours(\"Six-Day War\", n_hours2), n_hours1 <= n_hours2.\n.output Answer\n\n"]}
{"id": 1889, "answer": true, "completion": ".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Aeroflot\", \"Europe\").\n.decl Has_flown(Person:symbol, Airline:symbol)\nHas_flown(\"Ivan the Terrible\", \"Aeroflot\").\n.decl Answer()\nAnswer() :- Has_flown(\"Ivan the Terrible\", airline), Flies_to(airline, \"Europe\").\n.output Answer\n\n", "completions": [".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Aeroflot\", \"Europe\").\n.decl Has_flown(Person:symbol, Airline:symbol)\nHas_flown(\"Ivan the Terrible\", \"Aeroflot\").\n.decl Answer()\nAnswer() :- Has_flown(\"Ivan the Terrible\", airline), Flies_to(airline, \"Europe\").\n.output Answer\n\n"]}
{"id": 1890, "answer": true, "completion": ".decl Has_in_it(Object:symbol, Thing:symbol)\nHas_in_it(\"TMNT coloring book\", \"pizza\").\n.decl Answer()\nAnswer() :- Has_in_it(\"TMNT coloring book\", \"pizza\").\n.output Answer\n\n", "completions": [".decl Has_in_it(Object:symbol, Thing:symbol)\nHas_in_it(\"TMNT coloring book\", \"pizza\").\n.decl Answer()\nAnswer() :- Has_in_it(\"TMNT coloring book\", \"pizza\").\n.output Answer\n\n"]}
{"id": 1891, "answer": true, "completion": ".decl Explains(Theory:symbol, Phenomenon:symbol)\nExplains(\"theory of cultural hegemony\", \"global warming\").\n.decl Answer()\nAnswer() :- Explains(\"theory of cultural hegemony\", \"global warming\").\n.output Answer\n\n", "completions": [".decl Explains(Theory:symbol, Phenomenon:symbol)\nExplains(\"theory of cultural hegemony\", \"global warming\").\n.decl Answer()\nAnswer() :- Explains(\"theory of cultural hegemony\", \"global warming\").\n.output Answer\n\n"]}
{"id": 1892, "answer": true, "completion": ".decl Is_used_at(Object:symbol, Place:symbol)\nIs_used_at(\"kayak\", \"lake\").\nIs_used_at(\"kayak\", \"river\").\nIs_used_at(\"kayak\", \"ocean\").\n.decl Is_at(Place:symbol, Place2:symbol)\nIs_at(\"lake\", \"earth\").\nIs_at(\"river\", \"earth\").\nIs_at(\"ocean\", \"earth\").\nIs_at(\"summit of Mount Everest\", \"earth\").\n.decl Answer()\nAnswer() :- Is_used_at(\"kayak\", place1), Is_at(\"summit of Mount Everest\", place2), Is_at(place1, place2).\n.output Answer\n\n", "completions": [".decl Is_used_at(Object:symbol, Place:symbol)\nIs_used_at(\"kayak\", \"lake\").\nIs_used_at(\"kayak\", \"river\").\nIs_used_at(\"kayak\", \"ocean\").\n.decl Is_at(Place:symbol, Place2:symbol)\nIs_at(\"lake\", \"earth\").\nIs_at(\"river\", \"earth\").\nIs_at(\"ocean\", \"earth\").\nIs_at(\"summit of Mount Everest\", \"earth\").\n.decl Answer()\nAnswer() :- Is_used_at(\"kayak\", place1), Is_at(\"summit of Mount Everest\", place2), Is_at(place1, place2).\n.output Answer\n\n"]}
{"id": 1893, "answer": true, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Christmas\", \"Sunday\").\nHappens_on_day(\"Christmas\", \"Monday\").\nHappens_on_day(\"Christmas\", \"Tuesday\").\nHappens_on_day(\"Christmas\", \"Wednesday\").\nHappens_on_day(\"Christmas\", \"Thursday\").\nHappens_on_day(\"Christmas\", \"Friday\").\nHappens_on_day(\"Christmas\", \"Saturday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Christmas\", day1), Happens_on_day(\"Christmas\", day2), day1 = day2.\n.output Answer\n\n", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Christmas\", \"Sunday\").\nHappens_on_day(\"Christmas\", \"Monday\").\nHappens_on_day(\"Christmas\", \"Tuesday\").\nHappens_on_day(\"Christmas\", \"Wednesday\").\nHappens_on_day(\"Christmas\", \"Thursday\").\nHappens_on_day(\"Christmas\", \"Friday\").\nHappens_on_day(\"Christmas\", \"Saturday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Christmas\", day1), Happens_on_day(\"Christmas\", day2), day1 = day2.\n.output Answer\n\n"]}
{"id": 1894, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Swan Lake performance\", 1).\nHas_volume(\"human\", 0.5).\n.decl Answer()\nAnswer() :- Has_volume(\"Swan Lake performance\", volume1), Has_volume(\"human\", volume2), volume1 < volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Swan Lake performance\", 1).\nHas_volume(\"human\", 0.5).\n.decl Answer()\nAnswer() :- Has_volume(\"Swan Lake performance\", volume1), Has_volume(\"human\", volume2), volume1 < volume2.\n.output Answer\n\n"]}
{"id": 1895, "answer": false, "completion": ".decl Likes(Person:symbol, Band:symbol)\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\n", "completions": [".decl Likes(Person:symbol, Band:symbol)\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\nLikes(\"Armenian\", \"System of a Down\").\n"]}
{"id": 1896, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Powerpuff Girls\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Powerpuff Girls\", n_members), n_members >= 4.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Powerpuff Girls\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Powerpuff Girls\", n_members), n_members >= 4.\n.output Answer\n\n"]}
{"id": 1897, "answer": false, "completion": ".decl Has_n_songs(Catalog:symbol, N_songs:float)\nHas_n_songs(\"Itunes\", 15000000).\n.decl Lasts_n_seconds(Song:symbol, N_seconds:float)\nLasts_n_seconds(\"song\", 300).\n.decl Answer()\nAnswer() :- Has_n_songs(\"Itunes\", n_songs), Lasts_n_seconds(\"song\", n_seconds), n_songs * n_seconds < 365 * 24 * 60 * 60.\n.output Answer\n\n", "completions": [".decl Has_n_songs(Catalog:symbol, N_songs:float)\nHas_n_songs(\"Itunes\", 15000000).\n.decl Lasts_n_seconds(Song:symbol, N_seconds:float)\nLasts_n_seconds(\"song\", 300).\n.decl Answer()\nAnswer() :- Has_n_songs(\"Itunes\", n_songs), Lasts_n_seconds(\"song\", n_seconds), n_songs * n_seconds < 365 * 24 * 60 * 60.\n.output Answer\n\n"]}
{"id": 1898, "answer": false, "completion": ".decl Wrote(Person:symbol, Song:symbol)\nWrote(\"The Beatles\", \"Hey Jude\").\nWrote(\"The Beatles\", \"Yesterday\").\nWrote(\"The Beatles\", \"Let It Be\").\nWrote(\"The Beatles\", \"Come Together\").\nWrote(\"The Beatles\", \"Something\").\nWrote(\"The Beatles\", \"Eleanor Rigby\").\nWrote(\"The Beatles\", \"Yellow Submarine\").\nWrote(\"The Beatles\", \"Penny Lane\").\nWrote(\"The Beatles\", \"All You Need Is Love\").\nWrote(\"The Beatles\", \"A Day in the Life\").\nWrote(\"The Beatles\", \"I Want to Hold Your Hand\").\nWrote(\"The Beatles\", \"She Loves You\").\nWrote(\"The Beatles\", \"Can't Buy Me Love\").\nWrote(\"The Beatles\", \"Love Me Do\").\nWrote(\"The Beatles\", \"I Feel Fine\").\nWrote(\"The Beatles\", \"Help!\").\nWrote(\"The Beatles\", \"I Saw Her Standing There\").\nWrote(\"The Beatles\", \"From Me to You\").\nWrote(\"The Beatles\", \"She Loves You\").\nWrote(\"The Beatles\", \"Twist and Shout\").\nWrote(\"The Beatles\", \"Please Please Me\").\nWrote(\"The Beatles\", \"With the Beatles\").\nWrote(\"The Beatles\", \"A Hard Day's Night\").\nWrote(\"The Beatles\", \"Beatles for Sale\").\nWrote(\"The Beatles\", \"Help!\").\nWrote(\"The Beatles\", \"Rubber Soul\").\nWrote(\"The Beatles\", \"Revolver\").\nWrote(\"The Beatles\", \"Sgt. Pepper's Lonely Hearts Club Band\").\nWrote(\"The Beatles\", \"Magical Mystery Tour\").\nWrote(\"The Beatles\", \"The Beatles\").\nWrote(\"The Beatles\", \"Yellow Submarine\").\nWrote(\"The Beatles\", \"Abbey Road\").\nWrote(\"The Beatles\", \"Let It Be\").\nWrote(\"The Beatles\", \"Past Masters\").\nWrote(\"The Beatles\", \"1\").\nWrote(\"The Beatles\", \"Love\").\nWrote(\"The Beatles\", \"The Beatles Stereo Box Set\").\nWrote(\"The Beatles\", \"The Beatles in Mono\").\nWrote(\"The Beatles\", \"The Beatles Box Set\").\nWrote(\"The Beatles\", \"The Beatles Bootleg Recordings 1963\").\nWrote(\"The Beatles\", \"On Air - Live at the BBC Volume 2\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The", "completions": [".decl Wrote(Person:symbol, Song:symbol)\nWrote(\"The Beatles\", \"Hey Jude\").\nWrote(\"The Beatles\", \"Yesterday\").\nWrote(\"The Beatles\", \"Let It Be\").\nWrote(\"The Beatles\", \"Come Together\").\nWrote(\"The Beatles\", \"Something\").\nWrote(\"The Beatles\", \"Eleanor Rigby\").\nWrote(\"The Beatles\", \"Yellow Submarine\").\nWrote(\"The Beatles\", \"Penny Lane\").\nWrote(\"The Beatles\", \"All You Need Is Love\").\nWrote(\"The Beatles\", \"A Day in the Life\").\nWrote(\"The Beatles\", \"I Want to Hold Your Hand\").\nWrote(\"The Beatles\", \"She Loves You\").\nWrote(\"The Beatles\", \"Can't Buy Me Love\").\nWrote(\"The Beatles\", \"Love Me Do\").\nWrote(\"The Beatles\", \"I Feel Fine\").\nWrote(\"The Beatles\", \"Help!\").\nWrote(\"The Beatles\", \"I Saw Her Standing There\").\nWrote(\"The Beatles\", \"From Me to You\").\nWrote(\"The Beatles\", \"She Loves You\").\nWrote(\"The Beatles\", \"Twist and Shout\").\nWrote(\"The Beatles\", \"Please Please Me\").\nWrote(\"The Beatles\", \"With the Beatles\").\nWrote(\"The Beatles\", \"A Hard Day's Night\").\nWrote(\"The Beatles\", \"Beatles for Sale\").\nWrote(\"The Beatles\", \"Help!\").\nWrote(\"The Beatles\", \"Rubber Soul\").\nWrote(\"The Beatles\", \"Revolver\").\nWrote(\"The Beatles\", \"Sgt. Pepper's Lonely Hearts Club Band\").\nWrote(\"The Beatles\", \"Magical Mystery Tour\").\nWrote(\"The Beatles\", \"The Beatles\").\nWrote(\"The Beatles\", \"Yellow Submarine\").\nWrote(\"The Beatles\", \"Abbey Road\").\nWrote(\"The Beatles\", \"Let It Be\").\nWrote(\"The Beatles\", \"Past Masters\").\nWrote(\"The Beatles\", \"1\").\nWrote(\"The Beatles\", \"Love\").\nWrote(\"The Beatles\", \"The Beatles Stereo Box Set\").\nWrote(\"The Beatles\", \"The Beatles in Mono\").\nWrote(\"The Beatles\", \"The Beatles Box Set\").\nWrote(\"The Beatles\", \"The Beatles Bootleg Recordings 1963\").\nWrote(\"The Beatles\", \"On Air - Live at the BBC Volume 2\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The Beatles\", \"The Beatles Anthology\").\nWrote(\"The"]}
{"id": 1899, "answer": false, "completion": ".decl Has_n_polygons(Game:symbol, N_polygons:float)\nHas_n_polygons(\"Metroid\", 100).\n.decl Has_n_polygons(Game:symbol, N_polygons:float)\nHas_n_polygons(\"Super Mario Bros.\", 100).\n.decl Answer()\nAnswer() :- Has_n_polygons(\"Metroid\", n_polygons1), Has_n_polygons(\"Super Mario Bros.\", n_polygons2), n_polygons1 > n_polygons2.\n.output Answer\n\n", "completions": [".decl Has_n_polygons(Game:symbol, N_polygons:float)\nHas_n_polygons(\"Metroid\", 100).\n.decl Has_n_polygons(Game:symbol, N_polygons:float)\nHas_n_polygons(\"Super Mario Bros.\", 100).\n.decl Answer()\nAnswer() :- Has_n_polygons(\"Metroid\", n_polygons1), Has_n_polygons(\"Super Mario Bros.\", n_polygons2), n_polygons1 > n_polygons2.\n.output Answer\n\n"]}
{"id": 1900, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"WWF\", 1000000).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"WWF\", 1000000).\n.decl Answer()\nAnswer() :- Has_n_members(\"WWF\", n_members1), Has_n_members(\"WWF\", n_members2), n_members1 > n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"WWF\", 1000000).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"WWF\", 1000000).\n.decl Answer()\nAnswer() :- Has_n_members(\"WWF\", n_members1), Has_n_members(\"WWF\", n_members2), n_members1 > n_members2.\n.output Answer\n\n"]}
{"id": 1901, "answer": false, "completion": ".decl Is_good_at(Person:symbol, Skill:symbol)\nIs_good_at(\"Hodor\", \"math\").\n.decl Is_good_at(Person:symbol, Skill:symbol)\nIs_good_at(\"Hodor\", \"mathematics\").\n.decl Answer()\nAnswer() :- Is_good_at(\"Hodor\", \"math\"), Is_good_at(\"Hodor\", \"mathematics\").\n.output Answer\n\n", "completions": [".decl Is_good_at(Person:symbol, Skill:symbol)\nIs_good_at(\"Hodor\", \"math\").\n.decl Is_good_at(Person:symbol, Skill:symbol)\nIs_good_at(\"Hodor\", \"mathematics\").\n.decl Answer()\nAnswer() :- Is_good_at(\"Hodor\", \"math\"), Is_good_at(\"Hodor\", \"mathematics\").\n.output Answer\n\n"]}
{"id": 1902, "answer": true, "completion": ".decl Plays_role(Person:symbol, Role:symbol)\nPlays_role(\"Keith Richards\", \"captain\").\nPlays_role(\"Keith Richards\", \"pirate\").\n.decl Has_role(Movie:symbol, Role:symbol)\nHas_role(\"Pirates of the Caribbean: At World's End\", \"pirate\").\n.decl Answer()\nAnswer() :- Plays_role(\"Keith Richards\", role), Has_role(movie, role).\n.output Answer\n\n", "completions": [".decl Plays_role(Person:symbol, Role:symbol)\nPlays_role(\"Keith Richards\", \"captain\").\nPlays_role(\"Keith Richards\", \"pirate\").\n.decl Has_role(Movie:symbol, Role:symbol)\nHas_role(\"Pirates of the Caribbean: At World's End\", \"pirate\").\n.decl Answer()\nAnswer() :- Plays_role(\"Keith Richards\", role), Has_role(movie, role).\n.output Answer\n\n"]}
{"id": 1903, "answer": true, "completion": ".decl Has_rivalry(Person_A:symbol, Person_B:symbol)\nHas_rivalry(\"Ahura Mazda\", \"Zeus\").\n.decl Answer()\nAnswer() :- Has_rivalry(\"Ahura Mazda\", \"Zeus\").\n.output Answer\n\n", "completions": [".decl Has_rivalry(Person_A:symbol, Person_B:symbol)\nHas_rivalry(\"Ahura Mazda\", \"Zeus\").\n.decl Answer()\nAnswer() :- Has_rivalry(\"Ahura Mazda\", \"Zeus\").\n.output Answer\n\n"]}
{"id": 1904, "answer": true, "completion": ".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Tata Hexa\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tata Hexa\", capacity), Has_n_members(\"Spice Girls\", n_members), capacity >= n_members.\n.output Answer\n\n", "completions": [".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Tata Hexa\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tata Hexa\", capacity), Has_n_members(\"Spice Girls\", n_members), capacity >= n_members.\n.output Answer\n\n"]}
{"id": 1905, "answer": false, "completion": ".decl Has_founder(University:symbol, Founder:symbol)\nHas_founder(\"University of Pittsburgh\", \"John Beatty\").\nHas_founder(\"University of Pittsburgh\", \"Hugh Henry Brackenridge\").\n.decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"John Beatty\", \"physician\").\nHas_occupation(\"Hugh Henry Brackenridge\", \"lawyer\").\nHas_occupation(\"Judith Sheindlin\", \"judge\").\n.decl Answer()\nAnswer() :- Has_founder(\"University of Pittsburgh\", founder), Has_occupation(founder, occupation), Has_occupation(\"Judith Sheindlin\", occupation).\n.output Answer\n\n", "completions": [".decl Has_founder(University:symbol, Founder:symbol)\nHas_founder(\"University of Pittsburgh\", \"John Beatty\").\nHas_founder(\"University of Pittsburgh\", \"Hugh Henry Brackenridge\").\n.decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"John Beatty\", \"physician\").\nHas_occupation(\"Hugh Henry Brackenridge\", \"lawyer\").\nHas_occupation(\"Judith Sheindlin\", \"judge\").\n.decl Answer()\nAnswer() :- Has_founder(\"University of Pittsburgh\", founder), Has_occupation(founder, occupation), Has_occupation(\"Judith Sheindlin\", occupation).\n.output Answer\n\n"]}
{"id": 1906, "answer": false, "completion": ".decl Has_n_wheels(Vehicle:symbol, N_wheels:float)\nHas_n_wheels(\"Toyota Supra\", 4).\n.decl Has_n_wheels(Vehicle:symbol, N_wheels:float)\nHas_n_wheels(\"vlog\", 0).\n.decl Answer()\nAnswer() :- Has_n_wheels(\"Toyota Supra\", n_wheels1), Has_n_wheels(\"vlog\", n_wheels2), n_wheels1 = n_wheels2.\n.output Answer\n\n", "completions": [".decl Has_n_wheels(Vehicle:symbol, N_wheels:float)\nHas_n_wheels(\"Toyota Supra\", 4).\n.decl Has_n_wheels(Vehicle:symbol, N_wheels:float)\nHas_n_wheels(\"vlog\", 0).\n.decl Answer()\nAnswer() :- Has_n_wheels(\"Toyota Supra\", n_wheels1), Has_n_wheels(\"vlog\", n_wheels2), n_wheels1 = n_wheels2.\n.output Answer\n\n"]}
{"id": 1907, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"grand master\", \"chess\").\nHas_skill(\"grand master\", \"French Defense\").\n.decl Answer()\nAnswer() :- Has_skill(\"grand master\", \"chess\"), Has_skill(\"grand master\", \"French Defense\").\n.output Answer\n\n", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"grand master\", \"chess\").\nHas_skill(\"grand master\", \"French Defense\").\n.decl Answer()\nAnswer() :- Has_skill(\"grand master\", \"chess\"), Has_skill(\"grand master\", \"French Defense\").\n.output Answer\n\n"]}
{"id": 1908, "answer": true, "completion": ".decl Has_relationship(Country:symbol, Person:symbol)\nHas_relationship(\"Canada\", \"Elizabeth II\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Canada\", \"Elizabeth II\").\n.output Answer\n\n", "completions": [".decl Has_relationship(Country:symbol, Person:symbol)\nHas_relationship(\"Canada\", \"Elizabeth II\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Canada\", \"Elizabeth II\").\n.output Answer\n\n"]}
{"id": 1909, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Pict\", \"Pictish\").\n.decl Is_older_than(Language1:symbol, Language2:symbol)\nIs_older_than(\"Old English\", \"English\").\n.decl Answer()\nAnswer() :- Speaks(\"Pict\", language1), Is_older_than(language1, \"English\").\n.output Answer\n\n\n", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Pict\", \"Pictish\").\n.decl Is_older_than(Language1:symbol, Language2:symbol)\nIs_older_than(\"Old English\", \"English\").\n.decl Answer()\nAnswer() :- Speaks(\"Pict\", language1), Is_older_than(language1, \"English\").\n.output Answer\n\n\n"]}
{"id": 1910, "answer": false, "completion": ".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Charlemagne\", \"Christianity\").\n.decl Has_bar_mitzvah(Religion:symbol)\nHas_bar_mitzvah(\"Judaism\").\n.decl Answer()\nAnswer() :- Has_religion(\"Charlemagne\", religion), Has_bar_mitzvah(religion).\n.output Answer\n\n", "completions": [".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Charlemagne\", \"Christianity\").\n.decl Has_bar_mitzvah(Religion:symbol)\nHas_bar_mitzvah(\"Judaism\").\n.decl Answer()\nAnswer() :- Has_religion(\"Charlemagne\", religion), Has_bar_mitzvah(religion).\n.output Answer\n\n"]}
{"id": 1911, "answer": false, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Garfield\", \"lasagna\").\n.decl Is_food_for(Food:symbol, Animal:symbol)\nIs_food_for(\"canid food\", \"canid\").\n.decl Is_a(Animal:symbol, Animal_type:symbol)\nIs_a(\"canid\", \"mammal\").\n.decl Answer()\nAnswer() :- Likes(\"Garfield\", food), Is_food_for(food, animal), Is_a(animal, \"mammal\").\n.output Answer\n\n", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Garfield\", \"lasagna\").\n.decl Is_food_for(Food:symbol, Animal:symbol)\nIs_food_for(\"canid food\", \"canid\").\n.decl Is_a(Animal:symbol, Animal_type:symbol)\nIs_a(\"canid\", \"mammal\").\n.decl Answer()\nAnswer() :- Likes(\"Garfield\", food), Is_food_for(food, animal), Is_a(animal, \"mammal\").\n.output Answer\n\n"]}
{"id": 1912, "answer": false, "completion": ".decl Has_thickness(Object:symbol, Thickness:float)\nHas_thickness(\"armadillo armor\", 0.1).\n.decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"bullet\", 300).\n.decl Answer()\nAnswer() :- Has_thickness(\"armadillo armor\", thickness), Has_speed(\"bullet\", speed), thickness * speed > 100.\n.output Answer\n\n\n", "completions": [".decl Has_thickness(Object:symbol, Thickness:float)\nHas_thickness(\"armadillo armor\", 0.1).\n.decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"bullet\", 300).\n.decl Answer()\nAnswer() :- Has_thickness(\"armadillo armor\", thickness), Has_speed(\"bullet\", speed), thickness * speed > 100.\n.output Answer\n\n\n"]}
{"id": 1913, "answer": false, "completion": ".decl Has_country_of_origin(Food:symbol, Country:symbol)\nHas_country_of_origin(\"meatballs\", \"Sweden\").\n.decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"restaurant\", \"meatballs\").\n.decl Answer()\nAnswer() :- Serves(\"restaurant\", \"meatballs\"), Has_country_of_origin(\"meatballs\", country), country != \"Sweden\".\n.output Answer\n\n", "completions": [".decl Has_country_of_origin(Food:symbol, Country:symbol)\nHas_country_of_origin(\"meatballs\", \"Sweden\").\n.decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"restaurant\", \"meatballs\").\n.decl Answer()\nAnswer() :- Serves(\"restaurant\", \"meatballs\"), Has_country_of_origin(\"meatballs\", country), country != \"Sweden\".\n.output Answer\n\n"]}
{"id": 1914, "answer": false, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"torso\", \"ribs\").\nHas_part(\"torso\", \"spine\").\nHas_part(\"torso\", \"pelvis\").\nHas_part(\"torso\", \"skull\").\nHas_part(\"torso\", \"shoulder\").\nHas_part(\"torso\", \"hip\").\nHas_part(\"torso\", \"arm\").\nHas_part(\"torso\", \"leg\").\nHas_part(\"torso\", \"hand\").\nHas_part(\"torso\", \"foot\").\nHas_part(\"torso\", \"finger\").\nHas_part(\"torso\", \"toe\").\nHas_part(\"torso\", \"rib\").\nHas_part(\"torso\", \"vertebra\").\nHas_part(\"torso\", \"pelvic bone\").\nHas_part(\"torso\", \"cranium\").\nHas_part(\"torso\", \"scapula\").\nHas_part(\"torso\", \"femur\").\nHas_part(\"torso\", \"humerus\").\nHas_part(\"torso\", \"tibia\").\nHas_part(\"torso\", \"fibula\").\nHas_part(\"torso\", \"phalanges\").\nHas_part(\"torso\", \"metatarsals\").\nHas_part(\"torso\", \"metacarpals\").\nHas_part(\"torso\", \"carpals\").\nHas_part(\"torso\", \"tarsals\").\nHas_part(\"torso\", \"sternum\").\nHas_part(\"torso\", \"clavicle\").\nHas_part(\"torso\", \"mandible\").\nHas_part(\"torso\", \"maxilla\").\nHas_part(\"torso\", \"nasal bone\").\nHas_part(\"torso\", \"zygomatic bone\").\nHas_part(\"torso\", \"lacrimal bone\").\nHas_part(\"torso\", \"palatine bone\").\nHas_part(\"torso\", \"vomer\").\nHas_part(\"torso\", \"inferior nasal concha\").\nHas_part(\"torso\", \"sphenoid bone\").\nHas_part(\"torso\", \"ethmoid bone\").\nHas_part(\"torso\", \"temporal bone\").\nHas_part(\"torso\", \"occipital bone\").\nHas_part(\"torso\", \"hyoid bone\").\nHas_part(\"torso\", \"cervical vertebrae\").\nHas_part(\"torso\", \"thoracic vertebrae\").\nHas_part(\"torso\", \"lumbar vertebrae\").\nHas_part(\"torso\", \"sacrum\").\nHas_part(\"torso\", \"coccyx\").\nHas_part(\"torso\", \"ilium\").\nHas_part(\"torso\", \"ischium\").\nHas_part(\"torso\", \"pubis\").\nHas_part(\"torso\", \"sacroiliac joint\").\nHas_part(\"torso\", \"sacroiliac ligament\").\nHas_part(\"torso\", \"sacrospinous ligament\").\nHas_part(\"torso\", \"sacrotuberous ligament\").\nHas_part(\"torso\", \"pubic symphysis\").\nHas_part(\"torso\", \"pubic tubercle\").\nHas_part(\"torso\", \"pubic crest\").\nHas_part(\"torso\", \"pubic arch\").\nHas_part(\"torso\", \"pubic ramus\").\nHas_part(\"torso\", \"ischial spine\").\nHas_part(\"torso\", \"", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"torso\", \"ribs\").\nHas_part(\"torso\", \"spine\").\nHas_part(\"torso\", \"pelvis\").\nHas_part(\"torso\", \"skull\").\nHas_part(\"torso\", \"shoulder\").\nHas_part(\"torso\", \"hip\").\nHas_part(\"torso\", \"arm\").\nHas_part(\"torso\", \"leg\").\nHas_part(\"torso\", \"hand\").\nHas_part(\"torso\", \"foot\").\nHas_part(\"torso\", \"finger\").\nHas_part(\"torso\", \"toe\").\nHas_part(\"torso\", \"rib\").\nHas_part(\"torso\", \"vertebra\").\nHas_part(\"torso\", \"pelvic bone\").\nHas_part(\"torso\", \"cranium\").\nHas_part(\"torso\", \"scapula\").\nHas_part(\"torso\", \"femur\").\nHas_part(\"torso\", \"humerus\").\nHas_part(\"torso\", \"tibia\").\nHas_part(\"torso\", \"fibula\").\nHas_part(\"torso\", \"phalanges\").\nHas_part(\"torso\", \"metatarsals\").\nHas_part(\"torso\", \"metacarpals\").\nHas_part(\"torso\", \"carpals\").\nHas_part(\"torso\", \"tarsals\").\nHas_part(\"torso\", \"sternum\").\nHas_part(\"torso\", \"clavicle\").\nHas_part(\"torso\", \"mandible\").\nHas_part(\"torso\", \"maxilla\").\nHas_part(\"torso\", \"nasal bone\").\nHas_part(\"torso\", \"zygomatic bone\").\nHas_part(\"torso\", \"lacrimal bone\").\nHas_part(\"torso\", \"palatine bone\").\nHas_part(\"torso\", \"vomer\").\nHas_part(\"torso\", \"inferior nasal concha\").\nHas_part(\"torso\", \"sphenoid bone\").\nHas_part(\"torso\", \"ethmoid bone\").\nHas_part(\"torso\", \"temporal bone\").\nHas_part(\"torso\", \"occipital bone\").\nHas_part(\"torso\", \"hyoid bone\").\nHas_part(\"torso\", \"cervical vertebrae\").\nHas_part(\"torso\", \"thoracic vertebrae\").\nHas_part(\"torso\", \"lumbar vertebrae\").\nHas_part(\"torso\", \"sacrum\").\nHas_part(\"torso\", \"coccyx\").\nHas_part(\"torso\", \"ilium\").\nHas_part(\"torso\", \"ischium\").\nHas_part(\"torso\", \"pubis\").\nHas_part(\"torso\", \"sacroiliac joint\").\nHas_part(\"torso\", \"sacroiliac ligament\").\nHas_part(\"torso\", \"sacrospinous ligament\").\nHas_part(\"torso\", \"sacrotuberous ligament\").\nHas_part(\"torso\", \"pubic symphysis\").\nHas_part(\"torso\", \"pubic tubercle\").\nHas_part(\"torso\", \"pubic crest\").\nHas_part(\"torso\", \"pubic arch\").\nHas_part(\"torso\", \"pubic ramus\").\nHas_part(\"torso\", \"ischial spine\").\nHas_part(\"torso\", \""]}
{"id": 1915, "answer": true, "completion": ".decl Has_upload_speed(Internet_plan:symbol, Upload_speed:float)\nHas_upload_speed(\"Centurylink max internet plan\", 1000).\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"fortnight\", 14).\n.decl Answer()\nAnswer() :- Has_upload_speed(\"Centurylink max internet plan\", upload_speed), Last_n_days(\"fortnight\", n_days), upload_speed * n_days >= 1000.\n.output Answer\n\n", "completions": [".decl Has_upload_speed(Internet_plan:symbol, Upload_speed:float)\nHas_upload_speed(\"Centurylink max internet plan\", 1000).\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"fortnight\", 14).\n.decl Answer()\nAnswer() :- Has_upload_speed(\"Centurylink max internet plan\", upload_speed), Last_n_days(\"fortnight\", n_days), upload_speed * n_days >= 1000.\n.output Answer\n\n"]}
{"id": 1916, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Theodor Geisel\", \"green\").\n.decl Helps_become_famous(Thing:symbol)\nHelps_become_famous(\"color\").\n.decl Answer()\nAnswer() :- Has_color(\"Theodor Geisel\", color), Helps_become_famous(color).\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Theodor Geisel\", \"green\").\n.decl Helps_become_famous(Thing:symbol)\nHelps_become_famous(\"color\").\n.decl Answer()\nAnswer() :- Has_color(\"Theodor Geisel\", color), Helps_become_famous(color).\n.output Answer\n\n"]}
{"id": 1917, "answer": true, "completion": ".decl Located_on(Place:symbol, Landform:symbol)\nLocated_on(\"Central Park Zoo\", \"Manhattan\").\nLocated_on(\"Manhattan\", \"island\").\n.decl Answer()\nAnswer() :- Located_on(\"Central Park Zoo\", \"island\").\nAnswer() :- Located_on(\"Central Park Zoo\", place), Located_on(place, \"island\").\n.output Answer\n\n", "completions": [".decl Located_on(Place:symbol, Landform:symbol)\nLocated_on(\"Central Park Zoo\", \"Manhattan\").\nLocated_on(\"Manhattan\", \"island\").\n.decl Answer()\nAnswer() :- Located_on(\"Central Park Zoo\", \"island\").\nAnswer() :- Located_on(\"Central Park Zoo\", place), Located_on(place, \"island\").\n.output Answer\n\n"]}
{"id": 1918, "answer": false, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Brooke Shields\", \"Herpes simplex virus\").\n.decl Tells(Person_A:symbol, Person_B:symbol, Information:symbol)\nTells(\"Planned Parenthood\", \"University of Pennsylvania\", \"Brooke Shields has Herpes simplex virus\").\n.decl Answer()\nAnswer() :- Has_disease(\"Brooke Shields\", disease), Tells(\"Planned Parenthood\", \"University of Pennsylvania\", \"Brooke Shields has \" + disease).\n.output Answer\n\n", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Brooke Shields\", \"Herpes simplex virus\").\n.decl Tells(Person_A:symbol, Person_B:symbol, Information:symbol)\nTells(\"Planned Parenthood\", \"University of Pennsylvania\", \"Brooke Shields has Herpes simplex virus\").\n.decl Answer()\nAnswer() :- Has_disease(\"Brooke Shields\", disease), Tells(\"Planned Parenthood\", \"University of Pennsylvania\", \"Brooke Shields has \" + disease).\n.output Answer\n\n"]}
{"id": 1919, "answer": true, "completion": ".decl Has_capital(State:symbol, Capital:symbol)\nHas_capital(\"Guam\", \"Hagatna\").\n.decl Answer()\nAnswer() :- Has_capital(\"Guam\", capital).\n.output Answer\n\n", "completions": [".decl Has_capital(State:symbol, Capital:symbol)\nHas_capital(\"Guam\", \"Hagatna\").\n.decl Answer()\nAnswer() :- Has_capital(\"Guam\", capital).\n.output Answer\n\n"]}
{"id": 1920, "answer": false, "completion": ".decl Has_n_lines(Poem:symbol, N_lines:float)\nHas_n_lines(\"Jabberwocky\", 14).\n.decl Has_n_syllables(Line:symbol, N_syllables:float)\nHas_n_syllables(\"Twas brillig, and the slithy toves\", 10).\nHas_n_syllables(\"Did gyre and gimble in the wabe\", 8).\nHas_n_syllables(\"All mimsy were the borogoves\", 8).\nHas_n_syllables(\"And the mome raths outgrabe\", 8).\nHas_n_syllables(\"Beware the Jabberwock, my son!\", 10).\nHas_n_syllables(\"The jaws that bite, the claws that catch!\", 10).\nHas_n_syllables(\"Beware the Jubjub bird, and shun\", 10).\nHas_n_syllables(\"The frumious Bandersnatch!\", 10).\nHas_n_syllables(\"He took his vorpal sword in hand:\", 10).\nHas_n_syllables(\"Long time the manxome foe he sought--\", 10).\nHas_n_syllables(\"So rested he by the Tumtum tree,\", 10).\nHas_n_syllables(\"And stood awhile in thought.\", 8).\nHas_n_syllables(\"And, as in uffish thought he stood,\", 10).\nHas_n_syllables(\"The Jabberwock, with eyes of flame,\", 10).\nHas_n_syllables(\"Came whiffling through the tulgey wood,\", 10).\nHas_n_syllables(\"And burbled as it came!\", 8).\nHas_n_syllables(\"One, two! One, two! And through and through\", 10).\nHas_n_syllables(\"The vorpal blade went snicker-snack!\", 10).\nHas_n_syllables(\"He left it dead, and with its head\", 10).\nHas_n_syllables(\"He went galumphing back.\", 8).\nHas_n_syllables(\"And hast thou slain the Jabberwock?\", 10).\nHas_n_syllables(\"Come to my arms, my beamish boy!\", 10).\nHas_n_syllables(\"O frabjous day! Callooh! Callay!\", 10).\nHas_n_syllables(\"He chortled in his joy.\", 8).\nHas_n_syllables(\"Twas brillig, and the slithy toves\", 10).\nHas_n_syllables(\"Did gyre and gimble in the wabe;\", 10).\nHas_n_syllables(\"All mimsy were the borogoves,\", 10).\nHas_n_syllables(\"And the mome raths outgrabe.\", 8).\n.decl Answer()\nAnswer() :- Has_n_lines(\"Jabberwocky\", 14), Has_n_syllables(\"Twas brillig, and the slithy toves\", 10), Has_n_syllables(\"Did gyre and gimble in the wabe\", 8), Has_n_syllables(\"All mimsy were the borogoves\", 8), Has_n_syllables(\"And the mome raths outgrabe\", 8), Has_n_syllables(\"Beware the Jabberwock, my son!\", 10), Has_n_", "completions": [".decl Has_n_lines(Poem:symbol, N_lines:float)\nHas_n_lines(\"Jabberwocky\", 14).\n.decl Has_n_syllables(Line:symbol, N_syllables:float)\nHas_n_syllables(\"Twas brillig, and the slithy toves\", 10).\nHas_n_syllables(\"Did gyre and gimble in the wabe\", 8).\nHas_n_syllables(\"All mimsy were the borogoves\", 8).\nHas_n_syllables(\"And the mome raths outgrabe\", 8).\nHas_n_syllables(\"Beware the Jabberwock, my son!\", 10).\nHas_n_syllables(\"The jaws that bite, the claws that catch!\", 10).\nHas_n_syllables(\"Beware the Jubjub bird, and shun\", 10).\nHas_n_syllables(\"The frumious Bandersnatch!\", 10).\nHas_n_syllables(\"He took his vorpal sword in hand:\", 10).\nHas_n_syllables(\"Long time the manxome foe he sought--\", 10).\nHas_n_syllables(\"So rested he by the Tumtum tree,\", 10).\nHas_n_syllables(\"And stood awhile in thought.\", 8).\nHas_n_syllables(\"And, as in uffish thought he stood,\", 10).\nHas_n_syllables(\"The Jabberwock, with eyes of flame,\", 10).\nHas_n_syllables(\"Came whiffling through the tulgey wood,\", 10).\nHas_n_syllables(\"And burbled as it came!\", 8).\nHas_n_syllables(\"One, two! One, two! And through and through\", 10).\nHas_n_syllables(\"The vorpal blade went snicker-snack!\", 10).\nHas_n_syllables(\"He left it dead, and with its head\", 10).\nHas_n_syllables(\"He went galumphing back.\", 8).\nHas_n_syllables(\"And hast thou slain the Jabberwock?\", 10).\nHas_n_syllables(\"Come to my arms, my beamish boy!\", 10).\nHas_n_syllables(\"O frabjous day! Callooh! Callay!\", 10).\nHas_n_syllables(\"He chortled in his joy.\", 8).\nHas_n_syllables(\"Twas brillig, and the slithy toves\", 10).\nHas_n_syllables(\"Did gyre and gimble in the wabe;\", 10).\nHas_n_syllables(\"All mimsy were the borogoves,\", 10).\nHas_n_syllables(\"And the mome raths outgrabe.\", 8).\n.decl Answer()\nAnswer() :- Has_n_lines(\"Jabberwocky\", 14), Has_n_syllables(\"Twas brillig, and the slithy toves\", 10), Has_n_syllables(\"Did gyre and gimble in the wabe\", 8), Has_n_syllables(\"All mimsy were the borogoves\", 8), Has_n_syllables(\"And the mome raths outgrabe\", 8), Has_n_syllables(\"Beware the Jabberwock, my son!\", 10), Has_n_"]}
{"id": 1921, "answer": false, "completion": ".decl Passes_through(Person:symbol, Place:symbol)\nPasses_through(\"Dante\", \"circle of lust\").\nPasses_through(\"Dante\", \"circle of gluttony\").\nPasses_through(\"Dante\", \"circle of greed\").\nPasses_through(\"Dante\", \"circle of anger\").\nPasses_through(\"Dante\", \"circle of heresy\").\nPasses_through(\"Dante\", \"circle of violence\").\nPasses_through(\"Dante\", \"circle of fraud\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"D", "completions": [".decl Passes_through(Person:symbol, Place:symbol)\nPasses_through(\"Dante\", \"circle of lust\").\nPasses_through(\"Dante\", \"circle of gluttony\").\nPasses_through(\"Dante\", \"circle of greed\").\nPasses_through(\"Dante\", \"circle of anger\").\nPasses_through(\"Dante\", \"circle of heresy\").\nPasses_through(\"Dante\", \"circle of violence\").\nPasses_through(\"Dante\", \"circle of fraud\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"Dante\", \"circle of treachery\").\nPasses_through(\"D"]}
{"id": 1922, "answer": true, "completion": ".decl Has_speed(Event:symbol, Speed:float)\nHas_speed(\"explosion at a gunpowder storage facility\", 0.5).\nHas_speed(\"supersonic shock wave\", 1.5).\n.decl Answer()\nAnswer() :- Has_speed(\"explosion at a gunpowder storage facility\", speed1), Has_speed(\"supersonic shock wave\", speed2), speed1 < speed2.\n.output Answer\n\n", "completions": [".decl Has_speed(Event:symbol, Speed:float)\nHas_speed(\"explosion at a gunpowder storage facility\", 0.5).\nHas_speed(\"supersonic shock wave\", 1.5).\n.decl Answer()\nAnswer() :- Has_speed(\"explosion at a gunpowder storage facility\", speed1), Has_speed(\"supersonic shock wave\", speed2), speed1 < speed2.\n.output Answer\n\n"]}
{"id": 1923, "answer": false, "completion": ".decl Happens_at_time(Event:symbol, Time:symbol)\nHappens_at_time(\"New Years Eve\", \"midnight\").\nHappens_at_time(\"New Years Eve\", \"noon\").\nHappens_at_time(\"New Years Eve\", \"morning\").\nHappens_at_time(\"New Years Eve\", \"afternoon\").\nHappens_at_time(\"New Years Eve\", \"evening\").\nHappens_at_time(\"New Years Eve\", \"night\").\nHappens_at_time(\"New Years Eve\", \"dawn\").\nHappens_at_time(\"New Years Eve\", \"dusk\").\nHappens_at_time(\"New Years Eve\", \"twilight\").\nHappens_at_time(\"New Years Eve\", \"sunrise\").\nHappens_at_time(\"New Years Eve\", \"sunset\").\nHappens_at_time(\"New Years Eve\", \"day\").\nHappens_at_time(\"New Years Eve\", \"daytime\").\nHappens_at_time(\"New Years Eve\", \"nighttime\").\nHappens_at_time(\"New Years Eve\", \"daylight\").\nHappens_at_time(\"New Years Eve\", \"darkness\").\nHappens_at_time(\"New Years Eve\", \"daybreak\").\nHappens_at_time(\"New Years Eve\", \"nightfall\").\nHappens_at_time(\"New Years Eve\", \"crepuscule\").\nHappens_at_time(\"New Years Eve\", \"crepuscular\").\nHappens_at_time(\"New Years Eve\", \"crepuscularity\").\nHappens_at_time(\"New Years Eve\", \"crepusculum\").\nHappens_at_time(\"New Years Eve\", \"crepuscule\").\nHappens_at_time(\"New Years Eve\", \"crepuscular\").\nHappens_at_time(\"New Years Eve\", \"crepuscularity\").\nHappens_at_time(\"New Years Eve\", \"crepusculum\").\nHappens_at_time(\"New Years Eve\", \"crepuscule\").\nHappens_at_time(\"New Years Eve\", \"crepuscular\").\nHappens_at_time(\"New Years Eve\", \"crepuscularity\").\nHappens_at_time(\"New Years Eve\", \"crepusculum\").\nHappens_at_time(\"New Years Eve\", \"crepuscule\").\nHappens_at_time(\"New Years Eve\", \"crepuscular\").\nHappens_at_time(\"New Years Eve\", \"crepuscularity\").\nHappens_at_time(\"New Years Eve\", \"crepusculum\").\nHappens_at_time(\"New Years Eve\", \"crepuscule\").\nHappens_at_time(\"New Years Eve\", \"crepuscular\").\nHappens_at_time(\"New Years Eve\", \"crepuscularity\").\nHappens_at_time(\"New Years Eve\", \"crepusculum\").\nHappens_at_time(\"New Years Eve\", \"crepuscule\").\nHappens_at_time(\"New Years Eve\", \"crepuscular\").\nHappens_at_time(\"New Years Eve\", \"crepuscularity\").\nHappens_at_time(\"New Years Eve\", \"crepusculum\").\nHappens_at_time(\"New", "completions": [".decl Happens_at_time(Event:symbol, Time:symbol)\nHappens_at_time(\"New Years Eve\", \"midnight\").\nHappens_at_time(\"New Years Eve\", \"noon\").\nHappens_at_time(\"New Years Eve\", \"morning\").\nHappens_at_time(\"New Years Eve\", \"afternoon\").\nHappens_at_time(\"New Years Eve\", \"evening\").\nHappens_at_time(\"New Years Eve\", \"night\").\nHappens_at_time(\"New Years Eve\", \"dawn\").\nHappens_at_time(\"New Years Eve\", \"dusk\").\nHappens_at_time(\"New Years Eve\", \"twilight\").\nHappens_at_time(\"New Years Eve\", \"sunrise\").\nHappens_at_time(\"New Years Eve\", \"sunset\").\nHappens_at_time(\"New Years Eve\", \"day\").\nHappens_at_time(\"New Years Eve\", \"daytime\").\nHappens_at_time(\"New Years Eve\", \"nighttime\").\nHappens_at_time(\"New Years Eve\", \"daylight\").\nHappens_at_time(\"New Years Eve\", \"darkness\").\nHappens_at_time(\"New Years Eve\", \"daybreak\").\nHappens_at_time(\"New Years Eve\", \"nightfall\").\nHappens_at_time(\"New Years Eve\", \"crepuscule\").\nHappens_at_time(\"New Years Eve\", \"crepuscular\").\nHappens_at_time(\"New Years Eve\", \"crepuscularity\").\nHappens_at_time(\"New Years Eve\", \"crepusculum\").\nHappens_at_time(\"New Years Eve\", \"crepuscule\").\nHappens_at_time(\"New Years Eve\", \"crepuscular\").\nHappens_at_time(\"New Years Eve\", \"crepuscularity\").\nHappens_at_time(\"New Years Eve\", \"crepusculum\").\nHappens_at_time(\"New Years Eve\", \"crepuscule\").\nHappens_at_time(\"New Years Eve\", \"crepuscular\").\nHappens_at_time(\"New Years Eve\", \"crepuscularity\").\nHappens_at_time(\"New Years Eve\", \"crepusculum\").\nHappens_at_time(\"New Years Eve\", \"crepuscule\").\nHappens_at_time(\"New Years Eve\", \"crepuscular\").\nHappens_at_time(\"New Years Eve\", \"crepuscularity\").\nHappens_at_time(\"New Years Eve\", \"crepusculum\").\nHappens_at_time(\"New Years Eve\", \"crepuscule\").\nHappens_at_time(\"New Years Eve\", \"crepuscular\").\nHappens_at_time(\"New Years Eve\", \"crepuscularity\").\nHappens_at_time(\"New Years Eve\", \"crepusculum\").\nHappens_at_time(\"New Years Eve\", \"crepuscule\").\nHappens_at_time(\"New Years Eve\", \"crepuscular\").\nHappens_at_time(\"New Years Eve\", \"crepuscularity\").\nHappens_at_time(\"New Years Eve\", \"crepusculum\").\nHappens_at_time(\"New"]}
{"id": 1924, "answer": false, "completion": ".decl Is_needed_for(Profession:symbol, Event:symbol)\nIs_needed_for(\"railroad engineer\", \"railroad construction\").\nIs_needed_for(\"railroad engineer\", \"railroad maintenance\").\n.decl Is_part_of(Event:symbol, Event_group:symbol)\nIs_part_of(\"NASCAR events\", \"NASCAR\").\nIs_part_of(\"railroad construction\", \"railroad maintenance\").\n.decl Answer()\nAnswer() :- Is_needed_for(\"railroad engineer\", event), Is_part_of(event, \"NASCAR\").\n.output Answer\n\n", "completions": [".decl Is_needed_for(Profession:symbol, Event:symbol)\nIs_needed_for(\"railroad engineer\", \"railroad construction\").\nIs_needed_for(\"railroad engineer\", \"railroad maintenance\").\n.decl Is_part_of(Event:symbol, Event_group:symbol)\nIs_part_of(\"NASCAR events\", \"NASCAR\").\nIs_part_of(\"railroad construction\", \"railroad maintenance\").\n.decl Answer()\nAnswer() :- Is_needed_for(\"railroad engineer\", event), Is_part_of(event, \"NASCAR\").\n.output Answer\n\n"]}
{"id": 1925, "answer": true, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"human\", \"beard\").\nHas_part(\"tree\", \"moss\").\n.decl Answer()\nAnswer() :- Has_part(\"human\", \"beard\"), Has_part(\"tree\", \"moss\").\n.output Answer\n\n", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"human\", \"beard\").\nHas_part(\"tree\", \"moss\").\n.decl Answer()\nAnswer() :- Has_part(\"human\", \"beard\"), Has_part(\"tree\", \"moss\").\n.output Answer\n\n"]}
{"id": 1926, "answer": true, "completion": ".decl Causes(Agent:symbol, Patient:symbol)\nCauses(\"lemon\", \"dyspepsia\").\n.decl Answer()\nAnswer() :- Causes(\"lemon\", \"dyspepsia\").\n.output Answer\n\n", "completions": [".decl Causes(Agent:symbol, Patient:symbol)\nCauses(\"lemon\", \"dyspepsia\").\n.decl Answer()\nAnswer() :- Causes(\"lemon\", \"dyspepsia\").\n.output Answer\n\n"]}
{"id": 1927, "answer": false, "completion": ".decl Likes(Person:symbol, Music:symbol)\nLikes(\"Beethoven\", \"classical\").\n.decl Is_genre(Music:symbol, Genre:symbol)\nIs_genre(\"classical\", \"classical\").\nIs_genre(\"EDM\", \"EDM\").\n.decl Answer()\nAnswer() :- Likes(\"Beethoven\", music), Is_genre(music, genre), Is_genre(\"EDM\", genre).\n.output Answer\n\n", "completions": [".decl Likes(Person:symbol, Music:symbol)\nLikes(\"Beethoven\", \"classical\").\n.decl Is_genre(Music:symbol, Genre:symbol)\nIs_genre(\"classical\", \"classical\").\nIs_genre(\"EDM\", \"EDM\").\n.decl Answer()\nAnswer() :- Likes(\"Beethoven\", music), Is_genre(music, genre), Is_genre(\"EDM\", genre).\n.output Answer\n\n"]}
{"id": 1928, "answer": false, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"eggplant\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"aubergine\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinj", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"eggplant\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"aubergine\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinjal\").\n.decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"Solanum melongena\", \"brinj"]}
{"id": 1929, "answer": true, "completion": ".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"Woodrow Wilson\", \"Blacks are equal members of society\").\n.decl Answer()\nAnswer() :- Has_opinion(\"Woodrow Wilson\", \"Blacks are equal members of society\").\n.output Answer\n\n", "completions": [".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"Woodrow Wilson\", \"Blacks are equal members of society\").\n.decl Answer()\nAnswer() :- Has_opinion(\"Woodrow Wilson\", \"Blacks are equal members of society\").\n.output Answer\n\n"]}
{"id": 1930, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Krishna\", \"using the bow\").\n.decl Answer()\nAnswer() :- Has_skill(\"Krishna\", \"using the bow\").\n.output Answer\n\n", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Krishna\", \"using the bow\").\n.decl Answer()\nAnswer() :- Has_skill(\"Krishna\", \"using the bow\").\n.output Answer\n\n"]}
{"id": 1931, "answer": true, "completion": ".decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"snow leopard\", 50).\n.decl Eats_n_times_weight(Animal:symbol, N_times:float)\nEats_n_times_weight(\"snow leopard\", 2).\n.decl Answer()\nAnswer() :- Has_weight(\"snow leopard\", weight), Eats_n_times_weight(\"snow leopard\", n_times), weight * n_times > weight.\n.output Answer\n\n", "completions": [".decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"snow leopard\", 50).\n.decl Eats_n_times_weight(Animal:symbol, N_times:float)\nEats_n_times_weight(\"snow leopard\", 2).\n.decl Answer()\nAnswer() :- Has_weight(\"snow leopard\", weight), Eats_n_times_weight(\"snow leopard\", n_times), weight * n_times > weight.\n.output Answer\n\n"]}
{"id": 1932, "answer": true, "completion": ".decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"Charla Nash\", \"anxious\").\n.decl Is_near(Person:symbol, Animal:symbol)\nIs_near(\"Charla Nash\", \"gorilla\").\n.decl Answer()\nAnswer() :- Has_emotion(\"Charla Nash\", \"anxious\"), Is_near(\"Charla Nash\", \"gorilla\").\n.output Answer\n\n", "completions": [".decl Has_emotion(Person:symbol, Emotion:symbol)\nHas_emotion(\"Charla Nash\", \"anxious\").\n.decl Is_near(Person:symbol, Animal:symbol)\nIs_near(\"Charla Nash\", \"gorilla\").\n.decl Answer()\nAnswer() :- Has_emotion(\"Charla Nash\", \"anxious\"), Is_near(\"Charla Nash\", \"gorilla\").\n.output Answer\n\n"]}
{"id": 1933, "answer": true, "completion": ".decl Has_n_hands(Person:symbol, N_hands:float)\nHas_n_hands(\"guitarist\", 2).\n.decl Answer()\nAnswer() :- Has_n_hands(\"guitarist\", n_hands), n_hands >= 2.\n.output Answer\n\n", "completions": [".decl Has_n_hands(Person:symbol, N_hands:float)\nHas_n_hands(\"guitarist\", 2).\n.decl Answer()\nAnswer() :- Has_n_hands(\"guitarist\", n_hands), n_hands >= 2.\n.output Answer\n\n"]}
{"id": 1934, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"World War II\", \"1939-1945\").\nHappens_in_time(\"Al Pacino acted in a movie\", \"1939-1945\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Al Pacino acted in a movie\", time), Happens_in_time(\"World War II\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"World War II\", \"1939-1945\").\nHappens_in_time(\"Al Pacino acted in a movie\", \"1939-1945\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Al Pacino acted in a movie\", time), Happens_in_time(\"World War II\", time).\n.output Answer\n\n"]}
{"id": 1935, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"James Brown's ex-wives\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"James Brown's ex-wives\", n_members), n_members >= 4.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"James Brown's ex-wives\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"James Brown's ex-wives\", n_members), n_members >= 4.\n.output Answer\n\n"]}
{"id": 1936, "answer": true, "completion": ".decl Uses(Person:symbol, Object:symbol)\nUses(\"Robert De Niro\", \"microscope\").\n.decl Works_at(Person:symbol, Place:symbol)\nWorks_at(\"Robert De Niro\", \"movie set\").\n.decl Answer()\nAnswer() :- Uses(person, \"microscope\"), Works_at(person, \"movie set\").\n.output Answer\n\n", "completions": [".decl Uses(Person:symbol, Object:symbol)\nUses(\"Robert De Niro\", \"microscope\").\n.decl Works_at(Person:symbol, Place:symbol)\nWorks_at(\"Robert De Niro\", \"movie set\").\n.decl Answer()\nAnswer() :- Uses(person, \"microscope\"), Works_at(person, \"movie set\").\n.output Answer\n\n"]}
{"id": 1937, "answer": false, "completion": ".decl Believed_in(Person:symbol, Number:float)\nBelieved_in(\"Imams Reza Shah\", 12).\nBelieved_in(\"Jesus\", 12).\n.decl Answer()\nAnswer() :- Believed_in(\"Imams Reza Shah\", number1), Believed_in(\"Jesus\", number2), number1 > number2.\n.output Answer\n\n", "completions": [".decl Believed_in(Person:symbol, Number:float)\nBelieved_in(\"Imams Reza Shah\", 12).\nBelieved_in(\"Jesus\", 12).\n.decl Answer()\nAnswer() :- Believed_in(\"Imams Reza Shah\", number1), Believed_in(\"Jesus\", number2), number1 > number2.\n.output Answer\n\n"]}
{"id": 1938, "answer": true, "completion": ".decl Inhibits(Chemical:symbol, Process:symbol)\nInhibits(\"chlorine\", \"photosynthesis\").\n.decl Answer()\nAnswer() :- Inhibits(\"chlorine\", \"photosynthesis\").\n.output Answer\n\n", "completions": [".decl Inhibits(Chemical:symbol, Process:symbol)\nInhibits(\"chlorine\", \"photosynthesis\").\n.decl Answer()\nAnswer() :- Inhibits(\"chlorine\", \"photosynthesis\").\n.output Answer\n\n"]}
{"id": 1939, "answer": false, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"surfing\", \"Hawaii\").\nHappens_in_place(\"surfing\", \"California\").\nHappens_in_place(\"surfing\", \"Florida\").\n.decl Is_in(Place:symbol, State:symbol)\nIs_in(\"Des Moines\", \"Iowa\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"surfing\", place), Is_in(\"Des Moines\", state), place = state.\n.output Answer\n\n", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"surfing\", \"Hawaii\").\nHappens_in_place(\"surfing\", \"California\").\nHappens_in_place(\"surfing\", \"Florida\").\n.decl Is_in(Place:symbol, State:symbol)\nIs_in(\"Des Moines\", \"Iowa\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"surfing\", place), Is_in(\"Des Moines\", state), place = state.\n.output Answer\n\n"]}
{"id": 1940, "answer": true, "completion": ".decl Wins(Person_A:symbol, Person_B:symbol)\nWins(\"Sugar Ray Robinson\", \"Canelo Alvarez\").\n.decl Answer()\nAnswer() :- Wins(\"Sugar Ray Robinson\", \"Canelo Alvarez\").\n.output Answer\n\n", "completions": [".decl Wins(Person_A:symbol, Person_B:symbol)\nWins(\"Sugar Ray Robinson\", \"Canelo Alvarez\").\n.decl Answer()\nAnswer() :- Wins(\"Sugar Ray Robinson\", \"Canelo Alvarez\").\n.output Answer\n\n"]}
{"id": 1941, "answer": true, "completion": ".decl Happens_in_temperature(Event:symbol, Temperature:float)\nHappens_in_temperature(\"75 degree Fahrenheit day\", 75).\n.decl Happens_in_temperature_range(Event:symbol, Temperature_min:float, Temperature_max:float)\nHappens_in_temperature_range(\"Antarctic Peninsula\", -10, 10).\n.decl Answer()\nAnswer() :- Happens_in_temperature(\"75 degree Fahrenheit day\", temperature), Happens_in_temperature_range(\"Antarctic Peninsula\", temperature_min, temperature_max), temperature < temperature_min.\nAnswer() :- Happens_in_temperature(\"75 degree Fahrenheit day\", temperature), Happens_in_temperature_range(\"Antarctic Peninsula\", temperature_min, temperature_max), temperature > temperature_max.\n.output Answer\n\n", "completions": [".decl Happens_in_temperature(Event:symbol, Temperature:float)\nHappens_in_temperature(\"75 degree Fahrenheit day\", 75).\n.decl Happens_in_temperature_range(Event:symbol, Temperature_min:float, Temperature_max:float)\nHappens_in_temperature_range(\"Antarctic Peninsula\", -10, 10).\n.decl Answer()\nAnswer() :- Happens_in_temperature(\"75 degree Fahrenheit day\", temperature), Happens_in_temperature_range(\"Antarctic Peninsula\", temperature_min, temperature_max), temperature < temperature_min.\nAnswer() :- Happens_in_temperature(\"75 degree Fahrenheit day\", temperature), Happens_in_temperature_range(\"Antarctic Peninsula\", temperature_min, temperature_max), temperature > temperature_max.\n.output Answer\n\n"]}
{"id": 1942, "answer": true, "completion": ".decl Is_atheist(Person:symbol)\nIs_atheist(\"Richard Dawkins\").\n.decl Answer()\nAnswer() :- Is_atheist(\"Richard Dawkins\").\n.output Answer\n\n", "completions": [".decl Is_atheist(Person:symbol)\nIs_atheist(\"Richard Dawkins\").\n.decl Answer()\nAnswer() :- Is_atheist(\"Richard Dawkins\").\n.output Answer\n\n"]}
{"id": 1943, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Presidency of Richard Nixon\", 5).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"high school class\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"high school class\", n_years1), Last_n_years(\"Presidency of Richard Nixon\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Presidency of Richard Nixon\", 5).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"high school class\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"high school class\", n_years1), Last_n_years(\"Presidency of Richard Nixon\", n_years2), n_years1 <= n_years2.\n.output Answer\n\n"]}
{"id": 1944, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Disney Zorro\", 2).\n.decl Answer()\nAnswer() :- Has_n_members(\"Disney Zorro\", n_members), n_members > 1.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Disney Zorro\", 2).\n.decl Answer()\nAnswer() :- Has_n_members(\"Disney Zorro\", n_members), n_members > 1.\n.output Answer\n\n"]}
{"id": 1945, "answer": true, "completion": ".decl Has_profit(Book:symbol, Profit:float)\nHas_profit(\"The Hobbit\", 1).\nHas_profit(\"Constitution of the United States\", 0.5).\n.decl Answer()\nAnswer() :- Has_profit(\"The Hobbit\", profit1), Has_profit(\"Constitution of the United States\", profit2), profit1 > profit2.\n.output Answer\n\n", "completions": [".decl Has_profit(Book:symbol, Profit:float)\nHas_profit(\"The Hobbit\", 1).\nHas_profit(\"Constitution of the United States\", 0.5).\n.decl Answer()\nAnswer() :- Has_profit(\"The Hobbit\", profit1), Has_profit(\"Constitution of the United States\", profit2), profit1 > profit2.\n.output Answer\n\n"]}
{"id": 1946, "answer": true, "completion": ".decl Starred_in(Person:symbol, Show:symbol)\nStarred_in(\"Lucy Lawless\", \"Xena: Warrior Princess\").\nStarred_in(\"Lucy Lawless\", \"Battlestar Galactica\").\nStarred_in(\"Renee O'Connor\", \"Xena: Warrior Princess\").\nStarred_in(\"Renee O'Connor\", \"Hope & Faith\").\n.decl Answer()\nAnswer() :- Starred_in(person, \"Xena: Warrior Princess\"), Starred_in(person, show), show != \"Xena: Warrior Princess\".\n.output Answer\n\n", "completions": [".decl Starred_in(Person:symbol, Show:symbol)\nStarred_in(\"Lucy Lawless\", \"Xena: Warrior Princess\").\nStarred_in(\"Lucy Lawless\", \"Battlestar Galactica\").\nStarred_in(\"Renee O'Connor\", \"Xena: Warrior Princess\").\nStarred_in(\"Renee O'Connor\", \"Hope & Faith\").\n.decl Answer()\nAnswer() :- Starred_in(person, \"Xena: Warrior Princess\"), Starred_in(person, show), show != \"Xena: Warrior Princess\".\n.output Answer\n\n"]}
{"id": 1947, "answer": false, "completion": ".decl Can_do(Animal:symbol, Action:symbol)\nCan_do(\"crane\", \"fly\").\nCan_do(\"crane\", \"walk\").\nCan_do(\"crane\", \"swim\").\nCan_do(\"crane\", \"eat\").\nCan_do(\"crane\", \"drink\").\nCan_do(\"crane\", \"sleep\").\nCan_do(\"crane\", \"breathe\").\nCan_do(\"crane\", \"see\").\nCan_do(\"crane\", \"hear\").\nCan_do(\"crane\", \"smell\").\nCan_do(\"crane\", \"touch\").\nCan_do(\"crane\", \"think\").\nCan_do(\"crane\", \"feel\").\nCan_do(\"crane\", \"speak\").\nCan_do(\"crane\", \"sing\").\nCan_do(\"crane\", \"dance\").\nCan_do(\"crane\", \"jump\").\nCan_do(\"crane\", \"run\").\nCan_do(\"crane\", \"swim\").\nCan_do(\"crane\", \"climb\").\nCan_do(\"crane\", \"crawl\").\nCan_do(\"crane\", \"dig\").\nCan_do(\"crane\", \"fly\").\nCan_do(\"crane\", \"float\").\nCan_do(\"crane\", \"glide\").\nCan_do(\"crane\", \"hang\").\nCan_do(\"crane\", \"hover\").\nCan_do(\"crane\", \"jump\").\nCan_do(\"crane\", \"leap\").\nCan_do(\"crane\", \"move\").\nCan_do(\"crane\", \"paddle\").\nCan_do(\"crane\", \"pedal\").\nCan_do(\"crane\", \"run\").\nCan_do(\"crane\", \"sail\").\nCan_do(\"crane\", \"skate\").\nCan_do(\"crane\", \"ski\").\nCan_do(\"crane\", \"slide\").\nCan_do(\"crane\", \"swim\").\nCan_do(\"crane\", \"walk\").\nCan_do(\"crane\", \"wriggle\").\nCan_do(\"crane\", \"write\").\nCan_do(\"crane\", \"draw\").\nCan_do(\"crane\", \"paint\").\nCan_do(\"crane\", \"sculpt\").\nCan_do(\"crane\", \"carve\").\nCan_do(\"crane\", \"build\").\nCan_do(\"crane\", \"weave\").\nCan_do(\"crane\", \"sew\").\nCan_do(\"crane\", \"knit\").\nCan_do(\"crane\", \"cook\").\nCan_do(\"crane\", \"bake\").\nCan_do(\"crane\", \"fry\").\nCan_do(\"crane\", \"roast\").\nCan_do(\"crane\", \"grill\").\nCan_do(\"crane\", \"chop\").\nCan_do(\"crane\", \"peel\").\nCan_do(\"crane\", \"cut\").\nCan_do(\"crane\", \"dice\").\nCan_do(\"crane\", \"slice\").\nCan_do(\"crane\", \"stir\").\nCan_do(\"crane\", \"shake\").\nCan_do(\"crane\", \"stir-fry\").\nCan_do(\"crane\", \"bake\").\nCan_do(\"crane\", \"roast\").\nCan_do(\"crane\", \"grill\").\nCan_do(\"crane\", \"barbecue\").\nCan_do(\"crane\", \"boil\").\nCan_", "completions": [".decl Can_do(Animal:symbol, Action:symbol)\nCan_do(\"crane\", \"fly\").\nCan_do(\"crane\", \"walk\").\nCan_do(\"crane\", \"swim\").\nCan_do(\"crane\", \"eat\").\nCan_do(\"crane\", \"drink\").\nCan_do(\"crane\", \"sleep\").\nCan_do(\"crane\", \"breathe\").\nCan_do(\"crane\", \"see\").\nCan_do(\"crane\", \"hear\").\nCan_do(\"crane\", \"smell\").\nCan_do(\"crane\", \"touch\").\nCan_do(\"crane\", \"think\").\nCan_do(\"crane\", \"feel\").\nCan_do(\"crane\", \"speak\").\nCan_do(\"crane\", \"sing\").\nCan_do(\"crane\", \"dance\").\nCan_do(\"crane\", \"jump\").\nCan_do(\"crane\", \"run\").\nCan_do(\"crane\", \"swim\").\nCan_do(\"crane\", \"climb\").\nCan_do(\"crane\", \"crawl\").\nCan_do(\"crane\", \"dig\").\nCan_do(\"crane\", \"fly\").\nCan_do(\"crane\", \"float\").\nCan_do(\"crane\", \"glide\").\nCan_do(\"crane\", \"hang\").\nCan_do(\"crane\", \"hover\").\nCan_do(\"crane\", \"jump\").\nCan_do(\"crane\", \"leap\").\nCan_do(\"crane\", \"move\").\nCan_do(\"crane\", \"paddle\").\nCan_do(\"crane\", \"pedal\").\nCan_do(\"crane\", \"run\").\nCan_do(\"crane\", \"sail\").\nCan_do(\"crane\", \"skate\").\nCan_do(\"crane\", \"ski\").\nCan_do(\"crane\", \"slide\").\nCan_do(\"crane\", \"swim\").\nCan_do(\"crane\", \"walk\").\nCan_do(\"crane\", \"wriggle\").\nCan_do(\"crane\", \"write\").\nCan_do(\"crane\", \"draw\").\nCan_do(\"crane\", \"paint\").\nCan_do(\"crane\", \"sculpt\").\nCan_do(\"crane\", \"carve\").\nCan_do(\"crane\", \"build\").\nCan_do(\"crane\", \"weave\").\nCan_do(\"crane\", \"sew\").\nCan_do(\"crane\", \"knit\").\nCan_do(\"crane\", \"cook\").\nCan_do(\"crane\", \"bake\").\nCan_do(\"crane\", \"fry\").\nCan_do(\"crane\", \"roast\").\nCan_do(\"crane\", \"grill\").\nCan_do(\"crane\", \"chop\").\nCan_do(\"crane\", \"peel\").\nCan_do(\"crane\", \"cut\").\nCan_do(\"crane\", \"dice\").\nCan_do(\"crane\", \"slice\").\nCan_do(\"crane\", \"stir\").\nCan_do(\"crane\", \"shake\").\nCan_do(\"crane\", \"stir-fry\").\nCan_do(\"crane\", \"bake\").\nCan_do(\"crane\", \"roast\").\nCan_do(\"crane\", \"grill\").\nCan_do(\"crane\", \"barbecue\").\nCan_do(\"crane\", \"boil\").\nCan_"]}
{"id": 1948, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"black widow woman\", \"black\").\nHas_color(\"peaches\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_color(\"black widow woman\", color1), Has_color(\"peaches\", color2), color1 != color2.\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"black widow woman\", \"black\").\nHas_color(\"peaches\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_color(\"black widow woman\", color1), Has_color(\"peaches\", color2), color1 != color2.\n.output Answer\n\n"]}
{"id": 1949, "answer": true, "completion": ".decl Has_symptom(Disease:symbol, Symptom:symbol)\nHas_symptom(\"Anorexia Nervosa\", \"red legs\").\n.decl Indicates(Symptom:symbol, Health:symbol)\nIndicates(\"red legs\", \"failing health\").\n.decl Answer()\nAnswer() :- Has_symptom(\"Anorexia Nervosa\", symptom), Indicates(symptom, \"failing health\").\n.output Answer\n\n", "completions": [".decl Has_symptom(Disease:symbol, Symptom:symbol)\nHas_symptom(\"Anorexia Nervosa\", \"red legs\").\n.decl Indicates(Symptom:symbol, Health:symbol)\nIndicates(\"red legs\", \"failing health\").\n.decl Answer()\nAnswer() :- Has_symptom(\"Anorexia Nervosa\", symptom), Indicates(symptom, \"failing health\").\n.output Answer\n\n"]}
{"id": 1950, "answer": false, "completion": ".decl Has_grade(Student:symbol, Grade:float)\nHas_grade(\"students in earliest grade to take Iowa tests\", 1).\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"Nine Inch Nails\", 25).\n.decl Answer()\nAnswer() :- Has_grade(\"students in earliest grade to take Iowa tests\", grade), Has_age(\"Nine Inch Nails\", age), age <= grade.\n.output Answer\n\n", "completions": [".decl Has_grade(Student:symbol, Grade:float)\nHas_grade(\"students in earliest grade to take Iowa tests\", 1).\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"Nine Inch Nails\", 25).\n.decl Answer()\nAnswer() :- Has_grade(\"students in earliest grade to take Iowa tests\", grade), Has_age(\"Nine Inch Nails\", age), age <= grade.\n.output Answer\n\n"]}
{"id": 1951, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Nike shoebox\", 0.00001).\nHas_volume(\"swan\", 0.00002).\n.decl Answer()\nAnswer() :- Has_volume(\"Nike shoebox\", volume1), Has_volume(\"swan\", volume2), volume1 < volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Nike shoebox\", 0.00001).\nHas_volume(\"swan\", 0.00002).\n.decl Answer()\nAnswer() :- Has_volume(\"Nike shoebox\", volume1), Has_volume(\"swan\", volume2), volume1 < volume2.\n.output Answer\n\n"]}
{"id": 1952, "answer": true, "completion": ".decl Has_temperature(Animal:symbol, Temperature:symbol)\nHas_temperature(\"chinchilla\", \"cold-blooded\").\n.decl Answer()\nAnswer() :- Has_temperature(\"chinchilla\", \"cold-blooded\").\n.output Answer\n\n", "completions": [".decl Has_temperature(Animal:symbol, Temperature:symbol)\nHas_temperature(\"chinchilla\", \"cold-blooded\").\n.decl Answer()\nAnswer() :- Has_temperature(\"chinchilla\", \"cold-blooded\").\n.output Answer\n\n"]}
{"id": 1953, "answer": true, "completion": ".decl Has_protein(Food:symbol, Protein:float)\nHas_protein(\"elk burger\", 20).\nHas_protein(\"beef burger\", 15).\n.decl Answer()\nAnswer() :- Has_protein(\"elk burger\", protein1), Has_protein(\"beef burger\", protein2), protein1 > protein2.\n.output Answer\n\n", "completions": [".decl Has_protein(Food:symbol, Protein:float)\nHas_protein(\"elk burger\", 20).\nHas_protein(\"beef burger\", 15).\n.decl Answer()\nAnswer() :- Has_protein(\"elk burger\", protein1), Has_protein(\"beef burger\", protein2), protein1 > protein2.\n.output Answer\n\n"]}
{"id": 1954, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Aerosmith\", 5).\n.decl Has_n_seats(Car:symbol, N_seats:float)\nHas_n_seats(\"2020 Mitsubishi Outlander\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Aerosmith\", n_members), Has_n_seats(\"2020 Mitsubishi Outlander\", n_seats), n_members <= n_seats.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Aerosmith\", 5).\n.decl Has_n_seats(Car:symbol, N_seats:float)\nHas_n_seats(\"2020 Mitsubishi Outlander\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Aerosmith\", n_members), Has_n_seats(\"2020 Mitsubishi Outlander\", n_seats), n_members <= n_seats.\n.output Answer\n\n"]}
{"id": 1955, "answer": true, "completion": ".decl Has_been_represented(Organization:symbol, Place:symbol)\nHas_been_represented(\"Freemasonry\", \"Earth\").\n.decl Is_on(Place:symbol, Place2:symbol)\nIs_on(\"Earth\", \"Moon\").\n.decl Answer()\nAnswer() :- Has_been_represented(\"Freemasonry\", place1), Is_on(place1, \"Moon\").\n.output Answer\n\n", "completions": [".decl Has_been_represented(Organization:symbol, Place:symbol)\nHas_been_represented(\"Freemasonry\", \"Earth\").\n.decl Is_on(Place:symbol, Place2:symbol)\nIs_on(\"Earth\", \"Moon\").\n.decl Answer()\nAnswer() :- Has_been_represented(\"Freemasonry\", place1), Is_on(place1, \"Moon\").\n.output Answer\n\n"]}
{"id": 1956, "answer": false, "completion": ".decl Has_fur(Animal:symbol, Fur:symbol)\nHas_fur(\"Sphynx cat\", \"no\").\n.decl Answer()\nAnswer() :- Has_fur(\"Sphynx cat\", \"yes\").\n.output Answer\n\n", "completions": [".decl Has_fur(Animal:symbol, Fur:symbol)\nHas_fur(\"Sphynx cat\", \"no\").\n.decl Answer()\nAnswer() :- Has_fur(\"Sphynx cat\", \"yes\").\n.output Answer\n\n"]}
{"id": 1957, "answer": true, "completion": ".decl Needs(Animal_A:symbol, Animal_B:symbol)\nNeeds(\"stork\", \"golden toad\").\n.decl Answer()\nAnswer() :- Needs(\"stork\", \"golden toad\").\n.output Answer\n\n", "completions": [".decl Needs(Animal_A:symbol, Animal_B:symbol)\nNeeds(\"stork\", \"golden toad\").\n.decl Answer()\nAnswer() :- Needs(\"stork\", \"golden toad\").\n.output Answer\n\n"]}
{"id": 1958, "answer": true, "completion": ".decl Has_insurance(Person:symbol, Insurance:symbol)\nHas_insurance(\"person1\", \"insured\").\nHas_insurance(\"person2\", \"uninsured\").\n.decl Answer()\nAnswer() :- Has_insurance(\"person1\", \"insured\"), Has_insurance(\"person2\", \"uninsured\").\n.output Answer\n\n", "completions": [".decl Has_insurance(Person:symbol, Insurance:symbol)\nHas_insurance(\"person1\", \"insured\").\nHas_insurance(\"person2\", \"uninsured\").\n.decl Answer()\nAnswer() :- Has_insurance(\"person1\", \"insured\"), Has_insurance(\"person2\", \"uninsured\").\n.output Answer\n\n"]}
{"id": 1959, "answer": false, "completion": ".decl Has_n_legs(Animal:symbol, N_legs:float)\nHas_n_legs(\"spider wasp\", 6).\n.decl Answer()\nAnswer() :- Has_n_legs(\"spider wasp\", n_legs), n_legs = 8.\n.output Answer\n\n", "completions": [".decl Has_n_legs(Animal:symbol, N_legs:float)\nHas_n_legs(\"spider wasp\", 6).\n.decl Answer()\nAnswer() :- Has_n_legs(\"spider wasp\", n_legs), n_legs = 8.\n.output Answer\n\n"]}
{"id": 1960, "answer": true, "completion": ".decl Causes_death(Event:symbol)\nCauses_death(\"brake failure\").\n.decl Answer()\nAnswer() :- Causes_death(\"brake failure\").\n.output Answer\n\n", "completions": [".decl Causes_death(Event:symbol)\nCauses_death(\"brake failure\").\n.decl Answer()\nAnswer() :- Causes_death(\"brake failure\").\n.output Answer\n\n"]}
{"id": 1961, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Muslim\", \"McRib sandwich\").\n.decl Answer()\nAnswer() :- Eats(\"Muslim\", \"McRib sandwich\").\n.output Answer\n\n", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Muslim\", \"McRib sandwich\").\n.decl Answer()\nAnswer() :- Eats(\"Muslim\", \"McRib sandwich\").\n.output Answer\n\n"]}
{"id": 1962, "answer": true, "completion": ".decl Has_race(Person:symbol, Race:symbol)\nHas_race(\"Santa Claus\", \"white\").\nHas_race(\"Santa Claus\", \"black\").\nHas_race(\"Santa Claus\", \"asian\").\n.decl Answer()\nAnswer() :- Has_race(\"Santa Claus\", \"white\").\n.output Answer\n\n", "completions": [".decl Has_race(Person:symbol, Race:symbol)\nHas_race(\"Santa Claus\", \"white\").\nHas_race(\"Santa Claus\", \"black\").\nHas_race(\"Santa Claus\", \"asian\").\n.decl Answer()\nAnswer() :- Has_race(\"Santa Claus\", \"white\").\n.output Answer\n\n"]}
{"id": 1963, "answer": false, "completion": ".decl Knows_language(Person:symbol, Language:symbol)\nKnows_language(\"John\", \"English\").\n.decl Can_read(Person:symbol, Language:symbol)\nCan_read(\"John\", \"English\").\n.decl Answer()\nAnswer() :- Knows_language(person, \"English\"), Can_read(person, \"Kanji\").\n.output Answer\n\n", "completions": [".decl Knows_language(Person:symbol, Language:symbol)\nKnows_language(\"John\", \"English\").\n.decl Can_read(Person:symbol, Language:symbol)\nCan_read(\"John\", \"English\").\n.decl Answer()\nAnswer() :- Knows_language(person, \"English\"), Can_read(person, \"Kanji\").\n.output Answer\n\n"]}
{"id": 1964, "answer": true, "completion": ".decl Owns(Company:symbol, Location:symbol)\nOwns(\"Aldi\", \"United States\").\n.decl Answer()\nAnswer() :- Owns(company1, \"United States\"), Owns(company2, \"United States\"), company1 = company2.\n.output Answer\n\n", "completions": [".decl Owns(Company:symbol, Location:symbol)\nOwns(\"Aldi\", \"United States\").\n.decl Answer()\nAnswer() :- Owns(company1, \"United States\"), Owns(company2, \"United States\"), company1 = company2.\n.output Answer\n\n"]}
{"id": 1965, "answer": true, "completion": ".decl Has_biblical_significance(Place:symbol)\nHas_biblical_significance(\"Red Sea\").\n.decl Answer()\nAnswer() :- Has_biblical_significance(\"Red Sea\").\n.output Answer\n\n", "completions": [".decl Has_biblical_significance(Place:symbol)\nHas_biblical_significance(\"Red Sea\").\n.decl Answer()\nAnswer() :- Has_biblical_significance(\"Red Sea\").\n.output Answer\n\n"]}
{"id": 1966, "answer": true, "completion": ".decl Has_n_shoes(Person:symbol, N_shoes:float)\nHas_n_shoes(\"octuplet\", 8).\n.decl Answer()\nAnswer() :- Has_n_shoes(\"octuplet\", n_shoes1), n_shoes1 > 4.\n.output Answer\n\n\n", "completions": [".decl Has_n_shoes(Person:symbol, N_shoes:float)\nHas_n_shoes(\"octuplet\", 8).\n.decl Answer()\nAnswer() :- Has_n_shoes(\"octuplet\", n_shoes1), n_shoes1 > 4.\n.output Answer\n\n\n"]}
{"id": 1967, "answer": false, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Pope John Paul I's reign\", 33).\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Phileas Fogg's around the world\", 80).\n.decl Answer()\nAnswer() :- Last_n_days(\"Pope John Paul I's reign\", n_days1), Last_n_days(\"Phileas Fogg's around the world\", n_days2), n_days1 < n_days2.\n.output Answer\n\n", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Pope John Paul I's reign\", 33).\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Phileas Fogg's around the world\", 80).\n.decl Answer()\nAnswer() :- Last_n_days(\"Pope John Paul I's reign\", n_days1), Last_n_days(\"Phileas Fogg's around the world\", n_days2), n_days1 < n_days2.\n.output Answer\n\n"]}
{"id": 1968, "answer": true, "completion": ".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"lettuce\", \"spontaneous abortion\").\n.decl Answer()\nAnswer() :- Causes(event, \"spontaneous abortion\").\n.output Answer\n\n", "completions": [".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"lettuce\", \"spontaneous abortion\").\n.decl Answer()\nAnswer() :- Causes(event, \"spontaneous abortion\").\n.output Answer\n\n"]}
{"id": 1969, "answer": false, "completion": ".decl Requires(Job:symbol, Resource:symbol)\nRequires(\"software engineer\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"software engineer\", \"electricity\"), !Requires(\"software engineer\", \"electricity\").\n.output Answer\n\n", "completions": [".decl Requires(Job:symbol, Resource:symbol)\nRequires(\"software engineer\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"software engineer\", \"electricity\"), !Requires(\"software engineer\", \"electricity\").\n.output Answer\n\n"]}
{"id": 1970, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"hyena\", \"human\").\nEats(\"human\", \"vegan\").\n.decl Answer()\nAnswer() :- Eats(animal, \"human\"), Eats(\"human\", \"vegan\").\n.output Answer\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"hyena\", \"human\").\nEats(\"human\", \"vegan\").\n.decl Answer()\nAnswer() :- Eats(animal, \"human\"), Eats(\"human\", \"vegan\").\n.output Answer\n\n"]}
{"id": 1971, "answer": true, "completion": ".decl Is_hazardous_to(Place:symbol, Animal:symbol)\nIs_hazardous_to(\"Sea World\", \"leopard seal\").\n.decl Answer()\nAnswer() :- Is_hazardous_to(\"Sea World\", \"leopard seal\").\n.output Answer\n\n", "completions": [".decl Is_hazardous_to(Place:symbol, Animal:symbol)\nIs_hazardous_to(\"Sea World\", \"leopard seal\").\n.decl Answer()\nAnswer() :- Is_hazardous_to(\"Sea World\", \"leopard seal\").\n.output Answer\n\n"]}
{"id": 1972, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Gray Whale\", 0.000001).\nHas_volume(\"above ground pool\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"Gray Whale\", volume1), Has_volume(\"above ground pool\", volume2), volume1 < volume2.\n.output Answer\n\n", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Gray Whale\", 0.000001).\nHas_volume(\"above ground pool\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"Gray Whale\", volume1), Has_volume(\"above ground pool\", volume2), volume1 < volume2.\n.output Answer\n\n"]}
{"id": 1973, "answer": false, "completion": ".decl Practices(Person:symbol, Activity:symbol)\nPractices(\"Julia Roberts\", \"acting\").\n.decl Is_a_type_of(Activity:symbol, Activity_type:symbol)\nIs_a_type_of(\"acting\", \"art\").\nIs_a_type_of(\"blast beats\", \"music\").\n.decl Answer()\nAnswer() :- Practices(\"Julia Roberts\", activity), Is_a_type_of(activity, \"music\").\n.output Answer\n\n", "completions": [".decl Practices(Person:symbol, Activity:symbol)\nPractices(\"Julia Roberts\", \"acting\").\n.decl Is_a_type_of(Activity:symbol, Activity_type:symbol)\nIs_a_type_of(\"acting\", \"art\").\nIs_a_type_of(\"blast beats\", \"music\").\n.decl Answer()\nAnswer() :- Practices(\"Julia Roberts\", activity), Is_a_type_of(activity, \"music\").\n.output Answer\n\n"]}
{"id": 1974, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"American Black Bear cub\", 0.5).\nHas_size(\"king size bed\", 1.5).\n.decl Answer()\nAnswer() :- Has_size(\"American Black Bear cub\", size1), Has_size(\"king size bed\", size2), size1 + size1 <= size2.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"American Black Bear cub\", 0.5).\nHas_size(\"king size bed\", 1.5).\n.decl Answer()\nAnswer() :- Has_size(\"American Black Bear cub\", size1), Has_size(\"king size bed\", size2), size1 + size1 <= size2.\n.output Answer\n\n"]}
{"id": 1975, "answer": true, "completion": ".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Mona Lisa\", \"Louvre\").\nIs_near(\"Louvre\", \"restaurant\").\n.decl Answer()\nAnswer() :- Is_near(\"Mona Lisa\", place1), Is_near(place1, \"restaurant\").\n.output Answer\n\n", "completions": [".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"Mona Lisa\", \"Louvre\").\nIs_near(\"Louvre\", \"restaurant\").\n.decl Answer()\nAnswer() :- Is_near(\"Mona Lisa\", place1), Is_near(place1, \"restaurant\").\n.output Answer\n\n"]}
{"id": 1976, "answer": true, "completion": ".decl Is_ingredient(Ingredient:symbol, Drink:symbol)\nIs_ingredient(\"kaffir lime\", \"White Russian\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"kaffir lime\", \"White Russian\").\n.output Answer\n\n", "completions": [".decl Is_ingredient(Ingredient:symbol, Drink:symbol)\nIs_ingredient(\"kaffir lime\", \"White Russian\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"kaffir lime\", \"White Russian\").\n.output Answer\n\n"]}
{"id": 1977, "answer": true, "completion": ".decl Has_screen_time(Character:symbol, Screen_time:float)\nHas_screen_time(\"war doctor\", 1).\nHas_screen_time(\"his successor\", 0.5).\n.decl Answer()\nAnswer() :- Has_screen_time(\"war doctor\", screen_time1), Has_screen_time(\"his successor\", screen_time2), screen_time1 > screen_time2.\n.output Answer\n\n", "completions": [".decl Has_screen_time(Character:symbol, Screen_time:float)\nHas_screen_time(\"war doctor\", 1).\nHas_screen_time(\"his successor\", 0.5).\n.decl Answer()\nAnswer() :- Has_screen_time(\"war doctor\", screen_time1), Has_screen_time(\"his successor\", screen_time2), screen_time1 > screen_time2.\n.output Answer\n\n"]}
{"id": 1978, "answer": true, "completion": ".decl Inspired_by(Group_A:symbol, Group_B:symbol)\nInspired_by(\"Spice Girls\", \"Little Mix\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Spice Girls\", \"Little Mix\").\n.output Answer\n\n", "completions": [".decl Inspired_by(Group_A:symbol, Group_B:symbol)\nInspired_by(\"Spice Girls\", \"Little Mix\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Spice Girls\", \"Little Mix\").\n.output Answer\n\n"]}
{"id": 1979, "answer": false, "completion": ".decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies", "completions": [".decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Flies"]}
{"id": 1980, "answer": false, "completion": ".decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Chuck Norris\", 1940).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"leap year\", n_years1), Happens_in_year(\"Chuck Norris\", year1), year1 + n_years1 + n_years1 + n_years1 + n_years1 >= 2020 + 90.\n.output Answer\n\n", "completions": [".decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Chuck Norris\", 1940).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"leap year\", n_years1), Happens_in_year(\"Chuck Norris\", year1), year1 + n_years1 + n_years1 + n_years1 + n_years1 >= 2020 + 90.\n.output Answer\n\n"]}
{"id": 1981, "answer": true, "completion": ".decl Is_allowed_in(Animal:symbol, Place:symbol)\nIs_allowed_in(\"German Shepherd\", \"airport\").\n.decl Answer()\nAnswer() :- Is_allowed_in(\"German Shepherd\", \"airport\").\n.output Answer\n\n", "completions": [".decl Is_allowed_in(Animal:symbol, Place:symbol)\nIs_allowed_in(\"German Shepherd\", \"airport\").\n.decl Answer()\nAnswer() :- Is_allowed_in(\"German Shepherd\", \"airport\").\n.output Answer\n\n"]}
{"id": 1982, "answer": false, "completion": ".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"foot\", \"imperial system\").\nIs_part_of(\"meter\", \"metric system\").\n.decl Answer()\nAnswer() :- Is_part_of(\"foot\", \"metric system\").\n.output Answer\n\n", "completions": [".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"foot\", \"imperial system\").\nIs_part_of(\"meter\", \"metric system\").\n.decl Answer()\nAnswer() :- Is_part_of(\"foot\", \"metric system\").\n.output Answer\n\n"]}
{"id": 1983, "answer": false, "completion": ".decl Has_n_subscribers(Channel:symbol, N_subscribers:float)\nHas_n_subscribers(\"Do It Yourself\", 1000000).\n.decl Has_n_views(Channel:symbol, N_views:float)\nHas_n_views(\"Do It Yourself\", 1000000).\n.decl Answer()\nAnswer() :- Has_n_subscribers(\"Do It Yourself\", n_subscribers), Has_n_views(\"Do It Yourself\", n_views), n_subscribers > n_views.\n.output Answer\n\n", "completions": [".decl Has_n_subscribers(Channel:symbol, N_subscribers:float)\nHas_n_subscribers(\"Do It Yourself\", 1000000).\n.decl Has_n_views(Channel:symbol, N_views:float)\nHas_n_views(\"Do It Yourself\", 1000000).\n.decl Answer()\nAnswer() :- Has_n_subscribers(\"Do It Yourself\", n_subscribers), Has_n_views(\"Do It Yourself\", n_views), n_subscribers > n_views.\n.output Answer\n\n"]}
{"id": 1984, "answer": false, "completion": ".decl Is_ingredient_of(Ingredient:symbol, Food:symbol)\nIs_ingredient_of(\"vegemite\", \"vegemite sandwich\").\nIs_ingredient_of(\"Atlantic cod\", \"fish and chips\").\n.decl Answer()\nAnswer() :- Is_ingredient_of(\"Atlantic cod\", \"vegemite sandwich\").\n.output Answer\n\n", "completions": [".decl Is_ingredient_of(Ingredient:symbol, Food:symbol)\nIs_ingredient_of(\"vegemite\", \"vegemite sandwich\").\nIs_ingredient_of(\"Atlantic cod\", \"fish and chips\").\n.decl Answer()\nAnswer() :- Is_ingredient_of(\"Atlantic cod\", \"vegemite sandwich\").\n.output Answer\n\n"]}
{"id": 1985, "answer": true, "completion": ".decl Is_helpful_for(Object:symbol, Event:symbol)\nIs_helpful_for(\"robes\", \"Macbeth\").\nIs_helpful_for(\"pointy hats\", \"Macbeth\").\n.decl Answer()\nAnswer() :- Is_helpful_for(\"robes\", \"Macbeth\"), Is_helpful_for(\"pointy hats\", \"Macbeth\").\n.output Answer\n\n", "completions": [".decl Is_helpful_for(Object:symbol, Event:symbol)\nIs_helpful_for(\"robes\", \"Macbeth\").\nIs_helpful_for(\"pointy hats\", \"Macbeth\").\n.decl Answer()\nAnswer() :- Is_helpful_for(\"robes\", \"Macbeth\"), Is_helpful_for(\"pointy hats\", \"Macbeth\").\n.output Answer\n\n"]}
{"id": 1986, "answer": false, "completion": ".decl Pursues(Person:symbol, Education:symbol)\nPursues(\"Emma Stone\", \"high school\").\nPursues(\"Emma Stone\", \"college\").\n.decl Answer()\nAnswer() :- Pursues(\"Emma Stone\", \"higher education\").\n.output Answer\n\n", "completions": [".decl Pursues(Person:symbol, Education:symbol)\nPursues(\"Emma Stone\", \"high school\").\nPursues(\"Emma Stone\", \"college\").\n.decl Answer()\nAnswer() :- Pursues(\"Emma Stone\", \"higher education\").\n.output Answer\n\n"]}
{"id": 1987, "answer": false, "completion": ".decl Has_face(Person:symbol, Face:symbol)\nHas_face(\"Bob Marley\", \"face\").\n.decl Sells(Shop:symbol, Item:symbol)\nSells(\"smoke shop\", \"Bob Marley's face\").\n.decl Answer()\nAnswer() :- Has_face(\"Bob Marley\", face), Sells(shop, face).\n.output Answer\n\n", "completions": [".decl Has_face(Person:symbol, Face:symbol)\nHas_face(\"Bob Marley\", \"face\").\n.decl Sells(Shop:symbol, Item:symbol)\nSells(\"smoke shop\", \"Bob Marley's face\").\n.decl Answer()\nAnswer() :- Has_face(\"Bob Marley\", face), Sells(shop, face).\n.output Answer\n\n"]}
{"id": 1988, "answer": false, "completion": ".decl Has_sense(Person:symbol, Sense:symbol)\nHas_sense(\"blind person\", \"hearing\").\nHas_sense(\"blind person\", \"touch\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"Big Ben\", \"sound\").\nHas_property(\"Big Ben\", \"shape\").\n.decl Answer()\nAnswer() :- Has_sense(\"blind person\", sense), Has_property(\"Big Ben\", property), sense = property.\n.output Answer\n\n", "completions": [".decl Has_sense(Person:symbol, Sense:symbol)\nHas_sense(\"blind person\", \"hearing\").\nHas_sense(\"blind person\", \"touch\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"Big Ben\", \"sound\").\nHas_property(\"Big Ben\", \"shape\").\n.decl Answer()\nAnswer() :- Has_sense(\"blind person\", sense), Has_property(\"Big Ben\", property), sense = property.\n.output Answer\n\n"]}
{"id": 1989, "answer": false, "completion": ".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Tiger Stadium\", 92000).\n.decl Has_n_people(Group:symbol, N_people:float)\nHas_n_people(\"unemployed people due to 1933 Great Depression\", 12000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tiger Stadium\", capacity), Has_n_people(\"unemployed people due to 1933 Great Depression\", n_people), capacity >= n_people.\n.output Answer\n\n\n", "completions": [".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Tiger Stadium\", 92000).\n.decl Has_n_people(Group:symbol, N_people:float)\nHas_n_people(\"unemployed people due to 1933 Great Depression\", 12000000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tiger Stadium\", capacity), Has_n_people(\"unemployed people due to 1933 Great Depression\", n_people), capacity >= n_people.\n.output Answer\n\n\n"]}
{"id": 1990, "answer": true, "completion": ".decl Writes_about(Person:symbol, Topic:symbol)\nWrites_about(\"Adam Mickiewicz\", \"Polish history\").\nWrites_about(\"Adam Mickiewicz\", \"sonnets\").\nWrites_about(\"Adam Mickiewicz\", \"Islamic religion\").\n.decl Answer()\nAnswer() :- Writes_about(\"Adam Mickiewicz\", \"sonnets\"), Writes_about(\"Adam Mickiewicz\", \"Islamic religion\").\n.output Answer\n\n\n", "completions": [".decl Writes_about(Person:symbol, Topic:symbol)\nWrites_about(\"Adam Mickiewicz\", \"Polish history\").\nWrites_about(\"Adam Mickiewicz\", \"sonnets\").\nWrites_about(\"Adam Mickiewicz\", \"Islamic religion\").\n.decl Answer()\nAnswer() :- Writes_about(\"Adam Mickiewicz\", \"sonnets\"), Writes_about(\"Adam Mickiewicz\", \"Islamic religion\").\n.output Answer\n\n\n"]}
{"id": 1991, "answer": true, "completion": ".decl Participates_in(Person:symbol, Event:symbol)\nParticipates_in(\"Barack Obama\", \"Reformation\").\n.decl Answer()\nAnswer() :- Participates_in(\"Barack Obama\", \"Reformation\").\n.output Answer\n\n", "completions": [".decl Participates_in(Person:symbol, Event:symbol)\nParticipates_in(\"Barack Obama\", \"Reformation\").\n.decl Answer()\nAnswer() :- Participates_in(\"Barack Obama\", \"Reformation\").\n.output Answer\n\n"]}
{"id": 1992, "answer": true, "completion": ".decl Is_based_on(Painting:symbol, Person:symbol)\nIs_based_on(\"Mona Lisa\", \"Lisa Gherardini\").\n.decl Answer()\nAnswer() :- Is_based_on(\"Mona Lisa\", person).\n.output Answer\n\n", "completions": [".decl Is_based_on(Painting:symbol, Person:symbol)\nIs_based_on(\"Mona Lisa\", \"Lisa Gherardini\").\n.decl Answer()\nAnswer() :- Is_based_on(\"Mona Lisa\", person).\n.output Answer\n\n"]}
{"id": 1993, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"model\", 1.8).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"model\", 50).\n.decl Has_bmi(Person:symbol, Bmi:float)\nHas_bmi(\"model\", bmi) :- Has_height(\"model\", height), Has_weight(\"model\", weight), bmi = weight / height^2.\n.decl Answer()\nAnswer() :- Has_bmi(\"model\", bmi), bmi < 18.5.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"model\", 1.8).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"model\", 50).\n.decl Has_bmi(Person:symbol, Bmi:float)\nHas_bmi(\"model\", bmi) :- Has_height(\"model\", height), Has_weight(\"model\", weight), bmi = weight / height^2.\n.decl Answer()\nAnswer() :- Has_bmi(\"model\", bmi), bmi < 18.5.\n.output Answer\n\n"]}
{"id": 1994, "answer": true, "completion": ".decl Has_shelf_space(Library:symbol, Shelf_space:float)\nHas_shelf_space(\"Library of Alexandria\", 100).\nHas_shelf_space(\"Library of Congress\", 200).\n.decl Answer()\nAnswer() :- Has_shelf_space(\"Library of Alexandria\", shelf_space1), Has_shelf_space(\"Library of Congress\", shelf_space2), shelf_space1 < shelf_space2.\n.output Answer\n\n", "completions": [".decl Has_shelf_space(Library:symbol, Shelf_space:float)\nHas_shelf_space(\"Library of Alexandria\", 100).\nHas_shelf_space(\"Library of Congress\", 200).\n.decl Answer()\nAnswer() :- Has_shelf_space(\"Library of Alexandria\", shelf_space1), Has_shelf_space(\"Library of Congress\", shelf_space2), shelf_space1 < shelf_space2.\n.output Answer\n\n"]}
{"id": 1995, "answer": true, "completion": ".decl Has_part(Creature:symbol, Part:symbol)\nHas_part(\"human\", \"tongue\").\nHas_part(\"human\", \"head\").\n.decl Answer()\nAnswer() :- Has_part(\"human\", \"tongue\"), Has_part(\"human\", \"head\").\n.output Answer\n\n", "completions": [".decl Has_part(Creature:symbol, Part:symbol)\nHas_part(\"human\", \"tongue\").\nHas_part(\"human\", \"head\").\n.decl Answer()\nAnswer() :- Has_part(\"human\", \"tongue\"), Has_part(\"human\", \"head\").\n.output Answer\n\n"]}
{"id": 1996, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"ancient visitor to Persia\", \"ancient times\").\nHappens_in_time(\"consume crocus threads\", \"ancient times\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"ancient visitor to Persia\", time), Happens_in_time(\"consume crocus threads\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"ancient visitor to Persia\", \"ancient times\").\nHappens_in_time(\"consume crocus threads\", \"ancient times\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"ancient visitor to Persia\", time), Happens_in_time(\"consume crocus threads\", time).\n.output Answer\n\n"]}
{"id": 1997, "answer": true, "completion": ".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"Durian\", \"bitter\").\nHas_taste(\"Durian\", \"sweet\").\nHas_taste(\"Durian\", \"sour\").\nHas_taste(\"Durian\", \"spicy\").\nHas_taste(\"Durian\", \"salty\").\n.decl Causes_feeling(Food:symbol, Feeling:symbol)\nCauses_feeling(\"Durian\", \"unwell\").\n.decl Answer()\nAnswer() :- Has_taste(\"Durian\", taste), Causes_feeling(\"Durian\", feeling), taste = \"bitter\" ; taste = \"sour\" ; taste = \"spicy\" ; taste = \"salty\".\n.output Answer\n\n", "completions": [".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"Durian\", \"bitter\").\nHas_taste(\"Durian\", \"sweet\").\nHas_taste(\"Durian\", \"sour\").\nHas_taste(\"Durian\", \"spicy\").\nHas_taste(\"Durian\", \"salty\").\n.decl Causes_feeling(Food:symbol, Feeling:symbol)\nCauses_feeling(\"Durian\", \"unwell\").\n.decl Answer()\nAnswer() :- Has_taste(\"Durian\", taste), Causes_feeling(\"Durian\", feeling), taste = \"bitter\" ; taste = \"sour\" ; taste = \"spicy\" ; taste = \"salty\".\n.output Answer\n\n"]}
{"id": 1998, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Hundred Years' War\", 116).\n.decl Answer()\nAnswer() :- Last_n_years(\"Hundred Years' War\", n_years), n_years != 100.\n.output Answer\n\n\n", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Hundred Years' War\", 116).\n.decl Answer()\nAnswer() :- Last_n_years(\"Hundred Years' War\", n_years), n_years != 100.\n.output Answer\n\n\n"]}
{"id": 1999, "answer": false, "completion": ".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"kale\", \"calcium\").\nHas_nutrient(\"spinach\", \"calcium\").\n.decl Is_beneficial_for(Nutrient:symbol, Body_function:symbol)\nIs_beneficial_for(\"calcium\", \"bone growth\").\n.decl Answer()\nAnswer() :- Has_nutrient(\"kale\", nutrient1), Has_nutrient(\"spinach\", nutrient2), Is_beneficial_for(nutrient1, \"bone growth\"), Is_beneficial_for(nutrient2, \"bone growth\"), nutrient1 != nutrient2.\n.output Answer\n\n", "completions": [".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"kale\", \"calcium\").\nHas_nutrient(\"spinach\", \"calcium\").\n.decl Is_beneficial_for(Nutrient:symbol, Body_function:symbol)\nIs_beneficial_for(\"calcium\", \"bone growth\").\n.decl Answer()\nAnswer() :- Has_nutrient(\"kale\", nutrient1), Has_nutrient(\"spinach\", nutrient2), Is_beneficial_for(nutrient1, \"bone growth\"), Is_beneficial_for(nutrient2, \"bone growth\"), nutrient1 != nutrient2.\n.output Answer\n\n"]}
{"id": 2000, "answer": true, "completion": ".decl Causes(Event:symbol, Event2:symbol)\nCauses(\"hunger\", \"imprisonment\").\n.decl Happens_to(Event:symbol, Person:symbol)\nHappens_to(\"imprisonment\", \"Jean Valjean\").\n.decl Answer()\nAnswer() :- Causes(event, \"imprisonment\"), Happens_to(\"imprisonment\", \"Jean Valjean\").\n.output Answer\n\n", "completions": [".decl Causes(Event:symbol, Event2:symbol)\nCauses(\"hunger\", \"imprisonment\").\n.decl Happens_to(Event:symbol, Person:symbol)\nHappens_to(\"imprisonment\", \"Jean Valjean\").\n.decl Answer()\nAnswer() :- Causes(event, \"imprisonment\"), Happens_to(\"imprisonment\", \"Jean Valjean\").\n.output Answer\n\n"]}
{"id": 2001, "answer": true, "completion": ".decl Is_about(Musical:symbol, Topic:symbol)\nIs_about(\"The Rocky Horror Show\", \"sweet transvestite from Transexual, Transylvania\").\n.decl Is_type(Musical:symbol, Type:symbol)\nIs_type(\"The Rocky Horror Show\", \"jukebox musical\").\n.decl Answer()\nAnswer() :- Is_about(musical, \"sweet transvestite from Transexual, Transylvania\"), Is_type(musical, \"jukebox musical\").\n.output Answer\n\n", "completions": [".decl Is_about(Musical:symbol, Topic:symbol)\nIs_about(\"The Rocky Horror Show\", \"sweet transvestite from Transexual, Transylvania\").\n.decl Is_type(Musical:symbol, Type:symbol)\nIs_type(\"The Rocky Horror Show\", \"jukebox musical\").\n.decl Answer()\nAnswer() :- Is_about(musical, \"sweet transvestite from Transexual, Transylvania\"), Is_type(musical, \"jukebox musical\").\n.output Answer\n\n"]}
{"id": 2002, "answer": true, "completion": ".decl Belongs_to(Land:symbol, Tribe:symbol)\nBelongs_to(\"Holy Land\", \"Adamu's tribe\").\n.decl Answer()\nAnswer() :- Belongs_to(\"Holy Land\", \"Adamu's tribe\").\n.output Answer\n\n", "completions": [".decl Belongs_to(Land:symbol, Tribe:symbol)\nBelongs_to(\"Holy Land\", \"Adamu's tribe\").\n.decl Answer()\nAnswer() :- Belongs_to(\"Holy Land\", \"Adamu's tribe\").\n.output Answer\n\n"]}
{"id": 2003, "answer": true, "completion": ".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"New England\", \"United States\").\nHas_location(\"Sainsbury's\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Has_location(\"New England\", location1), Has_location(\"Sainsbury's\", location2), location1 != location2.\n.output Answer\n\n", "completions": [".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"New England\", \"United States\").\nHas_location(\"Sainsbury's\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Has_location(\"New England\", location1), Has_location(\"Sainsbury's\", location2), location1 != location2.\n.output Answer\n\n"]}
{"id": 2004, "answer": true, "completion": ".decl Did(Person:symbol, Action:symbol, Year:float)\nDid(\"Mike Tyson\", \"bite\", 1997).\nDid(\"McGruff\", \"take a bite out of crime\", 1997).\n.decl Answer()\nAnswer() :- Did(\"Mike Tyson\", action1, 1997), Did(\"McGruff\", action2, 1997), action1 != action2.\n.output Answer\n\n", "completions": [".decl Did(Person:symbol, Action:symbol, Year:float)\nDid(\"Mike Tyson\", \"bite\", 1997).\nDid(\"McGruff\", \"take a bite out of crime\", 1997).\n.decl Answer()\nAnswer() :- Did(\"Mike Tyson\", action1, 1997), Did(\"McGruff\", action2, 1997), action1 != action2.\n.output Answer\n\n"]}
{"id": 2005, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Durian\", 1.2).\n.decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"Durian\", 3).\n.decl Answer()\nAnswer() :- Has_density(\"Durian\", density), Has_hardness(\"Durian\", hardness), density * hardness > 1.\n.output Answer\n\n", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Durian\", 1.2).\n.decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"Durian\", 3).\n.decl Answer()\nAnswer() :- Has_density(\"Durian\", density), Has_hardness(\"Durian\", hardness), density * hardness > 1.\n.output Answer\n\n"]}
{"id": 2006, "answer": true, "completion": ".decl Happens_when(Event:symbol, Condition:symbol)\nHappens_when(\"singing\", \"YMCA is mentioned\").\n.decl Answer()\nAnswer() :- Happens_when(\"singing\", \"YMCA is mentioned\").\n.output Answer\n\n", "completions": [".decl Happens_when(Event:symbol, Condition:symbol)\nHappens_when(\"singing\", \"YMCA is mentioned\").\n.decl Answer()\nAnswer() :- Happens_when(\"singing\", \"YMCA is mentioned\").\n.output Answer\n\n"]}
{"id": 2007, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Saltwater crocodile\", \"Australia\").\nLives_in(\"Saltwater crocodile\", \"Papua New Guinea\").\n.decl Answer()\nAnswer() :- Lives_in(\"Saltwater crocodile\", \"Memphis\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Saltwater crocodile\", \"Australia\").\nLives_in(\"Saltwater crocodile\", \"Papua New Guinea\").\n.decl Answer()\nAnswer() :- Lives_in(\"Saltwater crocodile\", \"Memphis\").\n.output Answer\n\n"]}
{"id": 2008, "answer": true, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"nails\").\nSells(\"Home Depot\", \"wood\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"nails\"), Sells(\"Home Depot\", \"wood\").\n.output Answer\n\n", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"nails\").\nSells(\"Home Depot\", \"wood\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"nails\"), Sells(\"Home Depot\", \"wood\").\n.output Answer\n\n"]}
{"id": 2009, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Shamu\", \"San Diego County\").\n.decl Answer()\nAnswer() :- Lives_in(\"Shamu\", \"San Diego County\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Shamu\", \"San Diego County\").\n.decl Answer()\nAnswer() :- Lives_in(\"Shamu\", \"San Diego County\").\n.output Answer\n\n"]}
{"id": 2010, "answer": false, "completion": ".decl Has_n_moves(Move:symbol, N_moves:float)\nHas_n_moves(\"French Defence\", 1).\nHas_n_moves(\"four move checkmate\", 4).\n.decl Answer()\nAnswer() :- Has_n_moves(\"French Defence\", n_moves1), Has_n_moves(\"four move checkmate\", n_moves2), n_moves1 >= n_moves2.\n.output Answer\n\n\n", "completions": [".decl Has_n_moves(Move:symbol, N_moves:float)\nHas_n_moves(\"French Defence\", 1).\nHas_n_moves(\"four move checkmate\", 4).\n.decl Answer()\nAnswer() :- Has_n_moves(\"French Defence\", n_moves1), Has_n_moves(\"four move checkmate\", n_moves2), n_moves1 >= n_moves2.\n.output Answer\n\n\n"]}
{"id": 2011, "answer": false, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"vegetarian\", \"vegetables\").\nEats(\"vegetarian\", \"fruits\").\nEats(\"vegetarian\", \"nuts\").\nEats(\"vegetarian\", \"grains\").\nEats(\"vegetarian\", \"legumes\").\nEats(\"vegetarian\", \"dairy\").\nEats(\"vegetarian\", \"eggs\").\nEats(\"vegetarian\", \"honey\").\nEats(\"vegetarian\", \"seaweed\").\nEats(\"vegetarian\", \"mushrooms\").\nEats(\"vegetarian\", \"yeast\").\nEats(\"vegetarian\", \"tofu\").\nEats(\"vegetarian\", \"soy\").\nEats(\"vegetarian\", \"tempeh\").\nEats(\"vegetarian\", \"quorn\").\nEats(\"vegetarian\", \"textured vegetable protein\").\nEats(\"vegetarian\", \"vegetable broth\").\nEats(\"vegetarian\", \"vegetable stock\").\nEats(\"vegetarian\", \"vegetable bouillon\").\nEats(\"vegetarian\", \"vegetable soup\").\nEats(\"vegetarian\", \"vegetable juice\").\nEats(\"vegetarian\", \"vegetable oil\").\nEats(\"vegetarian\", \"vegetable shortening\").\nEats(\"vegetarian\", \"vegetable margarine\").\nEats(\"vegetarian\", \"vegetable butter\").\nEats(\"vegetarian\", \"vegetable lard\").\nEats(\"vegetarian\", \"vegetable suet\").\nEats(\"vegetarian\", \"vegetable tallow\").\nEats(\"vegetarian\", \"vegetable drippings\").\nEats(\"vegetarian\", \"vegetable gravy\").\nEats(\"vegetarian\", \"vegetable sauce\").\nEats(\"vegetarian\", \"vegetable seasoning\").\nEats(\"vegetarian\", \"vegetable seasoning salt\").\nEats(\"vegetarian\", \"vegetable seasoning mix\").\nEats(\"vegetarian\", \"vegetable seasoning blend\").\nEats(\"vegetarian\", \"vegetable seasoning packet\").\nEats(\"vegetarian\", \"vegetable seasoning cubes\").\nEats(\"vegetarian\", \"vegetable seasoning powder\").\nEats(\"vegetarian\", \"vegetable seasoning paste\").\nEats(\"vegetarian\", \"vegetable seasoning sauce\").\nEats(\"vegetarian\", \"vegetable seasoning liquid\").\nEats(\"vegetarian\", \"vegetable seasoning cubes\").\nEats(\"vegetarian\", \"vegetable seasoning granules\").\nEats(\"vegetarian\", \"vegetable seasoning granulated\").\nEats(\"vegetarian\", \"vegetable seasoning granules\").\nEats(\"vegetarian\", \"vegetable seasoning granulated\").\nEats(\"vegetarian\", \"vegetable seasoning granules\").\nEats(\"vegetarian\", \"vegetable seasoning granulated\").\nEats(\"vegetarian\", \"vegetable seasoning granules\").\nEats(\"vegetarian\", \"vegetable seasoning granulated\").\nEats(\"vegetarian\", \"vegetable seasoning granules\").\nEats(\"vegetarian\", \"vegetable seasoning granulated\").\nEats(\"vegetarian\", \"vegetable seasoning granules\").\nEats(\"vegetarian\", \"vegetable seasoning granulated\").\nEats(\"vegetarian\", \"vegetable seasoning gran", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"vegetarian\", \"vegetables\").\nEats(\"vegetarian\", \"fruits\").\nEats(\"vegetarian\", \"nuts\").\nEats(\"vegetarian\", \"grains\").\nEats(\"vegetarian\", \"legumes\").\nEats(\"vegetarian\", \"dairy\").\nEats(\"vegetarian\", \"eggs\").\nEats(\"vegetarian\", \"honey\").\nEats(\"vegetarian\", \"seaweed\").\nEats(\"vegetarian\", \"mushrooms\").\nEats(\"vegetarian\", \"yeast\").\nEats(\"vegetarian\", \"tofu\").\nEats(\"vegetarian\", \"soy\").\nEats(\"vegetarian\", \"tempeh\").\nEats(\"vegetarian\", \"quorn\").\nEats(\"vegetarian\", \"textured vegetable protein\").\nEats(\"vegetarian\", \"vegetable broth\").\nEats(\"vegetarian\", \"vegetable stock\").\nEats(\"vegetarian\", \"vegetable bouillon\").\nEats(\"vegetarian\", \"vegetable soup\").\nEats(\"vegetarian\", \"vegetable juice\").\nEats(\"vegetarian\", \"vegetable oil\").\nEats(\"vegetarian\", \"vegetable shortening\").\nEats(\"vegetarian\", \"vegetable margarine\").\nEats(\"vegetarian\", \"vegetable butter\").\nEats(\"vegetarian\", \"vegetable lard\").\nEats(\"vegetarian\", \"vegetable suet\").\nEats(\"vegetarian\", \"vegetable tallow\").\nEats(\"vegetarian\", \"vegetable drippings\").\nEats(\"vegetarian\", \"vegetable gravy\").\nEats(\"vegetarian\", \"vegetable sauce\").\nEats(\"vegetarian\", \"vegetable seasoning\").\nEats(\"vegetarian\", \"vegetable seasoning salt\").\nEats(\"vegetarian\", \"vegetable seasoning mix\").\nEats(\"vegetarian\", \"vegetable seasoning blend\").\nEats(\"vegetarian\", \"vegetable seasoning packet\").\nEats(\"vegetarian\", \"vegetable seasoning cubes\").\nEats(\"vegetarian\", \"vegetable seasoning powder\").\nEats(\"vegetarian\", \"vegetable seasoning paste\").\nEats(\"vegetarian\", \"vegetable seasoning sauce\").\nEats(\"vegetarian\", \"vegetable seasoning liquid\").\nEats(\"vegetarian\", \"vegetable seasoning cubes\").\nEats(\"vegetarian\", \"vegetable seasoning granules\").\nEats(\"vegetarian\", \"vegetable seasoning granulated\").\nEats(\"vegetarian\", \"vegetable seasoning granules\").\nEats(\"vegetarian\", \"vegetable seasoning granulated\").\nEats(\"vegetarian\", \"vegetable seasoning granules\").\nEats(\"vegetarian\", \"vegetable seasoning granulated\").\nEats(\"vegetarian\", \"vegetable seasoning granules\").\nEats(\"vegetarian\", \"vegetable seasoning granulated\").\nEats(\"vegetarian\", \"vegetable seasoning granules\").\nEats(\"vegetarian\", \"vegetable seasoning granulated\").\nEats(\"vegetarian\", \"vegetable seasoning granules\").\nEats(\"vegetarian\", \"vegetable seasoning granulated\").\nEats(\"vegetarian\", \"vegetable seasoning gran"]}
{"id": 2012, "answer": true, "completion": ".decl Is_emotion(Emotion:symbol)\nIs_emotion(\"grief\").\n.decl Is_obvious(Emotion:symbol)\nIs_obvious(\"grief\").\n.decl Answer()\nAnswer() :- Is_emotion(emotion), Is_obvious(emotion).\n.output Answer\n\n", "completions": [".decl Is_emotion(Emotion:symbol)\nIs_emotion(\"grief\").\n.decl Is_obvious(Emotion:symbol)\nIs_obvious(\"grief\").\n.decl Answer()\nAnswer() :- Is_emotion(emotion), Is_obvious(emotion).\n.output Answer\n\n"]}
{"id": 2013, "answer": true, "completion": ".decl Is_a(Person:symbol, Ethnicity:symbol)\nIs_a(\"Scottish people\", \"Caucasian\").\nIs_a(\"Albidosi\", \"Caucasian\").\n.decl Answer()\nAnswer() :- Is_a(\"Scottish people\", ethnicity), Is_a(\"Albidosi\", ethnicity).\n.output Answer\n\n", "completions": [".decl Is_a(Person:symbol, Ethnicity:symbol)\nIs_a(\"Scottish people\", \"Caucasian\").\nIs_a(\"Albidosi\", \"Caucasian\").\n.decl Answer()\nAnswer() :- Is_a(\"Scottish people\", ethnicity), Is_a(\"Albidosi\", ethnicity).\n.output Answer\n\n"]}
{"id": 2014, "answer": true, "completion": ".decl Has_transmission_route(STI:symbol, Transmission_route:symbol)\nHas_transmission_route(\"HIV\", \"sexual contact\").\n.decl Has_prevention_method(Prevention_method:symbol, Transmission_route:symbol)\nHas_prevention_method(\"preventive healthcare\", \"sexual contact\").\n.decl Answer()\nAnswer() :- Has_transmission_route(sti, transmission_route), Has_prevention_method(prevention_method, transmission_route).\n.output Answer\n\n", "completions": [".decl Has_transmission_route(STI:symbol, Transmission_route:symbol)\nHas_transmission_route(\"HIV\", \"sexual contact\").\n.decl Has_prevention_method(Prevention_method:symbol, Transmission_route:symbol)\nHas_prevention_method(\"preventive healthcare\", \"sexual contact\").\n.decl Answer()\nAnswer() :- Has_transmission_route(sti, transmission_route), Has_prevention_method(prevention_method, transmission_route).\n.output Answer\n\n"]}
{"id": 2015, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Jack Black\", 1.7).\n.decl Has_distance(Event:symbol, Distance:float)\nHas_distance(\"Coronavirus distancing\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"Jack Black\", height), Has_distance(\"Coronavirus distancing\", distance), height >= distance.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Jack Black\", 1.7).\n.decl Has_distance(Event:symbol, Distance:float)\nHas_distance(\"Coronavirus distancing\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"Jack Black\", height), Has_distance(\"Coronavirus distancing\", distance), height >= distance.\n.output Answer\n\n"]}
{"id": 2016, "answer": true, "completion": ".decl Has_eyes(Person:symbol)\nHas_eyes(\"Saint Peter\").\n.decl Has_television(Place:symbol)\nHas_television(\"Vatican City\").\n.decl Answer()\nAnswer() :- Has_eyes(\"Saint Peter\"), Has_television(\"Vatican City\").\n.output Answer\n\n", "completions": [".decl Has_eyes(Person:symbol)\nHas_eyes(\"Saint Peter\").\n.decl Has_television(Place:symbol)\nHas_television(\"Vatican City\").\n.decl Answer()\nAnswer() :- Has_eyes(\"Saint Peter\"), Has_television(\"Vatican City\").\n.output Answer\n\n"]}
{"id": 2017, "answer": false, "completion": ".decl Is_official(Title:symbol, Country:symbol)\nIs_official(\"knight\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Is_official(\"knight\", \"United States\").\n.output Answer\n\n", "completions": [".decl Is_official(Title:symbol, Country:symbol)\nIs_official(\"knight\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Is_official(\"knight\", \"United States\").\n.output Answer\n\n"]}
{"id": 2018, "answer": false, "completion": ".decl Lasts_n_seconds(Event:symbol, N_seconds:float)\nLasts_n_seconds(\"U2 debut studio album\", 4200).\nLasts_n_seconds(\"episode of Peppa Pig\", 1800).\n.decl Answer()\nAnswer() :- Lasts_n_seconds(\"U2 debut studio album\", n_seconds1), Lasts_n_seconds(\"episode of Peppa Pig\", n_seconds2), n_seconds1 <= n_seconds2.\n.output Answer\n\n", "completions": [".decl Lasts_n_seconds(Event:symbol, N_seconds:float)\nLasts_n_seconds(\"U2 debut studio album\", 4200).\nLasts_n_seconds(\"episode of Peppa Pig\", 1800).\n.decl Answer()\nAnswer() :- Lasts_n_seconds(\"U2 debut studio album\", n_seconds1), Lasts_n_seconds(\"episode of Peppa Pig\", n_seconds2), n_seconds1 <= n_seconds2.\n.output Answer\n\n"]}
{"id": 2019, "answer": true, "completion": ".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Osama bin Laden\", \"Islam\").\n.decl Prohibits(Religion:symbol, Action:symbol)\nProhibits(\"Islam\", \"alcohol\").\n.decl Answer()\nAnswer() :- Has_religion(\"Osama bin Laden\", religion), Prohibits(religion, \"alcohol\").\n.output Answer\n\n", "completions": [".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Osama bin Laden\", \"Islam\").\n.decl Prohibits(Religion:symbol, Action:symbol)\nProhibits(\"Islam\", \"alcohol\").\n.decl Answer()\nAnswer() :- Has_religion(\"Osama bin Laden\", religion), Prohibits(religion, \"alcohol\").\n.output Answer\n\n"]}
{"id": 2020, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1975).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1976).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1977).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1978).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1979).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1980).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1981).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1982).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1983).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1984).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1985).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1986).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1987).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1988).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1989).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1990).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1991).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1992).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1993).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1994).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1995).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1996).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1997).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1998).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1999).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2000).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2001).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2002).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2003).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2004).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2005).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2006).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2007).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2008).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2009).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2010).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2011).\nHappens", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1975).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1976).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1977).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1978).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1979).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1980).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1981).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1982).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1983).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1984).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1985).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1986).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1987).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1988).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1989).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1990).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1991).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1992).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1993).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1994).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1995).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1996).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1997).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1998).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 1999).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2000).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2001).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2002).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2003).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2004).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2005).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2006).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2007).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2008).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2009).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2010).\nHappens_in_year(\"Jerry Seinfeld's first stand-up performance\", 2011).\nHappens"]}
{"id": 2021, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Buzz Aldrin\", 88).\n.decl Has_year_of_invention(Object:symbol, Year:float)\nHas_year_of_invention(\"computer\", 1936).\n.decl Answer()\nAnswer() :- Has_age(\"Buzz Aldrin\", age), Has_year_of_invention(\"computer\", year), age >= year.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Buzz Aldrin\", 88).\n.decl Has_year_of_invention(Object:symbol, Year:float)\nHas_year_of_invention(\"computer\", 1936).\n.decl Answer()\nAnswer() :- Has_age(\"Buzz Aldrin\", age), Has_year_of_invention(\"computer\", year), age >= year.\n.output Answer\n\n"]}
{"id": 2022, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"urban legends\", \"cities\").\nHappens_in_place(\"urban legends\", \"towns\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"urban legends\", place), place = \"cities\".\n.output Answer\n\n", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"urban legends\", \"cities\").\nHappens_in_place(\"urban legends\", \"towns\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"urban legends\", place), place = \"cities\".\n.output Answer\n\n"]}
{"id": 2023, "answer": true, "completion": ".decl Has_power(Person:symbol, Power:symbol)\nHas_power(\"Gandalf\", \"magic\").\nHas_power(\"Barbas\", \"magic\").\n.decl Answer()\nAnswer() :- Has_power(\"Gandalf\", power1), Has_power(\"Barbas\", power2), power1 = power2.\n.output Answer\n\n", "completions": [".decl Has_power(Person:symbol, Power:symbol)\nHas_power(\"Gandalf\", \"magic\").\nHas_power(\"Barbas\", \"magic\").\n.decl Answer()\nAnswer() :- Has_power(\"Gandalf\", power1), Has_power(\"Barbas\", power2), power1 = power2.\n.output Answer\n\n"]}
{"id": 2024, "answer": true, "completion": ".decl Eats_on_holiday(Person:symbol, Holiday:symbol)\nEats_on_holiday(\"Bulgarian priest\", \"Christmas Eve\").\n.decl Has_n_courses(Meal:symbol, N_courses:float)\nHas_n_courses(\"four-course meal\", 4).\n.decl Answer()\nAnswer() :- Eats_on_holiday(\"Bulgarian priest\", \"Christmas Eve\"), Has_n_courses(\"four-course meal\", 4).\n.output Answer\n\n", "completions": [".decl Eats_on_holiday(Person:symbol, Holiday:symbol)\nEats_on_holiday(\"Bulgarian priest\", \"Christmas Eve\").\n.decl Has_n_courses(Meal:symbol, N_courses:float)\nHas_n_courses(\"four-course meal\", 4).\n.decl Answer()\nAnswer() :- Eats_on_holiday(\"Bulgarian priest\", \"Christmas Eve\"), Has_n_courses(\"four-course meal\", 4).\n.output Answer\n\n"]}
{"id": 2025, "answer": false, "completion": ".decl Has_chef(Restaurant:symbol, Chef:symbol)\nHas_chef(\"Carmine's\", \"chef\").\n.decl Has_ingredient(Chef:symbol, Ingredient:symbol)\nHas_ingredient(\"chef\", \"basil\").\n.decl Answer()\nAnswer() :- Has_chef(\"Carmine's\", chef), Has_ingredient(chef, \"basil\"), !Has_ingredient(chef, \"basil\").\n.output Answer\n\n", "completions": [".decl Has_chef(Restaurant:symbol, Chef:symbol)\nHas_chef(\"Carmine's\", \"chef\").\n.decl Has_ingredient(Chef:symbol, Ingredient:symbol)\nHas_ingredient(\"chef\", \"basil\").\n.decl Answer()\nAnswer() :- Has_chef(\"Carmine's\", chef), Has_ingredient(chef, \"basil\"), !Has_ingredient(chef, \"basil\").\n.output Answer\n\n"]}
{"id": 2026, "answer": true, "completion": ".decl Has_operating_system(Device:symbol, Operating_system:symbol)\nHas_operating_system(\"Samsung Galaxy 1\", \"Android\").\n.decl Sounds_edible(Thing:symbol)\nSounds_edible(\"Android\").\nSounds_edible(\"iOS\").\nSounds_edible(\"Windows Phone\").\n.decl Answer()\nAnswer() :- Has_operating_system(\"Samsung Galaxy 1\", operating_system), Sounds_edible(operating_system).\n.output Answer\n\n", "completions": [".decl Has_operating_system(Device:symbol, Operating_system:symbol)\nHas_operating_system(\"Samsung Galaxy 1\", \"Android\").\n.decl Sounds_edible(Thing:symbol)\nSounds_edible(\"Android\").\nSounds_edible(\"iOS\").\nSounds_edible(\"Windows Phone\").\n.decl Answer()\nAnswer() :- Has_operating_system(\"Samsung Galaxy 1\", operating_system), Sounds_edible(operating_system).\n.output Answer\n\n"]}
{"id": 2027, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"red panda\", \"Shanghai\").\n.decl Is_in(Location:symbol, Location2:symbol)\nIs_in(\"Shanghai\", \"China\").\nIs_in(\"zoo\", \"Shanghai\").\n.decl Answer()\nAnswer() :- Lives_in(\"red panda\", location), Is_in(location, \"China\"), !Is_in(location, \"zoo\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"red panda\", \"Shanghai\").\n.decl Is_in(Location:symbol, Location2:symbol)\nIs_in(\"Shanghai\", \"China\").\nIs_in(\"zoo\", \"Shanghai\").\n.decl Answer()\nAnswer() :- Lives_in(\"red panda\", location), Is_in(location, \"China\"), !Is_in(location, \"zoo\").\n.output Answer\n\n"]}
{"id": 2028, "answer": false, "completion": ".decl Is_used_in(Material:symbol, Product:symbol)\nIs_used_in(\"silicon\", \"computer chips\").\n.decl Is_used_in(Material:symbol, Product:symbol)\nIs_used_in(\"computer chips\", \"computers\").\n.decl Is_used_in(Material:symbol, Product:symbol)\nIs_used_in(\"computers\", \"Intel\").\n.decl Answer()\nAnswer() :- Is_used_in(\"silicon\", \"Intel\").\n.output Answer\n\n", "completions": [".decl Is_used_in(Material:symbol, Product:symbol)\nIs_used_in(\"silicon\", \"computer chips\").\n.decl Is_used_in(Material:symbol, Product:symbol)\nIs_used_in(\"computer chips\", \"computers\").\n.decl Is_used_in(Material:symbol, Product:symbol)\nIs_used_in(\"computers\", \"Intel\").\n.decl Answer()\nAnswer() :- Is_used_in(\"silicon\", \"Intel\").\n.output Answer\n\n"]}
{"id": 2029, "answer": true, "completion": ".decl Is_word(Word:symbol)\nIs_word(\"MIX\").\n.decl Is_roman_numeral(Roman_numeral:symbol)\nIs_roman_numeral(\"MIX\").\n.decl Answer()\nAnswer() :- Is_word(\"MIX\"), Is_roman_numeral(\"MIX\").\n.output Answer\n\n", "completions": [".decl Is_word(Word:symbol)\nIs_word(\"MIX\").\n.decl Is_roman_numeral(Roman_numeral:symbol)\nIs_roman_numeral(\"MIX\").\n.decl Answer()\nAnswer() :- Is_word(\"MIX\"), Is_roman_numeral(\"MIX\").\n.output Answer\n\n"]}
{"id": 2030, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Hurricane Maria\", \"Puerto Rico\").\nHappens_in_place(\"windsurfing\", \"Puerto Rico\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Hurricane Maria\", place), Happens_in_place(\"windsurfing\", place).\n.output Answer\n\n", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Hurricane Maria\", \"Puerto Rico\").\nHappens_in_place(\"windsurfing\", \"Puerto Rico\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Hurricane Maria\", place), Happens_in_place(\"windsurfing\", place).\n.output Answer\n\n"]}
{"id": 2031, "answer": false, "completion": ".decl Has_been_featured_in(Object:symbol, Film:symbol)\nHas_been_featured_in(\"Holy Grail\", \"Monty Python and the Holy Grail\").\nHas_been_featured_in(\"Holy Grail\", \"Indiana Jones and the Last Crusade\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Da Vinci Code\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\",", "completions": [".decl Has_been_featured_in(Object:symbol, Film:symbol)\nHas_been_featured_in(\"Holy Grail\", \"Monty Python and the Holy Grail\").\nHas_been_featured_in(\"Holy Grail\", \"Indiana Jones and the Last Crusade\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Da Vinci Code\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\","]}
{"id": 2032, "answer": true, "completion": ".decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"Jean Harris's victim\", \"lentils\").\n.decl Answer()\nAnswer() :- Has_allergy(\"Jean Harris's victim\", \"lentils\").\n.output Answer\n\n", "completions": [".decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"Jean Harris's victim\", \"lentils\").\n.decl Answer()\nAnswer() :- Has_allergy(\"Jean Harris's victim\", \"lentils\").\n.output Answer\n\n"]}
{"id": 2033, "answer": true, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Creative Commons License\", 0).\n.decl Has_value(Object:symbol, Value:float)\nHas_value(\"Boticelli's The Birth of Venus\", 1000000000).\n.decl Answer()\nAnswer() :- Has_price(\"Creative Commons License\", price), Has_value(\"Boticelli's The Birth of Venus\", value), price < value.\n.output Answer\n\n", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Creative Commons License\", 0).\n.decl Has_value(Object:symbol, Value:float)\nHas_value(\"Boticelli's The Birth of Venus\", 1000000000).\n.decl Answer()\nAnswer() :- Has_price(\"Creative Commons License\", price), Has_value(\"Boticelli's The Birth of Venus\", value), price < value.\n.output Answer\n\n"]}
{"id": 2034, "answer": false, "completion": ".decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"captain\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"general\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"admiral\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"colonel\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"lieutenant\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"major\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"commander\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"sergeant\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"corporal\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"private\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman first class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman basic\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman second class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman third class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman first class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman second class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman third class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman first class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman second class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman third class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman first class\").\n.decl Has_military_rank(Person:", "completions": [".decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"captain\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"general\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"admiral\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"colonel\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"lieutenant\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"major\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"commander\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"sergeant\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"corporal\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"private\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman first class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman basic\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman second class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman third class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman first class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman second class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman third class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman first class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman second class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman third class\").\n.decl Has_military_rank(Person:symbol, Military_rank:symbol)\nHas_military_rank(\"Han Solo\", \"airman first class\").\n.decl Has_military_rank(Person:"]}
{"id": 2035, "answer": false, "completion": ".decl Has_first_name(Person:symbol, First_name:symbol)\nHas_first_name(\"Shaggy\", \"Norville\").\nHas_first_name(\"Redenbacher\", \"Orville\").\n.decl Answer()\nAnswer() :- Has_first_name(\"Shaggy\", first_name1), Has_first_name(\"Redenbacher\", first_name2), first_name1 = first_name2.\n.output Answer\n\n", "completions": [".decl Has_first_name(Person:symbol, First_name:symbol)\nHas_first_name(\"Shaggy\", \"Norville\").\nHas_first_name(\"Redenbacher\", \"Orville\").\n.decl Answer()\nAnswer() :- Has_first_name(\"Shaggy\", first_name1), Has_first_name(\"Redenbacher\", first_name2), first_name1 = first_name2.\n.output Answer\n\n"]}
{"id": 2036, "answer": true, "completion": ".decl Happens_before(Event1:symbol, Event2:symbol)\nHappens_before(\"iPhone\", \"scientific revolution\").\n.decl Answer()\nAnswer() :- Happens_before(\"iPhone\", \"scientific revolution\").\n.output Answer\n\n", "completions": [".decl Happens_before(Event1:symbol, Event2:symbol)\nHappens_before(\"iPhone\", \"scientific revolution\").\n.decl Answer()\nAnswer() :- Happens_before(\"iPhone\", \"scientific revolution\").\n.output Answer\n\n"]}
{"id": 2037, "answer": true, "completion": ".decl Associated_with(Person:symbol, Place:symbol)\nAssociated_with(\"gladiators\", \"Coloseum\").\n.decl Answer()\nAnswer() :- Associated_with(\"gladiators\", \"Coloseum\").\n.output Answer\n\n", "completions": [".decl Associated_with(Person:symbol, Place:symbol)\nAssociated_with(\"gladiators\", \"Coloseum\").\n.decl Answer()\nAnswer() :- Associated_with(\"gladiators\", \"Coloseum\").\n.output Answer\n\n"]}
{"id": 2038, "answer": true, "completion": ".decl Has_mental_disorder(Person:symbol, Disorder:symbol)\nHas_mental_disorder(\"Van Gogh\", \"epilepsy\").\n.decl Answer()\nAnswer() :- Has_mental_disorder(\"Van Gogh\", disorder).\n.output Answer\n\n", "completions": [".decl Has_mental_disorder(Person:symbol, Disorder:symbol)\nHas_mental_disorder(\"Van Gogh\", \"epilepsy\").\n.decl Answer()\nAnswer() :- Has_mental_disorder(\"Van Gogh\", disorder).\n.output Answer\n\n"]}
{"id": 2039, "answer": false, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"New Year's Day\", \"January 1\").\nHappens_on_day(\"New Year's Day\", \"January 2\").\nHappens_on_day(\"New Year's Day\", \"January 3\").\nHappens_on_day(\"New Year's Day\", \"January 4\").\nHappens_on_day(\"New Year's Day\", \"January 5\").\nHappens_on_day(\"New Year's Day\", \"January 6\").\nHappens_on_day(\"New Year's Day\", \"January 7\").\nHappens_on_day(\"New Year's Day\", \"January 8\").\nHappens_on_day(\"New Year's Day\", \"January 9\").\nHappens_on_day(\"New Year's Day\", \"January 10\").\nHappens_on_day(\"New Year's Day\", \"January 11\").\nHappens_on_day(\"New Year's Day\", \"January 12\").\nHappens_on_day(\"New Year's Day\", \"January 13\").\nHappens_on_day(\"New Year's Day\", \"January 14\").\nHappens_on_day(\"New Year's Day\", \"January 15\").\nHappens_on_day(\"New Year's Day\", \"January 16\").\nHappens_on_day(\"New Year's Day\", \"January 17\").\nHappens_on_day(\"New Year's Day\", \"January 18\").\nHappens_on_day(\"New Year's Day\", \"January 19\").\nHappens_on_day(\"New Year's Day\", \"January 20\").\nHappens_on_day(\"New Year's Day\", \"January 21\").\nHappens_on_day(\"New Year's Day\", \"January 22\").\nHappens_on_day(\"New Year's Day\", \"January 23\").\nHappens_on_day(\"New Year's Day\", \"January 24\").\nHappens_on_day(\"New Year's Day\", \"January 25\").\nHappens_on_day(\"New Year's Day\", \"January 26\").\nHappens_on_day(\"New Year's Day\", \"January 27\").\nHappens_on_day(\"New Year's Day\", \"January 28\").\nHappens_on_day(\"New Year's Day\", \"January 29\").\nHappens_on_day(\"New Year's Day\", \"January 30\").\nHappens_on_day(\"New Year's Day\", \"January 31\").\nHappens_on_day(\"New Year's Day\", \"February 1\").\nHappens_on_day(\"New Year's Day\", \"February 2\").\nHappens_on_day(\"New Year's Day\", \"February 3\").\nHappens_on_day(\"New Year's Day\", \"February 4\").\nHappens_on_day(\"New Year's Day\", \"February 5\").\nHappens_on_day(\"New Year's Day\", \"February 6\").\nHappens_on_day(\"New Year's Day\", \"February 7\").\nHappens_on_day(\"New Year's Day\", \"February 8\").\nHappens_on_day(\"New Year's Day\", \"February 9\").\nHappens_on_day(\"New Year's Day\", \"February 10\").\nHappens_on_day(\"New Year's Day\", \"February 11\").\nHappens_on_day(\"New Year's Day\", \"February 12\").\nHappens_on", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"New Year's Day\", \"January 1\").\nHappens_on_day(\"New Year's Day\", \"January 2\").\nHappens_on_day(\"New Year's Day\", \"January 3\").\nHappens_on_day(\"New Year's Day\", \"January 4\").\nHappens_on_day(\"New Year's Day\", \"January 5\").\nHappens_on_day(\"New Year's Day\", \"January 6\").\nHappens_on_day(\"New Year's Day\", \"January 7\").\nHappens_on_day(\"New Year's Day\", \"January 8\").\nHappens_on_day(\"New Year's Day\", \"January 9\").\nHappens_on_day(\"New Year's Day\", \"January 10\").\nHappens_on_day(\"New Year's Day\", \"January 11\").\nHappens_on_day(\"New Year's Day\", \"January 12\").\nHappens_on_day(\"New Year's Day\", \"January 13\").\nHappens_on_day(\"New Year's Day\", \"January 14\").\nHappens_on_day(\"New Year's Day\", \"January 15\").\nHappens_on_day(\"New Year's Day\", \"January 16\").\nHappens_on_day(\"New Year's Day\", \"January 17\").\nHappens_on_day(\"New Year's Day\", \"January 18\").\nHappens_on_day(\"New Year's Day\", \"January 19\").\nHappens_on_day(\"New Year's Day\", \"January 20\").\nHappens_on_day(\"New Year's Day\", \"January 21\").\nHappens_on_day(\"New Year's Day\", \"January 22\").\nHappens_on_day(\"New Year's Day\", \"January 23\").\nHappens_on_day(\"New Year's Day\", \"January 24\").\nHappens_on_day(\"New Year's Day\", \"January 25\").\nHappens_on_day(\"New Year's Day\", \"January 26\").\nHappens_on_day(\"New Year's Day\", \"January 27\").\nHappens_on_day(\"New Year's Day\", \"January 28\").\nHappens_on_day(\"New Year's Day\", \"January 29\").\nHappens_on_day(\"New Year's Day\", \"January 30\").\nHappens_on_day(\"New Year's Day\", \"January 31\").\nHappens_on_day(\"New Year's Day\", \"February 1\").\nHappens_on_day(\"New Year's Day\", \"February 2\").\nHappens_on_day(\"New Year's Day\", \"February 3\").\nHappens_on_day(\"New Year's Day\", \"February 4\").\nHappens_on_day(\"New Year's Day\", \"February 5\").\nHappens_on_day(\"New Year's Day\", \"February 6\").\nHappens_on_day(\"New Year's Day\", \"February 7\").\nHappens_on_day(\"New Year's Day\", \"February 8\").\nHappens_on_day(\"New Year's Day\", \"February 9\").\nHappens_on_day(\"New Year's Day\", \"February 10\").\nHappens_on_day(\"New Year's Day\", \"February 11\").\nHappens_on_day(\"New Year's Day\", \"February 12\").\nHappens_on"]}
{"id": 2040, "answer": true, "completion": ".decl Has_state(Object:symbol, State:symbol)\nHas_state(\"Saturn's rings\", \"solid\").\n.decl Answer()\nAnswer() :- Has_state(\"Saturn's rings\", \"solid\").\n.output Answer\n\n", "completions": [".decl Has_state(Object:symbol, State:symbol)\nHas_state(\"Saturn's rings\", \"solid\").\n.decl Answer()\nAnswer() :- Has_state(\"Saturn's rings\", \"solid\").\n.output Answer\n\n"]}
{"id": 2041, "answer": true, "completion": ".decl Needs(Object:symbol, Ingredient:symbol)\nNeeds(\"peeling a tomato\", \"hot water\").\nNeeds(\"peeling a tomato\", \"cold water\").\n.decl Answer()\nAnswer() :- Needs(\"peeling a tomato\", \"hot water\"), Needs(\"peeling a tomato\", \"cold water\").\n.output Answer\n\n", "completions": [".decl Needs(Object:symbol, Ingredient:symbol)\nNeeds(\"peeling a tomato\", \"hot water\").\nNeeds(\"peeling a tomato\", \"cold water\").\n.decl Answer()\nAnswer() :- Needs(\"peeling a tomato\", \"hot water\"), Needs(\"peeling a tomato\", \"cold water\").\n.output Answer\n\n"]}
{"id": 2042, "answer": false, "completion": ".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Dolce & Gabbana suit wearer\", \"Dolce & Gabbana suit\").\n.decl Shuns(Person_A:symbol, Person_B:symbol)\nShuns(\"Amish\", \"Dolce & Gabbana suit wearer\").\n.decl Answer()\nAnswer() :- Wears(person, \"Dolce & Gabbana suit\"), Shuns(person, \"Dolce & Gabbana suit wearer\").\n.output Answer\n\n", "completions": [".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Dolce & Gabbana suit wearer\", \"Dolce & Gabbana suit\").\n.decl Shuns(Person_A:symbol, Person_B:symbol)\nShuns(\"Amish\", \"Dolce & Gabbana suit wearer\").\n.decl Answer()\nAnswer() :- Wears(person, \"Dolce & Gabbana suit\"), Shuns(person, \"Dolce & Gabbana suit wearer\").\n.output Answer\n\n"]}
{"id": 2043, "answer": true, "completion": ".decl Has_main_focus(Game:symbol, Focus:symbol)\nHas_main_focus(\"Super Mario\", \"man\").\nHas_main_focus(\"Super Mario\", \"green\").\n.decl Answer()\nAnswer() :- Has_main_focus(\"Super Mario\", \"man\"), Has_main_focus(\"Super Mario\", \"green\").\n.output Answer\n\n", "completions": [".decl Has_main_focus(Game:symbol, Focus:symbol)\nHas_main_focus(\"Super Mario\", \"man\").\nHas_main_focus(\"Super Mario\", \"green\").\n.decl Answer()\nAnswer() :- Has_main_focus(\"Super Mario\", \"man\"), Has_main_focus(\"Super Mario\", \"green\").\n.output Answer\n\n"]}
{"id": 2044, "answer": false, "completion": ".decl Is_wonder(Wonder:symbol)\nIs_wonder(\"Great Pyramid of Giza\").\nIs_wonder(\"Hanging Gardens of Babylon\").\nIs_wonder(\"Statue of Zeus at Olympia\").\nIs_wonder(\"Temple of Artemis at Ephesus\").\nIs_wonder(\"Mausoleum at Halicarnassus\").\nIs_wonder(\"Colossus of Rhodes\").\nIs_wonder(\"Lighthouse of Alexandria\").\n.decl Answer()\nAnswer() :- Is_wonder(\"Great Pyramid of Giza\"), !Is_wonder(wonder), wonder != \"Great Pyramid of Giza\".\n.output Answer\n\n", "completions": [".decl Is_wonder(Wonder:symbol)\nIs_wonder(\"Great Pyramid of Giza\").\nIs_wonder(\"Hanging Gardens of Babylon\").\nIs_wonder(\"Statue of Zeus at Olympia\").\nIs_wonder(\"Temple of Artemis at Ephesus\").\nIs_wonder(\"Mausoleum at Halicarnassus\").\nIs_wonder(\"Colossus of Rhodes\").\nIs_wonder(\"Lighthouse of Alexandria\").\n.decl Answer()\nAnswer() :- Is_wonder(\"Great Pyramid of Giza\"), !Is_wonder(wonder), wonder != \"Great Pyramid of Giza\".\n.output Answer\n\n"]}
{"id": 2045, "answer": true, "completion": ".decl Baptized(Person:symbol)\nBaptized(\"Alexander the Great\").\n.decl Answer()\nAnswer() :- Baptized(\"Alexander the Great\").\n.output Answer\n\n", "completions": [".decl Baptized(Person:symbol)\nBaptized(\"Alexander the Great\").\n.decl Answer()\nAnswer() :- Baptized(\"Alexander the Great\").\n.output Answer\n\n"]}
{"id": 2046, "answer": false, "completion": ".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Has_temperature_range(Event:symbol, Min_temperature:float, Max_temperature:float)\nHas_temperature_range(\"hypothermia\", 0, 35).\n.decl Answer()\nAnswer() :- Has_temperature(\"Venus\", temperature), Has_temperature_range(\"hypothermia\", min_temperature, max_temperature), temperature < min_temperature.\n.output Answer\n\n", "completions": [".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Has_temperature_range(Event:symbol, Min_temperature:float, Max_temperature:float)\nHas_temperature_range(\"hypothermia\", 0, 35).\n.decl Answer()\nAnswer() :- Has_temperature(\"Venus\", temperature), Has_temperature_range(\"hypothermia\", min_temperature, max_temperature), temperature < min_temperature.\n.output Answer\n\n"]}
{"id": 2047, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Benito Mussolini\", 1.8).\n.decl Has_height_requirement(League:symbol, Height:float)\nHas_height_requirement(\"NBA\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Benito Mussolini\", height1), Has_height_requirement(\"NBA\", height2), height1 >= height2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Benito Mussolini\", 1.8).\n.decl Has_height_requirement(League:symbol, Height:float)\nHas_height_requirement(\"NBA\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Benito Mussolini\", height1), Has_height_requirement(\"NBA\", height2), height1 >= height2.\n.output Answer\n\n"]}
{"id": 2048, "answer": true, "completion": ".decl Is_taller_than(Person_A:symbol, Person_B:symbol)\nIs_taller_than(\"Yuri Gagarin\", \"LeBron James\").\n.decl Answer()\nAnswer() :- Is_taller_than(\"Yuri Gagarin\", \"LeBron James\").\n.output Answer\n\n", "completions": [".decl Is_taller_than(Person_A:symbol, Person_B:symbol)\nIs_taller_than(\"Yuri Gagarin\", \"LeBron James\").\n.decl Answer()\nAnswer() :- Is_taller_than(\"Yuri Gagarin\", \"LeBron James\").\n.output Answer\n\n"]}
{"id": 2049, "answer": false, "completion": ".decl Died_in(Person:symbol, Place:symbol)\nDied_in(\"Carl Linnaeus\", \"Uppsala\").\nDied_in(\"Michael Jackson\", \"Los Angeles\").\n.decl Answer()\nAnswer() :- Died_in(\"Carl Linnaeus\", place), Died_in(\"Michael Jackson\", place).\n.output Answer\n\n", "completions": [".decl Died_in(Person:symbol, Place:symbol)\nDied_in(\"Carl Linnaeus\", \"Uppsala\").\nDied_in(\"Michael Jackson\", \"Los Angeles\").\n.decl Answer()\nAnswer() :- Died_in(\"Carl Linnaeus\", place), Died_in(\"Michael Jackson\", place).\n.output Answer\n\n"]}
{"id": 2050, "answer": true, "completion": ".decl Is_required_in(Profession:symbol, Industry:symbol)\nIs_required_in(\"cooper\", \"beverage industry\").\n.decl Answer()\nAnswer() :- Is_required_in(\"cooper\", \"beverage industry\").\n.output Answer\n\n", "completions": [".decl Is_required_in(Profession:symbol, Industry:symbol)\nIs_required_in(\"cooper\", \"beverage industry\").\n.decl Answer()\nAnswer() :- Is_required_in(\"cooper\", \"beverage industry\").\n.output Answer\n\n"]}
{"id": 2051, "answer": true, "completion": ".decl Despised(Person:symbol)\nDespised(\"Pope Alexander VI\").\n.decl Has_descendant(Person:symbol, Descendant:symbol)\nHas_descendant(\"Pope Alexander VI\", \"Cesare Borgia\").\n.decl Canonized(Person:symbol)\nCanonized(\"Cesare Borgia\").\n.decl Answer()\nAnswer() :- Despised(person), Has_descendant(person, descendant), Canonized(descendant).\n.output Answer\n\n", "completions": [".decl Despised(Person:symbol)\nDespised(\"Pope Alexander VI\").\n.decl Has_descendant(Person:symbol, Descendant:symbol)\nHas_descendant(\"Pope Alexander VI\", \"Cesare Borgia\").\n.decl Canonized(Person:symbol)\nCanonized(\"Cesare Borgia\").\n.decl Answer()\nAnswer() :- Despised(person), Has_descendant(person, descendant), Canonized(descendant).\n.output Answer\n\n"]}
{"id": 2052, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"student from Smithtown's Cleary School\", \"English\").\nSpeaks(\"French person\", \"French\").\n.decl Understands(Person:symbol, Language:symbol)\nUnderstands(\"student from Smithtown's Cleary School\", \"English\").\nUnderstands(\"French person\", \"French\").\n.decl Answer()\nAnswer() :- Speaks(person1, language1), Speaks(person2, language2), Understands(person1, language2), Understands(person2, language1).\n.output Answer\n\n", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"student from Smithtown's Cleary School\", \"English\").\nSpeaks(\"French person\", \"French\").\n.decl Understands(Person:symbol, Language:symbol)\nUnderstands(\"student from Smithtown's Cleary School\", \"English\").\nUnderstands(\"French person\", \"French\").\n.decl Answer()\nAnswer() :- Speaks(person1, language1), Speaks(person2, language2), Understands(person1, language2), Understands(person2, language1).\n.output Answer\n\n"]}
{"id": 2053, "answer": true, "completion": ".decl Has_breed(Dog:symbol, Breed:symbol)\nHas_breed(\"Chance\", \"American Bulldog\").\nHas_breed(\"Shadow\", \"Golden Retriever\").\nHas_breed(\"Sassy\", \"Himalayan Cat\").\nHas_breed(\"Sassy\", \"American Shorthair\").\nHas_breed(\"Chance\", \"Greyhound\").\nHas_breed(\"Shadow\", \"Greyhound\").\n.decl Has_actor(Movie:symbol, Actor:symbol)\nHas_actor(\"Homeward Bound\", \"Chance\").\nHas_actor(\"Homeward Bound\", \"Shadow\").\nHas_actor(\"Homeward Bound\", \"Sassy\").\n.decl Answer()\nAnswer() :- Has_breed(actor, \"Greyhound\"), Has_actor(\"Homeward Bound\", actor).\n.output Answer\n\n", "completions": [".decl Has_breed(Dog:symbol, Breed:symbol)\nHas_breed(\"Chance\", \"American Bulldog\").\nHas_breed(\"Shadow\", \"Golden Retriever\").\nHas_breed(\"Sassy\", \"Himalayan Cat\").\nHas_breed(\"Sassy\", \"American Shorthair\").\nHas_breed(\"Chance\", \"Greyhound\").\nHas_breed(\"Shadow\", \"Greyhound\").\n.decl Has_actor(Movie:symbol, Actor:symbol)\nHas_actor(\"Homeward Bound\", \"Chance\").\nHas_actor(\"Homeward Bound\", \"Shadow\").\nHas_actor(\"Homeward Bound\", \"Sassy\").\n.decl Answer()\nAnswer() :- Has_breed(actor, \"Greyhound\"), Has_actor(\"Homeward Bound\", actor).\n.output Answer\n\n"]}
{"id": 2054, "answer": false, "completion": ".decl Writes_about(Author:symbol, Topic:symbol)\nWrites_about(\"Terry Pratchett\", \"fantasy\").\nWrites_about(\"Terry Pratchett\", \"science fiction\").\n.decl Answer()\nAnswer() :- Writes_about(\"Terry Pratchett\", \"quantum mechanics\").\n.output Answer\n\n", "completions": [".decl Writes_about(Author:symbol, Topic:symbol)\nWrites_about(\"Terry Pratchett\", \"fantasy\").\nWrites_about(\"Terry Pratchett\", \"science fiction\").\n.decl Answer()\nAnswer() :- Writes_about(\"Terry Pratchett\", \"quantum mechanics\").\n.output Answer\n\n"]}
{"id": 2055, "answer": true, "completion": ".decl Has_majority_religion(Country:symbol, Religion:symbol)\nHas_majority_religion(\"Cyprus\", \"Islam\").\n.decl Has_minority_religion(Country:symbol, Religion:symbol)\nHas_minority_religion(\"Cyprus\", \"Christianity\").\n.decl Answer()\nAnswer() :- Has_majority_religion(country, \"Islam\"), Has_minority_religion(country, \"Christianity\").\n.output Answer\n\n", "completions": [".decl Has_majority_religion(Country:symbol, Religion:symbol)\nHas_majority_religion(\"Cyprus\", \"Islam\").\n.decl Has_minority_religion(Country:symbol, Religion:symbol)\nHas_minority_religion(\"Cyprus\", \"Christianity\").\n.decl Answer()\nAnswer() :- Has_majority_religion(country, \"Islam\"), Has_minority_religion(country, \"Christianity\").\n.output Answer\n\n"]}
{"id": 2056, "answer": false, "completion": ".decl Is_fan_of(Person:symbol, Team:symbol)\nIs_fan_of(\"John Key\", \"Botany Swarm\").\n.decl Is_fan_of(Person:symbol, Team:symbol)\nIs_fan_of(\"John Key\", \"Botany Swarm\").\n.decl Answer()\nAnswer() :- Is_fan_of(person, \"Botany Swarm\"), Is_fan_of(person, \"National Party\").\n.output Answer\n\n", "completions": [".decl Is_fan_of(Person:symbol, Team:symbol)\nIs_fan_of(\"John Key\", \"Botany Swarm\").\n.decl Is_fan_of(Person:symbol, Team:symbol)\nIs_fan_of(\"John Key\", \"Botany Swarm\").\n.decl Answer()\nAnswer() :- Is_fan_of(person, \"Botany Swarm\"), Is_fan_of(person, \"National Party\").\n.output Answer\n\n"]}
{"id": 2057, "answer": true, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Roman Colosseum\", 50).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Maroon 5\", 5).\n.decl Answer()\nAnswer() :- Has_capacity(\"Roman Colosseum\", capacity), Has_n_members(\"Maroon 5\", n_members), capacity >= n_members.\n.output Answer\n\n\n", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Roman Colosseum\", 50).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Maroon 5\", 5).\n.decl Answer()\nAnswer() :- Has_capacity(\"Roman Colosseum\", capacity), Has_n_members(\"Maroon 5\", n_members), capacity >= n_members.\n.output Answer\n\n\n"]}
{"id": 2058, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"Cookie Monster\", \"cookie\").\n.decl Is_paleo_friendly(Food:symbol)\nIs_paleo_friendly(\"meat\").\nIs_paleo_friendly(\"fish\").\nIs_paleo_friendly(\"eggs\").\nIs_paleo_friendly(\"nuts\").\nIs_paleo_friendly(\"seeds\").\nIs_paleo_friendly(\"vegetables\").\nIs_paleo_friendly(\"fruits\").\n.decl Answer()\nAnswer() :- Eats(\"Cookie Monster\", food), Is_paleo_friendly(food).\n.output Answer\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"Cookie Monster\", \"cookie\").\n.decl Is_paleo_friendly(Food:symbol)\nIs_paleo_friendly(\"meat\").\nIs_paleo_friendly(\"fish\").\nIs_paleo_friendly(\"eggs\").\nIs_paleo_friendly(\"nuts\").\nIs_paleo_friendly(\"seeds\").\nIs_paleo_friendly(\"vegetables\").\nIs_paleo_friendly(\"fruits\").\n.decl Answer()\nAnswer() :- Eats(\"Cookie Monster\", food), Is_paleo_friendly(food).\n.output Answer\n\n"]}
{"id": 2059, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"stork\", \"Europe\").\nLives_in(\"stork\", \"Asia\").\nLives_in(\"stork\", \"Africa\").\nLives_in(\"stork\", \"North America\").\nLives_in(\"stork\", \"South America\").\n.decl Happens_in(Event:symbol, Place:symbol)\nHappens_in(\"baby shower\", \"Europe\").\nHappens_in(\"baby shower\", \"Asia\").\nHappens_in(\"baby shower\", \"Africa\").\nHappens_in(\"baby shower\", \"North America\").\nHappens_in(\"baby shower\", \"South America\").\n.decl Answer()\nAnswer() :- Lives_in(\"stork\", place1), Happens_in(\"baby shower\", place2), place1 = place2.\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"stork\", \"Europe\").\nLives_in(\"stork\", \"Asia\").\nLives_in(\"stork\", \"Africa\").\nLives_in(\"stork\", \"North America\").\nLives_in(\"stork\", \"South America\").\n.decl Happens_in(Event:symbol, Place:symbol)\nHappens_in(\"baby shower\", \"Europe\").\nHappens_in(\"baby shower\", \"Asia\").\nHappens_in(\"baby shower\", \"Africa\").\nHappens_in(\"baby shower\", \"North America\").\nHappens_in(\"baby shower\", \"South America\").\n.decl Answer()\nAnswer() :- Lives_in(\"stork\", place1), Happens_in(\"baby shower\", place2), place1 = place2.\n.output Answer\n\n"]}
{"id": 2060, "answer": true, "completion": ".decl Appears_in(Animal:symbol, Musical:symbol)\nAppears_in(\"hyena\", \"The Lion King\").\n.decl Answer()\nAnswer() :- Appears_in(\"hyena\", musical), musical = \"The Lion King\".\n.output Answer\n\n", "completions": [".decl Appears_in(Animal:symbol, Musical:symbol)\nAppears_in(\"hyena\", \"The Lion King\").\n.decl Answer()\nAnswer() :- Appears_in(\"hyena\", musical), musical = \"The Lion King\".\n.output Answer\n\n"]}
{"id": 2061, "answer": false, "completion": ".decl Establishes(Person:symbol, University:symbol)\nEstablishes(\"Millard Fillmore\", \"University of Buffalo\").\n.decl Answer()\nAnswer() :- Establishes(\"Millard Fillmore\", \"University of Pittsburgh\").\n.output Answer\n\n", "completions": [".decl Establishes(Person:symbol, University:symbol)\nEstablishes(\"Millard Fillmore\", \"University of Buffalo\").\n.decl Answer()\nAnswer() :- Establishes(\"Millard Fillmore\", \"University of Pittsburgh\").\n.output Answer\n\n"]}
{"id": 2062, "answer": false, "completion": ".decl Has_n_followers(Religion:symbol, N_followers:float)\nHas_n_followers(\"Christianity\", 2.1).\nHas_n_followers(\"Satanism\", 0.0001).\n.decl Has_n_emissions(Religion:symbol, N_emissions:float)\nHas_n_emissions(\"Christianity\", 0.1).\nHas_n_emissions(\"Satanism\", 0.0001).\n.decl Answer()\nAnswer() :- Has_n_followers(\"Christianity\", n_followers1), Has_n_followers(\"Satanism\", n_followers2), Has_n_emissions(\"Christianity\", n_emissions1), Has_n_emissions(\"Satanism\", n_emissions2), n_followers1 * n_emissions1 < n_followers2 * n_emissions2.\n.output Answer\n\n", "completions": [".decl Has_n_followers(Religion:symbol, N_followers:float)\nHas_n_followers(\"Christianity\", 2.1).\nHas_n_followers(\"Satanism\", 0.0001).\n.decl Has_n_emissions(Religion:symbol, N_emissions:float)\nHas_n_emissions(\"Christianity\", 0.1).\nHas_n_emissions(\"Satanism\", 0.0001).\n.decl Answer()\nAnswer() :- Has_n_followers(\"Christianity\", n_followers1), Has_n_followers(\"Satanism\", n_followers2), Has_n_emissions(\"Christianity\", n_emissions1), Has_n_emissions(\"Satanism\", n_emissions2), n_followers1 * n_emissions1 < n_followers2 * n_emissions2.\n.output Answer\n\n"]}
{"id": 2063, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Robert Downey Jr.\", age).\n.decl Is_young(Person:symbol)\nIs_young(\"Robert Downey Jr.\").\n.decl Is_good_role_model(Person:symbol)\nIs_good_role_model(\"Robert Downey Jr.\").\n.decl Answer()\nAnswer() :- Is_young(\"Robert Downey Jr.\"), Is_good_role_model(\"Robert Downey Jr.\").\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Robert Downey Jr.\", age).\n.decl Is_young(Person:symbol)\nIs_young(\"Robert Downey Jr.\").\n.decl Is_good_role_model(Person:symbol)\nIs_good_role_model(\"Robert Downey Jr.\").\n.decl Answer()\nAnswer() :- Is_young(\"Robert Downey Jr.\"), Is_good_role_model(\"Robert Downey Jr.\").\n.output Answer\n\n"]}
{"id": 2064, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"coin\", 8.9).\nHas_density(\"mercury\", 13.6).\n.decl Answer()\nAnswer() :- Has_density(\"coin\", density1), Has_density(\"mercury\", density2), density1 < density2.\n.output Answer\n\n\n", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"coin\", 8.9).\nHas_density(\"mercury\", 13.6).\n.decl Answer()\nAnswer() :- Has_density(\"coin\", density1), Has_density(\"mercury\", density2), density1 < density2.\n.output Answer\n\n\n"]}
{"id": 2065, "answer": true, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Newt Gingrich\", \"Newt\").\n.decl Is_a_type_of(Type:symbol, Subtype:symbol)\nIs_a_type_of(\"Reptile\", \"Newt\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Newt Gingrich\", nickname), Is_a_type_of(\"Reptile\", nickname).\n.output Answer\n\n", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Newt Gingrich\", \"Newt\").\n.decl Is_a_type_of(Type:symbol, Subtype:symbol)\nIs_a_type_of(\"Reptile\", \"Newt\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Newt Gingrich\", nickname), Is_a_type_of(\"Reptile\", nickname).\n.output Answer\n\n"]}
{"id": 2066, "answer": true, "completion": ".decl Has_commandment(Religion:symbol, Commandment:symbol)\nHas_commandment(\"Christianity\", \"honor thy father and thy mother\").\n.decl Broke_commandment(Person:symbol, Commandment:symbol)\nBroke_commandment(\"Christopher Columbus\", \"honor thy father and thy mother\").\n.decl Answer()\nAnswer() :- Has_commandment(\"Christianity\", commandment), Broke_commandment(\"Christopher Columbus\", commandment).\n.output Answer\n\n", "completions": [".decl Has_commandment(Religion:symbol, Commandment:symbol)\nHas_commandment(\"Christianity\", \"honor thy father and thy mother\").\n.decl Broke_commandment(Person:symbol, Commandment:symbol)\nBroke_commandment(\"Christopher Columbus\", \"honor thy father and thy mother\").\n.decl Answer()\nAnswer() :- Has_commandment(\"Christianity\", commandment), Broke_commandment(\"Christopher Columbus\", commandment).\n.output Answer\n\n"]}
{"id": 2067, "answer": true, "completion": ".decl Costs(Item:symbol, Price:float)\nCosts(\"DJI Mavic Pro Drone\", 999).\n.decl Has_value(Coin:symbol, Value:float)\nHas_value(\"Reconstruction era coin\", 0.01).\n.decl Answer()\nAnswer() :- Costs(\"DJI Mavic Pro Drone\", price), Has_value(\"Reconstruction era coin\", value), price > value.\n.output Answer\n\n", "completions": [".decl Costs(Item:symbol, Price:float)\nCosts(\"DJI Mavic Pro Drone\", 999).\n.decl Has_value(Coin:symbol, Value:float)\nHas_value(\"Reconstruction era coin\", 0.01).\n.decl Answer()\nAnswer() :- Costs(\"DJI Mavic Pro Drone\", price), Has_value(\"Reconstruction era coin\", value), price > value.\n.output Answer\n\n"]}
{"id": 2068, "answer": true, "completion": ".decl Has_age(Object:symbol, Age:float)\nHas_age(\"chlorine water\", 1).\n.decl Is_safe_to_drink(Object:symbol)\nIs_safe_to_drink(\"chlorine water\").\n.decl Answer()\nAnswer() :- Has_age(\"chlorine water\", age), Is_safe_to_drink(\"chlorine water\"), age <= 1.\n.output Answer\n\n", "completions": [".decl Has_age(Object:symbol, Age:float)\nHas_age(\"chlorine water\", 1).\n.decl Is_safe_to_drink(Object:symbol)\nIs_safe_to_drink(\"chlorine water\").\n.decl Answer()\nAnswer() :- Has_age(\"chlorine water\", age), Is_safe_to_drink(\"chlorine water\"), age <= 1.\n.output Answer\n\n"]}
{"id": 2069, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"pink\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"white\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"blue\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"yellow\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"orange\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"green\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"red\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"purple\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"black\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"gray\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"brown\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"gold\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"silver\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"white\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"blue\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"yellow\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"orange\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"green\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"red\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"purple\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"black\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"gray\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"brown\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"gold\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"silver\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"white\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"blue\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"yellow\").\n.decl Has_color(Object:symbol, Color", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"pink\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"white\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"blue\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"yellow\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"orange\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"green\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"red\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"purple\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"black\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"gray\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"brown\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"gold\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"silver\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"white\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"blue\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"yellow\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"orange\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"green\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"red\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"purple\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"black\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"gray\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"brown\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"gold\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"silver\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"white\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"blue\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"yellow\").\n.decl Has_color(Object:symbol, Color"]}
{"id": 2070, "answer": true, "completion": ".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Leonard Bernstein\", \"paraplegic\").\n.decl Is_suitable_for(Person:symbol, Job:symbol)\nIs_suitable_for(\"Leonard Bernstein\", \"conducting an orchestra\").\n.decl Answer()\nAnswer() :- Has_disability(\"Leonard Bernstein\", \"paraplegic\"), Is_suitable_for(\"Leonard Bernstein\", \"conducting an orchestra\").\n.output Answer\n\n", "completions": [".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Leonard Bernstein\", \"paraplegic\").\n.decl Is_suitable_for(Person:symbol, Job:symbol)\nIs_suitable_for(\"Leonard Bernstein\", \"conducting an orchestra\").\n.decl Answer()\nAnswer() :- Has_disability(\"Leonard Bernstein\", \"paraplegic\"), Is_suitable_for(\"Leonard Bernstein\", \"conducting an orchestra\").\n.output Answer\n\n"]}
{"id": 2071, "answer": false, "completion": ".decl Has_margin(Election:symbol, Margin:float)\nHas_margin(\"1980 United States presidential election\", 2.6).\n.decl Answer()\nAnswer() :- Has_margin(\"1980 United States presidential election\", margin), margin < 1.\n.output Answer\n\n", "completions": [".decl Has_margin(Election:symbol, Margin:float)\nHas_margin(\"1980 United States presidential election\", 2.6).\n.decl Answer()\nAnswer() :- Has_margin(\"1980 United States presidential election\", margin), margin < 1.\n.output Answer\n\n"]}
{"id": 2072, "answer": true, "completion": ".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"listening to a cowbell\", \"fever\").\n.decl Answer()\nAnswer() :- Cures(\"listening to a cowbell\", \"fever\").\n.output Answer\n\n", "completions": [".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"listening to a cowbell\", \"fever\").\n.decl Answer()\nAnswer() :- Cures(\"listening to a cowbell\", \"fever\").\n.output Answer\n\n"]}
{"id": 2073, "answer": false, "completion": ".decl Has_n_stings(Animal:symbol, N_stings:float)\nHas_n_stings(\"honey bee\", 1).\n.decl Answer()\nAnswer() :- Has_n_stings(\"honey bee\", n_stings), n_stings > 1.\n.output Answer\n\n", "completions": [".decl Has_n_stings(Animal:symbol, N_stings:float)\nHas_n_stings(\"honey bee\", 1).\n.decl Answer()\nAnswer() :- Has_n_stings(\"honey bee\", n_stings), n_stings > 1.\n.output Answer\n\n"]}
{"id": 2074, "answer": false, "completion": ".decl Has_children(Person:symbol, Children:symbol)\nHas_children(\"Bob Marley\", \"Ziggy Marley\").\nHas_children(\"Bob Marley\", \"Damian Marley\").\nHas_children(\"Bob Marley\", \"Stephen Marley\").\nHas_children(\"Bob Marley\", \"Ky-Mani Marley\").\nHas_children(\"Bob Marley\", \"Rohan Marley\").\nHas_children(\"Bob Marley\", \"Cedella Marley\").\nHas_children(\"Bob Marley\", \"Julian Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Robbie Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Makeda Marley\").\nHas_children(\"Bob Marley\", \"Donovan Marley\").\nHas_children(\"Bob Marley\", \"Stephanie Marley\").\nHas_children(\"Bob Marley\", \"Sharon Marley\").\nHas_children(\"Bob Marley\", \"Rita Marley\").\nHas_children(\"Bob Marley\", \"Cherry Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Mar", "completions": [".decl Has_children(Person:symbol, Children:symbol)\nHas_children(\"Bob Marley\", \"Ziggy Marley\").\nHas_children(\"Bob Marley\", \"Damian Marley\").\nHas_children(\"Bob Marley\", \"Stephen Marley\").\nHas_children(\"Bob Marley\", \"Ky-Mani Marley\").\nHas_children(\"Bob Marley\", \"Rohan Marley\").\nHas_children(\"Bob Marley\", \"Cedella Marley\").\nHas_children(\"Bob Marley\", \"Julian Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Robbie Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Makeda Marley\").\nHas_children(\"Bob Marley\", \"Donovan Marley\").\nHas_children(\"Bob Marley\", \"Stephanie Marley\").\nHas_children(\"Bob Marley\", \"Sharon Marley\").\nHas_children(\"Bob Marley\", \"Rita Marley\").\nHas_children(\"Bob Marley\", \"Cherry Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Karen Mar"]}
{"id": 2075, "answer": true, "completion": ".decl Has_wife(Person:symbol, Wife:symbol)\nHas_wife(\"Harry Houdini\", \"Bess Houdini\").\n.decl Makes_look_foolish(Person:symbol, Target:symbol)\nMakes_look_foolish(\"Bess Houdini\", \"psychics\").\n.decl Answer()\nAnswer() :- Has_wife(\"Harry Houdini\", wife), Makes_look_foolish(wife, \"psychics\").\n.output Answer\n\n", "completions": [".decl Has_wife(Person:symbol, Wife:symbol)\nHas_wife(\"Harry Houdini\", \"Bess Houdini\").\n.decl Makes_look_foolish(Person:symbol, Target:symbol)\nMakes_look_foolish(\"Bess Houdini\", \"psychics\").\n.decl Answer()\nAnswer() :- Has_wife(\"Harry Houdini\", wife), Makes_look_foolish(wife, \"psychics\").\n.output Answer\n\n"]}
{"id": 2076, "answer": true, "completion": ".decl Guest_starred_on(Person:symbol, TV_series:symbol)\nGuest_starred_on(\"Joan Crawford\", \"JAG (TV series)\").\n.decl Answer()\nAnswer() :- Guest_starred_on(\"Joan Crawford\", \"JAG (TV series)\").\n.output Answer\n\n", "completions": [".decl Guest_starred_on(Person:symbol, TV_series:symbol)\nGuest_starred_on(\"Joan Crawford\", \"JAG (TV series)\").\n.decl Answer()\nAnswer() :- Guest_starred_on(\"Joan Crawford\", \"JAG (TV series)\").\n.output Answer\n\n"]}
{"id": 2077, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"skin\", \"blue\").\n.decl Is_home_remedy(Object:symbol)\nIs_home_remedy(\"skin\").\n.decl Answer()\nAnswer() :- Has_color(object, \"blue\"), Is_home_remedy(object).\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"skin\", \"blue\").\n.decl Is_home_remedy(Object:symbol)\nIs_home_remedy(\"skin\").\n.decl Answer()\nAnswer() :- Has_color(object, \"blue\"), Is_home_remedy(object).\n.output Answer\n\n"]}
{"id": 2078, "answer": true, "completion": ".decl Prevents(Event_A:symbol, Event_B:symbol)\nPrevents(\"Berlin Wall\", \"athletes competing in the 1936 Summer Olympics\").\n.decl Answer()\nAnswer() :- Prevents(\"Berlin Wall\", event).\n.output Answer\n\n", "completions": [".decl Prevents(Event_A:symbol, Event_B:symbol)\nPrevents(\"Berlin Wall\", \"athletes competing in the 1936 Summer Olympics\").\n.decl Answer()\nAnswer() :- Prevents(\"Berlin Wall\", event).\n.output Answer\n\n"]}
{"id": 2079, "answer": true, "completion": ".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"flight from NY to Kansas City\", 3).\nHas_duration(\"Batman (1989 film)\", 2).\n.decl Answer()\nAnswer() :- Has_duration(\"flight from NY to Kansas City\", duration1), Has_duration(\"Batman (1989 film)\", duration2), duration1 >= duration2.\n.output Answer\n\n\n", "completions": [".decl Has_duration(Event:symbol, Duration:float)\nHas_duration(\"flight from NY to Kansas City\", 3).\nHas_duration(\"Batman (1989 film)\", 2).\n.decl Answer()\nAnswer() :- Has_duration(\"flight from NY to Kansas City\", duration1), Has_duration(\"Batman (1989 film)\", duration2), duration1 >= duration2.\n.output Answer\n\n\n"]}
{"id": 2080, "answer": true, "completion": ".decl Kills(Person:symbol, N_people:float)\nKills(\"Don King\", 2).\n.decl Kills_with_own_hands(Person:symbol, N_people:float, Year:float)\nKills_with_own_hands(\"Charles Manson\", 1, 1971).\n.decl Answer()\nAnswer() :- Kills(\"Don King\", n_people1), Kills_with_own_hands(\"Charles Manson\", n_people2, 1971), n_people1 > n_people2.\n.output Answer\n\n\n", "completions": [".decl Kills(Person:symbol, N_people:float)\nKills(\"Don King\", 2).\n.decl Kills_with_own_hands(Person:symbol, N_people:float, Year:float)\nKills_with_own_hands(\"Charles Manson\", 1, 1971).\n.decl Answer()\nAnswer() :- Kills(\"Don King\", n_people1), Kills_with_own_hands(\"Charles Manson\", n_people2, 1971), n_people1 > n_people2.\n.output Answer\n\n\n"]}
{"id": 2081, "answer": true, "completion": ".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"amoebas\", \"amoebic dysentery\").\nHas_disease(\"amoebas\", \"amoebic liver abscess\").\nHas_disease(\"rats\", \"plague\").\n.decl Causes(Disease_A:symbol, Disease_B:symbol)\nCauses(\"plague\", \"Black Death\").\n.decl Answer()\nAnswer() :- Has_disease(organism, disease), Causes(disease, \"Black Death\").\n.output Answer\n\n", "completions": [".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"amoebas\", \"amoebic dysentery\").\nHas_disease(\"amoebas\", \"amoebic liver abscess\").\nHas_disease(\"rats\", \"plague\").\n.decl Causes(Disease_A:symbol, Disease_B:symbol)\nCauses(\"plague\", \"Black Death\").\n.decl Answer()\nAnswer() :- Has_disease(organism, disease), Causes(disease, \"Black Death\").\n.output Answer\n\n"]}
{"id": 2082, "answer": false, "completion": ".decl Has_heritage(Person:symbol, Heritage:symbol)\nHas_heritage(\"Ludacris\", \"African American\").\nHas_heritage(\"Ludacris\", \"Native American\").\n.decl Answer()\nAnswer() :- Has_heritage(\"Ludacris\", \"Greek\").\n.output Answer\n\n", "completions": [".decl Has_heritage(Person:symbol, Heritage:symbol)\nHas_heritage(\"Ludacris\", \"African American\").\nHas_heritage(\"Ludacris\", \"Native American\").\n.decl Answer()\nAnswer() :- Has_heritage(\"Ludacris\", \"Greek\").\n.output Answer\n\n"]}
{"id": 2083, "answer": true, "completion": ".decl Has_n_teams(Country:symbol, N_teams:float)\nHas_n_teams(\"United States\", 24).\nHas_n_teams(\"Canada\", 7).\n.decl Answer()\nAnswer() :- Has_n_teams(\"United States\", n_teams1), Has_n_teams(\"Canada\", n_teams2), n_teams1 > n_teams2.\n.output Answer\n\n", "completions": [".decl Has_n_teams(Country:symbol, N_teams:float)\nHas_n_teams(\"United States\", 24).\nHas_n_teams(\"Canada\", 7).\n.decl Answer()\nAnswer() :- Has_n_teams(\"United States\", n_teams1), Has_n_teams(\"Canada\", n_teams2), n_teams1 > n_teams2.\n.output Answer\n\n"]}
{"id": 2084, "answer": false, "completion": ".decl Appears_on(Person:symbol, Show:symbol)\nAppears_on(\"Pope\", \"The Simpsons\").\n.decl Is_similar_to(Show1:symbol, Show2:symbol)\nIs_similar_to(\"The Simpsons\", \"Family Guy\").\nIs_similar_to(\"Family Guy\", \"Pimp My Ride\").\n.decl Answer()\nAnswer() :- Appears_on(\"Pope\", show1), Is_similar_to(show1, \"Pimp My Ride\").\n.output Answer\n\n", "completions": [".decl Appears_on(Person:symbol, Show:symbol)\nAppears_on(\"Pope\", \"The Simpsons\").\n.decl Is_similar_to(Show1:symbol, Show2:symbol)\nIs_similar_to(\"The Simpsons\", \"Family Guy\").\nIs_similar_to(\"Family Guy\", \"Pimp My Ride\").\n.decl Answer()\nAnswer() :- Appears_on(\"Pope\", show1), Is_similar_to(show1, \"Pimp My Ride\").\n.output Answer\n\n"]}
{"id": 2085, "answer": false, "completion": ".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"African Elephant pregnancy\", 18).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"African Elephant pregnancy\", 22).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"African Elephant pregnancy\", n_months1), Last_n_months(\"African Elephant pregnancy\", n_months2),  n_months1 <= n_months2.\n.output Answer\n\n", "completions": [".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"African Elephant pregnancy\", 18).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"African Elephant pregnancy\", 22).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"African Elephant pregnancy\", n_months1), Last_n_months(\"African Elephant pregnancy\", n_months2),  n_months1 <= n_months2.\n.output Answer\n\n"]}
{"id": 2086, "answer": true, "completion": ".decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Hamlet\", \"William Shakespeare\").\n.decl Uses(Person:symbol, Technology:symbol)\nUses(\"William Shakespeare\", \"email\").\n.decl Answer()\nAnswer() :- Has_author(\"Hamlet\", author), Uses(author, \"email\").\n.output Answer\n\n", "completions": [".decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Hamlet\", \"William Shakespeare\").\n.decl Uses(Person:symbol, Technology:symbol)\nUses(\"William Shakespeare\", \"email\").\n.decl Answer()\nAnswer() :- Has_author(\"Hamlet\", author), Uses(author, \"email\").\n.output Answer\n\n"]}
{"id": 2087, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"newborn\", 0.5).\nHas_height(\"fully grown horseradish plant\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"newborn\", height1), Has_height(\"fully grown horseradish plant\", height2), height1 < height2.\n.output Answer\n\n", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"newborn\", 0.5).\nHas_height(\"fully grown horseradish plant\", 1.5).\n.decl Answer()\nAnswer() :- Has_height(\"newborn\", height1), Has_height(\"fully grown horseradish plant\", height2), height1 < height2.\n.output Answer\n\n"]}
{"id": 2088, "answer": false, "completion": ".decl Has_GDP_per_capita(Country:symbol, GDP_per_capita:float)\nHas_GDP_per_capita(\"Cambodia\", 1630).\n.decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"2020 richest billionaire\", 8000000000).\n.decl Answer()\nAnswer() :- Has_GDP_per_capita(\"Cambodia\", gdp_per_capita), Has_net_worth(\"2020 richest billionaire\", net_worth), gdp_per_capita > net_worth.\n.output Answer\n\n", "completions": [".decl Has_GDP_per_capita(Country:symbol, GDP_per_capita:float)\nHas_GDP_per_capita(\"Cambodia\", 1630).\n.decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"2020 richest billionaire\", 8000000000).\n.decl Answer()\nAnswer() :- Has_GDP_per_capita(\"Cambodia\", gdp_per_capita), Has_net_worth(\"2020 richest billionaire\", net_worth), gdp_per_capita > net_worth.\n.output Answer\n\n"]}
{"id": 2089, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Holstein cow\", 500).\nHas_weight(\"Liberty Bell\", 200).\nHas_weight(\"giant scale\", 700).\n.decl Answer()\nAnswer() :- Has_weight(\"Holstein cow\", weight1), Has_weight(\"Liberty Bell\", weight2), Has_weight(\"giant scale\", weight3), weight1 + weight2 = weight3.\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Holstein cow\", 500).\nHas_weight(\"Liberty Bell\", 200).\nHas_weight(\"giant scale\", 700).\n.decl Answer()\nAnswer() :- Has_weight(\"Holstein cow\", weight1), Has_weight(\"Liberty Bell\", weight2), Has_weight(\"giant scale\", weight3), weight1 + weight2 = weight3.\n.output Answer\n\n"]}
{"id": 2090, "answer": true, "completion": ".decl Has_ethnicity(Person:symbol, Ethnicity:symbol)\nHas_ethnicity(\"Cleopatra\", \"Egyptian\").\n.decl Is_closer_to(Ethnicity_A:symbol, Ethnicity_B:symbol, Ethnicity_C:symbol)\nIs_closer_to(\"Egyptian\", \"Greek\", \"Egyptian\").\n.decl Answer()\nAnswer() :- Has_ethnicity(\"Cleopatra\", ethnicity), Is_closer_to(ethnicity, \"Greek\", \"Egyptian\").\n.output Answer\n\n", "completions": [".decl Has_ethnicity(Person:symbol, Ethnicity:symbol)\nHas_ethnicity(\"Cleopatra\", \"Egyptian\").\n.decl Is_closer_to(Ethnicity_A:symbol, Ethnicity_B:symbol, Ethnicity_C:symbol)\nIs_closer_to(\"Egyptian\", \"Greek\", \"Egyptian\").\n.decl Answer()\nAnswer() :- Has_ethnicity(\"Cleopatra\", ethnicity), Is_closer_to(ethnicity, \"Greek\", \"Egyptian\").\n.output Answer\n\n"]}
{"id": 2091, "answer": true, "completion": ".decl Has_healing_properties(Substance:symbol)\nHas_healing_properties(\"ham\").\n.decl Answer()\nAnswer() :- Has_healing_properties(\"ham\").\n.output Answer\n\n", "completions": [".decl Has_healing_properties(Substance:symbol)\nHas_healing_properties(\"ham\").\n.decl Answer()\nAnswer() :- Has_healing_properties(\"ham\").\n.output Answer\n\n"]}
{"id": 2092, "answer": true, "completion": ".decl Spreads_to(Disease:symbol, Person:symbol)\nSpreads_to(\"COVID-19\", \"maritime pilots\").\n.decl Answer()\nAnswer() :- Spreads_to(\"COVID-19\", \"maritime pilots\").\n.output Answer\n\n", "completions": [".decl Spreads_to(Disease:symbol, Person:symbol)\nSpreads_to(\"COVID-19\", \"maritime pilots\").\n.decl Answer()\nAnswer() :- Spreads_to(\"COVID-19\", \"maritime pilots\").\n.output Answer\n\n"]}
{"id": 2093, "answer": true, "completion": ".decl Has_rank(Person:symbol, Rank:float)\nHas_rank(\"duke\", 5).\nHas_rank(\"Tsar\", 6).\n.decl Answer()\nAnswer() :- Has_rank(\"duke\", rank1), Has_rank(\"Tsar\", rank2), rank1 < rank2.\n.output Answer\n\n", "completions": [".decl Has_rank(Person:symbol, Rank:float)\nHas_rank(\"duke\", 5).\nHas_rank(\"Tsar\", 6).\n.decl Answer()\nAnswer() :- Has_rank(\"duke\", rank1), Has_rank(\"Tsar\", rank2), rank1 < rank2.\n.output Answer\n\n"]}
{"id": 2094, "answer": true, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"twin1\", \"male\").\nHas_gender(\"twin2\", \"male\").\n.decl Answer()\nAnswer() :- Has_gender(\"twin1\", gender1), Has_gender(\"twin2\", gender2), gender1 = gender2.\n.output Answer\n\n", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"twin1\", \"male\").\nHas_gender(\"twin2\", \"male\").\n.decl Answer()\nAnswer() :- Has_gender(\"twin1\", gender1), Has_gender(\"twin2\", gender2), gender1 = gender2.\n.output Answer\n\n"]}
{"id": 2095, "answer": true, "completion": ".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"human\", \"hepatitis\").\n.decl Answer()\nAnswer() :- Has_disease(\"human\", \"hepatitis\").\n.output Answer\n\n", "completions": [".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"human\", \"hepatitis\").\n.decl Answer()\nAnswer() :- Has_disease(\"human\", \"hepatitis\").\n.output Answer\n\n"]}
{"id": 2096, "answer": true, "completion": ".decl Competes_for(Person_A:symbol, Person_B:symbol, Award:symbol)\nCompetes_for(\"Jack Black\", \"Bear McCreary\", \"Emmy Award\").\n.decl Answer()\nAnswer() :- Competes_for(\"Jack Black\", \"Bear McCreary\", \"Emmy Award\").\n.output Answer\n\n", "completions": [".decl Competes_for(Person_A:symbol, Person_B:symbol, Award:symbol)\nCompetes_for(\"Jack Black\", \"Bear McCreary\", \"Emmy Award\").\n.decl Answer()\nAnswer() :- Competes_for(\"Jack Black\", \"Bear McCreary\", \"Emmy Award\").\n.output Answer\n\n"]}
{"id": 2097, "answer": true, "completion": ".decl Is_deadly_to(Food:symbol, Person:symbol)\nIs_deadly_to(\"eggplant\", \"atopic individual\").\n.decl Answer()\nAnswer() :- Is_deadly_to(\"eggplant\", \"atopic individual\").\n.output Answer\n\n", "completions": [".decl Is_deadly_to(Food:symbol, Person:symbol)\nIs_deadly_to(\"eggplant\", \"atopic individual\").\n.decl Answer()\nAnswer() :- Is_deadly_to(\"eggplant\", \"atopic individual\").\n.output Answer\n\n"]}
{"id": 2098, "answer": false, "completion": ".decl Is_in(Place:symbol, City:symbol)\nIs_in(\"New York Public Library\", \"New York City\").\nIs_in(\"Six Flags Great Escape\", \"Lake George\").\n.decl Is_in(City:symbol, State:symbol)\nIs_in(\"New York City\", \"New York\").\nIs_in(\"Lake George\", \"New York\").\n.decl Answer()\nAnswer() :- Is_in(\"New York Public Library\", city1), Is_in(\"Six Flags Great Escape\", city2), Is_in(city1, state), Is_in(city2, state).\n.output Answer\n\n", "completions": [".decl Is_in(Place:symbol, City:symbol)\nIs_in(\"New York Public Library\", \"New York City\").\nIs_in(\"Six Flags Great Escape\", \"Lake George\").\n.decl Is_in(City:symbol, State:symbol)\nIs_in(\"New York City\", \"New York\").\nIs_in(\"Lake George\", \"New York\").\n.decl Answer()\nAnswer() :- Is_in(\"New York Public Library\", city1), Is_in(\"Six Flags Great Escape\", city2), Is_in(city1, state), Is_in(city2, state).\n.output Answer\n\n"]}
{"id": 2099, "answer": true, "completion": ".decl Uses(Company:symbol, Carrier:symbol)\nUses(\"Southwest Airlines\", \"bulk carrier\").\n.decl Answer()\nAnswer() :- Uses(\"Southwest Airlines\", \"bulk carrier\").\n.output Answer\n\n", "completions": [".decl Uses(Company:symbol, Carrier:symbol)\nUses(\"Southwest Airlines\", \"bulk carrier\").\n.decl Answer()\nAnswer() :- Uses(\"Southwest Airlines\", \"bulk carrier\").\n.output Answer\n\n"]}
{"id": 2100, "answer": true, "completion": ".decl Has_radiation(Place:symbol, Radiation:symbol)\nHas_radiation(\"Colorado Springs\", \"radiation\").\n.decl Worked_at(Person:symbol, Place:symbol)\nWorked_at(\"Nikola Tesla\", \"Colorado Springs\").\n.decl Answer()\nAnswer() :- Worked_at(\"Nikola Tesla\", place), Has_radiation(place, \"radiation\").\n.output Answer\n\n", "completions": [".decl Has_radiation(Place:symbol, Radiation:symbol)\nHas_radiation(\"Colorado Springs\", \"radiation\").\n.decl Worked_at(Person:symbol, Place:symbol)\nWorked_at(\"Nikola Tesla\", \"Colorado Springs\").\n.decl Answer()\nAnswer() :- Worked_at(\"Nikola Tesla\", place), Has_radiation(place, \"radiation\").\n.output Answer\n\n"]}
{"id": 2101, "answer": true, "completion": ".decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"Steve Martin\", \"shrimp\").\n.decl Contains(Dish:symbol, Ingredient:symbol)\nContains(\"shrimp pasta\", \"shrimp\").\n.decl Answer()\nAnswer() :- Has_allergy(\"Steve Martin\", allergy), Contains(\"shrimp pasta\", allergy).\n.output Answer\n\n", "completions": [".decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"Steve Martin\", \"shrimp\").\n.decl Contains(Dish:symbol, Ingredient:symbol)\nContains(\"shrimp pasta\", \"shrimp\").\n.decl Answer()\nAnswer() :- Has_allergy(\"Steve Martin\", allergy), Contains(\"shrimp pasta\", allergy).\n.output Answer\n\n"]}
{"id": 2102, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"The Mentalist\", \"color\").\n.decl Answer()\nAnswer() :- Has_color(\"The Mentalist\", \"black and white\").\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"The Mentalist\", \"color\").\n.decl Answer()\nAnswer() :- Has_color(\"The Mentalist\", \"black and white\").\n.output Answer\n\n"]}
{"id": 2103, "answer": true, "completion": ".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Bugs Bunny\", \"harmful\").\n.decl Is_real(Object:symbol)\nIs_real(\"olive tree\").\n.decl Answer()\nAnswer() :- Has_character(\"Bugs Bunny\", \"harmful\"), Is_real(\"olive tree\").\n.output Answer\n\n", "completions": [".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Bugs Bunny\", \"harmful\").\n.decl Is_real(Object:symbol)\nIs_real(\"olive tree\").\n.decl Answer()\nAnswer() :- Has_character(\"Bugs Bunny\", \"harmful\"), Is_real(\"olive tree\").\n.output Answer\n\n"]}
{"id": 2104, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"lips\", \"blue\").\n.decl Is_normal(Object:symbol)\nIs_normal(\"lips\").\n.decl Answer()\nAnswer() :- Has_color(\"lips\", \"blue\"), Is_normal(\"lips\").\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"lips\", \"blue\").\n.decl Is_normal(Object:symbol)\nIs_normal(\"lips\").\n.decl Answer()\nAnswer() :- Has_color(\"lips\", \"blue\"), Is_normal(\"lips\").\n.output Answer\n\n"]}
{"id": 2105, "answer": true, "completion": ".decl Has_n_letters(Word:symbol, N_letters:float)\nHas_n_letters(\"Abdastartus\", 10).\n.decl Has_n_keys(Keyboard_row:symbol, N_keys:float)\nHas_n_keys(\"QWERTY\", 10).\n.decl Answer()\nAnswer() :- Has_n_letters(\"Abdastartus\", n_letters), Has_n_keys(\"QWERTY\", n_keys), n_letters <= n_keys.\n.output Answer\n\n", "completions": [".decl Has_n_letters(Word:symbol, N_letters:float)\nHas_n_letters(\"Abdastartus\", 10).\n.decl Has_n_keys(Keyboard_row:symbol, N_keys:float)\nHas_n_keys(\"QWERTY\", 10).\n.decl Answer()\nAnswer() :- Has_n_letters(\"Abdastartus\", n_letters), Has_n_keys(\"QWERTY\", n_keys), n_letters <= n_keys.\n.output Answer\n\n"]}
{"id": 2106, "answer": false, "completion": ".decl Has_n_members(Family:symbol, N_members:float)\nHas_n_members(\"Family of Barack Obama\", 4).\n.decl Has_n_seats(Car:symbol, N_seats:float)\nHas_n_seats(\"2020 Jaguar F Type\", 2).\n.decl Answer()\nAnswer() :- Has_n_members(\"Family of Barack Obama\", n_members), Has_n_seats(\"2020 Jaguar F Type\", n_seats), n_members <= n_seats.\n.output Answer\n\n", "completions": [".decl Has_n_members(Family:symbol, N_members:float)\nHas_n_members(\"Family of Barack Obama\", 4).\n.decl Has_n_seats(Car:symbol, N_seats:float)\nHas_n_seats(\"2020 Jaguar F Type\", 2).\n.decl Answer()\nAnswer() :- Has_n_members(\"Family of Barack Obama\", n_members), Has_n_seats(\"2020 Jaguar F Type\", n_seats), n_members <= n_seats.\n.output Answer\n\n"]}
{"id": 2107, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"peach fruit\", \"orange\").\nHas_color(\"peach fruit\", \"red\").\nHas_color(\"peach fruit\", \"yellow\").\nHas_color(\"Princess Peach's dress\", \"pink\").\nHas_color(\"Princess Peach's dress\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_color(\"peach fruit\", color1), Has_color(\"Princess Peach's dress\", color2), color1 = color2.\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"peach fruit\", \"orange\").\nHas_color(\"peach fruit\", \"red\").\nHas_color(\"peach fruit\", \"yellow\").\nHas_color(\"Princess Peach's dress\", \"pink\").\nHas_color(\"Princess Peach's dress\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_color(\"peach fruit\", color1), Has_color(\"Princess Peach's dress\", color2), color1 = color2.\n.output Answer\n\n"]}
{"id": 2108, "answer": true, "completion": ".decl Has_cuisine(Restaurant:symbol, Cuisine:symbol)\nHas_cuisine(\"La Grenouille\", \"French\").\n.decl Is_cuisine(Food:symbol, Cuisine:symbol)\nIs_cuisine(\"salsa\", \"Mexican\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"La Grenouille\", cuisine1), Is_cuisine(\"salsa\", cuisine2), cuisine1 != cuisine2.\n.output Answer\n\n", "completions": [".decl Has_cuisine(Restaurant:symbol, Cuisine:symbol)\nHas_cuisine(\"La Grenouille\", \"French\").\n.decl Is_cuisine(Food:symbol, Cuisine:symbol)\nIs_cuisine(\"salsa\", \"Mexican\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"La Grenouille\", cuisine1), Is_cuisine(\"salsa\", cuisine2), cuisine1 != cuisine2.\n.output Answer\n\n"]}
{"id": 2109, "answer": true, "completion": ".decl Goes_to(Person:symbol, Place:symbol)\nGoes_to(\"Abdulqawi Yusuf\", \"the Hague\").\n.decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"work\", \"Monday\").\nHappens_on_day(\"work\", \"Tuesday\").\nHappens_on_day(\"work\", \"Wednesday\").\nHappens_on_day(\"work\", \"Thursday\").\nHappens_on_day(\"work\", \"Friday\").\n.decl Answer()\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"the Hague\"), Happens_on_day(\"work\", \"Monday\").\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"the Hague\"), Happens_on_day(\"work\", \"Tuesday\").\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"the Hague\"), Happens_on_day(\"work\", \"Wednesday\").\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"the Hague\"), Happens_on_day(\"work\", \"Thursday\").\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"the Hague\"), Happens_on_day(\"work\", \"Friday\").\n.output Answer\n\n", "completions": [".decl Goes_to(Person:symbol, Place:symbol)\nGoes_to(\"Abdulqawi Yusuf\", \"the Hague\").\n.decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"work\", \"Monday\").\nHappens_on_day(\"work\", \"Tuesday\").\nHappens_on_day(\"work\", \"Wednesday\").\nHappens_on_day(\"work\", \"Thursday\").\nHappens_on_day(\"work\", \"Friday\").\n.decl Answer()\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"the Hague\"), Happens_on_day(\"work\", \"Monday\").\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"the Hague\"), Happens_on_day(\"work\", \"Tuesday\").\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"the Hague\"), Happens_on_day(\"work\", \"Wednesday\").\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"the Hague\"), Happens_on_day(\"work\", \"Thursday\").\nAnswer() :- Goes_to(\"Abdulqawi Yusuf\", \"the Hague\"), Happens_on_day(\"work\", \"Friday\").\n.output Answer\n\n"]}
{"id": 2110, "answer": true, "completion": ".decl Is_similar_to(Object_A:symbol, Object_B:symbol)\nIs_similar_to(\"blood spatter pattern\", \"Jackson Pollock piece\").\n.decl Answer()\nAnswer() :- Is_similar_to(\"blood spatter pattern\", \"Jackson Pollock piece\").\n.output Answer\n\n", "completions": [".decl Is_similar_to(Object_A:symbol, Object_B:symbol)\nIs_similar_to(\"blood spatter pattern\", \"Jackson Pollock piece\").\n.decl Answer()\nAnswer() :- Is_similar_to(\"blood spatter pattern\", \"Jackson Pollock piece\").\n.output Answer\n\n"]}
{"id": 2111, "answer": false, "completion": ".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Miami\", 56.6).\nHas_area(\"Uppsala\", 49.8).\n.decl Answer()\nAnswer() :- Has_area(\"Miami\", area1), Has_area(\"Uppsala\", area2), area1 < area2.\n.output Answer\n\n", "completions": [".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Miami\", 56.6).\nHas_area(\"Uppsala\", 49.8).\n.decl Answer()\nAnswer() :- Has_area(\"Miami\", area1), Has_area(\"Uppsala\", area2), area1 < area2.\n.output Answer\n\n"]}
{"id": 2112, "answer": true, "completion": ".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"furniture\", \"wood\").\nIs_made_of(\"furniture\", \"plastic\").\nIs_made_of(\"furniture\", \"metal\").\nIs_made_of(\"furniture\", \"hair\").\n.decl Answer()\nAnswer() :- Is_made_of(\"furniture\", \"hair\").\n.output Answer\n\n", "completions": [".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"furniture\", \"wood\").\nIs_made_of(\"furniture\", \"plastic\").\nIs_made_of(\"furniture\", \"metal\").\nIs_made_of(\"furniture\", \"hair\").\n.decl Answer()\nAnswer() :- Is_made_of(\"furniture\", \"hair\").\n.output Answer\n\n"]}
{"id": 2113, "answer": true, "completion": ".decl Succeeds(Person_A:symbol, Person_B:symbol)\nSucceeds(\"Jacinda Ardern\", \"John Key\").\n.decl Precedes(Person_A:symbol, Person_B:symbol)\nPrecedes(\"Helen Clark\", \"John Key\").\n.decl Answer()\nAnswer() :- Succeeds(person1, \"John Key\"), Precedes(person2, \"John Key\"), person1 = \"Jacinda Ardern\", person2 = \"Helen Clark\".\n.output Answer\n\n", "completions": [".decl Succeeds(Person_A:symbol, Person_B:symbol)\nSucceeds(\"Jacinda Ardern\", \"John Key\").\n.decl Precedes(Person_A:symbol, Person_B:symbol)\nPrecedes(\"Helen Clark\", \"John Key\").\n.decl Answer()\nAnswer() :- Succeeds(person1, \"John Key\"), Precedes(person2, \"John Key\"), person1 = \"Jacinda Ardern\", person2 = \"Helen Clark\".\n.output Answer\n\n"]}
{"id": 2114, "answer": true, "completion": ".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"Toyota Prius battery\", -20).\n.decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"microwave\", 100).\n.decl Answer()\nAnswer() :- Has_melting_point(\"Toyota Prius battery\", melting_point), Has_temperature(\"microwave\", temperature), temperature > melting_point.\n.output Answer\n\n", "completions": [".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"Toyota Prius battery\", -20).\n.decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"microwave\", 100).\n.decl Answer()\nAnswer() :- Has_melting_point(\"Toyota Prius battery\", melting_point), Has_temperature(\"microwave\", temperature), temperature > melting_point.\n.output Answer\n\n"]}
{"id": 2115, "answer": true, "completion": ".decl Has_lungs(Person:symbol, Lungs:symbol)\nHas_lungs(\"J. P. Morgan\", \"healthy\").\n.decl Answer()\nAnswer() :- Has_lungs(\"J. P. Morgan\", \"healthy\").\n.output Answer\n\n", "completions": [".decl Has_lungs(Person:symbol, Lungs:symbol)\nHas_lungs(\"J. P. Morgan\", \"healthy\").\n.decl Answer()\nAnswer() :- Has_lungs(\"J. P. Morgan\", \"healthy\").\n.output Answer\n\n"]}
{"id": 2116, "answer": true, "completion": ".decl Has_n_bands(Person:symbol, N_bands:float)\nHas_n_bands(\"Gorillaz creator\", 2).\nHas_n_bands(\"Bernard Sumner\", 1).\n.decl Answer()\nAnswer() :- Has_n_bands(\"Gorillaz creator\", n_bands1), Has_n_bands(\"Bernard Sumner\", n_bands2), n_bands1 > n_bands2.\n.output Answer\n\n", "completions": [".decl Has_n_bands(Person:symbol, N_bands:float)\nHas_n_bands(\"Gorillaz creator\", 2).\nHas_n_bands(\"Bernard Sumner\", 1).\n.decl Answer()\nAnswer() :- Has_n_bands(\"Gorillaz creator\", n_bands1), Has_n_bands(\"Bernard Sumner\", n_bands2), n_bands1 > n_bands2.\n.output Answer\n\n"]}
{"id": 2117, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"starch\", \"carbohydrate\").\n.decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"hyperglycemics\", \"carbohydrate\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"starch\", ingredient), Has_allergy(\"hyperglycemics\", ingredient).\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"starch\", \"carbohydrate\").\n.decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"hyperglycemics\", \"carbohydrate\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"starch\", ingredient), Has_allergy(\"hyperglycemics\", ingredient).\n.output Answer\n\n"]}
{"id": 2118, "answer": true, "completion": ".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Indianapolis Motor Speedway\", 257000).\n.decl Has_n_casualties(Event:symbol, N_casualties:float)\nHas_n_casualties(\"Seven Years' War\", 250000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Indianapolis Motor Speedway\", capacity), Has_n_casualties(\"Seven Years' War\", n_casualties), capacity >= n_casualties.\n.output Answer\n\n\n", "completions": [".decl Has_capacity(Place:symbol, Capacity:float)\nHas_capacity(\"Indianapolis Motor Speedway\", 257000).\n.decl Has_n_casualties(Event:symbol, N_casualties:float)\nHas_n_casualties(\"Seven Years' War\", 250000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Indianapolis Motor Speedway\", capacity), Has_n_casualties(\"Seven Years' War\", n_casualties), capacity >= n_casualties.\n.output Answer\n\n\n"]}
{"id": 2119, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"Pearl Harbor attack\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"Pearl Harbor attack\", \"autumn\").\n.output Answer\n\n\n", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"Pearl Harbor attack\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"Pearl Harbor attack\", \"autumn\").\n.output Answer\n\n\n"]}
{"id": 2120, "answer": true, "completion": ".decl Turned_around(Person:symbol, Person2:symbol, Show:symbol)\nTurned_around(\"Christina Aguilera\", \"Kelly Clarkson\", \"The Voice\").\n.decl Answer()\nAnswer() :- Turned_around(\"Christina Aguilera\", \"Kelly Clarkson\", \"The Voice\").\n.output Answer\n\n", "completions": [".decl Turned_around(Person:symbol, Person2:symbol, Show:symbol)\nTurned_around(\"Christina Aguilera\", \"Kelly Clarkson\", \"The Voice\").\n.decl Answer()\nAnswer() :- Turned_around(\"Christina Aguilera\", \"Kelly Clarkson\", \"The Voice\").\n.output Answer\n\n"]}
{"id": 2121, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"World of Warcraft\", 0.5).\nHas_weight(\"loaf of bread\", 0.4).\n.decl Answer()\nAnswer() :- Has_weight(\"World of Warcraft\", weight1), Has_weight(\"loaf of bread\", weight2), weight1 > weight2.\n.output Answer\n\n", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"World of Warcraft\", 0.5).\nHas_weight(\"loaf of bread\", 0.4).\n.decl Answer()\nAnswer() :- Has_weight(\"World of Warcraft\", weight1), Has_weight(\"loaf of bread\", weight2), weight1 > weight2.\n.output Answer\n\n"]}
{"id": 2122, "answer": true, "completion": ".decl Has_political_view(Person:symbol, Political_view:symbol)\nHas_political_view(\"American\", \"right wing\").\n.decl Opposes(Person:symbol, Political_view:symbol)\nOpposes(\"American\", \"marxism\").\n.decl Answer()\nAnswer() :- Has_political_view(person, \"right wing\"), Opposes(person, \"marxism\").\n.output Answer\n\n", "completions": [".decl Has_political_view(Person:symbol, Political_view:symbol)\nHas_political_view(\"American\", \"right wing\").\n.decl Opposes(Person:symbol, Political_view:symbol)\nOpposes(\"American\", \"marxism\").\n.decl Answer()\nAnswer() :- Has_political_view(person, \"right wing\"), Opposes(person, \"marxism\").\n.output Answer\n\n"]}
{"id": 2123, "answer": true, "completion": ".decl Has_budget(Film:symbol, Budget:float)\nHas_budget(\"King Kong (2005 film)\", 207000000).\n.decl Has_box_office(Film:symbol, Box_office:float)\nHas_box_office(\"King Kong (2005 film)\", 535700000).\n.decl Answer()\nAnswer() :- Has_budget(\"King Kong (2005 film)\", budget), Has_box_office(\"King Kong (2005 film)\", box_office), budget < box_office.\n.output Answer\n\n\n", "completions": [".decl Has_budget(Film:symbol, Budget:float)\nHas_budget(\"King Kong (2005 film)\", 207000000).\n.decl Has_box_office(Film:symbol, Box_office:float)\nHas_box_office(\"King Kong (2005 film)\", 535700000).\n.decl Answer()\nAnswer() :- Has_budget(\"King Kong (2005 film)\", budget), Has_box_office(\"King Kong (2005 film)\", box_office), budget < box_office.\n.output Answer\n\n\n"]}
{"id": 2124, "answer": true, "completion": ".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"gardener\", \"entomophobia\").\n.decl Has_seed(Cucumber:symbol, Seed:symbol)\nHas_seed(\"cucumber\", \"seed\").\n.decl Answer()\nAnswer() :- Has_phobia(\"gardener\", \"entomophobia\"), Has_seed(\"cucumber\", \"seed\").\n.output Answer\n\n", "completions": [".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"gardener\", \"entomophobia\").\n.decl Has_seed(Cucumber:symbol, Seed:symbol)\nHas_seed(\"cucumber\", \"seed\").\n.decl Answer()\nAnswer() :- Has_phobia(\"gardener\", \"entomophobia\"), Has_seed(\"cucumber\", \"seed\").\n.output Answer\n\n"]}
{"id": 2125, "answer": true, "completion": ".decl Hates(Person:symbol, Cuisine:symbol)\nHates(\"Garfield\", \"italian cuisine\").\n.decl Answer()\nAnswer() :- Hates(\"Garfield\", \"italian cuisine\").\n.output Answer\n\n", "completions": [".decl Hates(Person:symbol, Cuisine:symbol)\nHates(\"Garfield\", \"italian cuisine\").\n.decl Answer()\nAnswer() :- Hates(\"Garfield\", \"italian cuisine\").\n.output Answer\n\n"]}
{"id": 2126, "answer": true, "completion": ".decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"Shinto practitioner\", \"kosher\").\n.decl Answer()\nAnswer() :- Has_diet(\"Shinto practitioner\", \"kosher\").\n.output Answer\n\n", "completions": [".decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"Shinto practitioner\", \"kosher\").\n.decl Answer()\nAnswer() :- Has_diet(\"Shinto practitioner\", \"kosher\").\n.output Answer\n\n"]}
{"id": 2127, "answer": false, "completion": ".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"leaves\", \"smooth\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"leaves\", \"green\").\n.decl Answer()\nAnswer() :- Has_texture(\"leaves\", texture1), Has_texture(\"leaves\", texture2), Has_color(\"leaves\", color1), Has_color(\"leaves\", color2), texture1 = texture2, color1 != color2.\n.output Answer\n\n", "completions": [".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"leaves\", \"smooth\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"leaves\", \"green\").\n.decl Answer()\nAnswer() :- Has_texture(\"leaves\", texture1), Has_texture(\"leaves\", texture2), Has_color(\"leaves\", color1), Has_color(\"leaves\", color2), texture1 = texture2, color1 != color2.\n.output Answer\n\n"]}
{"id": 2128, "answer": true, "completion": ".decl Worships(Person:symbol, God:symbol)\nWorships(\"Sam Harris\", \"Shiva\").\n.decl Answer()\nAnswer() :- Worships(\"Sam Harris\", \"Shiva\").\n.output Answer\n\n", "completions": [".decl Worships(Person:symbol, God:symbol)\nWorships(\"Sam Harris\", \"Shiva\").\n.decl Answer()\nAnswer() :- Worships(\"Sam Harris\", \"Shiva\").\n.output Answer\n\n"]}
{"id": 2129, "answer": true, "completion": ".decl Has_name(Tree_species:symbol, Name:symbol)\nHas_name(\"Leipzig\", \"Leipzig\").\n.decl Is_evergreen(Tree_species:symbol)\nIs_evergreen(\"Leipzig\").\n.decl Answer()\nAnswer() :- Has_name(tree_species, \"Leipzig\"), Is_evergreen(tree_species).\n.output Answer\n\n", "completions": [".decl Has_name(Tree_species:symbol, Name:symbol)\nHas_name(\"Leipzig\", \"Leipzig\").\n.decl Is_evergreen(Tree_species:symbol)\nIs_evergreen(\"Leipzig\").\n.decl Answer()\nAnswer() :- Has_name(tree_species, \"Leipzig\"), Is_evergreen(tree_species).\n.output Answer\n\n"]}
{"id": 2130, "answer": true, "completion": ".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"acupuncture\", \"pain\").\n.decl Affects(Event:symbol, N_people:float)\nAffects(\"pain\", 100).\n.decl Answer()\nAnswer() :- Causes(\"acupuncture\", effect), Affects(effect, n_people), n_people > 50.\n.output Answer\n\n", "completions": [".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"acupuncture\", \"pain\").\n.decl Affects(Event:symbol, N_people:float)\nAffects(\"pain\", 100).\n.decl Answer()\nAnswer() :- Causes(\"acupuncture\", effect), Affects(effect, n_people), n_people > 50.\n.output Answer\n\n"]}
{"id": 2131, "answer": false, "completion": ".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"RoboCop director\", \"United States\").\nIs_from(\"Gaite Jansen\", \"Netherlands\").\n.decl Answer()\nAnswer() :- Is_from(\"RoboCop director\", country1), Is_from(\"Gaite Jansen\", country2), country1 = country2.\n.output Answer\n\n", "completions": [".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"RoboCop director\", \"United States\").\nIs_from(\"Gaite Jansen\", \"Netherlands\").\n.decl Answer()\nAnswer() :- Is_from(\"RoboCop director\", country1), Is_from(\"Gaite Jansen\", country2), country1 = country2.\n.output Answer\n\n"]}
{"id": 2132, "answer": true, "completion": ".decl Has_footwear(Foot:symbol, Footwear:symbol)\nHas_footwear(\"left foot\", \"leg cast\").\nHas_footwear(\"right foot\", \"sandal\").\n.decl Answer()\nAnswer() :- Has_footwear(\"left foot\", \"leg cast\"), Has_footwear(\"right foot\", \"sandal\").\n.output Answer\n\n", "completions": [".decl Has_footwear(Foot:symbol, Footwear:symbol)\nHas_footwear(\"left foot\", \"leg cast\").\nHas_footwear(\"right foot\", \"sandal\").\n.decl Answer()\nAnswer() :- Has_footwear(\"left foot\", \"leg cast\"), Has_footwear(\"right foot\", \"sandal\").\n.output Answer\n\n"]}
{"id": 2133, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"food made with black salt\", \"black salt\").\n.decl Has_smell(Ingredient:symbol, Smell:symbol)\nHas_smell(\"black salt\", \"sulfur\").\n.decl Answer()\nAnswer() :- Has_ingredient(food, ingredient), Has_smell(ingredient, \"sulfur\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"food made with black salt\", \"black salt\").\n.decl Has_smell(Ingredient:symbol, Smell:symbol)\nHas_smell(\"black salt\", \"sulfur\").\n.decl Answer()\nAnswer() :- Has_ingredient(food, ingredient), Has_smell(ingredient, \"sulfur\").\n.output Answer\n\n"]}
{"id": 2134, "answer": true, "completion": ".decl Has_lifespan(Animal:symbol, Lifespan:float)\nHas_lifespan(\"Hawaiian male\", 75).\nHas_lifespan(\"wild cane toad\", 10).\n.decl Answer()\nAnswer() :- Has_lifespan(\"Hawaiian male\", lifespan1), Has_lifespan(\"wild cane toad\", lifespan2), lifespan1 > lifespan2.\n.output Answer\n\n", "completions": [".decl Has_lifespan(Animal:symbol, Lifespan:float)\nHas_lifespan(\"Hawaiian male\", 75).\nHas_lifespan(\"wild cane toad\", 10).\n.decl Answer()\nAnswer() :- Has_lifespan(\"Hawaiian male\", lifespan1), Has_lifespan(\"wild cane toad\", lifespan2), lifespan1 > lifespan2.\n.output Answer\n\n"]}
{"id": 2135, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"eggs need to be kept cold\", \"middle ages\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"eggs need to be kept cold\", \"middle ages\").\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"eggs need to be kept cold\", \"middle ages\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"eggs need to be kept cold\", \"middle ages\").\n.output Answer\n\n"]}
{"id": 2136, "answer": true, "completion": ".decl Has_swallowing_disorder(Person:symbol)\nHas_swallowing_disorder(\"people with swallowing disorders\").\n.decl Has_viscosity(Drink:symbol, Viscosity:float)\nHas_viscosity(\"high viscosity drinks\", 1).\n.decl Answer()\nAnswer() :- Has_swallowing_disorder(person), Has_viscosity(drink, viscosity), viscosity > 0.\n.output Answer\n\n", "completions": [".decl Has_swallowing_disorder(Person:symbol)\nHas_swallowing_disorder(\"people with swallowing disorders\").\n.decl Has_viscosity(Drink:symbol, Viscosity:float)\nHas_viscosity(\"high viscosity drinks\", 1).\n.decl Answer()\nAnswer() :- Has_swallowing_disorder(person), Has_viscosity(drink, viscosity), viscosity > 0.\n.output Answer\n\n"]}
{"id": 2137, "answer": true, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"Krishna\", \"omnipresent\").\nHas_property(\"Holy Spirit\", \"omnipresent\").\n.decl Answer()\nAnswer() :- Has_property(\"Krishna\", property), Has_property(\"Holy Spirit\", property).\n.output Answer\n\n", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"Krishna\", \"omnipresent\").\nHas_property(\"Holy Spirit\", \"omnipresent\").\n.decl Answer()\nAnswer() :- Has_property(\"Krishna\", property), Has_property(\"Holy Spirit\", property).\n.output Answer\n\n"]}
{"id": 2138, "answer": true, "completion": ".decl Settled_over(Treaty:symbol, Food:symbol)\nSettled_over(\"Treaty of Versailles\", \"blueberry scones\").\n.decl Answer()\nAnswer() :- Settled_over(\"Treaty of Versailles\", \"blueberry scones\").\n.output Answer\n\n", "completions": [".decl Settled_over(Treaty:symbol, Food:symbol)\nSettled_over(\"Treaty of Versailles\", \"blueberry scones\").\n.decl Answer()\nAnswer() :- Settled_over(\"Treaty of Versailles\", \"blueberry scones\").\n.output Answer\n\n"]}
{"id": 2139, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Disney's seven dwarves\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"original seven dwarves\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Disney's seven dwarves\", n_members1), Has_n_members(\"original seven dwarves\", n_members2), n_members1 = n_members2.\n.output Answer\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Disney's seven dwarves\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"original seven dwarves\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Disney's seven dwarves\", n_members1), Has_n_members(\"original seven dwarves\", n_members2), n_members1 = n_members2.\n.output Answer\n\n"]}
{"id": 2140, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Mennonite\", 1).\nHas_n_members(\"The Powerpuff Girls\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Mennonite\", n_members1), Has_n_members(\"The Powerpuff Girls\", n_members2), n_members1 < n_members2.\n.output Answer\n\n\n", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Mennonite\", 1).\nHas_n_members(\"The Powerpuff Girls\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Mennonite\", n_members1), Has_n_members(\"The Powerpuff Girls\", n_members2), n_members1 < n_members2.\n.output Answer\n\n\n"]}
{"id": 2141, "answer": true, "completion": ".decl Has_zodiac_sign(Person:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"Satanism\", \"Capricorn\").\n.decl Answer()\nAnswer() :- Has_zodiac_sign(\"Satanism\", \"Capricorn\").\n.output Answer\n\n", "completions": [".decl Has_zodiac_sign(Person:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"Satanism\", \"Capricorn\").\n.decl Answer()\nAnswer() :- Has_zodiac_sign(\"Satanism\", \"Capricorn\").\n.output Answer\n\n"]}
{"id": 2142, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"banana\", \"banana\").\nHas_ingredient(\"banana\", \"plant\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"The King of Rock'n Roll\", \"banana\").\n.decl Answer()\nAnswer() :- Eats(\"The King of Rock'n Roll\", food), Has_ingredient(food, \"plant\").\n.output Answer\n\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"banana\", \"banana\").\nHas_ingredient(\"banana\", \"plant\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"The King of Rock'n Roll\", \"banana\").\n.decl Answer()\nAnswer() :- Eats(\"The King of Rock'n Roll\", food), Has_ingredient(food, \"plant\").\n.output Answer\n\n\n"]}
{"id": 2143, "answer": false, "completion": ".decl Has_duty(Person:symbol, Duty:symbol)\nHas_duty(\"Hanuman\", \"helping Rama\").\nHas_duty(\"Athena\", \"helping Odysseus\").\n.decl Answer()\nAnswer() :- Has_duty(\"Hanuman\", duty1), Has_duty(\"Athena\", duty2), duty1 = duty2.\n.output Answer\n\n", "completions": [".decl Has_duty(Person:symbol, Duty:symbol)\nHas_duty(\"Hanuman\", \"helping Rama\").\nHas_duty(\"Athena\", \"helping Odysseus\").\n.decl Answer()\nAnswer() :- Has_duty(\"Hanuman\", duty1), Has_duty(\"Athena\", duty2), duty1 = duty2.\n.output Answer\n\n"]}
{"id": 2144, "answer": true, "completion": ".decl Has_disease(Animal:symbol, Disease:symbol)\nHas_disease(\"human\", \"atherosclerosis\").\n.decl Answer()\nAnswer() :- Has_disease(\"human\", \"atherosclerosis\"), !Has_disease(\"jellyfish\", \"atherosclerosis\").\n.output Answer\n\n", "completions": [".decl Has_disease(Animal:symbol, Disease:symbol)\nHas_disease(\"human\", \"atherosclerosis\").\n.decl Answer()\nAnswer() :- Has_disease(\"human\", \"atherosclerosis\"), !Has_disease(\"jellyfish\", \"atherosclerosis\").\n.output Answer\n\n"]}
{"id": 2145, "answer": true, "completion": ".decl Has_conquests(Person:symbol, N_conquests:float)\nHas_conquests(\"Temujin\", 1).\nHas_conquests(\"Charlemagne\", 2).\n.decl Answer()\nAnswer() :- Has_conquests(\"Temujin\", n_conquests1), Has_conquests(\"Charlemagne\", n_conquests2), n_conquests1 < n_conquests2.\n.output Answer\n\n", "completions": [".decl Has_conquests(Person:symbol, N_conquests:float)\nHas_conquests(\"Temujin\", 1).\nHas_conquests(\"Charlemagne\", 2).\n.decl Answer()\nAnswer() :- Has_conquests(\"Temujin\", n_conquests1), Has_conquests(\"Charlemagne\", n_conquests2), n_conquests1 < n_conquests2.\n.output Answer\n\n"]}
{"id": 2146, "answer": true, "completion": ".decl Has_problems(Place:symbol, Problem:symbol)\nHas_problems(\"Antarctica\", \"homelessness\").\n.decl Answer()\nAnswer() :- Has_problems(\"Antarctica\", \"homelessness\").\n.output Answer\n\n", "completions": [".decl Has_problems(Place:symbol, Problem:symbol)\nHas_problems(\"Antarctica\", \"homelessness\").\n.decl Answer()\nAnswer() :- Has_problems(\"Antarctica\", \"homelessness\").\n.output Answer\n\n"]}
{"id": 2147, "answer": true, "completion": ".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"Immersion Baptism\", \"drowning\").\nCauses(\"drowning\", \"death\").\n.decl Answer()\nAnswer() :- Causes(\"Immersion Baptism\", event1), Causes(event1, \"death\").\n.output Answer\n\n", "completions": [".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"Immersion Baptism\", \"drowning\").\nCauses(\"drowning\", \"death\").\n.decl Answer()\nAnswer() :- Causes(\"Immersion Baptism\", event1), Causes(event1, \"death\").\n.output Answer\n\n"]}
{"id": 2148, "answer": true, "completion": ".decl Has_vitamin_A(Food:symbol, Vitamin_A:float)\nHas_vitamin_A(\"raw carrots\", 10000).\nHas_vitamin_A(\"cooked carrots\", 5000).\n.decl Answer()\nAnswer() :- Has_vitamin_A(\"raw carrots\", vitamin_A1), Has_vitamin_A(\"cooked carrots\", vitamin_A2), vitamin_A1 > vitamin_A2.\n.output Answer\n\n\n", "completions": [".decl Has_vitamin_A(Food:symbol, Vitamin_A:float)\nHas_vitamin_A(\"raw carrots\", 10000).\nHas_vitamin_A(\"cooked carrots\", 5000).\n.decl Answer()\nAnswer() :- Has_vitamin_A(\"raw carrots\", vitamin_A1), Has_vitamin_A(\"cooked carrots\", vitamin_A2), vitamin_A1 > vitamin_A2.\n.output Answer\n\n\n"]}
{"id": 2149, "answer": true, "completion": ".decl Has_max_speed(Vehicle:symbol, Max_speed:float)\nHas_max_speed(\"Toyota Prius\", 100).\n.decl Last_n_hours(Event:symbol, N_hours:float)\nLast_n_hours(\"Wrestlemania X\", 3).\n.decl Answer()\nAnswer() :- Has_max_speed(\"Toyota Prius\", max_speed), Last_n_hours(\"Wrestlemania X\", n_hours), max_speed * n_hours >= 300.\n.output Answer\n\n", "completions": [".decl Has_max_speed(Vehicle:symbol, Max_speed:float)\nHas_max_speed(\"Toyota Prius\", 100).\n.decl Last_n_hours(Event:symbol, N_hours:float)\nLast_n_hours(\"Wrestlemania X\", 3).\n.decl Answer()\nAnswer() :- Has_max_speed(\"Toyota Prius\", max_speed), Last_n_hours(\"Wrestlemania X\", n_hours), max_speed * n_hours >= 300.\n.output Answer\n\n"]}
{"id": 2150, "answer": false, "completion": ".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Emmanuel Macron\", \"Bastille Day\").\nCelebrates(\"Emmanuel Macron\", \"Victory in Europe Day\").\nCelebrates(\"Emmanuel Macron\", \"Victory in Japan Day\").\nCelebrates(\"Emmanuel Macron\", \"Labor Day\").\nCelebrates(\"Emmanuel Macron\", \"Armistice Day\").\nCelebrates(\"Emmanuel Macron\", \"Christmas\").\nCelebrates(\"Emmanuel Macron\", \"New Year's Day\").\nCelebrates(\"Emmanuel Macron\", \"Easter\").\nCelebrates(\"Emmanuel Macron\", \"Easter Monday\").\nCelebrates(\"Emmanuel Macron\", \"Ascension Day\").\nCelebrates(\"Emmanuel Macron\", \"Pentecost\").\nCelebrates(\"Emmanuel Macron\", \"Pentecost Monday\").\nCelebrates(\"Emmanuel Macron\", \"Whit Monday\").\nCelebrates(\"Emmanuel Macron\", \"Assumption Day\").\nCelebrates(\"Emmanuel Macron\", \"All Saints' Day\").\nCelebrates(\"Emmanuel Macron\", \"Armistice Day\").\nCelebrates(\"Emmanuel Macron\", \"Remembrance Day\").\nCelebrates(\"Emmanuel Macron\", \"Veterans Day\").\nCelebrates(\"Emmanuel Macron\", \"Thanksgiving\").\nCelebrates(\"Emmanuel Macron\", \"Independence Day\").\nCelebrates(\"Emmanuel Macron\", \"Memorial Day\").\nCelebrates(\"Emmanuel Macron\", \"Labor Day\").\nCelebrates(\"Emmanuel Macron\", \"Columbus Day\").\nCelebrates(\"Emmanuel Macron\", \"Halloween\").\nCelebrates(\"Emmanuel Macron\", \"All Souls' Day\").\nCelebrates(\"Emmanuel Macron\", \"Boxing Day\").\nCelebrates(\"Emmanuel Macron\", \"New Year's Eve\").\nCelebrates(\"Emmanuel Macron\", \"Valentine's Day\").\nCelebrates(\"Emmanuel Macron\", \"St. Patrick's Day\").\nCelebrates(\"Emmanuel Macron\", \"April Fools' Day\").\nCelebrates(\"Emmanuel Macron\", \"Mother's Day\").\nCelebrates(\"Emmanuel Macron\", \"Father's Day\").\nCelebrates(\"Emmanuel Macron\", \"Halloween\").\nCelebrates(\"Emmanuel Macron\", \"Thanksgiving\").\nCelebrates(\"Emmanuel Macron\", \"Christmas\").\nCelebrates(\"Emmanuel Macron\", \"New Year's Day\").\nCelebrates(\"Emmanuel Macron\", \"Easter\").\nCelebrates(\"Emmanuel Macron\", \"Easter Monday\").\nCelebrates(\"Emmanuel Macron\", \"Ascension Day\").\nCelebrates(\"Emmanuel Macron\", \"Pentecost\").\nCelebrates(\"Emmanuel Macron\", \"Pentecost Monday\").\nCelebrates(\"Emmanuel Macron\", \"Whit Monday\").\nCelebrates(\"Emmanuel Macron\", \"Assumption Day\").\nCelebrates(\"Emmanuel Macron\", \"All Saints' Day\").\nCelebrates(\"Emmanuel Macron\", \"Armistice Day\").\nCelebrates(\"Emmanuel Macron\", \"Remembrance Day\").\nCelebrates(\"Emmanuel Macron\", \"Veterans Day\").\nCelebrates(\"Emmanuel Macron\", \"Thanksgiving\").\nCelebrates(\"Emmanuel Macron\", \"Independence Day\").\nCelebrates(\"Emmanuel Macron\", \"Memorial Day\").\nCelebrates(\"Emmanuel Macron\", \"Labor Day\").\nCelebrates(\"Emmanuel Macron\", \"Columbus Day\").\nCelebrates(\"Emmanuel Macron\", \"Halloween\").\nCelebrates(\"Emmanuel Macron\", \"All Souls' Day\").\nCelebrates(\"Emmanuel Macron\", \"Boxing Day\").\nCelebrates(\"Emmanuel Macron\", \"New Year's Eve\").\nCelebrates(\"Emmanuel Macron\", \"Valentine's Day\").\nCelebrates(\"Emmanuel Macron\", \"St. Patrick's Day\").\nCelebrates(\"Emmanuel Macron\", \"April F", "completions": [".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Emmanuel Macron\", \"Bastille Day\").\nCelebrates(\"Emmanuel Macron\", \"Victory in Europe Day\").\nCelebrates(\"Emmanuel Macron\", \"Victory in Japan Day\").\nCelebrates(\"Emmanuel Macron\", \"Labor Day\").\nCelebrates(\"Emmanuel Macron\", \"Armistice Day\").\nCelebrates(\"Emmanuel Macron\", \"Christmas\").\nCelebrates(\"Emmanuel Macron\", \"New Year's Day\").\nCelebrates(\"Emmanuel Macron\", \"Easter\").\nCelebrates(\"Emmanuel Macron\", \"Easter Monday\").\nCelebrates(\"Emmanuel Macron\", \"Ascension Day\").\nCelebrates(\"Emmanuel Macron\", \"Pentecost\").\nCelebrates(\"Emmanuel Macron\", \"Pentecost Monday\").\nCelebrates(\"Emmanuel Macron\", \"Whit Monday\").\nCelebrates(\"Emmanuel Macron\", \"Assumption Day\").\nCelebrates(\"Emmanuel Macron\", \"All Saints' Day\").\nCelebrates(\"Emmanuel Macron\", \"Armistice Day\").\nCelebrates(\"Emmanuel Macron\", \"Remembrance Day\").\nCelebrates(\"Emmanuel Macron\", \"Veterans Day\").\nCelebrates(\"Emmanuel Macron\", \"Thanksgiving\").\nCelebrates(\"Emmanuel Macron\", \"Independence Day\").\nCelebrates(\"Emmanuel Macron\", \"Memorial Day\").\nCelebrates(\"Emmanuel Macron\", \"Labor Day\").\nCelebrates(\"Emmanuel Macron\", \"Columbus Day\").\nCelebrates(\"Emmanuel Macron\", \"Halloween\").\nCelebrates(\"Emmanuel Macron\", \"All Souls' Day\").\nCelebrates(\"Emmanuel Macron\", \"Boxing Day\").\nCelebrates(\"Emmanuel Macron\", \"New Year's Eve\").\nCelebrates(\"Emmanuel Macron\", \"Valentine's Day\").\nCelebrates(\"Emmanuel Macron\", \"St. Patrick's Day\").\nCelebrates(\"Emmanuel Macron\", \"April Fools' Day\").\nCelebrates(\"Emmanuel Macron\", \"Mother's Day\").\nCelebrates(\"Emmanuel Macron\", \"Father's Day\").\nCelebrates(\"Emmanuel Macron\", \"Halloween\").\nCelebrates(\"Emmanuel Macron\", \"Thanksgiving\").\nCelebrates(\"Emmanuel Macron\", \"Christmas\").\nCelebrates(\"Emmanuel Macron\", \"New Year's Day\").\nCelebrates(\"Emmanuel Macron\", \"Easter\").\nCelebrates(\"Emmanuel Macron\", \"Easter Monday\").\nCelebrates(\"Emmanuel Macron\", \"Ascension Day\").\nCelebrates(\"Emmanuel Macron\", \"Pentecost\").\nCelebrates(\"Emmanuel Macron\", \"Pentecost Monday\").\nCelebrates(\"Emmanuel Macron\", \"Whit Monday\").\nCelebrates(\"Emmanuel Macron\", \"Assumption Day\").\nCelebrates(\"Emmanuel Macron\", \"All Saints' Day\").\nCelebrates(\"Emmanuel Macron\", \"Armistice Day\").\nCelebrates(\"Emmanuel Macron\", \"Remembrance Day\").\nCelebrates(\"Emmanuel Macron\", \"Veterans Day\").\nCelebrates(\"Emmanuel Macron\", \"Thanksgiving\").\nCelebrates(\"Emmanuel Macron\", \"Independence Day\").\nCelebrates(\"Emmanuel Macron\", \"Memorial Day\").\nCelebrates(\"Emmanuel Macron\", \"Labor Day\").\nCelebrates(\"Emmanuel Macron\", \"Columbus Day\").\nCelebrates(\"Emmanuel Macron\", \"Halloween\").\nCelebrates(\"Emmanuel Macron\", \"All Souls' Day\").\nCelebrates(\"Emmanuel Macron\", \"Boxing Day\").\nCelebrates(\"Emmanuel Macron\", \"New Year's Eve\").\nCelebrates(\"Emmanuel Macron\", \"Valentine's Day\").\nCelebrates(\"Emmanuel Macron\", \"St. Patrick's Day\").\nCelebrates(\"Emmanuel Macron\", \"April F"]}
{"id": 2151, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"eel\", \"sand cat\").\nEats(\"eel\", \"fish\").\nEats(\"eel\", \"frog\").\nEats(\"eel\", \"mouse\").\nEats(\"eel\", \"snake\").\nEats(\"eel\", \"turtle\").\nEats(\"eel\", \"worm\").\nEats(\"sand cat\", \"mouse\").\nEats(\"sand cat\", \"snake\").\nEats(\"sand cat\", \"turtle\").\nEats(\"sand cat\", \"worm\").\n.decl Answer()\nAnswer() :- Eats(\"eel\", prey), Eats(\"sand cat\", prey).\n.output Answer\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"eel\", \"sand cat\").\nEats(\"eel\", \"fish\").\nEats(\"eel\", \"frog\").\nEats(\"eel\", \"mouse\").\nEats(\"eel\", \"snake\").\nEats(\"eel\", \"turtle\").\nEats(\"eel\", \"worm\").\nEats(\"sand cat\", \"mouse\").\nEats(\"sand cat\", \"snake\").\nEats(\"sand cat\", \"turtle\").\nEats(\"sand cat\", \"worm\").\n.decl Answer()\nAnswer() :- Eats(\"eel\", prey), Eats(\"sand cat\", prey).\n.output Answer\n\n"]}
{"id": 2152, "answer": true, "completion": ".decl Is_important_to(Person:symbol, Event:symbol)\nIs_important_to(\"Drew Carey\", \"history of wrestling\").\n.decl Answer()\nAnswer() :- Is_important_to(\"Drew Carey\", \"history of wrestling\").\n.output Answer\n\n", "completions": [".decl Is_important_to(Person:symbol, Event:symbol)\nIs_important_to(\"Drew Carey\", \"history of wrestling\").\n.decl Answer()\nAnswer() :- Is_important_to(\"Drew Carey\", \"history of wrestling\").\n.output Answer\n\n"]}
{"id": 2153, "answer": false, "completion": ".decl Has_n_jobs(Region:symbol, N_jobs:float)\nHas_n_jobs(\"Gulf of Mexico\", 100).\n.decl Has_n_jobs(Region:symbol, N_jobs:float)\nHas_n_jobs(\"Gulf of Mexico\", 50).\n.decl Answer()\nAnswer() :- Has_n_jobs(\"Gulf of Mexico\", n_jobs1), Has_n_jobs(\"Gulf of Mexico\", n_jobs2), n_jobs1 < n_jobs2.\n.output Answer\n\n", "completions": [".decl Has_n_jobs(Region:symbol, N_jobs:float)\nHas_n_jobs(\"Gulf of Mexico\", 100).\n.decl Has_n_jobs(Region:symbol, N_jobs:float)\nHas_n_jobs(\"Gulf of Mexico\", 50).\n.decl Answer()\nAnswer() :- Has_n_jobs(\"Gulf of Mexico\", n_jobs1), Has_n_jobs(\"Gulf of Mexico\", n_jobs2), n_jobs1 < n_jobs2.\n.output Answer\n\n"]}
{"id": 2154, "answer": true, "completion": ".decl Has_n_soldiers(Army:symbol, N_soldiers:float)\nHas_n_soldiers(\"Roman Gallic Wars army\", 1000000).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"pyramids\", 20).\n.decl Answer()\nAnswer() :- Has_n_soldiers(\"Roman Gallic Wars army\", n_soldiers1), Last_n_years(\"pyramids\", n_years2), n_soldiers1 > n_years2.\n.output Answer\n\n", "completions": [".decl Has_n_soldiers(Army:symbol, N_soldiers:float)\nHas_n_soldiers(\"Roman Gallic Wars army\", 1000000).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"pyramids\", 20).\n.decl Answer()\nAnswer() :- Has_n_soldiers(\"Roman Gallic Wars army\", n_soldiers1), Last_n_years(\"pyramids\", n_years2), n_soldiers1 > n_years2.\n.output Answer\n\n"]}
{"id": 2155, "answer": true, "completion": ".decl Has_headquarters(Company:symbol, Headquarters:symbol)\nHas_headquarters(\"Nissan\", \"Japan\").\n.decl Uses_utensil(Country:symbol, Utensil:symbol)\nUses_utensil(\"Japan\", \"chopsticks\").\n.decl Answer()\nAnswer() :- Has_headquarters(\"Nissan\", country), Uses_utensil(country, \"chopsticks\").\n.output Answer\n\n", "completions": [".decl Has_headquarters(Company:symbol, Headquarters:symbol)\nHas_headquarters(\"Nissan\", \"Japan\").\n.decl Uses_utensil(Country:symbol, Utensil:symbol)\nUses_utensil(\"Japan\", \"chopsticks\").\n.decl Answer()\nAnswer() :- Has_headquarters(\"Nissan\", country), Uses_utensil(country, \"chopsticks\").\n.output Answer\n\n"]}
{"id": 2156, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Environment:symbol)\nLives_in(\"manta ray\", \"ocean\").\n.decl Has_temperature(Environment:symbol, Temperature:float)\nHas_temperature(\"ocean\", 20).\nHas_temperature(\"refrigerator\", 4).\n.decl Answer()\nAnswer() :- Lives_in(\"manta ray\", environment), Has_temperature(environment, temperature), Has_temperature(\"refrigerator\", temperature2), temperature > temperature2.\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Environment:symbol)\nLives_in(\"manta ray\", \"ocean\").\n.decl Has_temperature(Environment:symbol, Temperature:float)\nHas_temperature(\"ocean\", 20).\nHas_temperature(\"refrigerator\", 4).\n.decl Answer()\nAnswer() :- Lives_in(\"manta ray\", environment), Has_temperature(environment, temperature), Has_temperature(\"refrigerator\", temperature2), temperature > temperature2.\n.output Answer\n\n"]}
{"id": 2157, "answer": true, "completion": ".decl Has_n_people(Group:symbol, N_people:float)\nHas_n_people(\"felony jury\", 12).\nHas_n_people(\"Bunco game\", 12).\n.decl Answer()\nAnswer() :- Has_n_people(\"felony jury\", n_people1), Has_n_people(\"Bunco game\", n_people2), n_people1 >= n_people2.\n.output Answer\n\n", "completions": [".decl Has_n_people(Group:symbol, N_people:float)\nHas_n_people(\"felony jury\", 12).\nHas_n_people(\"Bunco game\", 12).\n.decl Answer()\nAnswer() :- Has_n_people(\"felony jury\", n_people1), Has_n_people(\"Bunco game\", n_people2), n_people1 >= n_people2.\n.output Answer\n\n"]}
{"id": 2158, "answer": true, "completion": ".decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Arctic Ocean\", 5669).\n.decl Has_height(Object:symbol, Height:float)\nHas_height(\"Eiffel Tower\", 324).\n.decl Answer()\nAnswer() :- Has_depth(\"Arctic Ocean\", depth), Has_height(\"Eiffel Tower\", height), height <= depth.\n.output Answer\n\n", "completions": [".decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Arctic Ocean\", 5669).\n.decl Has_height(Object:symbol, Height:float)\nHas_height(\"Eiffel Tower\", 324).\n.decl Answer()\nAnswer() :- Has_depth(\"Arctic Ocean\", depth), Has_height(\"Eiffel Tower\", height), height <= depth.\n.output Answer\n\n"]}
{"id": 2159, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"CEO\", \"manager\").\nHas_job(\"janitor\", \"cleaner\").\n.decl Answer()\nAnswer() :- Has_job(\"CEO\", job1), Has_job(\"janitor\", job2), job1 != job2.\n.output Answer\n\n", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"CEO\", \"manager\").\nHas_job(\"janitor\", \"cleaner\").\n.decl Answer()\nAnswer() :- Has_job(\"CEO\", job1), Has_job(\"janitor\", job2), job1 != job2.\n.output Answer\n\n"]}
{"id": 2160, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas\", \"December\").\nHappens_in_time(\"winter\", \"December\").\nHappens_in_time(\"winter\", \"January\").\nHappens_in_time(\"winter\", \"February\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas\", time), Happens_in_time(\"winter\", time).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas\", \"December\").\nHappens_in_time(\"winter\", \"December\").\nHappens_in_time(\"winter\", \"January\").\nHappens_in_time(\"winter\", \"February\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas\", time), Happens_in_time(\"winter\", time).\n.output Answer\n\n"]}
{"id": 2161, "answer": true, "completion": ".decl Is_lover_of(Person_A:symbol, Person_B:symbol)\nIs_lover_of(\"Moliere\", \"Queen Margot\").\n.decl Is_ill_fated(Person:symbol)\nIs_ill_fated(\"Moliere\").\n.decl Answer()\nAnswer() :- Is_lover_of(\"Moliere\", \"Queen Margot\"), Is_ill_fated(\"Moliere\").\n.output Answer\n\n", "completions": [".decl Is_lover_of(Person_A:symbol, Person_B:symbol)\nIs_lover_of(\"Moliere\", \"Queen Margot\").\n.decl Is_ill_fated(Person:symbol)\nIs_ill_fated(\"Moliere\").\n.decl Answer()\nAnswer() :- Is_lover_of(\"Moliere\", \"Queen Margot\"), Is_ill_fated(\"Moliere\").\n.output Answer\n\n"]}
{"id": 2162, "answer": true, "completion": ".decl Has_chlorophyll(Plant:symbol, Chlorophyll:symbol)\nHas_chlorophyll(\"Hostas\", \"lots\").\n.decl Answer()\nAnswer() :- Has_chlorophyll(\"Hostas\", chlorophyll).\n.output Answer\n\n", "completions": [".decl Has_chlorophyll(Plant:symbol, Chlorophyll:symbol)\nHas_chlorophyll(\"Hostas\", \"lots\").\n.decl Answer()\nAnswer() :- Has_chlorophyll(\"Hostas\", chlorophyll).\n.output Answer\n\n"]}
{"id": 2163, "answer": false, "completion": ".decl Has_n_lines(Poem:symbol, N_lines:float)\nHas_n_lines(\"Rime of the Ancient Mariner\", 7).\n.decl Has_n_stanzas(Poem:symbol, N_stanzas:float)\nHas_n_stanzas(\"Rime of the Ancient Mariner\", 1).\n.decl Answer()\nAnswer() :- Has_n_lines(\"Rime of the Ancient Mariner\", n_lines), Has_n_stanzas(\"Rime of the Ancient Mariner\", n_stanzas), n_lines = 14, n_stanzas = 1.\n.output Answer\n\n", "completions": [".decl Has_n_lines(Poem:symbol, N_lines:float)\nHas_n_lines(\"Rime of the Ancient Mariner\", 7).\n.decl Has_n_stanzas(Poem:symbol, N_stanzas:float)\nHas_n_stanzas(\"Rime of the Ancient Mariner\", 1).\n.decl Answer()\nAnswer() :- Has_n_lines(\"Rime of the Ancient Mariner\", n_lines), Has_n_stanzas(\"Rime of the Ancient Mariner\", n_stanzas), n_lines = 14, n_stanzas = 1.\n.output Answer\n\n"]}
{"id": 2164, "answer": false, "completion": ".decl Studies(Person:symbol, Subject:symbol)\nStudies(\"astronomer\", \"astronomy\").\nStudies(\"astronomer\", \"physics\").\nStudies(\"astronomer\", \"mathematics\").\nStudies(\"astronomer\", \"computer science\").\nStudies(\"astronomer\", \"statistics\").\nStudies(\"astronomer\", \"chemistry\").\nStudies(\"astronomer\", \"biology\").\nStudies(\"astronomer\", \"geology\").\nStudies(\"astronomer\", \"geography\").\nStudies(\"astronomer\", \"psychology\").\nStudies(\"astronomer\", \"sociology\").\nStudies(\"astronomer\", \"anthropology\").\nStudies(\"astronomer\", \"economics\").\nStudies(\"astronomer\", \"political science\").\nStudies(\"astronomer\", \"history\").\nStudies(\"astronomer\", \"linguistics\").\nStudies(\"astronomer\", \"philosophy\").\nStudies(\"astronomer\", \"art\").\nStudies(\"astronomer\", \"music\").\nStudies(\"astronomer\", \"literature\").\nStudies(\"astronomer\", \"theater\").\nStudies(\"astronomer\", \"film\").\nStudies(\"astronomer\", \"dance\").\nStudies(\"astronomer\", \"architecture\").\nStudies(\"astronomer\", \"sport\").\nStudies(\"astronomer\", \"law\").\nStudies(\"astronomer\", \"medicine\").\nStudies(\"astronomer\", \"engineering\").\nStudies(\"astronomer\", \"business\").\nStudies(\"astronomer\", \"education\").\nStudies(\"astronomer\", \"agriculture\").\nStudies(\"astronomer\", \"military science\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\n", "completions": [".decl Studies(Person:symbol, Subject:symbol)\nStudies(\"astronomer\", \"astronomy\").\nStudies(\"astronomer\", \"physics\").\nStudies(\"astronomer\", \"mathematics\").\nStudies(\"astronomer\", \"computer science\").\nStudies(\"astronomer\", \"statistics\").\nStudies(\"astronomer\", \"chemistry\").\nStudies(\"astronomer\", \"biology\").\nStudies(\"astronomer\", \"geology\").\nStudies(\"astronomer\", \"geography\").\nStudies(\"astronomer\", \"psychology\").\nStudies(\"astronomer\", \"sociology\").\nStudies(\"astronomer\", \"anthropology\").\nStudies(\"astronomer\", \"economics\").\nStudies(\"astronomer\", \"political science\").\nStudies(\"astronomer\", \"history\").\nStudies(\"astronomer\", \"linguistics\").\nStudies(\"astronomer\", \"philosophy\").\nStudies(\"astronomer\", \"art\").\nStudies(\"astronomer\", \"music\").\nStudies(\"astronomer\", \"literature\").\nStudies(\"astronomer\", \"theater\").\nStudies(\"astronomer\", \"film\").\nStudies(\"astronomer\", \"dance\").\nStudies(\"astronomer\", \"architecture\").\nStudies(\"astronomer\", \"sport\").\nStudies(\"astronomer\", \"law\").\nStudies(\"astronomer\", \"medicine\").\nStudies(\"astronomer\", \"engineering\").\nStudies(\"astronomer\", \"business\").\nStudies(\"astronomer\", \"education\").\nStudies(\"astronomer\", \"agriculture\").\nStudies(\"astronomer\", \"military science\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\nStudies(\"astronomer\", \"missionary\").\nStudies(\"astronomer\", \"pastoral care\").\nStudies(\"astronomer\", \"theology\").\nStudies(\"astronomer\", \"divinity\").\nStudies(\"astronomer\", \"biblical studies\").\n"]}
{"id": 2165, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Hershey's Kisses\", \"silver\").\n.decl Has_currency(Country:symbol, Currency:symbol)\nHas_currency(\"United Kingdom\", \"farthings\").\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"farthings\", 60).\n.decl Answer()\nAnswer() :- Has_color(\"Hershey's Kisses\", \"red\"), Has_currency(\"United Kingdom\", \"farthings\"), Last_n_years(\"farthings\", n_years), n_years > 60.\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Hershey's Kisses\", \"silver\").\n.decl Has_currency(Country:symbol, Currency:symbol)\nHas_currency(\"United Kingdom\", \"farthings\").\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"farthings\", 60).\n.decl Answer()\nAnswer() :- Has_color(\"Hershey's Kisses\", \"red\"), Has_currency(\"United Kingdom\", \"farthings\"), Last_n_years(\"farthings\", n_years), n_years > 60.\n.output Answer\n\n"]}
{"id": 2166, "answer": true, "completion": ".decl Has_brain_structure(Person:symbol, Brain_structure:symbol)\nHas_brain_structure(\"Gauss\", \"normal\").\n.decl Answer()\nAnswer() :- Has_brain_structure(\"Gauss\", \"normal\").\n.output Answer\n\n", "completions": [".decl Has_brain_structure(Person:symbol, Brain_structure:symbol)\nHas_brain_structure(\"Gauss\", \"normal\").\n.decl Answer()\nAnswer() :- Has_brain_structure(\"Gauss\", \"normal\").\n.output Answer\n\n"]}
{"id": 2167, "answer": true, "completion": ".decl Is_snorted_nasally(Drug:symbol)\nIs_snorted_nasally(\"cocaine\").\nIs_snorted_nasally(\"heroin\").\n.decl Is_drug(Drug:symbol)\nIs_drug(\"cocaine\").\nIs_drug(\"heroin\").\nIs_drug(\"dopamine\").\n.decl Answer()\nAnswer() :- Is_snorted_nasally(drug), Is_drug(drug).\n.output Answer\n\n", "completions": [".decl Is_snorted_nasally(Drug:symbol)\nIs_snorted_nasally(\"cocaine\").\nIs_snorted_nasally(\"heroin\").\n.decl Is_drug(Drug:symbol)\nIs_drug(\"cocaine\").\nIs_drug(\"heroin\").\nIs_drug(\"dopamine\").\n.decl Answer()\nAnswer() :- Is_snorted_nasally(drug), Is_drug(drug).\n.output Answer\n\n"]}
{"id": 2168, "answer": true, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"woman\", \"female\").\n.decl Has_body_part(Person:symbol, Body_part:symbol)\nHas_body_part(\"woman\", \"moustache\").\n.decl Answer()\nAnswer() :- Has_gender(person, \"female\"), Has_body_part(person, \"moustache\").\n.output Answer\n\n", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"woman\", \"female\").\n.decl Has_body_part(Person:symbol, Body_part:symbol)\nHas_body_part(\"woman\", \"moustache\").\n.decl Answer()\nAnswer() :- Has_gender(person, \"female\"), Has_body_part(person, \"moustache\").\n.output Answer\n\n"]}
{"id": 2169, "answer": true, "completion": ".decl Has_ancestor(Person:symbol, Ancestor:symbol)\nHas_ancestor(\"Demi Lovato\", \"Native American\").\n.decl Helped_turn_into(Person:symbol, Object_A:symbol, Object_B:symbol)\nHelped_turn_into(\"Native American\", \"maize\", \"popcorn\").\n.decl Answer()\nAnswer() :- Has_ancestor(\"Demi Lovato\", ancestor), Helped_turn_into(ancestor, \"maize\", \"popcorn\").\n.output Answer\n\n", "completions": [".decl Has_ancestor(Person:symbol, Ancestor:symbol)\nHas_ancestor(\"Demi Lovato\", \"Native American\").\n.decl Helped_turn_into(Person:symbol, Object_A:symbol, Object_B:symbol)\nHelped_turn_into(\"Native American\", \"maize\", \"popcorn\").\n.decl Answer()\nAnswer() :- Has_ancestor(\"Demi Lovato\", ancestor), Helped_turn_into(ancestor, \"maize\", \"popcorn\").\n.output Answer\n\n"]}
{"id": 2170, "answer": false, "completion": ".decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Long John Silver's\", \"fish\").\nServes(\"Long John Silver's\", \"chicken\").\nServes(\"Long John Silver's\", \"shrimp\").\nServes(\"Long John Silver's\", \"clam\").\nServes(\"Long John Silver's\", \"oyster\").\nServes(\"Long John Silver's\", \"scallop\").\nServes(\"Long John Silver's\", \"crab\").\nServes(\"Long John Silver's\", \"lobster\").\nServes(\"Long John Silver's\", \"squid\").\nServes(\"Long John Silver's\", \"octopus\").\nServes(\"Long John Silver's\", \"mussel\").\nServes(\"Long John Silver's\", \"snail\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's", "completions": [".decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Long John Silver's\", \"fish\").\nServes(\"Long John Silver's\", \"chicken\").\nServes(\"Long John Silver's\", \"shrimp\").\nServes(\"Long John Silver's\", \"clam\").\nServes(\"Long John Silver's\", \"oyster\").\nServes(\"Long John Silver's\", \"scallop\").\nServes(\"Long John Silver's\", \"crab\").\nServes(\"Long John Silver's\", \"lobster\").\nServes(\"Long John Silver's\", \"squid\").\nServes(\"Long John Silver's\", \"octopus\").\nServes(\"Long John Silver's\", \"mussel\").\nServes(\"Long John Silver's\", \"snail\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's\", \"sea star\").\nServes(\"Long John Silver's\", \"sea urchin\").\nServes(\"Long John Silver's\", \"sea cucumber\").\nServes(\"Long John Silver's\", \"sea anemone\").\nServes(\"Long John Silver's\", \"sea slug\").\nServes(\"Long John Silver's"]}
{"id": 2171, "answer": true, "completion": ".decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Has_n_days(Week:symbol, N_days:float)\nHas_n_days(\"week\", 7).\n.decl Answer()\nAnswer() :- Is_prime(number), Has_n_days(\"week\", n_days), number = n_days.\n.output Answer\n\n", "completions": [".decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Has_n_days(Week:symbol, N_days:float)\nHas_n_days(\"week\", 7).\n.decl Answer()\nAnswer() :- Is_prime(number), Has_n_days(\"week\", n_days), number = n_days.\n.output Answer\n\n"]}
{"id": 2172, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Şerafeddin Sabuncuoğlu\", \"Börek\").\n.decl Answer()\nAnswer() :- Eats(\"Şerafeddin Sabuncuoğlu\", \"Börek\").\n.output Answer\n\n", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Şerafeddin Sabuncuoğlu\", \"Börek\").\n.decl Answer()\nAnswer() :- Eats(\"Şerafeddin Sabuncuoğlu\", \"Börek\").\n.output Answer\n\n"]}
{"id": 2173, "answer": false, "completion": ".decl Has_effect(Treatment:symbol, Effect:symbol)\nHas_effect(\"reiki\", \"relaxation\").\n.decl Answer()\nAnswer() :- Has_effect(\"reiki\", \"bruises\").\n.output Answer\n\n", "completions": [".decl Has_effect(Treatment:symbol, Effect:symbol)\nHas_effect(\"reiki\", \"relaxation\").\n.decl Answer()\nAnswer() :- Has_effect(\"reiki\", \"bruises\").\n.output Answer\n\n"]}
{"id": 2174, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"September 11th memorial\", \"September 11th\").\nHappens_in_time(\"September 11th memorial\", \"September 12th\").\nHappens_in_time(\"September 11th memorial\", \"September 13th\").\nHappens_in_time(\"September 11th memorial\", \"September 14th\").\nHappens_in_time(\"September 11th memorial\", \"September 15th\").\nHappens_in_time(\"September 11th memorial\", \"September 16th\").\nHappens_in_time(\"September 11th memorial\", \"September 17th\").\nHappens_in_time(\"September 11th memorial\", \"September 18th\").\nHappens_in_time(\"September 11th memorial\", \"September 19th\").\nHappens_in_time(\"September 11th memorial\", \"September 20th\").\nHappens_in_time(\"September 11th memorial\", \"September 21st\").\nHappens_in_time(\"September 11th memorial\", \"September 22nd\").\nHappens_in_time(\"September 11th memorial\", \"September 23rd\").\nHappens_in_time(\"September 11th memorial\", \"September 24th\").\nHappens_in_time(\"September 11th memorial\", \"September 25th\").\nHappens_in_time(\"September 11th memorial\", \"September 26th\").\nHappens_in_time(\"September 11th memorial\", \"September 27th\").\nHappens_in_time(\"September 11th memorial\", \"September 28th\").\nHappens_in_time(\"September 11th memorial\", \"September 29th\").\nHappens_in_time(\"September 11th memorial\", \"September 30th\").\nHappens_in_time(\"September 11th memorial\", \"October 1st\").\nHappens_in_time(\"September 11th memorial\", \"October 2nd\").\nHappens_in_time(\"September 11th memorial\", \"October 3rd\").\nHappens_in_time(\"September 11th memorial\", \"October 4th\").\nHappens_in_time(\"September 11th memorial\", \"October 5th\").\nHappens_in_time(\"September 11th memorial\", \"October 6th\").\nHappens_in_time(\"September 11th memorial\", \"October 7th\").\nHappens_in_time(\"September 11th memorial\", \"October 8th\").\nHappens_in_time(\"September 11th memorial\", \"October 9th\").\nHappens_in_time(\"September 11th memorial\", \"October 10th\").\nHappens_in_time(\"September 11th memorial\", \"October 11th\").\nHappens_in_time(\"September 11th memorial\", \"October 12th\").\nHappens_in_time(\"September 11th memorial\", \"October 13th\").\nHappens_in_time(\"September 11th memorial\", \"October 14th\").\nHappens_in_time(\"September 11th memorial\", \"October 15th\").\nHappens_in_time(\"September 11th memorial\", \"October 16th\").\nHappens_in_time(\"September 11th memorial\", \"October 17th\").\nHappens_in_time(\"September 11th memorial\", \"October 18th\").\nHappens_in_time(\"September 11th memorial\", \"October 19th\").\nHappens_in_time(\"September 11th memorial\", \"October 20th\").\nHappens_in_time(\"September 11th memorial\", \"October 21st\").\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"September 11th memorial\", \"September 11th\").\nHappens_in_time(\"September 11th memorial\", \"September 12th\").\nHappens_in_time(\"September 11th memorial\", \"September 13th\").\nHappens_in_time(\"September 11th memorial\", \"September 14th\").\nHappens_in_time(\"September 11th memorial\", \"September 15th\").\nHappens_in_time(\"September 11th memorial\", \"September 16th\").\nHappens_in_time(\"September 11th memorial\", \"September 17th\").\nHappens_in_time(\"September 11th memorial\", \"September 18th\").\nHappens_in_time(\"September 11th memorial\", \"September 19th\").\nHappens_in_time(\"September 11th memorial\", \"September 20th\").\nHappens_in_time(\"September 11th memorial\", \"September 21st\").\nHappens_in_time(\"September 11th memorial\", \"September 22nd\").\nHappens_in_time(\"September 11th memorial\", \"September 23rd\").\nHappens_in_time(\"September 11th memorial\", \"September 24th\").\nHappens_in_time(\"September 11th memorial\", \"September 25th\").\nHappens_in_time(\"September 11th memorial\", \"September 26th\").\nHappens_in_time(\"September 11th memorial\", \"September 27th\").\nHappens_in_time(\"September 11th memorial\", \"September 28th\").\nHappens_in_time(\"September 11th memorial\", \"September 29th\").\nHappens_in_time(\"September 11th memorial\", \"September 30th\").\nHappens_in_time(\"September 11th memorial\", \"October 1st\").\nHappens_in_time(\"September 11th memorial\", \"October 2nd\").\nHappens_in_time(\"September 11th memorial\", \"October 3rd\").\nHappens_in_time(\"September 11th memorial\", \"October 4th\").\nHappens_in_time(\"September 11th memorial\", \"October 5th\").\nHappens_in_time(\"September 11th memorial\", \"October 6th\").\nHappens_in_time(\"September 11th memorial\", \"October 7th\").\nHappens_in_time(\"September 11th memorial\", \"October 8th\").\nHappens_in_time(\"September 11th memorial\", \"October 9th\").\nHappens_in_time(\"September 11th memorial\", \"October 10th\").\nHappens_in_time(\"September 11th memorial\", \"October 11th\").\nHappens_in_time(\"September 11th memorial\", \"October 12th\").\nHappens_in_time(\"September 11th memorial\", \"October 13th\").\nHappens_in_time(\"September 11th memorial\", \"October 14th\").\nHappens_in_time(\"September 11th memorial\", \"October 15th\").\nHappens_in_time(\"September 11th memorial\", \"October 16th\").\nHappens_in_time(\"September 11th memorial\", \"October 17th\").\nHappens_in_time(\"September 11th memorial\", \"October 18th\").\nHappens_in_time(\"September 11th memorial\", \"October 19th\").\nHappens_in_time(\"September 11th memorial\", \"October 20th\").\nHappens_in_time(\"September 11th memorial\", \"October 21st\").\n"]}
{"id": 2175, "answer": true, "completion": ".decl Believes_in(Person:symbol, Entity:symbol)\nBelieves_in(\"Martin Luther\", \"God\").\nBelieves_in(\"Martin Luther\", \"Satan\").\n.decl Answer()\nAnswer() :- Believes_in(\"Martin Luther\", \"Satan\").\n.output Answer\n\n", "completions": [".decl Believes_in(Person:symbol, Entity:symbol)\nBelieves_in(\"Martin Luther\", \"God\").\nBelieves_in(\"Martin Luther\", \"Satan\").\n.decl Answer()\nAnswer() :- Believes_in(\"Martin Luther\", \"Satan\").\n.output Answer\n\n"]}
{"id": 2176, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Donatello crucifix\", 1.5).\n.decl Answer()\nAnswer() :- Has_size(\"Donatello crucifix\", size), size = 1.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Donatello crucifix\", 1.5).\n.decl Answer()\nAnswer() :- Has_size(\"Donatello crucifix\", size), size = 1.\n.output Answer\n\n"]}
{"id": 2177, "answer": true, "completion": ".decl Has_courage(Person:symbol, Courage:float)\nHas_courage(\"Neville Longbottom\", 0.5).\nHas_courage(\"Neville Longbottom\", 0.7).\n.decl Answer()\nAnswer() :- Has_courage(\"Neville Longbottom\", courage1), Has_courage(\"Neville Longbottom\", courage2), courage1 < courage2.\n.output Answer\n\n", "completions": [".decl Has_courage(Person:symbol, Courage:float)\nHas_courage(\"Neville Longbottom\", 0.5).\nHas_courage(\"Neville Longbottom\", 0.7).\n.decl Answer()\nAnswer() :- Has_courage(\"Neville Longbottom\", courage1), Has_courage(\"Neville Longbottom\", courage2), courage1 < courage2.\n.output Answer\n\n"]}
{"id": 2178, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"model\", 1.8).\nHas_height(\"star\", 1.7).\n.decl Answer()\nAnswer() :- Has_height(\"model\", height1), Has_height(\"star\", height2), height1 >= height2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"model\", 1.8).\nHas_height(\"star\", 1.7).\n.decl Answer()\nAnswer() :- Has_height(\"model\", height1), Has_height(\"star\", height2), height1 >= height2.\n.output Answer\n\n"]}
{"id": 2179, "answer": true, "completion": ".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Peter Griffin\", \"Pawtucket Brewery\").\n.decl Needs(Company:symbol, Resource:symbol)\nNeeds(\"Pawtucket Brewery\", \"barley\").\n.decl Answer()\nAnswer() :- Works_for(\"Peter Griffin\", company), Needs(company, \"barley\").\n.output Answer\n\n", "completions": [".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Peter Griffin\", \"Pawtucket Brewery\").\n.decl Needs(Company:symbol, Resource:symbol)\nNeeds(\"Pawtucket Brewery\", \"barley\").\n.decl Answer()\nAnswer() :- Works_for(\"Peter Griffin\", company), Needs(company, \"barley\").\n.output Answer\n\n"]}
{"id": 2180, "answer": true, "completion": ".decl Kills(Substance:symbol, Disease:symbol)\nKills(\"olive oil\", \"rabies\").\n.decl Answer()\nAnswer() :- Kills(\"olive oil\", \"rabies\").\n.output Answer\n\n", "completions": [".decl Kills(Substance:symbol, Disease:symbol)\nKills(\"olive oil\", \"rabies\").\n.decl Answer()\nAnswer() :- Kills(\"olive oil\", \"rabies\").\n.output Answer\n\n"]}
{"id": 2181, "answer": true, "completion": ".decl Visited(Person:symbol, Place:symbol)\nVisited(\"Magellan\", \"Guam\").\n.decl Friends(Person_A:symbol, Person_B:symbol)\nFriends(\"Magellan\", \"Queen Victoria\").\n.decl Answer()\nAnswer() :- Visited(\"Magellan\", \"Guam\"), Friends(\"Magellan\", \"Queen Victoria\").\n.output Answer\n\n", "completions": [".decl Visited(Person:symbol, Place:symbol)\nVisited(\"Magellan\", \"Guam\").\n.decl Friends(Person_A:symbol, Person_B:symbol)\nFriends(\"Magellan\", \"Queen Victoria\").\n.decl Answer()\nAnswer() :- Visited(\"Magellan\", \"Guam\"), Friends(\"Magellan\", \"Queen Victoria\").\n.output Answer\n\n"]}
{"id": 2182, "answer": true, "completion": ".decl Has_mass(Animal:symbol, Mass:float)\nHas_mass(\"American black bear\", 180).\nHas_mass(\"sun bear\", 60).\n.decl Answer()\nAnswer() :- Has_mass(\"American black bear\", mass1), Has_mass(\"sun bear\", mass2), mass1 > mass2.\n.output Answer\n\n", "completions": [".decl Has_mass(Animal:symbol, Mass:float)\nHas_mass(\"American black bear\", 180).\nHas_mass(\"sun bear\", 60).\n.decl Answer()\nAnswer() :- Has_mass(\"American black bear\", mass1), Has_mass(\"sun bear\", mass2), mass1 > mass2.\n.output Answer\n\n"]}
{"id": 2183, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Adam Sandler's home\", 5).\n.decl Has_average_size(Object:symbol, Average_size:float)\nHas_average_size(\"American family\", 3).\n.decl Answer()\nAnswer() :- Has_size(\"Adam Sandler's home\", size1), Has_average_size(\"American family\", size2), size1 < size2.\n.output Answer\n\n", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Adam Sandler's home\", 5).\n.decl Has_average_size(Object:symbol, Average_size:float)\nHas_average_size(\"American family\", 3).\n.decl Answer()\nAnswer() :- Has_size(\"Adam Sandler's home\", size1), Has_average_size(\"American family\", size2), size1 < size2.\n.output Answer\n\n"]}
{"id": 2184, "answer": false, "completion": ".decl Has_ingredient(Meal:symbol, Ingredient:symbol)\nHas_ingredient(\"brussels sprouts\", \"vitamin K\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"someone on Coumadin\", \"vitamin K deficiency\").\n.decl Answer()\nAnswer() :- Has_ingredient(meal, \"vitamin K\"), Has_condition(\"someone on Coumadin\", condition), condition != \"vitamin K deficiency\".\n.output Answer\n\n", "completions": [".decl Has_ingredient(Meal:symbol, Ingredient:symbol)\nHas_ingredient(\"brussels sprouts\", \"vitamin K\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"someone on Coumadin\", \"vitamin K deficiency\").\n.decl Answer()\nAnswer() :- Has_ingredient(meal, \"vitamin K\"), Has_condition(\"someone on Coumadin\", condition), condition != \"vitamin K deficiency\".\n.output Answer\n\n"]}
{"id": 2185, "answer": true, "completion": ".decl Is_important_to(Place:symbol, Religion:symbol)\nIs_important_to(\"Holy Land\", \"Judaism\").\nIs_important_to(\"Holy Land\", \"Christianity\").\nIs_important_to(\"Holy Land\", \"Islam\").\n.decl Is_religion(Religion:symbol, Category:symbol)\nIs_religion(\"Judaism\", \"Western\").\nIs_religion(\"Christianity\", \"Western\").\nIs_religion(\"Islam\", \"Eastern\").\n.decl Answer()\nAnswer() :- Is_important_to(\"Holy Land\", religion), Is_religion(religion, \"Eastern\").\n.output Answer\n\n", "completions": [".decl Is_important_to(Place:symbol, Religion:symbol)\nIs_important_to(\"Holy Land\", \"Judaism\").\nIs_important_to(\"Holy Land\", \"Christianity\").\nIs_important_to(\"Holy Land\", \"Islam\").\n.decl Is_religion(Religion:symbol, Category:symbol)\nIs_religion(\"Judaism\", \"Western\").\nIs_religion(\"Christianity\", \"Western\").\nIs_religion(\"Islam\", \"Eastern\").\n.decl Answer()\nAnswer() :- Is_important_to(\"Holy Land\", religion), Is_religion(religion, \"Eastern\").\n.output Answer\n\n"]}
{"id": 2186, "answer": true, "completion": ".decl Has_job_security(Person:symbol, Job_security:symbol)\nHas_job_security(\"Prime Minister of the United Kingdom\", \"poor\").\n.decl Answer()\nAnswer() :- Has_job_security(\"Prime Minister of the United Kingdom\", \"poor\").\n.output Answer\n\n", "completions": [".decl Has_job_security(Person:symbol, Job_security:symbol)\nHas_job_security(\"Prime Minister of the United Kingdom\", \"poor\").\n.decl Answer()\nAnswer() :- Has_job_security(\"Prime Minister of the United Kingdom\", \"poor\").\n.output Answer\n\n"]}
{"id": 2187, "answer": false, "completion": ".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Symphony of the Seas\", 6300).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"People's Volunteer Army\", 1.2e8).\n.decl Answer()\nAnswer() :- Has_capacity(\"Symphony of the Seas\", capacity), Has_n_members(\"People's Volunteer Army\", n_members), capacity >= n_members.\n.output Answer\n\n\n", "completions": [".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Symphony of the Seas\", 6300).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"People's Volunteer Army\", 1.2e8).\n.decl Answer()\nAnswer() :- Has_capacity(\"Symphony of the Seas\", capacity), Has_n_members(\"People's Volunteer Army\", n_members), capacity >= n_members.\n.output Answer\n\n\n"]}
{"id": 2188, "answer": true, "completion": ".decl Has_dental_bills(Person:symbol, Dental_bills:float)\nHas_dental_bills(\"professional boxers\", 0).\n.decl Answer()\nAnswer() :- Has_dental_bills(\"professional boxers\", dental_bills), dental_bills < 1.\n.output Answer\n\n", "completions": [".decl Has_dental_bills(Person:symbol, Dental_bills:float)\nHas_dental_bills(\"professional boxers\", 0).\n.decl Answer()\nAnswer() :- Has_dental_bills(\"professional boxers\", dental_bills), dental_bills < 1.\n.output Answer\n\n"]}
{"id": 2189, "answer": true, "completion": ".decl Has_leader(Group:symbol, Leader:symbol)\nHas_leader(\"Heaven's Gate\", \"Marshall Applewhite\").\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Marshall Applewhite\", \"save images in JPEG format\").\n.decl Answer()\nAnswer() :- Has_leader(\"Heaven's Gate\", leader), Has_skill(leader, \"save images in JPEG format\").\n.output Answer\n\n\n", "completions": [".decl Has_leader(Group:symbol, Leader:symbol)\nHas_leader(\"Heaven's Gate\", \"Marshall Applewhite\").\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Marshall Applewhite\", \"save images in JPEG format\").\n.decl Answer()\nAnswer() :- Has_leader(\"Heaven's Gate\", leader), Has_skill(leader, \"save images in JPEG format\").\n.output Answer\n\n\n"]}
{"id": 2190, "answer": true, "completion": ".decl Has_type(Association:symbol, Type:symbol)\nHas_type(\"Pompey's association with Caesar\", \"political\").\n.decl Influences(Association:symbol, Event:symbol)\nInfluences(\"Pompey's association with Caesar\", \"reality TV\").\n.decl Answer()\nAnswer() :- Has_type(association, \"political\"), Influences(association, \"reality TV\").\n.output Answer\n\n\n", "completions": [".decl Has_type(Association:symbol, Type:symbol)\nHas_type(\"Pompey's association with Caesar\", \"political\").\n.decl Influences(Association:symbol, Event:symbol)\nInfluences(\"Pompey's association with Caesar\", \"reality TV\").\n.decl Answer()\nAnswer() :- Has_type(association, \"political\"), Influences(association, \"reality TV\").\n.output Answer\n\n\n"]}
{"id": 2191, "answer": false, "completion": ".decl Is_authentic(Person:symbol, Event:symbol)\nIs_authentic(\"knights\", \"Medieval Times show\").\n.decl Answer()\nAnswer() :- !Is_authentic(\"knights\", \"Medieval Times show\").\n.output Answer\n\n", "completions": [".decl Is_authentic(Person:symbol, Event:symbol)\nIs_authentic(\"knights\", \"Medieval Times show\").\n.decl Answer()\nAnswer() :- !Is_authentic(\"knights\", \"Medieval Times show\").\n.output Answer\n\n"]}
{"id": 2192, "answer": true, "completion": ".decl Has_amendment(State:symbol, Amendment:float)\nHas_amendment(\"Puerto Rico\", 23).\n.decl Gives_right_to_vote(Amendment:float, Right:symbol)\nGives_right_to_vote(23, \"vote for president\").\n.decl Answer()\nAnswer() :- Has_amendment(\"Puerto Rico\", amendment), Gives_right_to_vote(amendment, \"vote for president\").\n.output Answer\n\n", "completions": [".decl Has_amendment(State:symbol, Amendment:float)\nHas_amendment(\"Puerto Rico\", 23).\n.decl Gives_right_to_vote(Amendment:float, Right:symbol)\nGives_right_to_vote(23, \"vote for president\").\n.decl Answer()\nAnswer() :- Has_amendment(\"Puerto Rico\", amendment), Gives_right_to_vote(amendment, \"vote for president\").\n.output Answer\n\n"]}
{"id": 2193, "answer": false, "completion": ".decl Has_format(Console:symbol, Format:symbol)\nHas_format(\"original Nintendo\", \"cartridge\").\nHas_format(\"Playstation 3\", \"Blu-ray\").\n.decl Answer()\nAnswer() :- Has_format(\"original Nintendo\", format1), Has_format(\"Playstation 3\", format2), format1 = format2.\n.output Answer\n\n", "completions": [".decl Has_format(Console:symbol, Format:symbol)\nHas_format(\"original Nintendo\", \"cartridge\").\nHas_format(\"Playstation 3\", \"Blu-ray\").\n.decl Answer()\nAnswer() :- Has_format(\"original Nintendo\", format1), Has_format(\"Playstation 3\", format2), format1 = format2.\n.output Answer\n\n"]}
{"id": 2194, "answer": true, "completion": ".decl Has_n_parts(Work:symbol, N_parts:float)\nHas_n_parts(\"Messiah (Handel)\", 3).\n.decl Has_n_performers(Work:symbol, N_performers:float)\nHas_n_performers(\"Messiah (Handel)\", 1).\n.decl Answer()\nAnswer() :- Has_n_parts(\"Messiah (Handel)\", n_parts), Has_n_performers(\"Messiah (Handel)\", n_performers), n_parts > n_performers.\n.output Answer\n\n", "completions": [".decl Has_n_parts(Work:symbol, N_parts:float)\nHas_n_parts(\"Messiah (Handel)\", 3).\n.decl Has_n_performers(Work:symbol, N_performers:float)\nHas_n_performers(\"Messiah (Handel)\", 1).\n.decl Answer()\nAnswer() :- Has_n_parts(\"Messiah (Handel)\", n_parts), Has_n_performers(\"Messiah (Handel)\", n_performers), n_parts > n_performers.\n.output Answer\n\n"]}
{"id": 2195, "answer": false, "completion": ".decl Runs_from_to(Train:symbol, City_A:symbol, City_B:symbol)\nRuns_from_to(\"Amtrak\", \"New York City\", \"Washington, D.C.\").\nRuns_from_to(\"Amtrak\", \"Washington, D.C.\", \"Miami\").\nRuns_from_to(\"Amtrak\", \"Miami\", \"San Francisco\").\nRuns_from_to(\"Amtrak\", \"San Francisco\", \"Seattle\").\nRuns_from_to(\"Amtrak\", \"Seattle\", \"Vancouver\").\nRuns_from_to(\"Amtrak\", \"Vancouver\", \"Anchorage\").\nRuns_from_to(\"Amtrak\", \"Anchorage\", \"Tokyo\").\nRuns_from_to(\"Amtrak\", \"Tokyo\", \"Sydney\").\nRuns_from_to(\"Amtrak\", \"Sydney\", \"Auckland\").\nRuns_from_to(\"Amtrak\", \"Auckland\", \"Moai location\").\n.decl Answer()\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, city3), Runs_from_to(\"Amtrak\", city3, \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, city3), Runs_from_to(\"Amtrak\", city3, city4), Runs_from_to(\"Amtrak\", city4, \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, city3), Runs_from_to(\"Amtrak\", city3, city4), Runs_from_to(\"Amtrak\", city4, city5), Runs_from_to(\"Amtrak\", city5, \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, city3), Runs_from_to(\"Amtrak\", city3, city4), Runs_from_to(\"Amtrak\", city4, city5), Runs_from_to(\"Amtrak\", city5, city6), Runs_from_to(\"Amtrak\", city6, \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, city3), Runs_from_to(\"Amtrak\", city3, city4), Runs_from_to(\"Amtrak\", city4, city5), Runs_from_to(\"Amtrak\", city5, city6), Runs_from_to(\"Amtrak\", city6, city7), Runs_from_to(\"Amtrak\", city7, \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, city3), Runs_from_to(\"Amtrak\", city3, city4), Runs_from_to(\"Amtrak\", city4, city5), Runs_from_to(\"Amtrak\", city5, city6), Runs_from", "completions": [".decl Runs_from_to(Train:symbol, City_A:symbol, City_B:symbol)\nRuns_from_to(\"Amtrak\", \"New York City\", \"Washington, D.C.\").\nRuns_from_to(\"Amtrak\", \"Washington, D.C.\", \"Miami\").\nRuns_from_to(\"Amtrak\", \"Miami\", \"San Francisco\").\nRuns_from_to(\"Amtrak\", \"San Francisco\", \"Seattle\").\nRuns_from_to(\"Amtrak\", \"Seattle\", \"Vancouver\").\nRuns_from_to(\"Amtrak\", \"Vancouver\", \"Anchorage\").\nRuns_from_to(\"Amtrak\", \"Anchorage\", \"Tokyo\").\nRuns_from_to(\"Amtrak\", \"Tokyo\", \"Sydney\").\nRuns_from_to(\"Amtrak\", \"Sydney\", \"Auckland\").\nRuns_from_to(\"Amtrak\", \"Auckland\", \"Moai location\").\n.decl Answer()\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, city3), Runs_from_to(\"Amtrak\", city3, \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, city3), Runs_from_to(\"Amtrak\", city3, city4), Runs_from_to(\"Amtrak\", city4, \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, city3), Runs_from_to(\"Amtrak\", city3, city4), Runs_from_to(\"Amtrak\", city4, city5), Runs_from_to(\"Amtrak\", city5, \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, city3), Runs_from_to(\"Amtrak\", city3, city4), Runs_from_to(\"Amtrak\", city4, city5), Runs_from_to(\"Amtrak\", city5, city6), Runs_from_to(\"Amtrak\", city6, \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, city3), Runs_from_to(\"Amtrak\", city3, city4), Runs_from_to(\"Amtrak\", city4, city5), Runs_from_to(\"Amtrak\", city5, city6), Runs_from_to(\"Amtrak\", city6, city7), Runs_from_to(\"Amtrak\", city7, \"Moai location\").\nAnswer() :- Runs_from_to(\"Amtrak\", \"New York City\", city2), Runs_from_to(\"Amtrak\", city2, city3), Runs_from_to(\"Amtrak\", city3, city4), Runs_from_to(\"Amtrak\", city4, city5), Runs_from_to(\"Amtrak\", city5, city6), Runs_from"]}
{"id": 2196, "answer": true, "completion": ".decl Has_state(Person:symbol, State:symbol)\nHas_state(\"John\", \"coma\").\n.decl Can_experience(Person:symbol, Emotion:symbol)\nCan_experience(\"John\", \"fear\").\n.decl Answer()\nAnswer() :- Has_state(\"John\", \"coma\"), Can_experience(\"John\", \"fear\").\n.output Answer\n\n", "completions": [".decl Has_state(Person:symbol, State:symbol)\nHas_state(\"John\", \"coma\").\n.decl Can_experience(Person:symbol, Emotion:symbol)\nCan_experience(\"John\", \"fear\").\n.decl Answer()\nAnswer() :- Has_state(\"John\", \"coma\"), Can_experience(\"John\", \"fear\").\n.output Answer\n\n"]}
{"id": 2197, "answer": false, "completion": ".decl Has_presidential_number(Person:symbol, Number:float)\nHas_presidential_number(\"Andrew Johnson\", 17).\n.decl Has_emperor_number(Person:symbol, Number:float)\nHas_emperor_number(\"Elagabalus\", 218).\n.decl Answer()\nAnswer() :- Has_presidential_number(\"Andrew Johnson\", number1), Has_emperor_number(\"Elagabalus\", number2), number1 > number2.\n.output Answer\n\n", "completions": [".decl Has_presidential_number(Person:symbol, Number:float)\nHas_presidential_number(\"Andrew Johnson\", 17).\n.decl Has_emperor_number(Person:symbol, Number:float)\nHas_emperor_number(\"Elagabalus\", 218).\n.decl Answer()\nAnswer() :- Has_presidential_number(\"Andrew Johnson\", number1), Has_emperor_number(\"Elagabalus\", number2), number1 > number2.\n.output Answer\n\n"]}
{"id": 2198, "answer": true, "completion": ".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Lamborghini\", 350).\nHas_top_speed(\"Porsche 911\", 300).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Lamborghini\", top_speed1), Has_top_speed(\"Porsche 911\", top_speed2), top_speed1 > top_speed2.\n.output Answer\n\n", "completions": [".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Lamborghini\", 350).\nHas_top_speed(\"Porsche 911\", 300).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Lamborghini\", top_speed1), Has_top_speed(\"Porsche 911\", top_speed2), top_speed1 > top_speed2.\n.output Answer\n\n"]}
{"id": 2199, "answer": false, "completion": ".decl Has_texture(Food:symbol, Texture:symbol)\nHas_texture(\"fresh garlic cloves\", \"crunchy\").\nHas_texture(\"roasted garlic cloves\", \"soft\").\n.decl Answer()\nAnswer() :- Has_texture(\"fresh garlic cloves\", texture1), Has_texture(\"roasted garlic cloves\", texture2), texture1 = texture2.\n.output Answer\n\n", "completions": [".decl Has_texture(Food:symbol, Texture:symbol)\nHas_texture(\"fresh garlic cloves\", \"crunchy\").\nHas_texture(\"roasted garlic cloves\", \"soft\").\n.decl Answer()\nAnswer() :- Has_texture(\"fresh garlic cloves\", texture1), Has_texture(\"roasted garlic cloves\", texture2), texture1 = texture2.\n.output Answer\n\n"]}
{"id": 2200, "answer": true, "completion": ".decl Has_n_students(College:symbol, N_students:float)\nHas_n_students(\"University of Pennsylvania\", 25000).\n.decl Has_n_fax_machines(College:symbol, N_fax_machines:float)\nHas_n_fax_machines(\"University of Pennsylvania\", 0).\n.decl Answer()\nAnswer() :- Has_n_students(college, n_students), Has_n_fax_machines(college, n_fax_machines), n_students > n_fax_machines.\n.output Answer\n\n", "completions": [".decl Has_n_students(College:symbol, N_students:float)\nHas_n_students(\"University of Pennsylvania\", 25000).\n.decl Has_n_fax_machines(College:symbol, N_fax_machines:float)\nHas_n_fax_machines(\"University of Pennsylvania\", 0).\n.decl Answer()\nAnswer() :- Has_n_students(college, n_students), Has_n_fax_machines(college, n_fax_machines), n_students > n_fax_machines.\n.output Answer\n\n"]}
{"id": 2201, "answer": false, "completion": ".decl Costs(Event:symbol, Cost:float)\nCosts(\"visit the Metropolitan Museum of Art\", 25).\n.decl Has_n_dollars(Person:symbol, N_dollars:float)\nHas_n_dollars(\"Bernie Sanders\", 200).\n.decl Answer()\nAnswer() :- Costs(\"visit the Metropolitan Museum of Art\", cost), Has_n_dollars(\"Bernie Sanders\", n_dollars), n_dollars >= 20*cost.\n.output Answer\n\n", "completions": [".decl Costs(Event:symbol, Cost:float)\nCosts(\"visit the Metropolitan Museum of Art\", 25).\n.decl Has_n_dollars(Person:symbol, N_dollars:float)\nHas_n_dollars(\"Bernie Sanders\", 200).\n.decl Answer()\nAnswer() :- Costs(\"visit the Metropolitan Museum of Art\", cost), Has_n_dollars(\"Bernie Sanders\", n_dollars), n_dollars >= 20*cost.\n.output Answer\n\n"]}
{"id": 2202, "answer": true, "completion": ".decl Predates(Event_A:symbol, Event_B:symbol)\nPredates(\"Qwerty keyboard layout\", \"computers\").\n.decl Answer()\nAnswer() :- Predates(\"Qwerty keyboard layout\", \"computers\").\n.output Answer\n\n", "completions": [".decl Predates(Event_A:symbol, Event_B:symbol)\nPredates(\"Qwerty keyboard layout\", \"computers\").\n.decl Answer()\nAnswer() :- Predates(\"Qwerty keyboard layout\", \"computers\").\n.output Answer\n\n"]}
{"id": 2203, "answer": false, "completion": ".decl Has_dominant_religion(Country:symbol, Religion:symbol)\nHas_dominant_religion(\"Saudi Arabia\", \"Islam\").\nHas_dominant_religion(\"United Arab Emirates\", \"Islam\").\nHas_dominant_religion(\"Egypt\", \"Islam\").\nHas_dominant_religion(\"Turkey\", \"Islam\").\nHas_dominant_religion(\"Indonesia\", \"Islam\").\nHas_dominant_religion(\"Pakistan\", \"Islam\").\nHas_dominant_religion(\"Bangladesh\", \"Islam\").\nHas_dominant_religion(\"Nigeria\", \"Islam\").\nHas_dominant_religion(\"Iran\", \"Islam\").\nHas_dominant_religion(\"Algeria\", \"Islam\").\nHas_dominant_religion(\"Morocco\", \"Islam\").\nHas_dominant_religion(\"Sudan\", \"Islam\").\nHas_dominant_religion(\"Iraq\", \"Islam\").\nHas_dominant_religion(\"Afghanistan\", \"Islam\").\nHas_dominant_religion(\"Yemen\", \"Islam\").\nHas_dominant_religion(\"Syria\", \"Islam\").\nHas_dominant_religion(\"Uzbekistan\", \"Islam\").\nHas_dominant_religion(\"Malaysia\", \"Islam\").\nHas_dominant_religion(\"Ethiopia\", \"Islam\").\nHas_dominant_religion(\"Kazakhstan\", \"Islam\").\nHas_dominant_religion(\"Tajikistan\", \"Islam\").\nHas_dominant_religion(\"Kyrgyzstan\", \"Islam\").\nHas_dominant_religion(\"Turkmenistan\", \"Islam\").\nHas_dominant_religion(\"Jordan\", \"Islam\").\nHas_dominant_religion(\"Senegal\", \"Islam\").\nHas_dominant_religion(\"Chad\", \"Islam\").\nHas_dominant_religion(\"Somalia\", \"Islam\").\nHas_dominant_religion(\"Mali\", \"Islam\").\nHas_dominant_religion(\"Guinea\", \"Islam\").\nHas_dominant_religion(\"Niger\", \"Islam\").\nHas_dominant_religion(\"Burkina Faso\", \"Islam\").\nHas_dominant_religion(\"Mauritania\", \"Islam\").\nHas_dominant_religion(\"Kosovo\", \"Islam\").\nHas_dominant_religion(\"Djibouti\", \"Islam\").\nHas_dominant_religion(\"Comoros\", \"Islam\").\nHas_dominant_religion(\"Tunisia\", \"Islam\").\nHas_dominant_religion(\"Libya\", \"Islam\").\nHas_dominant_religion(\"Palestine\", \"Islam\").\nHas_dominant_religion(\"Kuwait\", \"Islam\").\nHas_dominant_religion(\"Qatar\", \"Islam\").\nHas_dominant_religion(\"Bahrain\", \"Islam\").\nHas_dominant_religion(\"Oman\", \"Islam\").\nHas_dominant_religion(\"Maldives\", \"Islam\").\nHas_dominant_religion(\"Mauritius\", \"Islam\").\nHas_dominant_religion(\"Brunei\", \"Islam\").\nHas_dominant_religion(\"Lebanon\", \"Islam\").\nHas_dominant_religion(\"Cameroon\", \"Islam\").\nHas_dominant_religion(\"Cote d'Ivoire\", \"Islam\").\nHas_dominant_religion(\"Ghana\", \"Islam\").\nHas_dominant_religion", "completions": [".decl Has_dominant_religion(Country:symbol, Religion:symbol)\nHas_dominant_religion(\"Saudi Arabia\", \"Islam\").\nHas_dominant_religion(\"United Arab Emirates\", \"Islam\").\nHas_dominant_religion(\"Egypt\", \"Islam\").\nHas_dominant_religion(\"Turkey\", \"Islam\").\nHas_dominant_religion(\"Indonesia\", \"Islam\").\nHas_dominant_religion(\"Pakistan\", \"Islam\").\nHas_dominant_religion(\"Bangladesh\", \"Islam\").\nHas_dominant_religion(\"Nigeria\", \"Islam\").\nHas_dominant_religion(\"Iran\", \"Islam\").\nHas_dominant_religion(\"Algeria\", \"Islam\").\nHas_dominant_religion(\"Morocco\", \"Islam\").\nHas_dominant_religion(\"Sudan\", \"Islam\").\nHas_dominant_religion(\"Iraq\", \"Islam\").\nHas_dominant_religion(\"Afghanistan\", \"Islam\").\nHas_dominant_religion(\"Yemen\", \"Islam\").\nHas_dominant_religion(\"Syria\", \"Islam\").\nHas_dominant_religion(\"Uzbekistan\", \"Islam\").\nHas_dominant_religion(\"Malaysia\", \"Islam\").\nHas_dominant_religion(\"Ethiopia\", \"Islam\").\nHas_dominant_religion(\"Kazakhstan\", \"Islam\").\nHas_dominant_religion(\"Tajikistan\", \"Islam\").\nHas_dominant_religion(\"Kyrgyzstan\", \"Islam\").\nHas_dominant_religion(\"Turkmenistan\", \"Islam\").\nHas_dominant_religion(\"Jordan\", \"Islam\").\nHas_dominant_religion(\"Senegal\", \"Islam\").\nHas_dominant_religion(\"Chad\", \"Islam\").\nHas_dominant_religion(\"Somalia\", \"Islam\").\nHas_dominant_religion(\"Mali\", \"Islam\").\nHas_dominant_religion(\"Guinea\", \"Islam\").\nHas_dominant_religion(\"Niger\", \"Islam\").\nHas_dominant_religion(\"Burkina Faso\", \"Islam\").\nHas_dominant_religion(\"Mauritania\", \"Islam\").\nHas_dominant_religion(\"Kosovo\", \"Islam\").\nHas_dominant_religion(\"Djibouti\", \"Islam\").\nHas_dominant_religion(\"Comoros\", \"Islam\").\nHas_dominant_religion(\"Tunisia\", \"Islam\").\nHas_dominant_religion(\"Libya\", \"Islam\").\nHas_dominant_religion(\"Palestine\", \"Islam\").\nHas_dominant_religion(\"Kuwait\", \"Islam\").\nHas_dominant_religion(\"Qatar\", \"Islam\").\nHas_dominant_religion(\"Bahrain\", \"Islam\").\nHas_dominant_religion(\"Oman\", \"Islam\").\nHas_dominant_religion(\"Maldives\", \"Islam\").\nHas_dominant_religion(\"Mauritius\", \"Islam\").\nHas_dominant_religion(\"Brunei\", \"Islam\").\nHas_dominant_religion(\"Lebanon\", \"Islam\").\nHas_dominant_religion(\"Cameroon\", \"Islam\").\nHas_dominant_religion(\"Cote d'Ivoire\", \"Islam\").\nHas_dominant_religion(\"Ghana\", \"Islam\").\nHas_dominant_religion"]}
{"id": 2204, "answer": false, "completion": ".decl Happens_during(Event1:symbol, Event2:symbol)\nHappens_during(\"funeral\", \"wake\").\nHappens_during(\"wake\", \"candle lighting\").\n.decl Answer()\nAnswer() :- Happens_during(\"funeral\", \"candle lighting\").\n.output Answer\n\n", "completions": [".decl Happens_during(Event1:symbol, Event2:symbol)\nHappens_during(\"funeral\", \"wake\").\nHappens_during(\"wake\", \"candle lighting\").\n.decl Answer()\nAnswer() :- Happens_during(\"funeral\", \"candle lighting\").\n.output Answer\n\n"]}
{"id": 2205, "answer": true, "completion": ".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Adam\", \"God\").\nHas_parent(\"Eve\", \"God\").\n.decl Has_spouse(Person:symbol, Spouse:symbol)\nHas_spouse(\"Adam\", \"Eve\").\n.decl Answer()\nAnswer() :- Has_parent(person1, parent), Has_parent(person2, parent), Has_spouse(person1, person2).\n.output Answer\n\n", "completions": [".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Adam\", \"God\").\nHas_parent(\"Eve\", \"God\").\n.decl Has_spouse(Person:symbol, Spouse:symbol)\nHas_spouse(\"Adam\", \"Eve\").\n.decl Answer()\nAnswer() :- Has_parent(person1, parent), Has_parent(person2, parent), Has_spouse(person1, person2).\n.output Answer\n\n"]}
{"id": 2206, "answer": false, "completion": ".decl Has_learning_disabilities(Animal:symbol)\nHas_learning_disabilities(\"human\").\n.decl Answer()\nAnswer() :- Has_learning_disabilities(\"placozoa\").\n.output Answer\n\n", "completions": [".decl Has_learning_disabilities(Animal:symbol)\nHas_learning_disabilities(\"human\").\n.decl Answer()\nAnswer() :- Has_learning_disabilities(\"placozoa\").\n.output Answer\n\n"]}
{"id": 2207, "answer": true, "completion": ".decl Opposes(Person:symbol, Thing:symbol)\nOpposes(\"System of a Down\", \"globalization\").\n.decl Answer()\nAnswer() :- Opposes(\"System of a Down\", \"globalization\").\n.output Answer\n\n", "completions": [".decl Opposes(Person:symbol, Thing:symbol)\nOpposes(\"System of a Down\", \"globalization\").\n.decl Answer()\nAnswer() :- Opposes(\"System of a Down\", \"globalization\").\n.output Answer\n\n"]}
{"id": 2208, "answer": false, "completion": ".decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Dr. Seuss\", \"writer\").\n.decl Wrote(Person:symbol, Book:symbol)\nWrote(\"Dr. Seuss\", \"The Cat in the Hat\").\nWrote(\"Dr. Seuss\", \"Green Eggs and Ham\").\n.decl Answer()\nAnswer() :- Is_a(\"Dr. Seuss\", \"writer\"), !Wrote(\"Dr. Seuss\", \"The Cat in the Hat\").\nAnswer() :- Is_a(\"Dr. Seuss\", \"writer\"), !Wrote(\"Dr. Seuss\", \"Green Eggs and Ham\").\n.output Answer\n\n", "completions": [".decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Dr. Seuss\", \"writer\").\n.decl Wrote(Person:symbol, Book:symbol)\nWrote(\"Dr. Seuss\", \"The Cat in the Hat\").\nWrote(\"Dr. Seuss\", \"Green Eggs and Ham\").\n.decl Answer()\nAnswer() :- Is_a(\"Dr. Seuss\", \"writer\"), !Wrote(\"Dr. Seuss\", \"The Cat in the Hat\").\nAnswer() :- Is_a(\"Dr. Seuss\", \"writer\"), !Wrote(\"Dr. Seuss\", \"Green Eggs and Ham\").\n.output Answer\n\n"]}
{"id": 2209, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"wearing a coat\", \"winter\").\nHappens_in_time(\"Hollywood\", \"July\").\nHappens_in_time(\"Hollywood\", \"August\").\nHappens_in_time(\"Hollywood\", \"September\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\nIn_season(\"September\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"wearing a coat\", season), Happens_in_time(\"Hollywood\", month), In_season(month, season).\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"wearing a coat\", \"winter\").\nHappens_in_time(\"Hollywood\", \"July\").\nHappens_in_time(\"Hollywood\", \"August\").\nHappens_in_time(\"Hollywood\", \"September\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\nIn_season(\"September\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"wearing a coat\", season), Happens_in_time(\"Hollywood\", month), In_season(month, season).\n.output Answer\n\n"]}
{"id": 2210, "answer": true, "completion": ".decl Has_n_atoms(Element:symbol, N_atoms:float)\nHas_n_atoms(\"silicon\", 14).\nHas_n_atoms(\"bromine\", 35).\n.decl Answer()\nAnswer() :- Has_n_atoms(\"silicon\", n_atoms1), Has_n_atoms(\"bromine\", n_atoms2), n_atoms1 < n_atoms2.\n.output Answer\n\n", "completions": [".decl Has_n_atoms(Element:symbol, N_atoms:float)\nHas_n_atoms(\"silicon\", 14).\nHas_n_atoms(\"bromine\", 35).\n.decl Answer()\nAnswer() :- Has_n_atoms(\"silicon\", n_atoms1), Has_n_atoms(\"bromine\", n_atoms2), n_atoms1 < n_atoms2.\n.output Answer\n\n"]}
{"id": 2211, "answer": true, "completion": ".decl Has_military_power(Person:symbol, Military_power:float)\nHas_military_power(\"Saddam Hussein\", 1).\nHas_military_power(\"Saladin\", 2).\nHas_military_power(\"Idris I\", 1).\n.decl Answer()\nAnswer() :- Has_military_power(\"Saddam Hussein\", military_power1), Has_military_power(\"Saladin\", military_power2), Has_military_power(\"Idris I\", military_power3), military_power2 > military_power3.\n.output Answer\n\n", "completions": [".decl Has_military_power(Person:symbol, Military_power:float)\nHas_military_power(\"Saddam Hussein\", 1).\nHas_military_power(\"Saladin\", 2).\nHas_military_power(\"Idris I\", 1).\n.decl Answer()\nAnswer() :- Has_military_power(\"Saddam Hussein\", military_power1), Has_military_power(\"Saladin\", military_power2), Has_military_power(\"Idris I\", military_power3), military_power2 > military_power3.\n.output Answer\n\n"]}
{"id": 2212, "answer": true, "completion": ".decl Named_after(Month:symbol, Person:symbol)\nNamed_after(\"March\", \"Mars\").\n.decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Jupiter\", \"Mars\").\n.decl Answer()\nAnswer() :- Named_after(month, person), Has_son(\"Jupiter\", person).\n.output Answer\n\n\n", "completions": [".decl Named_after(Month:symbol, Person:symbol)\nNamed_after(\"March\", \"Mars\").\n.decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Jupiter\", \"Mars\").\n.decl Answer()\nAnswer() :- Named_after(month, person), Has_son(\"Jupiter\", person).\n.output Answer\n\n\n"]}
{"id": 2213, "answer": true, "completion": ".decl Has_scandal(Company:symbol, Scandal:symbol)\nHas_scandal(\"Subway\", \"pedophilia\").\n.decl Answer()\nAnswer() :- Has_scandal(\"Subway\", \"pedophilia\").\n.output Answer\n\n", "completions": [".decl Has_scandal(Company:symbol, Scandal:symbol)\nHas_scandal(\"Subway\", \"pedophilia\").\n.decl Answer()\nAnswer() :- Has_scandal(\"Subway\", \"pedophilia\").\n.output Answer\n\n"]}
{"id": 2214, "answer": false, "completion": ".decl Is_age(Person:symbol, Age:float)\nIs_age(\"John Roberts\", 60).\n.decl Is_legal_age(Age:float)\nIs_legal_age(age) :- age >= 21.\n.decl Answer()\nAnswer() :- Is_age(\"John Roberts\", age), Is_legal_age(age).\n.output Answer\n\n", "completions": [".decl Is_age(Person:symbol, Age:float)\nIs_age(\"John Roberts\", 60).\n.decl Is_legal_age(Age:float)\nIs_legal_age(age) :- age >= 21.\n.decl Answer()\nAnswer() :- Is_age(\"John Roberts\", age), Is_legal_age(age).\n.output Answer\n\n"]}
{"id": 2215, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"two-year old\", 2).\n.decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"Scrabble tournament\", 1).\n.decl Answer()\nAnswer() :- Has_age(\"two-year old\", age), Lasts_n_years(\"Scrabble tournament\", n_years), age >= n_years.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"two-year old\", 2).\n.decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"Scrabble tournament\", 1).\n.decl Answer()\nAnswer() :- Has_age(\"two-year old\", age), Lasts_n_years(\"Scrabble tournament\", n_years), age >= n_years.\n.output Answer\n\n"]}
{"id": 2216, "answer": false, "completion": ".decl Has_speed(Person:symbol, Speed:float)\nHas_speed(\"Iris (mythology)\", 0).\nHas_speed(\"Hermes\", 0).\n.decl Has_speed_requirement(Job:symbol, Speed_requirement:float)\nHas_speed_requirement(\"UPS job\", 0).\n.decl Answer()\nAnswer() :- Has_speed(\"Iris (mythology)\", speed1), Has_speed_requirement(\"UPS job\", speed_requirement), speed1 < speed_requirement.\nAnswer() :- Has_speed(\"Hermes\", speed1), Has_speed_requirement(\"UPS job\", speed_requirement), speed1 < speed_requirement.\n.output Answer\n\n", "completions": [".decl Has_speed(Person:symbol, Speed:float)\nHas_speed(\"Iris (mythology)\", 0).\nHas_speed(\"Hermes\", 0).\n.decl Has_speed_requirement(Job:symbol, Speed_requirement:float)\nHas_speed_requirement(\"UPS job\", 0).\n.decl Answer()\nAnswer() :- Has_speed(\"Iris (mythology)\", speed1), Has_speed_requirement(\"UPS job\", speed_requirement), speed1 < speed_requirement.\nAnswer() :- Has_speed(\"Hermes\", speed1), Has_speed_requirement(\"UPS job\", speed_requirement), speed1 < speed_requirement.\n.output Answer\n\n"]}
{"id": 2217, "answer": true, "completion": ".decl Is_from(Person:symbol, Place:symbol)\nIs_from(\"Dorothea Wendling\", \"Germany\").\nIs_from(\"Porsche\", \"Germany\").\n.decl Answer()\nAnswer() :- Is_from(\"Dorothea Wendling\", place), Is_from(\"Porsche\", place).\n.output Answer\n\n", "completions": [".decl Is_from(Person:symbol, Place:symbol)\nIs_from(\"Dorothea Wendling\", \"Germany\").\nIs_from(\"Porsche\", \"Germany\").\n.decl Answer()\nAnswer() :- Is_from(\"Dorothea Wendling\", place), Is_from(\"Porsche\", place).\n.output Answer\n\n"]}
{"id": 2218, "answer": true, "completion": ".decl Has_won(Person:symbol, Award:symbol)\nHas_won(\"Will Ferrell\", \"Golden Globe Award\").\n.decl Is_difficult(Person:symbol, Award:symbol)\nIs_difficult(\"Will Ferrell\", \"Empire Award for Best Newcomer\").\n.decl Answer()\nAnswer() :- Has_won(\"Will Ferrell\", \"Empire Award for Best Newcomer\").\nAnswer() :- Has_won(\"Will Ferrell\", award1), Is_difficult(\"Will Ferrell\", award2), award1 != award2.\n.output Answer\n\n", "completions": [".decl Has_won(Person:symbol, Award:symbol)\nHas_won(\"Will Ferrell\", \"Golden Globe Award\").\n.decl Is_difficult(Person:symbol, Award:symbol)\nIs_difficult(\"Will Ferrell\", \"Empire Award for Best Newcomer\").\n.decl Answer()\nAnswer() :- Has_won(\"Will Ferrell\", \"Empire Award for Best Newcomer\").\nAnswer() :- Has_won(\"Will Ferrell\", award1), Is_difficult(\"Will Ferrell\", award2), award1 != award2.\n.output Answer\n\n"]}
{"id": 2219, "answer": true, "completion": ".decl Insults(Person_A:symbol, Person_B:symbol)\nInsults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.decl Answer()\nAnswer() :- Insults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.output Answer\n\n", "completions": [".decl Insults(Person_A:symbol, Person_B:symbol)\nInsults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.decl Answer()\nAnswer() :- Insults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.output Answer\n\n"]}
{"id": 2220, "answer": false, "completion": ".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Felix Potvin\", \"goalie\").\n.decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Felix Potvin\", \"forward\").\n.decl Answer()\nAnswer() :- Has_position(\"Felix Potvin\", \"goalie\").\nAnswer() :- Has_position(\"Felix Potvin\", \"forward\").\n.output Answer\n\n", "completions": [".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Felix Potvin\", \"goalie\").\n.decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Felix Potvin\", \"forward\").\n.decl Answer()\nAnswer() :- Has_position(\"Felix Potvin\", \"goalie\").\nAnswer() :- Has_position(\"Felix Potvin\", \"forward\").\n.output Answer\n\n"]}
{"id": 2221, "answer": false, "completion": ".decl Has_script(Language:symbol, Script:symbol)\nHas_script(\"Gujarati\", \"Indic\").\nHas_script(\"Japanese\", \"Kanji\").\n.decl Answer()\nAnswer() :- Has_script(\"Gujarati\", script1), Has_script(\"Japanese\", script2), script1 = script2.\n.output Answer\n\n", "completions": [".decl Has_script(Language:symbol, Script:symbol)\nHas_script(\"Gujarati\", \"Indic\").\nHas_script(\"Japanese\", \"Kanji\").\n.decl Answer()\nAnswer() :- Has_script(\"Gujarati\", script1), Has_script(\"Japanese\", script2), script1 = script2.\n.output Answer\n\n"]}
{"id": 2222, "answer": true, "completion": ".decl Has_theme(Video_game:symbol, Theme:symbol)\nHas_theme(\"Fallout\", \"end of civilization\").\nHas_theme(\"Fallout\", \"slot machines\").\n.decl Answer()\nAnswer() :- Has_theme(video_game, \"end of civilization\"), Has_theme(video_game, \"slot machines\").\n.output Answer\n\n", "completions": [".decl Has_theme(Video_game:symbol, Theme:symbol)\nHas_theme(\"Fallout\", \"end of civilization\").\nHas_theme(\"Fallout\", \"slot machines\").\n.decl Answer()\nAnswer() :- Has_theme(video_game, \"end of civilization\"), Has_theme(video_game, \"slot machines\").\n.output Answer\n\n"]}
{"id": 2223, "answer": true, "completion": ".decl Has_amino_acid(Object:symbol, Amino_acid:symbol)\nHas_amino_acid(\"severed finger\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Has_amino_acid(\"severed finger\", \"glutamic acid\").\n.output Answer\n\n", "completions": [".decl Has_amino_acid(Object:symbol, Amino_acid:symbol)\nHas_amino_acid(\"severed finger\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Has_amino_acid(\"severed finger\", \"glutamic acid\").\n.output Answer\n\n"]}
{"id": 2224, "answer": true, "completion": ".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Sara Paxton\", \"blonde\").\n.decl Has_eye_color(Person:symbol, Eye_color:symbol)\nHas_eye_color(\"Sara Paxton\", \"green\").\n.decl Is_ethnicity(Person:symbol, Ethnicity:symbol)\nIs_ethnicity(\"Sara Paxton\", \"Latino\").\n.decl Answer()\nAnswer() :- Has_hair_color(\"Sara Paxton\", \"blonde\"), Has_eye_color(\"Sara Paxton\", \"green\"), Is_ethnicity(\"Sara Paxton\", \"Latino\").\n.output Answer\n\n", "completions": [".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Sara Paxton\", \"blonde\").\n.decl Has_eye_color(Person:symbol, Eye_color:symbol)\nHas_eye_color(\"Sara Paxton\", \"green\").\n.decl Is_ethnicity(Person:symbol, Ethnicity:symbol)\nIs_ethnicity(\"Sara Paxton\", \"Latino\").\n.decl Answer()\nAnswer() :- Has_hair_color(\"Sara Paxton\", \"blonde\"), Has_eye_color(\"Sara Paxton\", \"green\"), Is_ethnicity(\"Sara Paxton\", \"Latino\").\n.output Answer\n\n"]}
{"id": 2225, "answer": true, "completion": ".decl Reads(Person:symbol, Book:symbol)\nReads(\"William Howard Taft\", \"DC Comics\").\n.decl Answer()\nAnswer() :- Reads(\"William Howard Taft\", \"DC Comics\").\n.output Answer\n\n", "completions": [".decl Reads(Person:symbol, Book:symbol)\nReads(\"William Howard Taft\", \"DC Comics\").\n.decl Answer()\nAnswer() :- Reads(\"William Howard Taft\", \"DC Comics\").\n.output Answer\n\n"]}
{"id": 2226, "answer": false, "completion": ".decl Has_idea(Group:symbol, Idea:symbol)\nHas_idea(\"Christians\", \"Seraphim\").\nHas_idea(\"Muslims\", \"Seraphim\").\n.decl Answer()\nAnswer() :- Has_idea(\"Christians\", idea1), Has_idea(\"Muslims\", idea2), idea1 != idea2.\n.output Answer\n\n", "completions": [".decl Has_idea(Group:symbol, Idea:symbol)\nHas_idea(\"Christians\", \"Seraphim\").\nHas_idea(\"Muslims\", \"Seraphim\").\n.decl Answer()\nAnswer() :- Has_idea(\"Christians\", idea1), Has_idea(\"Muslims\", idea2), idea1 != idea2.\n.output Answer\n\n"]}
{"id": 2227, "answer": true, "completion": ".decl Has_dyscalculia(Person:symbol)\nHas_dyscalculia(\"John\").\n.decl Needs_surveying_skills(Job:symbol)\nNeeds_surveying_skills(\"surveying work\").\n.decl Answer()\nAnswer() :- Has_dyscalculia(person), Needs_surveying_skills(job).\n.output Answer\n\n", "completions": [".decl Has_dyscalculia(Person:symbol)\nHas_dyscalculia(\"John\").\n.decl Needs_surveying_skills(Job:symbol)\nNeeds_surveying_skills(\"surveying work\").\n.decl Answer()\nAnswer() :- Has_dyscalculia(person), Needs_surveying_skills(job).\n.output Answer\n\n"]}
{"id": 2228, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Alec Baldwin\", 4).\nHas_n_children(\"Clint Eastwood\", 2).\n.decl Answer()\nAnswer() :- Has_n_children(\"Alec Baldwin\", n_children1), Has_n_children(\"Clint Eastwood\", n_children2), n_children1 > n_children2.\n.output Answer\n\n", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Alec Baldwin\", 4).\nHas_n_children(\"Clint Eastwood\", 2).\n.decl Answer()\nAnswer() :- Has_n_children(\"Alec Baldwin\", n_children1), Has_n_children(\"Clint Eastwood\", n_children2), n_children1 > n_children2.\n.output Answer\n\n"]}
{"id": 2229, "answer": true, "completion": ".decl Used_by(Object:symbol, Person:symbol)\nUsed_by(\"banana tree\", \"judge\").\n.decl Answer()\nAnswer() :- Used_by(\"banana tree\", \"judge\").\n.output Answer\n\n", "completions": [".decl Used_by(Object:symbol, Person:symbol)\nUsed_by(\"banana tree\", \"judge\").\n.decl Answer()\nAnswer() :- Used_by(\"banana tree\", \"judge\").\n.output Answer\n\n"]}
{"id": 2230, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"zombie\", \"green\").\nHas_color(\"nickel\", \"green\").\n.decl Causes_color(Object:symbol, Color:symbol)\nCauses_color(\"nickel\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"zombie\", color), Causes_color(object, color).\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"zombie\", \"green\").\nHas_color(\"nickel\", \"green\").\n.decl Causes_color(Object:symbol, Color:symbol)\nCauses_color(\"nickel\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"zombie\", color), Causes_color(object, color).\n.output Answer\n\n"]}
{"id": 2231, "answer": false, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"bitcoin\", 10000).\nHas_price(\"Volkswagen Jetta\", 20000).\n.decl Answer()\nAnswer() :- Has_price(\"bitcoin\", price1), Has_price(\"Volkswagen Jetta\", price2), price1 >= price2.\n.output Answer\n\n", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"bitcoin\", 10000).\nHas_price(\"Volkswagen Jetta\", 20000).\n.decl Answer()\nAnswer() :- Has_price(\"bitcoin\", price1), Has_price(\"Volkswagen Jetta\", price2), price1 >= price2.\n.output Answer\n\n"]}
{"id": 2232, "answer": true, "completion": ".decl Has_history(Thing:symbol, History:symbol)\nHas_history(\"Fraktur\", \"sordid\").\n.decl Answer()\nAnswer() :- Has_history(\"Fraktur\", \"sordid\").\n.output Answer\n\n", "completions": [".decl Has_history(Thing:symbol, History:symbol)\nHas_history(\"Fraktur\", \"sordid\").\n.decl Answer()\nAnswer() :- Has_history(\"Fraktur\", \"sordid\").\n.output Answer\n\n"]}
{"id": 2233, "answer": false, "completion": ".decl Has_sect(Person:symbol, Sect:symbol)\nHas_sect(\"Martin Luther\", \"Lutheran\").\nHas_sect(\"Martin Luther King Jr.\", \"Baptist\").\n.decl Answer()\nAnswer() :- Has_sect(\"Martin Luther\", sect1), Has_sect(\"Martin Luther King Jr.\", sect2), sect1 = sect2.\n.output Answer\n\n", "completions": [".decl Has_sect(Person:symbol, Sect:symbol)\nHas_sect(\"Martin Luther\", \"Lutheran\").\nHas_sect(\"Martin Luther King Jr.\", \"Baptist\").\n.decl Answer()\nAnswer() :- Has_sect(\"Martin Luther\", sect1), Has_sect(\"Martin Luther King Jr.\", sect2), sect1 = sect2.\n.output Answer\n\n"]}
{"id": 2234, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Donald Duck\", 50).\n.decl Has_age_limit(Place:symbol, Age_limit:float)\nHas_age_limit(\"grocery stores\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"Donald Duck\", age), Has_age_limit(\"grocery stores\", age_limit), age >= age_limit.\n.output Answer\n\n", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Donald Duck\", 50).\n.decl Has_age_limit(Place:symbol, Age_limit:float)\nHas_age_limit(\"grocery stores\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"Donald Duck\", age), Has_age_limit(\"grocery stores\", age_limit), age >= age_limit.\n.output Answer\n\n"]}
{"id": 2235, "answer": true, "completion": ".decl Appears_in(Person:symbol, Movie:symbol)\nAppears_in(\"Hades\", \"Hercules\").\n.decl Is_a(Movie:symbol, Genre:symbol)\nIs_a(\"Hercules\", \"Disney Channel musical movie\").\n.decl Answer()\nAnswer() :- Appears_in(\"Hades\", movie), Is_a(movie, \"Disney Channel musical movie\").\n.output Answer\n\n", "completions": [".decl Appears_in(Person:symbol, Movie:symbol)\nAppears_in(\"Hades\", \"Hercules\").\n.decl Is_a(Movie:symbol, Genre:symbol)\nIs_a(\"Hercules\", \"Disney Channel musical movie\").\n.decl Answer()\nAnswer() :- Appears_in(\"Hades\", movie), Is_a(movie, \"Disney Channel musical movie\").\n.output Answer\n\n"]}
{"id": 2236, "answer": false, "completion": ".decl Has_white_blood_cells(Person:symbol)\nHas_white_blood_cells(\"John\").\n.decl Dies(Person:symbol)\nDies(\"John\").\n.decl Answer()\nAnswer() :- Has_white_blood_cells(person), !Dies(person).\n.output Answer\n\n", "completions": [".decl Has_white_blood_cells(Person:symbol)\nHas_white_blood_cells(\"John\").\n.decl Dies(Person:symbol)\nDies(\"John\").\n.decl Answer()\nAnswer() :- Has_white_blood_cells(person), !Dies(person).\n.output Answer\n\n"]}
{"id": 2237, "answer": false, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"swimming\", \"lake\").\nHappens_in_place(\"undergraduate years\", \"college\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"swimming\", \"summer\").\nHappens_in_time(\"undergraduate years\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:sy", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"swimming\", \"lake\").\nHappens_in_place(\"undergraduate years\", \"college\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"swimming\", \"summer\").\nHappens_in_time(\"undergraduate years\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:symbol, Time:symbol)\nHappens_in_place_and_time(\"swimming\", \"lake\", \"summer\").\nHappens_in_place_and_time(\"undergraduate years\", \"college\", \"college\").\n.decl Happens_in_place_and_time(Event:symbol, Place:sy"]}
{"id": 2238, "answer": true, "completion": ".decl Is_citizen(Person:symbol)\nIs_citizen(\"Simon Cowell\").\n.decl Is_eligible_to_vote(Person:symbol)\nIs_eligible_to_vote(\"Simon Cowell\").\n.decl Answer()\nAnswer() :- Is_citizen(\"Simon Cowell\"), Is_eligible_to_vote(\"Simon Cowell\").\n.output Answer\n\n", "completions": [".decl Is_citizen(Person:symbol)\nIs_citizen(\"Simon Cowell\").\n.decl Is_eligible_to_vote(Person:symbol)\nIs_eligible_to_vote(\"Simon Cowell\").\n.decl Answer()\nAnswer() :- Is_citizen(\"Simon Cowell\"), Is_eligible_to_vote(\"Simon Cowell\").\n.output Answer\n\n"]}
{"id": 2239, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Michael Bloomberg\", 40).\n.decl Has_debt(Country:symbol, Debt:float)\nHas_debt(\"Micronesia\", 0.1).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Michael Bloomberg\", net_worth), Has_debt(\"Micronesia\", debt), net_worth >= debt * 10.\n.output Answer\n\n", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Michael Bloomberg\", 40).\n.decl Has_debt(Country:symbol, Debt:float)\nHas_debt(\"Micronesia\", 0.1).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Michael Bloomberg\", net_worth), Has_debt(\"Micronesia\", debt), net_worth >= debt * 10.\n.output Answer\n\n"]}
{"id": 2240, "answer": true, "completion": ".decl Has_population(Animal:symbol, Population:float)\nHas_population(\"Leopard cat\", 20000).\nHas_population(\"Bornean Orangutan\", 10000).\n.decl Answer()\nAnswer() :- Has_population(\"Leopard cat\", population1), Has_population(\"Bornean Orangutan\", population2), population1 > population2.\n.output Answer\n\n\n", "completions": [".decl Has_population(Animal:symbol, Population:float)\nHas_population(\"Leopard cat\", 20000).\nHas_population(\"Bornean Orangutan\", 10000).\n.decl Answer()\nAnswer() :- Has_population(\"Leopard cat\", population1), Has_population(\"Bornean Orangutan\", population2), population1 > population2.\n.output Answer\n\n\n"]}
{"id": 2241, "answer": false, "completion": ".decl Has_speed(Vehicle:symbol, Speed:float)\nHas_speed(\"Panzer VIII Maus tank missile\", 10).\n.decl Has_weight(Vehicle:symbol, Weight:float)\nHas_weight(\"Panzer VIII Maus tank missile\", 200).\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"cat\", 5).\n.decl Distance(City_A:symbol, City_B:symbol, Distance:float)\nDistance(\"Barcelona\", \"Madrid\", 400).\n.decl Answer()\nAnswer() :- Has_speed(\"Panzer VIII Maus tank missile\", speed), Has_weight(\"Panzer VIII Maus tank missile\", weight), Has_weight(\"cat\", weight2), Distance(\"Barcelona\", \"Madrid\", distance), speed > 0, weight > weight2, distance/speed <= 1.\n.output Answer\n\n", "completions": [".decl Has_speed(Vehicle:symbol, Speed:float)\nHas_speed(\"Panzer VIII Maus tank missile\", 10).\n.decl Has_weight(Vehicle:symbol, Weight:float)\nHas_weight(\"Panzer VIII Maus tank missile\", 200).\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"cat\", 5).\n.decl Distance(City_A:symbol, City_B:symbol, Distance:float)\nDistance(\"Barcelona\", \"Madrid\", 400).\n.decl Answer()\nAnswer() :- Has_speed(\"Panzer VIII Maus tank missile\", speed), Has_weight(\"Panzer VIII Maus tank missile\", weight), Has_weight(\"cat\", weight2), Distance(\"Barcelona\", \"Madrid\", distance), speed > 0, weight > weight2, distance/speed <= 1.\n.output Answer\n\n"]}
{"id": 2242, "answer": true, "completion": ".decl Has_discount(Food:symbol, Discount:float)\nHas_discount(\"Aldi's foods\", 0.5).\n.decl Is_out_of_date(Food:symbol)\nIs_out_of_date(\"Aldi's foods\").\n.decl Answer()\nAnswer() :- Has_discount(\"Aldi's foods\", discount), Is_out_of_date(\"Aldi's foods\"), discount > 0.\n.output Answer\n\n", "completions": [".decl Has_discount(Food:symbol, Discount:float)\nHas_discount(\"Aldi's foods\", 0.5).\n.decl Is_out_of_date(Food:symbol)\nIs_out_of_date(\"Aldi's foods\").\n.decl Answer()\nAnswer() :- Has_discount(\"Aldi's foods\", discount), Is_out_of_date(\"Aldi's foods\"), discount > 0.\n.output Answer\n\n"]}
{"id": 2243, "answer": true, "completion": ".decl Believes(Person:symbol, Statement:symbol)\nBelieves(\"Carrie Poppy\", \"psychics are not real\").\n.decl Answer()\nAnswer() :- Believes(\"Carrie Poppy\", \"psychics are not real\").\n.output Answer\n\n", "completions": [".decl Believes(Person:symbol, Statement:symbol)\nBelieves(\"Carrie Poppy\", \"psychics are not real\").\n.decl Answer()\nAnswer() :- Believes(\"Carrie Poppy\", \"psychics are not real\").\n.output Answer\n\n"]}
{"id": 2244, "answer": true, "completion": ".decl Donates(Person:symbol, Organ:symbol)\nDonates(\"organ donor\", \"kidney\").\n.decl Is_dead(Person:symbol)\nIs_dead(\"organ donor\").\n.decl Answer()\nAnswer() :- Donates(\"organ donor\", \"kidney\"), Is_dead(\"organ donor\").\n.output Answer\n\n", "completions": [".decl Donates(Person:symbol, Organ:symbol)\nDonates(\"organ donor\", \"kidney\").\n.decl Is_dead(Person:symbol)\nIs_dead(\"organ donor\").\n.decl Answer()\nAnswer() :- Donates(\"organ donor\", \"kidney\"), Is_dead(\"organ donor\").\n.output Answer\n\n"]}
{"id": 2245, "answer": false, "completion": ".decl Has_symptom(Disease:symbol, Symptom:symbol)\nHas_symptom(\"stroke\", \"numbness\").\nHas_symptom(\"stroke\", \"confusion\").\nHas_symptom(\"stroke\", \"headache\").\nHas_symptom(\"stroke\", \"vision loss\").\nHas_symptom(\"stroke\", \"dizziness\").\nHas_symptom(\"stroke\", \"loss of balance\").\nHas_symptom(\"stroke\", \"trouble speaking\").\nHas_symptom(\"stroke\", \"trouble walking\").\nHas_symptom(\"stroke\", \"seizures\").\nHas_symptom(\"stroke\", \"trouble swallowing\").\nHas_symptom(\"stroke\", \"loss of consciousness\").\nHas_symptom(\"stroke\", \"weakness\").\nHas_symptom(\"stroke\", \"paralysis\").\nHas_symptom(\"stroke\", \"trouble breathing\").\nHas_symptom(\"stroke\", \"chest pain\").\nHas_symptom(\"stroke\", \"rapid heart rate\").\nHas_symptom(\"stroke\", \"high blood pressure\").\nHas_symptom(\"stroke\", \"low blood pressure\").\nHas_symptom(\"stroke\", \"fever\").\nHas_symptom(\"stroke\", \"chills\").\nHas_symptom(\"stroke\", \"sweating\").\nHas_symptom(\"stroke\", \"nausea\").\nHas_symptom(\"stroke\", \"vomiting\").\nHas_symptom(\"stroke\", \"diarrhea\").\nHas_symptom(\"stroke\", \"constipation\").\nHas_symptom(\"stroke\", \"abdominal pain\").\nHas_symptom(\"stroke\", \"loss of appetite\").\nHas_symptom(\"stroke\", \"weight loss\").\nHas_symptom(\"stroke\", \"weight gain\").\nHas_symptom(\"stroke\", \"fatigue\").\nHas_symptom(\"stroke\", \"insomnia\").\nHas_symptom(\"stroke\", \"excessive sleepiness\").\nHas_symptom(\"stroke\", \"excessive thirst\").\nHas_symptom(\"stroke\", \"excessive urination\").\nHas_symptom(\"stroke\", \"excessive hunger\").\nHas_symptom(\"stroke\", \"cough\").\nHas_symptom(\"stroke\", \"sore throat\").\nHas_symptom(\"stroke\", \"runny nose\").\nHas_symptom(\"stroke\", \"nasal congestion\").\nHas_symptom(\"stroke\", \"sneezing\").\nHas_symptom(\"stroke\", \"hoarseness\").\nHas_symptom(\"stroke\", \"shortness of breath\").\nHas_symptom(\"stroke\", \"wheezing\").\nHas_symptom(\"stroke\", \"chest tightness\").\nHas_symptom(\"stroke\", \"heart palpitations\").\nHas_symptom(\"stroke\", \"heart murmur\").\nHas_symptom(\"stroke\", \"heartburn\").\nHas_symptom(\"stroke\", \"indigestion\").\nHas_symptom(\"stroke\", \"bloating\").\nHas_symptom(\"stroke\", \"belching\").\nHas_symptom(\"stroke\", \"flatulence\").\nHas_symptom(\"stroke\", \"abdominal bloating\").\nHas_symptom(\"stroke\", \"abdominal cramps\").\nHas_symptom(\"stroke\", \"abdominal distention\").\nHas_symptom(\"stroke\", \"abdominal tenderness\").\nHas_sympt", "completions": [".decl Has_symptom(Disease:symbol, Symptom:symbol)\nHas_symptom(\"stroke\", \"numbness\").\nHas_symptom(\"stroke\", \"confusion\").\nHas_symptom(\"stroke\", \"headache\").\nHas_symptom(\"stroke\", \"vision loss\").\nHas_symptom(\"stroke\", \"dizziness\").\nHas_symptom(\"stroke\", \"loss of balance\").\nHas_symptom(\"stroke\", \"trouble speaking\").\nHas_symptom(\"stroke\", \"trouble walking\").\nHas_symptom(\"stroke\", \"seizures\").\nHas_symptom(\"stroke\", \"trouble swallowing\").\nHas_symptom(\"stroke\", \"loss of consciousness\").\nHas_symptom(\"stroke\", \"weakness\").\nHas_symptom(\"stroke\", \"paralysis\").\nHas_symptom(\"stroke\", \"trouble breathing\").\nHas_symptom(\"stroke\", \"chest pain\").\nHas_symptom(\"stroke\", \"rapid heart rate\").\nHas_symptom(\"stroke\", \"high blood pressure\").\nHas_symptom(\"stroke\", \"low blood pressure\").\nHas_symptom(\"stroke\", \"fever\").\nHas_symptom(\"stroke\", \"chills\").\nHas_symptom(\"stroke\", \"sweating\").\nHas_symptom(\"stroke\", \"nausea\").\nHas_symptom(\"stroke\", \"vomiting\").\nHas_symptom(\"stroke\", \"diarrhea\").\nHas_symptom(\"stroke\", \"constipation\").\nHas_symptom(\"stroke\", \"abdominal pain\").\nHas_symptom(\"stroke\", \"loss of appetite\").\nHas_symptom(\"stroke\", \"weight loss\").\nHas_symptom(\"stroke\", \"weight gain\").\nHas_symptom(\"stroke\", \"fatigue\").\nHas_symptom(\"stroke\", \"insomnia\").\nHas_symptom(\"stroke\", \"excessive sleepiness\").\nHas_symptom(\"stroke\", \"excessive thirst\").\nHas_symptom(\"stroke\", \"excessive urination\").\nHas_symptom(\"stroke\", \"excessive hunger\").\nHas_symptom(\"stroke\", \"cough\").\nHas_symptom(\"stroke\", \"sore throat\").\nHas_symptom(\"stroke\", \"runny nose\").\nHas_symptom(\"stroke\", \"nasal congestion\").\nHas_symptom(\"stroke\", \"sneezing\").\nHas_symptom(\"stroke\", \"hoarseness\").\nHas_symptom(\"stroke\", \"shortness of breath\").\nHas_symptom(\"stroke\", \"wheezing\").\nHas_symptom(\"stroke\", \"chest tightness\").\nHas_symptom(\"stroke\", \"heart palpitations\").\nHas_symptom(\"stroke\", \"heart murmur\").\nHas_symptom(\"stroke\", \"heartburn\").\nHas_symptom(\"stroke\", \"indigestion\").\nHas_symptom(\"stroke\", \"bloating\").\nHas_symptom(\"stroke\", \"belching\").\nHas_symptom(\"stroke\", \"flatulence\").\nHas_symptom(\"stroke\", \"abdominal bloating\").\nHas_symptom(\"stroke\", \"abdominal cramps\").\nHas_symptom(\"stroke\", \"abdominal distention\").\nHas_symptom(\"stroke\", \"abdominal tenderness\").\nHas_sympt"]}
{"id": 2246, "answer": true, "completion": ".decl Has_taste(Object:symbol, Taste:symbol)\nHas_taste(\"Law & Order\", \"bland\").\n.decl Answer()\nAnswer() :- Has_taste(\"Law & Order\", taste).\n.output Answer\n\n", "completions": [".decl Has_taste(Object:symbol, Taste:symbol)\nHas_taste(\"Law & Order\", \"bland\").\n.decl Answer()\nAnswer() :- Has_taste(\"Law & Order\", taste).\n.output Answer\n\n"]}
{"id": 2247, "answer": true, "completion": ".decl Has_equivalent(God:symbol, God_equivalent:symbol)\nHas_equivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Has_equivalent(\"Vulcan\", god_equivalent).\n.output Answer\n\n", "completions": [".decl Has_equivalent(God:symbol, God_equivalent:symbol)\nHas_equivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Has_equivalent(\"Vulcan\", god_equivalent).\n.output Answer\n\n"]}
{"id": 2248, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Continent:symbol)\nLives_in(\"hippopotamus\", \"Africa\").\n.decl Answer()\nAnswer() :- Lives_in(\"hippopotamus\", \"Africa\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Continent:symbol)\nLives_in(\"hippopotamus\", \"Africa\").\n.decl Answer()\nAnswer() :- Lives_in(\"hippopotamus\", \"Africa\").\n.output Answer\n\n"]}
{"id": 2249, "answer": true, "completion": ".decl Has_child(Person:symbol, Child:symbol)\nHas_child(\"mother\", \"stillborn\").\n.decl Wraps_gift(Person:symbol, Gift:symbol, Wrapping_paper:symbol)\nWraps_gift(\"mother\", \"gift\", \"stork wrapping paper\").\n.decl Answer()\nAnswer() :- Has_child(\"mother\", \"stillborn\"), Wraps_gift(\"mother\", \"gift\", \"stork wrapping paper\").\n.output Answer\n\n", "completions": [".decl Has_child(Person:symbol, Child:symbol)\nHas_child(\"mother\", \"stillborn\").\n.decl Wraps_gift(Person:symbol, Gift:symbol, Wrapping_paper:symbol)\nWraps_gift(\"mother\", \"gift\", \"stork wrapping paper\").\n.decl Answer()\nAnswer() :- Has_child(\"mother\", \"stillborn\"), Wraps_gift(\"mother\", \"gift\", \"stork wrapping paper\").\n.output Answer\n\n"]}
{"id": 2250, "answer": false, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"Petco\", \"dog food\").\nSells(\"Petco\", \"cat food\").\nSells(\"Petco\", \"fish food\").\nSells(\"Petco\", \"hamster food\").\nSells(\"Petco\", \"bird food\").\nSells(\"Petco\", \"snake food\").\nSells(\"Petco\", \"turtle food\").\nSells(\"Petco\", \"lizard food\").\nSells(\"Petco\", \"tortoise food\").\nSells(\"Petco\", \"rabbit food\").\nSells(\"Petco\", \"guinea pig food\").\nSells(\"Petco\", \"gerbil food\").\nSells(\"Petco\", \"chinchilla food\").\nSells(\"Petco\", \"ferret food\").\nSells(\"Petco\", \"cat litter\").\nSells(\"Petco\", \"dog leash\").\nSells(\"Petco\", \"dog collar\").\nSells(\"Petco\", \"dog bed\").\nSells(\"Petco\", \"cat bed\").\nSells(\"Petco\", \"fish tank\").\nSells(\"Petco\", \"hamster cage\").\nSells(\"Petco\", \"bird cage\").\nSells(\"Petco\", \"snake cage\").\nSells(\"Petco\", \"turtle cage\").\nSells(\"Petco\", \"lizard cage\").\nSells(\"Petco\", \"tortoise cage\").\nSells(\"Petco\", \"rabbit cage\").\nSells(\"Petco\", \"guinea pig cage\").\nSells(\"Petco\", \"gerbil cage\").\nSells(\"Petco\", \"chinchilla cage\").\nSells(\"Petco\", \"ferret cage\").\nSells(\"Petco\", \"dog toy\").\nSells(\"Petco\", \"cat toy\").\nSells(\"Petco\", \"fish toy\").\nSells(\"Petco\", \"hamster toy\").\nSells(\"Petco\", \"bird toy\").\nSells(\"Petco\", \"snake toy\").\nSells(\"Petco\", \"turtle toy\").\nSells(\"Petco\", \"lizard toy\").\nSells(\"Petco\", \"tortoise toy\").\nSells(\"Petco\", \"rabbit toy\").\nSells(\"Petco\", \"guinea pig toy\").\nSells(\"Petco\", \"gerbil toy\").\nSells(\"Petco\", \"chinchilla toy\").\nSells(\"Petco\", \"ferret toy\").\nSells(\"Petco\", \"dog shampoo\").\nSells(\"Petco\", \"cat shampoo\").\nSells(\"Petco\", \"fish shampoo\").\nSells(\"Petco\", \"hamster shampoo\").\nSells(\"Petco\", \"bird shampoo\").\nSells(\"Petco\", \"snake shampoo\").\nSells(\"Petco\", \"turtle shampoo\").\nSells(\"Petco\", \"lizard shampoo\").\nSells(\"Petco\", \"tortoise shampoo\").\nSells(\"Petco\", \"rabbit shampoo\").\nSells(\"Petco\", \"guinea pig shampoo\").\nSells(\"Petco\", \"gerbil shampoo\").\nSells(\"Petco\", \"chinchilla shampoo\").\nSells(\"Petco\", \"ferret shampoo\").\nSells(\"Petco\", \"dog brush\").\nSells(\"Petco\", \"cat brush\").\nSells(\"Petco\", \"fish brush\").\nSells(\"Petco\", \"hamster brush\").\nSells(\"Petco\", \"bird brush\").\nSells(\"Petco\", \"snake brush\").\nSells(\"Petco\", \"turtle brush\").\nSells", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"Petco\", \"dog food\").\nSells(\"Petco\", \"cat food\").\nSells(\"Petco\", \"fish food\").\nSells(\"Petco\", \"hamster food\").\nSells(\"Petco\", \"bird food\").\nSells(\"Petco\", \"snake food\").\nSells(\"Petco\", \"turtle food\").\nSells(\"Petco\", \"lizard food\").\nSells(\"Petco\", \"tortoise food\").\nSells(\"Petco\", \"rabbit food\").\nSells(\"Petco\", \"guinea pig food\").\nSells(\"Petco\", \"gerbil food\").\nSells(\"Petco\", \"chinchilla food\").\nSells(\"Petco\", \"ferret food\").\nSells(\"Petco\", \"cat litter\").\nSells(\"Petco\", \"dog leash\").\nSells(\"Petco\", \"dog collar\").\nSells(\"Petco\", \"dog bed\").\nSells(\"Petco\", \"cat bed\").\nSells(\"Petco\", \"fish tank\").\nSells(\"Petco\", \"hamster cage\").\nSells(\"Petco\", \"bird cage\").\nSells(\"Petco\", \"snake cage\").\nSells(\"Petco\", \"turtle cage\").\nSells(\"Petco\", \"lizard cage\").\nSells(\"Petco\", \"tortoise cage\").\nSells(\"Petco\", \"rabbit cage\").\nSells(\"Petco\", \"guinea pig cage\").\nSells(\"Petco\", \"gerbil cage\").\nSells(\"Petco\", \"chinchilla cage\").\nSells(\"Petco\", \"ferret cage\").\nSells(\"Petco\", \"dog toy\").\nSells(\"Petco\", \"cat toy\").\nSells(\"Petco\", \"fish toy\").\nSells(\"Petco\", \"hamster toy\").\nSells(\"Petco\", \"bird toy\").\nSells(\"Petco\", \"snake toy\").\nSells(\"Petco\", \"turtle toy\").\nSells(\"Petco\", \"lizard toy\").\nSells(\"Petco\", \"tortoise toy\").\nSells(\"Petco\", \"rabbit toy\").\nSells(\"Petco\", \"guinea pig toy\").\nSells(\"Petco\", \"gerbil toy\").\nSells(\"Petco\", \"chinchilla toy\").\nSells(\"Petco\", \"ferret toy\").\nSells(\"Petco\", \"dog shampoo\").\nSells(\"Petco\", \"cat shampoo\").\nSells(\"Petco\", \"fish shampoo\").\nSells(\"Petco\", \"hamster shampoo\").\nSells(\"Petco\", \"bird shampoo\").\nSells(\"Petco\", \"snake shampoo\").\nSells(\"Petco\", \"turtle shampoo\").\nSells(\"Petco\", \"lizard shampoo\").\nSells(\"Petco\", \"tortoise shampoo\").\nSells(\"Petco\", \"rabbit shampoo\").\nSells(\"Petco\", \"guinea pig shampoo\").\nSells(\"Petco\", \"gerbil shampoo\").\nSells(\"Petco\", \"chinchilla shampoo\").\nSells(\"Petco\", \"ferret shampoo\").\nSells(\"Petco\", \"dog brush\").\nSells(\"Petco\", \"cat brush\").\nSells(\"Petco\", \"fish brush\").\nSells(\"Petco\", \"hamster brush\").\nSells(\"Petco\", \"bird brush\").\nSells(\"Petco\", \"snake brush\").\nSells(\"Petco\", \"turtle brush\").\nSells"]}
{"id": 2251, "answer": false, "completion": ".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"Immanuel Kant\", \"disgusted\").\n.decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"Immanuel Kant\", \"disgusted\").\n.decl Answer()\nAnswer() :- Has_opinion(\"Immanuel Kant\", \"disgusted\").\n.output Answer\n\n", "completions": [".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"Immanuel Kant\", \"disgusted\").\n.decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"Immanuel Kant\", \"disgusted\").\n.decl Answer()\nAnswer() :- Has_opinion(\"Immanuel Kant\", \"disgusted\").\n.output Answer\n\n"]}
{"id": 2252, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"cat\", \"mouse\").\nEats(\"cat\", \"bird\").\nEats(\"cat\", \"fish\").\nEats(\"cat\", \"hamster\").\n.decl Answer()\nAnswer() :- Eats(\"cat\", \"pancakes\").\n.output Answer\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"cat\", \"mouse\").\nEats(\"cat\", \"bird\").\nEats(\"cat\", \"fish\").\nEats(\"cat\", \"hamster\").\n.decl Answer()\nAnswer() :- Eats(\"cat\", \"pancakes\").\n.output Answer\n\n"]}
{"id": 2253, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Euro\", 0.8).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"Euro\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer\n\n", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Euro\", 0.8).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"Euro\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer\n\n"]}
{"id": 2254, "answer": false, "completion": ".decl Has_dentures(Animal:symbol, Dentures:symbol)\nHas_dentures(\"honey badger\", \"canine teeth\").\nHas_dentures(\"wolverine\", \"canine teeth\").\n.decl Answer()\nAnswer() :- Has_dentures(\"honey badger\", dentures1), Has_dentures(\"wolverine\", dentures2), dentures1 != dentures2.\n.output Answer\n\n", "completions": [".decl Has_dentures(Animal:symbol, Dentures:symbol)\nHas_dentures(\"honey badger\", \"canine teeth\").\nHas_dentures(\"wolverine\", \"canine teeth\").\n.decl Answer()\nAnswer() :- Has_dentures(\"honey badger\", dentures1), Has_dentures(\"wolverine\", dentures2), dentures1 != dentures2.\n.output Answer\n\n"]}
{"id": 2255, "answer": false, "completion": ".decl Is_alive(Organism:symbol)\nIs_alive(\"human\").\nIs_alive(\"dog\").\nIs_alive(\"cat\").\nIs_alive(\"mouse\").\nIs_alive(\"rat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"chicken\").\nIs_alive(\"duck\").\nIs_alive(\"turkey\").\nIs_alive(\"rabbit\").\nIs_alive(\"hamster\").\nIs_alive(\"guinea pig\").\nIs_alive(\"gerbil\").\nIs_alive(\"goldfish\").\nIs_alive(\"frog\").\nIs_alive(\"toad\").\nIs_alive(\"snake\").\nIs_alive(\"lizard\").\nIs_alive(\"turtle\").\nIs_alive(\"tortoise\").\nIs_alive(\"bird\").\nIs_alive(\"parrot\").\nIs_alive(\"pigeon\").\nIs_alive(\"chimpanzee\").\nIs_alive(\"gorilla\").\nIs_alive(\"orangutan\").\nIs_alive(\"monkey\").\nIs_alive(\"baboon\").\nIs_alive(\"lemur\").\nIs_alive(\"llama\").\nIs_alive(\"alpaca\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").", "completions": [".decl Is_alive(Organism:symbol)\nIs_alive(\"human\").\nIs_alive(\"dog\").\nIs_alive(\"cat\").\nIs_alive(\"mouse\").\nIs_alive(\"rat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"chicken\").\nIs_alive(\"duck\").\nIs_alive(\"turkey\").\nIs_alive(\"rabbit\").\nIs_alive(\"hamster\").\nIs_alive(\"guinea pig\").\nIs_alive(\"gerbil\").\nIs_alive(\"goldfish\").\nIs_alive(\"frog\").\nIs_alive(\"toad\").\nIs_alive(\"snake\").\nIs_alive(\"lizard\").\nIs_alive(\"turtle\").\nIs_alive(\"tortoise\").\nIs_alive(\"bird\").\nIs_alive(\"parrot\").\nIs_alive(\"pigeon\").\nIs_alive(\"chimpanzee\").\nIs_alive(\"gorilla\").\nIs_alive(\"orangutan\").\nIs_alive(\"monkey\").\nIs_alive(\"baboon\").\nIs_alive(\"lemur\").\nIs_alive(\"llama\").\nIs_alive(\"alpaca\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\").\nIs_alive(\"sheep\").\nIs_alive(\"goat\").\nIs_alive(\"cow\").\nIs_alive(\"horse\").\nIs_alive(\"pig\")."]}
{"id": 2256, "answer": true, "completion": ".decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"2020 British royal family\", \"Prince Andrew\").\nHas_member(\"2020 British royal family\", \"Prince Charles\").\nHas_member(\"2020 British royal family\", \"Prince Edward\").\nHas_member(\"2020 British royal family\", \"Prince Harry\").\nHas_member(\"2020 British royal family\", \"Prince Philip\").\nHas_member(\"2020 British royal family\", \"Prince William\").\nHas_member(\"2020 British royal family\", \"Queen Elizabeth II\").\nHas_member(\"2020 British royal family\", \"Sophie, Countess of Wessex\").\n.decl Allegedly_committed(Person:symbol, Crime:symbol)\nAllegedly_committed(\"Prince Andrew\", \"felony\").\n.decl Answer()\nAnswer() :- Has_member(\"2020 British royal family\", member), Allegedly_committed(member, \"felony\").\n.output Answer\n\n", "completions": [".decl Has_member(Group:symbol, Member:symbol)\nHas_member(\"2020 British royal family\", \"Prince Andrew\").\nHas_member(\"2020 British royal family\", \"Prince Charles\").\nHas_member(\"2020 British royal family\", \"Prince Edward\").\nHas_member(\"2020 British royal family\", \"Prince Harry\").\nHas_member(\"2020 British royal family\", \"Prince Philip\").\nHas_member(\"2020 British royal family\", \"Prince William\").\nHas_member(\"2020 British royal family\", \"Queen Elizabeth II\").\nHas_member(\"2020 British royal family\", \"Sophie, Countess of Wessex\").\n.decl Allegedly_committed(Person:symbol, Crime:symbol)\nAllegedly_committed(\"Prince Andrew\", \"felony\").\n.decl Answer()\nAnswer() :- Has_member(\"2020 British royal family\", member), Allegedly_committed(member, \"felony\").\n.output Answer\n\n"]}
{"id": 2257, "answer": true, "completion": ".decl Has_day(Day:symbol, God:symbol)\nHas_day(\"Wednesday\", \"Thor\").\n.decl Answer()\nAnswer() :- Has_day(\"Wednesday\", \"Thor\").\n.output Answer\n\n", "completions": [".decl Has_day(Day:symbol, God:symbol)\nHas_day(\"Wednesday\", \"Thor\").\n.decl Answer()\nAnswer() :- Has_day(\"Wednesday\", \"Thor\").\n.output Answer\n\n"]}
{"id": 2258, "answer": false, "completion": ".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"honey\", \"sweet\").\n.decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"queen\", \"sweet\").\n.decl Answer()\nAnswer() :- Has_taste(food1, taste), Has_taste(food2, taste), food1 != food2.\n.output Answer\n\n", "completions": [".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"honey\", \"sweet\").\n.decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"queen\", \"sweet\").\n.decl Answer()\nAnswer() :- Has_taste(food1, taste), Has_taste(food2, taste), food1 != food2.\n.output Answer\n\n"]}
{"id": 2259, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\nHas_height(\"Frankenstein's monster\", 2.13).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"Frankenstein's monster\", height2), height1 > height2.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\nHas_height(\"Frankenstein's monster\", 2.13).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"Frankenstein's monster\", height2), height1 > height2.\n.output Answer\n\n"]}
{"id": 2260, "answer": false, "completion": ".decl Teaches(Teacher:symbol, Subject:symbol)\nTeaches(\"kindergarten teacher\", \"alphabet\").\nTeaches(\"kindergarten teacher\", \"numbers\").\nTeaches(\"kindergarten teacher\", \"colors\").\nTeaches(\"kindergarten teacher\", \"shapes\").\nTeaches(\"kindergarten teacher\", \"animals\").\nTeaches(\"kindergarten teacher\", \"nature\").\nTeaches(\"kindergarten teacher\", \"social studies\").\nTeaches(\"kindergarten teacher\", \"science\").\nTeaches(\"kindergarten teacher\", \"art\").\nTeaches(\"kindergarten teacher\", \"music\").\nTeaches(\"kindergarten teacher\", \"drama\").\nTeaches(\"kindergarten teacher\", \"movement\").\nTeaches(\"kindergarten teacher\", \"cooking\").\nTeaches(\"kindergarten teacher\", \"computers\").\nTeaches(\"kindergarten teacher\", \"foreign language\").\nTeaches(\"kindergarten teacher\", \"physical education\").\nTeaches(\"kindergarten teacher\", \"health\").\nTeaches(\"kindergarten teacher\", \"safety\").\nTeaches(\"kindergarten teacher\", \"library\").\nTeaches(\"kindergarten teacher\", \"writing\").\nTeaches(\"kindergarten teacher\", \"reading\").\nTeaches(\"kindergarten teacher\", \"mathematics\").\nTeaches(\"kindergarten teacher\", \"social skills\").\nTeaches(\"kindergarten teacher\", \"self-help skills\").\nTeaches(\"kindergarten teacher\", \"emotional skills\").\nTeaches(\"kindergarten teacher\", \"behavioral skills\").\nTeaches(\"kindergarten teacher\", \"communication skills\").\nTeaches(\"kindergarten teacher\", \"motor skills\").\nTeaches(\"kindergarten teacher\", \"cognitive skills\").\nTeaches(\"kindergarten teacher\", \"problem-solving skills\").\nTeaches(\"kindergarten teacher\", \"creativity\").\nTeaches(\"kindergarten teacher\", \"critical thinking\").\nTeaches(\"kindergarten teacher\", \"self-esteem\").\nTeaches(\"kindergarten teacher\", \"self-control\").\nTeaches(\"kindergarten teacher\", \"self-direction\").\nTeaches(\"kindergarten teacher\", \"self-awareness\").\nTeaches(\"kindergarten teacher\", \"self-confidence\").\nTeaches(\"kindergarten teacher\", \"self-reliance\").\nTeaches(\"kindergarten teacher\", \"self-respect\").\nTeaches(\"kindergarten teacher\", \"self-discipline\").\nTeaches(\"kindergarten teacher\", \"self-motivation\").\nTeaches(\"kindergarten teacher\", \"self-improvement\").\nTeaches(\"kindergarten teacher\", \"self-expression\").\nTeaches(\"kindergarten teacher\", \"self-actualization\").\nTeaches(\"kindergarten teacher\", \"self-awareness\").\nTeaches(\"kindergarten teacher\", \"self-confidence\").\nTeaches(\"kindergarten teacher\", \"self-reliance\").\nTeaches(\"kindergarten teacher\", \"self-respect\").\nTeaches(\"kindergarten teacher\", \"self-discipline\").\nTeaches(\"kindergarten teacher\", \"self-motivation\").\nTeaches(\"kindergarten teacher\", \"self-improvement\").\nTeaches(\"kindergarten teacher\", \"self-expression\").\nTeaches(\"kindergarten teacher\", \"self-actualization\").\nTeaches(\"kindergarten teacher", "completions": [".decl Teaches(Teacher:symbol, Subject:symbol)\nTeaches(\"kindergarten teacher\", \"alphabet\").\nTeaches(\"kindergarten teacher\", \"numbers\").\nTeaches(\"kindergarten teacher\", \"colors\").\nTeaches(\"kindergarten teacher\", \"shapes\").\nTeaches(\"kindergarten teacher\", \"animals\").\nTeaches(\"kindergarten teacher\", \"nature\").\nTeaches(\"kindergarten teacher\", \"social studies\").\nTeaches(\"kindergarten teacher\", \"science\").\nTeaches(\"kindergarten teacher\", \"art\").\nTeaches(\"kindergarten teacher\", \"music\").\nTeaches(\"kindergarten teacher\", \"drama\").\nTeaches(\"kindergarten teacher\", \"movement\").\nTeaches(\"kindergarten teacher\", \"cooking\").\nTeaches(\"kindergarten teacher\", \"computers\").\nTeaches(\"kindergarten teacher\", \"foreign language\").\nTeaches(\"kindergarten teacher\", \"physical education\").\nTeaches(\"kindergarten teacher\", \"health\").\nTeaches(\"kindergarten teacher\", \"safety\").\nTeaches(\"kindergarten teacher\", \"library\").\nTeaches(\"kindergarten teacher\", \"writing\").\nTeaches(\"kindergarten teacher\", \"reading\").\nTeaches(\"kindergarten teacher\", \"mathematics\").\nTeaches(\"kindergarten teacher\", \"social skills\").\nTeaches(\"kindergarten teacher\", \"self-help skills\").\nTeaches(\"kindergarten teacher\", \"emotional skills\").\nTeaches(\"kindergarten teacher\", \"behavioral skills\").\nTeaches(\"kindergarten teacher\", \"communication skills\").\nTeaches(\"kindergarten teacher\", \"motor skills\").\nTeaches(\"kindergarten teacher\", \"cognitive skills\").\nTeaches(\"kindergarten teacher\", \"problem-solving skills\").\nTeaches(\"kindergarten teacher\", \"creativity\").\nTeaches(\"kindergarten teacher\", \"critical thinking\").\nTeaches(\"kindergarten teacher\", \"self-esteem\").\nTeaches(\"kindergarten teacher\", \"self-control\").\nTeaches(\"kindergarten teacher\", \"self-direction\").\nTeaches(\"kindergarten teacher\", \"self-awareness\").\nTeaches(\"kindergarten teacher\", \"self-confidence\").\nTeaches(\"kindergarten teacher\", \"self-reliance\").\nTeaches(\"kindergarten teacher\", \"self-respect\").\nTeaches(\"kindergarten teacher\", \"self-discipline\").\nTeaches(\"kindergarten teacher\", \"self-motivation\").\nTeaches(\"kindergarten teacher\", \"self-improvement\").\nTeaches(\"kindergarten teacher\", \"self-expression\").\nTeaches(\"kindergarten teacher\", \"self-actualization\").\nTeaches(\"kindergarten teacher\", \"self-awareness\").\nTeaches(\"kindergarten teacher\", \"self-confidence\").\nTeaches(\"kindergarten teacher\", \"self-reliance\").\nTeaches(\"kindergarten teacher\", \"self-respect\").\nTeaches(\"kindergarten teacher\", \"self-discipline\").\nTeaches(\"kindergarten teacher\", \"self-motivation\").\nTeaches(\"kindergarten teacher\", \"self-improvement\").\nTeaches(\"kindergarten teacher\", \"self-expression\").\nTeaches(\"kindergarten teacher\", \"self-actualization\").\nTeaches(\"kindergarten teacher"]}
{"id": 2261, "answer": true, "completion": ".decl Writes(Person:symbol, Book:symbol)\nWrites(\"Alfred Nobel\", \"The Merchant of Venice\").\n.decl Banned(Book:symbol)\nBanned(\"The Merchant of Venice\").\n.decl Answer()\nAnswer() :- Writes(\"Alfred Nobel\", book), Banned(book).\n.output Answer\n\n", "completions": [".decl Writes(Person:symbol, Book:symbol)\nWrites(\"Alfred Nobel\", \"The Merchant of Venice\").\n.decl Banned(Book:symbol)\nBanned(\"The Merchant of Venice\").\n.decl Answer()\nAnswer() :- Writes(\"Alfred Nobel\", book), Banned(book).\n.output Answer\n\n"]}
{"id": 2262, "answer": true, "completion": ".decl Has_kinetic_energy(Object:symbol, Kinetic_energy:float)\nHas_kinetic_energy(\"ukemi\", 0).\n.decl Answer()\nAnswer() :- Has_kinetic_energy(\"ukemi\", kinetic_energy), kinetic_energy = 0.\n.output Answer\n\n", "completions": [".decl Has_kinetic_energy(Object:symbol, Kinetic_energy:float)\nHas_kinetic_energy(\"ukemi\", 0).\n.decl Answer()\nAnswer() :- Has_kinetic_energy(\"ukemi\", kinetic_energy), kinetic_energy = 0.\n.output Answer\n\n"]}
{"id": 2263, "answer": true, "completion": ".decl Has_effect(Food:symbol, Effect:symbol)\nHas_effect(\"special brownies\", \"hallucination\").\n.decl Answer()\nAnswer() :- Has_effect(\"special brownies\", \"hallucination\").\n.output Answer\n\n", "completions": [".decl Has_effect(Food:symbol, Effect:symbol)\nHas_effect(\"special brownies\", \"hallucination\").\n.decl Answer()\nAnswer() :- Has_effect(\"special brownies\", \"hallucination\").\n.output Answer\n\n"]}
{"id": 2264, "answer": false, "completion": ".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Futurama\", 140).\nHas_n_episodes(\"The Simpsons\", 636).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Futurama\", n_episodes1), Has_n_episodes(\"The Simpsons\", n_episodes2), n_episodes1 > n_episodes2.\n.output Answer\n\n", "completions": [".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Futurama\", 140).\nHas_n_episodes(\"The Simpsons\", 636).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Futurama\", n_episodes1), Has_n_episodes(\"The Simpsons\", n_episodes2), n_episodes1 > n_episodes2.\n.output Answer\n\n"]}
{"id": 2265, "answer": true, "completion": ".decl Lives_in_temperature(Animal:symbol, Temperature:float)\nLives_in_temperature(\"anchovy\", 10).\nLives_in_temperature(\"anchovy\", 20).\n.decl Answer()\nAnswer() :- Lives_in_temperature(\"anchovy\", temperature1), Lives_in_temperature(\"anchovy\", temperature2), temperature1 < temperature2.\n.output Answer\n\n\n", "completions": [".decl Lives_in_temperature(Animal:symbol, Temperature:float)\nLives_in_temperature(\"anchovy\", 10).\nLives_in_temperature(\"anchovy\", 20).\n.decl Answer()\nAnswer() :- Lives_in_temperature(\"anchovy\", temperature1), Lives_in_temperature(\"anchovy\", temperature2), temperature1 < temperature2.\n.output Answer\n\n\n"]}
{"id": 2266, "answer": true, "completion": ".decl Is_good_at(Person:symbol, Activity:symbol)\nIs_good_at(\"John\", \"guitar hero\").\nIs_good_at(\"John\", \"guitar\").\n.decl Answer()\nAnswer() :- Is_good_at(person, \"guitar hero\"), Is_good_at(person, \"guitar\").\n.output Answer\n\n", "completions": [".decl Is_good_at(Person:symbol, Activity:symbol)\nIs_good_at(\"John\", \"guitar hero\").\nIs_good_at(\"John\", \"guitar\").\n.decl Answer()\nAnswer() :- Is_good_at(person, \"guitar hero\"), Is_good_at(person, \"guitar\").\n.output Answer\n\n"]}
{"id": 2267, "answer": false, "completion": ".decl Has_kills(Person:symbol, N_kills:float)\nHas_kills(\"Charles Manson\", 35).\nHas_kills(\"Tex Watson\", 35).\nHas_kills(\"Susan Atkins\", 35).\nHas_kills(\"Patricia Krenwinkel\", 35).\nHas_kills(\"Leslie Van Houten\", 35).\n.decl Named_for(Person:symbol, Person2:symbol)\nNamed_for(\"Tex Watson\", \"Charles Manson\").\nNamed_for(\"Susan Atkins\", \"Charles Manson\").\nNamed_for(\"Patricia Krenwinkel\", \"Charles Manson\").\nNamed_for(\"Leslie Van Houten\", \"Charles Manson\").\n.decl Answer()\nAnswer() :- Named_for(person, \"Charles Manson\"), Has_kills(person, n_kills1), Has_kills(\"Charles Manson\", n_kills2), n_kills1 > n_kills2.\n.output Answer\n\n\n", "completions": [".decl Has_kills(Person:symbol, N_kills:float)\nHas_kills(\"Charles Manson\", 35).\nHas_kills(\"Tex Watson\", 35).\nHas_kills(\"Susan Atkins\", 35).\nHas_kills(\"Patricia Krenwinkel\", 35).\nHas_kills(\"Leslie Van Houten\", 35).\n.decl Named_for(Person:symbol, Person2:symbol)\nNamed_for(\"Tex Watson\", \"Charles Manson\").\nNamed_for(\"Susan Atkins\", \"Charles Manson\").\nNamed_for(\"Patricia Krenwinkel\", \"Charles Manson\").\nNamed_for(\"Leslie Van Houten\", \"Charles Manson\").\n.decl Answer()\nAnswer() :- Named_for(person, \"Charles Manson\"), Has_kills(person, n_kills1), Has_kills(\"Charles Manson\", n_kills2), n_kills1 > n_kills2.\n.output Answer\n\n\n"]}
{"id": 2268, "answer": true, "completion": ".decl Has_power(Branch:symbol, Power:symbol)\nHas_power(\"executive\", \"veto\").\nHas_power(\"executive\", \"military\").\n.decl Answer()\nAnswer() :- Has_power(branch1, \"veto\"), Has_power(branch1, \"military\").\n.output Answer\n\n", "completions": [".decl Has_power(Branch:symbol, Power:symbol)\nHas_power(\"executive\", \"veto\").\nHas_power(\"executive\", \"military\").\n.decl Answer()\nAnswer() :- Has_power(branch1, \"veto\"), Has_power(branch1, \"military\").\n.output Answer\n\n"]}
{"id": 2269, "answer": true, "completion": ".decl Believes_in(Person:symbol, Afterlife:symbol)\nBelieves_in(\"Christians\", \"Sheol\").\n.decl Answer()\nAnswer() :- Believes_in(\"Christians\", \"Sheol\").\n.output Answer\n\n", "completions": [".decl Believes_in(Person:symbol, Afterlife:symbol)\nBelieves_in(\"Christians\", \"Sheol\").\n.decl Answer()\nAnswer() :- Believes_in(\"Christians\", \"Sheol\").\n.output Answer\n\n"]}
{"id": 2270, "answer": true, "completion": ".decl Has_form_of_government(Country:symbol, Form_of_government:symbol)\nHas_form_of_government(\"Egypt\", \"theocratic government\").\n.decl Built(Country:symbol, Structure:symbol)\nBuilt(\"Egypt\", \"Great Pyramids\").\n.decl Answer()\nAnswer() :- Has_form_of_government(country, \"theocratic government\"), Built(country, \"Great Pyramids\").\n.output Answer\n\n", "completions": [".decl Has_form_of_government(Country:symbol, Form_of_government:symbol)\nHas_form_of_government(\"Egypt\", \"theocratic government\").\n.decl Built(Country:symbol, Structure:symbol)\nBuilt(\"Egypt\", \"Great Pyramids\").\n.decl Answer()\nAnswer() :- Has_form_of_government(country, \"theocratic government\"), Built(country, \"Great Pyramids\").\n.output Answer\n\n"]}
{"id": 2271, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Justin Timberlake\", 1.85).\n.decl Has_min_height(Ride:symbol, Min_height:float)\nHas_min_height(\"Shipwreck Falls\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Justin Timberlake\", height), Has_min_height(\"Shipwreck Falls\", min_height), height >= min_height.\n.output Answer\n\n", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Justin Timberlake\", 1.85).\n.decl Has_min_height(Ride:symbol, Min_height:float)\nHas_min_height(\"Shipwreck Falls\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Justin Timberlake\", height), Has_min_height(\"Shipwreck Falls\", min_height), height >= min_height.\n.output Answer\n\n"]}
{"id": 2272, "answer": false, "completion": ".decl Has_length(Thing:symbol, Length:float)\nHas_length(\"Lincoln Tunnel\", 1.5).\n.decl Has_length(Thing:symbol, Length:float)\nHas_length(\"Oasis cruise boat\", 360).\n.decl Answer()\nAnswer() :- Has_length(\"Lincoln Tunnel\", length1), Has_length(\"Oasis cruise boat\", length2), length2 > length1.\n.output Answer\n\n", "completions": [".decl Has_length(Thing:symbol, Length:float)\nHas_length(\"Lincoln Tunnel\", 1.5).\n.decl Has_length(Thing:symbol, Length:float)\nHas_length(\"Oasis cruise boat\", 360).\n.decl Answer()\nAnswer() :- Has_length(\"Lincoln Tunnel\", length1), Has_length(\"Oasis cruise boat\", length2), length2 > length1.\n.output Answer\n\n"]}
{"id": 2273, "answer": true, "completion": ".decl Advocates(Person:symbol, Lifestyle:symbol)\nAdvocates(\"Snoop Dogg\", \"straight edge\").\n.decl Answer()\nAnswer() :- Advocates(\"Snoop Dogg\", \"straight edge\").\n.output Answer\n\n", "completions": [".decl Advocates(Person:symbol, Lifestyle:symbol)\nAdvocates(\"Snoop Dogg\", \"straight edge\").\n.decl Answer()\nAnswer() :- Advocates(\"Snoop Dogg\", \"straight edge\").\n.output Answer\n\n"]}
{"id": 2274, "answer": true, "completion": ".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"amoeba\", \"cancer\").\n.decl Answer()\nAnswer() :- Has_disease(\"amoeba\", \"cancer\").\n.output Answer\n\n", "completions": [".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"amoeba\", \"cancer\").\n.decl Answer()\nAnswer() :- Has_disease(\"amoeba\", \"cancer\").\n.output Answer\n\n"]}
{"id": 2275, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Battle of Baghdad\", \"2003\").\nHappens_in_time(\"Justin Bieber's Believe album\", \"2012\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Battle of Baghdad\", time1), Happens_in_time(\"Justin Bieber's Believe album\", time2), time1 < time2.\n.output Answer\n\n", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Battle of Baghdad\", \"2003\").\nHappens_in_time(\"Justin Bieber's Believe album\", \"2012\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Battle of Baghdad\", time1), Happens_in_time(\"Justin Bieber's Believe album\", time2), time1 < time2.\n.output Answer\n\n"]}
{"id": 2276, "answer": false, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"vegan\", \"vegetables\").\nEats(\"vegan\", \"fruits\").\nEats(\"vegan\", \"nuts\").\nEats(\"vegan\", \"grains\").\nEats(\"vegan\", \"legumes\").\nEats(\"vegan\", \"seeds\").\nEats(\"vegan\", \"tofu\").\nEats(\"vegan\", \"tempeh\").\nEats(\"vegan\", \"soy milk\").\nEats(\"vegan\", \"almond milk\").\nEats(\"vegan\", \"rice milk\").\nEats(\"vegan\", \"oat milk\").\nEats(\"vegan\", \"coconut milk\").\nEats(\"vegan\", \"cashew milk\").\nEats(\"vegan\", \"hemp milk\").\nEats(\"vegan\", \"quinoa milk\").\nEats(\"vegan\", \"flax milk\").\nEats(\"vegan\", \"pea milk\").\nEats(\"vegan\", \"potato milk\").\nEats(\"vegan\", \"chia milk\").\nEats(\"vegan\", \"peanut milk\").\nEats(\"vegan\", \"almond butter\").\nEats(\"vegan\", \"peanut butter\").\nEats(\"vegan\", \"cashew butter\").\nEats(\"vegan\", \"sunflower seed butter\").\nEats(\"vegan\", \"tahini\").\nEats(\"vegan\", \"hummus\").\nEats(\"vegan\", \"guacamole\").\nEats(\"vegan\", \"vegan cheese\").\nEats(\"vegan\", \"vegan yogurt\").\nEats(\"vegan\", \"vegan ice cream\").\nEats(\"vegan\", \"vegan chocolate\").\nEats(\"vegan\", \"vegan cookies\").\nEats(\"vegan\", \"vegan cake\").\nEats(\"vegan\", \"vegan candy\").\nEats(\"vegan\", \"vegan marshmallows\").\nEats(\"vegan\", \"vegan chips\").\nEats(\"vegan\", \"vegan crackers\").\nEats(\"vegan\", \"vegan bread\").\nEats(\"vegan\", \"vegan pasta\").\nEats(\"vegan\", \"vegan pizza\").\nEats(\"vegan\", \"vegan burgers\").\nEats(\"vegan\", \"vegan hot dogs\").\nEats(\"vegan\", \"vegan sausage\").\nEats(\"vegan\", \"vegan bacon\").\nEats(\"vegan\", \"vegan ham\").\nEats(\"vegan\", \"vegan meatballs\").\nEats(\"vegan\", \"vegan chicken\").\nEats(\"vegan\", \"vegan turkey\").\nEats(\"vegan\", \"vegan fish\").\nEats(\"vegan\", \"vegan shrimp\").\nEats(\"vegan\", \"vegan crab\").\nEats(\"vegan\", \"vegan lobster\").\nEats(\"vegan\", \"vegan scallops\").\nEats(\"vegan\", \"vegan calamari\").\nEats(\"vegan\", \"vegan clams\").\nEats(\"vegan\", \"vegan oysters\").\nEats(\"vegan\", \"vegan mussels\").\nEats(\"vegan\", \"vegan crab cakes\").\nEats(\"vegan\", \"vegan lobster cakes\").\nEats(\"vegan\", \"vegan scallop cakes\").\nEats(\"vegan\", \"vegan calamari cakes\").\nEats(\"vegan\", \"vegan clam cakes\").\nEats(\"vegan\", \"vegan oyster cakes\").", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"vegan\", \"vegetables\").\nEats(\"vegan\", \"fruits\").\nEats(\"vegan\", \"nuts\").\nEats(\"vegan\", \"grains\").\nEats(\"vegan\", \"legumes\").\nEats(\"vegan\", \"seeds\").\nEats(\"vegan\", \"tofu\").\nEats(\"vegan\", \"tempeh\").\nEats(\"vegan\", \"soy milk\").\nEats(\"vegan\", \"almond milk\").\nEats(\"vegan\", \"rice milk\").\nEats(\"vegan\", \"oat milk\").\nEats(\"vegan\", \"coconut milk\").\nEats(\"vegan\", \"cashew milk\").\nEats(\"vegan\", \"hemp milk\").\nEats(\"vegan\", \"quinoa milk\").\nEats(\"vegan\", \"flax milk\").\nEats(\"vegan\", \"pea milk\").\nEats(\"vegan\", \"potato milk\").\nEats(\"vegan\", \"chia milk\").\nEats(\"vegan\", \"peanut milk\").\nEats(\"vegan\", \"almond butter\").\nEats(\"vegan\", \"peanut butter\").\nEats(\"vegan\", \"cashew butter\").\nEats(\"vegan\", \"sunflower seed butter\").\nEats(\"vegan\", \"tahini\").\nEats(\"vegan\", \"hummus\").\nEats(\"vegan\", \"guacamole\").\nEats(\"vegan\", \"vegan cheese\").\nEats(\"vegan\", \"vegan yogurt\").\nEats(\"vegan\", \"vegan ice cream\").\nEats(\"vegan\", \"vegan chocolate\").\nEats(\"vegan\", \"vegan cookies\").\nEats(\"vegan\", \"vegan cake\").\nEats(\"vegan\", \"vegan candy\").\nEats(\"vegan\", \"vegan marshmallows\").\nEats(\"vegan\", \"vegan chips\").\nEats(\"vegan\", \"vegan crackers\").\nEats(\"vegan\", \"vegan bread\").\nEats(\"vegan\", \"vegan pasta\").\nEats(\"vegan\", \"vegan pizza\").\nEats(\"vegan\", \"vegan burgers\").\nEats(\"vegan\", \"vegan hot dogs\").\nEats(\"vegan\", \"vegan sausage\").\nEats(\"vegan\", \"vegan bacon\").\nEats(\"vegan\", \"vegan ham\").\nEats(\"vegan\", \"vegan meatballs\").\nEats(\"vegan\", \"vegan chicken\").\nEats(\"vegan\", \"vegan turkey\").\nEats(\"vegan\", \"vegan fish\").\nEats(\"vegan\", \"vegan shrimp\").\nEats(\"vegan\", \"vegan crab\").\nEats(\"vegan\", \"vegan lobster\").\nEats(\"vegan\", \"vegan scallops\").\nEats(\"vegan\", \"vegan calamari\").\nEats(\"vegan\", \"vegan clams\").\nEats(\"vegan\", \"vegan oysters\").\nEats(\"vegan\", \"vegan mussels\").\nEats(\"vegan\", \"vegan crab cakes\").\nEats(\"vegan\", \"vegan lobster cakes\").\nEats(\"vegan\", \"vegan scallop cakes\").\nEats(\"vegan\", \"vegan calamari cakes\").\nEats(\"vegan\", \"vegan clam cakes\").\nEats(\"vegan\", \"vegan oyster cakes\")."]}
{"id": 2277, "answer": true, "completion": ".decl Accused_of_stealing(Person1:symbol, Person2:symbol)\nAccused_of_stealing(\"Richard Wagner\", \"Mozart\").\n.decl Answer()\nAnswer() :- Accused_of_stealing(\"Richard Wagner\", \"Mozart\").\n.output Answer\n\n", "completions": [".decl Accused_of_stealing(Person1:symbol, Person2:symbol)\nAccused_of_stealing(\"Richard Wagner\", \"Mozart\").\n.decl Answer()\nAnswer() :- Accused_of_stealing(\"Richard Wagner\", \"Mozart\").\n.output Answer\n\n"]}
{"id": 2278, "answer": false, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"New Year's Eve\", \"December 31\").\n.decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Halloween\", \"October 31\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"New Year's Eve\", \"December 31\").\nAnswer() :- Happens_on_day(\"Halloween\", \"October 31\").\n.output Answer\n\n", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"New Year's Eve\", \"December 31\").\n.decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Halloween\", \"October 31\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"New Year's Eve\", \"December 31\").\nAnswer() :- Happens_on_day(\"Halloween\", \"October 31\").\n.output Answer\n\n"]}
{"id": 2279, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"yellow perch\", \"North America\").\nLives_in(\"yellow perch\", \"Europe\").\nLives_in(\"yellow perch\", \"Asia\").\nLives_in(\"yellow perch\", \"Africa\").\nLives_in(\"yellow perch\", \"South America\").\nLives_in(\"yellow perch\", \"Antarctica\").\nLives_in(\"yellow perch\", \"Australia\").\nLives_in(\"yellow perch\", \"Pacific Ocean\").\nLives_in(\"yellow perch\", \"Atlantic Ocean\").\nLives_in(\"yellow perch\", \"Indian Ocean\").\nLives_in(\"yellow perch\", \"Arctic Ocean\").\nLives_in(\"yellow perch\", \"Southern Ocean\").\nLives_in(\"yellow perch\", \"Mediterranean Sea\").\nLives_in(\"yellow perch\", \"Baltic Sea\").\nLives_in(\"yellow perch\", \"Black Sea\").\nLives_in(\"yellow perch\", \"Red Sea\").\nLives_in(\"yellow perch\", \"Persian Gulf\").\nLives_in(\"yellow perch\", \"Gulf of Mexico\").\nLives_in(\"yellow perch\", \"Caribbean Sea\").\nLives_in(\"yellow perch\", \"Caspian Sea\").\nLives_in(\"yellow perch\", \"Great Lakes\").\nLives_in(\"yellow perch\", \"Lake Superior\").\nLives_in(\"yellow perch\", \"Lake Huron\").\nLives_in(\"yellow perch\", \"Lake Michigan\").\nLives_in(\"yellow perch\", \"Lake Erie\").\nLives_in(\"yellow perch\", \"Lake Ontario\").\nLives_in(\"yellow perch\", \"Lake Winnipeg\").\nLives_in(\"yellow perch\", \"Lake Winnipegosis\").\nLives_in(\"yellow perch\", \"Lake Manitoba\").\nLives_in(\"yellow perch\", \"Lake Athabasca\").\nLives_in(\"yellow perch\", \"Lake Nipigon\").\nLives_in(\"yellow perch\", \"Lake of the Woods\").\nLives_in(\"yellow perch\", \"Lake Timiskaming\").\nLives_in(\"yellow perch\", \"Lake St. Clair\").\nLives_in(\"yellow perch\", \"Lake Champlain\").\nLives_in(\"yellow perch\", \"Lake George\").\nLives_in(\"yellow perch\", \"Lake Oneida\").\nLives_in(\"yellow perch\", \"Lake Erie\").\nLives_in(\"yellow perch\", \"Lake Ontario\").\nLives_in(\"yellow perch\", \"Lake Winnipeg\").\nLives_in(\"yellow perch\", \"Lake Winnipegosis\").\nLives_in(\"yellow perch\", \"Lake Manitoba\").\nLives_in(\"yellow perch\", \"Lake Athabasca\").\nLives_in(\"yellow perch\", \"Lake Nipigon\").\nLives_in(\"yellow perch\", \"Lake of the Woods\").\nLives_in(\"yellow perch\", \"Lake Timiskaming\").\nLives_in(\"yellow perch\", \"Lake St. Clair\").\nLives_in(\"yellow perch\", \"Lake Champlain\").\nLives_in(\"yellow perch\", \"Lake George\").\nLives_in(\"yellow perch\", \"Lake Oneida\").\nLives_in(\"yellow perch\", \"Lake Erie\").\nLives_in(\"yellow perch\", \"Lake Ontario\").\nLives_in(\"yellow perch\", \"Lake Winnipeg\").\nLives_in(\"", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"yellow perch\", \"North America\").\nLives_in(\"yellow perch\", \"Europe\").\nLives_in(\"yellow perch\", \"Asia\").\nLives_in(\"yellow perch\", \"Africa\").\nLives_in(\"yellow perch\", \"South America\").\nLives_in(\"yellow perch\", \"Antarctica\").\nLives_in(\"yellow perch\", \"Australia\").\nLives_in(\"yellow perch\", \"Pacific Ocean\").\nLives_in(\"yellow perch\", \"Atlantic Ocean\").\nLives_in(\"yellow perch\", \"Indian Ocean\").\nLives_in(\"yellow perch\", \"Arctic Ocean\").\nLives_in(\"yellow perch\", \"Southern Ocean\").\nLives_in(\"yellow perch\", \"Mediterranean Sea\").\nLives_in(\"yellow perch\", \"Baltic Sea\").\nLives_in(\"yellow perch\", \"Black Sea\").\nLives_in(\"yellow perch\", \"Red Sea\").\nLives_in(\"yellow perch\", \"Persian Gulf\").\nLives_in(\"yellow perch\", \"Gulf of Mexico\").\nLives_in(\"yellow perch\", \"Caribbean Sea\").\nLives_in(\"yellow perch\", \"Caspian Sea\").\nLives_in(\"yellow perch\", \"Great Lakes\").\nLives_in(\"yellow perch\", \"Lake Superior\").\nLives_in(\"yellow perch\", \"Lake Huron\").\nLives_in(\"yellow perch\", \"Lake Michigan\").\nLives_in(\"yellow perch\", \"Lake Erie\").\nLives_in(\"yellow perch\", \"Lake Ontario\").\nLives_in(\"yellow perch\", \"Lake Winnipeg\").\nLives_in(\"yellow perch\", \"Lake Winnipegosis\").\nLives_in(\"yellow perch\", \"Lake Manitoba\").\nLives_in(\"yellow perch\", \"Lake Athabasca\").\nLives_in(\"yellow perch\", \"Lake Nipigon\").\nLives_in(\"yellow perch\", \"Lake of the Woods\").\nLives_in(\"yellow perch\", \"Lake Timiskaming\").\nLives_in(\"yellow perch\", \"Lake St. Clair\").\nLives_in(\"yellow perch\", \"Lake Champlain\").\nLives_in(\"yellow perch\", \"Lake George\").\nLives_in(\"yellow perch\", \"Lake Oneida\").\nLives_in(\"yellow perch\", \"Lake Erie\").\nLives_in(\"yellow perch\", \"Lake Ontario\").\nLives_in(\"yellow perch\", \"Lake Winnipeg\").\nLives_in(\"yellow perch\", \"Lake Winnipegosis\").\nLives_in(\"yellow perch\", \"Lake Manitoba\").\nLives_in(\"yellow perch\", \"Lake Athabasca\").\nLives_in(\"yellow perch\", \"Lake Nipigon\").\nLives_in(\"yellow perch\", \"Lake of the Woods\").\nLives_in(\"yellow perch\", \"Lake Timiskaming\").\nLives_in(\"yellow perch\", \"Lake St. Clair\").\nLives_in(\"yellow perch\", \"Lake Champlain\").\nLives_in(\"yellow perch\", \"Lake George\").\nLives_in(\"yellow perch\", \"Lake Oneida\").\nLives_in(\"yellow perch\", \"Lake Erie\").\nLives_in(\"yellow perch\", \"Lake Ontario\").\nLives_in(\"yellow perch\", \"Lake Winnipeg\").\nLives_in(\""]}
{"id": 2280, "answer": true, "completion": ".decl Elects(Group:symbol, Person:symbol)\nElects(\"land owners\", \"rulers\").\n.decl Exists_in_time(Event:symbol, Time:symbol)\nExists_in_time(\"Kingdom of Hungary\", \"1000-1526\").\n.decl Answer()\nAnswer() :- Elects(\"land owners\", \"rulers\"), Exists_in_time(\"Kingdom of Hungary\", \"1000-1526\").\n.output Answer\n\n", "completions": [".decl Elects(Group:symbol, Person:symbol)\nElects(\"land owners\", \"rulers\").\n.decl Exists_in_time(Event:symbol, Time:symbol)\nExists_in_time(\"Kingdom of Hungary\", \"1000-1526\").\n.decl Answer()\nAnswer() :- Elects(\"land owners\", \"rulers\"), Exists_in_time(\"Kingdom of Hungary\", \"1000-1526\").\n.output Answer\n\n"]}
{"id": 2281, "answer": false, "completion": ".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Topa Inca Yupanqui\", \"1440-1493\").\n.decl Lives_in_time(Animal:symbol, Time:symbol)\nLives_in_time(\"western honey bee\", \"0-present\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Topa Inca Yupanqui\", time1), Lives_in_time(\"western honey bee\", time2), time1 = time2.\n.output Answer\n\n", "completions": [".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Topa Inca Yupanqui\", \"1440-1493\").\n.decl Lives_in_time(Animal:symbol, Time:symbol)\nLives_in_time(\"western honey bee\", \"0-present\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Topa Inca Yupanqui\", time1), Lives_in_time(\"western honey bee\", time2), time1 = time2.\n.output Answer\n\n"]}
{"id": 2282, "answer": false, "completion": ".decl Inspired_by(Work:symbol, Work2:symbol)\nInspired_by(\"Macbeth\", \"Hamlet\").\nInspired_by(\"Alice's Adventures in Wonderland\", \"Through the Looking-Glass\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Macbeth\", work1), Inspired_by(\"Alice's Adventures in Wonderland\", work2), Inspired_by(work1, work2).\n.output Answer\n\n", "completions": [".decl Inspired_by(Work:symbol, Work2:symbol)\nInspired_by(\"Macbeth\", \"Hamlet\").\nInspired_by(\"Alice's Adventures in Wonderland\", \"Through the Looking-Glass\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Macbeth\", work1), Inspired_by(\"Alice's Adventures in Wonderland\", work2), Inspired_by(work1, work2).\n.output Answer\n\n"]}
{"id": 2283, "answer": true, "completion": ".decl Has_prevalence(Mythical_creature:symbol, Prevalence:float)\nHas_prevalence(\"fairy\", 0.5).\nHas_prevalence(\"valkyrie\", 0.1).\n.decl Answer()\nAnswer() :- Has_prevalence(\"fairy\", prevalence1), Has_prevalence(\"valkyrie\", prevalence2), prevalence1 > prevalence2.\n.output Answer\n\n\n", "completions": [".decl Has_prevalence(Mythical_creature:symbol, Prevalence:float)\nHas_prevalence(\"fairy\", 0.5).\nHas_prevalence(\"valkyrie\", 0.1).\n.decl Answer()\nAnswer() :- Has_prevalence(\"fairy\", prevalence1), Has_prevalence(\"valkyrie\", prevalence2), prevalence1 > prevalence2.\n.output Answer\n\n\n"]}
{"id": 2284, "answer": true, "completion": ".decl Is_a(Animal_A:symbol, Animal_B:symbol)\nIs_a(\"Chinchilla\", \"rodent\").\nIs_a(\"Chinchilla\", \"felis catus\").\n.decl Answer()\nAnswer() :- Is_a(\"Chinchilla\", \"rodent\").\n.output Answer\n\n", "completions": [".decl Is_a(Animal_A:symbol, Animal_B:symbol)\nIs_a(\"Chinchilla\", \"rodent\").\nIs_a(\"Chinchilla\", \"felis catus\").\n.decl Answer()\nAnswer() :- Is_a(\"Chinchilla\", \"rodent\").\n.output Answer\n\n"]}
{"id": 2285, "answer": true, "completion": ".decl Visits(Person_A:symbol, Person_B:symbol)\nVisits(\"Elizabeth II\", \"Queen Victoria\").\n.decl Answer()\nAnswer() :- Visits(\"Elizabeth II\", \"Queen Victoria\").\n.output Answer\n\n", "completions": [".decl Visits(Person_A:symbol, Person_B:symbol)\nVisits(\"Elizabeth II\", \"Queen Victoria\").\n.decl Answer()\nAnswer() :- Visits(\"Elizabeth II\", \"Queen Victoria\").\n.output Answer\n\n"]}
{"id": 2286, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Boy Who Cried Wolf\", \"Boy Who Cried Wolf\").\n.decl Has_god(Person:symbol, God:symbol)\nHas_god(\"Boy Who Cried Wolf\", \"Pan\").\n.decl Answer()\nAnswer() :- Has_name(\"Boy Who Cried Wolf\", \"Boy Who Cried Wolf\"), Has_god(\"Boy Who Cried Wolf\", \"Pan\").\n.output Answer\n\n", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Boy Who Cried Wolf\", \"Boy Who Cried Wolf\").\n.decl Has_god(Person:symbol, God:symbol)\nHas_god(\"Boy Who Cried Wolf\", \"Pan\").\n.decl Answer()\nAnswer() :- Has_name(\"Boy Who Cried Wolf\", \"Boy Who Cried Wolf\"), Has_god(\"Boy Who Cried Wolf\", \"Pan\").\n.output Answer\n\n"]}
{"id": 2287, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Great Wall of China\", 8851).\nHas_length(\"Dodgers\", 0.5).\nHas_length(\"White Sox\", 0.5).\n.decl Answer()\nAnswer() :- Has_length(\"Great Wall of China\", length1), Has_length(\"Dodgers\", length2), Has_length(\"White Sox\", length3), length1 >= length2 + length3.\n.output Answer\n\n", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Great Wall of China\", 8851).\nHas_length(\"Dodgers\", 0.5).\nHas_length(\"White Sox\", 0.5).\n.decl Answer()\nAnswer() :- Has_length(\"Great Wall of China\", length1), Has_length(\"Dodgers\", length2), Has_length(\"White Sox\", length3), length1 >= length2 + length3.\n.output Answer\n\n"]}
{"id": 2288, "answer": true, "completion": ".decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"funeral\", \"church\").\nHappens_at(\"funeral\", \"cemetery\").\nHappens_at(\"funeral\", \"funeral home\").\nHappens_at(\"Happy hardcore music\", \"rave\").\n.decl Answer()\nAnswer() :- Happens_at(\"Happy hardcore music\", place1), Happens_at(\"funeral\", place2), place1 != place2.\n.output Answer\n\n", "completions": [".decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"funeral\", \"church\").\nHappens_at(\"funeral\", \"cemetery\").\nHappens_at(\"funeral\", \"funeral home\").\nHappens_at(\"Happy hardcore music\", \"rave\").\n.decl Answer()\nAnswer() :- Happens_at(\"Happy hardcore music\", place1), Happens_at(\"funeral\", place2), place1 != place2.\n.output Answer\n\n"]}
{"id": 2289, "answer": true, "completion": ".decl Has_market_cap(Company:symbol, Market_cap:float)\nHas_market_cap(\"Sainsbury's\", 6.5).\nHas_market_cap(\"Tesco\", 23.5).\n.decl Answer()\nAnswer() :- Has_market_cap(\"Sainsbury's\", market_cap1), Has_market_cap(\"Tesco\", market_cap2), market_cap1 < market_cap2.\n.output Answer\n\n", "completions": [".decl Has_market_cap(Company:symbol, Market_cap:float)\nHas_market_cap(\"Sainsbury's\", 6.5).\nHas_market_cap(\"Tesco\", 23.5).\n.decl Answer()\nAnswer() :- Has_market_cap(\"Sainsbury's\", market_cap1), Has_market_cap(\"Tesco\", market_cap2), market_cap1 < market_cap2.\n.output Answer\n\n"]}
