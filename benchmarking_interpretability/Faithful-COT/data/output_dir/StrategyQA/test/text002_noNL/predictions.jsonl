{"id": 0, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"college commencements\", \"December\").\nHappens_in_time(\"college commencements\", \"May\").\nHappens_in_time(\"college commencements\", \"June\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), Happens_in_time(\"college commencements\", month), In_season(month, season).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"college commencements\", \"December\").\nHappens_in_time(\"college commencements\", \"May\").\nHappens_in_time(\"college commencements\", \"June\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), Happens_in_time(\"college commencements\", month), In_season(month, season).\n.output Answer"]}
{"id": 1, "answer": true, "completion": ".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"hydrogen\", 1).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"hydrogen\", atomic_number), Has_n_members(\"Spice Girls\", n_members), atomic_number^2 > n_members.\n.output Answer", "completions": [".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"hydrogen\", 1).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"hydrogen\", atomic_number), Has_n_members(\"Spice Girls\", n_members), atomic_number^2 > n_members.\n.output Answer"]}
{"id": 2, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"pear\", 0.6).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"pear\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer\n\n\n", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"pear\", 0.6).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"pear\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer\n\n\n"]}
{"id": 3, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"snake\", \"hamster\").\nEats(\"bird\", \"hamster\").\n.decl Answer()\nAnswer() :- Eats(animal, \"hamster\").\n.output Answer\n\n\n", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"snake\", \"hamster\").\nEats(\"bird\", \"hamster\").\n.decl Answer()\nAnswer() :- Eats(animal, \"hamster\").\n.output Answer\n\n\n"]}
{"id": 4, "answer": false, "completion": ".decl Requires(Activity:symbol, Limb:symbol)\nRequires(\"jujutsu\", \"arms\").\nRequires(\"jujutsu\", \"legs\").\n.decl Answer()\nAnswer() :- Requires(\"jujutsu\", limb1), Requires(\"jujutsu\", limb2), limb1 != limb2.\n.output Answer\n\n", "completions": [".decl Requires(Activity:symbol, Limb:symbol)\nRequires(\"jujutsu\", \"arms\").\nRequires(\"jujutsu\", \"legs\").\n.decl Answer()\nAnswer() :- Requires(\"jujutsu\", limb1), Requires(\"jujutsu\", limb2), limb1 != limb2.\n.output Answer\n\n"]}
{"id": 5, "answer": false, "completion": ".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"War in Vietnam\", 6).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"llama birth\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"llama birth\", n_months1), Last_n_months(\"War in Vietnam\", n_months2),  n_months1 <= n_months2.\n.output Answer\n\n\n", "completions": [".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"War in Vietnam\", 6).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"llama birth\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"llama birth\", n_months1), Last_n_months(\"War in Vietnam\", n_months2),  n_months1 <= n_months2.\n.output Answer\n\n\n"]}
{"id": 6, "answer": false, "completion": ".decl Makes_money_off_of(Person:symbol, Product:symbol)\n.decl Answer()\nAnswer() :- Makes_money_off_of(\"Linus Torvalds\", \"DirectX\").\n.output Answer", "completions": [".decl Makes_money_off_of(Person:symbol, Product:symbol)\n.decl Answer()\nAnswer() :- Makes_money_off_of(\"Linus Torvalds\", \"DirectX\").\n.output Answer"]}
{"id": 7, "answer": true, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Brooke Shields\", \"Princeton University\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"Princeton University\", 1).\nRanks(\"University of Pennsylvania\", 7).\n.decl Answer()\nAnswer() :- Graduates(\"Brooke Shields\", \"University of Pennsylvania\").\nAnswer() :- Graduates(\"Brooke Shields\", university2), Ranks(university2, rank2), Ranks(\"University of Pennsylvania\", rank1), rank2 <= rank1.\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Brooke Shields\", \"Princeton University\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"Princeton University\", 1).\nRanks(\"University of Pennsylvania\", 7).\n.decl Answer()\nAnswer() :- Graduates(\"Brooke Shields\", \"University of Pennsylvania\").\nAnswer() :- Graduates(\"Brooke Shields\", university2), Ranks(university2, rank2), Ranks(\"University of Pennsylvania\", rank1), rank2 <= rank1.\n.output Answer"]}
{"id": 8, "answer": false, "completion": ".decl Can_jump(Animal:symbol, Height:float)\nCan_jump(\"silverfish\", 0.1).\n.decl Is_taller_than(Tall_object:symbol, Short_object:symbol)\nIs_taller_than(\"Empire State Building\", \"silverfish\").\n.decl Answer()\nAnswer() :- Can_jump(\"silverfish\", height1), Is_taller_than(\"Empire State Building\", \"silverfish\"), height1 >= 1.\n.output Answer", "completions": [".decl Can_jump(Animal:symbol, Height:float)\nCan_jump(\"silverfish\", 0.1).\n.decl Is_taller_than(Tall_object:symbol, Short_object:symbol)\nIs_taller_than(\"Empire State Building\", \"silverfish\").\n.decl Answer()\nAnswer() :- Can_jump(\"silverfish\", height1), Is_taller_than(\"Empire State Building\", \"silverfish\"), height1 >= 1.\n.output Answer"]}
{"id": 9, "answer": true, "completion": ".decl Has_familiarity(Person:symbol, Familiarity:symbol)\nHas_familiarity(\"Reddit user\", \"familiar\").\nHas_familiarity(\"Reddit user\", \"unfamiliar\").\n.decl Answer()\nAnswer() :- Has_familiarity(person1, \"familiar\"), Has_familiarity(person2, \"unfamiliar\"), person1 != person2.\n.output Answer", "completions": [".decl Has_familiarity(Person:symbol, Familiarity:symbol)\nHas_familiarity(\"Reddit user\", \"familiar\").\nHas_familiarity(\"Reddit user\", \"unfamiliar\").\n.decl Answer()\nAnswer() :- Has_familiarity(person1, \"familiar\"), Has_familiarity(person2, \"unfamiliar\"), person1 != person2.\n.output Answer"]}
{"id": 10, "answer": true, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Jornal Nacional's anchor\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Speaks_language(\"Jornal Nacional's anchor\", \"Chinese\").\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Jornal Nacional's anchor\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Speaks_language(\"Jornal Nacional's anchor\", \"Chinese\").\n.output Answer"]}
{"id": 11, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Reiki\", 0).\n.decl Answer()\nAnswer() :- Has_volume(\"Reiki\", volume).\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Reiki\", 0).\n.decl Answer()\nAnswer() :- Has_volume(\"Reiki\", volume).\n.output Answer"]}
{"id": 12, "answer": true, "completion": ".decl Causes_adrenaline_increase(Event:symbol)\nCauses_adrenaline_increase(\"scary movie\").\n.decl Answer()\nAnswer() :- Causes_adrenaline_increase(\"scary movie\").\n.output Answer", "completions": [".decl Causes_adrenaline_increase(Event:symbol)\nCauses_adrenaline_increase(\"scary movie\").\n.decl Answer()\nAnswer() :- Causes_adrenaline_increase(\"scary movie\").\n.output Answer"]}
{"id": 13, "answer": false, "completion": ".decl Is_envious(Person:symbol, Object:symbol)\nIs_envious(\"Marvel's Gateway\", \"Doctor's TARDIS machine\").\n.decl Answer()\nAnswer() :- Is_envious(\"Marvel's Gateway\", \"Doctor's TARDIS machine\").\n.output Answer", "completions": [".decl Is_envious(Person:symbol, Object:symbol)\nIs_envious(\"Marvel's Gateway\", \"Doctor's TARDIS machine\").\n.decl Answer()\nAnswer() :- Is_envious(\"Marvel's Gateway\", \"Doctor's TARDIS machine\").\n.output Answer"]}
{"id": 14, "answer": true, "completion": ".decl Is_material_in(Material:symbol, Product:symbol)\nIs_material_in(\"aloe\", \"petroleum-derived products\").\n.decl Answer()\nAnswer() :- Is_material_in(\"aloe\", \"petroleum-derived products\").\n.output Answer", "completions": [".decl Is_material_in(Material:symbol, Product:symbol)\nIs_material_in(\"aloe\", \"petroleum-derived products\").\n.decl Answer()\nAnswer() :- Is_material_in(\"aloe\", \"petroleum-derived products\").\n.output Answer"]}
{"id": 15, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"bee hummingbird\", 0.05).\nHas_mass(\"pea\", 0.01).\n.decl Answer()\nAnswer() :- Has_mass(\"bee hummingbird\", mass1), Has_mass(\"pea\", mass2), mass1 >= mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"bee hummingbird\", 0.05).\nHas_mass(\"pea\", 0.01).\n.decl Answer()\nAnswer() :- Has_mass(\"bee hummingbird\", mass1), Has_mass(\"pea\", mass2), mass1 >= mass2.\n.output Answer"]}
{"id": 16, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Spirit broadcast\", 20).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"news\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"news\", n_years1), Last_n_years(\"Spirit broadcast\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Spirit broadcast\", 20).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"news\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"news\", n_years1), Last_n_years(\"Spirit broadcast\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 17, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Harry Potter and the Philosopher's Stone\", 1997).\n.decl Happens_in_century(Event:symbol, Century:float)\nHappens_in_century(\"persecution of pagans\", 16).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Harry Potter and the Philosopher's Stone\", year1), Happens_in_century(\"persecution of pagans\", century1), year1 >= century1*100.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Harry Potter and the Philosopher's Stone\", 1997).\n.decl Happens_in_century(Event:symbol, Century:float)\nHappens_in_century(\"persecution of pagans\", 16).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Harry Potter and the Philosopher's Stone\", year1), Happens_in_century(\"persecution of pagans\", century1), year1 >= century1*100.\n.output Answer"]}
{"id": 18, "answer": true, "completion": ".decl Is_a_weapon(Object:symbol)\nIs_a_weapon(\"gun\").\nIs_a_weapon(\"knife\").\nIs_a_weapon(\"music\").\n.decl Answer()\nAnswer() :- Is_a_weapon(\"music\").\n.output Answer", "completions": [".decl Is_a_weapon(Object:symbol)\nIs_a_weapon(\"gun\").\nIs_a_weapon(\"knife\").\nIs_a_weapon(\"music\").\n.decl Answer()\nAnswer() :- Is_a_weapon(\"music\").\n.output Answer"]}
{"id": 19, "answer": false, "completion": ".decl Can_fly(Person:symbol, Airline:symbol)\nCan_fly(\"Harry Potter\", \"Asiana Airlines\").\n.decl Answer()\nAnswer() :- Can_fly(\"Harry Potter\", \"Asiana Airlines\").\n.output Answer", "completions": [".decl Can_fly(Person:symbol, Airline:symbol)\nCan_fly(\"Harry Potter\", \"Asiana Airlines\").\n.decl Answer()\nAnswer() :- Can_fly(\"Harry Potter\", \"Asiana Airlines\").\n.output Answer"]}
{"id": 20, "answer": false, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Alexander the Great's success\", \"Karachi\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Alexander the Great's success\", \"Karachi\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Alexander the Great's success\", \"Karachi\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Alexander the Great's success\", \"Karachi\").\n.output Answer"]}
{"id": 21, "answer": false, "completion": ".decl Trained_by(Artist:symbol, Teacher:symbol)\nTrained_by(\"Jackson Pollock\", \"Leonardo da Vinci\").\n.decl Answer()\nAnswer() :- Trained_by(\"Jackson Pollock\", \"Leonardo da Vinci\").\n.output Answer", "completions": [".decl Trained_by(Artist:symbol, Teacher:symbol)\nTrained_by(\"Jackson Pollock\", \"Leonardo da Vinci\").\n.decl Answer()\nAnswer() :- Trained_by(\"Jackson Pollock\", \"Leonardo da Vinci\").\n.output Answer"]}
{"id": 22, "answer": true, "completion": ".decl Stimulates(Event:symbol, System:symbol)\nStimulates(\"The Exorcist\", \"limbic system\").\n.decl Answer()\nAnswer() :- Stimulates(\"The Exorcist\", \"limbic system\").\n.output Answer", "completions": [".decl Stimulates(Event:symbol, System:symbol)\nStimulates(\"The Exorcist\", \"limbic system\").\n.decl Answer()\nAnswer() :- Stimulates(\"The Exorcist\", \"limbic system\").\n.output Answer"]}
{"id": 23, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"World War II\", 6).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Alan Turing\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Alan Turing\", n_years1), Last_n_years(\"World War II\", n_years2),  n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"World War II\", 6).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Alan Turing\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Alan Turing\", n_years1), Last_n_years(\"World War II\", n_years2),  n_years1 <= n_years2.\n.output Answer"]}
{"id": 24, "answer": true, "completion": ".decl Uses(Person:symbol, Weapon:symbol)\nUses(\"sophist\", \"épée\").\n.decl Answer()\nAnswer() :- Uses(\"sophist\", \"épée\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Weapon:symbol)\nUses(\"sophist\", \"épée\").\n.decl Answer()\nAnswer() :- Uses(\"sophist\", \"épée\").\n.output Answer"]}
{"id": 25, "answer": false, "completion": ".decl Hugs(Person1:symbol, Person2:symbol)\nHugs(\"Dale Earnhardt Jr\", \"Dale Earnhardt Sr\").\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Daytona 500\", 1).\n.decl Answer()\nAnswer() :- Hugs(\"Dale Earnhardt Jr\", \"Dale Earnhardt Sr\"), Last_n_days(\"Daytona 500\", n_days).\n.output Answer", "completions": [".decl Hugs(Person1:symbol, Person2:symbol)\nHugs(\"Dale Earnhardt Jr\", \"Dale Earnhardt Sr\").\n.decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Daytona 500\", 1).\n.decl Answer()\nAnswer() :- Hugs(\"Dale Earnhardt Jr\", \"Dale Earnhardt Sr\"), Last_n_days(\"Daytona 500\", n_days).\n.output Answer"]}
{"id": 26, "answer": true, "completion": ".decl Grows_in_climate(Crop:symbol, Climate:symbol)\nGrows_in_climate(\"citrus\", \"tropical\").\nGrows_in_climate(\"citrus\", \"subtropical\").\n.decl Has_climate(City:symbol, Climate:symbol)\nHas_climate(\"Ulaanbaatar\", \"continental\").\n.decl Answer()\nAnswer() :- Grows_in_climate(\"citrus\", climate), Has_climate(\"Ulaanbaatar\", climate).\n.output Answer", "completions": [".decl Grows_in_climate(Crop:symbol, Climate:symbol)\nGrows_in_climate(\"citrus\", \"tropical\").\nGrows_in_climate(\"citrus\", \"subtropical\").\n.decl Has_climate(City:symbol, Climate:symbol)\nHas_climate(\"Ulaanbaatar\", \"continental\").\n.decl Answer()\nAnswer() :- Grows_in_climate(\"citrus\", climate), Has_climate(\"Ulaanbaatar\", climate).\n.output Answer"]}
{"id": 27, "answer": false, "completion": ".decl Has_volcanic_activity(Craton:symbol, Volcanic_activity:symbol)\nHas_volcanic_activity(\"New York Harbor\", \"no\").\n.decl Answer()\nAnswer() :- Has_volcanic_activity(\"New York Harbor\", \"no\").\n.output Answer", "completions": [".decl Has_volcanic_activity(Craton:symbol, Volcanic_activity:symbol)\nHas_volcanic_activity(\"New York Harbor\", \"no\").\n.decl Answer()\nAnswer() :- Has_volcanic_activity(\"New York Harbor\", \"no\").\n.output Answer"]}
{"id": 28, "answer": true, "completion": ".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"Palace of Westminster\", \"clock\").\nHas_feature(\"Palace of Westminster\", \"light\").\n.decl Answer()\nAnswer() :- Has_feature(\"Palace of Westminster\", \"clock\"), !, Has_feature(\"Palace of Westminster\", \"light\").\n.output Answer", "completions": [".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"Palace of Westminster\", \"clock\").\nHas_feature(\"Palace of Westminster\", \"light\").\n.decl Answer()\nAnswer() :- Has_feature(\"Palace of Westminster\", \"clock\"), !, Has_feature(\"Palace of Westminster\", \"light\").\n.output Answer"]}
{"id": 29, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"teenagers\", 13).\nHas_age(\"teenagers\", 14).\nHas_age(\"teenagers\", 15).\nHas_age(\"teenagers\", 16).\nHas_age(\"teenagers\", 17).\nHas_age(\"teenagers\", 18).\nHas_age(\"teenagers\", 19).\nHas_age(\"young adults\", 20).\nHas_age(\"young adults\", 21).\nHas_age(\"young adults\", 22).\nHas_age(\"young adults\", 23).\nHas_age(\"young adults\", 24).\nHas_age(\"young adults\", 25).\nHas_age(\"young adults\", 26).\nHas_age(\"young adults\", 27).\nHas_age(\"young adults\", 28).\nHas_age(\"young adults\", 29).\nHas_age(\"young adults\", 30).\nHas_age(\"young adults\", 31).\nHas_age(\"young adults\", 32).\nHas_age(\"young adults\", 33).\nHas_age(\"young adults\", 34).\nHas_age(\"young adults\", 35).\nHas_age(\"young adults\", 36).\nHas_age(\"young adults\", 37).\nHas_age(\"young adults\", 38).\nHas_age(\"young adults\", 39).\nHas_age(\"young adults\", 40).\nHas_age(\"young adults\", 41).\nHas_age(\"young adults\", 42).\nHas_age(\"young adults\", 43).\nHas_age(\"young adults\", 44).\nHas_age(\"young adults\", 45).\nHas_age(\"young adults\", 46).\nHas_age(\"young adults\", 47).\nHas_age(\"young adults\", 48).\nHas_age(\"young adults\", 49).\nHas_age(\"young adults\", 50).\nHas_age(\"young adults\", 51).\nHas_age(\"young adults\", 52).\nHas_age(\"young adults\", 53).\nHas_age(\"young adults\", 54).\nHas_age(\"young adults\", 55).\nHas_age(\"young adults\", 56).\nHas_age(\"young adults\", 57).\nHas_age(\"young adults\", 58).\nHas_age(\"young adults\", 59).\nHas_age(\"young adults\", 60).\nHas_age(\"young adults\", 61).\nHas_age(\"young adults\", 62).\nHas_age(\"young adults\", 63).\nHas_age(\"young adults\", 64).\nHas_age(\"young adults\", 65).\nHas_age(\"young adults\", 66).\nHas_age(\"young adults\", 67).\nHas_age(\"young adults\", 68).\nHas_age(\"young adults\", 69).\nHas_age(\"young adults\", 70).\nHas_age(\"young adults\", 71).\nHas_age(\"young adults\", 72).\nHas_age(\"young adults\", 73).\nHas_age(\"young adults\", 74).\nHas_age(\"young adults\", 75).\nHas_age(\"young adults\", 76).\nHas_age(\"young adults\", 77).\nHas_age(\"young adults\", 78).\nHas_age(\"young adults\", 79).\nHas_age(\"young adults\", 80).\nHas_age(\"young adults\", 81).\nHas_age(\"young adults\", 82).\nHas_age(\"young adults\", 83).\nHas_age(\"young adults\", 84).\nHas_age(\"young adults\", 85).\nHas_age(\"young adults\", 86).\nHas_age(\"young adults\", 87).\nHas_age(\"young adults\", 88).\nHas_age(\"young adults\", 89).\nHas_age(\"young adults\", 90).\nHas_age(\"", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"teenagers\", 13).\nHas_age(\"teenagers\", 14).\nHas_age(\"teenagers\", 15).\nHas_age(\"teenagers\", 16).\nHas_age(\"teenagers\", 17).\nHas_age(\"teenagers\", 18).\nHas_age(\"teenagers\", 19).\nHas_age(\"young adults\", 20).\nHas_age(\"young adults\", 21).\nHas_age(\"young adults\", 22).\nHas_age(\"young adults\", 23).\nHas_age(\"young adults\", 24).\nHas_age(\"young adults\", 25).\nHas_age(\"young adults\", 26).\nHas_age(\"young adults\", 27).\nHas_age(\"young adults\", 28).\nHas_age(\"young adults\", 29).\nHas_age(\"young adults\", 30).\nHas_age(\"young adults\", 31).\nHas_age(\"young adults\", 32).\nHas_age(\"young adults\", 33).\nHas_age(\"young adults\", 34).\nHas_age(\"young adults\", 35).\nHas_age(\"young adults\", 36).\nHas_age(\"young adults\", 37).\nHas_age(\"young adults\", 38).\nHas_age(\"young adults\", 39).\nHas_age(\"young adults\", 40).\nHas_age(\"young adults\", 41).\nHas_age(\"young adults\", 42).\nHas_age(\"young adults\", 43).\nHas_age(\"young adults\", 44).\nHas_age(\"young adults\", 45).\nHas_age(\"young adults\", 46).\nHas_age(\"young adults\", 47).\nHas_age(\"young adults\", 48).\nHas_age(\"young adults\", 49).\nHas_age(\"young adults\", 50).\nHas_age(\"young adults\", 51).\nHas_age(\"young adults\", 52).\nHas_age(\"young adults\", 53).\nHas_age(\"young adults\", 54).\nHas_age(\"young adults\", 55).\nHas_age(\"young adults\", 56).\nHas_age(\"young adults\", 57).\nHas_age(\"young adults\", 58).\nHas_age(\"young adults\", 59).\nHas_age(\"young adults\", 60).\nHas_age(\"young adults\", 61).\nHas_age(\"young adults\", 62).\nHas_age(\"young adults\", 63).\nHas_age(\"young adults\", 64).\nHas_age(\"young adults\", 65).\nHas_age(\"young adults\", 66).\nHas_age(\"young adults\", 67).\nHas_age(\"young adults\", 68).\nHas_age(\"young adults\", 69).\nHas_age(\"young adults\", 70).\nHas_age(\"young adults\", 71).\nHas_age(\"young adults\", 72).\nHas_age(\"young adults\", 73).\nHas_age(\"young adults\", 74).\nHas_age(\"young adults\", 75).\nHas_age(\"young adults\", 76).\nHas_age(\"young adults\", 77).\nHas_age(\"young adults\", 78).\nHas_age(\"young adults\", 79).\nHas_age(\"young adults\", 80).\nHas_age(\"young adults\", 81).\nHas_age(\"young adults\", 82).\nHas_age(\"young adults\", 83).\nHas_age(\"young adults\", 84).\nHas_age(\"young adults\", 85).\nHas_age(\"young adults\", 86).\nHas_age(\"young adults\", 87).\nHas_age(\"young adults\", 88).\nHas_age(\"young adults\", 89).\nHas_age(\"young adults\", 90).\nHas_age(\""]}
{"id": 30, "answer": false, "completion": ".decl Has_relationship(Person:symbol, Entity:symbol)\nHas_relationship(\"Marco Rubio\", \"Allah\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Marco Rubio\", \"Allah\").\n.output Answer", "completions": [".decl Has_relationship(Person:symbol, Entity:symbol)\nHas_relationship(\"Marco Rubio\", \"Allah\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Marco Rubio\", \"Allah\").\n.output Answer"]}
{"id": 31, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Persephone\", \"gardening\").\nHas_skill(\"Persephone\", \"landscaping\").\n.decl Answer()\nAnswer() :- Has_skill(\"Persephone\", \"landscaping\").\n.output Answer\n\n\n", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Persephone\", \"gardening\").\nHas_skill(\"Persephone\", \"landscaping\").\n.decl Answer()\nAnswer() :- Has_skill(\"Persephone\", \"landscaping\").\n.output Answer\n\n\n"]}
{"id": 32, "answer": false, "completion": ".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"argon\", 18).\nHas_atomic_number(\"neon\", 10).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"argon\", atomic_number1), Has_atomic_number(\"neon\", atomic_number2), atomic_number1 = atomic_number2 + 8.\n.output Answer", "completions": [".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"argon\", 18).\nHas_atomic_number(\"neon\", 10).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"argon\", atomic_number1), Has_atomic_number(\"neon\", atomic_number2), atomic_number1 = atomic_number2 + 8.\n.output Answer"]}
{"id": 33, "answer": true, "completion": ".decl Has_parents(Person:symbol, Parent1:symbol, Parent2:symbol)\nHas_parents(\"Thomas Greenhill\", \"John Greenhill\", \"Mary Greenhill\").\n.decl Has_spouse(Person:symbol, Spouse:symbol)\nHas_spouse(\"John Greenhill\", \"Mary Greenhill\").\n.decl Answer()\nAnswer() :- Has_parents(\"Thomas Greenhill\", parent1, parent2), Has_spouse(parent1, spouse1), Has_spouse(parent2, spouse2), spouse1 != spouse2.\n.output Answer", "completions": [".decl Has_parents(Person:symbol, Parent1:symbol, Parent2:symbol)\nHas_parents(\"Thomas Greenhill\", \"John Greenhill\", \"Mary Greenhill\").\n.decl Has_spouse(Person:symbol, Spouse:symbol)\nHas_spouse(\"John Greenhill\", \"Mary Greenhill\").\n.decl Answer()\nAnswer() :- Has_parents(\"Thomas Greenhill\", parent1, parent2), Has_spouse(parent1, spouse1), Has_spouse(parent2, spouse2), spouse1 != spouse2.\n.output Answer"]}
{"id": 34, "answer": false, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"high schooler\", 17).\nAge(\"high schooler\", 18).\nAge(\"high schooler\", 19).\nAge(\"high schooler\", 20).\nAge(\"high schooler\", 21).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"yellow pages\", 5).\n.decl Answer()\nAnswer() :- Age(\"high schooler\", age), Last_n_years(\"yellow pages\", n_years), age < n_years.\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"high schooler\", 17).\nAge(\"high schooler\", 18).\nAge(\"high schooler\", 19).\nAge(\"high schooler\", 20).\nAge(\"high schooler\", 21).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"yellow pages\", 5).\n.decl Answer()\nAnswer() :- Age(\"high schooler\", age), Last_n_years(\"yellow pages\", n_years), age < n_years.\n.output Answer"]}
{"id": 35, "answer": false, "completion": ".decl Distance_in_km(Event:symbol, Distance:float)\nDistance_in_km(\"Alcatraz island to Siberia\", 12000).\n.decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"swimming nonstop\", 12).\n.decl Answer()\nAnswer() :- Distance_in_km(\"Alcatraz island to Siberia\", distance), Lasts_for_n_hours(\"swimming nonstop\", n_hours), distance <= n_hours * 100.\n.output Answer", "completions": [".decl Distance_in_km(Event:symbol, Distance:float)\nDistance_in_km(\"Alcatraz island to Siberia\", 12000).\n.decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"swimming nonstop\", 12).\n.decl Answer()\nAnswer() :- Distance_in_km(\"Alcatraz island to Siberia\", distance), Lasts_for_n_hours(\"swimming nonstop\", n_hours), distance <= n_hours * 100.\n.output Answer"]}
{"id": 36, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"sinking of the Titanic\", 106).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"well preserved\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"well preserved\", n_years1), Last_n_years(\"sinking of the Titanic\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"sinking of the Titanic\", 106).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"well preserved\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"well preserved\", n_years1), Last_n_years(\"sinking of the Titanic\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 37, "answer": false, "completion": ".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"snowy owl\", \"tundra\").\n.decl In_habitat(Habitat:symbol, Region:symbol)\nIn_habitat(\"tundra\", \"Arctic\").\nIn_habitat(\"tundra\", \"Antarctic\").\nIn_habitat(\"desert\", \"Sonoran\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"snowy owl\", habitat), In_habitat(habitat, \"Sonoran\").\n.output Answer", "completions": [".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"snowy owl\", \"tundra\").\n.decl In_habitat(Habitat:symbol, Region:symbol)\nIn_habitat(\"tundra\", \"Arctic\").\nIn_habitat(\"tundra\", \"Antarctic\").\nIn_habitat(\"desert\", \"Sonoran\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"snowy owl\", habitat), In_habitat(habitat, \"Sonoran\").\n.output Answer"]}
{"id": 38, "answer": false, "completion": ".decl Worships(Person:symbol, Martyr:symbol)\nWorships(\"rabbi\", \"martyr\").\n.decl Killed(Person:symbol, Martyr:symbol)\nKilled(\"Ranavalona I\", \"martyr\").\n.decl Answer()\nAnswer() :- Worships(\"rabbi\", martyr), Killed(\"Ranavalona I\", martyr).\n.output Answer", "completions": [".decl Worships(Person:symbol, Martyr:symbol)\nWorships(\"rabbi\", \"martyr\").\n.decl Killed(Person:symbol, Martyr:symbol)\nKilled(\"Ranavalona I\", \"martyr\").\n.decl Answer()\nAnswer() :- Worships(\"rabbi\", martyr), Killed(\"Ranavalona I\", martyr).\n.output Answer"]}
{"id": 39, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"oil painter\", \"red\").\nHas_color(\"scale insect\", \"red\").\nHas_color(\"cactus\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"oil painter\", color1), Has_color(\"scale insect\", color2), Has_color(\"cactus\", color3), color1 != color2, color1 != color3.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"oil painter\", \"red\").\nHas_color(\"scale insect\", \"red\").\nHas_color(\"cactus\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"oil painter\", color1), Has_color(\"scale insect\", color2), Has_color(\"cactus\", color3), color1 != color2, color1 != color3.\n.output Answer"]}
{"id": 40, "answer": true, "completion": ".decl Written_in_year(Amendment:symbol, Year:float)\nWritten_in_year(\"Second Amendment\", 1791).\n.decl Abolished_in_year(Amendment:symbol, Year:float)\nAbolished_in_year(\"Second Amendment\", 1865).\n.decl Answer()\nAnswer() :- Written_in_year(\"Second Amendment\", year1), Abolished_in_year(\"Second Amendment\", year2), year1 < year2.\n.output Answer", "completions": [".decl Written_in_year(Amendment:symbol, Year:float)\nWritten_in_year(\"Second Amendment\", 1791).\n.decl Abolished_in_year(Amendment:symbol, Year:float)\nAbolished_in_year(\"Second Amendment\", 1865).\n.decl Answer()\nAnswer() :- Written_in_year(\"Second Amendment\", year1), Abolished_in_year(\"Second Amendment\", year2), year1 < year2.\n.output Answer"]}
{"id": 41, "answer": true, "completion": ".decl Needed_for_photosynthesis(Element:symbol)\nNeeded_for_photosynthesis(\"carbon\").\nNeeded_for_photosynthesis(\"oxygen\").\nNeeded_for_photosynthesis(\"hydrogen\").\nNeeded_for_photosynthesis(\"nitrogen\").\nNeeded_for_photosynthesis(\"phosphorus\").\nNeeded_for_photosynthesis(\"sulfur\").\nNeeded_for_photosynthesis(\"chlorine\").\nNeeded_for_photosynthesis(\"calcium\").\nNeeded_for_photosynthesis(\"magnesium\").\nNeeded_for_photosynthesis(\"iron\").\nNeeded_for_photosynthesis(\"manganese\").\nNeeded_for_photosynthesis(\"boron\").\nNeeded_for_photosynthesis(\"copper\").\nNeeded_for_photosynthesis(\"molybdenum\").\nNeeded_for_photosynthesis(\"zinc\").\nNeeded_for_photosynthesis(\"cobalt\").\nNeeded_for_photosynthesis(\"nickel\").\nNeeded_for_photosynthesis(\"tin\").\nNeeded_for_photosynthesis(\"tungsten\").\nNeeded_for_photosynthesis(\"vanadium\").\nNeeded_for_photosynthesis(\"chromium\").\nNeeded_for_photosynthesis(\"manganese\").\nNeeded_for_photosynthesis(\"selenium\").\nNeeded_for_photosynthesis(\"silicon\").\nNeeded_for_photosynthesis(\"boron\").\nNeeded_for_photosynthesis(\"zinc\").\nNeeded_for_photosynthesis(\"copper\").\nNeeded_for_photosynthesis(\"molybdenum\").\nNeeded_for_photosynthesis(\"iron\").\nNeeded_for_photosynthesis(\"chlorine\").\nNeeded_for_photosynthesis(\"nickel\").\nNeeded_for_photosynthesis(\"cobalt\").\nNeeded_for_photosynthesis(\"tin\").\nNeeded_for_photosynthesis(\"tungsten\").\nNeeded_for_photosynthesis(\"vanadium\").\nNeeded_for_photosynthesis(\"chromium\").\nNeeded_for_photosynthesis(\"manganese\").\nNeeded_for_photosynthesis(\"selenium\").\nNeeded_for_photosynthesis(\"silicon\").\nNeeded_for_photosynthesis(\"boron\").\nNeeded_for_photosynthesis(\"zinc\").\nNeeded_for_photosynthesis(\"copper\").\nNeeded_for_photosynthesis(\"molybdenum\").\nNeeded_for_photosynthesis(\"iron\").\nNeeded_for_photosynthesis(\"chlorine\").\nNeeded_for_photosynthesis(\"nickel\").\nNeeded_for_photosynthesis(\"cobalt\").\nNeeded_for_photosynthesis(\"tin\").\nNeeded_for_photosynthesis(\"tungsten\").\nNeeded_for_photosynthesis(\"vanadium\").\nNeeded_for_photosynthesis(\"chromium\").\nNeeded_for_photosynthesis(\"manganese\").\nNeeded_for_photosynthesis(\"selenium\").\nNeeded_for_photosynthesis(\"silicon\").\nNeeded_for_photosynthesis(\"boron\").\nNeeded_for_photosynthesis(\"zinc\").\nNeeded_for_photosynthesis(\"copper\").\nNeeded_for_photosynthesis(\"molybdenum\").\nNeeded_for_photosynthesis(\"iron\").\nNeeded_for_photosynthesis(\"chlorine\").\nNeeded_for_photosynthesis(\"nickel\").\nNeeded_for_photosynthesis(\"cobalt\").\nNeeded_for_photosynthesis(\"tin\").\nNeeded_for_photosynthesis(\"tungsten\").", "completions": [".decl Needed_for_photosynthesis(Element:symbol)\nNeeded_for_photosynthesis(\"carbon\").\nNeeded_for_photosynthesis(\"oxygen\").\nNeeded_for_photosynthesis(\"hydrogen\").\nNeeded_for_photosynthesis(\"nitrogen\").\nNeeded_for_photosynthesis(\"phosphorus\").\nNeeded_for_photosynthesis(\"sulfur\").\nNeeded_for_photosynthesis(\"chlorine\").\nNeeded_for_photosynthesis(\"calcium\").\nNeeded_for_photosynthesis(\"magnesium\").\nNeeded_for_photosynthesis(\"iron\").\nNeeded_for_photosynthesis(\"manganese\").\nNeeded_for_photosynthesis(\"boron\").\nNeeded_for_photosynthesis(\"copper\").\nNeeded_for_photosynthesis(\"molybdenum\").\nNeeded_for_photosynthesis(\"zinc\").\nNeeded_for_photosynthesis(\"cobalt\").\nNeeded_for_photosynthesis(\"nickel\").\nNeeded_for_photosynthesis(\"tin\").\nNeeded_for_photosynthesis(\"tungsten\").\nNeeded_for_photosynthesis(\"vanadium\").\nNeeded_for_photosynthesis(\"chromium\").\nNeeded_for_photosynthesis(\"manganese\").\nNeeded_for_photosynthesis(\"selenium\").\nNeeded_for_photosynthesis(\"silicon\").\nNeeded_for_photosynthesis(\"boron\").\nNeeded_for_photosynthesis(\"zinc\").\nNeeded_for_photosynthesis(\"copper\").\nNeeded_for_photosynthesis(\"molybdenum\").\nNeeded_for_photosynthesis(\"iron\").\nNeeded_for_photosynthesis(\"chlorine\").\nNeeded_for_photosynthesis(\"nickel\").\nNeeded_for_photosynthesis(\"cobalt\").\nNeeded_for_photosynthesis(\"tin\").\nNeeded_for_photosynthesis(\"tungsten\").\nNeeded_for_photosynthesis(\"vanadium\").\nNeeded_for_photosynthesis(\"chromium\").\nNeeded_for_photosynthesis(\"manganese\").\nNeeded_for_photosynthesis(\"selenium\").\nNeeded_for_photosynthesis(\"silicon\").\nNeeded_for_photosynthesis(\"boron\").\nNeeded_for_photosynthesis(\"zinc\").\nNeeded_for_photosynthesis(\"copper\").\nNeeded_for_photosynthesis(\"molybdenum\").\nNeeded_for_photosynthesis(\"iron\").\nNeeded_for_photosynthesis(\"chlorine\").\nNeeded_for_photosynthesis(\"nickel\").\nNeeded_for_photosynthesis(\"cobalt\").\nNeeded_for_photosynthesis(\"tin\").\nNeeded_for_photosynthesis(\"tungsten\").\nNeeded_for_photosynthesis(\"vanadium\").\nNeeded_for_photosynthesis(\"chromium\").\nNeeded_for_photosynthesis(\"manganese\").\nNeeded_for_photosynthesis(\"selenium\").\nNeeded_for_photosynthesis(\"silicon\").\nNeeded_for_photosynthesis(\"boron\").\nNeeded_for_photosynthesis(\"zinc\").\nNeeded_for_photosynthesis(\"copper\").\nNeeded_for_photosynthesis(\"molybdenum\").\nNeeded_for_photosynthesis(\"iron\").\nNeeded_for_photosynthesis(\"chlorine\").\nNeeded_for_photosynthesis(\"nickel\").\nNeeded_for_photosynthesis(\"cobalt\").\nNeeded_for_photosynthesis(\"tin\").\nNeeded_for_photosynthesis(\"tungsten\")."]}
{"id": 42, "answer": true, "completion": ".decl Has_face(Object:symbol)\nHas_face(\"Bob Marley\").\n.decl Answer()\nAnswer() :- Has_face(\"Bob Marley\").\n.output Answer", "completions": [".decl Has_face(Object:symbol)\nHas_face(\"Bob Marley\").\n.decl Answer()\nAnswer() :- Has_face(\"Bob Marley\").\n.output Answer"]}
{"id": 43, "answer": true, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Pablo Escobar\", \"El Doctor\").\nHas_nickname(\"Pablo Escobar\", \"El Patrón\").\nHas_nickname(\"Pablo Escobar\", \"Don Pablo\").\nHas_nickname(\"Robert Moses Grove\", \"Old Hoss\").\nHas_nickname(\"Robert Moses Grove\", \"Grover\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Pablo Escobar\", nickname1), Has_nickname(\"Robert Moses Grove\", nickname2), nickname1 > nickname2.\n.output Answer", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Pablo Escobar\", \"El Doctor\").\nHas_nickname(\"Pablo Escobar\", \"El Patrón\").\nHas_nickname(\"Pablo Escobar\", \"Don Pablo\").\nHas_nickname(\"Robert Moses Grove\", \"Old Hoss\").\nHas_nickname(\"Robert Moses Grove\", \"Grover\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Pablo Escobar\", nickname1), Has_nickname(\"Robert Moses Grove\", nickname2), nickname1 > nickname2.\n.output Answer"]}
{"id": 44, "answer": true, "completion": ".decl Has_connection(Organization:symbol, Person:symbol)\nHas_connection(\"Subway restaurant franchise\", \"Jared Fogle\").\n.decl Is_child_abuser(Person:symbol)\nIs_child_abuser(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Has_connection(\"Subway restaurant franchise\", person), Is_child_abuser(person).\n.output Answer", "completions": [".decl Has_connection(Organization:symbol, Person:symbol)\nHas_connection(\"Subway restaurant franchise\", \"Jared Fogle\").\n.decl Is_child_abuser(Person:symbol)\nIs_child_abuser(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Has_connection(\"Subway restaurant franchise\", person), Is_child_abuser(person).\n.output Answer"]}
{"id": 45, "answer": false, "completion": ".decl Uses(Technology:symbol, Fuel:symbol)\nUses(\"autopilot\", \"fossil fuels\").\n.decl Answer()\nAnswer() :- Uses(\"autopilot\", \"fossil fuels\").\n.output Answer", "completions": [".decl Uses(Technology:symbol, Fuel:symbol)\nUses(\"autopilot\", \"fossil fuels\").\n.decl Answer()\nAnswer() :- Uses(\"autopilot\", \"fossil fuels\").\n.output Answer"]}
{"id": 46, "answer": false, "completion": ".decl Has_mental_illness(Person:symbol, Mental_illness:symbol)\nHas_mental_illness(\"psychiatric patient\", \"psychiatric illness\").\n.decl Answer()\nAnswer() :- Has_mental_illness(\"psychiatric patient\", \"psychiatric illness\").\n.output Answer", "completions": [".decl Has_mental_illness(Person:symbol, Mental_illness:symbol)\nHas_mental_illness(\"psychiatric patient\", \"psychiatric illness\").\n.decl Answer()\nAnswer() :- Has_mental_illness(\"psychiatric patient\", \"psychiatric illness\").\n.output Answer"]}
{"id": 47, "answer": false, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Nicole Kidman\", \"Tom Cruise\").\n.decl Is_a_Scientologist(Person:symbol)\nIs_a_Scientologist(\"Tom Cruise\").\n.decl Answer()\nAnswer() :- Knows(\"Nicole Kidman\", person), Is_a_Scientologist(person).\n.output Answer", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Nicole Kidman\", \"Tom Cruise\").\n.decl Is_a_Scientologist(Person:symbol)\nIs_a_Scientologist(\"Tom Cruise\").\n.decl Answer()\nAnswer() :- Knows(\"Nicole Kidman\", person), Is_a_Scientologist(person).\n.output Answer"]}
{"id": 48, "answer": false, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 49, "answer": true, "completion": ".decl Has_length(Thing:symbol, Length:float)\nHas_length(\"CERN tunnels\", 27).\nHas_length(\"High Speed 1 rails\", 106).\n.decl Answer()\nAnswer() :- Has_length(\"CERN tunnels\", length1), Has_length(\"High Speed 1 rails\", length2), length1 < length2.\n.output Answer", "completions": [".decl Has_length(Thing:symbol, Length:float)\nHas_length(\"CERN tunnels\", 27).\nHas_length(\"High Speed 1 rails\", 106).\n.decl Answer()\nAnswer() :- Has_length(\"CERN tunnels\", length1), Has_length(\"High Speed 1 rails\", length2), length1 < length2.\n.output Answer"]}
{"id": 50, "answer": false, "completion": ".decl Weighs_more_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_more_than(\"elephant\", \"male macaque\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"elephant\", \"male macaque\").\n.output Answer", "completions": [".decl Weighs_more_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_more_than(\"elephant\", \"male macaque\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"elephant\", \"male macaque\").\n.output Answer"]}
{"id": 51, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Ubuntu people\", \"Ubuntu\").\n.decl Answer()\nSpeaks(\"Ubuntu people\", \"Ubuntu\").\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Ubuntu people\", \"Ubuntu\").\n.decl Answer()\nSpeaks(\"Ubuntu people\", \"Ubuntu\").\n.output Answer"]}
{"id": 52, "answer": true, "completion": ".decl Has_activity(Person:symbol, Activity:symbol)\nHas_activity(\"pelvis fracture\", \"cycling\").\n.decl Has_risk(Activity:symbol, Risk:symbol)\nHas_risk(\"cycling\", \"high\").\n.decl Answer()\nAnswer() :- Has_activity(\"pelvis fracture\", activity), Has_risk(activity, \"high\").\n.output Answer", "completions": [".decl Has_activity(Person:symbol, Activity:symbol)\nHas_activity(\"pelvis fracture\", \"cycling\").\n.decl Has_risk(Activity:symbol, Risk:symbol)\nHas_risk(\"cycling\", \"high\").\n.decl Answer()\nAnswer() :- Has_activity(\"pelvis fracture\", activity), Has_risk(activity, \"high\").\n.output Answer"]}
{"id": 53, "answer": true, "completion": ".decl Is_immune(Animal:symbol, Disease:symbol)\nIs_immune(\"platypus\", \"cholera\").\n.decl Answer()\nAnswer() :- Is_immune(\"platypus\", \"cholera\").\n.output Answer", "completions": [".decl Is_immune(Animal:symbol, Disease:symbol)\nIs_immune(\"platypus\", \"cholera\").\n.decl Answer()\nAnswer() :- Is_immune(\"platypus\", \"cholera\").\n.output Answer"]}
{"id": 54, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"moose\", 1000).\nHas_mass(\"minotaur\", 500).\n.decl Answer()\nAnswer() :- Has_mass(\"moose\", mass1), Has_mass(\"minotaur\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"moose\", 1000).\nHas_mass(\"minotaur\", 500).\n.decl Answer()\nAnswer() :- Has_mass(\"moose\", mass1), Has_mass(\"minotaur\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 55, "answer": false, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"anchovy pizza\", \"anchovy\").\nHas_ingredient(\"anchovy pizza\", \"cheese\").\nHas_ingredient(\"anchovy pizza\", \"dough\").\nHas_ingredient(\"anchovy pizza\", \"tomato sauce\").\n.decl Is_bone(Ingredient:symbol)\nIs_bone(\"anchovy\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"anchovy pizza\", ingredient), Is_bone(ingredient).\n.output Answer", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"anchovy pizza\", \"anchovy\").\nHas_ingredient(\"anchovy pizza\", \"cheese\").\nHas_ingredient(\"anchovy pizza\", \"dough\").\nHas_ingredient(\"anchovy pizza\", \"tomato sauce\").\n.decl Is_bone(Ingredient:symbol)\nIs_bone(\"anchovy\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"anchovy pizza\", ingredient), Is_bone(ingredient).\n.output Answer"]}
{"id": 56, "answer": false, "completion": ".decl Needs_to_eat(Animal:symbol, Food:symbol)\nNeeds_to_eat(\"Bengal cat\", \"pancakes\").\nNeeds_to_eat(\"Bengal cat\", \"chicken\").\nNeeds_to_eat(\"Bengal cat\", \"fish\").\nNeeds_to_eat(\"Bengal cat\", \"beef\").\nNeeds_to_eat(\"Bengal cat\", \"pork\").\nNeeds_to_eat(\"Bengal cat\", \"lamb\").\nNeeds_to_eat(\"Bengal cat\", \"vegetables\").\nNeeds_to_eat(\"Bengal cat\", \"fruits\").\nNeeds_to_eat(\"Bengal cat\", \"eggs\").\nNeeds_to_eat(\"Bengal cat\", \"milk\").\nNeeds_to_eat(\"Bengal cat\", \"water\").\n.decl Answer()\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"pancakes\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"chicken\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"fish\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"beef\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"pork\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"lamb\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"vegetables\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"fruits\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"eggs\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"milk\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"water\").\n.output Answer", "completions": [".decl Needs_to_eat(Animal:symbol, Food:symbol)\nNeeds_to_eat(\"Bengal cat\", \"pancakes\").\nNeeds_to_eat(\"Bengal cat\", \"chicken\").\nNeeds_to_eat(\"Bengal cat\", \"fish\").\nNeeds_to_eat(\"Bengal cat\", \"beef\").\nNeeds_to_eat(\"Bengal cat\", \"pork\").\nNeeds_to_eat(\"Bengal cat\", \"lamb\").\nNeeds_to_eat(\"Bengal cat\", \"vegetables\").\nNeeds_to_eat(\"Bengal cat\", \"fruits\").\nNeeds_to_eat(\"Bengal cat\", \"eggs\").\nNeeds_to_eat(\"Bengal cat\", \"milk\").\nNeeds_to_eat(\"Bengal cat\", \"water\").\n.decl Answer()\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"pancakes\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"chicken\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"fish\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"beef\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"pork\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"lamb\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"vegetables\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"fruits\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"eggs\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"milk\").\nAnswer() :- Needs_to_eat(\"Bengal cat\", \"water\").\n.output Answer"]}
{"id": 57, "answer": true, "completion": ".decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"zucchini\", \"zucchini\").\nHas_letters(\"courgette\", \"courgette\").\nHas_letters(\"top row of a QWERTY keyboard\", \"qwertyuiop\").\n.decl Answer()\nAnswer() :- Has_letters(\"zucchini\", word), Has_letters(\"top row of a QWERTY keyboard\", letters), word = letters.\nAnswer() :- Has_letters(\"courgette\", word), Has_letters(\"top row of a QWERTY keyboard\", letters), word = letters.\n.output Answer", "completions": [".decl Has_letters(Word:symbol, Letters:symbol)\nHas_letters(\"zucchini\", \"zucchini\").\nHas_letters(\"courgette\", \"courgette\").\nHas_letters(\"top row of a QWERTY keyboard\", \"qwertyuiop\").\n.decl Answer()\nAnswer() :- Has_letters(\"zucchini\", word), Has_letters(\"top row of a QWERTY keyboard\", letters), word = letters.\nAnswer() :- Has_letters(\"courgette\", word), Has_letters(\"top row of a QWERTY keyboard\", letters), word = letters.\n.output Answer"]}
{"id": 58, "answer": true, "completion": ".decl Bodies_of_water(City:symbol, Body_of_water:symbol)\nBodies_of_water(\"The Hague\", \"North Sea\").\nBodies_of_water(\"The Hague\", \"Rhine\").\n.decl Answer()\nAnswer() :- Bodies_of_water(\"The Hague\", body_of_water1), Bodies_of_water(\"The Hague\", body_of_water2), body_of_water1 != body_of_water2.\n.output Answer", "completions": [".decl Bodies_of_water(City:symbol, Body_of_water:symbol)\nBodies_of_water(\"The Hague\", \"North Sea\").\nBodies_of_water(\"The Hague\", \"Rhine\").\n.decl Answer()\nAnswer() :- Bodies_of_water(\"The Hague\", body_of_water1), Bodies_of_water(\"The Hague\", body_of_water2), body_of_water1 != body_of_water2.\n.output Answer"]}
{"id": 59, "answer": true, "completion": ".decl Happens_to_people_in_age_group(Event:symbol, Age_group:symbol)\nHappens_to_people_in_age_group(\"breast exams\", \"middle school\").\n.decl Answer()\nAnswer() :- Happens_to_people_in_age_group(\"breast exams\", age_group).\n.output Answer", "completions": [".decl Happens_to_people_in_age_group(Event:symbol, Age_group:symbol)\nHappens_to_people_in_age_group(\"breast exams\", \"middle school\").\n.decl Answer()\nAnswer() :- Happens_to_people_in_age_group(\"breast exams\", age_group).\n.output Answer"]}
{"id": 60, "answer": true, "completion": ".decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Japanese Rule in Korea\", 35).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Iron Chef\", 1).\n.decl Answer()\nAnswer() :- Lasted_for_n_years(\"Japanese Rule in Korea\", n_years1), Happens_every_n_years(\"Iron Chef\", n_years2), n_years1 >= n_years2.\n.output Answer", "completions": [".decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Japanese Rule in Korea\", 35).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Iron Chef\", 1).\n.decl Answer()\nAnswer() :- Lasted_for_n_years(\"Japanese Rule in Korea\", n_years1), Happens_every_n_years(\"Iron Chef\", n_years2), n_years1 >= n_years2.\n.output Answer"]}
{"id": 61, "answer": true, "completion": ".decl Can_fly(Object:symbol)\nCan_fly(\"bald eagle\").\nCan_fly(\"B-52\").\n.decl Answer()\nAnswer() :- Can_fly(\"bald eagle\"), Can_fly(\"B-52\").\n.output Answer", "completions": [".decl Can_fly(Object:symbol)\nCan_fly(\"bald eagle\").\nCan_fly(\"B-52\").\n.decl Answer()\nAnswer() :- Can_fly(\"bald eagle\"), Can_fly(\"B-52\").\n.output Answer"]}
{"id": 62, "answer": true, "completion": ".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Snoopy\", \"black\").\nHas_color(\"Chance\", \"brown\").\n.decl Has_pattern(Animal:symbol, Pattern:symbol)\nHas_pattern(\"Snoopy\", \"spotted\").\nHas_pattern(\"Chance\", \"spotted\").\n.decl Answer()\nAnswer() :- Has_color(\"Snoopy\", color1), Has_color(\"Chance\", color2), color1 = color2.\nAnswer() :- Has_pattern(\"Snoopy\", pattern1), Has_pattern(\"Chance\", pattern2), pattern1 = pattern2.\n.output Answer", "completions": [".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Snoopy\", \"black\").\nHas_color(\"Chance\", \"brown\").\n.decl Has_pattern(Animal:symbol, Pattern:symbol)\nHas_pattern(\"Snoopy\", \"spotted\").\nHas_pattern(\"Chance\", \"spotted\").\n.decl Answer()\nAnswer() :- Has_color(\"Snoopy\", color1), Has_color(\"Chance\", color2), color1 = color2.\nAnswer() :- Has_pattern(\"Snoopy\", pattern1), Has_pattern(\"Chance\", pattern2), pattern1 = pattern2.\n.output Answer"]}
{"id": 63, "answer": true, "completion": ".decl Was_a(Person:symbol, Profession:symbol)\nWas_a(\"Dioskourides\", \"lapidary\").\n.decl Answer()\nAnswer() :- Was_a(\"Dioskourides\", \"lapidary\").\n.output Answer\n\n", "completions": [".decl Was_a(Person:symbol, Profession:symbol)\nWas_a(\"Dioskourides\", \"lapidary\").\n.decl Answer()\nAnswer() :- Was_a(\"Dioskourides\", \"lapidary\").\n.output Answer\n\n"]}
{"id": 64, "answer": false, "completion": ".decl Has_income(Family:symbol, Income:float)\nHas_income(\"Smith family\", 100000).\nHas_income(\"Jones family\", 200000).\nHas_income(\"Brown family\", 300000).\nHas_income(\"Williams family\", 400000).\nHas_income(\"Miller family\", 500000).\nHas_income(\"Davis family\", 600000).\nHas_income(\"Garcia family\", 700000).\nHas_income(\"Rodriguez family\", 800000).\nHas_income(\"Wilson family\", 900000).\nHas_income(\"Martinez family\", 1000000).\nHas_income(\"Anderson family\", 1100000).\nHas_income(\"Taylor family\", 1200000).\nHas_income(\"Thomas family\", 1300000).\nHas_income(\"Hernandez family\", 1400000).\nHas_income(\"Moore family\", 1500000).\nHas_income(\"Martin family\", 1600000).\nHas_income(\"Jackson family\", 1700000).\nHas_income(\"Thompson family\", 1800000).\nHas_income(\"White family\", 1900000).\nHas_income(\"Lopez family\", 2000000).\nHas_income(\"Lee family\", 2100000).\nHas_income(\"Gonzalez family\", 2200000).\nHas_income(\"Harris family\", 2300000).\nHas_income(\"Clark family\", 2400000).\nHas_income(\"Lewis family\", 2500000).\nHas_income(\"Robinson family\", 2600000).\nHas_income(\"Walker family\", 2700000).\nHas_income(\"Perez family\", 2800000).\nHas_income(\"Hall family\", 2900000).\nHas_income(\"Young family\", 3000000).\nHas_income(\"Allen family\", 3100000).\nHas_income(\"Sanchez family\", 3200000).\nHas_income(\"Wright family\", 3300000).\nHas_income(\"King family\", 3400000).\nHas_income(\"Scott family\", 3500000).\nHas_income(\"Green family\", 3600000).\nHas_income(\"Baker family\", 3700000).\nHas_income(\"Adams family\", 3800000).\nHas_income(\"Nelson family\", 3900000).\nHas_income(\"Hill family\", 4000000).\nHas_income(\"Ramirez family\", 4100000).\nHas_income(\"Campbell family\", 4200000).\nHas_income(\"Mitchell family\", 4300000).\nHas_income(\"Roberts family\", 4400000).\nHas_income(\"Carter family\", 4500000).\nHas_income(\"Phillips family\", 4600000).\nHas_income(\"Evans family\", 4700000).\nHas_income(\"Turner family\", 4800000).\nHas_income(\"Torres family\", 4900000).\nHas_income(\"Parker family\", 5000000).\nHas_income(\"Collins family\", 5100000).\nHas_income(\"Edwards family\", 5200000).\nHas_income(\"Stewart family\", 5300000).\nHas_income(\"Flores family\", 5400000).\nHas_income(\"Morris family\", 5500000).\nHas_income(\"Nguyen family\", 5600000).\nHas_income(\"Murphy family\", 5700000).\nHas_income(\"Rivera family\", 5800000).\nHas_income(\"Cook family\", 5900000).\nHas_income(\"Rogers family\", 6000000).\nHas_income(\"Morgan family\", 6100000).\nHas_income(\"Peterson family\", 6200000).\nHas_income(\"Cooper family\", 6300000).\nHas_income(\"Reed family\", 6400000).\nHas_income(\"Bailey family\", 6500000).\nHas_income(\"Bell family\", 6600000).\nHas_income(\"Gomez family\", 6700000).", "completions": [".decl Has_income(Family:symbol, Income:float)\nHas_income(\"Smith family\", 100000).\nHas_income(\"Jones family\", 200000).\nHas_income(\"Brown family\", 300000).\nHas_income(\"Williams family\", 400000).\nHas_income(\"Miller family\", 500000).\nHas_income(\"Davis family\", 600000).\nHas_income(\"Garcia family\", 700000).\nHas_income(\"Rodriguez family\", 800000).\nHas_income(\"Wilson family\", 900000).\nHas_income(\"Martinez family\", 1000000).\nHas_income(\"Anderson family\", 1100000).\nHas_income(\"Taylor family\", 1200000).\nHas_income(\"Thomas family\", 1300000).\nHas_income(\"Hernandez family\", 1400000).\nHas_income(\"Moore family\", 1500000).\nHas_income(\"Martin family\", 1600000).\nHas_income(\"Jackson family\", 1700000).\nHas_income(\"Thompson family\", 1800000).\nHas_income(\"White family\", 1900000).\nHas_income(\"Lopez family\", 2000000).\nHas_income(\"Lee family\", 2100000).\nHas_income(\"Gonzalez family\", 2200000).\nHas_income(\"Harris family\", 2300000).\nHas_income(\"Clark family\", 2400000).\nHas_income(\"Lewis family\", 2500000).\nHas_income(\"Robinson family\", 2600000).\nHas_income(\"Walker family\", 2700000).\nHas_income(\"Perez family\", 2800000).\nHas_income(\"Hall family\", 2900000).\nHas_income(\"Young family\", 3000000).\nHas_income(\"Allen family\", 3100000).\nHas_income(\"Sanchez family\", 3200000).\nHas_income(\"Wright family\", 3300000).\nHas_income(\"King family\", 3400000).\nHas_income(\"Scott family\", 3500000).\nHas_income(\"Green family\", 3600000).\nHas_income(\"Baker family\", 3700000).\nHas_income(\"Adams family\", 3800000).\nHas_income(\"Nelson family\", 3900000).\nHas_income(\"Hill family\", 4000000).\nHas_income(\"Ramirez family\", 4100000).\nHas_income(\"Campbell family\", 4200000).\nHas_income(\"Mitchell family\", 4300000).\nHas_income(\"Roberts family\", 4400000).\nHas_income(\"Carter family\", 4500000).\nHas_income(\"Phillips family\", 4600000).\nHas_income(\"Evans family\", 4700000).\nHas_income(\"Turner family\", 4800000).\nHas_income(\"Torres family\", 4900000).\nHas_income(\"Parker family\", 5000000).\nHas_income(\"Collins family\", 5100000).\nHas_income(\"Edwards family\", 5200000).\nHas_income(\"Stewart family\", 5300000).\nHas_income(\"Flores family\", 5400000).\nHas_income(\"Morris family\", 5500000).\nHas_income(\"Nguyen family\", 5600000).\nHas_income(\"Murphy family\", 5700000).\nHas_income(\"Rivera family\", 5800000).\nHas_income(\"Cook family\", 5900000).\nHas_income(\"Rogers family\", 6000000).\nHas_income(\"Morgan family\", 6100000).\nHas_income(\"Peterson family\", 6200000).\nHas_income(\"Cooper family\", 6300000).\nHas_income(\"Reed family\", 6400000).\nHas_income(\"Bailey family\", 6500000).\nHas_income(\"Bell family\", 6600000).\nHas_income(\"Gomez family\", 6700000)."]}
{"id": 65, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Maggie Williams\", \"Hillary Clinton's deputy chief of staff\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"baptism\", 2009).\n.decl Answer()\nAnswer() :- Has_job(\"Maggie Williams\", job), Happens_in_year(\"baptism\", year), job = \"Hillary Clinton's deputy chief of staff\", year = 2009.\n.output Answer", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Maggie Williams\", \"Hillary Clinton's deputy chief of staff\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"baptism\", 2009).\n.decl Answer()\nAnswer() :- Has_job(\"Maggie Williams\", job), Happens_in_year(\"baptism\", year), job = \"Hillary Clinton's deputy chief of staff\", year = 2009.\n.output Answer"]}
{"id": 66, "answer": true, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"New York Public Library\", \"books\").\nSells(\"PetSmart\", \"Alpo\").\n.decl Answer()\nAnswer() :- Sells(\"New York Public Library\", \"Alpo\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"New York Public Library\", \"books\").\nSells(\"PetSmart\", \"Alpo\").\n.decl Answer()\nAnswer() :- Sells(\"New York Public Library\", \"Alpo\").\n.output Answer"]}
{"id": 67, "answer": false, "completion": ".decl Has_n_prophets(Kingdom:symbol, N_prophets:float)\nHas_n_prophets(\"Islamic prophets\", 1).\nHas_n_prophets(\"Kings of Judah\", 1).\n.decl Answer()\nAnswer() :- Has_n_prophets(\"Islamic prophets\", n_prophets1), Has_n_prophets(\"Kings of Judah\", n_prophets2), n_prophets1 > n_prophets2.\n.output Answer", "completions": [".decl Has_n_prophets(Kingdom:symbol, N_prophets:float)\nHas_n_prophets(\"Islamic prophets\", 1).\nHas_n_prophets(\"Kings of Judah\", 1).\n.decl Answer()\nAnswer() :- Has_n_prophets(\"Islamic prophets\", n_prophets1), Has_n_prophets(\"Kings of Judah\", n_prophets2), n_prophets1 > n_prophets2.\n.output Answer"]}
{"id": 68, "answer": true, "completion": ".decl Is_oppa(Person:symbol)\nIs_oppa(\"Snoopy\").\n.decl Is_sister(Person1:symbol, Person2:symbol)\nIs_sister(\"Taylor Swift\", \"Austin Swift\").\n.decl Answer()\nAnswer() :- Is_oppa(\"Snoopy\"), Is_sister(\"Taylor Swift\", \"Snoopy\").\n.output Answer", "completions": [".decl Is_oppa(Person:symbol)\nIs_oppa(\"Snoopy\").\n.decl Is_sister(Person1:symbol, Person2:symbol)\nIs_sister(\"Taylor Swift\", \"Austin Swift\").\n.decl Answer()\nAnswer() :- Is_oppa(\"Snoopy\"), Is_sister(\"Taylor Swift\", \"Snoopy\").\n.output Answer"]}
{"id": 69, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Confederate States Army\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"West Point fashion\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"West Point fashion\", n_years1), Last_n_years(\"Confederate States Army\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Confederate States Army\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"West Point fashion\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"West Point fashion\", n_years1), Last_n_years(\"Confederate States Army\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 70, "answer": true, "completion": ".decl Has_political_view(Person:symbol, Political_view:symbol)\nHas_political_view(\"Blaire White\", \"liberalism\").\n.decl Answer()\nAnswer() :- Has_political_view(\"Blaire White\", political_view1), Has_political_view(\"Blaire White\", political_view2), political_view1 != political_view2.\n.output Answer", "completions": [".decl Has_political_view(Person:symbol, Political_view:symbol)\nHas_political_view(\"Blaire White\", \"liberalism\").\n.decl Answer()\nAnswer() :- Has_political_view(\"Blaire White\", political_view1), Has_political_view(\"Blaire White\", political_view2), political_view1 != political_view2.\n.output Answer"]}
{"id": 71, "answer": false, "completion": ".decl Has_part(Plant:symbol, Part:symbol)\nHas_part(\"aloe vera\", \"leaf\").\nHas_part(\"aloe vera\", \"root\").\n.decl Is_edible(Part:symbol)\nIs_edible(\"leaf\").\n.decl Answer()\nAnswer() :- Has_part(\"aloe vera\", part), Is_edible(part).\n.output Answer", "completions": [".decl Has_part(Plant:symbol, Part:symbol)\nHas_part(\"aloe vera\", \"leaf\").\nHas_part(\"aloe vera\", \"root\").\n.decl Is_edible(Part:symbol)\nIs_edible(\"leaf\").\n.decl Answer()\nAnswer() :- Has_part(\"aloe vera\", part), Is_edible(part).\n.output Answer"]}
{"id": 72, "answer": false, "completion": ".decl Studies(Person:symbol, Science:symbol)\nStudies(\"oceanographer\", \"oceanography\").\nStudies(\"oceanographer\", \"physics\").\nStudies(\"oceanographer\", \"chemistry\").\n.decl Answer()\nAnswer() :- Studies(\"oceanographer\", science1), Studies(\"oceanographer\", science2), science1 != science2.\n.output Answer", "completions": [".decl Studies(Person:symbol, Science:symbol)\nStudies(\"oceanographer\", \"oceanography\").\nStudies(\"oceanographer\", \"physics\").\nStudies(\"oceanographer\", \"chemistry\").\n.decl Answer()\nAnswer() :- Studies(\"oceanographer\", science1), Studies(\"oceanographer\", science2), science1 != science2.\n.output Answer"]}
{"id": 73, "answer": false, "completion": ".decl Lasted_until(Genre:symbol, Year:float)\nLasted_until(\"grunge\", 1994).\n.decl Died_in(Person:symbol, Year:float)\nDied_in(\"Kurt Cobain\", 1994).\n.decl Answer()\nAnswer() :- Lasted_until(\"grunge\", year1), Died_in(\"Kurt Cobain\", year2), year1 > year2.\n.output Answer", "completions": [".decl Lasted_until(Genre:symbol, Year:float)\nLasted_until(\"grunge\", 1994).\n.decl Died_in(Person:symbol, Year:float)\nDied_in(\"Kurt Cobain\", 1994).\n.decl Answer()\nAnswer() :- Lasted_until(\"grunge\", year1), Died_in(\"Kurt Cobain\", year2), year1 > year2.\n.output Answer"]}
{"id": 74, "answer": false, "completion": ".decl Meets(Person1:symbol, Person2:symbol)\nMeets(\"Immanuel Kant\", \"Johann Wolfgang von Goethe\").\n.decl Is_president(Person:symbol, Year:float)\nIs_president(\"Franklin Pierce\", 1853).\n.decl Answer()\nAnswer() :- Meets(\"Immanuel Kant\", person), Is_president(person, year), year >= 1853.\n.output Answer", "completions": [".decl Meets(Person1:symbol, Person2:symbol)\nMeets(\"Immanuel Kant\", \"Johann Wolfgang von Goethe\").\n.decl Is_president(Person:symbol, Year:float)\nIs_president(\"Franklin Pierce\", 1853).\n.decl Answer()\nAnswer() :- Meets(\"Immanuel Kant\", person), Is_president(person, year), year >= 1853.\n.output Answer"]}
{"id": 75, "answer": true, "completion": ".decl Has_market_share(Company:symbol, Market_share:float)\nHas_market_share(\"Nippon Steel\", 0.5).\nHas_market_share(\"Sumitomo Metal\", 0.5).\n.decl Answer()\nAnswer() :- Has_market_share(\"Nippon Steel\", market_share1), Has_market_share(\"Sumitomo Metal\", market_share2), market_share1 > market_share2.\n.output Answer", "completions": [".decl Has_market_share(Company:symbol, Market_share:float)\nHas_market_share(\"Nippon Steel\", 0.5).\nHas_market_share(\"Sumitomo Metal\", 0.5).\n.decl Answer()\nAnswer() :- Has_market_share(\"Nippon Steel\", market_share1), Has_market_share(\"Sumitomo Metal\", market_share2), market_share1 > market_share2.\n.output Answer"]}
{"id": 76, "answer": true, "completion": ".decl Uses(Occupation:symbol, Discipline:symbol)\nUses(\"geographer\", \"geography\").\nUses(\"geographer\", \"cartography\").\nUses(\"geographer\", \"demography\").\nUses(\"geographer\", \"climatology\").\nUses(\"geographer\", \"geology\").\nUses(\"geographer\", \"oceanography\").\nUses(\"geographer\", \"soil science\").\nUses(\"geographer\", \"geophysics\").\nUses(\"geographer\", \"geomorphology\").\nUses(\"geographer\", \"biogeography\").\nUses(\"geographer\", \"ecology\").\nUses(\"geographer\", \"environmental science\").\nUses(\"geographer\", \"archaeology\").\nUses(\"geographer\", \"anthropology\").\nUses(\"geographer\", \"sociology\").\nUses(\"geographer\", \"economics\").\nUses(\"geographer\", \"political science\").\nUses(\"geographer\", \"psychology\").\nUses(\"geographer\", \"history\").\nUses(\"geographer\", \"linguistics\").\nUses(\"geographer\", \"philosophy\").\nUses(\"geographer\", \"statistics\").\nUses(\"geographer\", \"mathematics\").\nUses(\"geographer\", \"physics\").\nUses(\"geographer\", \"chemistry\").\nUses(\"geographer\", \"biochemistry\").\n.decl Answer()\nAnswer() :- Uses(\"geographer\", \"biochemistry\").\n.output Answer", "completions": [".decl Uses(Occupation:symbol, Discipline:symbol)\nUses(\"geographer\", \"geography\").\nUses(\"geographer\", \"cartography\").\nUses(\"geographer\", \"demography\").\nUses(\"geographer\", \"climatology\").\nUses(\"geographer\", \"geology\").\nUses(\"geographer\", \"oceanography\").\nUses(\"geographer\", \"soil science\").\nUses(\"geographer\", \"geophysics\").\nUses(\"geographer\", \"geomorphology\").\nUses(\"geographer\", \"biogeography\").\nUses(\"geographer\", \"ecology\").\nUses(\"geographer\", \"environmental science\").\nUses(\"geographer\", \"archaeology\").\nUses(\"geographer\", \"anthropology\").\nUses(\"geographer\", \"sociology\").\nUses(\"geographer\", \"economics\").\nUses(\"geographer\", \"political science\").\nUses(\"geographer\", \"psychology\").\nUses(\"geographer\", \"history\").\nUses(\"geographer\", \"linguistics\").\nUses(\"geographer\", \"philosophy\").\nUses(\"geographer\", \"statistics\").\nUses(\"geographer\", \"mathematics\").\nUses(\"geographer\", \"physics\").\nUses(\"geographer\", \"chemistry\").\nUses(\"geographer\", \"biochemistry\").\n.decl Answer()\nAnswer() :- Uses(\"geographer\", \"biochemistry\").\n.output Answer"]}
{"id": 77, "answer": false, "completion": ".decl Produces(Country:symbol, Crop:symbol)\nProduces(\"Brazil\", \"coffee\").\nProduces(\"Vietnam\", \"coffee\").\nProduces(\"Ethiopia\", \"coffee\").\nProduces(\"Mexico\", \"coffee\").\nProduces(\"Colombia\", \"coffee\").\nProduces(\"Indonesia\", \"coffee\").\nProduces(\"India\", \"coffee\").\nProduces(\"Guatemala\", \"coffee\").\nProduces(\"Peru\", \"coffee\").\nProduces(\"Honduras\", \"coffee\").\nProduces(\"Nicaragua\", \"coffee\").\nProduces(\"Cameroon\", \"coffee\").\nProduces(\"Uganda\", \"coffee\").\nProduces(\"El Salvador\", \"coffee\").\nProduces(\"Costa Rica\", \"coffee\").\nProduces(\"Papua New Guinea\", \"coffee\").\nProduces(\"Ecuador\", \"coffee\").\nProduces(\"Burundi\", \"coffee\").\nProduces(\"Rwanda\", \"coffee\").\nProduces(\"Haiti\", \"coffee\").\nProduces(\"Congo\", \"coffee\").\nProduces(\"Thailand\", \"coffee\").\nProduces(\"Malawi\", \"coffee\").\nProduces(\"Kenya\", \"coffee\").\nProduces(\"Tanzania\", \"coffee\").\nProduces(\"Madagascar\", \"coffee\").\nProduces(\"Venezuela\", \"coffee\").\nProduces(\"Jamaica\", \"coffee\").\nProduces(\"Paraguay\", \"coffee\").\nProduces(\"Sudan\", \"coffee\").\nProduces(\"Angola\", \"coffee\").\nProduces(\"Mozambique\", \"coffee\").\nProduces(\"Zimbabwe\", \"coffee\").\nProduces(\"China\", \"coffee\").\nProduces(\"Philippines\", \"coffee\").\nProduces(\"Australia\", \"coffee\").\nProduces(\"Argentina\", \"coffee\").\nProduces(\"Bolivia\", \"coffee\").\nProduces(\"Cuba\", \"coffee\").\nProduces(\"Dominican Republic\", \"coffee\").\nProduces(\"Guinea\", \"coffee\").\nProduces(\"Haiti\", \"coffee\").\nProduces(\"Iran\", \"coffee\").\nProduces(\"Ivory Coast\", \"coffee\").\nProduces(\"Jamaica\", \"coffee\").\nProduces(\"Japan\", \"coffee\").\nProduces(\"Malaysia\", \"coffee\").\nProduces(\"Martinique\", \"coffee\").\nProduces(\"New Zealand\", \"coffee\").\nProduces(\"Panama\", \"coffee\").\nProduces(\"Puerto Rico\", \"coffee\").\nProduces(\"Sierra Leone\", \"coffee\").\nProduces(\"South Korea\", \"coffee\").\nProduces(\"Sri Lanka\", \"coffee\").\nProduces(\"Taiwan\", \"coffee\").\nProduces(\"Trinidad and Tobago\", \"coffee\").\nProduces(\"Turkey\", \"coffee\").\nProduces(\"United States\", \"coffee\").\nProduces(\"Uruguay\", \"coffee\").\nProduces(\"Yemen\", \"coffee\").\nProduces(\"Zambia\", \"coffee\").\nProduces(\"Zimbabwe\", \"coffee\").\nProduces(\"Armenia\", \"coffee\").\nProduces(\"Azerbaijan\", \"coffee\").\nProduces(\"Bangladesh\", \"coffee\").\nProduces(\"Belize\", \"coffee\").\nProduces(\"Benin\", \"coffee\").\nProduces(\"Bhutan\", \"co", "completions": [".decl Produces(Country:symbol, Crop:symbol)\nProduces(\"Brazil\", \"coffee\").\nProduces(\"Vietnam\", \"coffee\").\nProduces(\"Ethiopia\", \"coffee\").\nProduces(\"Mexico\", \"coffee\").\nProduces(\"Colombia\", \"coffee\").\nProduces(\"Indonesia\", \"coffee\").\nProduces(\"India\", \"coffee\").\nProduces(\"Guatemala\", \"coffee\").\nProduces(\"Peru\", \"coffee\").\nProduces(\"Honduras\", \"coffee\").\nProduces(\"Nicaragua\", \"coffee\").\nProduces(\"Cameroon\", \"coffee\").\nProduces(\"Uganda\", \"coffee\").\nProduces(\"El Salvador\", \"coffee\").\nProduces(\"Costa Rica\", \"coffee\").\nProduces(\"Papua New Guinea\", \"coffee\").\nProduces(\"Ecuador\", \"coffee\").\nProduces(\"Burundi\", \"coffee\").\nProduces(\"Rwanda\", \"coffee\").\nProduces(\"Haiti\", \"coffee\").\nProduces(\"Congo\", \"coffee\").\nProduces(\"Thailand\", \"coffee\").\nProduces(\"Malawi\", \"coffee\").\nProduces(\"Kenya\", \"coffee\").\nProduces(\"Tanzania\", \"coffee\").\nProduces(\"Madagascar\", \"coffee\").\nProduces(\"Venezuela\", \"coffee\").\nProduces(\"Jamaica\", \"coffee\").\nProduces(\"Paraguay\", \"coffee\").\nProduces(\"Sudan\", \"coffee\").\nProduces(\"Angola\", \"coffee\").\nProduces(\"Mozambique\", \"coffee\").\nProduces(\"Zimbabwe\", \"coffee\").\nProduces(\"China\", \"coffee\").\nProduces(\"Philippines\", \"coffee\").\nProduces(\"Australia\", \"coffee\").\nProduces(\"Argentina\", \"coffee\").\nProduces(\"Bolivia\", \"coffee\").\nProduces(\"Cuba\", \"coffee\").\nProduces(\"Dominican Republic\", \"coffee\").\nProduces(\"Guinea\", \"coffee\").\nProduces(\"Haiti\", \"coffee\").\nProduces(\"Iran\", \"coffee\").\nProduces(\"Ivory Coast\", \"coffee\").\nProduces(\"Jamaica\", \"coffee\").\nProduces(\"Japan\", \"coffee\").\nProduces(\"Malaysia\", \"coffee\").\nProduces(\"Martinique\", \"coffee\").\nProduces(\"New Zealand\", \"coffee\").\nProduces(\"Panama\", \"coffee\").\nProduces(\"Puerto Rico\", \"coffee\").\nProduces(\"Sierra Leone\", \"coffee\").\nProduces(\"South Korea\", \"coffee\").\nProduces(\"Sri Lanka\", \"coffee\").\nProduces(\"Taiwan\", \"coffee\").\nProduces(\"Trinidad and Tobago\", \"coffee\").\nProduces(\"Turkey\", \"coffee\").\nProduces(\"United States\", \"coffee\").\nProduces(\"Uruguay\", \"coffee\").\nProduces(\"Yemen\", \"coffee\").\nProduces(\"Zambia\", \"coffee\").\nProduces(\"Zimbabwe\", \"coffee\").\nProduces(\"Armenia\", \"coffee\").\nProduces(\"Azerbaijan\", \"coffee\").\nProduces(\"Bangladesh\", \"coffee\").\nProduces(\"Belize\", \"coffee\").\nProduces(\"Benin\", \"coffee\").\nProduces(\"Bhutan\", \"co"]}
{"id": 78, "answer": true, "completion": ".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"McDonald's\", \"BLT\").\nServes(\"McDonald's\", \"Big Mac\").\nServes(\"McDonald's\", \"McNuggets\").\nServes(\"McDonald's\", \"McChicken\").\nServes(\"McDonald's\", \"McFish\").\nServes(\"McDonald's\", \"McGriddle\").\nServes(\"McDonald's\", \"McMuffin\").\nServes(\"McDonald's\", \"McFlurry\").\nServes(\"McDonald's\", \"McWraps\").\nServes(\"McDonald's\", \"McRib\").\nServes(\"McDonald's\", \"McDonald's Fries\").\nServes(\"McDonald's\", \"McDonald's Salads\").\nServes(\"McDonald's\", \"McDonald's Breakfast\").\nServes(\"McDonald's\", \"McDonald's Snacks & Sides\").\nServes(\"McDonald's\", \"McDonald's Drinks\").\nServes(\"McDonald's\", \"McDonald's Coffee & McCafe\").\nServes(\"McDonald's\", \"McDonald's Desserts\").\nServes(\"McDonald's\", \"McDonald's Kids' Meals\").\nServes(\"McDonald's\", \"McDonald's Value Picks\").\nServes(\"McDonald's\", \"McDonald's Dollar Menu & More\").\nServes(\"McDonald's\", \"McDonald's McCafe\").\nServes(\"McDonald's\", \"McDonald's McCafe Drinks\").\nServes(\"McDonald's\", \"McDonald's McCafe Bakery\").\nServes(\"McDonald's\", \"McDonald's McCafe Breakfast\").\nServes(\"McDonald's\", \"McDonald's McCafe Lunch\").\nServes(\"McDonald's\", \"McDonald's McCafe Snacks\").\nServes(\"McDonald's\", \"McDonald's McCafe Desserts\").\nServes(\"McDonald's\", \"McDonald's McCafe Beverages\").\nServes(\"McDonald's\", \"McDonald's McCafe Coffee\").\nServes(\"McDonald's\", \"McDonald's McCafe Espresso\").\nServes(\"McDonald's\", \"McDonald's McCafe Frappes & Smoothies\").\nServes(\"McDonald's\", \"McDonald's McCafe Iced & Blended Coffee\").\nServes(\"McDonald's\", \"McDonald's McCafe Hot Chocolate\").\nServes(\"McDonald's\", \"McDonald's McCafe Tea\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Shakes\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Frappes\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Smoothies\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Iced Coffee\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Blended Coffee\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Hot Chocolate\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Tea\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Shakes\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Frappes\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Smoothies\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Iced Coffee\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Blended Coffee\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Hot Chocolate\").\nServes(\"", "completions": [".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"McDonald's\", \"BLT\").\nServes(\"McDonald's\", \"Big Mac\").\nServes(\"McDonald's\", \"McNuggets\").\nServes(\"McDonald's\", \"McChicken\").\nServes(\"McDonald's\", \"McFish\").\nServes(\"McDonald's\", \"McGriddle\").\nServes(\"McDonald's\", \"McMuffin\").\nServes(\"McDonald's\", \"McFlurry\").\nServes(\"McDonald's\", \"McWraps\").\nServes(\"McDonald's\", \"McRib\").\nServes(\"McDonald's\", \"McDonald's Fries\").\nServes(\"McDonald's\", \"McDonald's Salads\").\nServes(\"McDonald's\", \"McDonald's Breakfast\").\nServes(\"McDonald's\", \"McDonald's Snacks & Sides\").\nServes(\"McDonald's\", \"McDonald's Drinks\").\nServes(\"McDonald's\", \"McDonald's Coffee & McCafe\").\nServes(\"McDonald's\", \"McDonald's Desserts\").\nServes(\"McDonald's\", \"McDonald's Kids' Meals\").\nServes(\"McDonald's\", \"McDonald's Value Picks\").\nServes(\"McDonald's\", \"McDonald's Dollar Menu & More\").\nServes(\"McDonald's\", \"McDonald's McCafe\").\nServes(\"McDonald's\", \"McDonald's McCafe Drinks\").\nServes(\"McDonald's\", \"McDonald's McCafe Bakery\").\nServes(\"McDonald's\", \"McDonald's McCafe Breakfast\").\nServes(\"McDonald's\", \"McDonald's McCafe Lunch\").\nServes(\"McDonald's\", \"McDonald's McCafe Snacks\").\nServes(\"McDonald's\", \"McDonald's McCafe Desserts\").\nServes(\"McDonald's\", \"McDonald's McCafe Beverages\").\nServes(\"McDonald's\", \"McDonald's McCafe Coffee\").\nServes(\"McDonald's\", \"McDonald's McCafe Espresso\").\nServes(\"McDonald's\", \"McDonald's McCafe Frappes & Smoothies\").\nServes(\"McDonald's\", \"McDonald's McCafe Iced & Blended Coffee\").\nServes(\"McDonald's\", \"McDonald's McCafe Hot Chocolate\").\nServes(\"McDonald's\", \"McDonald's McCafe Tea\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Shakes\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Frappes\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Smoothies\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Iced Coffee\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Blended Coffee\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Hot Chocolate\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Tea\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Shakes\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Frappes\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Smoothies\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Iced Coffee\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Blended Coffee\").\nServes(\"McDonald's\", \"McDonald's McCafe McCafe Hot Chocolate\").\nServes(\""]}
{"id": 79, "answer": true, "completion": ".decl Weighs(Object:symbol, Weight:float)\nWeighs(\"Statue of Liberty\", 225).\nWeighs(\"largest ship from Voyages of Christopher Columbus\", 2000).\n.decl Answer()\nAnswer() :- Weighs(\"Statue of Liberty\", weight1), Weighs(\"largest ship from Voyages of Christopher Columbus\", weight2), weight1 < weight2.\n.output Answer", "completions": [".decl Weighs(Object:symbol, Weight:float)\nWeighs(\"Statue of Liberty\", 225).\nWeighs(\"largest ship from Voyages of Christopher Columbus\", 2000).\n.decl Answer()\nAnswer() :- Weighs(\"Statue of Liberty\", weight1), Weighs(\"largest ship from Voyages of Christopher Columbus\", weight2), weight1 < weight2.\n.output Answer"]}
{"id": 80, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Jolly Green Giant's largest monument\", 55).\nHas_height(\"Pyrenees\", 3404).\n.decl Answer()\nAnswer() :- Has_height(\"Jolly Green Giant's largest monument\", height1), Has_height(\"Pyrenees\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Jolly Green Giant's largest monument\", 55).\nHas_height(\"Pyrenees\", 3404).\n.decl Answer()\nAnswer() :- Has_height(\"Jolly Green Giant's largest monument\", height1), Has_height(\"Pyrenees\", height2), height1 < height2.\n.output Answer"]}
{"id": 81, "answer": true, "completion": ".decl Influences(Person:symbol, Organization:symbol)\nInfluences(\"Karl Marx\", \"Communist Party of China\").\n.decl Answer()\nAnswer() :- Influences(\"Karl Marx\", \"Communist Party of China\").\n.output Answer", "completions": [".decl Influences(Person:symbol, Organization:symbol)\nInfluences(\"Karl Marx\", \"Communist Party of China\").\n.decl Answer()\nAnswer() :- Influences(\"Karl Marx\", \"Communist Party of China\").\n.output Answer"]}
{"id": 82, "answer": false, "completion": ".decl Uses_for_protein(Product:symbol, Source:symbol)\nUses_for_protein(\"Soylent\", \"Pea\").\n.decl Answer()\nAnswer() :- Uses_for_protein(\"Soylent\", \"Pea\").\n.output Answer\n\n", "completions": [".decl Uses_for_protein(Product:symbol, Source:symbol)\nUses_for_protein(\"Soylent\", \"Pea\").\n.decl Answer()\nAnswer() :- Uses_for_protein(\"Soylent\", \"Pea\").\n.output Answer\n\n"]}
{"id": 83, "answer": true, "completion": ".decl Lives_in(Person:symbol, Province:symbol)\nLives_in(\"person1\", \"Quebec\").\nLives_in(\"person2\", \"Quebec\").\nLives_in(\"person3\", \"Quebec\").\nLives_in(\"person4\", \"Quebec\").\nLives_in(\"person5\", \"Quebec\").\nLives_in(\"person6\", \"Quebec\").\nLives_in(\"person7\", \"Quebec\").\nLives_in(\"person8\", \"Quebec\").\nLives_in(\"person9\", \"Quebec\").\nLives_in(\"person10\", \"Quebec\").\n.decl Is_religious(Person:symbol)\nIs_religious(\"person1\").\nIs_religious(\"person2\").\nIs_religious(\"person3\").\nIs_religious(\"person4\").\nIs_religious(\"person5\").\nIs_religious(\"person6\").\nIs_religious(\"person7\").\nIs_religious(\"person8\").\nIs_religious(\"person9\").\nIs_religious(\"person10\").\n.decl Refers_to(Person:symbol, Book:symbol)\nRefers_to(\"person1\", \"Quran\").\nRefers_to(\"person2\", \"Quran\").\nRefers_to(\"person3\", \"Quran\").\nRefers_to(\"person4\", \"Quran\").\nRefers_to(\"person5\", \"Quran\").\nRefers_to(\"person6\", \"Quran\").\nRefers_to(\"person7\", \"Quran\").\nRefers_to(\"person8\", \"Quran\").\nRefers_to(\"person9\", \"Quran\").\nRefers_to(\"person10\", \"Quran\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Quebec\"), Is_religious(person), Refers_to(person, \"Quran\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Province:symbol)\nLives_in(\"person1\", \"Quebec\").\nLives_in(\"person2\", \"Quebec\").\nLives_in(\"person3\", \"Quebec\").\nLives_in(\"person4\", \"Quebec\").\nLives_in(\"person5\", \"Quebec\").\nLives_in(\"person6\", \"Quebec\").\nLives_in(\"person7\", \"Quebec\").\nLives_in(\"person8\", \"Quebec\").\nLives_in(\"person9\", \"Quebec\").\nLives_in(\"person10\", \"Quebec\").\n.decl Is_religious(Person:symbol)\nIs_religious(\"person1\").\nIs_religious(\"person2\").\nIs_religious(\"person3\").\nIs_religious(\"person4\").\nIs_religious(\"person5\").\nIs_religious(\"person6\").\nIs_religious(\"person7\").\nIs_religious(\"person8\").\nIs_religious(\"person9\").\nIs_religious(\"person10\").\n.decl Refers_to(Person:symbol, Book:symbol)\nRefers_to(\"person1\", \"Quran\").\nRefers_to(\"person2\", \"Quran\").\nRefers_to(\"person3\", \"Quran\").\nRefers_to(\"person4\", \"Quran\").\nRefers_to(\"person5\", \"Quran\").\nRefers_to(\"person6\", \"Quran\").\nRefers_to(\"person7\", \"Quran\").\nRefers_to(\"person8\", \"Quran\").\nRefers_to(\"person9\", \"Quran\").\nRefers_to(\"person10\", \"Quran\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Quebec\"), Is_religious(person), Refers_to(person, \"Quran\").\n.output Answer"]}
{"id": 84, "answer": false, "completion": ".decl Takes_place_in_city(Show:symbol, City:symbol)\nTakes_place_in_city(\"Family Guy\", \"Quahog\").\n.decl Takes_place_in_state(Show:symbol, State:symbol)\nTakes_place_in_state(\"Family Guy\", \"Rhode Island\").\n.decl Takes_place_on_coast(Show:symbol, Coast:symbol)\nTakes_place_on_coast(\"Family Guy\", \"East Coast\").\n.decl Answer()\nAnswer() :- Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\",", "completions": [".decl Takes_place_in_city(Show:symbol, City:symbol)\nTakes_place_in_city(\"Family Guy\", \"Quahog\").\n.decl Takes_place_in_state(Show:symbol, State:symbol)\nTakes_place_in_state(\"Family Guy\", \"Rhode Island\").\n.decl Takes_place_on_coast(Show:symbol, Coast:symbol)\nTakes_place_on_coast(\"Family Guy\", \"East Coast\").\n.decl Answer()\nAnswer() :- Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\", coast), Takes_place_in_state(\"Family Guy\", state), Takes_place_on_coast(\"Family Guy\","]}
{"id": 85, "answer": true, "completion": ".decl Length_unit(Country:symbol, Unit:symbol)\nLength_unit(\"UK\", \"metre\").\nLength_unit(\"USA\", \"foot\").\n.decl Answer()\nAnswer() :- Length_unit(\"UK\", \"metre\").\n.output Answer\n\n", "completions": [".decl Length_unit(Country:symbol, Unit:symbol)\nLength_unit(\"UK\", \"metre\").\nLength_unit(\"USA\", \"foot\").\n.decl Answer()\nAnswer() :- Length_unit(\"UK\", \"metre\").\n.output Answer\n\n"]}
{"id": 86, "answer": false, "completion": ".decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Hundred Years' War\", 116).\n.decl Happened_during(Event:symbol, Event2:symbol)\nHappened_during(\"Hundred Years' War\", \"French Renaissance\").\nHappened_during(\"French Renaissance\", \"French Renaissance\").\n.decl Answer()\nAnswer() :- Happened_during(\"Hundred Years' War\", \"French Renaissance\"), Lasted_for_n_years(\"Hundred Years' War\", n_years1), Lasted_for_n_years(\"French Renaissance\", n_years2), n_years1 >= n_years2.\n.output Answer", "completions": [".decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Hundred Years' War\", 116).\n.decl Happened_during(Event:symbol, Event2:symbol)\nHappened_during(\"Hundred Years' War\", \"French Renaissance\").\nHappened_during(\"French Renaissance\", \"French Renaissance\").\n.decl Answer()\nAnswer() :- Happened_during(\"Hundred Years' War\", \"French Renaissance\"), Lasted_for_n_years(\"Hundred Years' War\", n_years1), Lasted_for_n_years(\"French Renaissance\", n_years2), n_years1 >= n_years2.\n.output Answer"]}
{"id": 87, "answer": false, "completion": ".decl Fights_with(Animal_A:symbol, Animal_B:symbol)\nFights_with(\"gorilla\", \"panda bear\").\n.decl Answer()\nAnswer() :- Fights_with(\"gorilla\", \"panda bear\").\n.output Answer", "completions": [".decl Fights_with(Animal_A:symbol, Animal_B:symbol)\nFights_with(\"gorilla\", \"panda bear\").\n.decl Answer()\nAnswer() :- Fights_with(\"gorilla\", \"panda bear\").\n.output Answer"]}
{"id": 88, "answer": true, "completion": ".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Christina Aguilera\", \"Staten Island\").\n.decl Answer()\nAnswer() :- Born_in(\"Christina Aguilera\", \"Staten Island\").\n.output Answer", "completions": [".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Christina Aguilera\", \"Staten Island\").\n.decl Answer()\nAnswer() :- Born_in(\"Christina Aguilera\", \"Staten Island\").\n.output Answer"]}
{"id": 89, "answer": false, "completion": ".decl Has_letter(Word:symbol, Letter:symbol)\nHas_letter(\"wheel\", \"w\").\nHas_letter(\"wheel\", \"h\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"l\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"f\").\nHas_letter(\"wheel\", \"f\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"t\").\nHas_letter(\"wheel\", \"u\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"b\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"u\").\nHas_letter(\"wheel\", \"s\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"u\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"d\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"f\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"b\").\nHas_letter(\"wheel\", \"i\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"s\").\nHas_letter(\"wheel\", \"p\").\nHas_letter(\"wheel\", \"i\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"w\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"d\").\nHas_letter(\"wheel\", \"s\").\nHas_letter(\"wheel\", \"p\").\nHas_letter(\"wheel\", \"i\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"w\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"d\").\nHas_letter(\"wheel\", \"s\").\nHas_letter(\"wheel\", \"p\").\nHas_letter(\"wheel\", \"i\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"w\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"d\").\nHas_letter(\"wheel\", \"s\").\nHas_letter(\"wheel\", \"p\").\nHas_letter(\"wheel\", \"i\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"w\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"d\").\nHas_letter(\"wheel\", \"s\").\nHas_letter(\"wheel\", \"p\").\nHas_letter(\"wheel\", \"i\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"w\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"d\").\nHas_letter(\"wheel\", \"s\").\nHas_letter", "completions": [".decl Has_letter(Word:symbol, Letter:symbol)\nHas_letter(\"wheel\", \"w\").\nHas_letter(\"wheel\", \"h\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"l\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"f\").\nHas_letter(\"wheel\", \"f\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"t\").\nHas_letter(\"wheel\", \"u\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"b\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"u\").\nHas_letter(\"wheel\", \"s\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"u\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"d\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"f\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"b\").\nHas_letter(\"wheel\", \"i\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"s\").\nHas_letter(\"wheel\", \"p\").\nHas_letter(\"wheel\", \"i\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"w\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"d\").\nHas_letter(\"wheel\", \"s\").\nHas_letter(\"wheel\", \"p\").\nHas_letter(\"wheel\", \"i\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"w\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"d\").\nHas_letter(\"wheel\", \"s\").\nHas_letter(\"wheel\", \"p\").\nHas_letter(\"wheel\", \"i\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"w\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"d\").\nHas_letter(\"wheel\", \"s\").\nHas_letter(\"wheel\", \"p\").\nHas_letter(\"wheel\", \"i\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"w\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"d\").\nHas_letter(\"wheel\", \"s\").\nHas_letter(\"wheel\", \"p\").\nHas_letter(\"wheel\", \"i\").\nHas_letter(\"wheel\", \"n\").\nHas_letter(\"wheel\", \"e\").\nHas_letter(\"wheel\", \"w\").\nHas_letter(\"wheel\", \"o\").\nHas_letter(\"wheel\", \"r\").\nHas_letter(\"wheel\", \"d\").\nHas_letter(\"wheel\", \"s\").\nHas_letter"]}
{"id": 90, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"quarter\", 0.000929).\nHas_volume(\"human kidney\", 0.0012).\n.decl Answer()\nAnswer() :- Has_volume(\"quarter\", volume1), Has_volume(\"human kidney\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"quarter\", 0.000929).\nHas_volume(\"human kidney\", 0.0012).\n.decl Answer()\nAnswer() :- Has_volume(\"quarter\", volume1), Has_volume(\"human kidney\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 91, "answer": false, "completion": ".decl Can_locate(Telescope:symbol, Planet:symbol)\nCan_locate(\"James Webb Space Telescope\", \"Krypton\").\n.decl Answer()\nAnswer() :- Can_locate(\"James Webb Space Telescope\", \"Krypton\").\n.output Answer", "completions": [".decl Can_locate(Telescope:symbol, Planet:symbol)\nCan_locate(\"James Webb Space Telescope\", \"Krypton\").\n.decl Answer()\nAnswer() :- Can_locate(\"James Webb Space Telescope\", \"Krypton\").\n.output Answer"]}
{"id": 92, "answer": true, "completion": ".decl Has_favorite_book(Person:symbol, Book:symbol)\nHas_favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.decl Answer()\nAnswer() :- Has_favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.output Answer", "completions": [".decl Has_favorite_book(Person:symbol, Book:symbol)\nHas_favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.decl Answer()\nAnswer() :- Has_favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\").\n.output Answer"]}
{"id": 93, "answer": true, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 94, "answer": true, "completion": ".decl Reads(Person:symbol, Newspaper:symbol)\nReads(\"William Shaespeare\", \"Daily Mirror\").\n.decl Answer()\nAnswer() :- Reads(\"William Shaespeare\", \"Daily Mirror\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Newspaper:symbol)\nReads(\"William Shaespeare\", \"Daily Mirror\").\n.decl Answer()\nAnswer() :- Reads(\"William Shaespeare\", \"Daily Mirror\").\n.output Answer"]}
{"id": 95, "answer": true, "completion": ".decl Has_n_people(Place:symbol, N_people:float)\nHas_n_people(\"Taco Bell\", 50).\nHas_n_people(\"Roy Rogers\", 30).\n.decl Answer()\nAnswer() :- Has_n_people(\"Taco Bell\", n_people1), Has_n_people(\"Roy Rogers\", n_people2), n_people1 > n_people2.\n.output Answer", "completions": [".decl Has_n_people(Place:symbol, N_people:float)\nHas_n_people(\"Taco Bell\", 50).\nHas_n_people(\"Roy Rogers\", 30).\n.decl Answer()\nAnswer() :- Has_n_people(\"Taco Bell\", n_people1), Has_n_people(\"Roy Rogers\", n_people2), n_people1 > n_people2.\n.output Answer"]}
{"id": 96, "answer": false, "completion": ".decl Happens_in_temperature(Event:symbol, Temperature:symbol)\nHappens_in_temperature(\"sandals\", \"warm\").\nHappens_in_temperature(\"sandals\", \"cool\").\nHappens_in_temperature(\"sandals\", \"cold\").\nHappens_in_temperature(\"sandals\", \"hot\").\nHappens_in_temperature(\"sandals\", \"freezing\").\nHappens_in_temperature(\"sandals\", \"boiling\").\nHappens_in_temperature(\"sandals\", \"mild\").\nHappens_in_temperature(\"sandals\", \"moderate\").\nHappens_in_temperature(\"sandals\", \"severe\").\nHappens_in_temperature(\"sandals\", \"extreme\").\nHappens_in_temperature(\"sandals\", \"tropical\").\nHappens_in_temperature(\"sandals\", \"arctic\").\nHappens_in_temperature(\"sandals\", \"subarctic\").\nHappens_in_temperature(\"sandals\", \"subtropical\").\nHappens_in_temperature(\"sandals\", \"subantarctic\").\nHappens_in_temperature(\"sandals\", \"subfreezing\").\nHappens_in_temperature(\"sandals\", \"subboiling\").\nHappens_in_temperature(\"sandals\", \"submild\").\nHappens_in_temperature(\"sandals\", \"submoderate\").\nHappens_in_temperature(\"sandals\", \"subsevere\").\nHappens_in_temperature(\"sandals\", \"subeextreme\").\nHappens_in_temperature(\"sandals\", \"subtropical\").\nHappens_in_temperature(\"sandals\", \"subarctic\").\nHappens_in_temperature(\"sandals\", \"subsubarctic\").\nHappens_in_temperature(\"sandals\", \"subsubtropical\").\nHappens_in_temperature(\"sandals\", \"subsubantarctic\").\nHappens_in_temperature(\"sandals\", \"subsubfreezing\").\nHappens_in_temperature(\"sandals\", \"subsubboiling\").\nHappens_in_temperature(\"sandals\", \"subsubmild\").\nHappens_in_temperature(\"sandals\", \"subsubmoderate\").\nHappens_in_temperature(\"sandals\", \"subsubsevere\").\nHappens_in_temperature(\"sandals\", \"subsubeextreme\").\nHappens_in_temperature(\"sandals\", \"subsubtropical\").\nHappens_in_temperature(\"sandals\", \"subsubarctic\").\nHappens_in_temperature(\"sandals\", \"subsubsubarctic\").\nHappens_in_temperature(\"sandals\", \"subsubsubtropical\").\nHappens_in_temperature(\"sandals\", \"subsubsubantarctic\").\nHappens_in_temperature(\"sandals\", \"subsubsubfreezing\").\nHappens_in_temperature(\"sandals\", \"subsubsubboiling\").\nHappens_in_temperature(\"sandals\", \"subsubsubmild\").\nHappens_in_temperature(\"sandals\", \"subsubsubmoderate\").\nHappens_in_temperature(\"sandals\", \"subsubsubsevere\").\nHappens_in_temperature(\"sandals\", \"subsubsubeextreme", "completions": [".decl Happens_in_temperature(Event:symbol, Temperature:symbol)\nHappens_in_temperature(\"sandals\", \"warm\").\nHappens_in_temperature(\"sandals\", \"cool\").\nHappens_in_temperature(\"sandals\", \"cold\").\nHappens_in_temperature(\"sandals\", \"hot\").\nHappens_in_temperature(\"sandals\", \"freezing\").\nHappens_in_temperature(\"sandals\", \"boiling\").\nHappens_in_temperature(\"sandals\", \"mild\").\nHappens_in_temperature(\"sandals\", \"moderate\").\nHappens_in_temperature(\"sandals\", \"severe\").\nHappens_in_temperature(\"sandals\", \"extreme\").\nHappens_in_temperature(\"sandals\", \"tropical\").\nHappens_in_temperature(\"sandals\", \"arctic\").\nHappens_in_temperature(\"sandals\", \"subarctic\").\nHappens_in_temperature(\"sandals\", \"subtropical\").\nHappens_in_temperature(\"sandals\", \"subantarctic\").\nHappens_in_temperature(\"sandals\", \"subfreezing\").\nHappens_in_temperature(\"sandals\", \"subboiling\").\nHappens_in_temperature(\"sandals\", \"submild\").\nHappens_in_temperature(\"sandals\", \"submoderate\").\nHappens_in_temperature(\"sandals\", \"subsevere\").\nHappens_in_temperature(\"sandals\", \"subeextreme\").\nHappens_in_temperature(\"sandals\", \"subtropical\").\nHappens_in_temperature(\"sandals\", \"subarctic\").\nHappens_in_temperature(\"sandals\", \"subsubarctic\").\nHappens_in_temperature(\"sandals\", \"subsubtropical\").\nHappens_in_temperature(\"sandals\", \"subsubantarctic\").\nHappens_in_temperature(\"sandals\", \"subsubfreezing\").\nHappens_in_temperature(\"sandals\", \"subsubboiling\").\nHappens_in_temperature(\"sandals\", \"subsubmild\").\nHappens_in_temperature(\"sandals\", \"subsubmoderate\").\nHappens_in_temperature(\"sandals\", \"subsubsevere\").\nHappens_in_temperature(\"sandals\", \"subsubeextreme\").\nHappens_in_temperature(\"sandals\", \"subsubtropical\").\nHappens_in_temperature(\"sandals\", \"subsubarctic\").\nHappens_in_temperature(\"sandals\", \"subsubsubarctic\").\nHappens_in_temperature(\"sandals\", \"subsubsubtropical\").\nHappens_in_temperature(\"sandals\", \"subsubsubantarctic\").\nHappens_in_temperature(\"sandals\", \"subsubsubfreezing\").\nHappens_in_temperature(\"sandals\", \"subsubsubboiling\").\nHappens_in_temperature(\"sandals\", \"subsubsubmild\").\nHappens_in_temperature(\"sandals\", \"subsubsubmoderate\").\nHappens_in_temperature(\"sandals\", \"subsubsubsevere\").\nHappens_in_temperature(\"sandals\", \"subsubsubeextreme"]}
{"id": 97, "answer": true, "completion": ".decl Is_home_country(Person:symbol, Country:symbol)\nIs_home_country(\"Nikola Tesla\", \"Serbia\").\n.decl Involved_in_war(Country:symbol, War:symbol)\nInvolved_in_war(\"Serbia\", \"American Civil War\").\n.decl Answer()\nAnswer() :- Is_home_country(\"Nikola Tesla\", country), Involved_in_war(country, \"American Civil War\").\n.output Answer", "completions": [".decl Is_home_country(Person:symbol, Country:symbol)\nIs_home_country(\"Nikola Tesla\", \"Serbia\").\n.decl Involved_in_war(Country:symbol, War:symbol)\nInvolved_in_war(\"Serbia\", \"American Civil War\").\n.decl Answer()\nAnswer() :- Is_home_country(\"Nikola Tesla\", country), Involved_in_war(country, \"American Civil War\").\n.output Answer"]}
{"id": 98, "answer": true, "completion": ".decl Died_at_age(Person:symbol, Age:float)\nDied_at_age(\"Ada Lovelace\", 36).\n.decl Average_lifespan(Era:symbol, Average_age:float)\nAverage_lifespan(\"Victorian era\", 41).\n.decl Answer()\nAnswer() :- Died_at_age(\"Ada Lovelace\", age), Average_lifespan(\"Victorian era\", average_age), age < average_age.\n.output Answer", "completions": [".decl Died_at_age(Person:symbol, Age:float)\nDied_at_age(\"Ada Lovelace\", 36).\n.decl Average_lifespan(Era:symbol, Average_age:float)\nAverage_lifespan(\"Victorian era\", 41).\n.decl Answer()\nAnswer() :- Died_at_age(\"Ada Lovelace\", age), Average_lifespan(\"Victorian era\", average_age), age < average_age.\n.output Answer"]}
{"id": 99, "answer": true, "completion": ".decl Can_use_chopsticks(Animal:symbol)\nCan_use_chopsticks(\"Asian black bear\").\n.decl Answer()\nAnswer() :- Can_use_chopsticks(\"Asian black bear\").\n.output Answer", "completions": [".decl Can_use_chopsticks(Animal:symbol)\nCan_use_chopsticks(\"Asian black bear\").\n.decl Answer()\nAnswer() :- Can_use_chopsticks(\"Asian black bear\").\n.output Answer"]}
{"id": 100, "answer": true, "completion": ".decl Sells(Person:symbol, Item:symbol)\nSells(\"Toronto Star\", \"time\").\n.decl Answer()\nAnswer() :- Sells(\"Toronto Star\", \"time\").\n.output Answer", "completions": [".decl Sells(Person:symbol, Item:symbol)\nSells(\"Toronto Star\", \"time\").\n.decl Answer()\nAnswer() :- Sells(\"Toronto Star\", \"time\").\n.output Answer"]}
{"id": 101, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Apollo 13 mission\", 1970).\nHappens_in_year(\"Apollo 1 mission\", 1967).\nHappens_in_year(\"Apollo 11 mission\", 1969).\n.decl Has_deaths(Event:symbol, Deaths:float)\nHas_deaths(\"Apollo 13 mission\", 0).\nHas_deaths(\"Apollo 1 mission\", 3).\nHas_deaths(\"Apollo 11 mission\", 0).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Apollo 13 mission\", year1), Happens_in_year(\"Apollo 1 mission\", year2), Happens_in_year(\"Apollo 11 mission\", year3), Has_deaths(\"Apollo 13 mission\", deaths1), Has_deaths(\"Apollo 1 mission\", deaths2), Has_deaths(\"Apollo 11 mission\", deaths3), year1 > year2, year1 > year3, deaths1 < deaths2, deaths1 < deaths3.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Apollo 13 mission\", 1970).\nHappens_in_year(\"Apollo 1 mission\", 1967).\nHappens_in_year(\"Apollo 11 mission\", 1969).\n.decl Has_deaths(Event:symbol, Deaths:float)\nHas_deaths(\"Apollo 13 mission\", 0).\nHas_deaths(\"Apollo 1 mission\", 3).\nHas_deaths(\"Apollo 11 mission\", 0).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Apollo 13 mission\", year1), Happens_in_year(\"Apollo 1 mission\", year2), Happens_in_year(\"Apollo 11 mission\", year3), Has_deaths(\"Apollo 13 mission\", deaths1), Has_deaths(\"Apollo 1 mission\", deaths2), Has_deaths(\"Apollo 11 mission\", deaths3), year1 > year2, year1 > year3, deaths1 < deaths2, deaths1 < deaths3.\n.output Answer"]}
{"id": 102, "answer": false, "completion": ".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"Taco Bell\", \"taco\").\nServes(\"Taco Bell\", \"burrito\").\nServes(\"Taco Bell\", \"quesadilla\").\n.decl Contains(Dish:symbol, Ingredient:symbol)\nContains(\"taco\", \"tortilla\").\nContains(\"taco\", \"meat\").\nContains(\"taco\", \"cheese\").\nContains(\"taco\", \"lettuce\").\nContains(\"taco\", \"salsa\").\nContains(\"burrito\", \"tortilla\").\nContains(\"burrito\", \"meat\").\nContains(\"burrito\", \"cheese\").\nContains(\"burrito\", \"lettuce\").\nContains(\"burrito\", \"salsa\").\nContains(\"quesadilla\", \"tortilla\").\nContains(\"quesadilla\", \"meat\").\nContains(\"quesadilla\", \"cheese\").\nContains(\"quesadilla\", \"lettuce\").\nContains(\"quesadilla\", \"salsa\").\n.decl Answer()\nAnswer() :- Serves(\"Taco Bell\", dish), Contains(dish, \"injera\").\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"Taco Bell\", \"taco\").\nServes(\"Taco Bell\", \"burrito\").\nServes(\"Taco Bell\", \"quesadilla\").\n.decl Contains(Dish:symbol, Ingredient:symbol)\nContains(\"taco\", \"tortilla\").\nContains(\"taco\", \"meat\").\nContains(\"taco\", \"cheese\").\nContains(\"taco\", \"lettuce\").\nContains(\"taco\", \"salsa\").\nContains(\"burrito\", \"tortilla\").\nContains(\"burrito\", \"meat\").\nContains(\"burrito\", \"cheese\").\nContains(\"burrito\", \"lettuce\").\nContains(\"burrito\", \"salsa\").\nContains(\"quesadilla\", \"tortilla\").\nContains(\"quesadilla\", \"meat\").\nContains(\"quesadilla\", \"cheese\").\nContains(\"quesadilla\", \"lettuce\").\nContains(\"quesadilla\", \"salsa\").\n.decl Answer()\nAnswer() :- Serves(\"Taco Bell\", dish), Contains(dish, \"injera\").\n.output Answer"]}
{"id": 103, "answer": false, "completion": ".decl Is_hypothetically_unimportant(Xenophobia:symbol)\nIs_hypothetically_unimportant(\"unimportant\").\n.decl Answer()\nAnswer() :- Is_hypothetically_unimportant(xenophobia), Saladin != Ali_Askari.\n.output Answer", "completions": [".decl Is_hypothetically_unimportant(Xenophobia:symbol)\nIs_hypothetically_unimportant(\"unimportant\").\n.decl Answer()\nAnswer() :- Is_hypothetically_unimportant(xenophobia), Saladin != Ali_Askari.\n.output Answer"]}
{"id": 104, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Food:symbol)\nEats(\"Sockington\", \"onions\").\n.decl Answer()\nAnswer() :- Eats(\"Sockington\", \"onions\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Food:symbol)\nEats(\"Sockington\", \"onions\").\n.decl Answer()\nAnswer() :- Eats(\"Sockington\", \"onions\").\n.output Answer"]}
{"id": 105, "answer": true, "completion": ".decl Lives_in_country(Person:symbol, Country:symbol)\nLives_in_country(\"Raphael\", \"Italy\").\n.decl Influenced_by_country(Person:symbol, Country:symbol)\nInfluenced_by_country(\"Raphael\", \"Italy\").\n.decl Answer()\nAnswer() :- Lives_in_country(\"Raphael\", country1), Influenced_by_country(\"Raphael\", country2), country1 = country2.\n.output Answer", "completions": [".decl Lives_in_country(Person:symbol, Country:symbol)\nLives_in_country(\"Raphael\", \"Italy\").\n.decl Influenced_by_country(Person:symbol, Country:symbol)\nInfluenced_by_country(\"Raphael\", \"Italy\").\n.decl Answer()\nAnswer() :- Lives_in_country(\"Raphael\", country1), Influenced_by_country(\"Raphael\", country2), country1 = country2.\n.output Answer"]}
{"id": 106, "answer": false, "completion": ".decl Can_operate(Person:symbol, Vehicle:symbol)\nCan_operate(\"Oscar Wilde\", \"horse-drawn carriage\").\n.decl Answer()\nAnswer() :- Can_operate(\"Oscar Wilde\", \"motor vehicle\").\n.output Answer", "completions": [".decl Can_operate(Person:symbol, Vehicle:symbol)\nCan_operate(\"Oscar Wilde\", \"horse-drawn carriage\").\n.decl Answer()\nAnswer() :- Can_operate(\"Oscar Wilde\", \"motor vehicle\").\n.output Answer"]}
{"id": 107, "answer": true, "completion": ".decl Requires(Operation:symbol, Instrument:symbol)\nRequires(\"ontology\", \"scalpel\").\n.decl Answer()\nAnswer() :- Requires(\"ontology\", \"scalpel\").\n.output Answer", "completions": [".decl Requires(Operation:symbol, Instrument:symbol)\nRequires(\"ontology\", \"scalpel\").\n.decl Answer()\nAnswer() :- Requires(\"ontology\", \"scalpel\").\n.output Answer"]}
{"id": 108, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"beheading of Anne Boleyn\", 1536).\nHappens_in_year(\"King Arthur\", 542).\n.decl Answer()\nAnswer() :- Happens_in_year(\"beheading of Anne Boleyn\", year1), Happens_in_year(\"King Arthur\", year2), year1 != year2.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"beheading of Anne Boleyn\", 1536).\nHappens_in_year(\"King Arthur\", 542).\n.decl Answer()\nAnswer() :- Happens_in_year(\"beheading of Anne Boleyn\", year1), Happens_in_year(\"King Arthur\", year2), year1 != year2.\n.output Answer"]}
{"id": 109, "answer": true, "completion": ".decl Supports(Person:symbol, Cause:symbol)\nSupports(\"Alexander Graham Bell\", \"eugenics\").\n.decl Answer()\nAnswer() :- Supports(\"Alexander Graham Bell\", \"eugenics\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Cause:symbol)\nSupports(\"Alexander Graham Bell\", \"eugenics\").\n.decl Answer()\nAnswer() :- Supports(\"Alexander Graham Bell\", \"eugenics\").\n.output Answer"]}
{"id": 110, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Harry Truman's presidency\", 7).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"twenty-third Amendment to the US Constitution\", 23).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"twenty-third Amendment to the US Constitution\", n_years1), Last_n_years(\"Harry Truman's presidency\", n_years2), n_years1 > n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Harry Truman's presidency\", 7).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"twenty-third Amendment to the US Constitution\", 23).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"twenty-third Amendment to the US Constitution\", n_years1), Last_n_years(\"Harry Truman's presidency\", n_years2), n_years1 > n_years2.\n.output Answer"]}
{"id": 111, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"trees changing colors\", \"fall\").\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"trees changing colors\", \"September\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"trees changing colors\", season), Happens_in_month(\"trees changing colors\", month), In_season(month, season).\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"trees changing colors\", \"fall\").\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"trees changing colors\", \"September\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"trees changing colors\", season), Happens_in_month(\"trees changing colors\", month), In_season(month, season).\n.output Answer"]}
{"id": 112, "answer": false, "completion": ".decl Has_molecule(Organization:symbol, Molecule:symbol)\nHas_molecule(\"Black Lives Matter\", \"capsaicin\").\n.decl Answer()\nAnswer() :- Has_molecule(\"Black Lives Matter\", \"capsaicin\").\n.output Answer", "completions": [".decl Has_molecule(Organization:symbol, Molecule:symbol)\nHas_molecule(\"Black Lives Matter\", \"capsaicin\").\n.decl Answer()\nAnswer() :- Has_molecule(\"Black Lives Matter\", \"capsaicin\").\n.output Answer"]}
{"id": 113, "answer": false, "completion": ".decl Is_ancestor(Ancestor:symbol, Descendent:symbol)\nIs_ancestor(\"Gaia\", \"Zeus\").\nIs_ancestor(\"Zeus\", \"Achilles\").\n.decl Answer()\nAnswer() :- Is_ancestor(\"Gaia\", \"Achilles\").\n.output Answer\n\n", "completions": [".decl Is_ancestor(Ancestor:symbol, Descendent:symbol)\nIs_ancestor(\"Gaia\", \"Zeus\").\nIs_ancestor(\"Zeus\", \"Achilles\").\n.decl Answer()\nAnswer() :- Is_ancestor(\"Gaia\", \"Achilles\").\n.output Answer\n\n"]}
{"id": 114, "answer": false, "completion": ".decl Hangs_out_at(Person:symbol, Place:symbol)\nHangs_out_at(\"Jerry Seinfeld\", \"Tom's Restaurant\").\nHangs_out_at(\"Jerry Seinfeld\", \"Monk's Café\").\nHangs_out_at(\"Jerry Seinfeld\", \"Central Perk\").\n.decl Answer()\nAnswer() :- Hangs_out_at(\"Jerry Seinfeld\", \"Budweiser Party Deck\").\n.output Answer", "completions": [".decl Hangs_out_at(Person:symbol, Place:symbol)\nHangs_out_at(\"Jerry Seinfeld\", \"Tom's Restaurant\").\nHangs_out_at(\"Jerry Seinfeld\", \"Monk's Café\").\nHangs_out_at(\"Jerry Seinfeld\", \"Central Perk\").\n.decl Answer()\nAnswer() :- Hangs_out_at(\"Jerry Seinfeld\", \"Budweiser Party Deck\").\n.output Answer"]}
{"id": 115, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"basketball\", 0.0005).\nHas_volume(\"sand cat's ear\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"basketball\", volume1), Has_volume(\"sand cat's ear\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"basketball\", 0.0005).\nHas_volume(\"sand cat's ear\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"basketball\", volume1), Has_volume(\"sand cat's ear\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 116, "answer": true, "completion": ".decl Has_members(Group:symbol, Member:symbol)\nHas_members(\"Spice Girls\", \"Geri Halliwell\").\nHas_members(\"Spice Girls\", \"Melanie B\").\nHas_members(\"Spice Girls\", \"Melanie C\").\nHas_members(\"Spice Girls\", \"Emma Bunton\").\nHas_members(\"Spice Girls\", \"Victoria Beckham\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Dokic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Djokic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radovic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"", "completions": [".decl Has_members(Group:symbol, Member:symbol)\nHas_members(\"Spice Girls\", \"Geri Halliwell\").\nHas_members(\"Spice Girls\", \"Melanie B\").\nHas_members(\"Spice Girls\", \"Melanie C\").\nHas_members(\"Spice Girls\", \"Emma Bunton\").\nHas_members(\"Spice Girls\", \"Victoria Beckham\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Dokic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Djokic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radovic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\"ŽRK Kumanovo\", \"Ana Radosavljevic\").\nHas_members(\""]}
{"id": 117, "answer": false, "completion": ".decl Has_use(Symbol:symbol, Use:symbol)\nHas_use(\"swastika\", \"positive\").\nHas_use(\"swastika\", \"negative\").\n.decl Answer()\nAnswer() :- Has_use(\"swastika\", use), use = \"positive\".\n.output Answer", "completions": [".decl Has_use(Symbol:symbol, Use:symbol)\nHas_use(\"swastika\", \"positive\").\nHas_use(\"swastika\", \"negative\").\n.decl Answer()\nAnswer() :- Has_use(\"swastika\", use), use = \"positive\".\n.output Answer"]}
{"id": 118, "answer": true, "completion": ".decl Appeared_in(Actor:symbol, Film:symbol)\nAppeared_in(\"Jeff Goldblum\", \"The Fly\").\n.decl Appeared_in(Insect:symbol, Film:symbol)\nAppeared_in(\"black fly\", \"The Fly\").\n.decl Appeared_in(Insect:symbol, Film:symbol)\nAppeared_in(\"housefly\", \"The Fly\").\n.decl Answer()\nAnswer() :- Appeared_in(\"Jeff Goldblum\", \"The Fly\"), Appeared_in(\"black fly\", \"The Fly\"), Appeared_in(insect, \"The Fly\"), insect != \"black fly\".\n.output Answer", "completions": [".decl Appeared_in(Actor:symbol, Film:symbol)\nAppeared_in(\"Jeff Goldblum\", \"The Fly\").\n.decl Appeared_in(Insect:symbol, Film:symbol)\nAppeared_in(\"black fly\", \"The Fly\").\n.decl Appeared_in(Insect:symbol, Film:symbol)\nAppeared_in(\"housefly\", \"The Fly\").\n.decl Answer()\nAnswer() :- Appeared_in(\"Jeff Goldblum\", \"The Fly\"), Appeared_in(\"black fly\", \"The Fly\"), Appeared_in(insect, \"The Fly\"), insect != \"black fly\".\n.output Answer"]}
{"id": 119, "answer": true, "completion": ".decl Edits(Person:symbol, Document:symbol)\nEdits(\"Linnaeus\", \"Darwin's draft of Origin of Species\").\n.decl Answer()\nAnswer() :- Edits(\"Linnaeus\", \"Darwin's draft of Origin of Species\").\n.output Answer", "completions": [".decl Edits(Person:symbol, Document:symbol)\nEdits(\"Linnaeus\", \"Darwin's draft of Origin of Species\").\n.decl Answer()\nAnswer() :- Edits(\"Linnaeus\", \"Darwin's draft of Origin of Species\").\n.output Answer"]}
{"id": 120, "answer": true, "completion": ".decl Has_cancer(Person:symbol)\nHas_cancer(\"John\").\nHas_cancer(\"Mary\").\n.decl Has_disability(Person:symbol)\nHas_disability(\"John\").\n.decl Answer()\nAnswer() :- Has_cancer(person), Has_disability(person).\n.output Answer", "completions": [".decl Has_cancer(Person:symbol)\nHas_cancer(\"John\").\nHas_cancer(\"Mary\").\n.decl Has_disability(Person:symbol)\nHas_disability(\"John\").\n.decl Answer()\nAnswer() :- Has_cancer(person), Has_disability(person).\n.output Answer"]}
{"id": 121, "answer": true, "completion": ".decl Died(Person:symbol, Year:float)\nDied(\"Helen Palmer\", 1967).\n.decl Wrote(Person:symbol, Book:symbol, Year:float)\nWrote(\"Dr. Seuss\", \"The Cat in the Hat\", 1957).\nWrote(\"Dr. Seuss\", \"How the Grinch Stole Christmas!\", 1957).\nWrote(\"Dr. Seuss\", \"Green Eggs and Ham\", 1960).\nWrote(\"Dr. Seuss\", \"One Fish Two Fish Red Fish Blue Fish\", 1960).\nWrote(\"Dr. Seuss\", \"The Sneetches and Other Stories\", 1961).\nWrote(\"Dr. Seuss\", \"Dr. Seuss's Sleep Book\", 1962).\nWrote(\"Dr. Seuss\", \"Bartholomew and the Oobleck\", 1949).\nWrote(\"Dr. Seuss\", \"Yertle the Turtle and Other Stories\", 1958).\nWrote(\"Dr. Seuss\", \"Horton Hears a Who!\", 1954).\nWrote(\"Dr. Seuss\", \"The 500 Hats of Bartholomew Cubbins\", 1938).\nWrote(\"Dr. Seuss\", \"The Lorax\", 1971).\nWrote(\"Dr. Seuss\", \"The King's Stilts\", 1939).\nWrote(\"Dr. Seuss\", \"The Butter Battle Book\", 1984).\nWrote(\"Dr. Seuss\", \"The Cat's Quizzer\", 1976).\nWrote(\"Dr. Seuss\", \"There's a Wocket in My Pocket!\", 1974).\nWrote(\"Dr. Seuss\", \"I Had Trouble in Getting to Solla Sollew\", 1965).\nWrote(\"Dr. Seuss\", \"Oh, the Places You'll Go!\", 1990).\nWrote(\"Dr. Seuss\", \"Fox in Socks\", 1965).\nWrote(\"Dr. Seuss\", \"I Can Read with My Eyes Shut!\", 1978).\nWrote(\"Dr. Seuss\", \"And to Think That I Saw It on Mulberry Street\", 1937).\nWrote(\"Dr. Seuss\", \"The Many Mice of Mr. Brice\", 1939).\nWrote(\"Dr. Seuss\", \"McElligot's Pool\", 1947).\nWrote(\"Dr. Seuss\", \"On Beyond Zebra!\", 1955).\nWrote(\"Dr. Seuss\", \"If I Ran the Zoo\", 1950).\nWrote(\"Dr. Seuss\", \"The Foot Book\", 1968).\nWrote(\"Dr. Seuss\", \"Thidwick the Big-Hearted Moose\", 1948).\nWrote(\"Dr. Seuss\", \"Scrambled Eggs Super!\", 1953).\nWrote(\"Dr. Seuss\", \"The Shape of Me and Other Stuff\", 1973).\nWrote(\"Dr. Seuss\", \"Marvin K. Mooney Will You Please Go Now!\", 1972).\nWrote(\"Dr. Seuss\", \"The Bippolo Seed and Other Lost Stories\", 2011).\nWrote(\"Dr. Seuss\", \"The Tooth Book\", 1962).\nWrote(\"Dr. Seuss\", \"Great Day for Up!\", 1974).\nWrote(\"Dr. Seuss\", \"Hop on Pop\", 1963).\nWrote(\"Dr. Seuss\", \"Mr. Brown Can Moo! Can You?\", 1970).\nWrote(\"Dr. Seuss\", \"My Many Colored Days\", 1996).\nWrote(\"Dr. Seuss\", \"The Eye Book\", 1968).\nWrote(\"Dr. Seuss\", \"Gertrude McFuzz\", 1971).\nWrote(\"Dr. Seuss\", \"The Zax\", 1971).\nWrote(\"Dr. Seuss\", \"The Sneeches and Other Stories\", 1961).\nW", "completions": [".decl Died(Person:symbol, Year:float)\nDied(\"Helen Palmer\", 1967).\n.decl Wrote(Person:symbol, Book:symbol, Year:float)\nWrote(\"Dr. Seuss\", \"The Cat in the Hat\", 1957).\nWrote(\"Dr. Seuss\", \"How the Grinch Stole Christmas!\", 1957).\nWrote(\"Dr. Seuss\", \"Green Eggs and Ham\", 1960).\nWrote(\"Dr. Seuss\", \"One Fish Two Fish Red Fish Blue Fish\", 1960).\nWrote(\"Dr. Seuss\", \"The Sneetches and Other Stories\", 1961).\nWrote(\"Dr. Seuss\", \"Dr. Seuss's Sleep Book\", 1962).\nWrote(\"Dr. Seuss\", \"Bartholomew and the Oobleck\", 1949).\nWrote(\"Dr. Seuss\", \"Yertle the Turtle and Other Stories\", 1958).\nWrote(\"Dr. Seuss\", \"Horton Hears a Who!\", 1954).\nWrote(\"Dr. Seuss\", \"The 500 Hats of Bartholomew Cubbins\", 1938).\nWrote(\"Dr. Seuss\", \"The Lorax\", 1971).\nWrote(\"Dr. Seuss\", \"The King's Stilts\", 1939).\nWrote(\"Dr. Seuss\", \"The Butter Battle Book\", 1984).\nWrote(\"Dr. Seuss\", \"The Cat's Quizzer\", 1976).\nWrote(\"Dr. Seuss\", \"There's a Wocket in My Pocket!\", 1974).\nWrote(\"Dr. Seuss\", \"I Had Trouble in Getting to Solla Sollew\", 1965).\nWrote(\"Dr. Seuss\", \"Oh, the Places You'll Go!\", 1990).\nWrote(\"Dr. Seuss\", \"Fox in Socks\", 1965).\nWrote(\"Dr. Seuss\", \"I Can Read with My Eyes Shut!\", 1978).\nWrote(\"Dr. Seuss\", \"And to Think That I Saw It on Mulberry Street\", 1937).\nWrote(\"Dr. Seuss\", \"The Many Mice of Mr. Brice\", 1939).\nWrote(\"Dr. Seuss\", \"McElligot's Pool\", 1947).\nWrote(\"Dr. Seuss\", \"On Beyond Zebra!\", 1955).\nWrote(\"Dr. Seuss\", \"If I Ran the Zoo\", 1950).\nWrote(\"Dr. Seuss\", \"The Foot Book\", 1968).\nWrote(\"Dr. Seuss\", \"Thidwick the Big-Hearted Moose\", 1948).\nWrote(\"Dr. Seuss\", \"Scrambled Eggs Super!\", 1953).\nWrote(\"Dr. Seuss\", \"The Shape of Me and Other Stuff\", 1973).\nWrote(\"Dr. Seuss\", \"Marvin K. Mooney Will You Please Go Now!\", 1972).\nWrote(\"Dr. Seuss\", \"The Bippolo Seed and Other Lost Stories\", 2011).\nWrote(\"Dr. Seuss\", \"The Tooth Book\", 1962).\nWrote(\"Dr. Seuss\", \"Great Day for Up!\", 1974).\nWrote(\"Dr. Seuss\", \"Hop on Pop\", 1963).\nWrote(\"Dr. Seuss\", \"Mr. Brown Can Moo! Can You?\", 1970).\nWrote(\"Dr. Seuss\", \"My Many Colored Days\", 1996).\nWrote(\"Dr. Seuss\", \"The Eye Book\", 1968).\nWrote(\"Dr. Seuss\", \"Gertrude McFuzz\", 1971).\nWrote(\"Dr. Seuss\", \"The Zax\", 1971).\nWrote(\"Dr. Seuss\", \"The Sneeches and Other Stories\", 1961).\nW"]}
{"id": 122, "answer": false, "completion": ".decl Has_tonsils(Animal:symbol)\nHas_tonsils(\"human\").\n.decl Answer()\nAnswer() :- Has_tonsils(\"human\").\n.output Answer", "completions": [".decl Has_tonsils(Animal:symbol)\nHas_tonsils(\"human\").\n.decl Answer()\nAnswer() :- Has_tonsils(\"human\").\n.output Answer"]}
{"id": 123, "answer": false, "completion": ".decl Can_travel_to(Vehicle:symbol, Destination:symbol)\nCan_travel_to(\"Mayflower\", \"Plymouth\").\nCan_travel_to(\"Mayflower\", \"Jamestown\").\nCan_travel_to(\"Mayflower\", \"London\").\nCan_travel_to(\"Mayflower\", \"Boston\").\nCan_travel_to(\"Mayflower\", \"New York\").\nCan_travel_to(\"Mayflower\", \"Philadelphia\").\nCan_travel_to(\"Mayflower\", \"Baltimore\").\nCan_travel_to(\"Mayflower\", \"Washington, D.C.\").\nCan_travel_to(\"Mayflower\", \"Charleston\").\nCan_travel_to(\"Mayflower\", \"Savannah\").\nCan_travel_to(\"Mayflower\", \"New Orleans\").\nCan_travel_to(\"Mayflower\", \"Houston\").\nCan_travel_to(\"Mayflower\", \"Dallas\").\nCan_travel_to(\"Mayflower\", \"San Antonio\").\nCan_travel_to(\"Mayflower\", \"El Paso\").\nCan_travel_to(\"Mayflower\", \"Tucson\").\nCan_travel_to(\"Mayflower\", \"Phoenix\").\nCan_travel_to(\"Mayflower\", \"Los Angeles\").\nCan_travel_to(\"Mayflower\", \"San Diego\").\nCan_travel_to(\"Mayflower\", \"San Francisco\").\nCan_travel_to(\"Mayflower\", \"Portland\").\nCan_travel_to(\"Mayflower\", \"Seattle\").\nCan_travel_to(\"Mayflower\", \"Vancouver\").\nCan_travel_to(\"Mayflower\", \"Calgary\").\nCan_travel_to(\"Mayflower\", \"Edmonton\").\nCan_travel_to(\"Mayflower\", \"Winnipeg\").\nCan_travel_to(\"Mayflower\", \"Minneapolis\").\nCan_travel_to(\"Mayflower\", \"Chicago\").\nCan_travel_to(\"Mayflower\", \"St. Louis\").\nCan_travel_to(\"Mayflower\", \"Kansas City\").\nCan_travel_to(\"Mayflower\", \"Denver\").\nCan_travel_to(\"Mayflower\", \"Salt Lake City\").\nCan_travel_to(\"Mayflower\", \"Las Vegas\").\nCan_travel_to(\"Mayflower\", \"Reno\").\nCan_travel_to(\"Mayflower\", \"Oakland\").\nCan_travel_to(\"Mayflower\", \"Sacramento\").\nCan_travel_to(\"Mayflower\", \"San Jose\").\nCan_travel_to(\"Mayflower\", \"Anchorage\").\nCan_travel_to(\"Mayflower\", \"Honolulu\").\nCan_travel_to(\"Mayflower\", \"Hilo\").\nCan_travel_to(\"Mayflower\", \"Kailua-Kona\").\nCan_travel_to(\"Mayflower\", \"Lahaina\").\nCan_travel_to(\"Mayflower\", \"Maui\").\nCan_travel_to(\"Mayflower\", \"Kahului\").\nCan_travel_to(\"Mayflower\", \"Kihei\").\nCan_travel_to(\"Mayflower\", \"Wailuku\").\nCan_travel_to(\"Mayflower\", \"Kauai\").\nCan_travel_to(\"Mayflower\", \"Lihue\").\nCan_travel_to(\"Mayflower\", \"Hanalei\").\nCan_travel_to(\"Mayflower\", \"Poipu\").\nCan_travel_to(\"Mayflower\", \"Kapaa\").\nCan_travel_to(\"Mayflower\", \"Princeville\").\nCan_travel_to(\"Mayflower\", \"Kilauea\").\nCan_travel_to(\"Mayflower\", \"Hanamaulu\").\nCan_travel_to", "completions": [".decl Can_travel_to(Vehicle:symbol, Destination:symbol)\nCan_travel_to(\"Mayflower\", \"Plymouth\").\nCan_travel_to(\"Mayflower\", \"Jamestown\").\nCan_travel_to(\"Mayflower\", \"London\").\nCan_travel_to(\"Mayflower\", \"Boston\").\nCan_travel_to(\"Mayflower\", \"New York\").\nCan_travel_to(\"Mayflower\", \"Philadelphia\").\nCan_travel_to(\"Mayflower\", \"Baltimore\").\nCan_travel_to(\"Mayflower\", \"Washington, D.C.\").\nCan_travel_to(\"Mayflower\", \"Charleston\").\nCan_travel_to(\"Mayflower\", \"Savannah\").\nCan_travel_to(\"Mayflower\", \"New Orleans\").\nCan_travel_to(\"Mayflower\", \"Houston\").\nCan_travel_to(\"Mayflower\", \"Dallas\").\nCan_travel_to(\"Mayflower\", \"San Antonio\").\nCan_travel_to(\"Mayflower\", \"El Paso\").\nCan_travel_to(\"Mayflower\", \"Tucson\").\nCan_travel_to(\"Mayflower\", \"Phoenix\").\nCan_travel_to(\"Mayflower\", \"Los Angeles\").\nCan_travel_to(\"Mayflower\", \"San Diego\").\nCan_travel_to(\"Mayflower\", \"San Francisco\").\nCan_travel_to(\"Mayflower\", \"Portland\").\nCan_travel_to(\"Mayflower\", \"Seattle\").\nCan_travel_to(\"Mayflower\", \"Vancouver\").\nCan_travel_to(\"Mayflower\", \"Calgary\").\nCan_travel_to(\"Mayflower\", \"Edmonton\").\nCan_travel_to(\"Mayflower\", \"Winnipeg\").\nCan_travel_to(\"Mayflower\", \"Minneapolis\").\nCan_travel_to(\"Mayflower\", \"Chicago\").\nCan_travel_to(\"Mayflower\", \"St. Louis\").\nCan_travel_to(\"Mayflower\", \"Kansas City\").\nCan_travel_to(\"Mayflower\", \"Denver\").\nCan_travel_to(\"Mayflower\", \"Salt Lake City\").\nCan_travel_to(\"Mayflower\", \"Las Vegas\").\nCan_travel_to(\"Mayflower\", \"Reno\").\nCan_travel_to(\"Mayflower\", \"Oakland\").\nCan_travel_to(\"Mayflower\", \"Sacramento\").\nCan_travel_to(\"Mayflower\", \"San Jose\").\nCan_travel_to(\"Mayflower\", \"Anchorage\").\nCan_travel_to(\"Mayflower\", \"Honolulu\").\nCan_travel_to(\"Mayflower\", \"Hilo\").\nCan_travel_to(\"Mayflower\", \"Kailua-Kona\").\nCan_travel_to(\"Mayflower\", \"Lahaina\").\nCan_travel_to(\"Mayflower\", \"Maui\").\nCan_travel_to(\"Mayflower\", \"Kahului\").\nCan_travel_to(\"Mayflower\", \"Kihei\").\nCan_travel_to(\"Mayflower\", \"Wailuku\").\nCan_travel_to(\"Mayflower\", \"Kauai\").\nCan_travel_to(\"Mayflower\", \"Lihue\").\nCan_travel_to(\"Mayflower\", \"Hanalei\").\nCan_travel_to(\"Mayflower\", \"Poipu\").\nCan_travel_to(\"Mayflower\", \"Kapaa\").\nCan_travel_to(\"Mayflower\", \"Princeville\").\nCan_travel_to(\"Mayflower\", \"Kilauea\").\nCan_travel_to(\"Mayflower\", \"Hanamaulu\").\nCan_travel_to"]}
{"id": 124, "answer": false, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Lupita Nyongo\", \"Kenya\").\n.decl Has_origin_country(Person:symbol, Country:symbol)\nHas_origin_country(\"Barack Obama\", \"Kenya\").\n.decl Has_paternal_family(Person:symbol, Family:symbol)\nHas_paternal_family(\"Barack Obama\", \"Kenya\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Lupita Nyongo\", country), Has_origin_country(\"Barack Obama\", country), Has_paternal_family(\"Barack Obama\", family), family = country.\n.output Answer", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Lupita Nyongo\", \"Kenya\").\n.decl Has_origin_country(Person:symbol, Country:symbol)\nHas_origin_country(\"Barack Obama\", \"Kenya\").\n.decl Has_paternal_family(Person:symbol, Family:symbol)\nHas_paternal_family(\"Barack Obama\", \"Kenya\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Lupita Nyongo\", country), Has_origin_country(\"Barack Obama\", country), Has_paternal_family(\"Barack Obama\", family), family = country.\n.output Answer"]}
{"id": 125, "answer": true, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 66.99).\n.decl Has_n_records(Artist:symbol, N_records:float)\nHas_n_records(\"Jonny Cash\", 70).\n.decl Answer()\nAnswer() :- Has_population(\"France\", population), Has_n_records(\"Jonny Cash\", n_records), n_records >= population.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 66.99).\n.decl Has_n_records(Artist:symbol, N_records:float)\nHas_n_records(\"Jonny Cash\", 70).\n.decl Answer()\nAnswer() :- Has_population(\"France\", population), Has_n_records(\"Jonny Cash\", n_records), n_records >= population.\n.output Answer"]}
{"id": 126, "answer": false, "completion": ".decl Has_smell(Object:symbol, Smell:symbol)\nHas_smell(\"brussels sprouts\", \"fart\").\n.decl Answer()\nAnswer() :- Has_smell(\"brussels sprouts\", \"fart\").\n.output Answer", "completions": [".decl Has_smell(Object:symbol, Smell:symbol)\nHas_smell(\"brussels sprouts\", \"fart\").\n.decl Answer()\nAnswer() :- Has_smell(\"brussels sprouts\", \"fart\").\n.output Answer"]}
{"id": 127, "answer": true, "completion": ".decl Weighs_less_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_less_than(\"mule deer\", \"Stone Cold Steve Austin\").\n.decl Answer()\nAnswer() :- Weighs_less_than(animal, \"Stone Cold Steve Austin\").\n.output Answer", "completions": [".decl Weighs_less_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_less_than(\"mule deer\", \"Stone Cold Steve Austin\").\n.decl Answer()\nAnswer() :- Weighs_less_than(animal, \"Stone Cold Steve Austin\").\n.output Answer"]}
{"id": 128, "answer": true, "completion": ".decl Has_relationship(Person:symbol, Relationship:symbol)\nHas_relationship(\"Joker\", \"unhealthy romantic relationship\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Joker\", relationship), relationship != \"healthy romantic relationship\".\n.output Answer", "completions": [".decl Has_relationship(Person:symbol, Relationship:symbol)\nHas_relationship(\"Joker\", \"unhealthy romantic relationship\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Joker\", relationship), relationship != \"healthy romantic relationship\".\n.output Answer"]}
{"id": 129, "answer": false, "completion": ".decl Is_traditional_in(Boat:symbol, Country:symbol)\nIs_traditional_in(\"waka\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Is_traditional_in(\"kayak\", \"New Zealand\").\n.output Answer", "completions": [".decl Is_traditional_in(Boat:symbol, Country:symbol)\nIs_traditional_in(\"waka\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Is_traditional_in(\"kayak\", \"New Zealand\").\n.output Answer"]}
{"id": 130, "answer": false, "completion": ".decl Watched(Person:symbol, Event:symbol)\nWatched(\"Boris Yeltsin\", \"1992 Summer Olympics\").\n.decl Answer()\nAnswer() :- Watched(\"Boris Yeltsin\", \"2008 Summer Olympics\").\n.output Answer", "completions": [".decl Watched(Person:symbol, Event:symbol)\nWatched(\"Boris Yeltsin\", \"1992 Summer Olympics\").\n.decl Answer()\nAnswer() :- Watched(\"Boris Yeltsin\", \"2008 Summer Olympics\").\n.output Answer"]}
{"id": 131, "answer": true, "completion": ".decl Appears_in(Animal:symbol, Film:symbol)\nAppears_in(\"swallow\", \"Monty Python and the Holy Grail\").\n.decl Answer()\nAnswer() :- Appears_in(\"swallow\", \"Monty Python and the Holy Grail\").\n.output Answer", "completions": [".decl Appears_in(Animal:symbol, Film:symbol)\nAppears_in(\"swallow\", \"Monty Python and the Holy Grail\").\n.decl Answer()\nAnswer() :- Appears_in(\"swallow\", \"Monty Python and the Holy Grail\").\n.output Answer"]}
{"id": 132, "answer": true, "completion": ".decl Has_gpa(Person:symbol, GPA:float)\nHas_gpa(\"Michael Crichton\", 0.5).\n.decl Flunk_out_gpa(University:symbol, GPA:float)\nFlunk_out_gpa(\"Harvard University\", 0.75).\n.decl Answer()\nAnswer() :- Has_gpa(\"Michael Crichton\", gpa1), Flunk_out_gpa(\"Harvard University\", gpa2), gpa1 < gpa2.\n.output Answer", "completions": [".decl Has_gpa(Person:symbol, GPA:float)\nHas_gpa(\"Michael Crichton\", 0.5).\n.decl Flunk_out_gpa(University:symbol, GPA:float)\nFlunk_out_gpa(\"Harvard University\", 0.75).\n.decl Answer()\nAnswer() :- Has_gpa(\"Michael Crichton\", gpa1), Flunk_out_gpa(\"Harvard University\", gpa2), gpa1 < gpa2.\n.output Answer"]}
{"id": 133, "answer": false, "completion": ".decl Popular_in_year(Activity:symbol, Year:float)\nPopular_in_year(\"surfing\", 1975).\nPopular_in_year(\"surfing\", 1980).\nPopular_in_year(\"surfing\", 1985).\nPopular_in_year(\"surfing\", 1990).\nPopular_in_year(\"surfing\", 1995).\nPopular_in_year(\"surfing\", 2000).\nPopular_in_year(\"surfing\", 2005).\nPopular_in_year(\"surfing\", 2010).\nPopular_in_year(\"surfing\", 2015).\nPopular_in_year(\"pogs\", 1995).\n.decl Answer()\nAnswer() :- Popular_in_year(\"surfing\", year1), Popular_in_year(\"pogs\", year2), year1 <= year2.\n.output Answer", "completions": [".decl Popular_in_year(Activity:symbol, Year:float)\nPopular_in_year(\"surfing\", 1975).\nPopular_in_year(\"surfing\", 1980).\nPopular_in_year(\"surfing\", 1985).\nPopular_in_year(\"surfing\", 1990).\nPopular_in_year(\"surfing\", 1995).\nPopular_in_year(\"surfing\", 2000).\nPopular_in_year(\"surfing\", 2005).\nPopular_in_year(\"surfing\", 2010).\nPopular_in_year(\"surfing\", 2015).\nPopular_in_year(\"pogs\", 1995).\n.decl Answer()\nAnswer() :- Popular_in_year(\"surfing\", year1), Popular_in_year(\"pogs\", year2), year1 <= year2.\n.output Answer"]}
{"id": 134, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"caracal\", \"Africa\").\n.decl Located_in(Place:symbol, Location:symbol)\nLocated_in(\"University of Houston\", \"Texas\").\n.decl Answer()\nAnswer() :- Lives_in(\"caracal\", location1), Located_in(\"University of Houston\", location2), location1 != location2.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"caracal\", \"Africa\").\n.decl Located_in(Place:symbol, Location:symbol)\nLocated_in(\"University of Houston\", \"Texas\").\n.decl Answer()\nAnswer() :- Lives_in(\"caracal\", location1), Located_in(\"University of Houston\", location2), location1 != location2.\n.output Answer"]}
{"id": 135, "answer": false, "completion": ".decl Brothers(Person1:symbol, Person2:symbol)\nBrothers(\"Joel Coen\", \"Ethan Coen\").\nBrothers(\"Jacob Grimm\", \"Wilhelm Grimm\").\n.decl Collaborated(Person1:symbol, Person2:symbol)\nCollaborated(\"Joel Coen\", \"Ethan Coen\").\nCollaborated(\"Joel Coen\", \"Tim Robbins\").\nCollaborated(\"Joel Coen\", \"Tommy Lee Jones\").\nCollaborated(\"Joel Coen\", \"John Goodman\").\nCollaborated(\"Joel Coen\", \"Steve Buscemi\").\nCollaborated(\"Joel Coen\", \"John Turturro\").\nCollaborated(\"Joel Coen\", \"Harrison Ford\").\nCollaborated(\"Joel Coen\", \"Jeff Bridges\").\nCollaborated(\"Joel Coen\", \"George Clooney\").\nCollaborated(\"Joel Coen\", \"Catherine Zeta-Jones\").\nCollaborated(\"Joel Coen\", \"Billy Bob Thornton\").\nCollaborated(\"Joel Coen\", \"Frances McDormand\").\nCollaborated(\"Joel Coen\", \"John Goodman\").\nCollaborated(\"Joel Coen\", \"Steve Buscemi\").\nCollaborated(\"Joel Coen\", \"John Turturro\").\nCollaborated(\"Joel Coen\", \"Harrison Ford\").\nCollaborated(\"Joel Coen\", \"Jeff Bridges\").\nCollaborated(\"Joel Coen\", \"George Clooney\").\nCollaborated(\"Joel Coen\", \"Catherine Zeta-Jones\").\nCollaborated(\"Joel Coen\", \"Billy Bob Thornton\").\nCollaborated(\"Joel Coen\", \"Frances McDormand\").\nCollaborated(\"Joel Coen\", \"John Goodman\").\nCollaborated(\"Joel Coen\", \"Steve Buscemi\").\nCollaborated(\"Joel Coen\", \"John Turturro\").\nCollaborated(\"Joel Coen\", \"Harrison Ford\").\nCollaborated(\"Joel Coen\", \"Jeff Bridges\").\nCollaborated(\"Joel Coen\", \"George Clooney\").\nCollaborated(\"Joel Coen\", \"Catherine Zeta-Jones\").\nCollaborated(\"Joel Coen\", \"Billy Bob Thornton\").\nCollaborated(\"Joel Coen\", \"Frances McDormand\").\nCollaborated(\"Joel Coen\", \"John Goodman\").\nCollaborated(\"Joel Coen\", \"Steve Buscemi\").\nCollaborated(\"Joel Coen\", \"John Turturro\").\nCollaborated(\"Joel Coen\", \"Harrison Ford\").\nCollaborated(\"Joel Coen\", \"Jeff Bridges\").\nCollaborated(\"Joel Coen\", \"George Clooney\").\nCollaborated(\"Joel Coen\", \"Catherine Zeta-Jones\").\nCollaborated(\"Joel Coen\", \"Billy Bob Thornton\").\nCollaborated(\"Joel Coen\", \"Frances McDormand\").\nCollaborated(\"Joel Coen\", \"John Goodman\").\nCollaborated(\"Joel Coen\", \"Steve Buscemi\").\nCollaborated(\"Joel Coen\", \"John Turturro\").\nCollaborated(\"Joel Coen\", \"Harrison Ford\").\nCollaborated(\"Joel Coen\", \"Jeff Bridges\").\nCollaborated(\"Joel Coen\", \"George Clooney\").\nCollaborated(\"Joel Coen\", \"Catherine Zeta-Jones\").\nCollaborated(\"Joel Coen\", \"Billy Bob Thornton\").\nCollaborated(\"", "completions": [".decl Brothers(Person1:symbol, Person2:symbol)\nBrothers(\"Joel Coen\", \"Ethan Coen\").\nBrothers(\"Jacob Grimm\", \"Wilhelm Grimm\").\n.decl Collaborated(Person1:symbol, Person2:symbol)\nCollaborated(\"Joel Coen\", \"Ethan Coen\").\nCollaborated(\"Joel Coen\", \"Tim Robbins\").\nCollaborated(\"Joel Coen\", \"Tommy Lee Jones\").\nCollaborated(\"Joel Coen\", \"John Goodman\").\nCollaborated(\"Joel Coen\", \"Steve Buscemi\").\nCollaborated(\"Joel Coen\", \"John Turturro\").\nCollaborated(\"Joel Coen\", \"Harrison Ford\").\nCollaborated(\"Joel Coen\", \"Jeff Bridges\").\nCollaborated(\"Joel Coen\", \"George Clooney\").\nCollaborated(\"Joel Coen\", \"Catherine Zeta-Jones\").\nCollaborated(\"Joel Coen\", \"Billy Bob Thornton\").\nCollaborated(\"Joel Coen\", \"Frances McDormand\").\nCollaborated(\"Joel Coen\", \"John Goodman\").\nCollaborated(\"Joel Coen\", \"Steve Buscemi\").\nCollaborated(\"Joel Coen\", \"John Turturro\").\nCollaborated(\"Joel Coen\", \"Harrison Ford\").\nCollaborated(\"Joel Coen\", \"Jeff Bridges\").\nCollaborated(\"Joel Coen\", \"George Clooney\").\nCollaborated(\"Joel Coen\", \"Catherine Zeta-Jones\").\nCollaborated(\"Joel Coen\", \"Billy Bob Thornton\").\nCollaborated(\"Joel Coen\", \"Frances McDormand\").\nCollaborated(\"Joel Coen\", \"John Goodman\").\nCollaborated(\"Joel Coen\", \"Steve Buscemi\").\nCollaborated(\"Joel Coen\", \"John Turturro\").\nCollaborated(\"Joel Coen\", \"Harrison Ford\").\nCollaborated(\"Joel Coen\", \"Jeff Bridges\").\nCollaborated(\"Joel Coen\", \"George Clooney\").\nCollaborated(\"Joel Coen\", \"Catherine Zeta-Jones\").\nCollaborated(\"Joel Coen\", \"Billy Bob Thornton\").\nCollaborated(\"Joel Coen\", \"Frances McDormand\").\nCollaborated(\"Joel Coen\", \"John Goodman\").\nCollaborated(\"Joel Coen\", \"Steve Buscemi\").\nCollaborated(\"Joel Coen\", \"John Turturro\").\nCollaborated(\"Joel Coen\", \"Harrison Ford\").\nCollaborated(\"Joel Coen\", \"Jeff Bridges\").\nCollaborated(\"Joel Coen\", \"George Clooney\").\nCollaborated(\"Joel Coen\", \"Catherine Zeta-Jones\").\nCollaborated(\"Joel Coen\", \"Billy Bob Thornton\").\nCollaborated(\"Joel Coen\", \"Frances McDormand\").\nCollaborated(\"Joel Coen\", \"John Goodman\").\nCollaborated(\"Joel Coen\", \"Steve Buscemi\").\nCollaborated(\"Joel Coen\", \"John Turturro\").\nCollaborated(\"Joel Coen\", \"Harrison Ford\").\nCollaborated(\"Joel Coen\", \"Jeff Bridges\").\nCollaborated(\"Joel Coen\", \"George Clooney\").\nCollaborated(\"Joel Coen\", \"Catherine Zeta-Jones\").\nCollaborated(\"Joel Coen\", \"Billy Bob Thornton\").\nCollaborated(\""]}
{"id": 136, "answer": false, "completion": ".decl Has_screen_size(Device:symbol, Screen_size:float)\nHas_screen_size(\"first generation iPhone\", 3.5).\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"lolcat\", 0.1).\n.decl Answer()\nAnswer() :- Has_screen_size(\"first generation iPhone\", screen_size), Has_size(\"lolcat\", size), screen_size^2 >= 100000 * size^2.\n.output Answer", "completions": [".decl Has_screen_size(Device:symbol, Screen_size:float)\nHas_screen_size(\"first generation iPhone\", 3.5).\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"lolcat\", 0.1).\n.decl Answer()\nAnswer() :- Has_screen_size(\"first generation iPhone\", screen_size), Has_size(\"lolcat\", size), screen_size^2 >= 100000 * size^2.\n.output Answer"]}
{"id": 137, "answer": true, "completion": ".decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"monk\", \"forbidden from engaging in warfare\").\n.decl Answer()\nAnswer() :- Has_status(\"monk\", status), status = \"forbidden from engaging in warfare\".\n.output Answer", "completions": [".decl Has_status(Person:symbol, Status:symbol)\nHas_status(\"monk\", \"forbidden from engaging in warfare\").\n.decl Answer()\nAnswer() :- Has_status(\"monk\", status), status = \"forbidden from engaging in warfare\".\n.output Answer"]}
{"id": 138, "answer": false, "completion": ".decl Hosted_in(Program:symbol, Continent:symbol)\nHosted_in(\"BBC World Service\", \"Europe\").\n.decl Answer()\nAnswer() :- Hosted_in(\"BBC World Service\", \"Europe\").\n.output Answer", "completions": [".decl Hosted_in(Program:symbol, Continent:symbol)\nHosted_in(\"BBC World Service\", \"Europe\").\n.decl Answer()\nAnswer() :- Hosted_in(\"BBC World Service\", \"Europe\").\n.output Answer"]}
{"id": 139, "answer": true, "completion": ".decl Is_leap_year(Year:float)\nIs_leap_year(1996).\n.decl Answer()\nAnswer() :- Is_leap_year(year1), year1 + 4 = 2000.\n.output Answer", "completions": [".decl Is_leap_year(Year:float)\nIs_leap_year(1996).\n.decl Answer()\nAnswer() :- Is_leap_year(year1), year1 + 4 = 2000.\n.output Answer"]}
{"id": 140, "answer": true, "completion": ".decl Marries(Person:symbol, Woman:symbol)\nMarries(\"Clark Gable\", \"Carole Lombard\").\nMarries(\"Clark Gable\", \"Ria Langhanke\").\nMarries(\"Clark Gable\", \"Maria Franklin\").\nMarries(\"Richard Burton\", \"Elizabeth Taylor\").\nMarries(\"Richard Burton\", \"Sally Hay\").\n.decl Answer()\nAnswer() :- Marries(\"Clark Gable\", woman1), Marries(\"Richard Burton\", woman2), Marries(\"Clark Gable\", woman3), woman1 != woman2, woman1 != woman3, woman2 != woman3.\n.output Answer", "completions": [".decl Marries(Person:symbol, Woman:symbol)\nMarries(\"Clark Gable\", \"Carole Lombard\").\nMarries(\"Clark Gable\", \"Ria Langhanke\").\nMarries(\"Clark Gable\", \"Maria Franklin\").\nMarries(\"Richard Burton\", \"Elizabeth Taylor\").\nMarries(\"Richard Burton\", \"Sally Hay\").\n.decl Answer()\nAnswer() :- Marries(\"Clark Gable\", woman1), Marries(\"Richard Burton\", woman2), Marries(\"Clark Gable\", woman3), woman1 != woman2, woman1 != woman3, woman2 != woman3.\n.output Answer"]}
{"id": 141, "answer": false, "completion": ".decl Has_blast_radius(Weapon:symbol, Blast_radius:float)\nHas_blast_radius(\"double-barreled shotgun\", 0.5).\n.decl Has_brain_size(Animal:symbol, Brain_size:float)\nHas_brain_size(\"squid\", 0.1).\n.decl Answer()\nAnswer() :- Has_blast_radius(\"double-barreled shotgun\", blast_radius), Has_brain_size(\"squid\", brain_size), brain_size <= blast_radius.\n.output Answer", "completions": [".decl Has_blast_radius(Weapon:symbol, Blast_radius:float)\nHas_blast_radius(\"double-barreled shotgun\", 0.5).\n.decl Has_brain_size(Animal:symbol, Brain_size:float)\nHas_brain_size(\"squid\", 0.1).\n.decl Answer()\nAnswer() :- Has_blast_radius(\"double-barreled shotgun\", blast_radius), Has_brain_size(\"squid\", brain_size), brain_size <= blast_radius.\n.output Answer"]}
{"id": 142, "answer": false, "completion": ".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"pregnancy\", 9).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"need new shoes\", 3).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"need new shoes\", n_months1), Lasts_n_months(\"pregnancy\", n_months2), n_months1 <= n_months2.\n.output Answer", "completions": [".decl Lasts_n_months(Event:symbol, N_months:float)\nLasts_n_months(\"pregnancy\", 9).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"need new shoes\", 3).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"need new shoes\", n_months1), Lasts_n_months(\"pregnancy\", n_months2), n_months1 <= n_months2.\n.output Answer"]}
{"id": 143, "answer": false, "completion": ".decl Adherents(Person:symbol, Religion:symbol)\nAdherents(\"Mao Zedong\", \"Christianity\").\nAdherents(\"Mao Zedong\", \"Catholic Church\").\n.decl Answer()\nAnswer() :- Adherents(\"Mao Zedong\", \"Christianity\"), Adherents(\"Mao Zedong\", \"Catholic Church\"), !.\n.output Answer", "completions": [".decl Adherents(Person:symbol, Religion:symbol)\nAdherents(\"Mao Zedong\", \"Christianity\").\nAdherents(\"Mao Zedong\", \"Catholic Church\").\n.decl Answer()\nAnswer() :- Adherents(\"Mao Zedong\", \"Christianity\"), Adherents(\"Mao Zedong\", \"Catholic Church\"), !.\n.output Answer"]}
{"id": 144, "answer": false, "completion": ".decl Is_successor(Car1:symbol, Car2:symbol)\nIs_successor(\"Chevrolet Cruze\", \"Buick Excelle\").\n.decl Is_named_after(Car:symbol, Place:symbol)\nIs_named_after(\"Chevrolet Cruze\", \"Cruze\").\nIs_named_after(\"Buick Excelle\", \"Excelle\").\n.decl Is_far_from(Place1:symbol, Place2:symbol)\nIs_far_from(\"Cruze\", \"Milan\").\n.decl Answer()\nAnswer() :- Is_successor(\"Chevrolet Cruze\", \"Buick Excelle\"), Is_named_after(\"Buick Excelle\", \"Excelle\"), Is_far_from(\"Excelle\", \"Milan\").\n.output Answer", "completions": [".decl Is_successor(Car1:symbol, Car2:symbol)\nIs_successor(\"Chevrolet Cruze\", \"Buick Excelle\").\n.decl Is_named_after(Car:symbol, Place:symbol)\nIs_named_after(\"Chevrolet Cruze\", \"Cruze\").\nIs_named_after(\"Buick Excelle\", \"Excelle\").\n.decl Is_far_from(Place1:symbol, Place2:symbol)\nIs_far_from(\"Cruze\", \"Milan\").\n.decl Answer()\nAnswer() :- Is_successor(\"Chevrolet Cruze\", \"Buick Excelle\"), Is_named_after(\"Buick Excelle\", \"Excelle\"), Is_far_from(\"Excelle\", \"Milan\").\n.output Answer"]}
{"id": 145, "answer": false, "completion": ".decl Has_n_members(Order:symbol, N_members:float)\nHas_n_members(\"Dominican Order\", 12000).\nHas_n_members(\"Blessed Gerard's order\", 1).\n.decl Answer()\nAnswer() :- Has_n_members(\"Dominican Order\", n_members1), Has_n_members(\"Blessed Gerard's order\", n_members2), n_members1 > n_members2.\n.output Answer", "completions": [".decl Has_n_members(Order:symbol, N_members:float)\nHas_n_members(\"Dominican Order\", 12000).\nHas_n_members(\"Blessed Gerard's order\", 1).\n.decl Answer()\nAnswer() :- Has_n_members(\"Dominican Order\", n_members1), Has_n_members(\"Blessed Gerard's order\", n_members2), n_members1 > n_members2.\n.output Answer"]}
{"id": 146, "answer": false, "completion": ".decl Is_used_for(Object:symbol, Activity:symbol)\nIs_used_for(\"pottery kiln\", \"pottery\").\nIs_used_for(\"glass blowing furnace\", \"glass blowing\").\n.decl Answer()\nAnswer() :- Is_used_for(\"pottery kiln\", activity1), Is_used_for(\"glass blowing furnace\", activity2), activity1 != activity2.\n.output Answer\n\n\n", "completions": [".decl Is_used_for(Object:symbol, Activity:symbol)\nIs_used_for(\"pottery kiln\", \"pottery\").\nIs_used_for(\"glass blowing furnace\", \"glass blowing\").\n.decl Answer()\nAnswer() :- Is_used_for(\"pottery kiln\", activity1), Is_used_for(\"glass blowing furnace\", activity2), activity1 != activity2.\n.output Answer\n\n\n"]}
{"id": 147, "answer": true, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Balkans\", 60).\nHas_population(\"Japan\", 127).\n.decl Answer()\nAnswer() :- Has_population(\"Balkans\", population1), Has_population(\"Japan\", population2), population1 >= population2.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Balkans\", 60).\nHas_population(\"Japan\", 127).\n.decl Answer()\nAnswer() :- Has_population(\"Balkans\", population1), Has_population(\"Japan\", population2), population1 >= population2.\n.output Answer"]}
{"id": 148, "answer": true, "completion": ".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Steven Spielberg\", \"email\").\n.decl Answer()\nAnswer() :- Invented(\"Steven Spielberg\", \"email\"), false.\n.output Answer", "completions": [".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Steven Spielberg\", \"email\").\n.decl Answer()\nAnswer() :- Invented(\"Steven Spielberg\", \"email\"), false.\n.output Answer"]}
{"id": 149, "answer": false, "completion": ".decl Has_body(Person:symbol)\nHas_body(\"Charles Manson\").\n.decl Answer()\nAnswer() :- Has_body(\"Charles Manson\").\n.output Answer", "completions": [".decl Has_body(Person:symbol)\nHas_body(\"Charles Manson\").\n.decl Answer()\nAnswer() :- Has_body(\"Charles Manson\").\n.output Answer"]}
{"id": 150, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Beaver's teeth\", 1.5).\nHas_length(\"Smilodon's teeth\", 3).\n.decl Answer()\nAnswer() :- Has_length(\"Beaver's teeth\", length1), Has_length(\"Smilodon's teeth\", length2), length1 >= length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Beaver's teeth\", 1.5).\nHas_length(\"Smilodon's teeth\", 3).\n.decl Answer()\nAnswer() :- Has_length(\"Beaver's teeth\", length1), Has_length(\"Smilodon's teeth\", length2), length1 >= length2.\n.output Answer"]}
{"id": 151, "answer": false, "completion": ".decl Treats(Treatment:symbol, Symptom:symbol)\nTreats(\"hormone therapy\", \"dysphoria around one's pelvis\").\n.decl Requires_surgery(Treatment:symbol)\nRequires_surgery(\"genital surgery\").\n.decl Answer()\nAnswer() :- Treats(treatment, \"dysphoria around one's pelvis\"), !Requires_surgery(treatment).\n.output Answer", "completions": [".decl Treats(Treatment:symbol, Symptom:symbol)\nTreats(\"hormone therapy\", \"dysphoria around one's pelvis\").\n.decl Requires_surgery(Treatment:symbol)\nRequires_surgery(\"genital surgery\").\n.decl Answer()\nAnswer() :- Treats(treatment, \"dysphoria around one's pelvis\"), !Requires_surgery(treatment).\n.output Answer"]}
{"id": 152, "answer": true, "completion": ".decl Supports(Group:symbol, Element:symbol)\nSupports(\"Blue Lives Matter\", \"police officers\").\nSupports(\"Blue Lives Matter\", \"firefighters\").\nSupports(\"Blue Lives Matter\", \"military\").\nSupports(\"Grand Theft Auto III\", \"police officers\").\nSupports(\"Grand Theft Auto III\", \"firefighters\").\nSupports(\"Grand Theft Auto III\", \"military\").\nSupports(\"Grand Theft Auto III\", \"drug dealers\").\nSupports(\"Grand Theft Auto III\", \"prostitutes\").\n.decl Answer()\nAnswer() :- Supports(group, element), Supports(\"Grand Theft Auto III\", element), !Supports(\"Blue Lives Matter\", element).\n.output Answer", "completions": [".decl Supports(Group:symbol, Element:symbol)\nSupports(\"Blue Lives Matter\", \"police officers\").\nSupports(\"Blue Lives Matter\", \"firefighters\").\nSupports(\"Blue Lives Matter\", \"military\").\nSupports(\"Grand Theft Auto III\", \"police officers\").\nSupports(\"Grand Theft Auto III\", \"firefighters\").\nSupports(\"Grand Theft Auto III\", \"military\").\nSupports(\"Grand Theft Auto III\", \"drug dealers\").\nSupports(\"Grand Theft Auto III\", \"prostitutes\").\n.decl Answer()\nAnswer() :- Supports(group, element), Supports(\"Grand Theft Auto III\", element), !Supports(\"Blue Lives Matter\", element).\n.output Answer"]}
{"id": 153, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Dalai Lama\", 0.000001).\nHas_volume(\"car\", 0.01).\n.decl Answer()\nAnswer() :- Has_volume(\"Dalai Lama\", volume1), Has_volume(\"car\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Dalai Lama\", 0.000001).\nHas_volume(\"car\", 0.01).\n.decl Answer()\nAnswer() :- Has_volume(\"Dalai Lama\", volume1), Has_volume(\"car\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 154, "answer": false, "completion": ".decl Is_age(Person:symbol, Age:float)\nIs_age(\"Dafne Keen\", 16).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Eurovision Song Contest finals\", 2020).\n.decl Answer()\nAnswer() :- Is_age(\"Dafne Keen\", age), Happens_in_year(\"Eurovision Song Contest finals\", year), age >= 18.\n.output Answer", "completions": [".decl Is_age(Person:symbol, Age:float)\nIs_age(\"Dafne Keen\", 16).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Eurovision Song Contest finals\", 2020).\n.decl Answer()\nAnswer() :- Is_age(\"Dafne Keen\", age), Happens_in_year(\"Eurovision Song Contest finals\", year), age >= 18.\n.output Answer"]}
{"id": 155, "answer": true, "completion": ".decl Has_operation_record(Airline:symbol, Operation_record:symbol)\nHas_operation_record(\"United Airlines\", \"perfect\").\n.decl Answer()\nAnswer() :- Has_operation_record(\"United Airlines\", \"perfect\").\n.output Answer\n\n\n", "completions": [".decl Has_operation_record(Airline:symbol, Operation_record:symbol)\nHas_operation_record(\"United Airlines\", \"perfect\").\n.decl Answer()\nAnswer() :- Has_operation_record(\"United Airlines\", \"perfect\").\n.output Answer\n\n\n"]}
{"id": 156, "answer": true, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"United States Secretary of State\", \"United States\").\n.decl Has_jurisdiction(Country:symbol, Place:symbol)\nHas_jurisdiction(\"United States\", \"United States\").\nHas_jurisdiction(\"United Kingdom\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"United States Secretary of State\", country1), Has_jurisdiction(country1, place1), Has_jurisdiction(\"United Kingdom\", place1).\n.output Answer", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"United States Secretary of State\", \"United States\").\n.decl Has_jurisdiction(Country:symbol, Place:symbol)\nHas_jurisdiction(\"United States\", \"United States\").\nHas_jurisdiction(\"United Kingdom\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"United States Secretary of State\", country1), Has_jurisdiction(country1, place1), Has_jurisdiction(\"United Kingdom\", place1).\n.output Answer"]}
{"id": 157, "answer": true, "completion": ".decl Is_part_of(Organ:symbol, Body_system:symbol)\nIs_part_of(\"myocardial infarction\", \"cardiovascular system\").\nIs_part_of(\"brain\", \"nervous system\").\n.decl Answer()\nAnswer() :- Is_part_of(\"myocardial infarction\", body_system1), Is_part_of(\"brain\", body_system2), body_system1 != body_system2.\n.output Answer", "completions": [".decl Is_part_of(Organ:symbol, Body_system:symbol)\nIs_part_of(\"myocardial infarction\", \"cardiovascular system\").\nIs_part_of(\"brain\", \"nervous system\").\n.decl Answer()\nAnswer() :- Is_part_of(\"myocardial infarction\", body_system1), Is_part_of(\"brain\", body_system2), body_system1 != body_system2.\n.output Answer"]}
{"id": 158, "answer": true, "completion": ".decl Is_open(Day:symbol, Store:symbol)\nIs_open(\"Monday\", \"Chick Fil A\").\nIs_open(\"Tuesday\", \"Chick Fil A\").\nIs_open(\"Wednesday\", \"Chick Fil A\").\nIs_open(\"Thursday\", \"Chick Fil A\").\nIs_open(\"Friday\", \"Chick Fil A\").\nIs_open(\"Saturday\", \"Chick Fil A\").\nIs_open(\"Sunday\", \"Chick Fil A\").\n.decl Answer()\nAnswer() :- Is_open(\"Thursday\", \"Chick Fil A\").\n.output Answer", "completions": [".decl Is_open(Day:symbol, Store:symbol)\nIs_open(\"Monday\", \"Chick Fil A\").\nIs_open(\"Tuesday\", \"Chick Fil A\").\nIs_open(\"Wednesday\", \"Chick Fil A\").\nIs_open(\"Thursday\", \"Chick Fil A\").\nIs_open(\"Friday\", \"Chick Fil A\").\nIs_open(\"Saturday\", \"Chick Fil A\").\nIs_open(\"Sunday\", \"Chick Fil A\").\n.decl Answer()\nAnswer() :- Is_open(\"Thursday\", \"Chick Fil A\").\n.output Answer"]}
{"id": 159, "answer": true, "completion": ".decl Is_Islamaphobe(Person:symbol)\n.decl Is_Christian(Person:symbol)\n.decl Is_Crusader(Person:symbol)\n.decl Answer()\nAnswer() :- Is_Islamaphobe(\"Godfrey of Bouillon\"), Is_Christian(\"Godfrey of Bouillon\"), Is_Crusader(\"Godfrey of Bouillon\").\n.output Answer", "completions": [".decl Is_Islamaphobe(Person:symbol)\n.decl Is_Christian(Person:symbol)\n.decl Is_Crusader(Person:symbol)\n.decl Answer()\nAnswer() :- Is_Islamaphobe(\"Godfrey of Bouillon\"), Is_Christian(\"Godfrey of Bouillon\"), Is_Crusader(\"Godfrey of Bouillon\").\n.output Answer"]}
{"id": 160, "answer": true, "completion": ".decl Has_effect(Drink:symbol, Effect:symbol)\nHas_effect(\"espresso\", \"awake\").\nHas_effect(\"espresso\", \"energetic\").\nHas_effect(\"espresso\", \"calm\").\n.decl Answer()\nAnswer() :- Has_effect(\"espresso\", \"calm\").\n.output Answer", "completions": [".decl Has_effect(Drink:symbol, Effect:symbol)\nHas_effect(\"espresso\", \"awake\").\nHas_effect(\"espresso\", \"energetic\").\nHas_effect(\"espresso\", \"calm\").\n.decl Answer()\nAnswer() :- Has_effect(\"espresso\", \"calm\").\n.output Answer"]}
{"id": 161, "answer": false, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"rice pudding\", \"rice\").\nHas_ingredient(\"rice pudding\", \"milk\").\nHas_ingredient(\"rice pudding\", \"sugar\").\nHas_ingredient(\"rice pudding\", \"cinnamon\").\nHas_ingredient(\"rice pudding\", \"water\").\nHas_ingredient(\"horchata\", \"rice\").\nHas_ingredient(\"horchata\", \"milk\").\nHas_ingredient(\"horchata\", \"sugar\").\nHas_ingredient(\"horchata\", \"cinnamon\").\nHas_ingredient(\"horchata\", \"water\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"rice pudding\", ingredient), Has_ingredient(\"horchata\", ingredient).\n.output Answer", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"rice pudding\", \"rice\").\nHas_ingredient(\"rice pudding\", \"milk\").\nHas_ingredient(\"rice pudding\", \"sugar\").\nHas_ingredient(\"rice pudding\", \"cinnamon\").\nHas_ingredient(\"rice pudding\", \"water\").\nHas_ingredient(\"horchata\", \"rice\").\nHas_ingredient(\"horchata\", \"milk\").\nHas_ingredient(\"horchata\", \"sugar\").\nHas_ingredient(\"horchata\", \"cinnamon\").\nHas_ingredient(\"horchata\", \"water\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"rice pudding\", ingredient), Has_ingredient(\"horchata\", ingredient).\n.output Answer"]}
{"id": 162, "answer": false, "completion": ".decl Has_GPA(Person:symbol, GPA:float)\nHas_GPA(\"Bill Gates\", 3.33).\n.decl Has_honors(Person:symbol, Honors:symbol)\nHas_honors(\"Bill Gates\", \"Latin honors\").\n.decl Answer()\nAnswer() :- Has_GPA(\"Bill Gates\", GPA), GPA >= 3.5, Has_honors(\"Bill Gates\", \"Latin honors\").\n.output Answer", "completions": [".decl Has_GPA(Person:symbol, GPA:float)\nHas_GPA(\"Bill Gates\", 3.33).\n.decl Has_honors(Person:symbol, Honors:symbol)\nHas_honors(\"Bill Gates\", \"Latin honors\").\n.decl Answer()\nAnswer() :- Has_GPA(\"Bill Gates\", GPA), GPA >= 3.5, Has_honors(\"Bill Gates\", \"Latin honors\").\n.output Answer"]}
{"id": 163, "answer": true, "completion": ".decl Invented_in_format(Fiction:symbol, Format:symbol)\nInvented_in_format(\"Superhero fiction\", \"digital format\").\n.decl Answer()\nAnswer() :- Invented_in_format(\"Superhero fiction\", \"digital format\").\n.output Answer", "completions": [".decl Invented_in_format(Fiction:symbol, Format:symbol)\nInvented_in_format(\"Superhero fiction\", \"digital format\").\n.decl Answer()\nAnswer() :- Invented_in_format(\"Superhero fiction\", \"digital format\").\n.output Answer"]}
{"id": 164, "answer": true, "completion": ".decl Is_in_calendar(Animal:symbol, Calendar:symbol)\nIs_in_calendar(\"snake\", \"Chinese calendar\").\nIs_in_calendar(\"horse\", \"Chinese calendar\").\nIs_in_calendar(\"sheep\", \"Chinese calendar\").\nIs_in_calendar(\"monkey\", \"Chinese calendar\").\nIs_in_calendar(\"rooster\", \"Chinese calendar\").\nIs_in_calendar(\"dog\", \"Chinese calendar\").\nIs_in_calendar(\"pig\", \"Chinese calendar\").\n.decl Is_phylum(Animal:symbol, Phylum:symbol)\nIs_phylum(\"snake\", \"Chordata\").\nIs_phylum(\"horse\", \"Chordata\").\nIs_phylum(\"sheep\", \"Chordata\").\nIs_phylum(\"monkey\", \"Chordata\").\nIs_phylum(\"rooster\", \"Chordata\").\nIs_phylum(\"dog\", \"Chordata\").\nIs_phylum(\"pig\", \"Chordata\").\n.decl Answer()\nAnswer() :- Is_in_calendar(animal, \"Chinese calendar\"), Is_phylum(animal, \"Chordata\").\n.output Answer", "completions": [".decl Is_in_calendar(Animal:symbol, Calendar:symbol)\nIs_in_calendar(\"snake\", \"Chinese calendar\").\nIs_in_calendar(\"horse\", \"Chinese calendar\").\nIs_in_calendar(\"sheep\", \"Chinese calendar\").\nIs_in_calendar(\"monkey\", \"Chinese calendar\").\nIs_in_calendar(\"rooster\", \"Chinese calendar\").\nIs_in_calendar(\"dog\", \"Chinese calendar\").\nIs_in_calendar(\"pig\", \"Chinese calendar\").\n.decl Is_phylum(Animal:symbol, Phylum:symbol)\nIs_phylum(\"snake\", \"Chordata\").\nIs_phylum(\"horse\", \"Chordata\").\nIs_phylum(\"sheep\", \"Chordata\").\nIs_phylum(\"monkey\", \"Chordata\").\nIs_phylum(\"rooster\", \"Chordata\").\nIs_phylum(\"dog\", \"Chordata\").\nIs_phylum(\"pig\", \"Chordata\").\n.decl Answer()\nAnswer() :- Is_in_calendar(animal, \"Chinese calendar\"), Is_phylum(animal, \"Chordata\").\n.output Answer"]}
{"id": 165, "answer": false, "completion": ".decl Happens_in_book(Event:symbol, Book:symbol)\nHappens_in_book(\"Daniel thrown into the lion's den\", \"Daniel\").\n.decl Is_in_Bible(Book:symbol)\nIs_in_Bible(\"Daniel\").\n.decl Answer()\nAnswer() :- Happens_in_book(\"Daniel thrown into the lion's den\", book), Is_in_Bible(book).\n.output Answer", "completions": [".decl Happens_in_book(Event:symbol, Book:symbol)\nHappens_in_book(\"Daniel thrown into the lion's den\", \"Daniel\").\n.decl Is_in_Bible(Book:symbol)\nIs_in_Bible(\"Daniel\").\n.decl Answer()\nAnswer() :- Happens_in_book(\"Daniel thrown into the lion's den\", book), Is_in_Bible(book).\n.output Answer"]}
{"id": 166, "answer": true, "completion": ".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"elephant pregnancy\", 640).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"solar eclipse\", 365.25).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"solar eclipse\", n_days1), Lasts_n_days(\"elephant pregnancy\", n_days2), n_days2 > n_days1.\n.output Answer", "completions": [".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"elephant pregnancy\", 640).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"solar eclipse\", 365.25).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"solar eclipse\", n_days1), Lasts_n_days(\"elephant pregnancy\", n_days2), n_days2 > n_days1.\n.output Answer"]}
{"id": 167, "answer": true, "completion": ".decl Has_meaning(Word:symbol, Language:symbol)\nHas_meaning(\"swastika\", \"sanskrit\").\n.decl Answer()\nHas_meaning(word, \"sanskrit\").\n.output Answer", "completions": [".decl Has_meaning(Word:symbol, Language:symbol)\nHas_meaning(\"swastika\", \"sanskrit\").\n.decl Answer()\nHas_meaning(word, \"sanskrit\").\n.output Answer"]}
{"id": 168, "answer": true, "completion": ".decl Has_sales(Company:symbol, Sales:float)\nHas_sales(\"Sony\", 100).\nHas_sales(\"Sega\", 50).\n.decl Answer()\nAnswer() :- Has_sales(\"Sony\", sales1), Has_sales(\"Sega\", sales2), sales1 > sales2.\n.output Answer", "completions": [".decl Has_sales(Company:symbol, Sales:float)\nHas_sales(\"Sony\", 100).\nHas_sales(\"Sega\", 50).\n.decl Answer()\nAnswer() :- Has_sales(\"Sony\", sales1), Has_sales(\"Sega\", sales2), sales1 > sales2.\n.output Answer"]}
{"id": 169, "answer": false, "completion": ".decl Teaches(Professor:symbol, Class:symbol)\nTeaches(\"ethics professor\", \"ethics\").\nTeaches(\"art history professor\", \"Cezanne\").\n.decl Answer()\nAnswer() :- Teaches(\"ethics professor\", \"Cezanne\").\n.output Answer", "completions": [".decl Teaches(Professor:symbol, Class:symbol)\nTeaches(\"ethics professor\", \"ethics\").\nTeaches(\"art history professor\", \"Cezanne\").\n.decl Answer()\nAnswer() :- Teaches(\"ethics professor\", \"Cezanne\").\n.output Answer"]}
{"id": 170, "answer": false, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 171, "answer": true, "completion": ".decl Discovered_by(Object:symbol, Person:symbol)\nDiscovered_by(\"Durian trees\", \"Alexander the Great\").\nDiscovered_by(\"Durian trees\", \"Marco Polo\").\nDiscovered_by(\"Durian trees\", \"Ferdinand Magellan\").\nDiscovered_by(\"Durian trees\", \"Christopher Columbus\").\n.decl Answer()\nAnswer() :- Discovered_by(\"Durian trees\", \"Christopher Columbus\"), Discovered_by(\"Durian trees\", person), person != \"Christopher Columbus\".\n.output Answer", "completions": [".decl Discovered_by(Object:symbol, Person:symbol)\nDiscovered_by(\"Durian trees\", \"Alexander the Great\").\nDiscovered_by(\"Durian trees\", \"Marco Polo\").\nDiscovered_by(\"Durian trees\", \"Ferdinand Magellan\").\nDiscovered_by(\"Durian trees\", \"Christopher Columbus\").\n.decl Answer()\nAnswer() :- Discovered_by(\"Durian trees\", \"Christopher Columbus\"), Discovered_by(\"Durian trees\", person), person != \"Christopher Columbus\".\n.output Answer"]}
{"id": 172, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Chrysler\", 4.2).\nHas_volume(\"laptop bag\", 0.1).\n.decl Answer()\nAnswer() :- Has_volume(\"Chrysler\", volume1), Has_volume(\"laptop bag\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Chrysler\", 4.2).\nHas_volume(\"laptop bag\", 0.1).\n.decl Answer()\nAnswer() :- Has_volume(\"Chrysler\", volume1), Has_volume(\"laptop bag\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 173, "answer": false, "completion": ".decl Has_survived(Astronaut:symbol, Journey:symbol)\nHas_survived(\"Neil Armstrong\", \"Apollo 11\").\nHas_survived(\"Buzz Aldrin\", \"Apollo 11\").\nHas_survived(\"Pete Conrad\", \"Apollo 12\").\nHas_survived(\"Alan Bean\", \"Apollo 12\").\nHas_survived(\"Charles Conrad\", \"Skylab 2\").\nHas_survived(\"Paul Weitz\", \"Skylab 2\").\nHas_survived(\"Joseph P. Kerwin\", \"Skylab 2\").\nHas_survived(\"Alan L. Bean\", \"Skylab 3\").\nHas_survived(\"Owen K. Garriott\", \"Skylab 3\").\nHas_survived(\"Jack R. Lousma\", \"Skylab 3\").\nHas_survived(\"Gerald P. Carr\", \"Skylab 4\").\nHas_survived(\"William R. Pogue\", \"Skylab 4\").\nHas_survived(\"Edward G. Gibson\", \"Skylab 4\").\nHas_survived(\"Vance D. Brand\", \"Apollo-Soyuz Test Project\").\nHas_survived(\"Donald K. Slayton\", \"Apollo-Soyuz Test Project\").\nHas_survived(\"Thomas P. Stafford\", \"Apollo-Soyuz Test Project\").\nHas_survived(\"Deke Slayton\", \"Apollo-Soyuz Test Project\").\nHas_survived(\"Robert L. Crippen\", \"STS-1\").\nHas_survived(\"John W. Young\", \"STS-1\").\nHas_survived(\"Richard H. Truly\", \"STS-2\").\nHas_survived(\"Joseph P. Allen\", \"STS-2\").\nHas_survived(\"Jack R. Lousma\", \"STS-3\").\nHas_survived(\"Gerald P. Carr\", \"STS-3\").\nHas_survived(\"C. Gordon Fullerton\", \"STS-3\").\nHas_survived(\"Henry W. Hartsfield\", \"STS-4\").\nHas_survived(\"Michael L. Coats\", \"STS-4\").\nHas_survived(\"Vance D. Brand\", \"STS-5\").\nHas_survived(\"Robert F. Overmyer\", \"STS-5\").\nHas_survived(\"William B. Lenoir\", \"STS-5\").\nHas_survived(\"Joseph P. Allen\", \"STS-5\").\nHas_survived(\"Paul J. Weitz\", \"STS-6\").\nHas_survived(\"Don L. Peterson\", \"STS-6\").\nHas_survived(\"Karol J. Bobko\", \"STS-6\").\nHas_survived(\"Donald H. Peterson\", \"STS-6\").\nHas_survived(\"Story Musgrave\", \"STS-6\").\nHas_survived(\"Robert L. Crippen\", \"STS-7\").\nHas_survived(\"Frederick H. Hauck\", \"STS-7\").\nHas_survived(\"John M. Fabian\", \"STS-7\").\nHas_survived(\"Sally K. Ride\", \"STS-7\").\nHas_survived(\"Norman E. Thagard\", \"STS-7\").\nHas_survived(\"Robert L. Crippen\", \"STS-41-C\").\nHas_survived(\"Jon A. McBride\", \"STS-41-C\").\nHas_survived(\"Terry J. Hart\", \"STS-41-C\").\nHas_survived(\"George D. Nelson\", \"STS", "completions": [".decl Has_survived(Astronaut:symbol, Journey:symbol)\nHas_survived(\"Neil Armstrong\", \"Apollo 11\").\nHas_survived(\"Buzz Aldrin\", \"Apollo 11\").\nHas_survived(\"Pete Conrad\", \"Apollo 12\").\nHas_survived(\"Alan Bean\", \"Apollo 12\").\nHas_survived(\"Charles Conrad\", \"Skylab 2\").\nHas_survived(\"Paul Weitz\", \"Skylab 2\").\nHas_survived(\"Joseph P. Kerwin\", \"Skylab 2\").\nHas_survived(\"Alan L. Bean\", \"Skylab 3\").\nHas_survived(\"Owen K. Garriott\", \"Skylab 3\").\nHas_survived(\"Jack R. Lousma\", \"Skylab 3\").\nHas_survived(\"Gerald P. Carr\", \"Skylab 4\").\nHas_survived(\"William R. Pogue\", \"Skylab 4\").\nHas_survived(\"Edward G. Gibson\", \"Skylab 4\").\nHas_survived(\"Vance D. Brand\", \"Apollo-Soyuz Test Project\").\nHas_survived(\"Donald K. Slayton\", \"Apollo-Soyuz Test Project\").\nHas_survived(\"Thomas P. Stafford\", \"Apollo-Soyuz Test Project\").\nHas_survived(\"Deke Slayton\", \"Apollo-Soyuz Test Project\").\nHas_survived(\"Robert L. Crippen\", \"STS-1\").\nHas_survived(\"John W. Young\", \"STS-1\").\nHas_survived(\"Richard H. Truly\", \"STS-2\").\nHas_survived(\"Joseph P. Allen\", \"STS-2\").\nHas_survived(\"Jack R. Lousma\", \"STS-3\").\nHas_survived(\"Gerald P. Carr\", \"STS-3\").\nHas_survived(\"C. Gordon Fullerton\", \"STS-3\").\nHas_survived(\"Henry W. Hartsfield\", \"STS-4\").\nHas_survived(\"Michael L. Coats\", \"STS-4\").\nHas_survived(\"Vance D. Brand\", \"STS-5\").\nHas_survived(\"Robert F. Overmyer\", \"STS-5\").\nHas_survived(\"William B. Lenoir\", \"STS-5\").\nHas_survived(\"Joseph P. Allen\", \"STS-5\").\nHas_survived(\"Paul J. Weitz\", \"STS-6\").\nHas_survived(\"Don L. Peterson\", \"STS-6\").\nHas_survived(\"Karol J. Bobko\", \"STS-6\").\nHas_survived(\"Donald H. Peterson\", \"STS-6\").\nHas_survived(\"Story Musgrave\", \"STS-6\").\nHas_survived(\"Robert L. Crippen\", \"STS-7\").\nHas_survived(\"Frederick H. Hauck\", \"STS-7\").\nHas_survived(\"John M. Fabian\", \"STS-7\").\nHas_survived(\"Sally K. Ride\", \"STS-7\").\nHas_survived(\"Norman E. Thagard\", \"STS-7\").\nHas_survived(\"Robert L. Crippen\", \"STS-41-C\").\nHas_survived(\"Jon A. McBride\", \"STS-41-C\").\nHas_survived(\"Terry J. Hart\", \"STS-41-C\").\nHas_survived(\"George D. Nelson\", \"STS"]}
{"id": 174, "answer": false, "completion": ".decl Has_term_length(Position:symbol, Term_length:float)\nHas_term_length(\"Supreme Court of the United States\", life).\nHas_term_length(\"senator\", 6).\n.decl Answer()\nAnswer() :- Has_term_length(\"Supreme Court of the United States\", term_length1), Has_term_length(\"senator\", term_length2), term_length1 > term_length2.\n.output Answer", "completions": [".decl Has_term_length(Position:symbol, Term_length:float)\nHas_term_length(\"Supreme Court of the United States\", life).\nHas_term_length(\"senator\", 6).\n.decl Answer()\nAnswer() :- Has_term_length(\"Supreme Court of the United States\", term_length1), Has_term_length(\"senator\", term_length2), term_length1 > term_length2.\n.output Answer"]}
{"id": 175, "answer": false, "completion": ".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Dante\", \"1300s\").\nLives_in_time(\"Nostradamus\", \"1500s\").\n.decl Places_in_circle(Person:symbol, Circle:float)\nPlaces_in_circle(\"Dante\", 3).\n.decl Answer()\nAnswer() :- Lives_in_time(\"Dante\", time1), Lives_in_time(\"Nostradamus\", time2), time1 < time2, Places_in_circle(\"Dante\", circle).\n.output Answer", "completions": [".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Dante\", \"1300s\").\nLives_in_time(\"Nostradamus\", \"1500s\").\n.decl Places_in_circle(Person:symbol, Circle:float)\nPlaces_in_circle(\"Dante\", 3).\n.decl Answer()\nAnswer() :- Lives_in_time(\"Dante\", time1), Lives_in_time(\"Nostradamus\", time2), time1 < time2, Places_in_circle(\"Dante\", circle).\n.output Answer"]}
{"id": 176, "answer": true, "completion": ".decl Founded_in_year(Company:symbol, Year:float)\nFounded_in_year(\"Mercedes-Benz\", 1886).\n.decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Nazi rule\", 12).\n.decl Answer()\nAnswer() :- Founded_in_year(\"Mercedes-Benz\", year1), Lasted_for_n_years(\"Nazi rule\", year2), year1 <= year2.\n.output Answer", "completions": [".decl Founded_in_year(Company:symbol, Year:float)\nFounded_in_year(\"Mercedes-Benz\", 1886).\n.decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Nazi rule\", 12).\n.decl Answer()\nAnswer() :- Founded_in_year(\"Mercedes-Benz\", year1), Lasted_for_n_years(\"Nazi rule\", year2), year1 <= year2.\n.output Answer"]}
{"id": 177, "answer": true, "completion": ".decl Has_area(Resort:symbol, Area:float)\nHas_area(\"Disneyland Paris\", 30).\nHas_area(\"Disneyland\", 85).\nHas_area(\"Disney World\", 43).\n.decl Answer()\nAnswer() :- Has_area(\"Disneyland Paris\", area1), Has_area(\"Disneyland\", area2), Has_area(\"Disney World\", area3), area1 > area2, area1 > area3.\n.output Answer", "completions": [".decl Has_area(Resort:symbol, Area:float)\nHas_area(\"Disneyland Paris\", 30).\nHas_area(\"Disneyland\", 85).\nHas_area(\"Disney World\", 43).\n.decl Answer()\nAnswer() :- Has_area(\"Disneyland Paris\", area1), Has_area(\"Disneyland\", area2), Has_area(\"Disney World\", area3), area1 > area2, area1 > area3.\n.output Answer"]}
{"id": 178, "answer": false, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Rockettes\", \"female\").\n.decl Answer()\nAnswer() :- Has_gender(\"Rockettes\", \"female\").\n.output Answer", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Rockettes\", \"female\").\n.decl Answer()\nAnswer() :- Has_gender(\"Rockettes\", \"female\").\n.output Answer"]}
{"id": 179, "answer": true, "completion": ".decl Has_limbs(Animal:symbol, Limbs:float)\nHas_limbs(\"sea turtle\", 0).\n.decl Answer()\nAnswer() :- Has_limbs(\"sea turtle\", limbs), limbs > 0.\n.output Answer", "completions": [".decl Has_limbs(Animal:symbol, Limbs:float)\nHas_limbs(\"sea turtle\", 0).\n.decl Answer()\nAnswer() :- Has_limbs(\"sea turtle\", limbs), limbs > 0.\n.output Answer"]}
{"id": 180, "answer": false, "completion": ".decl Invented(Person:symbol, Idea:symbol)\nInvented(\"Donald Trump\", \"The Apprentice\").\n.decl Answer()\nAnswer() :- Invented(\"Donald Trump\", \"New York Harbor\").\n.output Answer", "completions": [".decl Invented(Person:symbol, Idea:symbol)\nInvented(\"Donald Trump\", \"The Apprentice\").\n.decl Answer()\nAnswer() :- Invented(\"Donald Trump\", \"New York Harbor\").\n.output Answer"]}
{"id": 181, "answer": true, "completion": ".decl Has_purpose(Object:symbol, Purpose:symbol)\nHas_purpose(\"paypal\", \"financial transactions\").\nHas_purpose(\"drug deals\", \"illegal transactions\").\n.decl Answer()\nAnswer() :- Has_purpose(\"paypal\", purpose1), Has_purpose(\"drug deals\", purpose2), purpose1 != purpose2.\n.output Answer", "completions": [".decl Has_purpose(Object:symbol, Purpose:symbol)\nHas_purpose(\"paypal\", \"financial transactions\").\nHas_purpose(\"drug deals\", \"illegal transactions\").\n.decl Answer()\nAnswer() :- Has_purpose(\"paypal\", purpose1), Has_purpose(\"drug deals\", purpose2), purpose1 != purpose2.\n.output Answer"]}
{"id": 182, "answer": false, "completion": ".decl Has_poison(Food:symbol, Poison:symbol)\nHas_poison(\"kidney\", \"potassium cyanide\").\n.decl Answer()\nAnswer() :- Has_poison(\"kidney\", poison).\n.output Answer", "completions": [".decl Has_poison(Food:symbol, Poison:symbol)\nHas_poison(\"kidney\", \"potassium cyanide\").\n.decl Answer()\nAnswer() :- Has_poison(\"kidney\", poison).\n.output Answer"]}
{"id": 183, "answer": true, "completion": ".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"shrimp\", \"delicious\").\nHas_taste(\"shrimp\", \"disgusting\").\n.decl Answer()\nAnswer() :- Has_taste(\"shrimp\", taste), taste = \"delicious\".\n.output Answer", "completions": [".decl Has_taste(Food:symbol, Taste:symbol)\nHas_taste(\"shrimp\", \"delicious\").\nHas_taste(\"shrimp\", \"disgusting\").\n.decl Answer()\nAnswer() :- Has_taste(\"shrimp\", taste), taste = \"delicious\".\n.output Answer"]}
{"id": 184, "answer": true, "completion": ".decl Weighs_more_than(Object1:symbol, Object2:symbol)\nWeighs_more_than(\"African elephant\", \"Hulk\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"African elephant\", \"Hulk\").\n.output Answer", "completions": [".decl Weighs_more_than(Object1:symbol, Object2:symbol)\nWeighs_more_than(\"African elephant\", \"Hulk\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"African elephant\", \"Hulk\").\n.output Answer"]}
{"id": 185, "answer": true, "completion": ".decl Founded_in_year(Organization:symbol, Year:float)\nFounded_in_year(\"Worcester College, Oxford\", 1283).\nFounded_in_year(\"USA\", 1776).\n.decl Answer()\nAnswer() :- Founded_in_year(\"Worcester College, Oxford\", year1), Founded_in_year(\"USA\", year2), year1 < year2.\n.output Answer", "completions": [".decl Founded_in_year(Organization:symbol, Year:float)\nFounded_in_year(\"Worcester College, Oxford\", 1283).\nFounded_in_year(\"USA\", 1776).\n.decl Answer()\nAnswer() :- Founded_in_year(\"Worcester College, Oxford\", year1), Founded_in_year(\"USA\", year2), year1 < year2.\n.output Answer"]}
{"id": 186, "answer": true, "completion": ".decl Named_after(Object:symbol, Person:symbol)\nNamed_after(\"Saturn\", \"Cronus\").\n.decl Is_god(Person:symbol)\nIs_god(\"Cronus\").\n.decl Answer()\nAnswer() :- Named_after(\"Saturn\", person), Is_god(person).\n.output Answer", "completions": [".decl Named_after(Object:symbol, Person:symbol)\nNamed_after(\"Saturn\", \"Cronus\").\n.decl Is_god(Person:symbol)\nIs_god(\"Cronus\").\n.decl Answer()\nAnswer() :- Named_after(\"Saturn\", person), Is_god(person).\n.output Answer"]}
{"id": 187, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"American Independence Day\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"American Independence Day\", season), season != \"autumn\".\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"American Independence Day\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"American Independence Day\", season), season != \"autumn\".\n.output Answer"]}
{"id": 188, "answer": true, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"Albany, Georgia\", 77.434).\nHas_population(\"Albany, New York\", 97.856).\nHas_population(\"Albany, Oregon\", 50.158).\n.decl Answer()\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, New York\", population2), population1 > population2.\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, Oregon\", population2), population1 > population2.\n.output Answer", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"Albany, Georgia\", 77.434).\nHas_population(\"Albany, New York\", 97.856).\nHas_population(\"Albany, Oregon\", 50.158).\n.decl Answer()\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, New York\", population2), population1 > population2.\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, Oregon\", population2), population1 > population2.\n.output Answer"]}
{"id": 189, "answer": true, "completion": ".decl Founded_by(Company:symbol, Founder:symbol)\nFounded_by(\"Skype\", \"Niklas Zennstrom\").\nFounded_by(\"Skype\", \"Janus Friis\").\n.decl Is_from(Person:symbol, Continent:symbol)\nIs_from(\"Niklas Zennstrom\", \"Europe\").\nIs_from(\"Janus Friis\", \"Europe\").\n.decl Answer()\nAnswer() :- Founded_by(\"Skype\", founder), Is_from(founder, \"Asia\").\n.output Answer", "completions": [".decl Founded_by(Company:symbol, Founder:symbol)\nFounded_by(\"Skype\", \"Niklas Zennstrom\").\nFounded_by(\"Skype\", \"Janus Friis\").\n.decl Is_from(Person:symbol, Continent:symbol)\nIs_from(\"Niklas Zennstrom\", \"Europe\").\nIs_from(\"Janus Friis\", \"Europe\").\n.decl Answer()\nAnswer() :- Founded_by(\"Skype\", founder), Is_from(founder, \"Asia\").\n.output Answer"]}
{"id": 190, "answer": true, "completion": ".decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"January\", 31).\nHas_n_days(\"February\", 28).\nHas_n_days(\"March\", 31).\nHas_n_days(\"April\", 30).\nHas_n_days(\"May\", 31).\nHas_n_days(\"June\", 30).\nHas_n_days(\"July\", 31).\nHas_n_days(\"August\", 31).\nHas_n_days(\"September\", 30).\nHas_n_days(\"October\", 31).\nHas_n_days(\"November\", 30).\nHas_n_days(\"December\", 31).\n.decl Answer()\nAnswer() :- Has_n_days(month, n_days), n_days >= 27, n_days <= 31.\nAnswer() :- Has_n_days(month1, n_days1), Has_n_days(month2, n_days2), n_days1 >= 27, n_days1 <= 31, n_days2 >= 27, n_days2 <= 31, n_days1 + n_days2 >= 27, n_days1 + n_days2 <= 31.\nAnswer() :- Has_n_days(month1, n_days1), Has_n_days(month2, n_days2), Has_n_days(month3, n_days3), n_days1 >= 27, n_days1 <= 31, n_days2 >= 27, n_days2 <= 31, n_days3 >= 27, n_days3 <= 31, n_days1 + n_days2 + n_days3 >= 27, n_days1 + n_days2 + n_days3 <= 31.\nAnswer() :- Has_n_days(month1, n_days1), Has_n_days(month2, n_days2), Has_n_days(month3, n_days3), Has_n_days(month4, n_days4), n_days1 >= 27, n_days1 <= 31, n_days2 >= 27, n_days2 <= 31, n_days3 >= 27, n_days3 <= 31, n_days4 >= 27, n_days4 <= 31, n_days1 + n_days2 + n_days3 + n_days4 >= 27, n_days1 + n_days2 + n_days3 + n_days4 <= 31.\nAnswer() :- Has_n_days(month1, n_days1), Has_n_days(month2, n_days2), Has_n_days(month3, n_days3), Has_n_days(month4, n_days4), Has_n_days(month5, n_days5), n_days1 >= 27, n_days1 <= 31, n_days2 >= 27, n_days2 <= 31, n_days3 >= 27, n_days3 <= 31, n_days4 >= 27, n_days4 <= 31, n_days5 >= 27, n_days5 <= 31, n_days1 + n_days2 + n_days3 + n_days4 + n_days5 >= 27, n_days1 + n_days2 + n_days3 + n_days4 + n_days5 <= 31.\nAnswer() :- Has_n_days(month1, n_days1), Has_n_days(month2, n_days2), Has_n_days(month3, n_days3),", "completions": [".decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"January\", 31).\nHas_n_days(\"February\", 28).\nHas_n_days(\"March\", 31).\nHas_n_days(\"April\", 30).\nHas_n_days(\"May\", 31).\nHas_n_days(\"June\", 30).\nHas_n_days(\"July\", 31).\nHas_n_days(\"August\", 31).\nHas_n_days(\"September\", 30).\nHas_n_days(\"October\", 31).\nHas_n_days(\"November\", 30).\nHas_n_days(\"December\", 31).\n.decl Answer()\nAnswer() :- Has_n_days(month, n_days), n_days >= 27, n_days <= 31.\nAnswer() :- Has_n_days(month1, n_days1), Has_n_days(month2, n_days2), n_days1 >= 27, n_days1 <= 31, n_days2 >= 27, n_days2 <= 31, n_days1 + n_days2 >= 27, n_days1 + n_days2 <= 31.\nAnswer() :- Has_n_days(month1, n_days1), Has_n_days(month2, n_days2), Has_n_days(month3, n_days3), n_days1 >= 27, n_days1 <= 31, n_days2 >= 27, n_days2 <= 31, n_days3 >= 27, n_days3 <= 31, n_days1 + n_days2 + n_days3 >= 27, n_days1 + n_days2 + n_days3 <= 31.\nAnswer() :- Has_n_days(month1, n_days1), Has_n_days(month2, n_days2), Has_n_days(month3, n_days3), Has_n_days(month4, n_days4), n_days1 >= 27, n_days1 <= 31, n_days2 >= 27, n_days2 <= 31, n_days3 >= 27, n_days3 <= 31, n_days4 >= 27, n_days4 <= 31, n_days1 + n_days2 + n_days3 + n_days4 >= 27, n_days1 + n_days2 + n_days3 + n_days4 <= 31.\nAnswer() :- Has_n_days(month1, n_days1), Has_n_days(month2, n_days2), Has_n_days(month3, n_days3), Has_n_days(month4, n_days4), Has_n_days(month5, n_days5), n_days1 >= 27, n_days1 <= 31, n_days2 >= 27, n_days2 <= 31, n_days3 >= 27, n_days3 <= 31, n_days4 >= 27, n_days4 <= 31, n_days5 >= 27, n_days5 <= 31, n_days1 + n_days2 + n_days3 + n_days4 + n_days5 >= 27, n_days1 + n_days2 + n_days3 + n_days4 + n_days5 <= 31.\nAnswer() :- Has_n_days(month1, n_days1), Has_n_days(month2, n_days2), Has_n_days(month3, n_days3),"]}
{"id": 191, "answer": false, "completion": ".decl Retired(Person:symbol, Year:float)\nRetired(\"Eugene Allen\", 1986).\n.decl Ended(War:symbol, Year:float)\nEnded(\"American Civil War\", 1865).\n.decl Answer()\nAnswer() :- Retired(\"Eugene Allen\", year1), Ended(\"American Civil War\", year2), year1 = year2.\n.output Answer", "completions": [".decl Retired(Person:symbol, Year:float)\nRetired(\"Eugene Allen\", 1986).\n.decl Ended(War:symbol, Year:float)\nEnded(\"American Civil War\", 1865).\n.decl Answer()\nAnswer() :- Retired(\"Eugene Allen\", year1), Ended(\"American Civil War\", year2), year1 = year2.\n.output Answer"]}
{"id": 192, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Ramadan\", 1818).\nHappens_in_year(\"Christmas carol\", 1818).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Ramadan\", year1), Happens_in_year(\"Christmas carol\", year2), year1 = year2.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Ramadan\", 1818).\nHappens_in_year(\"Christmas carol\", 1818).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Ramadan\", year1), Happens_in_year(\"Christmas carol\", year2), year1 = year2.\n.output Answer"]}
{"id": 193, "answer": false, "completion": ".decl Lasts_for_n_years(Event:symbol, N_years:float)\nLasts_for_n_years(\"Common Era\", 2017).\nLasts_for_n_years(\"lifespan of some trees\", 3000).\n.decl Answer()\nAnswer() :- Lasts_for_n_years(\"Common Era\", n_years1), Lasts_for_n_years(\"lifespan of some trees\", n_years2), n_years1 < n_years2.\n.output Answer", "completions": [".decl Lasts_for_n_years(Event:symbol, N_years:float)\nLasts_for_n_years(\"Common Era\", 2017).\nLasts_for_n_years(\"lifespan of some trees\", 3000).\n.decl Answer()\nAnswer() :- Lasts_for_n_years(\"Common Era\", n_years1), Lasts_for_n_years(\"lifespan of some trees\", n_years2), n_years1 < n_years2.\n.output Answer"]}
{"id": 194, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Tange Sazen\", \"karate\").\nHas_skill(\"Tange Sazen\", \"swordplay\").\nHas_skill(\"Tange Sazen\", \"archery\").\nHas_skill(\"Tange Sazen\", \"shooting\").\nHas_skill(\"Tange Sazen\", \"acrobatics\").\nHas_skill(\"Tange Sazen\", \"driving\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"lockpicking\").\nHas_skill(\"Tange Sazen\", \"stealth\").\nHas_skill(\"Tange Sazen\", \"explosives\").\nHas_skill(\"Tange Sazen\", \"hand-to-hand combat\").\nHas_skill(\"Tange Sazen\", \"martial arts\").\nHas_skill(\"Tange Sazen\", \"torture\").\nHas_skill(\"Tange Sazen\", \"tracking\").\nHas_skill(\"Tange Sazen\", \"investigation\").\nHas_skill(\"Tange Sazen\", \"interrogation\").\nHas_skill(\"Tange Sazen\", \"intimidation\").\nHas_skill(\"Tange Sazen\", \"seduction\").\nHas_skill(\"Tange Sazen\", \"deception\").\nHas_skill(\"Tange Sazen\", \"persuasion\").\nHas_skill(\"Tange Sazen\", \"forgery\").\nHas_skill(\"Tange Sazen\", \"gambling\").\nHas_skill(\"Tange Sazen\", \"sleight of hand\").\nHas_skill(\"Tange Sazen\", \"pickpocketing\").\nHas_skill(\"Tange Sazen\", \"escape artist\").\nHas_skill(\"Tange Sazen\", \"driving\").\nHas_skill(\"Tange Sazen\", \"piloting\").\nHas_skill(\"Tange Sazen\", \"sailing\").\nHas_skill(\"Tange Sazen\", \"swimming\").\nHas_skill(\"Tange Sazen\", \"survival\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\n", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Tange Sazen\", \"karate\").\nHas_skill(\"Tange Sazen\", \"swordplay\").\nHas_skill(\"Tange Sazen\", \"archery\").\nHas_skill(\"Tange Sazen\", \"shooting\").\nHas_skill(\"Tange Sazen\", \"acrobatics\").\nHas_skill(\"Tange Sazen\", \"driving\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"lockpicking\").\nHas_skill(\"Tange Sazen\", \"stealth\").\nHas_skill(\"Tange Sazen\", \"explosives\").\nHas_skill(\"Tange Sazen\", \"hand-to-hand combat\").\nHas_skill(\"Tange Sazen\", \"martial arts\").\nHas_skill(\"Tange Sazen\", \"torture\").\nHas_skill(\"Tange Sazen\", \"tracking\").\nHas_skill(\"Tange Sazen\", \"investigation\").\nHas_skill(\"Tange Sazen\", \"interrogation\").\nHas_skill(\"Tange Sazen\", \"intimidation\").\nHas_skill(\"Tange Sazen\", \"seduction\").\nHas_skill(\"Tange Sazen\", \"deception\").\nHas_skill(\"Tange Sazen\", \"persuasion\").\nHas_skill(\"Tange Sazen\", \"forgery\").\nHas_skill(\"Tange Sazen\", \"gambling\").\nHas_skill(\"Tange Sazen\", \"sleight of hand\").\nHas_skill(\"Tange Sazen\", \"pickpocketing\").\nHas_skill(\"Tange Sazen\", \"escape artist\").\nHas_skill(\"Tange Sazen\", \"driving\").\nHas_skill(\"Tange Sazen\", \"piloting\").\nHas_skill(\"Tange Sazen\", \"sailing\").\nHas_skill(\"Tange Sazen\", \"swimming\").\nHas_skill(\"Tange Sazen\", \"survival\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\nHas_skill(\"Tange Sazen\", \"disguise\").\n"]}
{"id": 195, "answer": false, "completion": ".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"Brussels sprout\", \"vitamin C\").\nHas_nutrient(\"Brussels sprout\", \"glucosinolates\").\nHas_nutrient(\"Brussels sprout\", \"sulforaphane\").\nHas_nutrient(\"Brussels sprout\", \"indole-3-carbinol\").\nHas_nutrient(\"Brussels sprout\", \"isothiocyanates\").\nHas_nutrient(\"Brussels sprout\", \"glutathione\").\nHas_nutrient(\"Brussels sprout\", \"dietary fiber\").\nHas_nutrient(\"Brussels sprout\", \"folate\").\nHas_nutrient(\"Brussels sprout\", \"potassium\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B6\").\nHas_nutrient(\"Brussels sprout\", \"vitamin K\").\nHas_nutrient(\"Brussels sprout\", \"calcium\").\nHas_nutrient(\"Brussels sprout\", \"manganese\").\nHas_nutrient(\"Brussels sprout\", \"magnesium\").\nHas_nutrient(\"Brussels sprout\", \"phosphorus\").\nHas_nutrient(\"Brussels sprout\", \"zinc\").\nHas_nutrient(\"Brussels sprout\", \"copper\").\nHas_nutrient(\"Brussels sprout\", \"selenium\").\nHas_nutrient(\"Brussels sprout\", \"omega-3 fatty acids\").\nHas_nutrient(\"Brussels sprout\", \"protein\").\nHas_nutrient(\"Brussels sprout\", \"vitamin E\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B1\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B2\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B3\").\nHas_nutrient(\"Brussels sprout\", \"pantothenic acid\").\nHas_nutrient(\"Brussels sprout\", \"choline\").\nHas_nutrient(\"Brussels sprout\", \"betaine\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B5\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B9\").\nHas_nutrient(\"Brussels sprout\", \"iron\").\nHas_nutrient(\"Brussels sprout\", \"beta-carotene\").\nHas_nutrient(\"Brussels sprout\", \"lutein\").\nHas_nutrient(\"Brussels sprout\", \"zeaxanthin\").\nHas_nutrient(\"Brussels sprout\", \"vitamin A\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B12\").\nHas_nutrient(\"Brussels sprout\", \"vitamin D\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B8\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B7\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B11\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B10\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B13\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B15\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B14\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B17\").\nHas_nutrient(\"Brus", "completions": [".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"Brussels sprout\", \"vitamin C\").\nHas_nutrient(\"Brussels sprout\", \"glucosinolates\").\nHas_nutrient(\"Brussels sprout\", \"sulforaphane\").\nHas_nutrient(\"Brussels sprout\", \"indole-3-carbinol\").\nHas_nutrient(\"Brussels sprout\", \"isothiocyanates\").\nHas_nutrient(\"Brussels sprout\", \"glutathione\").\nHas_nutrient(\"Brussels sprout\", \"dietary fiber\").\nHas_nutrient(\"Brussels sprout\", \"folate\").\nHas_nutrient(\"Brussels sprout\", \"potassium\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B6\").\nHas_nutrient(\"Brussels sprout\", \"vitamin K\").\nHas_nutrient(\"Brussels sprout\", \"calcium\").\nHas_nutrient(\"Brussels sprout\", \"manganese\").\nHas_nutrient(\"Brussels sprout\", \"magnesium\").\nHas_nutrient(\"Brussels sprout\", \"phosphorus\").\nHas_nutrient(\"Brussels sprout\", \"zinc\").\nHas_nutrient(\"Brussels sprout\", \"copper\").\nHas_nutrient(\"Brussels sprout\", \"selenium\").\nHas_nutrient(\"Brussels sprout\", \"omega-3 fatty acids\").\nHas_nutrient(\"Brussels sprout\", \"protein\").\nHas_nutrient(\"Brussels sprout\", \"vitamin E\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B1\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B2\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B3\").\nHas_nutrient(\"Brussels sprout\", \"pantothenic acid\").\nHas_nutrient(\"Brussels sprout\", \"choline\").\nHas_nutrient(\"Brussels sprout\", \"betaine\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B5\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B9\").\nHas_nutrient(\"Brussels sprout\", \"iron\").\nHas_nutrient(\"Brussels sprout\", \"beta-carotene\").\nHas_nutrient(\"Brussels sprout\", \"lutein\").\nHas_nutrient(\"Brussels sprout\", \"zeaxanthin\").\nHas_nutrient(\"Brussels sprout\", \"vitamin A\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B12\").\nHas_nutrient(\"Brussels sprout\", \"vitamin D\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B8\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B7\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B11\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B10\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B13\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B15\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B14\").\nHas_nutrient(\"Brussels sprout\", \"vitamin B17\").\nHas_nutrient(\"Brus"]}
{"id": 196, "answer": true, "completion": ".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Adam Sandler\", \"Christmas\").\n.decl Answer()\nAnswer() :- !Celebrates(\"Adam Sandler\", \"Easter\").\n.output Answer", "completions": [".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Adam Sandler\", \"Christmas\").\n.decl Answer()\nAnswer() :- !Celebrates(\"Adam Sandler\", \"Easter\").\n.output Answer"]}
{"id": 197, "answer": false, "completion": ".decl Begins_on_day(Month:symbol, Day:symbol)\nBegins_on_day(\"February\", \"Sunday\").\nBegins_on_day(\"March\", \"Sunday\").\n.decl Answer()\nAnswer() :- Begins_on_day(\"February\", day), Begins_on_day(\"March\", day).\n.output Answer", "completions": [".decl Begins_on_day(Month:symbol, Day:symbol)\nBegins_on_day(\"February\", \"Sunday\").\nBegins_on_day(\"March\", \"Sunday\").\n.decl Answer()\nAnswer() :- Begins_on_day(\"February\", day), Begins_on_day(\"March\", day).\n.output Answer"]}
{"id": 198, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Shiva's divine dance\", 50000).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"ancient physical fitness pose\", 100000).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"ancient physical fitness pose\", n_years1), Last_n_years(\"Shiva's divine dance\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Shiva's divine dance\", 50000).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"ancient physical fitness pose\", 100000).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"ancient physical fitness pose\", n_years1), Last_n_years(\"Shiva's divine dance\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 199, "answer": true, "completion": ".decl Possesses(Empire:symbol, Land:symbol)\nPossesses(\"Islamic empire\", \"Land of Israel\").\n.decl Happens_in_century(Event:symbol, Century:float)\nHappens_in_century(\"Land of Israel in possession of an Islamic empire\", 16).\n.decl Answer()\nAnswer() :- Possesses(\"Islamic empire\", \"Land of Israel\"), Happens_in_century(\"Land of Israel in possession of an Islamic empire\", 16).\n.output Answer", "completions": [".decl Possesses(Empire:symbol, Land:symbol)\nPossesses(\"Islamic empire\", \"Land of Israel\").\n.decl Happens_in_century(Event:symbol, Century:float)\nHappens_in_century(\"Land of Israel in possession of an Islamic empire\", 16).\n.decl Answer()\nAnswer() :- Possesses(\"Islamic empire\", \"Land of Israel\"), Happens_in_century(\"Land of Israel in possession of an Islamic empire\", 16).\n.output Answer"]}
{"id": 200, "answer": false, "completion": ".decl Has_class(Person:symbol, Class:symbol)\nHas_class(\"Medieval English lords\", \"upper class\").\nHas_class(\"peasants\", \"lower class\").\n.decl Engages_in_trade(Person1:symbol, Person2:symbol)\nEngages_in_trade(\"upper class\", \"lower class\").\n.decl Answer()\nAnswer() :- Has_class(\"Medieval English lords\", class1), Has_class(\"peasants\", class2), Engages_in_trade(class1, class2).\n.output Answer", "completions": [".decl Has_class(Person:symbol, Class:symbol)\nHas_class(\"Medieval English lords\", \"upper class\").\nHas_class(\"peasants\", \"lower class\").\n.decl Engages_in_trade(Person1:symbol, Person2:symbol)\nEngages_in_trade(\"upper class\", \"lower class\").\n.decl Answer()\nAnswer() :- Has_class(\"Medieval English lords\", class1), Has_class(\"peasants\", class2), Engages_in_trade(class1, class2).\n.output Answer"]}
{"id": 201, "answer": false, "completion": ".decl Helps_to_understand(Study:symbol, Subject:symbol)\nHelps_to_understand(\"paleography\", \"ancient manuscripts\").\n.decl Answer()\nAnswer() :- Helps_to_understand(\"paleography\", \"Cthulhu\").\n.output Answer", "completions": [".decl Helps_to_understand(Study:symbol, Subject:symbol)\nHelps_to_understand(\"paleography\", \"ancient manuscripts\").\n.decl Answer()\nAnswer() :- Helps_to_understand(\"paleography\", \"Cthulhu\").\n.output Answer"]}
{"id": 202, "answer": true, "completion": ".decl Has_killed(Event:symbol, Number_killed:float)\nHas_killed(\"jokes\", 0).\nHas_killed(\"rats\", 100000000).\n.decl Answer()\nAnswer() :- Has_killed(\"jokes\", number_killed1), Has_killed(\"rats\", number_killed2), number_killed1 < number_killed2.\n.output Answer", "completions": [".decl Has_killed(Event:symbol, Number_killed:float)\nHas_killed(\"jokes\", 0).\nHas_killed(\"rats\", 100000000).\n.decl Answer()\nAnswer() :- Has_killed(\"jokes\", number_killed1), Has_killed(\"rats\", number_killed2), number_killed1 < number_killed2.\n.output Answer"]}
{"id": 203, "answer": true, "completion": ".decl Is_suicide_method(Method:symbol)\nIs_suicide_method(\"slitting your wrists\").\nIs_suicide_method(\"hanging\").\nIs_suicide_method(\"jumping from a high place\").\nIs_suicide_method(\"taking pills\").\n.decl Is_unreliable_suicide_method(Method:symbol)\nIs_unreliable_suicide_method(\"slitting your wrists\").\nIs_unreliable_suicide_method(\"taking pills\").\n.decl Answer()\nAnswer() :- Is_suicide_method(method), Is_unreliable_suicide_method(method).\n.output Answer", "completions": [".decl Is_suicide_method(Method:symbol)\nIs_suicide_method(\"slitting your wrists\").\nIs_suicide_method(\"hanging\").\nIs_suicide_method(\"jumping from a high place\").\nIs_suicide_method(\"taking pills\").\n.decl Is_unreliable_suicide_method(Method:symbol)\nIs_unreliable_suicide_method(\"slitting your wrists\").\nIs_unreliable_suicide_method(\"taking pills\").\n.decl Answer()\nAnswer() :- Is_suicide_method(method), Is_unreliable_suicide_method(method).\n.output Answer"]}
{"id": 204, "answer": true, "completion": ".decl Is_attributed_to(Event:symbol, Cause:symbol)\nIs_attributed_to(\"rise of agriculture\", \"rivers\").\n.decl Answer()\nAnswer() :- Is_attributed_to(\"rise of agriculture\", \"rivers\").\n.output Answer", "completions": [".decl Is_attributed_to(Event:symbol, Cause:symbol)\nIs_attributed_to(\"rise of agriculture\", \"rivers\").\n.decl Answer()\nAnswer() :- Is_attributed_to(\"rise of agriculture\", \"rivers\").\n.output Answer"]}
{"id": 205, "answer": false, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"sunbathe\", \"beach\").\nHappens_in_place(\"sunbathe\", \"desert\").\nHappens_in_place(\"live\", \"Arctic\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"sunbathe\", place), Happens_in_place(\"live\", place), place = \"Arctic\".\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"sunbathe\", \"beach\").\nHappens_in_place(\"sunbathe\", \"desert\").\nHappens_in_place(\"live\", \"Arctic\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"sunbathe\", place), Happens_in_place(\"live\", place), place = \"Arctic\".\n.output Answer"]}
{"id": 206, "answer": false, "completion": ".decl Has_shift(Telescope:symbol, Shift:symbol)\nHas_shift(\"Goldstone Deep Space Communications Complex\", \"night\").\n.decl Answer()\nAnswer() :- Has_shift(\"Goldstone Deep Space Communications Complex\", \"night\").\n.output Answer", "completions": [".decl Has_shift(Telescope:symbol, Shift:symbol)\nHas_shift(\"Goldstone Deep Space Communications Complex\", \"night\").\n.decl Answer()\nAnswer() :- Has_shift(\"Goldstone Deep Space Communications Complex\", \"night\").\n.output Answer"]}
{"id": 207, "answer": true, "completion": ".decl Has_cost(Show:symbol, Cost:float)\nHas_cost(\"Days of Our Lives\", 1000).\nHas_cost(\"All My Children\", 800).\nHas_cost(\"As the World Turns\", 700).\n.decl Answer()\nAnswer() :- Has_cost(\"Days of Our Lives\", cost1), Has_cost(\"All My Children\", cost2), cost1 > cost2.\nAnswer() :- Has_cost(\"Days of Our Lives\", cost1), Has_cost(\"As the World Turns\", cost2), cost1 > cost2.\n.output Answer", "completions": [".decl Has_cost(Show:symbol, Cost:float)\nHas_cost(\"Days of Our Lives\", 1000).\nHas_cost(\"All My Children\", 800).\nHas_cost(\"As the World Turns\", 700).\n.decl Answer()\nAnswer() :- Has_cost(\"Days of Our Lives\", cost1), Has_cost(\"All My Children\", cost2), cost1 > cost2.\nAnswer() :- Has_cost(\"Days of Our Lives\", cost1), Has_cost(\"As the World Turns\", cost2), cost1 > cost2.\n.output Answer"]}
{"id": 208, "answer": false, "completion": ".decl Likes(Person:symbol, Person_liked:symbol)\nLikes(\"Pikachu\", \"Charles Darwin\").\n.decl Answer()\nAnswer() :- Likes(\"Pikachu\", \"Charles Darwin\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Person_liked:symbol)\nLikes(\"Pikachu\", \"Charles Darwin\").\n.decl Answer()\nAnswer() :- Likes(\"Pikachu\", \"Charles Darwin\").\n.output Answer"]}
{"id": 209, "answer": true, "completion": ".decl Uses_tonsure(Person:symbol)\nUses_tonsure(\"monk\").\n.decl Has_hair_at_top(Person:symbol)\nHas_hair_at_top(\"monk\").\n.decl Answer()\nAnswer() :- Uses_tonsure(person), Has_hair_at_top(person).\n.output Answer", "completions": [".decl Uses_tonsure(Person:symbol)\nUses_tonsure(\"monk\").\n.decl Has_hair_at_top(Person:symbol)\nHas_hair_at_top(\"monk\").\n.decl Answer()\nAnswer() :- Uses_tonsure(person), Has_hair_at_top(person).\n.output Answer"]}
{"id": 210, "answer": false, "completion": ".decl Lives_in_water(Animal:symbol, Water:symbol)\nLives_in_water(\"grey seal\", \"ocean\").\nLives_in_water(\"sperm whale\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in_water(\"grey seal\", water1), Lives_in_water(\"sperm whale\", water2), water1 = water2.\n.output Answer", "completions": [".decl Lives_in_water(Animal:symbol, Water:symbol)\nLives_in_water(\"grey seal\", \"ocean\").\nLives_in_water(\"sperm whale\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in_water(\"grey seal\", water1), Lives_in_water(\"sperm whale\", water2), water1 = water2.\n.output Answer"]}
{"id": 211, "answer": true, "completion": ".decl Has_style(Person:symbol, Style:symbol)\nHas_style(\"Donald Duck\", \"bell-bottoms\").\n.decl Answer()\nAnswer() :- Has_style(\"Donald Duck\", \"bell-bottoms\").\n.output Answer", "completions": [".decl Has_style(Person:symbol, Style:symbol)\nHas_style(\"Donald Duck\", \"bell-bottoms\").\n.decl Answer()\nAnswer() :- Has_style(\"Donald Duck\", \"bell-bottoms\").\n.output Answer"]}
{"id": 212, "answer": true, "completion": ".decl Lives_in(Creature:symbol, Place:symbol)\nLives_in(\"seahorse\", \"Black Sea\").\n.decl Is_ingredient(Thing:symbol, Food:symbol)\nIs_ingredient(\"seahorse\", \"pizza\").\n.decl Answer()\nAnswer() :- Lives_in(\"seahorse\", \"Black Sea\"), Is_ingredient(\"seahorse\", \"pizza\").\n.output Answer", "completions": [".decl Lives_in(Creature:symbol, Place:symbol)\nLives_in(\"seahorse\", \"Black Sea\").\n.decl Is_ingredient(Thing:symbol, Food:symbol)\nIs_ingredient(\"seahorse\", \"pizza\").\n.decl Answer()\nAnswer() :- Lives_in(\"seahorse\", \"Black Sea\"), Is_ingredient(\"seahorse\", \"pizza\").\n.output Answer"]}
{"id": 213, "answer": false, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"funeral\", \"road\").\n.decl Has_traffic_laws(Location:symbol, Traffic_laws:symbol)\nHas_traffic_laws(\"road\", \"special traffic laws\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"funeral\", location), Has_traffic_laws(location, \"special traffic laws\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"funeral\", \"road\").\n.decl Has_traffic_laws(Location:symbol, Traffic_laws:symbol)\nHas_traffic_laws(\"road\", \"special traffic laws\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"funeral\", location), Has_traffic_laws(location, \"special traffic laws\").\n.output Answer"]}
{"id": 214, "answer": true, "completion": ".decl Has_latitude(Location:symbol, Latitude:float)\nHas_latitude(\"home\", 42.36).\n.decl Has_longitude(Location:symbol, Longitude:float)\nHas_longitude(\"home\", -71.06).\n.decl Answer()\nAnswer() :- Has_latitude(\"home\", latitude), Has_longitude(\"home\", longitude).\n.output Answer", "completions": [".decl Has_latitude(Location:symbol, Latitude:float)\nHas_latitude(\"home\", 42.36).\n.decl Has_longitude(Location:symbol, Longitude:float)\nHas_longitude(\"home\", -71.06).\n.decl Answer()\nAnswer() :- Has_latitude(\"home\", latitude), Has_longitude(\"home\", longitude).\n.output Answer"]}
{"id": 215, "answer": false, "completion": ".decl Awaits(Person:symbol, Event:symbol)\nAwaits(\"Woody Allen\", \"Second Coming\").\n.decl Answer()\nAnswer() :- Awaits(\"Woody Allen\", \"Second Coming\").\n.output Answer", "completions": [".decl Awaits(Person:symbol, Event:symbol)\nAwaits(\"Woody Allen\", \"Second Coming\").\n.decl Answer()\nAnswer() :- Awaits(\"Woody Allen\", \"Second Coming\").\n.output Answer"]}
{"id": 216, "answer": true, "completion": ".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"fever\", \"meat\").\n.decl Answer()\nAnswer() :- Causes(\"fever\", \"meat\").\n.output Answer\n\n", "completions": [".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"fever\", \"meat\").\n.decl Answer()\nAnswer() :- Causes(\"fever\", \"meat\").\n.output Answer\n\n"]}
{"id": 217, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Dicopomorpha echmepterygis\", 0.00001).\nHas_mass(\"Uranium pellet\", 0.00001).\n.decl Answer()\nAnswer() :- Has_mass(\"Dicopomorpha echmepterygis\", mass1), Has_mass(\"Uranium pellet\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Dicopomorpha echmepterygis\", 0.00001).\nHas_mass(\"Uranium pellet\", 0.00001).\n.decl Answer()\nAnswer() :- Has_mass(\"Dicopomorpha echmepterygis\", mass1), Has_mass(\"Uranium pellet\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 218, "answer": true, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Christmas\", \"December\").\nHappens_in_month(\"menthol\", \"December\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"Christmas\", \"December\"), Happens_in_month(\"menthol\", \"December\").\n.output Answer", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Christmas\", \"December\").\nHappens_in_month(\"menthol\", \"December\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"Christmas\", \"December\"), Happens_in_month(\"menthol\", \"December\").\n.output Answer"]}
{"id": 219, "answer": true, "completion": ".decl Runs_in_election(Person:symbol, Election:symbol)\nRuns_in_election(\"John Kerry\", \"2010 United States Senate election in Massachusetts\").\n.decl Answer()\nAnswer() :- Runs_in_election(\"John Kerry\", \"2010 United Kingdom general election\").\n.output Answer", "completions": [".decl Runs_in_election(Person:symbol, Election:symbol)\nRuns_in_election(\"John Kerry\", \"2010 United States Senate election in Massachusetts\").\n.decl Answer()\nAnswer() :- Runs_in_election(\"John Kerry\", \"2010 United Kingdom general election\").\n.output Answer"]}
{"id": 220, "answer": true, "completion": ".decl Is_predator(Animal:symbol, Prey:symbol)\nIs_predator(\"Bengal cat\", \"fish\").\n.decl Answer()\nAnswer() :- Is_predator(\"Bengal cat\", \"fish\").\n.output Answer", "completions": [".decl Is_predator(Animal:symbol, Prey:symbol)\nIs_predator(\"Bengal cat\", \"fish\").\n.decl Answer()\nAnswer() :- Is_predator(\"Bengal cat\", \"fish\").\n.output Answer"]}
{"id": 221, "answer": true, "completion": ".decl Has_n_calories(Food:symbol, N_calories:float)\nHas_n_calories(\"pickles\", 50).\n.decl Has_n_servings(Food:symbol, N_servings:float)\nHas_n_servings(\"pickles\", 1).\n.decl Answer()\nAnswer() :- Has_n_calories(\"pickles\", n_calories1), Has_n_servings(\"pickles\", n_servings1), n_calories1/n_servings1 < 100.\n.output Answer", "completions": [".decl Has_n_calories(Food:symbol, N_calories:float)\nHas_n_calories(\"pickles\", 50).\n.decl Has_n_servings(Food:symbol, N_servings:float)\nHas_n_servings(\"pickles\", 1).\n.decl Answer()\nAnswer() :- Has_n_calories(\"pickles\", n_calories1), Has_n_servings(\"pickles\", n_servings1), n_calories1/n_servings1 < 100.\n.output Answer"]}
{"id": 222, "answer": true, "completion": ".decl Takes_place_in(Event:symbol, Location:symbol)\nTakes_place_in(\"Revolutionary Road\", \"suburb\").\n.decl Answer()\nAnswer() :- Takes_place_in(\"Revolutionary Road\", \"suburb\").\n.output Answer", "completions": [".decl Takes_place_in(Event:symbol, Location:symbol)\nTakes_place_in(\"Revolutionary Road\", \"suburb\").\n.decl Answer()\nAnswer() :- Takes_place_in(\"Revolutionary Road\", \"suburb\").\n.output Answer"]}
{"id": 223, "answer": true, "completion": ".decl Is_associated_with(Person:symbol, God:symbol)\nIs_associated_with(\"Hanuman\", \"Rama\").\nIs_associated_with(\"Rama\", \"Vishnu\").\nIs_associated_with(\"Vishnu\", \"Brahma\").\nIs_associated_with(\"Odin\", \"Thor\").\nIs_associated_with(\"Thor\", \"Frigga\").\nIs_associated_with(\"Frigga\", \"Freya\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Hanuman\", god1), Is_associated_with(god1, god2), Is_associated_with(god2, \"Odin\").\n.output Answer", "completions": [".decl Is_associated_with(Person:symbol, God:symbol)\nIs_associated_with(\"Hanuman\", \"Rama\").\nIs_associated_with(\"Rama\", \"Vishnu\").\nIs_associated_with(\"Vishnu\", \"Brahma\").\nIs_associated_with(\"Odin\", \"Thor\").\nIs_associated_with(\"Thor\", \"Frigga\").\nIs_associated_with(\"Frigga\", \"Freya\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Hanuman\", god1), Is_associated_with(god1, god2), Is_associated_with(god2, \"Odin\").\n.output Answer"]}
{"id": 224, "answer": true, "completion": ".decl Requires_room_size(Activity:symbol, Room_size:symbol)\nRequires_room_size(\"3D printing\", \"large\").\n.decl Answer()\nAnswer() :- Requires_room_size(activity, \"large\").\n.output Answer\n\n", "completions": [".decl Requires_room_size(Activity:symbol, Room_size:symbol)\nRequires_room_size(\"3D printing\", \"large\").\n.decl Answer()\nAnswer() :- Requires_room_size(activity, \"large\").\n.output Answer\n\n"]}
{"id": 225, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Robert Stack's 14 season show\", 14).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Tower of London\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Tower of London\", n_years1), Last_n_years(\"Robert Stack's 14 season show\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Robert Stack's 14 season show\", 14).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Tower of London\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Tower of London\", n_years1), Last_n_years(\"Robert Stack's 14 season show\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 226, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sea otter\", \"crab\").\nEats(\"sea otter\", \"clam\").\nEats(\"sea otter\", \"mussel\").\nEats(\"sea otter\", \"snail\").\nEats(\"sea otter\", \"squid\").\nEats(\"sea otter\", \"starfish\").\nEats(\"sea otter\", \"urchin\").\n.decl Answer()\nAnswer() :- Eats(\"sea otter\", \"spider\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sea otter\", \"crab\").\nEats(\"sea otter\", \"clam\").\nEats(\"sea otter\", \"mussel\").\nEats(\"sea otter\", \"snail\").\nEats(\"sea otter\", \"squid\").\nEats(\"sea otter\", \"starfish\").\nEats(\"sea otter\", \"urchin\").\n.decl Answer()\nAnswer() :- Eats(\"sea otter\", \"spider\").\n.output Answer"]}
{"id": 227, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"World War II\", 6).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"The Who tour\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"The Who tour\", n_years1), Last_n_years(\"World War II\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"World War II\", 6).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"The Who tour\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"The Who tour\", n_years1), Last_n_years(\"World War II\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 228, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"nickel\", 5.0).\nHas_mass(\"copper\", 2.5).\n.decl Answer()\nAnswer() :- Has_mass(\"nickel\", mass1), Has_mass(\"copper\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"nickel\", 5.0).\nHas_mass(\"copper\", 2.5).\n.decl Answer()\nAnswer() :- Has_mass(\"nickel\", mass1), Has_mass(\"copper\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 229, "answer": true, "completion": ".decl Costs(Event:symbol, Cost:float)\nCosts(\"running for President of India\", 1000000000).\nCosts(\"buying a new iPhone 11\", 999).\n.decl Answer()\nAnswer() :- Costs(\"running for President of India\", cost1), Costs(\"buying a new iPhone 11\", cost2), cost1 > cost2.\n.output Answer", "completions": [".decl Costs(Event:symbol, Cost:float)\nCosts(\"running for President of India\", 1000000000).\nCosts(\"buying a new iPhone 11\", 999).\n.decl Answer()\nAnswer() :- Costs(\"running for President of India\", cost1), Costs(\"buying a new iPhone 11\", cost2), cost1 > cost2.\n.output Answer"]}
{"id": 230, "answer": true, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"New Year's Day\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"New Year's Day\", day).\n.output Answer", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"New Year's Day\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"New Year's Day\", day).\n.output Answer"]}
{"id": 231, "answer": true, "completion": ".decl Is_target(Person:symbol, Event:symbol)\nIs_target(\"Donald Trump\", \"Islamophobia\").\n.decl Answer()\nAnswer() :- Is_target(\"Donald Trump\", \"Islamophobia\").\n.output Answer", "completions": [".decl Is_target(Person:symbol, Event:symbol)\nIs_target(\"Donald Trump\", \"Islamophobia\").\n.decl Answer()\nAnswer() :- Is_target(\"Donald Trump\", \"Islamophobia\").\n.output Answer"]}
{"id": 232, "answer": true, "completion": ".decl Involves(Movie:symbol, Theme:symbol)\nInvolves(\"Disney's Alice in Wonderland\", \"holiday\").\n.decl Answer()\nAnswer() :- Involves(\"Disney's Alice in Wonderland\", \"holiday\").\n.output Answer", "completions": [".decl Involves(Movie:symbol, Theme:symbol)\nInvolves(\"Disney's Alice in Wonderland\", \"holiday\").\n.decl Answer()\nAnswer() :- Involves(\"Disney's Alice in Wonderland\", \"holiday\").\n.output Answer"]}
{"id": 233, "answer": false, "completion": ".decl Served_under(Person:symbol, Person_in_charge:symbol)\nServed_under(\"François Mitterrand\", \"Charles de Gaulle\").\n.decl Answer()\nAnswer() :- Served_under(\"François Mitterrand\", person_in_charge), Served_under(person_in_charge, \"Napoleon Bonapart\").\n.output Answer", "completions": [".decl Served_under(Person:symbol, Person_in_charge:symbol)\nServed_under(\"François Mitterrand\", \"Charles de Gaulle\").\n.decl Answer()\nAnswer() :- Served_under(\"François Mitterrand\", person_in_charge), Served_under(person_in_charge, \"Napoleon Bonapart\").\n.output Answer"]}
{"id": 234, "answer": false, "completion": ".decl Contains(Food:symbol, Chemical:symbol)\nContains(\"onion\", \"sulfur\").\nContains(\"onion\", \"fluorine\").\nContains(\"onion\", \"chlorine\").\nContains(\"onion\", \"bromine\").\nContains(\"onion\", \"iodine\").\n.decl Answer()\nAnswer() :- Contains(\"onion\", chemical1), Contains(\"onion\", chemical2), Contains(\"onion\", chemical3), Contains(\"onion\", chemical4), Contains(\"onion\", chemical5).\n.output Answer", "completions": [".decl Contains(Food:symbol, Chemical:symbol)\nContains(\"onion\", \"sulfur\").\nContains(\"onion\", \"fluorine\").\nContains(\"onion\", \"chlorine\").\nContains(\"onion\", \"bromine\").\nContains(\"onion\", \"iodine\").\n.decl Answer()\nAnswer() :- Contains(\"onion\", chemical1), Contains(\"onion\", chemical2), Contains(\"onion\", chemical3), Contains(\"onion\", chemical4), Contains(\"onion\", chemical5).\n.output Answer"]}
{"id": 235, "answer": true, "completion": ".decl Is_legal(Action:symbol)\nIs_legal(\"downloading Mario 64 on an emulator\").\n.decl Answer()\nAnswer() :- Is_legal(\"downloading Mario 64 on an emulator\").\n.output Answer", "completions": [".decl Is_legal(Action:symbol)\nIs_legal(\"downloading Mario 64 on an emulator\").\n.decl Answer()\nAnswer() :- Is_legal(\"downloading Mario 64 on an emulator\").\n.output Answer"]}
{"id": 236, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"lunch on the beach\", \"beach\").\nHappens_in_place(\"spot the full circle of a rainbow\", \"beach\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"lunch on the beach\", place), Happens_in_place(\"spot the full circle of a rainbow\", place).\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"lunch on the beach\", \"beach\").\nHappens_in_place(\"spot the full circle of a rainbow\", \"beach\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"lunch on the beach\", place), Happens_in_place(\"spot the full circle of a rainbow\", place).\n.output Answer"]}
{"id": 237, "answer": false, "completion": ".decl Has_n_smoggy_days(City:symbol, N_smoggy_days:float)\nHas_n_smoggy_days(\"Düsseldorf\", 30).\n.decl Answer()\nAnswer() :- Has_n_smoggy_days(\"Düsseldorf\", n_smoggy_days), n_smoggy_days < 100.\n.output Answer", "completions": [".decl Has_n_smoggy_days(City:symbol, N_smoggy_days:float)\nHas_n_smoggy_days(\"Düsseldorf\", 30).\n.decl Answer()\nAnswer() :- Has_n_smoggy_days(\"Düsseldorf\", n_smoggy_days), n_smoggy_days < 100.\n.output Answer"]}
{"id": 238, "answer": true, "completion": ".decl Has_hairline(Person:symbol, Hairline:symbol)\nHas_hairline(\"Elon Musk\", \"receding\").\nHas_hairline(\"Elon Musk\", \"thinning\").\n.decl Answer()\nAnswer() :- Has_hairline(\"Elon Musk\", hairline1), Has_hairline(\"Elon Musk\", hairline2), hairline1 != hairline2.\n.output Answer", "completions": [".decl Has_hairline(Person:symbol, Hairline:symbol)\nHas_hairline(\"Elon Musk\", \"receding\").\nHas_hairline(\"Elon Musk\", \"thinning\").\n.decl Answer()\nAnswer() :- Has_hairline(\"Elon Musk\", hairline1), Has_hairline(\"Elon Musk\", hairline2), hairline1 != hairline2.\n.output Answer"]}
{"id": 239, "answer": true, "completion": ".decl Has_name(Character:symbol, Name:symbol)\nHas_name(\"Marvel villain\", \"Citrus\").\n.decl Answer()\nAnswer() :- Has_name(\"Marvel villain\", \"Citrus\").\n.output Answer", "completions": [".decl Has_name(Character:symbol, Name:symbol)\nHas_name(\"Marvel villain\", \"Citrus\").\n.decl Answer()\nAnswer() :- Has_name(\"Marvel villain\", \"Citrus\").\n.output Answer"]}
{"id": 240, "answer": false, "completion": ".decl Lives_in_region(Person:symbol, Region:symbol)\nLives_in_region(\"person\", \"Canary Islands\").\n.decl Lives_in_region(Fish:symbol, Region:symbol)\nLives_in_region(\"largemouth bass\", \"North America\").\n.decl Answer()\nAnswer() :- Lives_in_region(\"person\", \"Canary Islands\"), Lives_in_region(\"largemouth bass\", \"North America\").\n.output Answer", "completions": [".decl Lives_in_region(Person:symbol, Region:symbol)\nLives_in_region(\"person\", \"Canary Islands\").\n.decl Lives_in_region(Fish:symbol, Region:symbol)\nLives_in_region(\"largemouth bass\", \"North America\").\n.decl Answer()\nAnswer() :- Lives_in_region(\"person\", \"Canary Islands\"), Lives_in_region(\"largemouth bass\", \"North America\").\n.output Answer"]}
{"id": 241, "answer": false, "completion": ".decl Is_ingredient(Food:symbol, Ingredient:symbol)\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"cheese\").\nIs_ingredient(\"pizza\", \"tomato sauce\").\nIs_ingredient(\"pizza\", \"dough\").\nIs_ingredient(\"pizza\", \"pepperoni\").\nIs_ingredient(\"pizza\", \"sausage\").\nIs_ingredient(\"pizza\", \"ham\").\nIs_ingredient(\"pizza\", \"bacon\").\nIs_ingredient(\"pizza\", \"onions\").\nIs_ingredient(\"pizza\", \"peppers\").\nIs_ingredient(\"pizza\", \"olives\").\nIs_ingredient(\"pizza\", \"mushrooms\").\nIs_ingredient(\"pizza\", \"pineapple\").\nIs_ingredient(\"pizza\", \"spinach\").\nIs_ingredient(\"pizza\", \"tomatoes\").\nIs_ingredient(\"pizza\", \"garlic\").\nIs_ingredient(\"pizza\", \"basil\").\nIs_ingredient(\"pizza\", \"oregano\").\nIs_ingredient(\"pizza\", \"eggplant\").\nIs_ingredient(\"pizza\", \"zucchini\").\nIs_ingredient(\"pizza\", \"broccoli\").\nIs_ingredient(\"pizza\", \"chicken\").\nIs_ingredient(\"pizza\", \"beef\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingred", "completions": [".decl Is_ingredient(Food:symbol, Ingredient:symbol)\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"cheese\").\nIs_ingredient(\"pizza\", \"tomato sauce\").\nIs_ingredient(\"pizza\", \"dough\").\nIs_ingredient(\"pizza\", \"pepperoni\").\nIs_ingredient(\"pizza\", \"sausage\").\nIs_ingredient(\"pizza\", \"ham\").\nIs_ingredient(\"pizza\", \"bacon\").\nIs_ingredient(\"pizza\", \"onions\").\nIs_ingredient(\"pizza\", \"peppers\").\nIs_ingredient(\"pizza\", \"olives\").\nIs_ingredient(\"pizza\", \"mushrooms\").\nIs_ingredient(\"pizza\", \"pineapple\").\nIs_ingredient(\"pizza\", \"spinach\").\nIs_ingredient(\"pizza\", \"tomatoes\").\nIs_ingredient(\"pizza\", \"garlic\").\nIs_ingredient(\"pizza\", \"basil\").\nIs_ingredient(\"pizza\", \"oregano\").\nIs_ingredient(\"pizza\", \"eggplant\").\nIs_ingredient(\"pizza\", \"zucchini\").\nIs_ingredient(\"pizza\", \"broccoli\").\nIs_ingredient(\"pizza\", \"chicken\").\nIs_ingredient(\"pizza\", \"beef\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingredient(\"pizza\", \"anchovies\").\nIs_ingred"]}
{"id": 242, "answer": false, "completion": ".decl Appears_on(Person:symbol, Show:symbol)\nAppears_on(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.decl Answer()\nAnswer() :- Appears_on(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.output Answer\n\n", "completions": [".decl Appears_on(Person:symbol, Show:symbol)\nAppears_on(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.decl Answer()\nAnswer() :- Appears_on(\"Harry Houdini\", \"Chris Angel Mindfreak\").\n.output Answer\n\n"]}
{"id": 243, "answer": true, "completion": ".decl Can_tow(Vehicle:symbol, Weight:float)\nCan_tow(\"Ford F-350\", 10000).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Yale University student body\", 10000).\n.decl Answer()\nAnswer() :- Can_tow(\"Ford F-350\", weight1), Has_weight(\"Yale University student body\", weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Can_tow(Vehicle:symbol, Weight:float)\nCan_tow(\"Ford F-350\", 10000).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Yale University student body\", 10000).\n.decl Answer()\nAnswer() :- Can_tow(\"Ford F-350\", weight1), Has_weight(\"Yale University student body\", weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 244, "answer": true, "completion": ".decl Grows(Fruit:symbol, Pollinator:symbol)\nGrows(\"apple\", \"bee\").\n.decl Answer()\nAnswer() :- Grows(\"apple\", pollinator), !, pollinator != \"queen bee\".\n.output Answer", "completions": [".decl Grows(Fruit:symbol, Pollinator:symbol)\nGrows(\"apple\", \"bee\").\n.decl Answer()\nAnswer() :- Grows(\"apple\", pollinator), !, pollinator != \"queen bee\".\n.output Answer"]}
{"id": 245, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Mount Fuji\", 3776).\nHas_height(\"Sea of Japan\", -2300).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Fuji\", height1), Has_height(\"Sea of Japan\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Mount Fuji\", 3776).\nHas_height(\"Sea of Japan\", -2300).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Fuji\", height1), Has_height(\"Sea of Japan\", height2), height1 > height2.\n.output Answer"]}
{"id": 246, "answer": false, "completion": ".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"Dalai Lama\", \"reincarnation\").\nBelieves_in(\"Dalai Lama\", \"divine barzakh\").\n.decl Answer()\nAnswer() :- Believes_in(\"Dalai Lama\", \"divine barzakh\").\n.output Answer\n\n", "completions": [".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"Dalai Lama\", \"reincarnation\").\nBelieves_in(\"Dalai Lama\", \"divine barzakh\").\n.decl Answer()\nAnswer() :- Believes_in(\"Dalai Lama\", \"divine barzakh\").\n.output Answer\n\n"]}
{"id": 247, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"fear leading up to the year 2000\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"fear leading up to the year 2000\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"fear leading up to the year 2000\", n_years1), Last_n_years(\"fear leading up to the year 2000\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"fear leading up to the year 2000\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"fear leading up to the year 2000\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"fear leading up to the year 2000\", n_years1), Last_n_years(\"fear leading up to the year 2000\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 248, "answer": false, "completion": ".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Walt Disney\", \"email\").\nInvented(\"Walt Disney\", \"animation\").\n.decl Answer()\nAnswer() :- Invented(\"Walt Disney\", \"email\").\n.output Answer", "completions": [".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Walt Disney\", \"email\").\nInvented(\"Walt Disney\", \"animation\").\n.decl Answer()\nAnswer() :- Invented(\"Walt Disney\", \"email\").\n.output Answer"]}
{"id": 249, "answer": true, "completion": ".decl Is_of_age(Person:symbol, Age:float)\nIs_of_age(\"student in eleventh grade\", 16).\n.decl Answer()\nAnswer() :- Is_of_age(\"student in eleventh grade\", age), age < 35.\n.output Answer", "completions": [".decl Is_of_age(Person:symbol, Age:float)\nIs_of_age(\"student in eleventh grade\", 16).\n.decl Answer()\nAnswer() :- Is_of_age(\"student in eleventh grade\", age), age < 35.\n.output Answer"]}
{"id": 250, "answer": true, "completion": ".decl Has_taste(Part:symbol, Taste:symbol)\nHas_taste(\"center\", \"sweet\").\nHas_taste(\"outside\", \"bitter\").\n.decl Answer()\nAnswer() :- Has_taste(\"center\", \"sweet\").\n.output Answer", "completions": [".decl Has_taste(Part:symbol, Taste:symbol)\nHas_taste(\"center\", \"sweet\").\nHas_taste(\"outside\", \"bitter\").\n.decl Answer()\nAnswer() :- Has_taste(\"center\", \"sweet\").\n.output Answer"]}
{"id": 251, "answer": true, "completion": ".decl Is_plot_device(Object:symbol)\nIs_plot_device(\"radioactive waste\").\n.decl Answer()\nAnswer() :- Is_plot_device(\"radioactive waste\").\n.output Answer", "completions": [".decl Is_plot_device(Object:symbol)\nIs_plot_device(\"radioactive waste\").\n.decl Answer()\nAnswer() :- Is_plot_device(\"radioactive waste\").\n.output Answer"]}
{"id": 252, "answer": true, "completion": ".decl Is_member_of(Animal:symbol, Family:symbol)\nIs_member_of(\"dog\", \"Canidae\").\nIs_member_of(\"fox\", \"Canidae\").\nIs_member_of(\"wolf\", \"Canidae\").\nIs_member_of(\"jackal\", \"Canidae\").\nIs_member_of(\"coyote\", \"Canidae\").\nIs_member_of(\"dingo\", \"Canidae\").\nIs_member_of(\"raccoon dog\", \"Canidae\").\n.decl Appears_in(Animal:symbol, Story:symbol)\nAppears_in(\"fox\", \"The Fox and the Grapes\").\nAppears_in(\"fox\", \"The Fox and the Crow\").\nAppears_in(\"fox\", \"The Fox and the Cat\").\nAppears_in(\"fox\", \"The Fox and the Stork\").\nAppears_in(\"fox\", \"The Fox and the Woodcutter\").\nAppears_in(\"fox\", \"The Fox and the Lion\").\nAppears_in(\"fox\", \"The Fox and the Mask\").\nAppears_in(\"fox\", \"The Fox and the Peacock\").\nAppears_in(\"fox\", \"The Fox and the Little Red Hen\").\nAppears_in(\"fox\", \"The Fox and the Tiger\").\nAppears_in(\"fox\", \"The Fox and the Badger\").\nAppears_in(\"fox\", \"The Fox and the Horse\").\nAppears_in(\"fox\", \"The Fox and the Mosquitoes\").\nAppears_in(\"fox\", \"The Fox and the Lioness\").\nAppears_in(\"fox\", \"The Fox and the Gander\").\nAppears_in(\"fox\", \"The Fox and the Leopard\").\nAppears_in(\"fox\", \"The Fox and the Wild Boar\").\nAppears_in(\"fox\", \"The Fox and the Lion Cub\").\nAppears_in(\"fox\", \"The Fox and the Bat\").\nAppears_in(\"fox\", \"The Fox and the Weasel\").\nAppears_in(\"fox\", \"The Fox and the Heron\").\nAppears_in(\"fox\", \"The Fox and the Vine\").\nAppears_in(\"fox\", \"The Fox and the Cock\").\nAppears_in(\"fox\", \"The Fox and the Crane\").\nAppears_in(\"fox\", \"The Fox and the Lion's Share\").\nAppears_in(\"fox\", \"The Fox and the Man\").\nAppears_in(\"fox\", \"The Fox and the Man Eating Lion\").\nAppears_in(\"fox\", \"The Fox and the Man Who Had Lost His Horse\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Just Going to Hang Himself\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Lion\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Fox\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Wolf\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Lioness\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Fox and the Wolf\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Lion and the Lioness\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Lion, the Lioness and the Fox\").\nAppears_in(\"fox\", \"The Fox and the Man", "completions": [".decl Is_member_of(Animal:symbol, Family:symbol)\nIs_member_of(\"dog\", \"Canidae\").\nIs_member_of(\"fox\", \"Canidae\").\nIs_member_of(\"wolf\", \"Canidae\").\nIs_member_of(\"jackal\", \"Canidae\").\nIs_member_of(\"coyote\", \"Canidae\").\nIs_member_of(\"dingo\", \"Canidae\").\nIs_member_of(\"raccoon dog\", \"Canidae\").\n.decl Appears_in(Animal:symbol, Story:symbol)\nAppears_in(\"fox\", \"The Fox and the Grapes\").\nAppears_in(\"fox\", \"The Fox and the Crow\").\nAppears_in(\"fox\", \"The Fox and the Cat\").\nAppears_in(\"fox\", \"The Fox and the Stork\").\nAppears_in(\"fox\", \"The Fox and the Woodcutter\").\nAppears_in(\"fox\", \"The Fox and the Lion\").\nAppears_in(\"fox\", \"The Fox and the Mask\").\nAppears_in(\"fox\", \"The Fox and the Peacock\").\nAppears_in(\"fox\", \"The Fox and the Little Red Hen\").\nAppears_in(\"fox\", \"The Fox and the Tiger\").\nAppears_in(\"fox\", \"The Fox and the Badger\").\nAppears_in(\"fox\", \"The Fox and the Horse\").\nAppears_in(\"fox\", \"The Fox and the Mosquitoes\").\nAppears_in(\"fox\", \"The Fox and the Lioness\").\nAppears_in(\"fox\", \"The Fox and the Gander\").\nAppears_in(\"fox\", \"The Fox and the Leopard\").\nAppears_in(\"fox\", \"The Fox and the Wild Boar\").\nAppears_in(\"fox\", \"The Fox and the Lion Cub\").\nAppears_in(\"fox\", \"The Fox and the Bat\").\nAppears_in(\"fox\", \"The Fox and the Weasel\").\nAppears_in(\"fox\", \"The Fox and the Heron\").\nAppears_in(\"fox\", \"The Fox and the Vine\").\nAppears_in(\"fox\", \"The Fox and the Cock\").\nAppears_in(\"fox\", \"The Fox and the Crane\").\nAppears_in(\"fox\", \"The Fox and the Lion's Share\").\nAppears_in(\"fox\", \"The Fox and the Man\").\nAppears_in(\"fox\", \"The Fox and the Man Eating Lion\").\nAppears_in(\"fox\", \"The Fox and the Man Who Had Lost His Horse\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Just Going to Hang Himself\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Lion\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Fox\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Wolf\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Lioness\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Fox and the Wolf\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Lion and the Lioness\").\nAppears_in(\"fox\", \"The Fox and the Man Who Was Going to Dine with the Lion, the Lioness and the Fox\").\nAppears_in(\"fox\", \"The Fox and the Man"]}
{"id": 253, "answer": false, "completion": ".decl Has_vitamin_C(Fruit:symbol, Vitamin_C:float)\nHas_vitamin_C(\"orange\", 60).\nHas_vitamin_C(\"lemon\", 29).\nHas_vitamin_C(\"lime\", 21).\nHas_vitamin_C(\"grapefruit\", 42).\n.decl Answer()\nAnswer() :- Has_vitamin_C(fruit, vitamin_C), vitamin_C > 50.\n.output Answer", "completions": [".decl Has_vitamin_C(Fruit:symbol, Vitamin_C:float)\nHas_vitamin_C(\"orange\", 60).\nHas_vitamin_C(\"lemon\", 29).\nHas_vitamin_C(\"lime\", 21).\nHas_vitamin_C(\"grapefruit\", 42).\n.decl Answer()\nAnswer() :- Has_vitamin_C(fruit, vitamin_C), vitamin_C > 50.\n.output Answer"]}
{"id": 254, "answer": true, "completion": ".decl Invented_in_era(Material:symbol, Era:symbol)\nInvented_in_era(\"bronze\", \"bronze age\").\nInvented_in_era(\"iron\", \"iron age\").\nInvented_in_era(\"wood\", \"prehistory\").\nInvented_in_era(\"leather\", \"prehistory\").\nInvented_in_era(\"cannon\", \"renaissance\").\n.decl Answer()\nAnswer() :- Invented_in_era(\"cannon\", \"bronze age\").\nAnswer() :- Invented_in_era(\"cannon\", \"iron age\").\nAnswer() :- Invented_in_era(\"cannon\", \"prehistory\").\nAnswer() :- Invented_in_era(\"cannon\", era), Invented_in_era(material, era), Invented_in_era(\"cannon\", \"renaissance\").\n.output Answer", "completions": [".decl Invented_in_era(Material:symbol, Era:symbol)\nInvented_in_era(\"bronze\", \"bronze age\").\nInvented_in_era(\"iron\", \"iron age\").\nInvented_in_era(\"wood\", \"prehistory\").\nInvented_in_era(\"leather\", \"prehistory\").\nInvented_in_era(\"cannon\", \"renaissance\").\n.decl Answer()\nAnswer() :- Invented_in_era(\"cannon\", \"bronze age\").\nAnswer() :- Invented_in_era(\"cannon\", \"iron age\").\nAnswer() :- Invented_in_era(\"cannon\", \"prehistory\").\nAnswer() :- Invented_in_era(\"cannon\", era), Invented_in_era(material, era), Invented_in_era(\"cannon\", \"renaissance\").\n.output Answer"]}
{"id": 255, "answer": true, "completion": ".decl Last_Democrat_President(Person:symbol)\nLast_Democrat_President(\"Barack Obama\").\n.decl Practices(Person:symbol, Practice:symbol)\nPractices(\"Barack Obama\", \"painting\").\n.decl Answer()\nAnswer() :- Last_Democrat_President(person), Practices(person, \"painting\").\n.output Answer", "completions": [".decl Last_Democrat_President(Person:symbol)\nLast_Democrat_President(\"Barack Obama\").\n.decl Practices(Person:symbol, Practice:symbol)\nPractices(\"Barack Obama\", \"painting\").\n.decl Answer()\nAnswer() :- Last_Democrat_President(person), Practices(person, \"painting\").\n.output Answer"]}
{"id": 256, "answer": false, "completion": ".decl Has_impact(Activity:symbol, Impact:symbol)\nHas_impact(\"domestic canine reproduction\", \"overpopulation\").\nHas_impact(\"domestic canine reproduction\", \"animal cruelty\").\n.decl Is_advocacy(Activity:symbol, Advocacy:symbol)\nIs_advocacy(\"preventing domestic canine reproduction\", \"overpopulation\").\nIs_advocacy(\"preventing domestic canine reproduction\", \"animal cruelty\").\n.decl Answer()\nAnswer() :- Has_impact(activity, impact), Is_advocacy(activity2, impact), activity != activity2.\n.output Answer", "completions": [".decl Has_impact(Activity:symbol, Impact:symbol)\nHas_impact(\"domestic canine reproduction\", \"overpopulation\").\nHas_impact(\"domestic canine reproduction\", \"animal cruelty\").\n.decl Is_advocacy(Activity:symbol, Advocacy:symbol)\nIs_advocacy(\"preventing domestic canine reproduction\", \"overpopulation\").\nIs_advocacy(\"preventing domestic canine reproduction\", \"animal cruelty\").\n.decl Answer()\nAnswer() :- Has_impact(activity, impact), Is_advocacy(activity2, impact), activity != activity2.\n.output Answer"]}
{"id": 257, "answer": true, "completion": ".decl Has_iterations(Phone:symbol, Iterations:float)\nHas_iterations(\"Iphone\", 11).\nHas_iterations(\"Samsung Galaxy\", 10).\n.decl Answer()\nAnswer() :- Has_iterations(\"Iphone\", iterations1), Has_iterations(\"Samsung Galaxy\", iterations2), iterations1 > iterations2.\n.output Answer", "completions": [".decl Has_iterations(Phone:symbol, Iterations:float)\nHas_iterations(\"Iphone\", 11).\nHas_iterations(\"Samsung Galaxy\", 10).\n.decl Answer()\nAnswer() :- Has_iterations(\"Iphone\", iterations1), Has_iterations(\"Samsung Galaxy\", iterations2), iterations1 > iterations2.\n.output Answer"]}
{"id": 258, "answer": true, "completion": ".decl Is_part_of(Part:symbol, System:symbol)\nIs_part_of(\"fan\", \"central processing unit\").\n.decl Answer()\nAnswer() :- Is_part_of(\"fan\", \"central processing unit\").\n.output Answer", "completions": [".decl Is_part_of(Part:symbol, System:symbol)\nIs_part_of(\"fan\", \"central processing unit\").\n.decl Answer()\nAnswer() :- Is_part_of(\"fan\", \"central processing unit\").\n.output Answer"]}
{"id": 259, "answer": false, "completion": ".decl Has_hair(Person:symbol, Hair:symbol)\nHas_hair(\"Christopher Hitchens\", \"hair\").\n.decl Answer()\nAnswer() :- Has_hair(\"Christopher Hitchens\", hair), !, hair != \"tonsure\".\n.output Answer", "completions": [".decl Has_hair(Person:symbol, Hair:symbol)\nHas_hair(\"Christopher Hitchens\", \"hair\").\n.decl Answer()\nAnswer() :- Has_hair(\"Christopher Hitchens\", hair), !, hair != \"tonsure\".\n.output Answer"]}
{"id": 260, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"diamond\", 3.52).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"diamond\", density1), Has_density(\"water\", density2), density1 < density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"diamond\", 3.52).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"diamond\", density1), Has_density(\"water\", density2), density1 < density2.\n.output Answer"]}
{"id": 261, "answer": true, "completion": ".decl Employs(Person:symbol, Employer:symbol)\nEmploys(\"Walt Disney\", \"Ub Iwerks\").\n.decl Has_brother(Person:symbol, Brother:symbol)\nHas_brother(\"Ub Iwerks\", \"Charles Iwerks\").\n.decl Commits(Person:symbol, Offense:symbol)\nCommits(\"Charles Iwerks\", \"excommunicable offense\").\n.decl Answer()\nAnswer() :- Employs(\"Walt Disney\", person), Has_brother(person, \"Charles Iwerks\"), Commits(\"Charles Iwerks\", \"excommunicable offense\").\n.output Answer", "completions": [".decl Employs(Person:symbol, Employer:symbol)\nEmploys(\"Walt Disney\", \"Ub Iwerks\").\n.decl Has_brother(Person:symbol, Brother:symbol)\nHas_brother(\"Ub Iwerks\", \"Charles Iwerks\").\n.decl Commits(Person:symbol, Offense:symbol)\nCommits(\"Charles Iwerks\", \"excommunicable offense\").\n.decl Answer()\nAnswer() :- Employs(\"Walt Disney\", person), Has_brother(person, \"Charles Iwerks\"), Commits(\"Charles Iwerks\", \"excommunicable offense\").\n.output Answer"]}
{"id": 262, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"nickel\", 0.0008).\nHas_volume(\"koala pouch\", 0.0005).\n.decl Answer()\nAnswer() :- Has_volume(\"nickel\", volume1), Has_volume(\"koala pouch\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"nickel\", 0.0008).\nHas_volume(\"koala pouch\", 0.0005).\n.decl Answer()\nAnswer() :- Has_volume(\"nickel\", volume1), Has_volume(\"koala pouch\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 263, "answer": false, "completion": ".decl Prays_over(Person:symbol, Book:symbol)\nPrays_over(\"Dave Chappelle\", \"Bible\").\n.decl Answer()\nAnswer() :- Prays_over(\"Dave Chappelle\", \"Quran\").\n.output Answer", "completions": [".decl Prays_over(Person:symbol, Book:symbol)\nPrays_over(\"Dave Chappelle\", \"Bible\").\n.decl Answer()\nAnswer() :- Prays_over(\"Dave Chappelle\", \"Quran\").\n.output Answer"]}
{"id": 264, "answer": true, "completion": ".decl Named_after(Thing:symbol, Person:symbol)\nNamed_after(\"C-SPAN\", \"Alan Greenspan\").\n.decl Answer()\nAnswer() :- Named_after(\"C-SPAN\", \"Alan Greenspan\").\n.output Answer", "completions": [".decl Named_after(Thing:symbol, Person:symbol)\nNamed_after(\"C-SPAN\", \"Alan Greenspan\").\n.decl Answer()\nAnswer() :- Named_after(\"C-SPAN\", \"Alan Greenspan\").\n.output Answer"]}
{"id": 265, "answer": false, "completion": ".decl Requires(Game:symbol, Resource:symbol)\nRequires(\"Final Fantasy VI\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"Final Fantasy VI\", \"electricity\").\n.output Answer", "completions": [".decl Requires(Game:symbol, Resource:symbol)\nRequires(\"Final Fantasy VI\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"Final Fantasy VI\", \"electricity\").\n.output Answer"]}
{"id": 266, "answer": true, "completion": ".decl Wrote(Author:symbol, Work:symbol)\nWrote(\"Sartre\", \"No Exit\").\n.decl Is_about(Work:symbol, Topic:symbol)\nIs_about(\"No Exit\", \"Hell\").\n.decl Answer()\nAnswer() :- Wrote(\"Sartre\", \"No Exit\"), Is_about(\"No Exit\", \"Hell\").\n.output Answer", "completions": [".decl Wrote(Author:symbol, Work:symbol)\nWrote(\"Sartre\", \"No Exit\").\n.decl Is_about(Work:symbol, Topic:symbol)\nIs_about(\"No Exit\", \"Hell\").\n.decl Answer()\nAnswer() :- Wrote(\"Sartre\", \"No Exit\"), Is_about(\"No Exit\", \"Hell\").\n.output Answer"]}
{"id": 267, "answer": false, "completion": ".decl Has_members(Organization:symbol, Member:symbol)\nHas_members(\"NFL teams\", \"players\").\nHas_members(\"infantry\", \"soldiers\").\n.decl Answer()\nAnswer() :- Has_members(\"NFL teams\", member1), Has_members(\"infantry\", member2), member1 = member2.\n.output Answer", "completions": [".decl Has_members(Organization:symbol, Member:symbol)\nHas_members(\"NFL teams\", \"players\").\nHas_members(\"infantry\", \"soldiers\").\n.decl Answer()\nAnswer() :- Has_members(\"NFL teams\", member1), Has_members(\"infantry\", member2), member1 = member2.\n.output Answer"]}
{"id": 268, "answer": true, "completion": ".decl Has_n_stripes(Object:symbol, N_stripes:float)\nHas_n_stripes(\"American flag\", 13).\n.decl Answer()\nAnswer() :- Has_n_stripes(\"American flag\", n_stripes), n_stripes >= 2.\n.output Answer", "completions": [".decl Has_n_stripes(Object:symbol, N_stripes:float)\nHas_n_stripes(\"American flag\", 13).\n.decl Answer()\nAnswer() :- Has_n_stripes(\"American flag\", n_stripes), n_stripes >= 2.\n.output Answer"]}
{"id": 269, "answer": false, "completion": ".decl Has_surface_temp(Object:symbol, Surface_temp:float)\nHas_surface_temp(\"Europa\", -170).\n.decl Answer()\nAnswer() :- Has_surface_temp(\"Europa\", surface_temp), surface_temp >= -60.\n.output Answer", "completions": [".decl Has_surface_temp(Object:symbol, Surface_temp:float)\nHas_surface_temp(\"Europa\", -170).\n.decl Answer()\nAnswer() :- Has_surface_temp(\"Europa\", surface_temp), surface_temp >= -60.\n.output Answer"]}
{"id": 270, "answer": true, "completion": ".decl Last_airing_date(TV_show:symbol, Last_airing_date:symbol)\nLast_airing_date(\"The Joy of Painting\", \"1994\").\n.decl Answer()\nAnswer() :- Last_airing_date(\"The Joy of Painting\", last_airing_date), last_airing_date < \"2020\".\n.output Answer", "completions": [".decl Last_airing_date(TV_show:symbol, Last_airing_date:symbol)\nLast_airing_date(\"The Joy of Painting\", \"1994\").\n.decl Answer()\nAnswer() :- Last_airing_date(\"The Joy of Painting\", last_airing_date), last_airing_date < \"2020\".\n.output Answer"]}
{"id": 271, "answer": true, "completion": ".decl Owns(Company_A:symbol, Company_B:symbol)\nOwns(\"Disney\", \"Marvel\").\n.decl Answer()\nAnswer() :- Owns(\"Disney\", \"Marvel\").\n.output Answer\n\n", "completions": [".decl Owns(Company_A:symbol, Company_B:symbol)\nOwns(\"Disney\", \"Marvel\").\n.decl Answer()\nAnswer() :- Owns(\"Disney\", \"Marvel\").\n.output Answer\n\n"]}
{"id": 272, "answer": true, "completion": ".decl Has_survival_rate(Country:symbol, Survival_rate:float)\nHas_survival_rate(\"Japan\", 0.8).\nHas_survival_rate(\"Sweden\", 0.7).\n.decl Answer()\nAnswer() :- Has_survival_rate(\"Japan\", rate1), Has_survival_rate(\"Sweden\", rate2), rate1 > rate2.\n.output Answer", "completions": [".decl Has_survival_rate(Country:symbol, Survival_rate:float)\nHas_survival_rate(\"Japan\", 0.8).\nHas_survival_rate(\"Sweden\", 0.7).\n.decl Answer()\nAnswer() :- Has_survival_rate(\"Japan\", rate1), Has_survival_rate(\"Sweden\", rate2), rate1 > rate2.\n.output Answer"]}
{"id": 273, "answer": true, "completion": ".decl Inspires(Person:symbol, Work:symbol)\nInspires(\"Washington Irving\", \"Rip Van Winkle\").\nInspires(\"Washington Irving\", \"The Legend of Sleepy Hollow\").\n.decl Is_about(Work:symbol, Topic:symbol)\nIs_about(\"Rip Van Winkle\", \"Irish mythology\").\nIs_about(\"The Legend of Sleepy Hollow\", \"Irish mythology\").\n.decl Answer()\nAnswer() :- Inspires(\"Washington Irving\", work), Is_about(work, \"Irish mythology\").\n.output Answer", "completions": [".decl Inspires(Person:symbol, Work:symbol)\nInspires(\"Washington Irving\", \"Rip Van Winkle\").\nInspires(\"Washington Irving\", \"The Legend of Sleepy Hollow\").\n.decl Is_about(Work:symbol, Topic:symbol)\nIs_about(\"Rip Van Winkle\", \"Irish mythology\").\nIs_about(\"The Legend of Sleepy Hollow\", \"Irish mythology\").\n.decl Answer()\nAnswer() :- Inspires(\"Washington Irving\", work), Is_about(work, \"Irish mythology\").\n.output Answer"]}
{"id": 274, "answer": true, "completion": ".decl Is_part_of(Part:symbol, Organism:symbol)\nIs_part_of(\"tibia\", \"human\").\n.decl Is_required_for(Part:symbol, Activity:symbol)\nIs_required_for(\"tibia\", \"floor exercises\").\n.decl Answer()\nAnswer() :- Is_part_of(\"tibia\", \"human\"), Is_required_for(\"tibia\", \"floor exercises\").\n.output Answer", "completions": [".decl Is_part_of(Part:symbol, Organism:symbol)\nIs_part_of(\"tibia\", \"human\").\n.decl Is_required_for(Part:symbol, Activity:symbol)\nIs_required_for(\"tibia\", \"floor exercises\").\n.decl Answer()\nAnswer() :- Is_part_of(\"tibia\", \"human\"), Is_required_for(\"tibia\", \"floor exercises\").\n.output Answer"]}
{"id": 275, "answer": false, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Emma Roberts\", \"actress\").\n.decl Has_job_title(Job:symbol, Job_title:symbol)\nHas_job_title(\"actress\", \"Nancy Drew\").\nHas_job_title(\"private investigator\", \"Nancy Drew\").\n.decl Answer()\nAnswer() :- Has_job(\"Emma Roberts\", job), Has_job_title(job, \"private investigator\").\n.output Answer", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Emma Roberts\", \"actress\").\n.decl Has_job_title(Job:symbol, Job_title:symbol)\nHas_job_title(\"actress\", \"Nancy Drew\").\nHas_job_title(\"private investigator\", \"Nancy Drew\").\n.decl Answer()\nAnswer() :- Has_job(\"Emma Roberts\", job), Has_job_title(job, \"private investigator\").\n.output Answer"]}
{"id": 276, "answer": true, "completion": ".decl Can_do(Person:symbol, Experiment:symbol)\nCan_do(\"minor\", \"double-slit experiment\").\n.decl Answer()\nAnswer() :- Can_do(\"minor\", \"double-slit experiment\").\n.output Answer", "completions": [".decl Can_do(Person:symbol, Experiment:symbol)\nCan_do(\"minor\", \"double-slit experiment\").\n.decl Answer()\nAnswer() :- Can_do(\"minor\", \"double-slit experiment\").\n.output Answer"]}
{"id": 277, "answer": false, "completion": ".decl Has_category(Prize:symbol, Category:symbol)\nHas_category(\"Nobel Prize in Chemistry\", \"Chemistry\").\nHas_category(\"Nobel Prize in Physics\", \"Physics\").\nHas_category(\"Nobel Prize in Physiology or Medicine\", \"Physiology or Medicine\").\nHas_category(\"Nobel Prize in Literature\", \"Literature\").\nHas_category(\"Nobel Peace Prize\", \"Peace\").\n.decl Answer()\nAnswer() :- Has_category(\"Nobel Prize in Chemistry\", category1), Has_category(\"Nobel Prize in Physics\", category2), Has_category(\"Nobel Prize in Physiology or Medicine\", category3), Has_category(\"Nobel Prize in Literature\", category4), Has_category(\"Nobel Peace Prize\", category5), category1 = category2, category2 = category3, category3 = category4, category4 = category5.\n.output Answer", "completions": [".decl Has_category(Prize:symbol, Category:symbol)\nHas_category(\"Nobel Prize in Chemistry\", \"Chemistry\").\nHas_category(\"Nobel Prize in Physics\", \"Physics\").\nHas_category(\"Nobel Prize in Physiology or Medicine\", \"Physiology or Medicine\").\nHas_category(\"Nobel Prize in Literature\", \"Literature\").\nHas_category(\"Nobel Peace Prize\", \"Peace\").\n.decl Answer()\nAnswer() :- Has_category(\"Nobel Prize in Chemistry\", category1), Has_category(\"Nobel Prize in Physics\", category2), Has_category(\"Nobel Prize in Physiology or Medicine\", category3), Has_category(\"Nobel Prize in Literature\", category4), Has_category(\"Nobel Peace Prize\", category5), category1 = category2, category2 = category3, category3 = category4, category4 = category5.\n.output Answer"]}
{"id": 278, "answer": true, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"John Smith\", \"USA\").\nHas_citizenship(\"John Smith\", \"UK\").\nHas_citizenship(\"John Smith\", \"France\").\nHas_citizenship(\"John Smith\", \"Germany\").\nHas_citizenship(\"John Smith\", \"Italy\").\nHas_citizenship(\"John Smith\", \"Spain\").\nHas_citizenship(\"John Smith\", \"Portugal\").\nHas_citizenship(\"John Smith\", \"Greece\").\nHas_citizenship(\"John Smith\", \"Ireland\").\nHas_citizenship(\"John Smith\", \"Belgium\").\nHas_citizenship(\"John Smith\", \"Luxembourg\").\nHas_citizenship(\"John Smith\", \"Netherlands\").\nHas_citizenship(\"John Smith\", \"Austria\").\nHas_citizenship(\"John Smith\", \"Switzerland\").\nHas_citizenship(\"John Smith\", \"Denmark\").\nHas_citizenship(\"John Smith\", \"Norway\").\nHas_citizenship(\"John Smith\", \"Sweden\").\nHas_citizenship(\"John Smith\", \"Finland\").\nHas_citizenship(\"John Smith\", \"Iceland\").\nHas_citizenship(\"John Smith\", \"Poland\").\nHas_citizenship(\"John Smith\", \"Czech Republic\").\nHas_citizenship(\"John Smith\", \"Slovakia\").\nHas_citizenship(\"John Smith\", \"Hungary\").\nHas_citizenship(\"John Smith\", \"Slovenia\").\nHas_citizenship(\"John Smith\", \"Croatia\").\nHas_citizenship(\"John Smith\", \"Bosnia and Herzegovina\").\nHas_citizenship(\"John Smith\", \"Serbia\").\nHas_citizenship(\"John Smith\", \"Montenegro\").\nHas_citizenship(\"John Smith\", \"Kosovo\").\nHas_citizenship(\"John Smith\", \"Albania\").\nHas_citizenship(\"John Smith\", \"Macedonia\").\nHas_citizenship(\"John Smith\", \"Bulgaria\").\nHas_citizenship(\"John Smith\", \"Romania\").\nHas_citizenship(\"John Smith\", \"Moldova\").\nHas_citizenship(\"John Smith\", \"Ukraine\").\nHas_citizenship(\"John Smith\", \"Belarus\").\nHas_citizenship(\"John Smith\", \"Lithuania\").\nHas_citizenship(\"John Smith\", \"Latvia\").\nHas_citizenship(\"John Smith\", \"Estonia\").\nHas_citizenship(\"John Smith\", \"Armenia\").\nHas_citizenship(\"John Smith\", \"Azerbaijan\").\nHas_citizenship(\"John Smith\", \"Georgia\").\nHas_citizenship(\"John Smith\", \"Kazakhstan\").\nHas_citizenship(\"John Smith\", \"Kyrgyzstan\").\nHas_citizenship(\"John Smith\", \"Tajikistan\").\nHas_citizenship(\"John Smith\", \"Turkmenistan\").\nHas_citizenship(\"John Smith\", \"Uzbekistan\").\nHas_citizenship(\"John Smith\", \"Mongolia\").\nHas_citizenship(\"John Smith\", \"China\").\nHas_citizenship(\"John Smith\", \"North Korea\").\nHas_citizenship(\"John Smith\", \"South Korea\").\nHas_citizenship(\"John Smith\", \"Japan\").\nHas_citizenship(\"John Smith\", \"Taiwan\").\nHas_citizenship(\"John Smith\", \"Vietnam\").\nHas_citizenship(\"John Smith\", \"Laos\").\nHas_citizenship(\"John Smith\", \"Cambodia\").\nHas_citizenship(\"John Smith\", \"Thailand\").\nHas_citizenship(\"John Smith\", \"My", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"John Smith\", \"USA\").\nHas_citizenship(\"John Smith\", \"UK\").\nHas_citizenship(\"John Smith\", \"France\").\nHas_citizenship(\"John Smith\", \"Germany\").\nHas_citizenship(\"John Smith\", \"Italy\").\nHas_citizenship(\"John Smith\", \"Spain\").\nHas_citizenship(\"John Smith\", \"Portugal\").\nHas_citizenship(\"John Smith\", \"Greece\").\nHas_citizenship(\"John Smith\", \"Ireland\").\nHas_citizenship(\"John Smith\", \"Belgium\").\nHas_citizenship(\"John Smith\", \"Luxembourg\").\nHas_citizenship(\"John Smith\", \"Netherlands\").\nHas_citizenship(\"John Smith\", \"Austria\").\nHas_citizenship(\"John Smith\", \"Switzerland\").\nHas_citizenship(\"John Smith\", \"Denmark\").\nHas_citizenship(\"John Smith\", \"Norway\").\nHas_citizenship(\"John Smith\", \"Sweden\").\nHas_citizenship(\"John Smith\", \"Finland\").\nHas_citizenship(\"John Smith\", \"Iceland\").\nHas_citizenship(\"John Smith\", \"Poland\").\nHas_citizenship(\"John Smith\", \"Czech Republic\").\nHas_citizenship(\"John Smith\", \"Slovakia\").\nHas_citizenship(\"John Smith\", \"Hungary\").\nHas_citizenship(\"John Smith\", \"Slovenia\").\nHas_citizenship(\"John Smith\", \"Croatia\").\nHas_citizenship(\"John Smith\", \"Bosnia and Herzegovina\").\nHas_citizenship(\"John Smith\", \"Serbia\").\nHas_citizenship(\"John Smith\", \"Montenegro\").\nHas_citizenship(\"John Smith\", \"Kosovo\").\nHas_citizenship(\"John Smith\", \"Albania\").\nHas_citizenship(\"John Smith\", \"Macedonia\").\nHas_citizenship(\"John Smith\", \"Bulgaria\").\nHas_citizenship(\"John Smith\", \"Romania\").\nHas_citizenship(\"John Smith\", \"Moldova\").\nHas_citizenship(\"John Smith\", \"Ukraine\").\nHas_citizenship(\"John Smith\", \"Belarus\").\nHas_citizenship(\"John Smith\", \"Lithuania\").\nHas_citizenship(\"John Smith\", \"Latvia\").\nHas_citizenship(\"John Smith\", \"Estonia\").\nHas_citizenship(\"John Smith\", \"Armenia\").\nHas_citizenship(\"John Smith\", \"Azerbaijan\").\nHas_citizenship(\"John Smith\", \"Georgia\").\nHas_citizenship(\"John Smith\", \"Kazakhstan\").\nHas_citizenship(\"John Smith\", \"Kyrgyzstan\").\nHas_citizenship(\"John Smith\", \"Tajikistan\").\nHas_citizenship(\"John Smith\", \"Turkmenistan\").\nHas_citizenship(\"John Smith\", \"Uzbekistan\").\nHas_citizenship(\"John Smith\", \"Mongolia\").\nHas_citizenship(\"John Smith\", \"China\").\nHas_citizenship(\"John Smith\", \"North Korea\").\nHas_citizenship(\"John Smith\", \"South Korea\").\nHas_citizenship(\"John Smith\", \"Japan\").\nHas_citizenship(\"John Smith\", \"Taiwan\").\nHas_citizenship(\"John Smith\", \"Vietnam\").\nHas_citizenship(\"John Smith\", \"Laos\").\nHas_citizenship(\"John Smith\", \"Cambodia\").\nHas_citizenship(\"John Smith\", \"Thailand\").\nHas_citizenship(\"John Smith\", \"My"]}
{"id": 279, "answer": true, "completion": ".decl Suffered_fate(Person:symbol, Fate:symbol)\nSuffered_fate(\"Alan Turing\", \"suicide\").\nSuffered_fate(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- Suffered_fate(\"Alan Turing\", fate1), Suffered_fate(\"Abraham Lincoln\", fate2), fate1 = fate2.\n.output Answer", "completions": [".decl Suffered_fate(Person:symbol, Fate:symbol)\nSuffered_fate(\"Alan Turing\", \"suicide\").\nSuffered_fate(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- Suffered_fate(\"Alan Turing\", fate1), Suffered_fate(\"Abraham Lincoln\", fate2), fate1 = fate2.\n.output Answer"]}
{"id": 280, "answer": false, "completion": ".decl Uses_catch_phrase(Person:symbol, Catch_phrase:symbol)\nUses_catch_phrase(\"Rand Paul\", \"flip-flopper\").\nUses_catch_phrase(\"John Kerry\", \"flip-flopper\").\n.decl Answer()\nAnswer() :- Uses_catch_phrase(\"Rand Paul\", catch_phrase), Uses_catch_phrase(\"John Kerry\", catch_phrase).\n.output Answer", "completions": [".decl Uses_catch_phrase(Person:symbol, Catch_phrase:symbol)\nUses_catch_phrase(\"Rand Paul\", \"flip-flopper\").\nUses_catch_phrase(\"John Kerry\", \"flip-flopper\").\n.decl Answer()\nAnswer() :- Uses_catch_phrase(\"Rand Paul\", catch_phrase), Uses_catch_phrase(\"John Kerry\", catch_phrase).\n.output Answer"]}
{"id": 281, "answer": true, "completion": ".decl Has_state(Object:symbol, State:symbol)\nHas_state(\"argon\", \"gas\").\n.decl Answer()\nAnswer() :- Has_state(\"argon\", state), state != \"solid\".\n.output Answer", "completions": [".decl Has_state(Object:symbol, State:symbol)\nHas_state(\"argon\", \"gas\").\n.decl Answer()\nAnswer() :- Has_state(\"argon\", state), state != \"solid\".\n.output Answer"]}
{"id": 282, "answer": true, "completion": ".decl Remembers(Person:symbol, Event:symbol)\nRemembers(\"Lucille Ball\", \"winemaking\").\n.decl Answer()\nAnswer() :- Remembers(\"Lucille Ball\", \"winemaking\").\n.output Answer\n\n\n", "completions": [".decl Remembers(Person:symbol, Event:symbol)\nRemembers(\"Lucille Ball\", \"winemaking\").\n.decl Answer()\nAnswer() :- Remembers(\"Lucille Ball\", \"winemaking\").\n.output Answer\n\n\n"]}
{"id": 283, "answer": true, "completion": ".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"oysters\", \"shell\").\nHas_material(\"guitar\", \"wood\").\n.decl Answer()\nAnswer() :- Has_material(\"oysters\", \"shell\"), Has_material(\"guitar\", \"wood\").\n.output Answer", "completions": [".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"oysters\", \"shell\").\nHas_material(\"guitar\", \"wood\").\n.decl Answer()\nAnswer() :- Has_material(\"oysters\", \"shell\"), Has_material(\"guitar\", \"wood\").\n.output Answer"]}
{"id": 284, "answer": true, "completion": ".decl Has_instrument(Musician:symbol, Instrument:symbol)\nHas_instrument(\"James Cotton\", \"harmonica\").\n.decl Has_genre(Band:symbol, Genre:symbol)\nHas_genre(\"smooth jazz band\", \"smooth jazz\").\n.decl Answer()\nAnswer() :- Has_instrument(\"James Cotton\", \"harmonica\"), Has_genre(\"smooth jazz band\", \"smooth jazz\").\n.output Answer", "completions": [".decl Has_instrument(Musician:symbol, Instrument:symbol)\nHas_instrument(\"James Cotton\", \"harmonica\").\n.decl Has_genre(Band:symbol, Genre:symbol)\nHas_genre(\"smooth jazz band\", \"smooth jazz\").\n.decl Answer()\nAnswer() :- Has_instrument(\"James Cotton\", \"harmonica\"), Has_genre(\"smooth jazz band\", \"smooth jazz\").\n.output Answer"]}
{"id": 285, "answer": true, "completion": ".decl Has_family(Animal_A:symbol, Animal_B:symbol)\nHas_family(\"emu\", \"bird\").\nHas_family(\"elk\", \"mammal\").\n.decl Answer()\nAnswer() :- Has_family(\"emu\", animal1), Has_family(\"elk\", animal2), animal1 != animal2.\n.output Answer", "completions": [".decl Has_family(Animal_A:symbol, Animal_B:symbol)\nHas_family(\"emu\", \"bird\").\nHas_family(\"elk\", \"mammal\").\n.decl Answer()\nAnswer() :- Has_family(\"emu\", animal1), Has_family(\"elk\", animal2), animal1 != animal2.\n.output Answer"]}
{"id": 286, "answer": false, "completion": ".decl Is_in_museum(Object:symbol, Museum:symbol)\nIs_in_museum(\"Mona Lisa\", \"Louvre\").\nIs_in_museum(\"Venus de Milo\", \"Louvre\").\n.decl Answer()\nAnswer() :- Is_in_museum(\"Mona Lisa\", museum), Is_in_museum(\"Venus de Milo\", museum).\n.output Answer", "completions": [".decl Is_in_museum(Object:symbol, Museum:symbol)\nIs_in_museum(\"Mona Lisa\", \"Louvre\").\nIs_in_museum(\"Venus de Milo\", \"Louvre\").\n.decl Answer()\nAnswer() :- Is_in_museum(\"Mona Lisa\", museum), Is_in_museum(\"Venus de Milo\", museum).\n.output Answer"]}
{"id": 287, "answer": false, "completion": ".decl Is_descendant_of(Person:symbol, Person_ancestor:symbol)\nIs_descendant_of(\"Aaron Burr\", \"Jonathan Edwards\").\nIs_descendant_of(\"Jonathan Edwards\", \"Timothy Edwards\").\nIs_descendant_of(\"Timothy Edwards\", \"Richard Edwards\").\nIs_descendant_of(\"Richard Edwards\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren", "completions": [".decl Is_descendant_of(Person:symbol, Person_ancestor:symbol)\nIs_descendant_of(\"Aaron Burr\", \"Jonathan Edwards\").\nIs_descendant_of(\"Jonathan Edwards\", \"Timothy Edwards\").\nIs_descendant_of(\"Timothy Edwards\", \"Richard Edwards\").\nIs_descendant_of(\"Richard Edwards\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren\", \"Richard Warren\").\nIs_descendant_of(\"Richard Warren"]}
{"id": 288, "answer": false, "completion": ".decl Has_n_sequels(Movie:symbol, N_sequels:float)\nHas_n_sequels(\"Gremlins\", 2).\nHas_n_sequels(\"Matrix\", 2).\n.decl Answer()\nAnswer() :- Has_n_sequels(\"Gremlins\", n_sequels1), Has_n_sequels(\"Matrix\", n_sequels2), n_sequels1 = n_sequels2.\n.output Answer", "completions": [".decl Has_n_sequels(Movie:symbol, N_sequels:float)\nHas_n_sequels(\"Gremlins\", 2).\nHas_n_sequels(\"Matrix\", 2).\n.decl Answer()\nAnswer() :- Has_n_sequels(\"Gremlins\", n_sequels1), Has_n_sequels(\"Matrix\", n_sequels2), n_sequels1 = n_sequels2.\n.output Answer"]}
{"id": 289, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Tony Stark\", \"engineering\").\nHas_skill(\"Tony Stark\", \"business\").\nHas_skill(\"Tony Stark\", \"science\").\n.decl Answer()\nAnswer() :- Has_skill(\"Tony Stark\", skill1), Has_skill(\"Tony Stark\", skill2), Has_skill(\"Tony Stark\", skill3), skill1 != skill2, skill1 != skill3, skill2 != skill3.\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Tony Stark\", \"engineering\").\nHas_skill(\"Tony Stark\", \"business\").\nHas_skill(\"Tony Stark\", \"science\").\n.decl Answer()\nAnswer() :- Has_skill(\"Tony Stark\", skill1), Has_skill(\"Tony Stark\", skill2), Has_skill(\"Tony Stark\", skill3), skill1 != skill2, skill1 != skill3, skill2 != skill3.\n.output Answer"]}
{"id": 290, "answer": true, "completion": ".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"person\", \"driver's license\").\n.decl Works_in_transport(Person:symbol, Transport:symbol)\nWorks_in_transport(\"person\", \"transport of aviation fuel\").\n.decl Answer()\nAnswer() :- Has_license(person, \"driver's license\"), Works_in_transport(person, \"transport of aviation fuel\").\n.output Answer", "completions": [".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"person\", \"driver's license\").\n.decl Works_in_transport(Person:symbol, Transport:symbol)\nWorks_in_transport(\"person\", \"transport of aviation fuel\").\n.decl Answer()\nAnswer() :- Has_license(person, \"driver's license\"), Works_in_transport(person, \"transport of aviation fuel\").\n.output Answer"]}
{"id": 291, "answer": false, "completion": ".decl Won_most_gold_medals(Country:symbol, Year:symbol)\nWon_most_gold_medals(\"United States\", \"1976\").\n.decl Exists(Country:symbol)\nExists(\"United States\").\n.decl Answer()\nAnswer() :- Won_most_gold_medals(country, \"1976\"), Exists(country).\n.output Answer", "completions": [".decl Won_most_gold_medals(Country:symbol, Year:symbol)\nWon_most_gold_medals(\"United States\", \"1976\").\n.decl Exists(Country:symbol)\nExists(\"United States\").\n.decl Answer()\nAnswer() :- Won_most_gold_medals(country, \"1976\"), Exists(country).\n.output Answer"]}
{"id": 292, "answer": true, "completion": ".decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"open heart surgery\", 6).\nLasts_for_n_hours(\"American Ballet Theatre's Swan Lake\", 3).\n.decl Answer()\nAnswer() :- Lasts_for_n_hours(\"open heart surgery\", n_hours1), Lasts_for_n_hours(\"American Ballet Theatre's Swan Lake\", n_hours2), n_hours1 < n_hours2.\n.output Answer", "completions": [".decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"open heart surgery\", 6).\nLasts_for_n_hours(\"American Ballet Theatre's Swan Lake\", 3).\n.decl Answer()\nAnswer() :- Lasts_for_n_hours(\"open heart surgery\", n_hours1), Lasts_for_n_hours(\"American Ballet Theatre's Swan Lake\", n_hours2), n_hours1 < n_hours2.\n.output Answer"]}
{"id": 293, "answer": true, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 294, "answer": true, "completion": ".decl Has_species(Person:symbol, Species:symbol)\nHas_species(\"John Marshall\", \"neanderthal\").\n.decl Serves_on(Person:symbol, Court:symbol)\nServes_on(\"John Marshall\", \"Supreme Court of the United States\").\n.decl Answer()\nAnswer() :- Has_species(person, \"neanderthal\"), Serves_on(person, \"Supreme Court of the United States\").\n.output Answer", "completions": [".decl Has_species(Person:symbol, Species:symbol)\nHas_species(\"John Marshall\", \"neanderthal\").\n.decl Serves_on(Person:symbol, Court:symbol)\nServes_on(\"John Marshall\", \"Supreme Court of the United States\").\n.decl Answer()\nAnswer() :- Has_species(person, \"neanderthal\"), Serves_on(person, \"Supreme Court of the United States\").\n.output Answer"]}
{"id": 295, "answer": true, "completion": ".decl Went_on_tour_with(Band1:symbol, Band2:symbol)\nWent_on_tour_with(\"Nirvana\", \"Pearl Jam\").\nWent_on_tour_with(\"Nirvana\", \"Mudhoney\").\nWent_on_tour_with(\"Nirvana\", \"Dinosaur Jr.\").\nWent_on_tour_with(\"Nirvana\", \"Tad\").\nWent_on_tour_with(\"Nirvana\", \"The Jesus Lizard\").\nWent_on_tour_with(\"Nirvana\", \"The Vaselines\").\nWent_on_tour_with(\"Nirvana\", \"The Melvins\").\nWent_on_tour_with(\"Nirvana\", \"L7\").\nWent_on_tour_with(\"Nirvana\", \"Sonic Youth\").\nWent_on_tour_with(\"Nirvana\", \"The Breeders\").\nWent_on_tour_with(\"Nirvana\", \"Pixies\").\nWent_on_tour_with(\"Nirvana\", \"Nebula\").\nWent_on_tour_with(\"Nirvana\", \"The Jesus and Mary Chain\").\nWent_on_tour_with(\"Nirvana\", \"The Fluid\").\nWent_on_tour_with(\"Nirvana\", \"The Dwarves\").\nWent_on_tour_with(\"Nirvana\", \"The Gits\").\nWent_on_tour_with(\"Nirvana\", \"The Screaming Trees\").\nWent_on_tour_with(\"Nirvana\", \"The Melvins\").\nWent_on_tour_with(\"Nirvana\", \"The Vaselines\").\nWent_on_tour_with(\"Nirvana\", \"The Jesus Lizard\").\nWent_on_tour_with(\"Nirvana\", \"Tad\").\nWent_on_tour_with(\"Nirvana\", \"Dinosaur Jr.\").\nWent_on_tour_with(\"Nirvana\", \"Mudhoney\").\nWent_on_tour_with(\"Nirvana\", \"Pearl Jam\").\n.decl Answer()\nAnswer() :- Went_on_tour_with(\"Nirvana\", \"Maroon 5\").\n.output Answer", "completions": [".decl Went_on_tour_with(Band1:symbol, Band2:symbol)\nWent_on_tour_with(\"Nirvana\", \"Pearl Jam\").\nWent_on_tour_with(\"Nirvana\", \"Mudhoney\").\nWent_on_tour_with(\"Nirvana\", \"Dinosaur Jr.\").\nWent_on_tour_with(\"Nirvana\", \"Tad\").\nWent_on_tour_with(\"Nirvana\", \"The Jesus Lizard\").\nWent_on_tour_with(\"Nirvana\", \"The Vaselines\").\nWent_on_tour_with(\"Nirvana\", \"The Melvins\").\nWent_on_tour_with(\"Nirvana\", \"L7\").\nWent_on_tour_with(\"Nirvana\", \"Sonic Youth\").\nWent_on_tour_with(\"Nirvana\", \"The Breeders\").\nWent_on_tour_with(\"Nirvana\", \"Pixies\").\nWent_on_tour_with(\"Nirvana\", \"Nebula\").\nWent_on_tour_with(\"Nirvana\", \"The Jesus and Mary Chain\").\nWent_on_tour_with(\"Nirvana\", \"The Fluid\").\nWent_on_tour_with(\"Nirvana\", \"The Dwarves\").\nWent_on_tour_with(\"Nirvana\", \"The Gits\").\nWent_on_tour_with(\"Nirvana\", \"The Screaming Trees\").\nWent_on_tour_with(\"Nirvana\", \"The Melvins\").\nWent_on_tour_with(\"Nirvana\", \"The Vaselines\").\nWent_on_tour_with(\"Nirvana\", \"The Jesus Lizard\").\nWent_on_tour_with(\"Nirvana\", \"Tad\").\nWent_on_tour_with(\"Nirvana\", \"Dinosaur Jr.\").\nWent_on_tour_with(\"Nirvana\", \"Mudhoney\").\nWent_on_tour_with(\"Nirvana\", \"Pearl Jam\").\n.decl Answer()\nAnswer() :- Went_on_tour_with(\"Nirvana\", \"Maroon 5\").\n.output Answer"]}
{"id": 296, "answer": true, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Groundhog Day\", \"Pennsylvania\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"Groundhog Day\", \"Antarctica\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Groundhog Day\", \"Pennsylvania\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"Groundhog Day\", \"Antarctica\").\n.output Answer"]}
{"id": 297, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"helium\", 0.000178).\n.decl Answer()\nAnswer() :- Has_density(\"helium\", density1), density1 > 0.0001.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"helium\", 0.000178).\n.decl Answer()\nAnswer() :- Has_density(\"helium\", density1), density1 > 0.0001.\n.output Answer"]}
{"id": 298, "answer": true, "completion": ".decl Is_fuel(Object:symbol)\nIs_fuel(\"petroleum jelly\").\n.decl Answer()\nAnswer() :- Is_fuel(\"petroleum jelly\").\n.output Answer", "completions": [".decl Is_fuel(Object:symbol)\nIs_fuel(\"petroleum jelly\").\n.decl Answer()\nAnswer() :- Is_fuel(\"petroleum jelly\").\n.output Answer"]}
{"id": 299, "answer": false, "completion": ".decl More_prevalent_than(Sin1:symbol, Sin2:symbol)\nMore_prevalent_than(\"greed\", \"envy\").\nMore_prevalent_than(\"greed\", \"gluttony\").\nMore_prevalent_than(\"greed\", \"lust\").\nMore_prevalent_than(\"greed\", \"sloth\").\nMore_prevalent_than(\"greed\", \"wrath\").\n.decl Answer()\nAnswer() :- More_prevalent_than(sin1, sin2), More_prevalent_than(sin2, sin3), More_prevalent_than(sin3, sin4), More_prevalent_than(sin4, sin5), More_prevalent_than(sin5, sin6), More_prevalent_than(sin6, sin7).\n.output Answer", "completions": [".decl More_prevalent_than(Sin1:symbol, Sin2:symbol)\nMore_prevalent_than(\"greed\", \"envy\").\nMore_prevalent_than(\"greed\", \"gluttony\").\nMore_prevalent_than(\"greed\", \"lust\").\nMore_prevalent_than(\"greed\", \"sloth\").\nMore_prevalent_than(\"greed\", \"wrath\").\n.decl Answer()\nAnswer() :- More_prevalent_than(sin1, sin2), More_prevalent_than(sin2, sin3), More_prevalent_than(sin3, sin4), More_prevalent_than(sin4, sin5), More_prevalent_than(sin5, sin6), More_prevalent_than(sin6, sin7).\n.output Answer"]}
{"id": 300, "answer": true, "completion": ".decl Is_CEO(Person:symbol, Company:symbol)\nIs_CEO(\"Carlos Ghosn\", \"Nissan\").\n.decl Is_wanted_fugitive(Person:symbol)\nIs_wanted_fugitive(\"Carlos Ghosn\").\n.decl Answer()\nAnswer() :- Is_CEO(\"Carlos Ghosn\", \"Nissan\"), Is_wanted_fugitive(\"Carlos Ghosn\").\n.output Answer", "completions": [".decl Is_CEO(Person:symbol, Company:symbol)\nIs_CEO(\"Carlos Ghosn\", \"Nissan\").\n.decl Is_wanted_fugitive(Person:symbol)\nIs_wanted_fugitive(\"Carlos Ghosn\").\n.decl Answer()\nAnswer() :- Is_CEO(\"Carlos Ghosn\", \"Nissan\"), Is_wanted_fugitive(\"Carlos Ghosn\").\n.output Answer"]}
{"id": 301, "answer": true, "completion": ".decl Takes_hormone(Person:symbol, Hormone:symbol)\nTakes_hormone(\"drag king\", \"testosterone\").\n.decl Answer()\nAnswer() :- Takes_hormone(\"drag king\", \"testosterone\").\n.output Answer", "completions": [".decl Takes_hormone(Person:symbol, Hormone:symbol)\nTakes_hormone(\"drag king\", \"testosterone\").\n.decl Answer()\nAnswer() :- Takes_hormone(\"drag king\", \"testosterone\").\n.output Answer"]}
{"id": 302, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"crab\", \"ocean\").\nLives_in(\"lobster\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in(animal, \"ocean\").\n.output Answer\n\n", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"crab\", \"ocean\").\nLives_in(\"lobster\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in(animal, \"ocean\").\n.output Answer\n\n"]}
{"id": 303, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Paul Bunyan\", 30).\n.decl Answer()\nAnswer() :- Has_height(\"Paul Bunyan\", height), height > 10.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Paul Bunyan\", 30).\n.decl Answer()\nAnswer() :- Has_height(\"Paul Bunyan\", height), height > 10.\n.output Answer"]}
{"id": 304, "answer": false, "completion": ".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Black Sea\", 2143).\n.decl Can_travel_through(Light:symbol, Medium:symbol)\nCan_travel_through(\"sunlight\", \"air\").\nCan_travel_through(\"sunlight\", \"water\").\n.decl Answer()\nAnswer() :- Can_travel_through(\"sunlight\", medium), Has_depth(\"Black Sea\", depth), depth <= 1000.\nAnswer() :- Can_travel_through(\"sunlight\", medium), Has_depth(\"Black Sea\", depth), depth > 1000, medium = \"air\".\n.output Answer", "completions": [".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Black Sea\", 2143).\n.decl Can_travel_through(Light:symbol, Medium:symbol)\nCan_travel_through(\"sunlight\", \"air\").\nCan_travel_through(\"sunlight\", \"water\").\n.decl Answer()\nAnswer() :- Can_travel_through(\"sunlight\", medium), Has_depth(\"Black Sea\", depth), depth <= 1000.\nAnswer() :- Can_travel_through(\"sunlight\", medium), Has_depth(\"Black Sea\", depth), depth > 1000, medium = \"air\".\n.output Answer"]}
{"id": 305, "answer": true, "completion": ".decl Is_weapon(Object:symbol)\nIs_weapon(\"slingshot\").\nIs_weapon(\"artillery\").\n.decl Answer()\nAnswer() :- Is_weapon(\"slingshot\"), Is_weapon(\"artillery\").\n.output Answer", "completions": [".decl Is_weapon(Object:symbol)\nIs_weapon(\"slingshot\").\nIs_weapon(\"artillery\").\n.decl Answer()\nAnswer() :- Is_weapon(\"slingshot\"), Is_weapon(\"artillery\").\n.output Answer"]}
{"id": 306, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"9/11\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"don't ask don't tell\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"don't ask don't tell\", n_years1), Last_n_years(\"9/11\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"9/11\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"don't ask don't tell\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"don't ask don't tell\", n_years1), Last_n_years(\"9/11\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 307, "answer": true, "completion": ".decl Has_n_labors(Person:symbol, N_labors:float)\nHas_n_labors(\"Heracles\", 12).\n.decl Answer()\nAnswer() :- Has_n_labors(\"Heracles\", n_labors), n_labors > 13.\n.output Answer", "completions": [".decl Has_n_labors(Person:symbol, N_labors:float)\nHas_n_labors(\"Heracles\", 12).\n.decl Answer()\nAnswer() :- Has_n_labors(\"Heracles\", n_labors), n_labors > 13.\n.output Answer"]}
{"id": 308, "answer": true, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Thanksgiving\", \"Thursday\").\nHappens_on_day(\"day of mourning\", \"Thursday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Thanksgiving\", \"Thursday\"), Happens_on_day(\"day of mourning\", \"Thursday\").\n.output Answer", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Thanksgiving\", \"Thursday\").\nHappens_on_day(\"day of mourning\", \"Thursday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Thanksgiving\", \"Thursday\"), Happens_on_day(\"day of mourning\", \"Thursday\").\n.output Answer"]}
{"id": 309, "answer": true, "completion": ".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Hapshetsut\", \"Pharaoh\").\n.decl Answer()\nAnswer() :- Has_title(\"Hapshetsut\", \"Pharaoh\").\n.output Answer\n\n", "completions": [".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Hapshetsut\", \"Pharaoh\").\n.decl Answer()\nAnswer() :- Has_title(\"Hapshetsut\", \"Pharaoh\").\n.output Answer\n\n"]}
{"id": 310, "answer": false, "completion": ".decl Has_capacity(Ship:symbol, Capacity:float)\nHas_capacity(\"Noah's Ark\", 16000).\nHas_capacity(\"Golden Age of Piracy pirates\", 100).\n.decl Answer()\nAnswer() :- Has_capacity(\"Noah's Ark\", capacity1), Has_capacity(\"Golden Age of Piracy pirates\", capacity2), capacity1 > capacity2.\n.output Answer", "completions": [".decl Has_capacity(Ship:symbol, Capacity:float)\nHas_capacity(\"Noah's Ark\", 16000).\nHas_capacity(\"Golden Age of Piracy pirates\", 100).\n.decl Answer()\nAnswer() :- Has_capacity(\"Noah's Ark\", capacity1), Has_capacity(\"Golden Age of Piracy pirates\", capacity2), capacity1 > capacity2.\n.output Answer"]}
{"id": 311, "answer": true, "completion": ".decl Has_sodium(Food:symbol, Sodium:float)\nHas_sodium(\"Campbell's Soup\", 1000).\n.decl Is_good_for(Food:symbol, Disease:symbol)\nIs_good_for(\"Campbell's Soup\", \"hypertension\").\n.decl Answer()\nAnswer() :- Has_sodium(\"Campbell's Soup\", sodium1), Is_good_for(\"Campbell's Soup\", \"hypertension\"), sodium1 <= 2300.\n.output Answer", "completions": [".decl Has_sodium(Food:symbol, Sodium:float)\nHas_sodium(\"Campbell's Soup\", 1000).\n.decl Is_good_for(Food:symbol, Disease:symbol)\nIs_good_for(\"Campbell's Soup\", \"hypertension\").\n.decl Answer()\nAnswer() :- Has_sodium(\"Campbell's Soup\", sodium1), Is_good_for(\"Campbell's Soup\", \"hypertension\"), sodium1 <= 2300.\n.output Answer"]}
{"id": 312, "answer": false, "completion": ".decl Has_sales(Product:symbol, Sales:float)\nHas_sales(\"Metroid\", 1.5).\n.decl Has_profit(Company:symbol, Profit:float)\nHas_profit(\"Electronic Arts\", 1.0).\n.decl Answer()\nAnswer() :- Has_sales(\"Metroid\", sales), Has_profit(\"Electronic Arts\", profit), sales > profit.\n.output Answer", "completions": [".decl Has_sales(Product:symbol, Sales:float)\nHas_sales(\"Metroid\", 1.5).\n.decl Has_profit(Company:symbol, Profit:float)\nHas_profit(\"Electronic Arts\", 1.0).\n.decl Answer()\nAnswer() :- Has_sales(\"Metroid\", sales), Has_profit(\"Electronic Arts\", profit), sales > profit.\n.output Answer"]}
{"id": 313, "answer": false, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"snowboarding\", \"Hilo\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"snowboarding\", \"Hilo\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"snowboarding\", \"Hilo\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"snowboarding\", \"Hilo\").\n.output Answer"]}
{"id": 314, "answer": false, "completion": ".decl Lives_in_zone(Animal:symbol, Zone:symbol)\nLives_in_zone(\"fish\", \"Bathypelagic Zone\").\n.decl Can_shoot(Animal:symbol, Animal:symbol)\nCan_shoot(\"sniper\", \"fish\").\n.decl Answer()\nAnswer() :- Lives_in_zone(\"fish\", \"Bathypelagic Zone\"), Can_shoot(\"sniper\", \"fish\").\n.output Answer", "completions": [".decl Lives_in_zone(Animal:symbol, Zone:symbol)\nLives_in_zone(\"fish\", \"Bathypelagic Zone\").\n.decl Can_shoot(Animal:symbol, Animal:symbol)\nCan_shoot(\"sniper\", \"fish\").\n.decl Answer()\nAnswer() :- Lives_in_zone(\"fish\", \"Bathypelagic Zone\"), Can_shoot(\"sniper\", \"fish\").\n.output Answer"]}
{"id": 315, "answer": false, "completion": ".decl Influenced_by(Artist:symbol, Genre:symbol)\nInfluenced_by(\"Depeche Mode\", \"blues\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Depeche Mode\", \"blues\").\n.output Answer", "completions": [".decl Influenced_by(Artist:symbol, Genre:symbol)\nInfluenced_by(\"Depeche Mode\", \"blues\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Depeche Mode\", \"blues\").\n.output Answer"]}
{"id": 316, "answer": true, "completion": ".decl Makes(Ingredient:symbol, Food:symbol)\nMakes(\"lactobacillus\", \"pickles\").\n.decl Answer()\nAnswer() :- Makes(\"lactobacillus\", \"pickles\").\n.output Answer\n\n", "completions": [".decl Makes(Ingredient:symbol, Food:symbol)\nMakes(\"lactobacillus\", \"pickles\").\n.decl Answer()\nAnswer() :- Makes(\"lactobacillus\", \"pickles\").\n.output Answer\n\n"]}
{"id": 317, "answer": false, "completion": ".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"King James I\", \"dislike\").\n.decl Is_fairy(Being:symbol)\nIs_fairy(\"fairy\").\n.decl Answer()\nAnswer() :- Has_opinion(\"King James I\", opinion), Is_fairy(being), opinion = \"dislike\".\n.output Answer", "completions": [".decl Has_opinion(Person:symbol, Opinion:symbol)\nHas_opinion(\"King James I\", \"dislike\").\n.decl Is_fairy(Being:symbol)\nIs_fairy(\"fairy\").\n.decl Answer()\nAnswer() :- Has_opinion(\"King James I\", opinion), Is_fairy(being), opinion = \"dislike\".\n.output Answer"]}
{"id": 318, "answer": false, "completion": ".decl Has_incidence(Disability:symbol, Incidence:float)\nHas_incidence(\"dyslexia\", 5).\nHas_incidence(\"intellectual disability\", 1).\n.decl Answer()\nAnswer() :- Has_incidence(\"dyslexia\", incidence1), Has_incidence(\"intellectual disability\", incidence2), incidence1 >= incidence2.\n.output Answer", "completions": [".decl Has_incidence(Disability:symbol, Incidence:float)\nHas_incidence(\"dyslexia\", 5).\nHas_incidence(\"intellectual disability\", 1).\n.decl Answer()\nAnswer() :- Has_incidence(\"dyslexia\", incidence1), Has_incidence(\"intellectual disability\", incidence2), incidence1 >= incidence2.\n.output Answer"]}
{"id": 319, "answer": false, "completion": ".decl Has_search_engine(Company:symbol, Search_engine:symbol)\nHas_search_engine(\"Bing\", \"Bing\").\nHas_search_engine(\"Google\", \"Google\").\nHas_search_engine(\"Yahoo\", \"Yahoo\").\n.decl Has_revenue(Company:symbol, Revenue:float)\nHas_revenue(\"Bing\", 8.4).\nHas_revenue(\"Google\", 90.3).\nHas_revenue(\"Yahoo\", 5.2).\n.decl Answer()\nAnswer() :- Has_search_engine(\"Bing\", \"Bing\"), Has_revenue(\"Bing\", revenue1), Has_search_engine(\"Google\", \"Google\"), Has_revenue(\"Google\", revenue2), revenue1 > revenue2.\nAnswer() :- Has_search_engine(\"Bing\", \"Bing\"), Has_revenue(\"Bing\", revenue1), Has_search_engine(\"Yahoo\", \"Yahoo\"), Has_revenue(\"Yahoo\", revenue2), revenue1 > revenue2.\n.output Answer", "completions": [".decl Has_search_engine(Company:symbol, Search_engine:symbol)\nHas_search_engine(\"Bing\", \"Bing\").\nHas_search_engine(\"Google\", \"Google\").\nHas_search_engine(\"Yahoo\", \"Yahoo\").\n.decl Has_revenue(Company:symbol, Revenue:float)\nHas_revenue(\"Bing\", 8.4).\nHas_revenue(\"Google\", 90.3).\nHas_revenue(\"Yahoo\", 5.2).\n.decl Answer()\nAnswer() :- Has_search_engine(\"Bing\", \"Bing\"), Has_revenue(\"Bing\", revenue1), Has_search_engine(\"Google\", \"Google\"), Has_revenue(\"Google\", revenue2), revenue1 > revenue2.\nAnswer() :- Has_search_engine(\"Bing\", \"Bing\"), Has_revenue(\"Bing\", revenue1), Has_search_engine(\"Yahoo\", \"Yahoo\"), Has_revenue(\"Yahoo\", revenue2), revenue1 > revenue2.\n.output Answer"]}
{"id": 320, "answer": true, "completion": ".decl Has_sodium(Food:symbol, Sodium:float)\nHas_sodium(\"olives\", 0.1).\n.decl Answer()\nAnswer() :- Has_sodium(\"olives\", sodium), sodium < 0.1.\n.output Answer", "completions": [".decl Has_sodium(Food:symbol, Sodium:float)\nHas_sodium(\"olives\", 0.1).\n.decl Answer()\nAnswer() :- Has_sodium(\"olives\", sodium), sodium < 0.1.\n.output Answer"]}
{"id": 321, "answer": false, "completion": ".decl Was_nominee(Person:symbol, Party:symbol, Year:float)\nWas_nominee(\"William Jennings Bryan\", \"Democratic Party\", 1908).\n.decl Invented(Person:symbol, Invention:symbol, Year:float)\nInvented(\"Philo Farnsworth\", \"television\", 1927).\n.decl Answer()\nAnswer() :- Was_nominee(\"William Jennings Bryan\", \"Democratic Party\", 1908), Invented(\"Philo Farnsworth\", \"television\", 1927), 1908 < 1927.\n.output Answer", "completions": [".decl Was_nominee(Person:symbol, Party:symbol, Year:float)\nWas_nominee(\"William Jennings Bryan\", \"Democratic Party\", 1908).\n.decl Invented(Person:symbol, Invention:symbol, Year:float)\nInvented(\"Philo Farnsworth\", \"television\", 1927).\n.decl Answer()\nAnswer() :- Was_nominee(\"William Jennings Bryan\", \"Democratic Party\", 1908), Invented(\"Philo Farnsworth\", \"television\", 1927), 1908 < 1927.\n.output Answer"]}
{"id": 322, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Great Recession\", 8).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"severest unemployment\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"severest unemployment\", n_years1), Last_n_years(\"Great Recession\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Great Recession\", 8).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"severest unemployment\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"severest unemployment\", n_years1), Last_n_years(\"Great Recession\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 323, "answer": true, "completion": ".decl Lives_in_area(Animal:symbol, Area:symbol)\nLives_in_area(\"Grizzly Bear\", \"North America\").\n.decl Occupies(Person:symbol, Fort:symbol)\nOccupies(\"occupants of Vellore Fort\", \"Vellore Fort\").\n.decl Answer()\nAnswer() :- Lives_in_area(\"Grizzly Bear\", area1), Occupies(\"occupants of Vellore Fort\", \"Vellore Fort\"), area1 != \"India\".\n.output Answer", "completions": [".decl Lives_in_area(Animal:symbol, Area:symbol)\nLives_in_area(\"Grizzly Bear\", \"North America\").\n.decl Occupies(Person:symbol, Fort:symbol)\nOccupies(\"occupants of Vellore Fort\", \"Vellore Fort\").\n.decl Answer()\nAnswer() :- Lives_in_area(\"Grizzly Bear\", area1), Occupies(\"occupants of Vellore Fort\", \"Vellore Fort\"), area1 != \"India\".\n.output Answer"]}
{"id": 324, "answer": true, "completion": ".decl Has_n_episodes(TV_show:symbol, N_episodes:float)\nHas_n_episodes(\"Ugly Betty\", 80).\n.decl Has_n_days(Time_period:symbol, N_days:float)\nHas_n_days(\"week\", 7).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Ugly Betty\", n_episodes), Has_n_days(\"week\", n_days), n_episodes <= n_days.\n.output Answer", "completions": [".decl Has_n_episodes(TV_show:symbol, N_episodes:float)\nHas_n_episodes(\"Ugly Betty\", 80).\n.decl Has_n_days(Time_period:symbol, N_days:float)\nHas_n_days(\"week\", 7).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Ugly Betty\", n_episodes), Has_n_days(\"week\", n_days), n_episodes <= n_days.\n.output Answer"]}
{"id": 325, "answer": false, "completion": ".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"snow leopard\", \"Himalayas\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"snow leopard\", \"Yucatan\").\n.output Answer", "completions": [".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"snow leopard\", \"Himalayas\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"snow leopard\", \"Yucatan\").\n.output Answer"]}
{"id": 326, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"One-child policy\", 1980).\nHappens_in_year(\"One-child policy\", 1990).\n.decl Answer()\nAnswer() :- Happens_in_year(\"One-child policy\", year), 3.141592654 >= year.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"One-child policy\", 1980).\nHappens_in_year(\"One-child policy\", 1990).\n.decl Answer()\nAnswer() :- Happens_in_year(\"One-child policy\", year), 3.141592654 >= year.\n.output Answer"]}
{"id": 327, "answer": true, "completion": ".decl Can_prevent(Treatment:symbol, Disease:symbol)\nCan_prevent(\"surgery\", \"cancer\").\nCan_prevent(\"surgery\", \"heart disease\").\nCan_prevent(\"surgery\", \"appendicitis\").\nCan_prevent(\"surgery\", \"gallstones\").\nCan_prevent(\"surgery\", \"hernia\").\nCan_prevent(\"surgery\", \"kidney stones\").\nCan_prevent(\"surgery\", \"tuberculosis\").\nCan_prevent(\"surgery\", \"ulcers\").\nCan_prevent(\"surgery\", \"varicose veins\").\nCan_prevent(\"surgery\", \"wisdom teeth\").\n.decl Answer()\nAnswer() :- Can_prevent(\"surgery\", \"existential crisis\").\n.output Answer", "completions": [".decl Can_prevent(Treatment:symbol, Disease:symbol)\nCan_prevent(\"surgery\", \"cancer\").\nCan_prevent(\"surgery\", \"heart disease\").\nCan_prevent(\"surgery\", \"appendicitis\").\nCan_prevent(\"surgery\", \"gallstones\").\nCan_prevent(\"surgery\", \"hernia\").\nCan_prevent(\"surgery\", \"kidney stones\").\nCan_prevent(\"surgery\", \"tuberculosis\").\nCan_prevent(\"surgery\", \"ulcers\").\nCan_prevent(\"surgery\", \"varicose veins\").\nCan_prevent(\"surgery\", \"wisdom teeth\").\n.decl Answer()\nAnswer() :- Can_prevent(\"surgery\", \"existential crisis\").\n.output Answer"]}
{"id": 328, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"greyhound\", 40).\nHas_speed(\"greyhound bus\", 60).\n.decl Answer()\nAnswer() :- Has_speed(\"greyhound\", speed1), Has_speed(\"greyhound bus\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"greyhound\", 40).\nHas_speed(\"greyhound bus\", 60).\n.decl Answer()\nAnswer() :- Has_speed(\"greyhound\", speed1), Has_speed(\"greyhound bus\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 329, "answer": true, "completion": ".decl Is_part_of(Star:symbol, Constellation:symbol)\nIs_part_of(\"Sirius\", \"Canis Major\").\n.decl Is_constellation_of(Constellation:symbol, Animal:symbol)\nIs_constellation_of(\"Canis Major\", \"dog\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Sirius\", constellation), Is_constellation_of(constellation, \"animal\").\n.output Answer", "completions": [".decl Is_part_of(Star:symbol, Constellation:symbol)\nIs_part_of(\"Sirius\", \"Canis Major\").\n.decl Is_constellation_of(Constellation:symbol, Animal:symbol)\nIs_constellation_of(\"Canis Major\", \"dog\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Sirius\", constellation), Is_constellation_of(constellation, \"animal\").\n.output Answer"]}
{"id": 330, "answer": false, "completion": ".decl Is_an_example_of(Thing:symbol, Thing_type:symbol)\nIs_an_example_of(\"Snow White\", \"good consent\").\n.decl Answer()\nAnswer() :- Is_an_example_of(\"Snow White\", \"good consent\").\n.output Answer", "completions": [".decl Is_an_example_of(Thing:symbol, Thing_type:symbol)\nIs_an_example_of(\"Snow White\", \"good consent\").\n.decl Answer()\nAnswer() :- Is_an_example_of(\"Snow White\", \"good consent\").\n.output Answer"]}
{"id": 331, "answer": true, "completion": ".decl Appears_in(Film:symbol, Character:symbol)\nAppears_in(\"The Invisible Man\", \"The Invisible Man\").\nAppears_in(\"Picnic at Hanging Rock\", \"The Rock\").\n.decl Answer()\nAnswer() :- Appears_in(film1, \"The Invisible Man\"), Appears_in(film2, \"The Rock\"), film1 != film2.\n.output Answer", "completions": [".decl Appears_in(Film:symbol, Character:symbol)\nAppears_in(\"The Invisible Man\", \"The Invisible Man\").\nAppears_in(\"Picnic at Hanging Rock\", \"The Rock\").\n.decl Answer()\nAnswer() :- Appears_in(film1, \"The Invisible Man\"), Appears_in(film2, \"The Rock\"), film1 != film2.\n.output Answer"]}
{"id": 332, "answer": true, "completion": ".decl Weighs(Animal:symbol, Weight:float)\nWeighs(\"bengal fox\", 3.5).\n.decl Can_throw(Person:symbol, Animal:symbol)\nCan_throw(\"Ryan Crouser\", \"bengal fox\").\n.decl Answer()\nAnswer() :- Weighs(\"bengal fox\", weight), Can_throw(\"Ryan Crouser\", \"bengal fox\"), weight <= 10.\n.output Answer", "completions": [".decl Weighs(Animal:symbol, Weight:float)\nWeighs(\"bengal fox\", 3.5).\n.decl Can_throw(Person:symbol, Animal:symbol)\nCan_throw(\"Ryan Crouser\", \"bengal fox\").\n.decl Answer()\nAnswer() :- Weighs(\"bengal fox\", weight), Can_throw(\"Ryan Crouser\", \"bengal fox\"), weight <= 10.\n.output Answer"]}
{"id": 333, "answer": true, "completion": ".decl Performs_live(Person:symbol, Performance:symbol)\nPerforms_live(\"Amy Winehouse\", \"perfectly\").\n.decl Answer()\nAnswer() :- Performs_live(\"Amy Winehouse\", \"perfectly\").\n.output Answer", "completions": [".decl Performs_live(Person:symbol, Performance:symbol)\nPerforms_live(\"Amy Winehouse\", \"perfectly\").\n.decl Answer()\nAnswer() :- Performs_live(\"Amy Winehouse\", \"perfectly\").\n.output Answer"]}
{"id": 334, "answer": true, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Hurricane Harvey\", 130).\nHas_speed(\"Peregrine falcon\", 242).\n.decl Answer()\nAnswer() :- Has_speed(\"Hurricane Harvey\", speed1), Has_speed(\"Peregrine falcon\", speed2), speed1 < speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Hurricane Harvey\", 130).\nHas_speed(\"Peregrine falcon\", 242).\n.decl Answer()\nAnswer() :- Has_speed(\"Hurricane Harvey\", speed1), Has_speed(\"Peregrine falcon\", speed2), speed1 < speed2.\n.output Answer"]}
{"id": 335, "answer": true, "completion": ".decl Is_a_person(Person:symbol)\nIs_a_person(\"Chinese American\").\n.decl Is_a_country(Country:symbol)\nIs_a_country(\"United States\").\n.decl Is_a_government(Government:symbol)\nIs_a_government(\"Federal\").\n.decl Answer()\nAnswer() :- Is_a_person(person), Is_a_country(country), Is_a_government(government), Discrimination(person, country, government).\n.output Answer", "completions": [".decl Is_a_person(Person:symbol)\nIs_a_person(\"Chinese American\").\n.decl Is_a_country(Country:symbol)\nIs_a_country(\"United States\").\n.decl Is_a_government(Government:symbol)\nIs_a_government(\"Federal\").\n.decl Answer()\nAnswer() :- Is_a_person(person), Is_a_country(country), Is_a_government(government), Discrimination(person, country, government).\n.output Answer"]}
{"id": 336, "answer": true, "completion": ".decl Has_n_syllables(Word:symbol, N_syllables:float)\nHas_n_syllables(\"haiku\", 17).\n.decl Has_n_characters(Word:symbol, N_characters:float)\nHas_n_characters(\"haiku\", 7).\n.decl Answer()\nAnswer() :- Has_n_syllables(\"haiku\", n_syllables), Has_n_characters(\"haiku\", n_characters), n_syllables <= n_characters.\n.output Answer", "completions": [".decl Has_n_syllables(Word:symbol, N_syllables:float)\nHas_n_syllables(\"haiku\", 17).\n.decl Has_n_characters(Word:symbol, N_characters:float)\nHas_n_characters(\"haiku\", 7).\n.decl Answer()\nAnswer() :- Has_n_syllables(\"haiku\", n_syllables), Has_n_characters(\"haiku\", n_characters), n_syllables <= n_characters.\n.output Answer"]}
{"id": 337, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"adult human skull\", 7500).\nHas_volume(\"birth canal\", 500).\n.decl Answer()\nAnswer() :- Has_volume(\"adult human skull\", volume1), Has_volume(\"birth canal\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"adult human skull\", 7500).\nHas_volume(\"birth canal\", 500).\n.decl Answer()\nAnswer() :- Has_volume(\"adult human skull\", volume1), Has_volume(\"birth canal\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 338, "answer": false, "completion": ".decl Has_box_office_revenue(Film:symbol, Revenue:float)\nHas_box_office_revenue(\"King Kong\", 550).\nHas_box_office_revenue(\"Lord of the Rings: The Return of the King\", 1170).\n.decl Answer()\nAnswer() :- Has_box_office_revenue(\"King Kong\", revenue1), Has_box_office_revenue(film2, revenue2), revenue1 > revenue2.\n.output Answer", "completions": [".decl Has_box_office_revenue(Film:symbol, Revenue:float)\nHas_box_office_revenue(\"King Kong\", 550).\nHas_box_office_revenue(\"Lord of the Rings: The Return of the King\", 1170).\n.decl Answer()\nAnswer() :- Has_box_office_revenue(\"King Kong\", revenue1), Has_box_office_revenue(film2, revenue2), revenue1 > revenue2.\n.output Answer"]}
{"id": 339, "answer": false, "completion": ".decl Has_ingredient(Color:symbol, Ingredient:symbol)\nHas_ingredient(\"purple\", \"mollusks\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"purple\", \"mollusks\").\n.output Answer", "completions": [".decl Has_ingredient(Color:symbol, Ingredient:symbol)\nHas_ingredient(\"purple\", \"mollusks\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"purple\", \"mollusks\").\n.output Answer"]}
{"id": 340, "answer": true, "completion": ".decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"25th US census\", 10).\nHappens_every_n_years(\"anchovy birth\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"anchovy birth\", n_years1), Happens_every_n_years(\"25th US census\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"25th US census\", 10).\nHappens_every_n_years(\"anchovy birth\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"anchovy birth\", n_years1), Happens_every_n_years(\"25th US census\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 341, "answer": false, "completion": ".decl En_route(Airplane:symbol, From:symbol, To:symbol)\nEn_route(\"Air France\", \"China\", \"France\").\n.decl Uses_unit(Airplane:symbol, Unit:symbol)\nUses_unit(\"Air France\", \"meter\").\n.decl Answer()\nAnswer() :- En_route(\"Air France\", \"China\", \"France\"), Uses_unit(\"Air France\", \"meter\").\n.output Answer", "completions": [".decl En_route(Airplane:symbol, From:symbol, To:symbol)\nEn_route(\"Air France\", \"China\", \"France\").\n.decl Uses_unit(Airplane:symbol, Unit:symbol)\nUses_unit(\"Air France\", \"meter\").\n.decl Answer()\nAnswer() :- En_route(\"Air France\", \"China\", \"France\"), Uses_unit(\"Air France\", \"meter\").\n.output Answer"]}
{"id": 342, "answer": false, "completion": ".decl Has_length(Work:symbol, Length:float)\nHas_length(\"Lines on the Antiquity of Microbes\", 1).\nHas_length(\"haiku\", 17).\n.decl Answer()\nAnswer() :- Has_length(\"Lines on the Antiquity of Microbes\", length1), Has_length(\"haiku\", length2), length1 < length2.\n.output Answer", "completions": [".decl Has_length(Work:symbol, Length:float)\nHas_length(\"Lines on the Antiquity of Microbes\", 1).\nHas_length(\"haiku\", 17).\n.decl Answer()\nAnswer() :- Has_length(\"Lines on the Antiquity of Microbes\", length1), Has_length(\"haiku\", length2), length1 < length2.\n.output Answer"]}
{"id": 343, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Metallica\", 4).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"giant pandas\", 1).\n.decl Answer()\nAnswer() :- Has_n_members(\"Metallica\", n_members1), Has_n_members(\"giant pandas\", n_members2), n_members1 <= n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Metallica\", 4).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"giant pandas\", 1).\n.decl Answer()\nAnswer() :- Has_n_members(\"Metallica\", n_members1), Has_n_members(\"giant pandas\", n_members2), n_members1 <= n_members2.\n.output Answer"]}
{"id": 344, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"snowy day\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), Happens_in_time(\"snowy day\", season).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"snowy day\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), Happens_in_time(\"snowy day\", season).\n.output Answer"]}
{"id": 345, "answer": false, "completion": ".decl Is_member_of(Person:symbol, Organization:symbol)\nIs_member_of(\"Cyril Ramaphosa\", \"African National Congress\").\n.decl Answer()\nAnswer() :- Is_member_of(\"Cyril Ramaphosa\", \"African National Congress\").\nAnswer() :- Is_member_of(\"Cyril Ramaphosa\", \"NATO\").\n.output Answer", "completions": [".decl Is_member_of(Person:symbol, Organization:symbol)\nIs_member_of(\"Cyril Ramaphosa\", \"African National Congress\").\n.decl Answer()\nAnswer() :- Is_member_of(\"Cyril Ramaphosa\", \"African National Congress\").\nAnswer() :- Is_member_of(\"Cyril Ramaphosa\", \"NATO\").\n.output Answer"]}
{"id": 346, "answer": false, "completion": ".decl Is_artisan_made(Product:symbol)\nIs_artisan_made(\"twinkies\").\n.decl Answer()\nAnswer() :- Is_artisan_made(\"twinkies\").\n.output Answer", "completions": [".decl Is_artisan_made(Product:symbol)\nIs_artisan_made(\"twinkies\").\n.decl Answer()\nAnswer() :- Is_artisan_made(\"twinkies\").\n.output Answer"]}
{"id": 347, "answer": false, "completion": ".decl Born_near(Person:symbol, Place:symbol)\nBorn_near(\"Sean Connery\", \"Edinburgh\").\n.decl Is_near(Place1:symbol, Place2:symbol)\nIs_near(\"Washington Monument\", \"Washington, D.C.\").\n.decl Answer()\nAnswer() :- Born_near(\"Sean Connery\", place), Is_near(place, \"Washington Monument\").\n.output Answer", "completions": [".decl Born_near(Person:symbol, Place:symbol)\nBorn_near(\"Sean Connery\", \"Edinburgh\").\n.decl Is_near(Place1:symbol, Place2:symbol)\nIs_near(\"Washington Monument\", \"Washington, D.C.\").\n.decl Answer()\nAnswer() :- Born_near(\"Sean Connery\", place), Is_near(place, \"Washington Monument\").\n.output Answer"]}
{"id": 348, "answer": true, "completion": ".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"tonsillectomy\", \"tonsillitis\").\n.decl Answer()\nAnswer() :- Cures(\"tonsillectomy\", \"hepatitis\").\n.output Answer", "completions": [".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"tonsillectomy\", \"tonsillitis\").\n.decl Answer()\nAnswer() :- Cures(\"tonsillectomy\", \"hepatitis\").\n.output Answer"]}
{"id": 349, "answer": false, "completion": ".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"Frozen\", \"living ice\").\n.decl Is_popular(Object:symbol)\nIs_popular(\"Frozen\").\n.decl Answer()\nAnswer() :- Is_made_of(\"Frozen\", \"living ice\"), Is_popular(\"Frozen\").\n.output Answer", "completions": [".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"Frozen\", \"living ice\").\n.decl Is_popular(Object:symbol)\nIs_popular(\"Frozen\").\n.decl Answer()\nAnswer() :- Is_made_of(\"Frozen\", \"living ice\"), Is_popular(\"Frozen\").\n.output Answer"]}
{"id": 350, "answer": true, "completion": ".decl Has_lunch_at_school(Student:symbol, School:symbol)\nHas_lunch_at_school(\"student\", \"school\").\n.decl Answer()\nAnswer() :- Has_lunch_at_school(\"student\", \"school\").\n.output Answer", "completions": [".decl Has_lunch_at_school(Student:symbol, School:symbol)\nHas_lunch_at_school(\"student\", \"school\").\n.decl Answer()\nAnswer() :- Has_lunch_at_school(\"student\", \"school\").\n.output Answer"]}
{"id": 351, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"stool\", 0.5).\nHas_height(\"almond tree\", 5).\n.decl Answer()\nAnswer() :- Has_height(\"stool\", height1), Has_height(\"almond tree\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"stool\", 0.5).\nHas_height(\"almond tree\", 5).\n.decl Answer()\nAnswer() :- Has_height(\"stool\", height1), Has_height(\"almond tree\", height2), height1 < height2.\n.output Answer"]}
{"id": 352, "answer": true, "completion": ".decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"Bonanza marathon\", 12).\nLasts_for_n_hours(\"WWE Heat marathon\", 8).\n.decl Answer()\nAnswer() :- Lasts_for_n_hours(\"Bonanza marathon\", n_hours1), Lasts_for_n_hours(\"WWE Heat marathon\", n_hours2), n_hours1 > n_hours2.\n.output Answer", "completions": [".decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"Bonanza marathon\", 12).\nLasts_for_n_hours(\"WWE Heat marathon\", 8).\n.decl Answer()\nAnswer() :- Lasts_for_n_hours(\"Bonanza marathon\", n_hours1), Lasts_for_n_hours(\"WWE Heat marathon\", n_hours2), n_hours1 > n_hours2.\n.output Answer"]}
{"id": 353, "answer": false, "completion": ".decl Gross_foods(Food:symbol)\nGross_foods(\"sushi\").\nGross_foods(\"raw oysters\").\nGross_foods(\"raw fish\").\nGross_foods(\"raw squid\").\nGross_foods(\"raw octopus\").\nGross_foods(\"raw eel\").\nGross_foods(\"raw shrimp\").\nGross_foods(\"raw crab\").\nGross_foods(\"raw lobster\").\nGross_foods(\"raw scallops\").\nGross_foods(\"raw clams\").\nGross_foods(\"raw mussels\").\nGross_foods(\"raw abalone\").\nGross_foods(\"raw sea urchin\").\nGross_foods(\"raw sea cucumber\").\nGross_foods(\"raw sea urchin roe\").\nGross_foods(\"raw sea urchin gonads\").\nGross_foods(\"raw sea urchin testicles\").\nGross_foods(\"raw sea urchin ovaries\").\nGross_foods(\"raw sea urchin eggs\").\nGross_foods(\"raw sea urchin sperm\").\nGross_foods(\"raw sea urchin milt\").\nGross_foods(\"raw sea urchin spawn\").\nGross_foods(\"raw sea urchin larvae\").\nGross_foods(\"raw sea urchin pupae\").\nGross_foods(\"raw sea urchin nymphs\").\nGross_foods(\"raw sea urchin metamorphs\").\nGross_foods(\"raw sea urchin juveniles\").\nGross_foods(\"raw sea urchin young\").\nGross_foods(\"raw sea urchin fry\").\nGross_foods(\"raw sea urchin fingerlings\").\nGross_foods(\"raw sea urchin minnows\").\nGross_foods(\"raw sea urchin shad\").\nGross_foods(\"raw sea urchin herring\").\nGross_foods(\"raw sea urchin sardines\").\nGross_foods(\"raw sea urchin pilchards\").\nGross_foods(\"raw sea urchin anchovies\").\nGross_foods(\"raw sea urchin sprats\").\nGross_foods(\"raw sea urchin minnows\").\nGross_foods(\"raw sea urchin gobies\").\nGross_foods(\"raw sea urchin loaches\").\nGross_foods(\"raw sea urchin catfish\").\nGross_foods(\"raw sea urchin cod\").\nGross_foods(\"raw sea urchin haddock\").\nGross_foods(\"raw sea urchin hake\").\nGross_foods(\"raw sea urchin halibut\").\nGross_foods(\"raw sea urchin herring\").\nGross_foods(\"raw sea urchin mackerel\").\nGross_foods(\"raw sea urchin salmon\").\nGross_foods(\"raw sea urchin trout\").\nGross_foods(\"raw sea urchin tuna\").\nGross_foods(\"raw sea urchin whitefish\").\nGross_foods(\"raw sea urchin yellowtail\").\nGross_foods(\"raw sea urchin barracuda\").\nGross_foods(\"raw sea urchin bluefish\").\nGross_foods(\"raw sea urchin bonito\").\nGross_foods(\"raw sea urch", "completions": [".decl Gross_foods(Food:symbol)\nGross_foods(\"sushi\").\nGross_foods(\"raw oysters\").\nGross_foods(\"raw fish\").\nGross_foods(\"raw squid\").\nGross_foods(\"raw octopus\").\nGross_foods(\"raw eel\").\nGross_foods(\"raw shrimp\").\nGross_foods(\"raw crab\").\nGross_foods(\"raw lobster\").\nGross_foods(\"raw scallops\").\nGross_foods(\"raw clams\").\nGross_foods(\"raw mussels\").\nGross_foods(\"raw abalone\").\nGross_foods(\"raw sea urchin\").\nGross_foods(\"raw sea cucumber\").\nGross_foods(\"raw sea urchin roe\").\nGross_foods(\"raw sea urchin gonads\").\nGross_foods(\"raw sea urchin testicles\").\nGross_foods(\"raw sea urchin ovaries\").\nGross_foods(\"raw sea urchin eggs\").\nGross_foods(\"raw sea urchin sperm\").\nGross_foods(\"raw sea urchin milt\").\nGross_foods(\"raw sea urchin spawn\").\nGross_foods(\"raw sea urchin larvae\").\nGross_foods(\"raw sea urchin pupae\").\nGross_foods(\"raw sea urchin nymphs\").\nGross_foods(\"raw sea urchin metamorphs\").\nGross_foods(\"raw sea urchin juveniles\").\nGross_foods(\"raw sea urchin young\").\nGross_foods(\"raw sea urchin fry\").\nGross_foods(\"raw sea urchin fingerlings\").\nGross_foods(\"raw sea urchin minnows\").\nGross_foods(\"raw sea urchin shad\").\nGross_foods(\"raw sea urchin herring\").\nGross_foods(\"raw sea urchin sardines\").\nGross_foods(\"raw sea urchin pilchards\").\nGross_foods(\"raw sea urchin anchovies\").\nGross_foods(\"raw sea urchin sprats\").\nGross_foods(\"raw sea urchin minnows\").\nGross_foods(\"raw sea urchin gobies\").\nGross_foods(\"raw sea urchin loaches\").\nGross_foods(\"raw sea urchin catfish\").\nGross_foods(\"raw sea urchin cod\").\nGross_foods(\"raw sea urchin haddock\").\nGross_foods(\"raw sea urchin hake\").\nGross_foods(\"raw sea urchin halibut\").\nGross_foods(\"raw sea urchin herring\").\nGross_foods(\"raw sea urchin mackerel\").\nGross_foods(\"raw sea urchin salmon\").\nGross_foods(\"raw sea urchin trout\").\nGross_foods(\"raw sea urchin tuna\").\nGross_foods(\"raw sea urchin whitefish\").\nGross_foods(\"raw sea urchin yellowtail\").\nGross_foods(\"raw sea urchin barracuda\").\nGross_foods(\"raw sea urchin bluefish\").\nGross_foods(\"raw sea urchin bonito\").\nGross_foods(\"raw sea urch"]}
{"id": 354, "answer": false, "completion": ".decl Has_ride(Theme_park:symbol, Ride:symbol)\nHas_ride(\"Disneyland\", \"Tom and Jerry\").\n.decl Answer()\nAnswer() :- Has_ride(\"Disneyland\", \"Tom and Jerry\").\n.output Answer", "completions": [".decl Has_ride(Theme_park:symbol, Ride:symbol)\nHas_ride(\"Disneyland\", \"Tom and Jerry\").\n.decl Answer()\nAnswer() :- Has_ride(\"Disneyland\", \"Tom and Jerry\").\n.output Answer"]}
{"id": 355, "answer": true, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Snickers bar\", 250).\n.decl Needs_calories(Person:symbol, Calories:float)\nNeeds_calories(\"2019 Natalie Portman\", 1800).\n.decl Answer()\nAnswer() :- Has_calories(\"Snickers bar\", calories1), Needs_calories(\"2019 Natalie Portman\", calories2), calories1 > calories2.\n.output Answer", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Snickers bar\", 250).\n.decl Needs_calories(Person:symbol, Calories:float)\nNeeds_calories(\"2019 Natalie Portman\", 1800).\n.decl Answer()\nAnswer() :- Has_calories(\"Snickers bar\", calories1), Needs_calories(\"2019 Natalie Portman\", calories2), calories1 > calories2.\n.output Answer"]}
{"id": 356, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"licensed child driving Mercedes-Benz\", 15).\n.decl Has_age_limit(Job:symbol, Age_limit:float)\nHas_age_limit(\"employed in US\", 16).\n.decl Answer()\nAnswer() :- Has_age(\"licensed child driving Mercedes-Benz\", age1), Has_age_limit(\"employed in US\", age2), age1 < age2.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"licensed child driving Mercedes-Benz\", 15).\n.decl Has_age_limit(Job:symbol, Age_limit:float)\nHas_age_limit(\"employed in US\", 16).\n.decl Answer()\nAnswer() :- Has_age(\"licensed child driving Mercedes-Benz\", age1), Has_age_limit(\"employed in US\", age2), age1 < age2.\n.output Answer"]}
{"id": 357, "answer": true, "completion": ".decl Has_n_tones(Scale:symbol, N_tones:float)\nHas_n_tones(\"Iwato\", 5).\n.decl Answer()\nAnswer() :- Has_n_tones(\"Iwato\", n_tones), n_tones != 12.\n.output Answer", "completions": [".decl Has_n_tones(Scale:symbol, N_tones:float)\nHas_n_tones(\"Iwato\", 5).\n.decl Answer()\nAnswer() :- Has_n_tones(\"Iwato\", n_tones), n_tones != 12.\n.output Answer"]}
{"id": 358, "answer": true, "completion": ".decl Has_fans(Person:symbol, Fans:symbol)\nHas_fans(\"Stephen King\", \"clown\").\n.decl Answer()\nAnswer() :- Has_fans(\"Stephen King\", \"clown\").\n.output Answer\n\n", "completions": [".decl Has_fans(Person:symbol, Fans:symbol)\nHas_fans(\"Stephen King\", \"clown\").\n.decl Answer()\nAnswer() :- Has_fans(\"Stephen King\", \"clown\").\n.output Answer\n\n"]}
{"id": 359, "answer": true, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"McDonald's\", \"hamburger\").\nSells(\"McDonald's\", \"fries\").\nSells(\"McDonald's\", \"drink\").\nSells(\"Intel\", \"processor\").\nSells(\"Intel\", \"motherboard\").\n.decl Answer()\nAnswer() :- Sells(\"McDonald's\", \"Intel\").\nAnswer() :- Sells(\"McDonald's\", \"Intel\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"McDonald's\", \"hamburger\").\nSells(\"McDonald's\", \"fries\").\nSells(\"McDonald's\", \"drink\").\nSells(\"Intel\", \"processor\").\nSells(\"Intel\", \"motherboard\").\n.decl Answer()\nAnswer() :- Sells(\"McDonald's\", \"Intel\").\nAnswer() :- Sells(\"McDonald's\", \"Intel\").\n.output Answer"]}
{"id": 360, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"2008 Summer Olympics\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Rowe 550\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Rowe 550\", n_years1), Last_n_years(\"2008 Summer Olympics\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"2008 Summer Olympics\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Rowe 550\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Rowe 550\", n_years1), Last_n_years(\"2008 Summer Olympics\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 361, "answer": true, "completion": ".decl Has_n_gramophones(Band:symbol, N_gramophones:float)\nHas_n_gramophones(\"Led Zeppelin\", 11).\n.decl Is_prime(N:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\n.decl Answer()\nAnswer() :- Has_n_gramophones(\"Led Zeppelin\", n_gramophones), Is_prime(n_gramophones).\n.output Answer", "completions": [".decl Has_n_gramophones(Band:symbol, N_gramophones:float)\nHas_n_gramophones(\"Led Zeppelin\", 11).\n.decl Is_prime(N:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\n.decl Answer()\nAnswer() :- Has_n_gramophones(\"Led Zeppelin\", n_gramophones), Is_prime(n_gramophones).\n.output Answer"]}
{"id": 362, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\nHas_height(\"German Shepherd\", 0.7).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"German Shepherd\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\nHas_height(\"German Shepherd\", 0.7).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"German Shepherd\", height2), height1 > height2.\n.output Answer"]}
{"id": 363, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Great Pyramid of Giza\", 146.5).\n.decl Has_length(Object:symbol, Length:float)\nHas_length(\"man\", 1.7).\n.decl Answer()\nAnswer() :- Has_height(\"Great Pyramid of Giza\", height), Has_length(\"man\", length), 200*length >= height.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Great Pyramid of Giza\", 146.5).\n.decl Has_length(Object:symbol, Length:float)\nHas_length(\"man\", 1.7).\n.decl Answer()\nAnswer() :- Has_height(\"Great Pyramid of Giza\", height), Has_length(\"man\", length), 200*length >= height.\n.output Answer"]}
{"id": 364, "answer": true, "completion": ".decl Is_ignorable(Tumor:symbol)\nIs_ignorable(\"tumor in the lymph nodes\").\n.decl Answer()\nAnswer() :- Is_ignorable(\"tumor in the lymph nodes\").\n.output Answer", "completions": [".decl Is_ignorable(Tumor:symbol)\nIs_ignorable(\"tumor in the lymph nodes\").\n.decl Answer()\nAnswer() :- Is_ignorable(\"tumor in the lymph nodes\").\n.output Answer"]}
{"id": 365, "answer": true, "completion": ".decl Hosts(Person:symbol, Show:symbol)\nHosts(\"Stephen Colbert\", \"The Colbert Report\").\n.decl Supports(Person:symbol, Candidate:symbol)\nSupports(\"Stephen Colbert\", \"Donald Trump\").\n.decl Answer()\nAnswer() :- Hosts(person, \"The Colbert Report\"), Supports(person, \"Donald Trump\").\n.output Answer", "completions": [".decl Hosts(Person:symbol, Show:symbol)\nHosts(\"Stephen Colbert\", \"The Colbert Report\").\n.decl Supports(Person:symbol, Candidate:symbol)\nSupports(\"Stephen Colbert\", \"Donald Trump\").\n.decl Answer()\nAnswer() :- Hosts(person, \"The Colbert Report\"), Supports(person, \"Donald Trump\").\n.output Answer"]}
{"id": 366, "answer": false, "completion": ".decl Last_n_years(Person:symbol, N_years:float)\nLast_n_years(\"Tony Bennett\", 94).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"baby\", 9).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"baby\", n_years1), Last_n_years(\"Tony Bennett\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Person:symbol, N_years:float)\nLast_n_years(\"Tony Bennett\", 94).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"baby\", 9).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"baby\", n_years1), Last_n_years(\"Tony Bennett\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 367, "answer": true, "completion": ".decl Exists(Entity:symbol)\nExists(\"Jesus\").\nExists(\"Easter Bunny\").\n.decl Answer()\nAnswer() :- Exists(\"Jesus\"), Exists(\"Easter Bunny\").\n.output Answer", "completions": [".decl Exists(Entity:symbol)\nExists(\"Jesus\").\nExists(\"Easter Bunny\").\n.decl Answer()\nAnswer() :- Exists(\"Jesus\"), Exists(\"Easter Bunny\").\n.output Answer"]}
{"id": 368, "answer": true, "completion": ".decl Is_in_sequence(Number:float, Sequence:symbol)\nIs_in_sequence(0, \"Fibonacci\").\nIs_in_sequence(1, \"Fibonacci\").\nIs_in_sequence(2, \"Fibonacci\").\nIs_in_sequence(3, \"Fibonacci\").\nIs_in_sequence(5, \"Fibonacci\").\nIs_in_sequence(8, \"Fibonacci\").\nIs_in_sequence(13, \"Fibonacci\").\nIs_in_sequence(21, \"Fibonacci\").\nIs_in_sequence(34, \"Fibonacci\").\nIs_in_sequence(55, \"Fibonacci\").\nIs_in_sequence(89, \"Fibonacci\").\nIs_in_sequence(144, \"Fibonacci\").\nIs_in_sequence(233, \"Fibonacci\").\nIs_in_sequence(377, \"Fibonacci\").\nIs_in_sequence(610, \"Fibonacci\").\nIs_in_sequence(987, \"Fibonacci\").\nIs_in_sequence(1597, \"Fibonacci\").\nIs_in_sequence(2584, \"Fibonacci\").\nIs_in_sequence(4181, \"Fibonacci\").\nIs_in_sequence(6765, \"Fibonacci\").\nIs_in_sequence(10946, \"Fibonacci\").\nIs_in_sequence(17711, \"Fibonacci\").\nIs_in_sequence(28657, \"Fibonacci\").\nIs_in_sequence(46368, \"Fibonacci\").\nIs_in_sequence(75025, \"Fibonacci\").\nIs_in_sequence(121393, \"Fibonacci\").\nIs_in_sequence(196418, \"Fibonacci\").\nIs_in_sequence(317811, \"Fibonacci\").\nIs_in_sequence(514229, \"Fibonacci\").\nIs_in_sequence(832040, \"Fibonacci\").\nIs_in_sequence(1346269, \"Fibonacci\").\nIs_in_sequence(2178309, \"Fibonacci\").\nIs_in_sequence(3524578, \"Fibonacci\").\nIs_in_sequence(5702887, \"Fibonacci\").\nIs_in_sequence(9227465, \"Fibonacci\").\nIs_in_sequence(14930352, \"Fibonacci\").\nIs_in_sequence(24157817, \"Fibonacci\").\nIs_in_sequence(39088169, \"Fibonacci\").\nIs_in_sequence(63245986, \"Fibonacci\").\nIs_in_sequence(102334155, \"Fibonacci\").\nIs_in_sequence(165580141, \"Fibonacci\").\nIs_in_sequence(267914296, \"Fibonacci\").\nIs_in_sequence(433494437, \"Fibonacci\").\nIs_in_sequence(701408733, \"Fibonacci\").\nIs_in_sequence(1134903170, \"Fibonacci\").\nIs_in_sequence(1836311903, \"Fibonacci\").\nIs_in_sequence(2971215073, \"Fibonacci\").\nIs_in_sequence(4807526976, \"Fib", "completions": [".decl Is_in_sequence(Number:float, Sequence:symbol)\nIs_in_sequence(0, \"Fibonacci\").\nIs_in_sequence(1, \"Fibonacci\").\nIs_in_sequence(2, \"Fibonacci\").\nIs_in_sequence(3, \"Fibonacci\").\nIs_in_sequence(5, \"Fibonacci\").\nIs_in_sequence(8, \"Fibonacci\").\nIs_in_sequence(13, \"Fibonacci\").\nIs_in_sequence(21, \"Fibonacci\").\nIs_in_sequence(34, \"Fibonacci\").\nIs_in_sequence(55, \"Fibonacci\").\nIs_in_sequence(89, \"Fibonacci\").\nIs_in_sequence(144, \"Fibonacci\").\nIs_in_sequence(233, \"Fibonacci\").\nIs_in_sequence(377, \"Fibonacci\").\nIs_in_sequence(610, \"Fibonacci\").\nIs_in_sequence(987, \"Fibonacci\").\nIs_in_sequence(1597, \"Fibonacci\").\nIs_in_sequence(2584, \"Fibonacci\").\nIs_in_sequence(4181, \"Fibonacci\").\nIs_in_sequence(6765, \"Fibonacci\").\nIs_in_sequence(10946, \"Fibonacci\").\nIs_in_sequence(17711, \"Fibonacci\").\nIs_in_sequence(28657, \"Fibonacci\").\nIs_in_sequence(46368, \"Fibonacci\").\nIs_in_sequence(75025, \"Fibonacci\").\nIs_in_sequence(121393, \"Fibonacci\").\nIs_in_sequence(196418, \"Fibonacci\").\nIs_in_sequence(317811, \"Fibonacci\").\nIs_in_sequence(514229, \"Fibonacci\").\nIs_in_sequence(832040, \"Fibonacci\").\nIs_in_sequence(1346269, \"Fibonacci\").\nIs_in_sequence(2178309, \"Fibonacci\").\nIs_in_sequence(3524578, \"Fibonacci\").\nIs_in_sequence(5702887, \"Fibonacci\").\nIs_in_sequence(9227465, \"Fibonacci\").\nIs_in_sequence(14930352, \"Fibonacci\").\nIs_in_sequence(24157817, \"Fibonacci\").\nIs_in_sequence(39088169, \"Fibonacci\").\nIs_in_sequence(63245986, \"Fibonacci\").\nIs_in_sequence(102334155, \"Fibonacci\").\nIs_in_sequence(165580141, \"Fibonacci\").\nIs_in_sequence(267914296, \"Fibonacci\").\nIs_in_sequence(433494437, \"Fibonacci\").\nIs_in_sequence(701408733, \"Fibonacci\").\nIs_in_sequence(1134903170, \"Fibonacci\").\nIs_in_sequence(1836311903, \"Fibonacci\").\nIs_in_sequence(2971215073, \"Fibonacci\").\nIs_in_sequence(4807526976, \"Fib"]}
{"id": 369, "answer": false, "completion": ".decl Has_n_peas(Pod:symbol, N_peas:float)\nHas_n_peas(\"pod\", 3).\n.decl Answer()\nAnswer() :- Has_n_peas(\"pod\", n_peas), n_peas >= 1,000,000,000.\n.output Answer", "completions": [".decl Has_n_peas(Pod:symbol, N_peas:float)\nHas_n_peas(\"pod\", 3).\n.decl Answer()\nAnswer() :- Has_n_peas(\"pod\", n_peas), n_peas >= 1,000,000,000.\n.output Answer"]}
{"id": 370, "answer": false, "completion": ".decl Is_ingredient(Food:symbol, Ingredient:symbol)\nIs_ingredient(\"French toast\", \"egg\").\nIs_ingredient(\"French toast\", \"milk\").\nIs_ingredient(\"French toast\", \"bread\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"French toast\", \"goat\").\n.output Answer", "completions": [".decl Is_ingredient(Food:symbol, Ingredient:symbol)\nIs_ingredient(\"French toast\", \"egg\").\nIs_ingredient(\"French toast\", \"milk\").\nIs_ingredient(\"French toast\", \"bread\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"French toast\", \"goat\").\n.output Answer"]}
{"id": 371, "answer": false, "completion": ".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"US Secretary of State\", \"Secretary\").\nHas_title(\"administrative secretary of an office\", \"Secretary\").\n.decl Answer()\nAnswer() :- Has_title(\"US Secretary of State\", title1), Has_title(\"administrative secretary of an office\", title2), title1 = title2.\n.output Answer", "completions": [".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"US Secretary of State\", \"Secretary\").\nHas_title(\"administrative secretary of an office\", \"Secretary\").\n.decl Answer()\nAnswer() :- Has_title(\"US Secretary of State\", title1), Has_title(\"administrative secretary of an office\", title2), title1 = title2.\n.output Answer"]}
{"id": 372, "answer": false, "completion": ".decl Has_experience(Person:symbol, Experience:float)\nHas_experience(\"Dale Earnhardt Jr.\", 0).\n.decl Answer()\nAnswer() :- Has_experience(\"Dale Earnhardt Jr.\", experience), experience < 1.\n.output Answer\n\n", "completions": [".decl Has_experience(Person:symbol, Experience:float)\nHas_experience(\"Dale Earnhardt Jr.\", 0).\n.decl Answer()\nAnswer() :- Has_experience(\"Dale Earnhardt Jr.\", experience), experience < 1.\n.output Answer\n\n"]}
{"id": 373, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Ronda Rousey\", 1.57).\nHas_height(\"Colossus\", 2.26).\n.decl Answer()\nAnswer() :- Has_height(\"Ronda Rousey\", height1), Has_height(\"Colossus\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Ronda Rousey\", 1.57).\nHas_height(\"Colossus\", 2.26).\n.decl Answer()\nAnswer() :- Has_height(\"Ronda Rousey\", height1), Has_height(\"Colossus\", height2), height1 < height2.\n.output Answer"]}
{"id": 374, "answer": true, "completion": ".decl Length(Object:symbol, Length:float)\nLength(\"Brooklyn Bridge\", 1825).\n.decl Speed(Object:symbol, Speed:float)\nSpeed(\"DRL Racer X\", 50).\n.decl Answer()\nAnswer() :- Length(\"Brooklyn Bridge\", length), Speed(\"DRL Racer X\", speed), length/speed <= 18.\n.output Answer", "completions": [".decl Length(Object:symbol, Length:float)\nLength(\"Brooklyn Bridge\", 1825).\n.decl Speed(Object:symbol, Speed:float)\nSpeed(\"DRL Racer X\", 50).\n.decl Answer()\nAnswer() :- Length(\"Brooklyn Bridge\", length), Speed(\"DRL Racer X\", speed), length/speed <= 18.\n.output Answer"]}
{"id": 375, "answer": true, "completion": ".decl Is_abstract(Art:symbol)\nIs_abstract(\"painting\").\nIs_abstract(\"sculpture\").\nIs_abstract(\"photography\").\n.decl Answer()\nAnswer() :- Is_abstract(\"photography\").\n.output Answer", "completions": [".decl Is_abstract(Art:symbol)\nIs_abstract(\"painting\").\nIs_abstract(\"sculpture\").\nIs_abstract(\"photography\").\n.decl Answer()\nAnswer() :- Is_abstract(\"photography\").\n.output Answer"]}
{"id": 376, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"giant squid\", 0.038).\nHas_volume(\"deck of the titanic\", 0.038).\n.decl Answer()\nAnswer() :- Has_volume(\"giant squid\", volume1), Has_volume(\"deck of the titanic\", volume2), volume1 <= volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"giant squid\", 0.038).\nHas_volume(\"deck of the titanic\", 0.038).\n.decl Answer()\nAnswer() :- Has_volume(\"giant squid\", volume1), Has_volume(\"deck of the titanic\", volume2), volume1 <= volume2.\n.output Answer"]}
{"id": 377, "answer": false, "completion": ".decl Debuted_in_year(Show:symbol, Year:float)\nDebuted_in_year(\"Supernatural\", 2005).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"2001 CW debuting shows seasons record\", 4).\n.decl Answer()\nAnswer() :- Debuted_in_year(\"Supernatural\", year1), Last_n_years(\"2001 CW debuting shows seasons record\", year2), year1 > year2.\n.output Answer", "completions": [".decl Debuted_in_year(Show:symbol, Year:float)\nDebuted_in_year(\"Supernatural\", 2005).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"2001 CW debuting shows seasons record\", 4).\n.decl Answer()\nAnswer() :- Debuted_in_year(\"Supernatural\", year1), Last_n_years(\"2001 CW debuting shows seasons record\", year2), year1 > year2.\n.output Answer"]}
{"id": 378, "answer": true, "completion": ".decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Eddie Murphy\", \"Eddie Murphy\").\n.decl Sees(Person:symbol, Event:symbol)\nSees(\"Eddie Murphy\", \"first stand up show\").\n.decl Answer()\nAnswer() :- Has_son(\"Eddie Murphy\", \"Eddie Murphy\"), Sees(\"Eddie Murphy\", \"first stand up show\").\n.output Answer", "completions": [".decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Eddie Murphy\", \"Eddie Murphy\").\n.decl Sees(Person:symbol, Event:symbol)\nSees(\"Eddie Murphy\", \"first stand up show\").\n.decl Answer()\nAnswer() :- Has_son(\"Eddie Murphy\", \"Eddie Murphy\"), Sees(\"Eddie Murphy\", \"first stand up show\").\n.output Answer"]}
{"id": 379, "answer": true, "completion": ".decl Has_molecular_weight(Molecule:symbol, Molecular_weight:float)\nHas_molecular_weight(\"methane\", 16).\n.decl Answer()\nAnswer() :- Has_molecular_weight(\"methane\", molecular_weight), molecular_weight <= 30.\n.output Answer", "completions": [".decl Has_molecular_weight(Molecule:symbol, Molecular_weight:float)\nHas_molecular_weight(\"methane\", 16).\n.decl Answer()\nAnswer() :- Has_molecular_weight(\"methane\", molecular_weight), molecular_weight <= 30.\n.output Answer"]}
{"id": 380, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"frost\", \"September\").\nHappens_in_time(\"frost\", \"October\").\nHappens_in_time(\"frost\", \"November\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"September\", \"fall\").\nIn_season(\"October\", \"fall\").\nIn_season(\"November\", \"fall\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", \"September\"), In_season(\"September\", \"fall\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"frost\", \"September\").\nHappens_in_time(\"frost\", \"October\").\nHappens_in_time(\"frost\", \"November\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"September\", \"fall\").\nIn_season(\"October\", \"fall\").\nIn_season(\"November\", \"fall\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", \"September\"), In_season(\"September\", \"fall\").\n.output Answer"]}
{"id": 381, "answer": true, "completion": ".decl Inhabits(Animal:symbol, Location:symbol)\nInhabits(\"mountain goat\", \"summit of Mount Sharp\").\n.decl Answer()\nAnswer() :- Inhabits(\"mountain goat\", \"summit of Mount Sharp\").\n.output Answer", "completions": [".decl Inhabits(Animal:symbol, Location:symbol)\nInhabits(\"mountain goat\", \"summit of Mount Sharp\").\n.decl Answer()\nAnswer() :- Inhabits(\"mountain goat\", \"summit of Mount Sharp\").\n.output Answer"]}
{"id": 382, "answer": true, "completion": ".decl Is_registered_voter(Person:symbol)\nIs_registered_voter(\"Felicity Huffman\").\n.decl Is_candidate(Person:symbol)\nIs_candidate(\"Mike DeWine\").\n.decl Answer()\nAnswer() :- Is_registered_voter(\"Felicity Huffman\"), Is_candidate(\"Mike DeWine\").\n.output Answer", "completions": [".decl Is_registered_voter(Person:symbol)\nIs_registered_voter(\"Felicity Huffman\").\n.decl Is_candidate(Person:symbol)\nIs_candidate(\"Mike DeWine\").\n.decl Answer()\nAnswer() :- Is_registered_voter(\"Felicity Huffman\"), Is_candidate(\"Mike DeWine\").\n.output Answer"]}
{"id": 383, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Tony Bennett\", 2).\n.decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Tony Bennett\", 1).\n.decl Answer()\nAnswer() :- Has_n_children(\"Tony Bennett\", n_children), Has_n_wives(\"Tony Bennett\", n_wives), n_children > n_wives.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Tony Bennett\", 2).\n.decl Has_n_wives(Person:symbol, N_wives:float)\nHas_n_wives(\"Tony Bennett\", 1).\n.decl Answer()\nAnswer() :- Has_n_children(\"Tony Bennett\", n_children), Has_n_wives(\"Tony Bennett\", n_wives), n_children > n_wives.\n.output Answer"]}
{"id": 384, "answer": true, "completion": ".decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Survivor\", 34).\n.decl Answer()\nAnswer() :- Has_n_seasons(\"Survivor\", n_seasons1), n_seasons1 < 24.\n.output Answer", "completions": [".decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Survivor\", 34).\n.decl Answer()\nAnswer() :- Has_n_seasons(\"Survivor\", n_seasons1), n_seasons1 < 24.\n.output Answer"]}
{"id": 385, "answer": true, "completion": ".decl Can_speak_to(Person:symbol, Person:symbol)\nCan_speak_to(\"Carl Friedrich Gauss\", \"person\").\n.decl Answer()\nAnswer() :- Can_speak_to(\"Carl Friedrich Gauss\", person), distance(person, \"Carl Friedrich Gauss\", 100).\n.output Answer", "completions": [".decl Can_speak_to(Person:symbol, Person:symbol)\nCan_speak_to(\"Carl Friedrich Gauss\", \"person\").\n.decl Answer()\nAnswer() :- Can_speak_to(\"Carl Friedrich Gauss\", person), distance(person, \"Carl Friedrich Gauss\", 100).\n.output Answer"]}
{"id": 386, "answer": false, "completion": ".decl Is_ingredient(Ingredient:symbol, Dish:symbol)\nIs_ingredient(\"grapes\", \"wine\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"grapes\", \"wine\").\n.output Answer\n\n\n", "completions": [".decl Is_ingredient(Ingredient:symbol, Dish:symbol)\nIs_ingredient(\"grapes\", \"wine\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"grapes\", \"wine\").\n.output Answer\n\n\n"]}
{"id": 387, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"wheat seed blooms\", 90).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"woman has baby\", 266).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"woman has baby\", n_days1), Last_n_days(\"wheat seed blooms\", n_days2), n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"wheat seed blooms\", 90).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"woman has baby\", 266).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"woman has baby\", n_days1), Last_n_days(\"wheat seed blooms\", n_days2), n_days1 <= n_days2.\n.output Answer"]}
{"id": 388, "answer": false, "completion": ".decl Can_make(Machine:symbol, Object:symbol)\nCan_make(\"3D printer\", \"adenovirus\").\n.decl Answer()\nAnswer() :- Can_make(\"3D printer\", \"adenovirus\").\n.output Answer", "completions": [".decl Can_make(Machine:symbol, Object:symbol)\nCan_make(\"3D printer\", \"adenovirus\").\n.decl Answer()\nAnswer() :- Can_make(\"3D printer\", \"adenovirus\").\n.output Answer"]}
{"id": 389, "answer": false, "completion": ".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Oscar Wilde\", \"Dorian Gray\").\n.decl Has_actor(Project:symbol, Actor:symbol)\nHas_actor(\"The Dreamers\", \"Eva Green\").\n.decl Answer()\nAnswer() :- Has_character(\"Oscar Wilde\", character), Has_actor(\"The Dreamers\", actor).\n.output Answer", "completions": [".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Oscar Wilde\", \"Dorian Gray\").\n.decl Has_actor(Project:symbol, Actor:symbol)\nHas_actor(\"The Dreamers\", \"Eva Green\").\n.decl Answer()\nAnswer() :- Has_character(\"Oscar Wilde\", character), Has_actor(\"The Dreamers\", actor).\n.output Answer"]}
{"id": 390, "answer": false, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota stadium\", 45000).\n.decl Has_population(State:symbol, Population:float)\nHas_population(\"Michigan\", 9986857).\n.decl Has_homelessness_rate(State:symbol, Homelessness_rate:float)\nHas_homelessness_rate(\"Michigan\", 0.01).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota stadium\", capacity), Has_population(\"Michigan\", population), Has_homelessness_rate(\"Michigan\", homelessness_rate), capacity >= population * homelessness_rate.\n.output Answer", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota stadium\", 45000).\n.decl Has_population(State:symbol, Population:float)\nHas_population(\"Michigan\", 9986857).\n.decl Has_homelessness_rate(State:symbol, Homelessness_rate:float)\nHas_homelessness_rate(\"Michigan\", 0.01).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota stadium\", capacity), Has_population(\"Michigan\", population), Has_homelessness_rate(\"Michigan\", homelessness_rate), capacity >= population * homelessness_rate.\n.output Answer"]}
{"id": 391, "answer": false, "completion": ".decl Weighs_more_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_more_than(\"red fox\", \"hamster\").\n.decl Weighs_less_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_less_than(\"hamster\", \"red fox\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"red fox\", \"hamster\").\nAnswer() :- Weighs_less_than(\"hamster\", \"red fox\").\n.output Answer", "completions": [".decl Weighs_more_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_more_than(\"red fox\", \"hamster\").\n.decl Weighs_less_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_less_than(\"hamster\", \"red fox\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"red fox\", \"hamster\").\nAnswer() :- Weighs_less_than(\"hamster\", \"red fox\").\n.output Answer"]}
{"id": 392, "answer": false, "completion": ".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"Eid al-Fitr\", 24).\nLasts_n_hours(\"US Office\", 22).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"Eid al-Fitr\", n_hours1), Lasts_n_hours(\"US Office\", n_hours2), n_hours1 <= n_hours2.\n.output Answer", "completions": [".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"Eid al-Fitr\", 24).\nLasts_n_hours(\"US Office\", 22).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"Eid al-Fitr\", n_hours1), Lasts_n_hours(\"US Office\", n_hours2), n_hours1 <= n_hours2.\n.output Answer"]}
{"id": 393, "answer": true, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Tropicana Field\", 42000).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Auburn\", 28000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tropicana Field\", capacity), Has_population(\"Auburn\", population), capacity >= population.\n.output Answer", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Tropicana Field\", 42000).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Auburn\", 28000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tropicana Field\", capacity), Has_population(\"Auburn\", population), capacity >= population.\n.output Answer"]}
{"id": 394, "answer": false, "completion": ".decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Richard III\", \"Henry VII\").\n.decl Has_grandson(Person:symbol, Grandson:symbol)\nHas_grandson(\"Richard III\", \"Henry VIII\").\n.decl Answer()\nAnswer() :- Has_son(\"Richard III\", son), Has_grandson(\"Richard III\", grandson), son = grandson.\n.output Answer", "completions": [".decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Richard III\", \"Henry VII\").\n.decl Has_grandson(Person:symbol, Grandson:symbol)\nHas_grandson(\"Richard III\", \"Henry VIII\").\n.decl Answer()\nAnswer() :- Has_son(\"Richard III\", son), Has_grandson(\"Richard III\", grandson), son = grandson.\n.output Answer"]}
{"id": 395, "answer": false, "completion": ".decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"1980 United States presidential election\", 4).\nHappens_every_n_years(\"landslides\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"1980 United States presidential election\", n_years1), Happens_every_n_years(\"landslides\", n_years2), n_years2 < n_years1.\n.output Answer", "completions": [".decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"1980 United States presidential election\", 4).\nHappens_every_n_years(\"landslides\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"1980 United States presidential election\", n_years1), Happens_every_n_years(\"landslides\", n_years2), n_years2 < n_years1.\n.output Answer"]}
{"id": 396, "answer": false, "completion": ".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Red Sea\", 2250).\n.decl Can_dive_to_depth(Person:symbol, Depth:float)\nCan_dive_to_depth(\"Nuno Gomes\", 1000).\n.decl Answer()\nAnswer() :- Has_depth(\"Red Sea\", depth1), Can_dive_to_depth(\"Nuno Gomes\", depth2), depth1 > depth2.\n.output Answer", "completions": [".decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Red Sea\", 2250).\n.decl Can_dive_to_depth(Person:symbol, Depth:float)\nCan_dive_to_depth(\"Nuno Gomes\", 1000).\n.decl Answer()\nAnswer() :- Has_depth(\"Red Sea\", depth1), Can_dive_to_depth(\"Nuno Gomes\", depth2), depth1 > depth2.\n.output Answer"]}
{"id": 397, "answer": true, "completion": ".decl Can_explain(Person:symbol, Topic:symbol)\nCan_explain(\"Tom Cruise\", \"mental auditing\").\n.decl Answer()\nAnswer() :- Can_explain(\"Tom Cruise\", \"mental auditing\").\n.output Answer", "completions": [".decl Can_explain(Person:symbol, Topic:symbol)\nCan_explain(\"Tom Cruise\", \"mental auditing\").\n.decl Answer()\nAnswer() :- Can_explain(\"Tom Cruise\", \"mental auditing\").\n.output Answer"]}
{"id": 398, "answer": true, "completion": ".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"Compact discs\", 1982).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"John Lennon\", 1980).\n.decl Answer()\nAnswer() :- Invented_in_year(\"Compact discs\", year1), Died_in_year(\"John Lennon\", year2), year1 > year2.\n.output Answer", "completions": [".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"Compact discs\", 1982).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"John Lennon\", 1980).\n.decl Answer()\nAnswer() :- Invented_in_year(\"Compact discs\", year1), Died_in_year(\"John Lennon\", year2), year1 > year2.\n.output Answer"]}
{"id": 399, "answer": false, "completion": ".decl Prime_Minister(Person:symbol, Time:symbol)\nPrime_Minister(\"Stanley Baldwin\", \"1923-1924\").\nPrime_Minister(\"Stanley Baldwin\", \"1924-1929\").\nPrime_Minister(\"Stanley Baldwin\", \"1935-1937\").\nPrime_Minister(\"Margaret Thatcher\", \"1979-1990\").\nPrime_Minister(\"Margaret Thatcher\", \"1983-1987\").\nPrime_Minister(\"Margaret Thatcher\", \"1987-1990\").\n.decl Answer()\nAnswer() :- Prime_Minister(\"Stanley Baldwin\", time1), Prime_Minister(\"Margaret Thatcher\", time2), time1 < time2.\nAnswer() :- Prime_Minister(\"Stanley Baldwin\", time1), Prime_Minister(\"Margaret Thatcher\", time2), time1 > time2.\n.output Answer", "completions": [".decl Prime_Minister(Person:symbol, Time:symbol)\nPrime_Minister(\"Stanley Baldwin\", \"1923-1924\").\nPrime_Minister(\"Stanley Baldwin\", \"1924-1929\").\nPrime_Minister(\"Stanley Baldwin\", \"1935-1937\").\nPrime_Minister(\"Margaret Thatcher\", \"1979-1990\").\nPrime_Minister(\"Margaret Thatcher\", \"1983-1987\").\nPrime_Minister(\"Margaret Thatcher\", \"1987-1990\").\n.decl Answer()\nAnswer() :- Prime_Minister(\"Stanley Baldwin\", time1), Prime_Minister(\"Margaret Thatcher\", time2), time1 < time2.\nAnswer() :- Prime_Minister(\"Stanley Baldwin\", time1), Prime_Minister(\"Margaret Thatcher\", time2), time1 > time2.\n.output Answer"]}
{"id": 400, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Benito Mussolini\", 1.75).\nHas_height(\"Hafþór Björnsson\", 2.06).\n.decl Answer()\nAnswer() :- Has_height(\"Benito Mussolini\", height1), Has_height(\"Hafþór Björnsson\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Benito Mussolini\", 1.75).\nHas_height(\"Hafþór Björnsson\", 2.06).\n.decl Answer()\nAnswer() :- Has_height(\"Benito Mussolini\", height1), Has_height(\"Hafþór Björnsson\", height2), height1 < height2.\n.output Answer"]}
{"id": 401, "answer": false, "completion": ".decl Is_predator(Animal_A:symbol, Animal_B:symbol)\nIs_predator(\"European wildcat\", \"black-tailed jackrabbit\").\n.decl Answer()\nAnswer() :- Is_predator(animal, \"black-tailed jackrabbit\").\n.output Answer", "completions": [".decl Is_predator(Animal_A:symbol, Animal_B:symbol)\nIs_predator(\"European wildcat\", \"black-tailed jackrabbit\").\n.decl Answer()\nAnswer() :- Is_predator(animal, \"black-tailed jackrabbit\").\n.output Answer"]}
{"id": 402, "answer": false, "completion": ".decl Named_after(Place:symbol, Person:symbol)\nNamed_after(\"Norman Oklahoma\", \"Norman England\").\n.decl Is_viking(Person:symbol)\nIs_viking(\"Norman England\").\n.decl Answer()\nAnswer() :- Named_after(\"Norman Oklahoma\", person), Is_viking(person).\n.output Answer", "completions": [".decl Named_after(Place:symbol, Person:symbol)\nNamed_after(\"Norman Oklahoma\", \"Norman England\").\n.decl Is_viking(Person:symbol)\nIs_viking(\"Norman England\").\n.decl Answer()\nAnswer() :- Named_after(\"Norman Oklahoma\", person), Is_viking(person).\n.output Answer"]}
{"id": 403, "answer": true, "completion": ".decl Has_coordinates(Area:symbol, Latitude:float, Longitude:float)\nHas_coordinates(\"New York\", 40.7128, -74.0060).\n.decl Answer()\nAnswer() :- Has_coordinates(\"New York\", latitude, longitude).\n.output Answer", "completions": [".decl Has_coordinates(Area:symbol, Latitude:float, Longitude:float)\nHas_coordinates(\"New York\", 40.7128, -74.0060).\n.decl Answer()\nAnswer() :- Has_coordinates(\"New York\", latitude, longitude).\n.output Answer"]}
{"id": 404, "answer": true, "completion": ".decl Has_political_view(Person:symbol, Political_view:symbol)\nHas_political_view(\"Glen Beck\", \"conservative\").\nHas_political_view(\"Stephen Colbert\", \"liberal\").\n.decl Answer()\nAnswer() :- Has_political_view(\"Glen Beck\", political_view1), Has_political_view(\"Stephen Colbert\", political_view2), political_view1 != political_view2.\n.output Answer", "completions": [".decl Has_political_view(Person:symbol, Political_view:symbol)\nHas_political_view(\"Glen Beck\", \"conservative\").\nHas_political_view(\"Stephen Colbert\", \"liberal\").\n.decl Answer()\nAnswer() :- Has_political_view(\"Glen Beck\", political_view1), Has_political_view(\"Stephen Colbert\", political_view2), political_view1 != political_view2.\n.output Answer"]}
{"id": 405, "answer": false, "completion": ".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Audi R8 V-10 Plus\", 205).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Audi R8 V-10 Plus\", top_speed), top_speed > 340.\n.output Answer", "completions": [".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Audi R8 V-10 Plus\", 205).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Audi R8 V-10 Plus\", top_speed), top_speed > 340.\n.output Answer"]}
{"id": 406, "answer": true, "completion": ".decl Has_lifespan(Animal:symbol, Lifespan:float)\nHas_lifespan(\"monkey\", 20).\nHas_lifespan(\"human being\", 70).\n.decl Answer()\nAnswer() :- Has_lifespan(\"monkey\", lifespan1), Has_lifespan(\"human being\", lifespan2), lifespan1 > lifespan2.\n.output Answer", "completions": [".decl Has_lifespan(Animal:symbol, Lifespan:float)\nHas_lifespan(\"monkey\", 20).\nHas_lifespan(\"human being\", 70).\n.decl Answer()\nAnswer() :- Has_lifespan(\"monkey\", lifespan1), Has_lifespan(\"human being\", lifespan2), lifespan1 > lifespan2.\n.output Answer"]}
{"id": 407, "answer": true, "completion": ".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Bill\", \"Christianity\").\nHas_religion(\"Bill\", \"Islam\").\nHas_religion(\"Bill\", \"Judaism\").\nHas_religion(\"Bill\", \"Hinduism\").\nHas_religion(\"Bill\", \"Buddhism\").\nHas_religion(\"Bill\", \"Taoism\").\nHas_religion(\"Bill\", \"Confucianism\").\nHas_religion(\"Bill\", \"Zoroastrianism\").\nHas_religion(\"Bill\", \"Shinto\").\nHas_religion(\"Bill\", \"Sikhism\").\nHas_religion(\"Bill\", \"Jainism\").\nHas_religion(\"Bill\", \"Baha'i\").\nHas_religion(\"Bill\", \"Cao Dai\").\nHas_religion(\"Bill\", \"Tenrikyo\").\nHas_religion(\"Bill\", \"Cheondoism\").\nHas_religion(\"Bill\", \"Druze\").\nHas_religion(\"Bill\", \"Rastafari\").\nHas_religion(\"Bill\", \"Santeria\").\nHas_religion(\"Bill\", \"Unitarian Universalism\").\nHas_religion(\"Bill\", \"Wicca\").\nHas_religion(\"Bill\", \"Zuni\").\nHas_religion(\"Bill\", \"Rastafari\").\nHas_religion(\"Bill\", \"Santeria\").\nHas_religion(\"Bill\", \"Unitarian Universalism\").\nHas_religion(\"Bill\", \"Wicca\").\nHas_religion(\"Bill\", \"Zuni\").\nHas_religion(\"Bill\", \"Atheism\").\nHas_religion(\"Bill\", \"Agnosticism\").\nHas_religion(\"Bill\", \"Deism\").\nHas_religion(\"Bill\", \"Pantheism\").\nHas_religion(\"Bill\", \"Secular Humanism\").\nHas_religion(\"Bill\", \"Ethical Culture\").\nHas_religion(\"Bill\", \"Pastafarianism\").\nHas_religion(\"Bill\", \"Scientology\").\nHas_religion(\"Bill\", \"Falun Gong\").\nHas_religion(\"Bill\", \"Hare Krishna\").\nHas_religion(\"Bill\", \"Raëlism\").\nHas_religion(\"Bill\", \"The Church of Jesus Christ of Latter-day Saints\").\nHas_religion(\"Bill\", \"Christian Science\").\nHas_religion(\"Bill\", \"Jehovah's Witnesses\").\nHas_religion(\"Bill\", \"Seventh-day Adventist Church\").\nHas_religion(\"Bill\", \"The Church of Jesus Christ of Latter-day Saints\").\nHas_religion(\"Bill\", \"Christian Science\").\nHas_religion(\"Bill\", \"Jehovah's Witnesses\").\nHas_religion(\"Bill\", \"Seventh-day Adventist Church\").\nHas_religion(\"Bill\", \"The Church of Jesus Christ of Latter-day Saints\").\nHas_religion(\"Bill\", \"Christian Science\").\nHas_religion(\"Bill\", \"Jehovah's Witnesses\").\nHas_religion(\"Bill\", \"Seventh-day Adventist Church\").\nHas_religion(\"Bill\", \"The Church of Jesus Christ of Latter-day Saints\").\nHas_religion(\"Bill\", \"Christian Science\").\nHas_religion(\"Bill\", \"Jehovah's Witnesses\").\nHas_religion(\"Bill\", \"Seventh-day Adventist Church\").\nHas_religion(\"Bill\", \"The Church of Jesus Christ of Latter-day Saints\").\nHas_religion(\"Bill\", \"Christian Science\").\nHas_", "completions": [".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Bill\", \"Christianity\").\nHas_religion(\"Bill\", \"Islam\").\nHas_religion(\"Bill\", \"Judaism\").\nHas_religion(\"Bill\", \"Hinduism\").\nHas_religion(\"Bill\", \"Buddhism\").\nHas_religion(\"Bill\", \"Taoism\").\nHas_religion(\"Bill\", \"Confucianism\").\nHas_religion(\"Bill\", \"Zoroastrianism\").\nHas_religion(\"Bill\", \"Shinto\").\nHas_religion(\"Bill\", \"Sikhism\").\nHas_religion(\"Bill\", \"Jainism\").\nHas_religion(\"Bill\", \"Baha'i\").\nHas_religion(\"Bill\", \"Cao Dai\").\nHas_religion(\"Bill\", \"Tenrikyo\").\nHas_religion(\"Bill\", \"Cheondoism\").\nHas_religion(\"Bill\", \"Druze\").\nHas_religion(\"Bill\", \"Rastafari\").\nHas_religion(\"Bill\", \"Santeria\").\nHas_religion(\"Bill\", \"Unitarian Universalism\").\nHas_religion(\"Bill\", \"Wicca\").\nHas_religion(\"Bill\", \"Zuni\").\nHas_religion(\"Bill\", \"Rastafari\").\nHas_religion(\"Bill\", \"Santeria\").\nHas_religion(\"Bill\", \"Unitarian Universalism\").\nHas_religion(\"Bill\", \"Wicca\").\nHas_religion(\"Bill\", \"Zuni\").\nHas_religion(\"Bill\", \"Atheism\").\nHas_religion(\"Bill\", \"Agnosticism\").\nHas_religion(\"Bill\", \"Deism\").\nHas_religion(\"Bill\", \"Pantheism\").\nHas_religion(\"Bill\", \"Secular Humanism\").\nHas_religion(\"Bill\", \"Ethical Culture\").\nHas_religion(\"Bill\", \"Pastafarianism\").\nHas_religion(\"Bill\", \"Scientology\").\nHas_religion(\"Bill\", \"Falun Gong\").\nHas_religion(\"Bill\", \"Hare Krishna\").\nHas_religion(\"Bill\", \"Raëlism\").\nHas_religion(\"Bill\", \"The Church of Jesus Christ of Latter-day Saints\").\nHas_religion(\"Bill\", \"Christian Science\").\nHas_religion(\"Bill\", \"Jehovah's Witnesses\").\nHas_religion(\"Bill\", \"Seventh-day Adventist Church\").\nHas_religion(\"Bill\", \"The Church of Jesus Christ of Latter-day Saints\").\nHas_religion(\"Bill\", \"Christian Science\").\nHas_religion(\"Bill\", \"Jehovah's Witnesses\").\nHas_religion(\"Bill\", \"Seventh-day Adventist Church\").\nHas_religion(\"Bill\", \"The Church of Jesus Christ of Latter-day Saints\").\nHas_religion(\"Bill\", \"Christian Science\").\nHas_religion(\"Bill\", \"Jehovah's Witnesses\").\nHas_religion(\"Bill\", \"Seventh-day Adventist Church\").\nHas_religion(\"Bill\", \"The Church of Jesus Christ of Latter-day Saints\").\nHas_religion(\"Bill\", \"Christian Science\").\nHas_religion(\"Bill\", \"Jehovah's Witnesses\").\nHas_religion(\"Bill\", \"Seventh-day Adventist Church\").\nHas_religion(\"Bill\", \"The Church of Jesus Christ of Latter-day Saints\").\nHas_religion(\"Bill\", \"Christian Science\").\nHas_"]}
{"id": 408, "answer": true, "completion": ".decl Is_injurious(Activity:symbol, Injuriousness:float)\nIs_injurious(\"waltz\", 0.1).\nIs_injurious(\"slam dance\", 0.5).\n.decl Answer()\nAnswer() :- Is_injurious(\"waltz\", injuriousness1), Is_injurious(\"slam dance\", injuriousness2), injuriousness1 < injuriousness2.\n.output Answer", "completions": [".decl Is_injurious(Activity:symbol, Injuriousness:float)\nIs_injurious(\"waltz\", 0.1).\nIs_injurious(\"slam dance\", 0.5).\n.decl Answer()\nAnswer() :- Is_injurious(\"waltz\", injuriousness1), Is_injurious(\"slam dance\", injuriousness2), injuriousness1 < injuriousness2.\n.output Answer"]}
{"id": 409, "answer": false, "completion": ".decl Has_limbs(Animal:symbol, Limbs:symbol)\nHas_limbs(\"Yeti\", \"prehensile\").\n.decl Answer()\nAnswer() :- Has_limbs(\"Yeti\", \"prehensile\").\n.output Answer", "completions": [".decl Has_limbs(Animal:symbol, Limbs:symbol)\nHas_limbs(\"Yeti\", \"prehensile\").\n.decl Answer()\nAnswer() :- Has_limbs(\"Yeti\", \"prehensile\").\n.output Answer"]}
{"id": 410, "answer": true, "completion": ".decl Holds(Organization:symbol, Event:symbol, Location:symbol)\nHolds(\"United Nations Framework Convention on Climate Change\", \"Climate Change Conference\", \"Javits Center\").\n.decl Answer()\nAnswer() :- Holds(\"United Nations Framework Convention on Climate Change\", \"Climate Change Conference\", \"Javits Center\").\n.output Answer", "completions": [".decl Holds(Organization:symbol, Event:symbol, Location:symbol)\nHolds(\"United Nations Framework Convention on Climate Change\", \"Climate Change Conference\", \"Javits Center\").\n.decl Answer()\nAnswer() :- Holds(\"United Nations Framework Convention on Climate Change\", \"Climate Change Conference\", \"Javits Center\").\n.output Answer"]}
{"id": 411, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Operation Barbarossa\", 4).\nLast_n_years(\"Barbarossa's last expedition\", 1).\n.decl Answer()\nAnswer() :- Last_n_years(\"Operation Barbarossa\", n_years1), Last_n_years(\"Barbarossa's last expedition\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Operation Barbarossa\", 4).\nLast_n_years(\"Barbarossa's last expedition\", 1).\n.decl Answer()\nAnswer() :- Last_n_years(\"Operation Barbarossa\", n_years1), Last_n_years(\"Barbarossa's last expedition\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 412, "answer": false, "completion": ".decl Stands_for(Acronym:symbol, Word:symbol)\nStands_for(\"CAPTCHA\", \"Completely Automated Public Turing test to tell Computers and Humans Apart\").\n.decl Answer()\nAnswer() :- Stands_for(\"CAPTCHA\", word), word = \"Automated\", word = \"Public\", word = \"Turing\", word = \"Apart\".\n.output Answer", "completions": [".decl Stands_for(Acronym:symbol, Word:symbol)\nStands_for(\"CAPTCHA\", \"Completely Automated Public Turing test to tell Computers and Humans Apart\").\n.decl Answer()\nAnswer() :- Stands_for(\"CAPTCHA\", word), word = \"Automated\", word = \"Public\", word = \"Turing\", word = \"Apart\".\n.output Answer"]}
{"id": 413, "answer": true, "completion": ".decl Has_distance(Location1:symbol, Location2:symbol, Distance:float)\nHas_distance(\"New York Stock Exchange\", \"Universal Music Group\", 0.5).\n.decl Has_sound_level(Event:symbol, Sound_level:float)\nHas_sound_level(\"closing bell\", 100).\n.decl Answer()\nAnswer() :- Has_distance(\"New York Stock Exchange\", \"Universal Music Group\", distance), Has_sound_level(\"closing bell\", sound_level), sound_level >= distance.\n.output Answer", "completions": [".decl Has_distance(Location1:symbol, Location2:symbol, Distance:float)\nHas_distance(\"New York Stock Exchange\", \"Universal Music Group\", 0.5).\n.decl Has_sound_level(Event:symbol, Sound_level:float)\nHas_sound_level(\"closing bell\", 100).\n.decl Answer()\nAnswer() :- Has_distance(\"New York Stock Exchange\", \"Universal Music Group\", distance), Has_sound_level(\"closing bell\", sound_level), sound_level >= distance.\n.output Answer"]}
{"id": 414, "answer": false, "completion": ".decl Answer()\nAnswer() :- \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\".\n.output Answer", "completions": [".decl Answer()\nAnswer() :- \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\".\n.output Answer"]}
{"id": 415, "answer": true, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"The Mona Lisa\", 700000000).\n.decl Has_net_worth(Company:symbol, Net_worth:float)\nHas_net_worth(\"Amazon\", 10000000000).\n.decl Answer()\nAnswer() :- Has_value(\"The Mona Lisa\", value1), Has_net_worth(\"Amazon\", value2), value1 <= value2.\n.output Answer", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"The Mona Lisa\", 700000000).\n.decl Has_net_worth(Company:symbol, Net_worth:float)\nHas_net_worth(\"Amazon\", 10000000000).\n.decl Answer()\nAnswer() :- Has_value(\"The Mona Lisa\", value1), Has_net_worth(\"Amazon\", value2), value1 <= value2.\n.output Answer"]}
{"id": 416, "answer": true, "completion": ".decl Happens_in_country(Event:symbol, Country:symbol)\nHappens_in_country(\"stoning\", \"Somalia\").\n.decl Happens_to_person(Event:symbol, Person:symbol)\nHappens_to_person(\"stoning\", \"celibate cleric\").\n.decl Answer()\nAnswer() :- Happens_in_country(\"stoning\", \"Somalia\"), Happens_to_person(\"stoning\", \"celibate cleric\").\n.output Answer", "completions": [".decl Happens_in_country(Event:symbol, Country:symbol)\nHappens_in_country(\"stoning\", \"Somalia\").\n.decl Happens_to_person(Event:symbol, Person:symbol)\nHappens_to_person(\"stoning\", \"celibate cleric\").\n.decl Answer()\nAnswer() :- Happens_in_country(\"stoning\", \"Somalia\"), Happens_to_person(\"stoning\", \"celibate cleric\").\n.output Answer"]}
{"id": 417, "answer": false, "completion": ".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Kia Rio\", 4.1, 1.7, 1.5).\nHas_dimensions(\"Oval Office\", 5.5, 5.5, 2.4).\n.decl Answer()\nAnswer() :- Has_dimensions(\"Kia Rio\", length1, width1, height1), Has_dimensions(\"Oval Office\", length2, width2, height2), length1 <= length2, width1 <= width2, height1 <= height2.\n.output Answer", "completions": [".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Kia Rio\", 4.1, 1.7, 1.5).\nHas_dimensions(\"Oval Office\", 5.5, 5.5, 2.4).\n.decl Answer()\nAnswer() :- Has_dimensions(\"Kia Rio\", length1, width1, height1), Has_dimensions(\"Oval Office\", length2, width2, height2), length1 <= length2, width1 <= width2, height1 <= height2.\n.output Answer"]}
{"id": 418, "answer": false, "completion": ".decl Has_family_ties(Person:symbol, Family:symbol)\nHas_family_ties(\"King of Portuguese people in 1515\", \"Tudors\").\n.decl Answer()\nAnswer() :- Has_family_ties(\"King of Portuguese people in 1515\", \"Tudors\").\n.output Answer", "completions": [".decl Has_family_ties(Person:symbol, Family:symbol)\nHas_family_ties(\"King of Portuguese people in 1515\", \"Tudors\").\n.decl Answer()\nAnswer() :- Has_family_ties(\"King of Portuguese people in 1515\", \"Tudors\").\n.output Answer"]}
{"id": 419, "answer": true, "completion": ".decl Answer()\nAnswer() :- !Can_reproduce(\"gay male couples\").\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !Can_reproduce(\"gay male couples\").\n.output Answer"]}
{"id": 420, "answer": true, "completion": ".decl Is_taller_than(Person1:symbol, Person2:symbol)\nIs_taller_than(\"Andre the Giant\", \"Yeti\").\n.decl Answer()\nAnswer() :- Is_taller_than(person1, \"Yeti\").\n.output Answer", "completions": [".decl Is_taller_than(Person1:symbol, Person2:symbol)\nIs_taller_than(\"Andre the Giant\", \"Yeti\").\n.decl Answer()\nAnswer() :- Is_taller_than(person1, \"Yeti\").\n.output Answer"]}
{"id": 421, "answer": true, "completion": ".decl Is_obscure(Author:symbol, Genre:symbol)\nIs_obscure(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Answer()\nAnswer() :- Is_obscure(\"Edgar Allan Poe\", \"horror fiction\").\n.output Answer", "completions": [".decl Is_obscure(Author:symbol, Genre:symbol)\nIs_obscure(\"Edgar Allan Poe\", \"horror fiction\").\n.decl Answer()\nAnswer() :- Is_obscure(\"Edgar Allan Poe\", \"horror fiction\").\n.output Answer"]}
{"id": 422, "answer": true, "completion": ".decl Served_in_white_house(Person:symbol, Time:symbol)\nServed_in_white_house(\"Theodore Roosevelt\", \"1901-1909\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Panic of 1907\", \"1907\").\n.decl Answer()\nAnswer() :- Served_in_white_house(\"Theodore Roosevelt\", time), Happens_in_time(\"Panic of 1907\", time).\n.output Answer", "completions": [".decl Served_in_white_house(Person:symbol, Time:symbol)\nServed_in_white_house(\"Theodore Roosevelt\", \"1901-1909\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Panic of 1907\", \"1907\").\n.decl Answer()\nAnswer() :- Served_in_white_house(\"Theodore Roosevelt\", time), Happens_in_time(\"Panic of 1907\", time).\n.output Answer"]}
{"id": 423, "answer": false, "completion": ".decl Named_after(Ship:symbol, Battle:symbol)\nNamed_after(\"USS Iwo Jima\", \"Battle of Iwo Jima\").\n.decl Answer()\nAnswer() :- Named_after(\"USS Iwo Jima\", \"Battle of Iwo Jima\").\n.output Answer", "completions": [".decl Named_after(Ship:symbol, Battle:symbol)\nNamed_after(\"USS Iwo Jima\", \"Battle of Iwo Jima\").\n.decl Answer()\nAnswer() :- Named_after(\"USS Iwo Jima\", \"Battle of Iwo Jima\").\n.output Answer"]}
{"id": 424, "answer": false, "completion": ".decl Has_n_fused_vertebrae(Animal:symbol, N_fused_vertebrae:float)\nHas_n_fused_vertebrae(\"human sacrum\", 5).\nHas_n_fused_vertebrae(\"Alaskan Malamute\", 4).\n.decl Answer()\nAnswer() :- Has_n_fused_vertebrae(\"human sacrum\", n_fused_vertebrae1), Has_n_fused_vertebrae(\"Alaskan Malamute\", n_fused_vertebrae2), n_fused_vertebrae1 > n_fused_vertebrae2.\n.output Answer", "completions": [".decl Has_n_fused_vertebrae(Animal:symbol, N_fused_vertebrae:float)\nHas_n_fused_vertebrae(\"human sacrum\", 5).\nHas_n_fused_vertebrae(\"Alaskan Malamute\", 4).\n.decl Answer()\nAnswer() :- Has_n_fused_vertebrae(\"human sacrum\", n_fused_vertebrae1), Has_n_fused_vertebrae(\"Alaskan Malamute\", n_fused_vertebrae2), n_fused_vertebrae1 > n_fused_vertebrae2.\n.output Answer"]}
{"id": 425, "answer": true, "completion": ".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Josh Blue\", \"cerebral palsy\").\n.decl Can_participate(Disability:symbol, Event:symbol)\nCan_participate(\"cerebral palsy\", \"Paralympics Games\").\n.decl Answer()\nAnswer() :- Has_disability(\"Josh Blue\", disability), Can_participate(disability, \"Paralympics Games\").\n.output Answer", "completions": [".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Josh Blue\", \"cerebral palsy\").\n.decl Can_participate(Disability:symbol, Event:symbol)\nCan_participate(\"cerebral palsy\", \"Paralympics Games\").\n.decl Answer()\nAnswer() :- Has_disability(\"Josh Blue\", disability), Can_participate(disability, \"Paralympics Games\").\n.output Answer"]}
{"id": 426, "answer": true, "completion": ".decl Is_older_than(Person:symbol, Age:float)\nIs_older_than(\"Evander Holyfield\", 57).\n.decl Set_age_record(Age:float)\nSet_age_record(58).\n.decl Answer()\nAnswer() :- Is_older_than(\"Evander Holyfield\", age1), Set_age_record(age2), age1 < age2.\n.output Answer", "completions": [".decl Is_older_than(Person:symbol, Age:float)\nIs_older_than(\"Evander Holyfield\", 57).\n.decl Set_age_record(Age:float)\nSet_age_record(58).\n.decl Answer()\nAnswer() :- Is_older_than(\"Evander Holyfield\", age1), Set_age_record(age2), age1 < age2.\n.output Answer"]}
{"id": 427, "answer": true, "completion": ".decl Has_temper(Person:symbol, Temper:symbol)\nHas_temper(\"Glenn Beck\", \"mild\").\n.decl Answer()\nAnswer() :- Has_temper(\"Glenn Beck\", \"mild\").\n.output Answer", "completions": [".decl Has_temper(Person:symbol, Temper:symbol)\nHas_temper(\"Glenn Beck\", \"mild\").\n.decl Answer()\nAnswer() :- Has_temper(\"Glenn Beck\", \"mild\").\n.output Answer"]}
{"id": 428, "answer": true, "completion": ".decl Connects_to(Bone1:symbol, Bone2:symbol)\nConnects_to(\"sternum\", \"rib\").\nConnects_to(\"rib\", \"backbone\").\nConnects_to(\"backbone\", \"neckbone\").\nConnects_to(\"neckbone\", \"skull\").\n.decl Mentioned_in(Bone:symbol, Poem:symbol)\nMentioned_in(\"rib\", \"Dem Bones\").\nMentioned_in(\"backbone\", \"Dem Bones\").\nMentioned_in(\"neckbone\", \"Dem Bones\").\nMentioned_in(\"skull\", \"Dem Bones\").\n.decl Answer()\nAnswer() :- Connects_to(\"sternum\", bone), Mentioned_in(bone, \"Dem Bones\").\n.output Answer", "completions": [".decl Connects_to(Bone1:symbol, Bone2:symbol)\nConnects_to(\"sternum\", \"rib\").\nConnects_to(\"rib\", \"backbone\").\nConnects_to(\"backbone\", \"neckbone\").\nConnects_to(\"neckbone\", \"skull\").\n.decl Mentioned_in(Bone:symbol, Poem:symbol)\nMentioned_in(\"rib\", \"Dem Bones\").\nMentioned_in(\"backbone\", \"Dem Bones\").\nMentioned_in(\"neckbone\", \"Dem Bones\").\nMentioned_in(\"skull\", \"Dem Bones\").\n.decl Answer()\nAnswer() :- Connects_to(\"sternum\", bone), Mentioned_in(bone, \"Dem Bones\").\n.output Answer"]}
{"id": 429, "answer": true, "completion": ".decl Has_rabies(Animal:symbol)\nHas_rabies(\"dog\").\n.decl Answer()\nAnswer() :- Has_rabies(\"dog\").\n.output Answer", "completions": [".decl Has_rabies(Animal:symbol)\nHas_rabies(\"dog\").\n.decl Answer()\nAnswer() :- Has_rabies(\"dog\").\n.output Answer"]}
{"id": 430, "answer": true, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Buddy The Elf\", \"Santa Claus\").\nKnows(\"Buddy The Elf\", \"Jovie\").\nKnows(\"Buddy The Elf\", \"Michael Hobbs\").\nKnows(\"Buddy The Elf\", \"Walter Hobbs\").\nKnows(\"Buddy The Elf\", \"Emily Hobbs\").\nKnows(\"Buddy The Elf\", \"Mr. Narwhal\").\nKnows(\"Buddy The Elf\", \"Papa Elf\").\nKnows(\"Buddy The Elf\", \"Mama Elf\").\nKnows(\"Buddy The Elf\", \"Scott Calvin\").\nKnows(\"Buddy The Elf\", \"Charlie Calvin\").\nKnows(\"Buddy The Elf\", \"Carol Calvin\").\nKnows(\"Buddy The Elf\", \"Neil Miller\").\nKnows(\"Buddy The Elf\", \"Susan Wells\").\nKnows(\"Buddy The Elf\", \"Cindy Lou Who\").\nKnows(\"Buddy The Elf\", \"The Grinch\").\nKnows(\"Buddy The Elf\", \"Max\").\nKnows(\"Buddy The Elf\", \"Rudolph\").\nKnows(\"Buddy The Elf\", \"Frosty\").\nKnows(\"Buddy The Elf\", \"Cupid\").\nKnows(\"Buddy The Elf\", \"Dasher\").\nKnows(\"Buddy The Elf\", \"Dancer\").\nKnows(\"Buddy The Elf\", \"Prancer\").\nKnows(\"Buddy The Elf\", \"Vixen\").\nKnows(\"Buddy The Elf\", \"Comet\").\nKnows(\"Buddy The Elf\", \"Cupid\").\nKnows(\"Buddy The Elf\", \"Donner\").\nKnows(\"Buddy The Elf\", \"Blitzen\").\nKnows(\"Buddy The Elf\", \"Olive\").\nKnows(\"Buddy The Elf\", \"Gimbel\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"G", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Buddy The Elf\", \"Santa Claus\").\nKnows(\"Buddy The Elf\", \"Jovie\").\nKnows(\"Buddy The Elf\", \"Michael Hobbs\").\nKnows(\"Buddy The Elf\", \"Walter Hobbs\").\nKnows(\"Buddy The Elf\", \"Emily Hobbs\").\nKnows(\"Buddy The Elf\", \"Mr. Narwhal\").\nKnows(\"Buddy The Elf\", \"Papa Elf\").\nKnows(\"Buddy The Elf\", \"Mama Elf\").\nKnows(\"Buddy The Elf\", \"Scott Calvin\").\nKnows(\"Buddy The Elf\", \"Charlie Calvin\").\nKnows(\"Buddy The Elf\", \"Carol Calvin\").\nKnows(\"Buddy The Elf\", \"Neil Miller\").\nKnows(\"Buddy The Elf\", \"Susan Wells\").\nKnows(\"Buddy The Elf\", \"Cindy Lou Who\").\nKnows(\"Buddy The Elf\", \"The Grinch\").\nKnows(\"Buddy The Elf\", \"Max\").\nKnows(\"Buddy The Elf\", \"Rudolph\").\nKnows(\"Buddy The Elf\", \"Frosty\").\nKnows(\"Buddy The Elf\", \"Cupid\").\nKnows(\"Buddy The Elf\", \"Dasher\").\nKnows(\"Buddy The Elf\", \"Dancer\").\nKnows(\"Buddy The Elf\", \"Prancer\").\nKnows(\"Buddy The Elf\", \"Vixen\").\nKnows(\"Buddy The Elf\", \"Comet\").\nKnows(\"Buddy The Elf\", \"Cupid\").\nKnows(\"Buddy The Elf\", \"Donner\").\nKnows(\"Buddy The Elf\", \"Blitzen\").\nKnows(\"Buddy The Elf\", \"Olive\").\nKnows(\"Buddy The Elf\", \"Gimbel\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"Gimbel's\").\nKnows(\"Buddy The Elf\", \"G"]}
{"id": 431, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"apple\", \"red\").\n.decl Is_associated_with(Person:symbol, Object:symbol)\nIs_associated_with(\"Issac Newton\", \"apple\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Issac Newton\", object), Has_color(object, \"red\").\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"apple\", \"red\").\n.decl Is_associated_with(Person:symbol, Object:symbol)\nIs_associated_with(\"Issac Newton\", \"apple\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Issac Newton\", object), Has_color(object, \"red\").\n.output Answer"]}
{"id": 432, "answer": false, "completion": ".decl Has_potassium(Food:symbol, Potassium:float)\nHas_potassium(\"zucchini\", 0.5).\n.decl Answer()\nAnswer() :- Has_potassium(\"zucchini\", potassium), 7 * potassium >= 3500.\n.output Answer", "completions": [".decl Has_potassium(Food:symbol, Potassium:float)\nHas_potassium(\"zucchini\", 0.5).\n.decl Answer()\nAnswer() :- Has_potassium(\"zucchini\", potassium), 7 * potassium >= 3500.\n.output Answer"]}
{"id": 433, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Oprah Winfrey\", 3.2).\n.decl Cost(Car:symbol, Cost:float)\nCost(\"Bugatti\", 2.4).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Oprah Winfrey\", net_worth1), Cost(\"Bugatti\", cost1), net_worth1 >= cost1.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Oprah Winfrey\", 3.2).\n.decl Cost(Car:symbol, Cost:float)\nCost(\"Bugatti\", 2.4).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Oprah Winfrey\", net_worth1), Cost(\"Bugatti\", cost1), net_worth1 >= cost1.\n.output Answer"]}
{"id": 434, "answer": true, "completion": ".decl Won_election(Person:symbol, Year:float)\nWon_election(\"Ronald Reagan\", 1980).\n.decl Is_member_of(Person:symbol, Party:symbol)\nIs_member_of(\"Ronald Reagan\", \"Grand Old Party\").\n.decl Answer()\nAnswer() :- Won_election(\"Ronald Reagan\", 1980), Is_member_of(\"Ronald Reagan\", \"Grand Old Party\").\n.output Answer", "completions": [".decl Won_election(Person:symbol, Year:float)\nWon_election(\"Ronald Reagan\", 1980).\n.decl Is_member_of(Person:symbol, Party:symbol)\nIs_member_of(\"Ronald Reagan\", \"Grand Old Party\").\n.decl Answer()\nAnswer() :- Won_election(\"Ronald Reagan\", 1980), Is_member_of(\"Ronald Reagan\", \"Grand Old Party\").\n.output Answer"]}
{"id": 435, "answer": false, "completion": ".decl Last_name(Person:symbol, Last_name:symbol)\nLast_name(\"Henry Ford\", \"Ford\").\n.decl Last_name_of_company(Company:symbol, Last_name:symbol)\nLast_name_of_company(\"Ford Motor Company\", \"Ford\").\n.decl Answer()\nAnswer() :- Last_name(\"Henry Ford\", last_name), Last_name_of_company(\"Ford Motor Company\", last_name).\n.output Answer", "completions": [".decl Last_name(Person:symbol, Last_name:symbol)\nLast_name(\"Henry Ford\", \"Ford\").\n.decl Last_name_of_company(Company:symbol, Last_name:symbol)\nLast_name_of_company(\"Ford Motor Company\", \"Ford\").\n.decl Answer()\nAnswer() :- Last_name(\"Henry Ford\", last_name), Last_name_of_company(\"Ford Motor Company\", last_name).\n.output Answer"]}
{"id": 436, "answer": false, "completion": ".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"Liberty Bell\", \"Independence Hall\").\n.decl Answer()\nAnswer() :- Has_location(\"Liberty Bell\", \"Independence Hall\").\n.output Answer", "completions": [".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"Liberty Bell\", \"Independence Hall\").\n.decl Answer()\nAnswer() :- Has_location(\"Liberty Bell\", \"Independence Hall\").\n.output Answer"]}
{"id": 437, "answer": true, "completion": ".decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"Monday Night Football\", 3).\nLasts_for_n_hours(\"WWE Raw\", 3).\n.decl Starts_at_n_hours(Event:symbol, N_hours:float)\nStarts_at_n_hours(\"Monday Night Football\", 8).\nStarts_at_n_hours(\"WWE Raw\", 11).\n.decl Answer()\nAnswer() :- Starts_at_n_hours(\"Monday Night Football\", n_hours1), Starts_at_n_hours(\"WWE Raw\", n_hours2), Lasts_for_n_hours(\"Monday Night Football\", n_hours3), Lasts_for_n_hours(\"WWE Raw\", n_hours4), n_hours1 + n_hours3 <= n_hours2 + n_hours4.\n.output Answer", "completions": [".decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"Monday Night Football\", 3).\nLasts_for_n_hours(\"WWE Raw\", 3).\n.decl Starts_at_n_hours(Event:symbol, N_hours:float)\nStarts_at_n_hours(\"Monday Night Football\", 8).\nStarts_at_n_hours(\"WWE Raw\", 11).\n.decl Answer()\nAnswer() :- Starts_at_n_hours(\"Monday Night Football\", n_hours1), Starts_at_n_hours(\"WWE Raw\", n_hours2), Lasts_for_n_hours(\"Monday Night Football\", n_hours3), Lasts_for_n_hours(\"WWE Raw\", n_hours4), n_hours1 + n_hours3 <= n_hours2 + n_hours4.\n.output Answer"]}
{"id": 438, "answer": true, "completion": ".decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"mass\", 7).\n.decl Happens_before(Event1:symbol, Event2:symbol)\nHappens_before(\"first missionaries\", \"mass\").\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"mass\", n_days1), Happens_before(\"first missionaries\", \"mass\").\n.output Answer", "completions": [".decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"mass\", 7).\n.decl Happens_before(Event1:symbol, Event2:symbol)\nHappens_before(\"first missionaries\", \"mass\").\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"mass\", n_days1), Happens_before(\"first missionaries\", \"mass\").\n.output Answer"]}
{"id": 439, "answer": false, "completion": ".decl Is_adult(Person:symbol, Age:float)\nIs_adult(\"Snoop Dogg\", 18).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Tickle Me Elmo\", 1996).\n.decl Answer()\nAnswer() :- Is_adult(\"Snoop Dogg\", age1), Happens_in_year(\"Tickle Me Elmo\", age2), age1 <= age2.\n.output Answer", "completions": [".decl Is_adult(Person:symbol, Age:float)\nIs_adult(\"Snoop Dogg\", 18).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Tickle Me Elmo\", 1996).\n.decl Answer()\nAnswer() :- Is_adult(\"Snoop Dogg\", age1), Happens_in_year(\"Tickle Me Elmo\", age2), age1 <= age2.\n.output Answer"]}
{"id": 440, "answer": false, "completion": ".decl Is_considered_okay(Word:symbol, Group:symbol)\nIs_considered_okay(\"Gypsy\", \"Romani people\").\n.decl Answer()\nAnswer() :- Is_considered_okay(\"Gypsy\", group1), group1 != \"Romani people\".\n.output Answer", "completions": [".decl Is_considered_okay(Word:symbol, Group:symbol)\nIs_considered_okay(\"Gypsy\", \"Romani people\").\n.decl Answer()\nAnswer() :- Is_considered_okay(\"Gypsy\", group1), group1 != \"Romani people\".\n.output Answer"]}
{"id": 441, "answer": false, "completion": ".decl Has_caliber(Person:symbol, Gun:symbol, Caliber:float)\nHas_caliber(\"Robert Downey Jr.\", \"Colt M1911A1\", 0.45).\nHas_caliber(\"Barry Burton\", \"Beretta 92F\", 0.9).\n.decl Answer()\nAnswer() :- Has_caliber(\"Robert Downey Jr.\", \"Colt M1911A1\", caliber1), Has_caliber(\"Barry Burton\", \"Beretta 92F\", caliber2), caliber1 = caliber2.\n.output Answer", "completions": [".decl Has_caliber(Person:symbol, Gun:symbol, Caliber:float)\nHas_caliber(\"Robert Downey Jr.\", \"Colt M1911A1\", 0.45).\nHas_caliber(\"Barry Burton\", \"Beretta 92F\", 0.9).\n.decl Answer()\nAnswer() :- Has_caliber(\"Robert Downey Jr.\", \"Colt M1911A1\", caliber1), Has_caliber(\"Barry Burton\", \"Beretta 92F\", caliber2), caliber1 = caliber2.\n.output Answer"]}
{"id": 442, "answer": true, "completion": ".decl Won_election(Candidate:symbol, Year:float)\nWon_election(\"Woodrow Wilson\", 1912).\nWon_election(\"Theodore Roosevelt\", 1912).\nWon_election(\"William Howard Taft\", 1912).\n.decl Answer()\nAnswer() :- Won_election(candidate, 1912), Won_election(candidate2, 1912), candidate != candidate2.\n.output Answer", "completions": [".decl Won_election(Candidate:symbol, Year:float)\nWon_election(\"Woodrow Wilson\", 1912).\nWon_election(\"Theodore Roosevelt\", 1912).\nWon_election(\"William Howard Taft\", 1912).\n.decl Answer()\nAnswer() :- Won_election(candidate, 1912), Won_election(candidate2, 1912), candidate != candidate2.\n.output Answer"]}
{"id": 443, "answer": false, "completion": ".decl Has_ingredient(Dish:symbol, Ingredient:symbol)\nHas_ingredient(\"vegetable soup\", \"vegetables\").\nHas_ingredient(\"vegetable soup\", \"salt\").\nHas_ingredient(\"vegetable soup\", \"pepper\").\nHas_ingredient(\"vegetable soup\", \"water\").\nHas_ingredient(\"vegetable soup\", \"oil\").\nHas_ingredient(\"vegetable soup\", \"garlic\").\nHas_ingredient(\"vegetable soup\", \"onion\").\nHas_ingredient(\"vegetable soup\", \"celery\").\nHas_ingredient(\"vegetable soup\", \"carrot\").\nHas_ingredient(\"vegetable soup\", \"potato\").\nHas_ingredient(\"vegetable soup\", \"tomato\").\nHas_ingredient(\"vegetable soup\", \"corn\").\nHas_ingredient(\"vegetable soup\", \"green beans\").\nHas_ingredient(\"vegetable soup\", \"peas\").\nHas_ingredient(\"vegetable soup\", \"spinach\").\nHas_ingredient(\"vegetable soup\", \"kale\").\nHas_ingredient(\"vegetable soup\", \"cabbage\").\nHas_ingredient(\"vegetable soup\", \"broccoli\").\nHas_ingredient(\"vegetable soup\", \"cauliflower\").\nHas_ingredient(\"vegetable soup\", \"mushroom\").\nHas_ingredient(\"vegetable soup\", \"zucchini\").\nHas_ingredient(\"vegetable soup\", \"squash\").\nHas_ingredient(\"vegetable soup\", \"turnip\").\nHas_ingredient(\"vegetable soup\", \"beet\").\nHas_ingredient(\"vegetable soup\", \"radish\").\nHas_ingredient(\"vegetable soup\", \"asparagus\").\nHas_ingredient(\"vegetable soup\", \"cucumber\").\nHas_ingredient(\"vegetable soup\", \"bell pepper\").\nHas_ingredient(\"vegetable soup\", \"jalapeno\").\nHas_ingredient(\"vegetable soup\", \"eggplant\").\nHas_ingredient(\"vegetable soup\", \"okra\").\nHas_ingredient(\"vegetable soup\", \"avocado\").\nHas_ingredient(\"vegetable soup\", \"olive\").\nHas_ingredient(\"vegetable soup\", \"lemon\").\nHas_ingredient(\"vegetable soup\", \"lime\").\nHas_ingredient(\"vegetable soup\", \"herbs\").\nHas_ingredient(\"vegetable soup\", \"thyme\").\nHas_ingredient(\"vegetable soup\", \"basil\").\nHas_ingredient(\"vegetable soup\", \"oregano\").\nHas_ingredient(\"vegetable soup\", \"parsley\").\nHas_ingredient(\"vegetable soup\", \"cilantro\").\nHas_ingredient(\"vegetable soup\", \"chives\").\nHas_ingredient(\"vegetable soup\", \"dill\").\nHas_ingredient(\"vegetable soup\", \"tarragon\").\nHas_ingredient(\"vegetable soup\", \"rosemary\").\nHas_ingredient(\"vegetable soup\", \"sage\").\nHas_ingredient(\"vegetable soup\", \"nutmeg\").\nHas_ingredient(\"vegetable soup\", \"cayenne\").\nHas", "completions": [".decl Has_ingredient(Dish:symbol, Ingredient:symbol)\nHas_ingredient(\"vegetable soup\", \"vegetables\").\nHas_ingredient(\"vegetable soup\", \"salt\").\nHas_ingredient(\"vegetable soup\", \"pepper\").\nHas_ingredient(\"vegetable soup\", \"water\").\nHas_ingredient(\"vegetable soup\", \"oil\").\nHas_ingredient(\"vegetable soup\", \"garlic\").\nHas_ingredient(\"vegetable soup\", \"onion\").\nHas_ingredient(\"vegetable soup\", \"celery\").\nHas_ingredient(\"vegetable soup\", \"carrot\").\nHas_ingredient(\"vegetable soup\", \"potato\").\nHas_ingredient(\"vegetable soup\", \"tomato\").\nHas_ingredient(\"vegetable soup\", \"corn\").\nHas_ingredient(\"vegetable soup\", \"green beans\").\nHas_ingredient(\"vegetable soup\", \"peas\").\nHas_ingredient(\"vegetable soup\", \"spinach\").\nHas_ingredient(\"vegetable soup\", \"kale\").\nHas_ingredient(\"vegetable soup\", \"cabbage\").\nHas_ingredient(\"vegetable soup\", \"broccoli\").\nHas_ingredient(\"vegetable soup\", \"cauliflower\").\nHas_ingredient(\"vegetable soup\", \"mushroom\").\nHas_ingredient(\"vegetable soup\", \"zucchini\").\nHas_ingredient(\"vegetable soup\", \"squash\").\nHas_ingredient(\"vegetable soup\", \"turnip\").\nHas_ingredient(\"vegetable soup\", \"beet\").\nHas_ingredient(\"vegetable soup\", \"radish\").\nHas_ingredient(\"vegetable soup\", \"asparagus\").\nHas_ingredient(\"vegetable soup\", \"cucumber\").\nHas_ingredient(\"vegetable soup\", \"bell pepper\").\nHas_ingredient(\"vegetable soup\", \"jalapeno\").\nHas_ingredient(\"vegetable soup\", \"eggplant\").\nHas_ingredient(\"vegetable soup\", \"okra\").\nHas_ingredient(\"vegetable soup\", \"avocado\").\nHas_ingredient(\"vegetable soup\", \"olive\").\nHas_ingredient(\"vegetable soup\", \"lemon\").\nHas_ingredient(\"vegetable soup\", \"lime\").\nHas_ingredient(\"vegetable soup\", \"herbs\").\nHas_ingredient(\"vegetable soup\", \"thyme\").\nHas_ingredient(\"vegetable soup\", \"basil\").\nHas_ingredient(\"vegetable soup\", \"oregano\").\nHas_ingredient(\"vegetable soup\", \"parsley\").\nHas_ingredient(\"vegetable soup\", \"cilantro\").\nHas_ingredient(\"vegetable soup\", \"chives\").\nHas_ingredient(\"vegetable soup\", \"dill\").\nHas_ingredient(\"vegetable soup\", \"tarragon\").\nHas_ingredient(\"vegetable soup\", \"rosemary\").\nHas_ingredient(\"vegetable soup\", \"sage\").\nHas_ingredient(\"vegetable soup\", \"nutmeg\").\nHas_ingredient(\"vegetable soup\", \"cayenne\").\nHas"]}
{"id": 444, "answer": true, "completion": ".decl Has_mood(Person:symbol, Mood:symbol)\nHas_mood(\"depressed people\", \"sad\").\n.decl Visits(Person:symbol, Place:symbol)\nVisits(\"depressed people\", \"Golden Gate Bridge\").\n.decl Answer()\nAnswer() :- Has_mood(\"depressed people\", \"sad\"), Visits(\"depressed people\", \"Golden Gate Bridge\").\n.output Answer", "completions": [".decl Has_mood(Person:symbol, Mood:symbol)\nHas_mood(\"depressed people\", \"sad\").\n.decl Visits(Person:symbol, Place:symbol)\nVisits(\"depressed people\", \"Golden Gate Bridge\").\n.decl Answer()\nAnswer() :- Has_mood(\"depressed people\", \"sad\"), Visits(\"depressed people\", \"Golden Gate Bridge\").\n.output Answer"]}
{"id": 445, "answer": true, "completion": ".decl Has_letter(Word:symbol, Letter:symbol)\nHas_letter(\"door\", \"d\").\nHas_letter(\"door\", \"o\").\nHas_letter(\"door\", \"r\").\n.decl Answer()\nAnswer() :- Has_letter(\"door\", \"d\").\n.output Answer", "completions": [".decl Has_letter(Word:symbol, Letter:symbol)\nHas_letter(\"door\", \"d\").\nHas_letter(\"door\", \"o\").\nHas_letter(\"door\", \"r\").\n.decl Answer()\nAnswer() :- Has_letter(\"door\", \"d\").\n.output Answer"]}
{"id": 446, "answer": true, "completion": ".decl Lives_for_n_years(Person:symbol, N_years:float)\nLives_for_n_years(\"Methuselah\", 969).\nLives_for_n_years(\"Sarah\", 127).\n.decl Answer()\nAnswer() :- Lives_for_n_years(\"Methuselah\", n_years1), Lives_for_n_years(\"Sarah\", n_years2), n_years1 >= 800 * n_years2.\n.output Answer", "completions": [".decl Lives_for_n_years(Person:symbol, N_years:float)\nLives_for_n_years(\"Methuselah\", 969).\nLives_for_n_years(\"Sarah\", 127).\n.decl Answer()\nAnswer() :- Lives_for_n_years(\"Methuselah\", n_years1), Lives_for_n_years(\"Sarah\", n_years2), n_years1 >= 800 * n_years2.\n.output Answer"]}
{"id": 447, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"triples tandem bike\", 100).\nHas_mass(\"Apollo 15 crew\", 400).\n.decl Answer()\nAnswer() :- Has_mass(\"triples tandem bike\", mass1), Has_mass(\"Apollo 15 crew\", mass2), mass1 >= mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"triples tandem bike\", 100).\nHas_mass(\"Apollo 15 crew\", 400).\n.decl Answer()\nAnswer() :- Has_mass(\"triples tandem bike\", mass1), Has_mass(\"Apollo 15 crew\", mass2), mass1 >= mass2.\n.output Answer"]}
{"id": 448, "answer": true, "completion": ".decl Responds_to(Animal:symbol, Stimulus:symbol)\nResponds_to(\"dog\", \"bell\").\nResponds_to(\"Grey seal\", \"bell\").\n.decl Answer()\nAnswer() :- Responds_to(\"dog\", \"bell\"), Responds_to(\"Grey seal\", \"bell\").\nAnswer() :- Responds_to(\"dog\", \"bell\"), Responds_to(\"Grey seal\", stimulus), stimulus != \"bell\".\n.output Answer", "completions": [".decl Responds_to(Animal:symbol, Stimulus:symbol)\nResponds_to(\"dog\", \"bell\").\nResponds_to(\"Grey seal\", \"bell\").\n.decl Answer()\nAnswer() :- Responds_to(\"dog\", \"bell\"), Responds_to(\"Grey seal\", \"bell\").\nAnswer() :- Responds_to(\"dog\", \"bell\"), Responds_to(\"Grey seal\", stimulus), stimulus != \"bell\".\n.output Answer"]}
{"id": 449, "answer": true, "completion": ".decl Has_family(Animal:symbol, Family:symbol)\nHas_family(\"sable\", \"mustelid\").\nHas_family(\"wolverine\", \"mustelid\").\n.decl Answer()\nAnswer() :- Has_family(\"sable\", family1), Has_family(\"wolverine\", family2), family1 = family2.\n.output Answer", "completions": [".decl Has_family(Animal:symbol, Family:symbol)\nHas_family(\"sable\", \"mustelid\").\nHas_family(\"wolverine\", \"mustelid\").\n.decl Answer()\nAnswer() :- Has_family(\"sable\", family1), Has_family(\"wolverine\", family2), family1 = family2.\n.output Answer"]}
{"id": 450, "answer": false, "completion": ".decl Lives_in_environment(Animal:symbol, Environment:symbol)\nLives_in_environment(\"lobster\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in_environment(\"lobster\", \"desert\"), !.\n.output Answer", "completions": [".decl Lives_in_environment(Animal:symbol, Environment:symbol)\nLives_in_environment(\"lobster\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in_environment(\"lobster\", \"desert\"), !.\n.output Answer"]}
{"id": 451, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Nicole Kidman\", 1.8).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Nicole Kidman\", 59).\n.decl Ideal_height(Character:symbol, Height:float)\nIdeal_height(\"Psylocke\", 1.7).\nIdeal_height(\"Psylocke\", 1.8).\nIdeal_height(\"Psylocke\", 1.9).\nIdeal_height(\"Psylocke\", 2.0).\n.decl Ideal_weight(Character:symbol, Weight:float)\nIdeal_weight(\"Psylocke\", 50).\nIdeal_weight(\"Psylocke\", 55).\nIdeal_weight(\"Psylocke\", 60).\nIdeal_weight(\"Psylocke\", 65).\n.decl Answer()\nAnswer() :- Has_height(\"Nicole Kidman\", height1), Has_weight(\"Nicole Kidman\", weight1), Ideal_height(\"Psylocke\", height2), Ideal_weight(\"Psylocke\", weight2), height1 >= height2, weight1 <= weight2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Nicole Kidman\", 1.8).\n.decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Nicole Kidman\", 59).\n.decl Ideal_height(Character:symbol, Height:float)\nIdeal_height(\"Psylocke\", 1.7).\nIdeal_height(\"Psylocke\", 1.8).\nIdeal_height(\"Psylocke\", 1.9).\nIdeal_height(\"Psylocke\", 2.0).\n.decl Ideal_weight(Character:symbol, Weight:float)\nIdeal_weight(\"Psylocke\", 50).\nIdeal_weight(\"Psylocke\", 55).\nIdeal_weight(\"Psylocke\", 60).\nIdeal_weight(\"Psylocke\", 65).\n.decl Answer()\nAnswer() :- Has_height(\"Nicole Kidman\", height1), Has_weight(\"Nicole Kidman\", weight1), Ideal_height(\"Psylocke\", height2), Ideal_weight(\"Psylocke\", weight2), height1 >= height2, weight1 <= weight2.\n.output Answer"]}
{"id": 452, "answer": true, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 453, "answer": true, "completion": ".decl Drives(Person:symbol, Car:symbol)\n.decl Answer()\nAnswer() :- !Drives(\"George Washington\", \"Lexus\").\n.output Answer", "completions": [".decl Drives(Person:symbol, Car:symbol)\n.decl Answer()\nAnswer() :- !Drives(\"George Washington\", \"Lexus\").\n.output Answer"]}
{"id": 454, "answer": true, "completion": ".decl Has_feature(Program:symbol, Feature:symbol)\nHas_feature(\"Adobe Suite\", \"video editing\").\nHas_feature(\"Adobe Suite\", \"photo editing\").\nHas_feature(\"Adobe Suite\", \"graphic design\").\nHas_feature(\"Unity\", \"video game engine coding\").\n.decl Answer()\nAnswer() :- Has_feature(\"Adobe Suite\", \"video game engine coding\").\n.output Answer", "completions": [".decl Has_feature(Program:symbol, Feature:symbol)\nHas_feature(\"Adobe Suite\", \"video editing\").\nHas_feature(\"Adobe Suite\", \"photo editing\").\nHas_feature(\"Adobe Suite\", \"graphic design\").\nHas_feature(\"Unity\", \"video game engine coding\").\n.decl Answer()\nAnswer() :- Has_feature(\"Adobe Suite\", \"video game engine coding\").\n.output Answer"]}
{"id": 455, "answer": true, "completion": ".decl Has_percent_silver(Penny:symbol, Percent_silver:float)\nHas_percent_silver(\"1943-S penny\", 90).\n.decl Answer()\nAnswer() :- Has_percent_silver(\"1943-S penny\", percent_silver), percent_silver >= 90.\n.output Answer", "completions": [".decl Has_percent_silver(Penny:symbol, Percent_silver:float)\nHas_percent_silver(\"1943-S penny\", 90).\n.decl Answer()\nAnswer() :- Has_percent_silver(\"1943-S penny\", percent_silver), percent_silver >= 90.\n.output Answer"]}
{"id": 456, "answer": false, "completion": ".decl Is_associated_with(Person1:symbol, Person2:symbol)\nIs_associated_with(\"Lord Voldemort\", \"Igor Karkaroff\").\n.decl Is_staff_member_of(Person:symbol, School:symbol)\nIs_staff_member_of(\"Igor Karkaroff\", \"Durmstrang\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Lord Voldemort\", person1), Is_staff_member_of(person1, \"Durmstrang\").\n.output Answer", "completions": [".decl Is_associated_with(Person1:symbol, Person2:symbol)\nIs_associated_with(\"Lord Voldemort\", \"Igor Karkaroff\").\n.decl Is_staff_member_of(Person:symbol, School:symbol)\nIs_staff_member_of(\"Igor Karkaroff\", \"Durmstrang\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Lord Voldemort\", person1), Is_staff_member_of(person1, \"Durmstrang\").\n.output Answer"]}
{"id": 457, "answer": true, "completion": ".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"John\", \"Bachelor of Arts\").\n.decl Answer()\nAnswer() :- Has_degree(\"John\", \"Bachelor of Arts\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Science\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Music\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Science in Nursing\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Social Work\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Applied Science\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Architecture\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Arts in Education\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Arts in Journalism\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Arts in Music\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Arts in Theatre\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Business Administration\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Education\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Engineering\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Acting\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Art\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Art History\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Design\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Dramatic Arts\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Film\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Interior Architecture\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Media Arts and Animation\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Musical Theatre\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Photography\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Production Design\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Visual Effects\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Health Science\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Industrial Design\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Information Science\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Interdisciplinary Studies\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Landscape Architecture\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Liberal Studies\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Music Education\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Music in Performance\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Music in Theory\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Nursing\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Pharmacy\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Philosophy\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Science in Accounting\").\nAnswer() :- Has_degree(\"John", "completions": [".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"John\", \"Bachelor of Arts\").\n.decl Answer()\nAnswer() :- Has_degree(\"John\", \"Bachelor of Arts\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Science\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Music\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Science in Nursing\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Social Work\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Applied Science\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Architecture\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Arts in Education\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Arts in Journalism\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Arts in Music\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Arts in Theatre\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Business Administration\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Education\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Engineering\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Acting\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Art\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Art History\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Design\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Dramatic Arts\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Film\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Interior Architecture\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Media Arts and Animation\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Musical Theatre\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Photography\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Production Design\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Fine Arts in Visual Effects\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Health Science\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Industrial Design\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Information Science\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Interdisciplinary Studies\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Landscape Architecture\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Liberal Studies\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Music Education\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Music in Performance\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Music in Theory\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Nursing\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Pharmacy\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Philosophy\").\nAnswer() :- Has_degree(\"John\", \"Bachelor of Science in Accounting\").\nAnswer() :- Has_degree(\"John"]}
{"id": 458, "answer": true, "completion": ".decl Has_ingredient(Recipe:symbol, Ingredient:symbol)\nHas_ingredient(\"holy trinity\", \"celery\").\nHas_ingredient(\"holy trinity\", \"onion\").\nHas_ingredient(\"holy trinity\", \"bell pepper\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"holy trinity\", ingredient1), Has_ingredient(\"holy trinity\", ingredient2), Has_ingredient(\"holy trinity\", ingredient3), ingredient1 != \"celery\", ingredient2 != \"celery\", ingredient3 != \"celery\".\n.output Answer\n\n", "completions": [".decl Has_ingredient(Recipe:symbol, Ingredient:symbol)\nHas_ingredient(\"holy trinity\", \"celery\").\nHas_ingredient(\"holy trinity\", \"onion\").\nHas_ingredient(\"holy trinity\", \"bell pepper\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"holy trinity\", ingredient1), Has_ingredient(\"holy trinity\", ingredient2), Has_ingredient(\"holy trinity\", ingredient3), ingredient1 != \"celery\", ingredient2 != \"celery\", ingredient3 != \"celery\".\n.output Answer\n\n"]}
{"id": 459, "answer": false, "completion": ".decl Has_n_cells(Organ:symbol, N_cells:float)\nHas_n_cells(\"human body\", 5e+14).\nHas_n_cells(\"white blood cells\", 1e+11).\nHas_n_cells(\"red blood cells\", 2.5e+11).\n.decl Answer()\nAnswer() :- Has_n_cells(\"human body\", n_cells1), Has_n_cells(\"white blood cells\", n_cells2), Has_n_cells(\"red blood cells\", n_cells3), n_cells2 > n_cells3.\n.output Answer", "completions": [".decl Has_n_cells(Organ:symbol, N_cells:float)\nHas_n_cells(\"human body\", 5e+14).\nHas_n_cells(\"white blood cells\", 1e+11).\nHas_n_cells(\"red blood cells\", 2.5e+11).\n.decl Answer()\nAnswer() :- Has_n_cells(\"human body\", n_cells1), Has_n_cells(\"white blood cells\", n_cells2), Has_n_cells(\"red blood cells\", n_cells3), n_cells2 > n_cells3.\n.output Answer"]}
{"id": 460, "answer": false, "completion": ".decl Is_connected(City1:symbol, City2:symbol)\nIs_connected(\"New York\", \"Miami\").\n.decl Answer()\nAnswer() :- Is_connected(\"New York\", \"Miami\").\n.output Answer", "completions": [".decl Is_connected(City1:symbol, City2:symbol)\nIs_connected(\"New York\", \"Miami\").\n.decl Answer()\nAnswer() :- Is_connected(\"New York\", \"Miami\").\n.output Answer"]}
{"id": 461, "answer": true, "completion": ".decl Defeats(Wizard_A:symbol, Wizard_B:symbol)\nDefeats(\"Gandalf\", \"Rincewind\").\n.decl Answer()\nAnswer() :- Defeats(\"Gandalf\", \"Rincewind\").\n.output Answer", "completions": [".decl Defeats(Wizard_A:symbol, Wizard_B:symbol)\nDefeats(\"Gandalf\", \"Rincewind\").\n.decl Answer()\nAnswer() :- Defeats(\"Gandalf\", \"Rincewind\").\n.output Answer"]}
{"id": 462, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Tiny House\", 2.4).\nHas_height(\"Osama bin Laden\", 2.1).\n.decl Answer()\nAnswer() :- Has_height(\"Tiny House\", height1), Has_height(\"Osama bin Laden\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Tiny House\", 2.4).\nHas_height(\"Osama bin Laden\", 2.1).\n.decl Answer()\nAnswer() :- Has_height(\"Tiny House\", height1), Has_height(\"Osama bin Laden\", height2), height1 > height2.\n.output Answer"]}
{"id": 463, "answer": false, "completion": ".decl Won_medal(Country:symbol, Year:float, Sport:symbol, Medal:symbol)\nWon_medal(\"England\", 2012, \"swimming\", \"gold\").\n.decl Answer()\nAnswer() :- Won_medal(\"England\", 1800, sport, \"gold\").\n.output Answer", "completions": [".decl Won_medal(Country:symbol, Year:float, Sport:symbol, Medal:symbol)\nWon_medal(\"England\", 2012, \"swimming\", \"gold\").\n.decl Answer()\nAnswer() :- Won_medal(\"England\", 1800, sport, \"gold\").\n.output Answer"]}
{"id": 464, "answer": false, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"E.T. the Extra-Terrestrial Atari Landfill story\", \"New Mexico\").\n.decl Is_urban_legend(Event:symbol)\nIs_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill story\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"E.T. the Extra-Terrestrial Atari Landfill story\", \"New Mexico\"), Is_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill story\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"E.T. the Extra-Terrestrial Atari Landfill story\", \"New Mexico\").\n.decl Is_urban_legend(Event:symbol)\nIs_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill story\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"E.T. the Extra-Terrestrial Atari Landfill story\", \"New Mexico\"), Is_urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill story\").\n.output Answer"]}
{"id": 465, "answer": false, "completion": ".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Jimmy Vee\", \"missing left arm\").\n.decl Eligible_for_Paralympic_Games(Disability:symbol)\nEligible_for_Paralympic_Games(\"missing left arm\").\nEligible_for_Paralympic_Games(\"missing right arm\").\nEligible_for_Paralympic_Games(\"missing left leg\").\nEligible_for_Paralympic_Games(\"missing right leg\").\n.decl Answer()\nAnswer() :- Has_disability(\"Jimmy Vee\", disability), Eligible_for_Paralympic_Games(disability).\n.output Answer", "completions": [".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Jimmy Vee\", \"missing left arm\").\n.decl Eligible_for_Paralympic_Games(Disability:symbol)\nEligible_for_Paralympic_Games(\"missing left arm\").\nEligible_for_Paralympic_Games(\"missing right arm\").\nEligible_for_Paralympic_Games(\"missing left leg\").\nEligible_for_Paralympic_Games(\"missing right leg\").\n.decl Answer()\nAnswer() :- Has_disability(\"Jimmy Vee\", disability), Eligible_for_Paralympic_Games(disability).\n.output Answer"]}
{"id": 466, "answer": false, "completion": ".decl Is_alive(Person:symbol)\nIs_alive(\"Elijah Cummings\").\n.decl Answer()\nAnswer() :- Is_alive(\"Elijah Cummings\").\n.output Answer", "completions": [".decl Is_alive(Person:symbol)\nIs_alive(\"Elijah Cummings\").\n.decl Answer()\nAnswer() :- Is_alive(\"Elijah Cummings\").\n.output Answer"]}
{"id": 467, "answer": true, "completion": ".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Hermione Granger\", \"United Kingdom\").\n.decl Is_eligible_for(Person:symbol, Honor:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Hermione Granger\", \"United Kingdom\"), Is_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.output Answer", "completions": [".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Hermione Granger\", \"United Kingdom\").\n.decl Is_eligible_for(Person:symbol, Honor:symbol)\nIs_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Hermione Granger\", \"United Kingdom\"), Is_eligible_for(\"Hermione Granger\", \"Order of the British Empire\").\n.output Answer"]}
{"id": 468, "answer": false, "completion": ".decl Is_safe_to_cook_in(Pottery:symbol)\nIs_safe_to_cook_in(\"stoneware\").\nIs_safe_to_cook_in(\"porcelain\").\n.decl Answer()\nAnswer() :- Is_safe_to_cook_in(pottery).\n.output Answer\n\n", "completions": [".decl Is_safe_to_cook_in(Pottery:symbol)\nIs_safe_to_cook_in(\"stoneware\").\nIs_safe_to_cook_in(\"porcelain\").\n.decl Answer()\nAnswer() :- Is_safe_to_cook_in(pottery).\n.output Answer\n\n"]}
{"id": 469, "answer": true, "completion": ".decl Has_origin_country(Pope:symbol, Origin_country:symbol)\nHas_origin_country(\"Pope Alexander VI\", \"Spain\").\n.decl Has_papal_history(Country:symbol, Papal_history:float)\nHas_papal_history(\"Italy\", 1).\nHas_papal_history(\"France\", 2).\nHas_papal_history(\"Germany\", 3).\nHas_papal_history(\"Spain\", 4).\n.decl Answer()\nAnswer() :- Has_origin_country(\"Pope Alexander VI\", \"Spain\"), Has_papal_history(\"Spain\", papal_history1), Has_papal_history(country, papal_history2), papal_history1 > papal_history2.\n.output Answer", "completions": [".decl Has_origin_country(Pope:symbol, Origin_country:symbol)\nHas_origin_country(\"Pope Alexander VI\", \"Spain\").\n.decl Has_papal_history(Country:symbol, Papal_history:float)\nHas_papal_history(\"Italy\", 1).\nHas_papal_history(\"France\", 2).\nHas_papal_history(\"Germany\", 3).\nHas_papal_history(\"Spain\", 4).\n.decl Answer()\nAnswer() :- Has_origin_country(\"Pope Alexander VI\", \"Spain\"), Has_papal_history(\"Spain\", papal_history1), Has_papal_history(country, papal_history2), papal_history1 > papal_history2.\n.output Answer"]}
{"id": 470, "answer": true, "completion": ".decl Depression(Person:symbol)\nDepression(\"John\").\nDepression(\"Mary\").\n.decl Lazy(Person:symbol)\nLazy(\"John\").\nLazy(\"Mary\").\n.decl Answer()\nAnswer() :- Depression(person), Lazy(person).\n.output Answer", "completions": [".decl Depression(Person:symbol)\nDepression(\"John\").\nDepression(\"Mary\").\n.decl Lazy(Person:symbol)\nLazy(\"John\").\nLazy(\"Mary\").\n.decl Answer()\nAnswer() :- Depression(person), Lazy(person).\n.output Answer"]}
{"id": 471, "answer": true, "completion": ".decl Has_dangerousness(Animal:symbol, Dangerousness:float)\nHas_dangerousness(\"Oculudentavis\", 1).\nHas_dangerousness(\"Allosaurus\", 2).\n.decl Answer()\nAnswer() :- Has_dangerousness(\"Oculudentavis\", dangerousness1), Has_dangerousness(\"Allosaurus\", dangerousness2), dangerousness1 < dangerousness2.\n.output Answer", "completions": [".decl Has_dangerousness(Animal:symbol, Dangerousness:float)\nHas_dangerousness(\"Oculudentavis\", 1).\nHas_dangerousness(\"Allosaurus\", 2).\n.decl Answer()\nAnswer() :- Has_dangerousness(\"Oculudentavis\", dangerousness1), Has_dangerousness(\"Allosaurus\", dangerousness2), dangerousness1 < dangerousness2.\n.output Answer"]}
{"id": 472, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Christopher Nolan\", 1.8).\nHas_height(\"Danny Devito\", 1.6).\n.decl Answer()\nAnswer() :- Has_height(\"Christopher Nolan\", height1), Has_height(\"Danny Devito\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Christopher Nolan\", 1.8).\nHas_height(\"Danny Devito\", 1.6).\n.decl Answer()\nAnswer() :- Has_height(\"Christopher Nolan\", height1), Has_height(\"Danny Devito\", height2), height1 > height2.\n.output Answer"]}
{"id": 473, "answer": true, "completion": ".decl Has_schedule(Object:symbol, Schedule:symbol)\nHas_schedule(\"Big Ben's bells\", \"normal schedule\").\n.decl Is_at_location(Object:symbol, Location:symbol)\nIs_at_location(\"Big Ben's bells\", \"Palace of Westminster\").\n.decl Answer()\nAnswer() :- Has_schedule(\"Big Ben's bells\", \"normal schedule\"), Is_at_location(\"Big Ben's bells\", \"Palace of Westminster\").\n.output Answer", "completions": [".decl Has_schedule(Object:symbol, Schedule:symbol)\nHas_schedule(\"Big Ben's bells\", \"normal schedule\").\n.decl Is_at_location(Object:symbol, Location:symbol)\nIs_at_location(\"Big Ben's bells\", \"Palace of Westminster\").\n.decl Answer()\nAnswer() :- Has_schedule(\"Big Ben's bells\", \"normal schedule\"), Is_at_location(\"Big Ben's bells\", \"Palace of Westminster\").\n.output Answer"]}
{"id": 474, "answer": true, "completion": ".decl Appears_in(Character:symbol, Movie:symbol)\nAppears_in(\"Klingon\", \"Star Trek: The Motion Picture\").\nAppears_in(\"Klingon\", \"Star Trek II: The Wrath of Khan\").\nAppears_in(\"Klingon\", \"Star Trek III: The Search for Spock\").\nAppears_in(\"Klingon\", \"Star Trek IV: The Voyage Home\").\nAppears_in(\"Klingon\", \"Star Trek V: The Final Frontier\").\nAppears_in(\"Klingon\", \"Star Trek VI: The Undiscovered Country\").\nAppears_in(\"Klingon\", \"Star Trek: Generations\").\nAppears_in(\"Klingon\", \"Star Trek: First Contact\").\nAppears_in(\"Klingon\", \"Star Trek: Insurrection\").\nAppears_in(\"Klingon\", \"Star Trek: Nemesis\").\nAppears_in(\"Klingon\", \"Star Trek\").\nAppears_in(\"Klingon\", \"Star Trek Into Darkness\").\nAppears_in(\"Klingon\", \"Star Trek Beyond\").\n.decl Answer()\nAnswer() :- Appears_in(\"Klingon\", \"Star Trek: The Last Jedi\").\n.output Answer", "completions": [".decl Appears_in(Character:symbol, Movie:symbol)\nAppears_in(\"Klingon\", \"Star Trek: The Motion Picture\").\nAppears_in(\"Klingon\", \"Star Trek II: The Wrath of Khan\").\nAppears_in(\"Klingon\", \"Star Trek III: The Search for Spock\").\nAppears_in(\"Klingon\", \"Star Trek IV: The Voyage Home\").\nAppears_in(\"Klingon\", \"Star Trek V: The Final Frontier\").\nAppears_in(\"Klingon\", \"Star Trek VI: The Undiscovered Country\").\nAppears_in(\"Klingon\", \"Star Trek: Generations\").\nAppears_in(\"Klingon\", \"Star Trek: First Contact\").\nAppears_in(\"Klingon\", \"Star Trek: Insurrection\").\nAppears_in(\"Klingon\", \"Star Trek: Nemesis\").\nAppears_in(\"Klingon\", \"Star Trek\").\nAppears_in(\"Klingon\", \"Star Trek Into Darkness\").\nAppears_in(\"Klingon\", \"Star Trek Beyond\").\n.decl Answer()\nAnswer() :- Appears_in(\"Klingon\", \"Star Trek: The Last Jedi\").\n.output Answer"]}
{"id": 475, "answer": true, "completion": ".decl Buried_in(Person:symbol, Place:symbol)\nBuried_in(\"Queen Elizabeth\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_in(\"Queen Elizabeth\", \"Pantheon\").\n.output Answer", "completions": [".decl Buried_in(Person:symbol, Place:symbol)\nBuried_in(\"Queen Elizabeth\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_in(\"Queen Elizabeth\", \"Pantheon\").\n.output Answer"]}
{"id": 476, "answer": true, "completion": ".decl Is_part_of(State:symbol, Region:symbol)\nIs_part_of(\"Washington\", \"Ish river country\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Washington\", \"Ish river country\").\n.output Answer", "completions": [".decl Is_part_of(State:symbol, Region:symbol)\nIs_part_of(\"Washington\", \"Ish river country\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Washington\", \"Ish river country\").\n.output Answer"]}
{"id": 477, "answer": false, "completion": ".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"judo fighter\", \"silicone suit\").\n.decl Answer()\nAnswer() :- Wears(\"judo fighter\", \"silicone suit\").\n.output Answer", "completions": [".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"judo fighter\", \"silicone suit\").\n.decl Answer()\nAnswer() :- Wears(\"judo fighter\", \"silicone suit\").\n.output Answer"]}
{"id": 478, "answer": false, "completion": ".decl Answer()\nAnswer() :- true.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- true.\n.output Answer"]}
{"id": 479, "answer": true, "completion": ".decl Is_domesticated(Animal:symbol)\nIs_domesticated(\"dog\").\nIs_domesticated(\"cat\").\nIs_domesticated(\"hamster\").\nIs_domesticated(\"goldfish\").\n.decl Answer()\nAnswer() :- Is_domesticated(\"hamster\").\nAnswer() :- Is_domesticated(\"goldfish\").\nAnswer() :- Is_domesticated(\"cat\").\nAnswer() :- Is_domesticated(\"dog\").\n.output Answer", "completions": [".decl Is_domesticated(Animal:symbol)\nIs_domesticated(\"dog\").\nIs_domesticated(\"cat\").\nIs_domesticated(\"hamster\").\nIs_domesticated(\"goldfish\").\n.decl Answer()\nAnswer() :- Is_domesticated(\"hamster\").\nAnswer() :- Is_domesticated(\"goldfish\").\nAnswer() :- Is_domesticated(\"cat\").\nAnswer() :- Is_domesticated(\"dog\").\n.output Answer"]}
{"id": 480, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Kurt Cobain\", 27).\n.decl Started_in_year(Project:symbol, Year:float)\nStarted_in_year(\"Project Semicolon\", 2013).\n.decl Answer()\nAnswer() :- Has_age(\"Kurt Cobain\", age), Started_in_year(\"Project Semicolon\", year), age < year.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Kurt Cobain\", 27).\n.decl Started_in_year(Project:symbol, Year:float)\nStarted_in_year(\"Project Semicolon\", 2013).\n.decl Answer()\nAnswer() :- Has_age(\"Kurt Cobain\", age), Started_in_year(\"Project Semicolon\", year), age < year.\n.output Answer"]}
{"id": 481, "answer": false, "completion": ".decl Needs(Person:symbol, Need:symbol)\nNeeds(\"anxious person\", \"courage\").\n.decl Can_provide(Wizard:symbol, Need:symbol)\nCan_provide(\"Wizard of Oz\", \"courage\").\n.decl Answer()\nAnswer() :- Needs(\"anxious person\", need), Can_provide(\"Wizard of Oz\", need).\n.output Answer", "completions": [".decl Needs(Person:symbol, Need:symbol)\nNeeds(\"anxious person\", \"courage\").\n.decl Can_provide(Wizard:symbol, Need:symbol)\nCan_provide(\"Wizard of Oz\", \"courage\").\n.decl Answer()\nAnswer() :- Needs(\"anxious person\", need), Can_provide(\"Wizard of Oz\", need).\n.output Answer"]}
{"id": 482, "answer": true, "completion": ".decl Protects_against(Firewall:symbol, Short_circuit:symbol)\nProtects_against(\"firewall\", \"short circuit\").\n.decl Answer()\nAnswer() :- Protects_against(\"firewall\", \"short circuit\").\n.output Answer", "completions": [".decl Protects_against(Firewall:symbol, Short_circuit:symbol)\nProtects_against(\"firewall\", \"short circuit\").\n.decl Answer()\nAnswer() :- Protects_against(\"firewall\", \"short circuit\").\n.output Answer"]}
{"id": 483, "answer": true, "completion": ".decl Is_older_than(Person:symbol, Age:float)\nIs_older_than(\"Michael J Fox\", 55).\n.decl Qualifies_for(Person:symbol, Job:symbol)\nQualifies_for(\"Michael J Fox\", \"Army Rangers\").\n.decl Answer()\nAnswer() :- Qualifies_for(\"Michael J Fox\", \"Army Rangers\").\nAnswer() :- Qualifies_for(person, \"Army Rangers\"), Is_older_than(person, age), age > 55.\n.output Answer", "completions": [".decl Is_older_than(Person:symbol, Age:float)\nIs_older_than(\"Michael J Fox\", 55).\n.decl Qualifies_for(Person:symbol, Job:symbol)\nQualifies_for(\"Michael J Fox\", \"Army Rangers\").\n.decl Answer()\nAnswer() :- Qualifies_for(\"Michael J Fox\", \"Army Rangers\").\nAnswer() :- Qualifies_for(person, \"Army Rangers\"), Is_older_than(person, age), age > 55.\n.output Answer"]}
{"id": 484, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"The Jackson 5\", 5).\nHas_n_members(\"The Isley Brothers\", 6).\n.decl Answer()\nAnswer() :- Has_n_members(\"The Jackson 5\", n_members1), Has_n_members(\"The Isley Brothers\", n_members2), n_members1 < n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"The Jackson 5\", 5).\nHas_n_members(\"The Isley Brothers\", 6).\n.decl Answer()\nAnswer() :- Has_n_members(\"The Jackson 5\", n_members1), Has_n_members(\"The Isley Brothers\", n_members2), n_members1 < n_members2.\n.output Answer"]}
{"id": 485, "answer": true, "completion": ".decl Is_guru(Person:symbol)\nIs_guru(\"Kim Kardashian\").\n.decl Answer()\nAnswer() :- Is_guru(\"Kim Kardashian\").\n.output Answer", "completions": [".decl Is_guru(Person:symbol)\nIs_guru(\"Kim Kardashian\").\n.decl Answer()\nAnswer() :- Is_guru(\"Kim Kardashian\").\n.output Answer"]}
{"id": 486, "answer": false, "completion": ".decl Won_award(Show:symbol, Award:symbol)\nWon_award(\"Modern Family\", \"Slammy\").\n.decl Answer()\nAnswer() :- Won_award(\"Modern Family\", \"Slammy\").\n.output Answer", "completions": [".decl Won_award(Show:symbol, Award:symbol)\nWon_award(\"Modern Family\", \"Slammy\").\n.decl Answer()\nAnswer() :- Won_award(\"Modern Family\", \"Slammy\").\n.output Answer"]}
{"id": 487, "answer": true, "completion": ".decl Has_n_ex_wives(Person:symbol, N_ex_wives:float)\nHas_n_ex_wives(\"Larry King\", 8).\n.decl Has_n_players(Team:symbol, N_players:float)\nHas_n_players(\"water polo team\", 7).\n.decl Answer()\nAnswer() :- Has_n_ex_wives(\"Larry King\", n_ex_wives), Has_n_players(\"water polo team\", n_players), n_ex_wives >= n_players.\n.output Answer", "completions": [".decl Has_n_ex_wives(Person:symbol, N_ex_wives:float)\nHas_n_ex_wives(\"Larry King\", 8).\n.decl Has_n_players(Team:symbol, N_players:float)\nHas_n_players(\"water polo team\", 7).\n.decl Answer()\nAnswer() :- Has_n_ex_wives(\"Larry King\", n_ex_wives), Has_n_players(\"water polo team\", n_players), n_ex_wives >= n_players.\n.output Answer"]}
{"id": 488, "answer": true, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Jason\", \"smart\").\nHas_trait(\"Dr. Disrespect\", \"smart\").\nHas_trait(\"Dr. Disrespect\", \"tall\").\n.decl Answer()\nAnswer() :- Has_trait(\"Jason\", trait), Has_trait(\"Dr. Disrespect\", trait).\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Jason\", \"smart\").\nHas_trait(\"Dr. Disrespect\", \"smart\").\nHas_trait(\"Dr. Disrespect\", \"tall\").\n.decl Answer()\nAnswer() :- Has_trait(\"Jason\", trait), Has_trait(\"Dr. Disrespect\", trait).\n.output Answer"]}
{"id": 489, "answer": true, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Iowa\", 56272).\nHas_area(\"English Channel\", 75000).\n.decl Answer()\nAnswer() :- Has_area(\"Iowa\", area1), Has_area(\"English Channel\", area2), area1 < area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Iowa\", 56272).\nHas_area(\"English Channel\", 75000).\n.decl Answer()\nAnswer() :- Has_area(\"Iowa\", area1), Has_area(\"English Channel\", area2), area1 < area2.\n.output Answer"]}
{"id": 490, "answer": true, "completion": ".decl Practices(Person:symbol, Practice:symbol)\nPractices(\"Kublai Khan\", \"polygamy\").\nPractices(\"Genghis Khan\", \"polygamy\").\n.decl Answer()\nAnswer() :- Practices(\"Kublai Khan\", \"monogamy\").\nAnswer() :- Practices(\"Genghis Khan\", \"monogamy\").\n.output Answer", "completions": [".decl Practices(Person:symbol, Practice:symbol)\nPractices(\"Kublai Khan\", \"polygamy\").\nPractices(\"Genghis Khan\", \"polygamy\").\n.decl Answer()\nAnswer() :- Practices(\"Kublai Khan\", \"monogamy\").\nAnswer() :- Practices(\"Genghis Khan\", \"monogamy\").\n.output Answer"]}
{"id": 491, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Flag of the United States\", \"white\").\nHas_color(\"Flag of the United States\", \"red\").\nHas_color(\"Flag of the United States\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Flag of the United States\", color), color != \"white\".\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Flag of the United States\", \"white\").\nHas_color(\"Flag of the United States\", \"red\").\nHas_color(\"Flag of the United States\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Flag of the United States\", color), color != \"white\".\n.output Answer"]}
{"id": 492, "answer": true, "completion": ".decl Murders(Villain:symbol, Hero:symbol)\nMurders(\"Zod\", \"Superman\").\nMurders(\"The Joker\", \"Robin\").\n.decl Answer()\nAnswer() :- Murders(villain, \"Superman\"), Murders(villain, \"Robin\").\n.output Answer", "completions": [".decl Murders(Villain:symbol, Hero:symbol)\nMurders(\"Zod\", \"Superman\").\nMurders(\"The Joker\", \"Robin\").\n.decl Answer()\nAnswer() :- Murders(villain, \"Superman\"), Murders(villain, \"Robin\").\n.output Answer"]}
{"id": 493, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"sweet potato\", \"brown\").\nHas_color(\"sweet potato\", \"orange\").\nHas_color(\"pineapple\", \"yellow\").\nHas_color(\"pineapple\", \"brown\").\n.decl Answer()\nAnswer() :- Has_color(\"sweet potato\", color1), Has_color(\"pineapple\", color2), color1 = color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"sweet potato\", \"brown\").\nHas_color(\"sweet potato\", \"orange\").\nHas_color(\"pineapple\", \"yellow\").\nHas_color(\"pineapple\", \"brown\").\n.decl Answer()\nAnswer() :- Has_color(\"sweet potato\", color1), Has_color(\"pineapple\", color2), color1 = color2.\n.output Answer"]}
{"id": 494, "answer": true, "completion": ".decl Has_bacteria(Food:symbol, Bacteria:symbol)\nHas_bacteria(\"yogurt\", \"Lactobacillus\").\n.decl Has_insurance(Person:symbol, Insurance:symbol)\nHas_insurance(\"person\", \"dental insurance\").\n.decl Answer()\nAnswer() :- Has_bacteria(\"yogurt\", \"Lactobacillus\"), Has_insurance(\"person\", \"dental insurance\").\nAnswer() :- Has_bacteria(\"yogurt\", \"Lactobacillus\"), !Has_insurance(\"person\", \"dental insurance\").\n.output Answer", "completions": [".decl Has_bacteria(Food:symbol, Bacteria:symbol)\nHas_bacteria(\"yogurt\", \"Lactobacillus\").\n.decl Has_insurance(Person:symbol, Insurance:symbol)\nHas_insurance(\"person\", \"dental insurance\").\n.decl Answer()\nAnswer() :- Has_bacteria(\"yogurt\", \"Lactobacillus\"), Has_insurance(\"person\", \"dental insurance\").\nAnswer() :- Has_bacteria(\"yogurt\", \"Lactobacillus\"), !Has_insurance(\"person\", \"dental insurance\").\n.output Answer"]}
{"id": 495, "answer": true, "completion": ".decl Has_latitude(City:symbol, Latitude:float)\nHas_latitude(\"Bucharest\", 44.4).\nHas_latitude(\"Egypt\", 27).\n.decl Answer()\nAnswer() :- Has_latitude(\"Bucharest\", latitude1), Has_latitude(\"Egypt\", latitude2), latitude1 > latitude2.\n.output Answer", "completions": [".decl Has_latitude(City:symbol, Latitude:float)\nHas_latitude(\"Bucharest\", 44.4).\nHas_latitude(\"Egypt\", 27).\n.decl Answer()\nAnswer() :- Has_latitude(\"Bucharest\", latitude1), Has_latitude(\"Egypt\", latitude2), latitude1 > latitude2.\n.output Answer"]}
{"id": 496, "answer": true, "completion": ".decl Has_protein(Food:symbol, Protein:float)\nHas_protein(\"soy milk\", 7).\nHas_protein(\"milk\", 8).\n.decl Answer()\nAnswer() :- Has_protein(\"soy milk\", protein1), Has_protein(\"milk\", protein2), protein1 >= protein2.\n.output Answer", "completions": [".decl Has_protein(Food:symbol, Protein:float)\nHas_protein(\"soy milk\", 7).\nHas_protein(\"milk\", 8).\n.decl Answer()\nAnswer() :- Has_protein(\"soy milk\", protein1), Has_protein(\"milk\", protein2), protein1 >= protein2.\n.output Answer"]}
{"id": 497, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Arvanite Greek\", \"Greek\").\nSpeaks(\"Arvanite Greek\", \"Albanian\").\nSpeaks(\"Albanian\", \"Albanian\").\n.decl Written_in(Document:symbol, Language:symbol)\nWritten_in(\"Albanian Declaration of Independence\", \"Albanian\").\n.decl Answer()\nAnswer() :- Speaks(\"Arvanite Greek\", language1), Written_in(\"Albanian Declaration of Independence\", language2), language1 = language2.\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Arvanite Greek\", \"Greek\").\nSpeaks(\"Arvanite Greek\", \"Albanian\").\nSpeaks(\"Albanian\", \"Albanian\").\n.decl Written_in(Document:symbol, Language:symbol)\nWritten_in(\"Albanian Declaration of Independence\", \"Albanian\").\n.decl Answer()\nAnswer() :- Speaks(\"Arvanite Greek\", language1), Written_in(\"Albanian Declaration of Independence\", language2), language1 = language2.\n.output Answer"]}
{"id": 498, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"WW2\", 6).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"breakdancing\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"breakdancing\", n_years1), Last_n_years(\"WW2\", n_years2),  n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"WW2\", 6).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"breakdancing\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"breakdancing\", n_years1), Last_n_years(\"WW2\", n_years2),  n_years1 <= n_years2.\n.output Answer"]}
{"id": 499, "answer": true, "completion": ".decl Has_age_group(Title:symbol, Age_group:symbol)\nHas_age_group(\"Romeo and Juliet\", \"high schoolers\").\n.decl Has_age_group(Title:symbol, Age_group:symbol)\nHas_age_group(\"Macbeth\", \"high schoolers\").\n.decl Answer()\nAnswer() :- Has_age_group(title, \"high schoolers\"), title != \"Romeo and Juliet\".\n.output Answer", "completions": [".decl Has_age_group(Title:symbol, Age_group:symbol)\nHas_age_group(\"Romeo and Juliet\", \"high schoolers\").\n.decl Has_age_group(Title:symbol, Age_group:symbol)\nHas_age_group(\"Macbeth\", \"high schoolers\").\n.decl Answer()\nAnswer() :- Has_age_group(title, \"high schoolers\"), title != \"Romeo and Juliet\".\n.output Answer"]}
{"id": 500, "answer": true, "completion": ".decl Weighs_more_than(Person:symbol, Object:symbol)\nWeighs_more_than(\"Jon Brower Minnoch\", \"chair\").\nWeighs_more_than(\"Jon Brower Minnoch\", \"Voyager 2 launch mass\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"Jon Brower Minnoch\", \"chair\"), Weighs_more_than(\"Jon Brower Minnoch\", \"Voyager 2 launch mass\").\n.output Answer", "completions": [".decl Weighs_more_than(Person:symbol, Object:symbol)\nWeighs_more_than(\"Jon Brower Minnoch\", \"chair\").\nWeighs_more_than(\"Jon Brower Minnoch\", \"Voyager 2 launch mass\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"Jon Brower Minnoch\", \"chair\"), Weighs_more_than(\"Jon Brower Minnoch\", \"Voyager 2 launch mass\").\n.output Answer"]}
{"id": 501, "answer": false, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"Earth Day\", \"spring\").\nHappens_in_season(\"Earth Day\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"Earth Day\", \"summer\").\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"Earth Day\", \"spring\").\nHappens_in_season(\"Earth Day\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"Earth Day\", \"summer\").\n.output Answer"]}
{"id": 502, "answer": true, "completion": ".decl Has_wings(Animal:symbol)\nHas_wings(\"bumblebee\").\n.decl Answer()\nAnswer() :- Has_wings(\"bumblebee\").\n.output Answer", "completions": [".decl Has_wings(Animal:symbol)\nHas_wings(\"bumblebee\").\n.decl Answer()\nAnswer() :- Has_wings(\"bumblebee\").\n.output Answer"]}
{"id": 503, "answer": false, "completion": ".decl Can_sting(Animal_A:symbol, Animal_B:symbol)\nCan_sting(\"honey bee\", \"human\").\n.decl Answer()\nAnswer() :- Can_sting(animal1, animal2), Can_sting(animal2, animal1).\n.output Answer", "completions": [".decl Can_sting(Animal_A:symbol, Animal_B:symbol)\nCan_sting(\"honey bee\", \"human\").\n.decl Answer()\nAnswer() :- Can_sting(animal1, animal2), Can_sting(animal2, animal1).\n.output Answer"]}
{"id": 504, "answer": true, "completion": ".decl Has_first_letter(Name:symbol, First_letter:symbol)\nHas_first_letter(\"Bubbles\", \"B\").\nHas_first_letter(\"Blossom\", \"B\").\nHas_first_letter(\"Buttercup\", \"B\").\n.decl Answer()\nAnswer() :- Has_first_letter(\"Bubbles\", first_letter1), Has_first_letter(\"Blossom\", first_letter2), Has_first_letter(\"Buttercup\", first_letter3), first_letter1 = first_letter2, first_letter2 = first_letter3.\n.output Answer", "completions": [".decl Has_first_letter(Name:symbol, First_letter:symbol)\nHas_first_letter(\"Bubbles\", \"B\").\nHas_first_letter(\"Blossom\", \"B\").\nHas_first_letter(\"Buttercup\", \"B\").\n.decl Answer()\nAnswer() :- Has_first_letter(\"Bubbles\", first_letter1), Has_first_letter(\"Blossom\", first_letter2), Has_first_letter(\"Buttercup\", first_letter3), first_letter1 = first_letter2, first_letter2 = first_letter3.\n.output Answer"]}
{"id": 505, "answer": true, "completion": ".decl Fans_of(Person:symbol, Author:symbol)\nFans_of(\"Alan Rickman\", \"J.K Rowling\").\n.decl Answer()\nAnswer() :- Fans_of(\"Alan Rickman\", \"J.K Rowling\").\n.output Answer", "completions": [".decl Fans_of(Person:symbol, Author:symbol)\nFans_of(\"Alan Rickman\", \"J.K Rowling\").\n.decl Answer()\nAnswer() :- Fans_of(\"Alan Rickman\", \"J.K Rowling\").\n.output Answer"]}
{"id": 506, "answer": true, "completion": ".decl Is_proud_of(Person1:symbol, Person2:symbol)\nIs_proud_of(\"Hannah Nixon\", \"Richard Nixon\").\n.decl Is_disgraced_by(Person1:symbol, Person2:symbol)\nIs_disgraced_by(\"Hannah Nixon\", \"Richard Nixon\").\n.decl Answer()\nAnswer() :- Is_proud_of(\"Hannah Nixon\", \"Richard Nixon\"), !, Is_disgraced_by(\"Hannah Nixon\", \"Richard Nixon\").\n.output Answer", "completions": [".decl Is_proud_of(Person1:symbol, Person2:symbol)\nIs_proud_of(\"Hannah Nixon\", \"Richard Nixon\").\n.decl Is_disgraced_by(Person1:symbol, Person2:symbol)\nIs_disgraced_by(\"Hannah Nixon\", \"Richard Nixon\").\n.decl Answer()\nAnswer() :- Is_proud_of(\"Hannah Nixon\", \"Richard Nixon\"), !, Is_disgraced_by(\"Hannah Nixon\", \"Richard Nixon\").\n.output Answer"]}
{"id": 507, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"giraffe\", 5.5).\n.decl Answer()\nAnswer() :- Has_height(\"Javier Sotomayor\", height1), Has_height(\"giraffe\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"giraffe\", 5.5).\n.decl Answer()\nAnswer() :- Has_height(\"Javier Sotomayor\", height1), Has_height(\"giraffe\", height2), height1 > height2.\n.output Answer"]}
{"id": 508, "answer": true, "completion": ".decl Likes(Person:symbol, Movie:symbol)\nLikes(\"Amy Winehouse\", \"Star Wars: Rogue One\").\n.decl Answer()\nAnswer() :- Likes(\"Amy Winehouse\", \"Star Wars: Rogue One\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Movie:symbol)\nLikes(\"Amy Winehouse\", \"Star Wars: Rogue One\").\n.decl Answer()\nAnswer() :- Likes(\"Amy Winehouse\", \"Star Wars: Rogue One\").\n.output Answer"]}
{"id": 509, "answer": true, "completion": ".decl Creates(Person:symbol, Work:symbol)\nCreates(\"Christopher Nolan\", \"Batman Begins\").\nCreates(\"Bob Kane\", \"Batman Begins\").\n.decl Answer()\nAnswer() :- Creates(\"Christopher Nolan\", work1), Creates(\"Bob Kane\", work2), work1 = work2.\n.output Answer", "completions": [".decl Creates(Person:symbol, Work:symbol)\nCreates(\"Christopher Nolan\", \"Batman Begins\").\nCreates(\"Bob Kane\", \"Batman Begins\").\n.decl Answer()\nAnswer() :- Creates(\"Christopher Nolan\", work1), Creates(\"Bob Kane\", work2), work1 = work2.\n.output Answer"]}
{"id": 510, "answer": true, "completion": ".decl Named_after(County:symbol, Person:symbol)\nNamed_after(\"Morris County\", \"Lewis Morris\").\n.decl Was_chief_justice(Person:symbol)\nWas_chief_justice(\"Lewis Morris\").\n.decl Answer()\nAnswer() :- Named_after(\"Morris County\", \"Lewis Morris\"), Was_chief_justice(\"Lewis Morris\").\n.output Answer", "completions": [".decl Named_after(County:symbol, Person:symbol)\nNamed_after(\"Morris County\", \"Lewis Morris\").\n.decl Was_chief_justice(Person:symbol)\nWas_chief_justice(\"Lewis Morris\").\n.decl Answer()\nAnswer() :- Named_after(\"Morris County\", \"Lewis Morris\"), Was_chief_justice(\"Lewis Morris\").\n.output Answer"]}
{"id": 511, "answer": true, "completion": ".decl Has_status(Serfdom:symbol, Status:float)\nHas_status(\"Japanese serfdom\", 1).\nHas_status(\"English serfdom\", 0.5).\n.decl Answer()\nAnswer() :- Has_status(\"Japanese serfdom\", status1), Has_status(\"English serfdom\", status2), status1 > status2.\n.output Answer", "completions": [".decl Has_status(Serfdom:symbol, Status:float)\nHas_status(\"Japanese serfdom\", 1).\nHas_status(\"English serfdom\", 0.5).\n.decl Answer()\nAnswer() :- Has_status(\"Japanese serfdom\", status1), Has_status(\"English serfdom\", status2), status1 > status2.\n.output Answer"]}
{"id": 512, "answer": true, "completion": ".decl Grows_in_latitude(Crop:symbol, Latitude:float)\nGrows_in_latitude(\"cauliflower\", 75).\n.decl Answer()\nAnswer() :- Grows_in_latitude(\"cauliflower\", latitude), latitude = 75.\n.output Answer", "completions": [".decl Grows_in_latitude(Crop:symbol, Latitude:float)\nGrows_in_latitude(\"cauliflower\", 75).\n.decl Answer()\nAnswer() :- Grows_in_latitude(\"cauliflower\", latitude), latitude = 75.\n.output Answer"]}
{"id": 513, "answer": true, "completion": ".decl Has_top_speed(Animal:symbol, Top_speed:float)\nHas_top_speed(\"Swallow\", 11).\nHas_top_speed(\"American Woodcock\", 10).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Swallow\", top_speed1), Has_top_speed(\"American Woodcock\", top_speed2), top_speed1 > top_speed2.\n.output Answer", "completions": [".decl Has_top_speed(Animal:symbol, Top_speed:float)\nHas_top_speed(\"Swallow\", 11).\nHas_top_speed(\"American Woodcock\", 10).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Swallow\", top_speed1), Has_top_speed(\"American Woodcock\", top_speed2), top_speed1 > top_speed2.\n.output Answer"]}
{"id": 514, "answer": true, "completion": ".decl Makes(Person:symbol, Object:symbol)\nMakes(\"cattle farmer\", \"milk\").\nMakes(\"drum maker\", \"drums\").\n.decl Answer()\nAnswer() :- Makes(\"cattle farmer\", object1), Makes(\"drum maker\", object2), object1 != object2.\n.output Answer\n\n\n", "completions": [".decl Makes(Person:symbol, Object:symbol)\nMakes(\"cattle farmer\", \"milk\").\nMakes(\"drum maker\", \"drums\").\n.decl Answer()\nAnswer() :- Makes(\"cattle farmer\", object1), Makes(\"drum maker\", object2), object1 != object2.\n.output Answer\n\n\n"]}
{"id": 515, "answer": true, "completion": ".decl Needs_spare(Instrument:symbol)\nNeeds_spare(\"guitar\").\nNeeds_spare(\"bass\").\n.decl Answer()\nAnswer() :- Needs_spare(\"drum\").\nAnswer() :- Needs_spare(instrument), instrument != \"drum\".\n.output Answer", "completions": [".decl Needs_spare(Instrument:symbol)\nNeeds_spare(\"guitar\").\nNeeds_spare(\"bass\").\n.decl Answer()\nAnswer() :- Needs_spare(\"drum\").\nAnswer() :- Needs_spare(instrument), instrument != \"drum\".\n.output Answer"]}
{"id": 516, "answer": false, "completion": ".decl Named_after(Thing:symbol, Person:symbol)\nNamed_after(\"Homer\", \"Homer\").\n.decl Wrote(Person:symbol, Book:symbol)\nWrote(\"Homer\", \"Odyssey\").\n.decl Answer()\nAnswer() :- Named_after(\"Homer\", \"Homer\"), Wrote(\"Homer\", \"Odyssey\").\n.output Answer", "completions": [".decl Named_after(Thing:symbol, Person:symbol)\nNamed_after(\"Homer\", \"Homer\").\n.decl Wrote(Person:symbol, Book:symbol)\nWrote(\"Homer\", \"Odyssey\").\n.decl Answer()\nAnswer() :- Named_after(\"Homer\", \"Homer\"), Wrote(\"Homer\", \"Odyssey\").\n.output Answer"]}
{"id": 517, "answer": true, "completion": ".decl Lasts_n_seconds(Event:symbol, N_seconds:float)\nLasts_n_seconds(\"Royal Rumble\", 60).\n.decl Lasts_n_seconds(Event:symbol, N_seconds:float)\nLasts_n_seconds(\"murder\", 60).\n.decl Answer()\nAnswer() :- Lasts_n_seconds(\"murder\", n_seconds1), Lasts_n_seconds(\"Royal Rumble\", n_seconds2), n_seconds1 > n_seconds2.\n.output Answer", "completions": [".decl Lasts_n_seconds(Event:symbol, N_seconds:float)\nLasts_n_seconds(\"Royal Rumble\", 60).\n.decl Lasts_n_seconds(Event:symbol, N_seconds:float)\nLasts_n_seconds(\"murder\", 60).\n.decl Answer()\nAnswer() :- Lasts_n_seconds(\"murder\", n_seconds1), Lasts_n_seconds(\"Royal Rumble\", n_seconds2), n_seconds1 > n_seconds2.\n.output Answer"]}
{"id": 518, "answer": true, "completion": ".decl Has_depth(Place:symbol, Depth:float)\nHas_depth(\"Mariana Trench\", 11000).\n.decl Has_depth(Place:symbol, Depth:float)\nHas_depth(\"Rick and Morty\", 0).\n.decl Answer()\nAnswer() :- Has_depth(\"Mariana Trench\", depth1), Has_depth(\"Rick and Morty\", depth2), depth1 > depth2.\n.output Answer", "completions": [".decl Has_depth(Place:symbol, Depth:float)\nHas_depth(\"Mariana Trench\", 11000).\n.decl Has_depth(Place:symbol, Depth:float)\nHas_depth(\"Rick and Morty\", 0).\n.decl Answer()\nAnswer() :- Has_depth(\"Mariana Trench\", depth1), Has_depth(\"Rick and Morty\", depth2), depth1 > depth2.\n.output Answer"]}
{"id": 519, "answer": false, "completion": ".decl Has_winged_statuettes(Home:symbol)\nHas_winged_statuettes(\"home of the creator of Law & Order\").\n.decl Answer()\nAnswer() :- Has_winged_statuettes(home).\n.output Answer", "completions": [".decl Has_winged_statuettes(Home:symbol)\nHas_winged_statuettes(\"home of the creator of Law & Order\").\n.decl Answer()\nAnswer() :- Has_winged_statuettes(home).\n.output Answer"]}
{"id": 520, "answer": true, "completion": ".decl Awake_at_time(Animal:symbol, Time:symbol)\nAwake_at_time(\"clouded leopard\", \"night\").\nAwake_at_time(\"pangolin\", \"day\").\n.decl Answer()\nAnswer() :- Awake_at_time(\"clouded leopard\", time1), Awake_at_time(\"pangolin\", time2), time1 != time2.\n.output Answer", "completions": [".decl Awake_at_time(Animal:symbol, Time:symbol)\nAwake_at_time(\"clouded leopard\", \"night\").\nAwake_at_time(\"pangolin\", \"day\").\n.decl Answer()\nAnswer() :- Awake_at_time(\"clouded leopard\", time1), Awake_at_time(\"pangolin\", time2), time1 != time2.\n.output Answer"]}
{"id": 521, "answer": true, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"mythical creature\", \"unicorn\").\nHas_name(\"Small Solar System body\", \"Pluto\").\n.decl Answer()\nAnswer() :- Has_name(\"mythical creature\", name1), Has_name(\"Small Solar System body\", name2), name1 = name2.\n.output Answer", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"mythical creature\", \"unicorn\").\nHas_name(\"Small Solar System body\", \"Pluto\").\n.decl Answer()\nAnswer() :- Has_name(\"mythical creature\", name1), Has_name(\"Small Solar System body\", name2), name1 = name2.\n.output Answer"]}
{"id": 522, "answer": false, "completion": ".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"Lionel Richie\", \"holistic medicine\").\n.decl Answer()\nAnswer() :- Believes_in(\"Lionel Richie\", \"holistic medicine\").\n.output Answer\n\n", "completions": [".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"Lionel Richie\", \"holistic medicine\").\n.decl Answer()\nAnswer() :- Believes_in(\"Lionel Richie\", \"holistic medicine\").\n.output Answer\n\n"]}
{"id": 523, "answer": true, "completion": ".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Tom Bergeron\", \"host\").\nHas_role(\"Tom Bergeron\", \"emcee\").\n.decl Answer()\nAnswer() :- Has_role(\"Tom Bergeron\", \"host\"), Has_role(\"Tom Bergeron\", \"emcee\").\n.output Answer", "completions": [".decl Has_role(Person:symbol, Role:symbol)\nHas_role(\"Tom Bergeron\", \"host\").\nHas_role(\"Tom Bergeron\", \"emcee\").\n.decl Answer()\nAnswer() :- Has_role(\"Tom Bergeron\", \"host\"), Has_role(\"Tom Bergeron\", \"emcee\").\n.output Answer"]}
{"id": 524, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"salmon\", \"Caspian Sea\").\n.decl Mates_in(Animal:symbol, Location:symbol)\nMates_in(\"salmon\", \"Caspian Sea\").\n.decl Answer()\nAnswer() :- Lives_in(\"salmon\", \"Caspian Sea\"), Mates_in(\"salmon\", \"Caspian Sea\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"salmon\", \"Caspian Sea\").\n.decl Mates_in(Animal:symbol, Location:symbol)\nMates_in(\"salmon\", \"Caspian Sea\").\n.decl Answer()\nAnswer() :- Lives_in(\"salmon\", \"Caspian Sea\"), Mates_in(\"salmon\", \"Caspian Sea\").\n.output Answer"]}
{"id": 525, "answer": false, "completion": ".decl Goes_to(Train:symbol, Place:symbol)\nGoes_to(\"Amtrak\", \"New York\").\nGoes_to(\"Amtrak\", \"Boston\").\nGoes_to(\"Amtrak\", \"Washington\").\n.decl Answer()\nAnswer() :- Goes_to(\"Amtrak\", \"Underworld\").\n.output Answer", "completions": [".decl Goes_to(Train:symbol, Place:symbol)\nGoes_to(\"Amtrak\", \"New York\").\nGoes_to(\"Amtrak\", \"Boston\").\nGoes_to(\"Amtrak\", \"Washington\").\n.decl Answer()\nAnswer() :- Goes_to(\"Amtrak\", \"Underworld\").\n.output Answer"]}
{"id": 526, "answer": true, "completion": ".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"Chinook salmon\", \"protein\").\nHas_nutrient(\"Chinook salmon\", \"omega-3 fatty acids\").\nHas_nutrient(\"Chinook salmon\", \"vitamin B12\").\nHas_nutrient(\"Chinook salmon\", \"selenium\").\n.decl Needs(Person:symbol, Nutrient:symbol)\nNeeds(\"Ryan Reynolds\", \"protein\").\nNeeds(\"Ryan Reynolds\", \"omega-3 fatty acids\").\nNeeds(\"Ryan Reynolds\", \"vitamin B12\").\nNeeds(\"Ryan Reynolds\", \"selenium\").\n.decl Answer()\nAnswer() :- Has_nutrient(food, nutrient), Needs(\"Ryan Reynolds\", nutrient).\n.output Answer", "completions": [".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"Chinook salmon\", \"protein\").\nHas_nutrient(\"Chinook salmon\", \"omega-3 fatty acids\").\nHas_nutrient(\"Chinook salmon\", \"vitamin B12\").\nHas_nutrient(\"Chinook salmon\", \"selenium\").\n.decl Needs(Person:symbol, Nutrient:symbol)\nNeeds(\"Ryan Reynolds\", \"protein\").\nNeeds(\"Ryan Reynolds\", \"omega-3 fatty acids\").\nNeeds(\"Ryan Reynolds\", \"vitamin B12\").\nNeeds(\"Ryan Reynolds\", \"selenium\").\n.decl Answer()\nAnswer() :- Has_nutrient(food, nutrient), Needs(\"Ryan Reynolds\", nutrient).\n.output Answer"]}
{"id": 527, "answer": true, "completion": ".decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Tsar Nicholas\", \"Alexei\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Alexei\", \"daredevil\").\n.decl Answer()\nAnswer() :- Has_son(\"Tsar Nicholas\", \"Alexei\"), Has_trait(\"Alexei\", \"daredevil\").\n.output Answer", "completions": [".decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Tsar Nicholas\", \"Alexei\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Alexei\", \"daredevil\").\n.decl Answer()\nAnswer() :- Has_son(\"Tsar Nicholas\", \"Alexei\"), Has_trait(\"Alexei\", \"daredevil\").\n.output Answer"]}
{"id": 528, "answer": false, "completion": ".decl Has_letter(Line:symbol, Letter:symbol)\nHas_letter(\"first line\", \"a\").\nHas_letter(\"first line\", \"s\").\nHas_letter(\"first line\", \"d\").\nHas_letter(\"first line\", \"f\").\nHas_letter(\"first line\", \"g\").\nHas_letter(\"first line\", \"h\").\nHas_letter(\"first line\", \"j\").\nHas_letter(\"first line\", \"k\").\nHas_letter(\"first line\", \"l\").\nHas_letter(\"second line\", \"z\").\nHas_letter(\"second line\", \"x\").\nHas_letter(\"second line\", \"c\").\nHas_letter(\"second line\", \"v\").\nHas_letter(\"second line\", \"b\").\nHas_letter(\"second line\", \"n\").\nHas_letter(\"second line\", \"m\").\n.decl Answer()\nAnswer() :- Has_letter(\"first line\", \"a\"), Has_letter(\"first line\", \"e\"), Has_letter(\"first line\", \"i\"), Has_letter(\"first line\", \"o\"), Has_letter(\"first line\", \"u\").\nAnswer() :- Has_letter(\"second line\", \"a\"), Has_letter(\"second line\", \"e\"), Has_letter(\"second line\", \"i\"), Has_letter(\"second line\", \"o\"), Has_letter(\"second line\", \"u\").\n.output Answer", "completions": [".decl Has_letter(Line:symbol, Letter:symbol)\nHas_letter(\"first line\", \"a\").\nHas_letter(\"first line\", \"s\").\nHas_letter(\"first line\", \"d\").\nHas_letter(\"first line\", \"f\").\nHas_letter(\"first line\", \"g\").\nHas_letter(\"first line\", \"h\").\nHas_letter(\"first line\", \"j\").\nHas_letter(\"first line\", \"k\").\nHas_letter(\"first line\", \"l\").\nHas_letter(\"second line\", \"z\").\nHas_letter(\"second line\", \"x\").\nHas_letter(\"second line\", \"c\").\nHas_letter(\"second line\", \"v\").\nHas_letter(\"second line\", \"b\").\nHas_letter(\"second line\", \"n\").\nHas_letter(\"second line\", \"m\").\n.decl Answer()\nAnswer() :- Has_letter(\"first line\", \"a\"), Has_letter(\"first line\", \"e\"), Has_letter(\"first line\", \"i\"), Has_letter(\"first line\", \"o\"), Has_letter(\"first line\", \"u\").\nAnswer() :- Has_letter(\"second line\", \"a\"), Has_letter(\"second line\", \"e\"), Has_letter(\"second line\", \"i\"), Has_letter(\"second line\", \"o\"), Has_letter(\"second line\", \"u\").\n.output Answer"]}
{"id": 529, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Pacific War\", \"Pacific Ocean\").\n.decl Uses(Event:symbol, Object:symbol)\nUses(\"American Revolution\", \"muskets\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Pacific War\", place), Uses(\"American Revolution\", \"muskets\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Pacific War\", \"Pacific Ocean\").\n.decl Uses(Event:symbol, Object:symbol)\nUses(\"American Revolution\", \"muskets\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Pacific War\", place), Uses(\"American Revolution\", \"muskets\").\n.output Answer"]}
{"id": 530, "answer": false, "completion": ".decl Has_association(Person:symbol, Animal:symbol)\nHas_association(\"Noah\", \"dove\").\n.decl Answer()\nAnswer() :- Has_association(\"Noah\", \"dove\").\n.output Answer\n\n", "completions": [".decl Has_association(Person:symbol, Animal:symbol)\nHas_association(\"Noah\", \"dove\").\n.decl Answer()\nAnswer() :- Has_association(\"Noah\", \"dove\").\n.output Answer\n\n"]}
{"id": 531, "answer": true, "completion": ".decl Has_diagnosis(Person:symbol, Diagnosis:symbol)\nHas_diagnosis(\"Britney Spears\", \"bipolar disorder\").\n.decl Answer()\nAnswer() :- Has_diagnosis(\"Britney Spears\", \"bipolar disorder\").\n.output Answer", "completions": [".decl Has_diagnosis(Person:symbol, Diagnosis:symbol)\nHas_diagnosis(\"Britney Spears\", \"bipolar disorder\").\n.decl Answer()\nAnswer() :- Has_diagnosis(\"Britney Spears\", \"bipolar disorder\").\n.output Answer"]}
{"id": 532, "answer": false, "completion": ".decl Has_dangerous_claws(Animal:symbol)\nHas_dangerous_claws(\"Cassowary\").\n.decl Has_dangerous_beak(Animal:symbol)\nHas_dangerous_beak(\"Cassowary\").\nHas_dangerous_beak(\"crane\").\n.decl Answer()\nAnswer() :- Has_dangerous_claws(\"Cassowary\"), !Has_dangerous_beak(\"Cassowary\").\nAnswer() :- !Has_dangerous_claws(\"Cassowary\"), Has_dangerous_beak(\"Cassowary\").\n.output Answer", "completions": [".decl Has_dangerous_claws(Animal:symbol)\nHas_dangerous_claws(\"Cassowary\").\n.decl Has_dangerous_beak(Animal:symbol)\nHas_dangerous_beak(\"Cassowary\").\nHas_dangerous_beak(\"crane\").\n.decl Answer()\nAnswer() :- Has_dangerous_claws(\"Cassowary\"), !Has_dangerous_beak(\"Cassowary\").\nAnswer() :- !Has_dangerous_claws(\"Cassowary\"), Has_dangerous_beak(\"Cassowary\").\n.output Answer"]}
{"id": 533, "answer": true, "completion": ".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Mark Twain\", \"typesetting machine\").\nInvented(\"Mark Twain\", \"self-pasting scrapbook\").\n.decl Answer()\nAnswer() :- Invented(\"Mark Twain\", invention).\n.output Answer", "completions": [".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Mark Twain\", \"typesetting machine\").\nInvented(\"Mark Twain\", \"self-pasting scrapbook\").\n.decl Answer()\nAnswer() :- Invented(\"Mark Twain\", invention).\n.output Answer"]}
{"id": 534, "answer": true, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"French Revolution\", 1789).\nHappens_in_year(\"Eiffel tower\", 1889).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Eiffel tower\", year1), Happens_in_year(\"French Revolution\", year2), year1 > year2.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"French Revolution\", 1789).\nHappens_in_year(\"Eiffel tower\", 1889).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Eiffel tower\", year1), Happens_in_year(\"French Revolution\", year2), year1 > year2.\n.output Answer"]}
{"id": 535, "answer": false, "completion": ".decl Founded_in_year(University:symbol, Year:float)\nFounded_in_year(\"Berlin University of the Arts\", 1696).\n.decl Lasted_for_n_years(Period:symbol, N_years:float)\nLasted_for_n_years(\"Baroque period\", 100).\n.decl Answer()\nAnswer() :- Founded_in_year(\"Berlin University of the Arts\", year1), Lasted_for_n_years(\"Baroque period\", n_years), year1 >= n_years.\n.output Answer", "completions": [".decl Founded_in_year(University:symbol, Year:float)\nFounded_in_year(\"Berlin University of the Arts\", 1696).\n.decl Lasted_for_n_years(Period:symbol, N_years:float)\nLasted_for_n_years(\"Baroque period\", 100).\n.decl Answer()\nAnswer() :- Founded_in_year(\"Berlin University of the Arts\", year1), Lasted_for_n_years(\"Baroque period\", n_years), year1 >= n_years.\n.output Answer"]}
{"id": 536, "answer": false, "completion": ".decl Published_by(Comic:symbol, Publisher:symbol)\nPublished_by(\"Avengers\", \"Marvel\").\nPublished_by(\"DC\", \"DC\").\n.decl Answer()\nAnswer() :- Published_by(\"Avengers\", \"DC\").\n.output Answer", "completions": [".decl Published_by(Comic:symbol, Publisher:symbol)\nPublished_by(\"Avengers\", \"Marvel\").\nPublished_by(\"DC\", \"DC\").\n.decl Answer()\nAnswer() :- Published_by(\"Avengers\", \"DC\").\n.output Answer"]}
{"id": 537, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Queen Elizabeth The Queen Mother\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth II\", \"Elizabeth\").\nHas_name(\"Elizabeth I\", \"Elizabeth\").\n.decl Answer()\nAnswer() :- Has_name(\"Queen Elizabeth The Queen Mother\", name1), Has_name(\"Queen Elizabeth II\", name2), Has_name(\"Elizabeth I\", name3), name1 = name2, name2 = name3.\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Queen Elizabeth The Queen Mother\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth II\", \"Elizabeth\").\nHas_name(\"Elizabeth I\", \"Elizabeth\").\n.decl Answer()\nAnswer() :- Has_name(\"Queen Elizabeth The Queen Mother\", name1), Has_name(\"Queen Elizabeth II\", name2), Has_name(\"Elizabeth I\", name3), name1 = name2, name2 = name3.\n.output Answer"]}
{"id": 538, "answer": true, "completion": ".decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"Cuba Libre\", \"cola\").\nHas_ingredient(\"Cuba Libre\", \"rum\").\nHas_ingredient(\"Cuba Libre\", \"lime\").\nHas_ingredient(\"cola\", \"caffeine\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Cuba Libre\", \"cola\").\nAnswer() :- Has_ingredient(\"Cuba Libre\", drink), Has_ingredient(drink, \"caffeine\").\n.output Answer", "completions": [".decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"Cuba Libre\", \"cola\").\nHas_ingredient(\"Cuba Libre\", \"rum\").\nHas_ingredient(\"Cuba Libre\", \"lime\").\nHas_ingredient(\"cola\", \"caffeine\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Cuba Libre\", \"cola\").\nAnswer() :- Has_ingredient(\"Cuba Libre\", drink), Has_ingredient(drink, \"caffeine\").\n.output Answer"]}
{"id": 539, "answer": true, "completion": ".decl Buys(Company:symbol, Product:symbol)\nBuys(\"United Airlines\", \"fuel\").\nBuys(\"United Airlines\", \"aircraft\").\n.decl Answer()\nAnswer() :- Buys(\"United Airlines\", \"Glycol\").\n.output Answer", "completions": [".decl Buys(Company:symbol, Product:symbol)\nBuys(\"United Airlines\", \"fuel\").\nBuys(\"United Airlines\", \"aircraft\").\n.decl Answer()\nAnswer() :- Buys(\"United Airlines\", \"Glycol\").\n.output Answer"]}
{"id": 540, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Swiss Guard\", 140).\nHas_n_members(\"Virginia General Assembly\", 140).\n.decl Answer()\nAnswer() :- Has_n_members(\"Swiss Guard\", n_members1), Has_n_members(\"Virginia General Assembly\", n_members2), n_members1 >= n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Swiss Guard\", 140).\nHas_n_members(\"Virginia General Assembly\", 140).\n.decl Answer()\nAnswer() :- Has_n_members(\"Swiss Guard\", n_members1), Has_n_members(\"Virginia General Assembly\", n_members2), n_members1 >= n_members2.\n.output Answer"]}
{"id": 541, "answer": false, "completion": ".decl Liked_by(Person:symbol, Object:symbol)\nLiked_by(\"Julio Gonzalez\", \"acetylene\").\n.decl Answer()\nAnswer() :- Liked_by(\"Julio Gonzalez\", \"acetylene\").\n.output Answer\n\n\n", "completions": [".decl Liked_by(Person:symbol, Object:symbol)\nLiked_by(\"Julio Gonzalez\", \"acetylene\").\n.decl Answer()\nAnswer() :- Liked_by(\"Julio Gonzalez\", \"acetylene\").\n.output Answer\n\n\n"]}
{"id": 542, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Frigatebird\", \"Tropical\").\nLives_in(\"Frigatebird\", \"Subtropical\").\n.decl Answer()\nAnswer() :- Lives_in(\"Frigatebird\", \"Ontario\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Frigatebird\", \"Tropical\").\nLives_in(\"Frigatebird\", \"Subtropical\").\n.decl Answer()\nAnswer() :- Lives_in(\"Frigatebird\", \"Ontario\").\n.output Answer"]}
{"id": 543, "answer": true, "completion": ".decl Can_see(Object_A:symbol, Object_B:symbol)\nCan_see(\"Statue of Liberty\", \"Statue of Freedom\").\n.decl Answer()\nAnswer() :- Can_see(\"Statue of Liberty\", \"Statue of Freedom\").\n.output Answer", "completions": [".decl Can_see(Object_A:symbol, Object_B:symbol)\nCan_see(\"Statue of Liberty\", \"Statue of Freedom\").\n.decl Answer()\nAnswer() :- Can_see(\"Statue of Liberty\", \"Statue of Freedom\").\n.output Answer"]}
{"id": 544, "answer": false, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Snickers\", 250).\n.decl Answer()\nAnswer() :- Has_calories(\"Snickers\", calories), calories < 100.\n.output Answer", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Snickers\", 250).\n.decl Answer()\nAnswer() :- Has_calories(\"Snickers\", calories), calories < 100.\n.output Answer"]}
{"id": 545, "answer": true, "completion": ".decl Has_bone(Skull:symbol, Bone:symbol)\nHas_bone(\"skull\", \"cranium\").\nHas_bone(\"skull\", \"mandible\").\n.decl Answer()\nAnswer() :- Has_bone(\"skull\", bone1), Has_bone(\"skull\", bone2), bone1 != bone2.\n.output Answer", "completions": [".decl Has_bone(Skull:symbol, Bone:symbol)\nHas_bone(\"skull\", \"cranium\").\nHas_bone(\"skull\", \"mandible\").\n.decl Answer()\nAnswer() :- Has_bone(\"skull\", bone1), Has_bone(\"skull\", bone2), bone1 != bone2.\n.output Answer"]}
{"id": 546, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Jack Dempsey\", 1895).\nBorn_in_year(\"Conor McGregor\", 1988).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Conor McGregor's fights\", 2015).\nHappens_in_year(\"Conor McGregor's fights\", 2016).\n.decl Answer()\nAnswer() :- Born_in_year(\"Jack Dempsey\", year1), Happens_in_year(\"Conor McGregor's fights\", year2), year1 < year2.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Jack Dempsey\", 1895).\nBorn_in_year(\"Conor McGregor\", 1988).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Conor McGregor's fights\", 2015).\nHappens_in_year(\"Conor McGregor's fights\", 2016).\n.decl Answer()\nAnswer() :- Born_in_year(\"Jack Dempsey\", year1), Happens_in_year(\"Conor McGregor's fights\", year2), year1 < year2.\n.output Answer"]}
{"id": 547, "answer": false, "completion": ".decl Takes_place_in(Story:symbol, Country:symbol)\nTakes_place_in(\"Rurouni Kenshin\", \"Japan\").\nTakes_place_in(\"Nobunaga's Ambition\", \"Japan\").\n.decl Answer()\nAnswer() :- Takes_place_in(\"Rurouni Kenshin\", country1), Takes_place_in(\"Nobunaga's Ambition\", country2), country1 = country2.\n.output Answer", "completions": [".decl Takes_place_in(Story:symbol, Country:symbol)\nTakes_place_in(\"Rurouni Kenshin\", \"Japan\").\nTakes_place_in(\"Nobunaga's Ambition\", \"Japan\").\n.decl Answer()\nAnswer() :- Takes_place_in(\"Rurouni Kenshin\", country1), Takes_place_in(\"Nobunaga's Ambition\", country2), country1 = country2.\n.output Answer"]}
{"id": 548, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Darth Vader\", 7.5).\nHas_height(\"Bill Walton\", 6.11).\n.decl Answer()\nAnswer() :- Has_height(\"Darth Vader\", height1), Has_height(\"Bill Walton\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Darth Vader\", 7.5).\nHas_height(\"Bill Walton\", 6.11).\n.decl Answer()\nAnswer() :- Has_height(\"Darth Vader\", height1), Has_height(\"Bill Walton\", height2), height1 > height2.\n.output Answer"]}
{"id": 549, "answer": false, "completion": ".decl Popular_science(Paper:symbol)\nPopular_science(\"New Scientist\").\n.decl Peer_reviews(Paper:symbol)\nPeer_reviews(\"New Scientist\").\n.decl Answer()\nAnswer() :- Popular_science(paper), Peer_reviews(paper).\n.output Answer", "completions": [".decl Popular_science(Paper:symbol)\nPopular_science(\"New Scientist\").\n.decl Peer_reviews(Paper:symbol)\nPeer_reviews(\"New Scientist\").\n.decl Answer()\nAnswer() :- Popular_science(paper), Peer_reviews(paper).\n.output Answer"]}
{"id": 550, "answer": false, "completion": ".decl Has_satellite(Planet:symbol, Satellite:symbol)\nHas_satellite(\"Jupiter\", \"Europa\").\n.decl Has_origin(Dance:symbol, Origin:symbol)\nHas_origin(\"Viennese waltzes\", \"Vienna\").\n.decl Answer()\nAnswer() :- Has_satellite(\"Jupiter\", \"Europa\"), Has_origin(\"Viennese waltzes\", \"Vienna\").\n.output Answer", "completions": [".decl Has_satellite(Planet:symbol, Satellite:symbol)\nHas_satellite(\"Jupiter\", \"Europa\").\n.decl Has_origin(Dance:symbol, Origin:symbol)\nHas_origin(\"Viennese waltzes\", \"Vienna\").\n.decl Answer()\nAnswer() :- Has_satellite(\"Jupiter\", \"Europa\"), Has_origin(\"Viennese waltzes\", \"Vienna\").\n.output Answer"]}
{"id": 551, "answer": false, "completion": ".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Rapunzel\", \"golden\").\nHas_hair_color(\"Rapunzel\", \"blond\").\nHas_hair_color(\"Rapunzel\", \"red\").\nHas_hair_color(\"Rapunzel\", \"brown\").\nHas_hair_color(\"Rapunzel\", \"black\").\n.decl Answer()\nAnswer() :- Has_hair_color(\"Rapunzel\", \"red\").\n.output Answer", "completions": [".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Rapunzel\", \"golden\").\nHas_hair_color(\"Rapunzel\", \"blond\").\nHas_hair_color(\"Rapunzel\", \"red\").\nHas_hair_color(\"Rapunzel\", \"brown\").\nHas_hair_color(\"Rapunzel\", \"black\").\n.decl Answer()\nAnswer() :- Has_hair_color(\"Rapunzel\", \"red\").\n.output Answer"]}
{"id": 552, "answer": true, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"female\", \"female\").\nHas_gender(\"male\", \"male\").\n.decl Is_athlete(Person:symbol)\nIs_athlete(\"female\").\nIs_athlete(\"male\").\n.decl Answer()\nAnswer() :- Has_gender(person1, \"female\"), Has_gender(person2, \"male\"), Is_athlete(person1), Is_athlete(person2).\n.output Answer", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"female\", \"female\").\nHas_gender(\"male\", \"male\").\n.decl Is_athlete(Person:symbol)\nIs_athlete(\"female\").\nIs_athlete(\"male\").\n.decl Answer()\nAnswer() :- Has_gender(person1, \"female\"), Has_gender(person2, \"male\"), Is_athlete(person1), Is_athlete(person2).\n.output Answer"]}
{"id": 553, "answer": false, "completion": ".decl Contributes_to(Thing:symbol, Event:symbol)\nContributes_to(\"Eiffel Tower\", \"War in Vietnam\").\n.decl Answer()\nAnswer() :- Contributes_to(\"Eiffel Tower\", event), event = \"War in Vietnam\".\n.output Answer", "completions": [".decl Contributes_to(Thing:symbol, Event:symbol)\nContributes_to(\"Eiffel Tower\", \"War in Vietnam\").\n.decl Answer()\nAnswer() :- Contributes_to(\"Eiffel Tower\", event), event = \"War in Vietnam\".\n.output Answer"]}
{"id": 554, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Curiosity\", 900).\nHas_mass(\"cat\", 4).\n.decl Answer()\nAnswer() :- Has_mass(\"Curiosity\", mass1), Has_mass(\"cat\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Curiosity\", 900).\nHas_mass(\"cat\", 4).\n.decl Answer()\nAnswer() :- Has_mass(\"Curiosity\", mass1), Has_mass(\"cat\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 555, "answer": false, "completion": ".decl Enhances_flavor(Ingredient1:symbol, Ingredient2:symbol)\nEnhances_flavor(\"lemon\", \"milk\").\n.decl Answer()\nAnswer() :- Enhances_flavor(\"lemon\", \"milk\").\n.output Answer", "completions": [".decl Enhances_flavor(Ingredient1:symbol, Ingredient2:symbol)\nEnhances_flavor(\"lemon\", \"milk\").\n.decl Answer()\nAnswer() :- Enhances_flavor(\"lemon\", \"milk\").\n.output Answer"]}
{"id": 556, "answer": true, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Oprah Winfrey\", \"Tennessee State University\").\n.decl Is_Ivy_League(University:symbol)\nIs_Ivy_League(\"Brown University\").\nIs_Ivy_League(\"Columbia University\").\nIs_Ivy_League(\"Cornell University\").\nIs_Ivy_League(\"Dartmouth College\").\nIs_Ivy_League(\"Harvard University\").\nIs_Ivy_League(\"Princeton University\").\nIs_Ivy_League(\"University of Pennsylvania\").\nIs_Ivy_League(\"Yale University\").\n.decl Answer()\nAnswer() :- Graduates(\"Oprah Winfrey\", university), Is_Ivy_League(university).\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Oprah Winfrey\", \"Tennessee State University\").\n.decl Is_Ivy_League(University:symbol)\nIs_Ivy_League(\"Brown University\").\nIs_Ivy_League(\"Columbia University\").\nIs_Ivy_League(\"Cornell University\").\nIs_Ivy_League(\"Dartmouth College\").\nIs_Ivy_League(\"Harvard University\").\nIs_Ivy_League(\"Princeton University\").\nIs_Ivy_League(\"University of Pennsylvania\").\nIs_Ivy_League(\"Yale University\").\n.decl Answer()\nAnswer() :- Graduates(\"Oprah Winfrey\", university), Is_Ivy_League(university).\n.output Answer"]}
{"id": 557, "answer": true, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"unanimously elected president's birthday\", \"Monday\").\nHappens_on_day(\"mail carriers' break\", \"Monday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"unanimously elected president's birthday\", \"Monday\"), Happens_on_day(\"mail carriers' break\", \"Monday\").\n.output Answer", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"unanimously elected president's birthday\", \"Monday\").\nHappens_on_day(\"mail carriers' break\", \"Monday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"unanimously elected president's birthday\", \"Monday\"), Happens_on_day(\"mail carriers' break\", \"Monday\").\n.output Answer"]}
{"id": 558, "answer": true, "completion": ".decl Requires(Recipe:symbol, Ingredient:symbol)\nRequires(\"Paprika\", \"dehydrator\").\n.decl Answer()\nAnswer() :- Requires(\"Paprika\", ingredient), !, ingredient = \"dehydrator\".\n.output Answer", "completions": [".decl Requires(Recipe:symbol, Ingredient:symbol)\nRequires(\"Paprika\", \"dehydrator\").\n.decl Answer()\nAnswer() :- Requires(\"Paprika\", ingredient), !, ingredient = \"dehydrator\".\n.output Answer"]}
{"id": 559, "answer": true, "completion": ".decl Lasted_n_years(Event:symbol, N_years:float)\nLasted_n_years(\"Phillippine-American War\", 3).\n.decl Lasted_n_months(Event:symbol, N_months:float)\nLasted_n_months(\"Phillippine-American War\", 36).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"SPAM craving\", 1).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"SPAM craving\", 12).\n.decl Answer()\nAnswer() :- Lasted_n_years(\"Phillippine-American War\", n_years1), Lasted_n_months(\"Phillippine-American War\", n_months1), Happens_every_n_years(\"SPAM craving\", n_years2), Happens_every_n_months(\"SPAM craving\", n_months2), n_years1 >= n_years2, n_months1 >= n_months2.\n.output Answer", "completions": [".decl Lasted_n_years(Event:symbol, N_years:float)\nLasted_n_years(\"Phillippine-American War\", 3).\n.decl Lasted_n_months(Event:symbol, N_months:float)\nLasted_n_months(\"Phillippine-American War\", 36).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"SPAM craving\", 1).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"SPAM craving\", 12).\n.decl Answer()\nAnswer() :- Lasted_n_years(\"Phillippine-American War\", n_years1), Lasted_n_months(\"Phillippine-American War\", n_months1), Happens_every_n_years(\"SPAM craving\", n_years2), Happens_every_n_months(\"SPAM craving\", n_months2), n_years1 >= n_years2, n_months1 >= n_months2.\n.output Answer"]}
{"id": 560, "answer": false, "completion": ".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"United States Capitol\", \"White House\").\n.decl Answer()\nAnswer() :- Is_near(\"United States Capitol\", \"White House\").\n.output Answer", "completions": [".decl Is_near(Place_A:symbol, Place_B:symbol)\nIs_near(\"United States Capitol\", \"White House\").\n.decl Answer()\nAnswer() :- Is_near(\"United States Capitol\", \"White House\").\n.output Answer"]}
{"id": 561, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Godzilla's image\", 50).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"lawsuit\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"lawsuit\", n_years1), Last_n_years(\"Godzilla's image\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Godzilla's image\", 50).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"lawsuit\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"lawsuit\", n_years1), Last_n_years(\"Godzilla's image\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 562, "answer": false, "completion": ".decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"actuary\", \"math\").\nKnows_about(\"actuary\", \"statistics\").\nKnows_about(\"actuary\", \"probability\").\nKnows_about(\"actuary\", \"insurance\").\nKnows_about(\"actuary\", \"finance\").\nKnows_about(\"actuary\", \"economics\").\nKnows_about(\"actuary\", \"accounting\").\nKnows_about(\"actuary\", \"business\").\nKnows_about(\"actuary\", \"actuarial science\").\n.decl Answer()\nAnswer() :- Knows_about(\"actuary\", \"math\"), Knows_about(\"actuary\", \"statistics\"), Knows_about(\"actuary\", \"probability\"), Knows_about(\"actuary\", \"insurance\"), Knows_about(\"actuary\", \"finance\"), Knows_about(\"actuary\", \"economics\"), Knows_about(\"actuary\", \"accounting\"), Knows_about(\"actuary\", \"business\"), Knows_about(\"actuary\", \"actuarial science\").\n.output Answer", "completions": [".decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"actuary\", \"math\").\nKnows_about(\"actuary\", \"statistics\").\nKnows_about(\"actuary\", \"probability\").\nKnows_about(\"actuary\", \"insurance\").\nKnows_about(\"actuary\", \"finance\").\nKnows_about(\"actuary\", \"economics\").\nKnows_about(\"actuary\", \"accounting\").\nKnows_about(\"actuary\", \"business\").\nKnows_about(\"actuary\", \"actuarial science\").\n.decl Answer()\nAnswer() :- Knows_about(\"actuary\", \"math\"), Knows_about(\"actuary\", \"statistics\"), Knows_about(\"actuary\", \"probability\"), Knows_about(\"actuary\", \"insurance\"), Knows_about(\"actuary\", \"finance\"), Knows_about(\"actuary\", \"economics\"), Knows_about(\"actuary\", \"accounting\"), Knows_about(\"actuary\", \"business\"), Knows_about(\"actuary\", \"actuarial science\").\n.output Answer"]}
{"id": 563, "answer": true, "completion": ".decl Produces_methane(Animal:symbol, Methane_emissions:float)\nProduces_methane(\"cow\", 100).\n.decl Produces_methane(Vehicle:symbol, Methane_emissions:float)\nProduces_methane(\"car\", 5).\n.decl Answer()\nAnswer() :- Produces_methane(\"cow\", methane_emissions1), Produces_methane(\"car\", methane_emissions2), methane_emissions1 < methane_emissions2.\n.output Answer", "completions": [".decl Produces_methane(Animal:symbol, Methane_emissions:float)\nProduces_methane(\"cow\", 100).\n.decl Produces_methane(Vehicle:symbol, Methane_emissions:float)\nProduces_methane(\"car\", 5).\n.decl Answer()\nAnswer() :- Produces_methane(\"cow\", methane_emissions1), Produces_methane(\"car\", methane_emissions2), methane_emissions1 < methane_emissions2.\n.output Answer"]}
{"id": 564, "answer": false, "completion": ".decl Writes_about(Person:symbol, Person2:symbol)\nWrites_about(\"Justin Timberlake\", \"Britney Spears\").\n.decl Answer()\nAnswer() :- Writes_about(\"Justin Timberlake\", \"Britney Spears\").\n.output Answer", "completions": [".decl Writes_about(Person:symbol, Person2:symbol)\nWrites_about(\"Justin Timberlake\", \"Britney Spears\").\n.decl Answer()\nAnswer() :- Writes_about(\"Justin Timberlake\", \"Britney Spears\").\n.output Answer"]}
{"id": 565, "answer": true, "completion": ".decl Can_chase_down(Animal_A:symbol, Animal_B:symbol)\nCan_chase_down(\"Clouded leopards\", \"Pronghorn antelopes\").\n.decl Answer()\nAnswer() :- Can_chase_down(\"Clouded leopards\", \"Pronghorn antelopes\").\n.output Answer", "completions": [".decl Can_chase_down(Animal_A:symbol, Animal_B:symbol)\nCan_chase_down(\"Clouded leopards\", \"Pronghorn antelopes\").\n.decl Answer()\nAnswer() :- Can_chase_down(\"Clouded leopards\", \"Pronghorn antelopes\").\n.output Answer"]}
{"id": 566, "answer": false, "completion": ".decl Has_n_presidents(Country:symbol, N_presidents:float)\nHas_n_presidents(\"United States\", 40).\n.decl Has_n_friends(Person:symbol, N_friends:float)\nHas_n_friends(\"Ronald Reagan\", 0).\n.decl Answer()\nAnswer() :- Has_n_presidents(\"United States\", n_presidents1), Has_n_friends(\"Ronald Reagan\", n_friends1), n_presidents1 = n_friends1.\n.output Answer", "completions": [".decl Has_n_presidents(Country:symbol, N_presidents:float)\nHas_n_presidents(\"United States\", 40).\n.decl Has_n_friends(Person:symbol, N_friends:float)\nHas_n_friends(\"Ronald Reagan\", 0).\n.decl Answer()\nAnswer() :- Has_n_presidents(\"United States\", n_presidents1), Has_n_friends(\"Ronald Reagan\", n_friends1), n_presidents1 = n_friends1.\n.output Answer"]}
{"id": 567, "answer": true, "completion": ".decl Requires_ID(Medication:symbol)\nRequires_ID(\"Adderall\").\n.decl Answer()\nAnswer() :- Requires_ID(medication).\n.output Answer", "completions": [".decl Requires_ID(Medication:symbol)\nRequires_ID(\"Adderall\").\n.decl Answer()\nAnswer() :- Requires_ID(medication).\n.output Answer"]}
{"id": 568, "answer": true, "completion": ".decl Has_n_ships(Navy:symbol, N_ships:float)\nHas_n_ships(\"Republic of Korea Navy\", 700).\nHas_n_ships(\"Eritrea Navy\", 0).\n.decl Answer()\nAnswer() :- Has_n_ships(\"Republic of Korea Navy\", n_ships1), Has_n_ships(\"Eritrea Navy\", n_ships2), n_ships1 > n_ships2.\n.output Answer", "completions": [".decl Has_n_ships(Navy:symbol, N_ships:float)\nHas_n_ships(\"Republic of Korea Navy\", 700).\nHas_n_ships(\"Eritrea Navy\", 0).\n.decl Answer()\nAnswer() :- Has_n_ships(\"Republic of Korea Navy\", n_ships1), Has_n_ships(\"Eritrea Navy\", n_ships2), n_ships1 > n_ships2.\n.output Answer"]}
{"id": 569, "answer": true, "completion": ".decl Was_published_before(Novel_A:symbol, Novel_B:symbol)\nWas_published_before(\"The Great Gatsby\", \"1984\").\n.decl Answer()\nAnswer() :- Was_published_before(\"The Great Gatsby\", \"1984\").\n.output Answer", "completions": [".decl Was_published_before(Novel_A:symbol, Novel_B:symbol)\nWas_published_before(\"The Great Gatsby\", \"1984\").\n.decl Answer()\nAnswer() :- Was_published_before(\"The Great Gatsby\", \"1984\").\n.output Answer"]}
{"id": 570, "answer": true, "completion": ".decl Has_alias(Person:symbol, Alias:symbol)\nHas_alias(\"MF Doom\", \"Dr. Doom\").\n.decl Has_villain(Franchise:symbol, Villain:symbol)\nHas_villain(\"Fantastic Four\", \"Dr. Doom\").\n.decl Answer()\nAnswer() :- Has_alias(\"MF Doom\", alias), Has_villain(\"Fantastic Four\", alias).\n.output Answer", "completions": [".decl Has_alias(Person:symbol, Alias:symbol)\nHas_alias(\"MF Doom\", \"Dr. Doom\").\n.decl Has_villain(Franchise:symbol, Villain:symbol)\nHas_villain(\"Fantastic Four\", \"Dr. Doom\").\n.decl Answer()\nAnswer() :- Has_alias(\"MF Doom\", alias), Has_villain(\"Fantastic Four\", alias).\n.output Answer"]}
{"id": 571, "answer": false, "completion": ".decl Popularity(Name:symbol, Rank:float)\nPopularity(\"Michael\", 1).\n.decl Answer()\nAnswer() :- Popularity(\"Michael\", rank), rank > 100.\n.output Answer", "completions": [".decl Popularity(Name:symbol, Rank:float)\nPopularity(\"Michael\", 1).\n.decl Answer()\nAnswer() :- Popularity(\"Michael\", rank), rank > 100.\n.output Answer"]}
{"id": 572, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Noah's Ark\", 20).\nHas_height(\"Lincoln Tunnel\", 13.5).\n.decl Answer()\nAnswer() :- Has_height(\"Noah's Ark\", height1), Has_height(\"Lincoln Tunnel\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Noah's Ark\", 20).\nHas_height(\"Lincoln Tunnel\", 13.5).\n.decl Answer()\nAnswer() :- Has_height(\"Noah's Ark\", height1), Has_height(\"Lincoln Tunnel\", height2), height1 > height2.\n.output Answer"]}
{"id": 573, "answer": false, "completion": ".decl Has_dermatitis(Person:symbol)\nHas_dermatitis(\"John\").\n.decl Answer()\nAnswer() :- !Has_dermatitis(person).\n.output Answer", "completions": [".decl Has_dermatitis(Person:symbol)\nHas_dermatitis(\"John\").\n.decl Answer()\nAnswer() :- !Has_dermatitis(person).\n.output Answer"]}
{"id": 574, "answer": true, "completion": ".decl Has_heartworm_prevention(Pet:symbol)\nHas_heartworm_prevention(\"dog\").\n.decl Answer()\nAnswer() :- Has_heartworm_prevention(\"dog\"), !, Has_heartworm_prevention(\"Goofy\").\n.output Answer", "completions": [".decl Has_heartworm_prevention(Pet:symbol)\nHas_heartworm_prevention(\"dog\").\n.decl Answer()\nAnswer() :- Has_heartworm_prevention(\"dog\"), !, Has_heartworm_prevention(\"Goofy\").\n.output Answer"]}
{"id": 575, "answer": true, "completion": ".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"nickel\", 28).\nHas_atomic_number(\"mercury\", 80).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"nickel\", atomic_number1), Has_atomic_number(\"mercury\", atomic_number2), atomic_number1 > atomic_number2.\n.output Answer", "completions": [".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"nickel\", 28).\nHas_atomic_number(\"mercury\", 80).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"nickel\", atomic_number1), Has_atomic_number(\"mercury\", atomic_number2), atomic_number1 > atomic_number2.\n.output Answer"]}
{"id": 576, "answer": true, "completion": ".decl Celebrates_anniversary(Person:symbol, Spouse:symbol, Anniversary:symbol)\nCelebrates_anniversary(\"Cynthia Powell\", \"John Lennon\", \"silver\").\n.decl Answer()\nAnswer() :- Celebrates_anniversary(\"Cynthia Powell\", \"John Lennon\", \"silver\").\n.output Answer\n\n\n", "completions": [".decl Celebrates_anniversary(Person:symbol, Spouse:symbol, Anniversary:symbol)\nCelebrates_anniversary(\"Cynthia Powell\", \"John Lennon\", \"silver\").\n.decl Answer()\nAnswer() :- Celebrates_anniversary(\"Cynthia Powell\", \"John Lennon\", \"silver\").\n.output Answer\n\n\n"]}
{"id": 577, "answer": false, "completion": ".decl Has_money(Person:symbol, Money:float)\nHas_money(\"Christopher Reeve\", 0).\n.decl Answer()\nAnswer() :- Has_money(\"Christopher Reeve\", money), money > 0.\n.output Answer", "completions": [".decl Has_money(Person:symbol, Money:float)\nHas_money(\"Christopher Reeve\", 0).\n.decl Answer()\nAnswer() :- Has_money(\"Christopher Reeve\", money), money > 0.\n.output Answer"]}
{"id": 578, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Operation Barbarossa\", 1941).\nHappens_in_year(\"The Crusades\", 1095).\nHappens_in_year(\"The Crusades\", 1099).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Operation Barbarossa\", year1), Happens_in_year(\"The Crusades\", year2), year1 - year2 >= 900.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Operation Barbarossa\", 1941).\nHappens_in_year(\"The Crusades\", 1095).\nHappens_in_year(\"The Crusades\", 1099).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Operation Barbarossa\", year1), Happens_in_year(\"The Crusades\", year2), year1 - year2 >= 900.\n.output Answer"]}
{"id": 579, "answer": true, "completion": ".decl Understands(Person:symbol, Subject:symbol)\nUnderstands(\"carpenter\", \"geometry\").\n.decl Answer()\nAnswer() :- Understands(\"carpenter\", \"geometry\").\n.output Answer\n\n", "completions": [".decl Understands(Person:symbol, Subject:symbol)\nUnderstands(\"carpenter\", \"geometry\").\n.decl Answer()\nAnswer() :- Understands(\"carpenter\", \"geometry\").\n.output Answer\n\n"]}
{"id": 580, "answer": true, "completion": ".decl Has_n_pages(Book:symbol, N_pages:float)\nHas_n_pages(\"The Great Gatsby\", 180).\nHas_n_pages(\"The Raven\", 36).\n.decl Reads_at_n_pages_per_minute(Person:symbol, N_pages:float)\nReads_at_n_pages_per_minute(\"speed reader\", 300).\n.decl Answer()\nAnswer() :- Reads_at_n_pages_per_minute(\"speed reader\", n_pages1), Has_n_pages(\"The Great Gatsby\", n_pages2), Has_n_pages(\"The Raven\", n_pages3), n_pages1 >= n_pages2, n_pages1 >= n_pages3.\n.output Answer", "completions": [".decl Has_n_pages(Book:symbol, N_pages:float)\nHas_n_pages(\"The Great Gatsby\", 180).\nHas_n_pages(\"The Raven\", 36).\n.decl Reads_at_n_pages_per_minute(Person:symbol, N_pages:float)\nReads_at_n_pages_per_minute(\"speed reader\", 300).\n.decl Answer()\nAnswer() :- Reads_at_n_pages_per_minute(\"speed reader\", n_pages1), Has_n_pages(\"The Great Gatsby\", n_pages2), Has_n_pages(\"The Raven\", n_pages3), n_pages1 >= n_pages2, n_pages1 >= n_pages3.\n.output Answer"]}
{"id": 581, "answer": true, "completion": ".decl Has_rating(Movie:symbol, Rating:symbol)\nHas_rating(\"The Dark Knight\", \"PG-13\").\n.decl Answer()\nAnswer() :- Has_rating(\"The Dark Knight\", \"PG-13\").\nAnswer() :- Has_rating(\"The Dark Knight\", \"PG-13\").\n.output Answer", "completions": [".decl Has_rating(Movie:symbol, Rating:symbol)\nHas_rating(\"The Dark Knight\", \"PG-13\").\n.decl Answer()\nAnswer() :- Has_rating(\"The Dark Knight\", \"PG-13\").\nAnswer() :- Has_rating(\"The Dark Knight\", \"PG-13\").\n.output Answer"]}
{"id": 582, "answer": true, "completion": ".decl Answer()\nAnswer() :- true.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- true.\n.output Answer"]}
{"id": 583, "answer": true, "completion": ".decl Contains(Body_part:symbol, Organ:symbol)\nContains(\"torso\", \"brain\").\n.decl Answer()\nAnswer() :- Contains(\"torso\", \"brain\").\n.output Answer", "completions": [".decl Contains(Body_part:symbol, Organ:symbol)\nContains(\"torso\", \"brain\").\n.decl Answer()\nAnswer() :- Contains(\"torso\", \"brain\").\n.output Answer"]}
{"id": 584, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas celebrations\", \"December\").\n.decl Part_of(Animal:symbol, Event:symbol)\nPart_of(\"Donkeys\", \"Christmas celebrations\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas celebrations\", time), Part_of(\"Donkeys\", \"Christmas celebrations\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas celebrations\", \"December\").\n.decl Part_of(Animal:symbol, Event:symbol)\nPart_of(\"Donkeys\", \"Christmas celebrations\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas celebrations\", time), Part_of(\"Donkeys\", \"Christmas celebrations\").\n.output Answer"]}
{"id": 585, "answer": true, "completion": ".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"Heath Ledger's work on The Dark Knight\", \"Heath Ledger's death\").\n.decl Answer()\nAnswer() :- Causes(\"Heath Ledger's work on The Dark Knight\", \"Heath Ledger's death\").\n.output Answer", "completions": [".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"Heath Ledger's work on The Dark Knight\", \"Heath Ledger's death\").\n.decl Answer()\nAnswer() :- Causes(\"Heath Ledger's work on The Dark Knight\", \"Heath Ledger's death\").\n.output Answer"]}
{"id": 586, "answer": true, "completion": ".decl Roams_around(Animal:symbol, Place:symbol)\nRoams_around(\"polar bear\", \"Arctic\").\n.decl Answer()\nAnswer() :- Roams_around(\"polar bear\", \"Ancient Greece\"), !.\n.output Answer", "completions": [".decl Roams_around(Animal:symbol, Place:symbol)\nRoams_around(\"polar bear\", \"Arctic\").\n.decl Answer()\nAnswer() :- Roams_around(\"polar bear\", \"Ancient Greece\"), !.\n.output Answer"]}
{"id": 587, "answer": false, "completion": ".decl Existed_in_year(Object:symbol, Year:float)\nExisted_in_year(\"Moon Jae-in's residence\", 2017).\nExisted_in_year(\"World Trade Center\", 1973).\n.decl Answer()\nAnswer() :- Existed_in_year(\"Moon Jae-in's residence\", year1), Existed_in_year(\"World Trade Center\", year2), year1 > year2.\n.output Answer", "completions": [".decl Existed_in_year(Object:symbol, Year:float)\nExisted_in_year(\"Moon Jae-in's residence\", 2017).\nExisted_in_year(\"World Trade Center\", 1973).\n.decl Answer()\nAnswer() :- Existed_in_year(\"Moon Jae-in's residence\", year1), Existed_in_year(\"World Trade Center\", year2), year1 > year2.\n.output Answer"]}
{"id": 588, "answer": true, "completion": ".decl Needs_air(Activity:symbol)\nNeeds_air(\"parachuting\").\n.decl Answer()\nAnswer() :- !Needs_air(\"parachuting\").\n.output Answer", "completions": [".decl Needs_air(Activity:symbol)\nNeeds_air(\"parachuting\").\n.decl Answer()\nAnswer() :- !Needs_air(\"parachuting\").\n.output Answer"]}
{"id": 589, "answer": true, "completion": ".decl Has_n_seats(Court:symbol, N_seats:float)\nHas_n_seats(\"US Supreme Court\", 9).\n.decl Has_n_members(Country:symbol, N_members:float)\nHas_n_members(\"United Kingdom\", 52).\n.decl Answer()\nAnswer() :- Has_n_seats(\"US Supreme Court\", n_seats), Has_n_members(\"United Kingdom\", n_members), n_seats >= n_members.\n.output Answer", "completions": [".decl Has_n_seats(Court:symbol, N_seats:float)\nHas_n_seats(\"US Supreme Court\", 9).\n.decl Has_n_members(Country:symbol, N_members:float)\nHas_n_members(\"United Kingdom\", 52).\n.decl Answer()\nAnswer() :- Has_n_seats(\"US Supreme Court\", n_seats), Has_n_members(\"United Kingdom\", n_members), n_seats >= n_members.\n.output Answer"]}
{"id": 590, "answer": true, "completion": ".decl Is_leader(Person:symbol, Group:symbol)\nIs_leader(\"Marshall Applewhite\", \"Heaven's Gate\").\n.decl Considers_self(Person:symbol, Self_description:symbol)\nConsiders_self(\"Marshall Applewhite\", \"prophet\").\n.decl Answer()\nAnswer() :- Is_leader(\"Marshall Applewhite\", \"Heaven's Gate\"), Considers_self(\"Marshall Applewhite\", \"prophet\").\n.output Answer", "completions": [".decl Is_leader(Person:symbol, Group:symbol)\nIs_leader(\"Marshall Applewhite\", \"Heaven's Gate\").\n.decl Considers_self(Person:symbol, Self_description:symbol)\nConsiders_self(\"Marshall Applewhite\", \"prophet\").\n.decl Answer()\nAnswer() :- Is_leader(\"Marshall Applewhite\", \"Heaven's Gate\"), Considers_self(\"Marshall Applewhite\", \"prophet\").\n.output Answer"]}
{"id": 591, "answer": false, "completion": ".decl Participated_in(Region:symbol, War:symbol)\nParticipated_in(\"Angola\", \"Portugese Colonial War\").\nParticipated_in(\"Mozambique\", \"Portugese Colonial War\").\nParticipated_in(\"Guinea-Bissau\", \"Portugese Colonial War\").\nParticipated_in(\"Cape Verde\", \"Portugese Colonial War\").\n.decl Shares_language(Region1:symbol, Region2:symbol)\nShares_language(\"Angola\", \"Mozambique\").\nShares_language(\"Angola\", \"Guinea-Bissau\").\nShares_language(\"Angola\", \"Cape Verde\").\nShares_language(\"Mozambique\", \"Guinea-Bissau\").\nShares_language(\"Mozambique\", \"Cape Verde\").\nShares_language(\"Guinea-Bissau\", \"Cape Verde\").\n.decl Answer()\nAnswer() :- Participated_in(region1, \"Portugese Colonial War\"), Participated_in(region2, \"Portugese Colonial War\"), region1 != region2, Shares_language(region1, region2).\n.output Answer", "completions": [".decl Participated_in(Region:symbol, War:symbol)\nParticipated_in(\"Angola\", \"Portugese Colonial War\").\nParticipated_in(\"Mozambique\", \"Portugese Colonial War\").\nParticipated_in(\"Guinea-Bissau\", \"Portugese Colonial War\").\nParticipated_in(\"Cape Verde\", \"Portugese Colonial War\").\n.decl Shares_language(Region1:symbol, Region2:symbol)\nShares_language(\"Angola\", \"Mozambique\").\nShares_language(\"Angola\", \"Guinea-Bissau\").\nShares_language(\"Angola\", \"Cape Verde\").\nShares_language(\"Mozambique\", \"Guinea-Bissau\").\nShares_language(\"Mozambique\", \"Cape Verde\").\nShares_language(\"Guinea-Bissau\", \"Cape Verde\").\n.decl Answer()\nAnswer() :- Participated_in(region1, \"Portugese Colonial War\"), Participated_in(region2, \"Portugese Colonial War\"), region1 != region2, Shares_language(region1, region2).\n.output Answer"]}
{"id": 592, "answer": true, "completion": ".decl Appears_on(Person:symbol, TV_show:symbol)\nAppears_on(\"railroad engineer\", \"TNT\").\n.decl Answer()\nAnswer() :- Appears_on(\"railroad engineer\", \"TNT\").\n.output Answer\n\n\n", "completions": [".decl Appears_on(Person:symbol, TV_show:symbol)\nAppears_on(\"railroad engineer\", \"TNT\").\n.decl Answer()\nAnswer() :- Appears_on(\"railroad engineer\", \"TNT\").\n.output Answer\n\n\n"]}
{"id": 593, "answer": true, "completion": ".decl Is_part_of(Organization_A:symbol, Organization_B:symbol)\nIs_part_of(\"CIA\", \"Department of Defense\").\n.decl Answer()\nAnswer() :- Is_part_of(\"CIA\", \"Department of Defense\").\n.output Answer", "completions": [".decl Is_part_of(Organization_A:symbol, Organization_B:symbol)\nIs_part_of(\"CIA\", \"Department of Defense\").\n.decl Answer()\nAnswer() :- Is_part_of(\"CIA\", \"Department of Defense\").\n.output Answer"]}
{"id": 594, "answer": true, "completion": ".decl Has_n_humps(Animal:symbol, N_humps:float)\nHas_n_humps(\"Bactrian Camel\", 2).\nHas_n_humps(\"Dromedary Camel\", 1).\n.decl Answer()\nAnswer() :- Has_n_humps(animal, n_humps1), Has_n_humps(animal2, n_humps2), n_humps1 > n_humps2.\n.output Answer", "completions": [".decl Has_n_humps(Animal:symbol, N_humps:float)\nHas_n_humps(\"Bactrian Camel\", 2).\nHas_n_humps(\"Dromedary Camel\", 1).\n.decl Answer()\nAnswer() :- Has_n_humps(animal, n_humps1), Has_n_humps(animal2, n_humps2), n_humps1 > n_humps2.\n.output Answer"]}
{"id": 595, "answer": false, "completion": ".decl Has_age(Animal:symbol, Age:float)\nHas_age(\"German Shepherd\", 2).\n.decl Takes_time(Exam:symbol, Time:float)\nTakes_time(\"Abitur\", 2).\n.decl Answer()\nAnswer() :- Has_age(\"German Shepherd\", age), Takes_time(\"Abitur\", time), age > time.\n.output Answer", "completions": [".decl Has_age(Animal:symbol, Age:float)\nHas_age(\"German Shepherd\", 2).\n.decl Takes_time(Exam:symbol, Time:float)\nTakes_time(\"Abitur\", 2).\n.decl Answer()\nAnswer() :- Has_age(\"German Shepherd\", age), Takes_time(\"Abitur\", time), age > time.\n.output Answer"]}
{"id": 596, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"American Civil War\", 150).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Confederate States Army\", 150).\n.decl Answer()\nAnswer() :- Last_n_years(\"American Civil War\", n_years1), Happens_every_n_years(\"Confederate States Army\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"American Civil War\", 150).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Confederate States Army\", 150).\n.decl Answer()\nAnswer() :- Last_n_years(\"American Civil War\", n_years1), Happens_every_n_years(\"Confederate States Army\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 597, "answer": true, "completion": ".decl Has_format(Series:symbol, Format:symbol)\nHas_format(\"James Bond\", \"movie\").\nHas_format(\"Doctor Who\", \"tv show\").\n.decl Answer()\nAnswer() :- Has_format(\"James Bond\", \"tv show\").\nAnswer() :- Has_format(\"Doctor Who\", \"movie\").\n.output Answer", "completions": [".decl Has_format(Series:symbol, Format:symbol)\nHas_format(\"James Bond\", \"movie\").\nHas_format(\"Doctor Who\", \"tv show\").\n.decl Answer()\nAnswer() :- Has_format(\"James Bond\", \"tv show\").\nAnswer() :- Has_format(\"Doctor Who\", \"movie\").\n.output Answer"]}
{"id": 598, "answer": true, "completion": ".decl Popularity(Thing:symbol, Popularity:float)\nPopularity(\"computer gaming\", 0.5).\nPopularity(\"computer gaming\", 0.6).\nPopularity(\"computer gaming\", 0.7).\nPopularity(\"computer gaming\", 0.8).\nPopularity(\"computer gaming\", 0.9).\nPopularity(\"computer gaming\", 1).\nPopularity(\"computer gaming\", 1.1).\nPopularity(\"computer gaming\", 1.2).\nPopularity(\"computer gaming\", 1.3).\nPopularity(\"computer gaming\", 1.4).\nPopularity(\"computer gaming\", 1.5).\nPopularity(\"computer gaming\", 1.6).\nPopularity(\"computer gaming\", 1.7).\nPopularity(\"computer gaming\", 1.8).\nPopularity(\"computer gaming\", 1.9).\nPopularity(\"computer gaming\", 2).\nPopularity(\"computer gaming\", 2.1).\nPopularity(\"computer gaming\", 2.2).\nPopularity(\"computer gaming\", 2.3).\nPopularity(\"computer gaming\", 2.4).\nPopularity(\"computer gaming\", 2.5).\nPopularity(\"computer gaming\", 2.6).\nPopularity(\"computer gaming\", 2.7).\nPopularity(\"computer gaming\", 2.8).\nPopularity(\"computer gaming\", 2.9).\nPopularity(\"computer gaming\", 3).\nPopularity(\"computer gaming\", 3.1).\nPopularity(\"computer gaming\", 3.2).\nPopularity(\"computer gaming\", 3.3).\nPopularity(\"computer gaming\", 3.4).\nPopularity(\"computer gaming\", 3.5).\nPopularity(\"computer gaming\", 3.6).\nPopularity(\"computer gaming\", 3.7).\nPopularity(\"computer gaming\", 3.8).\nPopularity(\"computer gaming\", 3.9).\nPopularity(\"computer gaming\", 4).\nPopularity(\"computer gaming\", 4.1).\nPopularity(\"computer gaming\", 4.2).\nPopularity(\"computer gaming\", 4.3).\nPopularity(\"computer gaming\", 4.4).\nPopularity(\"computer gaming\", 4.5).\nPopularity(\"computer gaming\", 4.6).\nPopularity(\"computer gaming\", 4.7).\nPopularity(\"computer gaming\", 4.8).\nPopularity(\"computer gaming\", 4.9).\nPopularity(\"computer gaming\", 5).\nPopularity(\"computer gaming\", 5.1).\nPopularity(\"computer gaming\", 5.2).\nPopularity(\"computer gaming\", 5.3).\nPopularity(\"computer gaming\", 5.4).\nPopularity(\"computer gaming\", 5.5).\nPopularity(\"computer gaming\", 5.6).\nPopularity(\"computer gaming\", 5.7).\nPopularity(\"computer gaming\", 5.8).\nPopularity(\"computer gaming\", 5.9).\nPopularity(\"computer gaming\", 6).\nPopularity(\"computer gaming\", 6.1).\nPopularity(\"computer gaming\", 6.2).\nPopularity(\"computer gaming\", 6.3).\nPopularity(\"computer gaming\", 6.4).\nPopularity(\"computer gaming\", 6.5).\nPopularity(\"computer gaming\", 6.6).\nPopularity(\"computer gaming\", 6.7).\nPopularity(\"computer gaming\", 6.8).\nPopularity(\"computer gaming\", 6.9).\nPopularity(\"computer gaming\", 7).\nPopularity(\"computer gaming\", 7.1).\nPopularity(\"computer gaming\", 7.2).\nPopularity(\"computer gaming\", 7.3).\nPopularity(\"computer gaming\", 7.4).\nPopularity(\"computer gaming\", 7.5).\nPopularity(\"computer gaming\", 7.6).\nPopularity(\"computer gaming", "completions": [".decl Popularity(Thing:symbol, Popularity:float)\nPopularity(\"computer gaming\", 0.5).\nPopularity(\"computer gaming\", 0.6).\nPopularity(\"computer gaming\", 0.7).\nPopularity(\"computer gaming\", 0.8).\nPopularity(\"computer gaming\", 0.9).\nPopularity(\"computer gaming\", 1).\nPopularity(\"computer gaming\", 1.1).\nPopularity(\"computer gaming\", 1.2).\nPopularity(\"computer gaming\", 1.3).\nPopularity(\"computer gaming\", 1.4).\nPopularity(\"computer gaming\", 1.5).\nPopularity(\"computer gaming\", 1.6).\nPopularity(\"computer gaming\", 1.7).\nPopularity(\"computer gaming\", 1.8).\nPopularity(\"computer gaming\", 1.9).\nPopularity(\"computer gaming\", 2).\nPopularity(\"computer gaming\", 2.1).\nPopularity(\"computer gaming\", 2.2).\nPopularity(\"computer gaming\", 2.3).\nPopularity(\"computer gaming\", 2.4).\nPopularity(\"computer gaming\", 2.5).\nPopularity(\"computer gaming\", 2.6).\nPopularity(\"computer gaming\", 2.7).\nPopularity(\"computer gaming\", 2.8).\nPopularity(\"computer gaming\", 2.9).\nPopularity(\"computer gaming\", 3).\nPopularity(\"computer gaming\", 3.1).\nPopularity(\"computer gaming\", 3.2).\nPopularity(\"computer gaming\", 3.3).\nPopularity(\"computer gaming\", 3.4).\nPopularity(\"computer gaming\", 3.5).\nPopularity(\"computer gaming\", 3.6).\nPopularity(\"computer gaming\", 3.7).\nPopularity(\"computer gaming\", 3.8).\nPopularity(\"computer gaming\", 3.9).\nPopularity(\"computer gaming\", 4).\nPopularity(\"computer gaming\", 4.1).\nPopularity(\"computer gaming\", 4.2).\nPopularity(\"computer gaming\", 4.3).\nPopularity(\"computer gaming\", 4.4).\nPopularity(\"computer gaming\", 4.5).\nPopularity(\"computer gaming\", 4.6).\nPopularity(\"computer gaming\", 4.7).\nPopularity(\"computer gaming\", 4.8).\nPopularity(\"computer gaming\", 4.9).\nPopularity(\"computer gaming\", 5).\nPopularity(\"computer gaming\", 5.1).\nPopularity(\"computer gaming\", 5.2).\nPopularity(\"computer gaming\", 5.3).\nPopularity(\"computer gaming\", 5.4).\nPopularity(\"computer gaming\", 5.5).\nPopularity(\"computer gaming\", 5.6).\nPopularity(\"computer gaming\", 5.7).\nPopularity(\"computer gaming\", 5.8).\nPopularity(\"computer gaming\", 5.9).\nPopularity(\"computer gaming\", 6).\nPopularity(\"computer gaming\", 6.1).\nPopularity(\"computer gaming\", 6.2).\nPopularity(\"computer gaming\", 6.3).\nPopularity(\"computer gaming\", 6.4).\nPopularity(\"computer gaming\", 6.5).\nPopularity(\"computer gaming\", 6.6).\nPopularity(\"computer gaming\", 6.7).\nPopularity(\"computer gaming\", 6.8).\nPopularity(\"computer gaming\", 6.9).\nPopularity(\"computer gaming\", 7).\nPopularity(\"computer gaming\", 7.1).\nPopularity(\"computer gaming\", 7.2).\nPopularity(\"computer gaming\", 7.3).\nPopularity(\"computer gaming\", 7.4).\nPopularity(\"computer gaming\", 7.5).\nPopularity(\"computer gaming\", 7.6).\nPopularity(\"computer gaming"]}
{"id": 599, "answer": false, "completion": ".decl Grows_in_continent(Plant:symbol, Continent:symbol)\nGrows_in_continent(\"potato\", \"Europe\").\n.decl Answer()\nAnswer() :- Grows_in_continent(\"potato\", \"Europe\").\n.output Answer\n\n", "completions": [".decl Grows_in_continent(Plant:symbol, Continent:symbol)\nGrows_in_continent(\"potato\", \"Europe\").\n.decl Answer()\nAnswer() :- Grows_in_continent(\"potato\", \"Europe\").\n.output Answer\n\n"]}
{"id": 600, "answer": true, "completion": ".decl Has_bacteria(Food:symbol, Bacteria:symbol)\nHas_bacteria(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Has_bacteria(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.output Answer", "completions": [".decl Has_bacteria(Food:symbol, Bacteria:symbol)\nHas_bacteria(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Has_bacteria(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.output Answer"]}
{"id": 601, "answer": false, "completion": ".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"compact disc\", 1982).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"George Washington\", 1799).\n.decl Answer()\nAnswer() :- Invented_in_year(\"compact disc\", year1), Died_in_year(\"George Washington\", year2), year1 > year2.\n.output Answer", "completions": [".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"compact disc\", 1982).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"George Washington\", 1799).\n.decl Answer()\nAnswer() :- Invented_in_year(\"compact disc\", year1), Died_in_year(\"George Washington\", year2), year1 > year2.\n.output Answer"]}
{"id": 602, "answer": false, "completion": ".decl Is_soup(Food:symbol)\nIs_soup(\"chicken soup\").\nIs_soup(\"tomato soup\").\nIs_soup(\"shoe soup\").\n.decl Is_innocuous(Food:symbol)\nIs_innocuous(\"chicken soup\").\nIs_innocuous(\"tomato soup\").\n.decl Answer()\nAnswer() :- Is_soup(\"shoe soup\"), Is_innocuous(\"shoe soup\").\n.output Answer", "completions": [".decl Is_soup(Food:symbol)\nIs_soup(\"chicken soup\").\nIs_soup(\"tomato soup\").\nIs_soup(\"shoe soup\").\n.decl Is_innocuous(Food:symbol)\nIs_innocuous(\"chicken soup\").\nIs_innocuous(\"tomato soup\").\n.decl Answer()\nAnswer() :- Is_soup(\"shoe soup\"), Is_innocuous(\"shoe soup\").\n.output Answer"]}
{"id": 603, "answer": true, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Moscow Kremlin\", 27.5).\nHas_area(\"Disney Land\", 85).\n.decl Answer()\nAnswer() :- Has_area(\"Moscow Kremlin\", area1), Has_area(\"Disney Land\", area2), area1 < area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Moscow Kremlin\", 27.5).\nHas_area(\"Disney Land\", 85).\n.decl Answer()\nAnswer() :- Has_area(\"Moscow Kremlin\", area1), Has_area(\"Disney Land\", area2), area1 < area2.\n.output Answer"]}
{"id": 604, "answer": true, "completion": ".decl Performed_together(Person1:symbol, Person2:symbol)\nPerformed_together(\"Robert Plant\", \"Ernest Chataway\").\n.decl Lead_singer(Person:symbol, Band:symbol)\nLead_singer(\"Robert Plant\", \"Led Zeppelin\").\n.decl Answer()\nAnswer() :- Lead_singer(person, \"Led Zeppelin\"), Performed_together(person, \"Ernest Chataway\").\n.output Answer", "completions": [".decl Performed_together(Person1:symbol, Person2:symbol)\nPerformed_together(\"Robert Plant\", \"Ernest Chataway\").\n.decl Lead_singer(Person:symbol, Band:symbol)\nLead_singer(\"Robert Plant\", \"Led Zeppelin\").\n.decl Answer()\nAnswer() :- Lead_singer(person, \"Led Zeppelin\"), Performed_together(person, \"Ernest Chataway\").\n.output Answer"]}
{"id": 605, "answer": true, "completion": ".decl Was_invented(Thing:symbol, Year:float)\nWas_invented(\"internet\", 1969).\n.decl Was_born(Person:symbol, Year:float)\nWas_born(\"P. G. Wodehouse\", 1881).\n.decl Answer()\nAnswer() :- Was_invented(thing, year1), Was_born(\"P. G. Wodehouse\", year2), year1 > year2.\n.output Answer", "completions": [".decl Was_invented(Thing:symbol, Year:float)\nWas_invented(\"internet\", 1969).\n.decl Was_born(Person:symbol, Year:float)\nWas_born(\"P. G. Wodehouse\", 1881).\n.decl Answer()\nAnswer() :- Was_invented(thing, year1), Was_born(\"P. G. Wodehouse\", year2), year1 > year2.\n.output Answer"]}
{"id": 606, "answer": true, "completion": ".decl Runs_for(Person:symbol, Position:symbol)\nRuns_for(\"Harvey Milk\", \"San Francisco Board of Supervisors\").\n.decl Answer()\nAnswer() :- Runs_for(\"Harvey Milk\", \"governor\").\n.output Answer", "completions": [".decl Runs_for(Person:symbol, Position:symbol)\nRuns_for(\"Harvey Milk\", \"San Francisco Board of Supervisors\").\n.decl Answer()\nAnswer() :- Runs_for(\"Harvey Milk\", \"governor\").\n.output Answer"]}
{"id": 607, "answer": true, "completion": ".decl Is_vegan(Person:symbol)\nIs_vegan(\"John Lennon\").\n.decl Is_natural(Object:symbol)\nIs_natural(\"bongo drum\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Is_natural(\"bongo drum\").\n.output Answer", "completions": [".decl Is_vegan(Person:symbol)\nIs_vegan(\"John Lennon\").\n.decl Is_natural(Object:symbol)\nIs_natural(\"bongo drum\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Is_natural(\"bongo drum\").\n.output Answer"]}
{"id": 608, "answer": true, "completion": ".decl Makes_drink(Bartender:symbol, Person:symbol)\nMakes_drink(\"responsible bartender\", \"Millie Bobby Brown\").\n.decl Answer()\nAnswer() :- Makes_drink(bartender, \"Millie Bobby Brown\").\n.output Answer", "completions": [".decl Makes_drink(Bartender:symbol, Person:symbol)\nMakes_drink(\"responsible bartender\", \"Millie Bobby Brown\").\n.decl Answer()\nAnswer() :- Makes_drink(bartender, \"Millie Bobby Brown\").\n.output Answer"]}
{"id": 609, "answer": true, "completion": ".decl Has_chromosomes(Organism:symbol, N_chromosomes:float)\nHas_chromosomes(\"gorilla\", 24).\nHas_chromosomes(\"human\", 46).\n.decl Answer()\nAnswer() :- Has_chromosomes(\"gorilla\", n_chromosomes1), Has_chromosomes(\"human\", n_chromosomes2), n_chromosomes1 >= n_chromosomes2 - 2, n_chromosomes1 <= n_chromosomes2 + 2.\n.output Answer", "completions": [".decl Has_chromosomes(Organism:symbol, N_chromosomes:float)\nHas_chromosomes(\"gorilla\", 24).\nHas_chromosomes(\"human\", 46).\n.decl Answer()\nAnswer() :- Has_chromosomes(\"gorilla\", n_chromosomes1), Has_chromosomes(\"human\", n_chromosomes2), n_chromosomes1 >= n_chromosomes2 - 2, n_chromosomes1 <= n_chromosomes2 + 2.\n.output Answer"]}
{"id": 610, "answer": true, "completion": ".decl Makes_money(Person:symbol, Money:float)\nMakes_money(\"Rudyard Kipling\", 100000).\nMakes_money(\"Disney\", 1000000).\n.decl Answer()\nAnswer() :- Makes_money(\"Rudyard Kipling\", money1), Makes_money(\"Disney\", money2), money1 < money2.\n.output Answer", "completions": [".decl Makes_money(Person:symbol, Money:float)\nMakes_money(\"Rudyard Kipling\", 100000).\nMakes_money(\"Disney\", 1000000).\n.decl Answer()\nAnswer() :- Makes_money(\"Rudyard Kipling\", money1), Makes_money(\"Disney\", money2), money1 < money2.\n.output Answer"]}
{"id": 611, "answer": false, "completion": ".decl Proposed_theory(Person:symbol, Theory:symbol)\nProposed_theory(\"Lamarck\", \"inheritance of acquired characteristics\").\nProposed_theory(\"Darwin\", \"natural selection\").\n.decl Answer()\nAnswer() :- Proposed_theory(\"Lamarck\", \"inheritance of acquired characteristics\"), Proposed_theory(\"Darwin\", \"natural selection\").\n.output Answer", "completions": [".decl Proposed_theory(Person:symbol, Theory:symbol)\nProposed_theory(\"Lamarck\", \"inheritance of acquired characteristics\").\nProposed_theory(\"Darwin\", \"natural selection\").\n.decl Answer()\nAnswer() :- Proposed_theory(\"Lamarck\", \"inheritance of acquired characteristics\"), Proposed_theory(\"Darwin\", \"natural selection\").\n.output Answer"]}
{"id": 612, "answer": true, "completion": ".decl Can_reproduce(Animal:symbol)\nCan_reproduce(\"hamster\").\nCan_reproduce(\"bird\").\nCan_reproduce(\"snake\").\n.decl Answer()\nAnswer() :- Can_reproduce(animal), Can_reproduce(animal2), animal != animal2.\nAnswer() :- Can_reproduce(animal), !Can_reproduce(animal2), animal != animal2.\n.output Answer", "completions": [".decl Can_reproduce(Animal:symbol)\nCan_reproduce(\"hamster\").\nCan_reproduce(\"bird\").\nCan_reproduce(\"snake\").\n.decl Answer()\nAnswer() :- Can_reproduce(animal), Can_reproduce(animal2), animal != animal2.\nAnswer() :- Can_reproduce(animal), !Can_reproduce(animal2), animal != animal2.\n.output Answer"]}
{"id": 613, "answer": true, "completion": ".decl Has_pain_tolerance(Person:symbol, Pain_tolerance:float)\nHas_pain_tolerance(\"guitarist\", 0.8).\n.decl Answer()\nAnswer() :- Has_pain_tolerance(\"guitarist\", pain_tolerance), pain_tolerance > 0.5.\n.output Answer", "completions": [".decl Has_pain_tolerance(Person:symbol, Pain_tolerance:float)\nHas_pain_tolerance(\"guitarist\", 0.8).\n.decl Answer()\nAnswer() :- Has_pain_tolerance(\"guitarist\", pain_tolerance), pain_tolerance > 0.5.\n.output Answer"]}
{"id": 614, "answer": true, "completion": ".decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Methuselah\", 969).\n.decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Common Era\", 2020).\n.decl Answer()\nAnswer() :- Lasted_for_n_years(\"Methuselah\", n_years1), Lasted_for_n_years(\"Common Era\", n_years2), n_years1 > n_years2.\n.output Answer", "completions": [".decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Methuselah\", 969).\n.decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Common Era\", 2020).\n.decl Answer()\nAnswer() :- Lasted_for_n_years(\"Methuselah\", n_years1), Lasted_for_n_years(\"Common Era\", n_years2), n_years1 > n_years2.\n.output Answer"]}
{"id": 615, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Bill Gates\", 100).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Bill Gates\", net_worth), net_worth >= 900000.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Bill Gates\", 100).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Bill Gates\", net_worth), net_worth >= 900000.\n.output Answer"]}
{"id": 616, "answer": true, "completion": ".decl Has_fans(Person:symbol, Fans:symbol)\nHas_fans(\"Jonathan Larson\", \"Broadway fans\").\n.decl Is_aware_of(Fans:symbol, Topic:symbol)\nIs_aware_of(\"Broadway fans\", \"HIV\").\n.decl Answer()\nAnswer() :- Has_fans(\"Jonathan Larson\", fans), Is_aware_of(fans, \"HIV\").\n.output Answer\n\n", "completions": [".decl Has_fans(Person:symbol, Fans:symbol)\nHas_fans(\"Jonathan Larson\", \"Broadway fans\").\n.decl Is_aware_of(Fans:symbol, Topic:symbol)\nIs_aware_of(\"Broadway fans\", \"HIV\").\n.decl Answer()\nAnswer() :- Has_fans(\"Jonathan Larson\", fans), Is_aware_of(fans, \"HIV\").\n.output Answer\n\n"]}
{"id": 617, "answer": true, "completion": ".decl Named_after(Month:symbol, Mythology:symbol)\nNamed_after(\"June\", \"Roman mythology\").\n.decl Answer()\nAnswer() :- Named_after(\"June\", \"Roman mythology\").\n.output Answer", "completions": [".decl Named_after(Month:symbol, Mythology:symbol)\nNamed_after(\"June\", \"Roman mythology\").\n.decl Answer()\nAnswer() :- Named_after(\"June\", \"Roman mythology\").\n.output Answer"]}
{"id": 618, "answer": true, "completion": ".decl Has_color(Plant:symbol, Color:symbol)\nHas_color(\"rosemary\", \"green\").\nHas_color(\"lavender\", \"purple\").\n.decl Answer()\nAnswer() :- Has_color(\"rosemary\", color1), Has_color(\"lavender\", color2), color1 != color2.\n.output Answer", "completions": [".decl Has_color(Plant:symbol, Color:symbol)\nHas_color(\"rosemary\", \"green\").\nHas_color(\"lavender\", \"purple\").\n.decl Answer()\nAnswer() :- Has_color(\"rosemary\", color1), Has_color(\"lavender\", color2), color1 != color2.\n.output Answer"]}
{"id": 619, "answer": true, "completion": ".decl Has_color(Pen:symbol, Color:symbol)\nHas_color(\"black pen\", \"black\").\nHas_color(\"red pen\", \"red\").\nHas_color(\"blue pen\", \"blue\").\nHas_color(\"green pen\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"black pen\", \"black\").\nAnswer() :- Has_color(\"red pen\", \"red\").\nAnswer() :- Has_color(\"blue pen\", \"blue\").\nAnswer() :- Has_color(\"green pen\", \"green\").\n.output Answer", "completions": [".decl Has_color(Pen:symbol, Color:symbol)\nHas_color(\"black pen\", \"black\").\nHas_color(\"red pen\", \"red\").\nHas_color(\"blue pen\", \"blue\").\nHas_color(\"green pen\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"black pen\", \"black\").\nAnswer() :- Has_color(\"red pen\", \"red\").\nAnswer() :- Has_color(\"blue pen\", \"blue\").\nAnswer() :- Has_color(\"green pen\", \"green\").\n.output Answer"]}
{"id": 620, "answer": true, "completion": ".decl Is_on_coast(City:symbol, Coast:symbol)\nIs_on_coast(\"Miami\", \"East Coast\").\n.decl Answer()\nAnswer() :- Is_on_coast(\"Miami\", \"West Coast\").\n.output Answer", "completions": [".decl Is_on_coast(City:symbol, Coast:symbol)\nIs_on_coast(\"Miami\", \"East Coast\").\n.decl Answer()\nAnswer() :- Is_on_coast(\"Miami\", \"West Coast\").\n.output Answer"]}
{"id": 621, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Stephen King\", 71).\n.decl Has_minimum_age(Organization:symbol, Age:float)\nHas_minimum_age(\"NASA Astronaut Corps\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"Stephen King\", age1), Has_minimum_age(\"NASA Astronaut Corps\", age2), age1 >= age2.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Stephen King\", 71).\n.decl Has_minimum_age(Organization:symbol, Age:float)\nHas_minimum_age(\"NASA Astronaut Corps\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"Stephen King\", age1), Has_minimum_age(\"NASA Astronaut Corps\", age2), age1 >= age2.\n.output Answer"]}
{"id": 622, "answer": false, "completion": ".decl Has_longevity(Person:symbol, Longevity:float)\nHas_longevity(\"Richard III\", 32).\nHas_longevity(\"Richard III's father\", 33).\n.decl Answer()\nAnswer() :- Has_longevity(\"Richard III\", longevity1), Has_longevity(\"Richard III's father\", longevity2), longevity1 < longevity2.\n.output Answer", "completions": [".decl Has_longevity(Person:symbol, Longevity:float)\nHas_longevity(\"Richard III\", 32).\nHas_longevity(\"Richard III's father\", 33).\n.decl Answer()\nAnswer() :- Has_longevity(\"Richard III\", longevity1), Has_longevity(\"Richard III's father\", longevity2), longevity1 < longevity2.\n.output Answer"]}
{"id": 623, "answer": false, "completion": ".decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"Starbucks passion tea\", \"ginger\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Starbucks passion tea\", \"ginger\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"Starbucks passion tea\", \"ginger\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Starbucks passion tea\", \"ginger\").\n.output Answer\n\n"]}
{"id": 624, "answer": false, "completion": ".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Dustin Hoffman\", \"Jewish\").\n.decl Answer()\nAnswer() :- Has_religion(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.output Answer", "completions": [".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Dustin Hoffman\", \"Jewish\").\n.decl Answer()\nAnswer() :- Has_religion(\"Dustin Hoffman\", \"B'nei Yisrael\").\n.output Answer"]}
{"id": 625, "answer": true, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Berlin Olympic Stadium\", 100000).\nHas_capacity(\"Super Bowl XLVIII\", 82000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Berlin Olympic Stadium\", capacity1), Has_capacity(\"Super Bowl XLVIII\", capacity2), capacity1 < capacity2.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Berlin Olympic Stadium\", 100000).\nHas_capacity(\"Super Bowl XLVIII\", 82000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Berlin Olympic Stadium\", capacity1), Has_capacity(\"Super Bowl XLVIII\", capacity2), capacity1 < capacity2.\n.output Answer"]}
{"id": 626, "answer": true, "completion": ".decl Declines(Person:symbol, Offer:symbol)\nDeclines(\"Cookie Monster\", \"free Keebler products\").\n.decl Answer()\nAnswer() :- Declines(\"Cookie Monster\", \"free Keebler products\").\n.output Answer", "completions": [".decl Declines(Person:symbol, Offer:symbol)\nDeclines(\"Cookie Monster\", \"free Keebler products\").\n.decl Answer()\nAnswer() :- Declines(\"Cookie Monster\", \"free Keebler products\").\n.output Answer"]}
{"id": 627, "answer": true, "completion": ".decl Supports(Person:symbol, Belief:symbol)\nSupports(\"Billy Graham\", \"Christianity\").\n.decl Answer()\nAnswer() :- Supports(\"Billy Graham\", \"agnosticism\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Belief:symbol)\nSupports(\"Billy Graham\", \"Christianity\").\n.decl Answer()\nAnswer() :- Supports(\"Billy Graham\", \"agnosticism\").\n.output Answer"]}
{"id": 628, "answer": false, "completion": ".decl Has_fine_motor_control_issues(Person:symbol)\nHas_fine_motor_control_issues(\"person with cerebral palsy\").\nHas_fine_motor_control_issues(\"person with multiple sclerosis\").\nHas_fine_motor_control_issues(\"person with cerebral stroke\").\n.decl Answer()\nAnswer() :- Has_fine_motor_control_issues(person).", "completions": [".decl Has_fine_motor_control_issues(Person:symbol)\nHas_fine_motor_control_issues(\"person with cerebral palsy\").\nHas_fine_motor_control_issues(\"person with multiple sclerosis\").\nHas_fine_motor_control_issues(\"person with cerebral stroke\").\n.decl Answer()\nAnswer() :- Has_fine_motor_control_issues(person)."]}
{"id": 629, "answer": true, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"winter\", \"August\").\nHappens_in_month(\"winter\", \"December\").\nHappens_in_month(\"winter\", \"January\").\nHappens_in_month(\"winter\", \"February\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"winter\", \"August\").\n.output Answer", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"winter\", \"August\").\nHappens_in_month(\"winter\", \"December\").\nHappens_in_month(\"winter\", \"January\").\nHappens_in_month(\"winter\", \"February\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"winter\", \"August\").\n.output Answer"]}
{"id": 630, "answer": false, "completion": ".decl Requires_camera(Event:symbol)\nRequires_camera(\"video surveillance\").\n.decl Answer()\nAnswer() :- Requires_camera(\"video surveillance\").\n.output Answer", "completions": [".decl Requires_camera(Event:symbol)\nRequires_camera(\"video surveillance\").\n.decl Answer()\nAnswer() :- Requires_camera(\"video surveillance\").\n.output Answer"]}
{"id": 631, "answer": true, "completion": ".decl Has_viewers(Youtube_channel:symbol, N_viewers:float)\nHas_viewers(\"Audiobook Recommendations\", 100).\n.decl Has_subscribers(Youtube_channel:symbol, N_subscribers:float)\nHas_subscribers(\"Audiobook Recommendations\", 100).\n.decl Answer()\nAnswer() :- Has_viewers(\"Audiobook Recommendations\", viewers), Has_subscribers(\"Audiobook Recommendations\", subscribers), viewers > subscribers.\n.output Answer", "completions": [".decl Has_viewers(Youtube_channel:symbol, N_viewers:float)\nHas_viewers(\"Audiobook Recommendations\", 100).\n.decl Has_subscribers(Youtube_channel:symbol, N_subscribers:float)\nHas_subscribers(\"Audiobook Recommendations\", 100).\n.decl Answer()\nAnswer() :- Has_viewers(\"Audiobook Recommendations\", viewers), Has_subscribers(\"Audiobook Recommendations\", subscribers), viewers > subscribers.\n.output Answer"]}
{"id": 632, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Columbia 11 landing\", \"February 1, 2003\").\nHappens_in_time(\"Christmas carols\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"February\", \"winter\").\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Columbia 11 landing\", time), Happens_in_time(\"Christmas carols\", season), In_season(time, season).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Columbia 11 landing\", \"February 1, 2003\").\nHappens_in_time(\"Christmas carols\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"February\", \"winter\").\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Columbia 11 landing\", time), Happens_in_time(\"Christmas carols\", season), In_season(time, season).\n.output Answer"]}
{"id": 633, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Middle Ages\", 1000).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"English king\", 20).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"English king\", n_years1), Last_n_years(\"Middle Ages\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Middle Ages\", 1000).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"English king\", 20).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"English king\", n_years1), Last_n_years(\"Middle Ages\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 634, "answer": true, "completion": ".decl Requires(Object:symbol, Tool:symbol)\nRequires(\"frigate\", \"ropes\").\n.decl Answer()\nAnswer() :- Requires(\"frigate\", \"ropes\").\n.output Answer\n\n", "completions": [".decl Requires(Object:symbol, Tool:symbol)\nRequires(\"frigate\", \"ropes\").\n.decl Answer()\nAnswer() :- Requires(\"frigate\", \"ropes\").\n.output Answer\n\n"]}
{"id": 635, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Who concert\", 1).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"international space station\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"international space station\", n_days1), Last_n_days(\"Who concert\", n_days2),  n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Who concert\", 1).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"international space station\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"international space station\", n_days1), Last_n_days(\"Who concert\", n_days2),  n_days1 <= n_days2.\n.output Answer"]}
{"id": 636, "answer": true, "completion": ".decl Treats(Doctor:symbol, Problem:symbol)\nTreats(\"dentist\", \"tooth decay\").\nTreats(\"dentist\", \"cavities\").\nTreats(\"dentist\", \"bleeding gums\").\n.decl Answer()\nAnswer() :- Treats(\"dentist\", \"Bluetooth problems\").\n.output Answer", "completions": [".decl Treats(Doctor:symbol, Problem:symbol)\nTreats(\"dentist\", \"tooth decay\").\nTreats(\"dentist\", \"cavities\").\nTreats(\"dentist\", \"bleeding gums\").\n.decl Answer()\nAnswer() :- Treats(\"dentist\", \"Bluetooth problems\").\n.output Answer"]}
{"id": 637, "answer": false, "completion": ".decl Enjoys(Person:symbol, Food:symbol)\nEnjoys(\"John\", \"buffalo wings\").\nEnjoys(\"John\", \"capsaicin\").\n.decl Answer()\nAnswer() :- Enjoys(person, \"buffalo wings\"), Enjoys(person, \"capsaicin\").\n.output Answer\n\n", "completions": [".decl Enjoys(Person:symbol, Food:symbol)\nEnjoys(\"John\", \"buffalo wings\").\nEnjoys(\"John\", \"capsaicin\").\n.decl Answer()\nAnswer() :- Enjoys(person, \"buffalo wings\"), Enjoys(person, \"capsaicin\").\n.output Answer\n\n"]}
{"id": 638, "answer": false, "completion": ".decl Is_taller_than(Mountain:symbol, Height:float)\nIs_taller_than(\"Mount Wycheproof\", 4.1).\n.decl Is_taller_than(Person:symbol, Height:float)\nIs_taller_than(\"Edmund Hillary\", 1.93).\n.decl Answer()\nAnswer() :- Is_taller_than(\"Mount Wycheproof\", height1), Is_taller_than(\"Edmund Hillary\", height2), height1 <= height2.\n.output Answer", "completions": [".decl Is_taller_than(Mountain:symbol, Height:float)\nIs_taller_than(\"Mount Wycheproof\", 4.1).\n.decl Is_taller_than(Person:symbol, Height:float)\nIs_taller_than(\"Edmund Hillary\", 1.93).\n.decl Answer()\nAnswer() :- Is_taller_than(\"Mount Wycheproof\", height1), Is_taller_than(\"Edmund Hillary\", height2), height1 <= height2.\n.output Answer"]}
{"id": 639, "answer": false, "completion": ".decl Takes_taxi(Person:symbol, Location:symbol)\nTakes_taxi(\"Tokyo\", \"The Metropolitan Museum of Art\").\n.decl Answer()\nAnswer() :- Takes_taxi(\"Tokyo\", \"The Metropolitan Museum of Art\").\n.output Answer", "completions": [".decl Takes_taxi(Person:symbol, Location:symbol)\nTakes_taxi(\"Tokyo\", \"The Metropolitan Museum of Art\").\n.decl Answer()\nAnswer() :- Takes_taxi(\"Tokyo\", \"The Metropolitan Museum of Art\").\n.output Answer"]}
{"id": 640, "answer": false, "completion": ".decl Oversees(Department:symbol, Service:symbol)\nOversees(\"United States Department of Education\", \"education\").\nOversees(\"United States Department of Education\", \"financial aid\").\nOversees(\"United States Department of Education\", \"research\").\nOversees(\"United States Department of Education\", \"statistics\").\nOversees(\"United States Department of Education\", \"data\").\nOversees(\"United States Department of Education\", \"information\").\nOversees(\"United States Department of Education\", \"policy studies\").\nOversees(\"United States Department of Education\", \"evaluation\").\nOversees(\"United States Department of Education\", \"technical assistance\").\nOversees(\"United States Department of Education\", \"training\").\nOversees(\"United States Department of Education\", \"community outreach\").\nOversees(\"United States Department of Education\", \"customer service\").\nOversees(\"United States Department of Education\", \"public affairs\").\nOversees(\"United States Department of Education\", \"legislative affairs\").\nOversees(\"United States Department of Education\", \"regulatory affairs\").\nOversees(\"United States Department of Education\", \"general counsel\").\nOversees(\"United States Department of Education\", \"inspector general\").\nOversees(\"United States Department of Education\", \"budget\").\nOversees(\"United States Department of Education\", \"accounting\").\nOversees(\"United States Department of Education\", \"procurement\").\nOversees(\"United States Department of Education\", \"human resources\").\nOversees(\"United States Department of Education\", \"information technology\").\nOversees(\"United States Department of Education\", \"property management\").\nOversees(\"United States Department of Education\", \"security\").\nOversees(\"United States Department of Education\", \"facilities\").\nOversees(\"United States Department of Education\", \"vehicle fleet management\").\nOversees(\"United States Department of Education\", \"mail\").\nOversees(\"United States Department of Education\", \"printing\").\nOversees(\"United States Department of Education\", \"supplies\").\nOversees(\"United States Department of Education\", \"equipment\").\nOversees(\"United States Department of Education\", \"food services\").\nOversees(\"United States Department of Education\", \"child care\").\nOversees(\"United States Department of Education\", \"parking\").\nOversees(\"United States Department of Education\", \"transportation\").\nOversees(\"United States Department of Education\", \"travel\").\nOversees(\"United States Department of Education\", \"real property\").\nOversees(\"United States Department of Education\", \"acquisition\").\nOversees(\"United States Department of Education\", \"disposal\").\nOversees(\"United States Department of Education\", \"leasing\").\nOversees(\"United States Department of Education\", \"space management\").\nOversees(\"United States Department of Education\", \"construction\").\nOversees(\"United States Department of Education\", \"environmental management\").\nOversees(\"United States Department of Education\", \"safety\").\nOversees(\"United States Department of Education\", \"health\").\nOversees(\"United States Department of Education\", \"emergency management\").\nOversees(\"United States Department of Education\", \"fire protection\").\nOversees(\"United States Department of Education\", \"national security\").\nOversees(\"United States Department of Education\", \"counterterrorism\").\nOversees(\"United States Department of Education\", \"intelligence\").\nOversees(\"United States Department of Education\", \"border security\").\nOversees(\"United States Department of Education\", \"cybersecurity\").\nOversees(\"United States Department of Education\", \"law enforcement\").\nOversees(\"United", "completions": [".decl Oversees(Department:symbol, Service:symbol)\nOversees(\"United States Department of Education\", \"education\").\nOversees(\"United States Department of Education\", \"financial aid\").\nOversees(\"United States Department of Education\", \"research\").\nOversees(\"United States Department of Education\", \"statistics\").\nOversees(\"United States Department of Education\", \"data\").\nOversees(\"United States Department of Education\", \"information\").\nOversees(\"United States Department of Education\", \"policy studies\").\nOversees(\"United States Department of Education\", \"evaluation\").\nOversees(\"United States Department of Education\", \"technical assistance\").\nOversees(\"United States Department of Education\", \"training\").\nOversees(\"United States Department of Education\", \"community outreach\").\nOversees(\"United States Department of Education\", \"customer service\").\nOversees(\"United States Department of Education\", \"public affairs\").\nOversees(\"United States Department of Education\", \"legislative affairs\").\nOversees(\"United States Department of Education\", \"regulatory affairs\").\nOversees(\"United States Department of Education\", \"general counsel\").\nOversees(\"United States Department of Education\", \"inspector general\").\nOversees(\"United States Department of Education\", \"budget\").\nOversees(\"United States Department of Education\", \"accounting\").\nOversees(\"United States Department of Education\", \"procurement\").\nOversees(\"United States Department of Education\", \"human resources\").\nOversees(\"United States Department of Education\", \"information technology\").\nOversees(\"United States Department of Education\", \"property management\").\nOversees(\"United States Department of Education\", \"security\").\nOversees(\"United States Department of Education\", \"facilities\").\nOversees(\"United States Department of Education\", \"vehicle fleet management\").\nOversees(\"United States Department of Education\", \"mail\").\nOversees(\"United States Department of Education\", \"printing\").\nOversees(\"United States Department of Education\", \"supplies\").\nOversees(\"United States Department of Education\", \"equipment\").\nOversees(\"United States Department of Education\", \"food services\").\nOversees(\"United States Department of Education\", \"child care\").\nOversees(\"United States Department of Education\", \"parking\").\nOversees(\"United States Department of Education\", \"transportation\").\nOversees(\"United States Department of Education\", \"travel\").\nOversees(\"United States Department of Education\", \"real property\").\nOversees(\"United States Department of Education\", \"acquisition\").\nOversees(\"United States Department of Education\", \"disposal\").\nOversees(\"United States Department of Education\", \"leasing\").\nOversees(\"United States Department of Education\", \"space management\").\nOversees(\"United States Department of Education\", \"construction\").\nOversees(\"United States Department of Education\", \"environmental management\").\nOversees(\"United States Department of Education\", \"safety\").\nOversees(\"United States Department of Education\", \"health\").\nOversees(\"United States Department of Education\", \"emergency management\").\nOversees(\"United States Department of Education\", \"fire protection\").\nOversees(\"United States Department of Education\", \"national security\").\nOversees(\"United States Department of Education\", \"counterterrorism\").\nOversees(\"United States Department of Education\", \"intelligence\").\nOversees(\"United States Department of Education\", \"border security\").\nOversees(\"United States Department of Education\", \"cybersecurity\").\nOversees(\"United States Department of Education\", \"law enforcement\").\nOversees(\"United"]}
{"id": 641, "answer": false, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"mail carrier\", \"mail carrier\").\n.decl Needs_uniform(Job:symbol, Uniform:symbol)\nNeeds_uniform(\"mail carrier\", \"uniform\").\n.decl Answer()\nAnswer() :- Has_job(person, \"mail carrier\"), Needs_uniform(\"mail carrier\", uniform).\n.output Answer\n\n", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"mail carrier\", \"mail carrier\").\n.decl Needs_uniform(Job:symbol, Uniform:symbol)\nNeeds_uniform(\"mail carrier\", \"uniform\").\n.decl Answer()\nAnswer() :- Has_job(person, \"mail carrier\"), Needs_uniform(\"mail carrier\", uniform).\n.output Answer\n\n"]}
{"id": 642, "answer": true, "completion": ".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Bill Gates\", \"Doctorate\").\n.decl Is_age(Person:symbol, Age:float)\nIs_age(\"Bill Gates\", 21).\n.decl Answer()\nAnswer() :- Has_degree(\"Bill Gates\", \"Doctorate\"), Is_age(\"Bill Gates\", age), age < 21.\n.output Answer", "completions": [".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Bill Gates\", \"Doctorate\").\n.decl Is_age(Person:symbol, Age:float)\nIs_age(\"Bill Gates\", 21).\n.decl Answer()\nAnswer() :- Has_degree(\"Bill Gates\", \"Doctorate\"), Is_age(\"Bill Gates\", age), age < 21.\n.output Answer"]}
{"id": 643, "answer": false, "completion": ".decl Can_enjoy(Person:symbol, Activity:symbol)\nCan_enjoy(\"deaf person\", \"music\").\n.decl Answer()\nAnswer() :- Can_enjoy(\"deaf person\", \"music\").\n.output Answer", "completions": [".decl Can_enjoy(Person:symbol, Activity:symbol)\nCan_enjoy(\"deaf person\", \"music\").\n.decl Answer()\nAnswer() :- Can_enjoy(\"deaf person\", \"music\").\n.output Answer"]}
{"id": 644, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Aretha Franklin\", 1942).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Aretha Franklin's second child\", 1964).\n.decl Happens_after_year(Event:symbol, Year:float)\nHappens_after_year(\"US presidential election\", 1964).\n.decl Answer()\nAnswer() :- Born_in_year(\"Aretha Franklin\", year1), Happens_in_year(\"Aretha Franklin's second child\", year2), Happens_after_year(\"US presidential election\", year3), year1 <= year2, year2 <= year3.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Aretha Franklin\", 1942).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Aretha Franklin's second child\", 1964).\n.decl Happens_after_year(Event:symbol, Year:float)\nHappens_after_year(\"US presidential election\", 1964).\n.decl Answer()\nAnswer() :- Born_in_year(\"Aretha Franklin\", year1), Happens_in_year(\"Aretha Franklin's second child\", year2), Happens_after_year(\"US presidential election\", year3), year1 <= year2, year2 <= year3.\n.output Answer"]}
{"id": 645, "answer": true, "completion": ".decl Has_letter(Word:symbol, Letter:symbol)\nHas_letter(\"the\", \"t\").\nHas_letter(\"the\", \"h\").\nHas_letter(\"the\", \"e\").\nHas_letter(\"of\", \"o\").\nHas_letter(\"of\", \"f\").\n.decl Answer()\nAnswer() :- Has_letter(\"the\", \"C\").\nAnswer() :- Has_letter(\"of\", \"C\").\n.output Answer", "completions": [".decl Has_letter(Word:symbol, Letter:symbol)\nHas_letter(\"the\", \"t\").\nHas_letter(\"the\", \"h\").\nHas_letter(\"the\", \"e\").\nHas_letter(\"of\", \"o\").\nHas_letter(\"of\", \"f\").\n.decl Answer()\nAnswer() :- Has_letter(\"the\", \"C\").\nAnswer() :- Has_letter(\"of\", \"C\").\n.output Answer"]}
{"id": 646, "answer": true, "completion": ".decl Has_language_ability(Animal:symbol, Ability:float)\nHas_language_ability(\"ape\", 0.5).\nHas_language_ability(\"ant\", 0.1).\n.decl Answer()\nAnswer() :- Has_language_ability(\"ape\", ability1), Has_language_ability(\"ant\", ability2), ability1 > ability2.\n.output Answer", "completions": [".decl Has_language_ability(Animal:symbol, Ability:float)\nHas_language_ability(\"ape\", 0.5).\nHas_language_ability(\"ant\", 0.1).\n.decl Answer()\nAnswer() :- Has_language_ability(\"ape\", ability1), Has_language_ability(\"ant\", ability2), ability1 > ability2.\n.output Answer"]}
{"id": 647, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"small intestine\", 20).\nHas_length(\"cotton ball\", 0.5).\n.decl Answer()\nAnswer() :- Has_length(\"small intestine\", length1), Has_length(\"cotton ball\", length2), length1 > length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"small intestine\", 20).\nHas_length(\"cotton ball\", 0.5).\n.decl Answer()\nAnswer() :- Has_length(\"small intestine\", length1), Has_length(\"cotton ball\", length2), length1 > length2.\n.output Answer"]}
{"id": 648, "answer": true, "completion": ".decl Lasted_n_years(Event:symbol, N_years:float)\nLasted_n_years(\"Augustus's Pax Romana\", 14).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"hippie\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"hippie\", n_years1), Lasted_n_years(\"Augustus's Pax Romana\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Lasted_n_years(Event:symbol, N_years:float)\nLasted_n_years(\"Augustus's Pax Romana\", 14).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"hippie\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"hippie\", n_years1), Lasted_n_years(\"Augustus's Pax Romana\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 649, "answer": true, "completion": ".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Paul McCartney\", \"Sir\").\n.decl Answer()\nAnswer() :- Has_title(\"Paul McCartney\", \"Sir\").\n.output Answer", "completions": [".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Paul McCartney\", \"Sir\").\n.decl Answer()\nAnswer() :- Has_title(\"Paul McCartney\", \"Sir\").\n.output Answer"]}
{"id": 650, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"winter\", \"December\").\nHappens_in_time(\"winter\", \"January\").\nHappens_in_time(\"winter\", \"February\").\nHappens_in_time(\"hot temperatures\", \"July\").\nHappens_in_time(\"hot temperatures\", \"August\").\nHappens_in_time(\"hot temperatures\", \"September\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"winter\", time1), Happens_in_time(\"hot temperatures\", time2), time1 != time2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"winter\", \"December\").\nHappens_in_time(\"winter\", \"January\").\nHappens_in_time(\"winter\", \"February\").\nHappens_in_time(\"hot temperatures\", \"July\").\nHappens_in_time(\"hot temperatures\", \"August\").\nHappens_in_time(\"hot temperatures\", \"September\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"winter\", time1), Happens_in_time(\"hot temperatures\", time2), time1 != time2.\n.output Answer"]}
{"id": 651, "answer": true, "completion": ".decl Has_ingredient(Product:symbol, Ingredient:symbol)\nHas_ingredient(\"All Purpose Flour\", \"wheat\").\n.decl Is_allergic_to(Person:symbol, Allergen:symbol)\nIs_allergic_to(\"person with celiac disease\", \"wheat\").\n.decl Answer()\nAnswer() :- Is_allergic_to(\"person with celiac disease\", allergen), Has_ingredient(\"All Purpose Flour\", allergen).\n.output Answer", "completions": [".decl Has_ingredient(Product:symbol, Ingredient:symbol)\nHas_ingredient(\"All Purpose Flour\", \"wheat\").\n.decl Is_allergic_to(Person:symbol, Allergen:symbol)\nIs_allergic_to(\"person with celiac disease\", \"wheat\").\n.decl Answer()\nAnswer() :- Is_allergic_to(\"person with celiac disease\", allergen), Has_ingredient(\"All Purpose Flour\", allergen).\n.output Answer"]}
{"id": 652, "answer": true, "completion": ".decl Has_color(Person:symbol, Color:symbol)\nHas_color(\"person\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"person\", \"black\"), Has_color(\"person\", \"red\").\nAnswer() :- Has_color(\"person\", \"black\"), Has_color(\"person\", \"red\"), Has_color(\"person\", \"bleach\").\n.output Answer", "completions": [".decl Has_color(Person:symbol, Color:symbol)\nHas_color(\"person\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"person\", \"black\"), Has_color(\"person\", \"red\").\nAnswer() :- Has_color(\"person\", \"black\"), Has_color(\"person\", \"red\"), Has_color(\"person\", \"bleach\").\n.output Answer"]}
{"id": 653, "answer": true, "completion": ".decl Marco_Polo()\nMarco_Polo().\n.decl Answer()\nAnswer() :- Marco_Polo().\n.output Answer", "completions": [".decl Marco_Polo()\nMarco_Polo().\n.decl Answer()\nAnswer() :- Marco_Polo().\n.output Answer"]}
{"id": 654, "answer": true, "completion": ".decl Uses(Person:symbol, Software:symbol)\nUses(\"Metallica\", \"Soulseek\").\n.decl Answer()\nAnswer() :- Uses(\"Metallica\", \"Soulseek\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Software:symbol)\nUses(\"Metallica\", \"Soulseek\").\n.decl Answer()\nAnswer() :- Uses(\"Metallica\", \"Soulseek\").\n.output Answer"]}
{"id": 655, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"R. Kelly\", 51).\n.decl Is_college_student(Person:symbol)\nIs_college_student(\"R. Kelly\").\n.decl Answer()\nAnswer() :- Is_college_student(\"R. Kelly\").\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"R. Kelly\", 51).\n.decl Is_college_student(Person:symbol)\nIs_college_student(\"R. Kelly\").\n.decl Answer()\nAnswer() :- Is_college_student(\"R. Kelly\").\n.output Answer"]}
{"id": 656, "answer": true, "completion": ".decl Happens_during(Event:symbol, Time:symbol)\nHappens_during(\"Football War\", \"1969\").\n.decl Answer()\nAnswer() :- Happens_during(\"Football War\", time), Happens_during(\"side scores a touchdown\", time).\n.output Answer", "completions": [".decl Happens_during(Event:symbol, Time:symbol)\nHappens_during(\"Football War\", \"1969\").\n.decl Answer()\nAnswer() :- Happens_during(\"Football War\", time), Happens_during(\"side scores a touchdown\", time).\n.output Answer"]}
{"id": 657, "answer": true, "completion": ".decl Is_a_type_of(Company:symbol, Type:symbol)\nIs_a_type_of(\"Canon Inc.\", \"Kabushiki gaisha\").\n.decl Answer()\nAnswer() :- Is_a_type_of(\"Canon Inc.\", \"Kabushiki gaisha\").\n.output Answer\n\n", "completions": [".decl Is_a_type_of(Company:symbol, Type:symbol)\nIs_a_type_of(\"Canon Inc.\", \"Kabushiki gaisha\").\n.decl Answer()\nAnswer() :- Is_a_type_of(\"Canon Inc.\", \"Kabushiki gaisha\").\n.output Answer\n\n"]}
{"id": 658, "answer": true, "completion": ".decl Causes_death(Event:symbol, Person:symbol)\nCauses_death(\"drug overdose\", \"Amy Winehouse\").\nCauses_death(\"paparazzi\", \"Amy Winehouse\").\n.decl Answer()\nAnswer() :- Causes_death(\"paparazzi\", \"Amy Winehouse\").\n.output Answer", "completions": [".decl Causes_death(Event:symbol, Person:symbol)\nCauses_death(\"drug overdose\", \"Amy Winehouse\").\nCauses_death(\"paparazzi\", \"Amy Winehouse\").\n.decl Answer()\nAnswer() :- Causes_death(\"paparazzi\", \"Amy Winehouse\").\n.output Answer"]}
{"id": 659, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"average ruler\", 30).\nHas_length(\"giant armadillo\", 2.5).\n.decl Answer()\nAnswer() :- Has_length(\"average ruler\", length1), Has_length(\"giant armadillo\", length2), length2 > length1.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"average ruler\", 30).\nHas_length(\"giant armadillo\", 2.5).\n.decl Answer()\nAnswer() :- Has_length(\"average ruler\", length1), Has_length(\"giant armadillo\", length2), length2 > length1.\n.output Answer"]}
{"id": 660, "answer": true, "completion": ".decl Has_tenure(Person:symbol, Tenure:float)\nHas_tenure(\"Drew Carey\", 5).\nHas_tenure(\"Doug Davidson\", 30).\n.decl Answer()\nAnswer() :- Has_tenure(\"Drew Carey\", tenure1), Has_tenure(\"Doug Davidson\", tenure2), tenure1 > tenure2.\n.output Answer", "completions": [".decl Has_tenure(Person:symbol, Tenure:float)\nHas_tenure(\"Drew Carey\", 5).\nHas_tenure(\"Doug Davidson\", 30).\n.decl Answer()\nAnswer() :- Has_tenure(\"Drew Carey\", tenure1), Has_tenure(\"Doug Davidson\", tenure2), tenure1 > tenure2.\n.output Answer"]}
{"id": 661, "answer": true, "completion": ".decl Embalmed(Body:symbol)\nEmbalmed(\"body\").\n.decl Answer()\nAnswer() :- Embalmed(\"body\").\n.output Answer", "completions": [".decl Embalmed(Body:symbol)\nEmbalmed(\"body\").\n.decl Answer()\nAnswer() :- Embalmed(\"body\").\n.output Answer"]}
{"id": 662, "answer": true, "completion": ".decl Escapes(Person:symbol, Place:symbol)\nEscapes(\"Indiana Jones\", \"Temple of Doom\").\n.decl Answer()\nAnswer() :- Escapes(\"Indiana Jones\", \"Temple of Doom\").\n.output Answer", "completions": [".decl Escapes(Person:symbol, Place:symbol)\nEscapes(\"Indiana Jones\", \"Temple of Doom\").\n.decl Answer()\nAnswer() :- Escapes(\"Indiana Jones\", \"Temple of Doom\").\n.output Answer"]}
{"id": 663, "answer": true, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"McDonald's Big Mac\", 540).\nHas_calories(\"McDonald's Quarter Pounder with Cheese\", 520).\nHas_calories(\"McDonald's Chicken McNuggets\", 190).\nHas_calories(\"McDonald's French Fries\", 380).\nHas_calories(\"McDonald's Diet Coke\", 0).\n.decl Answer()\nAnswer() :- Has_calories(food, calories), calories > 500.\n.output Answer", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"McDonald's Big Mac\", 540).\nHas_calories(\"McDonald's Quarter Pounder with Cheese\", 520).\nHas_calories(\"McDonald's Chicken McNuggets\", 190).\nHas_calories(\"McDonald's French Fries\", 380).\nHas_calories(\"McDonald's Diet Coke\", 0).\n.decl Answer()\nAnswer() :- Has_calories(food, calories), calories > 500.\n.output Answer"]}
{"id": 664, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Ma Petite\", 2.3).\n.decl Answer()\nAnswer() :- Has_height(\"Dodo\", height1), Has_height(\"Ma Petite\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Ma Petite\", 2.3).\n.decl Answer()\nAnswer() :- Has_height(\"Dodo\", height1), Has_height(\"Ma Petite\", height2), height1 > height2.\n.output Answer"]}
{"id": 665, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"black\", \"black\").\nHas_color(\"white\", \"white\").\nHas_color(\"zebra\", \"black\").\nHas_color(\"zebra\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"black\", color1), Has_color(\"white\", color2), Has_color(\"zebra\", color1), Has_color(\"zebra\", color2).\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"black\", \"black\").\nHas_color(\"white\", \"white\").\nHas_color(\"zebra\", \"black\").\nHas_color(\"zebra\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"black\", color1), Has_color(\"white\", color2), Has_color(\"zebra\", color1), Has_color(\"zebra\", color2).\n.output Answer"]}
{"id": 666, "answer": true, "completion": ".decl Has_song(Artist:symbol, Song:symbol)\nHas_song(\"Pink Floyd\", \"Money\").\nHas_song(\"Pink Floyd\", \"Another Brick in the Wall\").\nHas_song(\"Pink Floyd\", \"Wish You Were Here\").\n.decl About(Song:symbol, Topic:symbol)\nAbout(\"Money\", \"money\").\nAbout(\"Another Brick in the Wall\", \"school\").\nAbout(\"Wish You Were Here\", \"friendship\").\n.decl Answer()\nAnswer() :- Has_song(\"Pink Floyd\", song), About(song, \"French Riviera\").\n.output Answer", "completions": [".decl Has_song(Artist:symbol, Song:symbol)\nHas_song(\"Pink Floyd\", \"Money\").\nHas_song(\"Pink Floyd\", \"Another Brick in the Wall\").\nHas_song(\"Pink Floyd\", \"Wish You Were Here\").\n.decl About(Song:symbol, Topic:symbol)\nAbout(\"Money\", \"money\").\nAbout(\"Another Brick in the Wall\", \"school\").\nAbout(\"Wish You Were Here\", \"friendship\").\n.decl Answer()\nAnswer() :- Has_song(\"Pink Floyd\", song), About(song, \"French Riviera\").\n.output Answer"]}
{"id": 667, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Drow\", 6.5).\nHas_height(\"The Hobbit's hero\", 3.5).\n.decl Answer()\nAnswer() :- Has_height(\"Drow\", height1), Has_height(\"The Hobbit's hero\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Drow\", 6.5).\nHas_height(\"The Hobbit's hero\", 3.5).\n.decl Answer()\nAnswer() :- Has_height(\"Drow\", height1), Has_height(\"The Hobbit's hero\", height2), height1 > height2.\n.output Answer"]}
{"id": 668, "answer": true, "completion": ".decl Loves(Person:symbol, Place:symbol)\nLoves(\"E.T. the Extra-Terrestrial\", \"Friendly's\").\n.decl Answer()\nAnswer() :- Loves(\"E.T. the Extra-Terrestrial\", \"Friendly's\").\n.output Answer", "completions": [".decl Loves(Person:symbol, Place:symbol)\nLoves(\"E.T. the Extra-Terrestrial\", \"Friendly's\").\n.decl Answer()\nAnswer() :- Loves(\"E.T. the Extra-Terrestrial\", \"Friendly's\").\n.output Answer"]}
{"id": 669, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Quadragenarian\", 40).\n.decl Has_memory_capacity(Person:symbol, Memory_capacity:float)\nHas_memory_capacity(\"Quadragenarian\", 0.5).\n.decl Answer()\nAnswer() :- Has_age(\"Quadragenarian\", age), Has_memory_capacity(\"Quadragenarian\", memory_capacity), age > memory_capacity.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Quadragenarian\", 40).\n.decl Has_memory_capacity(Person:symbol, Memory_capacity:float)\nHas_memory_capacity(\"Quadragenarian\", 0.5).\n.decl Answer()\nAnswer() :- Has_age(\"Quadragenarian\", age), Has_memory_capacity(\"Quadragenarian\", memory_capacity), age > memory_capacity.\n.output Answer"]}
{"id": 670, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Portuguese Colonial War\", 15).\nLast_n_years(\"World War II\", 6).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"country in Portuguese Colonial War\", 1).\nHappens_every_n_years(\"country in WWII\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"country in Portuguese Colonial War\", n_years1), Last_n_years(\"Portuguese Colonial War\", n_years2), Happens_every_n_years(\"country in WWII\", n_years3), Last_n_years(\"World War II\", n_years4), n_years1 <= n_years2, n_years3 <= n_years4.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Portuguese Colonial War\", 15).\nLast_n_years(\"World War II\", 6).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"country in Portuguese Colonial War\", 1).\nHappens_every_n_years(\"country in WWII\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"country in Portuguese Colonial War\", n_years1), Last_n_years(\"Portuguese Colonial War\", n_years2), Happens_every_n_years(\"country in WWII\", n_years3), Last_n_years(\"World War II\", n_years4), n_years1 <= n_years2, n_years3 <= n_years4.\n.output Answer"]}
{"id": 671, "answer": false, "completion": ".decl Has_gender_configuration(Group:symbol, Gender_configuration:symbol)\nHas_gender_configuration(\"ABBA\", \"MMFF\").\nHas_gender_configuration(\"The Mamas & The Papas\", \"MMFF\").\n.decl Answer()\nAnswer() :- Has_gender_configuration(\"ABBA\", \"MMFF\"), Has_gender_configuration(\"The Mamas & The Papas\", \"MMFF\").\n.output Answer", "completions": [".decl Has_gender_configuration(Group:symbol, Gender_configuration:symbol)\nHas_gender_configuration(\"ABBA\", \"MMFF\").\nHas_gender_configuration(\"The Mamas & The Papas\", \"MMFF\").\n.decl Answer()\nAnswer() :- Has_gender_configuration(\"ABBA\", \"MMFF\"), Has_gender_configuration(\"The Mamas & The Papas\", \"MMFF\").\n.output Answer"]}
{"id": 672, "answer": true, "completion": ".decl Has_emmy_awards(Person:symbol, Emmy_awards:float)\nHas_emmy_awards(\"Brian Cranston\", 4).\nHas_emmy_awards(\"Saoirse Ronan\", 1).\n.decl Answer()\nAnswer() :- Has_emmy_awards(\"Brian Cranston\", emmy_awards1), Has_emmy_awards(\"Saoirse Ronan\", emmy_awards2), emmy_awards3 is emmy_awards1 + emmy_awards2, emmy_awards3 > 1, not (emmy_awards3 mod 2 = 0), not (emmy_awards3 mod 3 = 0), not (emmy_awards3 mod 5 = 0), not (emmy_awards3 mod 7 = 0), not (emmy_awards3 mod 11 = 0), not (emmy_awards3 mod 13 = 0), not (emmy_awards3 mod 17 = 0), not (emmy_awards3 mod 19 = 0), not (emmy_awards3 mod 23 = 0), not (emmy_awards3 mod 29 = 0), not (emmy_awards3 mod 31 = 0), not (emmy_awards3 mod 37 = 0), not (emmy_awards3 mod 41 = 0), not (emmy_awards3 mod 43 = 0), not (emmy_awards3 mod 47 = 0), not (emmy_awards3 mod 53 = 0), not (emmy_awards3 mod 59 = 0), not (emmy_awards3 mod 61 = 0), not (emmy_awards3 mod 67 = 0), not (emmy_awards3 mod 71 = 0), not (emmy_awards3 mod 73 = 0), not (emmy_awards3 mod 79 = 0), not (emmy_awards3 mod 83 = 0), not (emmy_awards3 mod 89 = 0), not (emmy_awards3 mod 97 = 0).\n.output Answer", "completions": [".decl Has_emmy_awards(Person:symbol, Emmy_awards:float)\nHas_emmy_awards(\"Brian Cranston\", 4).\nHas_emmy_awards(\"Saoirse Ronan\", 1).\n.decl Answer()\nAnswer() :- Has_emmy_awards(\"Brian Cranston\", emmy_awards1), Has_emmy_awards(\"Saoirse Ronan\", emmy_awards2), emmy_awards3 is emmy_awards1 + emmy_awards2, emmy_awards3 > 1, not (emmy_awards3 mod 2 = 0), not (emmy_awards3 mod 3 = 0), not (emmy_awards3 mod 5 = 0), not (emmy_awards3 mod 7 = 0), not (emmy_awards3 mod 11 = 0), not (emmy_awards3 mod 13 = 0), not (emmy_awards3 mod 17 = 0), not (emmy_awards3 mod 19 = 0), not (emmy_awards3 mod 23 = 0), not (emmy_awards3 mod 29 = 0), not (emmy_awards3 mod 31 = 0), not (emmy_awards3 mod 37 = 0), not (emmy_awards3 mod 41 = 0), not (emmy_awards3 mod 43 = 0), not (emmy_awards3 mod 47 = 0), not (emmy_awards3 mod 53 = 0), not (emmy_awards3 mod 59 = 0), not (emmy_awards3 mod 61 = 0), not (emmy_awards3 mod 67 = 0), not (emmy_awards3 mod 71 = 0), not (emmy_awards3 mod 73 = 0), not (emmy_awards3 mod 79 = 0), not (emmy_awards3 mod 83 = 0), not (emmy_awards3 mod 89 = 0), not (emmy_awards3 mod 97 = 0).\n.output Answer"]}
{"id": 673, "answer": true, "completion": ".decl Has_genre(Show:symbol, Genre:symbol)\nHas_genre(\"Rick and Morty\", \"comedy\").\nHas_genre(\"Rick and Morty\", \"sci-fi\").\nHas_genre(\"Rick and Morty\", \"animation\").\nHas_genre(\"Rick and Morty\", \"adult\").\nHas_genre(\"Rick and Morty\", \"adult humor\").\nHas_genre(\"Rick and Morty\", \"adventure\").\nHas_genre(\"Rick and Morty\", \"drama\").\nHas_genre(\"Rick and Morty\", \"family\").\nHas_genre(\"Rick and Morty\", \"fantasy\").\nHas_genre(\"Rick and Morty\", \"horror\").\nHas_genre(\"Rick and Morty\", \"mystery\").\nHas_genre(\"Rick and Morty\", \"romance\").\nHas_genre(\"Rick and Morty\", \"sitcom\").\nHas_genre(\"Rick and Morty\", \"supernatural\").\nHas_genre(\"Rick and Morty\", \"thriller\").\nHas_genre(\"Rick and Morty\", \"western\").\n.decl Answer()\nAnswer() :- Has_genre(\"Rick and Morty\", \"anime\").\n.output Answer", "completions": [".decl Has_genre(Show:symbol, Genre:symbol)\nHas_genre(\"Rick and Morty\", \"comedy\").\nHas_genre(\"Rick and Morty\", \"sci-fi\").\nHas_genre(\"Rick and Morty\", \"animation\").\nHas_genre(\"Rick and Morty\", \"adult\").\nHas_genre(\"Rick and Morty\", \"adult humor\").\nHas_genre(\"Rick and Morty\", \"adventure\").\nHas_genre(\"Rick and Morty\", \"drama\").\nHas_genre(\"Rick and Morty\", \"family\").\nHas_genre(\"Rick and Morty\", \"fantasy\").\nHas_genre(\"Rick and Morty\", \"horror\").\nHas_genre(\"Rick and Morty\", \"mystery\").\nHas_genre(\"Rick and Morty\", \"romance\").\nHas_genre(\"Rick and Morty\", \"sitcom\").\nHas_genre(\"Rick and Morty\", \"supernatural\").\nHas_genre(\"Rick and Morty\", \"thriller\").\nHas_genre(\"Rick and Morty\", \"western\").\n.decl Answer()\nAnswer() :- Has_genre(\"Rick and Morty\", \"anime\").\n.output Answer"]}
{"id": 674, "answer": true, "completion": ".decl Knows(Person:symbol, Subject:symbol)\nKnows(\"Siri\", \"geometry\").\n.decl Answer()\nAnswer() :- Knows(\"Siri\", \"geometry\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Subject:symbol)\nKnows(\"Siri\", \"geometry\").\n.decl Answer()\nAnswer() :- Knows(\"Siri\", \"geometry\").\n.output Answer"]}
{"id": 675, "answer": true, "completion": ".decl Is_type_of(Type:symbol, Object:symbol)\nIs_type_of(\"metal\", \"music\").\nIs_type_of(\"folk\", \"music\").\n.decl Answer()\nAnswer() :- Is_type_of(\"metal\", \"folk music\").\n.output Answer", "completions": [".decl Is_type_of(Type:symbol, Object:symbol)\nIs_type_of(\"metal\", \"music\").\nIs_type_of(\"folk\", \"music\").\n.decl Answer()\nAnswer() :- Is_type_of(\"metal\", \"folk music\").\n.output Answer"]}
{"id": 676, "answer": true, "completion": ".decl Is_member_of(Person:symbol, Church:symbol)\nIs_member_of(\"Muhammed\", \"Uniting Church in Australia\").\n.decl Answer()\nAnswer() :- Is_member_of(\"Muhammed\", \"Uniting Church in Australia\").\n.output Answer", "completions": [".decl Is_member_of(Person:symbol, Church:symbol)\nIs_member_of(\"Muhammed\", \"Uniting Church in Australia\").\n.decl Answer()\nAnswer() :- Is_member_of(\"Muhammed\", \"Uniting Church in Australia\").\n.output Answer"]}
{"id": 677, "answer": true, "completion": ".decl Admires(Person:symbol, Person_admired:symbol)\nAdmires(\"Hattori Hanzō\", \"Tokugawa Ieyasu\").\nAdmires(\"Tokugawa Ieyasu\", \"Naruto\").\n.decl Answer()\nAnswer() :- Admires(\"Hattori Hanzō\", \"Naruto\").\nAnswer() :- Admires(\"Hattori Hanzō\", person), Admires(person, \"Naruto\").\n.output Answer", "completions": [".decl Admires(Person:symbol, Person_admired:symbol)\nAdmires(\"Hattori Hanzō\", \"Tokugawa Ieyasu\").\nAdmires(\"Tokugawa Ieyasu\", \"Naruto\").\n.decl Answer()\nAnswer() :- Admires(\"Hattori Hanzō\", \"Naruto\").\nAnswer() :- Admires(\"Hattori Hanzō\", person), Admires(person, \"Naruto\").\n.output Answer"]}
{"id": 678, "answer": true, "completion": ".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Mark Cuban\", \"United States\").\n.decl Is_territory_of(Territory:symbol, Country:symbol)\nIs_territory_of(\"Northern Mariana Islands\", \"United States\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Mark Cuban\", \"United States\"), Is_territory_of(\"Northern Mariana Islands\", \"United States\").\n.output Answer", "completions": [".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Mark Cuban\", \"United States\").\n.decl Is_territory_of(Territory:symbol, Country:symbol)\nIs_territory_of(\"Northern Mariana Islands\", \"United States\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Mark Cuban\", \"United States\"), Is_territory_of(\"Northern Mariana Islands\", \"United States\").\n.output Answer"]}
{"id": 679, "answer": false, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Nintendo's link\", \"hero\").\nHas_job(\"Nintendo's link\", \"warrior\").\nHas_job(\"Nintendo's link\", \"adventurer\").\nHas_job(\"Nintendo's link\", \"explorer\").\nHas_job(\"Nintendo's link\", \"archer\").\nHas_job(\"Nintendo's link\", \"swordsman\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"sailor\").\nHas_job(\"Nintendo's link\", \"pirate\").\nHas_job(\"Nintendo's link\", \"ranger\").\nHas_job(\"Nintendo's link\", \"merchant\").\nHas_job(\"Nintendo's link\", \"farmer\").\nHas_job(\"Nintendo's link\", \"miner\").\nHas_job(\"Nintendo's link\", \"blacksmith\").\nHas_job(\"Nintendo's link\", \"carpenter\").\nHas_job(\"Nintendo's link\", \"chef\").\nHas_job(\"Nintendo's link\", \"doctor\").\nHas_job(\"Nintendo's link\", \"scientist\").\nHas_job(\"Nintendo's link\", \"astronomer\").\nHas_job(\"Nintendo's link\", \"magician\").\nHas_job(\"Nintendo's link\", \"wizard\").\nHas_job(\"Nintendo's link\", \"sorcerer\").\nHas_job(\"Nintendo's link\", \"sage\").\nHas_job(\"Nintendo's link\", \"priest\").\nHas_job(\"Nintendo's link\", \"rabbi\").\nHas_job(\"Nintendo's link\", \"monk\").\nHas_job(\"Nintendo's link\", \"nun\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"soldier\").\nHas_job(\"Nintendo's link\", \"general\").\nHas_job(\"Nintendo's link\", \"king\").\nHas_job(\"Nintendo's link\", \"queen\").\nHas_job(\"Nintendo's link\", \"prince\").\nHas_job(\"Nintendo's link\", \"princess\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Nintendo's link\", \"hero\").\nHas_job(\"Nintendo's link\", \"warrior\").\nHas_job(\"Nintendo's link\", \"adventurer\").\nHas_job(\"Nintendo's link\", \"explorer\").\nHas_job(\"Nintendo's link\", \"archer\").\nHas_job(\"Nintendo's link\", \"swordsman\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"sailor\").\nHas_job(\"Nintendo's link\", \"pirate\").\nHas_job(\"Nintendo's link\", \"ranger\").\nHas_job(\"Nintendo's link\", \"merchant\").\nHas_job(\"Nintendo's link\", \"farmer\").\nHas_job(\"Nintendo's link\", \"miner\").\nHas_job(\"Nintendo's link\", \"blacksmith\").\nHas_job(\"Nintendo's link\", \"carpenter\").\nHas_job(\"Nintendo's link\", \"chef\").\nHas_job(\"Nintendo's link\", \"doctor\").\nHas_job(\"Nintendo's link\", \"scientist\").\nHas_job(\"Nintendo's link\", \"astronomer\").\nHas_job(\"Nintendo's link\", \"magician\").\nHas_job(\"Nintendo's link\", \"wizard\").\nHas_job(\"Nintendo's link\", \"sorcerer\").\nHas_job(\"Nintendo's link\", \"sage\").\nHas_job(\"Nintendo's link\", \"priest\").\nHas_job(\"Nintendo's link\", \"rabbi\").\nHas_job(\"Nintendo's link\", \"monk\").\nHas_job(\"Nintendo's link\", \"nun\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"soldier\").\nHas_job(\"Nintendo's link\", \"general\").\nHas_job(\"Nintendo's link\", \"king\").\nHas_job(\"Nintendo's link\", \"queen\").\nHas_job(\"Nintendo's link\", \"prince\").\nHas_job(\"Nintendo's link\", \"princess\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight\").\nHas_job(\"Nintendo's link\", \"knight"]}
{"id": 680, "answer": false, "completion": ".decl Can_avoid(Person:symbol, Place:symbol)\nCan_avoid(\"person\", \"reddit\").\n.decl Answer()\nAnswer() :- Can_avoid(\"person\", \"reddit\").\n.output Answer", "completions": [".decl Can_avoid(Person:symbol, Place:symbol)\nCan_avoid(\"person\", \"reddit\").\n.decl Answer()\nAnswer() :- Can_avoid(\"person\", \"reddit\").\n.output Answer"]}
{"id": 681, "answer": true, "completion": ".decl Has_value(Currency:symbol, Value:float)\nHas_value(\"pound sterling\", 1.6).\n.decl Answer()\n.output Answer", "completions": [".decl Has_value(Currency:symbol, Value:float)\nHas_value(\"pound sterling\", 1.6).\n.decl Answer()\n.output Answer"]}
{"id": 682, "answer": false, "completion": ".decl Is_near(Place1:symbol, Place2:symbol)\nIs_near(\"Federal Reserve\", \"Space Needle\").\n.decl Answer()\nAnswer() :- Is_near(\"Federal Reserve\", \"Space Needle\").\n.output Answer", "completions": [".decl Is_near(Place1:symbol, Place2:symbol)\nIs_near(\"Federal Reserve\", \"Space Needle\").\n.decl Answer()\nAnswer() :- Is_near(\"Federal Reserve\", \"Space Needle\").\n.output Answer"]}
{"id": 683, "answer": true, "completion": ".decl Adherents(Religion:symbol, Number_of_adherents:float)\nAdherents(\"Zoroastrianism\", 2.6).\nAdherents(\"Islam\", 1.6).\n.decl Answer()\nAnswer() :- Adherents(\"Zoroastrianism\", number1), Adherents(\"Islam\", number2), number1 > number2.\n.output Answer", "completions": [".decl Adherents(Religion:symbol, Number_of_adherents:float)\nAdherents(\"Zoroastrianism\", 2.6).\nAdherents(\"Islam\", 1.6).\n.decl Answer()\nAnswer() :- Adherents(\"Zoroastrianism\", number1), Adherents(\"Islam\", number2), number1 > number2.\n.output Answer"]}
{"id": 684, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Very Large Telescope\", 26).\nHas_height(\"Mount Everest\", 8848).\n.decl Answer()\nAnswer() :- Has_height(\"Very Large Telescope\", height1), Has_height(\"Mount Everest\", height2), height1 >= height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Very Large Telescope\", 26).\nHas_height(\"Mount Everest\", 8848).\n.decl Answer()\nAnswer() :- Has_height(\"Very Large Telescope\", height1), Has_height(\"Mount Everest\", height2), height1 >= height2.\n.output Answer"]}
{"id": 685, "answer": false, "completion": ".decl Is_good_for_battling(Plant:symbol, Vampire:symbol)\nIs_good_for_battling(\"garlic\", \"vampire\").\nIs_good_for_battling(\"chives\", \"vampire\").\n.decl Answer()\nAnswer() :- Is_good_for_battling(\"chives\", \"vampire\").\n.output Answer", "completions": [".decl Is_good_for_battling(Plant:symbol, Vampire:symbol)\nIs_good_for_battling(\"garlic\", \"vampire\").\nIs_good_for_battling(\"chives\", \"vampire\").\n.decl Answer()\nAnswer() :- Is_good_for_battling(\"chives\", \"vampire\").\n.output Answer"]}
{"id": 686, "answer": false, "completion": ".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Doctor of Homeopathy\", \"Homeopathy\").\nHas_degree(\"Doctor of Internal Medicine\", \"Internal Medicine\").\n.decl Recommends(Doctor:symbol, Treatment:symbol)\nRecommends(\"Doctor of Homeopathy\", \"Quartz\").\n.decl Answer()\nAnswer() :- Has_degree(\"Doctor of Homeopathy\", degree1), Has_degree(\"Doctor of Internal Medicine\", degree2), Recommends(\"Doctor of Homeopathy\", \"Quartz\"), degree1 != degree2.\n.output Answer", "completions": [".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Doctor of Homeopathy\", \"Homeopathy\").\nHas_degree(\"Doctor of Internal Medicine\", \"Internal Medicine\").\n.decl Recommends(Doctor:symbol, Treatment:symbol)\nRecommends(\"Doctor of Homeopathy\", \"Quartz\").\n.decl Answer()\nAnswer() :- Has_degree(\"Doctor of Homeopathy\", degree1), Has_degree(\"Doctor of Internal Medicine\", degree2), Recommends(\"Doctor of Homeopathy\", \"Quartz\"), degree1 != degree2.\n.output Answer"]}
{"id": 687, "answer": true, "completion": ".decl Has_cell_wall(Organism:symbol, Cell_wall:symbol)\nHas_cell_wall(\"banana\", \"true\").\nHas_cell_wall(\"virus\", \"false\").\n.decl Answer()\nAnswer() :- Has_cell_wall(\"banana\", cell_wall1), Has_cell_wall(\"virus\", cell_wall2), cell_wall1 != cell_wall2.\n.output Answer", "completions": [".decl Has_cell_wall(Organism:symbol, Cell_wall:symbol)\nHas_cell_wall(\"banana\", \"true\").\nHas_cell_wall(\"virus\", \"false\").\n.decl Answer()\nAnswer() :- Has_cell_wall(\"banana\", cell_wall1), Has_cell_wall(\"virus\", cell_wall2), cell_wall1 != cell_wall2.\n.output Answer"]}
{"id": 688, "answer": true, "completion": ".decl Has_diameter(Telescope:symbol, Diameter:float)\nHas_diameter(\"Very Large Telescope\", 16).\nHas_diameter(\"Keck Telescope\", 10).\n.decl Answer()\nAnswer() :- Has_diameter(\"Very Large Telescope\", diameter1), Has_diameter(\"Keck Telescope\", diameter2), diameter1 > diameter2.\n.output Answer", "completions": [".decl Has_diameter(Telescope:symbol, Diameter:float)\nHas_diameter(\"Very Large Telescope\", 16).\nHas_diameter(\"Keck Telescope\", 10).\n.decl Answer()\nAnswer() :- Has_diameter(\"Very Large Telescope\", diameter1), Has_diameter(\"Keck Telescope\", diameter2), diameter1 > diameter2.\n.output Answer"]}
{"id": 689, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Liberty\", 93).\n.decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Bohai Sea\", 150).\n.decl Answer()\nAnswer() :- Has_height(\"Statue of Liberty\", height), Has_depth(\"Bohai Sea\", depth), height < depth.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Liberty\", 93).\n.decl Has_depth(Sea:symbol, Depth:float)\nHas_depth(\"Bohai Sea\", 150).\n.decl Answer()\nAnswer() :- Has_height(\"Statue of Liberty\", height), Has_depth(\"Bohai Sea\", depth), height < depth.\n.output Answer"]}
{"id": 690, "answer": true, "completion": ".decl Has_eyesight(Animal:symbol, Eyesight:symbol)\nHas_eyesight(\"flying fish\", \"good\").\n.decl Answer()\nAnswer() :- Has_eyesight(\"flying fish\", eyesight).\n.output Answer", "completions": [".decl Has_eyesight(Animal:symbol, Eyesight:symbol)\nHas_eyesight(\"flying fish\", \"good\").\n.decl Answer()\nAnswer() :- Has_eyesight(\"flying fish\", eyesight).\n.output Answer"]}
{"id": 691, "answer": false, "completion": ".decl Is_good_for(Format:symbol, Image:symbol)\nIs_good_for(\"JPEG\", \"Vitruvian Man\").\n.decl Answer()\nAnswer() :- Is_good_for(\"JPEG\", \"Vitruvian Man\").\n.output Answer", "completions": [".decl Is_good_for(Format:symbol, Image:symbol)\nIs_good_for(\"JPEG\", \"Vitruvian Man\").\n.decl Answer()\nAnswer() :- Is_good_for(\"JPEG\", \"Vitruvian Man\").\n.output Answer"]}
{"id": 692, "answer": true, "completion": ".decl Knows(Person:symbol, Person_known:symbol)\nKnows(\"Pedubastis I\", \"Japanese people\").\n.decl Answer()\nAnswer() :- Knows(\"Pedubastis I\", \"Japanese people\").\n.output Answer\n\n\n", "completions": [".decl Knows(Person:symbol, Person_known:symbol)\nKnows(\"Pedubastis I\", \"Japanese people\").\n.decl Answer()\nAnswer() :- Knows(\"Pedubastis I\", \"Japanese people\").\n.output Answer\n\n\n"]}
{"id": 693, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Kit\", \"Kit\").\nHas_name(\"Kaboodle\", \"Kaboodle\").\nHas_name(\"Cerberus\", \"Cerberus\").\n.decl Answer()\nAnswer() :- Has_name(\"Kit\", \"Kit\"), Has_name(\"Kaboodle\", \"Kaboodle\"), Has_name(\"Cerberus\", \"Cerberus\").\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Kit\", \"Kit\").\nHas_name(\"Kaboodle\", \"Kaboodle\").\nHas_name(\"Cerberus\", \"Cerberus\").\n.decl Answer()\nAnswer() :- Has_name(\"Kit\", \"Kit\"), Has_name(\"Kaboodle\", \"Kaboodle\"), Has_name(\"Cerberus\", \"Cerberus\").\n.output Answer"]}
{"id": 694, "answer": true, "completion": ".decl Is_deadly(Weapon:symbol)\nIs_deadly(\"ten-pin bowling pin\").\n.decl Answer()\nAnswer() :- Is_deadly(\"ten-pin bowling pin\").\n.output Answer", "completions": [".decl Is_deadly(Weapon:symbol)\nIs_deadly(\"ten-pin bowling pin\").\n.decl Answer()\nAnswer() :- Is_deadly(\"ten-pin bowling pin\").\n.output Answer"]}
{"id": 695, "answer": true, "completion": ".decl Origin_dynasty(Go:symbol, Dynasty:symbol)\nOrigin_dynasty(\"Go\", \"Zhou Dynasty\").\n.decl Jia_Sidao(Dynasty:symbol, Time:symbol)\nJia_Sidao(\"Song Dynasty\", \"13th century\").\n.decl Answer()\nAnswer() :- Origin_dynasty(\"Go\", dynasty1), Jia_Sidao(\"Song Dynasty\", time1), dynasty1 < time1.\n.output Answer", "completions": [".decl Origin_dynasty(Go:symbol, Dynasty:symbol)\nOrigin_dynasty(\"Go\", \"Zhou Dynasty\").\n.decl Jia_Sidao(Dynasty:symbol, Time:symbol)\nJia_Sidao(\"Song Dynasty\", \"13th century\").\n.decl Answer()\nAnswer() :- Origin_dynasty(\"Go\", dynasty1), Jia_Sidao(\"Song Dynasty\", time1), dynasty1 < time1.\n.output Answer"]}
{"id": 696, "answer": false, "completion": ".decl Has_n_humans(Event:symbol, N_humans:float)\nHas_n_humans(\"Noah's Ark\", 8).\n.decl Answer()\nAnswer() :- Has_n_humans(\"Noah's Ark\", 8).\n.output Answer", "completions": [".decl Has_n_humans(Event:symbol, N_humans:float)\nHas_n_humans(\"Noah's Ark\", 8).\n.decl Answer()\nAnswer() :- Has_n_humans(\"Noah's Ark\", 8).\n.output Answer"]}
{"id": 697, "answer": true, "completion": ".decl Is_true(Fact:symbol)\nIs_true(\"true pope\").\n.decl Answer()\nAnswer() :- Is_true(\"true pope\").\nAnswer() :- !Is_true(\"false pope\").\n.output Answer", "completions": [".decl Is_true(Fact:symbol)\nIs_true(\"true pope\").\n.decl Answer()\nAnswer() :- Is_true(\"true pope\").\nAnswer() :- !Is_true(\"false pope\").\n.output Answer"]}
{"id": 698, "answer": true, "completion": ".decl Lasts_for_n_years(Event:symbol, N_years:float)\nLasts_for_n_years(\"Northwest Airlines\", 89).\nLasts_for_n_years(\"Betty White\", 97).\n.decl Answer()\nAnswer() :- Lasts_for_n_years(\"Northwest Airlines\", n_years1), Lasts_for_n_years(\"Betty White\", n_years2), n_years1 > n_years2.\n.output Answer", "completions": [".decl Lasts_for_n_years(Event:symbol, N_years:float)\nLasts_for_n_years(\"Northwest Airlines\", 89).\nLasts_for_n_years(\"Betty White\", 97).\n.decl Answer()\nAnswer() :- Lasts_for_n_years(\"Northwest Airlines\", n_years1), Lasts_for_n_years(\"Betty White\", n_years2), n_years1 > n_years2.\n.output Answer"]}
{"id": 699, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"bitcoin\", 0.01).\nHas_size(\"pocket\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"bitcoin\", size1), Has_size(\"pocket\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"bitcoin\", 0.01).\nHas_size(\"pocket\", 0.1).\n.decl Answer()\nAnswer() :- Has_size(\"bitcoin\", size1), Has_size(\"pocket\", size2), size1 <= size2.\n.output Answer"]}
{"id": 700, "answer": true, "completion": ".decl Reads(Person:symbol, Book:symbol)\nReads(\"Queen Elizabeth I\", \"The Faerie Queene\").\n.decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"The Faerie Queene\", \"Edmund Spenser\").\nWritten_by(\"Nausea\", \"Jean-Paul Sartre\").\n.decl Answer()\nAnswer() :- Reads(\"Queen Elizabeth I\", book), Written_by(book, \"Jean-Paul Sartre\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Book:symbol)\nReads(\"Queen Elizabeth I\", \"The Faerie Queene\").\n.decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"The Faerie Queene\", \"Edmund Spenser\").\nWritten_by(\"Nausea\", \"Jean-Paul Sartre\").\n.decl Answer()\nAnswer() :- Reads(\"Queen Elizabeth I\", book), Written_by(book, \"Jean-Paul Sartre\").\n.output Answer"]}
{"id": 701, "answer": true, "completion": ".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"anatomical heart\", \"heart\").\nHas_shape(\"symbolic heart\", \"heart\").\n.decl Answer()\nAnswer() :- Has_shape(\"anatomical heart\", shape1), Has_shape(\"symbolic heart\", shape2), shape1 != shape2.\n.output Answer", "completions": [".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"anatomical heart\", \"heart\").\nHas_shape(\"symbolic heart\", \"heart\").\n.decl Answer()\nAnswer() :- Has_shape(\"anatomical heart\", shape1), Has_shape(\"symbolic heart\", shape2), shape1 != shape2.\n.output Answer"]}
{"id": 702, "answer": true, "completion": ".decl Is_political_entity(Entity:symbol)\nIs_political_entity(\"Riksdag\").\n.decl Is_in_Scandinavia(Entity:symbol)\nIs_in_Scandinavia(\"Riksdag\").\n.decl Answer()\nAnswer() :- Is_political_entity(entity), Is_in_Scandinavia(entity).\n.output Answer", "completions": [".decl Is_political_entity(Entity:symbol)\nIs_political_entity(\"Riksdag\").\n.decl Is_in_Scandinavia(Entity:symbol)\nIs_in_Scandinavia(\"Riksdag\").\n.decl Answer()\nAnswer() :- Is_political_entity(entity), Is_in_Scandinavia(entity).\n.output Answer"]}
{"id": 703, "answer": true, "completion": ".decl Is_liquid(Food:symbol)\nIs_liquid(\"soup\").\nIs_liquid(\"water\").\nIs_liquid(\"juice\").\n.decl Answer()\nAnswer() :- Is_liquid(food1), Is_liquid(food2), food1 != food2.\n.output Answer", "completions": [".decl Is_liquid(Food:symbol)\nIs_liquid(\"soup\").\nIs_liquid(\"water\").\nIs_liquid(\"juice\").\n.decl Answer()\nAnswer() :- Is_liquid(food1), Is_liquid(food2), food1 != food2.\n.output Answer"]}
{"id": 704, "answer": true, "completion": ".decl Is_Greek(Person:symbol)\nIs_Greek(\"Mary\").\n.decl Prays_to(Person:symbol, Deity:symbol)\nPrays_to(\"Mary\", \"God\").\n.decl Answer()\nAnswer() :- Is_Greek(\"Mary\"), Prays_to(\"Mary\", \"Artemis\").\n.output Answer", "completions": [".decl Is_Greek(Person:symbol)\nIs_Greek(\"Mary\").\n.decl Prays_to(Person:symbol, Deity:symbol)\nPrays_to(\"Mary\", \"God\").\n.decl Answer()\nAnswer() :- Is_Greek(\"Mary\"), Prays_to(\"Mary\", \"Artemis\").\n.output Answer"]}
{"id": 705, "answer": true, "completion": ".decl Sends_letter(Person:symbol, Place:symbol)\nSends_letter(\"child\", \"North Pole\").\n.decl Answer()\nAnswer() :- Sends_letter(\"child\", \"South Pole\").\n.output Answer", "completions": [".decl Sends_letter(Person:symbol, Place:symbol)\nSends_letter(\"child\", \"North Pole\").\n.decl Answer()\nAnswer() :- Sends_letter(\"child\", \"South Pole\").\n.output Answer"]}
{"id": 706, "answer": false, "completion": ".decl Fights(Boxer_A:symbol, Boxer_B:symbol)\nFights(\"Jack Dempsey\", \"Gene Tunney\").\nFights(\"Jack Dempsey\", \"Luis Firpo\").\nFights(\"Jack Dempsey\", \"Georges Carpentier\").\nFights(\"Jack Dempsey\", \"Tom Gibbons\").\nFights(\"Jack Dempsey\", \"Jess Willard\").\nFights(\"Jack Dempsey\", \"Harry Wills\").\nFights(\"Jack Dempsey\", \"Billy Miske\").\nFights(\"Jack Dempsey\", \"Fred Fulton\").\nFights(\"Jack Dempsey\", \"Eddie McGoorty\").\nFights(\"Jack Dempsey\", \"Fireman Jim Flynn\").\nFights(\"Jack Dempsey\", \"Gunboat Smith\").\nFights(\"Jack Dempsey\", \"Bill Brennan\").\nFights(\"Jack Dempsey\", \"Ketchel Kid\").\nFights(\"Jack Dempsey\", \"Willard Brown\").\nFights(\"Jack Dempsey\", \"Willie Meehan\").\nFights(\"Jack Dempsey\", \"Tommy Gibbons\").\nFights(\"Jack Dempsey\", \"Georges Carpentier\").\nFights(\"Jack Dempsey\", \"Luis Firpo\").\nFights(\"Jack Dempsey\", \"Gene Tunney\").\nFights(\"Jack Dempsey\", \"Jack Sharkey\").\nFights(\"Jack Dempsey\", \"Young Stribling\").\nFights(\"Jack Dempsey\", \"Max Schmeling\").\nFights(\"Jack Dempsey\", \"Paulino Uzcudun\").\nFights(\"Jack Dempsey\", \"Primo Carnera\").\nFights(\"Jack Dempsey\", \"Kingfish Levinsky\").\nFights(\"Jack Dempsey\", \"Harry Greb\").\nFights(\"Jack Dempsey\", \"Tommy Loughran\").\nFights(\"Jack Dempsey\", \"Max Baer\").\nFights(\"Jack Dempsey\", \"Jersey Joe Walcott\").\nFights(\"Jack Dempsey\", \"Rocky Marciano\").\nFights(\"Jack Dempsey\", \"Ezzard Charles\").\nFights(\"Jack Dempsey\", \"Joe Louis\").\nFights(\"Jack Dempsey\", \"Cleveland Williams\").\nFights(\"Jack Dempsey\", \"Sonny Liston\").\nFights(\"Jack Dempsey\", \"Muhammad Ali\").\nFights(\"Jack Dempsey\", \"George Foreman\").\nFights(\"Jack Dempsey\", \"Joe Frazier\").\nFights(\"Jack Dempsey\", \"Ken Norton\").\nFights(\"Jack Dempsey\", \"George Chuvalo\").\nFights(\"Jack Dempsey\", \"Floyd Patterson\").\nFights(\"Jack Dempsey\", \"Sonny Liston\").\nFights(\"Jack Dempsey\", \"Muhammad Ali\").\nFights(\"Jack Dempsey\", \"George Foreman\").\nFights(\"Jack Dempsey\", \"Joe Frazier\").\nFights(\"Jack Dempsey\", \"Ken Norton\").\nFights(\"Jack Dempsey\", \"George Chuvalo\").\nFights(\"Jack Dempsey\", \"Floyd Patterson\").\nFights(\"Jack Dempsey\", \"Sonny Liston\").\nFights(\"Jack Dempsey\", \"Muhammad Ali\").\nFights(\"Jack Dempsey\", \"George Foreman\").\nFights(\"Jack Dempsey\", \"Joe Frazier\").\nFights(\"Jack Dempsey\", \"Ken Norton\").\nFights(\"Jack Dempsey\", \"George Chuvalo\").\nFights(\"Jack Dempsey\", \"Floyd Patterson\").\nFights(\"Jack Dempsey\", \"Sonny Liston\").\nFights(\"Jack Dempsey\", \"Muhammad Ali\").\nFights(\"Jack Dempsey\", \"George Foreman\").\nFights(\"Jack Dempsey\", \"Joe Frazier\").\nFights(\"Jack Dempsey\", \"Ken Norton\").\nFights(\"Jack Dempsey\", \"George Chuvalo\").\nFights(\"Jack Dempsey\", \"Floyd Patterson\").\nFights(\"Jack Dempsey\", \"Sonny Liston\").\nFights(\"Jack Dempsey\",", "completions": [".decl Fights(Boxer_A:symbol, Boxer_B:symbol)\nFights(\"Jack Dempsey\", \"Gene Tunney\").\nFights(\"Jack Dempsey\", \"Luis Firpo\").\nFights(\"Jack Dempsey\", \"Georges Carpentier\").\nFights(\"Jack Dempsey\", \"Tom Gibbons\").\nFights(\"Jack Dempsey\", \"Jess Willard\").\nFights(\"Jack Dempsey\", \"Harry Wills\").\nFights(\"Jack Dempsey\", \"Billy Miske\").\nFights(\"Jack Dempsey\", \"Fred Fulton\").\nFights(\"Jack Dempsey\", \"Eddie McGoorty\").\nFights(\"Jack Dempsey\", \"Fireman Jim Flynn\").\nFights(\"Jack Dempsey\", \"Gunboat Smith\").\nFights(\"Jack Dempsey\", \"Bill Brennan\").\nFights(\"Jack Dempsey\", \"Ketchel Kid\").\nFights(\"Jack Dempsey\", \"Willard Brown\").\nFights(\"Jack Dempsey\", \"Willie Meehan\").\nFights(\"Jack Dempsey\", \"Tommy Gibbons\").\nFights(\"Jack Dempsey\", \"Georges Carpentier\").\nFights(\"Jack Dempsey\", \"Luis Firpo\").\nFights(\"Jack Dempsey\", \"Gene Tunney\").\nFights(\"Jack Dempsey\", \"Jack Sharkey\").\nFights(\"Jack Dempsey\", \"Young Stribling\").\nFights(\"Jack Dempsey\", \"Max Schmeling\").\nFights(\"Jack Dempsey\", \"Paulino Uzcudun\").\nFights(\"Jack Dempsey\", \"Primo Carnera\").\nFights(\"Jack Dempsey\", \"Kingfish Levinsky\").\nFights(\"Jack Dempsey\", \"Harry Greb\").\nFights(\"Jack Dempsey\", \"Tommy Loughran\").\nFights(\"Jack Dempsey\", \"Max Baer\").\nFights(\"Jack Dempsey\", \"Jersey Joe Walcott\").\nFights(\"Jack Dempsey\", \"Rocky Marciano\").\nFights(\"Jack Dempsey\", \"Ezzard Charles\").\nFights(\"Jack Dempsey\", \"Joe Louis\").\nFights(\"Jack Dempsey\", \"Cleveland Williams\").\nFights(\"Jack Dempsey\", \"Sonny Liston\").\nFights(\"Jack Dempsey\", \"Muhammad Ali\").\nFights(\"Jack Dempsey\", \"George Foreman\").\nFights(\"Jack Dempsey\", \"Joe Frazier\").\nFights(\"Jack Dempsey\", \"Ken Norton\").\nFights(\"Jack Dempsey\", \"George Chuvalo\").\nFights(\"Jack Dempsey\", \"Floyd Patterson\").\nFights(\"Jack Dempsey\", \"Sonny Liston\").\nFights(\"Jack Dempsey\", \"Muhammad Ali\").\nFights(\"Jack Dempsey\", \"George Foreman\").\nFights(\"Jack Dempsey\", \"Joe Frazier\").\nFights(\"Jack Dempsey\", \"Ken Norton\").\nFights(\"Jack Dempsey\", \"George Chuvalo\").\nFights(\"Jack Dempsey\", \"Floyd Patterson\").\nFights(\"Jack Dempsey\", \"Sonny Liston\").\nFights(\"Jack Dempsey\", \"Muhammad Ali\").\nFights(\"Jack Dempsey\", \"George Foreman\").\nFights(\"Jack Dempsey\", \"Joe Frazier\").\nFights(\"Jack Dempsey\", \"Ken Norton\").\nFights(\"Jack Dempsey\", \"George Chuvalo\").\nFights(\"Jack Dempsey\", \"Floyd Patterson\").\nFights(\"Jack Dempsey\", \"Sonny Liston\").\nFights(\"Jack Dempsey\", \"Muhammad Ali\").\nFights(\"Jack Dempsey\", \"George Foreman\").\nFights(\"Jack Dempsey\", \"Joe Frazier\").\nFights(\"Jack Dempsey\", \"Ken Norton\").\nFights(\"Jack Dempsey\", \"George Chuvalo\").\nFights(\"Jack Dempsey\", \"Floyd Patterson\").\nFights(\"Jack Dempsey\", \"Sonny Liston\").\nFights(\"Jack Dempsey\","]}
{"id": 707, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Peter Griffin\", \"brewing\").\n.decl Is_expert(Person:symbol, Skill:symbol)\nIs_expert(\"Peter Griffin\", \"brewing\").\n.decl Answer()\nAnswer() :- Has_skill(\"Peter Griffin\", \"brewing\").\nAnswer() :- Has_skill(\"Peter Griffin\", skill), Is_expert(\"Peter Griffin\", skill).\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Peter Griffin\", \"brewing\").\n.decl Is_expert(Person:symbol, Skill:symbol)\nIs_expert(\"Peter Griffin\", \"brewing\").\n.decl Answer()\nAnswer() :- Has_skill(\"Peter Griffin\", \"brewing\").\nAnswer() :- Has_skill(\"Peter Griffin\", skill), Is_expert(\"Peter Griffin\", skill).\n.output Answer"]}
{"id": 708, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"primate\", 10).\nHas_mass(\"backpack\", 5).\n.decl Answer()\nAnswer() :- Has_mass(\"primate\", mass1), Has_mass(\"backpack\", mass2), mass1 <= mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"primate\", 10).\nHas_mass(\"backpack\", 5).\n.decl Answer()\nAnswer() :- Has_mass(\"primate\", mass1), Has_mass(\"backpack\", mass2), mass1 <= mass2.\n.output Answer"]}
{"id": 709, "answer": true, "completion": ".decl Has_album_sales(Artist:symbol, Album_sales:float)\nHas_album_sales(\"AC/DC\", 100).\nHas_album_sales(\"Lil Wayne\", 10).\n.decl Cost_of_bomber(Bomber:symbol, Cost:float)\nCost_of_bomber(\"B-52\", 100).\n.decl Answer()\nAnswer() :- Has_album_sales(\"AC/DC\", album_sales1), Has_album_sales(\"Lil Wayne\", album_sales2), Cost_of_bomber(\"B-52\", cost), album_sales1 > album_sales2 * cost.\n.output Answer", "completions": [".decl Has_album_sales(Artist:symbol, Album_sales:float)\nHas_album_sales(\"AC/DC\", 100).\nHas_album_sales(\"Lil Wayne\", 10).\n.decl Cost_of_bomber(Bomber:symbol, Cost:float)\nCost_of_bomber(\"B-52\", 100).\n.decl Answer()\nAnswer() :- Has_album_sales(\"AC/DC\", album_sales1), Has_album_sales(\"Lil Wayne\", album_sales2), Cost_of_bomber(\"B-52\", cost), album_sales1 > album_sales2 * cost.\n.output Answer"]}
{"id": 710, "answer": true, "completion": ".decl Has_genre(Artist:symbol, Genre:symbol)\nHas_genre(\"Ludacris\", \"hip hop\").\nHas_genre(\"Pearl Jam\", \"rock\").\nHas_genre(\"Binaural\", \"rock\").\n.decl Answer()\nAnswer() :- Has_genre(\"Ludacris\", genre1), Has_genre(\"Binaural\", genre2), genre1 = genre2.\n.output Answer", "completions": [".decl Has_genre(Artist:symbol, Genre:symbol)\nHas_genre(\"Ludacris\", \"hip hop\").\nHas_genre(\"Pearl Jam\", \"rock\").\nHas_genre(\"Binaural\", \"rock\").\n.decl Answer()\nAnswer() :- Has_genre(\"Ludacris\", genre1), Has_genre(\"Binaural\", genre2), genre1 = genre2.\n.output Answer"]}
{"id": 711, "answer": false, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Palm Beach\", 0.0007).\nHas_area(\"palm of your hand\", 0.0005).\n.decl Answer()\nAnswer() :- Has_area(\"Palm Beach\", area1), Has_area(\"palm of your hand\", area2), area1 <= area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Palm Beach\", 0.0007).\nHas_area(\"palm of your hand\", 0.0005).\n.decl Answer()\nAnswer() :- Has_area(\"Palm Beach\", area1), Has_area(\"palm of your hand\", area2), area1 <= area2.\n.output Answer"]}
{"id": 712, "answer": true, "completion": ".decl Lasts_for_n_years(Food:symbol, N_years:float)\nLasts_for_n_years(\"pickled cucumbers\", 100).\n.decl Answer()\nAnswer() :- Lasts_for_n_years(\"pickled cucumbers\", n_years1), n_years1 >= 1000.\n.output Answer", "completions": [".decl Lasts_for_n_years(Food:symbol, N_years:float)\nLasts_for_n_years(\"pickled cucumbers\", 100).\n.decl Answer()\nAnswer() :- Lasts_for_n_years(\"pickled cucumbers\", n_years1), n_years1 >= 1000.\n.output Answer"]}
{"id": 713, "answer": true, "completion": ".decl Exists(Thing:symbol)\nExists(\"Earth's magnetic field\").\n.decl Answer()\nAnswer() :- Exists(\"Earth's magnetic field\"), !, Exists(\"Flat Earthers\").\n.output Answer", "completions": [".decl Exists(Thing:symbol)\nExists(\"Earth's magnetic field\").\n.decl Answer()\nAnswer() :- Exists(\"Earth's magnetic field\"), !, Exists(\"Flat Earthers\").\n.output Answer"]}
{"id": 714, "answer": true, "completion": ".decl Needs_food(Animal:symbol)\nNeeds_food(\"cat\").\nNeeds_food(\"hamster\").\nNeeds_food(\"bird\").\nNeeds_food(\"snake\").\n.decl Answer()\nAnswer() :- Needs_food(animal), !, animal != \"Lolcat\".\n.output Answer", "completions": [".decl Needs_food(Animal:symbol)\nNeeds_food(\"cat\").\nNeeds_food(\"hamster\").\nNeeds_food(\"bird\").\nNeeds_food(\"snake\").\n.decl Answer()\nAnswer() :- Needs_food(animal), !, animal != \"Lolcat\".\n.output Answer"]}
{"id": 715, "answer": true, "completion": ".decl Has_boiling_point(Object:symbol, Boiling_point:float)\nHas_boiling_point(\"nickel\", 2913).\n.decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"outer core of the earth\", 6000).\n.decl Answer()\nAnswer() :- Has_boiling_point(\"nickel\", boiling_point), Has_temperature(\"outer core of the earth\", temperature), boiling_point <= temperature.\n.output Answer", "completions": [".decl Has_boiling_point(Object:symbol, Boiling_point:float)\nHas_boiling_point(\"nickel\", 2913).\n.decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"outer core of the earth\", 6000).\n.decl Answer()\nAnswer() :- Has_boiling_point(\"nickel\", boiling_point), Has_temperature(\"outer core of the earth\", temperature), boiling_point <= temperature.\n.output Answer"]}
{"id": 716, "answer": true, "completion": ".decl Found_in_waters(Fish:symbol, Waters:symbol)\nFound_in_waters(\"brown rock fish\", \"Saint Kitts and Nevis\").\n.decl Answer()\nAnswer() :- Found_in_waters(\"brown rock fish\", \"Saint Kitts and Nevis\").\n.output Answer\n\n\n", "completions": [".decl Found_in_waters(Fish:symbol, Waters:symbol)\nFound_in_waters(\"brown rock fish\", \"Saint Kitts and Nevis\").\n.decl Answer()\nAnswer() :- Found_in_waters(\"brown rock fish\", \"Saint Kitts and Nevis\").\n.output Answer\n\n\n"]}
{"id": 717, "answer": true, "completion": ".decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"January\", 31).\nHas_n_days(\"February\", 28).\nHas_n_days(\"March\", 31).\nHas_n_days(\"April\", 30).\nHas_n_days(\"May\", 31).\nHas_n_days(\"June\", 30).\nHas_n_days(\"July\", 31).\nHas_n_days(\"August\", 31).\nHas_n_days(\"September\", 30).\nHas_n_days(\"October\", 31).\nHas_n_days(\"November\", 30).\nHas_n_days(\"December\", 31).\n.decl Has_n_unlucky_days(Month:symbol, N_unlucky_days:float)\nHas_n_unlucky_days(\"January\", 2).\nHas_n_unlucky_days(\"February\", 2).\nHas_n_unlucky_days(\"March\", 2).\nHas_n_unlucky_days(\"April\", 2).\nHas_n_unlucky_days(\"May\", 2).\nHas_n_unlucky_days(\"June\", 2).\nHas_n_unlucky_days(\"July\", 2).\nHas_n_unlucky_days(\"August\", 2).\nHas_n_unlucky_days(\"September\", 2).\nHas_n_unlucky_days(\"October\", 2).\nHas_n_unlucky_days(\"November\", 2).\nHas_n_unlucky_days(\"December\", 2).\n.decl Answer()\nAnswer() :- Has_n_days(\"January\", n_days1), Has_n_unlucky_days(\"January\", n_unlucky_days1), n_days1 > n_unlucky_days1.\nAnswer() :- Has_n_days(\"February\", n_days2), Has_n_unlucky_days(\"February\", n_unlucky_days2), n_days2 > n_unlucky_days2.\nAnswer() :- Has_n_days(\"March\", n_days3), Has_n_unlucky_days(\"March\", n_unlucky_days3), n_days3 > n_unlucky_days3.\nAnswer() :- Has_n_days(\"April\", n_days4), Has_n_unlucky_days(\"April\", n_unlucky_days4), n_days4 > n_unlucky_days4.\nAnswer() :- Has_n_days(\"May\", n_days5), Has_n_unlucky_days(\"May\", n_unlucky_days5), n_days5 > n_unlucky_days5.\nAnswer() :- Has_n_days(\"June\", n_days6), Has_n_unlucky_days(\"June\", n_unlucky_days6), n_days6 > n_unlucky_days6.\nAnswer() :- Has_n_days(\"July\", n_days7), Has_n_unlucky_days(\"July\", n_unlucky_days7), n_days7 > n_unlucky_days7.\nAnswer() :- Has_n_days(\"August\", n_days8), Has_n_unlucky_days(\"August\", n_unlucky_days8), n_days8 > n_unlucky_days8.\nAnswer() :- Has_n_days(\"September", "completions": [".decl Has_n_days(Month:symbol, N_days:float)\nHas_n_days(\"January\", 31).\nHas_n_days(\"February\", 28).\nHas_n_days(\"March\", 31).\nHas_n_days(\"April\", 30).\nHas_n_days(\"May\", 31).\nHas_n_days(\"June\", 30).\nHas_n_days(\"July\", 31).\nHas_n_days(\"August\", 31).\nHas_n_days(\"September\", 30).\nHas_n_days(\"October\", 31).\nHas_n_days(\"November\", 30).\nHas_n_days(\"December\", 31).\n.decl Has_n_unlucky_days(Month:symbol, N_unlucky_days:float)\nHas_n_unlucky_days(\"January\", 2).\nHas_n_unlucky_days(\"February\", 2).\nHas_n_unlucky_days(\"March\", 2).\nHas_n_unlucky_days(\"April\", 2).\nHas_n_unlucky_days(\"May\", 2).\nHas_n_unlucky_days(\"June\", 2).\nHas_n_unlucky_days(\"July\", 2).\nHas_n_unlucky_days(\"August\", 2).\nHas_n_unlucky_days(\"September\", 2).\nHas_n_unlucky_days(\"October\", 2).\nHas_n_unlucky_days(\"November\", 2).\nHas_n_unlucky_days(\"December\", 2).\n.decl Answer()\nAnswer() :- Has_n_days(\"January\", n_days1), Has_n_unlucky_days(\"January\", n_unlucky_days1), n_days1 > n_unlucky_days1.\nAnswer() :- Has_n_days(\"February\", n_days2), Has_n_unlucky_days(\"February\", n_unlucky_days2), n_days2 > n_unlucky_days2.\nAnswer() :- Has_n_days(\"March\", n_days3), Has_n_unlucky_days(\"March\", n_unlucky_days3), n_days3 > n_unlucky_days3.\nAnswer() :- Has_n_days(\"April\", n_days4), Has_n_unlucky_days(\"April\", n_unlucky_days4), n_days4 > n_unlucky_days4.\nAnswer() :- Has_n_days(\"May\", n_days5), Has_n_unlucky_days(\"May\", n_unlucky_days5), n_days5 > n_unlucky_days5.\nAnswer() :- Has_n_days(\"June\", n_days6), Has_n_unlucky_days(\"June\", n_unlucky_days6), n_days6 > n_unlucky_days6.\nAnswer() :- Has_n_days(\"July\", n_days7), Has_n_unlucky_days(\"July\", n_unlucky_days7), n_days7 > n_unlucky_days7.\nAnswer() :- Has_n_days(\"August\", n_days8), Has_n_unlucky_days(\"August\", n_unlucky_days8), n_days8 > n_unlucky_days8.\nAnswer() :- Has_n_days(\"September"]}
{"id": 718, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"cell\", 0.00001).\nHas_volume(\"shoebox\", 0.001).\n.decl Answer()\nAnswer() :- Has_volume(\"cell\", volume1), Has_volume(\"shoebox\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"cell\", 0.00001).\nHas_volume(\"shoebox\", 0.001).\n.decl Answer()\nAnswer() :- Has_volume(\"cell\", volume1), Has_volume(\"shoebox\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 719, "answer": false, "completion": ".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Isaac Newton\", \"B.A.\").\nHas_degree(\"Isaac Newton\", \"M.A.\").\nHas_degree(\"Isaac Newton\", \"F.R.S.\").\n.decl Answer()\nAnswer() :- Has_degree(\"Isaac Newton\", \"F.R.S.\").\n.output Answer", "completions": [".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"Isaac Newton\", \"B.A.\").\nHas_degree(\"Isaac Newton\", \"M.A.\").\nHas_degree(\"Isaac Newton\", \"F.R.S.\").\n.decl Answer()\nAnswer() :- Has_degree(\"Isaac Newton\", \"F.R.S.\").\n.output Answer"]}
{"id": 720, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"bodies\", 60).\nHas_mass(\"air\", 0).\n.decl Answer()\nAnswer() :- Has_mass(\"bodies\", mass1), Has_mass(\"air\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"bodies\", 60).\nHas_mass(\"air\", 0).\n.decl Answer()\nAnswer() :- Has_mass(\"bodies\", mass1), Has_mass(\"air\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 721, "answer": false, "completion": ".decl Lives_near(Animal:symbol, Place:symbol)\nLives_near(\"moose\", \"Arendelle\").\n.decl Used_for_work(Animal:symbol, Work:symbol)\nUsed_for_work(\"moose\", \"pulling sleds\").\n.decl Answer()\nAnswer() :- Lives_near(\"moose\", \"Arendelle\"), Used_for_work(\"moose\", \"pulling sleds\").\n.output Answer", "completions": [".decl Lives_near(Animal:symbol, Place:symbol)\nLives_near(\"moose\", \"Arendelle\").\n.decl Used_for_work(Animal:symbol, Work:symbol)\nUsed_for_work(\"moose\", \"pulling sleds\").\n.decl Answer()\nAnswer() :- Lives_near(\"moose\", \"Arendelle\"), Used_for_work(\"moose\", \"pulling sleds\").\n.output Answer"]}
{"id": 722, "answer": true, "completion": ".decl Has_letter(Roman_numeral:symbol, Letter:symbol)\nHas_letter(\"I\", \"I\").\nHas_letter(\"I\", \"V\").\nHas_letter(\"I\", \"X\").\nHas_letter(\"V\", \"I\").\nHas_letter(\"V\", \"V\").\nHas_letter(\"V\", \"X\").\nHas_letter(\"X\", \"I\").\nHas_letter(\"X\", \"V\").\nHas_letter(\"X\", \"X\").\n.decl Answer()\nAnswer() :- Has_letter(roman_numeral, \"H\"), Has_letter(roman_numeral, letter1), Has_letter(roman_numeral, letter2), letter1 != \"H\", letter2 != \"H\".\n.output Answer", "completions": [".decl Has_letter(Roman_numeral:symbol, Letter:symbol)\nHas_letter(\"I\", \"I\").\nHas_letter(\"I\", \"V\").\nHas_letter(\"I\", \"X\").\nHas_letter(\"V\", \"I\").\nHas_letter(\"V\", \"V\").\nHas_letter(\"V\", \"X\").\nHas_letter(\"X\", \"I\").\nHas_letter(\"X\", \"V\").\nHas_letter(\"X\", \"X\").\n.decl Answer()\nAnswer() :- Has_letter(roman_numeral, \"H\"), Has_letter(roman_numeral, letter1), Has_letter(roman_numeral, letter2), letter1 != \"H\", letter2 != \"H\".\n.output Answer"]}
{"id": 723, "answer": true, "completion": ".decl Is_ingredient(Food:symbol, Cuisine:symbol)\nIs_ingredient(\"pig meat\", \"Hawaiian\").\n.decl Is_inedible(Food:symbol, Cuisine:symbol)\nIs_inedible(\"pig meat\", \"Hawaiian\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"pig meat\", cuisine), Is_inedible(\"pig meat\", cuisine).\n.output Answer\n\n\n", "completions": [".decl Is_ingredient(Food:symbol, Cuisine:symbol)\nIs_ingredient(\"pig meat\", \"Hawaiian\").\n.decl Is_inedible(Food:symbol, Cuisine:symbol)\nIs_inedible(\"pig meat\", \"Hawaiian\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"pig meat\", cuisine), Is_inedible(\"pig meat\", cuisine).\n.output Answer\n\n\n"]}
{"id": 724, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"wearing sandals\", \"outside\").\nHappens_in_place(\"wearing sandals\", \"Esperanza Base\").\n.decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"outside\", -10).\nHas_temperature(\"Esperanza Base\", -10).\n.decl Answer()\nAnswer() :- Happens_in_place(\"wearing sandals\", place), Has_temperature(place, temperature), temperature >= 0.\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"wearing sandals\", \"outside\").\nHappens_in_place(\"wearing sandals\", \"Esperanza Base\").\n.decl Has_temperature(Place:symbol, Temperature:float)\nHas_temperature(\"outside\", -10).\nHas_temperature(\"Esperanza Base\", -10).\n.decl Answer()\nAnswer() :- Happens_in_place(\"wearing sandals\", place), Has_temperature(place, temperature), temperature >= 0.\n.output Answer"]}
{"id": 725, "answer": true, "completion": ".decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"The Little Prince\", \"flowers\").\n.decl Answer()\nAnswer() :- Has_allergy(\"The Little Prince\", \"flowers\").\n.output Answer", "completions": [".decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"The Little Prince\", \"flowers\").\n.decl Answer()\nAnswer() :- Has_allergy(\"The Little Prince\", \"flowers\").\n.output Answer"]}
{"id": 726, "answer": true, "completion": ".decl Teaches(Course:symbol, Topic:symbol)\nTeaches(\"cell biology\", \"life cycle of Al Qaeda\").\n.decl Answer()\nAnswer() :- Teaches(\"cell biology\", \"life cycle of Al Qaeda\").\n.output Answer", "completions": [".decl Teaches(Course:symbol, Topic:symbol)\nTeaches(\"cell biology\", \"life cycle of Al Qaeda\").\n.decl Answer()\nAnswer() :- Teaches(\"cell biology\", \"life cycle of Al Qaeda\").\n.output Answer"]}
{"id": 727, "answer": false, "completion": ".decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"Coca\", \"caffeine\").\nHas_ingredient(\"Coca\", \"sugar\").\nHas_ingredient(\"Coca\", \"phosphoric acid\").\nHas_ingredient(\"Coca\", \"vanillin\").\nHas_ingredient(\"Coca\", \"cocaine\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Coca\", \"cocaine\").\n.output Answer", "completions": [".decl Has_ingredient(Drink:symbol, Ingredient:symbol)\nHas_ingredient(\"Coca\", \"caffeine\").\nHas_ingredient(\"Coca\", \"sugar\").\nHas_ingredient(\"Coca\", \"phosphoric acid\").\nHas_ingredient(\"Coca\", \"vanillin\").\nHas_ingredient(\"Coca\", \"cocaine\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Coca\", \"cocaine\").\n.output Answer"]}
{"id": 728, "answer": true, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Justin Bieber vote\", \"October\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"Justin Bieber vote\", \"October\").\n.output Answer", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Justin Bieber vote\", \"October\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"Justin Bieber vote\", \"October\").\n.output Answer"]}
{"id": 729, "answer": true, "completion": ".decl Uses(Person:symbol, Ingredient:symbol)\nUses(\"Gordon Ramsey\", \"salt\").\nUses(\"Gordon Ramsey\", \"pepper\").\n.decl Answer()\nAnswer() :- Uses(\"Gordon Ramsey\", \"uranium\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Ingredient:symbol)\nUses(\"Gordon Ramsey\", \"salt\").\nUses(\"Gordon Ramsey\", \"pepper\").\n.decl Answer()\nAnswer() :- Uses(\"Gordon Ramsey\", \"uranium\").\n.output Answer"]}
{"id": 730, "answer": true, "completion": ".decl Appreciates(Person_A:symbol, Person_B:symbol)\nAppreciates(\"Eiffel\", \"Stephen Sauvestre\").\nAppreciates(\"Tokyo Tower designers\", \"Eiffel\").\n.decl Answer()\nAnswer() :- Appreciates(\"Tokyo Tower designers\", \"Stephen Sauvestre\").\n.output Answer\n\n\n", "completions": [".decl Appreciates(Person_A:symbol, Person_B:symbol)\nAppreciates(\"Eiffel\", \"Stephen Sauvestre\").\nAppreciates(\"Tokyo Tower designers\", \"Eiffel\").\n.decl Answer()\nAnswer() :- Appreciates(\"Tokyo Tower designers\", \"Stephen Sauvestre\").\n.output Answer\n\n\n"]}
{"id": 731, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Cerebral palsy\", 3).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Wizard of Oz Scarecrow\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Wizard of Oz Scarecrow\", n_years1), Last_n_years(\"Cerebral palsy\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Cerebral palsy\", 3).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Wizard of Oz Scarecrow\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Wizard of Oz Scarecrow\", n_years1), Last_n_years(\"Cerebral palsy\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 732, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"hamster birth\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"leap year\", n_years1), Last_n_years(\"hamster birth\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"hamster birth\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"leap year\", n_years1), Last_n_years(\"hamster birth\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 733, "answer": true, "completion": ".decl Left_for(Person1:symbol, Person2:symbol)\nLeft_for(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcke\").\n.decl Answer()\nAnswer() :- Left_for(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcke\").\n.output Answer", "completions": [".decl Left_for(Person1:symbol, Person2:symbol)\nLeft_for(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcke\").\n.decl Answer()\nAnswer() :- Left_for(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcke\").\n.output Answer"]}
{"id": 734, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"baby gray whale\", 15).\nHas_length(\"tractor-trailer\", 53).\n.decl Answer()\nAnswer() :- Has_length(\"baby gray whale\", length1), Has_length(\"tractor-trailer\", length2), length1 < length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"baby gray whale\", 15).\nHas_length(\"tractor-trailer\", 53).\n.decl Answer()\nAnswer() :- Has_length(\"baby gray whale\", length1), Has_length(\"tractor-trailer\", length2), length1 < length2.\n.output Answer"]}
{"id": 735, "answer": false, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"black pepper\", \"ground bell peppers\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"black pepper\", \"ground bell peppers\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"black pepper\", \"ground bell peppers\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"black pepper\", \"ground bell peppers\").\n.output Answer\n\n"]}
{"id": 736, "answer": true, "completion": ".decl Teaches(Teacher:symbol, Student:symbol, Skill:symbol)\nTeaches(\"Native American tribes\", \"Spaniards\", \"how to cultivate maize\").\n.decl Answer()\nAnswer() :- Teaches(teacher, \"Spaniards\", skill).\n.output Answer", "completions": [".decl Teaches(Teacher:symbol, Student:symbol, Skill:symbol)\nTeaches(\"Native American tribes\", \"Spaniards\", \"how to cultivate maize\").\n.decl Answer()\nAnswer() :- Teaches(teacher, \"Spaniards\", skill).\n.output Answer"]}
{"id": 737, "answer": false, "completion": ".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Elisha Graves Otis\", \"elevator\").\n.decl Used(Person:symbol, Invention:symbol)\nUsed(\"Sojourner Truth\", \"elevator\").\n.decl Answer()\nAnswer() :- Invented(\"Elisha Graves Otis\", \"elevator\"), Used(\"Sojourner Truth\", \"elevator\").\n.output Answer", "completions": [".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Elisha Graves Otis\", \"elevator\").\n.decl Used(Person:symbol, Invention:symbol)\nUsed(\"Sojourner Truth\", \"elevator\").\n.decl Answer()\nAnswer() :- Invented(\"Elisha Graves Otis\", \"elevator\"), Used(\"Sojourner Truth\", \"elevator\").\n.output Answer"]}
{"id": 738, "answer": true, "completion": ".decl Is_at(Person:symbol, Place:symbol)\nIs_at(\"you\", \"supermarket\").\nIs_at(\"psychologist\", \"office\").\n.decl Answer()\nAnswer() :- Is_at(\"you\", \"supermarket\"), Is_at(\"psychologist\", \"office\").\n.output Answer", "completions": [".decl Is_at(Person:symbol, Place:symbol)\nIs_at(\"you\", \"supermarket\").\nIs_at(\"psychologist\", \"office\").\n.decl Answer()\nAnswer() :- Is_at(\"you\", \"supermarket\"), Is_at(\"psychologist\", \"office\").\n.output Answer"]}
{"id": 739, "answer": true, "completion": ".decl Has_n_movies(Play:symbol, N_movies:float)\nHas_n_movies(\"Hamlet\", 5).\nHas_n_movies(\"Comedy of Errors\", 1).\n.decl Answer()\nAnswer() :- Has_n_movies(\"Hamlet\", n_movies1), Has_n_movies(\"Comedy of Errors\", n_movies2), n_movies1 > n_movies2.\n.output Answer", "completions": [".decl Has_n_movies(Play:symbol, N_movies:float)\nHas_n_movies(\"Hamlet\", 5).\nHas_n_movies(\"Comedy of Errors\", 1).\n.decl Answer()\nAnswer() :- Has_n_movies(\"Hamlet\", n_movies1), Has_n_movies(\"Comedy of Errors\", n_movies2), n_movies1 > n_movies2.\n.output Answer"]}
{"id": 740, "answer": true, "completion": ".decl Has_graffiti(Place:symbol)\nHas_graffiti(\"Alcatraz\").\n.decl Answer()\nAnswer() :- Has_graffiti(\"Alcatraz\").\n.output Answer\n\n", "completions": [".decl Has_graffiti(Place:symbol)\nHas_graffiti(\"Alcatraz\").\n.decl Answer()\nAnswer() :- Has_graffiti(\"Alcatraz\").\n.output Answer\n\n"]}
{"id": 741, "answer": true, "completion": ".decl Has_distance(Route:symbol, Distance:float)\nHas_distance(\"Pyrenees\", 200).\n.decl Has_speed(Runner:symbol, Speed:float)\nHas_speed(\"elite runner\", 30).\n.decl Answer()\nAnswer() :- Has_distance(\"Pyrenees\", distance), Has_speed(\"elite runner\", speed), distance / speed <= 24.\n.output Answer", "completions": [".decl Has_distance(Route:symbol, Distance:float)\nHas_distance(\"Pyrenees\", 200).\n.decl Has_speed(Runner:symbol, Speed:float)\nHas_speed(\"elite runner\", 30).\n.decl Answer()\nAnswer() :- Has_distance(\"Pyrenees\", distance), Has_speed(\"elite runner\", speed), distance / speed <= 24.\n.output Answer"]}
{"id": 742, "answer": true, "completion": ".decl Can_see(Person:symbol, Object:symbol)\nCan_see(\"person\", \"moon\").\nCan_see(\"person\", \"Wembley Arena\").\n.decl Answer()\nAnswer() :- Can_see(\"person\", \"moon\"), Can_see(\"person\", \"Wembley Arena\").\n.output Answer", "completions": [".decl Can_see(Person:symbol, Object:symbol)\nCan_see(\"person\", \"moon\").\nCan_see(\"person\", \"Wembley Arena\").\n.decl Answer()\nAnswer() :- Can_see(\"person\", \"moon\"), Can_see(\"person\", \"Wembley Arena\").\n.output Answer"]}
{"id": 743, "answer": true, "completion": ".decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"top row\", \"Q\").\nHas_letter(\"top row\", \"W\").\nHas_letter(\"top row\", \"E\").\nHas_letter(\"top row\", \"R\").\nHas_letter(\"top row\", \"T\").\nHas_letter(\"top row\", \"Y\").\nHas_letter(\"top row\", \"U\").\nHas_letter(\"top row\", \"I\").\nHas_letter(\"top row\", \"O\").\nHas_letter(\"top row\", \"P\").\n.decl Answer()\nAnswer() :- Has_letter(\"top row\", letter1), Has_letter(\"top row\", letter2), Has_letter(\"top row\", letter3), Has_letter(\"top row\", letter4), Has_letter(\"top row\", letter5), Has_letter(\"top row\", letter6), Has_letter(\"top row\", letter7), Has_letter(\"top row\", letter8), Has_letter(\"top row\", letter9), Has_letter(\"top row\", letter10), letter1 != letter2, letter1 != letter3, letter1 != letter4, letter1 != letter5, letter1 != letter6, letter1 != letter7, letter1 != letter8, letter1 != letter9, letter1 != letter10, letter2 != letter3, letter2 != letter4, letter2 != letter5, letter2 != letter6, letter2 != letter7, letter2 != letter8, letter2 != letter9, letter2 != letter10, letter3 != letter4, letter3 != letter5, letter3 != letter6, letter3 != letter7, letter3 != letter8, letter3 != letter9, letter3 != letter10, letter4 != letter5, letter4 != letter6, letter4 != letter7, letter4 != letter8, letter4 != letter9, letter4 != letter10, letter5 != letter6, letter5 != letter7, letter5 != letter8, letter5 != letter9, letter5 != letter10, letter6 != letter7, letter6 != letter8, letter6 != letter9, letter6 != letter10, letter7 != letter8, letter7 != letter9, letter7 != letter10, letter8 != letter9, letter8 != letter10, letter9 != letter10, letter1 = letter10, letter2 = letter9, letter3 = letter8, letter4 = letter7, letter5 = letter6.\n.output Answer", "completions": [".decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"top row\", \"Q\").\nHas_letter(\"top row\", \"W\").\nHas_letter(\"top row\", \"E\").\nHas_letter(\"top row\", \"R\").\nHas_letter(\"top row\", \"T\").\nHas_letter(\"top row\", \"Y\").\nHas_letter(\"top row\", \"U\").\nHas_letter(\"top row\", \"I\").\nHas_letter(\"top row\", \"O\").\nHas_letter(\"top row\", \"P\").\n.decl Answer()\nAnswer() :- Has_letter(\"top row\", letter1), Has_letter(\"top row\", letter2), Has_letter(\"top row\", letter3), Has_letter(\"top row\", letter4), Has_letter(\"top row\", letter5), Has_letter(\"top row\", letter6), Has_letter(\"top row\", letter7), Has_letter(\"top row\", letter8), Has_letter(\"top row\", letter9), Has_letter(\"top row\", letter10), letter1 != letter2, letter1 != letter3, letter1 != letter4, letter1 != letter5, letter1 != letter6, letter1 != letter7, letter1 != letter8, letter1 != letter9, letter1 != letter10, letter2 != letter3, letter2 != letter4, letter2 != letter5, letter2 != letter6, letter2 != letter7, letter2 != letter8, letter2 != letter9, letter2 != letter10, letter3 != letter4, letter3 != letter5, letter3 != letter6, letter3 != letter7, letter3 != letter8, letter3 != letter9, letter3 != letter10, letter4 != letter5, letter4 != letter6, letter4 != letter7, letter4 != letter8, letter4 != letter9, letter4 != letter10, letter5 != letter6, letter5 != letter7, letter5 != letter8, letter5 != letter9, letter5 != letter10, letter6 != letter7, letter6 != letter8, letter6 != letter9, letter6 != letter10, letter7 != letter8, letter7 != letter9, letter7 != letter10, letter8 != letter9, letter8 != letter10, letter9 != letter10, letter1 = letter10, letter2 = letter9, letter3 = letter8, letter4 = letter7, letter5 = letter6.\n.output Answer"]}
{"id": 744, "answer": true, "completion": ".decl Found_on(Object:symbol, Planet:symbol)\nFound_on(\"tumulus\", \"Mars\").\n.decl Answer()\nAnswer() :- Found_on(\"tumulus\", \"Mars\").\n.output Answer", "completions": [".decl Found_on(Object:symbol, Planet:symbol)\nFound_on(\"tumulus\", \"Mars\").\n.decl Answer()\nAnswer() :- Found_on(\"tumulus\", \"Mars\").\n.output Answer"]}
{"id": 745, "answer": true, "completion": ".decl Is_a_symbol_of(Thing:symbol, Virtue:symbol)\nIs_a_symbol_of(\"Pan\", \"virtue\").\nIs_a_symbol_of(\"Pan\", \"virginity\").\n.decl Answer()\nAnswer() :- Is_a_symbol_of(\"Pan\", virtue), Is_a_symbol_of(\"Pan\", \"virginity\").\n.output Answer", "completions": [".decl Is_a_symbol_of(Thing:symbol, Virtue:symbol)\nIs_a_symbol_of(\"Pan\", \"virtue\").\nIs_a_symbol_of(\"Pan\", \"virginity\").\n.decl Answer()\nAnswer() :- Is_a_symbol_of(\"Pan\", virtue), Is_a_symbol_of(\"Pan\", \"virginity\").\n.output Answer"]}
{"id": 746, "answer": true, "completion": ".decl Is_older(Person1:symbol, Person2:symbol)\nIs_older(\"Mike Pence\", \"Justin Bieber\").\n.decl Is_younger(Person1:symbol, Person2:symbol)\nIs_younger(\"Justin Bieber\", \"Mike Pence\").\n.decl Answer()\nAnswer() :- Is_younger(\"Justin Bieber\", \"Mike Pence\").\n.output Answer", "completions": [".decl Is_older(Person1:symbol, Person2:symbol)\nIs_older(\"Mike Pence\", \"Justin Bieber\").\n.decl Is_younger(Person1:symbol, Person2:symbol)\nIs_younger(\"Justin Bieber\", \"Mike Pence\").\n.decl Answer()\nAnswer() :- Is_younger(\"Justin Bieber\", \"Mike Pence\").\n.output Answer"]}
{"id": 747, "answer": true, "completion": ".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Shirley Bassey\", \"Diamonds Are Forever\").\n.decl Answer()\nAnswer() :- Has_title(\"Shirley Bassey\", \"Diamonds Are Forever\").\n.output Answer", "completions": [".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Shirley Bassey\", \"Diamonds Are Forever\").\n.decl Answer()\nAnswer() :- Has_title(\"Shirley Bassey\", \"Diamonds Are Forever\").\n.output Answer"]}
{"id": 748, "answer": true, "completion": ".decl Won_revolution(Country:symbol)\nWon_revolution(\"France\").\n.decl Answer()\nAnswer() :- Won_revolution(\"France\").\n.output Answer", "completions": [".decl Won_revolution(Country:symbol)\nWon_revolution(\"France\").\n.decl Answer()\nAnswer() :- Won_revolution(\"France\").\n.output Answer"]}
{"id": 749, "answer": true, "completion": ".decl Is_legal(Game:symbol)\nIs_legal(\"Super Mario Bros.\").\n.decl Is_emulator(Game:symbol)\nIs_emulator(\"Super Mario Bros.\").\n.decl Answer()\nAnswer() :- Is_legal(game), Is_emulator(game).\n.output Answer", "completions": [".decl Is_legal(Game:symbol)\nIs_legal(\"Super Mario Bros.\").\n.decl Is_emulator(Game:symbol)\nIs_emulator(\"Super Mario Bros.\").\n.decl Answer()\nAnswer() :- Is_legal(game), Is_emulator(game).\n.output Answer"]}
{"id": 750, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Jason\", 4).\n.decl Answer()\nAnswer() :- Has_n_children(\"Jason\", n_children), n_children >= 4.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Jason\", 4).\n.decl Answer()\nAnswer() :- Has_n_children(\"Jason\", n_children), n_children >= 4.\n.output Answer"]}
{"id": 751, "answer": true, "completion": ".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Tony Bennett\", \"Dominick\").\nHas_middle_name(\"Ronda Rousey\", \"Jeanie\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Tony Bennett\", middle_name), Has_middle_name(\"Ronda Rousey\", middle_name).\n.output Answer\n\n", "completions": [".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Tony Bennett\", \"Dominick\").\nHas_middle_name(\"Ronda Rousey\", \"Jeanie\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Tony Bennett\", middle_name), Has_middle_name(\"Ronda Rousey\", middle_name).\n.output Answer\n\n"]}
{"id": 752, "answer": false, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"store bought milk\", \"cream\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"store bought milk\", \"cream\").\n.output Answer\n\n", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"store bought milk\", \"cream\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"store bought milk\", \"cream\").\n.output Answer\n\n"]}
{"id": 753, "answer": false, "completion": ".decl Found_in(Element:symbol, Place:symbol)\nFound_in(\"silicon\", \"California\").\n.decl Answer()\nAnswer() :- Found_in(\"silicon\", \"California\").\n.output Answer", "completions": [".decl Found_in(Element:symbol, Place:symbol)\nFound_in(\"silicon\", \"California\").\n.decl Answer()\nAnswer() :- Found_in(\"silicon\", \"California\").\n.output Answer"]}
{"id": 754, "answer": false, "completion": ".decl Has_letter(Word:symbol, Letter:symbol)\nHas_letter(\"Torah\", \"a\").\nHas_letter(\"Torah\", \"h\").\nHas_letter(\"Torah\", \"o\").\nHas_letter(\"Torah\", \"r\").\nHas_letter(\"Torah\", \"t\").\nHas_letter(\"Torah\", \"y\").\nHas_letter(\"Torah\", \"A\").\nHas_letter(\"Torah\", \"H\").\nHas_letter(\"Torah\", \"O\").\nHas_letter(\"Torah\", \"R\").\nHas_letter(\"Torah\", \"T\").\nHas_letter(\"Torah\", \"Y\").\nHas_letter(\"Torah\", \"b\").\nHas_letter(\"Torah\", \"B\").\nHas_letter(\"Torah\", \"c\").\nHas_letter(\"Torah\", \"C\").\nHas_letter(\"Torah\", \"d\").\nHas_letter(\"Torah\", \"D\").\nHas_letter(\"Torah\", \"e\").\nHas_letter(\"Torah\", \"E\").\nHas_letter(\"Torah\", \"f\").\nHas_letter(\"Torah\", \"F\").\nHas_letter(\"Torah\", \"g\").\nHas_letter(\"Torah\", \"G\").\nHas_letter(\"Torah\", \"i\").\nHas_letter(\"Torah\", \"I\").\nHas_letter(\"Torah\", \"j\").\nHas_letter(\"Torah\", \"J\").\nHas_letter(\"Torah\", \"k\").\nHas_letter(\"Torah\", \"K\").\nHas_letter(\"Torah\", \"l\").\nHas_letter(\"Torah\", \"L\").\nHas_letter(\"Torah\", \"m\").\nHas_letter(\"Torah\", \"M\").\nHas_letter(\"Torah\", \"n\").\nHas_letter(\"Torah\", \"N\").\nHas_letter(\"Torah\", \"p\").\nHas_letter(\"Torah\", \"P\").\nHas_letter(\"Torah\", \"q\").\nHas_letter(\"Torah\", \"Q\").\nHas_letter(\"Torah\", \"s\").\nHas_letter(\"Torah\", \"S\").\nHas_letter(\"Torah\", \"u\").\nHas_letter(\"Torah\", \"U\").\nHas_letter(\"Torah\", \"v\").\nHas_letter(\"Torah\", \"V\").\nHas_letter(\"Torah\", \"w\").\nHas_letter(\"Torah\", \"W\").\nHas_letter(\"Torah\", \"x\").\nHas_letter(\"Torah\", \"X\").\nHas_letter(\"Torah\", \"z\").\nHas_letter(\"Torah\", \"Z\").\nHas_letter(\"Torah\", \"0\").\nHas_letter(\"Torah\", \"1\").\nHas_letter(\"Torah\", \"2\").\nHas_letter(\"Torah\", \"3\").\nHas_letter(\"Torah\", \"4\").\nHas_letter(\"Torah\", \"5\").\nHas_letter(\"Torah\", \"6\").\nHas_letter(\"Torah\", \"7\").\nHas_letter(\"Torah\", \"8\").\nHas_letter(\"Torah\", \"9\").\nHas_letter(\"Torah\", \" \").\nHas_letter(\"Torah\", \".\").\nHas_letter(\"Torah\", \",\").\nHas_letter(\"Torah\", \";\").\nHas_letter(\"Torah\", \":\").\nHas_letter(\"Torah\", \"'\").\nHas_letter(\"Torah\", \"\\\"\").\nHas_letter(\"Torah\", \"(\").\nHas_letter(\"Torah\", \")\").\nHas_letter", "completions": [".decl Has_letter(Word:symbol, Letter:symbol)\nHas_letter(\"Torah\", \"a\").\nHas_letter(\"Torah\", \"h\").\nHas_letter(\"Torah\", \"o\").\nHas_letter(\"Torah\", \"r\").\nHas_letter(\"Torah\", \"t\").\nHas_letter(\"Torah\", \"y\").\nHas_letter(\"Torah\", \"A\").\nHas_letter(\"Torah\", \"H\").\nHas_letter(\"Torah\", \"O\").\nHas_letter(\"Torah\", \"R\").\nHas_letter(\"Torah\", \"T\").\nHas_letter(\"Torah\", \"Y\").\nHas_letter(\"Torah\", \"b\").\nHas_letter(\"Torah\", \"B\").\nHas_letter(\"Torah\", \"c\").\nHas_letter(\"Torah\", \"C\").\nHas_letter(\"Torah\", \"d\").\nHas_letter(\"Torah\", \"D\").\nHas_letter(\"Torah\", \"e\").\nHas_letter(\"Torah\", \"E\").\nHas_letter(\"Torah\", \"f\").\nHas_letter(\"Torah\", \"F\").\nHas_letter(\"Torah\", \"g\").\nHas_letter(\"Torah\", \"G\").\nHas_letter(\"Torah\", \"i\").\nHas_letter(\"Torah\", \"I\").\nHas_letter(\"Torah\", \"j\").\nHas_letter(\"Torah\", \"J\").\nHas_letter(\"Torah\", \"k\").\nHas_letter(\"Torah\", \"K\").\nHas_letter(\"Torah\", \"l\").\nHas_letter(\"Torah\", \"L\").\nHas_letter(\"Torah\", \"m\").\nHas_letter(\"Torah\", \"M\").\nHas_letter(\"Torah\", \"n\").\nHas_letter(\"Torah\", \"N\").\nHas_letter(\"Torah\", \"p\").\nHas_letter(\"Torah\", \"P\").\nHas_letter(\"Torah\", \"q\").\nHas_letter(\"Torah\", \"Q\").\nHas_letter(\"Torah\", \"s\").\nHas_letter(\"Torah\", \"S\").\nHas_letter(\"Torah\", \"u\").\nHas_letter(\"Torah\", \"U\").\nHas_letter(\"Torah\", \"v\").\nHas_letter(\"Torah\", \"V\").\nHas_letter(\"Torah\", \"w\").\nHas_letter(\"Torah\", \"W\").\nHas_letter(\"Torah\", \"x\").\nHas_letter(\"Torah\", \"X\").\nHas_letter(\"Torah\", \"z\").\nHas_letter(\"Torah\", \"Z\").\nHas_letter(\"Torah\", \"0\").\nHas_letter(\"Torah\", \"1\").\nHas_letter(\"Torah\", \"2\").\nHas_letter(\"Torah\", \"3\").\nHas_letter(\"Torah\", \"4\").\nHas_letter(\"Torah\", \"5\").\nHas_letter(\"Torah\", \"6\").\nHas_letter(\"Torah\", \"7\").\nHas_letter(\"Torah\", \"8\").\nHas_letter(\"Torah\", \"9\").\nHas_letter(\"Torah\", \" \").\nHas_letter(\"Torah\", \".\").\nHas_letter(\"Torah\", \",\").\nHas_letter(\"Torah\", \";\").\nHas_letter(\"Torah\", \":\").\nHas_letter(\"Torah\", \"'\").\nHas_letter(\"Torah\", \"\\\"\").\nHas_letter(\"Torah\", \"(\").\nHas_letter(\"Torah\", \")\").\nHas_letter"]}
{"id": 755, "answer": true, "completion": ".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"person\", 100).\n.decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"celery\", 6).\n.decl Answer()\nAnswer() :- Has_weight(\"person\", weight), Has_calories(\"celery\", calories), weight <= calories.\n.output Answer", "completions": [".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"person\", 100).\n.decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"celery\", 6).\n.decl Answer()\nAnswer() :- Has_weight(\"person\", weight), Has_calories(\"celery\", calories), weight <= calories.\n.output Answer"]}
{"id": 756, "answer": false, "completion": ".decl Has_storage(Device:symbol, Storage:float)\nHas_storage(\"500GB USB device\", 500).\n.decl Takes_storage(Show:symbol, Storage:float)\nTakes_storage(\"Netflix show\", 1).\n.decl Answer()\nAnswer() :- Has_storage(\"500GB USB device\", storage1), Takes_storage(\"Netflix show\", storage2), 10*storage2 <= storage1.\n.output Answer", "completions": [".decl Has_storage(Device:symbol, Storage:float)\nHas_storage(\"500GB USB device\", 500).\n.decl Takes_storage(Show:symbol, Storage:float)\nTakes_storage(\"Netflix show\", 1).\n.decl Answer()\nAnswer() :- Has_storage(\"500GB USB device\", storage1), Takes_storage(\"Netflix show\", storage2), 10*storage2 <= storage1.\n.output Answer"]}
{"id": 757, "answer": true, "completion": ".decl Can_deadlift(Person:symbol, Animal:symbol)\nCan_deadlift(\"Arnold Schwarzenegger\", \"adult Black rhinoceros\").\n.decl Answer()\nAnswer() :- Can_deadlift(\"Arnold Schwarzenegger\", \"adult Black rhinoceros\").\n.output Answer", "completions": [".decl Can_deadlift(Person:symbol, Animal:symbol)\nCan_deadlift(\"Arnold Schwarzenegger\", \"adult Black rhinoceros\").\n.decl Answer()\nAnswer() :- Can_deadlift(\"Arnold Schwarzenegger\", \"adult Black rhinoceros\").\n.output Answer"]}
{"id": 758, "answer": true, "completion": ".decl Produced_by(Show:symbol, Producer:symbol)\nProduced_by(\"Star Wars: The Clone Wars\", \"Lucasfilm\").\nProduced_by(\"Star Wars: The Clone Wars\", \"Cartoon Network\").\nProduced_by(\"Star Wars: The Clone Wars\", \"Disney XD\").\nProduced_by(\"Star Wars Rebels\", \"Lucasfilm\").\nProduced_by(\"Star Wars Rebels\", \"Disney XD\").\n.decl Answer()\nAnswer() :- Produced_by(\"Star Wars: The Clone Wars\", \"Disney XD\"), Produced_by(\"Star Wars Rebels\", \"Disney XD\").\n.output Answer", "completions": [".decl Produced_by(Show:symbol, Producer:symbol)\nProduced_by(\"Star Wars: The Clone Wars\", \"Lucasfilm\").\nProduced_by(\"Star Wars: The Clone Wars\", \"Cartoon Network\").\nProduced_by(\"Star Wars: The Clone Wars\", \"Disney XD\").\nProduced_by(\"Star Wars Rebels\", \"Lucasfilm\").\nProduced_by(\"Star Wars Rebels\", \"Disney XD\").\n.decl Answer()\nAnswer() :- Produced_by(\"Star Wars: The Clone Wars\", \"Disney XD\"), Produced_by(\"Star Wars Rebels\", \"Disney XD\").\n.output Answer"]}
{"id": 759, "answer": false, "completion": ".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Jonas Salk\", \"polio vaccine\").\n.decl Saved_life(Person:symbol, Medicine:symbol)\nSaved_life(\"Jonas Salk\", \"polio medicine\").\n.decl Answer()\nAnswer() :- Invented(\"Jonas Salk\", \"polio vaccine\"), Saved_life(\"Jonas Salk\", \"polio medicine\").\n.output Answer", "completions": [".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Jonas Salk\", \"polio vaccine\").\n.decl Saved_life(Person:symbol, Medicine:symbol)\nSaved_life(\"Jonas Salk\", \"polio medicine\").\n.decl Answer()\nAnswer() :- Invented(\"Jonas Salk\", \"polio vaccine\"), Saved_life(\"Jonas Salk\", \"polio medicine\").\n.output Answer"]}
{"id": 760, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"vegan\", \"vegetables\").\nEats(\"vegan\", \"fruit\").\nEats(\"vegan\", \"nuts\").\nEats(\"vegan\", \"seeds\").\nEats(\"vegan\", \"tofu\").\nEats(\"vegan\", \"tempeh\").\nEats(\"vegan\", \"soy milk\").\nEats(\"vegan\", \"vegan margarine\").\nEats(\"vegan\", \"vegan mayonnaise\").\nEats(\"vegan\", \"vegan sour cream\").\nEats(\"vegan\", \"vegan cream cheese\").\nEats(\"vegan\", \"vegan chocolate\").\nEats(\"vegan\", \"vegan candy\").\nEats(\"vegan\", \"vegan cookies\").\nEats(\"vegan\", \"vegan cake\").\nEats(\"vegan\", \"vegan pie\").\nEats(\"vegan\", \"vegan chips\").\nEats(\"vegan\", \"vegan pretzels\").\nEats(\"vegan\", \"vegan popcorn\").\nEats(\"vegan\", \"vegan crackers\").\nEats(\"vegan\", \"vegan rice\").\nEats(\"vegan\", \"vegan pasta\").\nEats(\"vegan\", \"vegan bread\").\nEats(\"vegan\", \"vegan cereal\").\nEats(\"vegan\", \"vegan oatmeal\").\nEats(\"vegan\", \"vegan quinoa\").\nEats(\"vegan\", \"vegan beans\").\nEats(\"vegan\", \"vegan lentils\").\nEats(\"vegan\", \"vegan tofu\").\nEats(\"vegan\", \"vegan tempeh\").\nEats(\"vegan\", \"vegan seitan\").\nEats(\"vegan\", \"vegan textured vegetable protein\").\nEats(\"vegan\", \"vegan miso\").\nEats(\"vegan\", \"vegan tamari\").\nEats(\"vegan\", \"vegan soy sauce\").\nEats(\"vegan\", \"vegan teriyaki sauce\").\nEats(\"vegan\", \"vegan hoisin sauce\").\nEats(\"vegan\", \"vegan stir-fry sauce\").\nEats(\"vegan\", \"vegan barbecue sauce\").\nEats(\"vegan\", \"vegan hot sauce\").\nEats(\"vegan\", \"vegan ketchup\").\nEats(\"vegan\", \"vegan mustard\").\nEats(\"vegan\", \"vegan salsa\").\nEats(\"vegan\", \"vegan guacamole\").\nEats(\"vegan\", \"vegan hummus\").\nEats(\"vegan\", \"vegan refried beans\").\nEats(\"vegan\", \"vegan vegetable broth\").\nEats(\"vegan\", \"vegan bouillon\").\nEats(\"vegan\", \"vegan vegetable stock\").\nEats(\"vegan\", \"vegan vegetable soup\").\nEats(\"vegan\", \"vegan minestrone\").\nEats(\"vegan\", \"vegan vegetable chili\").\nEats(\"vegan\", \"vegan lentil soup\").\nEats(\"vegan\", \"vegan black bean soup\").\nEats(\"vegan\", \"vegan split pea soup\").\nEats(\"vegan\", \"vegan vegetable stew\").\nEats(\"vegan\", \"vegan vegetable curry\").\nEats(\"vegan\", \"vegan vegetable stir-fry\").\nEats(\"vegan\", \"vegan vegetable fajitas\").\nEats(\"vegan\", \"vegan vegetable tacos\").\nEats(\"vegan\", \"ve", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"vegan\", \"vegetables\").\nEats(\"vegan\", \"fruit\").\nEats(\"vegan\", \"nuts\").\nEats(\"vegan\", \"seeds\").\nEats(\"vegan\", \"tofu\").\nEats(\"vegan\", \"tempeh\").\nEats(\"vegan\", \"soy milk\").\nEats(\"vegan\", \"vegan margarine\").\nEats(\"vegan\", \"vegan mayonnaise\").\nEats(\"vegan\", \"vegan sour cream\").\nEats(\"vegan\", \"vegan cream cheese\").\nEats(\"vegan\", \"vegan chocolate\").\nEats(\"vegan\", \"vegan candy\").\nEats(\"vegan\", \"vegan cookies\").\nEats(\"vegan\", \"vegan cake\").\nEats(\"vegan\", \"vegan pie\").\nEats(\"vegan\", \"vegan chips\").\nEats(\"vegan\", \"vegan pretzels\").\nEats(\"vegan\", \"vegan popcorn\").\nEats(\"vegan\", \"vegan crackers\").\nEats(\"vegan\", \"vegan rice\").\nEats(\"vegan\", \"vegan pasta\").\nEats(\"vegan\", \"vegan bread\").\nEats(\"vegan\", \"vegan cereal\").\nEats(\"vegan\", \"vegan oatmeal\").\nEats(\"vegan\", \"vegan quinoa\").\nEats(\"vegan\", \"vegan beans\").\nEats(\"vegan\", \"vegan lentils\").\nEats(\"vegan\", \"vegan tofu\").\nEats(\"vegan\", \"vegan tempeh\").\nEats(\"vegan\", \"vegan seitan\").\nEats(\"vegan\", \"vegan textured vegetable protein\").\nEats(\"vegan\", \"vegan miso\").\nEats(\"vegan\", \"vegan tamari\").\nEats(\"vegan\", \"vegan soy sauce\").\nEats(\"vegan\", \"vegan teriyaki sauce\").\nEats(\"vegan\", \"vegan hoisin sauce\").\nEats(\"vegan\", \"vegan stir-fry sauce\").\nEats(\"vegan\", \"vegan barbecue sauce\").\nEats(\"vegan\", \"vegan hot sauce\").\nEats(\"vegan\", \"vegan ketchup\").\nEats(\"vegan\", \"vegan mustard\").\nEats(\"vegan\", \"vegan salsa\").\nEats(\"vegan\", \"vegan guacamole\").\nEats(\"vegan\", \"vegan hummus\").\nEats(\"vegan\", \"vegan refried beans\").\nEats(\"vegan\", \"vegan vegetable broth\").\nEats(\"vegan\", \"vegan bouillon\").\nEats(\"vegan\", \"vegan vegetable stock\").\nEats(\"vegan\", \"vegan vegetable soup\").\nEats(\"vegan\", \"vegan minestrone\").\nEats(\"vegan\", \"vegan vegetable chili\").\nEats(\"vegan\", \"vegan lentil soup\").\nEats(\"vegan\", \"vegan black bean soup\").\nEats(\"vegan\", \"vegan split pea soup\").\nEats(\"vegan\", \"vegan vegetable stew\").\nEats(\"vegan\", \"vegan vegetable curry\").\nEats(\"vegan\", \"vegan vegetable stir-fry\").\nEats(\"vegan\", \"vegan vegetable fajitas\").\nEats(\"vegan\", \"vegan vegetable tacos\").\nEats(\"vegan\", \"ve"]}
{"id": 761, "answer": true, "completion": ".decl Handles_cargo(Port:symbol, Cargo:symbol, Quantity:float)\nHandles_cargo(\"Port of Baltimore\", \"ginger\", 0.1).\n.decl Produces_cargo(Country:symbol, Cargo:symbol, Quantity:float)\nProduces_cargo(\"China\", \"ginger\", 0.8).\nProduces_cargo(\"India\", \"ginger\", 0.2).\n.decl Answer()\nAnswer() :- Handles_cargo(\"Port of Baltimore\", cargo, quantity1), Produces_cargo(country, cargo, quantity2), quantity1 >= quantity2.\n.output Answer", "completions": [".decl Handles_cargo(Port:symbol, Cargo:symbol, Quantity:float)\nHandles_cargo(\"Port of Baltimore\", \"ginger\", 0.1).\n.decl Produces_cargo(Country:symbol, Cargo:symbol, Quantity:float)\nProduces_cargo(\"China\", \"ginger\", 0.8).\nProduces_cargo(\"India\", \"ginger\", 0.2).\n.decl Answer()\nAnswer() :- Handles_cargo(\"Port of Baltimore\", cargo, quantity1), Produces_cargo(country, cargo, quantity2), quantity1 >= quantity2.\n.output Answer"]}
{"id": 762, "answer": true, "completion": ".decl Flies_to(Person:symbol, Planet:symbol)\nFlies_to(\"Rachel Carson\", \"Earth\").\n.decl Answer()\nAnswer() :- Flies_to(\"Rachel Carson\", \"Moon\").\n.output Answer", "completions": [".decl Flies_to(Person:symbol, Planet:symbol)\nFlies_to(\"Rachel Carson\", \"Earth\").\n.decl Answer()\nAnswer() :- Flies_to(\"Rachel Carson\", \"Moon\").\n.output Answer"]}
{"id": 763, "answer": true, "completion": ".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"J. D. Salinger\", \"Sol Salinger\").\n.decl Has_daughter(Person:symbol, Daughter:symbol)\nHas_daughter(\"Sol Salinger\", \"Margaret Salinger\").\n.decl Answer()\nAnswer() :- Has_father(\"J. D. Salinger\", \"Sol Salinger\"), Has_daughter(\"Sol Salinger\", \"Margaret Salinger\").\n.output Answer", "completions": [".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"J. D. Salinger\", \"Sol Salinger\").\n.decl Has_daughter(Person:symbol, Daughter:symbol)\nHas_daughter(\"Sol Salinger\", \"Margaret Salinger\").\n.decl Answer()\nAnswer() :- Has_father(\"J. D. Salinger\", \"Sol Salinger\"), Has_daughter(\"Sol Salinger\", \"Margaret Salinger\").\n.output Answer"]}
{"id": 764, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"ancient Olympics crown\", 0.1).\n.decl Has_area(Object:symbol, Area:float)\nHas_area(\"tonsure\", 0.1).\n.decl Answer()\nAnswer() :- Has_weight(\"ancient Olympics crown\", weight1), Has_area(\"tonsure\", area1), weight1 < area1.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"ancient Olympics crown\", 0.1).\n.decl Has_area(Object:symbol, Area:float)\nHas_area(\"tonsure\", 0.1).\n.decl Answer()\nAnswer() :- Has_weight(\"ancient Olympics crown\", weight1), Has_area(\"tonsure\", area1), weight1 < area1.\n.output Answer"]}
{"id": 765, "answer": true, "completion": ".decl Needs_per_day(Animal:symbol, Food:symbol, N_food:float)\nNeeds_per_day(\"ocelot\", \"bee hummingbird\", 0.0005).\n.decl Answer()\nAnswer() :- Needs_per_day(\"ocelot\", \"bee hummingbird\", n_food), n_food <= 1.\n.output Answer", "completions": [".decl Needs_per_day(Animal:symbol, Food:symbol, N_food:float)\nNeeds_per_day(\"ocelot\", \"bee hummingbird\", 0.0005).\n.decl Answer()\nAnswer() :- Needs_per_day(\"ocelot\", \"bee hummingbird\", n_food), n_food <= 1.\n.output Answer"]}
{"id": 766, "answer": true, "completion": ".decl Eats(Animal:symbol, Food:symbol)\nEats(\"Koala\", \"Eucalyptus\").\nEats(\"Koala\", \"meat\").\n.decl Answer()\nAnswer() :- Eats(\"Koala\", \"Eucalyptus\"), !, Eats(\"Koala\", \"meat\").\n.output Answer", "completions": [".decl Eats(Animal:symbol, Food:symbol)\nEats(\"Koala\", \"Eucalyptus\").\nEats(\"Koala\", \"meat\").\n.decl Answer()\nAnswer() :- Eats(\"Koala\", \"Eucalyptus\"), !, Eats(\"Koala\", \"meat\").\n.output Answer"]}
{"id": 767, "answer": true, "completion": ".decl Has_fetlock(Animal:symbol)\nHas_fetlock(\"horseradish\").\n.decl Answer()\nAnswer() :- Has_fetlock(\"horseradish\").\n.output Answer", "completions": [".decl Has_fetlock(Animal:symbol)\nHas_fetlock(\"horseradish\").\n.decl Answer()\nAnswer() :- Has_fetlock(\"horseradish\").\n.output Answer"]}
{"id": 768, "answer": false, "completion": ".decl Answer()\nAnswer() :- !.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !.\n.output Answer"]}
{"id": 769, "answer": true, "completion": ".decl Plays(Musician:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial metal\").\nPlays(\"Rammstein\", \"neue deutsche härte\").\n.decl Answer()\nAnswer() :- Plays(\"Rammstein\", \"smooth jazz\").\n.output Answer", "completions": [".decl Plays(Musician:symbol, Genre:symbol)\nPlays(\"Rammstein\", \"industrial metal\").\nPlays(\"Rammstein\", \"neue deutsche härte\").\n.decl Answer()\nAnswer() :- Plays(\"Rammstein\", \"smooth jazz\").\n.output Answer"]}
{"id": 770, "answer": true, "completion": ".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Maya Angelou\", \"poet\").\nHas_occupation(\"Guy Johnson\", \"poet\").\n.decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Guy Johnson\", \"Maya Angelou\").\n.decl Answer()\nAnswer() :- Has_occupation(\"Maya Angelou\", occupation), Has_occupation(child, occupation), Has_parent(child, \"Maya Angelou\").\n.output Answer", "completions": [".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Maya Angelou\", \"poet\").\nHas_occupation(\"Guy Johnson\", \"poet\").\n.decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Guy Johnson\", \"Maya Angelou\").\n.decl Answer()\nAnswer() :- Has_occupation(\"Maya Angelou\", occupation), Has_occupation(child, occupation), Has_parent(child, \"Maya Angelou\").\n.output Answer"]}
{"id": 771, "answer": true, "completion": ".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Alfa Romeo\", 4.6, 1.8, 1.4).\nHas_dimensions(\"barn\", 30, 15, 15).\n.decl Answer()\nAnswer() :- Has_dimensions(\"Alfa Romeo\", length1, width1, height1), Has_dimensions(\"barn\", length2, width2, height2), length1 <= length2, width1 <= width2, height1 <= height2.\n.output Answer", "completions": [".decl Has_dimensions(Object:symbol, Length:float, Width:float, Height:float)\nHas_dimensions(\"Alfa Romeo\", 4.6, 1.8, 1.4).\nHas_dimensions(\"barn\", 30, 15, 15).\n.decl Answer()\nAnswer() :- Has_dimensions(\"Alfa Romeo\", length1, width1, height1), Has_dimensions(\"barn\", length2, width2, height2), length1 <= length2, width1 <= width2, height1 <= height2.\n.output Answer"]}
{"id": 772, "answer": true, "completion": ".decl Holds_opinion(Person:symbol, Opinion:symbol)\nHolds_opinion(\"James Watson\", \"Africans are inferior to Europeans\").\n.decl Answer()\nAnswer() :- Holds_opinion(\"James Watson\", \"Africans are inferior to Europeans\").\n.output Answer", "completions": [".decl Holds_opinion(Person:symbol, Opinion:symbol)\nHolds_opinion(\"James Watson\", \"Africans are inferior to Europeans\").\n.decl Answer()\nAnswer() :- Holds_opinion(\"James Watson\", \"Africans are inferior to Europeans\").\n.output Answer"]}
{"id": 773, "answer": true, "completion": ".decl Teaches(Teacher:symbol, Student:symbol)\nTeaches(\"Ms. Smith\", \"P. G. Wodehouse\").\n.decl Is_in_grade(Student:symbol, Grade:float)\nIs_in_grade(\"P. G. Wodehouse\", 2).\n.decl Answer()\nAnswer() :- Teaches(teacher, \"P. G. Wodehouse\"), Is_in_grade(\"P. G. Wodehouse\", grade), grade = 2.\n.output Answer", "completions": [".decl Teaches(Teacher:symbol, Student:symbol)\nTeaches(\"Ms. Smith\", \"P. G. Wodehouse\").\n.decl Is_in_grade(Student:symbol, Grade:float)\nIs_in_grade(\"P. G. Wodehouse\", 2).\n.decl Answer()\nAnswer() :- Teaches(teacher, \"P. G. Wodehouse\"), Is_in_grade(\"P. G. Wodehouse\", grade), grade = 2.\n.output Answer"]}
{"id": 774, "answer": true, "completion": ".decl Supports(Person:symbol, Group:symbol)\nSupports(\"Richard Wagner\", \"Nazis\").\n.decl Answer()\nAnswer() :- Supports(\"Richard Wagner\", \"Nazis\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Group:symbol)\nSupports(\"Richard Wagner\", \"Nazis\").\n.decl Answer()\nAnswer() :- Supports(\"Richard Wagner\", \"Nazis\").\n.output Answer"]}
{"id": 775, "answer": true, "completion": ".decl Recognizes_as_saint(Church:symbol, Person:symbol)\nRecognizes_as_saint(\"Roman Catholic Church\", \"Alexander Nevsky\").\nRecognizes_as_saint(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.decl Answer()\nAnswer() :- Recognizes_as_saint(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.output Answer", "completions": [".decl Recognizes_as_saint(Church:symbol, Person:symbol)\nRecognizes_as_saint(\"Roman Catholic Church\", \"Alexander Nevsky\").\nRecognizes_as_saint(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.decl Answer()\nAnswer() :- Recognizes_as_saint(\"Ukrainian Greek Catholic Church\", \"Alexander Nevsky\").\n.output Answer"]}
{"id": 776, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Stanley Cup Finals\", \"Toronto\").\nHappens_in_place(\"Rock in Rio\", \"Brazil\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Stanley Cup Finals\", \"Toronto\"), Happens_in_place(\"Rock in Rio\", \"Brazil\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Stanley Cup Finals\", \"Toronto\").\nHappens_in_place(\"Rock in Rio\", \"Brazil\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Stanley Cup Finals\", \"Toronto\"), Happens_in_place(\"Rock in Rio\", \"Brazil\").\n.output Answer"]}
{"id": 777, "answer": true, "completion": ".decl Sails_for(Person:symbol, Country:symbol)\nSails_for(\"Christopher Columbus\", \"Spain\").\n.decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"Christopher Columbus\", \"Italy\").\n.decl Answer()\nAnswer() :- Sails_for(\"Christopher Columbus\", country1), Is_from(\"Christopher Columbus\", country2), country1 != country2.\n.output Answer", "completions": [".decl Sails_for(Person:symbol, Country:symbol)\nSails_for(\"Christopher Columbus\", \"Spain\").\n.decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"Christopher Columbus\", \"Italy\").\n.decl Answer()\nAnswer() :- Sails_for(\"Christopher Columbus\", country1), Is_from(\"Christopher Columbus\", country2), country1 != country2.\n.output Answer"]}
{"id": 778, "answer": true, "completion": ".decl Has_n_digits(Number:symbol, N_digits:float)\nHas_n_digits(\"Pi\", 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679).\n.decl Answer()\nAnswer() :- Has_n_digits(\"Pi\", n_digits).\n.output Answer", "completions": [".decl Has_n_digits(Number:symbol, N_digits:float)\nHas_n_digits(\"Pi\", 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679).\n.decl Answer()\nAnswer() :- Has_n_digits(\"Pi\", n_digits).\n.output Answer"]}
{"id": 779, "answer": true, "completion": ".decl Creators(Person:symbol, Work:symbol)\nCreators(\"Stan Lee\", \"Doctor Strange\").\nCreators(\"Steve Ditko\", \"Doctor Strange\").\nCreators(\"Bob Kane\", \"Batman\").\nCreators(\"Bill Finger\", \"Batman\").\n.decl Answer()\nAnswer() :- Creators(\"Stan Lee\", \"Doctor Strange\"), Creators(\"Stan Lee\", \"Batman\").\nAnswer() :- Creators(\"Steve Ditko\", \"Doctor Strange\"), Creators(\"Steve Ditko\", \"Batman\").\n.output Answer", "completions": [".decl Creators(Person:symbol, Work:symbol)\nCreators(\"Stan Lee\", \"Doctor Strange\").\nCreators(\"Steve Ditko\", \"Doctor Strange\").\nCreators(\"Bob Kane\", \"Batman\").\nCreators(\"Bill Finger\", \"Batman\").\n.decl Answer()\nAnswer() :- Creators(\"Stan Lee\", \"Doctor Strange\"), Creators(\"Stan Lee\", \"Batman\").\nAnswer() :- Creators(\"Steve Ditko\", \"Doctor Strange\"), Creators(\"Steve Ditko\", \"Batman\").\n.output Answer"]}
{"id": 780, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"hippo\", \"human\").\n.decl Answer()\nAnswer() :- Eats(\"hippo\", \"human\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"hippo\", \"human\").\n.decl Answer()\nAnswer() :- Eats(\"hippo\", \"human\").\n.output Answer"]}
{"id": 781, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Mixed martial arts\", \"Roman Colosseum\").\nHappens_in_place(\"Roman Colosseum games\", \"Roman Colosseum\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Mixed martial arts\", \"Roman Colosseum\"), !Happens_in_place(\"Roman Colosseum games\", \"Roman Colosseum\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Mixed martial arts\", \"Roman Colosseum\").\nHappens_in_place(\"Roman Colosseum games\", \"Roman Colosseum\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Mixed martial arts\", \"Roman Colosseum\"), !Happens_in_place(\"Roman Colosseum games\", \"Roman Colosseum\").\n.output Answer"]}
{"id": 782, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"groundhog day\", \"winter\").\n.decl In_state(State:symbol, Season:symbol)\nIn_state(\"New York\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"groundhog day\", season), In_state(\"New York\", season).\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"groundhog day\", \"winter\").\n.decl In_state(State:symbol, Season:symbol)\nIn_state(\"New York\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"groundhog day\", season), In_state(\"New York\", season).\n.output Answer"]}
{"id": 783, "answer": true, "completion": ".decl Has_topic(Presentation:symbol, Topic:symbol)\nHas_topic(\"presentation about post traumatic stress disorder\", \"post traumatic stress disorder\").\n.decl Is_relevant(Topic:symbol, Person:symbol)\nIs_relevant(\"post traumatic stress disorder\", \"Ariana Grande\").\n.decl Answer()\nAnswer() :- Has_topic(presentation, \"post traumatic stress disorder\"), Is_relevant(\"post traumatic stress disorder\", \"Ariana Grande\").\n.output Answer", "completions": [".decl Has_topic(Presentation:symbol, Topic:symbol)\nHas_topic(\"presentation about post traumatic stress disorder\", \"post traumatic stress disorder\").\n.decl Is_relevant(Topic:symbol, Person:symbol)\nIs_relevant(\"post traumatic stress disorder\", \"Ariana Grande\").\n.decl Answer()\nAnswer() :- Has_topic(presentation, \"post traumatic stress disorder\"), Is_relevant(\"post traumatic stress disorder\", \"Ariana Grande\").\n.output Answer"]}
{"id": 784, "answer": true, "completion": ".decl Has_coordinates(Location:symbol, Latitude:float, Longitude:float)\nHas_coordinates(\"All Nippon Airways\", 35.55, 139.78).\nHas_coordinates(\"beach\", 35.65, 139.75).\n.decl Answer()\nAnswer() :- Has_coordinates(\"All Nippon Airways\", latitude1, longitude1), Has_coordinates(\"beach\", latitude2, longitude2), latitude1 = latitude2, longitude1 = longitude2.\n.output Answer", "completions": [".decl Has_coordinates(Location:symbol, Latitude:float, Longitude:float)\nHas_coordinates(\"All Nippon Airways\", 35.55, 139.78).\nHas_coordinates(\"beach\", 35.65, 139.75).\n.decl Answer()\nAnswer() :- Has_coordinates(\"All Nippon Airways\", latitude1, longitude1), Has_coordinates(\"beach\", latitude2, longitude2), latitude1 = latitude2, longitude1 = longitude2.\n.output Answer"]}
{"id": 785, "answer": true, "completion": ".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Gettysburg Battlefield\", 5500).\n.decl Needs_area(Event:symbol, Area:float)\nNeeds_area(\"Superbowl Football Game\", 100000).\n.decl Answer()\nAnswer() :- Has_area(\"Gettysburg Battlefield\", area1), Needs_area(\"Superbowl Football Game\", area2), area1 < area2.\n.output Answer", "completions": [".decl Has_area(Place:symbol, Area:float)\nHas_area(\"Gettysburg Battlefield\", 5500).\n.decl Needs_area(Event:symbol, Area:float)\nNeeds_area(\"Superbowl Football Game\", 100000).\n.decl Answer()\nAnswer() :- Has_area(\"Gettysburg Battlefield\", area1), Needs_area(\"Superbowl Football Game\", area2), area1 < area2.\n.output Answer"]}
{"id": 786, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Pittsburgh Steelers logo\", \"black\").\nHas_color(\"Pittsburgh Steelers logo\", \"gold\").\nHas_color(\"Doctor Strange\", \"black\").\nHas_color(\"Doctor Strange\", \"gold\").\n.decl Answer()\nAnswer() :- Has_color(\"Pittsburgh Steelers logo\", color1), Has_color(\"Doctor Strange\", color2), color1 = color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Pittsburgh Steelers logo\", \"black\").\nHas_color(\"Pittsburgh Steelers logo\", \"gold\").\nHas_color(\"Doctor Strange\", \"black\").\nHas_color(\"Doctor Strange\", \"gold\").\n.decl Answer()\nAnswer() :- Has_color(\"Pittsburgh Steelers logo\", color1), Has_color(\"Doctor Strange\", color2), color1 = color2.\n.output Answer"]}
{"id": 787, "answer": false, "completion": ".decl Associated_with(Thing:symbol, Place:symbol)\nAssociated_with(\"Disney theme parks\", \"Disneyland\").\nAssociated_with(\"Disney theme parks\", \"Disney World\").\nAssociated_with(\"Disney theme parks\", \"Tokyo Disneyland\").\nAssociated_with(\"Disney theme parks\", \"Hong Kong Disneyland\").\nAssociated_with(\"Disney theme parks\", \"Shanghai Disneyland\").\n.decl Answer()\nAnswer() :- Associated_with(\"Disney theme parks\", place), Associated_with(\"Yeti\", place).\n.output Answer", "completions": [".decl Associated_with(Thing:symbol, Place:symbol)\nAssociated_with(\"Disney theme parks\", \"Disneyland\").\nAssociated_with(\"Disney theme parks\", \"Disney World\").\nAssociated_with(\"Disney theme parks\", \"Tokyo Disneyland\").\nAssociated_with(\"Disney theme parks\", \"Hong Kong Disneyland\").\nAssociated_with(\"Disney theme parks\", \"Shanghai Disneyland\").\n.decl Answer()\nAnswer() :- Associated_with(\"Disney theme parks\", place), Associated_with(\"Yeti\", place).\n.output Answer"]}
{"id": 788, "answer": true, "completion": ".decl Has_leaves(Tree:symbol, Season:symbol)\nHas_leaves(\"oak\", \"spring\").\nHas_leaves(\"oak\", \"summer\").\nHas_leaves(\"oak\", \"fall\").\n.decl Answer()\nAnswer() :- Has_leaves(\"oak\", \"winter\").\n.output Answer", "completions": [".decl Has_leaves(Tree:symbol, Season:symbol)\nHas_leaves(\"oak\", \"spring\").\nHas_leaves(\"oak\", \"summer\").\nHas_leaves(\"oak\", \"fall\").\n.decl Answer()\nAnswer() :- Has_leaves(\"oak\", \"winter\").\n.output Answer"]}
{"id": 789, "answer": true, "completion": ".decl Can_dial_911(Person:symbol, Age:float)\nCan_dial_911(\"Eddie Murphy\", 9).\n.decl Can_drive_car(Person:symbol, Age:float)\nCan_drive_car(\"Eddie Murphy\", 16).\n.decl Answer()\nAnswer() :- Can_dial_911(\"Eddie Murphy\", age1), Can_drive_car(\"Eddie Murphy\", age2), age1 < age2.\n.output Answer", "completions": [".decl Can_dial_911(Person:symbol, Age:float)\nCan_dial_911(\"Eddie Murphy\", 9).\n.decl Can_drive_car(Person:symbol, Age:float)\nCan_drive_car(\"Eddie Murphy\", 16).\n.decl Answer()\nAnswer() :- Can_dial_911(\"Eddie Murphy\", age1), Can_drive_car(\"Eddie Murphy\", age2), age1 < age2.\n.output Answer"]}
{"id": 790, "answer": true, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 791, "answer": false, "completion": ".decl Is_multicultural(Animal:symbol)\nIs_multicultural(\"Africanized bee\").\n.decl Answer()\nAnswer() :- Is_multicultural(\"Africanized bee\").\n.output Answer", "completions": [".decl Is_multicultural(Animal:symbol)\nIs_multicultural(\"Africanized bee\").\n.decl Answer()\nAnswer() :- Is_multicultural(\"Africanized bee\").\n.output Answer"]}
{"id": 792, "answer": false, "completion": ".decl Weighs(Object:symbol, Weight:float)\nWeighs(\"Eddie Hall\", 400).\nWeighs(\"world's largest cheeseburger\", 879).\n.decl Answer()\nAnswer() :- Weighs(\"Eddie Hall\", weight1), Weighs(\"world's largest cheeseburger\", weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Weighs(Object:symbol, Weight:float)\nWeighs(\"Eddie Hall\", 400).\nWeighs(\"world's largest cheeseburger\", 879).\n.decl Answer()\nAnswer() :- Weighs(\"Eddie Hall\", weight1), Weighs(\"world's largest cheeseburger\", weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 793, "answer": true, "completion": ".decl Needs_volume(Animal:symbol, Volume:float)\nNeeds_volume(\"ocean sunfish\", 2500).\nNeeds_volume(\"goldfish\", 10).\n.decl Answer()\nAnswer() :- Needs_volume(\"ocean sunfish\", volume1), Needs_volume(\"goldfish\", volume2), volume1 > volume2.\n.output Answer", "completions": [".decl Needs_volume(Animal:symbol, Volume:float)\nNeeds_volume(\"ocean sunfish\", 2500).\nNeeds_volume(\"goldfish\", 10).\n.decl Answer()\nAnswer() :- Needs_volume(\"ocean sunfish\", volume1), Needs_volume(\"goldfish\", volume2), volume1 > volume2.\n.output Answer"]}
{"id": 794, "answer": false, "completion": ".decl Exports(Country:symbol, Product:symbol)\nExports(\"United States\", \"Fair Trade products\").\nExports(\"Germany\", \"Fair Trade products\").\nExports(\"United Kingdom\", \"Fair Trade products\").\n.decl Answer()\nAnswer() :- Exports(\"United States\", \"Fair Trade products\"), Exports(country, \"Fair Trade products\"), Exports(\"United States\", product), Exports(country, product), Exports(\"United States\", product1), Exports(country1, product1), Exports(\"United States\", product2), Exports(country2, product2), Exports(\"United States\", product3), Exports(country3, product3), Exports(\"United States\", product4), Exports(country4, product4), Exports(\"United States\", product5), Exports(country5, product5), Exports(\"United States\", product6), Exports(country6, product6), Exports(\"United States\", product7), Exports(country7, product7), Exports(\"United States\", product8), Exports(country8, product8), Exports(\"United States\", product9), Exports(country9, product9), Exports(\"United States\", product10), Exports(country10, product10), Exports(\"United States\", product11), Exports(country11, product11), Exports(\"United States\", product12), Exports(country12, product12), Exports(\"United States\", product13), Exports(country13, product13), Exports(\"United States\", product14), Exports(country14, product14), Exports(\"United States\", product15), Exports(country15, product15), Exports(\"United States\", product16), Exports(country16, product16), Exports(\"United States\", product17), Exports(country17, product17), Exports(\"United States\", product18), Exports(country18, product18), Exports(\"United States\", product19), Exports(country19, product19), Exports(\"United States\", product20), Exports(country20, product20), Exports(\"United States\", product21), Exports(country21, product21), Exports(\"United States\", product22), Exports(country22, product22), Exports(\"United States\", product23), Exports(country23, product23), Exports(\"United States\", product24), Exports(country24, product24), Exports(\"United States\", product25), Exports(country25, product25), Exports(\"United States\", product26), Exports(country26, product26), Exports(\"United States\", product27), Exports(country27, product27), Exports(\"United States\", product28), Exports(country28, product28), Exports(\"United States\", product29), Exports(country29, product29), Exports(\"United States\", product30), Exports(country30, product30), Exports(\"United States\", product31), Exports(country31, product31), Exports(\"United States\", product32), Exports(country32, product32), Exports(\"United States\", product33), Exports(country33, product33), Exports(\"United States\", product34), Exports(country34, product34), Exports(\"United States\", product35), Exports(country35, product35), Exports(\"United States\", product36), Exports(country36, product36), Exports(\"United States\", product37), Exports(country37, product37), Exports(\"United States\", product38), Exports(country38, product38), Exports(\"United States\", product39), Exports(country39, product39), Exports", "completions": [".decl Exports(Country:symbol, Product:symbol)\nExports(\"United States\", \"Fair Trade products\").\nExports(\"Germany\", \"Fair Trade products\").\nExports(\"United Kingdom\", \"Fair Trade products\").\n.decl Answer()\nAnswer() :- Exports(\"United States\", \"Fair Trade products\"), Exports(country, \"Fair Trade products\"), Exports(\"United States\", product), Exports(country, product), Exports(\"United States\", product1), Exports(country1, product1), Exports(\"United States\", product2), Exports(country2, product2), Exports(\"United States\", product3), Exports(country3, product3), Exports(\"United States\", product4), Exports(country4, product4), Exports(\"United States\", product5), Exports(country5, product5), Exports(\"United States\", product6), Exports(country6, product6), Exports(\"United States\", product7), Exports(country7, product7), Exports(\"United States\", product8), Exports(country8, product8), Exports(\"United States\", product9), Exports(country9, product9), Exports(\"United States\", product10), Exports(country10, product10), Exports(\"United States\", product11), Exports(country11, product11), Exports(\"United States\", product12), Exports(country12, product12), Exports(\"United States\", product13), Exports(country13, product13), Exports(\"United States\", product14), Exports(country14, product14), Exports(\"United States\", product15), Exports(country15, product15), Exports(\"United States\", product16), Exports(country16, product16), Exports(\"United States\", product17), Exports(country17, product17), Exports(\"United States\", product18), Exports(country18, product18), Exports(\"United States\", product19), Exports(country19, product19), Exports(\"United States\", product20), Exports(country20, product20), Exports(\"United States\", product21), Exports(country21, product21), Exports(\"United States\", product22), Exports(country22, product22), Exports(\"United States\", product23), Exports(country23, product23), Exports(\"United States\", product24), Exports(country24, product24), Exports(\"United States\", product25), Exports(country25, product25), Exports(\"United States\", product26), Exports(country26, product26), Exports(\"United States\", product27), Exports(country27, product27), Exports(\"United States\", product28), Exports(country28, product28), Exports(\"United States\", product29), Exports(country29, product29), Exports(\"United States\", product30), Exports(country30, product30), Exports(\"United States\", product31), Exports(country31, product31), Exports(\"United States\", product32), Exports(country32, product32), Exports(\"United States\", product33), Exports(country33, product33), Exports(\"United States\", product34), Exports(country34, product34), Exports(\"United States\", product35), Exports(country35, product35), Exports(\"United States\", product36), Exports(country36, product36), Exports(\"United States\", product37), Exports(country37, product37), Exports(\"United States\", product38), Exports(country38, product38), Exports(\"United States\", product39), Exports(country39, product39), Exports"]}
{"id": 795, "answer": false, "completion": ".decl Studies(Discipline:symbol, Particle:symbol)\nStudies(\"Biochemistry\", \"proteins\").\nStudies(\"Biochemistry\", \"DNA\").\nStudies(\"Biochemistry\", \"RNA\").\nStudies(\"Biochemistry\", \"lipids\").\nStudies(\"Biochemistry\", \"carbohydrates\").\nStudies(\"Biochemistry\", \"nucleic acids\").\n.decl Answer()\nAnswer() :- Studies(\"Biochemistry\", \"gluons\").\n.output Answer", "completions": [".decl Studies(Discipline:symbol, Particle:symbol)\nStudies(\"Biochemistry\", \"proteins\").\nStudies(\"Biochemistry\", \"DNA\").\nStudies(\"Biochemistry\", \"RNA\").\nStudies(\"Biochemistry\", \"lipids\").\nStudies(\"Biochemistry\", \"carbohydrates\").\nStudies(\"Biochemistry\", \"nucleic acids\").\n.decl Answer()\nAnswer() :- Studies(\"Biochemistry\", \"gluons\").\n.output Answer"]}
{"id": 796, "answer": true, "completion": ".decl Has_mean_temperature(Planet:symbol, Mean_temperature:float)\nHas_mean_temperature(\"Phobos\", -20).\n.decl Answer()\nAnswer() :- Has_mean_temperature(\"Phobos\", mean_temperature), mean_temperature < 0.\n.output Answer\n\n\n", "completions": [".decl Has_mean_temperature(Planet:symbol, Mean_temperature:float)\nHas_mean_temperature(\"Phobos\", -20).\n.decl Answer()\nAnswer() :- Has_mean_temperature(\"Phobos\", mean_temperature), mean_temperature < 0.\n.output Answer\n\n\n"]}
{"id": 797, "answer": true, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Star Trek: The Next Generation\", 2364).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Star Trek: The Next Generation\", year), year >= 0.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Star Trek: The Next Generation\", 2364).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Star Trek: The Next Generation\", year), year >= 0.\n.output Answer"]}
{"id": 798, "answer": true, "completion": ".decl Watches(Person:symbol, Movie:symbol)\nWatches(\"Luke Skywalker\", \"Star Wars\").\n.decl Knows(Person:symbol, Character:symbol)\nKnows(\"Luke Skywalker\", \"Darth Vader\").\n.decl Answer()\nAnswer() :- Watches(person, \"Star Wars\"), Knows(person, \"Darth Vader\").\n.output Answer", "completions": [".decl Watches(Person:symbol, Movie:symbol)\nWatches(\"Luke Skywalker\", \"Star Wars\").\n.decl Knows(Person:symbol, Character:symbol)\nKnows(\"Luke Skywalker\", \"Darth Vader\").\n.decl Answer()\nAnswer() :- Watches(person, \"Star Wars\"), Knows(person, \"Darth Vader\").\n.output Answer"]}
{"id": 799, "answer": false, "completion": ".decl Has_label(Product:symbol, Label:symbol)\nHas_label(\"laptop\", \"fair trade\").\n.decl Answer()\nAnswer() :- Has_label(\"laptop\", \"fair trade\").\n.output Answer\n\n", "completions": [".decl Has_label(Product:symbol, Label:symbol)\nHas_label(\"laptop\", \"fair trade\").\n.decl Answer()\nAnswer() :- Has_label(\"laptop\", \"fair trade\").\n.output Answer\n\n"]}
{"id": 800, "answer": true, "completion": ".decl Teaches_at(Person:symbol, School:symbol)\nTeaches_at(\"Dr. Smith\", \"SUNY School\").\nTeaches_at(\"Dr. Jones\", \"SUNY School\").\nTeaches_at(\"Dr. Brown\", \"SUNY School\").\nTeaches_at(\"Dr. Johnson\", \"SUNY School\").\nTeaches_at(\"Dr. Williams\", \"SUNY School\").\nTeaches_at(\"Dr. Miller\", \"SUNY School\").\nTeaches_at(\"Dr. Davis\", \"SUNY School\").\nTeaches_at(\"Dr. Garcia\", \"SUNY School\").\nTeaches_at(\"Dr. Rodriguez\", \"SUNY School\").\nTeaches_at(\"Dr. Wilson\", \"SUNY School\").\nTeaches_at(\"Dr. Martinez\", \"SUNY School\").\nTeaches_at(\"Dr. Anderson\", \"SUNY School\").\nTeaches_at(\"Dr. Taylor\", \"SUNY School\").\nTeaches_at(\"Dr. Thomas\", \"SUNY School\").\nTeaches_at(\"Dr. Hernandez\", \"SUNY School\").\nTeaches_at(\"Dr. Moore\", \"SUNY School\").\nTeaches_at(\"Dr. Martin\", \"SUNY School\").\nTeaches_at(\"Dr. Jackson\", \"SUNY School\").\nTeaches_at(\"Dr. Thompson\", \"SUNY School\").\nTeaches_at(\"Dr. White\", \"SUNY School\").\nTeaches_at(\"Dr. Lopez\", \"SUNY School\").\nTeaches_at(\"Dr. Lee\", \"SUNY School\").\nTeaches_at(\"Dr. Gonzalez\", \"SUNY School\").\nTeaches_at(\"Dr. Harris\", \"SUNY School\").\nTeaches_at(\"Dr. Clark\", \"SUNY School\").\nTeaches_at(\"Dr. Lewis\", \"SUNY School\").\nTeaches_at(\"Dr. Robinson\", \"SUNY School\").\nTeaches_at(\"Dr. Walker\", \"SUNY School\").\nTeaches_at(\"Dr. Perez\", \"SUNY School\").\nTeaches_at(\"Dr. Hall\", \"SUNY School\").\nTeaches_at(\"Dr. Young\", \"SUNY School\").\nTeaches_at(\"Dr. Allen\", \"SUNY School\").\nTeaches_at(\"Dr. Sanchez\", \"SUNY School\").\nTeaches_at(\"Dr. Wright\", \"SUNY School\").\nTeaches_at(\"Dr. King\", \"SUNY School\").\nTeaches_at(\"Dr. Scott\", \"SUNY School\").\nTeaches_at(\"Dr. Green\", \"SUNY School\").\nTeaches_at(\"Dr. Baker\", \"SUNY School\").\nTeaches_at(\"Dr. Adams\", \"SUNY School\").\nTeaches_at(\"Dr. Nelson\", \"SUNY School\").\nTeaches_at(\"Dr. Hill\", \"SUNY School\").\nTeaches_at(\"Dr. Ramirez\", \"SUNY School\").\nTeaches_at(\"Dr. Campbell\", \"SUNY School\").\nTeaches_at(\"Dr. Mitchell\", \"SUNY School\").\nTeaches_at(\"Dr. Roberts\", \"SUNY School\").\nTeaches_at(\"Dr. Carter\", \"SUNY School\").\nTeaches_at(\"Dr. Phillips\", \"SUNY School\").\nTeaches_at(\"Dr. Evans\", \"SUNY School\").\nTeaches_at(\"Dr. Turner\", \"SUNY School", "completions": [".decl Teaches_at(Person:symbol, School:symbol)\nTeaches_at(\"Dr. Smith\", \"SUNY School\").\nTeaches_at(\"Dr. Jones\", \"SUNY School\").\nTeaches_at(\"Dr. Brown\", \"SUNY School\").\nTeaches_at(\"Dr. Johnson\", \"SUNY School\").\nTeaches_at(\"Dr. Williams\", \"SUNY School\").\nTeaches_at(\"Dr. Miller\", \"SUNY School\").\nTeaches_at(\"Dr. Davis\", \"SUNY School\").\nTeaches_at(\"Dr. Garcia\", \"SUNY School\").\nTeaches_at(\"Dr. Rodriguez\", \"SUNY School\").\nTeaches_at(\"Dr. Wilson\", \"SUNY School\").\nTeaches_at(\"Dr. Martinez\", \"SUNY School\").\nTeaches_at(\"Dr. Anderson\", \"SUNY School\").\nTeaches_at(\"Dr. Taylor\", \"SUNY School\").\nTeaches_at(\"Dr. Thomas\", \"SUNY School\").\nTeaches_at(\"Dr. Hernandez\", \"SUNY School\").\nTeaches_at(\"Dr. Moore\", \"SUNY School\").\nTeaches_at(\"Dr. Martin\", \"SUNY School\").\nTeaches_at(\"Dr. Jackson\", \"SUNY School\").\nTeaches_at(\"Dr. Thompson\", \"SUNY School\").\nTeaches_at(\"Dr. White\", \"SUNY School\").\nTeaches_at(\"Dr. Lopez\", \"SUNY School\").\nTeaches_at(\"Dr. Lee\", \"SUNY School\").\nTeaches_at(\"Dr. Gonzalez\", \"SUNY School\").\nTeaches_at(\"Dr. Harris\", \"SUNY School\").\nTeaches_at(\"Dr. Clark\", \"SUNY School\").\nTeaches_at(\"Dr. Lewis\", \"SUNY School\").\nTeaches_at(\"Dr. Robinson\", \"SUNY School\").\nTeaches_at(\"Dr. Walker\", \"SUNY School\").\nTeaches_at(\"Dr. Perez\", \"SUNY School\").\nTeaches_at(\"Dr. Hall\", \"SUNY School\").\nTeaches_at(\"Dr. Young\", \"SUNY School\").\nTeaches_at(\"Dr. Allen\", \"SUNY School\").\nTeaches_at(\"Dr. Sanchez\", \"SUNY School\").\nTeaches_at(\"Dr. Wright\", \"SUNY School\").\nTeaches_at(\"Dr. King\", \"SUNY School\").\nTeaches_at(\"Dr. Scott\", \"SUNY School\").\nTeaches_at(\"Dr. Green\", \"SUNY School\").\nTeaches_at(\"Dr. Baker\", \"SUNY School\").\nTeaches_at(\"Dr. Adams\", \"SUNY School\").\nTeaches_at(\"Dr. Nelson\", \"SUNY School\").\nTeaches_at(\"Dr. Hill\", \"SUNY School\").\nTeaches_at(\"Dr. Ramirez\", \"SUNY School\").\nTeaches_at(\"Dr. Campbell\", \"SUNY School\").\nTeaches_at(\"Dr. Mitchell\", \"SUNY School\").\nTeaches_at(\"Dr. Roberts\", \"SUNY School\").\nTeaches_at(\"Dr. Carter\", \"SUNY School\").\nTeaches_at(\"Dr. Phillips\", \"SUNY School\").\nTeaches_at(\"Dr. Evans\", \"SUNY School\").\nTeaches_at(\"Dr. Turner\", \"SUNY School"]}
{"id": 801, "answer": false, "completion": ".decl Subject_of(Work:symbol, Subject:symbol)\nSubject_of(\"Parsifal\", \"British folklore\").\n.decl Answer()\nAnswer() :- Subject_of(\"Parsifal\", \"British folklore\").\n.output Answer\n\n\n", "completions": [".decl Subject_of(Work:symbol, Subject:symbol)\nSubject_of(\"Parsifal\", \"British folklore\").\n.decl Answer()\nAnswer() :- Subject_of(\"Parsifal\", \"British folklore\").\n.output Answer\n\n\n"]}
{"id": 802, "answer": true, "completion": ".decl Has_sodium(Food:symbol, Sodium:float)\nHas_sodium(\"ramen\", 1000).\n.decl Answer()\nAnswer() :- Has_sodium(\"ramen\", sodium), sodium > 500.\n.output Answer", "completions": [".decl Has_sodium(Food:symbol, Sodium:float)\nHas_sodium(\"ramen\", 1000).\n.decl Answer()\nAnswer() :- Has_sodium(\"ramen\", sodium), sodium > 500.\n.output Answer"]}
{"id": 803, "answer": true, "completion": ".decl Has_poison(Food:symbol, Poison:symbol)\nHas_poison(\"French Toast\", \"cyanide\").\n.decl Has_resistance(Person:symbol, Poison:symbol)\nHas_resistance(\"Lannister\", \"cyanide\").\n.decl Answer()\nAnswer() :- Has_poison(\"French Toast\", poison), !Has_resistance(\"Lannister\", poison).\n.output Answer", "completions": [".decl Has_poison(Food:symbol, Poison:symbol)\nHas_poison(\"French Toast\", \"cyanide\").\n.decl Has_resistance(Person:symbol, Poison:symbol)\nHas_resistance(\"Lannister\", \"cyanide\").\n.decl Answer()\nAnswer() :- Has_poison(\"French Toast\", poison), !Has_resistance(\"Lannister\", poison).\n.output Answer"]}
{"id": 804, "answer": false, "completion": ".decl Popular_Broadway_character(Character:symbol)\nPopular_Broadway_character(\"Eliza Doolittle\").\nPopular_Broadway_character(\"Phantom\").\n.decl Missionary(Character:symbol)\nMissionary(\"Eliza Doolittle\").\n.decl Answer()\nAnswer() :- Popular_Broadway_character(character), Missionary(character).\n.output Answer", "completions": [".decl Popular_Broadway_character(Character:symbol)\nPopular_Broadway_character(\"Eliza Doolittle\").\nPopular_Broadway_character(\"Phantom\").\n.decl Missionary(Character:symbol)\nMissionary(\"Eliza Doolittle\").\n.decl Answer()\nAnswer() :- Popular_Broadway_character(character), Missionary(character).\n.output Answer"]}
{"id": 805, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Carmen Electra\", \"car\").\n.decl Answer()\nAnswer() :- Owns(\"Carmen Electra\", \"junk\").\n.output Answer\n\n", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Carmen Electra\", \"car\").\n.decl Answer()\nAnswer() :- Owns(\"Carmen Electra\", \"junk\").\n.output Answer\n\n"]}
{"id": 806, "answer": false, "completion": ".decl Is_religion(Religion:symbol)\nIs_religion(\"Hinduism\").\n.decl Is_symbol(Symbol:symbol)\nIs_symbol(\"swastika\").\n.decl Is_country(Country:symbol)\nIs_country(\"India\").\n.decl Is_most_common_religion(Religion:symbol, Country:symbol)\nIs_most_common_religion(\"Hinduism\", \"India\").\n.decl Answer()\nAnswer() :- Is_religion(religion), Is_symbol(symbol), Is_country(country), Is_most_common_religion(religion, country).\n.output Answer", "completions": [".decl Is_religion(Religion:symbol)\nIs_religion(\"Hinduism\").\n.decl Is_symbol(Symbol:symbol)\nIs_symbol(\"swastika\").\n.decl Is_country(Country:symbol)\nIs_country(\"India\").\n.decl Is_most_common_religion(Religion:symbol, Country:symbol)\nIs_most_common_religion(\"Hinduism\", \"India\").\n.decl Answer()\nAnswer() :- Is_religion(religion), Is_symbol(symbol), Is_country(country), Is_most_common_religion(religion, country).\n.output Answer"]}
{"id": 807, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Malcolm X\", \"ham\").\n.decl Answer()\nAnswer() :- !Eats(\"Malcolm X\", \"ham\").\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Malcolm X\", \"ham\").\n.decl Answer()\nAnswer() :- !Eats(\"Malcolm X\", \"ham\").\n.output Answer"]}
{"id": 808, "answer": true, "completion": ".decl Can_walk_on_n_legs(Animal:symbol, N_legs:float)\nCan_walk_on_n_legs(\"greyhound\", 4).\n.decl Answer()\nAnswer() :- Can_walk_on_n_legs(\"greyhound\", n_legs), n_legs != 2.\n.output Answer", "completions": [".decl Can_walk_on_n_legs(Animal:symbol, N_legs:float)\nCan_walk_on_n_legs(\"greyhound\", 4).\n.decl Answer()\nAnswer() :- Can_walk_on_n_legs(\"greyhound\", n_legs), n_legs != 2.\n.output Answer"]}
{"id": 809, "answer": true, "completion": ".decl Is_in_grade(Student:symbol, Grade:symbol)\nIs_in_grade(\"John\", \"Elementary School\").\nIs_in_grade(\"John\", \"Middle School\").\nIs_in_grade(\"John\", \"High School\").\nIs_in_grade(\"John\", \"College\").\nIs_in_grade(\"John\", \"Graduate School\").\nIs_in_grade(\"John\", \"Adult\").\nIs_in_grade(\"John\", \"Senior Citizen\").\n.decl Needs_graphing_calculator(Grade:symbol)\nNeeds_graphing_calculator(\"Middle School\").\nNeeds_graphing_calculator(\"High School\").\nNeeds_graphing_calculator(\"College\").\nNeeds_graphing_calculator(\"Graduate School\").\n.decl Answer()\nAnswer() :- Is_in_grade(\"John\", grade), Needs_graphing_calculator(grade).\n.output Answer", "completions": [".decl Is_in_grade(Student:symbol, Grade:symbol)\nIs_in_grade(\"John\", \"Elementary School\").\nIs_in_grade(\"John\", \"Middle School\").\nIs_in_grade(\"John\", \"High School\").\nIs_in_grade(\"John\", \"College\").\nIs_in_grade(\"John\", \"Graduate School\").\nIs_in_grade(\"John\", \"Adult\").\nIs_in_grade(\"John\", \"Senior Citizen\").\n.decl Needs_graphing_calculator(Grade:symbol)\nNeeds_graphing_calculator(\"Middle School\").\nNeeds_graphing_calculator(\"High School\").\nNeeds_graphing_calculator(\"College\").\nNeeds_graphing_calculator(\"Graduate School\").\n.decl Answer()\nAnswer() :- Is_in_grade(\"John\", grade), Needs_graphing_calculator(grade).\n.output Answer"]}
{"id": 810, "answer": true, "completion": ".decl Has_type(Store:symbol, Type:symbol)\nHas_type(\"SnapCap\", \"retail\").\n.decl Answer()\nAnswer() :- Has_type(\"SnapCap\", \"retail\").\n.output Answer\n\n", "completions": [".decl Has_type(Store:symbol, Type:symbol)\nHas_type(\"SnapCap\", \"retail\").\n.decl Answer()\nAnswer() :- Has_type(\"SnapCap\", \"retail\").\n.output Answer\n\n"]}
{"id": 811, "answer": false, "completion": ".decl Can_support_weight(Vehicle:symbol, Weight:float)\nCan_support_weight(\"2019 Toyota Hilux\", 3.5).\n.decl Weighs(Person:symbol, Weight:float)\nWeighs(\"Big John Studd\", 500).\n.decl Answer()\nAnswer() :- Can_support_weight(\"2019 Toyota Hilux\", vehicle_weight), Weighs(\"Big John Studd\", person_weight), person_weight * 30 <= vehicle_weight.\n.output Answer", "completions": [".decl Can_support_weight(Vehicle:symbol, Weight:float)\nCan_support_weight(\"2019 Toyota Hilux\", 3.5).\n.decl Weighs(Person:symbol, Weight:float)\nWeighs(\"Big John Studd\", 500).\n.decl Answer()\nAnswer() :- Can_support_weight(\"2019 Toyota Hilux\", vehicle_weight), Weighs(\"Big John Studd\", person_weight), person_weight * 30 <= vehicle_weight.\n.output Answer"]}
{"id": 812, "answer": true, "completion": ".decl Has_name(Team:symbol, Name:symbol)\nHas_name(\"Toledo Mud Hens\", \"Mud Hens\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Birmingham Barons\", \"Barons\").\nHas_name(\"Lehigh Valley IronPigs\", \"IronPigs\").\nHas_name(\"Rochester Red Wings\", \"Red Wings\").\nHas_name(\"Buffalo Bisons\", \"Bisons\").\nHas_name(\"Syracuse Chiefs\", \"Chiefs\").\nHas_name(\"Scranton/Wilkes-Barre RailRiders\", \"RailRiders\").\nHas_name(\"Charlotte Knights\", \"Knights\").\nHas_name(\"Durham Bulls\", \"Bulls\").\nHas_name(\"Gwinnett Braves\", \"Braves\").\nHas_name(\"Norfolk Tides\", \"Tides\").\nHas_name(\"Louisville Cardinals\", \"Cardinals\").\nHas_name(\"Louisville Sluggers\", \"Sluggers\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"", "completions": [".decl Has_name(Team:symbol, Name:symbol)\nHas_name(\"Toledo Mud Hens\", \"Mud Hens\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Birmingham Barons\", \"Barons\").\nHas_name(\"Lehigh Valley IronPigs\", \"IronPigs\").\nHas_name(\"Rochester Red Wings\", \"Red Wings\").\nHas_name(\"Buffalo Bisons\", \"Bisons\").\nHas_name(\"Syracuse Chiefs\", \"Chiefs\").\nHas_name(\"Scranton/Wilkes-Barre RailRiders\", \"RailRiders\").\nHas_name(\"Charlotte Knights\", \"Knights\").\nHas_name(\"Durham Bulls\", \"Bulls\").\nHas_name(\"Gwinnett Braves\", \"Braves\").\nHas_name(\"Norfolk Tides\", \"Tides\").\nHas_name(\"Louisville Cardinals\", \"Cardinals\").\nHas_name(\"Louisville Sluggers\", \"Sluggers\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \"Bats\").\nHas_name(\"Louisville Bats\", \""]}
{"id": 813, "answer": true, "completion": ".decl Can_detect(Instrument:symbol, Event:symbol)\nCan_detect(\"telescope\", \"light\").\nCan_detect(\"telescope\", \"radio waves\").\nCan_detect(\"telescope\", \"gamma rays\").\nCan_detect(\"telescope\", \"x-rays\").\nCan_detect(\"telescope\", \"ultraviolet light\").\nCan_detect(\"telescope\", \"visible light\").\nCan_detect(\"telescope\", \"infrared light\").\nCan_detect(\"telescope\", \"microwaves\").\nCan_detect(\"telescope\", \"submillimeter waves\").\nCan_detect(\"telescope\", \"millimeter waves\").\nCan_detect(\"telescope\", \"centimeter waves\").\nCan_detect(\"telescope\", \"gravitational waves\").\nCan_detect(\"telescope\", \"neutrinos\").\nCan_detect(\"telescope\", \"cosmic rays\").\n.decl Answer()\nAnswer() :- Can_detect(\"telescope\", \"noise\").\n.output Answer", "completions": [".decl Can_detect(Instrument:symbol, Event:symbol)\nCan_detect(\"telescope\", \"light\").\nCan_detect(\"telescope\", \"radio waves\").\nCan_detect(\"telescope\", \"gamma rays\").\nCan_detect(\"telescope\", \"x-rays\").\nCan_detect(\"telescope\", \"ultraviolet light\").\nCan_detect(\"telescope\", \"visible light\").\nCan_detect(\"telescope\", \"infrared light\").\nCan_detect(\"telescope\", \"microwaves\").\nCan_detect(\"telescope\", \"submillimeter waves\").\nCan_detect(\"telescope\", \"millimeter waves\").\nCan_detect(\"telescope\", \"centimeter waves\").\nCan_detect(\"telescope\", \"gravitational waves\").\nCan_detect(\"telescope\", \"neutrinos\").\nCan_detect(\"telescope\", \"cosmic rays\").\n.decl Answer()\nAnswer() :- Can_detect(\"telescope\", \"noise\").\n.output Answer"]}
{"id": 814, "answer": true, "completion": ".decl Is_mythical(Place:symbol)\nIs_mythical(\"Pearl Harbor\").\n.decl Answer()\nAnswer() :- Is_mythical(\"Pearl Harbor\").\n.output Answer", "completions": [".decl Is_mythical(Place:symbol)\nIs_mythical(\"Pearl Harbor\").\n.decl Answer()\nAnswer() :- Is_mythical(\"Pearl Harbor\").\n.output Answer"]}
{"id": 815, "answer": true, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"Albany, Georgia\", 84000).\nHas_population(\"Albany, New York\", 97000).\n.decl Answer()\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, New York\", population2), population1 < population2.\n.output Answer", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"Albany, Georgia\", 84000).\nHas_population(\"Albany, New York\", 97000).\n.decl Answer()\nAnswer() :- Has_population(\"Albany, Georgia\", population1), Has_population(\"Albany, New York\", population2), population1 < population2.\n.output Answer"]}
{"id": 816, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Burning Man\", \"Nevada\").\nHappens_in_place(\"sunburn\", \"Nevada\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Burning Man\", \"Nevada\"), Happens_in_place(\"sunburn\", \"Nevada\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Burning Man\", \"Nevada\").\nHappens_in_place(\"sunburn\", \"Nevada\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Burning Man\", \"Nevada\"), Happens_in_place(\"sunburn\", \"Nevada\").\n.output Answer"]}
{"id": 817, "answer": true, "completion": ".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Reza Shah\", \"Nasr-ed-Din Shah\").\nHas_father(\"Nasr-ed-Din Shah\", \"Mohammad Shah\").\nHas_father(\"Mohammad Shah\", \"Abbas I\").\nHas_father(\"Abbas I\", \"Shah Tahmasp I\").\nHas_father(\"Shah Tahmasp I\", \"Ismail I\").\nHas_father(\"Ismail I\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail", "completions": [".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Reza Shah\", \"Nasr-ed-Din Shah\").\nHas_father(\"Nasr-ed-Din Shah\", \"Mohammad Shah\").\nHas_father(\"Mohammad Shah\", \"Abbas I\").\nHas_father(\"Abbas I\", \"Shah Tahmasp I\").\nHas_father(\"Shah Tahmasp I\", \"Ismail I\").\nHas_father(\"Ismail I\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail\", \"Haydar Safavi\").\nHas_father(\"Haydar Safavi\", \"Shah Ismail\").\nHas_father(\"Shah Ismail"]}
{"id": 818, "answer": false, "completion": ".decl Runs_on(OS:symbol, Distro:symbol)\nRuns_on(\"focal fossa\", \"ubuntu\").\nRuns_on(\"ubuntu\", \"linux\").\n.decl Answer()\nAnswer() :- Runs_on(\"focal fossa\", \"linux\").\nAnswer() :- Runs_on(\"focal fossa\", distro), Runs_on(distro, \"linux\").\n.output Answer", "completions": [".decl Runs_on(OS:symbol, Distro:symbol)\nRuns_on(\"focal fossa\", \"ubuntu\").\nRuns_on(\"ubuntu\", \"linux\").\n.decl Answer()\nAnswer() :- Runs_on(\"focal fossa\", \"linux\").\nAnswer() :- Runs_on(\"focal fossa\", distro), Runs_on(distro, \"linux\").\n.output Answer"]}
{"id": 819, "answer": true, "completion": ".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"cast\", \"broken bone\").\n.decl Answer()\nAnswer() :- Cures(\"cast\", \"dementia\").\n.output Answer", "completions": [".decl Cures(Treatment:symbol, Disease:symbol)\nCures(\"cast\", \"broken bone\").\n.decl Answer()\nAnswer() :- Cures(\"cast\", \"dementia\").\n.output Answer"]}
{"id": 820, "answer": true, "completion": ".decl Has_fingers(Animal:symbol, N_fingers:float)\nHas_fingers(\"monkey\", 2).\n.decl Answer()\nAnswer() :- Has_fingers(\"monkey\", n_fingers), n_fingers >= 5.\n.output Answer", "completions": [".decl Has_fingers(Animal:symbol, N_fingers:float)\nHas_fingers(\"monkey\", 2).\n.decl Answer()\nAnswer() :- Has_fingers(\"monkey\", n_fingers), n_fingers >= 5.\n.output Answer"]}
{"id": 821, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"groundhog day\", \"winter\").\nHappens_in_season(\"groundhog day\", \"spring\").\nHappens_in_season(\"groundhog day\", \"summer\").\nHappens_in_season(\"groundhog day\", \"fall\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"groundhog day\", season1), Happens_in_season(\"groundhog day\", season2), season1 != season2.\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"groundhog day\", \"winter\").\nHappens_in_season(\"groundhog day\", \"spring\").\nHappens_in_season(\"groundhog day\", \"summer\").\nHappens_in_season(\"groundhog day\", \"fall\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"groundhog day\", season1), Happens_in_season(\"groundhog day\", season2), season1 != season2.\n.output Answer"]}
{"id": 822, "answer": false, "completion": ".decl Depends_on(Brand:symbol, Animal:symbol)\nDepends_on(\"US brand Nice\", \"Western honey bee\").\n.decl Answer()\nAnswer() :- Depends_on(\"US brand Nice\", \"Western honey bee\").\n.output Answer", "completions": [".decl Depends_on(Brand:symbol, Animal:symbol)\nDepends_on(\"US brand Nice\", \"Western honey bee\").\n.decl Answer()\nAnswer() :- Depends_on(\"US brand Nice\", \"Western honey bee\").\n.output Answer"]}
{"id": 823, "answer": false, "completion": ".decl Patented_in(Invention:symbol, Country:symbol)\nPatented_in(\"karaoke\", \"Japan\").\nPatented_in(\"turtle power tiller\", \"United States\").\n.decl Answer()\nAnswer() :- Patented_in(\"karaoke\", country1), Patented_in(\"turtle power tiller\", country2), country1 != country2.\n.output Answer", "completions": [".decl Patented_in(Invention:symbol, Country:symbol)\nPatented_in(\"karaoke\", \"Japan\").\nPatented_in(\"turtle power tiller\", \"United States\").\n.decl Answer()\nAnswer() :- Patented_in(\"karaoke\", country1), Patented_in(\"turtle power tiller\", country2), country1 != country2.\n.output Answer"]}
{"id": 824, "answer": false, "completion": ".decl Is_male(Person:symbol)\nIs_male(\"President of Ohio University\").\n.decl Answer()\nAnswer() :- Is_male(\"President of Ohio University\").\n.output Answer", "completions": [".decl Is_male(Person:symbol)\nIs_male(\"President of Ohio University\").\n.decl Answer()\nAnswer() :- Is_male(\"President of Ohio University\").\n.output Answer"]}
{"id": 825, "answer": true, "completion": ".decl Is_parent(Person:symbol, Child:symbol)\nIs_parent(\"John\", \"Mary\").\nIs_parent(\"Mary\", \"Tom\").\n.decl Is_grandparent(Person:symbol, Grandchild:symbol)\nIs_grandparent(\"John\", \"Tom\").\n.decl Answer()\nAnswer() :- Is_parent(person, child), Is_grandparent(person, grandchild).\n.output Answer", "completions": [".decl Is_parent(Person:symbol, Child:symbol)\nIs_parent(\"John\", \"Mary\").\nIs_parent(\"Mary\", \"Tom\").\n.decl Is_grandparent(Person:symbol, Grandchild:symbol)\nIs_grandparent(\"John\", \"Tom\").\n.decl Answer()\nAnswer() :- Is_parent(person, child), Is_grandparent(person, grandchild).\n.output Answer"]}
{"id": 826, "answer": true, "completion": ".decl Has_n_squares(Board:symbol, N_squares:float)\nHas_n_squares(\"chess board\", 64).\nHas_n_squares(\"Shogi board\", 81).\n.decl Answer()\nAnswer() :- Has_n_squares(\"chess board\", n_squares1), Has_n_squares(\"Shogi board\", n_squares2), n_squares1 < n_squares2.\n.output Answer", "completions": [".decl Has_n_squares(Board:symbol, N_squares:float)\nHas_n_squares(\"chess board\", 64).\nHas_n_squares(\"Shogi board\", 81).\n.decl Answer()\nAnswer() :- Has_n_squares(\"chess board\", n_squares1), Has_n_squares(\"Shogi board\", n_squares2), n_squares1 < n_squares2.\n.output Answer"]}
{"id": 827, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Darth Vader\", \"Coronavirus\").\n.decl Answer()\nAnswer() :- Has_disease(\"Darth Vader\", \"Coronavirus\").\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Darth Vader\", \"Coronavirus\").\n.decl Answer()\nAnswer() :- Has_disease(\"Darth Vader\", \"Coronavirus\").\n.output Answer"]}
{"id": 828, "answer": true, "completion": ".decl Part_of(Thing:symbol, Group:symbol)\nPart_of(\"Flying Spaghetti Monster\", \"ancient pantheon\").\n.decl Answer()\nAnswer() :- Part_of(\"Flying Spaghetti Monster\", \"ancient pantheon\").\n.output Answer", "completions": [".decl Part_of(Thing:symbol, Group:symbol)\nPart_of(\"Flying Spaghetti Monster\", \"ancient pantheon\").\n.decl Answer()\nAnswer() :- Part_of(\"Flying Spaghetti Monster\", \"ancient pantheon\").\n.output Answer"]}
{"id": 829, "answer": true, "completion": ".decl Has_place_in_alphabet(Letter:symbol, Place:float)\nHas_place_in_alphabet(\"B\", 2).\nHas_place_in_alphabet(\"H\", 8).\n.decl Has_birth_order(Person:symbol, Birth_order:float)\nHas_birth_order(\"Prince Harry\", 2).\n.decl Answer()\nAnswer() :- Has_place_in_alphabet(\"B\", place1), Has_place_in_alphabet(\"H\", place2), Has_birth_order(\"Prince Harry\", birth_order), place1 = birth_order.\n.output Answer", "completions": [".decl Has_place_in_alphabet(Letter:symbol, Place:float)\nHas_place_in_alphabet(\"B\", 2).\nHas_place_in_alphabet(\"H\", 8).\n.decl Has_birth_order(Person:symbol, Birth_order:float)\nHas_birth_order(\"Prince Harry\", 2).\n.decl Answer()\nAnswer() :- Has_place_in_alphabet(\"B\", place1), Has_place_in_alphabet(\"H\", place2), Has_birth_order(\"Prince Harry\", birth_order), place1 = birth_order.\n.output Answer"]}
{"id": 830, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"snake\", 1).\nHas_mass(\"M60 Patton\", 50).\n.decl Answer()\nAnswer() :- Has_mass(\"snake\", mass1), Has_mass(\"M60 Patton\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"snake\", 1).\nHas_mass(\"M60 Patton\", 50).\n.decl Answer()\nAnswer() :- Has_mass(\"snake\", mass1), Has_mass(\"M60 Patton\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 831, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"chives\", \"green\").\nHas_color(\"grass\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"chives\", color1), Has_color(\"grass\", color2), color1 = color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"chives\", \"green\").\nHas_color(\"grass\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"chives\", color1), Has_color(\"grass\", color2), color1 = color2.\n.output Answer"]}
{"id": 832, "answer": false, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"person\", \"Anorexia nervosa\").\n.decl Has_bone_density(Person:symbol, Bone_density:float)\nHas_bone_density(\"person\", 0.6).\nHas_bone_density(\"person\", 1).\n.decl Answer()\nAnswer() :- Has_disease(\"person\", \"Anorexia nervosa\"), Has_bone_density(\"person\", bone_density1), Has_bone_density(\"person\", bone_density2), bone_density1 < bone_density2.\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"person\", \"Anorexia nervosa\").\n.decl Has_bone_density(Person:symbol, Bone_density:float)\nHas_bone_density(\"person\", 0.6).\nHas_bone_density(\"person\", 1).\n.decl Answer()\nAnswer() :- Has_disease(\"person\", \"Anorexia nervosa\"), Has_bone_density(\"person\", bone_density1), Has_bone_density(\"person\", bone_density2), bone_density1 < bone_density2.\n.output Answer"]}
{"id": 833, "answer": true, "completion": ".decl Has_percentage(Animal:symbol, Percentage:float)\nHas_percentage(\"bull shark\", 50).\nHas_percentage(\"shark\", 50).\n.decl Answer()\nAnswer() :- Has_percentage(\"bull shark\", percentage1), Has_percentage(\"shark\", percentage2), percentage1 > percentage2.\n.output Answer", "completions": [".decl Has_percentage(Animal:symbol, Percentage:float)\nHas_percentage(\"bull shark\", 50).\nHas_percentage(\"shark\", 50).\n.decl Answer()\nAnswer() :- Has_percentage(\"bull shark\", percentage1), Has_percentage(\"shark\", percentage2), percentage1 > percentage2.\n.output Answer"]}
{"id": 834, "answer": true, "completion": ".decl President_during(US_President:symbol, Event:symbol)\nPresident_during(\"William McKinley\", \"Spanish-American War\").\nPresident_during(\"Abraham Lincoln\", \"American Civil War\").\n.decl Died_of(US_President:symbol, Cause_of_death:symbol)\nDied_of(\"William McKinley\", \"assassination\").\nDied_of(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- President_during(us_president1, \"Spanish-American War\"), President_during(us_president2, \"American Civil War\"), Died_of(us_president1, cause_of_death1), Died_of(us_president2, cause_of_death2), cause_of_death1 = cause_of_death2.\n.output Answer", "completions": [".decl President_during(US_President:symbol, Event:symbol)\nPresident_during(\"William McKinley\", \"Spanish-American War\").\nPresident_during(\"Abraham Lincoln\", \"American Civil War\").\n.decl Died_of(US_President:symbol, Cause_of_death:symbol)\nDied_of(\"William McKinley\", \"assassination\").\nDied_of(\"Abraham Lincoln\", \"assassination\").\n.decl Answer()\nAnswer() :- President_during(us_president1, \"Spanish-American War\"), President_during(us_president2, \"American Civil War\"), Died_of(us_president1, cause_of_death1), Died_of(us_president2, cause_of_death2), cause_of_death1 = cause_of_death2.\n.output Answer"]}
{"id": 835, "answer": true, "completion": ".decl Collaborates(Person1:symbol, Person2:symbol)\nCollaborates(\"Aretha Franklin\", \"Elton John\").\nCollaborates(\"Elton John\", \"Bernie Taupin\").\n.decl Has_mental_illness(Person:symbol, Mental_illness:symbol)\nHas_mental_illness(\"Bernie Taupin\", \"suicidal\").\n.decl Answer()\nAnswer() :- Collaborates(\"Aretha Franklin\", person1), Collaborates(person1, person2), Has_mental_illness(person2, \"suicidal\").\n.output Answer", "completions": [".decl Collaborates(Person1:symbol, Person2:symbol)\nCollaborates(\"Aretha Franklin\", \"Elton John\").\nCollaborates(\"Elton John\", \"Bernie Taupin\").\n.decl Has_mental_illness(Person:symbol, Mental_illness:symbol)\nHas_mental_illness(\"Bernie Taupin\", \"suicidal\").\n.decl Answer()\nAnswer() :- Collaborates(\"Aretha Franklin\", person1), Collaborates(person1, person2), Has_mental_illness(person2, \"suicidal\").\n.output Answer"]}
{"id": 836, "answer": true, "completion": ".decl Has_n_wheels(Bicycle:symbol, N_wheels:float)\nHas_n_wheels(\"children's bicycle\", 3).\nHas_n_wheels(\"children's bicycle\", 4).\nHas_n_wheels(\"adult's bicycle\", 2).\n.decl Answer()\nAnswer() :- Has_n_wheels(\"children's bicycle\", n_wheels1), Has_n_wheels(\"adult's bicycle\", n_wheels2), n_wheels1 > n_wheels2.\n.output Answer", "completions": [".decl Has_n_wheels(Bicycle:symbol, N_wheels:float)\nHas_n_wheels(\"children's bicycle\", 3).\nHas_n_wheels(\"children's bicycle\", 4).\nHas_n_wheels(\"adult's bicycle\", 2).\n.decl Answer()\nAnswer() :- Has_n_wheels(\"children's bicycle\", n_wheels1), Has_n_wheels(\"adult's bicycle\", n_wheels2), n_wheels1 > n_wheels2.\n.output Answer"]}
{"id": 837, "answer": false, "completion": ".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"Royal Observatory in Greenwich\", \"octagon\").\nHas_shape(\"yield sign\", \"triangle\").\n.decl Answer()\nAnswer() :- Has_shape(\"Royal Observatory in Greenwich\", \"octagon\").\nAnswer() :- Has_shape(\"yield sign\", \"triangle\").\n.output Answer", "completions": [".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"Royal Observatory in Greenwich\", \"octagon\").\nHas_shape(\"yield sign\", \"triangle\").\n.decl Answer()\nAnswer() :- Has_shape(\"Royal Observatory in Greenwich\", \"octagon\").\nAnswer() :- Has_shape(\"yield sign\", \"triangle\").\n.output Answer"]}
{"id": 838, "answer": false, "completion": ".decl Has_genre(Movie:symbol, Genre:symbol)\nHas_genre(\"The Breakfast Club\", \"comedy\").\nHas_genre(\"The Breakfast Club\", \"drama\").\nHas_genre(\"The Breakfast Club\", \"teen\").\nHas_genre(\"The Breakfast Club\", \"nerd\").\nHas_genre(\"The Breakfast Club\", \"loser\").\n.decl Answer()\nAnswer() :- Has_genre(\"The Breakfast Club\", \"nerd\"), Has_genre(\"The Breakfast Club\", \"loser\").\n.output Answer", "completions": [".decl Has_genre(Movie:symbol, Genre:symbol)\nHas_genre(\"The Breakfast Club\", \"comedy\").\nHas_genre(\"The Breakfast Club\", \"drama\").\nHas_genre(\"The Breakfast Club\", \"teen\").\nHas_genre(\"The Breakfast Club\", \"nerd\").\nHas_genre(\"The Breakfast Club\", \"loser\").\n.decl Answer()\nAnswer() :- Has_genre(\"The Breakfast Club\", \"nerd\"), Has_genre(\"The Breakfast Club\", \"loser\").\n.output Answer"]}
{"id": 839, "answer": false, "completion": ".decl Has_assets(Organization:symbol, Assets:float)\nHas_assets(\"JPMorgan Chase\", 2.6).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"United States\", 327).\n.decl Answer()\nAnswer() :- Has_assets(\"JPMorgan Chase\", assets), Has_population(\"United States\", population), assets >= 10 * population.\n.output Answer", "completions": [".decl Has_assets(Organization:symbol, Assets:float)\nHas_assets(\"JPMorgan Chase\", 2.6).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"United States\", 327).\n.decl Answer()\nAnswer() :- Has_assets(\"JPMorgan Chase\", assets), Has_population(\"United States\", population), assets >= 10 * population.\n.output Answer"]}
{"id": 840, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"largest crustacean\", 2.5).\nHas_length(\"king-sized mattress\", 2.1).\n.decl Answer()\nAnswer() :- Has_length(\"largest crustacean\", length1), Has_length(\"king-sized mattress\", length2), length1 <= length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"largest crustacean\", 2.5).\nHas_length(\"king-sized mattress\", 2.1).\n.decl Answer()\nAnswer() :- Has_length(\"largest crustacean\", length1), Has_length(\"king-sized mattress\", length2), length1 <= length2.\n.output Answer"]}
{"id": 841, "answer": true, "completion": ".decl Places_in_circle(Person:symbol, Circle:float)\nPlaces_in_circle(\"Rupert Murdoch\", 8).\n.decl Answer()\nAnswer() :- Places_in_circle(\"Rupert Murdoch\", circle1), Places_in_circle(\"Dante Alighieri\", circle2), circle1 > circle2.\n.output Answer", "completions": [".decl Places_in_circle(Person:symbol, Circle:float)\nPlaces_in_circle(\"Rupert Murdoch\", 8).\n.decl Answer()\nAnswer() :- Places_in_circle(\"Rupert Murdoch\", circle1), Places_in_circle(\"Dante Alighieri\", circle2), circle1 > circle2.\n.output Answer"]}
{"id": 842, "answer": false, "completion": ".decl Uses_calendar(Organization:symbol, Calendar:symbol)\nUses_calendar(\"Eastern Orthodox Church\", \"Julian calendar\").\nUses_calendar(\"Byzantine Empire\", \"Julian calendar\").\nUses_calendar(\"Byzantine Empire\", \"Gregorian calendar\").\n.decl Answer()\nAnswer() :- Uses_calendar(\"Eastern Orthodox Church\", calendar1), Uses_calendar(\"Byzantine Empire\", calendar2), calendar1 = calendar2.\n.output Answer", "completions": [".decl Uses_calendar(Organization:symbol, Calendar:symbol)\nUses_calendar(\"Eastern Orthodox Church\", \"Julian calendar\").\nUses_calendar(\"Byzantine Empire\", \"Julian calendar\").\nUses_calendar(\"Byzantine Empire\", \"Gregorian calendar\").\n.decl Answer()\nAnswer() :- Uses_calendar(\"Eastern Orthodox Church\", calendar1), Uses_calendar(\"Byzantine Empire\", calendar2), calendar1 = calendar2.\n.output Answer"]}
{"id": 843, "answer": true, "completion": ".decl Has_wavelength(Color:symbol, Wavelength:float)\nHas_wavelength(\"red\", 700).\nHas_wavelength(\"green\", 546.1).\nHas_wavelength(\"blue\", 435.8).\nHas_wavelength(\"neon\", 588).\nHas_wavelength(\"chlorine\", 590).\n.decl Answer()\nAnswer() :- Has_wavelength(\"neon\", wavelength1), Has_wavelength(\"chlorine\", wavelength2), wavelength1 != wavelength2.\n.output Answer", "completions": [".decl Has_wavelength(Color:symbol, Wavelength:float)\nHas_wavelength(\"red\", 700).\nHas_wavelength(\"green\", 546.1).\nHas_wavelength(\"blue\", 435.8).\nHas_wavelength(\"neon\", 588).\nHas_wavelength(\"chlorine\", 590).\n.decl Answer()\nAnswer() :- Has_wavelength(\"neon\", wavelength1), Has_wavelength(\"chlorine\", wavelength2), wavelength1 != wavelength2.\n.output Answer"]}
{"id": 844, "answer": true, "completion": ".decl Has_birth_name(Person:symbol, Birth_name:symbol)\nHas_birth_name(\"Augustus\", \"Gaius Octavius\").\n.decl Answer()\nAnswer() :- Has_birth_name(\"Augustus\", \"Gaius Octavius\").\n.output Answer\n\n\n", "completions": [".decl Has_birth_name(Person:symbol, Birth_name:symbol)\nHas_birth_name(\"Augustus\", \"Gaius Octavius\").\n.decl Answer()\nAnswer() :- Has_birth_name(\"Augustus\", \"Gaius Octavius\").\n.output Answer\n\n\n"]}
{"id": 845, "answer": true, "completion": ".decl Has_spouse(Person:symbol, Spouse:symbol)\nHas_spouse(\"Darth Vader\", \"Padme Amidala\").\n.decl Answer()\nAnswer() :- Has_spouse(\"Darth Vader\", spouse1), Has_spouse(\"Darth Vader\", spouse2), spouse1 = spouse2.\n.output Answer", "completions": [".decl Has_spouse(Person:symbol, Spouse:symbol)\nHas_spouse(\"Darth Vader\", \"Padme Amidala\").\n.decl Answer()\nAnswer() :- Has_spouse(\"Darth Vader\", spouse1), Has_spouse(\"Darth Vader\", spouse2), spouse1 = spouse2.\n.output Answer"]}
{"id": 846, "answer": true, "completion": ".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Al-Farabi\", \"9th century\").\nLives_in_time(\"Mohammed\", \"7th century\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Al-Farabi\", time1), Lives_in_time(\"Mohammed\", time2), time1 > time2.\n.output Answer", "completions": [".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Al-Farabi\", \"9th century\").\nLives_in_time(\"Mohammed\", \"7th century\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Al-Farabi\", time1), Lives_in_time(\"Mohammed\", time2), time1 > time2.\n.output Answer"]}
{"id": 847, "answer": true, "completion": ".decl Supports(Person:symbol, Candidate:symbol)\nSupports(\"Dustin Hoffman\", \"Trump\").\n.decl Answer()\nAnswer() :- Supports(\"Dustin Hoffman\", \"Trump\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Candidate:symbol)\nSupports(\"Dustin Hoffman\", \"Trump\").\n.decl Answer()\nAnswer() :- Supports(\"Dustin Hoffman\", \"Trump\").\n.output Answer"]}
{"id": 848, "answer": true, "completion": ".decl Is_in_Europe(Country:symbol)\nIs_in_Europe(\"United Kingdom\").\n.decl Is_headquartered_in(Agency:symbol, Country:symbol)\nIs_headquartered_in(\"Foreign and Commonwealth Office\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Is_headquartered_in(\"Foreign and Commonwealth Office\", country), Is_in_Europe(country).\n.output Answer", "completions": [".decl Is_in_Europe(Country:symbol)\nIs_in_Europe(\"United Kingdom\").\n.decl Is_headquartered_in(Agency:symbol, Country:symbol)\nIs_headquartered_in(\"Foreign and Commonwealth Office\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Is_headquartered_in(\"Foreign and Commonwealth Office\", country), Is_in_Europe(country).\n.output Answer"]}
{"id": 849, "answer": false, "completion": ".decl Has_ancestor(Person:symbol, Ancestor:symbol)\nHas_ancestor(\"Naruhito\", \"Meiji\").\nHas_ancestor(\"Naruhito\", \"Taisho\").\nHas_ancestor(\"Naruhito\", \"Showa\").\nHas_ancestor(\"Naruhito\", \"Akihito\").\nHas_ancestor(\"Meiji\", \"Komei\").\nHas_ancestor(\"Taisho\", \"Meiji\").\nHas_ancestor(\"Showa\", \"Taisho\").\nHas_ancestor(\"Akihito\", \"Showa\").\nHas_ancestor(\"Komei\", \"Ninko\").\nHas_ancestor(\"Komei\", \"Ninko\").\nHas_ancestor(\"Ninko\", \"Kanmu\").\nHas_ancestor(\"Ninko\", \"Kanmu\").\nHas_ancestor(\"Kanmu\", \"Tenji\").\nHas_ancestor(\"Kanmu\", \"Tenji\").\nHas_ancestor(\"Tenji\", \"Tenmu\").\nHas_ancestor(\"Tenmu\", \"Jito\").\nHas_ancestor(\"Jito\", \"Mommu\").\nHas_ancestor(\"Mommu\", \"Empress Gemmei\").\nHas_ancestor(\"Empress Gemmei\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Jomei\").\nHas_ancestor(\"Emperor Jomei\", \"Emperor Kotoku\").\nHas_ancestor(\"Emperor Kotoku\", \"Emperor Tenchi\").\nHas_ancestor(\"Emperor Tenchi\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji", "completions": [".decl Has_ancestor(Person:symbol, Ancestor:symbol)\nHas_ancestor(\"Naruhito\", \"Meiji\").\nHas_ancestor(\"Naruhito\", \"Taisho\").\nHas_ancestor(\"Naruhito\", \"Showa\").\nHas_ancestor(\"Naruhito\", \"Akihito\").\nHas_ancestor(\"Meiji\", \"Komei\").\nHas_ancestor(\"Taisho\", \"Meiji\").\nHas_ancestor(\"Showa\", \"Taisho\").\nHas_ancestor(\"Akihito\", \"Showa\").\nHas_ancestor(\"Komei\", \"Ninko\").\nHas_ancestor(\"Komei\", \"Ninko\").\nHas_ancestor(\"Ninko\", \"Kanmu\").\nHas_ancestor(\"Ninko\", \"Kanmu\").\nHas_ancestor(\"Kanmu\", \"Tenji\").\nHas_ancestor(\"Kanmu\", \"Tenji\").\nHas_ancestor(\"Tenji\", \"Tenmu\").\nHas_ancestor(\"Tenmu\", \"Jito\").\nHas_ancestor(\"Jito\", \"Mommu\").\nHas_ancestor(\"Mommu\", \"Empress Gemmei\").\nHas_ancestor(\"Empress Gemmei\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Jomei\").\nHas_ancestor(\"Emperor Jomei\", \"Emperor Kotoku\").\nHas_ancestor(\"Emperor Kotoku\", \"Emperor Tenchi\").\nHas_ancestor(\"Emperor Tenchi\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji\", \"Emperor Tenmu\").\nHas_ancestor(\"Emperor Tenmu\", \"Emperor Tenji\").\nHas_ancestor(\"Emperor Tenji"]}
{"id": 850, "answer": true, "completion": ".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Has_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.output Answer", "completions": [".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Has_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.output Answer"]}
{"id": 851, "answer": false, "completion": ".decl Fibonacci(N:float, Fibonacci_number:float)\nFibonacci(0, 0).\nFibonacci(1, 1).\nFibonacci(2, 1).\nFibonacci(3, 2).\nFibonacci(4, 3).\nFibonacci(5, 5).\nFibonacci(6, 8).\nFibonacci(7, 13).\nFibonacci(8, 21).\nFibonacci(9, 34).\nFibonacci(10, 55).\nFibonacci(11, 89).\nFibonacci(12, 144).\nFibonacci(13, 233).\nFibonacci(14, 377).\nFibonacci(15, 610).\nFibonacci(16, 987).\nFibonacci(17, 1597).\nFibonacci(18, 2584).\nFibonacci(19, 4181).\nFibonacci(20, 6765).\nFibonacci(21, 10946).\nFibonacci(22, 17711).\nFibonacci(23, 28657).\nFibonacci(24, 46368).\nFibonacci(25, 75025).\nFibonacci(26, 121393).\nFibonacci(27, 196418).\nFibonacci(28, 317811).\nFibonacci(29, 514229).\nFibonacci(30, 832040).\nFibonacci(31, 1346269).\nFibonacci(32, 2178309).\nFibonacci(33, 3524578).\nFibonacci(34, 5702887).\nFibonacci(35, 9227465).\nFibonacci(36, 14930352).\nFibonacci(37, 24157817).\nFibonacci(38, 39088169).\nFibonacci(39, 63245986).\nFibonacci(40, 102334155).\nFibonacci(41, 165580141).\nFibonacci(42, 267914296).\nFibonacci(43, 433494437).\nFibonacci(44, 701408733).\nFibonacci(45, 1134903170).\nFibonacci(46, 1836311903).\n.decl Answer()\nAnswer() :- Fibonacci(0, fibonacci_number1), Fibonacci(1, fibonacci_number2), Fibonacci(2, fibonacci_number3), Fibonacci(3, fibonacci_number4), Fibonacci(4, fibonacci_number5), Fibonacci(5, fibonacci_number6), Fibonacci(6, fibonacci_number7), Fibonacci(7, fibonacci_number8), Fibonacci(8, fibonacci_number9), Fibonacci(9, fibonacci_number10), Fibonacci(10, fibonacci_number11), Fibonacci(11, fibonacci_number12), Fibonacci(12, fibonacci_number13), Fibonacci(13, fibonacci_number14), Fibonacci(14, fibonacci_number15), Fibonacci(15, fibonacci_number16), Fibonacci(16, fibonacci_number17), Fibonacci(17, fibonacci_number18), Fibonacci(18,", "completions": [".decl Fibonacci(N:float, Fibonacci_number:float)\nFibonacci(0, 0).\nFibonacci(1, 1).\nFibonacci(2, 1).\nFibonacci(3, 2).\nFibonacci(4, 3).\nFibonacci(5, 5).\nFibonacci(6, 8).\nFibonacci(7, 13).\nFibonacci(8, 21).\nFibonacci(9, 34).\nFibonacci(10, 55).\nFibonacci(11, 89).\nFibonacci(12, 144).\nFibonacci(13, 233).\nFibonacci(14, 377).\nFibonacci(15, 610).\nFibonacci(16, 987).\nFibonacci(17, 1597).\nFibonacci(18, 2584).\nFibonacci(19, 4181).\nFibonacci(20, 6765).\nFibonacci(21, 10946).\nFibonacci(22, 17711).\nFibonacci(23, 28657).\nFibonacci(24, 46368).\nFibonacci(25, 75025).\nFibonacci(26, 121393).\nFibonacci(27, 196418).\nFibonacci(28, 317811).\nFibonacci(29, 514229).\nFibonacci(30, 832040).\nFibonacci(31, 1346269).\nFibonacci(32, 2178309).\nFibonacci(33, 3524578).\nFibonacci(34, 5702887).\nFibonacci(35, 9227465).\nFibonacci(36, 14930352).\nFibonacci(37, 24157817).\nFibonacci(38, 39088169).\nFibonacci(39, 63245986).\nFibonacci(40, 102334155).\nFibonacci(41, 165580141).\nFibonacci(42, 267914296).\nFibonacci(43, 433494437).\nFibonacci(44, 701408733).\nFibonacci(45, 1134903170).\nFibonacci(46, 1836311903).\n.decl Answer()\nAnswer() :- Fibonacci(0, fibonacci_number1), Fibonacci(1, fibonacci_number2), Fibonacci(2, fibonacci_number3), Fibonacci(3, fibonacci_number4), Fibonacci(4, fibonacci_number5), Fibonacci(5, fibonacci_number6), Fibonacci(6, fibonacci_number7), Fibonacci(7, fibonacci_number8), Fibonacci(8, fibonacci_number9), Fibonacci(9, fibonacci_number10), Fibonacci(10, fibonacci_number11), Fibonacci(11, fibonacci_number12), Fibonacci(12, fibonacci_number13), Fibonacci(13, fibonacci_number14), Fibonacci(14, fibonacci_number15), Fibonacci(15, fibonacci_number16), Fibonacci(16, fibonacci_number17), Fibonacci(17, fibonacci_number18), Fibonacci(18,"]}
{"id": 852, "answer": false, "completion": ".decl Requires(Action:symbol, Resource:symbol)\nRequires(\"balance an account in Microsoft Excel\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"balance an account in Microsoft Excel\", \"electricity\").\n.output Answer", "completions": [".decl Requires(Action:symbol, Resource:symbol)\nRequires(\"balance an account in Microsoft Excel\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"balance an account in Microsoft Excel\", \"electricity\").\n.output Answer"]}
{"id": 853, "answer": true, "completion": ".decl Can_explain(Person:symbol, Event:symbol)\nCan_explain(\"Bruce Banner\", \"atomic events\").\n.decl Is_alter_ego(Person:symbol, Alter_ego:symbol)\nIs_alter_ego(\"Bruce Banner\", \"Hulk\").\n.decl Answer()\nAnswer() :- Can_explain(\"Bruce Banner\", \"atomic events\").\nAnswer() :- Is_alter_ego(\"Bruce Banner\", \"Hulk\"), Can_explain(\"Bruce Banner\", \"atomic events\").\n.output Answer", "completions": [".decl Can_explain(Person:symbol, Event:symbol)\nCan_explain(\"Bruce Banner\", \"atomic events\").\n.decl Is_alter_ego(Person:symbol, Alter_ego:symbol)\nIs_alter_ego(\"Bruce Banner\", \"Hulk\").\n.decl Answer()\nAnswer() :- Can_explain(\"Bruce Banner\", \"atomic events\").\nAnswer() :- Is_alter_ego(\"Bruce Banner\", \"Hulk\"), Can_explain(\"Bruce Banner\", \"atomic events\").\n.output Answer"]}
{"id": 854, "answer": false, "completion": ".decl Has_n_syllables(Poem:symbol, N_syllables:float)\nHas_n_syllables(\"Haiku\", 17).\n.decl Answer()\nAnswer() :- Has_n_syllables(\"Haiku\", n_syllables1), Has_n_syllables(poem, n_syllables2), n_syllables1 <= n_syllables2.\n.output Answer", "completions": [".decl Has_n_syllables(Poem:symbol, N_syllables:float)\nHas_n_syllables(\"Haiku\", 17).\n.decl Answer()\nAnswer() :- Has_n_syllables(\"Haiku\", n_syllables1), Has_n_syllables(poem, n_syllables2), n_syllables1 <= n_syllables2.\n.output Answer"]}
{"id": 855, "answer": true, "completion": ".decl Helped(Party:symbol, Person:symbol, Goal:symbol)\nHelped(\"Social Democratic Party of Germany\", \"Frederick II\", \"become King of Prussia\").\n.decl Answer()\nAnswer() :- Helped(\"Social Democratic Party of Germany\", \"Frederick II\", \"become King of Prussia\").\n.output Answer", "completions": [".decl Helped(Party:symbol, Person:symbol, Goal:symbol)\nHelped(\"Social Democratic Party of Germany\", \"Frederick II\", \"become King of Prussia\").\n.decl Answer()\nAnswer() :- Helped(\"Social Democratic Party of Germany\", \"Frederick II\", \"become King of Prussia\").\n.output Answer"]}
{"id": 856, "answer": false, "completion": ".decl Weighs(Object:symbol, Weight:float)\nWeighs(\"Toyota Hilux\", 1.5).\nWeighs(\"Mr. Ed\", 1).\n.decl Answer()\nAnswer() :- Weighs(\"Toyota Hilux\", weight1), Weighs(\"Mr. Ed\", weight2), weight1 > weight2.\n.output Answer", "completions": [".decl Weighs(Object:symbol, Weight:float)\nWeighs(\"Toyota Hilux\", 1.5).\nWeighs(\"Mr. Ed\", 1).\n.decl Answer()\nAnswer() :- Weighs(\"Toyota Hilux\", weight1), Weighs(\"Mr. Ed\", weight2), weight1 > weight2.\n.output Answer"]}
{"id": 857, "answer": false, "completion": ".decl Denied_to(Communion:symbol, Wednesday_name_origin_followers:symbol)\nDenied_to(\"Catholic Communion\", \"Protestants\").\nDenied_to(\"Catholic Communion\", \"Jews\").\nDenied_to(\"Catholic Communion\", \"Muslims\").\n.decl Answer()\nAnswer() :- Denied_to(\"Catholic Communion\", \"Wednesday name origin followers\").\n.output Answer", "completions": [".decl Denied_to(Communion:symbol, Wednesday_name_origin_followers:symbol)\nDenied_to(\"Catholic Communion\", \"Protestants\").\nDenied_to(\"Catholic Communion\", \"Jews\").\nDenied_to(\"Catholic Communion\", \"Muslims\").\n.decl Answer()\nAnswer() :- Denied_to(\"Catholic Communion\", \"Wednesday name origin followers\").\n.output Answer"]}
{"id": 858, "answer": true, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 859, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Edward Snowden\", 31).\n.decl Founded_in_year(Organization:symbol, Year:float)\nFounded_in_year(\"United Nations Conference on Trade and Development\", 1964).\n.decl Answer()\nAnswer() :- Has_age(\"Edward Snowden\", age), Founded_in_year(\"United Nations Conference on Trade and Development\", year), age >= year - 50.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Edward Snowden\", 31).\n.decl Founded_in_year(Organization:symbol, Year:float)\nFounded_in_year(\"United Nations Conference on Trade and Development\", 1964).\n.decl Answer()\nAnswer() :- Has_age(\"Edward Snowden\", age), Founded_in_year(\"United Nations Conference on Trade and Development\", year), age >= year - 50.\n.output Answer"]}
{"id": 860, "answer": true, "completion": ".decl Ate_food(Person:symbol, Food:symbol, Amount:float)\nAte_food(\"Popeye\", \"spinach\", 1).\n.decl Has_nutritional_value(Food:symbol, Nutritional_value:float)\nHas_nutritional_value(\"spinach\", 0.5).\n.decl Answer()\nAnswer() :- Ate_food(\"Popeye\", \"spinach\", amount), Has_nutritional_value(\"spinach\", nutritional_value), amount > nutritional_value.\n.output Answer", "completions": [".decl Ate_food(Person:symbol, Food:symbol, Amount:float)\nAte_food(\"Popeye\", \"spinach\", 1).\n.decl Has_nutritional_value(Food:symbol, Nutritional_value:float)\nHas_nutritional_value(\"spinach\", 0.5).\n.decl Answer()\nAnswer() :- Ate_food(\"Popeye\", \"spinach\", amount), Has_nutritional_value(\"spinach\", nutritional_value), amount > nutritional_value.\n.output Answer"]}
{"id": 861, "answer": true, "completion": ".decl Lives_in_continent(Animal:symbol, Continent:symbol)\nLives_in_continent(\"bengal fox\", \"Asia\").\n.decl Happens_in_continent(Event:symbol, Continent:symbol)\nHappens_in_continent(\"Superbowl\", \"North America\").\n.decl Answer()\nAnswer() :- Lives_in_continent(\"bengal fox\", \"Asia\"), Happens_in_continent(\"Superbowl\", \"North America\").\n.output Answer", "completions": [".decl Lives_in_continent(Animal:symbol, Continent:symbol)\nLives_in_continent(\"bengal fox\", \"Asia\").\n.decl Happens_in_continent(Event:symbol, Continent:symbol)\nHappens_in_continent(\"Superbowl\", \"North America\").\n.decl Answer()\nAnswer() :- Lives_in_continent(\"bengal fox\", \"Asia\"), Happens_in_continent(\"Superbowl\", \"North America\").\n.output Answer"]}
{"id": 862, "answer": true, "completion": ".decl Approves_of(Person:symbol, Book:symbol)\nApproves_of(\"Jehovah's witness\", \"The Bible\").\n.decl Answer()\nAnswer() :- Approves_of(\"Jehovah's witness\", \"Alice's Adventures in Wonderland\").\n.output Answer", "completions": [".decl Approves_of(Person:symbol, Book:symbol)\nApproves_of(\"Jehovah's witness\", \"The Bible\").\n.decl Answer()\nAnswer() :- Approves_of(\"Jehovah's witness\", \"Alice's Adventures in Wonderland\").\n.output Answer"]}
{"id": 863, "answer": false, "completion": ".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"Germaphobia\", \"germs\").\n.decl Answer()\nAnswer() :- Has_phobia(\"Germaphobia\", \"germs\").\n.output Answer", "completions": [".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"Germaphobia\", \"germs\").\n.decl Answer()\nAnswer() :- Has_phobia(\"Germaphobia\", \"germs\").\n.output Answer"]}
{"id": 864, "answer": true, "completion": ".decl Rescues(Lifeboat:symbol, Sea:symbol)\nRescues(\"lifeboat\", \"Hooke Sea\").\n.decl Answer()\nAnswer() :- Rescues(\"lifeboat\", \"Hooke Sea\").\n.output Answer", "completions": [".decl Rescues(Lifeboat:symbol, Sea:symbol)\nRescues(\"lifeboat\", \"Hooke Sea\").\n.decl Answer()\nAnswer() :- Rescues(\"lifeboat\", \"Hooke Sea\").\n.output Answer"]}
{"id": 865, "answer": false, "completion": ".decl Ratified_by(Amendment:symbol, Country:symbol)\nRatified_by(\"Eighth Amendment to the United States Constitution\", \"United States\").\n.decl Popular_in_court(Amendment:symbol, Country:symbol)\nPopular_in_court(\"Eighth Amendment to the United States Constitution\", \"United States\").\n.decl Answer()\nAnswer() :- Ratified_by(\"Eighth Amendment to the United States Constitution\", \"United States\").\n.output Answer", "completions": [".decl Ratified_by(Amendment:symbol, Country:symbol)\nRatified_by(\"Eighth Amendment to the United States Constitution\", \"United States\").\n.decl Popular_in_court(Amendment:symbol, Country:symbol)\nPopular_in_court(\"Eighth Amendment to the United States Constitution\", \"United States\").\n.decl Answer()\nAnswer() :- Ratified_by(\"Eighth Amendment to the United States Constitution\", \"United States\").\n.output Answer"]}
{"id": 866, "answer": true, "completion": ".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"cosmic microwave background\", 2.7).\nHas_temperature(\"food\", 100).\n.decl Answer()\nAnswer() :- Has_temperature(\"cosmic microwave background\", temperature1), Has_temperature(\"food\", temperature2), temperature1 < temperature2.\n.output Answer", "completions": [".decl Has_temperature(Object:symbol, Temperature:float)\nHas_temperature(\"cosmic microwave background\", 2.7).\nHas_temperature(\"food\", 100).\n.decl Answer()\nAnswer() :- Has_temperature(\"cosmic microwave background\", temperature1), Has_temperature(\"food\", temperature2), temperature1 < temperature2.\n.output Answer"]}
{"id": 867, "answer": true, "completion": ".decl Cares_about(Person:symbol, Topic:symbol)\nCares_about(\"Nigella Lawson\", \"cooking\").\nCares_about(\"Nigella Lawson\", \"food\").\n.decl Answer()\nAnswer() :- Cares_about(\"Nigella Lawson\", \"solubility\").\n.output Answer", "completions": [".decl Cares_about(Person:symbol, Topic:symbol)\nCares_about(\"Nigella Lawson\", \"cooking\").\nCares_about(\"Nigella Lawson\", \"food\").\n.decl Answer()\nAnswer() :- Cares_about(\"Nigella Lawson\", \"solubility\").\n.output Answer"]}
{"id": 868, "answer": false, "completion": ".decl Kicks(Person:symbol, Sport:symbol)\nKicks(\"Rahul Dravid\", \"cricket\").\n.decl Answer()\nAnswer() :- Kicks(\"Rahul Dravid\", \"field goal\").\n.output Answer", "completions": [".decl Kicks(Person:symbol, Sport:symbol)\nKicks(\"Rahul Dravid\", \"cricket\").\n.decl Answer()\nAnswer() :- Kicks(\"Rahul Dravid\", \"field goal\").\n.output Answer"]}
{"id": 869, "answer": true, "completion": ".decl Plays_at(Band:symbol, Venue:symbol)\nPlays_at(\"U2\", \"Polo Grounds\").\n.decl Answer()\nAnswer() :- Plays_at(\"U2\", \"Polo Grounds\").\n.output Answer", "completions": [".decl Plays_at(Band:symbol, Venue:symbol)\nPlays_at(\"U2\", \"Polo Grounds\").\n.decl Answer()\nAnswer() :- Plays_at(\"U2\", \"Polo Grounds\").\n.output Answer"]}
{"id": 870, "answer": true, "completion": ".decl Happens_at_time(Event:symbol, Time:symbol)\nHappens_at_time(\"breakfast\", \"7:00\").\nHappens_at_time(\"dinner\", \"19:00\").\n.decl Answer()\nAnswer() :- Happens_at_time(\"breakfast\", \"19:00\").\n.output Answer", "completions": [".decl Happens_at_time(Event:symbol, Time:symbol)\nHappens_at_time(\"breakfast\", \"7:00\").\nHappens_at_time(\"dinner\", \"19:00\").\n.decl Answer()\nAnswer() :- Happens_at_time(\"breakfast\", \"19:00\").\n.output Answer"]}
{"id": 871, "answer": true, "completion": ".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"blooming onion\", \"flower\").\nHas_shape(\"shallot\", \"sphere\").\n.decl Answer()\nAnswer() :- Has_shape(\"blooming onion\", \"flower\"), Has_shape(\"shallot\", \"sphere\").\n.output Answer", "completions": [".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"blooming onion\", \"flower\").\nHas_shape(\"shallot\", \"sphere\").\n.decl Answer()\nAnswer() :- Has_shape(\"blooming onion\", \"flower\"), Has_shape(\"shallot\", \"sphere\").\n.output Answer"]}
{"id": 872, "answer": false, "completion": ".decl Has_solubility(Solution:symbol, Solubility:float)\nHas_solubility(\"isopropyl alcohol\", 0.01).\n.decl Answer()\nAnswer() :- Has_solubility(\"isopropyl alcohol\", solubility), solubility < 0.1.\n.output Answer", "completions": [".decl Has_solubility(Solution:symbol, Solubility:float)\nHas_solubility(\"isopropyl alcohol\", 0.01).\n.decl Answer()\nAnswer() :- Has_solubility(\"isopropyl alcohol\", solubility), solubility < 0.1.\n.output Answer"]}
{"id": 873, "answer": false, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Golden Gate Bridge\", 2737).\nHas_length(\"Mac Truck\", 18).\n.decl Answer()\nAnswer() :- Has_length(\"Golden Gate Bridge\", length1), Has_length(\"Mac Truck\", length2), length1 < 13 * length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Golden Gate Bridge\", 2737).\nHas_length(\"Mac Truck\", 18).\n.decl Answer()\nAnswer() :- Has_length(\"Golden Gate Bridge\", length1), Has_length(\"Mac Truck\", length2), length1 < 13 * length2.\n.output Answer"]}
{"id": 874, "answer": true, "completion": ".decl Has_gravity(Object:symbol, Gravity:float)\nHas_gravity(\"earth\", 9.8).\nHas_gravity(\"asteroid\", 0.01).\n.decl Answer()\nAnswer() :- Has_gravity(\"asteroid\", gravity), gravity > 0.\n.output Answer", "completions": [".decl Has_gravity(Object:symbol, Gravity:float)\nHas_gravity(\"earth\", 9.8).\nHas_gravity(\"asteroid\", 0.01).\n.decl Answer()\nAnswer() :- Has_gravity(\"asteroid\", gravity), gravity > 0.\n.output Answer"]}
{"id": 875, "answer": true, "completion": ".decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"EastEnders series\", 3000).\n.decl Lasts_for_n_days(Event:symbol, N_days:float)\nLasts_for_n_days(\"EastEnders series\", 125).\n.decl Answer()\nAnswer() :- Lasts_for_n_hours(\"EastEnders series\", n_hours), Lasts_for_n_days(\"EastEnders series\", n_days), n_hours <= n_days * 24.\n.output Answer", "completions": [".decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"EastEnders series\", 3000).\n.decl Lasts_for_n_days(Event:symbol, N_days:float)\nLasts_for_n_days(\"EastEnders series\", 125).\n.decl Answer()\nAnswer() :- Lasts_for_n_hours(\"EastEnders series\", n_hours), Lasts_for_n_days(\"EastEnders series\", n_days), n_hours <= n_days * 24.\n.output Answer"]}
{"id": 876, "answer": false, "completion": ".decl Found_in(Object:symbol, Place:symbol)\nFound_in(\"cucumber\", \"desert\").\n.decl Answer()\nAnswer() :- Found_in(\"cucumber\", \"desert\").\n.output Answer", "completions": [".decl Found_in(Object:symbol, Place:symbol)\nFound_in(\"cucumber\", \"desert\").\n.decl Answer()\nAnswer() :- Found_in(\"cucumber\", \"desert\").\n.output Answer"]}
{"id": 877, "answer": true, "completion": ".decl Starts_at(Show:symbol, Start_time:symbol)\nStarts_at(\"Borgia's World of Wonders\", \"8:00 PM\").\nStarts_at(\"Release Therapy\", \"9:00 PM\").\n.decl Ends_at(Show:symbol, End_time:symbol)\nEnds_at(\"Borgia's World of Wonders\", \"9:00 PM\").\nEnds_at(\"Release Therapy\", \"10:00 PM\").\n.decl Answer()\nAnswer() :- Starts_at(\"Borgia's World of Wonders\", start_time1), Starts_at(\"Release Therapy\", start_time2), Ends_at(\"Borgia's World of Wonders\", end_time1), Ends_at(\"Release Therapy\", end_time2), start_time1 < start_time2, end_time1 < end_time2.\n.output Answer", "completions": [".decl Starts_at(Show:symbol, Start_time:symbol)\nStarts_at(\"Borgia's World of Wonders\", \"8:00 PM\").\nStarts_at(\"Release Therapy\", \"9:00 PM\").\n.decl Ends_at(Show:symbol, End_time:symbol)\nEnds_at(\"Borgia's World of Wonders\", \"9:00 PM\").\nEnds_at(\"Release Therapy\", \"10:00 PM\").\n.decl Answer()\nAnswer() :- Starts_at(\"Borgia's World of Wonders\", start_time1), Starts_at(\"Release Therapy\", start_time2), Ends_at(\"Borgia's World of Wonders\", end_time1), Ends_at(\"Release Therapy\", end_time2), start_time1 < start_time2, end_time1 < end_time2.\n.output Answer"]}
{"id": 878, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"potato vodka\", \"potato\").\n.decl Is_allergic_to(Person:symbol, Allergen:symbol)\nIs_allergic_to(\"person with celiac disease\", \"gluten\").\n.decl Answer()\nAnswer() :- Is_allergic_to(\"person with celiac disease\", allergen), Has_ingredient(\"potato vodka\", ingredient), allergen != ingredient.\n.output Answer", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"potato vodka\", \"potato\").\n.decl Is_allergic_to(Person:symbol, Allergen:symbol)\nIs_allergic_to(\"person with celiac disease\", \"gluten\").\n.decl Answer()\nAnswer() :- Is_allergic_to(\"person with celiac disease\", allergen), Has_ingredient(\"potato vodka\", ingredient), allergen != ingredient.\n.output Answer"]}
{"id": 879, "answer": true, "completion": ".decl Has_policy(Organization:symbol, Policy:symbol)\nHas_policy(\"Catholic Church\", \"polyamory is not allowed\").\n.decl Answer()\nAnswer() :- Has_policy(\"Catholic Church\", \"polyamory is allowed\").\nAnswer() :- Has_policy(\"Catholic Church\", \"polyamory is not allowed\").\n.output Answer", "completions": [".decl Has_policy(Organization:symbol, Policy:symbol)\nHas_policy(\"Catholic Church\", \"polyamory is not allowed\").\n.decl Answer()\nAnswer() :- Has_policy(\"Catholic Church\", \"polyamory is allowed\").\nAnswer() :- Has_policy(\"Catholic Church\", \"polyamory is not allowed\").\n.output Answer"]}
{"id": 880, "answer": true, "completion": ".decl Has_symptoms(Mental_disorder:symbol, Symptom:symbol)\nHas_symptoms(\"schizophrenia\", \"delusions\").\nHas_symptoms(\"schizophrenia\", \"hallucinations\").\nHas_symptoms(\"schizophrenia\", \"disorganized speech\").\nHas_symptoms(\"schizophrenia\", \"negative symptoms\").\nHas_symptoms(\"schizophrenia\", \"disorganized behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts", "completions": [".decl Has_symptoms(Mental_disorder:symbol, Symptom:symbol)\nHas_symptoms(\"schizophrenia\", \"delusions\").\nHas_symptoms(\"schizophrenia\", \"hallucinations\").\nHas_symptoms(\"schizophrenia\", \"disorganized speech\").\nHas_symptoms(\"schizophrenia\", \"negative symptoms\").\nHas_symptoms(\"schizophrenia\", \"disorganized behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts\").\nHas_symptoms(\"schizophrenia\", \"unusual perceptions\").\nHas_symptoms(\"schizophrenia\", \"unusual beliefs\").\nHas_symptoms(\"schizophrenia\", \"unusual emotions\").\nHas_symptoms(\"schizophrenia\", \"unusual behavior\").\nHas_symptoms(\"schizophrenia\", \"unusual thoughts"]}
{"id": 881, "answer": true, "completion": ".decl Has_name(Brand:symbol, Name:symbol)\nHas_name(\"Tesla\", \"Nikola Tesla\").\nHas_name(\"Tesla\", \"Tesla\").\n.decl Answer()\nAnswer() :- Has_name(brand1, \"Nikola Tesla\"), Has_name(brand2, \"Nikola Tesla\"), brand1 != brand2.\n.output Answer", "completions": [".decl Has_name(Brand:symbol, Name:symbol)\nHas_name(\"Tesla\", \"Nikola Tesla\").\nHas_name(\"Tesla\", \"Tesla\").\n.decl Answer()\nAnswer() :- Has_name(brand1, \"Nikola Tesla\"), Has_name(brand2, \"Nikola Tesla\"), brand1 != brand2.\n.output Answer"]}
{"id": 882, "answer": false, "completion": ".decl Is_of_age(Person:symbol, Age:float)\nIs_of_age(\"eleventh-grader\", 16).\n.decl Answer()\nAnswer() :- Is_of_age(\"eleventh-grader\", age), age >= 65.\n.output Answer", "completions": [".decl Is_of_age(Person:symbol, Age:float)\nIs_of_age(\"eleventh-grader\", 16).\n.decl Answer()\nAnswer() :- Is_of_age(\"eleventh-grader\", age), age >= 65.\n.output Answer"]}
{"id": 883, "answer": false, "completion": ".decl Has_mood_disorder(Person:symbol)\nHas_mood_disorder(\"John Nash\").\n.decl Needs_permanent_institutionalization(Person:symbol)\nNeeds_permanent_institutionalization(\"John Nash\").\n.decl Answer()\nAnswer() :- Has_mood_disorder(person), Needs_permanent_institutionalization(person).\n.output Answer", "completions": [".decl Has_mood_disorder(Person:symbol)\nHas_mood_disorder(\"John Nash\").\n.decl Needs_permanent_institutionalization(Person:symbol)\nNeeds_permanent_institutionalization(\"John Nash\").\n.decl Answer()\nAnswer() :- Has_mood_disorder(person), Needs_permanent_institutionalization(person).\n.output Answer"]}
{"id": 884, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"flag of Gabon\", \"green\").\nHas_color(\"flag of Gabon\", \"yellow\").\nHas_color(\"flag of Gabon\", \"blue\").\nHas_color(\"rainbow\", \"red\").\nHas_color(\"rainbow\", \"orange\").\nHas_color(\"rainbow\", \"yellow\").\nHas_color(\"rainbow\", \"green\").\nHas_color(\"rainbow\", \"blue\").\nHas_color(\"rainbow\", \"indigo\").\nHas_color(\"rainbow\", \"violet\").\n.decl Answer()\nAnswer() :- Has_color(\"flag of Gabon\", color), Has_color(\"rainbow\", color).\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"flag of Gabon\", \"green\").\nHas_color(\"flag of Gabon\", \"yellow\").\nHas_color(\"flag of Gabon\", \"blue\").\nHas_color(\"rainbow\", \"red\").\nHas_color(\"rainbow\", \"orange\").\nHas_color(\"rainbow\", \"yellow\").\nHas_color(\"rainbow\", \"green\").\nHas_color(\"rainbow\", \"blue\").\nHas_color(\"rainbow\", \"indigo\").\nHas_color(\"rainbow\", \"violet\").\n.decl Answer()\nAnswer() :- Has_color(\"flag of Gabon\", color), Has_color(\"rainbow\", color).\n.output Answer"]}
{"id": 885, "answer": false, "completion": ".decl Has_type(Visit:symbol, Type:symbol)\nHas_type(\"preventive healthcare visit\", \"preventive healthcare\").\nHas_type(\"sickness visit\", \"sickness\").\n.decl Answer()\nAnswer() :- Has_type(\"preventive healthcare visit\", type1), Has_type(\"sickness visit\", type2), type1 != type2.\n.output Answer", "completions": [".decl Has_type(Visit:symbol, Type:symbol)\nHas_type(\"preventive healthcare visit\", \"preventive healthcare\").\nHas_type(\"sickness visit\", \"sickness\").\n.decl Answer()\nAnswer() :- Has_type(\"preventive healthcare visit\", type1), Has_type(\"sickness visit\", type2), type1 != type2.\n.output Answer"]}
{"id": 886, "answer": false, "completion": ".decl Has_fat(Food:symbol, Fat:float)\nHas_fat(\"McDonald's hamburger\", 8).\n.decl Has_fat_allowance(Person:symbol, Fat_allowance:float)\nHas_fat_allowance(\"USDA\", 65).\n.decl Answer()\nAnswer() :- Has_fat(\"McDonald's hamburger\", fat1), Has_fat_allowance(\"USDA\", fat2), fat1*7 > fat2.\n.output Answer", "completions": [".decl Has_fat(Food:symbol, Fat:float)\nHas_fat(\"McDonald's hamburger\", 8).\n.decl Has_fat_allowance(Person:symbol, Fat_allowance:float)\nHas_fat_allowance(\"USDA\", 65).\n.decl Answer()\nAnswer() :- Has_fat(\"McDonald's hamburger\", fat1), Has_fat_allowance(\"USDA\", fat2), fat1*7 > fat2.\n.output Answer"]}
{"id": 887, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Edward II of England\", 1284).\nHappens_in_year(\"Viking age\", 793).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Edward II of England\", year1), Happens_in_year(\"Viking age\", year2), year1 > year2.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Edward II of England\", 1284).\nHappens_in_year(\"Viking age\", 793).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Edward II of England\", year1), Happens_in_year(\"Viking age\", year2), year1 > year2.\n.output Answer"]}
{"id": 888, "answer": false, "completion": ".decl Has_magnetic_field(Object:symbol, Magnetic_field:float)\nHas_magnetic_field(\"Earth\", 0.00003).\n.decl Is_affected_by(Object1:symbol, Object2:symbol)\nIs_affected_by(\"implants from an ORIF surgery\", \"Earth's magnetic field\").\n.decl Answer()\nAnswer() :- Has_magnetic_field(\"Earth\", magnetic_field), Is_affected_by(\"implants from an ORIF surgery\", \"Earth's magnetic field\"), magnetic_field > 0.\n.output Answer", "completions": [".decl Has_magnetic_field(Object:symbol, Magnetic_field:float)\nHas_magnetic_field(\"Earth\", 0.00003).\n.decl Is_affected_by(Object1:symbol, Object2:symbol)\nIs_affected_by(\"implants from an ORIF surgery\", \"Earth's magnetic field\").\n.decl Answer()\nAnswer() :- Has_magnetic_field(\"Earth\", magnetic_field), Is_affected_by(\"implants from an ORIF surgery\", \"Earth's magnetic field\"), magnetic_field > 0.\n.output Answer"]}
{"id": 889, "answer": false, "completion": ".decl Has_population(Planet:symbol, Population:float)\nHas_population(\"earth\", 7.6).\n.decl Has_n_stars(Galaxy:symbol, N_stars:float)\nHas_n_stars(\"Milky Way\", 200).\n.decl Answer()\nAnswer() :- Has_population(\"earth\", population), Has_n_stars(\"Milky Way\", n_stars), n_stars >= 10 * population.\n.output Answer", "completions": [".decl Has_population(Planet:symbol, Population:float)\nHas_population(\"earth\", 7.6).\n.decl Has_n_stars(Galaxy:symbol, N_stars:float)\nHas_n_stars(\"Milky Way\", 200).\n.decl Answer()\nAnswer() :- Has_population(\"earth\", population), Has_n_stars(\"Milky Way\", n_stars), n_stars >= 10 * population.\n.output Answer"]}
{"id": 890, "answer": false, "completion": ".decl Found_in_food(Ingredient:symbol, Food:symbol)\nFound_in_food(\"parsley\", \"holiday plate\").\n.decl Found_in_food(Ingredient:symbol, Food:symbol)\nFound_in_food(\"tibia\", \"holiday plate\").\n.decl Answer()\nAnswer() :- Found_in_food(\"parsley\", \"holiday plate\"), Found_in_food(\"tibia\", \"holiday plate\").\n.output Answer", "completions": [".decl Found_in_food(Ingredient:symbol, Food:symbol)\nFound_in_food(\"parsley\", \"holiday plate\").\n.decl Found_in_food(Ingredient:symbol, Food:symbol)\nFound_in_food(\"tibia\", \"holiday plate\").\n.decl Answer()\nAnswer() :- Found_in_food(\"parsley\", \"holiday plate\"), Found_in_food(\"tibia\", \"holiday plate\").\n.output Answer"]}
{"id": 891, "answer": false, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"Ashland\", 20700).\n.decl Has_minimum_population(Division:symbol, Population:float)\nHas_minimum_population(\"military division\", 20000).\n.decl Answer()\nAnswer() :- Has_population(\"Ashland\", population1), Has_minimum_population(\"military division\", population2), population1 < population2.\n.output Answer", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"Ashland\", 20700).\n.decl Has_minimum_population(Division:symbol, Population:float)\nHas_minimum_population(\"military division\", 20000).\n.decl Answer()\nAnswer() :- Has_population(\"Ashland\", population1), Has_minimum_population(\"military division\", population2), population1 < population2.\n.output Answer"]}
{"id": 892, "answer": true, "completion": ".decl Is_alive(Person:symbol)\nIs_alive(\"Dennis Hopper\").\n.decl Is_age(Person:symbol, Age:float)\nIs_age(\"Dennis Hopper\", 74).\n.decl Answer()\nAnswer() :- Is_alive(\"Dennis Hopper\"), Is_age(\"Dennis Hopper\", age), age + 7 >= 80.\n.output Answer", "completions": [".decl Is_alive(Person:symbol)\nIs_alive(\"Dennis Hopper\").\n.decl Is_age(Person:symbol, Age:float)\nIs_age(\"Dennis Hopper\", 74).\n.decl Answer()\nAnswer() :- Is_alive(\"Dennis Hopper\"), Is_age(\"Dennis Hopper\", age), age + 7 >= 80.\n.output Answer"]}
{"id": 893, "answer": true, "completion": ".decl Has_behavior(Animal:symbol, Behavior:symbol)\nHas_behavior(\"bumblebee\", \"aggressive\").\nHas_behavior(\"bumblebee\", \"suicidal\").\n.decl Answer()\nAnswer() :- Has_behavior(\"bumblebee\", behavior1), Has_behavior(\"bumblebee\", behavior2), behavior1 != behavior2.\n.output Answer", "completions": [".decl Has_behavior(Animal:symbol, Behavior:symbol)\nHas_behavior(\"bumblebee\", \"aggressive\").\nHas_behavior(\"bumblebee\", \"suicidal\").\n.decl Answer()\nAnswer() :- Has_behavior(\"bumblebee\", behavior1), Has_behavior(\"bumblebee\", behavior2), behavior1 != behavior2.\n.output Answer"]}
{"id": 894, "answer": true, "completion": ".decl Has_surface_area(Object:symbol, Surface_area:float)\nHas_surface_area(\"Mercury\", 7.48e7).\nHas_surface_area(\"Slip N Slide\", 1.2).\n.decl Answer()\nAnswer() :- Has_surface_area(\"Mercury\", surface_area1), Has_surface_area(\"Slip N Slide\", surface_area2), surface_area1 > surface_area2.\n.output Answer", "completions": [".decl Has_surface_area(Object:symbol, Surface_area:float)\nHas_surface_area(\"Mercury\", 7.48e7).\nHas_surface_area(\"Slip N Slide\", 1.2).\n.decl Answer()\nAnswer() :- Has_surface_area(\"Mercury\", surface_area1), Has_surface_area(\"Slip N Slide\", surface_area2), surface_area1 > surface_area2.\n.output Answer"]}
{"id": 895, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"Bengal cat\", 0.91).\n.decl Answer()\nAnswer() :- Has_height(\"Bengal cat\", height1), Has_height(\"Javier Sotomayor\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Javier Sotomayor\", 2.45).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"Bengal cat\", 0.91).\n.decl Answer()\nAnswer() :- Has_height(\"Bengal cat\", height1), Has_height(\"Javier Sotomayor\", height2), height1 > height2.\n.output Answer"]}
{"id": 896, "answer": true, "completion": ".decl Is_made_with(Food:symbol, Ingredient:symbol)\nIs_made_with(\"store bought rice pudding\", \"brown rice\").\nIs_made_with(\"store bought rice pudding\", \"white rice\").\n.decl Answer()\nAnswer() :- Is_made_with(\"store bought rice pudding\", ingredient1), Is_made_with(\"store bought rice pudding\", ingredient2), ingredient1 = ingredient2.\n.output Answer", "completions": [".decl Is_made_with(Food:symbol, Ingredient:symbol)\nIs_made_with(\"store bought rice pudding\", \"brown rice\").\nIs_made_with(\"store bought rice pudding\", \"white rice\").\n.decl Answer()\nAnswer() :- Is_made_with(\"store bought rice pudding\", ingredient1), Is_made_with(\"store bought rice pudding\", ingredient2), ingredient1 = ingredient2.\n.output Answer"]}
{"id": 897, "answer": true, "completion": ".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"cancer\", \"excess adrenaline production\").\n.decl Answer()\nAnswer() :- Causes(\"cancer\", \"excess adrenaline production\").\n.output Answer", "completions": [".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"cancer\", \"excess adrenaline production\").\n.decl Answer()\nAnswer() :- Causes(\"cancer\", \"excess adrenaline production\").\n.output Answer"]}
{"id": 898, "answer": true, "completion": ".decl Has_n_states(Country:symbol, N_states:float)\nHas_n_states(\"Ancient Greece\", 4).\nHas_n_states(\"US\", 45).\n.decl Answer()\nAnswer() :- Has_n_states(\"Ancient Greece\", n_states1), Has_n_states(\"US\", n_states2), n_states1 < n_states2.\n.output Answer", "completions": [".decl Has_n_states(Country:symbol, N_states:float)\nHas_n_states(\"Ancient Greece\", 4).\nHas_n_states(\"US\", 45).\n.decl Answer()\nAnswer() :- Has_n_states(\"Ancient Greece\", n_states1), Has_n_states(\"US\", n_states2), n_states1 < n_states2.\n.output Answer"]}
{"id": 899, "answer": true, "completion": ".decl Founded_by(Company:symbol, Founder:symbol)\nFounded_by(\"Ben & Jerry's\", \"Ben Cohen\").\nFounded_by(\"Ben & Jerry's\", \"Jerry Greenfield\").\n.decl Involved_in(Person:symbol, Company:symbol)\nInvolved_in(\"Ben Cohen\", \"Ben & Jerry's\").\nInvolved_in(\"Jerry Greenfield\", \"Ben & Jerry's\").\n.decl Answer()\nAnswer() :- Founded_by(\"Ben & Jerry's\", founder1), Founded_by(\"Ben & Jerry's\", founder2), Involved_in(founder1, \"Ben & Jerry's\"), Involved_in(founder2, \"Ben & Jerry's\").\n.output Answer", "completions": [".decl Founded_by(Company:symbol, Founder:symbol)\nFounded_by(\"Ben & Jerry's\", \"Ben Cohen\").\nFounded_by(\"Ben & Jerry's\", \"Jerry Greenfield\").\n.decl Involved_in(Person:symbol, Company:symbol)\nInvolved_in(\"Ben Cohen\", \"Ben & Jerry's\").\nInvolved_in(\"Jerry Greenfield\", \"Ben & Jerry's\").\n.decl Answer()\nAnswer() :- Founded_by(\"Ben & Jerry's\", founder1), Founded_by(\"Ben & Jerry's\", founder2), Involved_in(founder1, \"Ben & Jerry's\"), Involved_in(founder2, \"Ben & Jerry's\").\n.output Answer"]}
{"id": 900, "answer": true, "completion": ".decl Has_job_title(Person:symbol, Job_title:symbol)\nHas_job_title(\"United States Secretary of State\", \"United States Secretary of State\").\nHas_job_title(\"White House\", \"White House\").\n.decl Answer()\nAnswer() :- Has_job_title(\"United States Secretary of State\", \"White House\").\n.output Answer", "completions": [".decl Has_job_title(Person:symbol, Job_title:symbol)\nHas_job_title(\"United States Secretary of State\", \"United States Secretary of State\").\nHas_job_title(\"White House\", \"White House\").\n.decl Answer()\nAnswer() :- Has_job_title(\"United States Secretary of State\", \"White House\").\n.output Answer"]}
{"id": 901, "answer": true, "completion": ".decl Develops(Person:symbol, Product:symbol)\nDevelops(\"Bill Gates\", \"Windows\").\nDevelops(\"Bill Gates\", \"Windows NT\").\nDevelops(\"Bill Gates\", \"Windows 2000\").\nDevelops(\"Bill Gates\", \"Windows XP\").\nDevelops(\"Bill Gates\", \"Windows Vista\").\nDevelops(\"Bill Gates\", \"Windows 7\").\nDevelops(\"Bill Gates\", \"Windows 8\").\nDevelops(\"Bill Gates\", \"Windows 8.1\").\nDevelops(\"Bill Gates\", \"Windows 10\").\nDevelops(\"Bill Gates\", \"Windows Server 2003\").\nDevelops(\"Bill Gates\", \"Windows Server 2008\").\nDevelops(\"Bill Gates\", \"Windows Server 2012\").\nDevelops(\"Bill Gates\", \"Windows Server 2016\").\nDevelops(\"Bill Gates\", \"Windows Server 2019\").\nDevelops(\"Bill Gates\", \"Windows Server 2020\").\nDevelops(\"Bill Gates\", \"Windows Server 20H1\").\nDevelops(\"Bill Gates\", \"Windows Server 20H2\").\nDevelops(\"Bill Gates\", \"Windows Server 21H1\").\nDevelops(\"Bill Gates\", \"Windows Server 21H2\").\nDevelops(\"Bill Gates\", \"Windows Server 22H1\").\nDevelops(\"Bill Gates\", \"Windows Server 22H2\").\nDevelops(\"Bill Gates\", \"Windows Server 23H1\").\nDevelops(\"Bill Gates\", \"Windows Server 23H2\").\nDevelops(\"Bill Gates\", \"Windows Server 24H1\").\nDevelops(\"Bill Gates\", \"Windows Server 24H2\").\nDevelops(\"Bill Gates\", \"Windows Server 25H1\").\nDevelops(\"Bill Gates\", \"Windows Server 25H2\").\nDevelops(\"Bill Gates\", \"Windows Server 26H1\").\nDevelops(\"Bill Gates\", \"Windows Server 26H2\").\nDevelops(\"Bill Gates\", \"Windows Server 27H1\").\nDevelops(\"Bill Gates\", \"Windows Server 27H2\").\nDevelops(\"Bill Gates\", \"Windows Server 28H1\").\nDevelops(\"Bill Gates\", \"Windows Server 28H2\").\nDevelops(\"Bill Gates\", \"Windows Server 29H1\").\nDevelops(\"Bill Gates\", \"Windows Server 29H2\").\nDevelops(\"Bill Gates\", \"Windows Server 30H1\").\nDevelops(\"Bill Gates\", \"Windows Server 30H2\").\nDevelops(\"Bill Gates\", \"Windows Server 31H1\").\nDevelops(\"Bill Gates\", \"Windows Server 31H2\").\nDevelops(\"Bill Gates\", \"Windows Server 32H1\").\nDevelops(\"Bill Gates\", \"Windows Server 32H2\").\nDevelops(\"Bill Gates\", \"Windows Server 33H1\").\nDevelops(\"Bill Gates\", \"Windows Server 33H2\").\nDevelops(\"Bill Gates\", \"Windows Server 34H1\").\nDevelops(\"Bill Gates\", \"Windows Server 34H2\").\nDevelops(\"Bill Gates\", \"Windows Server 35H1\").\nDevelops(\"Bill Gates\", \"Windows Server 35H2\").\nDevelops(\"Bill Gates\", \"Windows Server 36H1\").\nDevelops(\"Bill Gates\", \"Windows Server 36H2\").\nDevelops(\"Bill Gates\", \"Windows Server 37H1\").\nDevelops(\"Bill Gates\", \"Windows Server 37H2\").\nDevelops(\"Bill Gates\", \"Windows Server 38H1\").\nDevelops(\"Bill Gates\", \"Windows Server 38H2\").\nDevelops(\"Bill Gates\", \"Windows Server 39H1\").\nDevelops(\"Bill Gates\", \"Windows Server 39H2\").\nDevelops(\"Bill Gates\", \"Windows Server 40H1\").\nDevelops(\"Bill Gates\", \"Windows Server 40H2\").\nDevelops(\"Bill Gates\", \"Windows Server 41H1\").\nDevelops(\"Bill Gates\", \"Windows Server 41", "completions": [".decl Develops(Person:symbol, Product:symbol)\nDevelops(\"Bill Gates\", \"Windows\").\nDevelops(\"Bill Gates\", \"Windows NT\").\nDevelops(\"Bill Gates\", \"Windows 2000\").\nDevelops(\"Bill Gates\", \"Windows XP\").\nDevelops(\"Bill Gates\", \"Windows Vista\").\nDevelops(\"Bill Gates\", \"Windows 7\").\nDevelops(\"Bill Gates\", \"Windows 8\").\nDevelops(\"Bill Gates\", \"Windows 8.1\").\nDevelops(\"Bill Gates\", \"Windows 10\").\nDevelops(\"Bill Gates\", \"Windows Server 2003\").\nDevelops(\"Bill Gates\", \"Windows Server 2008\").\nDevelops(\"Bill Gates\", \"Windows Server 2012\").\nDevelops(\"Bill Gates\", \"Windows Server 2016\").\nDevelops(\"Bill Gates\", \"Windows Server 2019\").\nDevelops(\"Bill Gates\", \"Windows Server 2020\").\nDevelops(\"Bill Gates\", \"Windows Server 20H1\").\nDevelops(\"Bill Gates\", \"Windows Server 20H2\").\nDevelops(\"Bill Gates\", \"Windows Server 21H1\").\nDevelops(\"Bill Gates\", \"Windows Server 21H2\").\nDevelops(\"Bill Gates\", \"Windows Server 22H1\").\nDevelops(\"Bill Gates\", \"Windows Server 22H2\").\nDevelops(\"Bill Gates\", \"Windows Server 23H1\").\nDevelops(\"Bill Gates\", \"Windows Server 23H2\").\nDevelops(\"Bill Gates\", \"Windows Server 24H1\").\nDevelops(\"Bill Gates\", \"Windows Server 24H2\").\nDevelops(\"Bill Gates\", \"Windows Server 25H1\").\nDevelops(\"Bill Gates\", \"Windows Server 25H2\").\nDevelops(\"Bill Gates\", \"Windows Server 26H1\").\nDevelops(\"Bill Gates\", \"Windows Server 26H2\").\nDevelops(\"Bill Gates\", \"Windows Server 27H1\").\nDevelops(\"Bill Gates\", \"Windows Server 27H2\").\nDevelops(\"Bill Gates\", \"Windows Server 28H1\").\nDevelops(\"Bill Gates\", \"Windows Server 28H2\").\nDevelops(\"Bill Gates\", \"Windows Server 29H1\").\nDevelops(\"Bill Gates\", \"Windows Server 29H2\").\nDevelops(\"Bill Gates\", \"Windows Server 30H1\").\nDevelops(\"Bill Gates\", \"Windows Server 30H2\").\nDevelops(\"Bill Gates\", \"Windows Server 31H1\").\nDevelops(\"Bill Gates\", \"Windows Server 31H2\").\nDevelops(\"Bill Gates\", \"Windows Server 32H1\").\nDevelops(\"Bill Gates\", \"Windows Server 32H2\").\nDevelops(\"Bill Gates\", \"Windows Server 33H1\").\nDevelops(\"Bill Gates\", \"Windows Server 33H2\").\nDevelops(\"Bill Gates\", \"Windows Server 34H1\").\nDevelops(\"Bill Gates\", \"Windows Server 34H2\").\nDevelops(\"Bill Gates\", \"Windows Server 35H1\").\nDevelops(\"Bill Gates\", \"Windows Server 35H2\").\nDevelops(\"Bill Gates\", \"Windows Server 36H1\").\nDevelops(\"Bill Gates\", \"Windows Server 36H2\").\nDevelops(\"Bill Gates\", \"Windows Server 37H1\").\nDevelops(\"Bill Gates\", \"Windows Server 37H2\").\nDevelops(\"Bill Gates\", \"Windows Server 38H1\").\nDevelops(\"Bill Gates\", \"Windows Server 38H2\").\nDevelops(\"Bill Gates\", \"Windows Server 39H1\").\nDevelops(\"Bill Gates\", \"Windows Server 39H2\").\nDevelops(\"Bill Gates\", \"Windows Server 40H1\").\nDevelops(\"Bill Gates\", \"Windows Server 40H2\").\nDevelops(\"Bill Gates\", \"Windows Server 41H1\").\nDevelops(\"Bill Gates\", \"Windows Server 41"]}
{"id": 902, "answer": false, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Games of the XXII Olympiad\", 16).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"The Atlantic magazine\", 30).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"The Atlantic magazine\", n_days1), Last_n_days(\"Games of the XXII Olympiad\", n_days2), n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Games of the XXII Olympiad\", 16).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"The Atlantic magazine\", 30).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"The Atlantic magazine\", n_days1), Last_n_days(\"Games of the XXII Olympiad\", n_days2), n_days1 <= n_days2.\n.output Answer"]}
{"id": 903, "answer": false, "completion": ".decl Outlives(Person1:symbol, Person2:symbol)\nOutlives(\"Francis Crick\", \"James Watson\").\n.decl Answer()\nAnswer() :- Outlives(partner, \"James Watson\"), Graduates(\"James Watson\", \"Indiana University\").\n.output Answer", "completions": [".decl Outlives(Person1:symbol, Person2:symbol)\nOutlives(\"Francis Crick\", \"James Watson\").\n.decl Answer()\nAnswer() :- Outlives(partner, \"James Watson\"), Graduates(\"James Watson\", \"Indiana University\").\n.output Answer"]}
{"id": 904, "answer": true, "completion": ".decl Is_male(Person:symbol)\nIs_male(\"Alice\").\n.decl Answer()\nAnswer() :- Is_male(\"Alice\").\n.output Answer", "completions": [".decl Is_male(Person:symbol)\nIs_male(\"Alice\").\n.decl Answer()\nAnswer() :- Is_male(\"Alice\").\n.output Answer"]}
{"id": 905, "answer": true, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 906, "answer": true, "completion": ".decl Stars_in(Person:symbol, Movie:symbol)\nStars_in(\"Peter Fonda\", \"Easy Rider\").\nStars_in(\"Peter Fonda\", \"The Trip\").\nStars_in(\"Peter Fonda\", \"The Wild Angels\").\nStars_in(\"Peter Fonda\", \"The Young Lions\").\nStars_in(\"Peter Fonda\", \"Ulee's Gold\").\nStars_in(\"Peter Fonda\", \"The Limey\").\nStars_in(\"Peter Fonda\", \"The Passion of Ayn Rand\").\nStars_in(\"Peter Fonda\", \"The Laramie Project\").\nStars_in(\"Peter Fonda\", \"The Maldonado Miracle\").\nStars_in(\"Peter Fonda\", \"Hollywood Homicide\").\nStars_in(\"Peter Fonda\", \"3:10 to Yuma\").\nStars_in(\"Peter Fonda\", \"The Butler\").\nStars_in(\"Peter Fonda\", \"The Ballad of Lefty Brown\").\nStars_in(\"Peter Fonda\", \"The Last Full Measure\").\nStars_in(\"Peter Fonda\", \"The Hired Hand\").\nStars_in(\"Peter Fonda\", \"The Trip\").\nStars_in(\"Peter Fonda\", \"The Wild Angels\").\nStars_in(\"Peter Fonda\", \"The Young Lions\").\nStars_in(\"Peter Fonda\", \"Ulee's Gold\").\nStars_in(\"Peter Fonda\", \"The Limey\").\nStars_in(\"Peter Fonda\", \"The Passion of Ayn Rand\").\nStars_in(\"Peter Fonda\", \"The Laramie Project\").\nStars_in(\"Peter Fonda\", \"The Maldonado Miracle\").\nStars_in(\"Peter Fonda\", \"Hollywood Homicide\").\nStars_in(\"Peter Fonda\", \"3:10 to Yuma\").\nStars_in(\"Peter Fonda\", \"The Butler\").\nStars_in(\"Peter Fonda\", \"The Ballad of Lefty Brown\").\nStars_in(\"Peter Fonda\", \"The Last Full Measure\").\nStars_in(\"Peter Fonda\", \"The Hired Hand\").\nStars_in(\"Peter Fonda\", \"The Trip\").\nStars_in(\"Peter Fonda\", \"The Wild Angels\").\nStars_in(\"Peter Fonda\", \"The Young Lions\").\nStars_in(\"Peter Fonda\", \"Ulee's Gold\").\nStars_in(\"Peter Fonda\", \"The Limey\").\nStars_in(\"Peter Fonda\", \"The Passion of Ayn Rand\").\nStars_in(\"Peter Fonda\", \"The Laramie Project\").\nStars_in(\"Peter Fonda\", \"The Maldonado Miracle\").\nStars_in(\"Peter Fonda\", \"Hollywood Homicide\").\nStars_in(\"Peter Fonda\", \"3:10 to Yuma\").\nStars_in(\"Peter Fonda\", \"The Butler\").\nStars_in(\"Peter Fonda\", \"The Ballad of Lefty Brown\").\nStars_in(\"Peter Fonda\", \"The Last Full Measure\").\nStars_in(\"Peter Fonda\", \"The Hired Hand\").\nStars_in(\"Peter Fonda\", \"The Trip\").\nStars_in(\"Peter Fonda\", \"The Wild Angels\").\nStars_in(\"Peter Fonda\", \"The Young Lions\").\nStars_in(\"Peter Fonda\", \"Ulee's Gold\").\nStars_in(\"Peter Fonda\", \"The Limey\").\nStars_in(\"Peter Fonda\", \"The Passion of Ayn Rand\").\nStars_in(\"Peter Fonda\", \"The Laramie Project\").\nStars_in(\"Peter Fonda\", \"The Maldonado Miracle\").\nStars_in(\"Peter Fonda\", \"Hollywood Homicide\").\n", "completions": [".decl Stars_in(Person:symbol, Movie:symbol)\nStars_in(\"Peter Fonda\", \"Easy Rider\").\nStars_in(\"Peter Fonda\", \"The Trip\").\nStars_in(\"Peter Fonda\", \"The Wild Angels\").\nStars_in(\"Peter Fonda\", \"The Young Lions\").\nStars_in(\"Peter Fonda\", \"Ulee's Gold\").\nStars_in(\"Peter Fonda\", \"The Limey\").\nStars_in(\"Peter Fonda\", \"The Passion of Ayn Rand\").\nStars_in(\"Peter Fonda\", \"The Laramie Project\").\nStars_in(\"Peter Fonda\", \"The Maldonado Miracle\").\nStars_in(\"Peter Fonda\", \"Hollywood Homicide\").\nStars_in(\"Peter Fonda\", \"3:10 to Yuma\").\nStars_in(\"Peter Fonda\", \"The Butler\").\nStars_in(\"Peter Fonda\", \"The Ballad of Lefty Brown\").\nStars_in(\"Peter Fonda\", \"The Last Full Measure\").\nStars_in(\"Peter Fonda\", \"The Hired Hand\").\nStars_in(\"Peter Fonda\", \"The Trip\").\nStars_in(\"Peter Fonda\", \"The Wild Angels\").\nStars_in(\"Peter Fonda\", \"The Young Lions\").\nStars_in(\"Peter Fonda\", \"Ulee's Gold\").\nStars_in(\"Peter Fonda\", \"The Limey\").\nStars_in(\"Peter Fonda\", \"The Passion of Ayn Rand\").\nStars_in(\"Peter Fonda\", \"The Laramie Project\").\nStars_in(\"Peter Fonda\", \"The Maldonado Miracle\").\nStars_in(\"Peter Fonda\", \"Hollywood Homicide\").\nStars_in(\"Peter Fonda\", \"3:10 to Yuma\").\nStars_in(\"Peter Fonda\", \"The Butler\").\nStars_in(\"Peter Fonda\", \"The Ballad of Lefty Brown\").\nStars_in(\"Peter Fonda\", \"The Last Full Measure\").\nStars_in(\"Peter Fonda\", \"The Hired Hand\").\nStars_in(\"Peter Fonda\", \"The Trip\").\nStars_in(\"Peter Fonda\", \"The Wild Angels\").\nStars_in(\"Peter Fonda\", \"The Young Lions\").\nStars_in(\"Peter Fonda\", \"Ulee's Gold\").\nStars_in(\"Peter Fonda\", \"The Limey\").\nStars_in(\"Peter Fonda\", \"The Passion of Ayn Rand\").\nStars_in(\"Peter Fonda\", \"The Laramie Project\").\nStars_in(\"Peter Fonda\", \"The Maldonado Miracle\").\nStars_in(\"Peter Fonda\", \"Hollywood Homicide\").\nStars_in(\"Peter Fonda\", \"3:10 to Yuma\").\nStars_in(\"Peter Fonda\", \"The Butler\").\nStars_in(\"Peter Fonda\", \"The Ballad of Lefty Brown\").\nStars_in(\"Peter Fonda\", \"The Last Full Measure\").\nStars_in(\"Peter Fonda\", \"The Hired Hand\").\nStars_in(\"Peter Fonda\", \"The Trip\").\nStars_in(\"Peter Fonda\", \"The Wild Angels\").\nStars_in(\"Peter Fonda\", \"The Young Lions\").\nStars_in(\"Peter Fonda\", \"Ulee's Gold\").\nStars_in(\"Peter Fonda\", \"The Limey\").\nStars_in(\"Peter Fonda\", \"The Passion of Ayn Rand\").\nStars_in(\"Peter Fonda\", \"The Laramie Project\").\nStars_in(\"Peter Fonda\", \"The Maldonado Miracle\").\nStars_in(\"Peter Fonda\", \"Hollywood Homicide\").\n"]}
{"id": 907, "answer": false, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Melania Trump\", \"model\").\nHas_profession(\"Olga Kurylenko\", \"model\").\n.decl Answer()\nAnswer() :- Has_profession(\"Melania Trump\", profession), Has_profession(\"Olga Kurylenko\", profession).\n.output Answer", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Melania Trump\", \"model\").\nHas_profession(\"Olga Kurylenko\", \"model\").\n.decl Answer()\nAnswer() :- Has_profession(\"Melania Trump\", profession), Has_profession(\"Olga Kurylenko\", profession).\n.output Answer"]}
{"id": 908, "answer": true, "completion": ".decl Makes(Person:symbol, Object:symbol)\nMakes(\"farmer\", \"food\").\nMakes(\"engineer\", \"circuit board\").\n.decl Answer()\nAnswer() :- Makes(\"farmer\", \"circuit board\").\n.output Answer", "completions": [".decl Makes(Person:symbol, Object:symbol)\nMakes(\"farmer\", \"food\").\nMakes(\"engineer\", \"circuit board\").\n.decl Answer()\nAnswer() :- Makes(\"farmer\", \"circuit board\").\n.output Answer"]}
{"id": 909, "answer": false, "completion": ".decl Has_eye_diameter(Animal:symbol, Eye_diameter:float)\nHas_eye_diameter(\"jumping spider\", 0.5).\n.decl Has_lens_diameter(Contact_lens:symbol, Lens_diameter:float)\nHas_lens_diameter(\"contact lens\", 0.1).\n.decl Answer()\nAnswer() :- Has_eye_diameter(\"jumping spider\", eye_diameter), Has_lens_diameter(\"contact lens\", lens_diameter), eye_diameter/lens_diameter > 6.\n.output Answer", "completions": [".decl Has_eye_diameter(Animal:symbol, Eye_diameter:float)\nHas_eye_diameter(\"jumping spider\", 0.5).\n.decl Has_lens_diameter(Contact_lens:symbol, Lens_diameter:float)\nHas_lens_diameter(\"contact lens\", 0.1).\n.decl Answer()\nAnswer() :- Has_eye_diameter(\"jumping spider\", eye_diameter), Has_lens_diameter(\"contact lens\", lens_diameter), eye_diameter/lens_diameter > 6.\n.output Answer"]}
{"id": 910, "answer": true, "completion": ".decl Uses_currency(Event:symbol, Currency:symbol)\nUses_currency(\"Louisiana Purchase\", \"United States dollar\").\n.decl Answer()\nAnswer() :- Uses_currency(\"Louisiana Purchase\", \"bitcoin\"), !.\n.output Answer", "completions": [".decl Uses_currency(Event:symbol, Currency:symbol)\nUses_currency(\"Louisiana Purchase\", \"United States dollar\").\n.decl Answer()\nAnswer() :- Uses_currency(\"Louisiana Purchase\", \"bitcoin\"), !.\n.output Answer"]}
{"id": 911, "answer": false, "completion": ".decl Has_n_pages(Book:symbol, N_pages:float)\nHas_n_pages(\"The Hobbit\", 295).\n.decl Answer()\nAnswer() :- Has_n_pages(\"The Hobbit\", n_pages), n_pages <= 240.\n.output Answer", "completions": [".decl Has_n_pages(Book:symbol, N_pages:float)\nHas_n_pages(\"The Hobbit\", 295).\n.decl Answer()\nAnswer() :- Has_n_pages(\"The Hobbit\", n_pages), n_pages <= 240.\n.output Answer"]}
{"id": 912, "answer": true, "completion": ".decl Cost(Object:symbol, Cost:float)\nCost(\"Boeing 737\", 100000000).\nCost(\"Wonder Woman (2017 film)\", 821000000).\n.decl Answer()\nAnswer() :- Cost(\"Boeing 737\", cost1), Cost(\"Wonder Woman (2017 film)\", cost2), cost1 <= cost2.\n.output Answer", "completions": [".decl Cost(Object:symbol, Cost:float)\nCost(\"Boeing 737\", 100000000).\nCost(\"Wonder Woman (2017 film)\", 821000000).\n.decl Answer()\nAnswer() :- Cost(\"Boeing 737\", cost1), Cost(\"Wonder Woman (2017 film)\", cost2), cost1 <= cost2.\n.output Answer"]}
{"id": 913, "answer": true, "completion": ".decl Involved_in(Person:symbol, Event:symbol)\nInvolved_in(\"paparazzi\", \"death of Diana\").\n.decl Answer()\nAnswer() :- Involved_in(\"paparazzi\", event), Involved_in(person, event), person != \"paparazzi\".\n.output Answer", "completions": [".decl Involved_in(Person:symbol, Event:symbol)\nInvolved_in(\"paparazzi\", \"death of Diana\").\n.decl Answer()\nAnswer() :- Involved_in(\"paparazzi\", event), Involved_in(person, event), person != \"paparazzi\".\n.output Answer"]}
{"id": 914, "answer": true, "completion": ".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"John Gall\", \"San Francisco\").\n.decl Founded_in(University:symbol, City:symbol)\nFounded_in(\"Stanford University\", \"San Francisco\").\n.decl Answer()\nAnswer() :- Lives_in(\"John Gall\", \"San Francisco\").\nAnswer() :- Lives_in(\"John Gall\", city), Founded_in(\"Stanford University\", city).\n.output Answer", "completions": [".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"John Gall\", \"San Francisco\").\n.decl Founded_in(University:symbol, City:symbol)\nFounded_in(\"Stanford University\", \"San Francisco\").\n.decl Answer()\nAnswer() :- Lives_in(\"John Gall\", \"San Francisco\").\nAnswer() :- Lives_in(\"John Gall\", city), Founded_in(\"Stanford University\", city).\n.output Answer"]}
{"id": 915, "answer": true, "completion": ".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"pig slaughter\", 1).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"parma ham\", 12).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"parma ham\", n_months1), Last_n_months(\"pig slaughter\", n_months2),  n_months1 <= n_months2.\n.output Answer", "completions": [".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"pig slaughter\", 1).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"parma ham\", 12).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"parma ham\", n_months1), Last_n_months(\"pig slaughter\", n_months2),  n_months1 <= n_months2.\n.output Answer"]}
{"id": 916, "answer": true, "completion": ".decl Is_unhealthy(Substance:symbol)\nIs_unhealthy(\"ammonia\").\n.decl Answer()\nAnswer() :- Is_unhealthy(substance).\n.output Answer", "completions": [".decl Is_unhealthy(Substance:symbol)\nIs_unhealthy(\"ammonia\").\n.decl Answer()\nAnswer() :- Is_unhealthy(substance).\n.output Answer"]}
{"id": 917, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"pig\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"pig\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\").\nEats(\"hamster\", \"hamster\")."]}
{"id": 918, "answer": true, "completion": ".decl Plays_in_venue(Band:symbol, Venue:symbol)\nPlays_in_venue(\"The Beatles\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Rolling Stones\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Beach Boys\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Animals\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Beach Boys\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Animals\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Beach Boys\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Animals\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Beach Boys\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Animals\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Beach Boys\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Animals\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Beach Boys\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Animals\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_", "completions": [".decl Plays_in_venue(Band:symbol, Venue:symbol)\nPlays_in_venue(\"The Beatles\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Rolling Stones\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Beach Boys\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Animals\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Beach Boys\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Animals\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Beach Boys\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Animals\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Beach Boys\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Animals\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Beach Boys\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Animals\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Beach Boys\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Animals\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Doors\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Grateful Dead\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Who\", \"Hammerstein Ballroom\").\nPlays_in_venue(\"The Kinks\", \"Hammerstein Ballroom\").\nPlays_"]}
{"id": 919, "answer": true, "completion": ".decl Plays_role(Person:symbol, Role:symbol)\nPlays_role(\"Elle Fanning\", \"actress\").\n.decl Ends(Event:symbol, Thing:symbol)\nEnds(\"apartheid\", \"apartheid\").\n.decl Answer()\nAnswer() :- Plays_role(\"Elle Fanning\", \"actress\"), Ends(\"apartheid\", \"apartheid\").\n.output Answer", "completions": [".decl Plays_role(Person:symbol, Role:symbol)\nPlays_role(\"Elle Fanning\", \"actress\").\n.decl Ends(Event:symbol, Thing:symbol)\nEnds(\"apartheid\", \"apartheid\").\n.decl Answer()\nAnswer() :- Plays_role(\"Elle Fanning\", \"actress\"), Ends(\"apartheid\", \"apartheid\").\n.output Answer"]}
{"id": 920, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Bubbles\", 6).\nHas_age(\"Buttercup\", 6).\nHas_age(\"Blossom\", 6).\n.decl Has_minimum_age(Academy:symbol, Minimum_age:float)\nHas_minimum_age(\"Camden Military Academy\", 11).\n.decl Answer()\nAnswer() :- Has_age(person, age), Has_minimum_age(\"Camden Military Academy\", minimum_age), age >= minimum_age.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Bubbles\", 6).\nHas_age(\"Buttercup\", 6).\nHas_age(\"Blossom\", 6).\n.decl Has_minimum_age(Academy:symbol, Minimum_age:float)\nHas_minimum_age(\"Camden Military Academy\", 11).\n.decl Answer()\nAnswer() :- Has_age(person, age), Has_minimum_age(\"Camden Military Academy\", minimum_age), age >= minimum_age.\n.output Answer"]}
{"id": 921, "answer": true, "completion": ".decl Can_ride(Person:symbol, Animal:symbol)\nCan_ride(\"Chuck Norris\", \"horse\").\n.decl Answer()\nAnswer() :- Can_ride(\"Chuck Norris\", \"horse\").\n.output Answer", "completions": [".decl Can_ride(Person:symbol, Animal:symbol)\nCan_ride(\"Chuck Norris\", \"horse\").\n.decl Answer()\nAnswer() :- Can_ride(\"Chuck Norris\", \"horse\").\n.output Answer"]}
{"id": 922, "answer": false, "completion": ".decl Involves(Event:symbol, Object:symbol)\nInvolves(\"Space Race\", \"rocket\").\nInvolves(\"Space Race\", \"satellite\").\nInvolves(\"Space Race\", \"astronaut\").\n.decl Answer()\nAnswer() :- Involves(\"Space Race\", \"relay baton\").\n.output Answer", "completions": [".decl Involves(Event:symbol, Object:symbol)\nInvolves(\"Space Race\", \"rocket\").\nInvolves(\"Space Race\", \"satellite\").\nInvolves(\"Space Race\", \"astronaut\").\n.decl Answer()\nAnswer() :- Involves(\"Space Race\", \"relay baton\").\n.output Answer"]}
{"id": 923, "answer": true, "completion": ".decl Approves(Person1:symbol, Person2:symbol)\nApproves(\"Harvey Milk\", \"Barack Obama\").\n.decl Answer()\nAnswer() :- Approves(\"Harvey Milk\", \"Barack Obama\").\n.output Answer", "completions": [".decl Approves(Person1:symbol, Person2:symbol)\nApproves(\"Harvey Milk\", \"Barack Obama\").\n.decl Answer()\nAnswer() :- Approves(\"Harvey Milk\", \"Barack Obama\").\n.output Answer"]}
{"id": 924, "answer": true, "completion": ".decl Has_to_wear_glasses(Activity:symbol, Yes_or_no:symbol)\nHas_to_wear_glasses(\"reading a QR code\", \"no\").\n.decl Answer()\nAnswer() :- Has_to_wear_glasses(\"reading a QR code\", \"no\").\n.output Answer", "completions": [".decl Has_to_wear_glasses(Activity:symbol, Yes_or_no:symbol)\nHas_to_wear_glasses(\"reading a QR code\", \"no\").\n.decl Answer()\nAnswer() :- Has_to_wear_glasses(\"reading a QR code\", \"no\").\n.output Answer"]}
{"id": 925, "answer": false, "completion": ".decl Spent_time(Person:symbol, Time:symbol)\nSpent_time(\"Rumi\", \"euphoria\").\n.decl Answer()\nAnswer() :- Spent_time(\"Rumi\", \"euphoria\").\n.output Answer", "completions": [".decl Spent_time(Person:symbol, Time:symbol)\nSpent_time(\"Rumi\", \"euphoria\").\n.decl Answer()\nAnswer() :- Spent_time(\"Rumi\", \"euphoria\").\n.output Answer"]}
{"id": 926, "answer": true, "completion": ".decl Is_useful(Test:symbol, Object:symbol)\nIs_useful(\"dual-energy X-ray absorptiometry\", \"bone\").\nIs_useful(\"dual-energy X-ray absorptiometry\", \"muscle\").\nIs_useful(\"dual-energy X-ray absorptiometry\", \"fat\").\n.decl Answer()\nAnswer() :- Is_useful(\"dual-energy X-ray absorptiometry\", \"crab\").\n.output Answer", "completions": [".decl Is_useful(Test:symbol, Object:symbol)\nIs_useful(\"dual-energy X-ray absorptiometry\", \"bone\").\nIs_useful(\"dual-energy X-ray absorptiometry\", \"muscle\").\nIs_useful(\"dual-energy X-ray absorptiometry\", \"fat\").\n.decl Answer()\nAnswer() :- Is_useful(\"dual-energy X-ray absorptiometry\", \"crab\").\n.output Answer"]}
{"id": 927, "answer": true, "completion": ".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"cactus\", \"cylindrical\").\nHas_shape(\"cactus\", \"spherical\").\nHas_shape(\"cactus\", \"conical\").\n.decl Is_aerodynamic(Object:symbol)\nIs_aerodynamic(\"cactus\") :- Has_shape(\"cactus\", \"cylindrical\").\nIs_aerodynamic(\"cactus\") :- Has_shape(\"cactus\", \"spherical\").\nIs_aerodynamic(\"cactus\") :- Has_shape(\"cactus\", \"conical\").\n.decl Answer()\nAnswer() :- Is_aerodynamic(\"cactus\").\n.output Answer", "completions": [".decl Has_shape(Object:symbol, Shape:symbol)\nHas_shape(\"cactus\", \"cylindrical\").\nHas_shape(\"cactus\", \"spherical\").\nHas_shape(\"cactus\", \"conical\").\n.decl Is_aerodynamic(Object:symbol)\nIs_aerodynamic(\"cactus\") :- Has_shape(\"cactus\", \"cylindrical\").\nIs_aerodynamic(\"cactus\") :- Has_shape(\"cactus\", \"spherical\").\nIs_aerodynamic(\"cactus\") :- Has_shape(\"cactus\", \"conical\").\n.decl Answer()\nAnswer() :- Is_aerodynamic(\"cactus\").\n.output Answer"]}
{"id": 928, "answer": true, "completion": ".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"oysters\", \"zinc\").\nHas_nutrient(\"oysters\", \"copper\").\nHas_nutrient(\"oysters\", \"manganese\").\nHas_nutrient(\"oysters\", \"selenium\").\nHas_nutrient(\"oysters\", \"iodine\").\nHas_nutrient(\"oysters\", \"iron\").\nHas_nutrient(\"oysters\", \"vitamin B12\").\nHas_nutrient(\"oysters\", \"phosphorus\").\nHas_nutrient(\"oysters\", \"potassium\").\nHas_nutrient(\"oysters\", \"magnesium\").\nHas_nutrient(\"oysters\", \"calcium\").\nHas_nutrient(\"oysters\", \"protein\").\nHas_nutrient(\"oysters\", \"fat\").\nHas_nutrient(\"oysters\", \"cholesterol\").\nHas_nutrient(\"oysters\", \"carbohydrate\").\nHas_nutrient(\"oysters\", \"water\").\nHas_nutrient(\"oysters\", \"calories\").\nHas_nutrient(\"oysters\", \"monounsaturated fat\").\nHas_nutrient(\"oysters\", \"polyunsaturated fat\").\nHas_nutrient(\"oysters\", \"saturated fat\").\nHas_nutrient(\"oysters\", \"trans fat\").\nHas_nutrient(\"oysters\", \"dietary fiber\").\nHas_nutrient(\"oysters\", \"sugar\").\nHas_nutrient(\"oysters\", \"vitamin A\").\nHas_nutrient(\"oysters\", \"vitamin C\").\nHas_nutrient(\"oysters\", \"vitamin D\").\nHas_nutrient(\"oysters\", \"vitamin E\").\nHas_nutrient(\"oysters\", \"vitamin K\").\nHas_nutrient(\"oysters\", \"thiamin\").\nHas_nutrient(\"oysters\", \"riboflavin\").\nHas_nutrient(\"oysters\", \"niacin\").\nHas_nutrient(\"oysters\", \"vitamin B6\").\nHas_nutrient(\"oysters\", \"folate\").\nHas_nutrient(\"oysters\", \"pantothenic acid\").\nHas_nutrient(\"oysters\", \"choline\").\nHas_nutrient(\"oysters\", \"betaine\").\nHas_nutrient(\"oysters\", \"sodium\").\nHas_nutrient(\"oysters\", \"potassium\").\nHas_nutrient(\"oysters\", \"chloride\").\nHas_nutrient(\"oysters\", \"calcium\").\nHas_nutrient(\"oysters\", \"phosphorus\").\nHas_nutrient(\"oysters\", \"magnesium\").\nHas_nutrient(\"oysters\", \"iron\").\nHas_nutrient(\"oysters\", \"zinc\").\nHas_nutrient(\"oysters\", \"copper\").\nHas_nutrient(\"oysters\", \"manganese\").\nHas_nutrient(\"oysters\", \"selenium\").\nHas_nutrient(\"oysters\", \"fluoride\").\nHas_nutrient(\"oysters\", \"molybdenum\").\nHas_nutrient(\"oysters\", \"iodine\").\nHas_nutrient(\"oysters\", \"caffeine\").\nHas_nutrient(\"oysters\", \"theobromine\").\nHas_nutrient(\"oysters\", \"alcohol\").\nHas_nutrient(\"oysters\", \"water\").\n.decl Has_symptom(Condition:symbol, Symptom:symbol)\nHas_symptom(\"ADHD\", \"inattention\").\nHas_symptom(\"ADHD\", \"hyperactivity\").\n", "completions": [".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"oysters\", \"zinc\").\nHas_nutrient(\"oysters\", \"copper\").\nHas_nutrient(\"oysters\", \"manganese\").\nHas_nutrient(\"oysters\", \"selenium\").\nHas_nutrient(\"oysters\", \"iodine\").\nHas_nutrient(\"oysters\", \"iron\").\nHas_nutrient(\"oysters\", \"vitamin B12\").\nHas_nutrient(\"oysters\", \"phosphorus\").\nHas_nutrient(\"oysters\", \"potassium\").\nHas_nutrient(\"oysters\", \"magnesium\").\nHas_nutrient(\"oysters\", \"calcium\").\nHas_nutrient(\"oysters\", \"protein\").\nHas_nutrient(\"oysters\", \"fat\").\nHas_nutrient(\"oysters\", \"cholesterol\").\nHas_nutrient(\"oysters\", \"carbohydrate\").\nHas_nutrient(\"oysters\", \"water\").\nHas_nutrient(\"oysters\", \"calories\").\nHas_nutrient(\"oysters\", \"monounsaturated fat\").\nHas_nutrient(\"oysters\", \"polyunsaturated fat\").\nHas_nutrient(\"oysters\", \"saturated fat\").\nHas_nutrient(\"oysters\", \"trans fat\").\nHas_nutrient(\"oysters\", \"dietary fiber\").\nHas_nutrient(\"oysters\", \"sugar\").\nHas_nutrient(\"oysters\", \"vitamin A\").\nHas_nutrient(\"oysters\", \"vitamin C\").\nHas_nutrient(\"oysters\", \"vitamin D\").\nHas_nutrient(\"oysters\", \"vitamin E\").\nHas_nutrient(\"oysters\", \"vitamin K\").\nHas_nutrient(\"oysters\", \"thiamin\").\nHas_nutrient(\"oysters\", \"riboflavin\").\nHas_nutrient(\"oysters\", \"niacin\").\nHas_nutrient(\"oysters\", \"vitamin B6\").\nHas_nutrient(\"oysters\", \"folate\").\nHas_nutrient(\"oysters\", \"pantothenic acid\").\nHas_nutrient(\"oysters\", \"choline\").\nHas_nutrient(\"oysters\", \"betaine\").\nHas_nutrient(\"oysters\", \"sodium\").\nHas_nutrient(\"oysters\", \"potassium\").\nHas_nutrient(\"oysters\", \"chloride\").\nHas_nutrient(\"oysters\", \"calcium\").\nHas_nutrient(\"oysters\", \"phosphorus\").\nHas_nutrient(\"oysters\", \"magnesium\").\nHas_nutrient(\"oysters\", \"iron\").\nHas_nutrient(\"oysters\", \"zinc\").\nHas_nutrient(\"oysters\", \"copper\").\nHas_nutrient(\"oysters\", \"manganese\").\nHas_nutrient(\"oysters\", \"selenium\").\nHas_nutrient(\"oysters\", \"fluoride\").\nHas_nutrient(\"oysters\", \"molybdenum\").\nHas_nutrient(\"oysters\", \"iodine\").\nHas_nutrient(\"oysters\", \"caffeine\").\nHas_nutrient(\"oysters\", \"theobromine\").\nHas_nutrient(\"oysters\", \"alcohol\").\nHas_nutrient(\"oysters\", \"water\").\n.decl Has_symptom(Condition:symbol, Symptom:symbol)\nHas_symptom(\"ADHD\", \"inattention\").\nHas_symptom(\"ADHD\", \"hyperactivity\").\n"]}
{"id": 929, "answer": true, "completion": ".decl Is_on(Object:symbol, Location:symbol)\nIs_on(\"Royal Air Force ensign\", \"Earth\").\n.decl Answer()\nAnswer() :- Is_on(\"Royal Air Force ensign\", \"moon\").\n.output Answer", "completions": [".decl Is_on(Object:symbol, Location:symbol)\nIs_on(\"Royal Air Force ensign\", \"Earth\").\n.decl Answer()\nAnswer() :- Is_on(\"Royal Air Force ensign\", \"moon\").\n.output Answer"]}
{"id": 930, "answer": true, "completion": ".decl Has_citizens(Country:symbol, N_citizens:float)\nHas_citizens(\"Samoa\", 200000).\nHas_citizens(\"United States\", 320000000).\n.decl Has_employees(Company:symbol, N_employees:float)\nHas_employees(\"JPMorgan Chase\", 250000).\n.decl Answer()\nAnswer() :- Has_citizens(\"Samoa\", n_citizens), Has_employees(\"JPMorgan Chase\", n_employees), n_citizens <= n_employees.\n.output Answer", "completions": [".decl Has_citizens(Country:symbol, N_citizens:float)\nHas_citizens(\"Samoa\", 200000).\nHas_citizens(\"United States\", 320000000).\n.decl Has_employees(Company:symbol, N_employees:float)\nHas_employees(\"JPMorgan Chase\", 250000).\n.decl Answer()\nAnswer() :- Has_citizens(\"Samoa\", n_citizens), Has_employees(\"JPMorgan Chase\", n_employees), n_citizens <= n_employees.\n.output Answer"]}
{"id": 931, "answer": true, "completion": ".decl Contributes_to(Person:symbol, Work:symbol)\nContributes_to(\"Rosalind Franklin\", \"DNA\").\nContributes_to(\"Rosalind Franklin\", \"RNA\").\nContributes_to(\"Rosalind Franklin\", \"protein\").\nContributes_to(\"Rosalind Franklin\", \"chromosome\").\nContributes_to(\"Rosalind Franklin\", \"genome\").\nContributes_to(\"Rosalind Franklin\", \"genetics\").\nContributes_to(\"Rosalind Franklin\", \"molecular biology\").\nContributes_to(\"Rosalind Franklin\", \"cell\").\nContributes_to(\"Rosalind Franklin\", \"cell biology\").\nContributes_to(\"Rosalind Franklin\", \"biochemistry\").\nContributes_to(\"Rosalind Franklin\", \"biophysics\").\nContributes_to(\"Rosalind Franklin\", \"chemistry\").\nContributes_to(\"Rosalind Franklin\", \"physics\").\nContributes_to(\"Rosalind Franklin\", \"science\").\nContributes_to(\"Rosalind Franklin\", \"Whole Genome Sequencing\").\n.decl Answer()\nAnswer() :- Contributes_to(\"Rosalind Franklin\", \"Whole Genome Sequencing\").\n.output Answer", "completions": [".decl Contributes_to(Person:symbol, Work:symbol)\nContributes_to(\"Rosalind Franklin\", \"DNA\").\nContributes_to(\"Rosalind Franklin\", \"RNA\").\nContributes_to(\"Rosalind Franklin\", \"protein\").\nContributes_to(\"Rosalind Franklin\", \"chromosome\").\nContributes_to(\"Rosalind Franklin\", \"genome\").\nContributes_to(\"Rosalind Franklin\", \"genetics\").\nContributes_to(\"Rosalind Franklin\", \"molecular biology\").\nContributes_to(\"Rosalind Franklin\", \"cell\").\nContributes_to(\"Rosalind Franklin\", \"cell biology\").\nContributes_to(\"Rosalind Franklin\", \"biochemistry\").\nContributes_to(\"Rosalind Franklin\", \"biophysics\").\nContributes_to(\"Rosalind Franklin\", \"chemistry\").\nContributes_to(\"Rosalind Franklin\", \"physics\").\nContributes_to(\"Rosalind Franklin\", \"science\").\nContributes_to(\"Rosalind Franklin\", \"Whole Genome Sequencing\").\n.decl Answer()\nAnswer() :- Contributes_to(\"Rosalind Franklin\", \"Whole Genome Sequencing\").\n.output Answer"]}
{"id": 932, "answer": true, "completion": ".decl Holds_qualifications(Person:symbol, Qualifications:symbol)\nHolds_qualifications(\"Kenny G\", \"musician\").\n.decl Answer()\nAnswer() :- Holds_qualifications(\"Kenny G\", \"tax collector\").\n.output Answer", "completions": [".decl Holds_qualifications(Person:symbol, Qualifications:symbol)\nHolds_qualifications(\"Kenny G\", \"musician\").\n.decl Answer()\nAnswer() :- Holds_qualifications(\"Kenny G\", \"tax collector\").\n.output Answer"]}
{"id": 933, "answer": false, "completion": ".decl Weighs_more_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_more_than(\"sable\", \"ermine\").\nWeighs_more_than(\"ermine\", \"mink\").\nWeighs_more_than(\"mink\", \"otter\").\nWeighs_more_than(\"otter\", \"weasel\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"sable\", \"weasel\").\n.output Answer", "completions": [".decl Weighs_more_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_more_than(\"sable\", \"ermine\").\nWeighs_more_than(\"ermine\", \"mink\").\nWeighs_more_than(\"mink\", \"otter\").\nWeighs_more_than(\"otter\", \"weasel\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"sable\", \"weasel\").\n.output Answer"]}
{"id": 934, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Mickey Mouse\", \"black\").\nHas_color(\"Mickey Mouse\", \"white\").\nHas_color(\"American flag\", \"red\").\nHas_color(\"American flag\", \"white\").\nHas_color(\"American flag\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Mickey Mouse\", color1), Has_color(\"American flag\", color2), color1 = color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Mickey Mouse\", \"black\").\nHas_color(\"Mickey Mouse\", \"white\").\nHas_color(\"American flag\", \"red\").\nHas_color(\"American flag\", \"white\").\nHas_color(\"American flag\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Mickey Mouse\", color1), Has_color(\"American flag\", color2), color1 = color2.\n.output Answer"]}
{"id": 935, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Anakin Skywalker\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"Anakin Skywalker\", \"black\").\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Anakin Skywalker\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"Anakin Skywalker\", \"black\").\n.output Answer"]}
{"id": 936, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Egyptian myth\", \"ancient Egypt\").\nHappens_in_time(\"story of Jesus\", \"ancient Rome\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"story of Jesus\", time1), Happens_in_time(\"Egyptian myth\", time2), time1 < time2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Egyptian myth\", \"ancient Egypt\").\nHappens_in_time(\"story of Jesus\", \"ancient Rome\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"story of Jesus\", time1), Happens_in_time(\"Egyptian myth\", time2), time1 < time2.\n.output Answer"]}
{"id": 937, "answer": true, "completion": ".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Jennifer Lawrence\", \"Shawn\").\n.decl Collaborated_with(Person:symbol, Collaborator:symbol)\nCollaborated_with(\"Martin Scorsese\", \"Thelma Schoonmaker\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Jennifer Lawrence\", middle_name), Collaborated_with(\"Martin Scorsese\", collaborator), middle_name = collaborator.\n.output Answer", "completions": [".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Jennifer Lawrence\", \"Shawn\").\n.decl Collaborated_with(Person:symbol, Collaborator:symbol)\nCollaborated_with(\"Martin Scorsese\", \"Thelma Schoonmaker\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Jennifer Lawrence\", middle_name), Collaborated_with(\"Martin Scorsese\", collaborator), middle_name = collaborator.\n.output Answer"]}
{"id": 938, "answer": true, "completion": ".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"Golden Gate Bridge\", \"steel\").\nHas_material(\"MP3\", \"plastic\").\n.decl Answer()\nAnswer() :- Has_material(\"Golden Gate Bridge\", \"steel\").\nAnswer() :- Has_material(\"MP3\", \"plastic\").\n.output Answer", "completions": [".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"Golden Gate Bridge\", \"steel\").\nHas_material(\"MP3\", \"plastic\").\n.decl Answer()\nAnswer() :- Has_material(\"Golden Gate Bridge\", \"steel\").\nAnswer() :- Has_material(\"MP3\", \"plastic\").\n.output Answer"]}
{"id": 939, "answer": false, "completion": ".decl Treats(Medication:symbol, Disease:symbol)\nTreats(\"Prozac\", \"Depression\").\n.decl Answer()\nAnswer() :- Treats(\"Prozac\", \"Great Depression\").\n.output Answer", "completions": [".decl Treats(Medication:symbol, Disease:symbol)\nTreats(\"Prozac\", \"Depression\").\n.decl Answer()\nAnswer() :- Treats(\"Prozac\", \"Great Depression\").\n.output Answer"]}
{"id": 940, "answer": true, "completion": ".decl Creates_waste(Organization:symbol, Waste:symbol)\nCreates_waste(\"United States Navy\", \"radioactive waste\").\n.decl Answer()\nAnswer() :- Creates_waste(\"United States Navy\", \"radioactive waste\").\n.output Answer\n\n", "completions": [".decl Creates_waste(Organization:symbol, Waste:symbol)\nCreates_waste(\"United States Navy\", \"radioactive waste\").\n.decl Answer()\nAnswer() :- Creates_waste(\"United States Navy\", \"radioactive waste\").\n.output Answer\n\n"]}
{"id": 941, "answer": false, "completion": ".decl Has_pith(Fruit:symbol, Pith_percentage:float)\nHas_pith(\"clementine\", 0.1).\n.decl Answer()\nAnswer() :- Has_pith(\"clementine\", pith_percentage), pith_percentage > 0.05.\n.output Answer\n\n", "completions": [".decl Has_pith(Fruit:symbol, Pith_percentage:float)\nHas_pith(\"clementine\", 0.1).\n.decl Answer()\nAnswer() :- Has_pith(\"clementine\", pith_percentage), pith_percentage > 0.05.\n.output Answer\n\n"]}
{"id": 942, "answer": true, "completion": ".decl Has_artist(Song:symbol, Artist:symbol)\nHas_artist(\"Get Low\", \"Lil Jon\").\nHas_artist(\"Get Low\", \"The East Side Boyz\").\nHas_artist(\"Get Low\", \"Sean Paul\").\nHas_artist(\"Get Low\", \"Busta Rhymes\").\nHas_artist(\"Get Low\", \"The Lox\").\n.decl Has_rank(Song:symbol, Rank:float)\nHas_rank(\"Get Low\", 3).\n.decl Answer()\nAnswer() :- Has_artist(\"Get Low\", \"Lil Jon\"), Has_artist(\"Get Low\", \"The Lox\"), Has_rank(\"Get Low\", rank).\n.output Answer", "completions": [".decl Has_artist(Song:symbol, Artist:symbol)\nHas_artist(\"Get Low\", \"Lil Jon\").\nHas_artist(\"Get Low\", \"The East Side Boyz\").\nHas_artist(\"Get Low\", \"Sean Paul\").\nHas_artist(\"Get Low\", \"Busta Rhymes\").\nHas_artist(\"Get Low\", \"The Lox\").\n.decl Has_rank(Song:symbol, Rank:float)\nHas_rank(\"Get Low\", 3).\n.decl Answer()\nAnswer() :- Has_artist(\"Get Low\", \"Lil Jon\"), Has_artist(\"Get Low\", \"The Lox\"), Has_rank(\"Get Low\", rank).\n.output Answer"]}
{"id": 943, "answer": true, "completion": ".decl Has_flammability(Object:symbol, Flammability:float)\nHas_flammability(\"helium\", 0).\nHas_flammability(\"hydrogen\", 1).\n.decl Answer()\nAnswer() :- Has_flammability(\"helium\", flammability1), Has_flammability(\"hydrogen\", flammability2), flammability1 < flammability2.\n.output Answer", "completions": [".decl Has_flammability(Object:symbol, Flammability:float)\nHas_flammability(\"helium\", 0).\nHas_flammability(\"hydrogen\", 1).\n.decl Answer()\nAnswer() :- Has_flammability(\"helium\", flammability1), Has_flammability(\"hydrogen\", flammability2), flammability1 < flammability2.\n.output Answer"]}
{"id": 944, "answer": false, "completion": ".decl Wins(Person:symbol, Event:symbol)\nWins(\"Al Unser Jr.\", \"Indy 500\").\n.decl Answer()\nAnswer() :- Wins(\"Al Unser Jr.\", \"Space Race\").\n.output Answer", "completions": [".decl Wins(Person:symbol, Event:symbol)\nWins(\"Al Unser Jr.\", \"Indy 500\").\n.decl Answer()\nAnswer() :- Wins(\"Al Unser Jr.\", \"Space Race\").\n.output Answer"]}
{"id": 945, "answer": true, "completion": ".decl Has_fear(Wizard:symbol, Fear:symbol)\nHas_fear(\"half muggle wizards\", \"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Has_fear(\"half muggle wizards\", \"Lord Voldemort\").\n.output Answer", "completions": [".decl Has_fear(Wizard:symbol, Fear:symbol)\nHas_fear(\"half muggle wizards\", \"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Has_fear(\"half muggle wizards\", \"Lord Voldemort\").\n.output Answer"]}
{"id": 946, "answer": false, "completion": ".decl Has_endowment(University:symbol, Endowment:float)\nHas_endowment(\"Johns Hopkins University\", 3.8).\n.decl Has_debt(Organization:symbol, Debt:float)\nHas_debt(\"MBTA\", 1.5).\n.decl Answer()\nAnswer() :- Has_endowment(\"Johns Hopkins University\", endowment), Has_debt(\"MBTA\", debt), endowment >= debt.\n.output Answer", "completions": [".decl Has_endowment(University:symbol, Endowment:float)\nHas_endowment(\"Johns Hopkins University\", 3.8).\n.decl Has_debt(Organization:symbol, Debt:float)\nHas_debt(\"MBTA\", 1.5).\n.decl Answer()\nAnswer() :- Has_endowment(\"Johns Hopkins University\", endowment), Has_debt(\"MBTA\", debt), endowment >= debt.\n.output Answer"]}
{"id": 947, "answer": false, "completion": ".decl Existed_in_time(Organization:symbol, Time:symbol)\nExisted_in_time(\"East India Company\", \"1700s\").\nExisted_in_time(\"China's modern trade\", \"2000s\").\n.decl Answer()\nAnswer() :- Existed_in_time(\"East India Company\", time1), Existed_in_time(\"China's modern trade\", time2), time1 < time2.\n.output Answer", "completions": [".decl Existed_in_time(Organization:symbol, Time:symbol)\nExisted_in_time(\"East India Company\", \"1700s\").\nExisted_in_time(\"China's modern trade\", \"2000s\").\n.decl Answer()\nAnswer() :- Existed_in_time(\"East India Company\", time1), Existed_in_time(\"China's modern trade\", time2), time1 < time2.\n.output Answer"]}
{"id": 948, "answer": true, "completion": ".decl Has_rating(Game:symbol, Rating:symbol)\nHas_rating(\"Guitar Hero Beatles\", \"E10+\").\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"US third grader\", 8).\n.decl Answer()\nAnswer() :- Has_rating(\"Guitar Hero Beatles\", rating), Has_age(\"US third grader\", age), rating != \"E10+\" or age >= 10.\n.output Answer", "completions": [".decl Has_rating(Game:symbol, Rating:symbol)\nHas_rating(\"Guitar Hero Beatles\", \"E10+\").\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"US third grader\", 8).\n.decl Answer()\nAnswer() :- Has_rating(\"Guitar Hero Beatles\", rating), Has_age(\"US third grader\", age), rating != \"E10+\" or age >= 10.\n.output Answer"]}
{"id": 949, "answer": true, "completion": ".decl Has_n_marriages(Person:symbol, N_marriages:float)\nHas_n_marriages(\"Larry King\", 8).\n.decl Answer()\nAnswer() :- Has_n_marriages(\"Larry King\", n_marriages), n_marriages <= 2.\n.output Answer", "completions": [".decl Has_n_marriages(Person:symbol, N_marriages:float)\nHas_n_marriages(\"Larry King\", 8).\n.decl Answer()\nAnswer() :- Has_n_marriages(\"Larry King\", n_marriages), n_marriages <= 2.\n.output Answer"]}
{"id": 950, "answer": true, "completion": ".decl Has_sense(Animal:symbol, Sense:symbol)\nHas_sense(\"dog\", \"smell\").\nHas_sense(\"dog\", \"sight\").\nHas_sense(\"dog\", \"touch\").\nHas_sense(\"dog\", \"hearing\").\nHas_sense(\"dog\", \"taste\").\n.decl Answer()\nAnswer() :- Has_sense(\"dog\", \"smell\").\n.output Answer", "completions": [".decl Has_sense(Animal:symbol, Sense:symbol)\nHas_sense(\"dog\", \"smell\").\nHas_sense(\"dog\", \"sight\").\nHas_sense(\"dog\", \"touch\").\nHas_sense(\"dog\", \"hearing\").\nHas_sense(\"dog\", \"taste\").\n.decl Answer()\nAnswer() :- Has_sense(\"dog\", \"smell\").\n.output Answer"]}
{"id": 951, "answer": false, "completion": ".decl Sold_at(Product:symbol, Store:symbol)\nSold_at(\"Reddit\", \"Amazon\").\nSold_at(\"Reddit\", \"eBay\").\nSold_at(\"Reddit\", \"Google\").\n.decl Answer()\nAnswer() :- Sold_at(\"Reddit\", \"Walmart\").\n.output Answer", "completions": [".decl Sold_at(Product:symbol, Store:symbol)\nSold_at(\"Reddit\", \"Amazon\").\nSold_at(\"Reddit\", \"eBay\").\nSold_at(\"Reddit\", \"Google\").\n.decl Answer()\nAnswer() :- Sold_at(\"Reddit\", \"Walmart\").\n.output Answer"]}
{"id": 952, "answer": false, "completion": ".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Snowdon\", 1085).\n.decl Has_climbed(Person:symbol, Mountain:symbol)\nHas_climbed(\"Tenzing Norgay\", \"Everest\").\n.decl Answer()\nAnswer() :- Has_height(\"Snowdon\", height1), Has_climbed(\"Tenzing Norgay\", \"Everest\"), height1 < 1085.\n.output Answer", "completions": [".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Snowdon\", 1085).\n.decl Has_climbed(Person:symbol, Mountain:symbol)\nHas_climbed(\"Tenzing Norgay\", \"Everest\").\n.decl Answer()\nAnswer() :- Has_height(\"Snowdon\", height1), Has_climbed(\"Tenzing Norgay\", \"Everest\"), height1 < 1085.\n.output Answer"]}
{"id": 953, "answer": true, "completion": ".decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"The Jungle Book\", \"Rudyard Kipling\").\n.decl Has_subtext(Book:symbol, Subtext:symbol)\nHas_subtext(\"The Jungle Book\", \"racist\").\n.decl Answer()\nAnswer() :- Written_by(\"The Jungle Book\", \"Rudyard Kipling\"), Has_subtext(\"The Jungle Book\", \"racist\").\n.output Answer", "completions": [".decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"The Jungle Book\", \"Rudyard Kipling\").\n.decl Has_subtext(Book:symbol, Subtext:symbol)\nHas_subtext(\"The Jungle Book\", \"racist\").\n.decl Answer()\nAnswer() :- Written_by(\"The Jungle Book\", \"Rudyard Kipling\"), Has_subtext(\"The Jungle Book\", \"racist\").\n.output Answer"]}
{"id": 954, "answer": false, "completion": ".decl Lasts_for_n_seconds(Event:symbol, N_seconds:float)\nLasts_for_n_seconds(\"Scrubs\", 1800).\n.decl Lasts_for_n_seconds(Event:symbol, N_seconds:float)\nLasts_for_n_seconds(\"sloth\", 300).\n.decl Answer()\nAnswer() :- Lasts_for_n_seconds(\"Scrubs\", n_seconds1), Lasts_for_n_seconds(\"sloth\", n_seconds2), n_seconds1 <= n_seconds2.\n.output Answer", "completions": [".decl Lasts_for_n_seconds(Event:symbol, N_seconds:float)\nLasts_for_n_seconds(\"Scrubs\", 1800).\n.decl Lasts_for_n_seconds(Event:symbol, N_seconds:float)\nLasts_for_n_seconds(\"sloth\", 300).\n.decl Answer()\nAnswer() :- Lasts_for_n_seconds(\"Scrubs\", n_seconds1), Lasts_for_n_seconds(\"sloth\", n_seconds2), n_seconds1 <= n_seconds2.\n.output Answer"]}
{"id": 955, "answer": true, "completion": ".decl Has_heat(Pepper:symbol, Heat:float)\nHas_heat(\"jalapeno\", 5).\nHas_heat(\"Bhut jolokia\", 8).\n.decl Answer()\nAnswer() :- Has_heat(\"jalapeno\", heat1), Has_heat(\"Bhut jolokia\", heat2), heat1 < heat2.\n.output Answer", "completions": [".decl Has_heat(Pepper:symbol, Heat:float)\nHas_heat(\"jalapeno\", 5).\nHas_heat(\"Bhut jolokia\", 8).\n.decl Answer()\nAnswer() :- Has_heat(\"jalapeno\", heat1), Has_heat(\"Bhut jolokia\", heat2), heat1 < heat2.\n.output Answer"]}
{"id": 956, "answer": true, "completion": ".decl Has_spokesperson(Company:symbol, Spokesperson:symbol)\nHas_spokesperson(\"Subway\", \"Jared Fogle\").\n.decl Is_sex_offender(Person:symbol)\nIs_sex_offender(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Has_spokesperson(\"Subway\", \"Jared Fogle\"), Is_sex_offender(\"Jared Fogle\").\n.output Answer", "completions": [".decl Has_spokesperson(Company:symbol, Spokesperson:symbol)\nHas_spokesperson(\"Subway\", \"Jared Fogle\").\n.decl Is_sex_offender(Person:symbol)\nIs_sex_offender(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Has_spokesperson(\"Subway\", \"Jared Fogle\"), Is_sex_offender(\"Jared Fogle\").\n.output Answer"]}
{"id": 957, "answer": false, "completion": ".decl Is_sound(Event:symbol)\nIs_sound(\"lullaby\").\n.decl Is_sound_sensitive(Person:symbol)\nIs_sound_sensitive(\"Hellen Keller\").\n.decl Answer()\nAnswer() :- Is_sound(\"lullaby\"), Is_sound_sensitive(\"Hellen Keller\").\n.output Answer", "completions": [".decl Is_sound(Event:symbol)\nIs_sound(\"lullaby\").\n.decl Is_sound_sensitive(Person:symbol)\nIs_sound_sensitive(\"Hellen Keller\").\n.decl Answer()\nAnswer() :- Is_sound(\"lullaby\"), Is_sound_sensitive(\"Hellen Keller\").\n.output Answer"]}
{"id": 958, "answer": false, "completion": ".decl Has_members(Party:symbol, N_members:float)\nHas_members(\"Communist Party of the Soviet Union\", 20).\n.decl Has_kills(Party:symbol, N_kills:float)\nHas_kills(\"Communist Party of the Soviet Union\", 5).\n.decl Answer()\nAnswer() :- Has_members(\"Communist Party of the Soviet Union\", n_members), Has_kills(\"Communist Party of the Soviet Union\", n_kills), n_members = n_kills.\n.output Answer", "completions": [".decl Has_members(Party:symbol, N_members:float)\nHas_members(\"Communist Party of the Soviet Union\", 20).\n.decl Has_kills(Party:symbol, N_kills:float)\nHas_kills(\"Communist Party of the Soviet Union\", 5).\n.decl Answer()\nAnswer() :- Has_members(\"Communist Party of the Soviet Union\", n_members), Has_kills(\"Communist Party of the Soviet Union\", n_kills), n_members = n_kills.\n.output Answer"]}
{"id": 959, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Stanford Linear Accelerator\", 3.2).\nHas_length(\"Golden Gate Bridge\", 2.7).\n.decl Answer()\nAnswer() :- Has_length(\"Stanford Linear Accelerator\", length1), Has_length(\"Golden Gate Bridge\", length2), length1 <= length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Stanford Linear Accelerator\", 3.2).\nHas_length(\"Golden Gate Bridge\", 2.7).\n.decl Answer()\nAnswer() :- Has_length(\"Stanford Linear Accelerator\", length1), Has_length(\"Golden Gate Bridge\", length2), length1 <= length2.\n.output Answer"]}
{"id": 960, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Caracal\", 1.5).\nHas_length(\"protractor\", 0.2).\n.decl Answer()\nAnswer() :- Has_length(\"Caracal\", length1), Has_length(\"protractor\", length2), length1 > length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Caracal\", 1.5).\nHas_length(\"protractor\", 0.2).\n.decl Answer()\nAnswer() :- Has_length(\"Caracal\", length1), Has_length(\"protractor\", length2), length1 > length2.\n.output Answer"]}
{"id": 961, "answer": false, "completion": ".decl Has_students(School:symbol, N_students:float)\nHas_students(\"Marist\", 5500).\n.decl Has_teams(School:symbol, N_teams:float)\nHas_teams(\"Marist\", 30).\n.decl Answer()\nAnswer() :- Has_students(\"Marist\", n_students1), Has_teams(\"Marist\", n_teams1), n_students1/n_teams1 < 100.\n.output Answer", "completions": [".decl Has_students(School:symbol, N_students:float)\nHas_students(\"Marist\", 5500).\n.decl Has_teams(School:symbol, N_teams:float)\nHas_teams(\"Marist\", 30).\n.decl Answer()\nAnswer() :- Has_students(\"Marist\", n_students1), Has_teams(\"Marist\", n_teams1), n_students1/n_teams1 < 100.\n.output Answer"]}
{"id": 962, "answer": false, "completion": ".decl Tolerates(Person:symbol, Music:symbol)\nTolerates(\"Ibn Saud\", \"jazz\").\nTolerates(\"Ibn Saud\", \"blues\").\n.decl Answer()\nAnswer() :- Tolerates(\"Ibn Saud\", \"salsa\").\n.output Answer", "completions": [".decl Tolerates(Person:symbol, Music:symbol)\nTolerates(\"Ibn Saud\", \"jazz\").\nTolerates(\"Ibn Saud\", \"blues\").\n.decl Answer()\nAnswer() :- Tolerates(\"Ibn Saud\", \"salsa\").\n.output Answer"]}
{"id": 963, "answer": true, "completion": ".decl Has_surface_temperature(Planet:symbol, Surface_temperature:float)\nHas_surface_temperature(\"Venus\", 462).\n.decl Answer()\nAnswer() :- Has_surface_temperature(\"Venus\", surface_temperature), surface_temperature > 0.\n.output Answer", "completions": [".decl Has_surface_temperature(Planet:symbol, Surface_temperature:float)\nHas_surface_temperature(\"Venus\", 462).\n.decl Answer()\nAnswer() :- Has_surface_temperature(\"Venus\", surface_temperature), surface_temperature > 0.\n.output Answer"]}
{"id": 964, "answer": true, "completion": ".decl Is_accountable_to(Company:symbol, Shareholders:symbol)\nIs_accountable_to(\"Samsung\", \"shareholders\").\n.decl Answer()\nAnswer() :- Is_accountable_to(\"Samsung\", \"shareholders\").\n.output Answer", "completions": [".decl Is_accountable_to(Company:symbol, Shareholders:symbol)\nIs_accountable_to(\"Samsung\", \"shareholders\").\n.decl Answer()\nAnswer() :- Is_accountable_to(\"Samsung\", \"shareholders\").\n.output Answer"]}
{"id": 965, "answer": true, "completion": ".decl Tames(Person:symbol, Animal:symbol)\nTames(\"Cesar Millan\", \"short-eared dog\").\n.decl Answer()\nAnswer() :- Tames(\"Cesar Millan\", \"short-eared dog\").\n.output Answer", "completions": [".decl Tames(Person:symbol, Animal:symbol)\nTames(\"Cesar Millan\", \"short-eared dog\").\n.decl Answer()\nAnswer() :- Tames(\"Cesar Millan\", \"short-eared dog\").\n.output Answer"]}
{"id": 966, "answer": false, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Charlie Bucket\", \"candy factory worker\").\n.decl Answer()\nAnswer() :- Has_job(\"Charlie Bucket\", \"hotel manager\").\n.output Answer", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Charlie Bucket\", \"candy factory worker\").\n.decl Answer()\nAnswer() :- Has_job(\"Charlie Bucket\", \"hotel manager\").\n.output Answer"]}
{"id": 967, "answer": false, "completion": ".decl Lasted_from_to(Event:symbol, Start_date:symbol, End_date:symbol)\nLasted_from_to(\"Presidency of Bill Clinton\", \"January 20, 1993\", \"January 20, 2001\").\nLasted_from_to(\"Bill Clinton's impeachment\", \"December 19, 1998\", \"February 12, 1999\").\n.decl Answer()\nAnswer() :- Lasted_from_to(\"Presidency of Bill Clinton\", start_date, end_date), Lasted_from_to(\"Bill Clinton's impeachment\", start_date2, end_date2), end_date == end_date2.\n.output Answer", "completions": [".decl Lasted_from_to(Event:symbol, Start_date:symbol, End_date:symbol)\nLasted_from_to(\"Presidency of Bill Clinton\", \"January 20, 1993\", \"January 20, 2001\").\nLasted_from_to(\"Bill Clinton's impeachment\", \"December 19, 1998\", \"February 12, 1999\").\n.decl Answer()\nAnswer() :- Lasted_from_to(\"Presidency of Bill Clinton\", start_date, end_date), Lasted_from_to(\"Bill Clinton's impeachment\", start_date2, end_date2), end_date == end_date2.\n.output Answer"]}
{"id": 968, "answer": true, "completion": ".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"Forbidden City\", \"China\").\nHas_location(\"wooden rollercoaster\", \"China\").\n.decl Answer()\nAnswer() :- Has_location(\"Forbidden City\", \"China\"), Has_location(\"wooden rollercoaster\", \"China\").\n.output Answer", "completions": [".decl Has_location(Object:symbol, Location:symbol)\nHas_location(\"Forbidden City\", \"China\").\nHas_location(\"wooden rollercoaster\", \"China\").\n.decl Answer()\nAnswer() :- Has_location(\"Forbidden City\", \"China\"), Has_location(\"wooden rollercoaster\", \"China\").\n.output Answer"]}
{"id": 969, "answer": false, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Magnus Carlsen\", \"KFC\").\n.decl Answer()\nAnswer() :- Eats(\"Magnus Carlsen\", \"KFC\").\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Magnus Carlsen\", \"KFC\").\n.decl Answer()\nAnswer() :- Eats(\"Magnus Carlsen\", \"KFC\").\n.output Answer"]}
{"id": 970, "answer": true, "completion": ".decl Lives_on(Animal_A:symbol, Animal_B:symbol)\nLives_on(\"moth\", \"sloth\").\n.decl Has_family_dinners(Animal:symbol)\nHas_family_dinners(\"moth\").\n.decl Answer()\nAnswer() :- Lives_on(\"moth\", animal), Has_family_dinners(animal).\n.output Answer", "completions": [".decl Lives_on(Animal_A:symbol, Animal_B:symbol)\nLives_on(\"moth\", \"sloth\").\n.decl Has_family_dinners(Animal:symbol)\nHas_family_dinners(\"moth\").\n.decl Answer()\nAnswer() :- Lives_on(\"moth\", animal), Has_family_dinners(animal).\n.output Answer"]}
{"id": 971, "answer": false, "completion": ".decl Has_album_sales(Person:symbol, Album_sales:float)\nHas_album_sales(\"Kelly Clarkson\", 9000000).\nHas_album_sales(\"Carrie Underwood\", 7000000).\n.decl Answer()\nAnswer() :- Has_album_sales(\"Kelly Clarkson\", album_sales1), Has_album_sales(\"Carrie Underwood\", album_sales2), album_sales1 > album_sales2.\n.output Answer", "completions": [".decl Has_album_sales(Person:symbol, Album_sales:float)\nHas_album_sales(\"Kelly Clarkson\", 9000000).\nHas_album_sales(\"Carrie Underwood\", 7000000).\n.decl Answer()\nAnswer() :- Has_album_sales(\"Kelly Clarkson\", album_sales1), Has_album_sales(\"Carrie Underwood\", album_sales2), album_sales1 > album_sales2.\n.output Answer"]}
{"id": 972, "answer": true, "completion": ".decl Can_jump(Animal:symbol, Height:float)\nCan_jump(\"caracal\", 3.5).\nCan_jump(\"Javier Sotomayor\", 2.45).\n.decl Answer()\nAnswer() :- Can_jump(\"caracal\", height1), Can_jump(\"Javier Sotomayor\", height2), height1 > height2.\n.output Answer", "completions": [".decl Can_jump(Animal:symbol, Height:float)\nCan_jump(\"caracal\", 3.5).\nCan_jump(\"Javier Sotomayor\", 2.45).\n.decl Answer()\nAnswer() :- Can_jump(\"caracal\", height1), Can_jump(\"Javier Sotomayor\", height2), height1 > height2.\n.output Answer"]}
{"id": 973, "answer": true, "completion": ".decl Is_lucky_number(N:float)\nIs_lucky_number(1).\nIs_lucky_number(3).\nIs_lucky_number(5).\nIs_lucky_number(7).\nIs_lucky_number(9).\n.decl Answer()\nAnswer() :- Is_lucky_number(9).\n.output Answer", "completions": [".decl Is_lucky_number(N:float)\nIs_lucky_number(1).\nIs_lucky_number(3).\nIs_lucky_number(5).\nIs_lucky_number(7).\nIs_lucky_number(9).\n.decl Answer()\nAnswer() :- Is_lucky_number(9).\n.output Answer"]}
{"id": 974, "answer": true, "completion": ".decl Happens_in_country(Event:symbol, Country:symbol)\nHappens_in_country(\"Oscar Wilde's treatment under the law\", \"UK\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Oscar Wilde's treatment under the law\", 1895).\n.decl Answer()\nAnswer() :- Happens_in_country(\"Oscar Wilde's treatment under the law\", country), Happens_in_year(\"Oscar Wilde's treatment under the law\", year), year < 2015.\n.output Answer", "completions": [".decl Happens_in_country(Event:symbol, Country:symbol)\nHappens_in_country(\"Oscar Wilde's treatment under the law\", \"UK\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Oscar Wilde's treatment under the law\", 1895).\n.decl Answer()\nAnswer() :- Happens_in_country(\"Oscar Wilde's treatment under the law\", country), Happens_in_year(\"Oscar Wilde's treatment under the law\", year), year < 2015.\n.output Answer"]}
{"id": 975, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"War in Vietnam\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"veterans of the War in Vietnam given free education by the Soviet Union\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"veterans of the War in Vietnam given free education by the Soviet Union\", n_years1), Last_n_years(\"War in Vietnam\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"War in Vietnam\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"veterans of the War in Vietnam given free education by the Soviet Union\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"veterans of the War in Vietnam given free education by the Soviet Union\", n_years1), Last_n_years(\"War in Vietnam\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 976, "answer": true, "completion": ".decl Eats_at(Animal:symbol, Restaurant:symbol)\nEats_at(\"goblin shark\", \"Crossroads Kitchen\").\n.decl Answer()\nAnswer() :- Eats_at(\"goblin shark\", \"Crossroads Kitchen\").\n.output Answer", "completions": [".decl Eats_at(Animal:symbol, Restaurant:symbol)\nEats_at(\"goblin shark\", \"Crossroads Kitchen\").\n.decl Answer()\nAnswer() :- Eats_at(\"goblin shark\", \"Crossroads Kitchen\").\n.output Answer"]}
{"id": 977, "answer": true, "completion": ".decl Experiences(Person:symbol, Event:symbol)\nExperiences(\"Hanuman\", \"orgasm\").\n.decl Answer()\nAnswer() :- Experiences(\"Hanuman\", \"orgasm\").\n.output Answer", "completions": [".decl Experiences(Person:symbol, Event:symbol)\nExperiences(\"Hanuman\", \"orgasm\").\n.decl Answer()\nAnswer() :- Experiences(\"Hanuman\", \"orgasm\").\n.output Answer"]}
{"id": 978, "answer": true, "completion": ".decl Has_form(Object:symbol, Form:symbol)\nHas_form(\"onion\", \"spherical\").\nHas_form(\"onion\", \"cylindrical\").\nHas_form(\"tree\", \"cylindrical\").\n.decl Answer()\nAnswer() :- Has_form(\"onion\", form1), Has_form(\"tree\", form2), form1 = form2.\n.output Answer\n\n", "completions": [".decl Has_form(Object:symbol, Form:symbol)\nHas_form(\"onion\", \"spherical\").\nHas_form(\"onion\", \"cylindrical\").\nHas_form(\"tree\", \"cylindrical\").\n.decl Answer()\nAnswer() :- Has_form(\"onion\", form1), Has_form(\"tree\", form2), form1 = form2.\n.output Answer\n\n"]}
{"id": 979, "answer": true, "completion": ".decl Has_parent_company(Company:symbol, Parent_company:symbol)\nHas_parent_company(\"LinkedIn\", \"Microsoft\").\nHas_parent_company(\"LeafedIn\", \"LinkedIn\").\n.decl Answer()\nAnswer() :- Has_parent_company(\"LeafedIn\", \"LinkedIn\").\nAnswer() :- Has_parent_company(\"LeafedIn\", company2), Has_parent_company(\"LinkedIn\", company1), Has_parent_company(company2, company1).\n.output Answer", "completions": [".decl Has_parent_company(Company:symbol, Parent_company:symbol)\nHas_parent_company(\"LinkedIn\", \"Microsoft\").\nHas_parent_company(\"LeafedIn\", \"LinkedIn\").\n.decl Answer()\nAnswer() :- Has_parent_company(\"LeafedIn\", \"LinkedIn\").\nAnswer() :- Has_parent_company(\"LeafedIn\", company2), Has_parent_company(\"LinkedIn\", company1), Has_parent_company(company2, company1).\n.output Answer"]}
{"id": 980, "answer": true, "completion": ".decl Can_outrun(Animal_A:symbol, Animal_B:symbol)\nCan_outrun(\"cheetah\", \"ocelot\").\nCan_outrun(\"cheetah\", \"kindergartner\").\n.decl Answer()\nAnswer() :- Can_outrun(animal1, \"ocelot\"), Can_outrun(animal2, \"kindergartner\"), Can_outrun(animal1, animal2).\n.output Answer", "completions": [".decl Can_outrun(Animal_A:symbol, Animal_B:symbol)\nCan_outrun(\"cheetah\", \"ocelot\").\nCan_outrun(\"cheetah\", \"kindergartner\").\n.decl Answer()\nAnswer() :- Can_outrun(animal1, \"ocelot\"), Can_outrun(animal2, \"kindergartner\"), Can_outrun(animal1, animal2).\n.output Answer"]}
{"id": 981, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"population of the Warsaw Ghetto\", \"Poland\").\nHappens_in_place(\"secret police\", \"Poland\").\nHappens_in_place(\"cell phones\", \"Poland\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"population of the Warsaw Ghetto\", \"Poland\"), Happens_in_place(\"secret police\", \"Poland\"), Happens_in_place(\"cell phones\", \"Poland\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"population of the Warsaw Ghetto\", \"Poland\").\nHappens_in_place(\"secret police\", \"Poland\").\nHappens_in_place(\"cell phones\", \"Poland\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"population of the Warsaw Ghetto\", \"Poland\"), Happens_in_place(\"secret police\", \"Poland\"), Happens_in_place(\"cell phones\", \"Poland\").\n.output Answer"]}
{"id": 982, "answer": true, "completion": ".decl In_galaxy(Planet:symbol, Galaxy:symbol)\nIn_galaxy(\"Ganymede\", \"Milky Way\").\n.decl Answer()\nAnswer() :- In_galaxy(\"Ganymede\", \"Milky Way\").\n.output Answer", "completions": [".decl In_galaxy(Planet:symbol, Galaxy:symbol)\nIn_galaxy(\"Ganymede\", \"Milky Way\").\n.decl Answer()\nAnswer() :- In_galaxy(\"Ganymede\", \"Milky Way\").\n.output Answer"]}
{"id": 983, "answer": false, "completion": ".decl Has_tattoo(Person:symbol, Tattoo:symbol)\nHas_tattoo(\"Voldemort\", \"snake and skull\").\n.decl Is_good_luck(Tattoo:symbol)\nIs_good_luck(\"butterfly\").\nIs_good_luck(\"star\").\nIs_good_luck(\"heart\").\n.decl Answer()\nAnswer() :- Has_tattoo(\"Voldemort\", \"snake and skull\"), !, Is_good_luck(\"snake and skull\").\n.output Answer", "completions": [".decl Has_tattoo(Person:symbol, Tattoo:symbol)\nHas_tattoo(\"Voldemort\", \"snake and skull\").\n.decl Is_good_luck(Tattoo:symbol)\nIs_good_luck(\"butterfly\").\nIs_good_luck(\"star\").\nIs_good_luck(\"heart\").\n.decl Answer()\nAnswer() :- Has_tattoo(\"Voldemort\", \"snake and skull\"), !, Is_good_luck(\"snake and skull\").\n.output Answer"]}
{"id": 984, "answer": true, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Vietnam War\", 1964).\nHappens_in_year(\"Vietnam War\", 1975).\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Alan Alda\", 1936).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Vietnam War\", year1), Born_in_year(\"Alan Alda\", year2), year2 < year1.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Vietnam War\", 1964).\nHappens_in_year(\"Vietnam War\", 1975).\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Alan Alda\", 1936).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Vietnam War\", year1), Born_in_year(\"Alan Alda\", year2), year2 < year1.\n.output Answer"]}
{"id": 985, "answer": true, "completion": ".decl Has_title(Song:symbol, Title:symbol)\nHas_title(\"Moondance\", \"Moondance\").\n.decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Van Morrison\", \"male\").\nHas_gender(\"woman\", \"female\").\n.decl Answer()\nAnswer() :- Has_title(\"Moondance\", \"Moondance\"), Has_gender(\"Van Morrison\", \"male\").\nAnswer() :- Has_title(\"Moondance\", \"Moondance\"), Has_gender(\"woman\", \"female\").\n.output Answer", "completions": [".decl Has_title(Song:symbol, Title:symbol)\nHas_title(\"Moondance\", \"Moondance\").\n.decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Van Morrison\", \"male\").\nHas_gender(\"woman\", \"female\").\n.decl Answer()\nAnswer() :- Has_title(\"Moondance\", \"Moondance\"), Has_gender(\"Van Morrison\", \"male\").\nAnswer() :- Has_title(\"Moondance\", \"Moondance\"), Has_gender(\"woman\", \"female\").\n.output Answer"]}
{"id": 986, "answer": true, "completion": ".decl Rival_gang_members(Person1:symbol, Person2:symbol)\nRival_gang_members(\"Snoop Dogg\", \"Dr. Dre\").\n.decl Answer()\nAnswer() :- Rival_gang_members(\"Snoop Dogg\", person), !, Makes_music_with(\"Snoop Dogg\", person).\n.output Answer", "completions": [".decl Rival_gang_members(Person1:symbol, Person2:symbol)\nRival_gang_members(\"Snoop Dogg\", \"Dr. Dre\").\n.decl Answer()\nAnswer() :- Rival_gang_members(\"Snoop Dogg\", person), !, Makes_music_with(\"Snoop Dogg\", person).\n.output Answer"]}
{"id": 987, "answer": true, "completion": ".decl Has_length(Play:symbol, Length:float)\nHas_length(\"Othello\", 5).\nHas_length(\"Scheherazade\", 1).\n.decl Answer()\nAnswer() :- Has_length(\"Othello\", length1), Has_length(\"Scheherazade\", length2), length1 > length2.\n.output Answer", "completions": [".decl Has_length(Play:symbol, Length:float)\nHas_length(\"Othello\", 5).\nHas_length(\"Scheherazade\", 1).\n.decl Answer()\nAnswer() :- Has_length(\"Othello\", length1), Has_length(\"Scheherazade\", length2), length1 > length2.\n.output Answer"]}
{"id": 988, "answer": false, "completion": ".decl Requires_care(Animal:symbol, Difficulty:symbol)\nRequires_care(\"goldfish\", \"high\").\nRequires_care(\"isopods\", \"low\").\n.decl Answer()\nAnswer() :- Requires_care(\"goldfish\", difficulty1), Requires_care(\"isopods\", difficulty2), difficulty1 > difficulty2.\n.output Answer", "completions": [".decl Requires_care(Animal:symbol, Difficulty:symbol)\nRequires_care(\"goldfish\", \"high\").\nRequires_care(\"isopods\", \"low\").\n.decl Answer()\nAnswer() :- Requires_care(\"goldfish\", difficulty1), Requires_care(\"isopods\", difficulty2), difficulty1 > difficulty2.\n.output Answer"]}
{"id": 989, "answer": false, "completion": ".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Easy Rider\", 400000).\n.decl Has_revenue(Movie:symbol, Revenue:float)\nHas_revenue(\"Easy Rider\", 1800000).\n.decl Answer()\nAnswer() :- Has_budget(\"Easy Rider\", budget), Has_revenue(\"Easy Rider\", revenue), revenue > budget.\n.output Answer", "completions": [".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Easy Rider\", 400000).\n.decl Has_revenue(Movie:symbol, Revenue:float)\nHas_revenue(\"Easy Rider\", 1800000).\n.decl Answer()\nAnswer() :- Has_budget(\"Easy Rider\", budget), Has_revenue(\"Easy Rider\", revenue), revenue > budget.\n.output Answer"]}
{"id": 990, "answer": false, "completion": ".decl Opened_in_year(Thing:symbol, Year:float)\nOpened_in_year(\"AirTrain JFK\", 2003).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Katharine Hepburn\", 2003).\n.decl Answer()\nAnswer() :- Opened_in_year(\"AirTrain JFK\", year1), Died_in_year(\"Katharine Hepburn\", year2), year1 > year2.\n.output Answer", "completions": [".decl Opened_in_year(Thing:symbol, Year:float)\nOpened_in_year(\"AirTrain JFK\", 2003).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Katharine Hepburn\", 2003).\n.decl Answer()\nAnswer() :- Opened_in_year(\"AirTrain JFK\", year1), Died_in_year(\"Katharine Hepburn\", year2), year1 > year2.\n.output Answer"]}
{"id": 991, "answer": true, "completion": ".decl Makes_more_than(Person:symbol, Person2:symbol)\nMakes_more_than(\"Head Coach at NCSU\", \"high school head coaches\").\n.decl Answer()\nAnswer() :- Makes_more_than(\"Head Coach at NCSU\", \"high school head coaches\").\n.output Answer", "completions": [".decl Makes_more_than(Person:symbol, Person2:symbol)\nMakes_more_than(\"Head Coach at NCSU\", \"high school head coaches\").\n.decl Answer()\nAnswer() :- Makes_more_than(\"Head Coach at NCSU\", \"high school head coaches\").\n.output Answer"]}
{"id": 992, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"discovery of Indian Ocean garbage patch\", 20).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"rotation of debris\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"rotation of debris\", n_years1), Last_n_years(\"discovery of Indian Ocean garbage patch\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"discovery of Indian Ocean garbage patch\", 20).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"rotation of debris\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"rotation of debris\", n_years1), Last_n_years(\"discovery of Indian Ocean garbage patch\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 993, "answer": true, "completion": ".decl Is_age(Person:symbol, Age:float)\nIs_age(\"child\", 17).\n.decl Answer()\nAnswer() :- Is_age(\"child\", age), age < 18.\n.output Answer", "completions": [".decl Is_age(Person:symbol, Age:float)\nIs_age(\"child\", 17).\n.decl Answer()\nAnswer() :- Is_age(\"child\", age), age < 18.\n.output Answer"]}
{"id": 994, "answer": false, "completion": ".decl Requires_subscription(App:symbol, Service:symbol)\nRequires_subscription(\"T-Mobile tuesdays\", \"T-Mobile\").\n.decl Answer()\nAnswer() :- Requires_subscription(\"T-Mobile tuesdays\", \"T-Mobile\").\n.output Answer", "completions": [".decl Requires_subscription(App:symbol, Service:symbol)\nRequires_subscription(\"T-Mobile tuesdays\", \"T-Mobile\").\n.decl Answer()\nAnswer() :- Requires_subscription(\"T-Mobile tuesdays\", \"T-Mobile\").\n.output Answer"]}
{"id": 995, "answer": true, "completion": ".decl Named_after(Carol:symbol, Saint:symbol)\nNamed_after(\"Good King Wenceslas\", \"Wenceslas\").\nNamed_after(\"God Rest Ye Merry Gentlemen\", \"Gabriel\").\nNamed_after(\"The First Noel\", \"Noel\").\n.decl Answer()\nAnswer() :- Named_after(carol1, saint1), Named_after(carol2, saint2), carol1 != carol2, saint1 == saint2.\n.output Answer", "completions": [".decl Named_after(Carol:symbol, Saint:symbol)\nNamed_after(\"Good King Wenceslas\", \"Wenceslas\").\nNamed_after(\"God Rest Ye Merry Gentlemen\", \"Gabriel\").\nNamed_after(\"The First Noel\", \"Noel\").\n.decl Answer()\nAnswer() :- Named_after(carol1, saint1), Named_after(carol2, saint2), carol1 != carol2, saint1 == saint2.\n.output Answer"]}
{"id": 996, "answer": true, "completion": ".decl Supports(Person:symbol, Punishment:symbol)\nSupports(\"George Fox\", \"stoning\").\n.decl Answer()\nAnswer() :- Supports(\"George Fox\", \"stoning\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Punishment:symbol)\nSupports(\"George Fox\", \"stoning\").\n.decl Answer()\nAnswer() :- Supports(\"George Fox\", \"stoning\").\n.output Answer"]}
{"id": 997, "answer": true, "completion": ".decl Is_inappropriate(Lullaby:symbol)\nIs_inappropriate(\"Love Song\").\n.decl Is_from_date(Lullaby:symbol, Date:symbol)\nIs_from_date(\"Love Song\", \"November 11, 2000\").\n.decl Answer()\nAnswer() :- Is_inappropriate(lullaby), Is_from_date(lullaby, date).\n.output Answer", "completions": [".decl Is_inappropriate(Lullaby:symbol)\nIs_inappropriate(\"Love Song\").\n.decl Is_from_date(Lullaby:symbol, Date:symbol)\nIs_from_date(\"Love Song\", \"November 11, 2000\").\n.decl Answer()\nAnswer() :- Is_inappropriate(lullaby), Is_from_date(lullaby, date).\n.output Answer"]}
{"id": 998, "answer": false, "completion": ".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Lionel Richie\", \"Pearl Richie\").\nHas_parent(\"Sheila E\", \"Pete Escovedo\").\nHas_parent(\"Pete Escovedo\", \"Sally Boy\").\nHas_parent(\"Sally Boy\", \"Pearl Richie\").\n.decl Answer()\nAnswer() :- Has_parent(\"Lionel Richie\", parent1), Has_parent(\"Sheila E\", parent2), parent1 = parent2.\nAnswer() :- Has_parent(\"Lionel Richie\", person1), Has_parent(\"Sheila E\", person2), Has_parent(person1, parent1), Has_parent(person2, parent2), parent1 = parent2.\n.output Answer", "completions": [".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Lionel Richie\", \"Pearl Richie\").\nHas_parent(\"Sheila E\", \"Pete Escovedo\").\nHas_parent(\"Pete Escovedo\", \"Sally Boy\").\nHas_parent(\"Sally Boy\", \"Pearl Richie\").\n.decl Answer()\nAnswer() :- Has_parent(\"Lionel Richie\", parent1), Has_parent(\"Sheila E\", parent2), parent1 = parent2.\nAnswer() :- Has_parent(\"Lionel Richie\", person1), Has_parent(\"Sheila E\", person2), Has_parent(person1, parent1), Has_parent(person2, parent2), parent1 = parent2.\n.output Answer"]}
{"id": 999, "answer": true, "completion": ".decl Is_air_force(Airline:symbol, Country:symbol)\nIs_air_force(\"British Airways\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Is_air_force(\"British Airways\", \"United Kingdom\").\n.output Answer", "completions": [".decl Is_air_force(Airline:symbol, Country:symbol)\nIs_air_force(\"British Airways\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Is_air_force(\"British Airways\", \"United Kingdom\").\n.output Answer"]}
{"id": 1000, "answer": false, "completion": ".decl Answer()\nAnswer() :- !Happens_in_time(\"Star Wars fans\", \"saying 'beam me up'\").\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !Happens_in_time(\"Star Wars fans\", \"saying 'beam me up'\").\n.output Answer"]}
{"id": 1001, "answer": true, "completion": ".decl Requires(OS:symbol, Connection:symbol)\nRequires(\"Chrome OS\", \"internet connection\").\n.decl Answer()\nAnswer() :- Requires(\"Chrome OS\", \"internet connection\").\n.output Answer", "completions": [".decl Requires(OS:symbol, Connection:symbol)\nRequires(\"Chrome OS\", \"internet connection\").\n.decl Answer()\nAnswer() :- Requires(\"Chrome OS\", \"internet connection\").\n.output Answer"]}
{"id": 1002, "answer": false, "completion": ".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Harry Potter and the Sorcerer's Stone\", 125).\nHas_budget(\"The Matrix\", 63).\n.decl Has_revenue(Movie:symbol, Revenue:float)\nHas_revenue(\"Harry Potter and the Sorcerer's Stone\", 974).\nHas_revenue(\"The Matrix\", 463).\n.decl Answer()\nAnswer() :- Has_budget(\"Harry Potter and the Sorcerer's Stone\", budget1), Has_revenue(\"Harry Potter and the Sorcerer's Stone\", revenue1), Has_budget(\"The Matrix\", budget2), Has_revenue(\"The Matrix\", revenue2), revenue1 > revenue2.\n.output Answer", "completions": [".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Harry Potter and the Sorcerer's Stone\", 125).\nHas_budget(\"The Matrix\", 63).\n.decl Has_revenue(Movie:symbol, Revenue:float)\nHas_revenue(\"Harry Potter and the Sorcerer's Stone\", 974).\nHas_revenue(\"The Matrix\", 463).\n.decl Answer()\nAnswer() :- Has_budget(\"Harry Potter and the Sorcerer's Stone\", budget1), Has_revenue(\"Harry Potter and the Sorcerer's Stone\", revenue1), Has_budget(\"The Matrix\", budget2), Has_revenue(\"The Matrix\", revenue2), revenue1 > revenue2.\n.output Answer"]}
{"id": 1003, "answer": false, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"John\", \"retail\").\nHas_job(\"John\", \"software engineering\").\nHas_job(\"John\", \"teaching\").\nHas_job(\"John\", \"law\").\nHas_job(\"John\", \"architecture\").\nHas_job(\"John\", \"business\").\nHas_job(\"John\", \"finance\").\nHas_job(\"John\", \"medicine\").\nHas_job(\"John\", \"science\").\nHas_job(\"John\", \"engineering\").\nHas_job(\"John\", \"computer science\").\nHas_job(\"John\", \"economics\").\nHas_job(\"John\", \"math\").\nHas_job(\"John\", \"history\").\nHas_job(\"John\", \"philosophy\").\nHas_job(\"John\", \"psychology\").\nHas_job(\"John\", \"sociology\").\nHas_job(\"John\", \"linguistics\").\nHas_job(\"John\", \"literature\").\nHas_job(\"John\", \"art\").\nHas_job(\"John\", \"music\").\nHas_job(\"John\", \"theater\").\nHas_job(\"John\", \"dance\").\nHas_job(\"John\", \"film\").\nHas_job(\"John\", \"television\").\nHas_job(\"John\", \"journalism\").\nHas_job(\"John\", \"public policy\").\nHas_job(\"John\", \"international relations\").\nHas_job(\"John\", \"education\").\nHas_job(\"John\", \"social work\").\nHas_job(\"John\", \"marketing\").\nHas_job(\"John\", \"public relations\").\nHas_job(\"John\", \"advertising\").\nHas_job(\"John\", \"entrepreneurship\").\nHas_job(\"John\", \"consulting\").\nHas_job(\"John\", \"human resources\").\nHas_job(\"John\", \"sales\").\nHas_job(\"John\", \"customer service\").\nHas_job(\"John\", \"hospitality\").\nHas_job(\"John\", \"restaurant\").\nHas_job(\"John\", \"retail\").\nHas_job(\"John\", \"banking\").\nHas_job(\"John\", \"investment\").\nHas_job(\"John\", \"real estate\").\nHas_job(\"John\", \"insurance\").\nHas_job(\"John\", \"accounting\").\nHas_job(\"John\", \"taxation\").\nHas_job(\"John\", \"auditing\").\nHas_job(\"John\", \"financial analysis\").\nHas_job(\"John\", \"financial planning\").\nHas_job(\"John\", \"financial advising\").\nHas_job(\"John\", \"financial management\").\nHas_job(\"John\", \"investment banking\").\nHas_job(\"John\", \"venture capital\").\nHas_job(\"John\", \"private equity\").\nHas_job(\"John\", \"hedge fund\").\nHas_job(\"John\", \"trading\").\nHas_job(\"John\", \"asset management\").\nHas_job(\"John\", \"commercial banking\").\nHas_job(\"John\", \"retail banking\").\nHas_job(\"John\", \"mortgage banking\").\nHas_job(\"John\", \"credit analysis\").\nHas_job(\"John\", \"loan officer\").\nHas_job(\"John\", \"loan servicing\").\nHas_job(\"John\", \"loan collections\").\nHas_job(\"John\", \"loan underwriting\").\nHas_job(\"John\", \"loan origination\").\nHas_job(\"John\", \"loan processing\").\nHas_job(\"John\", \"loan closing\").\nHas_job(\"John\", \"loan documentation\").", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"John\", \"retail\").\nHas_job(\"John\", \"software engineering\").\nHas_job(\"John\", \"teaching\").\nHas_job(\"John\", \"law\").\nHas_job(\"John\", \"architecture\").\nHas_job(\"John\", \"business\").\nHas_job(\"John\", \"finance\").\nHas_job(\"John\", \"medicine\").\nHas_job(\"John\", \"science\").\nHas_job(\"John\", \"engineering\").\nHas_job(\"John\", \"computer science\").\nHas_job(\"John\", \"economics\").\nHas_job(\"John\", \"math\").\nHas_job(\"John\", \"history\").\nHas_job(\"John\", \"philosophy\").\nHas_job(\"John\", \"psychology\").\nHas_job(\"John\", \"sociology\").\nHas_job(\"John\", \"linguistics\").\nHas_job(\"John\", \"literature\").\nHas_job(\"John\", \"art\").\nHas_job(\"John\", \"music\").\nHas_job(\"John\", \"theater\").\nHas_job(\"John\", \"dance\").\nHas_job(\"John\", \"film\").\nHas_job(\"John\", \"television\").\nHas_job(\"John\", \"journalism\").\nHas_job(\"John\", \"public policy\").\nHas_job(\"John\", \"international relations\").\nHas_job(\"John\", \"education\").\nHas_job(\"John\", \"social work\").\nHas_job(\"John\", \"marketing\").\nHas_job(\"John\", \"public relations\").\nHas_job(\"John\", \"advertising\").\nHas_job(\"John\", \"entrepreneurship\").\nHas_job(\"John\", \"consulting\").\nHas_job(\"John\", \"human resources\").\nHas_job(\"John\", \"sales\").\nHas_job(\"John\", \"customer service\").\nHas_job(\"John\", \"hospitality\").\nHas_job(\"John\", \"restaurant\").\nHas_job(\"John\", \"retail\").\nHas_job(\"John\", \"banking\").\nHas_job(\"John\", \"investment\").\nHas_job(\"John\", \"real estate\").\nHas_job(\"John\", \"insurance\").\nHas_job(\"John\", \"accounting\").\nHas_job(\"John\", \"taxation\").\nHas_job(\"John\", \"auditing\").\nHas_job(\"John\", \"financial analysis\").\nHas_job(\"John\", \"financial planning\").\nHas_job(\"John\", \"financial advising\").\nHas_job(\"John\", \"financial management\").\nHas_job(\"John\", \"investment banking\").\nHas_job(\"John\", \"venture capital\").\nHas_job(\"John\", \"private equity\").\nHas_job(\"John\", \"hedge fund\").\nHas_job(\"John\", \"trading\").\nHas_job(\"John\", \"asset management\").\nHas_job(\"John\", \"commercial banking\").\nHas_job(\"John\", \"retail banking\").\nHas_job(\"John\", \"mortgage banking\").\nHas_job(\"John\", \"credit analysis\").\nHas_job(\"John\", \"loan officer\").\nHas_job(\"John\", \"loan servicing\").\nHas_job(\"John\", \"loan collections\").\nHas_job(\"John\", \"loan underwriting\").\nHas_job(\"John\", \"loan origination\").\nHas_job(\"John\", \"loan processing\").\nHas_job(\"John\", \"loan closing\").\nHas_job(\"John\", \"loan documentation\")."]}
{"id": 1004, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"paleo dieter\", \"meat\").\nEats(\"paleo dieter\", \"fish\").\nEats(\"paleo dieter\", \"eggs\").\nEats(\"paleo dieter\", \"vegetables\").\nEats(\"paleo dieter\", \"fruit\").\nEats(\"paleo dieter\", \"nuts\").\nEats(\"paleo dieter\", \"seeds\").\nEats(\"paleo dieter\", \"oils\").\nEats(\"paleo dieter\", \"water\").\nEats(\"paleo dieter\", \"coffee\").\nEats(\"paleo dieter\", \"tea\").\nEats(\"paleo dieter\", \"herbs\").\nEats(\"paleo dieter\", \"spices\").\nEats(\"paleo dieter\", \"salt\").\nEats(\"paleo dieter\", \"vinegar\").\nEats(\"paleo dieter\", \"pickles\").\nEats(\"paleo dieter\", \"sauerkraut\").\nEats(\"paleo dieter\", \"kimchi\").\nEats(\"paleo dieter\", \"olives\").\nEats(\"paleo dieter\", \"avocados\").\nEats(\"paleo dieter\", \"coconut\").\nEats(\"paleo dieter\", \"coconut milk\").\nEats(\"paleo dieter\", \"coconut water\").\nEats(\"paleo dieter\", \"coconut oil\").\nEats(\"paleo dieter\", \"coconut flour\").\nEats(\"paleo dieter\", \"coconut aminos\").\nEats(\"paleo dieter\", \"coconut sugar\").\nEats(\"paleo dieter\", \"coconut vinegar\").\nEats(\"paleo dieter\", \"coconut butter\").\nEats(\"paleo dieter\", \"coconut flakes\").\nEats(\"paleo dieter\", \"coconut cream\").\nEats(\"paleo dieter\", \"coconut chips\").\nEats(\"paleo dieter\", \"coconut jerky\").\nEats(\"paleo dieter\", \"coconut yogurt\").\nEats(\"paleo dieter\", \"coconut kefir\").\nEats(\"paleo dieter\", \"coconut cream cheese\").\nEats(\"paleo dieter\", \"coconut mayo\").\nEats(\"paleo dieter\", \"coconut ice cream\").\nEats(\"paleo dieter\", \"coconut candy\").\nEats(\"paleo dieter\", \"coconut macaroons\").\nEats(\"paleo dieter\", \"coconut muffins\").\nEats(\"paleo dieter\", \"coconut pancakes\").\nEats(\"paleo dieter\", \"coconut waffles\").\nEats(\"paleo dieter\", \"coconut bread\").\nEats(\"paleo dieter\", \"coconut cookies\").\nEats(\"paleo dieter\", \"coconut cake\").\nEats(\"paleo dieter\", \"coconut pie\").\nEats(\"paleo dieter\", \"coconut pudding\").\nEats(\"paleo dieter\", \"coconut custard\").\nEats(\"paleo dieter\", \"coconut creamsicle\").\nEats(\"paleo dieter\", \"", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"paleo dieter\", \"meat\").\nEats(\"paleo dieter\", \"fish\").\nEats(\"paleo dieter\", \"eggs\").\nEats(\"paleo dieter\", \"vegetables\").\nEats(\"paleo dieter\", \"fruit\").\nEats(\"paleo dieter\", \"nuts\").\nEats(\"paleo dieter\", \"seeds\").\nEats(\"paleo dieter\", \"oils\").\nEats(\"paleo dieter\", \"water\").\nEats(\"paleo dieter\", \"coffee\").\nEats(\"paleo dieter\", \"tea\").\nEats(\"paleo dieter\", \"herbs\").\nEats(\"paleo dieter\", \"spices\").\nEats(\"paleo dieter\", \"salt\").\nEats(\"paleo dieter\", \"vinegar\").\nEats(\"paleo dieter\", \"pickles\").\nEats(\"paleo dieter\", \"sauerkraut\").\nEats(\"paleo dieter\", \"kimchi\").\nEats(\"paleo dieter\", \"olives\").\nEats(\"paleo dieter\", \"avocados\").\nEats(\"paleo dieter\", \"coconut\").\nEats(\"paleo dieter\", \"coconut milk\").\nEats(\"paleo dieter\", \"coconut water\").\nEats(\"paleo dieter\", \"coconut oil\").\nEats(\"paleo dieter\", \"coconut flour\").\nEats(\"paleo dieter\", \"coconut aminos\").\nEats(\"paleo dieter\", \"coconut sugar\").\nEats(\"paleo dieter\", \"coconut vinegar\").\nEats(\"paleo dieter\", \"coconut butter\").\nEats(\"paleo dieter\", \"coconut flakes\").\nEats(\"paleo dieter\", \"coconut cream\").\nEats(\"paleo dieter\", \"coconut chips\").\nEats(\"paleo dieter\", \"coconut jerky\").\nEats(\"paleo dieter\", \"coconut yogurt\").\nEats(\"paleo dieter\", \"coconut kefir\").\nEats(\"paleo dieter\", \"coconut cream cheese\").\nEats(\"paleo dieter\", \"coconut mayo\").\nEats(\"paleo dieter\", \"coconut ice cream\").\nEats(\"paleo dieter\", \"coconut candy\").\nEats(\"paleo dieter\", \"coconut macaroons\").\nEats(\"paleo dieter\", \"coconut muffins\").\nEats(\"paleo dieter\", \"coconut pancakes\").\nEats(\"paleo dieter\", \"coconut waffles\").\nEats(\"paleo dieter\", \"coconut bread\").\nEats(\"paleo dieter\", \"coconut cookies\").\nEats(\"paleo dieter\", \"coconut cake\").\nEats(\"paleo dieter\", \"coconut pie\").\nEats(\"paleo dieter\", \"coconut pudding\").\nEats(\"paleo dieter\", \"coconut custard\").\nEats(\"paleo dieter\", \"coconut creamsicle\").\nEats(\"paleo dieter\", \""]}
{"id": 1005, "answer": false, "completion": ".decl Has_flag(Country:symbol, Flag:symbol)\nHas_flag(\"Armenia\", \"double triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag", "completions": [".decl Has_flag(Country:symbol, Flag:symbol)\nHas_flag(\"Armenia\", \"double triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag(\"Armenia\", \"triangle\").\nHas_flag"]}
{"id": 1006, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Donald Trump's inauguration\", 2017).\nHappens_in_year(\"Saddam Hussein's death\", 2006).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Donald Trump's inauguration\", year1), Happens_in_year(\"Saddam Hussein's death\", year2), year1 > year2.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Donald Trump's inauguration\", 2017).\nHappens_in_year(\"Saddam Hussein's death\", 2006).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Donald Trump's inauguration\", year1), Happens_in_year(\"Saddam Hussein's death\", year2), year1 > year2.\n.output Answer"]}
{"id": 1007, "answer": false, "completion": ".decl Has_organ(Person:symbol, Organ:symbol)\nHas_organ(\"Alan Rickman\", \"heart\").\nHas_organ(\"Alan Rickman\", \"lung\").\nHas_organ(\"Alan Rickman\", \"kidney\").\nHas_organ(\"Alan Rickman\", \"stomach\").\nHas_organ(\"Alan Rickman\", \"intestine\").\nHas_organ(\"Alan Rickman\", \"liver\").\n.decl Answer()\nAnswer() :- Has_organ(\"Alan Rickman\", organ), organ != \"heart\", organ != \"lung\", organ != \"kidney\", organ != \"stomach\", organ != \"intestine\", organ != \"liver\".\n.output Answer", "completions": [".decl Has_organ(Person:symbol, Organ:symbol)\nHas_organ(\"Alan Rickman\", \"heart\").\nHas_organ(\"Alan Rickman\", \"lung\").\nHas_organ(\"Alan Rickman\", \"kidney\").\nHas_organ(\"Alan Rickman\", \"stomach\").\nHas_organ(\"Alan Rickman\", \"intestine\").\nHas_organ(\"Alan Rickman\", \"liver\").\n.decl Answer()\nAnswer() :- Has_organ(\"Alan Rickman\", organ), organ != \"heart\", organ != \"lung\", organ != \"kidney\", organ != \"stomach\", organ != \"intestine\", organ != \"liver\".\n.output Answer"]}
{"id": 1008, "answer": false, "completion": ".decl Treats_subjects_ethically(University:symbol)\nTreats_subjects_ethically(\"Johns Hopkins University\").\n.decl Answer()\nAnswer() :- Treats_subjects_ethically(\"Johns Hopkins University\").\n.output Answer", "completions": [".decl Treats_subjects_ethically(University:symbol)\nTreats_subjects_ethically(\"Johns Hopkins University\").\n.decl Answer()\nAnswer() :- Treats_subjects_ethically(\"Johns Hopkins University\").\n.output Answer"]}
{"id": 1009, "answer": false, "completion": ".decl Requires_GPA(Organization:symbol, GPA:float)\nRequires_GPA(\"FBI\", 3.0).\nRequires_GPA(\"University of Pittsburgh\", 2.5).\n.decl Answer()\nAnswer() :- Requires_GPA(\"FBI\", gpa1), Requires_GPA(\"University of Pittsburgh\", gpa2), gpa1 > gpa2.\n.output Answer", "completions": [".decl Requires_GPA(Organization:symbol, GPA:float)\nRequires_GPA(\"FBI\", 3.0).\nRequires_GPA(\"University of Pittsburgh\", 2.5).\n.decl Answer()\nAnswer() :- Requires_GPA(\"FBI\", gpa1), Requires_GPA(\"University of Pittsburgh\", gpa2), gpa1 > gpa2.\n.output Answer"]}
{"id": 1010, "answer": true, "completion": ".decl Has_house(Person:symbol, House:symbol)\nHas_house(\"Aristotle\", \"House of Lords\").\n.decl Answer()\nAnswer() :- Has_house(\"Aristotle\", \"House of Lords\").\n.output Answer", "completions": [".decl Has_house(Person:symbol, House:symbol)\nHas_house(\"Aristotle\", \"House of Lords\").\n.decl Answer()\nAnswer() :- Has_house(\"Aristotle\", \"House of Lords\").\n.output Answer"]}
{"id": 1011, "answer": false, "completion": ".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"Joao\", \"Uberlandia\").\n.decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Joao\", \"Mitsubishi\").\n.decl Answer()\nAnswer() :- Lives_in(\"Joao\", \"Uberlandia\"), Works_for(\"Joao\", \"Mitsubishi\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"Joao\", \"Uberlandia\").\n.decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Joao\", \"Mitsubishi\").\n.decl Answer()\nAnswer() :- Lives_in(\"Joao\", \"Uberlandia\"), Works_for(\"Joao\", \"Mitsubishi\").\n.output Answer"]}
{"id": 1012, "answer": false, "completion": ".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Wolverine\", \"brown\").\nHas_color(\"Lynx\", \"brown\").\nHas_color(\"Lynx\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"Wolverine\", color1), Has_color(\"Lynx\", color2), color1 = color2.\n.output Answer", "completions": [".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Wolverine\", \"brown\").\nHas_color(\"Lynx\", \"brown\").\nHas_color(\"Lynx\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"Wolverine\", color1), Has_color(\"Lynx\", color2), color1 = color2.\n.output Answer"]}
{"id": 1013, "answer": false, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Amtrak's Acela Express\", 150).\n.decl Is_sound_barrier(Speed:float)\nIs_sound_barrier(340).\n.decl Answer()\nAnswer() :- Has_speed(\"Amtrak's Acela Express\", speed), Is_sound_barrier(speed), speed > 340.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Amtrak's Acela Express\", 150).\n.decl Is_sound_barrier(Speed:float)\nIs_sound_barrier(340).\n.decl Answer()\nAnswer() :- Has_speed(\"Amtrak's Acela Express\", speed), Is_sound_barrier(speed), speed > 340.\n.output Answer"]}
{"id": 1014, "answer": true, "completion": ".decl Transmits(Disease:symbol, Method:symbol)\nTransmits(\"HIV\", \"blood\").\nTransmits(\"HIV\", \"semen\").\nTransmits(\"HIV\", \"vaginal fluid\").\nTransmits(\"HIV\", \"breast milk\").\nTransmits(\"HIV\", \"needle sharing\").\nTransmits(\"HIV\", \"silverware\").\n.decl Answer()\nAnswer() :- Transmits(\"HIV\", \"silverware\").\n.output Answer", "completions": [".decl Transmits(Disease:symbol, Method:symbol)\nTransmits(\"HIV\", \"blood\").\nTransmits(\"HIV\", \"semen\").\nTransmits(\"HIV\", \"vaginal fluid\").\nTransmits(\"HIV\", \"breast milk\").\nTransmits(\"HIV\", \"needle sharing\").\nTransmits(\"HIV\", \"silverware\").\n.decl Answer()\nAnswer() :- Transmits(\"HIV\", \"silverware\").\n.output Answer"]}
{"id": 1015, "answer": false, "completion": ".decl Has_worms(Animal:symbol)\nHas_worms(\"dog\").\n.decl Answer()\nAnswer() :- Has_worms(\"dog\"), Has_worms(\"strawberry\").\n.output Answer", "completions": [".decl Has_worms(Animal:symbol)\nHas_worms(\"dog\").\n.decl Answer()\nAnswer() :- Has_worms(\"dog\"), Has_worms(\"strawberry\").\n.output Answer"]}
{"id": 1016, "answer": true, "completion": ".decl Has_smell(Object:symbol, Smell:symbol)\nHas_smell(\"Durian fruit\", \"delight\").\n.decl Answer()\nAnswer() :- Has_smell(\"Durian fruit\", smell).\n.output Answer", "completions": [".decl Has_smell(Object:symbol, Smell:symbol)\nHas_smell(\"Durian fruit\", \"delight\").\n.decl Answer()\nAnswer() :- Has_smell(\"Durian fruit\", smell).\n.output Answer"]}
{"id": 1017, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Gorillaz\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"Gorillaz\", n_members1), Has_n_members(\"Gorillaz\", n_members2), n_members1 > n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Gorillaz\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"Gorillaz\", n_members1), Has_n_members(\"Gorillaz\", n_members2), n_members1 > n_members2.\n.output Answer"]}
{"id": 1018, "answer": false, "completion": ".decl Protects(Amendment:symbol, Freedom:symbol)\nProtects(\"First Amendment\", \"freedom of speech\").\n.decl Answer()\nAnswer() :- Protects(\"Eighth Amendment\", \"freedom of speech\").\n.output Answer", "completions": [".decl Protects(Amendment:symbol, Freedom:symbol)\nProtects(\"First Amendment\", \"freedom of speech\").\n.decl Answer()\nAnswer() :- Protects(\"Eighth Amendment\", \"freedom of speech\").\n.output Answer"]}
{"id": 1019, "answer": true, "completion": ".decl Composed_theme_song(Person:symbol, Television_series:symbol)\nComposed_theme_song(\"Richard Wagner\", \"The Lone Ranger\").\nComposed_theme_song(\"Richard Wagner\", \"Bonanza\").\n.decl Answer()\nAnswer() :- Composed_theme_song(\"Richard Wagner\", television_series1), Composed_theme_song(\"Richard Wagner\", television_series2), television_series1 != television_series2.\n.output Answer", "completions": [".decl Composed_theme_song(Person:symbol, Television_series:symbol)\nComposed_theme_song(\"Richard Wagner\", \"The Lone Ranger\").\nComposed_theme_song(\"Richard Wagner\", \"Bonanza\").\n.decl Answer()\nAnswer() :- Composed_theme_song(\"Richard Wagner\", television_series1), Composed_theme_song(\"Richard Wagner\", television_series2), television_series1 != television_series2.\n.output Answer"]}
{"id": 1020, "answer": true, "completion": ".decl Has_musical_passion(Person:symbol, Musical_passion:symbol)\nHas_musical_passion(\"Squidward Tentacles\", \"jazz\").\nHas_musical_passion(\"Alan Greenspan\", \"classical music\").\n.decl Answer()\nAnswer() :- Has_musical_passion(\"Squidward Tentacles\", musical_passion1), Has_musical_passion(\"Alan Greenspan\", musical_passion2), musical_passion1 != musical_passion2.\n.output Answer", "completions": [".decl Has_musical_passion(Person:symbol, Musical_passion:symbol)\nHas_musical_passion(\"Squidward Tentacles\", \"jazz\").\nHas_musical_passion(\"Alan Greenspan\", \"classical music\").\n.decl Answer()\nAnswer() :- Has_musical_passion(\"Squidward Tentacles\", musical_passion1), Has_musical_passion(\"Alan Greenspan\", musical_passion2), musical_passion1 != musical_passion2.\n.output Answer"]}
{"id": 1021, "answer": true, "completion": ".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"Louvre's pyramid\", \"glass\").\n.decl Is_known_for(Object:symbol, Quality:symbol)\nIs_known_for(\"Louvre's pyramid\", \"unbreakable\").\n.decl Answer()\nAnswer() :- Is_made_of(\"Louvre's pyramid\", \"glass\").\n.output Answer", "completions": [".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"Louvre's pyramid\", \"glass\").\n.decl Is_known_for(Object:symbol, Quality:symbol)\nIs_known_for(\"Louvre's pyramid\", \"unbreakable\").\n.decl Answer()\nAnswer() :- Is_made_of(\"Louvre's pyramid\", \"glass\").\n.output Answer"]}
{"id": 1022, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Evander Holyfield\", \"pork products\").\n.decl Answer()\nAnswer() :- Eats(\"Evander Holyfield\", \"pork products\").\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Evander Holyfield\", \"pork products\").\n.decl Answer()\nAnswer() :- Eats(\"Evander Holyfield\", \"pork products\").\n.output Answer"]}
{"id": 1023, "answer": false, "completion": ".decl Involved_in(Country:symbol, Conflict:symbol)\nInvolved_in(\"Egypt\", \"Arab-Israeli conflict\").\nInvolved_in(\"Syria\", \"Arab-Israeli conflict\").\nInvolved_in(\"Jordan\", \"Arab-Israeli conflict\").\nInvolved_in(\"Israel\", \"Arab-Israeli conflict\").\n.decl Answer()\nAnswer() :- Involved_in(\"England\", \"Arab-Israeli conflict\").\n.output Answer", "completions": [".decl Involved_in(Country:symbol, Conflict:symbol)\nInvolved_in(\"Egypt\", \"Arab-Israeli conflict\").\nInvolved_in(\"Syria\", \"Arab-Israeli conflict\").\nInvolved_in(\"Jordan\", \"Arab-Israeli conflict\").\nInvolved_in(\"Israel\", \"Arab-Israeli conflict\").\n.decl Answer()\nAnswer() :- Involved_in(\"England\", \"Arab-Israeli conflict\").\n.output Answer"]}
{"id": 1024, "answer": true, "completion": ".decl Requires_math(Profession:symbol)\nRequires_math(\"accountant\").\n.decl Answer()\nAnswer() :- Requires_math(profession), !, \"Dyscalculia\".\n.output Answer", "completions": [".decl Requires_math(Profession:symbol)\nRequires_math(\"accountant\").\n.decl Answer()\nAnswer() :- Requires_math(profession), !, \"Dyscalculia\".\n.output Answer"]}
{"id": 1025, "answer": true, "completion": ".decl Invented_in_year(Person:symbol, Object:symbol, Year:float)\nInvented_in_year(\"Donatello\", \"smartphone\", 2007).\n.decl Answer()\nAnswer() :- Invented_in_year(\"Donatello\", \"smartphone\", year), year >= 2007.\n.output Answer", "completions": [".decl Invented_in_year(Person:symbol, Object:symbol, Year:float)\nInvented_in_year(\"Donatello\", \"smartphone\", 2007).\n.decl Answer()\nAnswer() :- Invented_in_year(\"Donatello\", \"smartphone\", year), year >= 2007.\n.output Answer"]}
{"id": 1026, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmastime\", \"December\").\nHappens_in_time(\"groundhog day\", \"February\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"February\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmastime\", season), Happens_in_time(\"groundhog day\", month), In_season(month, season).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmastime\", \"December\").\nHappens_in_time(\"groundhog day\", \"February\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"February\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmastime\", season), Happens_in_time(\"groundhog day\", month), In_season(month, season).\n.output Answer"]}
{"id": 1027, "answer": true, "completion": ".decl Has_n_characters(Alphabet:symbol, N_characters:float)\nHas_n_characters(\"Roman alphabet\", 26).\nHas_n_characters(\"kanji\", 2000).\n.decl Answer()\nAnswer() :- Has_n_characters(\"Roman alphabet\", n_characters1), Has_n_characters(\"kanji\", n_characters2), n_characters1 > n_characters2.\n.output Answer", "completions": [".decl Has_n_characters(Alphabet:symbol, N_characters:float)\nHas_n_characters(\"Roman alphabet\", 26).\nHas_n_characters(\"kanji\", 2000).\n.decl Answer()\nAnswer() :- Has_n_characters(\"Roman alphabet\", n_characters1), Has_n_characters(\"kanji\", n_characters2), n_characters1 > n_characters2.\n.output Answer"]}
{"id": 1028, "answer": true, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 1029, "answer": true, "completion": ".decl Has_storage(Device:symbol, Storage:float)\nHas_storage(\"Samsung Galaxy A10e\", 32).\n.decl Lasts_for_n_hours(Show:symbol, N_hours:float)\nLasts_for_n_hours(\"Game of Thrones\", 60).\n.decl Answer()\nAnswer() :- Lasts_for_n_hours(\"Game of Thrones\", n_hours1), Has_storage(\"Samsung Galaxy A10e\", n_hours2), n_hours1 <= n_hours2.\n.output Answer", "completions": [".decl Has_storage(Device:symbol, Storage:float)\nHas_storage(\"Samsung Galaxy A10e\", 32).\n.decl Lasts_for_n_hours(Show:symbol, N_hours:float)\nLasts_for_n_hours(\"Game of Thrones\", 60).\n.decl Answer()\nAnswer() :- Lasts_for_n_hours(\"Game of Thrones\", n_hours1), Has_storage(\"Samsung Galaxy A10e\", n_hours2), n_hours1 <= n_hours2.\n.output Answer"]}
{"id": 1030, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Aerosmith\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Aerosmith\", n_members), n_members >= 2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Aerosmith\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Aerosmith\", n_members), n_members >= 2.\n.output Answer"]}
{"id": 1031, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"ostrich\", 0.0008).\nHas_volume(\"swallow nest\", 0.0004).\n.decl Answer()\nAnswer() :- Has_volume(\"ostrich\", volume1), Has_volume(\"swallow nest\", volume2), volume1 <= volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"ostrich\", 0.0008).\nHas_volume(\"swallow nest\", 0.0004).\n.decl Answer()\nAnswer() :- Has_volume(\"ostrich\", volume1), Has_volume(\"swallow nest\", volume2), volume1 <= volume2.\n.output Answer"]}
{"id": 1032, "answer": true, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Soldier Field\", 61000).\n.decl Has_length(Animal:symbol, Length:float)\nHas_length(\"giant squid\", 43).\n.decl Answer()\nAnswer() :- Has_capacity(\"Soldier Field\", capacity), Has_length(\"giant squid\", length), capacity >= length.\n.output Answer", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Soldier Field\", 61000).\n.decl Has_length(Animal:symbol, Length:float)\nHas_length(\"giant squid\", 43).\n.decl Answer()\nAnswer() :- Has_capacity(\"Soldier Field\", capacity), Has_length(\"giant squid\", length), capacity >= length.\n.output Answer"]}
{"id": 1033, "answer": true, "completion": ".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"Constitution of the United States\", \"paper\").\n.decl Offends(Organization:symbol, Object:symbol)\nOffends(\"PETA\", \"leather\").\nOffends(\"PETA\", \"fur\").\nOffends(\"PETA\", \"wool\").\nOffends(\"PETA\", \"silk\").\nOffends(\"PETA\", \"feathers\").\nOffends(\"PETA\", \"shells\").\nOffends(\"PETA\", \"bone\").\nOffends(\"PETA\", \"horn\").\nOffends(\"PETA\", \"down\").\nOffends(\"PETA\", \"dairy\").\nOffends(\"PETA\", \"eggs\").\nOffends(\"PETA\", \"honey\").\nOffends(\"PETA\", \"beeswax\").\nOffends(\"PETA\", \"soap\").\nOffends(\"PETA\", \"perfume\").\nOffends(\"PETA\", \"cosmetics\").\nOffends(\"PETA\", \"toiletries\").\nOffends(\"PETA\", \"cleaning products\").\nOffends(\"PETA\", \"paint\").\nOffends(\"PETA\", \"glue\").\nOffends(\"PETA\", \"varnish\").\nOffends(\"PETA\", \"lacquer\").\nOffends(\"PETA\", \"petroleum\").\nOffends(\"PETA\", \"kerosene\").\nOffends(\"PETA\", \"plastic\").\nOffends(\"PETA\", \"rubber\").\nOffends(\"PETA\", \"nylon\").\nOffends(\"PETA\", \"polyester\").\nOffends(\"PETA\", \"acrylic\").\nOffends(\"PETA\", \"vinyl\").\nOffends(\"PETA\", \"rayon\").\nOffends(\"PETA\", \"cotton\").\nOffends(\"PETA\", \"linen\").\nOffends(\"PETA\", \"wool\").\nOffends(\"PETA\", \"silk\").\nOffends(\"PETA\", \"feathers\").\nOffends(\"PETA\", \"shells\").\nOffends(\"PETA\", \"bone\").\nOffends(\"PETA\", \"horn\").\nOffends(\"PETA\", \"down\").\nOffends(\"PETA\", \"dairy\").\nOffends(\"PETA\", \"eggs\").\nOffends(\"PETA\", \"honey\").\nOffends(\"PETA\", \"beeswax\").\nOffends(\"PETA\", \"soap\").\nOffends(\"PETA\", \"perfume\").\nOffends(\"PETA\", \"cosmetics\").\nOffends(\"PETA\", \"toiletries\").\nOffends(\"PETA\", \"cleaning products\").\nOffends(\"PETA\", \"paint\").\nOffends(\"PETA\", \"glue\").\nOffends(\"PETA\", \"varnish\").\nOffends(\"PETA\", \"lacquer\").\nOffends(\"PETA\", \"petroleum\").\nOffends(\"PETA\", \"kerosene\").\nOffends(\"PETA\", \"plastic\").\nOffends(\"PETA\", \"rubber\").\nOffends(\"PETA\", \"nylon\").\nOffends(\"PETA\", \"polyester\").\nOffends(\"PETA\", \"acrylic\").\nOffends(\"PETA\", \"vinyl\").\nOffends(\"PETA\", \"rayon\").\nOffends(\"PETA\", \"cotton\").\nOffends(\"PETA\", \"linen\").\nOffends(\"PETA\", \"wool\").\nOffends(\"PETA\", \"silk\").\nOffends(\"PETA\", \"feathers\").\nOffends(\"P", "completions": [".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"Constitution of the United States\", \"paper\").\n.decl Offends(Organization:symbol, Object:symbol)\nOffends(\"PETA\", \"leather\").\nOffends(\"PETA\", \"fur\").\nOffends(\"PETA\", \"wool\").\nOffends(\"PETA\", \"silk\").\nOffends(\"PETA\", \"feathers\").\nOffends(\"PETA\", \"shells\").\nOffends(\"PETA\", \"bone\").\nOffends(\"PETA\", \"horn\").\nOffends(\"PETA\", \"down\").\nOffends(\"PETA\", \"dairy\").\nOffends(\"PETA\", \"eggs\").\nOffends(\"PETA\", \"honey\").\nOffends(\"PETA\", \"beeswax\").\nOffends(\"PETA\", \"soap\").\nOffends(\"PETA\", \"perfume\").\nOffends(\"PETA\", \"cosmetics\").\nOffends(\"PETA\", \"toiletries\").\nOffends(\"PETA\", \"cleaning products\").\nOffends(\"PETA\", \"paint\").\nOffends(\"PETA\", \"glue\").\nOffends(\"PETA\", \"varnish\").\nOffends(\"PETA\", \"lacquer\").\nOffends(\"PETA\", \"petroleum\").\nOffends(\"PETA\", \"kerosene\").\nOffends(\"PETA\", \"plastic\").\nOffends(\"PETA\", \"rubber\").\nOffends(\"PETA\", \"nylon\").\nOffends(\"PETA\", \"polyester\").\nOffends(\"PETA\", \"acrylic\").\nOffends(\"PETA\", \"vinyl\").\nOffends(\"PETA\", \"rayon\").\nOffends(\"PETA\", \"cotton\").\nOffends(\"PETA\", \"linen\").\nOffends(\"PETA\", \"wool\").\nOffends(\"PETA\", \"silk\").\nOffends(\"PETA\", \"feathers\").\nOffends(\"PETA\", \"shells\").\nOffends(\"PETA\", \"bone\").\nOffends(\"PETA\", \"horn\").\nOffends(\"PETA\", \"down\").\nOffends(\"PETA\", \"dairy\").\nOffends(\"PETA\", \"eggs\").\nOffends(\"PETA\", \"honey\").\nOffends(\"PETA\", \"beeswax\").\nOffends(\"PETA\", \"soap\").\nOffends(\"PETA\", \"perfume\").\nOffends(\"PETA\", \"cosmetics\").\nOffends(\"PETA\", \"toiletries\").\nOffends(\"PETA\", \"cleaning products\").\nOffends(\"PETA\", \"paint\").\nOffends(\"PETA\", \"glue\").\nOffends(\"PETA\", \"varnish\").\nOffends(\"PETA\", \"lacquer\").\nOffends(\"PETA\", \"petroleum\").\nOffends(\"PETA\", \"kerosene\").\nOffends(\"PETA\", \"plastic\").\nOffends(\"PETA\", \"rubber\").\nOffends(\"PETA\", \"nylon\").\nOffends(\"PETA\", \"polyester\").\nOffends(\"PETA\", \"acrylic\").\nOffends(\"PETA\", \"vinyl\").\nOffends(\"PETA\", \"rayon\").\nOffends(\"PETA\", \"cotton\").\nOffends(\"PETA\", \"linen\").\nOffends(\"PETA\", \"wool\").\nOffends(\"PETA\", \"silk\").\nOffends(\"PETA\", \"feathers\").\nOffends(\"P"]}
{"id": 1034, "answer": true, "completion": ".decl Has_bone(Animal:symbol, Bone:symbol)\nHas_bone(\"minotaur\", \"tibia\").\n.decl Can_injure(Animal:symbol, Bone:symbol, Activity:symbol)\nCan_injure(\"minotaur\", \"tibia\", \"football\").\n.decl Answer()\nAnswer() :- Has_bone(\"minotaur\", \"tibia\"), Can_injure(\"minotaur\", \"tibia\", \"football\").\n.output Answer", "completions": [".decl Has_bone(Animal:symbol, Bone:symbol)\nHas_bone(\"minotaur\", \"tibia\").\n.decl Can_injure(Animal:symbol, Bone:symbol, Activity:symbol)\nCan_injure(\"minotaur\", \"tibia\", \"football\").\n.decl Answer()\nAnswer() :- Has_bone(\"minotaur\", \"tibia\"), Can_injure(\"minotaur\", \"tibia\", \"football\").\n.output Answer"]}
{"id": 1035, "answer": true, "completion": ".decl Is_icon(Object:symbol)\nIs_icon(\"crucifixion\").\n.decl Is_socially_acceptable(Object:symbol)\nIs_socially_acceptable(\"crucifixion\").\n.decl Answer()\nAnswer() :- Is_icon(\"crucifixion\"), Is_socially_acceptable(\"crucifixion\").\n.output Answer", "completions": [".decl Is_icon(Object:symbol)\nIs_icon(\"crucifixion\").\n.decl Is_socially_acceptable(Object:symbol)\nIs_socially_acceptable(\"crucifixion\").\n.decl Answer()\nAnswer() :- Is_icon(\"crucifixion\"), Is_socially_acceptable(\"crucifixion\").\n.output Answer"]}
{"id": 1036, "answer": true, "completion": ".decl Caused_by(Event:symbol, Cause:symbol)\nCaused_by(\"worst crash in history\", \"United Airlines\").\n.decl Answer()\nAnswer() :- Caused_by(\"worst crash in history\", \"United Airlines\").\n.output Answer", "completions": [".decl Caused_by(Event:symbol, Cause:symbol)\nCaused_by(\"worst crash in history\", \"United Airlines\").\n.decl Answer()\nAnswer() :- Caused_by(\"worst crash in history\", \"United Airlines\").\n.output Answer"]}
{"id": 1037, "answer": false, "completion": ".decl Appears_in(Actor:symbol, Movie:symbol)\nAppears_in(\"Clark Gable\", \"Gone with the Wind\").\nAppears_in(\"Clark Gable\", \"It Happened One Night\").\nAppears_in(\"Clark Gable\", \"Mogambo\").\nAppears_in(\"Clark Gable\", \"The Misfits\").\nAppears_in(\"Clark Gable\", \"Red Dust\").\nAppears_in(\"Clark Gable\", \"San Francisco\").\nAppears_in(\"Clark Gable\", \"Soldier of Fortune\").\nAppears_in(\"Clark Gable\", \"Test Pilot\").\nAppears_in(\"Clark Gable\", \"To Please a Lady\").\nAppears_in(\"Clark Gable\", \"Too Hot to Handle\").\nAppears_in(\"Clark Gable\", \"The Tall Men\").\nAppears_in(\"Clark Gable\", \"Teacher's Pet\").\nAppears_in(\"Clark Gable\", \"The Call of the Wild\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Painted Desert\").\nAppears_in(\"Clark Gable\", \"The Tall Target\").\nAppears_in(\"Clark Gable\", \"The White Sister\").\nAppears_in(\"Clark Gable\", \"They Knew What They Wanted\").\nAppears_in(\"Clark Gable\", \"The Secret Six\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Painted Desert\").\nAppears_in(\"Clark Gable\", \"The Tall Target\").\nAppears_in(\"Clark Gable\", \"The White Sister\").\nAppears_in(\"Clark Gable\", \"They Knew What They Wanted\").\nAppears_in(\"Clark Gable\", \"The Secret Six\").\nAppears_in(\"Clark Gable\", \"The Call of the Wild\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Painted Desert\").\nAppears_in(\"Clark Gable\", \"The Tall Target\").\nAppears_in(\"Clark Gable\", \"The White Sister\").\nAppears_in(\"Clark Gable\", \"They Knew What They Wanted\").\nAppears_in(\"Clark Gable\", \"The Secret Six\").\nAppears_in(\"Clark Gable\", \"The Call of the Wild\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Painted Desert\").\nAppears_in(\"Clark Gable\", \"The Tall Target\").\nAppears_in(\"Clark Gable\", \"The White Sister\").\nAppears_in(\"Clark Gable\", \"They Knew What They Wanted\").\nAppears_in(\"Clark Gable\", \"The Secret Six\").\nAppears_in(\"Clark Gable\", \"The Call of the Wild\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Painted Desert\").\nAppears_in(\"Clark Gable\", \"The Tall Target\").\nAppears_in(\"Clark Gable\", \"The White Sister\").\nAppears_in(\"Clark Gable\", \"They Knew What They Wanted\").\nAppears_in(\"Clark Gable\", \"The Secret Six\").\nAppears_in(\"Clark Gable\", \"The Call of the Wild\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Painted Desert\").\nAppears_in(\"Clark Gable\", \"The", "completions": [".decl Appears_in(Actor:symbol, Movie:symbol)\nAppears_in(\"Clark Gable\", \"Gone with the Wind\").\nAppears_in(\"Clark Gable\", \"It Happened One Night\").\nAppears_in(\"Clark Gable\", \"Mogambo\").\nAppears_in(\"Clark Gable\", \"The Misfits\").\nAppears_in(\"Clark Gable\", \"Red Dust\").\nAppears_in(\"Clark Gable\", \"San Francisco\").\nAppears_in(\"Clark Gable\", \"Soldier of Fortune\").\nAppears_in(\"Clark Gable\", \"Test Pilot\").\nAppears_in(\"Clark Gable\", \"To Please a Lady\").\nAppears_in(\"Clark Gable\", \"Too Hot to Handle\").\nAppears_in(\"Clark Gable\", \"The Tall Men\").\nAppears_in(\"Clark Gable\", \"Teacher's Pet\").\nAppears_in(\"Clark Gable\", \"The Call of the Wild\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Painted Desert\").\nAppears_in(\"Clark Gable\", \"The Tall Target\").\nAppears_in(\"Clark Gable\", \"The White Sister\").\nAppears_in(\"Clark Gable\", \"They Knew What They Wanted\").\nAppears_in(\"Clark Gable\", \"The Secret Six\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Painted Desert\").\nAppears_in(\"Clark Gable\", \"The Tall Target\").\nAppears_in(\"Clark Gable\", \"The White Sister\").\nAppears_in(\"Clark Gable\", \"They Knew What They Wanted\").\nAppears_in(\"Clark Gable\", \"The Secret Six\").\nAppears_in(\"Clark Gable\", \"The Call of the Wild\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Painted Desert\").\nAppears_in(\"Clark Gable\", \"The Tall Target\").\nAppears_in(\"Clark Gable\", \"The White Sister\").\nAppears_in(\"Clark Gable\", \"They Knew What They Wanted\").\nAppears_in(\"Clark Gable\", \"The Secret Six\").\nAppears_in(\"Clark Gable\", \"The Call of the Wild\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Painted Desert\").\nAppears_in(\"Clark Gable\", \"The Tall Target\").\nAppears_in(\"Clark Gable\", \"The White Sister\").\nAppears_in(\"Clark Gable\", \"They Knew What They Wanted\").\nAppears_in(\"Clark Gable\", \"The Secret Six\").\nAppears_in(\"Clark Gable\", \"The Call of the Wild\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Painted Desert\").\nAppears_in(\"Clark Gable\", \"The Tall Target\").\nAppears_in(\"Clark Gable\", \"The White Sister\").\nAppears_in(\"Clark Gable\", \"They Knew What They Wanted\").\nAppears_in(\"Clark Gable\", \"The Secret Six\").\nAppears_in(\"Clark Gable\", \"The Call of the Wild\").\nAppears_in(\"Clark Gable\", \"The Hucksters\").\nAppears_in(\"Clark Gable\", \"The Painted Desert\").\nAppears_in(\"Clark Gable\", \"The"]}
{"id": 1038, "answer": true, "completion": ".decl Has_dietary_guidelines(Person:symbol, Dietary_guidelines:symbol)\nHas_dietary_guidelines(\"David Duchovny\", \"vegetarian\").\n.decl Is_food(Food:symbol, Dietary_guidelines:symbol)\nIs_food(\"Atlantic Salmon\", \"vegetarian\").\nIs_food(\"Atlantic Salmon\", \"pescetarian\").\n.decl Answer()\nAnswer() :- Has_dietary_guidelines(\"David Duchovny\", dietary_guidelines), Is_food(\"Atlantic Salmon\", dietary_guidelines).\n.output Answer", "completions": [".decl Has_dietary_guidelines(Person:symbol, Dietary_guidelines:symbol)\nHas_dietary_guidelines(\"David Duchovny\", \"vegetarian\").\n.decl Is_food(Food:symbol, Dietary_guidelines:symbol)\nIs_food(\"Atlantic Salmon\", \"vegetarian\").\nIs_food(\"Atlantic Salmon\", \"pescetarian\").\n.decl Answer()\nAnswer() :- Has_dietary_guidelines(\"David Duchovny\", dietary_guidelines), Is_food(\"Atlantic Salmon\", dietary_guidelines).\n.output Answer"]}
{"id": 1039, "answer": false, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"movie theater\", \"popcorn\").\nSells(\"movie theater\", \"soda\").\nSells(\"movie theater\", \"candy\").\nSells(\"movie theater\", \"movie ticket\").\n.decl Answer()\nAnswer() :- Sells(\"movie theater\", \"General Motors product\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"movie theater\", \"popcorn\").\nSells(\"movie theater\", \"soda\").\nSells(\"movie theater\", \"candy\").\nSells(\"movie theater\", \"movie ticket\").\n.decl Answer()\nAnswer() :- Sells(\"movie theater\", \"General Motors product\").\n.output Answer"]}
{"id": 1040, "answer": false, "completion": ".decl Happens_in_region(Event:symbol, Region:symbol)\nHappens_in_region(\"hurricane\", \"Gulf of Mexico\").\nHappens_in_region(\"hurricane\", \"Atlantic Ocean\").\nHappens_in_region(\"hurricane\", \"Caribbean Sea\").\nHappens_in_region(\"hurricane\", \"East Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"West Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"South Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"North Indian Ocean\").\nHappens_in_region(\"hurricane\", \"South Indian Ocean\").\nHappens_in_region(\"hurricane\", \"North Atlantic Ocean\").\nHappens_in_region(\"hurricane\", \"South Atlantic Ocean\").\nHappens_in_region(\"hurricane\", \"Mediterranean Sea\").\nHappens_in_region(\"hurricane\", \"Red Sea\").\nHappens_in_region(\"hurricane\", \"Persian Gulf\").\nHappens_in_region(\"hurricane\", \"Arabian Sea\").\nHappens_in_region(\"hurricane\", \"Bay of Bengal\").\nHappens_in_region(\"hurricane\", \"Andaman Sea\").\nHappens_in_region(\"hurricane\", \"South China Sea\").\nHappens_in_region(\"hurricane\", \"East China Sea\").\nHappens_in_region(\"hurricane\", \"Yellow Sea\").\nHappens_in_region(\"hurricane\", \"Tasman Sea\").\nHappens_in_region(\"hurricane\", \"Timor Sea\").\nHappens_in_region(\"hurricane\", \"Great Australian Bight\").\nHappens_in_region(\"hurricane\", \"Gulf of Carpentaria\").\nHappens_in_region(\"hurricane\", \"Gulf of Thailand\").\nHappens_in_region(\"hurricane\", \"Gulf of Tonkin\").\nHappens_in_region(\"hurricane\", \"Java Sea\").\nHappens_in_region(\"hurricane\", \"Sulu Sea\").\nHappens_in_region(\"hurricane\", \"South Atlantic Ocean\").\nHappens_in_region(\"hurricane\", \"South-East Indian Ocean\").\nHappens_in_region(\"hurricane\", \"South-West Indian Ocean\").\nHappens_in_region(\"hurricane\", \"Tasman Sea\").\nHappens_in_region(\"hurricane\", \"West Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"East Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"North Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"South Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"North Atlantic Ocean\").\nHappens_in_region(\"hurricane\", \"South Atlantic Ocean\").\nHappens_in_region(\"hurricane\", \"North Indian Ocean\").\nHappens_in_region(\"hurricane\", \"South Indian Ocean\").\nHappens_in_region(\"hurricane\", \"Mediterranean Sea\").\nHappens_in_region(\"hurricane\", \"Red Sea\").\nHappens_in_region(\"hurricane\", \"Persian Gulf\").\nHappens_in_region(\"hurricane\", \"Arabian Sea\").\nHappens_in_region(\"hurricane\", \"Bay of Bengal\").\nHappens_in_region(\"hurricane\", \"Andaman Sea\").\nHappens_in", "completions": [".decl Happens_in_region(Event:symbol, Region:symbol)\nHappens_in_region(\"hurricane\", \"Gulf of Mexico\").\nHappens_in_region(\"hurricane\", \"Atlantic Ocean\").\nHappens_in_region(\"hurricane\", \"Caribbean Sea\").\nHappens_in_region(\"hurricane\", \"East Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"West Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"South Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"North Indian Ocean\").\nHappens_in_region(\"hurricane\", \"South Indian Ocean\").\nHappens_in_region(\"hurricane\", \"North Atlantic Ocean\").\nHappens_in_region(\"hurricane\", \"South Atlantic Ocean\").\nHappens_in_region(\"hurricane\", \"Mediterranean Sea\").\nHappens_in_region(\"hurricane\", \"Red Sea\").\nHappens_in_region(\"hurricane\", \"Persian Gulf\").\nHappens_in_region(\"hurricane\", \"Arabian Sea\").\nHappens_in_region(\"hurricane\", \"Bay of Bengal\").\nHappens_in_region(\"hurricane\", \"Andaman Sea\").\nHappens_in_region(\"hurricane\", \"South China Sea\").\nHappens_in_region(\"hurricane\", \"East China Sea\").\nHappens_in_region(\"hurricane\", \"Yellow Sea\").\nHappens_in_region(\"hurricane\", \"Tasman Sea\").\nHappens_in_region(\"hurricane\", \"Timor Sea\").\nHappens_in_region(\"hurricane\", \"Great Australian Bight\").\nHappens_in_region(\"hurricane\", \"Gulf of Carpentaria\").\nHappens_in_region(\"hurricane\", \"Gulf of Thailand\").\nHappens_in_region(\"hurricane\", \"Gulf of Tonkin\").\nHappens_in_region(\"hurricane\", \"Java Sea\").\nHappens_in_region(\"hurricane\", \"Sulu Sea\").\nHappens_in_region(\"hurricane\", \"South Atlantic Ocean\").\nHappens_in_region(\"hurricane\", \"South-East Indian Ocean\").\nHappens_in_region(\"hurricane\", \"South-West Indian Ocean\").\nHappens_in_region(\"hurricane\", \"Tasman Sea\").\nHappens_in_region(\"hurricane\", \"West Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"East Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"North Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"South Pacific Ocean\").\nHappens_in_region(\"hurricane\", \"North Atlantic Ocean\").\nHappens_in_region(\"hurricane\", \"South Atlantic Ocean\").\nHappens_in_region(\"hurricane\", \"North Indian Ocean\").\nHappens_in_region(\"hurricane\", \"South Indian Ocean\").\nHappens_in_region(\"hurricane\", \"Mediterranean Sea\").\nHappens_in_region(\"hurricane\", \"Red Sea\").\nHappens_in_region(\"hurricane\", \"Persian Gulf\").\nHappens_in_region(\"hurricane\", \"Arabian Sea\").\nHappens_in_region(\"hurricane\", \"Bay of Bengal\").\nHappens_in_region(\"hurricane\", \"Andaman Sea\").\nHappens_in"]}
{"id": 1041, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Billie Eilish\", 5000000).\n.decl Cost(Car:symbol, Cost:float)\nCost(\"Porsche\", 100000).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Billie Eilish\", net_worth), Cost(\"Porsche\", cost), net_worth >= cost.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Billie Eilish\", 5000000).\n.decl Cost(Car:symbol, Cost:float)\nCost(\"Porsche\", 100000).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Billie Eilish\", net_worth), Cost(\"Porsche\", cost), net_worth >= cost.\n.output Answer"]}
{"id": 1042, "answer": true, "completion": ".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"physician\", \"MD\").\n.decl Is_recommended(Practice:symbol, Profession:symbol)\nIs_recommended(\"Reiki\", \"physician\").\n.decl Answer()\nAnswer() :- Has_degree(\"physician\", \"MD\"), !, Is_recommended(\"Reiki\", \"physician\").\n.output Answer", "completions": [".decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"physician\", \"MD\").\n.decl Is_recommended(Practice:symbol, Profession:symbol)\nIs_recommended(\"Reiki\", \"physician\").\n.decl Answer()\nAnswer() :- Has_degree(\"physician\", \"MD\"), !, Is_recommended(\"Reiki\", \"physician\").\n.output Answer"]}
{"id": 1043, "answer": false, "completion": ".decl Has_tusks(Animal:symbol)\nHas_tusks(\"common warthog\").\n.decl Answer()\nAnswer() :- Has_tusks(\"common warthog\").\n.output Answer", "completions": [".decl Has_tusks(Animal:symbol)\nHas_tusks(\"common warthog\").\n.decl Answer()\nAnswer() :- Has_tusks(\"common warthog\").\n.output Answer"]}
{"id": 1044, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"American\", \"English\").\nSpeaks(\"French\", \"French\").\n.decl Answer()\nAnswer() :- Speaks(\"American\", \"English\"), Speaks(\"French\", \"French\").\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"American\", \"English\").\nSpeaks(\"French\", \"French\").\n.decl Answer()\nAnswer() :- Speaks(\"American\", \"English\"), Speaks(\"French\", \"French\").\n.output Answer"]}
{"id": 1045, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"giraffe\", 18).\nHas_height(\"Eiffel Tower\", 324).\n.decl Answer()\nAnswer() :- Has_height(\"giraffe\", height1), Has_height(\"Eiffel Tower\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"giraffe\", 18).\nHas_height(\"Eiffel Tower\", 324).\n.decl Answer()\nAnswer() :- Has_height(\"giraffe\", height1), Has_height(\"Eiffel Tower\", height2), height1 < height2.\n.output Answer"]}
{"id": 1046, "answer": true, "completion": ".decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"diamond\", 10).\nHas_hardness(\"gladiator's weapon\", 5).\n.decl Answer()\nAnswer() :- Has_hardness(\"diamond\", hardness1), Has_hardness(\"gladiator's weapon\", hardness2), hardness1 > hardness2.\n.output Answer", "completions": [".decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"diamond\", 10).\nHas_hardness(\"gladiator's weapon\", 5).\n.decl Answer()\nAnswer() :- Has_hardness(\"diamond\", hardness1), Has_hardness(\"gladiator's weapon\", hardness2), hardness1 > hardness2.\n.output Answer"]}
{"id": 1047, "answer": true, "completion": ".decl Is_used_in(Object:symbol, Activity:symbol)\nIs_used_in(\"curling iron\", \"curling\").\n.decl Answer()\nAnswer() :- Is_used_in(\"curling iron\", \"curling\").\n.output Answer\n\n\n", "completions": [".decl Is_used_in(Object:symbol, Activity:symbol)\nIs_used_in(\"curling iron\", \"curling\").\n.decl Answer()\nAnswer() :- Is_used_in(\"curling iron\", \"curling\").\n.output Answer\n\n\n"]}
{"id": 1048, "answer": false, "completion": ".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"citrus fruits\", \"vitamin C\").\nHas_nutrient(\"citrus fruits\", \"folic acid\").\nHas_nutrient(\"citrus fruits\", \"potassium\").\nHas_nutrient(\"citrus fruits\", \"dietary fiber\").\nHas_nutrient(\"citrus fruits\", \"pantothenic acid\").\nHas_nutrient(\"citrus fruits\", \"copper\").\nHas_nutrient(\"citrus fruits\", \"biotin\").\nHas_nutrient(\"citrus fruits\", \"riboflavin\").\nHas_nutrient(\"citrus fruits\", \"manganese\").\nHas_nutrient(\"citrus fruits\", \"vitamin B6\").\nHas_nutrient(\"citrus fruits\", \"choline\").\nHas_nutrient(\"citrus fruits\", \"magnesium\").\nHas_nutrient(\"citrus fruits\", \"folate\").\nHas_nutrient(\"citrus fruits\", \"calcium\").\nHas_nutrient(\"citrus fruits\", \"iron\").\nHas_nutrient(\"citrus fruits\", \"vitamin A\").\nHas_nutrient(\"citrus fruits\", \"vitamin E\").\nHas_nutrient(\"citrus fruits\", \"niacin\").\nHas_nutrient(\"citrus fruits\", \"phosphorus\").\nHas_nutrient(\"citrus fruits\", \"zinc\").\nHas_nutrient(\"citrus fruits\", \"thiamin\").\nHas_nutrient(\"citrus fruits\", \"selenium\").\nHas_nutrient(\"citrus fruits\", \"vitamin K\").\nHas_nutrient(\"citrus fruits\", \"iodine\").\nHas_nutrient(\"citrus fruits\", \"vitamin B12\").\nHas_nutrient(\"citrus fruits\", \"vitamin D\").\nHas_nutrient(\"citrus fruits\", \"pyridoxine\").\nHas_nutrient(\"citrus fruits\", \"pyridoxal\").\nHas_nutrient(\"citrus fruits\", \"pyridoxamine\").\nHas_nutrient(\"citrus fruits\", \"pantothenic acid\").\nHas_nutrient(\"citrus fruits\", \"betaine\").\nHas_nutrient(\"citrus fruits\", \"caffeine\").\nHas_nutrient(\"citrus fruits\", \"theobromine\").\nHas_nutrient(\"citrus fruits\", \"phenethylamine\").\nHas_nutrient(\"citrus fruits\", \"sodium\").\nHas_nutrient(\"citrus fruits\", \"potassium\").\nHas_nutrient(\"citrus fruits\", \"chloride\").\nHas_nutrient(\"citrus fruits\", \"calcium\").\nHas_nutrient(\"citrus fruits\", \"phosphorus\").\nHas_nutrient(\"citrus fruits\", \"magnesium\").\nHas_nutrient(\"citrus fruits\", \"iron\").\nHas_nutrient(\"citrus fruits\", \"copper\").\nHas_nutrient(\"citrus fruits\", \"manganese\").\nHas_nutrient(\"citrus fruits\", \"zinc\").\nHas_nutrient(\"citrus fruits\", \"selenium\").\nHas_nutrient(\"citrus fruits\", \"fluoride\").\nHas_nutrient(\"citrus fruits\", \"molybdenum\").\nHas_nutrient(\"citrus fruits\", \"chromium\").\nHas_nutrient(\"citrus fruits\", \"iodine\").\nHas_nutrient(\"citrus fruits\", \"water\").\nHas_nutrient(\"citrus fruits\", \"energy\").\nHas_nutrient(\"citrus fruits\", \"protein\").\nHas_nutrient(\"citrus fruits\", \"total", "completions": [".decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"citrus fruits\", \"vitamin C\").\nHas_nutrient(\"citrus fruits\", \"folic acid\").\nHas_nutrient(\"citrus fruits\", \"potassium\").\nHas_nutrient(\"citrus fruits\", \"dietary fiber\").\nHas_nutrient(\"citrus fruits\", \"pantothenic acid\").\nHas_nutrient(\"citrus fruits\", \"copper\").\nHas_nutrient(\"citrus fruits\", \"biotin\").\nHas_nutrient(\"citrus fruits\", \"riboflavin\").\nHas_nutrient(\"citrus fruits\", \"manganese\").\nHas_nutrient(\"citrus fruits\", \"vitamin B6\").\nHas_nutrient(\"citrus fruits\", \"choline\").\nHas_nutrient(\"citrus fruits\", \"magnesium\").\nHas_nutrient(\"citrus fruits\", \"folate\").\nHas_nutrient(\"citrus fruits\", \"calcium\").\nHas_nutrient(\"citrus fruits\", \"iron\").\nHas_nutrient(\"citrus fruits\", \"vitamin A\").\nHas_nutrient(\"citrus fruits\", \"vitamin E\").\nHas_nutrient(\"citrus fruits\", \"niacin\").\nHas_nutrient(\"citrus fruits\", \"phosphorus\").\nHas_nutrient(\"citrus fruits\", \"zinc\").\nHas_nutrient(\"citrus fruits\", \"thiamin\").\nHas_nutrient(\"citrus fruits\", \"selenium\").\nHas_nutrient(\"citrus fruits\", \"vitamin K\").\nHas_nutrient(\"citrus fruits\", \"iodine\").\nHas_nutrient(\"citrus fruits\", \"vitamin B12\").\nHas_nutrient(\"citrus fruits\", \"vitamin D\").\nHas_nutrient(\"citrus fruits\", \"pyridoxine\").\nHas_nutrient(\"citrus fruits\", \"pyridoxal\").\nHas_nutrient(\"citrus fruits\", \"pyridoxamine\").\nHas_nutrient(\"citrus fruits\", \"pantothenic acid\").\nHas_nutrient(\"citrus fruits\", \"betaine\").\nHas_nutrient(\"citrus fruits\", \"caffeine\").\nHas_nutrient(\"citrus fruits\", \"theobromine\").\nHas_nutrient(\"citrus fruits\", \"phenethylamine\").\nHas_nutrient(\"citrus fruits\", \"sodium\").\nHas_nutrient(\"citrus fruits\", \"potassium\").\nHas_nutrient(\"citrus fruits\", \"chloride\").\nHas_nutrient(\"citrus fruits\", \"calcium\").\nHas_nutrient(\"citrus fruits\", \"phosphorus\").\nHas_nutrient(\"citrus fruits\", \"magnesium\").\nHas_nutrient(\"citrus fruits\", \"iron\").\nHas_nutrient(\"citrus fruits\", \"copper\").\nHas_nutrient(\"citrus fruits\", \"manganese\").\nHas_nutrient(\"citrus fruits\", \"zinc\").\nHas_nutrient(\"citrus fruits\", \"selenium\").\nHas_nutrient(\"citrus fruits\", \"fluoride\").\nHas_nutrient(\"citrus fruits\", \"molybdenum\").\nHas_nutrient(\"citrus fruits\", \"chromium\").\nHas_nutrient(\"citrus fruits\", \"iodine\").\nHas_nutrient(\"citrus fruits\", \"water\").\nHas_nutrient(\"citrus fruits\", \"energy\").\nHas_nutrient(\"citrus fruits\", \"protein\").\nHas_nutrient(\"citrus fruits\", \"total"]}
{"id": 1049, "answer": true, "completion": ".decl Has_n_floors(Hotel:symbol, N_floors:float)\nHas_n_floors(\"The Venetian\", 30).\nHas_n_floors(\"The Palazzo\", 33).\nHas_n_floors(\"The Wynn\", 45).\nHas_n_floors(\"The Bellagio\", 36).\nHas_n_floors(\"The Mirage\", 31).\nHas_n_floors(\"The Luxor\", 30).\nHas_n_floors(\"New York-New York\", 42).\nHas_n_floors(\"Excalibur\", 30).\nHas_n_floors(\"MGM Grand\", 30).\nHas_n_floors(\"Treasure Island\", 33).\nHas_n_floors(\"Circus Circus\", 28).\nHas_n_floors(\"Paris Las Vegas\", 34).\nHas_n_floors(\"Planet Hollywood\", 36).\nHas_n_floors(\"Caesars Palace\", 35).\nHas_n_floors(\"Flamingo Las Vegas\", 35).\nHas_n_floors(\"Bally's Las Vegas\", 34).\nHas_n_floors(\"Harrah's Las Vegas\", 34).\nHas_n_floors(\"The Cromwell\", 34).\nHas_n_floors(\"The Linq\", 35).\nHas_n_floors(\"The Stratosphere\", 35).\nHas_n_floors(\"Golden Nugget\", 30).\nHas_n_floors(\"The D Las Vegas\", 34).\nHas_n_floors(\"Four Queens\", 26).\nHas_n_floors(\"Fremont Hotel and Casino\", 22).\nHas_n_floors(\"Golden Gate Hotel and Casino\", 22).\nHas_n_floors(\"Main Street Station Casino Brewery Hotel\", 22).\nHas_n_floors(\"Plaza Hotel & Casino\", 22).\nHas_n_floors(\"The California Hotel and Casino\", 22).\nHas_n_floors(\"The El Cortez Hotel and Casino\", 22).\nHas_n_floors(\"The Golden Nugget Laughlin\", 22).\nHas_n_floors(\"The Golden Nugget\", 22).\nHas_n_floors(\"The Golden Nugget Biloxi\", 22).\nHas_n_floors(\"The Golden Nugget Atlantic City\", 22).\nHas_n_floors(\"The Golden Nugget Lake Charles\", 22).\nHas_n_floors(\"The Golden Nugget Laughlin\", 22).\nHas_n_floors(\"The Golden Nugget Las Vegas\", 22).\nHas_n_floors(\"The Golden Nugget Reno\", 22).\nHas_n_floors(\"The Golden Nugget Shreveport\", 22).\nHas_n_floors(\"The Golden Nugget\", 22).\nHas_n_floors(\"The Golden Nugget Biloxi\", 22).\nHas_n_floors(\"The Golden Nugget Atlantic City\", 22).\nHas_n_floors(\"The Golden Nugget Lake Charles\", 22).\nHas_n_floors(\"The Golden Nugget Laughlin\", 22).\nHas_n_floors(\"The Golden Nugget Las Vegas\", 22).\nHas_n_floors(\"The Golden Nugget Reno\", 22).\nHas_n_floors(\"The Golden Nugget Shreveport\", 22).\nHas_n_floors(\"The Golden Nugget\", 22).\nHas_n_floors(\"The Golden Nugget Biloxi\", 22).\nHas_n_floors(\"The Golden Nugget Atlantic City\", 22).\nHas_n_floors(\"The", "completions": [".decl Has_n_floors(Hotel:symbol, N_floors:float)\nHas_n_floors(\"The Venetian\", 30).\nHas_n_floors(\"The Palazzo\", 33).\nHas_n_floors(\"The Wynn\", 45).\nHas_n_floors(\"The Bellagio\", 36).\nHas_n_floors(\"The Mirage\", 31).\nHas_n_floors(\"The Luxor\", 30).\nHas_n_floors(\"New York-New York\", 42).\nHas_n_floors(\"Excalibur\", 30).\nHas_n_floors(\"MGM Grand\", 30).\nHas_n_floors(\"Treasure Island\", 33).\nHas_n_floors(\"Circus Circus\", 28).\nHas_n_floors(\"Paris Las Vegas\", 34).\nHas_n_floors(\"Planet Hollywood\", 36).\nHas_n_floors(\"Caesars Palace\", 35).\nHas_n_floors(\"Flamingo Las Vegas\", 35).\nHas_n_floors(\"Bally's Las Vegas\", 34).\nHas_n_floors(\"Harrah's Las Vegas\", 34).\nHas_n_floors(\"The Cromwell\", 34).\nHas_n_floors(\"The Linq\", 35).\nHas_n_floors(\"The Stratosphere\", 35).\nHas_n_floors(\"Golden Nugget\", 30).\nHas_n_floors(\"The D Las Vegas\", 34).\nHas_n_floors(\"Four Queens\", 26).\nHas_n_floors(\"Fremont Hotel and Casino\", 22).\nHas_n_floors(\"Golden Gate Hotel and Casino\", 22).\nHas_n_floors(\"Main Street Station Casino Brewery Hotel\", 22).\nHas_n_floors(\"Plaza Hotel & Casino\", 22).\nHas_n_floors(\"The California Hotel and Casino\", 22).\nHas_n_floors(\"The El Cortez Hotel and Casino\", 22).\nHas_n_floors(\"The Golden Nugget Laughlin\", 22).\nHas_n_floors(\"The Golden Nugget\", 22).\nHas_n_floors(\"The Golden Nugget Biloxi\", 22).\nHas_n_floors(\"The Golden Nugget Atlantic City\", 22).\nHas_n_floors(\"The Golden Nugget Lake Charles\", 22).\nHas_n_floors(\"The Golden Nugget Laughlin\", 22).\nHas_n_floors(\"The Golden Nugget Las Vegas\", 22).\nHas_n_floors(\"The Golden Nugget Reno\", 22).\nHas_n_floors(\"The Golden Nugget Shreveport\", 22).\nHas_n_floors(\"The Golden Nugget\", 22).\nHas_n_floors(\"The Golden Nugget Biloxi\", 22).\nHas_n_floors(\"The Golden Nugget Atlantic City\", 22).\nHas_n_floors(\"The Golden Nugget Lake Charles\", 22).\nHas_n_floors(\"The Golden Nugget Laughlin\", 22).\nHas_n_floors(\"The Golden Nugget Las Vegas\", 22).\nHas_n_floors(\"The Golden Nugget Reno\", 22).\nHas_n_floors(\"The Golden Nugget Shreveport\", 22).\nHas_n_floors(\"The Golden Nugget\", 22).\nHas_n_floors(\"The Golden Nugget Biloxi\", 22).\nHas_n_floors(\"The Golden Nugget Atlantic City\", 22).\nHas_n_floors(\"The"]}
{"id": 1050, "answer": true, "completion": ".decl Can_swim(Person:symbol)\nCan_swim(\"Michael Phelps\").\n.decl Answer()\nAnswer() :- Can_swim(\"Michael Phelps\").\n.output Answer", "completions": [".decl Can_swim(Person:symbol)\nCan_swim(\"Michael Phelps\").\n.decl Answer()\nAnswer() :- Can_swim(\"Michael Phelps\").\n.output Answer"]}
{"id": 1051, "answer": true, "completion": ".decl Uses_currency(Country:symbol, Currency:symbol)\nUses_currency(\"USA\", \"USD\").\nUses_currency(\"France\", \"Euros\").\n.decl Answer()\nAnswer() :- Uses_currency(\"USA\", \"USD\"), Uses_currency(\"France\", \"Euros\").\n.output Answer", "completions": [".decl Uses_currency(Country:symbol, Currency:symbol)\nUses_currency(\"USA\", \"USD\").\nUses_currency(\"France\", \"Euros\").\n.decl Answer()\nAnswer() :- Uses_currency(\"USA\", \"USD\"), Uses_currency(\"France\", \"Euros\").\n.output Answer"]}
{"id": 1052, "answer": false, "completion": ".decl Is_necessary(Part:symbol, Event:symbol)\nIs_necessary(\"tibia\", \"walking\").\nIs_necessary(\"tibia\", \"running\").\nIs_necessary(\"tibia\", \"jumping\").\nIs_necessary(\"tibia\", \"hockey\").\n.decl Answer()\nAnswer() :- Is_necessary(\"tibia\", \"Stanley Cup\").\n.output Answer", "completions": [".decl Is_necessary(Part:symbol, Event:symbol)\nIs_necessary(\"tibia\", \"walking\").\nIs_necessary(\"tibia\", \"running\").\nIs_necessary(\"tibia\", \"jumping\").\nIs_necessary(\"tibia\", \"hockey\").\n.decl Answer()\nAnswer() :- Is_necessary(\"tibia\", \"Stanley Cup\").\n.output Answer"]}
{"id": 1053, "answer": true, "completion": ".decl Wrote(Person:symbol, Sketch:symbol)\nWrote(\"Abbott and Costello\", \"Who's on First\").\nWrote(\"Monty Python\", \"The Spanish Inquisition\").\n.decl Answer()\nAnswer() :- Wrote(\"Monty Python\", \"Who's on First\").\n.output Answer", "completions": [".decl Wrote(Person:symbol, Sketch:symbol)\nWrote(\"Abbott and Costello\", \"Who's on First\").\nWrote(\"Monty Python\", \"The Spanish Inquisition\").\n.decl Answer()\nAnswer() :- Wrote(\"Monty Python\", \"Who's on First\").\n.output Answer"]}
{"id": 1054, "answer": true, "completion": ".decl Is_a_letter(Letter:symbol)\nIs_a_letter(\"B\").\n.decl Is_an_Arabic_numeral(Number:symbol)\nIs_an_Arabic_numeral(\"1\").\nIs_an_Arabic_numeral(\"2\").\nIs_an_Arabic_numeral(\"3\").\nIs_an_Arabic_numeral(\"4\").\nIs_an_Arabic_numeral(\"5\").\nIs_an_Arabic_numeral(\"6\").\nIs_an_Arabic_numeral(\"7\").\nIs_an_Arabic_numeral(\"8\").\nIs_an_Arabic_numeral(\"9\").\n.decl Answer()\nAnswer() :- Is_a_letter(\"B\").\nAnswer() :- Is_an_Arabic_numeral(\"B\").\n.output Answer", "completions": [".decl Is_a_letter(Letter:symbol)\nIs_a_letter(\"B\").\n.decl Is_an_Arabic_numeral(Number:symbol)\nIs_an_Arabic_numeral(\"1\").\nIs_an_Arabic_numeral(\"2\").\nIs_an_Arabic_numeral(\"3\").\nIs_an_Arabic_numeral(\"4\").\nIs_an_Arabic_numeral(\"5\").\nIs_an_Arabic_numeral(\"6\").\nIs_an_Arabic_numeral(\"7\").\nIs_an_Arabic_numeral(\"8\").\nIs_an_Arabic_numeral(\"9\").\n.decl Answer()\nAnswer() :- Is_a_letter(\"B\").\nAnswer() :- Is_an_Arabic_numeral(\"B\").\n.output Answer"]}
{"id": 1055, "answer": false, "completion": ".decl Sings_genre(Person:symbol, Genre:symbol)\nSings_genre(\"Brian Warner\", \"metal\").\n.decl Answer()\nAnswer() :- Sings_genre(\"Brian Warner\", \"soul\").\n.output Answer", "completions": [".decl Sings_genre(Person:symbol, Genre:symbol)\nSings_genre(\"Brian Warner\", \"metal\").\n.decl Answer()\nAnswer() :- Sings_genre(\"Brian Warner\", \"soul\").\n.output Answer"]}
{"id": 1056, "answer": true, "completion": ".decl Teaches(Teacher:symbol, Book:symbol)\nTeaches(\"Hugh Jackman\", \"The Great Gatsby\").\nTeaches(\"Hugh Jackman\", \"The Catcher in the Rye\").\n.decl Answer()\nAnswer() :- Teaches(\"Hugh Jackman\", \"The Great Gatsby\").\n.output Answer", "completions": [".decl Teaches(Teacher:symbol, Book:symbol)\nTeaches(\"Hugh Jackman\", \"The Great Gatsby\").\nTeaches(\"Hugh Jackman\", \"The Catcher in the Rye\").\n.decl Answer()\nAnswer() :- Teaches(\"Hugh Jackman\", \"The Great Gatsby\").\n.output Answer"]}
{"id": 1057, "answer": true, "completion": ".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Young and the Restless\", 11000).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Young and the Restless\", n_episodes), n_episodes > 366.\n.output Answer", "completions": [".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Young and the Restless\", 11000).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Young and the Restless\", n_episodes), n_episodes > 366.\n.output Answer"]}
{"id": 1058, "answer": false, "completion": ".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"Pope Benedict XVI\", \"Catholicism\").\nBelieves_in(\"Pope Benedict XVI\", \"Christianity\").\nBelieves_in(\"Pope Benedict XVI\", \"God\").\nBelieves_in(\"Pope Benedict XVI\", \"Jesus Christ\").\nBelieves_in(\"Pope Benedict XVI\", \"the Bible\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church\").\nBelieves_in(\"Pope Benedict XVI\", \"the Holy Spirit\").\nBelieves_in(\"Pope Benedict XVI\", \"the Trinity\").\nBelieves_in(\"Pope Benedict XVI\", \"the Virgin Mary\").\nBelieves_in(\"Pope Benedict XVI\", \"the Pope\").\nBelieves_in(\"Pope Benedict XVI\", \"the Catholic Church\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's teachings\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's traditions\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's sacraments\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's hierarchy\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's liturgy\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's canon law\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's catechism\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's magisterium\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical councils\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical councils\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical councils\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical councils\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical councils\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumen", "completions": [".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"Pope Benedict XVI\", \"Catholicism\").\nBelieves_in(\"Pope Benedict XVI\", \"Christianity\").\nBelieves_in(\"Pope Benedict XVI\", \"God\").\nBelieves_in(\"Pope Benedict XVI\", \"Jesus Christ\").\nBelieves_in(\"Pope Benedict XVI\", \"the Bible\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church\").\nBelieves_in(\"Pope Benedict XVI\", \"the Holy Spirit\").\nBelieves_in(\"Pope Benedict XVI\", \"the Trinity\").\nBelieves_in(\"Pope Benedict XVI\", \"the Virgin Mary\").\nBelieves_in(\"Pope Benedict XVI\", \"the Pope\").\nBelieves_in(\"Pope Benedict XVI\", \"the Catholic Church\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's teachings\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's traditions\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's sacraments\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's hierarchy\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's liturgy\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's canon law\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's catechism\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's magisterium\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical councils\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical councils\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical councils\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical councils\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical councils\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumenical creeds\").\nBelieves_in(\"Pope Benedict XVI\", \"the Church's ecumen"]}
{"id": 1059, "answer": false, "completion": ".decl Requires_special_facilities(Animal:symbol)\nRequires_special_facilities(\"giraffe\").\n.decl Answer()\nAnswer() :- Requires_special_facilities(\"giraffe\").\n.output Answer", "completions": [".decl Requires_special_facilities(Animal:symbol)\nRequires_special_facilities(\"giraffe\").\n.decl Answer()\nAnswer() :- Requires_special_facilities(\"giraffe\").\n.output Answer"]}
{"id": 1060, "answer": false, "completion": ".decl Causes(Disease:symbol, Organism:symbol)\nCauses(\"cerebral palsy\", \"human\").\n.decl Answer()\nAnswer() :- Causes(disease, \"slime mold\"), !.\n.output Answer", "completions": [".decl Causes(Disease:symbol, Organism:symbol)\nCauses(\"cerebral palsy\", \"human\").\n.decl Answer()\nAnswer() :- Causes(disease, \"slime mold\"), !.\n.output Answer"]}
{"id": 1061, "answer": true, "completion": ".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"Leonardo da Vinci\", \"Florence\").\n.decl Has_contemporary_peers(Person:symbol, City:symbol)\nHas_contemporary_peers(\"Leonardo da Vinci\", \"Florence\").\n.decl Answer()\nAnswer() :- Lives_in(\"Leonardo da Vinci\", city), not Has_contemporary_peers(\"Leonardo da Vinci\", city).\n.output Answer", "completions": [".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"Leonardo da Vinci\", \"Florence\").\n.decl Has_contemporary_peers(Person:symbol, City:symbol)\nHas_contemporary_peers(\"Leonardo da Vinci\", \"Florence\").\n.decl Answer()\nAnswer() :- Lives_in(\"Leonardo da Vinci\", city), not Has_contemporary_peers(\"Leonardo da Vinci\", city).\n.output Answer"]}
{"id": 1062, "answer": true, "completion": ".decl Answer()\nAnswer() :- !Enjoys(\"diarrhea\", \"people\").\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !Enjoys(\"diarrhea\", \"people\").\n.output Answer"]}
{"id": 1063, "answer": false, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Ice\", 0).\n.decl Answer()\nAnswer() :- Has_value(\"Ice\", value), value > 0.\n.output Answer", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Ice\", 0).\n.decl Answer()\nAnswer() :- Has_value(\"Ice\", value), value > 0.\n.output Answer"]}
{"id": 1064, "answer": true, "completion": ".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Rabbi\", \"Hanukkah\").\n.decl Answer()\nAnswer() :- Celebrates(\"Rabbi\", \"Christmas\").\n.output Answer", "completions": [".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Rabbi\", \"Hanukkah\").\n.decl Answer()\nAnswer() :- Celebrates(\"Rabbi\", \"Christmas\").\n.output Answer"]}
{"id": 1065, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Rahul Dravid\", \"Hindi\").\nSpeaks(\"Rahul Dravid\", \"English\").\n.decl Is_spoken_in(Language:symbol, Place:symbol)\nIs_spoken_in(\"Hindi\", \"Aurangabad\").\nIs_spoken_in(\"Marathi\", \"Aurangabad\").\n.decl Answer()\nAnswer() :- Speaks(\"Rahul Dravid\", language), Is_spoken_in(language, \"Aurangabad\").\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Rahul Dravid\", \"Hindi\").\nSpeaks(\"Rahul Dravid\", \"English\").\n.decl Is_spoken_in(Language:symbol, Place:symbol)\nIs_spoken_in(\"Hindi\", \"Aurangabad\").\nIs_spoken_in(\"Marathi\", \"Aurangabad\").\n.decl Answer()\nAnswer() :- Speaks(\"Rahul Dravid\", language), Is_spoken_in(language, \"Aurangabad\").\n.output Answer"]}
{"id": 1066, "answer": true, "completion": ".decl Has_infinitive_form(Verb:symbol, Infinitive_form:symbol)\nHas_infinitive_form(\"to be\", \"be\").\nHas_infinitive_form(\"to do\", \"do\").\nHas_infinitive_form(\"to have\", \"have\").\n.decl Is_famous(Person:symbol)\nIs_famous(\"Shakespeare\").\n.decl Answer()\nAnswer() :- Is_famous(person), Has_infinitive_form(verb, \"to be\"), Has_infinitive_form(verb, \"to do\"), Has_infinitive_form(verb, \"to have\").\n.output Answer", "completions": [".decl Has_infinitive_form(Verb:symbol, Infinitive_form:symbol)\nHas_infinitive_form(\"to be\", \"be\").\nHas_infinitive_form(\"to do\", \"do\").\nHas_infinitive_form(\"to have\", \"have\").\n.decl Is_famous(Person:symbol)\nIs_famous(\"Shakespeare\").\n.decl Answer()\nAnswer() :- Is_famous(person), Has_infinitive_form(verb, \"to be\"), Has_infinitive_form(verb, \"to do\"), Has_infinitive_form(verb, \"to have\").\n.output Answer"]}
{"id": 1067, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"referee\", \"black\").\nHas_color(\"field\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"referee\", color1), Has_color(\"field\", color2), color1 != color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"referee\", \"black\").\nHas_color(\"field\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"referee\", color1), Has_color(\"field\", color2), color1 != color2.\n.output Answer"]}
{"id": 1068, "answer": true, "completion": ".decl Has_symptom(Person:symbol, Symptom:symbol)\nHas_symptom(\"pirate\", \"scurvy\").\n.decl Needs_vitamin(Symptom:symbol, Vitamin:symbol)\nNeeds_vitamin(\"scurvy\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Has_symptom(\"pirate\", symptom), Needs_vitamin(symptom, \"Vitamin C\").\n.output Answer\n\n\n", "completions": [".decl Has_symptom(Person:symbol, Symptom:symbol)\nHas_symptom(\"pirate\", \"scurvy\").\n.decl Needs_vitamin(Symptom:symbol, Vitamin:symbol)\nNeeds_vitamin(\"scurvy\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Has_symptom(\"pirate\", symptom), Needs_vitamin(symptom, \"Vitamin C\").\n.output Answer\n\n\n"]}
{"id": 1069, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"ice\", 0.917).\nHas_mass(\"person\", 70).\n.decl Answer()\nAnswer() :- Has_mass(\"ice\", mass1), Has_mass(\"person\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"ice\", 0.917).\nHas_mass(\"person\", 70).\n.decl Answer()\nAnswer() :- Has_mass(\"ice\", mass1), Has_mass(\"person\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 1070, "answer": false, "completion": ".decl Has_altitude(Object:symbol, Altitude:float)\nHas_altitude(\"King Kong\", 1250).\nHas_altitude(\"Eiffel Tower visitors\", 275).\n.decl Answer()\nAnswer() :- Has_altitude(\"King Kong\", altitude1), Has_altitude(\"Eiffel Tower visitors\", altitude2), altitude1 > altitude2.\n.output Answer", "completions": [".decl Has_altitude(Object:symbol, Altitude:float)\nHas_altitude(\"King Kong\", 1250).\nHas_altitude(\"Eiffel Tower visitors\", 275).\n.decl Answer()\nAnswer() :- Has_altitude(\"King Kong\", altitude1), Has_altitude(\"Eiffel Tower visitors\", altitude2), altitude1 > altitude2.\n.output Answer"]}
{"id": 1071, "answer": true, "completion": ".decl Has_start_time(Show:symbol, Start_time:float)\nHas_start_time(\"Conan O'Brien\", 22).\n.decl Has_bedtime(Child:symbol, Bedtime:float)\nHas_bedtime(\"John\", 20).\nHas_bedtime(\"Mary\", 20).\nHas_bedtime(\"Tom\", 20).\n.decl Answer()\nAnswer() :- Has_start_time(\"Conan O'Brien\", start_time), Has_bedtime(child, bedtime), start_time > bedtime.\n.output Answer", "completions": [".decl Has_start_time(Show:symbol, Start_time:float)\nHas_start_time(\"Conan O'Brien\", 22).\n.decl Has_bedtime(Child:symbol, Bedtime:float)\nHas_bedtime(\"John\", 20).\nHas_bedtime(\"Mary\", 20).\nHas_bedtime(\"Tom\", 20).\n.decl Answer()\nAnswer() :- Has_start_time(\"Conan O'Brien\", start_time), Has_bedtime(child, bedtime), start_time > bedtime.\n.output Answer"]}
{"id": 1072, "answer": true, "completion": ".decl Has_cost(Organization:symbol, Cost:float)\nHas_cost(\"Capital One Venture\", 0).\nHas_cost(\"Church of Satan\", 0).\n.decl Answer()\nAnswer() :- Has_cost(\"Capital One Venture\", cost1), Has_cost(\"Church of Satan\", cost2), cost1 < cost2.\n.output Answer", "completions": [".decl Has_cost(Organization:symbol, Cost:float)\nHas_cost(\"Capital One Venture\", 0).\nHas_cost(\"Church of Satan\", 0).\n.decl Answer()\nAnswer() :- Has_cost(\"Capital One Venture\", cost1), Has_cost(\"Church of Satan\", cost2), cost1 < cost2.\n.output Answer"]}
{"id": 1073, "answer": true, "completion": ".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Morocco\", 20).\n.decl Is_ideal_for(Activity:symbol, Location:symbol)\nIs_ideal_for(\"water skiing\", \"Australia\").\nIs_ideal_for(\"water skiing\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Has_temperature(\"Morocco\", temperature), Is_ideal_for(\"water skiing\", \"Morocco\"), temperature >= 20.\n.output Answer", "completions": [".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Morocco\", 20).\n.decl Is_ideal_for(Activity:symbol, Location:symbol)\nIs_ideal_for(\"water skiing\", \"Australia\").\nIs_ideal_for(\"water skiing\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Has_temperature(\"Morocco\", temperature), Is_ideal_for(\"water skiing\", \"Morocco\"), temperature >= 20.\n.output Answer"]}
{"id": 1074, "answer": false, "completion": ".decl Can_swim(Animal:symbol)\nCan_swim(\"dolphin\").\nCan_swim(\"whale\").\nCan_swim(\"seal\").\nCan_swim(\"otter\").\nCan_swim(\"platypus\").\nCan_swim(\"duck\").\nCan_swim(\"goose\").\nCan_swim(\"penguin\").\nCan_swim(\"crocodile\").\nCan_swim(\"alligator\").\nCan_swim(\"turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"terrapin\").\nCan_swim(\"iguana\").\nCan_swim(\"chameleon\").\nCan_swim(\"gecko\").\nCan_swim(\"skink\").\nCan_swim(\"lizard\").\nCan_swim(\"crocodile lizard\").\nCan_swim(\"gecko lizard\").\nCan_swim(\"iguana lizard\").\nCan_swim(\"chameleon lizard\").\nCan_swim(\"skink lizard\").\nCan_swim(\"snake\").\nCan_swim(\"python\").\nCan_swim(\"boa\").\nCan_swim(\"cobra\").\nCan_swim(\"viper\").\nCan_swim(\"rattlesnake\").\nCan_swim(\"garter snake\").\nCan_swim(\"water snake\").\nCan_swim(\"seaturtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"soft", "completions": [".decl Can_swim(Animal:symbol)\nCan_swim(\"dolphin\").\nCan_swim(\"whale\").\nCan_swim(\"seal\").\nCan_swim(\"otter\").\nCan_swim(\"platypus\").\nCan_swim(\"duck\").\nCan_swim(\"goose\").\nCan_swim(\"penguin\").\nCan_swim(\"crocodile\").\nCan_swim(\"alligator\").\nCan_swim(\"turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"terrapin\").\nCan_swim(\"iguana\").\nCan_swim(\"chameleon\").\nCan_swim(\"gecko\").\nCan_swim(\"skink\").\nCan_swim(\"lizard\").\nCan_swim(\"crocodile lizard\").\nCan_swim(\"gecko lizard\").\nCan_swim(\"iguana lizard\").\nCan_swim(\"chameleon lizard\").\nCan_swim(\"skink lizard\").\nCan_swim(\"snake\").\nCan_swim(\"python\").\nCan_swim(\"boa\").\nCan_swim(\"cobra\").\nCan_swim(\"viper\").\nCan_swim(\"rattlesnake\").\nCan_swim(\"garter snake\").\nCan_swim(\"water snake\").\nCan_swim(\"seaturtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"softshell turtle\").\nCan_swim(\"tortoise\").\nCan_swim(\"terrapin\").\nCan_swim(\"turtle\").\nCan_swim(\"box turtle\").\nCan_swim(\"snapping turtle\").\nCan_swim(\"soft"]}
{"id": 1075, "answer": false, "completion": ".decl Is_enemy(Person:symbol, Team:symbol)\nIs_enemy(\"Joker\", \"Batman\").\nIs_enemy(\"Joker\", \"Batman's allies\").\nIs_enemy(\"Batman's allies\", \"Avengers\").\n.decl Answer()\nAnswer() :- Is_enemy(\"Joker\", \"Avengers\").\n.output Answer", "completions": [".decl Is_enemy(Person:symbol, Team:symbol)\nIs_enemy(\"Joker\", \"Batman\").\nIs_enemy(\"Joker\", \"Batman's allies\").\nIs_enemy(\"Batman's allies\", \"Avengers\").\n.decl Answer()\nAnswer() :- Is_enemy(\"Joker\", \"Avengers\").\n.output Answer"]}
{"id": 1076, "answer": true, "completion": ".decl Requires(Job:symbol, Ingredient:symbol)\nRequires(\"sofer\", \"leather\").\n.decl Answer()\nAnswer() :- Requires(\"sofer\", ingredient), !, ingredient = \"leather\".\n.output Answer", "completions": [".decl Requires(Job:symbol, Ingredient:symbol)\nRequires(\"sofer\", \"leather\").\n.decl Answer()\nAnswer() :- Requires(\"sofer\", ingredient), !, ingredient = \"leather\".\n.output Answer"]}
{"id": 1077, "answer": true, "completion": ".decl Is_state(State:symbol)\nIs_state(\"Maine\").\nIs_state(\"New Hampshire\").\nIs_state(\"Massachusetts\").\nIs_state(\"Rhode Island\").\nIs_state(\"Connecticut\").\nIs_state(\"New York\").\nIs_state(\"New Jersey\").\nIs_state(\"Delaware\").\nIs_state(\"Maryland\").\nIs_state(\"Virginia\").\nIs_state(\"North Carolina\").\nIs_state(\"South Carolina\").\nIs_state(\"Georgia\").\nIs_state(\"Florida\").\n.decl Is_historically_red_state(State:symbol)\nIs_historically_red_state(\"Maine\").\nIs_historically_red_state(\"New Hampshire\").\nIs_historically_red_state(\"Massachusetts\").\nIs_historically_red_state(\"Rhode Island\").\nIs_historically_red_state(\"Connecticut\").\nIs_historically_red_state(\"New York\").\nIs_historically_red_state(\"New Jersey\").\nIs_historically_red_state(\"Delaware\").\nIs_historically_red_state(\"Maryland\").\nIs_historically_red_state(\"Virginia\").\nIs_historically_red_state(\"North Carolina\").\nIs_historically_red_state(\"South Carolina\").\nIs_historically_red_state(\"Georgia\").\nIs_historically_red_state(\"Florida\").\n.decl Is_route(Route:symbol)\nIs_route(\"US route 1\").\n.decl Is_in_state(Route:symbol, State:symbol)\nIs_in_state(\"US route 1\", \"Maine\").\nIs_in_state(\"US route 1\", \"New Hampshire\").\nIs_in_state(\"US route 1\", \"Massachusetts\").\nIs_in_state(\"US route 1\", \"Rhode Island\").\nIs_in_state(\"US route 1\", \"Connecticut\").\nIs_in_state(\"US route 1\", \"New York\").\nIs_in_state(\"US route 1\", \"New Jersey\").\nIs_in_state(\"US route 1\", \"Delaware\").\nIs_in_state(\"US route 1\", \"Maryland\").\nIs_in_state(\"US route 1\", \"Virginia\").\nIs_in_state(\"US route 1\", \"North Carolina\").\nIs_in_state(\"US route 1\", \"South Carolina\").\nIs_in_state(\"US route 1\", \"Georgia\").\nIs_in_state(\"US route 1\", \"Florida\").\n.decl Answer()\nAnswer() :- Is_route(route), Is_in_state(route, state), Is_historically_red_state(state).\n.output Answer", "completions": [".decl Is_state(State:symbol)\nIs_state(\"Maine\").\nIs_state(\"New Hampshire\").\nIs_state(\"Massachusetts\").\nIs_state(\"Rhode Island\").\nIs_state(\"Connecticut\").\nIs_state(\"New York\").\nIs_state(\"New Jersey\").\nIs_state(\"Delaware\").\nIs_state(\"Maryland\").\nIs_state(\"Virginia\").\nIs_state(\"North Carolina\").\nIs_state(\"South Carolina\").\nIs_state(\"Georgia\").\nIs_state(\"Florida\").\n.decl Is_historically_red_state(State:symbol)\nIs_historically_red_state(\"Maine\").\nIs_historically_red_state(\"New Hampshire\").\nIs_historically_red_state(\"Massachusetts\").\nIs_historically_red_state(\"Rhode Island\").\nIs_historically_red_state(\"Connecticut\").\nIs_historically_red_state(\"New York\").\nIs_historically_red_state(\"New Jersey\").\nIs_historically_red_state(\"Delaware\").\nIs_historically_red_state(\"Maryland\").\nIs_historically_red_state(\"Virginia\").\nIs_historically_red_state(\"North Carolina\").\nIs_historically_red_state(\"South Carolina\").\nIs_historically_red_state(\"Georgia\").\nIs_historically_red_state(\"Florida\").\n.decl Is_route(Route:symbol)\nIs_route(\"US route 1\").\n.decl Is_in_state(Route:symbol, State:symbol)\nIs_in_state(\"US route 1\", \"Maine\").\nIs_in_state(\"US route 1\", \"New Hampshire\").\nIs_in_state(\"US route 1\", \"Massachusetts\").\nIs_in_state(\"US route 1\", \"Rhode Island\").\nIs_in_state(\"US route 1\", \"Connecticut\").\nIs_in_state(\"US route 1\", \"New York\").\nIs_in_state(\"US route 1\", \"New Jersey\").\nIs_in_state(\"US route 1\", \"Delaware\").\nIs_in_state(\"US route 1\", \"Maryland\").\nIs_in_state(\"US route 1\", \"Virginia\").\nIs_in_state(\"US route 1\", \"North Carolina\").\nIs_in_state(\"US route 1\", \"South Carolina\").\nIs_in_state(\"US route 1\", \"Georgia\").\nIs_in_state(\"US route 1\", \"Florida\").\n.decl Answer()\nAnswer() :- Is_route(route), Is_in_state(route, state), Is_historically_red_state(state).\n.output Answer"]}
{"id": 1078, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Napoleonic Wars\", 15).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"nuclear bomb\", 70).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"nuclear bomb\", n_years1), Last_n_years(\"Napoleonic Wars\", n_years2), n_years1 > n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Napoleonic Wars\", 15).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"nuclear bomb\", 70).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"nuclear bomb\", n_years1), Last_n_years(\"Napoleonic Wars\", n_years2), n_years1 > n_years2.\n.output Answer"]}
{"id": 1079, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Marco Rubio\", 5.7).\n.decl Has_height_limit(Roller_coaster:symbol, Height_limit:float)\nHas_height_limit(\"Candymonium\", 48).\n.decl Answer()\nAnswer() :- Has_height(\"Marco Rubio\", height1), Has_height_limit(\"Candymonium\", height2), height1 >= height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Marco Rubio\", 5.7).\n.decl Has_height_limit(Roller_coaster:symbol, Height_limit:float)\nHas_height_limit(\"Candymonium\", 48).\n.decl Answer()\nAnswer() :- Has_height(\"Marco Rubio\", height1), Has_height_limit(\"Candymonium\", height2), height1 >= height2.\n.output Answer"]}
{"id": 1080, "answer": true, "completion": ".decl Has_name(Item:symbol, Name:symbol)\nHas_name(\"famine\", \"Famine\").\nHas_name(\"pestilence\", \"Pestilence\").\nHas_name(\"war\", \"War\").\nHas_name(\"death\", \"Death\").\n.decl Answer()\nAnswer() :- Has_name(item1, name1), Has_name(item2, name2), item1 != item2.\n.output Answer", "completions": [".decl Has_name(Item:symbol, Name:symbol)\nHas_name(\"famine\", \"Famine\").\nHas_name(\"pestilence\", \"Pestilence\").\nHas_name(\"war\", \"War\").\nHas_name(\"death\", \"Death\").\n.decl Answer()\nAnswer() :- Has_name(item1, name1), Has_name(item2, name2), item1 != item2.\n.output Answer"]}
{"id": 1081, "answer": true, "completion": ".decl Uses_calendar(Person:symbol, Calendar:symbol)\nUses_calendar(\"Saint Augustine\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Uses_calendar(\"Saint Augustine\", \"Julian calendar\").\n.output Answer\n\n\n", "completions": [".decl Uses_calendar(Person:symbol, Calendar:symbol)\nUses_calendar(\"Saint Augustine\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Uses_calendar(\"Saint Augustine\", \"Julian calendar\").\n.output Answer\n\n\n"]}
{"id": 1082, "answer": false, "completion": ".decl Is_parody(Object:symbol)\nIs_parody(\"Saturday Night Live\").\n.decl Is_president(Person:symbol)\nIs_president(\"Donald Trump\").\n.decl Answer()\nAnswer() :- Is_parody(object), Is_president(person), object != person.\n.output Answer", "completions": [".decl Is_parody(Object:symbol)\nIs_parody(\"Saturday Night Live\").\n.decl Is_president(Person:symbol)\nIs_president(\"Donald Trump\").\n.decl Answer()\nAnswer() :- Is_parody(object), Is_president(person), object != person.\n.output Answer"]}
{"id": 1083, "answer": true, "completion": ".decl Has_surface_area(Planet:symbol, Surface_area:float)\nHas_surface_area(\"Venus\", 460).\n.decl Answer()\nAnswer() :- Has_surface_area(\"Venus\", surface_area), surface_area > 0.\n.output Answer", "completions": [".decl Has_surface_area(Planet:symbol, Surface_area:float)\nHas_surface_area(\"Venus\", 460).\n.decl Answer()\nAnswer() :- Has_surface_area(\"Venus\", surface_area), surface_area > 0.\n.output Answer"]}
{"id": 1084, "answer": false, "completion": ".decl Uses_flag(Organization:symbol, Flag:symbol)\nUses_flag(\"Nazi\", \"swastika\").\nUses_flag(\"Soviet Union\", \"hammer and sickle\").\n.decl Answer()\nAnswer() :- Uses_flag(\"Nazi\", \"hammer and sickle\").\n.output Answer", "completions": [".decl Uses_flag(Organization:symbol, Flag:symbol)\nUses_flag(\"Nazi\", \"swastika\").\nUses_flag(\"Soviet Union\", \"hammer and sickle\").\n.decl Answer()\nAnswer() :- Uses_flag(\"Nazi\", \"hammer and sickle\").\n.output Answer"]}
{"id": 1085, "answer": true, "completion": ".decl Causes_death(Event:symbol, Cause_of_death:symbol)\nCauses_death(\"Paul the Apostle's death\", \"beheaded\").\n.decl Violates_tenet(Event:symbol, Tenet:symbol)\nViolates_tenet(\"beheaded\", \"Ahimsa\").\n.decl Answer()\nAnswer() :- Causes_death(\"Paul the Apostle's death\", cause_of_death), Violates_tenet(cause_of_death, \"Ahimsa\").\n.output Answer", "completions": [".decl Causes_death(Event:symbol, Cause_of_death:symbol)\nCauses_death(\"Paul the Apostle's death\", \"beheaded\").\n.decl Violates_tenet(Event:symbol, Tenet:symbol)\nViolates_tenet(\"beheaded\", \"Ahimsa\").\n.decl Answer()\nAnswer() :- Causes_death(\"Paul the Apostle's death\", cause_of_death), Violates_tenet(cause_of_death, \"Ahimsa\").\n.output Answer"]}
{"id": 1086, "answer": true, "completion": ".decl Appears_on(Person:symbol, Show:symbol)\nAppears_on(\"Jenny McCarthy\", \"SNL\").\n.decl Relation(Person1:symbol, Person2:symbol, Relation:symbol)\nRelation(\"Jenny McCarthy\", \"cousin\", \"does not get along with\").\n.decl Answer()\nAnswer() :- Appears_on(\"Jenny McCarthy\", \"SNL\"), Relation(\"Jenny McCarthy\", \"cousin\", relation).\n.output Answer", "completions": [".decl Appears_on(Person:symbol, Show:symbol)\nAppears_on(\"Jenny McCarthy\", \"SNL\").\n.decl Relation(Person1:symbol, Person2:symbol, Relation:symbol)\nRelation(\"Jenny McCarthy\", \"cousin\", \"does not get along with\").\n.decl Answer()\nAnswer() :- Appears_on(\"Jenny McCarthy\", \"SNL\"), Relation(\"Jenny McCarthy\", \"cousin\", relation).\n.output Answer"]}
{"id": 1087, "answer": true, "completion": ".decl Is_required_for(Grade:symbol, Licence:symbol)\nIs_required_for(\"eleventh grade\", \"driver's licence\").\n.decl Answer()\nAnswer() :- Is_required_for(\"eleventh grade\", \"driver's licence\").\n.output Answer", "completions": [".decl Is_required_for(Grade:symbol, Licence:symbol)\nIs_required_for(\"eleventh grade\", \"driver's licence\").\n.decl Answer()\nAnswer() :- Is_required_for(\"eleventh grade\", \"driver's licence\").\n.output Answer"]}
{"id": 1088, "answer": true, "completion": ".decl Influences(Organization:symbol, Person:symbol)\nInfluences(\"DARPA\", \"Albert Einstein\").\n.decl Answer()\nAnswer() :- Influences(\"DARPA\", \"Albert Einstein\").\n.output Answer", "completions": [".decl Influences(Organization:symbol, Person:symbol)\nInfluences(\"DARPA\", \"Albert Einstein\").\n.decl Answer()\nAnswer() :- Influences(\"DARPA\", \"Albert Einstein\").\n.output Answer"]}
{"id": 1089, "answer": false, "completion": ".decl Has_nicotine(Cigarette:symbol, Nicotine:float)\nHas_nicotine(\"Marlboro\", 0.05).\nHas_nicotine(\"Camel\", 0.05).\nHas_nicotine(\"Winston\", 0.05).\nHas_nicotine(\"Menthol\", 0.05).\n.decl Has_addictive_potential(Cigarette:symbol, Addictive_potential:float)\nHas_addictive_potential(\"Marlboro\", 0.5).\nHas_addictive_potential(\"Camel\", 0.5).\nHas_addictive_potential(\"Winston\", 0.5).\nHas_addictive_potential(\"Menthol\", 0.5).\n.decl Answer()\nAnswer() :- Has_nicotine(\"Marlboro\", nicotine1), Has_nicotine(\"Camel\", nicotine2), Has_nicotine(\"Winston\", nicotine3), Has_nicotine(\"Menthol\", nicotine4), nicotine1 = nicotine2, nicotine2 = nicotine3, nicotine3 = nicotine4.\nAnswer() :- Has_addictive_potential(\"Marlboro\", addictive_potential1), Has_addictive_potential(\"Camel\", addictive_potential2), Has_addictive_potential(\"Winston\", addictive_potential3), Has_addictive_potential(\"Menthol\", addictive_potential4), addictive_potential1 = addictive_potential2, addictive_potential2 = addictive_potential3, addictive_potential3 = addictive_potential4.\n.output Answer", "completions": [".decl Has_nicotine(Cigarette:symbol, Nicotine:float)\nHas_nicotine(\"Marlboro\", 0.05).\nHas_nicotine(\"Camel\", 0.05).\nHas_nicotine(\"Winston\", 0.05).\nHas_nicotine(\"Menthol\", 0.05).\n.decl Has_addictive_potential(Cigarette:symbol, Addictive_potential:float)\nHas_addictive_potential(\"Marlboro\", 0.5).\nHas_addictive_potential(\"Camel\", 0.5).\nHas_addictive_potential(\"Winston\", 0.5).\nHas_addictive_potential(\"Menthol\", 0.5).\n.decl Answer()\nAnswer() :- Has_nicotine(\"Marlboro\", nicotine1), Has_nicotine(\"Camel\", nicotine2), Has_nicotine(\"Winston\", nicotine3), Has_nicotine(\"Menthol\", nicotine4), nicotine1 = nicotine2, nicotine2 = nicotine3, nicotine3 = nicotine4.\nAnswer() :- Has_addictive_potential(\"Marlboro\", addictive_potential1), Has_addictive_potential(\"Camel\", addictive_potential2), Has_addictive_potential(\"Winston\", addictive_potential3), Has_addictive_potential(\"Menthol\", addictive_potential4), addictive_potential1 = addictive_potential2, addictive_potential2 = addictive_potential3, addictive_potential3 = addictive_potential4.\n.output Answer"]}
{"id": 1090, "answer": false, "completion": ".decl Lives_in_century(Person:symbol, Century:symbol)\nLives_in_century(\"Matt Groening\", \"20th century\").\nLives_in_century(\"Matt Groening\", \"21st century\").\n.decl Answer()\nAnswer() :- Lives_in_century(\"Matt Groening\", century1), Lives_in_century(\"Matt Groening\", century2), century1 != century2.\n.output Answer", "completions": [".decl Lives_in_century(Person:symbol, Century:symbol)\nLives_in_century(\"Matt Groening\", \"20th century\").\nLives_in_century(\"Matt Groening\", \"21st century\").\n.decl Answer()\nAnswer() :- Lives_in_century(\"Matt Groening\", century1), Lives_in_century(\"Matt Groening\", century2), century1 != century2.\n.output Answer"]}
{"id": 1091, "answer": true, "completion": ".decl Admits_to(Psychic:symbol, Technique:symbol)\nAdmits_to(\"John Edward\", \"hot reading\").\n.decl Is_trustworthy(Psychic:symbol)\nIs_trustworthy(\"John Edward\").\n.decl Answer()\nAnswer() :- Admits_to(psychic, \"hot reading\"), !, Is_trustworthy(psychic).\n.output Answer", "completions": [".decl Admits_to(Psychic:symbol, Technique:symbol)\nAdmits_to(\"John Edward\", \"hot reading\").\n.decl Is_trustworthy(Psychic:symbol)\nIs_trustworthy(\"John Edward\").\n.decl Answer()\nAnswer() :- Admits_to(psychic, \"hot reading\"), !, Is_trustworthy(psychic).\n.output Answer"]}
{"id": 1092, "answer": false, "completion": ".decl Has_average_annual_precipitation(Region:symbol, Precipitation:float)\nHas_average_annual_precipitation(\"Poland Spring\", 43).\nHas_average_annual_precipitation(\"Sahara\", 0).\n.decl Answer()\nAnswer() :- Has_average_annual_precipitation(\"Poland Spring\", precipitation1), Has_average_annual_precipitation(\"Sahara\", precipitation2), precipitation1 > precipitation2.\n.output Answer", "completions": [".decl Has_average_annual_precipitation(Region:symbol, Precipitation:float)\nHas_average_annual_precipitation(\"Poland Spring\", 43).\nHas_average_annual_precipitation(\"Sahara\", 0).\n.decl Answer()\nAnswer() :- Has_average_annual_precipitation(\"Poland Spring\", precipitation1), Has_average_annual_precipitation(\"Sahara\", precipitation2), precipitation1 > precipitation2.\n.output Answer"]}
{"id": 1093, "answer": false, "completion": ".decl Requires(Object:symbol, Society:symbol)\nRequires(\"jet plane\", \"society\").\n.decl Answer()\nAnswer() :- !Requires(\"jet plane\", \"society\").\n.output Answer", "completions": [".decl Requires(Object:symbol, Society:symbol)\nRequires(\"jet plane\", \"society\").\n.decl Answer()\nAnswer() :- !Requires(\"jet plane\", \"society\").\n.output Answer"]}
{"id": 1094, "answer": true, "completion": ".decl Produces_oxygen(Organism:symbol)\nProduces_oxygen(\"chlorophyll\").\n.decl Needs_oxygen(Organism:symbol)\nNeeds_oxygen(\"human race\").\n.decl Answer()\nAnswer() :- Needs_oxygen(organism), !Produces_oxygen(organism).\n.output Answer", "completions": [".decl Produces_oxygen(Organism:symbol)\nProduces_oxygen(\"chlorophyll\").\n.decl Needs_oxygen(Organism:symbol)\nNeeds_oxygen(\"human race\").\n.decl Answer()\nAnswer() :- Needs_oxygen(organism), !Produces_oxygen(organism).\n.output Answer"]}
{"id": 1095, "answer": true, "completion": ".decl Is_in_location(Object:symbol, Location:symbol)\nIs_in_location(\"Statue of Liberty\", \"New York Harbor\").\n.decl Answer()\nAnswer() :- Is_in_location(\"Statue of Liberty\", \"New York Harbor\").\n.output Answer", "completions": [".decl Is_in_location(Object:symbol, Location:symbol)\nIs_in_location(\"Statue of Liberty\", \"New York Harbor\").\n.decl Answer()\nAnswer() :- Is_in_location(\"Statue of Liberty\", \"New York Harbor\").\n.output Answer"]}
{"id": 1096, "answer": true, "completion": ".decl Is_landlocked(Sea:symbol, Country:symbol)\nIs_landlocked(\"Sea of Japan\", \"Japan\").\n.decl Answer()\nAnswer() :- Is_landlocked(\"Sea of Japan\", \"Japan\").\n.output Answer", "completions": [".decl Is_landlocked(Sea:symbol, Country:symbol)\nIs_landlocked(\"Sea of Japan\", \"Japan\").\n.decl Answer()\nAnswer() :- Is_landlocked(\"Sea of Japan\", \"Japan\").\n.output Answer"]}
{"id": 1097, "answer": true, "completion": ".decl Has_population_density(Area:symbol, Population_density:float)\nHas_population_density(\"suburbs\", 0.5).\nHas_population_density(\"city\", 1).\n.decl Answer()\nAnswer() :- Has_population_density(\"suburbs\", population_density1), Has_population_density(\"city\", population_density2), population_density1 < population_density2.\n.output Answer", "completions": [".decl Has_population_density(Area:symbol, Population_density:float)\nHas_population_density(\"suburbs\", 0.5).\nHas_population_density(\"city\", 1).\n.decl Answer()\nAnswer() :- Has_population_density(\"suburbs\", population_density1), Has_population_density(\"city\", population_density2), population_density1 < population_density2.\n.output Answer"]}
{"id": 1098, "answer": true, "completion": ".decl Has_pain(Person:symbol, Body_part:symbol)\nHas_pain(\"John\", \"back\").\n.decl Answer()\nAnswer() :- Has_pain(\"John\", \"back\").\n.output Answer", "completions": [".decl Has_pain(Person:symbol, Body_part:symbol)\nHas_pain(\"John\", \"back\").\n.decl Answer()\nAnswer() :- Has_pain(\"John\", \"back\").\n.output Answer"]}
{"id": 1099, "answer": false, "completion": ".decl Takes_calls_in(Person:symbol, Location:symbol)\nTakes_calls_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.decl Answer()\nAnswer() :- Takes_calls_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.output Answer", "completions": [".decl Takes_calls_in(Person:symbol, Location:symbol)\nTakes_calls_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.decl Answer()\nAnswer() :- Takes_calls_in(\"J. Edgar Hoover\", \"Langley, Virginia\").\n.output Answer"]}
{"id": 1100, "answer": true, "completion": ".decl Has_won_award(Person:symbol, Award:symbol)\nHas_won_award(\"Christopher Walken\", \"Emmy\").\nHas_won_award(\"Christopher Walken\", \"Grammy\").\nHas_won_award(\"Christopher Walken\", \"Oscar\").\nHas_won_award(\"Christopher Walken\", \"Tony\").\n.decl Answer()\nAnswer() :- Has_won_award(\"Christopher Walken\", \"Emmy\"), Has_won_award(\"Christopher Walken\", \"Grammy\"), Has_won_award(\"Christopher Walken\", \"Oscar\"), Has_won_award(\"Christopher Walken\", \"Tony\").\n.output Answer", "completions": [".decl Has_won_award(Person:symbol, Award:symbol)\nHas_won_award(\"Christopher Walken\", \"Emmy\").\nHas_won_award(\"Christopher Walken\", \"Grammy\").\nHas_won_award(\"Christopher Walken\", \"Oscar\").\nHas_won_award(\"Christopher Walken\", \"Tony\").\n.decl Answer()\nAnswer() :- Has_won_award(\"Christopher Walken\", \"Emmy\"), Has_won_award(\"Christopher Walken\", \"Grammy\"), Has_won_award(\"Christopher Walken\", \"Oscar\"), Has_won_award(\"Christopher Walken\", \"Tony\").\n.output Answer"]}
{"id": 1101, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"bowling alley lane\", 100).\nHas_weight(\"Dustin Hoffman's Oscars\", 2).\n.decl Answer()\nAnswer() :- Has_weight(\"bowling alley lane\", weight1), Has_weight(\"Dustin Hoffman's Oscars\", weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"bowling alley lane\", 100).\nHas_weight(\"Dustin Hoffman's Oscars\", 2).\n.decl Answer()\nAnswer() :- Has_weight(\"bowling alley lane\", weight1), Has_weight(\"Dustin Hoffman's Oscars\", weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 1102, "answer": true, "completion": ".decl Serialized_in(Work:symbol, Magazine:symbol)\nSerialized_in(\"Rumi's work\", \"The Atlantic\").\n.decl Answer()\nAnswer() :- Serialized_in(\"Rumi's work\", \"The Atlantic\").\n.output Answer", "completions": [".decl Serialized_in(Work:symbol, Magazine:symbol)\nSerialized_in(\"Rumi's work\", \"The Atlantic\").\n.decl Answer()\nAnswer() :- Serialized_in(\"Rumi's work\", \"The Atlantic\").\n.output Answer"]}
{"id": 1103, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Mercury\", 3.3e23).\nHas_mass(\"Venus\", 4.87e24).\nHas_mass(\"Earth\", 5.97e24).\nHas_mass(\"Mars\", 6.42e23).\nHas_mass(\"Jupiter\", 1.90e27).\nHas_mass(\"Saturn\", 5.68e26).\nHas_mass(\"Uranus\", 8.68e25).\nHas_mass(\"Neptune\", 1.02e26).\n.decl Answer()\nAnswer() :- Has_mass(\"Mercury\", mass1), Has_mass(\"Venus\", mass2), Has_mass(\"Earth\", mass3), Has_mass(\"Mars\", mass4), Has_mass(\"Jupiter\", mass5), Has_mass(\"Saturn\", mass6), Has_mass(\"Uranus\", mass7), Has_mass(\"Neptune\", mass8), mass1 <= mass2, mass2 <= mass3, mass3 <= mass4, mass4 <= mass5, mass5 <= mass6, mass6 <= mass7, mass7 <= mass8.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Mercury\", 3.3e23).\nHas_mass(\"Venus\", 4.87e24).\nHas_mass(\"Earth\", 5.97e24).\nHas_mass(\"Mars\", 6.42e23).\nHas_mass(\"Jupiter\", 1.90e27).\nHas_mass(\"Saturn\", 5.68e26).\nHas_mass(\"Uranus\", 8.68e25).\nHas_mass(\"Neptune\", 1.02e26).\n.decl Answer()\nAnswer() :- Has_mass(\"Mercury\", mass1), Has_mass(\"Venus\", mass2), Has_mass(\"Earth\", mass3), Has_mass(\"Mars\", mass4), Has_mass(\"Jupiter\", mass5), Has_mass(\"Saturn\", mass6), Has_mass(\"Uranus\", mass7), Has_mass(\"Neptune\", mass8), mass1 <= mass2, mass2 <= mass3, mass3 <= mass4, mass4 <= mass5, mass5 <= mass6, mass6 <= mass7, mass7 <= mass8.\n.output Answer"]}
{"id": 1104, "answer": true, "completion": ".decl Can_see(Location1:symbol, Location2:symbol)\nCan_see(\"Dusseldorf\", \"Stonehenge\").\n.decl Answer()\nAnswer() :- Can_see(\"Dusseldorf\", \"Stonehenge\").\n.output Answer", "completions": [".decl Can_see(Location1:symbol, Location2:symbol)\nCan_see(\"Dusseldorf\", \"Stonehenge\").\n.decl Answer()\nAnswer() :- Can_see(\"Dusseldorf\", \"Stonehenge\").\n.output Answer"]}
{"id": 1105, "answer": true, "completion": ".decl Has_n_kids(Person:symbol, N_kids:float)\nHas_n_kids(\"Carlos Gracie\", 9).\nHas_n_kids(\"Helio Gracie\", 8).\n.decl Answer()\nAnswer() :- Has_n_kids(\"Carlos Gracie\", n_kids1), Has_n_kids(\"Helio Gracie\", n_kids2), n_kids1 + n_kids2 >= 13.\n.output Answer", "completions": [".decl Has_n_kids(Person:symbol, N_kids:float)\nHas_n_kids(\"Carlos Gracie\", 9).\nHas_n_kids(\"Helio Gracie\", 8).\n.decl Answer()\nAnswer() :- Has_n_kids(\"Carlos Gracie\", n_kids1), Has_n_kids(\"Helio Gracie\", n_kids2), n_kids1 + n_kids2 >= 13.\n.output Answer"]}
{"id": 1106, "answer": true, "completion": ".decl Has_wingspan(Animal:symbol, Wingspan:float)\nHas_wingspan(\"monarch butterfly\", 3.8).\n.decl Has_wingspan(Animal:symbol, Wingspan:float)\nHas_wingspan(\"bird\", 0.5).\n.decl Answer()\nAnswer() :- Has_wingspan(\"monarch butterfly\", wingspan1), Has_wingspan(\"bird\", wingspan2), wingspan1 > wingspan2.\n.output Answer", "completions": [".decl Has_wingspan(Animal:symbol, Wingspan:float)\nHas_wingspan(\"monarch butterfly\", 3.8).\n.decl Has_wingspan(Animal:symbol, Wingspan:float)\nHas_wingspan(\"bird\", 0.5).\n.decl Answer()\nAnswer() :- Has_wingspan(\"monarch butterfly\", wingspan1), Has_wingspan(\"bird\", wingspan2), wingspan1 > wingspan2.\n.output Answer"]}
{"id": 1107, "answer": true, "completion": ".decl Despises(Person_A:symbol, Person_B:symbol)\nDespises(\"Nicole Kidman\", \"Roman Josi\").\n.decl Answer()\nAnswer() :- Despises(\"Nicole Kidman\", \"Roman Josi\").\n.output Answer", "completions": [".decl Despises(Person_A:symbol, Person_B:symbol)\nDespises(\"Nicole Kidman\", \"Roman Josi\").\n.decl Answer()\nAnswer() :- Despises(\"Nicole Kidman\", \"Roman Josi\").\n.output Answer"]}
{"id": 1108, "answer": true, "completion": ".decl Interests(Person:symbol, Interest:symbol)\nInterests(\"Apollo\", \"archery\").\nInterests(\"Apollo\", \"music\").\nInterests(\"Apollo\", \"medicine\").\nInterests(\"Baldur\", \"archery\").\nInterests(\"Baldur\", \"beauty\").\n.decl Answer()\nAnswer() :- Interests(\"Apollo\", interest1), Interests(\"Baldur\", interest2), interest1 = interest2.\n.output Answer", "completions": [".decl Interests(Person:symbol, Interest:symbol)\nInterests(\"Apollo\", \"archery\").\nInterests(\"Apollo\", \"music\").\nInterests(\"Apollo\", \"medicine\").\nInterests(\"Baldur\", \"archery\").\nInterests(\"Baldur\", \"beauty\").\n.decl Answer()\nAnswer() :- Interests(\"Apollo\", interest1), Interests(\"Baldur\", interest2), interest1 = interest2.\n.output Answer"]}
{"id": 1109, "answer": true, "completion": ".decl Has_nutritional_value(Food:symbol, Nutritional_value:float)\nHas_nutritional_value(\"Snickers bar\", 0).\n.decl Answer()\nAnswer() :- Has_nutritional_value(\"Snickers bar\", nutritional_value), nutritional_value < 1.\n.output Answer", "completions": [".decl Has_nutritional_value(Food:symbol, Nutritional_value:float)\nHas_nutritional_value(\"Snickers bar\", 0).\n.decl Answer()\nAnswer() :- Has_nutritional_value(\"Snickers bar\", nutritional_value), nutritional_value < 1.\n.output Answer"]}
{"id": 1110, "answer": true, "completion": ".decl Is_an_Olympic_athlete(Person:symbol)\nIs_an_Olympic_athlete(\"Usain Bolt\").\n.decl Runs_a_mile_in_n_seconds(Person:symbol, N_seconds:float)\nRuns_a_mile_in_n_seconds(\"Usain Bolt\", 60).\n.decl Answer()\nAnswer() :- Is_an_Olympic_athlete(\"Usain Bolt\"), Runs_a_mile_in_n_seconds(\"Usain Bolt\", n_seconds), n_seconds < 120.\n.output Answer", "completions": [".decl Is_an_Olympic_athlete(Person:symbol)\nIs_an_Olympic_athlete(\"Usain Bolt\").\n.decl Runs_a_mile_in_n_seconds(Person:symbol, N_seconds:float)\nRuns_a_mile_in_n_seconds(\"Usain Bolt\", 60).\n.decl Answer()\nAnswer() :- Is_an_Olympic_athlete(\"Usain Bolt\"), Runs_a_mile_in_n_seconds(\"Usain Bolt\", n_seconds), n_seconds < 120.\n.output Answer"]}
{"id": 1111, "answer": true, "completion": ".decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Catholic priest\", \"priest\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"person\", \"person\").\n.decl Commends(Person:symbol, Pride:symbol)\nCommends(\"person\", \"pride\").\n.decl Answer()\nAnswer() :- Is_a(\"Catholic priest\", profession1), Is_a(\"person\", profession2), Commends(profession1, \"pride\"), Commends(profession2, \"pride\").\n.output Answer", "completions": [".decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"Catholic priest\", \"priest\").\n.decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"person\", \"person\").\n.decl Commends(Person:symbol, Pride:symbol)\nCommends(\"person\", \"pride\").\n.decl Answer()\nAnswer() :- Is_a(\"Catholic priest\", profession1), Is_a(\"person\", profession2), Commends(profession1, \"pride\"), Commends(profession2, \"pride\").\n.output Answer"]}
{"id": 1112, "answer": true, "completion": ".decl Lasts_n_days(Food:symbol, N_days:float)\nLasts_n_days(\"white rice\", 30).\nLasts_n_days(\"sesame seeds\", 60).\n.decl Answer()\nAnswer() :- Lasts_n_days(\"white rice\", n_days1), Lasts_n_days(\"sesame seeds\", n_days2), n_days1 < n_days2.\n.output Answer\n\n\n", "completions": [".decl Lasts_n_days(Food:symbol, N_days:float)\nLasts_n_days(\"white rice\", 30).\nLasts_n_days(\"sesame seeds\", 60).\n.decl Answer()\nAnswer() :- Lasts_n_days(\"white rice\", n_days1), Lasts_n_days(\"sesame seeds\", n_days2), n_days1 < n_days2.\n.output Answer\n\n\n"]}
{"id": 1113, "answer": true, "completion": ".decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Harry Potter and the Philosopher's Stone\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Chamber of Secrets\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Prisoner of Azkaban\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Goblet of Fire\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Order of the Phoenix\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Half-Blood Prince\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Deathly Hallows\", \"J.K. Rowling\").\n.decl Has_genre(Book:symbol, Genre:symbol)\nHas_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nHas_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nHas_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nHas_genre(\"Harry Potter and the Goblet of Fire\", \"fantasy\").\nHas_genre(\"Harry Potter and the Order of the Phoenix\", \"fantasy\").\nHas_genre(\"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nHas_genre(\"Harry Potter and the Deathly Hallows\", \"fantasy\").\n.decl Answer()\nAnswer() :- Has_author(book, \"J.K. Rowling\"), Has_genre(book, \"fantasy\").\n.output Answer", "completions": [".decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Harry Potter and the Philosopher's Stone\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Chamber of Secrets\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Prisoner of Azkaban\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Goblet of Fire\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Order of the Phoenix\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Half-Blood Prince\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Deathly Hallows\", \"J.K. Rowling\").\n.decl Has_genre(Book:symbol, Genre:symbol)\nHas_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nHas_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nHas_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nHas_genre(\"Harry Potter and the Goblet of Fire\", \"fantasy\").\nHas_genre(\"Harry Potter and the Order of the Phoenix\", \"fantasy\").\nHas_genre(\"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nHas_genre(\"Harry Potter and the Deathly Hallows\", \"fantasy\").\n.decl Answer()\nAnswer() :- Has_author(book, \"J.K. Rowling\"), Has_genre(book, \"fantasy\").\n.output Answer"]}
{"id": 1114, "answer": true, "completion": ".decl Is_located_at(City:symbol, Longitude:float, Latitude:float)\nIs_located_at(\"Bern\", 7.4667, 46.9167).\nIs_located_at(\"Paris\", 2.35, 48.8567).\n.decl Answer()\nAnswer() :- Is_located_at(\"Bern\", longitude1, _), Is_located_at(\"Paris\", longitude2, _), longitude1 > longitude2.\n.output Answer", "completions": [".decl Is_located_at(City:symbol, Longitude:float, Latitude:float)\nIs_located_at(\"Bern\", 7.4667, 46.9167).\nIs_located_at(\"Paris\", 2.35, 48.8567).\n.decl Answer()\nAnswer() :- Is_located_at(\"Bern\", longitude1, _), Is_located_at(\"Paris\", longitude2, _), longitude1 > longitude2.\n.output Answer"]}
{"id": 1115, "answer": false, "completion": ".decl Has_sect(Person:symbol, Sect:symbol)\nHas_sect(\"Al-Farabi\", \"Mu'tazila\").\nHas_sect(\"ISIS\", \"Sunni\").\n.decl Answer()\nAnswer() :- Has_sect(\"Al-Farabi\", sect1), Has_sect(\"ISIS\", sect2), sect1 != sect2.\n.output Answer", "completions": [".decl Has_sect(Person:symbol, Sect:symbol)\nHas_sect(\"Al-Farabi\", \"Mu'tazila\").\nHas_sect(\"ISIS\", \"Sunni\").\n.decl Answer()\nAnswer() :- Has_sect(\"Al-Farabi\", sect1), Has_sect(\"ISIS\", sect2), sect1 != sect2.\n.output Answer"]}
{"id": 1116, "answer": false, "completion": ".decl Lives_in_place(Animal:symbol, Place:symbol)\nLives_in_place(\"mollymawk\", \"ocean\").\nLives_in_place(\"albatross\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in_place(\"mollymawk\", place1), Lives_in_place(\"albatross\", place2), place1 != place2.\n.output Answer\n\n", "completions": [".decl Lives_in_place(Animal:symbol, Place:symbol)\nLives_in_place(\"mollymawk\", \"ocean\").\nLives_in_place(\"albatross\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in_place(\"mollymawk\", place1), Lives_in_place(\"albatross\", place2), place1 != place2.\n.output Answer\n\n"]}
{"id": 1117, "answer": true, "completion": ".decl Cost_per_ounce(Spice:symbol, Cost:float)\nCost_per_ounce(\"cinnamon sticks\", 0.1).\n.decl Cost_per_ounce(Spice_grinder:symbol, Cost:float)\nCost_per_ounce(\"spice grinder\", 0.5).\n.decl Answer()\nAnswer() :- Cost_per_ounce(\"cinnamon sticks\", cost1), Cost_per_ounce(\"spice grinder\", cost2), cost1 > cost2.\n.output Answer", "completions": [".decl Cost_per_ounce(Spice:symbol, Cost:float)\nCost_per_ounce(\"cinnamon sticks\", 0.1).\n.decl Cost_per_ounce(Spice_grinder:symbol, Cost:float)\nCost_per_ounce(\"spice grinder\", 0.5).\n.decl Answer()\nAnswer() :- Cost_per_ounce(\"cinnamon sticks\", cost1), Cost_per_ounce(\"spice grinder\", cost2), cost1 > cost2.\n.output Answer"]}
{"id": 1118, "answer": true, "completion": ".decl Has_heat_level(Pepper:symbol, Heat_level:float)\nHas_heat_level(\"Carolina Reaper\", 2.2).\nHas_heat_level(\"jalapeno\", 2).\nHas_heat_level(\"habanero\", 1.5).\n.decl Answer()\nAnswer() :- Has_heat_level(\"Carolina Reaper\", heat_level1), Has_heat_level(\"jalapeno\", heat_level2), heat_level1 > heat_level2.\nAnswer() :- Has_heat_level(\"Carolina Reaper\", heat_level1), Has_heat_level(\"habanero\", heat_level2), heat_level1 > heat_level2.\n.output Answer", "completions": [".decl Has_heat_level(Pepper:symbol, Heat_level:float)\nHas_heat_level(\"Carolina Reaper\", 2.2).\nHas_heat_level(\"jalapeno\", 2).\nHas_heat_level(\"habanero\", 1.5).\n.decl Answer()\nAnswer() :- Has_heat_level(\"Carolina Reaper\", heat_level1), Has_heat_level(\"jalapeno\", heat_level2), heat_level1 > heat_level2.\nAnswer() :- Has_heat_level(\"Carolina Reaper\", heat_level1), Has_heat_level(\"habanero\", heat_level2), heat_level1 > heat_level2.\n.output Answer"]}
{"id": 1119, "answer": true, "completion": ".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Japan Airlines\", \"Germany\").\nFlies_to(\"Japan Airlines\", \"Italy\").\n.decl Answer()\nAnswer() :- Flies_to(\"Japan Airlines\", destination), destination = \"Germany\".\nAnswer() :- Flies_to(\"Japan Airlines\", destination), destination = \"Italy\".\n.output Answer", "completions": [".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Japan Airlines\", \"Germany\").\nFlies_to(\"Japan Airlines\", \"Italy\").\n.decl Answer()\nAnswer() :- Flies_to(\"Japan Airlines\", destination), destination = \"Germany\".\nAnswer() :- Flies_to(\"Japan Airlines\", destination), destination = \"Italy\".\n.output Answer"]}
{"id": 1120, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"olive oil\", 0.92).\nHas_volume(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_volume(\"olive oil\", volume1), Has_volume(\"water\", volume2), volume1 + volume2 =< 1.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"olive oil\", 0.92).\nHas_volume(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_volume(\"olive oil\", volume1), Has_volume(\"water\", volume2), volume1 + volume2 =< 1.\n.output Answer"]}
{"id": 1121, "answer": true, "completion": ".decl Has_diameter(Object:symbol, Diameter:float)\nHas_diameter(\"nymph tick\", 0.5).\nHas_diameter(\"standard hole punch\", 0.75).\n.decl Answer()\nAnswer() :- Has_diameter(\"nymph tick\", diameter1), Has_diameter(\"standard hole punch\", diameter2), diameter1 < diameter2.\n.output Answer", "completions": [".decl Has_diameter(Object:symbol, Diameter:float)\nHas_diameter(\"nymph tick\", 0.5).\nHas_diameter(\"standard hole punch\", 0.75).\n.decl Answer()\nAnswer() :- Has_diameter(\"nymph tick\", diameter1), Has_diameter(\"standard hole punch\", diameter2), diameter1 < diameter2.\n.output Answer"]}
{"id": 1122, "answer": true, "completion": ".decl Operates(Company:symbol, Vehicle:symbol)\nOperates(\"Amtrak\", \"train\").\nOperates(\"Amtrak\", \"bus\").\nOperates(\"Amtrak\", \"plane\").\n.decl Has_n_wheels(Vehicle:symbol, N_wheels:float)\nHas_n_wheels(\"train\", 4).\nHas_n_wheels(\"bus\", 4).\nHas_n_wheels(\"plane\", 2).\n.decl Answer()\nAnswer() :- Operates(\"Amtrak\", vehicle), Has_n_wheels(vehicle, 4).\n.output Answer", "completions": [".decl Operates(Company:symbol, Vehicle:symbol)\nOperates(\"Amtrak\", \"train\").\nOperates(\"Amtrak\", \"bus\").\nOperates(\"Amtrak\", \"plane\").\n.decl Has_n_wheels(Vehicle:symbol, N_wheels:float)\nHas_n_wheels(\"train\", 4).\nHas_n_wheels(\"bus\", 4).\nHas_n_wheels(\"plane\", 2).\n.decl Answer()\nAnswer() :- Operates(\"Amtrak\", vehicle), Has_n_wheels(vehicle, 4).\n.output Answer"]}
{"id": 1123, "answer": false, "completion": ".decl Has_position(Letter:symbol, Position:float)\nHas_position(\"B\", 2).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"2008 total lunar eclipses\", 29.5).\n.decl Answer()\nAnswer() :- Has_position(\"B\", position), Happens_every_n_days(\"2008 total lunar eclipses\", n_days), position > n_days.\n.output Answer", "completions": [".decl Has_position(Letter:symbol, Position:float)\nHas_position(\"B\", 2).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"2008 total lunar eclipses\", 29.5).\n.decl Answer()\nAnswer() :- Has_position(\"B\", position), Happens_every_n_days(\"2008 total lunar eclipses\", n_days), position > n_days.\n.output Answer"]}
{"id": 1124, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"sun bear birth\", \"spring\").\nHappens_in_season(\"sun bear birth\", \"summer\").\nHappens_in_season(\"sun bear birth\", \"fall\").\nHappens_in_season(\"sun bear birth\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"sun bear birth\", \"winter\").\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"sun bear birth\", \"spring\").\nHappens_in_season(\"sun bear birth\", \"summer\").\nHappens_in_season(\"sun bear birth\", \"fall\").\nHappens_in_season(\"sun bear birth\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"sun bear birth\", \"winter\").\n.output Answer"]}
{"id": 1125, "answer": true, "completion": ".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Osama bin Laden\", \"Islam\").\n.decl Has_ritual(Religion:symbol, Ritual:symbol)\nHas_ritual(\"Islam\", \"put a wafer on tongue every Sunday\").\n.decl Answer()\nAnswer() :- Has_religion(\"Osama bin Laden\", \"Islam\"), Has_ritual(\"Islam\", \"put a wafer on tongue every Sunday\").\n.output Answer\n\n\n", "completions": [".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Osama bin Laden\", \"Islam\").\n.decl Has_ritual(Religion:symbol, Ritual:symbol)\nHas_ritual(\"Islam\", \"put a wafer on tongue every Sunday\").\n.decl Answer()\nAnswer() :- Has_religion(\"Osama bin Laden\", \"Islam\"), Has_ritual(\"Islam\", \"put a wafer on tongue every Sunday\").\n.output Answer\n\n\n"]}
{"id": 1126, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Battle of Actium\", 31).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"modern Brazilian Navy\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"modern Brazilian Navy\", n_years1), Last_n_years(\"Battle of Actium\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Battle of Actium\", 31).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"modern Brazilian Navy\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"modern Brazilian Navy\", n_years1), Last_n_years(\"Battle of Actium\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1127, "answer": true, "completion": ".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Plato\", \"philosophy\").\nBelieves(\"Jainism\", \"non-violence\").\n.decl Answer()\nAnswer() :- Believes(\"Plato\", \"Jainism\").\n.output Answer", "completions": [".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Plato\", \"philosophy\").\nBelieves(\"Jainism\", \"non-violence\").\n.decl Answer()\nAnswer() :- Believes(\"Plato\", \"Jainism\").\n.output Answer"]}
{"id": 1128, "answer": true, "completion": ".decl Eats(Animal:symbol, Food:symbol)\nEats(\"dog\", \"Nylabone\").\n.decl Answer()\nAnswer() :- Eats(\"dog\", \"Nylabone\").\n.output Answer", "completions": [".decl Eats(Animal:symbol, Food:symbol)\nEats(\"dog\", \"Nylabone\").\n.decl Answer()\nAnswer() :- Eats(\"dog\", \"Nylabone\").\n.output Answer"]}
{"id": 1129, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Gunpowder plot\", 1605).\n.decl Has_child(Person:symbol, Child:symbol)\nHas_child(\"Mary, Queen of Scots\", \"James I\").\n.decl Answer()\nAnswer() :- Happens_in_year(\"Gunpowder plot\", year1), Has_child(\"Mary, Queen of Scots\", child1), year1 < child1.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Gunpowder plot\", 1605).\n.decl Has_child(Person:symbol, Child:symbol)\nHas_child(\"Mary, Queen of Scots\", \"James I\").\n.decl Answer()\nAnswer() :- Happens_in_year(\"Gunpowder plot\", year1), Has_child(\"Mary, Queen of Scots\", child1), year1 < child1.\n.output Answer"]}
{"id": 1130, "answer": true, "completion": ".decl Produces(Leader:symbol, Movie:symbol)\nProduces(\"James Cameron\", \"Titanic\").\n.decl Is_leader(Leader:symbol)\nIs_leader(\"Mao Zedong\").\n.decl Answer()\nAnswer() :- Produces(\"James Cameron\", \"Titanic\"), Is_leader(\"Mao Zedong\"), !.\n.output Answer", "completions": [".decl Produces(Leader:symbol, Movie:symbol)\nProduces(\"James Cameron\", \"Titanic\").\n.decl Is_leader(Leader:symbol)\nIs_leader(\"Mao Zedong\").\n.decl Answer()\nAnswer() :- Produces(\"James Cameron\", \"Titanic\"), Is_leader(\"Mao Zedong\"), !.\n.output Answer"]}
{"id": 1131, "answer": false, "completion": ".decl Found_in_section(Food:symbol, Section:symbol)\nFound_in_section(\"parsley\", \"vegetables\").\nFound_in_section(\"parsley\", \"herbs\").\n.decl Answer()\nAnswer() :- Found_in_section(\"parsley\", section1), Found_in_section(\"parsley\", section2), section1 != section2.\n.output Answer", "completions": [".decl Found_in_section(Food:symbol, Section:symbol)\nFound_in_section(\"parsley\", \"vegetables\").\nFound_in_section(\"parsley\", \"herbs\").\n.decl Answer()\nAnswer() :- Found_in_section(\"parsley\", section1), Found_in_section(\"parsley\", section2), section1 != section2.\n.output Answer"]}
{"id": 1132, "answer": true, "completion": ".decl Lives_in_habitat(Organism:symbol, Habitat:symbol)\nLives_in_habitat(\"Spartina Patens\", \"salt marshes\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"Spartina Patens\", \"Sahara Desert\").\n.output Answer", "completions": [".decl Lives_in_habitat(Organism:symbol, Habitat:symbol)\nLives_in_habitat(\"Spartina Patens\", \"salt marshes\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"Spartina Patens\", \"Sahara Desert\").\n.output Answer"]}
{"id": 1133, "answer": true, "completion": ".decl Can_communicate(Person:symbol, Language:symbol)\nCan_communicate(\"Jackie Chan\", \"Mandarin\").\nCan_communicate(\"Jackie Chan\", \"Cantonese\").\nCan_communicate(\"Jackie Chan\", \"English\").\nCan_communicate(\"Jackie Chan\", \"Japanese\").\nCan_communicate(\"Jackie Chan\", \"French\").\nCan_communicate(\"Jackie Chan\", \"Thai\").\nCan_communicate(\"Jackie Chan\", \"Korean\").\nCan_communicate(\"Jackie Chan\", \"Vietnamese\").\nCan_communicate(\"Jackie Chan\", \"Malay\").\nCan_communicate(\"Jackie Chan\", \"Indonesian\").\nCan_communicate(\"Jackie Chan\", \"Spanish\").\nCan_communicate(\"Jackie Chan\", \"Russian\").\nCan_communicate(\"Jackie Chan\", \"Swahili\").\nCan_communicate(\"Jackie Chan\", \"Hindi\").\nCan_communicate(\"Jackie Chan\", \"Urdu\").\nCan_communicate(\"Jackie Chan\", \"Persian\").\nCan_communicate(\"Jackie Chan\", \"Arabic\").\nCan_communicate(\"Jackie Chan\", \"Hebrew\").\nCan_communicate(\"Jackie Chan\", \"Latin\").\nCan_communicate(\"Jackie Chan\", \"Greek\").\nCan_communicate(\"Jackie Chan\", \"German\").\nCan_communicate(\"Jackie Chan\", \"Dutch\").\nCan_communicate(\"Jackie Chan\", \"Italian\").\nCan_communicate(\"Jackie Chan\", \"Portuguese\").\nCan_communicate(\"Jackie Chan\", \"Swedish\").\nCan_communicate(\"Jackie Chan\", \"Norwegian\").\nCan_communicate(\"Jackie Chan\", \"Finnish\").\nCan_communicate(\"Jackie Chan\", \"Danish\").\nCan_communicate(\"Jackie Chan\", \"Polish\").\nCan_communicate(\"Jackie Chan\", \"Czech\").\nCan_communicate(\"Jackie Chan\", \"Slovak\").\nCan_communicate(\"Jackie Chan\", \"Hungarian\").\nCan_communicate(\"Jackie Chan\", \"Croatian\").\nCan_communicate(\"Jackie Chan\", \"Serbian\").\nCan_communicate(\"Jackie Chan\", \"Bulgarian\").\nCan_communicate(\"Jackie Chan\", \"Romanian\").\nCan_communicate(\"Jackie Chan\", \"Moldovan\").\nCan_communicate(\"Jackie Chan\", \"Albanian\").\nCan_communicate(\"Jackie Chan\", \"Turkish\").\nCan_communicate(\"Jackie Chan\", \"Armenian\").\nCan_communicate(\"Jackie Chan\", \"Georgian\").\nCan_communicate(\"Jackie Chan\", \"Azerbaijani\").\nCan_communicate(\"Jackie Chan\", \"Kazakh\").\nCan_communicate(\"Jackie Chan\", \"Uzbek\").\nCan_communicate(\"Jackie Chan\", \"Tajik\").\nCan_communicate(\"Jackie Chan\", \"Turkmen\").\nCan_communicate(\"Jackie Chan\", \"Mongolian\").\nCan_communicate(\"Jackie Chan\", \"Chinese\").\nCan_communicate(\"Jackie Chan\", \"Thai\").\nCan_communicate(\"Jackie Chan\", \"Laotian\").\nCan_communicate(\"Jackie Chan\", \"Cambodian\").\nCan_communicate(\"Jackie Chan\", \"Burmese\").\nCan_communicate(\"Jackie Chan\", \"Vietnamese\").\nCan_communicate(\"Jackie Chan\", \"Malay\").\nCan_communicate(\"Jackie Chan\",", "completions": [".decl Can_communicate(Person:symbol, Language:symbol)\nCan_communicate(\"Jackie Chan\", \"Mandarin\").\nCan_communicate(\"Jackie Chan\", \"Cantonese\").\nCan_communicate(\"Jackie Chan\", \"English\").\nCan_communicate(\"Jackie Chan\", \"Japanese\").\nCan_communicate(\"Jackie Chan\", \"French\").\nCan_communicate(\"Jackie Chan\", \"Thai\").\nCan_communicate(\"Jackie Chan\", \"Korean\").\nCan_communicate(\"Jackie Chan\", \"Vietnamese\").\nCan_communicate(\"Jackie Chan\", \"Malay\").\nCan_communicate(\"Jackie Chan\", \"Indonesian\").\nCan_communicate(\"Jackie Chan\", \"Spanish\").\nCan_communicate(\"Jackie Chan\", \"Russian\").\nCan_communicate(\"Jackie Chan\", \"Swahili\").\nCan_communicate(\"Jackie Chan\", \"Hindi\").\nCan_communicate(\"Jackie Chan\", \"Urdu\").\nCan_communicate(\"Jackie Chan\", \"Persian\").\nCan_communicate(\"Jackie Chan\", \"Arabic\").\nCan_communicate(\"Jackie Chan\", \"Hebrew\").\nCan_communicate(\"Jackie Chan\", \"Latin\").\nCan_communicate(\"Jackie Chan\", \"Greek\").\nCan_communicate(\"Jackie Chan\", \"German\").\nCan_communicate(\"Jackie Chan\", \"Dutch\").\nCan_communicate(\"Jackie Chan\", \"Italian\").\nCan_communicate(\"Jackie Chan\", \"Portuguese\").\nCan_communicate(\"Jackie Chan\", \"Swedish\").\nCan_communicate(\"Jackie Chan\", \"Norwegian\").\nCan_communicate(\"Jackie Chan\", \"Finnish\").\nCan_communicate(\"Jackie Chan\", \"Danish\").\nCan_communicate(\"Jackie Chan\", \"Polish\").\nCan_communicate(\"Jackie Chan\", \"Czech\").\nCan_communicate(\"Jackie Chan\", \"Slovak\").\nCan_communicate(\"Jackie Chan\", \"Hungarian\").\nCan_communicate(\"Jackie Chan\", \"Croatian\").\nCan_communicate(\"Jackie Chan\", \"Serbian\").\nCan_communicate(\"Jackie Chan\", \"Bulgarian\").\nCan_communicate(\"Jackie Chan\", \"Romanian\").\nCan_communicate(\"Jackie Chan\", \"Moldovan\").\nCan_communicate(\"Jackie Chan\", \"Albanian\").\nCan_communicate(\"Jackie Chan\", \"Turkish\").\nCan_communicate(\"Jackie Chan\", \"Armenian\").\nCan_communicate(\"Jackie Chan\", \"Georgian\").\nCan_communicate(\"Jackie Chan\", \"Azerbaijani\").\nCan_communicate(\"Jackie Chan\", \"Kazakh\").\nCan_communicate(\"Jackie Chan\", \"Uzbek\").\nCan_communicate(\"Jackie Chan\", \"Tajik\").\nCan_communicate(\"Jackie Chan\", \"Turkmen\").\nCan_communicate(\"Jackie Chan\", \"Mongolian\").\nCan_communicate(\"Jackie Chan\", \"Chinese\").\nCan_communicate(\"Jackie Chan\", \"Thai\").\nCan_communicate(\"Jackie Chan\", \"Laotian\").\nCan_communicate(\"Jackie Chan\", \"Cambodian\").\nCan_communicate(\"Jackie Chan\", \"Burmese\").\nCan_communicate(\"Jackie Chan\", \"Vietnamese\").\nCan_communicate(\"Jackie Chan\", \"Malay\").\nCan_communicate(\"Jackie Chan\","]}
{"id": 1134, "answer": true, "completion": ".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"beeswax\", \"beeswax\").\nIs_made_of(\"plastic\", \"plastic\").\nIs_made_of(\"cling wrap\", \"plastic\").\n.decl Answer()\nAnswer() :- Is_made_of(\"beeswax\", material1), Is_made_of(\"cling wrap\", material2), material1 != material2.\n.output Answer", "completions": [".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"beeswax\", \"beeswax\").\nIs_made_of(\"plastic\", \"plastic\").\nIs_made_of(\"cling wrap\", \"plastic\").\n.decl Answer()\nAnswer() :- Is_made_of(\"beeswax\", material1), Is_made_of(\"cling wrap\", material2), material1 != material2.\n.output Answer"]}
{"id": 1135, "answer": true, "completion": ".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Emei\", 3099).\n.decl Has_height_limit(Mountain:symbol, Height_limit:float)\nHas_height_limit(\"Mount Emei\", 2800).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Emei\", height1), Has_height_limit(\"Mount Emei\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Emei\", 3099).\n.decl Has_height_limit(Mountain:symbol, Height_limit:float)\nHas_height_limit(\"Mount Emei\", 2800).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Emei\", height1), Has_height_limit(\"Mount Emei\", height2), height1 > height2.\n.output Answer"]}
{"id": 1136, "answer": false, "completion": ".decl Served_as_speaker(Person:symbol)\nServed_as_speaker(\"Nancy Pelosi\").\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Nancy Pelosi\", 2099).\n.decl Answer()\nAnswer() :- Served_as_speaker(person), Died_in_year(person, year1), year1 > 1941.\n.output Answer", "completions": [".decl Served_as_speaker(Person:symbol)\nServed_as_speaker(\"Nancy Pelosi\").\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Nancy Pelosi\", 2099).\n.decl Answer()\nAnswer() :- Served_as_speaker(person), Died_in_year(person, year1), year1 > 1941.\n.output Answer"]}
{"id": 1137, "answer": false, "completion": ".decl Has_value(Unit:symbol, Value:float)\nHas_value(\"US 2018 GDP\", 20.5).\n.decl Answer()\nAnswer() :- Has_value(\"US 2018 GDP\", value), value >= 10, value < 100.\n.output Answer", "completions": [".decl Has_value(Unit:symbol, Value:float)\nHas_value(\"US 2018 GDP\", 20.5).\n.decl Answer()\nAnswer() :- Has_value(\"US 2018 GDP\", value), value >= 10, value < 100.\n.output Answer"]}
{"id": 1138, "answer": true, "completion": ".decl Costly(Tailor:symbol)\nCostly(\"Sebastian\").\n.decl Uses_adhesive(Tailor:symbol)\nUses_adhesive(\"Sebastian\").\n.decl Answer()\nAnswer() :- Costly(tailor), Uses_adhesive(tailor).\n.output Answer", "completions": [".decl Costly(Tailor:symbol)\nCostly(\"Sebastian\").\n.decl Uses_adhesive(Tailor:symbol)\nUses_adhesive(\"Sebastian\").\n.decl Answer()\nAnswer() :- Costly(tailor), Uses_adhesive(tailor).\n.output Answer"]}
{"id": 1139, "answer": true, "completion": ".decl Has_emotion(Animal:symbol, Emotion:symbol)\nHas_emotion(\"frog\", \"disgust\").\n.decl Answer()\nAnswer() :- Has_emotion(\"frog\", \"disgust\").\n.output Answer", "completions": [".decl Has_emotion(Animal:symbol, Emotion:symbol)\nHas_emotion(\"frog\", \"disgust\").\n.decl Answer()\nAnswer() :- Has_emotion(\"frog\", \"disgust\").\n.output Answer"]}
{"id": 1140, "answer": true, "completion": ".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"seismophobia\", \"seismophobia\").\n.decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"clerk of Supreme Court of Canada\", \"clerk of Supreme Court of Canada\").\n.decl Answer()\nAnswer() :- Has_phobia(\"seismophobia\", \"seismophobia\"), Has_profession(\"clerk of Supreme Court of Canada\", \"clerk of Supreme Court of Canada\").\n.output Answer", "completions": [".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"seismophobia\", \"seismophobia\").\n.decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"clerk of Supreme Court of Canada\", \"clerk of Supreme Court of Canada\").\n.decl Answer()\nAnswer() :- Has_phobia(\"seismophobia\", \"seismophobia\"), Has_profession(\"clerk of Supreme Court of Canada\", \"clerk of Supreme Court of Canada\").\n.output Answer"]}
{"id": 1141, "answer": false, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"screws\").\nSells(\"Home Depot\", \"nails\").\nSells(\"Home Depot\", \"hammers\").\n.decl Is_symbol(Item:symbol, Zodiac_sign:symbol)\nIs_symbol(\"screws\", \"Virgo\").\nIs_symbol(\"nails\", \"Leo\").\nIs_symbol(\"hammers\", \"Libra\").\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"late September\", \"September\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", item), Is_symbol(item, zodiac_sign), Happens_in_month(\"late September\", month), zodiac_sign = month.\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"screws\").\nSells(\"Home Depot\", \"nails\").\nSells(\"Home Depot\", \"hammers\").\n.decl Is_symbol(Item:symbol, Zodiac_sign:symbol)\nIs_symbol(\"screws\", \"Virgo\").\nIs_symbol(\"nails\", \"Leo\").\nIs_symbol(\"hammers\", \"Libra\").\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"late September\", \"September\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", item), Is_symbol(item, zodiac_sign), Happens_in_month(\"late September\", month), zodiac_sign = month.\n.output Answer"]}
{"id": 1142, "answer": false, "completion": ".decl Serves(Place:symbol, Food:symbol)\nServes(\"heladeria\", \"ice cream\").\nServes(\"heladeria\", \"milkshake\").\nServes(\"heladeria\", \"sundae\").\n.decl Answer()\nAnswer() :- Serves(\"heladeria\", \"olives\").\n.output Answer", "completions": [".decl Serves(Place:symbol, Food:symbol)\nServes(\"heladeria\", \"ice cream\").\nServes(\"heladeria\", \"milkshake\").\nServes(\"heladeria\", \"sundae\").\n.decl Answer()\nAnswer() :- Serves(\"heladeria\", \"olives\").\n.output Answer"]}
{"id": 1143, "answer": true, "completion": ".decl Reads(Person:symbol, Work:symbol)\nReads(\"Al Capone\", \"The Great Gatsby\").\nReads(\"Al Capone\", \"The Catcher in the Rye\").\n.decl Written_during(Work:symbol, Time:symbol)\nWritten_during(\"The Great Gatsby\", \"1920s\").\nWritten_during(\"The Catcher in the Rye\", \"1920s\").\nWritten_during(\"The Catcher in the Rye\", \"1950s\").\nWritten_during(\"The Catcher in the Rye\", \"1960s\").\nWritten_during(\"The Catcher in the Rye\", \"1970s\").\nWritten_during(\"The Catcher in the Rye\", \"1980s\").\nWritten_during(\"The Catcher in the Rye\", \"1990s\").\nWritten_during(\"The Catcher in the Rye\", \"2000s\").\nWritten_during(\"The Catcher in the Rye\", \"2010s\").\nWritten_during(\"The Catcher in the Rye\", \"2020s\").\n.decl Answer()\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1920s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1930s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1940s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1950s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1960s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1970s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1980s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1990s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"2000s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"2010s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"2020s\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Work:symbol)\nReads(\"Al Capone\", \"The Great Gatsby\").\nReads(\"Al Capone\", \"The Catcher in the Rye\").\n.decl Written_during(Work:symbol, Time:symbol)\nWritten_during(\"The Great Gatsby\", \"1920s\").\nWritten_during(\"The Catcher in the Rye\", \"1920s\").\nWritten_during(\"The Catcher in the Rye\", \"1950s\").\nWritten_during(\"The Catcher in the Rye\", \"1960s\").\nWritten_during(\"The Catcher in the Rye\", \"1970s\").\nWritten_during(\"The Catcher in the Rye\", \"1980s\").\nWritten_during(\"The Catcher in the Rye\", \"1990s\").\nWritten_during(\"The Catcher in the Rye\", \"2000s\").\nWritten_during(\"The Catcher in the Rye\", \"2010s\").\nWritten_during(\"The Catcher in the Rye\", \"2020s\").\n.decl Answer()\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1920s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1930s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1940s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1950s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1960s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1970s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1980s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"1990s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"2000s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"2010s\").\nAnswer() :- Reads(\"Al Capone\", work), Written_during(work, \"2020s\").\n.output Answer"]}
{"id": 1144, "answer": false, "completion": ".decl Weighs(Person:symbol, Weight:float)\nWeighs(\"Chris Christie\", 300).\nWeighs(\"Donald Trump\", 243).\n.decl Answer()\nAnswer() :- Weighs(\"Chris Christie\", weight1), Weighs(\"Donald Trump\", weight2), weight1 > weight2.\n.output Answer", "completions": [".decl Weighs(Person:symbol, Weight:float)\nWeighs(\"Chris Christie\", 300).\nWeighs(\"Donald Trump\", 243).\n.decl Answer()\nAnswer() :- Weighs(\"Chris Christie\", weight1), Weighs(\"Donald Trump\", weight2), weight1 > weight2.\n.output Answer"]}
{"id": 1145, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Eighth Amendment\", 200).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"keelhauling\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"keelhauling\", n_years1), Last_n_years(\"Eighth Amendment\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Eighth Amendment\", 200).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"keelhauling\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"keelhauling\", n_years1), Last_n_years(\"Eighth Amendment\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1146, "answer": true, "completion": ".decl Watched(Person:symbol, Show:symbol)\nWatched(\"Gandhi\", \"Bonanza\").\n.decl Answer()\nAnswer() :- Watched(\"Gandhi\", \"Bonanza\").\n.output Answer", "completions": [".decl Watched(Person:symbol, Show:symbol)\nWatched(\"Gandhi\", \"Bonanza\").\n.decl Answer()\nAnswer() :- Watched(\"Gandhi\", \"Bonanza\").\n.output Answer"]}
{"id": 1147, "answer": true, "completion": ".decl Lasted_n_years(Event:symbol, N_years:float)\nLasted_n_years(\"World War II\", 6).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 66).\n.decl Has_casualties(Event:symbol, Casualties:float)\nHas_casualties(\"World War II\", 60).\n.decl Answer()\nAnswer() :- Lasted_n_years(\"World War II\", n_years1), Has_population(\"France\", population), Has_casualties(\"World War II\", casualties), casualties >= population * n_years1.\n.output Answer", "completions": [".decl Lasted_n_years(Event:symbol, N_years:float)\nLasted_n_years(\"World War II\", 6).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 66).\n.decl Has_casualties(Event:symbol, Casualties:float)\nHas_casualties(\"World War II\", 60).\n.decl Answer()\nAnswer() :- Lasted_n_years(\"World War II\", n_years1), Has_population(\"France\", population), Has_casualties(\"World War II\", casualties), casualties >= population * n_years1.\n.output Answer"]}
{"id": 1148, "answer": true, "completion": ".decl Answer()\nAnswer() :- 3.141592654 > 2.236067977.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- 3.141592654 > 2.236067977.\n.output Answer"]}
{"id": 1149, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Harry Potter and the Philosopher's Stone\", \"1997\").\nHappens_in_time(\"Great Depression\", \"1929\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Harry Potter and the Philosopher's Stone\", time1), Happens_in_time(\"Great Depression\", time2), time1 < time2.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Harry Potter and the Philosopher's Stone\", \"1997\").\nHappens_in_time(\"Great Depression\", \"1929\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Harry Potter and the Philosopher's Stone\", time1), Happens_in_time(\"Great Depression\", time2), time1 < time2.\n.output Answer"]}
{"id": 1150, "answer": true, "completion": ".decl Requires(FDA:symbol, Sell_by_dates:symbol)\nRequires(\"FDA\", \"sell by dates using Roman Numerals\").\n.decl Answer()\nAnswer() :- Requires(\"FDA\", \"sell by dates using Roman Numerals\").\n.output Answer", "completions": [".decl Requires(FDA:symbol, Sell_by_dates:symbol)\nRequires(\"FDA\", \"sell by dates using Roman Numerals\").\n.decl Answer()\nAnswer() :- Requires(\"FDA\", \"sell by dates using Roman Numerals\").\n.output Answer"]}
{"id": 1151, "answer": true, "completion": ".decl Has_veins(Animal:symbol, Veins:symbol)\nHas_veins(\"bumblebee\", \"true\").\nHas_veins(\"spider\", \"false\").\n.decl Answer()\nAnswer() :- Has_veins(\"bumblebee\", veins1), Has_veins(\"spider\", veins2), veins1 != veins2.\n.output Answer", "completions": [".decl Has_veins(Animal:symbol, Veins:symbol)\nHas_veins(\"bumblebee\", \"true\").\nHas_veins(\"spider\", \"false\").\n.decl Answer()\nAnswer() :- Has_veins(\"bumblebee\", veins1), Has_veins(\"spider\", veins2), veins1 != veins2.\n.output Answer"]}
{"id": 1152, "answer": true, "completion": ".decl Origin(Word:symbol, Place:symbol)\nOrigin(\"narcissism\", \"Greek mythology\").\nOrigin(\"modern\", \"the Renaissance\").\n.decl Answer()\nAnswer() :- Origin(\"narcissism\", place1), Origin(\"modern\", place2), place1 != place2.\n.output Answer", "completions": [".decl Origin(Word:symbol, Place:symbol)\nOrigin(\"narcissism\", \"Greek mythology\").\nOrigin(\"modern\", \"the Renaissance\").\n.decl Answer()\nAnswer() :- Origin(\"narcissism\", place1), Origin(\"modern\", place2), place1 != place2.\n.output Answer"]}
{"id": 1153, "answer": false, "completion": ".decl Is_prioritized(Subject:symbol, Education_system:symbol)\nIs_prioritized(\"math\", \"US education system\").\nIs_prioritized(\"science\", \"US education system\").\nIs_prioritized(\"english\", \"US education system\").\n.decl Answer()\nAnswer() :- Is_prioritized(\"art\", \"US education system\").\n.output Answer", "completions": [".decl Is_prioritized(Subject:symbol, Education_system:symbol)\nIs_prioritized(\"math\", \"US education system\").\nIs_prioritized(\"science\", \"US education system\").\nIs_prioritized(\"english\", \"US education system\").\n.decl Answer()\nAnswer() :- Is_prioritized(\"art\", \"US education system\").\n.output Answer"]}
{"id": 1154, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"mummification in the Andes\", 500).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"rainfall\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"rainfall\", n_years1), Last_n_years(\"mummification in the Andes\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"mummification in the Andes\", 500).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"rainfall\", 10).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"rainfall\", n_years1), Last_n_years(\"mummification in the Andes\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1155, "answer": false, "completion": ".decl Has_official_bird(City:symbol, Bird:symbol)\nHas_official_bird(\"Seoul\", \"Magpie\").\n.decl Has_color(Bird:symbol, Color:symbol)\nHas_color(\"Magpie\", \"purplish/blue\").\n.decl Is_located_in(Company:symbol, City:symbol)\nIs_located_in(\"LG Electronics\", \"Seoul\").\n.decl Answer()\nAnswer() :- Is_located_in(\"LG Electronics\", city), Has_official_bird(city, bird), Has_color(bird, \"purplish/blue\").\n.output Answer", "completions": [".decl Has_official_bird(City:symbol, Bird:symbol)\nHas_official_bird(\"Seoul\", \"Magpie\").\n.decl Has_color(Bird:symbol, Color:symbol)\nHas_color(\"Magpie\", \"purplish/blue\").\n.decl Is_located_in(Company:symbol, City:symbol)\nIs_located_in(\"LG Electronics\", \"Seoul\").\n.decl Answer()\nAnswer() :- Is_located_in(\"LG Electronics\", city), Has_official_bird(city, bird), Has_color(bird, \"purplish/blue\").\n.output Answer"]}
{"id": 1156, "answer": false, "completion": ".decl Needs_moisture(Plant:symbol, Moisture:symbol)\nNeeds_moisture(\"cactus\", \"damp\").\nNeeds_moisture(\"cactus\", \"dry\").\n.decl Answer()\nAnswer() :- Needs_moisture(\"cactus\", moisture).\n.output Answer", "completions": [".decl Needs_moisture(Plant:symbol, Moisture:symbol)\nNeeds_moisture(\"cactus\", \"damp\").\nNeeds_moisture(\"cactus\", \"dry\").\n.decl Answer()\nAnswer() :- Needs_moisture(\"cactus\", moisture).\n.output Answer"]}
{"id": 1157, "answer": false, "completion": ".decl Happens_before(Event1:symbol, Event2:symbol)\nHappens_before(\"breakfast\", \"dessert\").\n.decl Answer()\nAnswer() :- Happens_before(event1, \"dessert\"), Happens_before(\"breakfast\", event1).\n.output Answer", "completions": [".decl Happens_before(Event1:symbol, Event2:symbol)\nHappens_before(\"breakfast\", \"dessert\").\n.decl Answer()\nAnswer() :- Happens_before(event1, \"dessert\"), Happens_before(\"breakfast\", event1).\n.output Answer"]}
{"id": 1158, "answer": true, "completion": ".decl Inspired_by(Person:symbol, Person2:symbol)\nInspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.output Answer", "completions": [".decl Inspired_by(Person:symbol, Person2:symbol)\nInspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.output Answer"]}
{"id": 1159, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"carton\", 0.5).\n.decl Has_n_emmys(Person:symbol, N_emmys:float)\nHas_n_emmys(\"Johnny Carson\", 5).\n.decl Has_n_eggs(Object:symbol, N_eggs:float)\nHas_n_eggs(\"carton\", 12).\n.decl Answer()\nAnswer() :- Has_n_emmys(\"Johnny Carson\", n_emmys), Has_n_eggs(\"carton\", n_eggs), n_emmys >= n_eggs.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"carton\", 0.5).\n.decl Has_n_emmys(Person:symbol, N_emmys:float)\nHas_n_emmys(\"Johnny Carson\", 5).\n.decl Has_n_eggs(Object:symbol, N_eggs:float)\nHas_n_eggs(\"carton\", 12).\n.decl Answer()\nAnswer() :- Has_n_emmys(\"Johnny Carson\", n_emmys), Has_n_eggs(\"carton\", n_eggs), n_emmys >= n_eggs.\n.output Answer"]}
{"id": 1160, "answer": false, "completion": ".decl Reads(Person:symbol, Book:symbol)\nReads(\"Julius Caesar\", \"The Art of War\").\n.decl Is_about(Book:symbol, Topic:symbol)\nIs_about(\"The Art of War\", \"war\").\nIs_about(\"The Art of War\", \"strategy\").\n.decl Answer()\nAnswer() :- Reads(\"Julius Caesar\", book), Is_about(book, \"Pharmacology\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Book:symbol)\nReads(\"Julius Caesar\", \"The Art of War\").\n.decl Is_about(Book:symbol, Topic:symbol)\nIs_about(\"The Art of War\", \"war\").\nIs_about(\"The Art of War\", \"strategy\").\n.decl Answer()\nAnswer() :- Reads(\"Julius Caesar\", book), Is_about(book, \"Pharmacology\").\n.output Answer"]}
{"id": 1161, "answer": false, "completion": ".decl Popular_in_month(Event:symbol, Month:symbol)\nPopular_in_month(\"Easter Bunny\", \"April\").\n.decl Answer()\nAnswer() :- Popular_in_month(\"Easter Bunny\", \"September\").\n.output Answer", "completions": [".decl Popular_in_month(Event:symbol, Month:symbol)\nPopular_in_month(\"Easter Bunny\", \"April\").\n.decl Answer()\nAnswer() :- Popular_in_month(\"Easter Bunny\", \"September\").\n.output Answer"]}
{"id": 1162, "answer": true, "completion": ".decl Weighs_more_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_more_than(\"alligator\", \"saltwater crocodile\").\n.decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"alligator\", \"freshwater\").\nLives_in(\"saltwater crocodile\", \"saltwater\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"alligator\", \"saltwater crocodile\"), Lives_in(\"alligator\", \"freshwater\"), Lives_in(\"saltwater crocodile\", \"saltwater\").\n.output Answer", "completions": [".decl Weighs_more_than(Animal_A:symbol, Animal_B:symbol)\nWeighs_more_than(\"alligator\", \"saltwater crocodile\").\n.decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"alligator\", \"freshwater\").\nLives_in(\"saltwater crocodile\", \"saltwater\").\n.decl Answer()\nAnswer() :- Weighs_more_than(\"alligator\", \"saltwater crocodile\"), Lives_in(\"alligator\", \"freshwater\"), Lives_in(\"saltwater crocodile\", \"saltwater\").\n.output Answer"]}
{"id": 1163, "answer": true, "completion": ".decl Has_ingredient(Cuisine:symbol, Ingredient:symbol)\nHas_ingredient(\"Hawaiian\", \"ham\").\nHas_ingredient(\"Hawaiian\", \"pineapple\").\nHas_ingredient(\"Hawaiian\", \"rice\").\nHas_ingredient(\"Hawaiian\", \"seaweed\").\nHas_ingredient(\"Hawaiian\", \"sweet potato\").\nHas_ingredient(\"Hawaiian\", \"taro\").\nHas_ingredient(\"Hawaiian\", \"tomato\").\nHas_ingredient(\"Hawaiian\", \"vegetable\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Hawaiian\", ingredient), ingredient != \"ham\".\n.output Answer", "completions": [".decl Has_ingredient(Cuisine:symbol, Ingredient:symbol)\nHas_ingredient(\"Hawaiian\", \"ham\").\nHas_ingredient(\"Hawaiian\", \"pineapple\").\nHas_ingredient(\"Hawaiian\", \"rice\").\nHas_ingredient(\"Hawaiian\", \"seaweed\").\nHas_ingredient(\"Hawaiian\", \"sweet potato\").\nHas_ingredient(\"Hawaiian\", \"taro\").\nHas_ingredient(\"Hawaiian\", \"tomato\").\nHas_ingredient(\"Hawaiian\", \"vegetable\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Hawaiian\", ingredient), ingredient != \"ham\".\n.output Answer"]}
{"id": 1164, "answer": true, "completion": ".decl Has_n_members(Band:symbol, N_members:float)\nHas_n_members(\"The Beatles\", 4).\nHas_n_members(\"Wings\", 2).\n.decl Has_been_in(Musician:symbol, Band:symbol)\nHas_been_in(\"Ringo Starr\", \"The Beatles\").\nHas_been_in(\"Ringo Starr\", \"Wings\").\n.decl Answer()\nAnswer() :- Has_been_in(\"Ringo Starr\", band1), Has_n_members(band1, n_members1), Has_been_in(\"Ringo Starr\", band2), Has_n_members(band2, n_members2), n_members1 > n_members2.\n.output Answer", "completions": [".decl Has_n_members(Band:symbol, N_members:float)\nHas_n_members(\"The Beatles\", 4).\nHas_n_members(\"Wings\", 2).\n.decl Has_been_in(Musician:symbol, Band:symbol)\nHas_been_in(\"Ringo Starr\", \"The Beatles\").\nHas_been_in(\"Ringo Starr\", \"Wings\").\n.decl Answer()\nAnswer() :- Has_been_in(\"Ringo Starr\", band1), Has_n_members(band1, n_members1), Has_been_in(\"Ringo Starr\", band2), Has_n_members(band2, n_members2), n_members1 > n_members2.\n.output Answer"]}
{"id": 1165, "answer": true, "completion": ".decl Is_stronger(Person_A:symbol, Person_B:symbol)\nIs_stronger(\"Achilles\", \"Legolas\").\n.decl Answer()\nAnswer() :- Is_stronger(\"Achilles\", \"Legolas\").\n.output Answer", "completions": [".decl Is_stronger(Person_A:symbol, Person_B:symbol)\nIs_stronger(\"Achilles\", \"Legolas\").\n.decl Answer()\nAnswer() :- Is_stronger(\"Achilles\", \"Legolas\").\n.output Answer"]}
{"id": 1166, "answer": true, "completion": ".decl Has_carbohydrate(Food:symbol, Carbohydrate:float)\nHas_carbohydrate(\"Dosa\", 30).\n.decl Answer()\nAnswer() :- Has_carbohydrate(\"Dosa\", carbohydrate), carbohydrate < 50.\n.output Answer", "completions": [".decl Has_carbohydrate(Food:symbol, Carbohydrate:float)\nHas_carbohydrate(\"Dosa\", 30).\n.decl Answer()\nAnswer() :- Has_carbohydrate(\"Dosa\", carbohydrate), carbohydrate < 50.\n.output Answer"]}
{"id": 1167, "answer": false, "completion": ".decl Has_hair(Person:symbol, Hair_length:float)\nHas_hair(\"James Hetfield\", 0).\nHas_hair(\"Lars Ulrich\", 0).\nHas_hair(\"Kirk Hammett\", 0).\nHas_hair(\"Robert Trujillo\", 0).\n.decl Has_album_sales(Band:symbol, Album_sales:float)\nHas_album_sales(\"Metallica\", 100).\n.decl Answer()\nAnswer() :- Has_hair(person, 0), Has_album_sales(\"Metallica\", album_sales1), Has_album_sales(\"Metallica\", album_sales2), album_sales1 > album_sales2.\n.output Answer", "completions": [".decl Has_hair(Person:symbol, Hair_length:float)\nHas_hair(\"James Hetfield\", 0).\nHas_hair(\"Lars Ulrich\", 0).\nHas_hair(\"Kirk Hammett\", 0).\nHas_hair(\"Robert Trujillo\", 0).\n.decl Has_album_sales(Band:symbol, Album_sales:float)\nHas_album_sales(\"Metallica\", 100).\n.decl Answer()\nAnswer() :- Has_hair(person, 0), Has_album_sales(\"Metallica\", album_sales1), Has_album_sales(\"Metallica\", album_sales2), album_sales1 > album_sales2.\n.output Answer"]}
{"id": 1168, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Quiet\", 30).\n.decl Has_age_limit(Position:symbol, Age_limit:float)\nHas_age_limit(\"lecturer at Haub\", 35).\n.decl Answer()\nAnswer() :- Has_age(\"Quiet\", age), Has_age_limit(\"lecturer at Haub\", age_limit), age > age_limit.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Quiet\", 30).\n.decl Has_age_limit(Position:symbol, Age_limit:float)\nHas_age_limit(\"lecturer at Haub\", 35).\n.decl Answer()\nAnswer() :- Has_age(\"Quiet\", age), Has_age_limit(\"lecturer at Haub\", age_limit), age > age_limit.\n.output Answer"]}
{"id": 1169, "answer": true, "completion": ".decl Can_lift(Crane:symbol, Object:symbol)\nCan_lift(\"Liebherr LTM 11200-9.1\", \"Mount Emei\").\n.decl Answer()\nAnswer() :- Can_lift(\"Liebherr LTM 11200-9.1\", \"Mount Emei\").\n.output Answer", "completions": [".decl Can_lift(Crane:symbol, Object:symbol)\nCan_lift(\"Liebherr LTM 11200-9.1\", \"Mount Emei\").\n.decl Answer()\nAnswer() :- Can_lift(\"Liebherr LTM 11200-9.1\", \"Mount Emei\").\n.output Answer"]}
{"id": 1170, "answer": false, "completion": ".decl Is_sign_of(Event:symbol, Event2:symbol)\nIs_sign_of(\"snoring\", \"good breathing while sleeping\").\n.decl Answer()\nAnswer() :- Is_sign_of(\"snoring\", \"good breathing while sleeping\").\n.output Answer", "completions": [".decl Is_sign_of(Event:symbol, Event2:symbol)\nIs_sign_of(\"snoring\", \"good breathing while sleeping\").\n.decl Answer()\nAnswer() :- Is_sign_of(\"snoring\", \"good breathing while sleeping\").\n.output Answer"]}
{"id": 1171, "answer": true, "completion": ".decl Is_from(Person:symbol, Place:symbol)\nIs_from(\"John Lennon\", \"Liverpool\").\nIs_from(\"Paul McCartney\", \"Liverpool\").\nIs_from(\"Ringo Starr\", \"Liverpool\").\nIs_from(\"George Harrison\", \"Liverpool\").\nIs_from(\"Björn Ulvaeus\", \"Sweden\").\nIs_from(\"Benny Andersson\", \"Sweden\").\nIs_from(\"Anni-Frid Lyngstad\", \"Sweden\").\nIs_from(\"Agnetha Fältskog\", \"Sweden\").\n.decl Answer()\nAnswer() :- Is_from(\"John Lennon\", \"Liverpool\"), Is_from(\"Paul McCartney\", \"Liverpool\"), Is_from(\"Ringo Starr\", \"Liverpool\"), Is_from(\"George Harrison\", \"Liverpool\"), Is_from(\"Björn Ulvaeus\", \"Sweden\"), Is_from(\"Benny Andersson\", \"Sweden\"), Is_from(\"Anni-Frid Lyngstad\", \"Sweden\"), Is_from(\"Agnetha Fältskog\", \"Sweden\").\n.output Answer", "completions": [".decl Is_from(Person:symbol, Place:symbol)\nIs_from(\"John Lennon\", \"Liverpool\").\nIs_from(\"Paul McCartney\", \"Liverpool\").\nIs_from(\"Ringo Starr\", \"Liverpool\").\nIs_from(\"George Harrison\", \"Liverpool\").\nIs_from(\"Björn Ulvaeus\", \"Sweden\").\nIs_from(\"Benny Andersson\", \"Sweden\").\nIs_from(\"Anni-Frid Lyngstad\", \"Sweden\").\nIs_from(\"Agnetha Fältskog\", \"Sweden\").\n.decl Answer()\nAnswer() :- Is_from(\"John Lennon\", \"Liverpool\"), Is_from(\"Paul McCartney\", \"Liverpool\"), Is_from(\"Ringo Starr\", \"Liverpool\"), Is_from(\"George Harrison\", \"Liverpool\"), Is_from(\"Björn Ulvaeus\", \"Sweden\"), Is_from(\"Benny Andersson\", \"Sweden\"), Is_from(\"Anni-Frid Lyngstad\", \"Sweden\"), Is_from(\"Agnetha Fältskog\", \"Sweden\").\n.output Answer"]}
{"id": 1172, "answer": true, "completion": ".decl Is_straight_edge(Person:symbol)\nIs_straight_edge(\"Jackson Pollock\").\n.decl Answer()\nAnswer() :- Is_straight_edge(\"Jackson Pollock\").\n.output Answer", "completions": [".decl Is_straight_edge(Person:symbol)\nIs_straight_edge(\"Jackson Pollock\").\n.decl Answer()\nAnswer() :- Is_straight_edge(\"Jackson Pollock\").\n.output Answer"]}
{"id": 1173, "answer": false, "completion": ".decl Can_play_solo(Game:symbol)\nCan_play_solo(\"Chess\").\nCan_play_solo(\"Solitaire\").\n.decl Answer()\nAnswer() :- Can_play_solo(\"Dungeons and Dragons\").\n.output Answer", "completions": [".decl Can_play_solo(Game:symbol)\nCan_play_solo(\"Chess\").\nCan_play_solo(\"Solitaire\").\n.decl Answer()\nAnswer() :- Can_play_solo(\"Dungeons and Dragons\").\n.output Answer"]}
{"id": 1174, "answer": true, "completion": ".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"car\", \"fuel injector\").\n.decl Answer()\nAnswer() :- Has_part(\"car\", \"fuel injector\").\n.output Answer", "completions": [".decl Has_part(Object:symbol, Part:symbol)\nHas_part(\"car\", \"fuel injector\").\n.decl Answer()\nAnswer() :- Has_part(\"car\", \"fuel injector\").\n.output Answer"]}
{"id": 1175, "answer": true, "completion": ".decl Had_child(Person:symbol, Child:symbol)\nHad_child(\"Heracles\", \"Hyllus\").\nHad_child(\"Heracles\", \"Ileus\").\nHad_child(\"Heracles\", \"Machaon\").\nHad_child(\"Heracles\", \"Odysseus\").\nHad_child(\"Heracles\", \"Poeas\").\nHad_child(\"Heracles\", \"Polydorus\").\nHad_child(\"Heracles\", \"Telephus\").\nHad_child(\"Heracles\", \"Tlepolemus\").\n.decl Happens_to(Person:symbol, Event:symbol)\nHappens_to(\"Heracles\", \"funeral pyre\").\n.decl Answer()\nAnswer() :- Happens_to(\"Heracles\", \"funeral pyre\"), Had_child(\"Heracles\", child1), Had_child(\"Heracles\", child2), child1 != child2.\n.output Answer", "completions": [".decl Had_child(Person:symbol, Child:symbol)\nHad_child(\"Heracles\", \"Hyllus\").\nHad_child(\"Heracles\", \"Ileus\").\nHad_child(\"Heracles\", \"Machaon\").\nHad_child(\"Heracles\", \"Odysseus\").\nHad_child(\"Heracles\", \"Poeas\").\nHad_child(\"Heracles\", \"Polydorus\").\nHad_child(\"Heracles\", \"Telephus\").\nHad_child(\"Heracles\", \"Tlepolemus\").\n.decl Happens_to(Person:symbol, Event:symbol)\nHappens_to(\"Heracles\", \"funeral pyre\").\n.decl Answer()\nAnswer() :- Happens_to(\"Heracles\", \"funeral pyre\"), Had_child(\"Heracles\", child1), Had_child(\"Heracles\", child2), child1 != child2.\n.output Answer"]}
{"id": 1176, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"moon\", 2.1958e+12).\nHas_volume(\"Black Sea\", 547e+12).\n.decl Answer()\nAnswer() :- Has_volume(\"moon\", volume1), Has_volume(\"Black Sea\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"moon\", 2.1958e+12).\nHas_volume(\"Black Sea\", 547e+12).\n.decl Answer()\nAnswer() :- Has_volume(\"moon\", volume1), Has_volume(\"Black Sea\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 1177, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"peach blossoms\", \"spring\").\nHappens_in_season(\"Andromeda\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"peach blossoms\", season1), Happens_in_season(\"Andromeda\", season2), season1 != season2.\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"peach blossoms\", \"spring\").\nHappens_in_season(\"Andromeda\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"peach blossoms\", season1), Happens_in_season(\"Andromeda\", season2), season1 != season2.\n.output Answer"]}
{"id": 1178, "answer": true, "completion": ".decl Has_Bacon_number(Actor:symbol, Bacon_number:float)\nHas_Bacon_number(\"Al Pacino\", 1).\nHas_Bacon_number(\"Margaret Qualley\", 1).\n.decl Answer()\nAnswer() :- Has_Bacon_number(\"Al Pacino\", bacon_number1), Has_Bacon_number(\"Margaret Qualley\", bacon_number2), bacon_number1 = bacon_number2.\n.output Answer", "completions": [".decl Has_Bacon_number(Actor:symbol, Bacon_number:float)\nHas_Bacon_number(\"Al Pacino\", 1).\nHas_Bacon_number(\"Margaret Qualley\", 1).\n.decl Answer()\nAnswer() :- Has_Bacon_number(\"Al Pacino\", bacon_number1), Has_Bacon_number(\"Margaret Qualley\", bacon_number2), bacon_number1 = bacon_number2.\n.output Answer"]}
{"id": 1179, "answer": true, "completion": ".decl Written_in_shorthand(Document:symbol, Shorthand:symbol)\nWritten_in_shorthand(\"Tenth Amendment to the Constitution\", \"Pitman shorthand\").\n.decl Answer()\nAnswer() :- Written_in_shorthand(\"Tenth Amendment to the Constitution\", \"Pitman shorthand\").\n.output Answer\n\n\n", "completions": [".decl Written_in_shorthand(Document:symbol, Shorthand:symbol)\nWritten_in_shorthand(\"Tenth Amendment to the Constitution\", \"Pitman shorthand\").\n.decl Answer()\nAnswer() :- Written_in_shorthand(\"Tenth Amendment to the Constitution\", \"Pitman shorthand\").\n.output Answer\n\n\n"]}
{"id": 1180, "answer": true, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Ivan the Terrible\", \"Ivan the Terrible\").\nHas_nickname(\"Ivan III of Russia\", \"Ivan the Great\").\nHas_nickname(\"Vasili III of Russia\", \"Vasili the Blind\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Ivan the Terrible\", nickname1), Has_nickname(\"Ivan III of Russia\", nickname2), nickname1 != nickname2, nickname1 != \"Ivan the Great\".\nAnswer() :- Has_nickname(\"Ivan the Terrible\", nickname1), Has_nickname(\"Vasili III of Russia\", nickname2), nickname1 != nickname2, nickname1 != \"Vasili the Blind\".\n.output Answer", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Ivan the Terrible\", \"Ivan the Terrible\").\nHas_nickname(\"Ivan III of Russia\", \"Ivan the Great\").\nHas_nickname(\"Vasili III of Russia\", \"Vasili the Blind\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Ivan the Terrible\", nickname1), Has_nickname(\"Ivan III of Russia\", nickname2), nickname1 != nickname2, nickname1 != \"Ivan the Great\".\nAnswer() :- Has_nickname(\"Ivan the Terrible\", nickname1), Has_nickname(\"Vasili III of Russia\", nickname2), nickname1 != nickname2, nickname1 != \"Vasili the Blind\".\n.output Answer"]}
{"id": 1181, "answer": true, "completion": ".decl Has_cousin(Person:symbol, Cousin:symbol)\nHas_cousin(\"Zelda Williams\", \"Kate Hudson\").\nHas_cousin(\"Zelda Williams\", \"Emily Hudson\").\n.decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Zelda Williams\", \"Robin Williams\").\nHas_parent(\"Kate Hudson\", \"Bill Hudson\").\nHas_parent(\"Emily Hudson\", \"Bill Hudson\").\n.decl Answer()\nAnswer() :- Has_cousin(\"Zelda Williams\", cousin), Has_parent(\"Zelda Williams\", parent), Has_parent(cousin, parent).\n.output Answer", "completions": [".decl Has_cousin(Person:symbol, Cousin:symbol)\nHas_cousin(\"Zelda Williams\", \"Kate Hudson\").\nHas_cousin(\"Zelda Williams\", \"Emily Hudson\").\n.decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Zelda Williams\", \"Robin Williams\").\nHas_parent(\"Kate Hudson\", \"Bill Hudson\").\nHas_parent(\"Emily Hudson\", \"Bill Hudson\").\n.decl Answer()\nAnswer() :- Has_cousin(\"Zelda Williams\", cousin), Has_parent(\"Zelda Williams\", parent), Has_parent(cousin, parent).\n.output Answer"]}
{"id": 1182, "answer": true, "completion": ".decl Found_in(Thing:symbol, Place:symbol)\nFound_in(\"thetan levels\", \"New Testament\").\n.decl Answer()\nAnswer() :- Found_in(\"thetan levels\", \"New Testament\").\n.output Answer", "completions": [".decl Found_in(Thing:symbol, Place:symbol)\nFound_in(\"thetan levels\", \"New Testament\").\n.decl Answer()\nAnswer() :- Found_in(\"thetan levels\", \"New Testament\").\n.output Answer"]}
{"id": 1183, "answer": false, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"pancake\", \"silver dollar pancake\").\nHas_name(\"coin\", \"silver dollar\").\n.decl Answer()\nAnswer() :- Has_name(\"pancake\", pancake_name), Has_name(\"coin\", coin_name), pancake_name = coin_name.\n.output Answer\n\n\n", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"pancake\", \"silver dollar pancake\").\nHas_name(\"coin\", \"silver dollar\").\n.decl Answer()\nAnswer() :- Has_name(\"pancake\", pancake_name), Has_name(\"coin\", coin_name), pancake_name = coin_name.\n.output Answer\n\n\n"]}
{"id": 1184, "answer": true, "completion": ".decl Has_anatomy(Animal:symbol, Anatomy:symbol)\nHas_anatomy(\"camel\", \"hump\").\n.decl Answer()\nAnswer() :- Has_anatomy(\"camel\", anatomy), anatomy = \"hump\".\n.output Answer", "completions": [".decl Has_anatomy(Animal:symbol, Anatomy:symbol)\nHas_anatomy(\"camel\", \"hump\").\n.decl Answer()\nAnswer() :- Has_anatomy(\"camel\", anatomy), anatomy = \"hump\".\n.output Answer"]}
{"id": 1185, "answer": true, "completion": ".decl Wrestled_on(Wrestler:symbol, Show:symbol)\nWrestled_on(\"Bruiser Brody\", \"WWE Raw\").\n.decl Answer()\nAnswer() :- Wrestled_on(\"Bruiser Brody\", \"WWE Raw\").\n.output Answer", "completions": [".decl Wrestled_on(Wrestler:symbol, Show:symbol)\nWrestled_on(\"Bruiser Brody\", \"WWE Raw\").\n.decl Answer()\nAnswer() :- Wrestled_on(\"Bruiser Brody\", \"WWE Raw\").\n.output Answer"]}
{"id": 1186, "answer": true, "completion": ".decl Studies(Science:symbol, Subject:symbol)\nStudies(\"zoology\", \"animals\").\n.decl Answer()\nAnswer() :- Studies(\"zoology\", subject), !, subject != \"strigoi\".\n.output Answer", "completions": [".decl Studies(Science:symbol, Subject:symbol)\nStudies(\"zoology\", \"animals\").\n.decl Answer()\nAnswer() :- Studies(\"zoology\", subject), !, subject != \"strigoi\".\n.output Answer"]}
{"id": 1187, "answer": true, "completion": ".decl Has_race(Character:symbol, Race:symbol)\nHas_race(\"Depala\", \"vulcan\").\n.decl Answer()\nAnswer() :- Has_race(\"Depala\", \"vulcan\").\n.output Answer", "completions": [".decl Has_race(Character:symbol, Race:symbol)\nHas_race(\"Depala\", \"vulcan\").\n.decl Answer()\nAnswer() :- Has_race(\"Depala\", \"vulcan\").\n.output Answer"]}
{"id": 1188, "answer": true, "completion": ".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"twin1\", 2010).\nHas_birth_year(\"twin2\", 2010).\n.decl Answer()\nAnswer() :- Has_birth_year(\"twin1\", birth_year1), Has_birth_year(\"twin2\", birth_year2), birth_year1 = birth_year2.\n.output Answer", "completions": [".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"twin1\", 2010).\nHas_birth_year(\"twin2\", 2010).\n.decl Answer()\nAnswer() :- Has_birth_year(\"twin1\", birth_year1), Has_birth_year(\"twin2\", birth_year2), birth_year1 = birth_year2.\n.output Answer"]}
{"id": 1189, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Tom Bosley\", 83).\n.decl Has_release_date(Video_game:symbol, Release_date:float)\nHas_release_date(\"PlayStation 4\", 2013).\n.decl Answer()\nAnswer() :- Has_age(\"Tom Bosley\", age), Has_release_date(\"PlayStation 4\", release_date), age >= release_date - 83.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Tom Bosley\", 83).\n.decl Has_release_date(Video_game:symbol, Release_date:float)\nHas_release_date(\"PlayStation 4\", 2013).\n.decl Answer()\nAnswer() :- Has_age(\"Tom Bosley\", age), Has_release_date(\"PlayStation 4\", release_date), age >= release_date - 83.\n.output Answer"]}
{"id": 1190, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\nHas_n_members(\"The Osmonds\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members1), Has_n_members(\"The Osmonds\", n_members2), n_members1 > n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\nHas_n_members(\"The Osmonds\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members1), Has_n_members(\"The Osmonds\", n_members2), n_members1 > n_members2.\n.output Answer"]}
{"id": 1191, "answer": true, "completion": ".decl Is_a_good_candle_ingredient(Ingredient:symbol)\nIs_a_good_candle_ingredient(\"beeswax\").\nIs_a_good_candle_ingredient(\"paraffin\").\nIs_a_good_candle_ingredient(\"soybean oil\").\nIs_a_good_candle_ingredient(\"coconut oil\").\nIs_a_good_candle_ingredient(\"kaffir lime\").\n.decl Answer()\nAnswer() :- Is_a_good_candle_ingredient(\"kaffir lime\").\n.output Answer", "completions": [".decl Is_a_good_candle_ingredient(Ingredient:symbol)\nIs_a_good_candle_ingredient(\"beeswax\").\nIs_a_good_candle_ingredient(\"paraffin\").\nIs_a_good_candle_ingredient(\"soybean oil\").\nIs_a_good_candle_ingredient(\"coconut oil\").\nIs_a_good_candle_ingredient(\"kaffir lime\").\n.decl Answer()\nAnswer() :- Is_a_good_candle_ingredient(\"kaffir lime\").\n.output Answer"]}
{"id": 1192, "answer": false, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"football field\", 120000).\nHas_area(\"Alcatraz Island\", 22).\n.decl Answer()\nAnswer() :- Has_area(\"football field\", area1), Has_area(\"Alcatraz Island\", area2), area1 <= area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"football field\", 120000).\nHas_area(\"Alcatraz Island\", 22).\n.decl Answer()\nAnswer() :- Has_area(\"football field\", area1), Has_area(\"Alcatraz Island\", area2), area1 <= area2.\n.output Answer"]}
{"id": 1193, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Iberian wolf\", \"Spain\").\n.decl Answer()\nAnswer() :- Lives_in(\"Iberian wolf\", \"Southern United States\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Iberian wolf\", \"Spain\").\n.decl Answer()\nAnswer() :- Lives_in(\"Iberian wolf\", \"Southern United States\").\n.output Answer"]}
{"id": 1194, "answer": true, "completion": ".decl Can_kill(Animal:symbol, Criminal:symbol)\nCan_kill(\"spider wasp\", \"criminal\").\nCan_kill(\"bullet ant\", \"criminal\").\n.decl Answer()\nAnswer() :- Can_kill(\"spider wasp\", \"criminal\").\nAnswer() :- Can_kill(\"bullet ant\", \"criminal\").\n.output Answer", "completions": [".decl Can_kill(Animal:symbol, Criminal:symbol)\nCan_kill(\"spider wasp\", \"criminal\").\nCan_kill(\"bullet ant\", \"criminal\").\n.decl Answer()\nAnswer() :- Can_kill(\"spider wasp\", \"criminal\").\nAnswer() :- Can_kill(\"bullet ant\", \"criminal\").\n.output Answer"]}
{"id": 1195, "answer": true, "completion": ".decl Disney_film(Film:symbol, Year:float)\nDisney_film(\"Snow White and the Seven Dwarfs\", 1937).\n.decl Prophet_story(Story:symbol, Year:float)\nProphet_story(\"The Prophet\", 1923).\n.decl Answer()\nAnswer() :- Disney_film(\"Snow White and the Seven Dwarfs\", year1), Prophet_story(\"The Prophet\", year2), year1 > year2.\n.output Answer", "completions": [".decl Disney_film(Film:symbol, Year:float)\nDisney_film(\"Snow White and the Seven Dwarfs\", 1937).\n.decl Prophet_story(Story:symbol, Year:float)\nProphet_story(\"The Prophet\", 1923).\n.decl Answer()\nAnswer() :- Disney_film(\"Snow White and the Seven Dwarfs\", year1), Prophet_story(\"The Prophet\", year2), year1 > year2.\n.output Answer"]}
{"id": 1196, "answer": true, "completion": ".decl Buys(Person:symbol, Item:symbol)\nBuys(\"John\", \"crickets\").\nBuys(\"John\", \"hamster\").\n.decl Answer()\nAnswer() :- Buys(person, \"crickets\"), Buys(person, \"hamster\").\n.output Answer", "completions": [".decl Buys(Person:symbol, Item:symbol)\nBuys(\"John\", \"crickets\").\nBuys(\"John\", \"hamster\").\n.decl Answer()\nAnswer() :- Buys(person, \"crickets\"), Buys(person, \"hamster\").\n.output Answer"]}
{"id": 1197, "answer": true, "completion": ".decl Cost(Event:symbol, Cost:float)\nCost(\"2009 eclipse\", 1).\nCost(\"TIME magazine\", 5).\n.decl Answer()\nAnswer() :- Cost(\"2009 eclipse\", cost1), Cost(\"TIME magazine\", cost2), cost1*11 >= cost2.\n.output Answer", "completions": [".decl Cost(Event:symbol, Cost:float)\nCost(\"2009 eclipse\", 1).\nCost(\"TIME magazine\", 5).\n.decl Answer()\nAnswer() :- Cost(\"2009 eclipse\", cost1), Cost(\"TIME magazine\", cost2), cost1*11 >= cost2.\n.output Answer"]}
{"id": 1198, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Lil Wayne\", \"Dwayne Michael Carter Jr.\").\nHas_name(\"rapper\", \"Dwayne Michael Carter Jr.\").\n.decl Has_n_Grammy_awards(Person:symbol, N_Grammy_awards:float)\nHas_n_Grammy_awards(\"Lil Wayne\", 4).\nHas_n_Grammy_awards(\"rapper\", 18).\n.decl Answer()\nAnswer() :- Has_name(\"Lil Wayne\", name1), Has_name(\"rapper\", name2), name1 = name2, Has_n_Grammy_awards(\"Lil Wayne\", n_Grammy_awards1), Has_n_Grammy_awards(\"rapper\", n_Grammy_awards2), n_Grammy_awards2 > 4*n_Grammy_awards1.\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Lil Wayne\", \"Dwayne Michael Carter Jr.\").\nHas_name(\"rapper\", \"Dwayne Michael Carter Jr.\").\n.decl Has_n_Grammy_awards(Person:symbol, N_Grammy_awards:float)\nHas_n_Grammy_awards(\"Lil Wayne\", 4).\nHas_n_Grammy_awards(\"rapper\", 18).\n.decl Answer()\nAnswer() :- Has_name(\"Lil Wayne\", name1), Has_name(\"rapper\", name2), name1 = name2, Has_n_Grammy_awards(\"Lil Wayne\", n_Grammy_awards1), Has_n_Grammy_awards(\"rapper\", n_Grammy_awards2), n_Grammy_awards2 > 4*n_Grammy_awards1.\n.output Answer"]}
{"id": 1199, "answer": true, "completion": ".decl Needs_refrigeration(Food:symbol)\nNeeds_refrigeration(\"milk\").\nNeeds_refrigeration(\"eggs\").\nNeeds_refrigeration(\"oysters\").\n.decl Answer()\nAnswer() :- Needs_refrigeration(\"oysters\").\n.output Answer\n\n", "completions": [".decl Needs_refrigeration(Food:symbol)\nNeeds_refrigeration(\"milk\").\nNeeds_refrigeration(\"eggs\").\nNeeds_refrigeration(\"oysters\").\n.decl Answer()\nAnswer() :- Needs_refrigeration(\"oysters\").\n.output Answer\n\n"]}
{"id": 1200, "answer": false, "completion": ".decl Has_n_members(Household:symbol, N_members:float)\nHas_n_members(\"Kate Gosselin's household\", 8).\n.decl Has_n_members(Team:symbol, N_members:float)\nHas_n_members(\"Bandy team\", 11).\n.decl Answer()\nAnswer() :- Has_n_members(\"Kate Gosselin's household\", n_members1), Has_n_members(\"Bandy team\", n_members2), n_members1 = n_members2.\n.output Answer", "completions": [".decl Has_n_members(Household:symbol, N_members:float)\nHas_n_members(\"Kate Gosselin's household\", 8).\n.decl Has_n_members(Team:symbol, N_members:float)\nHas_n_members(\"Bandy team\", 11).\n.decl Answer()\nAnswer() :- Has_n_members(\"Kate Gosselin's household\", n_members1), Has_n_members(\"Bandy team\", n_members2), n_members1 = n_members2.\n.output Answer"]}
{"id": 1201, "answer": true, "completion": ".decl Can_chase(Animal_A:symbol, Animal_B:symbol)\nCan_chase(\"emu\", \"bogan\").\n.decl Answer()\nAnswer() :- Can_chase(\"emu\", \"bogan\").\n.output Answer", "completions": [".decl Can_chase(Animal_A:symbol, Animal_B:symbol)\nCan_chase(\"emu\", \"bogan\").\n.decl Answer()\nAnswer() :- Can_chase(\"emu\", \"bogan\").\n.output Answer"]}
{"id": 1202, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Cuban revolution\", \"1959\").\nHappens_in_time(\"US population boom\", \"1945-1946\").\nHappens_in_time(\"US population boom\", \"1946-1947\").\nHappens_in_time(\"US population boom\", \"1947-1948\").\nHappens_in_time(\"US population boom\", \"1948-1949\").\nHappens_in_time(\"US population boom\", \"1949-1950\").\nHappens_in_time(\"US population boom\", \"1950-1951\").\nHappens_in_time(\"US population boom\", \"1951-1952\").\nHappens_in_time(\"US population boom\", \"1952-1953\").\nHappens_in_time(\"US population boom\", \"1953-1954\").\nHappens_in_time(\"US population boom\", \"1954-1955\").\nHappens_in_time(\"US population boom\", \"1955-1956\").\nHappens_in_time(\"US population boom\", \"1956-1957\").\nHappens_in_time(\"US population boom\", \"1957-1958\").\nHappens_in_time(\"US population boom\", \"1958-1959\").\nHappens_in_time(\"US population boom\", \"1959-1960\").\nHappens_in_time(\"US population boom\", \"1960-1961\").\nHappens_in_time(\"US population boom\", \"1961-1962\").\nHappens_in_time(\"US population boom\", \"1962-1963\").\nHappens_in_time(\"US population boom\", \"1963-1964\").\nHappens_in_time(\"US population boom\", \"1964-1965\").\nHappens_in_time(\"US population boom\", \"1965-1966\").\nHappens_in_time(\"US population boom\", \"1966-1967\").\nHappens_in_time(\"US population boom\", \"1967-1968\").\nHappens_in_time(\"US population boom\", \"1968-1969\").\nHappens_in_time(\"US population boom\", \"1969-1970\").\nHappens_in_time(\"US population boom\", \"1970-1971\").\nHappens_in_time(\"US population boom\", \"1971-1972\").\nHappens_in_time(\"US population boom\", \"1972-1973\").\nHappens_in_time(\"US population boom\", \"1973-1974\").\nHappens_in_time(\"US population boom\", \"1974-1975\").\nHappens_in_time(\"US population boom\", \"1975-1976\").\nHappens_in_time(\"US population boom\", \"1976-1977\").\nHappens_in_time(\"US population boom\", \"1977-1978\").\nHappens_in_time(\"US population boom\", \"1978-1979\").\nHappens_in_time(\"US population boom\", \"1979-1980\").\nHappens_in_time(\"US population boom\", \"1980-1981\").\nHappens_in_time(\"US population boom\", \"1981-1982\").\nHappens_in_time(\"US population boom\", \"1982-1983\").\nHappens_in_time(\"US population boom\", \"1983-1984\").\nHappens_in_time(\"US population boom\", \"1984-1985\").\nHappens_in_time(\"US population boom\", \"1985-1986", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Cuban revolution\", \"1959\").\nHappens_in_time(\"US population boom\", \"1945-1946\").\nHappens_in_time(\"US population boom\", \"1946-1947\").\nHappens_in_time(\"US population boom\", \"1947-1948\").\nHappens_in_time(\"US population boom\", \"1948-1949\").\nHappens_in_time(\"US population boom\", \"1949-1950\").\nHappens_in_time(\"US population boom\", \"1950-1951\").\nHappens_in_time(\"US population boom\", \"1951-1952\").\nHappens_in_time(\"US population boom\", \"1952-1953\").\nHappens_in_time(\"US population boom\", \"1953-1954\").\nHappens_in_time(\"US population boom\", \"1954-1955\").\nHappens_in_time(\"US population boom\", \"1955-1956\").\nHappens_in_time(\"US population boom\", \"1956-1957\").\nHappens_in_time(\"US population boom\", \"1957-1958\").\nHappens_in_time(\"US population boom\", \"1958-1959\").\nHappens_in_time(\"US population boom\", \"1959-1960\").\nHappens_in_time(\"US population boom\", \"1960-1961\").\nHappens_in_time(\"US population boom\", \"1961-1962\").\nHappens_in_time(\"US population boom\", \"1962-1963\").\nHappens_in_time(\"US population boom\", \"1963-1964\").\nHappens_in_time(\"US population boom\", \"1964-1965\").\nHappens_in_time(\"US population boom\", \"1965-1966\").\nHappens_in_time(\"US population boom\", \"1966-1967\").\nHappens_in_time(\"US population boom\", \"1967-1968\").\nHappens_in_time(\"US population boom\", \"1968-1969\").\nHappens_in_time(\"US population boom\", \"1969-1970\").\nHappens_in_time(\"US population boom\", \"1970-1971\").\nHappens_in_time(\"US population boom\", \"1971-1972\").\nHappens_in_time(\"US population boom\", \"1972-1973\").\nHappens_in_time(\"US population boom\", \"1973-1974\").\nHappens_in_time(\"US population boom\", \"1974-1975\").\nHappens_in_time(\"US population boom\", \"1975-1976\").\nHappens_in_time(\"US population boom\", \"1976-1977\").\nHappens_in_time(\"US population boom\", \"1977-1978\").\nHappens_in_time(\"US population boom\", \"1978-1979\").\nHappens_in_time(\"US population boom\", \"1979-1980\").\nHappens_in_time(\"US population boom\", \"1980-1981\").\nHappens_in_time(\"US population boom\", \"1981-1982\").\nHappens_in_time(\"US population boom\", \"1982-1983\").\nHappens_in_time(\"US population boom\", \"1983-1984\").\nHappens_in_time(\"US population boom\", \"1984-1985\").\nHappens_in_time(\"US population boom\", \"1985-1986"]}
{"id": 1203, "answer": true, "completion": ".decl Appears_in(Thing:symbol, Book:symbol)\nAppears_in(\"tobacco use\", \"Alice's Adventures in Wonderland\").\n.decl Makes_seem_enjoyable(Thing:symbol)\nMakes_seem_enjoyable(\"tobacco use\").\n.decl Answer()\nAnswer() :- Appears_in(\"tobacco use\", \"Alice's Adventures in Wonderland\"), Makes_seem_enjoyable(\"tobacco use\").\n.output Answer", "completions": [".decl Appears_in(Thing:symbol, Book:symbol)\nAppears_in(\"tobacco use\", \"Alice's Adventures in Wonderland\").\n.decl Makes_seem_enjoyable(Thing:symbol)\nMakes_seem_enjoyable(\"tobacco use\").\n.decl Answer()\nAnswer() :- Appears_in(\"tobacco use\", \"Alice's Adventures in Wonderland\"), Makes_seem_enjoyable(\"tobacco use\").\n.output Answer"]}
{"id": 1204, "answer": true, "completion": ".decl Causes_death(Event:symbol, Cause:symbol)\nCauses_death(\"eating grapefruit\", \"allergies\").\nCauses_death(\"eating grapefruit\", \"choking\").\n.decl Answer()\nAnswer() :- Causes_death(\"eating grapefruit\", cause), !, cause != \"allergies\", cause != \"choking\".\n.output Answer", "completions": [".decl Causes_death(Event:symbol, Cause:symbol)\nCauses_death(\"eating grapefruit\", \"allergies\").\nCauses_death(\"eating grapefruit\", \"choking\").\n.decl Answer()\nAnswer() :- Causes_death(\"eating grapefruit\", cause), !, cause != \"allergies\", cause != \"choking\".\n.output Answer"]}
{"id": 1205, "answer": true, "completion": ".decl Banned_from(Person:symbol, City:symbol)\nBanned_from(\"Kane\", \"Atlanta\").\n.decl Is_headquarters_city(City:symbol, Company:symbol)\nIs_headquarters_city(\"Atlanta\", \"WCW\").\n.decl Answer()\nAnswer() :- Banned_from(\"Kane\", \"Atlanta\"), Is_headquarters_city(\"Atlanta\", \"WCW\").\n.output Answer", "completions": [".decl Banned_from(Person:symbol, City:symbol)\nBanned_from(\"Kane\", \"Atlanta\").\n.decl Is_headquarters_city(City:symbol, Company:symbol)\nIs_headquarters_city(\"Atlanta\", \"WCW\").\n.decl Answer()\nAnswer() :- Banned_from(\"Kane\", \"Atlanta\"), Is_headquarters_city(\"Atlanta\", \"WCW\").\n.output Answer"]}
{"id": 1206, "answer": true, "completion": ".decl Has_ingredient(Product:symbol, Ingredient:symbol)\nHas_ingredient(\"ammonia fighting cleaner\", \"ammonia\").\nHas_ingredient(\"ammonia fighting cleaner\", \"bleach\").\nHas_ingredient(\"ammonia fighting cleaner\", \"detergent\").\nHas_ingredient(\"ammonia fighting cleaner\", \"water\").\nHas_ingredient(\"ammonia fighting cleaner\", \"surfactant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"fragrance\").\nHas_ingredient(\"ammonia fighting cleaner\", \"colorant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"preservative\").\nHas_ingredient(\"ammonia fighting cleaner\", \"disinfectant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"buffering agent\").\nHas_ingredient(\"ammonia fighting cleaner\", \"pH adjuster\").\nHas_ingredient(\"ammonia fighting cleaner\", \"solvent\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antifoaming agent\").\nHas_ingredient(\"ammonia fighting cleaner\", \"thickener\").\nHas_ingredient(\"ammonia fighting cleaner\", \"emulsifier\").\nHas_ingredient(\"ammonia fighting cleaner\", \"wetting agent\").\nHas_ingredient(\"ammonia fighting cleaner\", \"hydrotrope\").\nHas_ingredient(\"ammonia fighting cleaner\", \"surfactant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"dispersant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"penetrant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"lubricant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"degreaser\").\nHas_ingredient(\"ammonia fighting cleaner\", \"rust inhibitor\").\nHas_ingredient(\"ammonia fighting cleaner\", \"corrosion inhibitor\").\nHas_ingredient(\"ammonia fighting cleaner\", \"mildewcide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"germicidal\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antimicrobial\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antibacterial\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antiviral\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antifungal\").\nHas_ingredient(\"ammonia fighting cleaner\", \"insecticide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"herbicide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"fungicide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"moldicide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"mildicide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"germicide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"sanitizer\").\nHas_ingredient(\"ammonia fighting cleaner\", \"disinfectant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antiseptic\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antimicrobial\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antibacterial\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antiviral\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antifungal\").\nHas_ing", "completions": [".decl Has_ingredient(Product:symbol, Ingredient:symbol)\nHas_ingredient(\"ammonia fighting cleaner\", \"ammonia\").\nHas_ingredient(\"ammonia fighting cleaner\", \"bleach\").\nHas_ingredient(\"ammonia fighting cleaner\", \"detergent\").\nHas_ingredient(\"ammonia fighting cleaner\", \"water\").\nHas_ingredient(\"ammonia fighting cleaner\", \"surfactant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"fragrance\").\nHas_ingredient(\"ammonia fighting cleaner\", \"colorant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"preservative\").\nHas_ingredient(\"ammonia fighting cleaner\", \"disinfectant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"buffering agent\").\nHas_ingredient(\"ammonia fighting cleaner\", \"pH adjuster\").\nHas_ingredient(\"ammonia fighting cleaner\", \"solvent\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antifoaming agent\").\nHas_ingredient(\"ammonia fighting cleaner\", \"thickener\").\nHas_ingredient(\"ammonia fighting cleaner\", \"emulsifier\").\nHas_ingredient(\"ammonia fighting cleaner\", \"wetting agent\").\nHas_ingredient(\"ammonia fighting cleaner\", \"hydrotrope\").\nHas_ingredient(\"ammonia fighting cleaner\", \"surfactant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"dispersant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"penetrant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"lubricant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"degreaser\").\nHas_ingredient(\"ammonia fighting cleaner\", \"rust inhibitor\").\nHas_ingredient(\"ammonia fighting cleaner\", \"corrosion inhibitor\").\nHas_ingredient(\"ammonia fighting cleaner\", \"mildewcide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"germicidal\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antimicrobial\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antibacterial\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antiviral\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antifungal\").\nHas_ingredient(\"ammonia fighting cleaner\", \"insecticide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"herbicide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"fungicide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"moldicide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"mildicide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"germicide\").\nHas_ingredient(\"ammonia fighting cleaner\", \"sanitizer\").\nHas_ingredient(\"ammonia fighting cleaner\", \"disinfectant\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antiseptic\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antimicrobial\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antibacterial\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antiviral\").\nHas_ingredient(\"ammonia fighting cleaner\", \"antifungal\").\nHas_ing"]}
{"id": 1207, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Mongol Empire\", 800).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Wembley Stadium\", 100).\n.decl Answer()\nAnswer() :- Last_n_years(\"Mongol Empire\", n_years1), Last_n_years(\"Wembley Stadium\", n_years2), n_years1 < n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Mongol Empire\", 800).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Wembley Stadium\", 100).\n.decl Answer()\nAnswer() :- Last_n_years(\"Mongol Empire\", n_years1), Last_n_years(\"Wembley Stadium\", n_years2), n_years1 < n_years2.\n.output Answer"]}
{"id": 1208, "answer": true, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Holy Saturday\", \"April 20\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Holy Saturday\", \"April 20\").\n.output Answer", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Holy Saturday\", \"April 20\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Holy Saturday\", \"April 20\").\n.output Answer"]}
{"id": 1209, "answer": true, "completion": ".decl Has_flag(Organization:symbol, Flag:symbol)\nHas_flag(\"CNES\", \"French flag\").\n.decl Answer()\nAnswer() :- Has_flag(\"CNES\", \"French flag\").\n.output Answer", "completions": [".decl Has_flag(Organization:symbol, Flag:symbol)\nHas_flag(\"CNES\", \"French flag\").\n.decl Answer()\nAnswer() :- Has_flag(\"CNES\", \"French flag\").\n.output Answer"]}
{"id": 1210, "answer": true, "completion": ".decl Directed(Movie:symbol, Director:symbol)\nDirected(\"San Andreas\", \"Brad Peyton\").\n.decl Requires_knowledge(Job:symbol, Knowledge:symbol)\nRequires_knowledge(\"director\", \"seismology\").\n.decl Answer()\nAnswer() :- Directed(movie, \"Brad Peyton\"), Requires_knowledge(job, \"seismology\").\n.output Answer", "completions": [".decl Directed(Movie:symbol, Director:symbol)\nDirected(\"San Andreas\", \"Brad Peyton\").\n.decl Requires_knowledge(Job:symbol, Knowledge:symbol)\nRequires_knowledge(\"director\", \"seismology\").\n.decl Answer()\nAnswer() :- Directed(movie, \"Brad Peyton\"), Requires_knowledge(job, \"seismology\").\n.output Answer"]}
{"id": 1211, "answer": false, "completion": ".decl Is_welcoming(Organization:symbol, Person:symbol)\nIs_welcoming(\"Ku Klux Klan\", \"White person\").\n.decl Is_welcoming(Organization:symbol, Person:symbol)\nIs_welcoming(\"Average American Public University\", \"White person\").\n.decl Is_welcoming(Organization:symbol, Person:symbol)\nIs_welcoming(\"Average American Public University\", \"Black person\").\n.decl Is_welcoming(Organization:symbol, Person:symbol)\nIs_welcoming(\"Average American Public University\", \"Asian person\").\n.decl Is_welcoming(Organization:symbol, Person:symbol)\nIs_welcoming(\"Average American Public University\", \"Hispanic person\").\n.decl Answer()\nAnswer() :- Is_welcoming(\"Ku Klux Klan\", person), Is_welcoming(\"Average American Public University\", person).\n.output Answer", "completions": [".decl Is_welcoming(Organization:symbol, Person:symbol)\nIs_welcoming(\"Ku Klux Klan\", \"White person\").\n.decl Is_welcoming(Organization:symbol, Person:symbol)\nIs_welcoming(\"Average American Public University\", \"White person\").\n.decl Is_welcoming(Organization:symbol, Person:symbol)\nIs_welcoming(\"Average American Public University\", \"Black person\").\n.decl Is_welcoming(Organization:symbol, Person:symbol)\nIs_welcoming(\"Average American Public University\", \"Asian person\").\n.decl Is_welcoming(Organization:symbol, Person:symbol)\nIs_welcoming(\"Average American Public University\", \"Hispanic person\").\n.decl Answer()\nAnswer() :- Is_welcoming(\"Ku Klux Klan\", person), Is_welcoming(\"Average American Public University\", person).\n.output Answer"]}
{"id": 1212, "answer": true, "completion": ".decl Lasted_n_episodes(Show:symbol, N_episodes:float)\nLasted_n_episodes(\"Desperate Housewives\", 180).\nLasted_n_episodes(\"Lois & Clark: The New Adventures of Superman\", 87).\n.decl Answer()\nAnswer() :- Lasted_n_episodes(\"Desperate Housewives\", n_episodes1), Lasted_n_episodes(\"Lois & Clark: The New Adventures of Superman\", n_episodes2), n_episodes1 >= 2*n_episodes2.\n.output Answer", "completions": [".decl Lasted_n_episodes(Show:symbol, N_episodes:float)\nLasted_n_episodes(\"Desperate Housewives\", 180).\nLasted_n_episodes(\"Lois & Clark: The New Adventures of Superman\", 87).\n.decl Answer()\nAnswer() :- Lasted_n_episodes(\"Desperate Housewives\", n_episodes1), Lasted_n_episodes(\"Lois & Clark: The New Adventures of Superman\", n_episodes2), n_episodes1 >= 2*n_episodes2.\n.output Answer"]}
{"id": 1213, "answer": false, "completion": ".decl Appears_in(Character:symbol, Cartoon:symbol)\nAppears_in(\"Mickey Mouse\", \"The Gallopin' Gaucho\").\nAppears_in(\"Bugs Bunny\", \"The Gallopin' Gaucho\").\n.decl Released_in(Cartoon:symbol, Year:float)\nReleased_in(\"The Gallopin' Gaucho\", 1928).\n.decl Answer()\nAnswer() :- Appears_in(\"Mickey Mouse\", cartoon), Appears_in(\"Bugs Bunny\", cartoon), Released_in(cartoon, year), year = 1930.\n.output Answer", "completions": [".decl Appears_in(Character:symbol, Cartoon:symbol)\nAppears_in(\"Mickey Mouse\", \"The Gallopin' Gaucho\").\nAppears_in(\"Bugs Bunny\", \"The Gallopin' Gaucho\").\n.decl Released_in(Cartoon:symbol, Year:float)\nReleased_in(\"The Gallopin' Gaucho\", 1928).\n.decl Answer()\nAnswer() :- Appears_in(\"Mickey Mouse\", cartoon), Appears_in(\"Bugs Bunny\", cartoon), Released_in(cartoon, year), year = 1930.\n.output Answer"]}
{"id": 1214, "answer": false, "completion": ".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Terence Tao\", 230).\nHas_IQ(\"Eminem\", 92).\n.decl Answer()\nAnswer() :- Has_IQ(\"Terence Tao\", IQ1), Has_IQ(\"Eminem\", IQ2), IQ1 > IQ2.\n.output Answer", "completions": [".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Terence Tao\", 230).\nHas_IQ(\"Eminem\", 92).\n.decl Answer()\nAnswer() :- Has_IQ(\"Terence Tao\", IQ1), Has_IQ(\"Eminem\", IQ2), IQ1 > IQ2.\n.output Answer"]}
{"id": 1215, "answer": false, "completion": ".decl Has_location(Organization:symbol, Location:symbol)\nHas_location(\"Disney\", \"Los Angeles County\").\n.decl Answer()\nAnswer() :- Has_location(\"Disney\", \"Los Angeles County\").\n.output Answer", "completions": [".decl Has_location(Organization:symbol, Location:symbol)\nHas_location(\"Disney\", \"Los Angeles County\").\n.decl Answer()\nAnswer() :- Has_location(\"Disney\", \"Los Angeles County\").\n.output Answer"]}
{"id": 1216, "answer": true, "completion": ".decl Has_character(Book:symbol, Character:symbol)\nHas_character(\"The Bhagavad Gita\", \",\").\n.decl Answer()\nAnswer() :- Has_character(\"The Bhagavad Gita\", \",\").\n.output Answer", "completions": [".decl Has_character(Book:symbol, Character:symbol)\nHas_character(\"The Bhagavad Gita\", \",\").\n.decl Answer()\nAnswer() :- Has_character(\"The Bhagavad Gita\", \",\").\n.output Answer"]}
{"id": 1217, "answer": true, "completion": ".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"spaghetti\", \"wheat\").\n.decl Answer()\nAnswer() :- Contains(\"spaghetti\", \"wheat\").\n.output Answer", "completions": [".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"spaghetti\", \"wheat\").\n.decl Answer()\nAnswer() :- Contains(\"spaghetti\", \"wheat\").\n.output Answer"]}
{"id": 1218, "answer": true, "completion": ".decl Is_famous(Person:symbol)\nIs_famous(\"Kobe\").\n.decl Produces(Person:symbol, Animal_product:symbol)\nProduces(\"Kobe\", \"beef\").\n.decl Is_used_in(Animal_product:symbol, Food:symbol)\nIs_used_in(\"beef\", \"BLT\").\n.decl Answer()\nAnswer() :- Is_famous(\"Kobe\"), Produces(\"Kobe\", animal_product), Is_used_in(animal_product, \"BLT\").\n.output Answer", "completions": [".decl Is_famous(Person:symbol)\nIs_famous(\"Kobe\").\n.decl Produces(Person:symbol, Animal_product:symbol)\nProduces(\"Kobe\", \"beef\").\n.decl Is_used_in(Animal_product:symbol, Food:symbol)\nIs_used_in(\"beef\", \"BLT\").\n.decl Answer()\nAnswer() :- Is_famous(\"Kobe\"), Produces(\"Kobe\", animal_product), Is_used_in(animal_product, \"BLT\").\n.output Answer"]}
{"id": 1219, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"camel\", 100).\nHas_volume(\"dog house\", 10).\n.decl Answer()\nAnswer() :- Has_volume(\"camel\", volume1), Has_volume(\"dog house\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"camel\", 100).\nHas_volume(\"dog house\", 10).\n.decl Answer()\nAnswer() :- Has_volume(\"camel\", volume1), Has_volume(\"dog house\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 1220, "answer": true, "completion": ".decl Has_hair(Animal:symbol)\nHas_hair(\"hamster\").\nHas_hair(\"bird\").\n.decl Answer()\nAnswer() :- Has_hair(animal), !, animal != \"skeleton\".\n.output Answer", "completions": [".decl Has_hair(Animal:symbol)\nHas_hair(\"hamster\").\nHas_hair(\"bird\").\n.decl Answer()\nAnswer() :- Has_hair(animal), !, animal != \"skeleton\".\n.output Answer"]}
{"id": 1221, "answer": false, "completion": ".decl Lives_on_street(Animal:symbol, Street:symbol)\nLives_on_street(\"warthog\", \"Broadway\").\n.decl Answer()\nAnswer() :- Lives_on_street(\"warthog\", \"Broadway\").\n.output Answer", "completions": [".decl Lives_on_street(Animal:symbol, Street:symbol)\nLives_on_street(\"warthog\", \"Broadway\").\n.decl Answer()\nAnswer() :- Lives_on_street(\"warthog\", \"Broadway\").\n.output Answer"]}
{"id": 1222, "answer": true, "completion": ".decl Is_black(Person:symbol)\nIs_black(\"Opal Tometi\").\n.decl Is_white(Person:symbol)\nIs_white(\"David Duke\").\n.decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"David Duke\", \"Ku Klux Klan\").\n.decl Answer()\nAnswer() :- Is_black(\"Opal Tometi\"), !, Is_member_of(\"Opal Tometi\", \"Ku Klux Klan\").\n.output Answer", "completions": [".decl Is_black(Person:symbol)\nIs_black(\"Opal Tometi\").\n.decl Is_white(Person:symbol)\nIs_white(\"David Duke\").\n.decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"David Duke\", \"Ku Klux Klan\").\n.decl Answer()\nAnswer() :- Is_black(\"Opal Tometi\"), !, Is_member_of(\"Opal Tometi\", \"Ku Klux Klan\").\n.output Answer"]}
{"id": 1223, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"cory catfish\", \"living fish\").\n.decl Answer()\nAnswer() :- Eats(\"cory catfish\", \"living fish\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"cory catfish\", \"living fish\").\n.decl Answer()\nAnswer() :- Eats(\"cory catfish\", \"living fish\").\n.output Answer"]}
{"id": 1224, "answer": false, "completion": ".decl Has_vitamin_D_deficiency(Person:symbol)\nHas_vitamin_D_deficiency(\"John Muir\").\n.decl Lives_in_latitude_range(Person:symbol, Latitude_range:symbol)\nLives_in_latitude_range(\"John Muir\", \"30-60\").\n.decl Answer()\nAnswer() :- Has_vitamin_D_deficiency(\"John Muir\"), Lives_in_latitude_range(\"John Muir\", latitude_range), latitude_range != \"30-60\".\n.output Answer", "completions": [".decl Has_vitamin_D_deficiency(Person:symbol)\nHas_vitamin_D_deficiency(\"John Muir\").\n.decl Lives_in_latitude_range(Person:symbol, Latitude_range:symbol)\nLives_in_latitude_range(\"John Muir\", \"30-60\").\n.decl Answer()\nAnswer() :- Has_vitamin_D_deficiency(\"John Muir\"), Lives_in_latitude_range(\"John Muir\", latitude_range), latitude_range != \"30-60\".\n.output Answer"]}
{"id": 1225, "answer": false, "completion": ".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"1700s judge\", \"wig\").\nWears(\"1700s judge\", \"robe\").\nWears(\"1700s judge\", \"stockings\").\nWears(\"1700s judge\", \"shoes\").\n.decl Answer()\nAnswer() :- Wears(\"1700s judge\", clothing), clothing != \"wig\".\n.output Answer", "completions": [".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"1700s judge\", \"wig\").\nWears(\"1700s judge\", \"robe\").\nWears(\"1700s judge\", \"stockings\").\nWears(\"1700s judge\", \"shoes\").\n.decl Answer()\nAnswer() :- Wears(\"1700s judge\", clothing), clothing != \"wig\".\n.output Answer"]}
{"id": 1226, "answer": true, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"IKEA\", \"furniture\").\nSells(\"IKEA\", \"meatballs\").\nSells(\"Walmart\", \"furniture\").\nSells(\"Walmart\", \"meatballs\").\n.decl Answer()\nAnswer() :- Sells(store, \"furniture\"), Sells(store, \"meatballs\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"IKEA\", \"furniture\").\nSells(\"IKEA\", \"meatballs\").\nSells(\"Walmart\", \"furniture\").\nSells(\"Walmart\", \"meatballs\").\n.decl Answer()\nAnswer() :- Sells(store, \"furniture\"), Sells(store, \"meatballs\").\n.output Answer"]}
{"id": 1227, "answer": true, "completion": ".decl Produces(Source:symbol, Product:symbol)\nProduces(\"hydropower\", \"chaff\").\n.decl Answer()\nAnswer() :- Produces(\"hydropower\", \"chaff\").\n.output Answer", "completions": [".decl Produces(Source:symbol, Product:symbol)\nProduces(\"hydropower\", \"chaff\").\n.decl Answer()\nAnswer() :- Produces(\"hydropower\", \"chaff\").\n.output Answer"]}
{"id": 1228, "answer": true, "completion": ".decl Has_art_style(Show:symbol, Art_style:symbol)\nHas_art_style(\"Family Guy\", \"animated\").\nHas_art_style(\"Family Guy\", \"cartoon\").\nHas_art_style(\"Family Guy\", \"comedy\").\nHas_art_style(\"American Dad\", \"animated\").\nHas_art_style(\"American Dad\", \"cartoon\").\nHas_art_style(\"American Dad\", \"comedy\").\n.decl Answer()\nAnswer() :- Has_art_style(\"Family Guy\", art_style), Has_art_style(\"American Dad\", art_style).\n.output Answer", "completions": [".decl Has_art_style(Show:symbol, Art_style:symbol)\nHas_art_style(\"Family Guy\", \"animated\").\nHas_art_style(\"Family Guy\", \"cartoon\").\nHas_art_style(\"Family Guy\", \"comedy\").\nHas_art_style(\"American Dad\", \"animated\").\nHas_art_style(\"American Dad\", \"cartoon\").\nHas_art_style(\"American Dad\", \"comedy\").\n.decl Answer()\nAnswer() :- Has_art_style(\"Family Guy\", art_style), Has_art_style(\"American Dad\", art_style).\n.output Answer"]}
{"id": 1229, "answer": true, "completion": ".decl Is_vegan(Person:symbol)\nIs_vegan(\"John\").\n.decl Is_vegan_friendly(Food:symbol)\nIs_vegan_friendly(\"toast\").\n.decl Is_vegan_friendly(Food:symbol, Butter:symbol)\nIs_vegan_friendly(\"toast\", \"margarine\").\n.decl Answer()\nAnswer() :- Is_vegan(\"John\"), Is_vegan_friendly(\"toast\").\nAnswer() :- Is_vegan(\"John\"), Is_vegan_friendly(\"toast\", butter), butter != \"butter\".\n.output Answer", "completions": [".decl Is_vegan(Person:symbol)\nIs_vegan(\"John\").\n.decl Is_vegan_friendly(Food:symbol)\nIs_vegan_friendly(\"toast\").\n.decl Is_vegan_friendly(Food:symbol, Butter:symbol)\nIs_vegan_friendly(\"toast\", \"margarine\").\n.decl Answer()\nAnswer() :- Is_vegan(\"John\"), Is_vegan_friendly(\"toast\").\nAnswer() :- Is_vegan(\"John\"), Is_vegan_friendly(\"toast\", butter), butter != \"butter\".\n.output Answer"]}
{"id": 1230, "answer": true, "completion": ".decl Has_operating_system(Computer:symbol, Operating_system:symbol)\nHas_operating_system(\"Macbook\", \"OS X\").\nHas_operating_system(\"Macbook\", \"Ubuntu\").\nHas_operating_system(\"Macbook\", \"Windows\").\nHas_operating_system(\"iMac\", \"OS X\").\nHas_operating_system(\"iMac\", \"Ubuntu\").\nHas_operating_system(\"iMac\", \"Windows\").\nHas_operating_system(\"Mac mini\", \"OS X\").\nHas_operating_system(\"Mac mini\", \"Ubuntu\").\nHas_operating_system(\"Mac mini\", \"Windows\").\nHas_operating_system(\"Mac Pro\", \"OS X\").\nHas_operating_system(\"Mac Pro\", \"Ubuntu\").\nHas_operating_system(\"Mac Pro\", \"Windows\").\n.decl Answer()\nAnswer() :- Has_operating_system(computer, \"Ubuntu\"), Has_operating_system(computer2, \"Ubuntu\"), Has_operating_system(computer3, \"Ubuntu\"), Has_operating_system(computer4, \"Ubuntu\"), Has_operating_system(computer5, \"Ubuntu\"), Has_operating_system(computer6, \"Ubuntu\"), Has_operating_system(computer7, \"Ubuntu\"), Has_operating_system(computer8, \"Ubuntu\"), Has_operating_system(computer9, \"Ubuntu\"), Has_operating_system(computer10, \"Ubuntu\"), Has_operating_system(computer11, \"Ubuntu\"), Has_operating_system(computer12, \"Ubuntu\"), Has_operating_system(computer13, \"Ubuntu\"), Has_operating_system(computer14, \"Ubuntu\"), Has_operating_system(computer15, \"Ubuntu\"), Has_operating_system(computer16, \"Ubuntu\"), Has_operating_system(computer17, \"Ubuntu\"), Has_operating_system(computer18, \"Ubuntu\"), Has_operating_system(computer19, \"Ubuntu\"), Has_operating_system(computer20, \"Ubuntu\"), Has_operating_system(computer21, \"Ubuntu\"), Has_operating_system(computer22, \"Ubuntu\"), Has_operating_system(computer23, \"Ubuntu\"), Has_operating_system(computer24, \"Ubuntu\"), Has_operating_system(computer25, \"Ubuntu\"), Has_operating_system(computer26, \"Ubuntu\"), Has_operating_system(computer27, \"Ubuntu\"), Has_operating_system(computer28, \"Ubuntu\"), Has_operating_system(computer29, \"Ubuntu\"), Has_operating_system(computer30, \"Ubuntu\"), Has_operating_system(computer31, \"Ubuntu\"), Has_operating_system(computer32, \"Ubuntu\"), Has_operating_system(computer33, \"Ubuntu\"), Has_operating_system(computer34, \"Ubuntu\"), Has_operating_system(computer35, \"Ubuntu\"), Has_operating_system(computer36, \"Ubuntu\"), Has_operating_system(computer37, \"Ubuntu\"), Has_operating_system(computer38, \"Ubuntu\"), Has_operating_system(computer39, \"Ubuntu\"), Has_operating_system(computer40, \"Ubuntu\"), Has_operating_system(computer41, \"Ubuntu\"), Has_operating_system(computer42, \"Ubuntu\"), Has_operating_system", "completions": [".decl Has_operating_system(Computer:symbol, Operating_system:symbol)\nHas_operating_system(\"Macbook\", \"OS X\").\nHas_operating_system(\"Macbook\", \"Ubuntu\").\nHas_operating_system(\"Macbook\", \"Windows\").\nHas_operating_system(\"iMac\", \"OS X\").\nHas_operating_system(\"iMac\", \"Ubuntu\").\nHas_operating_system(\"iMac\", \"Windows\").\nHas_operating_system(\"Mac mini\", \"OS X\").\nHas_operating_system(\"Mac mini\", \"Ubuntu\").\nHas_operating_system(\"Mac mini\", \"Windows\").\nHas_operating_system(\"Mac Pro\", \"OS X\").\nHas_operating_system(\"Mac Pro\", \"Ubuntu\").\nHas_operating_system(\"Mac Pro\", \"Windows\").\n.decl Answer()\nAnswer() :- Has_operating_system(computer, \"Ubuntu\"), Has_operating_system(computer2, \"Ubuntu\"), Has_operating_system(computer3, \"Ubuntu\"), Has_operating_system(computer4, \"Ubuntu\"), Has_operating_system(computer5, \"Ubuntu\"), Has_operating_system(computer6, \"Ubuntu\"), Has_operating_system(computer7, \"Ubuntu\"), Has_operating_system(computer8, \"Ubuntu\"), Has_operating_system(computer9, \"Ubuntu\"), Has_operating_system(computer10, \"Ubuntu\"), Has_operating_system(computer11, \"Ubuntu\"), Has_operating_system(computer12, \"Ubuntu\"), Has_operating_system(computer13, \"Ubuntu\"), Has_operating_system(computer14, \"Ubuntu\"), Has_operating_system(computer15, \"Ubuntu\"), Has_operating_system(computer16, \"Ubuntu\"), Has_operating_system(computer17, \"Ubuntu\"), Has_operating_system(computer18, \"Ubuntu\"), Has_operating_system(computer19, \"Ubuntu\"), Has_operating_system(computer20, \"Ubuntu\"), Has_operating_system(computer21, \"Ubuntu\"), Has_operating_system(computer22, \"Ubuntu\"), Has_operating_system(computer23, \"Ubuntu\"), Has_operating_system(computer24, \"Ubuntu\"), Has_operating_system(computer25, \"Ubuntu\"), Has_operating_system(computer26, \"Ubuntu\"), Has_operating_system(computer27, \"Ubuntu\"), Has_operating_system(computer28, \"Ubuntu\"), Has_operating_system(computer29, \"Ubuntu\"), Has_operating_system(computer30, \"Ubuntu\"), Has_operating_system(computer31, \"Ubuntu\"), Has_operating_system(computer32, \"Ubuntu\"), Has_operating_system(computer33, \"Ubuntu\"), Has_operating_system(computer34, \"Ubuntu\"), Has_operating_system(computer35, \"Ubuntu\"), Has_operating_system(computer36, \"Ubuntu\"), Has_operating_system(computer37, \"Ubuntu\"), Has_operating_system(computer38, \"Ubuntu\"), Has_operating_system(computer39, \"Ubuntu\"), Has_operating_system(computer40, \"Ubuntu\"), Has_operating_system(computer41, \"Ubuntu\"), Has_operating_system(computer42, \"Ubuntu\"), Has_operating_system"]}
{"id": 1231, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"Common warthog\", \"grassland\").\n.decl Answer()\nAnswer() :- Lives_in(\"Common warthog\", \"grassland\"), !Lives_in(\"Common warthog\", \"greenhouse\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"Common warthog\", \"grassland\").\n.decl Answer()\nAnswer() :- Lives_in(\"Common warthog\", \"grassland\"), !Lives_in(\"Common warthog\", \"greenhouse\").\n.output Answer"]}
{"id": 1232, "answer": false, "completion": ".decl Has_average_bulk_carrier(Bulk_carrier:symbol)\nHas_average_bulk_carrier(\"average bulk carrier\").\n.decl Is_ideal_for_transporting(Bulk_carrier:symbol, Chemical:symbol, Temperature:symbol)\nIs_ideal_for_transporting(\"average bulk carrier\", \"bromine\", \"room temperature\").\n.decl Answer()\nAnswer() :- Has_average_bulk_carrier(bulk_carrier), Is_ideal_for_transporting(bulk_carrier, \"bromine\", \"room temperature\").\n.output Answer", "completions": [".decl Has_average_bulk_carrier(Bulk_carrier:symbol)\nHas_average_bulk_carrier(\"average bulk carrier\").\n.decl Is_ideal_for_transporting(Bulk_carrier:symbol, Chemical:symbol, Temperature:symbol)\nIs_ideal_for_transporting(\"average bulk carrier\", \"bromine\", \"room temperature\").\n.decl Answer()\nAnswer() :- Has_average_bulk_carrier(bulk_carrier), Is_ideal_for_transporting(bulk_carrier, \"bromine\", \"room temperature\").\n.output Answer"]}
{"id": 1233, "answer": true, "completion": ".decl Is_in_country(City:symbol, Country:symbol)\nIs_in_country(\"Bern\", \"Switzerland\").\nIs_in_country(\"Zurich\", \"Switzerland\").\nIs_in_country(\"Geneva\", \"Switzerland\").\nIs_in_country(\"Basel\", \"Switzerland\").\nIs_in_country(\"Lausanne\", \"Switzerland\").\n.decl Is_capital(City:symbol)\nIs_capital(\"Bern\").\n.decl Answer()\nAnswer() :- Is_in_country(\"Bern\", \"Switzerland\"), Is_capital(\"Bern\").\n.output Answer", "completions": [".decl Is_in_country(City:symbol, Country:symbol)\nIs_in_country(\"Bern\", \"Switzerland\").\nIs_in_country(\"Zurich\", \"Switzerland\").\nIs_in_country(\"Geneva\", \"Switzerland\").\nIs_in_country(\"Basel\", \"Switzerland\").\nIs_in_country(\"Lausanne\", \"Switzerland\").\n.decl Is_capital(City:symbol)\nIs_capital(\"Bern\").\n.decl Answer()\nAnswer() :- Is_in_country(\"Bern\", \"Switzerland\"), Is_capital(\"Bern\").\n.output Answer"]}
{"id": 1234, "answer": true, "completion": ".decl Has_genre(Movie:symbol, Genre:symbol)\nHas_genre(\"United 93\", \"drama\").\n.decl Answer()\nAnswer() :- Has_genre(\"United 93\", \"tearjerker\").\n.output Answer", "completions": [".decl Has_genre(Movie:symbol, Genre:symbol)\nHas_genre(\"United 93\", \"drama\").\n.decl Answer()\nAnswer() :- Has_genre(\"United 93\", \"tearjerker\").\n.output Answer"]}
{"id": 1235, "answer": true, "completion": ".decl Buried_at(Person:symbol, Church:symbol)\nBuried_at(\"Isaac Newton\", \"Westminster Abbey\").\nBuried_at(\"Charles Dickens\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_at(\"Isaac Newton\", \"Westminster Abbey\"), Buried_at(\"Charles Dickens\", \"Westminster Abbey\").\n.output Answer", "completions": [".decl Buried_at(Person:symbol, Church:symbol)\nBuried_at(\"Isaac Newton\", \"Westminster Abbey\").\nBuried_at(\"Charles Dickens\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_at(\"Isaac Newton\", \"Westminster Abbey\"), Buried_at(\"Charles Dickens\", \"Westminster Abbey\").\n.output Answer"]}
{"id": 1236, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"bowling pin\", 0.05).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Snowdon\", 0.0008).\n.decl Answer()\nAnswer() :- Has_height(\"bowling pin\", height1), Has_volume(\"Snowdon\", volume1), height1 * 0.0008 > volume1.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"bowling pin\", 0.05).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Snowdon\", 0.0008).\n.decl Answer()\nAnswer() :- Has_height(\"bowling pin\", height1), Has_volume(\"Snowdon\", volume1), height1 * 0.0008 > volume1.\n.output Answer"]}
{"id": 1237, "answer": true, "completion": ".decl Is_associated_with(Menthol:symbol, Thanksgiving:symbol)\nIs_associated_with(\"Menthol\", \"Thanksgiving\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Menthol\", \"Thanksgiving\").\n.output Answer", "completions": [".decl Is_associated_with(Menthol:symbol, Thanksgiving:symbol)\nIs_associated_with(\"Menthol\", \"Thanksgiving\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"Menthol\", \"Thanksgiving\").\n.output Answer"]}
{"id": 1238, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"jackfruit\", 35).\n.decl Answer()\nAnswer() :- Has_mass(\"jackfruit\", mass), mass < 10.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"jackfruit\", 35).\n.decl Answer()\nAnswer() :- Has_mass(\"jackfruit\", mass), mass < 10.\n.output Answer"]}
{"id": 1239, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"honey badger\", 0.0008).\nHas_volume(\"oven\", 0.1).\n.decl Answer()\nAnswer() :- Has_volume(\"honey badger\", volume1), Has_volume(\"oven\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"honey badger\", 0.0008).\nHas_volume(\"oven\", 0.1).\n.decl Answer()\nAnswer() :- Has_volume(\"honey badger\", volume1), Has_volume(\"oven\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 1240, "answer": false, "completion": ".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"winter\", 3).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"Phineas and Ferb\", 12).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"Phineas and Ferb\", n_months1), Last_n_months(\"winter\", n_months2),  n_months1 <= n_months2.\n.output Answer", "completions": [".decl Last_n_months(Event:symbol, N_months:float)\nLast_n_months(\"winter\", 3).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"Phineas and Ferb\", 12).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"Phineas and Ferb\", n_months1), Last_n_months(\"winter\", n_months2),  n_months1 <= n_months2.\n.output Answer"]}
{"id": 1241, "answer": true, "completion": ".decl Has_vitamin(Food:symbol, Vitamin:symbol)\nHas_vitamin(\"orange\", \"vitamin C\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"pirate\", \"orange\").\n.decl Answer()\nAnswer() :- Eats(\"pirate\", food), Has_vitamin(food, \"vitamin C\").\n.output Answer", "completions": [".decl Has_vitamin(Food:symbol, Vitamin:symbol)\nHas_vitamin(\"orange\", \"vitamin C\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"pirate\", \"orange\").\n.decl Answer()\nAnswer() :- Eats(\"pirate\", food), Has_vitamin(food, \"vitamin C\").\n.output Answer"]}
{"id": 1242, "answer": false, "completion": ".decl Named_by(Country:symbol, Explorer:symbol)\nNamed_by(\"Saint Vincent and the Grenadines\", \"Christopher Columbus\").\nNamed_by(\"Saint Vincent and the Grenadines\", \"Amerigo Vespucci\").\n.decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Christopher Columbus\", \"Italian\").\nIs_nationality(\"Amerigo Vespucci\", \"Italian\").\n.decl Answer()\nAnswer() :- Named_by(\"Saint Vincent and the Grenadines\", explorer), Is_nationality(explorer, \"Italian\").\n.output Answer", "completions": [".decl Named_by(Country:symbol, Explorer:symbol)\nNamed_by(\"Saint Vincent and the Grenadines\", \"Christopher Columbus\").\nNamed_by(\"Saint Vincent and the Grenadines\", \"Amerigo Vespucci\").\n.decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Christopher Columbus\", \"Italian\").\nIs_nationality(\"Amerigo Vespucci\", \"Italian\").\n.decl Answer()\nAnswer() :- Named_by(\"Saint Vincent and the Grenadines\", explorer), Is_nationality(explorer, \"Italian\").\n.output Answer"]}
{"id": 1243, "answer": true, "completion": ".decl Uses_internet_slang(Person:symbol)\n.decl Answer()\nAnswer() :- Uses_internet_slang(\"Alfred Hitchcock\").\n.output Answer", "completions": [".decl Uses_internet_slang(Person:symbol)\n.decl Answer()\nAnswer() :- Uses_internet_slang(\"Alfred Hitchcock\").\n.output Answer"]}
{"id": 1244, "answer": true, "completion": ".decl Is_a_member_of(Person:symbol, Party:symbol)\nIs_a_member_of(\"George W. Bush\", \"Republican\").\nIs_a_member_of(\"Bill Clinton\", \"Democrat\").\n.decl Supports(Person:symbol, Welfare_program:symbol)\nSupports(\"Bill Clinton\", \"welfare\").\n.decl Answer()\nAnswer() :- Is_a_member_of(person, \"Republican\"), !Supports(person, \"welfare\").\n.output Answer", "completions": [".decl Is_a_member_of(Person:symbol, Party:symbol)\nIs_a_member_of(\"George W. Bush\", \"Republican\").\nIs_a_member_of(\"Bill Clinton\", \"Democrat\").\n.decl Supports(Person:symbol, Welfare_program:symbol)\nSupports(\"Bill Clinton\", \"welfare\").\n.decl Answer()\nAnswer() :- Is_a_member_of(person, \"Republican\"), !Supports(person, \"welfare\").\n.output Answer"]}
{"id": 1245, "answer": true, "completion": ".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Cheshire Cat\", \"Cheshire\").\n.decl Sings(Person:symbol, Song:symbol)\nSings(\"Cheshire Cat\", \"La Marseillaise\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Cheshire\"), Sings(person, \"La Marseillaise\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Cheshire Cat\", \"Cheshire\").\n.decl Sings(Person:symbol, Song:symbol)\nSings(\"Cheshire Cat\", \"La Marseillaise\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Cheshire\"), Sings(person, \"La Marseillaise\").\n.output Answer"]}
{"id": 1246, "answer": true, "completion": ".decl Has_protein(Food:symbol, Protein:float)\nHas_protein(\"maize\", 3.7).\nHas_protein(\"chicken breast\", 26).\n.decl Answer()\nAnswer() :- Has_protein(\"maize\", protein1), Has_protein(\"chicken breast\", protein2), protein1 < protein2.\n.output Answer", "completions": [".decl Has_protein(Food:symbol, Protein:float)\nHas_protein(\"maize\", 3.7).\nHas_protein(\"chicken breast\", 26).\n.decl Answer()\nAnswer() :- Has_protein(\"maize\", protein1), Has_protein(\"chicken breast\", protein2), protein1 < protein2.\n.output Answer"]}
{"id": 1247, "answer": true, "completion": ".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"compact disc\", 700).\nHas_melting_point(\"magma\", 1200).\n.decl Answer()\nAnswer() :- Has_melting_point(\"compact disc\", melting_point1), Has_melting_point(\"magma\", melting_point2), melting_point1 < melting_point2.\n.output Answer", "completions": [".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"compact disc\", 700).\nHas_melting_point(\"magma\", 1200).\n.decl Answer()\nAnswer() :- Has_melting_point(\"compact disc\", melting_point1), Has_melting_point(\"magma\", melting_point2), melting_point1 < melting_point2.\n.output Answer"]}
{"id": 1248, "answer": false, "completion": ".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Alexander Hamilton\", \"1755-1804\").\nLives_in_time(\"koala\", \"1700-present\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Alexander Hamilton\", time1), Lives_in_time(\"koala\", time2), time1 < time2.\n.output Answer", "completions": [".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Alexander Hamilton\", \"1755-1804\").\nLives_in_time(\"koala\", \"1700-present\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Alexander Hamilton\", time1), Lives_in_time(\"koala\", time2), time1 < time2.\n.output Answer"]}
{"id": 1249, "answer": true, "completion": ".decl Has_writing_style(Work:symbol, Writing_style:symbol)\nHas_writing_style(\"Othello\", \"complex\").\n.decl Has_option(Student:symbol, Option:symbol)\nHas_option(\"student who struggles to understand the writing style of Othello\", \"simplified version\").\n.decl Answer()\nAnswer() :- Has_writing_style(\"Othello\", \"complex\"), Has_option(\"student who struggles to understand the writing style of Othello\", \"simplified version\").\n.output Answer", "completions": [".decl Has_writing_style(Work:symbol, Writing_style:symbol)\nHas_writing_style(\"Othello\", \"complex\").\n.decl Has_option(Student:symbol, Option:symbol)\nHas_option(\"student who struggles to understand the writing style of Othello\", \"simplified version\").\n.decl Answer()\nAnswer() :- Has_writing_style(\"Othello\", \"complex\"), Has_option(\"student who struggles to understand the writing style of Othello\", \"simplified version\").\n.output Answer"]}
{"id": 1250, "answer": true, "completion": ".decl Has_n_planets(Year:symbol, N_planets:float)\nHas_n_planets(\"Goofy's first year\", 9).\n.decl Answer()\nAnswer() :- Has_n_planets(\"Goofy's first year\", n_planets).\n.output Answer", "completions": [".decl Has_n_planets(Year:symbol, N_planets:float)\nHas_n_planets(\"Goofy's first year\", 9).\n.decl Answer()\nAnswer() :- Has_n_planets(\"Goofy's first year\", n_planets).\n.output Answer"]}
{"id": 1251, "answer": false, "completion": ".decl Is_from(Person:symbol, Place:symbol)\nIs_from(\"Dracula\", \"Bucharest\").\n.decl Answer()\nAnswer() :- Is_from(\"Dracula\", \"Bucharest\").\n.output Answer", "completions": [".decl Is_from(Person:symbol, Place:symbol)\nIs_from(\"Dracula\", \"Bucharest\").\n.decl Answer()\nAnswer() :- Is_from(\"Dracula\", \"Bucharest\").\n.output Answer"]}
{"id": 1252, "answer": false, "completion": ".decl Contains(Book:symbol, Topic:symbol)\nContains(\"War of the Worlds\", \"cosmic rays\").\n.decl Answer()\nAnswer() :- Contains(\"War of the Worlds\", \"cosmic rays\").\n.output Answer", "completions": [".decl Contains(Book:symbol, Topic:symbol)\nContains(\"War of the Worlds\", \"cosmic rays\").\n.decl Answer()\nAnswer() :- Contains(\"War of the Worlds\", \"cosmic rays\").\n.output Answer"]}
{"id": 1253, "answer": true, "completion": ".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"mongoose\", \"brown\").\nHas_color(\"mongoose\", \"yellow\").\nHas_color(\"mongoose\", \"white\").\nHas_color(\"mongoose\", \"black\").\nHas_color(\"mongoose\", \"gray\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"desert\", \"Sahara\").\nHappens_in_place(\"desert\", \"Gobi\").\nHappens_in_place(\"desert\", \"Arabian\").\n.decl Answer()\nAnswer() :- Has_color(\"mongoose\", color), Happens_in_place(\"desert\", place), (color = \"brown\" ; color = \"yellow\" ; color = \"white\" ; color = \"black\" ; color = \"gray\").\n.output Answer", "completions": [".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"mongoose\", \"brown\").\nHas_color(\"mongoose\", \"yellow\").\nHas_color(\"mongoose\", \"white\").\nHas_color(\"mongoose\", \"black\").\nHas_color(\"mongoose\", \"gray\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"desert\", \"Sahara\").\nHappens_in_place(\"desert\", \"Gobi\").\nHappens_in_place(\"desert\", \"Arabian\").\n.decl Answer()\nAnswer() :- Has_color(\"mongoose\", color), Happens_in_place(\"desert\", place), (color = \"brown\" ; color = \"yellow\" ; color = \"white\" ; color = \"black\" ; color = \"gray\").\n.output Answer"]}
{"id": 1254, "answer": true, "completion": ".decl Treats(Treatment:symbol, Disease:symbol)\nTreats(\"Seroquel\", \"depression\").\nTreats(\"Zoloft\", \"depression\").\nTreats(\"Prozac\", \"depression\").\n.decl Answer()\nAnswer() :- Treats(\"Seroquel\", \"depression\").\nAnswer() :- Treats(treatment, \"depression\"), Treats(\"Seroquel\", disease1), Treats(treatment, disease2), disease1 < disease2.\n.output Answer", "completions": [".decl Treats(Treatment:symbol, Disease:symbol)\nTreats(\"Seroquel\", \"depression\").\nTreats(\"Zoloft\", \"depression\").\nTreats(\"Prozac\", \"depression\").\n.decl Answer()\nAnswer() :- Treats(\"Seroquel\", \"depression\").\nAnswer() :- Treats(treatment, \"depression\"), Treats(\"Seroquel\", disease1), Treats(treatment, disease2), disease1 < disease2.\n.output Answer"]}
{"id": 1255, "answer": true, "completion": ".decl Contains(Place:symbol, Object:symbol)\nContains(\"Taco Bell kitchen\", \"cinnamon\").\n.decl Answer()\nAnswer() :- Contains(\"Taco Bell kitchen\", \"cinnamon\").\n.output Answer\n\n", "completions": [".decl Contains(Place:symbol, Object:symbol)\nContains(\"Taco Bell kitchen\", \"cinnamon\").\n.decl Answer()\nAnswer() :- Contains(\"Taco Bell kitchen\", \"cinnamon\").\n.output Answer\n\n"]}
{"id": 1256, "answer": true, "completion": ".decl Has_discount(Organization:symbol, Place:symbol)\nHas_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.decl Answer()\nAnswer() :- Has_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.output Answer", "completions": [".decl Has_discount(Organization:symbol, Place:symbol)\nHas_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.decl Answer()\nAnswer() :- Has_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.output Answer"]}
{"id": 1257, "answer": true, "completion": ".decl Has_date(Submission:symbol, Date:symbol)\nHas_date(\"Thiago Moises May 13 2020 submission\", \"May 13 2020\").\n.decl Happens_after(Event1:symbol, Event2:symbol)\nHappens_after(\"Thiago Moises May 13 2020 submission\", \"Achilles injury\").\n.decl Answer()\nAnswer() :- Has_date(\"Thiago Moises May 13 2020 submission\", date1), Happens_after(\"Thiago Moises May 13 2020 submission\", event2), date1 > event2.\n.output Answer", "completions": [".decl Has_date(Submission:symbol, Date:symbol)\nHas_date(\"Thiago Moises May 13 2020 submission\", \"May 13 2020\").\n.decl Happens_after(Event1:symbol, Event2:symbol)\nHappens_after(\"Thiago Moises May 13 2020 submission\", \"Achilles injury\").\n.decl Answer()\nAnswer() :- Has_date(\"Thiago Moises May 13 2020 submission\", date1), Happens_after(\"Thiago Moises May 13 2020 submission\", event2), date1 > event2.\n.output Answer"]}
{"id": 1258, "answer": true, "completion": ".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"cat\", 4).\nHas_legs(\"dog\", 4).\nHas_legs(\"snake\", 0).\n.decl Answer()\nAnswer() :- Has_legs(animal, n_legs), n_legs >= 4.\n.output Answer\n\n\n", "completions": [".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"cat\", 4).\nHas_legs(\"dog\", 4).\nHas_legs(\"snake\", 0).\n.decl Answer()\nAnswer() :- Has_legs(animal, n_legs), n_legs >= 4.\n.output Answer\n\n\n"]}
{"id": 1259, "answer": true, "completion": ".decl Is_pro_life(Person:symbol)\nIs_pro_life(\"Nancy Pelosi\").\n.decl Answer()\nAnswer() :- Is_pro_life(\"Nancy Pelosi\").\n.output Answer", "completions": [".decl Is_pro_life(Person:symbol)\nIs_pro_life(\"Nancy Pelosi\").\n.decl Answer()\nAnswer() :- Is_pro_life(\"Nancy Pelosi\").\n.output Answer"]}
{"id": 1260, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"The Daily Mirror\", 0.1).\nHas_mass(\"campfire\", 1).\n.decl Answer()\nAnswer() :- Has_mass(\"The Daily Mirror\", mass1), Has_mass(\"campfire\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"The Daily Mirror\", 0.1).\nHas_mass(\"campfire\", 1).\n.decl Answer()\nAnswer() :- Has_mass(\"The Daily Mirror\", mass1), Has_mass(\"campfire\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 1261, "answer": true, "completion": ".decl Performs(Person:symbol, Genre:symbol)\nPerforms(\"Ludacris\", \"hip hop\").\n.decl Is_subgenre(Genre1:symbol, Genre2:symbol)\nIs_subgenre(\"hip hop\", \"rap\").\nIs_subgenre(\"rap\", \"classical music\").\n.decl Answer()\nAnswer() :- Performs(\"Ludacris\", \"classical music\").\nAnswer() :- Performs(\"Ludacris\", genre1), Is_subgenre(genre1, \"classical music\").\n.output Answer", "completions": [".decl Performs(Person:symbol, Genre:symbol)\nPerforms(\"Ludacris\", \"hip hop\").\n.decl Is_subgenre(Genre1:symbol, Genre2:symbol)\nIs_subgenre(\"hip hop\", \"rap\").\nIs_subgenre(\"rap\", \"classical music\").\n.decl Answer()\nAnswer() :- Performs(\"Ludacris\", \"classical music\").\nAnswer() :- Performs(\"Ludacris\", genre1), Is_subgenre(genre1, \"classical music\").\n.output Answer"]}
{"id": 1262, "answer": true, "completion": ".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"Recep Tayyip Erdoğan\", \"Turkey\").\n.decl Is_a_food(Food:symbol, Country:symbol)\nIs_a_food(\"börek\", \"Turkey\").\n.decl Answer()\nAnswer() :- Is_from(\"Recep Tayyip Erdoğan\", \"Turkey\"), Is_a_food(\"börek\", \"Turkey\").\n.output Answer", "completions": [".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"Recep Tayyip Erdoğan\", \"Turkey\").\n.decl Is_a_food(Food:symbol, Country:symbol)\nIs_a_food(\"börek\", \"Turkey\").\n.decl Answer()\nAnswer() :- Is_from(\"Recep Tayyip Erdoğan\", \"Turkey\"), Is_a_food(\"börek\", \"Turkey\").\n.output Answer"]}
{"id": 1263, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"2 Euro coin\", 7.5).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"2 Euro coin\", 0.067).\n.decl Answer()\nAnswer() :- Has_mass(\"2 Euro coin\", mass), Has_volume(\"2 Euro coin\", volume), mass/volume > 1.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"2 Euro coin\", 7.5).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"2 Euro coin\", 0.067).\n.decl Answer()\nAnswer() :- Has_mass(\"2 Euro coin\", mass), Has_volume(\"2 Euro coin\", volume), mass/volume > 1.\n.output Answer"]}
{"id": 1264, "answer": true, "completion": ".decl Has_color(Light:symbol, Color:symbol)\nHas_color(\"white light\", \"no color\").\n.decl Answer()\nAnswer() :- Has_color(\"white light\", \"no color\").\n.output Answer", "completions": [".decl Has_color(Light:symbol, Color:symbol)\nHas_color(\"white light\", \"no color\").\n.decl Answer()\nAnswer() :- Has_color(\"white light\", \"no color\").\n.output Answer"]}
{"id": 1265, "answer": true, "completion": ".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Isaac\", \"Abraham\").\nHas_father(\"Marvin Gay Sr.\", \"Marvin Gay Jr.\").\n.decl Almost_commits_crime(Person:symbol, Crime:symbol)\nAlmost_commits_crime(\"Abraham\", \"sacrifice\").\nAlmost_commits_crime(\"Marvin Gay Sr.\", \"murder\").\n.decl Answer()\nAnswer() :- Has_father(\"Isaac\", father1), Almost_commits_crime(father1, crime1), Has_father(\"Marvin Gay Sr.\", father2), Almost_commits_crime(father2, crime2), crime1 = crime2.\n.output Answer", "completions": [".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Isaac\", \"Abraham\").\nHas_father(\"Marvin Gay Sr.\", \"Marvin Gay Jr.\").\n.decl Almost_commits_crime(Person:symbol, Crime:symbol)\nAlmost_commits_crime(\"Abraham\", \"sacrifice\").\nAlmost_commits_crime(\"Marvin Gay Sr.\", \"murder\").\n.decl Answer()\nAnswer() :- Has_father(\"Isaac\", father1), Almost_commits_crime(father1, crime1), Has_father(\"Marvin Gay Sr.\", father2), Almost_commits_crime(father2, crime2), crime1 = crime2.\n.output Answer"]}
{"id": 1266, "answer": true, "completion": ".decl Eats(Animal:symbol, Food:symbol)\nEats(\"owl monkey\", \"insects\").\nEats(\"owl monkey\", \"fruit\").\nEats(\"owl monkey\", \"leaves\").\nEats(\"owl monkey\", \"seeds\").\n.decl Answer()\nAnswer() :- Eats(\"owl monkey\", \"strawberry\").\n.output Answer", "completions": [".decl Eats(Animal:symbol, Food:symbol)\nEats(\"owl monkey\", \"insects\").\nEats(\"owl monkey\", \"fruit\").\nEats(\"owl monkey\", \"leaves\").\nEats(\"owl monkey\", \"seeds\").\n.decl Answer()\nAnswer() :- Eats(\"owl monkey\", \"strawberry\").\n.output Answer"]}
{"id": 1267, "answer": true, "completion": ".decl Is_used_for(Test:symbol, Disease:symbol)\nIs_used_for(\"whole genome sequencing\", \"COVID-19\").\n.decl Answer()\nAnswer() :- Is_used_for(\"whole genome sequencing\", \"COVID-19\").\n.output Answer", "completions": [".decl Is_used_for(Test:symbol, Disease:symbol)\nIs_used_for(\"whole genome sequencing\", \"COVID-19\").\n.decl Answer()\nAnswer() :- Is_used_for(\"whole genome sequencing\", \"COVID-19\").\n.output Answer"]}
{"id": 1268, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Disney's Aladdin\", 27).\n.decl Last_n_years(Person:symbol, N_years:float)\nLast_n_years(\"Robin Williams\", 3).\n.decl Answer()\nAnswer() :- Last_n_years(\"Disney's Aladdin\", n_years1), Last_n_years(\"Robin Williams\", n_years2), n_years1 > n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Disney's Aladdin\", 27).\n.decl Last_n_years(Person:symbol, N_years:float)\nLast_n_years(\"Robin Williams\", 3).\n.decl Answer()\nAnswer() :- Last_n_years(\"Disney's Aladdin\", n_years1), Last_n_years(\"Robin Williams\", n_years2), n_years1 > n_years2.\n.output Answer"]}
{"id": 1269, "answer": true, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"dosa\", 100).\n.decl Needs_calories(Person:symbol, Calories:float)\nNeeds_calories(\"lumberjack\", 3000).\n.decl Answer()\nAnswer() :- Has_calories(\"dosa\", calories1), Needs_calories(\"lumberjack\", calories2), 3*calories1 >= calories2.\n.output Answer", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"dosa\", 100).\n.decl Needs_calories(Person:symbol, Calories:float)\nNeeds_calories(\"lumberjack\", 3000).\n.decl Answer()\nAnswer() :- Has_calories(\"dosa\", calories1), Needs_calories(\"lumberjack\", calories2), 3*calories1 >= calories2.\n.output Answer"]}
{"id": 1270, "answer": true, "completion": ".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"black swan\", \"black\").\nHas_color(\"cygnet\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"black swan\", \"black\"), Has_color(\"cygnet\", \"black\").\n.output Answer", "completions": [".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"black swan\", \"black\").\nHas_color(\"cygnet\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"black swan\", \"black\"), Has_color(\"cygnet\", \"black\").\n.output Answer"]}
{"id": 1271, "answer": false, "completion": ".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Moon Jae-in\", \"Geoje\").\n.decl Answer()\nAnswer() :- Born_in(\"Moon Jae-in\", \"Khanbaliq\").\nAnswer() :- Born_in(\"Moon Jae-in\", place), !, place != \"Khanbaliq\".\n.output Answer", "completions": [".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"Moon Jae-in\", \"Geoje\").\n.decl Answer()\nAnswer() :- Born_in(\"Moon Jae-in\", \"Khanbaliq\").\nAnswer() :- Born_in(\"Moon Jae-in\", place), !, place != \"Khanbaliq\".\n.output Answer"]}
{"id": 1272, "answer": false, "completion": ".decl Causes_death(Person:symbol, Person_died:symbol)\nCauses_death(\"Daniel LeFever\", \"Kurt Cobain\").\n.decl Causes_death(Person:symbol, Person_died:symbol)\nCauses_death(\"Kurt Cobain\", \"Kurt Cobain\").\n.decl Answer()\nAnswer() :- Causes_death(person1, \"Kurt Cobain\"), Causes_death(person2, person1), person2 != \"Kurt Cobain\".\n.output Answer", "completions": [".decl Causes_death(Person:symbol, Person_died:symbol)\nCauses_death(\"Daniel LeFever\", \"Kurt Cobain\").\n.decl Causes_death(Person:symbol, Person_died:symbol)\nCauses_death(\"Kurt Cobain\", \"Kurt Cobain\").\n.decl Answer()\nAnswer() :- Causes_death(person1, \"Kurt Cobain\"), Causes_death(person2, person1), person2 != \"Kurt Cobain\".\n.output Answer"]}
{"id": 1273, "answer": false, "completion": ".decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Italian Renaissance\", 100).\n.decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Theocracy\", 100).\n.decl Answer()\nAnswer() :- Lasted_for_n_years(\"Italian Renaissance\", n_years1), Lasted_for_n_years(\"Theocracy\", n_years2), n_years1 >= n_years2.\n.output Answer", "completions": [".decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Italian Renaissance\", 100).\n.decl Lasted_for_n_years(Event:symbol, N_years:float)\nLasted_for_n_years(\"Theocracy\", 100).\n.decl Answer()\nAnswer() :- Lasted_for_n_years(\"Italian Renaissance\", n_years1), Lasted_for_n_years(\"Theocracy\", n_years2), n_years1 >= n_years2.\n.output Answer"]}
{"id": 1274, "answer": true, "completion": ".decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"7 Wonders\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Snow White's dwarfs\", 7).\n.decl Answer()\nAnswer() :- Has_n_players(game, n_players), Has_n_members(group, n_members), n_players = n_members.\n.output Answer", "completions": [".decl Has_n_players(Game:symbol, N_players:float)\nHas_n_players(\"7 Wonders\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Snow White's dwarfs\", 7).\n.decl Answer()\nAnswer() :- Has_n_players(game, n_players), Has_n_members(group, n_members), n_players = n_members.\n.output Answer"]}
{"id": 1275, "answer": true, "completion": ".decl Is_easy_shot(Drill:symbol, Soldier:symbol)\nIs_easy_shot(\"Mozambique Drill\", \"United States Army Ranger\").\n.decl Answer()\nAnswer() :- Is_easy_shot(drill, \"United States Army Ranger\").\n.output Answer", "completions": [".decl Is_easy_shot(Drill:symbol, Soldier:symbol)\nIs_easy_shot(\"Mozambique Drill\", \"United States Army Ranger\").\n.decl Answer()\nAnswer() :- Is_easy_shot(drill, \"United States Army Ranger\").\n.output Answer"]}
{"id": 1276, "answer": true, "completion": ".decl Requires_portfolio(Job:symbol)\nRequires_portfolio(\"architect\").\n.decl Answer()\nAnswer() :- Requires_portfolio(\"construction worker\").\n.output Answer\n\n", "completions": [".decl Requires_portfolio(Job:symbol)\nRequires_portfolio(\"architect\").\n.decl Answer()\nAnswer() :- Requires_portfolio(\"construction worker\").\n.output Answer\n\n"]}
{"id": 1277, "answer": false, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"San Francisco\", 837442).\n.decl Answer()\nAnswer() :- Has_population(\"San Francisco\", population), population > 100000.\n.output Answer", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"San Francisco\", 837442).\n.decl Answer()\nAnswer() :- Has_population(\"San Francisco\", population), population > 100000.\n.output Answer"]}
{"id": 1278, "answer": false, "completion": ".decl Founded_by(City:symbol, Founder:symbol)\nFounded_by(\"Anaheim\", \"Giovanni Domenico Bottasini\").\nFounded_by(\"Anaheim\", \"George Hansen\").\nFounded_by(\"Anaheim\", \"Kurt von der Ahe\").\nFounded_by(\"Anaheim\", \"Louis Mesmer\").\nFounded_by(\"Anaheim\", \"Richard Nixon\").\nFounded_by(\"Anaheim\", \"William A. Wallace\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by", "completions": [".decl Founded_by(City:symbol, Founder:symbol)\nFounded_by(\"Anaheim\", \"Giovanni Domenico Bottasini\").\nFounded_by(\"Anaheim\", \"George Hansen\").\nFounded_by(\"Anaheim\", \"Kurt von der Ahe\").\nFounded_by(\"Anaheim\", \"Louis Mesmer\").\nFounded_by(\"Anaheim\", \"Richard Nixon\").\nFounded_by(\"Anaheim\", \"William A. Wallace\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by(\"Anaheim\", \"William H. Danforth\").\nFounded_by"]}
{"id": 1279, "answer": true, "completion": ".decl Involved_in(Person:symbol, Event:symbol)\nInvolved_in(\"French people\", \"American Civil War\").\n.decl Answer()\nAnswer() :- Involved_in(\"French people\", \"American Civil War\").\n.output Answer", "completions": [".decl Involved_in(Person:symbol, Event:symbol)\nInvolved_in(\"French people\", \"American Civil War\").\n.decl Answer()\nAnswer() :- Involved_in(\"French people\", \"American Civil War\").\n.output Answer"]}
{"id": 1280, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Boxer Rebellion\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Royal Air Force\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Royal Air Force\", n_years1), Last_n_years(\"Boxer Rebellion\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Boxer Rebellion\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Royal Air Force\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Royal Air Force\", n_years1), Last_n_years(\"Boxer Rebellion\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1281, "answer": true, "completion": ".decl Is_part_of(Person:symbol, Holiday:symbol)\nIs_part_of(\"Elijah\", \"Passover\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Elijah\", holiday).\n.output Answer", "completions": [".decl Is_part_of(Person:symbol, Holiday:symbol)\nIs_part_of(\"Elijah\", \"Passover\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Elijah\", holiday).\n.output Answer"]}
{"id": 1282, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Peak of the Andes\", 6962).\nHas_height(\"Colossus of Rhodes\", 30).\n.decl Answer()\nAnswer() :- Has_height(\"Peak of the Andes\", height1), Has_height(\"Colossus of Rhodes\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Peak of the Andes\", 6962).\nHas_height(\"Colossus of Rhodes\", 30).\n.decl Answer()\nAnswer() :- Has_height(\"Peak of the Andes\", height1), Has_height(\"Colossus of Rhodes\", height2), height1 > height2.\n.output Answer"]}
{"id": 1283, "answer": true, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Louvre\", 100).\nHas_price(\"George Soros\", 10).\n.decl Answer()\nAnswer() :- Has_price(\"Louvre\", price1), Has_price(\"George Soros\", price2), price1 <= price2.\n.output Answer", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Louvre\", 100).\nHas_price(\"George Soros\", 10).\n.decl Answer()\nAnswer() :- Has_price(\"Louvre\", price1), Has_price(\"George Soros\", price2), price1 <= price2.\n.output Answer"]}
{"id": 1284, "answer": true, "completion": ".decl Has_ideology(Organization:symbol, Ideology:symbol)\nHas_ideology(\"Communist Party of the Soviet Union\", \"communism\").\nHas_ideology(\"Trickle Down Economics\", \"capitalism\").\n.decl Answer()\nAnswer() :- Has_ideology(\"Communist Party of the Soviet Union\", \"communism\"), Has_ideology(\"Trickle Down Economics\", \"capitalism\"), !.\n.output Answer", "completions": [".decl Has_ideology(Organization:symbol, Ideology:symbol)\nHas_ideology(\"Communist Party of the Soviet Union\", \"communism\").\nHas_ideology(\"Trickle Down Economics\", \"capitalism\").\n.decl Answer()\nAnswer() :- Has_ideology(\"Communist Party of the Soviet Union\", \"communism\"), Has_ideology(\"Trickle Down Economics\", \"capitalism\"), !.\n.output Answer"]}
{"id": 1285, "answer": false, "completion": ".decl Has_animal(Show:symbol, Animal:symbol)\nHas_animal(\"You're a Good Sport, Charlie Brown\", \"hound\").\n.decl Answer()\nAnswer() :- Has_animal(\"You're a Good Sport, Charlie Brown\", animal), animal = \"hound\".\n.output Answer", "completions": [".decl Has_animal(Show:symbol, Animal:symbol)\nHas_animal(\"You're a Good Sport, Charlie Brown\", \"hound\").\n.decl Answer()\nAnswer() :- Has_animal(\"You're a Good Sport, Charlie Brown\", animal), animal = \"hound\".\n.output Answer"]}
{"id": 1286, "answer": false, "completion": ".decl Reigns_over(Person:symbol, Place:symbol)\nReigns_over(\"Elizabeth II\", \"United Kingdom\").\nReigns_over(\"Elizabeth II\", \"Australia\").\nReigns_over(\"Elizabeth II\", \"Canada\").\nReigns_over(\"Elizabeth II\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Reigns_over(\"Elizabeth II\", \"Balearic Islands\").\n.output Answer", "completions": [".decl Reigns_over(Person:symbol, Place:symbol)\nReigns_over(\"Elizabeth II\", \"United Kingdom\").\nReigns_over(\"Elizabeth II\", \"Australia\").\nReigns_over(\"Elizabeth II\", \"Canada\").\nReigns_over(\"Elizabeth II\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Reigns_over(\"Elizabeth II\", \"Balearic Islands\").\n.output Answer"]}
{"id": 1287, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Eddie Murphy\", 8).\n.decl Has_area(Object:symbol, Area:float)\nHas_area(\"basketball court\", 92903).\n.decl Answer()\nAnswer() :- Has_n_children(\"Eddie Murphy\", n_children), Has_area(\"basketball court\", area), n_children * 28.5 >= area.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Eddie Murphy\", 8).\n.decl Has_area(Object:symbol, Area:float)\nHas_area(\"basketball court\", 92903).\n.decl Answer()\nAnswer() :- Has_n_children(\"Eddie Murphy\", n_children), Has_area(\"basketball court\", area), n_children * 28.5 >= area.\n.output Answer"]}
{"id": 1288, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Thirty Years' War\", 30).\n.decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"white cockatoo\", 40).\n.decl Answer()\nAnswer() :- Last_n_years(\"Thirty Years' War\", n_years1), Lives_n_years(\"white cockatoo\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Thirty Years' War\", 30).\n.decl Lives_n_years(Animal:symbol, N_years:float)\nLives_n_years(\"white cockatoo\", 40).\n.decl Answer()\nAnswer() :- Last_n_years(\"Thirty Years' War\", n_years1), Lives_n_years(\"white cockatoo\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1289, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"house full of aloe vera\", 0.6).\nHas_density(\"Unsinkable Sam\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"house full of aloe vera\", density1), Has_density(\"Unsinkable Sam\", density2), density1 > density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"house full of aloe vera\", 0.6).\nHas_density(\"Unsinkable Sam\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"house full of aloe vera\", density1), Has_density(\"Unsinkable Sam\", density2), density1 > density2.\n.output Answer"]}
{"id": 1290, "answer": false, "completion": ".decl Is_unable_to_physically_defend_self(Person:symbol)\nIs_unable_to_physically_defend_self(\"Tove Torvalds\").\n.decl Is_married_to(Person1:symbol, Person2:symbol)\nIs_married_to(\"Linus Torvalds\", \"Tove Torvalds\").\n.decl Answer()\nAnswer() :- Is_unable_to_physically_defend_self(person1), Is_married_to(\"Linus Torvalds\", person1).\n.output Answer", "completions": [".decl Is_unable_to_physically_defend_self(Person:symbol)\nIs_unable_to_physically_defend_self(\"Tove Torvalds\").\n.decl Is_married_to(Person1:symbol, Person2:symbol)\nIs_married_to(\"Linus Torvalds\", \"Tove Torvalds\").\n.decl Answer()\nAnswer() :- Is_unable_to_physically_defend_self(person1), Is_married_to(\"Linus Torvalds\", person1).\n.output Answer"]}
{"id": 1291, "answer": true, "completion": ".decl Can_get_eyes_checked(Person:symbol, Doctor:symbol)\nCan_get_eyes_checked(\"New Yorker\", \"Rand Paul\").\n.decl Is_licensed(Doctor:symbol, State:symbol)\nIs_licensed(\"Rand Paul\", \"Kentucky\").\n.decl Answer()\nAnswer() :- Can_get_eyes_checked(\"New Yorker\", \"Rand Paul\"), Is_licensed(\"Rand Paul\", \"Kentucky\").\n.output Answer", "completions": [".decl Can_get_eyes_checked(Person:symbol, Doctor:symbol)\nCan_get_eyes_checked(\"New Yorker\", \"Rand Paul\").\n.decl Is_licensed(Doctor:symbol, State:symbol)\nIs_licensed(\"Rand Paul\", \"Kentucky\").\n.decl Answer()\nAnswer() :- Can_get_eyes_checked(\"New Yorker\", \"Rand Paul\"), Is_licensed(\"Rand Paul\", \"Kentucky\").\n.output Answer"]}
{"id": 1292, "answer": false, "completion": ".decl Wins(Person:symbol, Prize:symbol)\nWins(\"Cheb Mami\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Wins(\"Cheb Mami\", \"Pulitzer Prize\").\n.output Answer", "completions": [".decl Wins(Person:symbol, Prize:symbol)\nWins(\"Cheb Mami\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Wins(\"Cheb Mami\", \"Pulitzer Prize\").\n.output Answer"]}
{"id": 1293, "answer": false, "completion": ".decl Fights(Character_A:symbol, Character_B:symbol)\nFights(\"Spiderman\", \"Falcon\").\n.decl Answer()\nAnswer() :- Fights(\"Spiderman\", \"Falcon\").\n.output Answer", "completions": [".decl Fights(Character_A:symbol, Character_B:symbol)\nFights(\"Spiderman\", \"Falcon\").\n.decl Answer()\nAnswer() :- Fights(\"Spiderman\", \"Falcon\").\n.output Answer"]}
{"id": 1294, "answer": false, "completion": ".decl Has_character(Actor:symbol, Character:symbol)\nHas_character(\"Steve Carell\", \"Michael Scott\").\n.decl Has_skill(Character:symbol, Skill:symbol)\nHas_skill(\"Michael Scott\", \"leadership\").\n.decl Answer()\nAnswer() :- Has_character(\"Steve Carell\", character), Has_skill(character, \"leadership\").\n.output Answer\n\n\n", "completions": [".decl Has_character(Actor:symbol, Character:symbol)\nHas_character(\"Steve Carell\", \"Michael Scott\").\n.decl Has_skill(Character:symbol, Skill:symbol)\nHas_skill(\"Michael Scott\", \"leadership\").\n.decl Answer()\nAnswer() :- Has_character(\"Steve Carell\", character), Has_skill(character, \"leadership\").\n.output Answer\n\n\n"]}
{"id": 1295, "answer": true, "completion": ".decl Has_year(Event:symbol, Year:float)\nHas_year(\"Alice in Wonderland (1951 film)\", 1951).\n.decl Has_name(Character:symbol, Name:symbol)\nHas_name(\"milliner\", \"Mad Hatter\").\n.decl Has_symptom(Character:symbol, Symptom:symbol)\nHas_symptom(\"Mad Hatter\", \"insanity\").\n.decl Answer()\nAnswer() :- Has_year(\"Alice in Wonderland (1951 film)\", year), Has_name(\"milliner\", \"Mad Hatter\"), Has_symptom(\"Mad Hatter\", \"insanity\").\n.output Answer", "completions": [".decl Has_year(Event:symbol, Year:float)\nHas_year(\"Alice in Wonderland (1951 film)\", 1951).\n.decl Has_name(Character:symbol, Name:symbol)\nHas_name(\"milliner\", \"Mad Hatter\").\n.decl Has_symptom(Character:symbol, Symptom:symbol)\nHas_symptom(\"Mad Hatter\", \"insanity\").\n.decl Answer()\nAnswer() :- Has_year(\"Alice in Wonderland (1951 film)\", year), Has_name(\"milliner\", \"Mad Hatter\"), Has_symptom(\"Mad Hatter\", \"insanity\").\n.output Answer"]}
{"id": 1296, "answer": true, "completion": ".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"Amy Winehouse's death\", \"drug overdose\").\n.decl Prevents(Event:symbol, Cause:symbol)\nPrevents(\"Narcan\", \"drug overdose\").\n.decl Answer()\nAnswer() :- Causes(\"Amy Winehouse's death\", cause), Prevents(\"Narcan\", cause).\n.output Answer", "completions": [".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"Amy Winehouse's death\", \"drug overdose\").\n.decl Prevents(Event:symbol, Cause:symbol)\nPrevents(\"Narcan\", \"drug overdose\").\n.decl Answer()\nAnswer() :- Causes(\"Amy Winehouse's death\", cause), Prevents(\"Narcan\", cause).\n.output Answer"]}
{"id": 1297, "answer": true, "completion": ".decl Invented_by(Object:symbol, Person:symbol)\nInvented_by(\"phone\", \"Alexander Graham Bell\").\n.decl Answer()\nAnswer() :- Invented_by(\"phone\", \"Alexander Graham Bell\"), !.\n.output Answer", "completions": [".decl Invented_by(Object:symbol, Person:symbol)\nInvented_by(\"phone\", \"Alexander Graham Bell\").\n.decl Answer()\nAnswer() :- Invented_by(\"phone\", \"Alexander Graham Bell\"), !.\n.output Answer"]}
{"id": 1298, "answer": true, "completion": ".decl Owns(Person:symbol, Comic:symbol)\nOwns(\"Bart Simpson\", \"The Joker\").\n.decl Answer()\nAnswer() :- Owns(\"Bart Simpson\", \"The Joker\").\n.output Answer", "completions": [".decl Owns(Person:symbol, Comic:symbol)\nOwns(\"Bart Simpson\", \"The Joker\").\n.decl Answer()\nAnswer() :- Owns(\"Bart Simpson\", \"The Joker\").\n.output Answer"]}
{"id": 1299, "answer": false, "completion": ".decl Grocery_store_meat_tastes_like(Grocery_store_meat:symbol, Game:symbol)\nGrocery_store_meat_tastes_like(\"beef\", \"venison\").\nGrocery_store_meat_tastes_like(\"pork\", \"wild boar\").\nGrocery_store_meat_tastes_like(\"chicken\", \"pheasant\").\n.decl Answer()\nAnswer() :- Grocery_store_meat_tastes_like(grocery_store_meat, game).\n.output Answer", "completions": [".decl Grocery_store_meat_tastes_like(Grocery_store_meat:symbol, Game:symbol)\nGrocery_store_meat_tastes_like(\"beef\", \"venison\").\nGrocery_store_meat_tastes_like(\"pork\", \"wild boar\").\nGrocery_store_meat_tastes_like(\"chicken\", \"pheasant\").\n.decl Answer()\nAnswer() :- Grocery_store_meat_tastes_like(grocery_store_meat, game).\n.output Answer"]}
{"id": 1300, "answer": true, "completion": ".decl Appears_in(Character:symbol, Show:symbol)\nAppears_in(\"Elmo\", \"Sesame Street\").\n.decl First_appearance(Character:symbol, Show:symbol, Year:float)\nFirst_appearance(\"Elmo\", \"Sesame Street\", 1979).\n.decl Answer()\nAnswer() :- Appears_in(\"Elmo\", \"Sesame Street\"), First_appearance(\"Elmo\", \"Sesame Street\", year), year = 1979.\n.output Answer", "completions": [".decl Appears_in(Character:symbol, Show:symbol)\nAppears_in(\"Elmo\", \"Sesame Street\").\n.decl First_appearance(Character:symbol, Show:symbol, Year:float)\nFirst_appearance(\"Elmo\", \"Sesame Street\", 1979).\n.decl Answer()\nAnswer() :- Appears_in(\"Elmo\", \"Sesame Street\"), First_appearance(\"Elmo\", \"Sesame Street\", year), year = 1979.\n.output Answer"]}
{"id": 1301, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"pescatarian\", \"anchovy pizza\").\n.decl Answer()\nAnswer() :- Eats(\"pescatarian\", \"anchovy pizza\").\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"pescatarian\", \"anchovy pizza\").\n.decl Answer()\nAnswer() :- Eats(\"pescatarian\", \"anchovy pizza\").\n.output Answer"]}
{"id": 1302, "answer": true, "completion": ".decl Has_location(Character:symbol, Location:symbol)\nHas_location(\"Grandpa\", \"porch\").\nHas_location(\"Grandma\", \"porch\").\n.decl Answer()\nAnswer() :- Has_location(character, \"porch\").\n.output Answer", "completions": [".decl Has_location(Character:symbol, Location:symbol)\nHas_location(\"Grandpa\", \"porch\").\nHas_location(\"Grandma\", \"porch\").\n.decl Answer()\nAnswer() :- Has_location(character, \"porch\").\n.output Answer"]}
{"id": 1303, "answer": false, "completion": ".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"shrimp scampi\", \"shrimp\").\nContains(\"shrimp scampi\", \"olive oil\").\nContains(\"shrimp scampi\", \"garlic\").\nContains(\"shrimp scampi\", \"white wine\").\nContains(\"shrimp scampi\", \"lemon\").\nContains(\"shrimp scampi\", \"parsley\").\n.decl Answer()\nAnswer() :- Contains(\"shrimp scampi\", ingredient), ingredient != \"plastic\".\n.output Answer", "completions": [".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"shrimp scampi\", \"shrimp\").\nContains(\"shrimp scampi\", \"olive oil\").\nContains(\"shrimp scampi\", \"garlic\").\nContains(\"shrimp scampi\", \"white wine\").\nContains(\"shrimp scampi\", \"lemon\").\nContains(\"shrimp scampi\", \"parsley\").\n.decl Answer()\nAnswer() :- Contains(\"shrimp scampi\", ingredient), ingredient != \"plastic\".\n.output Answer"]}
{"id": 1304, "answer": false, "completion": ".decl Has_horn(Animal:symbol, Length:float)\nHas_horn(\"rhinoceros\", 0.5).\n.decl Has_medicinal_use(Animal:symbol, Use:symbol)\nHas_medicinal_use(\"rhinoceros\", \"sex life\").\n.decl Answer()\nAnswer() :- Has_horn(\"rhinoceros\", length), Has_medicinal_use(\"rhinoceros\", use), length > 0.\n.output Answer", "completions": [".decl Has_horn(Animal:symbol, Length:float)\nHas_horn(\"rhinoceros\", 0.5).\n.decl Has_medicinal_use(Animal:symbol, Use:symbol)\nHas_medicinal_use(\"rhinoceros\", \"sex life\").\n.decl Answer()\nAnswer() :- Has_horn(\"rhinoceros\", length), Has_medicinal_use(\"rhinoceros\", use), length > 0.\n.output Answer"]}
{"id": 1305, "answer": true, "completion": ".decl Has_dimensions(Object:symbol, Length:float, Width:float)\nHas_dimensions(\"standard Amtrak coach seat\", 17, 18).\n.decl Answer()\nAnswer() :- Has_dimensions(\"standard Amtrak coach seat\", length, width), length >= 3, width >= 3.\n.output Answer", "completions": [".decl Has_dimensions(Object:symbol, Length:float, Width:float)\nHas_dimensions(\"standard Amtrak coach seat\", 17, 18).\n.decl Answer()\nAnswer() :- Has_dimensions(\"standard Amtrak coach seat\", length, width), length >= 3, width >= 3.\n.output Answer"]}
{"id": 1306, "answer": false, "completion": ".decl Has_area(Region:symbol, Area:float)\nHas_area(\"Persian Gulf\", 250).\nHas_area(\"New Jersey\", 22).\n.decl Answer()\nAnswer() :- Has_area(\"Persian Gulf\", area1), Has_area(\"New Jersey\", area2), area1 < area2.\n.output Answer", "completions": [".decl Has_area(Region:symbol, Area:float)\nHas_area(\"Persian Gulf\", 250).\nHas_area(\"New Jersey\", 22).\n.decl Answer()\nAnswer() :- Has_area(\"Persian Gulf\", area1), Has_area(\"New Jersey\", area2), area1 < area2.\n.output Answer"]}
{"id": 1307, "answer": false, "completion": ".decl Lasted_for_n_years(Era:symbol, N_years:float)\nLasted_for_n_years(\"Jurassic era\", 3).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"tourist destination\", 1).\n.decl Answer()\nAnswer() :- Lasted_for_n_years(\"Jurassic era\", n_years1), Happens_every_n_years(\"tourist destination\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Lasted_for_n_years(Era:symbol, N_years:float)\nLasted_for_n_years(\"Jurassic era\", 3).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"tourist destination\", 1).\n.decl Answer()\nAnswer() :- Lasted_for_n_years(\"Jurassic era\", n_years1), Happens_every_n_years(\"tourist destination\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1308, "answer": true, "completion": ".decl Believes_in(Person:symbol, Angel:symbol)\nBelieves_in(\"Jew\", \"Gabriel\").\nBelieves_in(\"Jew\", \"Michael\").\nBelieves_in(\"Jew\", \"Raphael\").\n.decl New_Testament_angel(Angel:symbol)\nNew_Testament_angel(\"Gabriel\").\nNew_Testament_angel(\"Michael\").\nNew_Testament_angel(\"Raphael\").\n.decl Answer()\nAnswer() :- Believes_in(\"Jew\", angel), New_Testament_angel(angel).\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Angel:symbol)\nBelieves_in(\"Jew\", \"Gabriel\").\nBelieves_in(\"Jew\", \"Michael\").\nBelieves_in(\"Jew\", \"Raphael\").\n.decl New_Testament_angel(Angel:symbol)\nNew_Testament_angel(\"Gabriel\").\nNew_Testament_angel(\"Michael\").\nNew_Testament_angel(\"Raphael\").\n.decl Answer()\nAnswer() :- Believes_in(\"Jew\", angel), New_Testament_angel(angel).\n.output Answer"]}
{"id": 1309, "answer": false, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Helen Mirren\", \"English\").\n.decl Plays_role(Person:symbol, Role:symbol)\nPlays_role(\"Helen Mirren\", \"Elizabeth II\").\n.decl Answer()\nAnswer() :- Speaks_language(person, \"Arabic\"), Plays_role(person, \"Elizabeth II\").\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Helen Mirren\", \"English\").\n.decl Plays_role(Person:symbol, Role:symbol)\nPlays_role(\"Helen Mirren\", \"Elizabeth II\").\n.decl Answer()\nAnswer() :- Speaks_language(person, \"Arabic\"), Plays_role(person, \"Elizabeth II\").\n.output Answer"]}
{"id": 1310, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Joe Biden's primaries\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Kane's primaries\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Kane's primaries\", n_years1), Last_n_years(\"Joe Biden's primaries\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Joe Biden's primaries\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Kane's primaries\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Kane's primaries\", n_years1), Last_n_years(\"Joe Biden's primaries\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1311, "answer": false, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Eid al-Fitr\", 29).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"jockey win Triple Crown\", 91).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"jockey win Triple Crown\", n_days1), Last_n_days(\"Eid al-Fitr\", n_days2),  n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Eid al-Fitr\", 29).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"jockey win Triple Crown\", 91).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"jockey win Triple Crown\", n_days1), Last_n_days(\"Eid al-Fitr\", n_days2),  n_days1 <= n_days2.\n.output Answer"]}
{"id": 1312, "answer": false, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Halloween\", \"October\").\nHappens_in_month(\"Scorpio\", \"October\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"Halloween\", month), Happens_in_month(\"Scorpio\", month).\n.output Answer", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Halloween\", \"October\").\nHappens_in_month(\"Scorpio\", \"October\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"Halloween\", month), Happens_in_month(\"Scorpio\", month).\n.output Answer"]}
{"id": 1313, "answer": true, "completion": ".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"A Tale of Two Cities\", \"historical fiction\").\n.decl Answer()\nAnswer() :- Is_genre(\"A Tale of Two Cities\", \"popular science novel\").\n.output Answer", "completions": [".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"A Tale of Two Cities\", \"historical fiction\").\n.decl Answer()\nAnswer() :- Is_genre(\"A Tale of Two Cities\", \"popular science novel\").\n.output Answer"]}
{"id": 1314, "answer": true, "completion": ".decl Is_on_blacklist(Person:symbol, Organization:symbol)\nIs_on_blacklist(\"Michael Vick\", \"People for the Ethical Treatment of Animals\").\n.decl Answer()\nAnswer() :- Is_on_blacklist(\"Michael Vick\", \"People for the Ethical Treatment of Animals\").\n.output Answer", "completions": [".decl Is_on_blacklist(Person:symbol, Organization:symbol)\nIs_on_blacklist(\"Michael Vick\", \"People for the Ethical Treatment of Animals\").\n.decl Answer()\nAnswer() :- Is_on_blacklist(\"Michael Vick\", \"People for the Ethical Treatment of Animals\").\n.output Answer"]}
{"id": 1315, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"seawater\", 10).\nHas_mass(\"six year old\", 50).\n.decl Answer()\nAnswer() :- Has_mass(\"seawater\", mass1), Has_mass(\"six year old\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"seawater\", 10).\nHas_mass(\"six year old\", 50).\n.decl Answer()\nAnswer() :- Has_mass(\"seawater\", mass1), Has_mass(\"six year old\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 1316, "answer": false, "completion": ".decl Is_Nordic_country(Country:symbol)\nIs_Nordic_country(\"Finland\").\nIs_Nordic_country(\"Sweden\").\nIs_Nordic_country(\"Norway\").\nIs_Nordic_country(\"Denmark\").\nIs_Nordic_country(\"Iceland\").\n.decl Is_Japanese(Person:symbol)\nIs_Japanese(\"Yoko Ono\").\n.decl Answer()\nAnswer() :- Is_Japanese(\"Yoko Ono\"), Is_Nordic_country(\"Finland\").\nAnswer() :- Is_Japanese(\"Yoko Ono\"), Is_Nordic_country(\"Sweden\").\nAnswer() :- Is_Japanese(\"Yoko Ono\"), Is_Nordic_country(\"Norway\").\nAnswer() :- Is_Japanese(\"Yoko Ono\"), Is_Nordic_country(\"Denmark\").\nAnswer() :- Is_Japanese(\"Yoko Ono\"), Is_Nordic_country(\"Iceland\").\n.output Answer", "completions": [".decl Is_Nordic_country(Country:symbol)\nIs_Nordic_country(\"Finland\").\nIs_Nordic_country(\"Sweden\").\nIs_Nordic_country(\"Norway\").\nIs_Nordic_country(\"Denmark\").\nIs_Nordic_country(\"Iceland\").\n.decl Is_Japanese(Person:symbol)\nIs_Japanese(\"Yoko Ono\").\n.decl Answer()\nAnswer() :- Is_Japanese(\"Yoko Ono\"), Is_Nordic_country(\"Finland\").\nAnswer() :- Is_Japanese(\"Yoko Ono\"), Is_Nordic_country(\"Sweden\").\nAnswer() :- Is_Japanese(\"Yoko Ono\"), Is_Nordic_country(\"Norway\").\nAnswer() :- Is_Japanese(\"Yoko Ono\"), Is_Nordic_country(\"Denmark\").\nAnswer() :- Is_Japanese(\"Yoko Ono\"), Is_Nordic_country(\"Iceland\").\n.output Answer"]}
{"id": 1317, "answer": false, "completion": ".decl Is_president(Person:symbol, Country:symbol)\nIs_president(\"John Key\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Is_president(\"John Key\", \"USA\").\n.output Answer", "completions": [".decl Is_president(Person:symbol, Country:symbol)\nIs_president(\"John Key\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Is_president(\"John Key\", \"USA\").\n.output Answer"]}
{"id": 1318, "answer": true, "completion": ".decl Has_parents(Person:symbol, Parent1:symbol, Parent2:symbol)\nHas_parents(\"Freya\", \"Athena\", \"Aphrodite\").\n.decl Answer()\nAnswer() :- Has_parents(\"Freya\", \"Athena\", \"Aphrodite\").\n.output Answer", "completions": [".decl Has_parents(Person:symbol, Parent1:symbol, Parent2:symbol)\nHas_parents(\"Freya\", \"Athena\", \"Aphrodite\").\n.decl Answer()\nAnswer() :- Has_parents(\"Freya\", \"Athena\", \"Aphrodite\").\n.output Answer"]}
{"id": 1319, "answer": true, "completion": ".decl Has_weight_class(Boxer:symbol, Weight_class:symbol)\nHas_weight_class(\"Jack Dempsey\", \"light heavyweight\").\nHas_weight_class(\"Jack Dempsey\", \"heavyweight\").\n.decl Has_n_title_fight_wins(Boxer:symbol, N_title_fight_wins:float)\nHas_n_title_fight_wins(\"Jack Dempsey\", 8).\n.decl Answer()\nAnswer() :- Has_weight_class(boxer1, weight_class1), Has_weight_class(boxer2, weight_class2), weight_class1 = weight_class2, Has_n_title_fight_wins(boxer1, n_title_fight_wins1), Has_n_title_fight_wins(boxer2, n_title_fight_wins2), n_title_fight_wins1 >= n_title_fight_wins2.\n.output Answer", "completions": [".decl Has_weight_class(Boxer:symbol, Weight_class:symbol)\nHas_weight_class(\"Jack Dempsey\", \"light heavyweight\").\nHas_weight_class(\"Jack Dempsey\", \"heavyweight\").\n.decl Has_n_title_fight_wins(Boxer:symbol, N_title_fight_wins:float)\nHas_n_title_fight_wins(\"Jack Dempsey\", 8).\n.decl Answer()\nAnswer() :- Has_weight_class(boxer1, weight_class1), Has_weight_class(boxer2, weight_class2), weight_class1 = weight_class2, Has_n_title_fight_wins(boxer1, n_title_fight_wins1), Has_n_title_fight_wins(boxer2, n_title_fight_wins2), n_title_fight_wins1 >= n_title_fight_wins2.\n.output Answer"]}
{"id": 1320, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"year\", 365).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"new Seinfeld episode\", 7).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"new Seinfeld episode\", n_days1), Last_n_days(\"year\", n_days2), n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"year\", 365).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"new Seinfeld episode\", 7).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"new Seinfeld episode\", n_days1), Last_n_days(\"year\", n_days2), n_days1 <= n_days2.\n.output Answer"]}
{"id": 1321, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Burundi's\", \"French\").\nSpeaks(\"Burundi's\", \"Kirundi\").\nSpeaks(\"Burundi's\", \"Swahili\").\nSpeaks(\"Burundi's\", \"English\").\nSpeaks(\"Burundi's\", \"German\").\nSpeaks(\"Burundi's\", \"Spanish\").\nSpeaks(\"Burundi's\", \"Italian\").\nSpeaks(\"Burundi's\", \"Portuguese\").\nSpeaks(\"Burundi's\", \"Russian\").\nSpeaks(\"Burundi's\", \"Mandarin\").\nSpeaks(\"Burundi's\", \"Japanese\").\nSpeaks(\"Burundi's\", \"Korean\").\nSpeaks(\"Burundi's\", \"Arabic\").\nSpeaks(\"Burundi's\", \"Hindi\").\nSpeaks(\"Burundi's\", \"Urdu\").\nSpeaks(\"Burundi's\", \"Bengali\").\nSpeaks(\"Burundi's\", \"Punjabi\").\nSpeaks(\"Burundi's\", \"Vietnamese\").\nSpeaks(\"Burundi's\", \"Persian\").\nSpeaks(\"Burundi's\", \"Turkish\").\nSpeaks(\"Burundi's\", \"Thai\").\nSpeaks(\"Burundi's\", \"Laotian\").\nSpeaks(\"Burundi's\", \"Cambodian\").\nSpeaks(\"Burundi's\", \"Burmese\").\nSpeaks(\"Burundi's\", \"Indonesian\").\nSpeaks(\"Burundi's\", \"Malay\").\nSpeaks(\"Burundi's\", \"Tagalog\").\nSpeaks(\"Burundi's\", \"Filipino\").\nSpeaks(\"Burundi's\", \"Malagasy\").\nSpeaks(\"Burundi's\", \"Swahili\").\nSpeaks(\"Burundi's\", \"Hausa\").\nSpeaks(\"Burundi's\", \"Igbo\").\nSpeaks(\"Burundi's\", \"Yoruba\").\nSpeaks(\"Burundi's\", \"Akan\").\nSpeaks(\"Burundi's\", \"Fula\").\nSpeaks(\"Burundi's\", \"Ewe\").\nSpeaks(\"Burundi's\", \"Mende\").\nSpeaks(\"Burundi's\", \"Songhai\").\nSpeaks(\"Burundi's\", \"Wolof\").\nSpeaks(\"Burundi's\", \"Dinka\").\nSpeaks(\"Burundi's\", \"Amharic\").\nSpeaks(\"Burundi's\", \"Oromo\").\nSpeaks(\"Burundi's\", \"Tigrinya\").\nSpeaks(\"Burundi's\", \"Gurage\").\nSpeaks(\"Burundi's\", \"Somali\").\nSpeaks(\"Burundi's\", \"Kanuri\").\nSpeaks(\"Burundi's\", \"Nuer\").\nSpeaks(\"Burundi's\", \"Luo\").\nSpeaks(\"Burundi's\", \"Maasai\").\nSpeaks(\"Burundi's\", \"Kalenjin\").\nSpeaks(\"Burundi's\", \"Datooga\").\nSpeaks(\"Burundi's\", \"Hadza\").\nSpeaks(\"Burundi's\", \"Sandawe\").\nSpeaks(\"Burundi's\", \"Sukuma\").\nSpeaks(\"Burundi's\", \"Nyamwezi\").\nSpeaks(\"Burundi's\", \"Swahili\").\nSpeaks(\"Burundi's\", \"Luganda\").\nSpeaks(\"Burundi's\", \"Luhya", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Burundi's\", \"French\").\nSpeaks(\"Burundi's\", \"Kirundi\").\nSpeaks(\"Burundi's\", \"Swahili\").\nSpeaks(\"Burundi's\", \"English\").\nSpeaks(\"Burundi's\", \"German\").\nSpeaks(\"Burundi's\", \"Spanish\").\nSpeaks(\"Burundi's\", \"Italian\").\nSpeaks(\"Burundi's\", \"Portuguese\").\nSpeaks(\"Burundi's\", \"Russian\").\nSpeaks(\"Burundi's\", \"Mandarin\").\nSpeaks(\"Burundi's\", \"Japanese\").\nSpeaks(\"Burundi's\", \"Korean\").\nSpeaks(\"Burundi's\", \"Arabic\").\nSpeaks(\"Burundi's\", \"Hindi\").\nSpeaks(\"Burundi's\", \"Urdu\").\nSpeaks(\"Burundi's\", \"Bengali\").\nSpeaks(\"Burundi's\", \"Punjabi\").\nSpeaks(\"Burundi's\", \"Vietnamese\").\nSpeaks(\"Burundi's\", \"Persian\").\nSpeaks(\"Burundi's\", \"Turkish\").\nSpeaks(\"Burundi's\", \"Thai\").\nSpeaks(\"Burundi's\", \"Laotian\").\nSpeaks(\"Burundi's\", \"Cambodian\").\nSpeaks(\"Burundi's\", \"Burmese\").\nSpeaks(\"Burundi's\", \"Indonesian\").\nSpeaks(\"Burundi's\", \"Malay\").\nSpeaks(\"Burundi's\", \"Tagalog\").\nSpeaks(\"Burundi's\", \"Filipino\").\nSpeaks(\"Burundi's\", \"Malagasy\").\nSpeaks(\"Burundi's\", \"Swahili\").\nSpeaks(\"Burundi's\", \"Hausa\").\nSpeaks(\"Burundi's\", \"Igbo\").\nSpeaks(\"Burundi's\", \"Yoruba\").\nSpeaks(\"Burundi's\", \"Akan\").\nSpeaks(\"Burundi's\", \"Fula\").\nSpeaks(\"Burundi's\", \"Ewe\").\nSpeaks(\"Burundi's\", \"Mende\").\nSpeaks(\"Burundi's\", \"Songhai\").\nSpeaks(\"Burundi's\", \"Wolof\").\nSpeaks(\"Burundi's\", \"Dinka\").\nSpeaks(\"Burundi's\", \"Amharic\").\nSpeaks(\"Burundi's\", \"Oromo\").\nSpeaks(\"Burundi's\", \"Tigrinya\").\nSpeaks(\"Burundi's\", \"Gurage\").\nSpeaks(\"Burundi's\", \"Somali\").\nSpeaks(\"Burundi's\", \"Kanuri\").\nSpeaks(\"Burundi's\", \"Nuer\").\nSpeaks(\"Burundi's\", \"Luo\").\nSpeaks(\"Burundi's\", \"Maasai\").\nSpeaks(\"Burundi's\", \"Kalenjin\").\nSpeaks(\"Burundi's\", \"Datooga\").\nSpeaks(\"Burundi's\", \"Hadza\").\nSpeaks(\"Burundi's\", \"Sandawe\").\nSpeaks(\"Burundi's\", \"Sukuma\").\nSpeaks(\"Burundi's\", \"Nyamwezi\").\nSpeaks(\"Burundi's\", \"Swahili\").\nSpeaks(\"Burundi's\", \"Luganda\").\nSpeaks(\"Burundi's\", \"Luhya"]}
{"id": 1322, "answer": false, "completion": ".decl Is_ingredient(Ingredient:symbol, Dish:symbol)\nIs_ingredient(\"olive oil\", \"pasta\").\nIs_ingredient(\"olive oil\", \"pizza\").\n.decl Is_staff(Person:symbol, Restaurant:symbol)\nIs_staff(\"Carmine\", \"Carmine's\").\n.decl Answer()\nAnswer() :- Is_staff(\"Carmine\", restaurant), Is_ingredient(\"olive oil\", dish), Is_ingredient(ingredient, dish), ingredient != \"olive oil\".\n.output Answer", "completions": [".decl Is_ingredient(Ingredient:symbol, Dish:symbol)\nIs_ingredient(\"olive oil\", \"pasta\").\nIs_ingredient(\"olive oil\", \"pizza\").\n.decl Is_staff(Person:symbol, Restaurant:symbol)\nIs_staff(\"Carmine\", \"Carmine's\").\n.decl Answer()\nAnswer() :- Is_staff(\"Carmine\", restaurant), Is_ingredient(\"olive oil\", dish), Is_ingredient(ingredient, dish), ingredient != \"olive oil\".\n.output Answer"]}
{"id": 1323, "answer": false, "completion": ".decl Has_death_rate(Job:symbol, Death_rate:float)\nHas_death_rate(\"mail carrier\", 0.0011).\nHas_death_rate(\"logger\", 0.0024).\n.decl Answer()\nAnswer() :- Has_death_rate(\"mail carrier\", death_rate1), Has_death_rate(\"logger\", death_rate2), death_rate1 > death_rate2.\n.output Answer", "completions": [".decl Has_death_rate(Job:symbol, Death_rate:float)\nHas_death_rate(\"mail carrier\", 0.0011).\nHas_death_rate(\"logger\", 0.0024).\n.decl Answer()\nAnswer() :- Has_death_rate(\"mail carrier\", death_rate1), Has_death_rate(\"logger\", death_rate2), death_rate1 > death_rate2.\n.output Answer"]}
{"id": 1324, "answer": true, "completion": ".decl Has_birth_weight(Animal:symbol, Birth_weight:float)\nHas_birth_weight(\"duck\", 0.5).\n.decl Has_birth_weight_limit(Animal:symbol, Birth_weight_limit:float)\nHas_birth_weight_limit(\"duck\", 0.4).\n.decl Answer()\nAnswer() :- Has_birth_weight(\"duck\", birth_weight), Has_birth_weight_limit(\"duck\", birth_weight_limit), birth_weight > birth_weight_limit.\n.output Answer", "completions": [".decl Has_birth_weight(Animal:symbol, Birth_weight:float)\nHas_birth_weight(\"duck\", 0.5).\n.decl Has_birth_weight_limit(Animal:symbol, Birth_weight_limit:float)\nHas_birth_weight_limit(\"duck\", 0.4).\n.decl Answer()\nAnswer() :- Has_birth_weight(\"duck\", birth_weight), Has_birth_weight_limit(\"duck\", birth_weight_limit), birth_weight > birth_weight_limit.\n.output Answer"]}
{"id": 1325, "answer": false, "completion": ".decl Is_tool(Object:symbol)\nIs_tool(\"hammer\").\nIs_tool(\"nail\").\n.decl Is_weapon(Object:symbol)\nIs_weapon(\"hammer\").\n.decl Is_instrument(Object:symbol)\nIs_instrument(\"hammer\").\n.decl Is_material(Object:symbol)\nIs_material(\"wood\").\n.decl Is_used_for(Object:symbol, Event:symbol)\nIs_used_for(\"hammer\", \"Martin Luther's Reformation opening salvo\").\nIs_used_for(\"nail\", \"crucifixion\").\n.decl Answer()\nAnswer() :- Is_tool(object), Is_used_for(object, \"Martin Luther's Reformation opening salvo\"), Is_used_for(object, \"crucifixion\").\n.output Answer", "completions": [".decl Is_tool(Object:symbol)\nIs_tool(\"hammer\").\nIs_tool(\"nail\").\n.decl Is_weapon(Object:symbol)\nIs_weapon(\"hammer\").\n.decl Is_instrument(Object:symbol)\nIs_instrument(\"hammer\").\n.decl Is_material(Object:symbol)\nIs_material(\"wood\").\n.decl Is_used_for(Object:symbol, Event:symbol)\nIs_used_for(\"hammer\", \"Martin Luther's Reformation opening salvo\").\nIs_used_for(\"nail\", \"crucifixion\").\n.decl Answer()\nAnswer() :- Is_tool(object), Is_used_for(object, \"Martin Luther's Reformation opening salvo\"), Is_used_for(object, \"crucifixion\").\n.output Answer"]}
{"id": 1326, "answer": true, "completion": ".decl Has_percentage_fat(Milk:symbol, Percentage_fat:float)\nHas_percentage_fat(\"bottled milk\", 3.5).\nHas_percentage_fat(\"cream\", 18).\n.decl Answer()\nAnswer() :- Has_percentage_fat(\"bottled milk\", percentage_fat1), Has_percentage_fat(\"cream\", percentage_fat2), percentage_fat1 < percentage_fat2.\n.output Answer", "completions": [".decl Has_percentage_fat(Milk:symbol, Percentage_fat:float)\nHas_percentage_fat(\"bottled milk\", 3.5).\nHas_percentage_fat(\"cream\", 18).\n.decl Answer()\nAnswer() :- Has_percentage_fat(\"bottled milk\", percentage_fat1), Has_percentage_fat(\"cream\", percentage_fat2), percentage_fat1 < percentage_fat2.\n.output Answer"]}
{"id": 1327, "answer": true, "completion": ".decl Is_dangerous(Chemical1:symbol, Chemical2:symbol)\nIs_dangerous(\"Ammonia\", \"Clorox\").\n.decl Answer()\nAnswer() :- Is_dangerous(chemical1, chemical2).\n.output Answer", "completions": [".decl Is_dangerous(Chemical1:symbol, Chemical2:symbol)\nIs_dangerous(\"Ammonia\", \"Clorox\").\n.decl Answer()\nAnswer() :- Is_dangerous(chemical1, chemical2).\n.output Answer"]}
{"id": 1328, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Deacon\", \"Deacon\").\n.decl Has_favorite_podcast(Person:symbol, Podcast:symbol)\nHas_favorite_podcast(\"Deacon\", \"God Awful Movies\").\n.decl Answer()\nAnswer() :- Has_job(\"Deacon\", \"Deacon\"), Has_favorite_podcast(\"Deacon\", \"God Awful Movies\").\n.output Answer", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Deacon\", \"Deacon\").\n.decl Has_favorite_podcast(Person:symbol, Podcast:symbol)\nHas_favorite_podcast(\"Deacon\", \"God Awful Movies\").\n.decl Answer()\nAnswer() :- Has_job(\"Deacon\", \"Deacon\"), Has_favorite_podcast(\"Deacon\", \"God Awful Movies\").\n.output Answer"]}
{"id": 1329, "answer": false, "completion": ".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Zoroastrian\", \"Ahura Mazda\").\n.decl Answer()\nAnswer() :- Worships(\"Zoroastrian\", \"Ahura Mazda\"), !.\n.output Answer", "completions": [".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Zoroastrian\", \"Ahura Mazda\").\n.decl Answer()\nAnswer() :- Worships(\"Zoroastrian\", \"Ahura Mazda\"), !.\n.output Answer"]}
{"id": 1330, "answer": true, "completion": ".decl Has_lead_singer(Band:symbol, Lead_singer:symbol)\nHas_lead_singer(\"Nine Inch Nails\", \"Trent Reznor\").\n.decl Has_associate(Person:symbol, Associate:symbol)\nHas_associate(\"Trent Reznor\", \"David Lynch\").\n.decl Answer()\nAnswer() :- Has_lead_singer(\"Nine Inch Nails\", lead_singer), Has_associate(lead_singer, \"David Lynch\").\n.output Answer", "completions": [".decl Has_lead_singer(Band:symbol, Lead_singer:symbol)\nHas_lead_singer(\"Nine Inch Nails\", \"Trent Reznor\").\n.decl Has_associate(Person:symbol, Associate:symbol)\nHas_associate(\"Trent Reznor\", \"David Lynch\").\n.decl Answer()\nAnswer() :- Has_lead_singer(\"Nine Inch Nails\", lead_singer), Has_associate(lead_singer, \"David Lynch\").\n.output Answer"]}
{"id": 1331, "answer": true, "completion": ".decl Supports(Country:symbol, Country2:symbol)\nSupports(\"Switzerland\", \"United States\").\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Spanish–American War\", 2).\n.decl Answer()\nAnswer() :- Supports(\"Switzerland\", \"United States\"), Last_n_years(\"Spanish–American War\", n_years).\n.output Answer", "completions": [".decl Supports(Country:symbol, Country2:symbol)\nSupports(\"Switzerland\", \"United States\").\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Spanish–American War\", 2).\n.decl Answer()\nAnswer() :- Supports(\"Switzerland\", \"United States\"), Last_n_years(\"Spanish–American War\", n_years).\n.output Answer"]}
{"id": 1332, "answer": true, "completion": ".decl Is_deciduous(Tree:symbol)\nIs_deciduous(\"oak\").\nIs_deciduous(\"maple\").\nIs_deciduous(\"birch\").\nIs_deciduous(\"beech\").\nIs_deciduous(\"aspen\").\nIs_deciduous(\"poplar\").\nIs_deciduous(\"willow\").\nIs_deciduous(\"elm\").\nIs_deciduous(\"linden\").\nIs_deciduous(\"chestnut\").\nIs_deciduous(\"hornbeam\").\nIs_deciduous(\"ash\").\nIs_deciduous(\"alder\").\nIs_deciduous(\"hawthorn\").\nIs_deciduous(\"rowan\").\nIs_deciduous(\"cherry\").\nIs_deciduous(\"pear\").\nIs_deciduous(\"plum\").\nIs_deciduous(\"apricot\").\nIs_deciduous(\"apple\").\nIs_deciduous(\"quince\").\nIs_deciduous(\"peach\").\nIs_deciduous(\"sloe\").\nIs_deciduous(\"medlar\").\nIs_deciduous(\"lilac\").\nIs_deciduous(\"magnolia\").\nIs_deciduous(\"laburnum\").\nIs_deciduous(\"acacia\").\nIs_deciduous(\"linden\").\nIs_deciduous(\"chestnut\").\nIs_deciduous(\"hornbeam\").\nIs_deciduous(\"ash\").\nIs_deciduous(\"alder\").\nIs_deciduous(\"hawthorn\").\nIs_deciduous(\"rowan\").\nIs_deciduous(\"cherry\").\nIs_deciduous(\"pear\").\nIs_deciduous(\"plum\").\nIs_deciduous(\"apricot\").\nIs_deciduous(\"apple\").\nIs_deciduous(\"quince\").\nIs_deciduous(\"peach\").\nIs_deciduous(\"sloe\").\nIs_deciduous(\"medlar\").\nIs_deciduous(\"lilac\").\nIs_deciduous(\"magnolia\").\nIs_deciduous(\"laburnum\").\nIs_deciduous(\"acacia\").\n.decl Answer()\nAnswer() :- Is_deciduous(\"Christmas tree\").\n.output Answer", "completions": [".decl Is_deciduous(Tree:symbol)\nIs_deciduous(\"oak\").\nIs_deciduous(\"maple\").\nIs_deciduous(\"birch\").\nIs_deciduous(\"beech\").\nIs_deciduous(\"aspen\").\nIs_deciduous(\"poplar\").\nIs_deciduous(\"willow\").\nIs_deciduous(\"elm\").\nIs_deciduous(\"linden\").\nIs_deciduous(\"chestnut\").\nIs_deciduous(\"hornbeam\").\nIs_deciduous(\"ash\").\nIs_deciduous(\"alder\").\nIs_deciduous(\"hawthorn\").\nIs_deciduous(\"rowan\").\nIs_deciduous(\"cherry\").\nIs_deciduous(\"pear\").\nIs_deciduous(\"plum\").\nIs_deciduous(\"apricot\").\nIs_deciduous(\"apple\").\nIs_deciduous(\"quince\").\nIs_deciduous(\"peach\").\nIs_deciduous(\"sloe\").\nIs_deciduous(\"medlar\").\nIs_deciduous(\"lilac\").\nIs_deciduous(\"magnolia\").\nIs_deciduous(\"laburnum\").\nIs_deciduous(\"acacia\").\nIs_deciduous(\"linden\").\nIs_deciduous(\"chestnut\").\nIs_deciduous(\"hornbeam\").\nIs_deciduous(\"ash\").\nIs_deciduous(\"alder\").\nIs_deciduous(\"hawthorn\").\nIs_deciduous(\"rowan\").\nIs_deciduous(\"cherry\").\nIs_deciduous(\"pear\").\nIs_deciduous(\"plum\").\nIs_deciduous(\"apricot\").\nIs_deciduous(\"apple\").\nIs_deciduous(\"quince\").\nIs_deciduous(\"peach\").\nIs_deciduous(\"sloe\").\nIs_deciduous(\"medlar\").\nIs_deciduous(\"lilac\").\nIs_deciduous(\"magnolia\").\nIs_deciduous(\"laburnum\").\nIs_deciduous(\"acacia\").\n.decl Answer()\nAnswer() :- Is_deciduous(\"Christmas tree\").\n.output Answer"]}
{"id": 1333, "answer": false, "completion": ".decl Appears_in(Character:symbol, Movie:symbol)\nAppears_in(\"Robert Downey Jr\", \"Iron Man\").\nAppears_in(\"Robert Downey Jr\", \"Iron Man 2\").\nAppears_in(\"Robert Downey Jr\", \"Iron Man 3\").\nAppears_in(\"Robert Downey Jr\", \"Avengers: Age of Ultron\").\nAppears_in(\"Robert Downey Jr\", \"Captain America: Civil War\").\nAppears_in(\"Robert Downey Jr\", \"Spider-Man: Homecoming\").\nAppears_in(\"Robert Downey Jr\", \"Avengers: Infinity War\").\n.decl Dies_in(Character:symbol, Movie:symbol)\nDies_in(\"Robert Downey Jr\", \"Avengers: Endgame\").\n.decl Answer()\nAnswer() :- Appears_in(\"Robert Downey Jr\", \"Avengers: Infinity War\"), !Dies_in(\"Robert Downey Jr\", \"Avengers: Infinity War\").\n.output Answer", "completions": [".decl Appears_in(Character:symbol, Movie:symbol)\nAppears_in(\"Robert Downey Jr\", \"Iron Man\").\nAppears_in(\"Robert Downey Jr\", \"Iron Man 2\").\nAppears_in(\"Robert Downey Jr\", \"Iron Man 3\").\nAppears_in(\"Robert Downey Jr\", \"Avengers: Age of Ultron\").\nAppears_in(\"Robert Downey Jr\", \"Captain America: Civil War\").\nAppears_in(\"Robert Downey Jr\", \"Spider-Man: Homecoming\").\nAppears_in(\"Robert Downey Jr\", \"Avengers: Infinity War\").\n.decl Dies_in(Character:symbol, Movie:symbol)\nDies_in(\"Robert Downey Jr\", \"Avengers: Endgame\").\n.decl Answer()\nAnswer() :- Appears_in(\"Robert Downey Jr\", \"Avengers: Infinity War\"), !Dies_in(\"Robert Downey Jr\", \"Avengers: Infinity War\").\n.output Answer"]}
{"id": 1334, "answer": true, "completion": ".decl Has_magnetic_field(Planet:symbol, Magnetic_field:symbol)\nHas_magnetic_field(\"Earth\", \"yes\").\n.decl Is_magnetic(Object:symbol, Magnetic:symbol)\nIs_magnetic(\"compass\", \"yes\").\n.decl Answer()\nAnswer() :- Has_magnetic_field(\"Earth\", magnetic_field), Is_magnetic(\"compass\", magnetic), magnetic_field = magnetic.\n.output Answer", "completions": [".decl Has_magnetic_field(Planet:symbol, Magnetic_field:symbol)\nHas_magnetic_field(\"Earth\", \"yes\").\n.decl Is_magnetic(Object:symbol, Magnetic:symbol)\nIs_magnetic(\"compass\", \"yes\").\n.decl Answer()\nAnswer() :- Has_magnetic_field(\"Earth\", magnetic_field), Is_magnetic(\"compass\", magnetic), magnetic_field = magnetic.\n.output Answer"]}
{"id": 1335, "answer": true, "completion": ".decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"tampons\", 24).\n.decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"mentruation\", 24).\n.decl Answer()\nAnswer() :- Lasts_for_n_hours(\"tampons\", n_hours1), Lasts_for_n_hours(\"mentruation\", n_hours2), n_hours1 >= n_hours2.\n.output Answer", "completions": [".decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"tampons\", 24).\n.decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"mentruation\", 24).\n.decl Answer()\nAnswer() :- Lasts_for_n_hours(\"tampons\", n_hours1), Lasts_for_n_hours(\"mentruation\", n_hours2), n_hours1 >= n_hours2.\n.output Answer"]}
{"id": 1336, "answer": true, "completion": ".decl Is_fictional(Character:symbol)\nIs_fictional(\"Robin Hood\").\nIs_fictional(\"Little John\").\nIs_fictional(\"Friar Tuck\").\nIs_fictional(\"Maid Marian\").\n.decl Answer()\nAnswer() :- Is_fictional(character).\n.output Answer", "completions": [".decl Is_fictional(Character:symbol)\nIs_fictional(\"Robin Hood\").\nIs_fictional(\"Little John\").\nIs_fictional(\"Friar Tuck\").\nIs_fictional(\"Maid Marian\").\n.decl Answer()\nAnswer() :- Is_fictional(character).\n.output Answer"]}
{"id": 1337, "answer": false, "completion": ".decl Requires_n_hands(Weapon:symbol, N_hands:float)\nRequires_n_hands(\"gladiator's weapon of choice\", 1).\nRequires_n_hands(\"Soul Calibur's Faust\", 2).\n.decl Answer()\nAnswer() :- Requires_n_hands(\"gladiator's weapon of choice\", n_hands1), Requires_n_hands(\"Soul Calibur's Faust\", n_hands2), n_hands1 < n_hands2.\n.output Answer", "completions": [".decl Requires_n_hands(Weapon:symbol, N_hands:float)\nRequires_n_hands(\"gladiator's weapon of choice\", 1).\nRequires_n_hands(\"Soul Calibur's Faust\", 2).\n.decl Answer()\nAnswer() :- Requires_n_hands(\"gladiator's weapon of choice\", n_hands1), Requires_n_hands(\"Soul Calibur's Faust\", n_hands2), n_hands1 < n_hands2.\n.output Answer"]}
{"id": 1338, "answer": true, "completion": ".decl Buys(Person:symbol, Item:symbol)\nBuys(\"Mozart\", \"piano\").\n.decl Answer()\nAnswer() :- Buys(\"Mozart\", \"Dolce & Gabbana\").\n.output Answer", "completions": [".decl Buys(Person:symbol, Item:symbol)\nBuys(\"Mozart\", \"piano\").\n.decl Answer()\nAnswer() :- Buys(\"Mozart\", \"Dolce & Gabbana\").\n.output Answer"]}
{"id": 1339, "answer": false, "completion": ".decl Inspires(Artist1:symbol, Artist2:symbol)\nInspires(\"Nine Inch Nails\", \"Aretha Franklin\").\n.decl Answer()\nAnswer() :- Inspires(\"Nine Inch Nails\", \"Aretha Franklin\").\n.output Answer", "completions": [".decl Inspires(Artist1:symbol, Artist2:symbol)\nInspires(\"Nine Inch Nails\", \"Aretha Franklin\").\n.decl Answer()\nAnswer() :- Inspires(\"Nine Inch Nails\", \"Aretha Franklin\").\n.output Answer"]}
{"id": 1340, "answer": false, "completion": ".decl Lactose_intolerant(Person:symbol)\nLactose_intolerant(\"John\").\n.decl Contains_lactose(Food:symbol)\nContains_lactose(\"cream\").\n.decl Answer()\nAnswer() :- Lactose_intolerant(person), Contains_lactose(food).\n.output Answer", "completions": [".decl Lactose_intolerant(Person:symbol)\nLactose_intolerant(\"John\").\n.decl Contains_lactose(Food:symbol)\nContains_lactose(\"cream\").\n.decl Answer()\nAnswer() :- Lactose_intolerant(person), Contains_lactose(food).\n.output Answer"]}
{"id": 1341, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"summer\", \"summer\").\nHappens_in_season(\"Santa Claus\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"summer\", season), Happens_in_season(\"Santa Claus\", season), season != \"summer\".\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"summer\", \"summer\").\nHappens_in_season(\"Santa Claus\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"summer\", season), Happens_in_season(\"Santa Claus\", season), season != \"summer\".\n.output Answer"]}
{"id": 1342, "answer": true, "completion": ".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"bachelor's degree\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Lasts_n_years(\"bachelor's degree\", n_years1), Happens_every_n_years(\"leap year\", n_years2), n_years1 >= n_years2.\n.output Answer", "completions": [".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"bachelor's degree\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Lasts_n_years(\"bachelor's degree\", n_years1), Happens_every_n_years(\"leap year\", n_years2), n_years1 >= n_years2.\n.output Answer"]}
{"id": 1343, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Albanian Civil War\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Harry Potter and the Philosopher's Stone\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Harry Potter and the Philosopher's Stone\", n_years1), Last_n_years(\"Albanian Civil War\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Albanian Civil War\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Harry Potter and the Philosopher's Stone\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Harry Potter and the Philosopher's Stone\", n_years1), Last_n_years(\"Albanian Civil War\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1344, "answer": true, "completion": ".decl Collaborates(Person1:symbol, Person2:symbol)\nCollaborates(\"Jay-Z\", \"Eminem\").\nCollaborates(\"Jay-Z\", \"Beyonce\").\nCollaborates(\"Jay-Z\", \"Kanye West\").\nCollaborates(\"Jay-Z\", \"Rihanna\").\nCollaborates(\"Jay-Z\", \"Drake\").\nCollaborates(\"Jay-Z\", \"Justin Timberlake\").\nCollaborates(\"Jay-Z\", \"Pharrell Williams\").\nCollaborates(\"Jay-Z\", \"Timbaland\").\nCollaborates(\"Jay-Z\", \"Ne-Yo\").\nCollaborates(\"Jay-Z\", \"Alicia Keys\").\nCollaborates(\"Jay-Z\", \"Coldplay\").\nCollaborates(\"Jay-Z\", \"Linkin Park\").\nCollaborates(\"Jay-Z\", \"Madonna\").\nCollaborates(\"Jay-Z\", \"Mariah Carey\").\nCollaborates(\"Jay-Z\", \"R. Kelly\").\nCollaborates(\"Jay-Z\", \"Usher\").\nCollaborates(\"Jay-Z\", \"Lil Wayne\").\nCollaborates(\"Jay-Z\", \"Rick Ross\").\nCollaborates(\"Jay-Z\", \"Chris Martin\").\nCollaborates(\"Jay-Z\", \"Swizz Beatz\").\nCollaborates(\"Jay-Z\", \"Dr. Dre\").\nCollaborates(\"Jay-Z\", \"Puff Daddy\").\nCollaborates(\"Jay-Z\", \"Snoop Dogg\").\nCollaborates(\"Jay-Z\", \"The Notorious B.I.G.\").\nCollaborates(\"Jay-Z\", \"Nas\").\nCollaborates(\"Jay-Z\", \"T.I.\").\nCollaborates(\"Jay-Z\", \"Ludacris\").\nCollaborates(\"Jay-Z\", \"Young Jeezy\").\nCollaborates(\"Jay-Z\", \"T-Pain\").\nCollaborates(\"Jay-Z\", \"Lil Kim\").\nCollaborates(\"Jay-Z\", \"Missy Elliott\").\nCollaborates(\"Jay-Z\", \"Busta Rhymes\").\nCollaborates(\"Jay-Z\", \"Fat Joe\").\nCollaborates(\"Jay-Z\", \"Jadakiss\").\nCollaborates(\"Jay-Z\", \"Ja Rule\").\nCollaborates(\"Jay-Z\", \"Slim Thug\").\nCollaborates(\"Jay-Z\", \"The Game\").\nCollaborates(\"Jay-Z\", \"50 Cent\").\nCollaborates(\"Jay-Z\", \"Eve\").\nCollaborates(\"Jay-Z\", \"Mary J. Blige\").\nCollaborates(\"Jay-Z\", \"R. Kelly\").\nCollaborates(\"Jay-Z\", \"Santana\").\nCollaborates(\"Jay-Z\", \"U2\").\nCollaborates(\"Jay-Z\", \"Xzibit\").\nCollaborates(\"Jay-Z\", \"Young Jeezy\").\nCollaborates(\"Jay-Z\", \"Young Thug\").\nCollaborates(\"Jay-Z\", \"DJ Khaled\").\nCollaborates(\"Jay-Z\", \"Future\").\nCollaborates(\"Jay-Z\", \"Kendrick Lamar\").\nCollaborates(\"Jay-Z\", \"Migos\").\nCollaborates(\"Jay-Z\", \"Rihanna\").\nCollaborates(\"Jay-Z\", \"Ty Dolla Sign\").\nCollaborates(\"Jay-Z\", \"Big Sean\").\nCollaborates(\"Jay-Z\", \"DJ Khaled\").\nCollaborates(\"Jay-Z\", \"Future\").\nCollaborates(\"Jay-Z\",", "completions": [".decl Collaborates(Person1:symbol, Person2:symbol)\nCollaborates(\"Jay-Z\", \"Eminem\").\nCollaborates(\"Jay-Z\", \"Beyonce\").\nCollaborates(\"Jay-Z\", \"Kanye West\").\nCollaborates(\"Jay-Z\", \"Rihanna\").\nCollaborates(\"Jay-Z\", \"Drake\").\nCollaborates(\"Jay-Z\", \"Justin Timberlake\").\nCollaborates(\"Jay-Z\", \"Pharrell Williams\").\nCollaborates(\"Jay-Z\", \"Timbaland\").\nCollaborates(\"Jay-Z\", \"Ne-Yo\").\nCollaborates(\"Jay-Z\", \"Alicia Keys\").\nCollaborates(\"Jay-Z\", \"Coldplay\").\nCollaborates(\"Jay-Z\", \"Linkin Park\").\nCollaborates(\"Jay-Z\", \"Madonna\").\nCollaborates(\"Jay-Z\", \"Mariah Carey\").\nCollaborates(\"Jay-Z\", \"R. Kelly\").\nCollaborates(\"Jay-Z\", \"Usher\").\nCollaborates(\"Jay-Z\", \"Lil Wayne\").\nCollaborates(\"Jay-Z\", \"Rick Ross\").\nCollaborates(\"Jay-Z\", \"Chris Martin\").\nCollaborates(\"Jay-Z\", \"Swizz Beatz\").\nCollaborates(\"Jay-Z\", \"Dr. Dre\").\nCollaborates(\"Jay-Z\", \"Puff Daddy\").\nCollaborates(\"Jay-Z\", \"Snoop Dogg\").\nCollaborates(\"Jay-Z\", \"The Notorious B.I.G.\").\nCollaborates(\"Jay-Z\", \"Nas\").\nCollaborates(\"Jay-Z\", \"T.I.\").\nCollaborates(\"Jay-Z\", \"Ludacris\").\nCollaborates(\"Jay-Z\", \"Young Jeezy\").\nCollaborates(\"Jay-Z\", \"T-Pain\").\nCollaborates(\"Jay-Z\", \"Lil Kim\").\nCollaborates(\"Jay-Z\", \"Missy Elliott\").\nCollaborates(\"Jay-Z\", \"Busta Rhymes\").\nCollaborates(\"Jay-Z\", \"Fat Joe\").\nCollaborates(\"Jay-Z\", \"Jadakiss\").\nCollaborates(\"Jay-Z\", \"Ja Rule\").\nCollaborates(\"Jay-Z\", \"Slim Thug\").\nCollaborates(\"Jay-Z\", \"The Game\").\nCollaborates(\"Jay-Z\", \"50 Cent\").\nCollaborates(\"Jay-Z\", \"Eve\").\nCollaborates(\"Jay-Z\", \"Mary J. Blige\").\nCollaborates(\"Jay-Z\", \"R. Kelly\").\nCollaborates(\"Jay-Z\", \"Santana\").\nCollaborates(\"Jay-Z\", \"U2\").\nCollaborates(\"Jay-Z\", \"Xzibit\").\nCollaborates(\"Jay-Z\", \"Young Jeezy\").\nCollaborates(\"Jay-Z\", \"Young Thug\").\nCollaborates(\"Jay-Z\", \"DJ Khaled\").\nCollaborates(\"Jay-Z\", \"Future\").\nCollaborates(\"Jay-Z\", \"Kendrick Lamar\").\nCollaborates(\"Jay-Z\", \"Migos\").\nCollaborates(\"Jay-Z\", \"Rihanna\").\nCollaborates(\"Jay-Z\", \"Ty Dolla Sign\").\nCollaborates(\"Jay-Z\", \"Big Sean\").\nCollaborates(\"Jay-Z\", \"DJ Khaled\").\nCollaborates(\"Jay-Z\", \"Future\").\nCollaborates(\"Jay-Z\","]}
{"id": 1345, "answer": true, "completion": ".decl Is_allowed(Object:symbol, Location:symbol)\nIs_allowed(\"robusto\", \"Central Park Zoo\").\n.decl Answer()\nAnswer() :- Is_allowed(\"robusto\", \"Central Park Zoo\").\n.output Answer", "completions": [".decl Is_allowed(Object:symbol, Location:symbol)\nIs_allowed(\"robusto\", \"Central Park Zoo\").\n.decl Answer()\nAnswer() :- Is_allowed(\"robusto\", \"Central Park Zoo\").\n.output Answer"]}
{"id": 1346, "answer": true, "completion": ".decl Helps_detect(Element:symbol, Virus:symbol)\nHelps_detect(\"mercury\", \"coronavirus\").\n.decl Answer()\nAnswer() :- Helps_detect(\"mercury\", \"coronavirus\").\n.output Answer", "completions": [".decl Helps_detect(Element:symbol, Virus:symbol)\nHelps_detect(\"mercury\", \"coronavirus\").\n.decl Answer()\nAnswer() :- Helps_detect(\"mercury\", \"coronavirus\").\n.output Answer"]}
{"id": 1347, "answer": true, "completion": ".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"smartphone\", 2007).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Al Capone\", 1947).\n.decl Answer()\nAnswer() :- Invented_in_year(\"smartphone\", year1), Died_in_year(\"Al Capone\", year2), year1 > year2.\n.output Answer", "completions": [".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"smartphone\", 2007).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Al Capone\", 1947).\n.decl Answer()\nAnswer() :- Invented_in_year(\"smartphone\", year1), Died_in_year(\"Al Capone\", year2), year1 > year2.\n.output Answer"]}
{"id": 1348, "answer": true, "completion": ".decl Is_prime(Person:symbol)\nIs_prime(\"Benjamin Franklin\").\n.decl Is_candidate(Person:symbol)\nIs_candidate(\"Benjamin Franklin\").\n.decl Answer()\nAnswer() :- Is_prime(person), Is_candidate(person).\n.output Answer", "completions": [".decl Is_prime(Person:symbol)\nIs_prime(\"Benjamin Franklin\").\n.decl Is_candidate(Person:symbol)\nIs_candidate(\"Benjamin Franklin\").\n.decl Answer()\nAnswer() :- Is_prime(person), Is_candidate(person).\n.output Answer"]}
{"id": 1349, "answer": false, "completion": ".decl Is_martyr(Person:symbol)\nIs_martyr(\"Jason Voorhees\").\n.decl Answer()\nAnswer() :- Is_martyr(\"Jason Voorhees\").\n.output Answer", "completions": [".decl Is_martyr(Person:symbol)\nIs_martyr(\"Jason Voorhees\").\n.decl Answer()\nAnswer() :- Is_martyr(\"Jason Voorhees\").\n.output Answer"]}
{"id": 1350, "answer": false, "completion": ".decl Is_true(Fact:symbol)\nIs_true(\"black people are apes\").\n.decl Answer()\nAnswer() :- Is_true(\"black people are apes\").\n.output Answer", "completions": [".decl Is_true(Fact:symbol)\nIs_true(\"black people are apes\").\n.decl Answer()\nAnswer() :- Is_true(\"black people are apes\").\n.output Answer"]}
{"id": 1351, "answer": true, "completion": ".decl Has_eyes(Animal:symbol, Eyes:float)\nHas_eyes(\"fly\", 2).\n.decl Answer()\nAnswer() :- Has_eyes(\"fly\", eyes), eyes = 2.\n.output Answer", "completions": [".decl Has_eyes(Animal:symbol, Eyes:float)\nHas_eyes(\"fly\", 2).\n.decl Answer()\nAnswer() :- Has_eyes(\"fly\", eyes), eyes = 2.\n.output Answer"]}
{"id": 1352, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"rainbow\", \"red\").\nHas_color(\"rainbow\", \"orange\").\nHas_color(\"rainbow\", \"yellow\").\nHas_color(\"rainbow\", \"green\").\nHas_color(\"rainbow\", \"blue\").\nHas_color(\"rainbow\", \"indigo\").\nHas_color(\"rainbow\", \"violet\").\nHas_color(\"yin\", \"black\").\nHas_color(\"yin\", \"white\").\nHas_color(\"yang\", \"red\").\nHas_color(\"yang\", \"green\").\nHas_color(\"yang\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"rainbow\", color1), Has_color(\"yin\", color2), Has_color(\"yang\", color3), color1 = color2, color1 = color3.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"rainbow\", \"red\").\nHas_color(\"rainbow\", \"orange\").\nHas_color(\"rainbow\", \"yellow\").\nHas_color(\"rainbow\", \"green\").\nHas_color(\"rainbow\", \"blue\").\nHas_color(\"rainbow\", \"indigo\").\nHas_color(\"rainbow\", \"violet\").\nHas_color(\"yin\", \"black\").\nHas_color(\"yin\", \"white\").\nHas_color(\"yang\", \"red\").\nHas_color(\"yang\", \"green\").\nHas_color(\"yang\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"rainbow\", color1), Has_color(\"yin\", color2), Has_color(\"yang\", color3), color1 = color2, color1 = color3.\n.output Answer"]}
{"id": 1353, "answer": true, "completion": ".decl Came_from(Animal:symbol, Period:symbol)\nCame_from(\"mongoose\", \"Cretaceous\").\nCame_from(\"rhinos\", \"Triassic\").\n.decl Answer()\nAnswer() :- Came_from(\"mongoose\", period1), Came_from(\"rhinos\", period2), period1 > period2.\n.output Answer", "completions": [".decl Came_from(Animal:symbol, Period:symbol)\nCame_from(\"mongoose\", \"Cretaceous\").\nCame_from(\"rhinos\", \"Triassic\").\n.decl Answer()\nAnswer() :- Came_from(\"mongoose\", period1), Came_from(\"rhinos\", period2), period1 > period2.\n.output Answer"]}
{"id": 1354, "answer": true, "completion": ".decl Participates_in(Person:symbol, War:symbol)\nParticipates_in(\"Archduke Franz Ferdinand of Austria\", \"World War I\").\n.decl Answer()\nAnswer() :- Participates_in(\"Archduke Franz Ferdinand of Austria\", \"Pacific War\").\n.output Answer", "completions": [".decl Participates_in(Person:symbol, War:symbol)\nParticipates_in(\"Archduke Franz Ferdinand of Austria\", \"World War I\").\n.decl Answer()\nAnswer() :- Participates_in(\"Archduke Franz Ferdinand of Austria\", \"Pacific War\").\n.output Answer"]}
{"id": 1355, "answer": false, "completion": ".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Paulo Coelho's wife\", \"speech\").\n.decl Answer()\nAnswer() :- Has_occupation(\"Paulo Coelho's wife\", \"speech\").\n.output Answer\n\n\n", "completions": [".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Paulo Coelho's wife\", \"speech\").\n.decl Answer()\nAnswer() :- Has_occupation(\"Paulo Coelho's wife\", \"speech\").\n.output Answer\n\n\n"]}
{"id": 1356, "answer": false, "completion": ".decl Baby_Boomer(Person:symbol)\nBaby_Boomer(\"Bill Gates\").\nBaby_Boomer(\"Warren Buffett\").\n.decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Bill Gates\", 90).\nHas_net_worth(\"Warren Buffett\", 84).\n.decl Answer()\nAnswer() :- Baby_Boomer(person1), Baby_Boomer(person2), Has_net_worth(person1, net_worth1), Has_net_worth(person2, net_worth2), net_worth1 > net_worth2.\n.output Answer", "completions": [".decl Baby_Boomer(Person:symbol)\nBaby_Boomer(\"Bill Gates\").\nBaby_Boomer(\"Warren Buffett\").\n.decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Bill Gates\", 90).\nHas_net_worth(\"Warren Buffett\", 84).\n.decl Answer()\nAnswer() :- Baby_Boomer(person1), Baby_Boomer(person2), Has_net_worth(person1, net_worth1), Has_net_worth(person2, net_worth2), net_worth1 > net_worth2.\n.output Answer"]}
{"id": 1357, "answer": false, "completion": ".decl Runs_on_OS(Device:symbol, OS:symbol)\nRuns_on_OS(\"Windows\", \"Windows\").\nRuns_on_OS(\"Android\", \"Linux\").\n.decl Is_newer_version(OS:symbol, OS_version:symbol)\nIs_newer_version(\"Linux\", \"4.0\").\nIs_newer_version(\"Linux\", \"4.1\").\nIs_newer_version(\"Linux\", \"4.2\").\nIs_newer_version(\"Linux\", \"4.3\").\nIs_newer_version(\"Linux\", \"4.4\").\nIs_newer_version(\"Linux\", \"4.5\").\nIs_newer_version(\"Linux\", \"4.6\").\nIs_newer_version(\"Linux\", \"4.7\").\nIs_newer_version(\"Linux\", \"4.8\").\nIs_newer_version(\"Linux\", \"4.9\").\nIs_newer_version(\"Linux\", \"4.10\").\nIs_newer_version(\"Linux\", \"4.11\").\nIs_newer_version(\"Linux\", \"4.12\").\nIs_newer_version(\"Linux\", \"4.13\").\nIs_newer_version(\"Linux\", \"4.14\").\nIs_newer_version(\"Linux\", \"4.15\").\nIs_newer_version(\"Linux\", \"4.16\").\nIs_newer_version(\"Linux\", \"4.17\").\nIs_newer_version(\"Linux\", \"4.18\").\nIs_newer_version(\"Linux\", \"4.19\").\nIs_newer_version(\"Linux\", \"5.0\").\nIs_newer_version(\"Linux\", \"5.1\").\nIs_newer_version(\"Linux\", \"5.2\").\nIs_newer_version(\"Linux\", \"5.3\").\nIs_newer_version(\"Linux\", \"5.4\").\nIs_newer_version(\"Linux\", \"5.5\").\nIs_newer_version(\"Linux\", \"5.6\").\nIs_newer_version(\"Linux\", \"5.7\").\nIs_newer_version(\"Linux\", \"5.8\").\nIs_newer_version(\"Linux\", \"5.9\").\nIs_newer_version(\"Linux\", \"5.10\").\nIs_newer_version(\"Linux\", \"5.11\").\nIs_newer_version(\"Linux\", \"5.12\").\nIs_newer_version(\"Linux\", \"5.13\").\nIs_newer_version(\"Linux\", \"5.14\").\nIs_newer_version(\"Linux\", \"5.15\").\nIs_newer_version(\"Linux\", \"5.16\").\nIs_newer_version(\"Linux\", \"5.17\").\nIs_newer_version(\"Linux\", \"5.18\").\nIs_newer_version(\"Linux\", \"5.19\").\nIs_newer_version(\"Linux\", \"5.20\").\nIs_newer_version(\"Linux\", \"6.0\").\nIs_newer_version(\"Linux\", \"6.1\").\nIs_newer_version(\"Linux\", \"6.2\").\nIs_newer_version(\"Linux\", \"6.3\").\nIs_newer_version(\"Linux\", \"6.4\").\nIs_newer_version(\"Linux\", \"6.5\").\nIs_newer_version(\"Linux\", \"6.6\").\nIs_newer_version(\"Linux\", \"6.7", "completions": [".decl Runs_on_OS(Device:symbol, OS:symbol)\nRuns_on_OS(\"Windows\", \"Windows\").\nRuns_on_OS(\"Android\", \"Linux\").\n.decl Is_newer_version(OS:symbol, OS_version:symbol)\nIs_newer_version(\"Linux\", \"4.0\").\nIs_newer_version(\"Linux\", \"4.1\").\nIs_newer_version(\"Linux\", \"4.2\").\nIs_newer_version(\"Linux\", \"4.3\").\nIs_newer_version(\"Linux\", \"4.4\").\nIs_newer_version(\"Linux\", \"4.5\").\nIs_newer_version(\"Linux\", \"4.6\").\nIs_newer_version(\"Linux\", \"4.7\").\nIs_newer_version(\"Linux\", \"4.8\").\nIs_newer_version(\"Linux\", \"4.9\").\nIs_newer_version(\"Linux\", \"4.10\").\nIs_newer_version(\"Linux\", \"4.11\").\nIs_newer_version(\"Linux\", \"4.12\").\nIs_newer_version(\"Linux\", \"4.13\").\nIs_newer_version(\"Linux\", \"4.14\").\nIs_newer_version(\"Linux\", \"4.15\").\nIs_newer_version(\"Linux\", \"4.16\").\nIs_newer_version(\"Linux\", \"4.17\").\nIs_newer_version(\"Linux\", \"4.18\").\nIs_newer_version(\"Linux\", \"4.19\").\nIs_newer_version(\"Linux\", \"5.0\").\nIs_newer_version(\"Linux\", \"5.1\").\nIs_newer_version(\"Linux\", \"5.2\").\nIs_newer_version(\"Linux\", \"5.3\").\nIs_newer_version(\"Linux\", \"5.4\").\nIs_newer_version(\"Linux\", \"5.5\").\nIs_newer_version(\"Linux\", \"5.6\").\nIs_newer_version(\"Linux\", \"5.7\").\nIs_newer_version(\"Linux\", \"5.8\").\nIs_newer_version(\"Linux\", \"5.9\").\nIs_newer_version(\"Linux\", \"5.10\").\nIs_newer_version(\"Linux\", \"5.11\").\nIs_newer_version(\"Linux\", \"5.12\").\nIs_newer_version(\"Linux\", \"5.13\").\nIs_newer_version(\"Linux\", \"5.14\").\nIs_newer_version(\"Linux\", \"5.15\").\nIs_newer_version(\"Linux\", \"5.16\").\nIs_newer_version(\"Linux\", \"5.17\").\nIs_newer_version(\"Linux\", \"5.18\").\nIs_newer_version(\"Linux\", \"5.19\").\nIs_newer_version(\"Linux\", \"5.20\").\nIs_newer_version(\"Linux\", \"6.0\").\nIs_newer_version(\"Linux\", \"6.1\").\nIs_newer_version(\"Linux\", \"6.2\").\nIs_newer_version(\"Linux\", \"6.3\").\nIs_newer_version(\"Linux\", \"6.4\").\nIs_newer_version(\"Linux\", \"6.5\").\nIs_newer_version(\"Linux\", \"6.6\").\nIs_newer_version(\"Linux\", \"6.7"]}
{"id": 1358, "answer": true, "completion": ".decl Was_born_in_year(Person:symbol, Year:float)\nWas_born_in_year(\"Bill Nye\", 1955).\nWas_born_in_year(\"Franklin Delano Roosevelt\", 1882).\n.decl Was_elected_in_year(Person:symbol, Year:float)\nWas_elected_in_year(\"Franklin Delano Roosevelt\", 1932).\n.decl Answer()\nAnswer() :- Was_born_in_year(\"Bill Nye\", year1), Was_elected_in_year(\"Franklin Delano Roosevelt\", year2), year1 > year2.\n.output Answer", "completions": [".decl Was_born_in_year(Person:symbol, Year:float)\nWas_born_in_year(\"Bill Nye\", 1955).\nWas_born_in_year(\"Franklin Delano Roosevelt\", 1882).\n.decl Was_elected_in_year(Person:symbol, Year:float)\nWas_elected_in_year(\"Franklin Delano Roosevelt\", 1932).\n.decl Answer()\nAnswer() :- Was_born_in_year(\"Bill Nye\", year1), Was_elected_in_year(\"Franklin Delano Roosevelt\", year2), year1 > year2.\n.output Answer"]}
{"id": 1359, "answer": false, "completion": ".decl Has_n_descendants(Person:symbol, N_descendants:float)\nHas_n_descendants(\"Genghis Khan\", 16).\nHas_n_descendants(\"Julius Caesar\", 0).\n.decl Answer()\nAnswer() :- Has_n_descendants(\"Genghis Khan\", n_descendants1), Has_n_descendants(\"Julius Caesar\", n_descendants2), n_descendants1 > n_descendants2.\n.output Answer", "completions": [".decl Has_n_descendants(Person:symbol, N_descendants:float)\nHas_n_descendants(\"Genghis Khan\", 16).\nHas_n_descendants(\"Julius Caesar\", 0).\n.decl Answer()\nAnswer() :- Has_n_descendants(\"Genghis Khan\", n_descendants1), Has_n_descendants(\"Julius Caesar\", n_descendants2), n_descendants1 > n_descendants2.\n.output Answer"]}
{"id": 1360, "answer": true, "completion": ".decl Invented_by(Object:symbol, Person:symbol)\nInvented_by(\"wristwatch\", \"Tadashi Kashio\").\nInvented_by(\"wristwatch\", \"Casio\").\n.decl Answer()\nAnswer() :- Invented_by(\"wristwatch\", \"Casio\").\n.output Answer", "completions": [".decl Invented_by(Object:symbol, Person:symbol)\nInvented_by(\"wristwatch\", \"Tadashi Kashio\").\nInvented_by(\"wristwatch\", \"Casio\").\n.decl Answer()\nAnswer() :- Invented_by(\"wristwatch\", \"Casio\").\n.output Answer"]}
{"id": 1361, "answer": true, "completion": ".decl Has_mental_illness(Patient:symbol, Mental_illness:symbol)\nHas_mental_illness(\"John\", \"depression\").\nHas_mental_illness(\"Mary\", \"anxiety\").\n.decl Answer()\nAnswer() :- Has_mental_illness(patient, \"depression\").\nAnswer() :- Has_mental_illness(patient, \"anxiety\").\nAnswer() :- Has_mental_illness(patient, \"bipolar disorder\").\nAnswer() :- Has_mental_illness(patient, \"schizophrenia\").\nAnswer() :- Has_mental_illness(patient, \"borderline personality disorder\").\nAnswer() :- Has_mental_illness(patient, \"post-traumatic stress disorder\").\nAnswer() :- Has_mental_illness(patient, \"dissociative identity disorder\").\nAnswer() :- Has_mental_illness(patient, \"eating disorder\").\nAnswer() :- Has_mental_illness(patient, \"substance abuse\").\nAnswer() :- Has_mental_illness(patient, \"personality disorder\").\nAnswer() :- Has_mental_illness(patient, \"obsessive-compulsive disorder\").\nAnswer() :- Has_mental_illness(patient, \"attention-deficit/hyperactivity disorder\").\nAnswer() :- Has_mental_illness(patient, \"autism spectrum disorder\").\nAnswer() :- Has_mental_illness(patient, \"generalized anxiety disorder\").\nAnswer() :- Has_mental_illness(patient, \"social anxiety disorder\").\nAnswer() :- Has_mental_illness(patient, \"panic disorder\").\nAnswer() :- Has_mental_illness(patient, \"agoraphobia\").\nAnswer() :- Has_mental_illness(patient, \"specific phobia\").\nAnswer() :- Has_mental_illness(patient, \"separation anxiety disorder\").\nAnswer() :- Has_mental_illness(patient, \"selective mutism\").\nAnswer() :- Has_mental_illness(patient, \"reactive attachment disorder\").\nAnswer() :- Has_mental_illness(patient, \"conduct disorder\").\nAnswer() :- Has_mental_illness(patient, \"oppositional defiant disorder\").\nAnswer() :- Has_mental_illness(patient, \"intermittent explosive disorder\").\nAnswer() :- Has_mental_illness(patient, \"pyromania\").\nAnswer() :- Has_mental_illness(patient, \"kleptomania\").\nAnswer() :- Has_mental_illness(patient, \"trichotillomania\").\nAnswer() :- Has_mental_illness(patient, \"dermatillomania\").\nAnswer() :- Has_mental_illness(patient, \"excoriation disorder\").\nAnswer() :- Has_mental_illness(patient, \"hoarding disorder\").\nAnswer() :- Has_mental_illness(patient, \"substance-related and addictive disorders\").\nAnswer() :- Has_mental_illness(patient, \"alcohol use disorder\").\nAnswer() :- Has_mental_illness(patient, \"caffeine use disorder\").\nAnswer() :- Has_mental_illness(patient, \"cannabis use disorder\").\nAnswer() :- Has_mental_illness(patient, \"inhalant use disorder\").\nAnswer() :- Has_mental_illness(patient, \"nicotine use disorder\").\nAnswer() :- Has_mental_illness(patient, \"opioid", "completions": [".decl Has_mental_illness(Patient:symbol, Mental_illness:symbol)\nHas_mental_illness(\"John\", \"depression\").\nHas_mental_illness(\"Mary\", \"anxiety\").\n.decl Answer()\nAnswer() :- Has_mental_illness(patient, \"depression\").\nAnswer() :- Has_mental_illness(patient, \"anxiety\").\nAnswer() :- Has_mental_illness(patient, \"bipolar disorder\").\nAnswer() :- Has_mental_illness(patient, \"schizophrenia\").\nAnswer() :- Has_mental_illness(patient, \"borderline personality disorder\").\nAnswer() :- Has_mental_illness(patient, \"post-traumatic stress disorder\").\nAnswer() :- Has_mental_illness(patient, \"dissociative identity disorder\").\nAnswer() :- Has_mental_illness(patient, \"eating disorder\").\nAnswer() :- Has_mental_illness(patient, \"substance abuse\").\nAnswer() :- Has_mental_illness(patient, \"personality disorder\").\nAnswer() :- Has_mental_illness(patient, \"obsessive-compulsive disorder\").\nAnswer() :- Has_mental_illness(patient, \"attention-deficit/hyperactivity disorder\").\nAnswer() :- Has_mental_illness(patient, \"autism spectrum disorder\").\nAnswer() :- Has_mental_illness(patient, \"generalized anxiety disorder\").\nAnswer() :- Has_mental_illness(patient, \"social anxiety disorder\").\nAnswer() :- Has_mental_illness(patient, \"panic disorder\").\nAnswer() :- Has_mental_illness(patient, \"agoraphobia\").\nAnswer() :- Has_mental_illness(patient, \"specific phobia\").\nAnswer() :- Has_mental_illness(patient, \"separation anxiety disorder\").\nAnswer() :- Has_mental_illness(patient, \"selective mutism\").\nAnswer() :- Has_mental_illness(patient, \"reactive attachment disorder\").\nAnswer() :- Has_mental_illness(patient, \"conduct disorder\").\nAnswer() :- Has_mental_illness(patient, \"oppositional defiant disorder\").\nAnswer() :- Has_mental_illness(patient, \"intermittent explosive disorder\").\nAnswer() :- Has_mental_illness(patient, \"pyromania\").\nAnswer() :- Has_mental_illness(patient, \"kleptomania\").\nAnswer() :- Has_mental_illness(patient, \"trichotillomania\").\nAnswer() :- Has_mental_illness(patient, \"dermatillomania\").\nAnswer() :- Has_mental_illness(patient, \"excoriation disorder\").\nAnswer() :- Has_mental_illness(patient, \"hoarding disorder\").\nAnswer() :- Has_mental_illness(patient, \"substance-related and addictive disorders\").\nAnswer() :- Has_mental_illness(patient, \"alcohol use disorder\").\nAnswer() :- Has_mental_illness(patient, \"caffeine use disorder\").\nAnswer() :- Has_mental_illness(patient, \"cannabis use disorder\").\nAnswer() :- Has_mental_illness(patient, \"inhalant use disorder\").\nAnswer() :- Has_mental_illness(patient, \"nicotine use disorder\").\nAnswer() :- Has_mental_illness(patient, \"opioid"]}
{"id": 1362, "answer": false, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Boeing 737-800\", 100).\nHas_value(\"Da Vinci painting\", 100).\n.decl Answer()\nAnswer() :- Has_value(\"Boeing 737-800\", value1), Has_value(\"Da Vinci painting\", value2), value1 = value2.\n.output Answer", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Boeing 737-800\", 100).\nHas_value(\"Da Vinci painting\", 100).\n.decl Answer()\nAnswer() :- Has_value(\"Boeing 737-800\", value1), Has_value(\"Da Vinci painting\", value2), value1 = value2.\n.output Answer"]}
{"id": 1363, "answer": true, "completion": ".decl Was_manufactured_in_year(Car:symbol, Year:float)\nWas_manufactured_in_year(\"Mini\", 1959).\n.decl Answer()\nAnswer() :- Was_manufactured_in_year(car, year), year = 1959.\n.output Answer", "completions": [".decl Was_manufactured_in_year(Car:symbol, Year:float)\nWas_manufactured_in_year(\"Mini\", 1959).\n.decl Answer()\nAnswer() :- Was_manufactured_in_year(car, year), year = 1959.\n.output Answer"]}
{"id": 1364, "answer": true, "completion": ".decl Has_letter(Language:symbol, Letter:symbol)\nHas_letter(\"Algonquian\", \"b\").\nHas_letter(\"Algonquian\", \"c\").\nHas_letter(\"Algonquian\", \"d\").\nHas_letter(\"Algonquian\", \"e\").\nHas_letter(\"Algonquian\", \"f\").\nHas_letter(\"Algonquian\", \"g\").\nHas_letter(\"Algonquian\", \"h\").\nHas_letter(\"Algonquian\", \"i\").\nHas_letter(\"Algonquian\", \"j\").\nHas_letter(\"Algonquian\", \"k\").\nHas_letter(\"Algonquian\", \"l\").\nHas_letter(\"Algonquian\", \"m\").\nHas_letter(\"Algonquian\", \"n\").\nHas_letter(\"Algonquian\", \"o\").\nHas_letter(\"Algonquian\", \"p\").\nHas_letter(\"Algonquian\", \"q\").\nHas_letter(\"Algonquian\", \"r\").\nHas_letter(\"Algonquian\", \"s\").\nHas_letter(\"Algonquian\", \"t\").\nHas_letter(\"Algonquian\", \"u\").\nHas_letter(\"Algonquian\", \"v\").\nHas_letter(\"Algonquian\", \"w\").\nHas_letter(\"Algonquian\", \"x\").\nHas_letter(\"Algonquian\", \"y\").\nHas_letter(\"Algonquian\", \"z\").\nHas_letter(\"Algonquian\", \"a\").\nHas_letter(\"Algonquian\", \"aa\").\nHas_letter(\"Algonquian\", \"ae\").\nHas_letter(\"Algonquian\", \"ai\").\nHas_letter(\"Algonquian\", \"ao\").\nHas_letter(\"Algonquian\", \"au\").\nHas_letter(\"Algonquian\", \"aw\").\nHas_letter(\"Algonquian\", \"ay\").\nHas_letter(\"Algonquian\", \"ba\").\nHas_letter(\"Algonquian\", \"be\").\nHas_letter(\"Algonquian\", \"bi\").\nHas_letter(\"Algonquian\", \"bo\").\nHas_letter(\"Algonquian\", \"bu\").\nHas_letter(\"Algonquian\", \"by\").\nHas_letter(\"Algonquian\", \"ca\").\nHas_letter(\"Algonquian\", \"ce\").\nHas_letter(\"Algonquian\", \"cha\").\nHas_letter(\"Algonquian\", \"che\").\nHas_letter(\"Algonquian\", \"chi\").\nHas_letter(\"Algonquian\", \"cho\").\nHas_letter(\"Algonquian\", \"chu\").\nHas_letter(\"Algonquian\", \"ci\").\nHas_letter(\"Algonquian\", \"co\").\nHas_letter(\"Algonquian\", \"cu\").\nHas_letter(\"Algonquian\", \"cy\").\nHas_letter(\"Algonquian\", \"da\").\nHas_letter(\"Algonquian\", \"de\").\nHas_letter(\"Algonquian\", \"di\").\nHas_letter(\"Algonquian\", \"do\").\nHas_letter(\"Algonquian\", \"du\").\nHas_letter(\"Algonquian\", \"dy\").\nHas_letter(\"Algonquian\", \"ea\").\nHas_letter(\"Algonquian\", \"e-\").\nHas_letter(\"Algonquian\", \"ei\").\nHas_letter(\"Algonquian\", \"eo\").\nHas", "completions": [".decl Has_letter(Language:symbol, Letter:symbol)\nHas_letter(\"Algonquian\", \"b\").\nHas_letter(\"Algonquian\", \"c\").\nHas_letter(\"Algonquian\", \"d\").\nHas_letter(\"Algonquian\", \"e\").\nHas_letter(\"Algonquian\", \"f\").\nHas_letter(\"Algonquian\", \"g\").\nHas_letter(\"Algonquian\", \"h\").\nHas_letter(\"Algonquian\", \"i\").\nHas_letter(\"Algonquian\", \"j\").\nHas_letter(\"Algonquian\", \"k\").\nHas_letter(\"Algonquian\", \"l\").\nHas_letter(\"Algonquian\", \"m\").\nHas_letter(\"Algonquian\", \"n\").\nHas_letter(\"Algonquian\", \"o\").\nHas_letter(\"Algonquian\", \"p\").\nHas_letter(\"Algonquian\", \"q\").\nHas_letter(\"Algonquian\", \"r\").\nHas_letter(\"Algonquian\", \"s\").\nHas_letter(\"Algonquian\", \"t\").\nHas_letter(\"Algonquian\", \"u\").\nHas_letter(\"Algonquian\", \"v\").\nHas_letter(\"Algonquian\", \"w\").\nHas_letter(\"Algonquian\", \"x\").\nHas_letter(\"Algonquian\", \"y\").\nHas_letter(\"Algonquian\", \"z\").\nHas_letter(\"Algonquian\", \"a\").\nHas_letter(\"Algonquian\", \"aa\").\nHas_letter(\"Algonquian\", \"ae\").\nHas_letter(\"Algonquian\", \"ai\").\nHas_letter(\"Algonquian\", \"ao\").\nHas_letter(\"Algonquian\", \"au\").\nHas_letter(\"Algonquian\", \"aw\").\nHas_letter(\"Algonquian\", \"ay\").\nHas_letter(\"Algonquian\", \"ba\").\nHas_letter(\"Algonquian\", \"be\").\nHas_letter(\"Algonquian\", \"bi\").\nHas_letter(\"Algonquian\", \"bo\").\nHas_letter(\"Algonquian\", \"bu\").\nHas_letter(\"Algonquian\", \"by\").\nHas_letter(\"Algonquian\", \"ca\").\nHas_letter(\"Algonquian\", \"ce\").\nHas_letter(\"Algonquian\", \"cha\").\nHas_letter(\"Algonquian\", \"che\").\nHas_letter(\"Algonquian\", \"chi\").\nHas_letter(\"Algonquian\", \"cho\").\nHas_letter(\"Algonquian\", \"chu\").\nHas_letter(\"Algonquian\", \"ci\").\nHas_letter(\"Algonquian\", \"co\").\nHas_letter(\"Algonquian\", \"cu\").\nHas_letter(\"Algonquian\", \"cy\").\nHas_letter(\"Algonquian\", \"da\").\nHas_letter(\"Algonquian\", \"de\").\nHas_letter(\"Algonquian\", \"di\").\nHas_letter(\"Algonquian\", \"do\").\nHas_letter(\"Algonquian\", \"du\").\nHas_letter(\"Algonquian\", \"dy\").\nHas_letter(\"Algonquian\", \"ea\").\nHas_letter(\"Algonquian\", \"e-\").\nHas_letter(\"Algonquian\", \"ei\").\nHas_letter(\"Algonquian\", \"eo\").\nHas"]}
{"id": 1365, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Trek 9000\", 20).\n.decl Has_anchor(Object:symbol, Anchor:symbol)\nHas_anchor(\"Trek 9000\", \"anchor\").\n.decl Answer()\nAnswer() :- Has_weight(\"Trek 9000\", weight1), weight1 > 10, Has_anchor(\"Trek 9000\", \"anchor\").\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Trek 9000\", 20).\n.decl Has_anchor(Object:symbol, Anchor:symbol)\nHas_anchor(\"Trek 9000\", \"anchor\").\n.decl Answer()\nAnswer() :- Has_weight(\"Trek 9000\", weight1), weight1 > 10, Has_anchor(\"Trek 9000\", \"anchor\").\n.output Answer"]}
{"id": 1366, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Zika virus\", \"Brazil\").\nHappens_in_place(\"Zika virus\", \"Colombia\").\nHappens_in_place(\"Zika virus\", \"El Salvador\").\nHappens_in_place(\"Zika virus\", \"French Guiana\").\nHappens_in_place(\"Zika virus\", \"Guatemala\").\nHappens_in_place(\"Zika virus\", \"Haiti\").\nHappens_in_place(\"Zika virus\", \"Honduras\").\nHappens_in_place(\"Zika virus\", \"Martinique\").\nHappens_in_place(\"Zika virus\", \"Mexico\").\nHappens_in_place(\"Zika virus\", \"Panama\").\nHappens_in_place(\"Zika virus\", \"Paraguay\").\nHappens_in_place(\"Zika virus\", \"Suriname\").\nHappens_in_place(\"Zika virus\", \"Venezuela\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Zika virus\", \"Antarctica\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Zika virus\", \"Brazil\").\nHappens_in_place(\"Zika virus\", \"Colombia\").\nHappens_in_place(\"Zika virus\", \"El Salvador\").\nHappens_in_place(\"Zika virus\", \"French Guiana\").\nHappens_in_place(\"Zika virus\", \"Guatemala\").\nHappens_in_place(\"Zika virus\", \"Haiti\").\nHappens_in_place(\"Zika virus\", \"Honduras\").\nHappens_in_place(\"Zika virus\", \"Martinique\").\nHappens_in_place(\"Zika virus\", \"Mexico\").\nHappens_in_place(\"Zika virus\", \"Panama\").\nHappens_in_place(\"Zika virus\", \"Paraguay\").\nHappens_in_place(\"Zika virus\", \"Suriname\").\nHappens_in_place(\"Zika virus\", \"Venezuela\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Zika virus\", \"Antarctica\").\n.output Answer"]}
{"id": 1367, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"dark\", \"Basel\").\nHappens_in_place(\"day\", \"Los Angeles\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"dark\", place1), Happens_in_place(\"day\", place2), place1 != place2.\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"dark\", \"Basel\").\nHappens_in_place(\"day\", \"Los Angeles\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"dark\", place1), Happens_in_place(\"day\", place2), place1 != place2.\n.output Answer"]}
{"id": 1368, "answer": false, "completion": ".decl Causes(Activity:symbol, Disease:symbol)\nCauses(\"breakdancing\", \"tendonitis\").\n.decl Answer()\nAnswer() :- Causes(activity, \"tendonitis\").\n.output Answer", "completions": [".decl Causes(Activity:symbol, Disease:symbol)\nCauses(\"breakdancing\", \"tendonitis\").\n.decl Answer()\nAnswer() :- Causes(activity, \"tendonitis\").\n.output Answer"]}
{"id": 1369, "answer": true, "completion": ".decl Travels_with(Person1:symbol, Person2:symbol)\nTravels_with(\"Marco Polo\", \"Christopher Columbus\").\n.decl Answer()\nAnswer() :- Travels_with(\"Marco Polo\", \"Christopher Columbus\").\n.output Answer", "completions": [".decl Travels_with(Person1:symbol, Person2:symbol)\nTravels_with(\"Marco Polo\", \"Christopher Columbus\").\n.decl Answer()\nAnswer() :- Travels_with(\"Marco Polo\", \"Christopher Columbus\").\n.output Answer"]}
{"id": 1370, "answer": false, "completion": ".decl Is_language_root(Language:symbol, Root_language:symbol)\nIs_language_root(\"Saint Vincent Creole English\", \"English\").\n.decl Answer()\nAnswer() :- Is_language_root(\"Saint Vincent Creole English\", \"English\").\n.output Answer", "completions": [".decl Is_language_root(Language:symbol, Root_language:symbol)\nIs_language_root(\"Saint Vincent Creole English\", \"English\").\n.decl Answer()\nAnswer() :- Is_language_root(\"Saint Vincent Creole English\", \"English\").\n.output Answer"]}
{"id": 1371, "answer": true, "completion": ".decl Has_dinner_with(Person1:symbol, Person2:symbol)\nHas_dinner_with(\"Lionel Richie\", \"Abraham Lincoln\").\n.decl Answer()\nAnswer() :- Has_dinner_with(\"Lionel Richie\", \"Abraham Lincoln\").\n.output Answer", "completions": [".decl Has_dinner_with(Person1:symbol, Person2:symbol)\nHas_dinner_with(\"Lionel Richie\", \"Abraham Lincoln\").\n.decl Answer()\nAnswer() :- Has_dinner_with(\"Lionel Richie\", \"Abraham Lincoln\").\n.output Answer"]}
{"id": 1372, "answer": false, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Bill Gates\", 100).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Bill Gates\", net_worth), net_worth >= 1000000.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Bill Gates\", 100).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Bill Gates\", net_worth), net_worth >= 1000000.\n.output Answer"]}
{"id": 1373, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"parsley\", 0.4).\nHas_density(\"milk\", 1.03).\n.decl Answer()\nAnswer() :- Has_density(\"parsley\", density1), Has_density(\"milk\", density2), density1 > density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"parsley\", 0.4).\nHas_density(\"milk\", 1.03).\n.decl Answer()\nAnswer() :- Has_density(\"parsley\", density1), Has_density(\"milk\", density2), density1 > density2.\n.output Answer"]}
{"id": 1374, "answer": true, "completion": ".decl Has_CEO(Company:symbol, CEO:symbol)\nHas_CEO(\"Happy Gilmore Productions\", \"Adam Sandler\").\n.decl Owns(Person:symbol, Object:symbol)\nOwns(\"Adam Sandler\", \"Torah\").\n.decl Answer()\nAnswer() :- Has_CEO(\"Happy Gilmore Productions\", CEO), Owns(CEO, \"Torah\").\n.output Answer", "completions": [".decl Has_CEO(Company:symbol, CEO:symbol)\nHas_CEO(\"Happy Gilmore Productions\", \"Adam Sandler\").\n.decl Owns(Person:symbol, Object:symbol)\nOwns(\"Adam Sandler\", \"Torah\").\n.decl Answer()\nAnswer() :- Has_CEO(\"Happy Gilmore Productions\", CEO), Owns(CEO, \"Torah\").\n.output Answer"]}
{"id": 1375, "answer": true, "completion": ".decl Is_opposed_to(Person:symbol, Activity:symbol)\nIs_opposed_to(\"pacifist\", \"hunting\").\n.decl Answer()\nAnswer() :- Is_opposed_to(\"pacifist\", \"hunting\").\n.output Answer", "completions": [".decl Is_opposed_to(Person:symbol, Activity:symbol)\nIs_opposed_to(\"pacifist\", \"hunting\").\n.decl Answer()\nAnswer() :- Is_opposed_to(\"pacifist\", \"hunting\").\n.output Answer"]}
{"id": 1376, "answer": true, "completion": ".decl Has_death_rate(Event:symbol, Death_rate:float)\nHas_death_rate(\"plague\", 0.01).\nHas_death_rate(\"selfies\", 0.0001).\n.decl Answer()\nAnswer() :- Has_death_rate(\"plague\", death_rate1), Has_death_rate(\"selfies\", death_rate2), death_rate1 > death_rate2.\n.output Answer", "completions": [".decl Has_death_rate(Event:symbol, Death_rate:float)\nHas_death_rate(\"plague\", 0.01).\nHas_death_rate(\"selfies\", 0.0001).\n.decl Answer()\nAnswer() :- Has_death_rate(\"plague\", death_rate1), Has_death_rate(\"selfies\", death_rate2), death_rate1 > death_rate2.\n.output Answer"]}
{"id": 1377, "answer": true, "completion": ".decl Airs_on_channel(Show:symbol, Channel:symbol)\nAirs_on_channel(\"Naruto\", \"Cartoon Network\").\nAirs_on_channel(\"Puzzle Place\", \"PBS\").\n.decl Answer()\nAnswer() :- Airs_on_channel(\"Naruto\", channel1), Airs_on_channel(\"Puzzle Place\", channel2), channel1 != channel2.\n.output Answer", "completions": [".decl Airs_on_channel(Show:symbol, Channel:symbol)\nAirs_on_channel(\"Naruto\", \"Cartoon Network\").\nAirs_on_channel(\"Puzzle Place\", \"PBS\").\n.decl Answer()\nAnswer() :- Airs_on_channel(\"Naruto\", channel1), Airs_on_channel(\"Puzzle Place\", channel2), channel1 != channel2.\n.output Answer"]}
{"id": 1378, "answer": false, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Johnny Carson\", 3).\n.decl Has_n_players(Team:symbol, N_players:float)\nHas_n_players(\"water polo team\", 7).\n.decl Answer()\nAnswer() :- Has_n_children(\"Johnny Carson\", n_children), Has_n_players(\"water polo team\", n_players), n_children >= n_players.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Johnny Carson\", 3).\n.decl Has_n_players(Team:symbol, N_players:float)\nHas_n_players(\"water polo team\", 7).\n.decl Answer()\nAnswer() :- Has_n_children(\"Johnny Carson\", n_children), Has_n_players(\"water polo team\", n_players), n_children >= n_players.\n.output Answer"]}
{"id": 1379, "answer": true, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Cherokee delegation to oppose allotment\", 1889).\n.decl Happens_before(Event1:symbol, Event2:symbol)\nHappens_before(\"Cherokee delegation to oppose allotment\", \"Cherokee allotment\").\n.decl Answer()\nAnswer() :- Happens_before(\"Cherokee delegation to oppose allotment\", \"Cherokee allotment\").\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Cherokee delegation to oppose allotment\", 1889).\n.decl Happens_before(Event1:symbol, Event2:symbol)\nHappens_before(\"Cherokee delegation to oppose allotment\", \"Cherokee allotment\").\n.decl Answer()\nAnswer() :- Happens_before(\"Cherokee delegation to oppose allotment\", \"Cherokee allotment\").\n.output Answer"]}
{"id": 1380, "answer": false, "completion": ".decl Performs(Doctor:symbol, Procedure:symbol)\nPerforms(\"pediatrician\", \"childbirth\").\nPerforms(\"pediatrician\", \"childhood vaccinations\").\n.decl Answer()\nAnswer() :- Performs(\"pediatrician\", \"abortions\").\n.output Answer", "completions": [".decl Performs(Doctor:symbol, Procedure:symbol)\nPerforms(\"pediatrician\", \"childbirth\").\nPerforms(\"pediatrician\", \"childhood vaccinations\").\n.decl Answer()\nAnswer() :- Performs(\"pediatrician\", \"abortions\").\n.output Answer"]}
{"id": 1381, "answer": true, "completion": ".decl Features(Film:symbol, Character:symbol)\nFeatures(\"Brave\", \"Scottish people\").\n.decl Answer()\nAnswer() :- Features(\"Brave\", \"Scottish people\").\n.output Answer", "completions": [".decl Features(Film:symbol, Character:symbol)\nFeatures(\"Brave\", \"Scottish people\").\n.decl Answer()\nAnswer() :- Features(\"Brave\", \"Scottish people\").\n.output Answer"]}
{"id": 1382, "answer": true, "completion": ".decl Is_north_of(City:symbol, Latitude:float)\nIs_north_of(\"Cape Town\", -33.9).\n.decl Answer()\nAnswer() :- Is_north_of(\"Cape Town\", latitude), latitude < 0.\n.output Answer", "completions": [".decl Is_north_of(City:symbol, Latitude:float)\nIs_north_of(\"Cape Town\", -33.9).\n.decl Answer()\nAnswer() :- Is_north_of(\"Cape Town\", latitude), latitude < 0.\n.output Answer"]}
{"id": 1383, "answer": true, "completion": ".decl Has_copyright(Artist:symbol, Song:symbol)\nHas_copyright(\"Metallica\", \"One\").\n.decl Answer()\nAnswer() :- Has_copyright(\"Metallica\", \"One\").\n.output Answer", "completions": [".decl Has_copyright(Artist:symbol, Song:symbol)\nHas_copyright(\"Metallica\", \"One\").\n.decl Answer()\nAnswer() :- Has_copyright(\"Metallica\", \"One\").\n.output Answer"]}
{"id": 1384, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"applicant\", \"multiple sclerosis\").\n.decl Rejects_applicants_with_disease(Academy:symbol, Disease:symbol)\nRejects_applicants_with_disease(\"United States Military Academy\", \"multiple sclerosis\").\n.decl Answer()\nAnswer() :- Has_disease(\"applicant\", \"multiple sclerosis\"), Rejects_applicants_with_disease(\"United States Military Academy\", \"multiple sclerosis\").\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"applicant\", \"multiple sclerosis\").\n.decl Rejects_applicants_with_disease(Academy:symbol, Disease:symbol)\nRejects_applicants_with_disease(\"United States Military Academy\", \"multiple sclerosis\").\n.decl Answer()\nAnswer() :- Has_disease(\"applicant\", \"multiple sclerosis\"), Rejects_applicants_with_disease(\"United States Military Academy\", \"multiple sclerosis\").\n.output Answer"]}
{"id": 1385, "answer": false, "completion": ".decl Has_separation_of_church_and_state(Country:symbol, Separation:symbol)\nHas_separation_of_church_and_state(\"USA\", \"no\").\n.decl Answer()\nAnswer() :- Has_separation_of_church_and_state(\"USA\", separation).\n.output Answer", "completions": [".decl Has_separation_of_church_and_state(Country:symbol, Separation:symbol)\nHas_separation_of_church_and_state(\"USA\", \"no\").\n.decl Answer()\nAnswer() :- Has_separation_of_church_and_state(\"USA\", separation).\n.output Answer"]}
{"id": 1386, "answer": true, "completion": ".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Jesse W. Moore\", \"NASA Medal for Exceptional Scientific Achievement\").\n.decl Has_theme(Award:symbol, Theme:symbol)\nHas_theme(\"NASA Medal for Exceptional Scientific Achievement\", \"snoopy\").\n.decl Answer()\nAnswer() :- Has_award(\"Jesse W. Moore\", award), Has_theme(award, \"snoopy\").\n.output Answer", "completions": [".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Jesse W. Moore\", \"NASA Medal for Exceptional Scientific Achievement\").\n.decl Has_theme(Award:symbol, Theme:symbol)\nHas_theme(\"NASA Medal for Exceptional Scientific Achievement\", \"snoopy\").\n.decl Answer()\nAnswer() :- Has_award(\"Jesse W. Moore\", award), Has_theme(award, \"snoopy\").\n.output Answer"]}
{"id": 1387, "answer": true, "completion": ".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"Chez Panisse\", \"Raclette\").\nServes(\"YMCA\", \"Raclette\").\n.decl Answer()\nAnswer() :- Serves(\"YMCA\", \"Raclette\").\n.output Answer\n\n", "completions": [".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"Chez Panisse\", \"Raclette\").\nServes(\"YMCA\", \"Raclette\").\n.decl Answer()\nAnswer() :- Serves(\"YMCA\", \"Raclette\").\n.output Answer\n\n"]}
{"id": 1388, "answer": true, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Agnetha\", \"female\").\nHas_gender(\"Bjorn\", \"male\").\nHas_gender(\"Benny\", \"male\").\nHas_gender(\"Anni-Frid\", \"female\").\n.decl Answer()\nAnswer() :- Has_gender(\"Agnetha\", \"female\"), Has_gender(\"Bjorn\", \"male\"), Has_gender(\"Benny\", \"male\"), Has_gender(\"Anni-Frid\", \"female\").\n.output Answer", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"Agnetha\", \"female\").\nHas_gender(\"Bjorn\", \"male\").\nHas_gender(\"Benny\", \"male\").\nHas_gender(\"Anni-Frid\", \"female\").\n.decl Answer()\nAnswer() :- Has_gender(\"Agnetha\", \"female\"), Has_gender(\"Bjorn\", \"male\"), Has_gender(\"Benny\", \"male\"), Has_gender(\"Anni-Frid\", \"female\").\n.output Answer"]}
{"id": 1389, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Stone Cold Steve Austin\", 20).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"wrestle\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"wrestle\", n_years1), Last_n_years(\"Stone Cold Steve Austin\", n_years2),  n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Stone Cold Steve Austin\", 20).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"wrestle\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"wrestle\", n_years1), Last_n_years(\"Stone Cold Steve Austin\", n_years2),  n_years1 <= n_years2.\n.output Answer"]}
{"id": 1390, "answer": true, "completion": ".decl Has_viscosity(Object:symbol, Viscosity:float)\nHas_viscosity(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_viscosity(\"water\", viscosity).\n.output Answer", "completions": [".decl Has_viscosity(Object:symbol, Viscosity:float)\nHas_viscosity(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_viscosity(\"water\", viscosity).\n.output Answer"]}
{"id": 1391, "answer": true, "completion": ".decl Uses_sound(Device:symbol)\nUses_sound(\"loudspeaker\").\nUses_sound(\"telephone\").\nUses_sound(\"doorbell\").\n.decl Answer()\nAnswer() :- Uses_sound(\"loudspeaker\").\n.output Answer", "completions": [".decl Uses_sound(Device:symbol)\nUses_sound(\"loudspeaker\").\nUses_sound(\"telephone\").\nUses_sound(\"doorbell\").\n.decl Answer()\nAnswer() :- Uses_sound(\"loudspeaker\").\n.output Answer"]}
{"id": 1392, "answer": false, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"hamburger bun\", \"flour\").\nHas_ingredient(\"hamburger bun\", \"yeast\").\nHas_ingredient(\"hamburger bun\", \"sugar\").\nHas_ingredient(\"hamburger bun\", \"salt\").\nHas_ingredient(\"hamburger bun\", \"butter\").\nHas_ingredient(\"hamburger bun\", \"egg\").\nHas_ingredient(\"hamburger bun\", \"sesame seeds\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"hamburger bun\", \"sesame seeds\").\n.output Answer", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"hamburger bun\", \"flour\").\nHas_ingredient(\"hamburger bun\", \"yeast\").\nHas_ingredient(\"hamburger bun\", \"sugar\").\nHas_ingredient(\"hamburger bun\", \"salt\").\nHas_ingredient(\"hamburger bun\", \"butter\").\nHas_ingredient(\"hamburger bun\", \"egg\").\nHas_ingredient(\"hamburger bun\", \"sesame seeds\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"hamburger bun\", \"sesame seeds\").\n.output Answer"]}
{"id": 1393, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"stole in Iran\", 5).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Sugar Ray Robinson box\", 3).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Sugar Ray Robinson box\", n_years1), Last_n_years(\"stole in Iran\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"stole in Iran\", 5).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Sugar Ray Robinson box\", 3).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Sugar Ray Robinson box\", n_years1), Last_n_years(\"stole in Iran\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1394, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Ahura Mazda\", 0.5).\nHas_height(\"Abaddon\", 0.1).\n.decl Answer()\nAnswer() :- Has_height(\"Ahura Mazda\", height1), Has_height(\"Abaddon\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Ahura Mazda\", 0.5).\nHas_height(\"Abaddon\", 0.1).\n.decl Answer()\nAnswer() :- Has_height(\"Ahura Mazda\", height1), Has_height(\"Abaddon\", height2), height1 > height2.\n.output Answer"]}
{"id": 1395, "answer": false, "completion": ".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"tortoise\", 0.01).\nHas_speed(\"Chicago 'L'\", 0.5).\n.decl Answer()\nAnswer() :- Has_speed(\"tortoise\", speed1), Has_speed(\"Chicago 'L'\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"tortoise\", 0.01).\nHas_speed(\"Chicago 'L'\", 0.5).\n.decl Answer()\nAnswer() :- Has_speed(\"tortoise\", speed1), Has_speed(\"Chicago 'L'\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 1396, "answer": false, "completion": ".decl Celebrates(Person:symbol, Event:symbol)\nCelebrates(\"person\", \"Earth Day\").\n.decl Uses(Event:symbol, Object:symbol)\nUses(\"ceremonial tire fire\", \"tire\").\n.decl Answer()\nAnswer() :- Celebrates(\"person\", \"Earth Day\"), Uses(\"ceremonial tire fire\", \"tire\").\n.output Answer", "completions": [".decl Celebrates(Person:symbol, Event:symbol)\nCelebrates(\"person\", \"Earth Day\").\n.decl Uses(Event:symbol, Object:symbol)\nUses(\"ceremonial tire fire\", \"tire\").\n.decl Answer()\nAnswer() :- Celebrates(\"person\", \"Earth Day\"), Uses(\"ceremonial tire fire\", \"tire\").\n.output Answer"]}
{"id": 1397, "answer": true, "completion": ".decl Built_in(Ship:symbol, Country:symbol)\nBuilt_in(\"HMS Ark Royal\", \"Britain\").\nBuilt_in(\"HMS Invincible\", \"Britain\").\nBuilt_in(\"HMS Illustrious\", \"Britain\").\n.decl Is_ship(Ship:symbol)\nIs_ship(\"HMS Ark Royal\").\nIs_ship(\"HMS Invincible\").\nIs_ship(\"HMS Illustrious\").\n.decl Answer()\nAnswer() :- Built_in(ship, \"Britain\"), Is_ship(ship), ship != \"HMS Ark Royal\", ship != \"HMS Invincible\", ship != \"HMS Illustrious\".\n.output Answer", "completions": [".decl Built_in(Ship:symbol, Country:symbol)\nBuilt_in(\"HMS Ark Royal\", \"Britain\").\nBuilt_in(\"HMS Invincible\", \"Britain\").\nBuilt_in(\"HMS Illustrious\", \"Britain\").\n.decl Is_ship(Ship:symbol)\nIs_ship(\"HMS Ark Royal\").\nIs_ship(\"HMS Invincible\").\nIs_ship(\"HMS Illustrious\").\n.decl Answer()\nAnswer() :- Built_in(ship, \"Britain\"), Is_ship(ship), ship != \"HMS Ark Royal\", ship != \"HMS Invincible\", ship != \"HMS Illustrious\".\n.output Answer"]}
{"id": 1398, "answer": false, "completion": ".decl Named_after(Person:symbol, Place:symbol)\nNamed_after(\"Florence\", \"Florence\").\n.decl Appears_in(Character:symbol, Book:symbol)\nAppears_in(\"Florence\", \"Harry Potter and the Goblet of Fire\").\n.decl Answer()\nAnswer() :- Named_after(person, \"Florence\"), Appears_in(person, \"Harry Potter and the Goblet of Fire\").\n.output Answer", "completions": [".decl Named_after(Person:symbol, Place:symbol)\nNamed_after(\"Florence\", \"Florence\").\n.decl Appears_in(Character:symbol, Book:symbol)\nAppears_in(\"Florence\", \"Harry Potter and the Goblet of Fire\").\n.decl Answer()\nAnswer() :- Named_after(person, \"Florence\"), Appears_in(person, \"Harry Potter and the Goblet of Fire\").\n.output Answer"]}
{"id": 1399, "answer": true, "completion": ".decl Has_max_passengers(Vehicle:symbol, Max_passengers:float)\nHas_max_passengers(\"Chevrolet Corvette ZR1\", 2).\n.decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Lil Wayne\", 4).\n.decl Answer()\nAnswer() :- Has_max_passengers(\"Chevrolet Corvette ZR1\", max_passengers), Has_n_children(\"Lil Wayne\", n_children), max_passengers >= n_children.\n.output Answer", "completions": [".decl Has_max_passengers(Vehicle:symbol, Max_passengers:float)\nHas_max_passengers(\"Chevrolet Corvette ZR1\", 2).\n.decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Lil Wayne\", 4).\n.decl Answer()\nAnswer() :- Has_max_passengers(\"Chevrolet Corvette ZR1\", max_passengers), Has_n_children(\"Lil Wayne\", n_children), max_passengers >= n_children.\n.output Answer"]}
{"id": 1400, "answer": true, "completion": ".decl Has_area(Country:symbol, Area:float)\nHas_area(\"Iceland\", 103000).\nHas_area(\"Amazon\", 6.1).\n.decl Answer()\nAnswer() :- Has_area(\"Iceland\", area1), Has_area(\"Amazon\", area2), area1 < area2.\n.output Answer", "completions": [".decl Has_area(Country:symbol, Area:float)\nHas_area(\"Iceland\", 103000).\nHas_area(\"Amazon\", 6.1).\n.decl Answer()\nAnswer() :- Has_area(\"Iceland\", area1), Has_area(\"Amazon\", area2), area1 < area2.\n.output Answer"]}
{"id": 1401, "answer": true, "completion": ".decl Has_rating(Object:symbol, Rating:float)\nHas_rating(\"star rating systems\", 5).\n.decl Answer()\nAnswer() :- Has_rating(\"star rating systems\", rating), rating >= 4.\n.output Answer", "completions": [".decl Has_rating(Object:symbol, Rating:float)\nHas_rating(\"star rating systems\", 5).\n.decl Answer()\nAnswer() :- Has_rating(\"star rating systems\", rating), rating >= 4.\n.output Answer"]}
{"id": 1402, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"hippie culture\", \"Soviet Union\").\n.decl Answer()\nAnswer() :- !Happens_in_place(\"hippie culture\", \"Soviet Union\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"hippie culture\", \"Soviet Union\").\n.decl Answer()\nAnswer() :- !Happens_in_place(\"hippie culture\", \"Soviet Union\").\n.output Answer"]}
{"id": 1403, "answer": true, "completion": ".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"AK-47\", \"Vietnam War\").\n.decl Last_n_years(War:symbol, N_years:float)\nLast_n_years(\"Seven Years' War\", 7).\n.decl Answer()\nAnswer() :- Used_in_war(\"AK-47\", \"Seven Years' War\").\nAnswer() :- Used_in_war(\"AK-47\", war), Last_n_years(\"Seven Years' War\", n_years1), Last_n_years(war, n_years2), n_years2 <= n_years1.\n.output Answer", "completions": [".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"AK-47\", \"Vietnam War\").\n.decl Last_n_years(War:symbol, N_years:float)\nLast_n_years(\"Seven Years' War\", 7).\n.decl Answer()\nAnswer() :- Used_in_war(\"AK-47\", \"Seven Years' War\").\nAnswer() :- Used_in_war(\"AK-47\", war), Last_n_years(\"Seven Years' War\", n_years1), Last_n_years(war, n_years2), n_years2 <= n_years1.\n.output Answer"]}
{"id": 1404, "answer": false, "completion": ".decl Found_in_city(Object:symbol, City:symbol)\nFound_in_city(\"crucifix\", \"Rome\").\nFound_in_city(\"crucifix\", \"Paris\").\nFound_in_city(\"crucifix\", \"Madrid\").\nFound_in_city(\"crucifix\", \"Barcelona\").\nFound_in_city(\"crucifix\", \"Lisbon\").\nFound_in_city(\"crucifix\", \"Berlin\").\nFound_in_city(\"crucifix\", \"Vienna\").\nFound_in_city(\"crucifix\", \"Prague\").\nFound_in_city(\"crucifix\", \"Budapest\").\nFound_in_city(\"crucifix\", \"Warsaw\").\nFound_in_city(\"crucifix\", \"Amsterdam\").\nFound_in_city(\"crucifix\", \"Brussels\").\nFound_in_city(\"crucifix\", \"Copenhagen\").\nFound_in_city(\"crucifix\", \"Dublin\").\nFound_in_city(\"crucifix\", \"Helsinki\").\nFound_in_city(\"crucifix\", \"Luxembourg\").\nFound_in_city(\"crucifix\", \"Oslo\").\nFound_in_city(\"crucifix\", \"Stockholm\").\nFound_in_city(\"crucifix\", \"Athens\").\nFound_in_city(\"crucifix\", \"Bucharest\").\nFound_in_city(\"crucifix\", \"Helsinki\").\nFound_in_city(\"crucifix\", \"Ljubljana\").\nFound_in_city(\"crucifix\", \"Madrid\").\nFound_in_city(\"crucifix\", \"Rome\").\nFound_in_city(\"crucifix\", \"Sofia\").\nFound_in_city(\"crucifix\", \"Vilnius\").\nFound_in_city(\"crucifix\", \"Zagreb\").\nFound_in_city(\"crucifix\", \"Brussels\").\nFound_in_city(\"crucifix\", \"Lisbon\").\nFound_in_city(\"crucifix\", \"London\").\nFound_in_city(\"crucifix\", \"Paris\").\nFound_in_city(\"crucifix\", \"Prague\").\nFound_in_city(\"crucifix\", \"Rome\").\nFound_in_city(\"crucifix\", \"Vienna\").\nFound_in_city(\"crucifix\", \"Warsaw\").\nFound_in_city(\"crucifix\", \"Budapest\").\nFound_in_city(\"crucifix\", \"Copenhagen\").\nFound_in_city(\"crucifix\", \"Helsinki\").\nFound_in_city(\"crucifix\", \"Oslo\").\nFound_in_city(\"crucifix\", \"Stockholm\").\nFound_in_city(\"crucifix\", \"Ankara\").\nFound_in_city(\"crucifix\", \"Athens\").\nFound_in_city(\"crucifix\", \"Bucharest\").\nFound_in_city(\"crucifix\", \"Ljubljana\").\nFound_in_city(\"crucifix\", \"Rome\").\nFound_in_city(\"crucifix\", \"Sofia\").\nFound_in_city(\"crucifix\", \"Vilnius\").\nFound_in_city(\"crucifix\", \"Zagreb\").\nFound_in_city(\"crucifix\", \"Belgrade\").\nFound_in_city(\"crucifix\", \"Bratislava", "completions": [".decl Found_in_city(Object:symbol, City:symbol)\nFound_in_city(\"crucifix\", \"Rome\").\nFound_in_city(\"crucifix\", \"Paris\").\nFound_in_city(\"crucifix\", \"Madrid\").\nFound_in_city(\"crucifix\", \"Barcelona\").\nFound_in_city(\"crucifix\", \"Lisbon\").\nFound_in_city(\"crucifix\", \"Berlin\").\nFound_in_city(\"crucifix\", \"Vienna\").\nFound_in_city(\"crucifix\", \"Prague\").\nFound_in_city(\"crucifix\", \"Budapest\").\nFound_in_city(\"crucifix\", \"Warsaw\").\nFound_in_city(\"crucifix\", \"Amsterdam\").\nFound_in_city(\"crucifix\", \"Brussels\").\nFound_in_city(\"crucifix\", \"Copenhagen\").\nFound_in_city(\"crucifix\", \"Dublin\").\nFound_in_city(\"crucifix\", \"Helsinki\").\nFound_in_city(\"crucifix\", \"Luxembourg\").\nFound_in_city(\"crucifix\", \"Oslo\").\nFound_in_city(\"crucifix\", \"Stockholm\").\nFound_in_city(\"crucifix\", \"Athens\").\nFound_in_city(\"crucifix\", \"Bucharest\").\nFound_in_city(\"crucifix\", \"Helsinki\").\nFound_in_city(\"crucifix\", \"Ljubljana\").\nFound_in_city(\"crucifix\", \"Madrid\").\nFound_in_city(\"crucifix\", \"Rome\").\nFound_in_city(\"crucifix\", \"Sofia\").\nFound_in_city(\"crucifix\", \"Vilnius\").\nFound_in_city(\"crucifix\", \"Zagreb\").\nFound_in_city(\"crucifix\", \"Brussels\").\nFound_in_city(\"crucifix\", \"Lisbon\").\nFound_in_city(\"crucifix\", \"London\").\nFound_in_city(\"crucifix\", \"Paris\").\nFound_in_city(\"crucifix\", \"Prague\").\nFound_in_city(\"crucifix\", \"Rome\").\nFound_in_city(\"crucifix\", \"Vienna\").\nFound_in_city(\"crucifix\", \"Warsaw\").\nFound_in_city(\"crucifix\", \"Budapest\").\nFound_in_city(\"crucifix\", \"Copenhagen\").\nFound_in_city(\"crucifix\", \"Helsinki\").\nFound_in_city(\"crucifix\", \"Oslo\").\nFound_in_city(\"crucifix\", \"Stockholm\").\nFound_in_city(\"crucifix\", \"Ankara\").\nFound_in_city(\"crucifix\", \"Athens\").\nFound_in_city(\"crucifix\", \"Bucharest\").\nFound_in_city(\"crucifix\", \"Ljubljana\").\nFound_in_city(\"crucifix\", \"Rome\").\nFound_in_city(\"crucifix\", \"Sofia\").\nFound_in_city(\"crucifix\", \"Vilnius\").\nFound_in_city(\"crucifix\", \"Zagreb\").\nFound_in_city(\"crucifix\", \"Belgrade\").\nFound_in_city(\"crucifix\", \"Bratislava"]}
{"id": 1405, "answer": true, "completion": ".decl Lives_during(Person:symbol, Time:symbol)\nLives_during(\"Alan Greenspan\", \"1953-present\").\n.decl Last_n_years(Time:symbol, N_years:float)\nLast_n_years(\"1953-present\", 64).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"US presidential election\", 4).\n.decl Answer()\nAnswer() :- Lives_during(\"Alan Greenspan\", time), Last_n_years(time, n_years1), Happens_every_n_years(\"US presidential election\", n_years2), n_years1 >= 13*n_years2.\n.output Answer", "completions": [".decl Lives_during(Person:symbol, Time:symbol)\nLives_during(\"Alan Greenspan\", \"1953-present\").\n.decl Last_n_years(Time:symbol, N_years:float)\nLast_n_years(\"1953-present\", 64).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"US presidential election\", 4).\n.decl Answer()\nAnswer() :- Lives_during(\"Alan Greenspan\", time), Last_n_years(time, n_years1), Happens_every_n_years(\"US presidential election\", n_years2), n_years1 >= 13*n_years2.\n.output Answer"]}
{"id": 1406, "answer": true, "completion": ".decl Receives(Person:symbol, Newspaper:symbol)\nReceives(\"Bostonian\", \"Boston Globe\").\nReceives(\"Torontoan\", \"Toronto Star\").\n.decl Answer()\nAnswer() :- Receives(\"Bostonian\", \"Toronto Star\").\n.output Answer", "completions": [".decl Receives(Person:symbol, Newspaper:symbol)\nReceives(\"Bostonian\", \"Boston Globe\").\nReceives(\"Torontoan\", \"Toronto Star\").\n.decl Answer()\nAnswer() :- Receives(\"Bostonian\", \"Toronto Star\").\n.output Answer"]}
{"id": 1407, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"50 Cent\", \"Curtis Jackson\").\nHas_name(\"Jeffrey Atkins\", \"Ja Rule\").\n.decl Answer()\nAnswer() :- Has_name(\"50 Cent\", \"Curtis Jackson\"), Has_name(\"Jeffrey Atkins\", \"Ja Rule\").\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"50 Cent\", \"Curtis Jackson\").\nHas_name(\"Jeffrey Atkins\", \"Ja Rule\").\n.decl Answer()\nAnswer() :- Has_name(\"50 Cent\", \"Curtis Jackson\"), Has_name(\"Jeffrey Atkins\", \"Ja Rule\").\n.output Answer"]}
{"id": 1408, "answer": true, "completion": ".decl Has_disorder(Person:symbol, Disorder:symbol)\nHas_disorder(\"John Nash\", \"schizophrenia\").\nHas_disorder(\"John Nash\", \"dissociative identity disorder\").\n.decl Answer()\nAnswer() :- Has_disorder(\"John Nash\", \"dissociative identity disorder\").\n.output Answer", "completions": [".decl Has_disorder(Person:symbol, Disorder:symbol)\nHas_disorder(\"John Nash\", \"schizophrenia\").\nHas_disorder(\"John Nash\", \"dissociative identity disorder\").\n.decl Answer()\nAnswer() :- Has_disorder(\"John Nash\", \"dissociative identity disorder\").\n.output Answer"]}
{"id": 1409, "answer": false, "completion": ".decl Has_CAS_number(Chemical:symbol, CAS_number:float)\nHas_CAS_number(\"rash\", 8009-03-8).\n.decl Answer()\nAnswer() :- Has_CAS_number(\"rash\", CAS_number), CAS_number = 8009-03-8.\n.output Answer", "completions": [".decl Has_CAS_number(Chemical:symbol, CAS_number:float)\nHas_CAS_number(\"rash\", 8009-03-8).\n.decl Answer()\nAnswer() :- Has_CAS_number(\"rash\", CAS_number), CAS_number = 8009-03-8.\n.output Answer"]}
{"id": 1410, "answer": false, "completion": ".decl Found_in_location(Animal:symbol, Location:symbol)\nFound_in_location(\"wolverine\", \"Michigan\").\n.decl Answer()\nAnswer() :- Found_in_location(\"wolverine\", \"Miami\").\n.output Answer", "completions": [".decl Found_in_location(Animal:symbol, Location:symbol)\nFound_in_location(\"wolverine\", \"Michigan\").\n.decl Answer()\nAnswer() :- Found_in_location(\"wolverine\", \"Miami\").\n.output Answer"]}
{"id": 1411, "answer": true, "completion": ".decl Day_of_week(Date:symbol, Day:symbol)\nDay_of_week(\"November 23, 1993\", \"Friday\").\n.decl Release_date(Album:symbol, Date:symbol)\nRelease_date(\"Doggystyle\", \"November 23, 1993\").\n.decl Answer()\nAnswer() :- Release_date(\"Doggystyle\", date), Day_of_week(date, day), day = \"Friday\".\n.output Answer", "completions": [".decl Day_of_week(Date:symbol, Day:symbol)\nDay_of_week(\"November 23, 1993\", \"Friday\").\n.decl Release_date(Album:symbol, Date:symbol)\nRelease_date(\"Doggystyle\", \"November 23, 1993\").\n.decl Answer()\nAnswer() :- Release_date(\"Doggystyle\", date), Day_of_week(date, day), day = \"Friday\".\n.output Answer"]}
{"id": 1412, "answer": false, "completion": ".decl Is_dangerous(Activity:symbol)\nIs_dangerous(\"walking across Amazonas\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"walking across Amazonas\").\n.output Answer", "completions": [".decl Is_dangerous(Activity:symbol)\nIs_dangerous(\"walking across Amazonas\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"walking across Amazonas\").\n.output Answer"]}
{"id": 1413, "answer": true, "completion": ".decl Grows_in_state(Crop:symbol, State:symbol)\nGrows_in_state(\"cauliflower\", \"Arizona\").\nGrows_in_state(\"cauliflower\", \"California\").\n.decl Answer()\nAnswer() :- Grows_in_state(\"cauliflower\", \"Arizona\"), Grows_in_state(\"cauliflower\", \"California\"), Grows_in_state(\"cauliflower\", state1), Grows_in_state(\"cauliflower\", state2), state1 != state2.\n.output Answer", "completions": [".decl Grows_in_state(Crop:symbol, State:symbol)\nGrows_in_state(\"cauliflower\", \"Arizona\").\nGrows_in_state(\"cauliflower\", \"California\").\n.decl Answer()\nAnswer() :- Grows_in_state(\"cauliflower\", \"Arizona\"), Grows_in_state(\"cauliflower\", \"California\"), Grows_in_state(\"cauliflower\", state1), Grows_in_state(\"cauliflower\", state2), state1 != state2.\n.output Answer"]}
{"id": 1414, "answer": true, "completion": ".decl Is_food(Food:symbol)\nIs_food(\"horseradish\").\n.decl Is_religion(Religion:symbol)\nIs_religion(\"Christianity\").\n.decl Answer()\nAnswer() :- Is_food(food), Is_religion(religion), food = \"horseradish\".\n.output Answer", "completions": [".decl Is_food(Food:symbol)\nIs_food(\"horseradish\").\n.decl Is_religion(Religion:symbol)\nIs_religion(\"Christianity\").\n.decl Answer()\nAnswer() :- Is_food(food), Is_religion(religion), food = \"horseradish\".\n.output Answer"]}
{"id": 1415, "answer": true, "completion": ".decl Follows(Fan:symbol, Artist:symbol)\nFollows(\"Mary\", \"Katy Perry\").\nFollows(\"John\", \"Katy Perry\").\nFollows(\"Mike\", \"Katy Perry\").\nFollows(\"Kate\", \"Katy Perry\").\nFollows(\"Tom\", \"Katy Perry\").\nFollows(\"Bill\", \"Katy Perry\").\nFollows(\"Sue\", \"Katy Perry\").\nFollows(\"Joe\", \"Katy Perry\").\nFollows(\"Sam\", \"Katy Perry\").\nFollows(\"Bob\", \"Katy Perry\").\nFollows(\"Amy\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"S", "completions": [".decl Follows(Fan:symbol, Artist:symbol)\nFollows(\"Mary\", \"Katy Perry\").\nFollows(\"John\", \"Katy Perry\").\nFollows(\"Mike\", \"Katy Perry\").\nFollows(\"Kate\", \"Katy Perry\").\nFollows(\"Tom\", \"Katy Perry\").\nFollows(\"Bill\", \"Katy Perry\").\nFollows(\"Sue\", \"Katy Perry\").\nFollows(\"Joe\", \"Katy Perry\").\nFollows(\"Sam\", \"Katy Perry\").\nFollows(\"Bob\", \"Katy Perry\").\nFollows(\"Amy\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"Sandy\", \"Katy Perry\").\nFollows(\"Liz\", \"Katy Perry\").\nFollows(\"Jill\", \"Katy Perry\").\nFollows(\"Anne\", \"Katy Perry\").\nFollows(\"S"]}
{"id": 1416, "answer": true, "completion": ".decl Relies_on(Person:symbol, Ingredient:symbol)\nRelies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Relies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.output Answer\n\n\n", "completions": [".decl Relies_on(Person:symbol, Ingredient:symbol)\nRelies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Relies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.output Answer\n\n\n"]}
{"id": 1417, "answer": true, "completion": ".decl Has_sensory_system(Animal:symbol, Sensory_system:symbol)\nHas_sensory_system(\"common carp\", \"lateral line\").\n.decl Answer()\nAnswer() :- Has_sensory_system(\"common carp\", \"lateral line\").\n.output Answer", "completions": [".decl Has_sensory_system(Animal:symbol, Sensory_system:symbol)\nHas_sensory_system(\"common carp\", \"lateral line\").\n.decl Answer()\nAnswer() :- Has_sensory_system(\"common carp\", \"lateral line\").\n.output Answer"]}
{"id": 1418, "answer": true, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Amazon share\", 1550).\nHas_value(\"Netflix subscription\", 1200).\n.decl Answer()\nAnswer() :- Has_value(\"Amazon share\", value1), Has_value(\"Netflix subscription\", value2), value1 >= value2 * 20.\n.output Answer", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Amazon share\", 1550).\nHas_value(\"Netflix subscription\", 1200).\n.decl Answer()\nAnswer() :- Has_value(\"Amazon share\", value1), Has_value(\"Netflix subscription\", value2), value1 >= value2 * 20.\n.output Answer"]}
{"id": 1419, "answer": false, "completion": ".decl Uses(Weapon:symbol, Gladiator:symbol)\nUses(\"shotgun\", \"gladiator\").\n.decl Kills(Gladiator_A:symbol, Gladiator_B:symbol)\nKills(\"gladiator\", \"opponent\").\n.decl Answer()\nAnswer() :- Uses(\"shotgun\", gladiator), Kills(gladiator, opponent).\n.output Answer", "completions": [".decl Uses(Weapon:symbol, Gladiator:symbol)\nUses(\"shotgun\", \"gladiator\").\n.decl Kills(Gladiator_A:symbol, Gladiator_B:symbol)\nKills(\"gladiator\", \"opponent\").\n.decl Answer()\nAnswer() :- Uses(\"shotgun\", gladiator), Kills(gladiator, opponent).\n.output Answer"]}
{"id": 1420, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"stingray\", \"Mediterranean Sea\").\n.decl Kills(Animal:symbol, Person:symbol)\nKills(\"stingray\", \"Steve Irwin\").\n.decl Answer()\nAnswer() :- Lives_in(animal, \"Mediterranean Sea\"), Kills(animal, \"Steve Irwin\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"stingray\", \"Mediterranean Sea\").\n.decl Kills(Animal:symbol, Person:symbol)\nKills(\"stingray\", \"Steve Irwin\").\n.decl Answer()\nAnswer() :- Lives_in(animal, \"Mediterranean Sea\"), Kills(animal, \"Steve Irwin\").\n.output Answer"]}
{"id": 1421, "answer": true, "completion": ".decl Takes_n_hours(Event:symbol, N_hours:float)\nTakes_n_hours(\"E6000 curing\", 24).\nTakes_n_hours(\"Daytona 500\", 6).\n.decl Answer()\nAnswer() :- Takes_n_hours(\"E6000 curing\", n_hours1), Takes_n_hours(\"Daytona 500\", n_hours2), n_hours1 < n_hours2.\n.output Answer", "completions": [".decl Takes_n_hours(Event:symbol, N_hours:float)\nTakes_n_hours(\"E6000 curing\", 24).\nTakes_n_hours(\"Daytona 500\", 6).\n.decl Answer()\nAnswer() :- Takes_n_hours(\"E6000 curing\", n_hours1), Takes_n_hours(\"Daytona 500\", n_hours2), n_hours1 < n_hours2.\n.output Answer"]}
{"id": 1422, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Cosmic Girls\", 12).\n.decl Requires_n_players(Game:symbol, N_players:float)\nRequires_n_players(\"League of Legends\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Cosmic Girls\", n_members1), Requires_n_players(\"League of Legends\", n_members2), n_members1 >= n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Cosmic Girls\", 12).\n.decl Requires_n_players(Game:symbol, N_players:float)\nRequires_n_players(\"League of Legends\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Cosmic Girls\", n_members1), Requires_n_players(\"League of Legends\", n_members2), n_members1 >= n_members2.\n.output Answer"]}
{"id": 1423, "answer": false, "completion": ".decl Takes_place_in_year(Event:symbol, Year:float)\nTakes_place_in_year(\"Y2K\", 2000).\nTakes_place_in_year(\"The Godfather\", 1945).\nTakes_place_in_year(\"The Godfather\", 1946).\nTakes_place_in_year(\"The Godfather\", 1947).\nTakes_place_in_year(\"The Godfather\", 1948).\nTakes_place_in_year(\"The Godfather\", 1949).\nTakes_place_in_year(\"The Godfather\", 1950).\nTakes_place_in_year(\"The Godfather\", 1951).\nTakes_place_in_year(\"The Godfather\", 1952).\nTakes_place_in_year(\"The Godfather\", 1953).\nTakes_place_in_year(\"The Godfather\", 1954).\nTakes_place_in_year(\"The Godfather\", 1955).\nTakes_place_in_year(\"The Godfather\", 1956).\nTakes_place_in_year(\"The Godfather\", 1957).\nTakes_place_in_year(\"The Godfather\", 1958).\nTakes_place_in_year(\"The Godfather\", 1959).\nTakes_place_in_year(\"The Godfather\", 1960).\nTakes_place_in_year(\"The Godfather\", 1961).\nTakes_place_in_year(\"The Godfather\", 1962).\nTakes_place_in_year(\"The Godfather\", 1963).\nTakes_place_in_year(\"The Godfather\", 1964).\nTakes_place_in_year(\"The Godfather\", 1965).\nTakes_place_in_year(\"The Godfather\", 1966).\nTakes_place_in_year(\"The Godfather\", 1967).\nTakes_place_in_year(\"The Godfather\", 1968).\nTakes_place_in_year(\"The Godfather\", 1969).\nTakes_place_in_year(\"The Godfather\", 1970).\nTakes_place_in_year(\"The Godfather\", 1971).\nTakes_place_in_year(\"The Godfather\", 1972).\nTakes_place_in_year(\"The Godfather\", 1973).\nTakes_place_in_year(\"The Godfather\", 1974).\nTakes_place_in_year(\"The Godfather\", 1975).\nTakes_place_in_year(\"The Godfather\", 1976).\nTakes_place_in_year(\"The Godfather\", 1977).\nTakes_place_in_year(\"The Godfather\", 1978).\nTakes_place_in_year(\"The Godfather\", 1979).\nTakes_place_in_year(\"The Godfather\", 1980).\nTakes_place_in_year(\"The Godfather\", 1981).\nTakes_place_in_year(\"The Godfather\", 1982).\nTakes_place_in_year(\"The Godfather\", 1983).\nTakes_place_in_year(\"The Godfather\", 1984).\nTakes_place_in_year(\"The Godfather\", 1985).\nTakes_place_in_year(\"The Godfather\", 1986).\nTakes_place_in_year(\"The Godfather\", 1987).\nTakes_place_in_year(\"The Godfather\", 1988).\nTakes_place_in_year(\"The Godfather\", 1989).\nTakes_place_in_year(\"The Godfather\", 1990).\nTakes_place_in_year(\"The Godfather\", 1991).\nTakes_place_in_year(\"The Godfather", "completions": [".decl Takes_place_in_year(Event:symbol, Year:float)\nTakes_place_in_year(\"Y2K\", 2000).\nTakes_place_in_year(\"The Godfather\", 1945).\nTakes_place_in_year(\"The Godfather\", 1946).\nTakes_place_in_year(\"The Godfather\", 1947).\nTakes_place_in_year(\"The Godfather\", 1948).\nTakes_place_in_year(\"The Godfather\", 1949).\nTakes_place_in_year(\"The Godfather\", 1950).\nTakes_place_in_year(\"The Godfather\", 1951).\nTakes_place_in_year(\"The Godfather\", 1952).\nTakes_place_in_year(\"The Godfather\", 1953).\nTakes_place_in_year(\"The Godfather\", 1954).\nTakes_place_in_year(\"The Godfather\", 1955).\nTakes_place_in_year(\"The Godfather\", 1956).\nTakes_place_in_year(\"The Godfather\", 1957).\nTakes_place_in_year(\"The Godfather\", 1958).\nTakes_place_in_year(\"The Godfather\", 1959).\nTakes_place_in_year(\"The Godfather\", 1960).\nTakes_place_in_year(\"The Godfather\", 1961).\nTakes_place_in_year(\"The Godfather\", 1962).\nTakes_place_in_year(\"The Godfather\", 1963).\nTakes_place_in_year(\"The Godfather\", 1964).\nTakes_place_in_year(\"The Godfather\", 1965).\nTakes_place_in_year(\"The Godfather\", 1966).\nTakes_place_in_year(\"The Godfather\", 1967).\nTakes_place_in_year(\"The Godfather\", 1968).\nTakes_place_in_year(\"The Godfather\", 1969).\nTakes_place_in_year(\"The Godfather\", 1970).\nTakes_place_in_year(\"The Godfather\", 1971).\nTakes_place_in_year(\"The Godfather\", 1972).\nTakes_place_in_year(\"The Godfather\", 1973).\nTakes_place_in_year(\"The Godfather\", 1974).\nTakes_place_in_year(\"The Godfather\", 1975).\nTakes_place_in_year(\"The Godfather\", 1976).\nTakes_place_in_year(\"The Godfather\", 1977).\nTakes_place_in_year(\"The Godfather\", 1978).\nTakes_place_in_year(\"The Godfather\", 1979).\nTakes_place_in_year(\"The Godfather\", 1980).\nTakes_place_in_year(\"The Godfather\", 1981).\nTakes_place_in_year(\"The Godfather\", 1982).\nTakes_place_in_year(\"The Godfather\", 1983).\nTakes_place_in_year(\"The Godfather\", 1984).\nTakes_place_in_year(\"The Godfather\", 1985).\nTakes_place_in_year(\"The Godfather\", 1986).\nTakes_place_in_year(\"The Godfather\", 1987).\nTakes_place_in_year(\"The Godfather\", 1988).\nTakes_place_in_year(\"The Godfather\", 1989).\nTakes_place_in_year(\"The Godfather\", 1990).\nTakes_place_in_year(\"The Godfather\", 1991).\nTakes_place_in_year(\"The Godfather"]}
{"id": 1424, "answer": true, "completion": ".decl Airs_at(Show:symbol, Time:symbol)\nAirs_at(\"The Tonight Show Starring Jimmy Fallon\", \"11:35 PM\").\n.decl Moonset_at(Time:symbol)\nMoonset_at(\"11:00 PM\").\n.decl Answer()\nAnswer() :- Airs_at(\"The Tonight Show Starring Jimmy Fallon\", time1), Moonset_at(time2), time1 > time2.\n.output Answer", "completions": [".decl Airs_at(Show:symbol, Time:symbol)\nAirs_at(\"The Tonight Show Starring Jimmy Fallon\", \"11:35 PM\").\n.decl Moonset_at(Time:symbol)\nMoonset_at(\"11:00 PM\").\n.decl Answer()\nAnswer() :- Airs_at(\"The Tonight Show Starring Jimmy Fallon\", time1), Moonset_at(time2), time1 > time2.\n.output Answer"]}
{"id": 1425, "answer": true, "completion": ".decl Graduates_in_year(Person:symbol, Year:float)\nGraduates_in_year(\"student of the class of 2017\", 2017).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"9/11\", 2001).\n.decl Answer()\nAnswer() :- Graduates_in_year(\"student of the class of 2017\", year1), Happens_in_year(\"9/11\", year2), year1 > year2.\n.output Answer", "completions": [".decl Graduates_in_year(Person:symbol, Year:float)\nGraduates_in_year(\"student of the class of 2017\", 2017).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"9/11\", 2001).\n.decl Answer()\nAnswer() :- Graduates_in_year(\"student of the class of 2017\", year1), Happens_in_year(\"9/11\", year2), year1 > year2.\n.output Answer"]}
{"id": 1426, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Janet Jackson\", \"ham\").\n.decl Answer()\nAnswer() :- !Eats(\"Janet Jackson\", \"ham\").\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Janet Jackson\", \"ham\").\n.decl Answer()\nAnswer() :- !Eats(\"Janet Jackson\", \"ham\").\n.output Answer"]}
{"id": 1427, "answer": true, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"pea pod\", 0.1).\nHas_area(\"chess board\", 64).\n.decl Answer()\nAnswer() :- Has_area(\"pea pod\", area1), Has_area(\"chess board\", area2), 20*area1 >= area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"pea pod\", 0.1).\nHas_area(\"chess board\", 64).\n.decl Answer()\nAnswer() :- Has_area(\"pea pod\", area1), Has_area(\"chess board\", area2), 20*area1 >= area2.\n.output Answer"]}
{"id": 1428, "answer": true, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"footprints on the moon\", 1969).\n.decl Answer()\nAnswer() :- Happens_in_year(\"footprints on the moon\", year), year < 1960.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"footprints on the moon\", 1969).\n.decl Answer()\nAnswer() :- Happens_in_year(\"footprints on the moon\", year), year < 1960.\n.output Answer"]}
{"id": 1429, "answer": false, "completion": ".decl Can_fight(Person:symbol, Match:symbol)\nCan_fight(\"Supreme Court of Canada\", \"Lucha trios match\").\n.decl Answer()\nAnswer() :- Can_fight(\"Supreme Court of Canada\", \"Lucha trios match\").\n.output Answer", "completions": [".decl Can_fight(Person:symbol, Match:symbol)\nCan_fight(\"Supreme Court of Canada\", \"Lucha trios match\").\n.decl Answer()\nAnswer() :- Can_fight(\"Supreme Court of Canada\", \"Lucha trios match\").\n.output Answer"]}
{"id": 1430, "answer": true, "completion": ".decl Has_n_readers(Magazine:symbol, N_readers:float)\nHas_n_readers(\"Atlantic\", 5000000).\n.decl Has_n_members(Battalion:symbol, N_members:float)\nHas_n_members(\"battalion\", 1000).\n.decl Answer()\nAnswer() :- Has_n_readers(\"Atlantic\", n_readers), Has_n_members(\"battalion\", n_members), n_readers >= n_members * 500.\n.output Answer", "completions": [".decl Has_n_readers(Magazine:symbol, N_readers:float)\nHas_n_readers(\"Atlantic\", 5000000).\n.decl Has_n_members(Battalion:symbol, N_members:float)\nHas_n_members(\"battalion\", 1000).\n.decl Answer()\nAnswer() :- Has_n_readers(\"Atlantic\", n_readers), Has_n_members(\"battalion\", n_members), n_readers >= n_members * 500.\n.output Answer"]}
{"id": 1431, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"French Revolution\", 1789).\nHappens_in_year(\"televised\", 1884).\n.decl Answer()\nAnswer() :- Happens_in_year(\"French Revolution\", year1), Happens_in_year(\"televised\", year2), year1 < year2.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"French Revolution\", 1789).\nHappens_in_year(\"televised\", 1884).\n.decl Answer()\nAnswer() :- Happens_in_year(\"French Revolution\", year1), Happens_in_year(\"televised\", year2), year1 < year2.\n.output Answer"]}
{"id": 1432, "answer": false, "completion": ".decl Lives(Person:symbol, Life:symbol)\nLives(\"Dr. Seuss\", \"tragedy free life\").\n.decl Answer()\nAnswer() :- Lives(\"Dr. Seuss\", life).\n.output Answer", "completions": [".decl Lives(Person:symbol, Life:symbol)\nLives(\"Dr. Seuss\", \"tragedy free life\").\n.decl Answer()\nAnswer() :- Lives(\"Dr. Seuss\", life).\n.output Answer"]}
{"id": 1433, "answer": false, "completion": ".decl Has_leaves(Tree:symbol, Leaves:symbol)\nHas_leaves(\"Christmas tree\", \"coniferous\").\nHas_leaves(\"deciduous tree\", \"deciduous\").\n.decl Answer()\nAnswer() :- Has_leaves(\"Christmas tree\", leaves1), Has_leaves(\"deciduous tree\", leaves2), leaves1 != leaves2.\n.output Answer", "completions": [".decl Has_leaves(Tree:symbol, Leaves:symbol)\nHas_leaves(\"Christmas tree\", \"coniferous\").\nHas_leaves(\"deciduous tree\", \"deciduous\").\n.decl Answer()\nAnswer() :- Has_leaves(\"Christmas tree\", leaves1), Has_leaves(\"deciduous tree\", leaves2), leaves1 != leaves2.\n.output Answer"]}
{"id": 1434, "answer": true, "completion": ".decl Produces(Animal:symbol, Product:symbol)\nProduces(\"cow\", \"milk\").\n.decl Answer()\nAnswer() :- Produces(\"cow\", \"Harvey Milk\").\n.output Answer", "completions": [".decl Produces(Animal:symbol, Product:symbol)\nProduces(\"cow\", \"milk\").\n.decl Answer()\nAnswer() :- Produces(\"cow\", \"Harvey Milk\").\n.output Answer"]}
{"id": 1435, "answer": true, "completion": ".decl Has_protagonist(Story:symbol, Protagonist:symbol)\nHas_protagonist(\"Song of Roland\", \"Roland\").\n.decl Is_friendly_with(Person:symbol, Group:symbol)\nIs_friendly_with(\"Roland\", \"French\").\n.decl Has_sagas(Group:symbol)\nHas_sagas(\"French\").\n.decl Answer()\nAnswer() :- Has_protagonist(\"Song of Roland\", \"Roland\"), Is_friendly_with(\"Roland\", \"French\"), Has_sagas(\"French\").\n.output Answer", "completions": [".decl Has_protagonist(Story:symbol, Protagonist:symbol)\nHas_protagonist(\"Song of Roland\", \"Roland\").\n.decl Is_friendly_with(Person:symbol, Group:symbol)\nIs_friendly_with(\"Roland\", \"French\").\n.decl Has_sagas(Group:symbol)\nHas_sagas(\"French\").\n.decl Answer()\nAnswer() :- Has_protagonist(\"Song of Roland\", \"Roland\"), Is_friendly_with(\"Roland\", \"French\"), Has_sagas(\"French\").\n.output Answer"]}
{"id": 1436, "answer": true, "completion": ".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"cucumber\", \"smooth\").\n.decl Answer()\nAnswer() :- Has_texture(object1, texture1), Has_texture(object2, texture2), object1 != object2, texture1 = texture2.\n.output Answer", "completions": [".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"cucumber\", \"smooth\").\n.decl Answer()\nAnswer() :- Has_texture(object1, texture1), Has_texture(object2, texture2), object1 != object2, texture1 = texture2.\n.output Answer"]}
{"id": 1437, "answer": true, "completion": ".decl Existed_in_time(Country:symbol, Time:symbol)\nExisted_in_time(\"Prussia\", \"1701-1918\").\nExisted_in_time(\"Euro\", \"1999-present\").\n.decl Answer()\nAnswer() :- Existed_in_time(\"Prussia\", time1), Existed_in_time(\"Euro\", time2), time1 < time2.\n.output Answer", "completions": [".decl Existed_in_time(Country:symbol, Time:symbol)\nExisted_in_time(\"Prussia\", \"1701-1918\").\nExisted_in_time(\"Euro\", \"1999-present\").\n.decl Answer()\nAnswer() :- Existed_in_time(\"Prussia\", time1), Existed_in_time(\"Euro\", time2), time1 < time2.\n.output Answer"]}
{"id": 1438, "answer": false, "completion": ".decl Carries(Person:symbol, Object:symbol)\nCarries(\"Bugs Bunny\", \"carrot\").\n.decl Answer()\nAnswer() :- Carries(\"Bugs Bunny\", \"root vegetable\").\n.output Answer\n\n", "completions": [".decl Carries(Person:symbol, Object:symbol)\nCarries(\"Bugs Bunny\", \"carrot\").\n.decl Answer()\nAnswer() :- Carries(\"Bugs Bunny\", \"root vegetable\").\n.output Answer\n\n"]}
{"id": 1439, "answer": true, "completion": ".decl Has_rule(Code:symbol, Rule:symbol)\nHas_rule(\"Hammurabi's Code\", \"If a man has stolen an ox or a sheep, and it is found in his possession, he shall pay five oxen for an ox, and four sheep for a sheep. If a thief is caught breaking in and is struck so that he dies, there shall be no blood shed for him.\").\nHas_rule(\"Christian's Golden Rule\", \"Do unto others what you want done to you.\").\n.decl Answer()\nAnswer() :- Has_rule(\"Hammurabi's Code\", rule1), Has_rule(\"Christian's Golden Rule\", rule2), rule1 != rule2.\n.output Answer", "completions": [".decl Has_rule(Code:symbol, Rule:symbol)\nHas_rule(\"Hammurabi's Code\", \"If a man has stolen an ox or a sheep, and it is found in his possession, he shall pay five oxen for an ox, and four sheep for a sheep. If a thief is caught breaking in and is struck so that he dies, there shall be no blood shed for him.\").\nHas_rule(\"Christian's Golden Rule\", \"Do unto others what you want done to you.\").\n.decl Answer()\nAnswer() :- Has_rule(\"Hammurabi's Code\", rule1), Has_rule(\"Christian's Golden Rule\", rule2), rule1 != rule2.\n.output Answer"]}
{"id": 1440, "answer": false, "completion": ".decl Originated_in_century(Religion:symbol, Century:float)\nOriginated_in_century(\"Christianity\", 1).\nOriginated_in_century(\"Christianity\", 2).\nOriginated_in_century(\"Christianity\", 3).\nOriginated_in_century(\"Christianity\", 4).\nOriginated_in_century(\"Christianity\", 5).\nOriginated_in_century(\"Christianity\", 6).\nOriginated_in_century(\"Christianity\", 7).\nOriginated_in_century(\"Christianity\", 8).\nOriginated_in_century(\"Christianity\", 9).\nOriginated_in_century(\"Christianity\", 10).\nOriginated_in_century(\"Christianity\", 11).\nOriginated_in_century(\"Christianity\", 12).\nOriginated_in_century(\"Christianity\", 13).\nOriginated_in_century(\"Christianity\", 14).\nOriginated_in_century(\"Christianity\", 15).\nOriginated_in_century(\"Christianity\", 16).\nOriginated_in_century(\"Christianity\", 17).\nOriginated_in_century(\"Christianity\", 18).\nOriginated_in_century(\"Christianity\", 19).\nOriginated_in_century(\"Christianity\", 20).\nOriginated_in_century(\"Christianity\", 21).\nOriginated_in_century(\"Christianity\", 22).\nOriginated_in_century(\"Christianity\", 23).\nOriginated_in_century(\"Christianity\", 24).\nOriginated_in_century(\"Christianity\", 25).\nOriginated_in_century(\"Christianity\", 26).\nOriginated_in_century(\"Christianity\", 27).\nOriginated_in_century(\"Christianity\", 28).\nOriginated_in_century(\"Christianity\", 29).\nOriginated_in_century(\"Christianity\", 30).\nOriginated_in_century(\"Christianity\", 31).\nOriginated_in_century(\"Christianity\", 32).\nOriginated_in_century(\"Christianity\", 33).\nOriginated_in_century(\"Christianity\", 34).\nOriginated_in_century(\"Christianity\", 35).\nOriginated_in_century(\"Christianity\", 36).\nOriginated_in_century(\"Christianity\", 37).\nOriginated_in_century(\"Christianity\", 38).\nOriginated_in_century(\"Christianity\", 39).\nOriginated_in_century(\"Christianity\", 40).\nOriginated_in_century(\"Christianity\", 41).\nOriginated_in_century(\"Christianity\", 42).\nOriginated_in_century(\"Christianity\", 43).\nOriginated_in_century(\"Christianity\", 44).\nOriginated_in_century(\"Christianity\", 45).\nOriginated_in_century(\"Christianity\", 46).\nOriginated_in_century(\"Christianity\", 47).\nOriginated_in_century(\"Christianity\", 48).\nOriginated_in_century(\"Christianity\", 49).\nOriginated_in_century(\"Christianity\", 50).\nOriginated_in_century(\"Christianity\", 51).\nOriginated_in_century(\"Christianity\", 52).\nOriginated_in_century(\"Christianity\", 53).\nOriginated_in_century(\"Christianity\", 54).\nOriginated_in_century(\"Christianity\", 55).\nOriginated_in_century(\"Christianity\", 56).\nOriginated_in_century(\"Christianity\", 57).\nOriginated_in_century(\"Christianity\", 58).\nOriginated_in_century(\"Christianity\", 59).\nOriginated_in_century(\"Christianity\", 60).\n", "completions": [".decl Originated_in_century(Religion:symbol, Century:float)\nOriginated_in_century(\"Christianity\", 1).\nOriginated_in_century(\"Christianity\", 2).\nOriginated_in_century(\"Christianity\", 3).\nOriginated_in_century(\"Christianity\", 4).\nOriginated_in_century(\"Christianity\", 5).\nOriginated_in_century(\"Christianity\", 6).\nOriginated_in_century(\"Christianity\", 7).\nOriginated_in_century(\"Christianity\", 8).\nOriginated_in_century(\"Christianity\", 9).\nOriginated_in_century(\"Christianity\", 10).\nOriginated_in_century(\"Christianity\", 11).\nOriginated_in_century(\"Christianity\", 12).\nOriginated_in_century(\"Christianity\", 13).\nOriginated_in_century(\"Christianity\", 14).\nOriginated_in_century(\"Christianity\", 15).\nOriginated_in_century(\"Christianity\", 16).\nOriginated_in_century(\"Christianity\", 17).\nOriginated_in_century(\"Christianity\", 18).\nOriginated_in_century(\"Christianity\", 19).\nOriginated_in_century(\"Christianity\", 20).\nOriginated_in_century(\"Christianity\", 21).\nOriginated_in_century(\"Christianity\", 22).\nOriginated_in_century(\"Christianity\", 23).\nOriginated_in_century(\"Christianity\", 24).\nOriginated_in_century(\"Christianity\", 25).\nOriginated_in_century(\"Christianity\", 26).\nOriginated_in_century(\"Christianity\", 27).\nOriginated_in_century(\"Christianity\", 28).\nOriginated_in_century(\"Christianity\", 29).\nOriginated_in_century(\"Christianity\", 30).\nOriginated_in_century(\"Christianity\", 31).\nOriginated_in_century(\"Christianity\", 32).\nOriginated_in_century(\"Christianity\", 33).\nOriginated_in_century(\"Christianity\", 34).\nOriginated_in_century(\"Christianity\", 35).\nOriginated_in_century(\"Christianity\", 36).\nOriginated_in_century(\"Christianity\", 37).\nOriginated_in_century(\"Christianity\", 38).\nOriginated_in_century(\"Christianity\", 39).\nOriginated_in_century(\"Christianity\", 40).\nOriginated_in_century(\"Christianity\", 41).\nOriginated_in_century(\"Christianity\", 42).\nOriginated_in_century(\"Christianity\", 43).\nOriginated_in_century(\"Christianity\", 44).\nOriginated_in_century(\"Christianity\", 45).\nOriginated_in_century(\"Christianity\", 46).\nOriginated_in_century(\"Christianity\", 47).\nOriginated_in_century(\"Christianity\", 48).\nOriginated_in_century(\"Christianity\", 49).\nOriginated_in_century(\"Christianity\", 50).\nOriginated_in_century(\"Christianity\", 51).\nOriginated_in_century(\"Christianity\", 52).\nOriginated_in_century(\"Christianity\", 53).\nOriginated_in_century(\"Christianity\", 54).\nOriginated_in_century(\"Christianity\", 55).\nOriginated_in_century(\"Christianity\", 56).\nOriginated_in_century(\"Christianity\", 57).\nOriginated_in_century(\"Christianity\", 58).\nOriginated_in_century(\"Christianity\", 59).\nOriginated_in_century(\"Christianity\", 60).\n"]}
{"id": 1441, "answer": false, "completion": ".decl Part_of_bible(Book:symbol, Bible:symbol)\nPart_of_bible(\"Ten commandments\", \"Old Testament\").\nPart_of_bible(\"Old Testament\", \"Bible\").\n.decl Answer()\nAnswer() :- Part_of_bible(\"Ten commandments\", \"Old Testament\"), Part_of_bible(\"Old Testament\", \"Bible\"), !Part_of_bible(\"Old Testament\", \"Bible\").\n.output Answer", "completions": [".decl Part_of_bible(Book:symbol, Bible:symbol)\nPart_of_bible(\"Ten commandments\", \"Old Testament\").\nPart_of_bible(\"Old Testament\", \"Bible\").\n.decl Answer()\nAnswer() :- Part_of_bible(\"Ten commandments\", \"Old Testament\"), Part_of_bible(\"Old Testament\", \"Bible\"), !Part_of_bible(\"Old Testament\", \"Bible\").\n.output Answer"]}
{"id": 1442, "answer": true, "completion": ".decl Can_conduct_surveillance(Object:symbol)\nCan_conduct_surveillance(\"teddy bear\").\n.decl Answer()\nAnswer() :- Can_conduct_surveillance(\"teddy bear\").\n.output Answer", "completions": [".decl Can_conduct_surveillance(Object:symbol)\nCan_conduct_surveillance(\"teddy bear\").\n.decl Answer()\nAnswer() :- Can_conduct_surveillance(\"teddy bear\").\n.output Answer"]}
{"id": 1443, "answer": true, "completion": ".decl Has_pay(Person:symbol, Pay:float)\nHas_pay(\"retail associate\", 10).\nHas_pay(\"retailer's CEO\", 100).\n.decl Answer()\nAnswer() :- Has_pay(\"retail associate\", pay1), Has_pay(\"retailer's CEO\", pay2), pay1 < pay2.\n.output Answer", "completions": [".decl Has_pay(Person:symbol, Pay:float)\nHas_pay(\"retail associate\", 10).\nHas_pay(\"retailer's CEO\", 100).\n.decl Answer()\nAnswer() :- Has_pay(\"retail associate\", pay1), Has_pay(\"retailer's CEO\", pay2), pay1 < pay2.\n.output Answer"]}
{"id": 1444, "answer": false, "completion": ".decl Has_n_members(Band:symbol, N_members:float)\nHas_n_members(\"Tame Impala\", 5).\n.decl Has_n_members(Band:symbol, N_members:float)\nHas_n_members(\"Tame Impala\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Tame Impala\", n_members), n_members >= 5.\n.output Answer", "completions": [".decl Has_n_members(Band:symbol, N_members:float)\nHas_n_members(\"Tame Impala\", 5).\n.decl Has_n_members(Band:symbol, N_members:float)\nHas_n_members(\"Tame Impala\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Tame Impala\", n_members), n_members >= 5.\n.output Answer"]}
{"id": 1445, "answer": true, "completion": ".decl Is_in_body(Substance:symbol, Body:symbol)\nIs_in_body(\"lactic acid\", \"body\").\n.decl Is_bad_for(Substance:symbol, Body:symbol)\nIs_bad_for(\"lactic acid\", \"body\").\n.decl Answer()\nAnswer() :- Is_in_body(\"lactic acid\", body), Is_bad_for(\"lactic acid\", body).\n.output Answer", "completions": [".decl Is_in_body(Substance:symbol, Body:symbol)\nIs_in_body(\"lactic acid\", \"body\").\n.decl Is_bad_for(Substance:symbol, Body:symbol)\nIs_bad_for(\"lactic acid\", \"body\").\n.decl Answer()\nAnswer() :- Is_in_body(\"lactic acid\", body), Is_bad_for(\"lactic acid\", body).\n.output Answer"]}
{"id": 1446, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"President Trump's first term\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Tokyo Tower repainted\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Tokyo Tower repainted\", n_years1), Last_n_years(\"President Trump's first term\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"President Trump's first term\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Tokyo Tower repainted\", 5).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Tokyo Tower repainted\", n_years1), Last_n_years(\"President Trump's first term\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1447, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"David Scott\", 1.8).\nHas_height(\"James Irwin\", 1.8).\nHas_height(\"Alfred Worden\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"David Scott\", height1), Has_height(\"James Irwin\", height2), Has_height(\"Alfred Worden\", height3), height1 > 1.5, height2 > 1.5, height3 > 1.5.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"David Scott\", 1.8).\nHas_height(\"James Irwin\", 1.8).\nHas_height(\"Alfred Worden\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"David Scott\", height1), Has_height(\"James Irwin\", height2), Has_height(\"Alfred Worden\", height3), height1 > 1.5, height2 > 1.5, height3 > 1.5.\n.output Answer"]}
{"id": 1448, "answer": false, "completion": ".decl Takes_oath(Person:symbol, Court:symbol)\nTakes_oath(\"person\", \"court\").\n.decl Answer()\nAnswer() :- Takes_oath(\"person\", \"court\"), !.\n.output Answer", "completions": [".decl Takes_oath(Person:symbol, Court:symbol)\nTakes_oath(\"person\", \"court\").\n.decl Answer()\nAnswer() :- Takes_oath(\"person\", \"court\"), !.\n.output Answer"]}
{"id": 1449, "answer": true, "completion": ".decl Is_considered(Thing:symbol, Adjective:symbol)\nIs_considered(\"Newspeak\", \"very straightforward\").\n.decl Answer()\nAnswer() :- Is_considered(\"Newspeak\", \"very straightforward\").\n.output Answer", "completions": [".decl Is_considered(Thing:symbol, Adjective:symbol)\nIs_considered(\"Newspeak\", \"very straightforward\").\n.decl Answer()\nAnswer() :- Is_considered(\"Newspeak\", \"very straightforward\").\n.output Answer"]}
{"id": 1450, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Snow White dwarves\", 7).\nHas_n_members(\"The Hobbit dwarves\", 13).\n.decl Answer()\nAnswer() :- Has_n_members(\"Snow White dwarves\", n_members1), Has_n_members(\"The Hobbit dwarves\", n_members2), n_members1 < n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Snow White dwarves\", 7).\nHas_n_members(\"The Hobbit dwarves\", 13).\n.decl Answer()\nAnswer() :- Has_n_members(\"Snow White dwarves\", n_members1), Has_n_members(\"The Hobbit dwarves\", n_members2), n_members1 < n_members2.\n.output Answer"]}
{"id": 1451, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Unity\", 182).\nHas_height(\"Statue of Liberty\", 93).\nHas_height(\"Lighthouse of Alexandria\", 137).\n.decl Answer()\nAnswer() :- Has_height(\"Statue of Unity\", height1), Has_height(\"Statue of Liberty\", height2), Has_height(\"Lighthouse of Alexandria\", height3), height1 >= height2, height1 >= height3.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Statue of Unity\", 182).\nHas_height(\"Statue of Liberty\", 93).\nHas_height(\"Lighthouse of Alexandria\", 137).\n.decl Answer()\nAnswer() :- Has_height(\"Statue of Unity\", height1), Has_height(\"Statue of Liberty\", height2), Has_height(\"Lighthouse of Alexandria\", height3), height1 >= height2, height1 >= height3.\n.output Answer"]}
{"id": 1452, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Football War\", 100).\n.decl Answer()\nAnswer() :- Last_n_days(\"Football War\", n_days), n_days >= 30.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Football War\", 100).\n.decl Answer()\nAnswer() :- Last_n_days(\"Football War\", n_days), n_days >= 30.\n.output Answer"]}
{"id": 1453, "answer": false, "completion": ".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"peach\", \"firm\").\nHas_texture(\"peach\", \"soft\").\n.decl Answer()\nAnswer() :- Has_texture(\"peach\", \"firm\").\n.output Answer\n\n\n", "completions": [".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"peach\", \"firm\").\nHas_texture(\"peach\", \"soft\").\n.decl Answer()\nAnswer() :- Has_texture(\"peach\", \"firm\").\n.output Answer\n\n\n"]}
{"id": 1454, "answer": true, "completion": ".decl Has_reference(Person:symbol, Reference:symbol)\nHas_reference(\"Adam Sandler\", \"Cole Spouse\").\nHas_reference(\"Adam Sandler\", \"scuba man doll\").\n.decl Answer()\nAnswer() :- Has_reference(\"Adam Sandler\", \"Cole Spouse\").\nAnswer() :- Has_reference(\"Adam Sandler\", \"scuba man doll\").\n.output Answer", "completions": [".decl Has_reference(Person:symbol, Reference:symbol)\nHas_reference(\"Adam Sandler\", \"Cole Spouse\").\nHas_reference(\"Adam Sandler\", \"scuba man doll\").\n.decl Answer()\nAnswer() :- Has_reference(\"Adam Sandler\", \"Cole Spouse\").\nAnswer() :- Has_reference(\"Adam Sandler\", \"scuba man doll\").\n.output Answer"]}
{"id": 1455, "answer": true, "completion": ".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Lhamo Thondup\", \"Buddhism\").\n.decl Answer()\nAnswer() :- Has_religion(\"Lhamo Thondup\", \"Catholic Church\").\n.output Answer", "completions": [".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Lhamo Thondup\", \"Buddhism\").\n.decl Answer()\nAnswer() :- Has_religion(\"Lhamo Thondup\", \"Catholic Church\").\n.output Answer"]}
{"id": 1456, "answer": false, "completion": ".decl Has_spiciness(Food:symbol, Spiciness:float)\nHas_spiciness(\"jalapeno pepper\", 10).\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"child\", 5).\nHas_age(\"child\", 6).\nHas_age(\"child\", 7).\nHas_age(\"child\", 8).\nHas_age(\"child\", 9).\nHas_age(\"child\", 10).\nHas_age(\"child\", 11).\nHas_age(\"child\", 12).\nHas_age(\"child\", 13).\nHas_age(\"child\", 14).\nHas_age(\"child\", 15).\nHas_age(\"child\", 16).\nHas_age(\"child\", 17).\nHas_age(\"child\", 18).\n.decl Answer()\nAnswer() :- Has_spiciness(\"jalapeno pepper\", spiciness1), Has_age(\"child\", age2), spiciness1 > age2.\n.output Answer", "completions": [".decl Has_spiciness(Food:symbol, Spiciness:float)\nHas_spiciness(\"jalapeno pepper\", 10).\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"child\", 5).\nHas_age(\"child\", 6).\nHas_age(\"child\", 7).\nHas_age(\"child\", 8).\nHas_age(\"child\", 9).\nHas_age(\"child\", 10).\nHas_age(\"child\", 11).\nHas_age(\"child\", 12).\nHas_age(\"child\", 13).\nHas_age(\"child\", 14).\nHas_age(\"child\", 15).\nHas_age(\"child\", 16).\nHas_age(\"child\", 17).\nHas_age(\"child\", 18).\n.decl Answer()\nAnswer() :- Has_spiciness(\"jalapeno pepper\", spiciness1), Has_age(\"child\", age2), spiciness1 > age2.\n.output Answer"]}
{"id": 1457, "answer": true, "completion": ".decl Is_anchor(Person:symbol)\nIs_anchor(\"Rede Globo\").\n.decl Is_viewer(Person:symbol)\nIs_viewer(\"Rede Globo\").\n.decl Is_typical(Person1:symbol, Person2:symbol, Word:symbol)\nIs_typical(\"Rede Globo\", \"Rede Globo\", \"Konnichiwa\").\n.decl Answer()\nAnswer() :- Is_anchor(person1), Is_viewer(person2), Is_typical(person1, person2, word).\n.output Answer", "completions": [".decl Is_anchor(Person:symbol)\nIs_anchor(\"Rede Globo\").\n.decl Is_viewer(Person:symbol)\nIs_viewer(\"Rede Globo\").\n.decl Is_typical(Person1:symbol, Person2:symbol, Word:symbol)\nIs_typical(\"Rede Globo\", \"Rede Globo\", \"Konnichiwa\").\n.decl Answer()\nAnswer() :- Is_anchor(person1), Is_viewer(person2), Is_typical(person1, person2, word).\n.output Answer"]}
{"id": 1458, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"harbor seal\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in(\"harbor seal\", \"ocean\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"harbor seal\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in(\"harbor seal\", \"ocean\").\n.output Answer"]}
{"id": 1459, "answer": true, "completion": ".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"2020 Toyota Supra\", 155).\n.decl Has_minimum_top_speed(Race:symbol, Minimum_top_speed:float)\nHas_minimum_top_speed(\"Nascar rally\", 150).\n.decl Answer()\nAnswer() :- Has_top_speed(\"2020 Toyota Supra\", top_speed), Has_minimum_top_speed(\"Nascar rally\", minimum_top_speed), top_speed < minimum_top_speed.\n.output Answer", "completions": [".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"2020 Toyota Supra\", 155).\n.decl Has_minimum_top_speed(Race:symbol, Minimum_top_speed:float)\nHas_minimum_top_speed(\"Nascar rally\", 150).\n.decl Answer()\nAnswer() :- Has_top_speed(\"2020 Toyota Supra\", top_speed), Has_minimum_top_speed(\"Nascar rally\", minimum_top_speed), top_speed < minimum_top_speed.\n.output Answer"]}
{"id": 1460, "answer": true, "completion": ".decl Eats_in_time(Person:symbol, Food:symbol, Time:float)\nEats_in_time(\"human\", \"12-lb roast turkey\", 60).\n.decl Answer()\nAnswer() :- Eats_in_time(\"human\", \"12-lb roast turkey\", time).\n.output Answer", "completions": [".decl Eats_in_time(Person:symbol, Food:symbol, Time:float)\nEats_in_time(\"human\", \"12-lb roast turkey\", 60).\n.decl Answer()\nAnswer() :- Eats_in_time(\"human\", \"12-lb roast turkey\", time).\n.output Answer"]}
{"id": 1461, "answer": true, "completion": ".decl Carves_name(Person:symbol, Item:symbol)\nCarves_name(\"Zorro\", \"wood\").\nCarves_name(\"Zorro\", \"leather\").\n.decl Answer()\nAnswer() :- Carves_name(\"Zorro\", item).\n.output Answer", "completions": [".decl Carves_name(Person:symbol, Item:symbol)\nCarves_name(\"Zorro\", \"wood\").\nCarves_name(\"Zorro\", \"leather\").\n.decl Answer()\nAnswer() :- Carves_name(\"Zorro\", item).\n.output Answer"]}
{"id": 1462, "answer": true, "completion": ".decl Is_a_building(Place:symbol)\nIs_a_building(\"Viper Room\").\nIs_a_building(\"National Diet building\").\n.decl Answer()\nAnswer() :- Is_a_building(\"Viper Room\").\nAnswer() :- Is_a_building(\"National Diet building\").\n.output Answer", "completions": [".decl Is_a_building(Place:symbol)\nIs_a_building(\"Viper Room\").\nIs_a_building(\"National Diet building\").\n.decl Answer()\nAnswer() :- Is_a_building(\"Viper Room\").\nAnswer() :- Is_a_building(\"National Diet building\").\n.output Answer"]}
{"id": 1463, "answer": true, "completion": ".decl Is_vegan(Food:symbol)\nIs_vegan(\"chickpeas\").\n.decl Is_tuna(Food:symbol)\nIs_tuna(\"tuna\").\n.decl Answer()\nAnswer() :- Is_vegan(food1), Is_tuna(food2), food1 != food2.\n.output Answer", "completions": [".decl Is_vegan(Food:symbol)\nIs_vegan(\"chickpeas\").\n.decl Is_tuna(Food:symbol)\nIs_tuna(\"tuna\").\n.decl Answer()\nAnswer() :- Is_vegan(food1), Is_tuna(food2), food1 != food2.\n.output Answer"]}
{"id": 1464, "answer": false, "completion": ".decl Has_collaborator(Adaptation:symbol, Collaborator:symbol)\nHas_collaborator(\"Beauty and the Beast\", \"Bill Condon\").\nHas_collaborator(\"Beauty and the Beast\", \"Stephen Chbosky\").\nHas_collaborator(\"Beauty and the Beast\", \"Evan Spiliotopoulos\").\nHas_collaborator(\"Beauty and the Beast\", \"Alan Menken\").\nHas_collaborator(\"Beauty and the Beast\", \"Howard Ashman\").\nHas_collaborator(\"Beauty and the Beast\", \"Tim Rice\").\nHas_collaborator(\"Beauty and the Beast\", \"Luke Evans\").\nHas_collaborator(\"Beauty and the Beast\", \"Dan Stevens\").\nHas_collaborator(\"Beauty and the Beast\", \"Emma Watson\").\nHas_collaborator(\"Beauty and the Beast\", \"Kevin Kline\").\nHas_collaborator(\"Beauty and the Beast\", \"Josh Gad\").\nHas_collaborator(\"Beauty and the Beast\", \"Ewan McGregor\").\nHas_collaborator(\"Beauty and the Beast\", \"Ian McKellen\").\nHas_collaborator(\"Beauty and the Beast\", \"Emma Thompson\").\nHas_collaborator(\"Beauty and the Beast\", \"Audra McDonald\").\nHas_collaborator(\"Beauty and the Beast\", \"Gugu Mbatha-Raw\").\nHas_collaborator(\"Beauty and the Beast\", \"Stanley Tucci\").\nHas_collaborator(\"Beauty and the Beast\", \"Nathan Mack\").\nHas_collaborator(\"Beauty and the Beast\", \"Sonoya Mizuno\").\nHas_collaborator(\"Beauty and the Beast\", \"Hattie Morahan\").\nHas_collaborator(\"Beauty and the Beast\", \"Adrian Schiller\").\nHas_collaborator(\"Beauty and the Beast\", \"Robby Baier\").\nHas_collaborator(\"Beauty and the Beast\", \"Adam Mitchell\").\nHas_collaborator(\"Beauty and the Beast\", \"Chris Andrew Mellon\").\nHas_collaborator(\"Beauty and the Beast\", \"Harrison Osterfield\").\nHas_collaborator(\"Beauty and the Beast\", \"Ray Fearon\").\nHas_collaborator(\"Beauty and the Beast\", \"Eddie Redmayne\").\nHas_collaborator(\"Beauty and the Beast\", \"Tom Hiddleston\").\nHas_collaborator(\"Beauty and the Beast\", \"Tilda Swinton\").\nHas_collaborator(\"Beauty and the Beast\", \"Ben Whishaw\").\nHas_collaborator(\"Beauty and the Beast\", \"Dakota Johnson\").\nHas_collaborator(\"Beauty and the Beast\", \"Jamie Dornan\").\nHas_collaborator(\"Beauty and the Beast\", \"Kim Basinger\").\nHas_collaborator(\"Beauty and the Beast\", \"Bella Heathcote\").\nHas_collaborator(\"Beauty and the Beast\", \"Luke Bracey\").\nHas_collaborator(\"Beauty and the Beast\", \"Rita Ora\").\nHas_collaborator(\"Beauty and the Beast\", \"Nick Jonas\").\nHas_collaborator(\"Beauty and the Beast\", \"John Legend\").\nHas_collaborator(\"Beauty and the Beast\", \"Ariana Grande\").\nHas_collaborator(\"Beauty and the Beast\", \"Celine Dion\").\nHas_collaborator(\"Beauty and the Beast\", \"Stevie Wonder\").\nHas_collaborator(\"Beauty and the Beast\", \"DJ Khaled\").\nHas", "completions": [".decl Has_collaborator(Adaptation:symbol, Collaborator:symbol)\nHas_collaborator(\"Beauty and the Beast\", \"Bill Condon\").\nHas_collaborator(\"Beauty and the Beast\", \"Stephen Chbosky\").\nHas_collaborator(\"Beauty and the Beast\", \"Evan Spiliotopoulos\").\nHas_collaborator(\"Beauty and the Beast\", \"Alan Menken\").\nHas_collaborator(\"Beauty and the Beast\", \"Howard Ashman\").\nHas_collaborator(\"Beauty and the Beast\", \"Tim Rice\").\nHas_collaborator(\"Beauty and the Beast\", \"Luke Evans\").\nHas_collaborator(\"Beauty and the Beast\", \"Dan Stevens\").\nHas_collaborator(\"Beauty and the Beast\", \"Emma Watson\").\nHas_collaborator(\"Beauty and the Beast\", \"Kevin Kline\").\nHas_collaborator(\"Beauty and the Beast\", \"Josh Gad\").\nHas_collaborator(\"Beauty and the Beast\", \"Ewan McGregor\").\nHas_collaborator(\"Beauty and the Beast\", \"Ian McKellen\").\nHas_collaborator(\"Beauty and the Beast\", \"Emma Thompson\").\nHas_collaborator(\"Beauty and the Beast\", \"Audra McDonald\").\nHas_collaborator(\"Beauty and the Beast\", \"Gugu Mbatha-Raw\").\nHas_collaborator(\"Beauty and the Beast\", \"Stanley Tucci\").\nHas_collaborator(\"Beauty and the Beast\", \"Nathan Mack\").\nHas_collaborator(\"Beauty and the Beast\", \"Sonoya Mizuno\").\nHas_collaborator(\"Beauty and the Beast\", \"Hattie Morahan\").\nHas_collaborator(\"Beauty and the Beast\", \"Adrian Schiller\").\nHas_collaborator(\"Beauty and the Beast\", \"Robby Baier\").\nHas_collaborator(\"Beauty and the Beast\", \"Adam Mitchell\").\nHas_collaborator(\"Beauty and the Beast\", \"Chris Andrew Mellon\").\nHas_collaborator(\"Beauty and the Beast\", \"Harrison Osterfield\").\nHas_collaborator(\"Beauty and the Beast\", \"Ray Fearon\").\nHas_collaborator(\"Beauty and the Beast\", \"Eddie Redmayne\").\nHas_collaborator(\"Beauty and the Beast\", \"Tom Hiddleston\").\nHas_collaborator(\"Beauty and the Beast\", \"Tilda Swinton\").\nHas_collaborator(\"Beauty and the Beast\", \"Ben Whishaw\").\nHas_collaborator(\"Beauty and the Beast\", \"Dakota Johnson\").\nHas_collaborator(\"Beauty and the Beast\", \"Jamie Dornan\").\nHas_collaborator(\"Beauty and the Beast\", \"Kim Basinger\").\nHas_collaborator(\"Beauty and the Beast\", \"Bella Heathcote\").\nHas_collaborator(\"Beauty and the Beast\", \"Luke Bracey\").\nHas_collaborator(\"Beauty and the Beast\", \"Rita Ora\").\nHas_collaborator(\"Beauty and the Beast\", \"Nick Jonas\").\nHas_collaborator(\"Beauty and the Beast\", \"John Legend\").\nHas_collaborator(\"Beauty and the Beast\", \"Ariana Grande\").\nHas_collaborator(\"Beauty and the Beast\", \"Celine Dion\").\nHas_collaborator(\"Beauty and the Beast\", \"Stevie Wonder\").\nHas_collaborator(\"Beauty and the Beast\", \"DJ Khaled\").\nHas"]}
{"id": 1465, "answer": false, "completion": ".decl Has_members(Organization:symbol, N_members:float)\nHas_members(\"Swiss Guard\", 140).\nHas_members(\"Marines\", 20000).\n.decl Answer()\nAnswer() :- Has_members(\"Swiss Guard\", n_members1), Has_members(\"Marines\", n_members2), n_members1 < n_members2.\n.output Answer", "completions": [".decl Has_members(Organization:symbol, N_members:float)\nHas_members(\"Swiss Guard\", 140).\nHas_members(\"Marines\", 20000).\n.decl Answer()\nAnswer() :- Has_members(\"Swiss Guard\", n_members1), Has_members(\"Marines\", n_members2), n_members1 < n_members2.\n.output Answer"]}
{"id": 1466, "answer": true, "completion": ".decl Has_footprints(Place:symbol, Present:symbol)\nHas_footprints(\"Mount Sharp\", \"absent\").\n.decl Answer()\nAnswer() :- Has_footprints(\"Mount Sharp\", \"absent\").\n.output Answer", "completions": [".decl Has_footprints(Place:symbol, Present:symbol)\nHas_footprints(\"Mount Sharp\", \"absent\").\n.decl Answer()\nAnswer() :- Has_footprints(\"Mount Sharp\", \"absent\").\n.output Answer"]}
{"id": 1467, "answer": true, "completion": ".decl Is_crucial(Person:symbol, Event:symbol)\nIs_crucial(\"Edward II\", \"Battle of Falkirk\").\n.decl Happens_after(Event1:symbol, Event2:symbol)\nHappens_after(\"Battle of Falkirk\", \"Battle of Bannockburn\").\n.decl Answer()\nAnswer() :- Is_crucial(\"Edward II\", event1), Happens_after(event1, \"Battle of Bannockburn\").\n.output Answer", "completions": [".decl Is_crucial(Person:symbol, Event:symbol)\nIs_crucial(\"Edward II\", \"Battle of Falkirk\").\n.decl Happens_after(Event1:symbol, Event2:symbol)\nHappens_after(\"Battle of Falkirk\", \"Battle of Bannockburn\").\n.decl Answer()\nAnswer() :- Is_crucial(\"Edward II\", event1), Happens_after(event1, \"Battle of Bannockburn\").\n.output Answer"]}
{"id": 1468, "answer": false, "completion": ".decl Paid_tribute(Emperor:symbol, Currency:symbol)\nPaid_tribute(\"Commodus\", \"Pound sterling\").\n.decl Answer()\nAnswer() :- Paid_tribute(\"Commodus\", \"Pound sterling\").\n.output Answer\n\n\n", "completions": [".decl Paid_tribute(Emperor:symbol, Currency:symbol)\nPaid_tribute(\"Commodus\", \"Pound sterling\").\n.decl Answer()\nAnswer() :- Paid_tribute(\"Commodus\", \"Pound sterling\").\n.output Answer\n\n\n"]}
{"id": 1469, "answer": true, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"spaghetti\", \"slick\").\n.decl Answer()\nAnswer() :- Has_property(\"spaghetti\", \"slick\").\n.output Answer", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"spaghetti\", \"slick\").\n.decl Answer()\nAnswer() :- Has_property(\"spaghetti\", \"slick\").\n.output Answer"]}
{"id": 1470, "answer": false, "completion": ".decl Lasted_n_years(Event:symbol, N_years:float)\nLasted_n_years(\"Carnation Revolution\", 0.5).\n.decl Lasted_n_years(Event:symbol, N_years:float)\nLasted_n_years(\"French Revolution\", 10).\n.decl Answer()\nAnswer() :- Lasted_n_years(\"Carnation Revolution\", n_years1), Lasted_n_years(\"French Revolution\", n_years2), n_years1 < n_years2.\n.output Answer", "completions": [".decl Lasted_n_years(Event:symbol, N_years:float)\nLasted_n_years(\"Carnation Revolution\", 0.5).\n.decl Lasted_n_years(Event:symbol, N_years:float)\nLasted_n_years(\"French Revolution\", 10).\n.decl Answer()\nAnswer() :- Lasted_n_years(\"Carnation Revolution\", n_years1), Lasted_n_years(\"French Revolution\", n_years2), n_years1 < n_years2.\n.output Answer"]}
{"id": 1471, "answer": false, "completion": ".decl Has_surface_temperature(Planet:symbol, Surface_temperature:float)\nHas_surface_temperature(\"Triton\", -235).\n.decl Has_surface_temperature(Planet:symbol, Surface_temperature:float)\nHas_surface_temperature(\"Earth\", 15).\n.decl Answer()\nAnswer() :- Has_surface_temperature(\"Triton\", surface_temperature1), Has_surface_temperature(\"Earth\", surface_temperature2), surface_temperature1 < surface_temperature2.\n.output Answer", "completions": [".decl Has_surface_temperature(Planet:symbol, Surface_temperature:float)\nHas_surface_temperature(\"Triton\", -235).\n.decl Has_surface_temperature(Planet:symbol, Surface_temperature:float)\nHas_surface_temperature(\"Earth\", 15).\n.decl Answer()\nAnswer() :- Has_surface_temperature(\"Triton\", surface_temperature1), Has_surface_temperature(\"Earth\", surface_temperature2), surface_temperature1 < surface_temperature2.\n.output Answer"]}
{"id": 1472, "answer": false, "completion": ".decl Location(Character:symbol, Place:symbol)\nLocation(\"Bugs Bunny\", \"Space Mountain\").\n.decl Answer()\nAnswer() :- Location(\"Bugs Bunny\", \"Space Mountain\").\n.output Answer", "completions": [".decl Location(Character:symbol, Place:symbol)\nLocation(\"Bugs Bunny\", \"Space Mountain\").\n.decl Answer()\nAnswer() :- Location(\"Bugs Bunny\", \"Space Mountain\").\n.output Answer"]}
{"id": 1473, "answer": false, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"September\", 30).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"brew beer\", 21).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"brew beer\", n_days1), Last_n_days(\"September\", n_days2), n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"September\", 30).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"brew beer\", 21).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"brew beer\", n_days1), Last_n_days(\"September\", n_days2), n_days1 <= n_days2.\n.output Answer"]}
{"id": 1474, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Department of Defense\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Department of Defense\", n_members), n_members = 1.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Department of Defense\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Department of Defense\", n_members), n_members = 1.\n.output Answer"]}
{"id": 1475, "answer": true, "completion": ".decl Has_ingredient(Candy_bar:symbol, Ingredient:symbol)\nHas_ingredient(\"Monoamine Oxidase\", \"chocolate\").\nHas_ingredient(\"Monoamine Oxidase\", \"caffeine\").\nHas_ingredient(\"Monoamine Oxidase\", \"nut\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Monoamine Oxidase\", \"chocolate\").\nAnswer() :- Has_ingredient(\"Monoamine Oxidase\", \"caffeine\").\n.output Answer", "completions": [".decl Has_ingredient(Candy_bar:symbol, Ingredient:symbol)\nHas_ingredient(\"Monoamine Oxidase\", \"chocolate\").\nHas_ingredient(\"Monoamine Oxidase\", \"caffeine\").\nHas_ingredient(\"Monoamine Oxidase\", \"nut\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"Monoamine Oxidase\", \"chocolate\").\nAnswer() :- Has_ingredient(\"Monoamine Oxidase\", \"caffeine\").\n.output Answer"]}
{"id": 1476, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Elizabeth I of England\", \"viscose fiber\").\n.decl Answer()\nAnswer() :- Owns(\"Elizabeth I of England\", \"viscose fiber\").\n.output Answer\n\n\n", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Elizabeth I of England\", \"viscose fiber\").\n.decl Answer()\nAnswer() :- Owns(\"Elizabeth I of England\", \"viscose fiber\").\n.output Answer\n\n\n"]}
{"id": 1477, "answer": false, "completion": ".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"dynamite\", 1867).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Middle Ages warfare\", 1000).\n.decl Answer()\nAnswer() :- Invented_in_year(\"dynamite\", year1), Last_n_years(\"Middle Ages warfare\", year2), year1 > year2.\n.output Answer", "completions": [".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"dynamite\", 1867).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Middle Ages warfare\", 1000).\n.decl Answer()\nAnswer() :- Invented_in_year(\"dynamite\", year1), Last_n_years(\"Middle Ages warfare\", year2), year1 > year2.\n.output Answer"]}
{"id": 1478, "answer": true, "completion": ".decl Has_name_origin(Object:symbol, Origin:symbol)\nHas_name_origin(\"Europa\", \"Greek mythology\").\nHas_name_origin(\"Amunet\", \"Egyptian mythology\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Europa\", origin1), Has_name_origin(\"Amunet\", origin2), origin1 = origin2.\n.output Answer", "completions": [".decl Has_name_origin(Object:symbol, Origin:symbol)\nHas_name_origin(\"Europa\", \"Greek mythology\").\nHas_name_origin(\"Amunet\", \"Egyptian mythology\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Europa\", origin1), Has_name_origin(\"Amunet\", origin2), origin1 = origin2.\n.output Answer"]}
{"id": 1479, "answer": false, "completion": ".decl Gives_birth_to(Animal_A:symbol, Animal_B:symbol)\nGives_birth_to(\"kangaroo\", \"joey\").\n.decl Incubates(Animal_A:symbol, Animal_B:symbol)\nIncubates(\"kangaroo\", \"joey\").\n.decl Answer()\nAnswer() :- Gives_birth_to(animal, \"joey\"), Incubates(animal, \"joey\").\n.output Answer", "completions": [".decl Gives_birth_to(Animal_A:symbol, Animal_B:symbol)\nGives_birth_to(\"kangaroo\", \"joey\").\n.decl Incubates(Animal_A:symbol, Animal_B:symbol)\nIncubates(\"kangaroo\", \"joey\").\n.decl Answer()\nAnswer() :- Gives_birth_to(animal, \"joey\"), Incubates(animal, \"joey\").\n.output Answer"]}
{"id": 1480, "answer": true, "completion": ".decl Lives_in_county(Person:symbol, County:symbol)\nLives_in_county(\"John Doe\", \"Los Angeles County\").\n.decl Believes_in_religion(Person:symbol, Religion:symbol)\nBelieves_in_religion(\"John Doe\", \"Jehovah Witnesses\").\n.decl Answer()\nAnswer() :- Lives_in_county(person, \"Los Angeles County\"), Believes_in_religion(person, \"Jehovah Witnesses\").\n.output Answer", "completions": [".decl Lives_in_county(Person:symbol, County:symbol)\nLives_in_county(\"John Doe\", \"Los Angeles County\").\n.decl Believes_in_religion(Person:symbol, Religion:symbol)\nBelieves_in_religion(\"John Doe\", \"Jehovah Witnesses\").\n.decl Answer()\nAnswer() :- Lives_in_county(person, \"Los Angeles County\"), Believes_in_religion(person, \"Jehovah Witnesses\").\n.output Answer"]}
{"id": 1481, "answer": false, "completion": ".decl Smokes(Person:symbol, Cigarette:symbol)\nSmokes(\"John\", \"Djarum\").\nSmokes(\"John\", \"Clove\").\n.decl Answer()\nAnswer() :- Smokes(person, \"Djarum\"), Smokes(person, \"Clove\").\n.output Answer", "completions": [".decl Smokes(Person:symbol, Cigarette:symbol)\nSmokes(\"John\", \"Djarum\").\nSmokes(\"John\", \"Clove\").\n.decl Answer()\nAnswer() :- Smokes(person, \"Djarum\"), Smokes(person, \"Clove\").\n.output Answer"]}
{"id": 1482, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Douglas fir\", 100).\n.decl Answer()\nAnswer() :- Has_height(\"Douglas fir\", height), height > 50.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Douglas fir\", 100).\n.decl Answer()\nAnswer() :- Has_height(\"Douglas fir\", height), height > 50.\n.output Answer"]}
{"id": 1483, "answer": false, "completion": ".decl Found_on(Animal:symbol, Location:symbol)\nFound_on(\"goat\", \"mountain\").\nFound_on(\"goat\", \"hill\").\nFound_on(\"goat\", \"plain\").\n.decl Answer()\nAnswer() :- Found_on(\"goat\", \"abyssal plain\").\n.output Answer\n\n", "completions": [".decl Found_on(Animal:symbol, Location:symbol)\nFound_on(\"goat\", \"mountain\").\nFound_on(\"goat\", \"hill\").\nFound_on(\"goat\", \"plain\").\n.decl Answer()\nAnswer() :- Found_on(\"goat\", \"abyssal plain\").\n.output Answer\n\n"]}
{"id": 1484, "answer": false, "completion": ".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"penguin\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"penguin\", \"Miami\").\n.output Answer", "completions": [".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"penguin\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"penguin\", \"Miami\").\n.output Answer"]}
{"id": 1485, "answer": false, "completion": ".decl Is_student_of(Person:symbol, Person2:symbol)\nIs_student_of(\"Al-Farabi\", \"Great Sheikh\").\n.decl Answer()\nAnswer() :- Is_student_of(\"Al-Farabi\", \"Great Sheikh\").\n.output Answer\n\n", "completions": [".decl Is_student_of(Person:symbol, Person2:symbol)\nIs_student_of(\"Al-Farabi\", \"Great Sheikh\").\n.decl Answer()\nAnswer() :- Is_student_of(\"Al-Farabi\", \"Great Sheikh\").\n.output Answer\n\n"]}
{"id": 1486, "answer": true, "completion": ".decl Ruled(Person:symbol, Place:symbol)\nRuled(\"Richard III\", \"England\").\n.decl Answer()\nAnswer() :- Ruled(\"Richard III\", \"Adelaide\").\n.output Answer", "completions": [".decl Ruled(Person:symbol, Place:symbol)\nRuled(\"Richard III\", \"England\").\n.decl Answer()\nAnswer() :- Ruled(\"Richard III\", \"Adelaide\").\n.output Answer"]}
{"id": 1487, "answer": true, "completion": ".decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"Ronda Rousey\", \"BBQ\").\n.decl Answer()\nAnswer() :- Avoids(\"Ronda Rousey\", \"BBQ\").\n.output Answer\n\n", "completions": [".decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"Ronda Rousey\", \"BBQ\").\n.decl Answer()\nAnswer() :- Avoids(\"Ronda Rousey\", \"BBQ\").\n.output Answer\n\n"]}
{"id": 1488, "answer": true, "completion": ".decl Loves(Person:symbol, Food:symbol)\nLoves(\"Kylee Jenner\", \"coffee\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"coffee\", \"cream\").\n.decl Answer()\nAnswer() :- Loves(\"Kylee Jenner\", \"coffee\"), !Has_ingredient(\"coffee\", \"cream\").\n.output Answer", "completions": [".decl Loves(Person:symbol, Food:symbol)\nLoves(\"Kylee Jenner\", \"coffee\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"coffee\", \"cream\").\n.decl Answer()\nAnswer() :- Loves(\"Kylee Jenner\", \"coffee\"), !Has_ingredient(\"coffee\", \"cream\").\n.output Answer"]}
{"id": 1489, "answer": false, "completion": ".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"electric car\", 120).\n.decl Is_longer_than(Race:symbol, Length:float)\nIs_longer_than(\"Daytona 500\", 500).\n.decl Answer()\nAnswer() :- Has_top_speed(\"electric car\", top_speed), Is_longer_than(\"Daytona 500\", length), top_speed < length.\n.output Answer", "completions": [".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"electric car\", 120).\n.decl Is_longer_than(Race:symbol, Length:float)\nIs_longer_than(\"Daytona 500\", 500).\n.decl Answer()\nAnswer() :- Has_top_speed(\"electric car\", top_speed), Is_longer_than(\"Daytona 500\", length), top_speed < length.\n.output Answer"]}
{"id": 1490, "answer": true, "completion": ".decl Fed_on(Animal:symbol, Food:symbol)\nFed_on(\"cow\", \"grass\").\n.decl Tastes_like(Meat:symbol, Food:symbol)\nTastes_like(\"cow meat\", \"grass\").\nTastes_like(\"wild game\", \"grass\").\n.decl Answer()\nAnswer() :- Fed_on(\"cow\", \"grass\"), Tastes_like(\"cow meat\", \"grass\"), Tastes_like(\"wild game\", \"grass\").\n.output Answer", "completions": [".decl Fed_on(Animal:symbol, Food:symbol)\nFed_on(\"cow\", \"grass\").\n.decl Tastes_like(Meat:symbol, Food:symbol)\nTastes_like(\"cow meat\", \"grass\").\nTastes_like(\"wild game\", \"grass\").\n.decl Answer()\nAnswer() :- Fed_on(\"cow\", \"grass\"), Tastes_like(\"cow meat\", \"grass\"), Tastes_like(\"wild game\", \"grass\").\n.output Answer"]}
{"id": 1491, "answer": false, "completion": ".decl Has_n_compositions(Person:symbol, N_compositions:float)\nHas_n_compositions(\"Wolfgang Amadeus Mozart\", 626).\n.decl Has_n_soldiers(Army:symbol, N_soldiers:float)\nHas_n_soldiers(\"King Leonidas\", 300).\n.decl Answer()\nAnswer() :- Has_n_compositions(\"Wolfgang Amadeus Mozart\", n_compositions), Has_n_soldiers(\"King Leonidas\", n_soldiers), n_compositions >= n_soldiers.\n.output Answer", "completions": [".decl Has_n_compositions(Person:symbol, N_compositions:float)\nHas_n_compositions(\"Wolfgang Amadeus Mozart\", 626).\n.decl Has_n_soldiers(Army:symbol, N_soldiers:float)\nHas_n_soldiers(\"King Leonidas\", 300).\n.decl Answer()\nAnswer() :- Has_n_compositions(\"Wolfgang Amadeus Mozart\", n_compositions), Has_n_soldiers(\"King Leonidas\", n_soldiers), n_compositions >= n_soldiers.\n.output Answer"]}
{"id": 1492, "answer": true, "completion": ".decl Is_of_age(Person:symbol, Age:float)\nIs_of_age(\"Christopher Walken\", 68).\n.decl Enlistment_age(Branch:symbol, Age:float)\nEnlistment_age(\"United States Marine Corps\", 17).\n.decl Answer()\nAnswer() :- Is_of_age(\"Christopher Walken\", age1), Enlistment_age(\"United States Marine Corps\", age2), age1 >= age2.\n.output Answer", "completions": [".decl Is_of_age(Person:symbol, Age:float)\nIs_of_age(\"Christopher Walken\", 68).\n.decl Enlistment_age(Branch:symbol, Age:float)\nEnlistment_age(\"United States Marine Corps\", 17).\n.decl Answer()\nAnswer() :- Is_of_age(\"Christopher Walken\", age1), Enlistment_age(\"United States Marine Corps\", age2), age1 >= age2.\n.output Answer"]}
{"id": 1493, "answer": true, "completion": ".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"colitis\", \"diarrhea\").\n.decl Triggers(Food:symbol, Symptom:symbol)\nTriggers(\"kola nuts\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Causes(disease, symptom), Triggers(food, symptom).\n.output Answer", "completions": [".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"colitis\", \"diarrhea\").\n.decl Triggers(Food:symbol, Symptom:symbol)\nTriggers(\"kola nuts\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Causes(disease, symptom), Triggers(food, symptom).\n.output Answer"]}
{"id": 1494, "answer": true, "completion": ".decl Has_fake_news(Person:symbol)\nHas_fake_news(\"Jamie Lee Curtis\").\n.decl Answer()\nAnswer() :- Has_fake_news(\"Jamie Lee Curtis\").\n.output Answer", "completions": [".decl Has_fake_news(Person:symbol)\nHas_fake_news(\"Jamie Lee Curtis\").\n.decl Answer()\nAnswer() :- Has_fake_news(\"Jamie Lee Curtis\").\n.output Answer"]}
{"id": 1495, "answer": false, "completion": ".decl Has_release_date(Game:symbol, Release_date:float)\nHas_release_date(\"Final Fantasy VI\", 1994).\nHas_release_date(\"Final Fantasy VII\", 1997).\nHas_release_date(\"Final Fantasy VIII\", 1999).\nHas_release_date(\"Final Fantasy IX\", 2000).\nHas_release_date(\"Final Fantasy X\", 2001).\nHas_release_date(\"Final Fantasy XI\", 2002).\nHas_release_date(\"Final Fantasy XII\", 2006).\nHas_release_date(\"Final Fantasy XIII\", 2010).\nHas_release_date(\"Final Fantasy XIV\", 2010).\nHas_release_date(\"Final Fantasy XV\", 2016).\n.decl Answer()\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy VII\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy VIII\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy IX\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy X\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy XI\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy XII\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy XIII\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy XIV\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy XV\", release_date2), release_date1 < release_date2.\n.output Answer", "completions": [".decl Has_release_date(Game:symbol, Release_date:float)\nHas_release_date(\"Final Fantasy VI\", 1994).\nHas_release_date(\"Final Fantasy VII\", 1997).\nHas_release_date(\"Final Fantasy VIII\", 1999).\nHas_release_date(\"Final Fantasy IX\", 2000).\nHas_release_date(\"Final Fantasy X\", 2001).\nHas_release_date(\"Final Fantasy XI\", 2002).\nHas_release_date(\"Final Fantasy XII\", 2006).\nHas_release_date(\"Final Fantasy XIII\", 2010).\nHas_release_date(\"Final Fantasy XIV\", 2010).\nHas_release_date(\"Final Fantasy XV\", 2016).\n.decl Answer()\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy VII\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy VIII\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy IX\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy X\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy XI\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy XII\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy XIII\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy XIV\", release_date2), release_date1 < release_date2.\nAnswer() :- Has_release_date(\"Final Fantasy VI\", release_date1), Has_release_date(\"Final Fantasy XV\", release_date2), release_date1 < release_date2.\n.output Answer"]}
{"id": 1496, "answer": true, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"spinal cord\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"spinal cord\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"spinal cord\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"spinal cord\").\n.output Answer"]}
{"id": 1497, "answer": true, "completion": ".decl Holds(Event:symbol, Location:symbol)\nHolds(\"MLB World Series\", \"New York City\").\n.decl Answer()\nAnswer() :- Holds(\"MLB World Series\", \"Newcastle, New South Wales\").\n.output Answer", "completions": [".decl Holds(Event:symbol, Location:symbol)\nHolds(\"MLB World Series\", \"New York City\").\n.decl Answer()\nAnswer() :- Holds(\"MLB World Series\", \"Newcastle, New South Wales\").\n.output Answer"]}
{"id": 1498, "answer": true, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Rhode Island\", 1.3).\nHas_area(\"Bohai Sea\", 78.7).\n.decl Answer()\nAnswer() :- Has_area(\"Rhode Island\", area1), Has_area(\"Bohai Sea\", area2), area1 < area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Rhode Island\", 1.3).\nHas_area(\"Bohai Sea\", 78.7).\n.decl Answer()\nAnswer() :- Has_area(\"Rhode Island\", area1), Has_area(\"Bohai Sea\", area2), area1 < area2.\n.output Answer"]}
{"id": 1499, "answer": false, "completion": ".decl Has_influence(Thing:symbol, Genre:symbol)\nHas_influence(\"cannabis\", \"rap music\").\n.decl Answer()\nAnswer() :- Has_influence(\"cannabis\", \"rap music\").\n.output Answer", "completions": [".decl Has_influence(Thing:symbol, Genre:symbol)\nHas_influence(\"cannabis\", \"rap music\").\n.decl Answer()\nAnswer() :- Has_influence(\"cannabis\", \"rap music\").\n.output Answer"]}
{"id": 1500, "answer": true, "completion": ".decl Uses(Game:symbol, Number:float)\nUses(\"table tennis\", 2).\nUses(\"table tennis\", 3).\nUses(\"table tennis\", 5).\nUses(\"table tennis\", 7).\nUses(\"table tennis\", 11).\nUses(\"table tennis\", 13).\nUses(\"table tennis\", 17).\nUses(\"table tennis\", 19).\nUses(\"table tennis\", 23).\nUses(\"table tennis\", 29).\nUses(\"table tennis\", 31).\nUses(\"table tennis\", 37).\nUses(\"table tennis\", 41).\nUses(\"table tennis\", 43).\nUses(\"table tennis\", 47).\nUses(\"table tennis\", 53).\nUses(\"table tennis\", 59).\nUses(\"table tennis\", 61).\nUses(\"table tennis\", 67).\nUses(\"table tennis\", 71).\nUses(\"table tennis\", 73).\nUses(\"table tennis\", 79).\nUses(\"table tennis\", 83).\nUses(\"table tennis\", 89).\nUses(\"table tennis\", 97).\n.decl Answer()\nAnswer() :- Uses(\"table tennis\", number), number > 1, number < 100, number % 2 != 0, number % 3 != 0, number % 5 != 0, number % 7 != 0, number % 11 != 0, number % 13 != 0, number % 17 != 0, number % 19 != 0, number % 23 != 0, number % 29 != 0, number % 31 != 0, number % 37 != 0, number % 41 != 0, number % 43 != 0, number % 47 != 0, number % 53 != 0, number % 59 != 0, number % 61 != 0, number % 67 != 0, number % 71 != 0, number % 73 != 0, number % 79 != 0, number % 83 != 0, number % 89 != 0, number % 97 != 0.\n.output Answer", "completions": [".decl Uses(Game:symbol, Number:float)\nUses(\"table tennis\", 2).\nUses(\"table tennis\", 3).\nUses(\"table tennis\", 5).\nUses(\"table tennis\", 7).\nUses(\"table tennis\", 11).\nUses(\"table tennis\", 13).\nUses(\"table tennis\", 17).\nUses(\"table tennis\", 19).\nUses(\"table tennis\", 23).\nUses(\"table tennis\", 29).\nUses(\"table tennis\", 31).\nUses(\"table tennis\", 37).\nUses(\"table tennis\", 41).\nUses(\"table tennis\", 43).\nUses(\"table tennis\", 47).\nUses(\"table tennis\", 53).\nUses(\"table tennis\", 59).\nUses(\"table tennis\", 61).\nUses(\"table tennis\", 67).\nUses(\"table tennis\", 71).\nUses(\"table tennis\", 73).\nUses(\"table tennis\", 79).\nUses(\"table tennis\", 83).\nUses(\"table tennis\", 89).\nUses(\"table tennis\", 97).\n.decl Answer()\nAnswer() :- Uses(\"table tennis\", number), number > 1, number < 100, number % 2 != 0, number % 3 != 0, number % 5 != 0, number % 7 != 0, number % 11 != 0, number % 13 != 0, number % 17 != 0, number % 19 != 0, number % 23 != 0, number % 29 != 0, number % 31 != 0, number % 37 != 0, number % 41 != 0, number % 43 != 0, number % 47 != 0, number % 53 != 0, number % 59 != 0, number % 61 != 0, number % 67 != 0, number % 71 != 0, number % 73 != 0, number % 79 != 0, number % 83 != 0, number % 89 != 0, number % 97 != 0.\n.output Answer"]}
{"id": 1501, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Marlboro package\", \"red\").\nHas_color(\"Marlboro package\", \"white\").\nHas_color(\"French flag\", \"blue\").\nHas_color(\"French flag\", \"white\").\nHas_color(\"French flag\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"Marlboro package\", color1), Has_color(\"French flag\", color2), color1 = color2.\nAnswer() :- Has_color(\"Marlboro package\", color1), Has_color(\"French flag\", color2), color1 != color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Marlboro package\", \"red\").\nHas_color(\"Marlboro package\", \"white\").\nHas_color(\"French flag\", \"blue\").\nHas_color(\"French flag\", \"white\").\nHas_color(\"French flag\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"Marlboro package\", color1), Has_color(\"French flag\", color2), color1 = color2.\nAnswer() :- Has_color(\"Marlboro package\", color1), Has_color(\"French flag\", color2), color1 != color2.\n.output Answer"]}
{"id": 1502, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Jesus\", \"Hebrew\").\nSpeaks(\"Jesus\", \"Aramaic\").\nSpeaks(\"Jesus\", \"Latin\").\nSpeaks(\"Jesus\", \"Greek\").\n.decl Answer()\nAnswer() :- Speaks(\"Jesus\", language), language != \"Estonian\".\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Jesus\", \"Hebrew\").\nSpeaks(\"Jesus\", \"Aramaic\").\nSpeaks(\"Jesus\", \"Latin\").\nSpeaks(\"Jesus\", \"Greek\").\n.decl Answer()\nAnswer() :- Speaks(\"Jesus\", language), language != \"Estonian\".\n.output Answer"]}
{"id": 1503, "answer": true, "completion": ".decl Attends(Person:symbol, School:symbol)\nAttends(\"Jesus\", \"Bethlehem\").\n.decl Teaches(School:symbol, Subject:symbol)\nTeaches(\"Bethlehem\", \"religion\").\nTeaches(\"Bethlehem\", \"philosophy\").\nTeaches(\"Bethlehem\", \"history\").\nTeaches(\"Bethlehem\", \"literature\").\nTeaches(\"Bethlehem\", \"mathematics\").\nTeaches(\"Bethlehem\", \"science\").\nTeaches(\"Bethlehem\", \"art\").\nTeaches(\"Bethlehem\", \"music\").\nTeaches(\"Bethlehem\", \"drama\").\nTeaches(\"Bethlehem\", \"geography\").\nTeaches(\"Bethlehem\", \"social studies\").\nTeaches(\"Bethlehem\", \"computer science\").\nTeaches(\"Bethlehem\", \"physical education\").\nTeaches(\"Bethlehem\", \"health\").\nTeaches(\"Bethlehem\", \"home economics\").\nTeaches(\"Bethlehem\", \"industrial arts\").\nTeaches(\"Bethlehem\", \"language\").\nTeaches(\"Bethlehem\", \"trades and industry\").\nTeaches(\"Bethlehem\", \"transportation\").\nTeaches(\"Bethlehem\", \"military science\").\nTeaches(\"Bethlehem\", \"agriculture\").\nTeaches(\"Bethlehem\", \"architecture\").\nTeaches(\"Bethlehem\", \"communications\").\nTeaches(\"Bethlehem\", \"communications technology\").\nTeaches(\"Bethlehem\", \"construction trades\").\nTeaches(\"Bethlehem\", \"culinary arts\").\nTeaches(\"Bethlehem\", \"digital media/multimedia\").\nTeaches(\"Bethlehem\", \"engineering\").\nTeaches(\"Bethlehem\", \"engineering technology\").\nTeaches(\"Bethlehem\", \"family and consumer sciences\").\nTeaches(\"Bethlehem\", \"finance\").\nTeaches(\"Bethlehem\", \"hospitality management\").\nTeaches(\"Bethlehem\", \"information technology\").\nTeaches(\"Bethlehem\", \"law\").\nTeaches(\"Bethlehem\", \"manufacturing\").\nTeaches(\"Bethlehem\", \"marketing\").\nTeaches(\"Bethlehem\", \"materials science\").\nTeaches(\"Bethlehem\", \"mechanics and repairs\").\nTeaches(\"Bethlehem\", \"personal services\").\nTeaches(\"Bethlehem\", \"precision production\").\nTeaches(\"Bethlehem\", \"programming\").\nTeaches(\"Bethlehem\", \"public administration\").\nTeaches(\"Bethlehem\", \"sales\").\nTeaches(\"Bethlehem\", \"therapeutic services\").\nTeaches(\"Bethlehem\", \"transportation and materials moving\").\n.decl Answer()\nAnswer() :- Attends(\"Jesus\", \"Bethlehem\"), Teaches(\"Bethlehem\", \"railroad engineering\").\n.output Answer", "completions": [".decl Attends(Person:symbol, School:symbol)\nAttends(\"Jesus\", \"Bethlehem\").\n.decl Teaches(School:symbol, Subject:symbol)\nTeaches(\"Bethlehem\", \"religion\").\nTeaches(\"Bethlehem\", \"philosophy\").\nTeaches(\"Bethlehem\", \"history\").\nTeaches(\"Bethlehem\", \"literature\").\nTeaches(\"Bethlehem\", \"mathematics\").\nTeaches(\"Bethlehem\", \"science\").\nTeaches(\"Bethlehem\", \"art\").\nTeaches(\"Bethlehem\", \"music\").\nTeaches(\"Bethlehem\", \"drama\").\nTeaches(\"Bethlehem\", \"geography\").\nTeaches(\"Bethlehem\", \"social studies\").\nTeaches(\"Bethlehem\", \"computer science\").\nTeaches(\"Bethlehem\", \"physical education\").\nTeaches(\"Bethlehem\", \"health\").\nTeaches(\"Bethlehem\", \"home economics\").\nTeaches(\"Bethlehem\", \"industrial arts\").\nTeaches(\"Bethlehem\", \"language\").\nTeaches(\"Bethlehem\", \"trades and industry\").\nTeaches(\"Bethlehem\", \"transportation\").\nTeaches(\"Bethlehem\", \"military science\").\nTeaches(\"Bethlehem\", \"agriculture\").\nTeaches(\"Bethlehem\", \"architecture\").\nTeaches(\"Bethlehem\", \"communications\").\nTeaches(\"Bethlehem\", \"communications technology\").\nTeaches(\"Bethlehem\", \"construction trades\").\nTeaches(\"Bethlehem\", \"culinary arts\").\nTeaches(\"Bethlehem\", \"digital media/multimedia\").\nTeaches(\"Bethlehem\", \"engineering\").\nTeaches(\"Bethlehem\", \"engineering technology\").\nTeaches(\"Bethlehem\", \"family and consumer sciences\").\nTeaches(\"Bethlehem\", \"finance\").\nTeaches(\"Bethlehem\", \"hospitality management\").\nTeaches(\"Bethlehem\", \"information technology\").\nTeaches(\"Bethlehem\", \"law\").\nTeaches(\"Bethlehem\", \"manufacturing\").\nTeaches(\"Bethlehem\", \"marketing\").\nTeaches(\"Bethlehem\", \"materials science\").\nTeaches(\"Bethlehem\", \"mechanics and repairs\").\nTeaches(\"Bethlehem\", \"personal services\").\nTeaches(\"Bethlehem\", \"precision production\").\nTeaches(\"Bethlehem\", \"programming\").\nTeaches(\"Bethlehem\", \"public administration\").\nTeaches(\"Bethlehem\", \"sales\").\nTeaches(\"Bethlehem\", \"therapeutic services\").\nTeaches(\"Bethlehem\", \"transportation and materials moving\").\n.decl Answer()\nAnswer() :- Attends(\"Jesus\", \"Bethlehem\"), Teaches(\"Bethlehem\", \"railroad engineering\").\n.output Answer"]}
{"id": 1504, "answer": true, "completion": ".decl Has_text(Document:symbol, Text:symbol)\nHas_text(\"Constitution of the Philippines\", \"The Constitution of the United Kingdom\").\n.decl Answer()\nAnswer() :- Has_text(\"Constitution of the Philippines\", \"The Constitution of the United Kingdom\").\n.output Answer", "completions": [".decl Has_text(Document:symbol, Text:symbol)\nHas_text(\"Constitution of the Philippines\", \"The Constitution of the United Kingdom\").\n.decl Answer()\nAnswer() :- Has_text(\"Constitution of the Philippines\", \"The Constitution of the United Kingdom\").\n.output Answer"]}
{"id": 1505, "answer": true, "completion": ".decl Famous(Person:symbol)\nFamous(\"Apollo\").\nFamous(\"D'Artagnan\").\n.decl Defeats(Person_A:symbol, Person_B:symbol)\nDefeats(\"Apollo\", \"D'Artagnan\").\n.decl Answer()\nAnswer() :- Famous(person1), Famous(person2), Defeats(person1, person2).\n.output Answer", "completions": [".decl Famous(Person:symbol)\nFamous(\"Apollo\").\nFamous(\"D'Artagnan\").\n.decl Defeats(Person_A:symbol, Person_B:symbol)\nDefeats(\"Apollo\", \"D'Artagnan\").\n.decl Answer()\nAnswer() :- Famous(person1), Famous(person2), Defeats(person1, person2).\n.output Answer"]}
{"id": 1506, "answer": true, "completion": ".decl Studies(Person:symbol, Item:symbol)\nStudies(\"lapidary\", \"gemstones\").\nStudies(\"geologist\", \"gemstones\").\n.decl Answer()\nAnswer() :- Studies(\"lapidary\", item), Studies(\"geologist\", item).\n.output Answer\n\n", "completions": [".decl Studies(Person:symbol, Item:symbol)\nStudies(\"lapidary\", \"gemstones\").\nStudies(\"geologist\", \"gemstones\").\n.decl Answer()\nAnswer() :- Studies(\"lapidary\", item), Studies(\"geologist\", item).\n.output Answer\n\n"]}
{"id": 1507, "answer": false, "completion": ".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Asian black bear\", \"black\").\nHas_color(\"Asian black bear\", \"brown\").\n.decl Answer()\nAnswer() :- Has_color(\"Asian black bear\", color1), Has_color(\"Asian black bear\", color2), color1 != color2.\n.output Answer", "completions": [".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Asian black bear\", \"black\").\nHas_color(\"Asian black bear\", \"brown\").\n.decl Answer()\nAnswer() :- Has_color(\"Asian black bear\", color1), Has_color(\"Asian black bear\", color2), color1 != color2.\n.output Answer"]}
{"id": 1508, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"sea turtle\", \"ocean\").\n.decl Happens_in(Event:symbol, Place:symbol)\nHappens_in(\"quarantine\", \"house\").\n.decl Answer()\nAnswer() :- Lives_in(\"sea turtle\", place1), Happens_in(\"quarantine\", place2), place1 != place2.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"sea turtle\", \"ocean\").\n.decl Happens_in(Event:symbol, Place:symbol)\nHappens_in(\"quarantine\", \"house\").\n.decl Answer()\nAnswer() :- Lives_in(\"sea turtle\", place1), Happens_in(\"quarantine\", place2), place1 != place2.\n.output Answer"]}
{"id": 1509, "answer": false, "completion": ".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Edward Snowden\", 140).\n.decl Answer()\nAnswer() :- Has_IQ(\"Edward Snowden\", iq), iq >= 98.\n.output Answer", "completions": [".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Edward Snowden\", 140).\n.decl Answer()\nAnswer() :- Has_IQ(\"Edward Snowden\", iq), iq >= 98.\n.output Answer"]}
{"id": 1510, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Leila George\", 1.6).\n.decl Answer()\nAnswer() :- Has_height(\"Leila George\", height), height < 1.8.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Leila George\", 1.6).\n.decl Answer()\nAnswer() :- Has_height(\"Leila George\", height), height < 1.8.\n.output Answer"]}
{"id": 1511, "answer": false, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"modern central processing unit circuit chip\", 0.01).\nHas_area(\"housekey\", 0.01).\n.decl Answer()\nAnswer() :- Has_area(\"modern central processing unit circuit chip\", area1), Has_area(\"housekey\", area2), area1 <= area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"modern central processing unit circuit chip\", 0.01).\nHas_area(\"housekey\", 0.01).\n.decl Answer()\nAnswer() :- Has_area(\"modern central processing unit circuit chip\", area1), Has_area(\"housekey\", area2), area1 <= area2.\n.output Answer"]}
{"id": 1512, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Sting\", \"musician\").\nHas_job(\"Andy Summers\", \"musician\").\nHas_job(\"Stewart Copeland\", \"musician\").\nHas_job(\"police officer\", \"law enforcement\").\n.decl Answer()\nAnswer() :- Has_job(\"Sting\", \"police officer\").\nAnswer() :- Has_job(\"Andy Summers\", \"police officer\").\nAnswer() :- Has_job(\"Stewart Copeland\", \"police officer\").\n.output Answer", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"Sting\", \"musician\").\nHas_job(\"Andy Summers\", \"musician\").\nHas_job(\"Stewart Copeland\", \"musician\").\nHas_job(\"police officer\", \"law enforcement\").\n.decl Answer()\nAnswer() :- Has_job(\"Sting\", \"police officer\").\nAnswer() :- Has_job(\"Andy Summers\", \"police officer\").\nAnswer() :- Has_job(\"Stewart Copeland\", \"police officer\").\n.output Answer"]}
{"id": 1513, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"Christmas\", \"winter\").\nHappens_in_season(\"New Year's Day\", \"winter\").\nHappens_in_season(\"Martin Luther King Jr. Day\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"Christmas\", \"winter\").\nAnswer() :- Happens_in_season(\"New Year's Day\", \"winter\").\nAnswer() :- Happens_in_season(\"Martin Luther King Jr. Day\", \"winter\").\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"Christmas\", \"winter\").\nHappens_in_season(\"New Year's Day\", \"winter\").\nHappens_in_season(\"Martin Luther King Jr. Day\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"Christmas\", \"winter\").\nAnswer() :- Happens_in_season(\"New Year's Day\", \"winter\").\nAnswer() :- Happens_in_season(\"Martin Luther King Jr. Day\", \"winter\").\n.output Answer"]}
{"id": 1514, "answer": false, "completion": ".decl Largest_city(State:symbol, City:symbol)\nLargest_city(\"New Mexico\", \"Albuquerque\").\n.decl Also_known_as(City:symbol, Name:symbol)\nAlso_known_as(\"Albuquerque\", \"Yootó\").\n.decl Answer()\nAnswer() :- Largest_city(\"New Mexico\", \"Albuquerque\"), Also_known_as(\"Albuquerque\", \"Yootó\").\n.output Answer", "completions": [".decl Largest_city(State:symbol, City:symbol)\nLargest_city(\"New Mexico\", \"Albuquerque\").\n.decl Also_known_as(City:symbol, Name:symbol)\nAlso_known_as(\"Albuquerque\", \"Yootó\").\n.decl Answer()\nAnswer() :- Largest_city(\"New Mexico\", \"Albuquerque\"), Also_known_as(\"Albuquerque\", \"Yootó\").\n.output Answer"]}
{"id": 1515, "answer": false, "completion": ".decl Depicted_in(Animal:symbol, Comic:symbol)\nDepicted_in(\"sable\", \"Marvel comics\").\n.decl Is_anthropomorphic(Animal:symbol)\nIs_anthropomorphic(\"sable\").\n.decl Answer()\nAnswer() :- Depicted_in(\"sable\", \"Marvel comics\"), Is_anthropomorphic(\"sable\").\n.output Answer", "completions": [".decl Depicted_in(Animal:symbol, Comic:symbol)\nDepicted_in(\"sable\", \"Marvel comics\").\n.decl Is_anthropomorphic(Animal:symbol)\nIs_anthropomorphic(\"sable\").\n.decl Answer()\nAnswer() :- Depicted_in(\"sable\", \"Marvel comics\"), Is_anthropomorphic(\"sable\").\n.output Answer"]}
{"id": 1516, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"sesame seed\", \"black\").\nHas_color(\"wood frog egg\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"sesame seed\", color1), Has_color(\"wood frog egg\", color2), color1 = color2.\n.output Answer\n\n", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"sesame seed\", \"black\").\nHas_color(\"wood frog egg\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"sesame seed\", color1), Has_color(\"wood frog egg\", color2), color1 = color2.\n.output Answer\n\n"]}
{"id": 1517, "answer": false, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"plum tree in bloom\", \"April\").\nHappens_in_month(\"plum tree in bloom\", \"May\").\nHappens_in_month(\"plum tree in bloom\", \"June\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"plum tree in bloom\", month), month != \"November\".\n.output Answer", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"plum tree in bloom\", \"April\").\nHappens_in_month(\"plum tree in bloom\", \"May\").\nHappens_in_month(\"plum tree in bloom\", \"June\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"plum tree in bloom\", month), month != \"November\".\n.output Answer"]}
{"id": 1518, "answer": false, "completion": ".decl Bites(Animal_A:symbol, Animal_B:symbol)\nBites(\"bull shark\", \"human\").\nBites(\"crocodile\", \"human\").\n.decl Answer()\nAnswer() :- Bites(\"bull shark\", \"human\"), Bites(\"crocodile\", \"human\").\n.output Answer", "completions": [".decl Bites(Animal_A:symbol, Animal_B:symbol)\nBites(\"bull shark\", \"human\").\nBites(\"crocodile\", \"human\").\n.decl Answer()\nAnswer() :- Bites(\"bull shark\", \"human\"), Bites(\"crocodile\", \"human\").\n.output Answer"]}
{"id": 1519, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Mexican Revolution\", 10).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Barron Trump's birth\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Barron Trump's birth\", n_years1), Last_n_years(\"Mexican Revolution\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Mexican Revolution\", 10).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Barron Trump's birth\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Barron Trump's birth\", n_years1), Last_n_years(\"Mexican Revolution\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1520, "answer": true, "completion": ".decl Has_average_temperature(State:symbol, Temperature:float)\nHas_average_temperature(\"New York\", -1).\nHas_average_temperature(\"Florida\", 20).\n.decl Answer()\nAnswer() :- Has_average_temperature(\"New York\", temperature1), Has_average_temperature(\"Florida\", temperature2), temperature1 < temperature2.\n.output Answer", "completions": [".decl Has_average_temperature(State:symbol, Temperature:float)\nHas_average_temperature(\"New York\", -1).\nHas_average_temperature(\"Florida\", 20).\n.decl Answer()\nAnswer() :- Has_average_temperature(\"New York\", temperature1), Has_average_temperature(\"Florida\", temperature2), temperature1 < temperature2.\n.output Answer"]}
{"id": 1521, "answer": false, "completion": ".decl Has_danger(Event:symbol, Danger:symbol)\nHas_danger(\"walking to the Very Large Telescope\", \"no\").\n.decl Answer()\nAnswer() :- Has_danger(\"walking to the Very Large Telescope\", danger), danger != \"no\".\n.output Answer", "completions": [".decl Has_danger(Event:symbol, Danger:symbol)\nHas_danger(\"walking to the Very Large Telescope\", \"no\").\n.decl Answer()\nAnswer() :- Has_danger(\"walking to the Very Large Telescope\", danger), danger != \"no\".\n.output Answer"]}
{"id": 1522, "answer": false, "completion": ".decl Has_organs(Organism:symbol, Organs:symbol)\nHas_organs(\"carrot\", \"root\").\n.decl Answer()\nAnswer() :- Has_organs(\"carrot\", organs), organs != \"heart\".\n.output Answer", "completions": [".decl Has_organs(Organism:symbol, Organs:symbol)\nHas_organs(\"carrot\", \"root\").\n.decl Answer()\nAnswer() :- Has_organs(\"carrot\", organs), organs != \"heart\".\n.output Answer"]}
{"id": 1523, "answer": true, "completion": ".decl Has_iteration(Person:symbol, Iteration:float)\nHas_iteration(\"Pope Leo\", 847).\nHas_iteration(\"Ivan the Terrible\", 1).\n.decl Answer()\nAnswer() :- Has_iteration(\"Pope Leo\", iteration1), Has_iteration(\"Ivan the Terrible\", iteration2), iteration1 = iteration2.\n.output Answer", "completions": [".decl Has_iteration(Person:symbol, Iteration:float)\nHas_iteration(\"Pope Leo\", 847).\nHas_iteration(\"Ivan the Terrible\", 1).\n.decl Answer()\nAnswer() :- Has_iteration(\"Pope Leo\", iteration1), Has_iteration(\"Ivan the Terrible\", iteration2), iteration1 = iteration2.\n.output Answer"]}
{"id": 1524, "answer": true, "completion": ".decl Fought_for(Mercenary:symbol, Country:symbol)\nFought_for(\"mercenary\", \"England\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Glorious Revolution\", 1688).\n.decl Answer()\nAnswer() :- Fought_for(\"mercenary\", \"England\"), Happens_in_year(\"Glorious Revolution\", 1688).\n.output Answer", "completions": [".decl Fought_for(Mercenary:symbol, Country:symbol)\nFought_for(\"mercenary\", \"England\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Glorious Revolution\", 1688).\n.decl Answer()\nAnswer() :- Fought_for(\"mercenary\", \"England\"), Happens_in_year(\"Glorious Revolution\", 1688).\n.output Answer"]}
{"id": 1525, "answer": false, "completion": ".decl Involved_in(Company:symbol, Event:symbol)\nInvolved_in(\"NASA\", \"lunar landing\").\n.decl Answer()\nAnswer() :- Involved_in(\"NASA\", \"lunar landing\").\n.output Answer", "completions": [".decl Involved_in(Company:symbol, Event:symbol)\nInvolved_in(\"NASA\", \"lunar landing\").\n.decl Answer()\nAnswer() :- Involved_in(\"NASA\", \"lunar landing\").\n.output Answer"]}
{"id": 1526, "answer": true, "completion": ".decl Has_birthday(Person:symbol, Month:symbol, Day:float)\nHas_birthday(\"Dean Cain\", \"July\", 31).\nHas_birthday(\"Will Ferrell\", \"July\", 16).\n.decl Answer()\nAnswer() :- Has_birthday(\"Dean Cain\", \"July\", day1), Has_birthday(\"Will Ferrell\", \"July\", day2), day1 < day2.\n.output Answer", "completions": [".decl Has_birthday(Person:symbol, Month:symbol, Day:float)\nHas_birthday(\"Dean Cain\", \"July\", 31).\nHas_birthday(\"Will Ferrell\", \"July\", 16).\n.decl Answer()\nAnswer() :- Has_birthday(\"Dean Cain\", \"July\", day1), Has_birthday(\"Will Ferrell\", \"July\", day2), day1 < day2.\n.output Answer"]}
{"id": 1527, "answer": false, "completion": ".decl Eats_food(Person:symbol, Food:symbol)\nEats_food(\"Iyer\", \"vegetarian\").\nEats_food(\"Iyer\", \"non-vegetarian\").\n.decl Answer()\nAnswer() :- Eats_food(\"Iyer\", \"meat\").\n.output Answer\n\n", "completions": [".decl Eats_food(Person:symbol, Food:symbol)\nEats_food(\"Iyer\", \"vegetarian\").\nEats_food(\"Iyer\", \"non-vegetarian\").\n.decl Answer()\nAnswer() :- Eats_food(\"Iyer\", \"meat\").\n.output Answer\n\n"]}
{"id": 1528, "answer": true, "completion": ".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Hades\", \"Underworld\").\nLives_in(\"Osiris\", \"Underworld\").\n.decl Answer()\nAnswer() :- Lives_in(\"Hades\", \"Underworld\"), Lives_in(\"Osiris\", \"Underworld\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Hades\", \"Underworld\").\nLives_in(\"Osiris\", \"Underworld\").\n.decl Answer()\nAnswer() :- Lives_in(\"Hades\", \"Underworld\"), Lives_in(\"Osiris\", \"Underworld\").\n.output Answer"]}
{"id": 1529, "answer": false, "completion": ".decl Has_operating_system(Phone:symbol, Operating_system:symbol)\nHas_operating_system(\"iPhone\", \"iOS\").\nHas_operating_system(\"Samsung Galaxy S4\", \"Android\").\n.decl Answer()\nAnswer() :- Has_operating_system(\"iPhone\", \"iOS\"), !, Has_operating_system(\"Samsung Galaxy S4\", \"Android\").\n.output Answer", "completions": [".decl Has_operating_system(Phone:symbol, Operating_system:symbol)\nHas_operating_system(\"iPhone\", \"iOS\").\nHas_operating_system(\"Samsung Galaxy S4\", \"Android\").\n.decl Answer()\nAnswer() :- Has_operating_system(\"iPhone\", \"iOS\"), !, Has_operating_system(\"Samsung Galaxy S4\", \"Android\").\n.output Answer"]}
{"id": 1530, "answer": false, "completion": ".decl Is_food(Food:symbol)\nIs_food(\"Chipotle Cinnamon Pork Chops\").\n.decl Is_holiday(Holiday:symbol)\nIs_holiday(\"Seder\").\n.decl Answer()\nAnswer() :- Is_food(food), Is_holiday(holiday), food != \"Chipotle Cinnamon Pork Chops\".\n.output Answer", "completions": [".decl Is_food(Food:symbol)\nIs_food(\"Chipotle Cinnamon Pork Chops\").\n.decl Is_holiday(Holiday:symbol)\nIs_holiday(\"Seder\").\n.decl Answer()\nAnswer() :- Is_food(food), Is_holiday(holiday), food != \"Chipotle Cinnamon Pork Chops\".\n.output Answer"]}
{"id": 1531, "answer": false, "completion": ".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"diarrhea\", \"too many oranges\").\n.decl Answer()\nAnswer() :- Causes(\"diarrhea\", \"too many oranges\").\n.output Answer", "completions": [".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"diarrhea\", \"too many oranges\").\n.decl Answer()\nAnswer() :- Causes(\"diarrhea\", \"too many oranges\").\n.output Answer"]}
{"id": 1532, "answer": true, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 1533, "answer": true, "completion": ".decl Has_sin(Person:symbol, Sin:symbol)\nHas_sin(\"Christopher Columbus\", \"greed\").\nHas_sin(\"Christopher Columbus\", \"lust\").\nHas_sin(\"Christopher Columbus\", \"gluttony\").\nHas_sin(\"Christopher Columbus\", \"sloth\").\nHas_sin(\"Christopher Columbus\", \"wrath\").\nHas_sin(\"Christopher Columbus\", \"envy\").\nHas_sin(\"Christopher Columbus\", \"pride\").\n.decl Deadly_sin(Sin:symbol)\nDeadly_sin(\"greed\").\nDeadly_sin(\"lust\").\nDeadly_sin(\"gluttony\").\nDeadly_sin(\"sloth\").\nDeadly_sin(\"wrath\").\nDeadly_sin(\"envy\").\nDeadly_sin(\"pride\").\n.decl Answer()\nAnswer() :- Has_sin(\"Christopher Columbus\", sin), Deadly_sin(sin).\n.output Answer", "completions": [".decl Has_sin(Person:symbol, Sin:symbol)\nHas_sin(\"Christopher Columbus\", \"greed\").\nHas_sin(\"Christopher Columbus\", \"lust\").\nHas_sin(\"Christopher Columbus\", \"gluttony\").\nHas_sin(\"Christopher Columbus\", \"sloth\").\nHas_sin(\"Christopher Columbus\", \"wrath\").\nHas_sin(\"Christopher Columbus\", \"envy\").\nHas_sin(\"Christopher Columbus\", \"pride\").\n.decl Deadly_sin(Sin:symbol)\nDeadly_sin(\"greed\").\nDeadly_sin(\"lust\").\nDeadly_sin(\"gluttony\").\nDeadly_sin(\"sloth\").\nDeadly_sin(\"wrath\").\nDeadly_sin(\"envy\").\nDeadly_sin(\"pride\").\n.decl Answer()\nAnswer() :- Has_sin(\"Christopher Columbus\", sin), Deadly_sin(sin).\n.output Answer"]}
{"id": 1534, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Wall Street Crash of 1929\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"stocks of robotics companies\", 1).\n.decl Answer()\nAnswer() :- Last_n_years(\"Wall Street Crash of 1929\", n_years1), Happens_every_n_years(\"stocks of robotics companies\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Wall Street Crash of 1929\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"stocks of robotics companies\", 1).\n.decl Answer()\nAnswer() :- Last_n_years(\"Wall Street Crash of 1929\", n_years1), Happens_every_n_years(\"stocks of robotics companies\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1535, "answer": true, "completion": ".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Inception\", 160).\nHas_budget(\"The Dark Knight Rises\", 250).\nHas_budget(\"The Dark Knight\", 185).\nHas_budget(\"Memento\", 9).\nHas_budget(\"Insomnia\", 46).\nHas_budget(\"Following\", 6).\n.decl Has_GDP(Country:symbol, GDP:float)\nHas_GDP(\"Cyprus\", 18.4).\n.decl Answer()\nAnswer() :- Has_budget(\"Inception\", budget1), Has_budget(\"The Dark Knight Rises\", budget2), Has_budget(\"The Dark Knight\", budget3), Has_budget(\"Memento\", budget4), Has_budget(\"Insomnia\", budget5), Has_budget(\"Following\", budget6), Has_GDP(\"Cyprus\", GDP), budget1 + budget2 + budget3 + budget4 + budget5 + budget6 >= GDP.\n.output Answer", "completions": [".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Inception\", 160).\nHas_budget(\"The Dark Knight Rises\", 250).\nHas_budget(\"The Dark Knight\", 185).\nHas_budget(\"Memento\", 9).\nHas_budget(\"Insomnia\", 46).\nHas_budget(\"Following\", 6).\n.decl Has_GDP(Country:symbol, GDP:float)\nHas_GDP(\"Cyprus\", 18.4).\n.decl Answer()\nAnswer() :- Has_budget(\"Inception\", budget1), Has_budget(\"The Dark Knight Rises\", budget2), Has_budget(\"The Dark Knight\", budget3), Has_budget(\"Memento\", budget4), Has_budget(\"Insomnia\", budget5), Has_budget(\"Following\", budget6), Has_GDP(\"Cyprus\", GDP), budget1 + budget2 + budget3 + budget4 + budget5 + budget6 >= GDP.\n.output Answer"]}
{"id": 1536, "answer": false, "completion": ".decl Has_n_fingers(Person:symbol, N_fingers:float)\nHas_n_fingers(\"Homer Simpson\", 10).\n.decl Answer()\nAnswer() :- Has_n_fingers(\"Homer Simpson\", n_fingers), n_fingers/2 >= 5.\n.output Answer", "completions": [".decl Has_n_fingers(Person:symbol, N_fingers:float)\nHas_n_fingers(\"Homer Simpson\", 10).\n.decl Answer()\nAnswer() :- Has_n_fingers(\"Homer Simpson\", n_fingers), n_fingers/2 >= 5.\n.output Answer"]}
{"id": 1537, "answer": false, "completion": ".decl Plays_role(Actor:symbol, Movie:symbol, Role:symbol)\nPlays_role(\"Robin Williams\", \"Mrs. Doubtfire\", \"Daniel Hillard\").\n.decl Is_known_for(Actor:symbol, Trait:symbol)\nIs_known_for(\"Robin Williams\", \"humour\").\n.decl Answer()\nAnswer() :- Plays_role(\"Robin Williams\", \"Mrs. Doubtfire\", \"Daniel Hillard\"), Is_known_for(\"Robin Williams\", \"humour\").\n.output Answer", "completions": [".decl Plays_role(Actor:symbol, Movie:symbol, Role:symbol)\nPlays_role(\"Robin Williams\", \"Mrs. Doubtfire\", \"Daniel Hillard\").\n.decl Is_known_for(Actor:symbol, Trait:symbol)\nIs_known_for(\"Robin Williams\", \"humour\").\n.decl Answer()\nAnswer() :- Plays_role(\"Robin Williams\", \"Mrs. Doubtfire\", \"Daniel Hillard\"), Is_known_for(\"Robin Williams\", \"humour\").\n.output Answer"]}
{"id": 1538, "answer": false, "completion": ".decl Gave_funding(Person:symbol, Event:symbol)\nGave_funding(\"rulers of the Portugese Empire\", \"Columbus' expedition\").\n.decl Answer()\nAnswer() :- Gave_funding(person, \"Columbus' expedition\").\n.output Answer", "completions": [".decl Gave_funding(Person:symbol, Event:symbol)\nGave_funding(\"rulers of the Portugese Empire\", \"Columbus' expedition\").\n.decl Answer()\nAnswer() :- Gave_funding(person, \"Columbus' expedition\").\n.output Answer"]}
{"id": 1539, "answer": false, "completion": ".decl Helped_build(Person:symbol, Structure:symbol)\nHelped_build(\"Greeks\", \"Lighthouse of Alexandria\").\n.decl Answer()\nAnswer() :- Helped_build(\"Greeks\", \"Lighthouse of Alexandria\").\n.output Answer", "completions": [".decl Helped_build(Person:symbol, Structure:symbol)\nHelped_build(\"Greeks\", \"Lighthouse of Alexandria\").\n.decl Answer()\nAnswer() :- Helped_build(\"Greeks\", \"Lighthouse of Alexandria\").\n.output Answer"]}
{"id": 1540, "answer": true, "completion": ".decl Has_rank(Person:symbol, Rank:float)\nHas_rank(\"Jigoro Kano\", 1).\n.decl Answer()\nAnswer() :- Has_rank(person, rank), rank >= 100.\n.output Answer", "completions": [".decl Has_rank(Person:symbol, Rank:float)\nHas_rank(\"Jigoro Kano\", 1).\n.decl Answer()\nAnswer() :- Has_rank(person, rank), rank >= 100.\n.output Answer"]}
{"id": 1541, "answer": true, "completion": ".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"El Chico\", \"cactus fruit\").\n.decl Is_in_city(Restaurant:symbol, City:symbol)\nIs_in_city(\"El Chico\", \"Cuauhtémoc\").\n.decl Answer()\nAnswer() :- Serves(\"El Chico\", \"cactus fruit\").\nAnswer() :- Serves(restaurant, \"cactus fruit\"), Is_in_city(restaurant, \"Cuauhtémoc\").\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"El Chico\", \"cactus fruit\").\n.decl Is_in_city(Restaurant:symbol, City:symbol)\nIs_in_city(\"El Chico\", \"Cuauhtémoc\").\n.decl Answer()\nAnswer() :- Serves(\"El Chico\", \"cactus fruit\").\nAnswer() :- Serves(restaurant, \"cactus fruit\"), Is_in_city(restaurant, \"Cuauhtémoc\").\n.output Answer"]}
{"id": 1542, "answer": false, "completion": ".decl Trains_to_use(Person:symbol, Technique:symbol)\nTrains_to_use(\"Mike Tyson\", \"gogoplata\").\n.decl Answer()\nAnswer() :- Trains_to_use(\"Mike Tyson\", \"gogoplata\").\n.output Answer", "completions": [".decl Trains_to_use(Person:symbol, Technique:symbol)\nTrains_to_use(\"Mike Tyson\", \"gogoplata\").\n.decl Answer()\nAnswer() :- Trains_to_use(\"Mike Tyson\", \"gogoplata\").\n.output Answer"]}
{"id": 1543, "answer": false, "completion": ".decl Makes(Company:symbol, Car:symbol)\nMakes(\"Fiat Chrysler\", \"Chrysler\").\nMakes(\"Fiat Chrysler\", \"Dodge\").\nMakes(\"Fiat Chrysler\", \"Jeep\").\nMakes(\"Fiat Chrysler\", \"Ram\").\nMakes(\"Fiat Chrysler\", \"Alfa Romeo\").\nMakes(\"Fiat Chrysler\", \"Fiat\").\nMakes(\"Fiat Chrysler\", \"Maserati\").\nMakes(\"Fiat Chrysler\", \"Abarth\").\nMakes(\"Fiat Chrysler\", \"SRT\").\nMakes(\"Fiat Chrysler\", \"Fiat Professional\").\nMakes(\"Fiat Chrysler\", \"Mitsubishi\").\n.decl Answer()\nAnswer() :- Makes(\"Fiat Chrysler\", \"Mitsubishi\").\n.output Answer", "completions": [".decl Makes(Company:symbol, Car:symbol)\nMakes(\"Fiat Chrysler\", \"Chrysler\").\nMakes(\"Fiat Chrysler\", \"Dodge\").\nMakes(\"Fiat Chrysler\", \"Jeep\").\nMakes(\"Fiat Chrysler\", \"Ram\").\nMakes(\"Fiat Chrysler\", \"Alfa Romeo\").\nMakes(\"Fiat Chrysler\", \"Fiat\").\nMakes(\"Fiat Chrysler\", \"Maserati\").\nMakes(\"Fiat Chrysler\", \"Abarth\").\nMakes(\"Fiat Chrysler\", \"SRT\").\nMakes(\"Fiat Chrysler\", \"Fiat Professional\").\nMakes(\"Fiat Chrysler\", \"Mitsubishi\").\n.decl Answer()\nAnswer() :- Makes(\"Fiat Chrysler\", \"Mitsubishi\").\n.output Answer"]}
{"id": 1544, "answer": true, "completion": ".decl Has_viscosity(Liquid:symbol, Viscosity:float)\nHas_viscosity(\"jello shots\", 0.1).\nHas_viscosity(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_viscosity(\"jello shots\", viscosity1), Has_viscosity(\"water\", viscosity2), viscosity1 < viscosity2.\n.output Answer", "completions": [".decl Has_viscosity(Liquid:symbol, Viscosity:float)\nHas_viscosity(\"jello shots\", 0.1).\nHas_viscosity(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_viscosity(\"jello shots\", viscosity1), Has_viscosity(\"water\", viscosity2), viscosity1 < viscosity2.\n.output Answer"]}
{"id": 1545, "answer": true, "completion": ".decl Wears(Person:symbol, Outfit:symbol)\nWears(\"Johnny Cash\", \"black\").\nWears(\"Johnny Cash\", \"rainbow-colored\").\n.decl Answer()\nAnswer() :- Wears(\"Johnny Cash\", \"rainbow-colored\").\n.output Answer", "completions": [".decl Wears(Person:symbol, Outfit:symbol)\nWears(\"Johnny Cash\", \"black\").\nWears(\"Johnny Cash\", \"rainbow-colored\").\n.decl Answer()\nAnswer() :- Wears(\"Johnny Cash\", \"rainbow-colored\").\n.output Answer"]}
{"id": 1546, "answer": true, "completion": ".decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"markhor birth\", 365).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"markhor birth\", n_days1), n_days1 <= 365.\n.output Answer", "completions": [".decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"markhor birth\", 365).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"markhor birth\", n_days1), n_days1 <= 365.\n.output Answer"]}
{"id": 1547, "answer": true, "completion": ".decl Follows(Person:symbol, Religion:symbol)\nFollows(\"Mother Theresa\", \"Christianity\").\n.decl Answer()\nAnswer() :- Follows(\"Mother Theresa\", \"Christianity\"), !.\nAnswer() :- Follows(\"Mother Theresa\", religion), religion != \"Christianity\".\n.output Answer", "completions": [".decl Follows(Person:symbol, Religion:symbol)\nFollows(\"Mother Theresa\", \"Christianity\").\n.decl Answer()\nAnswer() :- Follows(\"Mother Theresa\", \"Christianity\"), !.\nAnswer() :- Follows(\"Mother Theresa\", religion), religion != \"Christianity\".\n.output Answer"]}
{"id": 1548, "answer": true, "completion": ".decl Can_learn(Organism:symbol, Subject:symbol)\nCan_learn(\"human\", \"history of art\").\n.decl Answer()\nAnswer() :- Can_learn(\"amoeba\", \"history of art\").\n.output Answer", "completions": [".decl Can_learn(Organism:symbol, Subject:symbol)\nCan_learn(\"human\", \"history of art\").\n.decl Answer()\nAnswer() :- Can_learn(\"amoeba\", \"history of art\").\n.output Answer"]}
{"id": 1549, "answer": true, "completion": ".decl Requires(Course:symbol, Book:symbol)\nRequires(\"CHE101\", \"Chemistry\").\n.decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"Chemistry\", \"Maya Angelou\").\n.decl Answer()\nAnswer() :- Requires(\"CHE101\", book), Written_by(book, \"Maya Angelou\").\n.output Answer", "completions": [".decl Requires(Course:symbol, Book:symbol)\nRequires(\"CHE101\", \"Chemistry\").\n.decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"Chemistry\", \"Maya Angelou\").\n.decl Answer()\nAnswer() :- Requires(\"CHE101\", book), Written_by(book, \"Maya Angelou\").\n.output Answer"]}
{"id": 1550, "answer": false, "completion": ".decl Is_celebrated_in(Event:symbol, Religion:symbol)\nIs_celebrated_in(\"Last Supper\", \"Christianity\").\nIs_celebrated_in(\"Last Supper\", \"Islam\").\n.decl Answer()\nAnswer() :- Is_celebrated_in(\"Last Supper\", \"Islam\").\n.output Answer", "completions": [".decl Is_celebrated_in(Event:symbol, Religion:symbol)\nIs_celebrated_in(\"Last Supper\", \"Christianity\").\nIs_celebrated_in(\"Last Supper\", \"Islam\").\n.decl Answer()\nAnswer() :- Is_celebrated_in(\"Last Supper\", \"Islam\").\n.output Answer"]}
{"id": 1551, "answer": true, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"John Kerry\", \"Yale University\").\nGraduates(\"Tom Hanks\", \"California State University\").\nGraduates(\"Tom Cruise\", \"Syracuse University\").\nGraduates(\"Meryl Streep\", \"Vassar College\").\n.decl Wins(Person:symbol, Award:symbol)\nWins(\"Tom Hanks\", \"Golden Globe\").\nWins(\"Tom Cruise\", \"Golden Globe\").\nWins(\"Meryl Streep\", \"Golden Globe\").\n.decl Answer()\nAnswer() :- Wins(person, \"Golden Globe\"), Graduates(person, \"Yale University\").\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"John Kerry\", \"Yale University\").\nGraduates(\"Tom Hanks\", \"California State University\").\nGraduates(\"Tom Cruise\", \"Syracuse University\").\nGraduates(\"Meryl Streep\", \"Vassar College\").\n.decl Wins(Person:symbol, Award:symbol)\nWins(\"Tom Hanks\", \"Golden Globe\").\nWins(\"Tom Cruise\", \"Golden Globe\").\nWins(\"Meryl Streep\", \"Golden Globe\").\n.decl Answer()\nAnswer() :- Wins(person, \"Golden Globe\"), Graduates(person, \"Yale University\").\n.output Answer"]}
{"id": 1552, "answer": false, "completion": ".decl Has_thickness(Object:symbol, Thickness:float)\nHas_thickness(\"armadillo\", 0.1).\n.decl Answer()\nAnswer() :- Has_thickness(\"armadillo\", thickness).\n.output Answer", "completions": [".decl Has_thickness(Object:symbol, Thickness:float)\nHas_thickness(\"armadillo\", 0.1).\n.decl Answer()\nAnswer() :- Has_thickness(\"armadillo\", thickness).\n.output Answer"]}
{"id": 1553, "answer": true, "completion": ".decl Has_favorite_food(Person:symbol, Food:symbol)\nHas_favorite_food(\"10th doctor\", \"fish fingers and custard\").\n.decl Answer()\nAnswer() :- Has_favorite_food(\"10th doctor\", \"stuffed pears\").\n.output Answer", "completions": [".decl Has_favorite_food(Person:symbol, Food:symbol)\nHas_favorite_food(\"10th doctor\", \"fish fingers and custard\").\n.decl Answer()\nAnswer() :- Has_favorite_food(\"10th doctor\", \"stuffed pears\").\n.output Answer"]}
{"id": 1554, "answer": true, "completion": ".decl Produces(Region:symbol, Product:symbol)\nProduces(\"Brooklyn\", \"bread\").\n.decl Answer()\nAnswer() :- Produces(\"Brooklyn\", \"bread\").\n.output Answer", "completions": [".decl Produces(Region:symbol, Product:symbol)\nProduces(\"Brooklyn\", \"bread\").\n.decl Answer()\nAnswer() :- Produces(\"Brooklyn\", \"bread\").\n.output Answer"]}
{"id": 1555, "answer": false, "completion": ".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"breast cancer\", \"humans\").\n.decl Answer()\nAnswer() :- Has_disease(\"breast cancer\", disease), !, disease != \"amoebas\".\n.output Answer", "completions": [".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"breast cancer\", \"humans\").\n.decl Answer()\nAnswer() :- Has_disease(\"breast cancer\", disease), !, disease != \"amoebas\".\n.output Answer"]}
{"id": 1556, "answer": false, "completion": ".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"Post Malone\", \"needles\").\n.decl Answer()\nAnswer() :- Has_phobia(\"Post Malone\", \"needles\").\n.output Answer", "completions": [".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"Post Malone\", \"needles\").\n.decl Answer()\nAnswer() :- Has_phobia(\"Post Malone\", \"needles\").\n.output Answer"]}
{"id": 1557, "answer": true, "completion": ".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 45000).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Gotheburg\", 900000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity1), Has_population(\"Gotheburg\", population2), capacity1 >= population2/10.\n.output Answer", "completions": [".decl Has_capacity(Stadium:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 45000).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Gotheburg\", 900000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity1), Has_population(\"Gotheburg\", population2), capacity1 >= population2/10.\n.output Answer"]}
{"id": 1558, "answer": true, "completion": ".decl Is_a_type_of(Person:symbol, Type:symbol)\nIs_a_type_of(\"Jujutsu expert\", \"martial artist\").\nIs_a_type_of(\"Janissary\", \"soldier\").\n.decl Answer()\nAnswer() :- Is_a_type_of(\"Jujutsu expert\", \"martial artist\"), Is_a_type_of(\"Janissary\", \"soldier\").\n.output Answer", "completions": [".decl Is_a_type_of(Person:symbol, Type:symbol)\nIs_a_type_of(\"Jujutsu expert\", \"martial artist\").\nIs_a_type_of(\"Janissary\", \"soldier\").\n.decl Answer()\nAnswer() :- Is_a_type_of(\"Jujutsu expert\", \"martial artist\"), Is_a_type_of(\"Janissary\", \"soldier\").\n.output Answer"]}
{"id": 1559, "answer": true, "completion": ".decl Lives_in(Person:symbol, Country:symbol)\nLives_in(\"Rusev\", \"Bulgaria\").\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"Bulgaria\", 7000000).\n.decl Answer()\nAnswer() :- Lives_in(\"Rusev\", \"Bulgaria\"), Has_population(\"Bulgaria\", population), population > 10000000.\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Country:symbol)\nLives_in(\"Rusev\", \"Bulgaria\").\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"Bulgaria\", 7000000).\n.decl Answer()\nAnswer() :- Lives_in(\"Rusev\", \"Bulgaria\"), Has_population(\"Bulgaria\", population), population > 10000000.\n.output Answer"]}
{"id": 1560, "answer": false, "completion": ".decl Important_to(Animal:symbol, Sport:symbol)\nImportant_to(\"bird\", \"badminton\").\n.decl Answer()\nAnswer() :- Important_to(\"bird\", \"badminton\").\n.output Answer", "completions": [".decl Important_to(Animal:symbol, Sport:symbol)\nImportant_to(\"bird\", \"badminton\").\n.decl Answer()\nAnswer() :- Important_to(\"bird\", \"badminton\").\n.output Answer"]}
{"id": 1561, "answer": false, "completion": ".decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"pirate lieutenant\", \"lieutenant\").\nHas_rank(\"navy lieutenant\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Has_rank(\"pirate lieutenant\", \"lieutenant\"), Has_rank(\"navy lieutenant\", \"lieutenant\").\n.output Answer", "completions": [".decl Has_rank(Person:symbol, Rank:symbol)\nHas_rank(\"pirate lieutenant\", \"lieutenant\").\nHas_rank(\"navy lieutenant\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Has_rank(\"pirate lieutenant\", \"lieutenant\"), Has_rank(\"navy lieutenant\", \"lieutenant\").\n.output Answer"]}
{"id": 1562, "answer": true, "completion": ".decl Launched_in_year(Missile:symbol, Year:float)\nLaunched_in_year(\"Hwasong-15\", 2017).\n.decl Launched_in_year(Spacecraft:symbol, Year:float)\nLaunched_in_year(\"Voyager 2\", 1977).\n.decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Hwasong-15\", 20).\nHas_speed(\"Voyager 2\", 17).\n.decl Answer()\nAnswer() :- Launched_in_year(\"Hwasong-15\", year1), Launched_in_year(\"Voyager 2\", year2), Has_speed(\"Hwasong-15\", speed1), Has_speed(\"Voyager 2\", speed2), year1 - year2 >= (speed2 - speed1) / speed1.\n.output Answer", "completions": [".decl Launched_in_year(Missile:symbol, Year:float)\nLaunched_in_year(\"Hwasong-15\", 2017).\n.decl Launched_in_year(Spacecraft:symbol, Year:float)\nLaunched_in_year(\"Voyager 2\", 1977).\n.decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"Hwasong-15\", 20).\nHas_speed(\"Voyager 2\", 17).\n.decl Answer()\nAnswer() :- Launched_in_year(\"Hwasong-15\", year1), Launched_in_year(\"Voyager 2\", year2), Has_speed(\"Hwasong-15\", speed1), Has_speed(\"Voyager 2\", speed2), year1 - year2 >= (speed2 - speed1) / speed1.\n.output Answer"]}
{"id": 1563, "answer": false, "completion": ".decl Has_top(Stove:symbol, Top:symbol)\nHas_top(\"electric stove\", \"glass top\").\n.decl Is_compatible(Stove:symbol, Skillet:symbol)\nIs_compatible(\"electric stove\", \"cast iron skillet\").\n.decl Answer()\nAnswer() :- Has_top(\"electric stove\", \"glass top\"), Is_compatible(\"electric stove\", \"cast iron skillet\").\n.output Answer", "completions": [".decl Has_top(Stove:symbol, Top:symbol)\nHas_top(\"electric stove\", \"glass top\").\n.decl Is_compatible(Stove:symbol, Skillet:symbol)\nIs_compatible(\"electric stove\", \"cast iron skillet\").\n.decl Answer()\nAnswer() :- Has_top(\"electric stove\", \"glass top\"), Is_compatible(\"electric stove\", \"cast iron skillet\").\n.output Answer"]}
{"id": 1564, "answer": false, "completion": ".decl Lasts_for_n_seconds(Event:symbol, N_seconds:float)\nLasts_for_n_seconds(\"Call of Duty\", 60).\n.decl Lasts_for_n_seconds(Event:symbol, N_seconds:float)\nLasts_for_n_seconds(\"Conan the Barbarian\", 90).\n.decl Answer()\nAnswer() :- Lasts_for_n_seconds(\"Call of Duty\", n_seconds1), Lasts_for_n_seconds(\"Conan the Barbarian\", n_seconds2), n_seconds2 < n_seconds1.\n.output Answer", "completions": [".decl Lasts_for_n_seconds(Event:symbol, N_seconds:float)\nLasts_for_n_seconds(\"Call of Duty\", 60).\n.decl Lasts_for_n_seconds(Event:symbol, N_seconds:float)\nLasts_for_n_seconds(\"Conan the Barbarian\", 90).\n.decl Answer()\nAnswer() :- Lasts_for_n_seconds(\"Call of Duty\", n_seconds1), Lasts_for_n_seconds(\"Conan the Barbarian\", n_seconds2), n_seconds2 < n_seconds1.\n.output Answer"]}
{"id": 1565, "answer": false, "completion": ".decl Grows_in(Organism:symbol, Location:symbol)\nGrows_in(\"sesame seed\", \"soil\").\nGrows_in(\"human\", \"soil\").\n.decl Answer()\nAnswer() :- Grows_in(\"sesame seed\", \"soil\").\nAnswer() :- Grows_in(\"sesame seed\", location), Grows_in(\"human\", location).\n.output Answer", "completions": [".decl Grows_in(Organism:symbol, Location:symbol)\nGrows_in(\"sesame seed\", \"soil\").\nGrows_in(\"human\", \"soil\").\n.decl Answer()\nAnswer() :- Grows_in(\"sesame seed\", \"soil\").\nAnswer() :- Grows_in(\"sesame seed\", location), Grows_in(\"human\", location).\n.output Answer"]}
{"id": 1566, "answer": true, "completion": ".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Ariana Grande\", \"sweats\").\nWears(\"Ariana Grande\", \"high fashion\").\n.decl Answer()\nAnswer() :- Wears(\"Ariana Grande\", \"sweats\"), Wears(\"Ariana Grande\", \"high fashion\").\n.output Answer", "completions": [".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Ariana Grande\", \"sweats\").\nWears(\"Ariana Grande\", \"high fashion\").\n.decl Answer()\nAnswer() :- Wears(\"Ariana Grande\", \"sweats\"), Wears(\"Ariana Grande\", \"high fashion\").\n.output Answer"]}
{"id": 1567, "answer": false, "completion": ".decl Has_wife(Person:symbol, Wife:symbol)\nHas_wife(\"Eric Clapton\", \"Pattie Boyd\").\nHas_wife(\"George Harrison\", \"Pattie Boyd\").\n.decl Answer()\nAnswer() :- Has_wife(\"Eric Clapton\", wife1), Has_wife(\"George Harrison\", wife2), wife1 = wife2.\n.output Answer", "completions": [".decl Has_wife(Person:symbol, Wife:symbol)\nHas_wife(\"Eric Clapton\", \"Pattie Boyd\").\nHas_wife(\"George Harrison\", \"Pattie Boyd\").\n.decl Answer()\nAnswer() :- Has_wife(\"Eric Clapton\", wife1), Has_wife(\"George Harrison\", wife2), wife1 = wife2.\n.output Answer"]}
{"id": 1568, "answer": false, "completion": ".decl Has_name(Organization:symbol, Name:symbol)\nHas_name(\"Supreme Court of the United States\", \"Supreme Court\").\nHas_name(\"High Courts of Justice of Spain\", \"Supreme Court\").\n.decl Answer()\nAnswer() :- Has_name(\"Supreme Court of the United States\", name1), Has_name(\"High Courts of Justice of Spain\", name2), name1 = name2.\n.output Answer", "completions": [".decl Has_name(Organization:symbol, Name:symbol)\nHas_name(\"Supreme Court of the United States\", \"Supreme Court\").\nHas_name(\"High Courts of Justice of Spain\", \"Supreme Court\").\n.decl Answer()\nAnswer() :- Has_name(\"Supreme Court of the United States\", name1), Has_name(\"High Courts of Justice of Spain\", name2), name1 = name2.\n.output Answer"]}
{"id": 1569, "answer": false, "completion": ".decl Knows_song(Person:symbol, Song:symbol)\nKnows_song(\"Jack Sparrow\", \"Farewell and Adieu\").\n.decl Is_sea_shanty(Song:symbol)\nIs_sea_shanty(\"Farewell and Adieu\").\n.decl Answer()\nAnswer() :- Knows_song(\"Jack Sparrow\", song), Is_sea_shanty(song).\n.output Answer", "completions": [".decl Knows_song(Person:symbol, Song:symbol)\nKnows_song(\"Jack Sparrow\", \"Farewell and Adieu\").\n.decl Is_sea_shanty(Song:symbol)\nIs_sea_shanty(\"Farewell and Adieu\").\n.decl Answer()\nAnswer() :- Knows_song(\"Jack Sparrow\", song), Is_sea_shanty(song).\n.output Answer"]}
{"id": 1570, "answer": false, "completion": ".decl Lives_in(Person:symbol, Country:symbol)\nLives_in(\"Australian\", \"Australia\").\n.decl Rides_to_work(Person:symbol, Animal:symbol)\nRides_to_work(\"Australian\", \"kangaroo\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Australia\"), Rides_to_work(person, \"kangaroo\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Country:symbol)\nLives_in(\"Australian\", \"Australia\").\n.decl Rides_to_work(Person:symbol, Animal:symbol)\nRides_to_work(\"Australian\", \"kangaroo\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Australia\"), Rides_to_work(person, \"kangaroo\").\n.output Answer"]}
{"id": 1571, "answer": true, "completion": ".decl Patronized(Patron:symbol, Artist:symbol)\nPatronized(\"Lorenzo de Medici\", \"Leonardo da Vinci\").\nPatronized(\"Lorenzo de Medici\", \"Michelangelo\").\n.decl Answer()\nAnswer() :- Patronized(\"Lorenzo de Medici\", artist1), Patronized(\"Lorenzo de Medici\", artist2), artist1 != artist2.\n.output Answer", "completions": [".decl Patronized(Patron:symbol, Artist:symbol)\nPatronized(\"Lorenzo de Medici\", \"Leonardo da Vinci\").\nPatronized(\"Lorenzo de Medici\", \"Michelangelo\").\n.decl Answer()\nAnswer() :- Patronized(\"Lorenzo de Medici\", artist1), Patronized(\"Lorenzo de Medici\", artist2), artist1 != artist2.\n.output Answer"]}
{"id": 1572, "answer": false, "completion": ".decl Understands(Person:symbol, Complexity:symbol)\nUnderstands(\"Lee Sedol\", \"simple\").\nUnderstands(\"Lee Sedol\", \"medium\").\nUnderstands(\"Lee Sedol\", \"complex\").\n.decl Answer()\nAnswer() :- Understands(\"Lee Sedol\", \"Sicilian Defence\").\n.output Answer", "completions": [".decl Understands(Person:symbol, Complexity:symbol)\nUnderstands(\"Lee Sedol\", \"simple\").\nUnderstands(\"Lee Sedol\", \"medium\").\nUnderstands(\"Lee Sedol\", \"complex\").\n.decl Answer()\nAnswer() :- Understands(\"Lee Sedol\", \"Sicilian Defence\").\n.output Answer"]}
{"id": 1573, "answer": true, "completion": ".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Genghis Khan\", \"Mongolia\").\nIs_citizen_of(\"Citizen of Bern\", \"Switzerland\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Citizen of Bern\", \"Switzerland\"), Is_citizen_of(\"Genghis Khan\", \"Mongolia\").\n.output Answer", "completions": [".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Genghis Khan\", \"Mongolia\").\nIs_citizen_of(\"Citizen of Bern\", \"Switzerland\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Citizen of Bern\", \"Switzerland\"), Is_citizen_of(\"Genghis Khan\", \"Mongolia\").\n.output Answer"]}
{"id": 1574, "answer": true, "completion": ".decl Has_fuel_efficiency(Car:symbol, Fuel_efficiency:float)\nHas_fuel_efficiency(\"Maruti Suzuki Baleno\", 22.0).\n.decl Has_family_size(Person:symbol, Family_size:float)\nHas_family_size(\"Linus Torvald\", 4.0).\n.decl Answer()\nAnswer() :- Has_fuel_efficiency(\"Maruti Suzuki Baleno\", fuel_efficiency), Has_family_size(\"Linus Torvald\", family_size), fuel_efficiency >= family_size.\n.output Answer", "completions": [".decl Has_fuel_efficiency(Car:symbol, Fuel_efficiency:float)\nHas_fuel_efficiency(\"Maruti Suzuki Baleno\", 22.0).\n.decl Has_family_size(Person:symbol, Family_size:float)\nHas_family_size(\"Linus Torvald\", 4.0).\n.decl Answer()\nAnswer() :- Has_fuel_efficiency(\"Maruti Suzuki Baleno\", fuel_efficiency), Has_family_size(\"Linus Torvald\", family_size), fuel_efficiency >= family_size.\n.output Answer"]}
{"id": 1575, "answer": false, "completion": ".decl Invented_in_country(Object:symbol, Country:symbol)\nInvented_in_country(\"Walkman\", \"Japan\").\n.decl Answer()\nAnswer() :- Invented_in_country(\"Walkman\", \"Japan\").\nAnswer() :- Invented_in_country(\"Walkman\", \"Hungary\").\n.output Answer", "completions": [".decl Invented_in_country(Object:symbol, Country:symbol)\nInvented_in_country(\"Walkman\", \"Japan\").\n.decl Answer()\nAnswer() :- Invented_in_country(\"Walkman\", \"Japan\").\nAnswer() :- Invented_in_country(\"Walkman\", \"Hungary\").\n.output Answer"]}
{"id": 1576, "answer": true, "completion": ".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Pantheon\", \"Pantheon\").\nHas_name(\"Paris\", \"Paris\").\n.decl Answer()\nAnswer() :- Has_name(\"Pantheon\", name1), Has_name(\"Paris\", name2), name1 != name2.\n.output Answer", "completions": [".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Pantheon\", \"Pantheon\").\nHas_name(\"Paris\", \"Paris\").\n.decl Answer()\nAnswer() :- Has_name(\"Pantheon\", name1), Has_name(\"Paris\", name2), name1 != name2.\n.output Answer"]}
{"id": 1577, "answer": false, "completion": ".decl Has_tip_percentage(Country:symbol, Tip_percentage:float)\nHas_tip_percentage(\"USA\", 15).\nHas_tip_percentage(\"Australia\", 10).\nHas_tip_percentage(\"Japan\", 0).\n.decl Answer()\nAnswer() :- Has_tip_percentage(country, tip_percentage), tip_percentage = 0.\n.output Answer", "completions": [".decl Has_tip_percentage(Country:symbol, Tip_percentage:float)\nHas_tip_percentage(\"USA\", 15).\nHas_tip_percentage(\"Australia\", 10).\nHas_tip_percentage(\"Japan\", 0).\n.decl Answer()\nAnswer() :- Has_tip_percentage(country, tip_percentage), tip_percentage = 0.\n.output Answer"]}
{"id": 1578, "answer": false, "completion": ".decl Is_vice_president(Person:symbol)\nIs_vice_president(\"Joe Biden\").\n.decl Is_president(Person:symbol)\nIs_president(\"Barack Obama\").\n.decl Is_vice_president_or_president(Person:symbol)\nIs_vice_president_or_president(Person) :- Is_vice_president(Person).\nIs_vice_president_or_president(Person) :- Is_president(Person).\n.decl Answer()\nAnswer() :- Is_vice_president_or_president(person), !, Is_vice_president_or_president(person).\n.output Answer", "completions": [".decl Is_vice_president(Person:symbol)\nIs_vice_president(\"Joe Biden\").\n.decl Is_president(Person:symbol)\nIs_president(\"Barack Obama\").\n.decl Is_vice_president_or_president(Person:symbol)\nIs_vice_president_or_president(Person) :- Is_vice_president(Person).\nIs_vice_president_or_president(Person) :- Is_president(Person).\n.decl Answer()\nAnswer() :- Is_vice_president_or_president(person), !, Is_vice_president_or_president(person).\n.output Answer"]}
{"id": 1579, "answer": true, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Bruce Lee\", \"University of Washington\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"1964 University of Washington graduation ceremony\", \"1964\").\n.decl Answer()\nAnswer() :- Graduates(\"Bruce Lee\", university), Happens_in_time(\"1964 University of Washington graduation ceremony\", time), university != \"University of Washington\".\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Bruce Lee\", \"University of Washington\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"1964 University of Washington graduation ceremony\", \"1964\").\n.decl Answer()\nAnswer() :- Graduates(\"Bruce Lee\", university), Happens_in_time(\"1964 University of Washington graduation ceremony\", time), university != \"University of Washington\".\n.output Answer"]}
{"id": 1580, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"jackfruit\", 35).\n.decl Can_be_used_as_weapon(Object:symbol)\nCan_be_used_as_weapon(\"jackfruit\").\n.decl Answer()\nAnswer() :- Has_weight(\"jackfruit\", weight), weight > 30.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"jackfruit\", 35).\n.decl Can_be_used_as_weapon(Object:symbol)\nCan_be_used_as_weapon(\"jackfruit\").\n.decl Answer()\nAnswer() :- Has_weight(\"jackfruit\", weight), weight > 30.\n.output Answer"]}
{"id": 1581, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Napoleonic Wars\", 15).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"earth completes orbit around sun\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"earth completes orbit around sun\", n_years1), Last_n_years(\"Napoleonic Wars\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Napoleonic Wars\", 15).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"earth completes orbit around sun\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"earth completes orbit around sun\", n_years1), Last_n_years(\"Napoleonic Wars\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1582, "answer": true, "completion": ".decl Found_in_location(Farm:symbol, Location:symbol)\nFound_in_location(\"Coca plant farm\", \"Yakutsk\").\n.decl Answer()\nAnswer() :- Found_in_location(\"Coca plant farm\", \"Yakutsk\").\n.output Answer", "completions": [".decl Found_in_location(Farm:symbol, Location:symbol)\nFound_in_location(\"Coca plant farm\", \"Yakutsk\").\n.decl Answer()\nAnswer() :- Found_in_location(\"Coca plant farm\", \"Yakutsk\").\n.output Answer"]}
{"id": 1583, "answer": false, "completion": ".decl Has_family(Animal:symbol, Family:symbol)\nHas_family(\"saltwater crocodile\", \"crocodilians\").\nHas_family(\"alligator\", \"crocodilians\").\n.decl Answer()\nAnswer() :- Has_family(\"saltwater crocodile\", family1), Has_family(\"alligator\", family2), family1 = family2.\n.output Answer", "completions": [".decl Has_family(Animal:symbol, Family:symbol)\nHas_family(\"saltwater crocodile\", \"crocodilians\").\nHas_family(\"alligator\", \"crocodilians\").\n.decl Answer()\nAnswer() :- Has_family(\"saltwater crocodile\", family1), Has_family(\"alligator\", family2), family1 = family2.\n.output Answer"]}
{"id": 1584, "answer": true, "completion": ".decl Can_save_soul(Religion_A:symbol, Religion_B:symbol)\nCan_save_soul(\"Christianity\", \"Christianity\").\nCan_save_soul(\"Christianity\", \"Judaism\").\nCan_save_soul(\"Christianity\", \"Islam\").\nCan_save_soul(\"Christianity\", \"Hinduism\").\nCan_save_soul(\"Christianity\", \"Buddhism\").\nCan_save_soul(\"Christianity\", \"Taoism\").\nCan_save_soul(\"Christianity\", \"Confucianism\").\nCan_save_soul(\"Christianity\", \"Shinto\").\nCan_save_soul(\"Christianity\", \"Zoroastrianism\").\nCan_save_soul(\"Christianity\", \"Sikhism\").\nCan_save_soul(\"Christianity\", \"Jainism\").\nCan_save_soul(\"Christianity\", \"Baha'i\").\nCan_save_soul(\"Christianity\", \"Rastafari\").\nCan_save_soul(\"Christianity\", \"Cao Dai\").\nCan_save_soul(\"Christianity\", \"Tenrikyo\").\nCan_save_soul(\"Christianity\", \"Unitarian Universalism\").\nCan_save_soul(\"Christianity\", \"Wicca\").\nCan_save_soul(\"Christianity\", \"Druidism\").\nCan_save_soul(\"Christianity\", \"Neo-Paganism\").\nCan_save_soul(\"Christianity\", \"Secular Humanism\").\nCan_save_soul(\"Christianity\", \"Atheism\").\nCan_save_soul(\"Christianity\", \"Agnosticism\").\nCan_save_soul(\"Christianity\", \"Deism\").\nCan_save_soul(\"Christianity\", \"Pantheism\").\nCan_save_soul(\"Christianity\", \"Panentheism\").\nCan_save_soul(\"Christianity\", \"Theism\").\nCan_save_soul(\"Christianity\", \"Polytheism\").\nCan_save_soul(\"Christianity\", \"Animism\").\nCan_save_soul(\"Christianity\", \"Spiritualism\").\nCan_save_soul(\"Christianity\", \"Shamanism\").\nCan_save_soul(\"Christianity\", \"Totemism\").\nCan_save_soul(\"Christianity\", \"Celtic Reconstructionism\").\nCan_save_soul(\"Christianity\", \"Druze\").\nCan_save_soul(\"Christianity\", \"Ethical Culture\").\nCan_save_soul(\"Christianity\", \"Humanism\").\nCan_save_soul(\"Christianity\", \"Reconstructionism\").\nCan_save_soul(\"Christianity\", \"Secular Humanism\").\nCan_save_soul(\"Christianity\", \"Secularism\").\nCan_save_soul(\"Christianity\", \"Pastafarianism\").\nCan_save_soul(\"Christianity\", \"Scientology\").\nCan_save_soul(\"Christianity\", \"Thelema\").\nCan_save_soul(\"Christianity\", \"Zionism\").\nCan_save_soul(\"Christianity\", \"Christian Science\").\nCan_save_soul(\"Christianity\", \"Christianity\").\nCan_save_soul(\"Christianity\", \"Christianity\").\nCan_save_soul(\"Christianity\", \"Christianity\").\nCan_save_soul(\"Christianity\", \"Christianity\").\nCan_save_soul(\"Christianity\", \"Christianity\").\n", "completions": [".decl Can_save_soul(Religion_A:symbol, Religion_B:symbol)\nCan_save_soul(\"Christianity\", \"Christianity\").\nCan_save_soul(\"Christianity\", \"Judaism\").\nCan_save_soul(\"Christianity\", \"Islam\").\nCan_save_soul(\"Christianity\", \"Hinduism\").\nCan_save_soul(\"Christianity\", \"Buddhism\").\nCan_save_soul(\"Christianity\", \"Taoism\").\nCan_save_soul(\"Christianity\", \"Confucianism\").\nCan_save_soul(\"Christianity\", \"Shinto\").\nCan_save_soul(\"Christianity\", \"Zoroastrianism\").\nCan_save_soul(\"Christianity\", \"Sikhism\").\nCan_save_soul(\"Christianity\", \"Jainism\").\nCan_save_soul(\"Christianity\", \"Baha'i\").\nCan_save_soul(\"Christianity\", \"Rastafari\").\nCan_save_soul(\"Christianity\", \"Cao Dai\").\nCan_save_soul(\"Christianity\", \"Tenrikyo\").\nCan_save_soul(\"Christianity\", \"Unitarian Universalism\").\nCan_save_soul(\"Christianity\", \"Wicca\").\nCan_save_soul(\"Christianity\", \"Druidism\").\nCan_save_soul(\"Christianity\", \"Neo-Paganism\").\nCan_save_soul(\"Christianity\", \"Secular Humanism\").\nCan_save_soul(\"Christianity\", \"Atheism\").\nCan_save_soul(\"Christianity\", \"Agnosticism\").\nCan_save_soul(\"Christianity\", \"Deism\").\nCan_save_soul(\"Christianity\", \"Pantheism\").\nCan_save_soul(\"Christianity\", \"Panentheism\").\nCan_save_soul(\"Christianity\", \"Theism\").\nCan_save_soul(\"Christianity\", \"Polytheism\").\nCan_save_soul(\"Christianity\", \"Animism\").\nCan_save_soul(\"Christianity\", \"Spiritualism\").\nCan_save_soul(\"Christianity\", \"Shamanism\").\nCan_save_soul(\"Christianity\", \"Totemism\").\nCan_save_soul(\"Christianity\", \"Celtic Reconstructionism\").\nCan_save_soul(\"Christianity\", \"Druze\").\nCan_save_soul(\"Christianity\", \"Ethical Culture\").\nCan_save_soul(\"Christianity\", \"Humanism\").\nCan_save_soul(\"Christianity\", \"Reconstructionism\").\nCan_save_soul(\"Christianity\", \"Secular Humanism\").\nCan_save_soul(\"Christianity\", \"Secularism\").\nCan_save_soul(\"Christianity\", \"Pastafarianism\").\nCan_save_soul(\"Christianity\", \"Scientology\").\nCan_save_soul(\"Christianity\", \"Thelema\").\nCan_save_soul(\"Christianity\", \"Zionism\").\nCan_save_soul(\"Christianity\", \"Christian Science\").\nCan_save_soul(\"Christianity\", \"Christianity\").\nCan_save_soul(\"Christianity\", \"Christianity\").\nCan_save_soul(\"Christianity\", \"Christianity\").\nCan_save_soul(\"Christianity\", \"Christianity\").\nCan_save_soul(\"Christianity\", \"Christianity\").\n"]}
{"id": 1585, "answer": true, "completion": ".decl Has_temperature(Fever:symbol, Temperature:float)\nHas_temperature(\"NY's highest recorded temperature\", 106).\n.decl Answer()\nAnswer() :- Has_temperature(\"NY's highest recorded temperature\", temperature1), Has_temperature(\"fever\", temperature2), temperature2 < temperature1.\n.output Answer", "completions": [".decl Has_temperature(Fever:symbol, Temperature:float)\nHas_temperature(\"NY's highest recorded temperature\", 106).\n.decl Answer()\nAnswer() :- Has_temperature(\"NY's highest recorded temperature\", temperature1), Has_temperature(\"fever\", temperature2), temperature2 < temperature1.\n.output Answer"]}
{"id": 1586, "answer": false, "completion": ".decl Has_power(Organization:symbol, Person:symbol)\nHas_power(\"federal government\", \"Mayor\").\n.decl Is_safe(Person:symbol)\nIs_safe(\"Mayor\").\n.decl Answer()\nAnswer() :- Has_power(organization, \"Mayor\"), Is_safe(\"Mayor\").\n.output Answer", "completions": [".decl Has_power(Organization:symbol, Person:symbol)\nHas_power(\"federal government\", \"Mayor\").\n.decl Is_safe(Person:symbol)\nIs_safe(\"Mayor\").\n.decl Answer()\nAnswer() :- Has_power(organization, \"Mayor\"), Is_safe(\"Mayor\").\n.output Answer"]}
{"id": 1587, "answer": false, "completion": ".decl Happens_in_country(Event:symbol, Country:symbol)\nHappens_in_country(\"Nepalese Civil War\", \"Nepal\").\nHappens_in_country(\"Nepalese Civil War\", \"India\").\n.decl Answer()\nAnswer() :- Happens_in_country(\"Nepalese Civil War\", \"Nepal\").\nAnswer() :- Happens_in_country(\"Nepalese Civil War\", \"India\").\n.output Answer", "completions": [".decl Happens_in_country(Event:symbol, Country:symbol)\nHappens_in_country(\"Nepalese Civil War\", \"Nepal\").\nHappens_in_country(\"Nepalese Civil War\", \"India\").\n.decl Answer()\nAnswer() :- Happens_in_country(\"Nepalese Civil War\", \"Nepal\").\nAnswer() :- Happens_in_country(\"Nepalese Civil War\", \"India\").\n.output Answer"]}
{"id": 1588, "answer": true, "completion": ".decl Happens_outdoors(Event:symbol)\nHappens_outdoors(\"rowing competitions\").\n.decl Answer()\nAnswer() :- !Happens_outdoors(\"rowing competitions\").\n.output Answer", "completions": [".decl Happens_outdoors(Event:symbol)\nHappens_outdoors(\"rowing competitions\").\n.decl Answer()\nAnswer() :- !Happens_outdoors(\"rowing competitions\").\n.output Answer"]}
{"id": 1589, "answer": true, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Jamie Brewer\", \"University of Central Arkansas\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"United States Naval Academy\", 4).\nRanks(\"University of Central Arkansas\", 201).\n.decl Answer()\nAnswer() :- Graduates(\"Jamie Brewer\", \"United States Naval Academy\").\nAnswer() :- Graduates(\"Jamie Brewer\", university2), Ranks(university2, rank2), Ranks(\"United States Naval Academy\", rank1), rank2 <= rank1.\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Jamie Brewer\", \"University of Central Arkansas\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"United States Naval Academy\", 4).\nRanks(\"University of Central Arkansas\", 201).\n.decl Answer()\nAnswer() :- Graduates(\"Jamie Brewer\", \"United States Naval Academy\").\nAnswer() :- Graduates(\"Jamie Brewer\", university2), Ranks(university2, rank2), Ranks(\"United States Naval Academy\", rank1), rank2 <= rank1.\n.output Answer"]}
{"id": 1590, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"largest asteroid\", 1.3e+15).\nHas_mass(\"whole city\", 1e+12).\n.decl Answer()\nAnswer() :- Has_mass(\"largest asteroid\", mass1), Has_mass(\"whole city\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"largest asteroid\", 1.3e+15).\nHas_mass(\"whole city\", 1e+12).\n.decl Answer()\nAnswer() :- Has_mass(\"largest asteroid\", mass1), Has_mass(\"whole city\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 1591, "answer": true, "completion": ".decl Won_awards(Person:symbol, N_awards:float)\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\n", "completions": [".decl Won_awards(Person:symbol, N_awards:float)\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\nWon_awards(\"Walt Disney\", 22).\nWon_awards(\"Walt Disney\", 32).\nWon_awards(\"Walt Disney\", 59).\nWon_awards(\"Walt Disney\", 26).\n"]}
{"id": 1592, "answer": true, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Astana Arena\", 22000).\n.decl Has_attendance(Venue:symbol, Attendance:float)\nHas_attendance(\"Astana Arena\", 22000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Astana Arena\", capacity), Has_attendance(\"Astana Arena\", attendance), capacity = attendance.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Astana Arena\", 22000).\n.decl Has_attendance(Venue:symbol, Attendance:float)\nHas_attendance(\"Astana Arena\", 22000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Astana Arena\", capacity), Has_attendance(\"Astana Arena\", attendance), capacity = attendance.\n.output Answer"]}
{"id": 1593, "answer": false, "completion": ".decl Was_part_of(Region:symbol, Region_now:symbol)\nWas_part_of(\"Mesopotamia\", \"China\").\n.decl Answer()\nAnswer() :- Was_part_of(\"Mesopotamia\", \"China\").\n.output Answer", "completions": [".decl Was_part_of(Region:symbol, Region_now:symbol)\nWas_part_of(\"Mesopotamia\", \"China\").\n.decl Answer()\nAnswer() :- Was_part_of(\"Mesopotamia\", \"China\").\n.output Answer"]}
{"id": 1594, "answer": true, "completion": ".decl Is_saint(Person:symbol)\nIs_saint(\"Saint Francis of Assisi\").\nIs_saint(\"Saint Thomas More\").\n.decl Is_martyr(Person:symbol)\nIs_martyr(\"Saint Francis of Assisi\").\nIs_martyr(\"Saint Thomas More\").\n.decl Is_excommunicated(Person:symbol)\nIs_excommunicated(\"Saint Thomas More\").\n.decl Answer()\nAnswer() :- Is_saint(saint), Is_martyr(saint), Is_excommunicated(saint).\n.output Answer", "completions": [".decl Is_saint(Person:symbol)\nIs_saint(\"Saint Francis of Assisi\").\nIs_saint(\"Saint Thomas More\").\n.decl Is_martyr(Person:symbol)\nIs_martyr(\"Saint Francis of Assisi\").\nIs_martyr(\"Saint Thomas More\").\n.decl Is_excommunicated(Person:symbol)\nIs_excommunicated(\"Saint Thomas More\").\n.decl Answer()\nAnswer() :- Is_saint(saint), Is_martyr(saint), Is_excommunicated(saint).\n.output Answer"]}
{"id": 1595, "answer": false, "completion": ".decl Needs_car(Job:symbol)\nNeeds_car(\"district management\").\n.decl Answer()\nAnswer() :- Needs_car(job).\n.output Answer", "completions": [".decl Needs_car(Job:symbol)\nNeeds_car(\"district management\").\n.decl Answer()\nAnswer() :- Needs_car(job).\n.output Answer"]}
{"id": 1596, "answer": true, "completion": ".decl Can_break(Object:symbol, Material:symbol)\nCan_break(\"nitric acid\", \"glass\").\nCan_break(\"nitric acid\", \"wood\").\nCan_break(\"nitric acid\", \"metal\").\n.decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"Louvre\", \"glass\").\nIs_made_of(\"Louvre\", \"wood\").\nIs_made_of(\"Louvre\", \"metal\").\n.decl Answer()\nAnswer() :- Can_break(\"nitric acid\", material), Is_made_of(\"Louvre\", material).\n.output Answer", "completions": [".decl Can_break(Object:symbol, Material:symbol)\nCan_break(\"nitric acid\", \"glass\").\nCan_break(\"nitric acid\", \"wood\").\nCan_break(\"nitric acid\", \"metal\").\n.decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"Louvre\", \"glass\").\nIs_made_of(\"Louvre\", \"wood\").\nIs_made_of(\"Louvre\", \"metal\").\n.decl Answer()\nAnswer() :- Can_break(\"nitric acid\", material), Is_made_of(\"Louvre\", material).\n.output Answer"]}
{"id": 1597, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"hornet\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in(\"hornet\", \"ocean\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"hornet\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in(\"hornet\", \"ocean\").\n.output Answer"]}
{"id": 1598, "answer": false, "completion": ".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Jackie Kennedy\", \"Dolce & Gabbana\").\n.decl Happens_at_time(Event:symbol, Time:symbol)\nHappens_at_time(\"John F. Kennedy's inauguration\", \"January 20, 1961\").\n.decl Answer()\nAnswer() :- Wears(\"Jackie Kennedy\", \"Dolce & Gabbana\"), Happens_at_time(\"John F. Kennedy's inauguration\", \"January 20, 1961\").\n.output Answer", "completions": [".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Jackie Kennedy\", \"Dolce & Gabbana\").\n.decl Happens_at_time(Event:symbol, Time:symbol)\nHappens_at_time(\"John F. Kennedy's inauguration\", \"January 20, 1961\").\n.decl Answer()\nAnswer() :- Wears(\"Jackie Kennedy\", \"Dolce & Gabbana\"), Happens_at_time(\"John F. Kennedy's inauguration\", \"January 20, 1961\").\n.output Answer"]}
{"id": 1599, "answer": true, "completion": ".decl Uses(Product:symbol, Raw_material:symbol)\nUses(\"toilet paper\", \"wood\").\n.decl Answer()\nAnswer() :- Uses(\"toilet paper\", raw_material), !Loggers(raw_material).\n.output Answer", "completions": [".decl Uses(Product:symbol, Raw_material:symbol)\nUses(\"toilet paper\", \"wood\").\n.decl Answer()\nAnswer() :- Uses(\"toilet paper\", raw_material), !Loggers(raw_material).\n.output Answer"]}
{"id": 1600, "answer": false, "completion": ".decl Can_lift(Person:symbol, Weight:float)\nCan_lift(\"Arnold Schwarzenegger\", 474).\nCan_lift(\"Hafþór Björnsson\", 474).\n.decl Answer()\nAnswer() :- Can_lift(\"Arnold Schwarzenegger\", weight1), Can_lift(\"Hafþór Björnsson\", weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Can_lift(Person:symbol, Weight:float)\nCan_lift(\"Arnold Schwarzenegger\", 474).\nCan_lift(\"Hafþór Björnsson\", 474).\n.decl Answer()\nAnswer() :- Can_lift(\"Arnold Schwarzenegger\", weight1), Can_lift(\"Hafþór Björnsson\", weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 1601, "answer": true, "completion": ".decl Has_n_letters(Word:symbol, N_letters:float)\nHas_n_letters(\"church\", 6).\n.decl Answer()\nAnswer() :- Has_n_letters(\"church\", n_letters), n_letters = 666.\n.output Answer", "completions": [".decl Has_n_letters(Word:symbol, N_letters:float)\nHas_n_letters(\"church\", 6).\n.decl Answer()\nAnswer() :- Has_n_letters(\"church\", n_letters), n_letters = 666.\n.output Answer"]}
{"id": 1602, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Elizabeth I of England\", 45).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"play Dido, Queen of Carthage\", 15).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"play Dido, Queen of Carthage\", n_years1), Last_n_years(\"Elizabeth I of England\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Elizabeth I of England\", 45).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"play Dido, Queen of Carthage\", 15).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"play Dido, Queen of Carthage\", n_years1), Last_n_years(\"Elizabeth I of England\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1603, "answer": true, "completion": ".decl Is_endangered(Animal:symbol, Status:symbol)\nIs_endangered(\"saltwater crocodile\", \"endangered\").\nIs_endangered(\"European otter\", \"vulnerable\").\n.decl Answer()\nAnswer() :- Is_endangered(\"saltwater crocodile\", status1), Is_endangered(\"European otter\", status2), status1 != status2.\n.output Answer", "completions": [".decl Is_endangered(Animal:symbol, Status:symbol)\nIs_endangered(\"saltwater crocodile\", \"endangered\").\nIs_endangered(\"European otter\", \"vulnerable\").\n.decl Answer()\nAnswer() :- Is_endangered(\"saltwater crocodile\", status1), Is_endangered(\"European otter\", status2), status1 != status2.\n.output Answer"]}
{"id": 1604, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"giant panda\", \"black\").\nHas_color(\"giant panda\", \"white\").\nHas_color(\"yin yang\", \"black\").\nHas_color(\"yin yang\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"giant panda\", color1), Has_color(\"yin yang\", color2), color1 != color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"giant panda\", \"black\").\nHas_color(\"giant panda\", \"white\").\nHas_color(\"yin yang\", \"black\").\nHas_color(\"yin yang\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"giant panda\", color1), Has_color(\"yin yang\", color2), color1 != color2.\n.output Answer"]}
{"id": 1605, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Persian Gulf War\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Elizabeth II is the Queen\", 60).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Elizabeth II is the Queen\", n_years1), Last_n_years(\"Persian Gulf War\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Persian Gulf War\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Elizabeth II is the Queen\", 60).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Elizabeth II is the Queen\", n_years1), Last_n_years(\"Persian Gulf War\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1606, "answer": true, "completion": ".decl Has_effect(Drug:symbol, Effect:symbol)\nHas_effect(\"Modafinil\", \"increase alertness\").\nHas_effect(\"Modafinil\", \"increase wakefulness\").\nHas_effect(\"Modafinil\", \"decrease fatigue\").\nHas_effect(\"Modafinil\", \"decrease sleepiness\").\nHas_effect(\"Modafinil\", \"decrease drowsiness\").\nHas_effect(\"Modafinil\", \"decrease sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").", "completions": [".decl Has_effect(Drug:symbol, Effect:symbol)\nHas_effect(\"Modafinil\", \"increase alertness\").\nHas_effect(\"Modafinil\", \"increase wakefulness\").\nHas_effect(\"Modafinil\", \"decrease fatigue\").\nHas_effect(\"Modafinil\", \"decrease sleepiness\").\nHas_effect(\"Modafinil\", \"decrease drowsiness\").\nHas_effect(\"Modafinil\", \"decrease sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep\").\nHas_effect(\"Modafinil\", \"increase wakefulness during sleep deprivation\")."]}
{"id": 1607, "answer": true, "completion": ".decl Uses_utensil(Food:symbol, Utensil:symbol)\nUses_utensil(\"spaghetti\", \"fork\").\n.decl Answer()\nAnswer() :- Uses_utensil(\"spaghetti\", \"fork\"), !.\n.output Answer", "completions": [".decl Uses_utensil(Food:symbol, Utensil:symbol)\nUses_utensil(\"spaghetti\", \"fork\").\n.decl Answer()\nAnswer() :- Uses_utensil(\"spaghetti\", \"fork\"), !.\n.output Answer"]}
{"id": 1608, "answer": false, "completion": ".decl Is_natural_born_citizen(Person:symbol)\nIs_natural_born_citizen(\"Barack Obama\").\n.decl Answer()\nAnswer() :- Is_natural_born_citizen(\"Arnold Schwarzenegger\").\n.output Answer", "completions": [".decl Is_natural_born_citizen(Person:symbol)\nIs_natural_born_citizen(\"Barack Obama\").\n.decl Answer()\nAnswer() :- Is_natural_born_citizen(\"Arnold Schwarzenegger\").\n.output Answer"]}
{"id": 1609, "answer": false, "completion": ".decl Has_percentage(Group:symbol, Percentage:float)\nHas_percentage(\"Christianity\", 70).\nHas_percentage(\"atheism\", 5).\n.decl Answer()\nAnswer() :- Has_percentage(\"Christianity\", percentage1), Has_percentage(\"atheism\", percentage2), percentage2 > percentage1.\nAnswer() :- Has_percentage(\"Christianity\", percentage1), Has_percentage(\"atheism\", percentage2), percentage2 = percentage1 + 5.\n.output Answer", "completions": [".decl Has_percentage(Group:symbol, Percentage:float)\nHas_percentage(\"Christianity\", 70).\nHas_percentage(\"atheism\", 5).\n.decl Answer()\nAnswer() :- Has_percentage(\"Christianity\", percentage1), Has_percentage(\"atheism\", percentage2), percentage2 > percentage1.\nAnswer() :- Has_percentage(\"Christianity\", percentage1), Has_percentage(\"atheism\", percentage2), percentage2 = percentage1 + 5.\n.output Answer"]}
{"id": 1610, "answer": false, "completion": ".decl Takes_place_in_period(Film:symbol, Period:symbol)\nTakes_place_in_period(\"War Horse\", \"World War I\").\nTakes_place_in_period(\"Saving Private Ryan\", \"World War II\").\n.decl Answer()\nAnswer() :- Takes_place_in_period(\"Saving Private Ryan\", period1), Takes_place_in_period(\"War Horse\", period2), period1 > period2.\n.output Answer", "completions": [".decl Takes_place_in_period(Film:symbol, Period:symbol)\nTakes_place_in_period(\"War Horse\", \"World War I\").\nTakes_place_in_period(\"Saving Private Ryan\", \"World War II\").\n.decl Answer()\nAnswer() :- Takes_place_in_period(\"Saving Private Ryan\", period1), Takes_place_in_period(\"War Horse\", period2), period1 > period2.\n.output Answer"]}
{"id": 1611, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"bear pelts\", \"Autumn\").\nHappens_in_season(\"bear pelts\", \"Winter\").\n.decl Happens_in_country(Event:symbol, Country:symbol)\nHappens_in_country(\"bear pelts\", \"US\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"bear pelts\", \"Autumn\"), Happens_in_country(\"bear pelts\", \"US\").\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"bear pelts\", \"Autumn\").\nHappens_in_season(\"bear pelts\", \"Winter\").\n.decl Happens_in_country(Event:symbol, Country:symbol)\nHappens_in_country(\"bear pelts\", \"US\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"bear pelts\", \"Autumn\"), Happens_in_country(\"bear pelts\", \"US\").\n.output Answer"]}
{"id": 1612, "answer": true, "completion": ".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Rich\", \"alcoholic\").\nHas_parent(\"Morty\", \"alcoholic\").\n.decl Triggered_for_children_of(Person:symbol, Parent:symbol)\nTriggered_for_children_of(\"Rich\", \"alcoholic\").\nTriggered_for_children_of(\"Morty\", \"alcoholic\").\n.decl Answer()\nAnswer() :- Has_parent(person, \"alcoholic\"), Triggered_for_children_of(person, \"alcoholic\").\n.output Answer", "completions": [".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Rich\", \"alcoholic\").\nHas_parent(\"Morty\", \"alcoholic\").\n.decl Triggered_for_children_of(Person:symbol, Parent:symbol)\nTriggered_for_children_of(\"Rich\", \"alcoholic\").\nTriggered_for_children_of(\"Morty\", \"alcoholic\").\n.decl Answer()\nAnswer() :- Has_parent(person, \"alcoholic\"), Triggered_for_children_of(person, \"alcoholic\").\n.output Answer"]}
{"id": 1613, "answer": false, "completion": ".decl Is_American(Person:symbol)\nIs_American(\"John\").\nIs_American(\"Mary\").\nIs_American(\"Mike\").\n.decl Uses_wheelchair(Person:symbol)\nUses_wheelchair(\"John\").\nUses_wheelchair(\"Mary\").\n.decl Knows_ADA(Person:symbol)\nKnows_ADA(\"John\").\nKnows_ADA(\"Mike\").\n.decl Answer()\nAnswer() :- Is_American(person), Uses_wheelchair(person), Knows_ADA(person).\n.output Answer", "completions": [".decl Is_American(Person:symbol)\nIs_American(\"John\").\nIs_American(\"Mary\").\nIs_American(\"Mike\").\n.decl Uses_wheelchair(Person:symbol)\nUses_wheelchair(\"John\").\nUses_wheelchair(\"Mary\").\n.decl Knows_ADA(Person:symbol)\nKnows_ADA(\"John\").\nKnows_ADA(\"Mike\").\n.decl Answer()\nAnswer() :- Is_American(person), Uses_wheelchair(person), Knows_ADA(person).\n.output Answer"]}
{"id": 1614, "answer": false, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"astrophotography\", \"winter\").\n.decl Happens_in_country(Event:symbol, Country:symbol)\nHappens_in_country(\"astrophotography\", \"Sweden\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"astrophotography\", season), Happens_in_country(\"astrophotography\", country), season != \"winter\".\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"astrophotography\", \"winter\").\n.decl Happens_in_country(Event:symbol, Country:symbol)\nHappens_in_country(\"astrophotography\", \"Sweden\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"astrophotography\", season), Happens_in_country(\"astrophotography\", country), season != \"winter\".\n.output Answer"]}
{"id": 1615, "answer": true, "completion": ".decl Has_birth_order(Person:symbol, Birth_order:float)\nHas_birth_order(\"Jane Austen\", 2).\n.decl Answer()\nAnswer() :- Has_birth_order(\"Jane Austen\", birth_order), birth_order > 1, birth_order < 4.\n.output Answer", "completions": [".decl Has_birth_order(Person:symbol, Birth_order:float)\nHas_birth_order(\"Jane Austen\", 2).\n.decl Answer()\nAnswer() :- Has_birth_order(\"Jane Austen\", birth_order), birth_order > 1, birth_order < 4.\n.output Answer"]}
{"id": 1616, "answer": false, "completion": ".decl Salutes(Person:symbol, Rank:symbol)\nSalutes(\"Gomer Pyle\", \"sergeant\").\nSalutes(\"Gomer Pyle\", \"corporal\").\nSalutes(\"Gomer Pyle\", \"private\").\n.decl Answer()\nAnswer() :- Salutes(\"Gomer Pyle\", rank1), Salutes(\"Gomer Pyle\", rank2), rank1 != rank2, rank1 < rank2.\n.output Answer", "completions": [".decl Salutes(Person:symbol, Rank:symbol)\nSalutes(\"Gomer Pyle\", \"sergeant\").\nSalutes(\"Gomer Pyle\", \"corporal\").\nSalutes(\"Gomer Pyle\", \"private\").\n.decl Answer()\nAnswer() :- Salutes(\"Gomer Pyle\", rank1), Salutes(\"Gomer Pyle\", rank2), rank1 != rank2, rank1 < rank2.\n.output Answer"]}
{"id": 1617, "answer": false, "completion": ".decl Lives_on(Organism:symbol, Planet:symbol)\nLives_on(\"Herpes simplex virus\", \"Earth\").\n.decl Answer()\nAnswer() :- Lives_on(\"Herpes simplex virus\", \"Venus\").\n.output Answer\n\n", "completions": [".decl Lives_on(Organism:symbol, Planet:symbol)\nLives_on(\"Herpes simplex virus\", \"Earth\").\n.decl Answer()\nAnswer() :- Lives_on(\"Herpes simplex virus\", \"Venus\").\n.output Answer\n\n"]}
{"id": 1618, "answer": false, "completion": ".decl Is_related(Language_A:symbol, Language_B:symbol)\nIs_related(\"Pig Latin\", \"English\").\nIs_related(\"Latin\", \"Italian\").\nIs_related(\"Latin\", \"Spanish\").\nIs_related(\"Latin\", \"French\").\n.decl Answer()\nAnswer() :- Is_related(\"Pig Latin\", \"Latin\").\nAnswer() :- Is_related(\"Pig Latin\", language1), Is_related(language1, \"Latin\").\n.output Answer", "completions": [".decl Is_related(Language_A:symbol, Language_B:symbol)\nIs_related(\"Pig Latin\", \"English\").\nIs_related(\"Latin\", \"Italian\").\nIs_related(\"Latin\", \"Spanish\").\nIs_related(\"Latin\", \"French\").\n.decl Answer()\nAnswer() :- Is_related(\"Pig Latin\", \"Latin\").\nAnswer() :- Is_related(\"Pig Latin\", language1), Is_related(language1, \"Latin\").\n.output Answer"]}
{"id": 1619, "answer": true, "completion": ".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Matt Damon\", \"heights\").\n.decl Is_afraid_of(Person:symbol, Activity:symbol)\nIs_afraid_of(\"Matt Damon\", \"parachuting\").\n.decl Answer()\nAnswer() :- Has_fear(\"Matt Damon\", fear), Is_afraid_of(\"Matt Damon\", activity), fear = activity.\n.output Answer\n\n", "completions": [".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Matt Damon\", \"heights\").\n.decl Is_afraid_of(Person:symbol, Activity:symbol)\nIs_afraid_of(\"Matt Damon\", \"parachuting\").\n.decl Answer()\nAnswer() :- Has_fear(\"Matt Damon\", fear), Is_afraid_of(\"Matt Damon\", activity), fear = activity.\n.output Answer\n\n"]}
{"id": 1620, "answer": false, "completion": ".decl Happens_during(Event:symbol, Time:symbol)\nHappens_during(\"pandemic\", \"2020\").\nHappens_during(\"door to door advertising\", \"2020\").\n.decl Answer()\nAnswer() :- Happens_during(\"pandemic\", \"2020\"), Happens_during(\"door to door advertising\", \"2020\").\n.output Answer", "completions": [".decl Happens_during(Event:symbol, Time:symbol)\nHappens_during(\"pandemic\", \"2020\").\nHappens_during(\"door to door advertising\", \"2020\").\n.decl Answer()\nAnswer() :- Happens_during(\"pandemic\", \"2020\"), Happens_during(\"door to door advertising\", \"2020\").\n.output Answer"]}
{"id": 1621, "answer": true, "completion": ".decl Uses_calendar(Person:symbol, Calendar:symbol)\nUses_calendar(\"Ivan the Terrible\", \"Byzantine calendar\").\n.decl Answer()\nAnswer() :- Uses_calendar(\"Ivan the Terrible\", \"Byzantine calendar\").\n.output Answer\n\n\n", "completions": [".decl Uses_calendar(Person:symbol, Calendar:symbol)\nUses_calendar(\"Ivan the Terrible\", \"Byzantine calendar\").\n.decl Answer()\nAnswer() :- Uses_calendar(\"Ivan the Terrible\", \"Byzantine calendar\").\n.output Answer\n\n\n"]}
{"id": 1622, "answer": true, "completion": ".decl Has_ingredient(Recipe:symbol, Ingredient:symbol)\nHas_ingredient(\"delicious recipe\", \"The Onion\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"delicious recipe\", \"The Onion\").\n.output Answer", "completions": [".decl Has_ingredient(Recipe:symbol, Ingredient:symbol)\nHas_ingredient(\"delicious recipe\", \"The Onion\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"delicious recipe\", \"The Onion\").\n.output Answer"]}
{"id": 1623, "answer": true, "completion": ".decl Has_ship(Person:symbol, Ship:symbol)\nHas_ship(\"The Doctor\", \"TARDIS\").\n.decl Has_home(Person:symbol, Home:symbol)\nHas_home(\"The Doctor\", \"Gallifrey\").\n.decl Answer()\nAnswer() :- Has_ship(\"The Doctor\", \"TARDIS\"), Has_home(\"The Doctor\", \"Gallifrey\").\n.output Answer", "completions": [".decl Has_ship(Person:symbol, Ship:symbol)\nHas_ship(\"The Doctor\", \"TARDIS\").\n.decl Has_home(Person:symbol, Home:symbol)\nHas_home(\"The Doctor\", \"Gallifrey\").\n.decl Answer()\nAnswer() :- Has_ship(\"The Doctor\", \"TARDIS\"), Has_home(\"The Doctor\", \"Gallifrey\").\n.output Answer"]}
{"id": 1624, "answer": false, "completion": ".decl Meets(Person1:symbol, Person2:symbol)\nMeets(\"Francois Mitterrand\", \"Ronald Reagan\").\nMeets(\"Francois Mitterrand\", \"Margaret Thatcher\").\nMeets(\"Francois Mitterrand\", \"Mikhail Gorbachev\").\nMeets(\"Barak Obama\", \"George W. Bush\").\nMeets(\"Barak Obama\", \"Dalai Lama\").\n.decl Holds_position(Person:symbol, Position:symbol)\nHolds_position(\"Francois Mitterrand\", \"President\").\nHolds_position(\"Barak Obama\", \"President\").\n.decl Answer()\nAnswer() :- Meets(\"Francois Mitterrand\", \"Barak Obama\"), Holds_position(\"Francois Mitterrand\", \"President\"), Holds_position(\"Barak Obama\", \"President\").\n.output Answer", "completions": [".decl Meets(Person1:symbol, Person2:symbol)\nMeets(\"Francois Mitterrand\", \"Ronald Reagan\").\nMeets(\"Francois Mitterrand\", \"Margaret Thatcher\").\nMeets(\"Francois Mitterrand\", \"Mikhail Gorbachev\").\nMeets(\"Barak Obama\", \"George W. Bush\").\nMeets(\"Barak Obama\", \"Dalai Lama\").\n.decl Holds_position(Person:symbol, Position:symbol)\nHolds_position(\"Francois Mitterrand\", \"President\").\nHolds_position(\"Barak Obama\", \"President\").\n.decl Answer()\nAnswer() :- Meets(\"Francois Mitterrand\", \"Barak Obama\"), Holds_position(\"Francois Mitterrand\", \"President\"), Holds_position(\"Barak Obama\", \"President\").\n.output Answer"]}
{"id": 1625, "answer": false, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 1626, "answer": false, "completion": ".decl Needs(Activity:symbol, Object:symbol)\nNeeds(\"parachuting\", \"coal\").\n.decl Answer()\nAnswer() :- Needs(\"parachuting\", \"coal\").\n.output Answer", "completions": [".decl Needs(Activity:symbol, Object:symbol)\nNeeds(\"parachuting\", \"coal\").\n.decl Answer()\nAnswer() :- Needs(\"parachuting\", \"coal\").\n.output Answer"]}
{"id": 1627, "answer": true, "completion": ".decl Makes(Company:symbol, Product:symbol)\nMakes(\"Apple\", \"Apple Watch\").\nMakes(\"Apple\", \"iPhone\").\nMakes(\"Apple\", \"iPad\").\nMakes(\"Apple\", \"Mac\").\nMakes(\"Apple\", \"MacBook\").\nMakes(\"Apple\", \"MacBook Air\").\nMakes(\"Apple\", \"MacBook Pro\").\nMakes(\"Apple\", \"iMac\").\nMakes(\"Apple\", \"iMac Pro\").\nMakes(\"Apple\", \"Mac mini\").\nMakes(\"Apple\", \"Mac Pro\").\nMakes(\"Apple\", \"Apple TV\").\nMakes(\"Apple\", \"Apple TV 4K\").\nMakes(\"Apple\", \"HomePod\").\nMakes(\"Apple\", \"iPod touch\").\nMakes(\"Apple\", \"iPod nano\").\nMakes(\"Apple\", \"iPod shuffle\").\nMakes(\"Apple\", \"iPod classic\").\nMakes(\"Apple\", \"AirPods\").\nMakes(\"Apple\", \"AirPods Pro\").\nMakes(\"Apple\", \"Beats Solo Pro\").\nMakes(\"Apple\", \"Beats Solo 3 Wireless\").\nMakes(\"Apple\", \"Beats Studio 3 Wireless\").\nMakes(\"Apple\", \"Beats EP\").\nMakes(\"Apple\", \"Beats Pro\").\nMakes(\"Apple\", \"Beats Solo 2\").\nMakes(\"Apple\", \"Beats Solo\").\nMakes(\"Apple\", \"Beats Pill\").\nMakes(\"Apple\", \"BeatsX\").\nMakes(\"Apple\", \"Powerbeats Pro\").\nMakes(\"Apple\", \"Powerbeats\").\nMakes(\"Apple\", \"Powerbeats 3 Wireless\").\nMakes(\"Apple\", \"Beats urBeats\").\nMakes(\"Apple\", \"Beats urBeats 3\").\nMakes(\"Apple\", \"Beats urBeats 2\").\nMakes(\"Apple\", \"Beats urBeats\").\nMakes(\"Apple\", \"Beats Tour\").\nMakes(\"Apple\", \"Beats Tour 2\").\nMakes(\"Apple\", \"Beats Tour\").\nMakes(\"Apple\", \"Beats Pill+\").\nMakes(\"Apple\", \"Beats Pill\").\nMakes(\"Apple\", \"Beats Mixr\").\nMakes(\"Apple\", \"Beats Solo 2 Wireless\").\nMakes(\"Apple\", \"Beats Solo Wireless\").\nMakes(\"Apple\", \"Beats Solo\").\nMakes(\"Apple\", \"Beats Executive\").\nMakes(\"Apple\", \"Beats Solo HD\").\nMakes(\"Apple\", \"Beats Solo\").\nMakes(\"Apple\", \"Beats by Dr. Dre\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo2\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo2 Wireless\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo3 Wireless\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo Pro\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo HD\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo Wireless\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo2\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo2 Wireless\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo3 Wireless\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo Pro\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo HD\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo\").\nMakes", "completions": [".decl Makes(Company:symbol, Product:symbol)\nMakes(\"Apple\", \"Apple Watch\").\nMakes(\"Apple\", \"iPhone\").\nMakes(\"Apple\", \"iPad\").\nMakes(\"Apple\", \"Mac\").\nMakes(\"Apple\", \"MacBook\").\nMakes(\"Apple\", \"MacBook Air\").\nMakes(\"Apple\", \"MacBook Pro\").\nMakes(\"Apple\", \"iMac\").\nMakes(\"Apple\", \"iMac Pro\").\nMakes(\"Apple\", \"Mac mini\").\nMakes(\"Apple\", \"Mac Pro\").\nMakes(\"Apple\", \"Apple TV\").\nMakes(\"Apple\", \"Apple TV 4K\").\nMakes(\"Apple\", \"HomePod\").\nMakes(\"Apple\", \"iPod touch\").\nMakes(\"Apple\", \"iPod nano\").\nMakes(\"Apple\", \"iPod shuffle\").\nMakes(\"Apple\", \"iPod classic\").\nMakes(\"Apple\", \"AirPods\").\nMakes(\"Apple\", \"AirPods Pro\").\nMakes(\"Apple\", \"Beats Solo Pro\").\nMakes(\"Apple\", \"Beats Solo 3 Wireless\").\nMakes(\"Apple\", \"Beats Studio 3 Wireless\").\nMakes(\"Apple\", \"Beats EP\").\nMakes(\"Apple\", \"Beats Pro\").\nMakes(\"Apple\", \"Beats Solo 2\").\nMakes(\"Apple\", \"Beats Solo\").\nMakes(\"Apple\", \"Beats Pill\").\nMakes(\"Apple\", \"BeatsX\").\nMakes(\"Apple\", \"Powerbeats Pro\").\nMakes(\"Apple\", \"Powerbeats\").\nMakes(\"Apple\", \"Powerbeats 3 Wireless\").\nMakes(\"Apple\", \"Beats urBeats\").\nMakes(\"Apple\", \"Beats urBeats 3\").\nMakes(\"Apple\", \"Beats urBeats 2\").\nMakes(\"Apple\", \"Beats urBeats\").\nMakes(\"Apple\", \"Beats Tour\").\nMakes(\"Apple\", \"Beats Tour 2\").\nMakes(\"Apple\", \"Beats Tour\").\nMakes(\"Apple\", \"Beats Pill+\").\nMakes(\"Apple\", \"Beats Pill\").\nMakes(\"Apple\", \"Beats Mixr\").\nMakes(\"Apple\", \"Beats Solo 2 Wireless\").\nMakes(\"Apple\", \"Beats Solo Wireless\").\nMakes(\"Apple\", \"Beats Solo\").\nMakes(\"Apple\", \"Beats Executive\").\nMakes(\"Apple\", \"Beats Solo HD\").\nMakes(\"Apple\", \"Beats Solo\").\nMakes(\"Apple\", \"Beats by Dr. Dre\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo2\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo2 Wireless\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo3 Wireless\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo Pro\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo HD\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo Wireless\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo2\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo2 Wireless\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo3 Wireless\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo Pro\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo HD\").\nMakes(\"Apple\", \"Beats by Dr. Dre Solo\").\nMakes"]}
{"id": 1628, "answer": false, "completion": ".decl Answer()\nAnswer() :- !Has_density(\"pig\", density1), !Has_density(\"pig latin\", density2), density1 > density2.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !Has_density(\"pig\", density1), !Has_density(\"pig latin\", density2), density1 > density2.\n.output Answer"]}
{"id": 1629, "answer": false, "completion": ".decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"America\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Canada\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Mexico\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Australia\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"New Zealand\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"England\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Ireland\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Scotland\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Wales\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"France\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Germany\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Switzerland\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Italy\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Greece\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Spain\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Portugal\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Netherlands\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Belgium\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Luxembourg\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Denmark\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Norway\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Sweden\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Finland\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Iceland\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Estonia\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Latvia\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Lithuania\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"", "completions": [".decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"America\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Canada\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Mexico\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Australia\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"New Zealand\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"England\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Ireland\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Scotland\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Wales\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"France\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Germany\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Switzerland\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Italy\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Greece\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Spain\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Portugal\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Netherlands\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Belgium\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Luxembourg\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Denmark\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Norway\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Sweden\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Finland\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Iceland\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Estonia\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Latvia\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\"Michael Jordan\", \"Lithuania\").\n.decl Is_legal(Person:symbol, Country:symbol)\nIs_legal(\""]}
{"id": 1630, "answer": false, "completion": ".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"Jacques Duèze\", 1215).\nHas_birth_year(\"Richard Dawkins\", 1941).\n.decl Answer()\nAnswer() :- Has_birth_year(\"Jacques Duèze\", birth_year1), Has_birth_year(\"Richard Dawkins\", birth_year2), birth_year1 < birth_year2.\n.output Answer", "completions": [".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"Jacques Duèze\", 1215).\nHas_birth_year(\"Richard Dawkins\", 1941).\n.decl Answer()\nAnswer() :- Has_birth_year(\"Jacques Duèze\", birth_year1), Has_birth_year(\"Richard Dawkins\", birth_year2), birth_year1 < birth_year2.\n.output Answer"]}
{"id": 1631, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"spider\", \"parasite\").\n.decl Answer()\nAnswer() :- Eats(animal, \"parasite\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"spider\", \"parasite\").\n.decl Answer()\nAnswer() :- Eats(animal, \"parasite\").\n.output Answer"]}
{"id": 1632, "answer": true, "completion": ".decl Needs(Industry:symbol, Animal:symbol)\nNeeds(\"butter industry\", \"cow\").\n.decl Answer()\nAnswer() :- Needs(\"butter industry\", animal), !Happens(\"cow extinction\").\n.output Answer", "completions": [".decl Needs(Industry:symbol, Animal:symbol)\nNeeds(\"butter industry\", \"cow\").\n.decl Answer()\nAnswer() :- Needs(\"butter industry\", animal), !Happens(\"cow extinction\").\n.output Answer"]}
{"id": 1633, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"chipmunk\", 0.01).\nHas_volume(\"chocolate chip\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"chipmunk\", volume1), Has_volume(\"chocolate chip\", volume2), volume1 >= 100*volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"chipmunk\", 0.01).\nHas_volume(\"chocolate chip\", 0.00001).\n.decl Answer()\nAnswer() :- Has_volume(\"chipmunk\", volume1), Has_volume(\"chocolate chip\", volume2), volume1 >= 100*volume2.\n.output Answer"]}
{"id": 1634, "answer": false, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Dorton Arena\", 19000).\n.decl Passes_through(Station:symbol, Number_of_people:float)\nPasses_through(\"30th Street Station\", 30000).\n.decl Answer()\nAnswer() :- Passes_through(\"30th Street Station\", number_of_people), Has_capacity(\"Dorton Arena\", capacity), number_of_people <= capacity.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Dorton Arena\", 19000).\n.decl Passes_through(Station:symbol, Number_of_people:float)\nPasses_through(\"30th Street Station\", 30000).\n.decl Answer()\nAnswer() :- Passes_through(\"30th Street Station\", number_of_people), Has_capacity(\"Dorton Arena\", capacity), number_of_people <= capacity.\n.output Answer"]}
{"id": 1635, "answer": false, "completion": ".decl Has_toxicity(Food:symbol, Toxicity:float)\nHas_toxicity(\"basil\", 0).\nHas_toxicity(\"Hypervitaminosis D\", 0).\n.decl Answer()\nAnswer() :- Has_toxicity(\"basil\", toxicity1), Has_toxicity(\"Hypervitaminosis D\", toxicity2), toxicity1 > toxicity2.\n.output Answer", "completions": [".decl Has_toxicity(Food:symbol, Toxicity:float)\nHas_toxicity(\"basil\", 0).\nHas_toxicity(\"Hypervitaminosis D\", 0).\n.decl Answer()\nAnswer() :- Has_toxicity(\"basil\", toxicity1), Has_toxicity(\"Hypervitaminosis D\", toxicity2), toxicity1 > toxicity2.\n.output Answer"]}
{"id": 1636, "answer": false, "completion": ".decl Spoken_in_country(Language:symbol, Country:symbol)\nSpoken_in_country(\"Cantonese\", \"China\").\n.decl Answer()\nAnswer() :- Spoken_in_country(\"Cantonese\", \"Japan\").\n.output Answer", "completions": [".decl Spoken_in_country(Language:symbol, Country:symbol)\nSpoken_in_country(\"Cantonese\", \"China\").\n.decl Answer()\nAnswer() :- Spoken_in_country(\"Cantonese\", \"Japan\").\n.output Answer"]}
{"id": 1637, "answer": false, "completion": ".decl Knows_about(Person:symbol, Event:symbol)\nKnows_about(\"Amy Winehouse\", \"Brexit\").\n.decl Answer()\nAnswer() :- Knows_about(\"Amy Winehouse\", \"Brexit\").\n.output Answer", "completions": [".decl Knows_about(Person:symbol, Event:symbol)\nKnows_about(\"Amy Winehouse\", \"Brexit\").\n.decl Answer()\nAnswer() :- Knows_about(\"Amy Winehouse\", \"Brexit\").\n.output Answer"]}
{"id": 1638, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Blue\", \"Blue\").\nHas_color(\"Red\", \"Red\").\nHas_color(\"Yellow\", \"Yellow\").\nHas_color(\"Green\", \"Green\").\nHas_color(\"Purple\", \"Purple\").\nHas_color(\"Pink\", \"Pink\").\nHas_color(\"Orange\", \"Orange\").\nHas_color(\"Brown\", \"Brown\").\nHas_color(\"White\", \"White\").\nHas_color(\"Black\", \"Black\").\n.decl Has_price(Object:symbol, Price:float)\nHas_price(\"Blue\", 100).\nHas_price(\"Red\", 100).\nHas_price(\"Yellow\", 100).\nHas_price(\"Green\", 100).\nHas_price(\"Purple\", 100).\nHas_price(\"Pink\", 100).\nHas_price(\"Orange\", 100).\nHas_price(\"Brown\", 100).\nHas_price(\"White\", 100).\nHas_price(\"Black\", 100).\n.decl Answer()\nAnswer() :- Has_color(color1, \"Blue\"), Has_price(color1, price1), Has_color(color2, color1), Has_price(color2, price2), price1 >= price2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Blue\", \"Blue\").\nHas_color(\"Red\", \"Red\").\nHas_color(\"Yellow\", \"Yellow\").\nHas_color(\"Green\", \"Green\").\nHas_color(\"Purple\", \"Purple\").\nHas_color(\"Pink\", \"Pink\").\nHas_color(\"Orange\", \"Orange\").\nHas_color(\"Brown\", \"Brown\").\nHas_color(\"White\", \"White\").\nHas_color(\"Black\", \"Black\").\n.decl Has_price(Object:symbol, Price:float)\nHas_price(\"Blue\", 100).\nHas_price(\"Red\", 100).\nHas_price(\"Yellow\", 100).\nHas_price(\"Green\", 100).\nHas_price(\"Purple\", 100).\nHas_price(\"Pink\", 100).\nHas_price(\"Orange\", 100).\nHas_price(\"Brown\", 100).\nHas_price(\"White\", 100).\nHas_price(\"Black\", 100).\n.decl Answer()\nAnswer() :- Has_color(color1, \"Blue\"), Has_price(color1, price1), Has_color(color2, color1), Has_price(color2, price2), price1 >= price2.\n.output Answer"]}
{"id": 1639, "answer": false, "completion": ".decl Was_written_in_year(Book:symbol, Year:float)\nWas_written_in_year(\"The Canterbury Tales\", 1387).\nWas_written_in_year(\"One Thousand and One Nights\", 1350).\n.decl Answer()\nAnswer() :- Was_written_in_year(\"The Canterbury Tales\", year1), Was_written_in_year(\"One Thousand and One Nights\", year2), year1 > year2.\n.output Answer", "completions": [".decl Was_written_in_year(Book:symbol, Year:float)\nWas_written_in_year(\"The Canterbury Tales\", 1387).\nWas_written_in_year(\"One Thousand and One Nights\", 1350).\n.decl Answer()\nAnswer() :- Was_written_in_year(\"The Canterbury Tales\", year1), Was_written_in_year(\"One Thousand and One Nights\", year2), year1 > year2.\n.output Answer"]}
{"id": 1640, "answer": false, "completion": ".decl Has_n_layers(Organism:symbol, N_layers:float)\nHas_n_layers(\"cnidarians\", 1).\nHas_n_layers(\"humans\", 3).\n.decl Answer()\nAnswer() :- Has_n_layers(\"cnidarians\", n_layers1), Has_n_layers(\"humans\", n_layers2), n_layers1 < n_layers2.\n.output Answer", "completions": [".decl Has_n_layers(Organism:symbol, N_layers:float)\nHas_n_layers(\"cnidarians\", 1).\nHas_n_layers(\"humans\", 3).\n.decl Answer()\nAnswer() :- Has_n_layers(\"cnidarians\", n_layers1), Has_n_layers(\"humans\", n_layers2), n_layers1 < n_layers2.\n.output Answer"]}
{"id": 1641, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"civil war\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Little Women\", 2).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Little Women\", n_years1), Last_n_years(\"civil war\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"civil war\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Little Women\", 2).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Little Women\", n_years1), Last_n_years(\"civil war\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1642, "answer": false, "completion": ".decl Explodes(Object:symbol)\n.decl Answer()\nAnswer() :- Explodes(\"sloth\").\n.output Answer", "completions": [".decl Explodes(Object:symbol)\n.decl Answer()\nAnswer() :- Explodes(\"sloth\").\n.output Answer"]}
{"id": 1643, "answer": false, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Philadelphia Eagles game\", \"Lincoln Financial Field\").\nHappens_in_location(\"birdwatching\", \"forest\").\nHappens_in_location(\"birdwatching\", \"park\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"birdwatching\", \"Lincoln Financial Field\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Philadelphia Eagles game\", \"Lincoln Financial Field\").\nHappens_in_location(\"birdwatching\", \"forest\").\nHappens_in_location(\"birdwatching\", \"park\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"birdwatching\", \"Lincoln Financial Field\").\n.output Answer"]}
{"id": 1644, "answer": true, "completion": ".decl Threatened_by(Life_form:symbol, Pigment:symbol)\nThreatened_by(\"fungal life-form\", \"copper pigment\").\n.decl Answer()\nAnswer() :- Threatened_by(\"fungal life-form\", \"copper pigment\").\n.output Answer", "completions": [".decl Threatened_by(Life_form:symbol, Pigment:symbol)\nThreatened_by(\"fungal life-form\", \"copper pigment\").\n.decl Answer()\nAnswer() :- Threatened_by(\"fungal life-form\", \"copper pigment\").\n.output Answer"]}
{"id": 1645, "answer": false, "completion": ".decl Close_to(Land:symbol, Beaver_dam:symbol)\nClose_to(\"land\", \"beaver dam\").\n.decl Suffers(Land:symbol)\nSuffers(\"land\").\n.decl Answer()\nAnswer() :- Close_to(land, \"beaver dam\"), Suffers(land).\n.output Answer", "completions": [".decl Close_to(Land:symbol, Beaver_dam:symbol)\nClose_to(\"land\", \"beaver dam\").\n.decl Suffers(Land:symbol)\nSuffers(\"land\").\n.decl Answer()\nAnswer() :- Close_to(land, \"beaver dam\"), Suffers(land).\n.output Answer"]}
{"id": 1646, "answer": false, "completion": ".decl Needs_oxygen(Organism:symbol)\nNeeds_oxygen(\"plants\").\nNeeds_oxygen(\"humans\").\n.decl Answer()\nAnswer() :- Needs_oxygen(\"plants\"), !, Needs_oxygen(\"humans\").\n.output Answer", "completions": [".decl Needs_oxygen(Organism:symbol)\nNeeds_oxygen(\"plants\").\nNeeds_oxygen(\"humans\").\n.decl Answer()\nAnswer() :- Needs_oxygen(\"plants\"), !, Needs_oxygen(\"humans\").\n.output Answer"]}
{"id": 1647, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Illuminati card game\", 20).\n.decl Answer()\nAnswer() :- Last_n_years(\"Illuminati card game\", n_years), n_years >= 0.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Illuminati card game\", 20).\n.decl Answer()\nAnswer() :- Last_n_years(\"Illuminati card game\", n_years), n_years >= 0.\n.output Answer"]}
{"id": 1648, "answer": true, "completion": ".decl Holds(Person:symbol, Object:symbol)\nHolds(\"Bing\", \"basket\").\n.decl Answer()\nAnswer() :- Holds(\"Bing\", \"basket\").\n.output Answer", "completions": [".decl Holds(Person:symbol, Object:symbol)\nHolds(\"Bing\", \"basket\").\n.decl Answer()\nAnswer() :- Holds(\"Bing\", \"basket\").\n.output Answer"]}
{"id": 1649, "answer": false, "completion": ".decl Opens_in_month(Facility:symbol, Month:symbol)\nOpens_in_month(\"Parc des Princes\", \"June\").\n.decl Answer()\nAnswer() :- Opens_in_month(\"Parc des Princes\", \"June\").\n.output Answer", "completions": [".decl Opens_in_month(Facility:symbol, Month:symbol)\nOpens_in_month(\"Parc des Princes\", \"June\").\n.decl Answer()\nAnswer() :- Opens_in_month(\"Parc des Princes\", \"June\").\n.output Answer"]}
{"id": 1650, "answer": false, "completion": ".decl Hypothetically_refuses_to_sponsor(Company:symbol, Event:symbol)\nHypothetically_refuses_to_sponsor(\"Chick-fil-A\", \"Pride parade\").\n.decl Answer()\nAnswer() :- Hypothetically_refuses_to_sponsor(\"Chick-fil-A\", \"Pride parade\").\n.output Answer", "completions": [".decl Hypothetically_refuses_to_sponsor(Company:symbol, Event:symbol)\nHypothetically_refuses_to_sponsor(\"Chick-fil-A\", \"Pride parade\").\n.decl Answer()\nAnswer() :- Hypothetically_refuses_to_sponsor(\"Chick-fil-A\", \"Pride parade\").\n.output Answer"]}
{"id": 1651, "answer": true, "completion": ".decl Part_of(Region:symbol, Country:symbol)\nPart_of(\"Great Lakes\", \"United States\").\nPart_of(\"Great Lakes\", \"Canada\").\n.decl Answer()\nAnswer() :- Part_of(\"Great Lakes\", \"United States\"), Part_of(\"Great Lakes\", \"Canada\").\n.output Answer", "completions": [".decl Part_of(Region:symbol, Country:symbol)\nPart_of(\"Great Lakes\", \"United States\").\nPart_of(\"Great Lakes\", \"Canada\").\n.decl Answer()\nAnswer() :- Part_of(\"Great Lakes\", \"United States\"), Part_of(\"Great Lakes\", \"Canada\").\n.output Answer"]}
{"id": 1652, "answer": false, "completion": ".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Jon Brower Minnoch\", 1337).\n.decl Has_height(Person:symbol, Height:float)\nHas_height(\"Jon Brower Minnoch\", 2.72).\n.decl Answer()\nAnswer() :- Has_weight(\"Jon Brower Minnoch\", weight), Has_height(\"Jon Brower Minnoch\", height), weight / height^2 < 18.5.\n.output Answer", "completions": [".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Jon Brower Minnoch\", 1337).\n.decl Has_height(Person:symbol, Height:float)\nHas_height(\"Jon Brower Minnoch\", 2.72).\n.decl Answer()\nAnswer() :- Has_weight(\"Jon Brower Minnoch\", weight), Has_height(\"Jon Brower Minnoch\", height), weight / height^2 < 18.5.\n.output Answer"]}
{"id": 1653, "answer": true, "completion": ".decl Signed(Person:symbol, Document:symbol)\nSigned(\"Larry King\", \"Magna Carta\").\n.decl Answer()\nAnswer() :- Signed(\"Larry King\", \"Magna Carta\").\n.output Answer", "completions": [".decl Signed(Person:symbol, Document:symbol)\nSigned(\"Larry King\", \"Magna Carta\").\n.decl Answer()\nAnswer() :- Signed(\"Larry King\", \"Magna Carta\").\n.output Answer"]}
{"id": 1654, "answer": true, "completion": ".decl Has_name_origin(Object:symbol, Origin:symbol)\nHas_name_origin(\"Phobos\", \"Greek\").\nHas_name_origin(\"Pavor\", \"Roman\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Phobos\", \"Greek\"), Has_name_origin(\"Pavor\", \"Roman\").\n.output Answer", "completions": [".decl Has_name_origin(Object:symbol, Origin:symbol)\nHas_name_origin(\"Phobos\", \"Greek\").\nHas_name_origin(\"Pavor\", \"Roman\").\n.decl Answer()\nAnswer() :- Has_name_origin(\"Phobos\", \"Greek\"), Has_name_origin(\"Pavor\", \"Roman\").\n.output Answer"]}
{"id": 1655, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"honey badger\", \"snake\").\n.decl Answer()\nAnswer() :- Eats(animal, \"snake\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"honey badger\", \"snake\").\n.decl Answer()\nAnswer() :- Eats(animal, \"snake\").\n.output Answer"]}
{"id": 1656, "answer": true, "completion": ".decl Has_anatomy(Animal:symbol, Anatomy:symbol)\nHas_anatomy(\"honey badger\", \"short legs\").\nHas_anatomy(\"honey badger\", \"short tail\").\nHas_anatomy(\"honey badger\", \"long body\").\nHas_anatomy(\"honey badger\", \"black and white stripes\").\nHas_anatomy(\"hyena\", \"short legs\").\nHas_anatomy(\"hyena\", \"short tail\").\nHas_anatomy(\"hyena\", \"long body\").\nHas_anatomy(\"hyena\", \"spotted\").\n.decl Answer()\nAnswer() :- Has_anatomy(\"honey badger\", anatomy1), Has_anatomy(\"hyena\", anatomy2), anatomy1 != anatomy2.\n.output Answer", "completions": [".decl Has_anatomy(Animal:symbol, Anatomy:symbol)\nHas_anatomy(\"honey badger\", \"short legs\").\nHas_anatomy(\"honey badger\", \"short tail\").\nHas_anatomy(\"honey badger\", \"long body\").\nHas_anatomy(\"honey badger\", \"black and white stripes\").\nHas_anatomy(\"hyena\", \"short legs\").\nHas_anatomy(\"hyena\", \"short tail\").\nHas_anatomy(\"hyena\", \"long body\").\nHas_anatomy(\"hyena\", \"spotted\").\n.decl Answer()\nAnswer() :- Has_anatomy(\"honey badger\", anatomy1), Has_anatomy(\"hyena\", anatomy2), anatomy1 != anatomy2.\n.output Answer"]}
{"id": 1657, "answer": false, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 1658, "answer": true, "completion": ".decl Is_Muslim(Country:symbol)\nIs_Muslim(\"Egypt\").\nIs_Muslim(\"Iran\").\nIs_Muslim(\"Iraq\").\nIs_Muslim(\"Jordan\").\nIs_Muslim(\"Lebanon\").\nIs_Muslim(\"Pakistan\").\nIs_Muslim(\"Saudi Arabia\").\nIs_Muslim(\"Syria\").\nIs_Muslim(\"Yemen\").\n.decl Is_hostile_to(Country_A:symbol, Country_B:symbol)\nIs_hostile_to(\"Egypt\", \"Israel\").\nIs_hostile_to(\"Iran\", \"Israel\").\nIs_hostile_to(\"Iraq\", \"Israel\").\nIs_hostile_to(\"Jordan\", \"Israel\").\nIs_hostile_to(\"Lebanon\", \"Israel\").\nIs_hostile_to(\"Pakistan\", \"Israel\").\nIs_hostile_to(\"Saudi Arabia\", \"Israel\").\nIs_hostile_to(\"Syria\", \"Israel\").\nIs_hostile_to(\"Yemen\", \"Israel\").\n.decl Answer()\nAnswer() :- Is_Muslim(country), Is_hostile_to(country, \"Israel\").\n.output Answer", "completions": [".decl Is_Muslim(Country:symbol)\nIs_Muslim(\"Egypt\").\nIs_Muslim(\"Iran\").\nIs_Muslim(\"Iraq\").\nIs_Muslim(\"Jordan\").\nIs_Muslim(\"Lebanon\").\nIs_Muslim(\"Pakistan\").\nIs_Muslim(\"Saudi Arabia\").\nIs_Muslim(\"Syria\").\nIs_Muslim(\"Yemen\").\n.decl Is_hostile_to(Country_A:symbol, Country_B:symbol)\nIs_hostile_to(\"Egypt\", \"Israel\").\nIs_hostile_to(\"Iran\", \"Israel\").\nIs_hostile_to(\"Iraq\", \"Israel\").\nIs_hostile_to(\"Jordan\", \"Israel\").\nIs_hostile_to(\"Lebanon\", \"Israel\").\nIs_hostile_to(\"Pakistan\", \"Israel\").\nIs_hostile_to(\"Saudi Arabia\", \"Israel\").\nIs_hostile_to(\"Syria\", \"Israel\").\nIs_hostile_to(\"Yemen\", \"Israel\").\n.decl Answer()\nAnswer() :- Is_Muslim(country), Is_hostile_to(country, \"Israel\").\n.output Answer"]}
{"id": 1659, "answer": true, "completion": ".decl Has_account(Person:symbol, Website:symbol)\nHas_account(\"Kim Il-sung\", \"LinkedIn\").\n.decl Answer()\nAnswer() :- Has_account(\"Kim Il-sung\", \"LinkedIn\").\n.output Answer", "completions": [".decl Has_account(Person:symbol, Website:symbol)\nHas_account(\"Kim Il-sung\", \"LinkedIn\").\n.decl Answer()\nAnswer() :- Has_account(\"Kim Il-sung\", \"LinkedIn\").\n.output Answer"]}
{"id": 1660, "answer": true, "completion": ".decl Has_health_effect(Substance:symbol, Health_effect:symbol)\nHas_health_effect(\"ethanol\", \"negative\").\n.decl Answer()\nAnswer() :- Has_health_effect(\"ethanol\", health_effect), health_effect != \"positive\".\n.output Answer", "completions": [".decl Has_health_effect(Substance:symbol, Health_effect:symbol)\nHas_health_effect(\"ethanol\", \"negative\").\n.decl Answer()\nAnswer() :- Has_health_effect(\"ethanol\", health_effect), health_effect != \"positive\".\n.output Answer"]}
{"id": 1661, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Michael Jackson\", 11).\nHas_age(\"Tito Jackson\", 13).\nHas_age(\"Jermaine Jackson\", 14).\nHas_age(\"Marlon Jackson\", 12).\nHas_age(\"Randy Jackson\", 10).\n.decl Answer()\nAnswer() :- Has_age(\"Michael Jackson\", age1), Has_age(\"Tito Jackson\", age2), Has_age(\"Jermaine Jackson\", age3), Has_age(\"Marlon Jackson\", age4), Has_age(\"Randy Jackson\", age5), age1 + age2 + age3 + age4 + age5 >= 40.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Michael Jackson\", 11).\nHas_age(\"Tito Jackson\", 13).\nHas_age(\"Jermaine Jackson\", 14).\nHas_age(\"Marlon Jackson\", 12).\nHas_age(\"Randy Jackson\", 10).\n.decl Answer()\nAnswer() :- Has_age(\"Michael Jackson\", age1), Has_age(\"Tito Jackson\", age2), Has_age(\"Jermaine Jackson\", age3), Has_age(\"Marlon Jackson\", age4), Has_age(\"Randy Jackson\", age5), age1 + age2 + age3 + age4 + age5 >= 40.\n.output Answer"]}
{"id": 1662, "answer": true, "completion": ".decl Is_ingested(Object:symbol, Organ:symbol)\nIs_ingested(\"bee\", \"stomach\").\n.decl Destroys(Organ:symbol, Object:symbol)\nDestroys(\"stomach\", \"bee\").\n.decl Answer()\nAnswer() :- Is_ingested(object, \"stomach\"), Destroys(\"stomach\", object).\n.output Answer", "completions": [".decl Is_ingested(Object:symbol, Organ:symbol)\nIs_ingested(\"bee\", \"stomach\").\n.decl Destroys(Organ:symbol, Object:symbol)\nDestroys(\"stomach\", \"bee\").\n.decl Answer()\nAnswer() :- Is_ingested(object, \"stomach\"), Destroys(\"stomach\", object).\n.output Answer"]}
{"id": 1663, "answer": true, "completion": ".decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"Elon Musk\", \"physics\").\nKnows_about(\"Elon Musk\", \"astrology\").\n.decl Answer()\nAnswer() :- Knows_about(\"Elon Musk\", \"physics\"), !Knows_about(\"Elon Musk\", \"astrology\").\nAnswer() :- Knows_about(\"Elon Musk\", \"astrology\"), !Knows_about(\"Elon Musk\", \"physics\").\n.output Answer", "completions": [".decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"Elon Musk\", \"physics\").\nKnows_about(\"Elon Musk\", \"astrology\").\n.decl Answer()\nAnswer() :- Knows_about(\"Elon Musk\", \"physics\"), !Knows_about(\"Elon Musk\", \"astrology\").\nAnswer() :- Knows_about(\"Elon Musk\", \"astrology\"), !Knows_about(\"Elon Musk\", \"physics\").\n.output Answer"]}
{"id": 1664, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Coast to Coast AM\", 25).\nLast_n_years(\"Rush Limbaugh show\", 25).\n.decl Answer()\nAnswer() :- Last_n_years(\"Coast to Coast AM\", n_years1), Last_n_years(\"Rush Limbaugh show\", n_years2), n_years1 > n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Coast to Coast AM\", 25).\nLast_n_years(\"Rush Limbaugh show\", 25).\n.decl Answer()\nAnswer() :- Last_n_years(\"Coast to Coast AM\", n_years1), Last_n_years(\"Rush Limbaugh show\", n_years2), n_years1 > n_years2.\n.output Answer"]}
{"id": 1665, "answer": false, "completion": ".decl Has_label(Group:symbol, Label:symbol)\nHas_label(\"skills-training youth groups\", \"eagles\").\nHas_label(\"skills-training youth groups\", \"young bears\").\n.decl Answer()\nAnswer() :- Has_label(\"skills-training youth groups\", \"eagles\"), Has_label(\"skills-training youth groups\", \"young bears\").\n.output Answer", "completions": [".decl Has_label(Group:symbol, Label:symbol)\nHas_label(\"skills-training youth groups\", \"eagles\").\nHas_label(\"skills-training youth groups\", \"young bears\").\n.decl Answer()\nAnswer() :- Has_label(\"skills-training youth groups\", \"eagles\"), Has_label(\"skills-training youth groups\", \"young bears\").\n.output Answer"]}
{"id": 1666, "answer": true, "completion": ".decl Has_wind_speed(Event:symbol, Wind_speed:float)\nHas_wind_speed(\"hurricane force winds\", 74).\n.decl Requires_wind_speed(Activity:symbol, Wind_speed:float)\nRequires_wind_speed(\"parachuting amateurs\", 74).\n.decl Answer()\nAnswer() :- Has_wind_speed(\"hurricane force winds\", wind_speed1), Requires_wind_speed(\"parachuting amateurs\", wind_speed2), wind_speed1 >= wind_speed2.\n.output Answer", "completions": [".decl Has_wind_speed(Event:symbol, Wind_speed:float)\nHas_wind_speed(\"hurricane force winds\", 74).\n.decl Requires_wind_speed(Activity:symbol, Wind_speed:float)\nRequires_wind_speed(\"parachuting amateurs\", 74).\n.decl Answer()\nAnswer() :- Has_wind_speed(\"hurricane force winds\", wind_speed1), Requires_wind_speed(\"parachuting amateurs\", wind_speed2), wind_speed1 >= wind_speed2.\n.output Answer"]}
{"id": 1667, "answer": false, "completion": ".decl Washing_instructions(Material:symbol, Washing_instructions:symbol)\nWashing_instructions(\"wool\", \"hand wash only\").\n.decl Answer()\nAnswer() :- Washing_instructions(\"wool\", \"hand wash only\").\n.output Answer\n\n\n", "completions": [".decl Washing_instructions(Material:symbol, Washing_instructions:symbol)\nWashing_instructions(\"wool\", \"hand wash only\").\n.decl Answer()\nAnswer() :- Washing_instructions(\"wool\", \"hand wash only\").\n.output Answer\n\n\n"]}
{"id": 1668, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"ZIP code\", 5).\n.decl Answer()\nAnswer() :- Has_length(\"ZIP code\", length1), length1/2 < 5.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"ZIP code\", 5).\n.decl Answer()\nAnswer() :- Has_length(\"ZIP code\", length1), length1/2 < 5.\n.output Answer"]}
{"id": 1669, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"age of dinosaurs\", 65).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"history of Europe\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"history of Europe\", n_years1), Last_n_years(\"age of dinosaurs\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"age of dinosaurs\", 65).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"history of Europe\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"history of Europe\", n_years1), Last_n_years(\"age of dinosaurs\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1670, "answer": true, "completion": ".decl Died_of(Person:symbol, Cause:symbol)\nDied_of(\"Florence Nightingale\", \"natural causes\").\nDied_of(\"Saint Peter\", \"crucifixion\").\n.decl Answer()\nAnswer() :- Died_of(\"Florence Nightingale\", cause1), Died_of(\"Saint Peter\", cause2), cause1 != cause2.\n.output Answer", "completions": [".decl Died_of(Person:symbol, Cause:symbol)\nDied_of(\"Florence Nightingale\", \"natural causes\").\nDied_of(\"Saint Peter\", \"crucifixion\").\n.decl Answer()\nAnswer() :- Died_of(\"Florence Nightingale\", cause1), Died_of(\"Saint Peter\", cause2), cause1 != cause2.\n.output Answer"]}
{"id": 1671, "answer": false, "completion": ".decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"firewall\", 10).\nHas_hardness(\"hammer\", 5).\n.decl Answer()\nAnswer() :- Has_hardness(\"firewall\", hardness1), Has_hardness(\"hammer\", hardness2), hardness1 < hardness2.\n.output Answer", "completions": [".decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"firewall\", 10).\nHas_hardness(\"hammer\", 5).\n.decl Answer()\nAnswer() :- Has_hardness(\"firewall\", hardness1), Has_hardness(\"hammer\", hardness2), hardness1 < hardness2.\n.output Answer"]}
{"id": 1672, "answer": true, "completion": ".decl Has_n_theses(Person:symbol, N_theses:float)\nHas_n_theses(\"Martin Luther\", 95).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"write a theses\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"write a theses\", n_days1), Has_n_theses(\"Martin Luther\", n_theses2), n_days1*n_theses2 <= 365.\n.output Answer", "completions": [".decl Has_n_theses(Person:symbol, N_theses:float)\nHas_n_theses(\"Martin Luther\", 95).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"write a theses\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"write a theses\", n_days1), Has_n_theses(\"Martin Luther\", n_theses2), n_days1*n_theses2 <= 365.\n.output Answer"]}
{"id": 1673, "answer": true, "completion": ".decl Has_n_options(Box:symbol, N_options:float)\nHas_n_options(\"Sudoku box\", 9).\n.decl Has_n_symbols(Number_system:symbol, N_symbols:float)\nHas_n_symbols(\"Roman numerals\", 7).\n.decl Answer()\nAnswer() :- Has_n_options(\"Sudoku box\", n_options), Has_n_symbols(\"Roman numerals\", n_symbols), n_options <= n_symbols.\n.output Answer", "completions": [".decl Has_n_options(Box:symbol, N_options:float)\nHas_n_options(\"Sudoku box\", 9).\n.decl Has_n_symbols(Number_system:symbol, N_symbols:float)\nHas_n_symbols(\"Roman numerals\", 7).\n.decl Answer()\nAnswer() :- Has_n_options(\"Sudoku box\", n_options), Has_n_symbols(\"Roman numerals\", n_symbols), n_options <= n_symbols.\n.output Answer"]}
{"id": 1674, "answer": true, "completion": ".decl Supports(Person:symbol, Cause:symbol)\nSupports(\"Alistair Darling\", \"Scottish independence\").\n.decl Answer()\nAnswer() :- Supports(\"Alistair Darling\", \"Scottish independence\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Cause:symbol)\nSupports(\"Alistair Darling\", \"Scottish independence\").\n.decl Answer()\nAnswer() :- Supports(\"Alistair Darling\", \"Scottish independence\").\n.output Answer"]}
{"id": 1675, "answer": true, "completion": ".decl Comes_alive(Object:symbol)\nComes_alive(\"teapot\").\nComes_alive(\"candlestick\").\nComes_alive(\"feather duster\").\n.decl Answer()\nAnswer() :- Comes_alive(\"teapot\").\nAnswer() :- Comes_alive(\"candlestick\").\nAnswer() :- Comes_alive(\"feather duster\").\n.output Answer", "completions": [".decl Comes_alive(Object:symbol)\nComes_alive(\"teapot\").\nComes_alive(\"candlestick\").\nComes_alive(\"feather duster\").\n.decl Answer()\nAnswer() :- Comes_alive(\"teapot\").\nAnswer() :- Comes_alive(\"candlestick\").\nAnswer() :- Comes_alive(\"feather duster\").\n.output Answer"]}
{"id": 1676, "answer": true, "completion": ".decl Can_outbreed(Animal_A:symbol, Animal_B:symbol)\nCan_outbreed(\"bottlenose dolphin\", \"human woman\").\n.decl Answer()\nAnswer() :- Can_outbreed(animal1, animal2).\n.output Answer", "completions": [".decl Can_outbreed(Animal_A:symbol, Animal_B:symbol)\nCan_outbreed(\"bottlenose dolphin\", \"human woman\").\n.decl Answer()\nAnswer() :- Can_outbreed(animal1, animal2).\n.output Answer"]}
{"id": 1677, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Scooby Doo\", 0.0008).\nHas_volume(\"kangaroo pouch\", 0.0004).\n.decl Answer()\nAnswer() :- Has_volume(\"Scooby Doo\", volume1), Has_volume(\"kangaroo pouch\", volume2), volume1 <= volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Scooby Doo\", 0.0008).\nHas_volume(\"kangaroo pouch\", 0.0004).\n.decl Answer()\nAnswer() :- Has_volume(\"Scooby Doo\", volume1), Has_volume(\"kangaroo pouch\", volume2), volume1 <= volume2.\n.output Answer"]}
{"id": 1678, "answer": true, "completion": ".decl Has_n_acting_credits(Person:symbol, N_acting_credits:float)\nHas_n_acting_credits(\"Julia Roberts\", 90).\nHas_n_acting_credits(\"Eric Roberts\", 500).\n.decl Answer()\nAnswer() :- Has_n_acting_credits(\"Julia Roberts\", n_acting_credits1), Has_n_acting_credits(\"Eric Roberts\", n_acting_credits2), n_acting_credits1 < n_acting_credits2.\n.output Answer", "completions": [".decl Has_n_acting_credits(Person:symbol, N_acting_credits:float)\nHas_n_acting_credits(\"Julia Roberts\", 90).\nHas_n_acting_credits(\"Eric Roberts\", 500).\n.decl Answer()\nAnswer() :- Has_n_acting_credits(\"Julia Roberts\", n_acting_credits1), Has_n_acting_credits(\"Eric Roberts\", n_acting_credits2), n_acting_credits1 < n_acting_credits2.\n.output Answer"]}
{"id": 1679, "answer": false, "completion": ".decl Has_magnification(Instrument:symbol, Magnification:float)\nHas_magnification(\"binoculars\", 10).\nHas_magnification(\"telescope\", 100).\n.decl Answer()\nAnswer() :- Has_magnification(\"binoculars\", magnification1), Has_magnification(\"telescope\", magnification2), magnification1 < magnification2.\n.output Answer", "completions": [".decl Has_magnification(Instrument:symbol, Magnification:float)\nHas_magnification(\"binoculars\", 10).\nHas_magnification(\"telescope\", 100).\n.decl Answer()\nAnswer() :- Has_magnification(\"binoculars\", magnification1), Has_magnification(\"telescope\", magnification2), magnification1 < magnification2.\n.output Answer"]}
{"id": 1680, "answer": true, "completion": ".decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"Ringo Starr\", \"pot roast\").\n.decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"The Rainbow Room\", \"pot roast\").\n.decl Answer()\nAnswer() :- Has_allergy(\"Ringo Starr\", \"pot roast\"), Serves(\"The Rainbow Room\", \"pot roast\").\n.output Answer", "completions": [".decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"Ringo Starr\", \"pot roast\").\n.decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"The Rainbow Room\", \"pot roast\").\n.decl Answer()\nAnswer() :- Has_allergy(\"Ringo Starr\", \"pot roast\"), Serves(\"The Rainbow Room\", \"pot roast\").\n.output Answer"]}
{"id": 1681, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Great Depression\", 10).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"person diagnosed\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"person diagnosed\", n_years1), Last_n_years(\"Great Depression\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Great Depression\", 10).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"person diagnosed\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"person diagnosed\", n_years1), Last_n_years(\"Great Depression\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1682, "answer": true, "completion": ".decl Has_surface_temp(Planet:symbol, Surface_temp:float)\nHas_surface_temp(\"Mercury\", 427).\n.decl Answer()\nAnswer() :- Has_surface_temp(\"Mercury\", surface_temp), surface_temp > 100.\n.output Answer", "completions": [".decl Has_surface_temp(Planet:symbol, Surface_temp:float)\nHas_surface_temp(\"Mercury\", 427).\n.decl Answer()\nAnswer() :- Has_surface_temp(\"Mercury\", surface_temp), surface_temp > 100.\n.output Answer"]}
{"id": 1683, "answer": true, "completion": ".decl Reads(Person:symbol, Book:symbol)\nReads(\"Helen Keller\", \"The Story of My Life\").\n.decl Wrote(Person:symbol, Book:symbol)\nWrote(\"J. K. Rowling\", \"Harry Potter and the Philosopher's Stone\").\n.decl Answer()\nAnswer() :- Reads(\"Helen Keller\", \"Harry Potter and the Philosopher's Stone\").\nAnswer() :- Reads(\"Helen Keller\", book1), Wrote(\"J. K. Rowling\", book1).\n.output Answer", "completions": [".decl Reads(Person:symbol, Book:symbol)\nReads(\"Helen Keller\", \"The Story of My Life\").\n.decl Wrote(Person:symbol, Book:symbol)\nWrote(\"J. K. Rowling\", \"Harry Potter and the Philosopher's Stone\").\n.decl Answer()\nAnswer() :- Reads(\"Helen Keller\", \"Harry Potter and the Philosopher's Stone\").\nAnswer() :- Reads(\"Helen Keller\", book1), Wrote(\"J. K. Rowling\", book1).\n.output Answer"]}
{"id": 1684, "answer": true, "completion": ".decl Has_self_harm(Person:symbol)\nHas_self_harm(\"person\").\n.decl Answer()\nAnswer() :- Has_self_harm(\"person\").\n.output Answer", "completions": [".decl Has_self_harm(Person:symbol)\nHas_self_harm(\"person\").\n.decl Answer()\nAnswer() :- Has_self_harm(\"person\").\n.output Answer"]}
{"id": 1685, "answer": false, "completion": ".decl Enemies(Person1:symbol, Person2:symbol)\nEnemies(\"Jay Thomas\", \"Clayton Moore\").\n.decl Answer()\nAnswer() :- Enemies(\"Jay Thomas\", \"Clayton Moore\").\n.output Answer\n\n\n", "completions": [".decl Enemies(Person1:symbol, Person2:symbol)\nEnemies(\"Jay Thomas\", \"Clayton Moore\").\n.decl Answer()\nAnswer() :- Enemies(\"Jay Thomas\", \"Clayton Moore\").\n.output Answer\n\n\n"]}
{"id": 1686, "answer": true, "completion": ".decl Invented_in_year(Technology:symbol, Year:float)\nInvented_in_year(\"email\", 1971).\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Douglas Adams\", 1952).\n.decl Answer()\nAnswer() :- Invented_in_year(\"email\", year1), Born_in_year(\"Douglas Adams\", year2), year1 > year2.\n.output Answer", "completions": [".decl Invented_in_year(Technology:symbol, Year:float)\nInvented_in_year(\"email\", 1971).\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Douglas Adams\", 1952).\n.decl Answer()\nAnswer() :- Invented_in_year(\"email\", year1), Born_in_year(\"Douglas Adams\", year2), year1 > year2.\n.output Answer"]}
{"id": 1687, "answer": false, "completion": ".decl Is_dangerous(Manipulation:symbol)\nIs_dangerous(\"neck manipulation\").\n.decl Answer()\nAnswer() :- Is_dangerous(manipulation).\n.output Answer", "completions": [".decl Is_dangerous(Manipulation:symbol)\nIs_dangerous(\"neck manipulation\").\n.decl Answer()\nAnswer() :- Is_dangerous(manipulation).\n.output Answer"]}
{"id": 1688, "answer": true, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Olivia Newton-John\", \"Olivia Newton-John\").\nHas_name(\"Miley Cyrus\", \"Miley Cyrus\").\nHas_name(\"Lady Gaga\", \"Lady Gaga\").\n.decl Answer()\nAnswer() :- Has_name(\"Olivia Newton-John\", name1), Has_name(\"Miley Cyrus\", name2), Has_name(\"Lady Gaga\", name3), length(name1, length1), length(name2, length2), length(name3, length3), length1 > length2, length1 > length3.\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Olivia Newton-John\", \"Olivia Newton-John\").\nHas_name(\"Miley Cyrus\", \"Miley Cyrus\").\nHas_name(\"Lady Gaga\", \"Lady Gaga\").\n.decl Answer()\nAnswer() :- Has_name(\"Olivia Newton-John\", name1), Has_name(\"Miley Cyrus\", name2), Has_name(\"Lady Gaga\", name3), length(name1, length1), length(name2, length2), length(name3, length3), length1 > length2, length1 > length3.\n.output Answer"]}
{"id": 1689, "answer": true, "completion": ".decl Founded_in(Company:symbol, Year:float)\nFounded_in(\"Casio\", 1957).\n.decl Is_composite(Number:float)\nIs_composite(4).\nIs_composite(6).\nIs_composite(8).\nIs_composite(9).\nIs_composite(10).\nIs_composite(12).\nIs_composite(14).\nIs_composite(15).\nIs_composite(16).\nIs_composite(18).\nIs_composite(20).\nIs_composite(21).\nIs_composite(22).\nIs_composite(24).\nIs_composite(25).\nIs_composite(26).\nIs_composite(27).\nIs_composite(28).\nIs_composite(30).\n.decl Answer()\nAnswer() :- Founded_in(\"Casio\", year), Is_composite(year).\n.output Answer", "completions": [".decl Founded_in(Company:symbol, Year:float)\nFounded_in(\"Casio\", 1957).\n.decl Is_composite(Number:float)\nIs_composite(4).\nIs_composite(6).\nIs_composite(8).\nIs_composite(9).\nIs_composite(10).\nIs_composite(12).\nIs_composite(14).\nIs_composite(15).\nIs_composite(16).\nIs_composite(18).\nIs_composite(20).\nIs_composite(21).\nIs_composite(22).\nIs_composite(24).\nIs_composite(25).\nIs_composite(26).\nIs_composite(27).\nIs_composite(28).\nIs_composite(30).\n.decl Answer()\nAnswer() :- Founded_in(\"Casio\", year), Is_composite(year).\n.output Answer"]}
{"id": 1690, "answer": true, "completion": ".decl Has_grip(Person:symbol, Place:symbol)\nHas_grip(\"Hades\", \"Underworld\").\n.decl Answer()\nAnswer() :- Has_grip(\"Hades\", \"Underworld\").\n.output Answer", "completions": [".decl Has_grip(Person:symbol, Place:symbol)\nHas_grip(\"Hades\", \"Underworld\").\n.decl Answer()\nAnswer() :- Has_grip(\"Hades\", \"Underworld\").\n.output Answer"]}
{"id": 1691, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"George W. Bush\", \"English\").\n.decl Answer()\nAnswer() :- Speaks(\"George W. Bush\", \"Cantonese\").\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"George W. Bush\", \"English\").\n.decl Answer()\nAnswer() :- Speaks(\"George W. Bush\", \"Cantonese\").\n.output Answer"]}
{"id": 1692, "answer": true, "completion": ".decl Violates_amendment(Event:symbol, Amendment:symbol)\nViolates_amendment(\"crucifixion\", \"eighth amendment\").\n.decl Answer()\nAnswer() :- Violates_amendment(\"crucifixion\", \"eighth amendment\").\n.output Answer", "completions": [".decl Violates_amendment(Event:symbol, Amendment:symbol)\nViolates_amendment(\"crucifixion\", \"eighth amendment\").\n.decl Answer()\nAnswer() :- Violates_amendment(\"crucifixion\", \"eighth amendment\").\n.output Answer"]}
{"id": 1693, "answer": false, "completion": ".decl Has_cause(Event:symbol, Cause:symbol)\nHas_cause(\"crash\", \"stroke\").\n.decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Dale Earnhardt\", \"Dale Earnhardt Jr.\").\n.decl Answer()\nAnswer() :- Has_cause(\"crash\", cause), Has_son(\"Dale Earnhardt\", \"Dale Earnhardt Jr.\"), Has_son(\"Dale Earnhardt Jr.\", person), cause = \"stroke\".\n.output Answer", "completions": [".decl Has_cause(Event:symbol, Cause:symbol)\nHas_cause(\"crash\", \"stroke\").\n.decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Dale Earnhardt\", \"Dale Earnhardt Jr.\").\n.decl Answer()\nAnswer() :- Has_cause(\"crash\", cause), Has_son(\"Dale Earnhardt\", \"Dale Earnhardt Jr.\"), Has_son(\"Dale Earnhardt Jr.\", person), cause = \"stroke\".\n.output Answer"]}
{"id": 1694, "answer": false, "completion": ".decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Harry Potter and the Philosopher's Stone\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Chamber of Secrets\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Prisoner of Azkaban\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Goblet of Fire\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Order of the Phoenix\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Half-Blood Prince\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Deathly Hallows\", \"J.K. Rowling\").\nHas_author(\"And Then There Were None\", \"Agatha Christie\").\n.decl Has_genre(Book:symbol, Genre:symbol)\nHas_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nHas_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nHas_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nHas_genre(\"Harry Potter and the Goblet of Fire\", \"fantasy\").\nHas_genre(\"Harry Potter and the Order of the Phoenix\", \"fantasy\").\nHas_genre(\"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nHas_genre(\"Harry Potter and the Deathly Hallows\", \"fantasy\").\nHas_genre(\"And Then There Were None\", \"mystery\").\n.decl Answer()\nAnswer() :- Has_author(book, \"J.K. Rowling\"), Has_genre(book, \"mystery\").\n.output Answer", "completions": [".decl Has_author(Book:symbol, Author:symbol)\nHas_author(\"Harry Potter and the Philosopher's Stone\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Chamber of Secrets\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Prisoner of Azkaban\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Goblet of Fire\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Order of the Phoenix\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Half-Blood Prince\", \"J.K. Rowling\").\nHas_author(\"Harry Potter and the Deathly Hallows\", \"J.K. Rowling\").\nHas_author(\"And Then There Were None\", \"Agatha Christie\").\n.decl Has_genre(Book:symbol, Genre:symbol)\nHas_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nHas_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nHas_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nHas_genre(\"Harry Potter and the Goblet of Fire\", \"fantasy\").\nHas_genre(\"Harry Potter and the Order of the Phoenix\", \"fantasy\").\nHas_genre(\"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nHas_genre(\"Harry Potter and the Deathly Hallows\", \"fantasy\").\nHas_genre(\"And Then There Were None\", \"mystery\").\n.decl Answer()\nAnswer() :- Has_author(book, \"J.K. Rowling\"), Has_genre(book, \"mystery\").\n.output Answer"]}
{"id": 1695, "answer": false, "completion": ".decl Uses(Sport:symbol, Object:symbol)\nUses(\"shooting sports\", \"bullets\").\nUses(\"shooting sports\", \"arrows\").\n.decl Answer()\nAnswer() :- Uses(sport, object), !Uses(sport, \"arrows\").\n.output Answer", "completions": [".decl Uses(Sport:symbol, Object:symbol)\nUses(\"shooting sports\", \"bullets\").\nUses(\"shooting sports\", \"arrows\").\n.decl Answer()\nAnswer() :- Uses(sport, object), !Uses(sport, \"arrows\").\n.output Answer"]}
{"id": 1696, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"monolingual American\", \"English\").\nSpeaks(\"monolingual American\", \"Spanish\").\nSpeaks(\"monolingual American\", \"Mandarin\").\nSpeaks(\"monolingual American\", \"Japanese\").\nSpeaks(\"monolingual American\", \"Russian\").\nSpeaks(\"monolingual American\", \"German\").\nSpeaks(\"monolingual American\", \"French\").\nSpeaks(\"monolingual American\", \"Italian\").\nSpeaks(\"monolingual American\", \"Portuguese\").\nSpeaks(\"monolingual American\", \"Swedish\").\nSpeaks(\"monolingual American\", \"Dutch\").\nSpeaks(\"monolingual American\", \"Polish\").\nSpeaks(\"monolingual American\", \"Turkish\").\nSpeaks(\"monolingual American\", \"Czech\").\nSpeaks(\"monolingual American\", \"Greek\").\nSpeaks(\"monolingual American\", \"Serbian\").\nSpeaks(\"monolingual American\", \"Bulgarian\").\nSpeaks(\"monolingual American\", \"Hungarian\").\nSpeaks(\"monolingual American\", \"Romanian\").\nSpeaks(\"monolingual American\", \"Vietnamese\").\nSpeaks(\"monolingual American\", \"Thai\").\nSpeaks(\"monolingual American\", \"Malay\").\nSpeaks(\"monolingual American\", \"Indonesian\").\nSpeaks(\"monolingual American\", \"Persian\").\nSpeaks(\"monolingual American\", \"Urdu\").\nSpeaks(\"monolingual American\", \"Hebrew\").\nSpeaks(\"monolingual American\", \"Arabic\").\nSpeaks(\"monolingual American\", \"Hindi\").\nSpeaks(\"monolingual American\", \"Marathi\").\nSpeaks(\"monolingual American\", \"Bengali\").\nSpeaks(\"monolingual American\", \"Punjabi\").\nSpeaks(\"monolingual American\", \"Gujarati\").\nSpeaks(\"monolingual American\", \"Tamil\").\nSpeaks(\"monolingual American\", \"Telugu\").\nSpeaks(\"monolingual American\", \"Kannada\").\nSpeaks(\"monolingual American\", \"Malayalam\").\nSpeaks(\"monolingual American\", \"Assamese\").\nSpeaks(\"monolingual American\", \"Oriya\").\nSpeaks(\"monolingual American\", \"Urdu\").\nSpeaks(\"monolingual American\", \"Kashmiri\").\nSpeaks(\"monolingual American\", \"Nepali\").\nSpeaks(\"monolingual American\", \"Sinhalese\").\nSpeaks(\"monolingual American\", \"Burmese\").\nSpeaks(\"monolingual American\", \"Lao\").\nSpeaks(\"monolingual American\", \"Khmer\").\nSpeaks(\"monolingual American\", \"Chinese\").\nSpeaks(\"monolingual American\", \"Korean\").\nSpeaks(\"monolingual American\", \"Japanese\").\nSpeaks(\"monolingual American\", \"Mongolian\").\nSpeaks(\"monolingual American\", \"Tibetan\").\nSpeaks(\"monolingual American\", \"Uighur\").\nSpeaks(\"monolingual American\", \"Dzongkha\").\nSpeaks(\"monolingual American\", \"Thai\").\nSpeaks(\"monolingual American\", \"Lao\").\nSpeaks(\"monolingual American\", \"Vietnamese\").\nSpeaks(\"monolingual American\", \"Indonesian\").\nSpeaks(\"monolingual American\", \"Filipino\").\nSpeaks(\"monolingual American\", \"Malay\").\nSpeaks(\"monolingual American\", \"Javan", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"monolingual American\", \"English\").\nSpeaks(\"monolingual American\", \"Spanish\").\nSpeaks(\"monolingual American\", \"Mandarin\").\nSpeaks(\"monolingual American\", \"Japanese\").\nSpeaks(\"monolingual American\", \"Russian\").\nSpeaks(\"monolingual American\", \"German\").\nSpeaks(\"monolingual American\", \"French\").\nSpeaks(\"monolingual American\", \"Italian\").\nSpeaks(\"monolingual American\", \"Portuguese\").\nSpeaks(\"monolingual American\", \"Swedish\").\nSpeaks(\"monolingual American\", \"Dutch\").\nSpeaks(\"monolingual American\", \"Polish\").\nSpeaks(\"monolingual American\", \"Turkish\").\nSpeaks(\"monolingual American\", \"Czech\").\nSpeaks(\"monolingual American\", \"Greek\").\nSpeaks(\"monolingual American\", \"Serbian\").\nSpeaks(\"monolingual American\", \"Bulgarian\").\nSpeaks(\"monolingual American\", \"Hungarian\").\nSpeaks(\"monolingual American\", \"Romanian\").\nSpeaks(\"monolingual American\", \"Vietnamese\").\nSpeaks(\"monolingual American\", \"Thai\").\nSpeaks(\"monolingual American\", \"Malay\").\nSpeaks(\"monolingual American\", \"Indonesian\").\nSpeaks(\"monolingual American\", \"Persian\").\nSpeaks(\"monolingual American\", \"Urdu\").\nSpeaks(\"monolingual American\", \"Hebrew\").\nSpeaks(\"monolingual American\", \"Arabic\").\nSpeaks(\"monolingual American\", \"Hindi\").\nSpeaks(\"monolingual American\", \"Marathi\").\nSpeaks(\"monolingual American\", \"Bengali\").\nSpeaks(\"monolingual American\", \"Punjabi\").\nSpeaks(\"monolingual American\", \"Gujarati\").\nSpeaks(\"monolingual American\", \"Tamil\").\nSpeaks(\"monolingual American\", \"Telugu\").\nSpeaks(\"monolingual American\", \"Kannada\").\nSpeaks(\"monolingual American\", \"Malayalam\").\nSpeaks(\"monolingual American\", \"Assamese\").\nSpeaks(\"monolingual American\", \"Oriya\").\nSpeaks(\"monolingual American\", \"Urdu\").\nSpeaks(\"monolingual American\", \"Kashmiri\").\nSpeaks(\"monolingual American\", \"Nepali\").\nSpeaks(\"monolingual American\", \"Sinhalese\").\nSpeaks(\"monolingual American\", \"Burmese\").\nSpeaks(\"monolingual American\", \"Lao\").\nSpeaks(\"monolingual American\", \"Khmer\").\nSpeaks(\"monolingual American\", \"Chinese\").\nSpeaks(\"monolingual American\", \"Korean\").\nSpeaks(\"monolingual American\", \"Japanese\").\nSpeaks(\"monolingual American\", \"Mongolian\").\nSpeaks(\"monolingual American\", \"Tibetan\").\nSpeaks(\"monolingual American\", \"Uighur\").\nSpeaks(\"monolingual American\", \"Dzongkha\").\nSpeaks(\"monolingual American\", \"Thai\").\nSpeaks(\"monolingual American\", \"Lao\").\nSpeaks(\"monolingual American\", \"Vietnamese\").\nSpeaks(\"monolingual American\", \"Indonesian\").\nSpeaks(\"monolingual American\", \"Filipino\").\nSpeaks(\"monolingual American\", \"Malay\").\nSpeaks(\"monolingual American\", \"Javan"]}
{"id": 1697, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Coen brothers\", \"English\").\nSpeaks(\"people in Guinea Bissau\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Speaks(\"Coen brothers\", \"English\"), Speaks(\"people in Guinea Bissau\", \"Portuguese\").\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Coen brothers\", \"English\").\nSpeaks(\"people in Guinea Bissau\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Speaks(\"Coen brothers\", \"English\"), Speaks(\"people in Guinea Bissau\", \"Portuguese\").\n.output Answer"]}
{"id": 1698, "answer": true, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 1699, "answer": false, "completion": ".decl Is_child(Person:symbol, Age:float)\nIs_child(\"Jeremy Irons\", 0).\nIs_child(\"Jeremy Irons\", 1).\nIs_child(\"Jeremy Irons\", 2).\nIs_child(\"Jeremy Irons\", 3).\nIs_child(\"Jeremy Irons\", 4).\nIs_child(\"Jeremy Irons\", 5).\nIs_child(\"Jeremy Irons\", 6).\nIs_child(\"Jeremy Irons\", 7).\nIs_child(\"Jeremy Irons\", 8).\nIs_child(\"Jeremy Irons\", 9).\nIs_child(\"Jeremy Irons\", 10).\nIs_child(\"Jeremy Irons\", 11).\nIs_child(\"Jeremy Irons\", 12).\nIs_child(\"Jeremy Irons\", 13).\nIs_child(\"Jeremy Irons\", 14).\nIs_child(\"Jeremy Irons\", 15).\nIs_child(\"Jeremy Irons\", 16).\nIs_child(\"Jeremy Irons\", 17).\n.decl Learns(Person:symbol, Skill:symbol)\nLearns(\"Jeremy Irons\", \"sweep picking\").\n.decl Answer()\nAnswer() :- Learns(\"Jeremy Irons\", \"sweep picking\"), Is_child(\"Jeremy Irons\", age), age <= 17.\n.output Answer", "completions": [".decl Is_child(Person:symbol, Age:float)\nIs_child(\"Jeremy Irons\", 0).\nIs_child(\"Jeremy Irons\", 1).\nIs_child(\"Jeremy Irons\", 2).\nIs_child(\"Jeremy Irons\", 3).\nIs_child(\"Jeremy Irons\", 4).\nIs_child(\"Jeremy Irons\", 5).\nIs_child(\"Jeremy Irons\", 6).\nIs_child(\"Jeremy Irons\", 7).\nIs_child(\"Jeremy Irons\", 8).\nIs_child(\"Jeremy Irons\", 9).\nIs_child(\"Jeremy Irons\", 10).\nIs_child(\"Jeremy Irons\", 11).\nIs_child(\"Jeremy Irons\", 12).\nIs_child(\"Jeremy Irons\", 13).\nIs_child(\"Jeremy Irons\", 14).\nIs_child(\"Jeremy Irons\", 15).\nIs_child(\"Jeremy Irons\", 16).\nIs_child(\"Jeremy Irons\", 17).\n.decl Learns(Person:symbol, Skill:symbol)\nLearns(\"Jeremy Irons\", \"sweep picking\").\n.decl Answer()\nAnswer() :- Learns(\"Jeremy Irons\", \"sweep picking\"), Is_child(\"Jeremy Irons\", age), age <= 17.\n.output Answer"]}
{"id": 1700, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Vietnamese people\", 1.6).\nHas_height(\"NBA players\", 2.0).\n.decl Answer()\nAnswer() :- Has_height(\"Vietnamese people\", height1), Has_height(\"NBA players\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Vietnamese people\", 1.6).\nHas_height(\"NBA players\", 2.0).\n.decl Answer()\nAnswer() :- Has_height(\"Vietnamese people\", height1), Has_height(\"NBA players\", height2), height1 < height2.\n.output Answer"]}
{"id": 1701, "answer": true, "completion": ".decl Makes_famous(Person:symbol, Other_person:symbol)\nMakes_famous(\"Dr. Seuss\", \"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Makes_famous(\"Dr. Seuss\", \"Dr. Seuss\").\n.output Answer", "completions": [".decl Makes_famous(Person:symbol, Other_person:symbol)\nMakes_famous(\"Dr. Seuss\", \"Dr. Seuss\").\n.decl Answer()\nAnswer() :- Makes_famous(\"Dr. Seuss\", \"Dr. Seuss\").\n.output Answer"]}
{"id": 1702, "answer": false, "completion": ".decl Can_order(Object:symbol, Place:symbol)\nCan_order(\"coffee\", \"Starbucks\").\n.decl Answer()\nAnswer() :- Can_order(\"Alfa Romeo\", \"Starbucks\").\n.output Answer", "completions": [".decl Can_order(Object:symbol, Place:symbol)\nCan_order(\"coffee\", \"Starbucks\").\n.decl Answer()\nAnswer() :- Can_order(\"Alfa Romeo\", \"Starbucks\").\n.output Answer"]}
{"id": 1703, "answer": false, "completion": ".decl Has_pattern(Cat:symbol, Pattern:symbol)\nHas_pattern(\"calico cat\", \"black\").\nHas_pattern(\"calico cat\", \"orange\").\nHas_pattern(\"calico cat\", \"white\").\n.decl Has_color(Fly:symbol, Color:symbol)\nHas_color(\"drain fly\", \"black\").\nHas_color(\"drain fly\", \"orange\").\nHas_color(\"drain fly\", \"white\").\n.decl Answer()\nAnswer() :- Has_pattern(\"calico cat\", color), Has_color(\"drain fly\", color).\n.output Answer", "completions": [".decl Has_pattern(Cat:symbol, Pattern:symbol)\nHas_pattern(\"calico cat\", \"black\").\nHas_pattern(\"calico cat\", \"orange\").\nHas_pattern(\"calico cat\", \"white\").\n.decl Has_color(Fly:symbol, Color:symbol)\nHas_color(\"drain fly\", \"black\").\nHas_color(\"drain fly\", \"orange\").\nHas_color(\"drain fly\", \"white\").\n.decl Answer()\nAnswer() :- Has_pattern(\"calico cat\", color), Has_color(\"drain fly\", color).\n.output Answer"]}
{"id": 1704, "answer": false, "completion": ".decl Is_scavenger(Animal:symbol)\nIs_scavenger(\"vulture\").\nIs_scavenger(\"Golden eagle\").\n.decl Answer()\nAnswer() :- Is_scavenger(\"Golden eagle\").\n.output Answer", "completions": [".decl Is_scavenger(Animal:symbol)\nIs_scavenger(\"vulture\").\nIs_scavenger(\"Golden eagle\").\n.decl Answer()\nAnswer() :- Is_scavenger(\"Golden eagle\").\n.output Answer"]}
{"id": 1705, "answer": true, "completion": ".decl Has_price(Food:symbol, Store:symbol, Price:float)\nHas_price(\"apple\", \"Aldi\", 0.50).\nHas_price(\"apple\", \"Whole Foods\", 1.00).\nHas_price(\"banana\", \"Aldi\", 0.25).\nHas_price(\"banana\", \"Whole Foods\", 0.50).\nHas_price(\"carrot\", \"Aldi\", 0.75).\nHas_price(\"carrot\", \"Whole Foods\", 1.00).\nHas_price(\"dairy\", \"Aldi\", 2.00).\nHas_price(\"dairy\", \"Whole Foods\", 4.00).\n.decl Answer()\nAnswer() :- Has_price(food, \"Aldi\", price1), Has_price(food, \"Whole Foods\", price2), price1 < price2.\n.output Answer", "completions": [".decl Has_price(Food:symbol, Store:symbol, Price:float)\nHas_price(\"apple\", \"Aldi\", 0.50).\nHas_price(\"apple\", \"Whole Foods\", 1.00).\nHas_price(\"banana\", \"Aldi\", 0.25).\nHas_price(\"banana\", \"Whole Foods\", 0.50).\nHas_price(\"carrot\", \"Aldi\", 0.75).\nHas_price(\"carrot\", \"Whole Foods\", 1.00).\nHas_price(\"dairy\", \"Aldi\", 2.00).\nHas_price(\"dairy\", \"Whole Foods\", 4.00).\n.decl Answer()\nAnswer() :- Has_price(food, \"Aldi\", price1), Has_price(food, \"Whole Foods\", price2), price1 < price2.\n.output Answer"]}
{"id": 1706, "answer": true, "completion": ".decl Lives_on(Animal:symbol, Location:symbol)\nLives_on(\"bald eagle\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Lives_on(\"bald eagle\", \"Mount Sharp\").\n.output Answer", "completions": [".decl Lives_on(Animal:symbol, Location:symbol)\nLives_on(\"bald eagle\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Lives_on(\"bald eagle\", \"Mount Sharp\").\n.output Answer"]}
{"id": 1707, "answer": false, "completion": ".decl Cures(Medicine:symbol, Disease:symbol)\nCures(\"penicillin\", \"strep throat\").\n.decl Answer()\nAnswer() :- Cures(\"penicillin\", \"learning disability\").\n.output Answer", "completions": [".decl Cures(Medicine:symbol, Disease:symbol)\nCures(\"penicillin\", \"strep throat\").\n.decl Answer()\nAnswer() :- Cures(\"penicillin\", \"learning disability\").\n.output Answer"]}
{"id": 1708, "answer": true, "completion": ".decl Has_education(Person:symbol, Education:symbol)\nHas_education(\"Danica McKellar\", \"B.S. in Mathematics\").\n.decl Has_education_requirements(Job:symbol, Education_requirements:symbol)\nHas_education_requirements(\"astronaut\", \"B.S. in Mathematics\").\nHas_education_requirements(\"astronaut\", \"B.S. in Engineering\").\nHas_education_requirements(\"astronaut\", \"B.S. in Science\").\n.decl Answer()\nAnswer() :- Has_education(\"Danica McKellar\", education), Has_education_requirements(\"astronaut\", education_requirements), education = education_requirements.\n.output Answer", "completions": [".decl Has_education(Person:symbol, Education:symbol)\nHas_education(\"Danica McKellar\", \"B.S. in Mathematics\").\n.decl Has_education_requirements(Job:symbol, Education_requirements:symbol)\nHas_education_requirements(\"astronaut\", \"B.S. in Mathematics\").\nHas_education_requirements(\"astronaut\", \"B.S. in Engineering\").\nHas_education_requirements(\"astronaut\", \"B.S. in Science\").\n.decl Answer()\nAnswer() :- Has_education(\"Danica McKellar\", education), Has_education_requirements(\"astronaut\", education_requirements), education = education_requirements.\n.output Answer"]}
{"id": 1709, "answer": false, "completion": ".decl Can_ride_bike(Animal:symbol)\nCan_ride_bike(\"Goblin shark\") :- Can_have_limbs(\"Goblin shark\").\n.decl Can_have_limbs(Animal:symbol)\nCan_have_limbs(\"Goblin shark\").\n.decl Answer()\nAnswer() :- Can_ride_bike(\"Goblin shark\").\n.output Answer", "completions": [".decl Can_ride_bike(Animal:symbol)\nCan_ride_bike(\"Goblin shark\") :- Can_have_limbs(\"Goblin shark\").\n.decl Can_have_limbs(Animal:symbol)\nCan_have_limbs(\"Goblin shark\").\n.decl Answer()\nAnswer() :- Can_ride_bike(\"Goblin shark\").\n.output Answer"]}
{"id": 1710, "answer": false, "completion": ".decl Can_drive(Animal:symbol)\nCan_drive(\"human\").\n.decl Answer()\nAnswer() :- Can_drive(\"northern fur seal\").\n.output Answer", "completions": [".decl Can_drive(Animal:symbol)\nCan_drive(\"human\").\n.decl Answer()\nAnswer() :- Can_drive(\"northern fur seal\").\n.output Answer"]}
{"id": 1711, "answer": true, "completion": ".decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Generation Y member\", \"Generation Y\").\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"Generation Y member\", 20).\n.decl Answer()\nAnswer() :- Is_member_of(\"Generation Y member\", \"Generation Y\"), Has_age(\"Generation Y member\", age), age >= 21.\n.output Answer", "completions": [".decl Is_member_of(Person:symbol, Group:symbol)\nIs_member_of(\"Generation Y member\", \"Generation Y\").\n.decl Has_age(Person:symbol, Age:float)\nHas_age(\"Generation Y member\", 20).\n.decl Answer()\nAnswer() :- Is_member_of(\"Generation Y member\", \"Generation Y\"), Has_age(\"Generation Y member\", age), age >= 21.\n.output Answer"]}
{"id": 1712, "answer": true, "completion": ".decl Can_solve(Person:symbol, Puzzle:symbol)\nCan_solve(\"infant\", \"sudoku puzzle\").\n.decl Answer()\nAnswer() :- Can_solve(\"infant\", \"sudoku puzzle\").\n.output Answer", "completions": [".decl Can_solve(Person:symbol, Puzzle:symbol)\nCan_solve(\"infant\", \"sudoku puzzle\").\n.decl Answer()\nAnswer() :- Can_solve(\"infant\", \"sudoku puzzle\").\n.output Answer"]}
{"id": 1713, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"pickled cucumber\", \"green\").\nHas_color(\"pickled cucumber\", \"yellow\").\nHas_color(\"pickled cucumber\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"pickled cucumber\", \"red\").\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"pickled cucumber\", \"green\").\nHas_color(\"pickled cucumber\", \"yellow\").\nHas_color(\"pickled cucumber\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"pickled cucumber\", \"red\").\n.output Answer"]}
{"id": 1714, "answer": true, "completion": ".decl Uses(Activity:symbol, Character:symbol)\nUses(\"coding\", \"0\").\nUses(\"coding\", \"1\").\nUses(\"coding\", \"&\").\nUses(\"coding\", \"|\").\nUses(\"coding\", \"!\").\n.decl Answer()\nAnswer() :- Uses(\"coding\", \"0\").\nAnswer() :- Uses(\"coding\", \"1\").\nAnswer() :- Uses(\"coding\", \"&\").\nAnswer() :- Uses(\"coding\", \"|\").\nAnswer() :- Uses(\"coding\", \"!\").\n.output Answer", "completions": [".decl Uses(Activity:symbol, Character:symbol)\nUses(\"coding\", \"0\").\nUses(\"coding\", \"1\").\nUses(\"coding\", \"&\").\nUses(\"coding\", \"|\").\nUses(\"coding\", \"!\").\n.decl Answer()\nAnswer() :- Uses(\"coding\", \"0\").\nAnswer() :- Uses(\"coding\", \"1\").\nAnswer() :- Uses(\"coding\", \"&\").\nAnswer() :- Uses(\"coding\", \"|\").\nAnswer() :- Uses(\"coding\", \"!\").\n.output Answer"]}
{"id": 1715, "answer": true, "completion": ".decl Is_a(Person:symbol, Gender:symbol)\nIs_a(\"John\", \"man\").\nIs_a(\"Mary\", \"woman\").\n.decl Experiences(Person:symbol, Event:symbol)\nExperiences(\"Mary\", \"menstruation\").\n.decl Answer()\nAnswer() :- Is_a(person, \"man\"), Experiences(person, \"menstruation\").\n.output Answer", "completions": [".decl Is_a(Person:symbol, Gender:symbol)\nIs_a(\"John\", \"man\").\nIs_a(\"Mary\", \"woman\").\n.decl Experiences(Person:symbol, Event:symbol)\nExperiences(\"Mary\", \"menstruation\").\n.decl Answer()\nAnswer() :- Is_a(person, \"man\"), Experiences(person, \"menstruation\").\n.output Answer"]}
{"id": 1716, "answer": false, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"skiing\", \"January\").\nHappens_in_month(\"skiing\", \"February\").\nHappens_in_month(\"skiing\", \"March\").\nHappens_in_month(\"skiing\", \"April\").\nHappens_in_month(\"skiing\", \"May\").\nHappens_in_month(\"skiing\", \"June\").\nHappens_in_month(\"skiing\", \"July\").\nHappens_in_month(\"skiing\", \"August\").\nHappens_in_month(\"skiing\", \"September\").\nHappens_in_month(\"skiing\", \"October\").\nHappens_in_month(\"skiing\", \"November\").\nHappens_in_month(\"skiing\", \"December\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"skiing\", \"August\").\n.output Answer", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"skiing\", \"January\").\nHappens_in_month(\"skiing\", \"February\").\nHappens_in_month(\"skiing\", \"March\").\nHappens_in_month(\"skiing\", \"April\").\nHappens_in_month(\"skiing\", \"May\").\nHappens_in_month(\"skiing\", \"June\").\nHappens_in_month(\"skiing\", \"July\").\nHappens_in_month(\"skiing\", \"August\").\nHappens_in_month(\"skiing\", \"September\").\nHappens_in_month(\"skiing\", \"October\").\nHappens_in_month(\"skiing\", \"November\").\nHappens_in_month(\"skiing\", \"December\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"skiing\", \"August\").\n.output Answer"]}
{"id": 1717, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"hamster\", \"kibble\").\n.decl High_school_mascot(Person:symbol, Mascot:symbol)\nHigh_school_mascot(\"Bobby Jindal\", \"hamster\").\n.decl Answer()\nAnswer() :- High_school_mascot(\"Bobby Jindal\", animal), Eats(animal, \"kibble\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"hamster\", \"kibble\").\n.decl High_school_mascot(Person:symbol, Mascot:symbol)\nHigh_school_mascot(\"Bobby Jindal\", \"hamster\").\n.decl Answer()\nAnswer() :- High_school_mascot(\"Bobby Jindal\", animal), Eats(animal, \"kibble\").\n.output Answer"]}
{"id": 1718, "answer": false, "completion": ".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"solar cycle\", 365).\nLasts_n_days(\"month\", 30).\nLasts_n_days(\"month\", 31).\n.decl Answer()\nAnswer() :- Lasts_n_days(\"solar cycle\", n_days1), Lasts_n_days(\"month\", n_days2), n_days1 >= n_days2.\n.output Answer", "completions": [".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"solar cycle\", 365).\nLasts_n_days(\"month\", 30).\nLasts_n_days(\"month\", 31).\n.decl Answer()\nAnswer() :- Lasts_n_days(\"solar cycle\", n_days1), Lasts_n_days(\"month\", n_days2), n_days1 >= n_days2.\n.output Answer"]}
{"id": 1719, "answer": true, "completion": ".decl Is_unknown_to(Route:symbol, Person:symbol)\nIs_unknown_to(\"Route 66\", \"Americans\").\n.decl Answer()\nAnswer() :- Is_unknown_to(\"Route 66\", \"Americans\").\n.output Answer", "completions": [".decl Is_unknown_to(Route:symbol, Person:symbol)\nIs_unknown_to(\"Route 66\", \"Americans\").\n.decl Answer()\nAnswer() :- Is_unknown_to(\"Route 66\", \"Americans\").\n.output Answer"]}
{"id": 1720, "answer": false, "completion": ".decl Is_used_for(Object:symbol, Purpose:symbol)\nIs_used_for(\"pot\", \"cooking\").\nIs_used_for(\"pan\", \"cooking\").\nIs_used_for(\"pan\", \"baking\").\n.decl Answer()\nAnswer() :- Is_used_for(\"pot\", \"cooking\"), Is_used_for(\"pan\", \"cooking\"), Is_used_for(\"pan\", \"baking\").\n.output Answer", "completions": [".decl Is_used_for(Object:symbol, Purpose:symbol)\nIs_used_for(\"pot\", \"cooking\").\nIs_used_for(\"pan\", \"cooking\").\nIs_used_for(\"pan\", \"baking\").\n.decl Answer()\nAnswer() :- Is_used_for(\"pot\", \"cooking\"), Is_used_for(\"pan\", \"cooking\"), Is_used_for(\"pan\", \"baking\").\n.output Answer"]}
{"id": 1721, "answer": false, "completion": ".decl Uses(Person:symbol, Technology:symbol)\nUses(\"Malcolm X\", \"Unicode\").\n.decl Answer()\nAnswer() :- Uses(\"Malcolm X\", \"Unicode\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Technology:symbol)\nUses(\"Malcolm X\", \"Unicode\").\n.decl Answer()\nAnswer() :- Uses(\"Malcolm X\", \"Unicode\").\n.output Answer"]}
{"id": 1722, "answer": false, "completion": ".decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"driving from NYC to Raleigh NC\", 8).\n.decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"human heart\", 80).\n.decl Answer()\nAnswer() :- Lasts_for_n_hours(\"driving from NYC to Raleigh NC\", n_hours1), Lasts_for_n_hours(\"human heart\", n_hours2), n_hours1 <= n_hours2.\n.output Answer", "completions": [".decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"driving from NYC to Raleigh NC\", 8).\n.decl Lasts_for_n_hours(Event:symbol, N_hours:float)\nLasts_for_n_hours(\"human heart\", 80).\n.decl Answer()\nAnswer() :- Lasts_for_n_hours(\"driving from NYC to Raleigh NC\", n_hours1), Lasts_for_n_hours(\"human heart\", n_hours2), n_hours1 <= n_hours2.\n.output Answer"]}
{"id": 1723, "answer": true, "completion": ".decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"person\", \"tricarboxylic acid\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"watermelon\", \"tricarboxylic acid\").\n.decl Answer()\nAnswer() :- Has_allergy(\"person\", \"tricarboxylic acid\"), Has_ingredient(\"watermelon\", \"tricarboxylic acid\").\n.output Answer", "completions": [".decl Has_allergy(Person:symbol, Allergy:symbol)\nHas_allergy(\"person\", \"tricarboxylic acid\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"watermelon\", \"tricarboxylic acid\").\n.decl Answer()\nAnswer() :- Has_allergy(\"person\", \"tricarboxylic acid\"), Has_ingredient(\"watermelon\", \"tricarboxylic acid\").\n.output Answer"]}
{"id": 1724, "answer": true, "completion": ".decl Is_prevalent(Food:symbol, Cuisine:symbol)\nIs_prevalent(\"chicken\", \"Ethiopian\").\nIs_prevalent(\"beef\", \"Ethiopian\").\nIs_prevalent(\"lamb\", \"Ethiopian\").\nIs_prevalent(\"fish\", \"Ethiopian\").\nIs_prevalent(\"egg\", \"Ethiopian\").\nIs_prevalent(\"vegetable\", \"Ethiopian\").\nIs_prevalent(\"fruit\", \"Ethiopian\").\nIs_prevalent(\"milk\", \"Ethiopian\").\nIs_prevalent(\"butter\", \"Ethiopian\").\nIs_prevalent(\"cheese\", \"Ethiopian\").\nIs_prevalent(\"yogurt\", \"Ethiopian\").\nIs_prevalent(\"bread\", \"Ethiopian\").\nIs_prevalent(\"rice\", \"Ethiopian\").\nIs_prevalent(\"pasta\", \"Ethiopian\").\nIs_prevalent(\"stew\", \"Ethiopian\").\nIs_prevalent(\"soup\", \"Ethiopian\").\nIs_prevalent(\"salad\", \"Ethiopian\").\nIs_prevalent(\"coffee\", \"Ethiopian\").\nIs_prevalent(\"tea\", \"Ethiopian\").\nIs_prevalent(\"beer\", \"Ethiopian\").\nIs_prevalent(\"wine\", \"Ethiopian\").\nIs_prevalent(\"chocolate\", \"Ethiopian\").\nIs_prevalent(\"candy\", \"Ethiopian\").\nIs_prevalent(\"ice cream\", \"Ethiopian\").\n.decl Answer()\nAnswer() :- Is_prevalent(\"shrimp\", \"Ethiopian\").\n.output Answer", "completions": [".decl Is_prevalent(Food:symbol, Cuisine:symbol)\nIs_prevalent(\"chicken\", \"Ethiopian\").\nIs_prevalent(\"beef\", \"Ethiopian\").\nIs_prevalent(\"lamb\", \"Ethiopian\").\nIs_prevalent(\"fish\", \"Ethiopian\").\nIs_prevalent(\"egg\", \"Ethiopian\").\nIs_prevalent(\"vegetable\", \"Ethiopian\").\nIs_prevalent(\"fruit\", \"Ethiopian\").\nIs_prevalent(\"milk\", \"Ethiopian\").\nIs_prevalent(\"butter\", \"Ethiopian\").\nIs_prevalent(\"cheese\", \"Ethiopian\").\nIs_prevalent(\"yogurt\", \"Ethiopian\").\nIs_prevalent(\"bread\", \"Ethiopian\").\nIs_prevalent(\"rice\", \"Ethiopian\").\nIs_prevalent(\"pasta\", \"Ethiopian\").\nIs_prevalent(\"stew\", \"Ethiopian\").\nIs_prevalent(\"soup\", \"Ethiopian\").\nIs_prevalent(\"salad\", \"Ethiopian\").\nIs_prevalent(\"coffee\", \"Ethiopian\").\nIs_prevalent(\"tea\", \"Ethiopian\").\nIs_prevalent(\"beer\", \"Ethiopian\").\nIs_prevalent(\"wine\", \"Ethiopian\").\nIs_prevalent(\"chocolate\", \"Ethiopian\").\nIs_prevalent(\"candy\", \"Ethiopian\").\nIs_prevalent(\"ice cream\", \"Ethiopian\").\n.decl Answer()\nAnswer() :- Is_prevalent(\"shrimp\", \"Ethiopian\").\n.output Answer"]}
{"id": 1725, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Battle of San Jacinto\", \"San Antonio\").\nHappens_in_place(\"Battle of San Jacinto\", \"Houston\").\n.decl Happens_in_century(Event:symbol, Century:float)\nHappens_in_century(\"Battle of San Jacinto\", 19).\n.decl Answer()\nAnswer() :- Happens_in_place(\"Battle of San Jacinto\", \"San Antonio\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Battle of San Jacinto\", \"San Antonio\").\nHappens_in_place(\"Battle of San Jacinto\", \"Houston\").\n.decl Happens_in_century(Event:symbol, Century:float)\nHappens_in_century(\"Battle of San Jacinto\", 19).\n.decl Answer()\nAnswer() :- Happens_in_place(\"Battle of San Jacinto\", \"San Antonio\").\n.output Answer"]}
{"id": 1726, "answer": true, "completion": ".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"T-1000\", \"liquid metal\").\nIs_made_of(\"snakebite\", \"venom\").\n.decl Answer()\nAnswer() :- Is_made_of(\"T-1000\", \"liquid metal\"), Is_made_of(\"snakebite\", \"venom\").\n.output Answer", "completions": [".decl Is_made_of(Object:symbol, Material:symbol)\nIs_made_of(\"T-1000\", \"liquid metal\").\nIs_made_of(\"snakebite\", \"venom\").\n.decl Answer()\nAnswer() :- Is_made_of(\"T-1000\", \"liquid metal\"), Is_made_of(\"snakebite\", \"venom\").\n.output Answer"]}
{"id": 1727, "answer": true, "completion": ".decl Is_a_belt(Person:symbol, Belt:symbol)\nIs_a_belt(\"Jon Jones\", \"black belt\").\nIs_a_belt(\"white belt\", \"white belt\").\n.decl Is_better_than(Belt1:symbol, Belt2:symbol)\nIs_better_than(\"black belt\", \"white belt\").\n.decl Answer()\nAnswer() :- Is_a_belt(\"white belt\", \"white belt\"), Is_a_belt(\"Jon Jones\", \"black belt\"), Is_better_than(\"black belt\", \"white belt\").\n.output Answer", "completions": [".decl Is_a_belt(Person:symbol, Belt:symbol)\nIs_a_belt(\"Jon Jones\", \"black belt\").\nIs_a_belt(\"white belt\", \"white belt\").\n.decl Is_better_than(Belt1:symbol, Belt2:symbol)\nIs_better_than(\"black belt\", \"white belt\").\n.decl Answer()\nAnswer() :- Is_a_belt(\"white belt\", \"white belt\"), Is_a_belt(\"Jon Jones\", \"black belt\"), Is_better_than(\"black belt\", \"white belt\").\n.output Answer"]}
{"id": 1728, "answer": true, "completion": ".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Darth Vader\", \"evil\").\nHas_character(\"Severus Snape\", \"evil\").\n.decl Answer()\nAnswer() :- Has_character(\"Darth Vader\", character1), Has_character(\"Severus Snape\", character2), character1 = character2.\n.output Answer", "completions": [".decl Has_character(Person:symbol, Character:symbol)\nHas_character(\"Darth Vader\", \"evil\").\nHas_character(\"Severus Snape\", \"evil\").\n.decl Answer()\nAnswer() :- Has_character(\"Darth Vader\", character1), Has_character(\"Severus Snape\", character2), character1 = character2.\n.output Answer"]}
{"id": 1729, "answer": false, "completion": ".decl Has_phenomenon(Weather:symbol, Phenomenon:symbol)\nHas_phenomenon(\"hurricane\", \"wind\").\nHas_phenomenon(\"hurricane\", \"rain\").\nHas_phenomenon(\"hurricane\", \"flooding\").\nHas_phenomenon(\"hurricane\", \"storm surge\").\nHas_phenomenon(\"hurricane\", \"high waves\").\nHas_phenomenon(\"hurricane\", \"tornadoes\").\nHas_phenomenon(\"hurricane\", \"snow\").\nHas_phenomenon(\"hurricane\", \"ice\").\nHas_phenomenon(\"hurricane\", \"sleet\").\nHas_phenomenon(\"hurricane\", \"freezing rain\").\nHas_phenomenon(\"hurricane\", \"thunderstorms\").\nHas_phenomenon(\"hurricane\", \"lightning\").\nHas_phenomenon(\"hurricane\", \"hail\").\nHas_phenomenon(\"hurricane\", \"drought\").\nHas_phenomenon(\"hurricane\", \"heat\").\nHas_phenomenon(\"hurricane\", \"wildfires\").\nHas_phenomenon(\"hurricane\", \"mudslides\").\nHas_phenomenon(\"hurricane\", \"landslides\").\nHas_phenomenon(\"hurricane\", \"avalanches\").\nHas_phenomenon(\"hurricane\", \"flooding\").\nHas_phenomenon(\"hurricane\", \"erosion\").\nHas_phenomenon(\"hurricane\", \"dust storms\").\nHas_phenomenon(\"hurricane\", \"sandstorms\").\nHas_phenomenon(\"hurricane\", \"fog\").\nHas_phenomenon(\"hurricane\", \"smog\").\nHas_phenomenon(\"hurricane\", \"air pollution\").\nHas_phenomenon(\"hurricane\", \"earthquakes\").\nHas_phenomenon(\"hurricane\", \"tsunamis\").\nHas_phenomenon(\"hurricane\", \"volcanoes\").\nHas_phenomenon(\"hurricane\", \"ash\").\nHas_phenomenon(\"hurricane\", \"lava\").\nHas_phenomenon(\"hurricane\", \"smoke\").\nHas_phenomenon(\"hurricane\", \"flooding\").\nHas_phenomenon(\"hurricane\", \"landslides\").\nHas_phenomenon(\"hurricane\", \"mudslides\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"s", "completions": [".decl Has_phenomenon(Weather:symbol, Phenomenon:symbol)\nHas_phenomenon(\"hurricane\", \"wind\").\nHas_phenomenon(\"hurricane\", \"rain\").\nHas_phenomenon(\"hurricane\", \"flooding\").\nHas_phenomenon(\"hurricane\", \"storm surge\").\nHas_phenomenon(\"hurricane\", \"high waves\").\nHas_phenomenon(\"hurricane\", \"tornadoes\").\nHas_phenomenon(\"hurricane\", \"snow\").\nHas_phenomenon(\"hurricane\", \"ice\").\nHas_phenomenon(\"hurricane\", \"sleet\").\nHas_phenomenon(\"hurricane\", \"freezing rain\").\nHas_phenomenon(\"hurricane\", \"thunderstorms\").\nHas_phenomenon(\"hurricane\", \"lightning\").\nHas_phenomenon(\"hurricane\", \"hail\").\nHas_phenomenon(\"hurricane\", \"drought\").\nHas_phenomenon(\"hurricane\", \"heat\").\nHas_phenomenon(\"hurricane\", \"wildfires\").\nHas_phenomenon(\"hurricane\", \"mudslides\").\nHas_phenomenon(\"hurricane\", \"landslides\").\nHas_phenomenon(\"hurricane\", \"avalanches\").\nHas_phenomenon(\"hurricane\", \"flooding\").\nHas_phenomenon(\"hurricane\", \"erosion\").\nHas_phenomenon(\"hurricane\", \"dust storms\").\nHas_phenomenon(\"hurricane\", \"sandstorms\").\nHas_phenomenon(\"hurricane\", \"fog\").\nHas_phenomenon(\"hurricane\", \"smog\").\nHas_phenomenon(\"hurricane\", \"air pollution\").\nHas_phenomenon(\"hurricane\", \"earthquakes\").\nHas_phenomenon(\"hurricane\", \"tsunamis\").\nHas_phenomenon(\"hurricane\", \"volcanoes\").\nHas_phenomenon(\"hurricane\", \"ash\").\nHas_phenomenon(\"hurricane\", \"lava\").\nHas_phenomenon(\"hurricane\", \"smoke\").\nHas_phenomenon(\"hurricane\", \"flooding\").\nHas_phenomenon(\"hurricane\", \"landslides\").\nHas_phenomenon(\"hurricane\", \"mudslides\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"sinkholes\").\nHas_phenomenon(\"hurricane\", \"s"]}
{"id": 1730, "answer": false, "completion": ".decl Influences(Person:symbol, Genre:symbol)\nInfluences(\"Johann Sebastian Bach\", \"baroque music\").\nInfluences(\"baroque music\", \"heavy metal\").\n.decl Answer()\nAnswer() :- Influences(\"Johann Sebastian Bach\", \"heavy metal\").\nAnswer() :- Influences(\"Johann Sebastian Bach\", genre1), Influences(genre1, \"heavy metal\").\n.output Answer", "completions": [".decl Influences(Person:symbol, Genre:symbol)\nInfluences(\"Johann Sebastian Bach\", \"baroque music\").\nInfluences(\"baroque music\", \"heavy metal\").\n.decl Answer()\nAnswer() :- Influences(\"Johann Sebastian Bach\", \"heavy metal\").\nAnswer() :- Influences(\"Johann Sebastian Bach\", genre1), Influences(genre1, \"heavy metal\").\n.output Answer"]}
{"id": 1731, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Big Show\", 400).\nHas_mass(\"cheetah\", 90).\n.decl Has_acceleration(Object:symbol, Acceleration:float)\nHas_acceleration(\"cheetah\", 8).\n.decl Answer()\nAnswer() :- Has_mass(\"Big Show\", mass1), Has_mass(\"cheetah\", mass2), Has_acceleration(\"cheetah\", acceleration), mass2 * acceleration > mass1.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Big Show\", 400).\nHas_mass(\"cheetah\", 90).\n.decl Has_acceleration(Object:symbol, Acceleration:float)\nHas_acceleration(\"cheetah\", 8).\n.decl Answer()\nAnswer() :- Has_mass(\"Big Show\", mass1), Has_mass(\"cheetah\", mass2), Has_acceleration(\"cheetah\", acceleration), mass2 * acceleration > mass1.\n.output Answer"]}
{"id": 1732, "answer": true, "completion": ".decl Can_do(Person:symbol, Activity:symbol)\nCan_do(\"paratrooper\", \"mountain rescue\").\nCan_do(\"mountain rescuer\", \"mountain rescue\").\n.decl Answer()\nAnswer() :- Can_do(person, \"mountain rescue\"), Can_do(\"paratrooper\", activity).\n.output Answer\n\n\n", "completions": [".decl Can_do(Person:symbol, Activity:symbol)\nCan_do(\"paratrooper\", \"mountain rescue\").\nCan_do(\"mountain rescuer\", \"mountain rescue\").\n.decl Answer()\nAnswer() :- Can_do(person, \"mountain rescue\"), Can_do(\"paratrooper\", activity).\n.output Answer\n\n\n"]}
{"id": 1733, "answer": true, "completion": ".decl Is_associated_with(Culture:symbol, Event:symbol)\nIs_associated_with(\"ancient Egyptians\", \"death\").\nIs_associated_with(\"ancient Greeks\", \"death\").\n.decl Answer()\nAnswer() :- Is_associated_with(culture, \"death\"), Is_associated_with(culture, \"celery\").\n.output Answer", "completions": [".decl Is_associated_with(Culture:symbol, Event:symbol)\nIs_associated_with(\"ancient Egyptians\", \"death\").\nIs_associated_with(\"ancient Greeks\", \"death\").\n.decl Answer()\nAnswer() :- Is_associated_with(culture, \"death\"), Is_associated_with(culture, \"celery\").\n.output Answer"]}
{"id": 1734, "answer": true, "completion": ".decl Served_as_president(Person:symbol, Party:symbol, Start_year:float, End_year:float)\nServed_as_president(\"Woodrow Wilson\", \"Democratic\", 1913, 1921).\nServed_as_president(\"William Howard Taft\", \"Republican\", 1909, 1913).\nServed_as_president(\"Warren G. Harding\", \"Republican\", 1921, 1923).\n.decl Answer()\nAnswer() :- Served_as_president(\"Woodrow Wilson\", \"Democratic\", start_year1, end_year1), Served_as_president(\"William Howard Taft\", \"Republican\", start_year2, end_year2), Served_as_president(\"Warren G. Harding\", \"Republican\", start_year3, end_year3), start_year1 > start_year2, end_year1 < end_year3.\n.output Answer", "completions": [".decl Served_as_president(Person:symbol, Party:symbol, Start_year:float, End_year:float)\nServed_as_president(\"Woodrow Wilson\", \"Democratic\", 1913, 1921).\nServed_as_president(\"William Howard Taft\", \"Republican\", 1909, 1913).\nServed_as_president(\"Warren G. Harding\", \"Republican\", 1921, 1923).\n.decl Answer()\nAnswer() :- Served_as_president(\"Woodrow Wilson\", \"Democratic\", start_year1, end_year1), Served_as_president(\"William Howard Taft\", \"Republican\", start_year2, end_year2), Served_as_president(\"Warren G. Harding\", \"Republican\", start_year3, end_year3), start_year1 > start_year2, end_year1 < end_year3.\n.output Answer"]}
{"id": 1735, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Vietnam War\", 1965).\n.decl Has_n_troops(Event:symbol, N_troops:float)\nHas_n_troops(\"Vietnam War\", 150000).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Vietnam War\", year), Has_n_troops(\"Vietnam War\", n_troops), n_troops < 150000.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Vietnam War\", 1965).\n.decl Has_n_troops(Event:symbol, N_troops:float)\nHas_n_troops(\"Vietnam War\", 150000).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Vietnam War\", year), Has_n_troops(\"Vietnam War\", n_troops), n_troops < 150000.\n.output Answer"]}
{"id": 1736, "answer": true, "completion": ".decl Is_usual_for_grade(Assignment:symbol, Grade:symbol)\nIs_usual_for_grade(\"thesis paper\", \"college\").\nIs_usual_for_grade(\"thesis paper\", \"graduate school\").\n.decl Answer()\nAnswer() :- Is_usual_for_grade(\"thesis paper\", \"kindergarten\").\n.output Answer", "completions": [".decl Is_usual_for_grade(Assignment:symbol, Grade:symbol)\nIs_usual_for_grade(\"thesis paper\", \"college\").\nIs_usual_for_grade(\"thesis paper\", \"graduate school\").\n.decl Answer()\nAnswer() :- Is_usual_for_grade(\"thesis paper\", \"kindergarten\").\n.output Answer"]}
{"id": 1737, "answer": true, "completion": ".decl Is_a_cephalophore(Person:symbol)\nIs_a_cephalophore(\"John the Baptist\").\n.decl Answer()\nAnswer() :- Is_a_cephalophore(\"John the Baptist\").\n.output Answer", "completions": [".decl Is_a_cephalophore(Person:symbol)\nIs_a_cephalophore(\"John the Baptist\").\n.decl Answer()\nAnswer() :- Is_a_cephalophore(\"John the Baptist\").\n.output Answer"]}
{"id": 1738, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"War to End All Wars\", 4).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Wehrmacht\", 5).\n.decl Answer()\nAnswer() :- Last_n_years(\"War to End All Wars\", n_years1), Last_n_years(\"Wehrmacht\", n_years2), n_years1 >= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"War to End All Wars\", 4).\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Wehrmacht\", 5).\n.decl Answer()\nAnswer() :- Last_n_years(\"War to End All Wars\", n_years1), Last_n_years(\"Wehrmacht\", n_years2), n_years1 >= n_years2.\n.output Answer"]}
{"id": 1739, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Lil Wayne's career\", 15).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"legal to operate a vehicle on his own\", 16).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"legal to operate a vehicle on his own\", n_years1), Last_n_years(\"Lil Wayne's career\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Lil Wayne's career\", 15).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"legal to operate a vehicle on his own\", 16).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"legal to operate a vehicle on his own\", n_years1), Last_n_years(\"Lil Wayne's career\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1740, "answer": false, "completion": ".decl Teaches(Teacher:symbol, Student:symbol)\nTeaches(\"Professor Dumbledore\", \"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Teaches(teacher, \"Lord Voldemort\").\n.output Answer", "completions": [".decl Teaches(Teacher:symbol, Student:symbol)\nTeaches(\"Professor Dumbledore\", \"Lord Voldemort\").\n.decl Answer()\nAnswer() :- Teaches(teacher, \"Lord Voldemort\").\n.output Answer"]}
{"id": 1741, "answer": false, "completion": ".decl Has_name(Thing:symbol, Name:symbol)\nHas_name(\"Olympia Washington\", \"Olympia\").\nHas_name(\"Hephaestus's workshop\", \"Olympia\").\n.decl Answer()\nAnswer() :- Has_name(\"Olympia Washington\", name1), Has_name(\"Hephaestus's workshop\", name2), name1 = name2.\n.output Answer", "completions": [".decl Has_name(Thing:symbol, Name:symbol)\nHas_name(\"Olympia Washington\", \"Olympia\").\nHas_name(\"Hephaestus's workshop\", \"Olympia\").\n.decl Answer()\nAnswer() :- Has_name(\"Olympia Washington\", name1), Has_name(\"Hephaestus's workshop\", name2), name1 = name2.\n.output Answer"]}
{"id": 1742, "answer": true, "completion": ".decl Stands_for(Acronym:symbol, Phrase:symbol)\nStands_for(\"JPEG\", \"Joint Photographic Experts Group\").\n.decl Answer()\nAnswer() :- Stands_for(\"JPEG\", phrase), phrase = \"joint committee\".\n.output Answer", "completions": [".decl Stands_for(Acronym:symbol, Phrase:symbol)\nStands_for(\"JPEG\", \"Joint Photographic Experts Group\").\n.decl Answer()\nAnswer() :- Stands_for(\"JPEG\", phrase), phrase = \"joint committee\".\n.output Answer"]}
{"id": 1743, "answer": false, "completion": ".decl Has_money(Person:symbol, Money:float)\nHas_money(\"Mickey Mouse\", 0).\n.decl Answer()\nAnswer() :- Has_money(\"Mickey Mouse\", money), money = 0.\n.output Answer", "completions": [".decl Has_money(Person:symbol, Money:float)\nHas_money(\"Mickey Mouse\", 0).\n.decl Answer()\nAnswer() :- Has_money(\"Mickey Mouse\", money), money = 0.\n.output Answer"]}
{"id": 1744, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Watergate scandal\", 1972).\nHappens_in_year(\"Watergate scandal\", 1973).\nHappens_in_year(\"Watergate scandal\", 1974).\nHappens_in_year(\"Watergate scandal\", 1975).\nHappens_in_year(\"Watergate scandal\", 1976).\nHappens_in_year(\"Watergate scandal\", 1977).\nHappens_in_year(\"Watergate scandal\", 1978).\nHappens_in_year(\"Watergate scandal\", 1979).\nHappens_in_year(\"Watergate scandal\", 1980).\nHappens_in_year(\"Watergate scandal\", 1981).\nHappens_in_year(\"Watergate scandal\", 1982).\nHappens_in_year(\"Watergate scandal\", 1983).\nHappens_in_year(\"Watergate scandal\", 1984).\nHappens_in_year(\"Watergate scandal\", 1985).\nHappens_in_year(\"Watergate scandal\", 1986).\nHappens_in_year(\"Watergate scandal\", 1987).\nHappens_in_year(\"Watergate scandal\", 1988).\nHappens_in_year(\"Watergate scandal\", 1989).\nHappens_in_year(\"Watergate scandal\", 1990).\nHappens_in_year(\"Watergate scandal\", 1991).\nHappens_in_year(\"Watergate scandal\", 1992).\nHappens_in_year(\"Watergate scandal\", 1993).\nHappens_in_year(\"Watergate scandal\", 1994).\nHappens_in_year(\"Watergate scandal\", 1995).\nHappens_in_year(\"Watergate scandal\", 1996).\nHappens_in_year(\"Watergate scandal\", 1997).\nHappens_in_year(\"Watergate scandal\", 1998).\nHappens_in_year(\"Watergate scandal\", 1999).\nHappens_in_year(\"Watergate scandal\", 2000).\nHappens_in_year(\"Watergate scandal\", 2001).\nHappens_in_year(\"Watergate scandal\", 2002).\nHappens_in_year(\"Watergate scandal\", 2003).\nHappens_in_year(\"Watergate scandal\", 2004).\nHappens_in_year(\"Watergate scandal\", 2005).\nHappens_in_year(\"Watergate scandal\", 2006).\nHappens_in_year(\"Watergate scandal\", 2007).\nHappens_in_year(\"Watergate scandal\", 2008).\nHappens_in_year(\"Watergate scandal\", 2009).\nHappens_in_year(\"Watergate scandal\", 2010).\nHappens_in_year(\"Watergate scandal\", 2011).\nHappens_in_year(\"Watergate scandal\", 2012).\nHappens_in_year(\"Watergate scandal\", 2013).\nHappens_in_year(\"Watergate scandal\", 2014).\nHappens_in_year(\"Watergate scandal\", 2015).\nHappens_in_year(\"Watergate scandal\", 2016).\nHappens_in_year(\"Watergate scandal\", 2017).\nHappens_in_year(\"Watergate scandal\", 2018).\nHappens_in_year(\"Watergate scandal\", 2019).\nHappens_in_year(\"Watergate scandal\", 2020).\nHappens_in_year(\"Watergate scandal\", 2021).\nHappens_in_year(\"Watergate scandal\", 2022).\nHappens_in_year(\"Watergate scandal\", 2023).\n", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Watergate scandal\", 1972).\nHappens_in_year(\"Watergate scandal\", 1973).\nHappens_in_year(\"Watergate scandal\", 1974).\nHappens_in_year(\"Watergate scandal\", 1975).\nHappens_in_year(\"Watergate scandal\", 1976).\nHappens_in_year(\"Watergate scandal\", 1977).\nHappens_in_year(\"Watergate scandal\", 1978).\nHappens_in_year(\"Watergate scandal\", 1979).\nHappens_in_year(\"Watergate scandal\", 1980).\nHappens_in_year(\"Watergate scandal\", 1981).\nHappens_in_year(\"Watergate scandal\", 1982).\nHappens_in_year(\"Watergate scandal\", 1983).\nHappens_in_year(\"Watergate scandal\", 1984).\nHappens_in_year(\"Watergate scandal\", 1985).\nHappens_in_year(\"Watergate scandal\", 1986).\nHappens_in_year(\"Watergate scandal\", 1987).\nHappens_in_year(\"Watergate scandal\", 1988).\nHappens_in_year(\"Watergate scandal\", 1989).\nHappens_in_year(\"Watergate scandal\", 1990).\nHappens_in_year(\"Watergate scandal\", 1991).\nHappens_in_year(\"Watergate scandal\", 1992).\nHappens_in_year(\"Watergate scandal\", 1993).\nHappens_in_year(\"Watergate scandal\", 1994).\nHappens_in_year(\"Watergate scandal\", 1995).\nHappens_in_year(\"Watergate scandal\", 1996).\nHappens_in_year(\"Watergate scandal\", 1997).\nHappens_in_year(\"Watergate scandal\", 1998).\nHappens_in_year(\"Watergate scandal\", 1999).\nHappens_in_year(\"Watergate scandal\", 2000).\nHappens_in_year(\"Watergate scandal\", 2001).\nHappens_in_year(\"Watergate scandal\", 2002).\nHappens_in_year(\"Watergate scandal\", 2003).\nHappens_in_year(\"Watergate scandal\", 2004).\nHappens_in_year(\"Watergate scandal\", 2005).\nHappens_in_year(\"Watergate scandal\", 2006).\nHappens_in_year(\"Watergate scandal\", 2007).\nHappens_in_year(\"Watergate scandal\", 2008).\nHappens_in_year(\"Watergate scandal\", 2009).\nHappens_in_year(\"Watergate scandal\", 2010).\nHappens_in_year(\"Watergate scandal\", 2011).\nHappens_in_year(\"Watergate scandal\", 2012).\nHappens_in_year(\"Watergate scandal\", 2013).\nHappens_in_year(\"Watergate scandal\", 2014).\nHappens_in_year(\"Watergate scandal\", 2015).\nHappens_in_year(\"Watergate scandal\", 2016).\nHappens_in_year(\"Watergate scandal\", 2017).\nHappens_in_year(\"Watergate scandal\", 2018).\nHappens_in_year(\"Watergate scandal\", 2019).\nHappens_in_year(\"Watergate scandal\", 2020).\nHappens_in_year(\"Watergate scandal\", 2021).\nHappens_in_year(\"Watergate scandal\", 2022).\nHappens_in_year(\"Watergate scandal\", 2023).\n"]}
{"id": 1745, "answer": true, "completion": ".decl Last_n_years(Person:symbol, N_years:float)\nLast_n_years(\"original lead guitarist of Metallica\", 30).\n.decl Last_n_years(Person:symbol, N_years:float)\nLast_n_years(\"parting from the band\", 30).\n.decl Answer()\nAnswer() :- Last_n_years(\"original lead guitarist of Metallica\", n_years1), Last_n_years(\"parting from the band\", n_years2), n_years1 > n_years2.\n.output Answer", "completions": [".decl Last_n_years(Person:symbol, N_years:float)\nLast_n_years(\"original lead guitarist of Metallica\", 30).\n.decl Last_n_years(Person:symbol, N_years:float)\nLast_n_years(\"parting from the band\", 30).\n.decl Answer()\nAnswer() :- Last_n_years(\"original lead guitarist of Metallica\", n_years1), Last_n_years(\"parting from the band\", n_years2), n_years1 > n_years2.\n.output Answer"]}
{"id": 1746, "answer": false, "completion": ".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Iggy Pop\", \"James Osterberg Sr.\").\n.decl Has_first_name(Person:symbol, First_name:symbol)\nHas_first_name(\"Iggy Pop\", \"James\").\nHas_first_name(\"James Osterberg Sr.\", \"James\").\n.decl Answer()\nAnswer() :- Has_father(\"Iggy Pop\", father), Has_first_name(\"Iggy Pop\", first_name), Has_first_name(father, first_name).\n.output Answer", "completions": [".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Iggy Pop\", \"James Osterberg Sr.\").\n.decl Has_first_name(Person:symbol, First_name:symbol)\nHas_first_name(\"Iggy Pop\", \"James\").\nHas_first_name(\"James Osterberg Sr.\", \"James\").\n.decl Answer()\nAnswer() :- Has_father(\"Iggy Pop\", father), Has_first_name(\"Iggy Pop\", first_name), Has_first_name(father, first_name).\n.output Answer"]}
{"id": 1747, "answer": false, "completion": ".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Hindu\", \"Shiva\").\n.decl Makes_pilgrimage(Person:symbol, Destination:symbol)\nMakes_pilgrimage(\"Hindu\", \"Holy Land\").\n.decl Answer()\nAnswer() :- Worships(person, \"Shiva\"), Makes_pilgrimage(person, \"Holy Land\").\n.output Answer", "completions": [".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Hindu\", \"Shiva\").\n.decl Makes_pilgrimage(Person:symbol, Destination:symbol)\nMakes_pilgrimage(\"Hindu\", \"Holy Land\").\n.decl Answer()\nAnswer() :- Worships(person, \"Shiva\"), Makes_pilgrimage(person, \"Holy Land\").\n.output Answer"]}
{"id": 1748, "answer": true, "completion": ".decl Has_leaves(Plant:symbol, Leaves:symbol)\nHas_leaves(\"coca\", \"coca leaves\").\n.decl Has_effect(Substance:symbol, Effect:symbol)\nHas_effect(\"coca leaves\", \"weight gain\").\n.decl Answer()\nAnswer() :- Has_leaves(plant, leaves), Has_effect(leaves, \"weight gain\").\n.output Answer", "completions": [".decl Has_leaves(Plant:symbol, Leaves:symbol)\nHas_leaves(\"coca\", \"coca leaves\").\n.decl Has_effect(Substance:symbol, Effect:symbol)\nHas_effect(\"coca leaves\", \"weight gain\").\n.decl Answer()\nAnswer() :- Has_leaves(plant, leaves), Has_effect(leaves, \"weight gain\").\n.output Answer"]}
{"id": 1749, "answer": false, "completion": ".decl Has_formation_type(Bird:symbol, Formation_type:symbol)\nHas_formation_type(\"black swan\", \"V\").\n.decl Has_length(Word:symbol, Length:float)\nHas_length(\"dictionary\", 9).\n.decl Answer()\nAnswer() :- Has_formation_type(\"black swan\", \"V\"), Has_length(\"dictionary\", length1), length1 >= 8.\n.output Answer", "completions": [".decl Has_formation_type(Bird:symbol, Formation_type:symbol)\nHas_formation_type(\"black swan\", \"V\").\n.decl Has_length(Word:symbol, Length:float)\nHas_length(\"dictionary\", 9).\n.decl Answer()\nAnswer() :- Has_formation_type(\"black swan\", \"V\"), Has_length(\"dictionary\", length1), length1 >= 8.\n.output Answer"]}
{"id": 1750, "answer": true, "completion": ".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"C-SPAN\", \"Cable-Satellite Public Affairs Network\").\n.decl Uses(Object:symbol, Medium:symbol)\nUses(\"C-SPAN\", \"cable television\").\nUses(\"C-SPAN\", \"satellite television\").\nUses(\"Cable-Satellite Public Affairs Network\", \"outer space\").\n.decl Answer()\nAnswer() :- Has_name(object, \"Cable-Satellite Public Affairs Network\"), Uses(object, \"outer space\").\n.output Answer", "completions": [".decl Has_name(Object:symbol, Name:symbol)\nHas_name(\"C-SPAN\", \"Cable-Satellite Public Affairs Network\").\n.decl Uses(Object:symbol, Medium:symbol)\nUses(\"C-SPAN\", \"cable television\").\nUses(\"C-SPAN\", \"satellite television\").\nUses(\"Cable-Satellite Public Affairs Network\", \"outer space\").\n.decl Answer()\nAnswer() :- Has_name(object, \"Cable-Satellite Public Affairs Network\"), Uses(object, \"outer space\").\n.output Answer"]}
{"id": 1751, "answer": true, "completion": ".decl Has_frequency(Sound:symbol, Frequency:float)\nHas_frequency(\"Kelly Clarkson's voice\", 250).\nHas_frequency(\"glass\", 4000).\n.decl Answer()\nAnswer() :- Has_frequency(\"Kelly Clarkson's voice\", frequency1), Has_frequency(\"glass\", frequency2), frequency1 > frequency2.\n.output Answer", "completions": [".decl Has_frequency(Sound:symbol, Frequency:float)\nHas_frequency(\"Kelly Clarkson's voice\", 250).\nHas_frequency(\"glass\", 4000).\n.decl Answer()\nAnswer() :- Has_frequency(\"Kelly Clarkson's voice\", frequency1), Has_frequency(\"glass\", frequency2), frequency1 > frequency2.\n.output Answer"]}
{"id": 1752, "answer": true, "completion": ".decl Gives_presents(Person:symbol, Person_receiving_presents:symbol)\nGives_presents(\"Santa Claus\", \"Joffrey Baratheon\").\n.decl Answer()\nAnswer() :- Gives_presents(\"Santa Claus\", \"Joffrey Baratheon\").\n.output Answer", "completions": [".decl Gives_presents(Person:symbol, Person_receiving_presents:symbol)\nGives_presents(\"Santa Claus\", \"Joffrey Baratheon\").\n.decl Answer()\nAnswer() :- Gives_presents(\"Santa Claus\", \"Joffrey Baratheon\").\n.output Answer"]}
{"id": 1753, "answer": true, "completion": ".decl Has_family(Plant:symbol, Family:symbol)\nHas_family(\"slime lily\", \"Araceae\").\nHas_family(\"asparagus\", \"Liliaceae\").\n.decl Answer()\nAnswer() :- Has_family(\"slime lily\", family1), Has_family(\"asparagus\", family2), family1 != family2.\n.output Answer", "completions": [".decl Has_family(Plant:symbol, Family:symbol)\nHas_family(\"slime lily\", \"Araceae\").\nHas_family(\"asparagus\", \"Liliaceae\").\n.decl Answer()\nAnswer() :- Has_family(\"slime lily\", family1), Has_family(\"asparagus\", family2), family1 != family2.\n.output Answer"]}
{"id": 1754, "answer": false, "completion": ".decl Goes_to(Person:symbol, Place:symbol)\nGoes_to(\"Christopher Columbus\", \"America\").\n.decl Answer()\nAnswer() :- Goes_to(\"Christopher Columbus\", \"Antarctica\").\n.output Answer", "completions": [".decl Goes_to(Person:symbol, Place:symbol)\nGoes_to(\"Christopher Columbus\", \"America\").\n.decl Answer()\nAnswer() :- Goes_to(\"Christopher Columbus\", \"Antarctica\").\n.output Answer"]}
{"id": 1755, "answer": true, "completion": ".decl Has_limbs(Animal:symbol, Limbs:float)\nHas_limbs(\"snake\", 0).\nHas_limbs(\"snowshoe\", 2).\n.decl Answer()\nAnswer() :- Has_limbs(\"snake\", limbs1), Has_limbs(\"snowshoe\", limbs2), limbs1 < limbs2.\n.output Answer", "completions": [".decl Has_limbs(Animal:symbol, Limbs:float)\nHas_limbs(\"snake\", 0).\nHas_limbs(\"snowshoe\", 2).\n.decl Answer()\nAnswer() :- Has_limbs(\"snake\", limbs1), Has_limbs(\"snowshoe\", limbs2), limbs1 < limbs2.\n.output Answer"]}
{"id": 1756, "answer": true, "completion": ".decl Has_heart_rate(Animal:symbol, Heart_rate:float)\nHas_heart_rate(\"northern fur seal\", 60).\n.decl Has_body_temperature(Animal:symbol, Body_temperature:float)\nHas_body_temperature(\"northern fur seal\", 37).\n.decl Answer()\nAnswer() :- Has_heart_rate(\"northern fur seal\", heart_rate), Has_body_temperature(\"northern fur seal\", body_temperature), heart_rate > 100, body_temperature > 38.\n.output Answer", "completions": [".decl Has_heart_rate(Animal:symbol, Heart_rate:float)\nHas_heart_rate(\"northern fur seal\", 60).\n.decl Has_body_temperature(Animal:symbol, Body_temperature:float)\nHas_body_temperature(\"northern fur seal\", 37).\n.decl Answer()\nAnswer() :- Has_heart_rate(\"northern fur seal\", heart_rate), Has_body_temperature(\"northern fur seal\", body_temperature), heart_rate > 100, body_temperature > 38.\n.output Answer"]}
{"id": 1757, "answer": true, "completion": ".decl In_state(County:symbol, State:symbol)\nIn_state(\"Orange County\", \"California\").\n.decl Requires(County:symbol, Requirement:symbol)\nRequires(\"Orange County\", \"quiet airplanes\").\n.decl Answer()\nAnswer() :- In_state(\"Orange County\", \"California\"), Requires(\"Orange County\", \"quiet airplanes\").\n.output Answer", "completions": [".decl In_state(County:symbol, State:symbol)\nIn_state(\"Orange County\", \"California\").\n.decl Requires(County:symbol, Requirement:symbol)\nRequires(\"Orange County\", \"quiet airplanes\").\n.decl Answer()\nAnswer() :- In_state(\"Orange County\", \"California\"), Requires(\"Orange County\", \"quiet airplanes\").\n.output Answer"]}
{"id": 1758, "answer": false, "completion": ".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Charlemagne\", \"Pepin the Short\").\n.decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Pepin the Short\", \"Charlemagne\").\n.decl Has_outcome(Battle:symbol, Outcome:symbol)\nHas_outcome(\"Battle of Tours\", \"Charles Martel's victory\").\n.decl Answer()\nAnswer() :- Has_father(\"Charlemagne\", \"Pepin the Short\"), Has_son(\"Pepin the Short\", \"Charlemagne\"), Has_outcome(\"Battle of Tours\", \"Charles Martel's victory\").\n.output Answer", "completions": [".decl Has_father(Person:symbol, Father:symbol)\nHas_father(\"Charlemagne\", \"Pepin the Short\").\n.decl Has_son(Person:symbol, Son:symbol)\nHas_son(\"Pepin the Short\", \"Charlemagne\").\n.decl Has_outcome(Battle:symbol, Outcome:symbol)\nHas_outcome(\"Battle of Tours\", \"Charles Martel's victory\").\n.decl Answer()\nAnswer() :- Has_father(\"Charlemagne\", \"Pepin the Short\"), Has_son(\"Pepin the Short\", \"Charlemagne\"), Has_outcome(\"Battle of Tours\", \"Charles Martel's victory\").\n.output Answer"]}
{"id": 1759, "answer": false, "completion": ".decl Interviews(Person1:symbol, Person2:symbol)\nInterviews(\"Anderson Cooper\", \"Walt Disney\").\n.decl Answer()\nAnswer() :- Interviews(\"Anderson Cooper\", \"Walt Disney\").\n.output Answer", "completions": [".decl Interviews(Person1:symbol, Person2:symbol)\nInterviews(\"Anderson Cooper\", \"Walt Disney\").\n.decl Answer()\nAnswer() :- Interviews(\"Anderson Cooper\", \"Walt Disney\").\n.output Answer"]}
{"id": 1760, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Super Mario\", 35).\n.decl Requires_continuing_education(State:symbol, Profession:symbol)\nRequires_continuing_education(\"Illinois\", \"plumber\").\n.decl Answer()\nAnswer() :- Has_age(\"Super Mario\", age), Requires_continuing_education(\"Illinois\", profession), age < 18.\nAnswer() :- Has_age(\"Super Mario\", age), Requires_continuing_education(\"Illinois\", profession), age >= 65.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Super Mario\", 35).\n.decl Requires_continuing_education(State:symbol, Profession:symbol)\nRequires_continuing_education(\"Illinois\", \"plumber\").\n.decl Answer()\nAnswer() :- Has_age(\"Super Mario\", age), Requires_continuing_education(\"Illinois\", profession), age < 18.\nAnswer() :- Has_age(\"Super Mario\", age), Requires_continuing_education(\"Illinois\", profession), age >= 65.\n.output Answer"]}
{"id": 1761, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Rita Ora\", \"strep throat\").\nHas_disease(\"Rita Ora\", \"tonsilitis\").\n.decl Is_harmless(Disease:symbol, Person:symbol)\nIs_harmless(\"strep throat\", \"Rita Ora\").\n.decl Answer()\nAnswer() :- Has_disease(\"Rita Ora\", disease), Is_harmless(disease, \"Rita Ora\").\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Rita Ora\", \"strep throat\").\nHas_disease(\"Rita Ora\", \"tonsilitis\").\n.decl Is_harmless(Disease:symbol, Person:symbol)\nIs_harmless(\"strep throat\", \"Rita Ora\").\n.decl Answer()\nAnswer() :- Has_disease(\"Rita Ora\", disease), Is_harmless(disease, \"Rita Ora\").\n.output Answer"]}
{"id": 1762, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"William Franklyn-Miller\", 16).\n.decl Is_older_than(Person:symbol, Age:float)\nIs_older_than(\"William Franklyn-Miller\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"William Franklyn-Miller\", age), Is_older_than(\"William Franklyn-Miller\", age).\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"William Franklyn-Miller\", 16).\n.decl Is_older_than(Person:symbol, Age:float)\nIs_older_than(\"William Franklyn-Miller\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"William Franklyn-Miller\", age), Is_older_than(\"William Franklyn-Miller\", age).\n.output Answer"]}
{"id": 1763, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Powepuff Girls\", \"pink\").\nHas_color(\"Powepuff Girls\", \"blue\").\nHas_color(\"Powepuff Girls\", \"green\").\nHas_color(\"background\", \"blue\").\nHas_color(\"background\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"Powepuff Girls\", color1), Has_color(\"background\", color2), color1 = color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Powepuff Girls\", \"pink\").\nHas_color(\"Powepuff Girls\", \"blue\").\nHas_color(\"Powepuff Girls\", \"green\").\nHas_color(\"background\", \"blue\").\nHas_color(\"background\", \"red\").\n.decl Answer()\nAnswer() :- Has_color(\"Powepuff Girls\", color1), Has_color(\"background\", color2), color1 = color2.\n.output Answer"]}
{"id": 1764, "answer": true, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Los Angeles Memorial Sports Arena\", 17000).\nHas_capacity(\"Coachella\", 75000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Los Angeles Memorial Sports Arena\", capacity1), Has_capacity(\"Coachella\", capacity2), capacity1 < capacity2.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Los Angeles Memorial Sports Arena\", 17000).\nHas_capacity(\"Coachella\", 75000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Los Angeles Memorial Sports Arena\", capacity1), Has_capacity(\"Coachella\", capacity2), capacity1 < capacity2.\n.output Answer"]}
{"id": 1765, "answer": true, "completion": ".decl Graduates(Person:symbol, School:symbol)\nGraduates(\"Moon Jae-in\", \"Seoul National University\").\n.decl Is_teenager(Person:symbol, Age:float)\nIs_teenager(\"Moon Jae-in\", 17).\n.decl Answer()\nAnswer() :- Graduates(\"Moon Jae-in\", \"Abitur\"), Is_teenager(\"Moon Jae-in\", age).\n.output Answer", "completions": [".decl Graduates(Person:symbol, School:symbol)\nGraduates(\"Moon Jae-in\", \"Seoul National University\").\n.decl Is_teenager(Person:symbol, Age:float)\nIs_teenager(\"Moon Jae-in\", 17).\n.decl Answer()\nAnswer() :- Graduates(\"Moon Jae-in\", \"Abitur\"), Is_teenager(\"Moon Jae-in\", age).\n.output Answer"]}
{"id": 1766, "answer": true, "completion": ".decl Popular_in_state(Sport:symbol, State:symbol)\nPopular_in_state(\"football\", \"Texas\").\nPopular_in_state(\"baseball\", \"Texas\").\n.decl Answer()\nAnswer() :- Popular_in_state(sport, \"Texas\"), !, sport != \"Bandy\".\n.output Answer", "completions": [".decl Popular_in_state(Sport:symbol, State:symbol)\nPopular_in_state(\"football\", \"Texas\").\nPopular_in_state(\"baseball\", \"Texas\").\n.decl Answer()\nAnswer() :- Popular_in_state(sport, \"Texas\"), !, sport != \"Bandy\".\n.output Answer"]}
{"id": 1767, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Curiosity\", 900).\nHas_mass(\"Lacus Temporis\", 1e+15).\n.decl Answer()\nAnswer() :- Has_mass(\"Curiosity\", mass1), Has_mass(\"Lacus Temporis\", mass2), mass1 < mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Curiosity\", 900).\nHas_mass(\"Lacus Temporis\", 1e+15).\n.decl Answer()\nAnswer() :- Has_mass(\"Curiosity\", mass1), Has_mass(\"Lacus Temporis\", mass2), mass1 < mass2.\n.output Answer"]}
{"id": 1768, "answer": false, "completion": ".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"pancreas removal\", \"bankruptcy\").\n.decl Answer()\nAnswer() :- Causes(\"pancreas removal\", \"bankruptcy\").\n.output Answer\n\n\n", "completions": [".decl Causes(Event_A:symbol, Event_B:symbol)\nCauses(\"pancreas removal\", \"bankruptcy\").\n.decl Answer()\nAnswer() :- Causes(\"pancreas removal\", \"bankruptcy\").\n.output Answer\n\n\n"]}
{"id": 1769, "answer": false, "completion": ".decl Helps(Treatment:symbol, Condition:symbol)\nHelps(\"sunscreen\", \"sunburn\").\n.decl Causes(Condition:symbol, Death:symbol)\nCauses(\"cancer\", \"Bob Marley\").\n.decl Answer()\nAnswer() :- Helps(\"sunscreen\", condition), Causes(condition, \"Bob Marley\"), !.\n.output Answer", "completions": [".decl Helps(Treatment:symbol, Condition:symbol)\nHelps(\"sunscreen\", \"sunburn\").\n.decl Causes(Condition:symbol, Death:symbol)\nCauses(\"cancer\", \"Bob Marley\").\n.decl Answer()\nAnswer() :- Helps(\"sunscreen\", condition), Causes(condition, \"Bob Marley\"), !.\n.output Answer"]}
{"id": 1770, "answer": true, "completion": ".decl Has_blood_status(Person:symbol, Blood_status:symbol)\nHas_blood_status(\"Lord Voldemort\", \"pure-blood\").\n.decl Barred_from_Hogwarts(Person:symbol)\nBarred_from_Hogwarts(\"Muggle-born\").\nBarred_from_Hogwarts(\"half-blood\").\n.decl Answer()\nAnswer() :- Has_blood_status(\"Lord Voldemort\", \"pure-blood\").\nAnswer() :- Has_blood_status(\"Lord Voldemort\", \"Muggle-born\").\nAnswer() :- Has_blood_status(\"Lord Voldemort\", \"half-blood\").\n.output Answer", "completions": [".decl Has_blood_status(Person:symbol, Blood_status:symbol)\nHas_blood_status(\"Lord Voldemort\", \"pure-blood\").\n.decl Barred_from_Hogwarts(Person:symbol)\nBarred_from_Hogwarts(\"Muggle-born\").\nBarred_from_Hogwarts(\"half-blood\").\n.decl Answer()\nAnswer() :- Has_blood_status(\"Lord Voldemort\", \"pure-blood\").\nAnswer() :- Has_blood_status(\"Lord Voldemort\", \"Muggle-born\").\nAnswer() :- Has_blood_status(\"Lord Voldemort\", \"half-blood\").\n.output Answer"]}
{"id": 1771, "answer": false, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"moon cakes\", \"China\").\nHappens_in_place(\"moon cakes\", \"Hong Kong\").\nHappens_in_place(\"moon cakes\", \"Taiwan\").\nHappens_in_place(\"moon cakes\", \"Manhattan\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"moon cakes\", \"Manhattan\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"moon cakes\", \"China\").\nHappens_in_place(\"moon cakes\", \"Hong Kong\").\nHappens_in_place(\"moon cakes\", \"Taiwan\").\nHappens_in_place(\"moon cakes\", \"Manhattan\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"moon cakes\", \"Manhattan\").\n.output Answer"]}
{"id": 1772, "answer": false, "completion": ".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Enrique Peña Nieto\", \"Mexico\").\n.decl Is_resident_of(Person:symbol, State:symbol)\nIs_resident_of(\"Enrique Peña Nieto\", \"Mexico\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Enrique Peña Nieto\", \"Mexico\"), Is_resident_of(\"Enrique Peña Nieto\", \"New Mexico\").\n.output Answer", "completions": [".decl Is_citizen_of(Person:symbol, Country:symbol)\nIs_citizen_of(\"Enrique Peña Nieto\", \"Mexico\").\n.decl Is_resident_of(Person:symbol, State:symbol)\nIs_resident_of(\"Enrique Peña Nieto\", \"Mexico\").\n.decl Answer()\nAnswer() :- Is_citizen_of(\"Enrique Peña Nieto\", \"Mexico\"), Is_resident_of(\"Enrique Peña Nieto\", \"New Mexico\").\n.output Answer"]}
{"id": 1773, "answer": true, "completion": ".decl Is_painting(Object:symbol)\nIs_painting(\"The Starry Night\").\nIs_painting(\"The Potato Eaters\").\nIs_painting(\"The Sower\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mul", "completions": [".decl Is_painting(Object:symbol)\nIs_painting(\"The Starry Night\").\nIs_painting(\"The Potato Eaters\").\nIs_painting(\"The Sower\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mulberry Tree\").\nIs_painting(\"The Mul"]}
{"id": 1774, "answer": false, "completion": ".decl Is_near(Place1:symbol, Place2:symbol)\nIs_near(\"Cornwall\", \"Ontario\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"John George Bice's birthplace\", \"Ontario\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"John George Bice's birthplace\", place1), Is_near(\"Cornwall\", place1).\n.output Answer", "completions": [".decl Is_near(Place1:symbol, Place2:symbol)\nIs_near(\"Cornwall\", \"Ontario\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"John George Bice's birthplace\", \"Ontario\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"John George Bice's birthplace\", place1), Is_near(\"Cornwall\", place1).\n.output Answer"]}
{"id": 1775, "answer": false, "completion": ".decl Is_registered_to_vote(Person:symbol, Party:symbol)\nIs_registered_to_vote(\"Elijah Cummings\", \"Democratic Party\").\n.decl Supports(Person:symbol, Candidate:symbol)\nSupports(\"Elijah Cummings\", \"Joe Biden\").\n.decl Answer()\nAnswer() :- Is_registered_to_vote(\"Elijah Cummings\", \"Democratic Party\"), Supports(\"Elijah Cummings\", \"Joe Biden\").\n.output Answer", "completions": [".decl Is_registered_to_vote(Person:symbol, Party:symbol)\nIs_registered_to_vote(\"Elijah Cummings\", \"Democratic Party\").\n.decl Supports(Person:symbol, Candidate:symbol)\nSupports(\"Elijah Cummings\", \"Joe Biden\").\n.decl Answer()\nAnswer() :- Is_registered_to_vote(\"Elijah Cummings\", \"Democratic Party\"), Supports(\"Elijah Cummings\", \"Joe Biden\").\n.output Answer"]}
{"id": 1776, "answer": true, "completion": ".decl Has_effect(Spell:symbol, Effect:symbol)\nHas_effect(\"Final Fantasy silence\", \"silence\").\n.decl Has_weakness(Character:symbol, Weakness:symbol)\nHas_weakness(\"Lord Voldemort\", \"silence\").\n.decl Answer()\nAnswer() :- Has_effect(\"Final Fantasy silence\", effect), Has_weakness(\"Lord Voldemort\", weakness), effect = weakness.\n.output Answer", "completions": [".decl Has_effect(Spell:symbol, Effect:symbol)\nHas_effect(\"Final Fantasy silence\", \"silence\").\n.decl Has_weakness(Character:symbol, Weakness:symbol)\nHas_weakness(\"Lord Voldemort\", \"silence\").\n.decl Answer()\nAnswer() :- Has_effect(\"Final Fantasy silence\", effect), Has_weakness(\"Lord Voldemort\", weakness), effect = weakness.\n.output Answer"]}
{"id": 1777, "answer": true, "completion": ".decl Costs_less_than(Object:symbol, Price:float)\nCosts_less_than(\"chlorine\", 10).\n.decl Answer()\nAnswer() :- Costs_less_than(\"chlorine\", price).\n.output Answer", "completions": [".decl Costs_less_than(Object:symbol, Price:float)\nCosts_less_than(\"chlorine\", 10).\n.decl Answer()\nAnswer() :- Costs_less_than(\"chlorine\", price).\n.output Answer"]}
{"id": 1778, "answer": true, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"hanging\", \"ship\").\nHappens_in_location(\"hanging\", \"land\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"hanging\", \"ship\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"hanging\", \"ship\").\nHappens_in_location(\"hanging\", \"land\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"hanging\", \"ship\").\n.output Answer"]}
{"id": 1779, "answer": true, "completion": ".decl Has_princess(Movie:symbol, Princess:symbol)\nHas_princess(\"Frozen\", \"Anna\").\nHas_princess(\"Frozen\", \"Elsa\").\nHas_princess(\"The Little Mermaid\", \"Ariel\").\nHas_princess(\"The Little Mermaid\", \"Ursula\").\n.decl Answer()\nAnswer() :- Has_princess(movie, \"Anna\"), Has_princess(movie, \"Elsa\").\n.output Answer", "completions": [".decl Has_princess(Movie:symbol, Princess:symbol)\nHas_princess(\"Frozen\", \"Anna\").\nHas_princess(\"Frozen\", \"Elsa\").\nHas_princess(\"The Little Mermaid\", \"Ariel\").\nHas_princess(\"The Little Mermaid\", \"Ursula\").\n.decl Answer()\nAnswer() :- Has_princess(movie, \"Anna\"), Has_princess(movie, \"Elsa\").\n.output Answer"]}
{"id": 1780, "answer": true, "completion": ".decl Is_safe_to_eat(Object:symbol)\nIs_safe_to_eat(\"hair\").\n.decl Answer()\nAnswer() :- Is_safe_to_eat(\"hair\").\n.output Answer", "completions": [".decl Is_safe_to_eat(Object:symbol)\nIs_safe_to_eat(\"hair\").\n.decl Answer()\nAnswer() :- Is_safe_to_eat(\"hair\").\n.output Answer"]}
{"id": 1781, "answer": false, "completion": ".decl Is_used_in(Currency:symbol, Country:symbol)\nIs_used_in(\"penny\", \"Canada\").\nIs_used_in(\"penny\", \"United States\").\n.decl Answer()\nAnswer() :- Is_used_in(\"penny\", \"Canada\").\n.output Answer\n\n\n", "completions": [".decl Is_used_in(Currency:symbol, Country:symbol)\nIs_used_in(\"penny\", \"Canada\").\nIs_used_in(\"penny\", \"United States\").\n.decl Answer()\nAnswer() :- Is_used_in(\"penny\", \"Canada\").\n.output Answer\n\n\n"]}
{"id": 1782, "answer": true, "completion": ".decl Has_length(Word:symbol, Length:float)\nHas_length(\"monster\", 7).\nHas_length(\"witches\", 7).\nHas_length(\"villages\", 8).\nHas_length(\"Scrabble\", 8).\nHas_length(\"record\", 6).\n.decl Answer()\nAnswer() :- Has_length(\"monster\", length1), Has_length(\"witches\", length2), Has_length(\"villages\", length3), Has_length(\"Scrabble\", length4), Has_length(\"record\", length5), length1 = length2, length3 = length4, length5 < length1.\n.output Answer", "completions": [".decl Has_length(Word:symbol, Length:float)\nHas_length(\"monster\", 7).\nHas_length(\"witches\", 7).\nHas_length(\"villages\", 8).\nHas_length(\"Scrabble\", 8).\nHas_length(\"record\", 6).\n.decl Answer()\nAnswer() :- Has_length(\"monster\", length1), Has_length(\"witches\", length2), Has_length(\"villages\", length3), Has_length(\"Scrabble\", length4), Has_length(\"record\", length5), length1 = length2, length3 = length4, length5 < length1.\n.output Answer"]}
{"id": 1783, "answer": false, "completion": ".decl Has_n_words(Plant:symbol, N_words:float)\nHas_n_words(\"Rosemary\", 2).\n.decl Has_n_words(Plant:symbol, N_words:float)\nHas_n_words(\"Lily of the Valley\", 3).\n.decl Answer()\nAnswer() :- Has_n_words(\"Rosemary\", n_words1), Has_n_words(\"Lily of the Valley\", n_words2), n_words1 < n_words2.\n.output Answer", "completions": [".decl Has_n_words(Plant:symbol, N_words:float)\nHas_n_words(\"Rosemary\", 2).\n.decl Has_n_words(Plant:symbol, N_words:float)\nHas_n_words(\"Lily of the Valley\", 3).\n.decl Answer()\nAnswer() :- Has_n_words(\"Rosemary\", n_words1), Has_n_words(\"Lily of the Valley\", n_words2), n_words1 < n_words2.\n.output Answer"]}
{"id": 1784, "answer": false, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"person\", \"St. Vitus's Dance\").\n.decl Answer()\nAnswer() :- Has_disease(\"person\", \"St. Vitus's Dance\"), !.\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"person\", \"St. Vitus's Dance\").\n.decl Answer()\nAnswer() :- Has_disease(\"person\", \"St. Vitus's Dance\"), !.\n.output Answer"]}
{"id": 1785, "answer": true, "completion": ".decl Is_part_of(Object:symbol, Object_part:symbol)\nIs_part_of(\"Phobos\", \"Mars\").\nIs_part_of(\"Mars\", \"Solar System\").\nIs_part_of(\"Solar System\", \"Milky Way\").\nIs_part_of(\"Milky Way\", \"Local Group\").\nIs_part_of(\"Local Group\", \"Andromeda\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Phobos\", \"Andromeda\").\nAnswer() :- Is_part_of(\"Phobos\", object1), Is_part_of(object1, \"Andromeda\").\nAnswer() :- Is_part_of(\"Phobos\", object1), Is_part_of(object1, object2), Is_part_of(object2, \"Andromeda\").\nAnswer() :- Is_part_of(\"Phobos\", object1), Is_part_of(object1, object2), Is_part_of(object2, object3), Is_part_of(object3, \"Andromeda\").\nAnswer() :- Is_part_of(\"Phobos\", object1), Is_part_of(object1, object2), Is_part_of(object2, object3), Is_part_of(object3, object4), Is_part_of(object4, \"Andromeda\").\n.output Answer", "completions": [".decl Is_part_of(Object:symbol, Object_part:symbol)\nIs_part_of(\"Phobos\", \"Mars\").\nIs_part_of(\"Mars\", \"Solar System\").\nIs_part_of(\"Solar System\", \"Milky Way\").\nIs_part_of(\"Milky Way\", \"Local Group\").\nIs_part_of(\"Local Group\", \"Andromeda\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Phobos\", \"Andromeda\").\nAnswer() :- Is_part_of(\"Phobos\", object1), Is_part_of(object1, \"Andromeda\").\nAnswer() :- Is_part_of(\"Phobos\", object1), Is_part_of(object1, object2), Is_part_of(object2, \"Andromeda\").\nAnswer() :- Is_part_of(\"Phobos\", object1), Is_part_of(object1, object2), Is_part_of(object2, object3), Is_part_of(object3, \"Andromeda\").\nAnswer() :- Is_part_of(\"Phobos\", object1), Is_part_of(object1, object2), Is_part_of(object2, object3), Is_part_of(object3, object4), Is_part_of(object4, \"Andromeda\").\n.output Answer"]}
{"id": 1786, "answer": true, "completion": ".decl Equivalent_to(God1:symbol, God2:symbol)\nEquivalent_to(\"Hermes\", \"Mercury\").\nEquivalent_to(\"Mercury\", \"Vulcan\").\n.decl Answer()\nAnswer() :- Equivalent_to(\"Hermes\", \"Vulcan\").\n.output Answer", "completions": [".decl Equivalent_to(God1:symbol, God2:symbol)\nEquivalent_to(\"Hermes\", \"Mercury\").\nEquivalent_to(\"Mercury\", \"Vulcan\").\n.decl Answer()\nAnswer() :- Equivalent_to(\"Hermes\", \"Vulcan\").\n.output Answer"]}
{"id": 1787, "answer": false, "completion": ".decl Is_a(Animal:symbol, Species:symbol)\nIs_a(\"ocelot\", \"mammal\").\nIs_a(\"ocelot\", \"cat\").\nIs_a(\"ocelot\", \"predator\").\n.decl Answer()\nAnswer() :- Is_a(\"ocelot\", \"mammal\"), Is_a(\"ocelot\", \"cat\"), Is_a(\"ocelot\", \"predator\").\n.output Answer", "completions": [".decl Is_a(Animal:symbol, Species:symbol)\nIs_a(\"ocelot\", \"mammal\").\nIs_a(\"ocelot\", \"cat\").\nIs_a(\"ocelot\", \"predator\").\n.decl Answer()\nAnswer() :- Is_a(\"ocelot\", \"mammal\"), Is_a(\"ocelot\", \"cat\"), Is_a(\"ocelot\", \"predator\").\n.output Answer"]}
{"id": 1788, "answer": true, "completion": ".decl Is_part_of(State:symbol, Army:symbol)\nIs_part_of(\"Alaska\", \"Northern Army\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Alaska\", \"Northern Army\").\n.output Answer", "completions": [".decl Is_part_of(State:symbol, Army:symbol)\nIs_part_of(\"Alaska\", \"Northern Army\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Alaska\", \"Northern Army\").\n.output Answer"]}
{"id": 1789, "answer": true, "completion": ".decl Has_favorite_holiday(Person:symbol, Holiday:symbol)\nHas_favorite_holiday(\"Bacchus\", \"New Year's Eve\").\n.decl Answer()\nAnswer() :- Has_favorite_holiday(\"Bacchus\", \"New Year's Eve\").\n.output Answer", "completions": [".decl Has_favorite_holiday(Person:symbol, Holiday:symbol)\nHas_favorite_holiday(\"Bacchus\", \"New Year's Eve\").\n.decl Answer()\nAnswer() :- Has_favorite_holiday(\"Bacchus\", \"New Year's Eve\").\n.output Answer"]}
{"id": 1790, "answer": true, "completion": ".decl Has_parents(God:symbol, Parent1:symbol, Parent2:symbol)\nHas_parents(\"Poseidon\", \"Cronus\", \"Rhea\").\nHas_parents(\"Vulcan\", \"Jupiter\", \"Juno\").\n.decl Answer()\nAnswer() :- Has_parents(\"Poseidon\", parent1, parent2), Has_parents(\"Vulcan\", parent3, parent4), parent1 = parent3, parent2 = parent4.\n.output Answer", "completions": [".decl Has_parents(God:symbol, Parent1:symbol, Parent2:symbol)\nHas_parents(\"Poseidon\", \"Cronus\", \"Rhea\").\nHas_parents(\"Vulcan\", \"Jupiter\", \"Juno\").\n.decl Answer()\nAnswer() :- Has_parents(\"Poseidon\", parent1, parent2), Has_parents(\"Vulcan\", parent3, parent4), parent1 = parent3, parent2 = parent4.\n.output Answer"]}
{"id": 1791, "answer": true, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Washington\").\nHappens_in_location(\"Oregon Trail\", \"Idaho\").\nHappens_in_location(\"Oregon Trail\", \"Montana\").\nHappens_in_location(\"Oregon Trail\", \"Wyoming\").\nHappens_in_location(\"Oregon Trail\", \"Utah\").\nHappens_in_location(\"Oregon Trail\", \"Nevada\").\nHappens_in_location(\"Oregon Trail\", \"California\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Washington\").\nHappens_in_location(\"Oregon Trail\", \"Idaho\").\nHappens_in_location(\"Oregon Trail\", \"Montana\").\nHappens_in_location(\"Oregon Trail\", \"Wyoming\").\nHappens_in_location(\"Oregon Trail\", \"Utah\").\nHappens_in_location(\"Oregon Trail\", \"Nevada\").\nHappens_in_location(\"Oregon Trail\", \"California\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail\", \"Oregon\").\nHappens_in_location(\"Oregon Trail"]}
{"id": 1792, "answer": true, "completion": ".decl Cures(Medicine:symbol, Disease:symbol)\nCures(\"morphine\", \"pain\").\n.decl Answer()\nAnswer() :- Cures(\"morphine\", \"HIV\").\n.output Answer", "completions": [".decl Cures(Medicine:symbol, Disease:symbol)\nCures(\"morphine\", \"pain\").\n.decl Answer()\nAnswer() :- Cures(\"morphine\", \"HIV\").\n.output Answer"]}
{"id": 1793, "answer": true, "completion": ".decl Directed(Movie:symbol, Director:symbol)\nDirected(\"The Matrix\", \"The Wachowskis\").\n.decl Advocate_for(Person:symbol, Cause:symbol)\nAdvocate_for(\"The Wachowskis\", \"transgender rights\").\n.decl Answer()\nAnswer() :- Directed(movie, \"The Wachowskis\"), Advocate_for(\"The Wachowskis\", \"transgender rights\").\n.output Answer", "completions": [".decl Directed(Movie:symbol, Director:symbol)\nDirected(\"The Matrix\", \"The Wachowskis\").\n.decl Advocate_for(Person:symbol, Cause:symbol)\nAdvocate_for(\"The Wachowskis\", \"transgender rights\").\n.decl Answer()\nAnswer() :- Directed(movie, \"The Wachowskis\"), Advocate_for(\"The Wachowskis\", \"transgender rights\").\n.output Answer"]}
{"id": 1794, "answer": true, "completion": ".decl Has_menu(Restaurant:symbol, Menu:symbol)\nHas_menu(\"Chinese Starbucks\", \"Chinese\").\nHas_menu(\"Chinese Starbucks\", \"American\").\nHas_menu(\"American Starbucks\", \"American\").\n.decl Answer()\nAnswer() :- Has_menu(\"Chinese Starbucks\", \"American\").\n.output Answer", "completions": [".decl Has_menu(Restaurant:symbol, Menu:symbol)\nHas_menu(\"Chinese Starbucks\", \"Chinese\").\nHas_menu(\"Chinese Starbucks\", \"American\").\nHas_menu(\"American Starbucks\", \"American\").\n.decl Answer()\nAnswer() :- Has_menu(\"Chinese Starbucks\", \"American\").\n.output Answer"]}
{"id": 1795, "answer": false, "completion": ".decl Uses(Person:symbol, Object:symbol)\nUses(\"Mario\", \"mushroom\").\n.decl Answer()\nAnswer() :- Uses(\"Mario\", \"mushroom\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Object:symbol)\nUses(\"Mario\", \"mushroom\").\n.decl Answer()\nAnswer() :- Uses(\"Mario\", \"mushroom\").\n.output Answer"]}
{"id": 1796, "answer": true, "completion": ".decl Is_age(Person:symbol, Age:float)\nIs_age(\"child\", 10).\n.decl Is_rank(Person:symbol, Rank:symbol)\nIs_rank(\"lieutenant\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Is_age(\"child\", age), Is_rank(\"lieutenant\", rank), age >= 18.\n.output Answer", "completions": [".decl Is_age(Person:symbol, Age:float)\nIs_age(\"child\", 10).\n.decl Is_rank(Person:symbol, Rank:symbol)\nIs_rank(\"lieutenant\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Is_age(\"child\", age), Is_rank(\"lieutenant\", rank), age >= 18.\n.output Answer"]}
{"id": 1797, "answer": true, "completion": ".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"QWERTY keyboard layout\", 1868).\n.decl Answer()\nAnswer() :- Invented_in_year(\"QWERTY keyboard layout\", year), year < 1873.\n.output Answer", "completions": [".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"QWERTY keyboard layout\", 1868).\n.decl Answer()\nAnswer() :- Invented_in_year(\"QWERTY keyboard layout\", year), year < 1873.\n.output Answer"]}
{"id": 1798, "answer": true, "completion": ".decl Has_party(Person:symbol, Party:symbol)\nHas_party(\"Nancy Pelosi\", \"Democratic Party\").\nHas_party(\"Gerald Ford\", \"Republican Party\").\n.decl Answer()\nAnswer() :- Has_party(\"Nancy Pelosi\", \"Democratic Party\"), Has_party(\"Gerald Ford\", \"Republican Party\").\n.output Answer", "completions": [".decl Has_party(Person:symbol, Party:symbol)\nHas_party(\"Nancy Pelosi\", \"Democratic Party\").\nHas_party(\"Gerald Ford\", \"Republican Party\").\n.decl Answer()\nAnswer() :- Has_party(\"Nancy Pelosi\", \"Democratic Party\"), Has_party(\"Gerald Ford\", \"Republican Party\").\n.output Answer"]}
{"id": 1799, "answer": true, "completion": ".decl Prevents_growth(Plant_A:symbol, Plant_B:symbol)\nPrevents_growth(\"sweet potato\", \"corn\").\nPrevents_growth(\"sweet potato\", \"tomato\").\n.decl Answer()\nAnswer() :- Prevents_growth(\"sweet potato\", plant).\n.output Answer", "completions": [".decl Prevents_growth(Plant_A:symbol, Plant_B:symbol)\nPrevents_growth(\"sweet potato\", \"corn\").\nPrevents_growth(\"sweet potato\", \"tomato\").\n.decl Answer()\nAnswer() :- Prevents_growth(\"sweet potato\", plant).\n.output Answer"]}
{"id": 1800, "answer": true, "completion": ".decl Has_spinal_cord(Animal:symbol)\nHas_spinal_cord(\"hedgehog\").\nHas_spinal_cord(\"hamster\").\nHas_spinal_cord(\"bird\").\nHas_spinal_cord(\"snake\").\n.decl Answer()\nAnswer() :- Has_spinal_cord(\"hedgehog\"), Has_spinal_cord(animal).\n.output Answer", "completions": [".decl Has_spinal_cord(Animal:symbol)\nHas_spinal_cord(\"hedgehog\").\nHas_spinal_cord(\"hamster\").\nHas_spinal_cord(\"bird\").\nHas_spinal_cord(\"snake\").\n.decl Answer()\nAnswer() :- Has_spinal_cord(\"hedgehog\"), Has_spinal_cord(animal).\n.output Answer"]}
{"id": 1801, "answer": true, "completion": ".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"paresthesia\", \"white pigment\").\n.decl Answer()\nAnswer() :- Causes(\"paresthesia\", \"white pigment\").\n.output Answer", "completions": [".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"paresthesia\", \"white pigment\").\n.decl Answer()\nAnswer() :- Causes(\"paresthesia\", \"white pigment\").\n.output Answer"]}
{"id": 1802, "answer": true, "completion": ".decl Is_ancestor_of(Person1:symbol, Person2:symbol)\nIs_ancestor_of(\"Mary, Queen of Scots\", \"Charles I\").\nIs_ancestor_of(\"Charles I\", \"Charles II\").\nIs_ancestor_of(\"Charles II\", \"James II\").\nIs_ancestor_of(\"James II\", \"Anne\").\nIs_ancestor_of(\"Anne\", \"George I\").\nIs_ancestor_of(\"George I\", \"George II\").\nIs_ancestor_of(\"George II\", \"George III\").\nIs_ancestor_of(\"George III\", \"Victoria\").\nIs_ancestor_of(\"Victoria\", \"Edward VII\").\nIs_ancestor_of(\"Edward VII\", \"George V\").\nIs_ancestor_of(\"George V\", \"George VI\").\nIs_ancestor_of(\"George VI\", \"Elizabeth II\").\nIs_ancestor_of(\"Elizabeth II\", \"Charles, Prince of Wales\").\nIs_ancestor_of(\"Charles, Prince of Wales\", \"Prince William, Duke of Cambridge\").\nIs_ancestor_of(\"Prince William, Duke of Cambridge\", \"Prince George of Cambridge\").\nIs_ancestor_of(\"Prince William, Duke of Cambridge\", \"Prince Louis of Cambridge\").\nIs_ancestor_of(\"Charles, Prince of Wales\", \"Prince Harry, Duke of Sussex\").\n.decl Is_descendant_of(Person1:symbol, Person2:symbol)\nIs_descendant_of(Person1, Person2) :- Is_ancestor_of(Person2, Person1).\n.decl Is_part_French(Person:symbol)\nIs_part_French(\"Charles I\").\nIs_part_French(\"Charles II\").\nIs_part_French(\"James II\").\nIs_part_French(\"Anne\").\nIs_part_French(\"George I\").\nIs_part_French(\"George II\").\nIs_part_French(\"George III\").\nIs_part_French(\"Victoria\").\nIs_part_French(\"Edward VII\").\nIs_part_French(\"George V\").\nIs_part_French(\"George VI\").\nIs_part_French(\"Elizabeth II\").\nIs_part_French(\"Charles, Prince of Wales\").\nIs_part_French(\"Prince William, Duke of Cambridge\").\nIs_part_French(\"Prince George of Cambridge\").\nIs_part_French(\"Prince Louis of Cambridge\").\nIs_part_French(\"Prince Harry, Duke of Sussex\").\n.decl Answer()\nAnswer() :- Is_descendant_of(\"Prince Harry, Duke of Sussex\", person), Is_part_French(person).\n.output Answer", "completions": [".decl Is_ancestor_of(Person1:symbol, Person2:symbol)\nIs_ancestor_of(\"Mary, Queen of Scots\", \"Charles I\").\nIs_ancestor_of(\"Charles I\", \"Charles II\").\nIs_ancestor_of(\"Charles II\", \"James II\").\nIs_ancestor_of(\"James II\", \"Anne\").\nIs_ancestor_of(\"Anne\", \"George I\").\nIs_ancestor_of(\"George I\", \"George II\").\nIs_ancestor_of(\"George II\", \"George III\").\nIs_ancestor_of(\"George III\", \"Victoria\").\nIs_ancestor_of(\"Victoria\", \"Edward VII\").\nIs_ancestor_of(\"Edward VII\", \"George V\").\nIs_ancestor_of(\"George V\", \"George VI\").\nIs_ancestor_of(\"George VI\", \"Elizabeth II\").\nIs_ancestor_of(\"Elizabeth II\", \"Charles, Prince of Wales\").\nIs_ancestor_of(\"Charles, Prince of Wales\", \"Prince William, Duke of Cambridge\").\nIs_ancestor_of(\"Prince William, Duke of Cambridge\", \"Prince George of Cambridge\").\nIs_ancestor_of(\"Prince William, Duke of Cambridge\", \"Prince Louis of Cambridge\").\nIs_ancestor_of(\"Charles, Prince of Wales\", \"Prince Harry, Duke of Sussex\").\n.decl Is_descendant_of(Person1:symbol, Person2:symbol)\nIs_descendant_of(Person1, Person2) :- Is_ancestor_of(Person2, Person1).\n.decl Is_part_French(Person:symbol)\nIs_part_French(\"Charles I\").\nIs_part_French(\"Charles II\").\nIs_part_French(\"James II\").\nIs_part_French(\"Anne\").\nIs_part_French(\"George I\").\nIs_part_French(\"George II\").\nIs_part_French(\"George III\").\nIs_part_French(\"Victoria\").\nIs_part_French(\"Edward VII\").\nIs_part_French(\"George V\").\nIs_part_French(\"George VI\").\nIs_part_French(\"Elizabeth II\").\nIs_part_French(\"Charles, Prince of Wales\").\nIs_part_French(\"Prince William, Duke of Cambridge\").\nIs_part_French(\"Prince George of Cambridge\").\nIs_part_French(\"Prince Louis of Cambridge\").\nIs_part_French(\"Prince Harry, Duke of Sussex\").\n.decl Answer()\nAnswer() :- Is_descendant_of(\"Prince Harry, Duke of Sussex\", person), Is_part_French(person).\n.output Answer"]}
{"id": 1803, "answer": true, "completion": ".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"Boris Johnson\", \"London\").\nLives_in(\"Boris Johnson\", \"New York\").\nLives_in(\"Boris Johnson\", \"San Antonio\").\n.decl Answer()\nAnswer() :- Lives_in(\"Boris Johnson\", \"San Antonio\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"Boris Johnson\", \"London\").\nLives_in(\"Boris Johnson\", \"New York\").\nLives_in(\"Boris Johnson\", \"San Antonio\").\n.decl Answer()\nAnswer() :- Lives_in(\"Boris Johnson\", \"San Antonio\").\n.output Answer"]}
{"id": 1804, "answer": true, "completion": ".decl Uses_hand(Person:symbol, Hand:symbol)\nUses_hand(\"left-handed person\", \"left hand\").\nUses_hand(\"right-handed person\", \"right hand\").\nUses_hand(\"left-handed person\", \"right hand\").\nUses_hand(\"right-handed person\", \"left hand\").\n.decl Answer()\nAnswer() :- Uses_hand(\"left-handed person\", \"left hand\").\nAnswer() :- Uses_hand(\"right-handed person\", \"right hand\").\n.output Answer", "completions": [".decl Uses_hand(Person:symbol, Hand:symbol)\nUses_hand(\"left-handed person\", \"left hand\").\nUses_hand(\"right-handed person\", \"right hand\").\nUses_hand(\"left-handed person\", \"right hand\").\nUses_hand(\"right-handed person\", \"left hand\").\n.decl Answer()\nAnswer() :- Uses_hand(\"left-handed person\", \"left hand\").\nAnswer() :- Uses_hand(\"right-handed person\", \"right hand\").\n.output Answer"]}
{"id": 1805, "answer": false, "completion": ".decl Spoke_language(Country:symbol, Language:symbol)\nSpoke_language(\"United States\", \"English\").\nSpoke_language(\"United States\", \"Spanish\").\nSpoke_language(\"United States\", \"French\").\nSpoke_language(\"United States\", \"German\").\nSpoke_language(\"United States\", \"Italian\").\nSpoke_language(\"United States\", \"Mandarin\").\nSpoke_language(\"United States\", \"Japanese\").\nSpoke_language(\"United States\", \"Russian\").\nSpoke_language(\"United States\", \"Portuguese\").\nSpoke_language(\"United States\", \"Arabic\").\nSpoke_language(\"United States\", \"Korean\").\nSpoke_language(\"United States\", \"Hindi\").\nSpoke_language(\"United States\", \"Urdu\").\nSpoke_language(\"United States\", \"Bengali\").\nSpoke_language(\"United States\", \"Vietnamese\").\nSpoke_language(\"United States\", \"Persian\").\nSpoke_language(\"United States\", \"Marathi\").\nSpoke_language(\"United States\", \"Telugu\").\nSpoke_language(\"United States\", \"Tamil\").\nSpoke_language(\"United States\", \"Gujarati\").\nSpoke_language(\"United States\", \"Malayalam\").\nSpoke_language(\"United States\", \"Assamese\").\nSpoke_language(\"United States\", \"Oriya\").\nSpoke_language(\"United States\", \"Kannada\").\nSpoke_language(\"United States\", \"Punjabi\").\nSpoke_language(\"United States\", \"Maithili\").\nSpoke_language(\"United States\", \"Urdu\").\nSpoke_language(\"United States\", \"Bhojpuri\").\nSpoke_language(\"United States\", \"Awadhi\").\nSpoke_language(\"United States\", \"Maithili\").\nSpoke_language(\"United States\", \"Marwari\").\nSpoke_language(\"United States\", \"Sindhi\").\nSpoke_language(\"United States\", \"Nepali\").\nSpoke_language(\"United States\", \"Haryanvi\").\nSpoke_language(\"United States\", \"Chhattisgarhi\").\nSpoke_language(\"United States\", \"Magadhi\").\nSpoke_language(\"United States\", \"Rajasthani\").\nSpoke_language(\"United States\", \"Himachali\").\nSpoke_language(\"United States\", \"Dogri\").\nSpoke_language(\"United States\", \"Kashmiri\").\nSpoke_language(\"United States\", \"Sanskrit\").\nSpoke_language(\"United States\", \"Bengali\").\nSpoke_language(\"United States\", \"Assamese\").\nSpoke_language(\"United States\", \"Manipuri\").\nSpoke_language(\"United States\", \"Sylheti\").\nSpoke_language(\"United States\", \"Maithili\").\nSpoke_language(\"United States\", \"Bhojpuri\").\nSpoke_language(\"United States\", \"Awadhi\").\nSpoke_language(\"United States\", \"Maithili\").\nSpoke_language(\"United States\", \"Marwari\").\nSpoke_language(\"United States\", \"Sindhi\").\nSpoke_language(\"United States\", \"Nepali\").\nSpoke_language(\"United States\", \"Haryanvi\").\nSpoke_language(\"United States\", \"Chhattisgarhi\").\nSpoke_language(\"United States\", \"Magadhi\").\nSpoke_language(\"United States\", \"Rajasthani\").\nSpoke_language(\"United", "completions": [".decl Spoke_language(Country:symbol, Language:symbol)\nSpoke_language(\"United States\", \"English\").\nSpoke_language(\"United States\", \"Spanish\").\nSpoke_language(\"United States\", \"French\").\nSpoke_language(\"United States\", \"German\").\nSpoke_language(\"United States\", \"Italian\").\nSpoke_language(\"United States\", \"Mandarin\").\nSpoke_language(\"United States\", \"Japanese\").\nSpoke_language(\"United States\", \"Russian\").\nSpoke_language(\"United States\", \"Portuguese\").\nSpoke_language(\"United States\", \"Arabic\").\nSpoke_language(\"United States\", \"Korean\").\nSpoke_language(\"United States\", \"Hindi\").\nSpoke_language(\"United States\", \"Urdu\").\nSpoke_language(\"United States\", \"Bengali\").\nSpoke_language(\"United States\", \"Vietnamese\").\nSpoke_language(\"United States\", \"Persian\").\nSpoke_language(\"United States\", \"Marathi\").\nSpoke_language(\"United States\", \"Telugu\").\nSpoke_language(\"United States\", \"Tamil\").\nSpoke_language(\"United States\", \"Gujarati\").\nSpoke_language(\"United States\", \"Malayalam\").\nSpoke_language(\"United States\", \"Assamese\").\nSpoke_language(\"United States\", \"Oriya\").\nSpoke_language(\"United States\", \"Kannada\").\nSpoke_language(\"United States\", \"Punjabi\").\nSpoke_language(\"United States\", \"Maithili\").\nSpoke_language(\"United States\", \"Urdu\").\nSpoke_language(\"United States\", \"Bhojpuri\").\nSpoke_language(\"United States\", \"Awadhi\").\nSpoke_language(\"United States\", \"Maithili\").\nSpoke_language(\"United States\", \"Marwari\").\nSpoke_language(\"United States\", \"Sindhi\").\nSpoke_language(\"United States\", \"Nepali\").\nSpoke_language(\"United States\", \"Haryanvi\").\nSpoke_language(\"United States\", \"Chhattisgarhi\").\nSpoke_language(\"United States\", \"Magadhi\").\nSpoke_language(\"United States\", \"Rajasthani\").\nSpoke_language(\"United States\", \"Himachali\").\nSpoke_language(\"United States\", \"Dogri\").\nSpoke_language(\"United States\", \"Kashmiri\").\nSpoke_language(\"United States\", \"Sanskrit\").\nSpoke_language(\"United States\", \"Bengali\").\nSpoke_language(\"United States\", \"Assamese\").\nSpoke_language(\"United States\", \"Manipuri\").\nSpoke_language(\"United States\", \"Sylheti\").\nSpoke_language(\"United States\", \"Maithili\").\nSpoke_language(\"United States\", \"Bhojpuri\").\nSpoke_language(\"United States\", \"Awadhi\").\nSpoke_language(\"United States\", \"Maithili\").\nSpoke_language(\"United States\", \"Marwari\").\nSpoke_language(\"United States\", \"Sindhi\").\nSpoke_language(\"United States\", \"Nepali\").\nSpoke_language(\"United States\", \"Haryanvi\").\nSpoke_language(\"United States\", \"Chhattisgarhi\").\nSpoke_language(\"United States\", \"Magadhi\").\nSpoke_language(\"United States\", \"Rajasthani\").\nSpoke_language(\"United"]}
{"id": 1806, "answer": true, "completion": ".decl Has_identity(Company:symbol, Identity:symbol)\nHas_identity(\"Fiat Chrysler\", \"Fiat Chrysler Automobiles\").\n.decl Answer()\nAnswer() :- Has_identity(\"Fiat Chrysler\", \"Fiat Chrysler Automobiles\").\n.output Answer", "completions": [".decl Has_identity(Company:symbol, Identity:symbol)\nHas_identity(\"Fiat Chrysler\", \"Fiat Chrysler Automobiles\").\n.decl Answer()\nAnswer() :- Has_identity(\"Fiat Chrysler\", \"Fiat Chrysler Automobiles\").\n.output Answer"]}
{"id": 1807, "answer": true, "completion": ".decl Is_associated_with(Thing:symbol, Activity:symbol)\nIs_associated_with(\"capsaicin\", \"cooking\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"capsaicin\", \"cooking\").\n.output Answer", "completions": [".decl Is_associated_with(Thing:symbol, Activity:symbol)\nIs_associated_with(\"capsaicin\", \"cooking\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"capsaicin\", \"cooking\").\n.output Answer"]}
{"id": 1808, "answer": false, "completion": ".decl Has_part(Symbol:symbol, Part:symbol)\nHas_part(\"Capricorn\", \"goat\").\nHas_part(\"Capricorn\", \"fish\").\nHas_part(\"chimera\", \"goat\").\nHas_part(\"chimera\", \"lion\").\nHas_part(\"chimera\", \"snake\").\n.decl Answer()\nAnswer() :- Has_part(\"Capricorn\", part1), Has_part(\"chimera\", part2), part1 = part2.\nAnswer() :- Has_part(\"Capricorn\", part1), Has_part(\"chimera\", part2), part1 != part2.\n.output Answer", "completions": [".decl Has_part(Symbol:symbol, Part:symbol)\nHas_part(\"Capricorn\", \"goat\").\nHas_part(\"Capricorn\", \"fish\").\nHas_part(\"chimera\", \"goat\").\nHas_part(\"chimera\", \"lion\").\nHas_part(\"chimera\", \"snake\").\n.decl Answer()\nAnswer() :- Has_part(\"Capricorn\", part1), Has_part(\"chimera\", part2), part1 = part2.\nAnswer() :- Has_part(\"Capricorn\", part1), Has_part(\"chimera\", part2), part1 != part2.\n.output Answer"]}
{"id": 1809, "answer": true, "completion": ".decl Is_noble_gas(Element:symbol)\nIs_noble_gas(\"helium\").\nIs_noble_gas(\"neon\").\nIs_noble_gas(\"argon\").\nIs_noble_gas(\"krypton\").\nIs_noble_gas(\"xenon\").\nIs_noble_gas(\"radon\").\n.decl Answer()\nAnswer() :- Is_noble_gas(element), element = \"helium\" ; element = \"neon\" ; element = \"argon\" ; element = \"krypton\" ; element = \"xenon\" ; element = \"radon\".\n.output Answer", "completions": [".decl Is_noble_gas(Element:symbol)\nIs_noble_gas(\"helium\").\nIs_noble_gas(\"neon\").\nIs_noble_gas(\"argon\").\nIs_noble_gas(\"krypton\").\nIs_noble_gas(\"xenon\").\nIs_noble_gas(\"radon\").\n.decl Answer()\nAnswer() :- Is_noble_gas(element), element = \"helium\" ; element = \"neon\" ; element = \"argon\" ; element = \"krypton\" ; element = \"xenon\" ; element = \"radon\".\n.output Answer"]}
{"id": 1810, "answer": false, "completion": ".decl Has_prison_time(Person:symbol, Prison_time:float)\nHas_prison_time(\"Michael Vick\", 23).\n.decl Has_prison_time(Person:symbol, Prison_time:float)\nHas_prison_time(\"person\", 5).\n.decl Answer()\nAnswer() :- Has_prison_time(\"Michael Vick\", prison_time1), Has_prison_time(\"person\", prison_time2), prison_time2 > prison_time1.\n.output Answer", "completions": [".decl Has_prison_time(Person:symbol, Prison_time:float)\nHas_prison_time(\"Michael Vick\", 23).\n.decl Has_prison_time(Person:symbol, Prison_time:float)\nHas_prison_time(\"person\", 5).\n.decl Answer()\nAnswer() :- Has_prison_time(\"Michael Vick\", prison_time1), Has_prison_time(\"person\", prison_time2), prison_time2 > prison_time1.\n.output Answer"]}
{"id": 1811, "answer": false, "completion": ".decl Touches(Country:symbol, Ocean:symbol)\nTouches(\"United States of America\", \"Pacific Ocean\").\nTouches(\"United States of America\", \"Atlantic Ocean\").\nTouches(\"United States of America\", \"Indian Ocean\").\n.decl Answer()\nAnswer() :- Touches(\"United States of America\", \"Indian Ocean\").\n.output Answer", "completions": [".decl Touches(Country:symbol, Ocean:symbol)\nTouches(\"United States of America\", \"Pacific Ocean\").\nTouches(\"United States of America\", \"Atlantic Ocean\").\nTouches(\"United States of America\", \"Indian Ocean\").\n.decl Answer()\nAnswer() :- Touches(\"United States of America\", \"Indian Ocean\").\n.output Answer"]}
{"id": 1812, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Sophist\", \"rhetoric\").\n.decl Answer()\nAnswer() :- Has_skill(\"Sophist\", \"rhetoric\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Sophist\", \"rhetoric\").\n.decl Answer()\nAnswer() :- Has_skill(\"Sophist\", \"rhetoric\").\n.output Answer"]}
{"id": 1813, "answer": true, "completion": ".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Krispy Kreme glazed doughnut\", 190).\n.decl Has_sugar_grams(Food:symbol, Sugar_grams:float)\nHas_sugar_grams(\"Krispy Kreme glazed doughnut\", 11).\n.decl Answer()\nAnswer() :- Has_calories(\"Krispy Kreme glazed doughnut\", calories1), Has_sugar_grams(\"Krispy Kreme glazed doughnut\", sugar_grams1), calories1 * 4 > sugar_grams1 * 36.\n.output Answer", "completions": [".decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Krispy Kreme glazed doughnut\", 190).\n.decl Has_sugar_grams(Food:symbol, Sugar_grams:float)\nHas_sugar_grams(\"Krispy Kreme glazed doughnut\", 11).\n.decl Answer()\nAnswer() :- Has_calories(\"Krispy Kreme glazed doughnut\", calories1), Has_sugar_grams(\"Krispy Kreme glazed doughnut\", sugar_grams1), calories1 * 4 > sugar_grams1 * 36.\n.output Answer"]}
{"id": 1814, "answer": true, "completion": ".decl Is_part_of(Movie:symbol, Franchise:symbol)\nIs_part_of(\"The Matrix\", \"The Matrix\").\nIs_part_of(\"The Matrix Reloaded\", \"The Matrix\").\nIs_part_of(\"The Matrix Revolutions\", \"The Matrix\").\n.decl Answer()\nAnswer() :- Is_part_of(\"The Matrix\", franchise), franchise = \"The Matrix\".\n.output Answer", "completions": [".decl Is_part_of(Movie:symbol, Franchise:symbol)\nIs_part_of(\"The Matrix\", \"The Matrix\").\nIs_part_of(\"The Matrix Reloaded\", \"The Matrix\").\nIs_part_of(\"The Matrix Revolutions\", \"The Matrix\").\n.decl Answer()\nAnswer() :- Is_part_of(\"The Matrix\", franchise), franchise = \"The Matrix\".\n.output Answer"]}
{"id": 1815, "answer": true, "completion": ".decl Banned_from_entering(Person:symbol, Place:symbol)\nBanned_from_entering(\"foreigners\", \"Forbidden City\").\n.decl Answer()\nAnswer() :- Banned_from_entering(\"foreigners\", \"Forbidden City\").\n.output Answer\n\n\n", "completions": [".decl Banned_from_entering(Person:symbol, Place:symbol)\nBanned_from_entering(\"foreigners\", \"Forbidden City\").\n.decl Answer()\nAnswer() :- Banned_from_entering(\"foreigners\", \"Forbidden City\").\n.output Answer\n\n\n"]}
{"id": 1816, "answer": false, "completion": "\n.decl Is_in_country(Number:symbol, Country:symbol)\nIs_in_country(\"911\", \"USA\").\nIs_in_country(\"999\", \"UK\").\nIs_in_country(\"101\", \"Bangladesh\").\n.decl Is_Fibonacci_number(Number:symbol)\nIs_Fibonacci_number(\"0\").\nIs_Fibonacci_number(\"1\").\nIs_Fibonacci_number(\"2\").\nIs_Fibonacci_number(\"3\").\nIs_Fibonacci_number(\"5\").\nIs_Fibonacci_number(\"8\").\nIs_Fibonacci_number(\"13\").\nIs_Fibonacci_number(\"21\").\nIs_Fibonacci_number(\"34\").\nIs_Fibonacci_number(\"55\").\nIs_Fibonacci_number(\"89\").\nIs_Fibonacci_number(\"144\").\nIs_Fibonacci_number(\"233\").\nIs_Fibonacci_number(\"377\").\nIs_Fibonacci_number(\"610\").\nIs_Fibonacci_number(\"987\").\nIs_Fibonacci_number(\"1597\").\nIs_Fibonacci_number(\"2584\").\nIs_Fibonacci_number(\"4181\").\nIs_Fibonacci_number(\"6765\").\nIs_Fibonacci_number(\"10946\").\nIs_Fibonacci_number(\"17711\").\nIs_Fibonacci_number(\"28657\").\nIs_Fibonacci_number(\"46368\").\nIs_Fibonacci_number(\"75025\").\nIs_Fibonacci_number(\"121393\").\nIs_Fibonacci_number(\"196418\").\nIs_Fibonacci_number(\"317811\").\nIs_Fibonacci_number(\"514229\").\nIs_Fibonacci_number(\"832040\").\nIs_Fibonacci_number(\"1346269\").\nIs_Fibonacci_number(\"2178309\").\nIs_Fibonacci_number(\"3524578\").\nIs_Fibonacci_number(\"5702887\").\nIs_Fibonacci_number(\"9227465\").\nIs_Fibonacci_number(\"14930352\").\nIs_Fibonacci_number(\"24157817\").\nIs_Fibonacci_number(\"39088169\").\nIs_Fibonacci_number(\"63245986\").\nIs_Fibonacci_number(\"102334155\").\nIs_Fibonacci_number(\"165580141\").\nIs_Fibonacci_number(\"267914296\").\nIs_Fibonacci_number(\"433494437\").\nIs_Fibonacci_number(\"701408733\").\nIs_Fibonacci_number(\"1134903170\").\nIs_Fibonacci_number(\"1836311903\").\n.decl Answer()\nAnswer() :- Is_in_country(\"101\", \"Bangladesh\"), Is_Fibonacci_number(\"101\").\n.output Answer", "completions": ["\n.decl Is_in_country(Number:symbol, Country:symbol)\nIs_in_country(\"911\", \"USA\").\nIs_in_country(\"999\", \"UK\").\nIs_in_country(\"101\", \"Bangladesh\").\n.decl Is_Fibonacci_number(Number:symbol)\nIs_Fibonacci_number(\"0\").\nIs_Fibonacci_number(\"1\").\nIs_Fibonacci_number(\"2\").\nIs_Fibonacci_number(\"3\").\nIs_Fibonacci_number(\"5\").\nIs_Fibonacci_number(\"8\").\nIs_Fibonacci_number(\"13\").\nIs_Fibonacci_number(\"21\").\nIs_Fibonacci_number(\"34\").\nIs_Fibonacci_number(\"55\").\nIs_Fibonacci_number(\"89\").\nIs_Fibonacci_number(\"144\").\nIs_Fibonacci_number(\"233\").\nIs_Fibonacci_number(\"377\").\nIs_Fibonacci_number(\"610\").\nIs_Fibonacci_number(\"987\").\nIs_Fibonacci_number(\"1597\").\nIs_Fibonacci_number(\"2584\").\nIs_Fibonacci_number(\"4181\").\nIs_Fibonacci_number(\"6765\").\nIs_Fibonacci_number(\"10946\").\nIs_Fibonacci_number(\"17711\").\nIs_Fibonacci_number(\"28657\").\nIs_Fibonacci_number(\"46368\").\nIs_Fibonacci_number(\"75025\").\nIs_Fibonacci_number(\"121393\").\nIs_Fibonacci_number(\"196418\").\nIs_Fibonacci_number(\"317811\").\nIs_Fibonacci_number(\"514229\").\nIs_Fibonacci_number(\"832040\").\nIs_Fibonacci_number(\"1346269\").\nIs_Fibonacci_number(\"2178309\").\nIs_Fibonacci_number(\"3524578\").\nIs_Fibonacci_number(\"5702887\").\nIs_Fibonacci_number(\"9227465\").\nIs_Fibonacci_number(\"14930352\").\nIs_Fibonacci_number(\"24157817\").\nIs_Fibonacci_number(\"39088169\").\nIs_Fibonacci_number(\"63245986\").\nIs_Fibonacci_number(\"102334155\").\nIs_Fibonacci_number(\"165580141\").\nIs_Fibonacci_number(\"267914296\").\nIs_Fibonacci_number(\"433494437\").\nIs_Fibonacci_number(\"701408733\").\nIs_Fibonacci_number(\"1134903170\").\nIs_Fibonacci_number(\"1836311903\").\n.decl Answer()\nAnswer() :- Is_in_country(\"101\", \"Bangladesh\"), Is_Fibonacci_number(\"101\").\n.output Answer"]}
{"id": 1817, "answer": true, "completion": ".decl Requires_conductor(Musical_piece:symbol)\nRequires_conductor(\"symphony\").\n.decl Answer()\nAnswer() :- Requires_conductor(\"symphony\"), !Requires_conductor(\"solo piano\").\n.output Answer", "completions": [".decl Requires_conductor(Musical_piece:symbol)\nRequires_conductor(\"symphony\").\n.decl Answer()\nAnswer() :- Requires_conductor(\"symphony\"), !Requires_conductor(\"solo piano\").\n.output Answer"]}
{"id": 1818, "answer": false, "completion": ".decl Parents(Person:symbol, Parent1:symbol, Parent2:symbol)\nParents(\"Jackson Pollock\", \"LeRoy Pollock\", \"Stella McClure\").\n.decl Required_to_say(Person:symbol, Event:symbol)\nRequired_to_say(\"Jackson Pollock\", \"The Pledge of Allegiance\").\n.decl Answer()\nAnswer() :- Parents(\"Jackson Pollock\", parent1, parent2), Required_to_say(\"Jackson Pollock\", event), !Required_to_say(parent1, event), !Required_to_say(parent2, event).\n.output Answer", "completions": [".decl Parents(Person:symbol, Parent1:symbol, Parent2:symbol)\nParents(\"Jackson Pollock\", \"LeRoy Pollock\", \"Stella McClure\").\n.decl Required_to_say(Person:symbol, Event:symbol)\nRequired_to_say(\"Jackson Pollock\", \"The Pledge of Allegiance\").\n.decl Answer()\nAnswer() :- Parents(\"Jackson Pollock\", parent1, parent2), Required_to_say(\"Jackson Pollock\", event), !Required_to_say(parent1, event), !Required_to_say(parent2, event).\n.output Answer"]}
{"id": 1819, "answer": false, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"winter solstice\", \"December\").\nHappens_in_month(\"winter solstice\", \"June\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"winter solstice\", \"December\"), Happens_in_month(\"winter solstice\", \"June\").\n.output Answer", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"winter solstice\", \"December\").\nHappens_in_month(\"winter solstice\", \"June\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"winter solstice\", \"December\"), Happens_in_month(\"winter solstice\", \"June\").\n.output Answer"]}
{"id": 1820, "answer": false, "completion": ".decl Has_area(Country:symbol, Area:float)\nHas_area(\"Tuvalu\", 26).\nHas_area(\"Niue\", 260).\n.decl Answer()\nAnswer() :- Has_area(\"Tuvalu\", area1), Has_area(\"Niue\", area2), area1 < area2.\n.output Answer", "completions": [".decl Has_area(Country:symbol, Area:float)\nHas_area(\"Tuvalu\", 26).\nHas_area(\"Niue\", 260).\n.decl Answer()\nAnswer() :- Has_area(\"Tuvalu\", area1), Has_area(\"Niue\", area2), area1 < area2.\n.output Answer"]}
{"id": 1821, "answer": false, "completion": ".decl Is_parody_of(Book:symbol, Book_parodied:symbol)\nIs_parody_of(\"A Tale of Two Cities\", \"Bible\").\n.decl Answer()\nAnswer() :- Is_parody_of(\"A Tale of Two Cities\", \"Bible\").\n.output Answer", "completions": [".decl Is_parody_of(Book:symbol, Book_parodied:symbol)\nIs_parody_of(\"A Tale of Two Cities\", \"Bible\").\n.decl Answer()\nAnswer() :- Is_parody_of(\"A Tale of Two Cities\", \"Bible\").\n.output Answer"]}
{"id": 1822, "answer": true, "completion": ".decl Has_length(String:symbol, Length:float)\nHas_length(\"binary numbers\", 8).\nHas_length(\"standard alphabet\", 26).\n.decl Answer()\nAnswer() :- Has_length(\"binary numbers\", length1), Has_length(\"standard alphabet\", length2), length1 >= length2.\n.output Answer", "completions": [".decl Has_length(String:symbol, Length:float)\nHas_length(\"binary numbers\", 8).\nHas_length(\"standard alphabet\", 26).\n.decl Answer()\nAnswer() :- Has_length(\"binary numbers\", length1), Has_length(\"standard alphabet\", length2), length1 >= length2.\n.output Answer"]}
{"id": 1823, "answer": true, "completion": ".decl Influences(Person:symbol, Style:symbol)\nInfluences(\"Andy Warhol\", \"Pop Art\").\nInfluences(\"Art Deco\", \"Pop Art\").\n.decl Answer()\nAnswer() :- Influences(\"Andy Warhol\", \"Art Deco\").\n.output Answer", "completions": [".decl Influences(Person:symbol, Style:symbol)\nInfluences(\"Andy Warhol\", \"Pop Art\").\nInfluences(\"Art Deco\", \"Pop Art\").\n.decl Answer()\nAnswer() :- Influences(\"Andy Warhol\", \"Art Deco\").\n.output Answer"]}
{"id": 1824, "answer": true, "completion": ".decl Is_pregnant(Person:symbol)\nIs_pregnant(\"Mary\").\n.decl Is_recommended(Person:symbol, Remedy:symbol)\nIs_recommended(\"Mary\", \"ginger\").\n.decl Answer()\nAnswer() :- Is_pregnant(person), Is_recommended(person, \"ginger\").\n.output Answer\n\n\n", "completions": [".decl Is_pregnant(Person:symbol)\nIs_pregnant(\"Mary\").\n.decl Is_recommended(Person:symbol, Remedy:symbol)\nIs_recommended(\"Mary\", \"ginger\").\n.decl Answer()\nAnswer() :- Is_pregnant(person), Is_recommended(person, \"ginger\").\n.output Answer\n\n\n"]}
{"id": 1825, "answer": false, "completion": ".decl Has_power(Object:symbol, Power:float)\nHas_power(\"spinach\", 100).\n.decl Is_in_movie(Object:symbol, Movie:symbol)\nIs_in_movie(\"spinach\", \"Popeye\").\n.decl Is_comic_movie(Movie:symbol)\nIs_comic_movie(\"Popeye\").\n.decl Answer()\nAnswer() :- Has_power(\"spinach\", power), Is_in_movie(\"spinach\", movie), Is_comic_movie(movie).\n.output Answer", "completions": [".decl Has_power(Object:symbol, Power:float)\nHas_power(\"spinach\", 100).\n.decl Is_in_movie(Object:symbol, Movie:symbol)\nIs_in_movie(\"spinach\", \"Popeye\").\n.decl Is_comic_movie(Movie:symbol)\nIs_comic_movie(\"Popeye\").\n.decl Answer()\nAnswer() :- Has_power(\"spinach\", power), Is_in_movie(\"spinach\", movie), Is_comic_movie(movie).\n.output Answer"]}
{"id": 1826, "answer": false, "completion": ".decl Has_temperature(Event:symbol, Temperature:float)\nHas_temperature(\"welding with acetylene\", 3100).\nHas_temperature(\"star\", 5500).\n.decl Answer()\nAnswer() :- Has_temperature(\"welding with acetylene\", temperature1), Has_temperature(\"star\", temperature2), temperature1 >= temperature2.\n.output Answer", "completions": [".decl Has_temperature(Event:symbol, Temperature:float)\nHas_temperature(\"welding with acetylene\", 3100).\nHas_temperature(\"star\", 5500).\n.decl Answer()\nAnswer() :- Has_temperature(\"welding with acetylene\", temperature1), Has_temperature(\"star\", temperature2), temperature1 >= temperature2.\n.output Answer"]}
{"id": 1827, "answer": true, "completion": ".decl Is_taller_than(Object_A:symbol, Object_B:symbol)\nIs_taller_than(\"Donatello's bronze David\", \"adult male\").\nIs_taller_than(\"Sistine Chapel ceiling\", \"Donatello's bronze David\").\n.decl Answer()\nAnswer() :- Is_taller_than(\"Donatello's bronze David\", \"adult male\"), Is_taller_than(\"Sistine Chapel ceiling\", \"Donatello's bronze David\").\n.output Answer", "completions": [".decl Is_taller_than(Object_A:symbol, Object_B:symbol)\nIs_taller_than(\"Donatello's bronze David\", \"adult male\").\nIs_taller_than(\"Sistine Chapel ceiling\", \"Donatello's bronze David\").\n.decl Answer()\nAnswer() :- Is_taller_than(\"Donatello's bronze David\", \"adult male\"), Is_taller_than(\"Sistine Chapel ceiling\", \"Donatello's bronze David\").\n.output Answer"]}
{"id": 1828, "answer": true, "completion": ".decl Is_dangerous(Mixture:symbol)\nIs_dangerous(\"chlorine + sodium\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"chlorine + sodium\").\n.output Answer", "completions": [".decl Is_dangerous(Mixture:symbol)\nIs_dangerous(\"chlorine + sodium\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"chlorine + sodium\").\n.output Answer"]}
{"id": 1829, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Spanish American War\", 3).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Moulin Rouge\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Moulin Rouge\", n_years1), Last_n_years(\"Spanish American War\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Spanish American War\", 3).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Moulin Rouge\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Moulin Rouge\", n_years1), Last_n_years(\"Spanish American War\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1830, "answer": true, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Kazakhstan\", 18000000).\n.decl Has_viewership(Show:symbol, Viewership:float)\nHas_viewership(\"Downton Abbey finale\", 12000000).\n.decl Answer()\nAnswer() :- Has_population(\"Kazakhstan\", population), Has_viewership(\"Downton Abbey finale\", viewership), viewership > population.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Kazakhstan\", 18000000).\n.decl Has_viewership(Show:symbol, Viewership:float)\nHas_viewership(\"Downton Abbey finale\", 12000000).\n.decl Answer()\nAnswer() :- Has_population(\"Kazakhstan\", population), Has_viewership(\"Downton Abbey finale\", viewership), viewership > population.\n.output Answer"]}
{"id": 1831, "answer": true, "completion": ".decl Has_potential_to_be(Event:symbol, Potential:symbol)\nHas_potential_to_be(\"Do It Yourself projects\", \"potentially lethal\").\n.decl Answer()\nAnswer() :- Has_potential_to_be(\"Do It Yourself projects\", \"potentially lethal\").\n.output Answer", "completions": [".decl Has_potential_to_be(Event:symbol, Potential:symbol)\nHas_potential_to_be(\"Do It Yourself projects\", \"potentially lethal\").\n.decl Answer()\nAnswer() :- Has_potential_to_be(\"Do It Yourself projects\", \"potentially lethal\").\n.output Answer"]}
{"id": 1832, "answer": true, "completion": ".decl Lives_for_n_years(Animal:symbol, N_years:float)\nLives_for_n_years(\"Eastern chipmunk\", 2).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Lives_for_n_years(\"Eastern chipmunk\", n_years1), Happens_every_n_years(\"leap year\", n_years2), n_years1 < n_years2.\n.output Answer", "completions": [".decl Lives_for_n_years(Animal:symbol, N_years:float)\nLives_for_n_years(\"Eastern chipmunk\", 2).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"leap year\", 4).\n.decl Answer()\nAnswer() :- Lives_for_n_years(\"Eastern chipmunk\", n_years1), Happens_every_n_years(\"leap year\", n_years2), n_years1 < n_years2.\n.output Answer"]}
{"id": 1833, "answer": false, "completion": ".decl Requires_electricity(Game:symbol)\nRequires_electricity(\"Super Mario\").\n.decl Answer()\nAnswer() :- Requires_electricity(\"Super Mario\").\n.output Answer", "completions": [".decl Requires_electricity(Game:symbol)\nRequires_electricity(\"Super Mario\").\n.decl Answer()\nAnswer() :- Requires_electricity(\"Super Mario\").\n.output Answer"]}
{"id": 1834, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Chinese mountain cat\", \"China\").\n.decl Answer()\nAnswer() :- Lives_in(\"Chinese mountain cat\", \"China\").\nAnswer() :- Lives_in(\"Chinese mountain cat\", \"orbit\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"Chinese mountain cat\", \"China\").\n.decl Answer()\nAnswer() :- Lives_in(\"Chinese mountain cat\", \"China\").\nAnswer() :- Lives_in(\"Chinese mountain cat\", \"orbit\").\n.output Answer"]}
{"id": 1835, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"rock\", 2.7).\nHas_density(\"atmosphere of Earth\", 0.0012).\n.decl Answer()\nAnswer() :- Has_density(\"rock\", density1), Has_density(\"atmosphere of Earth\", density2), density1 < density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"rock\", 2.7).\nHas_density(\"atmosphere of Earth\", 0.0012).\n.decl Answer()\nAnswer() :- Has_density(\"rock\", density1), Has_density(\"atmosphere of Earth\", density2), density1 < density2.\n.output Answer"]}
{"id": 1836, "answer": false, "completion": ".decl Has_contributed_to(Company:symbol, Event:symbol)\nHas_contributed_to(\"Burger King\", \"increase in need for snowshoes\").\n.decl Answer()\nAnswer() :- Has_contributed_to(\"Burger King\", event), !, event != \"decrease in need for snowshoes\".\n.output Answer", "completions": [".decl Has_contributed_to(Company:symbol, Event:symbol)\nHas_contributed_to(\"Burger King\", \"increase in need for snowshoes\").\n.decl Answer()\nAnswer() :- Has_contributed_to(\"Burger King\", event), !, event != \"decrease in need for snowshoes\".\n.output Answer"]}
{"id": 1837, "answer": true, "completion": ".decl Appears_in(Object:symbol, Movie:symbol)\nAppears_in(\"USB flash drive\", \"The Godfather\").\n.decl Answer()\nAnswer() :- Appears_in(\"USB flash drive\", \"The Godfather\").\n.output Answer", "completions": [".decl Appears_in(Object:symbol, Movie:symbol)\nAppears_in(\"USB flash drive\", \"The Godfather\").\n.decl Answer()\nAnswer() :- Appears_in(\"USB flash drive\", \"The Godfather\").\n.output Answer"]}
{"id": 1838, "answer": false, "completion": ".decl Afraid_of(Person:symbol, Event:symbol)\nAfraid_of(\"some people\", \"New Years Day coming in 1999\").\n.decl Answer()\nAnswer() :- Afraid_of(\"some people\", \"New Years Day coming in 1999\").\n.output Answer", "completions": [".decl Afraid_of(Person:symbol, Event:symbol)\nAfraid_of(\"some people\", \"New Years Day coming in 1999\").\n.decl Answer()\nAnswer() :- Afraid_of(\"some people\", \"New Years Day coming in 1999\").\n.output Answer"]}
{"id": 1839, "answer": true, "completion": ".decl Supports(Person:symbol, Decision:symbol)\nSupports(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.decl Answer()\nAnswer() :- Supports(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Decision:symbol)\nSupports(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.decl Answer()\nAnswer() :- Supports(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.output Answer"]}
{"id": 1840, "answer": false, "completion": ".decl Has_family(Person:symbol, Family:symbol)\nHas_family(\"Rahul Dravid\", \"Gryllidae\").\n.decl Answer()\nAnswer() :- Has_family(\"Rahul Dravid\", \"Gryllidae\").\n.output Answer", "completions": [".decl Has_family(Person:symbol, Family:symbol)\nHas_family(\"Rahul Dravid\", \"Gryllidae\").\n.decl Answer()\nAnswer() :- Has_family(\"Rahul Dravid\", \"Gryllidae\").\n.output Answer"]}
{"id": 1841, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"desk\", 0.7).\nHas_height(\"pet macaque\", 0.5).\n.decl Answer()\nAnswer() :- Has_height(\"desk\", height1), Has_height(\"pet macaque\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"desk\", 0.7).\nHas_height(\"pet macaque\", 0.5).\n.decl Answer()\nAnswer() :- Has_height(\"desk\", height1), Has_height(\"pet macaque\", height2), height1 > height2.\n.output Answer"]}
{"id": 1842, "answer": true, "completion": ".decl Has_trigger(Video:symbol, Trigger:symbol)\nHas_trigger(\"Pink music video\", \"eating disorder\").\n.decl Answer()\nAnswer() :- Has_trigger(\"Pink music video\", \"eating disorder\").\n.output Answer", "completions": [".decl Has_trigger(Video:symbol, Trigger:symbol)\nHas_trigger(\"Pink music video\", \"eating disorder\").\n.decl Answer()\nAnswer() :- Has_trigger(\"Pink music video\", \"eating disorder\").\n.output Answer"]}
{"id": 1843, "answer": true, "completion": ".decl Requires_ingredient(Event:symbol, Ingredient:symbol)\nRequires_ingredient(\"brewing\", \"water\").\n.decl Requires_utensil(Event:symbol, Utensil:symbol)\nRequires_utensil(\"brewing\", \"pot\").\n.decl Prohibited_in_environment(Event:symbol, Environment:symbol)\nProhibited_in_environment(\"brewing\", \"prison\").\n.decl Answer()\nAnswer() :- Requires_ingredient(\"brewing\", ingredient), Requires_utensil(\"brewing\", utensil), Prohibited_in_environment(\"brewing\", \"prison\").\n.output Answer", "completions": [".decl Requires_ingredient(Event:symbol, Ingredient:symbol)\nRequires_ingredient(\"brewing\", \"water\").\n.decl Requires_utensil(Event:symbol, Utensil:symbol)\nRequires_utensil(\"brewing\", \"pot\").\n.decl Prohibited_in_environment(Event:symbol, Environment:symbol)\nProhibited_in_environment(\"brewing\", \"prison\").\n.decl Answer()\nAnswer() :- Requires_ingredient(\"brewing\", ingredient), Requires_utensil(\"brewing\", utensil), Prohibited_in_environment(\"brewing\", \"prison\").\n.output Answer"]}
{"id": 1844, "answer": true, "completion": ".decl Lives_in(Person:symbol, Region:symbol)\nLives_in(\"John\", \"New England\").\n.decl Grows(Region:symbol, Crop:symbol)\nGrows(\"New England\", \"potatoes\").\nGrows(\"New England\", \"corn\").\nGrows(\"New England\", \"wheat\").\nGrows(\"New England\", \"oats\").\nGrows(\"New England\", \"barley\").\nGrows(\"New England\", \"rye\").\nGrows(\"New England\", \"tobacco\").\nGrows(\"New England\", \"cotton\").\nGrows(\"New England\", \"fruit\").\nGrows(\"New England\", \"vegetables\").\nGrows(\"New England\", \"dairy products\").\nGrows(\"New England\", \"livestock\").\nGrows(\"New England\", \"poultry\").\nGrows(\"New England\", \"fish\").\nGrows(\"New England\", \"forest products\").\nGrows(\"New England\", \"manufactured goods\").\nGrows(\"New England\", \"mining\").\nGrows(\"New England\", \"tourism\").\n.decl Answer()\nAnswer() :- Lives_in(\"John\", \"New England\"), Grows(\"New England\", \"coffee\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Region:symbol)\nLives_in(\"John\", \"New England\").\n.decl Grows(Region:symbol, Crop:symbol)\nGrows(\"New England\", \"potatoes\").\nGrows(\"New England\", \"corn\").\nGrows(\"New England\", \"wheat\").\nGrows(\"New England\", \"oats\").\nGrows(\"New England\", \"barley\").\nGrows(\"New England\", \"rye\").\nGrows(\"New England\", \"tobacco\").\nGrows(\"New England\", \"cotton\").\nGrows(\"New England\", \"fruit\").\nGrows(\"New England\", \"vegetables\").\nGrows(\"New England\", \"dairy products\").\nGrows(\"New England\", \"livestock\").\nGrows(\"New England\", \"poultry\").\nGrows(\"New England\", \"fish\").\nGrows(\"New England\", \"forest products\").\nGrows(\"New England\", \"manufactured goods\").\nGrows(\"New England\", \"mining\").\nGrows(\"New England\", \"tourism\").\n.decl Answer()\nAnswer() :- Lives_in(\"John\", \"New England\"), Grows(\"New England\", \"coffee\").\n.output Answer"]}
{"id": 1845, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"krabby patty\", \"krabby\").\nHas_ingredient(\"krabby patty\", \"seaweed\").\nHas_ingredient(\"krabby patty\", \"lettuce\").\nHas_ingredient(\"krabby patty\", \"cheese\").\nHas_ingredient(\"krabby patty\", \"ketchup\").\nHas_ingredient(\"krabby patty\", \"mustard\").\nHas_ingredient(\"krabby patty\", \"pickles\").\nHas_ingredient(\"krabby patty\", \"onions\").\nHas_ingredient(\"krabby patty\", \"bun\").\nHas_ingredient(\"cheeseburger\", \"beef\").\nHas_ingredient(\"cheeseburger\", \"cheese\").\nHas_ingredient(\"cheeseburger\", \"ketchup\").\nHas_ingredient(\"cheeseburger\", \"mustard\").\nHas_ingredient(\"cheeseburger\", \"pickles\").\nHas_ingredient(\"cheeseburger\", \"onions\").\nHas_ingredient(\"cheeseburger\", \"bun\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"krabby patty\", ingredient1), Has_ingredient(\"cheeseburger\", ingredient2), ingredient1 = ingredient2.\nAnswer() :- Has_ingredient(\"krabby patty\", ingredient1), Has_ingredient(\"cheeseburger\", ingredient2), ingredient1 != ingredient2.\n.output Answer", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"krabby patty\", \"krabby\").\nHas_ingredient(\"krabby patty\", \"seaweed\").\nHas_ingredient(\"krabby patty\", \"lettuce\").\nHas_ingredient(\"krabby patty\", \"cheese\").\nHas_ingredient(\"krabby patty\", \"ketchup\").\nHas_ingredient(\"krabby patty\", \"mustard\").\nHas_ingredient(\"krabby patty\", \"pickles\").\nHas_ingredient(\"krabby patty\", \"onions\").\nHas_ingredient(\"krabby patty\", \"bun\").\nHas_ingredient(\"cheeseburger\", \"beef\").\nHas_ingredient(\"cheeseburger\", \"cheese\").\nHas_ingredient(\"cheeseburger\", \"ketchup\").\nHas_ingredient(\"cheeseburger\", \"mustard\").\nHas_ingredient(\"cheeseburger\", \"pickles\").\nHas_ingredient(\"cheeseburger\", \"onions\").\nHas_ingredient(\"cheeseburger\", \"bun\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"krabby patty\", ingredient1), Has_ingredient(\"cheeseburger\", ingredient2), ingredient1 = ingredient2.\nAnswer() :- Has_ingredient(\"krabby patty\", ingredient1), Has_ingredient(\"cheeseburger\", ingredient2), ingredient1 != ingredient2.\n.output Answer"]}
{"id": 1846, "answer": true, "completion": ".decl Seats_available(Airplane:symbol, Seats:float)\nSeats_available(\"Boeing 737\", 189).\n.decl Has_n_members(Organization:symbol, N_members:float)\nHas_n_members(\"Chief Justice of the United States\", 17).\n.decl Answer()\nAnswer() :- Seats_available(\"Boeing 737\", seats), Has_n_members(\"Chief Justice of the United States\", n_members), seats < n_members.\n.output Answer", "completions": [".decl Seats_available(Airplane:symbol, Seats:float)\nSeats_available(\"Boeing 737\", 189).\n.decl Has_n_members(Organization:symbol, N_members:float)\nHas_n_members(\"Chief Justice of the United States\", 17).\n.decl Answer()\nAnswer() :- Seats_available(\"Boeing 737\", seats), Has_n_members(\"Chief Justice of the United States\", n_members), seats < n_members.\n.output Answer"]}
{"id": 1847, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"crocodile\", \"Great Salt Lake\").\nLives_in(\"alligator\", \"Great Salt Lake\").\n.decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"crocodile\", \"Florida\").\nLives_in(\"alligator\", \"Florida\").\n.decl Answer()\nAnswer() :- Lives_in(\"crocodile\", \"Great Salt Lake\"), Lives_in(\"alligator\", \"Great Salt Lake\").\nAnswer() :- Lives_in(\"crocodile\", \"Florida\"), Lives_in(\"alligator\", \"Florida\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"crocodile\", \"Great Salt Lake\").\nLives_in(\"alligator\", \"Great Salt Lake\").\n.decl Lives_in(Animal:symbol, Place:symbol)\nLives_in(\"crocodile\", \"Florida\").\nLives_in(\"alligator\", \"Florida\").\n.decl Answer()\nAnswer() :- Lives_in(\"crocodile\", \"Great Salt Lake\"), Lives_in(\"alligator\", \"Great Salt Lake\").\nAnswer() :- Lives_in(\"crocodile\", \"Florida\"), Lives_in(\"alligator\", \"Florida\").\n.output Answer"]}
{"id": 1848, "answer": true, "completion": ".decl Started_due_to(Company:symbol, Event:symbol)\nStarted_due_to(\"Saudi Aramco\", \"assassination\").\n.decl Answer()\nAnswer() :- Started_due_to(\"Saudi Aramco\", event).\n.output Answer", "completions": [".decl Started_due_to(Company:symbol, Event:symbol)\nStarted_due_to(\"Saudi Aramco\", \"assassination\").\n.decl Answer()\nAnswer() :- Started_due_to(\"Saudi Aramco\", event).\n.output Answer"]}
{"id": 1849, "answer": false, "completion": ".decl Happens_during(Event:symbol, Time:symbol)\nHappens_during(\"Diwali\", \"October\").\nHappens_during(\"Diwali\", \"November\").\n.decl In_month(Crustacean:symbol, Month:symbol)\nIn_month(\"lobster\", \"September\").\nIn_month(\"lobster\", \"October\").\nIn_month(\"lobster\", \"November\").\nIn_month(\"lobster\", \"December\").\n.decl Answer()\nAnswer() :- Happens_during(\"Diwali\", month), In_month(\"lobster\", month).\n.output Answer", "completions": [".decl Happens_during(Event:symbol, Time:symbol)\nHappens_during(\"Diwali\", \"October\").\nHappens_during(\"Diwali\", \"November\").\n.decl In_month(Crustacean:symbol, Month:symbol)\nIn_month(\"lobster\", \"September\").\nIn_month(\"lobster\", \"October\").\nIn_month(\"lobster\", \"November\").\nIn_month(\"lobster\", \"December\").\n.decl Answer()\nAnswer() :- Happens_during(\"Diwali\", month), In_month(\"lobster\", month).\n.output Answer"]}
{"id": 1850, "answer": false, "completion": ".decl Named_after(Person:symbol, Thing:symbol)\nNamed_after(\"goddess Friday\", \"despise felines\").\n.decl Answer()\nAnswer() :- Named_after(\"goddess Friday\", \"despise felines\").\n.output Answer", "completions": [".decl Named_after(Person:symbol, Thing:symbol)\nNamed_after(\"goddess Friday\", \"despise felines\").\n.decl Answer()\nAnswer() :- Named_after(\"goddess Friday\", \"despise felines\").\n.output Answer"]}
{"id": 1851, "answer": false, "completion": ".decl Can_eat_with_hands(Food:symbol)\nCan_eat_with_hands(\"soup\").\n.decl Answer()\nAnswer() :- Can_eat_with_hands(\"soup\").\n.output Answer", "completions": [".decl Can_eat_with_hands(Food:symbol)\nCan_eat_with_hands(\"soup\").\n.decl Answer()\nAnswer() :- Can_eat_with_hands(\"soup\").\n.output Answer"]}
{"id": 1852, "answer": true, "completion": ".decl Suffers_from(Person:symbol, Phobia:symbol)\nSuffers_from(\"John\", \"Thalassophobia\").\n.decl Enjoys(Person:symbol, Hobby:symbol)\nEnjoys(\"John\", \"oceanography\").\n.decl Answer()\nAnswer() :- Suffers_from(\"John\", \"Thalassophobia\"), !, Enjoys(\"John\", \"oceanography\").\n.output Answer", "completions": [".decl Suffers_from(Person:symbol, Phobia:symbol)\nSuffers_from(\"John\", \"Thalassophobia\").\n.decl Enjoys(Person:symbol, Hobby:symbol)\nEnjoys(\"John\", \"oceanography\").\n.decl Answer()\nAnswer() :- Suffers_from(\"John\", \"Thalassophobia\"), !, Enjoys(\"John\", \"oceanography\").\n.output Answer"]}
{"id": 1853, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Eric Clapton\", 1945).\n.decl Has_legal_age(Person:symbol, Age:float)\nHas_legal_age(\"Eric Clapton's mother\", 21).\n.decl Answer()\nAnswer() :- Born_in_year(\"Eric Clapton\", year), Has_legal_age(\"Eric Clapton's mother\", age), year - age < 0.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Eric Clapton\", 1945).\n.decl Has_legal_age(Person:symbol, Age:float)\nHas_legal_age(\"Eric Clapton's mother\", 21).\n.decl Answer()\nAnswer() :- Born_in_year(\"Eric Clapton\", year), Has_legal_age(\"Eric Clapton's mother\", age), year - age < 0.\n.output Answer"]}
{"id": 1854, "answer": true, "completion": ".decl Won_championship(Person:symbol, Championship:symbol)\nWon_championship(\"Secretariat\", \"Kentucky Derby\").\n.decl Answer()\nAnswer() :- Won_championship(\"Secretariat\", \"Formula One\").\n.output Answer", "completions": [".decl Won_championship(Person:symbol, Championship:symbol)\nWon_championship(\"Secretariat\", \"Kentucky Derby\").\n.decl Answer()\nAnswer() :- Won_championship(\"Secretariat\", \"Formula One\").\n.output Answer"]}
{"id": 1855, "answer": false, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Iggy Pop\", 71).\nHas_age(\"Justin Bieber\", 25).\n.decl Answer()\nAnswer() :- Has_age(\"Iggy Pop\", age1), Has_age(\"Justin Bieber\", age2), age1 > age2.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Iggy Pop\", 71).\nHas_age(\"Justin Bieber\", 25).\n.decl Answer()\nAnswer() :- Has_age(\"Iggy Pop\", age1), Has_age(\"Justin Bieber\", age2), age1 > age2.\n.output Answer"]}
{"id": 1856, "answer": true, "completion": ".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Eminem\", 45).\n.decl Requires_age(Event:symbol, Age:float)\nRequires_age(\"International Mathematical Olympiad\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"Eminem\", age1), Requires_age(\"International Mathematical Olympiad\", age2), age1 >= age2.\n.output Answer", "completions": [".decl Has_age(Person:symbol, Age:float)\nHas_age(\"Eminem\", 45).\n.decl Requires_age(Event:symbol, Age:float)\nRequires_age(\"International Mathematical Olympiad\", 18).\n.decl Answer()\nAnswer() :- Has_age(\"Eminem\", age1), Requires_age(\"International Mathematical Olympiad\", age2), age1 >= age2.\n.output Answer"]}
{"id": 1857, "answer": true, "completion": ".decl Lasted_for_n_seconds(Event:symbol, N_seconds:float)\nLasted_for_n_seconds(\"Tohoku earthquake\", 60).\n.decl Lasted_for_n_seconds(Event:symbol, N_seconds:float)\nLasted_for_n_seconds(\"Godzilla's life\", 1000000).\n.decl Answer()\nAnswer() :- Lasted_for_n_seconds(\"Tohoku earthquake\", n_seconds1), Lasted_for_n_seconds(\"Godzilla's life\", n_seconds2), n_seconds1 > n_seconds2.\n.output Answer", "completions": [".decl Lasted_for_n_seconds(Event:symbol, N_seconds:float)\nLasted_for_n_seconds(\"Tohoku earthquake\", 60).\n.decl Lasted_for_n_seconds(Event:symbol, N_seconds:float)\nLasted_for_n_seconds(\"Godzilla's life\", 1000000).\n.decl Answer()\nAnswer() :- Lasted_for_n_seconds(\"Tohoku earthquake\", n_seconds1), Lasted_for_n_seconds(\"Godzilla's life\", n_seconds2), n_seconds1 > n_seconds2.\n.output Answer"]}
{"id": 1858, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"JAG\", 180).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"JAG\", 7).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"JAG\", n_days1), Last_n_days(\"JAG\", n_days2), n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"JAG\", 180).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"JAG\", 7).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"JAG\", n_days1), Last_n_days(\"JAG\", n_days2), n_days1 <= n_days2.\n.output Answer"]}
{"id": 1859, "answer": false, "completion": ".decl Has_alphabet(Language:symbol, Alphabet:symbol)\nHas_alphabet(\"Greek\", \"Greek alphabet\").\nHas_alphabet(\"Sumerian\", \"Sumerian cuneiform\").\n.decl Answer()\nAnswer() :- Has_alphabet(\"Greek\", alphabet1), Has_alphabet(\"Sumerian\", alphabet2), alphabet1 = alphabet2.\n.output Answer", "completions": [".decl Has_alphabet(Language:symbol, Alphabet:symbol)\nHas_alphabet(\"Greek\", \"Greek alphabet\").\nHas_alphabet(\"Sumerian\", \"Sumerian cuneiform\").\n.decl Answer()\nAnswer() :- Has_alphabet(\"Greek\", alphabet1), Has_alphabet(\"Sumerian\", alphabet2), alphabet1 = alphabet2.\n.output Answer"]}
{"id": 1860, "answer": false, "completion": ".decl Costs(Event:symbol, Cost:float)\nCosts(\"2020 Chevrolet Corvette\", 60000).\nCosts(\"year at Columbia University\", 60000).\n.decl Answer()\nAnswer() :- Costs(\"2020 Chevrolet Corvette\", cost1), Costs(\"year at Columbia University\", cost2), cost1 >= cost2.\n.output Answer", "completions": [".decl Costs(Event:symbol, Cost:float)\nCosts(\"2020 Chevrolet Corvette\", 60000).\nCosts(\"year at Columbia University\", 60000).\n.decl Answer()\nAnswer() :- Costs(\"2020 Chevrolet Corvette\", cost1), Costs(\"year at Columbia University\", cost2), cost1 >= cost2.\n.output Answer"]}
{"id": 1861, "answer": false, "completion": ".decl Has_capacity(Hotel:symbol, Capacity:float)\nHas_capacity(\"Tahiti hotel\", 100).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"US D-Day troops\", 156000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tahiti hotel\", capacity1), Has_n_members(\"US D-Day troops\", n_members), capacity1 >= n_members.\n.output Answer", "completions": [".decl Has_capacity(Hotel:symbol, Capacity:float)\nHas_capacity(\"Tahiti hotel\", 100).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"US D-Day troops\", 156000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tahiti hotel\", capacity1), Has_n_members(\"US D-Day troops\", n_members), capacity1 >= n_members.\n.output Answer"]}
{"id": 1862, "answer": false, "completion": ".decl Hosted_in_hemisphere(Olympics:symbol, Hemisphere:symbol)\nHosted_in_hemisphere(\"1992 Summer Olympics\", \"western hemisphere\").\nHosted_in_hemisphere(\"1996 Summer Olympics\", \"western hemisphere\").\n.decl Competed_in(Person:symbol, Olympics:symbol)\nCompeted_in(\"Evander Holyfield\", \"1992 Summer Olympics\").\n.decl Answer()\nAnswer() :- Competed_in(\"Evander Holyfield\", olympics), Hosted_in_hemisphere(olympics, \"western hemisphere\").\n.output Answer", "completions": [".decl Hosted_in_hemisphere(Olympics:symbol, Hemisphere:symbol)\nHosted_in_hemisphere(\"1992 Summer Olympics\", \"western hemisphere\").\nHosted_in_hemisphere(\"1996 Summer Olympics\", \"western hemisphere\").\n.decl Competed_in(Person:symbol, Olympics:symbol)\nCompeted_in(\"Evander Holyfield\", \"1992 Summer Olympics\").\n.decl Answer()\nAnswer() :- Competed_in(\"Evander Holyfield\", olympics), Hosted_in_hemisphere(olympics, \"western hemisphere\").\n.output Answer"]}
{"id": 1863, "answer": true, "completion": ".decl Grows_in(Fruit:symbol, Country:symbol)\nGrows_in(\"watermelon\", \"Brazil\").\nGrows_in(\"watermelon\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Grows_in(\"watermelon\", \"Brazil\"), Grows_in(\"watermelon\", \"Antarctica\").\nAnswer() :- Grows_in(\"watermelon\", country1), Grows_in(\"watermelon\", country2), country1 != country2.\n.output Answer", "completions": [".decl Grows_in(Fruit:symbol, Country:symbol)\nGrows_in(\"watermelon\", \"Brazil\").\nGrows_in(\"watermelon\", \"Antarctica\").\n.decl Answer()\nAnswer() :- Grows_in(\"watermelon\", \"Brazil\"), Grows_in(\"watermelon\", \"Antarctica\").\nAnswer() :- Grows_in(\"watermelon\", country1), Grows_in(\"watermelon\", country2), country1 != country2.\n.output Answer"]}
{"id": 1864, "answer": true, "completion": ".decl Hides_from(Person:symbol, Country:symbol)\nHides_from(\"Edward Snowden\", \"United States\").\n.decl Answer()\nAnswer() :- Hides_from(\"Edward Snowden\", \"United States\").\n.output Answer", "completions": [".decl Hides_from(Person:symbol, Country:symbol)\nHides_from(\"Edward Snowden\", \"United States\").\n.decl Answer()\nAnswer() :- Hides_from(\"Edward Snowden\", \"United States\").\n.output Answer"]}
{"id": 1865, "answer": false, "completion": ".decl Lives_on(Animal:symbol, Food:symbol)\nLives_on(\"leafhopper\", \"sugar\").\nLives_on(\"leafhopper\", \"fruit\").\nLives_on(\"leafhopper\", \"vegetables\").\nLives_on(\"leafhopper\", \"plant sap\").\nLives_on(\"leafhopper\", \"plant juices\").\nLives_on(\"leafhopper\", \"plant nectar\").\nLives_on(\"leafhopper\", \"plant honeydew\").\nLives_on(\"leafhopper\", \"plant honey\").\nLives_on(\"leafhopper\", \"plant pollen\").\nLives_on(\"leafhopper\", \"plant\").\nLives_on(\"leafhopper\", \"algae\").\nLives_on(\"leafhopper\", \"moss\").\nLives_on(\"leafhopper\", \"lichen\").\nLives_on(\"leafhopper\", \"mold\").\nLives_on(\"leafhopper\", \"yeast\").\nLives_on(\"leafhopper\", \"bacteria\").\nLives_on(\"leafhopper\", \"insects\").\nLives_on(\"leafhopper\", \"insect larvae\").\nLives_on(\"leafhopper\", \"insect eggs\").\nLives_on(\"leafhopper\", \"insect nymphs\").\nLives_on(\"leafhopper\", \"insect pupae\").\nLives_on(\"leafhopper\", \"insect adults\").\nLives_on(\"leafhopper\", \"insect honeydew\").\nLives_on(\"leafhopper\", \"insect honey\").\nLives_on(\"leafhopper\", \"insect pollen\").\nLives_on(\"leafhopper\", \"insect\").\nLives_on(\"leafhopper\", \"mites\").\nLives_on(\"leafhopper\", \"mite larvae\").\nLives_on(\"leafhopper\", \"mite eggs\").\nLives_on(\"leafhopper\", \"mite nymphs\").\nLives_on(\"leafhopper\", \"mite pupae\").\nLives_on(\"leafhopper\", \"mite adults\").\nLives_on(\"leafhopper\", \"mite honeydew\").\nLives_on(\"leafhopper\", \"mite honey\").\nLives_on(\"leafhopper\", \"mite pollen\").\nLives_on(\"leafhopper\", \"mite\").\nLives_on(\"leafhopper\", \"springtails\").\nLives_on(\"leafhopper\", \"springtail larvae\").\nLives_on(\"leafhopper\", \"springtail eggs\").\nLives_on(\"leafhopper\", \"springtail nymphs\").\nLives_on(\"leafhopper\", \"springtail pupae\").\nLives_on(\"leafhopper\", \"springtail adults\").\nLives_on(\"leafhopper\", \"springtail honeydew\").\nLives_on(\"leafhopper\", \"springtail honey\").\nLives_on(\"leafhopper\", \"springtail pollen\").\nLives_on(\"leafhopper\", \"springtail\").\nLives_on(\"leafhopper\", \"aphids\").\nLives_on(\"leafhopper\", \"aphid larvae\").\nLives_on(\"leafhopper\", \"aphid eggs\").\nLives_on(\"leafhopper\", \"aphid nymphs\").\nLives_on(\"leafhopper\", \"aphid pupae\").\nLives_on(\"leafhopper\", \"aphid adults\").\nLives_on(\"", "completions": [".decl Lives_on(Animal:symbol, Food:symbol)\nLives_on(\"leafhopper\", \"sugar\").\nLives_on(\"leafhopper\", \"fruit\").\nLives_on(\"leafhopper\", \"vegetables\").\nLives_on(\"leafhopper\", \"plant sap\").\nLives_on(\"leafhopper\", \"plant juices\").\nLives_on(\"leafhopper\", \"plant nectar\").\nLives_on(\"leafhopper\", \"plant honeydew\").\nLives_on(\"leafhopper\", \"plant honey\").\nLives_on(\"leafhopper\", \"plant pollen\").\nLives_on(\"leafhopper\", \"plant\").\nLives_on(\"leafhopper\", \"algae\").\nLives_on(\"leafhopper\", \"moss\").\nLives_on(\"leafhopper\", \"lichen\").\nLives_on(\"leafhopper\", \"mold\").\nLives_on(\"leafhopper\", \"yeast\").\nLives_on(\"leafhopper\", \"bacteria\").\nLives_on(\"leafhopper\", \"insects\").\nLives_on(\"leafhopper\", \"insect larvae\").\nLives_on(\"leafhopper\", \"insect eggs\").\nLives_on(\"leafhopper\", \"insect nymphs\").\nLives_on(\"leafhopper\", \"insect pupae\").\nLives_on(\"leafhopper\", \"insect adults\").\nLives_on(\"leafhopper\", \"insect honeydew\").\nLives_on(\"leafhopper\", \"insect honey\").\nLives_on(\"leafhopper\", \"insect pollen\").\nLives_on(\"leafhopper\", \"insect\").\nLives_on(\"leafhopper\", \"mites\").\nLives_on(\"leafhopper\", \"mite larvae\").\nLives_on(\"leafhopper\", \"mite eggs\").\nLives_on(\"leafhopper\", \"mite nymphs\").\nLives_on(\"leafhopper\", \"mite pupae\").\nLives_on(\"leafhopper\", \"mite adults\").\nLives_on(\"leafhopper\", \"mite honeydew\").\nLives_on(\"leafhopper\", \"mite honey\").\nLives_on(\"leafhopper\", \"mite pollen\").\nLives_on(\"leafhopper\", \"mite\").\nLives_on(\"leafhopper\", \"springtails\").\nLives_on(\"leafhopper\", \"springtail larvae\").\nLives_on(\"leafhopper\", \"springtail eggs\").\nLives_on(\"leafhopper\", \"springtail nymphs\").\nLives_on(\"leafhopper\", \"springtail pupae\").\nLives_on(\"leafhopper\", \"springtail adults\").\nLives_on(\"leafhopper\", \"springtail honeydew\").\nLives_on(\"leafhopper\", \"springtail honey\").\nLives_on(\"leafhopper\", \"springtail pollen\").\nLives_on(\"leafhopper\", \"springtail\").\nLives_on(\"leafhopper\", \"aphids\").\nLives_on(\"leafhopper\", \"aphid larvae\").\nLives_on(\"leafhopper\", \"aphid eggs\").\nLives_on(\"leafhopper\", \"aphid nymphs\").\nLives_on(\"leafhopper\", \"aphid pupae\").\nLives_on(\"leafhopper\", \"aphid adults\").\nLives_on(\""]}
{"id": 1866, "answer": true, "completion": ".decl Causes(Event:symbol, Symptom:symbol)\nCauses(\"drug addiction\", \"euphoria\").\n.decl Answer()\nAnswer() :- Causes(\"drug addiction\", \"euphoria\").\n.output Answer", "completions": [".decl Causes(Event:symbol, Symptom:symbol)\nCauses(\"drug addiction\", \"euphoria\").\n.decl Answer()\nAnswer() :- Causes(\"drug addiction\", \"euphoria\").\n.output Answer"]}
{"id": 1867, "answer": false, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Anthony Quinn\", 7).\nHas_n_children(\"J.D. Salinger\", 0).\n.decl Answer()\nAnswer() :- Has_n_children(\"Anthony Quinn\", n_children1), Has_n_children(\"J.D. Salinger\", n_children2), n_children1 > n_children2.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Anthony Quinn\", 7).\nHas_n_children(\"J.D. Salinger\", 0).\n.decl Answer()\nAnswer() :- Has_n_children(\"Anthony Quinn\", n_children1), Has_n_children(\"J.D. Salinger\", n_children2), n_children1 > n_children2.\n.output Answer"]}
{"id": 1868, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Edgar Allan Poe\", 0).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Edgar Allan Poe\", net_worth), net_worth < 0.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Edgar Allan Poe\", 0).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Edgar Allan Poe\", net_worth), net_worth < 0.\n.output Answer"]}
{"id": 1869, "answer": true, "completion": ".decl Requires_gear(Activity:symbol, Gear:symbol)\nRequires_gear(\"capturing giant squid\", \"fishing net\").\n.decl Answer()\nAnswer() :- Requires_gear(\"capturing giant squid\", \"fishing net\").\n.output Answer", "completions": [".decl Requires_gear(Activity:symbol, Gear:symbol)\nRequires_gear(\"capturing giant squid\", \"fishing net\").\n.decl Answer()\nAnswer() :- Requires_gear(\"capturing giant squid\", \"fishing net\").\n.output Answer"]}
{"id": 1870, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"13th Amendment\", 3).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Little Women\", 7).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Little Women\", n_years1), Last_n_years(\"13th Amendment\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"13th Amendment\", 3).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Little Women\", 7).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Little Women\", n_years1), Last_n_years(\"13th Amendment\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1871, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Eric Clapton\", 1.75).\nHas_height(\"Eric Clapton's children\", 1.75).\nHas_height(\"Eric Clapton's children\", 1.8).\nHas_height(\"Eric Clapton's children\", 1.85).\n.decl Answer()\nAnswer() :- Has_height(person1, height1), Has_height(person2, height2), person1 != person2, height1 >= height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Eric Clapton\", 1.75).\nHas_height(\"Eric Clapton's children\", 1.75).\nHas_height(\"Eric Clapton's children\", 1.8).\nHas_height(\"Eric Clapton's children\", 1.85).\n.decl Answer()\nAnswer() :- Has_height(person1, height1), Has_height(person2, height2), person1 != person2, height1 >= height2.\n.output Answer"]}
{"id": 1872, "answer": false, "completion": ".decl Has_n_projects(Franchise:symbol, N_projects:float)\nHas_n_projects(\"Dragon Ball\", 12).\nHas_n_projects(\"Friday 13th\", 12).\n.decl Answer()\nAnswer() :- Has_n_projects(\"Dragon Ball\", n_projects1), Has_n_projects(\"Friday 13th\", n_projects2), n_projects1 < n_projects2.\n.output Answer", "completions": [".decl Has_n_projects(Franchise:symbol, N_projects:float)\nHas_n_projects(\"Dragon Ball\", 12).\nHas_n_projects(\"Friday 13th\", 12).\n.decl Answer()\nAnswer() :- Has_n_projects(\"Dragon Ball\", n_projects1), Has_n_projects(\"Friday 13th\", n_projects2), n_projects1 < n_projects2.\n.output Answer"]}
{"id": 1873, "answer": false, "completion": ".decl Has_vitamin(Food:symbol, Vitamin:symbol)\nHas_vitamin(\"lemonade\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Has_vitamin(\"lemonade\", \"Vitamin C\").\n.output Answer", "completions": [".decl Has_vitamin(Food:symbol, Vitamin:symbol)\nHas_vitamin(\"lemonade\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Has_vitamin(\"lemonade\", \"Vitamin C\").\n.output Answer"]}
{"id": 1874, "answer": true, "completion": ".decl Produces(Animal:symbol, Product:symbol)\nProduces(\"Bombyx mori\", \"silk\").\n.decl Answer()\nAnswer() :- Produces(animal, \"silk\"), not Produces(animal2, \"silk\"), animal != animal2.\n.output Answer", "completions": [".decl Produces(Animal:symbol, Product:symbol)\nProduces(\"Bombyx mori\", \"silk\").\n.decl Answer()\nAnswer() :- Produces(animal, \"silk\"), not Produces(animal2, \"silk\"), animal != animal2.\n.output Answer"]}
{"id": 1875, "answer": true, "completion": ".decl Crew_of(Mission:symbol, Crew_member:symbol)\nCrew_of(\"Apollo 15\", \"David R. Scott\").\nCrew_of(\"Apollo 15\", \"Alfred M. Worden\").\nCrew_of(\"Apollo 15\", \"James B. Irwin\").\n.decl Took_pictures_of(Crew_member:symbol, Location:symbol)\nTook_pictures_of(\"David R. Scott\", \"Mount Sharp\").\nTook_pictures_of(\"Alfred M. Worden\", \"Mount Sharp\").\nTook_pictures_of(\"James B. Irwin\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Crew_of(\"Apollo 15\", crew_member), Took_pictures_of(crew_member, \"Mount Sharp\").\n.output Answer", "completions": [".decl Crew_of(Mission:symbol, Crew_member:symbol)\nCrew_of(\"Apollo 15\", \"David R. Scott\").\nCrew_of(\"Apollo 15\", \"Alfred M. Worden\").\nCrew_of(\"Apollo 15\", \"James B. Irwin\").\n.decl Took_pictures_of(Crew_member:symbol, Location:symbol)\nTook_pictures_of(\"David R. Scott\", \"Mount Sharp\").\nTook_pictures_of(\"Alfred M. Worden\", \"Mount Sharp\").\nTook_pictures_of(\"James B. Irwin\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Crew_of(\"Apollo 15\", crew_member), Took_pictures_of(crew_member, \"Mount Sharp\").\n.output Answer"]}
{"id": 1876, "answer": true, "completion": ".decl Aldi_policy(Policy:symbol)\nAldi_policy(\"Bring your own bags\").\nAldi_policy(\"Pay for bags\").\n.decl Answer()\nAnswer() :- Aldi_policy(\"Bring your own bags\").\n.output Answer", "completions": [".decl Aldi_policy(Policy:symbol)\nAldi_policy(\"Bring your own bags\").\nAldi_policy(\"Pay for bags\").\n.decl Answer()\nAnswer() :- Aldi_policy(\"Bring your own bags\").\n.output Answer"]}
{"id": 1877, "answer": true, "completion": ".decl Can_sprint_100m_in_seconds(Person:symbol, Seconds:float)\nCan_sprint_100m_in_seconds(\"Usain Bolt\", 9.58).\n.decl Can_sprint_100m_in_seconds(Car:symbol, Seconds:float)\nCan_sprint_100m_in_seconds(\"Porsche 992 Turbo S\", 2.8).\n.decl Answer()\nAnswer() :- Can_sprint_100m_in_seconds(\"Usain Bolt\", seconds1), Can_sprint_100m_in_seconds(\"Porsche 992 Turbo S\", seconds2), seconds2 < seconds1.\n.output Answer", "completions": [".decl Can_sprint_100m_in_seconds(Person:symbol, Seconds:float)\nCan_sprint_100m_in_seconds(\"Usain Bolt\", 9.58).\n.decl Can_sprint_100m_in_seconds(Car:symbol, Seconds:float)\nCan_sprint_100m_in_seconds(\"Porsche 992 Turbo S\", 2.8).\n.decl Answer()\nAnswer() :- Can_sprint_100m_in_seconds(\"Usain Bolt\", seconds1), Can_sprint_100m_in_seconds(\"Porsche 992 Turbo S\", seconds2), seconds2 < seconds1.\n.output Answer"]}
{"id": 1878, "answer": false, "completion": ".decl Has_purpose(Object:symbol, Purpose:symbol)\nHas_purpose(\"curling brooms\", \"sweeping\").\nHas_purpose(\"house floors\", \"sweeping\").\n.decl Answer()\nAnswer() :- Has_purpose(\"curling brooms\", purpose1), Has_purpose(\"house floors\", purpose2), purpose1 = purpose2.\n.output Answer", "completions": [".decl Has_purpose(Object:symbol, Purpose:symbol)\nHas_purpose(\"curling brooms\", \"sweeping\").\nHas_purpose(\"house floors\", \"sweeping\").\n.decl Answer()\nAnswer() :- Has_purpose(\"curling brooms\", purpose1), Has_purpose(\"house floors\", purpose2), purpose1 = purpose2.\n.output Answer"]}
{"id": 1879, "answer": true, "completion": ".decl Has_lip_piercings(Person:symbol)\nHas_lip_piercings(\"John\").\n.decl Has_dental_bills(Person:symbol, Dental_bills:float)\nHas_dental_bills(\"John\", 100).\n.decl Answer()\nAnswer() :- Has_lip_piercings(person), Has_dental_bills(person, dental_bills), dental_bills > 0.\n.output Answer", "completions": [".decl Has_lip_piercings(Person:symbol)\nHas_lip_piercings(\"John\").\n.decl Has_dental_bills(Person:symbol, Dental_bills:float)\nHas_dental_bills(\"John\", 100).\n.decl Answer()\nAnswer() :- Has_lip_piercings(person), Has_dental_bills(person, dental_bills), dental_bills > 0.\n.output Answer"]}
{"id": 1880, "answer": true, "completion": ".decl Genre(Artist:symbol, Genre:symbol)\nGenre(\"ABBA\", \"disco\").\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"1970's\", 40).\n.decl Answer()\nAnswer() :- Genre(\"ABBA\", genre), Last_n_years(\"1970's\", n_years), n_years <= 40.\n.output Answer", "completions": [".decl Genre(Artist:symbol, Genre:symbol)\nGenre(\"ABBA\", \"disco\").\n.decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"1970's\", 40).\n.decl Answer()\nAnswer() :- Genre(\"ABBA\", genre), Last_n_years(\"1970's\", n_years), n_years <= 40.\n.output Answer"]}
{"id": 1881, "answer": true, "completion": ".decl Has_author(Work:symbol, Author:symbol)\nHas_author(\"The Catcher in the Rye\", \"J.D. Salinger\").\n.decl Has_influenced(Work:symbol, Person:symbol)\nHas_influenced(\"The Catcher in the Rye\", \"Mark David Chapman\").\nHas_influenced(\"The Catcher in the Rye\", \"John Hinckley\").\n.decl Answer()\nAnswer() :- Has_author(work, \"J.D. Salinger\"), Has_influenced(work, \"Mark David Chapman\").\nAnswer() :- Has_author(work, \"J.D. Salinger\"), Has_influenced(work, \"John Hinckley\").\n.output Answer", "completions": [".decl Has_author(Work:symbol, Author:symbol)\nHas_author(\"The Catcher in the Rye\", \"J.D. Salinger\").\n.decl Has_influenced(Work:symbol, Person:symbol)\nHas_influenced(\"The Catcher in the Rye\", \"Mark David Chapman\").\nHas_influenced(\"The Catcher in the Rye\", \"John Hinckley\").\n.decl Answer()\nAnswer() :- Has_author(work, \"J.D. Salinger\"), Has_influenced(work, \"Mark David Chapman\").\nAnswer() :- Has_author(work, \"J.D. Salinger\"), Has_influenced(work, \"John Hinckley\").\n.output Answer"]}
{"id": 1882, "answer": true, "completion": ".decl Uses_in_recipe(Ingredient:symbol, Recipe:symbol)\nUses_in_recipe(\"milk\", \"rice pudding\").\nUses_in_recipe(\"milk substitute\", \"rice pudding\").\n.decl Answer()\nAnswer() :- Uses_in_recipe(\"milk\", \"rice pudding\"), Uses_in_recipe(\"milk substitute\", \"rice pudding\").\n.output Answer", "completions": [".decl Uses_in_recipe(Ingredient:symbol, Recipe:symbol)\nUses_in_recipe(\"milk\", \"rice pudding\").\nUses_in_recipe(\"milk substitute\", \"rice pudding\").\n.decl Answer()\nAnswer() :- Uses_in_recipe(\"milk\", \"rice pudding\"), Uses_in_recipe(\"milk substitute\", \"rice pudding\").\n.output Answer"]}
{"id": 1883, "answer": true, "completion": ".decl Is_on_calendar(Animal:symbol, Calendar:symbol)\nIs_on_calendar(\"snake\", \"Chinese New Year\").\nIs_on_calendar(\"rabbit\", \"Chinese New Year\").\nIs_on_calendar(\"dragon\", \"Chinese New Year\").\nIs_on_calendar(\"goat\", \"Chinese New Year\").\nIs_on_calendar(\"monkey\", \"Chinese New Year\").\nIs_on_calendar(\"rooster\", \"Chinese New Year\").\nIs_on_calendar(\"dog\", \"Chinese New Year\").\nIs_on_calendar(\"pig\", \"Chinese New Year\").\n.decl Answer()\nAnswer() :- Is_on_calendar(\"mollusk\", \"Chinese New Year\").\n.output Answer", "completions": [".decl Is_on_calendar(Animal:symbol, Calendar:symbol)\nIs_on_calendar(\"snake\", \"Chinese New Year\").\nIs_on_calendar(\"rabbit\", \"Chinese New Year\").\nIs_on_calendar(\"dragon\", \"Chinese New Year\").\nIs_on_calendar(\"goat\", \"Chinese New Year\").\nIs_on_calendar(\"monkey\", \"Chinese New Year\").\nIs_on_calendar(\"rooster\", \"Chinese New Year\").\nIs_on_calendar(\"dog\", \"Chinese New Year\").\nIs_on_calendar(\"pig\", \"Chinese New Year\").\n.decl Answer()\nAnswer() :- Is_on_calendar(\"mollusk\", \"Chinese New Year\").\n.output Answer"]}
{"id": 1884, "answer": true, "completion": ".decl Is_present(Person:symbol, Event:symbol)\nIs_present(\"Gandalf\", \"death of Eomer\").\n.decl Answer()\nAnswer() :- Is_present(\"Gandalf\", \"death of Eomer\").\n.output Answer", "completions": [".decl Is_present(Person:symbol, Event:symbol)\nIs_present(\"Gandalf\", \"death of Eomer\").\n.decl Answer()\nAnswer() :- Is_present(\"Gandalf\", \"death of Eomer\").\n.output Answer"]}
{"id": 1885, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"burial of women in the Panthéon\", 17).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Neptunian orbit\", 164.79).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Neptunian orbit\", n_years1), Last_n_years(\"burial of women in the Panthéon\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"burial of women in the Panthéon\", 17).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Neptunian orbit\", 164.79).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Neptunian orbit\", n_years1), Last_n_years(\"burial of women in the Panthéon\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1886, "answer": false, "completion": ".decl Has_disorder(Person:symbol, Disorder:symbol)\nHas_disorder(\"person1\", \"bipolar disorder\").\nHas_disorder(\"person2\", \"bipolar disorder\").\nHas_disorder(\"person3\", \"bipolar disorder\").\nHas_disorder(\"person4\", \"bipolar disorder\").\nHas_disorder(\"person5\", \"bipolar disorder\").\nHas_disorder(\"person6\", \"bipolar disorder\").\nHas_disorder(\"person7\", \"bipolar disorder\").\nHas_disorder(\"person8\", \"bipolar disorder\").\nHas_disorder(\"person9\", \"bipolar disorder\").\nHas_disorder(\"person10\", \"bipolar disorder\").\nHas_disorder(\"person11\", \"bipolar disorder\").\nHas_disorder(\"person12\", \"bipolar disorder\").\nHas_disorder(\"person13\", \"bipolar disorder\").\nHas_disorder(\"person14\", \"bipolar disorder\").\nHas_disorder(\"person15\", \"bipolar disorder\").\nHas_disorder(\"person16\", \"bipolar disorder\").\nHas_disorder(\"person17\", \"bipolar disorder\").\nHas_disorder(\"person18\", \"bipolar disorder\").\nHas_disorder(\"person19\", \"bipolar disorder\").\nHas_disorder(\"person20\", \"bipolar disorder\").\nHas_disorder(\"person21\", \"bipolar disorder\").\nHas_disorder(\"person22\", \"bipolar disorder\").\nHas_disorder(\"person23\", \"bipolar disorder\").\nHas_disorder(\"person24\", \"bipolar disorder\").\nHas_disorder(\"person25\", \"bipolar disorder\").\nHas_disorder(\"person26\", \"bipolar disorder\").\nHas_disorder(\"person27\", \"bipolar disorder\").\nHas_disorder(\"person28\", \"bipolar disorder\").\nHas_disorder(\"person29\", \"bipolar disorder\").\nHas_disorder(\"person30\", \"bipolar disorder\").\nHas_disorder(\"person31\", \"bipolar disorder\").\nHas_disorder(\"person32\", \"bipolar disorder\").\nHas_disorder(\"person33\", \"bipolar disorder\").\nHas_disorder(\"person34\", \"bipolar disorder\").\nHas_disorder(\"person35\", \"bipolar disorder\").\nHas_disorder(\"person36\", \"bipolar disorder\").\nHas_disorder(\"person37\", \"bipolar disorder\").\nHas_disorder(\"person38\", \"bipolar disorder\").\nHas_disorder(\"person39\", \"bipolar disorder\").\nHas_disorder(\"person40\", \"bipolar disorder\").\nHas_disorder(\"person41\", \"bipolar disorder\").\nHas_disorder(\"person42\", \"bipolar disorder\").\nHas_disorder(\"person43\", \"bipolar disorder\").\nHas_disorder(\"person44\", \"bipolar disorder\").\nHas_disorder(\"person45\", \"bipolar disorder\").\nHas_disorder(\"person46\", \"bipolar disorder\").\nHas_disorder(\"person47\", \"bipolar disorder\").\nHas_disorder(\"person48\", \"bipolar disorder\").\nHas_disorder(\"person49\", \"bipolar disorder\").\nHas_disorder(\"person50\", \"bipolar disorder\").\nHas_disorder(\"person51\", \"bipolar disorder\").\nHas_disorder(\"person52\", \"bipolar disorder\").\nHas_disorder(\"person53\", \"bipolar disorder\").\nHas_disorder(\"person54\", \"bipolar disorder\").\nHas_disorder(\"person55\", \"bipolar disorder\").\nHas_disorder(\"person56\", \"bipolar disorder", "completions": [".decl Has_disorder(Person:symbol, Disorder:symbol)\nHas_disorder(\"person1\", \"bipolar disorder\").\nHas_disorder(\"person2\", \"bipolar disorder\").\nHas_disorder(\"person3\", \"bipolar disorder\").\nHas_disorder(\"person4\", \"bipolar disorder\").\nHas_disorder(\"person5\", \"bipolar disorder\").\nHas_disorder(\"person6\", \"bipolar disorder\").\nHas_disorder(\"person7\", \"bipolar disorder\").\nHas_disorder(\"person8\", \"bipolar disorder\").\nHas_disorder(\"person9\", \"bipolar disorder\").\nHas_disorder(\"person10\", \"bipolar disorder\").\nHas_disorder(\"person11\", \"bipolar disorder\").\nHas_disorder(\"person12\", \"bipolar disorder\").\nHas_disorder(\"person13\", \"bipolar disorder\").\nHas_disorder(\"person14\", \"bipolar disorder\").\nHas_disorder(\"person15\", \"bipolar disorder\").\nHas_disorder(\"person16\", \"bipolar disorder\").\nHas_disorder(\"person17\", \"bipolar disorder\").\nHas_disorder(\"person18\", \"bipolar disorder\").\nHas_disorder(\"person19\", \"bipolar disorder\").\nHas_disorder(\"person20\", \"bipolar disorder\").\nHas_disorder(\"person21\", \"bipolar disorder\").\nHas_disorder(\"person22\", \"bipolar disorder\").\nHas_disorder(\"person23\", \"bipolar disorder\").\nHas_disorder(\"person24\", \"bipolar disorder\").\nHas_disorder(\"person25\", \"bipolar disorder\").\nHas_disorder(\"person26\", \"bipolar disorder\").\nHas_disorder(\"person27\", \"bipolar disorder\").\nHas_disorder(\"person28\", \"bipolar disorder\").\nHas_disorder(\"person29\", \"bipolar disorder\").\nHas_disorder(\"person30\", \"bipolar disorder\").\nHas_disorder(\"person31\", \"bipolar disorder\").\nHas_disorder(\"person32\", \"bipolar disorder\").\nHas_disorder(\"person33\", \"bipolar disorder\").\nHas_disorder(\"person34\", \"bipolar disorder\").\nHas_disorder(\"person35\", \"bipolar disorder\").\nHas_disorder(\"person36\", \"bipolar disorder\").\nHas_disorder(\"person37\", \"bipolar disorder\").\nHas_disorder(\"person38\", \"bipolar disorder\").\nHas_disorder(\"person39\", \"bipolar disorder\").\nHas_disorder(\"person40\", \"bipolar disorder\").\nHas_disorder(\"person41\", \"bipolar disorder\").\nHas_disorder(\"person42\", \"bipolar disorder\").\nHas_disorder(\"person43\", \"bipolar disorder\").\nHas_disorder(\"person44\", \"bipolar disorder\").\nHas_disorder(\"person45\", \"bipolar disorder\").\nHas_disorder(\"person46\", \"bipolar disorder\").\nHas_disorder(\"person47\", \"bipolar disorder\").\nHas_disorder(\"person48\", \"bipolar disorder\").\nHas_disorder(\"person49\", \"bipolar disorder\").\nHas_disorder(\"person50\", \"bipolar disorder\").\nHas_disorder(\"person51\", \"bipolar disorder\").\nHas_disorder(\"person52\", \"bipolar disorder\").\nHas_disorder(\"person53\", \"bipolar disorder\").\nHas_disorder(\"person54\", \"bipolar disorder\").\nHas_disorder(\"person55\", \"bipolar disorder\").\nHas_disorder(\"person56\", \"bipolar disorder"]}
{"id": 1887, "answer": false, "completion": ".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Debra Marshall\", 130).\nHas_weight(\"Kristin Feres\", 120).\nHas_weight(\"Jeanie Clarke\", 120).\n.decl Has_capacity(Car:symbol, Capacity:float)\nHas_capacity(\"Audi TT\", 2).\n.decl Answer()\nAnswer() :- Has_weight(\"Debra Marshall\", weight1), Has_weight(\"Kristin Feres\", weight2), Has_weight(\"Jeanie Clarke\", weight3), Has_capacity(\"Audi TT\", capacity), weight1 + weight2 + weight3 <= capacity.\n.output Answer", "completions": [".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"Debra Marshall\", 130).\nHas_weight(\"Kristin Feres\", 120).\nHas_weight(\"Jeanie Clarke\", 120).\n.decl Has_capacity(Car:symbol, Capacity:float)\nHas_capacity(\"Audi TT\", 2).\n.decl Answer()\nAnswer() :- Has_weight(\"Debra Marshall\", weight1), Has_weight(\"Kristin Feres\", weight2), Has_weight(\"Jeanie Clarke\", weight3), Has_capacity(\"Audi TT\", capacity), weight1 + weight2 + weight3 <= capacity.\n.output Answer"]}
{"id": 1888, "answer": true, "completion": ".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"NBA game\", 2).\n.decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"Six-Day War\", 6).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"NBA game\", n_hours1), Lasts_n_days(\"Six-Day War\", n_days2), n_hours1 <= n_days2 * 24.\n.output Answer", "completions": [".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"NBA game\", 2).\n.decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"Six-Day War\", 6).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"NBA game\", n_hours1), Lasts_n_days(\"Six-Day War\", n_days2), n_hours1 <= n_days2 * 24.\n.output Answer"]}
{"id": 1889, "answer": true, "completion": ".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Aeroflot\", \"Europe\").\n.decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Ivan the Terrible\", \"Ivan the Terrible\").\n.decl Answer()\nAnswer() :- Flies_to(airline, \"Europe\"), Has_name(\"Ivan the Terrible\", name), airline = \"Aeroflot\".\n.output Answer", "completions": [".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Aeroflot\", \"Europe\").\n.decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Ivan the Terrible\", \"Ivan the Terrible\").\n.decl Answer()\nAnswer() :- Flies_to(airline, \"Europe\"), Has_name(\"Ivan the Terrible\", name), airline = \"Aeroflot\".\n.output Answer"]}
{"id": 1890, "answer": true, "completion": ".decl Has_topic(Book:symbol, Topic:symbol)\nHas_topic(\"TMNT coloring book\", \"TMNT\").\nHas_topic(\"TMNT coloring book\", \"pizza\").\n.decl Answer()\nAnswer() :- Has_topic(\"TMNT coloring book\", \"pizza\").\n.output Answer", "completions": [".decl Has_topic(Book:symbol, Topic:symbol)\nHas_topic(\"TMNT coloring book\", \"TMNT\").\nHas_topic(\"TMNT coloring book\", \"pizza\").\n.decl Answer()\nAnswer() :- Has_topic(\"TMNT coloring book\", \"pizza\").\n.output Answer"]}
{"id": 1891, "answer": true, "completion": ".decl Is_theory(Theory:symbol)\nIs_theory(\"theory of cultural hegemony\").\n.decl Explains(Theory:symbol, Event:symbol)\nExplains(\"theory of cultural hegemony\", \"global warming\").\n.decl Answer()\nAnswer() :- Is_theory(theory), Explains(theory, \"global warming\").\n.output Answer", "completions": [".decl Is_theory(Theory:symbol)\nIs_theory(\"theory of cultural hegemony\").\n.decl Explains(Theory:symbol, Event:symbol)\nExplains(\"theory of cultural hegemony\", \"global warming\").\n.decl Answer()\nAnswer() :- Is_theory(theory), Explains(theory, \"global warming\").\n.output Answer"]}
{"id": 1892, "answer": false, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"kayaks\", \"ocean\").\nHappens_in_location(\"kayaks\", \"river\").\nHappens_in_location(\"summit of Mount Everest\", \"Himalayas\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"kayaks\", \"Himalayas\").\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"kayaks\", \"ocean\").\nHappens_in_location(\"kayaks\", \"river\").\nHappens_in_location(\"summit of Mount Everest\", \"Himalayas\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"kayaks\", \"Himalayas\").\n.output Answer"]}
{"id": 1893, "answer": true, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Christmas\", \"Sunday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Christmas\", day), day = \"Sunday\".\n.output Answer", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Christmas\", \"Sunday\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Christmas\", day), day = \"Sunday\".\n.output Answer"]}
{"id": 1894, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Swan Lake performance\", \"theater\").\nHappens_in_place(\"drowning\", \"water\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Swan Lake performance\", place1), Happens_in_place(\"drowning\", place2), place1 != place2.\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Swan Lake performance\", \"theater\").\nHappens_in_place(\"drowning\", \"water\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Swan Lake performance\", place1), Happens_in_place(\"drowning\", place2), place1 != place2.\n.output Answer"]}
{"id": 1895, "answer": true, "completion": ".decl Has_nationality(Person:symbol, Nationality:symbol)\nHas_nationality(\"Serj Tankian\", \"Armenian\").\nHas_nationality(\"Daron Malakian\", \"Armenian\").\nHas_nationality(\"Shavo Odadjian\", \"Armenian\").\nHas_nationality(\"John Dolmayan\", \"Armenian\").\nHas_nationality(\"Serj Tankian\", \"American\").\nHas_nationality(\"Daron Malakian\", \"American\").\nHas_nationality(\"Shavo Odadjian\", \"American\").\nHas_nationality(\"John Dolmayan\", \"American\").\n.decl Dislike(Person:symbol, Band:symbol)\nDislike(\"Serj Tankian\", \"System of a Down\").\nDislike(\"Daron Malakian\", \"System of a Down\").\nDislike(\"Shavo Odadjian\", \"System of a Down\").\nDislike(\"John Dolmayan\", \"System of a Down\").\n.decl Answer()\nAnswer() :- Has_nationality(person, \"Armenian\"), Dislike(person, \"System of a Down\").\n.output Answer", "completions": [".decl Has_nationality(Person:symbol, Nationality:symbol)\nHas_nationality(\"Serj Tankian\", \"Armenian\").\nHas_nationality(\"Daron Malakian\", \"Armenian\").\nHas_nationality(\"Shavo Odadjian\", \"Armenian\").\nHas_nationality(\"John Dolmayan\", \"Armenian\").\nHas_nationality(\"Serj Tankian\", \"American\").\nHas_nationality(\"Daron Malakian\", \"American\").\nHas_nationality(\"Shavo Odadjian\", \"American\").\nHas_nationality(\"John Dolmayan\", \"American\").\n.decl Dislike(Person:symbol, Band:symbol)\nDislike(\"Serj Tankian\", \"System of a Down\").\nDislike(\"Daron Malakian\", \"System of a Down\").\nDislike(\"Shavo Odadjian\", \"System of a Down\").\nDislike(\"John Dolmayan\", \"System of a Down\").\n.decl Answer()\nAnswer() :- Has_nationality(person, \"Armenian\"), Dislike(person, \"System of a Down\").\n.output Answer"]}
{"id": 1896, "answer": false, "completion": ".decl Has_n_members(Team:symbol, N_members:float)\nHas_n_members(\"Powerpuff Girls\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Powerpuff Girls\", n_members), n_members = 3.\n.output Answer", "completions": [".decl Has_n_members(Team:symbol, N_members:float)\nHas_n_members(\"Powerpuff Girls\", 3).\n.decl Answer()\nAnswer() :- Has_n_members(\"Powerpuff Girls\", n_members), n_members = 3.\n.output Answer"]}
{"id": 1897, "answer": false, "completion": ".decl Has_duration(Song:symbol, Duration:float)\nHas_duration(\"song\", 3).\n.decl Answer()\nAnswer() :- Has_duration(\"song\", duration1), 365*24*60*60 >= duration1.\n.output Answer", "completions": [".decl Has_duration(Song:symbol, Duration:float)\nHas_duration(\"song\", 3).\n.decl Answer()\nAnswer() :- Has_duration(\"song\", duration1), 365*24*60*60 >= duration1.\n.output Answer"]}
{"id": 1898, "answer": true, "completion": ".decl Wrote_music(Artist:symbol, Genre:symbol)\nWrote_music(\"The Beatles\", \"Rock\").\nWrote_music(\"The Beatles\", \"Pop\").\nWrote_music(\"The Beatles\", \"Folk\").\n.decl Answer()\nAnswer() :- Wrote_music(\"The Beatles\", \"Disco\").\n.output Answer", "completions": [".decl Wrote_music(Artist:symbol, Genre:symbol)\nWrote_music(\"The Beatles\", \"Rock\").\nWrote_music(\"The Beatles\", \"Pop\").\nWrote_music(\"The Beatles\", \"Folk\").\n.decl Answer()\nAnswer() :- Wrote_music(\"The Beatles\", \"Disco\").\n.output Answer"]}
{"id": 1899, "answer": true, "completion": ".decl Has_n_polygons(Game:symbol, N_polygons:float)\nHas_n_polygons(\"Super Mario Bros.\", 256).\nHas_n_polygons(\"Metroid\", 256).\n.decl Answer()\nAnswer() :- Has_n_polygons(\"Metroid\", n_polygons1), Has_n_polygons(\"Super Mario Bros.\", n_polygons2), n_polygons1 > n_polygons2.\n.output Answer", "completions": [".decl Has_n_polygons(Game:symbol, N_polygons:float)\nHas_n_polygons(\"Super Mario Bros.\", 256).\nHas_n_polygons(\"Metroid\", 256).\n.decl Answer()\nAnswer() :- Has_n_polygons(\"Metroid\", n_polygons1), Has_n_polygons(\"Super Mario Bros.\", n_polygons2), n_polygons1 > n_polygons2.\n.output Answer"]}
{"id": 1900, "answer": true, "completion": ".decl Is_angrier(Organization:symbol, Animal_A:symbol, Animal_B:symbol)\nIs_angrier(\"WWF\", \"koala\", \"black swan\").\n.decl Answer()\nAnswer() :- Is_angrier(\"WWF\", animal1, animal2).\n.output Answer", "completions": [".decl Is_angrier(Organization:symbol, Animal_A:symbol, Animal_B:symbol)\nIs_angrier(\"WWF\", \"koala\", \"black swan\").\n.decl Answer()\nAnswer() :- Is_angrier(\"WWF\", animal1, animal2).\n.output Answer"]}
{"id": 1901, "answer": false, "completion": ".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Hodor\", 50).\n.decl Answer()\nAnswer() :- Has_IQ(\"Hodor\", iq), iq < 100.\n.output Answer", "completions": [".decl Has_IQ(Person:symbol, IQ:float)\nHas_IQ(\"Hodor\", 50).\n.decl Answer()\nAnswer() :- Has_IQ(\"Hodor\", iq), iq < 100.\n.output Answer"]}
{"id": 1902, "answer": true, "completion": ".decl Plays_role(Actor:symbol, Role:symbol, Movie:symbol)\nPlays_role(\"Keith Richards\", \"Captain Jack Sparrow\", \"Pirates of the Caribbean: At World's End\").\n.decl Answer()\nAnswer() :- Plays_role(\"Keith Richards\", \"Captain Jack Sparrow\", \"Pirates of the Caribbean: At World's End\").\n.output Answer", "completions": [".decl Plays_role(Actor:symbol, Role:symbol, Movie:symbol)\nPlays_role(\"Keith Richards\", \"Captain Jack Sparrow\", \"Pirates of the Caribbean: At World's End\").\n.decl Answer()\nAnswer() :- Plays_role(\"Keith Richards\", \"Captain Jack Sparrow\", \"Pirates of the Caribbean: At World's End\").\n.output Answer"]}
{"id": 1903, "answer": true, "completion": ".decl Has_rivalry(God1:symbol, God2:symbol)\nHas_rivalry(\"Ahura Mazda\", \"Zeus\").\n.decl Answer()\nAnswer() :- Has_rivalry(\"Ahura Mazda\", \"Zeus\").\n.output Answer", "completions": [".decl Has_rivalry(God1:symbol, God2:symbol)\nHas_rivalry(\"Ahura Mazda\", \"Zeus\").\n.decl Answer()\nAnswer() :- Has_rivalry(\"Ahura Mazda\", \"Zeus\").\n.output Answer"]}
{"id": 1904, "answer": false, "completion": ".decl Has_capacity(Object:symbol, Capacity:float)\nHas_capacity(\"Tata Hexa\", 7).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tata Hexa\", capacity), Has_n_members(\"Spice Girls\", n_members), capacity >= n_members.\n.output Answer", "completions": [".decl Has_capacity(Object:symbol, Capacity:float)\nHas_capacity(\"Tata Hexa\", 7).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tata Hexa\", capacity), Has_n_members(\"Spice Girls\", n_members), capacity >= n_members.\n.output Answer"]}
{"id": 1905, "answer": true, "completion": ".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Judith Sheindlin\", \"judge\").\nHas_occupation(\"John Edgar Thomson\", \"engineer\").\n.decl Has_nationality(Person:symbol, Nationality:symbol)\nHas_nationality(\"Judith Sheindlin\", \"American\").\nHas_nationality(\"John Edgar Thomson\", \"American\").\n.decl Answer()\nAnswer() :- Has_occupation(\"John Edgar Thomson\", \"engineer\"), Has_occupation(\"Judith Sheindlin\", \"judge\"), Has_nationality(\"John Edgar Thomson\", \"American\"), Has_nationality(\"Judith Sheindlin\", \"American\").\n.output Answer", "completions": [".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Judith Sheindlin\", \"judge\").\nHas_occupation(\"John Edgar Thomson\", \"engineer\").\n.decl Has_nationality(Person:symbol, Nationality:symbol)\nHas_nationality(\"Judith Sheindlin\", \"American\").\nHas_nationality(\"John Edgar Thomson\", \"American\").\n.decl Answer()\nAnswer() :- Has_occupation(\"John Edgar Thomson\", \"engineer\"), Has_occupation(\"Judith Sheindlin\", \"judge\"), Has_nationality(\"John Edgar Thomson\", \"American\"), Has_nationality(\"Judith Sheindlin\", \"American\").\n.output Answer"]}
{"id": 1906, "answer": true, "completion": ".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"Toyota Supra\", \"vlog\").\n.decl Answer()\nAnswer() :- Has_feature(\"Toyota Supra\", \"vlog\").\n.output Answer", "completions": [".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"Toyota Supra\", \"vlog\").\n.decl Answer()\nAnswer() :- Has_feature(\"Toyota Supra\", \"vlog\").\n.output Answer"]}
{"id": 1907, "answer": true, "completion": ".decl Knows(Person:symbol, Thing:symbol)\nKnows(\"grand master\", \"French Defense\").\n.decl Answer()\nAnswer() :- Knows(\"grand master\", \"French Defense\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Thing:symbol)\nKnows(\"grand master\", \"French Defense\").\n.decl Answer()\nAnswer() :- Knows(\"grand master\", \"French Defense\").\n.output Answer"]}
{"id": 1908, "answer": false, "completion": ".decl Has_relationship(Country:symbol, Person:symbol)\nHas_relationship(\"Canada\", \"Elizabeth II\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Canada\", monarch).\n.output Answer", "completions": [".decl Has_relationship(Country:symbol, Person:symbol)\nHas_relationship(\"Canada\", \"Elizabeth II\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Canada\", monarch).\n.output Answer"]}
{"id": 1909, "answer": false, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Pict\", \"Pictish\").\nSpeaks(\"Old English speaker\", \"Old English\").\n.decl Answer()\nAnswer() :- Speaks(\"Pict\", \"Old English\").\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"Pict\", \"Pictish\").\nSpeaks(\"Old English speaker\", \"Old English\").\n.decl Answer()\nAnswer() :- Speaks(\"Pict\", \"Old English\").\n.output Answer"]}
{"id": 1910, "answer": false, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 1911, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"garfield\", \"canid\").\nEats(\"garfield\", \"cat\").\n.decl Answer()\nAnswer() :- Eats(\"garfield\", \"canid\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"garfield\", \"canid\").\nEats(\"garfield\", \"cat\").\n.decl Answer()\nAnswer() :- Eats(\"garfield\", \"canid\").\n.output Answer"]}
{"id": 1912, "answer": false, "completion": ".decl Has_armor(Animal:symbol, Armor:symbol)\nHas_armor(\"armadillo\", \"shell\").\n.decl Has_armor(Animal:symbol, Armor:symbol)\nHas_armor(\"armadillo\", \"scales\").\n.decl Answer()\nAnswer() :- Has_armor(\"armadillo\", \"shell\").\nAnswer() :- Has_armor(\"armadillo\", \"scales\").\n.output Answer", "completions": [".decl Has_armor(Animal:symbol, Armor:symbol)\nHas_armor(\"armadillo\", \"shell\").\n.decl Has_armor(Animal:symbol, Armor:symbol)\nHas_armor(\"armadillo\", \"scales\").\n.decl Answer()\nAnswer() :- Has_armor(\"armadillo\", \"shell\").\nAnswer() :- Has_armor(\"armadillo\", \"scales\").\n.output Answer"]}
{"id": 1913, "answer": true, "completion": ".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"Italian restaurant\", \"meatballs\").\n.decl Origin(Dish:symbol, Country:symbol)\nOrigin(\"meatballs\", \"Sweden\").\n.decl Answer()\nAnswer() :- Serves(\"Italian restaurant\", \"meatballs\"), Origin(\"meatballs\", \"Sweden\"), !Serves(\"Italian restaurant\", dish), Origin(dish, \"Italy\").\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"Italian restaurant\", \"meatballs\").\n.decl Origin(Dish:symbol, Country:symbol)\nOrigin(\"meatballs\", \"Sweden\").\n.decl Answer()\nAnswer() :- Serves(\"Italian restaurant\", \"meatballs\"), Origin(\"meatballs\", \"Sweden\"), !Serves(\"Italian restaurant\", dish), Origin(dish, \"Italy\").\n.output Answer"]}
{"id": 1914, "answer": false, "completion": ".decl Protects(Bone:symbol, Body_part:symbol)\nProtects(\"ribs\", \"torso\").\nProtects(\"pelvis\", \"torso\").\n.decl Answer()\nAnswer() :- Protects(bone1, \"torso\"), Protects(bone2, \"torso\"), bone1 != bone2.\n.output Answer", "completions": [".decl Protects(Bone:symbol, Body_part:symbol)\nProtects(\"ribs\", \"torso\").\nProtects(\"pelvis\", \"torso\").\n.decl Answer()\nAnswer() :- Protects(bone1, \"torso\"), Protects(bone2, \"torso\"), bone1 != bone2.\n.output Answer"]}
{"id": 1915, "answer": true, "completion": ".decl Has_upload_speed(Plan:symbol, Upload_speed:float)\nHas_upload_speed(\"Centurylink max internet plan\", 1000).\n.decl Answer()\nAnswer() :- Has_upload_speed(\"Centurylink max internet plan\", upload_speed), upload_speed * 60 * 60 * 24 * 14 <= 1000.\n.output Answer", "completions": [".decl Has_upload_speed(Plan:symbol, Upload_speed:float)\nHas_upload_speed(\"Centurylink max internet plan\", 1000).\n.decl Answer()\nAnswer() :- Has_upload_speed(\"Centurylink max internet plan\", upload_speed), upload_speed * 60 * 60 * 24 * 14 <= 1000.\n.output Answer"]}
{"id": 1916, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Theodor Geisel\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"Theodor Geisel\", \"green\").\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Theodor Geisel\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"Theodor Geisel\", \"green\").\n.output Answer"]}
{"id": 1917, "answer": true, "completion": ".decl Is_on_island(Place:symbol, Island:symbol)\nIs_on_island(\"Central Park Zoo\", \"Manhattan\").\n.decl Answer()\nAnswer() :- Is_on_island(\"Central Park Zoo\", \"Manhattan\").\n.output Answer", "completions": [".decl Is_on_island(Place:symbol, Island:symbol)\nIs_on_island(\"Central Park Zoo\", \"Manhattan\").\n.decl Answer()\nAnswer() :- Is_on_island(\"Central Park Zoo\", \"Manhattan\").\n.output Answer"]}
{"id": 1918, "answer": true, "completion": ".decl Can_tell(Organization:symbol, University:symbol)\nCan_tell(\"Planned Parenthood\", \"University of Pennsylvania\").\n.decl Answer()\nAnswer() :- Can_tell(\"Planned Parenthood\", \"University of Pennsylvania\").\n.output Answer", "completions": [".decl Can_tell(Organization:symbol, University:symbol)\nCan_tell(\"Planned Parenthood\", \"University of Pennsylvania\").\n.decl Answer()\nAnswer() :- Can_tell(\"Planned Parenthood\", \"University of Pennsylvania\").\n.output Answer"]}
{"id": 1919, "answer": true, "completion": ".decl Has_state_capital(State:symbol, Capital:symbol)\nHas_state_capital(\"Guam\", \"Hagatna\").\n.decl Answer()\nAnswer() :- Has_state_capital(\"Guam\", capital).\n.output Answer", "completions": [".decl Has_state_capital(State:symbol, Capital:symbol)\nHas_state_capital(\"Guam\", \"Hagatna\").\n.decl Answer()\nAnswer() :- Has_state_capital(\"Guam\", capital).\n.output Answer"]}
{"id": 1920, "answer": false, "completion": ".decl Has_n_lines(Poem:symbol, N_lines:float)\nHas_n_lines(\"Jabberwocky\", 14).\n.decl Has_n_syllables(Line:symbol, N_syllables:float)\nHas_n_syllables(\"'Twas brillig, and the slithy toves\", 12).\nHas_n_syllables(\"Did gyre and gimble in the wabe:\", 8).\nHas_n_syllables(\"All mimsy were the borogoves,\", 11).\nHas_n_syllables(\"And the mome raths outgrabe.\", 10).\nHas_n_syllables(\"\\\"Beware the Jabberwock, my son!\", 12).\nHas_n_syllables(\"The jaws that bite, the claws that catch!\", 12).\nHas_n_syllables(\"Beware the Jubjub bird, and shun\", 12).\nHas_n_syllables(\"The frumious Bandersnatch!\\\"\", 12).\nHas_n_syllables(\"He took his vorpal sword in hand:\", 10).\nHas_n_syllables(\"Long time the manxome foe he sought--\", 12).\nHas_n_syllables(\"So rested he by the Tumtum tree\", 12).\nHas_n_syllables(\"And stood awhile in thought.\", 10).\nHas_n_syllables(\"And, as in uffish thought he stood,\", 12).\nHas_n_syllables(\"The Jabberwock, with eyes of flame,\", 12).\nHas_n_syllables(\"Came whiffling through the tulgey wood,\", 12).\nHas_n_syllables(\"And burbled as it came!\", 10).\nHas_n_syllables(\"One, two! One, two! And through and through\", 12).\nHas_n_syllables(\"The vorpal blade went snicker-snack!\", 12).\nHas_n_syllables(\"He left it dead, and with its head\", 12).\nHas_n_syllables(\"He went galumphing back.\", 10).\nHas_n_syllables(\"\\\"And hast thou slain the Jabberwock?\\\"\", 12).\nHas_n_syllables(\"Come to my arms, my beamish boy!\", 12).\nHas_n_syllables(\"O frabjous day! Callooh! Callay!\\\"\", 12).\nHas_n_syllables(\"He chortled in his joy.\", 10).\n.decl Answer()\nAnswer() :- Has_n_lines(\"Jabberwocky\", n_lines), Has_n_syllables(line, n_syllables), n_lines = 14, n_syllables = 10.\nAnswer() :- Has_n_lines(\"Jabberwocky\", n_lines), Has_n_syllables(line, n_syllables), n_lines = 14, n_syllables = 12.\n.output Answer", "completions": [".decl Has_n_lines(Poem:symbol, N_lines:float)\nHas_n_lines(\"Jabberwocky\", 14).\n.decl Has_n_syllables(Line:symbol, N_syllables:float)\nHas_n_syllables(\"'Twas brillig, and the slithy toves\", 12).\nHas_n_syllables(\"Did gyre and gimble in the wabe:\", 8).\nHas_n_syllables(\"All mimsy were the borogoves,\", 11).\nHas_n_syllables(\"And the mome raths outgrabe.\", 10).\nHas_n_syllables(\"\\\"Beware the Jabberwock, my son!\", 12).\nHas_n_syllables(\"The jaws that bite, the claws that catch!\", 12).\nHas_n_syllables(\"Beware the Jubjub bird, and shun\", 12).\nHas_n_syllables(\"The frumious Bandersnatch!\\\"\", 12).\nHas_n_syllables(\"He took his vorpal sword in hand:\", 10).\nHas_n_syllables(\"Long time the manxome foe he sought--\", 12).\nHas_n_syllables(\"So rested he by the Tumtum tree\", 12).\nHas_n_syllables(\"And stood awhile in thought.\", 10).\nHas_n_syllables(\"And, as in uffish thought he stood,\", 12).\nHas_n_syllables(\"The Jabberwock, with eyes of flame,\", 12).\nHas_n_syllables(\"Came whiffling through the tulgey wood,\", 12).\nHas_n_syllables(\"And burbled as it came!\", 10).\nHas_n_syllables(\"One, two! One, two! And through and through\", 12).\nHas_n_syllables(\"The vorpal blade went snicker-snack!\", 12).\nHas_n_syllables(\"He left it dead, and with its head\", 12).\nHas_n_syllables(\"He went galumphing back.\", 10).\nHas_n_syllables(\"\\\"And hast thou slain the Jabberwock?\\\"\", 12).\nHas_n_syllables(\"Come to my arms, my beamish boy!\", 12).\nHas_n_syllables(\"O frabjous day! Callooh! Callay!\\\"\", 12).\nHas_n_syllables(\"He chortled in his joy.\", 10).\n.decl Answer()\nAnswer() :- Has_n_lines(\"Jabberwocky\", n_lines), Has_n_syllables(line, n_syllables), n_lines = 14, n_syllables = 10.\nAnswer() :- Has_n_lines(\"Jabberwocky\", n_lines), Has_n_syllables(line, n_syllables), n_lines = 14, n_syllables = 12.\n.output Answer"]}
{"id": 1921, "answer": true, "completion": ".decl Passes_through(Person:symbol, Circle:symbol)\nPasses_through(\"Dante\", \"circle of lust\").\n.decl Is_located_in(Person:symbol, Circle:symbol)\nIs_located_in(\"Saladin\", \"circle of lust\").\n.decl Answer()\nAnswer() :- Passes_through(\"Dante\", \"circle of lust\"), Is_located_in(\"Saladin\", \"circle of lust\").\n.output Answer", "completions": [".decl Passes_through(Person:symbol, Circle:symbol)\nPasses_through(\"Dante\", \"circle of lust\").\n.decl Is_located_in(Person:symbol, Circle:symbol)\nIs_located_in(\"Saladin\", \"circle of lust\").\n.decl Answer()\nAnswer() :- Passes_through(\"Dante\", \"circle of lust\"), Is_located_in(\"Saladin\", \"circle of lust\").\n.output Answer"]}
{"id": 1922, "answer": true, "completion": ".decl Has_speed(Event:symbol, Speed:float)\nHas_speed(\"explosion at a gunpowder storage facility\", 3000).\nHas_speed(\"supersonic shock wave\", 340).\n.decl Answer()\nAnswer() :- Has_speed(\"explosion at a gunpowder storage facility\", speed1), Has_speed(\"supersonic shock wave\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_speed(Event:symbol, Speed:float)\nHas_speed(\"explosion at a gunpowder storage facility\", 3000).\nHas_speed(\"supersonic shock wave\", 340).\n.decl Answer()\nAnswer() :- Has_speed(\"explosion at a gunpowder storage facility\", speed1), Has_speed(\"supersonic shock wave\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 1923, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"New Years Eve\", \"Times Square\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"New Years Eve\", \"midnight\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"New Years Eve\", \"Times Square\"), Happens_in_time(\"New Years Eve\", \"midnight\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"New Years Eve\", \"Times Square\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"New Years Eve\", \"midnight\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"New Years Eve\", \"Times Square\"), Happens_in_time(\"New Years Eve\", \"midnight\").\n.output Answer"]}
{"id": 1924, "answer": false, "completion": ".decl Happens_during(Event:symbol, Time:symbol)\nHappens_during(\"NASCAR events\", \"weekends\").\nHappens_during(\"railroad engineer\", \"weekdays\").\n.decl Answer()\nAnswer() :- Happens_during(\"NASCAR events\", time1), Happens_during(\"railroad engineer\", time2), time1 != time2.\n.output Answer", "completions": [".decl Happens_during(Event:symbol, Time:symbol)\nHappens_during(\"NASCAR events\", \"weekends\").\nHappens_during(\"railroad engineer\", \"weekdays\").\n.decl Answer()\nAnswer() :- Happens_during(\"NASCAR events\", time1), Happens_during(\"railroad engineer\", time2), time1 != time2.\n.output Answer"]}
{"id": 1925, "answer": true, "completion": ".decl Grows_on(Moss:symbol, Object:symbol)\nGrows_on(\"moss\", \"rock\").\nGrows_on(\"moss\", \"tree\").\nGrows_on(\"moss\", \"human\").\n.decl Answer()\nAnswer() :- Grows_on(\"moss\", \"beard\").\n.output Answer", "completions": [".decl Grows_on(Moss:symbol, Object:symbol)\nGrows_on(\"moss\", \"rock\").\nGrows_on(\"moss\", \"tree\").\nGrows_on(\"moss\", \"human\").\n.decl Answer()\nAnswer() :- Grows_on(\"moss\", \"beard\").\n.output Answer"]}
{"id": 1926, "answer": true, "completion": ".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"dyspepsia\", \"heartburn\").\nCauses(\"dyspepsia\", \"bloating\").\nCauses(\"dyspepsia\", \"nausea\").\nCauses(\"dyspepsia\", \"belching\").\nCauses(\"dyspepsia\", \"upper abdominal pain\").\n.decl Aggravates(Food:symbol, Symptom:symbol)\nAggravates(\"lemon\", \"heartburn\").\nAggravates(\"lemon\", \"bloating\").\nAggravates(\"lemon\", \"nausea\").\nAggravates(\"lemon\", \"belching\").\nAggravates(\"lemon\", \"upper abdominal pain\").\n.decl Answer()\nAnswer() :- Causes(disease, symptom), Aggravates(\"lemon\", symptom).\n.output Answer", "completions": [".decl Causes(Disease:symbol, Symptom:symbol)\nCauses(\"dyspepsia\", \"heartburn\").\nCauses(\"dyspepsia\", \"bloating\").\nCauses(\"dyspepsia\", \"nausea\").\nCauses(\"dyspepsia\", \"belching\").\nCauses(\"dyspepsia\", \"upper abdominal pain\").\n.decl Aggravates(Food:symbol, Symptom:symbol)\nAggravates(\"lemon\", \"heartburn\").\nAggravates(\"lemon\", \"bloating\").\nAggravates(\"lemon\", \"nausea\").\nAggravates(\"lemon\", \"belching\").\nAggravates(\"lemon\", \"upper abdominal pain\").\n.decl Answer()\nAnswer() :- Causes(disease, symptom), Aggravates(\"lemon\", symptom).\n.output Answer"]}
{"id": 1927, "answer": true, "completion": ".decl Likes_music_genre(Person:symbol, Music_genre:symbol)\nLikes_music_genre(\"Beethoven\", \"classical music\").\n.decl Answer()\nAnswer() :- Likes_music_genre(\"Beethoven\", \"EDM\").\n.output Answer", "completions": [".decl Likes_music_genre(Person:symbol, Music_genre:symbol)\nLikes_music_genre(\"Beethoven\", \"classical music\").\n.decl Answer()\nAnswer() :- Likes_music_genre(\"Beethoven\", \"EDM\").\n.output Answer"]}
{"id": 1928, "answer": true, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Mumbai resident\", \"Hindi\").\n.decl Uses_term(Language:symbol, Term:symbol, Object:symbol)\nUses_term(\"Hindi\", \"baingan\", \"Solanum melongena\").\nUses_term(\"Hindi\", \"brinjal\", \"Solanum melongena\").\n.decl Answer()\nAnswer() :- Speaks_language(\"Mumbai resident\", language), Uses_term(language, \"baingan\", \"Solanum melongena\").\nAnswer() :- Speaks_language(\"Mumbai resident\", language), Uses_term(language, \"brinjal\", \"Solanum melongena\").\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Mumbai resident\", \"Hindi\").\n.decl Uses_term(Language:symbol, Term:symbol, Object:symbol)\nUses_term(\"Hindi\", \"baingan\", \"Solanum melongena\").\nUses_term(\"Hindi\", \"brinjal\", \"Solanum melongena\").\n.decl Answer()\nAnswer() :- Speaks_language(\"Mumbai resident\", language), Uses_term(language, \"baingan\", \"Solanum melongena\").\nAnswer() :- Speaks_language(\"Mumbai resident\", language), Uses_term(language, \"brinjal\", \"Solanum melongena\").\n.output Answer"]}
{"id": 1929, "answer": false, "completion": ".decl Holds_opinion(Person:symbol, Opinion:symbol)\nHolds_opinion(\"Woodrow Wilson\", \"Blacks are not equal members of society\").\n.decl Answer()\nAnswer() :- Holds_opinion(\"Woodrow Wilson\", \"Blacks are not equal members of society\").\n.output Answer", "completions": [".decl Holds_opinion(Person:symbol, Opinion:symbol)\nHolds_opinion(\"Woodrow Wilson\", \"Blacks are not equal members of society\").\n.decl Answer()\nAnswer() :- Holds_opinion(\"Woodrow Wilson\", \"Blacks are not equal members of society\").\n.output Answer"]}
{"id": 1930, "answer": false, "completion": ".decl Is_skilled(Person:symbol, Skill:symbol)\nIs_skilled(\"Krishna\", \"archery\").\n.decl Answer()\nAnswer() :- Is_skilled(\"Krishna\", \"archery\").\n.output Answer", "completions": [".decl Is_skilled(Person:symbol, Skill:symbol)\nIs_skilled(\"Krishna\", \"archery\").\n.decl Answer()\nAnswer() :- Is_skilled(\"Krishna\", \"archery\").\n.output Answer"]}
{"id": 1931, "answer": true, "completion": ".decl Weighs(Animal:symbol, Weight:float)\nWeighs(\"snow leopard\", 100).\n.decl Eats_weight(Animal:symbol, Weight:float)\nEats_weight(\"snow leopard\", 200).\n.decl Answer()\nAnswer() :- Weighs(animal, weight1), Eats_weight(animal, weight2), weight2 >= weight1 * 2.\n.output Answer", "completions": [".decl Weighs(Animal:symbol, Weight:float)\nWeighs(\"snow leopard\", 100).\n.decl Eats_weight(Animal:symbol, Weight:float)\nEats_weight(\"snow leopard\", 200).\n.decl Answer()\nAnswer() :- Weighs(animal, weight1), Eats_weight(animal, weight2), weight2 >= weight1 * 2.\n.output Answer"]}
{"id": 1932, "answer": true, "completion": ".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"Charla Nash\", \"gorillas\").\n.decl Answer()\nAnswer() :- Has_phobia(\"Charla Nash\", \"gorillas\").\n.output Answer", "completions": [".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"Charla Nash\", \"gorillas\").\n.decl Answer()\nAnswer() :- Has_phobia(\"Charla Nash\", \"gorillas\").\n.output Answer"]}
{"id": 1933, "answer": true, "completion": ".decl Needs_both_hands(Instrument:symbol)\nNeeds_both_hands(\"guitar\").\n.decl Answer()\nAnswer() :- Needs_both_hands(instrument).\n.output Answer", "completions": [".decl Needs_both_hands(Instrument:symbol)\nNeeds_both_hands(\"guitar\").\n.decl Answer()\nAnswer() :- Needs_both_hands(instrument).\n.output Answer"]}
{"id": 1934, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"World War II\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Al Pacino acts in a movie\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Al Pacino acts in a movie\", n_years1), Last_n_years(\"World War II\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"World War II\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Al Pacino acts in a movie\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Al Pacino acts in a movie\", n_years1), Last_n_years(\"World War II\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1935, "answer": true, "completion": ".decl Has_n_ex_wives(Person:symbol, N_ex_wives:float)\nHas_n_ex_wives(\"James Brown\", 4).\n.decl Answer()\nAnswer() :- Has_n_ex_wives(\"James Brown\", n_ex_wives), n_ex_wives >= 2.\n.output Answer", "completions": [".decl Has_n_ex_wives(Person:symbol, N_ex_wives:float)\nHas_n_ex_wives(\"James Brown\", 4).\n.decl Answer()\nAnswer() :- Has_n_ex_wives(\"James Brown\", n_ex_wives), n_ex_wives >= 2.\n.output Answer"]}
{"id": 1936, "answer": true, "completion": ".decl Uses_in_work(Person:symbol, Object:symbol)\nUses_in_work(\"Robert De Niro\", \"microscope\").\n.decl Answer()\nAnswer() :- Uses_in_work(\"Robert De Niro\", \"microscope\").\n.output Answer\n\n\n", "completions": [".decl Uses_in_work(Person:symbol, Object:symbol)\nUses_in_work(\"Robert De Niro\", \"microscope\").\n.decl Answer()\nAnswer() :- Uses_in_work(\"Robert De Niro\", \"microscope\").\n.output Answer\n\n\n"]}
{"id": 1937, "answer": true, "completion": ".decl Believed_in(Person:symbol, N_people:float)\nBelieved_in(\"Imam Reza Shah\", 12).\n.decl Disciples(Person:symbol, N_people:float)\nDisciples(\"Jesus\", 12).\n.decl Answer()\nAnswer() :- Believed_in(\"Imam Reza Shah\", n_people1), Disciples(\"Jesus\", n_people2), n_people1 > n_people2.\n.output Answer", "completions": [".decl Believed_in(Person:symbol, N_people:float)\nBelieved_in(\"Imam Reza Shah\", 12).\n.decl Disciples(Person:symbol, N_people:float)\nDisciples(\"Jesus\", 12).\n.decl Answer()\nAnswer() :- Believed_in(\"Imam Reza Shah\", n_people1), Disciples(\"Jesus\", n_people2), n_people1 > n_people2.\n.output Answer"]}
{"id": 1938, "answer": false, "completion": ".decl Inhibits(Chlorine:symbol, Photosynthesis:symbol)\nInhibits(\"chlorine\", \"photosynthesis\").\n.decl Answer()\nAnswer() :- Inhibits(\"chlorine\", \"photosynthesis\").\n.output Answer", "completions": [".decl Inhibits(Chlorine:symbol, Photosynthesis:symbol)\nInhibits(\"chlorine\", \"photosynthesis\").\n.decl Answer()\nAnswer() :- Inhibits(\"chlorine\", \"photosynthesis\").\n.output Answer"]}
{"id": 1939, "answer": true, "completion": ".decl Popular_in(Activity:symbol, Location:symbol)\n.decl Answer()\nAnswer() :- Popular_in(\"surfing\", \"Des Moines, Iowa\").\n.output Answer", "completions": [".decl Popular_in(Activity:symbol, Location:symbol)\n.decl Answer()\nAnswer() :- Popular_in(\"surfing\", \"Des Moines, Iowa\").\n.output Answer"]}
{"id": 1940, "answer": true, "completion": ".decl Won_fight(Boxer1:symbol, Boxer2:symbol)\nWon_fight(\"Sugar Ray Robinson\", \"Canelo Alvarez\").\n.decl Answer()\nAnswer() :- Won_fight(\"Sugar Ray Robinson\", \"Canelo Alvarez\").\n.output Answer", "completions": [".decl Won_fight(Boxer1:symbol, Boxer2:symbol)\nWon_fight(\"Sugar Ray Robinson\", \"Canelo Alvarez\").\n.decl Answer()\nAnswer() :- Won_fight(\"Sugar Ray Robinson\", \"Canelo Alvarez\").\n.output Answer"]}
{"id": 1941, "answer": true, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"75 degree Fahrenheit day\", \"summer\").\n.decl Average_temperature(Season:symbol, Temperature:float)\nAverage_temperature(\"summer\", 32).\n.decl Answer()\nAnswer() :- Happens_in_season(\"75 degree Fahrenheit day\", season), Average_temperature(season, temperature), temperature > 75.\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"75 degree Fahrenheit day\", \"summer\").\n.decl Average_temperature(Season:symbol, Temperature:float)\nAverage_temperature(\"summer\", 32).\n.decl Answer()\nAnswer() :- Happens_in_season(\"75 degree Fahrenheit day\", season), Average_temperature(season, temperature), temperature > 75.\n.output Answer"]}
{"id": 1942, "answer": false, "completion": ".decl Is_religious(Person:symbol)\n.decl Answer()\nAnswer() :- Is_religious(\"Richard Dawkins\").\n.output Answer", "completions": [".decl Is_religious(Person:symbol)\n.decl Answer()\nAnswer() :- Is_religious(\"Richard Dawkins\").\n.output Answer"]}
{"id": 1943, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Presidency of Richard Nixon\", 5).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"high school class of 2010\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"high school class of 2010\", n_years1), Last_n_years(\"Presidency of Richard Nixon\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Presidency of Richard Nixon\", 5).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"high school class of 2010\", 4).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"high school class of 2010\", n_years1), Last_n_years(\"Presidency of Richard Nixon\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 1944, "answer": false, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Disney Zorro\", \"Disney Zorro\").\nHas_name(\"Disney Zorro\", \"Zorro\").\n.decl Answer()\nAnswer() :- Has_name(person1, \"Disney Zorro\"), Has_name(person2, \"Disney Zorro\"), person1 != person2.\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Disney Zorro\", \"Disney Zorro\").\nHas_name(\"Disney Zorro\", \"Zorro\").\n.decl Answer()\nAnswer() :- Has_name(person1, \"Disney Zorro\"), Has_name(person2, \"Disney Zorro\"), person1 != person2.\n.output Answer"]}
{"id": 1945, "answer": true, "completion": ".decl Has_words(Book:symbol, Words:float)\nHas_words(\"The Hobbit\", 95000).\nHas_words(\"Constitution of the United States\", 7500).\n.decl Answer()\nAnswer() :- Has_words(\"The Hobbit\", words1), Has_words(\"Constitution of the United States\", words2), words1 > words2.\n.output Answer", "completions": [".decl Has_words(Book:symbol, Words:float)\nHas_words(\"The Hobbit\", 95000).\nHas_words(\"Constitution of the United States\", 7500).\n.decl Answer()\nAnswer() :- Has_words(\"The Hobbit\", words1), Has_words(\"Constitution of the United States\", words2), words1 > words2.\n.output Answer"]}
{"id": 1946, "answer": false, "completion": ".decl Starred_in(Person:symbol, Show:symbol)\nStarred_in(\"Lucy Lawless\", \"Xena: Warrior Princess\").\nStarred_in(\"Renee O'Connor\", \"Xena: Warrior Princess\").\nStarred_in(\"Lucy Lawless\", \"Battlestar Galactica\").\nStarred_in(\"Renee O'Connor\", \"Battlestar Galactica\").\n.decl Answer()\nAnswer() :- Starred_in(person, \"Xena: Warrior Princess\"), Starred_in(person, show2), show2 != \"Xena: Warrior Princess\".\n.output Answer", "completions": [".decl Starred_in(Person:symbol, Show:symbol)\nStarred_in(\"Lucy Lawless\", \"Xena: Warrior Princess\").\nStarred_in(\"Renee O'Connor\", \"Xena: Warrior Princess\").\nStarred_in(\"Lucy Lawless\", \"Battlestar Galactica\").\nStarred_in(\"Renee O'Connor\", \"Battlestar Galactica\").\n.decl Answer()\nAnswer() :- Starred_in(person, \"Xena: Warrior Princess\"), Starred_in(person, show2), show2 != \"Xena: Warrior Princess\".\n.output Answer"]}
{"id": 1947, "answer": true, "completion": ".decl Can_slamdunk(Animal:symbol)\nCan_slamdunk(\"human\").\nCan_slamdunk(\"monkey\").\n.decl Answer()\nAnswer() :- Can_slamdunk(\"crane\").\n.output Answer", "completions": [".decl Can_slamdunk(Animal:symbol)\nCan_slamdunk(\"human\").\nCan_slamdunk(\"monkey\").\n.decl Answer()\nAnswer() :- Can_slamdunk(\"crane\").\n.output Answer"]}
{"id": 1948, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"black widow woman\", \"black\").\nHas_color(\"peaches\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_color(\"black widow woman\", \"black\"), Has_color(\"peaches\", \"yellow\").\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"black widow woman\", \"black\").\nHas_color(\"peaches\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_color(\"black widow woman\", \"black\"), Has_color(\"peaches\", \"yellow\").\n.output Answer"]}
{"id": 1949, "answer": false, "completion": ".decl Has_symptom(Person:symbol, Symptom:symbol)\nHas_symptom(\"Anorexia Nervosa\", \"red legs\").\n.decl Answer()\nAnswer() :- Has_symptom(\"Anorexia Nervosa\", \"red legs\").\n.output Answer", "completions": [".decl Has_symptom(Person:symbol, Symptom:symbol)\nHas_symptom(\"Anorexia Nervosa\", \"red legs\").\n.decl Answer()\nAnswer() :- Has_symptom(\"Anorexia Nervosa\", \"red legs\").\n.output Answer"]}
{"id": 1950, "answer": false, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Iowa tests\", 30).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"Nine Inch Nails concert\", 60).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"Nine Inch Nails concert\", n_days1), Last_n_days(\"Iowa tests\", n_days2), n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Iowa tests\", 30).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"Nine Inch Nails concert\", 60).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"Nine Inch Nails concert\", n_days1), Last_n_days(\"Iowa tests\", n_days2), n_days1 <= n_days2.\n.output Answer"]}
{"id": 1951, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Nike shoebox\", 0.01).\nHas_volume(\"swan\", 0.03).\n.decl Answer()\nAnswer() :- Has_volume(\"Nike shoebox\", volume1), Has_volume(\"swan\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Nike shoebox\", 0.01).\nHas_volume(\"swan\", 0.03).\n.decl Answer()\nAnswer() :- Has_volume(\"Nike shoebox\", volume1), Has_volume(\"swan\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 1952, "answer": true, "completion": ".decl Has_blood_type(Animal:symbol, Blood_type:symbol)\nHas_blood_type(\"chinchilla\", \"cold-blooded\").\n.decl Answer()\nAnswer() :- Has_blood_type(\"chinchilla\", \"cold-blooded\").\n.output Answer", "completions": [".decl Has_blood_type(Animal:symbol, Blood_type:symbol)\nHas_blood_type(\"chinchilla\", \"cold-blooded\").\n.decl Answer()\nAnswer() :- Has_blood_type(\"chinchilla\", \"cold-blooded\").\n.output Answer"]}
{"id": 1953, "answer": false, "completion": ".decl Has_protein(Food:symbol, Protein:float)\nHas_protein(\"beef burger\", 20).\nHas_protein(\"elk burger\", 30).\n.decl Answer()\nAnswer() :- Has_protein(\"beef burger\", protein1), Has_protein(\"elk burger\", protein2), protein2 > protein1.\n.output Answer", "completions": [".decl Has_protein(Food:symbol, Protein:float)\nHas_protein(\"beef burger\", 20).\nHas_protein(\"elk burger\", 30).\n.decl Answer()\nAnswer() :- Has_protein(\"beef burger\", protein1), Has_protein(\"elk burger\", protein2), protein2 > protein1.\n.output Answer"]}
{"id": 1954, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Aerosmith\", 4.5).\nHas_length(\"2020 Mitsubishi Outlander\", 4.6).\n.decl Answer()\nAnswer() :- Has_length(\"Aerosmith\", length1), Has_length(\"2020 Mitsubishi Outlander\", length2), length1 <= length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Aerosmith\", 4.5).\nHas_length(\"2020 Mitsubishi Outlander\", 4.6).\n.decl Answer()\nAnswer() :- Has_length(\"Aerosmith\", length1), Has_length(\"2020 Mitsubishi Outlander\", length2), length1 <= length2.\n.output Answer"]}
{"id": 1955, "answer": true, "completion": ".decl Has_been_represented(Organization:symbol, Place:symbol)\nHas_been_represented(\"Freemasonry\", \"Moon\").\n.decl Answer()\nAnswer() :- Has_been_represented(\"Freemasonry\", \"Moon\").\n.output Answer", "completions": [".decl Has_been_represented(Organization:symbol, Place:symbol)\nHas_been_represented(\"Freemasonry\", \"Moon\").\n.decl Answer()\nAnswer() :- Has_been_represented(\"Freemasonry\", \"Moon\").\n.output Answer"]}
{"id": 1956, "answer": true, "completion": ".decl Has_coat(Animal:symbol, Coat:symbol)\nHas_coat(\"Sphynx cat\", \"hairless\").\n.decl Answer()\nAnswer() :- Has_coat(\"Sphynx cat\", coat), coat != \"wool\".\n.output Answer", "completions": [".decl Has_coat(Animal:symbol, Coat:symbol)\nHas_coat(\"Sphynx cat\", \"hairless\").\n.decl Answer()\nAnswer() :- Has_coat(\"Sphynx cat\", coat), coat != \"wool\".\n.output Answer"]}
{"id": 1957, "answer": true, "completion": ".decl Needs(Animal:symbol, Food:symbol)\nNeeds(\"stork\", \"golden toad\").\n.decl Answer()\nAnswer() :- Needs(\"stork\", \"golden toad\").\n.output Answer", "completions": [".decl Needs(Animal:symbol, Food:symbol)\nNeeds(\"stork\", \"golden toad\").\n.decl Answer()\nAnswer() :- Needs(\"stork\", \"golden toad\").\n.output Answer"]}
{"id": 1958, "answer": false, "completion": ".decl Has_insurance(Person:symbol, Insurance:symbol)\nHas_insurance(\"person1\", \"yes\").\nHas_insurance(\"person2\", \"no\").\n.decl Answer()\nAnswer() :- Has_insurance(\"person1\", \"no\"), Has_insurance(\"person2\", \"yes\").\n.output Answer", "completions": [".decl Has_insurance(Person:symbol, Insurance:symbol)\nHas_insurance(\"person1\", \"yes\").\nHas_insurance(\"person2\", \"no\").\n.decl Answer()\nAnswer() :- Has_insurance(\"person1\", \"no\"), Has_insurance(\"person2\", \"yes\").\n.output Answer"]}
{"id": 1959, "answer": false, "completion": ".decl Has_n_legs(Animal:symbol, N_legs:float)\nHas_n_legs(\"spider wasp\", 8).\n.decl Answer()\nAnswer() :- Has_n_legs(\"spider wasp\", 8).\n.output Answer", "completions": [".decl Has_n_legs(Animal:symbol, N_legs:float)\nHas_n_legs(\"spider wasp\", 8).\n.decl Answer()\nAnswer() :- Has_n_legs(\"spider wasp\", 8).\n.output Answer"]}
{"id": 1960, "answer": false, "completion": ".decl Causes_death(Event:symbol, Cause:symbol)\nCauses_death(\"brake failure\", \"car accident\").\n.decl Answer()\nAnswer() :- Causes_death(\"brake failure\", cause), Causes_death(cause, \"death\").\n.output Answer", "completions": [".decl Causes_death(Event:symbol, Cause:symbol)\nCauses_death(\"brake failure\", \"car accident\").\n.decl Answer()\nAnswer() :- Causes_death(\"brake failure\", cause), Causes_death(cause, \"death\").\n.output Answer"]}
{"id": 1961, "answer": false, "completion": ".decl McRib_ingredients(Ingredient:symbol)\nMcRib_ingredients(\"pork\").\nMcRib_ingredients(\"barbecue sauce\").\nMcRib_ingredients(\"pickles\").\nMcRib_ingredients(\"onions\").\nMcRib_ingredients(\"sesame seed bun\").\n.decl Halal_ingredients(Ingredient:symbol)\nHalal_ingredients(\"chicken\").\nHalal_ingredients(\"beef\").\nHalal_ingredients(\"lamb\").\nHalal_ingredients(\"vegetables\").\nHalal_ingredients(\"fruits\").\nHalal_ingredients(\"grains\").\nHalal_ingredients(\"dairy\").\nHalal_ingredients(\"eggs\").\nHalal_ingredients(\"legumes\").\nHalal_ingredients(\"nuts\").\nHalal_ingredients(\"seeds\").\nHalal_ingredients(\"fish\").\nHalal_ingredients(\"water\").\nHalal_ingredients(\"salt\").\nHalal_ingredients(\"pepper\").\nHalal_ingredients(\"vinegar\").\nHalal_ingredients(\"alcohol\").\nHalal_ingredients(\"sugar\").\nHalal_ingredients(\"honey\").\nHalal_ingredients(\"yeast\").\nHalal_ingredients(\"chocolate\").\nHalal_ingredients(\"vanilla\").\nHalal_ingredients(\"coffee\").\nHalal_ingredients(\"tea\").\n.decl Answer()\nAnswer() :- McRib_ingredients(ingredient), !, Halal_ingredients(ingredient).\n.output Answer", "completions": [".decl McRib_ingredients(Ingredient:symbol)\nMcRib_ingredients(\"pork\").\nMcRib_ingredients(\"barbecue sauce\").\nMcRib_ingredients(\"pickles\").\nMcRib_ingredients(\"onions\").\nMcRib_ingredients(\"sesame seed bun\").\n.decl Halal_ingredients(Ingredient:symbol)\nHalal_ingredients(\"chicken\").\nHalal_ingredients(\"beef\").\nHalal_ingredients(\"lamb\").\nHalal_ingredients(\"vegetables\").\nHalal_ingredients(\"fruits\").\nHalal_ingredients(\"grains\").\nHalal_ingredients(\"dairy\").\nHalal_ingredients(\"eggs\").\nHalal_ingredients(\"legumes\").\nHalal_ingredients(\"nuts\").\nHalal_ingredients(\"seeds\").\nHalal_ingredients(\"fish\").\nHalal_ingredients(\"water\").\nHalal_ingredients(\"salt\").\nHalal_ingredients(\"pepper\").\nHalal_ingredients(\"vinegar\").\nHalal_ingredients(\"alcohol\").\nHalal_ingredients(\"sugar\").\nHalal_ingredients(\"honey\").\nHalal_ingredients(\"yeast\").\nHalal_ingredients(\"chocolate\").\nHalal_ingredients(\"vanilla\").\nHalal_ingredients(\"coffee\").\nHalal_ingredients(\"tea\").\n.decl Answer()\nAnswer() :- McRib_ingredients(ingredient), !, Halal_ingredients(ingredient).\n.output Answer"]}
{"id": 1962, "answer": true, "completion": ".decl Is_actor(Person:symbol)\nIs_actor(\"Tom Hanks\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Selleck\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_", "completions": [".decl Is_actor(Person:symbol)\nIs_actor(\"Tom Hanks\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Selleck\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_actor(\"Tom Holland\").\nIs_actor(\"Tom Felton\").\nIs_actor(\"Tom Hardy\").\nIs_actor(\"Tom Cruise\").\nIs_actor(\"Tom Hiddleston\").\nIs_"]}
{"id": 1963, "answer": false, "completion": ".decl Knows_language(Person:symbol, Language:symbol)\nKnows_language(\"person\", \"English\").\n.decl Can_read(Person:symbol, Language:symbol)\nCan_read(\"person\", \"English\").\n.decl Answer()\nAnswer() :- Knows_language(\"person\", \"English\"), Can_read(\"person\", \"Kanji\").\n.output Answer", "completions": [".decl Knows_language(Person:symbol, Language:symbol)\nKnows_language(\"person\", \"English\").\n.decl Can_read(Person:symbol, Language:symbol)\nCan_read(\"person\", \"English\").\n.decl Answer()\nAnswer() :- Knows_language(\"person\", \"English\"), Can_read(\"person\", \"Kanji\").\n.output Answer"]}
{"id": 1964, "answer": true, "completion": ".decl Owns(Company:symbol, Location:symbol)\nOwns(\"Aldi\", \"United States\").\n.decl Answer()\nAnswer() :- Owns(company1, \"United States\"), Owns(company2, \"United States\"), company1 = company2.\n.output Answer", "completions": [".decl Owns(Company:symbol, Location:symbol)\nOwns(\"Aldi\", \"United States\").\n.decl Answer()\nAnswer() :- Owns(company1, \"United States\"), Owns(company2, \"United States\"), company1 = company2.\n.output Answer"]}
{"id": 1965, "answer": true, "completion": ".decl Has_biblical_significance(Place:symbol)\nHas_biblical_significance(\"Red Sea\").\n.decl Answer()\nAnswer() :- Has_biblical_significance(\"Red Sea\").\n.output Answer", "completions": [".decl Has_biblical_significance(Place:symbol)\nHas_biblical_significance(\"Red Sea\").\n.decl Answer()\nAnswer() :- Has_biblical_significance(\"Red Sea\").\n.output Answer"]}
{"id": 1966, "answer": false, "completion": ".decl Has_n_shoes(Person:symbol, N_shoes:float)\nHas_n_shoes(\"octuplet\", 8).\n.decl Answer()\nAnswer() :- Has_n_shoes(\"octuplet\", n_shoes1), n_shoes1 > 4.\n.output Answer", "completions": [".decl Has_n_shoes(Person:symbol, N_shoes:float)\nHas_n_shoes(\"octuplet\", 8).\n.decl Answer()\nAnswer() :- Has_n_shoes(\"octuplet\", n_shoes1), n_shoes1 > 4.\n.output Answer"]}
{"id": 1967, "answer": false, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Pope John Paul I's reign\", 33).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"Phileas Fogg's around the world\", 80).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"Phileas Fogg's around the world\", n_days1), Last_n_days(\"Pope John Paul I's reign\", n_days2), n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Pope John Paul I's reign\", 33).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"Phileas Fogg's around the world\", 80).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"Phileas Fogg's around the world\", n_days1), Last_n_days(\"Pope John Paul I's reign\", n_days2), n_days1 <= n_days2.\n.output Answer"]}
{"id": 1968, "answer": false, "completion": ".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"spontaneous abortion\", \"lettuce\").\n.decl Answer()\nAnswer() :- Causes(\"spontaneous abortion\", \"lettuce\").\n.output Answer", "completions": [".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"spontaneous abortion\", \"lettuce\").\n.decl Answer()\nAnswer() :- Causes(\"spontaneous abortion\", \"lettuce\").\n.output Answer"]}
{"id": 1969, "answer": true, "completion": ".decl Requires_power(Job:symbol)\nRequires_power(\"software engineer\").\n.decl Answer()\nAnswer() :- Requires_power(job), !.\n.output Answer", "completions": [".decl Requires_power(Job:symbol)\nRequires_power(\"software engineer\").\n.decl Answer()\nAnswer() :- Requires_power(job), !.\n.output Answer"]}
{"id": 1970, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"hyena\", \"human\").\nEats(\"human\", \"vegan\").\n.decl Answer()\nAnswer() :- Eats(animal, \"human\"), Eats(\"hyena\", animal).\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"hyena\", \"human\").\nEats(\"human\", \"vegan\").\n.decl Answer()\nAnswer() :- Eats(animal, \"human\"), Eats(\"hyena\", animal).\n.output Answer"]}
{"id": 1971, "answer": true, "completion": ".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"leopard seal\", \"Antarctic\").\nLives_in_habitat(\"leopard seal\", \"Sea World\").\n.decl Is_hazardous(Habitat:symbol, Animal:symbol)\nIs_hazardous(\"Sea World\", \"leopard seal\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"leopard seal\", habitat), Is_hazardous(habitat, \"leopard seal\").\n.output Answer", "completions": [".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"leopard seal\", \"Antarctic\").\nLives_in_habitat(\"leopard seal\", \"Sea World\").\n.decl Is_hazardous(Habitat:symbol, Animal:symbol)\nIs_hazardous(\"Sea World\", \"leopard seal\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"leopard seal\", habitat), Is_hazardous(habitat, \"leopard seal\").\n.output Answer"]}
{"id": 1972, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Gray Whale\", 50).\nHas_volume(\"above ground pool\", 100).\n.decl Answer()\nAnswer() :- Has_volume(\"Gray Whale\", volume1), Has_volume(\"above ground pool\", volume2), volume1 < volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"Gray Whale\", 50).\nHas_volume(\"above ground pool\", 100).\n.decl Answer()\nAnswer() :- Has_volume(\"Gray Whale\", volume1), Has_volume(\"above ground pool\", volume2), volume1 < volume2.\n.output Answer"]}
{"id": 1973, "answer": true, "completion": ".decl Answer()\nAnswer() :- !Happens_in_time(\"Julia Roberts\", \"child\"), !Happens_in_time(\"blast beats\", \"child\").\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !Happens_in_time(\"Julia Roberts\", \"child\"), !Happens_in_time(\"blast beats\", \"child\").\n.output Answer"]}
{"id": 1974, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"American Black Bear cub\", 0.5).\nHas_length(\"king size bed\", 2).\n.decl Answer()\nAnswer() :- Has_length(\"American Black Bear cub\", length1), Has_length(\"king size bed\", length2), length1*2 <= length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"American Black Bear cub\", 0.5).\nHas_length(\"king size bed\", 2).\n.decl Answer()\nAnswer() :- Has_length(\"American Black Bear cub\", length1), Has_length(\"king size bed\", length2), length1*2 <= length2.\n.output Answer"]}
{"id": 1975, "answer": true, "completion": ".decl Is_nearby(Place:symbol, Place_nearby:symbol)\nIs_nearby(\"Mona Lisa\", \"lunch\").\n.decl Answer()\nAnswer() :- Is_nearby(\"Mona Lisa\", \"lunch\").\n.output Answer", "completions": [".decl Is_nearby(Place:symbol, Place_nearby:symbol)\nIs_nearby(\"Mona Lisa\", \"lunch\").\n.decl Answer()\nAnswer() :- Is_nearby(\"Mona Lisa\", \"lunch\").\n.output Answer"]}
{"id": 1976, "answer": true, "completion": ".decl Is_fruit(Object:symbol)\nIs_fruit(\"kaffir lime\").\n.decl Is_alcohol(Object:symbol)\nIs_alcohol(\"vodka\").\nIs_alcohol(\"coffee liqueur\").\n.decl Answer()\nAnswer() :- Is_fruit(\"kaffir lime\"), Is_alcohol(\"vodka\"), Is_alcohol(\"coffee liqueur\").\n.output Answer", "completions": [".decl Is_fruit(Object:symbol)\nIs_fruit(\"kaffir lime\").\n.decl Is_alcohol(Object:symbol)\nIs_alcohol(\"vodka\").\nIs_alcohol(\"coffee liqueur\").\n.decl Answer()\nAnswer() :- Is_fruit(\"kaffir lime\"), Is_alcohol(\"vodka\"), Is_alcohol(\"coffee liqueur\").\n.output Answer"]}
{"id": 1977, "answer": false, "completion": ".decl Doctor_Who_screen_time(Doctor:symbol, Screen_time:float)\nDoctor_Who_screen_time(\"War Doctor\", 0.5).\nDoctor_Who_screen_time(\"Doctor\", 0.4).\n.decl Answer()\nAnswer() :- Doctor_Who_screen_time(\"War Doctor\", screen_time1), Doctor_Who_screen_time(\"Doctor\", screen_time2), screen_time1 > screen_time2.\n.output Answer", "completions": [".decl Doctor_Who_screen_time(Doctor:symbol, Screen_time:float)\nDoctor_Who_screen_time(\"War Doctor\", 0.5).\nDoctor_Who_screen_time(\"Doctor\", 0.4).\n.decl Answer()\nAnswer() :- Doctor_Who_screen_time(\"War Doctor\", screen_time1), Doctor_Who_screen_time(\"Doctor\", screen_time2), screen_time1 > screen_time2.\n.output Answer"]}
{"id": 1978, "answer": true, "completion": ".decl Formed_before(Group1:symbol, Group2:symbol)\nFormed_before(\"Spice Girls\", \"Little Mix\").\n.decl Answer()\nAnswer() :- Formed_before(\"Spice Girls\", \"Little Mix\").\n.output Answer", "completions": [".decl Formed_before(Group1:symbol, Group2:symbol)\nFormed_before(\"Spice Girls\", \"Little Mix\").\n.decl Answer()\nAnswer() :- Formed_before(\"Spice Girls\", \"Little Mix\").\n.output Answer"]}
{"id": 1979, "answer": true, "completion": ".decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Takes_n_hours(Flight:symbol, N_hours:float)\nTakes_n_hours(\"wandering albatross\", 12).\n.decl Answer()\nAnswer() :- Flies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\"), Takes_n_hours(\"wandering albatross\", n_hours).\n.output Answer", "completions": [".decl Flies_from_to(Bird:symbol, City_A:symbol, City_B:symbol)\nFlies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\").\n.decl Takes_n_hours(Flight:symbol, N_hours:float)\nTakes_n_hours(\"wandering albatross\", 12).\n.decl Answer()\nAnswer() :- Flies_from_to(\"wandering albatross\", \"Bucharest\", \"New York City\"), Takes_n_hours(\"wandering albatross\", n_hours).\n.output Answer"]}
{"id": 1980, "answer": true, "completion": ".decl Is_alive(Person:symbol, Year:float)\nIs_alive(\"Chuck Norris\", 2020).\n.decl Is_leap_year(Year:float)\nIs_leap_year(2020).\nIs_leap_year(2024).\nIs_leap_year(2028).\nIs_leap_year(2032).\nIs_leap_year(2036).\nIs_leap_year(2040).\nIs_leap_year(2044).\nIs_leap_year(2048).\nIs_leap_year(2052).\nIs_leap_year(2056).\nIs_leap_year(2060).\nIs_leap_year(2064).\nIs_leap_year(2068).\nIs_leap_year(2072).\nIs_leap_year(2076).\nIs_leap_year(2080).\nIs_leap_year(2084).\nIs_leap_year(2088).\nIs_leap_year(2092).\nIs_leap_year(2096).\n.decl Answer()\nAnswer() :- Is_alive(\"Chuck Norris\", year1), Is_leap_year(year2), year1 + 29 >= year2.\n.output Answer", "completions": [".decl Is_alive(Person:symbol, Year:float)\nIs_alive(\"Chuck Norris\", 2020).\n.decl Is_leap_year(Year:float)\nIs_leap_year(2020).\nIs_leap_year(2024).\nIs_leap_year(2028).\nIs_leap_year(2032).\nIs_leap_year(2036).\nIs_leap_year(2040).\nIs_leap_year(2044).\nIs_leap_year(2048).\nIs_leap_year(2052).\nIs_leap_year(2056).\nIs_leap_year(2060).\nIs_leap_year(2064).\nIs_leap_year(2068).\nIs_leap_year(2072).\nIs_leap_year(2076).\nIs_leap_year(2080).\nIs_leap_year(2084).\nIs_leap_year(2088).\nIs_leap_year(2092).\nIs_leap_year(2096).\n.decl Answer()\nAnswer() :- Is_alive(\"Chuck Norris\", year1), Is_leap_year(year2), year1 + 29 >= year2.\n.output Answer"]}
{"id": 1981, "answer": true, "completion": ".decl Is_animal(Object:symbol)\nIs_animal(\"German Shepherd\").\n.decl Is_allowed_in_airport(Object:symbol)\nIs_allowed_in_airport(\"German Shepherd\").\n.decl Answer()\nAnswer() :- Is_animal(\"German Shepherd\"), Is_allowed_in_airport(\"German Shepherd\").\n.output Answer", "completions": [".decl Is_animal(Object:symbol)\nIs_animal(\"German Shepherd\").\n.decl Is_allowed_in_airport(Object:symbol)\nIs_allowed_in_airport(\"German Shepherd\").\n.decl Answer()\nAnswer() :- Is_animal(\"German Shepherd\"), Is_allowed_in_airport(\"German Shepherd\").\n.output Answer"]}
{"id": 1982, "answer": true, "completion": ".decl Has_unit(Unit:symbol, System:symbol)\nHas_unit(\"foot\", \"imperial system\").\nHas_unit(\"meter\", \"metric system\").\n.decl Answer()\nAnswer() :- Has_unit(\"foot\", \"metric system\").\n.output Answer", "completions": [".decl Has_unit(Unit:symbol, System:symbol)\nHas_unit(\"foot\", \"imperial system\").\nHas_unit(\"meter\", \"metric system\").\n.decl Answer()\nAnswer() :- Has_unit(\"foot\", \"metric system\").\n.output Answer"]}
{"id": 1983, "answer": true, "completion": ".decl Has_type(Channel:symbol, Type:symbol)\nHas_type(\"Do It Yourself\", \"realistic\").\nHas_type(\"Do It Yourself\", \"unrealistic\").\n.decl Answer()\nAnswer() :- Has_type(\"Do It Yourself\", type), type = \"realistic\".\n.output Answer", "completions": [".decl Has_type(Channel:symbol, Type:symbol)\nHas_type(\"Do It Yourself\", \"realistic\").\nHas_type(\"Do It Yourself\", \"unrealistic\").\n.decl Answer()\nAnswer() :- Has_type(\"Do It Yourself\", type), type = \"realistic\".\n.output Answer"]}
{"id": 1984, "answer": false, "completion": ".decl Found_in(Animal:symbol, Food:symbol)\nFound_in(\"Atlantic cod\", \"vegemite sandwich\").\n.decl Answer()\nAnswer() :- Found_in(\"Atlantic cod\", \"vegemite sandwich\").\n.output Answer", "completions": [".decl Found_in(Animal:symbol, Food:symbol)\nFound_in(\"Atlantic cod\", \"vegemite sandwich\").\n.decl Answer()\nAnswer() :- Found_in(\"Atlantic cod\", \"vegemite sandwich\").\n.output Answer"]}
{"id": 1985, "answer": true, "completion": ".decl Wears(Person:symbol, Costume:symbol)\nWears(\"Macbeth\", \"robes\").\nWears(\"Macbeth\", \"pointy hats\").\n.decl Answer()\nAnswer() :- Wears(\"Macbeth\", \"robes\").\nAnswer() :- Wears(\"Macbeth\", \"pointy hats\").\n.output Answer", "completions": [".decl Wears(Person:symbol, Costume:symbol)\nWears(\"Macbeth\", \"robes\").\nWears(\"Macbeth\", \"pointy hats\").\n.decl Answer()\nAnswer() :- Wears(\"Macbeth\", \"robes\").\nAnswer() :- Wears(\"Macbeth\", \"pointy hats\").\n.output Answer"]}
{"id": 1986, "answer": true, "completion": ".decl Pursues_education(Person:symbol)\nPursues_education(\"Emma Stone\").\n.decl Answer()\nAnswer() :- Pursues_education(\"Emma Stone\").\n.output Answer", "completions": [".decl Pursues_education(Person:symbol)\nPursues_education(\"Emma Stone\").\n.decl Answer()\nAnswer() :- Pursues_education(\"Emma Stone\").\n.output Answer"]}
{"id": 1987, "answer": false, "completion": ".decl Sells(Shop:symbol, Item:symbol)\nSells(\"smoke shop\", \"Bob Marley's face\").\n.decl Answer()\nAnswer() :- Sells(shop, \"Bob Marley's face\").\n.output Answer", "completions": [".decl Sells(Shop:symbol, Item:symbol)\nSells(\"smoke shop\", \"Bob Marley's face\").\n.decl Answer()\nAnswer() :- Sells(shop, \"Bob Marley's face\").\n.output Answer"]}
{"id": 1988, "answer": true, "completion": ".decl Can_tell_time(Person:symbol, Object:symbol)\nCan_tell_time(\"person with sight\", \"Big Ben\").\n.decl Answer()\nAnswer() :- Can_tell_time(\"person with sight\", \"Big Ben\"), !Can_tell_time(\"blind person\", \"Big Ben\").\n.output Answer", "completions": [".decl Can_tell_time(Person:symbol, Object:symbol)\nCan_tell_time(\"person with sight\", \"Big Ben\").\n.decl Answer()\nAnswer() :- Can_tell_time(\"person with sight\", \"Big Ben\"), !Can_tell_time(\"blind person\", \"Big Ben\").\n.output Answer"]}
{"id": 1989, "answer": false, "completion": ".decl Holds_people(Stadium:symbol, N_people:float)\nHolds_people(\"Tiger Stadium\", 102000).\n.decl Answer()\nAnswer() :- Holds_people(\"Tiger Stadium\", n_people1), n_people1 >= 12500000.\n.output Answer", "completions": [".decl Holds_people(Stadium:symbol, N_people:float)\nHolds_people(\"Tiger Stadium\", 102000).\n.decl Answer()\nAnswer() :- Holds_people(\"Tiger Stadium\", n_people1), n_people1 >= 12500000.\n.output Answer"]}
{"id": 1990, "answer": true, "completion": ".decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Adam Mickiewicz\", \"Polish\").\n.decl Writes_poetry(Person:symbol, Poetry_type:symbol)\nWrites_poetry(\"Adam Mickiewicz\", \"sonnets\").\n.decl Is_religion(Religion:symbol, Origin:symbol)\nIs_religion(\"Islam\", \"Arabia\").\n.decl Answer()\nAnswer() :- Is_nationality(\"Adam Mickiewicz\", \"Polish\"), Writes_poetry(\"Adam Mickiewicz\", \"sonnets\"), Is_religion(\"Islam\", \"Arabia\").\n.output Answer", "completions": [".decl Is_nationality(Person:symbol, Nationality:symbol)\nIs_nationality(\"Adam Mickiewicz\", \"Polish\").\n.decl Writes_poetry(Person:symbol, Poetry_type:symbol)\nWrites_poetry(\"Adam Mickiewicz\", \"sonnets\").\n.decl Is_religion(Religion:symbol, Origin:symbol)\nIs_religion(\"Islam\", \"Arabia\").\n.decl Answer()\nAnswer() :- Is_nationality(\"Adam Mickiewicz\", \"Polish\"), Writes_poetry(\"Adam Mickiewicz\", \"sonnets\"), Is_religion(\"Islam\", \"Arabia\").\n.output Answer"]}
{"id": 1991, "answer": true, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Reformation\", 1517).\n.decl Lives_in_year(Person:symbol, Year:float)\nLives_in_year(\"Barack Obama\", 1961).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Reformation\", year1), Lives_in_year(\"Barack Obama\", year2), year2 > year1.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Reformation\", 1517).\n.decl Lives_in_year(Person:symbol, Year:float)\nLives_in_year(\"Barack Obama\", 1961).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Reformation\", year1), Lives_in_year(\"Barack Obama\", year2), year2 > year1.\n.output Answer"]}
{"id": 1992, "answer": true, "completion": ".decl Is_based_on(Painting:symbol, Person:symbol)\nIs_based_on(\"Mona Lisa\", \"Lisa Gherardini\").\n.decl Answer()\nAnswer() :- Is_based_on(\"Mona Lisa\", person).\n.output Answer", "completions": [".decl Is_based_on(Painting:symbol, Person:symbol)\nIs_based_on(\"Mona Lisa\", \"Lisa Gherardini\").\n.decl Answer()\nAnswer() :- Is_based_on(\"Mona Lisa\", person).\n.output Answer"]}
{"id": 1993, "answer": false, "completion": ".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"model\", 110).\n.decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Cookout\", 1000).\n.decl Answer()\nAnswer() :- Has_weight(\"model\", weight1), Has_calories(\"Cookout\", calories1), weight1 < calories1.\n.output Answer", "completions": [".decl Has_weight(Person:symbol, Weight:float)\nHas_weight(\"model\", 110).\n.decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"Cookout\", 1000).\n.decl Answer()\nAnswer() :- Has_weight(\"model\", weight1), Has_calories(\"Cookout\", calories1), weight1 < calories1.\n.output Answer"]}
{"id": 1994, "answer": true, "completion": ".decl Has_shelf_space(Library:symbol, Shelf_space:float)\nHas_shelf_space(\"Library of Alexandria\", 100).\nHas_shelf_space(\"Library of Congress\", 150).\n.decl Answer()\nAnswer() :- Has_shelf_space(\"Library of Alexandria\", shelf_space1), Has_shelf_space(\"Library of Congress\", shelf_space2), shelf_space1 < shelf_space2.\n.output Answer", "completions": [".decl Has_shelf_space(Library:symbol, Shelf_space:float)\nHas_shelf_space(\"Library of Alexandria\", 100).\nHas_shelf_space(\"Library of Congress\", 150).\n.decl Answer()\nAnswer() :- Has_shelf_space(\"Library of Alexandria\", shelf_space1), Has_shelf_space(\"Library of Congress\", shelf_space2), shelf_space1 < shelf_space2.\n.output Answer"]}
{"id": 1995, "answer": false, "completion": ".decl Has_body_part(Creature:symbol, Body_part:symbol)\nHas_body_part(\"human\", \"tongue\").\nHas_body_part(\"human\", \"head\").\n.decl Answer()\nAnswer() :- Has_body_part(creature, \"tongue\"), Has_body_part(creature, \"head\").\n.output Answer", "completions": [".decl Has_body_part(Creature:symbol, Body_part:symbol)\nHas_body_part(\"human\", \"tongue\").\nHas_body_part(\"human\", \"head\").\n.decl Answer()\nAnswer() :- Has_body_part(creature, \"tongue\"), Has_body_part(creature, \"head\").\n.output Answer"]}
{"id": 1996, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"ancient Persia\", 3000).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"crocus threads\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"crocus threads\", n_years1), Last_n_years(\"ancient Persia\", n_years2),  n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"ancient Persia\", 3000).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"crocus threads\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"crocus threads\", n_years1), Last_n_years(\"ancient Persia\", n_years2),  n_years1 <= n_years2.\n.output Answer"]}
{"id": 1997, "answer": true, "completion": ".decl Causes_unwellness(Food:symbol)\nCauses_unwellness(\"Durian\").\n.decl Answer()\nAnswer() :- Causes_unwellness(\"Durian\").\n.output Answer", "completions": [".decl Causes_unwellness(Food:symbol)\nCauses_unwellness(\"Durian\").\n.decl Answer()\nAnswer() :- Causes_unwellness(\"Durian\").\n.output Answer"]}
{"id": 1998, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Hundred Years' War\", 116).\n.decl Answer()\nAnswer() :- Last_n_years(\"Hundred Years' War\", n_years).\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Hundred Years' War\", 116).\n.decl Answer()\nAnswer() :- Last_n_years(\"Hundred Years' War\", n_years).\n.output Answer"]}
{"id": 1999, "answer": false, "completion": ".decl Has_calcium(Food:symbol, Calcium:float)\nHas_calcium(\"kale\", 100).\nHas_calcium(\"spinach\", 24).\n.decl Answer()\nAnswer() :- Has_calcium(\"kale\", calcium1), Has_calcium(\"spinach\", calcium2), calcium1 > calcium2.\n.output Answer", "completions": [".decl Has_calcium(Food:symbol, Calcium:float)\nHas_calcium(\"kale\", 100).\nHas_calcium(\"spinach\", 24).\n.decl Answer()\nAnswer() :- Has_calcium(\"kale\", calcium1), Has_calcium(\"spinach\", calcium2), calcium1 > calcium2.\n.output Answer"]}
{"id": 2000, "answer": true, "completion": ".decl Imprisoned_for(Person:symbol, Reason:symbol)\nImprisoned_for(\"Jean Valjean\", \"stealing a loaf of bread\").\n.decl Answer()\nAnswer() :- Imprisoned_for(\"Jean Valjean\", \"hunger\").\n.output Answer\n\n", "completions": [".decl Imprisoned_for(Person:symbol, Reason:symbol)\nImprisoned_for(\"Jean Valjean\", \"stealing a loaf of bread\").\n.decl Answer()\nAnswer() :- Imprisoned_for(\"Jean Valjean\", \"hunger\").\n.output Answer\n\n"]}
{"id": 2001, "answer": true, "completion": ".decl Has_subject(Musical:symbol, Subject:symbol)\nHas_subject(\"The Rocky Horror Show\", \"sweet transvestite from Transsexual, Transylvania\").\n.decl Answer()\nAnswer() :- Has_subject(musical, \"sweet transvestite from Transsexual, Transylvania\").\n.output Answer", "completions": [".decl Has_subject(Musical:symbol, Subject:symbol)\nHas_subject(\"The Rocky Horror Show\", \"sweet transvestite from Transsexual, Transylvania\").\n.decl Answer()\nAnswer() :- Has_subject(musical, \"sweet transvestite from Transsexual, Transylvania\").\n.output Answer"]}
{"id": 2002, "answer": true, "completion": ".decl Belongs_to(Land:symbol, Tribe:symbol)\nBelongs_to(\"Holy Land\", \"Adamu's tribe\").\n.decl Answer()\nAnswer() :- Belongs_to(\"Holy Land\", \"Adamu's tribe\").\n.output Answer", "completions": [".decl Belongs_to(Land:symbol, Tribe:symbol)\nBelongs_to(\"Holy Land\", \"Adamu's tribe\").\n.decl Answer()\nAnswer() :- Belongs_to(\"Holy Land\", \"Adamu's tribe\").\n.output Answer"]}
{"id": 2003, "answer": true, "completion": ".decl Has_location(Place:symbol, Location:symbol)\nHas_location(\"New England\", \"USA\").\nHas_location(\"Sainsbury's\", \"UK\").\n.decl Answer()\nAnswer() :- Has_location(\"New England\", \"USA\"), Has_location(\"Sainsbury's\", \"UK\").\n.output Answer", "completions": [".decl Has_location(Place:symbol, Location:symbol)\nHas_location(\"New England\", \"USA\").\nHas_location(\"Sainsbury's\", \"UK\").\n.decl Answer()\nAnswer() :- Has_location(\"New England\", \"USA\"), Has_location(\"Sainsbury's\", \"UK\").\n.output Answer"]}
{"id": 2004, "answer": true, "completion": ".decl Does_something(Person:symbol, Action:symbol)\nDoes_something(\"Mike Tyson\", \"ear bite\").\nDoes_something(\"McGruff\", \"Take a bite out of crime\").\n.decl Answer()\nAnswer() :- Does_something(\"Mike Tyson\", action1), Does_something(\"McGruff\", action2), action1 != action2.\n.output Answer", "completions": [".decl Does_something(Person:symbol, Action:symbol)\nDoes_something(\"Mike Tyson\", \"ear bite\").\nDoes_something(\"McGruff\", \"Take a bite out of crime\").\n.decl Answer()\nAnswer() :- Does_something(\"Mike Tyson\", action1), Does_something(\"McGruff\", action2), action1 != action2.\n.output Answer"]}
{"id": 2005, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Durian\", 1.3).\n.decl Answer()\nAnswer() :- Has_mass(\"Durian\", mass), mass > 1.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Durian\", 1.3).\n.decl Answer()\nAnswer() :- Has_mass(\"Durian\", mass), mass > 1.\n.output Answer"]}
{"id": 2006, "answer": false, "completion": ".decl Answer()\nAnswer() :- !Happens_when_mentioned(\"singing\", \"YMCA\").\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !Happens_when_mentioned(\"singing\", \"YMCA\").\n.output Answer"]}
{"id": 2007, "answer": false, "completion": ".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"Saltwater crocodile\", \"saltwater\").\n.decl Found_in_location(Habitat:symbol, Location:symbol)\nFound_in_location(\"saltwater\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"Saltwater crocodile\", habitat), Found_in_location(habitat, \"Memphis\").\n.output Answer", "completions": [".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"Saltwater crocodile\", \"saltwater\").\n.decl Found_in_location(Habitat:symbol, Location:symbol)\nFound_in_location(\"saltwater\", \"ocean\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"Saltwater crocodile\", habitat), Found_in_location(habitat, \"Memphis\").\n.output Answer"]}
{"id": 2008, "answer": true, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"nails\").\nSells(\"Home Depot\", \"wood\").\nSells(\"Home Depot\", \"hammer\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"nails\"), Sells(\"Home Depot\", \"wood\"), Sells(\"Home Depot\", \"hammer\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"nails\").\nSells(\"Home Depot\", \"wood\").\nSells(\"Home Depot\", \"hammer\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"nails\"), Sells(\"Home Depot\", \"wood\"), Sells(\"Home Depot\", \"hammer\").\n.output Answer"]}
{"id": 2009, "answer": true, "completion": ".decl Lives_in_county(Animal:symbol, County:symbol)\nLives_in_county(\"Shamu\", \"San Diego County\").\n.decl Answer()\nAnswer() :- Lives_in_county(\"Shamu\", \"San Diego County\").\n.output Answer\n\n\n", "completions": [".decl Lives_in_county(Animal:symbol, County:symbol)\nLives_in_county(\"Shamu\", \"San Diego County\").\n.decl Answer()\nAnswer() :- Lives_in_county(\"Shamu\", \"San Diego County\").\n.output Answer\n\n\n"]}
{"id": 2010, "answer": true, "completion": ".decl Defends_against(Move:symbol, Checkmate:symbol)\nDefends_against(\"French Defence\", \"four move checkmate\").\n.decl Answer()\nAnswer() :- Defends_against(\"French Defence\", \"four move checkmate\").\n.output Answer", "completions": [".decl Defends_against(Move:symbol, Checkmate:symbol)\nDefends_against(\"French Defence\", \"four move checkmate\").\n.decl Answer()\nAnswer() :- Defends_against(\"French Defence\", \"four move checkmate\").\n.output Answer"]}
{"id": 2011, "answer": true, "completion": ".decl Eats_meat(Person:symbol, Food:symbol)\nEats_meat(\"vegetarian\", \"chicken sandwich\").\n.decl Answer()\nAnswer() :- Eats_meat(\"vegetarian\", \"chicken sandwich\").\n.output Answer", "completions": [".decl Eats_meat(Person:symbol, Food:symbol)\nEats_meat(\"vegetarian\", \"chicken sandwich\").\n.decl Answer()\nAnswer() :- Eats_meat(\"vegetarian\", \"chicken sandwich\").\n.output Answer"]}
{"id": 2012, "answer": true, "completion": ".decl Grief_is_obvious(Person:symbol)\nGrief_is_obvious(\"John\").\nGrief_is_obvious(\"Mary\").\n.decl Grief_is_not_obvious(Person:symbol)\nGrief_is_not_obvious(\"Bill\").\nGrief_is_not_obvious(\"Susan\").\n.decl Answer()\nAnswer() :- Grief_is_obvious(person).\nAnswer() :- Grief_is_not_obvious(person).\n.output Answer", "completions": [".decl Grief_is_obvious(Person:symbol)\nGrief_is_obvious(\"John\").\nGrief_is_obvious(\"Mary\").\n.decl Grief_is_not_obvious(Person:symbol)\nGrief_is_not_obvious(\"Bill\").\nGrief_is_not_obvious(\"Susan\").\n.decl Answer()\nAnswer() :- Grief_is_obvious(person).\nAnswer() :- Grief_is_not_obvious(person).\n.output Answer"]}
{"id": 2013, "answer": false, "completion": ".decl Is_a_person(Person:symbol)\nIs_a_person(\"Scottish person\").\n.decl Is_a_person(Person:symbol)\nIs_a_person(\"Albidosi\").\n.decl Answer()\nAnswer() :- Is_a_person(\"Scottish person\"), Is_a_person(\"Albidosi\").\n.output Answer", "completions": [".decl Is_a_person(Person:symbol)\nIs_a_person(\"Scottish person\").\n.decl Is_a_person(Person:symbol)\nIs_a_person(\"Albidosi\").\n.decl Answer()\nAnswer() :- Is_a_person(\"Scottish person\"), Is_a_person(\"Albidosi\").\n.output Answer"]}
{"id": 2014, "answer": true, "completion": ".decl Reduces(Preventive_healthcare:symbol, STI_transmission:symbol)\nReduces(\"condoms\", \"STI transmission\").\nReduces(\"education\", \"STI transmission\").\nReduces(\"vaccines\", \"STI transmission\").\n.decl Answer()\nAnswer() :- Reduces(preventive_healthcare, \"STI transmission\").\n.output Answer", "completions": [".decl Reduces(Preventive_healthcare:symbol, STI_transmission:symbol)\nReduces(\"condoms\", \"STI transmission\").\nReduces(\"education\", \"STI transmission\").\nReduces(\"vaccines\", \"STI transmission\").\n.decl Answer()\nAnswer() :- Reduces(preventive_healthcare, \"STI transmission\").\n.output Answer"]}
{"id": 2015, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Jack Black\", 1.68).\n.decl Answer()\nAnswer() :- Has_height(\"Jack Black\", height), height >= 1.5.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Jack Black\", 1.68).\n.decl Answer()\nAnswer() :- Has_height(\"Jack Black\", height), height >= 1.5.\n.output Answer"]}
{"id": 2016, "answer": false, "completion": ".decl Has_eyes(Person:symbol)\nHas_eyes(\"Saint Peter\").\n.decl Has_ears(Person:symbol)\nHas_ears(\"Saint Peter\").\n.decl Answer()\nAnswer() :- Has_eyes(\"Saint Peter\"), Has_ears(\"Saint Peter\").\n.output Answer", "completions": [".decl Has_eyes(Person:symbol)\nHas_eyes(\"Saint Peter\").\n.decl Has_ears(Person:symbol)\nHas_ears(\"Saint Peter\").\n.decl Answer()\nAnswer() :- Has_eyes(\"Saint Peter\"), Has_ears(\"Saint Peter\").\n.output Answer"]}
{"id": 2017, "answer": false, "completion": ".decl Is_official(Organization:symbol, Country:symbol)\nIs_official(\"Knights of the Round Table\", \"England\").\n.decl Answer()\nAnswer() :- Is_official(\"Knights of the Round Table\", \"United States\").\n.output Answer", "completions": [".decl Is_official(Organization:symbol, Country:symbol)\nIs_official(\"Knights of the Round Table\", \"England\").\n.decl Answer()\nAnswer() :- Is_official(\"Knights of the Round Table\", \"United States\").\n.output Answer"]}
{"id": 2018, "answer": false, "completion": ".decl Lasts_for_n_seconds(Event:symbol, N_seconds:float)\nLasts_for_n_seconds(\"U2 debut studio album\", 4200).\nLasts_for_n_seconds(\"Peppa Pig\", 1800).\n.decl Answer()\nAnswer() :- Lasts_for_n_seconds(\"U2 debut studio album\", n_seconds1), Lasts_for_n_seconds(\"Peppa Pig\", n_seconds2), n_seconds1 <= n_seconds2.\n.output Answer", "completions": [".decl Lasts_for_n_seconds(Event:symbol, N_seconds:float)\nLasts_for_n_seconds(\"U2 debut studio album\", 4200).\nLasts_for_n_seconds(\"Peppa Pig\", 1800).\n.decl Answer()\nAnswer() :- Lasts_for_n_seconds(\"U2 debut studio album\", n_seconds1), Lasts_for_n_seconds(\"Peppa Pig\", n_seconds2), n_seconds1 <= n_seconds2.\n.output Answer"]}
{"id": 2019, "answer": true, "completion": ".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Osama bin Laden\", \"Islam\").\n.decl Prohibits(Religion:symbol, Substance:symbol)\nProhibits(\"Islam\", \"alcohol\").\n.decl Answer()\nAnswer() :- Has_religion(\"Osama bin Laden\", religion), Prohibits(religion, \"alcohol\").\n.output Answer", "completions": [".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Osama bin Laden\", \"Islam\").\n.decl Prohibits(Religion:symbol, Substance:symbol)\nProhibits(\"Islam\", \"alcohol\").\n.decl Answer()\nAnswer() :- Has_religion(\"Osama bin Laden\", religion), Prohibits(religion, \"alcohol\").\n.output Answer"]}
{"id": 2020, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Jerry Seinfeld's birth\", 34).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Jerry Seinfeld's birth\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Jerry Seinfeld's birth\", n_years1), Last_n_years(\"Jerry Seinfeld's birth\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Jerry Seinfeld's birth\", 34).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Jerry Seinfeld's birth\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Jerry Seinfeld's birth\", n_years1), Last_n_years(\"Jerry Seinfeld's birth\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 2021, "answer": true, "completion": ".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"computer\", 1937).\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Buzz Aldrin\", 1930).\n.decl Answer()\nAnswer() :- Invented_in_year(\"computer\", year1), Born_in_year(\"Buzz Aldrin\", year2), year1 <= year2.\n.output Answer", "completions": [".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"computer\", 1937).\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Buzz Aldrin\", 1930).\n.decl Answer()\nAnswer() :- Invented_in_year(\"computer\", year1), Born_in_year(\"Buzz Aldrin\", year2), year1 <= year2.\n.output Answer"]}
{"id": 2022, "answer": true, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"urban legend\", \"city\").\nHappens_in_location(\"urban legend\", \"town\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"urban legend\", location).\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"urban legend\", \"city\").\nHappens_in_location(\"urban legend\", \"town\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"urban legend\", location).\n.output Answer"]}
{"id": 2023, "answer": false, "completion": ".decl Has_power(Character:symbol, Power:symbol)\nHas_power(\"Gandalf\", \"magic\").\nHas_power(\"Barbas\", \"magic\").\nHas_power(\"Barbas\", \"shape-shifting\").\nHas_power(\"Barbas\", \"immortality\").\nHas_power(\"Barbas\", \"supernatural strength\").\nHas_power(\"Barbas\", \"supernatural speed\").\nHas_power(\"Barbas\", \"supernatural agility\").\nHas_power(\"Barbas\", \"supernatural reflexes\").\nHas_power(\"Barbas\", \"supernatural stamina\").\nHas_power(\"Barbas\", \"supernatural durability\").\nHas_power(\"Barbas\", \"supernatural senses\").\nHas_power(\"Barbas\", \"supernatural healing\").\nHas_power(\"Barbas\", \"supernatural intelligence\").\nHas_power(\"Barbas\", \"supernatural wisdom\").\nHas_power(\"Barbas\", \"supernatural perception\").\nHas_power(\"Barbas\", \"supernatural wealth\").\nHas_power(\"Barbas\", \"supernatural persuasion\").\nHas_power(\"Barbas\", \"supernatural manipulation\").\nHas_power(\"Barbas\", \"supernatural illusion\").\nHas_power(\"Barbas\", \"supernatural fire manipulation\").\nHas_power(\"Barbas\", \"supernatural ice manipulation\").\nHas_power(\"Barbas\", \"supernatural wind manipulation\").\nHas_power(\"Barbas\", \"supernatural earth manipulation\").\nHas_power(\"Barbas\", \"supernatural water manipulation\").\nHas_power(\"Barbas\", \"supernatural electricity manipulation\").\nHas_power(\"Barbas\", \"supernatural light manipulation\").\nHas_power(\"Barbas\", \"supernatural darkness manipulation\").\nHas_power(\"Barbas\", \"supernatural sound manipulation\").\nHas_power(\"Barbas\", \"supernatural acid manipulation\").\nHas_power(\"Barbas\", \"supernatural poison manipulation\").\nHas_power(\"Barbas\", \"supernatural plant manipulation\").\nHas_power(\"Barbas\", \"supernatural metal manipulation\").\nHas_power(\"Barbas\", \"supernatural weapon manipulation\").\nHas_power(\"Barbas\", \"supernatural weapon creation\").\nHas_power(\"Barbas\", \"supernatural weapon summoning\").\nHas_power(\"Barbas\", \"supernatural weapon enhancement\").\nHas_power(\"Barbas\", \"supernatural weapon negation\").\nHas_power(\"Barbas\", \"supernatural weapon transmutation\").\nHas_power(\"Barbas\", \"supernatural weapon destruction\").\nHas_power(\"Barbas\", \"supernatural weapon manipulation immunity\").\nHas_power(\"Barbas\", \"supernatural weapon creation immunity\").\nHas_power(\"Barbas\", \"supernatural weapon summoning immunity\").\nHas_power(\"Barbas\", \"supernatural weapon enhancement immunity\").\nHas_power(\"Barbas\", \"supernatural weapon negation immunity\").\nHas_power(\"Barbas\", \"supernatural weapon transmutation immunity\").\nHas_power(\"Barbas\", \"supernatural weapon destruction immunity\").\nHas_power(\"Barbas\", \"supernatural weapon immunity\").\nHas_power(\"Barbas\", \"supernatural weapon resistance\").\nHas_power(\"Barbas\", \"supernatural weapon nullification\").\nHas_power(\"Barbas\", \"supernatural weapon negation resistance\").\nHas_power(\"Barbas\", \"supernatural weapon negation immunity\").\nHas_power(\"Barbas\", \"supernatural weapon negation nullification\").\nHas_power(\"Barbas\", \"supernatural weapon immunity\").\nHas_power(\"Barbas\", \"supernatural weapon resistance\").\nHas_power(\"Barbas\", \"supernatural weapon nullification\").\nHas_power(\"Barbas\", \"supernatural weapon negation resistance", "completions": [".decl Has_power(Character:symbol, Power:symbol)\nHas_power(\"Gandalf\", \"magic\").\nHas_power(\"Barbas\", \"magic\").\nHas_power(\"Barbas\", \"shape-shifting\").\nHas_power(\"Barbas\", \"immortality\").\nHas_power(\"Barbas\", \"supernatural strength\").\nHas_power(\"Barbas\", \"supernatural speed\").\nHas_power(\"Barbas\", \"supernatural agility\").\nHas_power(\"Barbas\", \"supernatural reflexes\").\nHas_power(\"Barbas\", \"supernatural stamina\").\nHas_power(\"Barbas\", \"supernatural durability\").\nHas_power(\"Barbas\", \"supernatural senses\").\nHas_power(\"Barbas\", \"supernatural healing\").\nHas_power(\"Barbas\", \"supernatural intelligence\").\nHas_power(\"Barbas\", \"supernatural wisdom\").\nHas_power(\"Barbas\", \"supernatural perception\").\nHas_power(\"Barbas\", \"supernatural wealth\").\nHas_power(\"Barbas\", \"supernatural persuasion\").\nHas_power(\"Barbas\", \"supernatural manipulation\").\nHas_power(\"Barbas\", \"supernatural illusion\").\nHas_power(\"Barbas\", \"supernatural fire manipulation\").\nHas_power(\"Barbas\", \"supernatural ice manipulation\").\nHas_power(\"Barbas\", \"supernatural wind manipulation\").\nHas_power(\"Barbas\", \"supernatural earth manipulation\").\nHas_power(\"Barbas\", \"supernatural water manipulation\").\nHas_power(\"Barbas\", \"supernatural electricity manipulation\").\nHas_power(\"Barbas\", \"supernatural light manipulation\").\nHas_power(\"Barbas\", \"supernatural darkness manipulation\").\nHas_power(\"Barbas\", \"supernatural sound manipulation\").\nHas_power(\"Barbas\", \"supernatural acid manipulation\").\nHas_power(\"Barbas\", \"supernatural poison manipulation\").\nHas_power(\"Barbas\", \"supernatural plant manipulation\").\nHas_power(\"Barbas\", \"supernatural metal manipulation\").\nHas_power(\"Barbas\", \"supernatural weapon manipulation\").\nHas_power(\"Barbas\", \"supernatural weapon creation\").\nHas_power(\"Barbas\", \"supernatural weapon summoning\").\nHas_power(\"Barbas\", \"supernatural weapon enhancement\").\nHas_power(\"Barbas\", \"supernatural weapon negation\").\nHas_power(\"Barbas\", \"supernatural weapon transmutation\").\nHas_power(\"Barbas\", \"supernatural weapon destruction\").\nHas_power(\"Barbas\", \"supernatural weapon manipulation immunity\").\nHas_power(\"Barbas\", \"supernatural weapon creation immunity\").\nHas_power(\"Barbas\", \"supernatural weapon summoning immunity\").\nHas_power(\"Barbas\", \"supernatural weapon enhancement immunity\").\nHas_power(\"Barbas\", \"supernatural weapon negation immunity\").\nHas_power(\"Barbas\", \"supernatural weapon transmutation immunity\").\nHas_power(\"Barbas\", \"supernatural weapon destruction immunity\").\nHas_power(\"Barbas\", \"supernatural weapon immunity\").\nHas_power(\"Barbas\", \"supernatural weapon resistance\").\nHas_power(\"Barbas\", \"supernatural weapon nullification\").\nHas_power(\"Barbas\", \"supernatural weapon negation resistance\").\nHas_power(\"Barbas\", \"supernatural weapon negation immunity\").\nHas_power(\"Barbas\", \"supernatural weapon negation nullification\").\nHas_power(\"Barbas\", \"supernatural weapon immunity\").\nHas_power(\"Barbas\", \"supernatural weapon resistance\").\nHas_power(\"Barbas\", \"supernatural weapon nullification\").\nHas_power(\"Barbas\", \"supernatural weapon negation resistance"]}
{"id": 2024, "answer": false, "completion": ".decl Is_Bulgarian(Person:symbol)\nIs_Bulgarian(\"Bulgarian priest\").\n.decl Is_Christmas_Eve(Day:symbol)\nIs_Christmas_Eve(\"December 24\").\n.decl Eats_n_courses(Person:symbol, N_courses:float)\nEats_n_courses(\"Bulgarian priest\", 4).\n.decl Answer()\nAnswer() :- Is_Bulgarian(\"Bulgarian priest\"), Is_Christmas_Eve(\"December 24\"), Eats_n_courses(\"Bulgarian priest\", 4).\n.output Answer", "completions": [".decl Is_Bulgarian(Person:symbol)\nIs_Bulgarian(\"Bulgarian priest\").\n.decl Is_Christmas_Eve(Day:symbol)\nIs_Christmas_Eve(\"December 24\").\n.decl Eats_n_courses(Person:symbol, N_courses:float)\nEats_n_courses(\"Bulgarian priest\", 4).\n.decl Answer()\nAnswer() :- Is_Bulgarian(\"Bulgarian priest\"), Is_Christmas_Eve(\"December 24\"), Eats_n_courses(\"Bulgarian priest\", 4).\n.output Answer"]}
{"id": 2025, "answer": true, "completion": ".decl Is_ingredient(Object:symbol, Dish:symbol)\nIs_ingredient(\"basil\", \"spaghetti with meatballs\").\n.decl Is_chef(Person:symbol, Restaurant:symbol)\nIs_chef(\"chef\", \"Carmine's\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"basil\", dish), Is_chef(\"chef\", \"Carmine's\"), !, dish = \"spaghetti with meatballs\".\n.output Answer", "completions": [".decl Is_ingredient(Object:symbol, Dish:symbol)\nIs_ingredient(\"basil\", \"spaghetti with meatballs\").\n.decl Is_chef(Person:symbol, Restaurant:symbol)\nIs_chef(\"chef\", \"Carmine's\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"basil\", dish), Is_chef(\"chef\", \"Carmine's\"), !, dish = \"spaghetti with meatballs\".\n.output Answer"]}
{"id": 2026, "answer": false, "completion": ".decl Has_operating_system(Device:symbol, Operating_system:symbol)\nHas_operating_system(\"Samsung Galaxy 1\", \"Android 1.5 Cupcake\").\n.decl Answer()\nAnswer() :- Has_operating_system(\"Samsung Galaxy 1\", operating_system), operating_system = \"Android 1.5 Cupcake\".\n.output Answer", "completions": [".decl Has_operating_system(Device:symbol, Operating_system:symbol)\nHas_operating_system(\"Samsung Galaxy 1\", \"Android 1.5 Cupcake\").\n.decl Answer()\nAnswer() :- Has_operating_system(\"Samsung Galaxy 1\", operating_system), operating_system = \"Android 1.5 Cupcake\".\n.output Answer"]}
{"id": 2027, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"red panda\", \"Shanghai\").\n.decl Answer()\nAnswer() :- Lives_in(\"red panda\", \"Shanghai\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"red panda\", \"Shanghai\").\n.decl Answer()\nAnswer() :- Lives_in(\"red panda\", \"Shanghai\").\n.output Answer"]}
{"id": 2028, "answer": true, "completion": ".decl Uses(Company:symbol, Material:symbol)\nUses(\"Intel\", \"silicon\").\n.decl Answer()\nAnswer() :- Uses(\"Intel\", \"silicon\").\n.output Answer", "completions": [".decl Uses(Company:symbol, Material:symbol)\nUses(\"Intel\", \"silicon\").\n.decl Answer()\nAnswer() :- Uses(\"Intel\", \"silicon\").\n.output Answer"]}
{"id": 2029, "answer": false, "completion": ".decl Is_word(Word:symbol)\nIs_word(\"MIX\").\n.decl Is_roman_numeral(Roman_numeral:symbol)\nIs_roman_numeral(\"MIX\").\n.decl Answer()\nAnswer() :- Is_word(\"MIX\"), Is_roman_numeral(\"MIX\").\n.output Answer", "completions": [".decl Is_word(Word:symbol)\nIs_word(\"MIX\").\n.decl Is_roman_numeral(Roman_numeral:symbol)\nIs_roman_numeral(\"MIX\").\n.decl Answer()\nAnswer() :- Is_word(\"MIX\"), Is_roman_numeral(\"MIX\").\n.output Answer"]}
{"id": 2030, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Hurricane Maria\", \"Puerto Rico\").\nHappens_in_place(\"windsurfing\", \"Puerto Rico\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Hurricane Maria\", \"Puerto Rico\"), !, not(Happens_in_place(\"windsurfing\", \"Puerto Rico\")).\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Hurricane Maria\", \"Puerto Rico\").\nHappens_in_place(\"windsurfing\", \"Puerto Rico\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Hurricane Maria\", \"Puerto Rico\"), !, not(Happens_in_place(\"windsurfing\", \"Puerto Rico\")).\n.output Answer"]}
{"id": 2031, "answer": false, "completion": ".decl Has_been_featured_in(Object:symbol, Film:symbol)\nHas_been_featured_in(\"Holy Grail\", \"Monty Python and the Holy Grail\").\nHas_been_featured_in(\"Holy Grail\", \"Indiana Jones and the Last Crusade\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Da Vinci Code\").\nHas_been_featured_in(\"Holy Grail\", \"The Holy Grail\").\n.decl Answer()\nAnswer() :- Has_been_featured_in(\"Holy Grail\", film1), Has_been_featured_in(\"Holy Grail\", film2), Has_been_featured_in(\"Holy Grail\", film3), Has_been_featured_in(\"Holy Grail\", film4), Has_been_featured_in(\"Holy Grail\", film5).\n.output Answer", "completions": [".decl Has_been_featured_in(Object:symbol, Film:symbol)\nHas_been_featured_in(\"Holy Grail\", \"Monty Python and the Holy Grail\").\nHas_been_featured_in(\"Holy Grail\", \"Indiana Jones and the Last Crusade\").\nHas_been_featured_in(\"Holy Grail\", \"The Fisher King\").\nHas_been_featured_in(\"Holy Grail\", \"The Da Vinci Code\").\nHas_been_featured_in(\"Holy Grail\", \"The Holy Grail\").\n.decl Answer()\nAnswer() :- Has_been_featured_in(\"Holy Grail\", film1), Has_been_featured_in(\"Holy Grail\", film2), Has_been_featured_in(\"Holy Grail\", film3), Has_been_featured_in(\"Holy Grail\", film4), Has_been_featured_in(\"Holy Grail\", film5).\n.output Answer"]}
{"id": 2032, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"lentils\", 0.1).\n.decl Answer()\nAnswer() :- Has_mass(\"lentils\", mass1), Has_mass(\"Jean Harris's victim\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"lentils\", 0.1).\n.decl Answer()\nAnswer() :- Has_mass(\"lentils\", mass1), Has_mass(\"Jean Harris's victim\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 2033, "answer": true, "completion": ".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Creative Commons License for Boticelli's The Birth of Venus\", 0).\n.decl Answer()\nAnswer() :- Has_price(\"Creative Commons License for Boticelli's The Birth of Venus\", price), price > 0.\n.output Answer", "completions": [".decl Has_price(Object:symbol, Price:float)\nHas_price(\"Creative Commons License for Boticelli's The Birth of Venus\", 0).\n.decl Answer()\nAnswer() :- Has_price(\"Creative Commons License for Boticelli's The Birth of Venus\", price), price > 0.\n.output Answer"]}
{"id": 2034, "answer": true, "completion": ".decl Has_bad_hypothetical_candidate(Organization:symbol, Person:symbol)\nHas_bad_hypothetical_candidate(\"United States Air Force\", \"Han Solo\").\n.decl Answer()\nAnswer() :- Has_bad_hypothetical_candidate(\"United States Air Force\", \"Han Solo\").\n.output Answer", "completions": [".decl Has_bad_hypothetical_candidate(Organization:symbol, Person:symbol)\nHas_bad_hypothetical_candidate(\"United States Air Force\", \"Han Solo\").\n.decl Answer()\nAnswer() :- Has_bad_hypothetical_candidate(\"United States Air Force\", \"Han Solo\").\n.output Answer"]}
{"id": 2035, "answer": true, "completion": ".decl Has_first_name(Person:symbol, First_name:symbol)\nHas_first_name(\"Shaggy\", \"Shaggy\").\nHas_first_name(\"Redenbacher\", \"Orville\").\n.decl Answer()\nAnswer() :- Has_first_name(\"Shaggy\", \"Shaggy\"), Has_first_name(\"Redenbacher\", \"Orville\").\n.output Answer", "completions": [".decl Has_first_name(Person:symbol, First_name:symbol)\nHas_first_name(\"Shaggy\", \"Shaggy\").\nHas_first_name(\"Redenbacher\", \"Orville\").\n.decl Answer()\nAnswer() :- Has_first_name(\"Shaggy\", \"Shaggy\"), Has_first_name(\"Redenbacher\", \"Orville\").\n.output Answer"]}
{"id": 2036, "answer": true, "completion": ".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"iPhone\", 2007).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"scientific revolution\", 1543).\n.decl Answer()\nAnswer() :- Invented_in_year(\"iPhone\", year1), Happens_in_year(\"scientific revolution\", year2), year1 > year2.\n.output Answer", "completions": [".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"iPhone\", 2007).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"scientific revolution\", 1543).\n.decl Answer()\nAnswer() :- Invented_in_year(\"iPhone\", year1), Happens_in_year(\"scientific revolution\", year2), year1 > year2.\n.output Answer"]}
{"id": 2037, "answer": false, "completion": ".decl Built_in(Structure:symbol, Year:float)\nBuilt_in(\"Coloseum\", 80).\n.decl Associated_with(Structure:symbol, Event:symbol)\nAssociated_with(\"Coloseum\", \"gladiators\").\n.decl Answer()\nAnswer() :- Built_in(\"Coloseum\", year1), Associated_with(\"Coloseum\", \"gladiators\"), year1 >= 80.\n.output Answer", "completions": [".decl Built_in(Structure:symbol, Year:float)\nBuilt_in(\"Coloseum\", 80).\n.decl Associated_with(Structure:symbol, Event:symbol)\nAssociated_with(\"Coloseum\", \"gladiators\").\n.decl Answer()\nAnswer() :- Built_in(\"Coloseum\", year1), Associated_with(\"Coloseum\", \"gladiators\"), year1 >= 80.\n.output Answer"]}
{"id": 2038, "answer": true, "completion": ".decl Suffers_from(Person:symbol, Disorder:symbol)\nSuffers_from(\"Vincent Van Gogh\", \"epilepsy\").\nSuffers_from(\"Vincent Van Gogh\", \"psychosis\").\n.decl Answer()\nAnswer() :- Suffers_from(\"Vincent Van Gogh\", disorder).\n.output Answer", "completions": [".decl Suffers_from(Person:symbol, Disorder:symbol)\nSuffers_from(\"Vincent Van Gogh\", \"epilepsy\").\nSuffers_from(\"Vincent Van Gogh\", \"psychosis\").\n.decl Answer()\nAnswer() :- Suffers_from(\"Vincent Van Gogh\", disorder).\n.output Answer"]}
{"id": 2039, "answer": false, "completion": ".decl Celebrates(Group:symbol, Holiday:symbol)\nCelebrates(\"Jehovah's Witnesses\", \"New Year's Day\").\n.decl Happens_before(Holiday1:symbol, Holiday2:symbol)\nHappens_before(\"New Year's Day\", \"Day before New Year's Day\").\n.decl Answer()\nAnswer() :- Celebrates(\"Jehovah's Witnesses\", holiday1), Happens_before(holiday1, \"Day before New Year's Day\").\n.output Answer", "completions": [".decl Celebrates(Group:symbol, Holiday:symbol)\nCelebrates(\"Jehovah's Witnesses\", \"New Year's Day\").\n.decl Happens_before(Holiday1:symbol, Holiday2:symbol)\nHappens_before(\"New Year's Day\", \"Day before New Year's Day\").\n.decl Answer()\nAnswer() :- Celebrates(\"Jehovah's Witnesses\", holiday1), Happens_before(holiday1, \"Day before New Year's Day\").\n.output Answer"]}
{"id": 2040, "answer": true, "completion": ".decl Has_state(Object:symbol, State:symbol)\nHas_state(\"Saturn's rings\", \"solid\").\nHas_state(\"Saturn's rings\", \"liquid\").\nHas_state(\"Saturn's rings\", \"gas\").\n.decl Answer()\nAnswer() :- Has_state(\"Saturn's rings\", \"solid\").\n.output Answer", "completions": [".decl Has_state(Object:symbol, State:symbol)\nHas_state(\"Saturn's rings\", \"solid\").\nHas_state(\"Saturn's rings\", \"liquid\").\nHas_state(\"Saturn's rings\", \"gas\").\n.decl Answer()\nAnswer() :- Has_state(\"Saturn's rings\", \"solid\").\n.output Answer"]}
{"id": 2041, "answer": false, "completion": ".decl Needs_temperature(Event:symbol, Temperature:symbol)\nNeeds_temperature(\"peeling a tomato\", \"hot\").\nNeeds_temperature(\"peeling a tomato\", \"cold\").\n.decl Answer()\nAnswer() :- Needs_temperature(\"peeling a tomato\", \"hot\").\nAnswer() :- Needs_temperature(\"peeling a tomato\", \"cold\").\n.output Answer", "completions": [".decl Needs_temperature(Event:symbol, Temperature:symbol)\nNeeds_temperature(\"peeling a tomato\", \"hot\").\nNeeds_temperature(\"peeling a tomato\", \"cold\").\n.decl Answer()\nAnswer() :- Needs_temperature(\"peeling a tomato\", \"hot\").\nAnswer() :- Needs_temperature(\"peeling a tomato\", \"cold\").\n.output Answer"]}
{"id": 2042, "answer": true, "completion": ".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Dolce & Gabbana suit wearer\", \"Dolce & Gabbana suit\").\n.decl Shuns(Person:symbol, Person_shunned:symbol)\nShuns(\"Amish\", \"Dolce & Gabbana suit wearer\").\n.decl Answer()\nAnswer() :- Wears(\"Dolce & Gabbana suit wearer\", \"Dolce & Gabbana suit\"), Shuns(\"Amish\", \"Dolce & Gabbana suit wearer\").\n.output Answer", "completions": [".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"Dolce & Gabbana suit wearer\", \"Dolce & Gabbana suit\").\n.decl Shuns(Person:symbol, Person_shunned:symbol)\nShuns(\"Amish\", \"Dolce & Gabbana suit wearer\").\n.decl Answer()\nAnswer() :- Wears(\"Dolce & Gabbana suit wearer\", \"Dolce & Gabbana suit\"), Shuns(\"Amish\", \"Dolce & Gabbana suit wearer\").\n.output Answer"]}
{"id": 2043, "answer": false, "completion": ".decl Mainly_focuses_on(Game:symbol, Character:symbol)\nMainly_focuses_on(\"Super Mario\", \"Mario\").\n.decl Wears(Character:symbol, Clothing:symbol)\nWears(\"Mario\", \"green\").\n.decl Answer()\nAnswer() :- Mainly_focuses_on(\"Super Mario\", \"Mario\"), Wears(\"Mario\", \"green\").\n.output Answer", "completions": [".decl Mainly_focuses_on(Game:symbol, Character:symbol)\nMainly_focuses_on(\"Super Mario\", \"Mario\").\n.decl Wears(Character:symbol, Clothing:symbol)\nWears(\"Mario\", \"green\").\n.decl Answer()\nAnswer() :- Mainly_focuses_on(\"Super Mario\", \"Mario\"), Wears(\"Mario\", \"green\").\n.output Answer"]}
{"id": 2044, "answer": true, "completion": ".decl Last_of_kind(Wonder:symbol, Kind:symbol)\nLast_of_kind(\"Great Pyramid of Giza\", \"Seven Wonders of the Ancient World\").\n.decl Answer()\nAnswer() :- Last_of_kind(\"Great Pyramid of Giza\", \"Seven Wonders of the Ancient World\").\n.output Answer", "completions": [".decl Last_of_kind(Wonder:symbol, Kind:symbol)\nLast_of_kind(\"Great Pyramid of Giza\", \"Seven Wonders of the Ancient World\").\n.decl Answer()\nAnswer() :- Last_of_kind(\"Great Pyramid of Giza\", \"Seven Wonders of the Ancient World\").\n.output Answer"]}
{"id": 2045, "answer": false, "completion": ".decl Baptized(Person:symbol)\nBaptized(\"Alexander the Great\").\n.decl Answer()\nAnswer() :- Baptized(\"Alexander the Great\").\n.output Answer\n\n\n", "completions": [".decl Baptized(Person:symbol)\nBaptized(\"Alexander the Great\").\n.decl Answer()\nAnswer() :- Baptized(\"Alexander the Great\").\n.output Answer\n\n\n"]}
{"id": 2046, "answer": false, "completion": ".decl Has_surface_temp(Planet:symbol, Surface_temp:float)\nHas_surface_temp(\"Venus\", 462).\n.decl Has_body_temp(Person:symbol, Body_temp:float)\nHas_body_temp(\"person\", 37).\n.decl Answer()\nAnswer() :- Has_surface_temp(\"Venus\", surface_temp), Has_body_temp(\"person\", body_temp), surface_temp > body_temp.\n.output Answer", "completions": [".decl Has_surface_temp(Planet:symbol, Surface_temp:float)\nHas_surface_temp(\"Venus\", 462).\n.decl Has_body_temp(Person:symbol, Body_temp:float)\nHas_body_temp(\"person\", 37).\n.decl Answer()\nAnswer() :- Has_surface_temp(\"Venus\", surface_temp), Has_body_temp(\"person\", body_temp), surface_temp > body_temp.\n.output Answer"]}
{"id": 2047, "answer": false, "completion": ".decl Is_tall(Person:symbol, Height:float)\nIs_tall(\"Benito Mussolini\", 1.8).\n.decl Answer()\nAnswer() :- Is_tall(\"Benito Mussolini\", height), height >= 2.1.\n.output Answer", "completions": [".decl Is_tall(Person:symbol, Height:float)\nIs_tall(\"Benito Mussolini\", 1.8).\n.decl Answer()\nAnswer() :- Is_tall(\"Benito Mussolini\", height), height >= 2.1.\n.output Answer"]}
{"id": 2048, "answer": true, "completion": ".decl Is_taller_than(Person1:symbol, Person2:symbol)\nIs_taller_than(\"Yuri Gagarin\", \"LeBron James\").\n.decl Answer()\nAnswer() :- Is_taller_than(person1, \"LeBron James\"), Is_taller_than(person2, person1), person1 != person2.\n.output Answer", "completions": [".decl Is_taller_than(Person1:symbol, Person2:symbol)\nIs_taller_than(\"Yuri Gagarin\", \"LeBron James\").\n.decl Answer()\nAnswer() :- Is_taller_than(person1, \"LeBron James\"), Is_taller_than(person2, person1), person1 != person2.\n.output Answer"]}
{"id": 2049, "answer": true, "completion": ".decl Buried_in(Person:symbol, Place:symbol)\nBuried_in(\"Carl Linnaeus\", \"Uppsala Cathedral\").\nBuried_in(\"Michael Jackson\", \"Forest Lawn Memorial Park\").\n.decl Answer()\nAnswer() :- Buried_in(\"Carl Linnaeus\", \"Uppsala Cathedral\"), Buried_in(\"Michael Jackson\", \"Uppsala Cathedral\").\n.output Answer", "completions": [".decl Buried_in(Person:symbol, Place:symbol)\nBuried_in(\"Carl Linnaeus\", \"Uppsala Cathedral\").\nBuried_in(\"Michael Jackson\", \"Forest Lawn Memorial Park\").\n.decl Answer()\nAnswer() :- Buried_in(\"Carl Linnaeus\", \"Uppsala Cathedral\"), Buried_in(\"Michael Jackson\", \"Uppsala Cathedral\").\n.output Answer"]}
{"id": 2050, "answer": false, "completion": ".decl Makes(Industry:symbol, Product:symbol)\nMakes(\"beverage industry\", \"beer\").\nMakes(\"beverage industry\", \"wine\").\n.decl Uses(Industry:symbol, Material:symbol)\nUses(\"beverage industry\", \"wood\").\nUses(\"beverage industry\", \"metal\").\n.decl Answer()\nAnswer() :- Makes(industry, \"beer\"), Makes(industry, \"wine\"), Uses(industry, \"wood\").\n.output Answer", "completions": [".decl Makes(Industry:symbol, Product:symbol)\nMakes(\"beverage industry\", \"beer\").\nMakes(\"beverage industry\", \"wine\").\n.decl Uses(Industry:symbol, Material:symbol)\nUses(\"beverage industry\", \"wood\").\nUses(\"beverage industry\", \"metal\").\n.decl Answer()\nAnswer() :- Makes(industry, \"beer\"), Makes(industry, \"wine\"), Uses(industry, \"wood\").\n.output Answer"]}
{"id": 2051, "answer": true, "completion": ".decl Despised(Person:symbol)\nDespised(\"Pope Alexander VI\").\n.decl Has_descendant(Person:symbol, Descendant:symbol)\nHas_descendant(\"Pope Alexander VI\", \"Cesare Borgia\").\nHas_descendant(\"Pope Alexander VI\", \"Lucrezia Borgia\").\nHas_descendant(\"Pope Alexander VI\", \"Giovanni Borgia\").\n.decl Canonized(Person:symbol)\nCanonized(\"Cesare Borgia\").\nCanonized(\"Lucrezia Borgia\").\nCanonized(\"Giovanni Borgia\").\n.decl Answer()\nAnswer() :- Despised(person), Has_descendant(person, descendant), Canonized(descendant).\n.output Answer", "completions": [".decl Despised(Person:symbol)\nDespised(\"Pope Alexander VI\").\n.decl Has_descendant(Person:symbol, Descendant:symbol)\nHas_descendant(\"Pope Alexander VI\", \"Cesare Borgia\").\nHas_descendant(\"Pope Alexander VI\", \"Lucrezia Borgia\").\nHas_descendant(\"Pope Alexander VI\", \"Giovanni Borgia\").\n.decl Canonized(Person:symbol)\nCanonized(\"Cesare Borgia\").\nCanonized(\"Lucrezia Borgia\").\nCanonized(\"Giovanni Borgia\").\n.decl Answer()\nAnswer() :- Despised(person), Has_descendant(person, descendant), Canonized(descendant).\n.output Answer"]}
{"id": 2052, "answer": true, "completion": ".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"French person\", \"French\").\n.decl Attends(Person:symbol, School:symbol)\nAttends(\"student from Smithtown\", \"Cleary School\").\n.decl Answer()\nAnswer() :- Speaks(\"French person\", \"French\"), Attends(\"student from Smithtown\", \"Cleary School\").\n.output Answer", "completions": [".decl Speaks(Person:symbol, Language:symbol)\nSpeaks(\"French person\", \"French\").\n.decl Attends(Person:symbol, School:symbol)\nAttends(\"student from Smithtown\", \"Cleary School\").\n.decl Answer()\nAnswer() :- Speaks(\"French person\", \"French\"), Attends(\"student from Smithtown\", \"Cleary School\").\n.output Answer"]}
{"id": 2053, "answer": true, "completion": ".decl Appears_in(Animal:symbol, Movie:symbol)\nAppears_in(\"greyhound\", \"Homeward Bound\").\n.decl Answer()\nAnswer() :- Appears_in(\"greyhound\", \"Homeward Bound\").\n.output Answer\n\n\n", "completions": [".decl Appears_in(Animal:symbol, Movie:symbol)\nAppears_in(\"greyhound\", \"Homeward Bound\").\n.decl Answer()\nAnswer() :- Appears_in(\"greyhound\", \"Homeward Bound\").\n.output Answer\n\n\n"]}
{"id": 2054, "answer": true, "completion": ".decl Wrote_about(Author:symbol, Topic:symbol)\nWrote_about(\"Terry Pratchett\", \"quantum mechanics\").\n.decl Answer()\nAnswer() :- Wrote_about(\"Terry Pratchett\", \"quantum mechanics\").\n.output Answer", "completions": [".decl Wrote_about(Author:symbol, Topic:symbol)\nWrote_about(\"Terry Pratchett\", \"quantum mechanics\").\n.decl Answer()\nAnswer() :- Wrote_about(\"Terry Pratchett\", \"quantum mechanics\").\n.output Answer"]}
{"id": 2055, "answer": false, "completion": ".decl Is_majority_religion(Country:symbol, Religion:symbol)\nIs_majority_religion(\"Cyprus\", \"Christianity\").\n.decl Is_religion(Country:symbol, Religion:symbol)\nIs_religion(\"Cyprus\", \"Islam\").\n.decl Answer()\nAnswer() :- Is_majority_religion(\"Cyprus\", \"Christianity\"), Is_religion(\"Cyprus\", \"Islam\"), not Is_majority_religion(\"Cyprus\", \"Islam\").\n.output Answer", "completions": [".decl Is_majority_religion(Country:symbol, Religion:symbol)\nIs_majority_religion(\"Cyprus\", \"Christianity\").\n.decl Is_religion(Country:symbol, Religion:symbol)\nIs_religion(\"Cyprus\", \"Islam\").\n.decl Answer()\nAnswer() :- Is_majority_religion(\"Cyprus\", \"Christianity\"), Is_religion(\"Cyprus\", \"Islam\"), not Is_majority_religion(\"Cyprus\", \"Islam\").\n.output Answer"]}
{"id": 2056, "answer": true, "completion": ".decl Is_fan_of(Person:symbol, Team:symbol)\nIs_fan_of(\"John Key\", \"Botany Swarm\").\n.decl Answer()\nAnswer() :- Is_fan_of(\"John Key\", \"Botany Swarm\").\n.output Answer", "completions": [".decl Is_fan_of(Person:symbol, Team:symbol)\nIs_fan_of(\"John Key\", \"Botany Swarm\").\n.decl Answer()\nAnswer() :- Is_fan_of(\"John Key\", \"Botany Swarm\").\n.output Answer"]}
{"id": 2057, "answer": true, "completion": ".decl Holds_concerts(Venue:symbol)\nHolds_concerts(\"Roman Colosseum\").\n.decl Existed_in_time(Group:symbol, Time:symbol)\nExisted_in_time(\"Maroon 5\", \"2004\").\n.decl Answer()\nAnswer() :- Holds_concerts(venue), Existed_in_time(\"Maroon 5\", time), time >= \"2004\".\n.output Answer", "completions": [".decl Holds_concerts(Venue:symbol)\nHolds_concerts(\"Roman Colosseum\").\n.decl Existed_in_time(Group:symbol, Time:symbol)\nExisted_in_time(\"Maroon 5\", \"2004\").\n.decl Answer()\nAnswer() :- Holds_concerts(venue), Existed_in_time(\"Maroon 5\", time), time >= \"2004\".\n.output Answer"]}
{"id": 2058, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Food:symbol)\nEats(\"Cookie Monster\", \"cookie\").\nEats(\"Cookie Monster\", \"vegetable\").\nEats(\"Cookie Monster\", \"fruit\").\n.decl Paleo_friendly(Food:symbol)\nPaleo_friendly(\"vegetable\").\nPaleo_friendly(\"fruit\").\nPaleo_friendly(\"meat\").\n.decl Answer()\nAnswer() :- Eats(\"Cookie Monster\", food), Paleo_friendly(food).\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Food:symbol)\nEats(\"Cookie Monster\", \"cookie\").\nEats(\"Cookie Monster\", \"vegetable\").\nEats(\"Cookie Monster\", \"fruit\").\n.decl Paleo_friendly(Food:symbol)\nPaleo_friendly(\"vegetable\").\nPaleo_friendly(\"fruit\").\nPaleo_friendly(\"meat\").\n.decl Answer()\nAnswer() :- Eats(\"Cookie Monster\", food), Paleo_friendly(food).\n.output Answer"]}
{"id": 2059, "answer": true, "completion": ".decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"baby shower\", \"house\").\nHappens_at(\"baby shower\", \"restaurant\").\nHappens_at(\"baby shower\", \"church\").\nHappens_at(\"baby shower\", \"park\").\nHappens_at(\"baby shower\", \"school\").\nHappens_at(\"baby shower\", \"hospital\").\nHappens_at(\"baby shower\", \"office\").\nHappens_at(\"baby shower\", \"store\").\nHappens_at(\"baby shower\", \"library\").\nHappens_at(\"baby shower\", \"movie theater\").\nHappens_at(\"baby shower\", \"bowling alley\").\nHappens_at(\"baby shower\", \"beach\").\nHappens_at(\"baby shower\", \"zoo\").\nHappens_at(\"baby shower\", \"aquarium\").\nHappens_at(\"baby shower\", \"circus\").\nHappens_at(\"baby shower\", \"amusement park\").\nHappens_at(\"baby shower\", \"carnival\").\nHappens_at(\"baby shower\", \"fair\").\nHappens_at(\"baby shower\", \"water park\").\nHappens_at(\"baby shower\", \"resort\").\nHappens_at(\"baby shower\", \"spa\").\nHappens_at(\"baby shower\", \"massage parlor\").\nHappens_at(\"baby shower\", \"campground\").\nHappens_at(\"baby shower\", \"trail\").\nHappens_at(\"baby shower\", \"golf course\").\nHappens_at(\"baby shower\", \"athletic field\").\nHappens_at(\"baby shower\", \"stadium\").\nHappens_at(\"baby shower\", \"arena\").\nHappens_at(\"baby shower\", \"motel\").\nHappens_at(\"baby shower\", \"hotel\").\nHappens_at(\"baby shower\", \"bed and breakfast\").\nHappens_at(\"baby shower\", \"hostel\").\nHappens_at(\"baby shower\", \"guest house\").\nHappens_at(\"baby shower\", \"timeshare\").\nHappens_at(\"baby shower\", \"vacation home\").\nHappens_at(\"baby shower\", \"apartment\").\nHappens_at(\"baby shower\", \"condo\").\nHappens_at(\"baby shower\", \"house\").\nHappens_at(\"baby shower\", \"farm\").\nHappens_at(\"baby shower\", \"ranch\").\nHappens_at(\"baby shower\", \"plantation\").\nHappens_at(\"baby shower\", \"village\").\nHappens_at(\"baby shower\", \"town\").\nHappens_at(\"baby shower\", \"city\").\nHappens_at(\"baby shower\", \"suburb\").\nHappens_at(\"baby shower\", \"state\").\nHappens_at(\"baby shower\", \"country\").\nHappens_at(\"baby shower\", \"continent\").\nHappens_at(\"baby shower\", \"hemisphere\").\nHappens_at(\"baby shower\", \"planet\").\nHappens_at(\"baby shower\", \"solar system\").\nHappens_at(\"baby shower\", \"galaxy\").\nHappens_at(\"baby shower\", \"universe\").\nHappens_at(\"baby shower\", \"dimension\").\nHappens_at(\"baby shower\", \"multiverse\").\nHappens_at(\"baby shower\", \"simulation\").\nH", "completions": [".decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"baby shower\", \"house\").\nHappens_at(\"baby shower\", \"restaurant\").\nHappens_at(\"baby shower\", \"church\").\nHappens_at(\"baby shower\", \"park\").\nHappens_at(\"baby shower\", \"school\").\nHappens_at(\"baby shower\", \"hospital\").\nHappens_at(\"baby shower\", \"office\").\nHappens_at(\"baby shower\", \"store\").\nHappens_at(\"baby shower\", \"library\").\nHappens_at(\"baby shower\", \"movie theater\").\nHappens_at(\"baby shower\", \"bowling alley\").\nHappens_at(\"baby shower\", \"beach\").\nHappens_at(\"baby shower\", \"zoo\").\nHappens_at(\"baby shower\", \"aquarium\").\nHappens_at(\"baby shower\", \"circus\").\nHappens_at(\"baby shower\", \"amusement park\").\nHappens_at(\"baby shower\", \"carnival\").\nHappens_at(\"baby shower\", \"fair\").\nHappens_at(\"baby shower\", \"water park\").\nHappens_at(\"baby shower\", \"resort\").\nHappens_at(\"baby shower\", \"spa\").\nHappens_at(\"baby shower\", \"massage parlor\").\nHappens_at(\"baby shower\", \"campground\").\nHappens_at(\"baby shower\", \"trail\").\nHappens_at(\"baby shower\", \"golf course\").\nHappens_at(\"baby shower\", \"athletic field\").\nHappens_at(\"baby shower\", \"stadium\").\nHappens_at(\"baby shower\", \"arena\").\nHappens_at(\"baby shower\", \"motel\").\nHappens_at(\"baby shower\", \"hotel\").\nHappens_at(\"baby shower\", \"bed and breakfast\").\nHappens_at(\"baby shower\", \"hostel\").\nHappens_at(\"baby shower\", \"guest house\").\nHappens_at(\"baby shower\", \"timeshare\").\nHappens_at(\"baby shower\", \"vacation home\").\nHappens_at(\"baby shower\", \"apartment\").\nHappens_at(\"baby shower\", \"condo\").\nHappens_at(\"baby shower\", \"house\").\nHappens_at(\"baby shower\", \"farm\").\nHappens_at(\"baby shower\", \"ranch\").\nHappens_at(\"baby shower\", \"plantation\").\nHappens_at(\"baby shower\", \"village\").\nHappens_at(\"baby shower\", \"town\").\nHappens_at(\"baby shower\", \"city\").\nHappens_at(\"baby shower\", \"suburb\").\nHappens_at(\"baby shower\", \"state\").\nHappens_at(\"baby shower\", \"country\").\nHappens_at(\"baby shower\", \"continent\").\nHappens_at(\"baby shower\", \"hemisphere\").\nHappens_at(\"baby shower\", \"planet\").\nHappens_at(\"baby shower\", \"solar system\").\nHappens_at(\"baby shower\", \"galaxy\").\nHappens_at(\"baby shower\", \"universe\").\nHappens_at(\"baby shower\", \"dimension\").\nHappens_at(\"baby shower\", \"multiverse\").\nHappens_at(\"baby shower\", \"simulation\").\nH"]}
{"id": 2060, "answer": true, "completion": ".decl Appears_in(Animal:symbol, Movie:symbol)\nAppears_in(\"hyena\", \"The Lion King\").\n.decl Is_a(Movie:symbol, Genre:symbol)\nIs_a(\"The Lion King\", \"Broadway musical\").\n.decl Answer()\nAnswer() :- Appears_in(\"hyena\", movie), Is_a(movie, \"Broadway musical\").\n.output Answer", "completions": [".decl Appears_in(Animal:symbol, Movie:symbol)\nAppears_in(\"hyena\", \"The Lion King\").\n.decl Is_a(Movie:symbol, Genre:symbol)\nIs_a(\"The Lion King\", \"Broadway musical\").\n.decl Answer()\nAnswer() :- Appears_in(\"hyena\", movie), Is_a(movie, \"Broadway musical\").\n.output Answer"]}
{"id": 2061, "answer": true, "completion": ".decl Served_as_president(Person:symbol, Time:symbol)\nServed_as_president(\"Millard Fillmore\", \"1850-1853\").\n.decl Founded(Person:symbol, University:symbol)\nFounded(\"John Adams\", \"Harvard University\").\nFounded(\"Thomas Jefferson\", \"University of Virginia\").\nFounded(\"George Washington\", \"George Washington University\").\nFounded(\"John Brown\", \"Brown University\").\nFounded(\"John Hopkins\", \"John Hopkins University\").\nFounded(\"Benjamin Franklin\", \"University of Pennsylvania\").\nFounded(\"Andrew Carnegie\", \"Carnegie Mellon University\").\nFounded(\"Henry Clay Frick\", \"Frick Fine Arts Building\").\n.decl Answer()\nAnswer() :- Served_as_president(\"Millard Fillmore\", time1), Founded(\"John Adams\", \"Harvard University\"), Founded(\"Thomas Jefferson\", \"University of Virginia\"), Founded(\"George Washington\", \"George Washington University\"), Founded(\"John Brown\", \"Brown University\"), Founded(\"John Hopkins\", \"John Hopkins University\"), Founded(\"Benjamin Franklin\", \"University of Pennsylvania\"), Founded(\"Andrew Carnegie\", \"Carnegie Mellon University\"), Founded(\"Henry Clay Frick\", \"Frick Fine Arts Building\").\n.output Answer", "completions": [".decl Served_as_president(Person:symbol, Time:symbol)\nServed_as_president(\"Millard Fillmore\", \"1850-1853\").\n.decl Founded(Person:symbol, University:symbol)\nFounded(\"John Adams\", \"Harvard University\").\nFounded(\"Thomas Jefferson\", \"University of Virginia\").\nFounded(\"George Washington\", \"George Washington University\").\nFounded(\"John Brown\", \"Brown University\").\nFounded(\"John Hopkins\", \"John Hopkins University\").\nFounded(\"Benjamin Franklin\", \"University of Pennsylvania\").\nFounded(\"Andrew Carnegie\", \"Carnegie Mellon University\").\nFounded(\"Henry Clay Frick\", \"Frick Fine Arts Building\").\n.decl Answer()\nAnswer() :- Served_as_president(\"Millard Fillmore\", time1), Founded(\"John Adams\", \"Harvard University\"), Founded(\"Thomas Jefferson\", \"University of Virginia\"), Founded(\"George Washington\", \"George Washington University\"), Founded(\"John Brown\", \"Brown University\"), Founded(\"John Hopkins\", \"John Hopkins University\"), Founded(\"Benjamin Franklin\", \"University of Pennsylvania\"), Founded(\"Andrew Carnegie\", \"Carnegie Mellon University\"), Founded(\"Henry Clay Frick\", \"Frick Fine Arts Building\").\n.output Answer"]}
{"id": 2062, "answer": false, "completion": ".decl Causes_global_warming(Religion:symbol, Effect:symbol)\nCauses_global_warming(\"Christianity\", \"global warming\").\nCauses_global_warming(\"Satanism\", \"global warming\").\n.decl Is_better_than(Religion1:symbol, Religion2:symbol)\nIs_better_than(\"Christianity\", \"Satanism\").\n.decl Answer()\nAnswer() :- Causes_global_warming(religion1, \"global warming\"), Causes_global_warming(religion2, \"global warming\"), Is_better_than(religion1, religion2).\n.output Answer", "completions": [".decl Causes_global_warming(Religion:symbol, Effect:symbol)\nCauses_global_warming(\"Christianity\", \"global warming\").\nCauses_global_warming(\"Satanism\", \"global warming\").\n.decl Is_better_than(Religion1:symbol, Religion2:symbol)\nIs_better_than(\"Christianity\", \"Satanism\").\n.decl Answer()\nAnswer() :- Causes_global_warming(religion1, \"global warming\"), Causes_global_warming(religion2, \"global warming\"), Is_better_than(religion1, religion2).\n.output Answer"]}
{"id": 2063, "answer": false, "completion": ".decl Has_role_model(Person:symbol, Role_model:symbol)\nHas_role_model(\"Robert Downey Jr.\", \"Robert Downey Jr.\").\n.decl Answer()\nAnswer() :- Has_role_model(\"Robert Downey Jr.\", \"Robert Downey Jr.\").\n.output Answer", "completions": [".decl Has_role_model(Person:symbol, Role_model:symbol)\nHas_role_model(\"Robert Downey Jr.\", \"Robert Downey Jr.\").\n.decl Answer()\nAnswer() :- Has_role_model(\"Robert Downey Jr.\", \"Robert Downey Jr.\").\n.output Answer"]}
{"id": 2064, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"coin\", 8.9).\nHas_density(\"mercury\", 13.6).\n.decl Answer()\nAnswer() :- Has_density(\"coin\", density1), Has_density(\"mercury\", density2), density1 < density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"coin\", 8.9).\nHas_density(\"mercury\", 13.6).\n.decl Answer()\nAnswer() :- Has_density(\"coin\", density1), Has_density(\"mercury\", density2), density1 < density2.\n.output Answer"]}
{"id": 2065, "answer": false, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Newt Gingrich\", \"The Hammer\").\n.decl Is_a_type_of(Type:symbol, Supertype:symbol)\nIs_a_type_of(\"Reptile\", \"Animal\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Newt Gingrich\", nickname), Is_a_type_of(type, \"Reptile\"), nickname = type.\n.output Answer", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Newt Gingrich\", \"The Hammer\").\n.decl Is_a_type_of(Type:symbol, Supertype:symbol)\nIs_a_type_of(\"Reptile\", \"Animal\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Newt Gingrich\", nickname), Is_a_type_of(type, \"Reptile\"), nickname = type.\n.output Answer"]}
{"id": 2066, "answer": true, "completion": ".decl Violates(Person:symbol, Commandment:symbol)\nViolates(\"Christopher Columbus\", \"Thou shalt not kill\").\n.decl Answer()\nAnswer() :- Violates(\"Christopher Columbus\", \"Thou shalt not kill\").\n.output Answer", "completions": [".decl Violates(Person:symbol, Commandment:symbol)\nViolates(\"Christopher Columbus\", \"Thou shalt not kill\").\n.decl Answer()\nAnswer() :- Violates(\"Christopher Columbus\", \"Thou shalt not kill\").\n.output Answer"]}
{"id": 2067, "answer": true, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Reconstruction era coin\", 0.01).\nHas_value(\"DJI Mavic Pro Drone\", 999).\n.decl Answer()\nAnswer() :- Has_value(\"Reconstruction era coin\", value1), Has_value(\"DJI Mavic Pro Drone\", value2), value1 < value2.\n.output Answer", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Reconstruction era coin\", 0.01).\nHas_value(\"DJI Mavic Pro Drone\", 999).\n.decl Answer()\nAnswer() :- Has_value(\"Reconstruction era coin\", value1), Has_value(\"DJI Mavic Pro Drone\", value2), value1 < value2.\n.output Answer"]}
{"id": 2068, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"chlorine water\", 7).\n.decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"safe to drink\", 7).\n.decl Answer()\nAnswer() :- Last_n_days(\"chlorine water\", n_days1), Lasts_n_days(\"safe to drink\", n_days2), n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"chlorine water\", 7).\n.decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"safe to drink\", 7).\n.decl Answer()\nAnswer() :- Last_n_days(\"chlorine water\", n_days1), Lasts_n_days(\"safe to drink\", n_days2), n_days1 <= n_days2.\n.output Answer"]}
{"id": 2069, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"pink\").\n.decl Is_associated_with(Cancer:symbol, Object:symbol)\nIs_associated_with(\"breast cancer\", \"ribbon\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"breast cancer\", \"ribbon\").\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"ribbon\", \"pink\").\n.decl Is_associated_with(Cancer:symbol, Object:symbol)\nIs_associated_with(\"breast cancer\", \"ribbon\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"breast cancer\", \"ribbon\").\n.output Answer"]}
{"id": 2070, "answer": true, "completion": ".decl Can_walk(Person:symbol, Can_walk_or_not:symbol)\nCan_walk(\"John\", \"yes\").\nCan_walk(\"Mary\", \"no\").\n.decl Answer()\nAnswer() :- Can_walk(person, \"no\").\n.output Answer", "completions": [".decl Can_walk(Person:symbol, Can_walk_or_not:symbol)\nCan_walk(\"John\", \"yes\").\nCan_walk(\"Mary\", \"no\").\n.decl Answer()\nAnswer() :- Can_walk(person, \"no\").\n.output Answer"]}
{"id": 2071, "answer": false, "completion": ".decl Has_margin(Election:symbol, Margin:float)\nHas_margin(\"1980 United States presidential election\", 2.6).\n.decl Answer()\nAnswer() :- Has_margin(\"1980 United States presidential election\", margin), margin < 0.5.\n.output Answer", "completions": [".decl Has_margin(Election:symbol, Margin:float)\nHas_margin(\"1980 United States presidential election\", 2.6).\n.decl Answer()\nAnswer() :- Has_margin(\"1980 United States presidential election\", margin), margin < 0.5.\n.output Answer"]}
{"id": 2072, "answer": false, "completion": ".decl Cures(Cure:symbol, Disease:symbol)\nCures(\"cowbell\", \"fever\").\n.decl Answer()\nAnswer() :- Cures(\"cowbell\", \"fever\").\n.output Answer", "completions": [".decl Cures(Cure:symbol, Disease:symbol)\nCures(\"cowbell\", \"fever\").\n.decl Answer()\nAnswer() :- Cures(\"cowbell\", \"fever\").\n.output Answer"]}
{"id": 2073, "answer": false, "completion": ".decl Can_sting(Animal:symbol, Victim:symbol)\nCan_sting(\"honey bee\", \"human\").\n.decl Answer()\nAnswer() :- Can_sting(\"honey bee\", victim1), Can_sting(\"honey bee\", victim2), victim1 != victim2.\n.output Answer", "completions": [".decl Can_sting(Animal:symbol, Victim:symbol)\nCan_sting(\"honey bee\", \"human\").\n.decl Answer()\nAnswer() :- Can_sting(\"honey bee\", victim1), Can_sting(\"honey bee\", victim2), victim1 != victim2.\n.output Answer"]}
{"id": 2074, "answer": false, "completion": ".decl Has_children(Person:symbol, Children:symbol)\nHas_children(\"Bob Marley\", \"Ziggy Marley\").\nHas_children(\"Bob Marley\", \"Damian Marley\").\nHas_children(\"Bob Marley\", \"Stephen Marley\").\nHas_children(\"Bob Marley\", \"Rohan Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Cedella Marley\").\nHas_children(\"Bob Marley\", \"Robbie Shakespeare\").\nHas_children(\"Bob Marley\", \"Richard Booker\").\nHas_children(\"Bob Marley\", \"Julian Marley\").\nHas_children(\"Bob Marley\", \"Ky-Mani Marley\").\nHas_children(\"Bob Marley\", \"Sharon Marley\").\nHas_children(\"Bob Marley\", \"Makeda Jahnesta\").\nHas_children(\"Bob Marley\", \"Skip Marley\").\nHas_children(\"Bob Marley\", \"Jo Mersa Marley\").\nHas_children(\"Bob Marley\", \"Daniel Bambaata Marley\").\nHas_children(\"Bob Marley\", \"Imani Carole Marley\").\nHas_children(\"Bob Marley\", \"Gloria Marley\").\nHas_children(\"Bob Marley\", \"Cedella Marley\").\nHas_children(\"Bob Marley\", \"David Nesta Marley\").\nHas_children(\"Bob Marley\", \"Stephen Marley\").\nHas_children(\"Bob Marley\", \"Robert Nesta Marley\").\nHas_children(\"Bob Marley\", \"Rohan Anthony Marley\").\nHas_children(\"Bob Marley\", \"Ziggy Marley\").\nHas_children(\"Bob Marley\", \"Damian Marley\").\nHas_children(\"Bob Marley\", \"Stephen Marley\").\nHas_children(\"Bob Marley\", \"Rohan Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Cedella Marley\").\nHas_children(\"Bob Marley\", \"Robbie Shakespeare\").\nHas_children(\"Bob Marley\", \"Richard Booker\").\nHas_children(\"Bob Marley\", \"Julian Marley\").\nHas_children(\"Bob Marley\", \"Ky-Mani Marley\").\nHas_children(\"Bob Marley\", \"Sharon Marley\").\nHas_children(\"Bob Marley\", \"Makeda Jahnesta\").\nHas_children(\"Bob Marley\", \"Skip Marley\").\nHas_children(\"Bob Marley\", \"Jo Mersa Marley\").\nHas_children(\"Bob Marley\", \"Daniel Bambaata Marley\").\nHas_children(\"Bob Marley\", \"Imani Carole Marley\").\nHas_children(\"Bob Marley\", \"Gloria Marley\").\nHas_children(\"Bob Marley\", \"Cedella Marley\").\nHas_children(\"Bob Marley\", \"David Nesta Marley\").\nHas_children(\"Bob Marley\", \"Stephen Marley\").\nHas_children(\"Bob Marley\", \"Robert Nesta Marley\").\nHas_children(\"Bob Marley\", \"Rohan Anthony Marley\").\nHas_children(\"Bob Marley\", \"Ziggy Marley\").\nHas_children(\"Bob Marley\", \"Damian Marley\").\nHas_children(\"Bob Marley\", \"Stephen Marley\").\nHas_children(\"Bob Marley\", \"Rohan Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Cedella Marley\").\nHas_children(\"Bob Marley\",", "completions": [".decl Has_children(Person:symbol, Children:symbol)\nHas_children(\"Bob Marley\", \"Ziggy Marley\").\nHas_children(\"Bob Marley\", \"Damian Marley\").\nHas_children(\"Bob Marley\", \"Stephen Marley\").\nHas_children(\"Bob Marley\", \"Rohan Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Cedella Marley\").\nHas_children(\"Bob Marley\", \"Robbie Shakespeare\").\nHas_children(\"Bob Marley\", \"Richard Booker\").\nHas_children(\"Bob Marley\", \"Julian Marley\").\nHas_children(\"Bob Marley\", \"Ky-Mani Marley\").\nHas_children(\"Bob Marley\", \"Sharon Marley\").\nHas_children(\"Bob Marley\", \"Makeda Jahnesta\").\nHas_children(\"Bob Marley\", \"Skip Marley\").\nHas_children(\"Bob Marley\", \"Jo Mersa Marley\").\nHas_children(\"Bob Marley\", \"Daniel Bambaata Marley\").\nHas_children(\"Bob Marley\", \"Imani Carole Marley\").\nHas_children(\"Bob Marley\", \"Gloria Marley\").\nHas_children(\"Bob Marley\", \"Cedella Marley\").\nHas_children(\"Bob Marley\", \"David Nesta Marley\").\nHas_children(\"Bob Marley\", \"Stephen Marley\").\nHas_children(\"Bob Marley\", \"Robert Nesta Marley\").\nHas_children(\"Bob Marley\", \"Rohan Anthony Marley\").\nHas_children(\"Bob Marley\", \"Ziggy Marley\").\nHas_children(\"Bob Marley\", \"Damian Marley\").\nHas_children(\"Bob Marley\", \"Stephen Marley\").\nHas_children(\"Bob Marley\", \"Rohan Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Cedella Marley\").\nHas_children(\"Bob Marley\", \"Robbie Shakespeare\").\nHas_children(\"Bob Marley\", \"Richard Booker\").\nHas_children(\"Bob Marley\", \"Julian Marley\").\nHas_children(\"Bob Marley\", \"Ky-Mani Marley\").\nHas_children(\"Bob Marley\", \"Sharon Marley\").\nHas_children(\"Bob Marley\", \"Makeda Jahnesta\").\nHas_children(\"Bob Marley\", \"Skip Marley\").\nHas_children(\"Bob Marley\", \"Jo Mersa Marley\").\nHas_children(\"Bob Marley\", \"Daniel Bambaata Marley\").\nHas_children(\"Bob Marley\", \"Imani Carole Marley\").\nHas_children(\"Bob Marley\", \"Gloria Marley\").\nHas_children(\"Bob Marley\", \"Cedella Marley\").\nHas_children(\"Bob Marley\", \"David Nesta Marley\").\nHas_children(\"Bob Marley\", \"Stephen Marley\").\nHas_children(\"Bob Marley\", \"Robert Nesta Marley\").\nHas_children(\"Bob Marley\", \"Rohan Anthony Marley\").\nHas_children(\"Bob Marley\", \"Ziggy Marley\").\nHas_children(\"Bob Marley\", \"Damian Marley\").\nHas_children(\"Bob Marley\", \"Stephen Marley\").\nHas_children(\"Bob Marley\", \"Rohan Marley\").\nHas_children(\"Bob Marley\", \"Karen Marley\").\nHas_children(\"Bob Marley\", \"Cedella Marley\").\nHas_children(\"Bob Marley\","]}
{"id": 2075, "answer": false, "completion": ".decl Spouses(Person1:symbol, Person2:symbol)\nSpouses(\"Harry Houdini\", \"Bess Houdini\").\n.decl Adversaries(Person1:symbol, Person2:symbol)\nAdversaries(\"Bess Houdini\", \"psychics\").\n.decl Answer()\nAnswer() :- Spouses(person1, \"Bess Houdini\"), Adversaries(person1, \"psychics\").\n.output Answer", "completions": [".decl Spouses(Person1:symbol, Person2:symbol)\nSpouses(\"Harry Houdini\", \"Bess Houdini\").\n.decl Adversaries(Person1:symbol, Person2:symbol)\nAdversaries(\"Bess Houdini\", \"psychics\").\n.decl Answer()\nAnswer() :- Spouses(person1, \"Bess Houdini\"), Adversaries(person1, \"psychics\").\n.output Answer"]}
{"id": 2076, "answer": true, "completion": ".decl Guest_starred_on(Person:symbol, TV_series:symbol)\nGuest_starred_on(\"Joan Crawford\", \"JAG\").\n.decl Answer()\nAnswer() :- Guest_starred_on(\"Joan Crawford\", \"JAG\").\n.output Answer", "completions": [".decl Guest_starred_on(Person:symbol, TV_series:symbol)\nGuest_starred_on(\"Joan Crawford\", \"JAG\").\n.decl Answer()\nAnswer() :- Guest_starred_on(\"Joan Crawford\", \"JAG\").\n.output Answer"]}
{"id": 2077, "answer": true, "completion": ".decl Has_ingredient(Remedy:symbol, Ingredient:symbol)\nHas_ingredient(\"home remedy\", \"copper sulfate\").\nHas_ingredient(\"home remedy\", \"indigo\").\nHas_ingredient(\"home remedy\", \"indigo carmine\").\nHas_ingredient(\"home remedy\", \"indigo naturalis\").\nHas_ingredient(\"home remedy\", \"indigo tincture\").\nHas_ingredient(\"home remedy\", \"indigo violet\").\nHas_ingredient(\"home remedy\", \"indigo yellow\").\nHas_ingredient(\"home remedy\", \"indirubin\").\nHas_ingredient(\"home remedy\", \"indirubin blue\").\nHas_ingredient(\"home remedy\", \"indirubin monosulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin monoxime\").\nHas_ingredient(\"home remedy\", \"indirubin oxime\").\nHas_ingredient(\"home remedy\", \"indirubin sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin trisulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3'-monoxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3'-oxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3'-sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin-3'-trisulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-monosulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-oxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-trisulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-monoxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-oxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-trisulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-monoxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-oxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-trisulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-monoxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-oxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-trisulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-monoxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-oxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-trisulfonate\").\nHas_ing", "completions": [".decl Has_ingredient(Remedy:symbol, Ingredient:symbol)\nHas_ingredient(\"home remedy\", \"copper sulfate\").\nHas_ingredient(\"home remedy\", \"indigo\").\nHas_ingredient(\"home remedy\", \"indigo carmine\").\nHas_ingredient(\"home remedy\", \"indigo naturalis\").\nHas_ingredient(\"home remedy\", \"indigo tincture\").\nHas_ingredient(\"home remedy\", \"indigo violet\").\nHas_ingredient(\"home remedy\", \"indigo yellow\").\nHas_ingredient(\"home remedy\", \"indirubin\").\nHas_ingredient(\"home remedy\", \"indirubin blue\").\nHas_ingredient(\"home remedy\", \"indirubin monosulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin monoxime\").\nHas_ingredient(\"home remedy\", \"indirubin oxime\").\nHas_ingredient(\"home remedy\", \"indirubin sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin trisulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3'-monoxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3'-oxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3'-sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin-3'-trisulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-monosulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-oxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-trisulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-monoxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-oxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-trisulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-monoxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-oxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-trisulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-monoxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-oxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-trisulfonate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-monoxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-oxime\").\nHas_ingredient(\"home remedy\", \"indirubin-3-sulfate\").\nHas_ingredient(\"home remedy\", \"indirubin-3-trisulfonate\").\nHas_ing"]}
{"id": 2078, "answer": true, "completion": ".decl Prevents(Wall:symbol, Athlete:symbol)\nPrevents(\"Berlin Wall\", \"German athletes\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Berlin Wall\", \"1961\").\nHappens_in_time(\"1936 Summer Olympics\", \"1936\").\n.decl Answer()\nAnswer() :- Prevents(\"Berlin Wall\", \"German athletes\"), Happens_in_time(\"Berlin Wall\", time1), Happens_in_time(\"1936 Summer Olympics\", time2), time1 > time2.\n.output Answer", "completions": [".decl Prevents(Wall:symbol, Athlete:symbol)\nPrevents(\"Berlin Wall\", \"German athletes\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Berlin Wall\", \"1961\").\nHappens_in_time(\"1936 Summer Olympics\", \"1936\").\n.decl Answer()\nAnswer() :- Prevents(\"Berlin Wall\", \"German athletes\"), Happens_in_time(\"Berlin Wall\", time1), Happens_in_time(\"1936 Summer Olympics\", time2), time1 > time2.\n.output Answer"]}
{"id": 2079, "answer": false, "completion": ".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"flight from NY to Kansas City\", 3).\nLasts_n_hours(\"Batman (1989 film)\", 2).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"flight from NY to Kansas City\", n_hours1), Lasts_n_hours(\"Batman (1989 film)\", n_hours2), n_hours1 >= n_hours2.\n.output Answer", "completions": [".decl Lasts_n_hours(Event:symbol, N_hours:float)\nLasts_n_hours(\"flight from NY to Kansas City\", 3).\nLasts_n_hours(\"Batman (1989 film)\", 2).\n.decl Answer()\nAnswer() :- Lasts_n_hours(\"flight from NY to Kansas City\", n_hours1), Lasts_n_hours(\"Batman (1989 film)\", n_hours2), n_hours1 >= n_hours2.\n.output Answer"]}
{"id": 2080, "answer": false, "completion": ".decl Kills(Person:symbol, Number_of_people:float)\nKills(\"Don King\", 2).\nKills(\"Charles Manson\", 1).\n.decl Answer()\nAnswer() :- Kills(\"Don King\", number1), Kills(\"Charles Manson\", number2), number1 > number2.\n.output Answer", "completions": [".decl Kills(Person:symbol, Number_of_people:float)\nKills(\"Don King\", 2).\nKills(\"Charles Manson\", 1).\n.decl Answer()\nAnswer() :- Kills(\"Don King\", number1), Kills(\"Charles Manson\", number2), number1 > number2.\n.output Answer"]}
{"id": 2081, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Black Death\", 100).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"amoebas\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"amoebas\", n_years1), Last_n_years(\"Black Death\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Black Death\", 100).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"amoebas\", 100).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"amoebas\", n_years1), Last_n_years(\"Black Death\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 2082, "answer": true, "completion": ".decl Has_heritage(Person:symbol, Heritage:symbol)\nHas_heritage(\"Ludacris\", \"African American\").\n.decl Answer()\nAnswer() :- Has_heritage(\"Ludacris\", \"Greek\").\n.output Answer", "completions": [".decl Has_heritage(Person:symbol, Heritage:symbol)\nHas_heritage(\"Ludacris\", \"African American\").\n.decl Answer()\nAnswer() :- Has_heritage(\"Ludacris\", \"Greek\").\n.output Answer"]}
{"id": 2083, "answer": false, "completion": ".decl Is_member_of(Team:symbol, League:symbol)\nIs_member_of(\"Boston Bruins\", \"National Hockey League\").\nIs_member_of(\"Buffalo Sabres\", \"National Hockey League\").\nIs_member_of(\"Calgary Flames\", \"National Hockey League\").\nIs_member_of(\"Carolina Hurricanes\", \"National Hockey League\").\nIs_member_of(\"Chicago Blackhawks\", \"National Hockey League\").\nIs_member_of(\"Colorado Avalanche\", \"National Hockey League\").\nIs_member_of(\"Columbus Blue Jackets\", \"National Hockey League\").\nIs_member_of(\"Dallas Stars\", \"National Hockey League\").\nIs_member_of(\"Detroit Red Wings\", \"National Hockey League\").\nIs_member_of(\"Edmonton Oilers\", \"National Hockey League\").\nIs_member_of(\"Florida Panthers\", \"National Hockey League\").\nIs_member_of(\"Los Angeles Kings\", \"National Hockey League\").\nIs_member_of(\"Minnesota Wild\", \"National Hockey League\").\nIs_member_of(\"Montreal Canadiens\", \"National Hockey League\").\nIs_member_of(\"Nashville Predators\", \"National Hockey League\").\nIs_member_of(\"New Jersey Devils\", \"National Hockey League\").\nIs_member_of(\"New York Islanders\", \"National Hockey League\").\nIs_member_of(\"New York Rangers\", \"National Hockey League\").\nIs_member_of(\"Ottawa Senators\", \"National Hockey League\").\nIs_member_of(\"Philadelphia Flyers\", \"National Hockey League\").\nIs_member_of(\"Phoenix Coyotes\", \"National Hockey League\").\nIs_member_of(\"Pittsburgh Penguins\", \"National Hockey League\").\nIs_member_of(\"San Jose Sharks\", \"National Hockey League\").\nIs_member_of(\"St. Louis Blues\", \"National Hockey League\").\nIs_member_of(\"Tampa Bay Lightning\", \"National Hockey League\").\nIs_member_of(\"Toronto Maple Leafs\", \"National Hockey League\").\nIs_member_of(\"Vancouver Canucks\", \"National Hockey League\").\nIs_member_of(\"Washington Capitals\", \"National Hockey League\").\n.decl Is_from(Team:symbol, Country:symbol)\nIs_from(\"Boston Bruins\", \"United States\").\nIs_from(\"Buffalo Sabres\", \"United States\").\nIs_from(\"Carolina Hurricanes\", \"United States\").\nIs_from(\"Chicago Blackhawks\", \"United States\").\nIs_from(\"Colorado Avalanche\", \"United States\").\nIs_from(\"Columbus Blue Jackets\", \"United States\").\nIs_from(\"Dallas Stars\", \"United States\").\nIs_from(\"Detroit Red Wings\", \"United States\").\nIs_from(\"Florida Panthers\", \"United States\").\nIs_from(\"Los Angeles Kings\", \"United States\").\nIs_from(\"Minnesota Wild\", \"United States\").\nIs_from(\"Nashville Predators\", \"United States\").\nIs_from(\"New Jersey Devils\", \"United States\").\nIs_from(\"New York Islanders\", \"United States\").\nIs_from(\"New York Rangers\", \"United States\").\nIs_from(\"Philadelphia Flyers\", \"United States\").\nIs_from(\"Phoenix Coyotes\", \"United States\").\nIs_from(\"Pittsburgh Penguins\", \"United States\").\nIs_from(\"San Jose Sharks\", \"United States\").\nIs_from(\"St. Louis Blues\", \"United States\").\nIs_from(\"Tampa Bay Lightning\", \"United States\").\nIs_from(\"Washington Capitals\", \"United States\").\nIs_from(\"Calgary Flames\", \"Canada\").\nIs_from(\"Edmonton Oilers\", \"Canada\").\nIs_from(\"Montreal Canadiens\", \"Canada\").\nIs_from(\"", "completions": [".decl Is_member_of(Team:symbol, League:symbol)\nIs_member_of(\"Boston Bruins\", \"National Hockey League\").\nIs_member_of(\"Buffalo Sabres\", \"National Hockey League\").\nIs_member_of(\"Calgary Flames\", \"National Hockey League\").\nIs_member_of(\"Carolina Hurricanes\", \"National Hockey League\").\nIs_member_of(\"Chicago Blackhawks\", \"National Hockey League\").\nIs_member_of(\"Colorado Avalanche\", \"National Hockey League\").\nIs_member_of(\"Columbus Blue Jackets\", \"National Hockey League\").\nIs_member_of(\"Dallas Stars\", \"National Hockey League\").\nIs_member_of(\"Detroit Red Wings\", \"National Hockey League\").\nIs_member_of(\"Edmonton Oilers\", \"National Hockey League\").\nIs_member_of(\"Florida Panthers\", \"National Hockey League\").\nIs_member_of(\"Los Angeles Kings\", \"National Hockey League\").\nIs_member_of(\"Minnesota Wild\", \"National Hockey League\").\nIs_member_of(\"Montreal Canadiens\", \"National Hockey League\").\nIs_member_of(\"Nashville Predators\", \"National Hockey League\").\nIs_member_of(\"New Jersey Devils\", \"National Hockey League\").\nIs_member_of(\"New York Islanders\", \"National Hockey League\").\nIs_member_of(\"New York Rangers\", \"National Hockey League\").\nIs_member_of(\"Ottawa Senators\", \"National Hockey League\").\nIs_member_of(\"Philadelphia Flyers\", \"National Hockey League\").\nIs_member_of(\"Phoenix Coyotes\", \"National Hockey League\").\nIs_member_of(\"Pittsburgh Penguins\", \"National Hockey League\").\nIs_member_of(\"San Jose Sharks\", \"National Hockey League\").\nIs_member_of(\"St. Louis Blues\", \"National Hockey League\").\nIs_member_of(\"Tampa Bay Lightning\", \"National Hockey League\").\nIs_member_of(\"Toronto Maple Leafs\", \"National Hockey League\").\nIs_member_of(\"Vancouver Canucks\", \"National Hockey League\").\nIs_member_of(\"Washington Capitals\", \"National Hockey League\").\n.decl Is_from(Team:symbol, Country:symbol)\nIs_from(\"Boston Bruins\", \"United States\").\nIs_from(\"Buffalo Sabres\", \"United States\").\nIs_from(\"Carolina Hurricanes\", \"United States\").\nIs_from(\"Chicago Blackhawks\", \"United States\").\nIs_from(\"Colorado Avalanche\", \"United States\").\nIs_from(\"Columbus Blue Jackets\", \"United States\").\nIs_from(\"Dallas Stars\", \"United States\").\nIs_from(\"Detroit Red Wings\", \"United States\").\nIs_from(\"Florida Panthers\", \"United States\").\nIs_from(\"Los Angeles Kings\", \"United States\").\nIs_from(\"Minnesota Wild\", \"United States\").\nIs_from(\"Nashville Predators\", \"United States\").\nIs_from(\"New Jersey Devils\", \"United States\").\nIs_from(\"New York Islanders\", \"United States\").\nIs_from(\"New York Rangers\", \"United States\").\nIs_from(\"Philadelphia Flyers\", \"United States\").\nIs_from(\"Phoenix Coyotes\", \"United States\").\nIs_from(\"Pittsburgh Penguins\", \"United States\").\nIs_from(\"San Jose Sharks\", \"United States\").\nIs_from(\"St. Louis Blues\", \"United States\").\nIs_from(\"Tampa Bay Lightning\", \"United States\").\nIs_from(\"Washington Capitals\", \"United States\").\nIs_from(\"Calgary Flames\", \"Canada\").\nIs_from(\"Edmonton Oilers\", \"Canada\").\nIs_from(\"Montreal Canadiens\", \"Canada\").\nIs_from(\""]}
{"id": 2084, "answer": true, "completion": ".decl Appears_on(Person:symbol, Show:symbol)\nAppears_on(\"Justin Bieber\", \"Pimp My Ride\").\n.decl Answer()\nAnswer() :- Appears_on(\"Pope\", \"Pimp My Ride\").\n.output Answer", "completions": [".decl Appears_on(Person:symbol, Show:symbol)\nAppears_on(\"Justin Bieber\", \"Pimp My Ride\").\n.decl Answer()\nAnswer() :- Appears_on(\"Pope\", \"Pimp My Ride\").\n.output Answer"]}
{"id": 2085, "answer": false, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"African Elephant pregnancy\", 365).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"African Elephant pregnancy\", 730).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"African Elephant pregnancy\", n_days1), Last_n_days(\"African Elephant pregnancy\", n_days2), n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"African Elephant pregnancy\", 365).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"African Elephant pregnancy\", 730).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"African Elephant pregnancy\", n_days1), Last_n_days(\"African Elephant pregnancy\", n_days2), n_days1 <= n_days2.\n.output Answer"]}
{"id": 2086, "answer": false, "completion": ".decl Uses(Person:symbol, Technology:symbol)\nUses(\"William Shakespeare\", \"email\").\n.decl Answer()\nAnswer() :- Uses(\"William Shakespeare\", \"email\").\n.output Answer", "completions": [".decl Uses(Person:symbol, Technology:symbol)\nUses(\"William Shakespeare\", \"email\").\n.decl Answer()\nAnswer() :- Uses(\"William Shakespeare\", \"email\").\n.output Answer"]}
{"id": 2087, "answer": false, "completion": ".decl Grows_to_height(Plant:symbol, Height:float)\nGrows_to_height(\"horseradish\", 1.5).\n.decl Is_taller_than(Person:symbol, Height:float)\nIs_taller_than(\"newborn\", 0.5).\n.decl Answer()\nAnswer() :- Grows_to_height(\"horseradish\", height1), Is_taller_than(\"newborn\", height2), height1 <= height2.\n.output Answer", "completions": [".decl Grows_to_height(Plant:symbol, Height:float)\nGrows_to_height(\"horseradish\", 1.5).\n.decl Is_taller_than(Person:symbol, Height:float)\nIs_taller_than(\"newborn\", 0.5).\n.decl Answer()\nAnswer() :- Grows_to_height(\"horseradish\", height1), Is_taller_than(\"newborn\", height2), height1 <= height2.\n.output Answer"]}
{"id": 2088, "answer": false, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Jeff Bezos\", 113).\n.decl Cost_to_buy(Country:symbol, Cost:float)\nCost_to_buy(\"Cambodia\", 1).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Jeff Bezos\", net_worth), Cost_to_buy(\"Cambodia\", cost), net_worth < cost.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Jeff Bezos\", 113).\n.decl Cost_to_buy(Country:symbol, Cost:float)\nCost_to_buy(\"Cambodia\", 1).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Jeff Bezos\", net_worth), Cost_to_buy(\"Cambodia\", cost), net_worth < cost.\n.output Answer"]}
{"id": 2089, "answer": true, "completion": ".decl Weighs(Object:symbol, Weight:float)\nWeighs(\"Holstein cow\", 1200).\nWeighs(\"Liberty Bell\", 2080).\n.decl Answer()\nAnswer() :- Weighs(\"Holstein cow\", weight1), Weighs(\"Liberty Bell\", weight2), weight1 + weight2 =:= 3200.\n.output Answer", "completions": [".decl Weighs(Object:symbol, Weight:float)\nWeighs(\"Holstein cow\", 1200).\nWeighs(\"Liberty Bell\", 2080).\n.decl Answer()\nAnswer() :- Weighs(\"Holstein cow\", weight1), Weighs(\"Liberty Bell\", weight2), weight1 + weight2 =:= 3200.\n.output Answer"]}
{"id": 2090, "answer": true, "completion": ".decl Has_ethnicity(Person:symbol, Ethnicity:symbol)\nHas_ethnicity(\"Cleopatra\", \"Egyptian\").\nHas_ethnicity(\"Cleopatra\", \"Greek\").\nHas_ethnicity(\"Egyptians\", \"Egyptian\").\nHas_ethnicity(\"Greeks\", \"Greek\").\n.decl Answer()\nAnswer() :- Has_ethnicity(\"Cleopatra\", ethnicity1), Has_ethnicity(\"Cleopatra\", ethnicity2), Has_ethnicity(\"Egyptians\", ethnicity3), Has_ethnicity(\"Greeks\", ethnicity4), ethnicity1 = ethnicity3, ethnicity2 != ethnicity4.\n.output Answer", "completions": [".decl Has_ethnicity(Person:symbol, Ethnicity:symbol)\nHas_ethnicity(\"Cleopatra\", \"Egyptian\").\nHas_ethnicity(\"Cleopatra\", \"Greek\").\nHas_ethnicity(\"Egyptians\", \"Egyptian\").\nHas_ethnicity(\"Greeks\", \"Greek\").\n.decl Answer()\nAnswer() :- Has_ethnicity(\"Cleopatra\", ethnicity1), Has_ethnicity(\"Cleopatra\", ethnicity2), Has_ethnicity(\"Egyptians\", ethnicity3), Has_ethnicity(\"Greeks\", ethnicity4), ethnicity1 = ethnicity3, ethnicity2 != ethnicity4.\n.output Answer"]}
{"id": 2091, "answer": true, "completion": ".decl Has_coagulant(Object:symbol, Coagulant:float)\nHas_coagulant(\"ham\", 0.6).\n.decl Answer()\nAnswer() :- Has_coagulant(\"ham\", coagulant1), coagulant1 > 0.0.\n.output Answer", "completions": [".decl Has_coagulant(Object:symbol, Coagulant:float)\nHas_coagulant(\"ham\", 0.6).\n.decl Answer()\nAnswer() :- Has_coagulant(\"ham\", coagulant1), coagulant1 > 0.0.\n.output Answer"]}
{"id": 2092, "answer": false, "completion": ".decl Spreads_to(Disease:symbol, Person:symbol)\nSpreads_to(\"COVID-19\", \"maritime pilot\").\n.decl Answer()\nAnswer() :- Spreads_to(\"COVID-19\", \"maritime pilot\").\n.output Answer", "completions": [".decl Spreads_to(Disease:symbol, Person:symbol)\nSpreads_to(\"COVID-19\", \"maritime pilot\").\n.decl Answer()\nAnswer() :- Spreads_to(\"COVID-19\", \"maritime pilot\").\n.output Answer"]}
{"id": 2093, "answer": true, "completion": ".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Tsar\", \"ruler\").\nHas_title(\"duke\", \"nobleman\").\n.decl Answer()\nAnswer() :- Has_title(\"Tsar\", title1), Has_title(\"duke\", title2), title1 > title2.\n.output Answer", "completions": [".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"Tsar\", \"ruler\").\nHas_title(\"duke\", \"nobleman\").\n.decl Answer()\nAnswer() :- Has_title(\"Tsar\", title1), Has_title(\"duke\", title2), title1 > title2.\n.output Answer"]}
{"id": 2094, "answer": true, "completion": ".decl Is_twin(Person:symbol)\nIs_twin(\"John\").\nIs_twin(\"Mary\").\n.decl Is_male(Person:symbol)\nIs_male(\"John\").\n.decl Answer()\nAnswer() :- Is_twin(person1), Is_twin(person2), Is_male(person1), Is_male(person2).\n.output Answer", "completions": [".decl Is_twin(Person:symbol)\nIs_twin(\"John\").\nIs_twin(\"Mary\").\n.decl Is_male(Person:symbol)\nIs_male(\"John\").\n.decl Answer()\nAnswer() :- Is_twin(person1), Is_twin(person2), Is_male(person1), Is_male(person2).\n.output Answer"]}
{"id": 2095, "answer": false, "completion": ".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"dandelion\", \"hepatitis\").\n.decl Answer()\nAnswer() :- Has_disease(\"dandelion\", \"hepatitis\").\n.output Answer", "completions": [".decl Has_disease(Organism:symbol, Disease:symbol)\nHas_disease(\"dandelion\", \"hepatitis\").\n.decl Answer()\nAnswer() :- Has_disease(\"dandelion\", \"hepatitis\").\n.output Answer"]}
{"id": 2096, "answer": true, "completion": ".decl Has_competitors(Person:symbol, Competitors:symbol)\nHas_competitors(\"Jack Black\", \"Bear McCreary\").\n.decl Answer()\nAnswer() :- Has_competitors(\"Jack Black\", \"Bear McCreary\").\n.output Answer", "completions": [".decl Has_competitors(Person:symbol, Competitors:symbol)\nHas_competitors(\"Jack Black\", \"Bear McCreary\").\n.decl Answer()\nAnswer() :- Has_competitors(\"Jack Black\", \"Bear McCreary\").\n.output Answer"]}
{"id": 2097, "answer": true, "completion": ".decl Is_deadly(Object:symbol, Individual:symbol)\nIs_deadly(\"eggplant\", \"most atopic individuals\").\n.decl Answer()\nAnswer() :- Is_deadly(\"eggplant\", individual).\n.output Answer", "completions": [".decl Is_deadly(Object:symbol, Individual:symbol)\nIs_deadly(\"eggplant\", \"most atopic individuals\").\n.decl Answer()\nAnswer() :- Is_deadly(\"eggplant\", individual).\n.output Answer"]}
{"id": 2098, "answer": true, "completion": ".decl Takes_n_hours(Trip:symbol, N_hours:float)\nTakes_n_hours(\"New York Public Library\", 1).\nTakes_n_hours(\"Six Flags Great Escape\", 8).\n.decl Answer()\nAnswer() :- Takes_n_hours(\"New York Public Library\", n_hours1), Takes_n_hours(\"Six Flags Great Escape\", n_hours2), n_hours1 + n_hours2 <= 24.\n.output Answer", "completions": [".decl Takes_n_hours(Trip:symbol, N_hours:float)\nTakes_n_hours(\"New York Public Library\", 1).\nTakes_n_hours(\"Six Flags Great Escape\", 8).\n.decl Answer()\nAnswer() :- Takes_n_hours(\"New York Public Library\", n_hours1), Takes_n_hours(\"Six Flags Great Escape\", n_hours2), n_hours1 + n_hours2 <= 24.\n.output Answer"]}
{"id": 2099, "answer": true, "completion": ".decl Uses_carrier(Airline:symbol, Carrier:symbol)\nUses_carrier(\"Southwest Airlines\", \"Boeing 737\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 717\").\nUses_carrier(\"Southwest Airlines\", \"McDonnell Douglas MD-80\").\nUses_carrier(\"Southwest Airlines\", \"McDonnell Douglas MD-90\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-700\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-800\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-MAX 8\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-MAX 7\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-MAX\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-8\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-800W\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-900ER\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-9\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-900\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4W\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737", "completions": [".decl Uses_carrier(Airline:symbol, Carrier:symbol)\nUses_carrier(\"Southwest Airlines\", \"Boeing 737\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 717\").\nUses_carrier(\"Southwest Airlines\", \"McDonnell Douglas MD-80\").\nUses_carrier(\"Southwest Airlines\", \"McDonnell Douglas MD-90\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-700\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-800\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-MAX 8\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-MAX 7\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-MAX\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-8\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-800W\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-900ER\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-9\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-900\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4W\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737-7H4WL\").\nUses_carrier(\"Southwest Airlines\", \"Boeing 737"]}
{"id": 2100, "answer": true, "completion": ".decl Has_radiation(Place:symbol, Radiation:float)\nHas_radiation(\"Colorado Springs\", 0.1).\n.decl Worked_in(Person:symbol, Place:symbol)\nWorked_in(\"Nikola Tesla\", \"Colorado Springs\").\n.decl Answer()\nAnswer() :- Worked_in(\"Nikola Tesla\", place), Has_radiation(place, radiation), radiation > 0.\n.output Answer", "completions": [".decl Has_radiation(Place:symbol, Radiation:float)\nHas_radiation(\"Colorado Springs\", 0.1).\n.decl Worked_in(Person:symbol, Place:symbol)\nWorked_in(\"Nikola Tesla\", \"Colorado Springs\").\n.decl Answer()\nAnswer() :- Worked_in(\"Nikola Tesla\", place), Has_radiation(place, radiation), radiation > 0.\n.output Answer"]}
{"id": 2101, "answer": true, "completion": ".decl Eats(Person:symbol, Dish:symbol)\nEats(\"Steve Martin\", \"shrimp pasta\").\n.decl Answer()\nAnswer() :- Eats(\"Steve Martin\", \"shrimp pasta\").\n.output Answer", "completions": [".decl Eats(Person:symbol, Dish:symbol)\nEats(\"Steve Martin\", \"shrimp pasta\").\n.decl Answer()\nAnswer() :- Eats(\"Steve Martin\", \"shrimp pasta\").\n.output Answer"]}
{"id": 2102, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"The Mentalist\", \"black and white\").\n.decl Answer()\nAnswer() :- Has_color(\"The Mentalist\", color).\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"The Mentalist\", \"black and white\").\n.decl Answer()\nAnswer() :- Has_color(\"The Mentalist\", color).\n.output Answer"]}
{"id": 2103, "answer": true, "completion": ".decl Is_real(Object:symbol)\nIs_real(\"olive tree\").\n.decl Is_real(Object:symbol)\nIs_real(\"Bugs Bunny\").\n.decl Answer()\nAnswer() :- Is_real(\"olive tree\"), Is_real(\"Bugs Bunny\"), !.\n.output Answer", "completions": [".decl Is_real(Object:symbol)\nIs_real(\"olive tree\").\n.decl Is_real(Object:symbol)\nIs_real(\"Bugs Bunny\").\n.decl Answer()\nAnswer() :- Is_real(\"olive tree\"), Is_real(\"Bugs Bunny\"), !.\n.output Answer"]}
{"id": 2104, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"lips\", \"blue\").\n.decl Is_normal(Object:symbol)\nIs_normal(\"lips\").\n.decl Answer()\nAnswer() :- Has_color(\"lips\", \"blue\"), Is_normal(\"lips\").\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"lips\", \"blue\").\n.decl Is_normal(Object:symbol)\nIs_normal(\"lips\").\n.decl Answer()\nAnswer() :- Has_color(\"lips\", \"blue\"), Is_normal(\"lips\").\n.output Answer"]}
{"id": 2105, "answer": false, "completion": ".decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"second row of QWERTY keyboard\", \"a\").\nHas_letter(\"second row of QWERTY keyboard\", \"b\").\nHas_letter(\"second row of QWERTY keyboard\", \"d\").\nHas_letter(\"second row of QWERTY keyboard\", \"s\").\nHas_letter(\"second row of QWERTY keyboard\", \"t\").\nHas_letter(\"second row of QWERTY keyboard\", \"u\").\nHas_letter(\"second row of QWERTY keyboard\", \"r\").\n.decl Spelled_with_letters(Word:symbol, Letter1:symbol, Letter2:symbol, Letter3:symbol, Letter4:symbol, Letter5:symbol, Letter6:symbol)\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"a\", \"s\", \"t\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"a\", \"s\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"a\", \"t\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"a\", \"t\", \"s\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"s\", \"t\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"s\", \"t\", \"s\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"s\", \"u\", \"t\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"s\", \"u\", \"s\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"t\", \"u\", \"s\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"t\", \"u\", \"t\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"t\", \"s\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"t\", \"s\", \"t\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"a\", \"t\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"a\", \"s\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"a\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"s\", \"t\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"s\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"t\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"t\", \"s\").\nSpelled_with_letters(\"abdastartus", "completions": [".decl Has_letter(Row:symbol, Letter:symbol)\nHas_letter(\"second row of QWERTY keyboard\", \"a\").\nHas_letter(\"second row of QWERTY keyboard\", \"b\").\nHas_letter(\"second row of QWERTY keyboard\", \"d\").\nHas_letter(\"second row of QWERTY keyboard\", \"s\").\nHas_letter(\"second row of QWERTY keyboard\", \"t\").\nHas_letter(\"second row of QWERTY keyboard\", \"u\").\nHas_letter(\"second row of QWERTY keyboard\", \"r\").\n.decl Spelled_with_letters(Word:symbol, Letter1:symbol, Letter2:symbol, Letter3:symbol, Letter4:symbol, Letter5:symbol, Letter6:symbol)\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"a\", \"s\", \"t\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"a\", \"s\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"a\", \"t\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"a\", \"t\", \"s\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"s\", \"t\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"s\", \"t\", \"s\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"s\", \"u\", \"t\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"s\", \"u\", \"s\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"t\", \"u\", \"s\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"t\", \"u\", \"t\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"t\", \"s\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"d\", \"t\", \"s\", \"t\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"a\", \"t\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"a\", \"s\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"a\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"s\", \"t\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"s\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"t\", \"u\").\nSpelled_with_letters(\"abdastartus\", \"a\", \"b\", \"s\", \"d\", \"t\", \"s\").\nSpelled_with_letters(\"abdastartus"]}
{"id": 2106, "answer": true, "completion": ".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"2020 Jaguar F Type\", 4).\n.decl Has_n_members(Family:symbol, N_members:float)\nHas_n_members(\"Family of Barack Obama\", 4).\n.decl Answer()\nAnswer() :- Has_capacity(\"2020 Jaguar F Type\", capacity), Has_n_members(\"Family of Barack Obama\", n_members), capacity >= n_members.\n.output Answer", "completions": [".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"2020 Jaguar F Type\", 4).\n.decl Has_n_members(Family:symbol, N_members:float)\nHas_n_members(\"Family of Barack Obama\", 4).\n.decl Answer()\nAnswer() :- Has_capacity(\"2020 Jaguar F Type\", capacity), Has_n_members(\"Family of Barack Obama\", n_members), capacity >= n_members.\n.output Answer"]}
{"id": 2107, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"peach fruit\", \"pink\").\nHas_color(\"peach fruit\", \"orange\").\nHas_color(\"peach fruit\", \"yellow\").\nHas_color(\"Princess Peach's dress\", \"pink\").\nHas_color(\"Princess Peach's dress\", \"orange\").\nHas_color(\"Princess Peach's dress\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_color(\"peach fruit\", color1), Has_color(\"Princess Peach's dress\", color2), color1 = color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"peach fruit\", \"pink\").\nHas_color(\"peach fruit\", \"orange\").\nHas_color(\"peach fruit\", \"yellow\").\nHas_color(\"Princess Peach's dress\", \"pink\").\nHas_color(\"Princess Peach's dress\", \"orange\").\nHas_color(\"Princess Peach's dress\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_color(\"peach fruit\", color1), Has_color(\"Princess Peach's dress\", color2), color1 = color2.\n.output Answer"]}
{"id": 2108, "answer": true, "completion": ".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"La Grenouille\", \"salsa\").\n.decl Answer()\nAnswer() :- Serves(\"La Grenouille\", \"salsa\").\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"La Grenouille\", \"salsa\").\n.decl Answer()\nAnswer() :- Serves(\"La Grenouille\", \"salsa\").\n.output Answer"]}
{"id": 2109, "answer": true, "completion": ".decl Works_in_city(Person:symbol, City:symbol)\nWorks_in_city(\"Abdulqawi Yusuf\", \"The Hague\").\n.decl Is_capital_city(City:symbol)\nIs_capital_city(\"The Hague\").\n.decl Answer()\nAnswer() :- Works_in_city(\"Abdulqawi Yusuf\", \"The Hague\"), Is_capital_city(\"The Hague\").\n.output Answer", "completions": [".decl Works_in_city(Person:symbol, City:symbol)\nWorks_in_city(\"Abdulqawi Yusuf\", \"The Hague\").\n.decl Is_capital_city(City:symbol)\nIs_capital_city(\"The Hague\").\n.decl Answer()\nAnswer() :- Works_in_city(\"Abdulqawi Yusuf\", \"The Hague\"), Is_capital_city(\"The Hague\").\n.output Answer"]}
{"id": 2110, "answer": true, "completion": ".decl Has_pattern(Object:symbol, Pattern:symbol)\nHas_pattern(\"blood spatter\", \"random\").\nHas_pattern(\"Jackson Pollock piece\", \"random\").\n.decl Answer()\nAnswer() :- Has_pattern(\"blood spatter\", pattern1), Has_pattern(\"Jackson Pollock piece\", pattern2), pattern1 = pattern2.\n.output Answer", "completions": [".decl Has_pattern(Object:symbol, Pattern:symbol)\nHas_pattern(\"blood spatter\", \"random\").\nHas_pattern(\"Jackson Pollock piece\", \"random\").\n.decl Answer()\nAnswer() :- Has_pattern(\"blood spatter\", pattern1), Has_pattern(\"Jackson Pollock piece\", pattern2), pattern1 = pattern2.\n.output Answer"]}
{"id": 2111, "answer": true, "completion": ".decl Has_area(City:symbol, Area:float)\nHas_area(\"Miami\", 36).\nHas_area(\"Uppsala\", 49).\n.decl Answer()\nAnswer() :- Has_area(\"Miami\", area1), Has_area(\"Uppsala\", area2), area1 < area2.\n.output Answer", "completions": [".decl Has_area(City:symbol, Area:float)\nHas_area(\"Miami\", 36).\nHas_area(\"Uppsala\", 49).\n.decl Answer()\nAnswer() :- Has_area(\"Miami\", area1), Has_area(\"Uppsala\", area2), area1 < area2.\n.output Answer"]}
{"id": 2112, "answer": true, "completion": ".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"hair\", \"hair\").\nHas_material(\"furniture\", \"wood\").\nHas_material(\"furniture\", \"metal\").\nHas_material(\"furniture\", \"plastic\").\n.decl Answer()\nAnswer() :- Has_material(\"furniture\", \"hair\").\n.output Answer", "completions": [".decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"hair\", \"hair\").\nHas_material(\"furniture\", \"wood\").\nHas_material(\"furniture\", \"metal\").\nHas_material(\"furniture\", \"plastic\").\n.decl Answer()\nAnswer() :- Has_material(\"furniture\", \"hair\").\n.output Answer"]}
{"id": 2113, "answer": true, "completion": ".decl Succeeds(Person1:symbol, Person2:symbol)\nSucceeds(\"Jacinda Ardern\", \"John Key\").\n.decl Precedes(Person1:symbol, Person2:symbol)\nPrecedes(\"John Key\", \"Jacinda Ardern\").\n.decl Answer()\nAnswer() :- Succeeds(person1, \"John Key\"), Succeeds(person2, \"John Key\"), Precedes(person3, \"John Key\"), person1 != person2, person1 != person3, person2 != person3, person1 != person3.\n.output Answer", "completions": [".decl Succeeds(Person1:symbol, Person2:symbol)\nSucceeds(\"Jacinda Ardern\", \"John Key\").\n.decl Precedes(Person1:symbol, Person2:symbol)\nPrecedes(\"John Key\", \"Jacinda Ardern\").\n.decl Answer()\nAnswer() :- Succeeds(person1, \"John Key\"), Succeeds(person2, \"John Key\"), Precedes(person3, \"John Key\"), person1 != person2, person1 != person3, person2 != person3, person1 != person3.\n.output Answer"]}
{"id": 2114, "answer": false, "completion": ".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"Toyota Prius battery\", -40).\nHas_melting_point(\"microwave\", -200).\n.decl Answer()\nAnswer() :- Has_melting_point(\"Toyota Prius battery\", melting_point1), Has_melting_point(\"microwave\", melting_point2), melting_point1 < melting_point2.\n.output Answer", "completions": [".decl Has_melting_point(Object:symbol, Melting_point:float)\nHas_melting_point(\"Toyota Prius battery\", -40).\nHas_melting_point(\"microwave\", -200).\n.decl Answer()\nAnswer() :- Has_melting_point(\"Toyota Prius battery\", melting_point1), Has_melting_point(\"microwave\", melting_point2), melting_point1 < melting_point2.\n.output Answer"]}
{"id": 2115, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"J. P. Morgan\", \"tuberculosis\").\n.decl Answer()\nAnswer() :- Has_disease(\"J. P. Morgan\", \"healthy lungs\").\nAnswer() :- Has_disease(\"J. P. Morgan\", disease), disease != \"healthy lungs\".\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"J. P. Morgan\", \"tuberculosis\").\n.decl Answer()\nAnswer() :- Has_disease(\"J. P. Morgan\", \"healthy lungs\").\nAnswer() :- Has_disease(\"J. P. Morgan\", disease), disease != \"healthy lungs\".\n.output Answer"]}
{"id": 2116, "answer": true, "completion": ".decl Has_been_in_band(Person:symbol, Band:symbol)\nHas_been_in_band(\"Gorillaz creator\", \"Gorillaz\").\nHas_been_in_band(\"Gorillaz creator\", \"Blur\").\nHas_been_in_band(\"Bernard Sumner\", \"Joy Division\").\nHas_been_in_band(\"Bernard Sumner\", \"New Order\").\n.decl Answer()\nAnswer() :- Has_been_in_band(\"Gorillaz creator\", band1), Has_been_in_band(\"Bernard Sumner\", band2), band1 != band2.\n.output Answer", "completions": [".decl Has_been_in_band(Person:symbol, Band:symbol)\nHas_been_in_band(\"Gorillaz creator\", \"Gorillaz\").\nHas_been_in_band(\"Gorillaz creator\", \"Blur\").\nHas_been_in_band(\"Bernard Sumner\", \"Joy Division\").\nHas_been_in_band(\"Bernard Sumner\", \"New Order\").\n.decl Answer()\nAnswer() :- Has_been_in_band(\"Gorillaz creator\", band1), Has_been_in_band(\"Bernard Sumner\", band2), band1 != band2.\n.output Answer"]}
{"id": 2117, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"wheelbarrow\", 100).\nHas_mass(\"starch\", 1).\n.decl Answer()\nAnswer() :- Has_mass(\"wheelbarrow\", mass1), Has_mass(\"starch\", mass2), mass1 * mass2 > 1000.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"wheelbarrow\", 100).\nHas_mass(\"starch\", 1).\n.decl Answer()\nAnswer() :- Has_mass(\"wheelbarrow\", mass1), Has_mass(\"starch\", mass2), mass1 * mass2 > 1000.\n.output Answer"]}
{"id": 2118, "answer": false, "completion": ".decl Has_capacity(Location:symbol, Capacity:float)\nHas_capacity(\"Indianapolis Motor Speedway\", 257000).\n.decl Has_casualties(War:symbol, Casualties:float)\nHas_casualties(\"Seven Years' War\", 40000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Indianapolis Motor Speedway\", capacity), Has_casualties(\"Seven Years' War\", casualties), casualties <= capacity.\n.output Answer", "completions": [".decl Has_capacity(Location:symbol, Capacity:float)\nHas_capacity(\"Indianapolis Motor Speedway\", 257000).\n.decl Has_casualties(War:symbol, Casualties:float)\nHas_casualties(\"Seven Years' War\", 40000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Indianapolis Motor Speedway\", capacity), Has_casualties(\"Seven Years' War\", casualties), casualties <= capacity.\n.output Answer"]}
{"id": 2119, "answer": false, "completion": ".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"Pearl Harbor attack\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"Pearl Harbor attack\", \"autumn\").\n.output Answer", "completions": [".decl Happens_in_season(Event:symbol, Season:symbol)\nHappens_in_season(\"Pearl Harbor attack\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_season(\"Pearl Harbor attack\", \"autumn\").\n.output Answer"]}
{"id": 2120, "answer": true, "completion": ".decl Turned_chair_around(Person:symbol, Person2:symbol)\nTurned_chair_around(\"Christina Aguilera\", \"Kelly Clarkson\").\n.decl Answer()\nAnswer() :- Turned_chair_around(\"Christina Aguilera\", \"Kelly Clarkson\").\n.output Answer", "completions": [".decl Turned_chair_around(Person:symbol, Person2:symbol)\nTurned_chair_around(\"Christina Aguilera\", \"Kelly Clarkson\").\n.decl Answer()\nAnswer() :- Turned_chair_around(\"Christina Aguilera\", \"Kelly Clarkson\").\n.output Answer"]}
{"id": 2121, "answer": true, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"World of Warcraft\", 0.1).\nHas_mass(\"loaf of bread\", 0.5).\n.decl Answer()\nAnswer() :- Has_mass(\"World of Warcraft\", mass1), Has_mass(\"loaf of bread\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"World of Warcraft\", 0.1).\nHas_mass(\"loaf of bread\", 0.5).\n.decl Answer()\nAnswer() :- Has_mass(\"World of Warcraft\", mass1), Has_mass(\"loaf of bread\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 2122, "answer": true, "completion": ".decl Has_political_view(Person:symbol, Political_view:symbol)\nHas_political_view(\"right wing American\", \"opposed to marxism\").\n.decl Answer()\nAnswer() :- Has_political_view(\"right wing American\", \"opposed to marxism\").\n.output Answer", "completions": [".decl Has_political_view(Person:symbol, Political_view:symbol)\nHas_political_view(\"right wing American\", \"opposed to marxism\").\n.decl Answer()\nAnswer() :- Has_political_view(\"right wing American\", \"opposed to marxism\").\n.output Answer"]}
{"id": 2123, "answer": true, "completion": ".decl Has_budget(Film:symbol, Budget:float)\nHas_budget(\"King Kong (2005 film)\", 207).\n.decl Has_revenue(Film:symbol, Revenue:float)\nHas_revenue(\"King Kong (2005 film)\", 550).\n.decl Answer()\nAnswer() :- Has_budget(\"King Kong (2005 film)\", budget), Has_revenue(\"King Kong (2005 film)\", revenue), revenue > budget.\n.output Answer", "completions": [".decl Has_budget(Film:symbol, Budget:float)\nHas_budget(\"King Kong (2005 film)\", 207).\n.decl Has_revenue(Film:symbol, Revenue:float)\nHas_revenue(\"King Kong (2005 film)\", 550).\n.decl Answer()\nAnswer() :- Has_budget(\"King Kong (2005 film)\", budget), Has_revenue(\"King Kong (2005 film)\", revenue), revenue > budget.\n.output Answer"]}
{"id": 2124, "answer": true, "completion": ".decl Is_good_for(Gardener:symbol, Crop:symbol)\nIs_good_for(\"entomophobia\", \"seedless cucumber\").\n.decl Answer()\nAnswer() :- Is_good_for(\"entomophobia\", \"seedless cucumber\").\n.output Answer", "completions": [".decl Is_good_for(Gardener:symbol, Crop:symbol)\nIs_good_for(\"entomophobia\", \"seedless cucumber\").\n.decl Answer()\nAnswer() :- Is_good_for(\"entomophobia\", \"seedless cucumber\").\n.output Answer"]}
{"id": 2125, "answer": true, "completion": ".decl Hates(Person:symbol, Cuisine:symbol)\nHates(\"Garfield\", \"italian cuisine\").\n.decl Answer()\nAnswer() :- Hates(\"Garfield\", \"italian cuisine\").\n.output Answer", "completions": [".decl Hates(Person:symbol, Cuisine:symbol)\nHates(\"Garfield\", \"italian cuisine\").\n.decl Answer()\nAnswer() :- Hates(\"Garfield\", \"italian cuisine\").\n.output Answer"]}
{"id": 2126, "answer": true, "completion": ".decl Practices(Person:symbol, Religion:symbol)\nPractices(\"Shinto practitioner\", \"Shinto\").\n.decl Adheres_to(Religion:symbol, Diet:symbol)\nAdheres_to(\"Shinto\", \"kosher\").\n.decl Answer()\nAnswer() :- Practices(\"Shinto practitioner\", \"Shinto\"), Adheres_to(\"Shinto\", \"kosher\").\n.output Answer", "completions": [".decl Practices(Person:symbol, Religion:symbol)\nPractices(\"Shinto practitioner\", \"Shinto\").\n.decl Adheres_to(Religion:symbol, Diet:symbol)\nAdheres_to(\"Shinto\", \"kosher\").\n.decl Answer()\nAnswer() :- Practices(\"Shinto practitioner\", \"Shinto\"), Adheres_to(\"Shinto\", \"kosher\").\n.output Answer"]}
{"id": 2127, "answer": false, "completion": ".decl Has_texture(Leaf:symbol, Texture:symbol)\nHas_texture(\"leaf\", \"smooth\").\nHas_texture(\"leaf\", \"rough\").\n.decl Has_color(Leaf:symbol, Color:symbol)\nHas_color(\"leaf\", \"green\").\nHas_color(\"leaf\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_texture(leaf, texture), Has_color(leaf, color1), Has_color(leaf, color2), texture = texture.\n.output Answer", "completions": [".decl Has_texture(Leaf:symbol, Texture:symbol)\nHas_texture(\"leaf\", \"smooth\").\nHas_texture(\"leaf\", \"rough\").\n.decl Has_color(Leaf:symbol, Color:symbol)\nHas_color(\"leaf\", \"green\").\nHas_color(\"leaf\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_texture(leaf, texture), Has_color(leaf, color1), Has_color(leaf, color2), texture = texture.\n.output Answer"]}
{"id": 2128, "answer": true, "completion": ".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Sam Harris\", \"Shiva\").\n.decl Answer()\nAnswer() :- Worships(\"Sam Harris\", \"Shiva\").\n.output Answer", "completions": [".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Sam Harris\", \"Shiva\").\n.decl Answer()\nAnswer() :- Worships(\"Sam Harris\", \"Shiva\").\n.output Answer"]}
{"id": 2129, "answer": false, "completion": ".decl Has_leaf_color(Tree_species:symbol, Leaf_color:symbol)\nHas_leaf_color(\"Leipzig\", \"green\").\n.decl Is_evergreen(Tree_species:symbol)\nIs_evergreen(\"Leipzig\").\n.decl Answer()\nAnswer() :- Has_leaf_color(tree_species, \"green\"), Is_evergreen(tree_species).\n.output Answer", "completions": [".decl Has_leaf_color(Tree_species:symbol, Leaf_color:symbol)\nHas_leaf_color(\"Leipzig\", \"green\").\n.decl Is_evergreen(Tree_species:symbol)\nIs_evergreen(\"Leipzig\").\n.decl Answer()\nAnswer() :- Has_leaf_color(tree_species, \"green\"), Is_evergreen(tree_species).\n.output Answer"]}
{"id": 2130, "answer": true, "completion": ".decl Causes(Treatment:symbol, Symptom:symbol)\nCauses(\"acupuncture\", \"pain\").\n.decl Answer()\nAnswer() :- Causes(\"acupuncture\", \"pain\").\n.output Answer", "completions": [".decl Causes(Treatment:symbol, Symptom:symbol)\nCauses(\"acupuncture\", \"pain\").\n.decl Answer()\nAnswer() :- Causes(\"acupuncture\", \"pain\").\n.output Answer"]}
{"id": 2131, "answer": false, "completion": ".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"RoboCop director\", \"United States\").\nIs_from(\"Gaite Jansen\", \"Netherlands\").\n.decl Answer()\nAnswer() :- Is_from(\"RoboCop director\", country1), Is_from(\"Gaite Jansen\", country2), country1 != country2.\n.output Answer", "completions": [".decl Is_from(Person:symbol, Country:symbol)\nIs_from(\"RoboCop director\", \"United States\").\nIs_from(\"Gaite Jansen\", \"Netherlands\").\n.decl Answer()\nAnswer() :- Is_from(\"RoboCop director\", country1), Is_from(\"Gaite Jansen\", country2), country1 != country2.\n.output Answer"]}
{"id": 2132, "answer": false, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 2133, "answer": true, "completion": ".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"black salt\", \"sulfur\").\n.decl Smells_of(Food:symbol, Smell:symbol)\nSmells_of(\"black salt\", \"sulfur\").\n.decl Answer()\nAnswer() :- Contains(food, \"black salt\"), Smells_of(\"black salt\", \"sulfur\").\n.output Answer", "completions": [".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"black salt\", \"sulfur\").\n.decl Smells_of(Food:symbol, Smell:symbol)\nSmells_of(\"black salt\", \"sulfur\").\n.decl Answer()\nAnswer() :- Contains(food, \"black salt\"), Smells_of(\"black salt\", \"sulfur\").\n.output Answer"]}
{"id": 2134, "answer": false, "completion": ".decl Lives_for_n_days(Animal:symbol, N_days:float)\nLives_for_n_days(\"wild cane toad\", 12).\nLives_for_n_days(\"Hawaiian male\", 79).\n.decl Answer()\nAnswer() :- Lives_for_n_days(\"wild cane toad\", n_days1), Lives_for_n_days(\"Hawaiian male\", n_days2), n_days2 > n_days1.\n.output Answer", "completions": [".decl Lives_for_n_days(Animal:symbol, N_days:float)\nLives_for_n_days(\"wild cane toad\", 12).\nLives_for_n_days(\"Hawaiian male\", 79).\n.decl Answer()\nAnswer() :- Lives_for_n_days(\"wild cane toad\", n_days1), Lives_for_n_days(\"Hawaiian male\", n_days2), n_days2 > n_days1.\n.output Answer"]}
{"id": 2135, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"eggs need to be kept cold\", \"middle ages\").\nHappens_in_time(\"eggs need to be kept cold\", \"modern times\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"eggs need to be kept cold\", \"middle ages\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"eggs need to be kept cold\", \"middle ages\").\nHappens_in_time(\"eggs need to be kept cold\", \"modern times\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"eggs need to be kept cold\", \"middle ages\").\n.output Answer"]}
{"id": 2136, "answer": true, "completion": ".decl Has_swallowing_disorder(Person:symbol)\nHas_swallowing_disorder(\"person1\").\nHas_swallowing_disorder(\"person2\").\n.decl Has_viscosity(Drink:symbol, Viscosity:float)\nHas_viscosity(\"drink1\", 1).\nHas_viscosity(\"drink2\", 2).\nHas_viscosity(\"drink3\", 3).\n.decl Answer()\nAnswer() :- Has_swallowing_disorder(person), Has_viscosity(drink, viscosity), viscosity >= 1.\n.output Answer", "completions": [".decl Has_swallowing_disorder(Person:symbol)\nHas_swallowing_disorder(\"person1\").\nHas_swallowing_disorder(\"person2\").\n.decl Has_viscosity(Drink:symbol, Viscosity:float)\nHas_viscosity(\"drink1\", 1).\nHas_viscosity(\"drink2\", 2).\nHas_viscosity(\"drink3\", 3).\n.decl Answer()\nAnswer() :- Has_swallowing_disorder(person), Has_viscosity(drink, viscosity), viscosity >= 1.\n.output Answer"]}
{"id": 2137, "answer": true, "completion": ".decl Has_attribute(Person:symbol, Attribute:symbol)\nHas_attribute(\"Krishna\", \"god\").\nHas_attribute(\"Holy Spirit\", \"god\").\nHas_attribute(\"Krishna\", \"blue\").\nHas_attribute(\"Holy Spirit\", \"blue\").\nHas_attribute(\"Krishna\", \"cowherd\").\nHas_attribute(\"Holy Spirit\", \"cowherd\").\nHas_attribute(\"Krishna\", \"son of Vasudeva\").\nHas_attribute(\"Holy Spirit\", \"son of God\").\n.decl Answer()\nAnswer() :- Has_attribute(\"Krishna\", attribute1), Has_attribute(\"Holy Spirit\", attribute2), attribute1 = attribute2.\n.output Answer", "completions": [".decl Has_attribute(Person:symbol, Attribute:symbol)\nHas_attribute(\"Krishna\", \"god\").\nHas_attribute(\"Holy Spirit\", \"god\").\nHas_attribute(\"Krishna\", \"blue\").\nHas_attribute(\"Holy Spirit\", \"blue\").\nHas_attribute(\"Krishna\", \"cowherd\").\nHas_attribute(\"Holy Spirit\", \"cowherd\").\nHas_attribute(\"Krishna\", \"son of Vasudeva\").\nHas_attribute(\"Holy Spirit\", \"son of God\").\n.decl Answer()\nAnswer() :- Has_attribute(\"Krishna\", attribute1), Has_attribute(\"Holy Spirit\", attribute2), attribute1 = attribute2.\n.output Answer"]}
{"id": 2138, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Treaty of Versailles\", \"France\").\nHappens_in_place(\"blueberry scones\", \"England\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Treaty of Versailles\", \"France\"), Happens_in_place(\"blueberry scones\", \"England\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Treaty of Versailles\", \"France\").\nHappens_in_place(\"blueberry scones\", \"England\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Treaty of Versailles\", \"France\"), Happens_in_place(\"blueberry scones\", \"England\").\n.output Answer"]}
{"id": 2139, "answer": false, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Disney's seven dwarves\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"original seven dwarves\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Disney's seven dwarves\", n_members1), Has_n_members(\"original seven dwarves\", n_members2), n_members1 = n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Disney's seven dwarves\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"original seven dwarves\", 7).\n.decl Answer()\nAnswer() :- Has_n_members(\"Disney's seven dwarves\", n_members1), Has_n_members(\"original seven dwarves\", n_members2), n_members1 = n_members2.\n.output Answer"]}
{"id": 2140, "answer": true, "completion": ".decl Has_TV(Home:symbol)\nHas_TV(\"Mennonite home\").\n.decl Has_cable(Home:symbol)\nHas_cable(\"Mennonite home\").\n.decl Answer()\nAnswer() :- Has_TV(\"Mennonite home\"), Has_cable(\"Mennonite home\").\n.output Answer", "completions": [".decl Has_TV(Home:symbol)\nHas_TV(\"Mennonite home\").\n.decl Has_cable(Home:symbol)\nHas_cable(\"Mennonite home\").\n.decl Answer()\nAnswer() :- Has_TV(\"Mennonite home\"), Has_cable(\"Mennonite home\").\n.output Answer"]}
{"id": 2141, "answer": true, "completion": ".decl Has_zodiac_sign(Person:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"Satanism\", \"Capricorn\").\n.decl Answer()\nAnswer() :- Has_zodiac_sign(\"Satanism\", \"Capricorn\").\n.output Answer", "completions": [".decl Has_zodiac_sign(Person:symbol, Zodiac_sign:symbol)\nHas_zodiac_sign(\"Satanism\", \"Capricorn\").\n.decl Answer()\nAnswer() :- Has_zodiac_sign(\"Satanism\", \"Capricorn\").\n.output Answer"]}
{"id": 2142, "answer": true, "completion": ".decl Needs(Snack:symbol, Ingredient:symbol)\nNeeds(\"banana sandwich\", \"banana\").\nNeeds(\"banana sandwich\", \"bread\").\nNeeds(\"banana sandwich\", \"butter\").\nNeeds(\"banana sandwich\", \"plant\").\n.decl Answer()\nAnswer() :- Needs(\"banana sandwich\", \"plant\").\n.output Answer", "completions": [".decl Needs(Snack:symbol, Ingredient:symbol)\nNeeds(\"banana sandwich\", \"banana\").\nNeeds(\"banana sandwich\", \"bread\").\nNeeds(\"banana sandwich\", \"butter\").\nNeeds(\"banana sandwich\", \"plant\").\n.decl Answer()\nAnswer() :- Needs(\"banana sandwich\", \"plant\").\n.output Answer"]}
{"id": 2143, "answer": false, "completion": ".decl Has_duties(Person:symbol, Duties:symbol)\nHas_duties(\"Hanuman\", \"warrior\").\nHas_duties(\"Hanuman\", \"messenger\").\nHas_duties(\"Hanuman\", \"devotee\").\nHas_duties(\"Athena\", \"warrior\").\nHas_duties(\"Athena\", \"wisdom\").\nHas_duties(\"Athena\", \"crafts\").\n.decl Answer()\nAnswer() :- Has_duties(\"Hanuman\", duties1), Has_duties(\"Athena\", duties2), duties1 = duties2.\n.output Answer", "completions": [".decl Has_duties(Person:symbol, Duties:symbol)\nHas_duties(\"Hanuman\", \"warrior\").\nHas_duties(\"Hanuman\", \"messenger\").\nHas_duties(\"Hanuman\", \"devotee\").\nHas_duties(\"Athena\", \"warrior\").\nHas_duties(\"Athena\", \"wisdom\").\nHas_duties(\"Athena\", \"crafts\").\n.decl Answer()\nAnswer() :- Has_duties(\"Hanuman\", duties1), Has_duties(\"Athena\", duties2), duties1 = duties2.\n.output Answer"]}
{"id": 2144, "answer": true, "completion": ".decl Has_disease(Animal:symbol, Disease:symbol)\nHas_disease(\"human\", \"atherosclerosis\").\n.decl Answer()\nAnswer() :- Has_disease(animal, \"atherosclerosis\"), !, animal != \"jellyfish\".\n.output Answer", "completions": [".decl Has_disease(Animal:symbol, Disease:symbol)\nHas_disease(\"human\", \"atherosclerosis\").\n.decl Answer()\nAnswer() :- Has_disease(animal, \"atherosclerosis\"), !, animal != \"jellyfish\".\n.output Answer"]}
{"id": 2145, "answer": false, "completion": ".decl Conquered_territory(Conqueror:symbol, Territory:symbol)\nConquered_territory(\"Charlemagne\", \"Europe\").\nConquered_territory(\"Temujin\", \"Asia\").\n.decl Answer()\nAnswer() :- Conquered_territory(\"Charlemagne\", territory1), Conquered_territory(\"Temujin\", territory2), territory1 != territory2.\n.output Answer", "completions": [".decl Conquered_territory(Conqueror:symbol, Territory:symbol)\nConquered_territory(\"Charlemagne\", \"Europe\").\nConquered_territory(\"Temujin\", \"Asia\").\n.decl Answer()\nAnswer() :- Conquered_territory(\"Charlemagne\", territory1), Conquered_territory(\"Temujin\", territory2), territory1 != territory2.\n.output Answer"]}
{"id": 2146, "answer": true, "completion": ".decl Has_population(Continent:symbol, Population:float)\nHas_population(\"Antarctica\", 0).\n.decl Answer()\nAnswer() :- Has_population(\"Antarctica\", population), population > 0.\n.output Answer", "completions": [".decl Has_population(Continent:symbol, Population:float)\nHas_population(\"Antarctica\", 0).\n.decl Answer()\nAnswer() :- Has_population(\"Antarctica\", population), population > 0.\n.output Answer"]}
{"id": 2147, "answer": true, "completion": ".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Immersion Baptism\", 1).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"death\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"death\", n_days1), Last_n_days(\"Immersion Baptism\", n_days2),  n_days1 <= n_days2.\n.output Answer", "completions": [".decl Last_n_days(Event:symbol, N_days:float)\nLast_n_days(\"Immersion Baptism\", 1).\n.decl Happens_every_n_days(Event:symbol, N_days:float)\nHappens_every_n_days(\"death\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_days(\"death\", n_days1), Last_n_days(\"Immersion Baptism\", n_days2),  n_days1 <= n_days2.\n.output Answer"]}
{"id": 2148, "answer": true, "completion": ".decl Has_vitamin_A(Food:symbol, Vitamin_A:float)\nHas_vitamin_A(\"raw carrots\", 3.6).\nHas_vitamin_A(\"cooked carrots\", 0.9).\n.decl Answer()\nAnswer() :- Has_vitamin_A(\"raw carrots\", vitamin_A1), Has_vitamin_A(\"cooked carrots\", vitamin_A2), vitamin_A1 > vitamin_A2.\n.output Answer", "completions": [".decl Has_vitamin_A(Food:symbol, Vitamin_A:float)\nHas_vitamin_A(\"raw carrots\", 3.6).\nHas_vitamin_A(\"cooked carrots\", 0.9).\n.decl Answer()\nAnswer() :- Has_vitamin_A(\"raw carrots\", vitamin_A1), Has_vitamin_A(\"cooked carrots\", vitamin_A2), vitamin_A1 > vitamin_A2.\n.output Answer"]}
{"id": 2149, "answer": true, "completion": ".decl Arrived_in(Person:symbol, Vehicle:symbol)\nArrived_in(\"Hulk Hogan\", \"Toyota Prius\").\n.decl Answer()\nAnswer() :- Arrived_in(\"Hulk Hogan\", \"Toyota Prius\").\n.output Answer", "completions": [".decl Arrived_in(Person:symbol, Vehicle:symbol)\nArrived_in(\"Hulk Hogan\", \"Toyota Prius\").\n.decl Answer()\nAnswer() :- Arrived_in(\"Hulk Hogan\", \"Toyota Prius\").\n.output Answer"]}
{"id": 2150, "answer": true, "completion": ".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Emmanuel Macron\", \"Bastille Day\").\n.decl Answer()\nAnswer() :- Celebrates(\"Emmanuel Macron\", \"Cinco de Mayo\").\n.output Answer", "completions": [".decl Celebrates(Person:symbol, Holiday:symbol)\nCelebrates(\"Emmanuel Macron\", \"Bastille Day\").\n.decl Answer()\nAnswer() :- Celebrates(\"Emmanuel Macron\", \"Cinco de Mayo\").\n.output Answer"]}
{"id": 2151, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"eel\", \"sand cat\").\nEats(\"eel\", \"prey\").\n.decl Answer()\nAnswer() :- Eats(\"eel\", \"sand cat\"), !Eats(\"eel\", \"prey\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"eel\", \"sand cat\").\nEats(\"eel\", \"prey\").\n.decl Answer()\nAnswer() :- Eats(\"eel\", \"sand cat\"), !Eats(\"eel\", \"prey\").\n.output Answer"]}
{"id": 2152, "answer": true, "completion": ".decl Is_important_to(Person:symbol, Event:symbol)\nIs_important_to(\"Drew Carey\", \"wrestling\").\n.decl Answer()\nAnswer() :- Is_important_to(\"Drew Carey\", \"wrestling\").\n.output Answer", "completions": [".decl Is_important_to(Person:symbol, Event:symbol)\nIs_important_to(\"Drew Carey\", \"wrestling\").\n.decl Answer()\nAnswer() :- Is_important_to(\"Drew Carey\", \"wrestling\").\n.output Answer"]}
{"id": 2153, "answer": true, "completion": ".decl Uses(Industry:symbol, Fuel:symbol)\nUses(\"oil industry\", \"fossil fuels\").\nUses(\"oil industry\", \"natural gas\").\nUses(\"oil industry\", \"coal\").\n.decl Reduces(Fuel:symbol, Jobs:symbol)\nReduces(\"fossil fuels\", \"jobs in the Gulf of Mexico\").\nReduces(\"natural gas\", \"jobs in the Gulf of Mexico\").\nReduces(\"coal\", \"jobs in the Gulf of Mexico\").\n.decl Answer()\nAnswer() :- Uses(industry, fuel), Reduces(fuel, \"jobs in the Gulf of Mexico\").\n.output Answer", "completions": [".decl Uses(Industry:symbol, Fuel:symbol)\nUses(\"oil industry\", \"fossil fuels\").\nUses(\"oil industry\", \"natural gas\").\nUses(\"oil industry\", \"coal\").\n.decl Reduces(Fuel:symbol, Jobs:symbol)\nReduces(\"fossil fuels\", \"jobs in the Gulf of Mexico\").\nReduces(\"natural gas\", \"jobs in the Gulf of Mexico\").\nReduces(\"coal\", \"jobs in the Gulf of Mexico\").\n.decl Answer()\nAnswer() :- Uses(industry, fuel), Reduces(fuel, \"jobs in the Gulf of Mexico\").\n.output Answer"]}
{"id": 2154, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Roman Gallic Wars\", 10).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"pyramids\", 20).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"pyramids\", n_years1), Last_n_years(\"Roman Gallic Wars\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Roman Gallic Wars\", 10).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"pyramids\", 20).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"pyramids\", n_years1), Last_n_years(\"Roman Gallic Wars\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 2155, "answer": true, "completion": ".decl Uses_utensil(Food:symbol, Utensil:symbol)\nUses_utensil(\"rice\", \"chopsticks\").\nUses_utensil(\"noodles\", \"chopsticks\").\n.decl Serves_food(Company:symbol, Food:symbol)\nServes_food(\"Nissan\", \"rice\").\nServes_food(\"Nissan\", \"noodles\").\n.decl Answer()\nAnswer() :- Serves_food(\"Nissan\", food), Uses_utensil(food, \"chopsticks\").\n.output Answer", "completions": [".decl Uses_utensil(Food:symbol, Utensil:symbol)\nUses_utensil(\"rice\", \"chopsticks\").\nUses_utensil(\"noodles\", \"chopsticks\").\n.decl Serves_food(Company:symbol, Food:symbol)\nServes_food(\"Nissan\", \"rice\").\nServes_food(\"Nissan\", \"noodles\").\n.decl Answer()\nAnswer() :- Serves_food(\"Nissan\", food), Uses_utensil(food, \"chopsticks\").\n.output Answer"]}
{"id": 2156, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"manta ray\", \"ocean\").\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"ocean\", 20).\nHas_temperature(\"refrigerator\", 4).\n.decl Answer()\nAnswer() :- Lives_in(\"manta ray\", location), Has_temperature(location, temperature), temperature > Has_temperature(\"refrigerator\", 4).\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"manta ray\", \"ocean\").\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"ocean\", 20).\nHas_temperature(\"refrigerator\", 4).\n.decl Answer()\nAnswer() :- Lives_in(\"manta ray\", location), Has_temperature(location, temperature), temperature > Has_temperature(\"refrigerator\", 4).\n.output Answer"]}
{"id": 2157, "answer": true, "completion": ".decl Has_n_people(Event:symbol, N_people:float)\nHas_n_people(\"felony jury\", 12).\nHas_n_people(\"Bunco game\", 12).\n.decl Answer()\nAnswer() :- Has_n_people(\"felony jury\", n_people1), Has_n_people(\"Bunco game\", n_people2), n_people1 >= n_people2.\n.output Answer", "completions": [".decl Has_n_people(Event:symbol, N_people:float)\nHas_n_people(\"felony jury\", 12).\nHas_n_people(\"Bunco game\", 12).\n.decl Answer()\nAnswer() :- Has_n_people(\"felony jury\", n_people1), Has_n_people(\"Bunco game\", n_people2), n_people1 >= n_people2.\n.output Answer"]}
{"id": 2158, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Eiffel Tower\", 324).\nHas_height(\"Arctic Ocean's deepest point\", 5,514).\n.decl Answer()\nAnswer() :- Has_height(\"Eiffel Tower\", height1), Has_height(\"Arctic Ocean's deepest point\", height2), height1 < height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Eiffel Tower\", 324).\nHas_height(\"Arctic Ocean's deepest point\", 5,514).\n.decl Answer()\nAnswer() :- Has_height(\"Eiffel Tower\", height1), Has_height(\"Arctic Ocean's deepest point\", height2), height1 < height2.\n.output Answer"]}
{"id": 2159, "answer": false, "completion": ".decl Has_job_title(Person:symbol, Job_title:symbol)\nHas_job_title(\"CEO\", \"CEO\").\nHas_job_title(\"janitor\", \"janitor\").\n.decl Answer()\nAnswer() :- Has_job_title(\"CEO\", \"janitor\").\n.output Answer", "completions": [".decl Has_job_title(Person:symbol, Job_title:symbol)\nHas_job_title(\"CEO\", \"CEO\").\nHas_job_title(\"janitor\", \"janitor\").\n.decl Answer()\nAnswer() :- Has_job_title(\"CEO\", \"janitor\").\n.output Answer"]}
{"id": 2160, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas\", \"winter\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas\", \"winter\").\n.output Answer"]}
{"id": 2161, "answer": true, "completion": ".decl Is_lover(Person1:symbol, Person2:symbol)\nIs_lover(\"Moliere\", \"Queen Margot\").\n.decl Is_ill_fated(Person1:symbol, Person2:symbol)\nIs_ill_fated(\"Moliere\", \"Queen Margot\").\n.decl Answer()\nAnswer() :- Is_lover(\"Moliere\", \"Queen Margot\"), Is_ill_fated(\"Moliere\", \"Queen Margot\").\n.output Answer", "completions": [".decl Is_lover(Person1:symbol, Person2:symbol)\nIs_lover(\"Moliere\", \"Queen Margot\").\n.decl Is_ill_fated(Person1:symbol, Person2:symbol)\nIs_ill_fated(\"Moliere\", \"Queen Margot\").\n.decl Answer()\nAnswer() :- Is_lover(\"Moliere\", \"Queen Margot\"), Is_ill_fated(\"Moliere\", \"Queen Margot\").\n.output Answer"]}
{"id": 2162, "answer": true, "completion": ".decl Needs_for_best_look(Plant:symbol, Need:symbol)\nNeeds_for_best_look(\"Hostas\", \"lots of chlorophyll\").\n.decl Answer()\nAnswer() :- Needs_for_best_look(\"Hostas\", \"lots of chlorophyll\").\n.output Answer\n\n\n", "completions": [".decl Needs_for_best_look(Plant:symbol, Need:symbol)\nNeeds_for_best_look(\"Hostas\", \"lots of chlorophyll\").\n.decl Answer()\nAnswer() :- Needs_for_best_look(\"Hostas\", \"lots of chlorophyll\").\n.output Answer\n\n\n"]}
{"id": 2163, "answer": true, "completion": ".decl Is_sonnet(Poem:symbol)\nIs_sonnet(\"Rime of the Ancient Mariner\").\n.decl Answer()\nAnswer() :- Is_sonnet(\"Rime of the Ancient Mariner\").\n.output Answer", "completions": [".decl Is_sonnet(Poem:symbol)\nIs_sonnet(\"Rime of the Ancient Mariner\").\n.decl Answer()\nAnswer() :- Is_sonnet(\"Rime of the Ancient Mariner\").\n.output Answer"]}
{"id": 2164, "answer": false, "completion": ".decl Studies(Person:symbol, Subject:symbol)\nStudies(\"astronomer\", \"astronomy\").\nStudies(\"geneticist\", \"drosophila\").\n.decl Answer()\nAnswer() :- Studies(\"astronomer\", \"drosophila\").\n.output Answer", "completions": [".decl Studies(Person:symbol, Subject:symbol)\nStudies(\"astronomer\", \"astronomy\").\nStudies(\"geneticist\", \"drosophila\").\n.decl Answer()\nAnswer() :- Studies(\"astronomer\", \"drosophila\").\n.output Answer"]}
{"id": 2165, "answer": false, "completion": ".decl Can_buy(Product:symbol, Currency:symbol, Year:float)\nCan_buy(\"Hershey's Kisses\", \"farthings\", 1960).\n.decl Answer()\nAnswer() :- Can_buy(\"Hershey's Kisses\", \"farthings\", year), year > 1960.\n.output Answer", "completions": [".decl Can_buy(Product:symbol, Currency:symbol, Year:float)\nCan_buy(\"Hershey's Kisses\", \"farthings\", 1960).\n.decl Answer()\nAnswer() :- Can_buy(\"Hershey's Kisses\", \"farthings\", year), year > 1960.\n.output Answer"]}
{"id": 2166, "answer": true, "completion": ".decl Has_brain_structure(Person:symbol, Brain_structure:symbol)\nHas_brain_structure(\"Gauss\", \"normal\").\n.decl Answer()\nAnswer() :- Has_brain_structure(\"Gauss\", \"normal\").\n.output Answer", "completions": [".decl Has_brain_structure(Person:symbol, Brain_structure:symbol)\nHas_brain_structure(\"Gauss\", \"normal\").\n.decl Answer()\nAnswer() :- Has_brain_structure(\"Gauss\", \"normal\").\n.output Answer"]}
{"id": 2167, "answer": false, "completion": ".decl Is_drug(Substance:symbol)\nIs_drug(\"dopamine\").\n.decl Is_route_of_administration(Substance:symbol, Route:symbol)\nIs_route_of_administration(\"dopamine\", \"nasal\").\n.decl Answer()\nAnswer() :- Is_drug(substance), Is_route_of_administration(substance, \"nasal\").\n.output Answer", "completions": [".decl Is_drug(Substance:symbol)\nIs_drug(\"dopamine\").\n.decl Is_route_of_administration(Substance:symbol, Route:symbol)\nIs_route_of_administration(\"dopamine\", \"nasal\").\n.decl Answer()\nAnswer() :- Is_drug(substance), Is_route_of_administration(substance, \"nasal\").\n.output Answer"]}
{"id": 2168, "answer": false, "completion": ".decl Answer()\nAnswer() :- !Happens_to(\"women\", \"have moustaches\").\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !Happens_to(\"women\", \"have moustaches\").\n.output Answer"]}
{"id": 2169, "answer": false, "completion": ".decl Has_ancestor(Person:symbol, Ancestor:symbol)\nHas_ancestor(\"Demi Lovato\", \"Maria Salazar\").\nHas_ancestor(\"Demi Lovato\", \"Frank Rodriguez\").\nHas_ancestor(\"Demi Lovato\", \"Abel Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Patricia Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Dianna De La Garza\").\nHas_ancestor(\"Demi Lovato\", \"David Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Charles Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Emily Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lov", "completions": [".decl Has_ancestor(Person:symbol, Ancestor:symbol)\nHas_ancestor(\"Demi Lovato\", \"Maria Salazar\").\nHas_ancestor(\"Demi Lovato\", \"Frank Rodriguez\").\nHas_ancestor(\"Demi Lovato\", \"Abel Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Patricia Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Dianna De La Garza\").\nHas_ancestor(\"Demi Lovato\", \"David Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Charles Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Emily Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lovato\", \"Juan Lovato\").\nHas_ancestor(\"Demi Lov"]}
{"id": 2170, "answer": true, "completion": ".decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Long John Silver's\", \"fish\").\nServes(\"Long John Silver's\", \"chicken\").\nServes(\"Long John Silver's\", \"fries\").\n.decl Answer()\nAnswer() :- Serves(\"Long John Silver's\", \"sea otter\").\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Long John Silver's\", \"fish\").\nServes(\"Long John Silver's\", \"chicken\").\nServes(\"Long John Silver's\", \"fries\").\n.decl Answer()\nAnswer() :- Serves(\"Long John Silver's\", \"sea otter\").\n.output Answer"]}
{"id": 2171, "answer": true, "completion": ".decl Is_prime(N:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Answer()\nAnswer() :- Is_prime(n), n = 7.\n.output Answer", "completions": [".decl Is_prime(N:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Answer()\nAnswer() :- Is_prime(n), n = 7.\n.output Answer"]}
{"id": 2172, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Şerafeddin Sabuncuoğlu\", \"Börek\").\n.decl Answer()\nAnswer() :- Eats(\"Şerafeddin Sabuncuoğlu\", \"Börek\").\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Şerafeddin Sabuncuoğlu\", \"Börek\").\n.decl Answer()\nAnswer() :- Eats(\"Şerafeddin Sabuncuoğlu\", \"Börek\").\n.output Answer"]}
{"id": 2173, "answer": true, "completion": ".decl Is_harmful(Treatment:symbol)\nIs_harmful(\"reiki\").\n.decl Answer()\nAnswer() :- Is_harmful(\"reiki\").\n.output Answer", "completions": [".decl Is_harmful(Treatment:symbol)\nIs_harmful(\"reiki\").\n.decl Answer()\nAnswer() :- Is_harmful(\"reiki\").\n.output Answer"]}
{"id": 2174, "answer": true, "completion": ".decl Happens_on_date(Event:symbol, Date:symbol)\nHappens_on_date(\"September 11th\", \"September 11th\").\n.decl Answer()\nAnswer() :- Happens_on_date(\"September 11th\", \"September 11th\").\n.output Answer", "completions": [".decl Happens_on_date(Event:symbol, Date:symbol)\nHappens_on_date(\"September 11th\", \"September 11th\").\n.decl Answer()\nAnswer() :- Happens_on_date(\"September 11th\", \"September 11th\").\n.output Answer"]}
{"id": 2175, "answer": true, "completion": ".decl Believes_in(Person:symbol, Entity:symbol)\nBelieves_in(\"Martin Luther\", \"God\").\n.decl Answer()\nAnswer() :- Believes_in(\"Martin Luther\", \"Satan\").\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Entity:symbol)\nBelieves_in(\"Martin Luther\", \"God\").\n.decl Answer()\nAnswer() :- Believes_in(\"Martin Luther\", \"Satan\").\n.output Answer"]}
{"id": 2176, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Donatello crucifix\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Donatello crucifix\", 1.8).\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Donatello crucifix\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Donatello crucifix\", 1.8).\n.output Answer"]}
{"id": 2177, "answer": true, "completion": ".decl Has_courage(Person:symbol, Courage:float)\nHas_courage(\"Neville Longbottom\", 0.5).\nHas_courage(\"Neville Longbottom\", 0.8).\n.decl Answer()\nAnswer() :- Has_courage(\"Neville Longbottom\", courage1), Has_courage(\"Neville Longbottom\", courage2), courage1 < courage2.\n.output Answer", "completions": [".decl Has_courage(Person:symbol, Courage:float)\nHas_courage(\"Neville Longbottom\", 0.5).\nHas_courage(\"Neville Longbottom\", 0.8).\n.decl Answer()\nAnswer() :- Has_courage(\"Neville Longbottom\", courage1), Has_courage(\"Neville Longbottom\", courage2), courage1 < courage2.\n.output Answer"]}
{"id": 2178, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Milla Jovovich\", 1.78).\n.decl Answer()\nAnswer() :- Has_height(\"Milla Jovovich\", height), height >= 1.78.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Milla Jovovich\", 1.78).\n.decl Answer()\nAnswer() :- Has_height(\"Milla Jovovich\", height), height >= 1.78.\n.output Answer"]}
{"id": 2179, "answer": true, "completion": ".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Peter Griffin\", \"Quahog Brewery\").\n.decl Needs(Company:symbol, Ingredient:symbol)\nNeeds(\"Quahog Brewery\", \"barley\").\n.decl Answer()\nAnswer() :- Works_for(\"Peter Griffin\", company), Needs(company, \"barley\").\n.output Answer", "completions": [".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Peter Griffin\", \"Quahog Brewery\").\n.decl Needs(Company:symbol, Ingredient:symbol)\nNeeds(\"Quahog Brewery\", \"barley\").\n.decl Answer()\nAnswer() :- Works_for(\"Peter Griffin\", company), Needs(company, \"barley\").\n.output Answer"]}
{"id": 2180, "answer": true, "completion": ".decl Kills(Substance:symbol, Virus:symbol)\nKills(\"olive oil\", \"rabies\").\n.decl Answer()\nAnswer() :- Kills(\"olive oil\", \"rabies\").\n.output Answer", "completions": [".decl Kills(Substance:symbol, Virus:symbol)\nKills(\"olive oil\", \"rabies\").\n.decl Answer()\nAnswer() :- Kills(\"olive oil\", \"rabies\").\n.output Answer"]}
{"id": 2181, "answer": true, "completion": ".decl Visits(Person:symbol, Place:symbol)\nVisits(\"Miguel Lopez de Legazpi\", \"Guam\").\nVisits(\"Queen Victoria\", \"England\").\n.decl Answer()\nAnswer() :- Visits(\"Miguel Lopez de Legazpi\", \"Guam\"), Visits(\"Queen Victoria\", \"England\").\n.output Answer", "completions": [".decl Visits(Person:symbol, Place:symbol)\nVisits(\"Miguel Lopez de Legazpi\", \"Guam\").\nVisits(\"Queen Victoria\", \"England\").\n.decl Answer()\nAnswer() :- Visits(\"Miguel Lopez de Legazpi\", \"Guam\"), Visits(\"Queen Victoria\", \"England\").\n.output Answer"]}
{"id": 2182, "answer": true, "completion": ".decl Has_mass(Animal:symbol, Mass:float)\nHas_mass(\"American black bear\", 300).\nHas_mass(\"sun bear\", 80).\n.decl Answer()\nAnswer() :- Has_mass(\"American black bear\", mass1), Has_mass(\"sun bear\", mass2), mass1 > mass2.\n.output Answer", "completions": [".decl Has_mass(Animal:symbol, Mass:float)\nHas_mass(\"American black bear\", 300).\nHas_mass(\"sun bear\", 80).\n.decl Answer()\nAnswer() :- Has_mass(\"American black bear\", mass1), Has_mass(\"sun bear\", mass2), mass1 > mass2.\n.output Answer"]}
{"id": 2183, "answer": true, "completion": ".decl Has_area(Home:symbol, Area:float)\nHas_area(\"Adam Sandler's home\", 5500).\n.decl Has_average_area(Country:symbol, Average_area:float)\nHas_average_area(\"United States\", 2200).\n.decl Answer()\nAnswer() :- Has_area(\"Adam Sandler's home\", area1), Has_average_area(\"United States\", area2), area1 < area2.\n.output Answer", "completions": [".decl Has_area(Home:symbol, Area:float)\nHas_area(\"Adam Sandler's home\", 5500).\n.decl Has_average_area(Country:symbol, Average_area:float)\nHas_average_area(\"United States\", 2200).\n.decl Answer()\nAnswer() :- Has_area(\"Adam Sandler's home\", area1), Has_average_area(\"United States\", area2), area1 < area2.\n.output Answer"]}
{"id": 2184, "answer": true, "completion": ".decl Has_ingredient(Meal:symbol, Ingredient:symbol)\nHas_ingredient(\"brussels sprouts\", \"vitamin K\").\n.decl Has_side_effect(Medication:symbol, Side_effect:symbol)\nHas_side_effect(\"Coumadin\", \"increased risk of bleeding\").\n.decl Answer()\nAnswer() :- Has_ingredient(meal, \"vitamin K\"), Has_side_effect(\"Coumadin\", \"increased risk of bleeding\").\n.output Answer", "completions": [".decl Has_ingredient(Meal:symbol, Ingredient:symbol)\nHas_ingredient(\"brussels sprouts\", \"vitamin K\").\n.decl Has_side_effect(Medication:symbol, Side_effect:symbol)\nHas_side_effect(\"Coumadin\", \"increased risk of bleeding\").\n.decl Answer()\nAnswer() :- Has_ingredient(meal, \"vitamin K\"), Has_side_effect(\"Coumadin\", \"increased risk of bleeding\").\n.output Answer"]}
{"id": 2185, "answer": true, "completion": ".decl Is_religion(Religion:symbol)\nIs_religion(\"Christianity\").\nIs_religion(\"Islam\").\nIs_religion(\"Judaism\").\nIs_religion(\"Hinduism\").\nIs_religion(\"Buddhism\").\n.decl Is_region(Region:symbol)\nIs_region(\"Holy Land\").\n.decl Answer()\nAnswer() :- Is_religion(religion), Is_region(region), religion = \"Christianity\" | religion = \"Islam\" | religion = \"Judaism\".\n.output Answer", "completions": [".decl Is_religion(Religion:symbol)\nIs_religion(\"Christianity\").\nIs_religion(\"Islam\").\nIs_religion(\"Judaism\").\nIs_religion(\"Hinduism\").\nIs_religion(\"Buddhism\").\n.decl Is_region(Region:symbol)\nIs_region(\"Holy Land\").\n.decl Answer()\nAnswer() :- Is_religion(religion), Is_region(region), religion = \"Christianity\" | religion = \"Islam\" | religion = \"Judaism\".\n.output Answer"]}
{"id": 2186, "answer": true, "completion": ".decl Lasts_for_n_years(Term:symbol, N_years:float)\nLasts_for_n_years(\"Prime Minister of the United Kingdom\", 5).\n.decl Answer()\nAnswer() :- Lasts_for_n_years(\"Prime Minister of the United Kingdom\", n_years), n_years < 5.\n.output Answer", "completions": [".decl Lasts_for_n_years(Term:symbol, N_years:float)\nLasts_for_n_years(\"Prime Minister of the United Kingdom\", 5).\n.decl Answer()\nAnswer() :- Lasts_for_n_years(\"Prime Minister of the United Kingdom\", n_years), n_years < 5.\n.output Answer"]}
{"id": 2187, "answer": true, "completion": ".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Symphony of the Seas\", 6890).\n.decl Has_n_members(Army:symbol, N_members:float)\nHas_n_members(\"People's Volunteer Army\", 2.3).\n.decl Answer()\nAnswer() :- Has_capacity(\"Symphony of the Seas\", capacity), Has_n_members(\"People's Volunteer Army\", n_members), capacity >= n_members.\n.output Answer", "completions": [".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Symphony of the Seas\", 6890).\n.decl Has_n_members(Army:symbol, N_members:float)\nHas_n_members(\"People's Volunteer Army\", 2.3).\n.decl Answer()\nAnswer() :- Has_capacity(\"Symphony of the Seas\", capacity), Has_n_members(\"People's Volunteer Army\", n_members), capacity >= n_members.\n.output Answer"]}
{"id": 2188, "answer": true, "completion": ".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"professional boxer\", \"professional boxer\").\n.decl Has_dental_insurance(Person:symbol, Dental_insurance:symbol)\nHas_dental_insurance(\"professional boxer\", \"no\").\n.decl Answer()\nAnswer() :- Has_job(\"professional boxer\", \"professional boxer\"), Has_dental_insurance(\"professional boxer\", \"no\").\n.output Answer\n\n", "completions": [".decl Has_job(Person:symbol, Job:symbol)\nHas_job(\"professional boxer\", \"professional boxer\").\n.decl Has_dental_insurance(Person:symbol, Dental_insurance:symbol)\nHas_dental_insurance(\"professional boxer\", \"no\").\n.decl Answer()\nAnswer() :- Has_job(\"professional boxer\", \"professional boxer\"), Has_dental_insurance(\"professional boxer\", \"no\").\n.output Answer\n\n"]}
{"id": 2189, "answer": true, "completion": ".decl Has_format(Image:symbol, Format:symbol)\nHas_format(\"JPEG\", \"JPEG\").\n.decl Answer()\nAnswer() :- Has_format(image, \"JPEG\"), image = \"leader of Heaven's Gate\".\n.output Answer", "completions": [".decl Has_format(Image:symbol, Format:symbol)\nHas_format(\"JPEG\", \"JPEG\").\n.decl Answer()\nAnswer() :- Has_format(image, \"JPEG\"), image = \"leader of Heaven's Gate\".\n.output Answer"]}
{"id": 2190, "answer": false, "completion": ".decl Has_type(Person:symbol, Type:symbol)\nHas_type(\"Pompey\", \"political association\").\n.decl Influences(Event:symbol, Event2:symbol)\nInfluences(\"political association\", \"reality TV\").\n.decl Answer()\nAnswer() :- Has_type(\"Pompey\", type), Influences(type, \"reality TV\").\n.output Answer", "completions": [".decl Has_type(Person:symbol, Type:symbol)\nHas_type(\"Pompey\", \"political association\").\n.decl Influences(Event:symbol, Event2:symbol)\nInfluences(\"political association\", \"reality TV\").\n.decl Answer()\nAnswer() :- Has_type(\"Pompey\", type), Influences(type, \"reality TV\").\n.output Answer"]}
{"id": 2191, "answer": true, "completion": ".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"knights in the Medieval Times show\", \"knight\").\n.decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"authentic knights\", \"knight\").\n.decl Answer()\nAnswer() :- Has_title(\"knights in the Medieval Times show\", title1), Has_title(\"authentic knights\", title2), title1 != title2.\n.output Answer", "completions": [".decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"knights in the Medieval Times show\", \"knight\").\n.decl Has_title(Person:symbol, Title:symbol)\nHas_title(\"authentic knights\", \"knight\").\n.decl Answer()\nAnswer() :- Has_title(\"knights in the Medieval Times show\", title1), Has_title(\"authentic knights\", title2), title1 != title2.\n.output Answer"]}
{"id": 2192, "answer": true, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"23rd amendment\", 1961).\n.decl Happens_after_year(Event:symbol, Year:float)\nHappens_after_year(\"Puerto Ricans get right to vote for president\", 1964).\n.decl Answer()\nAnswer() :- Happens_in_year(\"23rd amendment\", year1), Happens_after_year(\"Puerto Ricans get right to vote for president\", year2), year1 < year2.\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"23rd amendment\", 1961).\n.decl Happens_after_year(Event:symbol, Year:float)\nHappens_after_year(\"Puerto Ricans get right to vote for president\", 1964).\n.decl Answer()\nAnswer() :- Happens_in_year(\"23rd amendment\", year1), Happens_after_year(\"Puerto Ricans get right to vote for president\", year2), year1 < year2.\n.output Answer"]}
{"id": 2193, "answer": true, "completion": ".decl Has_format(Console:symbol, Format:symbol)\nHas_format(\"Nintendo\", \"NES\").\nHas_format(\"Playstation 3\", \"Blu-ray\").\n.decl Answer()\nAnswer() :- Has_format(\"Nintendo\", format1), Has_format(\"Playstation 3\", format2), format1 != format2.\n.output Answer", "completions": [".decl Has_format(Console:symbol, Format:symbol)\nHas_format(\"Nintendo\", \"NES\").\nHas_format(\"Playstation 3\", \"Blu-ray\").\n.decl Answer()\nAnswer() :- Has_format(\"Nintendo\", format1), Has_format(\"Playstation 3\", format2), format1 != format2.\n.output Answer"]}
{"id": 2194, "answer": true, "completion": ".decl Performs(Person:symbol, Work:symbol)\nPerforms(\"Bruce Gandy\", \"Messiah (Handel)\").\n.decl Answer()\nAnswer() :- Performs(\"Bruce Gandy\", \"Messiah (Handel)\").\n.output Answer", "completions": [".decl Performs(Person:symbol, Work:symbol)\nPerforms(\"Bruce Gandy\", \"Messiah (Handel)\").\n.decl Answer()\nAnswer() :- Performs(\"Bruce Gandy\", \"Messiah (Handel)\").\n.output Answer"]}
{"id": 2195, "answer": false, "completion": ".decl Runs_from(Amtrak_line:symbol, Location_A:symbol, Location_B:symbol)\nRuns_from(\"Amtrak\", \"New York City\", \"Boston\").\nRuns_from(\"Amtrak\", \"Boston\", \"New York City\").\nRuns_from(\"Amtrak\", \"Boston\", \"Portland\").\nRuns_from(\"Amtrak\", \"Portland\", \"Boston\").\nRuns_from(\"Amtrak\", \"Portland\", \"San Francisco\").\nRuns_from(\"Amtrak\", \"San Francisco\", \"Portland\").\n.decl Answer()\nAnswer() :- Runs_from(\"Amtrak\", \"New York City\", \"Moai\").\nAnswer() :- Runs_from(\"Amtrak\", \"New York City\", location1), Runs_from(\"Amtrak\", location1, \"Moai\").\n.output Answer", "completions": [".decl Runs_from(Amtrak_line:symbol, Location_A:symbol, Location_B:symbol)\nRuns_from(\"Amtrak\", \"New York City\", \"Boston\").\nRuns_from(\"Amtrak\", \"Boston\", \"New York City\").\nRuns_from(\"Amtrak\", \"Boston\", \"Portland\").\nRuns_from(\"Amtrak\", \"Portland\", \"Boston\").\nRuns_from(\"Amtrak\", \"Portland\", \"San Francisco\").\nRuns_from(\"Amtrak\", \"San Francisco\", \"Portland\").\n.decl Answer()\nAnswer() :- Runs_from(\"Amtrak\", \"New York City\", \"Moai\").\nAnswer() :- Runs_from(\"Amtrak\", \"New York City\", location1), Runs_from(\"Amtrak\", location1, \"Moai\").\n.output Answer"]}
{"id": 2196, "answer": false, "completion": ".decl Experiences(Person:symbol, Emotion:symbol)\nExperiences(\"person in a coma\", \"fear\").\n.decl Answer()\nAnswer() :- Experiences(\"person in a coma\", \"fear\").\n.output Answer", "completions": [".decl Experiences(Person:symbol, Emotion:symbol)\nExperiences(\"person in a coma\", \"fear\").\n.decl Answer()\nAnswer() :- Experiences(\"person in a coma\", \"fear\").\n.output Answer"]}
{"id": 2197, "answer": true, "completion": ".decl Has_presidential_number(President:symbol, Presidential_number:float)\nHas_presidential_number(\"Andrew Johnson\", 17).\n.decl Has_emperor_number(Emperor:symbol, Emperor_number:float)\nHas_emperor_number(\"Elagabalus\", 218).\n.decl Answer()\nAnswer() :- Has_presidential_number(\"Andrew Johnson\", presidential_number), Has_emperor_number(\"Elagabalus\", emperor_number), presidential_number > emperor_number.\n.output Answer", "completions": [".decl Has_presidential_number(President:symbol, Presidential_number:float)\nHas_presidential_number(\"Andrew Johnson\", 17).\n.decl Has_emperor_number(Emperor:symbol, Emperor_number:float)\nHas_emperor_number(\"Elagabalus\", 218).\n.decl Answer()\nAnswer() :- Has_presidential_number(\"Andrew Johnson\", presidential_number), Has_emperor_number(\"Elagabalus\", emperor_number), presidential_number > emperor_number.\n.output Answer"]}
{"id": 2198, "answer": true, "completion": ".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Lamborghini Aventador\", 217).\nHas_top_speed(\"Porsche 911\", 205).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Lamborghini Aventador\", top_speed1), Has_top_speed(\"Porsche 911\", top_speed2), top_speed1 > top_speed2.\n.output Answer", "completions": [".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Lamborghini Aventador\", 217).\nHas_top_speed(\"Porsche 911\", 205).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Lamborghini Aventador\", top_speed1), Has_top_speed(\"Porsche 911\", top_speed2), top_speed1 > top_speed2.\n.output Answer"]}
{"id": 2199, "answer": true, "completion": ".decl Is_easy_to_eat(Food:symbol, Answer:symbol)\nIs_easy_to_eat(\"fresh garlic cloves\", \"no\").\nIs_easy_to_eat(\"roasted garlic cloves\", \"yes\").\n.decl Answer()\nAnswer() :- Is_easy_to_eat(\"fresh garlic cloves\", \"yes\").\nAnswer() :- Is_easy_to_eat(\"roasted garlic cloves\", \"no\").\n.output Answer", "completions": [".decl Is_easy_to_eat(Food:symbol, Answer:symbol)\nIs_easy_to_eat(\"fresh garlic cloves\", \"no\").\nIs_easy_to_eat(\"roasted garlic cloves\", \"yes\").\n.decl Answer()\nAnswer() :- Is_easy_to_eat(\"fresh garlic cloves\", \"yes\").\nAnswer() :- Is_easy_to_eat(\"roasted garlic cloves\", \"no\").\n.output Answer"]}
{"id": 2200, "answer": true, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"college students\", \"fax machine\").\n.decl Answer()\nAnswer() :- Owns(\"college students\", \"fax machine\").\n.output Answer", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"college students\", \"fax machine\").\n.decl Answer()\nAnswer() :- Owns(\"college students\", \"fax machine\").\n.output Answer"]}
{"id": 2201, "answer": true, "completion": ".decl Cost_of_visit(Museum:symbol, Cost:float)\nCost_of_visit(\"Metropolitan Museum of Art\", 25).\n.decl Answer()\nAnswer() :- Cost_of_visit(museum, cost), 20 * cost < 200.\n.output Answer", "completions": [".decl Cost_of_visit(Museum:symbol, Cost:float)\nCost_of_visit(\"Metropolitan Museum of Art\", 25).\n.decl Answer()\nAnswer() :- Cost_of_visit(museum, cost), 20 * cost < 200.\n.output Answer"]}
{"id": 2202, "answer": true, "completion": ".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"Qwerty keyboard layout\", 1868).\nInvented_in_year(\"computer\", 1941).\n.decl Answer()\nAnswer() :- Invented_in_year(\"Qwerty keyboard layout\", year1), Invented_in_year(\"computer\", year2), year1 < year2.\n.output Answer", "completions": [".decl Invented_in_year(Object:symbol, Year:float)\nInvented_in_year(\"Qwerty keyboard layout\", 1868).\nInvented_in_year(\"computer\", 1941).\n.decl Answer()\nAnswer() :- Invented_in_year(\"Qwerty keyboard layout\", year1), Invented_in_year(\"computer\", year2), year1 < year2.\n.output Answer"]}
{"id": 2203, "answer": false, "completion": ".decl Has_religion(Country:symbol, Religion:symbol)\nHas_religion(\"Saudi Arabia\", \"Islam\").\nHas_religion(\"Turkey\", \"Islam\").\nHas_religion(\"United States\", \"Christianity\").\n.decl Has_coffee_shop(Country:symbol, Coffee_shop:symbol)\nHas_coffee_shop(\"Saudi Arabia\", \"Starbucks\").\nHas_coffee_shop(\"United States\", \"Starbucks\").\n.decl Answer()\nAnswer() :- Has_religion(country, \"Islam\"), Has_coffee_shop(country, \"Starbucks\").\n.output Answer", "completions": [".decl Has_religion(Country:symbol, Religion:symbol)\nHas_religion(\"Saudi Arabia\", \"Islam\").\nHas_religion(\"Turkey\", \"Islam\").\nHas_religion(\"United States\", \"Christianity\").\n.decl Has_coffee_shop(Country:symbol, Coffee_shop:symbol)\nHas_coffee_shop(\"Saudi Arabia\", \"Starbucks\").\nHas_coffee_shop(\"United States\", \"Starbucks\").\n.decl Answer()\nAnswer() :- Has_religion(country, \"Islam\"), Has_coffee_shop(country, \"Starbucks\").\n.output Answer"]}
{"id": 2204, "answer": true, "completion": ".decl Happens_during(Event:symbol, Activity:symbol)\nHappens_during(\"blow out candles\", \"birthday\").\nHappens_during(\"funeral\", \"mourning\").\n.decl Answer()\nAnswer() :- Happens_during(\"blow out candles\", activity), Happens_during(\"funeral\", activity).\n.output Answer", "completions": [".decl Happens_during(Event:symbol, Activity:symbol)\nHappens_during(\"blow out candles\", \"birthday\").\nHappens_during(\"funeral\", \"mourning\").\n.decl Answer()\nAnswer() :- Happens_during(\"blow out candles\", activity), Happens_during(\"funeral\", activity).\n.output Answer"]}
{"id": 2205, "answer": true, "completion": ".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Adam\", \"God\").\nHas_parent(\"Eve\", \"God\").\nHas_parent(\"Cain\", \"Adam\").\nHas_parent(\"Cain\", \"Eve\").\nHas_parent(\"Abel\", \"Adam\").\nHas_parent(\"Abel\", \"Eve\").\nHas_parent(\"Seth\", \"Adam\").\nHas_parent(\"Seth\", \"Eve\").\n.decl Answer()\nAnswer() :- Has_parent(\"Cain\", person1), Has_parent(\"Cain\", person2), person1 != person2, person1 = \"Eve\", person2 = \"Eve\".\n.output Answer", "completions": [".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Adam\", \"God\").\nHas_parent(\"Eve\", \"God\").\nHas_parent(\"Cain\", \"Adam\").\nHas_parent(\"Cain\", \"Eve\").\nHas_parent(\"Abel\", \"Adam\").\nHas_parent(\"Abel\", \"Eve\").\nHas_parent(\"Seth\", \"Adam\").\nHas_parent(\"Seth\", \"Eve\").\n.decl Answer()\nAnswer() :- Has_parent(\"Cain\", person1), Has_parent(\"Cain\", person2), person1 != person2, person1 = \"Eve\", person2 = \"Eve\".\n.output Answer"]}
{"id": 2206, "answer": true, "completion": ".decl Has_learning_disabilities(Animal:symbol)\n.decl Answer()\nAnswer() :- Has_learning_disabilities(\"placozoa\").\n.output Answer", "completions": [".decl Has_learning_disabilities(Animal:symbol)\n.decl Answer()\nAnswer() :- Has_learning_disabilities(\"placozoa\").\n.output Answer"]}
{"id": 2207, "answer": true, "completion": ".decl Has_position(Group:symbol, Position:symbol)\nHas_position(\"System of a Down\", \"anti-globalization\").\n.decl Answer()\nAnswer() :- Has_position(\"System of a Down\", \"anti-globalization\").\n.output Answer", "completions": [".decl Has_position(Group:symbol, Position:symbol)\nHas_position(\"System of a Down\", \"anti-globalization\").\n.decl Answer()\nAnswer() :- Has_position(\"System of a Down\", \"anti-globalization\").\n.output Answer"]}
{"id": 2208, "answer": false, "completion": ".decl Wrote(Author:symbol, Book:symbol)\nWrote(\"Dr. Seuss\", \"The Cat in the Hat\").\n.decl Contains_lies(Book:symbol)\nContains_lies(\"The Cat in the Hat\").\n.decl Answer()\nAnswer() :- Wrote(\"Dr. Seuss\", book), Contains_lies(book).\n.output Answer", "completions": [".decl Wrote(Author:symbol, Book:symbol)\nWrote(\"Dr. Seuss\", \"The Cat in the Hat\").\n.decl Contains_lies(Book:symbol)\nContains_lies(\"The Cat in the Hat\").\n.decl Answer()\nAnswer() :- Wrote(\"Dr. Seuss\", book), Contains_lies(book).\n.output Answer"]}
{"id": 2209, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"wearing a coat\", \"winter\").\nHappens_in_time(\"wearing a coat\", \"spring\").\nHappens_in_time(\"wearing a coat\", \"fall\").\nHappens_in_time(\"Hollywood\", \"July\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"July\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"wearing a coat\", season), Happens_in_time(\"Hollywood\", month), In_season(month, season).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"wearing a coat\", \"winter\").\nHappens_in_time(\"wearing a coat\", \"spring\").\nHappens_in_time(\"wearing a coat\", \"fall\").\nHappens_in_time(\"Hollywood\", \"July\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"July\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"wearing a coat\", season), Happens_in_time(\"Hollywood\", month), In_season(month, season).\n.output Answer"]}
{"id": 2210, "answer": true, "completion": ".decl Has_mass(Element:symbol, Mass:float)\nHas_mass(\"silicon\", 28.085).\nHas_mass(\"bromine\", 79.904).\n.decl Answer()\nAnswer() :- Has_mass(\"silicon\", mass1), Has_mass(\"bromine\", mass2), mass1 < mass2.\n.output Answer", "completions": [".decl Has_mass(Element:symbol, Mass:float)\nHas_mass(\"silicon\", 28.085).\nHas_mass(\"bromine\", 79.904).\n.decl Answer()\nAnswer() :- Has_mass(\"silicon\", mass1), Has_mass(\"bromine\", mass2), mass1 < mass2.\n.output Answer"]}
{"id": 2211, "answer": true, "completion": ".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"Saddam Hussein\", 1937).\nHas_birth_year(\"Saladin\", 1138).\nHas_birth_year(\"Idris I\", 789).\n.decl Answer()\nAnswer() :- Has_birth_year(\"Saddam Hussein\", birth_year1), Has_birth_year(\"Saladin\", birth_year2), Has_birth_year(\"Idris I\", birth_year3), birth_year1 > birth_year2, birth_year1 > birth_year3.\n.output Answer", "completions": [".decl Has_birth_year(Person:symbol, Birth_year:float)\nHas_birth_year(\"Saddam Hussein\", 1937).\nHas_birth_year(\"Saladin\", 1138).\nHas_birth_year(\"Idris I\", 789).\n.decl Answer()\nAnswer() :- Has_birth_year(\"Saddam Hussein\", birth_year1), Has_birth_year(\"Saladin\", birth_year2), Has_birth_year(\"Idris I\", birth_year3), birth_year1 > birth_year2, birth_year1 > birth_year3.\n.output Answer"]}
{"id": 2212, "answer": true, "completion": ".decl Named_after(Month:symbol, God:symbol)\nNamed_after(\"March\", \"Mars\").\n.decl Has_son(God:symbol, Son:symbol)\nHas_son(\"Jupiter\", \"Mars\").\n.decl Answer()\nAnswer() :- Named_after(\"March\", \"Mars\"), Has_son(\"Jupiter\", \"Mars\").\n.output Answer", "completions": [".decl Named_after(Month:symbol, God:symbol)\nNamed_after(\"March\", \"Mars\").\n.decl Has_son(God:symbol, Son:symbol)\nHas_son(\"Jupiter\", \"Mars\").\n.decl Answer()\nAnswer() :- Named_after(\"March\", \"Mars\"), Has_son(\"Jupiter\", \"Mars\").\n.output Answer"]}
{"id": 2213, "answer": true, "completion": ".decl Involved_in(Company:symbol, Scandal:symbol)\nInvolved_in(\"Subway\", \"pedophilia scandal\").\n.decl Answer()\nAnswer() :- Involved_in(\"Subway\", \"pedophilia scandal\").\n.output Answer", "completions": [".decl Involved_in(Company:symbol, Scandal:symbol)\nInvolved_in(\"Subway\", \"pedophilia scandal\").\n.decl Answer()\nAnswer() :- Involved_in(\"Subway\", \"pedophilia scandal\").\n.output Answer"]}
{"id": 2214, "answer": true, "completion": ".decl Is_current_chief_justice(Person:symbol)\nIs_current_chief_justice(\"John Roberts\").\n.decl Is_forbidden_from_buying_alcohol(Person:symbol)\nIs_forbidden_from_buying_alcohol(\"John Roberts\").\n.decl Answer()\nAnswer() :- Is_current_chief_justice(person), Is_forbidden_from_buying_alcohol(person).\n.output Answer", "completions": [".decl Is_current_chief_justice(Person:symbol)\nIs_current_chief_justice(\"John Roberts\").\n.decl Is_forbidden_from_buying_alcohol(Person:symbol)\nIs_forbidden_from_buying_alcohol(\"John Roberts\").\n.decl Answer()\nAnswer() :- Is_current_chief_justice(person), Is_forbidden_from_buying_alcohol(person).\n.output Answer"]}
{"id": 2215, "answer": true, "completion": ".decl Last_n_years(Person:symbol, N_years:float)\nLast_n_years(\"two-year old\", 2).\n.decl Last_n_years(Person:symbol, N_years:float)\nLast_n_years(\"Scrabble tournament winner\", 1).\n.decl Answer()\nAnswer() :- Last_n_years(\"two-year old\", n_years1), Last_n_years(\"Scrabble tournament winner\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Person:symbol, N_years:float)\nLast_n_years(\"two-year old\", 2).\n.decl Last_n_years(Person:symbol, N_years:float)\nLast_n_years(\"Scrabble tournament winner\", 1).\n.decl Answer()\nAnswer() :- Last_n_years(\"two-year old\", n_years1), Last_n_years(\"Scrabble tournament winner\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 2216, "answer": true, "completion": ".decl Can_fly(Person:symbol)\nCan_fly(\"Iris\").\nCan_fly(\"Hermes\").\n.decl Answer()\nAnswer() :- Can_fly(person1), Can_fly(person2), person1 != person2.\n.output Answer", "completions": [".decl Can_fly(Person:symbol)\nCan_fly(\"Iris\").\nCan_fly(\"Hermes\").\n.decl Answer()\nAnswer() :- Can_fly(person1), Can_fly(person2), person1 != person2.\n.output Answer"]}
{"id": 2217, "answer": true, "completion": ".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Dorothea Wendling\", \"Germany\").\n.decl Originates_from(Thing:symbol, Place:symbol)\nOriginates_from(\"Porsche\", \"Germany\").\n.decl Answer()\nAnswer() :- Lives_in(\"Dorothea Wendling\", place1), Originates_from(\"Porsche\", place2), place1 = place2.\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Dorothea Wendling\", \"Germany\").\n.decl Originates_from(Thing:symbol, Place:symbol)\nOriginates_from(\"Porsche\", \"Germany\").\n.decl Answer()\nAnswer() :- Lives_in(\"Dorothea Wendling\", place1), Originates_from(\"Porsche\", place2), place1 = place2.\n.output Answer"]}
{"id": 2218, "answer": true, "completion": ".decl Won_award(Person:symbol, Award:symbol)\nWon_award(\"Will Ferrell\", \"MTV Movie Award for Best Comedic Performance\").\n.decl Answer()\nAnswer() :- Won_award(\"Will Ferrell\", \"Empire Award for Best Newcomer\").\n.output Answer", "completions": [".decl Won_award(Person:symbol, Award:symbol)\nWon_award(\"Will Ferrell\", \"MTV Movie Award for Best Comedic Performance\").\n.decl Answer()\nAnswer() :- Won_award(\"Will Ferrell\", \"Empire Award for Best Newcomer\").\n.output Answer"]}
{"id": 2219, "answer": true, "completion": ".decl Insults(Person_A:symbol, Person_B:symbol)\nInsults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.decl Answer()\nAnswer() :- !Insults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.output Answer", "completions": [".decl Insults(Person_A:symbol, Person_B:symbol)\nInsults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.decl Answer()\nAnswer() :- !Insults(\"Tom Cruise\", \"L. Ron Hubbard\").\n.output Answer"]}
{"id": 2220, "answer": true, "completion": ".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Felix Potvin\", \"goalie\").\n.decl Answer()\nAnswer() :- Has_position(\"Felix Potvin\", \"goalie\").\n.output Answer\n\n", "completions": [".decl Has_position(Person:symbol, Position:symbol)\nHas_position(\"Felix Potvin\", \"goalie\").\n.decl Answer()\nAnswer() :- Has_position(\"Felix Potvin\", \"goalie\").\n.output Answer\n\n"]}
{"id": 2221, "answer": true, "completion": ".decl Is_script(Script:symbol)\nIs_script(\"Gujarati script\").\nIs_script(\"Kanji\").\n.decl Answer()\nAnswer() :- Is_script(\"Gujarati script\"), Is_script(\"Kanji\").\n.output Answer", "completions": [".decl Is_script(Script:symbol)\nIs_script(\"Gujarati script\").\nIs_script(\"Kanji\").\n.decl Answer()\nAnswer() :- Is_script(\"Gujarati script\"), Is_script(\"Kanji\").\n.output Answer"]}
{"id": 2222, "answer": false, "completion": ".decl Has_theme(Video_game:symbol, Theme:symbol)\nHas_theme(\"Fallout\", \"end of civilization\").\nHas_theme(\"Fallout 2\", \"end of civilization\").\nHas_theme(\"Fallout 3\", \"end of civilization\").\nHas_theme(\"Fallout: New Vegas\", \"end of civilization\").\nHas_theme(\"Fallout 4\", \"end of civilization\").\nHas_theme(\"Fallout 76\", \"end of civilization\").\nHas_theme(\"Fallout: Brotherhood of Steel\", \"end of civilization\").\nHas_theme(\"Fallout: Tactics\", \"end of civilization\").\nHas_theme(\"Fallout: BoS\", \"end of civilization\").\nHas_theme(\"Fallout: BoS 2\", \"end of civilization\").\nHas_theme(\"Fallout: BoS 2\", \"slot machines\").\n.decl Answer()\nAnswer() :- Has_theme(video_game, \"end of civilization\"), Has_theme(video_game, \"slot machines\").\n.output Answer", "completions": [".decl Has_theme(Video_game:symbol, Theme:symbol)\nHas_theme(\"Fallout\", \"end of civilization\").\nHas_theme(\"Fallout 2\", \"end of civilization\").\nHas_theme(\"Fallout 3\", \"end of civilization\").\nHas_theme(\"Fallout: New Vegas\", \"end of civilization\").\nHas_theme(\"Fallout 4\", \"end of civilization\").\nHas_theme(\"Fallout 76\", \"end of civilization\").\nHas_theme(\"Fallout: Brotherhood of Steel\", \"end of civilization\").\nHas_theme(\"Fallout: Tactics\", \"end of civilization\").\nHas_theme(\"Fallout: BoS\", \"end of civilization\").\nHas_theme(\"Fallout: BoS 2\", \"end of civilization\").\nHas_theme(\"Fallout: BoS 2\", \"slot machines\").\n.decl Answer()\nAnswer() :- Has_theme(video_game, \"end of civilization\"), Has_theme(video_game, \"slot machines\").\n.output Answer"]}
{"id": 2223, "answer": true, "completion": ".decl Found_in(Substance:symbol, Object:symbol)\nFound_in(\"glutamic acid\", \"severed finger\").\n.decl Answer()\nAnswer() :- Found_in(\"glutamic acid\", \"severed finger\").\n.output Answer", "completions": [".decl Found_in(Substance:symbol, Object:symbol)\nFound_in(\"glutamic acid\", \"severed finger\").\n.decl Answer()\nAnswer() :- Found_in(\"glutamic acid\", \"severed finger\").\n.output Answer"]}
{"id": 2224, "answer": false, "completion": ".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Sara Paxton\", \"blonde\").\n.decl Has_eye_color(Person:symbol, Eye_color:symbol)\nHas_eye_color(\"Sara Paxton\", \"green\").\n.decl Is_latino(Person:symbol)\nIs_latino(\"Sara Paxton\").\n.decl Answer()\nAnswer() :- Has_hair_color(\"Sara Paxton\", \"blonde\"), Has_eye_color(\"Sara Paxton\", \"green\"), Is_latino(\"Sara Paxton\").\n.output Answer", "completions": [".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Sara Paxton\", \"blonde\").\n.decl Has_eye_color(Person:symbol, Eye_color:symbol)\nHas_eye_color(\"Sara Paxton\", \"green\").\n.decl Is_latino(Person:symbol)\nIs_latino(\"Sara Paxton\").\n.decl Answer()\nAnswer() :- Has_hair_color(\"Sara Paxton\", \"blonde\"), Has_eye_color(\"Sara Paxton\", \"green\"), Is_latino(\"Sara Paxton\").\n.output Answer"]}
{"id": 2225, "answer": true, "completion": ".decl Reads(Person:symbol, Comic_book:symbol)\n.decl Answer()\nAnswer() :- Reads(\"William Howard Taft\", \"DC Comics\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Comic_book:symbol)\n.decl Answer()\nAnswer() :- Reads(\"William Howard Taft\", \"DC Comics\").\n.output Answer"]}
{"id": 2226, "answer": false, "completion": ".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Muslim\", \"Islam\").\nHas_religion(\"Christian\", \"Christianity\").\n.decl Has_idea(Person:symbol, Idea:symbol)\nHas_idea(\"Muslim\", \"Seraphim\").\nHas_idea(\"Christian\", \"Seraphim\").\n.decl Answer()\nAnswer() :- Has_religion(person1, \"Islam\"), Has_religion(person2, \"Christianity\"), Has_idea(person1, idea1), Has_idea(person2, idea2), idea1 != idea2.\n.output Answer", "completions": [".decl Has_religion(Person:symbol, Religion:symbol)\nHas_religion(\"Muslim\", \"Islam\").\nHas_religion(\"Christian\", \"Christianity\").\n.decl Has_idea(Person:symbol, Idea:symbol)\nHas_idea(\"Muslim\", \"Seraphim\").\nHas_idea(\"Christian\", \"Seraphim\").\n.decl Answer()\nAnswer() :- Has_religion(person1, \"Islam\"), Has_religion(person2, \"Christianity\"), Has_idea(person1, idea1), Has_idea(person2, idea2), idea1 != idea2.\n.output Answer"]}
{"id": 2227, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"person with dyscalculia\", \"surveying\").\n.decl Answer()\nAnswer() :- Has_skill(\"person with dyscalculia\", \"surveying\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"person with dyscalculia\", \"surveying\").\n.decl Answer()\nAnswer() :- Has_skill(\"person with dyscalculia\", \"surveying\").\n.output Answer"]}
{"id": 2228, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Alec Baldwin\", 5).\nHas_n_children(\"Clint Eastwood\", 8).\n.decl Answer()\nAnswer() :- Has_n_children(\"Alec Baldwin\", n_children1), Has_n_children(\"Clint Eastwood\", n_children2), n_children1 < n_children2.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Alec Baldwin\", 5).\nHas_n_children(\"Clint Eastwood\", 8).\n.decl Answer()\nAnswer() :- Has_n_children(\"Alec Baldwin\", n_children1), Has_n_children(\"Clint Eastwood\", n_children2), n_children1 < n_children2.\n.output Answer"]}
{"id": 2229, "answer": true, "completion": ".decl Has_purpose(Object:symbol, Purpose:symbol)\nHas_purpose(\"banana tree\", \"food\").\nHas_purpose(\"gavel\", \"maintaining order\").\n.decl Answer()\nAnswer() :- Has_purpose(\"banana tree\", purpose1), Has_purpose(\"gavel\", purpose2), purpose1 = purpose2.\n.output Answer", "completions": [".decl Has_purpose(Object:symbol, Purpose:symbol)\nHas_purpose(\"banana tree\", \"food\").\nHas_purpose(\"gavel\", \"maintaining order\").\n.decl Answer()\nAnswer() :- Has_purpose(\"banana tree\", purpose1), Has_purpose(\"gavel\", purpose2), purpose1 = purpose2.\n.output Answer"]}
{"id": 2230, "answer": true, "completion": ".decl Causes_skin_color(Substance:symbol, Color:symbol)\nCauses_skin_color(\"nickel\", \"green\").\nCauses_skin_color(\"nickel\", \"blue\").\nCauses_skin_color(\"nickel\", \"black\").\n.decl Answer()\nAnswer() :- Causes_skin_color(\"nickel\", \"green\").\nAnswer() :- Causes_skin_color(\"nickel\", \"blue\").\nAnswer() :- Causes_skin_color(\"nickel\", \"black\").\n.output Answer", "completions": [".decl Causes_skin_color(Substance:symbol, Color:symbol)\nCauses_skin_color(\"nickel\", \"green\").\nCauses_skin_color(\"nickel\", \"blue\").\nCauses_skin_color(\"nickel\", \"black\").\n.decl Answer()\nAnswer() :- Causes_skin_color(\"nickel\", \"green\").\nAnswer() :- Causes_skin_color(\"nickel\", \"blue\").\nAnswer() :- Causes_skin_color(\"nickel\", \"black\").\n.output Answer"]}
{"id": 2231, "answer": true, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"bitcoin\", 12000).\nHas_value(\"Volkswagen Jetta\", 18000).\n.decl Answer()\nAnswer() :- Has_value(\"bitcoin\", value1), Has_value(\"Volkswagen Jetta\", value2), value1 >= value2.\n.output Answer", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"bitcoin\", 12000).\nHas_value(\"Volkswagen Jetta\", 18000).\n.decl Answer()\nAnswer() :- Has_value(\"bitcoin\", value1), Has_value(\"Volkswagen Jetta\", value2), value1 >= value2.\n.output Answer"]}
{"id": 2232, "answer": true, "completion": ".decl Has_history(Thing:symbol, History:symbol)\nHas_history(\"Fraktur\", \"sordid\").\n.decl Answer()\nAnswer() :- Has_history(\"Fraktur\", \"sordid\").\n.output Answer", "completions": [".decl Has_history(Thing:symbol, History:symbol)\nHas_history(\"Fraktur\", \"sordid\").\n.decl Answer()\nAnswer() :- Has_history(\"Fraktur\", \"sordid\").\n.output Answer"]}
{"id": 2233, "answer": true, "completion": ".decl Has_sect(Person:symbol, Sect:symbol)\nHas_sect(\"Martin Luther\", \"Lutheran\").\nHas_sect(\"Martin Luther King Jr.\", \"Baptist\").\n.decl Answer()\nAnswer() :- Has_sect(\"Martin Luther\", sect1), Has_sect(\"Martin Luther King Jr.\", sect2), sect1 = sect2.\n.output Answer", "completions": [".decl Has_sect(Person:symbol, Sect:symbol)\nHas_sect(\"Martin Luther\", \"Lutheran\").\nHas_sect(\"Martin Luther King Jr.\", \"Baptist\").\n.decl Answer()\nAnswer() :- Has_sect(\"Martin Luther\", sect1), Has_sect(\"Martin Luther King Jr.\", sect2), sect1 = sect2.\n.output Answer"]}
{"id": 2234, "answer": false, "completion": ".decl Wears_clothes(Person:symbol)\nWears_clothes(\"Donald Duck\").\n.decl Answer()\nAnswer() :- Wears_clothes(\"Donald Duck\").\n.output Answer", "completions": [".decl Wears_clothes(Person:symbol)\nWears_clothes(\"Donald Duck\").\n.decl Answer()\nAnswer() :- Wears_clothes(\"Donald Duck\").\n.output Answer"]}
{"id": 2235, "answer": false, "completion": ".decl Appears_in(Character:symbol, Movie:symbol)\nAppears_in(\"Hades\", \"Hercules\").\n.decl Is_a_musical(Movie:symbol)\nIs_a_musical(\"Hercules\").\n.decl Is_a_Disney_Channel_movie(Movie:symbol)\nIs_a_Disney_Channel_movie(\"Hercules\").\n.decl Answer()\nAnswer() :- Appears_in(\"Hades\", movie), Is_a_musical(movie), Is_a_Disney_Channel_movie(movie).\n.output Answer", "completions": [".decl Appears_in(Character:symbol, Movie:symbol)\nAppears_in(\"Hades\", \"Hercules\").\n.decl Is_a_musical(Movie:symbol)\nIs_a_musical(\"Hercules\").\n.decl Is_a_Disney_Channel_movie(Movie:symbol)\nIs_a_Disney_Channel_movie(\"Hercules\").\n.decl Answer()\nAnswer() :- Appears_in(\"Hades\", movie), Is_a_musical(movie), Is_a_Disney_Channel_movie(movie).\n.output Answer"]}
{"id": 2236, "answer": true, "completion": ".decl Has_white_blood_cells(Person:symbol)\nHas_white_blood_cells(\"person\").\n.decl Answer()\nAnswer() :- !Has_white_blood_cells(\"person\").\n.output Answer", "completions": [".decl Has_white_blood_cells(Person:symbol)\nHas_white_blood_cells(\"person\").\n.decl Answer()\nAnswer() :- !Has_white_blood_cells(\"person\").\n.output Answer"]}
{"id": 2237, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Rand Paul's undergraduate years\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"swimming in Lake Michigan\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"swimming in Lake Michigan\", n_years1), Last_n_years(\"Rand Paul's undergraduate years\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Rand Paul's undergraduate years\", 4).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"swimming in Lake Michigan\", 1).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"swimming in Lake Michigan\", n_years1), Last_n_years(\"Rand Paul's undergraduate years\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 2238, "answer": true, "completion": ".decl Is_citizen(Person:symbol, Country:symbol)\nIs_citizen(\"Simon Cowell\", \"United Kingdom\").\n.decl Is_citizen(Person:symbol, Country:symbol)\nIs_citizen(\"Simon Cowell\", \"United States\").\n.decl Can_vote(Person:symbol, Country:symbol)\nCan_vote(\"Simon Cowell\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Can_vote(\"Simon Cowell\", \"United States\").\n.output Answer", "completions": [".decl Is_citizen(Person:symbol, Country:symbol)\nIs_citizen(\"Simon Cowell\", \"United Kingdom\").\n.decl Is_citizen(Person:symbol, Country:symbol)\nIs_citizen(\"Simon Cowell\", \"United States\").\n.decl Can_vote(Person:symbol, Country:symbol)\nCan_vote(\"Simon Cowell\", \"United Kingdom\").\n.decl Answer()\nAnswer() :- Can_vote(\"Simon Cowell\", \"United States\").\n.output Answer"]}
{"id": 2239, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Michael Bloomberg\", 50).\n.decl Has_debt(Country:symbol, Debt:float)\nHas_debt(\"Micronesia\", 0.1).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Michael Bloomberg\", net_worth), Has_debt(\"Micronesia\", debt), net_worth >= debt * 10.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Michael Bloomberg\", 50).\n.decl Has_debt(Country:symbol, Debt:float)\nHas_debt(\"Micronesia\", 0.1).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Michael Bloomberg\", net_worth), Has_debt(\"Micronesia\", debt), net_worth >= debt * 10.\n.output Answer"]}
{"id": 2240, "answer": true, "completion": ".decl Has_status(Animal:symbol, Status:symbol)\nHas_status(\"Leopard cat\", \"vulnerable\").\nHas_status(\"Bornean Orangutan\", \"critically endangered\").\n.decl Answer()\nAnswer() :- Has_status(\"Leopard cat\", status1), Has_status(\"Bornean Orangutan\", status2), status1 != status2, status1 < status2.\n.output Answer", "completions": [".decl Has_status(Animal:symbol, Status:symbol)\nHas_status(\"Leopard cat\", \"vulnerable\").\nHas_status(\"Bornean Orangutan\", \"critically endangered\").\n.decl Answer()\nAnswer() :- Has_status(\"Leopard cat\", status1), Has_status(\"Bornean Orangutan\", status2), status1 != status2, status1 < status2.\n.output Answer"]}
{"id": 2241, "answer": true, "completion": ".decl Has_speed(Vehicle:symbol, Speed:float)\nHas_speed(\"Panzer VIII Maus tank missile\", 70).\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"cat\", 4).\n.decl Answer()\nAnswer() :- Has_speed(\"Panzer VIII Maus tank missile\", speed), Has_weight(\"cat\", weight), weight < speed.\n.output Answer", "completions": [".decl Has_speed(Vehicle:symbol, Speed:float)\nHas_speed(\"Panzer VIII Maus tank missile\", 70).\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"cat\", 4).\n.decl Answer()\nAnswer() :- Has_speed(\"Panzer VIII Maus tank missile\", speed), Has_weight(\"cat\", weight), weight < speed.\n.output Answer"]}
{"id": 2242, "answer": false, "completion": ".decl Aldi_foods(Food:symbol)\nAldi_foods(\"banana\").\nAldi_foods(\"apple\").\nAldi_foods(\"orange\").\nAldi_foods(\"strawberry\").\nAldi_foods(\"grapes\").\n.decl Out_of_date(Food:symbol)\nOut_of_date(\"banana\").\nOut_of_date(\"apple\").\nOut_of_date(\"strawberry\").\n.decl Answer()\nAnswer() :- Aldi_foods(food), Out_of_date(food).\n.output Answer", "completions": [".decl Aldi_foods(Food:symbol)\nAldi_foods(\"banana\").\nAldi_foods(\"apple\").\nAldi_foods(\"orange\").\nAldi_foods(\"strawberry\").\nAldi_foods(\"grapes\").\n.decl Out_of_date(Food:symbol)\nOut_of_date(\"banana\").\nOut_of_date(\"apple\").\nOut_of_date(\"strawberry\").\n.decl Answer()\nAnswer() :- Aldi_foods(food), Out_of_date(food).\n.output Answer"]}
{"id": 2243, "answer": true, "completion": ".decl Has_skepticism(Person:symbol, Skepticism:float)\nHas_skepticism(\"Carrie Poppy\", 0.5).\n.decl Answer()\nAnswer() :- Has_skepticism(\"Carrie Poppy\", skepticism), skepticism < 0.5.\n.output Answer", "completions": [".decl Has_skepticism(Person:symbol, Skepticism:float)\nHas_skepticism(\"Carrie Poppy\", 0.5).\n.decl Answer()\nAnswer() :- Has_skepticism(\"Carrie Poppy\", skepticism), skepticism < 0.5.\n.output Answer"]}
{"id": 2244, "answer": true, "completion": ".decl Answer()\nAnswer() :- !Happens_to(\"kidney donation\", \"dead organ donor\").\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !Happens_to(\"kidney donation\", \"dead organ donor\").\n.output Answer"]}
{"id": 2245, "answer": true, "completion": ".decl Answer()\nAnswer() :- false.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false.\n.output Answer"]}
{"id": 2246, "answer": true, "completion": ".decl Answer()\nAnswer() :- !Tastes(\"Law & Order\").\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !Tastes(\"Law & Order\").\n.output Answer"]}
{"id": 2247, "answer": true, "completion": ".decl Has_equivalent(Roman_god:symbol, Greek_god:symbol)\nHas_equivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Has_equivalent(\"Vulcan\", \"Hephaestus\").\n.output Answer", "completions": [".decl Has_equivalent(Roman_god:symbol, Greek_god:symbol)\nHas_equivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Has_equivalent(\"Vulcan\", \"Hephaestus\").\n.output Answer"]}
{"id": 2248, "answer": true, "completion": ".decl Lives_in_continent(Animal:symbol, Continent:symbol)\nLives_in_continent(\"hippopotamus\", \"Africa\").\n.decl Answer()\nAnswer() :- Lives_in_continent(\"hippopotamus\", continent).\n.output Answer", "completions": [".decl Lives_in_continent(Animal:symbol, Continent:symbol)\nLives_in_continent(\"hippopotamus\", \"Africa\").\n.decl Answer()\nAnswer() :- Lives_in_continent(\"hippopotamus\", continent).\n.output Answer"]}
{"id": 2249, "answer": false, "completion": ".decl Is_mother(Person:symbol)\nIs_mother(\"Mother of a stillborn\").\n.decl Is_wrapped_in(Gift:symbol, Wrapping_paper:symbol)\nIs_wrapped_in(\"Gift for a mother of a stillborn\", \"Stork wrapping paper\").\n.decl Answer()\nAnswer() :- Is_mother(person), Is_wrapped_in(gift, \"Stork wrapping paper\"), person = \"Mother of a stillborn\".\n.output Answer", "completions": [".decl Is_mother(Person:symbol)\nIs_mother(\"Mother of a stillborn\").\n.decl Is_wrapped_in(Gift:symbol, Wrapping_paper:symbol)\nIs_wrapped_in(\"Gift for a mother of a stillborn\", \"Stork wrapping paper\").\n.decl Answer()\nAnswer() :- Is_mother(person), Is_wrapped_in(gift, \"Stork wrapping paper\"), person = \"Mother of a stillborn\".\n.output Answer"]}
{"id": 2250, "answer": true, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"Petco\", \"dog food\").\nSells(\"Petco\", \"cat food\").\nSells(\"Petco\", \"fish food\").\nSells(\"Petco\", \"hamster food\").\nSells(\"Petco\", \"hamster\").\nSells(\"Petco\", \"fish\").\nSells(\"Petco\", \"cat\").\nSells(\"Petco\", \"dog\").\nSells(\"Petco\", \"bird\").\nSells(\"Petco\", \"snake\").\nSells(\"Petco\", \"lizard\").\nSells(\"Petco\", \"turtle\").\nSells(\"Petco\", \"rabbit\").\nSells(\"Petco\", \"guinea pig\").\nSells(\"Petco\", \"ferret\").\nSells(\"Petco\", \"chinchilla\").\nSells(\"Petco\", \"rat\").\nSells(\"Petco\", \"mouse\").\nSells(\"Petco\", \"hamster wheel\").\nSells(\"Petco\", \"hamster cage\").\nSells(\"Petco\", \"hamster bedding\").\nSells(\"Petco\", \"hamster water bottle\").\nSells(\"Petco\", \"hamster food dish\").\nSells(\"Petco\", \"hamster hideout\").\nSells(\"Petco\", \"hamster chew toys\").\nSells(\"Petco\", \"hamster treat\").\nSells(\"Petco\", \"hamster shampoo\").\nSells(\"Petco\", \"hamster conditioner\").\nSells(\"Petco\", \"hamster brush\").\nSells(\"Petco\", \"hamster nail clippers\").\nSells(\"Petco\", \"hamster ear cleaner\").\nSells(\"Petco\", \"hamster eye drops\").\nSells(\"Petco\", \"hamster vitamins\").\nSells(\"Petco\", \"hamster first aid kit\").\nSells(\"Petco\", \"hamster food storage\").\nSells(\"Petco\", \"hamster travel carrier\").\nSells(\"Petco\", \"hamster wheel cover\").\nSells(\"Petco\", \"hamster cage liner\").\nSells(\"Petco\", \"hamster litter\").\nSells(\"Petco\", \"hamster litter box\").\nSells(\"Petco\", \"hamster litter scoop\").\nSells(\"Petco\", \"hamster water bottle cover\").\nSells(\"Petco\", \"hamster food dish cover\").\nSells(\"Petco\", \"hamster hideout cover\").\nSells(\"Petco\", \"hamster chew toys cover\").\nSells(\"Petco\", \"hamster treat cover\").\nSells(\"Petco\", \"hamster shampoo cover\").\nSells(\"Petco\", \"hamster conditioner cover\").\nSells(\"Petco\", \"hamster brush cover\").\nSells(\"Petco\", \"hamster nail clippers cover\").\nSells(\"Petco\", \"hamster ear cleaner cover\").\nSells(\"Petco\", \"hamster eye drops cover\").\nSells(\"Petco\", \"hamster vitamins cover\").\nSells(\"Petco\", \"hamster first aid kit cover\").\nSells(\"Petco\", \"hamster food storage cover\").\nSells(\"Petco\", \"hamster travel carrier cover\").\nSells(\"Petco\", \"hamster wheel cover cover\").\nSells(\"Petco\", \"hamster cage liner cover\").\nSells(\"Petco\", \"hamster litter cover\").\nSells(\"Petco\", \"hamster litter box cover\").\nSells(\"Petco\", \"hamster litter scoop cover\").\nSells(\"Petco\", \"hamster water bottle cover cover\").\nSells(\"", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"Petco\", \"dog food\").\nSells(\"Petco\", \"cat food\").\nSells(\"Petco\", \"fish food\").\nSells(\"Petco\", \"hamster food\").\nSells(\"Petco\", \"hamster\").\nSells(\"Petco\", \"fish\").\nSells(\"Petco\", \"cat\").\nSells(\"Petco\", \"dog\").\nSells(\"Petco\", \"bird\").\nSells(\"Petco\", \"snake\").\nSells(\"Petco\", \"lizard\").\nSells(\"Petco\", \"turtle\").\nSells(\"Petco\", \"rabbit\").\nSells(\"Petco\", \"guinea pig\").\nSells(\"Petco\", \"ferret\").\nSells(\"Petco\", \"chinchilla\").\nSells(\"Petco\", \"rat\").\nSells(\"Petco\", \"mouse\").\nSells(\"Petco\", \"hamster wheel\").\nSells(\"Petco\", \"hamster cage\").\nSells(\"Petco\", \"hamster bedding\").\nSells(\"Petco\", \"hamster water bottle\").\nSells(\"Petco\", \"hamster food dish\").\nSells(\"Petco\", \"hamster hideout\").\nSells(\"Petco\", \"hamster chew toys\").\nSells(\"Petco\", \"hamster treat\").\nSells(\"Petco\", \"hamster shampoo\").\nSells(\"Petco\", \"hamster conditioner\").\nSells(\"Petco\", \"hamster brush\").\nSells(\"Petco\", \"hamster nail clippers\").\nSells(\"Petco\", \"hamster ear cleaner\").\nSells(\"Petco\", \"hamster eye drops\").\nSells(\"Petco\", \"hamster vitamins\").\nSells(\"Petco\", \"hamster first aid kit\").\nSells(\"Petco\", \"hamster food storage\").\nSells(\"Petco\", \"hamster travel carrier\").\nSells(\"Petco\", \"hamster wheel cover\").\nSells(\"Petco\", \"hamster cage liner\").\nSells(\"Petco\", \"hamster litter\").\nSells(\"Petco\", \"hamster litter box\").\nSells(\"Petco\", \"hamster litter scoop\").\nSells(\"Petco\", \"hamster water bottle cover\").\nSells(\"Petco\", \"hamster food dish cover\").\nSells(\"Petco\", \"hamster hideout cover\").\nSells(\"Petco\", \"hamster chew toys cover\").\nSells(\"Petco\", \"hamster treat cover\").\nSells(\"Petco\", \"hamster shampoo cover\").\nSells(\"Petco\", \"hamster conditioner cover\").\nSells(\"Petco\", \"hamster brush cover\").\nSells(\"Petco\", \"hamster nail clippers cover\").\nSells(\"Petco\", \"hamster ear cleaner cover\").\nSells(\"Petco\", \"hamster eye drops cover\").\nSells(\"Petco\", \"hamster vitamins cover\").\nSells(\"Petco\", \"hamster first aid kit cover\").\nSells(\"Petco\", \"hamster food storage cover\").\nSells(\"Petco\", \"hamster travel carrier cover\").\nSells(\"Petco\", \"hamster wheel cover cover\").\nSells(\"Petco\", \"hamster cage liner cover\").\nSells(\"Petco\", \"hamster litter cover\").\nSells(\"Petco\", \"hamster litter box cover\").\nSells(\"Petco\", \"hamster litter scoop cover\").\nSells(\"Petco\", \"hamster water bottle cover cover\").\nSells(\""]}
{"id": 2251, "answer": false, "completion": ".decl Disgusts(Person:symbol, Movement:symbol)\nDisgusts(\"Immanuel Kant\", \"Black Lives Matter\").\n.decl Answer()\nAnswer() :- Disgusts(\"Immanuel Kant\", \"Black Lives Matter\").\n.output Answer", "completions": [".decl Disgusts(Person:symbol, Movement:symbol)\nDisgusts(\"Immanuel Kant\", \"Black Lives Matter\").\n.decl Answer()\nAnswer() :- Disgusts(\"Immanuel Kant\", \"Black Lives Matter\").\n.output Answer"]}
{"id": 2252, "answer": false, "completion": ".decl Has_nutrients(Food:symbol, Nutrients:symbol)\nHas_nutrients(\"pancakes\", \"carbohydrates\").\nHas_nutrients(\"pancakes\", \"fat\").\nHas_nutrients(\"pancakes\", \"sugar\").\nHas_nutrients(\"pancakes\", \"protein\").\nHas_nutrients(\"pancakes\", \"calcium\").\nHas_nutrients(\"pancakes\", \"phosphorus\").\nHas_nutrients(\"pancakes\", \"potassium\").\nHas_nutrients(\"pancakes\", \"sodium\").\nHas_nutrients(\"pancakes\", \"chloride\").\nHas_nutrients(\"pancakes\", \"magnesium\").\nHas_nutrients(\"pancakes\", \"iron\").\nHas_nutrients(\"pancakes\", \"copper\").\nHas_nutrients(\"pancakes\", \"manganese\").\nHas_nutrients(\"pancakes\", \"zinc\").\nHas_nutrients(\"pancakes\", \"iodine\").\nHas_nutrients(\"pancakes\", \"selenium\").\nHas_nutrients(\"pancakes\", \"vitamin A\").\nHas_nutrients(\"pancakes\", \"vitamin D\").\nHas_nutrients(\"pancakes\", \"vitamin E\").\nHas_nutrients(\"pancakes\", \"vitamin K\").\nHas_nutrients(\"pancakes\", \"vitamin B1\").\nHas_nutrients(\"pancakes\", \"vitamin B2\").\nHas_nutrients(\"pancakes\", \"vitamin B3\").\nHas_nutrients(\"pancakes\", \"vitamin B6\").\nHas_nutrients(\"pancakes\", \"vitamin B12\").\nHas_nutrients(\"pancakes\", \"vitamin C\").\nHas_nutrients(\"pancakes\", \"vitamin B9\").\nHas_nutrients(\"pancakes\", \"vitamin B5\").\nHas_nutrients(\"pancakes\", \"vitamin B7\").\nHas_nutrients(\"pancakes\", \"vitamin B8\").\nHas_nutrients(\"pancakes\", \"choline\").\nHas_nutrients(\"pancakes\", \"betaine\").\nHas_nutrients(\"pancakes\", \"vitamin B4\").\nHas_nutrients(\"pancakes\", \"folate\").\nHas_nutrients(\"pancakes\", \"vitamin B11\").\nHas_nutrients(\"pancakes\", \"vitamin B12\").\nHas_nutrients(\"pancakes\", \"vitamin B13\").\nHas_nutrients(\"pancakes\", \"vitamin B14\").\nHas_nutrients(\"pancakes\", \"vitamin B15\").\nHas_nutrients(\"pancakes\", \"vitamin B16\").\nHas_nutrients(\"pancakes\", \"vitamin B17\").\nHas_nutrients(\"pancakes\", \"vitamin B18\").\nHas_nutrients(\"pancakes\", \"vitamin B19\").\nHas_nutrients(\"pancakes\", \"vitamin B20\").\nHas_nutrients(\"pancakes\", \"vitamin B21\").\nHas_nutrients(\"pancakes\", \"vitamin B22\").\nHas_nutrients(\"pancakes\", \"vitamin B23\").\nHas_nutrients(\"pancakes\", \"vitamin B24\").\nHas_nutrients(\"pancakes\", \"vitamin B25\").\nHas_nutrients(\"pancakes\", \"vitamin B26\").\nHas_nutrients(\"pancakes\", \"vitamin B27\").\nHas_nutrients(\"pancakes", "completions": [".decl Has_nutrients(Food:symbol, Nutrients:symbol)\nHas_nutrients(\"pancakes\", \"carbohydrates\").\nHas_nutrients(\"pancakes\", \"fat\").\nHas_nutrients(\"pancakes\", \"sugar\").\nHas_nutrients(\"pancakes\", \"protein\").\nHas_nutrients(\"pancakes\", \"calcium\").\nHas_nutrients(\"pancakes\", \"phosphorus\").\nHas_nutrients(\"pancakes\", \"potassium\").\nHas_nutrients(\"pancakes\", \"sodium\").\nHas_nutrients(\"pancakes\", \"chloride\").\nHas_nutrients(\"pancakes\", \"magnesium\").\nHas_nutrients(\"pancakes\", \"iron\").\nHas_nutrients(\"pancakes\", \"copper\").\nHas_nutrients(\"pancakes\", \"manganese\").\nHas_nutrients(\"pancakes\", \"zinc\").\nHas_nutrients(\"pancakes\", \"iodine\").\nHas_nutrients(\"pancakes\", \"selenium\").\nHas_nutrients(\"pancakes\", \"vitamin A\").\nHas_nutrients(\"pancakes\", \"vitamin D\").\nHas_nutrients(\"pancakes\", \"vitamin E\").\nHas_nutrients(\"pancakes\", \"vitamin K\").\nHas_nutrients(\"pancakes\", \"vitamin B1\").\nHas_nutrients(\"pancakes\", \"vitamin B2\").\nHas_nutrients(\"pancakes\", \"vitamin B3\").\nHas_nutrients(\"pancakes\", \"vitamin B6\").\nHas_nutrients(\"pancakes\", \"vitamin B12\").\nHas_nutrients(\"pancakes\", \"vitamin C\").\nHas_nutrients(\"pancakes\", \"vitamin B9\").\nHas_nutrients(\"pancakes\", \"vitamin B5\").\nHas_nutrients(\"pancakes\", \"vitamin B7\").\nHas_nutrients(\"pancakes\", \"vitamin B8\").\nHas_nutrients(\"pancakes\", \"choline\").\nHas_nutrients(\"pancakes\", \"betaine\").\nHas_nutrients(\"pancakes\", \"vitamin B4\").\nHas_nutrients(\"pancakes\", \"folate\").\nHas_nutrients(\"pancakes\", \"vitamin B11\").\nHas_nutrients(\"pancakes\", \"vitamin B12\").\nHas_nutrients(\"pancakes\", \"vitamin B13\").\nHas_nutrients(\"pancakes\", \"vitamin B14\").\nHas_nutrients(\"pancakes\", \"vitamin B15\").\nHas_nutrients(\"pancakes\", \"vitamin B16\").\nHas_nutrients(\"pancakes\", \"vitamin B17\").\nHas_nutrients(\"pancakes\", \"vitamin B18\").\nHas_nutrients(\"pancakes\", \"vitamin B19\").\nHas_nutrients(\"pancakes\", \"vitamin B20\").\nHas_nutrients(\"pancakes\", \"vitamin B21\").\nHas_nutrients(\"pancakes\", \"vitamin B22\").\nHas_nutrients(\"pancakes\", \"vitamin B23\").\nHas_nutrients(\"pancakes\", \"vitamin B24\").\nHas_nutrients(\"pancakes\", \"vitamin B25\").\nHas_nutrients(\"pancakes\", \"vitamin B26\").\nHas_nutrients(\"pancakes\", \"vitamin B27\").\nHas_nutrients(\"pancakes"]}
{"id": 2253, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Euro\", 8.9).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"Euro\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Euro\", 8.9).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"Euro\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer"]}
{"id": 2254, "answer": true, "completion": ".decl Has_dentures(Animal:symbol, Dentures:symbol)\nHas_dentures(\"honey badger\", \"molars\").\nHas_dentures(\"wolverine\", \"molars\").\n.decl Answer()\nAnswer() :- Has_dentures(\"honey badger\", dentures1), Has_dentures(\"wolverine\", dentures2), dentures1 != dentures2.\n.output Answer", "completions": [".decl Has_dentures(Animal:symbol, Dentures:symbol)\nHas_dentures(\"honey badger\", \"molars\").\nHas_dentures(\"wolverine\", \"molars\").\n.decl Answer()\nAnswer() :- Has_dentures(\"honey badger\", dentures1), Has_dentures(\"wolverine\", dentures2), dentures1 != dentures2.\n.output Answer"]}
{"id": 2255, "answer": true, "completion": ".decl Has_life(Organism:symbol, Life:symbol)\nHas_life(\"Cholera\", \"dead\").\n.decl Answer()\nAnswer() :- Has_life(\"Cholera\", \"dead\").\n.output Answer", "completions": [".decl Has_life(Organism:symbol, Life:symbol)\nHas_life(\"Cholera\", \"dead\").\n.decl Answer()\nAnswer() :- Has_life(\"Cholera\", \"dead\").\n.output Answer"]}
{"id": 2256, "answer": true, "completion": ".decl Has_allegedly_committed_felony(Person:symbol)\nHas_allegedly_committed_felony(\"Prince Andrew\").\n.decl Is_member_of_2020_British_royal_family(Person:symbol)\nIs_member_of_2020_British_royal_family(\"Prince Andrew\").\n.decl Answer()\nAnswer() :- Has_allegedly_committed_felony(person), Is_member_of_2020_British_royal_family(person).\n.output Answer", "completions": [".decl Has_allegedly_committed_felony(Person:symbol)\nHas_allegedly_committed_felony(\"Prince Andrew\").\n.decl Is_member_of_2020_British_royal_family(Person:symbol)\nIs_member_of_2020_British_royal_family(\"Prince Andrew\").\n.decl Answer()\nAnswer() :- Has_allegedly_committed_felony(person), Is_member_of_2020_British_royal_family(person).\n.output Answer"]}
{"id": 2257, "answer": false, "completion": ".decl Named_after(Day:symbol, God:symbol)\nNamed_after(\"Wednesday\", \"Woden\").\nNamed_after(\"Thursday\", \"Thor\").\n.decl Answer()\nAnswer() :- Named_after(\"Wednesday\", \"Thor\").\n.output Answer", "completions": [".decl Named_after(Day:symbol, God:symbol)\nNamed_after(\"Wednesday\", \"Woden\").\nNamed_after(\"Thursday\", \"Thor\").\n.decl Answer()\nAnswer() :- Named_after(\"Wednesday\", \"Thor\").\n.output Answer"]}
{"id": 2258, "answer": false, "completion": ".decl Is_associated_with(Thing:symbol, Thing2:symbol)\nIs_associated_with(\"honey\", \"queens\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"honey\", \"queens\").\n.output Answer", "completions": [".decl Is_associated_with(Thing:symbol, Thing2:symbol)\nIs_associated_with(\"honey\", \"queens\").\n.decl Answer()\nAnswer() :- Is_associated_with(\"honey\", \"queens\").\n.output Answer"]}
{"id": 2259, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 8.11).\n.decl Has_height(Monster:symbol, Height:float)\nHas_height(\"Frankenstein's monster\", 7).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"Frankenstein's monster\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 8.11).\n.decl Has_height(Monster:symbol, Height:float)\nHas_height(\"Frankenstein's monster\", 7).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"Frankenstein's monster\", height2), height1 > height2.\n.output Answer"]}
{"id": 2260, "answer": true, "completion": ".decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"kindergarten teacher\", \"teacher\").\n.decl Teaches(Teacher:symbol, Subject:symbol)\nTeaches(\"teacher\", \"New Testament\").\n.decl Answer()\nAnswer() :- Is_a(\"kindergarten teacher\", teacher), Teaches(teacher, \"New Testament\").\n.output Answer", "completions": [".decl Is_a(Person:symbol, Profession:symbol)\nIs_a(\"kindergarten teacher\", \"teacher\").\n.decl Teaches(Teacher:symbol, Subject:symbol)\nTeaches(\"teacher\", \"New Testament\").\n.decl Answer()\nAnswer() :- Is_a(\"kindergarten teacher\", teacher), Teaches(teacher, \"New Testament\").\n.output Answer"]}
{"id": 2261, "answer": true, "completion": ".decl Writes(Person:symbol, Book:symbol)\nWrites(\"Alfred Nobel\", \"Dynamite\").\n.decl Banned(Book:symbol)\nBanned(\"Dynamite\").\n.decl Answer()\nAnswer() :- Writes(\"Alfred Nobel\", \"Dynamite\"), Banned(\"Dynamite\").\n.output Answer\n\n", "completions": [".decl Writes(Person:symbol, Book:symbol)\nWrites(\"Alfred Nobel\", \"Dynamite\").\n.decl Banned(Book:symbol)\nBanned(\"Dynamite\").\n.decl Answer()\nAnswer() :- Writes(\"Alfred Nobel\", \"Dynamite\"), Banned(\"Dynamite\").\n.output Answer\n\n"]}
{"id": 2262, "answer": true, "completion": ".decl Kinetic_energy(Object:symbol, Kinetic_energy:float)\nKinetic_energy(\"person\", 0).\n.decl Answer()\nAnswer() :- Kinetic_energy(\"person\", kinetic_energy1), Kinetic_energy(\"person\", kinetic_energy2), kinetic_energy1 > kinetic_energy2.\n.output Answer", "completions": [".decl Kinetic_energy(Object:symbol, Kinetic_energy:float)\nKinetic_energy(\"person\", 0).\n.decl Answer()\nAnswer() :- Kinetic_energy(\"person\", kinetic_energy1), Kinetic_energy(\"person\", kinetic_energy2), kinetic_energy1 > kinetic_energy2.\n.output Answer"]}
{"id": 2263, "answer": false, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"special brownies\", \"cannabis\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"special brownies\", \"cannabis\").\n.output Answer", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"special brownies\", \"cannabis\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"special brownies\", \"cannabis\").\n.output Answer"]}
{"id": 2264, "answer": true, "completion": ".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Futurama\", 140).\nHas_n_episodes(\"The Simpsons\", 654).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Futurama\", n_episodes1), Has_n_episodes(\"The Simpsons\", n_episodes2), n_episodes1 > n_episodes2.\n.output Answer", "completions": [".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Futurama\", 140).\nHas_n_episodes(\"The Simpsons\", 654).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Futurama\", n_episodes1), Has_n_episodes(\"The Simpsons\", n_episodes2), n_episodes1 > n_episodes2.\n.output Answer"]}
{"id": 2265, "answer": true, "completion": ".decl Lives_in_temperature_range(Animal:symbol, Temperature_range:symbol)\nLives_in_temperature_range(\"anchovy\", \"cold\").\nLives_in_temperature_range(\"anchovy\", \"warm\").\n.decl Temperature_ranges(Temperature_range1:symbol, Temperature_range2:symbol)\nTemperature_ranges(\"cold\", \"warm\").\n.decl Answer()\nAnswer() :- Lives_in_temperature_range(animal1, temperature_range1), Lives_in_temperature_range(animal2, temperature_range2), animal1 != animal2, Temperature_ranges(temperature_range1, temperature_range2).\n.output Answer", "completions": [".decl Lives_in_temperature_range(Animal:symbol, Temperature_range:symbol)\nLives_in_temperature_range(\"anchovy\", \"cold\").\nLives_in_temperature_range(\"anchovy\", \"warm\").\n.decl Temperature_ranges(Temperature_range1:symbol, Temperature_range2:symbol)\nTemperature_ranges(\"cold\", \"warm\").\n.decl Answer()\nAnswer() :- Lives_in_temperature_range(animal1, temperature_range1), Lives_in_temperature_range(animal2, temperature_range2), animal1 != animal2, Temperature_ranges(temperature_range1, temperature_range2).\n.output Answer"]}
{"id": 2266, "answer": false, "completion": ".decl Good_at(Person:symbol, Skill:symbol)\nGood_at(\"John\", \"guitar hero\").\nGood_at(\"John\", \"guitar\").\n.decl Answer()\nAnswer() :- Good_at(person, \"guitar hero\"), Good_at(person, \"guitar\").\n.output Answer", "completions": [".decl Good_at(Person:symbol, Skill:symbol)\nGood_at(\"John\", \"guitar hero\").\nGood_at(\"John\", \"guitar\").\n.decl Answer()\nAnswer() :- Good_at(person, \"guitar hero\"), Good_at(person, \"guitar\").\n.output Answer"]}
{"id": 2267, "answer": true, "completion": ".decl Named_for(Person:symbol, Person_named_for:symbol)\nNamed_for(\"Charles Manson\", \"Charles Milles Manson\").\nNamed_for(\"Charles Manson\", \"Susan Atkins\").\nNamed_for(\"Charles Manson\", \"Patricia Krenwinkel\").\nNamed_for(\"Charles Manson\", \"Leslie Van Houten\").\nNamed_for(\"Charles Manson\", \"Lynette Fromme\").\nNamed_for(\"Charles Manson\", \"Squeaky Fromme\").\n.decl Has_kills(Person:symbol, N_kills:float)\nHas_kills(\"Charles Manson\", 7).\nHas_kills(\"Susan Atkins\", 1).\nHas_kills(\"Patricia Krenwinkel\", 1).\nHas_kills(\"Leslie Van Houten\", 1).\n.decl Answer()\nAnswer() :- Named_for(\"Charles Manson\", person), Has_kills(\"Charles Manson\", n_kills1), Has_kills(person, n_kills2), n_kills2 > n_kills1.\n.output Answer", "completions": [".decl Named_for(Person:symbol, Person_named_for:symbol)\nNamed_for(\"Charles Manson\", \"Charles Milles Manson\").\nNamed_for(\"Charles Manson\", \"Susan Atkins\").\nNamed_for(\"Charles Manson\", \"Patricia Krenwinkel\").\nNamed_for(\"Charles Manson\", \"Leslie Van Houten\").\nNamed_for(\"Charles Manson\", \"Lynette Fromme\").\nNamed_for(\"Charles Manson\", \"Squeaky Fromme\").\n.decl Has_kills(Person:symbol, N_kills:float)\nHas_kills(\"Charles Manson\", 7).\nHas_kills(\"Susan Atkins\", 1).\nHas_kills(\"Patricia Krenwinkel\", 1).\nHas_kills(\"Leslie Van Houten\", 1).\n.decl Answer()\nAnswer() :- Named_for(\"Charles Manson\", person), Has_kills(\"Charles Manson\", n_kills1), Has_kills(person, n_kills2), n_kills2 > n_kills1.\n.output Answer"]}
{"id": 2268, "answer": true, "completion": ".decl Has_power_over(Branch_of_government:symbol, Power:symbol)\nHas_power_over(\"US branch of government\", \"military\").\nHas_power_over(\"US branch of government\", \"veto\").\n.decl Answer()\nAnswer() :- Has_power_over(\"US branch of government\", \"military\"), Has_power_over(\"US branch of government\", \"veto\").\n.output Answer", "completions": [".decl Has_power_over(Branch_of_government:symbol, Power:symbol)\nHas_power_over(\"US branch of government\", \"military\").\nHas_power_over(\"US branch of government\", \"veto\").\n.decl Answer()\nAnswer() :- Has_power_over(\"US branch of government\", \"military\"), Has_power_over(\"US branch of government\", \"veto\").\n.output Answer"]}
{"id": 2269, "answer": true, "completion": ".decl Has_belief(Group:symbol, Belief:symbol)\nHas_belief(\"Christians\", \"Sheol\").\n.decl Answer()\nAnswer() :- Has_belief(\"Christians\", \"Sheol\").\n.output Answer", "completions": [".decl Has_belief(Group:symbol, Belief:symbol)\nHas_belief(\"Christians\", \"Sheol\").\n.decl Answer()\nAnswer() :- Has_belief(\"Christians\", \"Sheol\").\n.output Answer"]}
{"id": 2270, "answer": true, "completion": ".decl Built_by(Pyramid:symbol, Government:symbol)\nBuilt_by(\"Great Pyramids\", \"theocratic government\").\n.decl Answer()\nAnswer() :- Built_by(\"Great Pyramids\", \"theocratic government\").\n.output Answer", "completions": [".decl Built_by(Pyramid:symbol, Government:symbol)\nBuilt_by(\"Great Pyramids\", \"theocratic government\").\n.decl Answer()\nAnswer() :- Built_by(\"Great Pyramids\", \"theocratic government\").\n.output Answer"]}
{"id": 2271, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Justin Timberlake\", 1.88).\n.decl Has_height_limit(Ride:symbol, Height_limit:float)\nHas_height_limit(\"Shipwreck Falls\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Justin Timberlake\", height), Has_height_limit(\"Shipwreck Falls\", height_limit), height >= height_limit.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Justin Timberlake\", 1.88).\n.decl Has_height_limit(Ride:symbol, Height_limit:float)\nHas_height_limit(\"Shipwreck Falls\", 1.8).\n.decl Answer()\nAnswer() :- Has_height(\"Justin Timberlake\", height), Has_height_limit(\"Shipwreck Falls\", height_limit), height >= height_limit.\n.output Answer"]}
{"id": 2272, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Oasis cruise boat\", 72).\nHas_height(\"Lincoln Tunnel\", 13.5).\n.decl Answer()\nAnswer() :- Has_height(\"Oasis cruise boat\", height1), Has_height(\"Lincoln Tunnel\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Oasis cruise boat\", 72).\nHas_height(\"Lincoln Tunnel\", 13.5).\n.decl Answer()\nAnswer() :- Has_height(\"Oasis cruise boat\", height1), Has_height(\"Lincoln Tunnel\", height2), height1 > height2.\n.output Answer"]}
{"id": 2273, "answer": true, "completion": ".decl Is_straight_edge(Person:symbol)\nIs_straight_edge(\"Snoop Dogg\").\n.decl Answer()\nAnswer() :- Is_straight_edge(\"Snoop Dogg\").\n.output Answer", "completions": [".decl Is_straight_edge(Person:symbol)\nIs_straight_edge(\"Snoop Dogg\").\n.decl Answer()\nAnswer() :- Is_straight_edge(\"Snoop Dogg\").\n.output Answer"]}
{"id": 2274, "answer": false, "completion": ".decl Has_cell_type(Organism:symbol, Cell_type:symbol)\nHas_cell_type(\"amoeba\", \"protozoan\").\nHas_cell_type(\"human\", \"eukaryote\").\n.decl Answer()\nAnswer() :- Has_cell_type(\"amoeba\", cell_type1), Has_cell_type(\"human\", cell_type2), cell_type1 = cell_type2.\n.output Answer", "completions": [".decl Has_cell_type(Organism:symbol, Cell_type:symbol)\nHas_cell_type(\"amoeba\", \"protozoan\").\nHas_cell_type(\"human\", \"eukaryote\").\n.decl Answer()\nAnswer() :- Has_cell_type(\"amoeba\", cell_type1), Has_cell_type(\"human\", cell_type2), cell_type1 = cell_type2.\n.output Answer"]}
{"id": 2275, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Battle of Baghdad\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Justin Bieber's Believe album\", 2).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Justin Bieber's Believe album\", n_years1), Last_n_years(\"Battle of Baghdad\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Battle of Baghdad\", 1).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Justin Bieber's Believe album\", 2).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Justin Bieber's Believe album\", n_years1), Last_n_years(\"Battle of Baghdad\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 2276, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"vegan\", \"vegetables\").\nEats(\"vegan\", \"fruit\").\nEats(\"vegan\", \"nuts\").\nEats(\"vegan\", \"seeds\").\nEats(\"vegan\", \"tofu\").\nEats(\"vegan\", \"soy\").\nEats(\"vegan\", \"tempeh\").\nEats(\"vegan\", \"legumes\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"plant milks\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"whole grains\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"veget", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"vegan\", \"vegetables\").\nEats(\"vegan\", \"fruit\").\nEats(\"vegan\", \"nuts\").\nEats(\"vegan\", \"seeds\").\nEats(\"vegan\", \"tofu\").\nEats(\"vegan\", \"soy\").\nEats(\"vegan\", \"tempeh\").\nEats(\"vegan\", \"legumes\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"plant milks\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"whole grains\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"vegetable oils\").\nEats(\"vegan\", \"veget"]}
{"id": 2277, "answer": true, "completion": ".decl Accused_of_stealing(Person:symbol, Person_from:symbol)\nAccused_of_stealing(\"Mozart\", \"Richard Wagner\").\n.decl Answer()\nAnswer() :- Accused_of_stealing(\"Mozart\", \"Richard Wagner\").\n.output Answer", "completions": [".decl Accused_of_stealing(Person:symbol, Person_from:symbol)\nAccused_of_stealing(\"Mozart\", \"Richard Wagner\").\n.decl Answer()\nAnswer() :- Accused_of_stealing(\"Mozart\", \"Richard Wagner\").\n.output Answer"]}
{"id": 2278, "answer": true, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"New Year's Eve\", \"December 31\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"New Year's Eve\", \"December 31\").\n.output Answer", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"New Year's Eve\", \"December 31\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"New Year's Eve\", \"December 31\").\n.output Answer"]}
{"id": 2279, "answer": false, "completion": ".decl Lives_in_water(Fish:symbol, Water:symbol)\nLives_in_water(\"yellow perch\", \"Great Lakes\").\nLives_in_water(\"yellow perch\", \"Atlantic Ocean\").\nLives_in_water(\"yellow perch\", \"Mediterranean Sea\").\nLives_in_water(\"yellow perch\", \"Red Sea\").\n.decl Answer()\nAnswer() :- Lives_in_water(\"yellow perch\", \"Red Sea\").\n.output Answer", "completions": [".decl Lives_in_water(Fish:symbol, Water:symbol)\nLives_in_water(\"yellow perch\", \"Great Lakes\").\nLives_in_water(\"yellow perch\", \"Atlantic Ocean\").\nLives_in_water(\"yellow perch\", \"Mediterranean Sea\").\nLives_in_water(\"yellow perch\", \"Red Sea\").\n.decl Answer()\nAnswer() :- Lives_in_water(\"yellow perch\", \"Red Sea\").\n.output Answer"]}
{"id": 2280, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"electing rulers\", \"Kingdom of Hungary\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"electing rulers\", \"Kingdom of Hungary\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"electing rulers\", \"Kingdom of Hungary\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"electing rulers\", \"Kingdom of Hungary\").\n.output Answer"]}
{"id": 2281, "answer": false, "completion": ".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Topa Inca Yupanqui\", \"15th century\").\n.decl Lives_in_place(Person:symbol, Place:symbol)\nLives_in_place(\"Topa Inca Yupanqui\", \"Peru\").\n.decl Lives_in_place(Animal:symbol, Place:symbol)\nLives_in_place(\"western honey bee\", \"Europe\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Topa Inca Yupanqui\", time1), Lives_in_place(\"Topa Inca Yupanqui\", place1), Lives_in_time(\"western honey bee\", time2), Lives_in_place(\"western honey bee\", place2), time1 < time2, place1 != place2.\n.output Answer", "completions": [".decl Lives_in_time(Person:symbol, Time:symbol)\nLives_in_time(\"Topa Inca Yupanqui\", \"15th century\").\n.decl Lives_in_place(Person:symbol, Place:symbol)\nLives_in_place(\"Topa Inca Yupanqui\", \"Peru\").\n.decl Lives_in_place(Animal:symbol, Place:symbol)\nLives_in_place(\"western honey bee\", \"Europe\").\n.decl Answer()\nAnswer() :- Lives_in_time(\"Topa Inca Yupanqui\", time1), Lives_in_place(\"Topa Inca Yupanqui\", place1), Lives_in_time(\"western honey bee\", time2), Lives_in_place(\"western honey bee\", place2), time1 < time2, place1 != place2.\n.output Answer"]}
{"id": 2282, "answer": true, "completion": ".decl Inspires(Book:symbol, Play:symbol)\nInspires(\"Alice's Adventures in Wonderland\", \"Macbeth\").\n.decl Answer()\nAnswer() :- Inspires(\"Alice's Adventures in Wonderland\", \"Macbeth\").\n.output Answer", "completions": [".decl Inspires(Book:symbol, Play:symbol)\nInspires(\"Alice's Adventures in Wonderland\", \"Macbeth\").\n.decl Answer()\nAnswer() :- Inspires(\"Alice's Adventures in Wonderland\", \"Macbeth\").\n.output Answer"]}
{"id": 2283, "answer": true, "completion": ".decl Is_prevalent_in(Character:symbol, Myth:symbol)\nIs_prevalent_in(\"fairy\", \"world myths\").\nIs_prevalent_in(\"valkyrie\", \"world myths\").\nIs_prevalent_in(\"valkyrie\", \"Norse mythology\").\n.decl Answer()\nAnswer() :- Is_prevalent_in(\"fairy\", \"world myths\"), Is_prevalent_in(\"valkyrie\", \"world myths\"), not Is_prevalent_in(\"fairy\", \"Norse mythology\").\n.output Answer", "completions": [".decl Is_prevalent_in(Character:symbol, Myth:symbol)\nIs_prevalent_in(\"fairy\", \"world myths\").\nIs_prevalent_in(\"valkyrie\", \"world myths\").\nIs_prevalent_in(\"valkyrie\", \"Norse mythology\").\n.decl Answer()\nAnswer() :- Is_prevalent_in(\"fairy\", \"world myths\"), Is_prevalent_in(\"valkyrie\", \"world myths\"), not Is_prevalent_in(\"fairy\", \"Norse mythology\").\n.output Answer"]}
{"id": 2284, "answer": false, "completion": ".decl Is_a_type_of(Animal_A:symbol, Animal_B:symbol)\nIs_a_type_of(\"Chinchilla\", \"rodent\").\nIs_a_type_of(\"Chinchilla\", \"felis catus\").\n.decl Answer()\nAnswer() :- Is_a_type_of(\"Chinchilla\", \"rodent\").\n.output Answer", "completions": [".decl Is_a_type_of(Animal_A:symbol, Animal_B:symbol)\nIs_a_type_of(\"Chinchilla\", \"rodent\").\nIs_a_type_of(\"Chinchilla\", \"felis catus\").\n.decl Answer()\nAnswer() :- Is_a_type_of(\"Chinchilla\", \"rodent\").\n.output Answer"]}
{"id": 2285, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Queen Victoria's reign\", 63).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Elizabeth II's birth\", 26).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Elizabeth II's birth\", n_years1), Last_n_years(\"Queen Victoria's reign\", n_years2), n_years1 <= n_years2.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Queen Victoria's reign\", 63).\n.decl Happens_every_n_years(Event:symbol, N_years:float)\nHappens_every_n_years(\"Elizabeth II's birth\", 26).\n.decl Answer()\nAnswer() :- Happens_every_n_years(\"Elizabeth II's birth\", n_years1), Last_n_years(\"Queen Victoria's reign\", n_years2), n_years1 <= n_years2.\n.output Answer"]}
{"id": 2286, "answer": false, "completion": ".decl Is_a_god(Person:symbol)\nIs_a_god(\"Pan\").\n.decl Answer()\nAnswer() :- Is_a_god(person), person != \"Pan\".\n.output Answer", "completions": [".decl Is_a_god(Person:symbol)\nIs_a_god(\"Pan\").\n.decl Answer()\nAnswer() :- Is_a_god(person), person != \"Pan\".\n.output Answer"]}
{"id": 2287, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Great Wall of China\", 8851).\nHas_length(\"Dodgers\", 0.5).\nHas_length(\"White Sox\", 0.5).\n.decl Answer()\nAnswer() :- Has_length(\"Great Wall of China\", length1), Has_length(\"Dodgers\", length2), Has_length(\"White Sox\", length3), length1 >= length2 + length3.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Great Wall of China\", 8851).\nHas_length(\"Dodgers\", 0.5).\nHas_length(\"White Sox\", 0.5).\n.decl Answer()\nAnswer() :- Has_length(\"Great Wall of China\", length1), Has_length(\"Dodgers\", length2), Has_length(\"White Sox\", length3), length1 >= length2 + length3.\n.output Answer"]}
{"id": 2288, "answer": true, "completion": ".decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"Happy hardcore music\", \"club\").\nHappens_at(\"funeral\", \"church\").\n.decl Answer()\nAnswer() :- Happens_at(\"Happy hardcore music\", place1), Happens_at(\"funeral\", place2), place1 != place2.\n.output Answer", "completions": [".decl Happens_at(Event:symbol, Place:symbol)\nHappens_at(\"Happy hardcore music\", \"club\").\nHappens_at(\"funeral\", \"church\").\n.decl Answer()\nAnswer() :- Happens_at(\"Happy hardcore music\", place1), Happens_at(\"funeral\", place2), place1 != place2.\n.output Answer"]}
{"id": 2289, "answer": true, "completion": ".decl Has_market_capitalization(Company:symbol, Market_capitalization:float)\nHas_market_capitalization(\"Sainsbury's\", 6.8).\nHas_market_capitalization(\"Tesco\", 18.8).\n.decl Answer()\nAnswer() :- Has_market_capitalization(\"Sainsbury's\", market_capitalization1), Has_market_capitalization(\"Tesco\", market_capitalization2), market_capitalization1 < market_capitalization2.\n.output Answer", "completions": [".decl Has_market_capitalization(Company:symbol, Market_capitalization:float)\nHas_market_capitalization(\"Sainsbury's\", 6.8).\nHas_market_capitalization(\"Tesco\", 18.8).\n.decl Answer()\nAnswer() :- Has_market_capitalization(\"Sainsbury's\", market_capitalization1), Has_market_capitalization(\"Tesco\", market_capitalization2), market_capitalization1 < market_capitalization2.\n.output Answer"]}
