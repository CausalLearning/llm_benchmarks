{"id": 0, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"college commencements\", \"December\").\nHappens_in_time(\"college commencements\", \"May\").\nHappens_in_time(\"college commencements\", \"June\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), Happens_in_time(\"college commencements\", month), In_season(month, season).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"winter\").\nHappens_in_time(\"college commencements\", \"December\").\nHappens_in_time(\"college commencements\", \"May\").\nHappens_in_time(\"college commencements\", \"June\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", season), Happens_in_time(\"college commencements\", month), In_season(month, season).\n.output Answer"]}
{"id": 1, "answer": true, "completion": ".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"hydrogen\", 1).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"hydrogen\", atomic_number), Has_n_members(\"Spice Girls\", n_members), atomic_number^2 > n_members.\n.output Answer", "completions": [".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"hydrogen\", 1).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"hydrogen\", atomic_number), Has_n_members(\"Spice Girls\", n_members), atomic_number^2 > n_members.\n.output Answer"]}
{"id": 2, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"pear\", 0.6).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"pear\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"pear\", 0.6).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"pear\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer"]}
{"id": 3, "answer": true, "completion": "Answer: Yes.", "completions": ["Answer: Yes."]}
{"id": 4, "answer": false, "completion": ".decl Requires_limb(Martial_art:symbol, Limb:symbol)\nRequires_limb(\"jujutsu\", \"arm\").\nRequires_limb(\"jujutsu\", \"leg\").\nRequires_limb(\"jujutsu\", \"hand\").\nRequires_limb(\"jujutsu\", \"foot\").\n.decl Answer()\nAnswer() :- Requires_limb(\"jujutsu\", limb), !Requires_limb(\"jujutsu\", !limb).\n.output Answer", "completions": [".decl Requires_limb(Martial_art:symbol, Limb:symbol)\nRequires_limb(\"jujutsu\", \"arm\").\nRequires_limb(\"jujutsu\", \"leg\").\nRequires_limb(\"jujutsu\", \"hand\").\nRequires_limb(\"jujutsu\", \"foot\").\n.decl Answer()\nAnswer() :- Requires_limb(\"jujutsu\", limb), !Requires_limb(\"jujutsu\", !limb).\n.output Answer"]}
{"id": 5, "answer": true, "completion": ".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"War in Vietnam\", 1).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"llama birth\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"llama birth\", n_months1), Lasts_n_years(\"War in Vietnam\", n_years), n_months2 = n_years * 12, n_months1 <= n_months2.\n.output Answer", "completions": [".decl Lasts_n_years(Event:symbol, N_years:float)\nLasts_n_years(\"War in Vietnam\", 1).\n.decl Happens_every_n_months(Event:symbol, N_months:float)\nHappens_every_n_months(\"llama birth\", 11).\n.decl Answer()\nAnswer() :- Happens_every_n_months(\"llama birth\", n_months1), Lasts_n_years(\"War in Vietnam\", n_years), n_months2 = n_years * 12, n_months1 <= n_months2.\n.output Answer"]}
{"id": 6, "answer": true, "completion": ".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Linus Torvalds\", \"Linux Foundation\").\n.decl Competes_with(Company1:symbol, Company2:symbol)\nCompetes_with(\"Linux Foundation\", \"Microsoft\").\n.decl Makes_money_from(Person:symbol, Company:symbol)\nMakes_money_from(person, company) :- Works_for(person, company).\nMakes_money_from(person, company) :- Works_for(person, company2), Competes_with(company2, company), !Makes_money_from(person, company).\n.decl Answer()\nAnswer() :- Makes_money_from(\"Linus Torvalds\", \"Microsoft\").\n.output Answer", "completions": [".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Linus Torvalds\", \"Linux Foundation\").\n.decl Competes_with(Company1:symbol, Company2:symbol)\nCompetes_with(\"Linux Foundation\", \"Microsoft\").\n.decl Makes_money_from(Person:symbol, Company:symbol)\nMakes_money_from(person, company) :- Works_for(person, company).\nMakes_money_from(person, company) :- Works_for(person, company2), Competes_with(company2, company), !Makes_money_from(person, company).\n.decl Answer()\nAnswer() :- Makes_money_from(\"Linus Torvalds\", \"Microsoft\").\n.output Answer"]}
{"id": 7, "answer": false, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Brooke Shields\", \"Princeton University\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"Princeton University\", 1).\nRanks(\"University of Pennsylvania\", 7).\n.decl Answer()\nAnswer() :- Graduates(\"Brooke Shields\", \"University of Pennsylvania\").\nAnswer() :- Graduates(\"Brooke Shields\", university2), Ranks(university2, rank2), Ranks(\"University of Pennsylvania\", rank1), rank2 <= rank1.\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Brooke Shields\", \"Princeton University\").\n.decl Ranks(University:symbol, Rank:float)\nRanks(\"Princeton University\", 1).\nRanks(\"University of Pennsylvania\", 7).\n.decl Answer()\nAnswer() :- Graduates(\"Brooke Shields\", \"University of Pennsylvania\").\nAnswer() :- Graduates(\"Brooke Shields\", university2), Ranks(university2, rank2), Ranks(\"University of Pennsylvania\", rank1), rank2 <= rank1.\n.output Answer"]}
{"id": 8, "answer": true, "completion": ".decl Climbs(Object:symbol)\nClimbs(\"silverfish\").\n.decl Height(Building:symbol, Height:float)\nHeight(\"Empire State Building\", 443.2).\n.decl Answer()\nAnswer() :- Climbs(object), Height(\"Empire State Building\", height), height <= 1.5.\n.output Answer", "completions": [".decl Climbs(Object:symbol)\nClimbs(\"silverfish\").\n.decl Height(Building:symbol, Height:float)\nHeight(\"Empire State Building\", 443.2).\n.decl Answer()\nAnswer() :- Climbs(object), Height(\"Empire State Building\", height), height <= 1.5.\n.output Answer"]}
{"id": 9, "answer": true, "completion": ".decl Familiar_with(User:symbol, Topic:symbol)\nFamiliar_with(\"user1\", \"Pledge of Allegiance\").\nFamiliar_with(\"user2\", \"Pledge of Allegiance\").\nFamiliar_with(\"user3\", \"Pledge of Allegiance\").\nFamiliar_with(\"user4\", \"Pledge of Allegiance\").\nFamiliar_with(\"user5\", \"Pledge of Allegiance\").\nFamiliar_with(\"user6\", \"Pledge of Allegiance\").\nFamiliar_with(\"user7\", \"Pledge of Allegiance\").\nFamiliar_with(\"user8\", \"Pledge of Allegiance\").\nFamiliar_with(\"user9\", \"Pledge of Allegiance\").\nFamiliar_with(\"user10\", \"Pledge of Allegiance\").\nFamiliar_with(\"user11\", \"Pledge of Allegiance\").\nFamiliar_with(\"user12\", \"Pledge of Allegiance\").\nFamiliar_with(\"user13\", \"Pledge of Allegiance\").\nFamiliar_with(\"user14\", \"Pledge of Allegiance\").\nFamiliar_with(\"user15\", \"Pledge of Allegiance\").\nFamiliar_with(\"user16\", \"Pledge of Allegiance\").\nFamiliar_with(\"user17\", \"Pledge of Allegiance\").\nFamiliar_with(\"user18\", \"Pledge of Allegiance\").\nFamiliar_with(\"user19\", \"Pledge of Allegiance\").\nFamiliar_with(\"user20\", \"Pledge of Allegiance\").\n.decl Answer()\nAnswer() :- Familiar_with(user, \"Pledge of Allegiance\"), count(user, count1), count(user2, count2), count1 > count2/2.\n.output Answer", "completions": [".decl Familiar_with(User:symbol, Topic:symbol)\nFamiliar_with(\"user1\", \"Pledge of Allegiance\").\nFamiliar_with(\"user2\", \"Pledge of Allegiance\").\nFamiliar_with(\"user3\", \"Pledge of Allegiance\").\nFamiliar_with(\"user4\", \"Pledge of Allegiance\").\nFamiliar_with(\"user5\", \"Pledge of Allegiance\").\nFamiliar_with(\"user6\", \"Pledge of Allegiance\").\nFamiliar_with(\"user7\", \"Pledge of Allegiance\").\nFamiliar_with(\"user8\", \"Pledge of Allegiance\").\nFamiliar_with(\"user9\", \"Pledge of Allegiance\").\nFamiliar_with(\"user10\", \"Pledge of Allegiance\").\nFamiliar_with(\"user11\", \"Pledge of Allegiance\").\nFamiliar_with(\"user12\", \"Pledge of Allegiance\").\nFamiliar_with(\"user13\", \"Pledge of Allegiance\").\nFamiliar_with(\"user14\", \"Pledge of Allegiance\").\nFamiliar_with(\"user15\", \"Pledge of Allegiance\").\nFamiliar_with(\"user16\", \"Pledge of Allegiance\").\nFamiliar_with(\"user17\", \"Pledge of Allegiance\").\nFamiliar_with(\"user18\", \"Pledge of Allegiance\").\nFamiliar_with(\"user19\", \"Pledge of Allegiance\").\nFamiliar_with(\"user20\", \"Pledge of Allegiance\").\n.decl Answer()\nAnswer() :- Familiar_with(user, \"Pledge of Allegiance\"), count(user, count1), count(user2, count2), count1 > count2/2.\n.output Answer"]}
{"id": 10, "answer": true, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"anchor1\", \"Portuguese\").\nSpeaks_language(\"anchor2\", \"English\").\n.decl Answer()\nAnswer() :- Speaks_language(\"anchor1\", \"Chinese\").\nAnswer() :- Speaks_language(\"anchor2\", \"Chinese\").\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"anchor1\", \"Portuguese\").\nSpeaks_language(\"anchor2\", \"English\").\n.decl Answer()\nAnswer() :- Speaks_language(\"anchor1\", \"Chinese\").\nAnswer() :- Speaks_language(\"anchor2\", \"Chinese\").\n.output Answer"]}
{"id": 11, "answer": false, "completion": ".decl Can_store_in_container(Item:symbol, Container:symbol)\nCan_store_in_container(\"Reiki\", \"bottle\").\n.decl Answer()\nAnswer() :- Can_store_in_container(\"Reiki\", container).\n.output Answer", "completions": [".decl Can_store_in_container(Item:symbol, Container:symbol)\nCan_store_in_container(\"Reiki\", \"bottle\").\n.decl Answer()\nAnswer() :- Can_store_in_container(\"Reiki\", container).\n.output Answer"]}
{"id": 12, "answer": true, "completion": ".decl Causes_reaction(Movie:symbol, Reaction:symbol)\nCauses_reaction(\"Scary Movie\", \"increase in adrenaline\").\n.decl Answer()\nAnswer() :- Causes_reaction(\"Scary Movie\", \"increase in adrenaline\").\n.output Answer", "completions": [".decl Causes_reaction(Movie:symbol, Reaction:symbol)\nCauses_reaction(\"Scary Movie\", \"increase in adrenaline\").\n.decl Answer()\nAnswer() :- Causes_reaction(\"Scary Movie\", \"increase in adrenaline\").\n.output Answer"]}
{"id": 13, "answer": false, "completion": ".decl Fictional_universe(Character:symbol, Universe:symbol)\nFictional_universe(\"Gateway\", \"Marvel\").\nFictional_universe(\"Doctor\", \"Doctor Who\").\n.decl Has_machine(Character:symbol, Machine:symbol)\nHas_machine(\"Gateway\", \"teleporter\").\nHas_machine(\"Doctor\", \"TARDIS\").\n.decl Answer()\nAnswer() :- Fictional_universe(\"Gateway\", universe1), Fictional_universe(\"Doctor\", universe2), universe1 != universe2, Has_machine(\"Gateway\", machine1), Has_machine(\"Doctor\", machine2), machine1 != machine2.\n.output Answer", "completions": [".decl Fictional_universe(Character:symbol, Universe:symbol)\nFictional_universe(\"Gateway\", \"Marvel\").\nFictional_universe(\"Doctor\", \"Doctor Who\").\n.decl Has_machine(Character:symbol, Machine:symbol)\nHas_machine(\"Gateway\", \"teleporter\").\nHas_machine(\"Doctor\", \"TARDIS\").\n.decl Answer()\nAnswer() :- Fictional_universe(\"Gateway\", universe1), Fictional_universe(\"Doctor\", universe2), universe1 != universe2, Has_machine(\"Gateway\", machine1), Has_machine(\"Doctor\", machine2), machine1 != machine2.\n.output Answer"]}
{"id": 14, "answer": false, "completion": ".decl Contains(Material:symbol, Product:symbol)\nContains(\"aloe plant\", \"lotion\").\nContains(\"petroleum\", \"plastic\").\nContains(\"petroleum\", \"lotion\").\n.decl Answer()\nAnswer() :- Contains(\"aloe plant\", material), Contains(material, product), Contains(\"petroleum\", product).\n.output Answer", "completions": [".decl Contains(Material:symbol, Product:symbol)\nContains(\"aloe plant\", \"lotion\").\nContains(\"petroleum\", \"plastic\").\nContains(\"petroleum\", \"lotion\").\n.decl Answer()\nAnswer() :- Contains(\"aloe plant\", material), Contains(material, product), Contains(\"petroleum\", product).\n.output Answer"]}
{"id": 15, "answer": true, "completion": ".decl Can_hold_weight(Object:symbol, Weight:float)\nCan_hold_weight(\"bee hummingbird\", 0.005).\n.decl Answer()\nAnswer() :- Can_hold_weight(\"bee hummingbird\", weight), weight >= 0.001.\n.output Answer", "completions": [".decl Can_hold_weight(Object:symbol, Weight:float)\nCan_hold_weight(\"bee hummingbird\", 0.005).\n.decl Answer()\nAnswer() :- Can_hold_weight(\"bee hummingbird\", weight), weight >= 0.001.\n.output Answer"]}
{"id": 16, "answer": true, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"broadcast from Spirit\", 2004).\n.decl Makes_news(Event:symbol)\nMakes_news(\"broadcast from Spirit\").\n.decl Answer()\nAnswer() :- Happens_in_year(\"broadcast from Spirit\", year), year + 16 = 2020, Makes_news(\"broadcast from Spirit\").\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"broadcast from Spirit\", 2004).\n.decl Makes_news(Event:symbol)\nMakes_news(\"broadcast from Spirit\").\n.decl Answer()\nAnswer() :- Happens_in_year(\"broadcast from Spirit\", year), year + 16 = 2020, Makes_news(\"broadcast from Spirit\").\n.output Answer"]}
{"id": 17, "answer": false, "completion": ".decl Set_in_book(Character:symbol, Book:symbol)\nSet_in_book(\"Harry Potter\", \"Harry Potter and the Philosopher's Stone\").\nSet_in_book(\"Hermione Granger\", \"Harry Potter and the Philosopher's Stone\").\nSet_in_book(\"Ron Weasley\", \"Harry Potter and the Philosopher's Stone\").\n.decl Religious_belief(Character:symbol, Belief:symbol)\nReligious_belief(\"Harry Potter\", \"none\").\nReligious_belief(\"Hermione Granger\", \"none\").\nReligious_belief(\"Ron Weasley\", \"Christianity\").\n.decl Answer()\nAnswer() :- Set_in_book(character, \"Harry Potter and the Philosopher's Stone\"), Religious_belief(character, belief), belief != \"Christianity\".\n.output Answer", "completions": [".decl Set_in_book(Character:symbol, Book:symbol)\nSet_in_book(\"Harry Potter\", \"Harry Potter and the Philosopher's Stone\").\nSet_in_book(\"Hermione Granger\", \"Harry Potter and the Philosopher's Stone\").\nSet_in_book(\"Ron Weasley\", \"Harry Potter and the Philosopher's Stone\").\n.decl Religious_belief(Character:symbol, Belief:symbol)\nReligious_belief(\"Harry Potter\", \"none\").\nReligious_belief(\"Hermione Granger\", \"none\").\nReligious_belief(\"Ron Weasley\", \"Christianity\").\n.decl Answer()\nAnswer() :- Set_in_book(character, \"Harry Potter and the Philosopher's Stone\"), Religious_belief(character, belief), belief != \"Christianity\".\n.output Answer"]}
{"id": 18, "answer": false, "completion": ".decl Can_be_used_as_weapon(Object:symbol)\nCan_be_used_as_weapon(\"music\").\nCan_be_used_as_weapon(\"sonic boom\").\nCan_be_used_as_weapon(\"loud noise\").\n.decl Answer()\nAnswer() :- Can_be_used_as_weapon(\"music\").\n.output Answer", "completions": [".decl Can_be_used_as_weapon(Object:symbol)\nCan_be_used_as_weapon(\"music\").\nCan_be_used_as_weapon(\"sonic boom\").\nCan_be_used_as_weapon(\"loud noise\").\n.decl Answer()\nAnswer() :- Can_be_used_as_weapon(\"music\").\n.output Answer"]}
{"id": 19, "answer": true, "completion": ".decl Books_flight(Person:symbol, Airline:symbol)\nBooks_flight(\"Harry Potter\", \"Hogwarts Express\").\n.decl Answer()\nAnswer() :- Books_flight(\"Harry Potter\", airline), airline != \"Asiana Airlines\".\n.output Answer", "completions": [".decl Books_flight(Person:symbol, Airline:symbol)\nBooks_flight(\"Harry Potter\", \"Hogwarts Express\").\n.decl Answer()\nAnswer() :- Books_flight(\"Harry Potter\", airline), airline != \"Asiana Airlines\".\n.output Answer"]}
{"id": 20, "answer": true, "completion": ".decl Part_of(Event:symbol, Period:symbol)\nPart_of(\"Karachi\", \"Alexander the Great's conquests\").\n.decl Answer()\nAnswer() :- Part_of(\"Karachi\", period).\n.output Answer", "completions": [".decl Part_of(Event:symbol, Period:symbol)\nPart_of(\"Karachi\", \"Alexander the Great's conquests\").\n.decl Answer()\nAnswer() :- Part_of(\"Karachi\", period).\n.output Answer"]}
{"id": 21, "answer": false, "completion": ".decl Trained_by(Person1:symbol, Person2:symbol)\nTrained_by(\"Jackson Pollock\", \"Thomas Hart Benton\").\nTrained_by(\"Thomas Hart Benton\", \"John Sloan\").\nTrained_by(\"John Sloan\", \"Robert Henri\").\nTrained_by(\"Robert Henri\", \"William Merritt Chase\").\nTrained_by(\"William Merritt Chase\", \"Emile Auguste Carolus-Duran\").\nTrained_by(\"Emile Auguste Carolus-Duran\", \"Leon Bonnat\").\nTrained_by(\"Leon Bonnat\", \"Jean-Léon Gérôme\").\nTrained_by(\"Jean-Léon Gérôme\", \"Paul Delaroche\").\nTrained_by(\"Paul Delaroche\", \"Antoine-Jean Gros\").\nTrained_by(\"Antoine-Jean Gros\", \"Jacques-Louis David\").\nTrained_by(\"Jacques-Louis David\", \"Joseph-Marie Vien\").\nTrained_by(\"Joseph-Marie Vien\", \"François Boucher\").\nTrained_by(\"François Boucher\", \"François Lemoyne\").\nTrained_by(\"François Lemoyne\", \"Jean-Baptiste Jouvenet\").\nTrained_by(\"Jean-Baptiste Jouvenet\", \"Charles de La Fosse\").\nTrained_by(\"Charles de La Fosse\", \"Charles Le Brun\").\nTrained_by(\"Charles Le Brun\", \"Simon Vouet\").\nTrained_by(\"Simon Vouet\", \"Renaud de La Planche\").\nTrained_by(\"Renaud de La Planche\", \"Leonardo da Vinci\").\n.decl Answer()\nAnswer() :- Trained_by(\"Jackson Pollock\", person1), Trained_by(person1, person2), person2 = \"Leonardo da Vinci\".\n.output Answer", "completions": [".decl Trained_by(Person1:symbol, Person2:symbol)\nTrained_by(\"Jackson Pollock\", \"Thomas Hart Benton\").\nTrained_by(\"Thomas Hart Benton\", \"John Sloan\").\nTrained_by(\"John Sloan\", \"Robert Henri\").\nTrained_by(\"Robert Henri\", \"William Merritt Chase\").\nTrained_by(\"William Merritt Chase\", \"Emile Auguste Carolus-Duran\").\nTrained_by(\"Emile Auguste Carolus-Duran\", \"Leon Bonnat\").\nTrained_by(\"Leon Bonnat\", \"Jean-Léon Gérôme\").\nTrained_by(\"Jean-Léon Gérôme\", \"Paul Delaroche\").\nTrained_by(\"Paul Delaroche\", \"Antoine-Jean Gros\").\nTrained_by(\"Antoine-Jean Gros\", \"Jacques-Louis David\").\nTrained_by(\"Jacques-Louis David\", \"Joseph-Marie Vien\").\nTrained_by(\"Joseph-Marie Vien\", \"François Boucher\").\nTrained_by(\"François Boucher\", \"François Lemoyne\").\nTrained_by(\"François Lemoyne\", \"Jean-Baptiste Jouvenet\").\nTrained_by(\"Jean-Baptiste Jouvenet\", \"Charles de La Fosse\").\nTrained_by(\"Charles de La Fosse\", \"Charles Le Brun\").\nTrained_by(\"Charles Le Brun\", \"Simon Vouet\").\nTrained_by(\"Simon Vouet\", \"Renaud de La Planche\").\nTrained_by(\"Renaud de La Planche\", \"Leonardo da Vinci\").\n.decl Answer()\nAnswer() :- Trained_by(\"Jackson Pollock\", person1), Trained_by(person1, person2), person2 = \"Leonardo da Vinci\".\n.output Answer"]}
{"id": 22, "answer": true, "completion": ".decl Causes_effect(Movie:symbol, Effect:symbol)\nCauses_effect(\"The Exorcist\", \"stimulation of limbic system\").\n.decl Answer()\nAnswer() :- Causes_effect(\"The Exorcist\", \"stimulation of limbic system\").\n.output Answer", "completions": [".decl Causes_effect(Movie:symbol, Effect:symbol)\nCauses_effect(\"The Exorcist\", \"stimulation of limbic system\").\n.decl Answer()\nAnswer() :- Causes_effect(\"The Exorcist\", \"stimulation of limbic system\").\n.output Answer"]}
{"id": 23, "answer": true, "completion": ".decl Contributed_to(Event:symbol, Person:symbol)\nContributed_to(\"World War II\", \"Alan Turing\").\n.decl Changed_outcome(Event:symbol)\nChanged_outcome(\"World War II\").\n.decl Answer()\nAnswer() :- Contributed_to(\"World War II\", \"Alan Turing\"), !Changed_outcome(\"World War II\").\n.output Answer", "completions": [".decl Contributed_to(Event:symbol, Person:symbol)\nContributed_to(\"World War II\", \"Alan Turing\").\n.decl Changed_outcome(Event:symbol)\nChanged_outcome(\"World War II\").\n.decl Answer()\nAnswer() :- Contributed_to(\"World War II\", \"Alan Turing\"), !Changed_outcome(\"World War II\").\n.output Answer"]}
{"id": 24, "answer": false, "completion": ".decl Uses(Philosopher:symbol, Weapon:symbol)\nUses(\"sophist\", \"rhetoric\").\n.decl Answer()\nAnswer() :- Uses(\"sophist\", weapon), weapon != \"épée\".\n.output Answer", "completions": [".decl Uses(Philosopher:symbol, Weapon:symbol)\nUses(\"sophist\", \"rhetoric\").\n.decl Answer()\nAnswer() :- Uses(\"sophist\", weapon), weapon != \"épée\".\n.output Answer"]}
{"id": 25, "answer": false, "completion": ".decl Hugs(Person1:symbol, Person2:symbol)\nHugs(\"Dale Jr\", \"Dale Sr\").\n.decl Last_time_together(Event:symbol, Person:symbol)\nLast_time_together(\"Daytona 500\", \"Dale Jr\").\nLast_time_together(\"Daytona 500\", \"Dale Sr\").\n.decl Answer()\nAnswer() :- Hugs(\"Dale Jr\", \"Dale Sr\"), Last_time_together(\"Daytona 500\", \"Dale Jr\").\n.output Answer", "completions": [".decl Hugs(Person1:symbol, Person2:symbol)\nHugs(\"Dale Jr\", \"Dale Sr\").\n.decl Last_time_together(Event:symbol, Person:symbol)\nLast_time_together(\"Daytona 500\", \"Dale Jr\").\nLast_time_together(\"Daytona 500\", \"Dale Sr\").\n.decl Answer()\nAnswer() :- Hugs(\"Dale Jr\", \"Dale Sr\"), Last_time_together(\"Daytona 500\", \"Dale Jr\").\n.output Answer"]}
{"id": 26, "answer": false, "completion": ".decl Grows_in_climate(Plant:symbol, Climate:symbol)\nGrows_in_climate(\"citrus\", \"tropical\").\n.decl Is_in_city(City:symbol, Country:symbol)\nIs_in_city(\"Ulaanbaatar\", \"Mongolia\").\n.decl Answer()\nAnswer() :- Grows_in_climate(\"citrus\", climate), Is_in_city(\"Ulaanbaatar\", country), (climate = \"tropical\" ; country != \"Mongolia\").\n.output Answer", "completions": [".decl Grows_in_climate(Plant:symbol, Climate:symbol)\nGrows_in_climate(\"citrus\", \"tropical\").\n.decl Is_in_city(City:symbol, Country:symbol)\nIs_in_city(\"Ulaanbaatar\", \"Mongolia\").\n.decl Answer()\nAnswer() :- Grows_in_climate(\"citrus\", climate), Is_in_city(\"Ulaanbaatar\", country), (climate = \"tropical\" ; country != \"Mongolia\").\n.output Answer"]}
{"id": 27, "answer": true, "completion": ".decl Sits_on_geological_feature(Location:symbol, Feature:symbol)\nSits_on_geological_feature(\"New York Harbor\", \"craton\").\nSits_on_geological_feature(\"Yellowstone National Park\", \"volcano\").\n.decl Answer()\nAnswer() :- Sits_on_geological_feature(\"New York Harbor\", feature), !Sits_on_geological_feature(\"New York Harbor\", \"volcano\").\n.output Answer", "completions": [".decl Sits_on_geological_feature(Location:symbol, Feature:symbol)\nSits_on_geological_feature(\"New York Harbor\", \"craton\").\nSits_on_geological_feature(\"Yellowstone National Park\", \"volcano\").\n.decl Answer()\nAnswer() :- Sits_on_geological_feature(\"New York Harbor\", feature), !Sits_on_geological_feature(\"New York Harbor\", \"volcano\").\n.output Answer"]}
{"id": 28, "answer": false, "completion": ".decl Illuminated(Building:symbol)\nIlluminated(\"Palace of Westminster\").\n.decl Has_clock(Building:symbol)\nHas_clock(\"Palace of Westminster\").\n.decl Answer()\nAnswer() :- Illuminated(\"Palace of Westminster\"), Has_clock(\"Palace of Westminster\").\n.output Answer", "completions": [".decl Illuminated(Building:symbol)\nIlluminated(\"Palace of Westminster\").\n.decl Has_clock(Building:symbol)\nHas_clock(\"Palace of Westminster\").\n.decl Answer()\nAnswer() :- Illuminated(\"Palace of Westminster\"), Has_clock(\"Palace of Westminster\").\n.output Answer"]}
{"id": 29, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"teenager\", \"depression\").\nHas_condition(\"young adult\", \"depression\").\n.decl Medication_risk(Medication:symbol, Risk:symbol)\nMedication_risk(\"SSRI\", \"less safe for teenagers and young adults\").\nMedication_risk(\"SSRI\", \"safe for adults\").\n.decl Answer()\nAnswer() :- Has_condition(person, \"depression\"), Medication_risk(\"SSRI\", risk), risk = \"less safe for teenagers and young adults\".\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"teenager\", \"depression\").\nHas_condition(\"young adult\", \"depression\").\n.decl Medication_risk(Medication:symbol, Risk:symbol)\nMedication_risk(\"SSRI\", \"less safe for teenagers and young adults\").\nMedication_risk(\"SSRI\", \"safe for adults\").\n.decl Answer()\nAnswer() :- Has_condition(person, \"depression\"), Medication_risk(\"SSRI\", risk), risk = \"less safe for teenagers and young adults\".\n.output Answer"]}
{"id": 30, "answer": false, "completion": ".decl Has_relationship(Person:symbol, Relationship:symbol)\nHas_relationship(\"Marco Rubio\", \"Christianity\").\n.decl Answer()\nAnswer() :- !Has_relationship(\"Marco Rubio\", \"Islam\").\n.output Answer", "completions": [".decl Has_relationship(Person:symbol, Relationship:symbol)\nHas_relationship(\"Marco Rubio\", \"Christianity\").\n.decl Answer()\nAnswer() :- !Has_relationship(\"Marco Rubio\", \"Islam\").\n.output Answer"]}
{"id": 31, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Persephone\", \"horticulture\").\n.decl Works_with(Person1:symbol, Person2:symbol)\nWorks_with(\"Persephone\", \"landscape architect\").\n.decl Answer()\nAnswer() :- Has_skill(\"Persephone\", skill), Works_with(\"Persephone\", \"landscape architect\"), skill = \"horticulture\".\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Persephone\", \"horticulture\").\n.decl Works_with(Person1:symbol, Person2:symbol)\nWorks_with(\"Persephone\", \"landscape architect\").\n.decl Answer()\nAnswer() :- Has_skill(\"Persephone\", skill), Works_with(\"Persephone\", \"landscape architect\"), skill = \"horticulture\".\n.output Answer"]}
{"id": 32, "answer": true, "completion": ".decl Is_next_to(Element1:symbol, Element2:symbol)\nIs_next_to(\"Neon\", \"Argon\").\nIs_next_to(\"Argon\", \"Neon\").\nIs_next_to(\"Argon\", \"Potassium\").\nIs_next_to(\"Potassium\", \"Argon\").\n.decl Answer()\nAnswer() :- Is_next_to(\"Argon\", element1), Is_next_to(element1, \"Neon\").\n.output Answer", "completions": [".decl Is_next_to(Element1:symbol, Element2:symbol)\nIs_next_to(\"Neon\", \"Argon\").\nIs_next_to(\"Argon\", \"Neon\").\nIs_next_to(\"Argon\", \"Potassium\").\nIs_next_to(\"Potassium\", \"Argon\").\n.decl Answer()\nAnswer() :- Is_next_to(\"Argon\", element1), Is_next_to(element1, \"Neon\").\n.output Answer"]}
{"id": 33, "answer": false, "completion": ".decl Married(Person1:symbol, Person2:symbol)\nMarried(\"Thomas Greenhill\", \"Mary Greenhill\").\nMarried(\"Thomas Greenhill\", \"Jane Greenhill\").\n.decl Answer()\nAnswer() :- Married(\"Thomas Greenhill\", spouse1), Married(\"Thomas Greenhill\", spouse2), spouse1 != spouse2.\n.output Answer", "completions": [".decl Married(Person1:symbol, Person2:symbol)\nMarried(\"Thomas Greenhill\", \"Mary Greenhill\").\nMarried(\"Thomas Greenhill\", \"Jane Greenhill\").\n.decl Answer()\nAnswer() :- Married(\"Thomas Greenhill\", spouse1), Married(\"Thomas Greenhill\", spouse2), spouse1 != spouse2.\n.output Answer"]}
{"id": 34, "answer": false, "completion": ".decl Age(Person:symbol, Years_old:float)\nAge(\"high schooler\", 16).\n.decl Uses(Resource:symbol, Person:symbol)\nUses(\"yellow pages\", \"older generation\").\n.decl Answer()\nAnswer() :- Age(\"high schooler\", age), Uses(\"yellow pages\", person), age < 30, person != \"older generation\".\n.output Answer", "completions": [".decl Age(Person:symbol, Years_old:float)\nAge(\"high schooler\", 16).\n.decl Uses(Resource:symbol, Person:symbol)\nUses(\"yellow pages\", \"older generation\").\n.decl Answer()\nAnswer() :- Age(\"high schooler\", age), Uses(\"yellow pages\", person), age < 30, person != \"older generation\".\n.output Answer"]}
{"id": 35, "answer": false, "completion": ".decl Distance(Start:symbol, End:symbol, Distance:float)\nDistance(\"Alcatraz Island\", \"San Francisco\", 2).\nDistance(\"San Francisco\", \"Siberia\", 5000).\n.decl Can_reach(Start:symbol, End:symbol)\nCan_reach(start, end) :- Distance(start, end, distance), distance <= 10000.\n.decl Answer()\nAnswer() :- Can_reach(\"Alcatraz Island\", \"Siberia\").\n.output Answer", "completions": [".decl Distance(Start:symbol, End:symbol, Distance:float)\nDistance(\"Alcatraz Island\", \"San Francisco\", 2).\nDistance(\"San Francisco\", \"Siberia\", 5000).\n.decl Can_reach(Start:symbol, End:symbol)\nCan_reach(start, end) :- Distance(start, end, distance), distance <= 10000.\n.decl Answer()\nAnswer() :- Can_reach(\"Alcatraz Island\", \"Siberia\").\n.output Answer"]}
{"id": 36, "answer": true, "completion": ".decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Gulf of Finland\", 85).\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Gulf of Finland\", 2).\n.decl Has_pressure(Location:symbol, Pressure:float)\nHas_pressure(\"Gulf of Finland\", 5).\n.decl Answer()\nAnswer() :- Has_depth(\"Gulf of Finland\", depth), Has_temperature(\"Gulf of Finland\", temperature), Has_pressure(\"Gulf of Finland\", pressure), depth > 70, temperature < 4, pressure < 10.\n.output Answer", "completions": [".decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Gulf of Finland\", 85).\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Gulf of Finland\", 2).\n.decl Has_pressure(Location:symbol, Pressure:float)\nHas_pressure(\"Gulf of Finland\", 5).\n.decl Answer()\nAnswer() :- Has_depth(\"Gulf of Finland\", depth), Has_temperature(\"Gulf of Finland\", temperature), Has_pressure(\"Gulf of Finland\", pressure), depth > 70, temperature < 4, pressure < 10.\n.output Answer"]}
{"id": 37, "answer": true, "completion": ".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"snowy owl\", \"arctic tundra\").\nLives_in_habitat(\"Sonoran desert tortoise\", \"Sonoran Desert\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"snowy owl\", habitat1), Lives_in_habitat(\"Sonoran desert tortoise\", habitat2), habitat1 != habitat2.\n.output Answer", "completions": [".decl Lives_in_habitat(Animal:symbol, Habitat:symbol)\nLives_in_habitat(\"snowy owl\", \"arctic tundra\").\nLives_in_habitat(\"Sonoran desert tortoise\", \"Sonoran Desert\").\n.decl Answer()\nAnswer() :- Lives_in_habitat(\"snowy owl\", habitat1), Lives_in_habitat(\"Sonoran desert tortoise\", habitat2), habitat1 != habitat2.\n.output Answer"]}
{"id": 38, "answer": true, "completion": ".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"rabbi\", \"God\").\n.decl Killed_by(Martyr:symbol, Ruler:symbol)\nKilled_by(\"Christians\", \"Ranavalona I\").\nKilled_by(\"Muslims\", \"Ranavalona I\").\nKilled_by(\"Protestants\", \"Ranavalona I\").\n.decl Answer()\nAnswer() :- Worships(\"rabbi\", deity), Killed_by(martyr, \"Ranavalona I\"), deity != martyr.\n.output Answer", "completions": [".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"rabbi\", \"God\").\n.decl Killed_by(Martyr:symbol, Ruler:symbol)\nKilled_by(\"Christians\", \"Ranavalona I\").\nKilled_by(\"Muslims\", \"Ranavalona I\").\nKilled_by(\"Protestants\", \"Ranavalona I\").\n.decl Answer()\nAnswer() :- Worships(\"rabbi\", deity), Killed_by(martyr, \"Ranavalona I\"), deity != martyr.\n.output Answer"]}
{"id": 39, "answer": true, "completion": ".decl Uses_color(Painter:symbol, Color:symbol)\nUses_color(\"oil painter\", \"red\").\n.decl Lives_on(Animal:symbol, Plant:symbol)\nLives_on(\"scale insects\", \"cactus\").\n.decl Avoids_color(Painter:symbol, Color:symbol)\nAvoids_color(\"oil painter\", \"red\").\nAvoids_color(painter, color) :- Uses_color(painter, color), Lives_on(animal, plant), plant = \"cactus\".\n.decl Answer()\nAnswer() :- Avoids_color(\"oil painter\", \"red\").\n.output Answer", "completions": [".decl Uses_color(Painter:symbol, Color:symbol)\nUses_color(\"oil painter\", \"red\").\n.decl Lives_on(Animal:symbol, Plant:symbol)\nLives_on(\"scale insects\", \"cactus\").\n.decl Avoids_color(Painter:symbol, Color:symbol)\nAvoids_color(\"oil painter\", \"red\").\nAvoids_color(painter, color) :- Uses_color(painter, color), Lives_on(animal, plant), plant = \"cactus\".\n.decl Answer()\nAnswer() :- Avoids_color(\"oil painter\", \"red\").\n.output Answer"]}
{"id": 40, "answer": true, "completion": ".decl Written_by(Person:symbol, Document:symbol)\nWritten_by(\"James Madison\", \"Second Amendment to the United States Constitution\").\n.decl Considers(Document:symbol, Group:symbol)\nConsiders(\"Second Amendment to the United States Constitution\", \"militia\").\nConsiders(\"Second Amendment to the United States Constitution\", \"the people\").\nConsiders(\"Declaration of Independence\", \"all men are created equal\").\n.decl Answer()\nAnswer() :- Written_by(\"James Madison\", document), Considers(document, \"the people\"), !Considers(document, \"black Americans\").\n.output Answer", "completions": [".decl Written_by(Person:symbol, Document:symbol)\nWritten_by(\"James Madison\", \"Second Amendment to the United States Constitution\").\n.decl Considers(Document:symbol, Group:symbol)\nConsiders(\"Second Amendment to the United States Constitution\", \"militia\").\nConsiders(\"Second Amendment to the United States Constitution\", \"the people\").\nConsiders(\"Declaration of Independence\", \"all men are created equal\").\n.decl Answer()\nAnswer() :- Written_by(\"James Madison\", document), Considers(document, \"the people\"), !Considers(document, \"black Americans\").\n.output Answer"]}
{"id": 41, "answer": false, "completion": ".decl Element_present(Element:symbol)\nElement_present(\"carbon dioxide\").\nElement_present(\"water vapor\").\nElement_present(\"nitrogen\").\nElement_present(\"oxygen\").\nElement_present(\"argon\").\n.decl Answer()\nAnswer() :- Element_present(\"carbon dioxide\"), Element_present(\"water vapor\"), Element_present(\"nitrogen\"), Element_present(\"oxygen\"), Element_present(\"argon\").\n.output Answer", "completions": [".decl Element_present(Element:symbol)\nElement_present(\"carbon dioxide\").\nElement_present(\"water vapor\").\nElement_present(\"nitrogen\").\nElement_present(\"oxygen\").\nElement_present(\"argon\").\n.decl Answer()\nAnswer() :- Element_present(\"carbon dioxide\"), Element_present(\"water vapor\"), Element_present(\"nitrogen\"), Element_present(\"oxygen\"), Element_present(\"argon\").\n.output Answer"]}
{"id": 42, "answer": false, "completion": ".decl Found_in(Thing:symbol, Place:symbol)\nFound_in(\"Bob Marley's face\", \"reggae-themed smoke shops\").\nFound_in(\"Bob Marley's face\", \"music festivals\").\nFound_in(\"Bob Marley's face\", \"college dorm rooms\").\n.decl Answer()\nAnswer() :- Found_in(\"Bob Marley's face\", place), place != \"college dorm rooms\".\n.output Answer", "completions": [".decl Found_in(Thing:symbol, Place:symbol)\nFound_in(\"Bob Marley's face\", \"reggae-themed smoke shops\").\nFound_in(\"Bob Marley's face\", \"music festivals\").\nFound_in(\"Bob Marley's face\", \"college dorm rooms\").\n.decl Answer()\nAnswer() :- Found_in(\"Bob Marley's face\", place), place != \"college dorm rooms\".\n.output Answer"]}
{"id": 43, "answer": false, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Pablo Escobar\", \"El Patrón\").\nHas_nickname(\"Pablo Escobar\", \"Don Pablo\").\nHas_nickname(\"Robert Moses Grove\", \"Lefty\").\nHas_nickname(\"Robert Moses Grove\", \"The Alabama Blossom\").\n.decl Collection_size(Person:symbol, Size:float)\nCollection_size(\"Pablo Escobar\", 20).\nCollection_size(\"Robert Moses Grove\", 4).\n.decl Answer()\nAnswer() :- Collection_size(\"Pablo Escobar\", size1), Collection_size(\"Robert Moses Grove\", size2), size1 > size2.\n.output Answer", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Pablo Escobar\", \"El Patrón\").\nHas_nickname(\"Pablo Escobar\", \"Don Pablo\").\nHas_nickname(\"Robert Moses Grove\", \"Lefty\").\nHas_nickname(\"Robert Moses Grove\", \"The Alabama Blossom\").\n.decl Collection_size(Person:symbol, Size:float)\nCollection_size(\"Pablo Escobar\", 20).\nCollection_size(\"Robert Moses Grove\", 4).\n.decl Answer()\nAnswer() :- Collection_size(\"Pablo Escobar\", size1), Collection_size(\"Robert Moses Grove\", size2), size1 > size2.\n.output Answer"]}
{"id": 44, "answer": true, "completion": ".decl Connected_with(Person:symbol, Company:symbol)\nConnected_with(\"Jared Fogle\", \"Subway\").\n.decl Accused_of_crime(Person:symbol, Crime:symbol)\nAccused_of_crime(\"Jared Fogle\", \"child abuse\").\n.decl Answer()\nAnswer() :- Connected_with(person, \"Subway\"), Accused_of_crime(person, \"child abuse\").\n.output Answer", "completions": [".decl Connected_with(Person:symbol, Company:symbol)\nConnected_with(\"Jared Fogle\", \"Subway\").\n.decl Accused_of_crime(Person:symbol, Crime:symbol)\nAccused_of_crime(\"Jared Fogle\", \"child abuse\").\n.decl Answer()\nAnswer() :- Connected_with(person, \"Subway\"), Accused_of_crime(person, \"child abuse\").\n.output Answer"]}
{"id": 45, "answer": false, "completion": ".decl Relies_on(Technology:symbol, Resource:symbol)\nRelies_on(\"autopilot\", \"electricity\").\nRelies_on(\"cars\", \"fossil fuels\").\n.decl Answer()\nAnswer() :- Relies_on(\"autopilot\", resource), resource != \"fossil fuels\".\n.output Answer", "completions": [".decl Relies_on(Technology:symbol, Resource:symbol)\nRelies_on(\"autopilot\", \"electricity\").\nRelies_on(\"cars\", \"fossil fuels\").\n.decl Answer()\nAnswer() :- Relies_on(\"autopilot\", resource), resource != \"fossil fuels\".\n.output Answer"]}
{"id": 46, "answer": false, "completion": ".decl Eligible(Person:symbol)\nEligible(\"John Doe\").\n.decl Has_diagnosis(Person:symbol, Diagnosis:symbol)\nHas_diagnosis(\"Jane Smith\", \"schizophrenia\").\n.decl Answer()\nAnswer() :- Eligible(person), !Has_diagnosis(person, \"schizophrenia\").\n.output Answer", "completions": [".decl Eligible(Person:symbol)\nEligible(\"John Doe\").\n.decl Has_diagnosis(Person:symbol, Diagnosis:symbol)\nHas_diagnosis(\"Jane Smith\", \"schizophrenia\").\n.decl Answer()\nAnswer() :- Eligible(person), !Has_diagnosis(person, \"schizophrenia\").\n.output Answer"]}
{"id": 47, "answer": false, "completion": ".decl Knows(Person1:symbol, Person2:symbol)\nKnows(\"Nicole Kidman\", \"Tom Cruise\").\nKnows(\"Tom Cruise\", \"David Miscavige\").\nKnows(\"David Miscavige\", \"Scientologist\").\n.decl Answer()\nAnswer() :- Knows(\"Nicole Kidman\", person), Knows(person, \"Scientologist\").\n.output Answer", "completions": [".decl Knows(Person1:symbol, Person2:symbol)\nKnows(\"Nicole Kidman\", \"Tom Cruise\").\nKnows(\"Tom Cruise\", \"David Miscavige\").\nKnows(\"David Miscavige\", \"Scientologist\").\n.decl Answer()\nAnswer() :- Knows(\"Nicole Kidman\", person), Knows(person, \"Scientologist\").\n.output Answer"]}
{"id": 48, "answer": true, "completion": ".decl Known_for(Person:symbol, Trait:symbol)\nKnown_for(\"John Lennon\", \"music\").\n.decl Friends_with(Person_A:symbol, Person_B:symbol)\nFriends_with(\"Barack Obama\", \"Joe Biden\").\n.decl Answer()\nAnswer() :- Friends_with(\"Barack Obama\", \"Sasha Obama\"), Known_for(\"John Lennon\", \"music\").\n.output Answer", "completions": [".decl Known_for(Person:symbol, Trait:symbol)\nKnown_for(\"John Lennon\", \"music\").\n.decl Friends_with(Person_A:symbol, Person_B:symbol)\nFriends_with(\"Barack Obama\", \"Joe Biden\").\n.decl Answer()\nAnswer() :- Friends_with(\"Barack Obama\", \"Sasha Obama\"), Known_for(\"John Lennon\", \"music\").\n.output Answer"]}
{"id": 49, "answer": true, "completion": ".decl Fits_on_track(Object:symbol, Length:float)\nFits_on_track(\"tunnels at CERN\", 27).\nFits_on_track(\"High Speed 1 rails\", 109).\n.decl Answer()\nAnswer() :- Fits_on_track(object1, length1), Fits_on_track(object2, length2), object1 != object2, length1 <= length2.\n.output Answer", "completions": [".decl Fits_on_track(Object:symbol, Length:float)\nFits_on_track(\"tunnels at CERN\", 27).\nFits_on_track(\"High Speed 1 rails\", 109).\n.decl Answer()\nAnswer() :- Fits_on_track(object1, length1), Fits_on_track(object2, length2), object1 != object2, length1 <= length2.\n.output Answer"]}
{"id": 50, "answer": false, "completion": ".decl Size(Animal:symbol, Weight:float, Height:float)\nSize(\"elephant\", 5000, 3.2).\nSize(\"male macaque\", 20, 0.6).\n.decl Answer()\nAnswer() :- Size(\"elephant\", weight1, height1), Size(\"male macaque\", weight2, height2), weight1 > weight2*10, height1 > height2*2.\n.output Answer", "completions": [".decl Size(Animal:symbol, Weight:float, Height:float)\nSize(\"elephant\", 5000, 3.2).\nSize(\"male macaque\", 20, 0.6).\n.decl Answer()\nAnswer() :- Size(\"elephant\", weight1, height1), Size(\"male macaque\", weight2, height2), weight1 > weight2*10, height1 > height2*2.\n.output Answer"]}
{"id": 51, "answer": false, "completion": ".decl Speaks(Language:symbol, Country:symbol)\nSpeaks(\"English\", \"United States\").\nSpeaks(\"Swahili\", \"Kenya\").\n.decl Answer()\nAnswer() :- Speaks(\"Ubuntu\", \"Ubuntu\"), !.\nAnswer() :- Speaks(\"Ubuntu\", country), Speaks(\"English\", country).\n.output Answer", "completions": [".decl Speaks(Language:symbol, Country:symbol)\nSpeaks(\"English\", \"United States\").\nSpeaks(\"Swahili\", \"Kenya\").\n.decl Answer()\nAnswer() :- Speaks(\"Ubuntu\", \"Ubuntu\"), !.\nAnswer() :- Speaks(\"Ubuntu\", country), Speaks(\"English\", country).\n.output Answer"]}
{"id": 52, "answer": true, "completion": ".decl Has_risk_factor(Activity:symbol, Risk_factor:symbol)\nHas_risk_factor(\"cycling\", \"high-risk for pelvis fractures\").\n.decl Answer()\nAnswer() :- Has_risk_factor(\"cycling\", \"high-risk for pelvis fractures\").\n.output Answer", "completions": [".decl Has_risk_factor(Activity:symbol, Risk_factor:symbol)\nHas_risk_factor(\"cycling\", \"high-risk for pelvis fractures\").\n.decl Answer()\nAnswer() :- Has_risk_factor(\"cycling\", \"high-risk for pelvis fractures\").\n.output Answer"]}
{"id": 53, "answer": true, "completion": ".decl Has_immunity(Animal:symbol, Disease:symbol)\nHas_immunity(\"platypus\", \"cholera\").\n.decl Answer()\nAnswer() :- Has_immunity(\"platypus\", \"cholera\").\n.output Answer", "completions": [".decl Has_immunity(Animal:symbol, Disease:symbol)\nHas_immunity(\"platypus\", \"cholera\").\n.decl Answer()\nAnswer() :- Has_immunity(\"platypus\", \"cholera\").\n.output Answer"]}
{"id": 54, "answer": false, "completion": ".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"moose\", 2.1).\nHas_size(\"minotaur\", 1.8).\n.decl Answer()\nAnswer() :- Has_size(\"moose\", size1), Has_size(\"minotaur\", size2), size1 > size2.\n.output Answer", "completions": [".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"moose\", 2.1).\nHas_size(\"minotaur\", 1.8).\n.decl Answer()\nAnswer() :- Has_size(\"moose\", size1), Has_size(\"minotaur\", size2), size1 > size2.\n.output Answer"]}
{"id": 55, "answer": true, "completion": ".decl Has_ingredient(Pizza:symbol, Ingredient:symbol)\nHas_ingredient(\"anchovy pizza\", \"anchovies\").\nHas_ingredient(\"anchovy pizza\", \"cheese\").\nHas_ingredient(\"anchovy pizza\", \"tomato sauce\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"anchovy pizza\", ingredient), ingredient = \"bones\".\n.output Answer", "completions": [".decl Has_ingredient(Pizza:symbol, Ingredient:symbol)\nHas_ingredient(\"anchovy pizza\", \"anchovies\").\nHas_ingredient(\"anchovy pizza\", \"cheese\").\nHas_ingredient(\"anchovy pizza\", \"tomato sauce\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"anchovy pizza\", ingredient), ingredient = \"bones\".\n.output Answer"]}
{"id": 56, "answer": true, "completion": ".decl Eats(Animal:symbol, Food:symbol)\nEats(\"Bengal cat\", \"meat\").\nEats(\"Bengal cat\", \"fish\").\n.decl Answer()\nAnswer() :- Eats(\"Bengal cat\", food), food != \"pancakes\".\n.output Answer", "completions": [".decl Eats(Animal:symbol, Food:symbol)\nEats(\"Bengal cat\", \"meat\").\nEats(\"Bengal cat\", \"fish\").\n.decl Answer()\nAnswer() :- Eats(\"Bengal cat\", food), food != \"pancakes\".\n.output Answer"]}
{"id": 57, "answer": true, "completion": ".decl Typed_on_row(Char:symbol, Row:symbol)\nTyped_on_row(\"q\", \"top\").\nTyped_on_row(\"w\", \"top\").\nTyped_on_row(\"e\", \"top\").\nTyped_on_row(\"r\", \"top\").\nTyped_on_row(\"t\", \"top\").\nTyped_on_row(\"y\", \"top\").\nTyped_on_row(\"u\", \"top\").\nTyped_on_row(\"i\", \"top\").\nTyped_on_row(\"o\", \"top\").\nTyped_on_row(\"p\", \"top\").\nTyped_on_row(\"a\", \"middle\").\nTyped_on_row(\"s\", \"middle\").\nTyped_on_row(\"d\", \"middle\").\nTyped_on_row(\"f\", \"middle\").\nTyped_on_row(\"g\", \"middle\").\nTyped_on_row(\"h\", \"middle\").\nTyped_on_row(\"j\", \"middle\").\nTyped_on_row(\"k\", \"middle\").\nTyped_on_row(\"l\", \"middle\").\nTyped_on_row(\"z\", \"bottom\").\nTyped_on_row(\"x\", \"bottom\").\nTyped_on_row(\"c\", \"bottom\").\nTyped_on_row(\"v\", \"bottom\").\nTyped_on_row(\"b\", \"bottom\").\nTyped_on_row(\"n\", \"bottom\").\nTyped_on_row(\"m\", \"bottom\").\n.decl Answer()\nAnswer() :- Typed_on_row(\"z\", row), Typed_on_row(\"u\", row), Typed_on_row(\"c\", row), Typed_on_row(\"c\", row), Typed_on_row(\"h\", row), Typed_on_row(\"i\", row), Typed_on_row(\"n\", row), Typed_on_row(\"i\", row).\n.output Answer", "completions": [".decl Typed_on_row(Char:symbol, Row:symbol)\nTyped_on_row(\"q\", \"top\").\nTyped_on_row(\"w\", \"top\").\nTyped_on_row(\"e\", \"top\").\nTyped_on_row(\"r\", \"top\").\nTyped_on_row(\"t\", \"top\").\nTyped_on_row(\"y\", \"top\").\nTyped_on_row(\"u\", \"top\").\nTyped_on_row(\"i\", \"top\").\nTyped_on_row(\"o\", \"top\").\nTyped_on_row(\"p\", \"top\").\nTyped_on_row(\"a\", \"middle\").\nTyped_on_row(\"s\", \"middle\").\nTyped_on_row(\"d\", \"middle\").\nTyped_on_row(\"f\", \"middle\").\nTyped_on_row(\"g\", \"middle\").\nTyped_on_row(\"h\", \"middle\").\nTyped_on_row(\"j\", \"middle\").\nTyped_on_row(\"k\", \"middle\").\nTyped_on_row(\"l\", \"middle\").\nTyped_on_row(\"z\", \"bottom\").\nTyped_on_row(\"x\", \"bottom\").\nTyped_on_row(\"c\", \"bottom\").\nTyped_on_row(\"v\", \"bottom\").\nTyped_on_row(\"b\", \"bottom\").\nTyped_on_row(\"n\", \"bottom\").\nTyped_on_row(\"m\", \"bottom\").\n.decl Answer()\nAnswer() :- Typed_on_row(\"z\", row), Typed_on_row(\"u\", row), Typed_on_row(\"c\", row), Typed_on_row(\"c\", row), Typed_on_row(\"h\", row), Typed_on_row(\"i\", row), Typed_on_row(\"n\", row), Typed_on_row(\"i\", row).\n.output Answer"]}
{"id": 58, "answer": false, "completion": ".decl Borders(Location:symbol, Body_of_water:symbol)\nBorders(\"The Hague\", \"North Sea\").\nBorders(\"The Hague\", \"Hollandse IJssel\").\nBorders(\"The Hague\", \"Zuiderzee\").\n.decl Answer()\nAnswer() :- Borders(\"The Hague\", body1), Borders(\"The Hague\", body2), body1 != body2.\n.output Answer", "completions": [".decl Borders(Location:symbol, Body_of_water:symbol)\nBorders(\"The Hague\", \"North Sea\").\nBorders(\"The Hague\", \"Hollandse IJssel\").\nBorders(\"The Hague\", \"Zuiderzee\").\n.decl Answer()\nAnswer() :- Borders(\"The Hague\", body1), Borders(\"The Hague\", body2), body1 != body2.\n.output Answer"]}
{"id": 59, "answer": true, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"Jane\", 12).\n.decl Has_medical_exam(Person:symbol, Exam:symbol)\nHas_medical_exam(\"Jane\", \"eye exam\").\nHas_medical_exam(\"Jane\", \"hearing test\").\nHas_medical_exam(\"Jane\", \"vaccinations\").\n.decl Answer()\nAnswer() :- Age(person, age), Has_medical_exam(person, \"breast exam\"), age >= 13, age <= 15.\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"Jane\", 12).\n.decl Has_medical_exam(Person:symbol, Exam:symbol)\nHas_medical_exam(\"Jane\", \"eye exam\").\nHas_medical_exam(\"Jane\", \"hearing test\").\nHas_medical_exam(\"Jane\", \"vaccinations\").\n.decl Answer()\nAnswer() :- Age(person, age), Has_medical_exam(person, \"breast exam\"), age >= 13, age <= 15.\n.output Answer"]}
{"id": 60, "answer": false, "completion": ".decl Watches(TV_show:symbol, Country:symbol)\nWatches(\"Iron Chef\", \"Japan\").\n.decl Under_rule(Country:symbol, Ruler:symbol, Start_year:float, End_year:float)\nUnder_rule(\"Korea\", \"Japan\", 1910, 1945).\n.decl Answer()\nAnswer() :- Watches(\"Iron Chef\", country), Under_rule(country, \"Japan\", start_year, end_year), end_year >= 1993.\n.output Answer", "completions": [".decl Watches(TV_show:symbol, Country:symbol)\nWatches(\"Iron Chef\", \"Japan\").\n.decl Under_rule(Country:symbol, Ruler:symbol, Start_year:float, End_year:float)\nUnder_rule(\"Korea\", \"Japan\", 1910, 1945).\n.decl Answer()\nAnswer() :- Watches(\"Iron Chef\", country), Under_rule(country, \"Japan\", start_year, end_year), end_year >= 1993.\n.output Answer"]}
{"id": 61, "answer": true, "completion": ".decl Flies(Animal:symbol, Vehicle:symbol)\nFlies(\"bald eagle\", \"airplane\").\nFlies(\"B-52\", \"airplane\").\n.decl Answer()\nAnswer() :- Flies(\"bald eagle\", vehicle1), Flies(\"B-52\", vehicle2), vehicle1 < vehicle2.\n.output Answer", "completions": [".decl Flies(Animal:symbol, Vehicle:symbol)\nFlies(\"bald eagle\", \"airplane\").\nFlies(\"B-52\", \"airplane\").\n.decl Answer()\nAnswer() :- Flies(\"bald eagle\", vehicle1), Flies(\"B-52\", vehicle2), vehicle1 < vehicle2.\n.output Answer"]}
{"id": 62, "answer": false, "completion": ".decl Looks_like(Character1:symbol, Character2:symbol)\nLooks_like(\"Snoopy\", \"Scooby Doo\").\nLooks_like(\"Chance\", \"Shadow\").\nLooks_like(\"Chance\", \"Snoopy\").\n.decl Answer()\nAnswer() :- Looks_like(\"Snoopy\", character), Looks_like(character, \"Chance\").\n.output Answer", "completions": [".decl Looks_like(Character1:symbol, Character2:symbol)\nLooks_like(\"Snoopy\", \"Scooby Doo\").\nLooks_like(\"Chance\", \"Shadow\").\nLooks_like(\"Chance\", \"Snoopy\").\n.decl Answer()\nAnswer() :- Looks_like(\"Snoopy\", character), Looks_like(character, \"Chance\").\n.output Answer"]}
{"id": 63, "answer": true, "completion": ".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"Dioskourides\", \"physician\").\nOccupation(\"Dioskourides\", \"botanist\").\nOccupation(\"Dioskourides\", \"pharmacologist\").\nOccupation(\"Dioskourides\", \"author\").\n.decl Answer()\nAnswer() :- Occupation(\"Dioskourides\", \"lapidary\").\n.output Answer", "completions": [".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"Dioskourides\", \"physician\").\nOccupation(\"Dioskourides\", \"botanist\").\nOccupation(\"Dioskourides\", \"pharmacologist\").\nOccupation(\"Dioskourides\", \"author\").\n.decl Answer()\nAnswer() :- Occupation(\"Dioskourides\", \"lapidary\").\n.output Answer"]}
{"id": 64, "answer": false, "completion": ".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Alfred\", \"butler\").\nHas_occupation(\"John\", \"lawyer\").\nHas_occupation(\"Emily\", \"teacher\").\nHas_occupation(\"David\", \"doctor\").\n.decl Is_middle_class(Person:symbol)\nIs_middle_class(\"John\").\nIs_middle_class(\"Emily\").\nIs_middle_class(\"David\").\n.decl Answer()\nAnswer() :- Is_middle_class(person), !Has_occupation(person, \"butler\").\n.output Answer", "completions": [".decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"Alfred\", \"butler\").\nHas_occupation(\"John\", \"lawyer\").\nHas_occupation(\"Emily\", \"teacher\").\nHas_occupation(\"David\", \"doctor\").\n.decl Is_middle_class(Person:symbol)\nIs_middle_class(\"John\").\nIs_middle_class(\"Emily\").\nIs_middle_class(\"David\").\n.decl Answer()\nAnswer() :- Is_middle_class(person), !Has_occupation(person, \"butler\").\n.output Answer"]}
{"id": 65, "answer": true, "completion": ".decl Baptised(Person:symbol)\nBaptised(\"John Smith\").\n.decl Worked_for(Person:symbol, Employer:symbol, Year:float)\nWorked_for(\"John Smith\", \"Hillary Clinton\", 2009).\n.decl Answer()\nAnswer() :- Worked_for(person, \"Hillary Clinton\", 2009), Baptised(person).\n.output Answer", "completions": [".decl Baptised(Person:symbol)\nBaptised(\"John Smith\").\n.decl Worked_for(Person:symbol, Employer:symbol, Year:float)\nWorked_for(\"John Smith\", \"Hillary Clinton\", 2009).\n.decl Answer()\nAnswer() :- Worked_for(person, \"Hillary Clinton\", 2009), Baptised(person).\n.output Answer"]}
{"id": 66, "answer": false, "completion": ".decl Sells(Vendor:symbol, Product:symbol)\nSells(\"New York Public Library\", \"books\").\n.decl Answer()\nAnswer() :- !Sells(\"New York Public Library\", \"Alpo products\").\n.output Answer", "completions": [".decl Sells(Vendor:symbol, Product:symbol)\nSells(\"New York Public Library\", \"books\").\n.decl Answer()\nAnswer() :- !Sells(\"New York Public Library\", \"Alpo products\").\n.output Answer"]}
{"id": 67, "answer": false, "completion": ".decl Is_prophet(Person:symbol)\nIs_prophet(\"Solomon\").\nIs_prophet(\"Prophet Muhammad\").\nIs_prophet(\"Prophet Moses\").\nIs_king(\"King David\").\nIs_king(\"King Solomon\").\nIs_king(\"King Saul\").\n.decl Answer()\nAnswer() :- Is_prophet(person1), !Is_king(person1), Is_prophet(person2), !Is_king(person2), person1 != person2, count_prophets > count_kings, count_prophets != 0, count_kings != 0.\ncount_prophets = #count{person: Is_prophet(person)}.\ncount_kings = #count{person: Is_king(person)}.\n.output Answer", "completions": [".decl Is_prophet(Person:symbol)\nIs_prophet(\"Solomon\").\nIs_prophet(\"Prophet Muhammad\").\nIs_prophet(\"Prophet Moses\").\nIs_king(\"King David\").\nIs_king(\"King Solomon\").\nIs_king(\"King Saul\").\n.decl Answer()\nAnswer() :- Is_prophet(person1), !Is_king(person1), Is_prophet(person2), !Is_king(person2), person1 != person2, count_prophets > count_kings, count_prophets != 0, count_kings != 0.\ncount_prophets = #count{person: Is_prophet(person)}.\ncount_kings = #count{person: Is_king(person)}.\n.output Answer"]}
{"id": 68, "answer": false, "completion": ".decl Refers_to(Person1:symbol, Person2:symbol, Term:symbol)\nRefers_to(\"Taylor Swift\", \"Snoopy\", \"oppa\").\n.decl Answer()\nAnswer() :- Refers_to(\"Taylor Swift\", \"Snoopy\", term).\n.output Answer", "completions": [".decl Refers_to(Person1:symbol, Person2:symbol, Term:symbol)\nRefers_to(\"Taylor Swift\", \"Snoopy\", \"oppa\").\n.decl Answer()\nAnswer() :- Refers_to(\"Taylor Swift\", \"Snoopy\", term).\n.output Answer"]}
{"id": 69, "answer": false, "completion": ".decl Influences(Army:symbol, Fashion:symbol)\nInfluences(\"Confederate States Army\", \"gray uniforms\").\nInfluences(\"West Point\", \"military fashion\").\n.decl Answer()\nAnswer() :- Influences(army, \"gray uniforms\"), Influences(\"West Point\", fashion), army != \"West Point\", fashion != \"gray uniforms\".\n.output Answer", "completions": [".decl Influences(Army:symbol, Fashion:symbol)\nInfluences(\"Confederate States Army\", \"gray uniforms\").\nInfluences(\"West Point\", \"military fashion\").\n.decl Answer()\nAnswer() :- Influences(army, \"gray uniforms\"), Influences(\"West Point\", fashion), army != \"West Point\", fashion != \"gray uniforms\".\n.output Answer"]}
{"id": 70, "answer": false, "completion": ".decl Political_affiliation(Person:symbol, Affiliation:symbol)\nPolitical_affiliation(\"Blaire White\", \"conservative\").\n.decl Answer()\nAnswer() :- !Political_affiliation(\"Blaire White\", \"liberal\").\n.output Answer", "completions": [".decl Political_affiliation(Person:symbol, Affiliation:symbol)\nPolitical_affiliation(\"Blaire White\", \"conservative\").\n.decl Answer()\nAnswer() :- !Political_affiliation(\"Blaire White\", \"liberal\").\n.output Answer"]}
{"id": 71, "answer": false, "completion": ".decl Tastes_good(Part:symbol)\nTastes_good(\"gel\").\nTastes_good(\"juice\").\nTastes_good(\"skin\").\n.decl Answer()\nAnswer() :- !Tastes_good(part), Answer() :- Tastes_good(part).\n.output Answer", "completions": [".decl Tastes_good(Part:symbol)\nTastes_good(\"gel\").\nTastes_good(\"juice\").\nTastes_good(\"skin\").\n.decl Answer()\nAnswer() :- !Tastes_good(part), Answer() :- Tastes_good(part).\n.output Answer"]}
{"id": 72, "answer": false, "completion": ".decl Studies(Scientist:symbol, Science:symbol)\nStudies(\"oceanographer\", \"oceanography\").\nStudies(\"oceanographer\", \"marine biology\").\nStudies(\"oceanographer\", \"geology\").\nStudies(\"oceanographer\", \"meteorology\").\n.decl Answer()\nAnswer() :- Studies(\"oceanographer\", science1), Studies(\"oceanographer\", science2), science1 != science2.\n.output Answer", "completions": [".decl Studies(Scientist:symbol, Science:symbol)\nStudies(\"oceanographer\", \"oceanography\").\nStudies(\"oceanographer\", \"marine biology\").\nStudies(\"oceanographer\", \"geology\").\nStudies(\"oceanographer\", \"meteorology\").\n.decl Answer()\nAnswer() :- Studies(\"oceanographer\", science1), Studies(\"oceanographer\", science2), science1 != science2.\n.output Answer"]}
{"id": 73, "answer": false, "completion": ".decl Musician_genre(Musician:symbol, Genre:symbol)\nMusician_genre(\"Kurt Cobain\", \"grunge\").\nMusician_genre(\"Nirvana\", \"grunge\").\n.decl Survived_genre(Genre:symbol)\nSurvived_genre(\"grunge\").\nSurvived_genre(\"pop\").\nSurvived_genre(\"rock\").\n.decl Answer()\nAnswer() :- Musician_genre(\"Kurt Cobain\", genre), Survived_genre(genre).\n.output Answer", "completions": [".decl Musician_genre(Musician:symbol, Genre:symbol)\nMusician_genre(\"Kurt Cobain\", \"grunge\").\nMusician_genre(\"Nirvana\", \"grunge\").\n.decl Survived_genre(Genre:symbol)\nSurvived_genre(\"grunge\").\nSurvived_genre(\"pop\").\nSurvived_genre(\"rock\").\n.decl Answer()\nAnswer() :- Musician_genre(\"Kurt Cobain\", genre), Survived_genre(genre).\n.output Answer"]}
{"id": 74, "answer": true, "completion": ".decl Met(Person1:symbol, Person2:symbol)\nMet(\"Immanuel Kant\", \"George Pierce\").\n.decl President(Person:symbol, Number:float)\nPresident(\"Franklin Pierce\", 14).\n.decl Answer()\nAnswer() :- Met(\"Immanuel Kant\", person), President(person, 14).\n.output Answer", "completions": [".decl Met(Person1:symbol, Person2:symbol)\nMet(\"Immanuel Kant\", \"George Pierce\").\n.decl President(Person:symbol, Number:float)\nPresident(\"Franklin Pierce\", 14).\n.decl Answer()\nAnswer() :- Met(\"Immanuel Kant\", person), President(person, 14).\n.output Answer"]}
{"id": 75, "answer": true, "completion": ".decl Competes_in_market(Company:symbol, Market:symbol)\nCompetes_in_market(\"Steel Company\", \"Japanese bulk carrier market\").\n.decl Market_profitable(Market:symbol, Profitable:symbol)\nMarket_profitable(\"Japanese bulk carrier market\", \"yes\").\n.decl Answer()\nAnswer() :- Competes_in_market(\"Steel Company\", market), Market_profitable(market, \"yes\").\n.output Answer", "completions": [".decl Competes_in_market(Company:symbol, Market:symbol)\nCompetes_in_market(\"Steel Company\", \"Japanese bulk carrier market\").\n.decl Market_profitable(Market:symbol, Profitable:symbol)\nMarket_profitable(\"Japanese bulk carrier market\", \"yes\").\n.decl Answer()\nAnswer() :- Competes_in_market(\"Steel Company\", market), Market_profitable(market, \"yes\").\n.output Answer"]}
{"id": 76, "answer": true, "completion": ".decl Uses_field(Person:symbol, Field:symbol)\nUses_field(\"geographer\", \"geography\").\nUses_field(\"biochemist\", \"biochemistry\").\n.decl Answer()\nAnswer() :- Uses_field(\"geographer\", field1), Uses_field(\"biochemist\", field2), field1 != field2.\n.output Answer", "completions": [".decl Uses_field(Person:symbol, Field:symbol)\nUses_field(\"geographer\", \"geography\").\nUses_field(\"biochemist\", \"biochemistry\").\n.decl Answer()\nAnswer() :- Uses_field(\"geographer\", field1), Uses_field(\"biochemist\", field2), field1 != field2.\n.output Answer"]}
{"id": 77, "answer": false, "completion": ".decl Produced_in_region(Product:symbol, Region:symbol)\nProduced_in_region(\"coffee\", \"South\").\nProduced_in_region(\"coffee\", \"North\").\nProduced_in_region(\"coffee\", \"Central\").\n.decl Answer()\nAnswer() :- Produced_in_region(\"coffee\", region1), Produced_in_region(\"coffee\", region2), region1 != region2, !Produced_in_region(\"coffee\", region3), region3 != region1, region3 != region2.\n.output Answer", "completions": [".decl Produced_in_region(Product:symbol, Region:symbol)\nProduced_in_region(\"coffee\", \"South\").\nProduced_in_region(\"coffee\", \"North\").\nProduced_in_region(\"coffee\", \"Central\").\n.decl Answer()\nAnswer() :- Produced_in_region(\"coffee\", region1), Produced_in_region(\"coffee\", region2), region1 != region2, !Produced_in_region(\"coffee\", region3), region3 != region1, region3 != region2.\n.output Answer"]}
{"id": 78, "answer": true, "completion": ".decl Serves_Food(Restaurant:symbol, Food:symbol)\nServes_Food(\"Rick's Cafe\", \"BLT\").\n.decl Located_In(City:symbol, Country:symbol)\nLocated_In(\"Casablanca\", \"Morocco\").\n.decl Answer()\nAnswer() :- Serves_Food(restaurant, \"BLT\"), Located_In(city, \"Morocco\"), city = \"Casablanca\".\n.output Answer", "completions": [".decl Serves_Food(Restaurant:symbol, Food:symbol)\nServes_Food(\"Rick's Cafe\", \"BLT\").\n.decl Located_In(City:symbol, Country:symbol)\nLocated_In(\"Casablanca\", \"Morocco\").\n.decl Answer()\nAnswer() :- Serves_Food(restaurant, \"BLT\"), Located_In(city, \"Morocco\"), city = \"Casablanca\".\n.output Answer"]}
{"id": 79, "answer": false, "completion": ".decl Ship_size(Ship:symbol, Size:float)\nShip_size(\"Santa Maria\", 36).\nShip_size(\"Statue of Liberty\", 46).\n.decl Answer()\nAnswer() :- Ship_size(\"Santa Maria\", size1), Ship_size(\"Statue of Liberty\", size2), size1 >= size2.\n.output Answer", "completions": [".decl Ship_size(Ship:symbol, Size:float)\nShip_size(\"Santa Maria\", 36).\nShip_size(\"Statue of Liberty\", 46).\n.decl Answer()\nAnswer() :- Ship_size(\"Santa Maria\", size1), Ship_size(\"Statue of Liberty\", size2), size1 >= size2.\n.output Answer"]}
{"id": 80, "answer": true, "completion": ".decl Monument_size(Monument:symbol, Size:float)\nMonument_size(\"Jolly Green Giant\", 55).\n.decl Mountain_height(Mountain:symbol, Height:float)\nMountain_height(\"Pyrenees\", 3404).\n.decl Answer()\nAnswer() :- Monument_size(\"Jolly Green Giant\", size1), Mountain_height(\"Pyrenees\", height1), size1 < height1.\n.output Answer", "completions": [".decl Monument_size(Monument:symbol, Size:float)\nMonument_size(\"Jolly Green Giant\", 55).\n.decl Mountain_height(Mountain:symbol, Height:float)\nMountain_height(\"Pyrenees\", 3404).\n.decl Answer()\nAnswer() :- Monument_size(\"Jolly Green Giant\", size1), Mountain_height(\"Pyrenees\", height1), size1 < height1.\n.output Answer"]}
{"id": 81, "answer": true, "completion": ".decl Influences(Person:symbol, Movement:symbol)\nInfluences(\"Karl Marx\", \"communism\").\nInfluences(\"Mao Zedong\", \"communism\").\n.decl Answer()\nAnswer() :- Influences(\"Karl Marx\", movement), Influences(\"Mao Zedong\", movement), movement = \"communism\".\n.output Answer", "completions": [".decl Influences(Person:symbol, Movement:symbol)\nInfluences(\"Karl Marx\", \"communism\").\nInfluences(\"Mao Zedong\", \"communism\").\n.decl Answer()\nAnswer() :- Influences(\"Karl Marx\", movement), Influences(\"Mao Zedong\", movement), movement = \"communism\".\n.output Answer"]}
{"id": 82, "answer": false, "completion": ".decl Uses_protein(Source:symbol, Protein:symbol)\nUses_protein(\"Soylent\", \"pea\").\n.decl Answer()\nAnswer() :- Uses_protein(\"Soylent\", \"pea\").\n.output Answer", "completions": [".decl Uses_protein(Source:symbol, Protein:symbol)\nUses_protein(\"Soylent\", \"pea\").\n.decl Answer()\nAnswer() :- Uses_protein(\"Soylent\", \"pea\").\n.output Answer"]}
{"id": 83, "answer": false, "completion": ".decl Believes_in(Person:symbol, Religion:symbol)\nBelieves_in(\"John\", \"Christianity\").\nBelieves_in(\"Sarah\", \"Islam\").\nBelieves_in(\"Ahmed\", \"Islam\").\nBelieves_in(\"Marie\", \"Catholicism\").\n.decl Majority_religion(Religion:symbol)\nMajority_religion(\"Catholicism\").\n.decl Answer()\nAnswer() :- Believes_in(person, \"Islam\"), Majority_religion(\"Catholicism\").\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Religion:symbol)\nBelieves_in(\"John\", \"Christianity\").\nBelieves_in(\"Sarah\", \"Islam\").\nBelieves_in(\"Ahmed\", \"Islam\").\nBelieves_in(\"Marie\", \"Catholicism\").\n.decl Majority_religion(Religion:symbol)\nMajority_religion(\"Catholicism\").\n.decl Answer()\nAnswer() :- Believes_in(person, \"Islam\"), Majority_religion(\"Catholicism\").\n.output Answer"]}
{"id": 84, "answer": false, "completion": ".decl Takes_place_in(TV_show:symbol, Location:symbol)\nTakes_place_in(\"Family Guy\", \"Quahog, Rhode Island\").\n.decl Answer()\nAnswer() :- Takes_place_in(\"Family Guy\", location), location != \"West Coast\".\n.output Answer", "completions": [".decl Takes_place_in(TV_show:symbol, Location:symbol)\nTakes_place_in(\"Family Guy\", \"Quahog, Rhode Island\").\n.decl Answer()\nAnswer() :- Takes_place_in(\"Family Guy\", location), location != \"West Coast\".\n.output Answer"]}
{"id": 85, "answer": false, "completion": ".decl Uses_unit(System:symbol, Unit:symbol)\nUses_unit(\"UK\", \"metre\").\n.decl Answer()\nAnswer() :- Uses_unit(\"UK\", \"length\"), !Uses_unit(\"UK\", unit2), unit2 != \"metre\".\n.output Answer", "completions": [".decl Uses_unit(System:symbol, Unit:symbol)\nUses_unit(\"UK\", \"metre\").\n.decl Answer()\nAnswer() :- Uses_unit(\"UK\", \"length\"), !Uses_unit(\"UK\", unit2), unit2 != \"metre\".\n.output Answer"]}
{"id": 86, "answer": true, "completion": ".decl Played_role(Person:symbol, Event:symbol)\nPlayed_role(\"The first Duke of Valentinois\", \"Italian Wars\").\n.decl Occurred_in(Event:symbol, Time_period:symbol)\nOccurred_in(\"Hundred Years' War\", \"1337-1453\").\n.decl Answer()\nAnswer() :- Played_role(\"The first Duke of Valentinois\", event1), Occurred_in(\"Hundred Years' War\", event2), event1 != event2.\n.output Answer", "completions": [".decl Played_role(Person:symbol, Event:symbol)\nPlayed_role(\"The first Duke of Valentinois\", \"Italian Wars\").\n.decl Occurred_in(Event:symbol, Time_period:symbol)\nOccurred_in(\"Hundred Years' War\", \"1337-1453\").\n.decl Answer()\nAnswer() :- Played_role(\"The first Duke of Valentinois\", event1), Occurred_in(\"Hundred Years' War\", event2), event1 != event2.\n.output Answer"]}
{"id": 87, "answer": false, "completion": ".decl Fights(Animal_A:symbol, Animal_B:symbol)\nFights(\"gorilla\", \"panda bear\").\n.decl Answer()\nAnswer() :- Fights(\"gorilla\", \"panda bear\").\n.output Answer", "completions": [".decl Fights(Animal_A:symbol, Animal_B:symbol)\nFights(\"gorilla\", \"panda bear\").\n.decl Answer()\nAnswer() :- Fights(\"gorilla\", \"panda bear\").\n.output Answer"]}
{"id": 88, "answer": true, "completion": ".decl Born_in(Person:symbol, Borough:symbol)\nBorn_in(\"Christina Aguilera\", \"Staten Island\").\n.decl Is_forgotten(Borough:symbol)\nIs_forgotten(\"Staten Island\").\n.decl Answer()\nAnswer() :- Born_in(\"Christina Aguilera\", borough), Is_forgotten(borough).\n.output Answer", "completions": [".decl Born_in(Person:symbol, Borough:symbol)\nBorn_in(\"Christina Aguilera\", \"Staten Island\").\n.decl Is_forgotten(Borough:symbol)\nIs_forgotten(\"Staten Island\").\n.decl Answer()\nAnswer() :- Born_in(\"Christina Aguilera\", borough), Is_forgotten(borough).\n.output Answer"]}
{"id": 89, "answer": false, "completion": ".decl Has_two_letter_pair(String:symbol, Pair:symbol)\nHas_two_letter_pair(\"hello\", \"he\").\nHas_two_letter_pair(\"world\", \"wo\").\nHas_two_letter_pair(\"wheel\", \"we\").\nHas_two_letter_pair(\"fortune\", \"fo\").\n.decl Count_pairs(Pair:symbol, Count:float)\nCount_pairs(\"he\", 10).\nCount_pairs(\"wo\", 5).\nCount_pairs(\"we\", 3).\nCount_pairs(\"fo\", 8).\n.decl Answer()\nAnswer() :- Has_two_letter_pair(\"h\", letter1), Has_two_letter_pair(letter1, \"pair\"), Count_pairs(\"pair\", count), count > 0.\n.output Answer", "completions": [".decl Has_two_letter_pair(String:symbol, Pair:symbol)\nHas_two_letter_pair(\"hello\", \"he\").\nHas_two_letter_pair(\"world\", \"wo\").\nHas_two_letter_pair(\"wheel\", \"we\").\nHas_two_letter_pair(\"fortune\", \"fo\").\n.decl Count_pairs(Pair:symbol, Count:float)\nCount_pairs(\"he\", 10).\nCount_pairs(\"wo\", 5).\nCount_pairs(\"we\", 3).\nCount_pairs(\"fo\", 8).\n.decl Answer()\nAnswer() :- Has_two_letter_pair(\"h\", letter1), Has_two_letter_pair(letter1, \"pair\"), Count_pairs(\"pair\", count), count > 0.\n.output Answer"]}
{"id": 90, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"quarter\", 0.955).\nHas_size(\"human kidney\", 11).\n.decl Answer()\nAnswer() :- Has_size(\"quarter\", size1), Has_size(\"human kidney\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"quarter\", 0.955).\nHas_size(\"human kidney\", 11).\n.decl Answer()\nAnswer() :- Has_size(\"quarter\", size1), Has_size(\"human kidney\", size2), size1 < size2.\n.output Answer"]}
{"id": 91, "answer": true, "completion": ".decl Telescope(Telescope:symbol, Function:symbol)\nTelescope(\"James Webb Space Telescope\", \"locate planets\").\n.decl Success(Telescope:symbol)\nSuccess(\"James Webb Space Telescope\").\n.decl Answer()\nAnswer() :- Telescope(\"James Webb Space Telescope\", function), !Success(\"James Webb Space Telescope\").\n.output Answer", "completions": [".decl Telescope(Telescope:symbol, Function:symbol)\nTelescope(\"James Webb Space Telescope\", \"locate planets\").\n.decl Success(Telescope:symbol)\nSuccess(\"James Webb Space Telescope\").\n.decl Answer()\nAnswer() :- Telescope(\"James Webb Space Telescope\", function), !Success(\"James Webb Space Telescope\").\n.output Answer"]}
{"id": 92, "answer": true, "completion": ".decl Favorite_book(Person:symbol, Book:symbol)\nFavorite_book(\"P. G. Wodehouse\", \"The Code of the Woosters\").\n.decl Answer()\nAnswer() :- Favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\"), !.\n.output Answer", "completions": [".decl Favorite_book(Person:symbol, Book:symbol)\nFavorite_book(\"P. G. Wodehouse\", \"The Code of the Woosters\").\n.decl Answer()\nAnswer() :- Favorite_book(\"P. G. Wodehouse\", \"The Hunger Games\"), !.\n.output Answer"]}
{"id": 93, "answer": false, "completion": ".decl Has_lorem_ipsum(Website:symbol)\nHas_lorem_ipsum(\"example.com\").\nHas_lorem_ipsum(\"loremipsum.com\").\n.decl Is_finished(Website:symbol)\nIs_finished(\"example.com\").\nIs_finished(\"mywebsite.com\").\n.decl Answer()\nAnswer() :- Has_lorem_ipsum(website), !Is_finished(website).\n.output Answer", "completions": [".decl Has_lorem_ipsum(Website:symbol)\nHas_lorem_ipsum(\"example.com\").\nHas_lorem_ipsum(\"loremipsum.com\").\n.decl Is_finished(Website:symbol)\nIs_finished(\"example.com\").\nIs_finished(\"mywebsite.com\").\n.decl Answer()\nAnswer() :- Has_lorem_ipsum(website), !Is_finished(website).\n.output Answer"]}
{"id": 94, "answer": true, "completion": ".decl Reads(Person:symbol, Newspaper:symbol)\nReads(\"William Shakespeare\", \"none\").\n.decl Answer()\nAnswer() :- !Reads(\"William Shakespeare\", \"Daily Mirror\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Newspaper:symbol)\nReads(\"William Shakespeare\", \"none\").\n.decl Answer()\nAnswer() :- !Reads(\"William Shakespeare\", \"Daily Mirror\").\n.output Answer"]}
{"id": 95, "answer": false, "completion": ".decl Annual_visitors(Restaurant:symbol, N_visitors:float)\nAnnual_visitors(\"Taco Bell\", 10000000).\nAnnual_visitors(\"Roy Rogers\", 5000000).\n.decl Answer()\nAnswer() :- Annual_visitors(\"Taco Bell\", n_visitors1), Annual_visitors(\"Roy Rogers\", n_visitors2), n_visitors1 > n_visitors2.\n.output Answer", "completions": [".decl Annual_visitors(Restaurant:symbol, N_visitors:float)\nAnnual_visitors(\"Taco Bell\", 10000000).\nAnnual_visitors(\"Roy Rogers\", 5000000).\n.decl Answer()\nAnswer() :- Annual_visitors(\"Taco Bell\", n_visitors1), Annual_visitors(\"Roy Rogers\", n_visitors2), n_visitors1 > n_visitors2.\n.output Answer"]}
{"id": 96, "answer": true, "completion": ".decl Temperature(Temperature:float)\nTemperature(0).\n.decl Is_winter(Month:symbol)\nIs_winter(\"December\").\nIs_winter(\"January\").\nIs_winter(\"February\").\n.decl Answer()\nAnswer() :- Is_winter(month), Temperature(temperature), temperature >= 0.\n.output Answer", "completions": [".decl Temperature(Temperature:float)\nTemperature(0).\n.decl Is_winter(Month:symbol)\nIs_winter(\"December\").\nIs_winter(\"January\").\nIs_winter(\"February\").\n.decl Answer()\nAnswer() :- Is_winter(month), Temperature(temperature), temperature >= 0.\n.output Answer"]}
{"id": 97, "answer": false, "completion": ".decl Involved_in_war(Country:symbol, War:symbol)\nInvolved_in_war(\"Serbia\", \"World War I\").\nInvolved_in_war(\"Croatia\", \"Croatian War of Independence\").\nInvolved_in_war(\"United States\", \"American Civil War\").\n.decl Born_in(Person:symbol, Country:symbol)\nBorn_in(\"Nikola Tesla\", \"Austria-Hungary\").\n.decl Answer()\nAnswer() :- Born_in(\"Nikola Tesla\", country), Involved_in_war(country, \"American Civil War\").\n.output Answer", "completions": [".decl Involved_in_war(Country:symbol, War:symbol)\nInvolved_in_war(\"Serbia\", \"World War I\").\nInvolved_in_war(\"Croatia\", \"Croatian War of Independence\").\nInvolved_in_war(\"United States\", \"American Civil War\").\n.decl Born_in(Person:symbol, Country:symbol)\nBorn_in(\"Nikola Tesla\", \"Austria-Hungary\").\n.decl Answer()\nAnswer() :- Born_in(\"Nikola Tesla\", country), Involved_in_war(country, \"American Civil War\").\n.output Answer"]}
{"id": 98, "answer": true, "completion": ".decl Died_young(Person:symbol)\nDied_young(\"Ada Lovelace\").\n.decl Era(Person:symbol, Era:symbol)\nEra(\"Ada Lovelace\", \"Victorian era\").\n.decl Average_life_expectancy(Era:symbol, Age:float)\nAverage_life_expectancy(\"Victorian era\", 40).\n.decl Answer()\nAnswer() :- Died_young(person), Era(person, era), Average_life_expectancy(era, age), age > 0, age < 50.\n.output Answer", "completions": [".decl Died_young(Person:symbol)\nDied_young(\"Ada Lovelace\").\n.decl Era(Person:symbol, Era:symbol)\nEra(\"Ada Lovelace\", \"Victorian era\").\n.decl Average_life_expectancy(Era:symbol, Age:float)\nAverage_life_expectancy(\"Victorian era\", 40).\n.decl Answer()\nAnswer() :- Died_young(person), Era(person, era), Average_life_expectancy(era, age), age > 0, age < 50.\n.output Answer"]}
{"id": 99, "answer": true, "completion": ".decl Has_skill(Animal:symbol, Skill:symbol)\nHas_skill(\"panda\", \"using chopsticks\").\nHas_skill(\"human\", \"using chopsticks\").\n.decl Answer()\nAnswer() :- Has_skill(\"Asian black bear\", skill), skill = \"using chopsticks\", !.\n.output Answer", "completions": [".decl Has_skill(Animal:symbol, Skill:symbol)\nHas_skill(\"panda\", \"using chopsticks\").\nHas_skill(\"human\", \"using chopsticks\").\n.decl Answer()\nAnswer() :- Has_skill(\"Asian black bear\", skill), skill = \"using chopsticks\", !.\n.output Answer"]}
{"id": 100, "answer": false, "completion": ".decl Advertises(Product:symbol, Company:symbol)\nAdvertises(\"time\", \"Toronto Star\").\n.decl Answer()\nAnswer() :- Advertises(\"time\", company).\n.output Answer", "completions": [".decl Advertises(Product:symbol, Company:symbol)\nAdvertises(\"time\", \"Toronto Star\").\n.decl Answer()\nAnswer() :- Advertises(\"time\", company).\n.output Answer"]}
{"id": 101, "answer": false, "completion": ".decl Deaths(Event:symbol, N_deaths:float)\nDeaths(\"Apollo 13 mission\", 3).\nDeaths(\"Challenger disaster\", 7).\nDeaths(\"Columbia disaster\", 7).\n.decl Answer()\nAnswer() :- Deaths(\"Apollo 13 mission\", n_deaths1), Deaths(event2, n_deaths2), event2 != \"Apollo 13 mission\", n_deaths2 > n_deaths1.\n.output Answer", "completions": [".decl Deaths(Event:symbol, N_deaths:float)\nDeaths(\"Apollo 13 mission\", 3).\nDeaths(\"Challenger disaster\", 7).\nDeaths(\"Columbia disaster\", 7).\n.decl Answer()\nAnswer() :- Deaths(\"Apollo 13 mission\", n_deaths1), Deaths(event2, n_deaths2), event2 != \"Apollo 13 mission\", n_deaths2 > n_deaths1.\n.output Answer"]}
{"id": 102, "answer": false, "completion": ".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"Taco Bell\", \"taco\").\nServes(\"Ethiopian Restaurant\", \"injera\").\n.decl Answer()\nAnswer() :- Serves(\"Taco Bell\", dish1), Serves(\"Ethiopian Restaurant\", \"injera\"), dish1 != \"injera\".\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"Taco Bell\", \"taco\").\nServes(\"Ethiopian Restaurant\", \"injera\").\n.decl Answer()\nAnswer() :- Serves(\"Taco Bell\", dish1), Serves(\"Ethiopian Restaurant\", \"injera\"), dish1 != \"injera\".\n.output Answer"]}
{"id": 103, "answer": false, "completion": ".decl Has_relationship(Person1:symbol, Person2:symbol, Relationship:symbol)\nHas_relationship(\"Saladin\", \"Ali Askari\", \"friend\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Saladin\", \"xenophobic\").\nHas_trait(\"Ali Askari\", \"xenophobic\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Saladin\", \"Ali Askari\", relationship), !Has_trait(\"Saladin\", \"xenophobic\"), !Has_trait(\"Ali Askari\", \"xenophobic\").\n.output Answer", "completions": [".decl Has_relationship(Person1:symbol, Person2:symbol, Relationship:symbol)\nHas_relationship(\"Saladin\", \"Ali Askari\", \"friend\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Saladin\", \"xenophobic\").\nHas_trait(\"Ali Askari\", \"xenophobic\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Saladin\", \"Ali Askari\", relationship), !Has_trait(\"Saladin\", \"xenophobic\"), !Has_trait(\"Ali Askari\", \"xenophobic\").\n.output Answer"]}
{"id": 104, "answer": false, "completion": ".decl Likes(Cat:symbol, Food:symbol)\nLikes(\"Sockington\", \"tuna\").\nLikes(\"Sockington\", \"catnip\").\n.decl Answer()\nAnswer() :- Likes(\"Sockington\", \"onions\"), !.\nAnswer() :- Likes(\"Sockington\", food), food != \"onions\".\n.output Answer", "completions": [".decl Likes(Cat:symbol, Food:symbol)\nLikes(\"Sockington\", \"tuna\").\nLikes(\"Sockington\", \"catnip\").\n.decl Answer()\nAnswer() :- Likes(\"Sockington\", \"onions\"), !.\nAnswer() :- Likes(\"Sockington\", food), food != \"onions\".\n.output Answer"]}
{"id": 105, "answer": false, "completion": ".decl Influenced_by(Artist:symbol, Country:symbol)\nInfluenced_by(\"Raphael\", \"Italy\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Raphael\", country), country != \"Guam\".\n.output Answer", "completions": [".decl Influenced_by(Artist:symbol, Country:symbol)\nInfluenced_by(\"Raphael\", \"Italy\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Raphael\", country), country != \"Guam\".\n.output Answer"]}
{"id": 106, "answer": false, "completion": ".decl Born(Person:symbol, Year:float)\nBorn(\"Oscar Wilde\", 1854).\n.decl Died(Person:symbol, Year:float)\nDied(\"Oscar Wilde\", 1900).\n.decl Answer()\nAnswer() :- Born(\"Oscar Wilde\", year), year >= 1885, Died(\"Oscar Wilde\", year2), year <= year2, year2 <= 1910.\n.output Answer", "completions": [".decl Born(Person:symbol, Year:float)\nBorn(\"Oscar Wilde\", 1854).\n.decl Died(Person:symbol, Year:float)\nDied(\"Oscar Wilde\", 1900).\n.decl Answer()\nAnswer() :- Born(\"Oscar Wilde\", year), year >= 1885, Died(\"Oscar Wilde\", year2), year <= year2, year2 <= 1910.\n.output Answer"]}
{"id": 107, "answer": true, "completion": ".decl Requires(Tool:symbol, Task:symbol)\nRequires(\"scalpel\", \"ontology\").\n.decl Answer()\nAnswer() :- Requires(tool, \"ontology\"), tool != \"scalpel\".\n.output Answer", "completions": [".decl Requires(Tool:symbol, Task:symbol)\nRequires(\"scalpel\", \"ontology\").\n.decl Answer()\nAnswer() :- Requires(tool, \"ontology\"), tool != \"scalpel\".\n.output Answer"]}
{"id": 108, "answer": false, "completion": ".decl Attends(Person:symbol, Event:symbol)\nAttends(\"King Arthur\", \"Round Table meetings\").\nAttends(\"Anne Boleyn\", \"her own beheading\").\n.decl Happens_before(Event1:symbol, Event2:symbol)\nHappens_before(\"Round Table meetings\", \"Anne Boleyn's beheading\").\n.decl Answer()\nAnswer() :- Attends(\"King Arthur\", event1), Attends(\"Anne Boleyn\", event2), Happens_before(event1, event2).\n.output Answer", "completions": [".decl Attends(Person:symbol, Event:symbol)\nAttends(\"King Arthur\", \"Round Table meetings\").\nAttends(\"Anne Boleyn\", \"her own beheading\").\n.decl Happens_before(Event1:symbol, Event2:symbol)\nHappens_before(\"Round Table meetings\", \"Anne Boleyn's beheading\").\n.decl Answer()\nAnswer() :- Attends(\"King Arthur\", event1), Attends(\"Anne Boleyn\", event2), Happens_before(event1, event2).\n.output Answer"]}
{"id": 109, "answer": false, "completion": ".decl Supports(Person:symbol, Idea:symbol)\nSupports(\"Alexander Graham Bell\", \"eugenics\").\n.decl Opposes(Person:symbol, Idea:symbol)\nOpposes(\"Albert Einstein\", \"Nazism\").\n.decl Answer()\nAnswer() :- Supports(\"Alexander Graham Bell\", idea1), Opposes(\"Albert Einstein\", idea2), idea1 = \"eugenics\", idea2 = \"Nazism\".\n.output Answer", "completions": [".decl Supports(Person:symbol, Idea:symbol)\nSupports(\"Alexander Graham Bell\", \"eugenics\").\n.decl Opposes(Person:symbol, Idea:symbol)\nOpposes(\"Albert Einstein\", \"Nazism\").\n.decl Answer()\nAnswer() :- Supports(\"Alexander Graham Bell\", idea1), Opposes(\"Albert Einstein\", idea2), idea1 = \"eugenics\", idea2 = \"Nazism\".\n.output Answer"]}
{"id": 110, "answer": false, "completion": ".decl Affected_by_Amendment(President:symbol, Amendment:symbol)\nAffected_by_Amendment(\"Franklin D. Roosevelt\", \"22nd Amendment\").\nAffected_by_Amendment(\"Harry Truman\", \"23rd Amendment\").\n.decl Answer()\nAnswer() :- !Affected_by_Amendment(\"Harry Truman\", \"23rd Amendment\").\n.output Answer", "completions": [".decl Affected_by_Amendment(President:symbol, Amendment:symbol)\nAffected_by_Amendment(\"Franklin D. Roosevelt\", \"22nd Amendment\").\nAffected_by_Amendment(\"Harry Truman\", \"23rd Amendment\").\n.decl Answer()\nAnswer() :- !Affected_by_Amendment(\"Harry Truman\", \"23rd Amendment\").\n.output Answer"]}
{"id": 111, "answer": false, "completion": ".decl Changes_color_in_season(Tree:symbol, Season:symbol)\nChanges_color_in_season(\"maple tree\", \"fall\").\nChanges_color_in_season(\"oak tree\", \"fall\").\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"tree color change\", \"September\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"tree color change\", month), Changes_color_in_season(tree, season), In_season(month, season).\n.output Answer", "completions": [".decl Changes_color_in_season(Tree:symbol, Season:symbol)\nChanges_color_in_season(\"maple tree\", \"fall\").\nChanges_color_in_season(\"oak tree\", \"fall\").\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"tree color change\", \"September\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"tree color change\", month), Changes_color_in_season(tree, season), In_season(month, season).\n.output Answer"]}
{"id": 112, "answer": false, "completion": ".decl Connected_with(Event:symbol, Object:symbol)\nConnected_with(\"Black Lives Matter\", \"social justice\").\nConnected_with(\"capsaicin\", \"spicy food\").\n.decl Answer()\nAnswer() :- Connected_with(\"Black Lives Matter\", object), Connected_with(\"capsaicin\", object).\n.output Answer", "completions": [".decl Connected_with(Event:symbol, Object:symbol)\nConnected_with(\"Black Lives Matter\", \"social justice\").\nConnected_with(\"capsaicin\", \"spicy food\").\n.decl Answer()\nAnswer() :- Connected_with(\"Black Lives Matter\", object), Connected_with(\"capsaicin\", object).\n.output Answer"]}
{"id": 113, "answer": false, "completion": ".decl Direct_descendent(Ancestor:symbol, Descendent:symbol)\nDirect_descendent(\"Gaia\", \"Achilles' mother\").\nDirect_descendent(\"Achilles' mother\", \"Achilles\").\n.decl Answer()\nAnswer() :- Direct_descendent(\"Gaia\", descendent), Direct_descendent(descendent, \"Achilles\").\n.output Answer", "completions": [".decl Direct_descendent(Ancestor:symbol, Descendent:symbol)\nDirect_descendent(\"Gaia\", \"Achilles' mother\").\nDirect_descendent(\"Achilles' mother\", \"Achilles\").\n.decl Answer()\nAnswer() :- Direct_descendent(\"Gaia\", descendent), Direct_descendent(descendent, \"Achilles\").\n.output Answer"]}
{"id": 114, "answer": false, "completion": ".decl Hangs_out(Person:symbol, Location:symbol)\nHangs_out(\"Jerry Seinfeld\", \"Comedy Cellar\").\nHangs_out(\"Jerry Seinfeld\", \"Tom's Restaurant\").\nHangs_out(\"Tom Brady\", \"Budweiser Party Deck\").\n.decl Answer()\nAnswer() :- Hangs_out(\"Jerry Seinfeld\", location1), Hangs_out(\"Tom Brady\", location2), location1 = location2, location1 = \"Budweiser Party Deck\".\n.output Answer", "completions": [".decl Hangs_out(Person:symbol, Location:symbol)\nHangs_out(\"Jerry Seinfeld\", \"Comedy Cellar\").\nHangs_out(\"Jerry Seinfeld\", \"Tom's Restaurant\").\nHangs_out(\"Tom Brady\", \"Budweiser Party Deck\").\n.decl Answer()\nAnswer() :- Hangs_out(\"Jerry Seinfeld\", location1), Hangs_out(\"Tom Brady\", location2), location1 = location2, location1 = \"Budweiser Party Deck\".\n.output Answer"]}
{"id": 115, "answer": false, "completion": ".decl Has_body_part(Animal:symbol, Body_part:symbol)\nHas_body_part(\"sand cat\", \"ear\").\n.decl Object_size(Object:symbol, Size:float)\nObject_size(\"basketball\", 0.75).\n.decl Body_part_size(Animal:symbol, Body_part:symbol, Size:float)\nBody_part_size(\"sand cat\", \"ear\", 0.05).\n.decl Answer()\nAnswer() :- Object_size(object, size), Body_part_size(\"sand cat\", \"ear\", size2), size < size2.\n.output Answer", "completions": [".decl Has_body_part(Animal:symbol, Body_part:symbol)\nHas_body_part(\"sand cat\", \"ear\").\n.decl Object_size(Object:symbol, Size:float)\nObject_size(\"basketball\", 0.75).\n.decl Body_part_size(Animal:symbol, Body_part:symbol, Size:float)\nBody_part_size(\"sand cat\", \"ear\", 0.05).\n.decl Answer()\nAnswer() :- Object_size(object, size), Body_part_size(\"sand cat\", \"ear\", size2), size < size2.\n.output Answer"]}
{"id": 116, "answer": false, "completion": ".decl Competes_in(Sport:symbol, Team:symbol)\nCompetes_in(\"soccer\", \"Spice Girls\").\nCompetes_in(\"handball\", \"ŽRK Kumanovo\").\n.decl Answer()\nAnswer() :- Competes_in(sport1, \"Spice Girls\"), Competes_in(sport2, \"ŽRK Kumanovo\"), sport1 = sport2.\n.output Answer", "completions": [".decl Competes_in(Sport:symbol, Team:symbol)\nCompetes_in(\"soccer\", \"Spice Girls\").\nCompetes_in(\"handball\", \"ŽRK Kumanovo\").\n.decl Answer()\nAnswer() :- Competes_in(sport1, \"Spice Girls\"), Competes_in(sport2, \"ŽRK Kumanovo\"), sport1 = sport2.\n.output Answer"]}
{"id": 117, "answer": false, "completion": ".decl Has_meaning(Symbol:symbol, Meaning:symbol)\nHas_meaning(\"swastika\", \"positive\").\nHas_meaning(\"swastika\", \"negative\").\nHas_meaning(\"swastika\", \"neutral\").\n.decl Answer()\nAnswer() :- Has_meaning(\"swastika\", \"positive\"), !Has_meaning(\"swastika\", \"negative\").\n.output Answer", "completions": [".decl Has_meaning(Symbol:symbol, Meaning:symbol)\nHas_meaning(\"swastika\", \"positive\").\nHas_meaning(\"swastika\", \"negative\").\nHas_meaning(\"swastika\", \"neutral\").\n.decl Answer()\nAnswer() :- Has_meaning(\"swastika\", \"positive\"), !Has_meaning(\"swastika\", \"negative\").\n.output Answer"]}
{"id": 118, "answer": true, "completion": ".decl Appears_in_movie(Actor:symbol, Movie:symbol)\nAppears_in_movie(\"Jeff Goldblum\", \"The Fly\").\nAppears_in_movie(\"Black fly\", \"The Fly\").\n.decl Outshines(Insect_A:symbol, Insect_B:symbol)\nOutshines(\"butterfly\", \"Black fly\").\nOutshines(\"mosquito\", \"Black fly\").\nOutshines(\"dragonfly\", \"Black fly\").\n.decl Answer()\nAnswer() :- Appears_in_movie(\"Jeff Goldblum\", movie), Appears_in_movie(\"Black fly\", movie), Outshines(insect, \"Black fly\"), Outshines(insect, \"Black fly\"), insect != \"Black fly\".\n.output Answer", "completions": [".decl Appears_in_movie(Actor:symbol, Movie:symbol)\nAppears_in_movie(\"Jeff Goldblum\", \"The Fly\").\nAppears_in_movie(\"Black fly\", \"The Fly\").\n.decl Outshines(Insect_A:symbol, Insect_B:symbol)\nOutshines(\"butterfly\", \"Black fly\").\nOutshines(\"mosquito\", \"Black fly\").\nOutshines(\"dragonfly\", \"Black fly\").\n.decl Answer()\nAnswer() :- Appears_in_movie(\"Jeff Goldblum\", movie), Appears_in_movie(\"Black fly\", movie), Outshines(insect, \"Black fly\"), Outshines(insect, \"Black fly\"), insect != \"Black fly\".\n.output Answer"]}
{"id": 119, "answer": false, "completion": ".decl Edited_by(Editor:symbol, Author:symbol)\nEdited_by(\"Linnaeus\", \"Darwin\").\nEdited_by(\"Huxley\", \"Darwin\").\n.decl Answer()\nAnswer() :- Edited_by(\"Linnaeus\", \"Origin of Species\").\n.output Answer", "completions": [".decl Edited_by(Editor:symbol, Author:symbol)\nEdited_by(\"Linnaeus\", \"Darwin\").\nEdited_by(\"Huxley\", \"Darwin\").\n.decl Answer()\nAnswer() :- Edited_by(\"Linnaeus\", \"Origin of Species\").\n.output Answer"]}
{"id": 120, "answer": true, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"cancer\").\n.decl Receives_benefits(Person:symbol, Benefit:symbol)\nReceives_benefits(\"John\", \"disability\").\n.decl Answer()\nAnswer() :- Has_condition(person, \"cancer\"), !Receives_benefits(person, \"disability\").\nAnswer() :- !Has_condition(person, \"cancer\").\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"cancer\").\n.decl Receives_benefits(Person:symbol, Benefit:symbol)\nReceives_benefits(\"John\", \"disability\").\n.decl Answer()\nAnswer() :- Has_condition(person, \"cancer\"), !Receives_benefits(person, \"disability\").\nAnswer() :- !Has_condition(person, \"cancer\").\n.output Answer"]}
{"id": 121, "answer": true, "completion": ".decl Influences(Person1:symbol, Person2:symbol)\nInfluences(\"Helen Palmer\", \"Dr. Seuss\").\n.decl Significant_event(Event:symbol)\nSignificant_event(\"death of Helen Palmer\").\n.decl Answer()\nAnswer() :- Influences(\"Helen Palmer\", \"Dr. Seuss\"), Significant_event(event), event = \"death of Helen Palmer\".\n.output Answer", "completions": [".decl Influences(Person1:symbol, Person2:symbol)\nInfluences(\"Helen Palmer\", \"Dr. Seuss\").\n.decl Significant_event(Event:symbol)\nSignificant_event(\"death of Helen Palmer\").\n.decl Answer()\nAnswer() :- Influences(\"Helen Palmer\", \"Dr. Seuss\"), Significant_event(event), event = \"death of Helen Palmer\".\n.output Answer"]}
{"id": 122, "answer": true, "completion": ".decl Has_disease(Animal:symbol, Disease:symbol)\nHas_disease(\"human\", \"Tonsillitis\").\nHas_disease(\"fish\", \"Ichthyophthirius multifiliis\").\n.decl Answer()\nAnswer() :- Has_disease(\"fish\", \"Tonsillitis\").\n.output Answer", "completions": [".decl Has_disease(Animal:symbol, Disease:symbol)\nHas_disease(\"human\", \"Tonsillitis\").\nHas_disease(\"fish\", \"Ichthyophthirius multifiliis\").\n.decl Answer()\nAnswer() :- Has_disease(\"fish\", \"Tonsillitis\").\n.output Answer"]}
{"id": 123, "answer": false, "completion": ".decl Mode_of_transportation(Transportation:symbol)\nMode_of_transportation(\"Mayflower\").\nMode_of_transportation(\"car\").\nMode_of_transportation(\"plane\").\n.decl Takes_place_in(Event:symbol, Location:symbol)\nTakes_place_in(\"Burning Man\", \"Black Rock Desert\").\n.decl Answer()\nAnswer() :- Mode_of_transportation(transportation), transportation = \"Mayflower\", !Takes_place_in(\"Burning Man\", \"Black Rock Desert\").\nAnswer() :- Mode_of_transportation(transportation), transportation != \"Mayflower\", Takes_place_in(\"Burning Man\", \"Black Rock Desert\").\n.output Answer", "completions": [".decl Mode_of_transportation(Transportation:symbol)\nMode_of_transportation(\"Mayflower\").\nMode_of_transportation(\"car\").\nMode_of_transportation(\"plane\").\n.decl Takes_place_in(Event:symbol, Location:symbol)\nTakes_place_in(\"Burning Man\", \"Black Rock Desert\").\n.decl Answer()\nAnswer() :- Mode_of_transportation(transportation), transportation = \"Mayflower\", !Takes_place_in(\"Burning Man\", \"Black Rock Desert\").\nAnswer() :- Mode_of_transportation(transportation), transportation != \"Mayflower\", Takes_place_in(\"Burning Man\", \"Black Rock Desert\").\n.output Answer"]}
{"id": 124, "answer": true, "completion": ".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Lupita Nyongo\", \"Kenya\").\n.decl Has_origin(Person:symbol, Origin:symbol)\nHas_origin(\"Barack Obama\", \"Kenya\").\n.decl Family_relation(Person1:symbol, Person2:symbol, Relation:symbol)\nFamily_relation(\"Barack Obama\", \"Lupita Nyongo\", \"paternal\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Lupita Nyongo\", country1), Has_origin(\"Barack Obama\", country2), Family_relation(\"Barack Obama\", \"Lupita Nyongo\", \"paternal\"), country1 = country2.\n.output Answer", "completions": [".decl Has_citizenship(Person:symbol, Country:symbol)\nHas_citizenship(\"Lupita Nyongo\", \"Kenya\").\n.decl Has_origin(Person:symbol, Origin:symbol)\nHas_origin(\"Barack Obama\", \"Kenya\").\n.decl Family_relation(Person1:symbol, Person2:symbol, Relation:symbol)\nFamily_relation(\"Barack Obama\", \"Lupita Nyongo\", \"paternal\").\n.decl Answer()\nAnswer() :- Has_citizenship(\"Lupita Nyongo\", country1), Has_origin(\"Barack Obama\", country2), Family_relation(\"Barack Obama\", \"Lupita Nyongo\", \"paternal\"), country1 = country2.\n.output Answer"]}
{"id": 125, "answer": false, "completion": ".decl Has_n_records(Artist:symbol, N_records:float)\nHas_n_records(\"Johnny Cash\", 1000000).\n.decl Population(Country:symbol, Population:float)\nPopulation(\"France\", 67000000).\n.decl Answer()\nAnswer() :- Has_n_records(\"Johnny Cash\", n_records), Population(\"France\", population), n_records >= population.\n.output Answer", "completions": [".decl Has_n_records(Artist:symbol, N_records:float)\nHas_n_records(\"Johnny Cash\", 1000000).\n.decl Population(Country:symbol, Population:float)\nPopulation(\"France\", 67000000).\n.decl Answer()\nAnswer() :- Has_n_records(\"Johnny Cash\", n_records), Population(\"France\", population), n_records >= population.\n.output Answer"]}
{"id": 126, "answer": false, "completion": ".decl Smells_like(Food:symbol, Smell:symbol)\nSmells_like(\"brussels sprouts\", \"sulfur\").\n.decl Answer()\nAnswer() :- Smells_like(\"brussels sprouts\", smell), smell = \"sulfur\".\n.output Answer", "completions": [".decl Smells_like(Food:symbol, Smell:symbol)\nSmells_like(\"brussels sprouts\", \"sulfur\").\n.decl Answer()\nAnswer() :- Smells_like(\"brussels sprouts\", smell), smell = \"sulfur\".\n.output Answer"]}
{"id": 127, "answer": false, "completion": ".decl Can_apply(Finisher:symbol, Animal:symbol)\nCan_apply(\"Stone Cold Stunner\", \"human\").\nCan_apply(\"RKO\", \"human\").\nCan_apply(\"Pedigree\", \"human\").\n.decl Answer()\nAnswer() :- Can_apply(finisher, \"mule deer\"), !Can_apply(finisher, \"human\").\n.output Answer", "completions": [".decl Can_apply(Finisher:symbol, Animal:symbol)\nCan_apply(\"Stone Cold Stunner\", \"human\").\nCan_apply(\"RKO\", \"human\").\nCan_apply(\"Pedigree\", \"human\").\n.decl Answer()\nAnswer() :- Can_apply(finisher, \"mule deer\"), !Can_apply(finisher, \"human\").\n.output Answer"]}
{"id": 128, "answer": false, "completion": ".decl In_relationship(Person1:symbol, Person2:symbol)\nIn_relationship(\"Harley Quinn\", \"Joker\").\n.decl Healthy(Person:symbol)\nHealthy(\"Harley Quinn\").\n.decl Answer()\nAnswer() :- In_relationship(\"Joker\", partner), Healthy(partner).\n.output Answer", "completions": [".decl In_relationship(Person1:symbol, Person2:symbol)\nIn_relationship(\"Harley Quinn\", \"Joker\").\n.decl Healthy(Person:symbol)\nHealthy(\"Harley Quinn\").\n.decl Answer()\nAnswer() :- In_relationship(\"Joker\", partner), Healthy(partner).\n.output Answer"]}
{"id": 129, "answer": true, "completion": ".decl Is_traditional_boat(Boat:symbol, Country:symbol)\nIs_traditional_boat(\"kayak\", \"Greenland\").\nIs_traditional_boat(\"outrigger canoe\", \"New Zealand\").\nIs_traditional_boat(\"dugout canoe\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Is_traditional_boat(\"kayak\", country1), Is_traditional_boat(\"outrigger canoe\", country2), Is_traditional_boat(\"dugout canoe\", country2), country1 = country2, country1 = \"New Zealand\".\n.output Answer", "completions": [".decl Is_traditional_boat(Boat:symbol, Country:symbol)\nIs_traditional_boat(\"kayak\", \"Greenland\").\nIs_traditional_boat(\"outrigger canoe\", \"New Zealand\").\nIs_traditional_boat(\"dugout canoe\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Is_traditional_boat(\"kayak\", country1), Is_traditional_boat(\"outrigger canoe\", country2), Is_traditional_boat(\"dugout canoe\", country2), country1 = country2, country1 = \"New Zealand\".\n.output Answer"]}
{"id": 130, "answer": false, "completion": ".decl Watches(Person:symbol, Event:symbol)\nWatches(\"Boris Yeltsin\", \"1996 Summer Olympics\").\n.decl Year(Event:symbol, Year:float)\nYear(\"1996 Summer Olympics\", 1996).\nYear(\"2008 Summer Olympics\", 2008).\n.decl Answer()\nAnswer() :- Watches(\"Boris Yeltsin\", event), Year(event, year), year = 2008.\n.output Answer", "completions": [".decl Watches(Person:symbol, Event:symbol)\nWatches(\"Boris Yeltsin\", \"1996 Summer Olympics\").\n.decl Year(Event:symbol, Year:float)\nYear(\"1996 Summer Olympics\", 1996).\nYear(\"2008 Summer Olympics\", 2008).\n.decl Answer()\nAnswer() :- Watches(\"Boris Yeltsin\", event), Year(event, year), year = 2008.\n.output Answer"]}
{"id": 131, "answer": false, "completion": ".decl Appears_in_movie(Animal:symbol, Movie:symbol)\nAppears_in_movie(\"swallow\", \"Monty Python and the Holy Grail\").\n.decl Answer()\nAnswer() :- Appears_in_movie(\"swallow\", \"Monty Python and the Holy Grail\").\n.output Answer", "completions": [".decl Appears_in_movie(Animal:symbol, Movie:symbol)\nAppears_in_movie(\"swallow\", \"Monty Python and the Holy Grail\").\n.decl Answer()\nAnswer() :- Appears_in_movie(\"swallow\", \"Monty Python and the Holy Grail\").\n.output Answer"]}
{"id": 132, "answer": false, "completion": ".decl Attends(Person:symbol, University:symbol)\nAttends(\"Michael Crichton\", \"Harvard University\").\n.decl Grades(Person:symbol, Course:symbol, Grade:float)\nGrades(\"Michael Crichton\", \"Biology\", 2.5).\nGrades(\"Michael Crichton\", \"English\", 3.7).\n.decl Answer()\nAnswer() :- Attends(\"Michael Crichton\", \"Harvard University\"), Grades(\"Michael Crichton\", course, grade), grade < 2.0.\n.output Answer", "completions": [".decl Attends(Person:symbol, University:symbol)\nAttends(\"Michael Crichton\", \"Harvard University\").\n.decl Grades(Person:symbol, Course:symbol, Grade:float)\nGrades(\"Michael Crichton\", \"Biology\", 2.5).\nGrades(\"Michael Crichton\", \"English\", 3.7).\n.decl Answer()\nAnswer() :- Attends(\"Michael Crichton\", \"Harvard University\"), Grades(\"Michael Crichton\", course, grade), grade < 2.0.\n.output Answer"]}
{"id": 133, "answer": false, "completion": ".decl Popular(Activity:symbol, Year:float)\nPopular(\"Surfing\", 1995).\n.decl Came_out(Item:symbol, Year:float)\nCame_out(\"pogs\", 1994).\n.decl Answer()\nAnswer() :- Popular(\"Surfing\", year1), Came_out(\"pogs\", year2), year1 >= year2.\n.output Answer", "completions": [".decl Popular(Activity:symbol, Year:float)\nPopular(\"Surfing\", 1995).\n.decl Came_out(Item:symbol, Year:float)\nCame_out(\"pogs\", 1994).\n.decl Answer()\nAnswer() :- Popular(\"Surfing\", year1), Came_out(\"pogs\", year2), year1 >= year2.\n.output Answer"]}
{"id": 134, "answer": false, "completion": ".decl Located_at(Animal:symbol, Location:symbol)\nLocated_at(\"caracal\", \"Africa\").\nLocated_at(\"caracal\", \"Asia\").\nLocated_at(\"caracal\", \"Middle East\").\nLocated_at(\"caracal\", \"India\").\nLocated_at(\"caracal\", \"Iran\").\nLocated_at(\"caracal\", \"Saudi Arabia\").\nLocated_at(\"caracal\", \"University of Houston\").\n.decl Answer()\nAnswer() :- Located_at(\"caracal\", location), Located_at(\"student\", location), Located_at(\"University of Houston\", location).\n.output Answer", "completions": [".decl Located_at(Animal:symbol, Location:symbol)\nLocated_at(\"caracal\", \"Africa\").\nLocated_at(\"caracal\", \"Asia\").\nLocated_at(\"caracal\", \"Middle East\").\nLocated_at(\"caracal\", \"India\").\nLocated_at(\"caracal\", \"Iran\").\nLocated_at(\"caracal\", \"Saudi Arabia\").\nLocated_at(\"caracal\", \"University of Houston\").\n.decl Answer()\nAnswer() :- Located_at(\"caracal\", location), Located_at(\"student\", location), Located_at(\"University of Houston\", location).\n.output Answer"]}
{"id": 135, "answer": false, "completion": ".decl Collaborates_with(Person1:symbol, Person2:symbol)\nCollaborates_with(\"Coen brothers\", \"George Clooney\").\nCollaborates_with(\"Coen brothers\", \"Frances McDormand\").\nCollaborates_with(\"Tim Burton\", \"Brothers Grimm\").\nCollaborates_with(\"Terry Gilliam\", \"Brothers Grimm\").\n.decl Answer()\nAnswer() :- Collaborates_with(\"Coen brothers\", person1), Collaborates_with(\"Brothers Grimm\", person2), person1 = person2.\n.output Answer", "completions": [".decl Collaborates_with(Person1:symbol, Person2:symbol)\nCollaborates_with(\"Coen brothers\", \"George Clooney\").\nCollaborates_with(\"Coen brothers\", \"Frances McDormand\").\nCollaborates_with(\"Tim Burton\", \"Brothers Grimm\").\nCollaborates_with(\"Terry Gilliam\", \"Brothers Grimm\").\n.decl Answer()\nAnswer() :- Collaborates_with(\"Coen brothers\", person1), Collaborates_with(\"Brothers Grimm\", person2), person1 = person2.\n.output Answer"]}
{"id": 136, "answer": true, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"lolcat\", 0.0001).\nHas_volume(\"first generation iPhone\", 0.0000864).\n.decl Answer()\nAnswer() :- Has_volume(\"lolcat\", volume1), Has_volume(\"first generation iPhone\", volume2), volume1 * 100000 <= volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"lolcat\", 0.0001).\nHas_volume(\"first generation iPhone\", 0.0000864).\n.decl Answer()\nAnswer() :- Has_volume(\"lolcat\", volume1), Has_volume(\"first generation iPhone\", volume2), volume1 * 100000 <= volume2.\n.output Answer"]}
{"id": 137, "answer": false, "completion": ".decl Forbidden(Activity:symbol, Group:symbol)\nForbidden(\"warfare\", \"monks\").\n.decl Answer()\nAnswer() :- Forbidden(activity, \"monks\"), activity = \"warfare\".\n.output Answer", "completions": [".decl Forbidden(Activity:symbol, Group:symbol)\nForbidden(\"warfare\", \"monks\").\n.decl Answer()\nAnswer() :- Forbidden(activity, \"monks\"), activity = \"warfare\".\n.output Answer"]}
{"id": 138, "answer": true, "completion": ".decl Hosted_in(Service:symbol, Location:symbol)\nHosted_in(\"BBC World Service\", \"London\").\n.decl Answer()\nAnswer() :- Hosted_in(\"BBC World Service\", \"Europe\").\n.output Answer", "completions": [".decl Hosted_in(Service:symbol, Location:symbol)\nHosted_in(\"BBC World Service\", \"London\").\n.decl Answer()\nAnswer() :- Hosted_in(\"BBC World Service\", \"Europe\").\n.output Answer"]}
{"id": 139, "answer": false, "completion": ".decl Is_leap_year(Year:float)\nIs_leap_year(1996).\n.decl Age_in_years(Birth_year:float, Current_year:float, Age:float)\nAge_in_years(birth_year, current_year, age) :- age = current_year - birth_year.\n.decl Answer()\nAnswer() :- Is_leap_year(birth_year), Age_in_years(birth_year, 2000, age), age = 1.\n.output Answer", "completions": [".decl Is_leap_year(Year:float)\nIs_leap_year(1996).\n.decl Age_in_years(Birth_year:float, Current_year:float, Age:float)\nAge_in_years(birth_year, current_year, age) :- age = current_year - birth_year.\n.decl Answer()\nAnswer() :- Is_leap_year(birth_year), Age_in_years(birth_year, 2000, age), age = 1.\n.output Answer"]}
{"id": 140, "answer": true, "completion": ".decl Married_to(Person:symbol, Partner:symbol)\nMarried_to(\"Clark Gable\", \"Carole Lombard\").\nMarried_to(\"Clark Gable\", \"Lady Sylvia Ashley\").\nMarried_to(\"Clark Gable\", \"Kay Williams\").\nMarried_to(\"Richard Burton\", \"Sybil Williams\").\nMarried_to(\"Richard Burton\", \"Elizabeth Taylor\").\n.decl Answer()\nAnswer() :- Married_to(\"Clark Gable\", partner1), Married_to(\"Richard Burton\", partner2), partner1 != partner2, count{Married_to(\"Clark Gable\", partner3)} > count{Married_to(\"Richard Burton\", partner4)}.\n.output Answer", "completions": [".decl Married_to(Person:symbol, Partner:symbol)\nMarried_to(\"Clark Gable\", \"Carole Lombard\").\nMarried_to(\"Clark Gable\", \"Lady Sylvia Ashley\").\nMarried_to(\"Clark Gable\", \"Kay Williams\").\nMarried_to(\"Richard Burton\", \"Sybil Williams\").\nMarried_to(\"Richard Burton\", \"Elizabeth Taylor\").\n.decl Answer()\nAnswer() :- Married_to(\"Clark Gable\", partner1), Married_to(\"Richard Burton\", partner2), partner1 != partner2, count{Married_to(\"Clark Gable\", partner3)} > count{Married_to(\"Richard Burton\", partner4)}.\n.output Answer"]}
{"id": 141, "answer": true, "completion": ".decl Has_brain(Animal:symbol)\nHas_brain(\"squid\").\n.decl Can_kill_with_one_shot(Gun:symbol, Animal:symbol)\nCan_kill_with_one_shot(\"double-barreled shotgun\", \"squid\").\n.decl Answer()\nAnswer() :- Can_kill_with_one_shot(gun, \"squid\"), !Has_brain(\"squid\").\n.output Answer", "completions": [".decl Has_brain(Animal:symbol)\nHas_brain(\"squid\").\n.decl Can_kill_with_one_shot(Gun:symbol, Animal:symbol)\nCan_kill_with_one_shot(\"double-barreled shotgun\", \"squid\").\n.decl Answer()\nAnswer() :- Can_kill_with_one_shot(gun, \"squid\"), !Has_brain(\"squid\").\n.output Answer"]}
{"id": 142, "answer": false, "completion": ".decl Needs_item(Person:symbol, Item:symbol)\nNeeds_item(\"pregnant women\", \"new shoes\").\n.decl Frequency(Item:symbol, Frequency:symbol)\nFrequency(\"new shoes\", \"often\").\n.decl Answer()\nAnswer() :- Needs_item(\"pregnant women\", item), Frequency(item, \"often\").\n.output Answer", "completions": [".decl Needs_item(Person:symbol, Item:symbol)\nNeeds_item(\"pregnant women\", \"new shoes\").\n.decl Frequency(Item:symbol, Frequency:symbol)\nFrequency(\"new shoes\", \"often\").\n.decl Answer()\nAnswer() :- Needs_item(\"pregnant women\", item), Frequency(item, \"often\").\n.output Answer"]}
{"id": 143, "answer": true, "completion": ".decl Adheres_to_religion(Person:symbol, Religion:symbol)\nAdheres_to_religion(\"John\", \"Christianity\").\nAdheres_to_religion(\"Mary\", \"Christianity\").\nAdheres_to_religion(\"Li\", \"Christianity\").\n.decl Historic_enemy(Religion1:symbol, Religion2:symbol)\nHistoric_enemy(\"Christianity\", \"Catholic Church\").\n.decl Answer()\nAnswer() :- Adheres_to_religion(person, \"Christianity\"), Historic_enemy(\"Christianity\", religion2), Adheres_to_religion(person, religion2).\n.output Answer", "completions": [".decl Adheres_to_religion(Person:symbol, Religion:symbol)\nAdheres_to_religion(\"John\", \"Christianity\").\nAdheres_to_religion(\"Mary\", \"Christianity\").\nAdheres_to_religion(\"Li\", \"Christianity\").\n.decl Historic_enemy(Religion1:symbol, Religion2:symbol)\nHistoric_enemy(\"Christianity\", \"Catholic Church\").\n.decl Answer()\nAnswer() :- Adheres_to_religion(person, \"Christianity\"), Historic_enemy(\"Christianity\", religion2), Adheres_to_religion(person, religion2).\n.output Answer"]}
{"id": 144, "answer": false, "completion": ".decl Successor(Name:symbol, Successor:symbol)\nSuccessor(\"Chevrolet Cruze\", \"Chevrolet Orlando\").\n.decl Located_in(Town:symbol, Distance_from_Milan:float)\nLocated_in(\"Orlando\", 8696).\nLocated_in(\"Beijing\", 8263).\nLocated_in(\"Milan\", 0).\n.decl Answer()\nAnswer() :- Successor(\"Chevrolet Cruze\", successor), Located_in(successor, distance), distance > 5000, Located_in(town, distance_from_milan), town != \"Milan\", distance_from_milan > distance.\n.output Answer", "completions": [".decl Successor(Name:symbol, Successor:symbol)\nSuccessor(\"Chevrolet Cruze\", \"Chevrolet Orlando\").\n.decl Located_in(Town:symbol, Distance_from_Milan:float)\nLocated_in(\"Orlando\", 8696).\nLocated_in(\"Beijing\", 8263).\nLocated_in(\"Milan\", 0).\n.decl Answer()\nAnswer() :- Successor(\"Chevrolet Cruze\", successor), Located_in(successor, distance), distance > 5000, Located_in(town, distance_from_milan), town != \"Milan\", distance_from_milan > distance.\n.output Answer"]}
{"id": 145, "answer": false, "completion": ".decl Has_strength(Order:symbol, Strength:float)\nHas_strength(\"Dominican Order\", 100).\nHas_strength(\"Blessed Gerard's Order\", 50).\n.decl Answer()\nAnswer() :- Has_strength(\"Dominican Order\", strength1), Has_strength(\"Blessed Gerard's Order\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Order:symbol, Strength:float)\nHas_strength(\"Dominican Order\", 100).\nHas_strength(\"Blessed Gerard's Order\", 50).\n.decl Answer()\nAnswer() :- Has_strength(\"Dominican Order\", strength1), Has_strength(\"Blessed Gerard's Order\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 146, "answer": true, "completion": ".decl Suitable_for(Object:symbol, Use:symbol)\nSuitable_for(\"pottery kiln\", \"pottery\").\nSuitable_for(\"glass blowing furnace\", \"glass blowing\").\n.decl Inappropriate_for(Object:symbol, Use:symbol)\nInappropriate_for(object, use) :- Suitable_for(object, use2), use != use2.\n.decl Answer()\nAnswer() :- Inappropriate_for(\"pottery kiln\", \"glass blowing\").\n.output Answer", "completions": [".decl Suitable_for(Object:symbol, Use:symbol)\nSuitable_for(\"pottery kiln\", \"pottery\").\nSuitable_for(\"glass blowing furnace\", \"glass blowing\").\n.decl Inappropriate_for(Object:symbol, Use:symbol)\nInappropriate_for(object, use) :- Suitable_for(object, use2), use != use2.\n.decl Answer()\nAnswer() :- Inappropriate_for(\"pottery kiln\", \"glass blowing\").\n.output Answer"]}
{"id": 147, "answer": false, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Japan\", 126.5).\nHas_population(\"Albania\", 2.9).\nHas_population(\"Bosnia and Herzegovina\", 3.3).\nHas_population(\"Bulgaria\", 7).\nHas_population(\"Croatia\", 4).\nHas_population(\"Greece\", 10.7).\nHas_population(\"Kosovo\", 1.8).\nHas_population(\"Montenegro\", 0.6).\nHas_population(\"North Macedonia\", 2.1).\nHas_population(\"Romania\", 19.5).\nHas_population(\"Serbia\", 7).\nHas_population(\"Slovenia\", 2).\n.decl Answer()\nAnswer() :- Has_population(\"Japan\", population1), Has_population(country, population2), population2 >= population1.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Japan\", 126.5).\nHas_population(\"Albania\", 2.9).\nHas_population(\"Bosnia and Herzegovina\", 3.3).\nHas_population(\"Bulgaria\", 7).\nHas_population(\"Croatia\", 4).\nHas_population(\"Greece\", 10.7).\nHas_population(\"Kosovo\", 1.8).\nHas_population(\"Montenegro\", 0.6).\nHas_population(\"North Macedonia\", 2.1).\nHas_population(\"Romania\", 19.5).\nHas_population(\"Serbia\", 7).\nHas_population(\"Slovenia\", 2).\n.decl Answer()\nAnswer() :- Has_population(\"Japan\", population1), Has_population(country, population2), population2 >= population1.\n.output Answer"]}
{"id": 148, "answer": false, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"Steven Spielberg\", 10).\n.decl Has_technology(Person:symbol, Technology:symbol)\nHas_technology(\"Steven Spielberg\", \"email\").\n.decl Answer()\nAnswer() :- Age(\"Steven Spielberg\", age), Has_technology(\"Steven Spielberg\", technology), age >= 18, technology = \"email\".\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"Steven Spielberg\", 10).\n.decl Has_technology(Person:symbol, Technology:symbol)\nHas_technology(\"Steven Spielberg\", \"email\").\n.decl Answer()\nAnswer() :- Age(\"Steven Spielberg\", age), Has_technology(\"Steven Spielberg\", technology), age >= 18, technology = \"email\".\n.output Answer"]}
{"id": 149, "answer": false, "completion": ".decl Buried_at(Person:symbol, Location:symbol)\nBuried_at(\"Charles Manson\", \"Corcoran State Prison\").\n.decl Wanted(Person:symbol)\nWanted(\"Charles Manson\").\n.decl Answer()\nAnswer() :- Buried_at(\"Charles Manson\", location), !Wanted(\"Charles Manson\").\n.output Answer", "completions": [".decl Buried_at(Person:symbol, Location:symbol)\nBuried_at(\"Charles Manson\", \"Corcoran State Prison\").\n.decl Wanted(Person:symbol)\nWanted(\"Charles Manson\").\n.decl Answer()\nAnswer() :- Buried_at(\"Charles Manson\", location), !Wanted(\"Charles Manson\").\n.output Answer"]}
{"id": 150, "answer": false, "completion": ".decl Tooth_size(Animal:symbol, Size:float)\nTooth_size(\"Beaver\", 0.5).\nTooth_size(\"Smilodon\", 7).\n.decl Answer()\nAnswer() :- Tooth_size(\"Beaver\", size1), Tooth_size(\"Smilodon\", size2), size1 >= size2.\n.output Answer", "completions": [".decl Tooth_size(Animal:symbol, Size:float)\nTooth_size(\"Beaver\", 0.5).\nTooth_size(\"Smilodon\", 7).\n.decl Answer()\nAnswer() :- Tooth_size(\"Beaver\", size1), Tooth_size(\"Smilodon\", size2), size1 >= size2.\n.output Answer"]}
{"id": 151, "answer": true, "completion": ".decl Treatable_with_surgery(Condition:symbol)\nTreatable_with_surgery(\"appendicitis\").\nTreatable_with_surgery(\"prostate cancer\").\n.decl Treatable_without_surgery(Condition:symbol)\nTreatable_without_surgery(\"pelvic dysphoria\").\nTreatable_without_surgery(\"depression\").\n.decl Answer()\nAnswer() :- Treatable_without_surgery(condition), !Treatable_with_surgery(condition).\n.output Answer", "completions": [".decl Treatable_with_surgery(Condition:symbol)\nTreatable_with_surgery(\"appendicitis\").\nTreatable_with_surgery(\"prostate cancer\").\n.decl Treatable_without_surgery(Condition:symbol)\nTreatable_without_surgery(\"pelvic dysphoria\").\nTreatable_without_surgery(\"depression\").\n.decl Answer()\nAnswer() :- Treatable_without_surgery(condition), !Treatable_with_surgery(condition).\n.output Answer"]}
{"id": 152, "answer": true, "completion": ".decl Supports(Group:symbol, Action:symbol)\nSupports(\"Blue Lives Matter\", \"law enforcement\").\nSupports(\"Blue Lives Matter\", \"respect for police\").\n.decl Includes(Element:symbol, Feature:symbol)\nIncludes(\"Grand Theft Auto III\", \"car theft\").\nIncludes(\"Grand Theft Auto III\", \"violence\").\n.decl Answer()\nAnswer() :- Supports(\"Blue Lives Matter\", feature), !Includes(\"Grand Theft Auto III\", feature).\nAnswer() :- !Supports(\"Blue Lives Matter\", action), Includes(\"Grand Theft Auto III\", action).\n.output Answer", "completions": [".decl Supports(Group:symbol, Action:symbol)\nSupports(\"Blue Lives Matter\", \"law enforcement\").\nSupports(\"Blue Lives Matter\", \"respect for police\").\n.decl Includes(Element:symbol, Feature:symbol)\nIncludes(\"Grand Theft Auto III\", \"car theft\").\nIncludes(\"Grand Theft Auto III\", \"violence\").\n.decl Answer()\nAnswer() :- Supports(\"Blue Lives Matter\", feature), !Includes(\"Grand Theft Auto III\", feature).\nAnswer() :- !Supports(\"Blue Lives Matter\", action), Includes(\"Grand Theft Auto III\", action).\n.output Answer"]}
{"id": 153, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Dalai Lama\", 1.7).\nHas_size(\"car\", 4).\n.decl Answer()\nAnswer() :- Has_size(\"Dalai Lama\", size1), Has_size(\"car\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Dalai Lama\", 1.7).\nHas_size(\"car\", 4).\n.decl Answer()\nAnswer() :- Has_size(\"Dalai Lama\", size1), Has_size(\"car\", size2), size1 <= size2.\n.output Answer"]}
{"id": 154, "answer": false, "completion": ".decl Wins(Person:symbol, Contest:symbol, Year:float)\nWins(\"Dafne Keen\", \"Eurovision Song Contest\", 2020).\n.decl Answer()\nAnswer() :- Wins(\"Dafne Keen\", \"Eurovision Song Contest\", year), year = 2020.\n.output Answer", "completions": [".decl Wins(Person:symbol, Contest:symbol, Year:float)\nWins(\"Dafne Keen\", \"Eurovision Song Contest\", 2020).\n.decl Answer()\nAnswer() :- Wins(\"Dafne Keen\", \"Eurovision Song Contest\", year), year = 2020.\n.output Answer"]}
{"id": 155, "answer": false, "completion": ".decl Has_incident(Airline:symbol)\nHas_incident(\"United Airlines\").\n.decl Answer()\nAnswer() :- !Has_incident(\"United Airlines\").\n.output Answer", "completions": [".decl Has_incident(Airline:symbol)\nHas_incident(\"United Airlines\").\n.decl Answer()\nAnswer() :- !Has_incident(\"United Airlines\").\n.output Answer"]}
{"id": 156, "answer": true, "completion": ".decl Can_be_arrested(Person:symbol, Country:symbol)\nCan_be_arrested(\"United States Secretary of State\", \"U.K.\").\n.decl Answer()\nAnswer() :- !Can_be_arrested(\"United States Secretary of State\", \"U.K.\").\n.output Answer", "completions": [".decl Can_be_arrested(Person:symbol, Country:symbol)\nCan_be_arrested(\"United States Secretary of State\", \"U.K.\").\n.decl Answer()\nAnswer() :- !Can_be_arrested(\"United States Secretary of State\", \"U.K.\").\n.output Answer"]}
{"id": 157, "answer": false, "completion": ".decl Is_related_to(Disease_A:symbol, Disease_B:symbol)\nIs_related_to(\"myocardial infarction\", \"heart disease\").\nIs_related_to(\"Alzheimer's disease\", \"brain disease\").\n.decl Answer()\nAnswer() :- Is_related_to(\"myocardial infarction\", \"brain disease\").\n.output Answer", "completions": [".decl Is_related_to(Disease_A:symbol, Disease_B:symbol)\nIs_related_to(\"myocardial infarction\", \"heart disease\").\nIs_related_to(\"Alzheimer's disease\", \"brain disease\").\n.decl Answer()\nAnswer() :- Is_related_to(\"myocardial infarction\", \"brain disease\").\n.output Answer"]}
{"id": 158, "answer": false, "completion": ".decl Open_on_day(Restaurant:symbol, Day:symbol)\nOpen_on_day(\"Chick Fil A\", \"Monday\").\nOpen_on_day(\"Chick Fil A\", \"Tuesday\").\nOpen_on_day(\"Chick Fil A\", \"Wednesday\").\nOpen_on_day(\"Chick Fil A\", \"Thursday\").\nOpen_on_day(\"Chick Fil A\", \"Friday\").\nOpen_on_day(\"Chick Fil A\", \"Saturday\").\n.decl Answer()\nAnswer() :- Open_on_day(\"Chick Fil A\", \"October 31, 2021\").\n.output Answer", "completions": [".decl Open_on_day(Restaurant:symbol, Day:symbol)\nOpen_on_day(\"Chick Fil A\", \"Monday\").\nOpen_on_day(\"Chick Fil A\", \"Tuesday\").\nOpen_on_day(\"Chick Fil A\", \"Wednesday\").\nOpen_on_day(\"Chick Fil A\", \"Thursday\").\nOpen_on_day(\"Chick Fil A\", \"Friday\").\nOpen_on_day(\"Chick Fil A\", \"Saturday\").\n.decl Answer()\nAnswer() :- Open_on_day(\"Chick Fil A\", \"October 31, 2021\").\n.output Answer"]}
{"id": 159, "answer": false, "completion": ".decl Believes(Person:symbol, Idea:symbol)\nBelieves(\"Godfrey of Bouillon\", \"reclaiming the Holy Land from Muslims\").\n.decl Opposes(Person:symbol, Idea:symbol)\nOpposes(\"Godfrey of Bouillon\", \"Muslim rule in the Holy Land\").\n.decl Answer()\nAnswer() :- Believes(\"Godfrey of Bouillon\", idea), Opposes(\"Godfrey of Bouillon\", idea), idea = \"Islamaphobia\".\n.output Answer", "completions": [".decl Believes(Person:symbol, Idea:symbol)\nBelieves(\"Godfrey of Bouillon\", \"reclaiming the Holy Land from Muslims\").\n.decl Opposes(Person:symbol, Idea:symbol)\nOpposes(\"Godfrey of Bouillon\", \"Muslim rule in the Holy Land\").\n.decl Answer()\nAnswer() :- Believes(\"Godfrey of Bouillon\", idea), Opposes(\"Godfrey of Bouillon\", idea), idea = \"Islamaphobia\".\n.output Answer"]}
{"id": 160, "answer": false, "completion": ".decl Likelihood(Event:symbol, Likelihood:float)\nLikelihood(\"espresso\", 0.8).\n.decl Relieves_symptom(Treatment:symbol, Symptom:symbol)\nRelieves_symptom(\"espresso\", \"anxiety\").\n.decl Answer()\nAnswer() :- Likelihood(\"espresso\", likelihood), Relieves_symptom(\"espresso\", symptom), likelihood > 0.5.\n.output Answer", "completions": [".decl Likelihood(Event:symbol, Likelihood:float)\nLikelihood(\"espresso\", 0.8).\n.decl Relieves_symptom(Treatment:symbol, Symptom:symbol)\nRelieves_symptom(\"espresso\", \"anxiety\").\n.decl Answer()\nAnswer() :- Likelihood(\"espresso\", likelihood), Relieves_symptom(\"espresso\", symptom), likelihood > 0.5.\n.output Answer"]}
{"id": 161, "answer": false, "completion": ".decl Is_made_of(Food:symbol, Ingredient:symbol)\nIs_made_of(\"rice pudding\", \"rice\").\nIs_made_of(\"rice pudding\", \"milk\").\n.decl Answer()\nAnswer() :- Is_made_of(\"rice pudding\", \"rice\"), Is_made_of(\"rice pudding\", \"milk\"), Is_made_of(\"horchata\", \"rice\"), Is_made_of(\"horchata\", \"water\").\n.output Answer", "completions": [".decl Is_made_of(Food:symbol, Ingredient:symbol)\nIs_made_of(\"rice pudding\", \"rice\").\nIs_made_of(\"rice pudding\", \"milk\").\n.decl Answer()\nAnswer() :- Is_made_of(\"rice pudding\", \"rice\"), Is_made_of(\"rice pudding\", \"milk\"), Is_made_of(\"horchata\", \"rice\"), Is_made_of(\"horchata\", \"water\").\n.output Answer"]}
{"id": 162, "answer": false, "completion": ".decl Graduates(Person:symbol, University:symbol, Honors:symbol)\nGraduates(\"Bill Gates\", \"Harvard University\", \"none\").\n.decl Answer()\nAnswer() :- Graduates(\"Bill Gates\", \"Harvard University\", \"summa cum laude\").\nAnswer() :- Graduates(\"Bill Gates\", \"Harvard University\", \"magna cum laude\").\nAnswer() :- Graduates(\"Bill Gates\", \"Harvard University\", \"cum laude\").\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol, Honors:symbol)\nGraduates(\"Bill Gates\", \"Harvard University\", \"none\").\n.decl Answer()\nAnswer() :- Graduates(\"Bill Gates\", \"Harvard University\", \"summa cum laude\").\nAnswer() :- Graduates(\"Bill Gates\", \"Harvard University\", \"magna cum laude\").\nAnswer() :- Graduates(\"Bill Gates\", \"Harvard University\", \"cum laude\").\n.output Answer"]}
{"id": 163, "answer": true, "completion": ".decl Invented_in_format(Genre:symbol, Format:symbol)\nInvented_in_format(\"Superhero fiction\", \"comic book\").\nInvented_in_format(\"Science fiction\", \"digital\").\nInvented_in_format(\"Romance\", \"novel\").\n.decl Answer()\nAnswer() :- Invented_in_format(\"Superhero fiction\", format), format != \"digital\".\n.output Answer", "completions": [".decl Invented_in_format(Genre:symbol, Format:symbol)\nInvented_in_format(\"Superhero fiction\", \"comic book\").\nInvented_in_format(\"Science fiction\", \"digital\").\nInvented_in_format(\"Romance\", \"novel\").\n.decl Answer()\nAnswer() :- Invented_in_format(\"Superhero fiction\", format), format != \"digital\".\n.output Answer"]}
{"id": 164, "answer": true, "completion": ".decl Belongs_to_category(Animal:symbol, Category:symbol)\nBelongs_to_category(\"rat\", \"Chordata\").\nBelongs_to_category(\"ox\", \"Chordata\").\nBelongs_to_category(\"tiger\", \"Chordata\").\nBelongs_to_category(\"rabbit\", \"Chordata\").\nBelongs_to_category(\"dragon\", \"Chordata\").\nBelongs_to_category(\"snake\", \"Chordata\").\nBelongs_to_category(\"horse\", \"Chordata\").\nBelongs_to_category(\"sheep\", \"Chordata\").\nBelongs_to_category(\"monkey\", \"Chordata\").\nBelongs_to_category(\"rooster\", \"Chordata\").\nBelongs_to_category(\"dog\", \"Chordata\").\nBelongs_to_category(\"pig\", \"Chordata\").\n.decl Answer()\nAnswer() :- Belongs_to_category(animal, \"Chordata\").\n.output Answer", "completions": [".decl Belongs_to_category(Animal:symbol, Category:symbol)\nBelongs_to_category(\"rat\", \"Chordata\").\nBelongs_to_category(\"ox\", \"Chordata\").\nBelongs_to_category(\"tiger\", \"Chordata\").\nBelongs_to_category(\"rabbit\", \"Chordata\").\nBelongs_to_category(\"dragon\", \"Chordata\").\nBelongs_to_category(\"snake\", \"Chordata\").\nBelongs_to_category(\"horse\", \"Chordata\").\nBelongs_to_category(\"sheep\", \"Chordata\").\nBelongs_to_category(\"monkey\", \"Chordata\").\nBelongs_to_category(\"rooster\", \"Chordata\").\nBelongs_to_category(\"dog\", \"Chordata\").\nBelongs_to_category(\"pig\", \"Chordata\").\n.decl Answer()\nAnswer() :- Belongs_to_category(animal, \"Chordata\").\n.output Answer"]}
{"id": 165, "answer": false, "completion": ".decl Occurs_in(Book:symbol, Chapter:float, Event:symbol)\nOccurs_in(\"Daniel\", 6, \"thrown into the lion's den\").\nOccurs_in(\"Daniel\", 1, \"creation of the world\").\nOccurs_in(\"Matthew\", 4, \"temptation of Jesus\").\n.decl In_testament(Book:symbol, Testament:symbol)\nIn_testament(\"Daniel\", \"Old Testament\").\nIn_testament(\"Matthew\", \"New Testament\").\n.decl Answer()\nAnswer() :- Occurs_in(\"Daniel\", chapter, \"thrown into the lion's den\"), In_testament(\"Daniel\", \"New Testament\").\n.output Answer", "completions": [".decl Occurs_in(Book:symbol, Chapter:float, Event:symbol)\nOccurs_in(\"Daniel\", 6, \"thrown into the lion's den\").\nOccurs_in(\"Daniel\", 1, \"creation of the world\").\nOccurs_in(\"Matthew\", 4, \"temptation of Jesus\").\n.decl In_testament(Book:symbol, Testament:symbol)\nIn_testament(\"Daniel\", \"Old Testament\").\nIn_testament(\"Matthew\", \"New Testament\").\n.decl Answer()\nAnswer() :- Occurs_in(\"Daniel\", chapter, \"thrown into the lion's den\"), In_testament(\"Daniel\", \"New Testament\").\n.output Answer"]}
{"id": 166, "answer": true, "completion": ".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"2020 elephant pregnancy\", 645).\n.decl Happens_n_times_in_year(Event:symbol, N_times:float)\nHappens_n_times_in_year(\"solar eclipse\", 4).\n.decl Answer()\nAnswer() :- Lasts_n_days(\"2020 elephant pregnancy\", n_days1), Happens_n_times_in_year(\"solar eclipse\", n_times), n_days1 > n_times*365.\n.output Answer", "completions": [".decl Lasts_n_days(Event:symbol, N_days:float)\nLasts_n_days(\"2020 elephant pregnancy\", 645).\n.decl Happens_n_times_in_year(Event:symbol, N_times:float)\nHappens_n_times_in_year(\"solar eclipse\", 4).\n.decl Answer()\nAnswer() :- Lasts_n_days(\"2020 elephant pregnancy\", n_days1), Happens_n_times_in_year(\"solar eclipse\", n_times), n_days1 > n_times*365.\n.output Answer"]}
{"id": 167, "answer": true, "completion": ".decl Has_meaning_in_language(Word:symbol, Language:symbol)\nHas_meaning_in_language(\"swastika\", \"Sanskrit\").\n.decl Answer()\nAnswer() :- Has_meaning_in_language(\"swastika\", \"Sanskrit\").\n.output Answer", "completions": [".decl Has_meaning_in_language(Word:symbol, Language:symbol)\nHas_meaning_in_language(\"swastika\", \"Sanskrit\").\n.decl Answer()\nAnswer() :- Has_meaning_in_language(\"swastika\", \"Sanskrit\").\n.output Answer"]}
{"id": 168, "answer": false, "completion": ".decl Competes(Company:symbol, Console:symbol)\nCompetes(\"Sony\", \"PlayStation\").\nCompetes(\"Sega\", \"Dreamcast\").\n.decl Wins(Company:symbol)\nWins(\"Sony\") :- Competes(\"Sony\", console1), Competes(\"Sega\", console2), console1 != console2.\n.decl Answer()\nAnswer() :- Wins(\"Sony\").\n.output Answer", "completions": [".decl Competes(Company:symbol, Console:symbol)\nCompetes(\"Sony\", \"PlayStation\").\nCompetes(\"Sega\", \"Dreamcast\").\n.decl Wins(Company:symbol)\nWins(\"Sony\") :- Competes(\"Sony\", console1), Competes(\"Sega\", console2), console1 != console2.\n.decl Answer()\nAnswer() :- Wins(\"Sony\").\n.output Answer"]}
{"id": 169, "answer": false, "completion": ".decl Teaches(Professor:symbol, Class:symbol)\nTeaches(\"ethics professor\", \"ethics class\").\n.decl Covers(Class:symbol, Topic:symbol)\nCovers(\"ethics class\", \"moral philosophy\").\nCovers(\"art class\", \"Cezanne\").\n.decl Answer()\nAnswer() :- Teaches(\"ethics professor\", class), Covers(class, \"Cezanne\").\n.output Answer", "completions": [".decl Teaches(Professor:symbol, Class:symbol)\nTeaches(\"ethics professor\", \"ethics class\").\n.decl Covers(Class:symbol, Topic:symbol)\nCovers(\"ethics class\", \"moral philosophy\").\nCovers(\"art class\", \"Cezanne\").\n.decl Answer()\nAnswer() :- Teaches(\"ethics professor\", class), Covers(class, \"Cezanne\").\n.output Answer"]}
{"id": 170, "answer": true, "completion": ".decl Can_write_diary(Animal:symbol)\nCan_write_diary(\"human\").\nCan_write_diary(\"monkey\").\nCan_write_diary(\"parrot\").\n.decl Answer()\nAnswer() :- Can_write_diary(animal), animal != \"dolphin\".\n.output Answer", "completions": [".decl Can_write_diary(Animal:symbol)\nCan_write_diary(\"human\").\nCan_write_diary(\"monkey\").\nCan_write_diary(\"parrot\").\n.decl Answer()\nAnswer() :- Can_write_diary(animal), animal != \"dolphin\".\n.output Answer"]}
{"id": 171, "answer": true, "completion": ".decl Happens_before(Event1:symbol, Event2:symbol)\nHappens_before(\"Columbus' expedition\", \"discovery of Durian trees\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Columbus' expedition\", \"Caribbean\").\nHappens_in_place(\"discovery of Durian trees\", \"Southeast Asia\").\n.decl Answer()\nAnswer() :- Happens_before(\"Columbus' expedition\", \"discovery of Durian trees\").\nAnswer() :- Happens_in_place(\"Columbus' expedition\", place1), Happens_in_place(\"discovery of Durian trees\", place2), place1 != place2.\n.output Answer", "completions": [".decl Happens_before(Event1:symbol, Event2:symbol)\nHappens_before(\"Columbus' expedition\", \"discovery of Durian trees\").\n.decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Columbus' expedition\", \"Caribbean\").\nHappens_in_place(\"discovery of Durian trees\", \"Southeast Asia\").\n.decl Answer()\nAnswer() :- Happens_before(\"Columbus' expedition\", \"discovery of Durian trees\").\nAnswer() :- Happens_in_place(\"Columbus' expedition\", place1), Happens_in_place(\"discovery of Durian trees\", place2), place1 != place2.\n.output Answer"]}
{"id": 172, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Chrysler\", 500).\nHas_size(\"laptop bag\", 20).\n.decl Answer()\nAnswer() :- Has_size(\"Chrysler\", size1), Has_size(\"laptop bag\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Chrysler\", 500).\nHas_size(\"laptop bag\", 20).\n.decl Answer()\nAnswer() :- Has_size(\"Chrysler\", size1), Has_size(\"laptop bag\", size2), size1 <= size2.\n.output Answer"]}
{"id": 173, "answer": true, "completion": ".decl Survived(Astronaut:symbol)\nSurvived(\"Neil Armstrong\").\nSurvived(\"Buzz Aldrin\").\nSurvived(\"Sally Ride\").\n.decl Journey(Astronaut:symbol, Destination:symbol)\nJourney(\"Neil Armstrong\", \"Moon\").\nJourney(\"Buzz Aldrin\", \"Moon\").\nJourney(\"Sally Ride\", \"Space Shuttle\").\n.decl Answer()\nAnswer() :- Journey(astronaut, destination), !Survived(astronaut).\nAnswer() :- Journey(astronaut, destination), Survived(astronaut).\n.output Answer", "completions": [".decl Survived(Astronaut:symbol)\nSurvived(\"Neil Armstrong\").\nSurvived(\"Buzz Aldrin\").\nSurvived(\"Sally Ride\").\n.decl Journey(Astronaut:symbol, Destination:symbol)\nJourney(\"Neil Armstrong\", \"Moon\").\nJourney(\"Buzz Aldrin\", \"Moon\").\nJourney(\"Sally Ride\", \"Space Shuttle\").\n.decl Answer()\nAnswer() :- Journey(astronaut, destination), !Survived(astronaut).\nAnswer() :- Journey(astronaut, destination), Survived(astronaut).\n.output Answer"]}
{"id": 174, "answer": true, "completion": ".decl Has_term_length(Position:symbol, Term_length:float)\nHas_term_length(\"Supreme Court Justice\", 20).\nHas_term_length(\"Senator\", 6).\n.decl Answer()\nAnswer() :- Has_term_length(\"Supreme Court Justice\", term_length1), Has_term_length(\"Senator\", term_length2), term_length1 > term_length2.\n.output Answer", "completions": [".decl Has_term_length(Position:symbol, Term_length:float)\nHas_term_length(\"Supreme Court Justice\", 20).\nHas_term_length(\"Senator\", 6).\n.decl Answer()\nAnswer() :- Has_term_length(\"Supreme Court Justice\", term_length1), Has_term_length(\"Senator\", term_length2), term_length1 > term_length2.\n.output Answer"]}
{"id": 175, "answer": true, "completion": ".decl Placed_in_circle(Person:symbol, Circle:float)\nPlaced_in_circle(\"Dante\", 3).\n.decl Predicted_futures(Person:symbol, N_futures:float)\nPredicted_futures(\"Nostradamus\", 1000).\n.decl Answer()\nAnswer() :- Placed_in_circle(\"Dante\", circle), Predicted_futures(\"Nostradamus\", n_futures), n_futures >= circle*100.\n.output Answer", "completions": [".decl Placed_in_circle(Person:symbol, Circle:float)\nPlaced_in_circle(\"Dante\", 3).\n.decl Predicted_futures(Person:symbol, N_futures:float)\nPredicted_futures(\"Nostradamus\", 1000).\n.decl Answer()\nAnswer() :- Placed_in_circle(\"Dante\", circle), Predicted_futures(\"Nostradamus\", n_futures), n_futures >= circle*100.\n.output Answer"]}
{"id": 176, "answer": true, "completion": ".decl Associated_with(Company:symbol, Group:symbol)\nAssociated_with(\"Mercedes-Benz\", \"Nazis\").\n.decl Answer()\nAnswer() :- Associated_with(\"Mercedes-Benz\", \"Nazis\").\n.output Answer", "completions": [".decl Associated_with(Company:symbol, Group:symbol)\nAssociated_with(\"Mercedes-Benz\", \"Nazis\").\n.decl Answer()\nAnswer() :- Associated_with(\"Mercedes-Benz\", \"Nazis\").\n.output Answer"]}
{"id": 177, "answer": true, "completion": ".decl Has_size(Resort:symbol, Size:float)\nHas_size(\"Disneyland Paris\", 4800).\nHas_size(\"Walt Disney World\", 25000).\nHas_size(\"Tokyo Disney Resort\", 2010).\nHas_size(\"Hong Kong Disneyland Resort\", 310).\nHas_size(\"Shanghai Disney Resort\", 3900).\n.decl Answer()\nAnswer() :- Has_size(\"Disneyland Paris\", size1), Has_size(resort2, size2), size1 >= size2, resort2 != \"Disneyland Paris\".\n.output Answer", "completions": [".decl Has_size(Resort:symbol, Size:float)\nHas_size(\"Disneyland Paris\", 4800).\nHas_size(\"Walt Disney World\", 25000).\nHas_size(\"Tokyo Disney Resort\", 2010).\nHas_size(\"Hong Kong Disneyland Resort\", 310).\nHas_size(\"Shanghai Disney Resort\", 3900).\n.decl Answer()\nAnswer() :- Has_size(\"Disneyland Paris\", size1), Has_size(resort2, size2), size1 >= size2, resort2 != \"Disneyland Paris\".\n.output Answer"]}
{"id": 178, "answer": false, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Rockette\", \"dancer\").\n.decl Looks_odd_with_trait(Person:symbol, Trait:symbol)\nLooks_odd_with_trait(\"Rockette\", \"moustache\").\n.decl Answer()\nAnswer() :- Has_trait(\"Rockette\", trait), Looks_odd_with_trait(\"Rockette\", trait).\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Rockette\", \"dancer\").\n.decl Looks_odd_with_trait(Person:symbol, Trait:symbol)\nLooks_odd_with_trait(\"Rockette\", \"moustache\").\n.decl Answer()\nAnswer() :- Has_trait(\"Rockette\", trait), Looks_odd_with_trait(\"Rockette\", trait).\n.output Answer"]}
{"id": 179, "answer": false, "completion": ".decl Can_play(Sport:symbol, Animal:symbol)\nCan_play(\"tennis\", \"human\").\nCan_play(\"swimming\", \"sea turtle\").\n.decl Answer()\nAnswer() :- Can_play(\"tennis\", animal), Can_play(\"tennis racket\", object), Can_play(object, animal).\n.output Answer", "completions": [".decl Can_play(Sport:symbol, Animal:symbol)\nCan_play(\"tennis\", \"human\").\nCan_play(\"swimming\", \"sea turtle\").\n.decl Answer()\nAnswer() :- Can_play(\"tennis\", animal), Can_play(\"tennis racket\", object), Can_play(object, animal).\n.output Answer"]}
{"id": 180, "answer": false, "completion": ".decl Came_up_with_idea(Person:symbol, Idea:symbol)\nCame_up_with_idea(\"Donald Trump\", \"Trump Tower\").\nCame_up_with_idea(\"Robert Moses\", \"New York Harbor\").\n.decl Answer()\nAnswer() :- Came_up_with_idea(\"Donald Trump\", idea), idea = \"New York Harbor\", !.\nAnswer() :- Came_up_with_idea(\"Robert Moses\", \"New York Harbor\").\n.output Answer", "completions": [".decl Came_up_with_idea(Person:symbol, Idea:symbol)\nCame_up_with_idea(\"Donald Trump\", \"Trump Tower\").\nCame_up_with_idea(\"Robert Moses\", \"New York Harbor\").\n.decl Answer()\nAnswer() :- Came_up_with_idea(\"Donald Trump\", idea), idea = \"New York Harbor\", !.\nAnswer() :- Came_up_with_idea(\"Robert Moses\", \"New York Harbor\").\n.output Answer"]}
{"id": 181, "answer": false, "completion": ".decl Legal(Use:symbol)\nLegal(\"paypal\").\n.decl Illegal(Use:symbol)\nIllegal(\"drug deals\").\n.decl Answer()\nAnswer() :- Legal(use1), Illegal(use2), use1 = use2, !.\nAnswer() :- Legal(use).\n.output Answer", "completions": [".decl Legal(Use:symbol)\nLegal(\"paypal\").\n.decl Illegal(Use:symbol)\nIllegal(\"drug deals\").\n.decl Answer()\nAnswer() :- Legal(use1), Illegal(use2), use1 = use2, !.\nAnswer() :- Legal(use).\n.output Answer"]}
{"id": 182, "answer": true, "completion": ".decl Is_edible(Food:symbol)\n!Is_edible(\"kidney\").\n.decl Answer()\nAnswer() :- Is_edible(\"kidney\").\n.output Answer", "completions": [".decl Is_edible(Food:symbol)\n!Is_edible(\"kidney\").\n.decl Answer()\nAnswer() :- Is_edible(\"kidney\").\n.output Answer"]}
{"id": 183, "answer": false, "completion": ".decl Cooking_time(Food:symbol, Time:float)\nCooking_time(\"shrimp\", 5).\n.decl Taste(Food:symbol, Taste:symbol)\nTaste(\"shrimp\", \"delicious\").\n.decl Answer()\nAnswer() :- Cooking_time(\"shrimp\", time), time > 30, Taste(\"shrimp\", \"delicious\").\n.output Answer", "completions": [".decl Cooking_time(Food:symbol, Time:float)\nCooking_time(\"shrimp\", 5).\n.decl Taste(Food:symbol, Taste:symbol)\nTaste(\"shrimp\", \"delicious\").\n.decl Answer()\nAnswer() :- Cooking_time(\"shrimp\", time), time > 30, Taste(\"shrimp\", \"delicious\").\n.output Answer"]}
{"id": 184, "answer": true, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"African elephant\", 6000).\nHas_weight(\"Hulk\", 635).\n.decl Answer()\nAnswer() :- Has_weight(\"African elephant\", weight1), Has_weight(\"Hulk\", weight2), weight2 > weight1.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"African elephant\", 6000).\nHas_weight(\"Hulk\", 635).\n.decl Answer()\nAnswer() :- Has_weight(\"African elephant\", weight1), Has_weight(\"Hulk\", weight2), weight2 > weight1.\n.output Answer"]}
{"id": 185, "answer": false, "completion": ".decl Founded(Place:symbol, Year:float)\nFounded(\"USA\", 1776).\nFounded(\"Oxford University\", 1096).\nFounded(\"Harvard University\", 1636).\nFounded(\"University of Melbourne\", 1853).\n.decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Rupert Murdoch\", \"Worcester College, Oxford\").\n.decl Answer()\nAnswer() :- Graduates(\"Rupert Murdoch\", university), Founded(university, year1), Founded(\"USA\", year2), year1 > year2.\n.output Answer", "completions": [".decl Founded(Place:symbol, Year:float)\nFounded(\"USA\", 1776).\nFounded(\"Oxford University\", 1096).\nFounded(\"Harvard University\", 1636).\nFounded(\"University of Melbourne\", 1853).\n.decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Rupert Murdoch\", \"Worcester College, Oxford\").\n.decl Answer()\nAnswer() :- Graduates(\"Rupert Murdoch\", university), Founded(university, year1), Founded(\"USA\", year2), year1 > year2.\n.output Answer"]}
{"id": 186, "answer": false, "completion": ".decl Named_after(Planet:symbol, Name:symbol)\nNamed_after(\"Saturn\", \"Roman god of agriculture\").\nNamed_after(\"Jupiter\", \"Roman king of gods\").\nNamed_after(\"Mars\", \"Roman god of war\").\nNamed_after(\"Venus\", \"Roman goddess of love\").\n.decl Answer()\nAnswer() :- Named_after(\"Saturn\", name), name = \"Roman king of gods\".\n.output Answer", "completions": [".decl Named_after(Planet:symbol, Name:symbol)\nNamed_after(\"Saturn\", \"Roman god of agriculture\").\nNamed_after(\"Jupiter\", \"Roman king of gods\").\nNamed_after(\"Mars\", \"Roman god of war\").\nNamed_after(\"Venus\", \"Roman goddess of love\").\n.decl Answer()\nAnswer() :- Named_after(\"Saturn\", name), name = \"Roman king of gods\".\n.output Answer"]}
{"id": 187, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"American Independence Day\", \"July 4th\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\nIn_season(\"September\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"American Independence Day\", month), In_season(month, \"autumn\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"American Independence Day\", \"July 4th\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"July\", \"summer\").\nIn_season(\"August\", \"summer\").\nIn_season(\"September\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"American Independence Day\", month), In_season(month, \"autumn\").\n.output Answer"]}
{"id": 188, "answer": true, "completion": ".decl Population(City:symbol, Population:float)\nPopulation(\"Albany, Georgia\", 57946).\nPopulation(\"Albany, New York\", 97856).\nPopulation(\"Albany, Oregon\", 54150).\n.decl Answer()\nAnswer() :- Population(\"Albany, Georgia\", population1), Population(city2, population2), population1 >= population2, city2 != \"Albany, Georgia\".\n.output Answer", "completions": [".decl Population(City:symbol, Population:float)\nPopulation(\"Albany, Georgia\", 57946).\nPopulation(\"Albany, New York\", 97856).\nPopulation(\"Albany, Oregon\", 54150).\n.decl Answer()\nAnswer() :- Population(\"Albany, Georgia\", population1), Population(city2, population2), population1 >= population2, city2 != \"Albany, Georgia\".\n.output Answer"]}
{"id": 189, "answer": true, "completion": ".decl From_region(Person:symbol, Region:symbol)\nFrom_region(\"Janus Friis\", \"Europe\").\nFrom_region(\"Niklas Zennström\", \"Europe\").\nFrom_region(\"Ahti Heinla\", \"Europe\").\nFrom_region(\"Priit Kasesalu\", \"Europe\").\nFrom_region(\"Toivo Annus\", \"Europe\").\nFrom_region(\"Jaak Tallinn\", \"Europe\").\n.decl Answer()\nAnswer() :- From_region(\"Janus Friis\", region), From_region(\"Niklas Zennström\", region), region != \"Asia\".\n.output Answer", "completions": [".decl From_region(Person:symbol, Region:symbol)\nFrom_region(\"Janus Friis\", \"Europe\").\nFrom_region(\"Niklas Zennström\", \"Europe\").\nFrom_region(\"Ahti Heinla\", \"Europe\").\nFrom_region(\"Priit Kasesalu\", \"Europe\").\nFrom_region(\"Toivo Annus\", \"Europe\").\nFrom_region(\"Jaak Tallinn\", \"Europe\").\n.decl Answer()\nAnswer() :- From_region(\"Janus Friis\", region), From_region(\"Niklas Zennström\", region), region != \"Asia\".\n.output Answer"]}
{"id": 190, "answer": false, "completion": ".decl Days_in_year(Year:symbol, N_days:float)\nDays_in_year(\"2022\", 365).\n.decl Time_to_read(Book:symbol, Time:float)\nTime_to_read(\"Bible\", 120).\n.decl Answer()\nAnswer() :- Days_in_year(year, n_days), Time_to_read(\"Bible\", time), time * 15 <= n_days, Happens_in_time(\"Wednesday\", month), In_season(month, \"winter\").\n.output Answer", "completions": [".decl Days_in_year(Year:symbol, N_days:float)\nDays_in_year(\"2022\", 365).\n.decl Time_to_read(Book:symbol, Time:float)\nTime_to_read(\"Bible\", 120).\n.decl Answer()\nAnswer() :- Days_in_year(year, n_days), Time_to_read(\"Bible\", time), time * 15 <= n_days, Happens_in_time(\"Wednesday\", month), In_season(month, \"winter\").\n.output Answer"]}
{"id": 191, "answer": false, "completion": ".decl Retires(Person:symbol, Year:float)\nRetires(\"Eugene Allen\", 1986).\n.decl Ends(Event:symbol, Year:float)\nEnds(\"Thirty Years' War\", 1648).\n.decl Answer()\nAnswer() :- Retires(\"Eugene Allen\", year), Ends(\"Thirty Years' War\", end_year), year = end_year.\n.output Answer", "completions": [".decl Retires(Person:symbol, Year:float)\nRetires(\"Eugene Allen\", 1986).\n.decl Ends(Event:symbol, Year:float)\nEnds(\"Thirty Years' War\", 1648).\n.decl Answer()\nAnswer() :- Retires(\"Eugene Allen\", year), Ends(\"Thirty Years' War\", end_year), year = end_year.\n.output Answer"]}
{"id": 192, "answer": true, "completion": ".decl Fasts(Person:symbol, Month:symbol)\nFasts(\"writer of Christmas carol\", \"December\").\nFasts(\"writer of Christmas carol\", \"Ramadan\").\n.decl Answer()\nAnswer() :- Fasts(\"writer of Christmas carol\", \"Ramadan\").\n.output Answer", "completions": [".decl Fasts(Person:symbol, Month:symbol)\nFasts(\"writer of Christmas carol\", \"December\").\nFasts(\"writer of Christmas carol\", \"Ramadan\").\n.decl Answer()\nAnswer() :- Fasts(\"writer of Christmas carol\", \"Ramadan\").\n.output Answer"]}
{"id": 193, "answer": false, "completion": ".decl Lifespan(Tree:symbol, Lifespan:float)\nLifespan(\"bristlecone pine\", 5000).\nLifespan(\"oak\", 1000).\n.decl Answer()\nAnswer() :- Lifespan(tree, lifespan), lifespan > 2019.\n.output Answer", "completions": [".decl Lifespan(Tree:symbol, Lifespan:float)\nLifespan(\"bristlecone pine\", 5000).\nLifespan(\"oak\", 1000).\n.decl Answer()\nAnswer() :- Lifespan(tree, lifespan), lifespan > 2019.\n.output Answer"]}
{"id": 194, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Tange Sazen\", \"sword fighting\").\n.decl Ideal_for_job(Person:symbol, Job:symbol)\nIdeal_for_job(\"Tange Sazen\", \"bodyguard\").\n.decl Answer()\nAnswer() :- Ideal_for_job(\"Tange Sazen\", job), Has_skill(\"Tange Sazen\", skill), job != skill.\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Tange Sazen\", \"sword fighting\").\n.decl Ideal_for_job(Person:symbol, Job:symbol)\nIdeal_for_job(\"Tange Sazen\", \"bodyguard\").\n.decl Answer()\nAnswer() :- Ideal_for_job(\"Tange Sazen\", job), Has_skill(\"Tange Sazen\", skill), job != skill.\n.output Answer"]}
{"id": 195, "answer": true, "completion": ".decl Good_for_condition(Food:symbol, Condition:symbol)\nGood_for_condition(\"Brussels sprout\", \"adrenal fatigue\").\n.decl Answer()\nAnswer() :- Good_for_condition(\"Brussels sprout\", \"adrenal fatigue\").\n.output Answer", "completions": [".decl Good_for_condition(Food:symbol, Condition:symbol)\nGood_for_condition(\"Brussels sprout\", \"adrenal fatigue\").\n.decl Answer()\nAnswer() :- Good_for_condition(\"Brussels sprout\", \"adrenal fatigue\").\n.output Answer"]}
{"id": 196, "answer": false, "completion": ".decl Celebrates(Person:symbol, Event:symbol)\nCelebrates(\"Adam Sandler\", \"Hanukkah\").\nCelebrates(\"Adam Sandler\", \"Thanksgiving\").\nCelebrates(\"Adam Sandler\", \"Passover\").\n.decl Answer()\nAnswer() :- !Celebrates(\"Adam Sandler\", \"Easter\").\n.output Answer", "completions": [".decl Celebrates(Person:symbol, Event:symbol)\nCelebrates(\"Adam Sandler\", \"Hanukkah\").\nCelebrates(\"Adam Sandler\", \"Thanksgiving\").\nCelebrates(\"Adam Sandler\", \"Passover\").\n.decl Answer()\nAnswer() :- !Celebrates(\"Adam Sandler\", \"Easter\").\n.output Answer"]}
{"id": 197, "answer": false, "completion": ".decl Begins_on_day_of_week(Month:symbol, Day_of_week:symbol)\nBegins_on_day_of_week(\"February\", \"Monday\").\nBegins_on_day_of_week(\"March\", \"Monday\").\n.decl Is_leap_year(Year:float)\nIs_leap_year(2020).\n.decl Answer()\nAnswer() :- Begins_on_day_of_week(\"February\", day1), Begins_on_day_of_week(\"March\", day2), Is_leap_year(year), day1 = day2.\n.output Answer", "completions": [".decl Begins_on_day_of_week(Month:symbol, Day_of_week:symbol)\nBegins_on_day_of_week(\"February\", \"Monday\").\nBegins_on_day_of_week(\"March\", \"Monday\").\n.decl Is_leap_year(Year:float)\nIs_leap_year(2020).\n.decl Answer()\nAnswer() :- Begins_on_day_of_week(\"February\", day1), Begins_on_day_of_week(\"March\", day2), Is_leap_year(year), day1 = day2.\n.output Answer"]}
{"id": 198, "answer": false, "completion": ".decl Is_divine(Dance:symbol)\nIs_divine(\"Shiva's divine dance\").\n.decl Is_ancient(Pose:symbol)\nIs_ancient(\"ancient physical fitness pose\").\n.decl Answer()\nAnswer() :- Is_divine(dance), Is_ancient(pose), dance = pose.\n.output Answer", "completions": [".decl Is_divine(Dance:symbol)\nIs_divine(\"Shiva's divine dance\").\n.decl Is_ancient(Pose:symbol)\nIs_ancient(\"ancient physical fitness pose\").\n.decl Answer()\nAnswer() :- Is_divine(dance), Is_ancient(pose), dance = pose.\n.output Answer"]}
{"id": 199, "answer": false, "completion": ".decl Possession_of_land(Empire:symbol, Land:symbol, Start_year:float, End_year:float)\nPossession_of_land(\"Ottoman Empire\", \"Land of Israel\", 1517, 1917).\n.decl Answer()\nAnswer() :- Possession_of_land(\"Islamic Empire\", \"Land of Israel\", start_year, end_year), start_year >= 1500, end_year <= 1600.\n.output Answer", "completions": [".decl Possession_of_land(Empire:symbol, Land:symbol, Start_year:float, End_year:float)\nPossession_of_land(\"Ottoman Empire\", \"Land of Israel\", 1517, 1917).\n.decl Answer()\nAnswer() :- Possession_of_land(\"Islamic Empire\", \"Land of Israel\", start_year, end_year), start_year >= 1500, end_year <= 1600.\n.output Answer"]}
{"id": 200, "answer": true, "completion": ".decl Engages_in_trade(Lord:symbol, Peasant:symbol)\nEngages_in_trade(\"Lord A\", \"Peasant B\").\nEngages_in_trade(\"Lord C\", \"Peasant D\").\n.decl Answer()\nAnswer() :- Engages_in_trade(lord, peasant), lord contains \"Medieval English\", peasant contains \"Medieval English\".\n.output Answer", "completions": [".decl Engages_in_trade(Lord:symbol, Peasant:symbol)\nEngages_in_trade(\"Lord A\", \"Peasant B\").\nEngages_in_trade(\"Lord C\", \"Peasant D\").\n.decl Answer()\nAnswer() :- Engages_in_trade(lord, peasant), lord contains \"Medieval English\", peasant contains \"Medieval English\".\n.output Answer"]}
{"id": 201, "answer": false, "completion": ".decl Helps_with(Field:symbol, Topic:symbol)\nHelps_with(\"paleography\", \"Cthulhu\").\n.decl Answer()\nAnswer() :- Helps_with(field, \"Cthulhu\").\n.output Answer", "completions": [".decl Helps_with(Field:symbol, Topic:symbol)\nHelps_with(\"paleography\", \"Cthulhu\").\n.decl Answer()\nAnswer() :- Helps_with(field, \"Cthulhu\").\n.output Answer"]}
{"id": 202, "answer": false, "completion": ".decl Has_caused_deaths(Thing:symbol, Deaths:float)\nHas_caused_deaths(\"jokes\", 0).\nHas_caused_deaths(\"rats\", 10).\n.decl Answer()\nAnswer() :- Has_caused_deaths(\"jokes\", deaths1), Has_caused_deaths(\"rats\", deaths2), deaths1 > deaths2.\n.output Answer", "completions": [".decl Has_caused_deaths(Thing:symbol, Deaths:float)\nHas_caused_deaths(\"jokes\", 0).\nHas_caused_deaths(\"rats\", 10).\n.decl Answer()\nAnswer() :- Has_caused_deaths(\"jokes\", deaths1), Has_caused_deaths(\"rats\", deaths2), deaths1 > deaths2.\n.output Answer"]}
{"id": 203, "answer": true, "completion": ".decl Suicide_method(Method:symbol, Reliable:symbol)\nSuicide_method(\"slitting wrists\", \"unreliable\").\n.decl Answer()\nAnswer() :- Suicide_method(\"slitting wrists\", \"unreliable\").\n.output Answer", "completions": [".decl Suicide_method(Method:symbol, Reliable:symbol)\nSuicide_method(\"slitting wrists\", \"unreliable\").\n.decl Answer()\nAnswer() :- Suicide_method(\"slitting wrists\", \"unreliable\").\n.output Answer"]}
{"id": 204, "answer": false, "completion": ".decl Has_attribute(Object:symbol, Attribute:symbol)\nHas_attribute(\"agriculture\", \"rivers\").\n.decl Answer()\nAnswer() :- Has_attribute(\"agriculture\", attribute), attribute = \"rivers\".\n.output Answer", "completions": [".decl Has_attribute(Object:symbol, Attribute:symbol)\nHas_attribute(\"agriculture\", \"rivers\").\n.decl Answer()\nAnswer() :- Has_attribute(\"agriculture\", attribute), attribute = \"rivers\".\n.output Answer"]}
{"id": 205, "answer": true, "completion": ".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Eskimo\", \"Arctic\").\n.decl Enjoys_activity(Person:symbol, Activity:symbol)\nEnjoys_activity(\"Eskimo\", \"fishing\").\nEnjoys_activity(\"Eskimo\", \"hunting\").\n.decl Answer()\nAnswer() :- Lives_in(\"Eskimo\", place), Enjoys_activity(\"Eskimo\", \"sunbathing\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Place:symbol)\nLives_in(\"Eskimo\", \"Arctic\").\n.decl Enjoys_activity(Person:symbol, Activity:symbol)\nEnjoys_activity(\"Eskimo\", \"fishing\").\nEnjoys_activity(\"Eskimo\", \"hunting\").\n.decl Answer()\nAnswer() :- Lives_in(\"Eskimo\", place), Enjoys_activity(\"Eskimo\", \"sunbathing\").\n.output Answer"]}
{"id": 206, "answer": true, "completion": ".decl Works_at_time(Facility:symbol, Time:symbol)\nWorks_at_time(\"Goldstone Deep Space Communications Complex\", \"day shift\").\nWorks_at_time(\"Goldstone Deep Space Communications Complex\", \"night shift\").\n.decl Answer()\nAnswer() :- Works_at_time(\"Goldstone Deep Space Communications Complex\", \"night shift\").\n.output Answer", "completions": [".decl Works_at_time(Facility:symbol, Time:symbol)\nWorks_at_time(\"Goldstone Deep Space Communications Complex\", \"day shift\").\nWorks_at_time(\"Goldstone Deep Space Communications Complex\", \"night shift\").\n.decl Answer()\nAnswer() :- Works_at_time(\"Goldstone Deep Space Communications Complex\", \"night shift\").\n.output Answer"]}
{"id": 207, "answer": true, "completion": ".decl Pays_per_episode(Soap:symbol, Pay:float)\nPays_per_episode(\"Days of Our Lives\", 1000).\nPays_per_episode(\"The Bold and the Beautiful\", 800).\nPays_per_episode(\"General Hospital\", 900).\n.decl Answer()\nAnswer() :- Pays_per_episode(\"Days of Our Lives\", pay1), Pays_per_episode(soaps, pay2), pay1 > pay2, soaps != \"Days of Our Lives\".\n.output Answer", "completions": [".decl Pays_per_episode(Soap:symbol, Pay:float)\nPays_per_episode(\"Days of Our Lives\", 1000).\nPays_per_episode(\"The Bold and the Beautiful\", 800).\nPays_per_episode(\"General Hospital\", 900).\n.decl Answer()\nAnswer() :- Pays_per_episode(\"Days of Our Lives\", pay1), Pays_per_episode(soaps, pay2), pay1 > pay2, soaps != \"Days of Our Lives\".\n.output Answer"]}
{"id": 208, "answer": true, "completion": ".decl Likes(Person:symbol, Thing:symbol)\nLikes(\"Pikachu\", \"ketchup\").\nLikes(\"Charles Darwin\", \"evolution\").\n.decl Answer()\nAnswer() :- Likes(\"Pikachu\", thing), Likes(\"Charles Darwin\", thing).\n.output Answer", "completions": [".decl Likes(Person:symbol, Thing:symbol)\nLikes(\"Pikachu\", \"ketchup\").\nLikes(\"Charles Darwin\", \"evolution\").\n.decl Answer()\nAnswer() :- Likes(\"Pikachu\", thing), Likes(\"Charles Darwin\", thing).\n.output Answer"]}
{"id": 209, "answer": false, "completion": ".decl Has_hair(Person:symbol)\nHas_hair(\"John\").\nHas_hair(\"Mary\").\n.decl Uses_tonsure(Person:symbol)\nUses_tonsure(\"John\").\n.decl Answer()\nAnswer() :- Uses_tonsure(person), !Has_hair(person).\n.output Answer", "completions": [".decl Has_hair(Person:symbol)\nHas_hair(\"John\").\nHas_hair(\"Mary\").\n.decl Uses_tonsure(Person:symbol)\nUses_tonsure(\"John\").\n.decl Answer()\nAnswer() :- Uses_tonsure(person), !Has_hair(person).\n.output Answer"]}
{"id": 210, "answer": false, "completion": ".decl Lives_in_water(Animal:symbol)\nLives_in_water(\"grey seal\").\nLives_in_water(\"sperm whale\").\n.decl Same_water(Animal1:symbol, Animal2:symbol)\nSame_water(Animal1, Animal2) :- Lives_in_water(Animal1), Lives_in_water(Animal2), Animal1 != Animal2.\n.decl Answer()\nAnswer() :- Same_water(\"grey seal\", \"sperm whale\").\n.output Answer", "completions": [".decl Lives_in_water(Animal:symbol)\nLives_in_water(\"grey seal\").\nLives_in_water(\"sperm whale\").\n.decl Same_water(Animal1:symbol, Animal2:symbol)\nSame_water(Animal1, Animal2) :- Lives_in_water(Animal1), Lives_in_water(Animal2), Animal1 != Animal2.\n.decl Answer()\nAnswer() :- Same_water(\"grey seal\", \"sperm whale\").\n.output Answer"]}
{"id": 211, "answer": false, "completion": ".decl Purchases(Person:symbol, Item:symbol)\nPurchases(\"Donald Duck\", \"bell-bottoms\").\n.decl Answer()\nAnswer() :- Purchases(\"Donald Duck\", item).\n.output Answer", "completions": [".decl Purchases(Person:symbol, Item:symbol)\nPurchases(\"Donald Duck\", \"bell-bottoms\").\n.decl Answer()\nAnswer() :- Purchases(\"Donald Duck\", item).\n.output Answer"]}
{"id": 212, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"Black Sea anchovy\", \"Black Sea\").\nLives_in(\"Black Sea horse mackerel\", \"Black Sea\").\nLives_in(\"Black Sea sprat\", \"Black Sea\").\n.decl Toppings(Pizza:symbol, Topping:symbol)\nToppings(\"anchovy pizza\", \"anchovies\").\nToppings(\"mackerel pizza\", \"horse mackerel\").\nToppings(\"sprat pizza\", \"sprat\").\n.decl Answer()\nAnswer() :- Lives_in(animal, \"Black Sea\"), Toppings(pizza, topping), animal = topping.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"Black Sea anchovy\", \"Black Sea\").\nLives_in(\"Black Sea horse mackerel\", \"Black Sea\").\nLives_in(\"Black Sea sprat\", \"Black Sea\").\n.decl Toppings(Pizza:symbol, Topping:symbol)\nToppings(\"anchovy pizza\", \"anchovies\").\nToppings(\"mackerel pizza\", \"horse mackerel\").\nToppings(\"sprat pizza\", \"sprat\").\n.decl Answer()\nAnswer() :- Lives_in(animal, \"Black Sea\"), Toppings(pizza, topping), animal = topping.\n.output Answer"]}
{"id": 213, "answer": false, "completion": ".decl Has_special_laws(Event:symbol, Laws:symbol)\nHas_special_laws(\"funerals\", \"yes\").\n.decl Answer()\nAnswer() :- Has_special_laws(\"funerals\", \"yes\").\n.output Answer", "completions": [".decl Has_special_laws(Event:symbol, Laws:symbol)\nHas_special_laws(\"funerals\", \"yes\").\n.decl Answer()\nAnswer() :- Has_special_laws(\"funerals\", \"yes\").\n.output Answer"]}
{"id": 214, "answer": false, "completion": ".decl Has_location(Address:symbol, Latitude:float, Longitude:float)\nHas_location(\"My Home\", 37.7749, -122.4194).\n.decl Answer()\nAnswer() :- Has_location(\"My Home\", latitude, longitude), latitude != null, longitude != null.\n.output Answer", "completions": [".decl Has_location(Address:symbol, Latitude:float, Longitude:float)\nHas_location(\"My Home\", 37.7749, -122.4194).\n.decl Answer()\nAnswer() :- Has_location(\"My Home\", latitude, longitude), latitude != null, longitude != null.\n.output Answer"]}
{"id": 215, "answer": true, "completion": ".decl Believes(Person:symbol, Concept:symbol)\nBelieves(\"Woody Allen\", \"existentialism\").\nBelieves(\"Woody Allen\", \"Judaism\").\nBelieves(\"Woody Allen\", \"reincarnation\").\n.decl Answer()\nAnswer() :- Believes(\"Woody Allen\", \"reincarnation\"), !Believes(\"Woody Allen\", \"Second Coming\").\n.output Answer", "completions": [".decl Believes(Person:symbol, Concept:symbol)\nBelieves(\"Woody Allen\", \"existentialism\").\nBelieves(\"Woody Allen\", \"Judaism\").\nBelieves(\"Woody Allen\", \"reincarnation\").\n.decl Answer()\nAnswer() :- Believes(\"Woody Allen\", \"reincarnation\"), !Believes(\"Woody Allen\", \"Second Coming\").\n.output Answer"]}
{"id": 216, "answer": true, "completion": ".decl Causes_disease(Food:symbol, Disease:symbol)\nCauses_disease(\"raw chicken\", \"Salmonella\").\nCauses_disease(\"undercooked pork\", \"Trichinosis\").\n.decl Answer()\nAnswer() :- Causes_disease(food, \"fever\"), food = \"raw chicken\" + \"undercooked pork\".\n.output Answer", "completions": [".decl Causes_disease(Food:symbol, Disease:symbol)\nCauses_disease(\"raw chicken\", \"Salmonella\").\nCauses_disease(\"undercooked pork\", \"Trichinosis\").\n.decl Answer()\nAnswer() :- Causes_disease(food, \"fever\"), food = \"raw chicken\" + \"undercooked pork\".\n.output Answer"]}
{"id": 217, "answer": true, "completion": ".decl Is_fatal(Action:symbol, Object:symbol)\nIs_fatal(\"eating\", \"Uranium pellet\").\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"Dicopomorpha echmepterygis\", 0.5).\nHas_size(\"Uranium pellet\", 0.0002).\n.decl Answer()\nAnswer() :- Is_fatal(action, \"Uranium pellet\"), Has_size(\"Dicopomorpha echmepterygis\", size), size >= 1000.\n.output Answer", "completions": [".decl Is_fatal(Action:symbol, Object:symbol)\nIs_fatal(\"eating\", \"Uranium pellet\").\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"Dicopomorpha echmepterygis\", 0.5).\nHas_size(\"Uranium pellet\", 0.0002).\n.decl Answer()\nAnswer() :- Is_fatal(action, \"Uranium pellet\"), Has_size(\"Dicopomorpha echmepterygis\", size), size >= 1000.\n.output Answer"]}
{"id": 218, "answer": false, "completion": ".decl Associated_with(Item:symbol, Event:symbol)\nAssociated_with(\"menthol\", \"cold and flu season\").\nAssociated_with(\"peppermint\", \"Christmas\").\nAssociated_with(\"eggnog\", \"Christmas\").\n.decl Answer()\nAnswer() :- Associated_with(\"menthol\", event), Associated_with(\"peppermint\", event).\n.output Answer", "completions": [".decl Associated_with(Item:symbol, Event:symbol)\nAssociated_with(\"menthol\", \"cold and flu season\").\nAssociated_with(\"peppermint\", \"Christmas\").\nAssociated_with(\"eggnog\", \"Christmas\").\n.decl Answer()\nAnswer() :- Associated_with(\"menthol\", event), Associated_with(\"peppermint\", event).\n.output Answer"]}
{"id": 219, "answer": false, "completion": ".decl Ran_in_election(Person:symbol, Election:symbol)\nRan_in_election(\"John Kerry\", \"2004 United States presidential election\").\n.decl Answer()\nAnswer() :- Ran_in_election(\"John Kerry\", election), election != \"2010 United Kingdom general election\".\n.output Answer", "completions": [".decl Ran_in_election(Person:symbol, Election:symbol)\nRan_in_election(\"John Kerry\", \"2004 United States presidential election\").\n.decl Answer()\nAnswer() :- Ran_in_election(\"John Kerry\", election), election != \"2010 United Kingdom general election\".\n.output Answer"]}
{"id": 220, "answer": true, "completion": ".decl Fear(Animal:symbol, Thing:symbol)\nFear(\"Bengal cat\", \"water\").\nFear(\"Bengal cat\", \"fish\").\n.decl Answer()\nAnswer() :- Fear(\"Bengal cat\", thing), thing = \"fish\".\n.output Answer", "completions": [".decl Fear(Animal:symbol, Thing:symbol)\nFear(\"Bengal cat\", \"water\").\nFear(\"Bengal cat\", \"fish\").\n.decl Answer()\nAnswer() :- Fear(\"Bengal cat\", thing), thing = \"fish\".\n.output Answer"]}
{"id": 221, "answer": false, "completion": ".decl Contains(N_food:symbol, Food:symbol)\nContains(\"dozen pickles\", \"salt\").\nContains(\"dozen pickles\", \"vinegar\").\nContains(\"dozen pickles\", \"cucumber\").\n.decl Helps_with_condition(Food:symbol, Condition:symbol)\nHelps_with_condition(\"cucumber\", \"hydration\").\nHelps_with_condition(\"salt\", \"hypertension\").\n.decl Answer()\nAnswer() :- Contains(\"dozen pickles\", food), Helps_with_condition(food, \"hypertension\").\n.output Answer", "completions": [".decl Contains(N_food:symbol, Food:symbol)\nContains(\"dozen pickles\", \"salt\").\nContains(\"dozen pickles\", \"vinegar\").\nContains(\"dozen pickles\", \"cucumber\").\n.decl Helps_with_condition(Food:symbol, Condition:symbol)\nHelps_with_condition(\"cucumber\", \"hydration\").\nHelps_with_condition(\"salt\", \"hypertension\").\n.decl Answer()\nAnswer() :- Contains(\"dozen pickles\", food), Helps_with_condition(food, \"hypertension\").\n.output Answer"]}
{"id": 222, "answer": true, "completion": ".decl Mentions(Book:symbol, Topic:symbol)\nMentions(\"Revolutionary Road\", \"suburb\").\n.decl Answer()\nAnswer() :- Mentions(\"Revolutionary Road\", \"suburb\").\n.output Answer", "completions": [".decl Mentions(Book:symbol, Topic:symbol)\nMentions(\"Revolutionary Road\", \"suburb\").\n.decl Answer()\nAnswer() :- Mentions(\"Revolutionary Road\", \"suburb\").\n.output Answer"]}
{"id": 223, "answer": false, "completion": ".decl Associated_with(Entity:symbol, God:symbol)\nAssociated_with(\"Hanuman\", \"none\").\n.decl Answer()\nAnswer() :- Associated_with(\"Hanuman\", god), god != \"Norse\".\n.output Answer", "completions": [".decl Associated_with(Entity:symbol, God:symbol)\nAssociated_with(\"Hanuman\", \"none\").\n.decl Answer()\nAnswer() :- Associated_with(\"Hanuman\", god), god != \"Norse\".\n.output Answer"]}
{"id": 224, "answer": false, "completion": ".decl Requires_space(Activity:symbol, Space:float)\nRequires_space(\"3D printing\", 10).\n.decl Has_room(Room:symbol, Size:float)\nHas_room(\"Small room\", 5).\nHas_room(\"Large room\", 20).\n.decl Answer()\nAnswer() :- Requires_space(\"3D printing\", space), Has_room(room, size), space <= size, room = \"Large room\".\n.output Answer", "completions": [".decl Requires_space(Activity:symbol, Space:float)\nRequires_space(\"3D printing\", 10).\n.decl Has_room(Room:symbol, Size:float)\nHas_room(\"Small room\", 5).\nHas_room(\"Large room\", 20).\n.decl Answer()\nAnswer() :- Requires_space(\"3D printing\", space), Has_room(room, size), space <= size, room = \"Large room\".\n.output Answer"]}
{"id": 225, "answer": true, "completion": ".decl Interest(Person:symbol, Topic:symbol)\nInterest(\"Robert Stack\", \"mysteries\").\nInterest(\"Robert Stack\", \"history\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Tower of London\", 1400).\n.decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Unsolved Mysteries\", 14).\n.decl Answer()\nAnswer() :- Interest(\"Robert Stack\", topic), Happens_in_year(\"Tower of London\", year), In_range(year, 1400, 1499), Interest(\"Robert Stack\", \"history\").\nAnswer() :- Interest(\"Robert Stack\", topic), Has_n_seasons(\"Unsolved Mysteries\", n_seasons), n_seasons >= 14, Interest(\"Robert Stack\", \"mysteries\").\n.output Answer", "completions": [".decl Interest(Person:symbol, Topic:symbol)\nInterest(\"Robert Stack\", \"mysteries\").\nInterest(\"Robert Stack\", \"history\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Tower of London\", 1400).\n.decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Unsolved Mysteries\", 14).\n.decl Answer()\nAnswer() :- Interest(\"Robert Stack\", topic), Happens_in_year(\"Tower of London\", year), In_range(year, 1400, 1499), Interest(\"Robert Stack\", \"history\").\nAnswer() :- Interest(\"Robert Stack\", topic), Has_n_seasons(\"Unsolved Mysteries\", n_seasons), n_seasons >= 14, Interest(\"Robert Stack\", \"mysteries\").\n.output Answer"]}
{"id": 226, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sea otter\", \"fish\").\nEats(\"sea otter\", \"crustaceans\").\n.decl Answer()\nAnswer() :- Eats(\"sea otter\", \"spiders\").\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sea otter\", \"fish\").\nEats(\"sea otter\", \"crustaceans\").\n.decl Answer()\nAnswer() :- Eats(\"sea otter\", \"spiders\").\n.output Answer"]}
{"id": 227, "answer": true, "completion": ".decl Cancelled_tours(Band:symbol, Reason:symbol)\nCancelled_tours(\"The Who\", \"illness\").\nCancelled_tours(\"The Who\", \"logistical issues\").\n.decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"World War II\", \"1939-1945\").\n.decl Answer()\nAnswer() :- Cancelled_tours(\"The Who\", reason), Happened_in_time(\"World War II\", time), reason != \"illness\".\n.output Answer", "completions": [".decl Cancelled_tours(Band:symbol, Reason:symbol)\nCancelled_tours(\"The Who\", \"illness\").\nCancelled_tours(\"The Who\", \"logistical issues\").\n.decl Happened_in_time(Event:symbol, Time:symbol)\nHappened_in_time(\"World War II\", \"1939-1945\").\n.decl Answer()\nAnswer() :- Cancelled_tours(\"The Who\", reason), Happened_in_time(\"World War II\", time), reason != \"illness\".\n.output Answer"]}
{"id": 228, "answer": false, "completion": ".decl Has_element(Material:symbol, Element:symbol)\nHas_element(\"nickel\", \"Ni\").\nHas_element(\"copper\", \"Cu\").\n.decl Answer()\nAnswer() :- Has_element(\"nickel\", element), Has_element(\"copper\", element2), element != element2.\n.output Answer", "completions": [".decl Has_element(Material:symbol, Element:symbol)\nHas_element(\"nickel\", \"Ni\").\nHas_element(\"copper\", \"Cu\").\n.decl Answer()\nAnswer() :- Has_element(\"nickel\", element), Has_element(\"copper\", element2), element != element2.\n.output Answer"]}
{"id": 229, "answer": true, "completion": ".decl Cost_of_running(Position:symbol, Cost:float)\nCost_of_running(\"President of India\", 5000000000).\n.decl Cost_of_buying(Item:symbol, Cost:float)\nCost_of_buying(\"iPhone 11\", 699).\n.decl Answer()\nAnswer() :- Cost_of_running(\"President of India\", cost1), Cost_of_buying(\"iPhone 11\", cost2), cost1 > cost2.\n.output Answer", "completions": [".decl Cost_of_running(Position:symbol, Cost:float)\nCost_of_running(\"President of India\", 5000000000).\n.decl Cost_of_buying(Item:symbol, Cost:float)\nCost_of_buying(\"iPhone 11\", 699).\n.decl Answer()\nAnswer() :- Cost_of_running(\"President of India\", cost1), Cost_of_buying(\"iPhone 11\", cost2), cost1 > cost2.\n.output Answer"]}
{"id": 230, "answer": false, "completion": ".decl Occurs_on_day(Event:symbol, Day:symbol)\nOccurs_on_day(\"New Year's Day\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Occurs_on_day(\"New Year's Day\", \"Wednesday\").\n.output Answer", "completions": [".decl Occurs_on_day(Event:symbol, Day:symbol)\nOccurs_on_day(\"New Year's Day\", \"Wednesday\").\n.decl Answer()\nAnswer() :- Occurs_on_day(\"New Year's Day\", \"Wednesday\").\n.output Answer"]}
{"id": 231, "answer": true, "completion": ".decl Targeted_by(Group:symbol, Person:symbol)\nTargeted_by(\"Islamophobes\", \"Donald Trump\").\n.decl Answer()\nAnswer() :- Targeted_by(group, \"Donald Trump\"), group != \"Islamophobes\".\n.output Answer", "completions": [".decl Targeted_by(Group:symbol, Person:symbol)\nTargeted_by(\"Islamophobes\", \"Donald Trump\").\n.decl Answer()\nAnswer() :- Targeted_by(group, \"Donald Trump\"), group != \"Islamophobes\".\n.output Answer"]}
{"id": 232, "answer": true, "completion": ".decl Involves(Event:symbol, Theme:symbol)\nInvolves(\"Alice in Wonderland\", \"fantasy\").\nInvolves(\"Alice in Wonderland\", \"adventure\").\nInvolves(\"Alice in Wonderland\", \"imagination\").\nInvolves(\"Alice in Wonderland\", \"nonsense\").\n.decl Celebrates(Event:symbol, Holiday:symbol)\nCelebrates(\"Christmas\", \"holiday\").\nCelebrates(\"Thanksgiving\", \"holiday\").\nCelebrates(\"Easter\", \"holiday\").\nCelebrates(\"Halloween\", \"holiday\").\nCelebrates(\"Independence Day\", \"holiday\").\nCelebrates(\"New Year's Day\", \"holiday\").\nCelebrates(\"Valentine's Day\", \"holiday\").\nCelebrates(\"St. Patrick's Day\", \"holiday\").\n.decl Answer()\nAnswer() :- Involves(\"Alice in Wonderland\", theme), Celebrates(holiday, theme).\n.output Answer", "completions": [".decl Involves(Event:symbol, Theme:symbol)\nInvolves(\"Alice in Wonderland\", \"fantasy\").\nInvolves(\"Alice in Wonderland\", \"adventure\").\nInvolves(\"Alice in Wonderland\", \"imagination\").\nInvolves(\"Alice in Wonderland\", \"nonsense\").\n.decl Celebrates(Event:symbol, Holiday:symbol)\nCelebrates(\"Christmas\", \"holiday\").\nCelebrates(\"Thanksgiving\", \"holiday\").\nCelebrates(\"Easter\", \"holiday\").\nCelebrates(\"Halloween\", \"holiday\").\nCelebrates(\"Independence Day\", \"holiday\").\nCelebrates(\"New Year's Day\", \"holiday\").\nCelebrates(\"Valentine's Day\", \"holiday\").\nCelebrates(\"St. Patrick's Day\", \"holiday\").\n.decl Answer()\nAnswer() :- Involves(\"Alice in Wonderland\", theme), Celebrates(holiday, theme).\n.output Answer"]}
{"id": 233, "answer": false, "completion": ".decl Served_under(Person1:symbol, Person2:symbol)\nServed_under(\"François Mitterrand\", \"Napoleon Bonaparte\").\n.decl Answer()\nAnswer() :- Served_under(\"François Mitterrand\", person2), Served_under(person2, \"Napoleon Bonaparte\").\n.output Answer", "completions": [".decl Served_under(Person1:symbol, Person2:symbol)\nServed_under(\"François Mitterrand\", \"Napoleon Bonaparte\").\n.decl Answer()\nAnswer() :- Served_under(\"François Mitterrand\", person2), Served_under(person2, \"Napoleon Bonaparte\").\n.output Answer"]}
{"id": 234, "answer": true, "completion": ".decl Contains_chemical(Ingredient:symbol, Chemical:symbol)\nContains_chemical(\"onion\", \"sulfur\").\nContains_chemical(\"onion\", \"nitrogen\").\nContains_chemical(\"onion\", \"carbon\").\n.decl Can_create_bomb(Chemical:symbol)\nCan_create_bomb(\"sulfur\").\nCan_create_bomb(\"nitrogen\").\nCan_create_bomb(\"carbon\").\n.decl Answer()\nAnswer() :- Contains_chemical(\"onion\", chemical), Can_create_bomb(chemical).\n.output Answer", "completions": [".decl Contains_chemical(Ingredient:symbol, Chemical:symbol)\nContains_chemical(\"onion\", \"sulfur\").\nContains_chemical(\"onion\", \"nitrogen\").\nContains_chemical(\"onion\", \"carbon\").\n.decl Can_create_bomb(Chemical:symbol)\nCan_create_bomb(\"sulfur\").\nCan_create_bomb(\"nitrogen\").\nCan_create_bomb(\"carbon\").\n.decl Answer()\nAnswer() :- Contains_chemical(\"onion\", chemical), Can_create_bomb(chemical).\n.output Answer"]}
{"id": 235, "answer": false, "completion": ".decl Is_legal(Download:symbol, Status:symbol)\nIs_legal(\"Mario 64 on emulator\", \"gray area\").\n.decl Answer()\nAnswer() :- Is_legal(download, \"legal\").\n.output Answer", "completions": [".decl Is_legal(Download:symbol, Status:symbol)\nIs_legal(\"Mario 64 on emulator\", \"gray area\").\n.decl Answer()\nAnswer() :- Is_legal(download, \"legal\").\n.output Answer"]}
{"id": 236, "answer": false, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"rainbow\", \"sky\").\nHappens_in_place(\"lunch\", \"beach\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"rainbow\", \"full circle\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"rainbow\", place), Happens_in_place(\"lunch\", place), Has_property(\"rainbow\", \"full circle\").\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"rainbow\", \"sky\").\nHappens_in_place(\"lunch\", \"beach\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"rainbow\", \"full circle\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"rainbow\", place), Happens_in_place(\"lunch\", place), Has_property(\"rainbow\", \"full circle\").\n.output Answer"]}
{"id": 237, "answer": true, "completion": ".decl Has_n_days(City:symbol, N_days:float)\nHas_n_days(\"Düsseldorf\", 20).\n.decl Answer()\nAnswer() :- Has_n_days(\"Düsseldorf\", n_days), n_days < 50.\n.output Answer", "completions": [".decl Has_n_days(City:symbol, N_days:float)\nHas_n_days(\"Düsseldorf\", 20).\n.decl Answer()\nAnswer() :- Has_n_days(\"Düsseldorf\", n_days), n_days < 50.\n.output Answer"]}
{"id": 238, "answer": false, "completion": ".decl Hairline(Person:symbol, Hairline:symbol)\nHairline(\"Elon Musk\", \"full\").\n.decl Answer()\nAnswer() :- !Hairline(\"Elon Musk\", \"receding\").\n.output Answer", "completions": [".decl Hairline(Person:symbol, Hairline:symbol)\nHairline(\"Elon Musk\", \"full\").\n.decl Answer()\nAnswer() :- !Hairline(\"Elon Musk\", \"receding\").\n.output Answer"]}
{"id": 239, "answer": false, "completion": ".decl Villain(Name:symbol, Universe:symbol)\nVillain(\"Mandarin\", \"Marvel\").\n.decl Is_fruit(Name:symbol)\nIs_fruit(\"orange\").\nIs_fruit(\"lemon\").\nIs_fruit(\"lime\").\nIs_fruit(\"grapefruit\").\n.decl Answer()\nAnswer() :- Villain(name, \"Marvel\"), Is_fruit(name).\n.output Answer", "completions": [".decl Villain(Name:symbol, Universe:symbol)\nVillain(\"Mandarin\", \"Marvel\").\n.decl Is_fruit(Name:symbol)\nIs_fruit(\"orange\").\nIs_fruit(\"lemon\").\nIs_fruit(\"lime\").\nIs_fruit(\"grapefruit\").\n.decl Answer()\nAnswer() :- Villain(name, \"Marvel\"), Is_fruit(name).\n.output Answer"]}
{"id": 240, "answer": false, "completion": ".decl Located_in(Location:symbol, Region:symbol)\nLocated_in(\"Canary Islands\", \"Atlantic Ocean\").\n.decl Habitat(Fish:symbol, Habitat:symbol)\nHabitat(\"largemouth bass\", \"freshwater\").\n.decl Answer()\nAnswer() :- Located_in(location, region), Habitat(\"largemouth bass\", habitat), habitat != region.\n.output Answer", "completions": [".decl Located_in(Location:symbol, Region:symbol)\nLocated_in(\"Canary Islands\", \"Atlantic Ocean\").\n.decl Habitat(Fish:symbol, Habitat:symbol)\nHabitat(\"largemouth bass\", \"freshwater\").\n.decl Answer()\nAnswer() :- Located_in(location, region), Habitat(\"largemouth bass\", habitat), habitat != region.\n.output Answer"]}
{"id": 241, "answer": true, "completion": ".decl Associated_with(Food:symbol, Ingredient:symbol)\nAssociated_with(\"pizza\", \"anchovies\").\nAssociated_with(\"pasta\", \"tomato sauce\").\nAssociated_with(\"pasta\", \"parmesan cheese\").\n.decl Answer()\nAnswer() :- Associated_with(food, \"anchovies\").\n.output Answer", "completions": [".decl Associated_with(Food:symbol, Ingredient:symbol)\nAssociated_with(\"pizza\", \"anchovies\").\nAssociated_with(\"pasta\", \"tomato sauce\").\nAssociated_with(\"pasta\", \"parmesan cheese\").\n.decl Answer()\nAnswer() :- Associated_with(food, \"anchovies\").\n.output Answer"]}
{"id": 242, "answer": false, "completion": ".decl Appeared_on_show(Person:symbol, Show:symbol)\nAppeared_on_show(\"Harry Houdini\", \"The Houdini Code\").\nAppeared_on_show(\"Chris Angel\", \"Chris Angel Mindfreak\").\n.decl Answer()\nAnswer() :- Appeared_on_show(\"Harry Houdini\", show1), Appeared_on_show(\"Chris Angel\", show2), show1 != show2, Show(\"Chris Angel Mindfreak\").\n.output Answer", "completions": [".decl Appeared_on_show(Person:symbol, Show:symbol)\nAppeared_on_show(\"Harry Houdini\", \"The Houdini Code\").\nAppeared_on_show(\"Chris Angel\", \"Chris Angel Mindfreak\").\n.decl Answer()\nAnswer() :- Appeared_on_show(\"Harry Houdini\", show1), Appeared_on_show(\"Chris Angel\", show2), show1 != show2, Show(\"Chris Angel Mindfreak\").\n.output Answer"]}
{"id": 243, "answer": true, "completion": ".decl Can_tow(Vehicle:symbol, Weight:float)\nCan_tow(\"Ford F-350\", 35000).\n.decl Weighs(Person:symbol, Weight:float)\nWeighs(\"Yale University student body\", 30000).\n.decl Answer()\nAnswer() :- Can_tow(vehicle, weight1), Weighs(person, weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Can_tow(Vehicle:symbol, Weight:float)\nCan_tow(\"Ford F-350\", 35000).\n.decl Weighs(Person:symbol, Weight:float)\nWeighs(\"Yale University student body\", 30000).\n.decl Answer()\nAnswer() :- Can_tow(vehicle, weight1), Weighs(person, weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 244, "answer": false, "completion": ".decl Necessary_for(Good:symbol, Bad:symbol)\nNecessary_for(\"queen bees\", \"apples\").\nNecessary_for(\"sunlight\", \"mushrooms\").\nNecessary_for(\"water\", \"cacti\").\n.decl Answer()\nAnswer() :- !Necessary_for(\"queen bees\", \"apples\").\n.output Answer", "completions": [".decl Necessary_for(Good:symbol, Bad:symbol)\nNecessary_for(\"queen bees\", \"apples\").\nNecessary_for(\"sunlight\", \"mushrooms\").\nNecessary_for(\"water\", \"cacti\").\n.decl Answer()\nAnswer() :- !Necessary_for(\"queen bees\", \"apples\").\n.output Answer"]}
{"id": 245, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Mount Fuji\", 3776).\n.decl Has_depth(Object:symbol, Depth:float)\nHas_depth(\"Sea of Japan\", 1221).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Fuji\", height), Has_depth(\"Sea of Japan\", depth), height > depth.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Mount Fuji\", 3776).\n.decl Has_depth(Object:symbol, Depth:float)\nHas_depth(\"Sea of Japan\", 1221).\n.decl Answer()\nAnswer() :- Has_height(\"Mount Fuji\", height), Has_depth(\"Sea of Japan\", depth), height > depth.\n.output Answer"]}
{"id": 246, "answer": true, "completion": ".decl Believes_in(Person:symbol, Concept:symbol)\nBelieves_in(\"Dalai Lama\", \"reincarnation\").\nBelieves_in(\"Dalai Lama\", \"karma\").\nBelieves_in(\"Dalai Lama\", \"compassion\").\n.decl Answer()\nAnswer() :- Believes_in(\"Dalai Lama\", \"divine barzakh\").\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Concept:symbol)\nBelieves_in(\"Dalai Lama\", \"reincarnation\").\nBelieves_in(\"Dalai Lama\", \"karma\").\nBelieves_in(\"Dalai Lama\", \"compassion\").\n.decl Answer()\nAnswer() :- Believes_in(\"Dalai Lama\", \"divine barzakh\").\n.output Answer"]}
{"id": 247, "answer": true, "completion": ".decl Happened_before(Event1:symbol, Event2:symbol)\nHappened_before(\"Y2K scare\", \"year 2000\").\nHappened_before(\"9/11 attacks\", \"year 2001\").\nHappened_before(\"COVID-19 pandemic\", \"year 2020\").\n.decl Answer()\nAnswer() :- Happened_before(\"Y2K scare\", \"year 2000\").\n.output Answer", "completions": [".decl Happened_before(Event1:symbol, Event2:symbol)\nHappened_before(\"Y2K scare\", \"year 2000\").\nHappened_before(\"9/11 attacks\", \"year 2001\").\nHappened_before(\"COVID-19 pandemic\", \"year 2020\").\n.decl Answer()\nAnswer() :- Happened_before(\"Y2K scare\", \"year 2000\").\n.output Answer"]}
{"id": 248, "answer": true, "completion": ".decl Invented_by(Person:symbol, Invention:symbol)\nInvented_by(\"Walt Disney\", \"animation\").\nInvented_by(\"Ray Tomlinson\", \"email\").\n.decl Lived_in(Person:symbol, Location:symbol)\nLived_in(\"Walt Disney\", \"California\").\n.decl Far_away(Location:symbol)\nFar_away(\"Europe\").\nFar_away(\"Asia\").\nFar_away(\"Africa\").\n.decl Answer()\nAnswer() :- Invented_by(\"Walt Disney\", invention), Invented_by(\"Ray Tomlinson\", invention2), Lived_in(\"Walt Disney\", location), Far_away(location2), location != location2.\n.output Answer", "completions": [".decl Invented_by(Person:symbol, Invention:symbol)\nInvented_by(\"Walt Disney\", \"animation\").\nInvented_by(\"Ray Tomlinson\", \"email\").\n.decl Lived_in(Person:symbol, Location:symbol)\nLived_in(\"Walt Disney\", \"California\").\n.decl Far_away(Location:symbol)\nFar_away(\"Europe\").\nFar_away(\"Asia\").\nFar_away(\"Africa\").\n.decl Answer()\nAnswer() :- Invented_by(\"Walt Disney\", invention), Invented_by(\"Ray Tomlinson\", invention2), Lived_in(\"Walt Disney\", location), Far_away(location2), location != location2.\n.output Answer"]}
{"id": 249, "answer": false, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"student\", 16).\n.decl Eligible_for_presidency(Person:symbol)\nEligible_for_presidency(person) :- Age(person, age), age >= 35.\n.decl Answer()\nAnswer() :- Age(\"student\", age), !Eligible_for_presidency(\"student\").\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"student\", 16).\n.decl Eligible_for_presidency(Person:symbol)\nEligible_for_presidency(person) :- Age(person, age), age >= 35.\n.decl Answer()\nAnswer() :- Age(\"student\", age), !Eligible_for_presidency(\"student\").\n.output Answer"]}
{"id": 250, "answer": false, "completion": ".decl Tastes_best_at_position(Fruit:symbol, Position:symbol)\nTastes_best_at_position(\"papaya\", \"center\").\n.decl Answer()\nAnswer() :- Tastes_best_at_position(\"papaya\", position).\n.output Answer", "completions": [".decl Tastes_best_at_position(Fruit:symbol, Position:symbol)\nTastes_best_at_position(\"papaya\", \"center\").\n.decl Answer()\nAnswer() :- Tastes_best_at_position(\"papaya\", position).\n.output Answer"]}
{"id": 251, "answer": true, "completion": ".decl Appears_in_show(Plot_device:symbol, Show:symbol)\nAppears_in_show(\"radioactive waste\", \"Breaking Bad\").\nAppears_in_show(\"radioactive waste\", \"The Simpsons\").\nAppears_in_show(\"time travel\", \"Doctor Who\").\n.decl Answer()\nAnswer() :- Appears_in_show(\"radioactive waste\", show).\n.output Answer", "completions": [".decl Appears_in_show(Plot_device:symbol, Show:symbol)\nAppears_in_show(\"radioactive waste\", \"Breaking Bad\").\nAppears_in_show(\"radioactive waste\", \"The Simpsons\").\nAppears_in_show(\"time travel\", \"Doctor Who\").\n.decl Answer()\nAnswer() :- Appears_in_show(\"radioactive waste\", show).\n.output Answer"]}
{"id": 252, "answer": false, "completion": ".decl Appears_in(Fable:symbol, Animal:symbol)\nAppears_in(\"The Dog and the Wolf\", \"dog\").\nAppears_in(\"The Fox and the Grapes\", \"fox\").\nAppears_in(\"The Wolf in Sheep's Clothing\", \"wolf\").\n.decl Belongs_to_family(Animal:symbol, Family:symbol)\nBelongs_to_family(\"dog\", \"Canidae\").\nBelongs_to_family(\"fox\", \"Canidae\").\nBelongs_to_family(\"wolf\", \"Canidae\").\n.decl Answer()\nAnswer() :- Appears_in(fable, animal), Belongs_to_family(animal, \"Canidae\").\n.output Answer", "completions": [".decl Appears_in(Fable:symbol, Animal:symbol)\nAppears_in(\"The Dog and the Wolf\", \"dog\").\nAppears_in(\"The Fox and the Grapes\", \"fox\").\nAppears_in(\"The Wolf in Sheep's Clothing\", \"wolf\").\n.decl Belongs_to_family(Animal:symbol, Family:symbol)\nBelongs_to_family(\"dog\", \"Canidae\").\nBelongs_to_family(\"fox\", \"Canidae\").\nBelongs_to_family(\"wolf\", \"Canidae\").\n.decl Answer()\nAnswer() :- Appears_in(fable, animal), Belongs_to_family(animal, \"Canidae\").\n.output Answer"]}
{"id": 253, "answer": true, "completion": ".decl Has_vitamin_c(Fruit:symbol)\nHas_vitamin_c(\"orange\").\nHas_vitamin_c(\"kiwi\").\nHas_vitamin_c(\"strawberry\").\n.decl Causes_health_issues(Fruit:symbol)\nCauses_health_issues(\"kiwi\").\nCauses_health_issues(\"strawberry\").\n.decl Answer()\nAnswer() :- Has_vitamin_c(fruit), Causes_health_issues(fruit).\n.output Answer", "completions": [".decl Has_vitamin_c(Fruit:symbol)\nHas_vitamin_c(\"orange\").\nHas_vitamin_c(\"kiwi\").\nHas_vitamin_c(\"strawberry\").\n.decl Causes_health_issues(Fruit:symbol)\nCauses_health_issues(\"kiwi\").\nCauses_health_issues(\"strawberry\").\n.decl Answer()\nAnswer() :- Has_vitamin_c(fruit), Causes_health_issues(fruit).\n.output Answer"]}
{"id": 254, "answer": false, "completion": ".decl Known_materials(Age:symbol, Material:symbol)\nKnown_materials(\"bronze age\", \"bronze\").\nKnown_materials(\"bronze age\", \"copper\").\nKnown_materials(\"bronze age\", \"tin\").\nKnown_materials(\"bronze age\", \"wood\").\n.decl All_materials(Material:symbol)\nAll_materials(\"bronze\").\nAll_materials(\"copper\").\nAll_materials(\"tin\").\nAll_materials(\"wood\").\n.decl Answer()\nAnswer() :- All_materials(material), !Known_materials(\"bronze age\", material).\n.output Answer", "completions": [".decl Known_materials(Age:symbol, Material:symbol)\nKnown_materials(\"bronze age\", \"bronze\").\nKnown_materials(\"bronze age\", \"copper\").\nKnown_materials(\"bronze age\", \"tin\").\nKnown_materials(\"bronze age\", \"wood\").\n.decl All_materials(Material:symbol)\nAll_materials(\"bronze\").\nAll_materials(\"copper\").\nAll_materials(\"tin\").\nAll_materials(\"wood\").\n.decl Answer()\nAnswer() :- All_materials(material), !Known_materials(\"bronze age\", material).\n.output Answer"]}
{"id": 255, "answer": true, "completion": ".decl President(Name:symbol, Party:symbol, Year:float)\nPresident(\"Barack Obama\", \"Democrat\", 2009).\nPresident(\"Bill Clinton\", \"Democrat\", 1993).\nPresident(\"Jimmy Carter\", \"Democrat\", 1977).\n.decl Known_for(Name:symbol, Skill:symbol)\nKnown_for(\"Barack Obama\", \"basketball\").\nKnown_for(\"Bill Clinton\", \"saxophone\").\nKnown_for(\"Jimmy Carter\", \"painting\").\n.decl Answer()\nAnswer() :- President(name, \"Democrat\", year), year >= 1977, Known_for(name, \"painting\").\n.output Answer", "completions": [".decl President(Name:symbol, Party:symbol, Year:float)\nPresident(\"Barack Obama\", \"Democrat\", 2009).\nPresident(\"Bill Clinton\", \"Democrat\", 1993).\nPresident(\"Jimmy Carter\", \"Democrat\", 1977).\n.decl Known_for(Name:symbol, Skill:symbol)\nKnown_for(\"Barack Obama\", \"basketball\").\nKnown_for(\"Bill Clinton\", \"saxophone\").\nKnown_for(\"Jimmy Carter\", \"painting\").\n.decl Answer()\nAnswer() :- President(name, \"Democrat\", year), year >= 1977, Known_for(name, \"painting\").\n.output Answer"]}
{"id": 256, "answer": true, "completion": ".decl Belongs_to_category(Animal:symbol, Category:symbol)\nBelongs_to_category(\"dog\", \"domestic\").\nBelongs_to_category(\"wolf\", \"wild\").\n.decl Advocates_for(Activist:symbol, Action:symbol)\nAdvocates_for(\"environmentalist\", \"preventing domestic canine reproduction\").\nAdvocates_for(\"animal rights activist\", \"preventing all animal reproduction\").\n.decl Answer()\nAnswer() :- Belongs_to_category(animal, \"domestic\"), Advocates_for(\"environmentalist\", action).\n.output Answer", "completions": [".decl Belongs_to_category(Animal:symbol, Category:symbol)\nBelongs_to_category(\"dog\", \"domestic\").\nBelongs_to_category(\"wolf\", \"wild\").\n.decl Advocates_for(Activist:symbol, Action:symbol)\nAdvocates_for(\"environmentalist\", \"preventing domestic canine reproduction\").\nAdvocates_for(\"animal rights activist\", \"preventing all animal reproduction\").\n.decl Answer()\nAnswer() :- Belongs_to_category(animal, \"domestic\"), Advocates_for(\"environmentalist\", action).\n.output Answer"]}
{"id": 257, "answer": false, "completion": ".decl Has_iterations(Device:symbol, Iterations:float)\nHas_iterations(\"iPhone\", 14).\nHas_iterations(\"Samsung Galaxy\", 10).\n.decl Answer()\nAnswer() :- Has_iterations(\"iPhone\", iterations1), Has_iterations(\"Samsung Galaxy\", iterations2), iterations1 > iterations2.\n.output Answer", "completions": [".decl Has_iterations(Device:symbol, Iterations:float)\nHas_iterations(\"iPhone\", 14).\nHas_iterations(\"Samsung Galaxy\", 10).\n.decl Answer()\nAnswer() :- Has_iterations(\"iPhone\", iterations1), Has_iterations(\"Samsung Galaxy\", iterations2), iterations1 > iterations2.\n.output Answer"]}
{"id": 258, "answer": true, "completion": ".decl Has_component(Device:symbol, Component:symbol)\nHas_component(\"central processing unit\", \"fan\").\n.decl Answer()\nAnswer() :- Has_component(\"central processing unit\", \"fan\").\n.output Answer", "completions": [".decl Has_component(Device:symbol, Component:symbol)\nHas_component(\"central processing unit\", \"fan\").\n.decl Answer()\nAnswer() :- Has_component(\"central processing unit\", \"fan\").\n.output Answer"]}
{"id": 259, "answer": false, "completion": ".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Christopher Hitchens\", \"atheism\").\n.decl Unlikely_to_do(Person:symbol, Action:symbol)\nUnlikely_to_do(\"Christopher Hitchens\", \"tonsure\").\n.decl Answer()\nAnswer() :- Believes(\"Christopher Hitchens\", \"atheism\"), Unlikely_to_do(\"Christopher Hitchens\", \"tonsure\").\n.output Answer", "completions": [".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Christopher Hitchens\", \"atheism\").\n.decl Unlikely_to_do(Person:symbol, Action:symbol)\nUnlikely_to_do(\"Christopher Hitchens\", \"tonsure\").\n.decl Answer()\nAnswer() :- Believes(\"Christopher Hitchens\", \"atheism\"), Unlikely_to_do(\"Christopher Hitchens\", \"tonsure\").\n.output Answer"]}
{"id": 260, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"diamond\", 3.5).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"diamond\", density1), Has_density(\"water\", density2), density1 < density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"diamond\", 3.5).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"diamond\", density1), Has_density(\"water\", density2), density1 < density2.\n.output Answer"]}
{"id": 261, "answer": true, "completion": ".decl Creator_employer(sibling1:symbol, sibling2:symbol)\nCreator_employer(\"Goofy creator\", \"employer's sibling\").\n.decl Committed_offense(Person:symbol, Offense:symbol)\nCommitted_offense(\"employer's sibling\", \"excommunicable offense\").\n.decl Answer()\nAnswer() :- Creator_employer(\"Goofy creator\", employer), Committed_offense(employer, \"excommunicable offense\").\n.output Answer", "completions": [".decl Creator_employer(sibling1:symbol, sibling2:symbol)\nCreator_employer(\"Goofy creator\", \"employer's sibling\").\n.decl Committed_offense(Person:symbol, Offense:symbol)\nCommitted_offense(\"employer's sibling\", \"excommunicable offense\").\n.decl Answer()\nAnswer() :- Creator_employer(\"Goofy creator\", employer), Committed_offense(employer, \"excommunicable offense\").\n.output Answer"]}
{"id": 262, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"nickel\", 0.835).\nHas_size(\"koala pouch\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"nickel\", size1), Has_size(\"koala pouch\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"nickel\", 0.835).\nHas_size(\"koala pouch\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"nickel\", size1), Has_size(\"koala pouch\", size2), size1 <= size2.\n.output Answer"]}
{"id": 263, "answer": true, "completion": ".decl Religion(Person:symbol, Religion:symbol)\nReligion(\"Dave Chappelle\", \"Islam\").\n.decl Contains_text(Book:symbol, Text:symbol)\nContains_text(\"Quran\", \"prayer\").\n.decl Answer()\nAnswer() :- Religion(\"Dave Chappelle\", \"Islam\"), Contains_text(\"Quran\", \"prayer\").\n.output Answer", "completions": [".decl Religion(Person:symbol, Religion:symbol)\nReligion(\"Dave Chappelle\", \"Islam\").\n.decl Contains_text(Book:symbol, Text:symbol)\nContains_text(\"Quran\", \"prayer\").\n.decl Answer()\nAnswer() :- Religion(\"Dave Chappelle\", \"Islam\"), Contains_text(\"Quran\", \"prayer\").\n.output Answer"]}
{"id": 264, "answer": true, "completion": ".decl Contains_string(String:symbol, Substring:symbol)\nContains_string(\"C-SPAN\", \"span\").\nContains_string(\"Alan Greenspan\", \"span\").\n.decl Answer()\nAnswer() :- Contains_string(\"C-SPAN\", substring), Contains_string(\"Alan Greenspan\", substring).\n.output Answer", "completions": [".decl Contains_string(String:symbol, Substring:symbol)\nContains_string(\"C-SPAN\", \"span\").\nContains_string(\"Alan Greenspan\", \"span\").\n.decl Answer()\nAnswer() :- Contains_string(\"C-SPAN\", substring), Contains_string(\"Alan Greenspan\", substring).\n.output Answer"]}
{"id": 265, "answer": true, "completion": ".decl Requires_power(Game:symbol, Power_type:symbol)\nRequires_power(\"Final Fantasy VI\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires_power(\"Final Fantasy VI\", \"electricity\").\n.output Answer", "completions": [".decl Requires_power(Game:symbol, Power_type:symbol)\nRequires_power(\"Final Fantasy VI\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires_power(\"Final Fantasy VI\", \"electricity\").\n.output Answer"]}
{"id": 266, "answer": true, "completion": ".decl Wrote(Person:symbol, Work:symbol)\nWrote(\"Jean-Paul Sartre\", \"No Exit\").\n.decl About(Work:symbol, Topic:symbol)\nAbout(\"No Exit\", \"Hell\").\n.decl Answer()\nAnswer() :- Wrote(\"Jean-Paul Sartre\", work), About(work, \"Hell\").\n.output Answer", "completions": [".decl Wrote(Person:symbol, Work:symbol)\nWrote(\"Jean-Paul Sartre\", \"No Exit\").\n.decl About(Work:symbol, Topic:symbol)\nAbout(\"No Exit\", \"Hell\").\n.decl Answer()\nAnswer() :- Wrote(\"Jean-Paul Sartre\", work), About(work, \"Hell\").\n.output Answer"]}
{"id": 267, "answer": false, "completion": ".decl Trains_for(Job:symbol, Training:symbol)\nTrains_for(\"infantry\", \"military\").\n.decl Plays_for(Team:symbol, Sport:symbol)\nPlays_for(\"New England Patriots\", \"football\").\nPlays_for(\"Seattle Seahawks\", \"football\").\n.decl Answer()\nAnswer() :- Plays_for(team, \"football\"), Trains_for(\"infantry\", training), !Plays_for(team, training).\n.output Answer", "completions": [".decl Trains_for(Job:symbol, Training:symbol)\nTrains_for(\"infantry\", \"military\").\n.decl Plays_for(Team:symbol, Sport:symbol)\nPlays_for(\"New England Patriots\", \"football\").\nPlays_for(\"Seattle Seahawks\", \"football\").\n.decl Answer()\nAnswer() :- Plays_for(team, \"football\"), Trains_for(\"infantry\", training), !Plays_for(team, training).\n.output Answer"]}
{"id": 268, "answer": true, "completion": ".decl Has_n_stripes(Flag:symbol, N_stripes:float)\nHas_n_stripes(\"American flag\", 13).\n.decl Has_voice_actor(Character:symbol, Actor:symbol)\nHas_voice_actor(\"Goofy\", \"Bill Farmer\").\nHas_voice_actor(\"Bugs Bunny\", \"Mel Blanc\").\n.decl Answer()\nAnswer() :- Has_voice_actor(\"Goofy\", actor1), Has_voice_actor(\"Bugs Bunny\", actor2), Has_n_stripes(\"American flag\", n_stripes), actor1 != actor2, n_stripes/2 >= 1.\n.output Answer", "completions": [".decl Has_n_stripes(Flag:symbol, N_stripes:float)\nHas_n_stripes(\"American flag\", 13).\n.decl Has_voice_actor(Character:symbol, Actor:symbol)\nHas_voice_actor(\"Goofy\", \"Bill Farmer\").\nHas_voice_actor(\"Bugs Bunny\", \"Mel Blanc\").\n.decl Answer()\nAnswer() :- Has_voice_actor(\"Goofy\", actor1), Has_voice_actor(\"Bugs Bunny\", actor2), Has_n_stripes(\"American flag\", n_stripes), actor1 != actor2, n_stripes/2 >= 1.\n.output Answer"]}
{"id": 269, "answer": false, "completion": ".decl Surface_temperature(Celestial_body:symbol, Temperature:float)\nSurface_temperature(\"Europa\", -170).\n.decl Boiling_point(Substance:symbol, Temperature:float)\nBoiling_point(\"egg\", 100).\n.decl Answer()\nAnswer() :- Surface_temperature(\"Europa\", temperature), Boiling_point(\"egg\", boiling_point), temperature > boiling_point.\n.output Answer", "completions": [".decl Surface_temperature(Celestial_body:symbol, Temperature:float)\nSurface_temperature(\"Europa\", -170).\n.decl Boiling_point(Substance:symbol, Temperature:float)\nBoiling_point(\"egg\", 100).\n.decl Answer()\nAnswer() :- Surface_temperature(\"Europa\", temperature), Boiling_point(\"egg\", boiling_point), temperature > boiling_point.\n.output Answer"]}
{"id": 270, "answer": true, "completion": ".decl TV_show(Name:symbol, Status:symbol)\nTV_show(\"The Joy of Painting\", \"ended\").\nTV_show(\"The Joy of Painting\", \"new episodes\").\n.decl Answer()\nAnswer() :- TV_show(\"The Joy of Painting\", \"new episodes\").\n.output Answer", "completions": [".decl TV_show(Name:symbol, Status:symbol)\nTV_show(\"The Joy of Painting\", \"ended\").\nTV_show(\"The Joy of Painting\", \"new episodes\").\n.decl Answer()\nAnswer() :- TV_show(\"The Joy of Painting\", \"new episodes\").\n.output Answer"]}
{"id": 271, "answer": false, "completion": ".decl Owns(Parent_company:symbol, Subsidiary:symbol)\nOwns(\"Disney\", \"Marvel Comics\").\n.decl Answer()\nAnswer() :- Owns(\"Disney\", \"comic book publisher\").\n.output Answer", "completions": [".decl Owns(Parent_company:symbol, Subsidiary:symbol)\nOwns(\"Disney\", \"Marvel Comics\").\n.decl Answer()\nAnswer() :- Owns(\"Disney\", \"comic book publisher\").\n.output Answer"]}
{"id": 272, "answer": false, "completion": ".decl Survival_rate(Country:symbol, Cancer_type:symbol, Rate:float)\nSurvival_rate(\"Japan\", \"breast cancer\", 0.90).\nSurvival_rate(\"Sweden\", \"breast cancer\", 0.85).\n.decl Answer()\nAnswer() :- Survival_rate(\"Japan\", \"breast cancer\", rate1), Survival_rate(\"Sweden\", \"breast cancer\", rate2), rate1 > rate2.\n.output Answer", "completions": [".decl Survival_rate(Country:symbol, Cancer_type:symbol, Rate:float)\nSurvival_rate(\"Japan\", \"breast cancer\", 0.90).\nSurvival_rate(\"Sweden\", \"breast cancer\", 0.85).\n.decl Answer()\nAnswer() :- Survival_rate(\"Japan\", \"breast cancer\", rate1), Survival_rate(\"Sweden\", \"breast cancer\", rate2), rate1 > rate2.\n.output Answer"]}
{"id": 273, "answer": true, "completion": ".decl Inspired_by(Person:symbol, Source:symbol)\nInspired_by(\"Washington Irving\", \"European folklore\").\nInspired_by(\"Washington Irving\", \"American history\").\nInspired_by(\"Washington Irving\", \"Classical literature\").\nInspired_by(\"Washington Irving\", \"Irish mythology\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Washington Irving\", \"Irish mythology\").\n.output Answer", "completions": [".decl Inspired_by(Person:symbol, Source:symbol)\nInspired_by(\"Washington Irving\", \"European folklore\").\nInspired_by(\"Washington Irving\", \"American history\").\nInspired_by(\"Washington Irving\", \"Classical literature\").\nInspired_by(\"Washington Irving\", \"Irish mythology\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Washington Irving\", \"Irish mythology\").\n.output Answer"]}
{"id": 274, "answer": true, "completion": ".decl Required_for_activity(Body_part:symbol, Activity:symbol)\nRequired_for_activity(\"tibia\", \"running\").\nRequired_for_activity(\"tibia\", \"jumping\").\nRequired_for_activity(\"tibia\", \"walking\").\nRequired_for_activity(\"tibia\", \"floor exercises\").\n.decl Answer()\nAnswer() :- Required_for_activity(\"tibia\", \"floor exercises\").\n.output Answer", "completions": [".decl Required_for_activity(Body_part:symbol, Activity:symbol)\nRequired_for_activity(\"tibia\", \"running\").\nRequired_for_activity(\"tibia\", \"jumping\").\nRequired_for_activity(\"tibia\", \"walking\").\nRequired_for_activity(\"tibia\", \"floor exercises\").\n.decl Answer()\nAnswer() :- Required_for_activity(\"tibia\", \"floor exercises\").\n.output Answer"]}
{"id": 275, "answer": false, "completion": ".decl Is_a(Character:symbol, Type:symbol)\nIs_a(\"Nancy Drew\", \"detective\").\nIs_a(\"Nancy Drew\", \"amateur sleuth\").\nIs_a(\"Nancy Drew\", \"teenage detective\").\n.decl Answer()\nAnswer() :- Is_a(\"Emma Roberts\", \"actress\"), Is_a(character, \"Nancy Drew\"), Is_a(character, \"detective\").\n.output Answer", "completions": [".decl Is_a(Character:symbol, Type:symbol)\nIs_a(\"Nancy Drew\", \"detective\").\nIs_a(\"Nancy Drew\", \"amateur sleuth\").\nIs_a(\"Nancy Drew\", \"teenage detective\").\n.decl Answer()\nAnswer() :- Is_a(\"Emma Roberts\", \"actress\"), Is_a(character, \"Nancy Drew\"), Is_a(character, \"detective\").\n.output Answer"]}
{"id": 276, "answer": false, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"minor\", 17).\n.decl Has_experiment(Person:symbol, Experiment:symbol)\nHas_experiment(\"minor\", \"double-slit experiment\").\n.decl Answer()\nAnswer() :- Age(\"minor\", age), age >= 18, Has_experiment(\"minor\", \"double-slit experiment\").\nAnswer() :- Age(\"minor\", age), age < 18, !Has_experiment(\"minor\", \"double-slit experiment\").\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"minor\", 17).\n.decl Has_experiment(Person:symbol, Experiment:symbol)\nHas_experiment(\"minor\", \"double-slit experiment\").\n.decl Answer()\nAnswer() :- Age(\"minor\", age), age >= 18, Has_experiment(\"minor\", \"double-slit experiment\").\nAnswer() :- Age(\"minor\", age), age < 18, !Has_experiment(\"minor\", \"double-slit experiment\").\n.output Answer"]}
{"id": 277, "answer": false, "completion": ".decl Established_by_Alfred_Nobel(Category:symbol)\nEstablished_by_Alfred_Nobel(\"physics\").\nEstablished_by_Alfred_Nobel(\"chemistry\").\nEstablished_by_Alfred_Nobel(\"medicine\").\nEstablished_by_Alfred_Nobel(\"literature\").\nEstablished_by_Alfred_Nobel(\"peace\").\n.decl Awarded_in_Category(Year:float, Category:symbol)\nAwarded_in_Category(1901, \"physics\").\nAwarded_in_Category(1901, \"chemistry\").\nAwarded_in_Category(1901, \"medicine\").\nAwarded_in_Category(1901, \"literature\").\nAwarded_in_Category(1901, \"peace\").\nAwarded_in_Category(2021, \"physics\").\nAwarded_in_Category(2021, \"chemistry\").\nAwarded_in_Category(2021, \"medicine\").\nAwarded_in_Category(2021, \"literature\").\nAwarded_in_Category(2021, \"peace\").\n.decl Answer()\nAnswer() :- Established_by_Alfred_Nobel(category), !Awarded_in_Category(year, category).\nAnswer() :- !Established_by_Alfred_Nobel(category), Awarded_in_Category(year, category).\n.output Answer", "completions": [".decl Established_by_Alfred_Nobel(Category:symbol)\nEstablished_by_Alfred_Nobel(\"physics\").\nEstablished_by_Alfred_Nobel(\"chemistry\").\nEstablished_by_Alfred_Nobel(\"medicine\").\nEstablished_by_Alfred_Nobel(\"literature\").\nEstablished_by_Alfred_Nobel(\"peace\").\n.decl Awarded_in_Category(Year:float, Category:symbol)\nAwarded_in_Category(1901, \"physics\").\nAwarded_in_Category(1901, \"chemistry\").\nAwarded_in_Category(1901, \"medicine\").\nAwarded_in_Category(1901, \"literature\").\nAwarded_in_Category(1901, \"peace\").\nAwarded_in_Category(2021, \"physics\").\nAwarded_in_Category(2021, \"chemistry\").\nAwarded_in_Category(2021, \"medicine\").\nAwarded_in_Category(2021, \"literature\").\nAwarded_in_Category(2021, \"peace\").\n.decl Answer()\nAnswer() :- Established_by_Alfred_Nobel(category), !Awarded_in_Category(year, category).\nAnswer() :- !Established_by_Alfred_Nobel(category), Awarded_in_Category(year, category).\n.output Answer"]}
{"id": 278, "answer": true, "completion": ".decl Member_of(Party:symbol, Person:symbol)\nMember_of(\"Green Party of England and Wales\", \"John Smith\").\n.decl Answer()\nAnswer() :- Member_of(\"Green Party of England and Wales\", person), person != \"John Smith\".\n.output Answer", "completions": [".decl Member_of(Party:symbol, Person:symbol)\nMember_of(\"Green Party of England and Wales\", \"John Smith\").\n.decl Answer()\nAnswer() :- Member_of(\"Green Party of England and Wales\", person), person != \"John Smith\".\n.output Answer"]}
{"id": 279, "answer": false, "completion": ".decl Died(Person:symbol, Year:float)\nDied(\"Alan Turing\", 1954).\nDied(\"Abraham Lincoln\", 1865).\n.decl Assassinated(Person:symbol)\nAssassinated(\"Abraham Lincoln\").\n.decl Answer()\nAnswer() :- Died(\"Alan Turing\", year1), Died(\"Abraham Lincoln\", year2), year1 = year2.\nAnswer() :- Assassinated(\"Abraham Lincoln\"), !Died(\"Alan Turing\", _).\n.output Answer", "completions": [".decl Died(Person:symbol, Year:float)\nDied(\"Alan Turing\", 1954).\nDied(\"Abraham Lincoln\", 1865).\n.decl Assassinated(Person:symbol)\nAssassinated(\"Abraham Lincoln\").\n.decl Answer()\nAnswer() :- Died(\"Alan Turing\", year1), Died(\"Abraham Lincoln\", year2), year1 = year2.\nAnswer() :- Assassinated(\"Abraham Lincoln\"), !Died(\"Alan Turing\", _).\n.output Answer"]}
{"id": 280, "answer": true, "completion": ".decl Said_by(Person:symbol, Catchphrase:symbol, Year:float)\nSaid_by(\"Rand Paul\", \"flip-flop\", 2004).\n.decl Answer()\nAnswer() :- Said_by(\"Rand Paul\", \"flip-flop\", year).\n.output Answer", "completions": [".decl Said_by(Person:symbol, Catchphrase:symbol, Year:float)\nSaid_by(\"Rand Paul\", \"flip-flop\", 2004).\n.decl Answer()\nAnswer() :- Said_by(\"Rand Paul\", \"flip-flop\", year).\n.output Answer"]}
{"id": 281, "answer": false, "completion": ".decl Is_gas(Element:symbol)\nIs_gas(\"argon\").\n.decl Answer()\nAnswer() :- !Is_gas(\"argon\").\n.output Answer", "completions": [".decl Is_gas(Element:symbol)\nIs_gas(\"argon\").\n.decl Answer()\nAnswer() :- !Is_gas(\"argon\").\n.output Answer"]}
{"id": 282, "answer": false, "completion": ".decl Remembers(Person:symbol, Event:symbol, Outcome:symbol)\nRemembers(\"people\", \"Lucille Ball's winemaking\", \"successful\").\n.decl Answer()\nAnswer() :- Remembers(\"people\", \"Lucille Ball's winemaking\", \"successful\").\n.output Answer", "completions": [".decl Remembers(Person:symbol, Event:symbol, Outcome:symbol)\nRemembers(\"people\", \"Lucille Ball's winemaking\", \"successful\").\n.decl Answer()\nAnswer() :- Remembers(\"people\", \"Lucille Ball's winemaking\", \"successful\").\n.output Answer"]}
{"id": 283, "answer": true, "completion": ".decl Used_in(Product:symbol, Material:symbol)\nUsed_in(\"guitar\", \"wood\").\nUsed_in(\"guitar\", \"metal\").\nUsed_in(\"guitar\", \"plastic\").\nUsed_in(\"oysters\", \"food\").\n.decl Answer()\nAnswer() :- Used_in(\"guitar\", material), !Used_in(\"oysters\", material).\n.output Answer", "completions": [".decl Used_in(Product:symbol, Material:symbol)\nUsed_in(\"guitar\", \"wood\").\nUsed_in(\"guitar\", \"metal\").\nUsed_in(\"guitar\", \"plastic\").\nUsed_in(\"oysters\", \"food\").\n.decl Answer()\nAnswer() :- Used_in(\"guitar\", material), !Used_in(\"oysters\", material).\n.output Answer"]}
{"id": 284, "answer": false, "completion": ".decl Plays_in_band(Musician:symbol, Instrument:symbol, Band:symbol)\nPlays_in_band(\"James Cotton\", \"harmonica\", \"blues band\").\nPlays_in_band(\"John Coltrane\", \"saxophone\", \"jazz band\").\n.decl Has_genre(Band:symbol, Genre:symbol)\nHas_genre(\"blues band\", \"blues\").\nHas_genre(\"jazz band\", \"smooth jazz\").\n.decl Answer()\nAnswer() :- Plays_in_band(\"James Cotton\", instrument1, band1), Has_genre(band1, genre1), genre1 != \"smooth jazz\".\n.output Answer", "completions": [".decl Plays_in_band(Musician:symbol, Instrument:symbol, Band:symbol)\nPlays_in_band(\"James Cotton\", \"harmonica\", \"blues band\").\nPlays_in_band(\"John Coltrane\", \"saxophone\", \"jazz band\").\n.decl Has_genre(Band:symbol, Genre:symbol)\nHas_genre(\"blues band\", \"blues\").\nHas_genre(\"jazz band\", \"smooth jazz\").\n.decl Answer()\nAnswer() :- Plays_in_band(\"James Cotton\", instrument1, band1), Has_genre(band1, genre1), genre1 != \"smooth jazz\".\n.output Answer"]}
{"id": 285, "answer": false, "completion": ".decl Is_related_to(Animal_A:symbol, Animal_B:symbol)\nIs_related_to(\"elk\", \"deer\").\nIs_related_to(\"deer\", \"moose\").\nIs_related_to(\"emu\", \"ostrich\").\nIs_related_to(\"ostrich\", \"kiwi\").\n.decl Answer()\nAnswer() :- Is_related_to(\"emu\", animal), Is_related_to(animal, \"elk\").\n.output Answer", "completions": [".decl Is_related_to(Animal_A:symbol, Animal_B:symbol)\nIs_related_to(\"elk\", \"deer\").\nIs_related_to(\"deer\", \"moose\").\nIs_related_to(\"emu\", \"ostrich\").\nIs_related_to(\"ostrich\", \"kiwi\").\n.decl Answer()\nAnswer() :- Is_related_to(\"emu\", animal), Is_related_to(animal, \"elk\").\n.output Answer"]}
{"id": 286, "answer": true, "completion": ".decl In_museum(Artwork:symbol, Museum:symbol)\nIn_museum(\"Mona Lisa\", \"Louvre Museum\").\nIn_museum(\"Venus de Milo\", \"Louvre Museum\").\n.decl Answer()\nAnswer() :- In_museum(\"Mona Lisa\", museum1), In_museum(\"Venus de Milo\", museum2), museum1 = museum2.\n.output Answer", "completions": [".decl In_museum(Artwork:symbol, Museum:symbol)\nIn_museum(\"Mona Lisa\", \"Louvre Museum\").\nIn_museum(\"Venus de Milo\", \"Louvre Museum\").\n.decl Answer()\nAnswer() :- In_museum(\"Mona Lisa\", museum1), In_museum(\"Venus de Milo\", museum2), museum1 = museum2.\n.output Answer"]}
{"id": 287, "answer": false, "completion": ".decl Descendant(Person:symbol, Ancestor:symbol)\nDescendant(\"John Adams\", \"English ancestors\").\n.decl Ancestry(Person:symbol, Ancestor:symbol)\nAncestry(\"John Adams\", \"English ancestors\").\nAncestry(\"John Adams\", \"French ancestors\").\nAncestry(\"John Adams\", \"Dutch ancestors\").\nAncestry(\"John Adams\", \"Welsh ancestors\").\n.decl Answer()\nAnswer() :- Ancestry(\"John Adams\", \"Ottoman ancestors\"), !Descendant(\"John Adams\", \"English ancestors\").\n.output Answer", "completions": [".decl Descendant(Person:symbol, Ancestor:symbol)\nDescendant(\"John Adams\", \"English ancestors\").\n.decl Ancestry(Person:symbol, Ancestor:symbol)\nAncestry(\"John Adams\", \"English ancestors\").\nAncestry(\"John Adams\", \"French ancestors\").\nAncestry(\"John Adams\", \"Dutch ancestors\").\nAncestry(\"John Adams\", \"Welsh ancestors\").\n.decl Answer()\nAnswer() :- Ancestry(\"John Adams\", \"Ottoman ancestors\"), !Descendant(\"John Adams\", \"English ancestors\").\n.output Answer"]}
{"id": 288, "answer": false, "completion": ".decl Has_n_sequels(Franchise:symbol, N_sequels:float)\nHas_n_sequels(\"Gremlins\", 2).\nHas_n_sequels(\"The Matrix\", 4).\n.decl Answer()\nAnswer() :- Has_n_sequels(\"Gremlins\", n1), Has_n_sequels(\"The Matrix\", n2), n1 = n2.\n.output Answer", "completions": [".decl Has_n_sequels(Franchise:symbol, N_sequels:float)\nHas_n_sequels(\"Gremlins\", 2).\nHas_n_sequels(\"The Matrix\", 4).\n.decl Answer()\nAnswer() :- Has_n_sequels(\"Gremlins\", n1), Has_n_sequels(\"The Matrix\", n2), n1 = n2.\n.output Answer"]}
{"id": 289, "answer": true, "completion": ".decl Has_field_of_study(Person:symbol, Field:symbol)\nHas_field_of_study(\"Tony Stark\", \"engineering\").\nHas_field_of_study(\"Tony Stark\", \"physics\").\nHas_field_of_study(\"Tony Stark\", \"computer science\").\n.decl Answer()\nAnswer() :- Has_field_of_study(\"Tony Stark\", field1), Has_field_of_study(\"Tony Stark\", field2), field1 != field2.\n.output Answer", "completions": [".decl Has_field_of_study(Person:symbol, Field:symbol)\nHas_field_of_study(\"Tony Stark\", \"engineering\").\nHas_field_of_study(\"Tony Stark\", \"physics\").\nHas_field_of_study(\"Tony Stark\", \"computer science\").\n.decl Answer()\nAnswer() :- Has_field_of_study(\"Tony Stark\", field1), Has_field_of_study(\"Tony Stark\", field2), field1 != field2.\n.output Answer"]}
{"id": 290, "answer": true, "completion": ".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"John\", \"driver's license\").\nHas_license(\"Jane\", \"pilot's license\").\n.decl Works_in(Job:symbol, Industry:symbol)\nWorks_in(\"aviation fuel transport\", \"transportation\").\nWorks_in(\"piloting\", \"aviation\").\n.decl Answer()\nAnswer() :- Has_license(person, license), Works_in(\"aviation fuel transport\", industry), license = \"driver's license\".\n.output Answer", "completions": [".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"John\", \"driver's license\").\nHas_license(\"Jane\", \"pilot's license\").\n.decl Works_in(Job:symbol, Industry:symbol)\nWorks_in(\"aviation fuel transport\", \"transportation\").\nWorks_in(\"piloting\", \"aviation\").\n.decl Answer()\nAnswer() :- Has_license(person, license), Works_in(\"aviation fuel transport\", industry), license = \"driver's license\".\n.output Answer"]}
{"id": 291, "answer": true, "completion": ".decl Received_medals(Country:symbol, Year:float, Medals:float)\nReceived_medals(\"Soviet Union\", 1976, 125).\nReceived_medals(\"East Germany\", 1976, 90).\nReceived_medals(\"United States\", 1976, 94).\n.decl Exists(Country:symbol)\nExists(country) :- Received_medals(country, 1976, medals1), !Received_medals(country2, 1976, medals2), medals1 >= medals2.\n.decl Still_exists(Country:symbol)\nStill_exists(\"Soviet Union\").\nStill_exists(\"East Germany\").\nStill_exists(\"United States\").\n.decl Answer()\nAnswer() :- Exists(country), Still_exists(country).\n.output Answer", "completions": [".decl Received_medals(Country:symbol, Year:float, Medals:float)\nReceived_medals(\"Soviet Union\", 1976, 125).\nReceived_medals(\"East Germany\", 1976, 90).\nReceived_medals(\"United States\", 1976, 94).\n.decl Exists(Country:symbol)\nExists(country) :- Received_medals(country, 1976, medals1), !Received_medals(country2, 1976, medals2), medals1 >= medals2.\n.decl Still_exists(Country:symbol)\nStill_exists(\"Soviet Union\").\nStill_exists(\"East Germany\").\nStill_exists(\"United States\").\n.decl Answer()\nAnswer() :- Exists(country), Still_exists(country).\n.output Answer"]}
{"id": 292, "answer": false, "completion": ".decl Finishes_before(Event_A:symbol, Event_B:symbol)\nFinishes_before(\"open heart surgery\", \"American Ballet Theatre's Swan Lake\").\n.decl Lasts_for(Event:symbol, Duration:float)\nLasts_for(\"open heart surgery\", 4).\nLasts_for(\"American Ballet Theatre's Swan Lake\", 3).\n.decl Answer()\nAnswer() :- Finishes_before(\"open heart surgery\", \"American Ballet Theatre's Swan Lake\"), Lasts_for(\"open heart surgery\", duration1), Lasts_for(\"American Ballet Theatre's Swan Lake\", duration2), duration1 < duration2.\n.output Answer", "completions": [".decl Finishes_before(Event_A:symbol, Event_B:symbol)\nFinishes_before(\"open heart surgery\", \"American Ballet Theatre's Swan Lake\").\n.decl Lasts_for(Event:symbol, Duration:float)\nLasts_for(\"open heart surgery\", 4).\nLasts_for(\"American Ballet Theatre's Swan Lake\", 3).\n.decl Answer()\nAnswer() :- Finishes_before(\"open heart surgery\", \"American Ballet Theatre's Swan Lake\"), Lasts_for(\"open heart surgery\", duration1), Lasts_for(\"American Ballet Theatre's Swan Lake\", duration2), duration1 < duration2.\n.output Answer"]}
{"id": 293, "answer": true, "completion": ".decl Is_fastest(Method:symbol)\nIs_fastest(\"internet search\").\nIs_fastest(\"calling directory assistance\").\nIs_fastest(\"asking a friend\").\n.decl Answer()\nAnswer() :- Is_fastest(\"internet search\"), !Is_fastest(\"Yellow Pages\").\n.output Answer", "completions": [".decl Is_fastest(Method:symbol)\nIs_fastest(\"internet search\").\nIs_fastest(\"calling directory assistance\").\nIs_fastest(\"asking a friend\").\n.decl Answer()\nAnswer() :- Is_fastest(\"internet search\"), !Is_fastest(\"Yellow Pages\").\n.output Answer"]}
{"id": 294, "answer": true, "completion": ".decl Served_on_court(Person:symbol, Court:symbol)\nServed_on_court(\"Sandra Day O'Connor\", \"Supreme Court of the United States\").\n.decl Is_species(Person:symbol, Species:symbol)\nIs_species(\"Sandra Day O'Connor\", \"Homo sapiens\").\n.decl Answer()\nAnswer() :- Served_on_court(person, \"Supreme Court of the United States\"), !Is_species(person, \"Homo neanderthalensis\").\n.output Answer", "completions": [".decl Served_on_court(Person:symbol, Court:symbol)\nServed_on_court(\"Sandra Day O'Connor\", \"Supreme Court of the United States\").\n.decl Is_species(Person:symbol, Species:symbol)\nIs_species(\"Sandra Day O'Connor\", \"Homo sapiens\").\n.decl Answer()\nAnswer() :- Served_on_court(person, \"Supreme Court of the United States\"), !Is_species(person, \"Homo neanderthalensis\").\n.output Answer"]}
{"id": 295, "answer": false, "completion": ".decl Went_on_tour(Band1:symbol, Band2:symbol)\nWent_on_tour(\"Maroon 5\", \"Kanye West\").\nWent_on_tour(\"Nirvana\", \"Sonic Youth\").\n.decl Answer()\nAnswer() :- Went_on_tour(\"Maroon 5\", band), Went_on_tour(\"Nirvana\", band).\n.output Answer", "completions": [".decl Went_on_tour(Band1:symbol, Band2:symbol)\nWent_on_tour(\"Maroon 5\", \"Kanye West\").\nWent_on_tour(\"Nirvana\", \"Sonic Youth\").\n.decl Answer()\nAnswer() :- Went_on_tour(\"Maroon 5\", band), Went_on_tour(\"Nirvana\", band).\n.output Answer"]}
{"id": 296, "answer": false, "completion": ".decl Is_location(Location:symbol)\nIs_location(\"Antarctica\").\n.decl Answer()\nAnswer() :- !Is_location(\"Antarctica\").\n.output Answer", "completions": [".decl Is_location(Location:symbol)\nIs_location(\"Antarctica\").\n.decl Answer()\nAnswer() :- !Is_location(\"Antarctica\").\n.output Answer"]}
{"id": 297, "answer": false, "completion": ".decl Causes_effect(Cause:symbol, Effect:symbol)\nCauses_effect(\"density of gas\", \"pitch of voice\").\n.decl Has_density(Element:symbol, Density:float)\nHas_density(\"helium\", 0.1785).\n.decl Answer()\nAnswer() :- Causes_effect(cause, \"pitch of voice\"), Causes_effect(\"density of gas\", effect), Has_density(element, density), cause = \"density of helium\", effect = \"pitch of voice\", density < 1.\n.output Answer", "completions": [".decl Causes_effect(Cause:symbol, Effect:symbol)\nCauses_effect(\"density of gas\", \"pitch of voice\").\n.decl Has_density(Element:symbol, Density:float)\nHas_density(\"helium\", 0.1785).\n.decl Answer()\nAnswer() :- Causes_effect(cause, \"pitch of voice\"), Causes_effect(\"density of gas\", effect), Has_density(element, density), cause = \"density of helium\", effect = \"pitch of voice\", density < 1.\n.output Answer"]}
{"id": 298, "answer": false, "completion": ".decl Is_fuel(Source:symbol, Fuel:symbol)\nIs_fuel(\"petroleum jelly\", \"no\").\n.decl Answer()\nAnswer() :- Is_fuel(\"petroleum jelly\", fuel), fuel = \"yes\".\n.output Answer", "completions": [".decl Is_fuel(Source:symbol, Fuel:symbol)\nIs_fuel(\"petroleum jelly\", \"no\").\n.decl Answer()\nAnswer() :- Is_fuel(\"petroleum jelly\", fuel), fuel = \"yes\".\n.output Answer"]}
{"id": 299, "answer": false, "completion": ".decl Prevalent_sin(Sin:symbol)\nPrevalent_sin(\"envy\").\nPrevalent_sin(\"wrath\").\nPrevalent_sin(\"pride\").\nPrevalent_sin(\"lust\").\nPrevalent_sin(\"gluttony\").\nPrevalent_sin(\"sloth\").\nPrevalent_sin(\"greed\").\n.decl Answer()\nAnswer() :- Prevalent_sin(sin1), Prevalent_sin(sin2), sin1 != sin2, !Prevalent_sin(sin3), sin1 != sin3, sin2 != sin3.\n.output Answer", "completions": [".decl Prevalent_sin(Sin:symbol)\nPrevalent_sin(\"envy\").\nPrevalent_sin(\"wrath\").\nPrevalent_sin(\"pride\").\nPrevalent_sin(\"lust\").\nPrevalent_sin(\"gluttony\").\nPrevalent_sin(\"sloth\").\nPrevalent_sin(\"greed\").\n.decl Answer()\nAnswer() :- Prevalent_sin(sin1), Prevalent_sin(sin2), sin1 != sin2, !Prevalent_sin(sin3), sin1 != sin3, sin2 != sin3.\n.output Answer"]}
{"id": 300, "answer": true, "completion": ".decl Is_ceo(Person:symbol, Company:symbol)\nIs_ceo(\"Carlos Ghosn\", \"Nissan\").\n.decl Wanted(Person:symbol)\nWanted(\"Carlos Ghosn\").\n.decl Answer()\nAnswer() :- Is_ceo(person, \"Nissan\"), Wanted(person).\n.output Answer", "completions": [".decl Is_ceo(Person:symbol, Company:symbol)\nIs_ceo(\"Carlos Ghosn\", \"Nissan\").\n.decl Wanted(Person:symbol)\nWanted(\"Carlos Ghosn\").\n.decl Answer()\nAnswer() :- Is_ceo(person, \"Nissan\"), Wanted(person).\n.output Answer"]}
{"id": 301, "answer": true, "completion": ".decl Takes_drug(Person:symbol, Drug:symbol)\nTakes_drug(\"drag king\", \"testosterone\").\n.decl Looks_like(Person:symbol, Gender:symbol)\nLooks_like(\"drag king\", \"masculine\").\n.decl Answer()\nAnswer() :- Takes_drug(\"drag king\", \"testosterone\"), Looks_like(\"drag king\", \"masculine\").\n.output Answer", "completions": [".decl Takes_drug(Person:symbol, Drug:symbol)\nTakes_drug(\"drag king\", \"testosterone\").\n.decl Looks_like(Person:symbol, Gender:symbol)\nLooks_like(\"drag king\", \"masculine\").\n.decl Answer()\nAnswer() :- Takes_drug(\"drag king\", \"testosterone\"), Looks_like(\"drag king\", \"masculine\").\n.output Answer"]}
{"id": 302, "answer": false, "completion": ".decl Lives_in(Environment:symbol, Animal:symbol)\nLives_in(\"ocean\", \"lobster\").\nLives_in(\"ocean\", \"crab\").\nLives_in(\"freshwater\", \"crayfish\").\n.decl Answer()\nAnswer() :- Lives_in(environment, \"crustacean\"), environment != \"ocean\".\n.output Answer", "completions": [".decl Lives_in(Environment:symbol, Animal:symbol)\nLives_in(\"ocean\", \"lobster\").\nLives_in(\"ocean\", \"crab\").\nLives_in(\"freshwater\", \"crayfish\").\n.decl Answer()\nAnswer() :- Lives_in(environment, \"crustacean\"), environment != \"ocean\".\n.output Answer"]}
{"id": 303, "answer": true, "completion": ".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"Paul Bunyan\", \"lumberjack\").\n.decl Skills(Job:symbol, Skill:symbol)\nSkills(\"urban planner\", \"city design\").\nSkills(\"lumberjack\", \"tree cutting\").\n.decl Answer()\nAnswer() :- Occupation(\"Paul Bunyan\", job), Skills(\"urban planner\", skill), !Skills(job, skill).\n.output Answer", "completions": [".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"Paul Bunyan\", \"lumberjack\").\n.decl Skills(Job:symbol, Skill:symbol)\nSkills(\"urban planner\", \"city design\").\nSkills(\"lumberjack\", \"tree cutting\").\n.decl Answer()\nAnswer() :- Occupation(\"Paul Bunyan\", job), Skills(\"urban planner\", skill), !Skills(job, skill).\n.output Answer"]}
{"id": 304, "answer": false, "completion": ".decl Can_reach_depth(Light_source:symbol, Depth:float)\nCan_reach_depth(\"sunlight\", 200).\n.decl Answer()\nAnswer() :- Can_reach_depth(\"sunlight\", depth), depth >= 2200.\n.output Answer", "completions": [".decl Can_reach_depth(Light_source:symbol, Depth:float)\nCan_reach_depth(\"sunlight\", 200).\n.decl Answer()\nAnswer() :- Can_reach_depth(\"sunlight\", depth), depth >= 2200.\n.output Answer"]}
{"id": 305, "answer": true, "completion": ".decl Is_classified_as(Object:symbol, Classification:symbol)\nIs_classified_as(\"slingshot\", \"weapon\").\nIs_classified_as(\"artillery\", \"weapon\").\nIs_classified_as(\"artillery\", \"heavy weapon\").\n.decl Answer()\nAnswer() :- Is_classified_as(\"slingshot\", classification1), Is_classified_as(\"artillery\", classification2), classification1 != classification2.\n.output Answer", "completions": [".decl Is_classified_as(Object:symbol, Classification:symbol)\nIs_classified_as(\"slingshot\", \"weapon\").\nIs_classified_as(\"artillery\", \"weapon\").\nIs_classified_as(\"artillery\", \"heavy weapon\").\n.decl Answer()\nAnswer() :- Is_classified_as(\"slingshot\", classification1), Is_classified_as(\"artillery\", classification2), classification1 != classification2.\n.output Answer"]}
{"id": 306, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"9/11\", \"September 2001\").\nHappens_in_time(\"don't ask don't tell\", \"1993-2011\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"9/11\", time1), Happens_in_time(\"don't ask don't tell\", time2), time2 >= time1, time2 <= time1 + 1.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"9/11\", \"September 2001\").\nHappens_in_time(\"don't ask don't tell\", \"1993-2011\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"9/11\", time1), Happens_in_time(\"don't ask don't tell\", time2), time2 >= time1, time2 <= time1 + 1.\n.output Answer"]}
{"id": 307, "answer": false, "completion": ".decl Has_number_of_labors(Person:symbol, N_labors:float)\nHas_number_of_labors(\"Heracles\", 12).\n.decl Answer()\nAnswer() :- Has_number_of_labors(\"Heracles\", n_labors), n_labors > 13.\n.output Answer", "completions": [".decl Has_number_of_labors(Person:symbol, N_labors:float)\nHas_number_of_labors(\"Heracles\", 12).\n.decl Answer()\nAnswer() :- Has_number_of_labors(\"Heracles\", n_labors), n_labors > 13.\n.output Answer"]}
{"id": 308, "answer": true, "completion": ".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Thanksgiving\", \"fourth Thursday in November\").\n.decl Considered(Event:symbol, Concept:symbol)\nConsidered(\"Thanksgiving\", \"day of gratitude\").\nConsidered(\"Thanksgiving\", \"day of mourning\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Thanksgiving\", day), Considered(\"Thanksgiving\", \"day of mourning\").\n.output Answer", "completions": [".decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Thanksgiving\", \"fourth Thursday in November\").\n.decl Considered(Event:symbol, Concept:symbol)\nConsidered(\"Thanksgiving\", \"day of gratitude\").\nConsidered(\"Thanksgiving\", \"day of mourning\").\n.decl Answer()\nAnswer() :- Happens_on_day(\"Thanksgiving\", day), Considered(\"Thanksgiving\", \"day of mourning\").\n.output Answer"]}
{"id": 309, "answer": false, "completion": ".decl Is_monarch(Person:symbol)\nIs_monarch(\"Hapshetsut\").\n.decl Is_ruler(Person:symbol)\nIs_ruler(\"Hapshetsut\").\n.decl Answer()\nAnswer() :- Is_monarch(person), !Is_ruler(person).\n.output Answer", "completions": [".decl Is_monarch(Person:symbol)\nIs_monarch(\"Hapshetsut\").\n.decl Is_ruler(Person:symbol)\nIs_ruler(\"Hapshetsut\").\n.decl Answer()\nAnswer() :- Is_monarch(person), !Is_ruler(person).\n.output Answer"]}
{"id": 310, "answer": true, "completion": ".decl Era(Era:symbol)\nEra(\"Golden Age of Piracy\").\nEra(\"Noah's Ark\").\n.decl Has_feature(Era:symbol, Feature:symbol)\nHas_feature(\"Golden Age of Piracy\", \"pirates\").\nHas_feature(\"Noah's Ark\", \"animals\").\n.decl Answer()\nAnswer() :- Has_feature(\"Noah's Ark\", feature), !Has_feature(\"Golden Age of Piracy\", feature).\n.output Answer", "completions": [".decl Era(Era:symbol)\nEra(\"Golden Age of Piracy\").\nEra(\"Noah's Ark\").\n.decl Has_feature(Era:symbol, Feature:symbol)\nHas_feature(\"Golden Age of Piracy\", \"pirates\").\nHas_feature(\"Noah's Ark\", \"animals\").\n.decl Answer()\nAnswer() :- Has_feature(\"Noah's Ark\", feature), !Has_feature(\"Golden Age of Piracy\", feature).\n.output Answer"]}
{"id": 311, "answer": true, "completion": ".decl Recommended_daily_intake(Nutrient:symbol, Amount:float)\nRecommended_daily_intake(\"sodium\", 2300).\n.decl Has_nutrient(Food:symbol, Nutrient:symbol, Amount:float)\nHas_nutrient(\"Campbell's Soup\", \"sodium\", 890).\n.decl Answer()\nAnswer() :- Has_nutrient(\"Campbell's Soup\", nutrient, amount), Recommended_daily_intake(nutrient, recommended_amount), amount*2 <= recommended_amount.\n.output Answer", "completions": [".decl Recommended_daily_intake(Nutrient:symbol, Amount:float)\nRecommended_daily_intake(\"sodium\", 2300).\n.decl Has_nutrient(Food:symbol, Nutrient:symbol, Amount:float)\nHas_nutrient(\"Campbell's Soup\", \"sodium\", 890).\n.decl Answer()\nAnswer() :- Has_nutrient(\"Campbell's Soup\", nutrient, amount), Recommended_daily_intake(nutrient, recommended_amount), amount*2 <= recommended_amount.\n.output Answer"]}
{"id": 312, "answer": true, "completion": ".decl Company_profit(Company:symbol, Profit:float)\nCompany_profit(\"Electronic Arts\", 1000000).\n.decl Game_sales(Game:symbol, Sales:float)\nGame_sales(\"Metroid\", 500000).\n.decl Answer()\nAnswer() :- Company_profit(\"Electronic Arts\", profit), Game_sales(\"Metroid\", sales), sales * 50 > profit.\n.output Answer", "completions": [".decl Company_profit(Company:symbol, Profit:float)\nCompany_profit(\"Electronic Arts\", 1000000).\n.decl Game_sales(Game:symbol, Sales:float)\nGame_sales(\"Metroid\", 500000).\n.decl Answer()\nAnswer() :- Company_profit(\"Electronic Arts\", profit), Game_sales(\"Metroid\", sales), sales * 50 > profit.\n.output Answer"]}
{"id": 313, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"snowboarding\", \"Hilo\").\nHappens_in_place(\"surfing\", \"Hilo\").\nHappens_in_place(\"snowboarding\", \"Aspen\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"snowboarding\", place), !Happens_in_place(\"surfing\", place).\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"snowboarding\", \"Hilo\").\nHappens_in_place(\"surfing\", \"Hilo\").\nHappens_in_place(\"snowboarding\", \"Aspen\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"snowboarding\", place), !Happens_in_place(\"surfing\", place).\n.output Answer"]}
{"id": 314, "answer": false, "completion": ".decl Can_shoot(Person:symbol, Object:symbol, Distance:float)\nCan_shoot(\"sniper\", \"fish\", 1000).\n.decl Is_in_zone(Object:symbol, Zone:symbol)\nIs_in_zone(\"fish\", \"Bathypelagic Zone\").\n.decl Answer()\nAnswer() :- Can_shoot(\"sniper\", object, distance), Is_in_zone(object, zone), distance > 2000, zone != \"Bathypelagic Zone\".\n.output Answer", "completions": [".decl Can_shoot(Person:symbol, Object:symbol, Distance:float)\nCan_shoot(\"sniper\", \"fish\", 1000).\n.decl Is_in_zone(Object:symbol, Zone:symbol)\nIs_in_zone(\"fish\", \"Bathypelagic Zone\").\n.decl Answer()\nAnswer() :- Can_shoot(\"sniper\", object, distance), Is_in_zone(object, zone), distance > 2000, zone != \"Bathypelagic Zone\".\n.output Answer"]}
{"id": 315, "answer": true, "completion": ".decl Influenced_by(Artist:symbol, Genre:symbol)\nInfluenced_by(\"Depeche Mode\", \"electronic\").\nInfluenced_by(\"Depeche Mode\", \"new wave\").\nInfluenced_by(\"Led Zeppelin\", \"blues\").\nInfluenced_by(\"The Rolling Stones\", \"blues\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Depeche Mode\", genre1), Influenced_by(artist2, \"blues\"), artist2 != \"Depeche Mode\", genre1 != \"blues\".\n.output Answer", "completions": [".decl Influenced_by(Artist:symbol, Genre:symbol)\nInfluenced_by(\"Depeche Mode\", \"electronic\").\nInfluenced_by(\"Depeche Mode\", \"new wave\").\nInfluenced_by(\"Led Zeppelin\", \"blues\").\nInfluenced_by(\"The Rolling Stones\", \"blues\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Depeche Mode\", genre1), Influenced_by(artist2, \"blues\"), artist2 != \"Depeche Mode\", genre1 != \"blues\".\n.output Answer"]}
{"id": 316, "answer": false, "completion": ".decl Ingredient(Recipe:symbol, Ingredient:symbol)\nIngredient(\"pickles\", \"cucumbers\").\nIngredient(\"pickles\", \"salt\").\nIngredient(\"pickles\", \"water\").\nIngredient(\"pickles\", \"vinegar\").\nIngredient(\"pickles\", \"spices\").\n.decl Uses_bacteria(Recipe:symbol, Bacteria:symbol)\nUses_bacteria(\"pickles\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Ingredient(\"pickles\", \"cucumbers\"), Ingredient(\"pickles\", \"salt\"), Ingredient(\"pickles\", \"water\"), Ingredient(\"pickles\", \"vinegar\"), Ingredient(\"pickles\", \"spices\"), !Uses_bacteria(\"pickles\", bacteria).\n.output Answer", "completions": [".decl Ingredient(Recipe:symbol, Ingredient:symbol)\nIngredient(\"pickles\", \"cucumbers\").\nIngredient(\"pickles\", \"salt\").\nIngredient(\"pickles\", \"water\").\nIngredient(\"pickles\", \"vinegar\").\nIngredient(\"pickles\", \"spices\").\n.decl Uses_bacteria(Recipe:symbol, Bacteria:symbol)\nUses_bacteria(\"pickles\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Ingredient(\"pickles\", \"cucumbers\"), Ingredient(\"pickles\", \"salt\"), Ingredient(\"pickles\", \"water\"), Ingredient(\"pickles\", \"vinegar\"), Ingredient(\"pickles\", \"spices\"), !Uses_bacteria(\"pickles\", bacteria).\n.output Answer"]}
{"id": 317, "answer": true, "completion": ".decl Despises(Person:symbol, Being:symbol)\nDespises(\"King James I\", \"witches\").\nDespises(\"King James I\", \"fairies\").\n.decl Answer()\nAnswer() :- Despises(\"King James I\", \"fairies\").\n.output Answer", "completions": [".decl Despises(Person:symbol, Being:symbol)\nDespises(\"King James I\", \"witches\").\nDespises(\"King James I\", \"fairies\").\n.decl Answer()\nAnswer() :- Despises(\"King James I\", \"fairies\").\n.output Answer"]}
{"id": 318, "answer": true, "completion": ".decl Is_disability(Type:symbol)\nIs_disability(\"dyslexia\").\nIs_disability(\"autism\").\nIs_disability(\"Down syndrome\").\n.decl Has_prevalence(Type:symbol, Prevalence:float)\nHas_prevalence(\"dyslexia\", 10).\nHas_prevalence(\"autism\", 1.5).\nHas_prevalence(\"Down syndrome\", 0.1).\n.decl Answer()\nAnswer() :- Is_disability(type1), Has_prevalence(type1, prevalence1), Has_prevalence(type2, prevalence2), type1 != type2, prevalence1 < prevalence2.\n.output Answer", "completions": [".decl Is_disability(Type:symbol)\nIs_disability(\"dyslexia\").\nIs_disability(\"autism\").\nIs_disability(\"Down syndrome\").\n.decl Has_prevalence(Type:symbol, Prevalence:float)\nHas_prevalence(\"dyslexia\", 10).\nHas_prevalence(\"autism\", 1.5).\nHas_prevalence(\"Down syndrome\", 0.1).\n.decl Answer()\nAnswer() :- Is_disability(type1), Has_prevalence(type1, prevalence1), Has_prevalence(type2, prevalence2), type1 != type2, prevalence1 < prevalence2.\n.output Answer"]}
{"id": 319, "answer": false, "completion": ".decl Earns_more(Search_engine:symbol, Searcher:symbol)\nEarns_more(\"Bing\", \"John\").\nEarns_more(\"Google\", \"Jane\").\nEarns_more(\"Yahoo\", \"Bob\").\n.decl Answer()\nAnswer() :- Earns_more(\"Bing\", searcher), Earns_more(search_engine2, searcher), search_engine2 != \"Bing\".\n.output Answer", "completions": [".decl Earns_more(Search_engine:symbol, Searcher:symbol)\nEarns_more(\"Bing\", \"John\").\nEarns_more(\"Google\", \"Jane\").\nEarns_more(\"Yahoo\", \"Bob\").\n.decl Answer()\nAnswer() :- Earns_more(\"Bing\", searcher), Earns_more(search_engine2, searcher), search_engine2 != \"Bing\".\n.output Answer"]}
{"id": 320, "answer": false, "completion": ".decl Has_nutrition(Food:symbol, Nutrition:symbol)\nHas_nutrition(\"olives\", \"healthy\").\nHas_nutrition(\"potato chips\", \"unhealthy\").\n.decl Reduces_intake(Person:symbol, Nutrient:symbol)\nReduces_intake(\"John\", \"salt\").\n.decl Answer()\nAnswer() :- Reduces_intake(\"John\", nutrient), Has_nutrition(\"olives\", nutrition), nutrition = \"healthy\", nutrient = \"salt\".\n.output Answer", "completions": [".decl Has_nutrition(Food:symbol, Nutrition:symbol)\nHas_nutrition(\"olives\", \"healthy\").\nHas_nutrition(\"potato chips\", \"unhealthy\").\n.decl Reduces_intake(Person:symbol, Nutrient:symbol)\nReduces_intake(\"John\", \"salt\").\n.decl Answer()\nAnswer() :- Reduces_intake(\"John\", nutrient), Has_nutrition(\"olives\", nutrition), nutrition = \"healthy\", nutrient = \"salt\".\n.output Answer"]}
{"id": 321, "answer": true, "completion": ".decl Nominee(Party:symbol, Year:float, Nominee:symbol)\nNominee(\"Democratic\", 1908, \"William Jennings Bryan\").\n.decl Watches_TV(Person:symbol)\nWatches_TV(\"William Jennings Bryan\").\n.decl Answer()\nAnswer() :- Nominee(\"Democratic\", 1908, nominee), Watches_TV(nominee).\n.output Answer", "completions": [".decl Nominee(Party:symbol, Year:float, Nominee:symbol)\nNominee(\"Democratic\", 1908, \"William Jennings Bryan\").\n.decl Watches_TV(Person:symbol)\nWatches_TV(\"William Jennings Bryan\").\n.decl Answer()\nAnswer() :- Nominee(\"Democratic\", 1908, nominee), Watches_TV(nominee).\n.output Answer"]}
{"id": 322, "answer": true, "completion": ".decl Unemployment_rate(Year:symbol, Rate:float)\nUnemployment_rate(\"2008\", 5.8).\nUnemployment_rate(\"2009\", 9.3).\nUnemployment_rate(\"2010\", 9.6).\nUnemployment_rate(\"2011\", 8.9).\n.decl Answer()\nAnswer() :- Unemployment_rate(year1, rate1), Unemployment_rate(year2, rate2), year1 != year2, rate1 > rate2.\n.output Answer", "completions": [".decl Unemployment_rate(Year:symbol, Rate:float)\nUnemployment_rate(\"2008\", 5.8).\nUnemployment_rate(\"2009\", 9.3).\nUnemployment_rate(\"2010\", 9.6).\nUnemployment_rate(\"2011\", 8.9).\n.decl Answer()\nAnswer() :- Unemployment_rate(year1, rate1), Unemployment_rate(year2, rate2), year1 != year2, rate1 > rate2.\n.output Answer"]}
{"id": 323, "answer": false, "completion": ".decl Occupies(Country:symbol, Territory:symbol)\nOccupies(\"India\", \"Vellore Fort\").\n.decl Inhabits(Territory:symbol, Animal:symbol)\nInhabits(\"North America\", \"grizzly bear\").\n.decl Answer()\nAnswer() :- Occupies(country, \"Vellore Fort\"), Inhabits(country, animal), animal = \"grizzly bear\".\n.output Answer", "completions": [".decl Occupies(Country:symbol, Territory:symbol)\nOccupies(\"India\", \"Vellore Fort\").\n.decl Inhabits(Territory:symbol, Animal:symbol)\nInhabits(\"North America\", \"grizzly bear\").\n.decl Answer()\nAnswer() :- Occupies(country, \"Vellore Fort\"), Inhabits(country, animal), animal = \"grizzly bear\".\n.output Answer"]}
{"id": 324, "answer": false, "completion": ".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Ugly Betty\", 85).\n.decl Has_n_days(Period:symbol, N_days:float)\nHas_n_days(\"week\", 7).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Ugly Betty\", n_episodes), Has_n_days(\"week\", n_days), n_episodes <= n_days.\n.output Answer", "completions": [".decl Has_n_episodes(Show:symbol, N_episodes:float)\nHas_n_episodes(\"Ugly Betty\", 85).\n.decl Has_n_days(Period:symbol, N_days:float)\nHas_n_days(\"week\", 7).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Ugly Betty\", n_episodes), Has_n_days(\"week\", n_days), n_episodes <= n_days.\n.output Answer"]}
{"id": 325, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"snow leopard\", \"mountains\").\nLives_in(\"jaguar\", \"Yucatan\").\n.decl Answer()\nAnswer() :- Lives_in(\"snow leopard\", habitat), Lives_in(\"jaguar\", habitat).\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"snow leopard\", \"mountains\").\nLives_in(\"jaguar\", \"Yucatan\").\n.decl Answer()\nAnswer() :- Lives_in(\"snow leopard\", habitat), Lives_in(\"jaguar\", habitat).\n.output Answer"]}
{"id": 326, "answer": false, "completion": ".decl Acceptable_number_of_children(Country:symbol, Max_children:float)\nAcceptable_number_of_children(\"China\", 1.5).\n.decl Birth_rate(Country:symbol, Year:float, Rate:float)\nBirth_rate(\"China\", 1980, 2.7).\nBirth_rate(\"China\", 1990, 2.0).\n.decl Answer()\nAnswer() :- Acceptable_number_of_children(\"China\", max_children), Birth_rate(\"China\", year, rate), rate/max_children <= 1.\n.output Answer", "completions": [".decl Acceptable_number_of_children(Country:symbol, Max_children:float)\nAcceptable_number_of_children(\"China\", 1.5).\n.decl Birth_rate(Country:symbol, Year:float, Rate:float)\nBirth_rate(\"China\", 1980, 2.7).\nBirth_rate(\"China\", 1990, 2.0).\n.decl Answer()\nAnswer() :- Acceptable_number_of_children(\"China\", max_children), Birth_rate(\"China\", year, rate), rate/max_children <= 1.\n.output Answer"]}
{"id": 327, "answer": false, "completion": ".decl Prevents(Person:symbol, Crisis:symbol)\nPrevents(\"surgery\", \"existential crisis\").\n.decl Answer()\nAnswer() :- Prevents(\"surgery\", \"existential crisis\").\n.output Answer\n\n// Note: This question is not answerable with a Datalog program as it involves subjective and complex concepts that cannot be represented as relations and rules.", "completions": [".decl Prevents(Person:symbol, Crisis:symbol)\nPrevents(\"surgery\", \"existential crisis\").\n.decl Answer()\nAnswer() :- Prevents(\"surgery\", \"existential crisis\").\n.output Answer\n\n// Note: This question is not answerable with a Datalog program as it involves subjective and complex concepts that cannot be represented as relations and rules."]}
{"id": 328, "answer": false, "completion": ".decl Speed(Object:symbol, Speed:float)\nSpeed(\"greyhound\", 45).\nSpeed(\"greyhound bus\", 60).\n.decl Answer()\nAnswer() :- Speed(\"greyhound\", speed1), Speed(\"greyhound bus\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Speed(Object:symbol, Speed:float)\nSpeed(\"greyhound\", 45).\nSpeed(\"greyhound bus\", 60).\n.decl Answer()\nAnswer() :- Speed(\"greyhound\", speed1), Speed(\"greyhound bus\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 329, "answer": false, "completion": ".decl Part_of_constellation(Star:symbol, Constellation:symbol)\nPart_of_constellation(\"Sirius\", \"Canis Major\").\nPart_of_constellation(\"Betelgeuse\", \"Orion\").\nPart_of_constellation(\"Polaris\", \"Ursa Minor\").\n.decl Is_animal(Constellation:symbol)\nIs_animal(\"Canis Major\").\nIs_animal(\"Ursa Major\").\nIs_animal(\"Leo\").\n.decl Answer()\nAnswer() :- Part_of_constellation(\"Sirius\", constellation), Is_animal(constellation).\n.output Answer", "completions": [".decl Part_of_constellation(Star:symbol, Constellation:symbol)\nPart_of_constellation(\"Sirius\", \"Canis Major\").\nPart_of_constellation(\"Betelgeuse\", \"Orion\").\nPart_of_constellation(\"Polaris\", \"Ursa Minor\").\n.decl Is_animal(Constellation:symbol)\nIs_animal(\"Canis Major\").\nIs_animal(\"Ursa Major\").\nIs_animal(\"Leo\").\n.decl Answer()\nAnswer() :- Part_of_constellation(\"Sirius\", constellation), Is_animal(constellation).\n.output Answer"]}
{"id": 330, "answer": false, "completion": ".decl Character(name:symbol, trait:symbol)\nCharacter(\"Snow White\", \"good\").\nCharacter(\"Prince Charming\", \"good\").\nCharacter(\"The Evil Queen\", \"bad\").\n.decl Action(action:symbol, trait:symbol)\nAction(\"kiss\", \"romantic\").\nAction(\"poison\", \"violent\").\nAction(\"ask for consent\", \"respectful\").\n.decl Answer()\nAnswer() :- Character(\"Snow White\", trait1), Action(\"kiss\", trait2), trait1 = \"good\", trait2 = \"romantic\".\nAnswer() :- Character(\"Snow White\", trait1), Action(\"poison\", trait2), trait1 = \"good\", trait2 = \"violent\", !.\nAnswer() :- Character(\"Snow White\", trait1), Action(\"ask for consent\", trait2), trait1 = \"good\", trait2 = \"respectful\".\n.output Answer", "completions": [".decl Character(name:symbol, trait:symbol)\nCharacter(\"Snow White\", \"good\").\nCharacter(\"Prince Charming\", \"good\").\nCharacter(\"The Evil Queen\", \"bad\").\n.decl Action(action:symbol, trait:symbol)\nAction(\"kiss\", \"romantic\").\nAction(\"poison\", \"violent\").\nAction(\"ask for consent\", \"respectful\").\n.decl Answer()\nAnswer() :- Character(\"Snow White\", trait1), Action(\"kiss\", trait2), trait1 = \"good\", trait2 = \"romantic\".\nAnswer() :- Character(\"Snow White\", trait1), Action(\"poison\", trait2), trait1 = \"good\", trait2 = \"violent\", !.\nAnswer() :- Character(\"Snow White\", trait1), Action(\"ask for consent\", trait2), trait1 = \"good\", trait2 = \"respectful\".\n.output Answer"]}
{"id": 331, "answer": false, "completion": ".decl Appears_in(Media:symbol, Title:symbol)\nAppears_in(\"The Invisible Man\", \"film\").\nAppears_in(\"Picnic at Hanging Rock\", \"film\").\n.decl Has_frequency(Media:symbol, Frequency:float)\nHas_frequency(\"The Invisible Man\", 10).\nHas_frequency(\"Picnic at Hanging Rock\", 5).\n.decl Answer()\nAnswer() :- Has_frequency(\"The Invisible Man\", frequency1), Has_frequency(\"Picnic at Hanging Rock\", frequency2), frequency1 > frequency2.\n.output Answer", "completions": [".decl Appears_in(Media:symbol, Title:symbol)\nAppears_in(\"The Invisible Man\", \"film\").\nAppears_in(\"Picnic at Hanging Rock\", \"film\").\n.decl Has_frequency(Media:symbol, Frequency:float)\nHas_frequency(\"The Invisible Man\", 10).\nHas_frequency(\"Picnic at Hanging Rock\", 5).\n.decl Answer()\nAnswer() :- Has_frequency(\"The Invisible Man\", frequency1), Has_frequency(\"Picnic at Hanging Rock\", frequency2), frequency1 > frequency2.\n.output Answer"]}
{"id": 332, "answer": true, "completion": ".decl Can_lift(Person:symbol, Object:symbol, Weight:float)\nCan_lift(\"Ryan Crouser\", \"shot put\", 16).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"bengal fox\", 4).\n.decl Answer()\nAnswer() :- Can_lift(\"Ryan Crouser\", object, weight1), Has_weight(\"bengal fox\", weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Can_lift(Person:symbol, Object:symbol, Weight:float)\nCan_lift(\"Ryan Crouser\", \"shot put\", 16).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"bengal fox\", 4).\n.decl Answer()\nAnswer() :- Can_lift(\"Ryan Crouser\", object, weight1), Has_weight(\"bengal fox\", weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 333, "answer": false, "completion": ".decl Performs(Person:symbol, Song:symbol, Quality:symbol)\nPerforms(\"Amy Winehouse\", \"Rehab\", \"perfectly\").\n.decl Answer()\nAnswer() :- !Performs(\"Amy Winehouse\", song, \"imperfectly\").\n.output Answer", "completions": [".decl Performs(Person:symbol, Song:symbol, Quality:symbol)\nPerforms(\"Amy Winehouse\", \"Rehab\", \"perfectly\").\n.decl Answer()\nAnswer() :- !Performs(\"Amy Winehouse\", song, \"imperfectly\").\n.output Answer"]}
{"id": 334, "answer": false, "completion": ".decl Speeds(Animal:symbol, Speed:float)\nSpeeds(\"Peregrine falcon\", 389).\n.decl Wind_speeds(Event:symbol, Speed:float)\nWind_speeds(\"Hurricane Harvey\", 130).\n.decl Answer()\nAnswer() :- Speeds(\"Peregrine falcon\", speed1), Wind_speeds(\"Hurricane Harvey\", speed2), speed1 < speed2.\n.output Answer", "completions": [".decl Speeds(Animal:symbol, Speed:float)\nSpeeds(\"Peregrine falcon\", 389).\n.decl Wind_speeds(Event:symbol, Speed:float)\nWind_speeds(\"Hurricane Harvey\", 130).\n.decl Answer()\nAnswer() :- Speeds(\"Peregrine falcon\", speed1), Wind_speeds(\"Hurricane Harvey\", speed2), speed1 < speed2.\n.output Answer"]}
{"id": 335, "answer": true, "completion": ".decl Faces_discrimination(Ethnicity:symbol, Level:symbol)\nFaces_discrimination(\"Chinese American\", \"Federal\").\n.decl Answer()\nAnswer() :- Faces_discrimination(\"Chinese American\", level).\n.output Answer", "completions": [".decl Faces_discrimination(Ethnicity:symbol, Level:symbol)\nFaces_discrimination(\"Chinese American\", \"Federal\").\n.decl Answer()\nAnswer() :- Faces_discrimination(\"Chinese American\", level).\n.output Answer"]}
{"id": 336, "answer": false, "completion": ".decl Has_max_chars(Text:symbol, Max_chars:float)\nHas_max_chars(\"tweet\", 280).\n.decl Has_syllables(Text:symbol, Syllables:float)\nHas_syllables(\"Haiku\", 17).\n.decl Answer()\nAnswer() :- Has_max_chars(\"tweet\", max_chars), Has_syllables(\"Haiku\", syllables), syllables <= 5, max_chars >= 17.\n.output Answer", "completions": [".decl Has_max_chars(Text:symbol, Max_chars:float)\nHas_max_chars(\"tweet\", 280).\n.decl Has_syllables(Text:symbol, Syllables:float)\nHas_syllables(\"Haiku\", 17).\n.decl Answer()\nAnswer() :- Has_max_chars(\"tweet\", max_chars), Has_syllables(\"Haiku\", syllables), syllables <= 5, max_chars >= 17.\n.output Answer"]}
{"id": 337, "answer": false, "completion": ".decl Skull_size(Person:symbol, Size:float)\nSkull_size(\"adult human\", 22).\nSkull_size(\"birth canal\", 10).\n.decl Answer()\nAnswer() :- Skull_size(\"adult human\", size1), Skull_size(\"birth canal\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Skull_size(Person:symbol, Size:float)\nSkull_size(\"adult human\", 22).\nSkull_size(\"birth canal\", 10).\n.decl Answer()\nAnswer() :- Skull_size(\"adult human\", size1), Skull_size(\"birth canal\", size2), size1 <= size2.\n.output Answer"]}
{"id": 338, "answer": false, "completion": ".decl Box_office_movie(Movie:symbol, Box_office:float)\nBox_office_movie(\"King Kong\", 562.3).\nBox_office_movie(\"The Lord of the Rings: The Return of the King\", 1141.4).\nBox_office_movie(\"The Hobbit: An Unexpected Journey\", 1016.2).\n.decl Lead_actress(Movie:symbol, Actress:symbol)\nLead_actress(\"King Kong\", \"Naomi Watts\").\n.decl Answer()\nAnswer() :- Lead_actress(\"King Kong\", actress), Box_office_movie(\"King Kong\", box_office1), Box_office_movie(movie2, box_office2), Lead_actress(movie2, actress), box_office2 > box_office1.\n.output Answer", "completions": [".decl Box_office_movie(Movie:symbol, Box_office:float)\nBox_office_movie(\"King Kong\", 562.3).\nBox_office_movie(\"The Lord of the Rings: The Return of the King\", 1141.4).\nBox_office_movie(\"The Hobbit: An Unexpected Journey\", 1016.2).\n.decl Lead_actress(Movie:symbol, Actress:symbol)\nLead_actress(\"King Kong\", \"Naomi Watts\").\n.decl Answer()\nAnswer() :- Lead_actress(\"King Kong\", actress), Box_office_movie(\"King Kong\", box_office1), Box_office_movie(movie2, box_office2), Lead_actress(movie2, actress), box_office2 > box_office1.\n.output Answer"]}
{"id": 339, "answer": false, "completion": ".decl Has_ingredient(Color:symbol, Ingredient:symbol)\nHas_ingredient(\"purple\", \"mollusks\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"purple\", \"mollusks\").\n.output Answer", "completions": [".decl Has_ingredient(Color:symbol, Ingredient:symbol)\nHas_ingredient(\"purple\", \"mollusks\").\n.decl Answer()\nAnswer() :- Has_ingredient(\"purple\", \"mollusks\").\n.output Answer"]}
{"id": 340, "answer": false, "completion": ".decl Born_in_year(Animal:symbol, Year:float)\nBorn_in_year(\"anchovy\", 2020).\n.decl Survives_until_year(Event:symbol, Year:float)\nSurvives_until_year(\"25th US census\", 2020).\nSurvives_until_year(\"25th US census\", 1990).\nSurvives_until_year(\"25th US census\", 2000).\nSurvives_until_year(\"25th US census\", 2010).\nSurvives_until_year(\"25th US census\", 2020).\n.decl Answer()\nAnswer() :- Born_in_year(\"anchovy\", year1), Survives_until_year(\"25th US census\", year2), year1 <= year2.\n.output Answer", "completions": [".decl Born_in_year(Animal:symbol, Year:float)\nBorn_in_year(\"anchovy\", 2020).\n.decl Survives_until_year(Event:symbol, Year:float)\nSurvives_until_year(\"25th US census\", 2020).\nSurvives_until_year(\"25th US census\", 1990).\nSurvives_until_year(\"25th US census\", 2000).\nSurvives_until_year(\"25th US census\", 2010).\nSurvives_until_year(\"25th US census\", 2020).\n.decl Answer()\nAnswer() :- Born_in_year(\"anchovy\", year1), Survives_until_year(\"25th US census\", year2), year1 <= year2.\n.output Answer"]}
{"id": 341, "answer": false, "completion": ".decl Flies_between(Country1:symbol, Country2:symbol)\nFlies_between(\"China\", \"France\").\n.decl Uses_unit(Unit:symbol)\nUses_unit(\"imperial foot\").\n.decl Answer()\nAnswer() :- Flies_between(country1, country2), Uses_unit(\"imperial foot\").\n.output Answer", "completions": [".decl Flies_between(Country1:symbol, Country2:symbol)\nFlies_between(\"China\", \"France\").\n.decl Uses_unit(Unit:symbol)\nUses_unit(\"imperial foot\").\n.decl Answer()\nAnswer() :- Flies_between(country1, country2), Uses_unit(\"imperial foot\").\n.output Answer"]}
{"id": 342, "answer": false, "completion": ".decl Has_length(Text:symbol, Length:float)\nHas_length(\"Lines on the Antiquity of Microbes\", 100).\n.decl Has_lines(Text:symbol, N_lines:float)\nHas_lines(\"haiku\", 3).\n.decl Answer()\nAnswer() :- Has_length(\"Lines on the Antiquity of Microbes\", length1), Has_lines(\"haiku\", n_lines), length1 < n_lines.\n.output Answer", "completions": [".decl Has_length(Text:symbol, Length:float)\nHas_length(\"Lines on the Antiquity of Microbes\", 100).\n.decl Has_lines(Text:symbol, N_lines:float)\nHas_lines(\"haiku\", 3).\n.decl Answer()\nAnswer() :- Has_length(\"Lines on the Antiquity of Microbes\", length1), Has_lines(\"haiku\", n_lines), length1 < n_lines.\n.output Answer"]}
{"id": 343, "answer": false, "completion": ".decl Can_sell_out(Event:symbol, Animal:symbol)\nCan_sell_out(\"Metallica show\", \"humans\").\n.decl Is_endangered(Animal:symbol)\nIs_endangered(\"giant panda\").\n.decl Answer()\nAnswer() :- Can_sell_out(\"Metallica show\", animal), Is_endangered(animal).\n.output Answer", "completions": [".decl Can_sell_out(Event:symbol, Animal:symbol)\nCan_sell_out(\"Metallica show\", \"humans\").\n.decl Is_endangered(Animal:symbol)\nIs_endangered(\"giant panda\").\n.decl Answer()\nAnswer() :- Can_sell_out(\"Metallica show\", animal), Is_endangered(animal).\n.output Answer"]}
{"id": 344, "answer": false, "completion": ".decl Implies(A:symbol, B:symbol)\nImplies(\"frost\", \"snow\").\n.decl Answer()\nAnswer() :- Implies(\"frost\", implication), Implies(implication, \"snow\").\n.output Answer", "completions": [".decl Implies(A:symbol, B:symbol)\nImplies(\"frost\", \"snow\").\n.decl Answer()\nAnswer() :- Implies(\"frost\", implication), Implies(implication, \"snow\").\n.output Answer"]}
{"id": 345, "answer": false, "completion": ".decl Holds_position(Person:symbol, Position:symbol)\nHolds_position(\"Cyril Ramaphosa\", \"President of South Africa\").\n.decl Eligible_for_position(Person:symbol, Position:symbol)\nEligible_for_position(\"Cyril Ramaphosa\", \"Secretary General of the United Nations\").\nEligible_for_position(\"Angela Merkel\", \"Secretary General of NATO\").\n.decl Answer()\nAnswer() :- Holds_position(\"Cyril Ramaphosa\", position1), Eligible_for_position(\"Cyril Ramaphosa\", position2), position1 != position2.\nAnswer() :- Holds_position(\"Cyril Ramaphosa\", position1), Holds_position(person2, position1), Eligible_for_position(person2, \"Secretary General of NATO\").\n.output Answer", "completions": [".decl Holds_position(Person:symbol, Position:symbol)\nHolds_position(\"Cyril Ramaphosa\", \"President of South Africa\").\n.decl Eligible_for_position(Person:symbol, Position:symbol)\nEligible_for_position(\"Cyril Ramaphosa\", \"Secretary General of the United Nations\").\nEligible_for_position(\"Angela Merkel\", \"Secretary General of NATO\").\n.decl Answer()\nAnswer() :- Holds_position(\"Cyril Ramaphosa\", position1), Eligible_for_position(\"Cyril Ramaphosa\", position2), position1 != position2.\nAnswer() :- Holds_position(\"Cyril Ramaphosa\", position1), Holds_position(person2, position1), Eligible_for_position(person2, \"Secretary General of NATO\").\n.output Answer"]}
{"id": 346, "answer": false, "completion": ".decl Is_made_by(Process:symbol, Product:symbol)\nIs_made_by(\"artisan\", \"bread\").\nIs_made_by(\"factory\", \"twinkies\").\n.decl Answer()\nAnswer() :- Is_made_by(process, \"twinkies\"), process != \"artisan\".\n.output Answer", "completions": [".decl Is_made_by(Process:symbol, Product:symbol)\nIs_made_by(\"artisan\", \"bread\").\nIs_made_by(\"factory\", \"twinkies\").\n.decl Answer()\nAnswer() :- Is_made_by(process, \"twinkies\"), process != \"artisan\".\n.output Answer"]}
{"id": 347, "answer": false, "completion": ".decl Born_in_city(Person:symbol, City:symbol)\nBorn_in_city(\"Sean Connery\", \"Edinburgh\").\n.decl Near_landmark(City:symbol, Landmark:symbol)\nNear_landmark(\"Washington D.C.\", \"Washington Monument\").\n.decl Answer()\nAnswer() :- Born_in_city(\"Sean Connery\", city), Near_landmark(city, \"Washington Monument\").\n.output Answer", "completions": [".decl Born_in_city(Person:symbol, City:symbol)\nBorn_in_city(\"Sean Connery\", \"Edinburgh\").\n.decl Near_landmark(City:symbol, Landmark:symbol)\nNear_landmark(\"Washington D.C.\", \"Washington Monument\").\n.decl Answer()\nAnswer() :- Born_in_city(\"Sean Connery\", city), Near_landmark(city, \"Washington Monument\").\n.output Answer"]}
{"id": 348, "answer": true, "completion": ".decl Treats(Disease:symbol, Treatment:symbol)\nTreats(\"tonsillitis\", \"tonsillectomy\").\nTreats(\"hepatitis\", \"antiviral medication\").\n.decl Answer()\nAnswer() :- Treats(\"hepatitis\", treatment), treatment != \"tonsillectomy\".\n.output Answer", "completions": [".decl Treats(Disease:symbol, Treatment:symbol)\nTreats(\"tonsillitis\", \"tonsillectomy\").\nTreats(\"hepatitis\", \"antiviral medication\").\n.decl Answer()\nAnswer() :- Treats(\"hepatitis\", treatment), treatment != \"tonsillectomy\".\n.output Answer"]}
{"id": 349, "answer": true, "completion": ".decl Is_made_of_material(Character:symbol, Material:symbol)\nIs_made_of_material(\"Elsa\", \"ice\").\nIs_made_of_material(\"Olaf\", \"snow\").\n.decl Is_popular(Character:symbol)\nIs_popular(\"Elsa\").\nIs_popular(\"Olaf\").\n.decl Answer()\nAnswer() :- Is_made_of_material(character, \"ice\"), Is_popular(character).\n.output Answer", "completions": [".decl Is_made_of_material(Character:symbol, Material:symbol)\nIs_made_of_material(\"Elsa\", \"ice\").\nIs_made_of_material(\"Olaf\", \"snow\").\n.decl Is_popular(Character:symbol)\nIs_popular(\"Elsa\").\nIs_popular(\"Olaf\").\n.decl Answer()\nAnswer() :- Is_made_of_material(character, \"ice\"), Is_popular(character).\n.output Answer"]}
{"id": 350, "answer": true, "completion": ".decl Guaranteed_lunch(State:symbol)\nGuaranteed_lunch(\"California\").\nGuaranteed_lunch(\"New York\").\n.decl Answer()\nAnswer() :- Guaranteed_lunch(state), state != \"California\".\n.output Answer", "completions": [".decl Guaranteed_lunch(State:symbol)\nGuaranteed_lunch(\"California\").\nGuaranteed_lunch(\"New York\").\n.decl Answer()\nAnswer() :- Guaranteed_lunch(state), state != \"California\".\n.output Answer"]}
{"id": 351, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"almond tree\", 6).\n.decl Can_reach(Object:symbol, Height:float)\nCan_reach(\"Lusotitan\", 8).\n.decl Answer()\nAnswer() :- Has_height(\"almond tree\", height), Can_reach(\"Lusotitan\", height).\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"almond tree\", 6).\n.decl Can_reach(Object:symbol, Height:float)\nCan_reach(\"Lusotitan\", 8).\n.decl Answer()\nAnswer() :- Has_height(\"almond tree\", height), Can_reach(\"Lusotitan\", height).\n.output Answer"]}
{"id": 352, "answer": false, "completion": ".decl Ends_at(Event:symbol, Time:symbol)\nEnds_at(\"Bonanza marathon\", \"6pm\").\nEnds_at(\"WWE Heat marathon\", \"8pm\").\n.decl Starts_at(Event:symbol, Time:symbol)\nStarts_at(\"Bonanza marathon\", \"10am\").\nStarts_at(\"WWE Heat marathon\", \"2pm\").\n.decl Answer()\nAnswer() :- Ends_at(\"Bonanza marathon\", time1), Starts_at(\"WWE Heat marathon\", time2), time1 < time2.\n.output Answer", "completions": [".decl Ends_at(Event:symbol, Time:symbol)\nEnds_at(\"Bonanza marathon\", \"6pm\").\nEnds_at(\"WWE Heat marathon\", \"8pm\").\n.decl Starts_at(Event:symbol, Time:symbol)\nStarts_at(\"Bonanza marathon\", \"10am\").\nStarts_at(\"WWE Heat marathon\", \"2pm\").\n.decl Answer()\nAnswer() :- Ends_at(\"Bonanza marathon\", time1), Starts_at(\"WWE Heat marathon\", time2), time1 < time2.\n.output Answer"]}
{"id": 353, "answer": true, "completion": ".decl Embraces_cuisine(Cuisine:symbol, Food:symbol)\nEmbraces_cuisine(\"Hawaiian cuisine\", \"poi\").\nEmbraces_cuisine(\"Hawaiian cuisine\", \"spam musubi\").\n.decl Considers_gross(Food:symbol)\nConsiders_gross(\"poi\").\n.decl Answer()\nAnswer() :- Embraces_cuisine(\"Hawaiian cuisine\", food), Considers_gross(food).\n.output Answer", "completions": [".decl Embraces_cuisine(Cuisine:symbol, Food:symbol)\nEmbraces_cuisine(\"Hawaiian cuisine\", \"poi\").\nEmbraces_cuisine(\"Hawaiian cuisine\", \"spam musubi\").\n.decl Considers_gross(Food:symbol)\nConsiders_gross(\"poi\").\n.decl Answer()\nAnswer() :- Embraces_cuisine(\"Hawaiian cuisine\", food), Considers_gross(food).\n.output Answer"]}
{"id": 354, "answer": false, "completion": ".decl Featured_in_ride(Character:symbol, Ride:symbol)\nFeatured_in_ride(\"Mickey Mouse\", \"It's a Small World\").\nFeatured_in_ride(\"Donald Duck\", \"Space Mountain\").\nFeatured_in_ride(\"Tom\", \"Tom and Jerry's Big Cheese Coaster\").\nFeatured_in_ride(\"Jerry\", \"Tom and Jerry's Big Cheese Coaster\").\n.decl Answer()\nAnswer() :- Featured_in_ride(\"Tom\", ride), Featured_in_ride(\"Jerry\", ride), Featured_in_ride(\"Disneyland\", ride).\n.output Answer", "completions": [".decl Featured_in_ride(Character:symbol, Ride:symbol)\nFeatured_in_ride(\"Mickey Mouse\", \"It's a Small World\").\nFeatured_in_ride(\"Donald Duck\", \"Space Mountain\").\nFeatured_in_ride(\"Tom\", \"Tom and Jerry's Big Cheese Coaster\").\nFeatured_in_ride(\"Jerry\", \"Tom and Jerry's Big Cheese Coaster\").\n.decl Answer()\nAnswer() :- Featured_in_ride(\"Tom\", ride), Featured_in_ride(\"Jerry\", ride), Featured_in_ride(\"Disneyland\", ride).\n.output Answer"]}
{"id": 355, "answer": false, "completion": ".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"Natalie Portman\", \"vegan\").\n.decl Contains_ingredient(Food:symbol, Ingredient:symbol)\nContains_ingredient(\"Snickers bar\", \"milk\").\n.decl Answer()\nAnswer() :- Follows_diet(\"Natalie Portman\", diet), Contains_ingredient(\"Snickers bar\", ingredient), ingredient = \"milk\", diet = \"vegan\".\nAnswer() :- Follows_diet(\"Natalie Portman\", diet), !Contains_ingredient(\"Snickers bar\", ingredient), diet = \"vegan\".\n.output Answer", "completions": [".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"Natalie Portman\", \"vegan\").\n.decl Contains_ingredient(Food:symbol, Ingredient:symbol)\nContains_ingredient(\"Snickers bar\", \"milk\").\n.decl Answer()\nAnswer() :- Follows_diet(\"Natalie Portman\", diet), Contains_ingredient(\"Snickers bar\", ingredient), ingredient = \"milk\", diet = \"vegan\".\nAnswer() :- Follows_diet(\"Natalie Portman\", diet), !Contains_ingredient(\"Snickers bar\", ingredient), diet = \"vegan\".\n.output Answer"]}
{"id": 356, "answer": false, "completion": ".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"child\", \"driver's license\").\n.decl Drives_car(Person:symbol, Car:symbol)\nDrives_car(\"child\", \"Mercedes-Benz\").\n.decl Employed_in_country(Person:symbol, Country:symbol)\nEmployed_in_country(\"child\", \"United States\").\n.decl Legal_to_work_in_country(Person:symbol, Country:symbol)\nLegal_to_work_in_country(\"child\", \"United States\").\n.decl Answer()\nAnswer() :- Has_license(\"child\", license), Drives_car(\"child\", \"Mercedes-Benz\"), Employed_in_country(\"child\", \"United States\"), Legal_to_work_in_country(\"child\", \"United States\").\n.output Answer", "completions": [".decl Has_license(Person:symbol, License:symbol)\nHas_license(\"child\", \"driver's license\").\n.decl Drives_car(Person:symbol, Car:symbol)\nDrives_car(\"child\", \"Mercedes-Benz\").\n.decl Employed_in_country(Person:symbol, Country:symbol)\nEmployed_in_country(\"child\", \"United States\").\n.decl Legal_to_work_in_country(Person:symbol, Country:symbol)\nLegal_to_work_in_country(\"child\", \"United States\").\n.decl Answer()\nAnswer() :- Has_license(\"child\", license), Drives_car(\"child\", \"Mercedes-Benz\"), Employed_in_country(\"child\", \"United States\"), Legal_to_work_in_country(\"child\", \"United States\").\n.output Answer"]}
{"id": 357, "answer": false, "completion": ".decl Uses_scale(Composition:symbol, Scale:symbol)\nUses_scale(\"twelve-tone technique composition\", \"Iwato scale\").\n.decl Answer()\nAnswer() :- !Uses_scale(\"twelve-tone technique composition\", \"Iwato scale\").\n.output Answer", "completions": [".decl Uses_scale(Composition:symbol, Scale:symbol)\nUses_scale(\"twelve-tone technique composition\", \"Iwato scale\").\n.decl Answer()\nAnswer() :- !Uses_scale(\"twelve-tone technique composition\", \"Iwato scale\").\n.output Answer"]}
{"id": 358, "answer": false, "completion": ".decl Likes(Person:symbol, Thing:symbol)\nLikes(\"Stephen King fans\", \"horror\").\nLikes(\"Stephen King fans\", \"clowns\").\n.decl Has_image(Person:symbol, Thing:symbol)\nHas_image(\"Stephen King fans\", \"Pennywise\").\n.decl Answer()\nAnswer() :- Likes(\"Stephen King fans\", thing1), Likes(\"Stephen King fans\", thing2), Has_image(\"Stephen King fans\", thing2), thing1 != thing2.\n.output Answer", "completions": [".decl Likes(Person:symbol, Thing:symbol)\nLikes(\"Stephen King fans\", \"horror\").\nLikes(\"Stephen King fans\", \"clowns\").\n.decl Has_image(Person:symbol, Thing:symbol)\nHas_image(\"Stephen King fans\", \"Pennywise\").\n.decl Answer()\nAnswer() :- Likes(\"Stephen King fans\", thing1), Likes(\"Stephen King fans\", thing2), Has_image(\"Stephen King fans\", thing2), thing1 != thing2.\n.output Answer"]}
{"id": 359, "answer": false, "completion": ".decl Sells(Product:symbol, Store:symbol)\nSells(\"Big Mac\", \"McDonald's\").\nSells(\"Intel Core i7\", \"Best Buy\").\n.decl Answer()\nAnswer() :- Sells(\"Intel Core i7\", store), Sells(\"Big Mac\", store).\n.output Answer", "completions": [".decl Sells(Product:symbol, Store:symbol)\nSells(\"Big Mac\", \"McDonald's\").\nSells(\"Intel Core i7\", \"Best Buy\").\n.decl Answer()\nAnswer() :- Sells(\"Intel Core i7\", store), Sells(\"Big Mac\", store).\n.output Answer"]}
{"id": 360, "answer": false, "completion": ".decl Can_drive_to(Event:symbol, Vehicle:symbol, Year:float)\nCan_drive_to(\"2008 Summer Olympics\", \"car\", 2008).\n.decl Is_vehicle(Vehicle:symbol)\nIs_vehicle(\"Rowe 550\").\n.decl Answer()\nAnswer() :- Can_drive_to(\"2008 Summer Olympics\", vehicle, year), Is_vehicle(vehicle).\n.output Answer", "completions": [".decl Can_drive_to(Event:symbol, Vehicle:symbol, Year:float)\nCan_drive_to(\"2008 Summer Olympics\", \"car\", 2008).\n.decl Is_vehicle(Vehicle:symbol)\nIs_vehicle(\"Rowe 550\").\n.decl Answer()\nAnswer() :- Can_drive_to(\"2008 Summer Olympics\", vehicle, year), Is_vehicle(vehicle).\n.output Answer"]}
{"id": 361, "answer": true, "completion": ".decl Owns(Band:symbol, Gramophones:float)\nOwns(\"Led Zeppelin\", 7).\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\n.decl Answer()\nAnswer() :- Owns(\"Led Zeppelin\", gramophones), Is_prime(gramophones).\n.output Answer", "completions": [".decl Owns(Band:symbol, Gramophones:float)\nOwns(\"Led Zeppelin\", 7).\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\n.decl Answer()\nAnswer() :- Owns(\"Led Zeppelin\", gramophones), Is_prime(gramophones).\n.output Answer"]}
{"id": 362, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"German Shepherd\", 0.6).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"German Shepherd\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\n.decl Has_height(Animal:symbol, Height:float)\nHas_height(\"German Shepherd\", 0.6).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height1), Has_height(\"German Shepherd\", height2), height1 > height2.\n.output Answer"]}
{"id": 363, "answer": false, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Great Pyramid of Giza's base\", 230.4).\n.decl Can_cover_n_times(Object:symbol, N:float, Length:float)\nCan_cover_n_times(\"200 men\", 1, 1.8).\n.decl Answer()\nAnswer() :- Can_cover_n_times(\"200 men\", n, length), Has_length(\"Great Pyramid of Giza's base\", base_length), n*length >= base_length.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Great Pyramid of Giza's base\", 230.4).\n.decl Can_cover_n_times(Object:symbol, N:float, Length:float)\nCan_cover_n_times(\"200 men\", 1, 1.8).\n.decl Answer()\nAnswer() :- Can_cover_n_times(\"200 men\", n, length), Has_length(\"Great Pyramid of Giza's base\", base_length), n*length >= base_length.\n.output Answer"]}
{"id": 364, "answer": true, "completion": ".decl Has_tumor(Location:symbol, Tumor:bool)\nHas_tumor(\"lymph nodes\", true).\n.decl Answer()\nAnswer() :- !Has_tumor(\"lymph nodes\", tumor).\n.output Answer", "completions": [".decl Has_tumor(Location:symbol, Tumor:bool)\nHas_tumor(\"lymph nodes\", true).\n.decl Answer()\nAnswer() :- !Has_tumor(\"lymph nodes\", tumor).\n.output Answer"]}
{"id": 365, "answer": true, "completion": ".decl Political_affiliation(Person:symbol, Affiliation:symbol)\nPolitical_affiliation(\"Stephen Colbert\", \"Democratic Party\").\n.decl Answer()\nAnswer() :- Political_affiliation(\"Stephen Colbert\", affiliation), affiliation != \"Republican Party\".\n.output Answer", "completions": [".decl Political_affiliation(Person:symbol, Affiliation:symbol)\nPolitical_affiliation(\"Stephen Colbert\", \"Democratic Party\").\n.decl Answer()\nAnswer() :- Political_affiliation(\"Stephen Colbert\", affiliation), affiliation != \"Republican Party\".\n.output Answer"]}
{"id": 366, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Tony Bennett\", 1926).\n.decl Answer()\nAnswer() :- Born_in_year(\"Tony Bennett\", year), year + age <= 2020, age >= 18, age <= 50.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Tony Bennett\", 1926).\n.decl Answer()\nAnswer() :- Born_in_year(\"Tony Bennett\", year), year + age <= 2020, age >= 18, age <= 50.\n.output Answer"]}
{"id": 367, "answer": false, "completion": ".decl Understands(Person:symbol, Concept:symbol)\nUnderstands(\"Jesus\", \"resurrection\").\n.decl Answer()\nAnswer() :- Understands(\"Jesus\", concept1), Understands(\"Jesus\", concept2), concept1 != concept2, Concept(\"Easter Bunny\") != concept1, Concept(\"Easter Bunny\") != concept2.\n.output Answer", "completions": [".decl Understands(Person:symbol, Concept:symbol)\nUnderstands(\"Jesus\", \"resurrection\").\n.decl Answer()\nAnswer() :- Understands(\"Jesus\", concept1), Understands(\"Jesus\", concept2), concept1 != concept2, Concept(\"Easter Bunny\") != concept1, Concept(\"Easter Bunny\") != concept2.\n.output Answer"]}
{"id": 368, "answer": false, "completion": ".decl Is_Fibonacci(Number:float)\nIs_Fibonacci(0).\nIs_Fibonacci(1).\nIs_Fibonacci(2).\nIs_Fibonacci(3).\nIs_Fibonacci(5).\nIs_Fibonacci(8).\nIs_Fibonacci(13).\nIs_Fibonacci(21).\nIs_Fibonacci(34).\nIs_Fibonacci(55).\nIs_Fibonacci(89).\nIs_Fibonacci(144).\nIs_Fibonacci(233).\nIs_Fibonacci(377).\nIs_Fibonacci(610).\nIs_Fibonacci(987).\nIs_Fibonacci(1597).\nIs_Fibonacci(2584).\nIs_Fibonacci(4181).\nIs_Fibonacci(6765).\nIs_Fibonacci(10946).\nIs_Fibonacci(17711).\nIs_Fibonacci(28657).\nIs_Fibonacci(46368).\nIs_Fibonacci(75025).\nIs_Fibonacci(121393).\nIs_Fibonacci(196418).\nIs_Fibonacci(317811).\n.decl Has_Number(Number:float)\nHas_Number(3.14159).\nHas_Number(1.61803398875).\nHas_Number(2.71828182846).\nHas_Number(0.69314718056).\nHas_Number(0.30102999566).\nHas_Number(0.47712125472).\nHas_Number(0.60205999132).\nHas_Number(0.77815125038).\nHas_Number(0.84509804001).\nHas_Number(0.90308998699).\nHas_Number(0.95424250944).\nHas_Number(1.0).\nHas_Number(1.04139268516).\nHas_Number(1.07918124605).\nHas_Number(1.11394335231).\nHas_Number(1.14612803568).\nHas_Number(1.17609125906).\nHas_Number(1.20411998266).\nHas_Number(1.23044892138).\nHas_Number(1.2552725051).\nHas_Number(1.27875360095).\nHas_Number(1.30102999566).\nHas_Number(1.32221929473).\nHas_Number(1.34242268082).\nHas_Number(1.36172783602).\nHas_Number(1.38021124171).\nHas_Number(1.39794000867).\nHas_Number(1.41497334797).\nHas_Number(1.43136376416).\nHas_Number(1.44715803134).\nHas_Number(1.4623988773).\nHas_Number(1.47712125472).\nHas_Number(1.49136169383).\nHas_Number(1.50514997832).\nHas_Number(1.51851393988).\nHas_Number(1.53147891704).\nHas_Number(1.54406804435).\nHas_Number(1.55630250077).\nHas_Number(1.56820172407).\nHas_Number(1.57978359662).\nHas_Number(1.59106460703).\nHas_Number(1.60205999132).\nHas_Number(1.61278385672).\nHas_Number(1.6232492904).\nHas_Number(1.63346845558).\nHas_Number(1.64345267648).\nHas_Number(1.65321251378).\nHas_Number(1.66275783168).\nHas_Number(1.67209785793).\nHas_Number(1.68124123738).\nHas_Number(1.69019608003).\nHas_Number(1.69897000434).\nHas_Number(1.7075701761).\nHas_Number(1.71600334363).\nHas_Number(1.7242758696).\nHas_Number(1.73239375982).\nHas_Number(1.74036268949).\nHas_Number(1.74818802701).\nHas_Number(1.75587485567).\nHas_Number(1.76342799356).\nHas_Number(1.77085201164).\nHas_Number(1.77815125038).\nHas_Number(1.78532983501).\nHas_Number(1.7923916895).\nHas_Number(1.79934054945).\nHas_Number(1.80617997398).\nHas_Number(1.81291335664).\nHas_Number(1.81954393554).\nHas_Number(1.8260748027).\nHas_Number(1.83250891271).\nHas_Number(1.83884909074).\nHas_Number(1.84509804001).\nHas_Number(1.85125834872).\nHas_Number(1.85733249643).\nHas_Number(1.86332286012).\nHas_Number(1.86923171973).\nHas_Number(1.87506099131).\nHas_Number(1.88081101498).\nHas_Number(1.88648316328).\nHas_Number(1.89207809604).\nHas_Number(1.89769624473).\nHas_Number(1.90323884042).\nHas_Number(1.90870609943).\nHas_Number(1.91409893324).\nHas_Number(1.91941874954).\nHas_Number(1.92466602247).\nHas_Number(1.92984156441).\nHas_Number(1.93494692061).\nHas_Number(1.93998252415).\nHas_Number(1.9449486365).\nHas_Number(1.94984588537).\nHas_Number(1.95467400648).\nHas_Number(1.95943348453).\nHas_Number(1.96412490793).\nHas_Number(1.9687489218).\nHas_Number(1.97330602914).\nHas_Number(1.97779607694).\nHas_Number(1.98221925616).\nHas_Number(1.98657599905).\nHas_Number(1.99086615454).\nHas_Number(1.99509081167).\nHas_Number(1.99925053946).\nHas_Number(2.00334550769).\nHas_Number(2.00737661891).\nHas_Number(2.01134499301).\nHas_Number(2.01525197309).\nHas_Number(2.01909829754).\nHas_Number(2.02288455415).\nHas_Number(2.02661172756).\nHas_Number(2.03028008287).\nHas_Number(2.03389081787).\nHas_Number(2.0374454992).\nHas_Number(2.04094451145).\nHas_Number(2.04438911836).\nHas_Number(2.04778003968).\nHas_Number(2.05111768798).\nHas_Number(2.05440211109).\nHas_Number(2.05763449645).\nHas_Number(2.0608157565).\nHas_Number(2.06394690588).\nHas_Number(2.0670280272).\nHas_Number(2.07006001467).\nHas_Number(2.0730439435).\nHas_Number(2.07598078528).\nHas_Number(2.07887155963).\nHas_Number(2.08171744372).\nHas_Number(2.08451942637).\nHas_Number(2.08727858304).\nHas_Number(2.08999591885).\nHas_Number(2.09267247269).\nHas_Number(2.09530928945).\nHas_Number(2.09790741322).\nHas_Number(2.1004678961).\nHas_Number(2.1029917894).\nHas_Number(2.10548014347).\nHas_Number(2.10793300751).\nHas_Number(2.11035144115).\nHas_Number(2.11273650372).\nHas_Number(2.11508925412).\nHas_Number(2.11741075176).\nHas_Number(2.11970205688).\nHas_Number(2.12196422922).\nHas_Number(2.12419832893).\nHas_Number(2.12640541602).\nHas_Number(2.12858655018).\nHas_Number(2.1307427907).\nHas_Number(2.13287519648).\nHas_Number(2.13498482698).\nHas_Number(2.13707274088).\nHas_Number(2.13913999667).\nHas_Number(2.14118765223).\nHas_Number(2.14321676568).\nHas_Number(2.1452283955).\nHas_Number(2.14722359989).\nHas_Number(2.1492034365).\nHas_Number(2.15116896303).\nHas_Number(2.15312123625).\nHas_Number(2.15506131211).\nHas_Number(2.15699024603).\nHas_Number(2.15890909222).\nHas_Number(2.16081890432).\nHas_Number(2.16272073502).\nHas_Number(2.16461563651).\nHas_Number(2.16650466036).\nHas_Number(2.16838885773).\nHas_Number(2.17026927975).\nHas_Number(2.17214697796).\nHas_Number(2.17402200385).\nHas_Number(2.17589540888).\nHas_Number(2.17776724493).\nHas_Number(2.17963756372).\nHas_Number(2.18150641693).\nHas_Number(2.18337385699).\nHas_Number(2.18523993601).\nHas_Number(2.18710470618).\nHas_Number(2.18896821954).\nHas_Number(2.1908305279).\nHas_Number(2.19269168225).\nHas_Number(2.19455173392).\nHas_Number(2.19641073481).\nHas_Number(2.19826873624).\nHas_Number(2.20012578988).\nHas_Number(2.20198194722).\nHas_Number(2.20383725972).\nHas_Number(2.20569177819).\nHas_Number(2.20754555354).\nHas_Number(2.20939863641).\nHas_Number(2.2112510778).\nHas_Number(2.21310292891).\nHas_Number(2.21495424087).\nHas_Number(2.21680506455).\nHas_Number(2.21865545059).\nHas_Number(2.22050544934).\nHas_Number(2.22235511031).\nHas_Number(2.22420448223).\nHas_Number(2.22605361322).\nHas_Number(2.22790255093).\nHas_Number(2.22975134223).\nHas_Number(2.23160003377).\nHas_Number(2.23344867189).\nHas_Number(2.23529730201).\nHas_Number(2.23714696968).\nHas_Number(2.23899772041).\nHas_Number(2.24084959968).\nHas_Number(2.24270265303).\nHas_Number(2.24455692506).\nHas_Number(2.24641246047).\nHas_Number(2.24826930408).\nHas_Number(2.25012750083).\nHas_Number(2.25198709589).\nHas_Number(2.2538481346).\nHas_Number(2.25571066247).\nHas_Number(2.25757472522).\nHas_Number(2.25944036844).\nHas_Number(2.26130763763).\nHas_Number(2.26317657834).\nHas_Number(2.2650472362).\nHas_Number(2.26691965656).\nHas_Number(2.26879388598).\nHas_Number(2.27066997081).\nHas_Number(2.27254795704).\nHas_Number(2.27442789012).\nHas_Number(2.27630981567).\nHas_Number(2.27819377928).\nHas_Number(2.2800798263).\nHas_Number(2.28196700287).\nHas_Number(2.28385535587).\nHas_Number(2.28574493296).\nHas_Number(2.28763578157).\nHas_Number(2.28952794994).\nHas_Number(2.29142148616).\nHas_Number(2.29331643822).\nHas_Number(2.29521285401).\nHas_Number(2.29711078131).\nHas_Number(2.29901026782).\nHas_Number(2.30091136111).\nHas_Number(2.30281410868).\nHas_Number(2.30471855896).\nHas_Number(2.30662476027).\nHas_Number(2.30853276191).\nHas_Number(2.31044261214).\nHas_Number(2.31235435916).\nHas_Number(2.31426805116).\nHas_Number(2.31618373631).\nHas_Number(2.31810146272).\nHas_Number(2.32002127849).\nHas_Number(2.32194323171).\nHas_Number(2.32386737044).\nHas_Number(2.32579374275).\nHas_Number(2.32772239669).\nHas_Number(2.32965338031).\nHas_Number(2.33158674168).\nHas_Number(2.33352252889).\nHas_Number(2.33546078908).\nHas_Number(2.33740156944).\nHas_Number(2.33934491722).\nHas_Number(2.34129087973).\nHas_Number(2.34323950428).\nHas_Number(2.34519083825).\nHas_Number(2.34714492908).\nHas_Number(2.34910182428).\nHas_Number(2.35106157141).\nHas_Number(2.35302421808).\nHas_Number(2.35498981294).\nHas_Number(2.35695840468).\nHas_Number(2.35893004203).\nHas_Number(2.36090477378).\nHas_Number(2.36288264875).\nHas_Number(2.36486371581).\nHas_Number(2.36684802387).\nHas_Number(2.36883562189).\nHas_Number(2.37082655887).\nHas_Number(2.37282088387).\nHas_Number(2.37481864599).\nHas_Number(2.3768198944).\nHas_Number(2.37882467832).\nHas_Number(2.38083304703).\nHas_Number(2.38284504987).\nHas_Number(2.38486073623).\nHas_Number(2.38688015556).\nHas_Number(2.38890335736).\nHas_Number(2.3909303912).\nHas_Number(2.39296130668).\nHas_Number(2.39499615344).\nHas_Number(2.39703598116).\nHas_Number(2.39908083954).\nHas_Number(2.40113077833).\nHas_Number(2.4031858473).\nHas_Number(2.40524609624).\nHas_Number(2.40731157498).\nHas_Number(2.40938233338).\nHas_Number(2.41145842134).\nHas_Number(2.41353988877).\nHas_Number(2.41562678563).\nHas_Number(2.41771916191).\nHas_Number(2.41981706763).\nHas_Number(2.42192055281).\nHas_Number(2.4240296675).\nHas_Number(2.42614446177).\nHas_Number(2.42826498569).\nHas_Number(2.43039128934).\nHas_Number(2.4325234228).\nHas_Number(2.43466143618).\nHas_Number(2.4368053796).\nHas_Number(2.43895530322).\nHas_Number(2.44111125722).\nHas_Number(2.4432732918).\nHas_Number(2.44544145719).\nHas_Number(2.44761580364).\nHas_Number(2.44979638144).\nHas_Number(2.45198324089).\nHas_Number(2.45417643231).\n", "completions": [".decl Is_Fibonacci(Number:float)\nIs_Fibonacci(0).\nIs_Fibonacci(1).\nIs_Fibonacci(2).\nIs_Fibonacci(3).\nIs_Fibonacci(5).\nIs_Fibonacci(8).\nIs_Fibonacci(13).\nIs_Fibonacci(21).\nIs_Fibonacci(34).\nIs_Fibonacci(55).\nIs_Fibonacci(89).\nIs_Fibonacci(144).\nIs_Fibonacci(233).\nIs_Fibonacci(377).\nIs_Fibonacci(610).\nIs_Fibonacci(987).\nIs_Fibonacci(1597).\nIs_Fibonacci(2584).\nIs_Fibonacci(4181).\nIs_Fibonacci(6765).\nIs_Fibonacci(10946).\nIs_Fibonacci(17711).\nIs_Fibonacci(28657).\nIs_Fibonacci(46368).\nIs_Fibonacci(75025).\nIs_Fibonacci(121393).\nIs_Fibonacci(196418).\nIs_Fibonacci(317811).\n.decl Has_Number(Number:float)\nHas_Number(3.14159).\nHas_Number(1.61803398875).\nHas_Number(2.71828182846).\nHas_Number(0.69314718056).\nHas_Number(0.30102999566).\nHas_Number(0.47712125472).\nHas_Number(0.60205999132).\nHas_Number(0.77815125038).\nHas_Number(0.84509804001).\nHas_Number(0.90308998699).\nHas_Number(0.95424250944).\nHas_Number(1.0).\nHas_Number(1.04139268516).\nHas_Number(1.07918124605).\nHas_Number(1.11394335231).\nHas_Number(1.14612803568).\nHas_Number(1.17609125906).\nHas_Number(1.20411998266).\nHas_Number(1.23044892138).\nHas_Number(1.2552725051).\nHas_Number(1.27875360095).\nHas_Number(1.30102999566).\nHas_Number(1.32221929473).\nHas_Number(1.34242268082).\nHas_Number(1.36172783602).\nHas_Number(1.38021124171).\nHas_Number(1.39794000867).\nHas_Number(1.41497334797).\nHas_Number(1.43136376416).\nHas_Number(1.44715803134).\nHas_Number(1.4623988773).\nHas_Number(1.47712125472).\nHas_Number(1.49136169383).\nHas_Number(1.50514997832).\nHas_Number(1.51851393988).\nHas_Number(1.53147891704).\nHas_Number(1.54406804435).\nHas_Number(1.55630250077).\nHas_Number(1.56820172407).\nHas_Number(1.57978359662).\nHas_Number(1.59106460703).\nHas_Number(1.60205999132).\nHas_Number(1.61278385672).\nHas_Number(1.6232492904).\nHas_Number(1.63346845558).\nHas_Number(1.64345267648).\nHas_Number(1.65321251378).\nHas_Number(1.66275783168).\nHas_Number(1.67209785793).\nHas_Number(1.68124123738).\nHas_Number(1.69019608003).\nHas_Number(1.69897000434).\nHas_Number(1.7075701761).\nHas_Number(1.71600334363).\nHas_Number(1.7242758696).\nHas_Number(1.73239375982).\nHas_Number(1.74036268949).\nHas_Number(1.74818802701).\nHas_Number(1.75587485567).\nHas_Number(1.76342799356).\nHas_Number(1.77085201164).\nHas_Number(1.77815125038).\nHas_Number(1.78532983501).\nHas_Number(1.7923916895).\nHas_Number(1.79934054945).\nHas_Number(1.80617997398).\nHas_Number(1.81291335664).\nHas_Number(1.81954393554).\nHas_Number(1.8260748027).\nHas_Number(1.83250891271).\nHas_Number(1.83884909074).\nHas_Number(1.84509804001).\nHas_Number(1.85125834872).\nHas_Number(1.85733249643).\nHas_Number(1.86332286012).\nHas_Number(1.86923171973).\nHas_Number(1.87506099131).\nHas_Number(1.88081101498).\nHas_Number(1.88648316328).\nHas_Number(1.89207809604).\nHas_Number(1.89769624473).\nHas_Number(1.90323884042).\nHas_Number(1.90870609943).\nHas_Number(1.91409893324).\nHas_Number(1.91941874954).\nHas_Number(1.92466602247).\nHas_Number(1.92984156441).\nHas_Number(1.93494692061).\nHas_Number(1.93998252415).\nHas_Number(1.9449486365).\nHas_Number(1.94984588537).\nHas_Number(1.95467400648).\nHas_Number(1.95943348453).\nHas_Number(1.96412490793).\nHas_Number(1.9687489218).\nHas_Number(1.97330602914).\nHas_Number(1.97779607694).\nHas_Number(1.98221925616).\nHas_Number(1.98657599905).\nHas_Number(1.99086615454).\nHas_Number(1.99509081167).\nHas_Number(1.99925053946).\nHas_Number(2.00334550769).\nHas_Number(2.00737661891).\nHas_Number(2.01134499301).\nHas_Number(2.01525197309).\nHas_Number(2.01909829754).\nHas_Number(2.02288455415).\nHas_Number(2.02661172756).\nHas_Number(2.03028008287).\nHas_Number(2.03389081787).\nHas_Number(2.0374454992).\nHas_Number(2.04094451145).\nHas_Number(2.04438911836).\nHas_Number(2.04778003968).\nHas_Number(2.05111768798).\nHas_Number(2.05440211109).\nHas_Number(2.05763449645).\nHas_Number(2.0608157565).\nHas_Number(2.06394690588).\nHas_Number(2.0670280272).\nHas_Number(2.07006001467).\nHas_Number(2.0730439435).\nHas_Number(2.07598078528).\nHas_Number(2.07887155963).\nHas_Number(2.08171744372).\nHas_Number(2.08451942637).\nHas_Number(2.08727858304).\nHas_Number(2.08999591885).\nHas_Number(2.09267247269).\nHas_Number(2.09530928945).\nHas_Number(2.09790741322).\nHas_Number(2.1004678961).\nHas_Number(2.1029917894).\nHas_Number(2.10548014347).\nHas_Number(2.10793300751).\nHas_Number(2.11035144115).\nHas_Number(2.11273650372).\nHas_Number(2.11508925412).\nHas_Number(2.11741075176).\nHas_Number(2.11970205688).\nHas_Number(2.12196422922).\nHas_Number(2.12419832893).\nHas_Number(2.12640541602).\nHas_Number(2.12858655018).\nHas_Number(2.1307427907).\nHas_Number(2.13287519648).\nHas_Number(2.13498482698).\nHas_Number(2.13707274088).\nHas_Number(2.13913999667).\nHas_Number(2.14118765223).\nHas_Number(2.14321676568).\nHas_Number(2.1452283955).\nHas_Number(2.14722359989).\nHas_Number(2.1492034365).\nHas_Number(2.15116896303).\nHas_Number(2.15312123625).\nHas_Number(2.15506131211).\nHas_Number(2.15699024603).\nHas_Number(2.15890909222).\nHas_Number(2.16081890432).\nHas_Number(2.16272073502).\nHas_Number(2.16461563651).\nHas_Number(2.16650466036).\nHas_Number(2.16838885773).\nHas_Number(2.17026927975).\nHas_Number(2.17214697796).\nHas_Number(2.17402200385).\nHas_Number(2.17589540888).\nHas_Number(2.17776724493).\nHas_Number(2.17963756372).\nHas_Number(2.18150641693).\nHas_Number(2.18337385699).\nHas_Number(2.18523993601).\nHas_Number(2.18710470618).\nHas_Number(2.18896821954).\nHas_Number(2.1908305279).\nHas_Number(2.19269168225).\nHas_Number(2.19455173392).\nHas_Number(2.19641073481).\nHas_Number(2.19826873624).\nHas_Number(2.20012578988).\nHas_Number(2.20198194722).\nHas_Number(2.20383725972).\nHas_Number(2.20569177819).\nHas_Number(2.20754555354).\nHas_Number(2.20939863641).\nHas_Number(2.2112510778).\nHas_Number(2.21310292891).\nHas_Number(2.21495424087).\nHas_Number(2.21680506455).\nHas_Number(2.21865545059).\nHas_Number(2.22050544934).\nHas_Number(2.22235511031).\nHas_Number(2.22420448223).\nHas_Number(2.22605361322).\nHas_Number(2.22790255093).\nHas_Number(2.22975134223).\nHas_Number(2.23160003377).\nHas_Number(2.23344867189).\nHas_Number(2.23529730201).\nHas_Number(2.23714696968).\nHas_Number(2.23899772041).\nHas_Number(2.24084959968).\nHas_Number(2.24270265303).\nHas_Number(2.24455692506).\nHas_Number(2.24641246047).\nHas_Number(2.24826930408).\nHas_Number(2.25012750083).\nHas_Number(2.25198709589).\nHas_Number(2.2538481346).\nHas_Number(2.25571066247).\nHas_Number(2.25757472522).\nHas_Number(2.25944036844).\nHas_Number(2.26130763763).\nHas_Number(2.26317657834).\nHas_Number(2.2650472362).\nHas_Number(2.26691965656).\nHas_Number(2.26879388598).\nHas_Number(2.27066997081).\nHas_Number(2.27254795704).\nHas_Number(2.27442789012).\nHas_Number(2.27630981567).\nHas_Number(2.27819377928).\nHas_Number(2.2800798263).\nHas_Number(2.28196700287).\nHas_Number(2.28385535587).\nHas_Number(2.28574493296).\nHas_Number(2.28763578157).\nHas_Number(2.28952794994).\nHas_Number(2.29142148616).\nHas_Number(2.29331643822).\nHas_Number(2.29521285401).\nHas_Number(2.29711078131).\nHas_Number(2.29901026782).\nHas_Number(2.30091136111).\nHas_Number(2.30281410868).\nHas_Number(2.30471855896).\nHas_Number(2.30662476027).\nHas_Number(2.30853276191).\nHas_Number(2.31044261214).\nHas_Number(2.31235435916).\nHas_Number(2.31426805116).\nHas_Number(2.31618373631).\nHas_Number(2.31810146272).\nHas_Number(2.32002127849).\nHas_Number(2.32194323171).\nHas_Number(2.32386737044).\nHas_Number(2.32579374275).\nHas_Number(2.32772239669).\nHas_Number(2.32965338031).\nHas_Number(2.33158674168).\nHas_Number(2.33352252889).\nHas_Number(2.33546078908).\nHas_Number(2.33740156944).\nHas_Number(2.33934491722).\nHas_Number(2.34129087973).\nHas_Number(2.34323950428).\nHas_Number(2.34519083825).\nHas_Number(2.34714492908).\nHas_Number(2.34910182428).\nHas_Number(2.35106157141).\nHas_Number(2.35302421808).\nHas_Number(2.35498981294).\nHas_Number(2.35695840468).\nHas_Number(2.35893004203).\nHas_Number(2.36090477378).\nHas_Number(2.36288264875).\nHas_Number(2.36486371581).\nHas_Number(2.36684802387).\nHas_Number(2.36883562189).\nHas_Number(2.37082655887).\nHas_Number(2.37282088387).\nHas_Number(2.37481864599).\nHas_Number(2.3768198944).\nHas_Number(2.37882467832).\nHas_Number(2.38083304703).\nHas_Number(2.38284504987).\nHas_Number(2.38486073623).\nHas_Number(2.38688015556).\nHas_Number(2.38890335736).\nHas_Number(2.3909303912).\nHas_Number(2.39296130668).\nHas_Number(2.39499615344).\nHas_Number(2.39703598116).\nHas_Number(2.39908083954).\nHas_Number(2.40113077833).\nHas_Number(2.4031858473).\nHas_Number(2.40524609624).\nHas_Number(2.40731157498).\nHas_Number(2.40938233338).\nHas_Number(2.41145842134).\nHas_Number(2.41353988877).\nHas_Number(2.41562678563).\nHas_Number(2.41771916191).\nHas_Number(2.41981706763).\nHas_Number(2.42192055281).\nHas_Number(2.4240296675).\nHas_Number(2.42614446177).\nHas_Number(2.42826498569).\nHas_Number(2.43039128934).\nHas_Number(2.4325234228).\nHas_Number(2.43466143618).\nHas_Number(2.4368053796).\nHas_Number(2.43895530322).\nHas_Number(2.44111125722).\nHas_Number(2.4432732918).\nHas_Number(2.44544145719).\nHas_Number(2.44761580364).\nHas_Number(2.44979638144).\nHas_Number(2.45198324089).\nHas_Number(2.45417643231).\n"]}
{"id": 369, "answer": true, "completion": ".decl Average_n_peas(N_peas:float)\nAverage_n_peas(7).\n.decl N_commas_needed(N:float)\nN_commas_needed(999999999).\n.decl Answer()\nAnswer() :- Average_n_peas(n_peas), N_commas_needed(n), n_peas * n >= n + 1.\n.output Answer", "completions": [".decl Average_n_peas(N_peas:float)\nAverage_n_peas(7).\n.decl N_commas_needed(N:float)\nN_commas_needed(999999999).\n.decl Answer()\nAnswer() :- Average_n_peas(n_peas), N_commas_needed(n), n_peas * n >= n + 1.\n.output Answer"]}
{"id": 370, "answer": true, "completion": ".decl Can_be_used_for_ingredient(Ingredient:symbol, Food:symbol)\nCan_be_used_for_ingredient(\"goat milk\", \"French toast\").\nCan_be_used_for_ingredient(\"cow milk\", \"French toast\").\nCan_be_used_for_ingredient(\"almond milk\", \"French toast\").\n.decl Answer()\nAnswer() :- Can_be_used_for_ingredient(\"goat milk\", \"French toast\").\n.output Answer", "completions": [".decl Can_be_used_for_ingredient(Ingredient:symbol, Food:symbol)\nCan_be_used_for_ingredient(\"goat milk\", \"French toast\").\nCan_be_used_for_ingredient(\"cow milk\", \"French toast\").\nCan_be_used_for_ingredient(\"almond milk\", \"French toast\").\n.decl Answer()\nAnswer() :- Can_be_used_for_ingredient(\"goat milk\", \"French toast\").\n.output Answer"]}
{"id": 371, "answer": false, "completion": ".decl Similar_to(Role1:symbol, Role2:symbol)\nSimilar_to(\"US Secretary of State\", \"CEO\").\nSimilar_to(\"administrative secretary\", \"receptionist\").\n.decl Answer()\nAnswer() :- Similar_to(\"US Secretary of State\", role), Similar_to(\"administrative secretary\", role).\n.output Answer", "completions": [".decl Similar_to(Role1:symbol, Role2:symbol)\nSimilar_to(\"US Secretary of State\", \"CEO\").\nSimilar_to(\"administrative secretary\", \"receptionist\").\n.decl Answer()\nAnswer() :- Similar_to(\"US Secretary of State\", role), Similar_to(\"administrative secretary\", role).\n.output Answer"]}
{"id": 372, "answer": false, "completion": ".decl Years_of_experience(Person:symbol, Years:float)\nYears_of_experience(\"Dale Earnhardt Jr.\", 20).\n.decl Answer()\nAnswer() :- Years_of_experience(\"Dale Earnhardt Jr.\", years), years < 5.\n.output Answer", "completions": [".decl Years_of_experience(Person:symbol, Years:float)\nYears_of_experience(\"Dale Earnhardt Jr.\", 20).\n.decl Answer()\nAnswer() :- Years_of_experience(\"Dale Earnhardt Jr.\", years), years < 5.\n.output Answer"]}
{"id": 373, "answer": false, "completion": ".decl Defeats(Person:symbol, Opponent:symbol)\nDefeats(\"Ronda Rousey\", \"Cat Zingano\").\n.decl Has_power(Character:symbol, Power:float)\nHas_power(\"Colossus\", 7).\n.decl Answer()\nAnswer() :- Defeats(\"Ronda Rousey\", opponent), Has_power(opponent, power), power < 7.\n.output Answer", "completions": [".decl Defeats(Person:symbol, Opponent:symbol)\nDefeats(\"Ronda Rousey\", \"Cat Zingano\").\n.decl Has_power(Character:symbol, Power:float)\nHas_power(\"Colossus\", 7).\n.decl Answer()\nAnswer() :- Defeats(\"Ronda Rousey\", opponent), Has_power(opponent, power), power < 7.\n.output Answer"]}
{"id": 374, "answer": true, "completion": ".decl Travels_at_speed(Object:symbol, Speed:float)\nTravels_at_speed(\"DRL Racer X drone\", 179).\n.decl Distance_between_points(Point1:symbol, Point2:symbol, Distance:float)\nDistance_between_points(\"Brooklyn Bridge entrance\", \"Brooklyn Bridge exit\", 1595).\n.decl Answer()\nAnswer() :- Distance_between_points(point1, point2, distance), Travels_at_speed(\"DRL Racer X drone\", speed), time = distance / speed, time <= 18.\n.output Answer", "completions": [".decl Travels_at_speed(Object:symbol, Speed:float)\nTravels_at_speed(\"DRL Racer X drone\", 179).\n.decl Distance_between_points(Point1:symbol, Point2:symbol, Distance:float)\nDistance_between_points(\"Brooklyn Bridge entrance\", \"Brooklyn Bridge exit\", 1595).\n.decl Answer()\nAnswer() :- Distance_between_points(point1, point2, distance), Travels_at_speed(\"DRL Racer X drone\", speed), time = distance / speed, time <= 18.\n.output Answer"]}
{"id": 375, "answer": false, "completion": ".decl Is_type_of(Art:symbol, Type:symbol)\nIs_type_of(\"photography\", \"visual art\").\nIs_type_of(\"abstract art\", \"art\").\n.decl Answer()\nAnswer() :- Is_type_of(\"photography\", type1), Is_type_of(type1, type2), Is_type_of(\"abstract art\", type2).\n.output Answer", "completions": [".decl Is_type_of(Art:symbol, Type:symbol)\nIs_type_of(\"photography\", \"visual art\").\nIs_type_of(\"abstract art\", \"art\").\n.decl Answer()\nAnswer() :- Is_type_of(\"photography\", type1), Is_type_of(type1, type2), Is_type_of(\"abstract art\", type2).\n.output Answer"]}
{"id": 376, "answer": true, "completion": ".decl Fits_on_deck(Object:symbol)\nFits_on_deck(\"titanic\").\n.decl Has_length(Object:symbol, Length:float)\nHas_length(\"giant squid\", 13).\nHas_length(\"titanic\", 269).\n.decl Answer()\nAnswer() :- Has_length(\"giant squid\", length1), Has_length(\"titanic\", length2), Fits_on_deck(\"titanic\"), length1 <= length2.\n.output Answer", "completions": [".decl Fits_on_deck(Object:symbol)\nFits_on_deck(\"titanic\").\n.decl Has_length(Object:symbol, Length:float)\nHas_length(\"giant squid\", 13).\nHas_length(\"titanic\", 269).\n.decl Answer()\nAnswer() :- Has_length(\"giant squid\", length1), Has_length(\"titanic\", length2), Fits_on_deck(\"titanic\"), length1 <= length2.\n.output Answer"]}
{"id": 377, "answer": false, "completion": ".decl Debuted_on_network(Show:symbol, Network:symbol, Year:float)\nDebuted_on_network(\"Supernatural\", \"The CW\", 2005).\nDebuted_on_network(\"Gilmore Girls\", \"The WB\", 2000).\nDebuted_on_network(\"Smallville\", \"The WB\", 2001).\n.decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Supernatural\", 15).\nHas_n_seasons(\"Gilmore Girls\", 7).\nHas_n_seasons(\"Smallville\", 10).\n.decl Answer()\nAnswer() :- Debuted_on_network(show1, \"The CW\", year1), Has_n_seasons(show1, n_seasons1), Debuted_on_network(show2, \"The CW\", year2), Has_n_seasons(show2, n_seasons2), show1 != show2, year1 <= year2, n_seasons1 >= n_seasons2.\n.output Answer", "completions": [".decl Debuted_on_network(Show:symbol, Network:symbol, Year:float)\nDebuted_on_network(\"Supernatural\", \"The CW\", 2005).\nDebuted_on_network(\"Gilmore Girls\", \"The WB\", 2000).\nDebuted_on_network(\"Smallville\", \"The WB\", 2001).\n.decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Supernatural\", 15).\nHas_n_seasons(\"Gilmore Girls\", 7).\nHas_n_seasons(\"Smallville\", 10).\n.decl Answer()\nAnswer() :- Debuted_on_network(show1, \"The CW\", year1), Has_n_seasons(show1, n_seasons1), Debuted_on_network(show2, \"The CW\", year2), Has_n_seasons(show2, n_seasons2), show1 != show2, year1 <= year2, n_seasons1 >= n_seasons2.\n.output Answer"]}
{"id": 378, "answer": true, "completion": ".decl Saw_show(Person:symbol, Show:symbol)\nSaw_show(\"Eddie Murphy's father\", \"Delirious\").\n.decl Performed_by(Show:symbol, Performer:symbol)\nPerformed_by(\"Delirious\", \"Eddie Murphy\").\n.decl Answer()\nAnswer() :- Saw_show(\"Eddie Murphy's father\", show), Performed_by(show, \"Eddie Murphy\").\n.output Answer", "completions": [".decl Saw_show(Person:symbol, Show:symbol)\nSaw_show(\"Eddie Murphy's father\", \"Delirious\").\n.decl Performed_by(Show:symbol, Performer:symbol)\nPerformed_by(\"Delirious\", \"Eddie Murphy\").\n.decl Answer()\nAnswer() :- Saw_show(\"Eddie Murphy's father\", show), Performed_by(show, \"Eddie Murphy\").\n.output Answer"]}
{"id": 379, "answer": false, "completion": ".decl Is_visible_to_eye(Substance:symbol)\nIs_visible_to_eye(\"oxygen\").\nIs_visible_to_eye(\"nitrogen\").\nIs_visible_to_eye(\"carbon dioxide\").\n.decl Answer()\nAnswer() :- Is_visible_to_eye(\"methane\").\n.output Answer", "completions": [".decl Is_visible_to_eye(Substance:symbol)\nIs_visible_to_eye(\"oxygen\").\nIs_visible_to_eye(\"nitrogen\").\nIs_visible_to_eye(\"carbon dioxide\").\n.decl Answer()\nAnswer() :- Is_visible_to_eye(\"methane\").\n.output Answer"]}
{"id": 380, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"September\").\nHappens_in_time(\"Texas\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", month), Happens_in_time(\"Texas\", season), month != season.\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"frost\", \"September\").\nHappens_in_time(\"Texas\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"frost\", month), Happens_in_time(\"Texas\", season), month != season.\n.output Answer"]}
{"id": 381, "answer": false, "completion": ".decl Inhabits(Animal:symbol, Location:symbol)\nInhabits(\"mountain goat\", \"mountain\").\nInhabits(\"mountain goat\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Inhabits(\"mountain goat\", \"Mount Sharp\").\n.output Answer", "completions": [".decl Inhabits(Animal:symbol, Location:symbol)\nInhabits(\"mountain goat\", \"mountain\").\nInhabits(\"mountain goat\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Inhabits(\"mountain goat\", \"Mount Sharp\").\n.output Answer"]}
{"id": 382, "answer": false, "completion": ".decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Felicity Huffman\", \"Joe Biden\").\n.decl Party_affiliation(Person:symbol, Party:symbol)\nParty_affiliation(\"Felicity Huffman\", \"Democratic Party\").\nParty_affiliation(\"Mike DeWine\", \"Republican Party\").\n.decl Answer()\nAnswer() :- Votes_for(\"Felicity Huffman\", candidate1), Party_affiliation(\"Felicity Huffman\", party1), Party_affiliation(\"Mike DeWine\", party2), party1 = party2, candidate1 = \"Mike DeWine\".\n.output Answer", "completions": [".decl Votes_for(Person:symbol, Candidate:symbol)\nVotes_for(\"Felicity Huffman\", \"Joe Biden\").\n.decl Party_affiliation(Person:symbol, Party:symbol)\nParty_affiliation(\"Felicity Huffman\", \"Democratic Party\").\nParty_affiliation(\"Mike DeWine\", \"Republican Party\").\n.decl Answer()\nAnswer() :- Votes_for(\"Felicity Huffman\", candidate1), Party_affiliation(\"Felicity Huffman\", party1), Party_affiliation(\"Mike DeWine\", party2), party1 = party2, candidate1 = \"Mike DeWine\".\n.output Answer"]}
{"id": 383, "answer": true, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Tony Bennett\", 4).\n.decl Has_wives(Person:symbol, N_wives:float)\nHas_wives(\"Tony Bennett\", 3).\n.decl Answer()\nAnswer() :- Has_children(\"Tony Bennett\", n_children), Has_wives(\"Tony Bennett\", n_wives), n_children > n_wives.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Tony Bennett\", 4).\n.decl Has_wives(Person:symbol, N_wives:float)\nHas_wives(\"Tony Bennett\", 3).\n.decl Answer()\nAnswer() :- Has_children(\"Tony Bennett\", n_children), Has_wives(\"Tony Bennett\", n_wives), n_children > n_wives.\n.output Answer"]}
{"id": 384, "answer": false, "completion": ".decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Survivor\", 40).\n.decl Has_n_letters(Language:symbol, N_letters:float)\nHas_n_letters(\"Ancient Greek\", 24).\n.decl Answer()\nAnswer() :- Has_n_seasons(\"Survivor\", n_seasons), Has_n_letters(\"Ancient Greek\", n_letters), n_seasons < n_letters.\n.output Answer", "completions": [".decl Has_n_seasons(Show:symbol, N_seasons:float)\nHas_n_seasons(\"Survivor\", 40).\n.decl Has_n_letters(Language:symbol, N_letters:float)\nHas_n_letters(\"Ancient Greek\", 24).\n.decl Answer()\nAnswer() :- Has_n_seasons(\"Survivor\", n_seasons), Has_n_letters(\"Ancient Greek\", n_letters), n_seasons < n_letters.\n.output Answer"]}
{"id": 385, "answer": true, "completion": ".decl Can_communicate(Person1:symbol, Person2:symbol)\nCan_communicate(\"Carl Friedrich Gauss\", \"Johann Heinrich Lambert\").\n.decl Distance(Person1:symbol, Person2:symbol, Distance:float)\nDistance(\"Carl Friedrich Gauss\", \"Johann Heinrich Lambert\", 100).\n.decl Answer()\nAnswer() :- Can_communicate(\"Carl Friedrich Gauss\", person2), Distance(\"Carl Friedrich Gauss\", person2, distance), distance <= 100.\n.output Answer", "completions": [".decl Can_communicate(Person1:symbol, Person2:symbol)\nCan_communicate(\"Carl Friedrich Gauss\", \"Johann Heinrich Lambert\").\n.decl Distance(Person1:symbol, Person2:symbol, Distance:float)\nDistance(\"Carl Friedrich Gauss\", \"Johann Heinrich Lambert\", 100).\n.decl Answer()\nAnswer() :- Can_communicate(\"Carl Friedrich Gauss\", person2), Distance(\"Carl Friedrich Gauss\", person2, distance), distance <= 100.\n.output Answer"]}
{"id": 386, "answer": true, "completion": ".decl Used_in(Product:symbol, Ingredient:symbol)\nUsed_in(\"wine\", \"grapes\").\n.decl Answer()\nAnswer() :- Used_in(\"wine\", \"grapes\").\n.output Answer", "completions": [".decl Used_in(Product:symbol, Ingredient:symbol)\nUsed_in(\"wine\", \"grapes\").\n.decl Answer()\nAnswer() :- Used_in(\"wine\", \"grapes\").\n.output Answer"]}
{"id": 387, "answer": false, "completion": ".decl Blooms_in_time(Plant:symbol, Time:symbol)\nBlooms_in_time(\"wheat seed\", \"spring\").\n.decl Has_average_age(Gender:symbol, Age:float)\nHas_average_age(\"woman\", 28).\n.decl Answer()\nAnswer() :- Blooms_in_time(\"wheat seed\", season), Has_average_age(\"woman\", age), age < season.\n.output Answer", "completions": [".decl Blooms_in_time(Plant:symbol, Time:symbol)\nBlooms_in_time(\"wheat seed\", \"spring\").\n.decl Has_average_age(Gender:symbol, Age:float)\nHas_average_age(\"woman\", 28).\n.decl Answer()\nAnswer() :- Blooms_in_time(\"wheat seed\", season), Has_average_age(\"woman\", age), age < season.\n.output Answer"]}
{"id": 388, "answer": true, "completion": ".decl Can_make(Object:symbol, Technology:symbol)\nCan_make(\"3D printing\", \"prosthetic limbs\").\nCan_make(\"genetic engineering\", \"adenovirus\").\n.decl Answer()\nAnswer() :- Can_make(\"3D printing\", object1), Can_make(\"genetic engineering\", object2), object1 != \"adenovirus\", object2 = \"adenovirus\".\n.output Answer", "completions": [".decl Can_make(Object:symbol, Technology:symbol)\nCan_make(\"3D printing\", \"prosthetic limbs\").\nCan_make(\"genetic engineering\", \"adenovirus\").\n.decl Answer()\nAnswer() :- Can_make(\"3D printing\", object1), Can_make(\"genetic engineering\", object2), object1 != \"adenovirus\", object2 = \"adenovirus\".\n.output Answer"]}
{"id": 389, "answer": false, "completion": ".decl Character_appears_in(Character:symbol, Work:symbol)\nCharacter_appears_in(\"Dorian Gray\", \"The Picture of Dorian Gray\").\n.decl Work_involves_actor(Work:symbol, Actor:symbol)\nWork_involves_actor(\"Penny Dreadful\", \"Eva Green\").\n.decl Answer()\nAnswer() :- Character_appears_in(character, work), Work_involves_actor(work, \"Eva Green\").\n.output Answer", "completions": [".decl Character_appears_in(Character:symbol, Work:symbol)\nCharacter_appears_in(\"Dorian Gray\", \"The Picture of Dorian Gray\").\n.decl Work_involves_actor(Work:symbol, Actor:symbol)\nWork_involves_actor(\"Penny Dreadful\", \"Eva Green\").\n.decl Answer()\nAnswer() :- Character_appears_in(character, work), Work_involves_actor(work, \"Eva Green\").\n.output Answer"]}
{"id": 390, "answer": true, "completion": ".decl Located_in(City:symbol, State:symbol)\nLocated_in(\"Detroit\", \"Michigan\").\n.decl Can_house_stadium(Stadium:symbol, N_people:float)\nCan_house_stadium(\"Toyota Stadium\", 20000).\n.decl Answer()\nAnswer() :- Can_house_stadium(\"Toyota Stadium\", n_people), n_people >= 10000, Located_in(city, \"Michigan\").\n.output Answer", "completions": [".decl Located_in(City:symbol, State:symbol)\nLocated_in(\"Detroit\", \"Michigan\").\n.decl Can_house_stadium(Stadium:symbol, N_people:float)\nCan_house_stadium(\"Toyota Stadium\", 20000).\n.decl Answer()\nAnswer() :- Can_house_stadium(\"Toyota Stadium\", n_people), n_people >= 10000, Located_in(city, \"Michigan\").\n.output Answer"]}
{"id": 391, "answer": true, "completion": ".decl Can_lift(Person:symbol, Weight:float)\nCan_lift(\"Arnold Schwarzenegger\", 500).\n.decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"red fox\", \"red\").\n.decl Answer()\nAnswer() :- Can_lift(person, weight), Has_color(\"red fox\", \"red\"), weight < 10.\n.output Answer", "completions": [".decl Can_lift(Person:symbol, Weight:float)\nCan_lift(\"Arnold Schwarzenegger\", 500).\n.decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"red fox\", \"red\").\n.decl Answer()\nAnswer() :- Can_lift(person, weight), Has_color(\"red fox\", \"red\"), weight < 10.\n.output Answer"]}
{"id": 392, "answer": false, "completion": ".decl Celebrates(Holiday:symbol, Country:symbol)\nCelebrates(\"Eid al-Fitr\", \"Muslim countries\").\nCelebrates(\"Thanksgiving\", \"USA\").\nCelebrates(\"Christmas\", \"USA\").\n.decl Length_of_show(Show:symbol, Length:float)\nLength_of_show(\"The Office\", 22).\n.decl Answer()\nAnswer() :- Celebrates(\"Eid al-Fitr\", country), Length_of_show(\"The Office\", length), length > 180, country != \"USA\".\n.output Answer", "completions": [".decl Celebrates(Holiday:symbol, Country:symbol)\nCelebrates(\"Eid al-Fitr\", \"Muslim countries\").\nCelebrates(\"Thanksgiving\", \"USA\").\nCelebrates(\"Christmas\", \"USA\").\n.decl Length_of_show(Show:symbol, Length:float)\nLength_of_show(\"The Office\", 22).\n.decl Answer()\nAnswer() :- Celebrates(\"Eid al-Fitr\", country), Length_of_show(\"The Office\", length), length > 180, country != \"USA\".\n.output Answer"]}
{"id": 393, "answer": true, "completion": ".decl Population(City:symbol, Population:float)\nPopulation(\"Auburn, New York\", 27000).\n.decl Capacity(Venue:symbol, Capacity:float)\nCapacity(\"Tropicana Field\", 42000).\n.decl Answer()\nAnswer() :- Population(\"Auburn, New York\", population), Capacity(\"Tropicana Field\", capacity), population <= capacity.\n.output Answer", "completions": [".decl Population(City:symbol, Population:float)\nPopulation(\"Auburn, New York\", 27000).\n.decl Capacity(Venue:symbol, Capacity:float)\nCapacity(\"Tropicana Field\", 42000).\n.decl Answer()\nAnswer() :- Population(\"Auburn, New York\", population), Capacity(\"Tropicana Field\", capacity), population <= capacity.\n.output Answer"]}
{"id": 394, "answer": true, "completion": ".decl Parent(Person:symbol, Child:symbol)\nParent(\"Richard III\", \"Edward of Middleham\").\n.decl Grandparent(Person:symbol, Grandchild:symbol)\nGrandparent(\"Richard III\", grandchild).\nParent(parent, grandchild) :- Parent(parent, child), Parent(child, grandchild).\n.decl Answer()\nAnswer() :- Grandparent(\"Richard III\", \"Edward of Middleham\").\n.output Answer", "completions": [".decl Parent(Person:symbol, Child:symbol)\nParent(\"Richard III\", \"Edward of Middleham\").\n.decl Grandparent(Person:symbol, Grandchild:symbol)\nGrandparent(\"Richard III\", grandchild).\nParent(parent, grandchild) :- Parent(parent, child), Parent(child, grandchild).\n.decl Answer()\nAnswer() :- Grandparent(\"Richard III\", \"Edward of Middleham\").\n.output Answer"]}
{"id": 395, "answer": true, "completion": ".decl Has_magnitude(Event:symbol, Magnitude:float)\nHas_magnitude(\"1980 United States presidential election\", 0.5).\nHas_magnitude(\"landslide in California\", 2.3).\nHas_magnitude(\"landslide in Alaska\", 1.8).\n.decl Answer()\nAnswer() :- Has_magnitude(\"1980 United States presidential election\", magnitude1), Has_magnitude(event2, magnitude2), magnitude2 > magnitude1.\n.output Answer", "completions": [".decl Has_magnitude(Event:symbol, Magnitude:float)\nHas_magnitude(\"1980 United States presidential election\", 0.5).\nHas_magnitude(\"landslide in California\", 2.3).\nHas_magnitude(\"landslide in Alaska\", 1.8).\n.decl Answer()\nAnswer() :- Has_magnitude(\"1980 United States presidential election\", magnitude1), Has_magnitude(event2, magnitude2), magnitude2 > magnitude1.\n.output Answer"]}
{"id": 396, "answer": false, "completion": ".decl Can_reach_depth(Person:symbol, Depth:float)\nCan_reach_depth(\"Nuno Gomes\", 30).\n.decl Deepest_point(Location:symbol, Depth:float)\nDeepest_point(\"Red Sea\", 2211).\n.decl Answer()\nAnswer() :- Can_reach_depth(\"Nuno Gomes\", depth1), Deepest_point(\"Red Sea\", depth2), depth1 >= depth2.\n.output Answer", "completions": [".decl Can_reach_depth(Person:symbol, Depth:float)\nCan_reach_depth(\"Nuno Gomes\", 30).\n.decl Deepest_point(Location:symbol, Depth:float)\nDeepest_point(\"Red Sea\", 2211).\n.decl Answer()\nAnswer() :- Can_reach_depth(\"Nuno Gomes\", depth1), Deepest_point(\"Red Sea\", depth2), depth1 >= depth2.\n.output Answer"]}
{"id": 397, "answer": false, "completion": ".decl Has_knowledge(Person:symbol, Topic:symbol)\nHas_knowledge(\"Tom Cruise\", \"Scientology\").\n.decl Can_explain(Person:symbol, Topic:symbol)\nCan_explain(\"Tom Cruise\", \"mental auditing\").\n.decl Answer()\nAnswer() :- Has_knowledge(\"Tom Cruise\", \"Scientology\"), Can_explain(\"Tom Cruise\", topic).\n.output Answer", "completions": [".decl Has_knowledge(Person:symbol, Topic:symbol)\nHas_knowledge(\"Tom Cruise\", \"Scientology\").\n.decl Can_explain(Person:symbol, Topic:symbol)\nCan_explain(\"Tom Cruise\", \"mental auditing\").\n.decl Answer()\nAnswer() :- Has_knowledge(\"Tom Cruise\", \"Scientology\"), Can_explain(\"Tom Cruise\", topic).\n.output Answer"]}
{"id": 398, "answer": false, "completion": ".decl Listens_to(Person:symbol, Medium:symbol)\nListens_to(\"John Lennon\", \"vinyl\").\nListens_to(\"Paul McCartney\", \"CD\").\n.decl Answer()\nAnswer() :- Listens_to(\"John Lennon\", medium), medium != \"CD\".\n.output Answer", "completions": [".decl Listens_to(Person:symbol, Medium:symbol)\nListens_to(\"John Lennon\", \"vinyl\").\nListens_to(\"Paul McCartney\", \"CD\").\n.decl Answer()\nAnswer() :- Listens_to(\"John Lennon\", medium), medium != \"CD\".\n.output Answer"]}
{"id": 399, "answer": true, "completion": ".decl Prime_minister(Name:symbol, Year:float)\nPrime_minister(\"Margaret Thatcher\", 1979).\nPrime_minister(\"Stanley Baldwin\", 1924).\nPrime_minister(\"Neville Chamberlain\", 1937).\n.decl Answer()\nAnswer() :- Prime_minister(\"Margaret Thatcher\", year1), Prime_minister(name2, year2), year1 = year2 + 5, Prime_minister(\"Stanley Baldwin\", year3), year2 = year3 - 5, name2 != \"Stanley Baldwin\".\nAnswer() :- Prime_minister(\"Margaret Thatcher\", year1), Prime_minister(name2, year2), year1 = year2 - 5, Prime_minister(\"Stanley Baldwin\", year3), year2 = year3 + 5, name2 != \"Stanley Baldwin\".\n.output Answer", "completions": [".decl Prime_minister(Name:symbol, Year:float)\nPrime_minister(\"Margaret Thatcher\", 1979).\nPrime_minister(\"Stanley Baldwin\", 1924).\nPrime_minister(\"Neville Chamberlain\", 1937).\n.decl Answer()\nAnswer() :- Prime_minister(\"Margaret Thatcher\", year1), Prime_minister(name2, year2), year1 = year2 + 5, Prime_minister(\"Stanley Baldwin\", year3), year2 = year3 - 5, name2 != \"Stanley Baldwin\".\nAnswer() :- Prime_minister(\"Margaret Thatcher\", year1), Prime_minister(name2, year2), year1 = year2 - 5, Prime_minister(\"Stanley Baldwin\", year3), year2 = year3 + 5, name2 != \"Stanley Baldwin\".\n.output Answer"]}
{"id": 400, "answer": false, "completion": ".decl Has_shoe_size(Person:symbol, Shoe_size:float)\nHas_shoe_size(\"Benito Mussolini\", 9).\nHas_shoe_size(\"Hafþór Björnsson\", 14).\n.decl Answer()\nAnswer() :- Has_shoe_size(\"Benito Mussolini\", size1), Has_shoe_size(\"Hafþór Björnsson\", size2), size1 > size2.\n.output Answer", "completions": [".decl Has_shoe_size(Person:symbol, Shoe_size:float)\nHas_shoe_size(\"Benito Mussolini\", 9).\nHas_shoe_size(\"Hafþór Björnsson\", 14).\n.decl Answer()\nAnswer() :- Has_shoe_size(\"Benito Mussolini\", size1), Has_shoe_size(\"Hafþór Björnsson\", size2), size1 > size2.\n.output Answer"]}
{"id": 401, "answer": false, "completion": ".decl Fear(Animal_A:symbol, Animal_B:symbol)\nFear(\"black-tailed jackrabbit\", \"coyote\").\n.decl Predates(Animal_A:symbol, Animal_B:symbol)\nPredates(\"European wildcat\", \"rabbit\").\n.decl Answer()\nAnswer() :- Fear(\"black-tailed jackrabbit\", predator), Predates(predator, \"European wildcat\").\n.output Answer", "completions": [".decl Fear(Animal_A:symbol, Animal_B:symbol)\nFear(\"black-tailed jackrabbit\", \"coyote\").\n.decl Predates(Animal_A:symbol, Animal_B:symbol)\nPredates(\"European wildcat\", \"rabbit\").\n.decl Answer()\nAnswer() :- Fear(\"black-tailed jackrabbit\", predator), Predates(predator, \"European wildcat\").\n.output Answer"]}
{"id": 402, "answer": true, "completion": ".decl Named_after(City:symbol, Person:symbol)\nNamed_after(\"Norman, Oklahoma\", \"Norman\").\n.decl Was_viking(Person:symbol)\nWas_viking(\"Norman\").\n.decl Answer()\nAnswer() :- Named_after(\"Norman, Oklahoma\", person), Was_viking(person).\n.output Answer", "completions": [".decl Named_after(City:symbol, Person:symbol)\nNamed_after(\"Norman, Oklahoma\", \"Norman\").\n.decl Was_viking(Person:symbol)\nWas_viking(\"Norman\").\n.decl Answer()\nAnswer() :- Named_after(\"Norman, Oklahoma\", person), Was_viking(person).\n.output Answer"]}
{"id": 403, "answer": false, "completion": ".decl Requires_coordinate_system(Attribute:symbol)\nRequires_coordinate_system(\"latitude\").\nRequires_coordinate_system(\"longitude\").\nRequires_coordinate_system(\"altitude\").\n.decl Answer()\nAnswer() :- Requires_coordinate_system(\"latitude\").\n.output Answer", "completions": [".decl Requires_coordinate_system(Attribute:symbol)\nRequires_coordinate_system(\"latitude\").\nRequires_coordinate_system(\"longitude\").\nRequires_coordinate_system(\"altitude\").\n.decl Answer()\nAnswer() :- Requires_coordinate_system(\"latitude\").\n.output Answer"]}
{"id": 404, "answer": false, "completion": ".decl Shares_interest(Person1:symbol, Person2:symbol)\nShares_interest(\"Glen Beck\", \"Stephen Colbert\").\n.decl Has_similar_fanbase(Person:symbol, Fanbase:symbol)\nHas_similar_fanbase(\"Glen Beck\", \"conservative\").\nHas_similar_fanbase(\"Stephen Colbert\", \"liberal\").\n.decl Answer()\nAnswer() :- Shares_interest(person1, person2), Has_similar_fanbase(person1, fanbase1), Has_similar_fanbase(person2, fanbase2), fanbase1 = fanbase2.\n.output Answer", "completions": [".decl Shares_interest(Person1:symbol, Person2:symbol)\nShares_interest(\"Glen Beck\", \"Stephen Colbert\").\n.decl Has_similar_fanbase(Person:symbol, Fanbase:symbol)\nHas_similar_fanbase(\"Glen Beck\", \"conservative\").\nHas_similar_fanbase(\"Stephen Colbert\", \"liberal\").\n.decl Answer()\nAnswer() :- Shares_interest(person1, person2), Has_similar_fanbase(person1, fanbase1), Has_similar_fanbase(person2, fanbase2), fanbase1 = fanbase2.\n.output Answer"]}
{"id": 405, "answer": true, "completion": ".decl Can_break_sound_barrier(Vehicle:symbol)\nCan_break_sound_barrier(\"Audi R8 V-10 Plus\").\n.decl Answer()\nAnswer() :- Can_break_sound_barrier(vehicle).\n.output Answer", "completions": [".decl Can_break_sound_barrier(Vehicle:symbol)\nCan_break_sound_barrier(\"Audi R8 V-10 Plus\").\n.decl Answer()\nAnswer() :- Can_break_sound_barrier(vehicle).\n.output Answer"]}
{"id": 406, "answer": false, "completion": ".decl Has_lifespan(Animal:symbol, Lifespan:float)\nHas_lifespan(\"monkey\", 20).\nHas_lifespan(\"human\", 80).\n.decl Answer()\nAnswer() :- Has_lifespan(\"monkey\", lifespan1), Has_lifespan(\"human\", lifespan2), lifespan1 > lifespan2.\n.output Answer", "completions": [".decl Has_lifespan(Animal:symbol, Lifespan:float)\nHas_lifespan(\"monkey\", 20).\nHas_lifespan(\"human\", 80).\n.decl Answer()\nAnswer() :- Has_lifespan(\"monkey\", lifespan1), Has_lifespan(\"human\", lifespan2), lifespan1 > lifespan2.\n.output Answer"]}
{"id": 407, "answer": true, "completion": ".decl Belongs_to_religion(Person:symbol, Religion:symbol)\nBelongs_to_religion(\"John\", \"Christianity\").\nBelongs_to_religion(\"Sarah\", \"Judaism\").\nBelongs_to_religion(\"Ahmed\", \"Islam\").\nBelongs_to_religion(\"David\", \"Hinduism\").\n.decl Looks_forward_to_event(Religion:symbol, Event:symbol)\nLooks_forward_to_event(\"Christianity\", \"Armageddon\").\nLooks_forward_to_event(\"Judaism\", \"Messiah's coming\").\nLooks_forward_to_event(\"Islam\", \"Day of Judgment\").\nLooks_forward_to_event(\"Hinduism\", \"Kalki's arrival\").\n.decl Answer()\nAnswer() :- Belongs_to_religion(person, religion), Looks_forward_to_event(religion, \"Armageddon\").\n.output Answer", "completions": [".decl Belongs_to_religion(Person:symbol, Religion:symbol)\nBelongs_to_religion(\"John\", \"Christianity\").\nBelongs_to_religion(\"Sarah\", \"Judaism\").\nBelongs_to_religion(\"Ahmed\", \"Islam\").\nBelongs_to_religion(\"David\", \"Hinduism\").\n.decl Looks_forward_to_event(Religion:symbol, Event:symbol)\nLooks_forward_to_event(\"Christianity\", \"Armageddon\").\nLooks_forward_to_event(\"Judaism\", \"Messiah's coming\").\nLooks_forward_to_event(\"Islam\", \"Day of Judgment\").\nLooks_forward_to_event(\"Hinduism\", \"Kalki's arrival\").\n.decl Answer()\nAnswer() :- Belongs_to_religion(person, religion), Looks_forward_to_event(religion, \"Armageddon\").\n.output Answer"]}
{"id": 408, "answer": true, "completion": ".decl Injury_level(Dance:symbol, Level:float)\nInjury_level(\"waltz\", 1).\nInjury_level(\"slam dance\", 5).\n.decl Answer()\nAnswer() :- Injury_level(\"waltz\", level1), Injury_level(\"slam dance\", level2), level1 < level2.\n.output Answer", "completions": [".decl Injury_level(Dance:symbol, Level:float)\nInjury_level(\"waltz\", 1).\nInjury_level(\"slam dance\", 5).\n.decl Answer()\nAnswer() :- Injury_level(\"waltz\", level1), Injury_level(\"slam dance\", level2), level1 < level2.\n.output Answer"]}
{"id": 409, "answer": true, "completion": ".decl Lives_in(Environment:symbol, Creature:symbol)\nLives_in(\"mountains\", \"Yeti\").\n.decl Has_feature(Creature:symbol, Feature:symbol)\nHas_feature(\"monkey\", \"prehensile limbs\").\n.decl Answer()\nAnswer() :- Lives_in(environment, \"Yeti\"), Has_feature(\"monkey\", feature), feature = \"prehensile limbs\", environment = \"mountains\".\n.output Answer", "completions": [".decl Lives_in(Environment:symbol, Creature:symbol)\nLives_in(\"mountains\", \"Yeti\").\n.decl Has_feature(Creature:symbol, Feature:symbol)\nHas_feature(\"monkey\", \"prehensile limbs\").\n.decl Answer()\nAnswer() :- Lives_in(environment, \"Yeti\"), Has_feature(\"monkey\", feature), feature = \"prehensile limbs\", environment = \"mountains\".\n.output Answer"]}
{"id": 410, "answer": true, "completion": ".decl Can_host(Event:symbol, Location:symbol)\nCan_host(\"United Nations Framework Convention on Climate Change\", \"Javits Center\").\n.decl Has_capacity(Location:symbol, Capacity:float)\nHas_capacity(\"Javits Center\", 150000).\n.decl Answer()\nAnswer() :- Can_host(\"United Nations Framework Convention on Climate Change\", location), Has_capacity(location, capacity), capacity >= 20000.\n.output Answer", "completions": [".decl Can_host(Event:symbol, Location:symbol)\nCan_host(\"United Nations Framework Convention on Climate Change\", \"Javits Center\").\n.decl Has_capacity(Location:symbol, Capacity:float)\nHas_capacity(\"Javits Center\", 150000).\n.decl Answer()\nAnswer() :- Can_host(\"United Nations Framework Convention on Climate Change\", location), Has_capacity(location, capacity), capacity >= 20000.\n.output Answer"]}
{"id": 411, "answer": true, "completion": ".decl Succeeded(Operation:symbol)\nSucceeded(\"Barbarossa's last expedition\").\n.decl Failed(Operation:symbol)\nFailed(\"Operation Barbarossa\").\n.decl Answer()\nAnswer() :- Succeeded(operation).\nAnswer() :- Failed(operation), operation != \"Operation Barbarossa\".\n.output Answer", "completions": [".decl Succeeded(Operation:symbol)\nSucceeded(\"Barbarossa's last expedition\").\n.decl Failed(Operation:symbol)\nFailed(\"Operation Barbarossa\").\n.decl Answer()\nAnswer() :- Succeeded(operation).\nAnswer() :- Failed(operation), operation != \"Operation Barbarossa\".\n.output Answer"]}
{"id": 412, "answer": false, "completion": ".decl Is_palindrome(Word:symbol)\nIs_palindrome(\"CAPTCHA\").\nIs_palindrome(\"Completely Automated Public Turing test to tell Computers and Humans Apart\").\n.decl Answer()\nAnswer() :- Is_palindrome(word), word = word[::-1].\n.output Answer", "completions": [".decl Is_palindrome(Word:symbol)\nIs_palindrome(\"CAPTCHA\").\nIs_palindrome(\"Completely Automated Public Turing test to tell Computers and Humans Apart\").\n.decl Answer()\nAnswer() :- Is_palindrome(word), word = word[::-1].\n.output Answer"]}
{"id": 413, "answer": false, "completion": ".decl Located_in(Company:symbol, Location:symbol)\nLocated_in(\"Universal Music Group\", \"Los Angeles\").\n.decl Heard_at(Event:symbol, Location:symbol)\nHeard_at(\"NY Stock Exchange closing bell\", \"New York City\").\n.decl Answer()\nAnswer() :- Heard_at(event, location1), Located_in(company, location2), location1 = location2, company = \"Universal Music Group\".\n.output Answer", "completions": [".decl Located_in(Company:symbol, Location:symbol)\nLocated_in(\"Universal Music Group\", \"Los Angeles\").\n.decl Heard_at(Event:symbol, Location:symbol)\nHeard_at(\"NY Stock Exchange closing bell\", \"New York City\").\n.decl Answer()\nAnswer() :- Heard_at(event, location1), Located_in(company, location2), location1 = location2, company = \"Universal Music Group\".\n.output Answer"]}
{"id": 414, "answer": false, "completion": ".decl Is_alliteration(Phrase:symbol)\nIs_alliteration(\"Lorem ipsum dolor sit amet\").\n.decl Reversed(Original:symbol, Reversed:symbol)\nReversed(\"Lorem ipsum dolor sit amet\", \"tema tis rolod muspi meroL\").\n.decl Answer()\nAnswer() :- Is_alliteration(phrase), Reversed(phrase, reversed), !reversed = \"tema tis rolod muspi meroL\".\n.output Answer", "completions": [".decl Is_alliteration(Phrase:symbol)\nIs_alliteration(\"Lorem ipsum dolor sit amet\").\n.decl Reversed(Original:symbol, Reversed:symbol)\nReversed(\"Lorem ipsum dolor sit amet\", \"tema tis rolod muspi meroL\").\n.decl Answer()\nAnswer() :- Is_alliteration(phrase), Reversed(phrase, reversed), !reversed = \"tema tis rolod muspi meroL\".\n.output Answer"]}
{"id": 415, "answer": true, "completion": ".decl Has_budget(Company:symbol, Budget:float)\nHas_budget(\"Amazon\", 386000000000).\n.decl Has_value(Item:symbol, Value:float)\nHas_value(\"The Mona Lisa\", 780000000).\n.decl Answer()\nAnswer() :- Has_budget(\"Amazon\", budget), Has_value(\"The Mona Lisa\", value), budget >= value.\n.output Answer", "completions": [".decl Has_budget(Company:symbol, Budget:float)\nHas_budget(\"Amazon\", 386000000000).\n.decl Has_value(Item:symbol, Value:float)\nHas_value(\"The Mona Lisa\", 780000000).\n.decl Answer()\nAnswer() :- Has_budget(\"Amazon\", budget), Has_value(\"The Mona Lisa\", value), budget >= value.\n.output Answer"]}
{"id": 416, "answer": true, "completion": ".decl Is_celibate(Person:symbol)\nIs_celibate(\"cleric\").\n.decl Punishment(Crime:symbol, Punishment:symbol)\nPunishment(\"adultery\", \"stoning\").\nPunishment(\"theft\", \"amputation\").\n.decl Happens_in_country(Event:symbol, Country:symbol)\nHappens_in_country(\"stoning\", \"Somalia\").\nHappens_in_country(\"amputation\", \"Saudi Arabia\").\n.decl Answer()\nAnswer() :- Is_celibate(person), Punishment(crime, \"stoning\"), Happens_in_country(\"stoning\", country).\n.output Answer", "completions": [".decl Is_celibate(Person:symbol)\nIs_celibate(\"cleric\").\n.decl Punishment(Crime:symbol, Punishment:symbol)\nPunishment(\"adultery\", \"stoning\").\nPunishment(\"theft\", \"amputation\").\n.decl Happens_in_country(Event:symbol, Country:symbol)\nHappens_in_country(\"stoning\", \"Somalia\").\nHappens_in_country(\"amputation\", \"Saudi Arabia\").\n.decl Answer()\nAnswer() :- Is_celibate(person), Punishment(crime, \"stoning\"), Happens_in_country(\"stoning\", country).\n.output Answer"]}
{"id": 417, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Kia Rio\", 4.4).\nHas_size(\"Oval Office\", 28).\n.decl Answer()\nAnswer() :- Has_size(\"Kia Rio\", size1), Has_size(\"Oval Office\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Kia Rio\", 4.4).\nHas_size(\"Oval Office\", 28).\n.decl Answer()\nAnswer() :- Has_size(\"Kia Rio\", size1), Has_size(\"Oval Office\", size2), size1 <= size2.\n.output Answer"]}
{"id": 418, "answer": true, "completion": ".decl Has_family_ties(Person1:symbol, Person2:symbol)\nHas_family_ties(\"King of Portuguese people in 1515\", \"Tudors\").\n.decl Answer()\nAnswer() :- Has_family_ties(\"King of Portuguese people in 1515\", \"Tudors\").\n.output Answer", "completions": [".decl Has_family_ties(Person1:symbol, Person2:symbol)\nHas_family_ties(\"King of Portuguese people in 1515\", \"Tudors\").\n.decl Answer()\nAnswer() :- Has_family_ties(\"King of Portuguese people in 1515\", \"Tudors\").\n.output Answer"]}
{"id": 419, "answer": true, "completion": ".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"John\", \"male\").\nHas_gender(\"Bob\", \"male\").\nHas_gender(\"Tom\", \"male\").\nHas_gender(\"Sue\", \"female\").\nHas_gender(\"Mary\", \"female\").\n.decl In_relationship(Person1:symbol, Person2:symbol)\nIn_relationship(\"John\", \"Bob\").\nIn_relationship(\"Tom\", \"Sue\").\n.decl Can_reproduce(Person1:symbol, Person2:symbol)\nCan_reproduce(\"John\", \"Sue\").\nCan_reproduce(\"Sue\", \"John\").\nCan_reproduce(\"Mary\", \"Tom\").\nCan_reproduce(\"Tom\", \"Mary\").\n.decl Answer()\nAnswer() :- Has_gender(person1, \"male\"), Has_gender(person2, \"male\"), In_relationship(person1, person2), !Can_reproduce(person1, person2).\n.output Answer", "completions": [".decl Has_gender(Person:symbol, Gender:symbol)\nHas_gender(\"John\", \"male\").\nHas_gender(\"Bob\", \"male\").\nHas_gender(\"Tom\", \"male\").\nHas_gender(\"Sue\", \"female\").\nHas_gender(\"Mary\", \"female\").\n.decl In_relationship(Person1:symbol, Person2:symbol)\nIn_relationship(\"John\", \"Bob\").\nIn_relationship(\"Tom\", \"Sue\").\n.decl Can_reproduce(Person1:symbol, Person2:symbol)\nCan_reproduce(\"John\", \"Sue\").\nCan_reproduce(\"Sue\", \"John\").\nCan_reproduce(\"Mary\", \"Tom\").\nCan_reproduce(\"Tom\", \"Mary\").\n.decl Answer()\nAnswer() :- Has_gender(person1, \"male\"), Has_gender(person2, \"male\"), In_relationship(person1, person2), !Can_reproduce(person1, person2).\n.output Answer"]}
{"id": 420, "answer": false, "completion": ".decl Height(Person:symbol, Height:float)\nHeight(\"Andre the Giant\", 2.24).\n.decl Answer()\nAnswer() :- Height(\"Yeti\", height), height < 2.24.\n.output Answer", "completions": [".decl Height(Person:symbol, Height:float)\nHeight(\"Andre the Giant\", 2.24).\n.decl Answer()\nAnswer() :- Height(\"Yeti\", height), height < 2.24.\n.output Answer"]}
{"id": 421, "answer": false, "completion": ".decl Is_obscure(Author:symbol, Genre:symbol)\nIs_obscure(\"Edgar Allan Poe\", \"horror\").\n.decl Popularity(Author:symbol, Rank:float)\nPopularity(\"Stephen King\", 1).\nPopularity(\"H.P. Lovecraft\", 2).\nPopularity(\"Edgar Allan Poe\", 3).\n.decl Answer()\nAnswer() :- Is_obscure(\"Edgar Allan Poe\", genre), Popularity(\"Edgar Allan Poe\", rank), rank > 2.\n.output Answer", "completions": [".decl Is_obscure(Author:symbol, Genre:symbol)\nIs_obscure(\"Edgar Allan Poe\", \"horror\").\n.decl Popularity(Author:symbol, Rank:float)\nPopularity(\"Stephen King\", 1).\nPopularity(\"H.P. Lovecraft\", 2).\nPopularity(\"Edgar Allan Poe\", 3).\n.decl Answer()\nAnswer() :- Is_obscure(\"Edgar Allan Poe\", genre), Popularity(\"Edgar Allan Poe\", rank), rank > 2.\n.output Answer"]}
{"id": 422, "answer": true, "completion": ".decl Father_of_system(Person:symbol, System:symbol)\nFather_of_system(\"Franklin D. Roosevelt\", \"social security system\").\n.decl Served_in_white_house(Person:symbol, Year:float)\nServed_in_white_house(\"Franklin D. Roosevelt\", 1907).\n.decl Answer()\nAnswer() :- Father_of_system(person, \"social security system\"), Served_in_white_house(person, year), year = 1907.\n.output Answer", "completions": [".decl Father_of_system(Person:symbol, System:symbol)\nFather_of_system(\"Franklin D. Roosevelt\", \"social security system\").\n.decl Served_in_white_house(Person:symbol, Year:float)\nServed_in_white_house(\"Franklin D. Roosevelt\", 1907).\n.decl Answer()\nAnswer() :- Father_of_system(person, \"social security system\"), Served_in_white_house(person, year), year = 1907.\n.output Answer"]}
{"id": 423, "answer": false, "completion": ".decl Named_after(Ship:symbol, Event:symbol)\nNamed_after(\"USS Yorktown\", \"Battle of Yorktown\").\nNamed_after(\"USS Apollo\", \"Apollo program\").\nNamed_after(\"USS Missouri\", \"Missouri Compromise\").\nNamed_after(\"USS Midway\", \"Battle of Midway\").\n.decl Answer()\nAnswer() :- Named_after(ship, \"Apollo 13\"), Named_after(ship, event), event = \"World War II battle\".\n.output Answer", "completions": [".decl Named_after(Ship:symbol, Event:symbol)\nNamed_after(\"USS Yorktown\", \"Battle of Yorktown\").\nNamed_after(\"USS Apollo\", \"Apollo program\").\nNamed_after(\"USS Missouri\", \"Missouri Compromise\").\nNamed_after(\"USS Midway\", \"Battle of Midway\").\n.decl Answer()\nAnswer() :- Named_after(ship, \"Apollo 13\"), Named_after(ship, event), event = \"World War II battle\".\n.output Answer"]}
{"id": 424, "answer": true, "completion": ".decl Has_fused_vertebrae(Animal:symbol, N_fused:float)\nHas_fused_vertebrae(\"human sacrums\", 4).\nHas_fused_vertebrae(\"Alaskan Malamute\", 3).\n.decl Answer()\nAnswer() :- Has_fused_vertebrae(\"human sacrums\", n_fused1), Has_fused_vertebrae(\"Alaskan Malamute\", n_fused2), n_fused1 > n_fused2.\n.output Answer", "completions": [".decl Has_fused_vertebrae(Animal:symbol, N_fused:float)\nHas_fused_vertebrae(\"human sacrums\", 4).\nHas_fused_vertebrae(\"Alaskan Malamute\", 3).\n.decl Answer()\nAnswer() :- Has_fused_vertebrae(\"human sacrums\", n_fused1), Has_fused_vertebrae(\"Alaskan Malamute\", n_fused2), n_fused1 > n_fused2.\n.output Answer"]}
{"id": 425, "answer": false, "completion": ".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Josh Blue\", \"cerebral palsy\").\n.decl Participates_in_games(Person:symbol, Games:symbol)\nParticipates_in_games(\"Josh Blue\", \"Paralympics\").\n.decl Answer()\nAnswer() :- Has_disability(\"Josh Blue\", disability), Participates_in_games(\"Josh Blue\", games), games = \"Paralympics\".\n.output Answer", "completions": [".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"Josh Blue\", \"cerebral palsy\").\n.decl Participates_in_games(Person:symbol, Games:symbol)\nParticipates_in_games(\"Josh Blue\", \"Paralympics\").\n.decl Answer()\nAnswer() :- Has_disability(\"Josh Blue\", disability), Participates_in_games(\"Josh Blue\", games), games = \"Paralympics\".\n.output Answer"]}
{"id": 426, "answer": true, "completion": ".decl Age(Person:symbol, Year:float, Age:float)\nAge(\"Evander Holyfield\", 2020, 57).\n.decl Age_record(Year:float, Age:float)\nAge_record(2020, 53).\nAge_record(2021, 54).\nAge_record(2022, 55).\nAge_record(2023, 56).\nAge_record(2024, 57).\n.decl Answer()\nAnswer() :- Age(\"Evander Holyfield\", year, age), Age_record(year, age_record), age > age_record.\n.output Answer", "completions": [".decl Age(Person:symbol, Year:float, Age:float)\nAge(\"Evander Holyfield\", 2020, 57).\n.decl Age_record(Year:float, Age:float)\nAge_record(2020, 53).\nAge_record(2021, 54).\nAge_record(2022, 55).\nAge_record(2023, 56).\nAge_record(2024, 57).\n.decl Answer()\nAnswer() :- Age(\"Evander Holyfield\", year, age), Age_record(year, age_record), age > age_record.\n.output Answer"]}
{"id": 427, "answer": true, "completion": ".decl Known_for(Person:symbol, Trait:symbol)\nKnown_for(\"Glenn Beck\", \"conservative views\").\nKnown_for(\"Glenn Beck\", \"controversial statements\").\nKnown_for(\"Glenn Beck\", \"emotional outbursts\").\n.decl Answer()\nAnswer() :- Known_for(\"Glenn Beck\", trait), trait != \"mild temper\".\n.output Answer", "completions": [".decl Known_for(Person:symbol, Trait:symbol)\nKnown_for(\"Glenn Beck\", \"conservative views\").\nKnown_for(\"Glenn Beck\", \"controversial statements\").\nKnown_for(\"Glenn Beck\", \"emotional outbursts\").\n.decl Answer()\nAnswer() :- Known_for(\"Glenn Beck\", trait), trait != \"mild temper\".\n.output Answer"]}
{"id": 428, "answer": false, "completion": ".decl Connected_to(Bone_A:symbol, Bone_B:symbol)\nConnected_to(\"sternum\", \"ribs\").\nConnected_to(\"ribs\", \"spine\").\nConnected_to(\"spine\", \"pelvis\").\nConnected_to(\"pelvis\", \"femur\").\nConnected_to(\"femur\", \"kneecap\").\nConnected_to(\"kneecap\", \"shin\").\nConnected_to(\"shin\", \"ankle\").\nConnected_to(\"ankle\", \"foot\").\n.decl Mentioned_in_song(Bone:symbol)\nMentioned_in_song(\"toe bone\").\nMentioned_in_song(\"foot bone\").\nMentioned_in_song(\"heel bone\").\nMentioned_in_song(\"ankle bone\").\nMentioned_in_song(\"shin bone\").\nMentioned_in_song(\"knee bone\").\nMentioned_in_song(\"thigh bone\").\nMentioned_in_song(\"hip bone\").\nMentioned_in_song(\"back bone\").\nMentioned_in_song(\"neck bone\").\nMentioned_in_song(\"jaw bone\").\nMentioned_in_song(\"head bone\").\n.decl Answer()\nAnswer() :- Connected_to(\"sternum\", bone), Mentioned_in_song(bone).\n.output Answer", "completions": [".decl Connected_to(Bone_A:symbol, Bone_B:symbol)\nConnected_to(\"sternum\", \"ribs\").\nConnected_to(\"ribs\", \"spine\").\nConnected_to(\"spine\", \"pelvis\").\nConnected_to(\"pelvis\", \"femur\").\nConnected_to(\"femur\", \"kneecap\").\nConnected_to(\"kneecap\", \"shin\").\nConnected_to(\"shin\", \"ankle\").\nConnected_to(\"ankle\", \"foot\").\n.decl Mentioned_in_song(Bone:symbol)\nMentioned_in_song(\"toe bone\").\nMentioned_in_song(\"foot bone\").\nMentioned_in_song(\"heel bone\").\nMentioned_in_song(\"ankle bone\").\nMentioned_in_song(\"shin bone\").\nMentioned_in_song(\"knee bone\").\nMentioned_in_song(\"thigh bone\").\nMentioned_in_song(\"hip bone\").\nMentioned_in_song(\"back bone\").\nMentioned_in_song(\"neck bone\").\nMentioned_in_song(\"jaw bone\").\nMentioned_in_song(\"head bone\").\n.decl Answer()\nAnswer() :- Connected_to(\"sternum\", bone), Mentioned_in_song(bone).\n.output Answer"]}
{"id": 429, "answer": false, "completion": ".decl Transmits_disease(Animal:symbol, Disease:symbol)\nTransmits_disease(\"dog\", \"rabies\").\n.decl Answer()\nAnswer() :- Transmits_disease(\"Snoopy\", \"rabies\").\n.output Answer", "completions": [".decl Transmits_disease(Animal:symbol, Disease:symbol)\nTransmits_disease(\"dog\", \"rabies\").\n.decl Answer()\nAnswer() :- Transmits_disease(\"Snoopy\", \"rabies\").\n.output Answer"]}
{"id": 430, "answer": true, "completion": ".decl Knows(Person1:symbol, Person2:symbol)\nKnows(\"Buddy The Elf\", \"Michael Hobbs\").\nKnows(\"Michael Hobbs\", \"works in publishing\").\n.decl Answer()\nAnswer() :- Knows(\"Buddy The Elf\", person), Knows(person, \"works in publishing\").\n.output Answer", "completions": [".decl Knows(Person1:symbol, Person2:symbol)\nKnows(\"Buddy The Elf\", \"Michael Hobbs\").\nKnows(\"Michael Hobbs\", \"works in publishing\").\n.decl Answer()\nAnswer() :- Knows(\"Buddy The Elf\", person), Knows(person, \"works in publishing\").\n.output Answer"]}
{"id": 431, "answer": false, "completion": ".decl Associated_with(Person:symbol, Object:symbol)\nAssociated_with(\"Issac Newton\", \"apple\").\n.decl Answer()\nAnswer() :- Associated_with(\"Issac Newton\", \"red fruit\").\n.output Answer", "completions": [".decl Associated_with(Person:symbol, Object:symbol)\nAssociated_with(\"Issac Newton\", \"apple\").\n.decl Answer()\nAnswer() :- Associated_with(\"Issac Newton\", \"red fruit\").\n.output Answer"]}
{"id": 432, "answer": false, "completion": ".decl Has_potassium(Content:symbol, Potassium:float)\nHas_potassium(\"zucchini\", 0.2).\n.decl Daily_recommendation(Nutrient:symbol, Amount:float)\nDaily_recommendation(\"potassium\", 4700).\n.decl Answer()\nAnswer() :- Has_potassium(\"zucchini\", potassium), Daily_recommendation(\"potassium\", recommendation), potassium * 7 >= recommendation.\n.output Answer", "completions": [".decl Has_potassium(Content:symbol, Potassium:float)\nHas_potassium(\"zucchini\", 0.2).\n.decl Daily_recommendation(Nutrient:symbol, Amount:float)\nDaily_recommendation(\"potassium\", 4700).\n.decl Answer()\nAnswer() :- Has_potassium(\"zucchini\", potassium), Daily_recommendation(\"potassium\", recommendation), potassium * 7 >= recommendation.\n.output Answer"]}
{"id": 433, "answer": false, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Oprah Winfrey\", 2700000000).\n.decl Has_n_employees(Person:symbol, N_employees:float)\nHas_n_employees(\"Oprah Winfrey\", 25).\n.decl Costs(Car:symbol, Price:float)\nCosts(\"Bugatti\", 3000000).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Oprah Winfrey\", net_worth), Has_n_employees(\"Oprah Winfrey\", n_employees), Costs(\"Bugatti\", price), price*12*n_employees <= net_worth.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Oprah Winfrey\", 2700000000).\n.decl Has_n_employees(Person:symbol, N_employees:float)\nHas_n_employees(\"Oprah Winfrey\", 25).\n.decl Costs(Car:symbol, Price:float)\nCosts(\"Bugatti\", 3000000).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Oprah Winfrey\", net_worth), Has_n_employees(\"Oprah Winfrey\", n_employees), Costs(\"Bugatti\", price), price*12*n_employees <= net_worth.\n.output Answer"]}
{"id": 434, "answer": true, "completion": ".decl Election_winner(Year:float, Winner:symbol, Party:symbol)\nElection_winner(1980, \"Ronald Reagan\", \"Republican\").\nElection_winner(1980, \"Jimmy Carter\", \"Democratic\").\n.decl Answer()\nAnswer() :- Election_winner(1980, winner, \"Republican\").\n.output Answer", "completions": [".decl Election_winner(Year:float, Winner:symbol, Party:symbol)\nElection_winner(1980, \"Ronald Reagan\", \"Republican\").\nElection_winner(1980, \"Jimmy Carter\", \"Democratic\").\n.decl Answer()\nAnswer() :- Election_winner(1980, winner, \"Republican\").\n.output Answer"]}
{"id": 435, "answer": true, "completion": ".decl Contains_word(Text:symbol, Word:symbol)\nContains_word(\"Henry Ford\", \"Ford\").\nContains_word(\"Ford Motor Company\", \"Ford\").\nContains_word(\"Harrison Ford\", \"Ford\").\nContains_word(\"Fordham University\", \"Ford\").\nContains_word(\"Ford Foundation\", \"Ford\").\n.decl Answer()\nAnswer() :- Contains_word(text, \"Ford\"), text != \"Henry Ford\".\n.output Answer", "completions": [".decl Contains_word(Text:symbol, Word:symbol)\nContains_word(\"Henry Ford\", \"Ford\").\nContains_word(\"Ford Motor Company\", \"Ford\").\nContains_word(\"Harrison Ford\", \"Ford\").\nContains_word(\"Fordham University\", \"Ford\").\nContains_word(\"Ford Foundation\", \"Ford\").\n.decl Answer()\nAnswer() :- Contains_word(text, \"Ford\"), text != \"Henry Ford\".\n.output Answer"]}
{"id": 436, "answer": true, "completion": ".decl Location(Object:symbol, Location:symbol)\nLocation(\"Liberty Bell\", \"Independence Hall\").\n.decl Answer()\nAnswer() :- Location(\"Liberty Bell\", \"Independence Hall\").\n.output Answer", "completions": [".decl Location(Object:symbol, Location:symbol)\nLocation(\"Liberty Bell\", \"Independence Hall\").\n.decl Answer()\nAnswer() :- Location(\"Liberty Bell\", \"Independence Hall\").\n.output Answer"]}
{"id": 437, "answer": true, "completion": ".decl Airs_on_day_show(TV_show:symbol, Day:symbol)\nAirs_on_day_show(\"Monday Night Football\", \"Monday\").\nAirs_on_day_show(\"WWE Raw\", \"Monday\").\n.decl Has_commercial_breaks(TV_show:symbol)\nHas_commercial_breaks(\"Monday Night Football\").\nHas_commercial_breaks(\"WWE Raw\").\n.decl Answer()\nAnswer() :- Airs_on_day_show(\"Monday Night Football\", day), Airs_on_day_show(\"WWE Raw\", day), Has_commercial_breaks(\"Monday Night Football\").\n.output Answer", "completions": [".decl Airs_on_day_show(TV_show:symbol, Day:symbol)\nAirs_on_day_show(\"Monday Night Football\", \"Monday\").\nAirs_on_day_show(\"WWE Raw\", \"Monday\").\n.decl Has_commercial_breaks(TV_show:symbol)\nHas_commercial_breaks(\"Monday Night Football\").\nHas_commercial_breaks(\"WWE Raw\").\n.decl Answer()\nAnswer() :- Airs_on_day_show(\"Monday Night Football\", day), Airs_on_day_show(\"WWE Raw\", day), Has_commercial_breaks(\"Monday Night Football\").\n.output Answer"]}
{"id": 438, "answer": false, "completion": ".decl Attends(Service:symbol, Person:symbol)\nAttends(\"Sunday mass\", \"missionary1\").\nAttends(\"Sunday mass\", \"missionary2\").\n.decl First_missionaries(Person:symbol)\nFirst_missionaries(\"missionary1\").\nFirst_missionaries(\"missionary2\").\n.decl Answer()\nAnswer() :- First_missionaries(person), !Attends(\"Sunday mass\", person).\n.output Answer", "completions": [".decl Attends(Service:symbol, Person:symbol)\nAttends(\"Sunday mass\", \"missionary1\").\nAttends(\"Sunday mass\", \"missionary2\").\n.decl First_missionaries(Person:symbol)\nFirst_missionaries(\"missionary1\").\nFirst_missionaries(\"missionary2\").\n.decl Answer()\nAnswer() :- First_missionaries(person), !Attends(\"Sunday mass\", person).\n.output Answer"]}
{"id": 439, "answer": false, "completion": ".decl Popular_in_year(Toy:symbol, Year:float)\nPopular_in_year(\"Tickle Me Elmo\", 1996).\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Snoop Dogg\", 1971).\n.decl Answer()\nAnswer() :- Popular_in_year(\"Tickle Me Elmo\", year), Born_in_year(\"Snoop Dogg\", birth_year), birth_year + 18 <= year.\n.output Answer", "completions": [".decl Popular_in_year(Toy:symbol, Year:float)\nPopular_in_year(\"Tickle Me Elmo\", 1996).\n.decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Snoop Dogg\", 1971).\n.decl Answer()\nAnswer() :- Popular_in_year(\"Tickle Me Elmo\", year), Born_in_year(\"Snoop Dogg\", birth_year), birth_year + 18 <= year.\n.output Answer"]}
{"id": 440, "answer": true, "completion": ".decl Considers_okay(Person:symbol, Word:symbol)\nConsiders_okay(\"Romani person\", \"Gypsy\").\nConsiders_okay(\"non-Romani person\", \"Gypsy\").\n.decl Answer()\nAnswer() :- Considers_okay(\"non-Romani person\", \"Gypsy\"), !Considers_okay(\"Romani person\", \"Gypsy\").\n.output Answer", "completions": [".decl Considers_okay(Person:symbol, Word:symbol)\nConsiders_okay(\"Romani person\", \"Gypsy\").\nConsiders_okay(\"non-Romani person\", \"Gypsy\").\n.decl Answer()\nAnswer() :- Considers_okay(\"non-Romani person\", \"Gypsy\"), !Considers_okay(\"Romani person\", \"Gypsy\").\n.output Answer"]}
{"id": 441, "answer": true, "completion": ".decl Has_gun(Person:symbol, Gun:symbol)\nHas_gun(\"Robert Downey Jr.\", \"Colt Python\").\nHas_gun(\"Barry Burton\", \"Colt Python\").\n.decl Answer()\nAnswer() :- Has_gun(\"Robert Downey Jr.\", gun), Has_gun(\"Barry Burton\", gun).\n.output Answer", "completions": [".decl Has_gun(Person:symbol, Gun:symbol)\nHas_gun(\"Robert Downey Jr.\", \"Colt Python\").\nHas_gun(\"Barry Burton\", \"Colt Python\").\n.decl Answer()\nAnswer() :- Has_gun(\"Robert Downey Jr.\", gun), Has_gun(\"Barry Burton\", gun).\n.output Answer"]}
{"id": 442, "answer": false, "completion": ".decl Popular_vote(Candidate:symbol, Votes:float)\nPopular_vote(\"Woodrow Wilson\", 6224612).\nPopular_vote(\"William Howard Taft\", 3862427).\nPopular_vote(\"Theodore Roosevelt\", 4145090).\nPopular_vote(\"Eugene V. Debs\", 901551).\n.decl Total_votes(Votes:float)\nTotal_votes(11591180).\n.decl Answer()\nAnswer() :- Popular_vote(candidate, votes), Total_votes(total_votes), votes/total_votes > 0.5.\n.output Answer", "completions": [".decl Popular_vote(Candidate:symbol, Votes:float)\nPopular_vote(\"Woodrow Wilson\", 6224612).\nPopular_vote(\"William Howard Taft\", 3862427).\nPopular_vote(\"Theodore Roosevelt\", 4145090).\nPopular_vote(\"Eugene V. Debs\", 901551).\n.decl Total_votes(Votes:float)\nTotal_votes(11591180).\n.decl Answer()\nAnswer() :- Popular_vote(candidate, votes), Total_votes(total_votes), votes/total_votes > 0.5.\n.output Answer"]}
{"id": 443, "answer": false, "completion": ".decl Ingredient(Type:symbol, Name:symbol)\nIngredient(\"fruit\", \"apple\").\nIngredient(\"vegetable\", \"carrot\").\nIngredient(\"sugar\", \"sugar\").\n.decl Recipe(Name:symbol, Ingredient:symbol)\nRecipe(\"apple pie\", \"apple\").\nRecipe(\"carrot cake\", \"carrot\").\n.decl Answer()\nAnswer() :- Recipe(recipe, ingredient), Ingredient(\"vegetable\", ingredient), Recipe(recipe, \"sugar\").\n.output Answer", "completions": [".decl Ingredient(Type:symbol, Name:symbol)\nIngredient(\"fruit\", \"apple\").\nIngredient(\"vegetable\", \"carrot\").\nIngredient(\"sugar\", \"sugar\").\n.decl Recipe(Name:symbol, Ingredient:symbol)\nRecipe(\"apple pie\", \"apple\").\nRecipe(\"carrot cake\", \"carrot\").\n.decl Answer()\nAnswer() :- Recipe(recipe, ingredient), Ingredient(\"vegetable\", ingredient), Recipe(recipe, \"sugar\").\n.output Answer"]}
{"id": 444, "answer": true, "completion": ".decl Visits(Person:symbol, Place:symbol)\nVisits(\"depressed person\", \"Golden Gate Bridge\").\n.decl Answer()\nAnswer() :- Visits(\"depressed person\", \"Golden Gate Bridge\").\n.output Answer", "completions": [".decl Visits(Person:symbol, Place:symbol)\nVisits(\"depressed person\", \"Golden Gate Bridge\").\n.decl Answer()\nAnswer() :- Visits(\"depressed person\", \"Golden Gate Bridge\").\n.output Answer"]}
{"id": 445, "answer": true, "completion": ".decl Influenced_by(Subject:symbol, Influence:symbol)\nInfluenced_by(\"letter D\", \"ancient doors\").\n.decl Answer()\nAnswer() :- Influenced_by(\"letter D\", influence).\n.output Answer", "completions": [".decl Influenced_by(Subject:symbol, Influence:symbol)\nInfluenced_by(\"letter D\", \"ancient doors\").\n.decl Answer()\nAnswer() :- Influenced_by(\"letter D\", influence).\n.output Answer"]}
{"id": 446, "answer": true, "completion": ".decl Age(Person:symbol, Years:float)\nAge(\"Methuselah\", 969).\nAge(\"Sarah\", 127).\n.decl Answer()\nAnswer() :- Age(\"Methuselah\", years1), Age(\"Sarah\", years2), years1 >= years2 + 800.\n.output Answer", "completions": [".decl Age(Person:symbol, Years:float)\nAge(\"Methuselah\", 969).\nAge(\"Sarah\", 127).\n.decl Answer()\nAnswer() :- Age(\"Methuselah\", years1), Age(\"Sarah\", years2), years1 >= years2 + 800.\n.output Answer"]}
{"id": 447, "answer": false, "completion": ".decl Supports_weight(Object:symbol, Weight:float)\nSupports_weight(\"triples tandem bike\", 300).\nSupports_weight(\"Apollo 15 crew\", 1000).\n.decl Answer()\nAnswer() :- Supports_weight(\"triples tandem bike\", weight1), Supports_weight(\"Apollo 15 crew\", weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Supports_weight(Object:symbol, Weight:float)\nSupports_weight(\"triples tandem bike\", 300).\nSupports_weight(\"Apollo 15 crew\", 1000).\n.decl Answer()\nAnswer() :- Supports_weight(\"triples tandem bike\", weight1), Supports_weight(\"Apollo 15 crew\", weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 448, "answer": true, "completion": ".decl Responds_to_stimulus(Animal:symbol, Stimulus:symbol)\nResponds_to_stimulus(\"dog\", \"bell\").\nResponds_to_stimulus(\"Grey seal\", \"fish\").\n.decl Answer()\nAnswer() :- Responds_to_stimulus(\"dog\", stimulus1), Responds_to_stimulus(\"Grey seal\", stimulus2), stimulus1 < stimulus2.\n.output Answer", "completions": [".decl Responds_to_stimulus(Animal:symbol, Stimulus:symbol)\nResponds_to_stimulus(\"dog\", \"bell\").\nResponds_to_stimulus(\"Grey seal\", \"fish\").\n.decl Answer()\nAnswer() :- Responds_to_stimulus(\"dog\", stimulus1), Responds_to_stimulus(\"Grey seal\", stimulus2), stimulus1 < stimulus2.\n.output Answer"]}
{"id": 449, "answer": false, "completion": ".decl Is_related_to(Animal_A:symbol, Animal_B:symbol)\nIs_related_to(\"sable\", \"wolverine\").\nIs_related_to(\"wolverine\", \"sable\").\n.decl Answer()\nAnswer() :- Is_related_to(\"sable\", animal), Is_related_to(animal, \"wolverine\").\n.output Answer", "completions": [".decl Is_related_to(Animal_A:symbol, Animal_B:symbol)\nIs_related_to(\"sable\", \"wolverine\").\nIs_related_to(\"wolverine\", \"sable\").\n.decl Answer()\nAnswer() :- Is_related_to(\"sable\", animal), Is_related_to(animal, \"wolverine\").\n.output Answer"]}
{"id": 450, "answer": true, "completion": ".decl Breathes_in(Environment:symbol, Animal:symbol)\nBreathes_in(\"water\", \"lobster\").\n.decl Answer()\nAnswer() :- Breathes_in(environment, \"lobster\"), environment != \"desert\".\n.output Answer", "completions": [".decl Breathes_in(Environment:symbol, Animal:symbol)\nBreathes_in(\"water\", \"lobster\").\n.decl Answer()\nAnswer() :- Breathes_in(environment, \"lobster\"), environment != \"desert\".\n.output Answer"]}
{"id": 451, "answer": false, "completion": ".decl Has_height_weight(Person:symbol, Height:float, Weight:float)\nHas_height_weight(\"Nicole Kidman\", 1.8, 58).\nHas_height_weight(\"Psylocke\", 1.73, 56).\n.decl Answer()\nAnswer() :- Has_height_weight(\"Nicole Kidman\", height1, weight1), Has_height_weight(\"Psylocke\", height2, weight2), height1 >= height2, weight1 <= weight2.\n.output Answer", "completions": [".decl Has_height_weight(Person:symbol, Height:float, Weight:float)\nHas_height_weight(\"Nicole Kidman\", 1.8, 58).\nHas_height_weight(\"Psylocke\", 1.73, 56).\n.decl Answer()\nAnswer() :- Has_height_weight(\"Nicole Kidman\", height1, weight1), Has_height_weight(\"Psylocke\", height2, weight2), height1 >= height2, weight1 <= weight2.\n.output Answer"]}
{"id": 452, "answer": false, "completion": ".decl Likes(Activity:symbol, Person:symbol)\nLikes(\"bodybuilding\", \"Arnold Schwarzenegger\").\n.decl Dislikes(Activity:symbol, Person:symbol)\nDislikes(\"wearing a cast\", \"Arnold Schwarzenegger\").\n.decl Answer()\nAnswer() :- Likes(activity, \"Arnold Schwarzenegger\"), Dislikes(\"wearing a cast\", \"Arnold Schwarzenegger\").\n.output Answer", "completions": [".decl Likes(Activity:symbol, Person:symbol)\nLikes(\"bodybuilding\", \"Arnold Schwarzenegger\").\n.decl Dislikes(Activity:symbol, Person:symbol)\nDislikes(\"wearing a cast\", \"Arnold Schwarzenegger\").\n.decl Answer()\nAnswer() :- Likes(activity, \"Arnold Schwarzenegger\"), Dislikes(\"wearing a cast\", \"Arnold Schwarzenegger\").\n.output Answer"]}
{"id": 453, "answer": false, "completion": ".decl Drives(Person:symbol, Car:symbol)\nDrives(\"George Washington\", \"horse\").\n.decl Answer()\nAnswer() :- !Drives(\"George Washington\", \"Lexus\").\n.output Answer", "completions": [".decl Drives(Person:symbol, Car:symbol)\nDrives(\"George Washington\", \"horse\").\n.decl Answer()\nAnswer() :- !Drives(\"George Washington\", \"Lexus\").\n.output Answer"]}
{"id": 454, "answer": false, "completion": ".decl Has_feature(Product:symbol, Feature:symbol)\nHas_feature(\"Adobe Suite\", \"photo editing\").\nHas_feature(\"Adobe Suite\", \"graphic design\").\nHas_feature(\"Unity\", \"video game engine\").\n.decl Answer()\nAnswer() :- Has_feature(\"Adobe Suite\", feature), Has_feature(\"Unity\", feature).\n.output Answer", "completions": [".decl Has_feature(Product:symbol, Feature:symbol)\nHas_feature(\"Adobe Suite\", \"photo editing\").\nHas_feature(\"Adobe Suite\", \"graphic design\").\nHas_feature(\"Unity\", \"video game engine\").\n.decl Answer()\nAnswer() :- Has_feature(\"Adobe Suite\", feature), Has_feature(\"Unity\", feature).\n.output Answer"]}
{"id": 455, "answer": true, "completion": ".decl Is_made_of(Material:symbol, Object:symbol)\nIs_made_of(\"silver\", \"silverware\").\n.decl Has_year(Object:symbol, Year:float)\nHas_year(\"1943-S penny\", 1943).\n.decl Answer()\nAnswer() :- Is_made_of(\"silver\", object), Has_year(\"1943-S penny\", year), year < 1965.\n.output Answer", "completions": [".decl Is_made_of(Material:symbol, Object:symbol)\nIs_made_of(\"silver\", \"silverware\").\n.decl Has_year(Object:symbol, Year:float)\nHas_year(\"1943-S penny\", 1943).\n.decl Answer()\nAnswer() :- Is_made_of(\"silver\", object), Has_year(\"1943-S penny\", year), year < 1965.\n.output Answer"]}
{"id": 456, "answer": false, "completion": ".decl Associated_with(Person:symbol, Organization:symbol)\nAssociated_with(\"Lord Voldemort\", \"Death Eaters\").\nAssociated_with(\"Severus Snape\", \"Durmstrang Institute\").\n.decl Answer()\nAnswer() :- Associated_with(\"Lord Voldemort\", organization), Associated_with(staff_member, organization), staff_member != \"Lord Voldemort\".\n.output Answer", "completions": [".decl Associated_with(Person:symbol, Organization:symbol)\nAssociated_with(\"Lord Voldemort\", \"Death Eaters\").\nAssociated_with(\"Severus Snape\", \"Durmstrang Institute\").\n.decl Answer()\nAnswer() :- Associated_with(\"Lord Voldemort\", organization), Associated_with(staff_member, organization), staff_member != \"Lord Voldemort\".\n.output Answer"]}
{"id": 457, "answer": true, "completion": ".decl Requires_degree(Occupation:symbol, Degree:symbol)\nRequires_degree(\"bartender\", \"none\").\n.decl Answer()\nAnswer() :- Requires_degree(\"bartender\", degree), degree = \"none\".\n.output Answer", "completions": [".decl Requires_degree(Occupation:symbol, Degree:symbol)\nRequires_degree(\"bartender\", \"none\").\n.decl Answer()\nAnswer() :- Requires_degree(\"bartender\", degree), degree = \"none\".\n.output Answer"]}
{"id": 458, "answer": false, "completion": ".decl Ingredient(Recipe:symbol, Ingredient:symbol)\nIngredient(\"jambalaya\", \"onion\").\nIngredient(\"jambalaya\", \"celery\").\nIngredient(\"jambalaya\", \"green pepper\").\n.decl Answer()\nAnswer() :- Ingredient(\"jambalaya\", \"onion\"), Ingredient(\"jambalaya\", \"green pepper\"), !Ingredient(\"jambalaya\", \"celery\").\n.output Answer", "completions": [".decl Ingredient(Recipe:symbol, Ingredient:symbol)\nIngredient(\"jambalaya\", \"onion\").\nIngredient(\"jambalaya\", \"celery\").\nIngredient(\"jambalaya\", \"green pepper\").\n.decl Answer()\nAnswer() :- Ingredient(\"jambalaya\", \"onion\"), Ingredient(\"jambalaya\", \"green pepper\"), !Ingredient(\"jambalaya\", \"celery\").\n.output Answer"]}
{"id": 459, "answer": true, "completion": ".decl Has_count(Cell_type:symbol, Count:float)\nHas_count(\"white blood cells\", 10000).\nHas_count(\"red blood cells\", 5000).\n.decl Answer()\nAnswer() :- Has_count(\"white blood cells\", count1), Has_count(\"red blood cells\", count2), count1 > count2.\n.output Answer", "completions": [".decl Has_count(Cell_type:symbol, Count:float)\nHas_count(\"white blood cells\", 10000).\nHas_count(\"red blood cells\", 5000).\n.decl Answer()\nAnswer() :- Has_count(\"white blood cells\", count1), Has_count(\"red blood cells\", count2), count1 > count2.\n.output Answer"]}
{"id": 460, "answer": false, "completion": ".decl Distance(Start:symbol, End:symbol, Distance:float)\nDistance(\"New York\", \"Miami\", 1300).\n.decl Swimmable(Start:symbol, End:symbol)\nSwimmable(start, end) :- Distance(start, end, distance), distance <= 100.\n.decl Answer()\nAnswer() :- Swimmable(\"New York\", \"Miami\").\n.output Answer", "completions": [".decl Distance(Start:symbol, End:symbol, Distance:float)\nDistance(\"New York\", \"Miami\", 1300).\n.decl Swimmable(Start:symbol, End:symbol)\nSwimmable(start, end) :- Distance(start, end, distance), distance <= 100.\n.decl Answer()\nAnswer() :- Swimmable(\"New York\", \"Miami\").\n.output Answer"]}
{"id": 461, "answer": false, "completion": ".decl Wizard(name:symbol)\nWizard(\"Gandalf\").\nWizard(\"Rincewind\").\n.decl Defeats(Winner:symbol, Loser:symbol)\nDefeats(\"Gandalf\", \"Sauron\").\n.decl Answer()\nAnswer() :- Wizard(\"Gandalf\"), Wizard(\"Rincewind\"), Defeats(\"Gandalf\", loser), loser = \"Rincewind\".\n.output Answer", "completions": [".decl Wizard(name:symbol)\nWizard(\"Gandalf\").\nWizard(\"Rincewind\").\n.decl Defeats(Winner:symbol, Loser:symbol)\nDefeats(\"Gandalf\", \"Sauron\").\n.decl Answer()\nAnswer() :- Wizard(\"Gandalf\"), Wizard(\"Rincewind\"), Defeats(\"Gandalf\", loser), loser = \"Rincewind\".\n.output Answer"]}
{"id": 462, "answer": true, "completion": ".decl Ceiling_height(Object:symbol, Height:float)\nCeiling_height(\"Tiny House\", 2.5).\n.decl Height_of_person(Person:symbol, Height:float)\nHeight_of_person(\"Osama bin Laden\", 1.93).\n.decl Answer()\nAnswer() :- Ceiling_height(\"Tiny House\", height1), Height_of_person(\"Osama bin Laden\", height2), height2 < height1.\n.output Answer", "completions": [".decl Ceiling_height(Object:symbol, Height:float)\nCeiling_height(\"Tiny House\", 2.5).\n.decl Height_of_person(Person:symbol, Height:float)\nHeight_of_person(\"Osama bin Laden\", 1.93).\n.decl Answer()\nAnswer() :- Ceiling_height(\"Tiny House\", height1), Height_of_person(\"Osama bin Laden\", height2), height2 < height1.\n.output Answer"]}
{"id": 463, "answer": false, "completion": ".decl Wins_medal(Country:symbol, Medal:symbol, Year:float)\nWins_medal(\"England\", \"gold\", 1900).\nWins_medal(\"USA\", \"gold\", 1800).\n.decl Answer()\nAnswer() :- Wins_medal(\"England\", \"gold\", 1800).\n.output Answer", "completions": [".decl Wins_medal(Country:symbol, Medal:symbol, Year:float)\nWins_medal(\"England\", \"gold\", 1900).\nWins_medal(\"USA\", \"gold\", 1800).\n.decl Answer()\nAnswer() :- Wins_medal(\"England\", \"gold\", 1800).\n.output Answer"]}
{"id": 464, "answer": false, "completion": ".decl Urban_legend(Story:symbol)\nUrban_legend(\"E.T. the Extra-Terrestrial Atari Landfill\").\n.decl Answer()\nAnswer() :- !Urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill\").\n.output Answer", "completions": [".decl Urban_legend(Story:symbol)\nUrban_legend(\"E.T. the Extra-Terrestrial Atari Landfill\").\n.decl Answer()\nAnswer() :- !Urban_legend(\"E.T. the Extra-Terrestrial Atari Landfill\").\n.output Answer"]}
{"id": 465, "answer": true, "completion": ".decl Has_disability(Person:symbol)\nHas_disability(\"Jimmy Vee\").\n.decl Eligible_for_games(Person:symbol, Games:symbol)\nEligible_for_games(\"Jimmy Vee\", \"Paralympic Games\").\n.decl Answer()\nAnswer() :- Has_disability(person), Eligible_for_games(person, \"Paralympic Games\").\n.output Answer", "completions": [".decl Has_disability(Person:symbol)\nHas_disability(\"Jimmy Vee\").\n.decl Eligible_for_games(Person:symbol, Games:symbol)\nEligible_for_games(\"Jimmy Vee\", \"Paralympic Games\").\n.decl Answer()\nAnswer() :- Has_disability(person), Eligible_for_games(person, \"Paralympic Games\").\n.output Answer"]}
{"id": 466, "answer": false, "completion": "Sorry, we cannot answer this question as it pertains to future events and we do not have access to information about them.", "completions": ["Sorry, we cannot answer this question as it pertains to future events and we do not have access to information about them."]}
{"id": 467, "answer": true, "completion": ".decl Achievements(Person:symbol, Achievement:symbol)\nAchievements(\"Hermione Granger\", \"Order of Merlin, First Class\").\n.decl Eligible(Person:symbol)\nEligible(person) :- Achievements(person, \"Order of Merlin, First Class\").\n.decl Answer()\nAnswer() :- Eligible(\"Hermione Granger\").\n.output Answer", "completions": [".decl Achievements(Person:symbol, Achievement:symbol)\nAchievements(\"Hermione Granger\", \"Order of Merlin, First Class\").\n.decl Eligible(Person:symbol)\nEligible(person) :- Achievements(person, \"Order of Merlin, First Class\").\n.decl Answer()\nAnswer() :- Eligible(\"Hermione Granger\").\n.output Answer"]}
{"id": 468, "answer": true, "completion": ".decl Pottery(Type:symbol, Safe:symbol)\nPottery(\"clay\", \"yes\").\nPottery(\"porcelain\", \"yes\").\nPottery(\"terra cotta\", \"no\").\n.decl Answer()\nAnswer() :- Pottery(type, \"no\"), !Pottery(type, \"yes\").\n.output Answer", "completions": [".decl Pottery(Type:symbol, Safe:symbol)\nPottery(\"clay\", \"yes\").\nPottery(\"porcelain\", \"yes\").\nPottery(\"terra cotta\", \"no\").\n.decl Answer()\nAnswer() :- Pottery(type, \"no\"), !Pottery(type, \"yes\").\n.output Answer"]}
{"id": 469, "answer": true, "completion": ".decl From_country(Pope:symbol, Country:symbol)\nFrom_country(\"Pope Alexander VI\", \"Spain\").\n.decl Papal_history(Country:symbol, Popes:float)\nPapal_history(\"Italy\", 221).\nPapal_history(\"France\", 18).\nPapal_history(\"Spain\", 6).\nPapal_history(\"Germany\", 8).\nPapal_history(\"England\", 4).\n.decl Answer()\nAnswer() :- From_country(pope, country), Papal_history(country, popes1), Papal_history(country2, popes2), popes1 <= popes2, country != country2.\n.output Answer", "completions": [".decl From_country(Pope:symbol, Country:symbol)\nFrom_country(\"Pope Alexander VI\", \"Spain\").\n.decl Papal_history(Country:symbol, Popes:float)\nPapal_history(\"Italy\", 221).\nPapal_history(\"France\", 18).\nPapal_history(\"Spain\", 6).\nPapal_history(\"Germany\", 8).\nPapal_history(\"England\", 4).\n.decl Answer()\nAnswer() :- From_country(pope, country), Papal_history(country, popes1), Papal_history(country2, popes2), popes1 <= popes2, country != country2.\n.output Answer"]}
{"id": 470, "answer": false, "completion": ".decl Symptom_of(Disease:symbol, Symptom:symbol)\nSymptom_of(\"depression\", \"lack of motivation\").\nSymptom_of(\"laziness\", \"lack of motivation\").\n.decl Answer()\nAnswer() :- Symptom_of(\"depression\", symptom), !Symptom_of(\"laziness\", symptom).\n.output Answer", "completions": [".decl Symptom_of(Disease:symbol, Symptom:symbol)\nSymptom_of(\"depression\", \"lack of motivation\").\nSymptom_of(\"laziness\", \"lack of motivation\").\n.decl Answer()\nAnswer() :- Symptom_of(\"depression\", symptom), !Symptom_of(\"laziness\", symptom).\n.output Answer"]}
{"id": 471, "answer": true, "completion": ".decl Is_dangerous(Dinosaur:symbol)\nIs_dangerous(\"Allosaurus\").\n.decl Has_size(Dinosaur:symbol, Size:float)\nHas_size(\"Oculudentavis\", 0.16).\nHas_size(\"Allosaurus\", 12).\n.decl Answer()\nAnswer() :- Has_size(dino1, size1), Has_size(dino2, size2), Is_dangerous(dino2), size1 < size2.\n.output Answer", "completions": [".decl Is_dangerous(Dinosaur:symbol)\nIs_dangerous(\"Allosaurus\").\n.decl Has_size(Dinosaur:symbol, Size:float)\nHas_size(\"Oculudentavis\", 0.16).\nHas_size(\"Allosaurus\", 12).\n.decl Answer()\nAnswer() :- Has_size(dino1, size1), Has_size(dino2, size2), Is_dangerous(dino2), size1 < size2.\n.output Answer"]}
{"id": 472, "answer": false, "completion": ".decl Height(Person:symbol, Height:float)\nHeight(\"Christopher Nolan\", 1.8).\nHeight(\"Danny Devito\", 1.47).\n.decl Waist_size(Person:symbol, Waist:float)\nWaist_size(\"Christopher Nolan\", 32).\nWaist_size(\"Danny Devito\", 34).\n.decl Answer()\nAnswer() :- Height(\"Christopher Nolan\", height1), Height(\"Danny Devito\", height2), height1 < height2, Waist_size(\"Danny Devito\", waist), Waist_size(\"Christopher Nolan\", waist1), waist >= waist1.\n.output Answer", "completions": [".decl Height(Person:symbol, Height:float)\nHeight(\"Christopher Nolan\", 1.8).\nHeight(\"Danny Devito\", 1.47).\n.decl Waist_size(Person:symbol, Waist:float)\nWaist_size(\"Christopher Nolan\", 32).\nWaist_size(\"Danny Devito\", 34).\n.decl Answer()\nAnswer() :- Height(\"Christopher Nolan\", height1), Height(\"Danny Devito\", height2), height1 < height2, Waist_size(\"Danny Devito\", waist), Waist_size(\"Christopher Nolan\", waist1), waist >= waist1.\n.output Answer"]}
{"id": 473, "answer": true, "completion": ".decl Rung_on_schedule(Bell:symbol, Schedule:symbol)\nRung_on_schedule(\"Big Ben\", \"normal\").\n.decl Located_at(Building:symbol, Location:symbol)\nLocated_at(\"Palace of Westminster\", \"London\").\n.decl Answer()\nAnswer() :- Rung_on_schedule(\"Big Ben\", schedule), Located_at(\"Palace of Westminster\", location), schedule = \"normal\", location = \"London\".\n.output Answer", "completions": [".decl Rung_on_schedule(Bell:symbol, Schedule:symbol)\nRung_on_schedule(\"Big Ben\", \"normal\").\n.decl Located_at(Building:symbol, Location:symbol)\nLocated_at(\"Palace of Westminster\", \"London\").\n.decl Answer()\nAnswer() :- Rung_on_schedule(\"Big Ben\", schedule), Located_at(\"Palace of Westminster\", location), schedule = \"normal\", location = \"London\".\n.output Answer"]}
{"id": 474, "answer": false, "completion": ".decl Appears_in(Movie:symbol, Character:symbol)\nAppears_in(\"The Last Jedi\", \"Rey\").\nAppears_in(\"The Last Jedi\", \"Kylo Ren\").\nAppears_in(\"The Last Jedi\", \"Luke Skywalker\").\nAppears_in(\"The Last Jedi\", \"Leia Organa\").\n.decl Answer()\nAnswer() :- Appears_in(\"The Last Jedi\", character), character = \"Klingon\", !.\n.output Answer", "completions": [".decl Appears_in(Movie:symbol, Character:symbol)\nAppears_in(\"The Last Jedi\", \"Rey\").\nAppears_in(\"The Last Jedi\", \"Kylo Ren\").\nAppears_in(\"The Last Jedi\", \"Luke Skywalker\").\nAppears_in(\"The Last Jedi\", \"Leia Organa\").\n.decl Answer()\nAnswer() :- Appears_in(\"The Last Jedi\", character), character = \"Klingon\", !.\n.output Answer"]}
{"id": 475, "answer": false, "completion": ".decl Buried_in(Person:symbol, Location:symbol)\nBuried_in(\"Queen Elizabeth\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_in(\"Queen Elizabeth\", location), location != \"Pantheon\".\n.output Answer", "completions": [".decl Buried_in(Person:symbol, Location:symbol)\nBuried_in(\"Queen Elizabeth\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_in(\"Queen Elizabeth\", location), location != \"Pantheon\".\n.output Answer"]}
{"id": 476, "answer": true, "completion": ".decl Is_part_of(City:symbol, Region:symbol)\nIs_part_of(\"Olympia, Washington\", \"Puget Sound\").\nIs_part_of(\"Puget Sound\", \"Ish river country\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Olympia, Washington\", region).\n.output Answer", "completions": [".decl Is_part_of(City:symbol, Region:symbol)\nIs_part_of(\"Olympia, Washington\", \"Puget Sound\").\nIs_part_of(\"Puget Sound\", \"Ish river country\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Olympia, Washington\", region).\n.output Answer"]}
{"id": 477, "answer": false, "completion": ".decl Makes_difficult(Activity:symbol, Item:symbol)\nMakes_difficult(\"judo\", \"silicone suits\").\n.decl Answer()\nAnswer() :- Makes_difficult(activity, \"silicone suits\"), activity != \"judo\".\nAnswer() :- !Makes_difficult(\"judo\", item).\n.output Answer", "completions": [".decl Makes_difficult(Activity:symbol, Item:symbol)\nMakes_difficult(\"judo\", \"silicone suits\").\n.decl Answer()\nAnswer() :- Makes_difficult(activity, \"silicone suits\"), activity != \"judo\".\nAnswer() :- !Makes_difficult(\"judo\", item).\n.output Answer"]}
{"id": 478, "answer": false, "completion": ".decl Described_as(Subject:symbol, Description:symbol)\nDescribed_as(\"boolean algebra\", \"logic\").\nDescribed_as(\"binary\", \"base-2 numeral system\").\n.decl Answer()\nAnswer() :- Described_as(\"boolean algebra\", description1), Described_as(\"binary\", description2), description1 = description2.\n.output Answer", "completions": [".decl Described_as(Subject:symbol, Description:symbol)\nDescribed_as(\"boolean algebra\", \"logic\").\nDescribed_as(\"binary\", \"base-2 numeral system\").\n.decl Answer()\nAnswer() :- Described_as(\"boolean algebra\", description1), Described_as(\"binary\", description2), description1 = description2.\n.output Answer"]}
{"id": 479, "answer": false, "completion": ".decl Suitable_pet(Pet:symbol, Age:float)\nSuitable_pet(\"Northern fur seal\", 6).\n.decl Answer()\nAnswer() :- Suitable_pet(pet, age), pet != \"Northern fur seal\".\n.output Answer", "completions": [".decl Suitable_pet(Pet:symbol, Age:float)\nSuitable_pet(\"Northern fur seal\", 6).\n.decl Answer()\nAnswer() :- Suitable_pet(pet, age), pet != \"Northern fur seal\".\n.output Answer"]}
{"id": 480, "answer": true, "completion": ".decl Mental_health_issue(Person:symbol, Issue:symbol)\nMental_health_issue(\"Kurt Cobain\", \"depression\").\n.decl Suicide_prevention_program(Person:symbol, Program:symbol)\nSuicide_prevention_program(\"Kurt Cobain\", \"Project Semicolon\").\n.decl Answer()\nAnswer() :- Mental_health_issue(\"Kurt Cobain\", issue), Suicide_prevention_program(\"Kurt Cobain\", program), issue = \"depression\", program = \"Project Semicolon\".\n.output Answer", "completions": [".decl Mental_health_issue(Person:symbol, Issue:symbol)\nMental_health_issue(\"Kurt Cobain\", \"depression\").\n.decl Suicide_prevention_program(Person:symbol, Program:symbol)\nSuicide_prevention_program(\"Kurt Cobain\", \"Project Semicolon\").\n.decl Answer()\nAnswer() :- Mental_health_issue(\"Kurt Cobain\", issue), Suicide_prevention_program(\"Kurt Cobain\", program), issue = \"depression\", program = \"Project Semicolon\".\n.output Answer"]}
{"id": 481, "answer": false, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"anxious person\", \"anxiety\").\n.decl Gives_trait(Person:symbol, Trait:symbol, Wizard:symbol)\nGives_trait(\"Wizard of Oz\", \"courage\", \"lion\").\n.decl Answer()\nAnswer() :- Has_trait(\"anxious person\", trait1), Gives_trait(wizard, \"courage\", trait2), trait1 = trait2.\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"anxious person\", \"anxiety\").\n.decl Gives_trait(Person:symbol, Trait:symbol, Wizard:symbol)\nGives_trait(\"Wizard of Oz\", \"courage\", \"lion\").\n.decl Answer()\nAnswer() :- Has_trait(\"anxious person\", trait1), Gives_trait(wizard, \"courage\", trait2), trait1 = trait2.\n.output Answer"]}
{"id": 482, "answer": true, "completion": ".decl Protects_against(Device:symbol, Threat:symbol)\nProtects_against(\"firewall\", \"hacking\").\n.decl Answer()\nAnswer() :- Protects_against(\"firewall\", threat), threat != \"short circuit\".\n.output Answer", "completions": [".decl Protects_against(Device:symbol, Threat:symbol)\nProtects_against(\"firewall\", \"hacking\").\n.decl Answer()\nAnswer() :- Protects_against(\"firewall\", threat), threat != \"short circuit\".\n.output Answer"]}
{"id": 483, "answer": false, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"Michael J Fox\", 60).\n.decl Height(Person:symbol, Height:float)\nHeight(\"Michael J Fox\", 1.63).\n.decl Weight(Person:symbol, Weight:float)\nWeight(\"Michael J Fox\", 65).\n.decl Answer()\nAnswer() :- Age(\"Michael J Fox\", age), Height(\"Michael J Fox\", height), Weight(\"Michael J Fox\", weight), age < 35, height >= 1.6, weight >= 58.97.\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"Michael J Fox\", 60).\n.decl Height(Person:symbol, Height:float)\nHeight(\"Michael J Fox\", 1.63).\n.decl Weight(Person:symbol, Weight:float)\nWeight(\"Michael J Fox\", 65).\n.decl Answer()\nAnswer() :- Age(\"Michael J Fox\", age), Height(\"Michael J Fox\", height), Weight(\"Michael J Fox\", weight), age < 35, height >= 1.6, weight >= 58.97.\n.output Answer"]}
{"id": 484, "answer": false, "completion": ".decl Has_n_members(Band:symbol, N_members:float)\nHas_n_members(\"The Jackson 5\", 5).\nHas_n_members(\"The Isley Brothers\", 6).\n.decl Answer()\nAnswer() :- Has_n_members(\"The Jackson 5\", n_members1), Has_n_members(\"The Isley Brothers\", n_members2), n_members1 > n_members2.\n.output Answer", "completions": [".decl Has_n_members(Band:symbol, N_members:float)\nHas_n_members(\"The Jackson 5\", 5).\nHas_n_members(\"The Isley Brothers\", 6).\n.decl Answer()\nAnswer() :- Has_n_members(\"The Jackson 5\", n_members1), Has_n_members(\"The Isley Brothers\", n_members2), n_members1 > n_members2.\n.output Answer"]}
{"id": 485, "answer": false, "completion": ".decl Is_guru(Person:symbol)\nIs_guru(\"Deepak Chopra\").\nIs_guru(\"Eckhart Tolle\").\n.decl Answer()\nAnswer() :- Is_guru(\"Kim Kardashian\").\n.output Answer", "completions": [".decl Is_guru(Person:symbol)\nIs_guru(\"Deepak Chopra\").\nIs_guru(\"Eckhart Tolle\").\n.decl Answer()\nAnswer() :- Is_guru(\"Kim Kardashian\").\n.output Answer"]}
{"id": 486, "answer": true, "completion": ".decl Won_award(TV_show:symbol, Award:symbol)\nWon_award(\"Modern Family\", \"Emmy\").\n.decl Answer()\nAnswer() :- Won_award(\"Modern Family\", award), award != \"Slammy\".\n.output Answer", "completions": [".decl Won_award(TV_show:symbol, Award:symbol)\nWon_award(\"Modern Family\", \"Emmy\").\n.decl Answer()\nAnswer() :- Won_award(\"Modern Family\", award), award != \"Slammy\".\n.output Answer"]}
{"id": 487, "answer": true, "completion": ".decl Married(Person1:symbol, Person2:symbol)\nMarried(\"Larry King\", \"Shawn Southwick\").\nMarried(\"Larry King\", \"Julie Alexander\").\nMarried(\"Larry King\", \"Alene Akins\").\nMarried(\"Larry King\", \"Mickey Sutphin\").\n.decl Gender(Person:symbol, Gender:symbol)\nGender(\"Larry King\", \"male\").\nGender(\"Shawn Southwick\", \"female\").\nGender(\"Julie Alexander\", \"female\").\nGender(\"Alene Akins\", \"female\").\nGender(\"Mickey Sutphin\", \"female\").\n.decl Answer()\nAnswer() :- Gender(person1, \"female\"), Gender(person2, \"female\"), Married(\"Larry King\", person1), Married(\"Larry King\", person2), person1 != person2.\n.output Answer", "completions": [".decl Married(Person1:symbol, Person2:symbol)\nMarried(\"Larry King\", \"Shawn Southwick\").\nMarried(\"Larry King\", \"Julie Alexander\").\nMarried(\"Larry King\", \"Alene Akins\").\nMarried(\"Larry King\", \"Mickey Sutphin\").\n.decl Gender(Person:symbol, Gender:symbol)\nGender(\"Larry King\", \"male\").\nGender(\"Shawn Southwick\", \"female\").\nGender(\"Julie Alexander\", \"female\").\nGender(\"Alene Akins\", \"female\").\nGender(\"Mickey Sutphin\", \"female\").\n.decl Answer()\nAnswer() :- Gender(person1, \"female\"), Gender(person2, \"female\"), Married(\"Larry King\", person1), Married(\"Larry King\", person2), person1 != person2.\n.output Answer"]}
{"id": 488, "answer": true, "completion": ".decl Likes(Person:symbol, Thing:symbol)\nLikes(\"Jason\", \"video games\").\nLikes(\"Dr. Disrespect\", \"video games\").\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Jason\", \"gaming\").\nHas_skill(\"Dr. Disrespect\", \"gaming\").\n.decl Answer()\nAnswer() :- Likes(\"Jason\", thing), Likes(\"Dr. Disrespect\", thing), Has_skill(\"Jason\", skill), Has_skill(\"Dr. Disrespect\", skill), skill = \"gaming\".\n.output Answer", "completions": [".decl Likes(Person:symbol, Thing:symbol)\nLikes(\"Jason\", \"video games\").\nLikes(\"Dr. Disrespect\", \"video games\").\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Jason\", \"gaming\").\nHas_skill(\"Dr. Disrespect\", \"gaming\").\n.decl Answer()\nAnswer() :- Likes(\"Jason\", thing), Likes(\"Dr. Disrespect\", thing), Has_skill(\"Jason\", skill), Has_skill(\"Dr. Disrespect\", skill), skill = \"gaming\".\n.output Answer"]}
{"id": 489, "answer": false, "completion": ".decl Contains_letters(Word:symbol, Letters:symbol)\nContains_letters(\"Iowa\", \"iow\").\nContains_letters(\"English Channel\", \"englshchnnl\").\n.decl Answer()\nAnswer() :- Contains_letters(\"Iowa\", letters), Contains_letters(\"English Channel\", letters).\n.output Answer", "completions": [".decl Contains_letters(Word:symbol, Letters:symbol)\nContains_letters(\"Iowa\", \"iow\").\nContains_letters(\"English Channel\", \"englshchnnl\").\n.decl Answer()\nAnswer() :- Contains_letters(\"Iowa\", letters), Contains_letters(\"English Channel\", letters).\n.output Answer"]}
{"id": 490, "answer": false, "completion": ".decl Married_to(Person_A:symbol, Person_B:symbol)\nMarried_to(\"Kublai Khan\", \"Chabi\").\nMarried_to(\"Genghis Khan\", \"Borte\").\n.decl Answer()\nAnswer() :- Married_to(\"Kublai Khan\", partner), Married_to(\"Genghis Khan\", partner), partner != \"Borte\", partner != \"Chabi\".\n.output Answer", "completions": [".decl Married_to(Person_A:symbol, Person_B:symbol)\nMarried_to(\"Kublai Khan\", \"Chabi\").\nMarried_to(\"Genghis Khan\", \"Borte\").\n.decl Answer()\nAnswer() :- Married_to(\"Kublai Khan\", partner), Married_to(\"Genghis Khan\", partner), partner != \"Borte\", partner != \"Chabi\".\n.output Answer"]}
{"id": 491, "answer": true, "completion": ".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"person1\", \"leukophobia\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Flag of the United States\", \"red\").\nHas_color(\"Flag of the United States\", \"white\").\nHas_color(\"Flag of the United States\", \"blue\").\n.decl Answer()\nAnswer() :- Has_phobia(person, phobia), !Has_color(\"Flag of the United States\", color), color = \"white\".\nAnswer() :- Has_phobia(person, phobia), Has_color(\"Flag of the United States\", color), color != \"white\".\n.output Answer", "completions": [".decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"person1\", \"leukophobia\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Flag of the United States\", \"red\").\nHas_color(\"Flag of the United States\", \"white\").\nHas_color(\"Flag of the United States\", \"blue\").\n.decl Answer()\nAnswer() :- Has_phobia(person, phobia), !Has_color(\"Flag of the United States\", color), color = \"white\".\nAnswer() :- Has_phobia(person, phobia), Has_color(\"Flag of the United States\", color), color != \"white\".\n.output Answer"]}
{"id": 492, "answer": true, "completion": ".decl Killed_by(Villain:symbol, Victim:symbol)\nKilled_by(\"Doomsday\", \"Superman\").\nKilled_by(\"Joker\", \"Robin\").\n.decl Answer()\nAnswer() :- Killed_by(villain1, \"Superman\"), Killed_by(\"Joker\", victim2), villain1 = villain2.\n.output Answer", "completions": [".decl Killed_by(Villain:symbol, Victim:symbol)\nKilled_by(\"Doomsday\", \"Superman\").\nKilled_by(\"Joker\", \"Robin\").\n.decl Answer()\nAnswer() :- Killed_by(villain1, \"Superman\"), Killed_by(\"Joker\", victim2), villain1 = villain2.\n.output Answer"]}
{"id": 493, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"sweet potato\", \"orange\").\nHas_color(\"pineapple\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_color(\"sweet potato\", color1), Has_color(\"pineapple\", color2), color1 = color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"sweet potato\", \"orange\").\nHas_color(\"pineapple\", \"yellow\").\n.decl Answer()\nAnswer() :- Has_color(\"sweet potato\", color1), Has_color(\"pineapple\", color2), color1 = color2.\n.output Answer"]}
{"id": 494, "answer": false, "completion": ".decl Causes(Condition:symbol, Effect:symbol)\nCauses(\"overfeeding Lactobacillus\", \"dental problems\").\n.decl Has_insurance(Person:symbol, Insurance:symbol)\nHas_insurance(\"John\", \"dental insurance\").\n.decl Answer()\nAnswer() :- Causes(\"overfeeding Lactobacillus\", effect), Has_insurance(\"John\", insurance), effect = \"dental problems\", insurance != \"dental insurance\".\n.output Answer", "completions": [".decl Causes(Condition:symbol, Effect:symbol)\nCauses(\"overfeeding Lactobacillus\", \"dental problems\").\n.decl Has_insurance(Person:symbol, Insurance:symbol)\nHas_insurance(\"John\", \"dental insurance\").\n.decl Answer()\nAnswer() :- Causes(\"overfeeding Lactobacillus\", effect), Has_insurance(\"John\", insurance), effect = \"dental problems\", insurance != \"dental insurance\".\n.output Answer"]}
{"id": 495, "answer": false, "completion": ".decl Is_located(City:symbol, Country:symbol, Latitude:float, Longitude:float)\nIs_located(\"Bucharest\", \"Romania\", 44.4268, 26.1025).\nIs_located(\"Egypt\", \"Egypt\", 26.8206, 30.8025).\n.decl Answer()\nAnswer() :- Is_located(\"Bucharest\", \"Romania\", latitude1, _), Is_located(\"Egypt\", \"Egypt\", latitude2, _), latitude1 < latitude2.\n.output Answer", "completions": [".decl Is_located(City:symbol, Country:symbol, Latitude:float, Longitude:float)\nIs_located(\"Bucharest\", \"Romania\", 44.4268, 26.1025).\nIs_located(\"Egypt\", \"Egypt\", 26.8206, 30.8025).\n.decl Answer()\nAnswer() :- Is_located(\"Bucharest\", \"Romania\", latitude1, _), Is_located(\"Egypt\", \"Egypt\", latitude2, _), latitude1 < latitude2.\n.output Answer"]}
{"id": 496, "answer": false, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Cardi B.\", \"milk\").\nLikes(\"Cardi B.\", \"soy milk\").\n.decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"milk\", \"calcium\").\nHas_nutrient(\"soy milk\", \"calcium\").\nHas_nutrient(\"soy milk\", \"protein\").\n.decl Answer()\nAnswer() :- Likes(\"Cardi B.\", food), Has_nutrient(food, \"calcium\"), !Has_nutrient(food, \"protein\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Cardi B.\", \"milk\").\nLikes(\"Cardi B.\", \"soy milk\").\n.decl Has_nutrient(Food:symbol, Nutrient:symbol)\nHas_nutrient(\"milk\", \"calcium\").\nHas_nutrient(\"soy milk\", \"calcium\").\nHas_nutrient(\"soy milk\", \"protein\").\n.decl Answer()\nAnswer() :- Likes(\"Cardi B.\", food), Has_nutrient(food, \"calcium\"), !Has_nutrient(food, \"protein\").\n.output Answer"]}
{"id": 497, "answer": false, "completion": ".decl Speaks_Language(Person:symbol, Language:symbol)\nSpeaks_Language(\"Arvanite Greek\", \"Greek\").\n.decl Written_in_Language(Document:symbol, Language:symbol)\nWritten_in_Language(\"Albanian Declaration of Independence\", \"Albanian\").\n.decl Answer()\nAnswer() :- Speaks_Language(\"Arvanite Greek\", language1), Written_in_Language(\"Albanian Declaration of Independence\", language2), language1 = language2.\n.output Answer", "completions": [".decl Speaks_Language(Person:symbol, Language:symbol)\nSpeaks_Language(\"Arvanite Greek\", \"Greek\").\n.decl Written_in_Language(Document:symbol, Language:symbol)\nWritten_in_Language(\"Albanian Declaration of Independence\", \"Albanian\").\n.decl Answer()\nAnswer() :- Speaks_Language(\"Arvanite Greek\", language1), Written_in_Language(\"Albanian Declaration of Independence\", language2), language1 = language2.\n.output Answer"]}
{"id": 498, "answer": false, "completion": ".decl Happens_during(Event:symbol, Time_period:symbol)\nHappens_during(\"breakdancing\", \"1980s\").\nHappens_during(\"WW2\", \"1939-1945\").\n.decl Grows_in_popularity(Event:symbol)\nGrows_in_popularity(\"breakdancing\").\n.decl Answer()\nAnswer() :- Happens_during(\"breakdancing\", time_period1), Happens_during(\"WW2\", time_period2), Grows_in_popularity(\"breakdancing\"), time_period1 > time_period2.\n.output Answer", "completions": [".decl Happens_during(Event:symbol, Time_period:symbol)\nHappens_during(\"breakdancing\", \"1980s\").\nHappens_during(\"WW2\", \"1939-1945\").\n.decl Grows_in_popularity(Event:symbol)\nGrows_in_popularity(\"breakdancing\").\n.decl Answer()\nAnswer() :- Happens_during(\"breakdancing\", time_period1), Happens_during(\"WW2\", time_period2), Grows_in_popularity(\"breakdancing\"), time_period1 > time_period2.\n.output Answer"]}
{"id": 499, "answer": true, "completion": ".decl Taught_in_level(Title:symbol, Level:symbol)\nTaught_in_level(\"Romeo and Juliet\", \"high school\").\nTaught_in_level(\"The Great Gatsby\", \"high school\").\nTaught_in_level(\"To Kill a Mockingbird\", \"high school\").\nTaught_in_level(\"Romeo and Juliet\", \"college\").\n.decl Answer()\nAnswer() :- Taught_in_level(\"Romeo and Juliet\", level), level = \"high school\".\n.output Answer", "completions": [".decl Taught_in_level(Title:symbol, Level:symbol)\nTaught_in_level(\"Romeo and Juliet\", \"high school\").\nTaught_in_level(\"The Great Gatsby\", \"high school\").\nTaught_in_level(\"To Kill a Mockingbird\", \"high school\").\nTaught_in_level(\"Romeo and Juliet\", \"college\").\n.decl Answer()\nAnswer() :- Taught_in_level(\"Romeo and Juliet\", level), level = \"high school\".\n.output Answer"]}
{"id": 500, "answer": false, "completion": ".decl Weight(Person:symbol, Weight:float)\nWeight(\"Jon Brower Minnoch\", 635).\n.decl Launch_mass(Mission:symbol, Mass:float)\nLaunch_mass(\"Voyager 2\", 722.7).\n.decl Answer()\nAnswer() :- Weight(\"Jon Brower Minnoch\", weight1), Launch_mass(\"Voyager 2\", mass2), weight1 > mass2.\n.output Answer", "completions": [".decl Weight(Person:symbol, Weight:float)\nWeight(\"Jon Brower Minnoch\", 635).\n.decl Launch_mass(Mission:symbol, Mass:float)\nLaunch_mass(\"Voyager 2\", 722.7).\n.decl Answer()\nAnswer() :- Weight(\"Jon Brower Minnoch\", weight1), Launch_mass(\"Voyager 2\", mass2), weight1 > mass2.\n.output Answer"]}
{"id": 501, "answer": false, "completion": ".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Earth Day\", \"April\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"April\", \"spring\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"Earth Day\", month), In_season(month, \"summer\").\n.output Answer", "completions": [".decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"Earth Day\", \"April\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"April\", \"spring\").\nIn_season(\"May\", \"spring\").\nIn_season(\"June\", \"summer\").\n.decl Answer()\nAnswer() :- Happens_in_month(\"Earth Day\", month), In_season(month, \"summer\").\n.output Answer"]}
{"id": 502, "answer": false, "completion": ".decl Answer()\nAnswer() :- !.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- !.\n.output Answer"]}
{"id": 503, "answer": false, "completion": ".decl Can_sting_multiple_times(Animal:symbol)\nCan_sting_multiple_times(\"honey bee\").\n.decl Answer()\nAnswer() :- Can_sting_multiple_times(animal), !{Can_sting_multiple_times(animal)}.\n.output Answer", "completions": [".decl Can_sting_multiple_times(Animal:symbol)\nCan_sting_multiple_times(\"honey bee\").\n.decl Answer()\nAnswer() :- Can_sting_multiple_times(animal), !{Can_sting_multiple_times(animal)}.\n.output Answer"]}
{"id": 504, "answer": true, "completion": ".decl Starts_with(Name:symbol, Letter:symbol)\nStarts_with(\"Blossom\", \"B\").\nStarts_with(\"Bubbles\", \"B\").\nStarts_with(\"Buttercup\", \"B\").\n.decl Answer()\nAnswer() :- Starts_with(\"Blossom\", letter), Starts_with(\"Bubbles\", letter), Starts_with(\"Buttercup\", letter).\n.output Answer", "completions": [".decl Starts_with(Name:symbol, Letter:symbol)\nStarts_with(\"Blossom\", \"B\").\nStarts_with(\"Bubbles\", \"B\").\nStarts_with(\"Buttercup\", \"B\").\n.decl Answer()\nAnswer() :- Starts_with(\"Blossom\", letter), Starts_with(\"Bubbles\", letter), Starts_with(\"Buttercup\", letter).\n.output Answer"]}
{"id": 505, "answer": true, "completion": ".decl Fans_of_Author(Person:symbol, Author:symbol)\nFans_of_Author(\"Harry Potter fan\", \"J.K. Rowling\").\n.decl Knows(Person:symbol, Celebrity:symbol)\nKnows(\"Harry Potter fan\", \"Emma Watson\").\nKnows(\"Harry Potter fan\", \"Daniel Radcliffe\").\nKnows(\"Harry Potter fan\", \"Alan Rickman\").\n.decl Answer()\nAnswer() :- Fans_of_Author(fan, \"J.K. Rowling\"), Knows(fan, \"Alan Rickman\").\n.output Answer", "completions": [".decl Fans_of_Author(Person:symbol, Author:symbol)\nFans_of_Author(\"Harry Potter fan\", \"J.K. Rowling\").\n.decl Knows(Person:symbol, Celebrity:symbol)\nKnows(\"Harry Potter fan\", \"Emma Watson\").\nKnows(\"Harry Potter fan\", \"Daniel Radcliffe\").\nKnows(\"Harry Potter fan\", \"Alan Rickman\").\n.decl Answer()\nAnswer() :- Fans_of_Author(fan, \"J.K. Rowling\"), Knows(fan, \"Alan Rickman\").\n.output Answer"]}
{"id": 506, "answer": false, "completion": ".decl Relationship(Person_A:symbol, Person_B:symbol, Relationship:symbol)\nRelationship(\"Hannah Nixon\", \"Richard Nixon\", \"mother\").\n.decl Answer()\nAnswer() :- Relationship(\"Hannah Nixon\", \"Richard Nixon\", \"mother\"), Relationship(\"Richard Nixon\", \"Watergate scandal\", \"involved\"), Relationship(\"Hannah Nixon\", \"Watergate scandal\", \"not involved\").\n.output Answer", "completions": [".decl Relationship(Person_A:symbol, Person_B:symbol, Relationship:symbol)\nRelationship(\"Hannah Nixon\", \"Richard Nixon\", \"mother\").\n.decl Answer()\nAnswer() :- Relationship(\"Hannah Nixon\", \"Richard Nixon\", \"mother\"), Relationship(\"Richard Nixon\", \"Watergate scandal\", \"involved\"), Relationship(\"Hannah Nixon\", \"Watergate scandal\", \"not involved\").\n.output Answer"]}
{"id": 507, "answer": false, "completion": ".decl Can_jump(Person:symbol, Height:float)\nCan_jump(\"Javier Sotomayor\", 2.45).\n.decl Average_height(Animal:symbol, Height:float)\nAverage_height(\"giraffe\", 4.5).\n.decl Answer()\nAnswer() :- Can_jump(\"Javier Sotomayor\", height1), Average_height(\"giraffe\", height2), height1 > height2.\n.output Answer", "completions": [".decl Can_jump(Person:symbol, Height:float)\nCan_jump(\"Javier Sotomayor\", 2.45).\n.decl Average_height(Animal:symbol, Height:float)\nAverage_height(\"giraffe\", 4.5).\n.decl Answer()\nAnswer() :- Can_jump(\"Javier Sotomayor\", height1), Average_height(\"giraffe\", height2), height1 > height2.\n.output Answer"]}
{"id": 508, "answer": false, "completion": ".decl Likes(Person:symbol, Thing:symbol)\nLikes(\"Amy Winehouse\", \"Back to Black\").\nLikes(\"Amy Winehouse\", \"Star Wars\").\nLikes(\"Amy Winehouse\", \"The Empire Strikes Back\").\nLikes(\"Amy Winehouse\", \"Return of the Jedi\").\nLikes(\"Amy Winehouse\", \"The Force Awakens\").\nLikes(\"Amy Winehouse\", \"The Last Jedi\").\nLikes(\"Amy Winehouse\", \"The Rise of Skywalker\").\n.decl Answer()\nAnswer() :- Likes(\"Amy Winehouse\", \"Star Wars: Rogue One\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Thing:symbol)\nLikes(\"Amy Winehouse\", \"Back to Black\").\nLikes(\"Amy Winehouse\", \"Star Wars\").\nLikes(\"Amy Winehouse\", \"The Empire Strikes Back\").\nLikes(\"Amy Winehouse\", \"Return of the Jedi\").\nLikes(\"Amy Winehouse\", \"The Force Awakens\").\nLikes(\"Amy Winehouse\", \"The Last Jedi\").\nLikes(\"Amy Winehouse\", \"The Rise of Skywalker\").\n.decl Answer()\nAnswer() :- Likes(\"Amy Winehouse\", \"Star Wars: Rogue One\").\n.output Answer"]}
{"id": 509, "answer": true, "completion": ".decl Owes_money(Person1:symbol, Person2:symbol)\nOwes_money(\"Christopher Nolan\", \"Bob Kane\").\n.decl Created_by(Character:symbol, Creator:symbol)\nCreated_by(\"Batman\", \"Bob Kane\").\n.decl Answer()\nAnswer() :- Owes_money(\"Christopher Nolan\", person2), Created_by(character, person2), Created_by(\"Batman\", person1), person1 = person2.\n.output Answer", "completions": [".decl Owes_money(Person1:symbol, Person2:symbol)\nOwes_money(\"Christopher Nolan\", \"Bob Kane\").\n.decl Created_by(Character:symbol, Creator:symbol)\nCreated_by(\"Batman\", \"Bob Kane\").\n.decl Answer()\nAnswer() :- Owes_money(\"Christopher Nolan\", person2), Created_by(character, person2), Created_by(\"Batman\", person1), person1 = person2.\n.output Answer"]}
{"id": 510, "answer": true, "completion": ".decl Named_after(County:symbol, Person:symbol)\nNamed_after(\"Morris County\", \"Lewis Morris\").\n.decl Was_chief_justice(Person:symbol)\nWas_chief_justice(\"Lewis Morris\").\n.decl Answer()\nAnswer() :- Named_after(\"Morris County\", person), Was_chief_justice(person).\n.output Answer", "completions": [".decl Named_after(County:symbol, Person:symbol)\nNamed_after(\"Morris County\", \"Lewis Morris\").\n.decl Was_chief_justice(Person:symbol)\nWas_chief_justice(\"Lewis Morris\").\n.decl Answer()\nAnswer() :- Named_after(\"Morris County\", person), Was_chief_justice(person).\n.output Answer"]}
{"id": 511, "answer": true, "completion": ".decl Has_status(Society:symbol, Status:float)\nHas_status(\"Japanese serfdom\", 3).\nHas_status(\"English serfdom\", 2).\n.decl Answer()\nAnswer() :- Has_status(\"Japanese serfdom\", status1), Has_status(\"English serfdom\", status2), status1 > status2.\n.output Answer", "completions": [".decl Has_status(Society:symbol, Status:float)\nHas_status(\"Japanese serfdom\", 3).\nHas_status(\"English serfdom\", 2).\n.decl Answer()\nAnswer() :- Has_status(\"Japanese serfdom\", status1), Has_status(\"English serfdom\", status2), status1 > status2.\n.output Answer"]}
{"id": 512, "answer": false, "completion": ".decl Thrives_at_latitude(Crop:symbol, Latitude:float)\nThrives_at_latitude(\"cauliflower\", 40).\n.decl Answer()\nAnswer() :- Thrives_at_latitude(\"cauliflower\", latitude), latitude >= 75.\n.output Answer", "completions": [".decl Thrives_at_latitude(Crop:symbol, Latitude:float)\nThrives_at_latitude(\"cauliflower\", 40).\n.decl Answer()\nAnswer() :- Thrives_at_latitude(\"cauliflower\", latitude), latitude >= 75.\n.output Answer"]}
{"id": 513, "answer": true, "completion": ".decl Runs_faster(Animal_A:symbol, Animal_B:symbol)\nRuns_faster(\"Swallow\", \"American Woodcock\").\n.decl Answer()\nAnswer() :- Runs_faster(\"Swallow\", \"American Woodcock\").\n.output Answer", "completions": [".decl Runs_faster(Animal_A:symbol, Animal_B:symbol)\nRuns_faster(\"Swallow\", \"American Woodcock\").\n.decl Answer()\nAnswer() :- Runs_faster(\"Swallow\", \"American Woodcock\").\n.output Answer"]}
{"id": 514, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"cattle farmer\", \"animal husbandry\").\n.decl Needs_skill(Business:symbol, Skill:symbol)\nNeeds_skill(\"drum maker\", \"woodworking\").\n.decl Answer()\nAnswer() :- Has_skill(\"cattle farmer\", skill), Needs_skill(\"drum maker\", skill).\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"cattle farmer\", \"animal husbandry\").\n.decl Needs_skill(Business:symbol, Skill:symbol)\nNeeds_skill(\"drum maker\", \"woodworking\").\n.decl Answer()\nAnswer() :- Has_skill(\"cattle farmer\", skill), Needs_skill(\"drum maker\", skill).\n.output Answer"]}
{"id": 515, "answer": true, "completion": ".decl Needs_spare_parts(Musician:symbol, Instrument:symbol, Part:symbol)\nNeeds_spare_parts(\"guitarist\", \"guitar\", \"string\").\nNeeds_spare_parts(\"bassist\", \"bass\", \"string\").\n.decl Answer()\nAnswer() :- Needs_spare_parts(\"drummer\", instrument, \"string\").\n.output Answer", "completions": [".decl Needs_spare_parts(Musician:symbol, Instrument:symbol, Part:symbol)\nNeeds_spare_parts(\"guitarist\", \"guitar\", \"string\").\nNeeds_spare_parts(\"bassist\", \"bass\", \"string\").\n.decl Answer()\nAnswer() :- Needs_spare_parts(\"drummer\", instrument, \"string\").\n.output Answer"]}
{"id": 516, "answer": true, "completion": ".decl Named_after(Term1:symbol, Term2:symbol)\nNamed_after(\"Homer\", \"Homer Simpson\").\nNamed_after(\"Odyssey\", \"Greek epic poem\").\n.decl Answer()\nAnswer() :- Named_after(\"Homer\", term1), Named_after(\"Odyssey\", term2), term1 != term2.\n.output Answer", "completions": [".decl Named_after(Term1:symbol, Term2:symbol)\nNamed_after(\"Homer\", \"Homer Simpson\").\nNamed_after(\"Odyssey\", \"Greek epic poem\").\n.decl Answer()\nAnswer() :- Named_after(\"Homer\", term1), Named_after(\"Odyssey\", term2), term1 != term2.\n.output Answer"]}
{"id": 517, "answer": false, "completion": ".decl Outlasts(Person:symbol, Event:symbol, Duration:float)\nOutlasts(\"Undertaker\", \"Royal Rumble\", 1.09).\nOutlasts(\"Stone Cold Steve Austin\", \"Royal Rumble\", 0.56).\n.decl Commits_crime(Person:symbol, Crime:symbol)\nCommits_crime(\"Ted Bundy\", \"murder\").\nCommits_crime(\"Jeffrey Dahmer\", \"murder\").\n.decl Answer()\nAnswer() :- Outlasts(person, \"Royal Rumble\", duration1), Commits_crime(\"Ted Bundy\", crime), Outlasts(\"Ted Bundy\", event2, duration2), duration1 < duration2.\nAnswer() :- Outlasts(person, \"Royal Rumble\", duration1), Commits_crime(\"Jeffrey Dahmer\", crime), Outlasts(\"Jeffrey Dahmer\", event2, duration2), duration1 < duration2.\n.output Answer", "completions": [".decl Outlasts(Person:symbol, Event:symbol, Duration:float)\nOutlasts(\"Undertaker\", \"Royal Rumble\", 1.09).\nOutlasts(\"Stone Cold Steve Austin\", \"Royal Rumble\", 0.56).\n.decl Commits_crime(Person:symbol, Crime:symbol)\nCommits_crime(\"Ted Bundy\", \"murder\").\nCommits_crime(\"Jeffrey Dahmer\", \"murder\").\n.decl Answer()\nAnswer() :- Outlasts(person, \"Royal Rumble\", duration1), Commits_crime(\"Ted Bundy\", crime), Outlasts(\"Ted Bundy\", event2, duration2), duration1 < duration2.\nAnswer() :- Outlasts(person, \"Royal Rumble\", duration1), Commits_crime(\"Jeffrey Dahmer\", crime), Outlasts(\"Jeffrey Dahmer\", event2, duration2), duration1 < duration2.\n.output Answer"]}
{"id": 518, "answer": false, "completion": ".decl Can_watch_tv(Location:symbol)\nCan_watch_tv(\"Mariana Trench\").\n.decl Answer()\nAnswer() :- Can_watch_tv(location), !.\n.output Answer", "completions": [".decl Can_watch_tv(Location:symbol)\nCan_watch_tv(\"Mariana Trench\").\n.decl Answer()\nAnswer() :- Can_watch_tv(location), !.\n.output Answer"]}
{"id": 519, "answer": false, "completion": ".decl Has_statuette(Home:symbol, Statuette:symbol)\nHas_statuette(\"creator of Law & Order's home\", \"winged\").\n.decl Answer()\nAnswer() :- Has_statuette(home, \"winged\"), home = \"creator of Law & Order's home\".\n.output Answer", "completions": [".decl Has_statuette(Home:symbol, Statuette:symbol)\nHas_statuette(\"creator of Law & Order's home\", \"winged\").\n.decl Answer()\nAnswer() :- Has_statuette(home, \"winged\"), home = \"creator of Law & Order's home\".\n.output Answer"]}
{"id": 520, "answer": false, "completion": ".decl Sleeps(Animal:symbol)\nSleeps(\"pangolin\").\n.decl Habitat(Animal:symbol, Habitat:symbol)\nHabitat(\"clouded leopard\", \"forest\").\nHabitat(\"pangolin\", \"forest\").\n.decl Answer()\nAnswer() :- Habitat(\"clouded leopard\", habitat), Habitat(\"pangolin\", habitat), !Sleeps(\"pangolin\").\n.output Answer", "completions": [".decl Sleeps(Animal:symbol)\nSleeps(\"pangolin\").\n.decl Habitat(Animal:symbol, Habitat:symbol)\nHabitat(\"clouded leopard\", \"forest\").\nHabitat(\"pangolin\", \"forest\").\n.decl Answer()\nAnswer() :- Habitat(\"clouded leopard\", habitat), Habitat(\"pangolin\", habitat), !Sleeps(\"pangolin\").\n.output Answer"]}
{"id": 521, "answer": false, "completion": ".decl Mythical_creature(Name:symbol)\nMythical_creature(\"unicorn\").\nMythical_creature(\"dragon\").\n.decl Small_Solar_System_body(Name:symbol)\nSmall_Solar_System_body(\"Ceres\").\nSmall_Solar_System_body(\"Eris\").\nSmall_Solar_System_body(\"Hygiea\").\nSmall_Solar_System_body(\"Chiron\").\n.decl Answer()\nAnswer() :- Mythical_creature(name), Small_Solar_System_body(name).\n.output Answer", "completions": [".decl Mythical_creature(Name:symbol)\nMythical_creature(\"unicorn\").\nMythical_creature(\"dragon\").\n.decl Small_Solar_System_body(Name:symbol)\nSmall_Solar_System_body(\"Ceres\").\nSmall_Solar_System_body(\"Eris\").\nSmall_Solar_System_body(\"Hygiea\").\nSmall_Solar_System_body(\"Chiron\").\n.decl Answer()\nAnswer() :- Mythical_creature(name), Small_Solar_System_body(name).\n.output Answer"]}
{"id": 522, "answer": true, "completion": ".decl Believes(Person:symbol, Concept:symbol)\nBelieves(\"Lionel Richie\", \"love\").\nBelieves(\"Lionel Richie\", \"music\").\n.decl Answer()\nAnswer() :- Believes(\"Lionel Richie\", \"holistic medicine\").\n.output Answer", "completions": [".decl Believes(Person:symbol, Concept:symbol)\nBelieves(\"Lionel Richie\", \"love\").\nBelieves(\"Lionel Richie\", \"music\").\n.decl Answer()\nAnswer() :- Believes(\"Lionel Richie\", \"holistic medicine\").\n.output Answer"]}
{"id": 523, "answer": false, "completion": ".decl Correct_phrase(Phrase:symbol)\nCorrect_phrase(\"co-host\").\nCorrect_phrase(\"host\").\n.decl Answer()\nAnswer() :- !Correct_phrase(\"double duty\"), Correct_phrase(\"host of Dancing With The Stars\").\n.output Answer", "completions": [".decl Correct_phrase(Phrase:symbol)\nCorrect_phrase(\"co-host\").\nCorrect_phrase(\"host\").\n.decl Answer()\nAnswer() :- !Correct_phrase(\"double duty\"), Correct_phrase(\"host of Dancing With The Stars\").\n.output Answer"]}
{"id": 524, "answer": true, "completion": ".decl Mates_in_location(Fish:symbol, Location:symbol)\nMates_in_location(\"salmon\", \"Pacific Ocean\").\nMates_in_location(\"salmon\", \"Atlantic Ocean\").\n.decl Answer()\nAnswer() :- Mates_in_location(\"salmon\", location), location != \"Caspian Sea\".\n.output Answer", "completions": [".decl Mates_in_location(Fish:symbol, Location:symbol)\nMates_in_location(\"salmon\", \"Pacific Ocean\").\nMates_in_location(\"salmon\", \"Atlantic Ocean\").\n.decl Answer()\nAnswer() :- Mates_in_location(\"salmon\", location), location != \"Caspian Sea\".\n.output Answer"]}
{"id": 525, "answer": true, "completion": ".decl Provides_service(Company:symbol, Service:symbol)\nProvides_service(\"Amtrak\", \"train\").\n.decl Goes_to(Place:symbol, Destination:symbol)\nGoes_to(\"Underworld\", \"Hades\").\n.decl Answer()\nAnswer() :- Provides_service(\"Amtrak\", service), Goes_to(\"Underworld\", destination), service = \"train\".\n.output Answer", "completions": [".decl Provides_service(Company:symbol, Service:symbol)\nProvides_service(\"Amtrak\", \"train\").\n.decl Goes_to(Place:symbol, Destination:symbol)\nGoes_to(\"Underworld\", \"Hades\").\n.decl Answer()\nAnswer() :- Provides_service(\"Amtrak\", service), Goes_to(\"Underworld\", destination), service = \"train\".\n.output Answer"]}
{"id": 526, "answer": true, "completion": ".decl Contains_nutrient(Food:symbol, Nutrient:symbol)\nContains_nutrient(\"Chinook salmon\", \"omega-3 fatty acids\").\n.decl Improves_health(Person:symbol, Nutrient:symbol)\nImproves_health(\"Ryan Reynolds\", \"omega-3 fatty acids\").\n.decl Answer()\nAnswer() :- Contains_nutrient(food, nutrient), Improves_health(\"Ryan Reynolds\", nutrient).\n.output Answer", "completions": [".decl Contains_nutrient(Food:symbol, Nutrient:symbol)\nContains_nutrient(\"Chinook salmon\", \"omega-3 fatty acids\").\n.decl Improves_health(Person:symbol, Nutrient:symbol)\nImproves_health(\"Ryan Reynolds\", \"omega-3 fatty acids\").\n.decl Answer()\nAnswer() :- Contains_nutrient(food, nutrient), Improves_health(\"Ryan Reynolds\", nutrient).\n.output Answer"]}
{"id": 527, "answer": false, "completion": ".decl Parent(child:symbol, parent:symbol)\nParent(\"Alexei Romanov\", \"Nicholas II\").\n.decl Has_trait(person:symbol, trait:symbol)\nHas_trait(\"Alexei Romanov\", \"hemophilia\").\nHas_trait(\"Alexei Romanov\", \"daredevil\").\n.decl Answer()\nAnswer() :- Parent(\"Alexei Romanov\", parent), Has_trait(parent, \"daredevil\").\n.output Answer", "completions": [".decl Parent(child:symbol, parent:symbol)\nParent(\"Alexei Romanov\", \"Nicholas II\").\n.decl Has_trait(person:symbol, trait:symbol)\nHas_trait(\"Alexei Romanov\", \"hemophilia\").\nHas_trait(\"Alexei Romanov\", \"daredevil\").\n.decl Answer()\nAnswer() :- Parent(\"Alexei Romanov\", parent), Has_trait(parent, \"daredevil\").\n.output Answer"]}
{"id": 528, "answer": true, "completion": ".decl Has_vowel(String:symbol)\nHas_vowel(\"a\").\nHas_vowel(\"e\").\nHas_vowel(\"i\").\nHas_vowel(\"o\").\nHas_vowel(\"u\").\n.decl Typed_on_line(Char:symbol, Line:symbol)\nTyped_on_line(\"a\", \"QWERTY\").\nTyped_on_line(\"e\", \"QWERTY\").\nTyped_on_line(\"i\", \"QWERTY\").\nTyped_on_line(\"o\", \"QWERTY\").\nTyped_on_line(\"u\", \"QWERTY\").\nTyped_on_line(\"y\", \"QWERTY\").\nTyped_on_line(\"q\", \"QWERTY\").\nTyped_on_line(\"w\", \"QWERTY\").\nTyped_on_line(\"e\", \"QWERTY\").\nTyped_on_line(\"r\", \"QWERTY\").\nTyped_on_line(\"t\", \"QWERTY\").\nTyped_on_line(\"y\", \"QWERTY\").\nTyped_on_line(\"u\", \"QWERTY\").\nTyped_on_line(\"i\", \"QWERTY\").\nTyped_on_line(\"o\", \"QWERTY\").\nTyped_on_line(\"p\", \"QWERTY\").\n.decl Answer()\nAnswer() :- Has_vowel(char), Typed_on_line(char, \"QWERTY\").\nAnswer() :- #count{char: Has_vowel(char)} > 10.\n.output Answer", "completions": [".decl Has_vowel(String:symbol)\nHas_vowel(\"a\").\nHas_vowel(\"e\").\nHas_vowel(\"i\").\nHas_vowel(\"o\").\nHas_vowel(\"u\").\n.decl Typed_on_line(Char:symbol, Line:symbol)\nTyped_on_line(\"a\", \"QWERTY\").\nTyped_on_line(\"e\", \"QWERTY\").\nTyped_on_line(\"i\", \"QWERTY\").\nTyped_on_line(\"o\", \"QWERTY\").\nTyped_on_line(\"u\", \"QWERTY\").\nTyped_on_line(\"y\", \"QWERTY\").\nTyped_on_line(\"q\", \"QWERTY\").\nTyped_on_line(\"w\", \"QWERTY\").\nTyped_on_line(\"e\", \"QWERTY\").\nTyped_on_line(\"r\", \"QWERTY\").\nTyped_on_line(\"t\", \"QWERTY\").\nTyped_on_line(\"y\", \"QWERTY\").\nTyped_on_line(\"u\", \"QWERTY\").\nTyped_on_line(\"i\", \"QWERTY\").\nTyped_on_line(\"o\", \"QWERTY\").\nTyped_on_line(\"p\", \"QWERTY\").\n.decl Answer()\nAnswer() :- Has_vowel(char), Typed_on_line(char, \"QWERTY\").\nAnswer() :- #count{char: Has_vowel(char)} > 10.\n.output Answer"]}
{"id": 529, "answer": false, "completion": ".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"muskets\", \"American Revolutionary War\").\nUsed_in_war(\"muskets\", \"Napoleonic Wars\").\nUsed_in_war(\"rifles\", \"World War I\").\nUsed_in_war(\"rifles\", \"World War II\").\nUsed_in_war(\"tanks\", \"Gulf War\").\n.decl Answer()\nAnswer() :- Used_in_war(\"muskets\", war), Used_in_war(\"Pacific War\", war), war != \"American Revolutionary War\", war != \"Napoleonic Wars\".\n.output Answer", "completions": [".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"muskets\", \"American Revolutionary War\").\nUsed_in_war(\"muskets\", \"Napoleonic Wars\").\nUsed_in_war(\"rifles\", \"World War I\").\nUsed_in_war(\"rifles\", \"World War II\").\nUsed_in_war(\"tanks\", \"Gulf War\").\n.decl Answer()\nAnswer() :- Used_in_war(\"muskets\", war), Used_in_war(\"Pacific War\", war), war != \"American Revolutionary War\", war != \"Napoleonic Wars\".\n.output Answer"]}
{"id": 530, "answer": true, "completion": ".decl Associated_with(Person:symbol, Animal:symbol)\nAssociated_with(\"Noah\", \"dove\").\n.decl Answer()\nAnswer() :- Associated_with(\"Noah\", \"dove\").\n.output Answer", "completions": [".decl Associated_with(Person:symbol, Animal:symbol)\nAssociated_with(\"Noah\", \"dove\").\n.decl Answer()\nAnswer() :- Associated_with(\"Noah\", \"dove\").\n.output Answer"]}
{"id": 531, "answer": true, "completion": ".decl Has_diagnosis(Person:symbol, Diagnosis:symbol)\nHas_diagnosis(\"Britney Spears\", \"bipolar disorder\").\n.decl Answer()\nAnswer() :- Has_diagnosis(\"Britney Spears\", \"bipolar disorder\").\n.output Answer", "completions": [".decl Has_diagnosis(Person:symbol, Diagnosis:symbol)\nHas_diagnosis(\"Britney Spears\", \"bipolar disorder\").\n.decl Answer()\nAnswer() :- Has_diagnosis(\"Britney Spears\", \"bipolar disorder\").\n.output Answer"]}
{"id": 532, "answer": false, "completion": ".decl Is_safer_pet(Bird:symbol)\n!Is_safer_pet(\"crane\").\nIs_safer_pet(\"cassowary\").\n.decl Answer()\nAnswer() :- Is_safer_pet(\"cassowary\"), !Is_safer_pet(\"crane\").\n.output Answer", "completions": [".decl Is_safer_pet(Bird:symbol)\n!Is_safer_pet(\"crane\").\nIs_safer_pet(\"cassowary\").\n.decl Answer()\nAnswer() :- Is_safer_pet(\"cassowary\"), !Is_safer_pet(\"crane\").\n.output Answer"]}
{"id": 533, "answer": true, "completion": ".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"Mark Twain\", \"writer\").\n.decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Mark Twain\", \"self-pasting scrapbook\").\n.decl Answer()\nAnswer() :- Occupation(\"Mark Twain\", job), job != \"inventor\".\nAnswer() :- Invented(\"Mark Twain\", invention), invention != \"struggling invention\".\n.output Answer", "completions": [".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"Mark Twain\", \"writer\").\n.decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Mark Twain\", \"self-pasting scrapbook\").\n.decl Answer()\nAnswer() :- Occupation(\"Mark Twain\", job), job != \"inventor\".\nAnswer() :- Invented(\"Mark Twain\", invention), invention != \"struggling invention\".\n.output Answer"]}
{"id": 534, "answer": true, "completion": ".decl Used_as_symbol(Object:symbol, Event:symbol)\nUsed_as_symbol(\"Eiffel tower\", \"World's Fair of 1889\").\nUsed_as_symbol(\"Eiffel tower\", \"French Revolution\").\n.decl Answer()\nAnswer() :- Used_as_symbol(\"Eiffel tower\", \"French Revolution\").\n.output Answer", "completions": [".decl Used_as_symbol(Object:symbol, Event:symbol)\nUsed_as_symbol(\"Eiffel tower\", \"World's Fair of 1889\").\nUsed_as_symbol(\"Eiffel tower\", \"French Revolution\").\n.decl Answer()\nAnswer() :- Used_as_symbol(\"Eiffel tower\", \"French Revolution\").\n.output Answer"]}
{"id": 535, "answer": true, "completion": ".decl Founded_in_year(Institution:symbol, Year:float)\nFounded_in_year(\"Berlin University of the Arts\", 1696).\n.decl Period_relic(Institution:symbol)\nPeriod_relic(\"Berlin University of the Arts\").\n.decl Answer()\nAnswer() :- Founded_in_year(\"Berlin University of the Arts\", year), year < 1750, Period_relic(\"Berlin University of the Arts\").\n.output Answer", "completions": [".decl Founded_in_year(Institution:symbol, Year:float)\nFounded_in_year(\"Berlin University of the Arts\", 1696).\n.decl Period_relic(Institution:symbol)\nPeriod_relic(\"Berlin University of the Arts\").\n.decl Answer()\nAnswer() :- Founded_in_year(\"Berlin University of the Arts\", year), year < 1750, Period_relic(\"Berlin University of the Arts\").\n.output Answer"]}
{"id": 536, "answer": false, "completion": ".decl Belongs_to(Publication:symbol, Publisher:symbol)\nBelongs_to(\"Avengers Comics\", \"Marvel Comics\").\nBelongs_to(\"Batman Comics\", \"DC Comics\").\n.decl Answer()\nAnswer() :- Belongs_to(\"Avengers Comics\", publisher), Belongs_to(\"DC Comics\", publisher), publisher != \"Marvel Comics\".\n.output Answer", "completions": [".decl Belongs_to(Publication:symbol, Publisher:symbol)\nBelongs_to(\"Avengers Comics\", \"Marvel Comics\").\nBelongs_to(\"Batman Comics\", \"DC Comics\").\n.decl Answer()\nAnswer() :- Belongs_to(\"Avengers Comics\", publisher), Belongs_to(\"DC Comics\", publisher), publisher != \"Marvel Comics\".\n.output Answer"]}
{"id": 537, "answer": false, "completion": ".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Queen Elizabeth The Queen Mother\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth II\", \"Elizabeth\").\nHas_name(\"Queen Mary I\", \"Mary\").\n.decl Answer()\nAnswer() :- Has_name(person1, name), Has_name(person2, name), Has_name(\"Queen Elizabeth I\", name), person1 != person2.\n.output Answer", "completions": [".decl Has_name(Person:symbol, Name:symbol)\nHas_name(\"Queen Elizabeth The Queen Mother\", \"Elizabeth\").\nHas_name(\"Queen Elizabeth II\", \"Elizabeth\").\nHas_name(\"Queen Mary I\", \"Mary\").\n.decl Answer()\nAnswer() :- Has_name(person1, name), Has_name(person2, name), Has_name(\"Queen Elizabeth I\", name), person1 != person2.\n.output Answer"]}
{"id": 538, "answer": true, "completion": ".decl Contains(Ingredient:symbol, Drink:symbol)\nContains(\"rum\", \"Cuba Libre\").\nContains(\"cola\", \"Cuba Libre\").\n.decl Has_effect(Drink:symbol, Effect:symbol)\nHas_effect(\"Cuba Libre\", \"relaxation\").\n.decl Answer()\nAnswer() :- Contains(\"rum\", drink), Contains(\"cola\", drink), Has_effect(drink, \"relaxation\").\n.output Answer", "completions": [".decl Contains(Ingredient:symbol, Drink:symbol)\nContains(\"rum\", \"Cuba Libre\").\nContains(\"cola\", \"Cuba Libre\").\n.decl Has_effect(Drink:symbol, Effect:symbol)\nHas_effect(\"Cuba Libre\", \"relaxation\").\n.decl Answer()\nAnswer() :- Contains(\"rum\", drink), Contains(\"cola\", drink), Has_effect(drink, \"relaxation\").\n.output Answer"]}
{"id": 539, "answer": false, "completion": ".decl Company_buys(Company:symbol, Item:symbol)\nCompany_buys(\"United Airlines\", \"airplanes\").\nCompany_buys(\"Delta Airlines\", \"airplanes\").\n.decl Answer()\nAnswer() :- Company_buys(\"United Airlines\", item), item = \"Glycol\", !.\n.output Answer", "completions": [".decl Company_buys(Company:symbol, Item:symbol)\nCompany_buys(\"United Airlines\", \"airplanes\").\nCompany_buys(\"Delta Airlines\", \"airplanes\").\n.decl Answer()\nAnswer() :- Company_buys(\"United Airlines\", item), item = \"Glycol\", !.\n.output Answer"]}
{"id": 540, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Swiss Guard\", 135).\nHas_n_members(\"Virginia General Assembly\", 140).\n.decl Answer()\nAnswer() :- Has_n_members(\"Swiss Guard\", n_members), Has_n_members(\"Virginia General Assembly\", n_chairs), n_members <= n_chairs.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Swiss Guard\", 135).\nHas_n_members(\"Virginia General Assembly\", 140).\n.decl Answer()\nAnswer() :- Has_n_members(\"Swiss Guard\", n_members), Has_n_members(\"Virginia General Assembly\", n_chairs), n_members <= n_chairs.\n.output Answer"]}
{"id": 541, "answer": false, "completion": ".decl Likes(Person:symbol, Chemical:symbol)\nLikes(\"Julio Gonzalez\", \"oxygen\").\nLikes(\"Julio Gonzalez\", \"nitrogen\").\nLikes(\"Julio Gonzalez\", \"hydrogen\").\n.decl Answer()\nAnswer() :- Likes(\"Julio Gonzalez\", \"acetylene\"), !.\n.output Answer", "completions": [".decl Likes(Person:symbol, Chemical:symbol)\nLikes(\"Julio Gonzalez\", \"oxygen\").\nLikes(\"Julio Gonzalez\", \"nitrogen\").\nLikes(\"Julio Gonzalez\", \"hydrogen\").\n.decl Answer()\nAnswer() :- Likes(\"Julio Gonzalez\", \"acetylene\"), !.\n.output Answer"]}
{"id": 542, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"Frigatebird\", \"ocean\").\nLives_in(\"Frigatebird\", \"tropical regions\").\nLives_in(\"Frigatebird\", \"coastal areas\").\n.decl Found_in(Animal:symbol, Location:symbol)\nFound_in(\"Frigatebird\", \"Florida\").\nFound_in(\"Frigatebird\", \"California\").\nFound_in(\"Frigatebird\", \"South America\").\nFound_in(\"Frigatebird\", \"Africa\").\nFound_in(\"Frigatebird\", \"Asia\").\nFound_in(\"Frigatebird\", \"Australia\").\n.decl Answer()\nAnswer() :- Lives_in(\"Frigatebird\", habitat), habitat != \"Ontario\".\nAnswer() :- Found_in(\"Frigatebird\", location), location != \"Ontario\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"Frigatebird\", \"ocean\").\nLives_in(\"Frigatebird\", \"tropical regions\").\nLives_in(\"Frigatebird\", \"coastal areas\").\n.decl Found_in(Animal:symbol, Location:symbol)\nFound_in(\"Frigatebird\", \"Florida\").\nFound_in(\"Frigatebird\", \"California\").\nFound_in(\"Frigatebird\", \"South America\").\nFound_in(\"Frigatebird\", \"Africa\").\nFound_in(\"Frigatebird\", \"Asia\").\nFound_in(\"Frigatebird\", \"Australia\").\n.decl Answer()\nAnswer() :- Lives_in(\"Frigatebird\", habitat), habitat != \"Ontario\".\nAnswer() :- Found_in(\"Frigatebird\", location), location != \"Ontario\".\n.output Answer"]}
{"id": 543, "answer": true, "completion": ".decl Distance(Location1:symbol, Location2:symbol, Distance:float)\nDistance(\"Statue of Freedom\", \"White House\", 1.5).\nDistance(\"White House\", \"Statue of Freedom\", 1.5).\nDistance(\"Statue of Liberty\", \"Ellis Island\", 0.5).\nDistance(\"Ellis Island\", \"Statue of Liberty\", 0.5).\n.decl Answer()\nAnswer() :- Distance(\"Statue of Freedom\", \"White House\", distance1), Distance(\"White House\", \"Statue of Liberty\", distance2), distance1 + distance2 <= 2.5.\n.output Answer", "completions": [".decl Distance(Location1:symbol, Location2:symbol, Distance:float)\nDistance(\"Statue of Freedom\", \"White House\", 1.5).\nDistance(\"White House\", \"Statue of Freedom\", 1.5).\nDistance(\"Statue of Liberty\", \"Ellis Island\", 0.5).\nDistance(\"Ellis Island\", \"Statue of Liberty\", 0.5).\n.decl Answer()\nAnswer() :- Distance(\"Statue of Freedom\", \"White House\", distance1), Distance(\"White House\", \"Statue of Liberty\", distance2), distance1 + distance2 <= 2.5.\n.output Answer"]}
{"id": 544, "answer": true, "completion": ".decl Helps_with_goal(Food:symbol, Goal:symbol)\nHelps_with_goal(\"Snickers\", \"weight gain\").\n.decl Answer()\nAnswer() :- !Helps_with_goal(\"Snickers\", \"weight loss\").\n.output Answer", "completions": [".decl Helps_with_goal(Food:symbol, Goal:symbol)\nHelps_with_goal(\"Snickers\", \"weight gain\").\n.decl Answer()\nAnswer() :- !Helps_with_goal(\"Snickers\", \"weight loss\").\n.output Answer"]}
{"id": 545, "answer": false, "completion": ".decl Consists_of(Body_part:symbol, Component:symbol)\nConsists_of(\"skull\", \"cranial bones\").\nConsists_of(\"skull\", \"facial bones\").\n.decl Answer()\nAnswer() :- Consists_of(\"skull\", component), !Consists_of(\"skull\", component2), component != component2.\n.output Answer", "completions": [".decl Consists_of(Body_part:symbol, Component:symbol)\nConsists_of(\"skull\", \"cranial bones\").\nConsists_of(\"skull\", \"facial bones\").\n.decl Answer()\nAnswer() :- Consists_of(\"skull\", component), !Consists_of(\"skull\", component2), component != component2.\n.output Answer"]}
{"id": 546, "answer": true, "completion": ".decl Witnessed(Person1:symbol, Person2:symbol)\nWitnessed(\"Jack Dempsey\", \"Muhammad Ali\").\nWitnessed(\"Conor McGregor\", \"Floyd Mayweather\").\n.decl Answer()\nAnswer() :- Witnessed(\"Jack Dempsey\", person2), Witnessed(person2, \"Conor McGregor\").\n.output Answer", "completions": [".decl Witnessed(Person1:symbol, Person2:symbol)\nWitnessed(\"Jack Dempsey\", \"Muhammad Ali\").\nWitnessed(\"Conor McGregor\", \"Floyd Mayweather\").\n.decl Answer()\nAnswer() :- Witnessed(\"Jack Dempsey\", person2), Witnessed(person2, \"Conor McGregor\").\n.output Answer"]}
{"id": 547, "answer": true, "completion": ".decl From_country(Character:symbol, Country:symbol)\nFrom_country(\"Rurouni Kenshin\", \"Japan\").\nFrom_country(\"Nobunaga\", \"Japan\").\nFrom_country(\"Lead character in Nobunaga's Ambition\", \"Japan\").\n.decl Answer()\nAnswer() :- From_country(\"Rurouni Kenshin\", country1), From_country(\"Lead character in Nobunaga's Ambition\", country2), country1 = country2.\n.output Answer", "completions": [".decl From_country(Character:symbol, Country:symbol)\nFrom_country(\"Rurouni Kenshin\", \"Japan\").\nFrom_country(\"Nobunaga\", \"Japan\").\nFrom_country(\"Lead character in Nobunaga's Ambition\", \"Japan\").\n.decl Answer()\nAnswer() :- From_country(\"Rurouni Kenshin\", country1), From_country(\"Lead character in Nobunaga's Ambition\", country2), country1 = country2.\n.output Answer"]}
{"id": 548, "answer": false, "completion": ".decl Height(Person:symbol, Height:float)\nHeight(\"Darth Vader\", 2.03).\nHeight(\"Bill Walton\", 2.11).\n.decl Vertical_jump(Person:symbol, Vertical_jump:float)\nVertical_jump(\"Darth Vader\", 0.5).\nVertical_jump(\"Bill Walton\", 0.7).\n.decl Answer()\nAnswer() :- Height(\"Darth Vader\", height1), Vertical_jump(\"Darth Vader\", vertical1), Height(\"Bill Walton\", height2), Vertical_jump(\"Bill Walton\", vertical2), height1 + vertical1 > height2 + vertical2.\n.output Answer", "completions": [".decl Height(Person:symbol, Height:float)\nHeight(\"Darth Vader\", 2.03).\nHeight(\"Bill Walton\", 2.11).\n.decl Vertical_jump(Person:symbol, Vertical_jump:float)\nVertical_jump(\"Darth Vader\", 0.5).\nVertical_jump(\"Bill Walton\", 0.7).\n.decl Answer()\nAnswer() :- Height(\"Darth Vader\", height1), Vertical_jump(\"Darth Vader\", vertical1), Height(\"Bill Walton\", height2), Vertical_jump(\"Bill Walton\", vertical2), height1 + vertical1 > height2 + vertical2.\n.output Answer"]}
{"id": 549, "answer": true, "completion": ".decl Uses_method(Journal:symbol, Method:symbol)\nUses_method(\"Nature\", \"peer review\").\nUses_method(\"Science\", \"peer review\").\nUses_method(\"Popular Science\", \"not peer review\").\n.decl Answer()\nAnswer() :- Uses_method(\"Popular Science\", method), method != \"peer review\".\n.output Answer", "completions": [".decl Uses_method(Journal:symbol, Method:symbol)\nUses_method(\"Nature\", \"peer review\").\nUses_method(\"Science\", \"peer review\").\nUses_method(\"Popular Science\", \"not peer review\").\n.decl Answer()\nAnswer() :- Uses_method(\"Popular Science\", method), method != \"peer review\".\n.output Answer"]}
{"id": 550, "answer": false, "completion": ".decl Linked_to(Entity:symbol, Concept:symbol)\nLinked_to(\"Europa\", \"Jupiter's moon\").\nLinked_to(\"Johann Strauss II\", \"Viennese waltz\").\nLinked_to(\"Vienna\", \"Viennese waltz\").\n.decl Answer()\nAnswer() :- Linked_to(\"Europa\", entity), Linked_to(entity, concept), concept = \"Viennese waltz\".\n.output Answer", "completions": [".decl Linked_to(Entity:symbol, Concept:symbol)\nLinked_to(\"Europa\", \"Jupiter's moon\").\nLinked_to(\"Johann Strauss II\", \"Viennese waltz\").\nLinked_to(\"Vienna\", \"Viennese waltz\").\n.decl Answer()\nAnswer() :- Linked_to(\"Europa\", entity), Linked_to(entity, concept), concept = \"Viennese waltz\".\n.output Answer"]}
{"id": 551, "answer": true, "completion": ".decl Has_hair_color(Character:symbol, Hair_color:symbol)\nHas_hair_color(\"Ariel\", \"red\").\nHas_hair_color(\"Belle\", \"brown\").\nHas_hair_color(\"Jasmine\", \"black\").\n.decl Appears_on_stage(Character:symbol, Production:symbol)\nAppears_on_stage(\"Ariel\", \"The Little Mermaid\").\nAppears_on_stage(\"Belle\", \"Beauty and the Beast\").\nAppears_on_stage(\"Jasmine\", \"Aladdin\").\n.decl Answer()\nAnswer() :- Appears_on_stage(character, \"The Little Mermaid\"), Has_hair_color(character, \"red\").\n.output Answer", "completions": [".decl Has_hair_color(Character:symbol, Hair_color:symbol)\nHas_hair_color(\"Ariel\", \"red\").\nHas_hair_color(\"Belle\", \"brown\").\nHas_hair_color(\"Jasmine\", \"black\").\n.decl Appears_on_stage(Character:symbol, Production:symbol)\nAppears_on_stage(\"Ariel\", \"The Little Mermaid\").\nAppears_on_stage(\"Belle\", \"Beauty and the Beast\").\nAppears_on_stage(\"Jasmine\", \"Aladdin\").\n.decl Answer()\nAnswer() :- Appears_on_stage(character, \"The Little Mermaid\"), Has_hair_color(character, \"red\").\n.output Answer"]}
{"id": 552, "answer": false, "completion": ".decl Participates_in(Event:symbol, Athlete:symbol)\nParticipates_in(\"2008 Summer Olympics\", \"athlete1\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete2\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete3\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete4\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete5\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete6\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete7\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete8\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete9\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete10\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete11\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete12\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete13\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete14\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete15\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete16\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete17\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete18\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete19\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete20\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete21\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete22\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete23\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete24\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete25\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete26\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete27\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete28\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete29\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete30\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete31\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete32\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete33\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete34\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete35\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete36\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete37\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete38\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete39\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete40\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete41\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete42\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete43\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete44\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete45\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete46\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete47\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete48\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete49\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete50\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete51\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete52\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete53\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete54\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete55\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete56\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete57\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete58\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete59\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete60\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete61\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete62\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete63\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete64\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete65\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete66\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete67\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete68\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete69\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete70\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete71\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete72\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete73\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete74\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete75\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete76\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete77\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete78\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete79\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete80\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete81\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete82\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete83\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete84\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete85\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete86\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete87\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete88\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete89\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete90\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete91\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete92\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete93\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete94\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete95\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete96\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete97\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete98\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete99\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete100\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete101\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete102\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete103\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete104\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete105\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete106\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete107\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete108\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete109\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete110\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete111\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete112\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete113\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete114\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete115\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete116\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete117\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete118\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete119\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete120\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete121\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete122\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete123\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete124\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete125\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete126\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete127\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete128\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete129\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete130\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete131\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete132\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete133\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete134\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete135\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete136\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete137\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete138\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete139\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete140\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete141\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete142\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete143\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete144\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete145\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete146\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete147\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete148\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete149\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete150\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete151\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete152\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete153\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete154\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete155\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete156\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete157\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete158\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete159\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete160\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete161\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete162\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete163\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete164\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete165\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete166\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete167\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete168\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete169\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete170\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete171\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete172\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete173\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete174\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete175\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete176\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete177\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete178\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete179\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete180\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete181\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete182\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete183\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete184\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete185\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete186\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete187\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete188\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete189\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete190\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete191\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete192\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete193\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete194\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete195\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete196\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete197\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete198\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete199\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete200\").\n.decl Has_partner(Athlete:symbol, Partner:symbol)\nHas_partner(\"athlete1\", \"athlete2\").\nHas_partner(\"athlete3\", \"athlete4\").\nHas_partner(\"athlete5\", \"athlete6\").\nHas_partner(\"athlete7\", \"athlete8\").\nHas_partner(\"athlete9\", \"athlete10\").\nHas_partner(\"athlete11\", \"athlete12\").\nHas_partner(\"athlete13\", \"athlete14\").\nHas_partner(\"athlete15\", \"athlete16\").\nHas_partner(\"athlete17\", \"athlete18\").\nHas_partner(\"athlete19\", \"athlete20\").\nHas_partner(\"athlete21\", \"athlete22\").\nHas_partner(\"athlete23\", \"athlete24\").\nHas_partner(\"athlete25\", \"athlete26\").\nHas_partner(\"athlete27\", \"athlete28\").\nHas_partner(\"athlete29\", \"athlete30\").\nHas_partner(\"athlete31\", \"athlete32\").\nHas_partner(\"athlete33\", \"athlete34\").\nHas_partner(\"athlete35\", \"athlete36\").\nHas_partner(\"athlete37\", \"athlete38\").\nHas_partner(\"athlete39\", \"athlete40\").\nHas_partner(\"athlete41\", \"athlete42\").\nHas_partner(\"athlete43\", \"athlete44\").\nHas_partner(\"athlete45\", \"athlete46\").\nHas_partner(\"athlete47\", \"athlete48\").\nHas_partner(\"athlete49\", \"athlete50\").\nHas_partner(\"athlete51\", \"athlete52\").\nHas_partner(\"athlete53\", \"athlete54\").\nHas_partner(\"athlete55\", \"athlete56\").\nHas_partner(\"athlete57\", \"athlete58\").\nHas_partner(\"athlete59\", \"athlete60\").\nHas_partner(\"athlete61\", \"athlete62\").\nHas_partner(\"athlete63\", \"athlete64\").\nHas_partner(\"athlete65\", \"athlete66\").\nHas_partner(\"athlete67\", \"athlete68\").\nHas_partner(\"athlete69\", \"athlete70\").\nHas_partner(\"athlete71\", \"athlete72\").\nHas_partner(\"athlete73\", \"athlete74\").\nHas_partner(\"athlete75\", \"athlete76\").\nHas_partner(\"athlete77\", \"athlete78\").\nHas_partner(\"athlete79\", \"athlete80\").\nHas_partner(\"athlete81\", \"athlete82\").\nHas_partner(\"athlete83\", \"athlete84\").\nHas_partner(\"athlete85\", \"athlete86\").\nHas_partner(\"athlete87\", \"athlete88\").\nHas_partner(\"athlete89\", \"athlete90\").\nHas_partner(\"athlete91\", \"athlete92\").\nHas_partner(\"athlete93\", \"athlete94\").\nHas_partner(\"athlete95\", \"athlete96\").\nHas_partner(\"athlete97\", \"athlete98\").\nHas_partner(\"athlete99\", \"athlete100\").\nHas_partner(\"athlete101\", \"athlete102\").\n", "completions": [".decl Participates_in(Event:symbol, Athlete:symbol)\nParticipates_in(\"2008 Summer Olympics\", \"athlete1\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete2\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete3\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete4\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete5\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete6\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete7\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete8\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete9\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete10\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete11\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete12\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete13\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete14\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete15\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete16\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete17\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete18\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete19\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete20\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete21\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete22\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete23\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete24\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete25\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete26\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete27\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete28\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete29\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete30\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete31\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete32\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete33\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete34\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete35\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete36\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete37\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete38\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete39\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete40\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete41\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete42\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete43\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete44\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete45\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete46\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete47\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete48\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete49\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete50\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete51\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete52\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete53\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete54\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete55\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete56\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete57\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete58\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete59\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete60\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete61\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete62\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete63\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete64\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete65\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete66\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete67\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete68\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete69\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete70\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete71\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete72\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete73\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete74\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete75\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete76\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete77\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete78\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete79\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete80\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete81\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete82\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete83\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete84\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete85\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete86\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete87\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete88\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete89\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete90\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete91\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete92\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete93\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete94\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete95\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete96\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete97\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete98\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete99\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete100\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete101\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete102\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete103\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete104\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete105\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete106\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete107\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete108\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete109\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete110\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete111\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete112\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete113\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete114\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete115\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete116\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete117\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete118\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete119\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete120\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete121\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete122\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete123\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete124\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete125\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete126\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete127\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete128\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete129\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete130\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete131\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete132\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete133\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete134\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete135\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete136\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete137\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete138\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete139\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete140\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete141\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete142\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete143\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete144\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete145\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete146\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete147\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete148\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete149\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete150\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete151\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete152\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete153\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete154\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete155\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete156\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete157\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete158\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete159\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete160\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete161\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete162\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete163\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete164\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete165\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete166\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete167\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete168\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete169\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete170\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete171\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete172\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete173\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete174\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete175\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete176\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete177\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete178\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete179\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete180\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete181\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete182\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete183\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete184\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete185\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete186\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete187\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete188\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete189\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete190\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete191\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete192\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete193\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete194\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete195\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete196\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete197\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete198\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete199\").\nParticipates_in(\"2008 Summer Olympics\", \"athlete200\").\n.decl Has_partner(Athlete:symbol, Partner:symbol)\nHas_partner(\"athlete1\", \"athlete2\").\nHas_partner(\"athlete3\", \"athlete4\").\nHas_partner(\"athlete5\", \"athlete6\").\nHas_partner(\"athlete7\", \"athlete8\").\nHas_partner(\"athlete9\", \"athlete10\").\nHas_partner(\"athlete11\", \"athlete12\").\nHas_partner(\"athlete13\", \"athlete14\").\nHas_partner(\"athlete15\", \"athlete16\").\nHas_partner(\"athlete17\", \"athlete18\").\nHas_partner(\"athlete19\", \"athlete20\").\nHas_partner(\"athlete21\", \"athlete22\").\nHas_partner(\"athlete23\", \"athlete24\").\nHas_partner(\"athlete25\", \"athlete26\").\nHas_partner(\"athlete27\", \"athlete28\").\nHas_partner(\"athlete29\", \"athlete30\").\nHas_partner(\"athlete31\", \"athlete32\").\nHas_partner(\"athlete33\", \"athlete34\").\nHas_partner(\"athlete35\", \"athlete36\").\nHas_partner(\"athlete37\", \"athlete38\").\nHas_partner(\"athlete39\", \"athlete40\").\nHas_partner(\"athlete41\", \"athlete42\").\nHas_partner(\"athlete43\", \"athlete44\").\nHas_partner(\"athlete45\", \"athlete46\").\nHas_partner(\"athlete47\", \"athlete48\").\nHas_partner(\"athlete49\", \"athlete50\").\nHas_partner(\"athlete51\", \"athlete52\").\nHas_partner(\"athlete53\", \"athlete54\").\nHas_partner(\"athlete55\", \"athlete56\").\nHas_partner(\"athlete57\", \"athlete58\").\nHas_partner(\"athlete59\", \"athlete60\").\nHas_partner(\"athlete61\", \"athlete62\").\nHas_partner(\"athlete63\", \"athlete64\").\nHas_partner(\"athlete65\", \"athlete66\").\nHas_partner(\"athlete67\", \"athlete68\").\nHas_partner(\"athlete69\", \"athlete70\").\nHas_partner(\"athlete71\", \"athlete72\").\nHas_partner(\"athlete73\", \"athlete74\").\nHas_partner(\"athlete75\", \"athlete76\").\nHas_partner(\"athlete77\", \"athlete78\").\nHas_partner(\"athlete79\", \"athlete80\").\nHas_partner(\"athlete81\", \"athlete82\").\nHas_partner(\"athlete83\", \"athlete84\").\nHas_partner(\"athlete85\", \"athlete86\").\nHas_partner(\"athlete87\", \"athlete88\").\nHas_partner(\"athlete89\", \"athlete90\").\nHas_partner(\"athlete91\", \"athlete92\").\nHas_partner(\"athlete93\", \"athlete94\").\nHas_partner(\"athlete95\", \"athlete96\").\nHas_partner(\"athlete97\", \"athlete98\").\nHas_partner(\"athlete99\", \"athlete100\").\nHas_partner(\"athlete101\", \"athlete102\").\n"]}
{"id": 553, "answer": false, "completion": ".decl Contributed_to(Event:symbol, Outcome:symbol)\nContributed_to(\"Eiffel Tower\", \"World War I victory\").\nContributed_to(\"Eiffel Tower\", \"World War II victory\").\n.decl Answer()\nAnswer() :- Contributed_to(\"Eiffel Tower\", \"war victory\").\n.output Answer", "completions": [".decl Contributed_to(Event:symbol, Outcome:symbol)\nContributed_to(\"Eiffel Tower\", \"World War I victory\").\nContributed_to(\"Eiffel Tower\", \"World War II victory\").\n.decl Answer()\nAnswer() :- Contributed_to(\"Eiffel Tower\", \"war victory\").\n.output Answer"]}
{"id": 554, "answer": true, "completion": ".decl Dangerous(Object:symbol)\nDangerous(\"Curiosity\").\n.decl Answer()\nAnswer() :- Dangerous(\"Curiosity\"), !Dangerous(\"cat\").\n.output Answer", "completions": [".decl Dangerous(Object:symbol)\nDangerous(\"Curiosity\").\n.decl Answer()\nAnswer() :- Dangerous(\"Curiosity\"), !Dangerous(\"cat\").\n.output Answer"]}
{"id": 555, "answer": false, "completion": ".decl Enhances_flavor(Food_A:symbol, Food_B:symbol)\nEnhances_flavor(\"lemon\", \"fish\").\nEnhances_flavor(\"salt\", \"meat\").\n.decl Answer()\nAnswer() :- Enhances_flavor(\"lemon\", \"milk\").\n.output Answer", "completions": [".decl Enhances_flavor(Food_A:symbol, Food_B:symbol)\nEnhances_flavor(\"lemon\", \"fish\").\nEnhances_flavor(\"salt\", \"meat\").\n.decl Answer()\nAnswer() :- Enhances_flavor(\"lemon\", \"milk\").\n.output Answer"]}
{"id": 556, "answer": false, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Oprah Winfrey\", \"Tennessee State University\").\n.decl Ivy_League(University:symbol)\nIvy_League(\"Harvard University\").\nIvy_League(\"Yale University\").\nIvy_League(\"Princeton University\").\nIvy_League(\"Columbia University\").\nIvy_League(\"Brown University\").\nIvy_League(\"Dartmouth College\").\nIvy_League(\"University of Pennsylvania\").\n.decl Answer()\nAnswer() :- Graduates(\"Oprah Winfrey\", university), Ivy_League(university).\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Oprah Winfrey\", \"Tennessee State University\").\n.decl Ivy_League(University:symbol)\nIvy_League(\"Harvard University\").\nIvy_League(\"Yale University\").\nIvy_League(\"Princeton University\").\nIvy_League(\"Columbia University\").\nIvy_League(\"Brown University\").\nIvy_League(\"Dartmouth College\").\nIvy_League(\"University of Pennsylvania\").\n.decl Answer()\nAnswer() :- Graduates(\"Oprah Winfrey\", university), Ivy_League(university).\n.output Answer"]}
{"id": 557, "answer": true, "completion": ".decl Is_birthday(Person:symbol, Date:symbol)\nIs_birthday(\"unanimously elected president\", \"July 4\").\n.decl Takes_break(Job:symbol, Date:symbol)\nTakes_break(\"mail carrier\", \"July 4\").\n.decl Answer()\nAnswer() :- Is_birthday(\"unanimously elected president\", date), Takes_break(\"mail carrier\", date).\n.output Answer", "completions": [".decl Is_birthday(Person:symbol, Date:symbol)\nIs_birthday(\"unanimously elected president\", \"July 4\").\n.decl Takes_break(Job:symbol, Date:symbol)\nTakes_break(\"mail carrier\", \"July 4\").\n.decl Answer()\nAnswer() :- Is_birthday(\"unanimously elected president\", date), Takes_break(\"mail carrier\", date).\n.output Answer"]}
{"id": 558, "answer": false, "completion": ".decl Requires(Item:symbol, Tool:symbol)\nRequires(\"Paprika\", \"dehydrator\").\n.decl Answer()\nAnswer() :- !Requires(\"Paprika\", \"dehydrator\").\n.output Answer", "completions": [".decl Requires(Item:symbol, Tool:symbol)\nRequires(\"Paprika\", \"dehydrator\").\n.decl Answer()\nAnswer() :- !Requires(\"Paprika\", \"dehydrator\").\n.output Answer"]}
{"id": 559, "answer": false, "completion": ".decl Fought_in_war(Person:symbol, War:symbol)\nFought_in_war(\"veteran\", \"Philippine-American War\").\n.decl Craves_food(Person:symbol, Food:symbol)\nCraves_food(\"veteran\", \"SPAM\").\n.decl Answer()\nAnswer() :- Fought_in_war(person, \"Philippine-American War\"), Craves_food(person, \"SPAM\").\n.output Answer", "completions": [".decl Fought_in_war(Person:symbol, War:symbol)\nFought_in_war(\"veteran\", \"Philippine-American War\").\n.decl Craves_food(Person:symbol, Food:symbol)\nCraves_food(\"veteran\", \"SPAM\").\n.decl Answer()\nAnswer() :- Fought_in_war(person, \"Philippine-American War\"), Craves_food(person, \"SPAM\").\n.output Answer"]}
{"id": 560, "answer": true, "completion": ".decl Located_in(Capital:symbol, Location:symbol)\nLocated_in(\"United States Capitol\", \"Washington D.C.\").\nLocated_in(\"White House\", \"Washington D.C.\").\n.decl Answer()\nAnswer() :- Located_in(\"United States Capitol\", location1), Located_in(\"White House\", location2), location1 = location2.\n.output Answer", "completions": [".decl Located_in(Capital:symbol, Location:symbol)\nLocated_in(\"United States Capitol\", \"Washington D.C.\").\nLocated_in(\"White House\", \"Washington D.C.\").\n.decl Answer()\nAnswer() :- Located_in(\"United States Capitol\", location1), Located_in(\"White House\", location2), location1 = location2.\n.output Answer"]}
{"id": 561, "answer": false, "completion": ".decl Year_has_passed(Year:float)\nYear_has_passed(2050).\n.decl Has_image_rights(Character:symbol, Year:float)\nHas_image_rights(\"Godzilla\", 2020).\n.decl Answer()\nAnswer() :- Has_image_rights(\"Godzilla\", year), Year_has_passed(year), year < 2050.\n.output Answer", "completions": [".decl Year_has_passed(Year:float)\nYear_has_passed(2050).\n.decl Has_image_rights(Character:symbol, Year:float)\nHas_image_rights(\"Godzilla\", 2020).\n.decl Answer()\nAnswer() :- Has_image_rights(\"Godzilla\", year), Year_has_passed(year), year < 2050.\n.output Answer"]}
{"id": 562, "answer": true, "completion": ".decl Knows(Profession:symbol, Knowledge:symbol)\nKnows(\"actuary\", \"statistics\").\nKnows(\"mathematician\", \"prime numbers\").\n.decl Answer()\nAnswer() :- Knows(\"actuary\", knowledge1), Knows(\"mathematician\", knowledge2), knowledge1 != knowledge2.\n.output Answer", "completions": [".decl Knows(Profession:symbol, Knowledge:symbol)\nKnows(\"actuary\", \"statistics\").\nKnows(\"mathematician\", \"prime numbers\").\n.decl Answer()\nAnswer() :- Knows(\"actuary\", knowledge1), Knows(\"mathematician\", knowledge2), knowledge1 != knowledge2.\n.output Answer"]}
{"id": 563, "answer": false, "completion": ".decl Emits_gas(Vehicle:symbol, Gas:symbol)\nEmits_gas(\"car\", \"CO2\").\nEmits_gas(\"cow\", \"methane\").\n.decl Gas_impact(Gas:symbol, Impact:float)\nGas_impact(\"CO2\", 1).\nGas_impact(\"methane\", 28).\n.decl Answer()\nAnswer() :- Emits_gas(\"cow\", gas1), Emits_gas(\"car\", gas2), Gas_impact(gas1, impact1), Gas_impact(gas2, impact2), impact1 < impact2.\n.output Answer", "completions": [".decl Emits_gas(Vehicle:symbol, Gas:symbol)\nEmits_gas(\"car\", \"CO2\").\nEmits_gas(\"cow\", \"methane\").\n.decl Gas_impact(Gas:symbol, Impact:float)\nGas_impact(\"CO2\", 1).\nGas_impact(\"methane\", 28).\n.decl Answer()\nAnswer() :- Emits_gas(\"cow\", gas1), Emits_gas(\"car\", gas2), Gas_impact(gas1, impact1), Gas_impact(gas2, impact2), impact1 < impact2.\n.output Answer"]}
{"id": 564, "answer": true, "completion": ".decl Writes_song(Artist:symbol, Song:symbol)\nWrites_song(\"Justin Timberlake\", \"Cry Me a River\").\n.decl Song_about(Song:symbol, Subject:symbol)\nSong_about(\"Cry Me a River\", \"Britney Spears\").\n.decl Answer()\nAnswer() :- Writes_song(artist, \"Cry Me a River\"), Song_about(\"Cry Me a River\", \"Britney Spears\").\n.output Answer", "completions": [".decl Writes_song(Artist:symbol, Song:symbol)\nWrites_song(\"Justin Timberlake\", \"Cry Me a River\").\n.decl Song_about(Song:symbol, Subject:symbol)\nSong_about(\"Cry Me a River\", \"Britney Spears\").\n.decl Answer()\nAnswer() :- Writes_song(artist, \"Cry Me a River\"), Song_about(\"Cry Me a River\", \"Britney Spears\").\n.output Answer"]}
{"id": 565, "answer": false, "completion": ".decl Runs(Fast_animal:symbol)\nRuns(\"Pronghorn antelope\").\n.decl Hunts(Predator:symbol, Prey:symbol)\nHunts(\"Clouded leopard\", \"monkey\").\nHunts(\"Clouded leopard\", \"deer\").\nHunts(\"Clouded leopard\", \"porcupine\").\nHunts(\"Clouded leopard\", \"squirrel\").\nHunts(\"Clouded leopard\", \"bird\").\n.decl Answer()\nAnswer() :- Runs(\"Pronghorn antelope\"), Hunts(\"Clouded leopard\", \"Pronghorn antelope\").\n.output Answer", "completions": [".decl Runs(Fast_animal:symbol)\nRuns(\"Pronghorn antelope\").\n.decl Hunts(Predator:symbol, Prey:symbol)\nHunts(\"Clouded leopard\", \"monkey\").\nHunts(\"Clouded leopard\", \"deer\").\nHunts(\"Clouded leopard\", \"porcupine\").\nHunts(\"Clouded leopard\", \"squirrel\").\nHunts(\"Clouded leopard\", \"bird\").\n.decl Answer()\nAnswer() :- Runs(\"Pronghorn antelope\"), Hunts(\"Clouded leopard\", \"Pronghorn antelope\").\n.output Answer"]}
{"id": 566, "answer": false, "completion": ".decl Sent_email(From:symbol, To:symbol, Content:symbol)\nSent_email(\"Ronald Reagan\", \"friend1\", \"Check out these funny cat pictures!\").\nSent_email(\"friend2\", \"Ronald Reagan\", \"Thanks for the cat pics!\").\n.decl Answer()\nAnswer() :- Sent_email(\"Ronald Reagan\", friend, content), content like \"%cat%\", content like \"%funny%\".\n.output Answer", "completions": [".decl Sent_email(From:symbol, To:symbol, Content:symbol)\nSent_email(\"Ronald Reagan\", \"friend1\", \"Check out these funny cat pictures!\").\nSent_email(\"friend2\", \"Ronald Reagan\", \"Thanks for the cat pics!\").\n.decl Answer()\nAnswer() :- Sent_email(\"Ronald Reagan\", friend, content), content like \"%cat%\", content like \"%funny%\".\n.output Answer"]}
{"id": 567, "answer": false, "completion": ".decl Requires_ID(Medication:symbol, Pharmacy:symbol)\nRequires_ID(\"opioids\", \"Walgreens\").\nRequires_ID(\"antibiotics\", \"CVS\").\n.decl Answer()\nAnswer() :- Requires_ID(medication, pharmacy), !Requires_ID(medication, other_pharmacy), pharmacy != other_pharmacy.\n.output Answer", "completions": [".decl Requires_ID(Medication:symbol, Pharmacy:symbol)\nRequires_ID(\"opioids\", \"Walgreens\").\nRequires_ID(\"antibiotics\", \"CVS\").\n.decl Answer()\nAnswer() :- Requires_ID(medication, pharmacy), !Requires_ID(medication, other_pharmacy), pharmacy != other_pharmacy.\n.output Answer"]}
{"id": 568, "answer": true, "completion": ".decl Has_n_ships(Navy:symbol, N_ships:float)\nHas_n_ships(\"Republic of Korea Navy\", 234).\nHas_n_ships(\"Eritrea Navy\", 16).\n.decl Answer()\nAnswer() :- Has_n_ships(\"Republic of Korea Navy\", n_ships1), Has_n_ships(\"Eritrea Navy\", n_ships2), n_ships1 > n_ships2.\n.output Answer", "completions": [".decl Has_n_ships(Navy:symbol, N_ships:float)\nHas_n_ships(\"Republic of Korea Navy\", 234).\nHas_n_ships(\"Eritrea Navy\", 16).\n.decl Answer()\nAnswer() :- Has_n_ships(\"Republic of Korea Navy\", n_ships1), Has_n_ships(\"Eritrea Navy\", n_ships2), n_ships1 > n_ships2.\n.output Answer"]}
{"id": 569, "answer": false, "completion": ".decl Inspired_by(Book_A:symbol, Book_B:symbol)\nInspired_by(\"The Great Gatsby\", \"This Side of Paradise\").\nInspired_by(\"1984\", \"Animal Farm\").\n.decl Answer()\nAnswer() :- Inspired_by(\"The Great Gatsby\", book), Inspired_by(book, \"1984\").\n.output Answer", "completions": [".decl Inspired_by(Book_A:symbol, Book_B:symbol)\nInspired_by(\"The Great Gatsby\", \"This Side of Paradise\").\nInspired_by(\"1984\", \"Animal Farm\").\n.decl Answer()\nAnswer() :- Inspired_by(\"The Great Gatsby\", book), Inspired_by(book, \"1984\").\n.output Answer"]}
{"id": 570, "answer": false, "completion": ".decl Is_villain(Character:symbol)\nIs_villain(\"Dr. Doom\").\nIs_villain(\"Galactus\").\n.decl Is_member(Team:symbol, Member:symbol)\nIs_member(\"Fantastic Four\", \"Mr. Fantastic\").\nIs_member(\"Fantastic Four\", \"Invisible Woman\").\nIs_member(\"Fantastic Four\", \"Human Torch\").\nIs_member(\"Fantastic Four\", \"The Thing\").\n.decl Answer()\nAnswer() :- Is_member(\"Fantastic Four\", member), Is_villain(member), member != \"Dr. Doom\".\n.output Answer", "completions": [".decl Is_villain(Character:symbol)\nIs_villain(\"Dr. Doom\").\nIs_villain(\"Galactus\").\n.decl Is_member(Team:symbol, Member:symbol)\nIs_member(\"Fantastic Four\", \"Mr. Fantastic\").\nIs_member(\"Fantastic Four\", \"Invisible Woman\").\nIs_member(\"Fantastic Four\", \"Human Torch\").\nIs_member(\"Fantastic Four\", \"The Thing\").\n.decl Answer()\nAnswer() :- Is_member(\"Fantastic Four\", member), Is_villain(member), member != \"Dr. Doom\".\n.output Answer"]}
{"id": 571, "answer": false, "completion": ".decl Has_name_count(Name:symbol, Count:float)\nHas_name_count(\"Michael\", 1000).\nHas_name_count(\"John\", 5000).\nHas_name_count(\"Emily\", 2000).\n.decl Total_births(Year:symbol, Total:float)\nTotal_births(\"2020\", 1000000).\n.decl Answer()\nAnswer() :- Has_name_count(\"Michael\", count), Total_births(\"2020\", total), count/total < 0.01.\n.output Answer", "completions": [".decl Has_name_count(Name:symbol, Count:float)\nHas_name_count(\"Michael\", 1000).\nHas_name_count(\"John\", 5000).\nHas_name_count(\"Emily\", 2000).\n.decl Total_births(Year:symbol, Total:float)\nTotal_births(\"2020\", 1000000).\n.decl Answer()\nAnswer() :- Has_name_count(\"Michael\", count), Total_births(\"2020\", total), count/total < 0.01.\n.output Answer"]}
{"id": 572, "answer": true, "completion": ".decl Can_fit_on_boat(Object:symbol, Size:float)\nCan_fit_on_boat(\"giraffe\", 10).\nCan_fit_on_boat(\"elephant\", 20).\nCan_fit_on_boat(\"human\", 1).\n.decl Flooded(Location:symbol)\nFlooded(\"Lincoln Tunnel\").\n.decl Answer()\nAnswer() :- Flooded(location), Can_fit_on_boat(object1, size1), Can_fit_on_boat(object2, size2), object1 != object2, size1 + size2 <= 20.\n.output Answer", "completions": [".decl Can_fit_on_boat(Object:symbol, Size:float)\nCan_fit_on_boat(\"giraffe\", 10).\nCan_fit_on_boat(\"elephant\", 20).\nCan_fit_on_boat(\"human\", 1).\n.decl Flooded(Location:symbol)\nFlooded(\"Lincoln Tunnel\").\n.decl Answer()\nAnswer() :- Flooded(location), Can_fit_on_boat(object1, size1), Can_fit_on_boat(object2, size2), object1 != object2, size1 + size2 <= 20.\n.output Answer"]}
{"id": 573, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person1\", \"dermatitis\").\n.decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"person1\", \"hand model\").\n.decl Answer()\nAnswer() :- Has_condition(person, \"dermatitis\"), !Occupation(person, \"hand model\").\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person1\", \"dermatitis\").\n.decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"person1\", \"hand model\").\n.decl Answer()\nAnswer() :- Has_condition(person, \"dermatitis\"), !Occupation(person, \"hand model\").\n.output Answer"]}
{"id": 574, "answer": false, "completion": ".decl Is_pet(Animal:symbol)\nIs_pet(\"dog\").\n.decl Needs_prevention(Animal:symbol, Prevention:symbol)\nNeeds_prevention(\"dog\", \"heartworm\").\n.decl Answer()\nAnswer() :- Is_pet(\"Goofy\"), Needs_prevention(\"Goofy\", \"heartworm\").\n.output Answer", "completions": [".decl Is_pet(Animal:symbol)\nIs_pet(\"dog\").\n.decl Needs_prevention(Animal:symbol, Prevention:symbol)\nNeeds_prevention(\"dog\", \"heartworm\").\n.decl Answer()\nAnswer() :- Is_pet(\"Goofy\"), Needs_prevention(\"Goofy\", \"heartworm\").\n.output Answer"]}
{"id": 575, "answer": true, "completion": ".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"nickel\", 28).\nHas_atomic_number(\"mercury\", 80).\n.decl Has_value(Element:symbol, Value:float)\nHas_value(\"nickel\", 0.05).\nHas_value(\"mercury\", 0.002).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"nickel\", atomic_number1), Has_atomic_number(\"mercury\", atomic_number2), Has_value(\"nickel\", value1), Has_value(\"mercury\", value2), (value1/atomic_number1) > (value2/atomic_number2).\n.output Answer", "completions": [".decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"nickel\", 28).\nHas_atomic_number(\"mercury\", 80).\n.decl Has_value(Element:symbol, Value:float)\nHas_value(\"nickel\", 0.05).\nHas_value(\"mercury\", 0.002).\n.decl Answer()\nAnswer() :- Has_atomic_number(\"nickel\", atomic_number1), Has_atomic_number(\"mercury\", atomic_number2), Has_value(\"nickel\", value1), Has_value(\"mercury\", value2), (value1/atomic_number1) > (value2/atomic_number2).\n.output Answer"]}
{"id": 576, "answer": true, "completion": ".decl Married(Person1:symbol, Person2:symbol)\nMarried(\"John Lennon\", \"Cynthia Powell\").\n.decl Anniversary(Person1:symbol, Person2:symbol, Years:float)\nAnniversary(\"John Lennon\", \"Cynthia Powell\", 25).\n.decl Answer()\nAnswer() :- Married(\"John Lennon\", \"Cynthia Powell\"), Anniversary(\"John Lennon\", \"Cynthia Powell\", 25).\n.output Answer", "completions": [".decl Married(Person1:symbol, Person2:symbol)\nMarried(\"John Lennon\", \"Cynthia Powell\").\n.decl Anniversary(Person1:symbol, Person2:symbol, Years:float)\nAnniversary(\"John Lennon\", \"Cynthia Powell\", 25).\n.decl Answer()\nAnswer() :- Married(\"John Lennon\", \"Cynthia Powell\"), Anniversary(\"John Lennon\", \"Cynthia Powell\", 25).\n.output Answer"]}
{"id": 577, "answer": true, "completion": ".decl Is_poor(Person:symbol)\nIs_poor(\"Christopher Reeve\").\n.decl Has_treatment(Person:symbol, Treatment:symbol)\nHas_treatment(\"Christopher Reeve\", \"ventilator\").\nHas_treatment(\"Christopher Reeve\", \"physical therapy\").\n.decl Answer()\nAnswer() :- !Is_poor(\"Christopher Reeve\"), Has_treatment(\"Christopher Reeve\", \"ventilator\").\nAnswer() :- Is_poor(\"Christopher Reeve\"), Has_treatment(\"Christopher Reeve\", \"physical therapy\").\n.output Answer", "completions": [".decl Is_poor(Person:symbol)\nIs_poor(\"Christopher Reeve\").\n.decl Has_treatment(Person:symbol, Treatment:symbol)\nHas_treatment(\"Christopher Reeve\", \"ventilator\").\nHas_treatment(\"Christopher Reeve\", \"physical therapy\").\n.decl Answer()\nAnswer() :- !Is_poor(\"Christopher Reeve\"), Has_treatment(\"Christopher Reeve\", \"ventilator\").\nAnswer() :- Is_poor(\"Christopher Reeve\"), Has_treatment(\"Christopher Reeve\", \"physical therapy\").\n.output Answer"]}
{"id": 578, "answer": true, "completion": ".decl Related_to(Event_A:symbol, Event_B:symbol)\nRelated_to(\"Operation Barbarossa\", \"World War II\").\nRelated_to(\"The Crusades\", \"medieval history\").\n.decl Answer()\nAnswer() :- Related_to(\"Operation Barbarossa\", event1), Related_to(\"The Crusades\", event2), event1 != event2.\n.output Answer", "completions": [".decl Related_to(Event_A:symbol, Event_B:symbol)\nRelated_to(\"Operation Barbarossa\", \"World War II\").\nRelated_to(\"The Crusades\", \"medieval history\").\n.decl Answer()\nAnswer() :- Related_to(\"Operation Barbarossa\", event1), Related_to(\"The Crusades\", event2), event1 != event2.\n.output Answer"]}
{"id": 579, "answer": true, "completion": ".decl Understands(Person:symbol, Subject:symbol)\nUnderstands(\"carpenter\", \"woodworking\").\nUnderstands(\"mathematician\", \"geometry\").\n.decl Answer()\nAnswer() :- Understands(\"carpenter\", subject), subject != \"geometry\".\n.output Answer", "completions": [".decl Understands(Person:symbol, Subject:symbol)\nUnderstands(\"carpenter\", \"woodworking\").\nUnderstands(\"mathematician\", \"geometry\").\n.decl Answer()\nAnswer() :- Understands(\"carpenter\", subject), subject != \"geometry\".\n.output Answer"]}
{"id": 580, "answer": false, "completion": ".decl Reads_book(Person:symbol, Book:symbol, Time:float)\nReads_book(\"speed reader\", \"The Great Gatsby\", 2).\nReads_book(\"speed reader\", \"The Raven\", 1).\n.decl Answer()\nAnswer() :- Reads_book(\"speed reader\", \"The Great Gatsby\", time1), Reads_book(\"speed reader\", \"The Raven\", time2), time1 < time2.\n.output Answer", "completions": [".decl Reads_book(Person:symbol, Book:symbol, Time:float)\nReads_book(\"speed reader\", \"The Great Gatsby\", 2).\nReads_book(\"speed reader\", \"The Raven\", 1).\n.decl Answer()\nAnswer() :- Reads_book(\"speed reader\", \"The Great Gatsby\", time1), Reads_book(\"speed reader\", \"The Raven\", time2), time1 < time2.\n.output Answer"]}
{"id": 581, "answer": true, "completion": ".decl Rated(movie:symbol, rating:symbol)\nRated(\"The Dark Knight\", \"PG-13\").\n.decl Age_range(rating:symbol, min_age:float)\nAge_range(\"PG-13\", 13).\n.decl Answer()\nAnswer() :- Rated(\"The Dark Knight\", rating), Age_range(rating, min_age), min_age > 5.\n.output Answer", "completions": [".decl Rated(movie:symbol, rating:symbol)\nRated(\"The Dark Knight\", \"PG-13\").\n.decl Age_range(rating:symbol, min_age:float)\nAge_range(\"PG-13\", 13).\n.decl Answer()\nAnswer() :- Rated(\"The Dark Knight\", rating), Age_range(rating, min_age), min_age > 5.\n.output Answer"]}
{"id": 582, "answer": false, "completion": ".decl Uses_language(Technology:symbol, Language:symbol)\nUses_language(\"computer\", \"Boolean algebra\").\n.decl Answer()\nAnswer() :- Uses_language(\"computer\", language), language = \"Boolean algebra\".\n.output Answer", "completions": [".decl Uses_language(Technology:symbol, Language:symbol)\nUses_language(\"computer\", \"Boolean algebra\").\n.decl Answer()\nAnswer() :- Uses_language(\"computer\", language), language = \"Boolean algebra\".\n.output Answer"]}
{"id": 583, "answer": true, "completion": ".decl Located_in(Organ:symbol, Body_part:symbol)\nLocated_in(\"brain\", \"head\").\nLocated_in(\"heart\", \"torso\").\nLocated_in(\"liver\", \"abdomen\").\n.decl Answer()\nAnswer() :- Located_in(\"brain\", body_part), body_part != \"torso\".\nAnswer() :- Located_in(\"heart\", \"torso\").\nAnswer() :- Located_in(\"liver\", \"torso\").\n.output Answer", "completions": [".decl Located_in(Organ:symbol, Body_part:symbol)\nLocated_in(\"brain\", \"head\").\nLocated_in(\"heart\", \"torso\").\nLocated_in(\"liver\", \"abdomen\").\n.decl Answer()\nAnswer() :- Located_in(\"brain\", body_part), body_part != \"torso\".\nAnswer() :- Located_in(\"heart\", \"torso\").\nAnswer() :- Located_in(\"liver\", \"torso\").\n.output Answer"]}
{"id": 584, "answer": false, "completion": ".decl Part_of(Event:symbol, Object:symbol)\nPart_of(\"Christmas celebrations\", \"reindeer\").\nPart_of(\"Christmas celebrations\", \"nativity scene\").\nPart_of(\"nativity scene\", \"donkey\").\n.decl Answer()\nAnswer() :- Part_of(event, \"Christmas celebrations\"), Part_of(\"nativity scene\", object).\n.output Answer", "completions": [".decl Part_of(Event:symbol, Object:symbol)\nPart_of(\"Christmas celebrations\", \"reindeer\").\nPart_of(\"Christmas celebrations\", \"nativity scene\").\nPart_of(\"nativity scene\", \"donkey\").\n.decl Answer()\nAnswer() :- Part_of(event, \"Christmas celebrations\"), Part_of(\"nativity scene\", object).\n.output Answer"]}
{"id": 585, "answer": true, "completion": ".decl Cause_of_death(Person:symbol, Cause:symbol)\nCause_of_death(\"Heath Ledger\", \"accidental overdose\").\n.decl Worked_on(Person:symbol, Project:symbol)\nWorked_on(\"Heath Ledger\", \"The Dark Knight\").\n.decl Answer()\nAnswer() :- Cause_of_death(\"Heath Ledger\", cause), Worked_on(\"Heath Ledger\", \"The Dark Knight\"), cause = \"accidental overdose\".\n.output Answer", "completions": [".decl Cause_of_death(Person:symbol, Cause:symbol)\nCause_of_death(\"Heath Ledger\", \"accidental overdose\").\n.decl Worked_on(Person:symbol, Project:symbol)\nWorked_on(\"Heath Ledger\", \"The Dark Knight\").\n.decl Answer()\nAnswer() :- Cause_of_death(\"Heath Ledger\", cause), Worked_on(\"Heath Ledger\", \"The Dark Knight\"), cause = \"accidental overdose\".\n.output Answer"]}
{"id": 586, "answer": true, "completion": ".decl Lived_in_time(Animal:symbol, Time:symbol)\nLived_in_time(\"polar bear\", \"modern times\").\nLived_in_time(\"ancient greece\", \"ancient times\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"polar bear\", time1), Lived_in_time(\"ancient greece\", time2), time1 != time2.\n.output Answer", "completions": [".decl Lived_in_time(Animal:symbol, Time:symbol)\nLived_in_time(\"polar bear\", \"modern times\").\nLived_in_time(\"ancient greece\", \"ancient times\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"polar bear\", time1), Lived_in_time(\"ancient greece\", time2), time1 != time2.\n.output Answer"]}
{"id": 587, "answer": true, "completion": ".decl Completed(Event:symbol, Year:float)\nCompleted(\"World Trade Center\", 1973).\n.decl Exists_since(Object:symbol, Year:float)\nExists_since(\"Moon Jae-in's residence\", 2001).\n.decl Answer()\nAnswer() :- Exists_since(\"Moon Jae-in's residence\", year1), Completed(\"World Trade Center\", year2), year1 >= year2.\n.output Answer", "completions": [".decl Completed(Event:symbol, Year:float)\nCompleted(\"World Trade Center\", 1973).\n.decl Exists_since(Object:symbol, Year:float)\nExists_since(\"Moon Jae-in's residence\", 2001).\n.decl Answer()\nAnswer() :- Exists_since(\"Moon Jae-in's residence\", year1), Completed(\"World Trade Center\", year2), year1 >= year2.\n.output Answer"]}
{"id": 588, "answer": false, "completion": ".decl Can_survive(Environment:symbol, Equipment:symbol)\nCan_survive(\"vacuum\", \"space suit\").\nCan_survive(\"atmosphere\", \"parachute\").\n.decl Answer()\nAnswer() :- Can_survive(\"vacuum\", equipment), Can_survive(\"atmosphere\", equipment).\n.output Answer", "completions": [".decl Can_survive(Environment:symbol, Equipment:symbol)\nCan_survive(\"vacuum\", \"space suit\").\nCan_survive(\"atmosphere\", \"parachute\").\n.decl Answer()\nAnswer() :- Can_survive(\"vacuum\", equipment), Can_survive(\"atmosphere\", equipment).\n.output Answer"]}
{"id": 589, "answer": true, "completion": ".decl Has_n_seats(Court:symbol, N_seats:float)\nHas_n_seats(\"Supreme Court\", 9).\n.decl Has_n_PM_since_year(Country:symbol, Year:float, N_PM:float)\nHas_n_PM_since_year(\"United Kingdom\", 1952, 14).\n.decl Answer()\nAnswer() :- Has_n_seats(\"Supreme Court\", n_seats), Has_n_PM_since_year(\"United Kingdom\", 1952, n_PM), n_seats >= n_PM.\n.output Answer", "completions": [".decl Has_n_seats(Court:symbol, N_seats:float)\nHas_n_seats(\"Supreme Court\", 9).\n.decl Has_n_PM_since_year(Country:symbol, Year:float, N_PM:float)\nHas_n_PM_since_year(\"United Kingdom\", 1952, 14).\n.decl Answer()\nAnswer() :- Has_n_seats(\"Supreme Court\", n_seats), Has_n_PM_since_year(\"United Kingdom\", 1952, n_PM), n_seats >= n_PM.\n.output Answer"]}
{"id": 590, "answer": false, "completion": ".decl Considers(Person:symbol, Title:symbol)\nConsiders(\"leader of Heaven's Gate\", \"prophet\").\n.decl Answer()\nAnswer() :- Considers(\"leader of Heaven's Gate\", \"prophet\").\n.output Answer", "completions": [".decl Considers(Person:symbol, Title:symbol)\nConsiders(\"leader of Heaven's Gate\", \"prophet\").\n.decl Answer()\nAnswer() :- Considers(\"leader of Heaven's Gate\", \"prophet\").\n.output Answer"]}
{"id": 591, "answer": true, "completion": ".decl Participated_in_war(Region:symbol, War:symbol)\nParticipated_in_war(\"Angola\", \"Portuguese Colonial War\").\nParticipated_in_war(\"Mozambique\", \"Portuguese Colonial War\").\nParticipated_in_war(\"Guinea-Bissau\", \"Portuguese Colonial War\").\n.decl Has_official_language(Region:symbol, Language:symbol)\nHas_official_language(\"Angola\", \"Portuguese\").\nHas_official_language(\"Mozambique\", \"Portuguese\").\nHas_official_language(\"Guinea-Bissau\", \"Portuguese Creole\").\n.decl Answer()\nAnswer() :- Participated_in_war(region1, \"Portuguese Colonial War\"), !Has_official_language(region1, _).\nAnswer() :- Participated_in_war(region2, \"Portuguese Colonial War\"), Has_official_language(region2, language), Participated_in_war(region3, \"Portuguese Colonial War\"), Has_official_language(region3, language), region2 != region3.\n.output Answer", "completions": [".decl Participated_in_war(Region:symbol, War:symbol)\nParticipated_in_war(\"Angola\", \"Portuguese Colonial War\").\nParticipated_in_war(\"Mozambique\", \"Portuguese Colonial War\").\nParticipated_in_war(\"Guinea-Bissau\", \"Portuguese Colonial War\").\n.decl Has_official_language(Region:symbol, Language:symbol)\nHas_official_language(\"Angola\", \"Portuguese\").\nHas_official_language(\"Mozambique\", \"Portuguese\").\nHas_official_language(\"Guinea-Bissau\", \"Portuguese Creole\").\n.decl Answer()\nAnswer() :- Participated_in_war(region1, \"Portuguese Colonial War\"), !Has_official_language(region1, _).\nAnswer() :- Participated_in_war(region2, \"Portuguese Colonial War\"), Has_official_language(region2, language), Participated_in_war(region3, \"Portuguese Colonial War\"), Has_official_language(region3, language), region2 != region3.\n.output Answer"]}
{"id": 592, "answer": false, "completion": ".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"John Smith\", \"Amtrak\").\nWorks_for(\"Jane Doe\", \"Union Pacific\").\n.decl Broadcasts_on(Channel:symbol, Network:symbol)\nBroadcasts_on(\"TNT\", \"Turner Broadcasting System\").\nBroadcasts_on(\"ABC\", \"American Broadcasting Company\").\n.decl Answer()\nAnswer() :- Works_for(person, \"Amtrak\"), Broadcasts_on(\"TNT\", network), person != \"John Smith\".\n.output Answer", "completions": [".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"John Smith\", \"Amtrak\").\nWorks_for(\"Jane Doe\", \"Union Pacific\").\n.decl Broadcasts_on(Channel:symbol, Network:symbol)\nBroadcasts_on(\"TNT\", \"Turner Broadcasting System\").\nBroadcasts_on(\"ABC\", \"American Broadcasting Company\").\n.decl Answer()\nAnswer() :- Works_for(person, \"Amtrak\"), Broadcasts_on(\"TNT\", network), person != \"John Smith\".\n.output Answer"]}
{"id": 593, "answer": true, "completion": ".decl Is_part_of(Organization_A:symbol, Organization_B:symbol)\nIs_part_of(\"Department of Defense\", \"United States government\").\nIs_part_of(\"CIA\", \"United States government\").\n.decl Answer()\nAnswer() :- Is_part_of(\"CIA\", organization), Is_part_of(organization, \"Department of Defense\").\n.output Answer", "completions": [".decl Is_part_of(Organization_A:symbol, Organization_B:symbol)\nIs_part_of(\"Department of Defense\", \"United States government\").\nIs_part_of(\"CIA\", \"United States government\").\n.decl Answer()\nAnswer() :- Is_part_of(\"CIA\", organization), Is_part_of(organization, \"Department of Defense\").\n.output Answer"]}
{"id": 594, "answer": true, "completion": ".decl Has_n_humps(Animal:symbol, N_humps:float)\nHas_n_humps(\"Bactrian Camel\", 2).\nHas_n_humps(\"Dromedary Camel\", 1).\nHas_n_humps(\"Llama\", 0).\n.decl Answer()\nAnswer() :- Has_n_humps(animal1, n_humps1), Has_n_humps(animal2, n_humps2), animal1 != animal2, n_humps1 < n_humps2.\n.output Answer", "completions": [".decl Has_n_humps(Animal:symbol, N_humps:float)\nHas_n_humps(\"Bactrian Camel\", 2).\nHas_n_humps(\"Dromedary Camel\", 1).\nHas_n_humps(\"Llama\", 0).\n.decl Answer()\nAnswer() :- Has_n_humps(animal1, n_humps1), Has_n_humps(animal2, n_humps2), animal1 != animal2, n_humps1 < n_humps2.\n.output Answer"]}
{"id": 595, "answer": false, "completion": ".decl Worries_about(Animal:symbol, Event:symbol)\nWorries_about(\"German Shepherd\", \"loud noises\").\n.decl Answer()\nAnswer() :- Worries_about(\"German Shepherd\", \"Abitur\").\n.output Answer", "completions": [".decl Worries_about(Animal:symbol, Event:symbol)\nWorries_about(\"German Shepherd\", \"loud noises\").\n.decl Answer()\nAnswer() :- Worries_about(\"German Shepherd\", \"Abitur\").\n.output Answer"]}
{"id": 596, "answer": false, "completion": ".decl Enlisted(Person:symbol, Army:symbol)\nEnlisted(\"John Smith\", \"Union Army\").\nEnlisted(\"Jane Doe\", \"Confederate States Army\").\n.decl Answer()\nAnswer() :- Enlisted(person, \"Confederate States Army\"), person contains \"American\".\n.output Answer", "completions": [".decl Enlisted(Person:symbol, Army:symbol)\nEnlisted(\"John Smith\", \"Union Army\").\nEnlisted(\"Jane Doe\", \"Confederate States Army\").\n.decl Answer()\nAnswer() :- Enlisted(person, \"Confederate States Army\"), person contains \"American\".\n.output Answer"]}
{"id": 597, "answer": false, "completion": ".decl Has_format(TV_series:symbol, Format:symbol)\nHas_format(\"James Bond\", \"film\").\nHas_format(\"Doctor Who\", \"TV show\").\n.decl Answer()\nAnswer() :- Has_format(\"James Bond\", format), Has_format(\"Doctor Who\", format).\n.output Answer", "completions": [".decl Has_format(TV_series:symbol, Format:symbol)\nHas_format(\"James Bond\", \"film\").\nHas_format(\"Doctor Who\", \"TV show\").\n.decl Answer()\nAnswer() :- Has_format(\"James Bond\", format), Has_format(\"Doctor Who\", format).\n.output Answer"]}
{"id": 598, "answer": true, "completion": ".decl Influences(Technology:symbol, Field:symbol)\nInfluences(\"compact discs\", \"music\").\nInfluences(\"computer gaming\", \"technology\").\n.decl Answer()\nAnswer() :- Influences(\"compact discs\", field1), Influences(\"computer gaming\", field2), field1 = field2.\n.output Answer", "completions": [".decl Influences(Technology:symbol, Field:symbol)\nInfluences(\"compact discs\", \"music\").\nInfluences(\"computer gaming\", \"technology\").\n.decl Answer()\nAnswer() :- Influences(\"compact discs\", field1), Influences(\"computer gaming\", field2), field1 = field2.\n.output Answer"]}
{"id": 599, "answer": true, "completion": ".decl Is_native_to_plant(Plant:symbol, Continent:symbol)\nIs_native_to_plant(\"potato\", \"South America\").\nIs_native_to_plant(\"potato\", \"Central America\").\nIs_native_to_plant(\"potato\", \"North America\").\nIs_native_to_plant(\"potato\", \"Europe\").\n.decl Answer()\nAnswer() :- Is_native_to_plant(\"potato\", \"Europe\").\n.output Answer", "completions": [".decl Is_native_to_plant(Plant:symbol, Continent:symbol)\nIs_native_to_plant(\"potato\", \"South America\").\nIs_native_to_plant(\"potato\", \"Central America\").\nIs_native_to_plant(\"potato\", \"North America\").\nIs_native_to_plant(\"potato\", \"Europe\").\n.decl Answer()\nAnswer() :- Is_native_to_plant(\"potato\", \"Europe\").\n.output Answer"]}
{"id": 600, "answer": true, "completion": ".decl Contains(Mixture:symbol, Ingredient:symbol)\nContains(\"vinegar pickled cucumbers\", \"cucumbers\").\nContains(\"vinegar pickled cucumbers\", \"vinegar\").\nContains(\"vinegar pickled cucumbers\", \"salt\").\nContains(\"vinegar pickled cucumbers\", \"dill\").\nContains(\"vinegar pickled cucumbers\", \"garlic\").\nContains(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Contains(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.output Answer", "completions": [".decl Contains(Mixture:symbol, Ingredient:symbol)\nContains(\"vinegar pickled cucumbers\", \"cucumbers\").\nContains(\"vinegar pickled cucumbers\", \"vinegar\").\nContains(\"vinegar pickled cucumbers\", \"salt\").\nContains(\"vinegar pickled cucumbers\", \"dill\").\nContains(\"vinegar pickled cucumbers\", \"garlic\").\nContains(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.decl Answer()\nAnswer() :- Contains(\"vinegar pickled cucumbers\", \"lactobacillus\").\n.output Answer"]}
{"id": 601, "answer": false, "completion": ".decl Recorded_in_format(Event:symbol, Format:symbol)\nRecorded_in_format(\"George Washington's speeches\", \"none\").\n.decl Invented(Format:symbol, Year:float)\nInvented(\"compact disc\", 1982).\n.decl Answer()\nAnswer() :- Recorded_in_format(\"George Washington's speeches\", format1), Invented(format1, year1), Invented(\"compact disc\", year2), year1 <= year2.\n.output Answer", "completions": [".decl Recorded_in_format(Event:symbol, Format:symbol)\nRecorded_in_format(\"George Washington's speeches\", \"none\").\n.decl Invented(Format:symbol, Year:float)\nInvented(\"compact disc\", 1982).\n.decl Answer()\nAnswer() :- Recorded_in_format(\"George Washington's speeches\", format1), Invented(format1, year1), Invented(\"compact disc\", year2), year1 <= year2.\n.output Answer"]}
{"id": 602, "answer": false, "completion": ".decl Is_innocuous(Food:symbol)\n!Is_innocuous(\"shoe soup\").\n.decl Answer()\nAnswer() :- Is_innocuous(food), food != \"shoe soup\".\n.output Answer", "completions": [".decl Is_innocuous(Food:symbol)\n!Is_innocuous(\"shoe soup\").\n.decl Answer()\nAnswer() :- Is_innocuous(food), food != \"shoe soup\".\n.output Answer"]}
{"id": 603, "answer": false, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Moscow Kremlin\", 27500).\nHas_area(\"Disney Land\", 510000).\n.decl Answer()\nAnswer() :- Has_area(\"Moscow Kremlin\", area1), Has_area(\"Disney Land\", area2), area1 <= area2.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Moscow Kremlin\", 27500).\nHas_area(\"Disney Land\", 510000).\n.decl Answer()\nAnswer() :- Has_area(\"Moscow Kremlin\", area1), Has_area(\"Disney Land\", area2), area1 <= area2.\n.output Answer"]}
{"id": 604, "answer": false, "completion": ".decl Performs_with(Musician1:symbol, Musician2:symbol)\nPerforms_with(\"Robert Plant\", \"Jimmy Page\").\nPerforms_with(\"Jimmy Page\", \"Ernest Chataway\").\n.decl Answer()\nAnswer() :- Performs_with(\"Robert Plant\", musician), Performs_with(musician, \"Ernest Chataway\").\n.output Answer", "completions": [".decl Performs_with(Musician1:symbol, Musician2:symbol)\nPerforms_with(\"Robert Plant\", \"Jimmy Page\").\nPerforms_with(\"Jimmy Page\", \"Ernest Chataway\").\n.decl Answer()\nAnswer() :- Performs_with(\"Robert Plant\", musician), Performs_with(musician, \"Ernest Chataway\").\n.output Answer"]}
{"id": 605, "answer": false, "completion": ".decl Liked_activity(Person:symbol, Activity:symbol)\nLiked_activity(\"P. G. Wodehouse\", \"writing\").\n.decl Answer()\nAnswer() :- !Liked_activity(\"P. G. Wodehouse\", \"internet\"), Liked_activity(\"P. G. Wodehouse\", \"childhood activities\").\n.output Answer", "completions": [".decl Liked_activity(Person:symbol, Activity:symbol)\nLiked_activity(\"P. G. Wodehouse\", \"writing\").\n.decl Answer()\nAnswer() :- !Liked_activity(\"P. G. Wodehouse\", \"internet\"), Liked_activity(\"P. G. Wodehouse\", \"childhood activities\").\n.output Answer"]}
{"id": 606, "answer": false, "completion": ".decl Ran_for_office(Person:symbol, Office:symbol)\nRan_for_office(\"Harvey Milk\", \"San Francisco Board of Supervisors\").\nRan_for_office(\"Harvey Milk\", \"California State Assembly\").\n.decl Answer()\nAnswer() :- Ran_for_office(\"Harvey Milk\", \"California Governor\").\n.output Answer", "completions": [".decl Ran_for_office(Person:symbol, Office:symbol)\nRan_for_office(\"Harvey Milk\", \"San Francisco Board of Supervisors\").\nRan_for_office(\"Harvey Milk\", \"California State Assembly\").\n.decl Answer()\nAnswer() :- Ran_for_office(\"Harvey Milk\", \"California Governor\").\n.output Answer"]}
{"id": 607, "answer": true, "completion": ".decl Prefers(Person:symbol, Object:symbol)\nPrefers(\"vegan\", \"natural bongo drum\").\n.decl Made_of(Object:symbol, Material:symbol)\nMade_of(\"natural bongo drum\", \"wood\").\nMade_of(\"synthetic bongo drum\", \"plastic\").\n.decl Answer()\nAnswer() :- Prefers(\"vegan\", object1), Made_of(object1, material1), Made_of(\"natural bongo drum\", material2), material1 = material2.\n.output Answer", "completions": [".decl Prefers(Person:symbol, Object:symbol)\nPrefers(\"vegan\", \"natural bongo drum\").\n.decl Made_of(Object:symbol, Material:symbol)\nMade_of(\"natural bongo drum\", \"wood\").\nMade_of(\"synthetic bongo drum\", \"plastic\").\n.decl Answer()\nAnswer() :- Prefers(\"vegan\", object1), Made_of(object1, material1), Made_of(\"natural bongo drum\", material2), material1 = material2.\n.output Answer"]}
{"id": 608, "answer": true, "completion": ".decl Bartender(Person:symbol)\nBartender(\"John Smith\").\n.decl Responsible(Person:symbol)\nResponsible(\"John Smith\").\n.decl Knows(Person1:symbol, Person2:symbol)\nKnows(\"John Smith\", \"Millie Bobby Brown\").\n.decl Answer()\nAnswer() :- Bartender(person), Responsible(person), Knows(person, \"Millie Bobby Brown\").\n.output Answer", "completions": [".decl Bartender(Person:symbol)\nBartender(\"John Smith\").\n.decl Responsible(Person:symbol)\nResponsible(\"John Smith\").\n.decl Knows(Person1:symbol, Person2:symbol)\nKnows(\"John Smith\", \"Millie Bobby Brown\").\n.decl Answer()\nAnswer() :- Bartender(person), Responsible(person), Knows(person, \"Millie Bobby Brown\").\n.output Answer"]}
{"id": 609, "answer": false, "completion": ".decl Is_related_to(Species_A:symbol, Species_B:symbol)\nIs_related_to(\"human\", \"gorilla\").\nIs_related_to(\"gorilla\", \"human\").\n.decl Answer()\nAnswer() :- Is_related_to(\"human\", species), Is_related_to(species, \"gorilla\").\n.output Answer", "completions": [".decl Is_related_to(Species_A:symbol, Species_B:symbol)\nIs_related_to(\"human\", \"gorilla\").\nIs_related_to(\"gorilla\", \"human\").\n.decl Answer()\nAnswer() :- Is_related_to(\"human\", species), Is_related_to(species, \"gorilla\").\n.output Answer"]}
{"id": 610, "answer": true, "completion": ".decl Book_profit(Book:symbol, Profit:float)\nBook_profit(\"The Jungle Book\", 100).\n.decl Company_profit(Company:symbol, Profit:float)\nCompany_profit(\"Disney\", 80).\nCompany_profit(\"Paramount Pictures\", 20).\n.decl Answer()\nAnswer() :- Book_profit(\"The Jungle Book\", profit1), Company_profit(\"Disney\", profit2), profit2 > profit1/2.\n.output Answer", "completions": [".decl Book_profit(Book:symbol, Profit:float)\nBook_profit(\"The Jungle Book\", 100).\n.decl Company_profit(Company:symbol, Profit:float)\nCompany_profit(\"Disney\", 80).\nCompany_profit(\"Paramount Pictures\", 20).\n.decl Answer()\nAnswer() :- Book_profit(\"The Jungle Book\", profit1), Company_profit(\"Disney\", profit2), profit2 > profit1/2.\n.output Answer"]}
{"id": 611, "answer": false, "completion": ".decl Agrees_with(Person1:symbol, Person2:symbol)\nAgrees_with(\"Lamarck\", \"Darwin\").\n.decl Answer()\nAnswer() :- Agrees_with(\"Lamarck\", \"Darwin\").\n.output Answer", "completions": [".decl Agrees_with(Person1:symbol, Person2:symbol)\nAgrees_with(\"Lamarck\", \"Darwin\").\n.decl Answer()\nAnswer() :- Agrees_with(\"Lamarck\", \"Darwin\").\n.output Answer"]}
{"id": 612, "answer": true, "completion": ".decl Can_reproduce(Person:symbol)\nCan_reproduce(\"John\").\nCan_reproduce(\"Jane\").\n.decl Is_parent(Person:symbol)\nIs_parent(\"John\").\nIs_parent(\"Mary\").\n.decl Answer()\nAnswer() :- !Can_reproduce(person), Is_parent(person).\n.output Answer", "completions": [".decl Can_reproduce(Person:symbol)\nCan_reproduce(\"John\").\nCan_reproduce(\"Jane\").\n.decl Is_parent(Person:symbol)\nIs_parent(\"John\").\nIs_parent(\"Mary\").\n.decl Answer()\nAnswer() :- !Can_reproduce(person), Is_parent(person).\n.output Answer"]}
{"id": 613, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"guitarist\", \"finger dexterity\").\nHas_skill(\"guitarist\", \"pain tolerance\").\n.decl Above_average(Skill:symbol)\nAbove_average(\"pain tolerance\").\n.decl Answer()\nAnswer() :- Has_skill(\"guitarist\", skill), Above_average(skill).\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"guitarist\", \"finger dexterity\").\nHas_skill(\"guitarist\", \"pain tolerance\").\n.decl Above_average(Skill:symbol)\nAbove_average(\"pain tolerance\").\n.decl Answer()\nAnswer() :- Has_skill(\"guitarist\", skill), Above_average(skill).\n.output Answer"]}
{"id": 614, "answer": false, "completion": ".decl Lifespan(Person:symbol, Age:float)\nLifespan(\"Methuselah\", 969).\n.decl Record(Category:symbol, Record:float)\nRecord(\"longest lifespan\", 122.45).\n.decl Answer()\nAnswer() :- Lifespan(\"Methuselah\", age), Record(\"longest lifespan\", record), age > record.\n.output Answer", "completions": [".decl Lifespan(Person:symbol, Age:float)\nLifespan(\"Methuselah\", 969).\n.decl Record(Category:symbol, Record:float)\nRecord(\"longest lifespan\", 122.45).\n.decl Answer()\nAnswer() :- Lifespan(\"Methuselah\", age), Record(\"longest lifespan\", record), age > record.\n.output Answer"]}
{"id": 615, "answer": false, "completion": ".decl Exchange_rate(Currency:symbol, Rate:float)\nExchange_rate(\"USD\", 1).\nExchange_rate(\"EUR\", 1.12).\nExchange_rate(\"GBP\", 1.24).\n.decl Is_billionaire(Person:symbol)\nIs_billionaire(\"Jeff Bezos\").\nIs_billionaire(\"Bill Gates\").\nIs_billionaire(\"Mark Zuckerberg\").\n.decl Has_net_worth(Person:symbol, Net_worth:float, Currency:symbol)\nHas_net_worth(\"Jeff Bezos\", 131000000000, \"USD\").\nHas_net_worth(\"Bill Gates\", 98000000000, \"USD\").\nHas_net_worth(\"Mark Zuckerberg\", 54000000000, \"USD\").\n.decl Answer()\nAnswer() :- Has_net_worth(person, net_worth, currency), Exchange_rate(currency, rate), net_worth * rate >= 1000000000, Is_billionaire(person).\n.output Answer", "completions": [".decl Exchange_rate(Currency:symbol, Rate:float)\nExchange_rate(\"USD\", 1).\nExchange_rate(\"EUR\", 1.12).\nExchange_rate(\"GBP\", 1.24).\n.decl Is_billionaire(Person:symbol)\nIs_billionaire(\"Jeff Bezos\").\nIs_billionaire(\"Bill Gates\").\nIs_billionaire(\"Mark Zuckerberg\").\n.decl Has_net_worth(Person:symbol, Net_worth:float, Currency:symbol)\nHas_net_worth(\"Jeff Bezos\", 131000000000, \"USD\").\nHas_net_worth(\"Bill Gates\", 98000000000, \"USD\").\nHas_net_worth(\"Mark Zuckerberg\", 54000000000, \"USD\").\n.decl Answer()\nAnswer() :- Has_net_worth(person, net_worth, currency), Exchange_rate(currency, rate), net_worth * rate >= 1000000000, Is_billionaire(person).\n.output Answer"]}
{"id": 616, "answer": true, "completion": ".decl Knows(Person:symbol, Fact:symbol)\nKnows(\"Jonathan Larson\", \"HIV\").\n.decl FanOf(Person:symbol, Celebrity:symbol)\nFanOf(\"John\", \"Jonathan Larson\").\n.decl Answer()\nAnswer() :- FanOf(person, \"Jonathan Larson\"), !Knows(person, \"HIV\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Fact:symbol)\nKnows(\"Jonathan Larson\", \"HIV\").\n.decl FanOf(Person:symbol, Celebrity:symbol)\nFanOf(\"John\", \"Jonathan Larson\").\n.decl Answer()\nAnswer() :- FanOf(person, \"Jonathan Larson\"), !Knows(person, \"HIV\").\n.output Answer"]}
{"id": 617, "answer": true, "completion": ".decl Has_origin_name(Month:symbol, Origin:symbol)\nHas_origin_name(\"June\", \"Roman mythology\").\nHas_origin_name(\"June\", \"Greek mythology\").\n.decl Answer()\nAnswer() :- Has_origin_name(\"June\", origin).\n.output Answer", "completions": [".decl Has_origin_name(Month:symbol, Origin:symbol)\nHas_origin_name(\"June\", \"Roman mythology\").\nHas_origin_name(\"June\", \"Greek mythology\").\n.decl Answer()\nAnswer() :- Has_origin_name(\"June\", origin).\n.output Answer"]}
{"id": 618, "answer": true, "completion": ".decl Has_feature(Plant:symbol, Feature:symbol)\nHas_feature(\"rosemary\", \"needle-like leaves\").\nHas_feature(\"lavender\", \"fragrant leaves\").\n.decl Answer()\nAnswer() :- Has_feature(\"rosemary\", feature1), Has_feature(\"lavender\", feature2), feature1 = \"needle-like leaves\", feature2 = \"fragrant leaves\".\n.output Answer", "completions": [".decl Has_feature(Plant:symbol, Feature:symbol)\nHas_feature(\"rosemary\", \"needle-like leaves\").\nHas_feature(\"lavender\", \"fragrant leaves\").\n.decl Answer()\nAnswer() :- Has_feature(\"rosemary\", feature1), Has_feature(\"lavender\", feature2), feature1 = \"needle-like leaves\", feature2 = \"fragrant leaves\".\n.output Answer"]}
{"id": 619, "answer": true, "completion": ".decl Needs_color(Object:symbol, Color:symbol)\nNeeds_color(\"sudoku\", \"no\").\n.decl Answer()\nAnswer() :- Needs_color(\"sudoku\", color), color = \"no\".\n.output Answer", "completions": [".decl Needs_color(Object:symbol, Color:symbol)\nNeeds_color(\"sudoku\", \"no\").\n.decl Answer()\nAnswer() :- Needs_color(\"sudoku\", color), color = \"no\".\n.output Answer"]}
{"id": 620, "answer": false, "completion": ".decl Is_on_coast(City:symbol, Coast:symbol)\nIs_on_coast(\"Miami\", \"East Coast\").\n.decl Answer()\nAnswer() :- Is_on_coast(\"Miami\", \"West Coast\").\n.output Answer", "completions": [".decl Is_on_coast(City:symbol, Coast:symbol)\nIs_on_coast(\"Miami\", \"East Coast\").\n.decl Answer()\nAnswer() :- Is_on_coast(\"Miami\", \"West Coast\").\n.output Answer"]}
{"id": 621, "answer": false, "completion": ".decl Education(Person:symbol, Degree:symbol)\nEducation(\"Stephen King\", \"Bachelor's degree in English\").\n.decl Experience(Person:symbol, Years:float)\nExperience(\"Stephen King\", 0).\n.decl Meets_requirement(Person:symbol)\nMeets_requirement(person) :- Education(person, \"Bachelor's degree in science or engineering\"), Experience(person, years), years >= 3.\n.decl Answer()\nAnswer() :- Meets_requirement(\"Stephen King\").\n.output Answer", "completions": [".decl Education(Person:symbol, Degree:symbol)\nEducation(\"Stephen King\", \"Bachelor's degree in English\").\n.decl Experience(Person:symbol, Years:float)\nExperience(\"Stephen King\", 0).\n.decl Meets_requirement(Person:symbol)\nMeets_requirement(person) :- Education(person, \"Bachelor's degree in science or engineering\"), Experience(person, years), years >= 3.\n.decl Answer()\nAnswer() :- Meets_requirement(\"Stephen King\").\n.output Answer"]}
{"id": 622, "answer": false, "completion": ".decl Has_longevity(Person:symbol, Longevity:float)\nHas_longevity(\"Richard III\", 32).\nHas_longevity(\"Richard III's father\", 42).\n.decl Answer()\nAnswer() :- Has_longevity(\"Richard III\", longevity1), Has_longevity(\"Richard III's father\", longevity2), longevity2 > longevity1.\n.output Answer", "completions": [".decl Has_longevity(Person:symbol, Longevity:float)\nHas_longevity(\"Richard III\", 32).\nHas_longevity(\"Richard III's father\", 42).\n.decl Answer()\nAnswer() :- Has_longevity(\"Richard III\", longevity1), Has_longevity(\"Richard III's father\", longevity2), longevity2 > longevity1.\n.output Answer"]}
{"id": 623, "answer": false, "completion": ".decl Contains(Ingredient:symbol, Drink:symbol)\nContains(\"ginger\", \"chai latte\").\nContains(\"lemon\", \"Starbucks passion tea\").\nContains(\"passionfruit\", \"Starbucks passion tea\").\nContains(\"hibiscus\", \"Starbucks passion tea\").\n.decl Answer()\nAnswer() :- Contains(\"ginger\", drink), Contains(\"Starbucks passion tea\", drink).\n.output Answer", "completions": [".decl Contains(Ingredient:symbol, Drink:symbol)\nContains(\"ginger\", \"chai latte\").\nContains(\"lemon\", \"Starbucks passion tea\").\nContains(\"passionfruit\", \"Starbucks passion tea\").\nContains(\"hibiscus\", \"Starbucks passion tea\").\n.decl Answer()\nAnswer() :- Contains(\"ginger\", drink), Contains(\"Starbucks passion tea\", drink).\n.output Answer"]}
{"id": 624, "answer": true, "completion": ".decl Belongs_to_group(Person:symbol, Group:symbol)\nBelongs_to_group(\"Dustin Hoffman\", \"actors\").\nBelongs_to_group(\"actors\", \"B'nei Yisrael\").\n.decl Answer()\nAnswer() :- Belongs_to_group(\"Dustin Hoffman\", group), Belongs_to_group(group, \"B'nei Yisrael\").\n.output Answer", "completions": [".decl Belongs_to_group(Person:symbol, Group:symbol)\nBelongs_to_group(\"Dustin Hoffman\", \"actors\").\nBelongs_to_group(\"actors\", \"B'nei Yisrael\").\n.decl Answer()\nAnswer() :- Belongs_to_group(\"Dustin Hoffman\", group), Belongs_to_group(group, \"B'nei Yisrael\").\n.output Answer"]}
{"id": 625, "answer": false, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"1936 Summer Olympics\", 100000).\nHas_capacity(\"Superbowl\", 70000).\n.decl Answer()\nAnswer() :- Has_capacity(\"1936 Summer Olympics\", capacity1), Has_capacity(\"Superbowl\", capacity2), capacity2 > capacity1.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"1936 Summer Olympics\", 100000).\nHas_capacity(\"Superbowl\", 70000).\n.decl Answer()\nAnswer() :- Has_capacity(\"1936 Summer Olympics\", capacity1), Has_capacity(\"Superbowl\", capacity2), capacity2 > capacity1.\n.output Answer"]}
{"id": 626, "answer": true, "completion": ".decl Likes(Character:symbol, Food:symbol)\nLikes(\"Cookie Monster\", \"cookies\").\nLikes(\"Keebler Elves\", \"Keebler products\").\n.decl Answer()\nAnswer() :- Likes(\"Cookie Monster\", food), Likes(\"Keebler Elves\", food), food != \"cookies\".\n.output Answer", "completions": [".decl Likes(Character:symbol, Food:symbol)\nLikes(\"Cookie Monster\", \"cookies\").\nLikes(\"Keebler Elves\", \"Keebler products\").\n.decl Answer()\nAnswer() :- Likes(\"Cookie Monster\", food), Likes(\"Keebler Elves\", food), food != \"cookies\".\n.output Answer"]}
{"id": 627, "answer": false, "completion": ".decl Supports(Person:symbol, Belief:symbol)\nSupports(\"Billy Graham\", \"Christianity\").\n.decl Opposes(Person:symbol, Belief:symbol)\nOpposes(\"Billy Graham\", \"agnosticism\").\n.decl Answer()\nAnswer() :- Supports(\"Billy Graham\", belief), Opposes(\"Billy Graham\", belief2), belief != belief2.\n.output Answer", "completions": [".decl Supports(Person:symbol, Belief:symbol)\nSupports(\"Billy Graham\", \"Christianity\").\n.decl Opposes(Person:symbol, Belief:symbol)\nOpposes(\"Billy Graham\", \"agnosticism\").\n.decl Answer()\nAnswer() :- Supports(\"Billy Graham\", belief), Opposes(\"Billy Graham\", belief2), belief != belief2.\n.output Answer"]}
{"id": 628, "answer": false, "completion": ".decl Has_issue(Person:symbol, Issue:symbol)\nHas_issue(\"John\", \"fine motor control issues\").\n.decl Altered_layout(Layout:symbol)\nAltered_layout(\"Dvorak\").\n.decl Benefit(Person:symbol, Layout:symbol)\nBenefit(person, layout) :- Has_issue(person, issue), Altered_layout(layout).\n.decl Answer()\nAnswer() :- Benefit(\"John\", layout).\n.output Answer", "completions": [".decl Has_issue(Person:symbol, Issue:symbol)\nHas_issue(\"John\", \"fine motor control issues\").\n.decl Altered_layout(Layout:symbol)\nAltered_layout(\"Dvorak\").\n.decl Benefit(Person:symbol, Layout:symbol)\nBenefit(person, layout) :- Has_issue(person, issue), Altered_layout(layout).\n.decl Answer()\nAnswer() :- Benefit(\"John\", layout).\n.output Answer"]}
{"id": 629, "answer": false, "completion": ".decl In_season(Month:symbol, Season:symbol)\nIn_season(\"August\", \"winter\").\n.decl Answer()\nAnswer() :- In_season(\"August\", season), season != \"winter\".\n.output !Answer()", "completions": [".decl In_season(Month:symbol, Season:symbol)\nIn_season(\"August\", \"winter\").\n.decl Answer()\nAnswer() :- In_season(\"August\", season), season != \"winter\".\n.output !Answer()"]}
{"id": 630, "answer": true, "completion": ".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"room\", \"walls\").\nHas_feature(\"room\", \"ceiling\").\nHas_feature(\"room\", \"floor\").\nHas_feature(\"room\", \"door\").\nHas_feature(\"room\", \"window\").\nHas_feature(\"room\", \"light fixture\").\nHas_feature(\"room\", \"outlet\").\nHas_feature(\"room\", \"ventilation system\").\nHas_feature(\"room\", \"speaker\").\nHas_feature(\"room\", \"microphone\").\nHas_feature(\"room\", \"motion sensor\").\nHas_feature(\"room\", \"temperature sensor\").\nHas_feature(\"room\", \"humidity sensor\").\nHas_feature(\"room\", \"pressure sensor\").\nHas_feature(\"room\", \"proximity sensor\").\nHas_feature(\"room\", \"infrared sensor\").\nHas_feature(\"room\", \"ultrasonic sensor\").\nHas_feature(\"room\", \"magnetic sensor\").\nHas_feature(\"room\", \"vibration sensor\").\nHas_feature(\"room\", \"gas sensor\").\nHas_feature(\"room\", \"smoke detector\").\nHas_feature(\"room\", \"fire alarm\").\nHas_feature(\"room\", \"sprinkler system\").\nHas_feature(\"room\", \"security system\").\nHas_feature(\"room\", \"access control system\").\nHas_feature(\"room\", \"intercom system\").\nHas_feature(\"room\", \"network connection\").\nHas_feature(\"room\", \"power outlet\").\nHas_feature(\"room\", \"furniture\").\nHas_feature(\"room\", \"decorations\").\nHas_feature(\"room\", \"plants\").\nHas_feature(\"room\", \"pets\").\n.decl Answer()\nAnswer() :- Has_feature(\"room\", feature), feature != \"camera\", feature != \"new item\".\n.output Answer", "completions": [".decl Has_feature(Object:symbol, Feature:symbol)\nHas_feature(\"room\", \"walls\").\nHas_feature(\"room\", \"ceiling\").\nHas_feature(\"room\", \"floor\").\nHas_feature(\"room\", \"door\").\nHas_feature(\"room\", \"window\").\nHas_feature(\"room\", \"light fixture\").\nHas_feature(\"room\", \"outlet\").\nHas_feature(\"room\", \"ventilation system\").\nHas_feature(\"room\", \"speaker\").\nHas_feature(\"room\", \"microphone\").\nHas_feature(\"room\", \"motion sensor\").\nHas_feature(\"room\", \"temperature sensor\").\nHas_feature(\"room\", \"humidity sensor\").\nHas_feature(\"room\", \"pressure sensor\").\nHas_feature(\"room\", \"proximity sensor\").\nHas_feature(\"room\", \"infrared sensor\").\nHas_feature(\"room\", \"ultrasonic sensor\").\nHas_feature(\"room\", \"magnetic sensor\").\nHas_feature(\"room\", \"vibration sensor\").\nHas_feature(\"room\", \"gas sensor\").\nHas_feature(\"room\", \"smoke detector\").\nHas_feature(\"room\", \"fire alarm\").\nHas_feature(\"room\", \"sprinkler system\").\nHas_feature(\"room\", \"security system\").\nHas_feature(\"room\", \"access control system\").\nHas_feature(\"room\", \"intercom system\").\nHas_feature(\"room\", \"network connection\").\nHas_feature(\"room\", \"power outlet\").\nHas_feature(\"room\", \"furniture\").\nHas_feature(\"room\", \"decorations\").\nHas_feature(\"room\", \"plants\").\nHas_feature(\"room\", \"pets\").\n.decl Answer()\nAnswer() :- Has_feature(\"room\", feature), feature != \"camera\", feature != \"new item\".\n.output Answer"]}
{"id": 631, "answer": true, "completion": ".decl Receives_advice(Person:symbol, Advice:symbol)\nReceives_advice(\"Youtube viewers\", \"unsolicited audiobook advice\").\n.decl Frequency(Event:symbol, Frequency:symbol)\nFrequency(\"unsolicited audiobook advice\", \"often\").\n.decl Answer()\nAnswer() :- Receives_advice(\"Youtube viewers\", advice), Frequency(advice, \"often\").\n.output Answer", "completions": [".decl Receives_advice(Person:symbol, Advice:symbol)\nReceives_advice(\"Youtube viewers\", \"unsolicited audiobook advice\").\n.decl Frequency(Event:symbol, Frequency:symbol)\nFrequency(\"unsolicited audiobook advice\", \"often\").\n.decl Answer()\nAnswer() :- Receives_advice(\"Youtube viewers\", advice), Frequency(advice, \"often\").\n.output Answer"]}
{"id": 632, "answer": false, "completion": ".decl Lands_on_date(Vehicle:symbol, Date:symbol)\nLands_on_date(\"Columbia 11\", \"December 7, 1996\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Lands_on_date(\"Columbia 11\", date), In_season(month, \"winter\"), date contains month.\n.output Answer", "completions": [".decl Lands_on_date(Vehicle:symbol, Date:symbol)\nLands_on_date(\"Columbia 11\", \"December 7, 1996\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Lands_on_date(\"Columbia 11\", date), In_season(month, \"winter\"), date contains month.\n.output Answer"]}
{"id": 633, "answer": true, "completion": ".decl Reigns(King:symbol, Start_year:float, End_year:float)\nReigns(\"William the Conqueror\", 1066, 1087).\nReigns(\"Henry II\", 1154, 1189).\nReigns(\"Edward I\", 1272, 1307).\nReigns(\"Henry VIII\", 1509, 1547).\nReigns(\"Elizabeth I\", 1558, 1603).\n.decl Answer()\nAnswer() :- Reigns(king, start_year, end_year), start_year >= 500, end_year <= 1500, count(king) = 50.\n.output Answer", "completions": [".decl Reigns(King:symbol, Start_year:float, End_year:float)\nReigns(\"William the Conqueror\", 1066, 1087).\nReigns(\"Henry II\", 1154, 1189).\nReigns(\"Edward I\", 1272, 1307).\nReigns(\"Henry VIII\", 1509, 1547).\nReigns(\"Elizabeth I\", 1558, 1603).\n.decl Answer()\nAnswer() :- Reigns(king, start_year, end_year), start_year >= 500, end_year <= 1500, count(king) = 50.\n.output Answer"]}
{"id": 634, "answer": false, "completion": ".decl Requires(Object:symbol, Tool:symbol)\nRequires(\"frigate\", \"ropes\").\n.decl Answer()\nAnswer() :- Requires(\"frigate\", \"ropes\").\n.output Answer", "completions": [".decl Requires(Object:symbol, Tool:symbol)\nRequires(\"frigate\", \"ropes\").\n.decl Answer()\nAnswer() :- Requires(\"frigate\", \"ropes\").\n.output Answer"]}
{"id": 635, "answer": true, "completion": ".decl Sound_speed(Medium:symbol, Speed:float)\nSound_speed(\"air\", 343).\nSound_speed(\"vacuum\", 0).\n.decl Distance(Object:symbol, Distance:float)\nDistance(\"international space station\", 408000).\n.decl Answer()\nAnswer() :- Sound_speed(medium, speed), Distance(\"international space station\", distance), distance * speed > 20.\n.output Answer", "completions": [".decl Sound_speed(Medium:symbol, Speed:float)\nSound_speed(\"air\", 343).\nSound_speed(\"vacuum\", 0).\n.decl Distance(Object:symbol, Distance:float)\nDistance(\"international space station\", 408000).\n.decl Answer()\nAnswer() :- Sound_speed(medium, speed), Distance(\"international space station\", distance), distance * speed > 20.\n.output Answer"]}
{"id": 636, "answer": false, "completion": ".decl Treats(Doctor:symbol, Condition:symbol)\nTreats(\"dentist\", \"cavities\").\n.decl Answer()\nAnswer() :- Treats(\"dentist\", \"Bluetooth problems\").\n.output Answer (false)", "completions": [".decl Treats(Doctor:symbol, Condition:symbol)\nTreats(\"dentist\", \"cavities\").\n.decl Answer()\nAnswer() :- Treats(\"dentist\", \"Bluetooth problems\").\n.output Answer (false)"]}
{"id": 637, "answer": false, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"person1\", \"buffalo wings\").\n.decl Contains(Ingredient:symbol, Food:symbol)\nContains(\"capsaicin\", \"buffalo wings\").\n.decl Answer()\nAnswer() :- Likes(person, \"buffalo wings\"), !Contains(ingredient, \"buffalo wings\"), Contains(ingredient, \"capsaicin\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"person1\", \"buffalo wings\").\n.decl Contains(Ingredient:symbol, Food:symbol)\nContains(\"capsaicin\", \"buffalo wings\").\n.decl Answer()\nAnswer() :- Likes(person, \"buffalo wings\"), !Contains(ingredient, \"buffalo wings\"), Contains(ingredient, \"capsaicin\").\n.output Answer"]}
{"id": 638, "answer": false, "completion": ".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Wycheproof\", 148).\n.decl Has_difficulty(Mountain:symbol, Difficulty:symbol)\nHas_difficulty(\"Mount Wycheproof\", \"easy\").\n.decl Answer()\nAnswer() :- Has_height(\"Mount Wycheproof\", height), Has_difficulty(\"Mount Wycheproof\", difficulty), difficulty = \"easy\", height < 8848.\n.output Answer", "completions": [".decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Wycheproof\", 148).\n.decl Has_difficulty(Mountain:symbol, Difficulty:symbol)\nHas_difficulty(\"Mount Wycheproof\", \"easy\").\n.decl Answer()\nAnswer() :- Has_height(\"Mount Wycheproof\", height), Has_difficulty(\"Mount Wycheproof\", difficulty), difficulty = \"easy\", height < 8848.\n.output Answer"]}
{"id": 639, "answer": false, "completion": ".decl Located_in(Location:symbol, City:symbol)\nLocated_in(\"The Metropolitan Museum of Art\", \"New York City\").\nLocated_in(\"Tokyo\", \"Tokyo\").\n.decl Has_transportation_mode(Location:symbol, Mode:symbol)\nHas_transportation_mode(\"The Metropolitan Museum of Art\", \"taxi\").\n.decl Answer()\nAnswer() :- Located_in(\"The Metropolitan Museum of Art\", city1), Located_in(\"Tokyo\", city2), Has_transportation_mode(\"The Metropolitan Museum of Art\", mode), city1 = city2, mode = \"taxi\".\n.output Answer", "completions": [".decl Located_in(Location:symbol, City:symbol)\nLocated_in(\"The Metropolitan Museum of Art\", \"New York City\").\nLocated_in(\"Tokyo\", \"Tokyo\").\n.decl Has_transportation_mode(Location:symbol, Mode:symbol)\nHas_transportation_mode(\"The Metropolitan Museum of Art\", \"taxi\").\n.decl Answer()\nAnswer() :- Located_in(\"The Metropolitan Museum of Art\", city1), Located_in(\"Tokyo\", city2), Has_transportation_mode(\"The Metropolitan Museum of Art\", mode), city1 = city2, mode = \"taxi\".\n.output Answer"]}
{"id": 640, "answer": false, "completion": ".decl Oversees(Agency:symbol, Service:symbol)\nOversees(\"United States Department of Education\", \"migrant education program\").\n.decl Provides(Service:symbol, Benefit:symbol)\nProvides(\"migrant education program\", \"educational services for migrant children\").\nProvides(\"migrant education program\", \"support services for families of migrant children\").\nProvides(\"migrant education program\", \"advocacy for migrant children\").\n.decl Answer()\nAnswer() :- Oversees(\"United States Department of Education\", service), Provides(service, \"benefits for undocumented migrants\").\n.output Answer", "completions": [".decl Oversees(Agency:symbol, Service:symbol)\nOversees(\"United States Department of Education\", \"migrant education program\").\n.decl Provides(Service:symbol, Benefit:symbol)\nProvides(\"migrant education program\", \"educational services for migrant children\").\nProvides(\"migrant education program\", \"support services for families of migrant children\").\nProvides(\"migrant education program\", \"advocacy for migrant children\").\n.decl Answer()\nAnswer() :- Oversees(\"United States Department of Education\", service), Provides(service, \"benefits for undocumented migrants\").\n.output Answer"]}
{"id": 641, "answer": false, "completion": ".decl Needs_uniform(Job:symbol, N_uniforms:float)\nNeeds_uniform(\"mail carrier\", 2).\n.decl Answer()\nAnswer() :- Needs_uniform(\"mail carrier\", n_uniforms), n_uniforms > 1.\n.output Answer", "completions": [".decl Needs_uniform(Job:symbol, N_uniforms:float)\nNeeds_uniform(\"mail carrier\", 2).\n.decl Answer()\nAnswer() :- Needs_uniform(\"mail carrier\", n_uniforms), n_uniforms > 1.\n.output Answer"]}
{"id": 642, "answer": false, "completion": ".decl Age(Person:symbol, Years:float)\nAge(\"21 year old\", 21).\n.decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"21 year old\", \"doctorate\").\n.decl Answer()\nAnswer() :- Age(person, age), Has_degree(person, \"doctorate\"), age < 25, !.\n.output Answer", "completions": [".decl Age(Person:symbol, Years:float)\nAge(\"21 year old\", 21).\n.decl Has_degree(Person:symbol, Degree:symbol)\nHas_degree(\"21 year old\", \"doctorate\").\n.decl Answer()\nAnswer() :- Age(person, age), Has_degree(person, \"doctorate\"), age < 25, !.\n.output Answer"]}
{"id": 643, "answer": true, "completion": ".decl Can_perceive(Person:symbol, Sense:symbol)\nCan_perceive(\"Beethoven\", \"music\").\nCan_perceive(\"deaf people\", \"sound\").\n.decl Answer()\nAnswer() :- Can_perceive(\"Beethoven\", sense), !Can_perceive(\"deaf people\", sense).\n.output Answer", "completions": [".decl Can_perceive(Person:symbol, Sense:symbol)\nCan_perceive(\"Beethoven\", \"music\").\nCan_perceive(\"deaf people\", \"sound\").\n.decl Answer()\nAnswer() :- Can_perceive(\"Beethoven\", sense), !Can_perceive(\"deaf people\", sense).\n.output Answer"]}
{"id": 644, "answer": false, "completion": ".decl Born_on_date(Person:symbol, Child_number:float, Date:symbol)\nBorn_on_date(\"Aretha Franklin\", 1, \"January 22, 1955\").\nBorn_on_date(\"Aretha Franklin\", 2, \"January 28, 1964\").\n.decl Eligible_to_vote(Person:symbol, Age:float)\nEligible_to_vote(person, age) :- Born_on_date(person, child_number, date), age = 2022 - substring(date, -4) - if(substring(date, 0, 3) < \"Jan\", 1, 0).\n.decl Answer()\nAnswer() :- Eligible_to_vote(\"Aretha Franklin\", age), Born_on_date(\"Aretha Franklin\", child_number, date), substring(date, -4) < \"1964\", child_number = 2, age >= 18.\n.output Answer", "completions": [".decl Born_on_date(Person:symbol, Child_number:float, Date:symbol)\nBorn_on_date(\"Aretha Franklin\", 1, \"January 22, 1955\").\nBorn_on_date(\"Aretha Franklin\", 2, \"January 28, 1964\").\n.decl Eligible_to_vote(Person:symbol, Age:float)\nEligible_to_vote(person, age) :- Born_on_date(person, child_number, date), age = 2022 - substring(date, -4) - if(substring(date, 0, 3) < \"Jan\", 1, 0).\n.decl Answer()\nAnswer() :- Eligible_to_vote(\"Aretha Franklin\", age), Born_on_date(\"Aretha Franklin\", child_number, date), substring(date, -4) < \"1964\", child_number = 2, age >= 18.\n.output Answer"]}
{"id": 645, "answer": true, "completion": ".decl Contains_word(Word:symbol, Letter:symbol)\nContains_word(\"the\", \"t\").\nContains_word(\"the\", \"h\").\nContains_word(\"the\", \"e\").\nContains_word(\"be\", \"b\").\nContains_word(\"be\", \"e\").\n.decl Answer()\nAnswer() :- Contains_word(word1, \"t\"), Contains_word(word1, \"h\"), Contains_word(word1, \"e\"), Contains_word(word2, \"b\"), Contains_word(word2, \"e\"), word1 != word2.\n.output Answer", "completions": [".decl Contains_word(Word:symbol, Letter:symbol)\nContains_word(\"the\", \"t\").\nContains_word(\"the\", \"h\").\nContains_word(\"the\", \"e\").\nContains_word(\"be\", \"b\").\nContains_word(\"be\", \"e\").\n.decl Answer()\nAnswer() :- Contains_word(word1, \"t\"), Contains_word(word1, \"h\"), Contains_word(word1, \"e\"), Contains_word(word2, \"b\"), Contains_word(word2, \"e\"), word1 != word2.\n.output Answer"]}
{"id": 646, "answer": false, "completion": ".decl Language_ability(Animal:symbol, Ability:float)\nLanguage_ability(\"ant\", 0.5).\nLanguage_ability(\"ape\", 0.8).\n.decl Answer()\nAnswer() :- Language_ability(\"ant\", ability1), Language_ability(\"ape\", ability2), ability1 > ability2.\n.output Answer", "completions": [".decl Language_ability(Animal:symbol, Ability:float)\nLanguage_ability(\"ant\", 0.5).\nLanguage_ability(\"ape\", 0.8).\n.decl Answer()\nAnswer() :- Language_ability(\"ant\", ability1), Language_ability(\"ape\", ability2), ability1 > ability2.\n.output Answer"]}
{"id": 647, "answer": false, "completion": ".decl Breaks_down(Enzyme:symbol, Substance:symbol)\nBreaks_down(\"small intestine\", \"carbohydrates\").\n.decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"cotton ball\", \"fibrous\").\n.decl Answer()\nAnswer() :- Breaks_down(\"small intestine\", substance), Has_texture(\"cotton ball\", texture), substance = texture.\n.output Answer", "completions": [".decl Breaks_down(Enzyme:symbol, Substance:symbol)\nBreaks_down(\"small intestine\", \"carbohydrates\").\n.decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"cotton ball\", \"fibrous\").\n.decl Answer()\nAnswer() :- Breaks_down(\"small intestine\", substance), Has_texture(\"cotton ball\", texture), substance = texture.\n.output Answer"]}
{"id": 648, "answer": false, "completion": ".decl Belongs_to_era(Person:symbol, Era:symbol)\nBelongs_to_era(\"hippie\", \"1960s\").\nBelongs_to_era(\"Augustus\", \"Roman Empire\").\n.decl Era_has_quality(Era:symbol, Quality:symbol)\nEra_has_quality(\"1960s\", \"counterculture\").\nEra_has_quality(\"Roman Empire\", \"peace\").\n.decl Answer()\nAnswer() :- Belongs_to_era(\"hippie\", era), Belongs_to_era(\"Augustus\", era), Era_has_quality(era, quality), quality = \"peace\", Era_has_quality(era, quality2), quality2 = \"counterculture\".\n.output Answer", "completions": [".decl Belongs_to_era(Person:symbol, Era:symbol)\nBelongs_to_era(\"hippie\", \"1960s\").\nBelongs_to_era(\"Augustus\", \"Roman Empire\").\n.decl Era_has_quality(Era:symbol, Quality:symbol)\nEra_has_quality(\"1960s\", \"counterculture\").\nEra_has_quality(\"Roman Empire\", \"peace\").\n.decl Answer()\nAnswer() :- Belongs_to_era(\"hippie\", era), Belongs_to_era(\"Augustus\", era), Era_has_quality(era, quality), quality = \"peace\", Era_has_quality(era, quality2), quality2 = \"counterculture\".\n.output Answer"]}
{"id": 649, "answer": true, "completion": ".decl Is_musician(Person:symbol)\nIs_musician(\"Elton John\").\nIs_musician(\"Beyonce\").\n.decl Can_be_knighted(Person:symbol)\nCan_be_knighted(\"Elton John\").\nCan_be_knighted(\"Beyonce\").\n.decl Answer()\nAnswer() :- Is_musician(person), Can_be_knighted(person).\n.output Answer", "completions": [".decl Is_musician(Person:symbol)\nIs_musician(\"Elton John\").\nIs_musician(\"Beyonce\").\n.decl Can_be_knighted(Person:symbol)\nCan_be_knighted(\"Elton John\").\nCan_be_knighted(\"Beyonce\").\n.decl Answer()\nAnswer() :- Is_musician(person), Can_be_knighted(person).\n.output Answer"]}
{"id": 650, "answer": false, "completion": ".decl Has_temperature(Season:symbol, Temperature:float)\nHas_temperature(\"winter\", 0).\nHas_temperature(\"summer\", 30).\n.decl Answer()\nAnswer() :- Has_temperature(\"winter\", temperature), temperature > 20.\n.output Answer", "completions": [".decl Has_temperature(Season:symbol, Temperature:float)\nHas_temperature(\"winter\", 0).\nHas_temperature(\"summer\", 30).\n.decl Answer()\nAnswer() :- Has_temperature(\"winter\", temperature), temperature > 20.\n.output Answer"]}
{"id": 651, "answer": true, "completion": ".decl Contains_gluten(Ingredient:symbol)\nContains_gluten(\"wheat flour\").\nContains_gluten(\"barley flour\").\nContains_gluten(\"rye flour\").\n.decl Safe_for_celiac_disease(Ingredient:symbol)\nSafe_for_celiac_disease(\"rice flour\").\nSafe_for_celiac_disease(\"corn flour\").\nSafe_for_celiac_disease(\"potato flour\").\n.decl Recipe_ingredient(Recipe:symbol, Ingredient:symbol)\nRecipe_ingredient(\"pancakes\", \"wheat flour\").\nRecipe_ingredient(\"pancakes\", \"milk\").\nRecipe_ingredient(\"pancakes\", \"eggs\").\n.decl Answer()\nAnswer() :- Recipe_ingredient(recipe, ingredient), Contains_gluten(ingredient), !Safe_for_celiac_disease(ingredient).\n.output Answer", "completions": [".decl Contains_gluten(Ingredient:symbol)\nContains_gluten(\"wheat flour\").\nContains_gluten(\"barley flour\").\nContains_gluten(\"rye flour\").\n.decl Safe_for_celiac_disease(Ingredient:symbol)\nSafe_for_celiac_disease(\"rice flour\").\nSafe_for_celiac_disease(\"corn flour\").\nSafe_for_celiac_disease(\"potato flour\").\n.decl Recipe_ingredient(Recipe:symbol, Ingredient:symbol)\nRecipe_ingredient(\"pancakes\", \"wheat flour\").\nRecipe_ingredient(\"pancakes\", \"milk\").\nRecipe_ingredient(\"pancakes\", \"eggs\").\n.decl Answer()\nAnswer() :- Recipe_ingredient(recipe, ingredient), Contains_gluten(ingredient), !Safe_for_celiac_disease(ingredient).\n.output Answer"]}
{"id": 652, "answer": false, "completion": ".decl Has_hair_color(Person:symbol, Color:symbol)\nHas_hair_color(\"person1\", \"black\").\n.decl Needs_bleach(Person:symbol)\nNeeds_bleach(person) :- Has_hair_color(person, \"black\"), Has_hair_color(person, \"red\"), Has_hair_color(person, \"blonde\"), !Has_hair_color(person, \"brown\").\n.decl Answer()\nAnswer() :- Needs_bleach(\"person1\").\n.output Answer", "completions": [".decl Has_hair_color(Person:symbol, Color:symbol)\nHas_hair_color(\"person1\", \"black\").\n.decl Needs_bleach(Person:symbol)\nNeeds_bleach(person) :- Has_hair_color(person, \"black\"), Has_hair_color(person, \"red\"), Has_hair_color(person, \"blonde\"), !Has_hair_color(person, \"brown\").\n.decl Answer()\nAnswer() :- Needs_bleach(\"person1\").\n.output Answer"]}
{"id": 653, "answer": true, "completion": ".decl Shouts(Name:symbol, Location:symbol)\nShouts(\"Marco Polo\", \"water\").\nShouts(\"John Smith\", \"water\").\n.decl Answer()\nAnswer() :- Shouts(\"Marco Polo\", location).\n.output Answer", "completions": [".decl Shouts(Name:symbol, Location:symbol)\nShouts(\"Marco Polo\", \"water\").\nShouts(\"John Smith\", \"water\").\n.decl Answer()\nAnswer() :- Shouts(\"Marco Polo\", location).\n.output Answer"]}
{"id": 654, "answer": false, "completion": ".decl Uses(Peer:symbol, Program:symbol)\nUses(\"Metallica\", \"Napster\").\nUses(\"Napster\", \"Soulseek\").\n.decl Answer()\nAnswer() :- Uses(\"Metallica\", program), Uses(program, \"Soulseek\").\n.output Answer", "completions": [".decl Uses(Peer:symbol, Program:symbol)\nUses(\"Metallica\", \"Napster\").\nUses(\"Napster\", \"Soulseek\").\n.decl Answer()\nAnswer() :- Uses(\"Metallica\", program), Uses(program, \"Soulseek\").\n.output Answer"]}
{"id": 655, "answer": true, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"R. Kelly\", \"Chicago State University\").\n.decl Has_degree(University:symbol, Degree:symbol)\nHas_degree(\"Chicago State University\", \"Bachelor of Arts\").\n.decl Answer()\nAnswer() :- Graduates(\"R. Kelly\", university), Has_degree(university, \"Bachelor of Arts\").\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"R. Kelly\", \"Chicago State University\").\n.decl Has_degree(University:symbol, Degree:symbol)\nHas_degree(\"Chicago State University\", \"Bachelor of Arts\").\n.decl Answer()\nAnswer() :- Graduates(\"R. Kelly\", university), Has_degree(university, \"Bachelor of Arts\").\n.output Answer"]}
{"id": 656, "answer": true, "completion": ".decl Scores(Team:symbol, Event:symbol)\nScores(\"El Salvador\", \"goal\").\nScores(\"Honduras\", \"goal\").\nScores(\"Honduras\", \"touchdown\").\n.decl Answer()\nAnswer() :- Scores(\"El Salvador\", event), event != \"touchdown\".\nAnswer() :- Scores(\"Honduras\", event), event != \"touchdown\".\n.output Answer", "completions": [".decl Scores(Team:symbol, Event:symbol)\nScores(\"El Salvador\", \"goal\").\nScores(\"Honduras\", \"goal\").\nScores(\"Honduras\", \"touchdown\").\n.decl Answer()\nAnswer() :- Scores(\"El Salvador\", event), event != \"touchdown\".\nAnswer() :- Scores(\"Honduras\", event), event != \"touchdown\".\n.output Answer"]}
{"id": 657, "answer": true, "completion": ".decl Is_a(Company:symbol, Type:symbol)\nIs_a(\"Canon Inc.\", \"Kabushiki gaisha\").\n.decl Answer()\nAnswer() :- Is_a(\"Canon Inc.\", \"Kabushiki gaisha\").\n.output Answer", "completions": [".decl Is_a(Company:symbol, Type:symbol)\nIs_a(\"Canon Inc.\", \"Kabushiki gaisha\").\n.decl Answer()\nAnswer() :- Is_a(\"Canon Inc.\", \"Kabushiki gaisha\").\n.output Answer"]}
{"id": 658, "answer": false, "completion": ".decl Responsible_for_death(Person:symbol, Victim:symbol)\nResponsible_for_death(\"paparazzi\", \"Princess Diana\").\nResponsible_for_death(\"drug dealers\", \"Amy Winehouse\").\n.decl Answer()\nAnswer() :- Responsible_for_death(\"paparazzi\", \"Amy Winehouse\"), !.\n.output Answer", "completions": [".decl Responsible_for_death(Person:symbol, Victim:symbol)\nResponsible_for_death(\"paparazzi\", \"Princess Diana\").\nResponsible_for_death(\"drug dealers\", \"Amy Winehouse\").\n.decl Answer()\nAnswer() :- Responsible_for_death(\"paparazzi\", \"Amy Winehouse\"), !.\n.output Answer"]}
{"id": 659, "answer": true, "completion": ".decl Length(Object:symbol, Length:float)\nLength(\"giant armadillo\", 1.5).\n.decl Has_length_unit(Unit:symbol, Conversion_factor:float)\nHas_length_unit(\"ruler\", 0.3).\n.decl Answer()\nAnswer() :- Length(\"giant armadillo\", length), Has_length_unit(\"ruler\", conversion_factor), length > 5*conversion_factor.\n.output Answer", "completions": [".decl Length(Object:symbol, Length:float)\nLength(\"giant armadillo\", 1.5).\n.decl Has_length_unit(Unit:symbol, Conversion_factor:float)\nHas_length_unit(\"ruler\", 0.3).\n.decl Answer()\nAnswer() :- Length(\"giant armadillo\", length), Has_length_unit(\"ruler\", conversion_factor), length > 5*conversion_factor.\n.output Answer"]}
{"id": 660, "answer": true, "completion": ".decl Hosts(Show:symbol, Host:symbol, Tenure:float)\nHosts(\"The Price is Right\", \"Drew Carey\", 14).\nHosts(\"The Price is Right\", \"Bob Barker\", 35).\nHosts(\"The Price is Right\", \"Doug Davidson\", 1).\n.decl Answer()\nAnswer() :- Hosts(\"The Price is Right\", \"Drew Carey\", tenure1), Hosts(\"The Price is Right\", \"Doug Davidson\", tenure2), tenure1 > tenure2.\n.output Answer", "completions": [".decl Hosts(Show:symbol, Host:symbol, Tenure:float)\nHosts(\"The Price is Right\", \"Drew Carey\", 14).\nHosts(\"The Price is Right\", \"Bob Barker\", 35).\nHosts(\"The Price is Right\", \"Doug Davidson\", 1).\n.decl Answer()\nAnswer() :- Hosts(\"The Price is Right\", \"Drew Carey\", tenure1), Hosts(\"The Price is Right\", \"Doug Davidson\", tenure2), tenure1 > tenure2.\n.output Answer"]}
{"id": 661, "answer": true, "completion": ".decl Feels_different(Event:symbol, Object:symbol)\nFeels_different(\"funerals\", \"embalmed bodies\").\n.decl Answer()\nAnswer() :- Feels_different(\"funerals\", \"embalmed bodies\").\n.output Answer", "completions": [".decl Feels_different(Event:symbol, Object:symbol)\nFeels_different(\"funerals\", \"embalmed bodies\").\n.decl Answer()\nAnswer() :- Feels_different(\"funerals\", \"embalmed bodies\").\n.output Answer"]}
{"id": 662, "answer": true, "completion": ".decl Escaped(Character:symbol, Location:symbol)\nEscaped(\"Naruto\", \"Temple of Doom\").\n.decl Answer()\nAnswer() :- Escaped(\"Naruto\", \"Temple of Doom\").\n.output Answer", "completions": [".decl Escaped(Character:symbol, Location:symbol)\nEscaped(\"Naruto\", \"Temple of Doom\").\n.decl Answer()\nAnswer() :- Escaped(\"Naruto\", \"Temple of Doom\").\n.output Answer"]}
{"id": 663, "answer": false, "completion": ".decl Serves_food(Restaurant:symbol, Food:symbol)\nServes_food(\"McDonald's\", \"burger\").\nServes_food(\"McDonald's\", \"fries\").\nServes_food(\"McDonald's\", \"soda\").\n.decl Is_healthy(Food:symbol)\nIs_healthy(\"salad\").\nIs_healthy(\"fruit\").\n.decl Answer()\nAnswer() :- Serves_food(\"McDonald's\", food), Is_healthy(food), !Answer().\nAnswer() :- Serves_food(\"McDonald's\", food), !Is_healthy(food).\n.output Answer", "completions": [".decl Serves_food(Restaurant:symbol, Food:symbol)\nServes_food(\"McDonald's\", \"burger\").\nServes_food(\"McDonald's\", \"fries\").\nServes_food(\"McDonald's\", \"soda\").\n.decl Is_healthy(Food:symbol)\nIs_healthy(\"salad\").\nIs_healthy(\"fruit\").\n.decl Answer()\nAnswer() :- Serves_food(\"McDonald's\", food), Is_healthy(food), !Answer().\nAnswer() :- Serves_food(\"McDonald's\", food), !Is_healthy(food).\n.output Answer"]}
{"id": 664, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Dodo\", 1.5).\nHas_height(\"Ma Petite\", 1.3).\n.decl Answer()\nAnswer() :- Has_height(\"Dodo\", height1), Has_height(\"Ma Petite\", height2), height1 > height2.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Dodo\", 1.5).\nHas_height(\"Ma Petite\", 1.3).\n.decl Answer()\nAnswer() :- Has_height(\"Dodo\", height1), Has_height(\"Ma Petite\", height2), height1 > height2.\n.output Answer"]}
{"id": 665, "answer": true, "completion": ".decl Resembles(Object_A:symbol, Object_B:symbol)\nResembles(\"prison uniform\", \"zebra\").\n.decl Color(Object:symbol, Color:symbol)\nColor(\"prison uniform\", \"black and white\").\nColor(\"zebra\", \"black and white\").\n.decl Answer()\nAnswer() :- Resembles(\"prison uniform\", \"zebra\"), Color(\"prison uniform\", color), Color(\"zebra\", color).\n.output Answer", "completions": [".decl Resembles(Object_A:symbol, Object_B:symbol)\nResembles(\"prison uniform\", \"zebra\").\n.decl Color(Object:symbol, Color:symbol)\nColor(\"prison uniform\", \"black and white\").\nColor(\"zebra\", \"black and white\").\n.decl Answer()\nAnswer() :- Resembles(\"prison uniform\", \"zebra\"), Color(\"prison uniform\", color), Color(\"zebra\", color).\n.output Answer"]}
{"id": 666, "answer": false, "completion": ".decl Has_song_band(Song:symbol, Band:symbol)\nHas_song_band(\"Shine On You Crazy Diamond\", \"Pink Floyd\").\n.decl Mentions_place(Song:symbol, Place:symbol)\nMentions_place(\"Shine On You Crazy Diamond\", \"California\").\nMentions_place(\"San Tropez\", \"French Riviera\").\n.decl Answer()\nAnswer() :- Has_song_band(song, \"Pink Floyd\"), Mentions_place(song, \"French Riviera\").\n.output Answer", "completions": [".decl Has_song_band(Song:symbol, Band:symbol)\nHas_song_band(\"Shine On You Crazy Diamond\", \"Pink Floyd\").\n.decl Mentions_place(Song:symbol, Place:symbol)\nMentions_place(\"Shine On You Crazy Diamond\", \"California\").\nMentions_place(\"San Tropez\", \"French Riviera\").\n.decl Answer()\nAnswer() :- Has_song_band(song, \"Pink Floyd\"), Mentions_place(song, \"French Riviera\").\n.output Answer"]}
{"id": 667, "answer": true, "completion": ".decl Height(Character:symbol, Height:float)\nHeight(\"Drow\", 6.5).\nHeight(\"The Hobbit's hero\", 4.5).\n.decl Answer()\nAnswer() :- Height(\"Drow\", height1), Height(\"The Hobbit's hero\", height2), height1 > height2.\n.output Answer", "completions": [".decl Height(Character:symbol, Height:float)\nHeight(\"Drow\", 6.5).\nHeight(\"The Hobbit's hero\", 4.5).\n.decl Answer()\nAnswer() :- Height(\"Drow\", height1), Height(\"The Hobbit's hero\", height2), height1 > height2.\n.output Answer"]}
{"id": 668, "answer": false, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"E.T. the Extra-Terrestrial\", \"Reese's Pieces\").\n.decl Serves_Restaurant(Restaurant:symbol, Food:symbol)\nServes_Restaurant(\"Friendly's\", \"ice cream\").\nServes_Restaurant(\"Friendly's\", \"hamburger\").\nServes_Restaurant(\"Friendly's\", \"fries\").\n.decl Answer()\nAnswer() :- Likes(\"E.T. the Extra-Terrestrial\", food), Serves_Restaurant(\"Friendly's\", food).\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"E.T. the Extra-Terrestrial\", \"Reese's Pieces\").\n.decl Serves_Restaurant(Restaurant:symbol, Food:symbol)\nServes_Restaurant(\"Friendly's\", \"ice cream\").\nServes_Restaurant(\"Friendly's\", \"hamburger\").\nServes_Restaurant(\"Friendly's\", \"fries\").\n.decl Answer()\nAnswer() :- Likes(\"E.T. the Extra-Terrestrial\", food), Serves_Restaurant(\"Friendly's\", food).\n.output Answer"]}
{"id": 669, "answer": true, "completion": ".decl Age(Person:symbol, Years_old:float)\nAge(\"John\", 45).\n.decl Has_memory_capacity(Person:symbol, Memory_capacity:float)\nHas_memory_capacity(\"John\", 8).\n.decl Answer()\nAnswer() :- Age(person, age), Has_memory_capacity(person, memory_capacity), age >= 40, memory_capacity < 10.\n.output Answer", "completions": [".decl Age(Person:symbol, Years_old:float)\nAge(\"John\", 45).\n.decl Has_memory_capacity(Person:symbol, Memory_capacity:float)\nHas_memory_capacity(\"John\", 8).\n.decl Answer()\nAnswer() :- Age(person, age), Has_memory_capacity(person, memory_capacity), age >= 40, memory_capacity < 10.\n.output Answer"]}
{"id": 670, "answer": false, "completion": ".decl Role_in_war(Country:symbol, Role:symbol)\nRole_in_war(\"Switzerland\", \"neutral\").\nRole_in_war(\"Portugal\", \"colonizer\").\nRole_in_war(\"Angola\", \"colony\").\nRole_in_war(\"Mozambique\", \"colony\").\nRole_in_war(\"Guinea-Bissau\", \"colony\").\n.decl Answer()\nAnswer() :- Role_in_war(country1, \"neutral\"), Role_in_war(country2, \"colonizer\"), Role_in_war(country3, \"colony\"), country1 != country2, country1 != country3, country2 != country3, Role_in_war(\"Switzerland\", role), Role_in_war(country1, role), Role_in_war(country2, role), Role_in_war(country3, role).\n.output Answer", "completions": [".decl Role_in_war(Country:symbol, Role:symbol)\nRole_in_war(\"Switzerland\", \"neutral\").\nRole_in_war(\"Portugal\", \"colonizer\").\nRole_in_war(\"Angola\", \"colony\").\nRole_in_war(\"Mozambique\", \"colony\").\nRole_in_war(\"Guinea-Bissau\", \"colony\").\n.decl Answer()\nAnswer() :- Role_in_war(country1, \"neutral\"), Role_in_war(country2, \"colonizer\"), Role_in_war(country3, \"colony\"), country1 != country2, country1 != country3, country2 != country3, Role_in_war(\"Switzerland\", role), Role_in_war(country1, role), Role_in_war(country2, role), Role_in_war(country3, role).\n.output Answer"]}
{"id": 671, "answer": true, "completion": ".decl Has_gender_config(Band:symbol, Male_members:float, Female_members:float)\nHas_gender_config(\"ABBA\", 2, 2).\nHas_gender_config(\"The Mamas & The Papas\", 2, 2).\n.decl Answer()\nAnswer() :- Has_gender_config(\"ABBA\", male_members1, female_members1), Has_gender_config(\"The Mamas & The Papas\", male_members2, female_members2), male_members1 = male_members2, female_members1 = female_members2.\n.output Answer", "completions": [".decl Has_gender_config(Band:symbol, Male_members:float, Female_members:float)\nHas_gender_config(\"ABBA\", 2, 2).\nHas_gender_config(\"The Mamas & The Papas\", 2, 2).\n.decl Answer()\nAnswer() :- Has_gender_config(\"ABBA\", male_members1, female_members1), Has_gender_config(\"The Mamas & The Papas\", male_members2, female_members2), male_members1 = male_members2, female_members1 = female_members2.\n.output Answer"]}
{"id": 672, "answer": false, "completion": ".decl Has_emmys(Person:symbol, Emmys:float)\nHas_emmys(\"Brian Cranston\", 6).\nHas_emmys(\"Saoirse Ronan\", 0).\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Answer()\nAnswer() :- Has_emmys(person1, emmys1), Has_emmys(person2, emmys2), person1 != person2, emmys_sum = emmys1 + emmys2, Is_prime(emmys_sum).\n.output Answer", "completions": [".decl Has_emmys(Person:symbol, Emmys:float)\nHas_emmys(\"Brian Cranston\", 6).\nHas_emmys(\"Saoirse Ronan\", 0).\n.decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Answer()\nAnswer() :- Has_emmys(person1, emmys1), Has_emmys(person2, emmys2), person1 != person2, emmys_sum = emmys1 + emmys2, Is_prime(emmys_sum).\n.output Answer"]}
{"id": 673, "answer": true, "completion": ".decl Is_genre_of(Title:symbol, Genre:symbol)\nIs_genre_of(\"Rick and Morty\", \"sci-fi\").\nIs_genre_of(\"Attack on Titan\", \"anime\").\nIs_genre_of(\"Naruto\", \"anime\").\n.decl Answer()\nAnswer() :- Is_genre_of(\"Rick and Morty\", genre), genre != \"anime\".\nAnswer() :- Is_genre_of(\"Rick and Morty\", \"anime\").\n.output Answer", "completions": [".decl Is_genre_of(Title:symbol, Genre:symbol)\nIs_genre_of(\"Rick and Morty\", \"sci-fi\").\nIs_genre_of(\"Attack on Titan\", \"anime\").\nIs_genre_of(\"Naruto\", \"anime\").\n.decl Answer()\nAnswer() :- Is_genre_of(\"Rick and Morty\", genre), genre != \"anime\".\nAnswer() :- Is_genre_of(\"Rick and Morty\", \"anime\").\n.output Answer"]}
{"id": 674, "answer": false, "completion": ".decl Knows(Person:symbol, Subject:symbol)\nKnows(\"Siri\", \"technology\").\nKnows(\"Siri\", \"mathematics\").\n.decl Answer()\nAnswer() :- Knows(\"Siri\", \"geometry\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Subject:symbol)\nKnows(\"Siri\", \"technology\").\nKnows(\"Siri\", \"mathematics\").\n.decl Answer()\nAnswer() :- Knows(\"Siri\", \"geometry\").\n.output Answer"]}
{"id": 675, "answer": false, "completion": ".decl Is_type_of(Music:symbol, Type:symbol)\nIs_type_of(\"metal\", \"heavy metal\").\nIs_type_of(\"heavy metal\", \"metal\").\nIs_type_of(\"folk music\", \"traditional music\").\n.decl Answer()\nAnswer() :- Is_type_of(\"metal\", type), Is_type_of(\"folk music\", type), type != \"metal\".\n.output Answer", "completions": [".decl Is_type_of(Music:symbol, Type:symbol)\nIs_type_of(\"metal\", \"heavy metal\").\nIs_type_of(\"heavy metal\", \"metal\").\nIs_type_of(\"folk music\", \"traditional music\").\n.decl Answer()\nAnswer() :- Is_type_of(\"metal\", type), Is_type_of(\"folk music\", type), type != \"metal\".\n.output Answer"]}
{"id": 676, "answer": true, "completion": ".decl Member_of(Person:symbol, Organization:symbol)\nMember_of(\"Muhammed\", \"Uniting Church in Australia\").\n.decl Answer()\nAnswer() :- Member_of(\"Muhammed\", \"Uniting Church in Australia\").\n.output Answer", "completions": [".decl Member_of(Person:symbol, Organization:symbol)\nMember_of(\"Muhammed\", \"Uniting Church in Australia\").\n.decl Answer()\nAnswer() :- Member_of(\"Muhammed\", \"Uniting Church in Australia\").\n.output Answer"]}
{"id": 677, "answer": true, "completion": ".decl Admires(Person_A:symbol, Person_B:symbol)\nAdmires(\"Hattori Hanzō\", \"Naruto\").\n.decl Is_fictional(Person:symbol)\nIs_fictional(\"Naruto\").\n.decl Answer()\nAnswer() :- Admires(\"Hattori Hanzō\", person), Is_fictional(person).\n.output Answer", "completions": [".decl Admires(Person_A:symbol, Person_B:symbol)\nAdmires(\"Hattori Hanzō\", \"Naruto\").\n.decl Is_fictional(Person:symbol)\nIs_fictional(\"Naruto\").\n.decl Answer()\nAnswer() :- Admires(\"Hattori Hanzō\", person), Is_fictional(person).\n.output Answer"]}
{"id": 678, "answer": false, "completion": ".decl Passport_required(Country:symbol)\nPassport_required(\"Northern Mariana Islands\").\n.decl Visa_required(Country:symbol)\nVisa_required(\"United States\").\n.decl Answer()\nAnswer() :- !Passport_required(\"Northern Mariana Islands\").\nAnswer() :- !Visa_required(\"United States\"), !Passport_required(\"Northern Mariana Islands\").\n.output Answer", "completions": [".decl Passport_required(Country:symbol)\nPassport_required(\"Northern Mariana Islands\").\n.decl Visa_required(Country:symbol)\nVisa_required(\"United States\").\n.decl Answer()\nAnswer() :- !Passport_required(\"Northern Mariana Islands\").\nAnswer() :- !Visa_required(\"United States\"), !Passport_required(\"Northern Mariana Islands\").\n.output Answer"]}
{"id": 679, "answer": true, "completion": ".decl Appears_in(Game:symbol, Character:symbol)\nAppears_in(\"The Legend of Zelda\", \"Link\").\n.decl Profession(Character:symbol, Profession:symbol)\nProfession(\"Link\", \"adventurer\").\nProfession(\"astronomer\", \"scientist\").\n.decl Answer()\nAnswer() :- Appears_in(game, \"Link\"), Appears_in(game, \"astronomer\"), Profession(\"Link\", profession1), Profession(\"astronomer\", profession2), profession1 != profession2.\n.output Answer", "completions": [".decl Appears_in(Game:symbol, Character:symbol)\nAppears_in(\"The Legend of Zelda\", \"Link\").\n.decl Profession(Character:symbol, Profession:symbol)\nProfession(\"Link\", \"adventurer\").\nProfession(\"astronomer\", \"scientist\").\n.decl Answer()\nAnswer() :- Appears_in(game, \"Link\"), Appears_in(game, \"astronomer\"), Profession(\"Link\", profession1), Profession(\"astronomer\", profession2), profession1 != profession2.\n.output Answer"]}
{"id": 680, "answer": false, "completion": ".decl Has_trolls(Website:symbol)\nHas_trolls(\"reddit\").\n.decl Answer()\nAnswer() :- !Has_trolls(\"reddit\").\n.output Answer", "completions": [".decl Has_trolls(Website:symbol)\nHas_trolls(\"reddit\").\n.decl Answer()\nAnswer() :- !Has_trolls(\"reddit\").\n.output Answer"]}
{"id": 681, "answer": true, "completion": ".decl Is_valuable(Currency:symbol)\nIs_valuable(\"pound sterling\").\n.decl Answer()\nAnswer() :- Is_valuable(\"pound sterling\").\n.output Answer", "completions": [".decl Is_valuable(Currency:symbol)\nIs_valuable(\"pound sterling\").\n.decl Answer()\nAnswer() :- Is_valuable(\"pound sterling\").\n.output Answer"]}
{"id": 682, "answer": false, "completion": ".decl Distance(Location1:symbol, Location2:symbol, Distance:float)\nDistance(\"Federal Reserve\", \"Space Needle\", 2.5).\n.decl Answer()\nAnswer() :- Distance(\"Federal Reserve\", \"Space Needle\", distance), distance <= 3.0.\n.output Answer", "completions": [".decl Distance(Location1:symbol, Location2:symbol, Distance:float)\nDistance(\"Federal Reserve\", \"Space Needle\", 2.5).\n.decl Answer()\nAnswer() :- Distance(\"Federal Reserve\", \"Space Needle\", distance), distance <= 3.0.\n.output Answer"]}
{"id": 683, "answer": true, "completion": ".decl Religion(Person:symbol, Religion:symbol)\nReligion(\"Zoroastrianism adherent\", \"Zoroastrianism\").\n.decl Religious_text(Religion:symbol, Text:symbol)\nReligious_text(\"Zoroastrianism\", \"Avesta\").\nReligious_text(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Religion(\"Zoroastrianism adherent\", religion), Religious_text(religion, text), text != \"Quran\".\n.output Answer", "completions": [".decl Religion(Person:symbol, Religion:symbol)\nReligion(\"Zoroastrianism adherent\", \"Zoroastrianism\").\n.decl Religious_text(Religion:symbol, Text:symbol)\nReligious_text(\"Zoroastrianism\", \"Avesta\").\nReligious_text(\"Islam\", \"Quran\").\n.decl Answer()\nAnswer() :- Religion(\"Zoroastrianism adherent\", religion), Religious_text(religion, text), text != \"Quran\".\n.output Answer"]}
{"id": 684, "answer": false, "completion": ".decl Can_observe_telescope(Telescope:symbol, Object:symbol)\nCan_observe_telescope(\"Very Large Telescope\", \"stars\").\nCan_observe_telescope(\"Very Large Telescope\", \"galaxies\").\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"Mount Everest\", 8848).\n.decl Answer()\nAnswer() :- Can_observe_telescope(\"Very Large Telescope\", object), Has_size(\"Mount Everest\", size), size < 0.0000001.\n.output Answer", "completions": [".decl Can_observe_telescope(Telescope:symbol, Object:symbol)\nCan_observe_telescope(\"Very Large Telescope\", \"stars\").\nCan_observe_telescope(\"Very Large Telescope\", \"galaxies\").\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"Mount Everest\", 8848).\n.decl Answer()\nAnswer() :- Can_observe_telescope(\"Very Large Telescope\", object), Has_size(\"Mount Everest\", size), size < 0.0000001.\n.output Answer"]}
{"id": 685, "answer": false, "completion": ".decl Has_property(Plant:symbol, Property:symbol)\nHas_property(\"garlic\", \"repels vampires\").\nHas_property(\"chives\", \"repels mosquitoes\").\n.decl Answer()\nAnswer() :- Has_property(\"chives\", property), property = \"repels vampires\", !.\n.output Answer", "completions": [".decl Has_property(Plant:symbol, Property:symbol)\nHas_property(\"garlic\", \"repels vampires\").\nHas_property(\"chives\", \"repels mosquitoes\").\n.decl Answer()\nAnswer() :- Has_property(\"chives\", property), property = \"repels vampires\", !.\n.output Answer"]}
{"id": 686, "answer": true, "completion": ".decl Recommends(Doctor:symbol, Treatment:symbol)\nRecommends(\"Doctor of Homeopathy\", \"Quartz\").\nRecommends(\"Doctor of Internal Medicine\", \"Aspirin\").\n.decl Answer()\nAnswer() :- Recommends(\"Doctor of Homeopathy\", \"Quartz\"), !Recommends(\"Doctor of Internal Medicine\", \"Quartz\").\n.output Answer", "completions": [".decl Recommends(Doctor:symbol, Treatment:symbol)\nRecommends(\"Doctor of Homeopathy\", \"Quartz\").\nRecommends(\"Doctor of Internal Medicine\", \"Aspirin\").\n.decl Answer()\nAnswer() :- Recommends(\"Doctor of Homeopathy\", \"Quartz\"), !Recommends(\"Doctor of Internal Medicine\", \"Quartz\").\n.output Answer"]}
{"id": 687, "answer": false, "completion": ".decl Can_get_virus(Fruit:symbol)\nCan_get_virus(\"banana\").\nCan_get_virus(\"apple\").\nCan_get_virus(\"orange\").\n.decl Answer()\nAnswer() :- Can_get_virus(fruit).\n.output Answer", "completions": [".decl Can_get_virus(Fruit:symbol)\nCan_get_virus(\"banana\").\nCan_get_virus(\"apple\").\nCan_get_virus(\"orange\").\n.decl Answer()\nAnswer() :- Can_get_virus(fruit).\n.output Answer"]}
{"id": 688, "answer": true, "completion": ".decl Telescope(Name:symbol, Productivity:float)\nTelescope(\"Very Large Telescope\", 1).\nTelescope(\"Keck Observatory\", 0.8).\nTelescope(\"Hubble Space Telescope\", 0.6).\n.decl Answer()\nAnswer() :- Telescope(\"Very Large Telescope\", productivity1), Telescope(telescope2, productivity2), productivity1 >= productivity2, telescope2 != \"Very Large Telescope\".\n.output Answer", "completions": [".decl Telescope(Name:symbol, Productivity:float)\nTelescope(\"Very Large Telescope\", 1).\nTelescope(\"Keck Observatory\", 0.8).\nTelescope(\"Hubble Space Telescope\", 0.6).\n.decl Answer()\nAnswer() :- Telescope(\"Very Large Telescope\", productivity1), Telescope(telescope2, productivity2), productivity1 >= productivity2, telescope2 != \"Very Large Telescope\".\n.output Answer"]}
{"id": 689, "answer": false, "completion": ".decl Visible_from_location(Object:symbol, Location:symbol)\nVisible_from_location(\"Statue of Liberty\", \"New York City\").\n.decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Bohai Sea\", 105).\n.decl Answer()\nAnswer() :- Visible_from_location(\"Statue of Liberty\", location), Has_depth(location, depth), depth < 93.\n.output Answer", "completions": [".decl Visible_from_location(Object:symbol, Location:symbol)\nVisible_from_location(\"Statue of Liberty\", \"New York City\").\n.decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Bohai Sea\", 105).\n.decl Answer()\nAnswer() :- Visible_from_location(\"Statue of Liberty\", location), Has_depth(location, depth), depth < 93.\n.output Answer"]}
{"id": 690, "answer": false, "completion": ".decl Has_trait(Animal:symbol, Trait:symbol)\nHas_trait(\"flying fish\", \"good eyesight\").\n.decl Answer()\nAnswer() :- Has_trait(\"flying fish\", \"good eyesight\").\n.output Answer", "completions": [".decl Has_trait(Animal:symbol, Trait:symbol)\nHas_trait(\"flying fish\", \"good eyesight\").\n.decl Answer()\nAnswer() :- Has_trait(\"flying fish\", \"good eyesight\").\n.output Answer"]}
{"id": 691, "answer": true, "completion": ".decl Has_resolution(Format:symbol, Resolution:symbol)\nHas_resolution(\"JPEG\", \"low\").\nHas_resolution(\"PNG\", \"high\").\n.decl Has_subject(Image:symbol, Subject:symbol)\nHas_subject(\"Da Vinci's Vitruvian Man\", \"human body\").\n.decl Answer()\nAnswer() :- Has_resolution(\"JPEG\", resolution), Has_subject(\"Da Vinci's Vitruvian Man\", subject), resolution = \"low\", subject = \"human body\".\n.output Answer", "completions": [".decl Has_resolution(Format:symbol, Resolution:symbol)\nHas_resolution(\"JPEG\", \"low\").\nHas_resolution(\"PNG\", \"high\").\n.decl Has_subject(Image:symbol, Subject:symbol)\nHas_subject(\"Da Vinci's Vitruvian Man\", \"human body\").\n.decl Answer()\nAnswer() :- Has_resolution(\"JPEG\", resolution), Has_subject(\"Da Vinci's Vitruvian Man\", subject), resolution = \"low\", subject = \"human body\".\n.output Answer"]}
{"id": 692, "answer": false, "completion": ".decl Knows(Person1:symbol, Person2:symbol)\nKnows(\"Pedubastis I\", \"Hatshepsut\").\n.decl Lives_in(Country:symbol, Person:symbol)\nLives_in(\"Japan\", \"Hatshepsut\").\n.decl Answer()\nAnswer() :- Knows(\"Pedubastis I\", person), Lives_in(\"Japan\", person).\n.output Answer", "completions": [".decl Knows(Person1:symbol, Person2:symbol)\nKnows(\"Pedubastis I\", \"Hatshepsut\").\n.decl Lives_in(Country:symbol, Person:symbol)\nLives_in(\"Japan\", \"Hatshepsut\").\n.decl Answer()\nAnswer() :- Knows(\"Pedubastis I\", person), Lives_in(\"Japan\", person).\n.output Answer"]}
{"id": 693, "answer": true, "completion": ".decl Helps(Person:symbol, Task:symbol)\nHelps(\"Kit & Kaboodle\", \"getting past Underworld gates\").\n.decl Answer()\nAnswer() :- Helps(\"Kit & Kaboodle\", task), task = \"getting past Underworld gates\".\n.output Answer", "completions": [".decl Helps(Person:symbol, Task:symbol)\nHelps(\"Kit & Kaboodle\", \"getting past Underworld gates\").\n.decl Answer()\nAnswer() :- Helps(\"Kit & Kaboodle\", task), task = \"getting past Underworld gates\".\n.output Answer"]}
{"id": 694, "answer": true, "completion": ".decl Can_be_used_as_weapon(Object:symbol)\nCan_be_used_as_weapon(\"gun\").\nCan_be_used_as_weapon(\"knife\").\nCan_be_used_as_weapon(\"baseball bat\").\n.decl Answer()\nAnswer() :- Can_be_used_as_weapon(object1), Can_be_used_as_weapon(object2), object1 != object2.\nAnswer() :- Can_be_used_as_weapon(\"ten-pin bowling pin\").\n.output Answer", "completions": [".decl Can_be_used_as_weapon(Object:symbol)\nCan_be_used_as_weapon(\"gun\").\nCan_be_used_as_weapon(\"knife\").\nCan_be_used_as_weapon(\"baseball bat\").\n.decl Answer()\nAnswer() :- Can_be_used_as_weapon(object1), Can_be_used_as_weapon(object2), object1 != object2.\nAnswer() :- Can_be_used_as_weapon(\"ten-pin bowling pin\").\n.output Answer"]}
{"id": 695, "answer": false, "completion": ".decl Precedes(Person_A:symbol, Person_B:symbol)\nPrecedes(\"Emperor Wen\", \"Jia Sidao\").\nPrecedes(\"Emperor Wu\", \"Jia Sidao\").\nPrecedes(\"Emperor Wu\", \"Go\").\n.decl Answer()\nAnswer() :- Precedes(\"Go\", person1), Precedes(person1, \"Jia Sidao\").\n.output Answer", "completions": [".decl Precedes(Person_A:symbol, Person_B:symbol)\nPrecedes(\"Emperor Wen\", \"Jia Sidao\").\nPrecedes(\"Emperor Wu\", \"Jia Sidao\").\nPrecedes(\"Emperor Wu\", \"Go\").\n.decl Answer()\nAnswer() :- Precedes(\"Go\", person1), Precedes(person1, \"Jia Sidao\").\n.output Answer"]}
{"id": 696, "answer": false, "completion": ".decl Has_number_of_passengers(Vehicle:symbol, N_passengers:float)\nHas_number_of_passengers(\"Noah's Ark\", 2).\nHas_number_of_passengers(\"human\", 8).\n.decl Answer()\nAnswer() :- Has_number_of_passengers(\"Noah's Ark\", n_passengers), Has_number_of_passengers(\"human\", 8), n_passengers >= 8.\n.output Answer", "completions": [".decl Has_number_of_passengers(Vehicle:symbol, N_passengers:float)\nHas_number_of_passengers(\"Noah's Ark\", 2).\nHas_number_of_passengers(\"human\", 8).\n.decl Answer()\nAnswer() :- Has_number_of_passengers(\"Noah's Ark\", n_passengers), Has_number_of_passengers(\"human\", 8), n_passengers >= 8.\n.output Answer"]}
{"id": 697, "answer": false, "completion": ".decl Is_pope(Person:symbol)\nIs_pope(\"Pope Francis\").\n.decl Is_saint(Person:symbol)\nIs_saint(\"St. Francis of Assisi\").\n.decl Answer()\nAnswer() :- Is_pope(person), !Is_saint(person).\n.output Answer", "completions": [".decl Is_pope(Person:symbol)\nIs_pope(\"Pope Francis\").\n.decl Is_saint(Person:symbol)\nIs_saint(\"St. Francis of Assisi\").\n.decl Answer()\nAnswer() :- Is_pope(person), !Is_saint(person).\n.output Answer"]}
{"id": 698, "answer": true, "completion": ".decl Founded(Company:symbol, Year:float)\nFounded(\"Northwest Airlines\", 1926).\n.decl Age(Person:symbol, Age:float)\nAge(\"Betty White\", 99).\n.decl Answer()\nAnswer() :- Founded(\"Northwest Airlines\", year1), Age(\"Betty White\", age1), year1 > age1.\n.output Answer", "completions": [".decl Founded(Company:symbol, Year:float)\nFounded(\"Northwest Airlines\", 1926).\n.decl Age(Person:symbol, Age:float)\nAge(\"Betty White\", 99).\n.decl Answer()\nAnswer() :- Founded(\"Northwest Airlines\", year1), Age(\"Betty White\", age1), year1 > age1.\n.output Answer"]}
{"id": 699, "answer": true, "completion": ".decl Fits_in(Pocket:symbol, Object:symbol)\nFits_in(\"pocket\", \"phone\").\nFits_in(\"pocket\", \"wallet\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"bitcoin\", \"digital\").\n.decl Answer()\nAnswer() :- Fits_in(\"pocket\", object), Has_property(\"bitcoin\", property), property != \"physical\".\n.output Answer", "completions": [".decl Fits_in(Pocket:symbol, Object:symbol)\nFits_in(\"pocket\", \"phone\").\nFits_in(\"pocket\", \"wallet\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"bitcoin\", \"digital\").\n.decl Answer()\nAnswer() :- Fits_in(\"pocket\", object), Has_property(\"bitcoin\", property), property != \"physical\".\n.output Answer"]}
{"id": 700, "answer": true, "completion": ".decl Reads(Person:symbol, Book:symbol)\nReads(\"Queen Elizabeth I\", \"The Complete Works of William Shakespeare\").\n.decl Answer()\nAnswer() :- !Reads(\"Queen Elizabeth I\", \"The works of Jean-Paul Sartre\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Book:symbol)\nReads(\"Queen Elizabeth I\", \"The Complete Works of William Shakespeare\").\n.decl Answer()\nAnswer() :- !Reads(\"Queen Elizabeth I\", \"The works of Jean-Paul Sartre\").\n.output Answer"]}
{"id": 701, "answer": true, "completion": ".decl Looks_like(Organ1:symbol, Organ2:symbol, Similarity:symbol)\nLooks_like(\"anatomical heart\", \"symbolic heart\", \"remarkably different\").\n.decl Answer()\nAnswer() :- Looks_like(\"anatomical heart\", \"symbolic heart\", similarity), similarity = \"remarkably different\".\n.output Answer", "completions": [".decl Looks_like(Organ1:symbol, Organ2:symbol, Similarity:symbol)\nLooks_like(\"anatomical heart\", \"symbolic heart\", \"remarkably different\").\n.decl Answer()\nAnswer() :- Looks_like(\"anatomical heart\", \"symbolic heart\", similarity), similarity = \"remarkably different\".\n.output Answer"]}
{"id": 702, "answer": true, "completion": ".decl Is_political_entity(Entity:symbol)\nIs_political_entity(\"Scandinavia\").\nIs_political_entity(\"Sweden\").\nIs_political_entity(\"Norway\").\nIs_political_entity(\"Denmark\").\n.decl Is_part_of(Entity1:symbol, Entity2:symbol)\nIs_part_of(\"Scandinavia\", \"Europe\").\nIs_part_of(\"Sweden\", \"Scandinavia\").\nIs_part_of(\"Norway\", \"Scandinavia\").\nIs_part_of(\"Denmark\", \"Scandinavia\").\nIs_part_of(\"Riksdag\", \"Sweden\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Riksdag\", entity), Is_political_entity(entity).\n.output Answer", "completions": [".decl Is_political_entity(Entity:symbol)\nIs_political_entity(\"Scandinavia\").\nIs_political_entity(\"Sweden\").\nIs_political_entity(\"Norway\").\nIs_political_entity(\"Denmark\").\n.decl Is_part_of(Entity1:symbol, Entity2:symbol)\nIs_part_of(\"Scandinavia\", \"Europe\").\nIs_part_of(\"Sweden\", \"Scandinavia\").\nIs_part_of(\"Norway\", \"Scandinavia\").\nIs_part_of(\"Denmark\", \"Scandinavia\").\nIs_part_of(\"Riksdag\", \"Sweden\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Riksdag\", entity), Is_political_entity(entity).\n.output Answer"]}
{"id": 703, "answer": true, "completion": ".decl Liquid_diet(Person:symbol)\nLiquid_diet(\"John\").\n.decl Contains_ingredient(Soup:symbol, Ingredient:symbol)\nContains_ingredient(\"chicken noodle soup\", \"chicken\").\nContains_ingredient(\"tomato soup\", \"tomato\").\nContains_ingredient(\"broccoli cheddar soup\", \"broccoli\").\nContains_ingredient(\"broccoli cheddar soup\", \"cheddar\").\nContains_ingredient(\"minestrone soup\", \"pasta\").\nContains_ingredient(\"minestrone soup\", \"beans\").\nContains_ingredient(\"minestrone soup\", \"vegetables\").\n.decl Answer()\nAnswer() :- Liquid_diet(person), Contains_ingredient(soup, \"pasta\"), !Contains_ingredient(soup, \"chicken\"), !Contains_ingredient(soup, \"beef\").\n.output Answer", "completions": [".decl Liquid_diet(Person:symbol)\nLiquid_diet(\"John\").\n.decl Contains_ingredient(Soup:symbol, Ingredient:symbol)\nContains_ingredient(\"chicken noodle soup\", \"chicken\").\nContains_ingredient(\"tomato soup\", \"tomato\").\nContains_ingredient(\"broccoli cheddar soup\", \"broccoli\").\nContains_ingredient(\"broccoli cheddar soup\", \"cheddar\").\nContains_ingredient(\"minestrone soup\", \"pasta\").\nContains_ingredient(\"minestrone soup\", \"beans\").\nContains_ingredient(\"minestrone soup\", \"vegetables\").\n.decl Answer()\nAnswer() :- Liquid_diet(person), Contains_ingredient(soup, \"pasta\"), !Contains_ingredient(soup, \"chicken\"), !Contains_ingredient(soup, \"beef\").\n.output Answer"]}
{"id": 704, "answer": false, "completion": ".decl Religion(Person:symbol, Religion:symbol)\nReligion(\"Mary\", \"Judaism\").\n.decl Worships(God:symbol, Religion:symbol)\nWorships(\"Artemis\", \"Greek\").\n.decl Answer()\nAnswer() :- Religion(\"Mary\", \"Greek\"), Worships(\"Artemis\", religion).\nAnswer() :- Religion(\"Mary\", \"Judaism\").\n.output Answer", "completions": [".decl Religion(Person:symbol, Religion:symbol)\nReligion(\"Mary\", \"Judaism\").\n.decl Worships(God:symbol, Religion:symbol)\nWorships(\"Artemis\", \"Greek\").\n.decl Answer()\nAnswer() :- Religion(\"Mary\", \"Greek\"), Worships(\"Artemis\", religion).\nAnswer() :- Religion(\"Mary\", \"Judaism\").\n.output Answer"]}
{"id": 705, "answer": false, "completion": ".decl Sends_letter(Person:symbol, Destination:symbol)\nSends_letter(\"Santa Claus\", \"North Pole\").\n.decl Answer()\nAnswer() :- Sends_letter(\"child\", \"North Pole\").\n.output Answer", "completions": [".decl Sends_letter(Person:symbol, Destination:symbol)\nSends_letter(\"Santa Claus\", \"North Pole\").\n.decl Answer()\nAnswer() :- Sends_letter(\"child\", \"North Pole\").\n.output Answer"]}
{"id": 706, "answer": false, "completion": ".decl Fought(Person1:symbol, Person2:symbol)\nFought(\"Jack Dempsey\", \"Gene Tunney\").\n.decl Current_champion(Person:symbol)\nCurrent_champion(\"Tyson Fury\").\n.decl Answer()\nAnswer() :- Fought(\"Jack Dempsey\", person2), Current_champion(person2).\n.output Answer", "completions": [".decl Fought(Person1:symbol, Person2:symbol)\nFought(\"Jack Dempsey\", \"Gene Tunney\").\n.decl Current_champion(Person:symbol)\nCurrent_champion(\"Tyson Fury\").\n.decl Answer()\nAnswer() :- Fought(\"Jack Dempsey\", person2), Current_champion(person2).\n.output Answer"]}
{"id": 707, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Peter Griffin\", \"drinking\").\n.decl Answer()\nAnswer() :- Has_skill(\"Peter Griffin\", \"brewing\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Peter Griffin\", \"drinking\").\n.decl Answer()\nAnswer() :- Has_skill(\"Peter Griffin\", \"brewing\").\n.output Answer"]}
{"id": 708, "answer": false, "completion": ".decl Can_transport(Animal:symbol, Container:symbol)\nCan_transport(\"monkey\", \"backpack\").\nCan_transport(\"chimp\", \"backpack\").\nCan_transport(\"gorilla\", \"truck\").\n.decl Answer()\nAnswer() :- Can_transport(\"primate\", container), container = \"backpack\".\n.output Answer", "completions": [".decl Can_transport(Animal:symbol, Container:symbol)\nCan_transport(\"monkey\", \"backpack\").\nCan_transport(\"chimp\", \"backpack\").\nCan_transport(\"gorilla\", \"truck\").\n.decl Answer()\nAnswer() :- Can_transport(\"primate\", container), container = \"backpack\".\n.output Answer"]}
{"id": 709, "answer": true, "completion": ".decl Album_sales(Artist:symbol, Sales:float)\nAlbum_sales(\"AC/DC\", 200000000).\nAlbum_sales(\"Lil Wayne\", 120000000).\n.decl Cost_per_bomber(Bomber:symbol, Cost:float)\nCost_per_bomber(\"B-52\", 74000000).\n.decl Answer()\nAnswer() :- Album_sales(\"AC/DC\", sales1), Cost_per_bomber(\"B-52\", cost1), Album_sales(\"Lil Wayne\", sales2), Cost_per_bomber(\"B-52\", cost2), sales1/cost1 > sales2/cost2.\n.output Answer", "completions": [".decl Album_sales(Artist:symbol, Sales:float)\nAlbum_sales(\"AC/DC\", 200000000).\nAlbum_sales(\"Lil Wayne\", 120000000).\n.decl Cost_per_bomber(Bomber:symbol, Cost:float)\nCost_per_bomber(\"B-52\", 74000000).\n.decl Answer()\nAnswer() :- Album_sales(\"AC/DC\", sales1), Cost_per_bomber(\"B-52\", cost1), Album_sales(\"Lil Wayne\", sales2), Cost_per_bomber(\"B-52\", cost2), sales1/cost1 > sales2/cost2.\n.output Answer"]}
{"id": 710, "answer": false, "completion": ".decl Music_genre(Artist:symbol, Genre:symbol)\nMusic_genre(\"Ludacris\", \"hip hop\").\nMusic_genre(\"Pearl Jam\", \"grunge\").\nMusic_genre(\"Pearl Jam\", \"rock\").\nMusic_genre(\"Pearl Jam\", \"alternative\").\nMusic_genre(\"Pearl Jam\", \"hard rock\").\nMusic_genre(\"Pearl Jam\", \"post-grunge\").\nMusic_genre(\"Pearl Jam\", \"experimental rock\").\nMusic_genre(\"Pearl Jam\", \"folk rock\").\nMusic_genre(\"Pearl Jam\", \"punk rock\").\nMusic_genre(\"Pearl Jam\", \"acoustic rock\").\nMusic_genre(\"Pearl Jam\", \"blues rock\").\nMusic_genre(\"Pearl Jam\", \"heavy metal\").\nMusic_genre(\"Pearl Jam\", \"progressive rock\").\nMusic_genre(\"Pearl Jam\", \"art rock\").\nMusic_genre(\"Pearl Jam\", \"arena rock\").\nMusic_genre(\"Pearl Jam\", \"pop rock\").\nMusic_genre(\"Pearl Jam\", \"hardcore punk\").\nMusic_genre(\"Pearl Jam\", \"indie rock\").\nMusic_genre(\"Pearl Jam\", \"singer-songwriter\").\nMusic_genre(\"Pearl Jam\", \"emo\").\nMusic_genre(\"Pearl Jam\", \"folk\").\nMusic_genre(\"Pearl Jam\", \"country\").\nMusic_genre(\"Pearl Jam\", \"jazz\").\nMusic_genre(\"Pearl Jam\", \"soul\").\nMusic_genre(\"Pearl Jam\", \"funk\").\nMusic_genre(\"Pearl Jam\", \"reggae\").\nMusic_genre(\"Pearl Jam\", \"world music\").\nMusic_genre(\"Pearl Jam\", \"electronic\").\nMusic_genre(\"Pearl Jam\", \"ambient\").\nMusic_genre(\"Pearl Jam\", \"trip hop\").\nMusic_genre(\"Pearl Jam\", \"dub\").\nMusic_genre(\"Pearl Jam\", \"dance\").\nMusic_genre(\"Pearl Jam\", \"pop\").\nMusic_genre(\"Pearl Jam\", \"folk-pop\").\nMusic_genre(\"Pearl Jam\", \"country rock\").\nMusic_genre(\"Pearl Jam\", \"hardcore punk\").\nMusic_genre(\"Pearl Jam\", \"post-punk\").\nMusic_genre(\"Pearl Jam\", \"new wave\").\nMusic_genre(\"Pearl Jam\", \"synth-pop\").\nMusic_genre(\"Pearl Jam\", \"industrial\").\nMusic_genre(\"Pearl Jam\", \"grindcore\").\nMusic_genre(\"Pearl Jam\", \"death metal\").\nMusic_genre(\"Pearl Jam\", \"black metal\").\nMusic_genre(\"Pearl Jam\", \"doom metal\").\nMusic_genre(\"Pearl Jam\", \"gothic metal\").\nMusic_genre(\"Pearl Jam\", \"symphonic metal\").\nMusic_genre(\"Pearl Jam\", \"power metal\").\nMusic_genre(\"Pearl Jam\", \"thrash metal\").\nMusic_genre(\"Pearl Jam\", \"nu metal\").\nMusic_genre(\"Pearl Jam\", \"metalcore\").\nMusic_genre(\"Pearl Jam\", \"punk\").\nMusic_genre(\"Pearl Jam\", \"hardcore\").\nMusic_genre(\"Pearl Jam\", \"grindcore\").\nMusic_genre(\"Pearl Jam\", \"crust punk\").\nMusic_genre(\"Pearl Jam\", \"emo\").\nMusic_genre(\"Pearl Jam\", \"screamo\").\nMusic_genre(\"Pearl Jam\", \"post-hardcore\").\nMusic_genre(\"Pearl Jam\", \"math rock\").\nMusic_genre(\"Pearl Jam\", \"noise rock\").\nMusic_genre(\"Pearl Jam\", \"shoegaze\").\nMusic_genre(\"Pearl Jam\", \"dream pop\").\nMusic_genre(\"Pearl Jam\", \"post-rock\").\nMusic_genre(\"Pearl Jam\", \"experimental\").\nMusic_genre(\"Pearl Jam\", \"avant-garde\").\nMusic_genre(\"Pearl Jam\", \"classical\").\nMusic_genre(\"Pearl Jam\", \"jazz fusion\").\nMusic_genre(\"Pearl Jam\", \"blues\").\nMusic_genre(\"Pearl Jam\", \"R&B\").\nMusic_genre(\"Pearl Jam\", \"hip hop\").\nMusic_genre(\"Pearl Jam\", \"trip hop\").\nMusic_genre(\"Pearl Jam\", \"drum and bass\").\nMusic_genre(\"Pearl Jam\", \"house\").\nMusic_genre(\"Pearl Jam\", \"techno\").\nMusic_genre(\"Pearl Jam\", \"trance\").\nMusic_genre(\"Pearl Jam\", \"ambient\").\nMusic_genre(\"Pearl Jam\", \"new age\").\nMusic_genre(\"Pearl Jam\", \"world music\").\nMusic_genre(\"Pearl Jam\", \"reggae\").\nMusic_genre(\"Pearl Jam\", \"latin\").\nMusic_genre(\"Pearl Jam\", \"folk\").\nMusic_genre(\"Pearl Jam\", \"country\").\nMusic_genre(\"Pearl Jam\", \"bluegrass\").\nMusic_genre(\"Pearl Jam\", \"gospel\").\nMusic_genre(\"Pearl Jam\", \"christian\").\nMusic_genre(\"Pearl Jam\", \"soundtrack\").\nMusic_genre(\"Pearl Jam\", \"spoken word\").\nMusic_genre(\"Pearl Jam\", \"comedy\").\nMusic_genre(\"Pearl Jam\", \"children's music\").\nMusic_genre(\"Pearl Jam\", \"holiday\").\nMusic_genre(\"Pearl Jam\", \"karaoke\").\nMusic_genre(\"Pearl Jam\", \"instructional\").\nMusic_genre(\"Pearl Jam\", \"audiobooks\").\nMusic_genre(\"Pearl Jam\", \"business\").\nMusic_genre(\"Pearl Jam\", \"internet\").\nMusic_genre(\"Pearl Jam\", \"other\").\n.decl Answer()\nAnswer() :- Music_genre(\"Ludacris\", genre1), Music_genre(\"Pearl Jam\", genre2), genre1 = genre2.\n.output Answer", "completions": [".decl Music_genre(Artist:symbol, Genre:symbol)\nMusic_genre(\"Ludacris\", \"hip hop\").\nMusic_genre(\"Pearl Jam\", \"grunge\").\nMusic_genre(\"Pearl Jam\", \"rock\").\nMusic_genre(\"Pearl Jam\", \"alternative\").\nMusic_genre(\"Pearl Jam\", \"hard rock\").\nMusic_genre(\"Pearl Jam\", \"post-grunge\").\nMusic_genre(\"Pearl Jam\", \"experimental rock\").\nMusic_genre(\"Pearl Jam\", \"folk rock\").\nMusic_genre(\"Pearl Jam\", \"punk rock\").\nMusic_genre(\"Pearl Jam\", \"acoustic rock\").\nMusic_genre(\"Pearl Jam\", \"blues rock\").\nMusic_genre(\"Pearl Jam\", \"heavy metal\").\nMusic_genre(\"Pearl Jam\", \"progressive rock\").\nMusic_genre(\"Pearl Jam\", \"art rock\").\nMusic_genre(\"Pearl Jam\", \"arena rock\").\nMusic_genre(\"Pearl Jam\", \"pop rock\").\nMusic_genre(\"Pearl Jam\", \"hardcore punk\").\nMusic_genre(\"Pearl Jam\", \"indie rock\").\nMusic_genre(\"Pearl Jam\", \"singer-songwriter\").\nMusic_genre(\"Pearl Jam\", \"emo\").\nMusic_genre(\"Pearl Jam\", \"folk\").\nMusic_genre(\"Pearl Jam\", \"country\").\nMusic_genre(\"Pearl Jam\", \"jazz\").\nMusic_genre(\"Pearl Jam\", \"soul\").\nMusic_genre(\"Pearl Jam\", \"funk\").\nMusic_genre(\"Pearl Jam\", \"reggae\").\nMusic_genre(\"Pearl Jam\", \"world music\").\nMusic_genre(\"Pearl Jam\", \"electronic\").\nMusic_genre(\"Pearl Jam\", \"ambient\").\nMusic_genre(\"Pearl Jam\", \"trip hop\").\nMusic_genre(\"Pearl Jam\", \"dub\").\nMusic_genre(\"Pearl Jam\", \"dance\").\nMusic_genre(\"Pearl Jam\", \"pop\").\nMusic_genre(\"Pearl Jam\", \"folk-pop\").\nMusic_genre(\"Pearl Jam\", \"country rock\").\nMusic_genre(\"Pearl Jam\", \"hardcore punk\").\nMusic_genre(\"Pearl Jam\", \"post-punk\").\nMusic_genre(\"Pearl Jam\", \"new wave\").\nMusic_genre(\"Pearl Jam\", \"synth-pop\").\nMusic_genre(\"Pearl Jam\", \"industrial\").\nMusic_genre(\"Pearl Jam\", \"grindcore\").\nMusic_genre(\"Pearl Jam\", \"death metal\").\nMusic_genre(\"Pearl Jam\", \"black metal\").\nMusic_genre(\"Pearl Jam\", \"doom metal\").\nMusic_genre(\"Pearl Jam\", \"gothic metal\").\nMusic_genre(\"Pearl Jam\", \"symphonic metal\").\nMusic_genre(\"Pearl Jam\", \"power metal\").\nMusic_genre(\"Pearl Jam\", \"thrash metal\").\nMusic_genre(\"Pearl Jam\", \"nu metal\").\nMusic_genre(\"Pearl Jam\", \"metalcore\").\nMusic_genre(\"Pearl Jam\", \"punk\").\nMusic_genre(\"Pearl Jam\", \"hardcore\").\nMusic_genre(\"Pearl Jam\", \"grindcore\").\nMusic_genre(\"Pearl Jam\", \"crust punk\").\nMusic_genre(\"Pearl Jam\", \"emo\").\nMusic_genre(\"Pearl Jam\", \"screamo\").\nMusic_genre(\"Pearl Jam\", \"post-hardcore\").\nMusic_genre(\"Pearl Jam\", \"math rock\").\nMusic_genre(\"Pearl Jam\", \"noise rock\").\nMusic_genre(\"Pearl Jam\", \"shoegaze\").\nMusic_genre(\"Pearl Jam\", \"dream pop\").\nMusic_genre(\"Pearl Jam\", \"post-rock\").\nMusic_genre(\"Pearl Jam\", \"experimental\").\nMusic_genre(\"Pearl Jam\", \"avant-garde\").\nMusic_genre(\"Pearl Jam\", \"classical\").\nMusic_genre(\"Pearl Jam\", \"jazz fusion\").\nMusic_genre(\"Pearl Jam\", \"blues\").\nMusic_genre(\"Pearl Jam\", \"R&B\").\nMusic_genre(\"Pearl Jam\", \"hip hop\").\nMusic_genre(\"Pearl Jam\", \"trip hop\").\nMusic_genre(\"Pearl Jam\", \"drum and bass\").\nMusic_genre(\"Pearl Jam\", \"house\").\nMusic_genre(\"Pearl Jam\", \"techno\").\nMusic_genre(\"Pearl Jam\", \"trance\").\nMusic_genre(\"Pearl Jam\", \"ambient\").\nMusic_genre(\"Pearl Jam\", \"new age\").\nMusic_genre(\"Pearl Jam\", \"world music\").\nMusic_genre(\"Pearl Jam\", \"reggae\").\nMusic_genre(\"Pearl Jam\", \"latin\").\nMusic_genre(\"Pearl Jam\", \"folk\").\nMusic_genre(\"Pearl Jam\", \"country\").\nMusic_genre(\"Pearl Jam\", \"bluegrass\").\nMusic_genre(\"Pearl Jam\", \"gospel\").\nMusic_genre(\"Pearl Jam\", \"christian\").\nMusic_genre(\"Pearl Jam\", \"soundtrack\").\nMusic_genre(\"Pearl Jam\", \"spoken word\").\nMusic_genre(\"Pearl Jam\", \"comedy\").\nMusic_genre(\"Pearl Jam\", \"children's music\").\nMusic_genre(\"Pearl Jam\", \"holiday\").\nMusic_genre(\"Pearl Jam\", \"karaoke\").\nMusic_genre(\"Pearl Jam\", \"instructional\").\nMusic_genre(\"Pearl Jam\", \"audiobooks\").\nMusic_genre(\"Pearl Jam\", \"business\").\nMusic_genre(\"Pearl Jam\", \"internet\").\nMusic_genre(\"Pearl Jam\", \"other\").\n.decl Answer()\nAnswer() :- Music_genre(\"Ludacris\", genre1), Music_genre(\"Pearl Jam\", genre2), genre1 = genre2.\n.output Answer"]}
{"id": 711, "answer": false, "completion": ".decl Has_size(Location:symbol, Size:float)\nHas_size(\"Palm Beach\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"Palm Beach\", size), size < 1.\n.output Answer", "completions": [".decl Has_size(Location:symbol, Size:float)\nHas_size(\"Palm Beach\", 10).\n.decl Answer()\nAnswer() :- Has_size(\"Palm Beach\", size), size < 1.\n.output Answer"]}
{"id": 712, "answer": true, "completion": ".decl Age_of_food(Food:symbol, Age:float)\nAge_of_food(\"pickled cucumbers\", 1000).\n.decl Answer()\nAnswer() :- Age_of_food(\"pickled cucumbers\", age), age <= 1000.\n.output Answer", "completions": [".decl Age_of_food(Food:symbol, Age:float)\nAge_of_food(\"pickled cucumbers\", 1000).\n.decl Answer()\nAnswer() :- Age_of_food(\"pickled cucumbers\", age), age <= 1000.\n.output Answer"]}
{"id": 713, "answer": true, "completion": ".decl Believes(Person:symbol, Statement:symbol)\nBelieves(\"Flat Earther\", \"Earth is flat\").\nBelieves(\"Flat Earther\", \"Moon landing was faked\").\nBelieves(\"Flat Earther\", \"Gravity is a hoax\").\n.decl Denies(Person:symbol, Statement:symbol)\nDenies(\"Flat Earther\", \"Earth's magnetic field exists\").\n.decl Answer()\nAnswer() :- Believes(\"Flat Earther\", statement1), Denies(\"Flat Earther\", statement2), statement1 = \"Earth is flat\", statement2 = \"Earth's magnetic field exists\".\n.output Answer", "completions": [".decl Believes(Person:symbol, Statement:symbol)\nBelieves(\"Flat Earther\", \"Earth is flat\").\nBelieves(\"Flat Earther\", \"Moon landing was faked\").\nBelieves(\"Flat Earther\", \"Gravity is a hoax\").\n.decl Denies(Person:symbol, Statement:symbol)\nDenies(\"Flat Earther\", \"Earth's magnetic field exists\").\n.decl Answer()\nAnswer() :- Believes(\"Flat Earther\", statement1), Denies(\"Flat Earther\", statement2), statement1 = \"Earth is flat\", statement2 = \"Earth's magnetic field exists\".\n.output Answer"]}
{"id": 714, "answer": false, "completion": ".decl Needs_food(Pet:symbol)\nNeeds_food(\"Lolcat\").\n.decl Has_food(Pet:symbol)\nHas_food(\"Lolcat\").\n.decl Answer()\nAnswer() :- Needs_food(pet), !Has_food(pet).\n.output Answer", "completions": [".decl Needs_food(Pet:symbol)\nNeeds_food(\"Lolcat\").\n.decl Has_food(Pet:symbol)\nHas_food(\"Lolcat\").\n.decl Answer()\nAnswer() :- Needs_food(pet), !Has_food(pet).\n.output Answer"]}
{"id": 715, "answer": true, "completion": ".decl Boiling_point(Element:symbol, Boiling_point:float)\nBoiling_point(\"nickel\", 3005).\n.decl Temperature_range(Layer:symbol, Min_temp:float, Max_temp:float)\nTemperature_range(\"outer core\", 4400, 6100).\n.decl Answer()\nAnswer() :- Boiling_point(\"nickel\", boiling_point), Temperature_range(\"outer core\", min_temp, max_temp), boiling_point < max_temp.\n.output Answer", "completions": [".decl Boiling_point(Element:symbol, Boiling_point:float)\nBoiling_point(\"nickel\", 3005).\n.decl Temperature_range(Layer:symbol, Min_temp:float, Max_temp:float)\nTemperature_range(\"outer core\", 4400, 6100).\n.decl Answer()\nAnswer() :- Boiling_point(\"nickel\", boiling_point), Temperature_range(\"outer core\", min_temp, max_temp), boiling_point < max_temp.\n.output Answer"]}
{"id": 716, "answer": true, "completion": ".decl Found_in_waters(Fish:symbol, Waters:symbol)\nFound_in_waters(\"brown rock fish\", \"Caribbean Sea\").\nFound_in_waters(\"brown rock fish\", \"Atlantic Ocean\").\nFound_in_waters(\"brown rock fish\", \"Gulf of Mexico\").\n.decl Located_in(Country:symbol, Waters:symbol)\nLocated_in(\"Saint Kitts and Nevis\", \"Caribbean Sea\").\n.decl Answer()\nAnswer() :- Found_in_waters(\"brown rock fish\", waters), Located_in(\"Saint Kitts and Nevis\", waters).\n.output Answer", "completions": [".decl Found_in_waters(Fish:symbol, Waters:symbol)\nFound_in_waters(\"brown rock fish\", \"Caribbean Sea\").\nFound_in_waters(\"brown rock fish\", \"Atlantic Ocean\").\nFound_in_waters(\"brown rock fish\", \"Gulf of Mexico\").\n.decl Located_in(Country:symbol, Waters:symbol)\nLocated_in(\"Saint Kitts and Nevis\", \"Caribbean Sea\").\n.decl Answer()\nAnswer() :- Found_in_waters(\"brown rock fish\", waters), Located_in(\"Saint Kitts and Nevis\", waters).\n.output Answer"]}
{"id": 717, "answer": true, "completion": ".decl Is_unlucky_day(Day:symbol)\nIs_unlucky_day(\"Friday the 13th\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Friday the 13th\", 2015).\nHappens_in_year(\"Friday the 13th\", 2016).\nHappens_in_year(\"Friday the 13th\", 2017).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Friday the 13th\", year), Is_unlucky_day(day), day = \"Friday\", year = 2015.\nAnswer() :- Happens_in_year(\"Friday the 13th\", year), !Is_unlucky_day(day), day = \"Friday\", year = 2015.\nAnswer() :- Happens_in_year(\"Friday the 13th\", year), Is_unlucky_day(day), day != \"Friday\", year = 2015.\n.output Answer", "completions": [".decl Is_unlucky_day(Day:symbol)\nIs_unlucky_day(\"Friday the 13th\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Friday the 13th\", 2015).\nHappens_in_year(\"Friday the 13th\", 2016).\nHappens_in_year(\"Friday the 13th\", 2017).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Friday the 13th\", year), Is_unlucky_day(day), day = \"Friday\", year = 2015.\nAnswer() :- Happens_in_year(\"Friday the 13th\", year), !Is_unlucky_day(day), day = \"Friday\", year = 2015.\nAnswer() :- Happens_in_year(\"Friday the 13th\", year), Is_unlucky_day(day), day != \"Friday\", year = 2015.\n.output Answer"]}
{"id": 718, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"cell\", 0.00001).\nHas_size(\"shoebox\", 0.3).\n.decl Answer()\nAnswer() :- Has_size(\"cell\", size1), Has_size(\"shoebox\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"cell\", 0.00001).\nHas_size(\"shoebox\", 0.3).\n.decl Answer()\nAnswer() :- Has_size(\"cell\", size1), Has_size(\"shoebox\", size2), size1 <= size2.\n.output Answer"]}
{"id": 719, "answer": false, "completion": ".decl Belongs_to_group(Person:symbol, Group:symbol)\nBelongs_to_group(\"Isaac Newton\", \"Royal Society\").\nBelongs_to_group(\"Pythagoras\", \"numerologists\").\n.decl Answer()\nAnswer() :- Belongs_to_group(\"Pythagoras\", group), Belongs_to_group(\"Isaac Newton\", group), group = \"Royal Society\".\n.output Answer", "completions": [".decl Belongs_to_group(Person:symbol, Group:symbol)\nBelongs_to_group(\"Isaac Newton\", \"Royal Society\").\nBelongs_to_group(\"Pythagoras\", \"numerologists\").\n.decl Answer()\nAnswer() :- Belongs_to_group(\"Pythagoras\", group), Belongs_to_group(\"Isaac Newton\", group), group = \"Royal Society\".\n.output Answer"]}
{"id": 720, "answer": true, "completion": ".decl Moves_during(Event:symbol, Action:symbol)\nMoves_during(\"hanging\", \"spasms\").\nMoves_during(\"hanging\", \"swinging\").\n.decl Answer()\nAnswer() :- Moves_during(\"hanging\", action).\n.output Answer", "completions": [".decl Moves_during(Event:symbol, Action:symbol)\nMoves_during(\"hanging\", \"spasms\").\nMoves_during(\"hanging\", \"swinging\").\n.decl Answer()\nAnswer() :- Moves_during(\"hanging\", action).\n.output Answer"]}
{"id": 721, "answer": true, "completion": ".decl Used_for_work(Animal:symbol, Location:symbol)\nUsed_for_work(\"moose\", \"Scandinavia\").\nUsed_for_work(\"reindeer\", \"Scandinavia\").\nUsed_for_work(\"moose\", \"Arendelle\").\n.decl Answer()\nAnswer() :- Used_for_work(\"moose\", location), location != \"Arendelle\".\n.output Answer", "completions": [".decl Used_for_work(Animal:symbol, Location:symbol)\nUsed_for_work(\"moose\", \"Scandinavia\").\nUsed_for_work(\"reindeer\", \"Scandinavia\").\nUsed_for_work(\"moose\", \"Arendelle\").\n.decl Answer()\nAnswer() :- Used_for_work(\"moose\", location), location != \"Arendelle\".\n.output Answer"]}
{"id": 722, "answer": true, "completion": ".decl Is_roman_numeral(Symbol:symbol)\nIs_roman_numeral(\"I\").\nIs_roman_numeral(\"V\").\nIs_roman_numeral(\"X\").\nIs_roman_numeral(\"L\").\nIs_roman_numeral(\"C\").\nIs_roman_numeral(\"D\").\nIs_roman_numeral(\"M\").\n.decl Answer()\nAnswer() :- Is_roman_numeral(symbol1), Is_roman_numeral(symbol2), symbol1 != \"H\", symbol2 != \"H\", symbol1 != symbol2, not Is_roman_numeral(symbol1 + \"H\" + symbol2).\n.output Answer", "completions": [".decl Is_roman_numeral(Symbol:symbol)\nIs_roman_numeral(\"I\").\nIs_roman_numeral(\"V\").\nIs_roman_numeral(\"X\").\nIs_roman_numeral(\"L\").\nIs_roman_numeral(\"C\").\nIs_roman_numeral(\"D\").\nIs_roman_numeral(\"M\").\n.decl Answer()\nAnswer() :- Is_roman_numeral(symbol1), Is_roman_numeral(symbol2), symbol1 != \"H\", symbol2 != \"H\", symbol1 != symbol2, not Is_roman_numeral(symbol1 + \"H\" + symbol2).\n.output Answer"]}
{"id": 723, "answer": false, "completion": ".decl Inedible(Meat:symbol, Cuisine:symbol)\nInedible(\"human\", \"Hawaiian\").\nInedible(\"dog\", \"Hawaiian\").\nInedible(\"cat\", \"Hawaiian\").\n.decl Answer()\nAnswer() :- Inedible(\"pig\", \"Hawaiian\").\n.output Answer", "completions": [".decl Inedible(Meat:symbol, Cuisine:symbol)\nInedible(\"human\", \"Hawaiian\").\nInedible(\"dog\", \"Hawaiian\").\nInedible(\"cat\", \"Hawaiian\").\n.decl Answer()\nAnswer() :- Inedible(\"pig\", \"Hawaiian\").\n.output Answer"]}
{"id": 724, "answer": false, "completion": ".decl Temperature(Location:symbol, Temperature:float)\nTemperature(\"Esperanza Base\", -10).\n.decl Footwear(Type:symbol, Comfort:float)\nFootwear(\"sandals\", 2).\n.decl Answer()\nAnswer() :- Temperature(location, temperature), Footwear(\"sandals\", comfort), temperature >= 20, comfort >= 3.\n.output Answer", "completions": [".decl Temperature(Location:symbol, Temperature:float)\nTemperature(\"Esperanza Base\", -10).\n.decl Footwear(Type:symbol, Comfort:float)\nFootwear(\"sandals\", 2).\n.decl Answer()\nAnswer() :- Temperature(location, temperature), Footwear(\"sandals\", comfort), temperature >= 20, comfort >= 3.\n.output Answer"]}
{"id": 725, "answer": true, "completion": ".decl Allergic_to(Character:symbol, Substance:symbol)\nAllergic_to(\"The Little Prince\", \"baobabs\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"flower\", \"beauty\").\nHas_property(\"baobabs\", \"danger\").\n.decl Answer()\nAnswer() :- Allergic_to(\"The Little Prince\", substance), Has_property(substance, \"danger\").\nAnswer() :- !Allergic_to(\"The Little Prince\", substance), Has_property(substance, \"beauty\").\n.output Answer", "completions": [".decl Allergic_to(Character:symbol, Substance:symbol)\nAllergic_to(\"The Little Prince\", \"baobabs\").\n.decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"flower\", \"beauty\").\nHas_property(\"baobabs\", \"danger\").\n.decl Answer()\nAnswer() :- Allergic_to(\"The Little Prince\", substance), Has_property(substance, \"danger\").\nAnswer() :- !Allergic_to(\"The Little Prince\", substance), Has_property(substance, \"beauty\").\n.output Answer"]}
{"id": 726, "answer": false, "completion": ".decl Teaches_about(Course:symbol, Topic:symbol)\nTeaches_about(\"Cell Biology\", \"cell life cycle\").\n.decl Answer()\nAnswer() :- Teaches_about(\"Cell Biology\", \"Al Qaeda life cycle\"), !.\n.output Answer", "completions": [".decl Teaches_about(Course:symbol, Topic:symbol)\nTeaches_about(\"Cell Biology\", \"cell life cycle\").\n.decl Answer()\nAnswer() :- Teaches_about(\"Cell Biology\", \"Al Qaeda life cycle\"), !.\n.output Answer"]}
{"id": 727, "answer": false, "completion": ".decl Helps_condition(Medicine:symbol, Condition:symbol)\nHelps_condition(\"Coca\", \"altitude sickness\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"nosebleed\").\n.decl Answer()\nAnswer() :- Helps_condition(\"Coca\", condition), Has_condition(\"John\", condition).\n.output Answer", "completions": [".decl Helps_condition(Medicine:symbol, Condition:symbol)\nHelps_condition(\"Coca\", \"altitude sickness\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"nosebleed\").\n.decl Answer()\nAnswer() :- Helps_condition(\"Coca\", condition), Has_condition(\"John\", condition).\n.output Answer"]}
{"id": 728, "answer": true, "completion": ".decl Votes(Person:symbol, Month:symbol)\nVotes(\"Justin Bieber\", \"November\").\n.decl Answer()\nAnswer() :- !Votes(\"Justin Bieber\", \"October\").\n.output Answer", "completions": [".decl Votes(Person:symbol, Month:symbol)\nVotes(\"Justin Bieber\", \"November\").\n.decl Answer()\nAnswer() :- !Votes(\"Justin Bieber\", \"October\").\n.output Answer"]}
{"id": 729, "answer": false, "completion": ".decl Uses_ingredient(Chef:symbol, Ingredient:symbol)\nUses_ingredient(\"Gordon Ramsey\", \"salt\").\n.decl Is_radioactive(Element:symbol)\nIs_radioactive(\"uranium\").\n.decl Answer()\nAnswer() :- Uses_ingredient(\"Gordon Ramsey\", ingredient), Is_radioactive(ingredient).\n.output Answer", "completions": [".decl Uses_ingredient(Chef:symbol, Ingredient:symbol)\nUses_ingredient(\"Gordon Ramsey\", \"salt\").\n.decl Is_radioactive(Element:symbol)\nIs_radioactive(\"uranium\").\n.decl Answer()\nAnswer() :- Uses_ingredient(\"Gordon Ramsey\", ingredient), Is_radioactive(ingredient).\n.output Answer"]}
{"id": 730, "answer": false, "completion": ".decl Designed_by(Building:symbol, Architect:symbol)\nDesigned_by(\"Tokyo Tower\", \"Tachū Naitō\").\n.decl Appreciated_by(Architect:symbol, Person:symbol)\nAppreciated_by(\"Stephen Sauvestre\", \"Gustave Eiffel\").\n.decl Answer()\nAnswer() :- Designed_by(\"Tokyo Tower\", architect), Appreciated_by(\"Stephen Sauvestre\", person), architect = person.\n.output Answer", "completions": [".decl Designed_by(Building:symbol, Architect:symbol)\nDesigned_by(\"Tokyo Tower\", \"Tachū Naitō\").\n.decl Appreciated_by(Architect:symbol, Person:symbol)\nAppreciated_by(\"Stephen Sauvestre\", \"Gustave Eiffel\").\n.decl Answer()\nAnswer() :- Designed_by(\"Tokyo Tower\", architect), Appreciated_by(\"Stephen Sauvestre\", person), architect = person.\n.output Answer"]}
{"id": 731, "answer": true, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"Wizard of Oz Scarecrow\", 0).\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Wizard of Oz Scarecrow\", \"Cerebral palsy\").\n.decl Answer()\nAnswer() :- Age(\"Wizard of Oz Scarecrow\", age), age < 5, Has_condition(\"Wizard of Oz Scarecrow\", \"Cerebral palsy\").\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"Wizard of Oz Scarecrow\", 0).\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Wizard of Oz Scarecrow\", \"Cerebral palsy\").\n.decl Answer()\nAnswer() :- Age(\"Wizard of Oz Scarecrow\", age), age < 5, Has_condition(\"Wizard of Oz Scarecrow\", \"Cerebral palsy\").\n.output Answer"]}
{"id": 732, "answer": false, "completion": ".decl Has_birth_year(Animal:symbol, Year:float)\nHas_birth_year(\"hamster\", 2019).\n.decl Is_leap_year(Year:float)\nIs_leap_year(2020).\nIs_leap_year(2024).\nIs_leap_year(2028).\n.decl Answer()\nAnswer() :- Has_birth_year(\"hamster\", year1), Is_leap_year(year1), Is_leap_year(year2), year2 > year1, Is_leap_year(year3), year3 > year2.\n.output Answer", "completions": [".decl Has_birth_year(Animal:symbol, Year:float)\nHas_birth_year(\"hamster\", 2019).\n.decl Is_leap_year(Year:float)\nIs_leap_year(2020).\nIs_leap_year(2024).\nIs_leap_year(2028).\n.decl Answer()\nAnswer() :- Has_birth_year(\"hamster\", year1), Is_leap_year(year1), Is_leap_year(year2), year2 > year1, Is_leap_year(year3), year3 > year2.\n.output Answer"]}
{"id": 733, "answer": true, "completion": ".decl Married_to(Person:symbol, Partner:symbol)\nMarried_to(\"Johann Sebastian Bach\", \"Maria Barbara Bach\").\nMarried_to(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcken\").\n.decl Answer()\nAnswer() :- Married_to(\"Johann Sebastian Bach\", partner1), Married_to(\"Johann Sebastian Bach\", partner2), partner1 != partner2.\nAnswer() :- Married_to(\"Johann Sebastian Bach\", \"Maria Barbara Bach\"), !Married_to(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcken\").\n.output Answer", "completions": [".decl Married_to(Person:symbol, Partner:symbol)\nMarried_to(\"Johann Sebastian Bach\", \"Maria Barbara Bach\").\nMarried_to(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcken\").\n.decl Answer()\nAnswer() :- Married_to(\"Johann Sebastian Bach\", partner1), Married_to(\"Johann Sebastian Bach\", partner2), partner1 != partner2.\nAnswer() :- Married_to(\"Johann Sebastian Bach\", \"Maria Barbara Bach\"), !Married_to(\"Johann Sebastian Bach\", \"Anna Magdalena Wilcken\").\n.output Answer"]}
{"id": 734, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"baby gray whale\", 30).\nHas_size(\"tractor-trailer\", 480).\n.decl Answer()\nAnswer() :- Has_size(\"baby gray whale\", size1), Has_size(\"tractor-trailer\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"baby gray whale\", 30).\nHas_size(\"tractor-trailer\", 480).\n.decl Answer()\nAnswer() :- Has_size(\"baby gray whale\", size1), Has_size(\"tractor-trailer\", size2), size1 <= size2.\n.output Answer"]}
{"id": 735, "answer": false, "completion": ".decl Main_ingredient(Ingredient:symbol, Dish:symbol)\nMain_ingredient(\"ground bell peppers\", \"black pepper\").\n.decl Answer()\nAnswer() :- Main_ingredient(ingredient, \"black pepper\"), ingredient != \"ground bell peppers\".\n.output Answer", "completions": [".decl Main_ingredient(Ingredient:symbol, Dish:symbol)\nMain_ingredient(\"ground bell peppers\", \"black pepper\").\n.decl Answer()\nAnswer() :- Main_ingredient(ingredient, \"black pepper\"), ingredient != \"ground bell peppers\".\n.output Answer"]}
{"id": 736, "answer": true, "completion": ".decl Taught_by(Teacher:symbol, Student:symbol)\nTaught_by(\"Native American tribes\", \"Spaniards\").\n.decl Cultivates(Culture:symbol, Crop:symbol)\nCultivates(\"Native American tribes\", \"maize\").\n.decl Answer()\nAnswer() :- Taught_by(teacher, \"Spaniards\"), Cultivates(teacher, crop), crop = \"maize\".\n.output Answer", "completions": [".decl Taught_by(Teacher:symbol, Student:symbol)\nTaught_by(\"Native American tribes\", \"Spaniards\").\n.decl Cultivates(Culture:symbol, Crop:symbol)\nCultivates(\"Native American tribes\", \"maize\").\n.decl Answer()\nAnswer() :- Taught_by(teacher, \"Spaniards\"), Cultivates(teacher, crop), crop = \"maize\".\n.output Answer"]}
{"id": 737, "answer": true, "completion": ".decl Used_transportation(Person:symbol, Transportation:symbol)\nUsed_transportation(\"Sojourner Truth\", \"horse and carriage\").\nUsed_transportation(\"Sojourner Truth\", \"walking\").\n.decl Answer()\nAnswer() :- Used_transportation(\"Sojourner Truth\", transportation), transportation != \"elevator\".\n.output Answer", "completions": [".decl Used_transportation(Person:symbol, Transportation:symbol)\nUsed_transportation(\"Sojourner Truth\", \"horse and carriage\").\nUsed_transportation(\"Sojourner Truth\", \"walking\").\n.decl Answer()\nAnswer() :- Used_transportation(\"Sojourner Truth\", transportation), transportation != \"elevator\".\n.output Answer"]}
{"id": 738, "answer": false, "completion": ".decl Knows(Person1:symbol, Person2:symbol)\nKnows(\"psychologist\", \"me\").\n.decl Is_at(Person:symbol, Location:symbol)\nIs_at(\"me\", \"supermarket\").\n.decl Answer()\nAnswer() :- Knows(\"psychologist\", person), Is_at(\"me\", location), location != \"psychologist's office\", person = \"psychologist\".\n.output Answer", "completions": [".decl Knows(Person1:symbol, Person2:symbol)\nKnows(\"psychologist\", \"me\").\n.decl Is_at(Person:symbol, Location:symbol)\nIs_at(\"me\", \"supermarket\").\n.decl Answer()\nAnswer() :- Knows(\"psychologist\", person), Is_at(\"me\", location), location != \"psychologist's office\", person = \"psychologist\".\n.output Answer"]}
{"id": 739, "answer": true, "completion": ".decl Has_rating(Title:symbol, Rating:float)\nHas_rating(\"Hamlet\", 8.7).\nHas_rating(\"Comedy of Errors\", 7.5).\n.decl Answer()\nAnswer() :- Has_rating(\"Hamlet\", rating1), Has_rating(\"Comedy of Errors\", rating2), rating1 > rating2.\n.output Answer", "completions": [".decl Has_rating(Title:symbol, Rating:float)\nHas_rating(\"Hamlet\", 8.7).\nHas_rating(\"Comedy of Errors\", 7.5).\n.decl Answer()\nAnswer() :- Has_rating(\"Hamlet\", rating1), Has_rating(\"Comedy of Errors\", rating2), rating1 > rating2.\n.output Answer"]}
{"id": 740, "answer": true, "completion": ".decl Has_graffiti(Location:symbol)\nHas_graffiti(\"Alcatraz\").\n.decl Historic(Location:symbol)\nHistoric(\"Alcatraz\").\n.decl Answer()\nAnswer() :- Has_graffiti(location), Historic(location).\n.output Answer", "completions": [".decl Has_graffiti(Location:symbol)\nHas_graffiti(\"Alcatraz\").\n.decl Historic(Location:symbol)\nHistoric(\"Alcatraz\").\n.decl Answer()\nAnswer() :- Has_graffiti(location), Historic(location).\n.output Answer"]}
{"id": 741, "answer": true, "completion": ".decl Distance(Start:symbol, End:symbol, Distance:float)\nDistance(\"Pyrenees\", \"Pyrenees\", 800).\n.decl Runs(Person:symbol, Start:symbol, End:symbol)\nRuns(\"elite runner\", \"Pyrenees\", \"Pyrenees\").\n.decl Answer()\nAnswer() :- Runs(person, start, end), Distance(start, end, distance), distance <= 800.\n.output Answer", "completions": [".decl Distance(Start:symbol, End:symbol, Distance:float)\nDistance(\"Pyrenees\", \"Pyrenees\", 800).\n.decl Runs(Person:symbol, Start:symbol, End:symbol)\nRuns(\"elite runner\", \"Pyrenees\", \"Pyrenees\").\n.decl Answer()\nAnswer() :- Runs(person, start, end), Distance(start, end, distance), distance <= 800.\n.output Answer"]}
{"id": 742, "answer": true, "completion": ".decl Visible_from(Location:symbol, Object:symbol)\nVisible_from(\"Wembley Arena\", \"stage\").\nVisible_from(\"stage\", \"moon\").\n.decl Answer()\nAnswer() :- Visible_from(\"Wembley Arena\", object), Visible_from(object, \"moon\").\n.output Answer", "completions": [".decl Visible_from(Location:symbol, Object:symbol)\nVisible_from(\"Wembley Arena\", \"stage\").\nVisible_from(\"stage\", \"moon\").\n.decl Answer()\nAnswer() :- Visible_from(\"Wembley Arena\", object), Visible_from(object, \"moon\").\n.output Answer"]}
{"id": 743, "answer": true, "completion": ".decl First_letter_row(letter:symbol)\nFirst_letter_row(\"q\").\nFirst_letter_row(\"w\").\nFirst_letter_row(\"e\").\nFirst_letter_row(\"r\").\nFirst_letter_row(\"t\").\nFirst_letter_row(\"y\").\n.decl Answer()\nAnswer() :- First_letter_row(letter1), First_letter_row(letter2), First_letter_row(letter3), letter1 = letter3, letter2 = letter2.\n.output Answer", "completions": [".decl First_letter_row(letter:symbol)\nFirst_letter_row(\"q\").\nFirst_letter_row(\"w\").\nFirst_letter_row(\"e\").\nFirst_letter_row(\"r\").\nFirst_letter_row(\"t\").\nFirst_letter_row(\"y\").\n.decl Answer()\nAnswer() :- First_letter_row(letter1), First_letter_row(letter2), First_letter_row(letter3), letter1 = letter3, letter2 = letter2.\n.output Answer"]}
{"id": 744, "answer": false, "completion": ".decl Discovered_on_planet(Artifact:symbol, Planet:symbol)\nDiscovered_on_planet(\"tumulus\", \"Earth\").\n.decl Answer()\nAnswer() :- Discovered_on_planet(\"tumulus\", \"Mars\"), !.\n.output Answer", "completions": [".decl Discovered_on_planet(Artifact:symbol, Planet:symbol)\nDiscovered_on_planet(\"tumulus\", \"Earth\").\n.decl Answer()\nAnswer() :- Discovered_on_planet(\"tumulus\", \"Mars\"), !.\n.output Answer"]}
{"id": 745, "answer": false, "completion": ".decl Symbol_of(Character:symbol, Symbol:symbol)\nSymbol_of(\"Pan\", \"wildness\").\nSymbol_of(\"Pan\", \"fertility\").\nSymbol_of(\"Pan\", \"music\").\nSymbol_of(\"Pan\", \"shepherds\").\nSymbol_of(\"Pan\", \"nature\").\nSymbol_of(\"Pan\", \"sexuality\").\nSymbol_of(\"Pan\", \"lust\").\nSymbol_of(\"Pan\", \"panic\").\nSymbol_of(\"Pan\", \"fear\").\nSymbol_of(\"Pan\", \"chaos\").\nSymbol_of(\"Pan\", \"madness\").\nSymbol_of(\"Pan\", \"beauty\").\nSymbol_of(\"Pan\", \"virginity\").\nSymbol_of(\"Pan\", \"innocence\").\nSymbol_of(\"Pan\", \"youth\").\n.decl Answer()\nAnswer() :- Symbol_of(\"Pan\", \"virtue\"), Symbol_of(\"Pan\", \"virginity\").\n.output Answer", "completions": [".decl Symbol_of(Character:symbol, Symbol:symbol)\nSymbol_of(\"Pan\", \"wildness\").\nSymbol_of(\"Pan\", \"fertility\").\nSymbol_of(\"Pan\", \"music\").\nSymbol_of(\"Pan\", \"shepherds\").\nSymbol_of(\"Pan\", \"nature\").\nSymbol_of(\"Pan\", \"sexuality\").\nSymbol_of(\"Pan\", \"lust\").\nSymbol_of(\"Pan\", \"panic\").\nSymbol_of(\"Pan\", \"fear\").\nSymbol_of(\"Pan\", \"chaos\").\nSymbol_of(\"Pan\", \"madness\").\nSymbol_of(\"Pan\", \"beauty\").\nSymbol_of(\"Pan\", \"virginity\").\nSymbol_of(\"Pan\", \"innocence\").\nSymbol_of(\"Pan\", \"youth\").\n.decl Answer()\nAnswer() :- Symbol_of(\"Pan\", \"virtue\"), Symbol_of(\"Pan\", \"virginity\").\n.output Answer"]}
{"id": 746, "answer": false, "completion": ".decl Holds_position(Person:symbol, Position:symbol, Year:float)\nHolds_position(\"Mike Pence\", \"Vice President\", 2020).\n.decl Answer()\nAnswer() :- Holds_position(\"Justin Bieber\", \"Vice President\", 2020).\n.output Answer", "completions": [".decl Holds_position(Person:symbol, Position:symbol, Year:float)\nHolds_position(\"Mike Pence\", \"Vice President\", 2020).\n.decl Answer()\nAnswer() :- Holds_position(\"Justin Bieber\", \"Vice President\", 2020).\n.output Answer"]}
{"id": 747, "answer": true, "completion": ".decl Contains_word(Title:symbol, Word:symbol)\nContains_word(\"Diamonds Are Forever\", \"diamonds\").\nContains_word(\"Diamonds Are Forever\", \"forever\").\n.decl Answer()\nAnswer() :- Contains_word(\"Diamonds Are Forever\", \"diamonds\"), Contains_word(\"Diamonds Are Forever\", \"forever\").\n.output Answer", "completions": [".decl Contains_word(Title:symbol, Word:symbol)\nContains_word(\"Diamonds Are Forever\", \"diamonds\").\nContains_word(\"Diamonds Are Forever\", \"forever\").\n.decl Answer()\nAnswer() :- Contains_word(\"Diamonds Are Forever\", \"diamonds\"), Contains_word(\"Diamonds Are Forever\", \"forever\").\n.output Answer"]}
{"id": 748, "answer": false, "completion": ".decl Participated_in(Event:symbol, Country:symbol)\nParticipated_in(\"French Revolution\", \"France\").\nParticipated_in(\"French Revolution\", \"Great Britain\").\nParticipated_in(\"French Revolution\", \"Prussia\").\nParticipated_in(\"French Revolution\", \"Austria\").\n.decl Answer()\nAnswer() :- Participated_in(\"French Revolution\", \"France\"), !Participated_in(\"French Revolution\", \"Great Britain\"), !Participated_in(\"French Revolution\", \"Prussia\"), !Participated_in(\"French Revolution\", \"Austria\").\n.output Answer", "completions": [".decl Participated_in(Event:symbol, Country:symbol)\nParticipated_in(\"French Revolution\", \"France\").\nParticipated_in(\"French Revolution\", \"Great Britain\").\nParticipated_in(\"French Revolution\", \"Prussia\").\nParticipated_in(\"French Revolution\", \"Austria\").\n.decl Answer()\nAnswer() :- Participated_in(\"French Revolution\", \"France\"), !Participated_in(\"French Revolution\", \"Great Britain\"), !Participated_in(\"French Revolution\", \"Prussia\"), !Participated_in(\"French Revolution\", \"Austria\").\n.output Answer"]}
{"id": 749, "answer": true, "completion": ".decl Is_legal(Game:symbol)\nIs_legal(\"Super Mario Bros.\").\nIs_legal(\"The Legend of Zelda\").\nIs_legal(\"Metroid\").\n.decl Answer()\nAnswer() :- Is_legal(game), game != \"Super Mario Bros.\".\n.output Answer", "completions": [".decl Is_legal(Game:symbol)\nIs_legal(\"Super Mario Bros.\").\nIs_legal(\"The Legend of Zelda\").\nIs_legal(\"Metroid\").\n.decl Answer()\nAnswer() :- Is_legal(game), game != \"Super Mario Bros.\".\n.output Answer"]}
{"id": 750, "answer": false, "completion": ".decl Has_children(Parent:symbol, N_children:float)\nHas_children(\"Jason\", 2).\n.decl Has_n_players(Team:symbol, N_players:float)\nHas_n_players(\"polo\", 4).\n.decl Answer()\nAnswer() :- Has_children(\"Jason\", n_children), Has_n_players(\"polo\", n_players), n_children >= n_players.\n.output Answer", "completions": [".decl Has_children(Parent:symbol, N_children:float)\nHas_children(\"Jason\", 2).\n.decl Has_n_players(Team:symbol, N_players:float)\nHas_n_players(\"polo\", 4).\n.decl Answer()\nAnswer() :- Has_children(\"Jason\", n_children), Has_n_players(\"polo\", n_players), n_children >= n_players.\n.output Answer"]}
{"id": 751, "answer": false, "completion": ".decl Middle_name(Person:symbol, Middle_name:symbol)\nMiddle_name(\"Tony Bennett\", \"Dominick\").\nMiddle_name(\"Dominick Cruz\", \"Dominick\").\n.decl Former_champion(Person:symbol)\nFormer_champion(\"Dominick Cruz\").\n.decl Answer()\nAnswer() :- Middle_name(\"Tony Bennett\", middle_name), Middle_name(\"Former champion\", middle_name).\n.output Answer", "completions": [".decl Middle_name(Person:symbol, Middle_name:symbol)\nMiddle_name(\"Tony Bennett\", \"Dominick\").\nMiddle_name(\"Dominick Cruz\", \"Dominick\").\n.decl Former_champion(Person:symbol)\nFormer_champion(\"Dominick Cruz\").\n.decl Answer()\nAnswer() :- Middle_name(\"Tony Bennett\", middle_name), Middle_name(\"Former champion\", middle_name).\n.output Answer"]}
{"id": 752, "answer": true, "completion": ".decl Has_property(Product:symbol, Property:symbol)\nHas_property(\"store bought milk\", \"homogenized\").\n.decl Answer()\nAnswer() :- !Has_property(\"store bought milk\", \"cream at the top\").\n.output Answer", "completions": [".decl Has_property(Product:symbol, Property:symbol)\nHas_property(\"store bought milk\", \"homogenized\").\n.decl Answer()\nAnswer() :- !Has_property(\"store bought milk\", \"cream at the top\").\n.output Answer"]}
{"id": 753, "answer": true, "completion": ".decl Has_element(State:symbol, Element:symbol)\nHas_element(\"California\", \"silicon\").\n.decl Answer()\nAnswer() :- Has_element(\"California\", \"silicon\").\n.output Answer", "completions": [".decl Has_element(State:symbol, Element:symbol)\nHas_element(\"California\", \"silicon\").\n.decl Answer()\nAnswer() :- Has_element(\"California\", \"silicon\").\n.output Answer"]}
{"id": 754, "answer": true, "completion": ".decl Resides_in(Person:symbol, City:symbol)\nResides_in(\"John\", \"Bunkie Louisiana\").\nResides_in(\"Jane\", \"Bunkie Louisiana\").\n.decl Has_word(Torah_word:symbol)\nHas_word(\"Genesis\").\nHas_word(\"Exodus\").\nHas_word(\"Leviticus\").\nHas_word(\"Numbers\").\nHas_word(\"Deuteronomy\").\n.decl Answer()\nAnswer() :- Resides_in(person, \"Bunkie Louisiana\"), Has_word(word).\n.output Answer", "completions": [".decl Resides_in(Person:symbol, City:symbol)\nResides_in(\"John\", \"Bunkie Louisiana\").\nResides_in(\"Jane\", \"Bunkie Louisiana\").\n.decl Has_word(Torah_word:symbol)\nHas_word(\"Genesis\").\nHas_word(\"Exodus\").\nHas_word(\"Leviticus\").\nHas_word(\"Numbers\").\nHas_word(\"Deuteronomy\").\n.decl Answer()\nAnswer() :- Resides_in(person, \"Bunkie Louisiana\"), Has_word(word).\n.output Answer"]}
{"id": 755, "answer": true, "completion": ".decl Has_effect(Food:symbol, Effect:symbol)\nHas_effect(\"celery\", \"reduces risk of diabetes\").\n.decl Weighs(Person:symbol, Weight:float)\nWeighs(\"John\", 70).\n.decl Answer()\nAnswer() :- Has_effect(\"celery\", \"reduces risk of diabetes\"), Weighs(\"John\", weight), weight >= 70.\n.output Answer", "completions": [".decl Has_effect(Food:symbol, Effect:symbol)\nHas_effect(\"celery\", \"reduces risk of diabetes\").\n.decl Weighs(Person:symbol, Weight:float)\nWeighs(\"John\", 70).\n.decl Answer()\nAnswer() :- Has_effect(\"celery\", \"reduces risk of diabetes\"), Weighs(\"John\", weight), weight >= 70.\n.output Answer"]}
{"id": 756, "answer": false, "completion": ".decl Has_storage_capacity(Device:symbol, Capacity:float)\nHas_storage_capacity(\"500GB USB device\", 500).\n.decl Has_data_usage(Show:symbol, Hours_per_day:float)\nHas_data_usage(\"Netflix shows\", 10).\n.decl Has_data_size(Show:symbol, Size_per_hour:float)\nHas_data_size(\"Netflix shows\", 1).\n.decl Answer()\nAnswer() :- Has_storage_capacity(device, capacity), Has_data_usage(show, hours), Has_data_size(show, size), capacity >= hours * size * 10 * 24.\n.output Answer", "completions": [".decl Has_storage_capacity(Device:symbol, Capacity:float)\nHas_storage_capacity(\"500GB USB device\", 500).\n.decl Has_data_usage(Show:symbol, Hours_per_day:float)\nHas_data_usage(\"Netflix shows\", 10).\n.decl Has_data_size(Show:symbol, Size_per_hour:float)\nHas_data_size(\"Netflix shows\", 1).\n.decl Answer()\nAnswer() :- Has_storage_capacity(device, capacity), Has_data_usage(show, hours), Has_data_size(show, size), capacity >= hours * size * 10 * 24.\n.output Answer"]}
{"id": 757, "answer": true, "completion": ".decl Can_lift(Person:symbol, Object:symbol)\nCan_lift(\"Arnold Schwarzenegger\", \"barbell\").\nCan_lift(\"barbell\", \"adult Black rhinoceros\").\n.decl Answer()\nAnswer() :- Can_lift(\"Arnold Schwarzenegger\", object1), Can_lift(object1, \"adult Black rhinoceros\").\n.output Answer", "completions": [".decl Can_lift(Person:symbol, Object:symbol)\nCan_lift(\"Arnold Schwarzenegger\", \"barbell\").\nCan_lift(\"barbell\", \"adult Black rhinoceros\").\n.decl Answer()\nAnswer() :- Can_lift(\"Arnold Schwarzenegger\", object1), Can_lift(object1, \"adult Black rhinoceros\").\n.output Answer"]}
{"id": 758, "answer": false, "completion": ".decl Produced_by(Show:symbol, Company:symbol)\nProduced_by(\"The Mandalorian\", \"Disney\").\nProduced_by(\"Star Wars: The Clone Wars\", \"Lucasfilm\").\nProduced_by(\"Star Wars Rebels\", \"Lucasfilm\").\nProduced_by(\"Star Wars Resistance\", \"Lucasfilm\").\n.decl Answer()\nAnswer() :- Produced_by(show1, \"Disney\"), Produced_by(show2, \"Disney\"), show1 != show2.\n.output Answer", "completions": [".decl Produced_by(Show:symbol, Company:symbol)\nProduced_by(\"The Mandalorian\", \"Disney\").\nProduced_by(\"Star Wars: The Clone Wars\", \"Lucasfilm\").\nProduced_by(\"Star Wars Rebels\", \"Lucasfilm\").\nProduced_by(\"Star Wars Resistance\", \"Lucasfilm\").\n.decl Answer()\nAnswer() :- Produced_by(show1, \"Disney\"), Produced_by(show2, \"Disney\"), show1 != show2.\n.output Answer"]}
{"id": 759, "answer": true, "completion": ".decl Saved_life(Person:symbol, Medicine:symbol)\nSaved_life(\"Jonas Salk\", \"polio medicine\").\n.decl Created_vaccine(Person:symbol, Disease:symbol)\nCreated_vaccine(\"Jonas Salk\", \"polio\").\n.decl Answer()\nAnswer() :- Created_vaccine(\"Jonas Salk\", \"polio\"), Saved_life(\"Jonas Salk\", medicine).\n.output Answer", "completions": [".decl Saved_life(Person:symbol, Medicine:symbol)\nSaved_life(\"Jonas Salk\", \"polio medicine\").\n.decl Created_vaccine(Person:symbol, Disease:symbol)\nCreated_vaccine(\"Jonas Salk\", \"polio\").\n.decl Answer()\nAnswer() :- Created_vaccine(\"Jonas Salk\", \"polio\"), Saved_life(\"Jonas Salk\", medicine).\n.output Answer"]}
{"id": 760, "answer": true, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"vegan\", \"vegetables\").\nEats(\"vegan\", \"fruits\").\nEats(\"vegan\", \"nuts\").\nEats(\"vegan\", \"grains\").\nEats(\"vegan\", \"legumes\").\nEats(\"vegan\", \"tofu\").\nEats(\"vegan\", \"seitan\").\nEats(\"vegan\", \"tempeh\").\nEats(\"vegan\", \"soy milk\").\nEats(\"vegan\", \"almond milk\").\nEats(\"vegan\", \"coconut milk\").\nEats(\"vegan\", \"rice milk\").\nEats(\"vegan\", \"oat milk\").\nEats(\"vegan\", \"coconut oil\").\nEats(\"vegan\", \"olive oil\").\nEats(\"vegan\", \"avocado\").\nEats(\"vegan\", \"hummus\").\nEats(\"vegan\", \"guacamole\").\nEats(\"vegan\", \"salsa\").\nEats(\"vegan\", \"nutritional yeast\").\nEats(\"vegan\", \"vegan protein powder\").\nEats(\"vegan\", \"vegan protein bars\").\nEats(\"vegan\", \"vegan energy bars\").\nEats(\"vegan\", \"vegan granola bars\").\nEats(\"vegan\", \"vegan trail mix\").\nEats(\"vegan\", \"vegan jerky\").\nEats(\"vegan\", \"vegan chips\").\nEats(\"vegan\", \"vegan popcorn\").\nEats(\"vegan\", \"vegan cookies\").\nEats(\"vegan\", \"vegan cake\").\nEats(\"vegan\", \"vegan ice cream\").\nEats(\"vegan\", \"vegan chocolate\").\nEats(\"vegan\", \"vegan candy\").\nEats(\"vegan\", \"vegan gum\").\nEats(\"vegan\", \"vegan mints\").\nEats(\"vegan\", \"vegan protein bars\").\nEats(\"vegan\", \"vegan energy bars\").\nEats(\"vegan\", \"vegan granola bars\").\nEats(\"vegan\", \"vegan trail mix\").\nEats(\"vegan\", \"vegan jerky\").\nEats(\"vegan\", \"vegan chips\").\nEats(\"vegan\", \"vegan popcorn\").\nEats(\"vegan\", \"vegan cookies\").\nEats(\"vegan\", \"vegan cake\").\nEats(\"vegan\", \"vegan ice cream\").\nEats(\"vegan\", \"vegan chocolate\").\nEats(\"vegan\", \"vegan candy\").\nEats(\"vegan\", \"vegan gum\").\nEats(\"vegan\", \"vegan mints\").\nEats(\"vegan\", \"honey\")!\n.decl Answer()\nAnswer() :- Eats(\"vegan\", food), food = \"honey\".\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"vegan\", \"vegetables\").\nEats(\"vegan\", \"fruits\").\nEats(\"vegan\", \"nuts\").\nEats(\"vegan\", \"grains\").\nEats(\"vegan\", \"legumes\").\nEats(\"vegan\", \"tofu\").\nEats(\"vegan\", \"seitan\").\nEats(\"vegan\", \"tempeh\").\nEats(\"vegan\", \"soy milk\").\nEats(\"vegan\", \"almond milk\").\nEats(\"vegan\", \"coconut milk\").\nEats(\"vegan\", \"rice milk\").\nEats(\"vegan\", \"oat milk\").\nEats(\"vegan\", \"coconut oil\").\nEats(\"vegan\", \"olive oil\").\nEats(\"vegan\", \"avocado\").\nEats(\"vegan\", \"hummus\").\nEats(\"vegan\", \"guacamole\").\nEats(\"vegan\", \"salsa\").\nEats(\"vegan\", \"nutritional yeast\").\nEats(\"vegan\", \"vegan protein powder\").\nEats(\"vegan\", \"vegan protein bars\").\nEats(\"vegan\", \"vegan energy bars\").\nEats(\"vegan\", \"vegan granola bars\").\nEats(\"vegan\", \"vegan trail mix\").\nEats(\"vegan\", \"vegan jerky\").\nEats(\"vegan\", \"vegan chips\").\nEats(\"vegan\", \"vegan popcorn\").\nEats(\"vegan\", \"vegan cookies\").\nEats(\"vegan\", \"vegan cake\").\nEats(\"vegan\", \"vegan ice cream\").\nEats(\"vegan\", \"vegan chocolate\").\nEats(\"vegan\", \"vegan candy\").\nEats(\"vegan\", \"vegan gum\").\nEats(\"vegan\", \"vegan mints\").\nEats(\"vegan\", \"vegan protein bars\").\nEats(\"vegan\", \"vegan energy bars\").\nEats(\"vegan\", \"vegan granola bars\").\nEats(\"vegan\", \"vegan trail mix\").\nEats(\"vegan\", \"vegan jerky\").\nEats(\"vegan\", \"vegan chips\").\nEats(\"vegan\", \"vegan popcorn\").\nEats(\"vegan\", \"vegan cookies\").\nEats(\"vegan\", \"vegan cake\").\nEats(\"vegan\", \"vegan ice cream\").\nEats(\"vegan\", \"vegan chocolate\").\nEats(\"vegan\", \"vegan candy\").\nEats(\"vegan\", \"vegan gum\").\nEats(\"vegan\", \"vegan mints\").\nEats(\"vegan\", \"honey\")!\n.decl Answer()\nAnswer() :- Eats(\"vegan\", food), food = \"honey\".\n.output Answer"]}
{"id": 761, "answer": false, "completion": ".decl Handles_capacity(Port:symbol, Capacity:float)\nHandles_capacity(\"Port of Baltimore\", 1000000).\n.decl Produces_amount(Product:symbol, Amount:float)\nProduces_amount(\"ginger\", 5000000).\n.decl Answer()\nAnswer() :- Handles_capacity(\"Port of Baltimore\", capacity), Produces_amount(\"ginger\", amount), amount <= capacity.\n.output Answer", "completions": [".decl Handles_capacity(Port:symbol, Capacity:float)\nHandles_capacity(\"Port of Baltimore\", 1000000).\n.decl Produces_amount(Product:symbol, Amount:float)\nProduces_amount(\"ginger\", 5000000).\n.decl Answer()\nAnswer() :- Handles_capacity(\"Port of Baltimore\", capacity), Produces_amount(\"ginger\", amount), amount <= capacity.\n.output Answer"]}
{"id": 762, "answer": false, "completion": ".decl Flies(Person:symbol, Destination:symbol)\nFlies(\"Neil Armstrong\", \"moon\").\n.decl Answer()\nAnswer() :- Flies(\"Rachel Carson\", \"moon\").\n.output Answer", "completions": [".decl Flies(Person:symbol, Destination:symbol)\nFlies(\"Neil Armstrong\", \"moon\").\n.decl Answer()\nAnswer() :- Flies(\"Rachel Carson\", \"moon\").\n.output Answer"]}
{"id": 763, "answer": true, "completion": ".decl Asks(Person:symbol, Thing:symbol)\nAsks(\"J. D. Salinger\", \"quinceañera\").\n.decl Father(Person:symbol, Parent:symbol)\nFather(\"J. D. Salinger\", \"Sol Salinger\").\n.decl Answer()\nAnswer() :- Asks(\"J. D. Salinger\", \"quinceañera\"), !Father(\"J. D. Salinger\", \"quinceañera\").\n.output Answer", "completions": [".decl Asks(Person:symbol, Thing:symbol)\nAsks(\"J. D. Salinger\", \"quinceañera\").\n.decl Father(Person:symbol, Parent:symbol)\nFather(\"J. D. Salinger\", \"Sol Salinger\").\n.decl Answer()\nAnswer() :- Asks(\"J. D. Salinger\", \"quinceañera\"), !Father(\"J. D. Salinger\", \"quinceañera\").\n.output Answer"]}
{"id": 764, "answer": false, "completion": ".decl Has_attribute(Object:symbol, Attribute:symbol)\nHas_attribute(\"ancient Olympics crown\", \"gold\").\nHas_attribute(\"tonsure\", \"haircut\").\n.decl Fails_to_hide(Attribute:symbol, Body_part:symbol)\nFails_to_hide(\"tonsure\", \"head\").\n.decl Answer()\nAnswer() :- Has_attribute(\"ancient Olympics crown\", attribute), Fails_to_hide(attribute, body_part).\n.output Answer", "completions": [".decl Has_attribute(Object:symbol, Attribute:symbol)\nHas_attribute(\"ancient Olympics crown\", \"gold\").\nHas_attribute(\"tonsure\", \"haircut\").\n.decl Fails_to_hide(Attribute:symbol, Body_part:symbol)\nFails_to_hide(\"tonsure\", \"head\").\n.decl Answer()\nAnswer() :- Has_attribute(\"ancient Olympics crown\", attribute), Fails_to_hide(attribute, body_part).\n.output Answer"]}
{"id": 765, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"ocelot\", \"small mammals\").\nEats(\"bee hummingbird\", \"nectar\").\n.decl Needs_per_day(Animal:symbol, Amount:float)\nNeeds_per_day(\"ocelot\", 3).\nNeeds_per_day(\"bee hummingbird\", 0.5).\n.decl Answer()\nAnswer() :- Eats(\"ocelot\", prey), Eats(\"bee hummingbird\", food), Needs_per_day(\"ocelot\", amount1), Needs_per_day(\"bee hummingbird\", amount2), prey = \"bee hummingbird\", food = \"small mammals\", amount1 <= amount2.\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"ocelot\", \"small mammals\").\nEats(\"bee hummingbird\", \"nectar\").\n.decl Needs_per_day(Animal:symbol, Amount:float)\nNeeds_per_day(\"ocelot\", 3).\nNeeds_per_day(\"bee hummingbird\", 0.5).\n.decl Answer()\nAnswer() :- Eats(\"ocelot\", prey), Eats(\"bee hummingbird\", food), Needs_per_day(\"ocelot\", amount1), Needs_per_day(\"bee hummingbird\", amount2), prey = \"bee hummingbird\", food = \"small mammals\", amount1 <= amount2.\n.output Answer"]}
{"id": 766, "answer": true, "completion": ".decl Prefers(Food:symbol, Animal:symbol)\nPrefers(\"Eucalyptus\", \"Koala\").\nPrefers(\"meat\", \"Lion\").\n.decl Answer()\nAnswer() :- Prefers(\"Eucalyptus\", \"Koala\").\nAnswer() :- Prefers(food, \"Koala\"), food != \"Eucalyptus\".\n.output Answer", "completions": [".decl Prefers(Food:symbol, Animal:symbol)\nPrefers(\"Eucalyptus\", \"Koala\").\nPrefers(\"meat\", \"Lion\").\n.decl Answer()\nAnswer() :- Prefers(\"Eucalyptus\", \"Koala\").\nAnswer() :- Prefers(food, \"Koala\"), food != \"Eucalyptus\".\n.output Answer"]}
{"id": 767, "answer": false, "completion": ".decl Has_body_part(Animal:symbol, Body_part:symbol)\nHas_body_part(\"horse\", \"fetlock\").\n.decl Answer()\nAnswer() :- Has_body_part(\"horseradish\", body_part).\n.output Answer", "completions": [".decl Has_body_part(Animal:symbol, Body_part:symbol)\nHas_body_part(\"horse\", \"fetlock\").\n.decl Answer()\nAnswer() :- Has_body_part(\"horseradish\", body_part).\n.output Answer"]}
{"id": 768, "answer": false, "completion": ".decl Prevents(Method:symbol, Outcome:symbol)\nPrevents(\"abstinence\", \"pregnancy\").\nPrevents(\"contraception\", \"pregnancy\").\n.decl Answer()\nAnswer() :- !Prevents(method, \"abortion\").\n.output Answer", "completions": [".decl Prevents(Method:symbol, Outcome:symbol)\nPrevents(\"abstinence\", \"pregnancy\").\nPrevents(\"contraception\", \"pregnancy\").\n.decl Answer()\nAnswer() :- !Prevents(method, \"abortion\").\n.output Answer"]}
{"id": 769, "answer": false, "completion": ".decl Plays_music(Venue:symbol, Music_genre:symbol)\nPlays_music(\"smooth jazz club\", \"jazz\").\nPlays_music(\"rock club\", \"rock\").\n.decl Answer()\nAnswer() :- Plays_music(\"smooth jazz club\", genre1), !Plays_music(\"rock club\", genre2), genre1 != \"rock\".\n.output Answer", "completions": [".decl Plays_music(Venue:symbol, Music_genre:symbol)\nPlays_music(\"smooth jazz club\", \"jazz\").\nPlays_music(\"rock club\", \"rock\").\n.decl Answer()\nAnswer() :- Plays_music(\"smooth jazz club\", genre1), !Plays_music(\"rock club\", genre2), genre1 != \"rock\".\n.output Answer"]}
{"id": 770, "answer": true, "completion": ".decl Follows_in_footsteps(Person_A:symbol, Person_B:symbol)\nFollows_in_footsteps(\"Maya Angelou\", \"Guy Johnson\").\nFollows_in_footsteps(\"Maya Angelou\", \"Vivian Baxter\").\n.decl Answer()\nAnswer() :- Follows_in_footsteps(\"Maya Angelou\", child), Follows_in_footsteps(child, grandchild), Follows_in_footsteps(grandchild, \"Maya Angelou\").\n.output Answer", "completions": [".decl Follows_in_footsteps(Person_A:symbol, Person_B:symbol)\nFollows_in_footsteps(\"Maya Angelou\", \"Guy Johnson\").\nFollows_in_footsteps(\"Maya Angelou\", \"Vivian Baxter\").\n.decl Answer()\nAnswer() :- Follows_in_footsteps(\"Maya Angelou\", child), Follows_in_footsteps(child, grandchild), Follows_in_footsteps(grandchild, \"Maya Angelou\").\n.output Answer"]}
{"id": 771, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Alfa Romeo\", 4.2).\nHas_size(\"barn\", 5).\n.decl Answer()\nAnswer() :- Has_size(\"Alfa Romeo\", size1), Has_size(\"barn\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Alfa Romeo\", 4.2).\nHas_size(\"barn\", 5).\n.decl Answer()\nAnswer() :- Has_size(\"Alfa Romeo\", size1), Has_size(\"barn\", size2), size1 <= size2.\n.output Answer"]}
{"id": 772, "answer": true, "completion": ".decl Believes(Person:symbol, Statement:symbol)\nBelieves(\"James Watson\", \"Africans are less intelligent than Europeans\").\n.decl Answer()\nAnswer() :- !Believes(\"James Watson\", \"Africans are inferior to Europeans\").\n.output Answer", "completions": [".decl Believes(Person:symbol, Statement:symbol)\nBelieves(\"James Watson\", \"Africans are less intelligent than Europeans\").\n.decl Answer()\nAnswer() :- !Believes(\"James Watson\", \"Africans are inferior to Europeans\").\n.output Answer"]}
{"id": 773, "answer": false, "completion": ".decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"The Code of the Woosters\", \"P. G. Wodehouse\").\n.decl Taught_in_grade(Book:symbol, Grade:float)\nTaught_in_grade(\"The Cat in the Hat\", 1).\nTaught_in_grade(\"The Code of the Woosters\", 6).\n.decl Answer()\nAnswer() :- Written_by(book, \"P. G. Wodehouse\"), Taught_in_grade(book, grade), grade = 2.\n.output Answer", "completions": [".decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"The Code of the Woosters\", \"P. G. Wodehouse\").\n.decl Taught_in_grade(Book:symbol, Grade:float)\nTaught_in_grade(\"The Cat in the Hat\", 1).\nTaught_in_grade(\"The Code of the Woosters\", 6).\n.decl Answer()\nAnswer() :- Written_by(book, \"P. G. Wodehouse\"), Taught_in_grade(book, grade), grade = 2.\n.output Answer"]}
{"id": 774, "answer": true, "completion": ".decl Supports(Person:symbol, Group:symbol)\nSupports(\"Richard Wagner\", \"Nazis\").\n.decl Answer()\nAnswer() :- Supports(\"Richard Wagner\", \"Nazis\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Group:symbol)\nSupports(\"Richard Wagner\", \"Nazis\").\n.decl Answer()\nAnswer() :- Supports(\"Richard Wagner\", \"Nazis\").\n.output Answer"]}
{"id": 775, "answer": false, "completion": ".decl Recognizes_as_saint(Church:symbol, Saint:symbol)\nRecognizes_as_saint(\"Ukrainian Greek Catholic Church\", \"St. Josaphat\").\nRecognizes_as_saint(\"Russian Orthodox Church\", \"Alexander Nevsky\").\n.decl Answer()\nAnswer() :- Recognizes_as_saint(\"Ukrainian Greek Catholic Church\", saint), saint = \"Alexander Nevsky\".\n.output Answer", "completions": [".decl Recognizes_as_saint(Church:symbol, Saint:symbol)\nRecognizes_as_saint(\"Ukrainian Greek Catholic Church\", \"St. Josaphat\").\nRecognizes_as_saint(\"Russian Orthodox Church\", \"Alexander Nevsky\").\n.decl Answer()\nAnswer() :- Recognizes_as_saint(\"Ukrainian Greek Catholic Church\", saint), saint = \"Alexander Nevsky\".\n.output Answer"]}
{"id": 776, "answer": true, "completion": ".decl Hosts(Event:symbol, Location:symbol)\nHosts(\"Stanley Cup Finals\", \"arena\").\nHosts(\"Rock in Rio\", \"festival\").\n.decl Answer()\nAnswer() :- Hosts(\"Stanley Cup Finals\", location1), Hosts(\"Rock in Rio\", location2), location1 != location2.\n.output Answer", "completions": [".decl Hosts(Event:symbol, Location:symbol)\nHosts(\"Stanley Cup Finals\", \"arena\").\nHosts(\"Rock in Rio\", \"festival\").\n.decl Answer()\nAnswer() :- Hosts(\"Stanley Cup Finals\", location1), Hosts(\"Rock in Rio\", location2), location1 != location2.\n.output Answer"]}
{"id": 777, "answer": true, "completion": ".decl Represented(Person:symbol, Country:symbol)\nRepresented(\"Christopher Columbus\", \"Spain\").\n.decl Born_in(Person:symbol, Country:symbol)\nBorn_in(\"Christopher Columbus\", \"Italy\").\n.decl Answer()\nAnswer() :- Represented(\"Christopher Columbus\", country1), Born_in(\"Christopher Columbus\", country2), country1 != country2.\n.output Answer", "completions": [".decl Represented(Person:symbol, Country:symbol)\nRepresented(\"Christopher Columbus\", \"Spain\").\n.decl Born_in(Person:symbol, Country:symbol)\nBorn_in(\"Christopher Columbus\", \"Italy\").\n.decl Answer()\nAnswer() :- Represented(\"Christopher Columbus\", country1), Born_in(\"Christopher Columbus\", country2), country1 != country2.\n.output Answer"]}
{"id": 778, "answer": false, "completion": ".decl Memorized(Digit:float)\nMemorized(3).\nMemorized(1).\nMemorized(4).\n.decl Answer()\nAnswer() :- Digit != 3, Digit != 1, Digit != 4, !Memorized(Digit).\n.output Answer", "completions": [".decl Memorized(Digit:float)\nMemorized(3).\nMemorized(1).\nMemorized(4).\n.decl Answer()\nAnswer() :- Digit != 3, Digit != 1, Digit != 4, !Memorized(Digit).\n.output Answer"]}
{"id": 779, "answer": false, "completion": ".decl Created_by(Creator:symbol, Character:symbol)\nCreated_by(\"Stan Lee\", \"Doctor Strange\").\nCreated_by(\"Bob Kane\", \"Batman\").\n.decl Answer()\nAnswer() :- Created_by(\"Stan Lee\", character), Created_by(\"Bob Kane\", character), character != \"Doctor Strange\".\n.output Answer", "completions": [".decl Created_by(Creator:symbol, Character:symbol)\nCreated_by(\"Stan Lee\", \"Doctor Strange\").\nCreated_by(\"Bob Kane\", \"Batman\").\n.decl Answer()\nAnswer() :- Created_by(\"Stan Lee\", character), Created_by(\"Bob Kane\", character), character != \"Doctor Strange\".\n.output Answer"]}
{"id": 780, "answer": true, "completion": ".decl Dangerous(Animal:symbol)\nDangerous(\"hippo\").\n.decl Answer()\nAnswer() :- Dangerous(\"hippo\").\n.output Answer", "completions": [".decl Dangerous(Animal:symbol)\nDangerous(\"hippo\").\n.decl Answer()\nAnswer() :- Dangerous(\"hippo\").\n.output Answer"]}
{"id": 781, "answer": true, "completion": ".decl Originated_from(Sport:symbol, Origin:symbol)\nOriginated_from(\"Mixed martial arts\", \"various traditional martial arts\").\nOriginated_from(\"Mixed martial arts\", \"Brazilian Jiu-Jitsu\").\nOriginated_from(\"Roman Colosseum games\", \"ancient Greek and Etruscan games\").\nOriginated_from(\"Roman Colosseum games\", \"gladiatorial contests\").\n.decl Answer()\nAnswer() :- Originated_from(\"Mixed martial arts\", origin1), !Originated_from(\"Roman Colosseum games\", origin2), origin1 = origin2.\n.output Answer", "completions": [".decl Originated_from(Sport:symbol, Origin:symbol)\nOriginated_from(\"Mixed martial arts\", \"various traditional martial arts\").\nOriginated_from(\"Mixed martial arts\", \"Brazilian Jiu-Jitsu\").\nOriginated_from(\"Roman Colosseum games\", \"ancient Greek and Etruscan games\").\nOriginated_from(\"Roman Colosseum games\", \"gladiatorial contests\").\n.decl Answer()\nAnswer() :- Originated_from(\"Mixed martial arts\", origin1), !Originated_from(\"Roman Colosseum games\", origin2), origin1 = origin2.\n.output Answer"]}
{"id": 782, "answer": true, "completion": ".decl Temperature(Temperature:float)\nTemperature(30).\n.decl Wears_clothing(Person:symbol, Clothing:symbol)\nWears_clothing(\"school children in New York\", \"jacket\").\n.decl Answer()\nAnswer() :- Temperature(temperature), Wears_clothing(\"school children in New York\", \"jacket\"), temperature < 40.\n.output Answer", "completions": [".decl Temperature(Temperature:float)\nTemperature(30).\n.decl Wears_clothing(Person:symbol, Clothing:symbol)\nWears_clothing(\"school children in New York\", \"jacket\").\n.decl Answer()\nAnswer() :- Temperature(temperature), Wears_clothing(\"school children in New York\", \"jacket\"), temperature < 40.\n.output Answer"]}
{"id": 783, "answer": false, "completion": ".decl Relevant_to_topic(Person:symbol, Topic:symbol)\nRelevant_to_topic(\"Ariana Grande\", \"music\").\nRelevant_to_topic(\"post traumatic stress disorder\", \"mental health\").\n.decl Answer()\nAnswer() :- Relevant_to_topic(\"Ariana Grande\", topic), Relevant_to_topic(\"post traumatic stress disorder\", topic).\n.output Answer", "completions": [".decl Relevant_to_topic(Person:symbol, Topic:symbol)\nRelevant_to_topic(\"Ariana Grande\", \"music\").\nRelevant_to_topic(\"post traumatic stress disorder\", \"mental health\").\n.decl Answer()\nAnswer() :- Relevant_to_topic(\"Ariana Grande\", topic), Relevant_to_topic(\"post traumatic stress disorder\", topic).\n.output Answer"]}
{"id": 784, "answer": false, "completion": ".decl Located_in(City:symbol, Country:symbol)\nLocated_in(\"Tokyo\", \"Japan\").\n.decl Near_landmark(City:symbol, Landmark:symbol)\nNear_landmark(\"Tokyo\", \"Mount Fuji\").\nNear_landmark(\"Los Angeles\", \"Santa Monica Beach\").\n.decl Answer()\nAnswer() :- Located_in(city, \"Japan\"), Near_landmark(city, landmark), landmark = \"beach\".\n.output Answer", "completions": [".decl Located_in(City:symbol, Country:symbol)\nLocated_in(\"Tokyo\", \"Japan\").\n.decl Near_landmark(City:symbol, Landmark:symbol)\nNear_landmark(\"Tokyo\", \"Mount Fuji\").\nNear_landmark(\"Los Angeles\", \"Santa Monica Beach\").\n.decl Answer()\nAnswer() :- Located_in(city, \"Japan\"), Near_landmark(city, landmark), landmark = \"beach\".\n.output Answer"]}
{"id": 785, "answer": false, "completion": ".decl Takes_place(Event:symbol, Location:symbol)\nTakes_place(\"Superbowl Football Game\", \"stadium\").\nTakes_place(\"Gettysburg Battlefield\", \"battlefield\").\n.decl Has_capacity(Location:symbol, Capacity:float)\nHas_capacity(\"stadium\", 80000).\nHas_capacity(\"Gettysburg Battlefield\", 0).\n.decl Answer()\nAnswer() :- Takes_place(\"Superbowl Football Game\", location1), Takes_place(\"Gettysburg Battlefield\", location2), Has_capacity(location1, capacity1), Has_capacity(location2, capacity2), capacity1 > capacity2.\n.output Answer", "completions": [".decl Takes_place(Event:symbol, Location:symbol)\nTakes_place(\"Superbowl Football Game\", \"stadium\").\nTakes_place(\"Gettysburg Battlefield\", \"battlefield\").\n.decl Has_capacity(Location:symbol, Capacity:float)\nHas_capacity(\"stadium\", 80000).\nHas_capacity(\"Gettysburg Battlefield\", 0).\n.decl Answer()\nAnswer() :- Takes_place(\"Superbowl Football Game\", location1), Takes_place(\"Gettysburg Battlefield\", location2), Has_capacity(location1, capacity1), Has_capacity(location2, capacity2), capacity1 > capacity2.\n.output Answer"]}
{"id": 786, "answer": false, "completion": ".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Doctor Strange\", \"mystical symbols\").\nLikes(\"Pittsburgh Steelers\", \"black and gold\").\n.decl Answer()\nAnswer() :- Likes(\"Doctor Strange\", object1), Likes(\"Pittsburgh Steelers\", object2), object1 = object2.\n.output Answer", "completions": [".decl Likes(Person:symbol, Object:symbol)\nLikes(\"Doctor Strange\", \"mystical symbols\").\nLikes(\"Pittsburgh Steelers\", \"black and gold\").\n.decl Answer()\nAnswer() :- Likes(\"Doctor Strange\", object1), Likes(\"Pittsburgh Steelers\", object2), object1 = object2.\n.output Answer"]}
{"id": 787, "answer": false, "completion": ".decl Associated_with(Creature:symbol, Place:symbol)\nAssociated_with(\"Mickey Mouse\", \"Disney theme parks\").\nAssociated_with(\"Yeti\", \"Himalayas\").\n.decl Answer()\nAnswer() :- Associated_with(\"Yeti\", place), Associated_with(\"Disney theme parks\", !place).\n.output Answer", "completions": [".decl Associated_with(Creature:symbol, Place:symbol)\nAssociated_with(\"Mickey Mouse\", \"Disney theme parks\").\nAssociated_with(\"Yeti\", \"Himalayas\").\n.decl Answer()\nAnswer() :- Associated_with(\"Yeti\", place), Associated_with(\"Disney theme parks\", !place).\n.output Answer"]}
{"id": 788, "answer": true, "completion": ".decl Has_seasonal_leaves(Tree:symbol, Season:symbol)\nHas_seasonal_leaves(\"oak\", \"spring\").\nHas_seasonal_leaves(\"oak\", \"summer\").\nHas_seasonal_leaves(\"oak\", \"fall\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"winter\", \"December\").\nHappens_in_time(\"winter\", \"January\").\nHappens_in_time(\"winter\", \"February\").\n.decl Answer()\nAnswer() :- Has_seasonal_leaves(\"oak\", season), Happens_in_time(\"winter\", month), season != month.\n.output Answer", "completions": [".decl Has_seasonal_leaves(Tree:symbol, Season:symbol)\nHas_seasonal_leaves(\"oak\", \"spring\").\nHas_seasonal_leaves(\"oak\", \"summer\").\nHas_seasonal_leaves(\"oak\", \"fall\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"winter\", \"December\").\nHappens_in_time(\"winter\", \"January\").\nHappens_in_time(\"winter\", \"February\").\n.decl Answer()\nAnswer() :- Has_seasonal_leaves(\"oak\", season), Happens_in_time(\"winter\", month), season != month.\n.output Answer"]}
{"id": 789, "answer": false, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"Eddie Murphy\", 5).\n.decl Can_dial(Person:symbol)\nCan_dial(\"Eddie Murphy\").\n.decl Answer()\nAnswer() :- Age(\"Eddie Murphy\", age), Can_dial(\"Eddie Murphy\"), age >= 10.\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"Eddie Murphy\", 5).\n.decl Can_dial(Person:symbol)\nCan_dial(\"Eddie Murphy\").\n.decl Answer()\nAnswer() :- Age(\"Eddie Murphy\", age), Can_dial(\"Eddie Murphy\"), age >= 10.\n.output Answer"]}
{"id": 790, "answer": false, "completion": ".decl Is_used_in(Dish:symbol, Ingredient:symbol)\nIs_used_in(\"tostones\", \"plantains\").\nIs_used_in(\"bananas\", \"smoothies\").\n.decl Answer()\nAnswer() :- Is_used_in(\"tostones\", ingredient), Is_used_in(\"bananas\", ingredient).\n.output Answer", "completions": [".decl Is_used_in(Dish:symbol, Ingredient:symbol)\nIs_used_in(\"tostones\", \"plantains\").\nIs_used_in(\"bananas\", \"smoothies\").\n.decl Answer()\nAnswer() :- Is_used_in(\"tostones\", ingredient), Is_used_in(\"bananas\", ingredient).\n.output Answer"]}
{"id": 791, "answer": false, "completion": ".decl Is_multicultural(Insect:symbol)\nIs_multicultural(\"Africanized bees\").\n.decl Answer()\nAnswer() :- !Is_multicultural(insect).\n.output Answer", "completions": [".decl Is_multicultural(Insect:symbol)\nIs_multicultural(\"Africanized bees\").\n.decl Answer()\nAnswer() :- !Is_multicultural(insect).\n.output Answer"]}
{"id": 792, "answer": true, "completion": ".decl Can_lift_weight(Person:symbol, Weight:float)\nCan_lift_weight(\"Eddie Hall\", 500).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"world's largest cheeseburger\", 1000).\n.decl Answer()\nAnswer() :- Can_lift_weight(\"Eddie Hall\", weight1), Has_weight(\"world's largest cheeseburger\", weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Can_lift_weight(Person:symbol, Weight:float)\nCan_lift_weight(\"Eddie Hall\", 500).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"world's largest cheeseburger\", 1000).\n.decl Answer()\nAnswer() :- Can_lift_weight(\"Eddie Hall\", weight1), Has_weight(\"world's largest cheeseburger\", weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 793, "answer": false, "completion": ".decl Needs_large_tank(Fish:symbol)\nNeeds_large_tank(\"ocean sunfish\").\n.decl Needs_small_tank(Fish:symbol)\nNeeds_small_tank(\"goldfish\").\n.decl Answer()\nAnswer() :- Needs_large_tank(fish1), Needs_small_tank(fish2), fish1 != fish2.\n.output Answer", "completions": [".decl Needs_large_tank(Fish:symbol)\nNeeds_large_tank(\"ocean sunfish\").\n.decl Needs_small_tank(Fish:symbol)\nNeeds_small_tank(\"goldfish\").\n.decl Answer()\nAnswer() :- Needs_large_tank(fish1), Needs_small_tank(fish2), fish1 != fish2.\n.output Answer"]}
{"id": 794, "answer": false, "completion": ".decl Exporter(Country:symbol, Product:symbol, Value:float)\nExporter(\"United States\", \"Fair Trade products\", 1000).\nExporter(\"China\", \"Fair Trade products\", 500).\nExporter(\"Germany\", \"Fair Trade products\", 800).\n.decl Answer()\nAnswer() :- Exporter(country1, \"Fair Trade products\", value1), Exporter(\"United States\", \"Fair Trade products\", value2), value1 > value2, country1 != \"United States\".\n.output Answer", "completions": [".decl Exporter(Country:symbol, Product:symbol, Value:float)\nExporter(\"United States\", \"Fair Trade products\", 1000).\nExporter(\"China\", \"Fair Trade products\", 500).\nExporter(\"Germany\", \"Fair Trade products\", 800).\n.decl Answer()\nAnswer() :- Exporter(country1, \"Fair Trade products\", value1), Exporter(\"United States\", \"Fair Trade products\", value2), value1 > value2, country1 != \"United States\".\n.output Answer"]}
{"id": 795, "answer": true, "completion": ".decl Studies(Field:symbol, Subject:symbol)\nStudies(\"Biochemistry\", \"chemistry\").\nStudies(\"physics\", \"gluons\").\n.decl Answer()\nAnswer() :- Studies(\"Biochemistry\", subject), subject != \"gluons\".\n.output Answer", "completions": [".decl Studies(Field:symbol, Subject:symbol)\nStudies(\"Biochemistry\", \"chemistry\").\nStudies(\"physics\", \"gluons\").\n.decl Answer()\nAnswer() :- Studies(\"Biochemistry\", subject), subject != \"gluons\".\n.output Answer"]}
{"id": 796, "answer": true, "completion": ".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Earth\", 15).\nHas_temperature(\"Phobos\", -40).\n.decl Answer()\nAnswer() :- Has_temperature(\"Phobos\", temperature), temperature < 0.\n.output Answer", "completions": [".decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Earth\", 15).\nHas_temperature(\"Phobos\", -40).\n.decl Answer()\nAnswer() :- Has_temperature(\"Phobos\", temperature), temperature < 0.\n.output Answer"]}
{"id": 797, "answer": true, "completion": ".decl Is_in_history(Event:symbol)\nIs_in_history(\"World War II\").\nIs_in_history(\"Moon landing\").\nIs_in_history(\"Star Trek: The Next Generation\").\n.decl Answer()\nAnswer() :- Is_in_history(\"Star Trek: The Next Generation\").\n.output Answer", "completions": [".decl Is_in_history(Event:symbol)\nIs_in_history(\"World War II\").\nIs_in_history(\"Moon landing\").\nIs_in_history(\"Star Trek: The Next Generation\").\n.decl Answer()\nAnswer() :- Is_in_history(\"Star Trek: The Next Generation\").\n.output Answer"]}
{"id": 798, "answer": true, "completion": ".decl Knows(Person:symbol, Fact:symbol)\nKnows(\"Luke Skywalker\", \"Darth Vader is his father\").\n.decl Watched(Person:symbol, Movie:symbol)\nWatched(\"Luke Skywalker\", \"Star Wars\").\n.decl Answer()\nAnswer() :- Knows(\"Luke Skywalker\", \"Darth Vader is his father\").\nAnswer() :- Watched(person, movie), movie != \"Star Wars\", Knows(person, \"Darth Vader is his father\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Fact:symbol)\nKnows(\"Luke Skywalker\", \"Darth Vader is his father\").\n.decl Watched(Person:symbol, Movie:symbol)\nWatched(\"Luke Skywalker\", \"Star Wars\").\n.decl Answer()\nAnswer() :- Knows(\"Luke Skywalker\", \"Darth Vader is his father\").\nAnswer() :- Watched(person, movie), movie != \"Star Wars\", Knows(person, \"Darth Vader is his father\").\n.output Answer"]}
{"id": 799, "answer": true, "completion": ".decl Has_certification(Product:symbol, Certification:symbol)\nHas_certification(\"laptop\", \"fair trade\").\n.decl Answer()\nAnswer() :- Has_certification(\"laptop\", \"fair trade\").\n.output Answer", "completions": [".decl Has_certification(Product:symbol, Certification:symbol)\nHas_certification(\"laptop\", \"fair trade\").\n.decl Answer()\nAnswer() :- Has_certification(\"laptop\", \"fair trade\").\n.output Answer"]}
{"id": 800, "answer": true, "completion": ".decl Requires_degree(School:symbol, Degree:symbol)\nRequires_degree(\"SUNY\", \"doctorate\").\n.decl Answer()\nAnswer() :- Requires_degree(\"SUNY\", \"doctorate\").\n.output Answer", "completions": [".decl Requires_degree(School:symbol, Degree:symbol)\nRequires_degree(\"SUNY\", \"doctorate\").\n.decl Answer()\nAnswer() :- Requires_degree(\"SUNY\", \"doctorate\").\n.output Answer"]}
{"id": 801, "answer": true, "completion": ".decl Based_on_work(Work:symbol, Based_on:symbol)\nBased_on_work(\"Parsifal\", \"Parzival\").\nBased_on_work(\"Parzival\", \"British folklore\").\n.decl Answer()\nAnswer() :- Based_on_work(\"Parsifal\", based_on), Based_on_work(based_on, \"British folklore\").\n.output Answer", "completions": [".decl Based_on_work(Work:symbol, Based_on:symbol)\nBased_on_work(\"Parsifal\", \"Parzival\").\nBased_on_work(\"Parzival\", \"British folklore\").\n.decl Answer()\nAnswer() :- Based_on_work(\"Parsifal\", based_on), Based_on_work(based_on, \"British folklore\").\n.output Answer"]}
{"id": 802, "answer": false, "completion": ".decl Contains(Ingredient:symbol, Dish:symbol)\nContains(\"sodium\", \"ramen\").\nContains(\"monosodium glutamate\", \"ramen\").\nContains(\"potassium\", \"ramen\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"heart failure\").\n.decl Avoids_ingredient(Condition:symbol, Ingredient:symbol)\nAvoids_ingredient(\"heart failure\", \"sodium\").\nAvoids_ingredient(\"heart failure\", \"potassium\").\n.decl Answer()\nAnswer() :- Contains(ingredient, \"ramen\"), Has_condition(\"John\", condition), Avoids_ingredient(condition, ingredient), !.\nAnswer() :- Contains(\"monosodium glutamate\", \"ramen\").\n.output Answer", "completions": [".decl Contains(Ingredient:symbol, Dish:symbol)\nContains(\"sodium\", \"ramen\").\nContains(\"monosodium glutamate\", \"ramen\").\nContains(\"potassium\", \"ramen\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"heart failure\").\n.decl Avoids_ingredient(Condition:symbol, Ingredient:symbol)\nAvoids_ingredient(\"heart failure\", \"sodium\").\nAvoids_ingredient(\"heart failure\", \"potassium\").\n.decl Answer()\nAnswer() :- Contains(ingredient, \"ramen\"), Has_condition(\"John\", condition), Avoids_ingredient(condition, ingredient), !.\nAnswer() :- Contains(\"monosodium glutamate\", \"ramen\").\n.output Answer"]}
{"id": 803, "answer": false, "completion": ".decl Is_edible(Food:symbol)\nIs_edible(\"French Toast\").\n.decl Is_vulnerable_to_death(House:symbol)\nIs_vulnerable_to_death(\"Lannister\").\n.decl Answer()\nAnswer() :- Is_edible(food), !Is_vulnerable_to_death(house).\n.output Answer", "completions": [".decl Is_edible(Food:symbol)\nIs_edible(\"French Toast\").\n.decl Is_vulnerable_to_death(House:symbol)\nIs_vulnerable_to_death(\"Lannister\").\n.decl Answer()\nAnswer() :- Is_edible(food), !Is_vulnerable_to_death(house).\n.output Answer"]}
{"id": 804, "answer": true, "completion": ".decl Is_character(Character:symbol)\nIs_character(\"Elder Price\").\nIs_character(\"Eliza Doolittle\").\n.decl Is_play(Play:symbol)\nIs_play(\"The Book of Mormon\").\nIs_play(\"My Fair Lady\").\n.decl Is_role(Character:symbol, Play:symbol)\nIs_role(\"Elder Price\", \"The Book of Mormon\").\nIs_role(\"Eliza Doolittle\", \"My Fair Lady\").\n.decl Is_profession(Character:symbol, Profession:symbol)\nIs_profession(\"Elder Price\", \"missionary\").\n.decl Answer()\nAnswer() :- Is_role(character, play), Is_profession(character, \"missionary\").\n.output Answer", "completions": [".decl Is_character(Character:symbol)\nIs_character(\"Elder Price\").\nIs_character(\"Eliza Doolittle\").\n.decl Is_play(Play:symbol)\nIs_play(\"The Book of Mormon\").\nIs_play(\"My Fair Lady\").\n.decl Is_role(Character:symbol, Play:symbol)\nIs_role(\"Elder Price\", \"The Book of Mormon\").\nIs_role(\"Eliza Doolittle\", \"My Fair Lady\").\n.decl Is_profession(Character:symbol, Profession:symbol)\nIs_profession(\"Elder Price\", \"missionary\").\n.decl Answer()\nAnswer() :- Is_role(character, play), Is_profession(character, \"missionary\").\n.output Answer"]}
{"id": 805, "answer": false, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Carmen Electra\", \"car\").\n.decl Is_junk(Object:symbol)\nIs_junk(\"old car\").\n.decl Answer()\nAnswer() :- Owns(\"Carmen Electra\", object), Is_junk(object).\n.output Answer", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Carmen Electra\", \"car\").\n.decl Is_junk(Object:symbol)\nIs_junk(\"old car\").\n.decl Answer()\nAnswer() :- Owns(\"Carmen Electra\", object), Is_junk(object).\n.output Answer"]}
{"id": 806, "answer": true, "completion": ".decl Used_in_religion(Symbol:symbol, Religion:symbol)\nUsed_in_religion(\"swastika\", \"Hinduism\").\nUsed_in_religion(\"cross\", \"Christianity\").\nUsed_in_religion(\"crescent moon\", \"Islam\").\nUsed_in_religion(\"star of David\", \"Judaism\").\n.decl Answer()\nAnswer() :- Used_in_religion(\"swastika\", \"Hinduism\").\n.output Answer", "completions": [".decl Used_in_religion(Symbol:symbol, Religion:symbol)\nUsed_in_religion(\"swastika\", \"Hinduism\").\nUsed_in_religion(\"cross\", \"Christianity\").\nUsed_in_religion(\"crescent moon\", \"Islam\").\nUsed_in_religion(\"star of David\", \"Judaism\").\n.decl Answer()\nAnswer() :- Used_in_religion(\"swastika\", \"Hinduism\").\n.output Answer"]}
{"id": 807, "answer": true, "completion": ".decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"Malcolm X\", \"ham\").\n.decl Answer()\nAnswer() :- Avoids(\"Malcolm X\", \"ham\").\n.output Answer", "completions": [".decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"Malcolm X\", \"ham\").\n.decl Answer()\nAnswer() :- Avoids(\"Malcolm X\", \"ham\").\n.output Answer"]}
{"id": 808, "answer": true, "completion": ".decl Can_walk_on_legs(Animal:symbol, N_legs:float)\nCan_walk_on_legs(\"greyhound\", 4).\n.decl Answer()\nAnswer() :- Can_walk_on_legs(\"greyhound\", n_legs), n_legs >= 2.\n.output Answer", "completions": [".decl Can_walk_on_legs(Animal:symbol, N_legs:float)\nCan_walk_on_legs(\"greyhound\", 4).\n.decl Answer()\nAnswer() :- Can_walk_on_legs(\"greyhound\", n_legs), n_legs >= 2.\n.output Answer"]}
{"id": 809, "answer": true, "completion": ".decl Needs_tool(Grade_level:symbol, Tool:symbol)\nNeeds_tool(\"Elementary School\", \"pencils\").\nNeeds_tool(\"Middle School\", \"graphing calculator\").\nNeeds_tool(\"High School\", \"scientific calculator\").\n.decl Answer()\nAnswer() :- Needs_tool(\"Elementary School\", tool).\n.output Answer", "completions": [".decl Needs_tool(Grade_level:symbol, Tool:symbol)\nNeeds_tool(\"Elementary School\", \"pencils\").\nNeeds_tool(\"Middle School\", \"graphing calculator\").\nNeeds_tool(\"High School\", \"scientific calculator\").\n.decl Answer()\nAnswer() :- Needs_tool(\"Elementary School\", tool).\n.output Answer"]}
{"id": 810, "answer": false, "completion": ".decl Is_type_of(Object:symbol, Type:symbol)\nIs_type_of(\"SnapCap\", \"mobile app\").\nIs_type_of(\"Walmart\", \"retail store\").\n.decl Answer()\nAnswer() :- Is_type_of(\"SnapCap\", \"retail store\").\n.output Answer", "completions": [".decl Is_type_of(Object:symbol, Type:symbol)\nIs_type_of(\"SnapCap\", \"mobile app\").\nIs_type_of(\"Walmart\", \"retail store\").\n.decl Answer()\nAnswer() :- Is_type_of(\"SnapCap\", \"retail store\").\n.output Answer"]}
{"id": 811, "answer": true, "completion": ".decl Can_support_weight(Vehicle:symbol, Weight:float)\nCan_support_weight(\"2019 Toyota Hilux\", 1000).\n.decl Weight_of_object(Object:symbol, Weight:float)\nWeight_of_object(\"Big John Studd clone\", 300).\n.decl Answer()\nAnswer() :- Can_support_weight(vehicle, weight1), Weight_of_object(\"Big John Studd clone\", weight2), weight1 >= weight2*30.\n.output Answer", "completions": [".decl Can_support_weight(Vehicle:symbol, Weight:float)\nCan_support_weight(\"2019 Toyota Hilux\", 1000).\n.decl Weight_of_object(Object:symbol, Weight:float)\nWeight_of_object(\"Big John Studd clone\", 300).\n.decl Answer()\nAnswer() :- Can_support_weight(vehicle, weight1), Weight_of_object(\"Big John Studd clone\", weight2), weight1 >= weight2*30.\n.output Answer"]}
{"id": 812, "answer": true, "completion": ".decl Named_after(Team:symbol, Animal:symbol)\nNamed_after(\"Tigers\", \"feline\").\nNamed_after(\"Lions\", \"feline\").\nNamed_after(\"Bears\", \"ursine\").\n.decl Answer()\nAnswer() :- Named_after(team, \"feline\").\n.output Answer", "completions": [".decl Named_after(Team:symbol, Animal:symbol)\nNamed_after(\"Tigers\", \"feline\").\nNamed_after(\"Lions\", \"feline\").\nNamed_after(\"Bears\", \"ursine\").\n.decl Answer()\nAnswer() :- Named_after(team, \"feline\").\n.output Answer"]}
{"id": 813, "answer": true, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"telescope\", \"sight\").\nHas_property(\"microphone\", \"sound\").\n.decl Answer()\nAnswer() :- Has_property(\"telescope\", property), !Has_property(\"microphone\", property).\n.output Answer", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"telescope\", \"sight\").\nHas_property(\"microphone\", \"sound\").\n.decl Answer()\nAnswer() :- Has_property(\"telescope\", property), !Has_property(\"microphone\", property).\n.output Answer"]}
{"id": 814, "answer": true, "completion": ".decl Mythical_home(Location:symbol, Deity:symbol)\nMythical_home(\"Pearl Harbor\", \"shark goddess\").\n.decl Answer()\nAnswer() :- Mythical_home(\"Pearl Harbor\", \"shark goddess\").\n.output Answer", "completions": [".decl Mythical_home(Location:symbol, Deity:symbol)\nMythical_home(\"Pearl Harbor\", \"shark goddess\").\n.decl Answer()\nAnswer() :- Mythical_home(\"Pearl Harbor\", \"shark goddess\").\n.output Answer"]}
{"id": 815, "answer": false, "completion": ".decl Population(City:symbol, Population:float)\nPopulation(\"Albany, GA\", 77044).\nPopulation(\"Albany, NY\", 97856).\n.decl Answer()\nAnswer() :- Population(\"Albany, GA\", pop1), Population(\"Albany, NY\", pop2), pop1 > pop2.\n.output Answer", "completions": [".decl Population(City:symbol, Population:float)\nPopulation(\"Albany, GA\", 77044).\nPopulation(\"Albany, NY\", 97856).\n.decl Answer()\nAnswer() :- Population(\"Albany, GA\", pop1), Population(\"Albany, NY\", pop2), pop1 > pop2.\n.output Answer"]}
{"id": 816, "answer": true, "completion": ".decl Happens_at(Event:symbol, Location:symbol)\nHappens_at(\"Burning Man\", \"Black Rock Desert\").\n.decl Has_sunburn_rate(Location:symbol, Sunburn_rate:float)\nHas_sunburn_rate(\"normal\", 0.1).\nHas_sunburn_rate(\"Black Rock Desert\", 0.5).\n.decl Answer()\nAnswer() :- Happens_at(\"Burning Man\", location), Has_sunburn_rate(location, rate), rate > 0.1.\n.output Answer", "completions": [".decl Happens_at(Event:symbol, Location:symbol)\nHappens_at(\"Burning Man\", \"Black Rock Desert\").\n.decl Has_sunburn_rate(Location:symbol, Sunburn_rate:float)\nHas_sunburn_rate(\"normal\", 0.1).\nHas_sunburn_rate(\"Black Rock Desert\", 0.5).\n.decl Answer()\nAnswer() :- Happens_at(\"Burning Man\", location), Has_sunburn_rate(location, rate), rate > 0.1.\n.output Answer"]}
{"id": 817, "answer": false, "completion": ".decl Is_ancestor(Person_A:symbol, Person_B:symbol)\nIs_ancestor(\"Reza Shah\", \"Mohammad Reza Shah\").\nIs_ancestor(\"Mohammad Reza Shah\", \"Farah Pahlavi\").\nIs_ancestor(\"Queen Elizabeth I\", \"Queen Elizabeth II\").\nIs_ancestor(\"Queen Elizabeth II\", \"Prince Charles\").\n.decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(Person_A, Person_B) :- Is_ancestor(Person_A, Person_B).\nIs_related(Person_A, Person_B) :- Is_ancestor(Person_B, Person_A).\n.decl Answer()\nAnswer() :- Is_related(\"Reza Shah\", \"Queen Elizabeth I\").\n.output Answer", "completions": [".decl Is_ancestor(Person_A:symbol, Person_B:symbol)\nIs_ancestor(\"Reza Shah\", \"Mohammad Reza Shah\").\nIs_ancestor(\"Mohammad Reza Shah\", \"Farah Pahlavi\").\nIs_ancestor(\"Queen Elizabeth I\", \"Queen Elizabeth II\").\nIs_ancestor(\"Queen Elizabeth II\", \"Prince Charles\").\n.decl Is_related(Person_A:symbol, Person_B:symbol)\nIs_related(Person_A, Person_B) :- Is_ancestor(Person_A, Person_B).\nIs_related(Person_A, Person_B) :- Is_ancestor(Person_B, Person_A).\n.decl Answer()\nAnswer() :- Is_related(\"Reza Shah\", \"Queen Elizabeth I\").\n.output Answer"]}
{"id": 818, "answer": false, "completion": ".decl Runs_on(OS:symbol, System:symbol)\nRuns_on(\"Ubuntu\", \"linux\").\nRuns_on(\"Windows\", \"Microsoft\").\nRuns_on(\"MacOS\", \"Apple\").\n.decl Answer()\nAnswer() :- Runs_on(\"focal fossa\", system), Runs_on(os, system), os = \"linux\".\n.output Answer", "completions": [".decl Runs_on(OS:symbol, System:symbol)\nRuns_on(\"Ubuntu\", \"linux\").\nRuns_on(\"Windows\", \"Microsoft\").\nRuns_on(\"MacOS\", \"Apple\").\n.decl Answer()\nAnswer() :- Runs_on(\"focal fossa\", system), Runs_on(os, system), os = \"linux\".\n.output Answer"]}
{"id": 819, "answer": false, "completion": ".decl Can_cure(Disease:symbol, Treatment:symbol)\nCan_cure(\"broken bone\", \"cast\").\n.decl Answer()\nAnswer() :- Can_cure(\"dementia\", treatment).\n.output Answer\n\n// Note: This question is not answerable with the given information, as there is no known cure for dementia and it cannot be treated with a cast. This is just an example of how the Datalog program would be written.", "completions": [".decl Can_cure(Disease:symbol, Treatment:symbol)\nCan_cure(\"broken bone\", \"cast\").\n.decl Answer()\nAnswer() :- Can_cure(\"dementia\", treatment).\n.output Answer\n\n// Note: This question is not answerable with the given information, as there is no known cure for dementia and it cannot be treated with a cast. This is just an example of how the Datalog program would be written."]}
{"id": 820, "answer": false, "completion": ".decl Can_use_tool(Animal:symbol, Tool:symbol)\nCan_use_tool(\"monkey\", \"stick\").\nCan_use_tool(\"monkey\", \"rock\").\n.decl Answer()\nAnswer() :- Can_use_tool(\"monkey\", \"QWERTY keyboard\").\n.output Answer", "completions": [".decl Can_use_tool(Animal:symbol, Tool:symbol)\nCan_use_tool(\"monkey\", \"stick\").\nCan_use_tool(\"monkey\", \"rock\").\n.decl Answer()\nAnswer() :- Can_use_tool(\"monkey\", \"QWERTY keyboard\").\n.output Answer"]}
{"id": 821, "answer": false, "completion": ".decl Used_for_purpose(Event:symbol, Purpose:symbol)\nUsed_for_purpose(\"Groundhog Day\", \"predicting weather\").\nUsed_for_purpose(\"New Year's Day\", \"celebrating the start of a new year\").\nUsed_for_purpose(\"Thanksgiving\", \"celebrating the harvest and giving thanks\").\n.decl Answer()\nAnswer() :- Used_for_purpose(\"Groundhog Day\", \"global season indicator\").\n.output Answer", "completions": [".decl Used_for_purpose(Event:symbol, Purpose:symbol)\nUsed_for_purpose(\"Groundhog Day\", \"predicting weather\").\nUsed_for_purpose(\"New Year's Day\", \"celebrating the start of a new year\").\nUsed_for_purpose(\"Thanksgiving\", \"celebrating the harvest and giving thanks\").\n.decl Answer()\nAnswer() :- Used_for_purpose(\"Groundhog Day\", \"global season indicator\").\n.output Answer"]}
{"id": 822, "answer": true, "completion": ".decl Depends_on(Brand:symbol, Organism:symbol)\nDepends_on(\"Nice\", \"Western honey bee\").\n.decl Answer()\nAnswer() :- Depends_on(\"Nice\", organism).\n.output Answer", "completions": [".decl Depends_on(Brand:symbol, Organism:symbol)\nDepends_on(\"Nice\", \"Western honey bee\").\n.decl Answer()\nAnswer() :- Depends_on(\"Nice\", organism).\n.output Answer"]}
{"id": 823, "answer": true, "completion": ".decl Patented_in(Item:symbol, Country:symbol)\nPatented_in(\"karaoke\", \"Japan\").\nPatented_in(\"turtle power tiller\", \"Japan\").\nPatented_in(\"karaoke machine\", \"Philippines\").\n.decl Answer()\nAnswer() :- Patented_in(\"karaoke\", country), Patented_in(\"turtle power tiller\", country).\n.output Answer", "completions": [".decl Patented_in(Item:symbol, Country:symbol)\nPatented_in(\"karaoke\", \"Japan\").\nPatented_in(\"turtle power tiller\", \"Japan\").\nPatented_in(\"karaoke machine\", \"Philippines\").\n.decl Answer()\nAnswer() :- Patented_in(\"karaoke\", country), Patented_in(\"turtle power tiller\", country).\n.output Answer"]}
{"id": 824, "answer": true, "completion": ".decl Current_president(Person:symbol, University:symbol)\nCurrent_president(\"M. Duane Nellis\", \"Ohio University\").\n.decl Wears_clothing(Person:symbol, Clothing:symbol)\nWears_clothing(\"M. Duane Nellis\", \"suit\").\n.decl Answer()\nAnswer() :- Wears_clothing(\"M. Duane Nellis\", clothing), clothing != \"jockstrap\".\n.output Answer", "completions": [".decl Current_president(Person:symbol, University:symbol)\nCurrent_president(\"M. Duane Nellis\", \"Ohio University\").\n.decl Wears_clothing(Person:symbol, Clothing:symbol)\nWears_clothing(\"M. Duane Nellis\", \"suit\").\n.decl Answer()\nAnswer() :- Wears_clothing(\"M. Duane Nellis\", clothing), clothing != \"jockstrap\".\n.output Answer"]}
{"id": 825, "answer": true, "completion": ".decl Parent(Person_A:symbol, Person_B:symbol)\nParent(\"Alice\", \"Bob\").\nParent(\"Bob\", \"Charlie\").\n.decl Grandparent(Person_A:symbol, Person_C:symbol)\nGrandparent(\"Alice\", \"Charlie\").\n.decl Answer()\nAnswer() :- Grandparent(person1, person2), Parent(person1, parent), Parent(parent, person2), person1 != person2.\n.output Answer", "completions": [".decl Parent(Person_A:symbol, Person_B:symbol)\nParent(\"Alice\", \"Bob\").\nParent(\"Bob\", \"Charlie\").\n.decl Grandparent(Person_A:symbol, Person_C:symbol)\nGrandparent(\"Alice\", \"Charlie\").\n.decl Answer()\nAnswer() :- Grandparent(person1, person2), Parent(person1, parent), Parent(parent, person2), person1 != person2.\n.output Answer"]}
{"id": 826, "answer": false, "completion": ".decl Has_board_game(Board_game:symbol)\nHas_board_game(\"chess\").\nHas_board_game(\"Shogi\").\n.decl Can_convert(Board_game1:symbol, Board_game2:symbol)\nCan_convert(\"chess\", \"Shogi\").\n.decl Answer()\nAnswer() :- Has_board_game(\"chess\"), Has_board_game(\"Shogi\"), Can_convert(\"chess\", \"Shogi\").\n.output Answer", "completions": [".decl Has_board_game(Board_game:symbol)\nHas_board_game(\"chess\").\nHas_board_game(\"Shogi\").\n.decl Can_convert(Board_game1:symbol, Board_game2:symbol)\nCan_convert(\"chess\", \"Shogi\").\n.decl Answer()\nAnswer() :- Has_board_game(\"chess\"), Has_board_game(\"Shogi\"), Can_convert(\"chess\", \"Shogi\").\n.output Answer"]}
{"id": 827, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Darth Vader\", \"artificial respiratory system\").\n.decl Answer()\nAnswer() :- Has_condition(\"Darth Vader\", condition), condition != \"Coronavirus\".\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Darth Vader\", \"artificial respiratory system\").\n.decl Answer()\nAnswer() :- Has_condition(\"Darth Vader\", condition), condition != \"Coronavirus\".\n.output Answer"]}
{"id": 828, "answer": false, "completion": ".decl Belongs_to_pantheon(Entity:symbol, Pantheon:symbol)\nBelongs_to_pantheon(\"Zeus\", \"Greek\").\nBelongs_to_pantheon(\"Odin\", \"Norse\").\nBelongs_to_pantheon(\"Anubis\", \"Egyptian\").\n.decl Answer()\nAnswer() :- Belongs_to_pantheon(\"Flying Spaghetti Monster\", pantheon).\n.output Answer", "completions": [".decl Belongs_to_pantheon(Entity:symbol, Pantheon:symbol)\nBelongs_to_pantheon(\"Zeus\", \"Greek\").\nBelongs_to_pantheon(\"Odin\", \"Norse\").\nBelongs_to_pantheon(\"Anubis\", \"Egyptian\").\n.decl Answer()\nAnswer() :- Belongs_to_pantheon(\"Flying Spaghetti Monster\", pantheon).\n.output Answer"]}
{"id": 829, "answer": true, "completion": ".decl Alphabet_order(Letter:symbol, Order:float)\nAlphabet_order(\"A\", 1).\nAlphabet_order(\"B\", 2).\nAlphabet_order(\"C\", 3).\n.decl Birth_order(Person:symbol, Order:float)\nBirth_order(\"Prince Harry\", 2).\n.decl Answer()\nAnswer() :- Alphabet_order(\"B\", order1), Birth_order(\"Prince Harry\", order2), order1 = order2.\n.output Answer", "completions": [".decl Alphabet_order(Letter:symbol, Order:float)\nAlphabet_order(\"A\", 1).\nAlphabet_order(\"B\", 2).\nAlphabet_order(\"C\", 3).\n.decl Birth_order(Person:symbol, Order:float)\nBirth_order(\"Prince Harry\", 2).\n.decl Answer()\nAnswer() :- Alphabet_order(\"B\", order1), Birth_order(\"Prince Harry\", order2), order1 = order2.\n.output Answer"]}
{"id": 830, "answer": true, "completion": ".decl Can_swallow(Animal:symbol, Object:symbol)\nCan_swallow(\"snake\", \"mouse\").\nCan_swallow(\"snake\", \"rat\").\nCan_swallow(\"snake\", \"rabbit\").\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"M60 Patton\", 6.9).\n.decl Answer()\nAnswer() :- Can_swallow(\"snake\", object), Has_size(\"M60 Patton\", size), size < 2.5.\n.output Answer", "completions": [".decl Can_swallow(Animal:symbol, Object:symbol)\nCan_swallow(\"snake\", \"mouse\").\nCan_swallow(\"snake\", \"rat\").\nCan_swallow(\"snake\", \"rabbit\").\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"M60 Patton\", 6.9).\n.decl Answer()\nAnswer() :- Can_swallow(\"snake\", object), Has_size(\"M60 Patton\", size), size < 2.5.\n.output Answer"]}
{"id": 831, "answer": false, "completion": ".decl Is_type_of(Plant:symbol, Type:symbol)\nIs_type_of(\"chives\", \"herb\").\nIs_type_of(\"grass\", \"grass\").\n.decl Answer()\nAnswer() :- Is_type_of(\"chives\", type1), Is_type_of(\"grass\", type2), type1 = type2.\n.output Answer", "completions": [".decl Is_type_of(Plant:symbol, Type:symbol)\nIs_type_of(\"chives\", \"herb\").\nIs_type_of(\"grass\", \"grass\").\n.decl Answer()\nAnswer() :- Is_type_of(\"chives\", type1), Is_type_of(\"grass\", type2), type1 = type2.\n.output Answer"]}
{"id": 832, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person1\", \"Anorexia nervosa\").\n.decl Has_risk_factor(Person:symbol, Risk_factor:symbol)\nHas_risk_factor(\"person1\", \"low bone density\").\nHas_risk_factor(\"person2\", \"regular\").\n.decl Answer()\nAnswer() :- Has_condition(\"person1\", \"Anorexia nervosa\"), Has_risk_factor(\"person1\", risk_factor1), Has_risk_factor(\"person2\", risk_factor2), risk_factor1 = \"low bone density\", risk_factor2 != \"low bone density\".\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person1\", \"Anorexia nervosa\").\n.decl Has_risk_factor(Person:symbol, Risk_factor:symbol)\nHas_risk_factor(\"person1\", \"low bone density\").\nHas_risk_factor(\"person2\", \"regular\").\n.decl Answer()\nAnswer() :- Has_condition(\"person1\", \"Anorexia nervosa\"), Has_risk_factor(\"person1\", risk_factor1), Has_risk_factor(\"person2\", risk_factor2), risk_factor1 = \"low bone density\", risk_factor2 != \"low bone density\".\n.output Answer"]}
{"id": 833, "answer": false, "completion": ".decl Has_trait(Animal:symbol, Trait:symbol, Value:float)\nHas_trait(\"bull shark\", \"aggressiveness\", 0.8).\nHas_trait(\"bull shark\", \"sharkness\", 0.6).\n.decl Answer()\nAnswer() :- Has_trait(\"bull shark\", \"aggressiveness\", value1), Has_trait(\"bull shark\", \"sharkness\", value2), value1 > value2.\n.output Answer", "completions": [".decl Has_trait(Animal:symbol, Trait:symbol, Value:float)\nHas_trait(\"bull shark\", \"aggressiveness\", 0.8).\nHas_trait(\"bull shark\", \"sharkness\", 0.6).\n.decl Answer()\nAnswer() :- Has_trait(\"bull shark\", \"aggressiveness\", value1), Has_trait(\"bull shark\", \"sharkness\", value2), value1 > value2.\n.output Answer"]}
{"id": 834, "answer": false, "completion": ".decl Died_from(Person:symbol, Cause:symbol)\nDied_from(\"Abraham Lincoln\", \"assassination\").\nDied_from(\"William McKinley\", \"assassination\").\n.decl Served_as_president(Person:symbol, Start_year:float, End_year:float)\nServed_as_president(\"William McKinley\", 1897, 1901).\n.decl Answer()\nAnswer() :- Served_as_president(\"William McKinley\", start_year, end_year), Died_from(\"Abraham Lincoln\", cause), Died_from(\"William McKinley\", cause), cause != \"assassination\", end_year <= 1865.\n.output Answer", "completions": [".decl Died_from(Person:symbol, Cause:symbol)\nDied_from(\"Abraham Lincoln\", \"assassination\").\nDied_from(\"William McKinley\", \"assassination\").\n.decl Served_as_president(Person:symbol, Start_year:float, End_year:float)\nServed_as_president(\"William McKinley\", 1897, 1901).\n.decl Answer()\nAnswer() :- Served_as_president(\"William McKinley\", start_year, end_year), Died_from(\"Abraham Lincoln\", cause), Died_from(\"William McKinley\", cause), cause != \"assassination\", end_year <= 1865.\n.output Answer"]}
{"id": 835, "answer": false, "completion": ".decl Collaborates_with(Person1:symbol, Person2:symbol)\nCollaborates_with(\"Aretha Franklin\", \"George Michael\").\nCollaborates_with(\"Aretha Franklin\", \"Whitney Houston\").\n.decl Commits_suicide(Person:symbol)\nCommits_suicide(\"George Michael\").\n.decl Answer()\nAnswer() :- Collaborates_with(\"Aretha Franklin\", person), Commits_suicide(person).\n.output Answer", "completions": [".decl Collaborates_with(Person1:symbol, Person2:symbol)\nCollaborates_with(\"Aretha Franklin\", \"George Michael\").\nCollaborates_with(\"Aretha Franklin\", \"Whitney Houston\").\n.decl Commits_suicide(Person:symbol)\nCommits_suicide(\"George Michael\").\n.decl Answer()\nAnswer() :- Collaborates_with(\"Aretha Franklin\", person), Commits_suicide(person).\n.output Answer"]}
{"id": 836, "answer": false, "completion": ".decl Has_extra_wheels(Object:symbol)\nHas_extra_wheels(\"tricycle\").\nHas_extra_wheels(\"training wheels\").\n.decl Used_by(Object:symbol, User:symbol)\nUsed_by(\"tricycle\", \"children\").\nUsed_by(\"training wheels\", \"children\").\n.decl Answer()\nAnswer() :- Used_by(bicycle, \"children\"), Has_extra_wheels(extra_wheels), Used_by(extra_wheels, \"children\").\n.output Answer", "completions": [".decl Has_extra_wheels(Object:symbol)\nHas_extra_wheels(\"tricycle\").\nHas_extra_wheels(\"training wheels\").\n.decl Used_by(Object:symbol, User:symbol)\nUsed_by(\"tricycle\", \"children\").\nUsed_by(\"training wheels\", \"children\").\n.decl Answer()\nAnswer() :- Used_by(bicycle, \"children\"), Has_extra_wheels(extra_wheels), Used_by(extra_wheels, \"children\").\n.output Answer"]}
{"id": 837, "answer": true, "completion": ".decl Is_shape(Object:symbol, Shape:symbol)\nIs_shape(\"Royal Observatory in Greenwich\", \"dome\").\nIs_shape(\"yield sign\", \"triangle\").\n.decl Answer()\nAnswer() :- Is_shape(\"Royal Observatory in Greenwich\", shape1), Is_shape(\"yield sign\", shape2), shape1 = shape2.\n.output Answer", "completions": [".decl Is_shape(Object:symbol, Shape:symbol)\nIs_shape(\"Royal Observatory in Greenwich\", \"dome\").\nIs_shape(\"yield sign\", \"triangle\").\n.decl Answer()\nAnswer() :- Is_shape(\"Royal Observatory in Greenwich\", shape1), Is_shape(\"yield sign\", shape2), shape1 = shape2.\n.output Answer"]}
{"id": 838, "answer": true, "completion": ".decl Portrays(Character:symbol, Stereotype:symbol)\nPortrays(\"nerd\", \"loser\").\nPortrays(\"jock\", \"winner\").\nPortrays(\"popular girl\", \"mean girl\").\n.decl Answer()\nAnswer() :- Portrays(\"nerd\", stereotype), !Portrays(\"nerd\", \"winner\").\n.output Answer", "completions": [".decl Portrays(Character:symbol, Stereotype:symbol)\nPortrays(\"nerd\", \"loser\").\nPortrays(\"jock\", \"winner\").\nPortrays(\"popular girl\", \"mean girl\").\n.decl Answer()\nAnswer() :- Portrays(\"nerd\", stereotype), !Portrays(\"nerd\", \"winner\").\n.output Answer"]}
{"id": 839, "answer": false, "completion": ".decl Has_assets(Bank:symbol, Assets:float)\nHas_assets(\"JPMorgan Chase\", 2.7e+12).\n.decl Population(Country:symbol, Population:float)\nPopulation(\"United States\", 328.2e+6).\n.decl Answer()\nAnswer() :- Has_assets(\"JPMorgan Chase\", assets), Population(\"United States\", population), assets/population >= 10.\n.output Answer", "completions": [".decl Has_assets(Bank:symbol, Assets:float)\nHas_assets(\"JPMorgan Chase\", 2.7e+12).\n.decl Population(Country:symbol, Population:float)\nPopulation(\"United States\", 328.2e+6).\n.decl Answer()\nAnswer() :- Has_assets(\"JPMorgan Chase\", assets), Population(\"United States\", population), assets/population >= 10.\n.output Answer"]}
{"id": 840, "answer": true, "completion": ".decl Is_larger_than(Object1:symbol, Object2:symbol)\nIs_larger_than(\"Japanese spider crab\", \"king-sized mattress\").\n.decl Fits_on(Object:symbol, Surface:symbol)\nFits_on(\"Japanese spider crab\", \"ocean floor\").\nFits_on(\"king-sized mattress\", \"bed frame\").\n.decl Answer()\nAnswer() :- Is_larger_than(\"Japanese spider crab\", surface), Fits_on(\"king-sized mattress\", surface).\n.output Answer", "completions": [".decl Is_larger_than(Object1:symbol, Object2:symbol)\nIs_larger_than(\"Japanese spider crab\", \"king-sized mattress\").\n.decl Fits_on(Object:symbol, Surface:symbol)\nFits_on(\"Japanese spider crab\", \"ocean floor\").\nFits_on(\"king-sized mattress\", \"bed frame\").\n.decl Answer()\nAnswer() :- Is_larger_than(\"Japanese spider crab\", surface), Fits_on(\"king-sized mattress\", surface).\n.output Answer"]}
{"id": 841, "answer": false, "completion": ".decl Places_in_circle(Person:symbol, Circle:symbol)\nPlaces_in_circle(\"Dante Alighieri\", \"Rupert Murdoch\", \"8th Circle of Hell\").\n.decl Answer()\nAnswer() :- Places_in_circle(\"Dante Alighieri\", \"Rupert Murdoch\", \"8th Circle of Hell\").\n.output Answer", "completions": [".decl Places_in_circle(Person:symbol, Circle:symbol)\nPlaces_in_circle(\"Dante Alighieri\", \"Rupert Murdoch\", \"8th Circle of Hell\").\n.decl Answer()\nAnswer() :- Places_in_circle(\"Dante Alighieri\", \"Rupert Murdoch\", \"8th Circle of Hell\").\n.output Answer"]}
{"id": 842, "answer": false, "completion": ".decl Uses_calendar(Entity:symbol, Calendar:symbol)\nUses_calendar(\"Eastern Orthodox Church\", \"Julian calendar\").\nUses_calendar(\"Byzantine Empire\", \"Julian calendar\").\nUses_calendar(\"Byzantine Empire\", \"Gregorian calendar\").\n.decl Answer()\nAnswer() :- Uses_calendar(\"Eastern Orthodox Church\", calendar), Uses_calendar(\"Byzantine Empire\", calendar).\n.output Answer", "completions": [".decl Uses_calendar(Entity:symbol, Calendar:symbol)\nUses_calendar(\"Eastern Orthodox Church\", \"Julian calendar\").\nUses_calendar(\"Byzantine Empire\", \"Julian calendar\").\nUses_calendar(\"Byzantine Empire\", \"Gregorian calendar\").\n.decl Answer()\nAnswer() :- Uses_calendar(\"Eastern Orthodox Church\", calendar), Uses_calendar(\"Byzantine Empire\", calendar).\n.output Answer"]}
{"id": 843, "answer": false, "completion": ".decl Absorbs_light(Element:symbol, Wavelength:float)\nAbsorbs_light(\"chlorine gas\", 245).\nAbsorbs_light(\"neon gas\", 585).\n.decl Answer()\nAnswer() :- Absorbs_light(\"chlorine gas\", wavelength1), Absorbs_light(\"neon gas\", wavelength2), wavelength1 != wavelength2.\n.output Answer", "completions": [".decl Absorbs_light(Element:symbol, Wavelength:float)\nAbsorbs_light(\"chlorine gas\", 245).\nAbsorbs_light(\"neon gas\", 585).\n.decl Answer()\nAnswer() :- Absorbs_light(\"chlorine gas\", wavelength1), Absorbs_light(\"neon gas\", wavelength2), wavelength1 != wavelength2.\n.output Answer"]}
{"id": 844, "answer": true, "completion": ".decl Has_real_name(Person:symbol, Real_name:symbol)\nHas_real_name(\"Augustus\", \"Gaius Octavius\").\n.decl Answer()\nAnswer() :- Has_real_name(\"Augustus\", real_name), real_name != \"Augustus\".\n.output Answer", "completions": [".decl Has_real_name(Person:symbol, Real_name:symbol)\nHas_real_name(\"Augustus\", \"Gaius Octavius\").\n.decl Answer()\nAnswer() :- Has_real_name(\"Augustus\", real_name), real_name != \"Augustus\".\n.output Answer"]}
{"id": 845, "answer": false, "completion": ".decl Married(Person1:symbol, Person2:symbol)\nMarried(\"Anakin Skywalker\", \"Padmé Amidala\").\n.decl Had_children(Person:symbol, N_children:float)\nHad_children(\"Anakin Skywalker\", 2).\n.decl Answer()\nAnswer() :- Married(\"Darth Vader\", partner1), Married(partner1, partner2), partner2 != \"Padmé Amidala\".\nAnswer() :- Had_children(\"Darth Vader\", n_children), n_children > 1.\n.output Answer", "completions": [".decl Married(Person1:symbol, Person2:symbol)\nMarried(\"Anakin Skywalker\", \"Padmé Amidala\").\n.decl Had_children(Person:symbol, N_children:float)\nHad_children(\"Anakin Skywalker\", 2).\n.decl Answer()\nAnswer() :- Married(\"Darth Vader\", partner1), Married(partner1, partner2), partner2 != \"Padmé Amidala\".\nAnswer() :- Had_children(\"Darth Vader\", n_children), n_children > 1.\n.output Answer"]}
{"id": 846, "answer": true, "completion": ".decl Met(Person1:symbol, Person2:symbol)\nMet(\"Al-Farabi\", \"Abu Bakr Muhammad ibn Zakariya al-Razi\").\nMet(\"Abu Bakr Muhammad ibn Zakariya al-Razi\", \"Mohammed\").\n.decl Answer()\nAnswer() :- Met(\"Al-Farabi\", person2), Met(person2, \"Mohammed\").\n.output Answer", "completions": [".decl Met(Person1:symbol, Person2:symbol)\nMet(\"Al-Farabi\", \"Abu Bakr Muhammad ibn Zakariya al-Razi\").\nMet(\"Abu Bakr Muhammad ibn Zakariya al-Razi\", \"Mohammed\").\n.decl Answer()\nAnswer() :- Met(\"Al-Farabi\", person2), Met(person2, \"Mohammed\").\n.output Answer"]}
{"id": 847, "answer": true, "completion": ".decl Supports(Politician:symbol, Party:symbol)\nSupports(\"Dustin Hoffman\", \"Democratic Party\").\n.decl Approval_Rating(Party:symbol, Rating:float)\nApproval_Rating(\"Democratic Party\", 55).\nApproval_Rating(\"Republican Party\", 40).\n.decl Answer()\nAnswer() :- Supports(\"Dustin Hoffman\", party), Approval_Rating(party, rating), rating > 50.\n.output Answer", "completions": [".decl Supports(Politician:symbol, Party:symbol)\nSupports(\"Dustin Hoffman\", \"Democratic Party\").\n.decl Approval_Rating(Party:symbol, Rating:float)\nApproval_Rating(\"Democratic Party\", 55).\nApproval_Rating(\"Republican Party\", 40).\n.decl Answer()\nAnswer() :- Supports(\"Dustin Hoffman\", party), Approval_Rating(party, rating), rating > 50.\n.output Answer"]}
{"id": 848, "answer": false, "completion": ".decl Is_part_of(Organization:symbol, Larger_organization:symbol)\nIs_part_of(\"Foreign and Commonwealth Office\", \"United Kingdom government\").\n.decl Is_political_agency(Organization:symbol)\nIs_political_agency(\"European Commission\").\nIs_political_agency(\"European Parliament\").\nIs_political_agency(\"Council of the European Union\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Foreign and Commonwealth Office\", larger_organization), Is_political_agency(larger_organization).\n.output Answer", "completions": [".decl Is_part_of(Organization:symbol, Larger_organization:symbol)\nIs_part_of(\"Foreign and Commonwealth Office\", \"United Kingdom government\").\n.decl Is_political_agency(Organization:symbol)\nIs_political_agency(\"European Commission\").\nIs_political_agency(\"European Parliament\").\nIs_political_agency(\"Council of the European Union\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Foreign and Commonwealth Office\", larger_organization), Is_political_agency(larger_organization).\n.output Answer"]}
{"id": 849, "answer": false, "completion": ".decl Ancestor(Person:symbol, Ancestor:symbol)\nAncestor(\"Naruhito\", \"Emperor Jimmu\").\nAncestor(\"Emperor Jimmu\", \"Emperor Suizei\").\nAncestor(\"Emperor Suizei\", \"Emperor Annei\").\nAncestor(\"Emperor Annei\", \"Emperor Itoku\").\nAncestor(\"Emperor Itoku\", \"Emperor Kaika\").\nAncestor(\"Emperor Kaika\", \"Emperor Sujin\").\nAncestor(\"Emperor Sujin\", \"Emperor Suinin\").\nAncestor(\"Emperor Suinin\", \"Emperor Keiko\").\nAncestor(\"Emperor Keiko\", \"Emperor Seimu\").\nAncestor(\"Emperor Seimu\", \"Emperor Chuai\").\nAncestor(\"Emperor Chuai\", \"Emperor Ojin\").\nAncestor(\"Emperor Ojin\", \"Emperor Nintoku\").\nAncestor(\"Emperor Nintoku\", \"Emperor Richu\").\nAncestor(\"Emperor Richu\", \"Emperor Hanzei\").\nAncestor(\"Emperor Hanzei\", \"Emperor Ingyo\").\nAncestor(\"Emperor Ingyo\", \"Emperor Anko\").\nAncestor(\"Emperor Anko\", \"Emperor Yuryaku\").\nAncestor(\"Emperor Yuryaku\", \"Emperor Seinei\").\nAncestor(\"Emperor Seinei\", \"Emperor Kenzo\").\nAncestor(\"Emperor Kenzo\", \"Emperor Ninken\").\nAncestor(\"Emperor Ninken\", \"Emperor Buretsu\").\nAncestor(\"Emperor Buretsu\", \"Emperor Keitai\").\nAncestor(\"Emperor Keitai\", \"Emperor Ankan\").\nAncestor(\"Emperor Ankan\", \"Emperor Senka\").\nAncestor(\"Emperor Senka\", \"Emperor Kimmei\").\nAncestor(\"Emperor Kimmei\", \"Emperor Bidatsu\").\nAncestor(\"Emperor Bidatsu\", \"Emperor Yomei\").\nAncestor(\"Emperor Yomei\", \"Emperor Sushun\").\nAncestor(\"Emperor Sushun\", \"Emperor Suiko\").\nAncestor(\"Emperor Suiko\", \"Emperor Jomei\").\nAncestor(\"Emperor Jomei\", \"Empress Kogyoku\").\nAncestor(\"Empress Kogyoku\", \"Emperor Kotoku\").\nAncestor(\"Emperor Kotoku\", \"Emperor Saimei\").\nAncestor(\"Emperor Saimei\", \"Emperor Tenji\").\nAncestor(\"Emperor Tenji\", \"Emperor Temmu\").\nAncestor(\"Emperor Temmu\", \"Empress Jito\").\nAncestor(\"Empress Jito\", \"Emperor Monmu\").\nAncestor(\"Emperor Monmu\", \"Emperor Junnin\").\nAncestor(\"Emperor Junnin\", \"Emperor Shotoku\").\nAncestor(\"Emperor Shotoku\", \"Emperor Koken\").\nAncestor(\"Emperor Koken\", \"Emperor Junna\").\nAncestor(\"Emperor Junna\", \"Emperor Seiwa\").\nAncestor(\"Emperor Seiwa\", \"Emperor Yozei\").\nAncestor(\"Emperor Yozei\", \"Emperor Koko\").\nAncestor(\"Emperor Koko\", \"Emperor Uda\").\nAncestor(\"Emperor Uda\", \"Emperor Daigo\").\nAncestor(\"Emperor Daigo\", \"Emperor Suzaku\").\nAncestor(\"Emperor Suzaku\", \"Emperor Murakami\").\nAncestor(\"Emperor Murakami\", \"Emperor Reizei\").\nAncestor(\"Emperor Reizei\", \"Emperor Enyu\").\nAncestor(\"Emperor Enyu\", \"Emperor Ichijo\").\nAncestor(\"Emperor Ichijo\", \"Emperor Sanjo\").\nAncestor(\"Emperor Sanjo\", \"Emperor Go-Sanjo\").\nAncestor(\"Emperor Go-Sanjo\", \"Emperor Shirakawa\").\nAncestor(\"Emperor Shirakawa\", \"Emperor Horikawa\").\nAncestor(\"Emperor Horikawa\", \"Emperor Toba\").\nAncestor(\"Emperor Toba\", \"Emperor Go-Shirakawa\").\nAncestor(\"Emperor Go-Shirakawa\", \"Emperor Takakura\").\nAncestor(\"Emperor Takakura\", \"Emperor Antoku\").\nAncestor(\"Emperor Antoku\", \"Emperor Go-Toba\").\nAncestor(\"Emperor Go-Toba\", \"Emperor Tsuchimikado\").\nAncestor(\"Emperor Tsuchimikado\", \"Emperor Go-Saga\").\nAncestor(\"Emperor Go-Saga\", \"Emperor Go-Fukakusa\").\nAncestor(\"Emperor Go-Fukakusa\", \"Emperor Kameyama\").\nAncestor(\"Emperor Kameyama\", \"Emperor Go-Uda\").\nAncestor(\"Emperor Go-Uda\", \"Emperor Fushimi\").\nAncestor(\"Emperor Fushimi\", \"Emperor Go-Fushimi\").\nAncestor(\"Emperor Go-Fushimi\", \"Emperor Go-Nijo\").\nAncestor(\"Emperor Go-Nijo\", \"Emperor Hanazono\").\nAncestor(\"Emperor Hanazono\", \"Emperor Go-Daigo\").\nAncestor(\"Emperor Go-Daigo\", \"Emperor Go-Murakami\").\nAncestor(\"Emperor Go-Murakami\", \"Emperor Chokei\").\nAncestor(\"Emperor Chokei\", \"Emperor Go-Kogon\").\nAncestor(\"Emperor Go-Kogon\", \"Emperor Go-En'yū\").\nAncestor(\"Emperor Go-En'yū\", \"Emperor Go-Komatsu\").\nAncestor(\"Emperor Go-Komatsu\", \"Emperor Shoko\").\nAncestor(\"Emperor Shoko\", \"Emperor Go-Hanazono\").\nAncestor(\"Emperor Go-Hanazono\", \"Emperor Go-Tsuchimikado\").\nAncestor(\"Emperor Go-Tsuchimikado\", \"Emperor Go-Kashiwabara\").\nAncestor(\"Emperor Go-Kashiwabara\", \"Emperor Go-Nara\").\nAncestor(\"Emperor Go-Nara\", \"Emperor Ogimachi\").\nAncestor(\"Emperor Ogimachi\", \"Emperor Go-Yozei\").\nAncestor(\"Emperor Go-Yozei\", \"Emperor Go-Mizunoo\").\nAncestor(\"Emperor Go-Mizunoo\", \"Emperor Meisho\").\nAncestor(\"Emperor Meisho\", \"Emperor Go-Komyo\").\nAncestor(\"Emperor Go-Komyo\", \"Emperor Go-Sai\").\nAncestor(\"Emperor Go-Sai\", \"Emperor Reigen\").\nAncestor(\"Emperor Reigen\", \"Emperor Higashiyama\").\nAncestor(\"Emperor Higashiyama\", \"Emperor Nakamikado\").\nAncestor(\"Emperor Nakamikado\", \"Emperor Sakuramachi\").\nAncestor(\"Emperor Sakuramachi\", \"Emperor Momozono\").\nAncestor(\"Emperor Momozono\", \"Emperor Go-Sakuramachi\").\nAncestor(\"Emperor Go-Sakuramachi\", \"Emperor Go-Momozono\").\nAncestor(\"Emperor Go-Momozono\", \"Emperor Kokaku\").\nAncestor(\"Emperor Kokaku\", \"Emperor Ninko\").\nAncestor(\"Emperor Ninko\", \"Emperor Komei\").\nAncestor(\"Emperor Komei\", \"Emperor Meiji\").\nAncestor(\"Emperor Meiji\", \"Emperor Taisho\").\nAncestor(\"Emperor Taisho\", \"Emperor Showa\").\nAncestor(\"Emperor Showa\", \"Emperor Akihito\").\n.decl Answer()\nAnswer() :- Ancestor(\"Naruhito\", ancestor), Ancestor(\"Romance of the Three Kingdoms\", ancestor).\n.output Answer", "completions": [".decl Ancestor(Person:symbol, Ancestor:symbol)\nAncestor(\"Naruhito\", \"Emperor Jimmu\").\nAncestor(\"Emperor Jimmu\", \"Emperor Suizei\").\nAncestor(\"Emperor Suizei\", \"Emperor Annei\").\nAncestor(\"Emperor Annei\", \"Emperor Itoku\").\nAncestor(\"Emperor Itoku\", \"Emperor Kaika\").\nAncestor(\"Emperor Kaika\", \"Emperor Sujin\").\nAncestor(\"Emperor Sujin\", \"Emperor Suinin\").\nAncestor(\"Emperor Suinin\", \"Emperor Keiko\").\nAncestor(\"Emperor Keiko\", \"Emperor Seimu\").\nAncestor(\"Emperor Seimu\", \"Emperor Chuai\").\nAncestor(\"Emperor Chuai\", \"Emperor Ojin\").\nAncestor(\"Emperor Ojin\", \"Emperor Nintoku\").\nAncestor(\"Emperor Nintoku\", \"Emperor Richu\").\nAncestor(\"Emperor Richu\", \"Emperor Hanzei\").\nAncestor(\"Emperor Hanzei\", \"Emperor Ingyo\").\nAncestor(\"Emperor Ingyo\", \"Emperor Anko\").\nAncestor(\"Emperor Anko\", \"Emperor Yuryaku\").\nAncestor(\"Emperor Yuryaku\", \"Emperor Seinei\").\nAncestor(\"Emperor Seinei\", \"Emperor Kenzo\").\nAncestor(\"Emperor Kenzo\", \"Emperor Ninken\").\nAncestor(\"Emperor Ninken\", \"Emperor Buretsu\").\nAncestor(\"Emperor Buretsu\", \"Emperor Keitai\").\nAncestor(\"Emperor Keitai\", \"Emperor Ankan\").\nAncestor(\"Emperor Ankan\", \"Emperor Senka\").\nAncestor(\"Emperor Senka\", \"Emperor Kimmei\").\nAncestor(\"Emperor Kimmei\", \"Emperor Bidatsu\").\nAncestor(\"Emperor Bidatsu\", \"Emperor Yomei\").\nAncestor(\"Emperor Yomei\", \"Emperor Sushun\").\nAncestor(\"Emperor Sushun\", \"Emperor Suiko\").\nAncestor(\"Emperor Suiko\", \"Emperor Jomei\").\nAncestor(\"Emperor Jomei\", \"Empress Kogyoku\").\nAncestor(\"Empress Kogyoku\", \"Emperor Kotoku\").\nAncestor(\"Emperor Kotoku\", \"Emperor Saimei\").\nAncestor(\"Emperor Saimei\", \"Emperor Tenji\").\nAncestor(\"Emperor Tenji\", \"Emperor Temmu\").\nAncestor(\"Emperor Temmu\", \"Empress Jito\").\nAncestor(\"Empress Jito\", \"Emperor Monmu\").\nAncestor(\"Emperor Monmu\", \"Emperor Junnin\").\nAncestor(\"Emperor Junnin\", \"Emperor Shotoku\").\nAncestor(\"Emperor Shotoku\", \"Emperor Koken\").\nAncestor(\"Emperor Koken\", \"Emperor Junna\").\nAncestor(\"Emperor Junna\", \"Emperor Seiwa\").\nAncestor(\"Emperor Seiwa\", \"Emperor Yozei\").\nAncestor(\"Emperor Yozei\", \"Emperor Koko\").\nAncestor(\"Emperor Koko\", \"Emperor Uda\").\nAncestor(\"Emperor Uda\", \"Emperor Daigo\").\nAncestor(\"Emperor Daigo\", \"Emperor Suzaku\").\nAncestor(\"Emperor Suzaku\", \"Emperor Murakami\").\nAncestor(\"Emperor Murakami\", \"Emperor Reizei\").\nAncestor(\"Emperor Reizei\", \"Emperor Enyu\").\nAncestor(\"Emperor Enyu\", \"Emperor Ichijo\").\nAncestor(\"Emperor Ichijo\", \"Emperor Sanjo\").\nAncestor(\"Emperor Sanjo\", \"Emperor Go-Sanjo\").\nAncestor(\"Emperor Go-Sanjo\", \"Emperor Shirakawa\").\nAncestor(\"Emperor Shirakawa\", \"Emperor Horikawa\").\nAncestor(\"Emperor Horikawa\", \"Emperor Toba\").\nAncestor(\"Emperor Toba\", \"Emperor Go-Shirakawa\").\nAncestor(\"Emperor Go-Shirakawa\", \"Emperor Takakura\").\nAncestor(\"Emperor Takakura\", \"Emperor Antoku\").\nAncestor(\"Emperor Antoku\", \"Emperor Go-Toba\").\nAncestor(\"Emperor Go-Toba\", \"Emperor Tsuchimikado\").\nAncestor(\"Emperor Tsuchimikado\", \"Emperor Go-Saga\").\nAncestor(\"Emperor Go-Saga\", \"Emperor Go-Fukakusa\").\nAncestor(\"Emperor Go-Fukakusa\", \"Emperor Kameyama\").\nAncestor(\"Emperor Kameyama\", \"Emperor Go-Uda\").\nAncestor(\"Emperor Go-Uda\", \"Emperor Fushimi\").\nAncestor(\"Emperor Fushimi\", \"Emperor Go-Fushimi\").\nAncestor(\"Emperor Go-Fushimi\", \"Emperor Go-Nijo\").\nAncestor(\"Emperor Go-Nijo\", \"Emperor Hanazono\").\nAncestor(\"Emperor Hanazono\", \"Emperor Go-Daigo\").\nAncestor(\"Emperor Go-Daigo\", \"Emperor Go-Murakami\").\nAncestor(\"Emperor Go-Murakami\", \"Emperor Chokei\").\nAncestor(\"Emperor Chokei\", \"Emperor Go-Kogon\").\nAncestor(\"Emperor Go-Kogon\", \"Emperor Go-En'yū\").\nAncestor(\"Emperor Go-En'yū\", \"Emperor Go-Komatsu\").\nAncestor(\"Emperor Go-Komatsu\", \"Emperor Shoko\").\nAncestor(\"Emperor Shoko\", \"Emperor Go-Hanazono\").\nAncestor(\"Emperor Go-Hanazono\", \"Emperor Go-Tsuchimikado\").\nAncestor(\"Emperor Go-Tsuchimikado\", \"Emperor Go-Kashiwabara\").\nAncestor(\"Emperor Go-Kashiwabara\", \"Emperor Go-Nara\").\nAncestor(\"Emperor Go-Nara\", \"Emperor Ogimachi\").\nAncestor(\"Emperor Ogimachi\", \"Emperor Go-Yozei\").\nAncestor(\"Emperor Go-Yozei\", \"Emperor Go-Mizunoo\").\nAncestor(\"Emperor Go-Mizunoo\", \"Emperor Meisho\").\nAncestor(\"Emperor Meisho\", \"Emperor Go-Komyo\").\nAncestor(\"Emperor Go-Komyo\", \"Emperor Go-Sai\").\nAncestor(\"Emperor Go-Sai\", \"Emperor Reigen\").\nAncestor(\"Emperor Reigen\", \"Emperor Higashiyama\").\nAncestor(\"Emperor Higashiyama\", \"Emperor Nakamikado\").\nAncestor(\"Emperor Nakamikado\", \"Emperor Sakuramachi\").\nAncestor(\"Emperor Sakuramachi\", \"Emperor Momozono\").\nAncestor(\"Emperor Momozono\", \"Emperor Go-Sakuramachi\").\nAncestor(\"Emperor Go-Sakuramachi\", \"Emperor Go-Momozono\").\nAncestor(\"Emperor Go-Momozono\", \"Emperor Kokaku\").\nAncestor(\"Emperor Kokaku\", \"Emperor Ninko\").\nAncestor(\"Emperor Ninko\", \"Emperor Komei\").\nAncestor(\"Emperor Komei\", \"Emperor Meiji\").\nAncestor(\"Emperor Meiji\", \"Emperor Taisho\").\nAncestor(\"Emperor Taisho\", \"Emperor Showa\").\nAncestor(\"Emperor Showa\", \"Emperor Akihito\").\n.decl Answer()\nAnswer() :- Ancestor(\"Naruhito\", ancestor), Ancestor(\"Romance of the Three Kingdoms\", ancestor).\n.output Answer"]}
{"id": 850, "answer": true, "completion": ".decl Won_award(Person:symbol, Award:symbol)\nWon_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Won_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.output Answer", "completions": [".decl Won_award(Person:symbol, Award:symbol)\nWon_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.decl Answer()\nAnswer() :- Won_award(\"Johann Sebastian Bach\", \"Grammy Award\").\n.output Answer"]}
{"id": 851, "answer": false, "completion": ".decl Is_fibonacci(Number:float)\nIs_fibonacci(0).\nIs_fibonacci(1).\nIs_fibonacci(n) :- Is_fibonacci(n-1), Is_fibonacci(n-2).\n.decl Is_single_digit(Number:float)\nIs_single_digit(0).\nIs_single_digit(1).\nIs_single_digit(2).\nIs_single_digit(3).\nIs_single_digit(4).\nIs_single_digit(5).\nIs_single_digit(6).\nIs_single_digit(7).\nIs_single_digit(8).\nIs_single_digit(9).\n.decl Answer()\nAnswer() :- Is_fibonacci(n1), Is_single_digit(n1), Is_fibonacci(n2), Is_single_digit(n2), Is_fibonacci(n3), Is_single_digit(n3), Is_fibonacci(n4), Is_single_digit(n4), Is_fibonacci(n5), Is_single_digit(n5), n1 != n2, n1 != n3, n1 != n4, n1 != n5, n2 != n3, n2 != n4, n2 != n5, n3 != n4, n3 != n5, n4 != n5.\n.output Answer", "completions": [".decl Is_fibonacci(Number:float)\nIs_fibonacci(0).\nIs_fibonacci(1).\nIs_fibonacci(n) :- Is_fibonacci(n-1), Is_fibonacci(n-2).\n.decl Is_single_digit(Number:float)\nIs_single_digit(0).\nIs_single_digit(1).\nIs_single_digit(2).\nIs_single_digit(3).\nIs_single_digit(4).\nIs_single_digit(5).\nIs_single_digit(6).\nIs_single_digit(7).\nIs_single_digit(8).\nIs_single_digit(9).\n.decl Answer()\nAnswer() :- Is_fibonacci(n1), Is_single_digit(n1), Is_fibonacci(n2), Is_single_digit(n2), Is_fibonacci(n3), Is_single_digit(n3), Is_fibonacci(n4), Is_single_digit(n4), Is_fibonacci(n5), Is_single_digit(n5), n1 != n2, n1 != n3, n1 != n4, n1 != n5, n2 != n3, n2 != n4, n2 != n5, n3 != n4, n3 != n5, n4 != n5.\n.output Answer"]}
{"id": 852, "answer": true, "completion": ".decl Requires(Equipment:symbol, Resource:symbol)\nRequires(\"Microsoft Excel\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"Microsoft Excel\", \"electricity\").\n.output Answer", "completions": [".decl Requires(Equipment:symbol, Resource:symbol)\nRequires(\"Microsoft Excel\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires(\"Microsoft Excel\", \"electricity\").\n.output Answer"]}
{"id": 853, "answer": true, "completion": ".decl Has_alter_ego(Superhero:symbol, Alter_ego:symbol)\nHas_alter_ego(\"Hulk\", \"Bruce Banner\").\n.decl Has_expertise(Person:symbol, Expertise:symbol)\nHas_expertise(\"Bruce Banner\", \"atomic events\").\n.decl Answer()\nAnswer() :- Has_alter_ego(superhero, \"Bruce Banner\"), Has_expertise(\"Bruce Banner\", \"atomic events\").\n.output Answer", "completions": [".decl Has_alter_ego(Superhero:symbol, Alter_ego:symbol)\nHas_alter_ego(\"Hulk\", \"Bruce Banner\").\n.decl Has_expertise(Person:symbol, Expertise:symbol)\nHas_expertise(\"Bruce Banner\", \"atomic events\").\n.decl Answer()\nAnswer() :- Has_alter_ego(superhero, \"Bruce Banner\"), Has_expertise(\"Bruce Banner\", \"atomic events\").\n.output Answer"]}
{"id": 854, "answer": true, "completion": ".decl Book_genre(Book:symbol, Genre:symbol)\nBook_genre(\"The Waste Land\", \"poetry\").\nBook_genre(\"The Road Not Taken\", \"poetry\").\nBook_genre(\"To Kill a Mockingbird\", \"novel\").\n.decl Answer()\nAnswer() :- Book_genre(book, \"poetry\"), count(book, count1), count(Book_genre(book, \"poetry\"), count2), count1 > count2/2.\n.output Answer", "completions": [".decl Book_genre(Book:symbol, Genre:symbol)\nBook_genre(\"The Waste Land\", \"poetry\").\nBook_genre(\"The Road Not Taken\", \"poetry\").\nBook_genre(\"To Kill a Mockingbird\", \"novel\").\n.decl Answer()\nAnswer() :- Book_genre(book, \"poetry\"), count(book, count1), count(Book_genre(book, \"poetry\"), count2), count1 > count2/2.\n.output Answer"]}
{"id": 855, "answer": false, "completion": ".decl Helps(Party:symbol, Person:symbol)\nHelps(\"Social Democratic Party of Germany\", \"Frederick II\").\n.decl Answer()\n!Answer() :- Helps(\"Social Democratic Party of Germany\", \"Frederick II\").\n.output Answer", "completions": [".decl Helps(Party:symbol, Person:symbol)\nHelps(\"Social Democratic Party of Germany\", \"Frederick II\").\n.decl Answer()\n!Answer() :- Helps(\"Social Democratic Party of Germany\", \"Frederick II\").\n.output Answer"]}
{"id": 856, "answer": false, "completion": ".decl Weighs(Object:symbol, Weight:float)\nWeighs(\"Toyota Hilux\", 2000).\nWeighs(\"Mr. Ed\", 1000).\n.decl Answer()\nAnswer() :- Weighs(\"Toyota Hilux\", weight1), Weighs(\"Mr. Ed\", weight2), weight1 > weight2.\n.output Answer", "completions": [".decl Weighs(Object:symbol, Weight:float)\nWeighs(\"Toyota Hilux\", 2000).\nWeighs(\"Mr. Ed\", 1000).\n.decl Answer()\nAnswer() :- Weighs(\"Toyota Hilux\", weight1), Weighs(\"Mr. Ed\", weight2), weight1 > weight2.\n.output Answer"]}
{"id": 857, "answer": true, "completion": ".decl Follows_religion(Person:symbol, Religion:symbol)\nFollows_religion(\"John\", \"Catholicism\").\nFollows_religion(\"Mary\", \"Protestantism\").\nFollows_religion(\"David\", \"Judaism\").\n.decl Origin_of_name(Day:symbol, Origin:symbol)\nOrigin_of_name(\"Wednesday\", \"Norse mythology\").\nOrigin_of_name(\"Thursday\", \"Norse mythology\").\nOrigin_of_name(\"Friday\", \"Norse mythology\").\nOrigin_of_name(\"Sunday\", \"Christianity\").\n.decl Answer()\nAnswer() :- Follows_religion(person, \"Catholicism\"), Origin_of_name(\"Wednesday\", origin), origin != \"Christianity\".\n.output Answer", "completions": [".decl Follows_religion(Person:symbol, Religion:symbol)\nFollows_religion(\"John\", \"Catholicism\").\nFollows_religion(\"Mary\", \"Protestantism\").\nFollows_religion(\"David\", \"Judaism\").\n.decl Origin_of_name(Day:symbol, Origin:symbol)\nOrigin_of_name(\"Wednesday\", \"Norse mythology\").\nOrigin_of_name(\"Thursday\", \"Norse mythology\").\nOrigin_of_name(\"Friday\", \"Norse mythology\").\nOrigin_of_name(\"Sunday\", \"Christianity\").\n.decl Answer()\nAnswer() :- Follows_religion(person, \"Catholicism\"), Origin_of_name(\"Wednesday\", origin), origin != \"Christianity\".\n.output Answer"]}
{"id": 858, "answer": false, "completion": ".decl Writes(Profession:symbol, Topic:symbol)\nWrites(\"astronomer\", \"stars\").\nWrites(\"astrologer\", \"horoscopes\").\n.decl Answer()\nAnswer() :- Writes(\"astronomer\", topic), topic = \"horoscopes\", !.\nAnswer() :- Writes(\"astrologer\", \"horoscopes\").\n.output Answer", "completions": [".decl Writes(Profession:symbol, Topic:symbol)\nWrites(\"astronomer\", \"stars\").\nWrites(\"astrologer\", \"horoscopes\").\n.decl Answer()\nAnswer() :- Writes(\"astronomer\", topic), topic = \"horoscopes\", !.\nAnswer() :- Writes(\"astrologer\", \"horoscopes\").\n.output Answer"]}
{"id": 859, "answer": true, "completion": ".decl Visits(Person:symbol, Place:symbol)\nVisits(\"Edward Snowden\", \"Russian Embassy\").\n.decl Located_in(Place:symbol, Location:symbol)\nLocated_in(\"United Nations Conference on Trade and Development\", \"Geneva\").\n.decl Answer()\nAnswer() :- Visits(\"Edward Snowden\", place1), Located_in(\"United Nations Conference on Trade and Development\", location1), place1 != location1.\n.output Answer", "completions": [".decl Visits(Person:symbol, Place:symbol)\nVisits(\"Edward Snowden\", \"Russian Embassy\").\n.decl Located_in(Place:symbol, Location:symbol)\nLocated_in(\"United Nations Conference on Trade and Development\", \"Geneva\").\n.decl Answer()\nAnswer() :- Visits(\"Edward Snowden\", place1), Located_in(\"United Nations Conference on Trade and Development\", location1), place1 != location1.\n.output Answer"]}
{"id": 860, "answer": false, "completion": ".decl Ate(Person:symbol, Food:symbol, Amount:float)\nAte(\"Popeye\", \"spinach\", 1).\n.decl Contains(Nutrient:symbol, Food:symbol)\nContains(\"iron\", \"spinach\").\nContains(\"calcium\", \"spinach\").\nContains(\"vitamin A\", \"spinach\").\nContains(\"vitamin C\", \"spinach\").\nContains(\"fiber\", \"spinach\").\n.decl Recommended_daily_intake(Nutrient:symbol, Amount:float)\nRecommended_daily_intake(\"iron\", 18).\nRecommended_daily_intake(\"calcium\", 1000).\nRecommended_daily_intake(\"vitamin A\", 900).\nRecommended_daily_intake(\"vitamin C\", 90).\nRecommended_daily_intake(\"fiber\", 25).\n.decl Answer()\nAnswer() :- Ate(\"Popeye\", \"spinach\", amount), Contains(nutrient, \"spinach\"), Recommended_daily_intake(nutrient, daily_intake), amount > 10 * daily_intake.\n.output Answer", "completions": [".decl Ate(Person:symbol, Food:symbol, Amount:float)\nAte(\"Popeye\", \"spinach\", 1).\n.decl Contains(Nutrient:symbol, Food:symbol)\nContains(\"iron\", \"spinach\").\nContains(\"calcium\", \"spinach\").\nContains(\"vitamin A\", \"spinach\").\nContains(\"vitamin C\", \"spinach\").\nContains(\"fiber\", \"spinach\").\n.decl Recommended_daily_intake(Nutrient:symbol, Amount:float)\nRecommended_daily_intake(\"iron\", 18).\nRecommended_daily_intake(\"calcium\", 1000).\nRecommended_daily_intake(\"vitamin A\", 900).\nRecommended_daily_intake(\"vitamin C\", 90).\nRecommended_daily_intake(\"fiber\", 25).\n.decl Answer()\nAnswer() :- Ate(\"Popeye\", \"spinach\", amount), Contains(nutrient, \"spinach\"), Recommended_daily_intake(nutrient, daily_intake), amount > 10 * daily_intake.\n.output Answer"]}
{"id": 861, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"bengal fox\", \"desert\").\n.decl Watches_event(Animal:symbol, Event:symbol)\nWatches_event(\"bengal fox\", \"hunting\").\nWatches_event(\"bengal fox\", \"running\").\nWatches_event(\"bengal fox\", \"avoiding predators\").\nWatches_event(\"bengal fox\", \"finding food\").\nWatches_event(\"bengal fox\", \"mating\").\nWatches_event(\"bengal fox\", \"sleeping\").\n.decl Answer()\nAnswer() :- Lives_in(\"bengal fox\", habitat), habitat != \"indoors\", Watches_event(\"bengal fox\", \"Superbowl\").\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"bengal fox\", \"desert\").\n.decl Watches_event(Animal:symbol, Event:symbol)\nWatches_event(\"bengal fox\", \"hunting\").\nWatches_event(\"bengal fox\", \"running\").\nWatches_event(\"bengal fox\", \"avoiding predators\").\nWatches_event(\"bengal fox\", \"finding food\").\nWatches_event(\"bengal fox\", \"mating\").\nWatches_event(\"bengal fox\", \"sleeping\").\n.decl Answer()\nAnswer() :- Lives_in(\"bengal fox\", habitat), habitat != \"indoors\", Watches_event(\"bengal fox\", \"Superbowl\").\n.output Answer"]}
{"id": 862, "answer": true, "completion": ".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Jehovah's witness\", \"not celebrating holidays\").\n.decl Likes(Person:symbol, Book:symbol)\nLikes(\"Alice\", \"Alice's Adventures in Wonderland\").\n.decl Answer()\nAnswer() :- Likes(\"Alice\", book), Believes(\"Jehovah's witness\", belief), belief != \"celebrating holidays\".\n.output Answer", "completions": [".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Jehovah's witness\", \"not celebrating holidays\").\n.decl Likes(Person:symbol, Book:symbol)\nLikes(\"Alice\", \"Alice's Adventures in Wonderland\").\n.decl Answer()\nAnswer() :- Likes(\"Alice\", book), Believes(\"Jehovah's witness\", belief), belief != \"celebrating holidays\".\n.output Answer"]}
{"id": 863, "answer": false, "completion": ".decl Participates_in(Sport:symbol, Person:symbol)\nParticipates_in(\"Judo\", \"John Smith\").\n.decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"John Smith\", \"Germaphobia\").\n.decl Answer()\nAnswer() :- Participates_in(sport, \"John Smith\"), !Has_phobia(\"John Smith\", \"Germaphobia\").\n.output Answer", "completions": [".decl Participates_in(Sport:symbol, Person:symbol)\nParticipates_in(\"Judo\", \"John Smith\").\n.decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"John Smith\", \"Germaphobia\").\n.decl Answer()\nAnswer() :- Participates_in(sport, \"John Smith\"), !Has_phobia(\"John Smith\", \"Germaphobia\").\n.output Answer"]}
{"id": 864, "answer": false, "completion": ".decl Can_rescue(Rescue_vehicle:symbol, Location:symbol)\nCan_rescue(\"lifeboat\", \"ocean\").\n.decl Answer()\nAnswer() :- Can_rescue(\"lifeboat\", location), location = \"Hooke Sea\".\n.output Answer", "completions": [".decl Can_rescue(Rescue_vehicle:symbol, Location:symbol)\nCan_rescue(\"lifeboat\", \"ocean\").\n.decl Answer()\nAnswer() :- Can_rescue(\"lifeboat\", location), location = \"Hooke Sea\".\n.output Answer"]}
{"id": 865, "answer": true, "completion": ".decl Popular_in_court(Amendment:symbol)\nPopular_in_court(\"First Amendment\").\nPopular_in_court(\"Fourth Amendment\").\nPopular_in_court(\"Fifth Amendment\").\nPopular_in_court(\"Sixth Amendment\").\nPopular_in_court(\"Eighth Amendment\").\nPopular_in_court(\"Fourteenth Amendment\").\n.decl Answer()\nAnswer() :- Popular_in_court(\"Eighth Amendment\").\n.output Answer", "completions": [".decl Popular_in_court(Amendment:symbol)\nPopular_in_court(\"First Amendment\").\nPopular_in_court(\"Fourth Amendment\").\nPopular_in_court(\"Fifth Amendment\").\nPopular_in_court(\"Sixth Amendment\").\nPopular_in_court(\"Eighth Amendment\").\nPopular_in_court(\"Fourteenth Amendment\").\n.decl Answer()\nAnswer() :- Popular_in_court(\"Eighth Amendment\").\n.output Answer"]}
{"id": 866, "answer": true, "completion": ".decl Can_cook(Food:symbol)\nCan_cook(\"pizza\").\nCan_cook(\"chicken\").\nCan_cook(\"vegetables\").\n.decl Answer()\nAnswer() :- Can_cook(food), food != \"cosmic microwave background\".\n.output Answer", "completions": [".decl Can_cook(Food:symbol)\nCan_cook(\"pizza\").\nCan_cook(\"chicken\").\nCan_cook(\"vegetables\").\n.decl Answer()\nAnswer() :- Can_cook(food), food != \"cosmic microwave background\".\n.output Answer"]}
{"id": 867, "answer": false, "completion": ".decl Cares_about(Person:symbol, Topic:symbol)\nCares_about(\"Nigella Lawson\", \"cooking\").\nCares_about(\"Nigella Lawson\", \"food\").\nCares_about(\"Nigella Lawson\", \"presentation\").\n.decl Answer()\nAnswer() :- Cares_about(\"Nigella Lawson\", \"solubility\").\n.output Answer", "completions": [".decl Cares_about(Person:symbol, Topic:symbol)\nCares_about(\"Nigella Lawson\", \"cooking\").\nCares_about(\"Nigella Lawson\", \"food\").\nCares_about(\"Nigella Lawson\", \"presentation\").\n.decl Answer()\nAnswer() :- Cares_about(\"Nigella Lawson\", \"solubility\").\n.output Answer"]}
{"id": 868, "answer": true, "completion": ".decl Played_sport(Person:symbol, Sport:symbol)\nPlayed_sport(\"Rahul Dravid\", \"cricket\").\nPlayed_sport(\"Rahul Dravid\", \"football\").\n.decl Kicked_ball(Person:symbol)\nKicked_ball(\"Rahul Dravid\").\n.decl Answer()\nAnswer() :- Played_sport(\"Rahul Dravid\", sport), Kicked_ball(\"Rahul Dravid\"), sport != \"football\".\n.output Answer", "completions": [".decl Played_sport(Person:symbol, Sport:symbol)\nPlayed_sport(\"Rahul Dravid\", \"cricket\").\nPlayed_sport(\"Rahul Dravid\", \"football\").\n.decl Kicked_ball(Person:symbol)\nKicked_ball(\"Rahul Dravid\").\n.decl Answer()\nAnswer() :- Played_sport(\"Rahul Dravid\", sport), Kicked_ball(\"Rahul Dravid\"), sport != \"football\".\n.output Answer"]}
{"id": 869, "answer": false, "completion": ".decl Concerts(Artist:symbol, Venue:symbol)\nConcerts(\"U2\", \"Madison Square Garden\").\nConcerts(\"U2\", \"Giants Stadium\").\n.decl Answer()\nAnswer() :- Concerts(\"U2\", \"Polo Grounds\").\n.output Answer", "completions": [".decl Concerts(Artist:symbol, Venue:symbol)\nConcerts(\"U2\", \"Madison Square Garden\").\nConcerts(\"U2\", \"Giants Stadium\").\n.decl Answer()\nAnswer() :- Concerts(\"U2\", \"Polo Grounds\").\n.output Answer"]}
{"id": 870, "answer": false, "completion": ".decl Meal_type(Meal:symbol, Type:symbol)\nMeal_type(\"breakfast\", \"morning\").\nMeal_type(\"dinner\", \"evening\").\n.decl Cuisine(Country:symbol, Cuisine:symbol)\nCuisine(\"United States\", \"American cuisine\").\nCuisine(\"United Kingdom\", \"British cuisine\").\n.decl Answer()\nAnswer() :- Meal_type(meal1, \"morning\"), Cuisine(\"United Kingdom\", cuisine), Meal_type(meal2, \"evening\"), Cuisine(\"United States\", cuisine), meal1 = meal2.\n.output Answer", "completions": [".decl Meal_type(Meal:symbol, Type:symbol)\nMeal_type(\"breakfast\", \"morning\").\nMeal_type(\"dinner\", \"evening\").\n.decl Cuisine(Country:symbol, Cuisine:symbol)\nCuisine(\"United States\", \"American cuisine\").\nCuisine(\"United Kingdom\", \"British cuisine\").\n.decl Answer()\nAnswer() :- Meal_type(meal1, \"morning\"), Cuisine(\"United Kingdom\", cuisine), Meal_type(meal2, \"evening\"), Cuisine(\"United States\", cuisine), meal1 = meal2.\n.output Answer"]}
{"id": 871, "answer": false, "completion": ".decl Has_flower(Object:symbol)\nHas_flower(\"blooming onion\").\nHas_flower(\"shallot\").\n.decl Answer()\nAnswer() :- Has_flower(\"blooming onion\"), !Has_flower(\"shallot\").\n.output Answer", "completions": [".decl Has_flower(Object:symbol)\nHas_flower(\"blooming onion\").\nHas_flower(\"shallot\").\n.decl Answer()\nAnswer() :- Has_flower(\"blooming onion\"), !Has_flower(\"shallot\").\n.output Answer"]}
{"id": 872, "answer": true, "completion": ".decl Has_solubility(Substance:symbol, Solubility:symbol)\nHas_solubility(\"salt\", \"low\").\n.decl Is_in(Substance:symbol, Solution:symbol)\nIs_in(\"salt\", \"isopropyl alcohol\").\n.decl Answer()\nAnswer() :- Is_in(substance, \"isopropyl alcohol\"), Has_solubility(\"salt\", solubility), solubility = \"low\".\n.output Answer", "completions": [".decl Has_solubility(Substance:symbol, Solubility:symbol)\nHas_solubility(\"salt\", \"low\").\n.decl Is_in(Substance:symbol, Solution:symbol)\nIs_in(\"salt\", \"isopropyl alcohol\").\n.decl Answer()\nAnswer() :- Is_in(substance, \"isopropyl alcohol\"), Has_solubility(\"salt\", solubility), solubility = \"low\".\n.output Answer"]}
{"id": 873, "answer": false, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Mac Truck\", 20).\nHas_length(\"Golden Gate Bridge\", 2737).\n.decl Answer()\nAnswer() :- Has_length(\"Mac Truck\", length1), Has_length(\"Golden Gate Bridge\", length2), length1*13 > length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Mac Truck\", 20).\nHas_length(\"Golden Gate Bridge\", 2737).\n.decl Answer()\nAnswer() :- Has_length(\"Mac Truck\", length1), Has_length(\"Golden Gate Bridge\", length2), length1*13 > length2.\n.output Answer"]}
{"id": 874, "answer": false, "completion": ".decl Can_support_weight(Object:symbol, Weight:float)\nCan_support_weight(\"asteroid\", 0).\n.decl Answer()\nAnswer() :- Can_support_weight(\"asteroid\", weight), weight >= 1000000.\n.output Answer", "completions": [".decl Can_support_weight(Object:symbol, Weight:float)\nCan_support_weight(\"asteroid\", 0).\n.decl Answer()\nAnswer() :- Can_support_weight(\"asteroid\", weight), weight >= 1000000.\n.output Answer"]}
{"id": 875, "answer": false, "completion": ".decl Requires(Object:symbol, Resource:symbol)\nRequires(\"EastEnders\", \"time\").\nRequires(\"EastEnders\", \"TV\").\nRequires(\"EastEnders\", \"electricity\").\nRequires(\"EastEnders\", \"snacks\").\nRequires(\"EastEnders\", \"water\").\n.decl Answer()\nAnswer() :- Requires(\"EastEnders\", resource), resource != \"water\".\n.output Answer", "completions": [".decl Requires(Object:symbol, Resource:symbol)\nRequires(\"EastEnders\", \"time\").\nRequires(\"EastEnders\", \"TV\").\nRequires(\"EastEnders\", \"electricity\").\nRequires(\"EastEnders\", \"snacks\").\nRequires(\"EastEnders\", \"water\").\n.decl Answer()\nAnswer() :- Requires(\"EastEnders\", resource), resource != \"water\".\n.output Answer"]}
{"id": 876, "answer": false, "completion": ".decl Found_in_environment(Object:symbol, Environment:symbol)\nFound_in_environment(\"cucumber\", \"garden\").\nFound_in_environment(\"cactus\", \"desert\").\nFound_in_environment(\"camel\", \"desert\").\n.decl Answer()\nAnswer() :- Found_in_environment(\"cucumber\", environment), environment = \"desert\", !Found_in_environment(\"camel\", \"desert\").\n.output Answer", "completions": [".decl Found_in_environment(Object:symbol, Environment:symbol)\nFound_in_environment(\"cucumber\", \"garden\").\nFound_in_environment(\"cactus\", \"desert\").\nFound_in_environment(\"camel\", \"desert\").\n.decl Answer()\nAnswer() :- Found_in_environment(\"cucumber\", environment), environment = \"desert\", !Found_in_environment(\"camel\", \"desert\").\n.output Answer"]}
{"id": 877, "answer": true, "completion": ".decl Starts_at(Event:symbol, Start_time:float)\nStarts_at(\"Borgia's World of Wonders\", 8).\nStarts_at(\"Ludacris's Release Therapy\", 9).\n.decl Lasts_for(Event:symbol, Duration:float)\nLasts_for(\"Borgia's World of Wonders\", 2).\nLasts_for(\"Ludacris's Release Therapy\", 1.5).\n.decl Answer()\nAnswer() :- Starts_at(\"Borgia's World of Wonders\", start1), Lasts_for(\"Borgia's World of Wonders\", duration1), Starts_at(\"Ludacris's Release Therapy\", start2), Lasts_for(\"Ludacris's Release Therapy\", duration2), start1 + duration1 < start2 + duration2.\n.output Answer", "completions": [".decl Starts_at(Event:symbol, Start_time:float)\nStarts_at(\"Borgia's World of Wonders\", 8).\nStarts_at(\"Ludacris's Release Therapy\", 9).\n.decl Lasts_for(Event:symbol, Duration:float)\nLasts_for(\"Borgia's World of Wonders\", 2).\nLasts_for(\"Ludacris's Release Therapy\", 1.5).\n.decl Answer()\nAnswer() :- Starts_at(\"Borgia's World of Wonders\", start1), Lasts_for(\"Borgia's World of Wonders\", duration1), Starts_at(\"Ludacris's Release Therapy\", start2), Lasts_for(\"Ludacris's Release Therapy\", duration2), start1 + duration1 < start2 + duration2.\n.output Answer"]}
{"id": 878, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"person1\", \"celiac disease\").\n.decl Contains_alcohol(Beverage:symbol)\nContains_alcohol(\"potato vodka\").\n.decl Made_from(Ingredient:symbol, Source:symbol)\nMade_from(\"potato vodka\", \"potatoes\").\n.decl Answer()\nAnswer() :- Has_disease(\"person1\", \"celiac disease\"), Contains_alcohol(beverage), Made_from(beverage, \"potatoes\").\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"person1\", \"celiac disease\").\n.decl Contains_alcohol(Beverage:symbol)\nContains_alcohol(\"potato vodka\").\n.decl Made_from(Ingredient:symbol, Source:symbol)\nMade_from(\"potato vodka\", \"potatoes\").\n.decl Answer()\nAnswer() :- Has_disease(\"person1\", \"celiac disease\"), Contains_alcohol(beverage), Made_from(beverage, \"potatoes\").\n.output Answer"]}
{"id": 879, "answer": false, "completion": ".decl Allows_relationship(Relationship:symbol, Religion:symbol)\nAllows_relationship(\"polyamory\", \"none\").\nAllows_relationship(\"polygamy\", \"Mormonism\").\nAllows_relationship(\"polygamy\", \"Islam\").\nAllows_relationship(\"polygamy\", \"Hinduism\").\nAllows_relationship(\"polygamy\", \"Judaism\").\nAllows_relationship(\"polygamy\", \"Christianity\").\nAllows_relationship(\"polygamy\", \"Catholicism\").\n.decl Answer()\nAnswer() :- Allows_relationship(\"polyamory\", religion), religion = \"none\".\nAnswer() :- Allows_relationship(\"polygamy\", religion), religion = \"Catholicism\".\n.output Answer", "completions": [".decl Allows_relationship(Relationship:symbol, Religion:symbol)\nAllows_relationship(\"polyamory\", \"none\").\nAllows_relationship(\"polygamy\", \"Mormonism\").\nAllows_relationship(\"polygamy\", \"Islam\").\nAllows_relationship(\"polygamy\", \"Hinduism\").\nAllows_relationship(\"polygamy\", \"Judaism\").\nAllows_relationship(\"polygamy\", \"Christianity\").\nAllows_relationship(\"polygamy\", \"Catholicism\").\n.decl Answer()\nAnswer() :- Allows_relationship(\"polyamory\", religion), religion = \"none\".\nAnswer() :- Allows_relationship(\"polygamy\", religion), religion = \"Catholicism\".\n.output Answer"]}
{"id": 880, "answer": true, "completion": ".decl Can_hide_disorder(Disorder:symbol)\nCan_hide_disorder(\"eating disorder\").\nCan_hide_disorder(\"anxiety disorder\").\nCan_hide_disorder(\"depressive disorder\").\n.decl Answer()\nAnswer() :- Can_hide_disorder(disorder).\n.output Answer", "completions": [".decl Can_hide_disorder(Disorder:symbol)\nCan_hide_disorder(\"eating disorder\").\nCan_hide_disorder(\"anxiety disorder\").\nCan_hide_disorder(\"depressive disorder\").\n.decl Answer()\nAnswer() :- Can_hide_disorder(disorder).\n.output Answer"]}
{"id": 881, "answer": true, "completion": ".decl Inspired_by(Name:symbol, Brand:symbol)\nInspired_by(\"Nikola Tesla\", \"Tesla Motors\").\nInspired_by(\"Nikola Tesla\", \"Tesla Inc.\").\nInspired_by(\"Nikola Tesla\", \"Tesla Science Center\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Nikola Tesla\", brand1), Inspired_by(\"Nikola Tesla\", brand2), brand1 != brand2.\n.output Answer", "completions": [".decl Inspired_by(Name:symbol, Brand:symbol)\nInspired_by(\"Nikola Tesla\", \"Tesla Motors\").\nInspired_by(\"Nikola Tesla\", \"Tesla Inc.\").\nInspired_by(\"Nikola Tesla\", \"Tesla Science Center\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Nikola Tesla\", brand1), Inspired_by(\"Nikola Tesla\", brand2), brand1 != brand2.\n.output Answer"]}
{"id": 882, "answer": true, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"eleventh-grader\", 16).\n.decl Eligible_for_program(Program:symbol, Min_age:float)\nEligible_for_program(\"Medicare\", 65).\n.decl Answer()\nAnswer() :- Age(\"eleventh-grader\", age), Eligible_for_program(\"Medicare\", min_age), age < min_age.\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"eleventh-grader\", 16).\n.decl Eligible_for_program(Program:symbol, Min_age:float)\nEligible_for_program(\"Medicare\", 65).\n.decl Answer()\nAnswer() :- Age(\"eleventh-grader\", age), Eligible_for_program(\"Medicare\", min_age), age < min_age.\n.output Answer"]}
{"id": 883, "answer": false, "completion": ".decl Has_disorder(Person:symbol, Disorder:symbol)\nHas_disorder(\"John\", \"mood disorder\").\n.decl Needs_institutionalization(Disorder:symbol)\nNeeds_institutionalization(\"schizophrenia\").\nNeeds_institutionalization(\"severe bipolar disorder\").\n.decl Answer()\nAnswer() :- Has_disorder(person, disorder), Needs_institutionalization(disorder), !Has_disorder(person, \"stable mood\").\n.output Answer", "completions": [".decl Has_disorder(Person:symbol, Disorder:symbol)\nHas_disorder(\"John\", \"mood disorder\").\n.decl Needs_institutionalization(Disorder:symbol)\nNeeds_institutionalization(\"schizophrenia\").\nNeeds_institutionalization(\"severe bipolar disorder\").\n.decl Answer()\nAnswer() :- Has_disorder(person, disorder), Needs_institutionalization(disorder), !Has_disorder(person, \"stable mood\").\n.output Answer"]}
{"id": 884, "answer": true, "completion": ".decl Has_colors(Object:symbol, Color1:symbol, Color2:symbol, Color3:symbol)\nHas_colors(\"Gabon flag\", \"green\", \"yellow\", \"blue\").\n.decl Is_in_rainbow(Color:symbol)\nIs_in_rainbow(\"red\").\nIs_in_rainbow(\"orange\").\nIs_in_rainbow(\"yellow\").\nIs_in_rainbow(\"green\").\nIs_in_rainbow(\"blue\").\nIs_in_rainbow(\"indigo\").\nIs_in_rainbow(\"violet\").\n.decl Answer()\nAnswer() :- Has_colors(\"Gabon flag\", color1, color2, color3), Is_in_rainbow(color1), Is_in_rainbow(color2), Is_in_rainbow(color3).\n.output Answer", "completions": [".decl Has_colors(Object:symbol, Color1:symbol, Color2:symbol, Color3:symbol)\nHas_colors(\"Gabon flag\", \"green\", \"yellow\", \"blue\").\n.decl Is_in_rainbow(Color:symbol)\nIs_in_rainbow(\"red\").\nIs_in_rainbow(\"orange\").\nIs_in_rainbow(\"yellow\").\nIs_in_rainbow(\"green\").\nIs_in_rainbow(\"blue\").\nIs_in_rainbow(\"indigo\").\nIs_in_rainbow(\"violet\").\n.decl Answer()\nAnswer() :- Has_colors(\"Gabon flag\", color1, color2, color3), Is_in_rainbow(color1), Is_in_rainbow(color2), Is_in_rainbow(color3).\n.output Answer"]}
{"id": 885, "answer": true, "completion": ".decl Visit_type(Visit:symbol, Type:symbol)\nVisit_type(\"preventive healthcare\", \"preventive\").\nVisit_type(\"sickness\", \"sickness\").\n.decl Answer()\nAnswer() :- Visit_type(visit1, \"preventive\"), Visit_type(visit2, \"sickness\"), visit1 != visit2.\n.output Answer", "completions": [".decl Visit_type(Visit:symbol, Type:symbol)\nVisit_type(\"preventive healthcare\", \"preventive\").\nVisit_type(\"sickness\", \"sickness\").\n.decl Answer()\nAnswer() :- Visit_type(visit1, \"preventive\"), Visit_type(visit2, \"sickness\"), visit1 != visit2.\n.output Answer"]}
{"id": 886, "answer": false, "completion": ".decl Has_fat(Content:symbol, Fat:float)\nHas_fat(\"McDonald's hamburger\", 9).\n.decl Recommended_fat_allowance(Person:symbol, Fat_allowance:float)\nRecommended_fat_allowance(\"adult\", 65).\n.decl Answer()\nAnswer() :- Has_fat(\"McDonald's hamburger\", fat), Recommended_fat_allowance(\"adult\", fat_allowance), fat * 7 > fat_allowance.\n.output Answer", "completions": [".decl Has_fat(Content:symbol, Fat:float)\nHas_fat(\"McDonald's hamburger\", 9).\n.decl Recommended_fat_allowance(Person:symbol, Fat_allowance:float)\nRecommended_fat_allowance(\"adult\", 65).\n.decl Answer()\nAnswer() :- Has_fat(\"McDonald's hamburger\", fat), Recommended_fat_allowance(\"adult\", fat_allowance), fat * 7 > fat_allowance.\n.output Answer"]}
{"id": 887, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Edward II of England\", 1284).\n.decl Invaded(Place:symbol, Year:float)\nInvaded(\"England\", 793).\n.decl Answer()\nAnswer() :- Born_in_year(\"Edward II of England\", year), !Invaded(\"England\", invasion_year), year >= invasion_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Edward II of England\", 1284).\n.decl Invaded(Place:symbol, Year:float)\nInvaded(\"England\", 793).\n.decl Answer()\nAnswer() :- Born_in_year(\"Edward II of England\", year), !Invaded(\"England\", invasion_year), year >= invasion_year.\n.output Answer"]}
{"id": 888, "answer": true, "completion": ".decl Surgery(Type:symbol, Body_part:symbol)\nSurgery(\"ORIF\", \"leg\").\n.decl Affected_by_magnetic_field(Surgery_type:symbol)\nAffected_by_magnetic_field(\"ORIF\").\n.decl Answer()\nAnswer() :- Affected_by_magnetic_field(surgery_type), Surgery(surgery_type, \"leg\").\n.output Answer", "completions": [".decl Surgery(Type:symbol, Body_part:symbol)\nSurgery(\"ORIF\", \"leg\").\n.decl Affected_by_magnetic_field(Surgery_type:symbol)\nAffected_by_magnetic_field(\"ORIF\").\n.decl Answer()\nAnswer() :- Affected_by_magnetic_field(surgery_type), Surgery(surgery_type, \"leg\").\n.output Answer"]}
{"id": 889, "answer": true, "completion": ".decl Has_population(Planet:symbol, Population:float)\nHas_population(\"Earth\", 7.9e9).\n.decl Has_n_stars(Galaxy:symbol, N_stars:float)\nHas_n_stars(\"Milky Way\", 2.5e11).\n.decl Answer()\nAnswer() :- Has_population(\"Earth\", population), Has_n_stars(\"Milky Way\", n_stars), n_stars >= 10*population.\n.output Answer", "completions": [".decl Has_population(Planet:symbol, Population:float)\nHas_population(\"Earth\", 7.9e9).\n.decl Has_n_stars(Galaxy:symbol, N_stars:float)\nHas_n_stars(\"Milky Way\", 2.5e11).\n.decl Answer()\nAnswer() :- Has_population(\"Earth\", population), Has_n_stars(\"Milky Way\", n_stars), n_stars >= 10*population.\n.output Answer"]}
{"id": 890, "answer": false, "completion": ".decl Found_on_plate(Item:symbol, Plate:symbol)\nFound_on_plate(\"parsley\", \"holiday plate\").\n.decl Is_bone(Item:symbol)\nIs_bone(\"tibia\").\n.decl Answer()\nAnswer() :- Found_on_plate(\"tibia\", plate), Found_on_plate(\"parsley\", plate).\nAnswer() :- Found_on_plate(\"tibia\", plate), !Is_bone(\"tibia\").\n.output Answer", "completions": [".decl Found_on_plate(Item:symbol, Plate:symbol)\nFound_on_plate(\"parsley\", \"holiday plate\").\n.decl Is_bone(Item:symbol)\nIs_bone(\"tibia\").\n.decl Answer()\nAnswer() :- Found_on_plate(\"tibia\", plate), Found_on_plate(\"parsley\", plate).\nAnswer() :- Found_on_plate(\"tibia\", plate), !Is_bone(\"tibia\").\n.output Answer"]}
{"id": 891, "answer": true, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"Ashland, Oregon\", 21000).\n.decl Is_military_division(Division:symbol)\nIs_military_division(\"hypothetical division\").\n.decl Answer()\nAnswer() :- Has_population(\"Ashland, Oregon\", population), Is_military_division(division), population < 100000.\n.output Answer", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"Ashland, Oregon\", 21000).\n.decl Is_military_division(Division:symbol)\nIs_military_division(\"hypothetical division\").\n.decl Answer()\nAnswer() :- Has_population(\"Ashland, Oregon\", population), Is_military_division(division), population < 100000.\n.output Answer"]}
{"id": 892, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Dennis Hopper\", 1936).\n.decl Turns_age_in_year(Person:symbol, Age:float, Year:float)\nTurns_age_in_year(\"Dennis Hopper\", 80, 2016).\n.decl Answer()\nAnswer() :- Turns_age_in_year(\"Dennis Hopper\", age, 2021), Born_in_year(\"Dennis Hopper\", birth_year), age = 2021 - birth_year.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Dennis Hopper\", 1936).\n.decl Turns_age_in_year(Person:symbol, Age:float, Year:float)\nTurns_age_in_year(\"Dennis Hopper\", 80, 2016).\n.decl Answer()\nAnswer() :- Turns_age_in_year(\"Dennis Hopper\", age, 2021), Born_in_year(\"Dennis Hopper\", birth_year), age = 2021 - birth_year.\n.output Answer"]}
{"id": 893, "answer": false, "completion": ".decl Is_aggressive(Animal:symbol)\nIs_aggressive(\"bumblebee\").\n.decl Is_suicidal(Animal:symbol)\nIs_suicidal(\"bumblebee\").\n.decl Answer()\nAnswer() :- Is_aggressive(animal), !Is_suicidal(animal).\n.output Answer", "completions": [".decl Is_aggressive(Animal:symbol)\nIs_aggressive(\"bumblebee\").\n.decl Is_suicidal(Animal:symbol)\nIs_suicidal(\"bumblebee\").\n.decl Answer()\nAnswer() :- Is_aggressive(animal), !Is_suicidal(animal).\n.output Answer"]}
{"id": 894, "answer": false, "completion": ".decl Has_property(Element:symbol, Property:symbol)\nHas_property(\"Mercury\", \"toxic\").\nHas_property(\"Mercury\", \"liquid at room temperature\").\nHas_property(\"Slip N Slide\", \"requires a slippery surface\").\n.decl Answer()\nAnswer() :- Has_property(\"Mercury\", \"liquid at room temperature\"), Has_property(\"Mercury\", \"toxic\"), !Has_property(\"Slip N Slide\", \"requires a slippery surface\").\n.output Answer", "completions": [".decl Has_property(Element:symbol, Property:symbol)\nHas_property(\"Mercury\", \"toxic\").\nHas_property(\"Mercury\", \"liquid at room temperature\").\nHas_property(\"Slip N Slide\", \"requires a slippery surface\").\n.decl Answer()\nAnswer() :- Has_property(\"Mercury\", \"liquid at room temperature\"), Has_property(\"Mercury\", \"toxic\"), !Has_property(\"Slip N Slide\", \"requires a slippery surface\").\n.output Answer"]}
{"id": 895, "answer": true, "completion": ".decl Jumps(Person:symbol, Height:float)\nJumps(\"Javier Sotomayor\", 2.45).\n.decl Runs(Person:symbol, Speed:float)\nRuns(\"Bengal cat\", 30).\n.decl Answer()\nAnswer() :- Runs(\"Bengal cat\", speed), Jumps(\"Javier Sotomayor\", height), speed*2 >= height.\n.output Answer", "completions": [".decl Jumps(Person:symbol, Height:float)\nJumps(\"Javier Sotomayor\", 2.45).\n.decl Runs(Person:symbol, Speed:float)\nRuns(\"Bengal cat\", 30).\n.decl Answer()\nAnswer() :- Runs(\"Bengal cat\", speed), Jumps(\"Javier Sotomayor\", height), speed*2 >= height.\n.output Answer"]}
{"id": 896, "answer": false, "completion": ".decl Rice_pudding(Rice_type:symbol)\nRice_pudding(\"white rice\").\nRice_pudding(\"brown rice\").\nRice_pudding(\"jasmine rice\").\n.decl Answer()\nAnswer() :- Rice_pudding(rice_type1), Rice_pudding(rice_type2), rice_type1 != rice_type2, !Rice_pudding(\"brown rice\", rice_type1), !Rice_pudding(\"brown rice\", rice_type2).\n.output Answer", "completions": [".decl Rice_pudding(Rice_type:symbol)\nRice_pudding(\"white rice\").\nRice_pudding(\"brown rice\").\nRice_pudding(\"jasmine rice\").\n.decl Answer()\nAnswer() :- Rice_pudding(rice_type1), Rice_pudding(rice_type2), rice_type1 != rice_type2, !Rice_pudding(\"brown rice\", rice_type1), !Rice_pudding(\"brown rice\", rice_type2).\n.output Answer"]}
{"id": 897, "answer": true, "completion": ".decl Causes_disease(Disease:symbol, Symptom:symbol)\nCauses_disease(\"cancer\", \"excess adrenaline production\").\n.decl Answer()\nAnswer() :- Causes_disease(\"cancer\", \"excess adrenaline production\").\n.output Answer", "completions": [".decl Causes_disease(Disease:symbol, Symptom:symbol)\nCauses_disease(\"cancer\", \"excess adrenaline production\").\n.decl Answer()\nAnswer() :- Causes_disease(\"cancer\", \"excess adrenaline production\").\n.output Answer"]}
{"id": 898, "answer": true, "completion": ".decl Has_n_states(Country:symbol, N_states:float)\nHas_n_states(\"Ancient Greece\", 12).\nHas_n_states(\"United States\", 45).\n.decl Answer()\nAnswer() :- Has_n_states(\"Ancient Greece\", n_states1), Has_n_states(\"United States\", n_states2), n_states1 < n_states2.\n.output Answer", "completions": [".decl Has_n_states(Country:symbol, N_states:float)\nHas_n_states(\"Ancient Greece\", 12).\nHas_n_states(\"United States\", 45).\n.decl Answer()\nAnswer() :- Has_n_states(\"Ancient Greece\", n_states1), Has_n_states(\"United States\", n_states2), n_states1 < n_states2.\n.output Answer"]}
{"id": 899, "answer": true, "completion": ".decl Involved(Person:symbol, Company:symbol)\nInvolved(\"Ben Cohen\", \"Ben & Jerry's\").\nInvolved(\"Jerry Greenfield\", \"Ben & Jerry's\").\n.decl Answer()\nAnswer() :- Involved(\"Ben Cohen\", \"Ben & Jerry's\"), Involved(\"Jerry Greenfield\", \"Ben & Jerry's\").\n.output Answer", "completions": [".decl Involved(Person:symbol, Company:symbol)\nInvolved(\"Ben Cohen\", \"Ben & Jerry's\").\nInvolved(\"Jerry Greenfield\", \"Ben & Jerry's\").\n.decl Answer()\nAnswer() :- Involved(\"Ben Cohen\", \"Ben & Jerry's\"), Involved(\"Jerry Greenfield\", \"Ben & Jerry's\").\n.output Answer"]}
{"id": 900, "answer": true, "completion": ".decl Job_title(Person:symbol, Title:symbol)\nJob_title(\"United States Secretary of State\", \"Secretary of State\").\n.decl Answer()\nAnswer() :- !Job_title(\"United States Secretary of State\", \"White House phone operator\").\n.output Answer", "completions": [".decl Job_title(Person:symbol, Title:symbol)\nJob_title(\"United States Secretary of State\", \"Secretary of State\").\n.decl Answer()\nAnswer() :- !Job_title(\"United States Secretary of State\", \"White House phone operator\").\n.output Answer"]}
{"id": 901, "answer": false, "completion": ".decl Developed_by(Person:symbol, Product:symbol)\nDeveloped_by(\"Bill Gates\", \"Microsoft Windows\").\n.decl Answer()\nAnswer() :- !Developed_by(\"Bill Gates\", \"PlayStation 4\").\n.output Answer", "completions": [".decl Developed_by(Person:symbol, Product:symbol)\nDeveloped_by(\"Bill Gates\", \"Microsoft Windows\").\n.decl Answer()\nAnswer() :- !Developed_by(\"Bill Gates\", \"PlayStation 4\").\n.output Answer"]}
{"id": 902, "answer": true, "completion": ".decl Published_in_year(Magazine:symbol, Year:float)\nPublished_in_year(\"The Atlantic\", 1980).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Games of the XXII Olympiad\", 1980).\n.decl Answer()\nAnswer() :- Published_in_year(\"The Atlantic\", year1), Happens_in_year(\"Games of the XXII Olympiad\", year2), year1 = year2.\n.output Answer", "completions": [".decl Published_in_year(Magazine:symbol, Year:float)\nPublished_in_year(\"The Atlantic\", 1980).\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Games of the XXII Olympiad\", 1980).\n.decl Answer()\nAnswer() :- Published_in_year(\"The Atlantic\", year1), Happens_in_year(\"Games of the XXII Olympiad\", year2), year1 = year2.\n.output Answer"]}
{"id": 903, "answer": false, "completion": ".decl Outlives(Person_A:symbol, Person_B:symbol)\nOutlives(\"Francis Crick\", \"James Watson\").\n.decl Answer()\nAnswer() :- Outlives(\"Francis Crick\", \"James Watson\").\n.output Answer", "completions": [".decl Outlives(Person_A:symbol, Person_B:symbol)\nOutlives(\"Francis Crick\", \"James Watson\").\n.decl Answer()\nAnswer() :- Outlives(\"Francis Crick\", \"James Watson\").\n.output Answer"]}
{"id": 904, "answer": false, "completion": ".decl Author_wrote_book(Author:symbol, Book:symbol)\nAuthor_wrote_book(\"Lewis Carroll\", \"Alice's Adventures in Wonderland\").\n.decl Member_of_organization(Person:symbol, Organization:symbol)\nMember_of_organization(\"Lewis Carroll\", \"Society of the Inner Temple\").\n.decl Answer()\nAnswer() :- Author_wrote_book(\"Lewis Carroll\", \"Alice's Adventures in Wonderland\"), Member_of_organization(\"Lewis Carroll\", \"Masonic Lodge\").\n.output Answer", "completions": [".decl Author_wrote_book(Author:symbol, Book:symbol)\nAuthor_wrote_book(\"Lewis Carroll\", \"Alice's Adventures in Wonderland\").\n.decl Member_of_organization(Person:symbol, Organization:symbol)\nMember_of_organization(\"Lewis Carroll\", \"Society of the Inner Temple\").\n.decl Answer()\nAnswer() :- Author_wrote_book(\"Lewis Carroll\", \"Alice's Adventures in Wonderland\"), Member_of_organization(\"Lewis Carroll\", \"Masonic Lodge\").\n.output Answer"]}
{"id": 905, "answer": false, "completion": ".decl Linked_with(Event:symbol, Concept:symbol)\nLinked_with(\"asteroid impact\", \"extinction\").\nLinked_with(\"virginity\", \"abstinence\").\n.decl Answer()\nAnswer() :- Linked_with(\"asteroid impact\", concept), Linked_with(\"virginity\", concept).\n.output Answer", "completions": [".decl Linked_with(Event:symbol, Concept:symbol)\nLinked_with(\"asteroid impact\", \"extinction\").\nLinked_with(\"virginity\", \"abstinence\").\n.decl Answer()\nAnswer() :- Linked_with(\"asteroid impact\", concept), Linked_with(\"virginity\", concept).\n.output Answer"]}
{"id": 906, "answer": false, "completion": ".decl Starred_in(Movie:symbol, Actor:symbol)\nStarred_in(\"Easy Rider\", \"Dennis Hopper\").\nStarred_in(\"Man of Steel\", \"Dean Cain\").\nStarred_in(\"The Graduate\", \"Katharine Ross\").\n.decl Dated(Person:symbol, Partner:symbol)\nDated(\"Dean Cain\", \"Katharine Ross\").\n.decl Answer()\nAnswer() :- Starred_in(movie1, \"Dennis Hopper\"), Starred_in(movie2, \"Katharine Ross\"), Dated(\"Dean Cain\", partner), Starred_in(movie2, partner), movie1 = movie2.\n.output Answer", "completions": [".decl Starred_in(Movie:symbol, Actor:symbol)\nStarred_in(\"Easy Rider\", \"Dennis Hopper\").\nStarred_in(\"Man of Steel\", \"Dean Cain\").\nStarred_in(\"The Graduate\", \"Katharine Ross\").\n.decl Dated(Person:symbol, Partner:symbol)\nDated(\"Dean Cain\", \"Katharine Ross\").\n.decl Answer()\nAnswer() :- Starred_in(movie1, \"Dennis Hopper\"), Starred_in(movie2, \"Katharine Ross\"), Dated(\"Dean Cain\", partner), Starred_in(movie2, partner), movie1 = movie2.\n.output Answer"]}
{"id": 907, "answer": false, "completion": ".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Melania Trump\", \"model\").\nHas_profession(\"Olga Kurylenko\", \"actress\").\n.decl Answer()\nAnswer() :- Has_profession(\"Melania Trump\", profession), Has_profession(\"Olga Kurylenko\", profession).\n.output Answer", "completions": [".decl Has_profession(Person:symbol, Profession:symbol)\nHas_profession(\"Melania Trump\", \"model\").\nHas_profession(\"Olga Kurylenko\", \"actress\").\n.decl Answer()\nAnswer() :- Has_profession(\"Melania Trump\", profession), Has_profession(\"Olga Kurylenko\", profession).\n.output Answer"]}
{"id": 908, "answer": true, "completion": ".decl Needs_skill(Item:symbol, Skill:symbol)\nNeeds_skill(\"circuit board\", \"electronics\").\n.decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"farmer\", \"agriculture\").\n.decl Answer()\nAnswer() :- Needs_skill(\"circuit board\", skill), !Has_occupation(\"farmer\", skill).\nAnswer() :- !Needs_skill(\"circuit board\", _).\n.output Answer", "completions": [".decl Needs_skill(Item:symbol, Skill:symbol)\nNeeds_skill(\"circuit board\", \"electronics\").\n.decl Has_occupation(Person:symbol, Occupation:symbol)\nHas_occupation(\"farmer\", \"agriculture\").\n.decl Answer()\nAnswer() :- Needs_skill(\"circuit board\", skill), !Has_occupation(\"farmer\", skill).\nAnswer() :- !Needs_skill(\"circuit board\", _).\n.output Answer"]}
{"id": 909, "answer": false, "completion": ".decl Has_n_eyes(Species:symbol, N_eyes:float)\nHas_n_eyes(\"jumping spider\", 8).\n.decl Needs_contact_lenses(Species:symbol)\n!Needs_contact_lenses(species) :- Has_n_eyes(species, n_eyes), n_eyes <= 6.\n.decl Answer()\nAnswer() :- Needs_contact_lenses(\"jumping spider\").\n.output Answer", "completions": [".decl Has_n_eyes(Species:symbol, N_eyes:float)\nHas_n_eyes(\"jumping spider\", 8).\n.decl Needs_contact_lenses(Species:symbol)\n!Needs_contact_lenses(species) :- Has_n_eyes(species, n_eyes), n_eyes <= 6.\n.decl Answer()\nAnswer() :- Needs_contact_lenses(\"jumping spider\").\n.output Answer"]}
{"id": 910, "answer": true, "completion": ".decl Made_with_currency(Transaction:symbol, Currency:symbol)\nMade_with_currency(\"Louisiana Purchase\", \"USD\").\n.decl Answer()\nAnswer() :- !Made_with_currency(\"Louisiana Purchase\", \"bitcoin\").\n.output Answer", "completions": [".decl Made_with_currency(Transaction:symbol, Currency:symbol)\nMade_with_currency(\"Louisiana Purchase\", \"USD\").\n.decl Answer()\nAnswer() :- !Made_with_currency(\"Louisiana Purchase\", \"bitcoin\").\n.output Answer"]}
{"id": 911, "answer": false, "completion": ".decl Has_length(Book:symbol, Length:float)\nHas_length(\"The Hobbit\", 95000).\n.decl Reading_speed(Person:symbol, Speed:float)\nReading_speed(\"John\", 300).\n.decl Answer()\nAnswer() :- Has_length(\"The Hobbit\", length), Reading_speed(\"John\", speed), length/speed <= 240.\n.output Answer", "completions": [".decl Has_length(Book:symbol, Length:float)\nHas_length(\"The Hobbit\", 95000).\n.decl Reading_speed(Person:symbol, Speed:float)\nReading_speed(\"John\", 300).\n.decl Answer()\nAnswer() :- Has_length(\"The Hobbit\", length), Reading_speed(\"John\", speed), length/speed <= 240.\n.output Answer"]}
{"id": 912, "answer": true, "completion": ".decl Cost(Cost:float)\nCost(50000000).\n.decl Box_office(Box_office:float)\nBox_office(821847012).\n.decl Answer()\nAnswer() :- Cost(cost), Box_office(box_office), box_office > cost.\n.output Answer", "completions": [".decl Cost(Cost:float)\nCost(50000000).\n.decl Box_office(Box_office:float)\nBox_office(821847012).\n.decl Answer()\nAnswer() :- Cost(cost), Box_office(box_office), box_office > cost.\n.output Answer"]}
{"id": 913, "answer": true, "completion": ".decl Involved_in(Event:symbol, Person:symbol)\nInvolved_in(\"death of a member of the royal family\", \"paparazzi\").\n.decl Answer()\nAnswer() :- Involved_in(\"death of a member of the royal family\", person).\n.output Answer", "completions": [".decl Involved_in(Event:symbol, Person:symbol)\nInvolved_in(\"death of a member of the royal family\", \"paparazzi\").\n.decl Answer()\nAnswer() :- Involved_in(\"death of a member of the royal family\", person).\n.output Answer"]}
{"id": 914, "answer": true, "completion": ".decl From_city(Person:symbol, City:symbol)\nFrom_city(\"John Gall\", \"Palo Alto\").\n.decl Located_in(City:symbol, State:symbol)\nLocated_in(\"Palo Alto\", \"California\").\nLocated_in(\"Stanford\", \"California\").\n.decl Answer()\nAnswer() :- From_city(\"John Gall\", city), Located_in(city, state), Located_in(\"Stanford\", state).\n.output Answer", "completions": [".decl From_city(Person:symbol, City:symbol)\nFrom_city(\"John Gall\", \"Palo Alto\").\n.decl Located_in(City:symbol, State:symbol)\nLocated_in(\"Palo Alto\", \"California\").\nLocated_in(\"Stanford\", \"California\").\n.decl Answer()\nAnswer() :- From_city(\"John Gall\", city), Located_in(city, state), Located_in(\"Stanford\", state).\n.output Answer"]}
{"id": 915, "answer": true, "completion": ".decl Slaughtered_in_month(Animal:symbol, Month:symbol)\nSlaughtered_in_month(\"pig\", \"December\").\n.decl Takes_time_to_cure(Meat:symbol, Time:float)\nTakes_time_to_cure(\"parma ham\", 12).\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"New Year's\", \"January\").\n.decl Answer()\nAnswer() :- Slaughtered_in_month(\"pig\", month), Takes_time_to_cure(\"parma ham\", time), Happens_in_month(\"New Year's\", month2), month2 = month + time.\n.output Answer", "completions": [".decl Slaughtered_in_month(Animal:symbol, Month:symbol)\nSlaughtered_in_month(\"pig\", \"December\").\n.decl Takes_time_to_cure(Meat:symbol, Time:float)\nTakes_time_to_cure(\"parma ham\", 12).\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"New Year's\", \"January\").\n.decl Answer()\nAnswer() :- Slaughtered_in_month(\"pig\", month), Takes_time_to_cure(\"parma ham\", time), Happens_in_month(\"New Year's\", month2), month2 = month + time.\n.output Answer"]}
{"id": 916, "answer": false, "completion": ".decl Believes(Person:symbol, Statement:symbol)\nBelieves(\"Shivambu practitioner\", \"ammonia is healthy\").\n.decl Answer()\nAnswer() :- Believes(\"Shivambu practitioner\", statement), statement != \"ammonia is unhealthy\".\n.output Answer", "completions": [".decl Believes(Person:symbol, Statement:symbol)\nBelieves(\"Shivambu practitioner\", \"ammonia is healthy\").\n.decl Answer()\nAnswer() :- Believes(\"Shivambu practitioner\", statement), statement != \"ammonia is unhealthy\".\n.output Answer"]}
{"id": 917, "answer": true, "completion": ".decl Eats(Meal:symbol, Ingredient:symbol)\nEats(\"Hamas agent meal\", \"pig\").\n.decl Is_bad(Action:symbol)\nIs_bad(\"eating pig\").\n.decl Answer()\nAnswer() :- Eats(\"Hamas agent meal\", ingredient), Is_bad(action), ingredient = \"pig\".\n.output Answer", "completions": [".decl Eats(Meal:symbol, Ingredient:symbol)\nEats(\"Hamas agent meal\", \"pig\").\n.decl Is_bad(Action:symbol)\nIs_bad(\"eating pig\").\n.decl Answer()\nAnswer() :- Eats(\"Hamas agent meal\", ingredient), Is_bad(action), ingredient = \"pig\".\n.output Answer"]}
{"id": 918, "answer": false, "completion": ".decl Has_played(Artist:symbol, Venue:symbol)\nHas_played(\"The Strokes\", \"Hammerstein Ballroom\").\nHas_played(\"Radiohead\", \"Madison Square Garden\").\n.decl Answer()\nAnswer() :- Has_played(\"Israelis\", venue), Has_played(artist, venue), artist != \"Israelis\".\n.output Answer", "completions": [".decl Has_played(Artist:symbol, Venue:symbol)\nHas_played(\"The Strokes\", \"Hammerstein Ballroom\").\nHas_played(\"Radiohead\", \"Madison Square Garden\").\n.decl Answer()\nAnswer() :- Has_played(\"Israelis\", venue), Has_played(artist, venue), artist != \"Israelis\".\n.output Answer"]}
{"id": 919, "answer": true, "completion": ".decl Participates_in(Person:symbol, Event:symbol)\nParticipates_in(\"Elle Fanning\", \"End of Apartheid\").\n.decl Essential_participant(Event:symbol, Person:symbol)\nEssential_participant(\"End of Apartheid\", \"Nelson Mandela\").\nEssential_participant(\"End of Apartheid\", \"Desmond Tutu\").\n.decl Answer()\nAnswer() :- Participates_in(\"Elle Fanning\", event), !Essential_participant(event, \"Elle Fanning\").\n.output Answer", "completions": [".decl Participates_in(Person:symbol, Event:symbol)\nParticipates_in(\"Elle Fanning\", \"End of Apartheid\").\n.decl Essential_participant(Event:symbol, Person:symbol)\nEssential_participant(\"End of Apartheid\", \"Nelson Mandela\").\nEssential_participant(\"End of Apartheid\", \"Desmond Tutu\").\n.decl Answer()\nAnswer() :- Participates_in(\"Elle Fanning\", event), !Essential_participant(event, \"Elle Fanning\").\n.output Answer"]}
{"id": 920, "answer": false, "completion": ".decl Attends(Person:symbol, School:symbol)\nAttends(\"Blossom\", \"Townsville Elementary School\").\nAttends(\"Bubbles\", \"Townsville Elementary School\").\nAttends(\"Buttercup\", \"Townsville Elementary School\").\n.decl Located_in(School:symbol, Location:symbol)\nLocated_in(\"Camden Military Academy\", \"Camden, South Carolina\").\n.decl Answer()\nAnswer() :- Attends(\"Blossom\", school), Located_in(school, location), Attends(\"Bubbles\", school2), Located_in(school2, location), Attends(\"Buttercup\", school3), Located_in(school3, location).\n.output Answer", "completions": [".decl Attends(Person:symbol, School:symbol)\nAttends(\"Blossom\", \"Townsville Elementary School\").\nAttends(\"Bubbles\", \"Townsville Elementary School\").\nAttends(\"Buttercup\", \"Townsville Elementary School\").\n.decl Located_in(School:symbol, Location:symbol)\nLocated_in(\"Camden Military Academy\", \"Camden, South Carolina\").\n.decl Answer()\nAnswer() :- Attends(\"Blossom\", school), Located_in(school, location), Attends(\"Bubbles\", school2), Located_in(school2, location), Attends(\"Buttercup\", school3), Located_in(school3, location).\n.output Answer"]}
{"id": 921, "answer": false, "completion": ".decl Can_ride(Person:symbol, Animal:symbol)\nCan_ride(\"Chuck Norris\", \"anything\").\n.decl Answer()\nAnswer() :- Can_ride(\"Chuck Norris\", \"horse\").\n.output Answer", "completions": [".decl Can_ride(Person:symbol, Animal:symbol)\nCan_ride(\"Chuck Norris\", \"anything\").\n.decl Answer()\nAnswer() :- Can_ride(\"Chuck Norris\", \"horse\").\n.output Answer"]}
{"id": 922, "answer": true, "completion": ".decl Used_in(Event:symbol, Object:symbol)\nUsed_in(\"Space Race\", \"relay batons\").\n.decl Answer()\nAnswer() :- !Used_in(\"Space Race\", \"relay batons\").\n.output Answer", "completions": [".decl Used_in(Event:symbol, Object:symbol)\nUsed_in(\"Space Race\", \"relay batons\").\n.decl Answer()\nAnswer() :- !Used_in(\"Space Race\", \"relay batons\").\n.output Answer"]}
{"id": 923, "answer": false, "completion": ".decl Supports(Person:symbol, Policy:symbol)\nSupports(\"Harvey Milk\", \"gay rights\").\n.decl Opposes(Person:symbol, Policy:symbol)\nOpposes(\"Barack Obama\", \"Don't Ask, Don't Tell\").\n.decl Answer()\nAnswer() :- Supports(\"Harvey Milk\", policy), Opposes(\"Barack Obama\", policy).\n.output Answer", "completions": [".decl Supports(Person:symbol, Policy:symbol)\nSupports(\"Harvey Milk\", \"gay rights\").\n.decl Opposes(Person:symbol, Policy:symbol)\nOpposes(\"Barack Obama\", \"Don't Ask, Don't Tell\").\n.decl Answer()\nAnswer() :- Supports(\"Harvey Milk\", policy), Opposes(\"Barack Obama\", policy).\n.output Answer"]}
{"id": 924, "answer": false, "completion": ".decl Requires_vision_correction(Person:symbol)\nRequires_vision_correction(\"John\", \"glasses\").\nRequires_vision_correction(\"Jane\", \"contacts\").\n.decl Can_read_with_vision_correction(Person:symbol)\nCan_read_with_vision_correction(\"glasses\").\nCan_read_with_vision_correction(\"contacts\").\n.decl Answer()\nAnswer() :- Requires_vision_correction(person, correction), Can_read_with_vision_correction(correction).\n.output Answer", "completions": [".decl Requires_vision_correction(Person:symbol)\nRequires_vision_correction(\"John\", \"glasses\").\nRequires_vision_correction(\"Jane\", \"contacts\").\n.decl Can_read_with_vision_correction(Person:symbol)\nCan_read_with_vision_correction(\"glasses\").\nCan_read_with_vision_correction(\"contacts\").\n.decl Answer()\nAnswer() :- Requires_vision_correction(person, correction), Can_read_with_vision_correction(correction).\n.output Answer"]}
{"id": 925, "answer": false, "completion": ".decl Spends_time_in_state(Person:symbol, State:symbol)\nSpends_time_in_state(\"Rumi\", \"euphoria\").\n.decl Answer()\nAnswer() :- Spends_time_in_state(\"Rumi\", \"euphoria\").\n.output Answer", "completions": [".decl Spends_time_in_state(Person:symbol, State:symbol)\nSpends_time_in_state(\"Rumi\", \"euphoria\").\n.decl Answer()\nAnswer() :- Spends_time_in_state(\"Rumi\", \"euphoria\").\n.output Answer"]}
{"id": 926, "answer": true, "completion": ".decl Measures_Trait(Technique:symbol, Trait:symbol)\nMeasures_Trait(\"dual-energy X-ray absorptiometry\", \"bone density\").\n.decl Has_Trait(Animal:symbol, Trait:symbol)\nHas_Trait(\"crab\", \"exoskeleton\").\n.decl Answer()\nAnswer() :- Measures_Trait(technique, \"bone density\"), Has_Trait(\"crab\", trait), technique != \"dual-energy X-ray absorptiometry\".\n.output Answer", "completions": [".decl Measures_Trait(Technique:symbol, Trait:symbol)\nMeasures_Trait(\"dual-energy X-ray absorptiometry\", \"bone density\").\n.decl Has_Trait(Animal:symbol, Trait:symbol)\nHas_Trait(\"crab\", \"exoskeleton\").\n.decl Answer()\nAnswer() :- Measures_Trait(technique, \"bone density\"), Has_Trait(\"crab\", trait), technique != \"dual-energy X-ray absorptiometry\".\n.output Answer"]}
{"id": 927, "answer": true, "completion": ".decl Is_aerodynamic(Object:symbol)\nIs_aerodynamic(\"cactus\").\n.decl Benefits_from_closed_stomata(Object:symbol)\nBenefits_from_closed_stomata(\"cactus\").\n.decl Has_frequency(Object:symbol, Frequency:float)\nHas_frequency(\"cactus\", 0.5).\n.decl Answer()\nAnswer() :- Is_aerodynamic(object), Benefits_from_closed_stomata(object), Has_frequency(object, frequency), frequency > 0.3.\n.output Answer", "completions": [".decl Is_aerodynamic(Object:symbol)\nIs_aerodynamic(\"cactus\").\n.decl Benefits_from_closed_stomata(Object:symbol)\nBenefits_from_closed_stomata(\"cactus\").\n.decl Has_frequency(Object:symbol, Frequency:float)\nHas_frequency(\"cactus\", 0.5).\n.decl Answer()\nAnswer() :- Is_aerodynamic(object), Benefits_from_closed_stomata(object), Has_frequency(object, frequency), frequency > 0.3.\n.output Answer"]}
{"id": 928, "answer": true, "completion": ".decl Contains(Nutrient:symbol, Food:symbol)\nContains(\"zinc\", \"oysters\").\nContains(\"omega-3 fatty acids\", \"oysters\").\nContains(\"sugar\", \"candy\").\nContains(\"caffeine\", \"coffee\").\n.decl Avoid(Food:symbol, Condition:symbol)\nAvoid(\"candy\", \"diabetes\").\nAvoid(\"coffee\", \"insomnia\").\nAvoid(\"oysters\", \"ADHD\").\n.decl Answer()\nAnswer() :- Contains(nutrient, \"oysters\"), Avoid(\"oysters\", condition), nutrient = \"zinc\".\n.output Answer", "completions": [".decl Contains(Nutrient:symbol, Food:symbol)\nContains(\"zinc\", \"oysters\").\nContains(\"omega-3 fatty acids\", \"oysters\").\nContains(\"sugar\", \"candy\").\nContains(\"caffeine\", \"coffee\").\n.decl Avoid(Food:symbol, Condition:symbol)\nAvoid(\"candy\", \"diabetes\").\nAvoid(\"coffee\", \"insomnia\").\nAvoid(\"oysters\", \"ADHD\").\n.decl Answer()\nAnswer() :- Contains(nutrient, \"oysters\"), Avoid(\"oysters\", condition), nutrient = \"zinc\".\n.output Answer"]}
{"id": 929, "answer": true, "completion": ".decl Has_been_to_space(Object:symbol)\nHas_been_to_space(\"Royal Air Force ensign\").\n.decl Answer()\nAnswer() :- Has_been_to_space(\"Royal Air Force ensign\").\n.output Answer", "completions": [".decl Has_been_to_space(Object:symbol)\nHas_been_to_space(\"Royal Air Force ensign\").\n.decl Answer()\nAnswer() :- Has_been_to_space(\"Royal Air Force ensign\").\n.output Answer"]}
{"id": 930, "answer": false, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Samoa\", 200000).\n.decl Employed_at(Person:symbol, Company:symbol)\nEmployed_at(\"John Smith\", \"JPMorgan Chase\").\nEmployed_at(\"Jane Doe\", \"JPMorgan Chase\").\n.decl Answer()\nAnswer() :- Has_population(\"Samoa\", population), Employed_at(person, \"JPMorgan Chase\"), population <= count(person, Employed_at(person, \"JPMorgan Chase\")).\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"Samoa\", 200000).\n.decl Employed_at(Person:symbol, Company:symbol)\nEmployed_at(\"John Smith\", \"JPMorgan Chase\").\nEmployed_at(\"Jane Doe\", \"JPMorgan Chase\").\n.decl Answer()\nAnswer() :- Has_population(\"Samoa\", population), Employed_at(person, \"JPMorgan Chase\"), population <= count(person, Employed_at(person, \"JPMorgan Chase\")).\n.output Answer"]}
{"id": 931, "answer": false, "completion": ".decl Contributed_to(Person:symbol, Work:symbol)\nContributed_to(\"Rosalind Franklin\", \"X-ray crystallography of DNA\").\nContributed_to(\"James Watson\", \"Discovery of the structure of DNA\").\nContributed_to(\"Francis Crick\", \"Discovery of the structure of DNA\").\nContributed_to(\"Craig Venter\", \"Whole Genome Sequencing\").\nContributed_to(\"Eric Lander\", \"Human Genome Project\").\n.decl Answer()\nAnswer() :- Contributed_to(\"Rosalind Franklin\", work1), Contributed_to(\"Craig Venter\", work2), work1 = work2.\n.output Answer", "completions": [".decl Contributed_to(Person:symbol, Work:symbol)\nContributed_to(\"Rosalind Franklin\", \"X-ray crystallography of DNA\").\nContributed_to(\"James Watson\", \"Discovery of the structure of DNA\").\nContributed_to(\"Francis Crick\", \"Discovery of the structure of DNA\").\nContributed_to(\"Craig Venter\", \"Whole Genome Sequencing\").\nContributed_to(\"Eric Lander\", \"Human Genome Project\").\n.decl Answer()\nAnswer() :- Contributed_to(\"Rosalind Franklin\", work1), Contributed_to(\"Craig Venter\", work2), work1 = work2.\n.output Answer"]}
{"id": 932, "answer": false, "completion": ".decl Holds_degree(Person:symbol, Degree:symbol)\nHolds_degree(\"Kenny G\", \"Bachelor of Music\").\nHolds_degree(\"Kenny G\", \"Master of Music\").\n.decl Qualifies_for_job(Person:symbol, Job:symbol)\nQualifies_for_job(\"Kenny G\", \"musician\").\nQualifies_for_job(\"Kenny G\", \"saxophonist\").\nQualifies_for_job(\"Kenny G\", \"recording artist\").\n.decl Answer()\nAnswer() :- Qualifies_for_job(\"Kenny G\", \"tax collector\"), Holds_degree(\"Kenny G\", degree), degree != \"Bachelor of Music\", degree != \"Master of Music\".\n.output Answer", "completions": [".decl Holds_degree(Person:symbol, Degree:symbol)\nHolds_degree(\"Kenny G\", \"Bachelor of Music\").\nHolds_degree(\"Kenny G\", \"Master of Music\").\n.decl Qualifies_for_job(Person:symbol, Job:symbol)\nQualifies_for_job(\"Kenny G\", \"musician\").\nQualifies_for_job(\"Kenny G\", \"saxophonist\").\nQualifies_for_job(\"Kenny G\", \"recording artist\").\n.decl Answer()\nAnswer() :- Qualifies_for_job(\"Kenny G\", \"tax collector\"), Holds_degree(\"Kenny G\", degree), degree != \"Bachelor of Music\", degree != \"Master of Music\".\n.output Answer"]}
{"id": 933, "answer": false, "completion": ".decl Belongs_to_family(Animal:symbol, Family:symbol)\nBelongs_to_family(\"sable\", \"Mustelidae\").\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"sable\", 1).\n.decl Answer()\nAnswer() :- Belongs_to_family(animal, \"Mustelidae\"), Has_weight(animal, weight), weight < 1.\n.output Answer", "completions": [".decl Belongs_to_family(Animal:symbol, Family:symbol)\nBelongs_to_family(\"sable\", \"Mustelidae\").\n.decl Has_weight(Animal:symbol, Weight:float)\nHas_weight(\"sable\", 1).\n.decl Answer()\nAnswer() :- Belongs_to_family(animal, \"Mustelidae\"), Has_weight(animal, weight), weight < 1.\n.output Answer"]}
{"id": 934, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Mickey Mouse\", \"black\").\nHas_color(\"Mickey Mouse\", \"white\").\nHas_color(\"American flag\", \"red\").\nHas_color(\"American flag\", \"white\").\nHas_color(\"American flag\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Mickey Mouse\", color), !Has_color(\"American flag\", color).\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Mickey Mouse\", \"black\").\nHas_color(\"Mickey Mouse\", \"white\").\nHas_color(\"American flag\", \"red\").\nHas_color(\"American flag\", \"white\").\nHas_color(\"American flag\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Mickey Mouse\", color), !Has_color(\"American flag\", color).\n.output Answer"]}
{"id": 935, "answer": false, "completion": ".decl Has_color(Character:symbol, Color:symbol)\nHas_color(\"Darth Vader\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"Anakin Skywalker\", \"black\").\n.output Answer", "completions": [".decl Has_color(Character:symbol, Color:symbol)\nHas_color(\"Darth Vader\", \"black\").\n.decl Answer()\nAnswer() :- Has_color(\"Anakin Skywalker\", \"black\").\n.output Answer"]}
{"id": 936, "answer": false, "completion": ".decl Inspired_by(Story:symbol, Inspiration:symbol)\nInspired_by(\"Story of Jesus\", \"Egyptian myth\").\nInspired_by(\"Story of Hercules\", \"Greek myth\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Story of Jesus\", inspiration), Inspired_by(inspiration, \"Egyptian myth\").\n.output Answer", "completions": [".decl Inspired_by(Story:symbol, Inspiration:symbol)\nInspired_by(\"Story of Jesus\", \"Egyptian myth\").\nInspired_by(\"Story of Hercules\", \"Greek myth\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Story of Jesus\", inspiration), Inspired_by(inspiration, \"Egyptian myth\").\n.output Answer"]}
{"id": 937, "answer": true, "completion": ".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Jennifer Lawrence\", \"Shrader\").\n.decl Collaborates_with(Director:symbol, Collaborator:symbol)\nCollaborates_with(\"Martin Scorsese\", \"Robert De Niro\").\nCollaborates_with(\"Martin Scorsese\", \"Leonardo DiCaprio\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Jennifer Lawrence\", middle_name), Collaborates_with(\"Martin Scorsese\", collaborator), middle_name ~= collaborator.\n.output Answer", "completions": [".decl Has_middle_name(Person:symbol, Middle_name:symbol)\nHas_middle_name(\"Jennifer Lawrence\", \"Shrader\").\n.decl Collaborates_with(Director:symbol, Collaborator:symbol)\nCollaborates_with(\"Martin Scorsese\", \"Robert De Niro\").\nCollaborates_with(\"Martin Scorsese\", \"Leonardo DiCaprio\").\n.decl Answer()\nAnswer() :- Has_middle_name(\"Jennifer Lawrence\", middle_name), Collaborates_with(\"Martin Scorsese\", collaborator), middle_name ~= collaborator.\n.output Answer"]}
{"id": 938, "answer": false, "completion": ".decl Can_make(Object:symbol, Result:symbol)\nCan_make(\"Golden Gate Bridge\", \"MP3\").\n.decl Answer()\nAnswer() :- Can_make(object, result), object != \"Golden Gate Bridge\".\n.output Answer", "completions": [".decl Can_make(Object:symbol, Result:symbol)\nCan_make(\"Golden Gate Bridge\", \"MP3\").\n.decl Answer()\nAnswer() :- Can_make(object, result), object != \"Golden Gate Bridge\".\n.output Answer"]}
{"id": 939, "answer": true, "completion": ".decl Treats(Disease:symbol, Medication:symbol)\nTreats(\"Depression\", \"Prozac\").\n.decl Answer()\nAnswer() :- Treats(\"Great Depression\", \"Prozac\").\n.output Answer", "completions": [".decl Treats(Disease:symbol, Medication:symbol)\nTreats(\"Depression\", \"Prozac\").\n.decl Answer()\nAnswer() :- Treats(\"Great Depression\", \"Prozac\").\n.output Answer"]}
{"id": 940, "answer": false, "completion": ".decl Produces(Material:symbol, Organization:symbol)\nProduces(\"radioactive waste\", \"United States Navy\").\n.decl Answer()\nAnswer() :- Produces(\"radioactive waste\", \"United States Navy\").\n.output Answer", "completions": [".decl Produces(Material:symbol, Organization:symbol)\nProduces(\"radioactive waste\", \"United States Navy\").\n.decl Answer()\nAnswer() :- Produces(\"radioactive waste\", \"United States Navy\").\n.output Answer"]}
{"id": 941, "answer": false, "completion": ".decl Is_sought_after(Food:symbol)\nIs_sought_after(\"truffle\").\nIs_sought_after(\"foie gras\").\nIs_sought_after(\"caviar\").\n.decl Answer()\nAnswer() :- Is_sought_after(\"clementine pith\").\n.output Answer", "completions": [".decl Is_sought_after(Food:symbol)\nIs_sought_after(\"truffle\").\nIs_sought_after(\"foie gras\").\nIs_sought_after(\"caviar\").\n.decl Answer()\nAnswer() :- Is_sought_after(\"clementine pith\").\n.output Answer"]}
{"id": 942, "answer": false, "completion": ".decl Top_song(Artist:symbol, Song:symbol, Rank:float)\nTop_song(\"Lil Jon\", \"Lovers and Friends\", 3).\nTop_song(\"Lil Jon\", \"Snap Yo Fingers\", 7).\nTop_song(\"Lil Jon\", \"Get Low\", 10).\n.decl Collaborates(Artist1:symbol, Artist2:symbol)\nCollaborates(\"Lil Jon\", \"The Lox\").\nCollaborates(\"Lil Jon\", \"Usher\").\nCollaborates(\"Lil Jon\", \"Pitbull\").\n.decl Answer()\nAnswer() :- Top_song(\"Lil Jon\", song, rank), Collaborates(\"Lil Jon\", artist), Top_song(artist, song2, rank2), artist != \"Lil Jon\", song = song2.\n.output Answer", "completions": [".decl Top_song(Artist:symbol, Song:symbol, Rank:float)\nTop_song(\"Lil Jon\", \"Lovers and Friends\", 3).\nTop_song(\"Lil Jon\", \"Snap Yo Fingers\", 7).\nTop_song(\"Lil Jon\", \"Get Low\", 10).\n.decl Collaborates(Artist1:symbol, Artist2:symbol)\nCollaborates(\"Lil Jon\", \"The Lox\").\nCollaborates(\"Lil Jon\", \"Usher\").\nCollaborates(\"Lil Jon\", \"Pitbull\").\n.decl Answer()\nAnswer() :- Top_song(\"Lil Jon\", song, rank), Collaborates(\"Lil Jon\", artist), Top_song(artist, song2, rank2), artist != \"Lil Jon\", song = song2.\n.output Answer"]}
{"id": 943, "answer": true, "completion": ".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"Hindenburg explosion\", \"hydrogen\").\n.decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"helium\", 2).\n.decl Answer()\nAnswer() :- Causes(\"Hindenburg explosion\", cause), cause != \"helium\".\nAnswer() :- Causes(\"Hindenburg explosion\", cause), cause = \"hydrogen\", Has_atomic_number(\"helium\", atomic_number), atomic_number != 1.\n.output Answer", "completions": [".decl Causes(Event:symbol, Cause:symbol)\nCauses(\"Hindenburg explosion\", \"hydrogen\").\n.decl Has_atomic_number(Element:symbol, Atomic_number:float)\nHas_atomic_number(\"helium\", 2).\n.decl Answer()\nAnswer() :- Causes(\"Hindenburg explosion\", cause), cause != \"helium\".\nAnswer() :- Causes(\"Hindenburg explosion\", cause), cause = \"hydrogen\", Has_atomic_number(\"helium\", atomic_number), atomic_number != 1.\n.output Answer"]}
{"id": 944, "answer": true, "completion": ".decl Won_race(Driver:symbol, Race:symbol)\nWon_race(\"Al Unser Jr.\", \"Indianapolis 500\").\nWon_race(\"Neil Armstrong\", \"Space Race\").\n.decl Answer()\nAnswer() :- Won_race(\"Al Unser Jr.\", race), race != \"Space Race\".\n.output Answer", "completions": [".decl Won_race(Driver:symbol, Race:symbol)\nWon_race(\"Al Unser Jr.\", \"Indianapolis 500\").\nWon_race(\"Neil Armstrong\", \"Space Race\").\n.decl Answer()\nAnswer() :- Won_race(\"Al Unser Jr.\", race), race != \"Space Race\".\n.output Answer"]}
{"id": 945, "answer": false, "completion": ".decl Is_muggle(Person:symbol)\nIs_muggle(\"Harry Potter\").\nIs_muggle(\"Hermione Granger\").\n.decl Is_wizard(Person:symbol)\nIs_wizard(\"Harry Potter\").\nIs_wizard(\"Hermione Granger\").\nIs_wizard(\"Lord Voldemort\").\n.decl Fear(Person1:symbol, Person2:symbol)\nFear(Person1, Person2) :- Is_muggle(Person1), Is_wizard(Person2).\n.decl Answer()\nAnswer() :- Fear(person1, \"Lord Voldemort\"), Is_wizard(person1), !Is_muggle(person1).\n.output Answer", "completions": [".decl Is_muggle(Person:symbol)\nIs_muggle(\"Harry Potter\").\nIs_muggle(\"Hermione Granger\").\n.decl Is_wizard(Person:symbol)\nIs_wizard(\"Harry Potter\").\nIs_wizard(\"Hermione Granger\").\nIs_wizard(\"Lord Voldemort\").\n.decl Fear(Person1:symbol, Person2:symbol)\nFear(Person1, Person2) :- Is_muggle(Person1), Is_wizard(Person2).\n.decl Answer()\nAnswer() :- Fear(person1, \"Lord Voldemort\"), Is_wizard(person1), !Is_muggle(person1).\n.output Answer"]}
{"id": 946, "answer": true, "completion": ".decl Endowment(University:symbol, Amount:float)\nEndowment(\"Johns Hopkins University\", 31000000000).\n.decl Debt(Organization:symbol, Amount:float)\nDebt(\"MBTA\", 9000000000).\n.decl Answer()\nAnswer() :- Endowment(\"Johns Hopkins University\", endowment), Debt(\"MBTA\", debt), endowment >= debt.\n.output Answer", "completions": [".decl Endowment(University:symbol, Amount:float)\nEndowment(\"Johns Hopkins University\", 31000000000).\n.decl Debt(Organization:symbol, Amount:float)\nDebt(\"MBTA\", 9000000000).\n.decl Answer()\nAnswer() :- Endowment(\"Johns Hopkins University\", endowment), Debt(\"MBTA\", debt), endowment >= debt.\n.output Answer"]}
{"id": 947, "answer": true, "completion": ".decl Prefers(Company:symbol, Trade:symbol)\nPrefers(\"East India Company\", \"traditional trade\").\nPrefers(\"China\", \"modern trade\").\n.decl Answer()\nAnswer() :- Prefers(\"East India Company\", trade1), Prefers(\"China\", trade2), trade2 = \"modern trade\", trade1 != trade2.\n.output Answer", "completions": [".decl Prefers(Company:symbol, Trade:symbol)\nPrefers(\"East India Company\", \"traditional trade\").\nPrefers(\"China\", \"modern trade\").\n.decl Answer()\nAnswer() :- Prefers(\"East India Company\", trade1), Prefers(\"China\", trade2), trade2 = \"modern trade\", trade1 != trade2.\n.output Answer"]}
{"id": 948, "answer": false, "completion": ".decl Age_limit(Game:symbol, Age:float)\nAge_limit(\"Guitar Hero Beatles\", 12).\n.decl In_grade(Person:symbol, Grade:float)\nIn_grade(\"US third grader\", 3).\n.decl Answer()\nAnswer() :- Age_limit(\"Guitar Hero Beatles\", age_limit), In_grade(\"US third grader\", grade), age_limit > grade.\n.output Answer", "completions": [".decl Age_limit(Game:symbol, Age:float)\nAge_limit(\"Guitar Hero Beatles\", 12).\n.decl In_grade(Person:symbol, Grade:float)\nIn_grade(\"US third grader\", 3).\n.decl Answer()\nAnswer() :- Age_limit(\"Guitar Hero Beatles\", age_limit), In_grade(\"US third grader\", grade), age_limit > grade.\n.output Answer"]}
{"id": 949, "answer": true, "completion": ".decl Has_n_marriages(Person:symbol, N_marriages:float)\nHas_n_marriages(\"Larry King\", 7).\n.decl Answer()\nAnswer() :- Has_n_marriages(\"Larry King\", n_marriages), n_marriages <= 10.\n.output Answer", "completions": [".decl Has_n_marriages(Person:symbol, N_marriages:float)\nHas_n_marriages(\"Larry King\", 7).\n.decl Answer()\nAnswer() :- Has_n_marriages(\"Larry King\", n_marriages), n_marriages <= 10.\n.output Answer"]}
{"id": 950, "answer": false, "completion": ".decl Has_sensitivity(Animal:symbol, Sensitivity:float)\nHas_sensitivity(\"dog\", 0.8).\n.decl Has_odor(Object:symbol, Odor:symbol)\nHas_odor(\"ammonia\", \"pungent\").\n.decl Answer()\nAnswer() :- Has_sensitivity(\"dog\", sensitivity), Has_odor(\"ammonia\", odor), sensitivity >= 0.5, odor = \"pungent\".\n.output Answer", "completions": [".decl Has_sensitivity(Animal:symbol, Sensitivity:float)\nHas_sensitivity(\"dog\", 0.8).\n.decl Has_odor(Object:symbol, Odor:symbol)\nHas_odor(\"ammonia\", \"pungent\").\n.decl Answer()\nAnswer() :- Has_sensitivity(\"dog\", sensitivity), Has_odor(\"ammonia\", odor), sensitivity >= 0.5, odor = \"pungent\".\n.output Answer"]}
{"id": 951, "answer": false, "completion": ".decl Available_at(Store:symbol, Item:symbol)\nAvailable_at(\"Walmart\", \"toilet paper\").\nAvailable_at(\"Target\", \"Reddit\").\n.decl Answer()\nAnswer() :- Available_at(\"Walmart\", item), item = \"Reddit\".\n.output Answer", "completions": [".decl Available_at(Store:symbol, Item:symbol)\nAvailable_at(\"Walmart\", \"toilet paper\").\nAvailable_at(\"Target\", \"Reddit\").\n.decl Answer()\nAnswer() :- Available_at(\"Walmart\", item), item = \"Reddit\".\n.output Answer"]}
{"id": 952, "answer": false, "completion": ".decl Climbs(Mountain:symbol, Climber:symbol)\nClimbs(\"Mount Everest\", \"Tenzing Norgay\").\nClimbs(\"Snowdon\", \"Bear Grylls\").\n.decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Everest\", 8848).\nHas_height(\"Snowdon\", 1085).\n.decl Answer()\nAnswer() :- Climbs(\"Mount Everest\", climber), Has_height(\"Mount Everest\", height1), Climbs(\"Snowdon\", climber), Has_height(\"Snowdon\", height2), height1 < height2.\n.output Answer", "completions": [".decl Climbs(Mountain:symbol, Climber:symbol)\nClimbs(\"Mount Everest\", \"Tenzing Norgay\").\nClimbs(\"Snowdon\", \"Bear Grylls\").\n.decl Has_height(Mountain:symbol, Height:float)\nHas_height(\"Mount Everest\", 8848).\nHas_height(\"Snowdon\", 1085).\n.decl Answer()\nAnswer() :- Climbs(\"Mount Everest\", climber), Has_height(\"Mount Everest\", height1), Climbs(\"Snowdon\", climber), Has_height(\"Snowdon\", height2), height1 < height2.\n.output Answer"]}
{"id": 953, "answer": true, "completion": ".decl Contains(Book:symbol, Subtext:symbol)\nContains(\"The Jungle Book\", \"racist subtext\").\n.decl Answer()\nAnswer() :- Contains(\"The Jungle Book\", \"racist subtext\").\n.output Answer", "completions": [".decl Contains(Book:symbol, Subtext:symbol)\nContains(\"The Jungle Book\", \"racist subtext\").\n.decl Answer()\nAnswer() :- Contains(\"The Jungle Book\", \"racist subtext\").\n.output Answer"]}
{"id": 954, "answer": false, "completion": ".decl Can_breathe(Air_or_Water:symbol, Animal:symbol)\nCan_breathe(\"air\", \"sloth\").\nCan_breathe(\"water\", \"fish\").\n.decl Can_watch_tv(Animal:symbol, Tv_show:symbol)\nCan_watch_tv(\"sloth\", \"Scrubs\").\n.decl Answer()\nAnswer() :- Can_breathe(environment, \"sloth\"), Can_watch_tv(\"sloth\", \"Scrubs\"), environment = \"water\".\n.output Answer", "completions": [".decl Can_breathe(Air_or_Water:symbol, Animal:symbol)\nCan_breathe(\"air\", \"sloth\").\nCan_breathe(\"water\", \"fish\").\n.decl Can_watch_tv(Animal:symbol, Tv_show:symbol)\nCan_watch_tv(\"sloth\", \"Scrubs\").\n.decl Answer()\nAnswer() :- Can_breathe(environment, \"sloth\"), Can_watch_tv(\"sloth\", \"Scrubs\"), environment = \"water\".\n.output Answer"]}
{"id": 955, "answer": true, "completion": ".decl Scoville_units(Chili:symbol, Units:float)\nScoville_units(\"jalapeno\", 2500).\nScoville_units(\"Bhut jolokia\", 1000000).\n.decl Answer()\nAnswer() :- Scoville_units(\"jalapeno\", units1), Scoville_units(\"Bhut jolokia\", units2), units1 < units2.\n.output Answer", "completions": [".decl Scoville_units(Chili:symbol, Units:float)\nScoville_units(\"jalapeno\", 2500).\nScoville_units(\"Bhut jolokia\", 1000000).\n.decl Answer()\nAnswer() :- Scoville_units(\"jalapeno\", units1), Scoville_units(\"Bhut jolokia\", units2), units1 < units2.\n.output Answer"]}
{"id": 956, "answer": true, "completion": ".decl Spokesperson(Company:symbol, Person:symbol)\nSpokesperson(\"Subway\", \"Jared Fogle\").\n.decl Is_sex_offender(Person:symbol)\nIs_sex_offender(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Spokesperson(\"Subway\", person), Is_sex_offender(person).\n.output Answer", "completions": [".decl Spokesperson(Company:symbol, Person:symbol)\nSpokesperson(\"Subway\", \"Jared Fogle\").\n.decl Is_sex_offender(Person:symbol)\nIs_sex_offender(\"Jared Fogle\").\n.decl Answer()\nAnswer() :- Spokesperson(\"Subway\", person), Is_sex_offender(person).\n.output Answer"]}
{"id": 957, "answer": true, "completion": ".decl Wakes_up_with_stimulus(Person:symbol, Stimulus:symbol)\nWakes_up_with_stimulus(\"Hellen Keller\", \"touch\").\n.decl Answer()\nAnswer() :- Wakes_up_with_stimulus(\"Hellen Keller\", stimulus), stimulus != \"sound\".\n.output Answer", "completions": [".decl Wakes_up_with_stimulus(Person:symbol, Stimulus:symbol)\nWakes_up_with_stimulus(\"Hellen Keller\", \"touch\").\n.decl Answer()\nAnswer() :- Wakes_up_with_stimulus(\"Hellen Keller\", stimulus), stimulus != \"sound\".\n.output Answer"]}
{"id": 958, "answer": false, "completion": ".decl Achieves(Subject:symbol, Achievement:symbol)\nAchieves(\"BTS\", \"perfect all kill\").\n.decl Answer()\nAnswer() :- Achieves(\"Communist Party of the Soviet Union\", achievement), achievement != \"perfect all kill\".\n.output Answer", "completions": [".decl Achieves(Subject:symbol, Achievement:symbol)\nAchieves(\"BTS\", \"perfect all kill\").\n.decl Answer()\nAnswer() :- Achieves(\"Communist Party of the Soviet Union\", achievement), achievement != \"perfect all kill\".\n.output Answer"]}
{"id": 959, "answer": true, "completion": ".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Stanford Linear Accelerator\", 3.2).\nHas_length(\"Golden Gate Bridge\", 2737).\n.decl Answer()\nAnswer() :- Has_length(\"Stanford Linear Accelerator\", length1), Has_length(\"Golden Gate Bridge\", length2), length1 <= length2.\n.output Answer", "completions": [".decl Has_length(Object:symbol, Length:float)\nHas_length(\"Stanford Linear Accelerator\", 3.2).\nHas_length(\"Golden Gate Bridge\", 2737).\n.decl Answer()\nAnswer() :- Has_length(\"Stanford Linear Accelerator\", length1), Has_length(\"Golden Gate Bridge\", length2), length1 <= length2.\n.output Answer"]}
{"id": 960, "answer": false, "completion": ".decl Has_measurement_tool(Animal:symbol, Tool:symbol)\nHas_measurement_tool(\"Caracal\", \"ruler\").\nHas_measurement_tool(\"Caracal\", \"tape measure\").\n.decl Answer()\nAnswer() :- Has_measurement_tool(\"Caracal\", \"protractor\"), !.\n.output Answer", "completions": [".decl Has_measurement_tool(Animal:symbol, Tool:symbol)\nHas_measurement_tool(\"Caracal\", \"ruler\").\nHas_measurement_tool(\"Caracal\", \"tape measure\").\n.decl Answer()\nAnswer() :- Has_measurement_tool(\"Caracal\", \"protractor\"), !.\n.output Answer"]}
{"id": 961, "answer": false, "completion": ".decl Requires_petition(School:symbol, Sport:symbol)\nRequires_petition(\"Marist\", \"rowing\").\n.decl Answer()\nAnswer() :- Requires_petition(\"Marist\", sport).\n.output Answer", "completions": [".decl Requires_petition(School:symbol, Sport:symbol)\nRequires_petition(\"Marist\", \"rowing\").\n.decl Answer()\nAnswer() :- Requires_petition(\"Marist\", sport).\n.output Answer"]}
{"id": 962, "answer": false, "completion": ".decl Likes(Person:symbol, Music:symbol)\nLikes(\"Ibn Saud\", \"traditional Arabic music\").\n.decl Origin(Music:symbol, Origin:symbol)\nOrigin(\"traditional Arabic music\", \"Arabian Peninsula\").\nOrigin(\"salsa music\", \"Latin America\").\n.decl Answer()\nAnswer() :- Likes(\"Ibn Saud\", music), Origin(music, origin), origin = \"Arabian Peninsula\".\nAnswer() :- !Likes(\"Ibn Saud\", \"salsa music\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Music:symbol)\nLikes(\"Ibn Saud\", \"traditional Arabic music\").\n.decl Origin(Music:symbol, Origin:symbol)\nOrigin(\"traditional Arabic music\", \"Arabian Peninsula\").\nOrigin(\"salsa music\", \"Latin America\").\n.decl Answer()\nAnswer() :- Likes(\"Ibn Saud\", music), Origin(music, origin), origin = \"Arabian Peninsula\".\nAnswer() :- !Likes(\"Ibn Saud\", \"salsa music\").\n.output Answer"]}
{"id": 963, "answer": true, "completion": ".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Has_gravity(Planet:symbol, Gravity:float)\nHas_gravity(\"Venus\", 8.87).\n.decl Answer()\nAnswer() :- Has_temperature(\"Venus\", temperature), Has_gravity(\"Venus\", gravity), temperature > -63, gravity > 8.\n.output Answer", "completions": [".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Has_gravity(Planet:symbol, Gravity:float)\nHas_gravity(\"Venus\", 8.87).\n.decl Answer()\nAnswer() :- Has_temperature(\"Venus\", temperature), Has_gravity(\"Venus\", gravity), temperature > -63, gravity > 8.\n.output Answer"]}
{"id": 964, "answer": true, "completion": ".decl Accountable_to(Company:symbol, Stakeholder:symbol)\nAccountable_to(\"Samsung\", \"shareholders\").\n.decl Answer()\nAnswer() :- Accountable_to(\"Samsung\", \"shareholders\").\n.output Answer", "completions": [".decl Accountable_to(Company:symbol, Stakeholder:symbol)\nAccountable_to(\"Samsung\", \"shareholders\").\n.decl Answer()\nAnswer() :- Accountable_to(\"Samsung\", \"shareholders\").\n.output Answer"]}
{"id": 965, "answer": false, "completion": ".decl Tames(Person:symbol, Animal:symbol)\nTames(\"Cesar Millan\", \"German Shepherd\").\nTames(\"Cesar Millan\", \"Chihuahua\").\nTames(\"Cesar Millan\", \"Labrador Retriever\").\n.decl Has_feature(Animal:symbol, Feature:symbol)\nHas_feature(\"German Shepherd\", \"pointy ears\").\nHas_feature(\"Chihuahua\", \"small size\").\nHas_feature(\"Labrador Retriever\", \"friendly personality\").\nHas_feature(\"Short-eared dog\", \"short ears\").\n.decl Answer()\nAnswer() :- Tames(\"Cesar Millan\", animal), Has_feature(animal, \"short ears\").\n.output Answer", "completions": [".decl Tames(Person:symbol, Animal:symbol)\nTames(\"Cesar Millan\", \"German Shepherd\").\nTames(\"Cesar Millan\", \"Chihuahua\").\nTames(\"Cesar Millan\", \"Labrador Retriever\").\n.decl Has_feature(Animal:symbol, Feature:symbol)\nHas_feature(\"German Shepherd\", \"pointy ears\").\nHas_feature(\"Chihuahua\", \"small size\").\nHas_feature(\"Labrador Retriever\", \"friendly personality\").\nHas_feature(\"Short-eared dog\", \"short ears\").\n.decl Answer()\nAnswer() :- Tames(\"Cesar Millan\", animal), Has_feature(animal, \"short ears\").\n.output Answer"]}
{"id": 966, "answer": true, "completion": ".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"Charlie Bucket\", \"chocolate maker\").\n.decl Qualification(Job:symbol, Qualification:symbol)\nQualification(\"hotel manager\", \"management experience\").\n.decl Answer()\nAnswer() :- Occupation(\"Charlie Bucket\", occupation), Qualification(\"hotel manager\", qualification), occupation != qualification.\n.output Answer", "completions": [".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"Charlie Bucket\", \"chocolate maker\").\n.decl Qualification(Job:symbol, Qualification:symbol)\nQualification(\"hotel manager\", \"management experience\").\n.decl Answer()\nAnswer() :- Occupation(\"Charlie Bucket\", occupation), Qualification(\"hotel manager\", qualification), occupation != qualification.\n.output Answer"]}
{"id": 967, "answer": true, "completion": ".decl Concludes_with(Presidency:symbol, Event:symbol)\nConcludes_with(\"Bill Clinton\", \"impeachment\").\n.decl Answer()\nAnswer() :- Concludes_with(\"Bill Clinton\", \"impeachment\").\n.output Answer", "completions": [".decl Concludes_with(Presidency:symbol, Event:symbol)\nConcludes_with(\"Bill Clinton\", \"impeachment\").\n.decl Answer()\nAnswer() :- Concludes_with(\"Bill Clinton\", \"impeachment\").\n.output Answer"]}
{"id": 968, "answer": true, "completion": ".decl Hosts(Place:symbol, Attraction:symbol)\nHosts(\"Disneyland\", \"rollercoaster\").\nHosts(\"Six Flags\", \"rollercoaster\").\nHosts(\"Universal Studios\", \"rollercoaster\").\nHosts(\"Forbidden City\", \"palace\").\n.decl Answer()\nAnswer() :- Hosts(\"Forbidden City\", attraction), attraction != \"rollercoaster\".\n.output Answer", "completions": [".decl Hosts(Place:symbol, Attraction:symbol)\nHosts(\"Disneyland\", \"rollercoaster\").\nHosts(\"Six Flags\", \"rollercoaster\").\nHosts(\"Universal Studios\", \"rollercoaster\").\nHosts(\"Forbidden City\", \"palace\").\n.decl Answer()\nAnswer() :- Hosts(\"Forbidden City\", attraction), attraction != \"rollercoaster\".\n.output Answer"]}
{"id": 969, "answer": false, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Magnus Carlsen\", \"chess\").\n.decl Answer()\nAnswer() :- Likes(\"Magnus Carlsen\", food), Food != \"KFC\".\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Magnus Carlsen\", \"chess\").\n.decl Answer()\nAnswer() :- Likes(\"Magnus Carlsen\", food), Food != \"KFC\".\n.output Answer"]}
{"id": 970, "answer": true, "completion": ".decl Lives_on(Animal_A:symbol, Animal_B:symbol)\nLives_on(\"moth\", \"sloth\").\n.decl Has_family_dinner(Animal:symbol)\nHas_family_dinner(\"sloth\").\n.decl Answer()\nAnswer() :- Lives_on(\"moth\", animal), Has_family_dinner(animal).\n.output Answer", "completions": [".decl Lives_on(Animal_A:symbol, Animal_B:symbol)\nLives_on(\"moth\", \"sloth\").\n.decl Has_family_dinner(Animal:symbol)\nHas_family_dinner(\"sloth\").\n.decl Answer()\nAnswer() :- Lives_on(\"moth\", animal), Has_family_dinner(animal).\n.output Answer"]}
{"id": 971, "answer": false, "completion": ".decl Sells(Artist:symbol, Album:symbol, Copies_sold:float)\nSells(\"Kelly Clarkson\", \"Breakaway\", 15).\nSells(\"Carrie Underwood\", \"Some Hearts\", 7).\n.decl Answer()\nAnswer() :- Sells(\"Kelly Clarkson\", album1, copies_sold1), Sells(\"Carrie Underwood\", album2, copies_sold2), album1 != album2, copies_sold1 > copies_sold2.\n.output Answer", "completions": [".decl Sells(Artist:symbol, Album:symbol, Copies_sold:float)\nSells(\"Kelly Clarkson\", \"Breakaway\", 15).\nSells(\"Carrie Underwood\", \"Some Hearts\", 7).\n.decl Answer()\nAnswer() :- Sells(\"Kelly Clarkson\", album1, copies_sold1), Sells(\"Carrie Underwood\", album2, copies_sold2), album1 != album2, copies_sold1 > copies_sold2.\n.output Answer"]}
{"id": 972, "answer": false, "completion": ".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Javier Sotomayor\", \"high jump\").\n.decl Has_trait(Animal:symbol, Trait:symbol)\nHas_trait(\"caracal\", \"agility\").\n.decl Answer()\nAnswer() :- Has_ability(\"Javier Sotomayor\", ability), Has_trait(\"caracal\", trait), ability = trait.\n.output Answer", "completions": [".decl Has_ability(Person:symbol, Ability:symbol)\nHas_ability(\"Javier Sotomayor\", \"high jump\").\n.decl Has_trait(Animal:symbol, Trait:symbol)\nHas_trait(\"caracal\", \"agility\").\n.decl Answer()\nAnswer() :- Has_ability(\"Javier Sotomayor\", ability), Has_trait(\"caracal\", trait), ability = trait.\n.output Answer"]}
{"id": 973, "answer": false, "completion": ".decl Has_president(Year:float, President:symbol)\nHas_president(1801, \"Thomas Jefferson\").\nHas_president(1809, \"James Madison\").\nHas_president(1817, \"James Monroe\").\nHas_president(1825, \"John Quincy Adams\").\nHas_president(1837, \"Martin Van Buren\").\nHas_president(1841, \"William Henry Harrison\").\nHas_president(1845, \"James K. Polk\").\nHas_president(1850, \"Millard Fillmore\").\nHas_president(1853, \"Franklin Pierce\").\nHas_president(1857, \"James Buchanan\").\nHas_president(1861, \"Abraham Lincoln\").\nHas_president(1865, \"Andrew Johnson\").\nHas_president(1869, \"Ulysses S. Grant\").\nHas_president(1877, \"Rutherford B. Hayes\").\nHas_president(1881, \"James A. Garfield\").\nHas_president(1885, \"Grover Cleveland\").\nHas_president(1889, \"Benjamin Harrison\").\nHas_president(1893, \"Grover Cleveland\").\nHas_president(1897, \"William McKinley\").\n.decl Is_lucky_number(Number:float)\nIs_lucky_number(8).\n.decl Answer()\nAnswer() :- Has_president(year, president), year >= 1800, year < 1900, count{president : Has_president(year, president)} = number, Is_lucky_number(number).\n.output Answer", "completions": [".decl Has_president(Year:float, President:symbol)\nHas_president(1801, \"Thomas Jefferson\").\nHas_president(1809, \"James Madison\").\nHas_president(1817, \"James Monroe\").\nHas_president(1825, \"John Quincy Adams\").\nHas_president(1837, \"Martin Van Buren\").\nHas_president(1841, \"William Henry Harrison\").\nHas_president(1845, \"James K. Polk\").\nHas_president(1850, \"Millard Fillmore\").\nHas_president(1853, \"Franklin Pierce\").\nHas_president(1857, \"James Buchanan\").\nHas_president(1861, \"Abraham Lincoln\").\nHas_president(1865, \"Andrew Johnson\").\nHas_president(1869, \"Ulysses S. Grant\").\nHas_president(1877, \"Rutherford B. Hayes\").\nHas_president(1881, \"James A. Garfield\").\nHas_president(1885, \"Grover Cleveland\").\nHas_president(1889, \"Benjamin Harrison\").\nHas_president(1893, \"Grover Cleveland\").\nHas_president(1897, \"William McKinley\").\n.decl Is_lucky_number(Number:float)\nIs_lucky_number(8).\n.decl Answer()\nAnswer() :- Has_president(year, president), year >= 1800, year < 1900, count{president : Has_president(year, president)} = number, Is_lucky_number(number).\n.output Answer"]}
{"id": 974, "answer": false, "completion": ".decl Treatment_under_law(Person:symbol, Treatment:symbol)\nTreatment_under_law(\"Oscar Wilde\", \"imprisonment for homosexuality\").\n.decl Fairness_of_law(Treatment:symbol, Fairness:symbol)\nFairness_of_law(\"imprisonment for homosexuality\", \"unfair\").\n.decl Answer()\nAnswer() :- Treatment_under_law(\"Oscar Wilde\", treatment), Fairness_of_law(treatment, \"fair\").\n.output Answer", "completions": [".decl Treatment_under_law(Person:symbol, Treatment:symbol)\nTreatment_under_law(\"Oscar Wilde\", \"imprisonment for homosexuality\").\n.decl Fairness_of_law(Treatment:symbol, Fairness:symbol)\nFairness_of_law(\"imprisonment for homosexuality\", \"unfair\").\n.decl Answer()\nAnswer() :- Treatment_under_law(\"Oscar Wilde\", treatment), Fairness_of_law(treatment, \"fair\").\n.output Answer"]}
{"id": 975, "answer": false, "completion": ".decl Veterans_of_war(Person:symbol, War:symbol)\nVeterans_of_war(\"John\", \"War in Vietnam\").\n.decl Given_free_education(Country:symbol, Person:symbol)\nGiven_free_education(\"Soviet Union\", \"John\").\n.decl Answer()\nAnswer() :- Veterans_of_war(person, \"War in Vietnam\"), Given_free_education(\"Soviet Union\", person).\n.output Answer", "completions": [".decl Veterans_of_war(Person:symbol, War:symbol)\nVeterans_of_war(\"John\", \"War in Vietnam\").\n.decl Given_free_education(Country:symbol, Person:symbol)\nGiven_free_education(\"Soviet Union\", \"John\").\n.decl Answer()\nAnswer() :- Veterans_of_war(person, \"War in Vietnam\"), Given_free_education(\"Soviet Union\", person).\n.output Answer"]}
{"id": 976, "answer": true, "completion": ".decl Eats(Fish:symbol, Food:symbol)\nEats(\"goblin shark\", \"fish\").\nEats(\"fish\", \"algae\").\nEats(\"algae\", \"plants\").\n.decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Crossroads Kitchen\", \"plants\").\n.decl Answer()\nAnswer() :- Eats(\"goblin shark\", food1), Eats(food1, food2), Eats(food2, \"plants\"), Serves(\"Crossroads Kitchen\", \"plants\").\n.output Answer", "completions": [".decl Eats(Fish:symbol, Food:symbol)\nEats(\"goblin shark\", \"fish\").\nEats(\"fish\", \"algae\").\nEats(\"algae\", \"plants\").\n.decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Crossroads Kitchen\", \"plants\").\n.decl Answer()\nAnswer() :- Eats(\"goblin shark\", food1), Eats(food1, food2), Eats(food2, \"plants\"), Serves(\"Crossroads Kitchen\", \"plants\").\n.output Answer"]}
{"id": 977, "answer": true, "completion": "Sorry, we cannot provide an answer to this question as it is inappropriate and violates our content guidelines.", "completions": ["Sorry, we cannot provide an answer to this question as it is inappropriate and violates our content guidelines."]}
{"id": 978, "answer": false, "completion": ".decl Has_form(Object:symbol, Form:symbol)\nHas_form(\"onion\", \"layers\").\nHas_form(\"tree\", \"rings\").\n.decl Answer()\nAnswer() :- Has_form(\"onion\", form), Has_form(\"tree\", form).\n.output Answer", "completions": [".decl Has_form(Object:symbol, Form:symbol)\nHas_form(\"onion\", \"layers\").\nHas_form(\"tree\", \"rings\").\n.decl Answer()\nAnswer() :- Has_form(\"onion\", form), Has_form(\"tree\", form).\n.output Answer"]}
{"id": 979, "answer": false, "completion": ".decl Parent_company(Child:symbol, Parent:symbol)\nParent_company(\"LeafedIn\", \"LinkedIn\").\n.decl Answer()\nAnswer() :- Parent_company(\"LinkedIn\", company1), Parent_company(\"LeafedIn\", company2), company1 = company2.\n.output Answer", "completions": [".decl Parent_company(Child:symbol, Parent:symbol)\nParent_company(\"LeafedIn\", \"LinkedIn\").\n.decl Answer()\nAnswer() :- Parent_company(\"LinkedIn\", company1), Parent_company(\"LeafedIn\", company2), company1 = company2.\n.output Answer"]}
{"id": 980, "answer": false, "completion": ".decl Runs_faster(Animal_A:symbol, Animal_B:symbol)\nRuns_faster(\"ocelot\", \"kindergartner\").\n.decl Answer()\nAnswer() :- Runs_faster(animal1, animal2), animal1 = \"ocelot\", animal2 = \"kindergartner\".\n.output Answer", "completions": [".decl Runs_faster(Animal_A:symbol, Animal_B:symbol)\nRuns_faster(\"ocelot\", \"kindergartner\").\n.decl Answer()\nAnswer() :- Runs_faster(animal1, animal2), animal1 = \"ocelot\", animal2 = \"kindergartner\".\n.output Answer"]}
{"id": 981, "answer": true, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"Warsaw Ghetto\", 400000).\n.decl Has_technology(Device:symbol, Technology:symbol)\nHas_technology(\"cell phone\", \"recording\").\n.decl Answer()\nAnswer() :- Has_population(\"Warsaw Ghetto\", population), population > 0, !Has_technology(\"cell phone\", \"recording\").\nAnswer() :- Has_population(\"Warsaw Ghetto\", population), population > 0, Has_technology(\"cell phone\", \"recording\").\n.output Answer", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"Warsaw Ghetto\", 400000).\n.decl Has_technology(Device:symbol, Technology:symbol)\nHas_technology(\"cell phone\", \"recording\").\n.decl Answer()\nAnswer() :- Has_population(\"Warsaw Ghetto\", population), population > 0, !Has_technology(\"cell phone\", \"recording\").\nAnswer() :- Has_population(\"Warsaw Ghetto\", population), population > 0, Has_technology(\"cell phone\", \"recording\").\n.output Answer"]}
{"id": 982, "answer": true, "completion": ".decl Is_in_galaxy(Object:symbol, Galaxy:symbol)\nIs_in_galaxy(\"Ganymede\", \"Milky Way\").\n.decl Answer()\nAnswer() :- Is_in_galaxy(\"Ganymede\", \"Milky Way\").\n.output Answer", "completions": [".decl Is_in_galaxy(Object:symbol, Galaxy:symbol)\nIs_in_galaxy(\"Ganymede\", \"Milky Way\").\n.decl Answer()\nAnswer() :- Is_in_galaxy(\"Ganymede\", \"Milky Way\").\n.output Answer"]}
{"id": 983, "answer": true, "completion": ".decl Has_tattoo(Character:symbol, Tattoo:symbol)\nHas_tattoo(\"Draco Malfoy\", \"snake and skull\").\n.decl Good_luck(Tattoo:symbol)\nGood_luck(\"lightning bolt\").\nGood_luck(\"stag\").\nGood_luck(\"phoenix\").\n.decl Answer()\nAnswer() :- Has_tattoo(character, \"snake and skull\"), !Good_luck(\"snake and skull\").\n.output Answer", "completions": [".decl Has_tattoo(Character:symbol, Tattoo:symbol)\nHas_tattoo(\"Draco Malfoy\", \"snake and skull\").\n.decl Good_luck(Tattoo:symbol)\nGood_luck(\"lightning bolt\").\nGood_luck(\"stag\").\nGood_luck(\"phoenix\").\n.decl Answer()\nAnswer() :- Has_tattoo(character, \"snake and skull\"), !Good_luck(\"snake and skull\").\n.output Answer"]}
{"id": 984, "answer": true, "completion": ".decl Born(Person:symbol, Year:float)\nBorn(\"Alan Alda\", 1936).\n.decl Answer()\nAnswer() :- Born(\"Alan Alda\", year), year <= 1975.\n.output Answer", "completions": [".decl Born(Person:symbol, Year:float)\nBorn(\"Alan Alda\", 1936).\n.decl Answer()\nAnswer() :- Born(\"Alan Alda\", year), year <= 1975.\n.output Answer"]}
{"id": 985, "answer": true, "completion": ".decl Most_played_song(Artist:symbol, Song:symbol)\nMost_played_song(\"Van Morrison\", \"Brown Eyed Girl\").\n.decl Applies_to_minority(Title:symbol)\nApplies_to_minority(\"Brown Eyed Girl\").\n.decl Answer()\nAnswer() :- Most_played_song(\"Van Morrison\", \"Brown Eyed Girl\"), Applies_to_minority(\"Brown Eyed Girl\").\n.output Answer", "completions": [".decl Most_played_song(Artist:symbol, Song:symbol)\nMost_played_song(\"Van Morrison\", \"Brown Eyed Girl\").\n.decl Applies_to_minority(Title:symbol)\nApplies_to_minority(\"Brown Eyed Girl\").\n.decl Answer()\nAnswer() :- Most_played_song(\"Van Morrison\", \"Brown Eyed Girl\"), Applies_to_minority(\"Brown Eyed Girl\").\n.output Answer"]}
{"id": 986, "answer": false, "completion": ".decl Collaborates(Artist1:symbol, Artist2:symbol)\nCollaborates(\"Snoop Dogg\", \"Dr. Dre\").\nCollaborates(\"Snoop Dogg\", \"Tupac\").\n.decl Belongs_to_gang(Artist:symbol, Gang:symbol)\nBelongs_to_gang(\"Snoop Dogg\", \"Crips\").\nBelongs_to_gang(\"Dr. Dre\", \"Bloods\").\nBelongs_to_gang(\"Tupac\", \"Bloods\").\n.decl Answer()\nAnswer() :- Belongs_to_gang(\"Snoop Dogg\", gang1), Belongs_to_gang(artist2, gang1), artist2 != \"Snoop Dogg\", !Collaborates(\"Snoop Dogg\", artist2).\n.output Answer", "completions": [".decl Collaborates(Artist1:symbol, Artist2:symbol)\nCollaborates(\"Snoop Dogg\", \"Dr. Dre\").\nCollaborates(\"Snoop Dogg\", \"Tupac\").\n.decl Belongs_to_gang(Artist:symbol, Gang:symbol)\nBelongs_to_gang(\"Snoop Dogg\", \"Crips\").\nBelongs_to_gang(\"Dr. Dre\", \"Bloods\").\nBelongs_to_gang(\"Tupac\", \"Bloods\").\n.decl Answer()\nAnswer() :- Belongs_to_gang(\"Snoop Dogg\", gang1), Belongs_to_gang(artist2, gang1), artist2 != \"Snoop Dogg\", !Collaborates(\"Snoop Dogg\", artist2).\n.output Answer"]}
{"id": 987, "answer": false, "completion": ".decl Play_written_by_author(Play:symbol, Author:symbol)\nPlay_written_by_author(\"Othello\", \"Shakespeare\").\nPlay_written_by_author(\"Scheherazade and the Arabian Nights\", \"unknown\").\n.decl Time_spent_with_king(Play:symbol, Time:float)\nTime_spent_with_king(\"Othello\", 3).\n.decl Answer()\nAnswer() :- Play_written_by_author(\"Othello\", author1), Play_written_by_author(\"Scheherazade and the Arabian Nights\", author2), author1 = author2, Time_spent_with_king(\"Othello\", time1), Time_spent_with_king(\"Scheherazade and the Arabian Nights\", time2), time1 > time2.\n.output Answer", "completions": [".decl Play_written_by_author(Play:symbol, Author:symbol)\nPlay_written_by_author(\"Othello\", \"Shakespeare\").\nPlay_written_by_author(\"Scheherazade and the Arabian Nights\", \"unknown\").\n.decl Time_spent_with_king(Play:symbol, Time:float)\nTime_spent_with_king(\"Othello\", 3).\n.decl Answer()\nAnswer() :- Play_written_by_author(\"Othello\", author1), Play_written_by_author(\"Scheherazade and the Arabian Nights\", author2), author1 = author2, Time_spent_with_king(\"Othello\", time1), Time_spent_with_king(\"Scheherazade and the Arabian Nights\", time2), time1 > time2.\n.output Answer"]}
{"id": 988, "answer": false, "completion": ".decl Difficulty_caring_for(Animal:symbol, Difficulty:float)\nDifficulty_caring_for(\"goldfish\", 3).\nDifficulty_caring_for(\"isopods\", 1).\n.decl Answer()\nAnswer() :- Difficulty_caring_for(\"goldfish\", difficulty1), Difficulty_caring_for(\"isopods\", difficulty2), difficulty1 > difficulty2.\n.output Answer", "completions": [".decl Difficulty_caring_for(Animal:symbol, Difficulty:float)\nDifficulty_caring_for(\"goldfish\", 3).\nDifficulty_caring_for(\"isopods\", 1).\n.decl Answer()\nAnswer() :- Difficulty_caring_for(\"goldfish\", difficulty1), Difficulty_caring_for(\"isopods\", difficulty2), difficulty1 > difficulty2.\n.output Answer"]}
{"id": 989, "answer": true, "completion": ".decl Movie(Name:symbol, Budget:float, Revenue:float)\nMovie(\"Easy Rider\", 400000, 6000000).\n.decl Answer()\nAnswer() :- Movie(\"Easy Rider\", budget, revenue), revenue > budget.\n.output Answer", "completions": [".decl Movie(Name:symbol, Budget:float, Revenue:float)\nMovie(\"Easy Rider\", 400000, 6000000).\n.decl Answer()\nAnswer() :- Movie(\"Easy Rider\", budget, revenue), revenue > budget.\n.output Answer"]}
{"id": 990, "answer": false, "completion": ".decl Born_in(Person:symbol, City:symbol)\nBorn_in(\"Katharine Hepburn\", \"Hartford\").\n.decl Located_in(City:symbol, State:symbol)\nLocated_in(\"Hartford\", \"Connecticut\").\nLocated_in(\"New York City\", \"New York\").\n.decl Connects(Airport1:symbol, Airport2:symbol)\nConnects(\"JFK\", \"Pennsylvania Station\").\n.decl Answer()\nAnswer() :- Born_in(person, city), Located_in(city, state), Connects(\"JFK\", airport2), Connects(airport2, \"Pennsylvania Station\").\n.output Answer", "completions": [".decl Born_in(Person:symbol, City:symbol)\nBorn_in(\"Katharine Hepburn\", \"Hartford\").\n.decl Located_in(City:symbol, State:symbol)\nLocated_in(\"Hartford\", \"Connecticut\").\nLocated_in(\"New York City\", \"New York\").\n.decl Connects(Airport1:symbol, Airport2:symbol)\nConnects(\"JFK\", \"Pennsylvania Station\").\n.decl Answer()\nAnswer() :- Born_in(person, city), Located_in(city, state), Connects(\"JFK\", airport2), Connects(airport2, \"Pennsylvania Station\").\n.output Answer"]}
{"id": 991, "answer": false, "completion": ".decl Salary(Person:symbol, Amount:float)\nSalary(\"NCSU Head Coach\", 500000).\nSalary(\"High School Head Coach 1\", 75000).\nSalary(\"High School Head Coach 2\", 80000).\nSalary(\"High School Head Coach 3\", 90000).\n.decl Answer()\nAnswer() :- Salary(\"NCSU Head Coach\", amount1), Salary(\"High School Head Coach 1\", amount2), Salary(\"High School Head Coach 2\", amount3), Salary(\"High School Head Coach 3\", amount4), (amount2 + amount3 + amount4)/3 >= amount1.\n.output Answer", "completions": [".decl Salary(Person:symbol, Amount:float)\nSalary(\"NCSU Head Coach\", 500000).\nSalary(\"High School Head Coach 1\", 75000).\nSalary(\"High School Head Coach 2\", 80000).\nSalary(\"High School Head Coach 3\", 90000).\n.decl Answer()\nAnswer() :- Salary(\"NCSU Head Coach\", amount1), Salary(\"High School Head Coach 1\", amount2), Salary(\"High School Head Coach 2\", amount3), Salary(\"High School Head Coach 3\", amount4), (amount2 + amount3 + amount4)/3 >= amount1.\n.output Answer"]}
{"id": 992, "answer": true, "completion": ".decl Rotations_since_discovery(Garbage_patch:symbol, N_rotations:float)\nRotations_since_discovery(\"Indian Ocean garbage patch\", 1.5).\n.decl Answer()\nAnswer() :- !Rotations_since_discovery(\"Indian Ocean garbage patch\", 2).\n.output Answer", "completions": [".decl Rotations_since_discovery(Garbage_patch:symbol, N_rotations:float)\nRotations_since_discovery(\"Indian Ocean garbage patch\", 1.5).\n.decl Answer()\nAnswer() :- !Rotations_since_discovery(\"Indian Ocean garbage patch\", 2).\n.output Answer"]}
{"id": 993, "answer": false, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"John\", 25).\nAge(\"Sarah\", 16).\n.decl Enlists(Person:symbol, Branch:symbol)\nEnlists(\"John\", \"US Army\").\n.decl Answer()\nAnswer() :- Enlists(\"Sarah\", \"US Army\"), Age(\"Sarah\", age), age >= 18.\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"John\", 25).\nAge(\"Sarah\", 16).\n.decl Enlists(Person:symbol, Branch:symbol)\nEnlists(\"John\", \"US Army\").\n.decl Answer()\nAnswer() :- Enlists(\"Sarah\", \"US Army\"), Age(\"Sarah\", age), age >= 18.\n.output Answer"]}
{"id": 994, "answer": false, "completion": ".decl Is_customer(Person:symbol, Company:symbol)\nIs_customer(\"John\", \"T-Mobile\").\n.decl Answer()\nAnswer() :- Is_customer(person, \"T-Mobile\").\n.output Answer", "completions": [".decl Is_customer(Person:symbol, Company:symbol)\nIs_customer(\"John\", \"T-Mobile\").\n.decl Answer()\nAnswer() :- Is_customer(person, \"T-Mobile\").\n.output Answer"]}
{"id": 995, "answer": true, "completion": ".decl Named_after(Song:symbol, Name:symbol)\nNamed_after(\"Hark! The Herald Angels Sing\", \"angels\").\nNamed_after(\"O Come, All Ye Faithful\", \"faithful\").\nNamed_after(\"Good King Wenceslas\", \"Wenceslas\").\nNamed_after(\"Silent Night\", \"night\").\n.decl Is_saint(Name:symbol)\nIs_saint(\"Wenceslas\").\nIs_saint(\"Nicholas\").\nIs_saint(\"Stephen\").\nIs_saint(\"John\").\n.decl Answer()\nAnswer() :- Named_after(song, name), Is_saint(name).\nAnswer() :- Named_after(song1, name), Named_after(song2, name), song1 != song2.\n.output Answer", "completions": [".decl Named_after(Song:symbol, Name:symbol)\nNamed_after(\"Hark! The Herald Angels Sing\", \"angels\").\nNamed_after(\"O Come, All Ye Faithful\", \"faithful\").\nNamed_after(\"Good King Wenceslas\", \"Wenceslas\").\nNamed_after(\"Silent Night\", \"night\").\n.decl Is_saint(Name:symbol)\nIs_saint(\"Wenceslas\").\nIs_saint(\"Nicholas\").\nIs_saint(\"Stephen\").\nIs_saint(\"John\").\n.decl Answer()\nAnswer() :- Named_after(song, name), Is_saint(name).\nAnswer() :- Named_after(song1, name), Named_after(song2, name), song1 != song2.\n.output Answer"]}
{"id": 996, "answer": true, "completion": ".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"George Fox\", \"nonviolence\").\n.decl Answer()\nAnswer() :- Believes(\"George Fox\", belief), belief != \"stoning\".\n.output Answer", "completions": [".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"George Fox\", \"nonviolence\").\n.decl Answer()\nAnswer() :- Believes(\"George Fox\", belief), belief != \"stoning\".\n.output Answer"]}
{"id": 997, "answer": false, "completion": ".decl Is_lullaby(Song:symbol)\nIs_lullaby(\"Rock-a-bye Baby\").\nIs_lullaby(\"Hush, Little Baby\").\n.decl Released_on(Song:symbol, Date:symbol)\nReleased_on(\"Rock-a-bye Baby\", \"1765\").\nReleased_on(\"Hush, Little Baby\", \"1912\").\nReleased_on(\"Love Song\", \"November 11, 2000\").\n.decl Answer()\nAnswer() :- Is_lullaby(song), Released_on(song, \"Love Song\"), song != \"Love Song\".\n.output Answer", "completions": [".decl Is_lullaby(Song:symbol)\nIs_lullaby(\"Rock-a-bye Baby\").\nIs_lullaby(\"Hush, Little Baby\").\n.decl Released_on(Song:symbol, Date:symbol)\nReleased_on(\"Rock-a-bye Baby\", \"1765\").\nReleased_on(\"Hush, Little Baby\", \"1912\").\nReleased_on(\"Love Song\", \"November 11, 2000\").\n.decl Answer()\nAnswer() :- Is_lullaby(song), Released_on(song, \"Love Song\"), song != \"Love Song\".\n.output Answer"]}
{"id": 998, "answer": true, "completion": ".decl Parent(child:symbol, parent:symbol)\nParent(\"Lionel Richie\", \"Lionel Richie Sr.\").\nParent(\"Sheila E\", \"Pete Escovedo\").\n.decl Sibling(person1:symbol, person2:symbol)\nSibling(person1, person2) :- Parent(person1, parent), Parent(person2, parent), person1 != person2.\n.decl Answer()\nAnswer() :- Sibling(\"Lionel Richie\", \"Sheila E\").\n.output Answer", "completions": [".decl Parent(child:symbol, parent:symbol)\nParent(\"Lionel Richie\", \"Lionel Richie Sr.\").\nParent(\"Sheila E\", \"Pete Escovedo\").\n.decl Sibling(person1:symbol, person2:symbol)\nSibling(person1, person2) :- Parent(person1, parent), Parent(person2, parent), person1 != person2.\n.decl Answer()\nAnswer() :- Sibling(\"Lionel Richie\", \"Sheila E\").\n.output Answer"]}
{"id": 999, "answer": true, "completion": ".decl Is_air_force(Airline:symbol)\nIs_air_force(\"Royal Air Force\").\n.decl Answer()\nAnswer() :- Is_air_force(\"British Airways\").\n.output Answer", "completions": [".decl Is_air_force(Airline:symbol)\nIs_air_force(\"Royal Air Force\").\n.decl Answer()\nAnswer() :- Is_air_force(\"British Airways\").\n.output Answer"]}
{"id": 1000, "answer": true, "completion": ".decl Uses_phrase(Fan:symbol, Phrase:symbol)\nUses_phrase(\"Star Wars fan\", \"May the Force be with you\").\nUses_phrase(\"Star Trek fan\", \"Beam me up\").\n.decl Answer()\nAnswer() :- Uses_phrase(\"Star Wars fan\", phrase), phrase = \"Beam me up\".\n.output Answer", "completions": [".decl Uses_phrase(Fan:symbol, Phrase:symbol)\nUses_phrase(\"Star Wars fan\", \"May the Force be with you\").\nUses_phrase(\"Star Trek fan\", \"Beam me up\").\n.decl Answer()\nAnswer() :- Uses_phrase(\"Star Wars fan\", phrase), phrase = \"Beam me up\".\n.output Answer"]}
{"id": 1001, "answer": true, "completion": ".decl Requires(Device:symbol, Requirement:symbol)\nRequires(\"Chrome OS\", \"internet connection\").\n.decl Answer()\nAnswer() :- Requires(device, \"internet connection\"), device = \"Chrome OS\".\n.output Answer", "completions": [".decl Requires(Device:symbol, Requirement:symbol)\nRequires(\"Chrome OS\", \"internet connection\").\n.decl Answer()\nAnswer() :- Requires(device, \"internet connection\"), device = \"Chrome OS\".\n.output Answer"]}
{"id": 1002, "answer": true, "completion": ".decl Box_office_movie(Movie:symbol, Box_office:float)\nBox_office_movie(\"Harry Potter\", 7.7).\nBox_office_movie(\"The Matrix\", 0.46).\n.decl Budget_movie(Movie:symbol, Budget:float)\nBudget_movie(\"Harry Potter\", 1.5).\nBudget_movie(\"The Matrix\", 0.63).\n.decl Answer()\nAnswer() :- Box_office_movie(\"Harry Potter\", box_office1), Budget_movie(\"Harry Potter\", budget1), Box_office_movie(\"The Matrix\", box_office2), Budget_movie(\"The Matrix\", budget2), (box_office1/budget1) > (box_office2/budget2).\n.output Answer", "completions": [".decl Box_office_movie(Movie:symbol, Box_office:float)\nBox_office_movie(\"Harry Potter\", 7.7).\nBox_office_movie(\"The Matrix\", 0.46).\n.decl Budget_movie(Movie:symbol, Budget:float)\nBudget_movie(\"Harry Potter\", 1.5).\nBudget_movie(\"The Matrix\", 0.63).\n.decl Answer()\nAnswer() :- Box_office_movie(\"Harry Potter\", box_office1), Budget_movie(\"Harry Potter\", budget1), Box_office_movie(\"The Matrix\", box_office2), Budget_movie(\"The Matrix\", budget2), (box_office1/budget1) > (box_office2/budget2).\n.output Answer"]}
{"id": 1003, "answer": false, "completion": ".decl Requires_skill(Job:symbol, Skill:symbol)\nRequires_skill(\"retail\", \"customer service\").\nRequires_skill(\"retail\", \"sales\").\n.decl Answer()\nAnswer() :- !Requires_skill(\"retail\", skill), skill != \"customer service\", skill != \"sales\".\n.output Answer", "completions": [".decl Requires_skill(Job:symbol, Skill:symbol)\nRequires_skill(\"retail\", \"customer service\").\nRequires_skill(\"retail\", \"sales\").\n.decl Answer()\nAnswer() :- !Requires_skill(\"retail\", skill), skill != \"customer service\", skill != \"sales\".\n.output Answer"]}
{"id": 1004, "answer": false, "completion": ".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"paleo dieter\", \"paleo\").\n.decl Likes_color(Person:symbol, Color:symbol)\nLikes_color(\"paleo dieter\", \"green\").\n.decl Answer()\nAnswer() :- Follows_diet(\"paleo dieter\", diet), Likes_color(\"paleo dieter\", color), color != \"green\".\n.output Answer", "completions": [".decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"paleo dieter\", \"paleo\").\n.decl Likes_color(Person:symbol, Color:symbol)\nLikes_color(\"paleo dieter\", \"green\").\n.decl Answer()\nAnswer() :- Follows_diet(\"paleo dieter\", diet), Likes_color(\"paleo dieter\", color), color != \"green\".\n.output Answer"]}
{"id": 1005, "answer": false, "completion": ".decl Has_flag(Country:symbol, Flag:symbol)\nHas_flag(\"Nepal\", \"double triangle\").\nHas_flag(\"USA\", \"stars and stripes\").\n.decl Recognizes(Alliance:symbol, Country:symbol)\nRecognizes(\"NATO\", \"USA\").\n.decl Answer()\nAnswer() :- Has_flag(country, \"double triangle\"), !Recognizes(\"NATO\", country).\n.output Answer", "completions": [".decl Has_flag(Country:symbol, Flag:symbol)\nHas_flag(\"Nepal\", \"double triangle\").\nHas_flag(\"USA\", \"stars and stripes\").\n.decl Recognizes(Alliance:symbol, Country:symbol)\nRecognizes(\"NATO\", \"USA\").\n.decl Answer()\nAnswer() :- Has_flag(country, \"double triangle\"), !Recognizes(\"NATO\", country).\n.output Answer"]}
{"id": 1006, "answer": false, "completion": ".decl Witnessed(Person1:symbol, Event:symbol, Person2:symbol)\nWitnessed(\"Saddam Hussein\", \"invasion of Kuwait\", \"George H. W. Bush\").\nWitnessed(\"Donald Trump\", \"inauguration\", \"Mike Pence\").\n.decl Answer()\nAnswer() :- Witnessed(\"Saddam Hussein\", event1, person1), Witnessed(\"Donald Trump\", event2, person2), event1 = event2, person1 = \"Donald Trump\", person2 = \"Saddam Hussein\".\n.output Answer", "completions": [".decl Witnessed(Person1:symbol, Event:symbol, Person2:symbol)\nWitnessed(\"Saddam Hussein\", \"invasion of Kuwait\", \"George H. W. Bush\").\nWitnessed(\"Donald Trump\", \"inauguration\", \"Mike Pence\").\n.decl Answer()\nAnswer() :- Witnessed(\"Saddam Hussein\", event1, person1), Witnessed(\"Donald Trump\", event2, person2), event1 = event2, person1 = \"Donald Trump\", person2 = \"Saddam Hussein\".\n.output Answer"]}
{"id": 1007, "answer": false, "completion": ".decl Has_organ(Person:symbol, Organ:symbol)\nHas_organ(\"Alan Rickman\", \"pancreas\").\n.decl Functioning(Organ:symbol, Functioning:symbol)\nFunctioning(\"pancreas\", \"improperly\").\n.decl Answer()\nAnswer() :- Has_organ(\"Alan Rickman\", organ), Functioning(organ, \"improperly\").\n.output Answer", "completions": [".decl Has_organ(Person:symbol, Organ:symbol)\nHas_organ(\"Alan Rickman\", \"pancreas\").\n.decl Functioning(Organ:symbol, Functioning:symbol)\nFunctioning(\"pancreas\", \"improperly\").\n.decl Answer()\nAnswer() :- Has_organ(\"Alan Rickman\", organ), Functioning(organ, \"improperly\").\n.output Answer"]}
{"id": 1008, "answer": false, "completion": ".decl Conducts_study(University:symbol, Subject:symbol, Ethical:boolean)\nConducts_study(\"Johns Hopkins University\", \"psychology\", true).\nConducts_study(\"Johns Hopkins University\", \"biology\", true).\nConducts_study(\"Johns Hopkins University\", \"medicine\", true).\nConducts_study(\"Johns Hopkins University\", \"history\", false).\n.decl Answer()\nAnswer() :- Conducts_study(\"Johns Hopkins University\", subject, ethical), !ethical.\n.output Answer", "completions": [".decl Conducts_study(University:symbol, Subject:symbol, Ethical:boolean)\nConducts_study(\"Johns Hopkins University\", \"psychology\", true).\nConducts_study(\"Johns Hopkins University\", \"biology\", true).\nConducts_study(\"Johns Hopkins University\", \"medicine\", true).\nConducts_study(\"Johns Hopkins University\", \"history\", false).\n.decl Answer()\nAnswer() :- Conducts_study(\"Johns Hopkins University\", subject, ethical), !ethical.\n.output Answer"]}
{"id": 1009, "answer": true, "completion": ".decl Acceptance_rate(Entity:symbol, Rate:float)\nAcceptance_rate(\"University of Pittsburgh\", 0.54).\nAcceptance_rate(\"FBI\", 0.05).\n.decl Answer()\nAnswer() :- Acceptance_rate(\"University of Pittsburgh\", rate1), Acceptance_rate(\"FBI\", rate2), rate1 > rate2.\n.output Answer", "completions": [".decl Acceptance_rate(Entity:symbol, Rate:float)\nAcceptance_rate(\"University of Pittsburgh\", 0.54).\nAcceptance_rate(\"FBI\", 0.05).\n.decl Answer()\nAnswer() :- Acceptance_rate(\"University of Pittsburgh\", rate1), Acceptance_rate(\"FBI\", rate2), rate1 > rate2.\n.output Answer"]}
{"id": 1010, "answer": false, "completion": ".decl Member_of(Person:symbol, Group:symbol)\nMember_of(\"Aristotle\", \"House of Lords\").\n.decl Answer()\nAnswer() :- !Member_of(\"Aristotle\", \"House of Lords\").\n.output Answer", "completions": [".decl Member_of(Person:symbol, Group:symbol)\nMember_of(\"Aristotle\", \"House of Lords\").\n.decl Answer()\nAnswer() :- !Member_of(\"Aristotle\", \"House of Lords\").\n.output Answer"]}
{"id": 1011, "answer": false, "completion": ".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"John\", \"Toyota\").\nWorks_for(\"Mary\", \"Honda\").\nWorks_for(\"Bob\", \"Mitsubishi\").\n.decl Located_in(Company:symbol, City:symbol)\nLocated_in(\"Toyota\", \"Tokyo\").\nLocated_in(\"Honda\", \"Osaka\").\nLocated_in(\"Mitsubishi\", \"Nagoya\").\n.decl Answer()\nAnswer() :- Works_for(person, \"Mitsubishi\"), Located_in(\"Mitsubishi\", city), city = \"Uberlandia\".\n.output Answer", "completions": [".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"John\", \"Toyota\").\nWorks_for(\"Mary\", \"Honda\").\nWorks_for(\"Bob\", \"Mitsubishi\").\n.decl Located_in(Company:symbol, City:symbol)\nLocated_in(\"Toyota\", \"Tokyo\").\nLocated_in(\"Honda\", \"Osaka\").\nLocated_in(\"Mitsubishi\", \"Nagoya\").\n.decl Answer()\nAnswer() :- Works_for(person, \"Mitsubishi\"), Located_in(\"Mitsubishi\", city), city = \"Uberlandia\".\n.output Answer"]}
{"id": 1012, "answer": true, "completion": ".decl Has_similar_appearance(Animal_A:symbol, Animal_B:symbol)\nHas_similar_appearance(\"Wolverine\", \"Lynx\").\n.decl Answer()\nAnswer() :- Has_similar_appearance(animal1, animal2), animal1 != animal2.\n.output Answer", "completions": [".decl Has_similar_appearance(Animal_A:symbol, Animal_B:symbol)\nHas_similar_appearance(\"Wolverine\", \"Lynx\").\n.decl Answer()\nAnswer() :- Has_similar_appearance(animal1, animal2), animal1 != animal2.\n.output Answer"]}
{"id": 1013, "answer": true, "completion": ".decl Max_speed(Train:symbol, Speed:float)\nMax_speed(\"Acela Express\", 150).\n.decl Speed_of_sound(Speed:float)\nSpeed_of_sound(767).\n.decl Answer()\nAnswer() :- Max_speed(\"Acela Express\", speed), Speed_of_sound(speed_of_sound), speed < speed_of_sound.\n.output Answer", "completions": [".decl Max_speed(Train:symbol, Speed:float)\nMax_speed(\"Acela Express\", 150).\n.decl Speed_of_sound(Speed:float)\nSpeed_of_sound(767).\n.decl Answer()\nAnswer() :- Max_speed(\"Acela Express\", speed), Speed_of_sound(speed_of_sound), speed < speed_of_sound.\n.output Answer"]}
{"id": 1014, "answer": true, "completion": ".decl Infects(Person:symbol, Disease:symbol)\nInfects(\"HIV positive person\", \"HIV\").\n.decl Answer()\nAnswer() :- !Infects(\"HIV positive person\", \"other person\").\n.output Answer", "completions": [".decl Infects(Person:symbol, Disease:symbol)\nInfects(\"HIV positive person\", \"HIV\").\n.decl Answer()\nAnswer() :- !Infects(\"HIV positive person\", \"other person\").\n.output Answer"]}
{"id": 1015, "answer": false, "completion": ".decl Has_parasite(Animal:symbol, Parasite:symbol)\nHas_parasite(\"dog\", \"worm\").\n.decl Answer()\nAnswer() :- Has_parasite(\"strawberry\", parasite), parasite = \"worm\".\n.output Answer", "completions": [".decl Has_parasite(Animal:symbol, Parasite:symbol)\nHas_parasite(\"dog\", \"worm\").\n.decl Answer()\nAnswer() :- Has_parasite(\"strawberry\", parasite), parasite = \"worm\".\n.output Answer"]}
{"id": 1016, "answer": false, "completion": ".decl Has_odour(Fruit:symbol, Odour:symbol)\nHas_odour(\"Durian\", \"strong\").\nHas_odour(\"Durian\", \"unpleasant\").\n.decl Answer()\nAnswer() :- Has_odour(\"Durian\", \"pleasant\"), !.\n.output Answer", "completions": [".decl Has_odour(Fruit:symbol, Odour:symbol)\nHas_odour(\"Durian\", \"strong\").\nHas_odour(\"Durian\", \"unpleasant\").\n.decl Answer()\nAnswer() :- Has_odour(\"Durian\", \"pleasant\"), !.\n.output Answer"]}
{"id": 1017, "answer": false, "completion": ".decl Has_n_members(Band:symbol, N_members:float)\nHas_n_members(\"Gorillaz\", 4).\n.decl Seems_like_n_members(Band:symbol, N_members:float)\nSeems_like_n_members(\"Gorillaz\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Gorillaz\", n_members1), Seems_like_n_members(\"Gorillaz\", n_members2), n_members2 > n_members1.\n.output Answer", "completions": [".decl Has_n_members(Band:symbol, N_members:float)\nHas_n_members(\"Gorillaz\", 4).\n.decl Seems_like_n_members(Band:symbol, N_members:float)\nSeems_like_n_members(\"Gorillaz\", 5).\n.decl Answer()\nAnswer() :- Has_n_members(\"Gorillaz\", n_members1), Seems_like_n_members(\"Gorillaz\", n_members2), n_members2 > n_members1.\n.output Answer"]}
{"id": 1018, "answer": true, "completion": ".decl Amendment(Article:float, Text:symbol)\nAmendment(1, \"Congress shall make no law respecting an establishment of religion, or prohibiting the free exercise thereof; or abridging the freedom of speech, or of the press; or the right of the people peaceably to assemble, and to petition the Government for a redress of grievances.\").\n.decl Answer()\nAnswer() :- Amendment(8, text), text != \"No excessive bail shall be required, nor excessive fines imposed, nor cruel and unusual punishments inflicted.\".\n.output Answer", "completions": [".decl Amendment(Article:float, Text:symbol)\nAmendment(1, \"Congress shall make no law respecting an establishment of religion, or prohibiting the free exercise thereof; or abridging the freedom of speech, or of the press; or the right of the people peaceably to assemble, and to petition the Government for a redress of grievances.\").\n.decl Answer()\nAnswer() :- Amendment(8, text), text != \"No excessive bail shall be required, nor excessive fines imposed, nor cruel and unusual punishments inflicted.\".\n.output Answer"]}
{"id": 1019, "answer": true, "completion": ".decl Composed_by(Person:symbol, TV_series:symbol)\nComposed_by(\"Richard Wagner\", \"The Sopranos\").\nComposed_by(\"Richard Wagner\", \"Breaking Bad\").\n.decl Answer()\nAnswer() :- Composed_by(\"Richard Wagner\", TV_series1), Composed_by(\"Richard Wagner\", TV_series2), TV_series1 != TV_series2.\n.output Answer", "completions": [".decl Composed_by(Person:symbol, TV_series:symbol)\nComposed_by(\"Richard Wagner\", \"The Sopranos\").\nComposed_by(\"Richard Wagner\", \"Breaking Bad\").\n.decl Answer()\nAnswer() :- Composed_by(\"Richard Wagner\", TV_series1), Composed_by(\"Richard Wagner\", TV_series2), TV_series1 != TV_series2.\n.output Answer"]}
{"id": 1020, "answer": true, "completion": ".decl Musical_passion(Person:symbol, Passion:symbol)\nMusical_passion(\"Squidward Tentacles\", \"clarinet\").\nMusical_passion(\"Alan Greenspan\", \"jazz\").\n.decl Answer()\nAnswer() :- Musical_passion(\"Squidward Tentacles\", passion1), Musical_passion(\"Alan Greenspan\", passion2), passion1 != passion2.\n.output Answer", "completions": [".decl Musical_passion(Person:symbol, Passion:symbol)\nMusical_passion(\"Squidward Tentacles\", \"clarinet\").\nMusical_passion(\"Alan Greenspan\", \"jazz\").\n.decl Answer()\nAnswer() :- Musical_passion(\"Squidward Tentacles\", passion1), Musical_passion(\"Alan Greenspan\", passion2), passion1 != passion2.\n.output Answer"]}
{"id": 1021, "answer": true, "completion": ".decl Known_for(Object:symbol, Trait:symbol)\nKnown_for(\"Louvre's pyramid\", \"impressive architecture\").\nKnown_for(\"Louvre's pyramid\", \"controversial design\").\nKnown_for(\"Louvre's pyramid\", \"glass construction\").\nKnown_for(\"Louvre's pyramid\", \"unbreakable\").\n.decl Answer()\nAnswer() :- Known_for(\"Louvre's pyramid\", \"unbreakable\").\n.output Answer", "completions": [".decl Known_for(Object:symbol, Trait:symbol)\nKnown_for(\"Louvre's pyramid\", \"impressive architecture\").\nKnown_for(\"Louvre's pyramid\", \"controversial design\").\nKnown_for(\"Louvre's pyramid\", \"glass construction\").\nKnown_for(\"Louvre's pyramid\", \"unbreakable\").\n.decl Answer()\nAnswer() :- Known_for(\"Louvre's pyramid\", \"unbreakable\").\n.output Answer"]}
{"id": 1022, "answer": false, "completion": ".decl Eats(Person:symbol, Food:symbol)\nEats(\"Evander Holyfield\", \"chicken\").\nEats(\"Evander Holyfield\", \"beef\").\nEats(\"Evander Holyfield\", \"fish\").\n.decl Does_not_eat(Person:symbol, Food:symbol)\nDoes_not_eat(\"Evander Holyfield\", \"pork\").\n.decl Answer()\nAnswer() :- Eats(\"Evander Holyfield\", food), Does_not_eat(\"Evander Holyfield\", food), !.\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol)\nEats(\"Evander Holyfield\", \"chicken\").\nEats(\"Evander Holyfield\", \"beef\").\nEats(\"Evander Holyfield\", \"fish\").\n.decl Does_not_eat(Person:symbol, Food:symbol)\nDoes_not_eat(\"Evander Holyfield\", \"pork\").\n.decl Answer()\nAnswer() :- Eats(\"Evander Holyfield\", food), Does_not_eat(\"Evander Holyfield\", food), !.\n.output Answer"]}
{"id": 1023, "answer": false, "completion": ".decl Involved_in_conflict(Country:symbol, Conflict:symbol)\nInvolved_in_conflict(\"England\", \"World War II\").\nInvolved_in_conflict(\"Israel\", \"Arab-Israeli conflict\").\nInvolved_in_conflict(\"Egypt\", \"Arab-Israeli conflict\").\nInvolved_in_conflict(\"Jordan\", \"Arab-Israeli conflict\").\nInvolved_in_conflict(\"Lebanon\", \"Arab-Israeli conflict\").\n.decl Answer()\nAnswer() :- Involved_in_conflict(\"England\", conflict), Involved_in_conflict(\"Israel\", conflict).\n.output Answer", "completions": [".decl Involved_in_conflict(Country:symbol, Conflict:symbol)\nInvolved_in_conflict(\"England\", \"World War II\").\nInvolved_in_conflict(\"Israel\", \"Arab-Israeli conflict\").\nInvolved_in_conflict(\"Egypt\", \"Arab-Israeli conflict\").\nInvolved_in_conflict(\"Jordan\", \"Arab-Israeli conflict\").\nInvolved_in_conflict(\"Lebanon\", \"Arab-Israeli conflict\").\n.decl Answer()\nAnswer() :- Involved_in_conflict(\"England\", conflict), Involved_in_conflict(\"Israel\", conflict).\n.output Answer"]}
{"id": 1024, "answer": true, "completion": ".decl Requires_skill(Profession:symbol, Skill:symbol)\nRequires_skill(\"accountant\", \"mathematics\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"Dyscalculia\").\n.decl Answer()\nAnswer() :- Requires_skill(\"accountant\", skill), Has_condition(\"John\", condition), skill = \"mathematics\", condition = \"Dyscalculia\".\n.output Answer", "completions": [".decl Requires_skill(Profession:symbol, Skill:symbol)\nRequires_skill(\"accountant\", \"mathematics\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"Dyscalculia\").\n.decl Answer()\nAnswer() :- Requires_skill(\"accountant\", skill), Has_condition(\"John\", condition), skill = \"mathematics\", condition = \"Dyscalculia\".\n.output Answer"]}
{"id": 1025, "answer": false, "completion": ".decl Lived_in_time(Person:symbol, Time:symbol)\nLived_in_time(\"Donatello\", \"15th century\").\n.decl Invented(Object:symbol, Time:symbol)\nInvented(\"smartphone\", \"21st century\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Donatello\", time), Invented(\"smartphone\", time), !.\n.output Answer", "completions": [".decl Lived_in_time(Person:symbol, Time:symbol)\nLived_in_time(\"Donatello\", \"15th century\").\n.decl Invented(Object:symbol, Time:symbol)\nInvented(\"smartphone\", \"21st century\").\n.decl Answer()\nAnswer() :- Lived_in_time(\"Donatello\", time), Invented(\"smartphone\", time), !.\n.output Answer"]}
{"id": 1026, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas\", \"December\").\nHappens_in_time(\"Groundhog Day\", \"February\").\nHappens_in_time(\"film release\", \"December\").\n.decl Reminds(Event1:symbol, Event2:symbol)\nReminds(\"film release\", \"Groundhog Day\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas\", month), Happens_in_time(\"film release\", month), Reminds(\"film release\", \"Groundhog Day\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas\", \"December\").\nHappens_in_time(\"Groundhog Day\", \"February\").\nHappens_in_time(\"film release\", \"December\").\n.decl Reminds(Event1:symbol, Event2:symbol)\nReminds(\"film release\", \"Groundhog Day\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas\", month), Happens_in_time(\"film release\", month), Reminds(\"film release\", \"Groundhog Day\").\n.output Answer"]}
{"id": 1027, "answer": false, "completion": ".decl Uses_writing_system(Book:symbol, Writing_system:symbol)\nUses_writing_system(\"The Tale of Genji\", \"kanji\").\nUses_writing_system(\"Harry Potter and the Philosopher's Stone\", \"Roman alphabet\").\n.decl Pages(Book:symbol, N_pages:float)\nPages(\"The Tale of Genji\", 1360).\nPages(\"Harry Potter and the Philosopher's Stone\", 223).\n.decl Trees_saved(N_pages:float, N_trees:float)\nTrees_saved(n_pages, n_trees) :- n_trees = n_pages/200.\n.decl Answer()\nAnswer() :- Uses_writing_system(book, \"kanji\"), Pages(book, n_pages), Trees_saved(n_pages, n_trees), Trees_saved(book2, n_trees2), n_trees < n_trees2.\n.output Answer", "completions": [".decl Uses_writing_system(Book:symbol, Writing_system:symbol)\nUses_writing_system(\"The Tale of Genji\", \"kanji\").\nUses_writing_system(\"Harry Potter and the Philosopher's Stone\", \"Roman alphabet\").\n.decl Pages(Book:symbol, N_pages:float)\nPages(\"The Tale of Genji\", 1360).\nPages(\"Harry Potter and the Philosopher's Stone\", 223).\n.decl Trees_saved(N_pages:float, N_trees:float)\nTrees_saved(n_pages, n_trees) :- n_trees = n_pages/200.\n.decl Answer()\nAnswer() :- Uses_writing_system(book, \"kanji\"), Pages(book, n_pages), Trees_saved(n_pages, n_trees), Trees_saved(book2, n_trees2), n_trees < n_trees2.\n.output Answer"]}
{"id": 1028, "answer": false, "completion": ".decl Looks_same(Object:symbol)\nLooks_same(\"Egyptian pyramids\").\n.decl Answer()\n!Answer() :- Looks_same(\"Egyptian pyramids\").\n.output Answer", "completions": [".decl Looks_same(Object:symbol)\nLooks_same(\"Egyptian pyramids\").\n.decl Answer()\n!Answer() :- Looks_same(\"Egyptian pyramids\").\n.output Answer"]}
{"id": 1029, "answer": false, "completion": ".decl Storage_capacity(Device:symbol, Capacity:float)\nStorage_capacity(\"Samsung Galaxy A10e\", 32).\n.decl Size_of_file(File:symbol, Size:float)\nSize_of_file(\"Game of Thrones HD episode\", 3).\n.decl Answer()\nAnswer() :- Storage_capacity(device, capacity), Size_of_file(\"Game of Thrones HD episode\", size), capacity >= size*73.\n.output Answer", "completions": [".decl Storage_capacity(Device:symbol, Capacity:float)\nStorage_capacity(\"Samsung Galaxy A10e\", 32).\n.decl Size_of_file(File:symbol, Size:float)\nSize_of_file(\"Game of Thrones HD episode\", 3).\n.decl Answer()\nAnswer() :- Storage_capacity(device, capacity), Size_of_file(\"Game of Thrones HD episode\", size), capacity >= size*73.\n.output Answer"]}
{"id": 1030, "answer": false, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"Aerosmith\", 72).\n.decl Can_drive_in_carpool_lane(Person:symbol)\nCan_drive_in_carpool_lane(person) :- Age(person, age), age >= 65.\n.decl Answer()\nAnswer() :- Can_drive_in_carpool_lane(\"Aerosmith\").\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"Aerosmith\", 72).\n.decl Can_drive_in_carpool_lane(Person:symbol)\nCan_drive_in_carpool_lane(person) :- Age(person, age), age >= 65.\n.decl Answer()\nAnswer() :- Can_drive_in_carpool_lane(\"Aerosmith\").\n.output Answer"]}
{"id": 1031, "answer": true, "completion": ".decl Fits_in(Nest:symbol, Animal:symbol)\nFits_in(\"swallow nest\", \"swallow\").\nFits_in(\"ostrich nest\", \"ostrich\").\n.decl Answer()\nAnswer() :- Fits_in(nest, \"ostrich\"), !Fits_in(nest, \"swallow\").\n.output Answer", "completions": [".decl Fits_in(Nest:symbol, Animal:symbol)\nFits_in(\"swallow nest\", \"swallow\").\nFits_in(\"ostrich nest\", \"ostrich\").\n.decl Answer()\nAnswer() :- Fits_in(nest, \"ostrich\"), !Fits_in(nest, \"swallow\").\n.output Answer"]}
{"id": 1032, "answer": false, "completion": ".decl Fits_in_space(Object:symbol, Space:symbol)\nFits_in_space(\"giant squid\", \"ocean\").\nFits_in_space(\"Soldier Field\", \"football stadium\").\n.decl Answer()\nAnswer() :- Fits_in_space(\"giant squid\", space), Fits_in_space(\"Soldier Field\", space).\n.output Answer", "completions": [".decl Fits_in_space(Object:symbol, Space:symbol)\nFits_in_space(\"giant squid\", \"ocean\").\nFits_in_space(\"Soldier Field\", \"football stadium\").\n.decl Answer()\nAnswer() :- Fits_in_space(\"giant squid\", space), Fits_in_space(\"Soldier Field\", space).\n.output Answer"]}
{"id": 1033, "answer": false, "completion": ".decl Contains_word(Document:symbol, Word:symbol)\nContains_word(\"Constitution of the United States\", \"animal\").\nContains_word(\"Constitution of the United States\", \"rights\").\n.decl Supports_cause(Organization:symbol, Cause:symbol)\nSupports_cause(\"PETA\", \"animal rights\").\n.decl Answer()\nAnswer() :- Contains_word(\"Constitution of the United States\", word), Supports_cause(\"PETA\", cause), word = cause.\n.output Answer", "completions": [".decl Contains_word(Document:symbol, Word:symbol)\nContains_word(\"Constitution of the United States\", \"animal\").\nContains_word(\"Constitution of the United States\", \"rights\").\n.decl Supports_cause(Organization:symbol, Cause:symbol)\nSupports_cause(\"PETA\", \"animal rights\").\n.decl Answer()\nAnswer() :- Contains_word(\"Constitution of the United States\", word), Supports_cause(\"PETA\", cause), word = cause.\n.output Answer"]}
{"id": 1034, "answer": false, "completion": ".decl Has_body_part(Animal:symbol, Body_part:symbol)\nHas_body_part(\"minotaur\", \"hoof\").\n.decl Plays_sport(Animal:symbol, Sport:symbol)\nPlays_sport(\"minotaur\", \"football\").\n.decl Injures(Body_part:symbol, Injury:symbol)\nInjures(\"hoof\", \"sprain\").\nInjures(\"tibia\", \"fracture\").\n.decl Answer()\nAnswer() :- Has_body_part(\"minotaur\", body_part), Plays_sport(\"minotaur\", sport), Injures(body_part, injury), injury = \"tibia\", sport = \"football\".\n.output Answer", "completions": [".decl Has_body_part(Animal:symbol, Body_part:symbol)\nHas_body_part(\"minotaur\", \"hoof\").\n.decl Plays_sport(Animal:symbol, Sport:symbol)\nPlays_sport(\"minotaur\", \"football\").\n.decl Injures(Body_part:symbol, Injury:symbol)\nInjures(\"hoof\", \"sprain\").\nInjures(\"tibia\", \"fracture\").\n.decl Answer()\nAnswer() :- Has_body_part(\"minotaur\", body_part), Plays_sport(\"minotaur\", sport), Injures(body_part, injury), injury = \"tibia\", sport = \"football\".\n.output Answer"]}
{"id": 1035, "answer": false, "completion": ".decl Acceptable_to_wear(Icon:symbol)\nAcceptable_to_wear(\"crucifixion\").\n.decl Controversial(Icon:symbol)\nControversial(\"crucifixion\").\nControversial(\"swastika\").\n.decl Answer()\nAnswer() :- Acceptable_to_wear(icon), !Controversial(icon).\n.output Answer", "completions": [".decl Acceptable_to_wear(Icon:symbol)\nAcceptable_to_wear(\"crucifixion\").\n.decl Controversial(Icon:symbol)\nControversial(\"crucifixion\").\nControversial(\"swastika\").\n.decl Answer()\nAnswer() :- Acceptable_to_wear(icon), !Controversial(icon).\n.output Answer"]}
{"id": 1036, "answer": true, "completion": ".decl Involved(Airline:symbol, Crash:symbol)\nInvolved(\"United Airlines\", \"worst crash in history\").\n.decl Blameless(Airline:symbol)\nBlameless(\"United Airlines\").\n.decl Answer()\nAnswer() :- Involved(\"United Airlines\", crash), !Blameless(\"United Airlines\").\n.output Answer", "completions": [".decl Involved(Airline:symbol, Crash:symbol)\nInvolved(\"United Airlines\", \"worst crash in history\").\n.decl Blameless(Airline:symbol)\nBlameless(\"United Airlines\").\n.decl Answer()\nAnswer() :- Involved(\"United Airlines\", crash), !Blameless(\"United Airlines\").\n.output Answer"]}
{"id": 1037, "answer": false, "completion": ".decl Appeared_in_movie(Person:symbol, Movie:symbol)\nAppeared_in_movie(\"Clark Gable\", \"Gone with the Wind\").\n.decl Scored_movie(Movie:symbol, Composer:symbol)\nScored_movie(\"Star Wars\", \"John Williams\").\nScored_movie(\"Indiana Jones\", \"John Williams\").\n.decl Answer()\nAnswer() :- Appeared_in_movie(\"Clark Gable\", movie), Scored_movie(movie, \"John Williams\").\n.output Answer", "completions": [".decl Appeared_in_movie(Person:symbol, Movie:symbol)\nAppeared_in_movie(\"Clark Gable\", \"Gone with the Wind\").\n.decl Scored_movie(Movie:symbol, Composer:symbol)\nScored_movie(\"Star Wars\", \"John Williams\").\nScored_movie(\"Indiana Jones\", \"John Williams\").\n.decl Answer()\nAnswer() :- Appeared_in_movie(\"Clark Gable\", movie), Scored_movie(movie, \"John Williams\").\n.output Answer"]}
{"id": 1038, "answer": true, "completion": ".decl Has_nutrient(Food:symbol, Nutrient:symbol, Amount:float)\nHas_nutrient(\"Atlantic Salmon\", \"protein\", 20).\nHas_nutrient(\"Atlantic Salmon\", \"fat\", 10).\nHas_nutrient(\"Atlantic Salmon\", \"carbohydrates\", 0).\nHas_nutrient(\"David Duchovny's dietary guidelines\", \"protein\", 30).\nHas_nutrient(\"David Duchovny's dietary guidelines\", \"fat\", 20).\nHas_nutrient(\"David Duchovny's dietary guidelines\", \"carbohydrates\", 50).\n.decl Answer()\nAnswer() :- Has_nutrient(\"Atlantic Salmon\", nutrient1, amount1), Has_nutrient(\"David Duchovny's dietary guidelines\", nutrient1, amount2), amount1 <= amount2.\n.output Answer", "completions": [".decl Has_nutrient(Food:symbol, Nutrient:symbol, Amount:float)\nHas_nutrient(\"Atlantic Salmon\", \"protein\", 20).\nHas_nutrient(\"Atlantic Salmon\", \"fat\", 10).\nHas_nutrient(\"Atlantic Salmon\", \"carbohydrates\", 0).\nHas_nutrient(\"David Duchovny's dietary guidelines\", \"protein\", 30).\nHas_nutrient(\"David Duchovny's dietary guidelines\", \"fat\", 20).\nHas_nutrient(\"David Duchovny's dietary guidelines\", \"carbohydrates\", 50).\n.decl Answer()\nAnswer() :- Has_nutrient(\"Atlantic Salmon\", nutrient1, amount1), Has_nutrient(\"David Duchovny's dietary guidelines\", nutrient1, amount2), amount1 <= amount2.\n.output Answer"]}
{"id": 1039, "answer": false, "completion": ".decl Sells(Product:symbol, Location:symbol)\nSells(\"popcorn\", \"movie theater\").\nSells(\"cars\", \"General Motors\").\n.decl Answer()\nAnswer() :- Sells(\"General Motors\", location), Sells(product, location).\n.output Answer", "completions": [".decl Sells(Product:symbol, Location:symbol)\nSells(\"popcorn\", \"movie theater\").\nSells(\"cars\", \"General Motors\").\n.decl Answer()\nAnswer() :- Sells(\"General Motors\", location), Sells(product, location).\n.output Answer"]}
{"id": 1040, "answer": false, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Halloween cruise\", \"Gulf of Mexico\").\n.decl Has_high_storm_activity(Location:symbol)\nHas_high_storm_activity(\"Gulf of Mexico\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"Halloween cruise\", location), !Has_high_storm_activity(location).\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"Halloween cruise\", \"Gulf of Mexico\").\n.decl Has_high_storm_activity(Location:symbol)\nHas_high_storm_activity(\"Gulf of Mexico\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"Halloween cruise\", location), !Has_high_storm_activity(location).\n.output Answer"]}
{"id": 1041, "answer": true, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Billie Eilish\", 53).\n.decl Costs_more_than(Item:symbol, Price:float)\nCosts_more_than(\"Porsche\", 50).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Billie Eilish\", net_worth), Costs_more_than(\"Porsche\", price), net_worth >= price.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Billie Eilish\", 53).\n.decl Costs_more_than(Item:symbol, Price:float)\nCosts_more_than(\"Porsche\", 50).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Billie Eilish\", net_worth), Costs_more_than(\"Porsche\", price), net_worth >= price.\n.output Answer"]}
{"id": 1042, "answer": false, "completion": ".decl Recommends(Doctor:symbol, Treatment:symbol)\nRecommends(\"Dr. Smith\", \"acupuncture\").\nRecommends(\"Dr. Johnson\", \"massage therapy\").\n.decl Believes_in(Doctor:symbol, Practice:symbol)\nBelieves_in(\"Dr. Smith\", \"traditional Chinese medicine\").\nBelieves_in(\"Dr. Johnson\", \"holistic medicine\").\n.decl Answer()\nAnswer() :- Recommends(\"physician\", treatment), Believes_in(\"physician\", practice), !Believes_in(\"physician\", \"Reiki\").\n.output Answer", "completions": [".decl Recommends(Doctor:symbol, Treatment:symbol)\nRecommends(\"Dr. Smith\", \"acupuncture\").\nRecommends(\"Dr. Johnson\", \"massage therapy\").\n.decl Believes_in(Doctor:symbol, Practice:symbol)\nBelieves_in(\"Dr. Smith\", \"traditional Chinese medicine\").\nBelieves_in(\"Dr. Johnson\", \"holistic medicine\").\n.decl Answer()\nAnswer() :- Recommends(\"physician\", treatment), Believes_in(\"physician\", practice), !Believes_in(\"physician\", \"Reiki\").\n.output Answer"]}
{"id": 1043, "answer": false, "completion": ".decl Useful_for(Art:symbol, Animal:symbol)\nUseful_for(\"scrimshaw\", \"whale\").\nUseful_for(\"scrimshaw\", \"walrus\").\nUseful_for(\"scrimshaw\", \"elephant\").\nUseful_for(\"scrimshaw\", \"hippopotamus\").\n.decl Is_common(Animal:symbol)\nIs_common(\"warthog\").\n.decl Answer()\nAnswer() :- Useful_for(\"scrimshaw\", animal), Is_common(animal).\n.output Answer", "completions": [".decl Useful_for(Art:symbol, Animal:symbol)\nUseful_for(\"scrimshaw\", \"whale\").\nUseful_for(\"scrimshaw\", \"walrus\").\nUseful_for(\"scrimshaw\", \"elephant\").\nUseful_for(\"scrimshaw\", \"hippopotamus\").\n.decl Is_common(Animal:symbol)\nIs_common(\"warthog\").\n.decl Answer()\nAnswer() :- Useful_for(\"scrimshaw\", animal), Is_common(animal).\n.output Answer"]}
{"id": 1044, "answer": false, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"American\", \"English\").\n.decl Official_language(Park:symbol, Language:symbol)\nOfficial_language(\"Disneyland Paris\", \"French\").\n.decl Answer()\nAnswer() :- Speaks_language(\"American\", language), Official_language(\"Disneyland Paris\", language).\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"American\", \"English\").\n.decl Official_language(Park:symbol, Language:symbol)\nOfficial_language(\"Disneyland Paris\", \"French\").\n.decl Answer()\nAnswer() :- Speaks_language(\"American\", language), Official_language(\"Disneyland Paris\", language).\n.output Answer"]}
{"id": 1045, "answer": true, "completion": ".decl Height(Object:symbol, Height:float)\nHeight(\"giraffe\", 5).\nHeight(\"Eiffel Tower\", 324).\n.decl Answer()\nAnswer() :- Height(\"giraffe\", height1), Height(\"Eiffel Tower\", height2), height1 + height2 < 400.\n.output Answer", "completions": [".decl Height(Object:symbol, Height:float)\nHeight(\"giraffe\", 5).\nHeight(\"Eiffel Tower\", 324).\n.decl Answer()\nAnswer() :- Height(\"giraffe\", height1), Height(\"Eiffel Tower\", height2), height1 + height2 < 400.\n.output Answer"]}
{"id": 1046, "answer": false, "completion": ".decl Has_hardness(Material:symbol, Hardness:float)\nHas_hardness(\"diamond\", 10).\nHas_hardness(\"iron\", 4).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Gladiator's weapon\", 20).\nHas_weight(\"diamond\", 1).\n.decl Answer()\nAnswer() :- Has_hardness(\"diamond\", hardness1), Has_hardness(\"iron\", hardness2), Has_weight(\"Gladiator's weapon\", weight), hardness2 > hardness1, weight >= 10.\n.output Answer", "completions": [".decl Has_hardness(Material:symbol, Hardness:float)\nHas_hardness(\"diamond\", 10).\nHas_hardness(\"iron\", 4).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Gladiator's weapon\", 20).\nHas_weight(\"diamond\", 1).\n.decl Answer()\nAnswer() :- Has_hardness(\"diamond\", hardness1), Has_hardness(\"iron\", hardness2), Has_weight(\"Gladiator's weapon\", weight), hardness2 > hardness1, weight >= 10.\n.output Answer"]}
{"id": 1047, "answer": true, "completion": ".decl Necessary(Item:symbol, Activity:symbol)\nNecessary(\"curling iron\", \"curling\").\nNecessary(\"ice skates\", \"curling\").\nNecessary(\"broom\", \"curling\").\n.decl Answer()\nAnswer() :- Necessary(\"curling iron\", \"curling\").\n.output Answer", "completions": [".decl Necessary(Item:symbol, Activity:symbol)\nNecessary(\"curling iron\", \"curling\").\nNecessary(\"ice skates\", \"curling\").\nNecessary(\"broom\", \"curling\").\n.decl Answer()\nAnswer() :- Necessary(\"curling iron\", \"curling\").\n.output Answer"]}
{"id": 1048, "answer": true, "completion": ".decl Interacts_with_medication(Medication:symbol, Food:symbol)\nInteracts_with_medication(\"antidepressants\", \"grapefruit\").\nInteracts_with_medication(\"antidepressants\", \"Seville oranges\").\n.decl Answer()\nAnswer() :- Interacts_with_medication(\"antidepressants\", food).\n.output Answer", "completions": [".decl Interacts_with_medication(Medication:symbol, Food:symbol)\nInteracts_with_medication(\"antidepressants\", \"grapefruit\").\nInteracts_with_medication(\"antidepressants\", \"Seville oranges\").\n.decl Answer()\nAnswer() :- Interacts_with_medication(\"antidepressants\", food).\n.output Answer"]}
{"id": 1049, "answer": false, "completion": ".decl Influences(Field:symbol, Topic:symbol)\nInfluences(\"numerology\", \"hotel layouts\").\n.decl Answer()\nAnswer() :- Influences(\"numerology\", \"hotel layouts\").\n.output Answer", "completions": [".decl Influences(Field:symbol, Topic:symbol)\nInfluences(\"numerology\", \"hotel layouts\").\n.decl Answer()\nAnswer() :- Influences(\"numerology\", \"hotel layouts\").\n.output Answer"]}
{"id": 1050, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Michael Phelps\", \"swimming\").\n.decl Requires_skill(Activity:symbol, Skill:symbol)\nRequires_skill(\"pearl hunting\", \"diving\").\n.decl Answer()\nAnswer() :- Has_skill(\"Michael Phelps\", skill), Requires_skill(\"pearl hunting\", skill).\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Michael Phelps\", \"swimming\").\n.decl Requires_skill(Activity:symbol, Skill:symbol)\nRequires_skill(\"pearl hunting\", \"diving\").\n.decl Answer()\nAnswer() :- Has_skill(\"Michael Phelps\", skill), Requires_skill(\"pearl hunting\", skill).\n.output Answer"]}
{"id": 1051, "answer": false, "completion": ".decl Has_currency(Country:symbol, Currency:symbol)\nHas_currency(\"USA\", \"USD\").\nHas_currency(\"Italy\", \"EUR\").\n.decl Answer()\nAnswer() :- Has_currency(\"USA\", currency1), Has_currency(\"Italy\", currency2), currency1 != currency2.\n.output Answer", "completions": [".decl Has_currency(Country:symbol, Currency:symbol)\nHas_currency(\"USA\", \"USD\").\nHas_currency(\"Italy\", \"EUR\").\n.decl Answer()\nAnswer() :- Has_currency(\"USA\", currency1), Has_currency(\"Italy\", currency2), currency1 != currency2.\n.output Answer"]}
{"id": 1052, "answer": true, "completion": ".decl Necessary_for_win(Body_part:symbol, Trophy:symbol)\nNecessary_for_win(\"arms\", \"Stanley Cup\").\nNecessary_for_win(\"legs\", \"Stanley Cup\").\nNecessary_for_win(\"head\", \"Stanley Cup\").\n.decl Answer()\nAnswer() :- Necessary_for_win(\"tibia\", \"Stanley Cup\").\n.output Answer", "completions": [".decl Necessary_for_win(Body_part:symbol, Trophy:symbol)\nNecessary_for_win(\"arms\", \"Stanley Cup\").\nNecessary_for_win(\"legs\", \"Stanley Cup\").\nNecessary_for_win(\"head\", \"Stanley Cup\").\n.decl Answer()\nAnswer() :- Necessary_for_win(\"tibia\", \"Stanley Cup\").\n.output Answer"]}
{"id": 1053, "answer": false, "completion": ".decl Wrote(Writer:symbol, Work:symbol)\nWrote(\"Monty Python\", \"Dead Parrot sketch\").\nWrote(\"Abbott and Costello\", \"Who's on First sketch\").\n.decl Answer()\nAnswer() :- Wrote(\"Monty Python\", work), Wrote(\"Abbott and Costello\", work), work = \"Who's on First sketch\".\n.output Answer", "completions": [".decl Wrote(Writer:symbol, Work:symbol)\nWrote(\"Monty Python\", \"Dead Parrot sketch\").\nWrote(\"Abbott and Costello\", \"Who's on First sketch\").\n.decl Answer()\nAnswer() :- Wrote(\"Monty Python\", work), Wrote(\"Abbott and Costello\", work), work = \"Who's on First sketch\".\n.output Answer"]}
{"id": 1054, "answer": false, "completion": ".decl Looks_like(Character:symbol, Type:symbol)\nLooks_like(\"B\", \"Latin letter\").\nLooks_like(\"0\", \"Arabic numeral\").\nLooks_like(\"O\", \"Latin letter\").\nLooks_like(\"8\", \"Arabic numeral\").\nLooks_like(\"C\", \"Latin letter\").\nLooks_like(\"6\", \"Arabic numeral\").\n.decl Answer()\nAnswer() :- Looks_like(\"B\", type1), Looks_like(\"0\", type2), type1 != type2.\n.output Answer", "completions": [".decl Looks_like(Character:symbol, Type:symbol)\nLooks_like(\"B\", \"Latin letter\").\nLooks_like(\"0\", \"Arabic numeral\").\nLooks_like(\"O\", \"Latin letter\").\nLooks_like(\"8\", \"Arabic numeral\").\nLooks_like(\"C\", \"Latin letter\").\nLooks_like(\"6\", \"Arabic numeral\").\n.decl Answer()\nAnswer() :- Looks_like(\"B\", type1), Looks_like(\"0\", type2), type1 != type2.\n.output Answer"]}
{"id": 1055, "answer": false, "completion": ".decl Music_genre(Genre:symbol)\nMusic_genre(\"soul\").\n.decl Has_vocal_ability(Person:symbol, Ability:float)\nHas_vocal_ability(\"Brian Warner\", 7).\n.decl Answer()\nAnswer() :- Music_genre(\"soul\"), Has_vocal_ability(\"Brian Warner\", ability), ability >= 8.\n.output Answer", "completions": [".decl Music_genre(Genre:symbol)\nMusic_genre(\"soul\").\n.decl Has_vocal_ability(Person:symbol, Ability:float)\nHas_vocal_ability(\"Brian Warner\", 7).\n.decl Answer()\nAnswer() :- Music_genre(\"soul\"), Has_vocal_ability(\"Brian Warner\", ability), ability >= 8.\n.output Answer"]}
{"id": 1056, "answer": true, "completion": ".decl Taught_by(Person:symbol, Book:symbol)\nTaught_by(\"Hugh Jackman\", \"Les Misérables\").\nTaught_by(\"Hugh Jackman\", \"The Crucible\").\nTaught_by(\"Hugh Jackman\", \"Oklahoma!\").\n.decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"The Great Gatsby\", \"F. Scott Fitzgerald\").\nWritten_by(\"Les Misérables\", \"Victor Hugo\").\nWritten_by(\"The Crucible\", \"Arthur Miller\").\nWritten_by(\"Oklahoma!\", \"Richard Rodgers\").\n.decl Answer()\nAnswer() :- Taught_by(\"Hugh Jackman\", book), Written_by(book, \"F. Scott Fitzgerald\").\n.output Answer", "completions": [".decl Taught_by(Person:symbol, Book:symbol)\nTaught_by(\"Hugh Jackman\", \"Les Misérables\").\nTaught_by(\"Hugh Jackman\", \"The Crucible\").\nTaught_by(\"Hugh Jackman\", \"Oklahoma!\").\n.decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"The Great Gatsby\", \"F. Scott Fitzgerald\").\nWritten_by(\"Les Misérables\", \"Victor Hugo\").\nWritten_by(\"The Crucible\", \"Arthur Miller\").\nWritten_by(\"Oklahoma!\", \"Richard Rodgers\").\n.decl Answer()\nAnswer() :- Taught_by(\"Hugh Jackman\", book), Written_by(book, \"F. Scott Fitzgerald\").\n.output Answer"]}
{"id": 1057, "answer": false, "completion": ".decl Takes_time(Activity:symbol, Time:float)\nTakes_time(\"Young and the Restless\", 12000).\n.decl Is_longer_than(Time1:float, Time2:float)\nIs_longer_than(time1, time2) :- time1 > time2.\n.decl Answer()\nAnswer() :- Takes_time(\"Young and the Restless\", time1), Is_longer_than(366, time1).\n.output Answer", "completions": [".decl Takes_time(Activity:symbol, Time:float)\nTakes_time(\"Young and the Restless\", 12000).\n.decl Is_longer_than(Time1:float, Time2:float)\nIs_longer_than(time1, time2) :- time1 > time2.\n.decl Answer()\nAnswer() :- Takes_time(\"Young and the Restless\", time1), Is_longer_than(366, time1).\n.output Answer"]}
{"id": 1058, "answer": true, "completion": ".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"John\", \"agnosticism\").\n.decl Holds_position(Person:symbol, Position:symbol)\nHolds_position(\"Pope Francis\", \"pope\").\n.decl Answer()\nAnswer() :- Believes_in(person, \"agnosticism\"), Holds_position(\"Pope Francis\", position), position != \"pope\".\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Belief:symbol)\nBelieves_in(\"John\", \"agnosticism\").\n.decl Holds_position(Person:symbol, Position:symbol)\nHolds_position(\"Pope Francis\", \"pope\").\n.decl Answer()\nAnswer() :- Believes_in(person, \"agnosticism\"), Holds_position(\"Pope Francis\", position), position != \"pope\".\n.output Answer"]}
{"id": 1059, "answer": true, "completion": ".decl Requires_facilities(Animal:symbol, Facility:symbol)\nRequires_facilities(\"giraffe\", \"tall enclosure\").\nRequires_facilities(\"polar bear\", \"cold climate\").\nRequires_facilities(\"elephant\", \"large space\").\n.decl Answer()\nAnswer() :- Requires_facilities(\"giraffe\", facility).\n.output Answer", "completions": [".decl Requires_facilities(Animal:symbol, Facility:symbol)\nRequires_facilities(\"giraffe\", \"tall enclosure\").\nRequires_facilities(\"polar bear\", \"cold climate\").\nRequires_facilities(\"elephant\", \"large space\").\n.decl Answer()\nAnswer() :- Requires_facilities(\"giraffe\", facility).\n.output Answer"]}
{"id": 1060, "answer": true, "completion": ".decl Safe_from_disease(Organism:symbol, Disease:symbol)\nSafe_from_disease(\"slime mold\", \"cerebral palsy\").\n.decl Answer()\nAnswer() :- Safe_from_disease(\"slime mold\", \"cerebral palsy\").\n.output Answer", "completions": [".decl Safe_from_disease(Organism:symbol, Disease:symbol)\nSafe_from_disease(\"slime mold\", \"cerebral palsy\").\n.decl Answer()\nAnswer() :- Safe_from_disease(\"slime mold\", \"cerebral palsy\").\n.output Answer"]}
{"id": 1061, "answer": false, "completion": ".decl Born_in(Person:symbol, City:symbol)\nBorn_in(\"Leonardo da Vinci\", \"Anchiano\").\n.decl Has_contemporary_peers(Person:symbol, N_peers:float)\nHas_contemporary_peers(\"Leonardo da Vinci\", 0).\n.decl Answer()\nAnswer() :- Born_in(person, \"Anchiano\"), Has_contemporary_peers(person, n_peers), n_peers = 0, person != \"Leonardo da Vinci\".\n.output Answer", "completions": [".decl Born_in(Person:symbol, City:symbol)\nBorn_in(\"Leonardo da Vinci\", \"Anchiano\").\n.decl Has_contemporary_peers(Person:symbol, N_peers:float)\nHas_contemporary_peers(\"Leonardo da Vinci\", 0).\n.decl Answer()\nAnswer() :- Born_in(person, \"Anchiano\"), Has_contemporary_peers(person, n_peers), n_peers = 0, person != \"Leonardo da Vinci\".\n.output Answer"]}
{"id": 1062, "answer": false, "completion": ".decl Takes_medication(Person:symbol, Medication:symbol)\nTakes_medication(\"John\", \"laxative\").\n.decl Has_side_effect(Medication:symbol, Side_effect:symbol)\nHas_side_effect(\"laxative\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Takes_medication(person, \"laxative\"), Has_side_effect(\"laxative\", side_effect), side_effect = \"diarrhea\", person != \"Masochist\".\n.output Answer", "completions": [".decl Takes_medication(Person:symbol, Medication:symbol)\nTakes_medication(\"John\", \"laxative\").\n.decl Has_side_effect(Medication:symbol, Side_effect:symbol)\nHas_side_effect(\"laxative\", \"diarrhea\").\n.decl Answer()\nAnswer() :- Takes_medication(person, \"laxative\"), Has_side_effect(\"laxative\", side_effect), side_effect = \"diarrhea\", person != \"Masochist\".\n.output Answer"]}
{"id": 1063, "answer": true, "completion": ".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"Ice Age\", \"glaciers\").\nCauses(\"glaciers\", \"water\").\nCauses(\"water\", \"transportation\").\nCauses(\"transportation\", \"trade\").\nCauses(\"trade\", \"wealth\").\n.decl Answer()\nAnswer() :- Causes(\"Ice Age\", effect), Causes(effect, \"wealth\").\n.output Answer", "completions": [".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"Ice Age\", \"glaciers\").\nCauses(\"glaciers\", \"water\").\nCauses(\"water\", \"transportation\").\nCauses(\"transportation\", \"trade\").\nCauses(\"trade\", \"wealth\").\n.decl Answer()\nAnswer() :- Causes(\"Ice Age\", effect), Causes(effect, \"wealth\").\n.output Answer"]}
{"id": 1064, "answer": true, "completion": ".decl Religion(Person:symbol, Religion:symbol)\nReligion(\"Rabbi\", \"Judaism\").\n.decl Celebrates(Person:symbol, Event:symbol)\nCelebrates(\"Rabbi\", \"Hanukkah\").\nCelebrates(\"Rabbi\", \"Passover\").\nCelebrates(\"Rabbi\", \"Yom Kippur\").\nCelebrates(\"Rabbi\", \"Rosh Hashanah\").\n.decl Answer()\nAnswer() :- Religion(\"Rabbi\", religion), Celebrates(\"Rabbi\", event), event != \"Christmas\".\n.output Answer", "completions": [".decl Religion(Person:symbol, Religion:symbol)\nReligion(\"Rabbi\", \"Judaism\").\n.decl Celebrates(Person:symbol, Event:symbol)\nCelebrates(\"Rabbi\", \"Hanukkah\").\nCelebrates(\"Rabbi\", \"Passover\").\nCelebrates(\"Rabbi\", \"Yom Kippur\").\nCelebrates(\"Rabbi\", \"Rosh Hashanah\").\n.decl Answer()\nAnswer() :- Religion(\"Rabbi\", religion), Celebrates(\"Rabbi\", event), event != \"Christmas\".\n.output Answer"]}
{"id": 1065, "answer": false, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Rahul Dravid\", \"Kannada\").\nSpeaks_language(\"Rahul Dravid\", \"English\").\n.decl Located_in(City:symbol, Country:symbol)\nLocated_in(\"Aurangabad\", \"India\").\n.decl Has_cuisine(City:symbol, Cuisine:symbol)\nHas_cuisine(\"Aurangabad\", \"Indian\").\n.decl Answer()\nAnswer() :- Speaks_language(\"Rahul Dravid\", language), Located_in(\"Aurangabad\", country), Has_cuisine(\"Aurangabad\", cuisine), language != cuisine.\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Rahul Dravid\", \"Kannada\").\nSpeaks_language(\"Rahul Dravid\", \"English\").\n.decl Located_in(City:symbol, Country:symbol)\nLocated_in(\"Aurangabad\", \"India\").\n.decl Has_cuisine(City:symbol, Cuisine:symbol)\nHas_cuisine(\"Aurangabad\", \"Indian\").\n.decl Answer()\nAnswer() :- Speaks_language(\"Rahul Dravid\", language), Located_in(\"Aurangabad\", country), Has_cuisine(\"Aurangabad\", cuisine), language != cuisine.\n.output Answer"]}
{"id": 1066, "answer": false, "completion": ".decl Famous_for(Person:symbol, Reason:symbol)\nFamous_for(\"Shakespeare\", \"writing plays\").\nFamous_for(\"Mozart\", \"composing music\").\n.decl Infinitive_form(Verb:symbol)\nInfinitive_form(\"write\").\nInfinitive_form(\"compose\").\n.decl Answer()\nAnswer() :- Famous_for(\"Shakespeare\", reason), Infinitive_form(verb), reason contains verb.\n.output Answer", "completions": [".decl Famous_for(Person:symbol, Reason:symbol)\nFamous_for(\"Shakespeare\", \"writing plays\").\nFamous_for(\"Mozart\", \"composing music\").\n.decl Infinitive_form(Verb:symbol)\nInfinitive_form(\"write\").\nInfinitive_form(\"compose\").\n.decl Answer()\nAnswer() :- Famous_for(\"Shakespeare\", reason), Infinitive_form(verb), reason contains verb.\n.output Answer"]}
{"id": 1067, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"referee shirt\", \"yellow\").\nHas_color(\"soccer field\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"referee shirt\", color), Has_color(\"soccer field\", color2), color != color2.\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"referee shirt\", \"yellow\").\nHas_color(\"soccer field\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"referee shirt\", color), Has_color(\"soccer field\", color2), color != color2.\n.output Answer"]}
{"id": 1068, "answer": true, "completion": ".decl Has_deficiency(Person:symbol, Deficiency:symbol)\nHas_deficiency(\"pirate1\", \"scurvy\").\nHas_deficiency(\"pirate2\", \"scurvy\").\n.decl Needs_nutrient(Deficiency:symbol, Nutrient:symbol)\nNeeds_nutrient(\"scurvy\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Has_deficiency(pirate, deficiency), Needs_nutrient(deficiency, nutrient).\n.output Answer", "completions": [".decl Has_deficiency(Person:symbol, Deficiency:symbol)\nHas_deficiency(\"pirate1\", \"scurvy\").\nHas_deficiency(\"pirate2\", \"scurvy\").\n.decl Needs_nutrient(Deficiency:symbol, Nutrient:symbol)\nNeeds_nutrient(\"scurvy\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Has_deficiency(pirate, deficiency), Needs_nutrient(deficiency, nutrient).\n.output Answer"]}
{"id": 1069, "answer": false, "completion": ".decl Causes_death(Food:symbol)\nCauses_death(\"poison\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"John\", \"ice\").\n.decl Answer()\nAnswer() :- Eats(person, food), Causes_death(food).\n.output Answer", "completions": [".decl Causes_death(Food:symbol)\nCauses_death(\"poison\").\n.decl Eats(Person:symbol, Food:symbol)\nEats(\"John\", \"ice\").\n.decl Answer()\nAnswer() :- Eats(person, food), Causes_death(food).\n.output Answer"]}
{"id": 1070, "answer": true, "completion": ".decl Climbs(Object:symbol, Altitude:float)\nClimbs(\"King Kong\", 1000).\n.decl Visits(Object:symbol, Altitude:float)\nVisits(\"Eiffel Tower visitors\", 276).\n.decl Answer()\nAnswer() :- Climbs(\"King Kong\", altitude1), Visits(\"Eiffel Tower visitors\", altitude2), altitude1 > altitude2.\n.output Answer", "completions": [".decl Climbs(Object:symbol, Altitude:float)\nClimbs(\"King Kong\", 1000).\n.decl Visits(Object:symbol, Altitude:float)\nVisits(\"Eiffel Tower visitors\", 276).\n.decl Answer()\nAnswer() :- Climbs(\"King Kong\", altitude1), Visits(\"Eiffel Tower visitors\", altitude2), altitude1 > altitude2.\n.output Answer"]}
{"id": 1071, "answer": false, "completion": ".decl Bedtime(Person:symbol, Time:float)\nBedtime(\"child1\", 8).\nBedtime(\"child2\", 9).\nBedtime(\"child3\", 8.30).\n.decl Watches(Person:symbol, Show:symbol)\nWatches(\"child1\", \"Sesame Street\").\nWatches(\"child2\", \"The Simpsons\").\nWatches(\"child3\", \"Conan O'Brien\").\n.decl Answer()\nAnswer() :- Watches(person, \"Conan O'Brien\"), Bedtime(person, bedtime), bedtime < 11.\n.output Answer", "completions": [".decl Bedtime(Person:symbol, Time:float)\nBedtime(\"child1\", 8).\nBedtime(\"child2\", 9).\nBedtime(\"child3\", 8.30).\n.decl Watches(Person:symbol, Show:symbol)\nWatches(\"child1\", \"Sesame Street\").\nWatches(\"child2\", \"The Simpsons\").\nWatches(\"child3\", \"Conan O'Brien\").\n.decl Answer()\nAnswer() :- Watches(person, \"Conan O'Brien\"), Bedtime(person, bedtime), bedtime < 11.\n.output Answer"]}
{"id": 1072, "answer": false, "completion": ".decl Membership_length(Organization:symbol, Length:float)\nMembership_length(\"Capital One Venture\", 5).\nMembership_length(\"Church of Satan\", 1).\n.decl Membership_cost(Organization:symbol, Cost:float)\nMembership_cost(\"Capital One Venture\", 95).\nMembership_cost(\"Church of Satan\", 200).\n.decl Answer()\nAnswer() :- Membership_length(\"Capital One Venture\", length1), Membership_cost(\"Capital One Venture\", cost1), Membership_length(\"Church of Satan\", length2), Membership_cost(\"Church of Satan\", cost2), (cost1/length1) < (cost2/length2).\n.output Answer", "completions": [".decl Membership_length(Organization:symbol, Length:float)\nMembership_length(\"Capital One Venture\", 5).\nMembership_length(\"Church of Satan\", 1).\n.decl Membership_cost(Organization:symbol, Cost:float)\nMembership_cost(\"Capital One Venture\", 95).\nMembership_cost(\"Church of Satan\", 200).\n.decl Answer()\nAnswer() :- Membership_length(\"Capital One Venture\", length1), Membership_cost(\"Capital One Venture\", cost1), Membership_length(\"Church of Satan\", length2), Membership_cost(\"Church of Satan\", cost2), (cost1/length1) < (cost2/length2).\n.output Answer"]}
{"id": 1073, "answer": true, "completion": ".decl Has_activity(Location:symbol, Activity:symbol)\nHas_activity(\"Morocco\", \"surfing\").\nHas_activity(\"Morocco\", \"camel riding\").\n.decl Answer()\nAnswer() :- Has_activity(\"Morocco\", activity), activity = \"water skiing\".\n.output Answer", "completions": [".decl Has_activity(Location:symbol, Activity:symbol)\nHas_activity(\"Morocco\", \"surfing\").\nHas_activity(\"Morocco\", \"camel riding\").\n.decl Answer()\nAnswer() :- Has_activity(\"Morocco\", activity), activity = \"water skiing\".\n.output Answer"]}
{"id": 1074, "answer": false, "completion": ".decl Can_swim(Animal:symbol)\nCan_swim(\"otter\").\nCan_swim(\"dolphin\").\nCan_swim(\"penguin\").\n.decl Answer()\nAnswer() :- Can_swim(\"snow leopard\"), !.\n.output Answer", "completions": [".decl Can_swim(Animal:symbol)\nCan_swim(\"otter\").\nCan_swim(\"dolphin\").\nCan_swim(\"penguin\").\n.decl Answer()\nAnswer() :- Can_swim(\"snow leopard\"), !.\n.output Answer"]}
{"id": 1075, "answer": false, "completion": ".decl Enemy_of(Character:symbol, Group:symbol)\nEnemy_of(\"Joker\", \"Batman and allies\").\nEnemy_of(\"Thanos\", \"Avengers\").\n.decl Answer()\nAnswer() :- Enemy_of(\"Joker\", group1), Enemy_of(\"Thanos\", group2), group1 =!= group2.\n.output Answer", "completions": [".decl Enemy_of(Character:symbol, Group:symbol)\nEnemy_of(\"Joker\", \"Batman and allies\").\nEnemy_of(\"Thanos\", \"Avengers\").\n.decl Answer()\nAnswer() :- Enemy_of(\"Joker\", group1), Enemy_of(\"Thanos\", group2), group1 =!= group2.\n.output Answer"]}
{"id": 1076, "answer": false, "completion": ".decl Requires_knowledge(Job:symbol, Knowledge:symbol)\nRequires_knowledge(\"sofer\", \"knowledge of writing Torah scrolls\").\n.decl Forbids_activity(Job:symbol, Activity:symbol)\nForbids_activity(\"vegan\", \"using animal products\").\n.decl Answer()\nAnswer() :- Requires_knowledge(\"sofer\", knowledge), Forbids_activity(\"vegan\", activity), knowledge contains activity.\n.output Answer", "completions": [".decl Requires_knowledge(Job:symbol, Knowledge:symbol)\nRequires_knowledge(\"sofer\", \"knowledge of writing Torah scrolls\").\n.decl Forbids_activity(Job:symbol, Activity:symbol)\nForbids_activity(\"vegan\", \"using animal products\").\n.decl Answer()\nAnswer() :- Requires_knowledge(\"sofer\", knowledge), Forbids_activity(\"vegan\", activity), knowledge contains activity.\n.output Answer"]}
{"id": 1077, "answer": false, "completion": ".decl Runs_through(State:symbol, Route:symbol)\nRuns_through(\"Virginia\", \"US Route 1\").\nRuns_through(\"North Carolina\", \"US Route 1\").\nRuns_through(\"South Carolina\", \"US Route 1\").\nRuns_through(\"Georgia\", \"US Route 1\").\nRuns_through(\"Florida\", \"US Route 1\").\nRuns_through(\"Maine\", \"US Route 1\").\nRuns_through(\"New Hampshire\", \"US Route 1\").\nRuns_through(\"Massachusetts\", \"US Route 1\").\nRuns_through(\"Rhode Island\", \"US Route 1\").\nRuns_through(\"Connecticut\", \"US Route 1\").\nRuns_through(\"New York\", \"US Route 1\").\nRuns_through(\"New Jersey\", \"US Route 1\").\nRuns_through(\"Pennsylvania\", \"US Route 1\").\nRuns_through(\"Delaware\", \"US Route 1\").\nRuns_through(\"Maryland\", \"US Route 1\").\nRuns_through(\"District of Columbia\", \"US Route 1\").\n.decl Is_red(State:symbol)\nIs_red(\"Virginia\").\nIs_red(\"North Carolina\").\nIs_red(\"South Carolina\").\nIs_red(\"Georgia\").\nIs_red(\"Florida\").\nIs_red(\"Maine\").\nIs_red(\"New Hampshire\").\nIs_red(\"Massachusetts\").\nIs_red(\"Rhode Island\").\nIs_red(\"Connecticut\").\nIs_red(\"New York\").\nIs_red(\"New Jersey\").\nIs_red(\"Pennsylvania\").\nIs_red(\"Delaware\").\nIs_red(\"Maryland\").\n.decl Answer()\nAnswer() :- Runs_through(state, \"US Route 1\"), !Is_red(state).\n.output Answer", "completions": [".decl Runs_through(State:symbol, Route:symbol)\nRuns_through(\"Virginia\", \"US Route 1\").\nRuns_through(\"North Carolina\", \"US Route 1\").\nRuns_through(\"South Carolina\", \"US Route 1\").\nRuns_through(\"Georgia\", \"US Route 1\").\nRuns_through(\"Florida\", \"US Route 1\").\nRuns_through(\"Maine\", \"US Route 1\").\nRuns_through(\"New Hampshire\", \"US Route 1\").\nRuns_through(\"Massachusetts\", \"US Route 1\").\nRuns_through(\"Rhode Island\", \"US Route 1\").\nRuns_through(\"Connecticut\", \"US Route 1\").\nRuns_through(\"New York\", \"US Route 1\").\nRuns_through(\"New Jersey\", \"US Route 1\").\nRuns_through(\"Pennsylvania\", \"US Route 1\").\nRuns_through(\"Delaware\", \"US Route 1\").\nRuns_through(\"Maryland\", \"US Route 1\").\nRuns_through(\"District of Columbia\", \"US Route 1\").\n.decl Is_red(State:symbol)\nIs_red(\"Virginia\").\nIs_red(\"North Carolina\").\nIs_red(\"South Carolina\").\nIs_red(\"Georgia\").\nIs_red(\"Florida\").\nIs_red(\"Maine\").\nIs_red(\"New Hampshire\").\nIs_red(\"Massachusetts\").\nIs_red(\"Rhode Island\").\nIs_red(\"Connecticut\").\nIs_red(\"New York\").\nIs_red(\"New Jersey\").\nIs_red(\"Pennsylvania\").\nIs_red(\"Delaware\").\nIs_red(\"Maryland\").\n.decl Answer()\nAnswer() :- Runs_through(state, \"US Route 1\"), !Is_red(state).\n.output Answer"]}
{"id": 1078, "answer": false, "completion": ".decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"Napoleonic Wars\", 1803).\nHappened_in_year(\"Napoleonic Wars\", 1804).\nHappened_in_year(\"Napoleonic Wars\", 1805).\nHappened_in_year(\"Napoleonic Wars\", 1806).\nHappened_in_year(\"Napoleonic Wars\", 1807).\nHappened_in_year(\"Napoleonic Wars\", 1808).\nHappened_in_year(\"Napoleonic Wars\", 1809).\n.decl Answer()\nAnswer() :- !Happened_in_year(\"Napoleonic Wars\", 1945).\n.output Answer", "completions": [".decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"Napoleonic Wars\", 1803).\nHappened_in_year(\"Napoleonic Wars\", 1804).\nHappened_in_year(\"Napoleonic Wars\", 1805).\nHappened_in_year(\"Napoleonic Wars\", 1806).\nHappened_in_year(\"Napoleonic Wars\", 1807).\nHappened_in_year(\"Napoleonic Wars\", 1808).\nHappened_in_year(\"Napoleonic Wars\", 1809).\n.decl Answer()\nAnswer() :- !Happened_in_year(\"Napoleonic Wars\", 1945).\n.output Answer"]}
{"id": 1079, "answer": false, "completion": ".decl Height_requirement(Ride:symbol, Height:float)\nHeight_requirement(\"Candymonium\", 54).\n.decl Can_ride(Person:symbol, Height:float)\nCan_ride(\"Marco Rubio\", 72).\n.decl Answer()\nAnswer() :- Height_requirement(\"Candymonium\", height), Can_ride(\"Marco Rubio\", height).\n.output Answer", "completions": [".decl Height_requirement(Ride:symbol, Height:float)\nHeight_requirement(\"Candymonium\", 54).\n.decl Can_ride(Person:symbol, Height:float)\nCan_ride(\"Marco Rubio\", 72).\n.decl Answer()\nAnswer() :- Height_requirement(\"Candymonium\", height), Can_ride(\"Marco Rubio\", height).\n.output Answer"]}
{"id": 1080, "answer": true, "completion": ".decl Released_from_box(Item:symbol)\nReleased_from_box(\"pain\").\nReleased_from_box(\"sorrow\").\nReleased_from_box(\"greed\").\nReleased_from_box(\"envy\").\n.decl Name_of_horseman(Horseman:symbol)\nName_of_horseman(\"War\").\nName_of_horseman(\"Famine\").\nName_of_horseman(\"Pestilence\").\nName_of_horseman(\"Death\").\n.decl Answer()\nAnswer() :- Released_from_box(item1), Name_of_horseman(horseman1), Released_from_box(item2), Name_of_horseman(horseman2), item1 != item2, horseman1 != horseman2, (item1 = horseman1 ; item1 = horseman2 ; item2 = horseman1 ; item2 = horseman2).\n.output Answer", "completions": [".decl Released_from_box(Item:symbol)\nReleased_from_box(\"pain\").\nReleased_from_box(\"sorrow\").\nReleased_from_box(\"greed\").\nReleased_from_box(\"envy\").\n.decl Name_of_horseman(Horseman:symbol)\nName_of_horseman(\"War\").\nName_of_horseman(\"Famine\").\nName_of_horseman(\"Pestilence\").\nName_of_horseman(\"Death\").\n.decl Answer()\nAnswer() :- Released_from_box(item1), Name_of_horseman(horseman1), Released_from_box(item2), Name_of_horseman(horseman2), item1 != item2, horseman1 != horseman2, (item1 = horseman1 ; item1 = horseman2 ; item2 = horseman1 ; item2 = horseman2).\n.output Answer"]}
{"id": 1081, "answer": false, "completion": ".decl Used_calendar(Person:symbol, Calendar:symbol)\nUsed_calendar(\"Saint Augustine\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Used_calendar(\"Saint Augustine\", \"Julian calendar\").\n.output Answer", "completions": [".decl Used_calendar(Person:symbol, Calendar:symbol)\nUsed_calendar(\"Saint Augustine\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Used_calendar(\"Saint Augustine\", \"Julian calendar\").\n.output Answer"]}
{"id": 1082, "answer": false, "completion": ".decl Is_illegal(Action:symbol)\nIs_illegal(\"assassination\").\nIs_illegal(\"theft\").\nIs_illegal(\"parody of the President of the United States\").\n.decl Answer()\nAnswer() :- Is_illegal(\"parody of the President of the United States\").\n.output Answer", "completions": [".decl Is_illegal(Action:symbol)\nIs_illegal(\"assassination\").\nIs_illegal(\"theft\").\nIs_illegal(\"parody of the President of the United States\").\n.decl Answer()\nAnswer() :- Is_illegal(\"parody of the President of the United States\").\n.output Answer"]}
{"id": 1083, "answer": true, "completion": ".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Has_atmosphere(Planet:symbol)\nHas_atmosphere(\"Venus\").\n.decl Answer()\nAnswer() :- Has_temperature(\"Venus\", temperature), temperature > -173, Has_atmosphere(\"Venus\").\n.output Answer", "completions": [".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Has_atmosphere(Planet:symbol)\nHas_atmosphere(\"Venus\").\n.decl Answer()\nAnswer() :- Has_temperature(\"Venus\", temperature), temperature > -173, Has_atmosphere(\"Venus\").\n.output Answer"]}
{"id": 1084, "answer": true, "completion": ".decl Used_by(Party:symbol, Flag:symbol)\nUsed_by(\"Soviet Union\", \"Hammer and sickle\").\nUsed_by(\"Nazi Germany\", \"Swastika\").\n.decl Answer()\nAnswer() :- Used_by(\"Nazi Germany\", flag), flag != \"Hammer and sickle\".\n.output Answer", "completions": [".decl Used_by(Party:symbol, Flag:symbol)\nUsed_by(\"Soviet Union\", \"Hammer and sickle\").\nUsed_by(\"Nazi Germany\", \"Swastika\").\n.decl Answer()\nAnswer() :- Used_by(\"Nazi Germany\", flag), flag != \"Hammer and sickle\".\n.output Answer"]}
{"id": 1085, "answer": false, "completion": ".decl Died(Person:symbol, Cause_of_death:symbol)\nDied(\"Paul the Apostle\", \"beheading\").\n.decl Tenet_of_Ahimsa(Tenet:symbol)\nTenet_of_Ahimsa(\"non-violence\").\nTenet_of_Ahimsa(\"compassion\").\nTenet_of_Ahimsa(\"respect for life\").\n.decl Violates_tenet(Person:symbol, Tenet:symbol)\nViolates_tenet(\"Paul the Apostle\", \"non-violence\").\nViolates_tenet(\"Paul the Apostle\", \"respect for life\").\n.decl Answer()\nAnswer() :- Died(\"Paul the Apostle\", cause), Violates_tenet(\"Paul the Apostle\", tenet), Cause_of_death != tenet.\n.output Answer", "completions": [".decl Died(Person:symbol, Cause_of_death:symbol)\nDied(\"Paul the Apostle\", \"beheading\").\n.decl Tenet_of_Ahimsa(Tenet:symbol)\nTenet_of_Ahimsa(\"non-violence\").\nTenet_of_Ahimsa(\"compassion\").\nTenet_of_Ahimsa(\"respect for life\").\n.decl Violates_tenet(Person:symbol, Tenet:symbol)\nViolates_tenet(\"Paul the Apostle\", \"non-violence\").\nViolates_tenet(\"Paul the Apostle\", \"respect for life\").\n.decl Answer()\nAnswer() :- Died(\"Paul the Apostle\", cause), Violates_tenet(\"Paul the Apostle\", tenet), Cause_of_death != tenet.\n.output Answer"]}
{"id": 1086, "answer": true, "completion": ".decl Causes(Person_A:symbol, Person_B:symbol, Event:symbol)\nCauses(\"SNL\", \"Jenny McCarthy\", \"strained relationship with cousin\").\n.decl Answer()\nAnswer() :- Causes(cause, \"Jenny McCarthy\", \"strained relationship with cousin\"), cause != \"SNL\".\n.output Answer", "completions": [".decl Causes(Person_A:symbol, Person_B:symbol, Event:symbol)\nCauses(\"SNL\", \"Jenny McCarthy\", \"strained relationship with cousin\").\n.decl Answer()\nAnswer() :- Causes(cause, \"Jenny McCarthy\", \"strained relationship with cousin\"), cause != \"SNL\".\n.output Answer"]}
{"id": 1087, "answer": true, "completion": ".decl Required_for_license(Activity:symbol, Age:float)\nRequired_for_license(\"eleventh grade\", 16).\n.decl Answer()\nAnswer() :- Required_for_license(activity, age), age >= 16, activity = \"eleventh grade\".\n.output Answer", "completions": [".decl Required_for_license(Activity:symbol, Age:float)\nRequired_for_license(\"eleventh grade\", 16).\n.decl Answer()\nAnswer() :- Required_for_license(activity, age), age >= 16, activity = \"eleventh grade\".\n.output Answer"]}
{"id": 1088, "answer": false, "completion": ".decl Influenced_by(Person1:symbol, Person2:symbol)\nInfluenced_by(\"Albert Einstein\", \"Max Planck\").\nInfluenced_by(\"Max Planck\", \"Ernst Rutherford\").\nInfluenced_by(\"Ernst Rutherford\", \"James Chadwick\").\nInfluenced_by(\"James Chadwick\", \"John Cockcroft\").\nInfluenced_by(\"John Cockcroft\", \"DARPA\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Albert Einstein\", person2), Influenced_by(person2, \"DARPA\").\n.output Answer", "completions": [".decl Influenced_by(Person1:symbol, Person2:symbol)\nInfluenced_by(\"Albert Einstein\", \"Max Planck\").\nInfluenced_by(\"Max Planck\", \"Ernst Rutherford\").\nInfluenced_by(\"Ernst Rutherford\", \"James Chadwick\").\nInfluenced_by(\"James Chadwick\", \"John Cockcroft\").\nInfluenced_by(\"John Cockcroft\", \"DARPA\").\n.decl Answer()\nAnswer() :- Influenced_by(\"Albert Einstein\", person2), Influenced_by(person2, \"DARPA\").\n.output Answer"]}
{"id": 1089, "answer": false, "completion": ".decl Contains(Thing:symbol, Substance:symbol)\nContains(\"cigarettes\", \"nicotine\").\nContains(\"cigarettes\", \"menthol\").\n.decl Answer()\nAnswer() :- Contains(\"cigarettes\", \"nicotine\"), !Contains(\"cigarettes\", \"menthol\").\n.output Answer", "completions": [".decl Contains(Thing:symbol, Substance:symbol)\nContains(\"cigarettes\", \"nicotine\").\nContains(\"cigarettes\", \"menthol\").\n.decl Answer()\nAnswer() :- Contains(\"cigarettes\", \"nicotine\"), !Contains(\"cigarettes\", \"menthol\").\n.output Answer"]}
{"id": 1090, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Matt Groening\", 1954).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Matt Groening\", !).\n.decl Answer()\nAnswer() :- Born_in_year(\"Matt Groening\", year1), Died_in_year(\"Matt Groening\", year2), year2 > year1 + 100.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Matt Groening\", 1954).\n.decl Died_in_year(Person:symbol, Year:float)\nDied_in_year(\"Matt Groening\", !).\n.decl Answer()\nAnswer() :- Born_in_year(\"Matt Groening\", year1), Died_in_year(\"Matt Groening\", year2), year2 > year1 + 100.\n.output Answer"]}
{"id": 1091, "answer": false, "completion": ".decl Admits_to_technique(Person:symbol, Technique:symbol)\nAdmits_to_technique(\"psychic\", \"hot reading\").\n.decl Trustworthy(Person:symbol)\nTrustworthy(person) :- !Admits_to_technique(person, \"hot reading\").\n.decl Answer()\nAnswer() :- Trustworthy(\"psychic\").\n.output Answer", "completions": [".decl Admits_to_technique(Person:symbol, Technique:symbol)\nAdmits_to_technique(\"psychic\", \"hot reading\").\n.decl Trustworthy(Person:symbol)\nTrustworthy(person) :- !Admits_to_technique(person, \"hot reading\").\n.decl Answer()\nAnswer() :- Trustworthy(\"psychic\").\n.output Answer"]}
{"id": 1092, "answer": false, "completion": ".decl Has_location(Company:symbol, Location:symbol)\nHas_location(\"Poland Spring\", \"Maine\").\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Sahara\", 45).\n.decl Answer()\nAnswer() :- Has_location(\"Poland Spring\", location), Has_temperature(location, temperature), temperature < 40.\n.output Answer", "completions": [".decl Has_location(Company:symbol, Location:symbol)\nHas_location(\"Poland Spring\", \"Maine\").\n.decl Has_temperature(Location:symbol, Temperature:float)\nHas_temperature(\"Sahara\", 45).\n.decl Answer()\nAnswer() :- Has_location(\"Poland Spring\", location), Has_temperature(location, temperature), temperature < 40.\n.output Answer"]}
{"id": 1093, "answer": true, "completion": ".decl Requires(Technology:symbol, Resource:symbol)\nRequires(\"jet plane\", \"society\").\n.decl Answer()\nAnswer() :- !Requires(\"jet plane\", resource).\n.output Answer", "completions": [".decl Requires(Technology:symbol, Resource:symbol)\nRequires(\"jet plane\", \"society\").\n.decl Answer()\nAnswer() :- !Requires(\"jet plane\", resource).\n.output Answer"]}
{"id": 1094, "answer": false, "completion": ".decl Depends_on(A:symbol, B:symbol)\nDepends_on(\"human race\", \"chlorophyll\").\n.decl Answer()\nAnswer() :- !Depends_on(\"human race\", \"chlorophyll\").\n.output Answer", "completions": [".decl Depends_on(A:symbol, B:symbol)\nDepends_on(\"human race\", \"chlorophyll\").\n.decl Answer()\nAnswer() :- !Depends_on(\"human race\", \"chlorophyll\").\n.output Answer"]}
{"id": 1095, "answer": true, "completion": ".decl Stands_in(Location:symbol, Object:symbol)\nStands_in(\"New York Harbor\", \"Statue of Liberty\").\n.decl Answer()\nAnswer() :- Stands_in(\"New York Harbor\", \"giant green lady\").\n.output Answer", "completions": [".decl Stands_in(Location:symbol, Object:symbol)\nStands_in(\"New York Harbor\", \"Statue of Liberty\").\n.decl Answer()\nAnswer() :- Stands_in(\"New York Harbor\", \"giant green lady\").\n.output Answer"]}
{"id": 1096, "answer": false, "completion": ".decl Is_bordered_by(Sea:symbol, Country:symbol)\nIs_bordered_by(\"Sea of Japan\", \"Japan\").\nIs_bordered_by(\"Sea of Japan\", \"Russia\").\n.decl Answer()\nAnswer() :- Is_bordered_by(\"Sea of Japan\", country1), Is_bordered_by(\"Sea of Japan\", country2), country1 != country2.\n.output Answer", "completions": [".decl Is_bordered_by(Sea:symbol, Country:symbol)\nIs_bordered_by(\"Sea of Japan\", \"Japan\").\nIs_bordered_by(\"Sea of Japan\", \"Russia\").\n.decl Answer()\nAnswer() :- Is_bordered_by(\"Sea of Japan\", country1), Is_bordered_by(\"Sea of Japan\", country2), country1 != country2.\n.output Answer"]}
{"id": 1097, "answer": true, "completion": ".decl Encourages(Place:symbol, Activity:symbol)\nEncourages(\"suburbs\", \"driving\").\nEncourages(\"city\", \"public transportation\").\n.decl Answer()\nAnswer() :- Encourages(\"suburbs\", \"driving\").\n.output Answer", "completions": [".decl Encourages(Place:symbol, Activity:symbol)\nEncourages(\"suburbs\", \"driving\").\nEncourages(\"city\", \"public transportation\").\n.decl Answer()\nAnswer() :- Encourages(\"suburbs\", \"driving\").\n.output Answer"]}
{"id": 1098, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person1\", \"back pain\").\n.decl Likes_activity(Person:symbol, Activity:symbol)\nLikes_activity(\"person1\", \"picking strawberries\").\n.decl Answer()\nAnswer() :- Has_condition(person, condition), Likes_activity(person, activity), condition != \"back pain\" OR activity != \"picking strawberries\".\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person1\", \"back pain\").\n.decl Likes_activity(Person:symbol, Activity:symbol)\nLikes_activity(\"person1\", \"picking strawberries\").\n.decl Answer()\nAnswer() :- Has_condition(person, condition), Likes_activity(person, activity), condition != \"back pain\" OR activity != \"picking strawberries\".\n.output Answer"]}
{"id": 1099, "answer": true, "completion": ".decl Takes_calls(Person:symbol, Location:symbol)\nTakes_calls(\"J. Edgar Hoover\", \"Washington D.C.\").\n.decl Answer()\nAnswer() :- Takes_calls(\"J. Edgar Hoover\", location), location != \"Langley, Virginia\".\n.output Answer", "completions": [".decl Takes_calls(Person:symbol, Location:symbol)\nTakes_calls(\"J. Edgar Hoover\", \"Washington D.C.\").\n.decl Answer()\nAnswer() :- Takes_calls(\"J. Edgar Hoover\", location), location != \"Langley, Virginia\".\n.output Answer"]}
{"id": 1100, "answer": false, "completion": ".decl Wins_award(Person:symbol, Award:symbol)\nWins_award(\"Christopher Walken\", \"Academy Award\").\nWins_award(\"Christopher Walken\", \"Tony Award\").\nWins_award(\"Christopher Walken\", \"Emmy Award\").\n.decl Needs_award(Award:symbol)\nNeeds_award(\"Grammy Award\").\n.decl Answer()\nAnswer() :- Needs_award(award), not Wins_award(\"Christopher Walken\", award).\n.output Answer", "completions": [".decl Wins_award(Person:symbol, Award:symbol)\nWins_award(\"Christopher Walken\", \"Academy Award\").\nWins_award(\"Christopher Walken\", \"Tony Award\").\nWins_award(\"Christopher Walken\", \"Emmy Award\").\n.decl Needs_award(Award:symbol)\nNeeds_award(\"Grammy Award\").\n.decl Answer()\nAnswer() :- Needs_award(award), not Wins_award(\"Christopher Walken\", award).\n.output Answer"]}
{"id": 1101, "answer": false, "completion": ".decl Has_n_pins(Lane:symbol, N_pins:float)\nHas_n_pins(\"bowling alley lane\", 10).\n.decl Has_n_oscars(Person:symbol, N_oscars:float)\nHas_n_oscars(\"Dustin Hoffman\", 2).\n.decl Answer()\nAnswer() :- Has_n_pins(\"bowling alley lane\", n_pins), Has_n_oscars(\"Dustin Hoffman\", n_oscars), n_oscars >= n_pins.\n.output Answer", "completions": [".decl Has_n_pins(Lane:symbol, N_pins:float)\nHas_n_pins(\"bowling alley lane\", 10).\n.decl Has_n_oscars(Person:symbol, N_oscars:float)\nHas_n_oscars(\"Dustin Hoffman\", 2).\n.decl Answer()\nAnswer() :- Has_n_pins(\"bowling alley lane\", n_pins), Has_n_oscars(\"Dustin Hoffman\", n_oscars), n_oscars >= n_pins.\n.output Answer"]}
{"id": 1102, "answer": false, "completion": ".decl Serialized_in(Magazine:symbol, Work:symbol)\nSerialized_in(\"The Atlantic\", \"The Essential Rumi\").\nSerialized_in(\"The New Yorker\", \"The Essential Rumi\").\n.decl Answer()\nAnswer() :- Serialized_in(magazine, \"The Essential Rumi\").\n.output Answer", "completions": [".decl Serialized_in(Magazine:symbol, Work:symbol)\nSerialized_in(\"The Atlantic\", \"The Essential Rumi\").\nSerialized_in(\"The New Yorker\", \"The Essential Rumi\").\n.decl Answer()\nAnswer() :- Serialized_in(magazine, \"The Essential Rumi\").\n.output Answer"]}
{"id": 1103, "answer": true, "completion": ".decl Terrestrial_planet(Planet:symbol)\nTerrestrial_planet(\"Mercury\").\nTerrestrial_planet(\"Venus\").\nTerrestrial_planet(\"Earth\").\nTerrestrial_planet(\"Mars\").\n.decl Has_density(Planet:symbol, Density:float)\nHas_density(\"Mercury\", 5.427).\nHas_density(\"Venus\", 5.243).\nHas_density(\"Earth\", 5.52).\nHas_density(\"Mars\", 3.93).\n.decl Answer()\nAnswer() :- Terrestrial_planet(planet), Has_density(planet, density), density >= max_density.\nmax_density = max {density : Terrestrial_planet(planet), Has_density(planet, density)}.\n.output Answer", "completions": [".decl Terrestrial_planet(Planet:symbol)\nTerrestrial_planet(\"Mercury\").\nTerrestrial_planet(\"Venus\").\nTerrestrial_planet(\"Earth\").\nTerrestrial_planet(\"Mars\").\n.decl Has_density(Planet:symbol, Density:float)\nHas_density(\"Mercury\", 5.427).\nHas_density(\"Venus\", 5.243).\nHas_density(\"Earth\", 5.52).\nHas_density(\"Mars\", 3.93).\n.decl Answer()\nAnswer() :- Terrestrial_planet(planet), Has_density(planet, density), density >= max_density.\nmax_density = max {density : Terrestrial_planet(planet), Has_density(planet, density)}.\n.output Answer"]}
{"id": 1104, "answer": false, "completion": ".decl Distance(Location1:symbol, Location2:symbol, Distance:float)\nDistance(\"Stonehenge\", \"Dusseldorf\", 1000).\n.decl Answer()\nAnswer() :- Distance(\"Stonehenge\", \"Dusseldorf\", distance), distance < 500.\n.output Answer", "completions": [".decl Distance(Location1:symbol, Location2:symbol, Distance:float)\nDistance(\"Stonehenge\", \"Dusseldorf\", 1000).\n.decl Answer()\nAnswer() :- Distance(\"Stonehenge\", \"Dusseldorf\", distance), distance < 500.\n.output Answer"]}
{"id": 1105, "answer": true, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Helio Gracie\", 10).\nHas_children(\"Carlos Gracie\", 21).\n.decl Answer()\nAnswer() :- Has_children(\"Helio Gracie\", n_children1), Has_children(\"Carlos Gracie\", n_children2), n_children1 + n_children2 >= 13.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Helio Gracie\", 10).\nHas_children(\"Carlos Gracie\", 21).\n.decl Answer()\nAnswer() :- Has_children(\"Helio Gracie\", n_children1), Has_children(\"Carlos Gracie\", n_children2), n_children1 + n_children2 >= 13.\n.output Answer"]}
{"id": 1106, "answer": false, "completion": ".decl Rules(Kingdom:symbol, Ruler:symbol)\nRules(\"United Kingdom\", \"Queen Elizabeth II\").\n.decl Is_insect(Animal:symbol)\nIs_insect(\"monarch butterfly\").\n.decl Answer()\nAnswer() :- Is_insect(\"monarch butterfly\"), Rules(kingdom, \"monarch butterfly\"), kingdom != \"United Kingdom\".\n.output Answer", "completions": [".decl Rules(Kingdom:symbol, Ruler:symbol)\nRules(\"United Kingdom\", \"Queen Elizabeth II\").\n.decl Is_insect(Animal:symbol)\nIs_insect(\"monarch butterfly\").\n.decl Answer()\nAnswer() :- Is_insect(\"monarch butterfly\"), Rules(kingdom, \"monarch butterfly\"), kingdom != \"United Kingdom\".\n.output Answer"]}
{"id": 1107, "answer": false, "completion": ".decl Likes(Person1:symbol, Person2:symbol)\nLikes(\"Nicole Kidman\", \"Keith Urban\").\nLikes(\"Roman Josi\", \"Mike Fisher\").\n.decl Answer()\nAnswer() :- !Likes(\"Nicole Kidman\", \"Roman Josi\").\n.output Answer", "completions": [".decl Likes(Person1:symbol, Person2:symbol)\nLikes(\"Nicole Kidman\", \"Keith Urban\").\nLikes(\"Roman Josi\", \"Mike Fisher\").\n.decl Answer()\nAnswer() :- !Likes(\"Nicole Kidman\", \"Roman Josi\").\n.output Answer"]}
{"id": 1108, "answer": true, "completion": ".decl Has_interest(Person:symbol, Interest:symbol)\nHas_interest(\"Apollo\", \"music\").\nHas_interest(\"Baldur\", \"music\").\nHas_interest(\"Apollo\", \"poetry\").\nHas_interest(\"Baldur\", \"poetry\").\n.decl Answer()\nAnswer() :- Has_interest(\"Apollo\", interest), Has_interest(\"Baldur\", interest).\n.output Answer", "completions": [".decl Has_interest(Person:symbol, Interest:symbol)\nHas_interest(\"Apollo\", \"music\").\nHas_interest(\"Baldur\", \"music\").\nHas_interest(\"Apollo\", \"poetry\").\nHas_interest(\"Baldur\", \"poetry\").\n.decl Answer()\nAnswer() :- Has_interest(\"Apollo\", interest), Has_interest(\"Baldur\", interest).\n.output Answer"]}
{"id": 1109, "answer": true, "completion": ".decl Is_safe_to_eat(Food:symbol, Animal:symbol)\nIs_safe_to_eat(\"Snickers bar\", \"human\").\nIs_safe_to_eat(\"dog food\", \"poodle\").\n.decl Answer()\nAnswer() :- Is_safe_to_eat(\"Snickers bar\", animal), Is_safe_to_eat(food2, \"poodle\"), food2 != \"Snickers bar\".\n.output Answer", "completions": [".decl Is_safe_to_eat(Food:symbol, Animal:symbol)\nIs_safe_to_eat(\"Snickers bar\", \"human\").\nIs_safe_to_eat(\"dog food\", \"poodle\").\n.decl Answer()\nAnswer() :- Is_safe_to_eat(\"Snickers bar\", animal), Is_safe_to_eat(food2, \"poodle\"), food2 != \"Snickers bar\".\n.output Answer"]}
{"id": 1110, "answer": false, "completion": ".decl Has_activity_level(Person:symbol, Activity_level:symbol)\nHas_activity_level(\"Olympic athlete\", \"high\").\n.decl Requires_energy(Activity:symbol, Energy_level:symbol)\nRequires_energy(\"running a mile\", \"high\").\n.decl Answer()\nAnswer() :- Has_activity_level(\"Olympic athlete\", activity_level), Requires_energy(\"running a mile\", energy_level), activity_level >= energy_level.\n.output Answer", "completions": [".decl Has_activity_level(Person:symbol, Activity_level:symbol)\nHas_activity_level(\"Olympic athlete\", \"high\").\n.decl Requires_energy(Activity:symbol, Energy_level:symbol)\nRequires_energy(\"running a mile\", \"high\").\n.decl Answer()\nAnswer() :- Has_activity_level(\"Olympic athlete\", activity_level), Requires_energy(\"running a mile\", energy_level), activity_level >= energy_level.\n.output Answer"]}
{"id": 1111, "answer": true, "completion": ".decl Commends(Person:symbol, Trait:symbol)\nCommends(\"Catholic priest\", \"humility\").\n.decl Answer()\nAnswer() :- Commends(\"Catholic priest\", trait), trait != \"pride\".\n.output Answer", "completions": [".decl Commends(Person:symbol, Trait:symbol)\nCommends(\"Catholic priest\", \"humility\").\n.decl Answer()\nAnswer() :- Commends(\"Catholic priest\", trait), trait != \"pride\".\n.output Answer"]}
{"id": 1112, "answer": false, "completion": ".decl Goes_bad_first(Food_A:symbol, Food_B:symbol)\nGoes_bad_first(\"white rice\", \"sesame seeds\").\n.decl Has_shelf_life(Food:symbol, Shelf_life:float)\nHas_shelf_life(\"white rice\", 12).\nHas_shelf_life(\"sesame seeds\", 6).\n.decl Answer()\nAnswer() :- Goes_bad_first(food1, food2), Has_shelf_life(food1, shelf_life1), Has_shelf_life(food2, shelf_life2), shelf_life1 < shelf_life2.\n.output Answer", "completions": [".decl Goes_bad_first(Food_A:symbol, Food_B:symbol)\nGoes_bad_first(\"white rice\", \"sesame seeds\").\n.decl Has_shelf_life(Food:symbol, Shelf_life:float)\nHas_shelf_life(\"white rice\", 12).\nHas_shelf_life(\"sesame seeds\", 6).\n.decl Answer()\nAnswer() :- Goes_bad_first(food1, food2), Has_shelf_life(food1, shelf_life1), Has_shelf_life(food2, shelf_life2), shelf_life1 < shelf_life2.\n.output Answer"]}
{"id": 1113, "answer": true, "completion": ".decl Book_genre(Book:symbol, Genre:symbol)\nBook_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nBook_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nBook_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nBook_genre(\"Harry Potter and the Goblet of Fire\", \"fantasy\").\nBook_genre(\"Harry Potter and the Order of Phoenix\", \"fantasy\").\nBook_genre(\"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nBook_genre(\"Harry Potter and the Deathly Hallows\", \"fantasy\").\n.decl Best_seller(Book:symbol)\nBest_seller(\"Harry Potter and the Philosopher's Stone\").\nBest_seller(\"Harry Potter and the Chamber of Secrets\").\nBest_seller(\"Harry Potter and the Prisoner of Azkaban\").\nBest_seller(\"Harry Potter and the Goblet of Fire\").\nBest_seller(\"Harry Potter and the Order of Phoenix\").\nBest_seller(\"Harry Potter and the Half-Blood Prince\").\nBest_seller(\"Harry Potter and the Deathly Hallows\").\n.decl Answer()\nAnswer() :- Best_seller(book), Book_genre(book, \"fantasy\").\n.output Answer", "completions": [".decl Book_genre(Book:symbol, Genre:symbol)\nBook_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nBook_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nBook_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nBook_genre(\"Harry Potter and the Goblet of Fire\", \"fantasy\").\nBook_genre(\"Harry Potter and the Order of Phoenix\", \"fantasy\").\nBook_genre(\"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nBook_genre(\"Harry Potter and the Deathly Hallows\", \"fantasy\").\n.decl Best_seller(Book:symbol)\nBest_seller(\"Harry Potter and the Philosopher's Stone\").\nBest_seller(\"Harry Potter and the Chamber of Secrets\").\nBest_seller(\"Harry Potter and the Prisoner of Azkaban\").\nBest_seller(\"Harry Potter and the Goblet of Fire\").\nBest_seller(\"Harry Potter and the Order of Phoenix\").\nBest_seller(\"Harry Potter and the Half-Blood Prince\").\nBest_seller(\"Harry Potter and the Deathly Hallows\").\n.decl Answer()\nAnswer() :- Best_seller(book), Book_genre(book, \"fantasy\").\n.output Answer"]}
{"id": 1114, "answer": false, "completion": ".decl Is_east_of(City_A:symbol, City_B:symbol)\nIs_east_of(\"Paris\", \"Berlin\").\n.decl Answer()\nAnswer() :- Is_east_of(\"Bern\", city), Is_east_of(city, \"Paris\").\n.output Answer", "completions": [".decl Is_east_of(City_A:symbol, City_B:symbol)\nIs_east_of(\"Paris\", \"Berlin\").\n.decl Answer()\nAnswer() :- Is_east_of(\"Bern\", city), Is_east_of(city, \"Paris\").\n.output Answer"]}
{"id": 1115, "answer": false, "completion": ".decl Belongs_to_religious_sect(Person:symbol, Sect:symbol)\nBelongs_to_religious_sect(\"Al-Farabi\", \"Islamic philosophy\").\nBelongs_to_religious_sect(\"ISIS\", \"Salafi jihadism\").\n.decl Answer()\nAnswer() :- Belongs_to_religious_sect(\"Al-Farabi\", sect), Belongs_to_religious_sect(\"ISIS\", sect).\n.output Answer", "completions": [".decl Belongs_to_religious_sect(Person:symbol, Sect:symbol)\nBelongs_to_religious_sect(\"Al-Farabi\", \"Islamic philosophy\").\nBelongs_to_religious_sect(\"ISIS\", \"Salafi jihadism\").\n.decl Answer()\nAnswer() :- Belongs_to_religious_sect(\"Al-Farabi\", sect), Belongs_to_religious_sect(\"ISIS\", sect).\n.output Answer"]}
{"id": 1116, "answer": false, "completion": ".decl Habitat(Bird:symbol, Location:symbol)\nHabitat(\"mollymawk\", \"southern hemisphere\").\nHabitat(\"albatross\", \"northern hemisphere\").\n.decl Answer()\nAnswer() :- Habitat(\"mollymawk\", location), !Habitat(\"albatross\", location).\n.output Answer", "completions": [".decl Habitat(Bird:symbol, Location:symbol)\nHabitat(\"mollymawk\", \"southern hemisphere\").\nHabitat(\"albatross\", \"northern hemisphere\").\n.decl Answer()\nAnswer() :- Habitat(\"mollymawk\", location), !Habitat(\"albatross\", location).\n.output Answer"]}
{"id": 1117, "answer": false, "completion": ".decl Grinds(Spice_grinder:symbol, Spice:symbol)\nGrinds(\"spice grinder 1\", \"cinnamon sticks\").\nGrinds(\"spice grinder 2\", \"nutmeg\").\n.decl Has_price(Spice:symbol, Price:float)\nHas_price(\"cinnamon sticks\", 2.5).\nHas_price(\"nutmeg\", 3.0).\n.decl Answer()\nAnswer() :- Grinds(spice_grinder, \"cinnamon sticks\"), Has_price(\"cinnamon sticks\", price1), Has_price(spice, price2), price1 <= price2.\nAnswer() :- !Grinds(spice_grinder, \"cinnamon sticks\").\n.output Answer", "completions": [".decl Grinds(Spice_grinder:symbol, Spice:symbol)\nGrinds(\"spice grinder 1\", \"cinnamon sticks\").\nGrinds(\"spice grinder 2\", \"nutmeg\").\n.decl Has_price(Spice:symbol, Price:float)\nHas_price(\"cinnamon sticks\", 2.5).\nHas_price(\"nutmeg\", 3.0).\n.decl Answer()\nAnswer() :- Grinds(spice_grinder, \"cinnamon sticks\"), Has_price(\"cinnamon sticks\", price1), Has_price(spice, price2), price1 <= price2.\nAnswer() :- !Grinds(spice_grinder, \"cinnamon sticks\").\n.output Answer"]}
{"id": 1118, "answer": false, "completion": ".decl Contains(Ingredient:symbol, Product:symbol)\nContains(\"Carolina Reaper\", \"hot sauce\").\nContains(\"hot sauce\", \"salsa\").\n.decl Sales(Product:symbol, Sales:float)\nSales(\"salsa\", 100).\nSales(\"hot sauce\", 50).\n.decl Answer()\nAnswer() :- Contains(\"Carolina Reaper\", ingredient), Contains(ingredient, \"salsa\"), Sales(\"salsa\", sales1), Sales(\"hot sauce\", sales2), sales1 > sales2.\n.output Answer", "completions": [".decl Contains(Ingredient:symbol, Product:symbol)\nContains(\"Carolina Reaper\", \"hot sauce\").\nContains(\"hot sauce\", \"salsa\").\n.decl Sales(Product:symbol, Sales:float)\nSales(\"salsa\", 100).\nSales(\"hot sauce\", 50).\n.decl Answer()\nAnswer() :- Contains(\"Carolina Reaper\", ingredient), Contains(ingredient, \"salsa\"), Sales(\"salsa\", sales1), Sales(\"hot sauce\", sales2), sales1 > sales2.\n.output Answer"]}
{"id": 1119, "answer": false, "completion": ".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Japan Airlines\", \"China\").\nFlies_to(\"Japan Airlines\", \"South Korea\").\nFlies_to(\"Japan Airlines\", \"United States\").\nFlies_to(\"Japan Airlines\", \"Germany\").\nFlies_to(\"Japan Airlines\", \"Italy\").\nFlies_to(\"Japan Airlines\", \"Japan\").\n.decl Former_Axis_Power(Country:symbol)\nFormer_Axis_Power(\"Germany\").\nFormer_Axis_Power(\"Italy\").\nFormer_Axis_Power(\"Japan\").\n.decl Answer()\nAnswer() :- Flies_to(\"Japan Airlines\", destination), Former_Axis_Power(destination).\n.output Answer", "completions": [".decl Flies_to(Airline:symbol, Destination:symbol)\nFlies_to(\"Japan Airlines\", \"China\").\nFlies_to(\"Japan Airlines\", \"South Korea\").\nFlies_to(\"Japan Airlines\", \"United States\").\nFlies_to(\"Japan Airlines\", \"Germany\").\nFlies_to(\"Japan Airlines\", \"Italy\").\nFlies_to(\"Japan Airlines\", \"Japan\").\n.decl Former_Axis_Power(Country:symbol)\nFormer_Axis_Power(\"Germany\").\nFormer_Axis_Power(\"Italy\").\nFormer_Axis_Power(\"Japan\").\n.decl Answer()\nAnswer() :- Flies_to(\"Japan Airlines\", destination), Former_Axis_Power(destination).\n.output Answer"]}
{"id": 1120, "answer": true, "completion": ".decl Soaks_in(Person:symbol, Liquid:symbol)\nSoaks_in(\"Mediterranean people\", \"olive oil\").\nSoaks_in(\"Mediterranean people\", \"water\").\n.decl Answer()\nAnswer() :- Soaks_in(person, \"olive oil\"), Soaks_in(person, \"water\").\n.output Answer", "completions": [".decl Soaks_in(Person:symbol, Liquid:symbol)\nSoaks_in(\"Mediterranean people\", \"olive oil\").\nSoaks_in(\"Mediterranean people\", \"water\").\n.decl Answer()\nAnswer() :- Soaks_in(person, \"olive oil\"), Soaks_in(person, \"water\").\n.output Answer"]}
{"id": 1121, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"nymph tick\", 0.5).\nHas_size(\"hole punch\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"nymph tick\", size1), Has_size(\"hole punch\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"nymph tick\", 0.5).\nHas_size(\"hole punch\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"nymph tick\", size1), Has_size(\"hole punch\", size2), size1 < size2.\n.output Answer"]}
{"id": 1122, "answer": true, "completion": ".decl Operates(Company:symbol, Vehicle:symbol, Wheels:float)\nOperates(\"Amtrak\", \"train\", 8).\nOperates(\"Amtrak\", \"bus\", 4).\n.decl Answer()\nAnswer() :- Operates(\"Amtrak\", vehicle, wheels), wheels = 4.\n.output Answer", "completions": [".decl Operates(Company:symbol, Vehicle:symbol, Wheels:float)\nOperates(\"Amtrak\", \"train\", 8).\nOperates(\"Amtrak\", \"bus\", 4).\n.decl Answer()\nAnswer() :- Operates(\"Amtrak\", vehicle, wheels), wheels = 4.\n.output Answer"]}
{"id": 1123, "answer": false, "completion": ".decl Alphabet_position(Letter:symbol, Position:float)\nAlphabet_position(\"B\", 2).\n.decl Total_eclipses(Year:float, Total:float)\nTotal_eclipses(2008, 2).\n.decl Answer()\nAnswer() :- Alphabet_position(\"B\", position), Total_eclipses(2008, total), position > total.\n.output Answer", "completions": [".decl Alphabet_position(Letter:symbol, Position:float)\nAlphabet_position(\"B\", 2).\n.decl Total_eclipses(Year:float, Total:float)\nTotal_eclipses(2008, 2).\n.decl Answer()\nAnswer() :- Alphabet_position(\"B\", position), Total_eclipses(2008, total), position > total.\n.output Answer"]}
{"id": 1124, "answer": false, "completion": ".decl Active_in_season(Animal:symbol, Season:symbol)\nActive_in_season(\"sun bear\", \"summer\").\n.decl Answer()\nAnswer() :- Active_in_season(\"sun bear\", season), season != \"winter\".\n.output Answer", "completions": [".decl Active_in_season(Animal:symbol, Season:symbol)\nActive_in_season(\"sun bear\", \"summer\").\n.decl Answer()\nAnswer() :- Active_in_season(\"sun bear\", season), season != \"winter\".\n.output Answer"]}
{"id": 1125, "answer": true, "completion": ".decl Puts_on_tongue(Person:symbol, Object:symbol)\nPuts_on_tongue(\"Osama bin Laden\", \"wafer\").\n.decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Sunday\", \"weekend\").\n.decl Answer()\nAnswer() :- Puts_on_tongue(\"Osama bin Laden\", object), Happens_on_day(\"Sunday\", day).\n.output Answer\n\n// Note: This question is inappropriate and offensive. We do not condone or support any form of hate speech or discrimination.", "completions": [".decl Puts_on_tongue(Person:symbol, Object:symbol)\nPuts_on_tongue(\"Osama bin Laden\", \"wafer\").\n.decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Sunday\", \"weekend\").\n.decl Answer()\nAnswer() :- Puts_on_tongue(\"Osama bin Laden\", object), Happens_on_day(\"Sunday\", day).\n.output Answer\n\n// Note: This question is inappropriate and offensive. We do not condone or support any form of hate speech or discrimination."]}
{"id": 1126, "answer": false, "completion": ".decl Military_power(Nation:symbol, Power:float)\nMilitary_power(\"Brazil\", 0.01).\nMilitary_power(\"Rome\", 1).\n.decl Fought_in_battle(Nation:symbol, Battle:symbol)\nFought_in_battle(\"Brazil\", \"Battle of Actium\").\nFought_in_battle(\"Rome\", \"Battle of Actium\").\n.decl Answer()\nAnswer() :- Fought_in_battle(\"Brazil\", \"Battle of Actium\"), Military_power(\"Brazil\", power1), Military_power(\"Rome\", power2), power1 >= power2.\n.output Answer", "completions": [".decl Military_power(Nation:symbol, Power:float)\nMilitary_power(\"Brazil\", 0.01).\nMilitary_power(\"Rome\", 1).\n.decl Fought_in_battle(Nation:symbol, Battle:symbol)\nFought_in_battle(\"Brazil\", \"Battle of Actium\").\nFought_in_battle(\"Rome\", \"Battle of Actium\").\n.decl Answer()\nAnswer() :- Fought_in_battle(\"Brazil\", \"Battle of Actium\"), Military_power(\"Brazil\", power1), Military_power(\"Rome\", power2), power1 >= power2.\n.output Answer"]}
{"id": 1127, "answer": true, "completion": ".decl Believes_in(Philosopher:symbol, Philosophy:symbol)\nBelieves_in(\"Plato\", \"Platonism\").\n.decl Originated_in(Philosophy:symbol, Origin:symbol)\nOriginated_in(\"Jainism\", \"India\").\n.decl Answer()\nAnswer() :- Believes_in(\"Plato\", philosophy1), Originated_in(\"Jainism\", origin), philosophy1 != origin.\n.output Answer", "completions": [".decl Believes_in(Philosopher:symbol, Philosophy:symbol)\nBelieves_in(\"Plato\", \"Platonism\").\n.decl Originated_in(Philosophy:symbol, Origin:symbol)\nOriginated_in(\"Jainism\", \"India\").\n.decl Answer()\nAnswer() :- Believes_in(\"Plato\", philosophy1), Originated_in(\"Jainism\", origin), philosophy1 != origin.\n.output Answer"]}
{"id": 1128, "answer": false, "completion": ".decl Likes(Character:symbol, Item:symbol)\nLikes(\"Goofy\", \"bones\").\n.decl Made_of(Material:symbol, Item:symbol)\nMade_of(\"Nylabone\", \"nylon\").\n.decl Answer()\nAnswer() :- Likes(character, item), Made_of(item, material), material = \"nylon\".\n.output Answer", "completions": [".decl Likes(Character:symbol, Item:symbol)\nLikes(\"Goofy\", \"bones\").\n.decl Made_of(Material:symbol, Item:symbol)\nMade_of(\"Nylabone\", \"nylon\").\n.decl Answer()\nAnswer() :- Likes(character, item), Made_of(item, material), material = \"nylon\".\n.output Answer"]}
{"id": 1129, "answer": false, "completion": ".decl Eliminates(Bloodline:symbol)\nEliminates(\"Mary, Queen of Scots\").\n.decl Conspires(Person:symbol, Event:symbol)\nConspires(\"Guy Fawkes\", \"Gunpowder plot\").\nConspires(\"Robert Catesby\", \"Gunpowder plot\").\n.decl Answer()\nAnswer() :- Conspires(person, \"Gunpowder plot\"), Eliminates(bloodline), person != \"Mary, Queen of Scots\".\n.output Answer", "completions": [".decl Eliminates(Bloodline:symbol)\nEliminates(\"Mary, Queen of Scots\").\n.decl Conspires(Person:symbol, Event:symbol)\nConspires(\"Guy Fawkes\", \"Gunpowder plot\").\nConspires(\"Robert Catesby\", \"Gunpowder plot\").\n.decl Answer()\nAnswer() :- Conspires(person, \"Gunpowder plot\"), Eliminates(bloodline), person != \"Mary, Queen of Scots\".\n.output Answer"]}
{"id": 1130, "answer": false, "completion": ".decl Produced_by(Person:symbol, Movie:symbol)\nProduced_by(\"James Cameron\", \"Titanic\").\n.decl Leader_of(Country:symbol, Leader:symbol)\nLeader_of(\"China\", \"Xi Jinping\").\n.decl Answer()\nAnswer() :- Produced_by(\"James Cameron\", \"Titanic\"), !Leader_of(\"China\", \"Paramount leader\").\nAnswer() :- Leader_of(\"China\", \"Paramount leader\"), !Produced_by(\"James Cameron\", \"Titanic\").\n.output Answer", "completions": [".decl Produced_by(Person:symbol, Movie:symbol)\nProduced_by(\"James Cameron\", \"Titanic\").\n.decl Leader_of(Country:symbol, Leader:symbol)\nLeader_of(\"China\", \"Xi Jinping\").\n.decl Answer()\nAnswer() :- Produced_by(\"James Cameron\", \"Titanic\"), !Leader_of(\"China\", \"Paramount leader\").\nAnswer() :- Leader_of(\"China\", \"Paramount leader\"), !Produced_by(\"James Cameron\", \"Titanic\").\n.output Answer"]}
{"id": 1131, "answer": true, "completion": ".decl Found_in_section(Item:symbol, Section:symbol)\nFound_in_section(\"parsley\", \"produce\").\nFound_in_section(\"parsley\", \"spices\").\nFound_in_section(\"parsley\", \"herbs\").\n.decl Answer()\nAnswer() :- Found_in_section(\"parsley\", section1), Found_in_section(\"parsley\", section2), section1 != section2.\n.output Answer", "completions": [".decl Found_in_section(Item:symbol, Section:symbol)\nFound_in_section(\"parsley\", \"produce\").\nFound_in_section(\"parsley\", \"spices\").\nFound_in_section(\"parsley\", \"herbs\").\n.decl Answer()\nAnswer() :- Found_in_section(\"parsley\", section1), Found_in_section(\"parsley\", section2), section1 != section2.\n.output Answer"]}
{"id": 1132, "answer": true, "completion": ".decl Thrives_in(Environment:symbol, Plant:symbol)\nThrives_in(\"wetlands\", \"Spartina Patens\").\n.decl Answer()\nAnswer() :- Thrives_in(environment, \"Spartina Patens\"), environment != \"Sahara Desert\".\n.output Answer", "completions": [".decl Thrives_in(Environment:symbol, Plant:symbol)\nThrives_in(\"wetlands\", \"Spartina Patens\").\n.decl Answer()\nAnswer() :- Thrives_in(environment, \"Spartina Patens\"), environment != \"Sahara Desert\".\n.output Answer"]}
{"id": 1133, "answer": false, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Jackie Chan\", \"Cantonese\").\n.decl Knows_sign_language(Person:symbol)\nKnows_sign_language(\"deaf person\").\n.decl Answer()\nAnswer() :- Speaks_language(\"Jackie Chan\", language), !Knows_sign_language(\"deaf person\"), language != \"sign language\".\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Jackie Chan\", \"Cantonese\").\n.decl Knows_sign_language(Person:symbol)\nKnows_sign_language(\"deaf person\").\n.decl Answer()\nAnswer() :- Speaks_language(\"Jackie Chan\", language), !Knows_sign_language(\"deaf person\"), language != \"sign language\".\n.output Answer"]}
{"id": 1134, "answer": true, "completion": ".decl Contains_material(Product:symbol, Material:symbol)\nContains_material(\"beeswax wrap\", \"beeswax\").\nContains_material(\"beeswax wrap\", \"cotton fabric\").\nContains_material(\"silicone wrap\", \"silicone\").\nContains_material(\"silicone wrap\", \"plastic\").\n.decl Answer()\nAnswer() :- Contains_material(product, material), material != \"plastic\", Contains_material(product, \"plastic\").\n.output Answer", "completions": [".decl Contains_material(Product:symbol, Material:symbol)\nContains_material(\"beeswax wrap\", \"beeswax\").\nContains_material(\"beeswax wrap\", \"cotton fabric\").\nContains_material(\"silicone wrap\", \"silicone\").\nContains_material(\"silicone wrap\", \"plastic\").\n.decl Answer()\nAnswer() :- Contains_material(product, material), material != \"plastic\", Contains_material(product, \"plastic\").\n.output Answer"]}
{"id": 1135, "answer": true, "completion": ".decl Climbs_Mountain(Person:symbol, Mountain:symbol)\nClimbs_Mountain(\"Kami Rita\", \"Mount Everest\").\n.decl Mountain_Height(Mountain:symbol, Height:float)\nMountain_Height(\"Mount Everest\", 8848).\nMountain_Height(\"Mount Emei\", 3099).\n.decl Answer()\nAnswer() :- Climbs_Mountain(\"Kami Rita\", mountain1), Mountain_Height(mountain1, height1), Mountain_Height(\"Mount Emei\", height2), height1 > height2.\n.output Answer", "completions": [".decl Climbs_Mountain(Person:symbol, Mountain:symbol)\nClimbs_Mountain(\"Kami Rita\", \"Mount Everest\").\n.decl Mountain_Height(Mountain:symbol, Height:float)\nMountain_Height(\"Mount Everest\", 8848).\nMountain_Height(\"Mount Emei\", 3099).\n.decl Answer()\nAnswer() :- Climbs_Mountain(\"Kami Rita\", mountain1), Mountain_Height(mountain1, height1), Mountain_Height(\"Mount Emei\", height2), height1 > height2.\n.output Answer"]}
{"id": 1136, "answer": false, "completion": ".decl Alive_in_year(Person:symbol, Year:float)\nAlive_in_year(\"Nancy Pelosi\", 1941).\n.decl Answer()\nAnswer() :- Alive_in_year(\"Nancy Pelosi\", year1), year1 <= 1941.\n.output Answer", "completions": [".decl Alive_in_year(Person:symbol, Year:float)\nAlive_in_year(\"Nancy Pelosi\", 1941).\n.decl Answer()\nAnswer() :- Alive_in_year(\"Nancy Pelosi\", year1), year1 <= 1941.\n.output Answer"]}
{"id": 1137, "answer": true, "completion": ".decl Has_num_commas(Number:symbol, Num_commas:float)\nHas_num_commas(\"US 2018 GDP\", 2).\n.decl Answer()\nAnswer() :- Has_num_commas(\"US 2018 GDP\", num_commas), num_commas >= 3.\n.output Answer", "completions": [".decl Has_num_commas(Number:symbol, Num_commas:float)\nHas_num_commas(\"US 2018 GDP\", 2).\n.decl Answer()\nAnswer() :- Has_num_commas(\"US 2018 GDP\", num_commas), num_commas >= 3.\n.output Answer"]}
{"id": 1138, "answer": true, "completion": ".decl Is_expensive(Tailor:symbol)\nIs_expensive(\"expensive tailor\").\n.decl Uses_method(Tailor:symbol, Method:symbol)\nUses_method(\"expensive tailor\", \"sewing\").\nUses_method(\"cheap tailor\", \"adhesive\").\n.decl Shortens_clothing(Tailor:symbol, Clothing:symbol)\nShortens_clothing(\"expensive tailor\", \"slacks\").\n.decl Answer()\nAnswer() :- Is_expensive(tailor), Shortens_clothing(tailor, clothing), Uses_method(tailor, method), method != \"adhesive\".\n.output Answer", "completions": [".decl Is_expensive(Tailor:symbol)\nIs_expensive(\"expensive tailor\").\n.decl Uses_method(Tailor:symbol, Method:symbol)\nUses_method(\"expensive tailor\", \"sewing\").\nUses_method(\"cheap tailor\", \"adhesive\").\n.decl Shortens_clothing(Tailor:symbol, Clothing:symbol)\nShortens_clothing(\"expensive tailor\", \"slacks\").\n.decl Answer()\nAnswer() :- Is_expensive(tailor), Shortens_clothing(tailor, clothing), Uses_method(tailor, method), method != \"adhesive\".\n.output Answer"]}
{"id": 1139, "answer": false, "completion": ".decl Feels_emotion(Animal:symbol, Emotion:symbol)\nFeels_emotion(\"human\", \"disgust\").\nFeels_emotion(\"frog\", \"fear\").\n.decl Answer()\nAnswer() :- Feels_emotion(\"frog\", \"disgust\"), !Feels_emotion(\"frog\", \"fear\").\n.output Answer", "completions": [".decl Feels_emotion(Animal:symbol, Emotion:symbol)\nFeels_emotion(\"human\", \"disgust\").\nFeels_emotion(\"frog\", \"fear\").\n.decl Answer()\nAnswer() :- Feels_emotion(\"frog\", \"disgust\"), !Feels_emotion(\"frog\", \"fear\").\n.output Answer"]}
{"id": 1140, "answer": false, "completion": ".decl Safe_profession(Profession:symbol)\nSafe_profession(\"clerk of Supreme Court of Canada\").\n.decl Causes_fear(Phobia:symbol, Object:symbol)\nCauses_fear(\"seismophobia\", \"earthquakes\").\n.decl Answer()\nAnswer() :- Safe_profession(profession), !Causes_fear(\"seismophobia\", object).\n.output Answer", "completions": [".decl Safe_profession(Profession:symbol)\nSafe_profession(\"clerk of Supreme Court of Canada\").\n.decl Causes_fear(Phobia:symbol, Object:symbol)\nCauses_fear(\"seismophobia\", \"earthquakes\").\n.decl Answer()\nAnswer() :- Safe_profession(profession), !Causes_fear(\"seismophobia\", object).\n.output Answer"]}
{"id": 1141, "answer": false, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"screwdriver\").\n.decl Has_zodiac_sign(Symbol:symbol, Sign:symbol)\nHas_zodiac_sign(\"Libra\", \"scales\").\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"zodiac sign symbol release\", \"September\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", item), Happens_in_month(\"zodiac sign symbol release\", month), Has_zodiac_sign(month, sign), Item = sign.\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"screwdriver\").\n.decl Has_zodiac_sign(Symbol:symbol, Sign:symbol)\nHas_zodiac_sign(\"Libra\", \"scales\").\n.decl Happens_in_month(Event:symbol, Month:symbol)\nHappens_in_month(\"zodiac sign symbol release\", \"September\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", item), Happens_in_month(\"zodiac sign symbol release\", month), Has_zodiac_sign(month, sign), Item = sign.\n.output Answer"]}
{"id": 1142, "answer": false, "completion": ".decl Sells(Food:symbol, Place:symbol)\nSells(\"olives\", \"heladeria\").\n.decl Answer()\nAnswer() :- Sells(\"olives\", place).\n.output Answer", "completions": [".decl Sells(Food:symbol, Place:symbol)\nSells(\"olives\", \"heladeria\").\n.decl Answer()\nAnswer() :- Sells(\"olives\", place).\n.output Answer"]}
{"id": 1143, "answer": false, "completion": ".decl Born_in(Person:symbol, City:symbol)\nBorn_in(\"Al Capone\", \"Brooklyn\").\n.decl Died_in(Person:symbol, City:symbol)\nDied_in(\"Al Capone\", \"Palm Island\").\n.decl Wrote_works(Person:symbol, Movement:symbol)\nWrote_works(\"Langston Hughes\", \"Harlem Renaissance\").\n.decl Answer()\nAnswer() :- Born_in(\"Al Capone\", city1), Died_in(\"Al Capone\", city2), Wrote_works(person2, \"Harlem Renaissance\"), city1 != city2.\n.output Answer", "completions": [".decl Born_in(Person:symbol, City:symbol)\nBorn_in(\"Al Capone\", \"Brooklyn\").\n.decl Died_in(Person:symbol, City:symbol)\nDied_in(\"Al Capone\", \"Palm Island\").\n.decl Wrote_works(Person:symbol, Movement:symbol)\nWrote_works(\"Langston Hughes\", \"Harlem Renaissance\").\n.decl Answer()\nAnswer() :- Born_in(\"Al Capone\", city1), Died_in(\"Al Capone\", city2), Wrote_works(person2, \"Harlem Renaissance\"), city1 != city2.\n.output Answer"]}
{"id": 1144, "answer": true, "completion": ".decl Is_governor(Person:symbol, State:symbol)\nIs_governor(\"Chris Christie\", \"New Jersey\").\n.decl Weighs(Person:symbol, Weight:float)\nWeighs(\"Chris Christie\", 300).\nWeighs(\"William Howard Taft\", 340).\nWeighs(\"Teddy Roosevelt\", 240).\n.decl Answer()\nAnswer() :- Is_governor(person, \"New Jersey\"), Weighs(person, weight1), Weighs(\"William Howard Taft\", weight2), weight1 >= weight2.\n.output Answer", "completions": [".decl Is_governor(Person:symbol, State:symbol)\nIs_governor(\"Chris Christie\", \"New Jersey\").\n.decl Weighs(Person:symbol, Weight:float)\nWeighs(\"Chris Christie\", 300).\nWeighs(\"William Howard Taft\", 340).\nWeighs(\"Teddy Roosevelt\", 240).\n.decl Answer()\nAnswer() :- Is_governor(person, \"New Jersey\"), Weighs(person, weight1), Weighs(\"William Howard Taft\", weight2), weight1 >= weight2.\n.output Answer"]}
{"id": 1145, "answer": false, "completion": ".decl Amendment(number:float, text:symbol)\nAmendment(8, \"Excessive bail shall not be required, nor excessive fines imposed, nor cruel and unusual punishments inflicted.\").\n.decl Answer()\nAnswer() :- Amendment(8, text), !text.contains(\"cruel and unusual punishments inflicted\").\n.output Answer", "completions": [".decl Amendment(number:float, text:symbol)\nAmendment(8, \"Excessive bail shall not be required, nor excessive fines imposed, nor cruel and unusual punishments inflicted.\").\n.decl Answer()\nAnswer() :- Amendment(8, text), !text.contains(\"cruel and unusual punishments inflicted\").\n.output Answer"]}
{"id": 1146, "answer": true, "completion": ".decl Watched(Person:symbol, Show:symbol)\nWatched(\"Gandhi\", \"Bonanza\").\n.decl Answer()\nAnswer() :- Watched(\"Gandhi\", \"Bonanza\").\n.output Answer", "completions": [".decl Watched(Person:symbol, Show:symbol)\nWatched(\"Gandhi\", \"Bonanza\").\n.decl Answer()\nAnswer() :- Watched(\"Gandhi\", \"Bonanza\").\n.output Answer"]}
{"id": 1147, "answer": true, "completion": ".decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 67.41).\n.decl Has_casualties(War:symbol, Casualties:float)\nHas_casualties(\"World War II\", 70000000).\n.decl Answer()\nAnswer() :- Has_casualties(war, casualties), Has_population(\"France\", population), casualties >= population.\n.output Answer", "completions": [".decl Has_population(Country:symbol, Population:float)\nHas_population(\"France\", 67.41).\n.decl Has_casualties(War:symbol, Casualties:float)\nHas_casualties(\"World War II\", 70000000).\n.decl Answer()\nAnswer() :- Has_casualties(war, casualties), Has_population(\"France\", population), casualties >= population.\n.output Answer"]}
{"id": 1148, "answer": true, "completion": ".decl Is_greater_than(X:float, Y:float)\nIs_greater_than(X, Y) :- X > Y.\n.decl Answer()\nAnswer() :- Is_greater_than(3.14159265359, sqrt(5)).\n.output Answer", "completions": [".decl Is_greater_than(X:float, Y:float)\nIs_greater_than(X, Y) :- X > Y.\n.decl Answer()\nAnswer() :- Is_greater_than(3.14159265359, sqrt(5)).\n.output Answer"]}
{"id": 1149, "answer": false, "completion": ".decl Published(Book:symbol, Year:float)\nPublished(\"Harry Potter and the Philosopher's Stone\", 1997).\n.decl In_time_period(Year:float, Time_period:symbol)\nIn_time_period(1997, \"modern\").\nIn_time_period(1929, \"great depression\").\n.decl Answer()\nAnswer() :- Published(\"Harry Potter and the Philosopher's Stone\", year), In_time_period(year, time_period), time_period != \"great depression\".\n.output Answer", "completions": [".decl Published(Book:symbol, Year:float)\nPublished(\"Harry Potter and the Philosopher's Stone\", 1997).\n.decl In_time_period(Year:float, Time_period:symbol)\nIn_time_period(1997, \"modern\").\nIn_time_period(1929, \"great depression\").\n.decl Answer()\nAnswer() :- Published(\"Harry Potter and the Philosopher's Stone\", year), In_time_period(year, time_period), time_period != \"great depression\".\n.output Answer"]}
{"id": 1150, "answer": false, "completion": ".decl Uses_numeral_system(Organization:symbol, Numeral_system:symbol)\nUses_numeral_system(\"FDA\", \"Arabic\").\n.decl Answer()\nAnswer() :- Uses_numeral_system(\"FDA\", numeral_system), numeral_system != \"Roman\".\n.output Answer", "completions": [".decl Uses_numeral_system(Organization:symbol, Numeral_system:symbol)\nUses_numeral_system(\"FDA\", \"Arabic\").\n.decl Answer()\nAnswer() :- Uses_numeral_system(\"FDA\", numeral_system), numeral_system != \"Roman\".\n.output Answer"]}
{"id": 1151, "answer": false, "completion": ".decl Has_concern(Species:symbol, Concern:symbol)\nHas_concern(\"bumblebee\", \"flower pollination\").\nHas_concern(\"spider\", \"spider veins\").\n.decl Answer()\nAnswer() :- Has_concern(\"bumblebee\", concern), !Has_concern(\"spider\", concern).\n.output Answer", "completions": [".decl Has_concern(Species:symbol, Concern:symbol)\nHas_concern(\"bumblebee\", \"flower pollination\").\nHas_concern(\"spider\", \"spider veins\").\n.decl Answer()\nAnswer() :- Has_concern(\"bumblebee\", concern), !Has_concern(\"spider\", concern).\n.output Answer"]}
{"id": 1152, "answer": true, "completion": ".decl Originates_from(Word:symbol, Place:symbol)\nOriginates_from(\"narcissism\", \"Greek\").\n.decl Is_rare(Place:symbol)\nIs_rare(\"Greek\").\n.decl Is_modern(Word:symbol)\nIs_modern(\"narcissism\").\n.decl Answer()\nAnswer() :- Originates_from(word, place), Is_rare(place), Is_modern(word).\n.output Answer", "completions": [".decl Originates_from(Word:symbol, Place:symbol)\nOriginates_from(\"narcissism\", \"Greek\").\n.decl Is_rare(Place:symbol)\nIs_rare(\"Greek\").\n.decl Is_modern(Word:symbol)\nIs_modern(\"narcissism\").\n.decl Answer()\nAnswer() :- Originates_from(word, place), Is_rare(place), Is_modern(word).\n.output Answer"]}
{"id": 1153, "answer": true, "completion": ".decl Prioritizes(Subject:symbol, Priority:symbol)\nPrioritizes(\"art\", \"low\").\nPrioritizes(\"math\", \"high\").\nPrioritizes(\"science\", \"high\").\n.decl Answer()\nAnswer() :- Prioritizes(\"art\", priority), priority = \"low\".\n.output Answer", "completions": [".decl Prioritizes(Subject:symbol, Priority:symbol)\nPrioritizes(\"art\", \"low\").\nPrioritizes(\"math\", \"high\").\nPrioritizes(\"science\", \"high\").\n.decl Answer()\nAnswer() :- Prioritizes(\"art\", priority), priority = \"low\".\n.output Answer"]}
{"id": 1154, "answer": true, "completion": ".decl Prevented_by(Event:symbol, Factor:symbol)\nPrevented_by(\"mummification in the Andes\", \"rainfall\").\n.decl Answer()\nAnswer() :- Prevented_by(\"mummification in the Andes\", factor).\n.output Answer", "completions": [".decl Prevented_by(Event:symbol, Factor:symbol)\nPrevented_by(\"mummification in the Andes\", \"rainfall\").\n.decl Answer()\nAnswer() :- Prevented_by(\"mummification in the Andes\", factor).\n.output Answer"]}
{"id": 1155, "answer": true, "completion": ".decl Located_in(City:symbol, Company:symbol)\nLocated_in(\"Seoul\", \"LG Electronics\").\n.decl Has_official_bird(City:symbol, Bird:symbol)\nHas_official_bird(\"Baltimore\", \"Baltimore Oriole\").\nHas_official_bird(\"Peoria\", \"Greater Prairie Chicken\").\nHas_official_bird(\"Salt Lake City\", \"California Gull\").\nHas_official_bird(\"Seattle\", \"Northern Flicker\").\nHas_official_bird(\"Vancouver\", \"Anna's Hummingbird\").\nHas_official_bird(\"Victoria\", \"Anna's Hummingbird\").\nHas_official_bird(\"Winnipeg\", \"Great Gray Owl\").\nHas_official_bird(\"Worcester\", \"European Starling\").\n.decl Answer()\nAnswer() :- Located_in(city, \"LG Electronics\"), Has_official_bird(city, bird), bird = \"Anna's Hummingbird\".\n.output Answer", "completions": [".decl Located_in(City:symbol, Company:symbol)\nLocated_in(\"Seoul\", \"LG Electronics\").\n.decl Has_official_bird(City:symbol, Bird:symbol)\nHas_official_bird(\"Baltimore\", \"Baltimore Oriole\").\nHas_official_bird(\"Peoria\", \"Greater Prairie Chicken\").\nHas_official_bird(\"Salt Lake City\", \"California Gull\").\nHas_official_bird(\"Seattle\", \"Northern Flicker\").\nHas_official_bird(\"Vancouver\", \"Anna's Hummingbird\").\nHas_official_bird(\"Victoria\", \"Anna's Hummingbird\").\nHas_official_bird(\"Winnipeg\", \"Great Gray Owl\").\nHas_official_bird(\"Worcester\", \"European Starling\").\n.decl Answer()\nAnswer() :- Located_in(city, \"LG Electronics\"), Has_official_bird(city, bird), bird = \"Anna's Hummingbird\".\n.output Answer"]}
{"id": 1156, "answer": false, "completion": ".decl Needs_condition(Plant:symbol, Condition:symbol)\nNeeds_condition(\"cactus\", \"dry soil\").\n.decl Answer()\nAnswer() :- Needs_condition(\"cactus\", condition), condition != \"damp soil\".\n.output Answer", "completions": [".decl Needs_condition(Plant:symbol, Condition:symbol)\nNeeds_condition(\"cactus\", \"dry soil\").\n.decl Answer()\nAnswer() :- Needs_condition(\"cactus\", condition), condition != \"damp soil\".\n.output Answer"]}
{"id": 1157, "answer": false, "completion": ".decl Time_order(Event1:symbol, Event2:symbol)\nTime_order(\"breakfast\", \"dessert\").\n.decl Answer()\nAnswer() :- Time_order(\"dessert\", \"breakfast\").\n.output Answer", "completions": [".decl Time_order(Event1:symbol, Event2:symbol)\nTime_order(\"breakfast\", \"dessert\").\n.decl Answer()\nAnswer() :- Time_order(\"dessert\", \"breakfast\").\n.output Answer"]}
{"id": 1158, "answer": false, "completion": ".decl Inspired_by(Artist_A:symbol, Artist_B:symbol)\nInspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Ariana Grande\", artist), Inspired_by(artist, \"Imogen Heap\").\n.output Answer", "completions": [".decl Inspired_by(Artist_A:symbol, Artist_B:symbol)\nInspired_by(\"Ariana Grande\", \"Imogen Heap\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Ariana Grande\", artist), Inspired_by(artist, \"Imogen Heap\").\n.output Answer"]}
{"id": 1159, "answer": false, "completion": ".decl Has_won_emmys(Person:symbol, N_emmys:float)\nHas_won_emmys(\"Johnny Carson\", 6).\n.decl Volume_of_carton(Volume:float)\nVolume_of_carton(12).\n.decl Volume_of_egg(Volume:float)\nVolume_of_egg(0.05).\n.decl Answer()\nAnswer() :- Has_won_emmys(\"Johnny Carson\", n_emmys), Volume_of_carton(volume_carton), Volume_of_egg(volume_egg), n_emmys * volume_egg >= volume_carton.\n.output Answer", "completions": [".decl Has_won_emmys(Person:symbol, N_emmys:float)\nHas_won_emmys(\"Johnny Carson\", 6).\n.decl Volume_of_carton(Volume:float)\nVolume_of_carton(12).\n.decl Volume_of_egg(Volume:float)\nVolume_of_egg(0.05).\n.decl Answer()\nAnswer() :- Has_won_emmys(\"Johnny Carson\", n_emmys), Volume_of_carton(volume_carton), Volume_of_egg(volume_egg), n_emmys * volume_egg >= volume_carton.\n.output Answer"]}
{"id": 1160, "answer": false, "completion": ".decl Reads(Person:symbol, Book:symbol)\nReads(\"Julius Caesar\", \"The Gallic Wars\").\nReads(\"Hippocrates\", \"On Ancient Medicine\").\n.decl Is_about(Book:symbol, Topic:symbol)\nIs_about(\"The Gallic Wars\", \"military history\").\nIs_about(\"On Ancient Medicine\", \"medicine\").\n.decl Answer()\nAnswer() :- Reads(\"Julius Caesar\", book), Is_about(book, \"pharmacology\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Book:symbol)\nReads(\"Julius Caesar\", \"The Gallic Wars\").\nReads(\"Hippocrates\", \"On Ancient Medicine\").\n.decl Is_about(Book:symbol, Topic:symbol)\nIs_about(\"The Gallic Wars\", \"military history\").\nIs_about(\"On Ancient Medicine\", \"medicine\").\n.decl Answer()\nAnswer() :- Reads(\"Julius Caesar\", book), Is_about(book, \"pharmacology\").\n.output Answer"]}
{"id": 1161, "answer": true, "completion": ".decl Popular_in_month(Character:symbol, Month:symbol)\nPopular_in_month(\"Easter Bunny\", \"April\").\n.decl Answer()\nAnswer() :- Popular_in_month(\"Easter Bunny\", month), month != \"September\".\n.output Answer", "completions": [".decl Popular_in_month(Character:symbol, Month:symbol)\nPopular_in_month(\"Easter Bunny\", \"April\").\n.decl Answer()\nAnswer() :- Popular_in_month(\"Easter Bunny\", month), month != \"September\".\n.output Answer"]}
{"id": 1162, "answer": false, "completion": ".decl Strength(Animal:symbol, Strength:float)\nStrength(\"alligator\", 8).\nStrength(\"saltwater crocodile\", 7).\n.decl Habitat(Animal:symbol, Habitat:symbol)\nHabitat(\"alligator\", \"freshwater\").\nHabitat(\"saltwater crocodile\", \"saltwater\").\n.decl Answer()\nAnswer() :- Strength(\"alligator\", strength1), Strength(\"saltwater crocodile\", strength2), strength1 > strength2, Habitat(\"alligator\", \"freshwater\").\nAnswer() :- Strength(\"alligator\", strength1), Strength(\"saltwater crocodile\", strength2), strength1 > strength2, Habitat(\"saltwater crocodile\", \"saltwater\").\n.output Answer", "completions": [".decl Strength(Animal:symbol, Strength:float)\nStrength(\"alligator\", 8).\nStrength(\"saltwater crocodile\", 7).\n.decl Habitat(Animal:symbol, Habitat:symbol)\nHabitat(\"alligator\", \"freshwater\").\nHabitat(\"saltwater crocodile\", \"saltwater\").\n.decl Answer()\nAnswer() :- Strength(\"alligator\", strength1), Strength(\"saltwater crocodile\", strength2), strength1 > strength2, Habitat(\"alligator\", \"freshwater\").\nAnswer() :- Strength(\"alligator\", strength1), Strength(\"saltwater crocodile\", strength2), strength1 > strength2, Habitat(\"saltwater crocodile\", \"saltwater\").\n.output Answer"]}
{"id": 1163, "answer": false, "completion": ".decl Contains(Meal:symbol, Ingredient:symbol)\nContains(\"poke bowl\", \"fish\").\nContains(\"kalua pig\", \"pork\").\nContains(\"veggie stir-fry\", \"vegetables\").\nContains(\"tofu poke bowl\", \"tofu\").\n.decl Answer()\nAnswer() :- Contains(meal, ingredient), Contains(meal, \"vegetables\"), !Contains(meal, \"fish\"), !Contains(meal, \"pork\"), !Contains(meal, \"tofu\").\n.output Answer", "completions": [".decl Contains(Meal:symbol, Ingredient:symbol)\nContains(\"poke bowl\", \"fish\").\nContains(\"kalua pig\", \"pork\").\nContains(\"veggie stir-fry\", \"vegetables\").\nContains(\"tofu poke bowl\", \"tofu\").\n.decl Answer()\nAnswer() :- Contains(meal, ingredient), Contains(meal, \"vegetables\"), !Contains(meal, \"fish\"), !Contains(meal, \"pork\"), !Contains(meal, \"tofu\").\n.output Answer"]}
{"id": 1164, "answer": true, "completion": ".decl Member_of_band(Person:symbol, Band:symbol)\nMember_of_band(\"Ringo Starr\", \"The Beatles\").\nMember_of_band(\"Ringo Starr\", \"Ringo Starr & His All-Starr Band\").\nMember_of_band(\"Ringo Starr\", \"Rory Storm and the Hurricanes\").\n.decl Has_n_members(Band:symbol, N_members:float)\nHas_n_members(\"The Beatles\", 4).\nHas_n_members(\"Ringo Starr & His All-Starr Band\", 12).\nHas_n_members(\"Rory Storm and the Hurricanes\", 5).\n.decl Answer()\nAnswer() :- Member_of_band(\"Ringo Starr\", band), Has_n_members(band, n_members), n_members > 5.\n.output Answer", "completions": [".decl Member_of_band(Person:symbol, Band:symbol)\nMember_of_band(\"Ringo Starr\", \"The Beatles\").\nMember_of_band(\"Ringo Starr\", \"Ringo Starr & His All-Starr Band\").\nMember_of_band(\"Ringo Starr\", \"Rory Storm and the Hurricanes\").\n.decl Has_n_members(Band:symbol, N_members:float)\nHas_n_members(\"The Beatles\", 4).\nHas_n_members(\"Ringo Starr & His All-Starr Band\", 12).\nHas_n_members(\"Rory Storm and the Hurricanes\", 5).\n.decl Answer()\nAnswer() :- Member_of_band(\"Ringo Starr\", band), Has_n_members(band, n_members), n_members > 5.\n.output Answer"]}
{"id": 1165, "answer": false, "completion": ".decl Has_strength(Character:symbol, Strength:float)\nHas_strength(\"Achilles\", 100).\nHas_strength(\"Legolas\", 50).\n.decl Answer()\nAnswer() :- Has_strength(\"Achilles\", strength1), Has_strength(\"Legolas\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Has_strength(Character:symbol, Strength:float)\nHas_strength(\"Achilles\", 100).\nHas_strength(\"Legolas\", 50).\n.decl Answer()\nAnswer() :- Has_strength(\"Achilles\", strength1), Has_strength(\"Legolas\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 1166, "answer": false, "completion": ".decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"person1\", \"keto\").\n.decl Has_ingredients(Food:symbol, Ingredient:symbol)\nHas_ingredients(\"Dosa\", \"rice flour\").\nHas_ingredients(\"Dosa\", \"lentil flour\").\n.decl Answer()\nAnswer() :- Has_diet(\"person1\", diet), Has_ingredients(\"Dosa\", ingredient), ingredient != \"rice flour\", ingredient != \"lentil flour\".\nAnswer() :- Has_diet(\"person1\", diet), !Has_ingredients(\"Dosa\", \"rice flour\"), !Has_ingredients(\"Dosa\", \"lentil flour\").\n.output Answer", "completions": [".decl Has_diet(Person:symbol, Diet:symbol)\nHas_diet(\"person1\", \"keto\").\n.decl Has_ingredients(Food:symbol, Ingredient:symbol)\nHas_ingredients(\"Dosa\", \"rice flour\").\nHas_ingredients(\"Dosa\", \"lentil flour\").\n.decl Answer()\nAnswer() :- Has_diet(\"person1\", diet), Has_ingredients(\"Dosa\", ingredient), ingredient != \"rice flour\", ingredient != \"lentil flour\".\nAnswer() :- Has_diet(\"person1\", diet), !Has_ingredients(\"Dosa\", \"rice flour\"), !Has_ingredients(\"Dosa\", \"lentil flour\").\n.output Answer"]}
{"id": 1167, "answer": true, "completion": ".decl Sales_before_year(Band:symbol, Year:float, Sales:float)\nSales_before_year(\"Metallica\", 1996, 1000000).\nSales_before_year(\"Metallica\", 2000, 500000).\n.decl Haircut(Band_member:symbol)\nHaircut(\"James Hetfield\").\nHaircut(\"Lars Ulrich\").\n.decl Answer()\nAnswer() :- Sales_before_year(\"Metallica\", year1, sales1), Sales_before_year(\"Metallica\", year2, sales2), year2 > year1, Haircut(member), member in [\"James Hetfield\", \"Lars Ulrich\"], sales2 < sales1.\n.output Answer", "completions": [".decl Sales_before_year(Band:symbol, Year:float, Sales:float)\nSales_before_year(\"Metallica\", 1996, 1000000).\nSales_before_year(\"Metallica\", 2000, 500000).\n.decl Haircut(Band_member:symbol)\nHaircut(\"James Hetfield\").\nHaircut(\"Lars Ulrich\").\n.decl Answer()\nAnswer() :- Sales_before_year(\"Metallica\", year1, sales1), Sales_before_year(\"Metallica\", year2, sales2), year2 > year1, Haircut(member), member in [\"James Hetfield\", \"Lars Ulrich\"], sales2 < sales1.\n.output Answer"]}
{"id": 1168, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Quiet\", \"stealth\").\nHas_skill(\"Quiet\", \"marksmanship\").\nHas_skill(\"Quiet\", \"hand-to-hand combat\").\n.decl Has_experience(Person:symbol, Experience:symbol)\nHas_experience(\"Quiet\", \"mercenary work\").\nHas_experience(\"Quiet\", \"assassination missions\").\n.decl Is_good_at(Skill:symbol, Task:symbol)\nIs_good_at(\"stealth\", \"sneaking around\").\nIs_good_at(\"marksmanship\", \"shooting accurately\").\nIs_good_at(\"hand-to-hand combat\", \"fighting up close\").\n.decl Answer()\nAnswer() :- Has_skill(\"Quiet\", skill), !Is_good_at(skill, \"lecturing at Haub\").\nAnswer() :- Has_experience(\"Quiet\", experience), !Is_good_at(experience, \"lecturing at Haub\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Quiet\", \"stealth\").\nHas_skill(\"Quiet\", \"marksmanship\").\nHas_skill(\"Quiet\", \"hand-to-hand combat\").\n.decl Has_experience(Person:symbol, Experience:symbol)\nHas_experience(\"Quiet\", \"mercenary work\").\nHas_experience(\"Quiet\", \"assassination missions\").\n.decl Is_good_at(Skill:symbol, Task:symbol)\nIs_good_at(\"stealth\", \"sneaking around\").\nIs_good_at(\"marksmanship\", \"shooting accurately\").\nIs_good_at(\"hand-to-hand combat\", \"fighting up close\").\n.decl Answer()\nAnswer() :- Has_skill(\"Quiet\", skill), !Is_good_at(skill, \"lecturing at Haub\").\nAnswer() :- Has_experience(\"Quiet\", experience), !Is_good_at(experience, \"lecturing at Haub\").\n.output Answer"]}
{"id": 1169, "answer": true, "completion": ".decl Can_lift(Crane:symbol, Object:symbol)\nCan_lift(\"Liebherr LTM 11200-9.1\", \"Mount Emei\").\n.decl Has_max_capacity(Crane:symbol, Capacity:float)\nHas_max_capacity(\"Liebherr LTM 11200-9.1\", 1200).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Mount Emei\", 3099).\n.decl Answer()\nAnswer() :- Can_lift(crane, object), Has_max_capacity(crane, capacity), Has_weight(object, weight), capacity >= weight.\n.output Answer", "completions": [".decl Can_lift(Crane:symbol, Object:symbol)\nCan_lift(\"Liebherr LTM 11200-9.1\", \"Mount Emei\").\n.decl Has_max_capacity(Crane:symbol, Capacity:float)\nHas_max_capacity(\"Liebherr LTM 11200-9.1\", 1200).\n.decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Mount Emei\", 3099).\n.decl Answer()\nAnswer() :- Can_lift(crane, object), Has_max_capacity(crane, capacity), Has_weight(object, weight), capacity >= weight.\n.output Answer"]}
{"id": 1170, "answer": true, "completion": ".decl Sign_of_good_breathing(Sign:symbol, Condition:symbol)\nSign_of_good_breathing(\"deep and regular breathing\", \"good breathing\").\nSign_of_good_breathing(\"quiet breathing\", \"good breathing\").\nSign_of_good_breathing(\"snoring\", \"bad breathing\").\n.decl Answer()\nAnswer() :- Sign_of_good_breathing(\"snoring\", condition), condition != \"good breathing\".\n.output Answer", "completions": [".decl Sign_of_good_breathing(Sign:symbol, Condition:symbol)\nSign_of_good_breathing(\"deep and regular breathing\", \"good breathing\").\nSign_of_good_breathing(\"quiet breathing\", \"good breathing\").\nSign_of_good_breathing(\"snoring\", \"bad breathing\").\n.decl Answer()\nAnswer() :- Sign_of_good_breathing(\"snoring\", condition), condition != \"good breathing\".\n.output Answer"]}
{"id": 1171, "answer": false, "completion": ".decl Is_nickname_of(Person:symbol, Nickname:symbol)\nIs_nickname_of(\"ABBA\", \"Swedish Beatles\").\n.decl Is_preposterous_claim(Claim:symbol)\nIs_preposterous_claim(\"ABBA is the Swedish Beatles\").\n.decl Answer()\nAnswer() :- Is_preposterous_claim(claim), !Is_nickname_of(\"ABBA\", nickname), claim = \"ABBA is \" + nickname.\n.output Answer", "completions": [".decl Is_nickname_of(Person:symbol, Nickname:symbol)\nIs_nickname_of(\"ABBA\", \"Swedish Beatles\").\n.decl Is_preposterous_claim(Claim:symbol)\nIs_preposterous_claim(\"ABBA is the Swedish Beatles\").\n.decl Answer()\nAnswer() :- Is_preposterous_claim(claim), !Is_nickname_of(\"ABBA\", nickname), claim = \"ABBA is \" + nickname.\n.output Answer"]}
{"id": 1172, "answer": true, "completion": ".decl Was_in_group(Person:symbol, Group:symbol)\nWas_in_group(\"Jackson Pollock\", \"Abstract Expressionists\").\n.decl Answer()\nAnswer() :- !Was_in_group(\"Jackson Pollock\", \"Straight Edge\"), Was_in_group(\"Jackson Pollock\", \"Abstract Expressionists\").\n.output Answer", "completions": [".decl Was_in_group(Person:symbol, Group:symbol)\nWas_in_group(\"Jackson Pollock\", \"Abstract Expressionists\").\n.decl Answer()\nAnswer() :- !Was_in_group(\"Jackson Pollock\", \"Straight Edge\"), Was_in_group(\"Jackson Pollock\", \"Abstract Expressionists\").\n.output Answer"]}
{"id": 1173, "answer": false, "completion": ".decl Game_type(Game:symbol, Type:symbol)\nGame_type(\"Dungeons and Dragons\", \"tabletop\").\nGame_type(\"Dungeons and Dragons\", \"multiplayer\").\n.decl Play_style(Game:symbol, Style:symbol)\nPlay_style(\"Dungeons and Dragons\", \"cooperative\").\nPlay_style(\"Dungeons and Dragons\", \"group\").\n.decl Answer()\nAnswer() :- Game_type(\"Dungeons and Dragons\", \"tabletop\"), Play_style(\"Dungeons and Dragons\", \"cooperative\").\n.output Answer", "completions": [".decl Game_type(Game:symbol, Type:symbol)\nGame_type(\"Dungeons and Dragons\", \"tabletop\").\nGame_type(\"Dungeons and Dragons\", \"multiplayer\").\n.decl Play_style(Game:symbol, Style:symbol)\nPlay_style(\"Dungeons and Dragons\", \"cooperative\").\nPlay_style(\"Dungeons and Dragons\", \"group\").\n.decl Answer()\nAnswer() :- Game_type(\"Dungeons and Dragons\", \"tabletop\"), Play_style(\"Dungeons and Dragons\", \"cooperative\").\n.output Answer"]}
{"id": 1174, "answer": false, "completion": ".decl Has_part(Item:symbol, Part:symbol)\nHas_part(\"game engine\", \"piston\").\nHas_part(\"game engine\", \"spark plug\").\n.decl Answer()\nAnswer() :- Has_part(\"game engine\", \"fuel injector\").\n.output Answer", "completions": [".decl Has_part(Item:symbol, Part:symbol)\nHas_part(\"game engine\", \"piston\").\nHas_part(\"game engine\", \"spark plug\").\n.decl Answer()\nAnswer() :- Has_part(\"game engine\", \"fuel injector\").\n.output Answer"]}
{"id": 1175, "answer": true, "completion": ".decl ParentOf(Parent:symbol, Child:symbol)\nParentOf(\"Heracles\", \"Hyllus\").\nParentOf(\"Heracles\", \"Macaria\").\nParentOf(\"Heracles\", \"Telephus\").\nParentOf(\"Heracles\", \"Tlepolemus\").\n.decl PresentAt(Event:symbol, Person:symbol)\nPresentAt(\"funeral pyre of Heracles\", \"Hyllus\").\nPresentAt(\"funeral pyre of Heracles\", \"Macaria\").\nPresentAt(\"funeral pyre of Heracles\", \"Tlepolemus\").\n.decl Answer()\nAnswer() :- ParentOf(\"Heracles\", child), !PresentAt(\"funeral pyre of Heracles\", child).\nAnswer() :- ParentOf(\"Heracles\", child), PresentAt(\"funeral pyre of Heracles\", child).\n.output Answer", "completions": [".decl ParentOf(Parent:symbol, Child:symbol)\nParentOf(\"Heracles\", \"Hyllus\").\nParentOf(\"Heracles\", \"Macaria\").\nParentOf(\"Heracles\", \"Telephus\").\nParentOf(\"Heracles\", \"Tlepolemus\").\n.decl PresentAt(Event:symbol, Person:symbol)\nPresentAt(\"funeral pyre of Heracles\", \"Hyllus\").\nPresentAt(\"funeral pyre of Heracles\", \"Macaria\").\nPresentAt(\"funeral pyre of Heracles\", \"Tlepolemus\").\n.decl Answer()\nAnswer() :- ParentOf(\"Heracles\", child), !PresentAt(\"funeral pyre of Heracles\", child).\nAnswer() :- ParentOf(\"Heracles\", child), PresentAt(\"funeral pyre of Heracles\", child).\n.output Answer"]}
{"id": 1176, "answer": false, "completion": ".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"moon\", 2.1958e10).\nHas_volume(\"Black Sea\", 5.5e11).\n.decl Answer()\nAnswer() :- Has_volume(\"moon\", volume1), Has_volume(\"Black Sea\", volume2), volume1 <= volume2.\n.output Answer", "completions": [".decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"moon\", 2.1958e10).\nHas_volume(\"Black Sea\", 5.5e11).\n.decl Answer()\nAnswer() :- Has_volume(\"moon\", volume1), Has_volume(\"Black Sea\", volume2), volume1 <= volume2.\n.output Answer"]}
{"id": 1177, "answer": false, "completion": ".decl Blooms_in_season(Flower:symbol, Season:symbol)\nBlooms_in_season(\"peach blossoms\", \"spring\").\nBlooms_in_season(\"Andromeda\", \"fall\").\n.decl Answer()\nAnswer() :- Blooms_in_season(\"peach blossoms\", season1), Blooms_in_season(\"Andromeda\", season2), season1 = season2.\n.output Answer", "completions": [".decl Blooms_in_season(Flower:symbol, Season:symbol)\nBlooms_in_season(\"peach blossoms\", \"spring\").\nBlooms_in_season(\"Andromeda\", \"fall\").\n.decl Answer()\nAnswer() :- Blooms_in_season(\"peach blossoms\", season1), Blooms_in_season(\"Andromeda\", season2), season1 = season2.\n.output Answer"]}
{"id": 1178, "answer": true, "completion": ".decl Has_bacon_number(Person:symbol, Bacon_number:float)\nHas_bacon_number(\"Al Pacino\", 2).\nHas_bacon_number(\"Margaret Qualley\", 2).\n.decl Answer()\nAnswer() :- Has_bacon_number(\"Al Pacino\", bacon_number), Has_bacon_number(\"Margaret Qualley\", bacon_number).\n.output Answer", "completions": [".decl Has_bacon_number(Person:symbol, Bacon_number:float)\nHas_bacon_number(\"Al Pacino\", 2).\nHas_bacon_number(\"Margaret Qualley\", 2).\n.decl Answer()\nAnswer() :- Has_bacon_number(\"Al Pacino\", bacon_number), Has_bacon_number(\"Margaret Qualley\", bacon_number).\n.output Answer"]}
{"id": 1179, "answer": true, "completion": ".decl Written_in(Work:symbol, Writing_system:symbol)\nWritten_in(\"Tenth Amendment to the Constitution\", \"English\").\nWritten_in(\"Tenth Amendment to the Constitution\", \"Latin script\").\n.decl Uses(Writing_system:symbol, Tool:symbol)\nUses(\"Pitman shorthand\", \"pen\").\nUses(\"Pitman shorthand\", \"paper\").\n.decl Answer()\nAnswer() :- Written_in(\"Tenth Amendment to the Constitution\", writing_system), Uses(writing_system, \"pen\"), !Uses(writing_system, \"keyboard\").\n.output Answer", "completions": [".decl Written_in(Work:symbol, Writing_system:symbol)\nWritten_in(\"Tenth Amendment to the Constitution\", \"English\").\nWritten_in(\"Tenth Amendment to the Constitution\", \"Latin script\").\n.decl Uses(Writing_system:symbol, Tool:symbol)\nUses(\"Pitman shorthand\", \"pen\").\nUses(\"Pitman shorthand\", \"paper\").\n.decl Answer()\nAnswer() :- Written_in(\"Tenth Amendment to the Constitution\", writing_system), Uses(writing_system, \"pen\"), !Uses(writing_system, \"keyboard\").\n.output Answer"]}
{"id": 1180, "answer": true, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Ivan the Terrible's father\", \"Vasily the Dark\").\nHas_nickname(\"Ivan the Terrible's grandfather\", \"Ivan the Great\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Ivan the Terrible's father\", nickname1), Has_nickname(\"Ivan the Terrible's grandfather\", nickname2), nickname1 < nickname2.\n.output Answer", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Ivan the Terrible's father\", \"Vasily the Dark\").\nHas_nickname(\"Ivan the Terrible's grandfather\", \"Ivan the Great\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Ivan the Terrible's father\", nickname1), Has_nickname(\"Ivan the Terrible's grandfather\", nickname2), nickname1 < nickname2.\n.output Answer"]}
{"id": 1181, "answer": true, "completion": ".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Zelda Williams\", \"Robin Williams\").\nHas_parent(\"Robin Williams\", \"Robert Fitzgerald Williams\").\n.decl Has_sibling(Person1:symbol, Person2:symbol)\nHas_sibling(\"Robin Williams\", \"Todd Williams\").\nHas_sibling(\"Robin Williams\", \"Mclaurin Smith-Williams\").\n.decl Answer()\nAnswer() :- Has_parent(\"Zelda Williams\", parent), Has_sibling(parent, cousin).\n.output Answer", "completions": [".decl Has_parent(Person:symbol, Parent:symbol)\nHas_parent(\"Zelda Williams\", \"Robin Williams\").\nHas_parent(\"Robin Williams\", \"Robert Fitzgerald Williams\").\n.decl Has_sibling(Person1:symbol, Person2:symbol)\nHas_sibling(\"Robin Williams\", \"Todd Williams\").\nHas_sibling(\"Robin Williams\", \"Mclaurin Smith-Williams\").\n.decl Answer()\nAnswer() :- Has_parent(\"Zelda Williams\", parent), Has_sibling(parent, cousin).\n.output Answer"]}
{"id": 1182, "answer": false, "completion": ".decl Found_in(Text:symbol, Item:symbol)\nFound_in(\"New Testament\", \"Jesus\").\n.decl Has_attribute(Item:symbol, Attribute:symbol)\nHas_attribute(\"Jesus\", \"divine\").\nHas_attribute(\"thetan levels\", \"Scientology\").\n.decl Answer()\nAnswer() :- Found_in(\"New Testament\", item), Has_attribute(item, \"divine\").\nAnswer() :- Found_in(\"New Testament\", item), Has_attribute(\"thetan levels\", attribute), item != \"thetan levels\".\n.output Answer", "completions": [".decl Found_in(Text:symbol, Item:symbol)\nFound_in(\"New Testament\", \"Jesus\").\n.decl Has_attribute(Item:symbol, Attribute:symbol)\nHas_attribute(\"Jesus\", \"divine\").\nHas_attribute(\"thetan levels\", \"Scientology\").\n.decl Answer()\nAnswer() :- Found_in(\"New Testament\", item), Has_attribute(item, \"divine\").\nAnswer() :- Found_in(\"New Testament\", item), Has_attribute(\"thetan levels\", attribute), item != \"thetan levels\".\n.output Answer"]}
{"id": 1183, "answer": true, "completion": ".decl Named_after(Pancake:symbol, Coin:symbol)\nNamed_after(\"dollar pancake\", \"dollar\").\nNamed_after(\"euro pancake\", \"euro\").\nNamed_after(\"yen pancake\", \"yen\").\n.decl Answer()\nAnswer() :- Named_after(pancake, coin), coin != \"none\".\n.output Answer", "completions": [".decl Named_after(Pancake:symbol, Coin:symbol)\nNamed_after(\"dollar pancake\", \"dollar\").\nNamed_after(\"euro pancake\", \"euro\").\nNamed_after(\"yen pancake\", \"yen\").\n.decl Answer()\nAnswer() :- Named_after(pancake, coin), coin != \"none\".\n.output Answer"]}
{"id": 1184, "answer": false, "completion": ".decl Has_body_part(Animal:symbol, Body_part:symbol)\nHas_body_part(\"camel\", \"hump\").\n.decl Joke_day(Day:symbol, Joke:symbol)\nJoke_day(\"Wednesday\", \"hump day\").\n.decl Answer()\nAnswer() :- Has_body_part(\"camel\", body_part), Joke_day(\"Wednesday\", joke), body_part = joke.\n.output Answer", "completions": [".decl Has_body_part(Animal:symbol, Body_part:symbol)\nHas_body_part(\"camel\", \"hump\").\n.decl Joke_day(Day:symbol, Joke:symbol)\nJoke_day(\"Wednesday\", \"hump day\").\n.decl Answer()\nAnswer() :- Has_body_part(\"camel\", body_part), Joke_day(\"Wednesday\", joke), body_part = joke.\n.output Answer"]}
{"id": 1185, "answer": true, "completion": ".decl Wrestles(Person:symbol, Event:symbol)\nWrestles(\"Bruiser Brody\", \"World Class Championship Wrestling\").\nWrestles(\"Bruiser Brody\", \"All Japan Pro Wrestling\").\n.decl Aired_on(Event:symbol, Network:symbol)\nAired_on(\"WWE Raw\", \"USA Network\").\n.decl Answer()\nAnswer() :- Wrestles(\"Bruiser Brody\", event), Aired_on(\"WWE Raw\", network), event != \"WWE Raw\".\n.output Answer", "completions": [".decl Wrestles(Person:symbol, Event:symbol)\nWrestles(\"Bruiser Brody\", \"World Class Championship Wrestling\").\nWrestles(\"Bruiser Brody\", \"All Japan Pro Wrestling\").\n.decl Aired_on(Event:symbol, Network:symbol)\nAired_on(\"WWE Raw\", \"USA Network\").\n.decl Answer()\nAnswer() :- Wrestles(\"Bruiser Brody\", event), Aired_on(\"WWE Raw\", network), event != \"WWE Raw\".\n.output Answer"]}
{"id": 1186, "answer": true, "completion": ".decl Studies(Field:symbol, Topic:symbol)\nStudies(\"zoology\", \"animals\").\nStudies(\"vampirism\", \"strigoi\").\n.decl Answer()\nAnswer() :- Studies(\"zoology\", topic1), Studies(\"vampirism\", topic2), topic1 != topic2.\n.output Answer", "completions": [".decl Studies(Field:symbol, Topic:symbol)\nStudies(\"zoology\", \"animals\").\nStudies(\"vampirism\", \"strigoi\").\n.decl Answer()\nAnswer() :- Studies(\"zoology\", topic1), Studies(\"vampirism\", topic2), topic1 != topic2.\n.output Answer"]}
{"id": 1187, "answer": true, "completion": ".decl Character_race(Character:symbol, Race:symbol)\nCharacter_race(\"Depala\", \"dwarf\").\n.decl Answer()\nAnswer() :- Character_race(\"Depala\", \"dwarf\").\n.output Answer", "completions": [".decl Character_race(Character:symbol, Race:symbol)\nCharacter_race(\"Depala\", \"dwarf\").\n.decl Answer()\nAnswer() :- Character_race(\"Depala\", \"dwarf\").\n.output Answer"]}
{"id": 1188, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"twin1\", 1990).\nBorn_in_year(\"twin2\", 1990).\n.decl Answer()\nAnswer() :- Born_in_year(\"twin1\", year1), Born_in_year(\"twin2\", year2), year1 = year2.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"twin1\", 1990).\nBorn_in_year(\"twin2\", 1990).\n.decl Answer()\nAnswer() :- Born_in_year(\"twin1\", year1), Born_in_year(\"twin2\", year2), year1 = year2.\n.output Answer"]}
{"id": 1189, "answer": false, "completion": ".decl Likes(Person:symbol, Activity:symbol)\nLikes(\"Tom Bosley\", \"playing video games\").\n.decl Has_console(Person:symbol, Console:symbol)\nHas_console(\"Tom Bosley\", \"PlayStation 2\").\nHas_console(\"Tom Bosley\", \"PlayStation 3\").\nHas_console(\"Tom Bosley\", \"PlayStation 4\").\n.decl Answer()\nAnswer() :- Likes(\"Tom Bosley\", \"playing video games\"), Has_console(\"Tom Bosley\", \"PlayStation 4\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Activity:symbol)\nLikes(\"Tom Bosley\", \"playing video games\").\n.decl Has_console(Person:symbol, Console:symbol)\nHas_console(\"Tom Bosley\", \"PlayStation 2\").\nHas_console(\"Tom Bosley\", \"PlayStation 3\").\nHas_console(\"Tom Bosley\", \"PlayStation 4\").\n.decl Answer()\nAnswer() :- Likes(\"Tom Bosley\", \"playing video games\"), Has_console(\"Tom Bosley\", \"PlayStation 4\").\n.output Answer"]}
{"id": 1190, "answer": true, "completion": ".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\nHas_n_members(\"The Osmonds\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members1), Has_n_members(\"The Osmonds\", n_members2), n_members1 > n_members2.\n.output Answer", "completions": [".decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Jackson 5\", 5).\nHas_n_members(\"The Osmonds\", 4).\n.decl Answer()\nAnswer() :- Has_n_members(\"Jackson 5\", n_members1), Has_n_members(\"The Osmonds\", n_members2), n_members1 > n_members2.\n.output Answer"]}
{"id": 1191, "answer": true, "completion": ".decl Is_ingredient(Ingredient:symbol)\nIs_ingredient(\"kaffir lime\").\n.decl Is_used_for(Product:symbol, Use:symbol)\nIs_used_for(\"candle\", \"lighting\").\n.decl Is_good_for_ingredient(Ingredient:symbol, Product:symbol)\nIs_good_for_ingredient(\"kaffir lime\", \"food\").\n.decl Answer()\nAnswer() :- Is_ingredient(ingredient), Is_used_for(product, \"lighting\"), !Is_good_for_ingredient(ingredient, product).\n.output Answer", "completions": [".decl Is_ingredient(Ingredient:symbol)\nIs_ingredient(\"kaffir lime\").\n.decl Is_used_for(Product:symbol, Use:symbol)\nIs_used_for(\"candle\", \"lighting\").\n.decl Is_good_for_ingredient(Ingredient:symbol, Product:symbol)\nIs_good_for_ingredient(\"kaffir lime\", \"food\").\n.decl Answer()\nAnswer() :- Is_ingredient(ingredient), Is_used_for(product, \"lighting\"), !Is_good_for_ingredient(ingredient, product).\n.output Answer"]}
{"id": 1192, "answer": true, "completion": ".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Alcatraz Island\", 0.85).\nHas_area(\"football field\", 0.5).\n.decl Answer()\nAnswer() :- Has_area(\"Alcatraz Island\", area1), Has_area(\"football field\", area2), area2 <= area1.\n.output Answer", "completions": [".decl Has_area(Object:symbol, Area:float)\nHas_area(\"Alcatraz Island\", 0.85).\nHas_area(\"football field\", 0.5).\n.decl Answer()\nAnswer() :- Has_area(\"Alcatraz Island\", area1), Has_area(\"football field\", area2), area2 <= area1.\n.output Answer"]}
{"id": 1193, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Iberian wolf\", \"Spain\").\nLives_in(\"deer\", \"Southern United States\").\n.decl Answer()\nAnswer() :- Lives_in(\"Iberian wolf\", location), Lives_in(\"deer\", location2), location = location2.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Iberian wolf\", \"Spain\").\nLives_in(\"deer\", \"Southern United States\").\n.decl Answer()\nAnswer() :- Lives_in(\"Iberian wolf\", location), Lives_in(\"deer\", location2), location = location2.\n.output Answer"]}
{"id": 1194, "answer": true, "completion": ".decl Effectiveness(Insect:symbol, Effectiveness:float)\nEffectiveness(\"spider wasp\", 8).\nEffectiveness(\"bullet ant\", 7).\n.decl Answer()\nAnswer() :- Effectiveness(insect1, effectiveness1), Effectiveness(insect2, effectiveness2), insect1 != insect2, effectiveness1 > effectiveness2.\n.output Answer", "completions": [".decl Effectiveness(Insect:symbol, Effectiveness:float)\nEffectiveness(\"spider wasp\", 8).\nEffectiveness(\"bullet ant\", 7).\n.decl Answer()\nAnswer() :- Effectiveness(insect1, effectiveness1), Effectiveness(insect2, effectiveness2), insect1 != insect2, effectiveness1 > effectiveness2.\n.output Answer"]}
{"id": 1195, "answer": false, "completion": ".decl Film(Name:symbol, Number:float)\nFilm(\"Snow White and the Seven Dwarfs\", 1).\nFilm(\"Pinocchio\", 2).\n.decl Based_on(Film:symbol, Source:symbol)\nBased_on(\"Snow White and the Seven Dwarfs\", \"Snow White\" story).\nBased_on(\"Pinocchio\", \"The Adventures of Pinocchio\" book).\nBased_on(\"Pinocchio\", \"The Adventures of Pinocchio\" play).\n.decl Answer()\nAnswer() :- Based_on(film1, \"The Adventures of Pinocchio\"), Film(film1, number1), Film(film2, number2), number1 < number2, Based_on(film2, \"prophet story\").\n.output Answer", "completions": [".decl Film(Name:symbol, Number:float)\nFilm(\"Snow White and the Seven Dwarfs\", 1).\nFilm(\"Pinocchio\", 2).\n.decl Based_on(Film:symbol, Source:symbol)\nBased_on(\"Snow White and the Seven Dwarfs\", \"Snow White\" story).\nBased_on(\"Pinocchio\", \"The Adventures of Pinocchio\" book).\nBased_on(\"Pinocchio\", \"The Adventures of Pinocchio\" play).\n.decl Answer()\nAnswer() :- Based_on(film1, \"The Adventures of Pinocchio\"), Film(film1, number1), Film(film2, number2), number1 < number2, Based_on(film2, \"prophet story\").\n.output Answer"]}
{"id": 1196, "answer": false, "completion": ".decl Buys(Person:symbol, Item:symbol)\nBuys(\"John\", \"crickets\").\n.decl Owns(Person:symbol, Animal:symbol)\nOwns(\"John\", \"dog\").\nOwns(\"Mary\", \"cat\").\nOwns(\"Bob\", \"hamster\").\n.decl Answer()\nAnswer() :- Buys(person, \"crickets\"), Owns(person, animal).\n.output Answer", "completions": [".decl Buys(Person:symbol, Item:symbol)\nBuys(\"John\", \"crickets\").\n.decl Owns(Person:symbol, Animal:symbol)\nOwns(\"John\", \"dog\").\nOwns(\"Mary\", \"cat\").\nOwns(\"Bob\", \"hamster\").\n.decl Answer()\nAnswer() :- Buys(person, \"crickets\"), Owns(person, animal).\n.output Answer"]}
{"id": 1197, "answer": false, "completion": ".decl Cost_per_eclipse(Year:float, Cost:float)\nCost_per_eclipse(2009, 1).\n.decl Price_of_magazine(Year:float, Price:float)\nPrice_of_magazine(2020, 4.99).\n.decl Answer()\nAnswer() :- Cost_per_eclipse(2009, cost), Price_of_magazine(2020, price), cost*count >= price, count = 1.\n.output Answer", "completions": [".decl Cost_per_eclipse(Year:float, Cost:float)\nCost_per_eclipse(2009, 1).\n.decl Price_of_magazine(Year:float, Price:float)\nPrice_of_magazine(2020, 4.99).\n.decl Answer()\nAnswer() :- Cost_per_eclipse(2009, cost), Price_of_magazine(2020, price), cost*count >= price, count = 1.\n.output Answer"]}
{"id": 1198, "answer": true, "completion": ".decl Real_name(Artist:symbol, Name:symbol)\nReal_name(\"Lil Wayne\", \"Dwayne Michael Carter Jr.\").\nReal_name(\"similar real name rapper\", \"Dwayne Michael Weezy Carter Jr.\").\n.decl Has_awards(Artist:symbol, Awards:float)\nHas_awards(\"Lil Wayne\", 5).\nHas_awards(\"similar real name rapper\", 22).\n.decl Answer()\nAnswer() :- Has_awards(\"similar real name rapper\", awards1), Has_awards(\"Lil Wayne\", awards2), awards1 > awards2 * 4, Real_name(\"similar real name rapper\", \"Dwayne Michael Weezy Carter Jr.\").\n.output Answer", "completions": [".decl Real_name(Artist:symbol, Name:symbol)\nReal_name(\"Lil Wayne\", \"Dwayne Michael Carter Jr.\").\nReal_name(\"similar real name rapper\", \"Dwayne Michael Weezy Carter Jr.\").\n.decl Has_awards(Artist:symbol, Awards:float)\nHas_awards(\"Lil Wayne\", 5).\nHas_awards(\"similar real name rapper\", 22).\n.decl Answer()\nAnswer() :- Has_awards(\"similar real name rapper\", awards1), Has_awards(\"Lil Wayne\", awards2), awards1 > awards2 * 4, Real_name(\"similar real name rapper\", \"Dwayne Michael Weezy Carter Jr.\").\n.output Answer"]}
{"id": 1199, "answer": true, "completion": ".decl Requires_refrigeration(Food:symbol)\nRequires_refrigeration(\"milk\").\nRequires_refrigeration(\"yogurt\").\nRequires_refrigeration(\"cheese\").\n.decl Answer()\nAnswer() :- Requires_refrigeration(food), food != \"oysters\".\n.output Answer", "completions": [".decl Requires_refrigeration(Food:symbol)\nRequires_refrigeration(\"milk\").\nRequires_refrigeration(\"yogurt\").\nRequires_refrigeration(\"cheese\").\n.decl Answer()\nAnswer() :- Requires_refrigeration(food), food != \"oysters\".\n.output Answer"]}
{"id": 1200, "answer": false, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Kate Gosselin\", 8).\n.decl Needs_players(Team:symbol, N_players:float)\nNeeds_players(\"Bandy\", 11).\n.decl Answer()\nAnswer() :- Has_children(\"Kate Gosselin\", n_children), Needs_players(\"Bandy\", n_players), n_children >= n_players.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Kate Gosselin\", 8).\n.decl Needs_players(Team:symbol, N_players:float)\nNeeds_players(\"Bandy\", 11).\n.decl Answer()\nAnswer() :- Has_children(\"Kate Gosselin\", n_children), Needs_players(\"Bandy\", n_players), n_children >= n_players.\n.output Answer"]}
{"id": 1201, "answer": true, "completion": ".decl Can_chase(Predator:symbol, Prey:symbol)\nCan_chase(\"emu\", \"insect\").\nCan_chase(\"insect\", \"bogan\").\n.decl Answer()\nAnswer() :- Can_chase(\"emu\", prey), Can_chase(prey, \"bogan\").\n.output Answer", "completions": [".decl Can_chase(Predator:symbol, Prey:symbol)\nCan_chase(\"emu\", \"insect\").\nCan_chase(\"insect\", \"bogan\").\n.decl Answer()\nAnswer() :- Can_chase(\"emu\", prey), Can_chase(prey, \"bogan\").\n.output Answer"]}
{"id": 1202, "answer": false, "completion": ".decl Happened_during(Event:symbol, Time_period:symbol)\nHappened_during(\"Cuban revolution\", \"1953-1959\").\n.decl Population_growth_rate(Year:float, Growth_rate:float)\nPopulation_growth_rate(1953, 1.7).\nPopulation_growth_rate(1954, 1.9).\nPopulation_growth_rate(1955, 2.1).\nPopulation_growth_rate(1956, 1.9).\nPopulation_growth_rate(1957, 1.8).\nPopulation_growth_rate(1958, 1.8).\nPopulation_growth_rate(1959, 1.7).\n.decl Answer()\nAnswer() :- Happened_during(\"Cuban revolution\", time_period), Population_growth_rate(year, growth_rate), year >= time_period.split(\"-\")[0].toFloat(), year <= time_period.split(\"-\")[1].toFloat(), growth_rate > 2.\n.output Answer", "completions": [".decl Happened_during(Event:symbol, Time_period:symbol)\nHappened_during(\"Cuban revolution\", \"1953-1959\").\n.decl Population_growth_rate(Year:float, Growth_rate:float)\nPopulation_growth_rate(1953, 1.7).\nPopulation_growth_rate(1954, 1.9).\nPopulation_growth_rate(1955, 2.1).\nPopulation_growth_rate(1956, 1.9).\nPopulation_growth_rate(1957, 1.8).\nPopulation_growth_rate(1958, 1.8).\nPopulation_growth_rate(1959, 1.7).\n.decl Answer()\nAnswer() :- Happened_during(\"Cuban revolution\", time_period), Population_growth_rate(year, growth_rate), year >= time_period.split(\"-\")[0].toFloat(), year <= time_period.split(\"-\")[1].toFloat(), growth_rate > 2.\n.output Answer"]}
{"id": 1203, "answer": true, "completion": ".decl Mentions(Book:symbol, Keyword:symbol)\nMentions(\"Alice's Adventures in Wonderland\", \"tobacco\").\nMentions(\"Alice's Adventures in Wonderland\", \"enjoyable\").\n.decl Answer()\nAnswer() :- Mentions(\"Alice's Adventures in Wonderland\", \"tobacco\"), Mentions(\"Alice's Adventures in Wonderland\", \"enjoyable\").\n.output Answer", "completions": [".decl Mentions(Book:symbol, Keyword:symbol)\nMentions(\"Alice's Adventures in Wonderland\", \"tobacco\").\nMentions(\"Alice's Adventures in Wonderland\", \"enjoyable\").\n.decl Answer()\nAnswer() :- Mentions(\"Alice's Adventures in Wonderland\", \"tobacco\"), Mentions(\"Alice's Adventures in Wonderland\", \"enjoyable\").\n.output Answer"]}
{"id": 1204, "answer": true, "completion": ".decl Causes_death(Food:symbol)\nCauses_death(\"grapefruit\") :- !Eating(\"grapefruit\").\nEating(\"grapefruit\") :- Eats(person, \"grapefruit\").\nEats(person, \"grapefruit\") :- Allergic(person, \"grapefruit\").\nAllergic(\"John\", \"grapefruit\").\n.decl Answer()\nAnswer() :- Causes_death(\"grapefruit\").\n.output Answer", "completions": [".decl Causes_death(Food:symbol)\nCauses_death(\"grapefruit\") :- !Eating(\"grapefruit\").\nEating(\"grapefruit\") :- Eats(person, \"grapefruit\").\nEats(person, \"grapefruit\") :- Allergic(person, \"grapefruit\").\nAllergic(\"John\", \"grapefruit\").\n.decl Answer()\nAnswer() :- Causes_death(\"grapefruit\").\n.output Answer"]}
{"id": 1205, "answer": false, "completion": ".decl Banned_from_city(Person:symbol, City:symbol)\nBanned_from_city(\"Kane\", \"Atlanta\").\n.decl Located_in(City:symbol, State:symbol)\nLocated_in(\"Atlanta\", \"Georgia\").\n.decl Answer()\nAnswer() :- Banned_from_city(\"Kane\", city), Located_in(city, state), Located_in(\"Atlanta\", state).\n.output Answer", "completions": [".decl Banned_from_city(Person:symbol, City:symbol)\nBanned_from_city(\"Kane\", \"Atlanta\").\n.decl Located_in(City:symbol, State:symbol)\nLocated_in(\"Atlanta\", \"Georgia\").\n.decl Answer()\nAnswer() :- Banned_from_city(\"Kane\", city), Located_in(city, state), Located_in(\"Atlanta\", state).\n.output Answer"]}
{"id": 1206, "answer": true, "completion": ".decl Contains_chemical(Product:symbol, Chemical:symbol)\nContains_chemical(\"ammonia fighting cleaner\", \"ammonia\").\n.decl Harmful_to_pets(Chemical:symbol)\nHarmful_to_pets(\"ammonia\").\n.decl Answer()\nAnswer() :- Contains_chemical(product, \"ammonia\"), Harmful_to_pets(\"ammonia\").\n.output Answer", "completions": [".decl Contains_chemical(Product:symbol, Chemical:symbol)\nContains_chemical(\"ammonia fighting cleaner\", \"ammonia\").\n.decl Harmful_to_pets(Chemical:symbol)\nHarmful_to_pets(\"ammonia\").\n.decl Answer()\nAnswer() :- Contains_chemical(product, \"ammonia\"), Harmful_to_pets(\"ammonia\").\n.output Answer"]}
{"id": 1207, "answer": true, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Wembley Stadium\", 90000).\n.decl Has_ancestor(Person:symbol, Ancestor:symbol)\nHas_ancestor(\"Genghis Khan\", \"Mongols\").\n.decl Answer()\nAnswer() :- Has_capacity(\"Wembley Stadium\", capacity), Has_ancestor(person, \"Mongols\"), capacity >= 50000.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Wembley Stadium\", 90000).\n.decl Has_ancestor(Person:symbol, Ancestor:symbol)\nHas_ancestor(\"Genghis Khan\", \"Mongols\").\n.decl Answer()\nAnswer() :- Has_capacity(\"Wembley Stadium\", capacity), Has_ancestor(person, \"Mongols\"), capacity >= 50000.\n.output Answer"]}
{"id": 1208, "answer": true, "completion": ".decl Celebrates(Event:symbol, Occasion:symbol)\nCelebrates(\"420\", \"marijuana culture\").\nCelebrates(\"Holy Saturday\", \"Christianity\").\n.decl Answer()\nAnswer() :- Celebrates(\"420\", occasion), Celebrates(\"Holy Saturday\", occasion).\n.output Answer", "completions": [".decl Celebrates(Event:symbol, Occasion:symbol)\nCelebrates(\"420\", \"marijuana culture\").\nCelebrates(\"Holy Saturday\", \"Christianity\").\n.decl Answer()\nAnswer() :- Celebrates(\"420\", occasion), Celebrates(\"Holy Saturday\", occasion).\n.output Answer"]}
{"id": 1209, "answer": true, "completion": ".decl Has_planted_flag(Agency:symbol, Country:symbol, Object:symbol)\nHas_planted_flag(\"NASA\", \"USA\", \"moon\").\nHas_planted_flag(\"Soviet space program\", \"USSR\", \"moon\").\nHas_planted_flag(\"CNES\", \"France\", \"Mars\").\n.decl Answer()\nAnswer() :- Has_planted_flag(\"CNES\", \"France\", \"moon\").\n.output Answer", "completions": [".decl Has_planted_flag(Agency:symbol, Country:symbol, Object:symbol)\nHas_planted_flag(\"NASA\", \"USA\", \"moon\").\nHas_planted_flag(\"Soviet space program\", \"USSR\", \"moon\").\nHas_planted_flag(\"CNES\", \"France\", \"Mars\").\n.decl Answer()\nAnswer() :- Has_planted_flag(\"CNES\", \"France\", \"moon\").\n.output Answer"]}
{"id": 1210, "answer": true, "completion": ".decl Required_knowledge(Person:symbol, Field:symbol)\nRequired_knowledge(\"Brad Peyton\", \"film directing\").\nRequired_knowledge(\"Brad Peyton\", \"screenwriting\").\nRequired_knowledge(\"Brad Peyton\", \"visual effects\").\n.decl Answer()\nAnswer() :- Required_knowledge(\"Brad Peyton\", field), field != \"seismology\".\n.output Answer", "completions": [".decl Required_knowledge(Person:symbol, Field:symbol)\nRequired_knowledge(\"Brad Peyton\", \"film directing\").\nRequired_knowledge(\"Brad Peyton\", \"screenwriting\").\nRequired_knowledge(\"Brad Peyton\", \"visual effects\").\n.decl Answer()\nAnswer() :- Required_knowledge(\"Brad Peyton\", field), field != \"seismology\".\n.output Answer"]}
{"id": 1211, "answer": false, "completion": ".decl Welcomes(Group:symbol, University:symbol)\nWelcomes(\"Ku Klux Klan\", \"University of Alabama\").\nWelcomes(\"Ku Klux Klan\", \"University of Mississippi\").\n.decl Is_public(University:symbol)\nIs_public(\"University of Alabama\").\nIs_public(\"University of Mississippi\").\n.decl Answer()\nAnswer() :- Welcomes(\"Ku Klux Klan\", university), Is_public(university).\n.output Answer", "completions": [".decl Welcomes(Group:symbol, University:symbol)\nWelcomes(\"Ku Klux Klan\", \"University of Alabama\").\nWelcomes(\"Ku Klux Klan\", \"University of Mississippi\").\n.decl Is_public(University:symbol)\nIs_public(\"University of Alabama\").\nIs_public(\"University of Mississippi\").\n.decl Answer()\nAnswer() :- Welcomes(\"Ku Klux Klan\", university), Is_public(university).\n.output Answer"]}
{"id": 1212, "answer": false, "completion": ".decl Lasts_n_episodes(Show:symbol, N_episodes:float)\nLasts_n_episodes(\"Desperate Housewives\", 180).\nLasts_n_episodes(\"Superman\", 87).\n.decl Answer()\nAnswer() :- Lasts_n_episodes(\"Desperate Housewives\", n_episodes1), Lasts_n_episodes(\"Superman\", n_episodes2), n_episodes1 = 2*n_episodes2.\n.output Answer", "completions": [".decl Lasts_n_episodes(Show:symbol, N_episodes:float)\nLasts_n_episodes(\"Desperate Housewives\", 180).\nLasts_n_episodes(\"Superman\", 87).\n.decl Answer()\nAnswer() :- Lasts_n_episodes(\"Desperate Housewives\", n_episodes1), Lasts_n_episodes(\"Superman\", n_episodes2), n_episodes1 = 2*n_episodes2.\n.output Answer"]}
{"id": 1213, "answer": false, "completion": ".decl Appears_in_cartoon(Character:symbol, Cartoon:symbol, Year:float)\nAppears_in_cartoon(\"Mickey Mouse\", \"The Carnival Kid\", 1930).\nAppears_in_cartoon(\"Bugs Bunny\", \"A Wild Hare\", 1940).\n.decl Answer()\nAnswer() :- Appears_in_cartoon(\"Mickey Mouse\", cartoon1, year1), Appears_in_cartoon(\"Bugs Bunny\", cartoon2, year2), year1 = year2, cartoon1 != cartoon2.\n.output Answer", "completions": [".decl Appears_in_cartoon(Character:symbol, Cartoon:symbol, Year:float)\nAppears_in_cartoon(\"Mickey Mouse\", \"The Carnival Kid\", 1930).\nAppears_in_cartoon(\"Bugs Bunny\", \"A Wild Hare\", 1940).\n.decl Answer()\nAnswer() :- Appears_in_cartoon(\"Mickey Mouse\", cartoon1, year1), Appears_in_cartoon(\"Bugs Bunny\", cartoon2, year2), year1 = year2, cartoon1 != cartoon2.\n.output Answer"]}
{"id": 1214, "answer": false, "completion": ".decl Competes_in(Category:symbol, Person:symbol)\nCompetes_in(\"math\", \"Terence Tao\").\nCompetes_in(\"rap\", \"Eminem\").\n.decl Wins(Category:symbol, Person:symbol)\nWins(\"math\", \"Terence Tao\").\n.decl Answer()\nAnswer() :- Wins(\"math\", \"Terence Tao\"), Competes_in(\"rap\", \"Eminem\").\n.output Answer", "completions": [".decl Competes_in(Category:symbol, Person:symbol)\nCompetes_in(\"math\", \"Terence Tao\").\nCompetes_in(\"rap\", \"Eminem\").\n.decl Wins(Category:symbol, Person:symbol)\nWins(\"math\", \"Terence Tao\").\n.decl Answer()\nAnswer() :- Wins(\"math\", \"Terence Tao\"), Competes_in(\"rap\", \"Eminem\").\n.output Answer"]}
{"id": 1215, "answer": false, "completion": ".decl Located_in(Entity:symbol, Location:symbol)\nLocated_in(\"Disneyland\", \"Orange County\").\nLocated_in(\"Los Angeles County\", \"California\").\n.decl Associated_with(Entity:symbol, Association:symbol)\nAssociated_with(\"Disneyland\", \"theme park\").\nAssociated_with(\"Disney\", \"entertainment\").\n.decl Answer()\nAnswer() :- Located_in(\"Disneyland\", location), Located_in(\"Los Angeles County\", location), Associated_with(\"Disney\", association).\n.output Answer", "completions": [".decl Located_in(Entity:symbol, Location:symbol)\nLocated_in(\"Disneyland\", \"Orange County\").\nLocated_in(\"Los Angeles County\", \"California\").\n.decl Associated_with(Entity:symbol, Association:symbol)\nAssociated_with(\"Disneyland\", \"theme park\").\nAssociated_with(\"Disney\", \"entertainment\").\n.decl Answer()\nAnswer() :- Located_in(\"Disneyland\", location), Located_in(\"Los Angeles County\", location), Associated_with(\"Disney\", association).\n.output Answer"]}
{"id": 1216, "answer": false, "completion": ".decl Contains_word(Book:symbol, Word:symbol)\nContains_word(\"religious book\", \"Fakir\").\nContains_word(\"religious book\", \"comma\").\n.decl Answer()\nAnswer() :- Contains_word(\"religious book\", \"Fakir\"), !Contains_word(\"religious book\", \"comma\").\n.output Answer", "completions": [".decl Contains_word(Book:symbol, Word:symbol)\nContains_word(\"religious book\", \"Fakir\").\nContains_word(\"religious book\", \"comma\").\n.decl Answer()\nAnswer() :- Contains_word(\"religious book\", \"Fakir\"), !Contains_word(\"religious book\", \"comma\").\n.output Answer"]}
{"id": 1217, "answer": false, "completion": ".decl Contains_food(Dish:symbol, Ingredient:symbol)\nContains_food(\"spaghetti\", \"wheat\").\nContains_food(\"spaghetti\", \"tomato sauce\").\nContains_food(\"salad\", \"lettuce\").\nContains_food(\"salad\", \"tomato\").\n.decl Is_intolerant(Person:symbol, Ingredient:symbol)\nIs_intolerant(\"Celiac sufferer\", \"wheat\").\n.decl Answer()\nAnswer() :- Contains_food(dish, \"wheat\"), Is_intolerant(\"Celiac sufferer\", \"wheat\").\n.output Answer", "completions": [".decl Contains_food(Dish:symbol, Ingredient:symbol)\nContains_food(\"spaghetti\", \"wheat\").\nContains_food(\"spaghetti\", \"tomato sauce\").\nContains_food(\"salad\", \"lettuce\").\nContains_food(\"salad\", \"tomato\").\n.decl Is_intolerant(Person:symbol, Ingredient:symbol)\nIs_intolerant(\"Celiac sufferer\", \"wheat\").\n.decl Answer()\nAnswer() :- Contains_food(dish, \"wheat\"), Is_intolerant(\"Celiac sufferer\", \"wheat\").\n.output Answer"]}
{"id": 1218, "answer": true, "completion": ".decl Animal_product(Animal:symbol, Product:symbol)\nAnimal_product(\"Kobe beef\", \"meat\").\n.decl Used_in_dish(Product:symbol, Dish:symbol)\nUsed_in_dish(\"bacon\", \"BLT\").\n.decl Answer()\nAnswer() :- Animal_product(\"Kobe beef\", product), Used_in_dish(product, \"BLT\").\n.output Answer", "completions": [".decl Animal_product(Animal:symbol, Product:symbol)\nAnimal_product(\"Kobe beef\", \"meat\").\n.decl Used_in_dish(Product:symbol, Dish:symbol)\nUsed_in_dish(\"bacon\", \"BLT\").\n.decl Answer()\nAnswer() :- Animal_product(\"Kobe beef\", product), Used_in_dish(product, \"BLT\").\n.output Answer"]}
{"id": 1219, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"camel\", 200).\nHas_size(\"dog house\", 50).\n.decl Answer()\nAnswer() :- Has_size(\"camel\", size1), Has_size(\"dog house\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"camel\", 200).\nHas_size(\"dog house\", 50).\n.decl Answer()\nAnswer() :- Has_size(\"camel\", size1), Has_size(\"dog house\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1220, "answer": false, "completion": ".decl Has_hair(Animal:symbol)\nHas_hair(\"human\").\nHas_hair(\"cat\").\nHas_hair(\"dog\").\n.decl Has_skeleton(Animal:symbol)\nHas_skeleton(\"human\").\nHas_skeleton(\"cat\").\nHas_skeleton(\"dog\").\n.decl Answer()\nAnswer() :- Has_skeleton(animal), !Has_hair(animal).\n.output Answer", "completions": [".decl Has_hair(Animal:symbol)\nHas_hair(\"human\").\nHas_hair(\"cat\").\nHas_hair(\"dog\").\n.decl Has_skeleton(Animal:symbol)\nHas_skeleton(\"human\").\nHas_skeleton(\"cat\").\nHas_skeleton(\"dog\").\n.decl Answer()\nAnswer() :- Has_skeleton(animal), !Has_hair(animal).\n.output Answer"]}
{"id": 1221, "answer": false, "completion": ".decl Lives_in_city(Animal:symbol, City:symbol)\nLives_in_city(\"warthog\", \"New York City\").\n.decl Appears_on_stage(Animal:symbol, Production:symbol)\nAppears_on_stage(\"warthog\", \"The Lion King\").\n.decl Answer()\nAnswer() :- Lives_in_city(\"warthog\", \"New York City\"), Appears_on_stage(\"warthog\", \"Broadway production\").\n.output Answer", "completions": [".decl Lives_in_city(Animal:symbol, City:symbol)\nLives_in_city(\"warthog\", \"New York City\").\n.decl Appears_on_stage(Animal:symbol, Production:symbol)\nAppears_on_stage(\"warthog\", \"The Lion King\").\n.decl Answer()\nAnswer() :- Lives_in_city(\"warthog\", \"New York City\"), Appears_on_stage(\"warthog\", \"Broadway production\").\n.output Answer"]}
{"id": 1222, "answer": true, "completion": ".decl Belongs_to_group(Person:symbol, Group:symbol)\nBelongs_to_group(\"Opal Tometi\", \"Black Lives Matter\").\nBelongs_to_group(\"Ku Klux Klan\", \"white supremacy\").\n.decl Answer()\nAnswer() :- Belongs_to_group(\"Opal Tometi\", group1), Belongs_to_group(\"Ku Klux Klan\", group2), group1 != group2.\n.output Answer", "completions": [".decl Belongs_to_group(Person:symbol, Group:symbol)\nBelongs_to_group(\"Opal Tometi\", \"Black Lives Matter\").\nBelongs_to_group(\"Ku Klux Klan\", \"white supremacy\").\n.decl Answer()\nAnswer() :- Belongs_to_group(\"Opal Tometi\", group1), Belongs_to_group(\"Ku Klux Klan\", group2), group1 != group2.\n.output Answer"]}
{"id": 1223, "answer": true, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"cory catfish\", \"algae\").\nEats(\"cory catfish\", \"insects\").\nEats(\"cory catfish\", \"worms\").\n.decl Answer()\nAnswer() :- Eats(\"cory catfish\", animal), animal != \"algae\".\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"cory catfish\", \"algae\").\nEats(\"cory catfish\", \"insects\").\nEats(\"cory catfish\", \"worms\").\n.decl Answer()\nAnswer() :- Eats(\"cory catfish\", animal), animal != \"algae\".\n.output Answer"]}
{"id": 1224, "answer": false, "completion": ".decl Lives_in(Person:symbol, Location:symbol)\nLives_in(\"John Muir\", \"Yosemite National Park\").\n.decl Gets_sunlight(Person:symbol)\nGets_sunlight(person) :- Lives_in(person, location), In_sunlight(location).\n.decl In_sunlight(Location:symbol)\nIn_sunlight(\"Yosemite National Park\").\n.decl Has_vitamin_D(Person:symbol)\nHas_vitamin_D(\"John Muir\").\n.decl Answer()\nAnswer() :- Gets_sunlight(\"John Muir\"), !Has_vitamin_D(\"John Muir\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Location:symbol)\nLives_in(\"John Muir\", \"Yosemite National Park\").\n.decl Gets_sunlight(Person:symbol)\nGets_sunlight(person) :- Lives_in(person, location), In_sunlight(location).\n.decl In_sunlight(Location:symbol)\nIn_sunlight(\"Yosemite National Park\").\n.decl Has_vitamin_D(Person:symbol)\nHas_vitamin_D(\"John Muir\").\n.decl Answer()\nAnswer() :- Gets_sunlight(\"John Muir\"), !Has_vitamin_D(\"John Muir\").\n.output Answer"]}
{"id": 1225, "answer": false, "completion": ".decl Belongs_to_religion(Person:symbol, Religion:symbol)\nBelongs_to_religion(\"Orthodox Presbyterian\", \"Presbyterianism\").\n.decl Wears_clothing(Person:symbol, Clothing:symbol)\nWears_clothing(\"1700s judge\", \"judicial robes\").\n.decl Objects_to_clothing(Religion:symbol, Clothing:symbol)\nObjects_to_clothing(\"Presbyterianism\", \"clerical collars\").\n.decl Answer()\nAnswer() :- Belongs_to_religion(\"Orthodox Presbyterian\", religion), Wears_clothing(\"1700s judge\", clothing), Objects_to_clothing(religion, clothing).\n.output Answer", "completions": [".decl Belongs_to_religion(Person:symbol, Religion:symbol)\nBelongs_to_religion(\"Orthodox Presbyterian\", \"Presbyterianism\").\n.decl Wears_clothing(Person:symbol, Clothing:symbol)\nWears_clothing(\"1700s judge\", \"judicial robes\").\n.decl Objects_to_clothing(Religion:symbol, Clothing:symbol)\nObjects_to_clothing(\"Presbyterianism\", \"clerical collars\").\n.decl Answer()\nAnswer() :- Belongs_to_religion(\"Orthodox Presbyterian\", religion), Wears_clothing(\"1700s judge\", clothing), Objects_to_clothing(religion, clothing).\n.output Answer"]}
{"id": 1226, "answer": false, "completion": ".decl Sells(Item:symbol, Store:symbol)\nSells(\"furniture\", \"IKEA\").\nSells(\"meatballs\", \"IKEA\").\nSells(\"furniture\", \"Home Depot\").\nSells(\"meatballs\", \"Walmart\").\n.decl Answer()\nAnswer() :- Sells(\"furniture\", store), Sells(\"meatballs\", store).\n.output Answer", "completions": [".decl Sells(Item:symbol, Store:symbol)\nSells(\"furniture\", \"IKEA\").\nSells(\"meatballs\", \"IKEA\").\nSells(\"furniture\", \"Home Depot\").\nSells(\"meatballs\", \"Walmart\").\n.decl Answer()\nAnswer() :- Sells(\"furniture\", store), Sells(\"meatballs\", store).\n.output Answer"]}
{"id": 1227, "answer": true, "completion": ".decl Produces(Source:symbol, Product:symbol)\nProduces(\"hydropower\", \"electricity\").\nProduces(\"agriculture\", \"chaff\").\n.decl Answer()\nAnswer() :- Produces(source, \"chaff\"), source != \"hydropower\".\n.output Answer", "completions": [".decl Produces(Source:symbol, Product:symbol)\nProduces(\"hydropower\", \"electricity\").\nProduces(\"agriculture\", \"chaff\").\n.decl Answer()\nAnswer() :- Produces(source, \"chaff\"), source != \"hydropower\".\n.output Answer"]}
{"id": 1228, "answer": true, "completion": ".decl Art_style(Show:symbol, Style:symbol)\nArt_style(\"Family Guy\", \"cartoonish\").\nArt_style(\"American Dad\", \"cartoonish\").\n.decl Answer()\nAnswer() :- Art_style(\"Family Guy\", style1), Art_style(\"American Dad\", style2), style1 = style2.\n.output Answer", "completions": [".decl Art_style(Show:symbol, Style:symbol)\nArt_style(\"Family Guy\", \"cartoonish\").\nArt_style(\"American Dad\", \"cartoonish\").\n.decl Answer()\nAnswer() :- Art_style(\"Family Guy\", style1), Art_style(\"American Dad\", style2), style1 = style2.\n.output Answer"]}
{"id": 1229, "answer": true, "completion": ".decl Is_vegan(Person:symbol)\nIs_vegan(\"John\").\n.decl Has_spread(Food:symbol, Spread:symbol)\nHas_spread(\"toast\", \"butter\").\nHas_spread(\"toast\", \"margarine\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Has_spread(\"toast\", spread), spread = \"margarine\".\n.output Answer", "completions": [".decl Is_vegan(Person:symbol)\nIs_vegan(\"John\").\n.decl Has_spread(Food:symbol, Spread:symbol)\nHas_spread(\"toast\", \"butter\").\nHas_spread(\"toast\", \"margarine\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Has_spread(\"toast\", spread), spread = \"margarine\".\n.output Answer"]}
{"id": 1230, "answer": false, "completion": ".decl Runs_on(Computer:symbol, OS:symbol)\nRuns_on(\"Macbook Pro\", \"macOS\").\nRuns_on(\"Dell XPS\", \"Ubuntu\").\nRuns_on(\"Lenovo ThinkPad\", \"Windows\").\nRuns_on(\"HP Spectre\", \"Windows\").\nRuns_on(\"System76 Oryx Pro\", \"Ubuntu\").\n.decl Answer()\nAnswer() :- Runs_on(computer, \"Ubuntu\"), Runs_on(computer2, os), Runs_on(computer2, os2), os != os2, os2 != \"Ubuntu\".\n.output Answer", "completions": [".decl Runs_on(Computer:symbol, OS:symbol)\nRuns_on(\"Macbook Pro\", \"macOS\").\nRuns_on(\"Dell XPS\", \"Ubuntu\").\nRuns_on(\"Lenovo ThinkPad\", \"Windows\").\nRuns_on(\"HP Spectre\", \"Windows\").\nRuns_on(\"System76 Oryx Pro\", \"Ubuntu\").\n.decl Answer()\nAnswer() :- Runs_on(computer, \"Ubuntu\"), Runs_on(computer2, os), Runs_on(computer2, os2), os != os2, os2 != \"Ubuntu\".\n.output Answer"]}
{"id": 1231, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"Common warthog\", \"plants\").\n.decl Survives_in_environment(Animal:symbol, Environment:symbol)\nSurvives_in_environment(\"Common warthog\", \"savannah\").\n.decl Answer()\nAnswer() :- Eats(\"Common warthog\", food), Survives_in_environment(\"Common warthog\", environment), food != \"plants\" ; environment != \"savannah\".\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"Common warthog\", \"plants\").\n.decl Survives_in_environment(Animal:symbol, Environment:symbol)\nSurvives_in_environment(\"Common warthog\", \"savannah\").\n.decl Answer()\nAnswer() :- Eats(\"Common warthog\", food), Survives_in_environment(\"Common warthog\", environment), food != \"plants\" ; environment != \"savannah\".\n.output Answer"]}
{"id": 1232, "answer": true, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"bulk carrier\", \"large cargo capacity\").\nHas_property(\"bulk carrier\", \"low cost\").\nHas_property(\"bromine\", \"toxic\").\nHas_property(\"bromine\", \"volatile\").\n.decl Ideal_for_transport(Object1:symbol, Object2:symbol)\nIdeal_for_transport(\"bulk carrier\", \"bromine\").\n.decl Answer()\nAnswer() :- Ideal_for_transport(object1, object2), Has_property(object1, property1), Has_property(object2, property2), property1 != property2.\n.output Answer", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"bulk carrier\", \"large cargo capacity\").\nHas_property(\"bulk carrier\", \"low cost\").\nHas_property(\"bromine\", \"toxic\").\nHas_property(\"bromine\", \"volatile\").\n.decl Ideal_for_transport(Object1:symbol, Object2:symbol)\nIdeal_for_transport(\"bulk carrier\", \"bromine\").\n.decl Answer()\nAnswer() :- Ideal_for_transport(object1, object2), Has_property(object1, property1), Has_property(object2, property2), property1 != property2.\n.output Answer"]}
{"id": 1233, "answer": false, "completion": ".decl Population(City:symbol, Population:float)\nPopulation(\"Bern\", 133798).\nPopulation(\"Zurich\", 415367).\n.decl Foreigners(City:symbol, Percentage:float)\nForeigners(\"Bern\", 20.5).\nForeigners(\"Zurich\", 31.5).\n.decl Answer()\nAnswer() :- Population(\"Bern\", population), Foreigners(\"Bern\", percentage), population > 100000, percentage < 10.\n.output Answer", "completions": [".decl Population(City:symbol, Population:float)\nPopulation(\"Bern\", 133798).\nPopulation(\"Zurich\", 415367).\n.decl Foreigners(City:symbol, Percentage:float)\nForeigners(\"Bern\", 20.5).\nForeigners(\"Zurich\", 31.5).\n.decl Answer()\nAnswer() :- Population(\"Bern\", population), Foreigners(\"Bern\", percentage), population > 100000, percentage < 10.\n.output Answer"]}
{"id": 1234, "answer": false, "completion": ".decl Movie_about(Movie:symbol, Topic:symbol)\nMovie_about(\"United 93\", \"9/11\").\nMovie_about(\"Flight\", \"airplane crash\").\n.decl Answer()\nAnswer() :- Movie_about(movie, \"United Airlines\"), Movie_about(movie, topic), topic != \"9/11\" , topic != \"airplane crash\".\n.output Answer", "completions": [".decl Movie_about(Movie:symbol, Topic:symbol)\nMovie_about(\"United 93\", \"9/11\").\nMovie_about(\"Flight\", \"airplane crash\").\n.decl Answer()\nAnswer() :- Movie_about(movie, \"United Airlines\"), Movie_about(movie, topic), topic != \"9/11\" , topic != \"airplane crash\".\n.output Answer"]}
{"id": 1235, "answer": false, "completion": ".decl Buried_at(Person:symbol, Church:symbol)\nBuried_at(\"Isaac Newton\", \"Westminster Abbey\").\nBuried_at(\"Charles Dickens\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_at(\"Isaac Newton\", church1), Buried_at(\"Charles Dickens\", church2), church1 = church2.\n.output Answer", "completions": [".decl Buried_at(Person:symbol, Church:symbol)\nBuried_at(\"Isaac Newton\", \"Westminster Abbey\").\nBuried_at(\"Charles Dickens\", \"Westminster Abbey\").\n.decl Answer()\nAnswer() :- Buried_at(\"Isaac Newton\", church1), Buried_at(\"Charles Dickens\", church2), church1 = church2.\n.output Answer"]}
{"id": 1236, "answer": false, "completion": ".decl Precipitation(Location:symbol, Yearly_precipitation:float)\nPrecipitation(\"Snowdon\", 2000).\n.decl Has_height(Object:symbol, Height:float)\nHas_height(\"bowling pin\", 38).\n.decl Answer()\nAnswer() :- Precipitation(\"Snowdon\", precipitation), Has_height(\"bowling pin\", height), precipitation > height.\n.output Answer", "completions": [".decl Precipitation(Location:symbol, Yearly_precipitation:float)\nPrecipitation(\"Snowdon\", 2000).\n.decl Has_height(Object:symbol, Height:float)\nHas_height(\"bowling pin\", 38).\n.decl Answer()\nAnswer() :- Precipitation(\"Snowdon\", precipitation), Has_height(\"bowling pin\", height), precipitation > height.\n.output Answer"]}
{"id": 1237, "answer": false, "completion": ".decl Associated_with(Event:symbol, Item:symbol)\nAssociated_with(\"Thanksgiving\", \"turkey\").\nAssociated_with(\"Thanksgiving\", \"pumpkin pie\").\nAssociated_with(\"Christmas\", \"eggnog\").\nAssociated_with(\"Christmas\", \"fruitcake\").\n.decl Answer()\nAnswer() :- Associated_with(\"Thanksgiving\", item), Associated_with(\"Menthol\", item).\n.output Answer", "completions": [".decl Associated_with(Event:symbol, Item:symbol)\nAssociated_with(\"Thanksgiving\", \"turkey\").\nAssociated_with(\"Thanksgiving\", \"pumpkin pie\").\nAssociated_with(\"Christmas\", \"eggnog\").\nAssociated_with(\"Christmas\", \"fruitcake\").\n.decl Answer()\nAnswer() :- Associated_with(\"Thanksgiving\", item), Associated_with(\"Menthol\", item).\n.output Answer"]}
{"id": 1238, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"jackfruit\", 3).\n.decl Can_cause_injury(Object:symbol)\nCan_cause_injury(\"jackfruit\").\n.decl Answer()\nAnswer() :- Has_weight(\"jackfruit\", weight), weight > 0.5, Can_cause_injury(\"jackfruit\").\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"jackfruit\", 3).\n.decl Can_cause_injury(Object:symbol)\nCan_cause_injury(\"jackfruit\").\n.decl Answer()\nAnswer() :- Has_weight(\"jackfruit\", weight), weight > 0.5, Can_cause_injury(\"jackfruit\").\n.output Answer"]}
{"id": 1239, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"honey badger\", 1).\nHas_size(\"oven\", 2).\n.decl Answer()\nAnswer() :- Has_size(\"honey badger\", size1), Has_size(\"oven\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"honey badger\", 1).\nHas_size(\"oven\", 2).\n.decl Answer()\nAnswer() :- Has_size(\"honey badger\", size1), Has_size(\"oven\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1240, "answer": true, "completion": ".decl Likes(Activity:symbol, Person:symbol)\nLikes(\"skiing\", \"Phineas\").\nLikes(\"building snowmen\", \"Ferb\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"January\", \"winter\").\nIn_season(\"February\", \"winter\").\n.decl Answer()\nAnswer() :- Likes(activity1, \"Phineas\"), Likes(activity2, \"Ferb\"), In_season(month, \"winter\"), activity1 = activity2.\n.output Answer", "completions": [".decl Likes(Activity:symbol, Person:symbol)\nLikes(\"skiing\", \"Phineas\").\nLikes(\"building snowmen\", \"Ferb\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"January\", \"winter\").\nIn_season(\"February\", \"winter\").\n.decl Answer()\nAnswer() :- Likes(activity1, \"Phineas\"), Likes(activity2, \"Ferb\"), In_season(month, \"winter\"), activity1 = activity2.\n.output Answer"]}
{"id": 1241, "answer": false, "completion": ".decl Cares_about(Pirate:symbol, Vitamin:symbol)\nCares_about(\"Blackbeard\", \"rum\").\nCares_about(\"Captain Hook\", \"treasure\").\n.decl Answer()\nAnswer() :- Cares_about(pirate, \"vitamin C\").\n.output Answer", "completions": [".decl Cares_about(Pirate:symbol, Vitamin:symbol)\nCares_about(\"Blackbeard\", \"rum\").\nCares_about(\"Captain Hook\", \"treasure\").\n.decl Answer()\nAnswer() :- Cares_about(pirate, \"vitamin C\").\n.output Answer"]}
{"id": 1242, "answer": true, "completion": ".decl Named_by(Country:symbol, Explorer:symbol)\nNamed_by(\"Saint Vincent and the Grenadines\", \"Christopher Columbus\").\nNamed_by(\"Saint Vincent and the Grenadines\", \"Giovanni Caboto\").\n.decl Answer()\nAnswer() :- Named_by(\"Saint Vincent and the Grenadines\", explorer), explorer = \"Giovanni Caboto\".\n.output Answer", "completions": [".decl Named_by(Country:symbol, Explorer:symbol)\nNamed_by(\"Saint Vincent and the Grenadines\", \"Christopher Columbus\").\nNamed_by(\"Saint Vincent and the Grenadines\", \"Giovanni Caboto\").\n.decl Answer()\nAnswer() :- Named_by(\"Saint Vincent and the Grenadines\", explorer), explorer = \"Giovanni Caboto\".\n.output Answer"]}
{"id": 1243, "answer": true, "completion": ".decl Includes_phrase(Film:symbol, Phrase:symbol)\nIncludes_phrase(\"Psycho\", \"LOL\").\nIncludes_phrase(\"The Birds\", \"OMG\").\n.decl Directed_by(Person:symbol, Film:symbol)\nDirected_by(\"Alfred Hitchcock\", \"Psycho\").\nDirected_by(\"Alfred Hitchcock\", \"The Birds\").\n.decl Answer()\nAnswer() :- Directed_by(\"Alfred Hitchcock\", film), Includes_phrase(film, phrase).\n.output Answer", "completions": [".decl Includes_phrase(Film:symbol, Phrase:symbol)\nIncludes_phrase(\"Psycho\", \"LOL\").\nIncludes_phrase(\"The Birds\", \"OMG\").\n.decl Directed_by(Person:symbol, Film:symbol)\nDirected_by(\"Alfred Hitchcock\", \"Psycho\").\nDirected_by(\"Alfred Hitchcock\", \"The Birds\").\n.decl Answer()\nAnswer() :- Directed_by(\"Alfred Hitchcock\", film), Includes_phrase(film, phrase).\n.output Answer"]}
{"id": 1244, "answer": true, "completion": ".decl Supports(Politician:symbol, Policy:symbol)\nSupports(\"Donald Trump\", \"repeal Obamacare\").\nSupports(\"Paul Ryan\", \"cut Medicaid\").\nSupports(\"Mitt Romney\", \"reform welfare\").\n.decl Opposes(Politician:symbol, Policy:symbol)\nOpposes(\"Bernie Sanders\", \"cut Social Security\").\nOpposes(\"Hillary Clinton\", \"repeal Obamacare\").\n.decl Answer()\nAnswer() :- Supports(politician, \"reform welfare\"), !Opposes(politician, \"reform welfare\").\n.output Answer", "completions": [".decl Supports(Politician:symbol, Policy:symbol)\nSupports(\"Donald Trump\", \"repeal Obamacare\").\nSupports(\"Paul Ryan\", \"cut Medicaid\").\nSupports(\"Mitt Romney\", \"reform welfare\").\n.decl Opposes(Politician:symbol, Policy:symbol)\nOpposes(\"Bernie Sanders\", \"cut Social Security\").\nOpposes(\"Hillary Clinton\", \"repeal Obamacare\").\n.decl Answer()\nAnswer() :- Supports(politician, \"reform welfare\"), !Opposes(politician, \"reform welfare\").\n.output Answer"]}
{"id": 1245, "answer": true, "completion": ".decl Resides_in(Person:symbol, City:symbol)\nResides_in(\"Alice\", \"Cheshire\").\n.decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Bob\", \"French\").\n.decl Answer()\nAnswer() :- Resides_in(person, \"Cheshire\"), Speaks_language(person, \"French\").\n.output Answer", "completions": [".decl Resides_in(Person:symbol, City:symbol)\nResides_in(\"Alice\", \"Cheshire\").\n.decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Bob\", \"French\").\n.decl Answer()\nAnswer() :- Resides_in(person, \"Cheshire\"), Speaks_language(person, \"French\").\n.output Answer"]}
{"id": 1246, "answer": true, "completion": ".decl Prefers(Person:symbol, Food:symbol)\nPrefers(\"bodybuilder\", \"chicken breast\").\nPrefers(\"bodybuilder\", \"maize\").\n.decl Has_protein(Food:symbol, Protein:float)\nHas_protein(\"chicken breast\", 31).\nHas_protein(\"maize\", 9).\n.decl Answer()\nAnswer() :- Prefers(\"bodybuilder\", food1), Has_protein(food1, protein1), Prefers(\"bodybuilder\", food2), Has_protein(food2, protein2), protein1 > protein2.\n.output Answer", "completions": [".decl Prefers(Person:symbol, Food:symbol)\nPrefers(\"bodybuilder\", \"chicken breast\").\nPrefers(\"bodybuilder\", \"maize\").\n.decl Has_protein(Food:symbol, Protein:float)\nHas_protein(\"chicken breast\", 31).\nHas_protein(\"maize\", 9).\n.decl Answer()\nAnswer() :- Prefers(\"bodybuilder\", food1), Has_protein(food1, protein1), Prefers(\"bodybuilder\", food2), Has_protein(food2, protein2), protein1 > protein2.\n.output Answer"]}
{"id": 1247, "answer": true, "completion": ".decl Melts_at_temperature(Material:symbol, Temperature:float)\nMelts_at_temperature(\"compact disc\", 700).\nMelts_at_temperature(\"magma\", 1000).\n.decl Answer()\nAnswer() :- Melts_at_temperature(\"compact disc\", temp1), Melts_at_temperature(\"magma\", temp2), temp1 < temp2.\n.output Answer", "completions": [".decl Melts_at_temperature(Material:symbol, Temperature:float)\nMelts_at_temperature(\"compact disc\", 700).\nMelts_at_temperature(\"magma\", 1000).\n.decl Answer()\nAnswer() :- Melts_at_temperature(\"compact disc\", temp1), Melts_at_temperature(\"magma\", temp2), temp1 < temp2.\n.output Answer"]}
{"id": 1248, "answer": false, "completion": ".decl Born(Person:symbol, Year:float)\nBorn(\"Alexander Hamilton\", 1755).\n.decl Extant(Animal:symbol)\nExtant(\"koala\").\n.decl Answer()\nAnswer() :- Born(\"Alexander Hamilton\", year), year >= 1816, Extant(\"koala\").\n.output Answer", "completions": [".decl Born(Person:symbol, Year:float)\nBorn(\"Alexander Hamilton\", 1755).\n.decl Extant(Animal:symbol)\nExtant(\"koala\").\n.decl Answer()\nAnswer() :- Born(\"Alexander Hamilton\", year), year >= 1816, Extant(\"koala\").\n.output Answer"]}
{"id": 1249, "answer": false, "completion": ".decl Written_by_playwright(Play:symbol, Playwright:symbol)\nWritten_by_playwright(\"Othello\", \"William Shakespeare\").\n.decl Has_study_guide(Play:symbol)\nHas_study_guide(\"Othello\").\n.decl Answer()\nAnswer() :- Written_by_playwright(\"Othello\", \"William Shakespeare\"), !Has_study_guide(\"Othello\").\n.output Answer", "completions": [".decl Written_by_playwright(Play:symbol, Playwright:symbol)\nWritten_by_playwright(\"Othello\", \"William Shakespeare\").\n.decl Has_study_guide(Play:symbol)\nHas_study_guide(\"Othello\").\n.decl Answer()\nAnswer() :- Written_by_playwright(\"Othello\", \"William Shakespeare\"), !Has_study_guide(\"Othello\").\n.output Answer"]}
{"id": 1250, "answer": true, "completion": ".decl Counts(Person:symbol, N_planets:float, Year:float)\nCounts(\"Goofy\", 9, 1930).\n.decl Answer()\nAnswer() :- Counts(\"Goofy\", n_planets, year), year >= 1930, n_planets <= 9.\n.output Answer", "completions": [".decl Counts(Person:symbol, N_planets:float, Year:float)\nCounts(\"Goofy\", 9, 1930).\n.decl Answer()\nAnswer() :- Counts(\"Goofy\", n_planets, year), year >= 1930, n_planets <= 9.\n.output Answer"]}
{"id": 1251, "answer": false, "completion": ".decl From_town(Person:symbol, Town:symbol)\nFrom_town(\"Dracula\", \"Sighisoara\").\n.decl Located_in(Town:symbol, Region:symbol)\nLocated_in(\"Sighisoara\", \"Transylvania\").\nLocated_in(\"Bucharest\", \"Wallachia\").\n.decl Answer()\nAnswer() :- From_town(\"Dracula\", town), Located_in(town, region), region = \"Bucharest\".\n.output Answer", "completions": [".decl From_town(Person:symbol, Town:symbol)\nFrom_town(\"Dracula\", \"Sighisoara\").\n.decl Located_in(Town:symbol, Region:symbol)\nLocated_in(\"Sighisoara\", \"Transylvania\").\nLocated_in(\"Bucharest\", \"Wallachia\").\n.decl Answer()\nAnswer() :- From_town(\"Dracula\", town), Located_in(town, region), region = \"Bucharest\".\n.output Answer"]}
{"id": 1252, "answer": false, "completion": ".decl Includes(Book:symbol, Element:symbol)\nIncludes(\"War of the Worlds\", \"Martians\").\nIncludes(\"War of the Worlds\", \"heat-ray\").\n.decl Answer()\nAnswer() :- Includes(\"War of the Worlds\", \"cosmic rays\"), !.\n.output Answer", "completions": [".decl Includes(Book:symbol, Element:symbol)\nIncludes(\"War of the Worlds\", \"Martians\").\nIncludes(\"War of the Worlds\", \"heat-ray\").\n.decl Answer()\nAnswer() :- Includes(\"War of the Worlds\", \"cosmic rays\"), !.\n.output Answer"]}
{"id": 1253, "answer": true, "completion": ".decl Has_camouflage(Animal:symbol, Camouflage:symbol)\nHas_camouflage(\"mongoose\", \"desert\").\n.decl Answer()\nAnswer() :- Has_camouflage(\"mongoose\", \"desert\").\n.output Answer", "completions": [".decl Has_camouflage(Animal:symbol, Camouflage:symbol)\nHas_camouflage(\"mongoose\", \"desert\").\n.decl Answer()\nAnswer() :- Has_camouflage(\"mongoose\", \"desert\").\n.output Answer"]}
{"id": 1254, "answer": false, "completion": ".decl Treats(Disease:symbol, Treatment:symbol)\nTreats(\"depression\", \"Seroquel\").\n.decl Recommended(Treatment:symbol, Rank:float)\nRecommended(\"Seroquel\", 2).\nRecommended(\"Prozac\", 1).\nRecommended(\"Zoloft\", 3).\n.decl Answer()\nAnswer() :- Treats(\"depression\", treatment), Recommended(treatment, rank), rank = 1.\n.output Answer", "completions": [".decl Treats(Disease:symbol, Treatment:symbol)\nTreats(\"depression\", \"Seroquel\").\n.decl Recommended(Treatment:symbol, Rank:float)\nRecommended(\"Seroquel\", 2).\nRecommended(\"Prozac\", 1).\nRecommended(\"Zoloft\", 3).\n.decl Answer()\nAnswer() :- Treats(\"depression\", treatment), Recommended(treatment, rank), rank = 1.\n.output Answer"]}
{"id": 1255, "answer": true, "completion": ".decl Contains(Place:symbol, Ingredient:symbol)\nContains(\"Taco Bell kitchen\", \"cinnamon\").\n.decl Answer()\nAnswer() :- Contains(\"Taco Bell kitchen\", \"cinnamon\").\n.output Answer", "completions": [".decl Contains(Place:symbol, Ingredient:symbol)\nContains(\"Taco Bell kitchen\", \"cinnamon\").\n.decl Answer()\nAnswer() :- Contains(\"Taco Bell kitchen\", \"cinnamon\").\n.output Answer"]}
{"id": 1256, "answer": true, "completion": ".decl Serves(Merchant:symbol, Item:symbol)\nServes(\"Dunkin Donuts\", \"coffee\").\nServes(\"Dunkin Donuts\", \"donuts\").\n.decl Offers_discount(Person:symbol, Merchant:symbol)\nOffers_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.decl Answer()\nAnswer() :- Offers_discount(person, merchant), Serves(merchant, item), item = \"coffee\".\n.output Answer", "completions": [".decl Serves(Merchant:symbol, Item:symbol)\nServes(\"Dunkin Donuts\", \"coffee\").\nServes(\"Dunkin Donuts\", \"donuts\").\n.decl Offers_discount(Person:symbol, Merchant:symbol)\nOffers_discount(\"United States Air Force\", \"Dunkin Donuts\").\n.decl Answer()\nAnswer() :- Offers_discount(person, merchant), Serves(merchant, item), item = \"coffee\".\n.output Answer"]}
{"id": 1257, "answer": true, "completion": ".decl Submits(Person:symbol, Date:symbol, Submission:symbol)\nSubmits(\"Thiago Moises\", \"May 13 2020\", \"submission\").\n.decl Hurts(Body_part:symbol, Injury:symbol)\nHurts(\"Achilles\", \"tendonitis\").\n.decl Answer()\nAnswer() :- Submits(\"Thiago Moises\", \"May 13 2020\", submission), Hurts(\"Achilles\", injury), Submission != injury.\n.output Answer", "completions": [".decl Submits(Person:symbol, Date:symbol, Submission:symbol)\nSubmits(\"Thiago Moises\", \"May 13 2020\", \"submission\").\n.decl Hurts(Body_part:symbol, Injury:symbol)\nHurts(\"Achilles\", \"tendonitis\").\n.decl Answer()\nAnswer() :- Submits(\"Thiago Moises\", \"May 13 2020\", submission), Hurts(\"Achilles\", injury), Submission != injury.\n.output Answer"]}
{"id": 1258, "answer": true, "completion": ".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"dog\", 4).\nHas_legs(\"cat\", 4).\nHas_legs(\"dragon\", 0).\n.decl Appears_on_calendar(Animal:symbol, Year:symbol)\nAppears_on_calendar(\"dog\", \"2018\").\nAppears_on_calendar(\"dragon\", \"2024\").\n.decl Answer()\nAnswer() :- Has_legs(animal, 4), Appears_on_calendar(animal, year).\n.output Answer", "completions": [".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"dog\", 4).\nHas_legs(\"cat\", 4).\nHas_legs(\"dragon\", 0).\n.decl Appears_on_calendar(Animal:symbol, Year:symbol)\nAppears_on_calendar(\"dog\", \"2018\").\nAppears_on_calendar(\"dragon\", \"2024\").\n.decl Answer()\nAnswer() :- Has_legs(animal, 4), Appears_on_calendar(animal, year).\n.output Answer"]}
{"id": 1259, "answer": true, "completion": ".decl Holds_opinion(Person:symbol, Opinion:symbol)\nHolds_opinion(\"Nancy Pelosi\", \"pro-choice\").\n.decl Answer()\nAnswer() :- Holds_opinion(\"Nancy Pelosi\", opinion), opinion != \"pro-life\".\n.output Answer", "completions": [".decl Holds_opinion(Person:symbol, Opinion:symbol)\nHolds_opinion(\"Nancy Pelosi\", \"pro-choice\").\n.decl Answer()\nAnswer() :- Holds_opinion(\"Nancy Pelosi\", opinion), opinion != \"pro-life\".\n.output Answer"]}
{"id": 1260, "answer": false, "completion": ".decl Burns(Object:symbol)\nBurns(\"The Daily Mirror\").\n.decl Answer()\nAnswer() :- !Burns(\"The Daily Mirror\").\n.output Answer", "completions": [".decl Burns(Object:symbol)\nBurns(\"The Daily Mirror\").\n.decl Answer()\nAnswer() :- !Burns(\"The Daily Mirror\").\n.output Answer"]}
{"id": 1261, "answer": false, "completion": ".decl Performs(Artist:symbol, Genre:symbol)\nPerforms(\"Ludacris\", \"hip hop\").\n.decl Answer()\nAnswer() :- !Performs(\"Ludacris\", \"classical music\").\n.output Answer", "completions": [".decl Performs(Artist:symbol, Genre:symbol)\nPerforms(\"Ludacris\", \"hip hop\").\n.decl Answer()\nAnswer() :- !Performs(\"Ludacris\", \"classical music\").\n.output Answer"]}
{"id": 1262, "answer": true, "completion": ".decl Familiar_with(Person:symbol, Food:symbol)\nFamiliar_with(\"Recep Tayyip Erdoğan\", \"pide\").\nFamiliar_with(\"Recep Tayyip Erdoğan\", \"kebab\").\n.decl Answer()\nAnswer() :- !Familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.output Answer", "completions": [".decl Familiar_with(Person:symbol, Food:symbol)\nFamiliar_with(\"Recep Tayyip Erdoğan\", \"pide\").\nFamiliar_with(\"Recep Tayyip Erdoğan\", \"kebab\").\n.decl Answer()\nAnswer() :- !Familiar_with(\"Recep Tayyip Erdoğan\", \"börek\").\n.output Answer"]}
{"id": 1263, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"2 Euro coin\", 8.5).\nHas_density(\"Red Sea\", 1.024).\n.decl Answer()\nAnswer() :- Has_density(\"2 Euro coin\", density1), Has_density(\"Red Sea\", density2), density1 < density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"2 Euro coin\", 8.5).\nHas_density(\"Red Sea\", 1.024).\n.decl Answer()\nAnswer() :- Has_density(\"2 Euro coin\", density1), Has_density(\"Red Sea\", density2), density1 < density2.\n.output Answer"]}
{"id": 1264, "answer": false, "completion": ".decl Is_color(Color:symbol)\nIs_color(\"red\").\nIs_color(\"orange\").\nIs_color(\"yellow\").\nIs_color(\"green\").\nIs_color(\"blue\").\nIs_color(\"indigo\").\nIs_color(\"violet\").\n.decl Answer()\nAnswer() :- !Is_color(color), color != \"white\".\n.output Answer", "completions": [".decl Is_color(Color:symbol)\nIs_color(\"red\").\nIs_color(\"orange\").\nIs_color(\"yellow\").\nIs_color(\"green\").\nIs_color(\"blue\").\nIs_color(\"indigo\").\nIs_color(\"violet\").\n.decl Answer()\nAnswer() :- !Is_color(color), color != \"white\".\n.output Answer"]}
{"id": 1265, "answer": true, "completion": ".decl Commits_crime(Person:symbol, Crime:symbol)\nCommits_crime(\"Isaac's father\", \"robbery\").\nCommits_crime(\"Marvin Gay Sr.\", \"murder\").\n.decl Answer()\nAnswer() :- Commits_crime(\"Isaac's father\", crime1), Commits_crime(\"Marvin Gay Sr.\", crime2), crime1 != crime2.\n.output Answer", "completions": [".decl Commits_crime(Person:symbol, Crime:symbol)\nCommits_crime(\"Isaac's father\", \"robbery\").\nCommits_crime(\"Marvin Gay Sr.\", \"murder\").\n.decl Answer()\nAnswer() :- Commits_crime(\"Isaac's father\", crime1), Commits_crime(\"Marvin Gay Sr.\", crime2), crime1 != crime2.\n.output Answer"]}
{"id": 1266, "answer": true, "completion": ".decl Likes_food(Animal:symbol, Food:symbol)\nLikes_food(\"owl monkey\", \"insects\").\n.decl Answer()\nAnswer() :- !Likes_food(\"owl monkey\", \"strawberry\").\n.output Answer", "completions": [".decl Likes_food(Animal:symbol, Food:symbol)\nLikes_food(\"owl monkey\", \"insects\").\n.decl Answer()\nAnswer() :- !Likes_food(\"owl monkey\", \"strawberry\").\n.output Answer"]}
{"id": 1267, "answer": true, "completion": ".decl Used_for(Purpose:symbol, Technology:symbol)\nUsed_for(\"whole genome sequencing\", \"genetic analysis\").\nUsed_for(\"COVID-19 testing\", \"PCR\").\nUsed_for(\"PCR\", \"genetic analysis\").\n.decl Answer()\nAnswer() :- Used_for(\"whole genome sequencing\", purpose), Used_for(purpose, \"COVID-19 testing\").\n.output Answer", "completions": [".decl Used_for(Purpose:symbol, Technology:symbol)\nUsed_for(\"whole genome sequencing\", \"genetic analysis\").\nUsed_for(\"COVID-19 testing\", \"PCR\").\nUsed_for(\"PCR\", \"genetic analysis\").\n.decl Answer()\nAnswer() :- Used_for(\"whole genome sequencing\", purpose), Used_for(purpose, \"COVID-19 testing\").\n.output Answer"]}
{"id": 1268, "answer": false, "completion": ".decl Voice_actor(Name:symbol, Character:symbol, Status:symbol)\nVoice_actor(\"Robin Williams\", \"Genie\", \"deceased\").\n.decl Answer()\nAnswer() :- Voice_actor(\"Robin Williams\", \"Genie\", \"alive\"), !Voice_actor(\"Robin Williams\", \"Genie\", \"deceased\").\n.output Answer", "completions": [".decl Voice_actor(Name:symbol, Character:symbol, Status:symbol)\nVoice_actor(\"Robin Williams\", \"Genie\", \"deceased\").\n.decl Answer()\nAnswer() :- Voice_actor(\"Robin Williams\", \"Genie\", \"alive\"), !Voice_actor(\"Robin Williams\", \"Genie\", \"deceased\").\n.output Answer"]}
{"id": 1269, "answer": false, "completion": ".decl Eats(Person:symbol, Food:symbol, Quantity:float)\nEats(\"lumberjack\", \"dosa\", 1).\n.decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"dosa\", 120).\n.decl Answer()\nAnswer() :- Eats(\"lumberjack\", food, quantity1), Has_calories(food, calories1), Eats(\"lumberjack\", food, quantity2), Has_calories(food, calories2), quantity1 + quantity2 >= 3, calories1 + calories2 * (quantity1 + quantity2 - 3) <= 2000.\n.output Answer", "completions": [".decl Eats(Person:symbol, Food:symbol, Quantity:float)\nEats(\"lumberjack\", \"dosa\", 1).\n.decl Has_calories(Food:symbol, Calories:float)\nHas_calories(\"dosa\", 120).\n.decl Answer()\nAnswer() :- Eats(\"lumberjack\", food, quantity1), Has_calories(food, calories1), Eats(\"lumberjack\", food, quantity2), Has_calories(food, calories2), quantity1 + quantity2 >= 3, calories1 + calories2 * (quantity1 + quantity2 - 3) <= 2000.\n.output Answer"]}
{"id": 1270, "answer": false, "completion": ".decl Knows_parents(Species:symbol, Knows: symbol)\nKnows_parents(\"black swan cygnets\", \"yes\").\n.decl Answer()\nAnswer() :- Knows_parents(\"black swan cygnets\", \"yes\").\n.output Answer", "completions": [".decl Knows_parents(Species:symbol, Knows: symbol)\nKnows_parents(\"black swan cygnets\", \"yes\").\n.decl Answer()\nAnswer() :- Knows_parents(\"black swan cygnets\", \"yes\").\n.output Answer"]}
{"id": 1271, "answer": true, "completion": ".decl Born_in(Person:symbol, City:symbol)\nBorn_in(\"Moon Jae-in\", \"Geoje\").\nBorn_in(\"Genghis Khan\", \"Khanbaliq\").\n.decl Answer()\nAnswer() :- Born_in(\"Moon Jae-in\", city), city != \"Khanbaliq\".\n.output Answer", "completions": [".decl Born_in(Person:symbol, City:symbol)\nBorn_in(\"Moon Jae-in\", \"Geoje\").\nBorn_in(\"Genghis Khan\", \"Khanbaliq\").\n.decl Answer()\nAnswer() :- Born_in(\"Moon Jae-in\", city), city != \"Khanbaliq\".\n.output Answer"]}
{"id": 1272, "answer": false, "completion": ".decl Influences(Person1:symbol, Person2:symbol)\nInfluences(\"Daniel LeFever\", \"Kurt Cobain\").\n.decl Causes_of_death(Person:symbol, Cause:symbol)\nCauses_of_death(\"Kurt Cobain\", \"suicide\").\n.decl Answer()\nAnswer() :- Influences(\"Daniel LeFever\", person), Causes_of_death(person, \"suicide\").\n.output Answer", "completions": [".decl Influences(Person1:symbol, Person2:symbol)\nInfluences(\"Daniel LeFever\", \"Kurt Cobain\").\n.decl Causes_of_death(Person:symbol, Cause:symbol)\nCauses_of_death(\"Kurt Cobain\", \"suicide\").\n.decl Answer()\nAnswer() :- Influences(\"Daniel LeFever\", person), Causes_of_death(person, \"suicide\").\n.output Answer"]}
{"id": 1273, "answer": true, "completion": ".decl Has_form_of_government(City:symbol, Form:symbol)\nHas_form_of_government(\"Florence\", \"Republic\").\nHas_form_of_government(\"Vatican City\", \"Theocracy\").\n.decl In_time_period(Event:symbol, Start:symbol, End:symbol)\nIn_time_period(\"Italian Renaissance\", \"14th century\", \"17th century\").\n.decl Answer()\nAnswer() :- Has_form_of_government(\"Florence\", form), In_time_period(\"Italian Renaissance\", start, end), start <= \"15th century\", end >= \"15th century\", form = \"Theocracy\".\n.output Answer", "completions": [".decl Has_form_of_government(City:symbol, Form:symbol)\nHas_form_of_government(\"Florence\", \"Republic\").\nHas_form_of_government(\"Vatican City\", \"Theocracy\").\n.decl In_time_period(Event:symbol, Start:symbol, End:symbol)\nIn_time_period(\"Italian Renaissance\", \"14th century\", \"17th century\").\n.decl Answer()\nAnswer() :- Has_form_of_government(\"Florence\", form), In_time_period(\"Italian Renaissance\", start, end), start <= \"15th century\", end >= \"15th century\", form = \"Theocracy\".\n.output Answer"]}
{"id": 1274, "answer": false, "completion": ".decl Has_n_dwarfs(Story:symbol, N_dwarfs:float)\nHas_n_dwarfs(\"Snow White\", 7).\n.decl Can_play_game(N_players:float)\nCan_play_game(2).\nCan_play_game(3).\nCan_play_game(4).\nCan_play_game(5).\nCan_play_game(6).\nCan_play_game(7).\n.decl Answer()\nAnswer() :- Has_n_dwarfs(\"Snow White\", n_dwarfs), Can_play_game(n_dwarfs).\n.output Answer", "completions": [".decl Has_n_dwarfs(Story:symbol, N_dwarfs:float)\nHas_n_dwarfs(\"Snow White\", 7).\n.decl Can_play_game(N_players:float)\nCan_play_game(2).\nCan_play_game(3).\nCan_play_game(4).\nCan_play_game(5).\nCan_play_game(6).\nCan_play_game(7).\n.decl Answer()\nAnswer() :- Has_n_dwarfs(\"Snow White\", n_dwarfs), Can_play_game(n_dwarfs).\n.output Answer"]}
{"id": 1275, "answer": true, "completion": ".decl Skill_level(Person:symbol, Skill:float)\nSkill_level(\"United States Army Ranger\", 8).\n.decl Difficulty(Level:symbol, Difficulty:float)\nDifficulty(\"Mozambique Drill\", 7).\n.decl Answer()\nAnswer() :- Skill_level(\"United States Army Ranger\", skill), Difficulty(\"Mozambique Drill\", difficulty), skill >= difficulty.\n.output Answer", "completions": [".decl Skill_level(Person:symbol, Skill:float)\nSkill_level(\"United States Army Ranger\", 8).\n.decl Difficulty(Level:symbol, Difficulty:float)\nDifficulty(\"Mozambique Drill\", 7).\n.decl Answer()\nAnswer() :- Skill_level(\"United States Army Ranger\", skill), Difficulty(\"Mozambique Drill\", difficulty), skill >= difficulty.\n.output Answer"]}
{"id": 1276, "answer": false, "completion": ".decl Requires_degree(Occupation:symbol, Degree:symbol)\nRequires_degree(\"construction worker\", \"none\").\n.decl Answer()\nAnswer() :- Requires_degree(\"construction worker\", \"portfolio\"), !.\nAnswer() :- Requires_degree(\"construction worker\", degree), degree != \"none\".\n.output Answer", "completions": [".decl Requires_degree(Occupation:symbol, Degree:symbol)\nRequires_degree(\"construction worker\", \"none\").\n.decl Answer()\nAnswer() :- Requires_degree(\"construction worker\", \"portfolio\"), !.\nAnswer() :- Requires_degree(\"construction worker\", degree), degree != \"none\".\n.output Answer"]}
{"id": 1277, "answer": false, "completion": ".decl Located_in(City:symbol, State:symbol)\nLocated_in(\"San Francisco\", \"California\").\n.decl Has_attraction(City:symbol, Attraction:symbol)\nHas_attraction(\"San Francisco\", \"Golden Gate Park\").\nHas_attraction(\"San Francisco\", \"Alcatraz Island\").\n.decl Answer()\nAnswer() :- Located_in(\"San Francisco\", state), Has_attraction(\"San Francisco\", attraction), attraction = \"nature escape\".\n.output Answer", "completions": [".decl Located_in(City:symbol, State:symbol)\nLocated_in(\"San Francisco\", \"California\").\n.decl Has_attraction(City:symbol, Attraction:symbol)\nHas_attraction(\"San Francisco\", \"Golden Gate Park\").\nHas_attraction(\"San Francisco\", \"Alcatraz Island\").\n.decl Answer()\nAnswer() :- Located_in(\"San Francisco\", state), Has_attraction(\"San Francisco\", attraction), attraction = \"nature escape\".\n.output Answer"]}
{"id": 1278, "answer": false, "completion": ".decl Founded_by(City:symbol, Founder:symbol)\nFounded_by(\"Santa Ana\", \"William H. Spurgeon\").\nFounded_by(\"Anaheim\", \"George Hanson\").\nFounded_by(\"Irvine\", \"James Irvine\").\n.decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"William H. Spurgeon\", \"English\").\nSpeaks_language(\"George Hanson\", \"German\").\nSpeaks_language(\"James Irvine\", \"English\").\n.decl Answer()\nAnswer() :- Founded_by(\"Santa Ana\", founder), Speaks_language(founder, \"Italian\").\n.output Answer", "completions": [".decl Founded_by(City:symbol, Founder:symbol)\nFounded_by(\"Santa Ana\", \"William H. Spurgeon\").\nFounded_by(\"Anaheim\", \"George Hanson\").\nFounded_by(\"Irvine\", \"James Irvine\").\n.decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"William H. Spurgeon\", \"English\").\nSpeaks_language(\"George Hanson\", \"German\").\nSpeaks_language(\"James Irvine\", \"English\").\n.decl Answer()\nAnswer() :- Founded_by(\"Santa Ana\", founder), Speaks_language(founder, \"Italian\").\n.output Answer"]}
{"id": 1279, "answer": true, "completion": ".decl Involved_in_war(Person:symbol, War:symbol)\nInvolved_in_war(\"Napoleon III\", \"American Civil War\").\n.decl Answer()\nAnswer() :- Involved_in_war(\"French person\", \"American Civil War\").\n.output Answer", "completions": [".decl Involved_in_war(Person:symbol, War:symbol)\nInvolved_in_war(\"Napoleon III\", \"American Civil War\").\n.decl Answer()\nAnswer() :- Involved_in_war(\"French person\", \"American Civil War\").\n.output Answer"]}
{"id": 1280, "answer": false, "completion": ".decl Fought_in_war(Military_force:symbol, War:symbol)\nFought_in_war(\"Royal Air Force\", \"World War II\").\nFought_in_war(\"British Army\", \"Boxer Rebellion\").\n.decl Answer()\nAnswer() :- Fought_in_war(\"Royal Air Force\", war), Fought_in_war(\"British Army\", war2), war != war2.\n.output Answer", "completions": [".decl Fought_in_war(Military_force:symbol, War:symbol)\nFought_in_war(\"Royal Air Force\", \"World War II\").\nFought_in_war(\"British Army\", \"Boxer Rebellion\").\n.decl Answer()\nAnswer() :- Fought_in_war(\"Royal Air Force\", war), Fought_in_war(\"British Army\", war2), war != war2.\n.output Answer"]}
{"id": 1281, "answer": false, "completion": ".decl Part_of(Event:symbol, Holiday:symbol)\nPart_of(\"Elijah\", \"Passover\").\nPart_of(\"Elijah\", \"Sukkot\").\n.decl Answer()\nAnswer() :- Part_of(\"Elijah\", holiday).\n.output Answer", "completions": [".decl Part_of(Event:symbol, Holiday:symbol)\nPart_of(\"Elijah\", \"Passover\").\nPart_of(\"Elijah\", \"Sukkot\").\n.decl Answer()\nAnswer() :- Part_of(\"Elijah\", holiday).\n.output Answer"]}
{"id": 1282, "answer": true, "completion": ".decl Is_visible_from(Location:symbol, Object:symbol)\nIs_visible_from(\"Colossus of Rhodes\", \"Mediterranean Sea\").\n.decl Is_higher_than(Object1:symbol, Object2:symbol)\nIs_higher_than(\"Peak of the Andes\", \"Mediterranean Sea\").\n.decl Answer()\nAnswer() :- Is_visible_from(location, \"Peak of the Andes\"), Is_higher_than(\"Peak of the Andes\", object), Is_visible_from(location, object), object != \"Mediterranean Sea\".\n.output Answer", "completions": [".decl Is_visible_from(Location:symbol, Object:symbol)\nIs_visible_from(\"Colossus of Rhodes\", \"Mediterranean Sea\").\n.decl Is_higher_than(Object1:symbol, Object2:symbol)\nIs_higher_than(\"Peak of the Andes\", \"Mediterranean Sea\").\n.decl Answer()\nAnswer() :- Is_visible_from(location, \"Peak of the Andes\"), Is_higher_than(\"Peak of the Andes\", object), Is_visible_from(location, object), object != \"Mediterranean Sea\".\n.output Answer"]}
{"id": 1283, "answer": false, "completion": ".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Louvre\", 1000000000).\n.decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"George Soros\", 8600000000).\n.decl Answer()\nAnswer() :- Has_value(\"Louvre\", value), Has_net_worth(\"George Soros\", net_worth), value <= net_worth.\n.output Answer", "completions": [".decl Has_value(Object:symbol, Value:float)\nHas_value(\"Louvre\", 1000000000).\n.decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"George Soros\", 8600000000).\n.decl Answer()\nAnswer() :- Has_value(\"Louvre\", value), Has_net_worth(\"George Soros\", net_worth), value <= net_worth.\n.output Answer"]}
{"id": 1284, "answer": true, "completion": ".decl Supports(Party:symbol, Policy:symbol)\nSupports(\"Communist Party of the Soviet Union\", \"socialism\").\n.decl Opposes(Party:symbol, Policy:symbol)\nOpposes(\"Communist Party of the Soviet Union\", \"capitalism\").\n.decl Answer()\nAnswer() :- Supports(\"Communist Party of the Soviet Union\", policy), policy != \"Trickle Down Economics\".\nAnswer() :- Opposes(\"Communist Party of the Soviet Union\", policy), policy = \"Trickle Down Economics\".\n.output Answer", "completions": [".decl Supports(Party:symbol, Policy:symbol)\nSupports(\"Communist Party of the Soviet Union\", \"socialism\").\n.decl Opposes(Party:symbol, Policy:symbol)\nOpposes(\"Communist Party of the Soviet Union\", \"capitalism\").\n.decl Answer()\nAnswer() :- Supports(\"Communist Party of the Soviet Union\", policy), policy != \"Trickle Down Economics\".\nAnswer() :- Opposes(\"Communist Party of the Soviet Union\", policy), policy = \"Trickle Down Economics\".\n.output Answer"]}
{"id": 1285, "answer": false, "completion": ".decl Appears_in(Media:symbol, Character:symbol, Animal:symbol)\nAppears_in(\"You're a Good Sport, Charlie Brown\", \"Peppermint Patty\", \"hedgehog\").\nAppears_in(\"You're a Good Sport, Charlie Brown\", \"Snoopy\", \"beagle\").\nAppears_in(\"You're a Good Sport, Charlie Brown\", \"Lucy\", \"poodle\").\n.decl Is_hound(Animal:symbol)\nIs_hound(\"beagle\").\n.decl Answer()\nAnswer() :- Appears_in(\"You're a Good Sport, Charlie Brown\", character, animal), Is_hound(animal), character != \"Snoopy\".\n.output Answer", "completions": [".decl Appears_in(Media:symbol, Character:symbol, Animal:symbol)\nAppears_in(\"You're a Good Sport, Charlie Brown\", \"Peppermint Patty\", \"hedgehog\").\nAppears_in(\"You're a Good Sport, Charlie Brown\", \"Snoopy\", \"beagle\").\nAppears_in(\"You're a Good Sport, Charlie Brown\", \"Lucy\", \"poodle\").\n.decl Is_hound(Animal:symbol)\nIs_hound(\"beagle\").\n.decl Answer()\nAnswer() :- Appears_in(\"You're a Good Sport, Charlie Brown\", character, animal), Is_hound(animal), character != \"Snoopy\".\n.output Answer"]}
{"id": 1286, "answer": false, "completion": ".decl Reigns_over(Monarch:symbol, Territory:symbol)\nReigns_over(\"Elizabeth II\", \"United Kingdom\").\nReigns_over(\"Elizabeth II\", \"Canada\").\nReigns_over(\"Elizabeth II\", \"Australia\").\nReigns_over(\"Elizabeth II\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Reigns_over(\"Elizabeth II\", \"Balearic Islands\").\n.output Answer", "completions": [".decl Reigns_over(Monarch:symbol, Territory:symbol)\nReigns_over(\"Elizabeth II\", \"United Kingdom\").\nReigns_over(\"Elizabeth II\", \"Canada\").\nReigns_over(\"Elizabeth II\", \"Australia\").\nReigns_over(\"Elizabeth II\", \"New Zealand\").\n.decl Answer()\nAnswer() :- Reigns_over(\"Elizabeth II\", \"Balearic Islands\").\n.output Answer"]}
{"id": 1287, "answer": true, "completion": ".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Eddie Murphy\", 10).\n.decl Area_of_space(Space:symbol, Area:float)\nArea_of_space(\"basketball court\", 420).\n.decl Answer()\nAnswer() :- Has_n_children(\"Eddie Murphy\", n_children), Area_of_space(\"basketball court\", area), n_children * 10 <= area.\n.output Answer", "completions": [".decl Has_n_children(Person:symbol, N_children:float)\nHas_n_children(\"Eddie Murphy\", 10).\n.decl Area_of_space(Space:symbol, Area:float)\nArea_of_space(\"basketball court\", 420).\n.decl Answer()\nAnswer() :- Has_n_children(\"Eddie Murphy\", n_children), Area_of_space(\"basketball court\", area), n_children * 10 <= area.\n.output Answer"]}
{"id": 1288, "answer": false, "completion": ".decl Lives_through(Event:symbol, Year:float)\nLives_through(\"Thirty Years' War\", 1618).\nLives_through(\"Thirty Years' War\", 1648).\n.decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"white cockatoo\", \"white\").\n.decl Answer()\nAnswer() :- Lives_through(\"Thirty Years' War\", year1), Has_color(\"white cockatoo\", color), year1 <= 0, color = \"white\".\n.output Answer", "completions": [".decl Lives_through(Event:symbol, Year:float)\nLives_through(\"Thirty Years' War\", 1618).\nLives_through(\"Thirty Years' War\", 1648).\n.decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"white cockatoo\", \"white\").\n.decl Answer()\nAnswer() :- Lives_through(\"Thirty Years' War\", year1), Has_color(\"white cockatoo\", color), year1 <= 0, color = \"white\".\n.output Answer"]}
{"id": 1289, "answer": false, "completion": ".decl Contains(Thing:symbol, Substance:symbol)\nContains(\"house\", \"aloe vera\").\n.decl Ideal_for(Animal:symbol, Condition:symbol)\nIdeal_for(\"Unsinkable Sam\", \"healthy skin\").\nIdeal_for(\"Unsinkable Sam\", \"good digestion\").\n.decl Answer()\nAnswer() :- Contains(\"house\", \"aloe vera\"), Ideal_for(\"Unsinkable Sam\", \"healthy skin\"), Ideal_for(\"Unsinkable Sam\", \"good digestion\").\n.output Answer", "completions": [".decl Contains(Thing:symbol, Substance:symbol)\nContains(\"house\", \"aloe vera\").\n.decl Ideal_for(Animal:symbol, Condition:symbol)\nIdeal_for(\"Unsinkable Sam\", \"healthy skin\").\nIdeal_for(\"Unsinkable Sam\", \"good digestion\").\n.decl Answer()\nAnswer() :- Contains(\"house\", \"aloe vera\"), Ideal_for(\"Unsinkable Sam\", \"healthy skin\"), Ideal_for(\"Unsinkable Sam\", \"good digestion\").\n.output Answer"]}
{"id": 1290, "answer": false, "completion": ".decl Spouse(Person1:symbol, Person2:symbol)\nSpouse(\"Linus Torvalds\", \"Tove Torvalds\").\n.decl Gender(Person:symbol, Gender:symbol)\nGender(\"Linus Torvalds\", \"male\").\nGender(\"Tove Torvalds\", \"female\").\n.decl Martial_arts_skill(Person:symbol, Skill:float)\nMartial_arts_skill(\"Linus Torvalds\", 8).\n.decl Answer()\nAnswer() :- Spouse(\"Linus Torvalds\", spouse), Gender(spouse, \"female\"), Martial_arts_skill(spouse, skill), skill < 5.\n.output Answer", "completions": [".decl Spouse(Person1:symbol, Person2:symbol)\nSpouse(\"Linus Torvalds\", \"Tove Torvalds\").\n.decl Gender(Person:symbol, Gender:symbol)\nGender(\"Linus Torvalds\", \"male\").\nGender(\"Tove Torvalds\", \"female\").\n.decl Martial_arts_skill(Person:symbol, Skill:float)\nMartial_arts_skill(\"Linus Torvalds\", 8).\n.decl Answer()\nAnswer() :- Spouse(\"Linus Torvalds\", spouse), Gender(spouse, \"female\"), Martial_arts_skill(spouse, skill), skill < 5.\n.output Answer"]}
{"id": 1291, "answer": false, "completion": ".decl Licensed_doctor(Doctor:symbol, State:symbol)\nLicensed_doctor(\"Rand Paul\", \"Kentucky\").\n.decl Resides_in(Person:symbol, State:symbol)\nResides_in(\"New Yorker\", \"New York\").\n.decl Answer()\nAnswer() :- Resides_in(person, state), Licensed_doctor(\"Rand Paul\", state).\n.output Answer", "completions": [".decl Licensed_doctor(Doctor:symbol, State:symbol)\nLicensed_doctor(\"Rand Paul\", \"Kentucky\").\n.decl Resides_in(Person:symbol, State:symbol)\nResides_in(\"New Yorker\", \"New York\").\n.decl Answer()\nAnswer() :- Resides_in(person, state), Licensed_doctor(\"Rand Paul\", state).\n.output Answer"]}
{"id": 1292, "answer": true, "completion": ".decl Wins_award(Person:symbol, Award:symbol)\nWins_award(\"Cheb Mami\", \"World Music Award\").\n.decl Eligible_for_award(Person:symbol, Award:symbol)\nEligible_for_award(\"Cheb Mami\", \"Pulitzer Prize for musical composition\").\n.decl Answer()\nAnswer() :- Eligible_for_award(\"Cheb Mami\", award), !Wins_award(\"Cheb Mami\", award).\n.output Answer", "completions": [".decl Wins_award(Person:symbol, Award:symbol)\nWins_award(\"Cheb Mami\", \"World Music Award\").\n.decl Eligible_for_award(Person:symbol, Award:symbol)\nEligible_for_award(\"Cheb Mami\", \"Pulitzer Prize for musical composition\").\n.decl Answer()\nAnswer() :- Eligible_for_award(\"Cheb Mami\", award), !Wins_award(\"Cheb Mami\", award).\n.output Answer"]}
{"id": 1293, "answer": true, "completion": ".decl Fought_in(Movie:symbol, Character:symbol)\nFought_in(\"Captain America: Civil War\", \"Spiderman\").\nFought_in(\"Captain America: Civil War\", \"Falcon\").\nFought_in(\"Avengers: Infinity War\", \"Spiderman\").\nFought_in(\"Avengers: Infinity War\", \"Falcon\").\nFought_in(\"Avengers: Endgame\", \"Spiderman\").\nFought_in(\"Avengers: Endgame\", \"Falcon\").\n.decl Answer()\nAnswer() :- Fought_in(movie, \"Spiderman\"), Fought_in(movie, \"Falcon\"), movie != \"Spiderman: Homecoming\".\n.output Answer", "completions": [".decl Fought_in(Movie:symbol, Character:symbol)\nFought_in(\"Captain America: Civil War\", \"Spiderman\").\nFought_in(\"Captain America: Civil War\", \"Falcon\").\nFought_in(\"Avengers: Infinity War\", \"Spiderman\").\nFought_in(\"Avengers: Infinity War\", \"Falcon\").\nFought_in(\"Avengers: Endgame\", \"Spiderman\").\nFought_in(\"Avengers: Endgame\", \"Falcon\").\n.decl Answer()\nAnswer() :- Fought_in(movie, \"Spiderman\"), Fought_in(movie, \"Falcon\"), movie != \"Spiderman: Homecoming\".\n.output Answer"]}
{"id": 1294, "answer": true, "completion": ".decl Character(Person:symbol, Show:symbol, Trait:symbol)\nCharacter(\"Steve Carell\", \"The Office\", \"leadership skills\").\n.decl Answer()\nAnswer() :- Character(\"Steve Carell\", \"The Office\", \"leadership skills\").\n.output Answer", "completions": [".decl Character(Person:symbol, Show:symbol, Trait:symbol)\nCharacter(\"Steve Carell\", \"The Office\", \"leadership skills\").\n.decl Answer()\nAnswer() :- Character(\"Steve Carell\", \"The Office\", \"leadership skills\").\n.output Answer"]}
{"id": 1295, "answer": false, "completion": ".decl Appears_in_movie(Character:symbol, Movie:symbol)\nAppears_in_movie(\"milliner\", \"Alice in Wonderland (1951 film)\").\n.decl Needs_medication(Character:symbol, Medication:symbol)\nNeeds_medication(\"milliner\", \"succimer\").\n.decl Answer()\nAnswer() :- Appears_in_movie(\"milliner\", \"Alice in Wonderland (1951 film)\"), Needs_medication(\"milliner\", \"succimer\").\n.output Answer", "completions": [".decl Appears_in_movie(Character:symbol, Movie:symbol)\nAppears_in_movie(\"milliner\", \"Alice in Wonderland (1951 film)\").\n.decl Needs_medication(Character:symbol, Medication:symbol)\nNeeds_medication(\"milliner\", \"succimer\").\n.decl Answer()\nAnswer() :- Appears_in_movie(\"milliner\", \"Alice in Wonderland (1951 film)\"), Needs_medication(\"milliner\", \"succimer\").\n.output Answer"]}
{"id": 1296, "answer": false, "completion": ".decl Prevented_by(Person:symbol, Drug:symbol)\nPrevented_by(\"Amy Winehouse\", \"Narcan\").\n.decl Answer()\nAnswer() :- Prevented_by(\"Amy Winehouse\", drug).\n.output Answer", "completions": [".decl Prevented_by(Person:symbol, Drug:symbol)\nPrevented_by(\"Amy Winehouse\", \"Narcan\").\n.decl Answer()\nAnswer() :- Prevented_by(\"Amy Winehouse\", drug).\n.output Answer"]}
{"id": 1297, "answer": true, "completion": ".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Alexander Graham Bell\", \"telephone\").\n.decl Has_feature(Invention:symbol, Feature:symbol)\nHas_feature(\"telephone\", \"voice transmission\").\nHas_feature(\"telephone\", \"call waiting\").\n.decl Answer()\nAnswer() :- Invented(\"Alexander Graham Bell\", invention), Has_feature(invention, \"call waiting\").\n.output Answer", "completions": [".decl Invented(Person:symbol, Invention:symbol)\nInvented(\"Alexander Graham Bell\", \"telephone\").\n.decl Has_feature(Invention:symbol, Feature:symbol)\nHas_feature(\"telephone\", \"voice transmission\").\nHas_feature(\"telephone\", \"call waiting\").\n.decl Answer()\nAnswer() :- Invented(\"Alexander Graham Bell\", invention), Has_feature(invention, \"call waiting\").\n.output Answer"]}
{"id": 1298, "answer": false, "completion": ".decl Owns(Person:symbol, Comic:symbol)\nOwns(\"Bart Simpson\", \"The Simpsons Comics\").\nOwns(\"Bart Simpson\", \"Bartman\").\n.decl Features(Character:symbol, Comic:symbol)\nFeatures(\"The Joker\", \"Batman\").\n.decl Answer()\nAnswer() :- Owns(\"Bart Simpson\", comic), Features(\"The Joker\", comic).\n.output Answer", "completions": [".decl Owns(Person:symbol, Comic:symbol)\nOwns(\"Bart Simpson\", \"The Simpsons Comics\").\nOwns(\"Bart Simpson\", \"Bartman\").\n.decl Features(Character:symbol, Comic:symbol)\nFeatures(\"The Joker\", \"Batman\").\n.decl Answer()\nAnswer() :- Owns(\"Bart Simpson\", comic), Features(\"The Joker\", comic).\n.output Answer"]}
{"id": 1299, "answer": true, "completion": ".decl Tastes_like(Meat:symbol, Flavor:symbol)\nTastes_like(\"venison\", \"game\").\nTastes_like(\"beef\", \"not game\").\n.decl Customer_satisfaction(Customer:symbol, Satisfaction:float)\nCustomer_satisfaction(\"John\", 0.8).\n.decl Answer()\nAnswer() :- Tastes_like(meat, \"game\"), Customer_satisfaction(customer, satisfaction), satisfaction >= 0.5.\n.output Answer", "completions": [".decl Tastes_like(Meat:symbol, Flavor:symbol)\nTastes_like(\"venison\", \"game\").\nTastes_like(\"beef\", \"not game\").\n.decl Customer_satisfaction(Customer:symbol, Satisfaction:float)\nCustomer_satisfaction(\"John\", 0.8).\n.decl Answer()\nAnswer() :- Tastes_like(meat, \"game\"), Customer_satisfaction(customer, satisfaction), satisfaction >= 0.5.\n.output Answer"]}
{"id": 1300, "answer": false, "completion": ".decl Original_character(Character:symbol)\nOriginal_character(\"Big Bird\").\nOriginal_character(\"Cookie Monster\").\nOriginal_character(\"Kermit the Frog\").\nOriginal_character(\"Oscar the Grouch\").\nOriginal_character(\"Ernie\").\nOriginal_character(\"Bert\").\n.decl Answer()\nAnswer() :- Original_character(\"Elmo\"), !.\n.output Answer", "completions": [".decl Original_character(Character:symbol)\nOriginal_character(\"Big Bird\").\nOriginal_character(\"Cookie Monster\").\nOriginal_character(\"Kermit the Frog\").\nOriginal_character(\"Oscar the Grouch\").\nOriginal_character(\"Ernie\").\nOriginal_character(\"Bert\").\n.decl Answer()\nAnswer() :- Original_character(\"Elmo\"), !.\n.output Answer"]}
{"id": 1301, "answer": true, "completion": ".decl Eats(Meal:symbol, Diet:symbol)\nEats(\"anchovy pizza\", \"omnivore\").\nEats(\"anchovy pizza\", \"pescatarian\").\nEats(\"anchovy pizza\", \"vegetarian\").\nEats(\"anchovy pizza\", \"vegan\").\n.decl Answer()\nAnswer() :- Eats(\"anchovy pizza\", diet), diet = \"pescatarian\".\n.output Answer", "completions": [".decl Eats(Meal:symbol, Diet:symbol)\nEats(\"anchovy pizza\", \"omnivore\").\nEats(\"anchovy pizza\", \"pescatarian\").\nEats(\"anchovy pizza\", \"vegetarian\").\nEats(\"anchovy pizza\", \"vegan\").\n.decl Answer()\nAnswer() :- Eats(\"anchovy pizza\", diet), diet = \"pescatarian\".\n.output Answer"]}
{"id": 1302, "answer": true, "completion": ".decl Stays_on(Character:symbol, Location:symbol)\nStays_on(\"Grandpa Phil\", \"porch\").\nStays_on(\"Ernie\", \"stoop\").\nStays_on(\"Oskar\", \"stoop\").\n.decl Answer()\nAnswer() :- Stays_on(character, \"porch\").\n.output Answer", "completions": [".decl Stays_on(Character:symbol, Location:symbol)\nStays_on(\"Grandpa Phil\", \"porch\").\nStays_on(\"Ernie\", \"stoop\").\nStays_on(\"Oskar\", \"stoop\").\n.decl Answer()\nAnswer() :- Stays_on(character, \"porch\").\n.output Answer"]}
{"id": 1303, "answer": false, "completion": ".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"shrimp scampi\", \"shrimp\").\nContains(\"shrimp scampi\", \"garlic\").\nContains(\"shrimp scampi\", \"butter\").\nContains(\"shrimp scampi\", \"lemon juice\").\nContains(\"shrimp scampi\", \"white wine\").\nContains(\"shrimp scampi\", \"parsley\").\nContains(\"shrimp scampi\", \"pasta\").\n.decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"plastic bag\", \"plastic\").\nHas_material(\"plastic container\", \"plastic\").\n.decl Answer()\nAnswer() :- Contains(\"shrimp scampi\", ingredient), Has_material(\"plastic\", material), !Contains(ingredient, material).\n.output Answer", "completions": [".decl Contains(Food:symbol, Ingredient:symbol)\nContains(\"shrimp scampi\", \"shrimp\").\nContains(\"shrimp scampi\", \"garlic\").\nContains(\"shrimp scampi\", \"butter\").\nContains(\"shrimp scampi\", \"lemon juice\").\nContains(\"shrimp scampi\", \"white wine\").\nContains(\"shrimp scampi\", \"parsley\").\nContains(\"shrimp scampi\", \"pasta\").\n.decl Has_material(Object:symbol, Material:symbol)\nHas_material(\"plastic bag\", \"plastic\").\nHas_material(\"plastic container\", \"plastic\").\n.decl Answer()\nAnswer() :- Contains(\"shrimp scampi\", ingredient), Has_material(\"plastic\", material), !Contains(ingredient, material).\n.output Answer"]}
{"id": 1304, "answer": true, "completion": ".decl Killed_for_reason(Animal:symbol, Reason:symbol)\nKilled_for_reason(\"rhinoceros\", \"traditional medicine\").\nKilled_for_reason(\"tiger\", \"traditional medicine\").\nKilled_for_reason(\"elephant\", \"ivory trade\").\n.decl Answer()\nAnswer() :- Killed_for_reason(\"rhinoceros\", \"traditional medicine\").\n.output Answer", "completions": [".decl Killed_for_reason(Animal:symbol, Reason:symbol)\nKilled_for_reason(\"rhinoceros\", \"traditional medicine\").\nKilled_for_reason(\"tiger\", \"traditional medicine\").\nKilled_for_reason(\"elephant\", \"ivory trade\").\n.decl Answer()\nAnswer() :- Killed_for_reason(\"rhinoceros\", \"traditional medicine\").\n.output Answer"]}
{"id": 1305, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"newborn kitten\", 0.2).\nHas_size(\"Amtrak coach seat\", 1.5).\n.decl Answer()\nAnswer() :- Has_size(\"newborn kitten\", size1), Has_size(\"Amtrak coach seat\", size2), size1*3 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"newborn kitten\", 0.2).\nHas_size(\"Amtrak coach seat\", 1.5).\n.decl Answer()\nAnswer() :- Has_size(\"newborn kitten\", size1), Has_size(\"Amtrak coach seat\", size2), size1*3 <= size2.\n.output Answer"]}
{"id": 1306, "answer": true, "completion": ".decl Has_area(Location:symbol, Area:float)\nHas_area(\"Persian Gulf\", 251000).\nHas_area(\"New Jersey\", 22591).\n.decl Answer()\nAnswer() :- Has_area(\"Persian Gulf\", area1), Has_area(\"New Jersey\", area2), area1 <= area2.\n.output Answer", "completions": [".decl Has_area(Location:symbol, Area:float)\nHas_area(\"Persian Gulf\", 251000).\nHas_area(\"New Jersey\", 22591).\n.decl Answer()\nAnswer() :- Has_area(\"Persian Gulf\", area1), Has_area(\"New Jersey\", area2), area1 <= area2.\n.output Answer"]}
{"id": 1307, "answer": true, "completion": ".decl Is_era(Term:symbol, Era:symbol)\nIs_era(\"Jurassic\", \"Mesozoic\").\n.decl Is_destination(Location:symbol)\nIs_destination(\"Jurassic World\").\n.decl Answer()\nAnswer() :- Is_era(\"Jurassic\", era), Is_destination(destination), era = \"Mesozoic\", destination = \"Jurassic World\".\n.output Answer", "completions": [".decl Is_era(Term:symbol, Era:symbol)\nIs_era(\"Jurassic\", \"Mesozoic\").\n.decl Is_destination(Location:symbol)\nIs_destination(\"Jurassic World\").\n.decl Answer()\nAnswer() :- Is_era(\"Jurassic\", era), Is_destination(destination), era = \"Mesozoic\", destination = \"Jurassic World\".\n.output Answer"]}
{"id": 1308, "answer": true, "completion": ".decl Believes_in_religious_text(Religion:symbol, Text:symbol)\nBelieves_in_religious_text(\"Judaism\", \"Torah\").\nBelieves_in_religious_text(\"Christianity\", \"New Testament\").\n.decl Mentions_angels(Text:symbol, Angel:symbol)\nMentions_angels(\"New Testament\", \"Gabriel\").\nMentions_angels(\"New Testament\", \"Michael\").\n.decl Answer()\nAnswer() :- Believes_in_religious_text(\"Judaism\", text), Mentions_angels(text, \"Gabriel\").\nAnswer() :- Believes_in_religious_text(\"Judaism\", text), Mentions_angels(text, \"Michael\").\n.output Answer", "completions": [".decl Believes_in_religious_text(Religion:symbol, Text:symbol)\nBelieves_in_religious_text(\"Judaism\", \"Torah\").\nBelieves_in_religious_text(\"Christianity\", \"New Testament\").\n.decl Mentions_angels(Text:symbol, Angel:symbol)\nMentions_angels(\"New Testament\", \"Gabriel\").\nMentions_angels(\"New Testament\", \"Michael\").\n.decl Answer()\nAnswer() :- Believes_in_religious_text(\"Judaism\", text), Mentions_angels(text, \"Gabriel\").\nAnswer() :- Believes_in_religious_text(\"Judaism\", text), Mentions_angels(text, \"Michael\").\n.output Answer"]}
{"id": 1309, "answer": false, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Elizabeth II\", \"English\").\n.decl Answer()\nAnswer() :- !Speaks_language(\"Elizabeth II\", \"Arabic\").\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Elizabeth II\", \"English\").\n.decl Answer()\nAnswer() :- !Speaks_language(\"Elizabeth II\", \"Arabic\").\n.output Answer"]}
{"id": 1310, "answer": false, "completion": ".decl Runs_for_office(Person:symbol, Office:symbol, Year:float)\nRuns_for_office(\"Joe Biden\", \"President\", 2020).\n.decl Answer()\nAnswer() :- Runs_for_office(\"Kane\", \"President\", 2020), Runs_for_office(\"Joe Biden\", \"President\", 2020).\n.output Answer", "completions": [".decl Runs_for_office(Person:symbol, Office:symbol, Year:float)\nRuns_for_office(\"Joe Biden\", \"President\", 2020).\n.decl Answer()\nAnswer() :- Runs_for_office(\"Kane\", \"President\", 2020), Runs_for_office(\"Joe Biden\", \"President\", 2020).\n.output Answer"]}
{"id": 1311, "answer": false, "completion": ".decl Wins_race(Jockey:symbol, Race:symbol)\nWins_race(\"jockey1\", \"Kentucky Derby\").\nWins_race(\"jockey1\", \"Preakness Stakes\").\nWins_race(\"jockey2\", \"Belmont Stakes\").\n.decl Happens_between(Event:symbol, Start:symbol, End:symbol)\nHappens_between(\"Triple Crown\", \"Eid al-Fitr\", \"Eid al-Fitr\").\n.decl Answer()\nAnswer() :- Wins_race(\"jockey1\", race1), Happens_between(\"Triple Crown\", start, end), Wins_race(\"jockey2\", race2), race1 != race2, Happens_between(race2, start, end).\n.output Answer", "completions": [".decl Wins_race(Jockey:symbol, Race:symbol)\nWins_race(\"jockey1\", \"Kentucky Derby\").\nWins_race(\"jockey1\", \"Preakness Stakes\").\nWins_race(\"jockey2\", \"Belmont Stakes\").\n.decl Happens_between(Event:symbol, Start:symbol, End:symbol)\nHappens_between(\"Triple Crown\", \"Eid al-Fitr\", \"Eid al-Fitr\").\n.decl Answer()\nAnswer() :- Wins_race(\"jockey1\", race1), Happens_between(\"Triple Crown\", start, end), Wins_race(\"jockey2\", race2), race1 != race2, Happens_between(race2, start, end).\n.output Answer"]}
{"id": 1312, "answer": false, "completion": ".decl Born_on_date(Person:symbol, Month:symbol, Day:float)\nBorn_on_date(\"baby\", \"October\", 31).\n.decl Zodiac_sign(Date:symbol, Sign:symbol)\nZodiac_sign(\"January 1\", \"Capricorn\").\nZodiac_sign(\"October 23\", \"Scorpio\").\nZodiac_sign(\"November 22\", \"Sagittarius\").\n.decl Answer()\nAnswer() :- Born_on_date(\"baby\", month, day), Zodiac_sign(month + \" \" + day, \"Scorpio\").\n.output Answer", "completions": [".decl Born_on_date(Person:symbol, Month:symbol, Day:float)\nBorn_on_date(\"baby\", \"October\", 31).\n.decl Zodiac_sign(Date:symbol, Sign:symbol)\nZodiac_sign(\"January 1\", \"Capricorn\").\nZodiac_sign(\"October 23\", \"Scorpio\").\nZodiac_sign(\"November 22\", \"Sagittarius\").\n.decl Answer()\nAnswer() :- Born_on_date(\"baby\", month, day), Zodiac_sign(month + \" \" + day, \"Scorpio\").\n.output Answer"]}
{"id": 1313, "answer": true, "completion": ".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"A Tale of Two Cities\", \"historical fiction\").\nIs_genre(\"The Selfish Gene\", \"popular science\").\n.decl Answer()\nAnswer() :- Is_genre(\"A Tale of Two Cities\", genre), genre != \"popular science\".\n.output Answer", "completions": [".decl Is_genre(Book:symbol, Genre:symbol)\nIs_genre(\"A Tale of Two Cities\", \"historical fiction\").\nIs_genre(\"The Selfish Gene\", \"popular science\").\n.decl Answer()\nAnswer() :- Is_genre(\"A Tale of Two Cities\", genre), genre != \"popular science\".\n.output Answer"]}
{"id": 1314, "answer": false, "completion": ".decl Blacklist(Person:symbol)\nBlacklist(\"Michael Vick\").\n.decl Answer()\nAnswer() :- Blacklist(\"Michael Vick\").\n.output Answer", "completions": [".decl Blacklist(Person:symbol)\nBlacklist(\"Michael Vick\").\n.decl Answer()\nAnswer() :- Blacklist(\"Michael Vick\").\n.output Answer"]}
{"id": 1315, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"seawater\", 1.025).\nHas_density(\"human body\", 1.01).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"human body\", 0.0664).\n.decl Answer()\nAnswer() :- Has_density(\"seawater\", density), Has_volume(\"human body\", volume), density * 10 > volume * 6.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"seawater\", 1.025).\nHas_density(\"human body\", 1.01).\n.decl Has_volume(Object:symbol, Volume:float)\nHas_volume(\"human body\", 0.0664).\n.decl Answer()\nAnswer() :- Has_density(\"seawater\", density), Has_volume(\"human body\", volume), density * 10 > volume * 6.\n.output Answer"]}
{"id": 1316, "answer": false, "completion": ".decl Needs_passport(Country:symbol)\nNeeds_passport(\"Japan\").\n.decl Nordic_country(Country:symbol)\nNordic_country(\"Sweden\").\nNordic_country(\"Norway\").\nNordic_country(\"Finland\").\nNordic_country(\"Denmark\").\n.decl Answer()\nAnswer() :- Needs_passport(country1), Nordic_country(country2), country1 != country2.\n.output Answer", "completions": [".decl Needs_passport(Country:symbol)\nNeeds_passport(\"Japan\").\n.decl Nordic_country(Country:symbol)\nNordic_country(\"Sweden\").\nNordic_country(\"Norway\").\nNordic_country(\"Finland\").\nNordic_country(\"Denmark\").\n.decl Answer()\nAnswer() :- Needs_passport(country1), Nordic_country(country2), country1 != country2.\n.output Answer"]}
{"id": 1317, "answer": false, "completion": ".decl Is_citizen(Person:symbol, Country:symbol)\nIs_citizen(\"John Key\", \"New Zealand\").\n.decl Can_issue_order(Person:symbol, Country:symbol)\nCan_issue_order(\"Barack Obama\", \"USA\").\n.decl Answer()\nAnswer() :- Is_citizen(\"John Key\", country1), Can_issue_order(\"Barack Obama\", country2), country1 = country2.\n.output Answer", "completions": [".decl Is_citizen(Person:symbol, Country:symbol)\nIs_citizen(\"John Key\", \"New Zealand\").\n.decl Can_issue_order(Person:symbol, Country:symbol)\nCan_issue_order(\"Barack Obama\", \"USA\").\n.decl Answer()\nAnswer() :- Is_citizen(\"John Key\", country1), Can_issue_order(\"Barack Obama\", country2), country1 = country2.\n.output Answer"]}
{"id": 1318, "answer": false, "completion": ".decl Is_combination(God:symbol, Parent1:symbol, Parent2:symbol)\nIs_combination(\"Freya\", \"Odin\", \"Frigg\").\nIs_combination(\"Athena\", \"Zeus\", \"Metis\").\nIs_combination(\"Aphrodite\", \"Zeus\", \"Dione\").\n.decl Answer()\nAnswer() :- Is_combination(\"Freya\", parent1, parent2), Is_combination(\"Athena\", parent1, _), Is_combination(\"Aphrodite\", _, parent2).\n.output Answer", "completions": [".decl Is_combination(God:symbol, Parent1:symbol, Parent2:symbol)\nIs_combination(\"Freya\", \"Odin\", \"Frigg\").\nIs_combination(\"Athena\", \"Zeus\", \"Metis\").\nIs_combination(\"Aphrodite\", \"Zeus\", \"Dione\").\n.decl Answer()\nAnswer() :- Is_combination(\"Freya\", parent1, parent2), Is_combination(\"Athena\", parent1, _), Is_combination(\"Aphrodite\", _, parent2).\n.output Answer"]}
{"id": 1319, "answer": false, "completion": ".decl Title_fight_wins(Boxer:symbol, Weight_class:symbol, Wins:float)\nTitle_fight_wins(\"Jack Dempsey\", \"heavyweight\", 23).\nTitle_fight_wins(\"Jack Dempsey\", \"light heavyweight\", 4).\n.decl Max_wins_in_weight_class(Boxer:symbol, Weight_class:symbol, Max_wins:float)\nMax_wins_in_weight_class(boxer, weight_class, max_wins) :- Title_fight_wins(boxer, weight_class, max_wins), !Title_fight_wins(_, weight_class, other_wins), max_wins >= other_wins.\n.decl Answer()\nAnswer() :- Max_wins_in_weight_class(\"Jack Dempsey\", \"heavyweight\", max_wins1), Max_wins_in_weight_class(\"Jack Dempsey\", \"light heavyweight\", max_wins2), max_wins1 >= max_wins2.\n.output Answer", "completions": [".decl Title_fight_wins(Boxer:symbol, Weight_class:symbol, Wins:float)\nTitle_fight_wins(\"Jack Dempsey\", \"heavyweight\", 23).\nTitle_fight_wins(\"Jack Dempsey\", \"light heavyweight\", 4).\n.decl Max_wins_in_weight_class(Boxer:symbol, Weight_class:symbol, Max_wins:float)\nMax_wins_in_weight_class(boxer, weight_class, max_wins) :- Title_fight_wins(boxer, weight_class, max_wins), !Title_fight_wins(_, weight_class, other_wins), max_wins >= other_wins.\n.decl Answer()\nAnswer() :- Max_wins_in_weight_class(\"Jack Dempsey\", \"heavyweight\", max_wins1), Max_wins_in_weight_class(\"Jack Dempsey\", \"light heavyweight\", max_wins2), max_wins1 >= max_wins2.\n.output Answer"]}
{"id": 1320, "answer": true, "completion": ".decl Airs_on_day(Show:symbol, Day:symbol)\nAirs_on_day(\"Seinfeld\", \"Monday\").\nAirs_on_day(\"Seinfeld\", \"Tuesday\").\nAirs_on_day(\"Seinfeld\", \"Wednesday\").\nAirs_on_day(\"Seinfeld\", \"Thursday\").\nAirs_on_day(\"Seinfeld\", \"Friday\").\nAirs_on_day(\"Seinfeld\", \"Saturday\").\nAirs_on_day(\"Seinfeld\", \"Sunday\").\n.decl Answer()\nAnswer() :- Airs_on_day(\"Seinfeld\", day), count(day, count1), count1 >= 365.\n.output Answer", "completions": [".decl Airs_on_day(Show:symbol, Day:symbol)\nAirs_on_day(\"Seinfeld\", \"Monday\").\nAirs_on_day(\"Seinfeld\", \"Tuesday\").\nAirs_on_day(\"Seinfeld\", \"Wednesday\").\nAirs_on_day(\"Seinfeld\", \"Thursday\").\nAirs_on_day(\"Seinfeld\", \"Friday\").\nAirs_on_day(\"Seinfeld\", \"Saturday\").\nAirs_on_day(\"Seinfeld\", \"Sunday\").\n.decl Answer()\nAnswer() :- Airs_on_day(\"Seinfeld\", day), count(day, count1), count1 >= 365.\n.output Answer"]}
{"id": 1321, "answer": false, "completion": ".decl Speaks(Language:symbol, Country:symbol)\nSpeaks(\"Kirundi\", \"Burundi\").\nSpeaks(\"French\", \"Burundi\").\nSpeaks(\"English\", \"New Brunswick\").\n.decl Answer()\nAnswer() :- Speaks(language1, \"Burundi\"), Speaks(language2, \"New Brunswick\"), language1 = language2.\n.output Answer", "completions": [".decl Speaks(Language:symbol, Country:symbol)\nSpeaks(\"Kirundi\", \"Burundi\").\nSpeaks(\"French\", \"Burundi\").\nSpeaks(\"English\", \"New Brunswick\").\n.decl Answer()\nAnswer() :- Speaks(language1, \"Burundi\"), Speaks(language2, \"New Brunswick\"), language1 = language2.\n.output Answer"]}
{"id": 1322, "answer": false, "completion": ".decl Uses_ingredient(Restaurant:symbol, Ingredient:symbol)\nUses_ingredient(\"Carmine's\", \"olive oil\").\n.decl Panicked_staff(Restaurant:symbol)\nPanicked_staff(restaurant) :- !Uses_ingredient(restaurant, \"olive oil\").\n.decl Answer()\nAnswer() :- Panicked_staff(\"Carmine's\").\n.output Answer", "completions": [".decl Uses_ingredient(Restaurant:symbol, Ingredient:symbol)\nUses_ingredient(\"Carmine's\", \"olive oil\").\n.decl Panicked_staff(Restaurant:symbol)\nPanicked_staff(restaurant) :- !Uses_ingredient(restaurant, \"olive oil\").\n.decl Answer()\nAnswer() :- Panicked_staff(\"Carmine's\").\n.output Answer"]}
{"id": 1323, "answer": false, "completion": ".decl Dangerous(Job:symbol)\nDangerous(\"firefighter\").\nDangerous(\"police officer\").\nDangerous(\"construction worker\").\nDangerous(\"logger\").\nDangerous(\"fisherman\").\nDangerous(\"pilot\").\nDangerous(\"miner\").\nDangerous(\"roofing worker\").\nDangerous(\"truck driver\").\nDangerous(\"farm worker\").\n.decl Answer()\nAnswer() :- !Dangerous(\"mail carrier\").\n.output Answer", "completions": [".decl Dangerous(Job:symbol)\nDangerous(\"firefighter\").\nDangerous(\"police officer\").\nDangerous(\"construction worker\").\nDangerous(\"logger\").\nDangerous(\"fisherman\").\nDangerous(\"pilot\").\nDangerous(\"miner\").\nDangerous(\"roofing worker\").\nDangerous(\"truck driver\").\nDangerous(\"farm worker\").\n.decl Answer()\nAnswer() :- !Dangerous(\"mail carrier\").\n.output Answer"]}
{"id": 1324, "answer": false, "completion": ".decl Has_species(Animal:symbol, Species:symbol)\nHas_species(\"duck\", \"Anatidae\").\n.decl Needs_surgery(Animal:symbol, Surgery:symbol)\nNeeds_surgery(\"duck\", \"Caesarean section\").\n.decl Answer()\nAnswer() :- Has_species(animal, \"Anatidae\"), Needs_surgery(animal, \"Caesarean section\").\n.output Answer", "completions": [".decl Has_species(Animal:symbol, Species:symbol)\nHas_species(\"duck\", \"Anatidae\").\n.decl Needs_surgery(Animal:symbol, Surgery:symbol)\nNeeds_surgery(\"duck\", \"Caesarean section\").\n.decl Answer()\nAnswer() :- Has_species(animal, \"Anatidae\"), Needs_surgery(animal, \"Caesarean section\").\n.output Answer"]}
{"id": 1325, "answer": true, "completion": ".decl Used_for(Event:symbol, Tool:symbol)\nUsed_for(\"Martin Luther's Reformation opening salvo\", \"printing press\").\n.decl Used_in(Event:symbol, Tool:symbol)\nUsed_in(\"crucifixion\", \"nails\").\n.decl Answer()\nAnswer() :- Used_for(\"Martin Luther's Reformation opening salvo\", tool1), Used_in(\"crucifixion\", tool2), tool1 != tool2.\n.output Answer", "completions": [".decl Used_for(Event:symbol, Tool:symbol)\nUsed_for(\"Martin Luther's Reformation opening salvo\", \"printing press\").\n.decl Used_in(Event:symbol, Tool:symbol)\nUsed_in(\"crucifixion\", \"nails\").\n.decl Answer()\nAnswer() :- Used_for(\"Martin Luther's Reformation opening salvo\", tool1), Used_in(\"crucifixion\", tool2), tool1 != tool2.\n.output Answer"]}
{"id": 1326, "answer": true, "completion": ".decl Separates_into_layers(Liquid:symbol, Layer1:symbol, Layer2:symbol)\nSeparates_into_layers(\"milk\", \"cream\", \"milk\").\n.decl Answer()\nAnswer() :- Separates_into_layers(\"milk\", layer1, layer2), layer1 = \"cream\".\n.output Answer", "completions": [".decl Separates_into_layers(Liquid:symbol, Layer1:symbol, Layer2:symbol)\nSeparates_into_layers(\"milk\", \"cream\", \"milk\").\n.decl Answer()\nAnswer() :- Separates_into_layers(\"milk\", layer1, layer2), layer1 = \"cream\".\n.output Answer"]}
{"id": 1327, "answer": false, "completion": ".decl Reacts_with(Chemical_A:symbol, Chemical_B:symbol)\nReactsWith(\"Ammonia\", \"Clorox\").\n.decl Answer()\nAnswer() :- ReactsWith(\"Ammonia\", chemical), ReactsWith(\"Clorox\", chemical).\n.output Answer", "completions": [".decl Reacts_with(Chemical_A:symbol, Chemical_B:symbol)\nReactsWith(\"Ammonia\", \"Clorox\").\n.decl Answer()\nAnswer() :- ReactsWith(\"Ammonia\", chemical), ReactsWith(\"Clorox\", chemical).\n.output Answer"]}
{"id": 1328, "answer": true, "completion": ".decl Likes(Person:symbol, Thing:symbol)\nLikes(\"Deacon\", \"The Atheist Experience\").\nLikes(\"Deacon\", \"Cognitive Dissonance\").\nLikes(\"Deacon\", \"The Scathing Atheist\").\nLikes(\"Deacon\", \"God Awful Movies\").\n.decl Answer()\nAnswer() :- Likes(\"Deacon\", \"God Awful Movies\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Thing:symbol)\nLikes(\"Deacon\", \"The Atheist Experience\").\nLikes(\"Deacon\", \"Cognitive Dissonance\").\nLikes(\"Deacon\", \"The Scathing Atheist\").\nLikes(\"Deacon\", \"God Awful Movies\").\n.decl Answer()\nAnswer() :- Likes(\"Deacon\", \"God Awful Movies\").\n.output Answer"]}
{"id": 1329, "answer": false, "completion": ".decl Worships(Person:symbol, Deity:symbol, Place:symbol)\nWorships(\"John\", \"Ahura Mazda\", \"temple\").\nWorships(\"Ali\", \"Allah\", \"mosque\").\n.decl Answer()\nAnswer() :- Worships(person, \"Ahura Mazda\", place), place != \"mosque\".\n.output Answer", "completions": [".decl Worships(Person:symbol, Deity:symbol, Place:symbol)\nWorships(\"John\", \"Ahura Mazda\", \"temple\").\nWorships(\"Ali\", \"Allah\", \"mosque\").\n.decl Answer()\nAnswer() :- Worships(person, \"Ahura Mazda\", place), place != \"mosque\".\n.output Answer"]}
{"id": 1330, "answer": true, "completion": ".decl Associated_with(Person:symbol, Director:symbol)\nAssociated_with(\"Trent Reznor\", \"David Lynch\").\n.decl Answer()\nAnswer() :- Associated_with(\"Trent Reznor\", \"David Lynch\").\n.output Answer", "completions": [".decl Associated_with(Person:symbol, Director:symbol)\nAssociated_with(\"Trent Reznor\", \"David Lynch\").\n.decl Answer()\nAnswer() :- Associated_with(\"Trent Reznor\", \"David Lynch\").\n.output Answer"]}
{"id": 1331, "answer": false, "completion": ".decl Supported(Country:symbol, Event:symbol)\nSupported(\"Switzerland\", \"World War II\").\nSupported(\"United Kingdom\", \"Spanish-American War\").\nSupported(\"France\", \"American Revolution\").\n.decl Answer()\nAnswer() :- Supported(\"Switzerland\", event1), Supported(\"United States\", event2), event1 = event2.\n.output Answer", "completions": [".decl Supported(Country:symbol, Event:symbol)\nSupported(\"Switzerland\", \"World War II\").\nSupported(\"United Kingdom\", \"Spanish-American War\").\nSupported(\"France\", \"American Revolution\").\n.decl Answer()\nAnswer() :- Supported(\"Switzerland\", event1), Supported(\"United States\", event2), event1 = event2.\n.output Answer"]}
{"id": 1332, "answer": false, "completion": ".decl Is_type_of(Thing:symbol, Type:symbol)\nIs_type_of(\"Christmas tree\", \"evergreen\").\nIs_type_of(\"oak tree\", \"deciduous\").\n.decl Answer()\nAnswer() :- Is_type_of(\"Christmas tree\", type), type = \"deciduous\".\nAnswer() :- Is_type_of(\"Christmas tree\", \"evergreen\").\n.output Answer", "completions": [".decl Is_type_of(Thing:symbol, Type:symbol)\nIs_type_of(\"Christmas tree\", \"evergreen\").\nIs_type_of(\"oak tree\", \"deciduous\").\n.decl Answer()\nAnswer() :- Is_type_of(\"Christmas tree\", type), type = \"deciduous\".\nAnswer() :- Is_type_of(\"Christmas tree\", \"evergreen\").\n.output Answer"]}
{"id": 1333, "answer": true, "completion": ".decl Survives(Character:symbol)\nSurvives(\"Iron Man\").\nSurvives(\"Captain America\").\nSurvives(\"Thor\").\nSurvives(\"Hulk\").\nSurvives(\"Black Widow\").\nSurvives(\"Hawkeye\").\n.decl Answer()\nAnswer() :- Survives(\"Iron Man\").\n.output Answer", "completions": [".decl Survives(Character:symbol)\nSurvives(\"Iron Man\").\nSurvives(\"Captain America\").\nSurvives(\"Thor\").\nSurvives(\"Hulk\").\nSurvives(\"Black Widow\").\nSurvives(\"Hawkeye\").\n.decl Answer()\nAnswer() :- Survives(\"Iron Man\").\n.output Answer"]}
{"id": 1334, "answer": false, "completion": ".decl Attuned_to_magnetic_field(Device:symbol)\nAttuned_to_magnetic_field(\"compass\").\n.decl Gift(Person:symbol, Item:symbol)\nGift(\"Christmas elf\", \"toy\").\n.decl Answer()\nAnswer() :- Attuned_to_magnetic_field(device), Gift(\"Christmas elf\", item), item != \"coal\".\n.output Answer", "completions": [".decl Attuned_to_magnetic_field(Device:symbol)\nAttuned_to_magnetic_field(\"compass\").\n.decl Gift(Person:symbol, Item:symbol)\nGift(\"Christmas elf\", \"toy\").\n.decl Answer()\nAnswer() :- Attuned_to_magnetic_field(device), Gift(\"Christmas elf\", item), item != \"coal\".\n.output Answer"]}
{"id": 1335, "answer": false, "completion": ".decl Suitable_for(Purpose:symbol, Item:symbol)\nSuitable_for(\"menstruation\", \"tampons\").\n.decl Answer()\n!Answer() :- Suitable_for(\"menstruation\", item), item != \"tampons\".\n.output Answer", "completions": [".decl Suitable_for(Purpose:symbol, Item:symbol)\nSuitable_for(\"menstruation\", \"tampons\").\n.decl Answer()\n!Answer() :- Suitable_for(\"menstruation\", item), item != \"tampons\".\n.output Answer"]}
{"id": 1336, "answer": false, "completion": ".decl Fictional(Character:symbol)\nFictional(\"Robin Hood\").\nFictional(\"Maid Marian\").\nFictional(\"Little John\").\n.decl Real(Character:symbol)\nReal(\"King Richard the Lionheart\").\nReal(\"Prince John\").\nReal(\"Sheriff of Nottingham\").\n.decl Answer()\nAnswer() :- Real(character), !Fictional(character).\n.output Answer", "completions": [".decl Fictional(Character:symbol)\nFictional(\"Robin Hood\").\nFictional(\"Maid Marian\").\nFictional(\"Little John\").\n.decl Real(Character:symbol)\nReal(\"King Richard the Lionheart\").\nReal(\"Prince John\").\nReal(\"Sheriff of Nottingham\").\n.decl Answer()\nAnswer() :- Real(character), !Fictional(character).\n.output Answer"]}
{"id": 1337, "answer": true, "completion": ".decl Requires_hands(Weapon:symbol, N_hands:float)\nRequires_hands(\"Gladiator's weapon\", 1).\nRequires_hands(\"Soul Calibur's Faust\", 2).\n.decl Answer()\nAnswer() :- Requires_hands(\"Gladiator's weapon\", n_hands1), Requires_hands(\"Soul Calibur's Faust\", n_hands2), n_hands1 < n_hands2.\n.output Answer", "completions": [".decl Requires_hands(Weapon:symbol, N_hands:float)\nRequires_hands(\"Gladiator's weapon\", 1).\nRequires_hands(\"Soul Calibur's Faust\", 2).\n.decl Answer()\nAnswer() :- Requires_hands(\"Gladiator's weapon\", n_hands1), Requires_hands(\"Soul Calibur's Faust\", n_hands2), n_hands1 < n_hands2.\n.output Answer"]}
{"id": 1338, "answer": true, "completion": ".decl Purchases(Person:symbol, Item:symbol, Store:symbol)\nPurchases(\"Mozart\", \"violin\", \"Antonio Stradivari\").\nPurchases(\"Mozart\", \"sheet music\", \"Leopold Mozart\").\nPurchases(\"Beethoven\", \"piano\", \"Broadwood & Sons\").\n.decl Answer()\nAnswer() :- Purchases(\"Mozart\", item, \"Dolce & Gabbana\").\n.output Answer", "completions": [".decl Purchases(Person:symbol, Item:symbol, Store:symbol)\nPurchases(\"Mozart\", \"violin\", \"Antonio Stradivari\").\nPurchases(\"Mozart\", \"sheet music\", \"Leopold Mozart\").\nPurchases(\"Beethoven\", \"piano\", \"Broadwood & Sons\").\n.decl Answer()\nAnswer() :- Purchases(\"Mozart\", item, \"Dolce & Gabbana\").\n.output Answer"]}
{"id": 1339, "answer": true, "completion": ".decl Influences(Artist_A:symbol, Artist_B:symbol)\nInfluences(\"Nine Inch Nails\", \"Marilyn Manson\").\nInfluences(\"Marilyn Manson\", \"Aretha Franklin\").\n.decl Answer()\nAnswer() :- Influences(\"Nine Inch Nails\", artist), Influences(artist, \"Aretha Franklin\").\n.output Answer", "completions": [".decl Influences(Artist_A:symbol, Artist_B:symbol)\nInfluences(\"Nine Inch Nails\", \"Marilyn Manson\").\nInfluences(\"Marilyn Manson\", \"Aretha Franklin\").\n.decl Answer()\nAnswer() :- Influences(\"Nine Inch Nails\", artist), Influences(artist, \"Aretha Franklin\").\n.output Answer"]}
{"id": 1340, "answer": true, "completion": ".decl Has_property(Food:symbol, Property:symbol)\nHas_property(\"cream\", \"dairy\").\nHas_property(\"mushroom\", \"not dairy\").\n.decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"John\", \"dairy\").\nAvoids(\"Jane\", \"mushroom\").\n.decl Answer()\nAnswer() :- Avoids(person, food), Has_property(food, \"dairy\"), person = \"John\".\nAnswer() :- Avoids(person, food), Has_property(food, \"dairy\"), person != \"John\".\n.output Answer", "completions": [".decl Has_property(Food:symbol, Property:symbol)\nHas_property(\"cream\", \"dairy\").\nHas_property(\"mushroom\", \"not dairy\").\n.decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"John\", \"dairy\").\nAvoids(\"Jane\", \"mushroom\").\n.decl Answer()\nAnswer() :- Avoids(person, food), Has_property(food, \"dairy\"), person = \"John\".\nAnswer() :- Avoids(person, food), Has_property(food, \"dairy\"), person != \"John\".\n.output Answer"]}
{"id": 1341, "answer": false, "completion": ".decl Works_in_season(Person:symbol, Season:symbol)\nWorks_in_season(\"Santa Claus\", \"winter\").\n.decl Answer()\nAnswer() :- Works_in_season(\"Santa Claus\", season), season != \"summer\".\n.output Answer", "completions": [".decl Works_in_season(Person:symbol, Season:symbol)\nWorks_in_season(\"Santa Claus\", \"winter\").\n.decl Answer()\nAnswer() :- Works_in_season(\"Santa Claus\", season), season != \"summer\".\n.output Answer"]}
{"id": 1342, "answer": false, "completion": ".decl Includes_leap_year(Degree:symbol)\nIncludes_leap_year(\"bachelor's degree\").\n.decl Answer()\nAnswer() :- Includes_leap_year(\"bachelor's degree\").\n.output Answer", "completions": [".decl Includes_leap_year(Degree:symbol)\nIncludes_leap_year(\"bachelor's degree\").\n.decl Answer()\nAnswer() :- Includes_leap_year(\"bachelor's degree\").\n.output Answer"]}
{"id": 1343, "answer": true, "completion": ".decl Reads(Book:symbol, Person:symbol)\nReads(\"Harry Potter and the Philosopher's Stone\", \"child1\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Albanian Civil War\", \"1997\").\n.decl Answer()\nAnswer() :- Reads(\"Harry Potter and the Philosopher's Stone\", person), Happens_in_time(\"Albanian Civil War\", time), time < 2001.\n.output Answer", "completions": [".decl Reads(Book:symbol, Person:symbol)\nReads(\"Harry Potter and the Philosopher's Stone\", \"child1\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Albanian Civil War\", \"1997\").\n.decl Answer()\nAnswer() :- Reads(\"Harry Potter and the Philosopher's Stone\", person), Happens_in_time(\"Albanian Civil War\", time), time < 2001.\n.output Answer"]}
{"id": 1344, "answer": true, "completion": ".decl Collaborates(Artist1:symbol, Artist2:symbol)\nCollaborates(\"Jay-Z\", \"Kanye West\").\nCollaborates(\"Kanye West\", \"Paul McCartney\").\nCollaborates(\"Paul McCartney\", \"Michael Jackson\").\nCollaborates(\"Michael Jackson\", \"Quincy Jones\").\nCollaborates(\"Quincy Jones\", \"Louis Armstrong\").\n.decl Answer()\nAnswer() :- Collaborates(\"Jay-Z\", artist1), Collaborates(artist1, artist2), Collaborates(artist2, \"Louis Armstrong\").\n.output Answer", "completions": [".decl Collaborates(Artist1:symbol, Artist2:symbol)\nCollaborates(\"Jay-Z\", \"Kanye West\").\nCollaborates(\"Kanye West\", \"Paul McCartney\").\nCollaborates(\"Paul McCartney\", \"Michael Jackson\").\nCollaborates(\"Michael Jackson\", \"Quincy Jones\").\nCollaborates(\"Quincy Jones\", \"Louis Armstrong\").\n.decl Answer()\nAnswer() :- Collaborates(\"Jay-Z\", artist1), Collaborates(artist1, artist2), Collaborates(artist2, \"Louis Armstrong\").\n.output Answer"]}
{"id": 1345, "answer": true, "completion": ".decl Suitable_for_animal(Food:symbol, Animal:symbol)\nSuitable_for_animal(\"fruit\", \"monkey\").\nSuitable_for_animal(\"meat\", \"lion\").\nSuitable_for_animal(\"vegetables\", \"giraffe\").\nSuitable_for_animal(\"cigarettes\", \"human\").\n.decl Answer()\nAnswer() :- Suitable_for_animal(\"fruit\", animal), Suitable_for_animal(\"meat\", animal), Suitable_for_animal(\"vegetables\", animal), !Suitable_for_animal(\"cigarettes\", animal).\n.output Answer", "completions": [".decl Suitable_for_animal(Food:symbol, Animal:symbol)\nSuitable_for_animal(\"fruit\", \"monkey\").\nSuitable_for_animal(\"meat\", \"lion\").\nSuitable_for_animal(\"vegetables\", \"giraffe\").\nSuitable_for_animal(\"cigarettes\", \"human\").\n.decl Answer()\nAnswer() :- Suitable_for_animal(\"fruit\", animal), Suitable_for_animal(\"meat\", animal), Suitable_for_animal(\"vegetables\", animal), !Suitable_for_animal(\"cigarettes\", animal).\n.output Answer"]}
{"id": 1346, "answer": true, "completion": ".decl Helps_detect(Element:symbol, Disease:symbol)\nHelps_detect(\"Mercury\", \"coronavirus\").\n.decl Answer()\nAnswer() :- Helps_detect(\"Mercury\", \"coronavirus\").\n.output Answer", "completions": [".decl Helps_detect(Element:symbol, Disease:symbol)\nHelps_detect(\"Mercury\", \"coronavirus\").\n.decl Answer()\nAnswer() :- Helps_detect(\"Mercury\", \"coronavirus\").\n.output Answer"]}
{"id": 1347, "answer": true, "completion": ".decl Carries(Person:symbol, Item:symbol)\nCarries(\"Al Capone\", \"gun\").\n.decl Answer()\nAnswer() :- Carries(\"Al Capone\", item), item != \"smartphone\".\n.output Answer", "completions": [".decl Carries(Person:symbol, Item:symbol)\nCarries(\"Al Capone\", \"gun\").\n.decl Answer()\nAnswer() :- Carries(\"Al Capone\", item), item != \"smartphone\".\n.output Answer"]}
{"id": 1348, "answer": true, "completion": ".decl Has_statue(Person:symbol)\nHas_statue(\"Benjamin Franklin\").\n.decl Belongs_to_movement(Person:symbol, Movement:symbol)\nBelongs_to_movement(\"Benjamin Franklin\", \"Black Lives Matter\").\n.decl Answer()\nAnswer() :- Has_statue(person), Belongs_to_movement(person, \"Black Lives Matter\").\n.output Answer", "completions": [".decl Has_statue(Person:symbol)\nHas_statue(\"Benjamin Franklin\").\n.decl Belongs_to_movement(Person:symbol, Movement:symbol)\nBelongs_to_movement(\"Benjamin Franklin\", \"Black Lives Matter\").\n.decl Answer()\nAnswer() :- Has_statue(person), Belongs_to_movement(person, \"Black Lives Matter\").\n.output Answer"]}
{"id": 1349, "answer": false, "completion": ".decl Survives(Character:symbol, Scenario:symbol)\nSurvives(\"Jason Voorhees\", \"Friday the 13th\").\n.decl Dies_for_cause(Character:symbol, Cause:symbol)\nDies_for_cause(\"martyr\", \"religious belief\").\n.decl Answer()\nAnswer() :- Survives(\"Jason Voorhees\", scenario), !Dies_for_cause(\"Jason Voorhees\", \"religious belief\").\n.output Answer", "completions": [".decl Survives(Character:symbol, Scenario:symbol)\nSurvives(\"Jason Voorhees\", \"Friday the 13th\").\n.decl Dies_for_cause(Character:symbol, Cause:symbol)\nDies_for_cause(\"martyr\", \"religious belief\").\n.decl Answer()\nAnswer() :- Survives(\"Jason Voorhees\", scenario), !Dies_for_cause(\"Jason Voorhees\", \"religious belief\").\n.output Answer"]}
{"id": 1350, "answer": false, "completion": ".decl Employed(Person:symbol)\nEmployed(\"teacher\").\n.decl Race(Person:symbol, Race:symbol)\nRace(\"black student\", \"black\").\n.decl Answer()\nAnswer() :- Employed(person), Race(\"black student\", race), race != \"ape\", person = \"teacher\".\n.output Answer", "completions": [".decl Employed(Person:symbol)\nEmployed(\"teacher\").\n.decl Race(Person:symbol, Race:symbol)\nRace(\"black student\", \"black\").\n.decl Answer()\nAnswer() :- Employed(person), Race(\"black student\", race), race != \"ape\", person = \"teacher\".\n.output Answer"]}
{"id": 1351, "answer": true, "completion": ".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"fly\", 0.01).\n.decl Requires_anesthesia(Procedure:symbol)\nRequires_anesthesia(\"eye surgery\").\n.decl Answer()\nAnswer() :- Has_size(\"fly\", size), Requires_anesthesia(\"eye surgery\"), size < 0.1.\n.output Answer", "completions": [".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"fly\", 0.01).\n.decl Requires_anesthesia(Procedure:symbol)\nRequires_anesthesia(\"eye surgery\").\n.decl Answer()\nAnswer() :- Has_size(\"fly\", size), Requires_anesthesia(\"eye surgery\"), size < 0.1.\n.output Answer"]}
{"id": 1352, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"rainbow\", \"multicolor\").\nHas_color(\"yin\", \"black\").\nHas_color(\"yang\", \"white\").\n.decl Mixes_colors(Color1:symbol, Color2:symbol, Mixed_color:symbol)\nMixes_colors(\"black\", \"white\", \"gray\").\n.decl Answer()\nAnswer() :- Has_color(\"rainbow\", color), !Has_color(color, _), Mixes_colors(color1, color2, color), Has_color(\"yin\", color1), Has_color(\"yang\", color2).\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"rainbow\", \"multicolor\").\nHas_color(\"yin\", \"black\").\nHas_color(\"yang\", \"white\").\n.decl Mixes_colors(Color1:symbol, Color2:symbol, Mixed_color:symbol)\nMixes_colors(\"black\", \"white\", \"gray\").\n.decl Answer()\nAnswer() :- Has_color(\"rainbow\", color), !Has_color(color, _), Mixes_colors(color1, color2, color), Has_color(\"yin\", color1), Has_color(\"yang\", color2).\n.output Answer"]}
{"id": 1353, "answer": false, "completion": ".decl Came_from_period(Animal:symbol, Period:symbol)\nCame_from_period(\"mongoose\", \"Miocene\").\nCame_from_period(\"rhino\", \"Eocene\").\n.decl Answer()\nAnswer() :- Came_from_period(\"mongoose\", period1), Came_from_period(\"rhino\", period2), period1 > period2.\n.output Answer", "completions": [".decl Came_from_period(Animal:symbol, Period:symbol)\nCame_from_period(\"mongoose\", \"Miocene\").\nCame_from_period(\"rhino\", \"Eocene\").\n.decl Answer()\nAnswer() :- Came_from_period(\"mongoose\", period1), Came_from_period(\"rhino\", period2), period1 > period2.\n.output Answer"]}
{"id": 1354, "answer": true, "completion": ".decl Participates_in_War(Person:symbol, War:symbol)\nParticipates_in_War(\"Archduke Franz Ferdinand of Austria\", \"World War I\").\nParticipates_in_War(\"Archduke Franz Ferdinand of Austria\", \"Bosnian Crisis\").\nParticipates_in_War(\"Archduke Franz Ferdinand of Austria\", \"First Balkan War\").\nParticipates_in_War(\"Archduke Franz Ferdinand of Austria\", \"Second Balkan War\").\nParticipates_in_War(\"Archduke Franz Ferdinand of Austria\", \"World War II\").\n.decl Answer()\nAnswer() :- Participates_in_War(\"Archduke Franz Ferdinand of Austria\", \"Pacific War\").\n.output Answer", "completions": [".decl Participates_in_War(Person:symbol, War:symbol)\nParticipates_in_War(\"Archduke Franz Ferdinand of Austria\", \"World War I\").\nParticipates_in_War(\"Archduke Franz Ferdinand of Austria\", \"Bosnian Crisis\").\nParticipates_in_War(\"Archduke Franz Ferdinand of Austria\", \"First Balkan War\").\nParticipates_in_War(\"Archduke Franz Ferdinand of Austria\", \"Second Balkan War\").\nParticipates_in_War(\"Archduke Franz Ferdinand of Austria\", \"World War II\").\n.decl Answer()\nAnswer() :- Participates_in_War(\"Archduke Franz Ferdinand of Austria\", \"Pacific War\").\n.output Answer"]}
{"id": 1355, "answer": false, "completion": ".decl Makes_living(Person:symbol, Occupation:symbol)\nMakes_living(\"Paulo Coelho's wife\", \"speech\").\n.decl Answer()\nAnswer() :- Makes_living(\"Paulo Coelho's wife\", \"speech\").\n.output Answer", "completions": [".decl Makes_living(Person:symbol, Occupation:symbol)\nMakes_living(\"Paulo Coelho's wife\", \"speech\").\n.decl Answer()\nAnswer() :- Makes_living(\"Paulo Coelho's wife\", \"speech\").\n.output Answer"]}
{"id": 1356, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Bill Gates\", 1955).\nBorn_in_year(\"Steve Jobs\", 1955).\nBorn_in_year(\"Elon Musk\", 1971).\n.decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Bill Gates\", 110).\nHas_net_worth(\"Steve Jobs\", 10).\nHas_net_worth(\"Elon Musk\", 20).\n.decl Answer()\nAnswer() :- Born_in_year(person, 1946), Has_net_worth(person, net_worth), Has_net_worth(\"Bill Gates\", net_worth2), net_worth > net_worth2.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Bill Gates\", 1955).\nBorn_in_year(\"Steve Jobs\", 1955).\nBorn_in_year(\"Elon Musk\", 1971).\n.decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Bill Gates\", 110).\nHas_net_worth(\"Steve Jobs\", 10).\nHas_net_worth(\"Elon Musk\", 20).\n.decl Answer()\nAnswer() :- Born_in_year(person, 1946), Has_net_worth(person, net_worth), Has_net_worth(\"Bill Gates\", net_worth2), net_worth > net_worth2.\n.output Answer"]}
{"id": 1357, "answer": false, "completion": ".decl Runs_on(OS:symbol, Smartphone:symbol)\nRuns_on(\"Windows\", \"Microsoft Lumia 950\").\nRuns_on(\"Android\", \"Samsung Galaxy S7\").\n.decl Has_version(OS:symbol, Version:float)\nHas_version(\"Linux\", 4.4).\n.decl Answer()\nAnswer() :- Runs_on(os1, smartphone), Has_version(\"Linux\", version1), Runs_on(os1, smartphone), Has_version(os1, version2), version1 < version2.\n.output Answer", "completions": [".decl Runs_on(OS:symbol, Smartphone:symbol)\nRuns_on(\"Windows\", \"Microsoft Lumia 950\").\nRuns_on(\"Android\", \"Samsung Galaxy S7\").\n.decl Has_version(OS:symbol, Version:float)\nHas_version(\"Linux\", 4.4).\n.decl Answer()\nAnswer() :- Runs_on(os1, smartphone), Has_version(\"Linux\", version1), Runs_on(os1, smartphone), Has_version(os1, version2), version1 < version2.\n.output Answer"]}
{"id": 1358, "answer": true, "completion": ".decl Voted(Person:symbol, Candidate:symbol, Year:float)\nVoted(\"Bill Nye\", \"Barack Obama\", 2008).\nVoted(\"Bill Nye\", \"Hillary Clinton\", 2016).\nVoted(\"Franklin Delano Roosevelt\", \"Franklin Delano Roosevelt\", 1932).\nVoted(\"Franklin Delano Roosevelt\", \"Franklin Delano Roosevelt\", 1936).\n.decl Answer()\nAnswer() :- Voted(\"Bill Nye\", candidate1, year1), Voted(\"Franklin Delano Roosevelt\", candidate2, year2), candidate1 = candidate2, year1 = year2.\n.output Answer", "completions": [".decl Voted(Person:symbol, Candidate:symbol, Year:float)\nVoted(\"Bill Nye\", \"Barack Obama\", 2008).\nVoted(\"Bill Nye\", \"Hillary Clinton\", 2016).\nVoted(\"Franklin Delano Roosevelt\", \"Franklin Delano Roosevelt\", 1932).\nVoted(\"Franklin Delano Roosevelt\", \"Franklin Delano Roosevelt\", 1936).\n.decl Answer()\nAnswer() :- Voted(\"Bill Nye\", candidate1, year1), Voted(\"Franklin Delano Roosevelt\", candidate2, year2), candidate1 = candidate2, year1 = year2.\n.output Answer"]}
{"id": 1359, "answer": true, "completion": ".decl Descends_from(Person:symbol, Ancestor:symbol)\nDescends_from(\"Genghis Khan\", \"ancestor1\").\nDescends_from(\"Julius Caesar\", \"ancestor2\").\n.decl Population_size(Year:symbol, Size:float)\nPopulation_size(\"1200\", 400).\nPopulation_size(\"50 BC\", 200).\nPopulation_size(\"2021\", 7800).\n.decl Answer()\nAnswer() :- Descends_from(person1, \"ancestor1\"), Population_size(year1, size1), Descends_from(person2, \"ancestor2\"), Population_size(year2, size2), year1 = year2, size1/2 > size2.\n.output Answer", "completions": [".decl Descends_from(Person:symbol, Ancestor:symbol)\nDescends_from(\"Genghis Khan\", \"ancestor1\").\nDescends_from(\"Julius Caesar\", \"ancestor2\").\n.decl Population_size(Year:symbol, Size:float)\nPopulation_size(\"1200\", 400).\nPopulation_size(\"50 BC\", 200).\nPopulation_size(\"2021\", 7800).\n.decl Answer()\nAnswer() :- Descends_from(person1, \"ancestor1\"), Population_size(year1, size1), Descends_from(person2, \"ancestor2\"), Population_size(year2, size2), year1 = year2, size1/2 > size2.\n.output Answer"]}
{"id": 1360, "answer": true, "completion": ".decl Invented_by(Company:symbol, Invention:symbol, Year:float)\nInvented_by(\"Casio\", \"electric calculator\", 1957).\nInvented_by(\"Casio\", \"digital watch\", 1974).\n.decl Worn_on_body_part(Invention:symbol, Body_part:symbol)\nWorn_on_body_part(\"digital watch\", \"wrist\").\n.decl Answer()\nAnswer() :- Invented_by(\"Casio\", invention, year), year <= 1974, Worn_on_body_part(invention, \"ankle\").\n.output Answer", "completions": [".decl Invented_by(Company:symbol, Invention:symbol, Year:float)\nInvented_by(\"Casio\", \"electric calculator\", 1957).\nInvented_by(\"Casio\", \"digital watch\", 1974).\n.decl Worn_on_body_part(Invention:symbol, Body_part:symbol)\nWorn_on_body_part(\"digital watch\", \"wrist\").\n.decl Answer()\nAnswer() :- Invented_by(\"Casio\", invention, year), year <= 1974, Worn_on_body_part(invention, \"ankle\").\n.output Answer"]}
{"id": 1361, "answer": false, "completion": ".decl Has_diagnosis(Patient:symbol, Diagnosis:symbol)\nHas_diagnosis(\"John\", \"depression\").\nHas_diagnosis(\"Mary\", \"anxiety\").\n.decl Answer()\nAnswer() :- !Has_diagnosis(patient, \"mental illness\").\n.output Answer", "completions": [".decl Has_diagnosis(Patient:symbol, Diagnosis:symbol)\nHas_diagnosis(\"John\", \"depression\").\nHas_diagnosis(\"Mary\", \"anxiety\").\n.decl Answer()\nAnswer() :- !Has_diagnosis(patient, \"mental illness\").\n.output Answer"]}
{"id": 1362, "answer": true, "completion": ".decl Owns(Person:symbol, Item:symbol)\nOwns(\"art dealer\", \"Da Vinci painting\").\n.decl Costs(Item:symbol, Price:float)\nCosts(\"Boeing 737-800\", 106.6).\n.decl Answer()\nAnswer() :- Owns(\"art dealer\", \"Da Vinci painting\"), Costs(\"Boeing 737-800\", price), price <= 0.\n.output Answer\n\n// Note: This question is not answerable with the given information, as we don't know if the art dealer has any other assets or means of acquiring the plane.", "completions": [".decl Owns(Person:symbol, Item:symbol)\nOwns(\"art dealer\", \"Da Vinci painting\").\n.decl Costs(Item:symbol, Price:float)\nCosts(\"Boeing 737-800\", 106.6).\n.decl Answer()\nAnswer() :- Owns(\"art dealer\", \"Da Vinci painting\"), Costs(\"Boeing 737-800\", price), price <= 0.\n.output Answer\n\n// Note: This question is not answerable with the given information, as we don't know if the art dealer has any other assets or means of acquiring the plane."]}
{"id": 1363, "answer": false, "completion": ".decl Manufactured(Car:symbol, Year:float)\nManufactured(\"Mini\", 1959).\nManufactured(\"Ford Model T\", 1908).\nManufactured(\"Benz Patent-Motorwagen\", 1886).\n.decl Answer()\nAnswer() :- Manufactured(\"Mini\", year1), Manufactured(car2, year2), year2 < year1.\n.output Answer", "completions": [".decl Manufactured(Car:symbol, Year:float)\nManufactured(\"Mini\", 1959).\nManufactured(\"Ford Model T\", 1908).\nManufactured(\"Benz Patent-Motorwagen\", 1886).\n.decl Answer()\nAnswer() :- Manufactured(\"Mini\", year1), Manufactured(car2, year2), year2 < year1.\n.output Answer"]}
{"id": 1364, "answer": false, "completion": ".decl Has_letter(Language:symbol, Letter:symbol)\nHas_letter(\"Early Eastern Canadian Natives language\", \"A\").\nHas_letter(\"Early Eastern Canadian Natives language\", \"E\").\nHas_letter(\"Early Eastern Canadian Natives language\", \"I\").\nHas_letter(\"Early Eastern Canadian Natives language\", \"O\").\nHas_letter(\"Early Eastern Canadian Natives language\", \"U\").\n.decl Answer()\nAnswer() :- Has_letter(\"Early Eastern Canadian Natives language\", \"B\"), !.\nAnswer() :- Has_letter(\"Early Eastern Canadian Natives language\", letter), letter != \"B\".\n.output Answer", "completions": [".decl Has_letter(Language:symbol, Letter:symbol)\nHas_letter(\"Early Eastern Canadian Natives language\", \"A\").\nHas_letter(\"Early Eastern Canadian Natives language\", \"E\").\nHas_letter(\"Early Eastern Canadian Natives language\", \"I\").\nHas_letter(\"Early Eastern Canadian Natives language\", \"O\").\nHas_letter(\"Early Eastern Canadian Natives language\", \"U\").\n.decl Answer()\nAnswer() :- Has_letter(\"Early Eastern Canadian Natives language\", \"B\"), !.\nAnswer() :- Has_letter(\"Early Eastern Canadian Natives language\", letter), letter != \"B\".\n.output Answer"]}
{"id": 1365, "answer": false, "completion": ".decl Requires_anchor(Bike:symbol)\nRequires_anchor(\"Trek 9000\").\n.decl Answer()\nAnswer() :- !Requires_anchor(\"Trek 9000\").\n.output Answer", "completions": [".decl Requires_anchor(Bike:symbol)\nRequires_anchor(\"Trek 9000\").\n.decl Answer()\nAnswer() :- !Requires_anchor(\"Trek 9000\").\n.output Answer"]}
{"id": 1366, "answer": true, "completion": ".decl Occurs_in(Location:symbol, Disease:symbol)\nOccurs_in(\"Brazil\", \"Zika virus\").\nOccurs_in(\"Mexico\", \"Zika virus\").\nOccurs_in(\"United States\", \"Zika virus\").\n.decl Answer()\nAnswer() :- Occurs_in(location, \"Zika virus\"), location != \"Antarctica\".\n.output Answer", "completions": [".decl Occurs_in(Location:symbol, Disease:symbol)\nOccurs_in(\"Brazil\", \"Zika virus\").\nOccurs_in(\"Mexico\", \"Zika virus\").\nOccurs_in(\"United States\", \"Zika virus\").\n.decl Answer()\nAnswer() :- Occurs_in(location, \"Zika virus\"), location != \"Antarctica\".\n.output Answer"]}
{"id": 1367, "answer": true, "completion": ".decl Is_dark(Location:symbol, Time:symbol)\nIs_dark(\"Basel\", \"night\").\nIs_dark(\"Los Angeles\", \"day\").\n.decl Answer()\nAnswer() :- Is_dark(\"Basel\", time1), Is_dark(\"Los Angeles\", time2), time1 != time2.\n.output Answer", "completions": [".decl Is_dark(Location:symbol, Time:symbol)\nIs_dark(\"Basel\", \"night\").\nIs_dark(\"Los Angeles\", \"day\").\n.decl Answer()\nAnswer() :- Is_dark(\"Basel\", time1), Is_dark(\"Los Angeles\", time2), time1 != time2.\n.output Answer"]}
{"id": 1368, "answer": true, "completion": ".decl Safe_for_condition(Activity:symbol, Condition:symbol)\nSafe_for_condition(\"breakdancing\", \"tendonitis\").\n.decl Answer()\nAnswer() :- Safe_for_condition(\"breakdancing\", condition), condition != \"tendonitis\".\n.output Answer", "completions": [".decl Safe_for_condition(Activity:symbol, Condition:symbol)\nSafe_for_condition(\"breakdancing\", \"tendonitis\").\n.decl Answer()\nAnswer() :- Safe_for_condition(\"breakdancing\", condition), condition != \"tendonitis\".\n.output Answer"]}
{"id": 1369, "answer": false, "completion": ".decl Traveled_with(Person1:symbol, Person2:symbol)\nTraveled_with(\"Marco Polo\", \"Kublai Khan\").\nTraveled_with(\"Christopher Columbus\", \"Ferdinand Magellan\").\n.decl Answer()\nAnswer() :- Traveled_with(\"Marco Polo\", person2), Traveled_with(\"Christopher Columbus\", person1), person1 = person2.\n.output Answer", "completions": [".decl Traveled_with(Person1:symbol, Person2:symbol)\nTraveled_with(\"Marco Polo\", \"Kublai Khan\").\nTraveled_with(\"Christopher Columbus\", \"Ferdinand Magellan\").\n.decl Answer()\nAnswer() :- Traveled_with(\"Marco Polo\", person2), Traveled_with(\"Christopher Columbus\", person1), person1 = person2.\n.output Answer"]}
{"id": 1370, "answer": true, "completion": ".decl Rooted_in(Language_A:symbol, Language_B:symbol)\nRooted_in(\"Saint Vincent and the Grenadines language\", \"English\").\n.decl Answer()\nAnswer() :- Rooted_in(\"Saint Vincent and the Grenadines language\", \"English\").\n.output Answer", "completions": [".decl Rooted_in(Language_A:symbol, Language_B:symbol)\nRooted_in(\"Saint Vincent and the Grenadines language\", \"English\").\n.decl Answer()\nAnswer() :- Rooted_in(\"Saint Vincent and the Grenadines language\", \"English\").\n.output Answer"]}
{"id": 1371, "answer": true, "completion": ".decl Met(Person1:symbol, Person2:symbol)\nMet(\"Lionel Richie\", \"Michael Jackson\").\n.decl Answer()\nAnswer() :- !Met(\"Lionel Richie\", \"Abraham Lincoln\").\n.output Answer", "completions": [".decl Met(Person1:symbol, Person2:symbol)\nMet(\"Lionel Richie\", \"Michael Jackson\").\n.decl Answer()\nAnswer() :- !Met(\"Lionel Richie\", \"Abraham Lincoln\").\n.output Answer"]}
{"id": 1372, "answer": false, "completion": ".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"traffic collision\", \"injury\").\n.decl Results_in(Effect:symbol, Outcome:symbol)\nResults_in(\"injury\", \"settlement\").\n.decl Answer()\nAnswer() :- Causes(\"traffic collision\", effect), Results_in(effect, outcome), outcome = \"settlement\", Outcome(\"settlement\", amount), amount >= 1000000.\n.output Answer", "completions": [".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"traffic collision\", \"injury\").\n.decl Results_in(Effect:symbol, Outcome:symbol)\nResults_in(\"injury\", \"settlement\").\n.decl Answer()\nAnswer() :- Causes(\"traffic collision\", effect), Results_in(effect, outcome), outcome = \"settlement\", Outcome(\"settlement\", amount), amount >= 1000000.\n.output Answer"]}
{"id": 1373, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"parsley\", 0.87).\nHas_density(\"milk\", 1.03).\n.decl Answer()\nAnswer() :- Has_density(\"parsley\", density1), Has_density(\"milk\", density2), density1 < density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"parsley\", 0.87).\nHas_density(\"milk\", 1.03).\n.decl Answer()\nAnswer() :- Has_density(\"parsley\", density1), Has_density(\"milk\", density2), density1 < density2.\n.output Answer"]}
{"id": 1374, "answer": false, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Happy Gilmore Productions CEO\", \"golf clubs\").\n.decl Answer()\nAnswer() :- Owns(\"Happy Gilmore Productions CEO\", \"Torah\").\n.output Answer", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"Happy Gilmore Productions CEO\", \"golf clubs\").\n.decl Answer()\nAnswer() :- Owns(\"Happy Gilmore Productions CEO\", \"Torah\").\n.output Answer"]}
{"id": 1375, "answer": false, "completion": ".decl Belongs_to_category(Person:symbol, Category:symbol)\nBelongs_to_category(\"pacifist\", \"non-violence\").\nBelongs_to_category(\"hunter\", \"violence\").\n.decl Opposes(Category1:symbol, Category2:symbol)\nOpposes(\"non-violence\", \"violence\").\n.decl Answer()\nAnswer() :- Belongs_to_category(\"pacifist\", category1), Belongs_to_category(\"hunter\", category2), Opposes(category1, category2).\n.output Answer", "completions": [".decl Belongs_to_category(Person:symbol, Category:symbol)\nBelongs_to_category(\"pacifist\", \"non-violence\").\nBelongs_to_category(\"hunter\", \"violence\").\n.decl Opposes(Category1:symbol, Category2:symbol)\nOpposes(\"non-violence\", \"violence\").\n.decl Answer()\nAnswer() :- Belongs_to_category(\"pacifist\", category1), Belongs_to_category(\"hunter\", category2), Opposes(category1, category2).\n.output Answer"]}
{"id": 1376, "answer": false, "completion": ".decl Mortality_rate(Cause:symbol, Rate:float)\nMortality_rate(\"plague\", 0.5).\nMortality_rate(\"selfies\", 0.000001).\n.decl Answer()\nAnswer() :- Mortality_rate(\"selfies\", rate1), Mortality_rate(\"plague\", rate2), rate1 > rate2.\n.output Answer", "completions": [".decl Mortality_rate(Cause:symbol, Rate:float)\nMortality_rate(\"plague\", 0.5).\nMortality_rate(\"selfies\", 0.000001).\n.decl Answer()\nAnswer() :- Mortality_rate(\"selfies\", rate1), Mortality_rate(\"plague\", rate2), rate1 > rate2.\n.output Answer"]}
{"id": 1377, "answer": true, "completion": ".decl Airs_on_channel(Show:symbol, Channel:symbol)\nAirs_on_channel(\"Naruto\", \"Cartoon Network\").\nAirs_on_channel(\"Puzzle Place\", \"PBS\").\n.decl Answer()\nAnswer() :- Airs_on_channel(\"Naruto\", channel), Airs_on_channel(\"Puzzle Place\", channel).\n.output Answer", "completions": [".decl Airs_on_channel(Show:symbol, Channel:symbol)\nAirs_on_channel(\"Naruto\", \"Cartoon Network\").\nAirs_on_channel(\"Puzzle Place\", \"PBS\").\n.decl Answer()\nAnswer() :- Airs_on_channel(\"Naruto\", channel), Airs_on_channel(\"Puzzle Place\", channel).\n.output Answer"]}
{"id": 1378, "answer": true, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Johnny Carson\", 3).\n.decl N_players(Team:symbol, N_players:float)\nN_players(\"water polo\", 7).\n.decl Answer()\nAnswer() :- Has_children(\"Johnny Carson\", n_children), N_players(\"water polo\", n_players), n_children >= n_players.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Johnny Carson\", 3).\n.decl N_players(Team:symbol, N_players:float)\nN_players(\"water polo\", 7).\n.decl Answer()\nAnswer() :- Has_children(\"Johnny Carson\", n_children), N_players(\"water polo\", n_players), n_children >= n_players.\n.output Answer"]}
{"id": 1379, "answer": true, "completion": ".decl Sent_delegation(Tribe:symbol, Event:symbol)\nSent_delegation(\"Cherokee\", \"oppose allotment\").\n.decl Answer()\nAnswer() :- Sent_delegation(\"Cherokee\", \"oppose allotment\").\n.output Answer", "completions": [".decl Sent_delegation(Tribe:symbol, Event:symbol)\nSent_delegation(\"Cherokee\", \"oppose allotment\").\n.decl Answer()\nAnswer() :- Sent_delegation(\"Cherokee\", \"oppose allotment\").\n.output Answer"]}
{"id": 1380, "answer": false, "completion": ".decl Performs(Medical_professional:symbol, Procedure:symbol)\nPerforms(\"pediatrician\", \"check-up\").\nPerforms(\"OB/GYN\", \"abortion\").\n.decl Answer()\nAnswer() :- Performs(\"pediatrician\", procedure), procedure != \"check-up\", Performs(\"OB/GYN\", \"abortion\").\n.output Answer", "completions": [".decl Performs(Medical_professional:symbol, Procedure:symbol)\nPerforms(\"pediatrician\", \"check-up\").\nPerforms(\"OB/GYN\", \"abortion\").\n.decl Answer()\nAnswer() :- Performs(\"pediatrician\", procedure), procedure != \"check-up\", Performs(\"OB/GYN\", \"abortion\").\n.output Answer"]}
{"id": 1381, "answer": false, "completion": ".decl Features_movie(Movie:symbol, Feature:symbol)\nFeatures_movie(\"Brave\", \"Scottish people\").\n.decl Answer()\nAnswer() :- Features_movie(\"Brave\", \"Scottish people\").\n.output Answer", "completions": [".decl Features_movie(Movie:symbol, Feature:symbol)\nFeatures_movie(\"Brave\", \"Scottish people\").\n.decl Answer()\nAnswer() :- Features_movie(\"Brave\", \"Scottish people\").\n.output Answer"]}
{"id": 1382, "answer": true, "completion": ".decl Is_located(City:symbol, Latitude:float)\nIs_located(\"Cape Town\", -33.9253).\n.decl Answer()\nAnswer() :- Is_located(\"Cape Town\", latitude), latitude < 0.\n.output Answer", "completions": [".decl Is_located(City:symbol, Latitude:float)\nIs_located(\"Cape Town\", -33.9253).\n.decl Answer()\nAnswer() :- Is_located(\"Cape Town\", latitude), latitude < 0.\n.output Answer"]}
{"id": 1383, "answer": true, "completion": ".decl Protective_over_music(Band:symbol)\nProtective_over_music(\"Metallica\").\n.decl Answer()\nAnswer() :- Protective_over_music(\"Metallica\").\n.output Answer", "completions": [".decl Protective_over_music(Band:symbol)\nProtective_over_music(\"Metallica\").\n.decl Answer()\nAnswer() :- Protective_over_music(\"Metallica\").\n.output Answer"]}
{"id": 1384, "answer": true, "completion": ".decl Accepts(Applicant:symbol, School:symbol)\nAccepts(\"John Smith\", \"United States Military Academy\").\n.decl Has_condition(Condition:symbol, Applicant:symbol)\nHas_condition(\"multiple sclerosis\", \"John Smith\").\n.decl Answer()\nAnswer() :- Accepts(applicant, \"United States Military Academy\"), !Has_condition(\"multiple sclerosis\", applicant).\n.output Answer", "completions": [".decl Accepts(Applicant:symbol, School:symbol)\nAccepts(\"John Smith\", \"United States Military Academy\").\n.decl Has_condition(Condition:symbol, Applicant:symbol)\nHas_condition(\"multiple sclerosis\", \"John Smith\").\n.decl Answer()\nAnswer() :- Accepts(applicant, \"United States Military Academy\"), !Has_condition(\"multiple sclerosis\", applicant).\n.output Answer"]}
{"id": 1385, "answer": true, "completion": ".decl Violates_principle(Country:symbol, Principle:symbol)\nViolates_principle(\"USA\", \"separation of church and state\").\nViolates_principle(\"USA\", \"freedom of religion\").\nViolates_principle(\"USA\", \"establishment of religion\").\n.decl Answer()\nAnswer() :- Violates_principle(\"USA\", principle).\n.output Answer", "completions": [".decl Violates_principle(Country:symbol, Principle:symbol)\nViolates_principle(\"USA\", \"separation of church and state\").\nViolates_principle(\"USA\", \"freedom of religion\").\nViolates_principle(\"USA\", \"establishment of religion\").\n.decl Answer()\nAnswer() :- Violates_principle(\"USA\", principle).\n.output Answer"]}
{"id": 1386, "answer": true, "completion": ".decl Potential_recipient(Person:symbol, Award:symbol)\nPotential_recipient(\"Jesse W. Moore\", \"Snoopy Award\").\n.decl Given_by(Award:symbol, Organization:symbol)\nGiven_by(\"Snoopy Award\", \"NASA\").\n.decl Answer()\nAnswer() :- Potential_recipient(\"Jesse W. Moore\", award), Given_by(award, \"NASA\").\n.output Answer", "completions": [".decl Potential_recipient(Person:symbol, Award:symbol)\nPotential_recipient(\"Jesse W. Moore\", \"Snoopy Award\").\n.decl Given_by(Award:symbol, Organization:symbol)\nGiven_by(\"Snoopy Award\", \"NASA\").\n.decl Answer()\nAnswer() :- Potential_recipient(\"Jesse W. Moore\", award), Given_by(award, \"NASA\").\n.output Answer"]}
{"id": 1387, "answer": false, "completion": ".decl Sells(Food:symbol, Location:symbol)\nSells(\"Raclette\", \"Switzerland\").\nSells(\"Raclette\", \"France\").\nSells(\"Raclette\", \"YMCA headquarters city\").\n.decl Answer()\nAnswer() :- Sells(\"Raclette\", \"YMCA headquarters city\").\n.output Answer", "completions": [".decl Sells(Food:symbol, Location:symbol)\nSells(\"Raclette\", \"Switzerland\").\nSells(\"Raclette\", \"France\").\nSells(\"Raclette\", \"YMCA headquarters city\").\n.decl Answer()\nAnswer() :- Sells(\"Raclette\", \"YMCA headquarters city\").\n.output Answer"]}
{"id": 1388, "answer": true, "completion": ".decl Plays_sport(Person:symbol, Sport:symbol)\nPlays_sport(\"ABBA member 1\", \"tennis\").\nPlays_sport(\"ABBA member 2\", \"tennis\").\n.decl Answer()\nAnswer() :- Plays_sport(\"ABBA member 1\", sport1), Plays_sport(\"ABBA member 2\", sport2), sport1 = \"tennis\", sport2 = \"tennis\", \"ABBA member 1\" != \"ABBA member 2\".\n.output Answer", "completions": [".decl Plays_sport(Person:symbol, Sport:symbol)\nPlays_sport(\"ABBA member 1\", \"tennis\").\nPlays_sport(\"ABBA member 2\", \"tennis\").\n.decl Answer()\nAnswer() :- Plays_sport(\"ABBA member 1\", sport1), Plays_sport(\"ABBA member 2\", sport2), sport1 = \"tennis\", sport2 = \"tennis\", \"ABBA member 1\" != \"ABBA member 2\".\n.output Answer"]}
{"id": 1389, "answer": false, "completion": ".decl Wrestles(Person:symbol, Year:float)\nWrestles(\"Stone Cold Steve Austin\", 1999).\nWrestles(\"Stone Cold Steve Austin\", 2000).\nWrestles(\"Stone Cold Steve Austin\", 2001).\nWrestles(\"Stone Cold Steve Austin\", 2019).\nWrestles(\"Stone Cold Steve Austin\", 2020).\n.decl Answer()\nAnswer() :- Wrestles(\"Stone Cold Steve Austin\", year1), Wrestles(\"Stone Cold Steve Austin\", year2), Wrestles(\"Stone Cold Steve Austin\", year3), year1 < year2, year2 < year3, year1 < 100, year2 >= 100, year3 >= 2000.\n.output Answer", "completions": [".decl Wrestles(Person:symbol, Year:float)\nWrestles(\"Stone Cold Steve Austin\", 1999).\nWrestles(\"Stone Cold Steve Austin\", 2000).\nWrestles(\"Stone Cold Steve Austin\", 2001).\nWrestles(\"Stone Cold Steve Austin\", 2019).\nWrestles(\"Stone Cold Steve Austin\", 2020).\n.decl Answer()\nAnswer() :- Wrestles(\"Stone Cold Steve Austin\", year1), Wrestles(\"Stone Cold Steve Austin\", year2), Wrestles(\"Stone Cold Steve Austin\", year3), year1 < year2, year2 < year3, year1 < 100, year2 >= 100, year3 >= 2000.\n.output Answer"]}
{"id": 1390, "answer": false, "completion": ".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"water\", \"viscosity\").\n.decl Answer()\nAnswer() :- Has_property(\"water\", \"viscosity\").\n.output Answer", "completions": [".decl Has_property(Object:symbol, Property:symbol)\nHas_property(\"water\", \"viscosity\").\n.decl Answer()\nAnswer() :- Has_property(\"water\", \"viscosity\").\n.output Answer"]}
{"id": 1391, "answer": true, "completion": ".decl Uses_device(Person:symbol, Device:symbol)\nUses_device(\"Gallaudet student\", \"hearing aid\").\n.decl Useful_for(Person:symbol, Device:symbol)\nUseful_for(\"Gallaudet student\", \"sign language interpreter\").\nUseful_for(\"Gallaudet student\", \"vibrating alarm clock\").\n.decl Answer()\nAnswer() :- Uses_device(\"Gallaudet student\", device), Useful_for(\"Gallaudet student\", device).\n.output Answer", "completions": [".decl Uses_device(Person:symbol, Device:symbol)\nUses_device(\"Gallaudet student\", \"hearing aid\").\n.decl Useful_for(Person:symbol, Device:symbol)\nUseful_for(\"Gallaudet student\", \"sign language interpreter\").\nUseful_for(\"Gallaudet student\", \"vibrating alarm clock\").\n.decl Answer()\nAnswer() :- Uses_device(\"Gallaudet student\", device), Useful_for(\"Gallaudet student\", device).\n.output Answer"]}
{"id": 1392, "answer": true, "completion": ".decl Glued_on(Object_A:symbol, Object_B:symbol)\nGlued_on(\"sesame seeds\", \"hamburger buns\").\n.decl Answer()\nAnswer() :- Glued_on(\"sesame seeds\", \"hamburger buns\").\n.output Answer", "completions": [".decl Glued_on(Object_A:symbol, Object_B:symbol)\nGlued_on(\"sesame seeds\", \"hamburger buns\").\n.decl Answer()\nAnswer() :- Glued_on(\"sesame seeds\", \"hamburger buns\").\n.output Answer"]}
{"id": 1393, "answer": true, "completion": ".decl Can_box(Person:symbol)\nCan_box(\"Sugar Ray Robinson\").\n.decl Commits_crime(Person:symbol, Country:symbol)\nCommits_crime(\"Sugar Ray Robinson\", \"Iran\").\n.decl Answer()\nAnswer() :- Can_box(person), !Commits_crime(person, \"Iran\").\n.output Answer", "completions": [".decl Can_box(Person:symbol)\nCan_box(\"Sugar Ray Robinson\").\n.decl Commits_crime(Person:symbol, Country:symbol)\nCommits_crime(\"Sugar Ray Robinson\", \"Iran\").\n.decl Answer()\nAnswer() :- Can_box(person), !Commits_crime(person, \"Iran\").\n.output Answer"]}
{"id": 1394, "answer": false, "completion": ".decl Lives_in(Being:symbol, Place:symbol)\nLives_in(\"Ahura Mazda\", \"heaven\").\nLives_in(\"Abaddon\", \"abyss\").\n.decl Is_above(Place1:symbol, Place2:symbol)\nIs_above(\"heaven\", \"abyss\").\n.decl Answer()\nAnswer() :- Lives_in(\"Ahura Mazda\", place1), Lives_in(\"Abaddon\", place2), Is_above(place1, place2).\n.output Answer", "completions": [".decl Lives_in(Being:symbol, Place:symbol)\nLives_in(\"Ahura Mazda\", \"heaven\").\nLives_in(\"Abaddon\", \"abyss\").\n.decl Is_above(Place1:symbol, Place2:symbol)\nIs_above(\"heaven\", \"abyss\").\n.decl Answer()\nAnswer() :- Lives_in(\"Ahura Mazda\", place1), Lives_in(\"Abaddon\", place2), Is_above(place1, place2).\n.output Answer"]}
{"id": 1395, "answer": false, "completion": ".decl Speeds(Animal:symbol, Speed:float)\nSpeeds(\"tortoise\", 0.2).\nSpeeds(\"Chicago \\\"L\\\"\", 40).\n.decl Answer()\nAnswer() :- Speeds(\"tortoise\", speed1), Speeds(\"Chicago \\\"L\\\"\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Speeds(Animal:symbol, Speed:float)\nSpeeds(\"tortoise\", 0.2).\nSpeeds(\"Chicago \\\"L\\\"\", 40).\n.decl Answer()\nAnswer() :- Speeds(\"tortoise\", speed1), Speeds(\"Chicago \\\"L\\\"\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 1396, "answer": true, "completion": ".decl Celebrates(Event:symbol, Occasion:symbol)\nCelebrates(\"Earth Day\", \"planting trees\").\nCelebrates(\"Earth Day\", \"cleaning up litter\").\nCelebrates(\"Earth Day\", \"recycling\").\n.decl Answer()\nAnswer() :- Celebrates(\"Earth Day\", occasion), occasion != \"ceremonial tire fire\".\n.output Answer", "completions": [".decl Celebrates(Event:symbol, Occasion:symbol)\nCelebrates(\"Earth Day\", \"planting trees\").\nCelebrates(\"Earth Day\", \"cleaning up litter\").\nCelebrates(\"Earth Day\", \"recycling\").\n.decl Answer()\nAnswer() :- Celebrates(\"Earth Day\", occasion), occasion != \"ceremonial tire fire\".\n.output Answer"]}
{"id": 1397, "answer": false, "completion": ".decl Built_in(Country:symbol, Ship:symbol)\nBuilt_in(\"UK\", \"HMS Ocean\").\nBuilt_in(\"UK\", \"HMS Clyde\").\nBuilt_in(\"Brazil\", \"Barroso\").\nBuilt_in(\"Brazil\", \"Greenhalgh\").\n.decl Answer()\nAnswer() :- Built_in(\"Brazil\", ship), Built_in(country, ship), country != \"Brazil\".\n.output Answer", "completions": [".decl Built_in(Country:symbol, Ship:symbol)\nBuilt_in(\"UK\", \"HMS Ocean\").\nBuilt_in(\"UK\", \"HMS Clyde\").\nBuilt_in(\"Brazil\", \"Barroso\").\nBuilt_in(\"Brazil\", \"Greenhalgh\").\n.decl Answer()\nAnswer() :- Built_in(\"Brazil\", ship), Built_in(country, ship), country != \"Brazil\".\n.output Answer"]}
{"id": 1398, "answer": true, "completion": ".decl Character_name(Character:symbol, Name:symbol)\nCharacter_name(\"Harry Potter\", \"Harry\").\nCharacter_name(\"Ron Weasley\", \"Ron\").\nCharacter_name(\"Hermione Granger\", \"Hermione\").\nCharacter_name(\"Florence\", \"Florence\").\n.decl Named_after(Character:symbol, Person:symbol)\nNamed_after(\"Hermione Granger\", \"Hermione Gingold\").\nNamed_after(\"Ron Weasley\", \"Ronald Bilius Weasley\").\n.decl Answer()\nAnswer() :- Character_name(character, \"Florence\"), Named_after(character, \"Florence\").\n.output Answer", "completions": [".decl Character_name(Character:symbol, Name:symbol)\nCharacter_name(\"Harry Potter\", \"Harry\").\nCharacter_name(\"Ron Weasley\", \"Ron\").\nCharacter_name(\"Hermione Granger\", \"Hermione\").\nCharacter_name(\"Florence\", \"Florence\").\n.decl Named_after(Character:symbol, Person:symbol)\nNamed_after(\"Hermione Granger\", \"Hermione Gingold\").\nNamed_after(\"Ron Weasley\", \"Ronald Bilius Weasley\").\n.decl Answer()\nAnswer() :- Character_name(character, \"Florence\"), Named_after(character, \"Florence\").\n.output Answer"]}
{"id": 1399, "answer": false, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Lil Wayne\", 4).\n.decl Can_fit_in_car(Car:symbol, N_people:float)\nCan_fit_in_car(\"Chevrolet Corvette ZR1\", 2).\n.decl Answer()\nAnswer() :- Has_children(\"Lil Wayne\", n_children), Can_fit_in_car(\"Chevrolet Corvette ZR1\", n_people), n_children <= n_people.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Lil Wayne\", 4).\n.decl Can_fit_in_car(Car:symbol, N_people:float)\nCan_fit_in_car(\"Chevrolet Corvette ZR1\", 2).\n.decl Answer()\nAnswer() :- Has_children(\"Lil Wayne\", n_children), Can_fit_in_car(\"Chevrolet Corvette ZR1\", n_people), n_children <= n_people.\n.output Answer"]}
{"id": 1400, "answer": false, "completion": ".decl GDP(Country:symbol, GDP:float)\nGDP(\"Iceland\", 24.2).\nGDP(\"Amazon\", 386.1).\n.decl Answer()\nAnswer() :- GDP(\"Iceland\", gdp1), GDP(\"Amazon\", gdp2), gdp1 < gdp2.\n.output Answer", "completions": [".decl GDP(Country:symbol, GDP:float)\nGDP(\"Iceland\", 24.2).\nGDP(\"Amazon\", 386.1).\n.decl Answer()\nAnswer() :- GDP(\"Iceland\", gdp1), GDP(\"Amazon\", gdp2), gdp1 < gdp2.\n.output Answer"]}
{"id": 1401, "answer": false, "completion": ".decl Is_good_rating(Rating:float)\nIs_good_rating(5).\n.decl Answer()\nAnswer() :- Is_good_rating(rating).\n.output Answer", "completions": [".decl Is_good_rating(Rating:float)\nIs_good_rating(5).\n.decl Answer()\nAnswer() :- Is_good_rating(rating).\n.output Answer"]}
{"id": 1402, "answer": false, "completion": ".decl Encourages(Government:symbol, Culture:symbol)\nEncourages(\"USA\", \"hippie culture\").\nEncourages(\"UK\", \"hippie culture\").\n.decl Answer()\nAnswer() :- Encourages(\"Soviet Union\", \"hippie culture\"), !.\n.output Answer", "completions": [".decl Encourages(Government:symbol, Culture:symbol)\nEncourages(\"USA\", \"hippie culture\").\nEncourages(\"UK\", \"hippie culture\").\n.decl Answer()\nAnswer() :- Encourages(\"Soviet Union\", \"hippie culture\"), !.\n.output Answer"]}
{"id": 1403, "answer": false, "completion": ".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"AK-47\", \"Cold War\").\nUsed_in_war(\"musket\", \"Seven Years' War\").\n.decl Answer()\nAnswer() :- Used_in_war(\"AK-47\", war), Used_in_war(\"musket\", war), war = \"Seven Years' War\".\n.output Answer", "completions": [".decl Used_in_war(Weapon:symbol, War:symbol)\nUsed_in_war(\"AK-47\", \"Cold War\").\nUsed_in_war(\"musket\", \"Seven Years' War\").\n.decl Answer()\nAnswer() :- Used_in_war(\"AK-47\", war), Used_in_war(\"musket\", war), war = \"Seven Years' War\".\n.output Answer"]}
{"id": 1404, "answer": false, "completion": ".decl Has_religious_symbol(City:symbol, Symbol:symbol)\nHas_religious_symbol(\"Rome\", \"crucifix\").\nHas_religious_symbol(\"Karachi\", \"crescent\").\n.decl Answer()\nAnswer() :- Has_religious_symbol(\"Karachi\", symbol), symbol != \"crucifix\".\n.output Answer", "completions": [".decl Has_religious_symbol(City:symbol, Symbol:symbol)\nHas_religious_symbol(\"Rome\", \"crucifix\").\nHas_religious_symbol(\"Karachi\", \"crescent\").\n.decl Answer()\nAnswer() :- Has_religious_symbol(\"Karachi\", symbol), symbol != \"crucifix\".\n.output Answer"]}
{"id": 1405, "answer": false, "completion": ".decl Born(Person:symbol, Year:float)\nBorn(\"Alan Greenspan\", 1926).\n.decl Elected(President:symbol, Year:float)\nElected(\"Franklin D. Roosevelt\", 1932).\nElected(\"Harry S. Truman\", 1945).\nElected(\"Dwight D. Eisenhower\", 1952).\nElected(\"John F. Kennedy\", 1960).\nElected(\"Lyndon B. Johnson\", 1963).\nElected(\"Richard Nixon\", 1968).\nElected(\"Gerald Ford\", 1974).\nElected(\"Jimmy Carter\", 1976).\nElected(\"Ronald Reagan\", 1980).\nElected(\"George H. W. Bush\", 1988).\nElected(\"Bill Clinton\", 1992).\nElected(\"George W. Bush\", 2000).\nElected(\"Barack Obama\", 2008).\nElected(\"Donald Trump\", 2016).\n.decl Answer()\nAnswer() :- Born(\"Alan Greenspan\", birth_year), Elected(president, election_year), election_year > birth_year, count{president: Elected(president, year)} >= 13.\n.output Answer", "completions": [".decl Born(Person:symbol, Year:float)\nBorn(\"Alan Greenspan\", 1926).\n.decl Elected(President:symbol, Year:float)\nElected(\"Franklin D. Roosevelt\", 1932).\nElected(\"Harry S. Truman\", 1945).\nElected(\"Dwight D. Eisenhower\", 1952).\nElected(\"John F. Kennedy\", 1960).\nElected(\"Lyndon B. Johnson\", 1963).\nElected(\"Richard Nixon\", 1968).\nElected(\"Gerald Ford\", 1974).\nElected(\"Jimmy Carter\", 1976).\nElected(\"Ronald Reagan\", 1980).\nElected(\"George H. W. Bush\", 1988).\nElected(\"Bill Clinton\", 1992).\nElected(\"George W. Bush\", 2000).\nElected(\"Barack Obama\", 2008).\nElected(\"Donald Trump\", 2016).\n.decl Answer()\nAnswer() :- Born(\"Alan Greenspan\", birth_year), Elected(president, election_year), election_year > birth_year, count{president: Elected(president, year)} >= 13.\n.output Answer"]}
{"id": 1406, "answer": false, "completion": ".decl Receives(Person:symbol, Newspaper:symbol)\nReceives(\"John\", \"Boston Globe\").\nReceives(\"Jane\", \"Toronto Star\").\n.decl Answer()\nAnswer() :- Receives(person, \"Boston Globe\"), !Receives(person, \"Toronto Star\").\n.output Answer", "completions": [".decl Receives(Person:symbol, Newspaper:symbol)\nReceives(\"John\", \"Boston Globe\").\nReceives(\"Jane\", \"Toronto Star\").\n.decl Answer()\nAnswer() :- Receives(person, \"Boston Globe\"), !Receives(person, \"Toronto Star\").\n.output Answer"]}
{"id": 1407, "answer": true, "completion": ".decl Friends(Person1:symbol, Person2:symbol)\nFriends(\"50 Cent\", \"Eminem\").\nFriends(\"Eminem\", \"Dr. Dre\").\nFriends(\"Dr. Dre\", \"Snoop Dogg\").\nFriends(\"Snoop Dogg\", \"Nate Dogg\").\nFriends(\"Nate Dogg\", \"Warren G\").\nFriends(\"Warren G\", \"Nate Dogg\").\n.decl Answer()\nAnswer() :- Friends(\"50 Cent\", person1), Friends(person1, person2), person2 = \"Jeffrey Atkins\".\n.output Answer", "completions": [".decl Friends(Person1:symbol, Person2:symbol)\nFriends(\"50 Cent\", \"Eminem\").\nFriends(\"Eminem\", \"Dr. Dre\").\nFriends(\"Dr. Dre\", \"Snoop Dogg\").\nFriends(\"Snoop Dogg\", \"Nate Dogg\").\nFriends(\"Nate Dogg\", \"Warren G\").\nFriends(\"Warren G\", \"Nate Dogg\").\n.decl Answer()\nAnswer() :- Friends(\"50 Cent\", person1), Friends(person1, person2), person2 = \"Jeffrey Atkins\".\n.output Answer"]}
{"id": 1408, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person1\", \"DID\").\n.decl Has_memory(Person:symbol, Memory:float)\nHas_memory(\"person1\", 0.7).\n.decl Answer()\nAnswer() :- Has_condition(person, \"DID\"), Has_memory(person, memory), memory > 0.5.\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person1\", \"DID\").\n.decl Has_memory(Person:symbol, Memory:float)\nHas_memory(\"person1\", 0.7).\n.decl Answer()\nAnswer() :- Has_condition(person, \"DID\"), Has_memory(person, memory), memory > 0.5.\n.output Answer"]}
{"id": 1409, "answer": true, "completion": ".decl Has_CAS_number(Substance:symbol, CAS_number:symbol)\nHas_CAS_number(\"8009-03-8\", \"harmful for a rash\").\n.decl Answer()\nAnswer() :- Has_CAS_number(cas_number, \"harmful for a rash\").\n.output Answer", "completions": [".decl Has_CAS_number(Substance:symbol, CAS_number:symbol)\nHas_CAS_number(\"8009-03-8\", \"harmful for a rash\").\n.decl Answer()\nAnswer() :- Has_CAS_number(cas_number, \"harmful for a rash\").\n.output Answer"]}
{"id": 1410, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"wolverine\", \"taiga\").\nLives_in(\"wolverine\", \"tundra\").\nLives_in(\"wolverine\", \"boreal forest\").\n.decl Is_located_in(City:symbol, Region:symbol)\nIs_located_in(\"Miami\", \"Florida\").\n.decl Answer()\nAnswer() :- Lives_in(\"wolverine\", habitat), Is_located_in(\"Miami\", region), habitat != region.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"wolverine\", \"taiga\").\nLives_in(\"wolverine\", \"tundra\").\nLives_in(\"wolverine\", \"boreal forest\").\n.decl Is_located_in(City:symbol, Region:symbol)\nIs_located_in(\"Miami\", \"Florida\").\n.decl Answer()\nAnswer() :- Lives_in(\"wolverine\", habitat), Is_located_in(\"Miami\", region), habitat != region.\n.output Answer"]}
{"id": 1411, "answer": true, "completion": ".decl Released_on_day(Album:symbol, Day:symbol)\nReleased_on_day(\"Doggystyle\", \"Tuesday\").\n.decl Released_on_weekend(Album:symbol)\nReleased_on_weekend(album) :- Released_on_day(album, \"Saturday\").\nReleased_on_weekend(album) :- Released_on_day(album, \"Sunday\").\n.decl Answer()\nAnswer() :- Released_on_weekend(\"Doggystyle\").\n.output Answer", "completions": [".decl Released_on_day(Album:symbol, Day:symbol)\nReleased_on_day(\"Doggystyle\", \"Tuesday\").\n.decl Released_on_weekend(Album:symbol)\nReleased_on_weekend(album) :- Released_on_day(album, \"Saturday\").\nReleased_on_weekend(album) :- Released_on_day(album, \"Sunday\").\n.decl Answer()\nAnswer() :- Released_on_weekend(\"Doggystyle\").\n.output Answer"]}
{"id": 1412, "answer": false, "completion": ".decl Dangerous(Location:symbol)\nDangerous(\"Amazonas\").\n.decl Answer()\nAnswer() :- Dangerous(location), !.\n.output Answer", "completions": [".decl Dangerous(Location:symbol)\nDangerous(\"Amazonas\").\n.decl Answer()\nAnswer() :- Dangerous(location), !.\n.output Answer"]}
{"id": 1413, "answer": false, "completion": ".decl Has_crop_yield(Crop:symbol, State:symbol, Yield:float)\nHas_crop_yield(\"Cauliflower\", \"Arizona\", 100).\nHas_crop_yield(\"Cauliflower\", \"California\", 80).\n.decl Answer()\nAnswer() :- Has_crop_yield(\"Cauliflower\", \"Arizona\", yield1), Has_crop_yield(\"Cauliflower\", \"California\", yield2), yield1 > yield2.\n.output Answer", "completions": [".decl Has_crop_yield(Crop:symbol, State:symbol, Yield:float)\nHas_crop_yield(\"Cauliflower\", \"Arizona\", 100).\nHas_crop_yield(\"Cauliflower\", \"California\", 80).\n.decl Answer()\nAnswer() :- Has_crop_yield(\"Cauliflower\", \"Arizona\", yield1), Has_crop_yield(\"Cauliflower\", \"California\", yield2), yield1 > yield2.\n.output Answer"]}
{"id": 1414, "answer": true, "completion": ".decl Edible_in_context(Food:symbol, Context:symbol)\nEdible_in_context(\"horseradish\", \"Passover\").\nEdible_in_context(\"pork\", \"Islamic dietary laws\").\n.decl Answer()\nAnswer() :- Edible_in_context(\"horseradish\", context).\n.output Answer", "completions": [".decl Edible_in_context(Food:symbol, Context:symbol)\nEdible_in_context(\"horseradish\", \"Passover\").\nEdible_in_context(\"pork\", \"Islamic dietary laws\").\n.decl Answer()\nAnswer() :- Edible_in_context(\"horseradish\", context).\n.output Answer"]}
{"id": 1415, "answer": false, "completion": ".decl Follows(Person:symbol, Celebrity:symbol)\nFollows(\"fan1\", \"Katy Perry\").\nFollows(\"fan2\", \"Katy Perry\").\nFollows(\"fan3\", \"Katy Perry\").\nFollows(\"fan4\", \"Katy Perry\").\nFollows(\"fan5\", \"Katy Perry\").\nFollows(\"fan6\", \"Katy Perry\").\nFollows(\"fan7\", \"Katy Perry\").\nFollows(\"fan8\", \"Katy Perry\").\nFollows(\"fan9\", \"Katy Perry\").\nFollows(\"fan10\", \"Katy Perry\").\nFollows(\"fan11\", \"Katy Perry\").\nFollows(\"fan12\", \"Katy Perry\").\nFollows(\"fan13\", \"Katy Perry\").\nFollows(\"fan14\", \"Katy Perry\").\nFollows(\"fan15\", \"Katy Perry\").\nFollows(\"fan16\", \"Katy Perry\").\nFollows(\"fan17\", \"Katy Perry\").\nFollows(\"fan18\", \"Katy Perry\").\nFollows(\"fan19\", \"Katy Perry\").\nFollows(\"fan20\", \"Katy Perry\").\nFollows(\"fan21\", \"Katy Perry\").\nFollows(\"fan22\", \"Katy Perry\").\nFollows(\"fan23\", \"Katy Perry\").\nFollows(\"fan24\", \"Katy Perry\").\nFollows(\"fan25\", \"Katy Perry\").\nFollows(\"fan26\", \"Katy Perry\").\nFollows(\"fan27\", \"Katy Perry\").\nFollows(\"fan28\", \"Katy Perry\").\nFollows(\"fan29\", \"Katy Perry\").\nFollows(\"fan30\", \"Katy Perry\").\nFollows(\"fan31\", \"Katy Perry\").\nFollows(\"fan32\", \"Katy Perry\").\nFollows(\"fan33\", \"Katy Perry\").\nFollows(\"fan34\", \"Katy Perry\").\nFollows(\"fan35\", \"Katy Perry\").\nFollows(\"fan36\", \"Katy Perry\").\nFollows(\"fan37\", \"Katy Perry\").\nFollows(\"fan38\", \"Katy Perry\").\nFollows(\"fan39\", \"Katy Perry\").\nFollows(\"fan40\", \"Katy Perry\").\nFollows(\"fan41\", \"Katy Perry\").\nFollows(\"fan42\", \"Katy Perry\").\nFollows(\"fan43\", \"Katy Perry\").\nFollows(\"fan44\", \"Katy Perry\").\nFollows(\"fan45\", \"Katy Perry\").\nFollows(\"fan46\", \"Katy Perry\").\nFollows(\"fan47\", \"Katy Perry\").\nFollows(\"fan48\", \"Katy Perry\").\nFollows(\"fan49\", \"Katy Perry\").\nFollows(\"fan50\", \"Katy Perry\").\nFollows(\"fan51\", \"Katy Perry\").\nFollows(\"fan52\", \"Katy Perry\").\nFollows(\"fan53\", \"Katy Perry\").\nFollows(\"fan54\", \"Katy Perry\").\nFollows(\"fan55\", \"Katy Perry\").\nFollows(\"fan56\", \"Katy Perry\").\nFollows(\"fan57\", \"Katy Perry\").\nFollows(\"fan58\", \"Katy Perry\").\nFollows(\"fan59\", \"Katy Perry\").\nFollows(\"fan60\", \"Katy Perry\").\nFollows(\"fan61\", \"Katy Perry\").\nFollows(\"fan62\", \"Katy Perry\").\nFollows(\"fan63\", \"Katy Perry\").\nFollows(\"fan64\", \"Katy Perry\").\nFollows(\"fan65\", \"Katy Perry\").\nFollows(\"fan66\", \"Katy Perry\").\nFollows(\"fan67\", \"Katy Perry\").\nFollows(\"fan68\", \"Katy Perry\").\nFollows(\"fan69\", \"Katy Perry\").\nFollows(\"fan70\", \"Katy Perry\").\nFollows(\"fan71\", \"Katy Perry\").\nFollows(\"fan72\", \"Katy Perry\").\nFollows(\"fan73\", \"Katy Perry\").\nFollows(\"fan74\", \"Katy Perry\").\nFollows(\"fan75\", \"Katy Perry\").\nFollows(\"fan76\", \"Katy Perry\").\nFollows(\"fan77\", \"Katy Perry\").\nFollows(\"fan78\", \"Katy Perry\").\nFollows(\"fan79\", \"Katy Perry\").\nFollows(\"fan80\", \"Katy Perry\").\nFollows(\"fan81\", \"Katy Perry\").\nFollows(\"fan82\", \"Katy Perry\").\nFollows(\"fan83\", \"Katy Perry\").\nFollows(\"fan84\", \"Katy Perry\").\nFollows(\"fan85\", \"Katy Perry\").\nFollows(\"fan86\", \"Katy Perry\").\nFollows(\"fan87\", \"Katy Perry\").\nFollows(\"fan88\", \"Katy Perry\").\nFollows(\"fan89\", \"Katy Perry\").\nFollows(\"fan90\", \"Katy Perry\").\nFollows(\"fan91\", \"Katy Perry\").\nFollows(\"fan92\", \"Katy Perry\").\nFollows(\"fan93\", \"Katy Perry\").\nFollows(\"fan94\", \"Katy Perry\").\nFollows(\"fan95\", \"Katy Perry\").\nFollows(\"fan96\", \"Katy Perry\").\nFollows(\"fan97\", \"Katy Perry\").\nFollows(\"fan98\", \"Katy Perry\").\nFollows(\"fan99\", \"Katy Perry\").\nFollows(\"fan100\", \"Katy Perry\").\n.decl Answer()\nAnswer() :- Follows(person, \"Katy Perry\"), person != \"fan1\", person != \"fan2\", person != \"fan3\", person != \"fan4\", person != \"fan5\", person != \"fan6\", person != \"fan7\", person != \"fan8\", person != \"fan9\", person != \"fan10\", person != \"fan11\", person != \"fan12\", person != \"fan13\", person != \"fan14\", person != \"fan15\", person != \"fan16\", person != \"fan17\", person != \"fan18\", person != \"fan19\", person != \"fan20\", person != \"fan21\", person != \"fan22\", person != \"fan23\", person != \"fan24\", person != \"fan25\", person != \"fan26\", person != \"fan27\", person != \"fan28\", person != \"fan29\", person != \"fan30\", person != \"fan31\", person != \"fan32\", person != \"fan33\", person != \"fan34\", person != \"fan35\", person != \"fan36\", person != \"fan37\", person != \"fan38\", person != \"fan39\", person != \"fan40\", person != \"fan41\", person != \"fan42\", person != \"fan43\", person != \"fan44\", person != \"fan45\", person != \"fan46\", person != \"fan47\", person != \"fan48\", person != \"fan49\", person != \"fan50\", person != \"fan51\", person != \"fan52\", person != \"fan53\", person != \"fan54\", person != \"fan55\", person != \"fan56\", person != \"fan57\", person != \"fan58\", person != \"fan59\", person != \"fan60\", person != \"fan61\", person != \"fan62\", person != \"fan63\", person != \"fan64\", person != \"fan65\", person != \"fan66\", person != \"fan67\", person != \"fan68\", person != \"fan69\", person != \"fan70\", person != \"fan71\", person != \"fan72\", person != \"fan73\", person != \"fan74\", person != \"fan75\", person != \"fan76\", person != \"fan77\", person != \"fan78\", person != \"fan79\", person != \"fan80\", person != \"fan81\", person != \"fan82\", person != \"fan83\", person != \"fan84\", person != \"fan85\", person != \"fan86\", person != \"fan87\", person != \"fan88\", person != \"fan89\", person != \"fan90\", person != \"fan91\", person != \"fan92\", person != \"fan93\", person != \"fan94\", person != \"fan95\", person != \"fan96\", person != \"fan97\", person != \"fan98\", person != \"fan99\", person != \"fan100\".\n.output Answer", "completions": [".decl Follows(Person:symbol, Celebrity:symbol)\nFollows(\"fan1\", \"Katy Perry\").\nFollows(\"fan2\", \"Katy Perry\").\nFollows(\"fan3\", \"Katy Perry\").\nFollows(\"fan4\", \"Katy Perry\").\nFollows(\"fan5\", \"Katy Perry\").\nFollows(\"fan6\", \"Katy Perry\").\nFollows(\"fan7\", \"Katy Perry\").\nFollows(\"fan8\", \"Katy Perry\").\nFollows(\"fan9\", \"Katy Perry\").\nFollows(\"fan10\", \"Katy Perry\").\nFollows(\"fan11\", \"Katy Perry\").\nFollows(\"fan12\", \"Katy Perry\").\nFollows(\"fan13\", \"Katy Perry\").\nFollows(\"fan14\", \"Katy Perry\").\nFollows(\"fan15\", \"Katy Perry\").\nFollows(\"fan16\", \"Katy Perry\").\nFollows(\"fan17\", \"Katy Perry\").\nFollows(\"fan18\", \"Katy Perry\").\nFollows(\"fan19\", \"Katy Perry\").\nFollows(\"fan20\", \"Katy Perry\").\nFollows(\"fan21\", \"Katy Perry\").\nFollows(\"fan22\", \"Katy Perry\").\nFollows(\"fan23\", \"Katy Perry\").\nFollows(\"fan24\", \"Katy Perry\").\nFollows(\"fan25\", \"Katy Perry\").\nFollows(\"fan26\", \"Katy Perry\").\nFollows(\"fan27\", \"Katy Perry\").\nFollows(\"fan28\", \"Katy Perry\").\nFollows(\"fan29\", \"Katy Perry\").\nFollows(\"fan30\", \"Katy Perry\").\nFollows(\"fan31\", \"Katy Perry\").\nFollows(\"fan32\", \"Katy Perry\").\nFollows(\"fan33\", \"Katy Perry\").\nFollows(\"fan34\", \"Katy Perry\").\nFollows(\"fan35\", \"Katy Perry\").\nFollows(\"fan36\", \"Katy Perry\").\nFollows(\"fan37\", \"Katy Perry\").\nFollows(\"fan38\", \"Katy Perry\").\nFollows(\"fan39\", \"Katy Perry\").\nFollows(\"fan40\", \"Katy Perry\").\nFollows(\"fan41\", \"Katy Perry\").\nFollows(\"fan42\", \"Katy Perry\").\nFollows(\"fan43\", \"Katy Perry\").\nFollows(\"fan44\", \"Katy Perry\").\nFollows(\"fan45\", \"Katy Perry\").\nFollows(\"fan46\", \"Katy Perry\").\nFollows(\"fan47\", \"Katy Perry\").\nFollows(\"fan48\", \"Katy Perry\").\nFollows(\"fan49\", \"Katy Perry\").\nFollows(\"fan50\", \"Katy Perry\").\nFollows(\"fan51\", \"Katy Perry\").\nFollows(\"fan52\", \"Katy Perry\").\nFollows(\"fan53\", \"Katy Perry\").\nFollows(\"fan54\", \"Katy Perry\").\nFollows(\"fan55\", \"Katy Perry\").\nFollows(\"fan56\", \"Katy Perry\").\nFollows(\"fan57\", \"Katy Perry\").\nFollows(\"fan58\", \"Katy Perry\").\nFollows(\"fan59\", \"Katy Perry\").\nFollows(\"fan60\", \"Katy Perry\").\nFollows(\"fan61\", \"Katy Perry\").\nFollows(\"fan62\", \"Katy Perry\").\nFollows(\"fan63\", \"Katy Perry\").\nFollows(\"fan64\", \"Katy Perry\").\nFollows(\"fan65\", \"Katy Perry\").\nFollows(\"fan66\", \"Katy Perry\").\nFollows(\"fan67\", \"Katy Perry\").\nFollows(\"fan68\", \"Katy Perry\").\nFollows(\"fan69\", \"Katy Perry\").\nFollows(\"fan70\", \"Katy Perry\").\nFollows(\"fan71\", \"Katy Perry\").\nFollows(\"fan72\", \"Katy Perry\").\nFollows(\"fan73\", \"Katy Perry\").\nFollows(\"fan74\", \"Katy Perry\").\nFollows(\"fan75\", \"Katy Perry\").\nFollows(\"fan76\", \"Katy Perry\").\nFollows(\"fan77\", \"Katy Perry\").\nFollows(\"fan78\", \"Katy Perry\").\nFollows(\"fan79\", \"Katy Perry\").\nFollows(\"fan80\", \"Katy Perry\").\nFollows(\"fan81\", \"Katy Perry\").\nFollows(\"fan82\", \"Katy Perry\").\nFollows(\"fan83\", \"Katy Perry\").\nFollows(\"fan84\", \"Katy Perry\").\nFollows(\"fan85\", \"Katy Perry\").\nFollows(\"fan86\", \"Katy Perry\").\nFollows(\"fan87\", \"Katy Perry\").\nFollows(\"fan88\", \"Katy Perry\").\nFollows(\"fan89\", \"Katy Perry\").\nFollows(\"fan90\", \"Katy Perry\").\nFollows(\"fan91\", \"Katy Perry\").\nFollows(\"fan92\", \"Katy Perry\").\nFollows(\"fan93\", \"Katy Perry\").\nFollows(\"fan94\", \"Katy Perry\").\nFollows(\"fan95\", \"Katy Perry\").\nFollows(\"fan96\", \"Katy Perry\").\nFollows(\"fan97\", \"Katy Perry\").\nFollows(\"fan98\", \"Katy Perry\").\nFollows(\"fan99\", \"Katy Perry\").\nFollows(\"fan100\", \"Katy Perry\").\n.decl Answer()\nAnswer() :- Follows(person, \"Katy Perry\"), person != \"fan1\", person != \"fan2\", person != \"fan3\", person != \"fan4\", person != \"fan5\", person != \"fan6\", person != \"fan7\", person != \"fan8\", person != \"fan9\", person != \"fan10\", person != \"fan11\", person != \"fan12\", person != \"fan13\", person != \"fan14\", person != \"fan15\", person != \"fan16\", person != \"fan17\", person != \"fan18\", person != \"fan19\", person != \"fan20\", person != \"fan21\", person != \"fan22\", person != \"fan23\", person != \"fan24\", person != \"fan25\", person != \"fan26\", person != \"fan27\", person != \"fan28\", person != \"fan29\", person != \"fan30\", person != \"fan31\", person != \"fan32\", person != \"fan33\", person != \"fan34\", person != \"fan35\", person != \"fan36\", person != \"fan37\", person != \"fan38\", person != \"fan39\", person != \"fan40\", person != \"fan41\", person != \"fan42\", person != \"fan43\", person != \"fan44\", person != \"fan45\", person != \"fan46\", person != \"fan47\", person != \"fan48\", person != \"fan49\", person != \"fan50\", person != \"fan51\", person != \"fan52\", person != \"fan53\", person != \"fan54\", person != \"fan55\", person != \"fan56\", person != \"fan57\", person != \"fan58\", person != \"fan59\", person != \"fan60\", person != \"fan61\", person != \"fan62\", person != \"fan63\", person != \"fan64\", person != \"fan65\", person != \"fan66\", person != \"fan67\", person != \"fan68\", person != \"fan69\", person != \"fan70\", person != \"fan71\", person != \"fan72\", person != \"fan73\", person != \"fan74\", person != \"fan75\", person != \"fan76\", person != \"fan77\", person != \"fan78\", person != \"fan79\", person != \"fan80\", person != \"fan81\", person != \"fan82\", person != \"fan83\", person != \"fan84\", person != \"fan85\", person != \"fan86\", person != \"fan87\", person != \"fan88\", person != \"fan89\", person != \"fan90\", person != \"fan91\", person != \"fan92\", person != \"fan93\", person != \"fan94\", person != \"fan95\", person != \"fan96\", person != \"fan97\", person != \"fan98\", person != \"fan99\", person != \"fan100\".\n.output Answer"]}
{"id": 1416, "answer": false, "completion": ".decl Relies_on(Chef:symbol, Ingredient:symbol)\nRelies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Relies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.output Answer", "completions": [".decl Relies_on(Chef:symbol, Ingredient:symbol)\nRelies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.decl Answer()\nAnswer() :- Relies_on(\"Masaharu Morimoto\", \"glutamic acid\").\n.output Answer"]}
{"id": 1417, "answer": true, "completion": ".decl Sensitivity(Animal:symbol)\nSensitivity(\"common carp\").\n.decl Answer()\nAnswer() :- Sensitivity(animal).\n.output Answer", "completions": [".decl Sensitivity(Animal:symbol)\nSensitivity(\"common carp\").\n.decl Answer()\nAnswer() :- Sensitivity(animal).\n.output Answer"]}
{"id": 1418, "answer": true, "completion": ".decl Share_price(Company:symbol, Price:float)\nShare_price(\"Amazon\", 3000).\n.decl Subscription_price(Service:symbol, Price:float, Duration:float)\nSubscription_price(\"Netflix\", 200, 20).\n.decl Answer()\nAnswer() :- Share_price(\"Amazon\", price1), Subscription_price(\"Netflix\", price2, duration), price1/duration >= 20*price2.\n.output Answer", "completions": [".decl Share_price(Company:symbol, Price:float)\nShare_price(\"Amazon\", 3000).\n.decl Subscription_price(Service:symbol, Price:float, Duration:float)\nSubscription_price(\"Netflix\", 200, 20).\n.decl Answer()\nAnswer() :- Share_price(\"Amazon\", price1), Subscription_price(\"Netflix\", price2, duration), price1/duration >= 20*price2.\n.output Answer"]}
{"id": 1419, "answer": true, "completion": ".decl Killed_with_weapon(Fighter:symbol, Weapon:symbol)\nKilled_with_weapon(\"gladiator\", \"sword\").\n.decl Answer()\nAnswer() :- !Killed_with_weapon(\"gladiator\", \"shotgun\").\n.output Answer", "completions": [".decl Killed_with_weapon(Fighter:symbol, Weapon:symbol)\nKilled_with_weapon(\"gladiator\", \"sword\").\n.decl Answer()\nAnswer() :- !Killed_with_weapon(\"gladiator\", \"shotgun\").\n.output Answer"]}
{"id": 1420, "answer": false, "completion": ".decl Habitat(Creature:symbol, Habitat:symbol)\nHabitat(\"Mediterranean Sea creature\", \"Mediterranean Sea\").\n.decl Killed_by(Creature:symbol, Person:symbol)\nKilled_by(\"stingray\", \"Steve Irwin\").\n.decl Answer()\nAnswer() :- Habitat(\"Mediterranean Sea creature\", habitat), Killed_by(creature, \"Steve Irwin\"), creature != \"stingray\".\nAnswer() :- Habitat(\"Mediterranean Sea creature\", habitat), Killed_by(\"stingray\", \"Steve Irwin\"), habitat = \"Mediterranean Sea\".\n.output Answer", "completions": [".decl Habitat(Creature:symbol, Habitat:symbol)\nHabitat(\"Mediterranean Sea creature\", \"Mediterranean Sea\").\n.decl Killed_by(Creature:symbol, Person:symbol)\nKilled_by(\"stingray\", \"Steve Irwin\").\n.decl Answer()\nAnswer() :- Habitat(\"Mediterranean Sea creature\", habitat), Killed_by(creature, \"Steve Irwin\"), creature != \"stingray\".\nAnswer() :- Habitat(\"Mediterranean Sea creature\", habitat), Killed_by(\"stingray\", \"Steve Irwin\"), habitat = \"Mediterranean Sea\".\n.output Answer"]}
{"id": 1421, "answer": false, "completion": ".decl Cures_in_time(Substance:symbol, Time:float)\nCures_in_time(\"E6000\", 24).\n.decl Finishes_in_time(Event:symbol, Time:float)\nFinishes_in_time(\"Daytona 500\", 180).\n.decl Answer()\nAnswer() :- Cures_in_time(substance, time1), Finishes_in_time(\"Daytona 500\", time2), time1 < time2.\n.output Answer", "completions": [".decl Cures_in_time(Substance:symbol, Time:float)\nCures_in_time(\"E6000\", 24).\n.decl Finishes_in_time(Event:symbol, Time:float)\nFinishes_in_time(\"Daytona 500\", 180).\n.decl Answer()\nAnswer() :- Cures_in_time(substance, time1), Finishes_in_time(\"Daytona 500\", time2), time1 < time2.\n.output Answer"]}
{"id": 1422, "answer": false, "completion": ".decl Plays(Game:symbol, Player:symbol)\nPlays(\"League of Legends\", \"Cosmic Girls\").\n.decl Requires(Game:symbol, Players:float)\nRequires(\"League of Legends\", 2).\n.decl Answer()\nAnswer() :- Plays(game, \"Cosmic Girls\"), Requires(game, players), players = 1.\n.output Answer", "completions": [".decl Plays(Game:symbol, Player:symbol)\nPlays(\"League of Legends\", \"Cosmic Girls\").\n.decl Requires(Game:symbol, Players:float)\nRequires(\"League of Legends\", 2).\n.decl Answer()\nAnswer() :- Plays(game, \"Cosmic Girls\"), Requires(game, players), players = 1.\n.output Answer"]}
{"id": 1423, "answer": false, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"The Godfather\", 1945).\nHappens_in_year(\"Y2K\", 2000).\n.decl Answer()\nAnswer() :- Happens_in_year(\"The Godfather\", year), !Happens_in_year(\"Y2K\", year).\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"The Godfather\", 1945).\nHappens_in_year(\"Y2K\", 2000).\n.decl Answer()\nAnswer() :- Happens_in_year(\"The Godfather\", year), !Happens_in_year(\"Y2K\", year).\n.output Answer"]}
{"id": 1424, "answer": false, "completion": ".decl Airs_at_time(Show:symbol, Time:symbol)\nAirs_at_time(\"The Tonight Show Starring Jimmy Fallon\", \"11:35pm EST\").\n.decl Moonset_at_date(Date:symbol, Time:symbol)\nMoonset_at_date(\"August 20, 2020\", \"8:30pm EST\").\n.decl Answer()\nAnswer() :- Airs_at_time(\"The Tonight Show Starring Jimmy Fallon\", time1), Moonset_at_date(\"August 20, 2020\", time2), time1 > time2.\n.output Answer", "completions": [".decl Airs_at_time(Show:symbol, Time:symbol)\nAirs_at_time(\"The Tonight Show Starring Jimmy Fallon\", \"11:35pm EST\").\n.decl Moonset_at_date(Date:symbol, Time:symbol)\nMoonset_at_date(\"August 20, 2020\", \"8:30pm EST\").\n.decl Answer()\nAnswer() :- Airs_at_time(\"The Tonight Show Starring Jimmy Fallon\", time1), Moonset_at_date(\"August 20, 2020\", time2), time1 > time2.\n.output Answer"]}
{"id": 1425, "answer": false, "completion": ".decl Graduates(Person:symbol, Class:symbol)\nGraduates(\"John Smith\", \"Class of 2017\").\n.decl Remembers(Person:symbol, Event:symbol)\nRemembers(\"John Smith\", \"9/11\").\n.decl Answer()\nAnswer() :- Graduates(person, \"Class of 2017\"), Remembers(person, event), event != \"9/11\".\nAnswer() :- Graduates(\"John Smith\", \"Class of 2017\"), !Remembers(\"John Smith\", \"9/11\").\n.output Answer", "completions": [".decl Graduates(Person:symbol, Class:symbol)\nGraduates(\"John Smith\", \"Class of 2017\").\n.decl Remembers(Person:symbol, Event:symbol)\nRemembers(\"John Smith\", \"9/11\").\n.decl Answer()\nAnswer() :- Graduates(person, \"Class of 2017\"), Remembers(person, event), event != \"9/11\".\nAnswer() :- Graduates(\"John Smith\", \"Class of 2017\"), !Remembers(\"John Smith\", \"9/11\").\n.output Answer"]}
{"id": 1426, "answer": false, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Janet Jackson\", \"vegetables\").\nLikes(\"Janet Jackson\", \"fruit\").\nLikes(\"Janet Jackson\", \"seafood\").\n.dislikes(Person:symbol, Food:symbol)\ndislikes(\"Janet Jackson\", \"ham\").\n.decl Answer()\nAnswer() :- Likes(\"Janet Jackson\", food1), dislikes(\"Janet Jackson\", food2), food1 != food2.\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Janet Jackson\", \"vegetables\").\nLikes(\"Janet Jackson\", \"fruit\").\nLikes(\"Janet Jackson\", \"seafood\").\n.dislikes(Person:symbol, Food:symbol)\ndislikes(\"Janet Jackson\", \"ham\").\n.decl Answer()\nAnswer() :- Likes(\"Janet Jackson\", food1), dislikes(\"Janet Jackson\", food2), food1 != food2.\n.output Answer"]}
{"id": 1427, "answer": false, "completion": ".decl Covers_area(Object:symbol, Area:float)\nCovers_area(\"pea pod\", 0.0001).\n.decl Total_area(Area:float)\nTotal_area(0.64).\n.decl Answer()\nAnswer() :- Covers_area(\"pea pod\", area), Total_area(total_area), area * 20 >= total_area.\n.output Answer", "completions": [".decl Covers_area(Object:symbol, Area:float)\nCovers_area(\"pea pod\", 0.0001).\n.decl Total_area(Area:float)\nTotal_area(0.64).\n.decl Answer()\nAnswer() :- Covers_area(\"pea pod\", area), Total_area(total_area), area * 20 >= total_area.\n.output Answer"]}
{"id": 1428, "answer": true, "completion": ".decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"footprints on the moon\", 1969).\n.decl Answer()\nAnswer() :- Happened_in_year(\"footprints on the moon\", year), year >= 1960.\n.output Answer", "completions": [".decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"footprints on the moon\", 1969).\n.decl Answer()\nAnswer() :- Happened_in_year(\"footprints on the moon\", year), year >= 1960.\n.output Answer"]}
{"id": 1429, "answer": false, "completion": ".decl Answer()\nAnswer() :- false. // No, the Supreme Court of Canada cannot fight a Lucha trios match.\n.output Answer", "completions": [".decl Answer()\nAnswer() :- false. // No, the Supreme Court of Canada cannot fight a Lucha trios match.\n.output Answer"]}
{"id": 1430, "answer": false, "completion": ".decl Has_readers(Publication:symbol, N_readers:float)\nHas_readers(\"The Atlantic\", 500000).\n.decl Has_battalions(N_battalions:float)\nHas_battalions(500).\n.decl Answer()\nAnswer() :- Has_readers(\"The Atlantic\", n_readers), Has_battalions(n_battalions), n_readers / 1000 >= n_battalions.\n.output Answer", "completions": [".decl Has_readers(Publication:symbol, N_readers:float)\nHas_readers(\"The Atlantic\", 500000).\n.decl Has_battalions(N_battalions:float)\nHas_battalions(500).\n.decl Answer()\nAnswer() :- Has_readers(\"The Atlantic\", n_readers), Has_battalions(n_battalions), n_readers / 1000 >= n_battalions.\n.output Answer"]}
{"id": 1431, "answer": true, "completion": ".decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"French Revolution\", 1789).\n.decl Invented_in_year(Invention:symbol, Year:float)\nInvented_in_year(\"television\", 1927).\n.decl Answer()\nAnswer() :- Happened_in_year(\"French Revolution\", year), Invented_in_year(\"television\", invention_year), year > invention_year.\n.output Answer", "completions": [".decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"French Revolution\", 1789).\n.decl Invented_in_year(Invention:symbol, Year:float)\nInvented_in_year(\"television\", 1927).\n.decl Answer()\nAnswer() :- Happened_in_year(\"French Revolution\", year), Invented_in_year(\"television\", invention_year), year > invention_year.\n.output Answer"]}
{"id": 1432, "answer": false, "completion": ".decl Experienced_tragedy(Person:symbol)\nExperienced_tragedy(\"Dr. Seuss\").\n.decl Answer()\nAnswer() :- !Experienced_tragedy(\"Dr. Seuss\").\n.output Answer", "completions": [".decl Experienced_tragedy(Person:symbol)\nExperienced_tragedy(\"Dr. Seuss\").\n.decl Answer()\nAnswer() :- !Experienced_tragedy(\"Dr. Seuss\").\n.output Answer"]}
{"id": 1433, "answer": false, "completion": ".decl Is_type_of(Tree:symbol, Type:symbol)\nIs_type_of(\"Christmas tree\", \"evergreen\").\nIs_type_of(\"oak tree\", \"deciduous\").\n.decl Answer()\nAnswer() :- Is_type_of(\"Christmas tree\", type1), Is_type_of(\"oak tree\", type2), type1 != type2.\n.output Answer", "completions": [".decl Is_type_of(Tree:symbol, Type:symbol)\nIs_type_of(\"Christmas tree\", \"evergreen\").\nIs_type_of(\"oak tree\", \"deciduous\").\n.decl Answer()\nAnswer() :- Is_type_of(\"Christmas tree\", type1), Is_type_of(\"oak tree\", type2), type1 != type2.\n.output Answer"]}
{"id": 1434, "answer": true, "completion": ".decl Produces(Animal:symbol, Product:symbol)\nProduces(\"cow\", \"milk\").\n.decl Named_after(Person:symbol, Name:symbol)\nNamed_after(\"Harvey Milk\", \"Harvey Milk\").\n.decl Answer()\nAnswer() :- Produces(\"cow\", product), Named_after(\"Harvey Milk\", name), product = name.\n.output Answer", "completions": [".decl Produces(Animal:symbol, Product:symbol)\nProduces(\"cow\", \"milk\").\n.decl Named_after(Person:symbol, Name:symbol)\nNamed_after(\"Harvey Milk\", \"Harvey Milk\").\n.decl Answer()\nAnswer() :- Produces(\"cow\", product), Named_after(\"Harvey Milk\", name), product = name.\n.output Answer"]}
{"id": 1435, "answer": false, "completion": ".decl Protagonist(Character:symbol, Story:symbol)\nProtagonist(\"Roland\", \"Song of Roland\").\n.decl Belongs_to_group(Character:symbol, Group:symbol)\nBelongs_to_group(\"Roland\", \"Paladins\").\nBelongs_to_group(\"Paladins\", \"Charlemagne's court\").\nBelongs_to_group(\"Charlemagne's court\", \"Frankish nobility\").\nBelongs_to_group(\"Beowulf\", \"Geats\").\nBelongs_to_group(\"Beowulf\", \"Scyldings\").\n.decl Has_sagas(Group:symbol)\nHas_sagas(\"Scyldings\").\n.decl Answer()\nAnswer() :- Protagonist(character, \"Song of Roland\"), Belongs_to_group(character, group1), Belongs_to_group(\"Scyldings\", group2), Has_sagas(group2), group1 = group2.\n.output Answer", "completions": [".decl Protagonist(Character:symbol, Story:symbol)\nProtagonist(\"Roland\", \"Song of Roland\").\n.decl Belongs_to_group(Character:symbol, Group:symbol)\nBelongs_to_group(\"Roland\", \"Paladins\").\nBelongs_to_group(\"Paladins\", \"Charlemagne's court\").\nBelongs_to_group(\"Charlemagne's court\", \"Frankish nobility\").\nBelongs_to_group(\"Beowulf\", \"Geats\").\nBelongs_to_group(\"Beowulf\", \"Scyldings\").\n.decl Has_sagas(Group:symbol)\nHas_sagas(\"Scyldings\").\n.decl Answer()\nAnswer() :- Protagonist(character, \"Song of Roland\"), Belongs_to_group(character, group1), Belongs_to_group(\"Scyldings\", group2), Has_sagas(group2), group1 = group2.\n.output Answer"]}
{"id": 1436, "answer": false, "completion": ".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"cucumber1\", \"crunchy\").\nHas_texture(\"cucumber2\", \"crunchy\").\nHas_texture(\"cucumber3\", \"soft\").\n.decl Answer()\nAnswer() :- Has_texture(\"cucumber1\", texture), Has_texture(\"cucumber2\", texture), Has_texture(\"cucumber3\", texture), texture != \"soft\".\n.output Answer", "completions": [".decl Has_texture(Object:symbol, Texture:symbol)\nHas_texture(\"cucumber1\", \"crunchy\").\nHas_texture(\"cucumber2\", \"crunchy\").\nHas_texture(\"cucumber3\", \"soft\").\n.decl Answer()\nAnswer() :- Has_texture(\"cucumber1\", texture), Has_texture(\"cucumber2\", texture), Has_texture(\"cucumber3\", texture), texture != \"soft\".\n.output Answer"]}
{"id": 1437, "answer": false, "completion": ".decl Used_in_country(Currency:symbol, Country:symbol)\nUsed_in_country(\"Euro\", \"Germany\").\nUsed_in_country(\"Deutsche Mark\", \"Prussia\").\n.decl Answer()\nAnswer() :- Used_in_country(\"Euro\", country), Used_in_country(\"Deutsche Mark\", country), country = \"Prussia\", !.\nAnswer() :- Used_in_country(\"Euro\", \"Prussia\").\n.output Answer", "completions": [".decl Used_in_country(Currency:symbol, Country:symbol)\nUsed_in_country(\"Euro\", \"Germany\").\nUsed_in_country(\"Deutsche Mark\", \"Prussia\").\n.decl Answer()\nAnswer() :- Used_in_country(\"Euro\", country), Used_in_country(\"Deutsche Mark\", country), country = \"Prussia\", !.\nAnswer() :- Used_in_country(\"Euro\", \"Prussia\").\n.output Answer"]}
{"id": 1438, "answer": true, "completion": ".decl Carries(Character:symbol, Object:symbol)\nCarries(\"Bugs Bunny\", \"carrot\").\n.decl Answer()\nAnswer() :- Carries(\"Bugs Bunny\", \"root vegetable\"), Object != \"carrot\".\n.output Answer", "completions": [".decl Carries(Character:symbol, Object:symbol)\nCarries(\"Bugs Bunny\", \"carrot\").\n.decl Answer()\nAnswer() :- Carries(\"Bugs Bunny\", \"root vegetable\"), Object != \"carrot\".\n.output Answer"]}
{"id": 1439, "answer": true, "completion": ".decl Punishes(Crime:symbol, Punishment:symbol)\nPunishes(\"theft\", \"eye for an eye\").\nPunishes(\"murder\", \"life for a life\").\n.decl Upholds_principle(Punishment:symbol, Principle:symbol)\nUpholds_principle(\"eye for an eye\", \"retributive justice\").\nUpholds_principle(\"life for a life\", \"retributive justice\").\n.decl Violates_principle(Principle:symbol)\nViolates_principle(\"Christian's Golden Rule\").\nViolates_principle(\"retributive justice\") :- Upholds_principle(punishment1, \"retributive justice\"), Upholds_principle(punishment2, \"Christian's Golden Rule\"), punishment1 != punishment2.\n.decl Answer()\nAnswer() :- !Violates_principle(\"Christian's Golden Rule\").\n.output Answer", "completions": [".decl Punishes(Crime:symbol, Punishment:symbol)\nPunishes(\"theft\", \"eye for an eye\").\nPunishes(\"murder\", \"life for a life\").\n.decl Upholds_principle(Punishment:symbol, Principle:symbol)\nUpholds_principle(\"eye for an eye\", \"retributive justice\").\nUpholds_principle(\"life for a life\", \"retributive justice\").\n.decl Violates_principle(Principle:symbol)\nViolates_principle(\"Christian's Golden Rule\").\nViolates_principle(\"retributive justice\") :- Upholds_principle(punishment1, \"retributive justice\"), Upholds_principle(punishment2, \"Christian's Golden Rule\"), punishment1 != punishment2.\n.decl Answer()\nAnswer() :- !Violates_principle(\"Christian's Golden Rule\").\n.output Answer"]}
{"id": 1440, "answer": true, "completion": ".decl Originates_in_century(Religion:symbol, Century:float)\nOriginates_in_century(\"Hinduism\", 2).\nOriginates_in_century(\"Buddhism\", 5).\nOriginates_in_century(\"Sikhism\", 15).\nOriginates_in_century(\"Newar Buddhism\", 19).\n.decl Has_sacred_place(Religion:symbol, Place:symbol)\nHas_sacred_place(\"Hinduism\", \"Himalayas\").\nHas_sacred_place(\"Buddhism\", \"Himalayas\").\nHas_sacred_place(\"Sikhism\", \"Himalayas\").\nHas_sacred_place(\"Newar Buddhism\", \"Himalayas\").\n.decl Answer()\nAnswer() :- Has_sacred_place(religion, \"Himalayas\"), Originates_in_century(religion, century), century >= 19.\n.output Answer", "completions": [".decl Originates_in_century(Religion:symbol, Century:float)\nOriginates_in_century(\"Hinduism\", 2).\nOriginates_in_century(\"Buddhism\", 5).\nOriginates_in_century(\"Sikhism\", 15).\nOriginates_in_century(\"Newar Buddhism\", 19).\n.decl Has_sacred_place(Religion:symbol, Place:symbol)\nHas_sacred_place(\"Hinduism\", \"Himalayas\").\nHas_sacred_place(\"Buddhism\", \"Himalayas\").\nHas_sacred_place(\"Sikhism\", \"Himalayas\").\nHas_sacred_place(\"Newar Buddhism\", \"Himalayas\").\n.decl Answer()\nAnswer() :- Has_sacred_place(religion, \"Himalayas\"), Originates_in_century(religion, century), century >= 19.\n.output Answer"]}
{"id": 1441, "answer": false, "completion": ".decl Believes_in(Book:symbol, Religion:symbol)\nBelieves_in(\"Ten commandments\", \"Judaism\").\nBelieves_in(\"bible\", \"Christianity\").\nBelieves_in(\"bible\", \"Judaism\").\n.decl Answer()\nAnswer() :- Believes_in(\"Ten commandments\", religion), Believes_in(\"bible\", religion), religion != \"Judaism\".\n.output Answer", "completions": [".decl Believes_in(Book:symbol, Religion:symbol)\nBelieves_in(\"Ten commandments\", \"Judaism\").\nBelieves_in(\"bible\", \"Christianity\").\nBelieves_in(\"bible\", \"Judaism\").\n.decl Answer()\nAnswer() :- Believes_in(\"Ten commandments\", religion), Believes_in(\"bible\", religion), religion != \"Judaism\".\n.output Answer"]}
{"id": 1442, "answer": false, "completion": ".decl Can_conduct_surveillance(Object:symbol)\nCan_conduct_surveillance(\"teddy bear\").\n.decl Answer()\nAnswer() :- Can_conduct_surveillance(object).\n.output Answer", "completions": [".decl Can_conduct_surveillance(Object:symbol)\nCan_conduct_surveillance(\"teddy bear\").\n.decl Answer()\nAnswer() :- Can_conduct_surveillance(object).\n.output Answer"]}
{"id": 1443, "answer": true, "completion": ".decl Has_job_title(Person:symbol, Job_title:symbol)\nHas_job_title(\"retail associate\", \"associate\").\nHas_job_title(\"CEO\", \"CEO\").\n.decl Has_salary(Job_title:symbol, Salary:float)\nHas_salary(\"associate\", 30000).\nHas_salary(\"CEO\", 1000000).\n.decl Answer()\nAnswer() :- Has_job_title(\"retail associate\", job_title1), Has_job_title(\"CEO\", job_title2), Has_salary(job_title1, salary1), Has_salary(job_title2, salary2), salary2 > salary1.\n.output Answer", "completions": [".decl Has_job_title(Person:symbol, Job_title:symbol)\nHas_job_title(\"retail associate\", \"associate\").\nHas_job_title(\"CEO\", \"CEO\").\n.decl Has_salary(Job_title:symbol, Salary:float)\nHas_salary(\"associate\", 30000).\nHas_salary(\"CEO\", 1000000).\n.decl Answer()\nAnswer() :- Has_job_title(\"retail associate\", job_title1), Has_job_title(\"CEO\", job_title2), Has_salary(job_title1, salary1), Has_salary(job_title2, salary2), salary2 > salary1.\n.output Answer"]}
{"id": 1444, "answer": false, "completion": ".decl Has_band(Member:symbol, Band:symbol)\nHas_band(\"Kevin Parker\", \"Tame Impala\").\nHas_band(\"Jay Watson\", \"Tame Impala\").\nHas_band(\"Dominic Simper\", \"Tame Impala\").\nHas_band(\"Cam Avery\", \"Tame Impala\").\n.decl Can_play_game(Member:symbol, Game:symbol)\nCan_play_game(\"Kevin Parker\", \"Hot Potato\").\nCan_play_game(\"Jay Watson\", \"Hot Potato\").\nCan_play_game(\"Dominic Simper\", \"Hot Potato\").\nCan_play_game(\"Cam Avery\", \"Hot Potato\").\n.decl Answer()\nAnswer() :- Has_band(member, \"Tame Impala\"), !Can_play_game(member, \"Hot Potato\").\nAnswer() :- Has_band(member, \"Tame Impala\"), Can_play_game(member, \"Hot Potato\").\n.output Answer", "completions": [".decl Has_band(Member:symbol, Band:symbol)\nHas_band(\"Kevin Parker\", \"Tame Impala\").\nHas_band(\"Jay Watson\", \"Tame Impala\").\nHas_band(\"Dominic Simper\", \"Tame Impala\").\nHas_band(\"Cam Avery\", \"Tame Impala\").\n.decl Can_play_game(Member:symbol, Game:symbol)\nCan_play_game(\"Kevin Parker\", \"Hot Potato\").\nCan_play_game(\"Jay Watson\", \"Hot Potato\").\nCan_play_game(\"Dominic Simper\", \"Hot Potato\").\nCan_play_game(\"Cam Avery\", \"Hot Potato\").\n.decl Answer()\nAnswer() :- Has_band(member, \"Tame Impala\"), !Can_play_game(member, \"Hot Potato\").\nAnswer() :- Has_band(member, \"Tame Impala\"), Can_play_game(member, \"Hot Potato\").\n.output Answer"]}
{"id": 1445, "answer": false, "completion": ".decl Harmful(Substance:symbol)\nHarmful(\"lactic acid\").\n.decl Answer()\nAnswer() :- !Harmful(\"lactic acid\").\n.output Answer", "completions": [".decl Harmful(Substance:symbol)\nHarmful(\"lactic acid\").\n.decl Answer()\nAnswer() :- !Harmful(\"lactic acid\").\n.output Answer"]}
{"id": 1446, "answer": false, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"President Trump's first term\", 4).\n.decl Repainted(Event:symbol)\nRepainted(\"Tokyo Tower\").\n.decl Answer()\nAnswer() :- Repainted(\"Tokyo Tower\"), Last_n_years(\"President Trump's first term\", n_years), n_years = 1.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"President Trump's first term\", 4).\n.decl Repainted(Event:symbol)\nRepainted(\"Tokyo Tower\").\n.decl Answer()\nAnswer() :- Repainted(\"Tokyo Tower\"), Last_n_years(\"President Trump's first term\", n_years), n_years = 1.\n.output Answer"]}
{"id": 1447, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Apollo 15 crew\", \"astronaut training\").\n.decl Has_equipment(Person:symbol, Equipment:symbol)\nHas_equipment(\"Apollo 15 crew\", \"lunar rover\").\n.decl Answer()\nAnswer() :- Has_skill(\"Apollo 15 crew\", \"unicycle riding\").\nAnswer() :- Has_equipment(\"Apollo 15 crew\", \"unicycle\"), !Has_skill(\"Apollo 15 crew\", \"unicycle riding\").\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Apollo 15 crew\", \"astronaut training\").\n.decl Has_equipment(Person:symbol, Equipment:symbol)\nHas_equipment(\"Apollo 15 crew\", \"lunar rover\").\n.decl Answer()\nAnswer() :- Has_skill(\"Apollo 15 crew\", \"unicycle riding\").\nAnswer() :- Has_equipment(\"Apollo 15 crew\", \"unicycle\"), !Has_skill(\"Apollo 15 crew\", \"unicycle riding\").\n.output Answer"]}
{"id": 1448, "answer": false, "completion": ".decl Takes_oath(Person:symbol, Court:symbol)\nTakes_oath(\"John Doe\", \"Supreme Court\").\n.decl Honors_oath(Person:symbol, Court:symbol)\nHonors_oath(\"John Doe\", \"Supreme Court\").\n.decl Answer()\nAnswer() :- Takes_oath(person, court), !Honors_oath(person, court).\n.output Answer", "completions": [".decl Takes_oath(Person:symbol, Court:symbol)\nTakes_oath(\"John Doe\", \"Supreme Court\").\n.decl Honors_oath(Person:symbol, Court:symbol)\nHonors_oath(\"John Doe\", \"Supreme Court\").\n.decl Answer()\nAnswer() :- Takes_oath(person, court), !Honors_oath(person, court).\n.output Answer"]}
{"id": 1449, "answer": true, "completion": ".decl Described_as(Language:symbol, Description:symbol)\nDescribed_as(\"Newspeak\", \"straightforward\").\n.decl Answer()\nAnswer() :- Described_as(\"Newspeak\", \"straightforward\").\n.output Answer", "completions": [".decl Described_as(Language:symbol, Description:symbol)\nDescribed_as(\"Newspeak\", \"straightforward\").\n.decl Answer()\nAnswer() :- Described_as(\"Newspeak\", \"straightforward\").\n.output Answer"]}
{"id": 1450, "answer": false, "completion": ".decl Battle(Winner:symbol, Loser:symbol)\nBattle(\"Snow White dwarves\", \"The Hobbit dwarves\").\n.decl Strength(Group:symbol, Power:float)\nStrength(\"Snow White dwarves\", 8).\nStrength(\"The Hobbit dwarves\", 6).\n.decl Answer()\nAnswer() :- Battle(winner, loser), Strength(winner, power1), Strength(loser, power2), power1 > power2.\n.output Answer", "completions": [".decl Battle(Winner:symbol, Loser:symbol)\nBattle(\"Snow White dwarves\", \"The Hobbit dwarves\").\n.decl Strength(Group:symbol, Power:float)\nStrength(\"Snow White dwarves\", 8).\nStrength(\"The Hobbit dwarves\", 6).\n.decl Answer()\nAnswer() :- Battle(winner, loser), Strength(winner, power1), Strength(loser, power2), power1 > power2.\n.output Answer"]}
{"id": 1451, "answer": false, "completion": ".decl Height(Object:symbol, Height:float)\nHeight(\"Statue of Unity\", 182).\nHeight(\"Statue of Liberty\", 93).\nHeight(\"Lighthouse of Alexandria\", 135).\n.decl Distance(Object_A:symbol, Object_B:symbol, Distance:float)\nDistance(\"Statue of Unity\", \"Statue of Liberty\", 12000).\nDistance(\"Statue of Unity\", \"Lighthouse of Alexandria\", 7000).\nDistance(\"Statue of Liberty\", \"Lighthouse of Alexandria\", 11000).\n.decl Answer()\nAnswer() :- Height(\"Statue of Unity\", height1), Height(\"Statue of Liberty\", height2), Distance(\"Statue of Unity\", \"Statue of Liberty\", distance1), Distance(\"Statue of Unity\", \"Lighthouse of Alexandria\", distance2), Distance(\"Statue of Liberty\", \"Lighthouse of Alexandria\", distance3), (height1 + distance2) / distance1 > (height2 + distance3) / distance1.\n.output Answer", "completions": [".decl Height(Object:symbol, Height:float)\nHeight(\"Statue of Unity\", 182).\nHeight(\"Statue of Liberty\", 93).\nHeight(\"Lighthouse of Alexandria\", 135).\n.decl Distance(Object_A:symbol, Object_B:symbol, Distance:float)\nDistance(\"Statue of Unity\", \"Statue of Liberty\", 12000).\nDistance(\"Statue of Unity\", \"Lighthouse of Alexandria\", 7000).\nDistance(\"Statue of Liberty\", \"Lighthouse of Alexandria\", 11000).\n.decl Answer()\nAnswer() :- Height(\"Statue of Unity\", height1), Height(\"Statue of Liberty\", height2), Distance(\"Statue of Unity\", \"Statue of Liberty\", distance1), Distance(\"Statue of Unity\", \"Lighthouse of Alexandria\", distance2), Distance(\"Statue of Liberty\", \"Lighthouse of Alexandria\", distance3), (height1 + distance2) / distance1 > (height2 + distance3) / distance1.\n.output Answer"]}
{"id": 1452, "answer": true, "completion": ".decl Lasts_at_least_n_days(Event:symbol, N_days:float)\nLasts_at_least_n_days(\"Football War\", 30).\n.decl Answer()\nAnswer() :- Lasts_at_least_n_days(\"Football War\", n_days).\n.output Answer", "completions": [".decl Lasts_at_least_n_days(Event:symbol, N_days:float)\nLasts_at_least_n_days(\"Football War\", 30).\n.decl Answer()\nAnswer() :- Lasts_at_least_n_days(\"Football War\", n_days).\n.output Answer"]}
{"id": 1453, "answer": true, "completion": ".decl Best_eaten_when(Fruit:symbol, Texture:symbol)\nBest_eaten_when(\"peaches\", \"firm\").\n.decl Answer()\nAnswer() :- Best_eaten_when(\"peaches\", texture), texture = \"firm\".\n.output Answer", "completions": [".decl Best_eaten_when(Fruit:symbol, Texture:symbol)\nBest_eaten_when(\"peaches\", \"firm\").\n.decl Answer()\nAnswer() :- Best_eaten_when(\"peaches\", texture), texture = \"firm\".\n.output Answer"]}
{"id": 1454, "answer": true, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Adam Sandler\", \"Cole Sprouse\").\n.decl Has_toy(Person:symbol, Toy:symbol)\nHas_toy(\"Adam Sandler\", \"scuba man doll\").\n.decl Answer()\nAnswer() :- Knows(\"Adam Sandler\", \"Cole Sprouse\"), Has_toy(\"Adam Sandler\", \"scuba man doll\").\n.output Answer", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Adam Sandler\", \"Cole Sprouse\").\n.decl Has_toy(Person:symbol, Toy:symbol)\nHas_toy(\"Adam Sandler\", \"scuba man doll\").\n.decl Answer()\nAnswer() :- Knows(\"Adam Sandler\", \"Cole Sprouse\"), Has_toy(\"Adam Sandler\", \"scuba man doll\").\n.output Answer"]}
{"id": 1455, "answer": true, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Lhamo Thondup\", 1935).\n.decl Catholic(Person:symbol)\nCatholic(\"Mother Teresa\").\nCatholic(\"Pope Francis\").\n.decl Answer()\nAnswer() :- Born_in_year(\"Lhamo Thondup\", year), year < 1950, Catholic(person).\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"Lhamo Thondup\", 1935).\n.decl Catholic(Person:symbol)\nCatholic(\"Mother Teresa\").\nCatholic(\"Pope Francis\").\n.decl Answer()\nAnswer() :- Born_in_year(\"Lhamo Thondup\", year), year < 1950, Catholic(person).\n.output Answer"]}
{"id": 1456, "answer": true, "completion": ".decl Contains(Ingredient:symbol, Dish:symbol)\nContains(\"jalapeno peppers\", \"spicy salsa\").\nContains(\"spicy salsa\", \"nachos\").\nContains(\"nachos\", \"children's menu\").\n.decl Answer()\nAnswer() :- Contains(\"jalapeno peppers\", dish), Contains(dish, \"children's menu\").\n.output Answer", "completions": [".decl Contains(Ingredient:symbol, Dish:symbol)\nContains(\"jalapeno peppers\", \"spicy salsa\").\nContains(\"spicy salsa\", \"nachos\").\nContains(\"nachos\", \"children's menu\").\n.decl Answer()\nAnswer() :- Contains(\"jalapeno peppers\", dish), Contains(dish, \"children's menu\").\n.output Answer"]}
{"id": 1457, "answer": false, "completion": ".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Rede Globo anchor\", \"Rede Globo\").\n.decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Rede Globo anchor\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Works_for(\"Rede Globo anchor\", company), Speaks_language(\"Rede Globo anchor\", language), language != \"Japanese\".\n.output Answer", "completions": [".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Rede Globo anchor\", \"Rede Globo\").\n.decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Rede Globo anchor\", \"Portuguese\").\n.decl Answer()\nAnswer() :- Works_for(\"Rede Globo anchor\", company), Speaks_language(\"Rede Globo anchor\", language), language != \"Japanese\".\n.output Answer"]}
{"id": 1458, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"harbor seal\", \"Pacific Ocean\").\nLives_in(\"harbor seal\", \"Atlantic Ocean\").\n.decl Can_see_live_animals(Location:symbol)\nCan_see_live_animals(\"Washington DC\") :- Lives_in(animal, \"Atlantic Ocean\").\n.output Can_see_live_animals", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"harbor seal\", \"Pacific Ocean\").\nLives_in(\"harbor seal\", \"Atlantic Ocean\").\n.decl Can_see_live_animals(Location:symbol)\nCan_see_live_animals(\"Washington DC\") :- Lives_in(animal, \"Atlantic Ocean\").\n.output Can_see_live_animals"]}
{"id": 1459, "answer": true, "completion": ".decl Top_speed(Car:symbol, Speed:float)\nTop_speed(\"2020 Toyota Supra\", 155).\n.decl Average_speed(Event:symbol, Speed:float)\nAverage_speed(\"Nascar rally\", 180).\n.decl Answer()\nAnswer() :- Top_speed(\"2020 Toyota Supra\", speed1), Average_speed(\"Nascar rally\", speed2), speed1 < speed2.\n.output Answer", "completions": [".decl Top_speed(Car:symbol, Speed:float)\nTop_speed(\"2020 Toyota Supra\", 155).\n.decl Average_speed(Event:symbol, Speed:float)\nAverage_speed(\"Nascar rally\", 180).\n.decl Answer()\nAnswer() :- Top_speed(\"2020 Toyota Supra\", speed1), Average_speed(\"Nascar rally\", speed2), speed1 < speed2.\n.output Answer"]}
{"id": 1460, "answer": true, "completion": ".decl Can_eat(Person:symbol, Food:symbol, Amount:float, Time:float)\nCan_eat(\"human\", \"roast turkey\", 12, 60).\n.decl Answer()\nAnswer() :- Can_eat(\"human\", \"roast turkey\", amount, time), amount/time >= 0.2.\n.output Answer", "completions": [".decl Can_eat(Person:symbol, Food:symbol, Amount:float, Time:float)\nCan_eat(\"human\", \"roast turkey\", 12, 60).\n.decl Answer()\nAnswer() :- Can_eat(\"human\", \"roast turkey\", amount, time), amount/time >= 0.2.\n.output Answer"]}
{"id": 1461, "answer": false, "completion": ".decl Carves(Name:symbol, Item:symbol)\nCarves(\"Zorro\", \"sword\").\nCarves(\"Zorro\", \"tree\").\nCarves(\"Zorro\", \"wall\").\n.decl Answer()\nAnswer() :- Carves(\"Zorro\", item).\n.output Answer", "completions": [".decl Carves(Name:symbol, Item:symbol)\nCarves(\"Zorro\", \"sword\").\nCarves(\"Zorro\", \"tree\").\nCarves(\"Zorro\", \"wall\").\n.decl Answer()\nAnswer() :- Carves(\"Zorro\", item).\n.output Answer"]}
{"id": 1462, "answer": false, "completion": ".decl Held_at(Event:symbol, Location:symbol)\nHeld_at(\"Viper Room concert\", \"Los Angeles\").\n.decl Located_in(Location:symbol, Country:symbol)\nLocated_in(\"Los Angeles\", \"United States\").\nLocated_in(\"National Diet building\", \"Japan\").\n.decl Answer()\nAnswer() :- Held_at(\"Viper Room concert\", location1), Located_in(location1, country1), Located_in(\"National Diet building\", country2), country1 = country2.\n.output Answer", "completions": [".decl Held_at(Event:symbol, Location:symbol)\nHeld_at(\"Viper Room concert\", \"Los Angeles\").\n.decl Located_in(Location:symbol, Country:symbol)\nLocated_in(\"Los Angeles\", \"United States\").\nLocated_in(\"National Diet building\", \"Japan\").\n.decl Answer()\nAnswer() :- Held_at(\"Viper Room concert\", location1), Located_in(location1, country1), Located_in(\"National Diet building\", country2), country1 = country2.\n.output Answer"]}
{"id": 1463, "answer": false, "completion": ".decl Is_vegan(Person:symbol)\nIs_vegan(\"Alice\").\nIs_vegan(\"Bob\").\n.decl Is_substitute(Ingredient:symbol, Original:symbol)\nIs_substitute(\"chickpeas\", \"tuna\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Is_substitute(ingredient, \"tuna\"), !Is_substitute(ingredient, \"meat\").\n.output Answer", "completions": [".decl Is_vegan(Person:symbol)\nIs_vegan(\"Alice\").\nIs_vegan(\"Bob\").\n.decl Is_substitute(Ingredient:symbol, Original:symbol)\nIs_substitute(\"chickpeas\", \"tuna\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Is_substitute(ingredient, \"tuna\"), !Is_substitute(ingredient, \"meat\").\n.output Answer"]}
{"id": 1464, "answer": false, "completion": ".decl Collaborates_with(Person:symbol, Collaborator:symbol)\nCollaborates_with(\"Kurt Sutter\", \"Charlie Hunnam\").\nCollaborates_with(\"Kurt Sutter\", \"Katey Sagal\").\n.decl Adaptation_of(Movie:symbol, Original:symbol)\nAdaptation_of(\"Beauty and the Beast\", \"La Belle et la Bête\").\n.decl Answer()\nAnswer() :- Adaptation_of(movie, original), !Collaborates_with(\"Kurt Sutter\", collaborator), Collaborates_with(\"Kurt Sutter\", collaborator2), Adaptation_of(original, movie2), Collaborates_with(collaborator2, collaborator).\n.output Answer", "completions": [".decl Collaborates_with(Person:symbol, Collaborator:symbol)\nCollaborates_with(\"Kurt Sutter\", \"Charlie Hunnam\").\nCollaborates_with(\"Kurt Sutter\", \"Katey Sagal\").\n.decl Adaptation_of(Movie:symbol, Original:symbol)\nAdaptation_of(\"Beauty and the Beast\", \"La Belle et la Bête\").\n.decl Answer()\nAnswer() :- Adaptation_of(movie, original), !Collaborates_with(\"Kurt Sutter\", collaborator), Collaborates_with(\"Kurt Sutter\", collaborator2), Adaptation_of(original, movie2), Collaborates_with(collaborator2, collaborator).\n.output Answer"]}
{"id": 1465, "answer": false, "completion": ".decl Has_strength(Group:symbol, Strength:float)\nHas_strength(\"Swiss Guard\", 50).\nHas_strength(\"Marines\", 80).\n.decl Answer()\nAnswer() :- Has_strength(\"Swiss Guard\", strength1), Has_strength(\"Marines\", strength2), strength1 < strength2.\n.output Answer", "completions": [".decl Has_strength(Group:symbol, Strength:float)\nHas_strength(\"Swiss Guard\", 50).\nHas_strength(\"Marines\", 80).\n.decl Answer()\nAnswer() :- Has_strength(\"Swiss Guard\", strength1), Has_strength(\"Marines\", strength2), strength1 < strength2.\n.output Answer"]}
{"id": 1466, "answer": true, "completion": ".decl Has_footprints(Location:symbol, Footprints:float)\nHas_footprints(\"Mount Sharp\", 0).\n.decl Answer()\nAnswer() :- !Has_footprints(\"Mount Sharp\", footprints).\n.output Answer", "completions": [".decl Has_footprints(Location:symbol, Footprints:float)\nHas_footprints(\"Mount Sharp\", 0).\n.decl Answer()\nAnswer() :- !Has_footprints(\"Mount Sharp\", footprints).\n.output Answer"]}
{"id": 1467, "answer": true, "completion": ".decl Involved_in_battle(Person:symbol, Battle:symbol)\nInvolved_in_battle(\"Edward II\", \"Battle of Falkirk\").\n.decl Crucial_to_victory(Battle:symbol, Person:symbol)\nCrucial_to_victory(\"Battle of Falkirk\", \"William Wallace\").\n.decl Answer()\nAnswer() :- Involved_in_battle(\"Edward II\", \"Battle of Falkirk\"), Crucial_to_victory(\"Battle of Falkirk\", \"William Wallace\"), Person != \"William Wallace\".\n.output Answer", "completions": [".decl Involved_in_battle(Person:symbol, Battle:symbol)\nInvolved_in_battle(\"Edward II\", \"Battle of Falkirk\").\n.decl Crucial_to_victory(Battle:symbol, Person:symbol)\nCrucial_to_victory(\"Battle of Falkirk\", \"William Wallace\").\n.decl Answer()\nAnswer() :- Involved_in_battle(\"Edward II\", \"Battle of Falkirk\"), Crucial_to_victory(\"Battle of Falkirk\", \"William Wallace\"), Person != \"William Wallace\".\n.output Answer"]}
{"id": 1468, "answer": false, "completion": ".decl Paid_in_currency(Person:symbol, Currency:symbol)\nPaid_in_currency(\"Emperor Commodus\", \"denarius\").\n.decl Currency_exchange_rate(Currency1:symbol, Currency2:symbol, Rate:float)\nCurrency_exchange_rate(\"denarius\", \"Pound sterling\", 0.0025).\n.decl Answer()\nAnswer() :- Paid_in_currency(\"Emperor Commodus\", currency1), Currency_exchange_rate(currency1, \"Pound sterling\", rate), rate > 0.\n.output Answer", "completions": [".decl Paid_in_currency(Person:symbol, Currency:symbol)\nPaid_in_currency(\"Emperor Commodus\", \"denarius\").\n.decl Currency_exchange_rate(Currency1:symbol, Currency2:symbol, Rate:float)\nCurrency_exchange_rate(\"denarius\", \"Pound sterling\", 0.0025).\n.decl Answer()\nAnswer() :- Paid_in_currency(\"Emperor Commodus\", currency1), Currency_exchange_rate(currency1, \"Pound sterling\", rate), rate > 0.\n.output Answer"]}
{"id": 1469, "answer": false, "completion": "Sorry, this question cannot be answered with the given information as it is unclear what criteria determine whether spaghetti should be slick when cooked.", "completions": ["Sorry, this question cannot be answered with the given information as it is unclear what criteria determine whether spaghetti should be slick when cooked."]}
{"id": 1470, "answer": true, "completion": ".decl Death_toll(Event:symbol, Death_count:float)\nDeath_toll(\"Carnation Revolution\", 4).\nDeath_toll(\"French Revolution\", 40000).\nDeath_toll(\"Russian Revolution\", 1000000).\n.decl Answer()\nAnswer() :- Death_toll(\"Carnation Revolution\", death_count1), !{Death_toll(event, death_count2) : death_count2 > death_count1}.\n.output Answer", "completions": [".decl Death_toll(Event:symbol, Death_count:float)\nDeath_toll(\"Carnation Revolution\", 4).\nDeath_toll(\"French Revolution\", 40000).\nDeath_toll(\"Russian Revolution\", 1000000).\n.decl Answer()\nAnswer() :- Death_toll(\"Carnation Revolution\", death_count1), !{Death_toll(event, death_count2) : death_count2 > death_count1}.\n.output Answer"]}
{"id": 1471, "answer": true, "completion": ".decl Survives_in_environment(Person:symbol, Environment:symbol)\nSurvives_in_environment(\"human\", \"Earth\").\nSurvives_in_environment(\"penguin\", \"Antarctica\").\nSurvives_in_environment(\"jellyfish\", \"ocean\").\n.decl Wears_clothing(Person:symbol, Clothing:symbol)\nWears_clothing(\"human\", \"zoot suit\").\n.decl Has_temperature(Environment:symbol, Temperature:float)\nHas_temperature(\"Earth\", 15).\nHas_temperature(\"Antarctica\", -60).\nHas_temperature(\"ocean\", 10).\nHas_temperature(\"Triton\", -235).\n.decl Answer()\nAnswer() :- Survives_in_environment(\"human\", environment1), Wears_clothing(\"human\", clothing), Has_temperature(\"Triton\", temperature), temperature < -50, environment1 != \"Triton\".\n.output Answer", "completions": [".decl Survives_in_environment(Person:symbol, Environment:symbol)\nSurvives_in_environment(\"human\", \"Earth\").\nSurvives_in_environment(\"penguin\", \"Antarctica\").\nSurvives_in_environment(\"jellyfish\", \"ocean\").\n.decl Wears_clothing(Person:symbol, Clothing:symbol)\nWears_clothing(\"human\", \"zoot suit\").\n.decl Has_temperature(Environment:symbol, Temperature:float)\nHas_temperature(\"Earth\", 15).\nHas_temperature(\"Antarctica\", -60).\nHas_temperature(\"ocean\", 10).\nHas_temperature(\"Triton\", -235).\n.decl Answer()\nAnswer() :- Survives_in_environment(\"human\", environment1), Wears_clothing(\"human\", clothing), Has_temperature(\"Triton\", temperature), temperature < -50, environment1 != \"Triton\".\n.output Answer"]}
{"id": 1472, "answer": false, "completion": ".decl At_location(Character:symbol, Location:symbol)\nAt_location(\"Bugs Bunny\", \"Six Flags\").\nAt_location(\"Space Mountain\", \"Disneyland\").\n.decl Answer()\nAnswer() :- At_location(\"Bugs Bunny\", location1), At_location(\"Space Mountain\", location2), location1 = location2.\n.output Answer", "completions": [".decl At_location(Character:symbol, Location:symbol)\nAt_location(\"Bugs Bunny\", \"Six Flags\").\nAt_location(\"Space Mountain\", \"Disneyland\").\n.decl Answer()\nAnswer() :- At_location(\"Bugs Bunny\", location1), At_location(\"Space Mountain\", location2), location1 = location2.\n.output Answer"]}
{"id": 1473, "answer": true, "completion": ".decl Takes_time(Process:symbol, Time:float)\nTakes_time(\"brewing\", 30).\n.decl In_month(Month:symbol)\nIn_month(\"September\").\n.decl Answer()\nAnswer() :- Takes_time(\"brewing\", time), time <= 30, In_month(\"September\").\n.output Answer", "completions": [".decl Takes_time(Process:symbol, Time:float)\nTakes_time(\"brewing\", 30).\n.decl In_month(Month:symbol)\nIn_month(\"September\").\n.decl Answer()\nAnswer() :- Takes_time(\"brewing\", time), time <= 30, In_month(\"September\").\n.output Answer"]}
{"id": 1474, "answer": false, "completion": ".decl Performs(Performer:symbol, Performance:symbol)\nPerforms(\"Department of Defense\", \"military parade\").\n.decl Answer()\nAnswer() :- Performs(\"Department of Defense\", performance), performance != \"solo\".\n.output Answer", "completions": [".decl Performs(Performer:symbol, Performance:symbol)\nPerforms(\"Department of Defense\", \"military parade\").\n.decl Answer()\nAnswer() :- Performs(\"Department of Defense\", performance), performance != \"solo\".\n.output Answer"]}
{"id": 1475, "answer": true, "completion": ".decl Contains(Ingredient:symbol, Product:symbol)\nContains(\"Monoamine Oxidase\", \"candy bar\").\n.decl Has_effect(Product:symbol, Effect:symbol)\nHas_effect(\"candy bar\", \"cheer up\").\n.decl Answer()\nAnswer() :- Contains(\"Monoamine Oxidase\", product), Has_effect(product, \"cheer up\").\n.output Answer", "completions": [".decl Contains(Ingredient:symbol, Product:symbol)\nContains(\"Monoamine Oxidase\", \"candy bar\").\n.decl Has_effect(Product:symbol, Effect:symbol)\nHas_effect(\"candy bar\", \"cheer up\").\n.decl Answer()\nAnswer() :- Contains(\"Monoamine Oxidase\", product), Has_effect(product, \"cheer up\").\n.output Answer"]}
{"id": 1476, "answer": true, "completion": ".decl Owned(Person:symbol, Object:symbol)\nOwned(\"Elizabeth I of England\", \"pearls\").\nOwned(\"Elizabeth I of England\", \"jewelry\").\n.decl Made_of_material(Object:symbol, Material:symbol)\nMade_of_material(\"pearls\", \"calcium carbonate\").\nMade_of_material(\"jewelry\", \"gold\").\nMade_of_material(\"jewelry\", \"silver\").\n.decl Answer()\nAnswer() :- Owned(\"Elizabeth I of England\", object), Made_of_material(object, \"viscose fiber\"), !.\n.output Answer", "completions": [".decl Owned(Person:symbol, Object:symbol)\nOwned(\"Elizabeth I of England\", \"pearls\").\nOwned(\"Elizabeth I of England\", \"jewelry\").\n.decl Made_of_material(Object:symbol, Material:symbol)\nMade_of_material(\"pearls\", \"calcium carbonate\").\nMade_of_material(\"jewelry\", \"gold\").\nMade_of_material(\"jewelry\", \"silver\").\n.decl Answer()\nAnswer() :- Owned(\"Elizabeth I of England\", object), Made_of_material(object, \"viscose fiber\"), !.\n.output Answer"]}
{"id": 1477, "answer": false, "completion": ".decl Invented_in_year(Item:symbol, Year:float)\nInvented_in_year(\"dynamite\", 1867).\n.decl Used_in_warfare(Item:symbol)\nUsed_in_warfare(\"dynamite\").\n.decl Answer()\nAnswer() :- Invented_in_year(\"dynamite\", year), year < 1500, Used_in_warfare(\"dynamite\").\n.output Answer", "completions": [".decl Invented_in_year(Item:symbol, Year:float)\nInvented_in_year(\"dynamite\", 1867).\n.decl Used_in_warfare(Item:symbol)\nUsed_in_warfare(\"dynamite\").\n.decl Answer()\nAnswer() :- Invented_in_year(\"dynamite\", year), year < 1500, Used_in_warfare(\"dynamite\").\n.output Answer"]}
{"id": 1478, "answer": false, "completion": ".decl Name_origin(Entity:symbol, Origin:symbol)\nName_origin(\"Europa (moon)\", \"Greek mythology\").\nName_origin(\"Amunet\", \"Egyptian mythology\").\nName_origin(\"Amun\", \"Egyptian mythology\").\n.decl Related_to(Entity1:symbol, Entity2:symbol)\nRelated_to(\"Europa (moon)\", \"Jupiter\").\nRelated_to(\"Amunet\", \"Amun\").\n.decl Answer()\nAnswer() :- Name_origin(\"Europa (moon)\", origin1), Name_origin(\"Amunet\", origin2), Related_to(\"Europa (moon)\", entity), Related_to(\"Amunet\", entity), origin1 = origin2.\n.output Answer", "completions": [".decl Name_origin(Entity:symbol, Origin:symbol)\nName_origin(\"Europa (moon)\", \"Greek mythology\").\nName_origin(\"Amunet\", \"Egyptian mythology\").\nName_origin(\"Amun\", \"Egyptian mythology\").\n.decl Related_to(Entity1:symbol, Entity2:symbol)\nRelated_to(\"Europa (moon)\", \"Jupiter\").\nRelated_to(\"Amunet\", \"Amun\").\n.decl Answer()\nAnswer() :- Name_origin(\"Europa (moon)\", origin1), Name_origin(\"Amunet\", origin2), Related_to(\"Europa (moon)\", entity), Related_to(\"Amunet\", entity), origin1 = origin2.\n.output Answer"]}
{"id": 1479, "answer": true, "completion": ".decl Incubates(Animal:symbol)\nIncubates(\"kangaroo\").\n.decl Answer()\nAnswer() :- Incubates(\"kangaroo\").\n.output Answer", "completions": [".decl Incubates(Animal:symbol)\nIncubates(\"kangaroo\").\n.decl Answer()\nAnswer() :- Incubates(\"kangaroo\").\n.output Answer"]}
{"id": 1480, "answer": true, "completion": ".decl Resides_in(Person:symbol, County:symbol)\nResides_in(\"John\", \"Los Angeles County\").\nResides_in(\"Jane\", \"Los Angeles County\").\n.decl Goes_to_heaven(Person:symbol, Religion:symbol)\nGoes_to_heaven(\"John\", \"Jehovah Witnesses\").\nGoes_to_heaven(\"Jane\", \"Jehovah Witnesses\").\n.decl Answer()\nAnswer() :- Resides_in(person, \"Los Angeles County\"), !Goes_to_heaven(person, \"Jehovah Witnesses\").\nAnswer() :- Resides_in(person, \"Los Angeles County\"), Goes_to_heaven(person, \"Jehovah Witnesses\").\n.output Answer", "completions": [".decl Resides_in(Person:symbol, County:symbol)\nResides_in(\"John\", \"Los Angeles County\").\nResides_in(\"Jane\", \"Los Angeles County\").\n.decl Goes_to_heaven(Person:symbol, Religion:symbol)\nGoes_to_heaven(\"John\", \"Jehovah Witnesses\").\nGoes_to_heaven(\"Jane\", \"Jehovah Witnesses\").\n.decl Answer()\nAnswer() :- Resides_in(person, \"Los Angeles County\"), !Goes_to_heaven(person, \"Jehovah Witnesses\").\nAnswer() :- Resides_in(person, \"Los Angeles County\"), Goes_to_heaven(person, \"Jehovah Witnesses\").\n.output Answer"]}
{"id": 1481, "answer": true, "completion": ".decl Likes(Person:symbol, Thing:symbol)\nLikes(\"John\", \"cloves\").\nLikes(\"Jane\", \"chocolate\").\nLikes(\"Bob\", \"coffee\").\nSmokes(\"John\", \"Djarum\").\nSmokes(\"Bob\", \"Marlboro\").\n.decl Answer()\nAnswer() :- Smokes(person, \"Djarum\"), Likes(person, \"cloves\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Thing:symbol)\nLikes(\"John\", \"cloves\").\nLikes(\"Jane\", \"chocolate\").\nLikes(\"Bob\", \"coffee\").\nSmokes(\"John\", \"Djarum\").\nSmokes(\"Bob\", \"Marlboro\").\n.decl Answer()\nAnswer() :- Smokes(person, \"Djarum\"), Likes(person, \"cloves\").\n.output Answer"]}
{"id": 1482, "answer": false, "completion": ".decl Used_for(Purpose:symbol, Material:symbol)\nUsed_for(\"war\", \"Douglas fir\").\n.decl Answer()\nAnswer() :- Used_for(\"war\", material).\n.output Answer", "completions": [".decl Used_for(Purpose:symbol, Material:symbol)\nUsed_for(\"war\", \"Douglas fir\").\n.decl Answer()\nAnswer() :- Used_for(\"war\", material).\n.output Answer"]}
{"id": 1483, "answer": true, "completion": ".decl Habitat(Animal:symbol, Habitat:symbol)\nHabitat(\"goat\", \"mountains\").\nHabitat(\"deep sea fish\", \"abyssal plains\").\n.decl Answer()\nAnswer() :- Habitat(\"goat\", habitat1), Habitat(\"deep sea fish\", habitat2), habitat1 != habitat2.\n.output Answer", "completions": [".decl Habitat(Animal:symbol, Habitat:symbol)\nHabitat(\"goat\", \"mountains\").\nHabitat(\"deep sea fish\", \"abyssal plains\").\n.decl Answer()\nAnswer() :- Habitat(\"goat\", habitat1), Habitat(\"deep sea fish\", habitat2), habitat1 != habitat2.\n.output Answer"]}
{"id": 1484, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"penguin\", \"Antarctica\").\nLives_in(\"penguin\", \"Arctic\").\nLives_in(\"penguin\", \"Southern Hemisphere\").\nLives_in(\"penguin\", \"South Pole\").\n.decl Is_located_in(City:symbol, Location:symbol)\nIs_located_in(\"Miami\", \"Florida\").\nIs_located_in(\"Florida\", \"United States\").\nIs_located_in(\"United States\", \"North America\").\n.decl Answer()\nAnswer() :- Lives_in(\"penguin\", habitat), Is_located_in(\"Miami\", location), habitat != location.\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"penguin\", \"Antarctica\").\nLives_in(\"penguin\", \"Arctic\").\nLives_in(\"penguin\", \"Southern Hemisphere\").\nLives_in(\"penguin\", \"South Pole\").\n.decl Is_located_in(City:symbol, Location:symbol)\nIs_located_in(\"Miami\", \"Florida\").\nIs_located_in(\"Florida\", \"United States\").\nIs_located_in(\"United States\", \"North America\").\n.decl Answer()\nAnswer() :- Lives_in(\"penguin\", habitat), Is_located_in(\"Miami\", location), habitat != location.\n.output Answer"]}
{"id": 1485, "answer": true, "completion": ".decl StudentOf(Student:symbol, Teacher:symbol)\nStudentOf(\"Al-Farabi\", \"Aristotle\").\nStudentOf(\"Aristotle\", \"Plato\").\nStudentOf(\"Plato\", \"Socrates\").\n.decl Answer()\nAnswer() :- StudentOf(\"Al-Farabi\", teacher1), StudentOf(teacher1, teacher2), StudentOf(teacher2, \"Great Sheikh\").\n.output Answer", "completions": [".decl StudentOf(Student:symbol, Teacher:symbol)\nStudentOf(\"Al-Farabi\", \"Aristotle\").\nStudentOf(\"Aristotle\", \"Plato\").\nStudentOf(\"Plato\", \"Socrates\").\n.decl Answer()\nAnswer() :- StudentOf(\"Al-Farabi\", teacher1), StudentOf(teacher1, teacher2), StudentOf(teacher2, \"Great Sheikh\").\n.output Answer"]}
{"id": 1486, "answer": false, "completion": ".decl Ruler_of(City:symbol, Ruler:symbol)\nRuler_of(\"London\", \"Richard III\").\n.decl Answer()\nAnswer() :- Ruler_of(\"Adelaide\", \"Richard III\"), !.\nAnswer() :- !Ruler_of(\"Adelaide\", _).\n.output Answer", "completions": [".decl Ruler_of(City:symbol, Ruler:symbol)\nRuler_of(\"London\", \"Richard III\").\n.decl Answer()\nAnswer() :- Ruler_of(\"Adelaide\", \"Richard III\"), !.\nAnswer() :- !Ruler_of(\"Adelaide\", _).\n.output Answer"]}
{"id": 1487, "answer": false, "completion": ".decl Avoids(Person:symbol, Restaurant:symbol)\nAvoids(\"Ronda Rousey\", \"BBQ restaurant\").\n.decl Answer()\nAnswer() :- Avoids(\"Ronda Rousey\", \"BBQ restaurant\").\n.output Answer", "completions": [".decl Avoids(Person:symbol, Restaurant:symbol)\nAvoids(\"Ronda Rousey\", \"BBQ restaurant\").\n.decl Answer()\nAnswer() :- Avoids(\"Ronda Rousey\", \"BBQ restaurant\").\n.output Answer"]}
{"id": 1488, "answer": false, "completion": ".decl Likes(Person:symbol, Drink:symbol, Cream:symbol)\nLikes(\"Kylee Jenner\", \"coffee\", \"no cream\").\n.decl Answer()\nAnswer() :- Likes(\"Kylee Jenner\", \"coffee\", cream), cream != \"no cream\".\n.output Answer", "completions": [".decl Likes(Person:symbol, Drink:symbol, Cream:symbol)\nLikes(\"Kylee Jenner\", \"coffee\", \"no cream\").\n.decl Answer()\nAnswer() :- Likes(\"Kylee Jenner\", \"coffee\", cream), cream != \"no cream\".\n.output Answer"]}
{"id": 1489, "answer": true, "completion": ".decl Has_max_speed(Car:symbol, Max_speed:float)\nHas_max_speed(\"electric car\", 150).\nHas_max_speed(\"race car\", 200).\n.decl Has_distance(Race:symbol, Distance:float)\nHas_distance(\"Daytona 500\", 500).\n.decl Answer()\nAnswer() :- Has_max_speed(\"electric car\", max_speed1), Has_max_speed(\"race car\", max_speed2), max_speed1 < max_speed2, Has_distance(\"Daytona 500\", distance), time1 = distance/max_speed1, time2 = distance/max_speed2, time1 > time2.\n.output Answer", "completions": [".decl Has_max_speed(Car:symbol, Max_speed:float)\nHas_max_speed(\"electric car\", 150).\nHas_max_speed(\"race car\", 200).\n.decl Has_distance(Race:symbol, Distance:float)\nHas_distance(\"Daytona 500\", 500).\n.decl Answer()\nAnswer() :- Has_max_speed(\"electric car\", max_speed1), Has_max_speed(\"race car\", max_speed2), max_speed1 < max_speed2, Has_distance(\"Daytona 500\", distance), time1 = distance/max_speed1, time2 = distance/max_speed2, time1 > time2.\n.output Answer"]}
{"id": 1490, "answer": false, "completion": ".decl Fed_with(Animal:symbol, Food:symbol)\nFed_with(\"cow\", \"grass\").\n.decl Tastes_like(Meat:symbol, Flavor:symbol)\nTastes_like(\"grass-fed beef\", \"wild game\").\n.decl Answer()\nAnswer() :- Fed_with(\"cow\", food), Tastes_like(\"grass-fed beef\", flavor), food = \"grass\", flavor = \"wild game\".\n.output Answer", "completions": [".decl Fed_with(Animal:symbol, Food:symbol)\nFed_with(\"cow\", \"grass\").\n.decl Tastes_like(Meat:symbol, Flavor:symbol)\nTastes_like(\"grass-fed beef\", \"wild game\").\n.decl Answer()\nAnswer() :- Fed_with(\"cow\", food), Tastes_like(\"grass-fed beef\", flavor), food = \"grass\", flavor = \"wild game\".\n.output Answer"]}
{"id": 1491, "answer": false, "completion": ".decl Has_army_size(Leader:symbol, Army_size:float)\nHas_army_size(\"King Leonidas\", 300).\n.decl Has_compositions_size(Composer:symbol, Compositions_size:float)\nHas_compositions_size(\"Mozart\", 626).\n.decl Answer()\nAnswer() :- Has_army_size(\"King Leonidas\", army_size), Has_compositions_size(\"Mozart\", compositions_size), army_size >= compositions_size.\n.output Answer", "completions": [".decl Has_army_size(Leader:symbol, Army_size:float)\nHas_army_size(\"King Leonidas\", 300).\n.decl Has_compositions_size(Composer:symbol, Compositions_size:float)\nHas_compositions_size(\"Mozart\", 626).\n.decl Answer()\nAnswer() :- Has_army_size(\"King Leonidas\", army_size), Has_compositions_size(\"Mozart\", compositions_size), army_size >= compositions_size.\n.output Answer"]}
{"id": 1492, "answer": false, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"Christopher Walken\", 78).\n.decl Height(Person:symbol, Height:float)\nHeight(\"Christopher Walken\", 1.83).\n.decl Fitness(Person:symbol, Fitness:float)\nFitness(\"Christopher Walken\", 7).\n.decl Answer()\nAnswer() :- Age(\"Christopher Walken\", age), age < 28.\nAnswer() :- Height(\"Christopher Walken\", height), height >= 163.\nAnswer() :- Fitness(\"Christopher Walken\", fitness), fitness >= 6.\nAnswer() :- Age(\"Christopher Walken\", age), Height(\"Christopher Walken\", height), Fitness(\"Christopher Walken\", fitness), age < 28, height >= 163, fitness >= 6.\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"Christopher Walken\", 78).\n.decl Height(Person:symbol, Height:float)\nHeight(\"Christopher Walken\", 1.83).\n.decl Fitness(Person:symbol, Fitness:float)\nFitness(\"Christopher Walken\", 7).\n.decl Answer()\nAnswer() :- Age(\"Christopher Walken\", age), age < 28.\nAnswer() :- Height(\"Christopher Walken\", height), height >= 163.\nAnswer() :- Fitness(\"Christopher Walken\", fitness), fitness >= 6.\nAnswer() :- Age(\"Christopher Walken\", age), Height(\"Christopher Walken\", height), Fitness(\"Christopher Walken\", fitness), age < 28, height >= 163, fitness >= 6.\n.output Answer"]}
{"id": 1493, "answer": false, "completion": ".decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"John\", \"kola nuts\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"colitis\").\n.decl Answer()\nAnswer() :- Avoids(\"John\", food), Has_condition(\"John\", condition), condition = \"colitis\", food = \"kola nuts\".\n.output Answer", "completions": [".decl Avoids(Person:symbol, Food:symbol)\nAvoids(\"John\", \"kola nuts\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"colitis\").\n.decl Answer()\nAnswer() :- Avoids(\"John\", food), Has_condition(\"John\", condition), condition = \"colitis\", food = \"kola nuts\".\n.output Answer"]}
{"id": 1494, "answer": false, "completion": ".decl Reported_by(Media:symbol, Person:symbol)\nReported_by(\"Daily Mail\", \"Jamie Lee Curtis\").\nReported_by(\"Fox News\", \"Jamie Lee Curtis\").\n.decl Fact_checked(Media:symbol, Result:symbol)\nFact_checked(\"Daily Mail\", \"false\").\nFact_checked(\"Fox News\", \"false\").\n.decl Answer()\nAnswer() :- Reported_by(media, \"Jamie Lee Curtis\"), Fact_checked(media, \"false\").\n.output Answer", "completions": [".decl Reported_by(Media:symbol, Person:symbol)\nReported_by(\"Daily Mail\", \"Jamie Lee Curtis\").\nReported_by(\"Fox News\", \"Jamie Lee Curtis\").\n.decl Fact_checked(Media:symbol, Result:symbol)\nFact_checked(\"Daily Mail\", \"false\").\nFact_checked(\"Fox News\", \"false\").\n.decl Answer()\nAnswer() :- Reported_by(media, \"Jamie Lee Curtis\"), Fact_checked(media, \"false\").\n.output Answer"]}
{"id": 1495, "answer": false, "completion": ".decl Released_in_year(Game:symbol, Year:float)\nReleased_in_year(\"Final Fantasy VI\", 1994).\nReleased_in_year(\"Final Fantasy XV\", 2016).\n.decl Franchise_start_year(Franchise:symbol, Year:float)\nFranchise_start_year(\"Final Fantasy\", 1987).\n.decl Franchise_end_year(Franchise:symbol, Year:float)\nFranchise_end_year(\"Final Fantasy\", 2021).\n.decl Answer()\nAnswer() :- Released_in_year(\"Final Fantasy VI\", year1), Franchise_start_year(\"Final Fantasy\", year2), year1 <= year2.\nAnswer() :- Released_in_year(\"Final Fantasy VI\", year1), Franchise_end_year(\"Final Fantasy\", year2), year1 <= year2.\n.output Answer", "completions": [".decl Released_in_year(Game:symbol, Year:float)\nReleased_in_year(\"Final Fantasy VI\", 1994).\nReleased_in_year(\"Final Fantasy XV\", 2016).\n.decl Franchise_start_year(Franchise:symbol, Year:float)\nFranchise_start_year(\"Final Fantasy\", 1987).\n.decl Franchise_end_year(Franchise:symbol, Year:float)\nFranchise_end_year(\"Final Fantasy\", 2021).\n.decl Answer()\nAnswer() :- Released_in_year(\"Final Fantasy VI\", year1), Franchise_start_year(\"Final Fantasy\", year2), year1 <= year2.\nAnswer() :- Released_in_year(\"Final Fantasy VI\", year1), Franchise_end_year(\"Final Fantasy\", year2), year1 <= year2.\n.output Answer"]}
{"id": 1496, "answer": true, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"spinal cord\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"spinal cord\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"spinal cord\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"spinal cord\").\n.output Answer"]}
{"id": 1497, "answer": false, "completion": ".decl Held_in(Event:symbol, Location:symbol)\nHeld_in(\"MLB World Series\", \"New York City\").\n.decl Answer()\nAnswer() :- Held_in(\"MLB World Series\", \"Newcastle, New South Wales\").\n.output Answer", "completions": [".decl Held_in(Event:symbol, Location:symbol)\nHeld_in(\"MLB World Series\", \"New York City\").\n.decl Answer()\nAnswer() :- Held_in(\"MLB World Series\", \"Newcastle, New South Wales\").\n.output Answer"]}
{"id": 1498, "answer": true, "completion": ".decl Has_elevation(Location:symbol, Elevation:float)\nHas_elevation(\"Rhode Island\", 60).\nHas_elevation(\"Bohai Sea\", -42).\n.decl Answer()\nAnswer() :- Has_elevation(\"Rhode Island\", elevation1), Has_elevation(\"Bohai Sea\", elevation2), elevation1 < elevation2.\n.output Answer", "completions": [".decl Has_elevation(Location:symbol, Elevation:float)\nHas_elevation(\"Rhode Island\", 60).\nHas_elevation(\"Bohai Sea\", -42).\n.decl Answer()\nAnswer() :- Has_elevation(\"Rhode Island\", elevation1), Has_elevation(\"Bohai Sea\", elevation2), elevation1 < elevation2.\n.output Answer"]}
{"id": 1499, "answer": true, "completion": ".decl Influences(Genre:symbol, Influence:symbol)\nInfluences(\"rap\", \"jazz\").\nInfluences(\"rap\", \"funk\").\nInfluences(\"rap\", \"soul\").\nInfluences(\"rap\", \"blues\").\nInfluences(\"rap\", \"reggae\").\nInfluences(\"rap\", \"rock\").\nInfluences(\"rap\", \"disco\").\nInfluences(\"rap\", \"electronic\").\n.decl Answer()\nAnswer() :- Influences(\"rap\", influence), influence = \"cannabis\".\n.output Answer", "completions": [".decl Influences(Genre:symbol, Influence:symbol)\nInfluences(\"rap\", \"jazz\").\nInfluences(\"rap\", \"funk\").\nInfluences(\"rap\", \"soul\").\nInfluences(\"rap\", \"blues\").\nInfluences(\"rap\", \"reggae\").\nInfluences(\"rap\", \"rock\").\nInfluences(\"rap\", \"disco\").\nInfluences(\"rap\", \"electronic\").\n.decl Answer()\nAnswer() :- Influences(\"rap\", influence), influence = \"cannabis\".\n.output Answer"]}
{"id": 1500, "answer": false, "completion": ".decl Uses_numbers(Sport:symbol, Number:float)\nUses_numbers(\"table tennis\", 2).\nUses_numbers(\"table tennis\", 3).\nUses_numbers(\"table tennis\", 5).\nUses_numbers(\"table tennis\", 7).\n.decl Answer()\nAnswer() :- Uses_numbers(\"table tennis\", prime_number).\nprime_number(Number) :- Number > 1, !, not composite_number(Number).\ncomposite_number(Number) :- Number > 1, Number1 <= sqrt(Number), Number mod Number1 = 0.\n.output Answer", "completions": [".decl Uses_numbers(Sport:symbol, Number:float)\nUses_numbers(\"table tennis\", 2).\nUses_numbers(\"table tennis\", 3).\nUses_numbers(\"table tennis\", 5).\nUses_numbers(\"table tennis\", 7).\n.decl Answer()\nAnswer() :- Uses_numbers(\"table tennis\", prime_number).\nprime_number(Number) :- Number > 1, !, not composite_number(Number).\ncomposite_number(Number) :- Number > 1, Number1 <= sqrt(Number), Number mod Number1 = 0.\n.output Answer"]}
{"id": 1501, "answer": false, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Marlboro package\", \"red\").\nHas_color(\"Marlboro package\", \"white\").\nHas_color(\"French flag\", \"red\").\nHas_color(\"French flag\", \"white\").\nHas_color(\"French flag\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Marlboro package\", color), !Has_color(\"French flag\", color).\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Marlboro package\", \"red\").\nHas_color(\"Marlboro package\", \"white\").\nHas_color(\"French flag\", \"red\").\nHas_color(\"French flag\", \"white\").\nHas_color(\"French flag\", \"blue\").\n.decl Answer()\nAnswer() :- Has_color(\"Marlboro package\", color), !Has_color(\"French flag\", color).\n.output Answer"]}
{"id": 1502, "answer": true, "completion": ".decl Knows(Person1:symbol, Person2:symbol)\nKnows(\"Jesus\", \"Peter\").\nKnows(\"Peter\", \"John\").\n.decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Peter\", \"Aramaic\").\nSpeaks_language(\"John\", \"Greek\").\n.decl Answer()\nAnswer() :- Knows(\"Jesus\", person), Speaks_language(person, \"Estonian\").\n.output Answer", "completions": [".decl Knows(Person1:symbol, Person2:symbol)\nKnows(\"Jesus\", \"Peter\").\nKnows(\"Peter\", \"John\").\n.decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"Peter\", \"Aramaic\").\nSpeaks_language(\"John\", \"Greek\").\n.decl Answer()\nAnswer() :- Knows(\"Jesus\", person), Speaks_language(person, \"Estonian\").\n.output Answer"]}
{"id": 1503, "answer": false, "completion": ".decl Education(Person:symbol, Field:symbol, School:symbol)\nEducation(\"Jesus\", \"none\", \"none\").\n.decl Answer()\nAnswer() :- Education(\"Jesus\", \"railroad engineering\", school).\n.output Answer\n\n// Note: Since we have no information about Jesus studying railroad engineering, the answer will be false.", "completions": [".decl Education(Person:symbol, Field:symbol, School:symbol)\nEducation(\"Jesus\", \"none\", \"none\").\n.decl Answer()\nAnswer() :- Education(\"Jesus\", \"railroad engineering\", school).\n.output Answer\n\n// Note: Since we have no information about Jesus studying railroad engineering, the answer will be false."]}
{"id": 1504, "answer": false, "completion": ".decl Contains_text(Document:symbol, Text:symbol)\nContains_text(\"Constitution of the Philippines\", \"British constitution\").\n.decl Answer()\nAnswer() :- Contains_text(\"Constitution of the Philippines\", text), Contains_text(\"British constitution\", text).\n.output Answer", "completions": [".decl Contains_text(Document:symbol, Text:symbol)\nContains_text(\"Constitution of the Philippines\", \"British constitution\").\n.decl Answer()\nAnswer() :- Contains_text(\"Constitution of the Philippines\", text), Contains_text(\"British constitution\", text).\n.output Answer"]}
{"id": 1505, "answer": false, "completion": ".decl Famous(Person:symbol)\nFamous(\"Apollo 1\").\nFamous(\"Apollo 11\").\nFamous(\"Apollo 13\").\nFamous(\"D'Artagnan\").\nFamous(\"D'Artagnan's father\").\nFamous(\"D'Artagnan's grandfather\").\n.decl Defeats(Person_A:symbol, Person_B:symbol)\nDefeats(\"Apollo 1\", \"D'Artagnan\").\nDefeats(\"Apollo 11\", \"D'Artagnan\").\nDefeats(\"Apollo 13\", \"D'Artagnan\").\n.decl Answer()\nAnswer() :- Famous(\"Apollo 1\"), Famous(\"Apollo 11\"), Famous(\"Apollo 13\"), Famous(\"D'Artagnan\"), Famous(\"D'Artagnan's father\"), Famous(\"D'Artagnan's grandfather\"), !Defeats(\"D'Artagnan's father\", \"Apollo 1\"), !Defeats(\"D'Artagnan's father\", \"Apollo 11\"), !Defeats(\"D'Artagnan's father\", \"Apollo 13\"), !Defeats(\"D'Artagnan's grandfather\", \"Apollo 1\"), !Defeats(\"D'Artagnan's grandfather\", \"Apollo 11\"), !Defeats(\"D'Artagnan's grandfather\", \"Apollo 13\").\n.output Answer", "completions": [".decl Famous(Person:symbol)\nFamous(\"Apollo 1\").\nFamous(\"Apollo 11\").\nFamous(\"Apollo 13\").\nFamous(\"D'Artagnan\").\nFamous(\"D'Artagnan's father\").\nFamous(\"D'Artagnan's grandfather\").\n.decl Defeats(Person_A:symbol, Person_B:symbol)\nDefeats(\"Apollo 1\", \"D'Artagnan\").\nDefeats(\"Apollo 11\", \"D'Artagnan\").\nDefeats(\"Apollo 13\", \"D'Artagnan\").\n.decl Answer()\nAnswer() :- Famous(\"Apollo 1\"), Famous(\"Apollo 11\"), Famous(\"Apollo 13\"), Famous(\"D'Artagnan\"), Famous(\"D'Artagnan's father\"), Famous(\"D'Artagnan's grandfather\"), !Defeats(\"D'Artagnan's father\", \"Apollo 1\"), !Defeats(\"D'Artagnan's father\", \"Apollo 11\"), !Defeats(\"D'Artagnan's father\", \"Apollo 13\"), !Defeats(\"D'Artagnan's grandfather\", \"Apollo 1\"), !Defeats(\"D'Artagnan's grandfather\", \"Apollo 11\"), !Defeats(\"D'Artagnan's grandfather\", \"Apollo 13\").\n.output Answer"]}
{"id": 1506, "answer": false, "completion": ".decl Works_with(Occupation:symbol, Item:symbol)\nWorks_with(\"lapidary\", \"gemstones\").\nWorks_with(\"geologist\", \"rocks\").\nWorks_with(\"geologist\", \"minerals\").\n.decl Answer()\nAnswer() :- Works_with(\"lapidary\", item), Works_with(\"geologist\", item).\n.output Answer", "completions": [".decl Works_with(Occupation:symbol, Item:symbol)\nWorks_with(\"lapidary\", \"gemstones\").\nWorks_with(\"geologist\", \"rocks\").\nWorks_with(\"geologist\", \"minerals\").\n.decl Answer()\nAnswer() :- Works_with(\"lapidary\", item), Works_with(\"geologist\", item).\n.output Answer"]}
{"id": 1507, "answer": false, "completion": ".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Asian black bear\", \"black\").\nHas_color(\"Asian black bear\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"Asian black bear\", \"multicolored\").\n.output Answer", "completions": [".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"Asian black bear\", \"black\").\nHas_color(\"Asian black bear\", \"white\").\n.decl Answer()\nAnswer() :- Has_color(\"Asian black bear\", \"multicolored\").\n.output Answer"]}
{"id": 1508, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"sea turtle\", \"ocean\").\n.decl Quarantine(Time:symbol)\nQuarantine(\"2020\").\n.decl Answer()\nAnswer() :- Lives_in(\"sea turtle\", habitat), Quarantine(time), time = \"2020\", habitat = \"ocean\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"sea turtle\", \"ocean\").\n.decl Quarantine(Time:symbol)\nQuarantine(\"2020\").\n.decl Answer()\nAnswer() :- Lives_in(\"sea turtle\", habitat), Quarantine(time), time = \"2020\", habitat = \"ocean\".\n.output Answer"]}
{"id": 1509, "answer": false, "completion": ".decl IQ_score(Person:symbol, Score:float)\nIQ_score(\"Edward Snowden\", 145).\n.decl Minimum_IQ_requirement(Organization:symbol, Requirement:float)\nMinimum_IQ_requirement(\"MENSA\", 130).\n.decl Answer()\nAnswer() :- IQ_score(\"Edward Snowden\", score), Minimum_IQ_requirement(\"MENSA\", requirement), score >= requirement.\n.output Answer", "completions": [".decl IQ_score(Person:symbol, Score:float)\nIQ_score(\"Edward Snowden\", 145).\n.decl Minimum_IQ_requirement(Organization:symbol, Requirement:float)\nMinimum_IQ_requirement(\"MENSA\", 130).\n.decl Answer()\nAnswer() :- IQ_score(\"Edward Snowden\", score), Minimum_IQ_requirement(\"MENSA\", requirement), score >= requirement.\n.output Answer"]}
{"id": 1510, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Leila George\", 1.6).\n.decl Requires_height(Min_height:float)\nRequires_height(1.75).\n.decl Answer()\nAnswer() :- Has_height(\"Leila George\", height), Requires_height(min_height), height < min_height.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Leila George\", 1.6).\n.decl Requires_height(Min_height:float)\nRequires_height(1.75).\n.decl Answer()\nAnswer() :- Has_height(\"Leila George\", height), Requires_height(min_height), height < min_height.\n.output Answer"]}
{"id": 1511, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"modern central processing unit circuit chip\", 0.01).\nHas_size(\"housekey\", 0.05).\n.decl Answer()\nAnswer() :- Has_size(\"modern central processing unit circuit chip\", size1), Has_size(\"housekey\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"modern central processing unit circuit chip\", 0.01).\nHas_size(\"housekey\", 0.05).\n.decl Answer()\nAnswer() :- Has_size(\"modern central processing unit circuit chip\", size1), Has_size(\"housekey\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1512, "answer": true, "completion": ".decl Performs(Action:symbol, Subject:symbol)\nPerforms(\"The Police\", \"lawful arrests\").\n.decl Answer()\nAnswer() :- Performs(members, action), action = \"lawful arrests\".\n.output Answer", "completions": [".decl Performs(Action:symbol, Subject:symbol)\nPerforms(\"The Police\", \"lawful arrests\").\n.decl Answer()\nAnswer() :- Performs(members, action), action = \"lawful arrests\".\n.output Answer"]}
{"id": 1513, "answer": true, "completion": ".decl Occurs_in_month(Event:symbol, Month:symbol)\nOccurs_in_month(\"Christmas\", \"December\").\nOccurs_in_month(\"New Year's Day\", \"January\").\nOccurs_in_month(\"Martin Luther King Jr. Day\", \"January\").\nOccurs_in_month(\"Presidents' Day\", \"February\").\n.decl Is_government_holiday(Event:symbol)\nIs_government_holiday(\"Martin Luther King Jr. Day\").\nIs_government_holiday(\"Presidents' Day\").\n.decl Answer()\nAnswer() :- Is_government_holiday(event1), Occurs_in_month(event1, month1), Is_government_holiday(event2), Occurs_in_month(event2, month2), month1 = month2, event1 != event2.\n.output Answer", "completions": [".decl Occurs_in_month(Event:symbol, Month:symbol)\nOccurs_in_month(\"Christmas\", \"December\").\nOccurs_in_month(\"New Year's Day\", \"January\").\nOccurs_in_month(\"Martin Luther King Jr. Day\", \"January\").\nOccurs_in_month(\"Presidents' Day\", \"February\").\n.decl Is_government_holiday(Event:symbol)\nIs_government_holiday(\"Martin Luther King Jr. Day\").\nIs_government_holiday(\"Presidents' Day\").\n.decl Answer()\nAnswer() :- Is_government_holiday(event1), Occurs_in_month(event1, month1), Is_government_holiday(event2), Occurs_in_month(event2, month2), month1 = month2, event1 != event2.\n.output Answer"]}
{"id": 1514, "answer": true, "completion": ".decl Largest_city_in_state(City:symbol, State:symbol)\nLargest_city_in_state(\"Albuquerque\", \"New Mexico\").\n.decl Also_known_as(City:symbol, Name:symbol)\nAlso_known_as(\"Albuquerque\", \"Yootó\").\n.decl Answer()\nAnswer() :- Largest_city_in_state(city, \"New Mexico\"), Also_known_as(city, \"Yootó\").\n.output Answer", "completions": [".decl Largest_city_in_state(City:symbol, State:symbol)\nLargest_city_in_state(\"Albuquerque\", \"New Mexico\").\n.decl Also_known_as(City:symbol, Name:symbol)\nAlso_known_as(\"Albuquerque\", \"Yootó\").\n.decl Answer()\nAnswer() :- Largest_city_in_state(city, \"New Mexico\"), Also_known_as(city, \"Yootó\").\n.output Answer"]}
{"id": 1515, "answer": false, "completion": ".decl Depicted_in(Media:symbol, Universe:symbol, Character:symbol)\nDepicted_in(\"Marvel comics\", \"Marvel Universe\", \"Sable\").\n.decl Is_anthropomorphic(Character:symbol)\nIs_anthropomorphic(\"Sable\").\n.decl Answer()\nAnswer() :- Depicted_in(\"Marvel comics\", \"Marvel Universe\", \"Sable\"), Is_anthropomorphic(\"Sable\").\n.output Answer", "completions": [".decl Depicted_in(Media:symbol, Universe:symbol, Character:symbol)\nDepicted_in(\"Marvel comics\", \"Marvel Universe\", \"Sable\").\n.decl Is_anthropomorphic(Character:symbol)\nIs_anthropomorphic(\"Sable\").\n.decl Answer()\nAnswer() :- Depicted_in(\"Marvel comics\", \"Marvel Universe\", \"Sable\"), Is_anthropomorphic(\"Sable\").\n.output Answer"]}
{"id": 1516, "answer": false, "completion": ".decl Is_same_size(Object_A:symbol, Object_B:symbol)\nIs_same_size(\"sesame seed\", \"wood frog egg\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"sesame seed\", \"white\").\nHas_color(\"wood frog egg\", \"transparent\").\n.decl Answer()\nAnswer() :- Is_same_size(\"sesame seed\", object), Has_color(\"sesame seed\", \"white\"), Has_color(object, \"transparent\").\n.output Answer", "completions": [".decl Is_same_size(Object_A:symbol, Object_B:symbol)\nIs_same_size(\"sesame seed\", \"wood frog egg\").\n.decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"sesame seed\", \"white\").\nHas_color(\"wood frog egg\", \"transparent\").\n.decl Answer()\nAnswer() :- Is_same_size(\"sesame seed\", object), Has_color(\"sesame seed\", \"white\"), Has_color(object, \"transparent\").\n.output Answer"]}
{"id": 1517, "answer": false, "completion": ".decl Blooms_in_season(Tree:symbol, Season:symbol)\nBlooms_in_season(\"plum tree\", \"spring\").\n.decl Good_time_for_photography(Month:symbol)\nGood_time_for_photography(\"April\").\nGood_time_for_photography(\"May\").\n.decl Answer()\nAnswer() :- Blooms_in_season(\"plum tree\", season), season = \"spring\", !Good_time_for_photography(\"November\").\n.output Answer", "completions": [".decl Blooms_in_season(Tree:symbol, Season:symbol)\nBlooms_in_season(\"plum tree\", \"spring\").\n.decl Good_time_for_photography(Month:symbol)\nGood_time_for_photography(\"April\").\nGood_time_for_photography(\"May\").\n.decl Answer()\nAnswer() :- Blooms_in_season(\"plum tree\", season), season = \"spring\", !Good_time_for_photography(\"November\").\n.output Answer"]}
{"id": 1518, "answer": true, "completion": ".decl Bite_strength(Animal:symbol, Strength:float)\nBite_strength(\"bull shark\", 350).\nBite_strength(\"crocodile\", 320).\n.decl Answer()\nAnswer() :- Bite_strength(\"bull shark\", strength1), Bite_strength(\"crocodile\", strength2), strength1 > strength2.\n.output Answer", "completions": [".decl Bite_strength(Animal:symbol, Strength:float)\nBite_strength(\"bull shark\", 350).\nBite_strength(\"crocodile\", 320).\n.decl Answer()\nAnswer() :- Bite_strength(\"bull shark\", strength1), Bite_strength(\"crocodile\", strength2), strength1 > strength2.\n.output Answer"]}
{"id": 1519, "answer": false, "completion": ".decl Born(Person:symbol, Year:float)\nBorn(\"Barron Trump\", 2006).\n.decl Happened_in_time(Event:symbol, Start_year:float, End_year:float)\nHappened_in_time(\"Mexican Revolution\", 1910, 1920).\n.decl Answer()\nAnswer() :- Born(\"Barron Trump\", birth_year), Happened_in_time(\"Mexican Revolution\", start_year, end_year), birth_year <= end_year, birth_year >= start_year.\n.output Answer", "completions": [".decl Born(Person:symbol, Year:float)\nBorn(\"Barron Trump\", 2006).\n.decl Happened_in_time(Event:symbol, Start_year:float, End_year:float)\nHappened_in_time(\"Mexican Revolution\", 1910, 1920).\n.decl Answer()\nAnswer() :- Born(\"Barron Trump\", birth_year), Happened_in_time(\"Mexican Revolution\", start_year, end_year), birth_year <= end_year, birth_year >= start_year.\n.output Answer"]}
{"id": 1520, "answer": true, "completion": ".decl Average_temperature(Location:symbol, Temperature:float)\nAverage_temperature(\"New York\", 10).\nAverage_temperature(\"Florida\", 25).\n.decl Answer()\nAnswer() :- Average_temperature(\"New York\", temp1), Average_temperature(\"Florida\", temp2), temp1 < temp2.\n.output Answer", "completions": [".decl Average_temperature(Location:symbol, Temperature:float)\nAverage_temperature(\"New York\", 10).\nAverage_temperature(\"Florida\", 25).\n.decl Answer()\nAnswer() :- Average_temperature(\"New York\", temp1), Average_temperature(\"Florida\", temp2), temp1 < temp2.\n.output Answer"]}
{"id": 1521, "answer": false, "completion": ".decl Dangerous_area(Location:symbol)\nDangerous_area(\"Area 51\").\nDangerous_area(\"Mount Everest\").\nDangerous_area(\"Amazon rainforest\").\n.decl Distance(Location1:symbol, Location2:symbol, Distance:float)\nDistance(\"Very Large Telescope\", \"Atacama Desert\", 20).\nDistance(\"Atacama Desert\", \"Amazon rainforest\", 5000).\nDistance(\"Amazon rainforest\", \"Area 51\", 8000).\n.decl Answer()\nAnswer() :- Dangerous_area(location), Distance(\"Very Large Telescope\", location, distance), distance <= 10000.\n.output Answer", "completions": [".decl Dangerous_area(Location:symbol)\nDangerous_area(\"Area 51\").\nDangerous_area(\"Mount Everest\").\nDangerous_area(\"Amazon rainforest\").\n.decl Distance(Location1:symbol, Location2:symbol, Distance:float)\nDistance(\"Very Large Telescope\", \"Atacama Desert\", 20).\nDistance(\"Atacama Desert\", \"Amazon rainforest\", 5000).\nDistance(\"Amazon rainforest\", \"Area 51\", 8000).\n.decl Answer()\nAnswer() :- Dangerous_area(location), Distance(\"Very Large Telescope\", location, distance), distance <= 10000.\n.output Answer"]}
{"id": 1522, "answer": true, "completion": ".decl Is_vegetable(Object:symbol)\nIs_vegetable(\"carrot\").\n.decl Can_receive_transplant(Object:symbol)\nCan_receive_transplant(\"human\").\n.decl Answer()\nAnswer() :- Is_vegetable(\"carrot\"), !Can_receive_transplant(\"carrot\").\n.output Answer", "completions": [".decl Is_vegetable(Object:symbol)\nIs_vegetable(\"carrot\").\n.decl Can_receive_transplant(Object:symbol)\nCan_receive_transplant(\"human\").\n.decl Answer()\nAnswer() :- Is_vegetable(\"carrot\"), !Can_receive_transplant(\"carrot\").\n.output Answer"]}
{"id": 1523, "answer": false, "completion": ".decl Iteration_of_name(Person:symbol, Iteration:float)\nIteration_of_name(\"Pope Leo IV\", 4).\nIteration_of_name(\"Ivan the Terrible\", 4).\n.decl Answer()\nAnswer() :- Iteration_of_name(\"Pope Leo IV\", iteration1), Iteration_of_name(\"Ivan the Terrible\", iteration2), iteration1 = iteration2.\n.output Answer", "completions": [".decl Iteration_of_name(Person:symbol, Iteration:float)\nIteration_of_name(\"Pope Leo IV\", 4).\nIteration_of_name(\"Ivan the Terrible\", 4).\n.decl Answer()\nAnswer() :- Iteration_of_name(\"Pope Leo IV\", iteration1), Iteration_of_name(\"Ivan the Terrible\", iteration2), iteration1 = iteration2.\n.output Answer"]}
{"id": 1524, "answer": false, "completion": ".decl Fought_for(Country:symbol, Group:symbol)\nFought_for(\"England\", \"loyalists\").\nFought_for(\"Netherlands\", \"William of Orange\").\nFought_for(\"France\", \"Jacobites\").\n.decl Answer()\nAnswer() :- Fought_for(\"England\", group1), Fought_for(\"loyalists\", group2), group1 != group2.\n.output Answer", "completions": [".decl Fought_for(Country:symbol, Group:symbol)\nFought_for(\"England\", \"loyalists\").\nFought_for(\"Netherlands\", \"William of Orange\").\nFought_for(\"France\", \"Jacobites\").\n.decl Answer()\nAnswer() :- Fought_for(\"England\", group1), Fought_for(\"loyalists\", group2), group1 != group2.\n.output Answer"]}
{"id": 1525, "answer": false, "completion": ".decl Involved_in(Event:symbol, Company:symbol)\nInvolved_in(\"lunar landing\", \"NASA\").\nInvolved_in(\"lunar landing\", \"Boeing\").\nInvolved_in(\"lunar landing\", \"Northrop Grumman\").\n.decl Answer()\nAnswer() :- Involved_in(\"lunar landing\", company), company = \"Amazon\".\n.output Answer", "completions": [".decl Involved_in(Event:symbol, Company:symbol)\nInvolved_in(\"lunar landing\", \"NASA\").\nInvolved_in(\"lunar landing\", \"Boeing\").\nInvolved_in(\"lunar landing\", \"Northrop Grumman\").\n.decl Answer()\nAnswer() :- Involved_in(\"lunar landing\", company), company = \"Amazon\".\n.output Answer"]}
{"id": 1526, "answer": true, "completion": ".decl Days_to_birthday(Person:symbol, Days:float)\nDays_to_birthday(\"Dean Cain\", 30).\nDays_to_birthday(\"Will Ferrell\", 60).\n.decl Answer()\nAnswer() :- Days_to_birthday(\"Dean Cain\", days1), Days_to_birthday(\"Will Ferrell\", days2), days1 < days2, Happens_every_n_months(\"4th of July\", 12).\n.output Answer", "completions": [".decl Days_to_birthday(Person:symbol, Days:float)\nDays_to_birthday(\"Dean Cain\", 30).\nDays_to_birthday(\"Will Ferrell\", 60).\n.decl Answer()\nAnswer() :- Days_to_birthday(\"Dean Cain\", days1), Days_to_birthday(\"Will Ferrell\", days2), days1 < days2, Happens_every_n_months(\"4th of July\", 12).\n.output Answer"]}
{"id": 1527, "answer": false, "completion": ".decl Belongs_to_caste(Person:symbol, Caste:symbol)\nBelongs_to_caste(\"John\", \"Iyer\").\nBelongs_to_caste(\"Jane\", \"Brahmin\").\n.decl Eats_food(Person:symbol, Food:symbol)\nEats_food(\"John\", \"chicken\").\nEats_food(\"Jane\", \"vegetables\").\n.decl Answer()\nAnswer() :- Belongs_to_caste(person, \"Iyer\"), Eats_food(person, \"meat\").\n.output Answer", "completions": [".decl Belongs_to_caste(Person:symbol, Caste:symbol)\nBelongs_to_caste(\"John\", \"Iyer\").\nBelongs_to_caste(\"Jane\", \"Brahmin\").\n.decl Eats_food(Person:symbol, Food:symbol)\nEats_food(\"John\", \"chicken\").\nEats_food(\"Jane\", \"vegetables\").\n.decl Answer()\nAnswer() :- Belongs_to_caste(person, \"Iyer\"), Eats_food(person, \"meat\").\n.output Answer"]}
{"id": 1528, "answer": false, "completion": ".decl Rules_over(God:symbol, Domain:symbol)\nRules_over(\"Hades\", \"Underworld\").\nRules_over(\"Osiris\", \"Underworld\").\n.decl Answer()\nAnswer() :- Rules_over(god1, \"Underworld\"), Rules_over(god2, \"Underworld\"), god1 != god2.\n.output Answer", "completions": [".decl Rules_over(God:symbol, Domain:symbol)\nRules_over(\"Hades\", \"Underworld\").\nRules_over(\"Osiris\", \"Underworld\").\n.decl Answer()\nAnswer() :- Rules_over(god1, \"Underworld\"), Rules_over(god2, \"Underworld\"), god1 != god2.\n.output Answer"]}
{"id": 1529, "answer": false, "completion": "Sorry, I cannot generate inappropriate or biased content.", "completions": ["Sorry, I cannot generate inappropriate or biased content."]}
{"id": 1530, "answer": false, "completion": ".decl Contains_ingredient(Meal:symbol, Ingredient:symbol)\nContains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"pork\").\nContains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"cinnamon\").\nContains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"chipotle\").\n.decl Is_appropriate_for_event(Meal:symbol, Event:symbol)\nIs_appropriate_for_event(\"Chipotle Cinnamon Pork Chops\", \"Seder\") ! :- Contains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"pork\").\nIs_appropriate_for_event(\"Chipotle Cinnamon Pork Chops\", \"Seder\") ! :- Contains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"cinnamon\").\nIs_appropriate_for_event(\"Chipotle Cinnamon Pork Chops\", \"Seder\") ! :- Contains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"chipotle\").\nIs_appropriate_for_event(\"Chipotle Cinnamon Pork Chops\", \"Seder\") :- Contains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"kosher\").\n.decl Answer()\nAnswer() :- Is_appropriate_for_event(\"Chipotle Cinnamon Pork Chops\", \"Seder\").\n.output Answer", "completions": [".decl Contains_ingredient(Meal:symbol, Ingredient:symbol)\nContains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"pork\").\nContains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"cinnamon\").\nContains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"chipotle\").\n.decl Is_appropriate_for_event(Meal:symbol, Event:symbol)\nIs_appropriate_for_event(\"Chipotle Cinnamon Pork Chops\", \"Seder\") ! :- Contains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"pork\").\nIs_appropriate_for_event(\"Chipotle Cinnamon Pork Chops\", \"Seder\") ! :- Contains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"cinnamon\").\nIs_appropriate_for_event(\"Chipotle Cinnamon Pork Chops\", \"Seder\") ! :- Contains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"chipotle\").\nIs_appropriate_for_event(\"Chipotle Cinnamon Pork Chops\", \"Seder\") :- Contains_ingredient(\"Chipotle Cinnamon Pork Chops\", \"kosher\").\n.decl Answer()\nAnswer() :- Is_appropriate_for_event(\"Chipotle Cinnamon Pork Chops\", \"Seder\").\n.output Answer"]}
{"id": 1531, "answer": true, "completion": ".decl Causes_symptom(Food:symbol, Symptom:symbol)\nCauses_symptom(\"prunes\", \"diarrhea\").\nCauses_symptom(\"beans\", \"gas\").\n.decl Consumed(Food:symbol, Quantity:float)\nConsumed(\"oranges\", 10).\nConsumed(\"prunes\", 20).\n.decl Answer()\nAnswer() :- Consumed(food, quantity), Causes_symptom(food, \"diarrhea\"), quantity > 15.\n.output Answer", "completions": [".decl Causes_symptom(Food:symbol, Symptom:symbol)\nCauses_symptom(\"prunes\", \"diarrhea\").\nCauses_symptom(\"beans\", \"gas\").\n.decl Consumed(Food:symbol, Quantity:float)\nConsumed(\"oranges\", 10).\nConsumed(\"prunes\", 20).\n.decl Answer()\nAnswer() :- Consumed(food, quantity), Causes_symptom(food, \"diarrhea\"), quantity > 15.\n.output Answer"]}
{"id": 1532, "answer": false, "completion": ".decl Trait(Person:symbol, Trait:symbol)\nTrait(\"Alice\", \"jealousy\").\n.decl Relationship_style(Person:symbol, Style:symbol)\nRelationship_style(\"Bob\", \"polyamorous\").\n.decl Answer()\nAnswer() :- Trait(person, \"jealousy\"), Relationship_style(person, \"monogamous\").\nAnswer() :- not Trait(person, \"jealousy\"), Relationship_style(person, \"polyamorous\").\n.output Answer", "completions": [".decl Trait(Person:symbol, Trait:symbol)\nTrait(\"Alice\", \"jealousy\").\n.decl Relationship_style(Person:symbol, Style:symbol)\nRelationship_style(\"Bob\", \"polyamorous\").\n.decl Answer()\nAnswer() :- Trait(person, \"jealousy\"), Relationship_style(person, \"monogamous\").\nAnswer() :- not Trait(person, \"jealousy\"), Relationship_style(person, \"polyamorous\").\n.output Answer"]}
{"id": 1533, "answer": false, "completion": ".decl Commits_sin(Person:symbol, Sin:symbol)\nCommits_sin(\"Christopher Columbus\", \"greed\").\nCommits_sin(\"Christopher Columbus\", \"pride\").\nCommits_sin(\"Christopher Columbus\", \"wrath\").\nCommits_sin(\"Christopher Columbus\", \"envy\").\nCommits_sin(\"Christopher Columbus\", \"lust\").\n.decl Answer()\nAnswer() :- Commits_sin(\"Christopher Columbus\", \"greed\"), Commits_sin(\"Christopher Columbus\", \"pride\"), Commits_sin(\"Christopher Columbus\", \"wrath\"), Commits_sin(\"Christopher Columbus\", \"envy\"), Commits_sin(\"Christopher Columbus\", \"lust\").\n.output Answer", "completions": [".decl Commits_sin(Person:symbol, Sin:symbol)\nCommits_sin(\"Christopher Columbus\", \"greed\").\nCommits_sin(\"Christopher Columbus\", \"pride\").\nCommits_sin(\"Christopher Columbus\", \"wrath\").\nCommits_sin(\"Christopher Columbus\", \"envy\").\nCommits_sin(\"Christopher Columbus\", \"lust\").\n.decl Answer()\nAnswer() :- Commits_sin(\"Christopher Columbus\", \"greed\"), Commits_sin(\"Christopher Columbus\", \"pride\"), Commits_sin(\"Christopher Columbus\", \"wrath\"), Commits_sin(\"Christopher Columbus\", \"envy\"), Commits_sin(\"Christopher Columbus\", \"lust\").\n.output Answer"]}
{"id": 1534, "answer": false, "completion": ".decl Affected_by_event(Company:symbol, Event:symbol)\nAffected_by_event(\"Robotics Inc.\", \"Wall Street Crash of 1929\").\n.decl Belongs_to_industry(Company:symbol, Industry:symbol)\nBelongs_to_industry(\"Robotics Inc.\", \"Technology\").\nBelongs_to_industry(\"Wall Street Journal\", \"Finance\").\n.decl Answer()\nAnswer() :- Affected_by_event(company, \"Wall Street Crash of 1929\"), Belongs_to_industry(company, \"Technology\").\n.output Answer", "completions": [".decl Affected_by_event(Company:symbol, Event:symbol)\nAffected_by_event(\"Robotics Inc.\", \"Wall Street Crash of 1929\").\n.decl Belongs_to_industry(Company:symbol, Industry:symbol)\nBelongs_to_industry(\"Robotics Inc.\", \"Technology\").\nBelongs_to_industry(\"Wall Street Journal\", \"Finance\").\n.decl Answer()\nAnswer() :- Affected_by_event(company, \"Wall Street Crash of 1929\"), Belongs_to_industry(company, \"Technology\").\n.output Answer"]}
{"id": 1535, "answer": true, "completion": ".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Inception\", 160000000).\nHas_budget(\"The Dark Knight\", 185000000).\nHas_budget(\"Interstellar\", 165000000).\n.decl Has_GDP(Country:symbol, GDP:float)\nHas_GDP(\"Cyprus\", 24000000000).\n.decl Answer()\nAnswer() :- Has_budget(movie1, budget1), Has_budget(movie2, budget2), Has_budget(movie3, budget3), budget1 + budget2 + budget3 >= Has_GDP(\"Cyprus\", GDP).\n.output Answer", "completions": [".decl Has_budget(Movie:symbol, Budget:float)\nHas_budget(\"Inception\", 160000000).\nHas_budget(\"The Dark Knight\", 185000000).\nHas_budget(\"Interstellar\", 165000000).\n.decl Has_GDP(Country:symbol, GDP:float)\nHas_GDP(\"Cyprus\", 24000000000).\n.decl Answer()\nAnswer() :- Has_budget(movie1, budget1), Has_budget(movie2, budget2), Has_budget(movie3, budget3), budget1 + budget2 + budget3 >= Has_GDP(\"Cyprus\", GDP).\n.output Answer"]}
{"id": 1536, "answer": false, "completion": ".decl Has_n_fingers(Character:symbol, N_fingers:float)\nHas_n_fingers(\"Homer Simpson\", 4).\n.decl Answer()\nAnswer() :- Has_n_fingers(\"Homer Simpson\", n_fingers), n_fingers >= 5.\n.output Answer", "completions": [".decl Has_n_fingers(Character:symbol, N_fingers:float)\nHas_n_fingers(\"Homer Simpson\", 4).\n.decl Answer()\nAnswer() :- Has_n_fingers(\"Homer Simpson\", n_fingers), n_fingers >= 5.\n.output Answer"]}
{"id": 1537, "answer": true, "completion": ".decl Known_for(Person:symbol, Trait:symbol)\nKnown_for(\"Robin Williams\", \"humour\").\n.decl Played_in_movie(Person:symbol, Movie:symbol, Role:symbol)\nPlayed_in_movie(\"Robin Williams\", \"Mrs. Doubtfire\", \"male lead\").\n.decl Answer()\nAnswer() :- Played_in_movie(person, \"Mrs. Doubtfire\", \"male lead\"), Known_for(person, \"humour\").\n.output Answer", "completions": [".decl Known_for(Person:symbol, Trait:symbol)\nKnown_for(\"Robin Williams\", \"humour\").\n.decl Played_in_movie(Person:symbol, Movie:symbol, Role:symbol)\nPlayed_in_movie(\"Robin Williams\", \"Mrs. Doubtfire\", \"male lead\").\n.decl Answer()\nAnswer() :- Played_in_movie(person, \"Mrs. Doubtfire\", \"male lead\"), Known_for(person, \"humour\").\n.output Answer"]}
{"id": 1538, "answer": false, "completion": ".decl Obtains_funding(Person:symbol, Empire:symbol)\nObtains_funding(\"Christopher Columbus\", \"Spanish Empire\").\nObtains_funding(\"Vasco da Gama\", \"Portuguese Empire\").\n.decl Answer()\nAnswer() :- Obtains_funding(\"Christopher Columbus\", empire1), Obtains_funding(\"Vasco da Gama\", empire2), empire1 != empire2.\n.output Answer", "completions": [".decl Obtains_funding(Person:symbol, Empire:symbol)\nObtains_funding(\"Christopher Columbus\", \"Spanish Empire\").\nObtains_funding(\"Vasco da Gama\", \"Portuguese Empire\").\n.decl Answer()\nAnswer() :- Obtains_funding(\"Christopher Columbus\", empire1), Obtains_funding(\"Vasco da Gama\", empire2), empire1 != empire2.\n.output Answer"]}
{"id": 1539, "answer": true, "completion": ".decl Essential_to(Project:symbol, Civilization:symbol)\nEssential_to(\"Egyptian Lighthouse of Alexandria\", \"Greeks\").\n.decl Answer()\nAnswer() :- Essential_to(\"Egyptian Lighthouse of Alexandria\", \"Greeks\").\n.output Answer", "completions": [".decl Essential_to(Project:symbol, Civilization:symbol)\nEssential_to(\"Egyptian Lighthouse of Alexandria\", \"Greeks\").\n.decl Answer()\nAnswer() :- Essential_to(\"Egyptian Lighthouse of Alexandria\", \"Greeks\").\n.output Answer"]}
{"id": 1540, "answer": false, "completion": ".decl Has_rank(Person:symbol, Rank:float)\nHas_rank(\"John Doe\", 1).\nHas_rank(\"Jane Smith\", 50).\nHas_rank(\"Bob Johnson\", 100).\n.decl Answer()\nAnswer() :- Has_rank(person, rank), rank >= 100.\n.output Answer", "completions": [".decl Has_rank(Person:symbol, Rank:float)\nHas_rank(\"John Doe\", 1).\nHas_rank(\"Jane Smith\", 50).\nHas_rank(\"Bob Johnson\", 100).\n.decl Answer()\nAnswer() :- Has_rank(person, rank), rank >= 100.\n.output Answer"]}
{"id": 1541, "answer": true, "completion": ".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"Restaurant A\", \"cactus fruit salad\").\nServes(\"Restaurant B\", \"taco al pastor\").\nServes(\"Restaurant C\", \"cactus fruit margarita\").\n.decl Located_in(Restaurant:symbol, Location:symbol)\nLocated_in(\"Restaurant A\", \"Cuauhtémoc\").\nLocated_in(\"Restaurant B\", \"Roma Norte\").\nLocated_in(\"Restaurant C\", \"Condesa\").\n.decl Answer()\nAnswer() :- Serves(restaurant, \"cactus fruit dish\"), Located_in(restaurant, \"Cuauhtémoc\").\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Dish:symbol)\nServes(\"Restaurant A\", \"cactus fruit salad\").\nServes(\"Restaurant B\", \"taco al pastor\").\nServes(\"Restaurant C\", \"cactus fruit margarita\").\n.decl Located_in(Restaurant:symbol, Location:symbol)\nLocated_in(\"Restaurant A\", \"Cuauhtémoc\").\nLocated_in(\"Restaurant B\", \"Roma Norte\").\nLocated_in(\"Restaurant C\", \"Condesa\").\n.decl Answer()\nAnswer() :- Serves(restaurant, \"cactus fruit dish\"), Located_in(restaurant, \"Cuauhtémoc\").\n.output Answer"]}
{"id": 1542, "answer": true, "completion": ".decl Trains(Person:symbol, Technique:symbol)\nTrains(\"Mike Tyson\", \"punching\").\nTrains(\"Anderson Silva\", \"gogoplata\").\n.decl Answer()\nAnswer() :- Trains(\"Mike Tyson\", technique1), Trains(\"Anderson Silva\", technique2), technique1 != \"gogoplata\", technique2 = \"gogoplata\".\n.output Answer", "completions": [".decl Trains(Person:symbol, Technique:symbol)\nTrains(\"Mike Tyson\", \"punching\").\nTrains(\"Anderson Silva\", \"gogoplata\").\n.decl Answer()\nAnswer() :- Trains(\"Mike Tyson\", technique1), Trains(\"Anderson Silva\", technique2), technique1 != \"gogoplata\", technique2 = \"gogoplata\".\n.output Answer"]}
{"id": 1543, "answer": false, "completion": ".decl Associated_with(Company:symbol, Country:symbol)\nAssociated_with(\"Fiat Chrysler\", \"Italy\").\nAssociated_with(\"Toyota\", \"Japan\").\nAssociated_with(\"Honda\", \"Japan\").\nAssociated_with(\"Nissan\", \"Japan\").\n.decl Answer()\nAnswer() :- Associated_with(\"Fiat Chrysler\", country1), Associated_with(car_brand, country2), country1 != country2.\n.output Answer", "completions": [".decl Associated_with(Company:symbol, Country:symbol)\nAssociated_with(\"Fiat Chrysler\", \"Italy\").\nAssociated_with(\"Toyota\", \"Japan\").\nAssociated_with(\"Honda\", \"Japan\").\nAssociated_with(\"Nissan\", \"Japan\").\n.decl Answer()\nAnswer() :- Associated_with(\"Fiat Chrysler\", country1), Associated_with(car_brand, country2), country1 != country2.\n.output Answer"]}
{"id": 1544, "answer": true, "completion": ".decl Has_property(Food:symbol, Property:symbol)\nHas_property(\"jello shots\", \"viscosity\").\n.decl Important(Property:symbol)\nImportant(\"viscosity\").\n.decl Answer()\nAnswer() :- Has_property(\"jello shots\", property), !Important(property).\n.output Answer", "completions": [".decl Has_property(Food:symbol, Property:symbol)\nHas_property(\"jello shots\", \"viscosity\").\n.decl Important(Property:symbol)\nImportant(\"viscosity\").\n.decl Answer()\nAnswer() :- Has_property(\"jello shots\", property), !Important(property).\n.output Answer"]}
{"id": 1545, "answer": false, "completion": ".decl Wears(Person:symbol, Outfit:symbol)\nWears(\"Johnny Cash\", \"black\").\n.decl Answer()\nAnswer() :- !Wears(\"Johnny Cash\", \"rainbow-colored outfit\").\n.output Answer", "completions": [".decl Wears(Person:symbol, Outfit:symbol)\nWears(\"Johnny Cash\", \"black\").\n.decl Answer()\nAnswer() :- !Wears(\"Johnny Cash\", \"rainbow-colored outfit\").\n.output Answer"]}
{"id": 1546, "answer": false, "completion": ".decl Gestation_period(Animal:symbol, Period:float)\nGestation_period(\"markhor\", 150).\n.decl Time_between_births(Animal:symbol, Time:float)\nTime_between_births(\"markhor\", 120).\n.decl Answer()\nAnswer() :- Gestation_period(\"markhor\", period), Time_between_births(\"markhor\", time), period + time <= 365.\n.output Answer", "completions": [".decl Gestation_period(Animal:symbol, Period:float)\nGestation_period(\"markhor\", 150).\n.decl Time_between_births(Animal:symbol, Time:float)\nTime_between_births(\"markhor\", 120).\n.decl Answer()\nAnswer() :- Gestation_period(\"markhor\", period), Time_between_births(\"markhor\", time), period + time <= 365.\n.output Answer"]}
{"id": 1547, "answer": false, "completion": ".decl Belongs_to_religion(Person:symbol, Religion:symbol)\nBelongs_to_religion(\"Mother Theresa\", \"Catholicism\").\n.decl Answer()\nAnswer() :- Belongs_to_religion(\"Mother Theresa\", religion), religion != \"atheism\".\n.output Answer", "completions": [".decl Belongs_to_religion(Person:symbol, Religion:symbol)\nBelongs_to_religion(\"Mother Theresa\", \"Catholicism\").\n.decl Answer()\nAnswer() :- Belongs_to_religion(\"Mother Theresa\", religion), religion != \"atheism\".\n.output Answer"]}
{"id": 1548, "answer": false, "completion": ".decl Can_learn(Subject:symbol, Learner:symbol)\nCan_learn(\"history of art\", \"human\").\n.decl Answer()\nAnswer() :- Can_learn(\"history of art\", learner), learner != \"amoeba\".\n.output Answer", "completions": [".decl Can_learn(Subject:symbol, Learner:symbol)\nCan_learn(\"history of art\", \"human\").\n.decl Answer()\nAnswer() :- Can_learn(\"history of art\", learner), learner != \"amoeba\".\n.output Answer"]}
{"id": 1549, "answer": false, "completion": ".decl Takes_course(Person:symbol, Course:symbol)\nTakes_course(\"John\", \"CHE101\").\n.decl Requires_book(Course:symbol, Book:symbol)\nRequires_book(\"CHE101\", \"Chemistry: The Central Science\").\nRequires_book(\"ENG101\", \"I Know Why the Caged Bird Sings\").\n.decl Answer()\nAnswer() :- Takes_course(person, \"CHE101\"), !Requires_book(\"CHE101\", \"Maya Angelou\").\n.output Answer", "completions": [".decl Takes_course(Person:symbol, Course:symbol)\nTakes_course(\"John\", \"CHE101\").\n.decl Requires_book(Course:symbol, Book:symbol)\nRequires_book(\"CHE101\", \"Chemistry: The Central Science\").\nRequires_book(\"ENG101\", \"I Know Why the Caged Bird Sings\").\n.decl Answer()\nAnswer() :- Takes_course(person, \"CHE101\"), !Requires_book(\"CHE101\", \"Maya Angelou\").\n.output Answer"]}
{"id": 1550, "answer": true, "completion": ".decl Attends(Event:symbol, Person:symbol)\nAttends(\"Last Supper\", \"Jesus\").\nAttends(\"Last Supper\", \"Judas\").\nAttends(\"Last Supper\", \"Peter\").\nAttends(\"Last Supper\", \"John\").\n.decl Celebrates_religion(Person:symbol, Religion:symbol)\nCelebrates_religion(\"Jesus\", \"Christianity\").\nCelebrates_religion(\"Judas\", \"Judaism\").\nCelebrates_religion(\"Peter\", \"Christianity\").\nCelebrates_religion(\"John\", \"Christianity\").\nCelebrates_religion(\"John\", \"Islam\").\n.decl Answer()\nAnswer() :- Attends(\"Last Supper\", person), Celebrates_religion(person, \"Islam\").\n.output Answer", "completions": [".decl Attends(Event:symbol, Person:symbol)\nAttends(\"Last Supper\", \"Jesus\").\nAttends(\"Last Supper\", \"Judas\").\nAttends(\"Last Supper\", \"Peter\").\nAttends(\"Last Supper\", \"John\").\n.decl Celebrates_religion(Person:symbol, Religion:symbol)\nCelebrates_religion(\"Jesus\", \"Christianity\").\nCelebrates_religion(\"Judas\", \"Judaism\").\nCelebrates_religion(\"Peter\", \"Christianity\").\nCelebrates_religion(\"John\", \"Christianity\").\nCelebrates_religion(\"John\", \"Islam\").\n.decl Answer()\nAnswer() :- Attends(\"Last Supper\", person), Celebrates_religion(person, \"Islam\").\n.output Answer"]}
{"id": 1551, "answer": false, "completion": ".decl Attended(Person:symbol, University:symbol)\nAttended(\"Meryl Streep\", \"Vassar College\").\nAttended(\"Emma Stone\", \"Fordham University\").\nAttended(\"Tom Hanks\", \"California State University, Sacramento\").\n.decl Golden_Globe_winner(Person:symbol)\nGolden_Globe_winner(\"Meryl Streep\").\nGolden_Globe_winner(\"Emma Stone\").\n.decl Alma_mater(Person:symbol, University:symbol)\nAlma_mater(\"John Kerry\", \"Yale University\").\n.decl Answer()\nAnswer() :- Golden_Globe_winner(person), Attended(person, university), Alma_mater(\"John Kerry\", university).\n.output Answer", "completions": [".decl Attended(Person:symbol, University:symbol)\nAttended(\"Meryl Streep\", \"Vassar College\").\nAttended(\"Emma Stone\", \"Fordham University\").\nAttended(\"Tom Hanks\", \"California State University, Sacramento\").\n.decl Golden_Globe_winner(Person:symbol)\nGolden_Globe_winner(\"Meryl Streep\").\nGolden_Globe_winner(\"Emma Stone\").\n.decl Alma_mater(Person:symbol, University:symbol)\nAlma_mater(\"John Kerry\", \"Yale University\").\n.decl Answer()\nAnswer() :- Golden_Globe_winner(person), Attended(person, university), Alma_mater(\"John Kerry\", university).\n.output Answer"]}
{"id": 1552, "answer": false, "completion": ".decl Can_use_as_shield(Animal:symbol)\nCan_use_as_shield(\"armadillo\").\n.decl Answer()\nAnswer() :- Can_use_as_shield(animal).\n.output Answer", "completions": [".decl Can_use_as_shield(Animal:symbol)\nCan_use_as_shield(\"armadillo\").\n.decl Answer()\nAnswer() :- Can_use_as_shield(animal).\n.output Answer"]}
{"id": 1553, "answer": true, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"10th doctor\", \"fish fingers and custard\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"stuffed pears\", \"pears\").\nHas_ingredient(\"stuffed pears\", \"breadcrumbs\").\nHas_ingredient(\"stuffed pears\", \"cheese\").\n.decl Answer()\nAnswer() :- Likes(\"10th doctor\", food), Has_ingredient(food, \"pears\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"10th doctor\", \"fish fingers and custard\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"stuffed pears\", \"pears\").\nHas_ingredient(\"stuffed pears\", \"breadcrumbs\").\nHas_ingredient(\"stuffed pears\", \"cheese\").\n.decl Answer()\nAnswer() :- Likes(\"10th doctor\", food), Has_ingredient(food, \"pears\").\n.output Answer"]}
{"id": 1554, "answer": true, "completion": ".decl Known_for(Product:symbol, City:symbol)\nKnown_for(\"bagels\", \"New York City\").\nKnown_for(\"pizza\", \"Brooklyn\").\nKnown_for(\"cheesesteaks\", \"Philadelphia\").\n.decl Answer()\nAnswer() :- Known_for(\"bread products\", city), Known_for(product, city), product != \"bread products\".\n.output Answer", "completions": [".decl Known_for(Product:symbol, City:symbol)\nKnown_for(\"bagels\", \"New York City\").\nKnown_for(\"pizza\", \"Brooklyn\").\nKnown_for(\"cheesesteaks\", \"Philadelphia\").\n.decl Answer()\nAnswer() :- Known_for(\"bread products\", city), Known_for(product, city), product != \"bread products\".\n.output Answer"]}
{"id": 1555, "answer": true, "completion": ".decl Safe_from_disease(Organism:symbol, Disease:symbol)\nSafe_from_disease(\"amoeba\", \"breast cancer\").\n.decl Answer()\nAnswer() :- Safe_from_disease(\"amoeba\", \"breast cancer\").\n.output Answer", "completions": [".decl Safe_from_disease(Organism:symbol, Disease:symbol)\nSafe_from_disease(\"amoeba\", \"breast cancer\").\n.decl Answer()\nAnswer() :- Safe_from_disease(\"amoeba\", \"breast cancer\").\n.output Answer"]}
{"id": 1556, "answer": false, "completion": ".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Post Malone\", \"needles\").\n.decl Answer()\nAnswer() :- Has_fear(\"Post Malone\", \"needles\").\n.output Answer", "completions": [".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Post Malone\", \"needles\").\n.decl Answer()\nAnswer() :- Has_fear(\"Post Malone\", \"needles\").\n.output Answer"]}
{"id": 1557, "answer": false, "completion": ".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 45000).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Gotheburg\", 570000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity1), Has_population(\"Gotheburg\", population), capacity1 >= population/10.\n.output Answer", "completions": [".decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Toyota Stadium\", 45000).\n.decl Has_population(City:symbol, Population:float)\nHas_population(\"Gotheburg\", 570000).\n.decl Answer()\nAnswer() :- Has_capacity(\"Toyota Stadium\", capacity1), Has_population(\"Gotheburg\", population), capacity1 >= population/10.\n.output Answer"]}
{"id": 1558, "answer": false, "completion": ".decl Expertise(Person:symbol, Skill:symbol)\nExpertise(\"Jujutsu expert\", \"Jujutsu\").\n.decl Weapon(Profession:symbol, Weapon:symbol)\nWeapon(\"Janissary\", \"sword\").\n.decl Answer()\nAnswer() :- Expertise(\"Jujutsu expert\", skill1), Weapon(\"Janissary\", weapon), skill1 = weapon.\n.output Answer", "completions": [".decl Expertise(Person:symbol, Skill:symbol)\nExpertise(\"Jujutsu expert\", \"Jujutsu\").\n.decl Weapon(Profession:symbol, Weapon:symbol)\nWeapon(\"Janissary\", \"sword\").\n.decl Answer()\nAnswer() :- Expertise(\"Jujutsu expert\", skill1), Weapon(\"Janissary\", weapon), skill1 = weapon.\n.output Answer"]}
{"id": 1559, "answer": false, "completion": ".decl Population(Country:symbol, Population:float)\nPopulation(\"Bulgaria\", 7.0).\n.decl Land_area(Country:symbol, Area:float)\nLand_area(\"Bulgaria\", 111000).\n.decl Answer()\nAnswer() :- Population(\"Bulgaria\", population), Land_area(\"Bulgaria\", area), population/area > 100.\n.output Answer", "completions": [".decl Population(Country:symbol, Population:float)\nPopulation(\"Bulgaria\", 7.0).\n.decl Land_area(Country:symbol, Area:float)\nLand_area(\"Bulgaria\", 111000).\n.decl Answer()\nAnswer() :- Population(\"Bulgaria\", population), Land_area(\"Bulgaria\", area), population/area > 100.\n.output Answer"]}
{"id": 1560, "answer": false, "completion": ".decl Plays(Sport:symbol, Animal:symbol)\nPlays(\"badminton\", \"bird\").\n.decl Answer()\nAnswer() :- Plays(sport, \"bird\"), sport != \"bird watching\".\n.output Answer", "completions": [".decl Plays(Sport:symbol, Animal:symbol)\nPlays(\"badminton\", \"bird\").\n.decl Answer()\nAnswer() :- Plays(sport, \"bird\"), sport != \"bird watching\".\n.output Answer"]}
{"id": 1561, "answer": true, "completion": ".decl Is_lieutenant(Person:symbol, Rank:symbol)\nIs_lieutenant(\"pirate lieutenant\", \"lieutenant\").\nIs_lieutenant(\"navy lieutenant\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Is_lieutenant(\"pirate lieutenant\", rank), Is_lieutenant(\"navy lieutenant\", rank).\n.output Answer", "completions": [".decl Is_lieutenant(Person:symbol, Rank:symbol)\nIs_lieutenant(\"pirate lieutenant\", \"lieutenant\").\nIs_lieutenant(\"navy lieutenant\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Is_lieutenant(\"pirate lieutenant\", rank), Is_lieutenant(\"navy lieutenant\", rank).\n.output Answer"]}
{"id": 1562, "answer": false, "completion": ".decl Distance(Object1:symbol, Object2:symbol, Distance:float)\nDistance(\"Hwasong-15 missile\", \"Voyager 2\", 1.6e13).\n.decl Speed(Object:symbol, Speed:float)\nSpeed(\"Hwasong-15 missile\", 4.8e3).\nSpeed(\"Voyager 2\", 17.1e3).\n.decl Time(Distance:float, Speed:float, Time:float)\nTime(distance, speed, time) :- time = distance / speed.\n.decl Answer()\nAnswer() :- Distance(\"Hwasong-15 missile\", \"Voyager 2\", distance), Speed(\"Hwasong-15 missile\", speed1), Time(distance, speed1, time1), Speed(\"Voyager 2\", speed2), Time(time1, speed2, distance2), distance2 <= 0.1e13.\n.output Answer", "completions": [".decl Distance(Object1:symbol, Object2:symbol, Distance:float)\nDistance(\"Hwasong-15 missile\", \"Voyager 2\", 1.6e13).\n.decl Speed(Object:symbol, Speed:float)\nSpeed(\"Hwasong-15 missile\", 4.8e3).\nSpeed(\"Voyager 2\", 17.1e3).\n.decl Time(Distance:float, Speed:float, Time:float)\nTime(distance, speed, time) :- time = distance / speed.\n.decl Answer()\nAnswer() :- Distance(\"Hwasong-15 missile\", \"Voyager 2\", distance), Speed(\"Hwasong-15 missile\", speed1), Time(distance, speed1, time1), Speed(\"Voyager 2\", speed2), Time(time1, speed2, distance2), distance2 <= 0.1e13.\n.output Answer"]}
{"id": 1563, "answer": false, "completion": ".decl Has_material(Appliance:symbol, Material:symbol)\nHas_material(\"electric stove\", \"glass\").\n.decl Suitable_for_cooking(Material:symbol, Dish:symbol)\nSuitable_for_cooking(\"cast iron\", \"steak\").\nSuitable_for_cooking(\"glass\", \"vegetables\").\n.decl Answer()\nAnswer() :- Has_material(\"electric stove\", material), Suitable_for_cooking(\"cast iron\", dish), material != \"glass\".\nAnswer() :- Has_material(\"electric stove\", \"glass\"), Suitable_for_cooking(material, \"vegetables\"), material != \"cast iron\".\n.output Answer", "completions": [".decl Has_material(Appliance:symbol, Material:symbol)\nHas_material(\"electric stove\", \"glass\").\n.decl Suitable_for_cooking(Material:symbol, Dish:symbol)\nSuitable_for_cooking(\"cast iron\", \"steak\").\nSuitable_for_cooking(\"glass\", \"vegetables\").\n.decl Answer()\nAnswer() :- Has_material(\"electric stove\", material), Suitable_for_cooking(\"cast iron\", dish), material != \"glass\".\nAnswer() :- Has_material(\"electric stove\", \"glass\"), Suitable_for_cooking(material, \"vegetables\"), material != \"cast iron\".\n.output Answer"]}
{"id": 1564, "answer": true, "completion": ".decl Lasts(Person:symbol, Time:float)\nLasts(\"Conan the Barbarian\", 10).\n.decl Play_time(Game:symbol, Time:float)\nPlay_time(\"Call of Duty\", 3).\n.decl Answer()\nAnswer() :- Lasts(\"Conan the Barbarian\", time1), Play_time(\"Call of Duty\", time2), time1 < time2.\n.output Answer", "completions": [".decl Lasts(Person:symbol, Time:float)\nLasts(\"Conan the Barbarian\", 10).\n.decl Play_time(Game:symbol, Time:float)\nPlay_time(\"Call of Duty\", 3).\n.decl Answer()\nAnswer() :- Lasts(\"Conan the Barbarian\", time1), Play_time(\"Call of Duty\", time2), time1 < time2.\n.output Answer"]}
{"id": 1565, "answer": false, "completion": ".decl Can_grow_in(Environment:symbol, Plant:symbol)\nCan_grow_in(\"soil\", \"sesame seed\").\nCan_grow_in(\"water\", \"water plant\").\n.decl Found_in(Object:symbol, Environment:symbol)\nFound_in(\"sesame seed\", \"food\").\nFound_in(\"water plant\", \"pond\").\n.decl Answer()\nAnswer() :- Can_grow_in(environment1, \"sesame seed\"), Found_in(\"sesame seed\", environment2), environment1 = environment2.\n.output Answer", "completions": [".decl Can_grow_in(Environment:symbol, Plant:symbol)\nCan_grow_in(\"soil\", \"sesame seed\").\nCan_grow_in(\"water\", \"water plant\").\n.decl Found_in(Object:symbol, Environment:symbol)\nFound_in(\"sesame seed\", \"food\").\nFound_in(\"water plant\", \"pond\").\n.decl Answer()\nAnswer() :- Can_grow_in(environment1, \"sesame seed\"), Found_in(\"sesame seed\", environment2), environment1 = environment2.\n.output Answer"]}
{"id": 1566, "answer": false, "completion": ".decl Combines_style(Person:symbol, Style:symbol)\nCombines_style(\"Ariana Grande\", \"comfort items and high fashion\").\n.decl Answer()\nAnswer() :- Combines_style(\"Ariana Grande\", \"comfort items and high fashion\").\n.output Answer", "completions": [".decl Combines_style(Person:symbol, Style:symbol)\nCombines_style(\"Ariana Grande\", \"comfort items and high fashion\").\n.decl Answer()\nAnswer() :- Combines_style(\"Ariana Grande\", \"comfort items and high fashion\").\n.output Answer"]}
{"id": 1567, "answer": false, "completion": ".decl Had_relationship(Person1:symbol, Person2:symbol)\nHad_relationship(\"Eric Clapton\", \"Pattie Boyd\").\nHad_relationship(\"George Harrison\", \"Pattie Boyd\").\n.decl Answer()\nAnswer() :- Had_relationship(\"Eric Clapton\", person1), Had_relationship(beatle, person2), person1 != person2, Had_relationship(beatle, person1), person2 != person1.\n.output Answer", "completions": [".decl Had_relationship(Person1:symbol, Person2:symbol)\nHad_relationship(\"Eric Clapton\", \"Pattie Boyd\").\nHad_relationship(\"George Harrison\", \"Pattie Boyd\").\n.decl Answer()\nAnswer() :- Had_relationship(\"Eric Clapton\", person1), Had_relationship(beatle, person2), person1 != person2, Had_relationship(beatle, person1), person2 != person1.\n.output Answer"]}
{"id": 1568, "answer": false, "completion": ".decl Analogous(Court1:symbol, Court2:symbol)\nAnalogous(\"Supreme Court of the United States\", \"High Courts of Justice of Spain\").\n.decl Answer()\nAnswer() :- Analogous(court1, \"High Courts of Justice of Spain\"), Analogous(\"Supreme Court of the United States\", court2), court1 = court2.\n.output Answer", "completions": [".decl Analogous(Court1:symbol, Court2:symbol)\nAnalogous(\"Supreme Court of the United States\", \"High Courts of Justice of Spain\").\n.decl Answer()\nAnswer() :- Analogous(court1, \"High Courts of Justice of Spain\"), Analogous(\"Supreme Court of the United States\", court2), court1 = court2.\n.output Answer"]}
{"id": 1569, "answer": false, "completion": ".decl Knows(Person:symbol, Song:symbol)\nKnows(\"Jack Sparrow\", \"Yo Ho (A Pirate's Life for Me)\").\n.decl Answer()\nAnswer() :- Knows(\"Jack Sparrow\", song).\n.output Answer", "completions": [".decl Knows(Person:symbol, Song:symbol)\nKnows(\"Jack Sparrow\", \"Yo Ho (A Pirate's Life for Me)\").\n.decl Answer()\nAnswer() :- Knows(\"Jack Sparrow\", song).\n.output Answer"]}
{"id": 1570, "answer": false, "completion": ".decl Rides(Person:symbol, Animal:symbol)\nRides(\"Steve Irwin\", \"crocodile\").\nRides(\"Kangaroo Jack\", \"kangaroo\").\n.decl Answer()\nAnswer() :- Rides(person, \"kangaroo\"), person != \"Kangaroo Jack\".\n.output Answer", "completions": [".decl Rides(Person:symbol, Animal:symbol)\nRides(\"Steve Irwin\", \"crocodile\").\nRides(\"Kangaroo Jack\", \"kangaroo\").\n.decl Answer()\nAnswer() :- Rides(person, \"kangaroo\"), person != \"Kangaroo Jack\".\n.output Answer"]}
{"id": 1571, "answer": true, "completion": ".decl Patronage(Patron:symbol, Artist:symbol)\nPatronage(\"Lorenzo de Medici\", \"Da Vinci\").\nPatronage(\"Lorenzo de Medici\", \"Botticelli\").\n.decl Answer()\nAnswer() :- Patronage(\"Lorenzo de Medici\", artist1), Patronage(\"Lorenzo de Medici\", artist2), artist1 != artist2.\n.output Answer", "completions": [".decl Patronage(Patron:symbol, Artist:symbol)\nPatronage(\"Lorenzo de Medici\", \"Da Vinci\").\nPatronage(\"Lorenzo de Medici\", \"Botticelli\").\n.decl Answer()\nAnswer() :- Patronage(\"Lorenzo de Medici\", artist1), Patronage(\"Lorenzo de Medici\", artist2), artist1 != artist2.\n.output Answer"]}
{"id": 1572, "answer": true, "completion": ".decl Understands(Player:symbol, Game:symbol)\nUnderstands(\"Lee Sedol\", \"Go\").\nUnderstands(\"Magnus Carlsen\", \"Chess\").\n.decl Answer()\nAnswer() :- Understands(\"Lee Sedol\", game), game != \"Sicilian Defence\".\n.output Answer", "completions": [".decl Understands(Player:symbol, Game:symbol)\nUnderstands(\"Lee Sedol\", \"Go\").\nUnderstands(\"Magnus Carlsen\", \"Chess\").\n.decl Answer()\nAnswer() :- Understands(\"Lee Sedol\", game), game != \"Sicilian Defence\".\n.output Answer"]}
{"id": 1573, "answer": true, "completion": ".decl Descendant(Person:symbol, Ancestor:symbol)\nDescendant(\"Citizen of Bern Switzerland\", \"Genghis Khan\").\n.decl Answer()\nAnswer() :- Descendant(\"Citizen of Bern Switzerland\", \"Genghis Khan\").\n.output Answer", "completions": [".decl Descendant(Person:symbol, Ancestor:symbol)\nDescendant(\"Citizen of Bern Switzerland\", \"Genghis Khan\").\n.decl Answer()\nAnswer() :- Descendant(\"Citizen of Bern Switzerland\", \"Genghis Khan\").\n.output Answer"]}
{"id": 1574, "answer": true, "completion": ".decl Car_make(Model:symbol, Make:symbol)\nCar_make(\"Maruti Suzuki Baleno\", \"Maruti Suzuki\").\n.decl Fuel_efficiency(Make:symbol, Efficiency:float)\nFuel_efficiency(\"Maruti Suzuki\", 20).\n.decl Answer()\nAnswer() :- Car_make(\"Maruti Suzuki Baleno\", make), Fuel_efficiency(make, efficiency), efficiency >= 20.\n.output Answer", "completions": [".decl Car_make(Model:symbol, Make:symbol)\nCar_make(\"Maruti Suzuki Baleno\", \"Maruti Suzuki\").\n.decl Fuel_efficiency(Make:symbol, Efficiency:float)\nFuel_efficiency(\"Maruti Suzuki\", 20).\n.decl Answer()\nAnswer() :- Car_make(\"Maruti Suzuki Baleno\", make), Fuel_efficiency(make, efficiency), efficiency >= 20.\n.output Answer"]}
{"id": 1575, "answer": false, "completion": ".decl Invented_by(Product:symbol, Inventor:symbol)\nInvented_by(\"Walkman\", \"Akio Morita\").\n.decl Used_in(Kingdom:symbol, Product:symbol)\nUsed_in(\"Kingdom of Hungary\", \"Sony Walkman\").\n.decl Answer()\nAnswer() :- Invented_by(product, \"Akio Morita\"), Used_in(\"Kingdom of Hungary\", product).\n.output Answer", "completions": [".decl Invented_by(Product:symbol, Inventor:symbol)\nInvented_by(\"Walkman\", \"Akio Morita\").\n.decl Used_in(Kingdom:symbol, Product:symbol)\nUsed_in(\"Kingdom of Hungary\", \"Sony Walkman\").\n.decl Answer()\nAnswer() :- Invented_by(product, \"Akio Morita\"), Used_in(\"Kingdom of Hungary\", product).\n.output Answer"]}
{"id": 1576, "answer": false, "completion": ".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Pantheon in Paris\", \"Pantheon\").\n.decl Has_alternative_name(Place:symbol, Name:symbol)\nHas_alternative_name(\"Pantheon in Paris\", \"Sainte-Geneviève\").\n.decl Answer()\nAnswer() :- Has_name(\"Pantheon in Paris\", name), !Has_alternative_name(\"Pantheon in Paris\", name).\n.output Answer", "completions": [".decl Has_name(Place:symbol, Name:symbol)\nHas_name(\"Pantheon in Paris\", \"Pantheon\").\n.decl Has_alternative_name(Place:symbol, Name:symbol)\nHas_alternative_name(\"Pantheon in Paris\", \"Sainte-Geneviève\").\n.decl Answer()\nAnswer() :- Has_name(\"Pantheon in Paris\", name), !Has_alternative_name(\"Pantheon in Paris\", name).\n.output Answer"]}
{"id": 1577, "answer": false, "completion": ".decl No_tip_country(Country:symbol)\nNo_tip_country(\"Japan\").\nNo_tip_country(\"South Korea\").\nNo_tip_country(\"China\").\n.decl Answer()\nAnswer() :- No_tip_country(country).\n.output Answer", "completions": [".decl No_tip_country(Country:symbol)\nNo_tip_country(\"Japan\").\nNo_tip_country(\"South Korea\").\nNo_tip_country(\"China\").\n.decl Answer()\nAnswer() :- No_tip_country(country).\n.output Answer"]}
{"id": 1578, "answer": false, "completion": ".decl Can_kill(Person:symbol)\nCan_kill(\"Vice President of the United States\").\n.decl Answer()\nAnswer() :- !Can_kill(person).\n.output Answer", "completions": [".decl Can_kill(Person:symbol)\nCan_kill(\"Vice President of the United States\").\n.decl Answer()\nAnswer() :- !Can_kill(person).\n.output Answer"]}
{"id": 1579, "answer": false, "completion": ".decl Attends(Person:symbol, Event:symbol)\nAttends(\"Bruce Lee\", \"1964 University of Washington graduation ceremony\").\n.decl Answer()\nAnswer() :- !Attends(\"Bruce Lee\", \"1964 University of Washington graduation ceremony\").\n.output Answer", "completions": [".decl Attends(Person:symbol, Event:symbol)\nAttends(\"Bruce Lee\", \"1964 University of Washington graduation ceremony\").\n.decl Answer()\nAnswer() :- !Attends(\"Bruce Lee\", \"1964 University of Washington graduation ceremony\").\n.output Answer"]}
{"id": 1580, "answer": false, "completion": ".decl Can_be_used_as_weapon(Fruit:symbol)\nCan_be_used_as_weapon(\"durian\").\nCan_be_used_as_weapon(\"coconut\").\nCan_be_used_as_weapon(\"pineapple\").\n.decl Answer()\nAnswer() :- Can_be_used_as_weapon(\"jackfruit\").\n.output Answer", "completions": [".decl Can_be_used_as_weapon(Fruit:symbol)\nCan_be_used_as_weapon(\"durian\").\nCan_be_used_as_weapon(\"coconut\").\nCan_be_used_as_weapon(\"pineapple\").\n.decl Answer()\nAnswer() :- Can_be_used_as_weapon(\"jackfruit\").\n.output Answer"]}
{"id": 1581, "answer": true, "completion": ".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Napoleonic Wars\", 10).\n.decl Takes_n_days_to_complete_orbit(Planet:symbol, N_days:float)\nTakes_n_days_to_complete_orbit(\"Earth\", 365.25).\n.decl Answer()\nAnswer() :- Takes_n_days_to_complete_orbit(\"Earth\", n_days), Last_n_years(\"Napoleonic Wars\", n_years), n_days * n_years >= 365.25.\n.output Answer", "completions": [".decl Last_n_years(Event:symbol, N_years:float)\nLast_n_years(\"Napoleonic Wars\", 10).\n.decl Takes_n_days_to_complete_orbit(Planet:symbol, N_days:float)\nTakes_n_days_to_complete_orbit(\"Earth\", 365.25).\n.decl Answer()\nAnswer() :- Takes_n_days_to_complete_orbit(\"Earth\", n_days), Last_n_years(\"Napoleonic Wars\", n_years), n_days * n_years >= 365.25.\n.output Answer"]}
{"id": 1582, "answer": false, "completion": ".decl Grows_in(Climate:symbol, Plant:symbol)\nGrows_in(\"tropical\", \"Coca plant\").\nGrows_in(\"arctic\", \"reindeer moss\").\n.decl Located_in(City:symbol, Climate:symbol)\nLocated_in(\"Yakutsk\", \"arctic\").\nLocated_in(\"Rio de Janeiro\", \"tropical\").\n.decl Answer()\nAnswer() :- Grows_in(plant, \"Coca plant\"), Located_in(\"Yakutsk\", climate), Grows_in(climate, plant).\n.output Answer", "completions": [".decl Grows_in(Climate:symbol, Plant:symbol)\nGrows_in(\"tropical\", \"Coca plant\").\nGrows_in(\"arctic\", \"reindeer moss\").\n.decl Located_in(City:symbol, Climate:symbol)\nLocated_in(\"Yakutsk\", \"arctic\").\nLocated_in(\"Rio de Janeiro\", \"tropical\").\n.decl Answer()\nAnswer() :- Grows_in(plant, \"Coca plant\"), Located_in(\"Yakutsk\", climate), Grows_in(climate, plant).\n.output Answer"]}
{"id": 1583, "answer": true, "completion": ".decl Is_related(Species_A:symbol, Species_B:symbol)\nIs_related(\"saltwater crocodile\", \"crocodile\").\nIs_related(\"crocodile\", \"alligator\").\n.decl Answer()\nAnswer() :- Is_related(\"saltwater crocodile\", species), Is_related(species, \"alligator\").\n.output Answer", "completions": [".decl Is_related(Species_A:symbol, Species_B:symbol)\nIs_related(\"saltwater crocodile\", \"crocodile\").\nIs_related(\"crocodile\", \"alligator\").\n.decl Answer()\nAnswer() :- Is_related(\"saltwater crocodile\", species), Is_related(species, \"alligator\").\n.output Answer"]}
{"id": 1584, "answer": false, "completion": ".decl Saves_Soul(Person1:symbol, Person2:symbol)\nSaves_Soul(\"rabbi\", \"Jewish person\").\nSaves_Soul(\"priest\", \"Christian\").\nSaves_Soul(\"imam\", \"Muslim\").\n.decl Answer()\nAnswer() :- Saves_Soul(\"rabbi\", \"Christian\").\n.output Answer", "completions": [".decl Saves_Soul(Person1:symbol, Person2:symbol)\nSaves_Soul(\"rabbi\", \"Jewish person\").\nSaves_Soul(\"priest\", \"Christian\").\nSaves_Soul(\"imam\", \"Muslim\").\n.decl Answer()\nAnswer() :- Saves_Soul(\"rabbi\", \"Christian\").\n.output Answer"]}
{"id": 1585, "answer": false, "completion": ".decl Survives(Temperature:float, Person:symbol)\nSurvives(98.6, \"John Doe\").\nSurvives(106, \"Jane Doe\").\n.decl Answer()\nAnswer() :- Survives(temperature, \"John Smith\"), temperature <= 106.\n.output Answer", "completions": [".decl Survives(Temperature:float, Person:symbol)\nSurvives(98.6, \"John Doe\").\nSurvives(106, \"Jane Doe\").\n.decl Answer()\nAnswer() :- Survives(temperature, \"John Smith\"), temperature <= 106.\n.output Answer"]}
{"id": 1586, "answer": false, "completion": ".decl Safe_from_harm(Person:symbol)\nSafe_from_harm(\"Mayor\").\n.decl Answer()\nAnswer() :- Safe_from_harm(\"Mayor\").\n.output Answer", "completions": [".decl Safe_from_harm(Person:symbol)\nSafe_from_harm(\"Mayor\").\n.decl Answer()\nAnswer() :- Safe_from_harm(\"Mayor\").\n.output Answer"]}
{"id": 1587, "answer": false, "completion": ".decl Happens_near(Event:symbol, Location:symbol)\nHappens_near(\"Nepalese Civil War\", \"India\").\n.decl Answer()\nAnswer() :- Happens_near(\"Nepalese Civil War\", \"India\").\n.output Answer", "completions": [".decl Happens_near(Event:symbol, Location:symbol)\nHappens_near(\"Nepalese Civil War\", \"India\").\n.decl Answer()\nAnswer() :- Happens_near(\"Nepalese Civil War\", \"India\").\n.output Answer"]}
{"id": 1588, "answer": true, "completion": ".decl Takes_place(Event:symbol, Location:symbol)\nTakes_place(\"rowing competition\", \"outdoors\").\n.decl Answer()\nAnswer() :- !Takes_place(\"rowing competition\", \"indoors\").\n.output Answer", "completions": [".decl Takes_place(Event:symbol, Location:symbol)\nTakes_place(\"rowing competition\", \"outdoors\").\n.decl Answer()\nAnswer() :- !Takes_place(\"rowing competition\", \"indoors\").\n.output Answer"]}
{"id": 1589, "answer": false, "completion": ".decl Attends(Person:symbol, University:symbol)\nAttends(\"Jamie Brewer\", \"California State University\").\n.decl Military_branch(Branch:symbol)\nMilitary_branch(\"United States Naval Academy\").\n.decl Answer()\nAnswer() :- Attends(\"Jamie Brewer\", university1), Military_branch(\"United States Naval Academy\"), university1 != \"United States Naval Academy\".\n.output Answer", "completions": [".decl Attends(Person:symbol, University:symbol)\nAttends(\"Jamie Brewer\", \"California State University\").\n.decl Military_branch(Branch:symbol)\nMilitary_branch(\"United States Naval Academy\").\n.decl Answer()\nAnswer() :- Attends(\"Jamie Brewer\", university1), Military_branch(\"United States Naval Academy\"), university1 != \"United States Naval Academy\".\n.output Answer"]}
{"id": 1590, "answer": false, "completion": ".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Ceres\", 9.39e+20).\nHas_mass(\"New York City\", 8.399e+11).\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"Ceres\", 939.4).\nHas_size(\"New York City\", 468.9).\n.decl Answer()\nAnswer() :- Has_mass(\"Ceres\", mass1), Has_size(\"Ceres\", size1), Has_mass(\"New York City\", mass2), Has_size(\"New York City\", size2), mass1/(size1^3) > mass2/(size2^3).\n.output Answer", "completions": [".decl Has_mass(Object:symbol, Mass:float)\nHas_mass(\"Ceres\", 9.39e+20).\nHas_mass(\"New York City\", 8.399e+11).\n.decl Has_size(Object:symbol, Size:float)\nHas_size(\"Ceres\", 939.4).\nHas_size(\"New York City\", 468.9).\n.decl Answer()\nAnswer() :- Has_mass(\"Ceres\", mass1), Has_size(\"Ceres\", size1), Has_mass(\"New York City\", mass2), Has_size(\"New York City\", size2), mass1/(size1^3) > mass2/(size2^3).\n.output Answer"]}
{"id": 1591, "answer": false, "completion": ".decl Wins_award(Person:symbol, Award:symbol)\nWins_award(\"Walt Disney\", \"Academy Award\").\n.decl Peers(Person:symbol, Peer:symbol)\nPeers(\"Walt Disney\", \"Universal Studios\").\nPeers(\"Walt Disney\", \"Six Flags\").\nPeers(\"Walt Disney\", \"SeaWorld\").\n.decl Wins_more_awards(Person1:symbol, Person2:symbol)\nWins_more_awards(person1, person2) :- Wins_award(person1, award1), Wins_award(person2, award2), award1 = award2, person1 != person2.\n.decl Answer()\nAnswer() :- Wins_award(\"Walt Disney\", award), Peers(\"Walt Disney\", peer), Wins_award(peer, award2), Wins_more_awards(\"Walt Disney\", peer), award > award2.\n.output Answer", "completions": [".decl Wins_award(Person:symbol, Award:symbol)\nWins_award(\"Walt Disney\", \"Academy Award\").\n.decl Peers(Person:symbol, Peer:symbol)\nPeers(\"Walt Disney\", \"Universal Studios\").\nPeers(\"Walt Disney\", \"Six Flags\").\nPeers(\"Walt Disney\", \"SeaWorld\").\n.decl Wins_more_awards(Person1:symbol, Person2:symbol)\nWins_more_awards(person1, person2) :- Wins_award(person1, award1), Wins_award(person2, award2), award1 = award2, person1 != person2.\n.decl Answer()\nAnswer() :- Wins_award(\"Walt Disney\", award), Peers(\"Walt Disney\", peer), Wins_award(peer, award2), Wins_more_awards(\"Walt Disney\", peer), award > award2.\n.output Answer"]}
{"id": 1592, "answer": false, "completion": ".decl Sold_out(Event:symbol, Venue:symbol)\nSold_out(\"Billy Joel concert\", \"Madison Square Garden\").\nSold_out(\"Elton John concert\", \"Astana Arena\").\n.decl Answer()\nAnswer() :- Sold_out(\"Billy Joel concert\", venue1), Sold_out(\"Elton John concert\", \"Astana Arena\"), venue1 = \"Astana Arena\".\n.output Answer", "completions": [".decl Sold_out(Event:symbol, Venue:symbol)\nSold_out(\"Billy Joel concert\", \"Madison Square Garden\").\nSold_out(\"Elton John concert\", \"Astana Arena\").\n.decl Answer()\nAnswer() :- Sold_out(\"Billy Joel concert\", venue1), Sold_out(\"Elton John concert\", \"Astana Arena\"), venue1 = \"Astana Arena\".\n.output Answer"]}
{"id": 1593, "answer": false, "completion": ".decl Is_part_of(Region_A:symbol, Region_B:symbol)\nIs_part_of(\"Mesopotamia\", \"Middle East\").\nIs_part_of(\"China\", \"East Asia\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Mesopotamia\", region), !Is_part_of(region, \"China\").\n.output Answer", "completions": [".decl Is_part_of(Region_A:symbol, Region_B:symbol)\nIs_part_of(\"Mesopotamia\", \"Middle East\").\nIs_part_of(\"China\", \"East Asia\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Mesopotamia\", region), !Is_part_of(region, \"China\").\n.output Answer"]}
{"id": 1594, "answer": true, "completion": ".decl Is_martyr(Person:symbol)\nIs_martyr(\"St. Stephen\").\n.decl Excommunicated(Person:symbol)\nExcommunicated(\"St. Joan of Arc\").\n.decl Answer()\nAnswer() :- Is_martyr(person), !Excommunicated(person).\n.output Answer", "completions": [".decl Is_martyr(Person:symbol)\nIs_martyr(\"St. Stephen\").\n.decl Excommunicated(Person:symbol)\nExcommunicated(\"St. Joan of Arc\").\n.decl Answer()\nAnswer() :- Is_martyr(person), !Excommunicated(person).\n.output Answer"]}
{"id": 1595, "answer": true, "completion": ".decl Requires(Job:symbol, Requirement:symbol)\nRequires(\"district management\", \"car\").\n.decl Answer()\nAnswer() :- Requires(\"district management\", \"car\").\n.output Answer", "completions": [".decl Requires(Job:symbol, Requirement:symbol)\nRequires(\"district management\", \"car\").\n.decl Answer()\nAnswer() :- Requires(\"district management\", \"car\").\n.output Answer"]}
{"id": 1596, "answer": true, "completion": ".decl Can_break(Substance:symbol, Object:symbol)\nCan_break(\"nitric acid\", \"marble\").\nCan_break(\"nitric acid\", \"glass\").\n.decl Answer()\nAnswer() :- Can_break(\"nitric acid\", \"Louvre\").\n.output Answer", "completions": [".decl Can_break(Substance:symbol, Object:symbol)\nCan_break(\"nitric acid\", \"marble\").\nCan_break(\"nitric acid\", \"glass\").\n.decl Answer()\nAnswer() :- Can_break(\"nitric acid\", \"Louvre\").\n.output Answer"]}
{"id": 1597, "answer": false, "completion": ".decl Provides_data(Insect:symbol, Field:symbol)\nProvides_data(\"hornet\", \"oceanography\").\n.decl Answer()\nAnswer() :- Provides_data(\"hornet\", field).\n.output Answer", "completions": [".decl Provides_data(Insect:symbol, Field:symbol)\nProvides_data(\"hornet\", \"oceanography\").\n.decl Answer()\nAnswer() :- Provides_data(\"hornet\", field).\n.output Answer"]}
{"id": 1598, "answer": false, "completion": ".decl Wears(Person:symbol, Brand:symbol, Event:symbol)\nWears(\"Jackie Kennedy\", \"Chanel\", \"inauguration\").\n.decl Answer()\nAnswer() :- Wears(\"Jackie Kennedy\", brand, \"inauguration\"), brand != \"Dolce & Gabbana\".\n.output Answer", "completions": [".decl Wears(Person:symbol, Brand:symbol, Event:symbol)\nWears(\"Jackie Kennedy\", \"Chanel\", \"inauguration\").\n.decl Answer()\nAnswer() :- Wears(\"Jackie Kennedy\", brand, \"inauguration\"), brand != \"Dolce & Gabbana\".\n.output Answer"]}
{"id": 1599, "answer": false, "completion": ".decl Depends_on(A:symbol, B:symbol)\nDepends_on(\"toilet paper\", \"loggers\").\n.decl Answer()\nAnswer() :- !Depends_on(\"toilet paper\", \"loggers\").\n.output Answer", "completions": [".decl Depends_on(A:symbol, B:symbol)\nDepends_on(\"toilet paper\", \"loggers\").\n.decl Answer()\nAnswer() :- !Depends_on(\"toilet paper\", \"loggers\").\n.output Answer"]}
{"id": 1600, "answer": true, "completion": ".decl Powerlifting(Person:symbol)\nPowerlifting(\"Arnold Schwarzenegger\").\nPowerlifting(\"Hafþór Björnsson\").\n.decl Peak_strength(Person:symbol, Strength:float)\nPeak_strength(\"Arnold Schwarzenegger\", 500).\nPeak_strength(\"Hafþór Björnsson\", 1000).\n.decl Answer()\nAnswer() :- Powerlifting(\"Arnold Schwarzenegger\"), Powerlifting(\"Hafþór Björnsson\"), Peak_strength(\"Arnold Schwarzenegger\", strength1), Peak_strength(\"Hafþór Björnsson\", strength2), strength1 >= strength2.\n.output Answer", "completions": [".decl Powerlifting(Person:symbol)\nPowerlifting(\"Arnold Schwarzenegger\").\nPowerlifting(\"Hafþór Björnsson\").\n.decl Peak_strength(Person:symbol, Strength:float)\nPeak_strength(\"Arnold Schwarzenegger\", 500).\nPeak_strength(\"Hafþór Björnsson\", 1000).\n.decl Answer()\nAnswer() :- Powerlifting(\"Arnold Schwarzenegger\"), Powerlifting(\"Hafþór Björnsson\"), Peak_strength(\"Arnold Schwarzenegger\", strength1), Peak_strength(\"Hafþór Björnsson\", strength2), strength1 >= strength2.\n.output Answer"]}
{"id": 1601, "answer": false, "completion": ".decl Contains_number(Location:symbol, Number:float)\nContains_number(\"church\", 666).\n.decl Answer()\nAnswer() :- Contains_number(location, number), number = 666.\n.output Answer", "completions": [".decl Contains_number(Location:symbol, Number:float)\nContains_number(\"church\", 666).\n.decl Answer()\nAnswer() :- Contains_number(location, number), number = 666.\n.output Answer"]}
{"id": 1602, "answer": false, "completion": ".decl Reigns(Person:symbol, Start_year:float, End_year:float)\nReigns(\"Elizabeth I of England\", 1558, 1603).\n.decl Premieres(Play:symbol, Year:float)\nPremieres(\"Dido, Queen of Carthage\", 1594).\n.decl Answer()\nAnswer() :- Reigns(\"Elizabeth I of England\", start_year, end_year), Premieres(\"Dido, Queen of Carthage\", year), year >= start_year, year <= end_year.\n.output Answer", "completions": [".decl Reigns(Person:symbol, Start_year:float, End_year:float)\nReigns(\"Elizabeth I of England\", 1558, 1603).\n.decl Premieres(Play:symbol, Year:float)\nPremieres(\"Dido, Queen of Carthage\", 1594).\n.decl Answer()\nAnswer() :- Reigns(\"Elizabeth I of England\", start_year, end_year), Premieres(\"Dido, Queen of Carthage\", year), year >= start_year, year <= end_year.\n.output Answer"]}
{"id": 1603, "answer": true, "completion": ".decl Endangered_species(Species:symbol)\nEndangered_species(\"saltwater crocodile\").\nEndangered_species(\"European otter\").\n.decl Endangered_level(Species:symbol, Level:float)\nEndangered_level(\"saltwater crocodile\", 3).\nEndangered_level(\"European otter\", 2).\n.decl Answer()\nAnswer() :- Endangered_level(\"saltwater crocodile\", level1), Endangered_level(\"European otter\", level2), level1 < level2.\n.output Answer", "completions": [".decl Endangered_species(Species:symbol)\nEndangered_species(\"saltwater crocodile\").\nEndangered_species(\"European otter\").\n.decl Endangered_level(Species:symbol, Level:float)\nEndangered_level(\"saltwater crocodile\", 3).\nEndangered_level(\"European otter\", 2).\n.decl Answer()\nAnswer() :- Endangered_level(\"saltwater crocodile\", level1), Endangered_level(\"European otter\", level2), level1 < level2.\n.output Answer"]}
{"id": 1604, "answer": true, "completion": ".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"giant panda\", \"black and white\").\nHas_color(\"yin yang\", \"black and white\").\n.decl Answer()\nAnswer() :- Has_color(\"giant panda\", color), Has_color(\"yin yang\", color2), color != color2.\n.output Answer", "completions": [".decl Has_color(Animal:symbol, Color:symbol)\nHas_color(\"giant panda\", \"black and white\").\nHas_color(\"yin yang\", \"black and white\").\n.decl Answer()\nAnswer() :- Has_color(\"giant panda\", color), Has_color(\"yin yang\", color2), color != color2.\n.output Answer"]}
{"id": 1605, "answer": true, "completion": ".decl Reigns(Person:symbol, Start_year:float, End_year:float)\nReigns(\"Elizabeth II\", 1952, 2021).\n.decl Answer()\nAnswer() :- Reigns(\"Elizabeth II\", start_year, end_year), start_year <= 1991, end_year >= 1991.\n.output Answer", "completions": [".decl Reigns(Person:symbol, Start_year:float, End_year:float)\nReigns(\"Elizabeth II\", 1952, 2021).\n.decl Answer()\nAnswer() :- Reigns(\"Elizabeth II\", start_year, end_year), start_year <= 1991, end_year >= 1991.\n.output Answer"]}
{"id": 1606, "answer": false, "completion": ".decl Treats(Disease:symbol, Medication:symbol)\nTreats(\"narcolepsy\", \"Modafinil\").\n.decl Has_effect(Effect:symbol, Medication:symbol)\nHas_effect(\"increased wakefulness\", \"Modafinil\").\n.decl Answer()\nAnswer() :- Treats(disease, \"suicide\"), Has_effect(\"increased wakefulness\", medication).\n.output Answer", "completions": [".decl Treats(Disease:symbol, Medication:symbol)\nTreats(\"narcolepsy\", \"Modafinil\").\n.decl Has_effect(Effect:symbol, Medication:symbol)\nHas_effect(\"increased wakefulness\", \"Modafinil\").\n.decl Answer()\nAnswer() :- Treats(disease, \"suicide\"), Has_effect(\"increased wakefulness\", medication).\n.output Answer"]}
{"id": 1607, "answer": false, "completion": ".decl Uses(Object:symbol, Tool:symbol)\nUses(\"spaghetti\", \"fork\").\n.decl Answer()\nAnswer() :- !Uses(\"spaghetti\", \"fork\").\n.output Answer", "completions": [".decl Uses(Object:symbol, Tool:symbol)\nUses(\"spaghetti\", \"fork\").\n.decl Answer()\nAnswer() :- !Uses(\"spaghetti\", \"fork\").\n.output Answer"]}
{"id": 1608, "answer": false, "completion": ".decl Born_in_country(Person:symbol, Country:symbol)\nBorn_in_country(\"Arnold Schwarzenegger\", \"Austria\").\n.decl Naturalized_citizen(Person:symbol)\nNaturalized_citizen(\"Arnold Schwarzenegger\").\n.decl Answer()\nAnswer() :- Born_in_country(\"Arnold Schwarzenegger\", \"United States\"), !Naturalized_citizen(\"Arnold Schwarzenegger\").\n.output Answer", "completions": [".decl Born_in_country(Person:symbol, Country:symbol)\nBorn_in_country(\"Arnold Schwarzenegger\", \"Austria\").\n.decl Naturalized_citizen(Person:symbol)\nNaturalized_citizen(\"Arnold Schwarzenegger\").\n.decl Answer()\nAnswer() :- Born_in_country(\"Arnold Schwarzenegger\", \"United States\"), !Naturalized_citizen(\"Arnold Schwarzenegger\").\n.output Answer"]}
{"id": 1609, "answer": false, "completion": ".decl Belongs_to_religion(Person:symbol, Religion:symbol)\nBelongs_to_religion(\"Barack Obama\", \"Christianity\").\nBelongs_to_religion(\"Malcolm X\", \"Islam\").\nBelongs_to_religion(\"Richard Dawkins\", \"atheism\").\n.decl Percentage_in_community(Religion:symbol, Percentage:float)\nPercentage_in_community(\"Christianity\", 80).\nPercentage_in_community(\"atheism\", 10).\nPercentage_in_community(\"Islam\", 10).\n.decl Answer()\nAnswer() :- Belongs_to_religion(person, \"Christianity\"), Percentage_in_community(\"Christianity\", percentage1), Belongs_to_religion(person2, \"atheism\"), Percentage_in_community(\"atheism\", percentage2), percentage2 > percentage1, person != person2.\n.output Answer", "completions": [".decl Belongs_to_religion(Person:symbol, Religion:symbol)\nBelongs_to_religion(\"Barack Obama\", \"Christianity\").\nBelongs_to_religion(\"Malcolm X\", \"Islam\").\nBelongs_to_religion(\"Richard Dawkins\", \"atheism\").\n.decl Percentage_in_community(Religion:symbol, Percentage:float)\nPercentage_in_community(\"Christianity\", 80).\nPercentage_in_community(\"atheism\", 10).\nPercentage_in_community(\"Islam\", 10).\n.decl Answer()\nAnswer() :- Belongs_to_religion(person, \"Christianity\"), Percentage_in_community(\"Christianity\", percentage1), Belongs_to_religion(person2, \"atheism\"), Percentage_in_community(\"atheism\", percentage2), percentage2 > percentage1, person != person2.\n.output Answer"]}
{"id": 1610, "answer": false, "completion": ".decl Film_director(Film:symbol, Director:symbol)\nFilm_director(\"Saving Private Ryan\", \"Steven Spielberg\").\n.decl Film_year(Film:symbol, Year:float)\nFilm_year(\"Saving Private Ryan\", 1998).\n.decl Film_setting(Film:symbol, Setting:symbol)\nFilm_setting(\"Saving Private Ryan\", \"World War II\").\nFilm_setting(\"War Horse\", \"World War I\").\n.decl Answer()\nAnswer() :- Film_director(film1, \"Steven Spielberg\"), Film_year(film1, year1), Film_setting(film1, setting1), Film_setting(\"War Horse\", setting2), year1 > 2011, setting1 > setting2.\n.output Answer", "completions": [".decl Film_director(Film:symbol, Director:symbol)\nFilm_director(\"Saving Private Ryan\", \"Steven Spielberg\").\n.decl Film_year(Film:symbol, Year:float)\nFilm_year(\"Saving Private Ryan\", 1998).\n.decl Film_setting(Film:symbol, Setting:symbol)\nFilm_setting(\"Saving Private Ryan\", \"World War II\").\nFilm_setting(\"War Horse\", \"World War I\").\n.decl Answer()\nAnswer() :- Film_director(film1, \"Steven Spielberg\"), Film_year(film1, year1), Film_setting(film1, setting1), Film_setting(\"War Horse\", setting2), year1 > 2011, setting1 > setting2.\n.output Answer"]}
{"id": 1611, "answer": false, "completion": ".decl Has_season(Animal:symbol, Season:symbol)\nHas_season(\"bear\", \"autumn\").\n.decl Legal_to_hunt(Animal:symbol)\nLegal_to_hunt(\"bear\").\n.decl Answer()\nAnswer() :- Has_season(\"bear\", \"autumn\"), Legal_to_hunt(\"bear\").\n.output Answer", "completions": [".decl Has_season(Animal:symbol, Season:symbol)\nHas_season(\"bear\", \"autumn\").\n.decl Legal_to_hunt(Animal:symbol)\nLegal_to_hunt(\"bear\").\n.decl Answer()\nAnswer() :- Has_season(\"bear\", \"autumn\"), Legal_to_hunt(\"bear\").\n.output Answer"]}
{"id": 1612, "answer": true, "completion": ".decl Triggers(Show:symbol, Condition:symbol)\nTriggers(\"Rick and Morty\", \"existential crisis\").\nTriggers(\"Bojack Horseman\", \"depression\").\n.decl Has_parental_history(Person:symbol, History:symbol)\nHas_parental_history(\"child1\", \"alcoholism\").\nHas_parental_history(\"child2\", \"no alcoholism\").\n.decl Answer()\nAnswer() :- Triggers(\"Rick and Morty\", condition), Has_parental_history(child, \"alcoholism\").\n.output Answer", "completions": [".decl Triggers(Show:symbol, Condition:symbol)\nTriggers(\"Rick and Morty\", \"existential crisis\").\nTriggers(\"Bojack Horseman\", \"depression\").\n.decl Has_parental_history(Person:symbol, History:symbol)\nHas_parental_history(\"child1\", \"alcoholism\").\nHas_parental_history(\"child2\", \"no alcoholism\").\n.decl Answer()\nAnswer() :- Triggers(\"Rick and Morty\", condition), Has_parental_history(child, \"alcoholism\").\n.output Answer"]}
{"id": 1613, "answer": true, "completion": ".decl Knows(Person:symbol, Concept:symbol)\nKnows(\"American wheelchair users\", \"ADA\").\n.decl Answer()\nAnswer() :- Knows(\"American wheelchair users\", \"ADA\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Concept:symbol)\nKnows(\"American wheelchair users\", \"ADA\").\n.decl Answer()\nAnswer() :- Knows(\"American wheelchair users\", \"ADA\").\n.output Answer"]}
{"id": 1614, "answer": true, "completion": ".decl Conducts(Activity:symbol, Location:symbol, Season:symbol)\nConducts(\"astrophotography\", \"Sweden\", \"winter\").\n.decl Answer()\nAnswer() :- Conducts(\"astrophotography\", \"Sweden\", season), season != \"summer\".\n.output Answer", "completions": [".decl Conducts(Activity:symbol, Location:symbol, Season:symbol)\nConducts(\"astrophotography\", \"Sweden\", \"winter\").\n.decl Answer()\nAnswer() :- Conducts(\"astrophotography\", \"Sweden\", season), season != \"summer\".\n.output Answer"]}
{"id": 1615, "answer": false, "completion": ".decl Birth_order(Person:symbol, Order:float)\nBirth_order(\"Jane Austen\", 7).\n.decl Siblings(Person_A:symbol, Person_B:symbol)\nSiblings(\"Jane Austen\", \"George Austen\").\nSiblings(\"Jane Austen\", \"Edward Austen\").\nSiblings(\"Jane Austen\", \"Henry Austen\").\nSiblings(\"Jane Austen\", \"Cassandra Austen\").\nSiblings(\"Jane Austen\", \"Francis Austen\").\nSiblings(\"Jane Austen\", \"Charles Austen\").\nSiblings(\"Jane Austen\", \"Elizabeth Austen\").\nSiblings(\"Jane Austen\", \"James Austen\").\nSiblings(\"Jane Austen\", \"Henry Thomas Austen\").\n.decl Answer()\nAnswer() :- Siblings(\"Jane Austen\", sibling), Birth_order(sibling, order), order < 7.\n.output Answer", "completions": [".decl Birth_order(Person:symbol, Order:float)\nBirth_order(\"Jane Austen\", 7).\n.decl Siblings(Person_A:symbol, Person_B:symbol)\nSiblings(\"Jane Austen\", \"George Austen\").\nSiblings(\"Jane Austen\", \"Edward Austen\").\nSiblings(\"Jane Austen\", \"Henry Austen\").\nSiblings(\"Jane Austen\", \"Cassandra Austen\").\nSiblings(\"Jane Austen\", \"Francis Austen\").\nSiblings(\"Jane Austen\", \"Charles Austen\").\nSiblings(\"Jane Austen\", \"Elizabeth Austen\").\nSiblings(\"Jane Austen\", \"James Austen\").\nSiblings(\"Jane Austen\", \"Henry Thomas Austen\").\n.decl Answer()\nAnswer() :- Siblings(\"Jane Austen\", sibling), Birth_order(sibling, order), order < 7.\n.output Answer"]}
{"id": 1616, "answer": false, "completion": ".decl Rank(Person:symbol, Rank:symbol)\nRank(\"Gomer Pyle\", \"private\").\nRank(\"Lieutenant\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Rank(\"Gomer Pyle\", \"private\"), Rank(\"Lieutenant\", \"lieutenant\").\n.output Answer", "completions": [".decl Rank(Person:symbol, Rank:symbol)\nRank(\"Gomer Pyle\", \"private\").\nRank(\"Lieutenant\", \"lieutenant\").\n.decl Answer()\nAnswer() :- Rank(\"Gomer Pyle\", \"private\"), Rank(\"Lieutenant\", \"lieutenant\").\n.output Answer"]}
{"id": 1617, "answer": false, "completion": ".decl Can_survive(Environment:symbol, Virus:symbol)\nCan_survive(\"Earth\", \"Herpes simplex virus\").\nCan_survive(\"Mars\", \"Herpes simplex virus\").\n.decl Answer()\nAnswer() :- Can_survive(\"Venus\", \"Herpes simplex virus\"), !.\n.output Answer", "completions": [".decl Can_survive(Environment:symbol, Virus:symbol)\nCan_survive(\"Earth\", \"Herpes simplex virus\").\nCan_survive(\"Mars\", \"Herpes simplex virus\").\n.decl Answer()\nAnswer() :- Can_survive(\"Venus\", \"Herpes simplex virus\"), !.\n.output Answer"]}
{"id": 1618, "answer": false, "completion": ".decl Is_related(Language1:symbol, Language2:symbol)\nIs_related(\"Pig Latin\", \"Latin\").\n.decl Answer()\nAnswer() :- Is_related(\"Pig Latin\", language), Is_related(language, \"Latin\").\n.output Answer", "completions": [".decl Is_related(Language1:symbol, Language2:symbol)\nIs_related(\"Pig Latin\", \"Latin\").\n.decl Answer()\nAnswer() :- Is_related(\"Pig Latin\", language), Is_related(language, \"Latin\").\n.output Answer"]}
{"id": 1619, "answer": false, "completion": ".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Matt Damon\", \"spiders\").\n.decl Has_experience(Person:symbol, Experience:symbol)\nHas_experience(\"Matt Damon\", \"skydiving\").\n.decl Answer()\nAnswer() :- Has_fear(\"Matt Damon\", fear), fear != \"parachuting\".\nAnswer() :- Has_experience(\"Matt Damon\", experience), experience != \"parachuting\".\n.output Answer", "completions": [".decl Has_fear(Person:symbol, Fear:symbol)\nHas_fear(\"Matt Damon\", \"spiders\").\n.decl Has_experience(Person:symbol, Experience:symbol)\nHas_experience(\"Matt Damon\", \"skydiving\").\n.decl Answer()\nAnswer() :- Has_fear(\"Matt Damon\", fear), fear != \"parachuting\".\nAnswer() :- Has_experience(\"Matt Damon\", experience), experience != \"parachuting\".\n.output Answer"]}
{"id": 1620, "answer": true, "completion": ".decl Happens_during(Event:symbol, Time_period:symbol)\nHappens_during(\"pandemic\", \"2020-2021\").\n.decl Considered(Action:symbol, Opinion:symbol)\nConsidered(\"door to door advertising\", \"inconsiderate\").\n.decl Answer()\nAnswer() :- Happens_during(\"pandemic\", time_period), Considered(\"door to door advertising\", opinion), opinion = \"inconsiderate\".\n.output Answer", "completions": [".decl Happens_during(Event:symbol, Time_period:symbol)\nHappens_during(\"pandemic\", \"2020-2021\").\n.decl Considered(Action:symbol, Opinion:symbol)\nConsidered(\"door to door advertising\", \"inconsiderate\").\n.decl Answer()\nAnswer() :- Happens_during(\"pandemic\", time_period), Considered(\"door to door advertising\", opinion), opinion = \"inconsiderate\".\n.output Answer"]}
{"id": 1621, "answer": true, "completion": ".decl Used_calendar(Person:symbol, Calendar:symbol)\nUsed_calendar(\"Ivan the Terrible\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Used_calendar(\"Ivan the Terrible\", calendar), calendar != \"Byzantine calendar\".\n.output Answer", "completions": [".decl Used_calendar(Person:symbol, Calendar:symbol)\nUsed_calendar(\"Ivan the Terrible\", \"Julian calendar\").\n.decl Answer()\nAnswer() :- Used_calendar(\"Ivan the Terrible\", calendar), calendar != \"Byzantine calendar\".\n.output Answer"]}
{"id": 1622, "answer": false, "completion": ".decl Uses_ingredient(Recipe:symbol, Ingredient:symbol)\nUses_ingredient(\"delicious recipe\", \"onion\").\n.decl Answer()\nAnswer() :- Uses_ingredient(recipe, \"onion\").\n.output Answer", "completions": [".decl Uses_ingredient(Recipe:symbol, Ingredient:symbol)\nUses_ingredient(\"delicious recipe\", \"onion\").\n.decl Answer()\nAnswer() :- Uses_ingredient(recipe, \"onion\").\n.output Answer"]}
{"id": 1623, "answer": true, "completion": ".decl Keeps_in(Owner:symbol, Object:symbol)\nKeeps_in(\"The Doctor\", \"TARDIS\").\n.decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"TARDIS\", \"everywhere and everywhen\").\nLocated_in(\"The Doctor's childhood home\", \"Gallifrey\").\n.decl Answer()\nAnswer() :- Keeps_in(\"The Doctor\", object), Located_in(object, \"The Doctor's childhood home\").\n.output Answer", "completions": [".decl Keeps_in(Owner:symbol, Object:symbol)\nKeeps_in(\"The Doctor\", \"TARDIS\").\n.decl Located_in(Object:symbol, Location:symbol)\nLocated_in(\"TARDIS\", \"everywhere and everywhen\").\nLocated_in(\"The Doctor's childhood home\", \"Gallifrey\").\n.decl Answer()\nAnswer() :- Keeps_in(\"The Doctor\", object), Located_in(object, \"The Doctor's childhood home\").\n.output Answer"]}
{"id": 1624, "answer": true, "completion": ".decl President(Person:symbol, Country:symbol, Year:float)\nPresident(\"Francois Mitterrand\", \"France\", 1981).\nPresident(\"Barack Obama\", \"United States\", 2009).\n.decl Answer()\nAnswer() :- President(\"Francois Mitterrand\", country1, year1), President(\"Barack Obama\", country2, year2), country1 = country2, year1 = year2.\n.output Answer", "completions": [".decl President(Person:symbol, Country:symbol, Year:float)\nPresident(\"Francois Mitterrand\", \"France\", 1981).\nPresident(\"Barack Obama\", \"United States\", 2009).\n.decl Answer()\nAnswer() :- President(\"Francois Mitterrand\", country1, year1), President(\"Barack Obama\", country2, year2), country1 = country2, year1 = year2.\n.output Answer"]}
{"id": 1625, "answer": false, "completion": ".decl Used_skill(Person:symbol, Skill:symbol)\nUsed_skill(\"Neanderthal\", \"stone tool making\").\nUsed_skill(\"Neanderthal\", \"fire making\").\n.decl Answer()\n!Answer() :- Used_skill(\"Neanderthal\", \"arithmetic\").\n.output Answer", "completions": [".decl Used_skill(Person:symbol, Skill:symbol)\nUsed_skill(\"Neanderthal\", \"stone tool making\").\nUsed_skill(\"Neanderthal\", \"fire making\").\n.decl Answer()\n!Answer() :- Used_skill(\"Neanderthal\", \"arithmetic\").\n.output Answer"]}
{"id": 1626, "answer": false, "completion": ".decl Requires(Item:symbol, Activity:symbol)\nRequires(\"coal\", \"parachuting\").\n.decl Answer()\nAnswer() :- Requires(item, \"parachuting\"), item != \"coal\".\n.output Answer", "completions": [".decl Requires(Item:symbol, Activity:symbol)\nRequires(\"coal\", \"parachuting\").\n.decl Answer()\nAnswer() :- Requires(item, \"parachuting\"), item != \"coal\".\n.output Answer"]}
{"id": 1627, "answer": true, "completion": ".decl Fixes(Watchmaker:symbol, Brand:symbol)\nFixes(\"watchmaker\", \"Rolex\").\nFixes(\"watchmaker\", \"Omega\").\n.decl Answer()\nAnswer() :- Fixes(\"watchmaker\", brand), brand = \"Apple Watch\".\n.output Answer", "completions": [".decl Fixes(Watchmaker:symbol, Brand:symbol)\nFixes(\"watchmaker\", \"Rolex\").\nFixes(\"watchmaker\", \"Omega\").\n.decl Answer()\nAnswer() :- Fixes(\"watchmaker\", brand), brand = \"Apple Watch\".\n.output Answer"]}
{"id": 1628, "answer": true, "completion": ".decl Can_use_language(Animal:symbol, Language:symbol)\nCan_use_language(\"human\", \"English\").\nCan_use_language(\"human\", \"Spanish\").\nCan_use_language(\"pig\", \"pig latin\").\n.decl Answer()\nAnswer() :- Can_use_language(\"pig\", \"pig latin\"), !Can_use_language(\"pig\", language).\n.output Answer", "completions": [".decl Can_use_language(Animal:symbol, Language:symbol)\nCan_use_language(\"human\", \"English\").\nCan_use_language(\"human\", \"Spanish\").\nCan_use_language(\"pig\", \"pig latin\").\n.decl Answer()\nAnswer() :- Can_use_language(\"pig\", \"pig latin\"), !Can_use_language(\"pig\", language).\n.output Answer"]}
{"id": 1629, "answer": false, "completion": ".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Michael Jordan\", \"University of North Carolina\").\n.decl Works_as(Person:symbol, Job:symbol, Country:symbol)\nWorks_as(\"Gordon Ramsay\", \"professional cook\", \"United States\").\n.decl Answer()\nAnswer() :- Graduates(\"Michael Jordan\", university), Works_as(\"Gordon Ramsay\", \"professional cook\", country), university = \"University of North Carolina\", country = \"United States\".\n.output Answer", "completions": [".decl Graduates(Person:symbol, University:symbol)\nGraduates(\"Michael Jordan\", \"University of North Carolina\").\n.decl Works_as(Person:symbol, Job:symbol, Country:symbol)\nWorks_as(\"Gordon Ramsay\", \"professional cook\", \"United States\").\n.decl Answer()\nAnswer() :- Graduates(\"Michael Jordan\", university), Works_as(\"Gordon Ramsay\", \"professional cook\", country), university = \"University of North Carolina\", country = \"United States\".\n.output Answer"]}
{"id": 1630, "answer": false, "completion": ".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Jacques Duèze\", \"Thomas Aquinas\").\nKnows(\"Thomas Aquinas\", \"William of Ockham\").\nKnows(\"William of Ockham\", \"John Duns Scotus\").\nKnows(\"Richard Dawkins\", \"Christopher Hitchens\").\n.decl Answer()\nAnswer() :- Knows(\"Jacques Duèze\", person1), Knows(person1, person2), Knows(person2, \"Richard Dawkins\").\n.output Answer", "completions": [".decl Knows(Person_A:symbol, Person_B:symbol)\nKnows(\"Jacques Duèze\", \"Thomas Aquinas\").\nKnows(\"Thomas Aquinas\", \"William of Ockham\").\nKnows(\"William of Ockham\", \"John Duns Scotus\").\nKnows(\"Richard Dawkins\", \"Christopher Hitchens\").\n.decl Answer()\nAnswer() :- Knows(\"Jacques Duèze\", person1), Knows(person1, person2), Knows(person2, \"Richard Dawkins\").\n.output Answer"]}
{"id": 1631, "answer": false, "completion": ".decl Helps(Control:symbol, Farmer:symbol, Pest:symbol)\nHelps(\"spiders\", \"eggplant farmers\", \"parasites\").\n.decl Answer()\nAnswer() :- Helps(\"spiders\", \"eggplant farmers\", \"parasites\").\n.output Answer", "completions": [".decl Helps(Control:symbol, Farmer:symbol, Pest:symbol)\nHelps(\"spiders\", \"eggplant farmers\", \"parasites\").\n.decl Answer()\nAnswer() :- Helps(\"spiders\", \"eggplant farmers\", \"parasites\").\n.output Answer"]}
{"id": 1632, "answer": false, "completion": ".decl Depends_on(Industry:symbol, Resource:symbol)\nDepends_on(\"butter industry\", \"cows\").\n.decl Answer()\n!Answer() :- Depends_on(\"butter industry\", resource), !Depends_on(\"cows\", resource).\n.output Answer", "completions": [".decl Depends_on(Industry:symbol, Resource:symbol)\nDepends_on(\"butter industry\", \"cows\").\n.decl Answer()\n!Answer() :- Depends_on(\"butter industry\", resource), !Depends_on(\"cows\", resource).\n.output Answer"]}
{"id": 1633, "answer": true, "completion": ".decl Mouth_capacity(Animal:symbol, Capacity:float)\nMouth_capacity(\"chipmunk\", 20).\n.decl Has_n_chocolate_chips(Object:symbol, N_chips:float)\nHas_n_chocolate_chips(\"chocolate chip cookie\", 10).\n.decl Answer()\nAnswer() :- Mouth_capacity(\"chipmunk\", capacity), Has_n_chocolate_chips(\"chocolate chip cookie\", n_chips), n_chips <= capacity/5.\n.output Answer", "completions": [".decl Mouth_capacity(Animal:symbol, Capacity:float)\nMouth_capacity(\"chipmunk\", 20).\n.decl Has_n_chocolate_chips(Object:symbol, N_chips:float)\nHas_n_chocolate_chips(\"chocolate chip cookie\", 10).\n.decl Answer()\nAnswer() :- Mouth_capacity(\"chipmunk\", capacity), Has_n_chocolate_chips(\"chocolate chip cookie\", n_chips), n_chips <= capacity/5.\n.output Answer"]}
{"id": 1634, "answer": true, "completion": ".decl Passes_through(Station:symbol, N_people:float)\nPasses_through(\"30th Street Station\", 100000).\n.decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Dorton Arena\", 7500).\n.decl Answer()\nAnswer() :- Passes_through(station, n_people), Has_capacity(\"Dorton Arena\", capacity), n_people <= capacity.\n.output Answer", "completions": [".decl Passes_through(Station:symbol, N_people:float)\nPasses_through(\"30th Street Station\", 100000).\n.decl Has_capacity(Venue:symbol, Capacity:float)\nHas_capacity(\"Dorton Arena\", 7500).\n.decl Answer()\nAnswer() :- Passes_through(station, n_people), Has_capacity(\"Dorton Arena\", capacity), n_people <= capacity.\n.output Answer"]}
{"id": 1635, "answer": false, "completion": ".decl Contains_vitamin(Disease:symbol, Vitamin:symbol)\nContains_vitamin(\"Hypervitaminosis D\", \"vitamin D\").\n.decl Safe_to_consume(Herb:symbol)\nSafe_to_consume(\"basil\").\n.decl Answer()\nAnswer() :- Contains_vitamin(disease, \"vitamin D\"), Safe_to_consume(herb), !.\n.output Answer", "completions": [".decl Contains_vitamin(Disease:symbol, Vitamin:symbol)\nContains_vitamin(\"Hypervitaminosis D\", \"vitamin D\").\n.decl Safe_to_consume(Herb:symbol)\nSafe_to_consume(\"basil\").\n.decl Answer()\nAnswer() :- Contains_vitamin(disease, \"vitamin D\"), Safe_to_consume(herb), !.\n.output Answer"]}
{"id": 1636, "answer": false, "completion": ".decl Spoken_in(Language:symbol, Country:symbol)\nSpoken_in(\"Cantonese\", \"China\").\nSpoken_in(\"Japanese\", \"Japan\").\n.decl Answer()\nAnswer() :- Spoken_in(\"Cantonese\", country1), Spoken_in(\"Japanese\", country2), country1 = country2.\n.output Answer", "completions": [".decl Spoken_in(Language:symbol, Country:symbol)\nSpoken_in(\"Cantonese\", \"China\").\nSpoken_in(\"Japanese\", \"Japan\").\n.decl Answer()\nAnswer() :- Spoken_in(\"Cantonese\", country1), Spoken_in(\"Japanese\", country2), country1 = country2.\n.output Answer"]}
{"id": 1637, "answer": true, "completion": ".decl Knows(Person:symbol, Topic:symbol)\nKnows(\"Amy Winehouse\", \"music\").\n.decl Answer()\nAnswer() :- Knows(\"Amy Winehouse\", \"Brexit\"), !.\n.output Answer", "completions": [".decl Knows(Person:symbol, Topic:symbol)\nKnows(\"Amy Winehouse\", \"music\").\n.decl Answer()\nAnswer() :- Knows(\"Amy Winehouse\", \"Brexit\"), !.\n.output Answer"]}
{"id": 1638, "answer": false, "completion": ".decl Has_price(Item:symbol, Price:float)\nHas_price(\"Blue diamond\", 3.93e7).\nHas_price(\"Red diamond\", 2.26e7).\nHas_price(\"Pink diamond\", 1.19e7).\n.decl Answer()\nAnswer() :- Has_price(\"Blue diamond\", price1), Has_price(item2, price2), price2 > price1, item2 != \"Blue diamond\".\nAnswer() :- !Answer().\n.output Answer", "completions": [".decl Has_price(Item:symbol, Price:float)\nHas_price(\"Blue diamond\", 3.93e7).\nHas_price(\"Red diamond\", 2.26e7).\nHas_price(\"Pink diamond\", 1.19e7).\n.decl Answer()\nAnswer() :- Has_price(\"Blue diamond\", price1), Has_price(item2, price2), price2 > price1, item2 != \"Blue diamond\".\nAnswer() :- !Answer().\n.output Answer"]}
{"id": 1639, "answer": false, "completion": ".decl Was_written_before(Book1:symbol, Book2:symbol)\nWas_written_before(\"The Canterbury Tales\", \"One Thousand and One Nights\").\n.decl Written_in_year(Book:symbol, Year:float)\nWritten_in_year(\"The Canterbury Tales\", 1400).\nWritten_in_year(\"One Thousand and One Nights\", 1200).\n.decl Answer()\nAnswer() :- Was_written_before(book1, \"One Thousand and One Nights\"), Written_in_year(book1, year1), Written_in_year(\"The Canterbury Tales\", year2), year1 < year2.\n.output Answer", "completions": [".decl Was_written_before(Book1:symbol, Book2:symbol)\nWas_written_before(\"The Canterbury Tales\", \"One Thousand and One Nights\").\n.decl Written_in_year(Book:symbol, Year:float)\nWritten_in_year(\"The Canterbury Tales\", 1400).\nWritten_in_year(\"One Thousand and One Nights\", 1200).\n.decl Answer()\nAnswer() :- Was_written_before(book1, \"One Thousand and One Nights\"), Written_in_year(book1, year1), Written_in_year(\"The Canterbury Tales\", year2), year1 < year2.\n.output Answer"]}
{"id": 1640, "answer": false, "completion": ".decl Testable_on(Subject:symbol, Technology:symbol)\nTestable_on(\"cnidarians\", \"virtual reality\").\nTestable_on(\"humans\", \"virtual reality\").\n.decl Answer()\nAnswer() :- Testable_on(\"cnidarians\", technology), Testable_on(\"humans\", technology), \"cnidarians\" < \"humans\".\n.output Answer", "completions": [".decl Testable_on(Subject:symbol, Technology:symbol)\nTestable_on(\"cnidarians\", \"virtual reality\").\nTestable_on(\"humans\", \"virtual reality\").\n.decl Answer()\nAnswer() :- Testable_on(\"cnidarians\", technology), Testable_on(\"humans\", technology), \"cnidarians\" < \"humans\".\n.output Answer"]}
{"id": 1641, "answer": true, "completion": ".decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"Little Women\", \"Louisa May Alcott\").\n.decl Read_by(Group:symbol, Book:symbol)\nRead_by(\"veterans of the civil war\", \"Gone with the Wind\").\n.decl Answer()\nAnswer() :- Written_by(\"Little Women\", author), Read_by(\"veterans of the civil war\", book), book = \"Little Women\", author != \"Louisa May Alcott\".\nAnswer() :- Written_by(\"Little Women\", author), Read_by(\"veterans of the civil war\", book), book != \"Little Women\", author = \"Louisa May Alcott\".\n.output Answer", "completions": [".decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"Little Women\", \"Louisa May Alcott\").\n.decl Read_by(Group:symbol, Book:symbol)\nRead_by(\"veterans of the civil war\", \"Gone with the Wind\").\n.decl Answer()\nAnswer() :- Written_by(\"Little Women\", author), Read_by(\"veterans of the civil war\", book), book = \"Little Women\", author != \"Louisa May Alcott\".\nAnswer() :- Written_by(\"Little Women\", author), Read_by(\"veterans of the civil war\", book), book != \"Little Women\", author = \"Louisa May Alcott\".\n.output Answer"]}
{"id": 1642, "answer": false, "completion": ".decl Explodes_if_not_upside_down(Animal:symbol)\nExplodes_if_not_upside_down(\"sloth\").\n.decl Answer()\nAnswer() :- !Explodes_if_not_upside_down(\"sloth\").\n.output Answer", "completions": [".decl Explodes_if_not_upside_down(Animal:symbol)\nExplodes_if_not_upside_down(\"sloth\").\n.decl Answer()\nAnswer() :- !Explodes_if_not_upside_down(\"sloth\").\n.output Answer"]}
{"id": 1643, "answer": true, "completion": ".decl Pursues_hobby(Person:symbol, Hobby:symbol)\nPursues_hobby(\"birdwatcher\", \"birdwatching\").\n.decl Takes_place(Event:symbol, Location:symbol)\nTakes_place(\"Philadelphia Eagles game\", \"Lincoln Financial Field\").\n.decl Answer()\nAnswer() :- Pursues_hobby(\"birdwatcher\", hobby), Takes_place(\"Philadelphia Eagles game\", location), hobby != \"watching sports\", hobby != \"tailgating\".\n.output Answer", "completions": [".decl Pursues_hobby(Person:symbol, Hobby:symbol)\nPursues_hobby(\"birdwatcher\", \"birdwatching\").\n.decl Takes_place(Event:symbol, Location:symbol)\nTakes_place(\"Philadelphia Eagles game\", \"Lincoln Financial Field\").\n.decl Answer()\nAnswer() :- Pursues_hobby(\"birdwatcher\", hobby), Takes_place(\"Philadelphia Eagles game\", location), hobby != \"watching sports\", hobby != \"tailgating\".\n.output Answer"]}
{"id": 1644, "answer": true, "completion": ".decl Is_threatened_by(Life_form:symbol, Threat:symbol)\nIs_threatened_by(\"fungi\", \"copper pigment\").\n.decl Answer()\nAnswer() :- Is_threatened_by(\"fungi\", threat), threat = \"copper pigment\".\n.output Answer", "completions": [".decl Is_threatened_by(Life_form:symbol, Threat:symbol)\nIs_threatened_by(\"fungi\", \"copper pigment\").\n.decl Answer()\nAnswer() :- Is_threatened_by(\"fungi\", threat), threat = \"copper pigment\".\n.output Answer"]}
{"id": 1645, "answer": true, "completion": ".decl Dam_nearby(Land:symbol)\nDam_nearby(\"forest\").\nDam_nearby(\"riverbank\").\n.decl Suffers(Land:symbol)\nSuffers(land) :- Dam_nearby(dam_land), land != dam_land.\n.decl Answer()\nAnswer() :- Suffers(land).\n.output Answer", "completions": [".decl Dam_nearby(Land:symbol)\nDam_nearby(\"forest\").\nDam_nearby(\"riverbank\").\n.decl Suffers(Land:symbol)\nSuffers(land) :- Dam_nearby(dam_land), land != dam_land.\n.decl Answer()\nAnswer() :- Suffers(land).\n.output Answer"]}
{"id": 1646, "answer": false, "completion": ".decl Has_property(Material:symbol, Property:symbol)\nHas_property(\"quartz\", \"hardness\").\nHas_property(\"quartz\", \"resistance to high temperatures\").\nHas_property(\"quartz\", \"piezoelectricity\").\n.decl Answer()\nAnswer() :- !Has_property(\"quartz\", \"photosynthesis\"), !Has_property(\"quartz\", \"oxygen production\"), Has_property(\"quartz\", \"hardness\"), Has_property(\"quartz\", \"resistance to high temperatures\"), Has_property(\"quartz\", \"piezoelectricity\").\n.output Answer", "completions": [".decl Has_property(Material:symbol, Property:symbol)\nHas_property(\"quartz\", \"hardness\").\nHas_property(\"quartz\", \"resistance to high temperatures\").\nHas_property(\"quartz\", \"piezoelectricity\").\n.decl Answer()\nAnswer() :- !Has_property(\"quartz\", \"photosynthesis\"), !Has_property(\"quartz\", \"oxygen production\"), Has_property(\"quartz\", \"hardness\"), Has_property(\"quartz\", \"resistance to high temperatures\"), Has_property(\"quartz\", \"piezoelectricity\").\n.output Answer"]}
{"id": 1647, "answer": true, "completion": ".decl Has_popularity(Game:symbol, Popularity:symbol)\nHas_popularity(\"Illuminati card game\", \"popular\").\n.decl Answer()\nAnswer() :- Has_popularity(\"Illuminati card game\", popularity), popularity = \"popular\".\n.output Answer", "completions": [".decl Has_popularity(Game:symbol, Popularity:symbol)\nHas_popularity(\"Illuminati card game\", \"popular\").\n.decl Answer()\nAnswer() :- Has_popularity(\"Illuminati card game\", popularity), popularity = \"popular\".\n.output Answer"]}
{"id": 1648, "answer": true, "completion": ".decl Fits_in_container(Object:symbol, Container:symbol)\nFits_in_container(\"Bing\", \"basket\").\n.decl Answer()\nAnswer() :- Fits_in_container(\"Bing\", container), container = \"basket\".\n.output Answer", "completions": [".decl Fits_in_container(Object:symbol, Container:symbol)\nFits_in_container(\"Bing\", \"basket\").\n.decl Answer()\nAnswer() :- Fits_in_container(\"Bing\", container), container = \"basket\".\n.output Answer"]}
{"id": 1649, "answer": true, "completion": ".decl Operational_in_time(Place:symbol, Time:symbol)\nOperational_in_time(\"Parc des Princes\", \"June 2020\").\n.decl Answer()\nAnswer() :- Operational_in_time(\"Parc des Princes\", \"June 2020\").\n.output Answer", "completions": [".decl Operational_in_time(Place:symbol, Time:symbol)\nOperational_in_time(\"Parc des Princes\", \"June 2020\").\n.decl Answer()\nAnswer() :- Operational_in_time(\"Parc des Princes\", \"June 2020\").\n.output Answer"]}
{"id": 1650, "answer": false, "completion": ".decl Sponsors_Company(Company:symbol, Event:symbol)\nSponsors_Company(\"Chick-fil-A\", \"football game\").\nSponsors_Company(\"McDonald's\", \"Pride parade\").\nSponsors_Company(\"Nike\", \"marathon\").\n.decl Answer()\nAnswer() :- !Sponsors_Company(\"Chick-fil-A\", \"Pride parade\").\n.output Answer", "completions": [".decl Sponsors_Company(Company:symbol, Event:symbol)\nSponsors_Company(\"Chick-fil-A\", \"football game\").\nSponsors_Company(\"McDonald's\", \"Pride parade\").\nSponsors_Company(\"Nike\", \"marathon\").\n.decl Answer()\nAnswer() :- !Sponsors_Company(\"Chick-fil-A\", \"Pride parade\").\n.output Answer"]}
{"id": 1651, "answer": true, "completion": ".decl Borders(Country_A:symbol, Country_B:symbol)\nBorders(\"USA\", \"Canada\").\n.decl Located_in(Location:symbol, Region:symbol)\nLocated_in(\"Great Lakes\", \"North America\").\n.decl Answer()\nAnswer() :- Located_in(\"Great Lakes\", region), Borders(\"USA\", country), Located_in(country, region2), region != region2.\n.output Answer", "completions": [".decl Borders(Country_A:symbol, Country_B:symbol)\nBorders(\"USA\", \"Canada\").\n.decl Located_in(Location:symbol, Region:symbol)\nLocated_in(\"Great Lakes\", \"North America\").\n.decl Answer()\nAnswer() :- Located_in(\"Great Lakes\", region), Borders(\"USA\", country), Located_in(country, region2), region != region2.\n.output Answer"]}
{"id": 1652, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Jon Brower Minnoch\", \"obesity\").\nHas_condition(\"Karen Carpenter\", \"anorexia nervosa\").\n.decl Answer()\nAnswer() :- Has_condition(\"Jon Brower Minnoch\", condition), condition != \"anorexia nervosa\".\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"Jon Brower Minnoch\", \"obesity\").\nHas_condition(\"Karen Carpenter\", \"anorexia nervosa\").\n.decl Answer()\nAnswer() :- Has_condition(\"Jon Brower Minnoch\", condition), condition != \"anorexia nervosa\".\n.output Answer"]}
{"id": 1653, "answer": false, "completion": ".decl Signed(Document:symbol, Person:symbol)\nSigned(\"Magna Carta\", \"King John\").\n.decl Answer()\nAnswer() :- Signed(\"Magna Carta\", \"Larry King\").\n.output Answer", "completions": [".decl Signed(Document:symbol, Person:symbol)\nSigned(\"Magna Carta\", \"King John\").\n.decl Answer()\nAnswer() :- Signed(\"Magna Carta\", \"Larry King\").\n.output Answer"]}
{"id": 1654, "answer": false, "completion": ".decl Name_origin(Object:symbol, Origin:symbol)\nName_origin(\"Phobos\", \"Greek mythology\").\nName_origin(\"Pavor\", \"Roman mythology\").\n.decl Similarity_score(Object1:symbol, Object2:symbol, Score:float)\nSimilarity_score(\"Phobos\", \"Pavor\", 0.8).\n.decl Answer()\nAnswer() :- Name_origin(\"Phobos\", origin1), Name_origin(\"Pavor\", origin2), Similarity_score(\"Phobos\", \"Pavor\", score), origin1 = origin2, score >= 0.5.\n.output Answer", "completions": [".decl Name_origin(Object:symbol, Origin:symbol)\nName_origin(\"Phobos\", \"Greek mythology\").\nName_origin(\"Pavor\", \"Roman mythology\").\n.decl Similarity_score(Object1:symbol, Object2:symbol, Score:float)\nSimilarity_score(\"Phobos\", \"Pavor\", 0.8).\n.decl Answer()\nAnswer() :- Name_origin(\"Phobos\", origin1), Name_origin(\"Pavor\", origin2), Similarity_score(\"Phobos\", \"Pavor\", score), origin1 = origin2, score >= 0.5.\n.output Answer"]}
{"id": 1655, "answer": true, "completion": ".decl Is_predator(Animal:symbol)\nIs_predator(\"honey badger\").\n.decl Is_prey(Animal:symbol)\nIs_prey(\"snake\").\n.decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"honey badger\", \"snake\").\n.decl Answer()\nAnswer() :- Is_prey(animal), Eats(predator, animal), Is_predator(predator).\n.output Answer", "completions": [".decl Is_predator(Animal:symbol)\nIs_predator(\"honey badger\").\n.decl Is_prey(Animal:symbol)\nIs_prey(\"snake\").\n.decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"honey badger\", \"snake\").\n.decl Answer()\nAnswer() :- Is_prey(animal), Eats(predator, animal), Is_predator(predator).\n.output Answer"]}
{"id": 1656, "answer": true, "completion": ".decl Has_body_part(Animal:symbol, Body_part:symbol)\nHas_body_part(\"honey badger\", \"claws\").\nHas_body_part(\"honey badger\", \"teeth\").\nHas_body_part(\"hyena\", \"paws\").\nHas_body_part(\"hyena\", \"jaws\").\n.decl Answer()\nAnswer() :- Has_body_part(\"honey badger\", body_part), !Has_body_part(\"hyena\", body_part).\nAnswer() :- Has_body_part(\"hyena\", body_part), !Has_body_part(\"honey badger\", body_part).\n.output Answer", "completions": [".decl Has_body_part(Animal:symbol, Body_part:symbol)\nHas_body_part(\"honey badger\", \"claws\").\nHas_body_part(\"honey badger\", \"teeth\").\nHas_body_part(\"hyena\", \"paws\").\nHas_body_part(\"hyena\", \"jaws\").\n.decl Answer()\nAnswer() :- Has_body_part(\"honey badger\", body_part), !Has_body_part(\"hyena\", body_part).\nAnswer() :- Has_body_part(\"hyena\", body_part), !Has_body_part(\"honey badger\", body_part).\n.output Answer"]}
{"id": 1657, "answer": true, "completion": ".decl Knows(Person:symbol, Skill:symbol)\nKnows(\"Noah\", \"boat building\").\nKnows(\"Noah\", \"animal husbandry\").\n.decl Answer()\nAnswer() :- Knows(\"Noah\", \"boat building\"), Knows(\"Noah\", \"buoyancy\").\n.output Answer", "completions": [".decl Knows(Person:symbol, Skill:symbol)\nKnows(\"Noah\", \"boat building\").\nKnows(\"Noah\", \"animal husbandry\").\n.decl Answer()\nAnswer() :- Knows(\"Noah\", \"boat building\"), Knows(\"Noah\", \"buoyancy\").\n.output Answer"]}
{"id": 1658, "answer": true, "completion": ".decl Hostile_to(Country:symbol, Target:symbol)\nHostile_to(\"Iran\", \"Israel\").\nHostile_to(\"Syria\", \"Israel\").\nHostile_to(\"Lebanon\", \"Israel\").\nHostile_to(\"Palestine\", \"Israel\").\n.decl Answer()\nAnswer() :- Hostile_to(country, \"Israel\"), country =~ \"Muslim.*\".\n.output Answer", "completions": [".decl Hostile_to(Country:symbol, Target:symbol)\nHostile_to(\"Iran\", \"Israel\").\nHostile_to(\"Syria\", \"Israel\").\nHostile_to(\"Lebanon\", \"Israel\").\nHostile_to(\"Palestine\", \"Israel\").\n.decl Answer()\nAnswer() :- Hostile_to(country, \"Israel\"), country =~ \"Muslim.*\".\n.output Answer"]}
{"id": 1659, "answer": false, "completion": ".decl Used_social_media(Person:symbol, Platform:symbol)\nUsed_social_media(\"Kim Il-sung\", \"Facebook\").\nUsed_social_media(\"Kim Il-sung\", \"Twitter\").\n.decl Answer()\nAnswer() :- Used_social_media(\"Kim Il-sung\", platform), platform != \"LinkedIn\".\n.output Answer", "completions": [".decl Used_social_media(Person:symbol, Platform:symbol)\nUsed_social_media(\"Kim Il-sung\", \"Facebook\").\nUsed_social_media(\"Kim Il-sung\", \"Twitter\").\n.decl Answer()\nAnswer() :- Used_social_media(\"Kim Il-sung\", platform), platform != \"LinkedIn\".\n.output Answer"]}
{"id": 1660, "answer": false, "completion": ".decl Beneficial_to_health(Person:symbol, Substance:symbol)\nBeneficial_to_health(\"Jack Kerouac\", \"alcohol\").\n.decl Answer()\nAnswer() :- Beneficial_to_health(\"Jack Kerouac\", \"ethanol\").\n.output Answer", "completions": [".decl Beneficial_to_health(Person:symbol, Substance:symbol)\nBeneficial_to_health(\"Jack Kerouac\", \"alcohol\").\n.decl Answer()\nAnswer() :- Beneficial_to_health(\"Jack Kerouac\", \"ethanol\").\n.output Answer"]}
{"id": 1661, "answer": false, "completion": ".decl Can_play_sport(Person:symbol, Sport:symbol)\nCan_play_sport(\"Michael Jackson\", \"football\").\nCan_play_sport(\"Tito Jackson\", \"basketball\").\nCan_play_sport(\"Jackie Jackson\", \"baseball\").\nCan_play_sport(\"Marlon Jackson\", \"tennis\").\nCan_play_sport(\"Jermaine Jackson\", \"boxing\").\n.decl Answer()\nAnswer() :- Can_play_sport(\"Michael Jackson\", sport), Can_play_sport(\"Tito Jackson\", sport), Can_play_sport(\"Jackie Jackson\", sport), Can_play_sport(\"Marlon Jackson\", sport), Can_play_sport(\"Jermaine Jackson\", sport), Sport=\"rugby\".\n.output Answer", "completions": [".decl Can_play_sport(Person:symbol, Sport:symbol)\nCan_play_sport(\"Michael Jackson\", \"football\").\nCan_play_sport(\"Tito Jackson\", \"basketball\").\nCan_play_sport(\"Jackie Jackson\", \"baseball\").\nCan_play_sport(\"Marlon Jackson\", \"tennis\").\nCan_play_sport(\"Jermaine Jackson\", \"boxing\").\n.decl Answer()\nAnswer() :- Can_play_sport(\"Michael Jackson\", sport), Can_play_sport(\"Tito Jackson\", sport), Can_play_sport(\"Jackie Jackson\", sport), Can_play_sport(\"Marlon Jackson\", sport), Can_play_sport(\"Jermaine Jackson\", sport), Sport=\"rugby\".\n.output Answer"]}
{"id": 1662, "answer": true, "completion": ".decl Destroys(Organism_A:symbol, Organism_B:symbol)\nDestroys(\"human stomach\", \"bee\").\n.decl Answer()\nAnswer() :- Destroys(\"human stomach\", \"bee\").\n.output Answer", "completions": [".decl Destroys(Organism_A:symbol, Organism_B:symbol)\nDestroys(\"human stomach\", \"bee\").\n.decl Answer()\nAnswer() :- Destroys(\"human stomach\", \"bee\").\n.output Answer"]}
{"id": 1663, "answer": true, "completion": ".decl Knows(Person:symbol, Field:symbol)\nKnows(\"Elon Musk\", \"physics\").\n.decl Interest(Person:symbol, Field:symbol)\nInterest(\"Elon Musk\", \"astrology\").\n.decl Answer()\nAnswer() :- Interest(\"Elon Musk\", field1), Knows(\"Elon Musk\", field2), field1 = \"astrology\", field2 = \"physics\".\n.output Answer", "completions": [".decl Knows(Person:symbol, Field:symbol)\nKnows(\"Elon Musk\", \"physics\").\n.decl Interest(Person:symbol, Field:symbol)\nInterest(\"Elon Musk\", \"astrology\").\n.decl Answer()\nAnswer() :- Interest(\"Elon Musk\", field1), Knows(\"Elon Musk\", field2), field1 = \"astrology\", field2 = \"physics\".\n.output Answer"]}
{"id": 1664, "answer": true, "completion": ".decl Has_longevity(Show:symbol, Years:float)\nHas_longevity(\"Coast to Coast AM\", 33).\nHas_longevity(\"Rush Limbaugh Show\", 32).\n.decl Answer()\nAnswer() :- Has_longevity(\"Coast to Coast AM\", years1), Has_longevity(\"Rush Limbaugh Show\", years2), years1 > years2.\n.output Answer", "completions": [".decl Has_longevity(Show:symbol, Years:float)\nHas_longevity(\"Coast to Coast AM\", 33).\nHas_longevity(\"Rush Limbaugh Show\", 32).\n.decl Answer()\nAnswer() :- Has_longevity(\"Coast to Coast AM\", years1), Has_longevity(\"Rush Limbaugh Show\", years2), years1 > years2.\n.output Answer"]}
{"id": 1665, "answer": false, "completion": ".decl Used_for_label(Animal:symbol, Label:symbol)\nUsed_for_label(\"eagle\", \"Eagle Scouts\").\nUsed_for_label(\"bear\", \"Cub Scouts\").\nUsed_for_label(\"bear\", \"Brownies\").\n.decl Answer()\nAnswer() :- Used_for_label(\"eagle\", label), Used_for_label(\"bear\", label).\n.output Answer", "completions": [".decl Used_for_label(Animal:symbol, Label:symbol)\nUsed_for_label(\"eagle\", \"Eagle Scouts\").\nUsed_for_label(\"bear\", \"Cub Scouts\").\nUsed_for_label(\"bear\", \"Brownies\").\n.decl Answer()\nAnswer() :- Used_for_label(\"eagle\", label), Used_for_label(\"bear\", label).\n.output Answer"]}
{"id": 1666, "answer": false, "completion": ".decl Ignored_bulletin(Person:symbol, Bulletin:symbol)\nIgnored_bulletin(\"parachuting amateurs\", \"hurricane force winds\").\n.decl Has_wind_speed(Bulletin:symbol, Wind_speed:float)\nHas_wind_speed(\"hurricane force winds\", 74).\n.decl Answer()\nAnswer() :- Ignored_bulletin(person, bulletin), Has_wind_speed(bulletin, wind_speed), wind_speed < 74.\n.output Answer", "completions": [".decl Ignored_bulletin(Person:symbol, Bulletin:symbol)\nIgnored_bulletin(\"parachuting amateurs\", \"hurricane force winds\").\n.decl Has_wind_speed(Bulletin:symbol, Wind_speed:float)\nHas_wind_speed(\"hurricane force winds\", 74).\n.decl Answer()\nAnswer() :- Ignored_bulletin(person, bulletin), Has_wind_speed(bulletin, wind_speed), wind_speed < 74.\n.output Answer"]}
{"id": 1667, "answer": true, "completion": ".decl Care_instructions(Material:symbol, Instructions:symbol)\nCare_instructions(\"wool\", \"hand wash only\").\n.decl Answer()\nAnswer() :- Care_instructions(\"wool\", \"hand wash only\").\n.output Answer", "completions": [".decl Care_instructions(Material:symbol, Instructions:symbol)\nCare_instructions(\"wool\", \"hand wash only\").\n.decl Answer()\nAnswer() :- Care_instructions(\"wool\", \"hand wash only\").\n.output Answer"]}
{"id": 1668, "answer": false, "completion": ".decl Memorizes(Person:symbol, Fraction:float)\nMemorizes(\"John\", 0.6).\nMemorizes(\"Jane\", 0.7).\nMemorizes(\"Bob\", 0.55).\nMemorizes(\"Alice\", 0.5).\n.decl Answer()\nAnswer() :- Memorizes(person, fraction), fraction > 0.5, count(person, N), count(person2, N2), N > N2.\n.output Answer", "completions": [".decl Memorizes(Person:symbol, Fraction:float)\nMemorizes(\"John\", 0.6).\nMemorizes(\"Jane\", 0.7).\nMemorizes(\"Bob\", 0.55).\nMemorizes(\"Alice\", 0.5).\n.decl Answer()\nAnswer() :- Memorizes(person, fraction), fraction > 0.5, count(person, N), count(person2, N2), N > N2.\n.output Answer"]}
{"id": 1669, "answer": true, "completion": ".decl Has_time_period(Event:symbol, Time_period:symbol)\nHas_time_period(\"age of dinosaurs\", \"Mesozoic era\").\nHas_time_period(\"history of Europe\", \"Middle Ages\").\nHas_time_period(\"history of Europe\", \"Renaissance\").\nHas_time_period(\"history of Europe\", \"Enlightenment\").\nHas_time_period(\"history of Europe\", \"Industrial Revolution\").\n.decl Answer()\nAnswer() :- Has_time_period(\"age of dinosaurs\", time_period), !Has_time_period(\"history of Europe\", time_period).\n.output Answer", "completions": [".decl Has_time_period(Event:symbol, Time_period:symbol)\nHas_time_period(\"age of dinosaurs\", \"Mesozoic era\").\nHas_time_period(\"history of Europe\", \"Middle Ages\").\nHas_time_period(\"history of Europe\", \"Renaissance\").\nHas_time_period(\"history of Europe\", \"Enlightenment\").\nHas_time_period(\"history of Europe\", \"Industrial Revolution\").\n.decl Answer()\nAnswer() :- Has_time_period(\"age of dinosaurs\", time_period), !Has_time_period(\"history of Europe\", time_period).\n.output Answer"]}
{"id": 1670, "answer": false, "completion": ".decl Died_painfully(Person:symbol)\nDied_painfully(\"Florence Nightingale\").\n.decl Died_at_age(Person:symbol, Age:float)\nDied_at_age(\"Florence Nightingale\", 90).\nDied_at_age(\"Saint Peter\", 64).\n.decl Answer()\nAnswer() :- Died_painfully(\"Florence Nightingale\"), Died_at_age(\"Florence Nightingale\", age1), Died_at_age(\"Saint Peter\", age2), age1 > age2.\n.output Answer", "completions": [".decl Died_painfully(Person:symbol)\nDied_painfully(\"Florence Nightingale\").\n.decl Died_at_age(Person:symbol, Age:float)\nDied_at_age(\"Florence Nightingale\", 90).\nDied_at_age(\"Saint Peter\", 64).\n.decl Answer()\nAnswer() :- Died_painfully(\"Florence Nightingale\"), Died_at_age(\"Florence Nightingale\", age1), Died_at_age(\"Saint Peter\", age2), age1 > age2.\n.output Answer"]}
{"id": 1671, "answer": false, "completion": ".decl Is_vulnerable_to(Thing:symbol, Attack:symbol)\nIs_vulnerable_to(\"firewall\", \"hacking\").\n.decl Can_destroy(Tool:symbol, Object:symbol)\nCan_destroy(\"hammer\", \"glass\").\n.decl Answer()\nAnswer() :- Is_vulnerable_to(\"firewall\", attack), Can_destroy(tool, \"firewall\"), tool = \"hammer\", Attack != \"hacking\".\n.output Answer", "completions": [".decl Is_vulnerable_to(Thing:symbol, Attack:symbol)\nIs_vulnerable_to(\"firewall\", \"hacking\").\n.decl Can_destroy(Tool:symbol, Object:symbol)\nCan_destroy(\"hammer\", \"glass\").\n.decl Answer()\nAnswer() :- Is_vulnerable_to(\"firewall\", attack), Can_destroy(tool, \"firewall\"), tool = \"hammer\", Attack != \"hacking\".\n.output Answer"]}
{"id": 1672, "answer": false, "completion": ".decl Has_n_items(Person:symbol, N_items:float)\nHas_n_items(\"Martin Luther\", 95).\n.decl Days_in_time_period(Time_period:symbol, N_days:float)\nDays_in_time_period(\"half a year\", 182.5).\n.decl Answer()\nAnswer() :- Has_n_items(\"Martin Luther\", n_items), Days_in_time_period(\"half a year\", n_days), n_items <= n_days/2.\n.output Answer", "completions": [".decl Has_n_items(Person:symbol, N_items:float)\nHas_n_items(\"Martin Luther\", 95).\n.decl Days_in_time_period(Time_period:symbol, N_days:float)\nDays_in_time_period(\"half a year\", 182.5).\n.decl Answer()\nAnswer() :- Has_n_items(\"Martin Luther\", n_items), Days_in_time_period(\"half a year\", n_days), n_items <= n_days/2.\n.output Answer"]}
{"id": 1673, "answer": true, "completion": ".decl Is_Roman_numeral(Symbol:symbol)\nIs_Roman_numeral(\"I\").\nIs_Roman_numeral(\"V\").\nIs_Roman_numeral(\"X\").\nIs_Roman_numeral(\"L\").\nIs_Roman_numeral(\"C\").\nIs_Roman_numeral(\"D\").\nIs_Roman_numeral(\"M\").\n.decl Has_n_options(Box:symbol, N_options:float)\nHas_n_options(\"A1\", 9).\nHas_n_options(\"A2\", 9).\nHas_n_options(\"A3\", 9).\nHas_n_options(\"A4\", 9).\nHas_n_options(\"A5\", 9).\nHas_n_options(\"A6\", 9).\nHas_n_options(\"A7\", 9).\nHas_n_options(\"A8\", 9).\nHas_n_options(\"A9\", 9).\nHas_n_options(\"B1\", 9).\nHas_n_options(\"B2\", 9).\nHas_n_options(\"B3\", 9).\nHas_n_options(\"B4\", 9).\nHas_n_options(\"B5\", 9).\nHas_n_options(\"B6\", 9).\nHas_n_options(\"B7\", 9).\nHas_n_options(\"B8\", 9).\nHas_n_options(\"B9\", 9).\nHas_n_options(\"C1\", 9).\nHas_n_options(\"C2\", 9).\nHas_n_options(\"C3\", 9).\nHas_n_options(\"C4\", 9).\nHas_n_options(\"C5\", 9).\nHas_n_options(\"C6\", 9).\nHas_n_options(\"C7\", 9).\nHas_n_options(\"C8\", 9).\nHas_n_options(\"C9\", 9).\nHas_n_options(\"D1\", 9).\nHas_n_options(\"D2\", 9).\nHas_n_options(\"D3\", 9).\nHas_n_options(\"D4\", 9).\nHas_n_options(\"D5\", 9).\nHas_n_options(\"D6\", 9).\nHas_n_options(\"D7\", 9).\nHas_n_options(\"D8\", 9).\nHas_n_options(\"D9\", 9).\nHas_n_options(\"E1\", 9).\nHas_n_options(\"E2\", 9).\nHas_n_options(\"E3\", 9).\nHas_n_options(\"E4\", 9).\nHas_n_options(\"E5\", 9).\nHas_n_options(\"E6\", 9).\nHas_n_options(\"E7\", 9).\nHas_n_options(\"E8\", 9).\nHas_n_options(\"E9\", 9).\nHas_n_options(\"F1\", 9).\nHas_n_options(\"F2\", 9).\nHas_n_options(\"F3\", 9).\nHas_n_options(\"F4\", 9).\nHas_n_options(\"F5\", 9).\nHas_n_options(\"F6\", 9).\nHas_n_options(\"F7\", 9).\nHas_n_options(\"F8\", 9).\nHas_n_options(\"F9\", 9).\nHas_n_options(\"G1\", 9).\nHas_n_options(\"G2\", 9).\nHas_n_options(\"G3\", 9).\nHas_n_options(\"G4\", 9).\nHas_n_options(\"G5\", 9).\nHas_n_options(\"G6\", 9).\nHas_n_options(\"G7\", 9).\nHas_n_options(\"G8\", 9).\nHas_n_options(\"G9\", 9).\nHas_n_options(\"H1\", 9).\nHas_n_options(\"H2\", 9).\nHas_n_options(\"H3\", 9).\nHas_n_options(\"H4\", 9).\nHas_n_options(\"H5\", 9).\nHas_n_options(\"H6\", 9).\nHas_n_options(\"H7\", 9).\nHas_n_options(\"H8\", 9).\nHas_n_options(\"H9\", 9).\nHas_n_options(\"I1\", 9).\nHas_n_options(\"I2\", 9).\nHas_n_options(\"I3\", 9).\nHas_n_options(\"I4\", 9).\nHas_n_options(\"I5\", 9).\nHas_n_options(\"I6\", 9).\nHas_n_options(\"I7\", 9).\nHas_n_options(\"I8\", 9).\nHas_n_options(\"I9\", 9).\n.decl Answer()\nAnswer() :- Has_n_options(box, n_options), n_options = 9.\nAnswer() :- Has_n_options(box, n_options), Is_Roman_numeral(symbol), n_options = 1.\n.output Answer", "completions": [".decl Is_Roman_numeral(Symbol:symbol)\nIs_Roman_numeral(\"I\").\nIs_Roman_numeral(\"V\").\nIs_Roman_numeral(\"X\").\nIs_Roman_numeral(\"L\").\nIs_Roman_numeral(\"C\").\nIs_Roman_numeral(\"D\").\nIs_Roman_numeral(\"M\").\n.decl Has_n_options(Box:symbol, N_options:float)\nHas_n_options(\"A1\", 9).\nHas_n_options(\"A2\", 9).\nHas_n_options(\"A3\", 9).\nHas_n_options(\"A4\", 9).\nHas_n_options(\"A5\", 9).\nHas_n_options(\"A6\", 9).\nHas_n_options(\"A7\", 9).\nHas_n_options(\"A8\", 9).\nHas_n_options(\"A9\", 9).\nHas_n_options(\"B1\", 9).\nHas_n_options(\"B2\", 9).\nHas_n_options(\"B3\", 9).\nHas_n_options(\"B4\", 9).\nHas_n_options(\"B5\", 9).\nHas_n_options(\"B6\", 9).\nHas_n_options(\"B7\", 9).\nHas_n_options(\"B8\", 9).\nHas_n_options(\"B9\", 9).\nHas_n_options(\"C1\", 9).\nHas_n_options(\"C2\", 9).\nHas_n_options(\"C3\", 9).\nHas_n_options(\"C4\", 9).\nHas_n_options(\"C5\", 9).\nHas_n_options(\"C6\", 9).\nHas_n_options(\"C7\", 9).\nHas_n_options(\"C8\", 9).\nHas_n_options(\"C9\", 9).\nHas_n_options(\"D1\", 9).\nHas_n_options(\"D2\", 9).\nHas_n_options(\"D3\", 9).\nHas_n_options(\"D4\", 9).\nHas_n_options(\"D5\", 9).\nHas_n_options(\"D6\", 9).\nHas_n_options(\"D7\", 9).\nHas_n_options(\"D8\", 9).\nHas_n_options(\"D9\", 9).\nHas_n_options(\"E1\", 9).\nHas_n_options(\"E2\", 9).\nHas_n_options(\"E3\", 9).\nHas_n_options(\"E4\", 9).\nHas_n_options(\"E5\", 9).\nHas_n_options(\"E6\", 9).\nHas_n_options(\"E7\", 9).\nHas_n_options(\"E8\", 9).\nHas_n_options(\"E9\", 9).\nHas_n_options(\"F1\", 9).\nHas_n_options(\"F2\", 9).\nHas_n_options(\"F3\", 9).\nHas_n_options(\"F4\", 9).\nHas_n_options(\"F5\", 9).\nHas_n_options(\"F6\", 9).\nHas_n_options(\"F7\", 9).\nHas_n_options(\"F8\", 9).\nHas_n_options(\"F9\", 9).\nHas_n_options(\"G1\", 9).\nHas_n_options(\"G2\", 9).\nHas_n_options(\"G3\", 9).\nHas_n_options(\"G4\", 9).\nHas_n_options(\"G5\", 9).\nHas_n_options(\"G6\", 9).\nHas_n_options(\"G7\", 9).\nHas_n_options(\"G8\", 9).\nHas_n_options(\"G9\", 9).\nHas_n_options(\"H1\", 9).\nHas_n_options(\"H2\", 9).\nHas_n_options(\"H3\", 9).\nHas_n_options(\"H4\", 9).\nHas_n_options(\"H5\", 9).\nHas_n_options(\"H6\", 9).\nHas_n_options(\"H7\", 9).\nHas_n_options(\"H8\", 9).\nHas_n_options(\"H9\", 9).\nHas_n_options(\"I1\", 9).\nHas_n_options(\"I2\", 9).\nHas_n_options(\"I3\", 9).\nHas_n_options(\"I4\", 9).\nHas_n_options(\"I5\", 9).\nHas_n_options(\"I6\", 9).\nHas_n_options(\"I7\", 9).\nHas_n_options(\"I8\", 9).\nHas_n_options(\"I9\", 9).\n.decl Answer()\nAnswer() :- Has_n_options(box, n_options), n_options = 9.\nAnswer() :- Has_n_options(box, n_options), Is_Roman_numeral(symbol), n_options = 1.\n.output Answer"]}
{"id": 1674, "answer": false, "completion": ".decl Supports(Person:symbol, Position:symbol)\nSupports(\"Alistair Darling\", \"No Scottish independence\").\n.decl Answer()\nAnswer() :- Supports(\"Alistair Darling\", \"Scottish independence\"), !.\nAnswer() :- Supports(\"Alistair Darling\", \"No Scottish independence\").\n.output Answer", "completions": [".decl Supports(Person:symbol, Position:symbol)\nSupports(\"Alistair Darling\", \"No Scottish independence\").\n.decl Answer()\nAnswer() :- Supports(\"Alistair Darling\", \"Scottish independence\"), !.\nAnswer() :- Supports(\"Alistair Darling\", \"No Scottish independence\").\n.output Answer"]}
{"id": 1675, "answer": false, "completion": ".decl Comes_alive(Object:symbol)\nComes_alive(\"teapot\").\nComes_alive(\"candlestick\").\nComes_alive(\"wardrobe\").\n.decl Answer()\nAnswer() :- Comes_alive(object).\n.output Answer", "completions": [".decl Comes_alive(Object:symbol)\nComes_alive(\"teapot\").\nComes_alive(\"candlestick\").\nComes_alive(\"wardrobe\").\n.decl Answer()\nAnswer() :- Comes_alive(object).\n.output Answer"]}
{"id": 1676, "answer": false, "completion": ".decl Reproduces(Animal:symbol)\nReproduces(\"bottlenose dolphin\").\n.decl Has_max_offspring(Animal:symbol, Max_offspring:float)\nHas_max_offspring(\"bottlenose dolphin\", 5).\n.decl Has_female_population(Human:symbol, Female_population:float)\nHas_female_population(\"human\", 3.5 billion).\n.decl Answer()\nAnswer() :- Reproduces(\"bottlenose dolphin\"), Has_max_offspring(\"bottlenose dolphin\", max_offspring), Has_female_population(\"human\", female_population), max_offspring > female_population.\n.output Answer", "completions": [".decl Reproduces(Animal:symbol)\nReproduces(\"bottlenose dolphin\").\n.decl Has_max_offspring(Animal:symbol, Max_offspring:float)\nHas_max_offspring(\"bottlenose dolphin\", 5).\n.decl Has_female_population(Human:symbol, Female_population:float)\nHas_female_population(\"human\", 3.5 billion).\n.decl Answer()\nAnswer() :- Reproduces(\"bottlenose dolphin\"), Has_max_offspring(\"bottlenose dolphin\", max_offspring), Has_female_population(\"human\", female_population), max_offspring > female_population.\n.output Answer"]}
{"id": 1677, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Scooby Doo\", 1.5).\nHas_size(\"kangaroo pouch\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"Scooby Doo\", size1), Has_size(\"kangaroo pouch\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Scooby Doo\", 1.5).\nHas_size(\"kangaroo pouch\", 0.5).\n.decl Answer()\nAnswer() :- Has_size(\"Scooby Doo\", size1), Has_size(\"kangaroo pouch\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1678, "answer": true, "completion": ".decl Has_n_movies(Person:symbol, N_movies:float)\nHas_n_movies(\"Julia Roberts\", 80).\nHas_n_movies(\"Eric Roberts\", 200).\nHas_n_movies(\"Emma Roberts\", 50).\n.decl Answer()\nAnswer() :- Has_n_movies(\"Julia Roberts\", n_movies1), Has_n_movies(person2, n_movies2), person2 != \"Julia Roberts\", n_movies2 > n_movies1.\n.output Answer", "completions": [".decl Has_n_movies(Person:symbol, N_movies:float)\nHas_n_movies(\"Julia Roberts\", 80).\nHas_n_movies(\"Eric Roberts\", 200).\nHas_n_movies(\"Emma Roberts\", 50).\n.decl Answer()\nAnswer() :- Has_n_movies(\"Julia Roberts\", n_movies1), Has_n_movies(person2, n_movies2), person2 != \"Julia Roberts\", n_movies2 > n_movies1.\n.output Answer"]}
{"id": 1679, "answer": true, "completion": ".decl Preference(Person:symbol, Tool:symbol)\nPreference(\"stargazers\", \"telescope\").\n.decl Has_price(Tool:symbol, Price:float)\nHas_price(\"binoculars\", 100).\nHas_price(\"telescope\", 500).\n.decl Answer()\nAnswer() :- Preference(\"stargazers\", tool1), Has_price(tool1, price1), Preference(\"stargazers\", tool2), Has_price(tool2, price2), price1 < price2.\n.output Answer", "completions": [".decl Preference(Person:symbol, Tool:symbol)\nPreference(\"stargazers\", \"telescope\").\n.decl Has_price(Tool:symbol, Price:float)\nHas_price(\"binoculars\", 100).\nHas_price(\"telescope\", 500).\n.decl Answer()\nAnswer() :- Preference(\"stargazers\", tool1), Has_price(tool1, price1), Preference(\"stargazers\", tool2), Has_price(tool2, price2), price1 < price2.\n.output Answer"]}
{"id": 1680, "answer": true, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Ringo Starr\", \"curry\").\nLikes(\"Ringo Starr\", \"fish and chips\").\nLikes(\"Ringo Starr\", \"bangers and mash\").\n.decl Serves(Food:symbol, Restaurant:symbol)\nServes(\"pot roast\", \"The Old Spaghetti Factory\").\nServes(\"curry\", \"Taj Mahal\").\nServes(\"fish and chips\", \"The Codfather\").\nServes(\"bangers and mash\", \"The Queen's Arms\").\n.decl Answer()\nAnswer() :- Likes(\"Ringo Starr\", food), Serves(food, restaurant), restaurant != \"The Old Spaghetti Factory\".\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Ringo Starr\", \"curry\").\nLikes(\"Ringo Starr\", \"fish and chips\").\nLikes(\"Ringo Starr\", \"bangers and mash\").\n.decl Serves(Food:symbol, Restaurant:symbol)\nServes(\"pot roast\", \"The Old Spaghetti Factory\").\nServes(\"curry\", \"Taj Mahal\").\nServes(\"fish and chips\", \"The Codfather\").\nServes(\"bangers and mash\", \"The Queen's Arms\").\n.decl Answer()\nAnswer() :- Likes(\"Ringo Starr\", food), Serves(food, restaurant), restaurant != \"The Old Spaghetti Factory\".\n.output Answer"]}
{"id": 1681, "answer": true, "completion": ".decl Diagnosed_with(Person:symbol, Disorder:symbol)\nDiagnosed_with(\"John\", \"depression\").\nDiagnosed_with(\"Jane\", \"Great Depression\").\n.decl Answer()\nAnswer() :- Diagnosed_with(person, \"Great Depression\").\n.output Answer\n\n// Note: This question is not appropriate as \"Great Depression\" refers to a specific historical event and not a medical disorder. A better question would be \"Can a person be diagnosed with major depressive disorder?\"", "completions": [".decl Diagnosed_with(Person:symbol, Disorder:symbol)\nDiagnosed_with(\"John\", \"depression\").\nDiagnosed_with(\"Jane\", \"Great Depression\").\n.decl Answer()\nAnswer() :- Diagnosed_with(person, \"Great Depression\").\n.output Answer\n\n// Note: This question is not appropriate as \"Great Depression\" refers to a specific historical event and not a medical disorder. A better question would be \"Can a person be diagnosed with major depressive disorder?\""]}
{"id": 1682, "answer": true, "completion": ".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Mercury\", 440).\n.decl Requires_attire(Temperature:float, Attire:symbol)\nRequires_attire(70, \"shorts and t-shirt\").\nRequires_attire(50, \"light jacket\").\nRequires_attire(30, \"heavy coat\").\n.decl Answer()\nAnswer() :- Has_temperature(\"Mercury\", temperature), Requires_attire(temp, \"shorts and t-shirt\").\n.output Answer", "completions": [".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Mercury\", 440).\n.decl Requires_attire(Temperature:float, Attire:symbol)\nRequires_attire(70, \"shorts and t-shirt\").\nRequires_attire(50, \"light jacket\").\nRequires_attire(30, \"heavy coat\").\n.decl Answer()\nAnswer() :- Has_temperature(\"Mercury\", temperature), Requires_attire(temp, \"shorts and t-shirt\").\n.output Answer"]}
{"id": 1683, "answer": true, "completion": ".decl Read(Book:symbol, Person:symbol)\nRead(\"The Story of My Life\", \"Helen Keller\").\n.decl Wrote(Book:symbol, Author:symbol)\nWrote(\"Harry Potter and the Philosopher's Stone\", \"J. K. Rowling\").\n.decl Answer()\nAnswer() :- Read(book, \"Helen Keller\"), Wrote(book, \"J. K. Rowling\").\n.output Answer", "completions": [".decl Read(Book:symbol, Person:symbol)\nRead(\"The Story of My Life\", \"Helen Keller\").\n.decl Wrote(Book:symbol, Author:symbol)\nWrote(\"Harry Potter and the Philosopher's Stone\", \"J. K. Rowling\").\n.decl Answer()\nAnswer() :- Read(book, \"Helen Keller\"), Wrote(book, \"J. K. Rowling\").\n.output Answer"]}
{"id": 1684, "answer": false, "completion": ".decl Has_medical_history(Person:symbol, Medical_history:symbol)\nHas_medical_history(\"John\", \"self harm\").\nHas_medical_history(\"Jane\", \"asthma\").\n.decl Answer()\nAnswer() :- Has_medical_history(\"John\", \"self harm\"), !.\nAnswer() :- Has_medical_history(\"Jane\", \"asthma\"), !.\nAnswer().\n.output Answer", "completions": [".decl Has_medical_history(Person:symbol, Medical_history:symbol)\nHas_medical_history(\"John\", \"self harm\").\nHas_medical_history(\"Jane\", \"asthma\").\n.decl Answer()\nAnswer() :- Has_medical_history(\"John\", \"self harm\"), !.\nAnswer() :- Has_medical_history(\"Jane\", \"asthma\"), !.\nAnswer().\n.output Answer"]}
{"id": 1685, "answer": true, "completion": ".decl Enemies(Person1:symbol, Person2:symbol)\nEnemies(\"Jay Thomas\", \"Clayton Moore\").\n.decl Answer()\nAnswer() :- Enemies(\"Jay Thomas\", \"Clayton Moore\").\n.output Answer", "completions": [".decl Enemies(Person1:symbol, Person2:symbol)\nEnemies(\"Jay Thomas\", \"Clayton Moore\").\n.decl Answer()\nAnswer() :- Enemies(\"Jay Thomas\", \"Clayton Moore\").\n.output Answer"]}
{"id": 1686, "answer": false, "completion": ".decl Used_communication(Person:symbol, Communication:symbol)\nUsed_communication(\"Douglas Adams\", \"letter\").\nUsed_communication(\"Douglas Adams\", \"telephone\").\n.decl Answer()\nAnswer() :- Used_communication(\"Douglas Adams\", communication), communication != \"email\".\n.output Answer", "completions": [".decl Used_communication(Person:symbol, Communication:symbol)\nUsed_communication(\"Douglas Adams\", \"letter\").\nUsed_communication(\"Douglas Adams\", \"telephone\").\n.decl Answer()\nAnswer() :- Used_communication(\"Douglas Adams\", communication), communication != \"email\".\n.output Answer"]}
{"id": 1687, "answer": true, "completion": ".decl Dangerous(Manipulation:symbol)\nDangerous(\"neck manipulation\").\nDangerous(\"spinal manipulation\").\n.decl Answer()\nAnswer() :- Dangerous(manipulation).\n.output Answer", "completions": [".decl Dangerous(Manipulation:symbol)\nDangerous(\"neck manipulation\").\nDangerous(\"spinal manipulation\").\n.decl Answer()\nAnswer() :- Dangerous(manipulation).\n.output Answer"]}
{"id": 1688, "answer": false, "completion": ".decl Has_hyphenated_name(Celebrity:symbol)\nHas_hyphenated_name(\"Olivia Newton-John\").\nHas_hyphenated_name(\"Meryl Streep\").\nHas_hyphenated_name(\"Emma Stone\").\n.decl Has_longest_name(Celebrity:symbol)\nHas_longest_name(\"Olivia Newton-John\").\nHas_longest_name(\"Meryl Streep\").\nHas_longest_name(\"Emma Stone\").\n.decl Answer()\nAnswer() :- Has_hyphenated_name(celebrity), Has_longest_name(celebrity2), celebrity != celebrity2, |celebrity| > |celebrity2|.\n.output Answer", "completions": [".decl Has_hyphenated_name(Celebrity:symbol)\nHas_hyphenated_name(\"Olivia Newton-John\").\nHas_hyphenated_name(\"Meryl Streep\").\nHas_hyphenated_name(\"Emma Stone\").\n.decl Has_longest_name(Celebrity:symbol)\nHas_longest_name(\"Olivia Newton-John\").\nHas_longest_name(\"Meryl Streep\").\nHas_longest_name(\"Emma Stone\").\n.decl Answer()\nAnswer() :- Has_hyphenated_name(celebrity), Has_longest_name(celebrity2), celebrity != celebrity2, |celebrity| > |celebrity2|.\n.output Answer"]}
{"id": 1689, "answer": false, "completion": ".decl Is_composite(Number:float)\nIs_composite(4).\nIs_composite(6).\nIs_composite(8).\nIs_composite(9).\nIs_composite(10).\n.decl Founded(Company:symbol, Year:float)\nFounded(\"Casio\", 1946).\n.decl Answer()\nAnswer() :- Founded(\"Casio\", year), Is_composite(year).\n.output Answer", "completions": [".decl Is_composite(Number:float)\nIs_composite(4).\nIs_composite(6).\nIs_composite(8).\nIs_composite(9).\nIs_composite(10).\n.decl Founded(Company:symbol, Year:float)\nFounded(\"Casio\", 1946).\n.decl Answer()\nAnswer() :- Founded(\"Casio\", year), Is_composite(year).\n.output Answer"]}
{"id": 1690, "answer": false, "completion": ".decl Rules_Underworld(Ruler:symbol, Underworld:symbol)\nRules_Underworld(\"Hades\", \"Underworld\").\n.decl Has_grip(Ruler:symbol, Grip:float)\nHas_grip(\"Hades\", 0.8).\n.decl Answer()\nAnswer() :- Rules_Underworld(ruler, \"Underworld\"), Has_grip(ruler, grip), grip < 0.5.\n.output Answer", "completions": [".decl Rules_Underworld(Ruler:symbol, Underworld:symbol)\nRules_Underworld(\"Hades\", \"Underworld\").\n.decl Has_grip(Ruler:symbol, Grip:float)\nHas_grip(\"Hades\", 0.8).\n.decl Answer()\nAnswer() :- Rules_Underworld(ruler, \"Underworld\"), Has_grip(ruler, grip), grip < 0.5.\n.output Answer"]}
{"id": 1691, "answer": false, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"George W. Bush\", \"English\").\n.decl Answer()\nAnswer() :- !Speaks_language(\"George W. Bush\", \"Cantonese\").\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"George W. Bush\", \"English\").\n.decl Answer()\nAnswer() :- !Speaks_language(\"George W. Bush\", \"Cantonese\").\n.output Answer"]}
{"id": 1692, "answer": true, "completion": ".decl Violates_law(Method:symbol, Law:symbol)\nViolates_law(\"crucifixion\", \"US eighth amendment\").\n.decl Answer()\nAnswer() :- Violates_law(\"crucifixion\", \"US eighth amendment\").\n.output Answer", "completions": [".decl Violates_law(Method:symbol, Law:symbol)\nViolates_law(\"crucifixion\", \"US eighth amendment\").\n.decl Answer()\nAnswer() :- Violates_law(\"crucifixion\", \"US eighth amendment\").\n.output Answer"]}
{"id": 1693, "answer": false, "completion": ".decl Driver(driver:symbol, car:symbol)\nDriver(\"Dale Earnhardt Jr.\", \"Chevrolet\").\n.decl Cause_of_death(driver:symbol, cause:symbol)\nCause_of_death(\"Dale Earnhardt Sr.\", \"blunt force trauma\").\n.decl Medical_condition(driver:symbol, condition:symbol)\nMedical_condition(\"Dale Earnhardt Sr.\", \"heart disease\").\nMedical_condition(\"Dale Earnhardt Sr.\", \"atherosclerosis\").\nMedical_condition(\"Dale Earnhardt Sr.\", \"hypertension\").\n.decl Answer()\nAnswer() :- Driver(driver, car), Cause_of_death(driver, \"blunt force trauma\"), !Medical_condition(driver, \"stroke\").\n.output Answer", "completions": [".decl Driver(driver:symbol, car:symbol)\nDriver(\"Dale Earnhardt Jr.\", \"Chevrolet\").\n.decl Cause_of_death(driver:symbol, cause:symbol)\nCause_of_death(\"Dale Earnhardt Sr.\", \"blunt force trauma\").\n.decl Medical_condition(driver:symbol, condition:symbol)\nMedical_condition(\"Dale Earnhardt Sr.\", \"heart disease\").\nMedical_condition(\"Dale Earnhardt Sr.\", \"atherosclerosis\").\nMedical_condition(\"Dale Earnhardt Sr.\", \"hypertension\").\n.decl Answer()\nAnswer() :- Driver(driver, car), Cause_of_death(driver, \"blunt force trauma\"), !Medical_condition(driver, \"stroke\").\n.output Answer"]}
{"id": 1694, "answer": true, "completion": ".decl Book_genre(Book:symbol, Genre:symbol)\nBook_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nBook_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nBook_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nBook_genre(\"Harry Potter and the Goblet of Fire\", \"fantasy\").\nBook_genre(\"Harry Potter and the Order of Phoenix\", \"fantasy\").\nBook_genre(\"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nBook_genre(\"Harry Potter and the Deathly Hallows\", \"fantasy\").\nBook_genre(\"And Then There Were None\", \"mystery\").\n.decl Answer()\nAnswer() :- Book_genre(book, \"mystery\"), Book_genre(book, genre2), Book_genre(\"And Then There Were None\", genre1), genre2 = genre1.\n.output Answer", "completions": [".decl Book_genre(Book:symbol, Genre:symbol)\nBook_genre(\"Harry Potter and the Philosopher's Stone\", \"fantasy\").\nBook_genre(\"Harry Potter and the Chamber of Secrets\", \"fantasy\").\nBook_genre(\"Harry Potter and the Prisoner of Azkaban\", \"fantasy\").\nBook_genre(\"Harry Potter and the Goblet of Fire\", \"fantasy\").\nBook_genre(\"Harry Potter and the Order of Phoenix\", \"fantasy\").\nBook_genre(\"Harry Potter and the Half-Blood Prince\", \"fantasy\").\nBook_genre(\"Harry Potter and the Deathly Hallows\", \"fantasy\").\nBook_genre(\"And Then There Were None\", \"mystery\").\n.decl Answer()\nAnswer() :- Book_genre(book, \"mystery\"), Book_genre(book, genre2), Book_genre(\"And Then There Were None\", genre1), genre2 = genre1.\n.output Answer"]}
{"id": 1695, "answer": false, "completion": ".decl Involves(Sport:symbol, Equipment:symbol)\nInvolves(\"archery\", \"bow\").\nInvolves(\"skeet shooting\", \"shotgun\").\nInvolves(\"trap shooting\", \"shotgun\").\nInvolves(\"rifle shooting\", \"rifle\").\n.decl Answer()\nAnswer() :- Involves(sport, equipment), equipment != \"bullet\", !Involves(sport, \"bullet\").\n.output Answer", "completions": [".decl Involves(Sport:symbol, Equipment:symbol)\nInvolves(\"archery\", \"bow\").\nInvolves(\"skeet shooting\", \"shotgun\").\nInvolves(\"trap shooting\", \"shotgun\").\nInvolves(\"rifle shooting\", \"rifle\").\n.decl Answer()\nAnswer() :- Involves(sport, equipment), equipment != \"bullet\", !Involves(sport, \"bullet\").\n.output Answer"]}
{"id": 1696, "answer": true, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"monolingual American\", \"English\").\n.decl Has_native_name(Company:symbol, Native_name:symbol)\nHas_native_name(\"Lenovo\", \"联想\").\n.decl Answer()\nAnswer() :- Speaks_language(\"monolingual American\", language), Has_native_name(\"Lenovo\", native_name), language = \"Chinese\", native_name = \"联想\".\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"monolingual American\", \"English\").\n.decl Has_native_name(Company:symbol, Native_name:symbol)\nHas_native_name(\"Lenovo\", \"联想\").\n.decl Answer()\nAnswer() :- Speaks_language(\"monolingual American\", language), Has_native_name(\"Lenovo\", native_name), language = \"Chinese\", native_name = \"联想\".\n.output Answer"]}
{"id": 1697, "answer": true, "completion": ".decl Needs_subtitles(Film:symbol, Country:symbol)\nNeeds_subtitles(\"Fargo\", \"Guinea Bissau\").\nNeeds_subtitles(\"No Country for Old Men\", \"Guinea Bissau\").\n.decl Answer()\nAnswer() :- Needs_subtitles(film, \"Guinea Bissau\"), film != \"The Big Lebowski\".\n.output Answer", "completions": [".decl Needs_subtitles(Film:symbol, Country:symbol)\nNeeds_subtitles(\"Fargo\", \"Guinea Bissau\").\nNeeds_subtitles(\"No Country for Old Men\", \"Guinea Bissau\").\n.decl Answer()\nAnswer() :- Needs_subtitles(film, \"Guinea Bissau\"), film != \"The Big Lebowski\".\n.output Answer"]}
{"id": 1698, "answer": false, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Salvador Dali\", \"moustache\").\n.decl Answer()\nAnswer() :- Has_trait(\"baby\", \"moustache\"), !Has_trait(\"baby\", \"adult teeth\").\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Salvador Dali\", \"moustache\").\n.decl Answer()\nAnswer() :- Has_trait(\"baby\", \"moustache\"), !Has_trait(\"baby\", \"adult teeth\").\n.output Answer"]}
{"id": 1699, "answer": false, "completion": ".decl Learned_skill(Person:symbol, Skill:symbol, Age_learned:float)\nLearned_skill(\"Jeremy Irons\", \"acting\", 10).\n.decl Answer()\nAnswer() :- Learned_skill(\"Jeremy Irons\", \"sweep picking\", age), age < 18.\n.output Answer", "completions": [".decl Learned_skill(Person:symbol, Skill:symbol, Age_learned:float)\nLearned_skill(\"Jeremy Irons\", \"acting\", 10).\n.decl Answer()\nAnswer() :- Learned_skill(\"Jeremy Irons\", \"sweep picking\", age), age < 18.\n.output Answer"]}
{"id": 1700, "answer": false, "completion": ".decl Is_ethnicity(Person:symbol, Ethnicity:symbol)\nIs_ethnicity(\"LeBron James\", \"African American\").\nIs_ethnicity(\"Kobe Bryant\", \"African American\").\nIs_ethnicity(\"Jeremy Lin\", \"Asian American\").\nIs_ethnicity(\"Yao Ming\", \"Chinese\").\n.decl Answer()\nAnswer() :- Is_ethnicity(person, \"Vietnamese\"), Is_ethnicity(nba_player, ethnicity), person != nba_player, ethnicity = \"African American\".\nAnswer() :- Is_ethnicity(person, \"Vietnamese\"), Is_ethnicity(nba_player, ethnicity), person != nba_player, ethnicity = \"Asian American\".\nAnswer() :- Is_ethnicity(person, \"Vietnamese\"), Is_ethnicity(nba_player, ethnicity), person != nba_player, ethnicity = \"Chinese\".\n.output Answer", "completions": [".decl Is_ethnicity(Person:symbol, Ethnicity:symbol)\nIs_ethnicity(\"LeBron James\", \"African American\").\nIs_ethnicity(\"Kobe Bryant\", \"African American\").\nIs_ethnicity(\"Jeremy Lin\", \"Asian American\").\nIs_ethnicity(\"Yao Ming\", \"Chinese\").\n.decl Answer()\nAnswer() :- Is_ethnicity(person, \"Vietnamese\"), Is_ethnicity(nba_player, ethnicity), person != nba_player, ethnicity = \"African American\".\nAnswer() :- Is_ethnicity(person, \"Vietnamese\"), Is_ethnicity(nba_player, ethnicity), person != nba_player, ethnicity = \"Asian American\".\nAnswer() :- Is_ethnicity(person, \"Vietnamese\"), Is_ethnicity(nba_player, ethnicity), person != nba_player, ethnicity = \"Chinese\".\n.output Answer"]}
{"id": 1701, "answer": true, "completion": ".decl Famous(Person:symbol)\nFamous(\"Dr. Seuss\").\n.decl Wrote_book(Person:symbol, Book:symbol)\nWrote_book(\"Dr. Seuss\", \"The Cat in the Hat\").\n.decl Answer()\nAnswer() :- Famous(person), Wrote_book(person, book), book = \"The Cat in the Hat\".\n.output Answer", "completions": [".decl Famous(Person:symbol)\nFamous(\"Dr. Seuss\").\n.decl Wrote_book(Person:symbol, Book:symbol)\nWrote_book(\"Dr. Seuss\", \"The Cat in the Hat\").\n.decl Answer()\nAnswer() :- Famous(person), Wrote_book(person, book), book = \"The Cat in the Hat\".\n.output Answer"]}
{"id": 1702, "answer": false, "completion": ".decl Sells(Product:symbol, Store:symbol)\nSells(\"coffee\", \"Starbucks\").\nSells(\"Alfa Romeo\", \"car dealership\").\n.decl Answer()\nAnswer() :- Sells(\"Alfa Romeo\", store), !Sells(\"coffee\", store).\n.output Answer", "completions": [".decl Sells(Product:symbol, Store:symbol)\nSells(\"coffee\", \"Starbucks\").\nSells(\"Alfa Romeo\", \"car dealership\").\n.decl Answer()\nAnswer() :- Sells(\"Alfa Romeo\", store), !Sells(\"coffee\", store).\n.output Answer"]}
{"id": 1703, "answer": false, "completion": ".decl Has_pattern(Cat:symbol, Pattern:symbol)\nHas_pattern(\"calico\", \"tri-color\").\nHas_pattern(\"calico\", \"black and white\").\nHas_pattern(\"calico\", \"orange and white\").\n.decl Has_color(Variety:symbol, Color:symbol)\nHas_color(\"drain fly\", \"gray\").\nHas_color(\"drain fly\", \"black\").\nHas_color(\"drain fly\", \"brown\").\nHas_color(\"drain fly\", \"white\").\n.decl Answer()\nAnswer() :- Has_pattern(\"calico\", pattern), !Has_color(\"drain fly\", color), pattern != \"tri-color\".\nAnswer() :- Has_pattern(\"calico\", \"tri-color\"), Has_color(\"drain fly\", color1), Has_color(\"drain fly\", color2), Has_color(\"drain fly\", color3), color1 != color2, color2 != color3, color1 != color3.\n.output Answer", "completions": [".decl Has_pattern(Cat:symbol, Pattern:symbol)\nHas_pattern(\"calico\", \"tri-color\").\nHas_pattern(\"calico\", \"black and white\").\nHas_pattern(\"calico\", \"orange and white\").\n.decl Has_color(Variety:symbol, Color:symbol)\nHas_color(\"drain fly\", \"gray\").\nHas_color(\"drain fly\", \"black\").\nHas_color(\"drain fly\", \"brown\").\nHas_color(\"drain fly\", \"white\").\n.decl Answer()\nAnswer() :- Has_pattern(\"calico\", pattern), !Has_color(\"drain fly\", color), pattern != \"tri-color\".\nAnswer() :- Has_pattern(\"calico\", \"tri-color\"), Has_color(\"drain fly\", color1), Has_color(\"drain fly\", color2), Has_color(\"drain fly\", color3), color1 != color2, color2 != color3, color1 != color3.\n.output Answer"]}
{"id": 1704, "answer": false, "completion": ".decl Is_scavenger_bird(Bird:symbol)\nIs_scavenger_bird(\"vulture\").\nIs_scavenger_bird(\"crow\").\nIs_scavenger_bird(\"eagle\").\n.decl Is_golden_eagle(Bird:symbol)\nIs_golden_eagle(\"Golden eagle\").\n.decl Answer()\nAnswer() :- Is_scavenger_bird(bird), Is_golden_eagle(bird).\n.output Answer", "completions": [".decl Is_scavenger_bird(Bird:symbol)\nIs_scavenger_bird(\"vulture\").\nIs_scavenger_bird(\"crow\").\nIs_scavenger_bird(\"eagle\").\n.decl Is_golden_eagle(Bird:symbol)\nIs_golden_eagle(\"Golden eagle\").\n.decl Answer()\nAnswer() :- Is_scavenger_bird(bird), Is_golden_eagle(bird).\n.output Answer"]}
{"id": 1705, "answer": true, "completion": ".decl Prices(Store:symbol, Item:symbol, Price:float)\nPrices(\"Aldi\", \"banana\", 0.29).\nPrices(\"Aldi\", \"chicken\", 1.99).\nPrices(\"Whole Foods\", \"banana\", 0.69).\nPrices(\"Whole Foods\", \"chicken\", 4.99).\n.decl Answer()\nAnswer() :- Prices(\"Aldi\", item1, price1), Prices(\"Whole Foods\", item2, price2), item1 = item2, price1 < price2.\n.output Answer", "completions": [".decl Prices(Store:symbol, Item:symbol, Price:float)\nPrices(\"Aldi\", \"banana\", 0.29).\nPrices(\"Aldi\", \"chicken\", 1.99).\nPrices(\"Whole Foods\", \"banana\", 0.69).\nPrices(\"Whole Foods\", \"chicken\", 4.99).\n.decl Answer()\nAnswer() :- Prices(\"Aldi\", item1, price1), Prices(\"Whole Foods\", item2, price2), item1 = item2, price1 < price2.\n.output Answer"]}
{"id": 1706, "answer": false, "completion": ".decl Nests(Animal:symbol, Location:symbol)\nNests(\"bald eagle\", \"Mount Everest\").\nNests(\"bald eagle\", \"Mount McKinley\").\nNests(\"bald eagle\", \"Mount Kilimanjaro\").\n.decl Answer()\nAnswer() :- Nests(\"bald eagle\", \"Mount Sharp\"), !.\n.output Answer", "completions": [".decl Nests(Animal:symbol, Location:symbol)\nNests(\"bald eagle\", \"Mount Everest\").\nNests(\"bald eagle\", \"Mount McKinley\").\nNests(\"bald eagle\", \"Mount Kilimanjaro\").\n.decl Answer()\nAnswer() :- Nests(\"bald eagle\", \"Mount Sharp\"), !.\n.output Answer"]}
{"id": 1707, "answer": true, "completion": ".decl Cures(Disease:symbol, Treatment:symbol)\nCures(\"penicillin\", \"bacterial infections\").\n.decl Has_symptom(Disease:symbol, Symptom:symbol)\nHas_symptom(\"learning disability\", \"difficulty with reading\").\n.decl Answer()\nAnswer() :- Cures(\"penicillin\", treatment), Has_symptom(\"learning disability\", symptom), !Cures(treatment, symptom).\n.output Answer", "completions": [".decl Cures(Disease:symbol, Treatment:symbol)\nCures(\"penicillin\", \"bacterial infections\").\n.decl Has_symptom(Disease:symbol, Symptom:symbol)\nHas_symptom(\"learning disability\", \"difficulty with reading\").\n.decl Answer()\nAnswer() :- Cures(\"penicillin\", treatment), Has_symptom(\"learning disability\", symptom), !Cures(treatment, symptom).\n.output Answer"]}
{"id": 1708, "answer": false, "completion": ".decl Education_requirement(Person:symbol, Requirement:symbol)\nEducation_requirement(\"astronaut\", \"NASA training\").\n.decl Skips_requirement(Person:symbol, Requirement:symbol)\nSkips_requirement(\"Danica McKellar\", \"NASA training\").\nSkips_requirement(\"Danica McKellar\", \"college degree in science or engineering\").\n.decl Answer()\nAnswer() :- Education_requirement(\"astronaut\", requirement), !Skips_requirement(\"Danica McKellar\", requirement).\n.output Answer", "completions": [".decl Education_requirement(Person:symbol, Requirement:symbol)\nEducation_requirement(\"astronaut\", \"NASA training\").\n.decl Skips_requirement(Person:symbol, Requirement:symbol)\nSkips_requirement(\"Danica McKellar\", \"NASA training\").\nSkips_requirement(\"Danica McKellar\", \"college degree in science or engineering\").\n.decl Answer()\nAnswer() :- Education_requirement(\"astronaut\", requirement), !Skips_requirement(\"Danica McKellar\", requirement).\n.output Answer"]}
{"id": 1709, "answer": false, "completion": ".decl Has_limbs(Animal:symbol)\nHas_limbs(\"Goblin shark\").\n.decl Answer()\nAnswer() :- !Has_limbs(\"Goblin shark\").\n.output Answer", "completions": [".decl Has_limbs(Animal:symbol)\nHas_limbs(\"Goblin shark\").\n.decl Answer()\nAnswer() :- !Has_limbs(\"Goblin shark\").\n.output Answer"]}
{"id": 1710, "answer": true, "completion": ".decl Can_swim(Animal:symbol)\nCan_swim(\"northern fur seal\").\n.decl Answer()\nAnswer() :- !Can_swim(\"northern fur seal\").\n.output Answer", "completions": [".decl Can_swim(Animal:symbol)\nCan_swim(\"northern fur seal\").\n.decl Answer()\nAnswer() :- !Can_swim(\"northern fur seal\").\n.output Answer"]}
{"id": 1711, "answer": false, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"Generation Y member\", 30).\n.decl Age_requirement(Job:symbol, Min_age:float)\nAge_requirement(\"NYPD police officer\", 21).\nAge_requirement(\"NYPD police officer\", 35).\n.decl Answer()\nAnswer() :- Age(\"Generation Y member\", age), Age_requirement(\"NYPD police officer\", min_age), age >= min_age.\nAnswer() :- Age(\"Generation Y member\", age), Age_requirement(\"NYPD police officer\", max_age), age <= max_age.\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"Generation Y member\", 30).\n.decl Age_requirement(Job:symbol, Min_age:float)\nAge_requirement(\"NYPD police officer\", 21).\nAge_requirement(\"NYPD police officer\", 35).\n.decl Answer()\nAnswer() :- Age(\"Generation Y member\", age), Age_requirement(\"NYPD police officer\", min_age), age >= min_age.\nAnswer() :- Age(\"Generation Y member\", age), Age_requirement(\"NYPD police officer\", max_age), age <= max_age.\n.output Answer"]}
{"id": 1712, "answer": true, "completion": ".decl Age(Person:symbol, Years_old:float)\nAge(\"infant\", 1).\n.decl Solves_puzzle(Person:symbol, Puzzle:symbol)\nSolves_puzzle(\"expert\", \"sudoku\").\n.decl Answer()\nAnswer() :- Solves_puzzle(\"infant\", puzzle), !.\nAnswer() :- Age(\"infant\", age), Solves_puzzle(person, puzzle), !.\n.output Answer", "completions": [".decl Age(Person:symbol, Years_old:float)\nAge(\"infant\", 1).\n.decl Solves_puzzle(Person:symbol, Puzzle:symbol)\nSolves_puzzle(\"expert\", \"sudoku\").\n.decl Answer()\nAnswer() :- Solves_puzzle(\"infant\", puzzle), !.\nAnswer() :- Age(\"infant\", age), Solves_puzzle(person, puzzle), !.\n.output Answer"]}
{"id": 1713, "answer": false, "completion": ".decl Is_color(Object:symbol, Color:symbol)\nIs_color(\"pickled cucumber\", \"green\").\n.decl Answer()\nAnswer() :- !Is_color(\"pickled cucumber\", \"red\").\n.output Answer", "completions": [".decl Is_color(Object:symbol, Color:symbol)\nIs_color(\"pickled cucumber\", \"green\").\n.decl Answer()\nAnswer() :- !Is_color(\"pickled cucumber\", \"red\").\n.output Answer"]}
{"id": 1714, "answer": true, "completion": ".decl Uses_characters(Topic:symbol, Character:symbol)\nUses_characters(\"coding\", \"Boolean algebra characters\").\n.decl Answer()\nAnswer() :- Uses_characters(\"coding\", \"Boolean algebra characters\").\n.output Answer", "completions": [".decl Uses_characters(Topic:symbol, Character:symbol)\nUses_characters(\"coding\", \"Boolean algebra characters\").\n.decl Answer()\nAnswer() :- Uses_characters(\"coding\", \"Boolean algebra characters\").\n.output Answer"]}
{"id": 1715, "answer": false, "completion": ".decl Gender(Person:symbol, Gender:symbol)\nGender(\"John\", \"male\").\nGender(\"Jane\", \"female\").\n.decl Experiences(Person:symbol, Event:symbol)\nExperiences(\"Jane\", \"menstruation\").\n.decl Answer()\nAnswer() :- Gender(person, \"male\"), Experiences(person, \"menstruation\"), !Gender(person, \"female\").\n.output Answer", "completions": [".decl Gender(Person:symbol, Gender:symbol)\nGender(\"John\", \"male\").\nGender(\"Jane\", \"female\").\n.decl Experiences(Person:symbol, Event:symbol)\nExperiences(\"Jane\", \"menstruation\").\n.decl Answer()\nAnswer() :- Gender(person, \"male\"), Experiences(person, \"menstruation\"), !Gender(person, \"female\").\n.output Answer"]}
{"id": 1716, "answer": false, "completion": ".decl Ski_resort_location(Resort:symbol, State:symbol)\nSki_resort_location(\"Steamboat Springs\", \"Colorado\").\n.decl Ski_season(Resort:symbol, Season:symbol)\nSki_season(\"Steamboat Springs\", \"winter\").\nSki_season(\"Steamboat Springs\", \"spring\").\nSki_season(\"Steamboat Springs\", \"summer\").\nSki_season(\"Steamboat Springs\", \"fall\").\n.decl In_month(Month:symbol, Season:symbol)\nIn_month(\"August\", \"summer\").\n.decl Answer()\nAnswer() :- Ski_resort_location(\"Steamboat Springs\", \"Colorado\"), Ski_season(\"Steamboat Springs\", season), In_month(\"August\", season).\n.output Answer", "completions": [".decl Ski_resort_location(Resort:symbol, State:symbol)\nSki_resort_location(\"Steamboat Springs\", \"Colorado\").\n.decl Ski_season(Resort:symbol, Season:symbol)\nSki_season(\"Steamboat Springs\", \"winter\").\nSki_season(\"Steamboat Springs\", \"spring\").\nSki_season(\"Steamboat Springs\", \"summer\").\nSki_season(\"Steamboat Springs\", \"fall\").\n.decl In_month(Month:symbol, Season:symbol)\nIn_month(\"August\", \"summer\").\n.decl Answer()\nAnswer() :- Ski_resort_location(\"Steamboat Springs\", \"Colorado\"), Ski_season(\"Steamboat Springs\", season), In_month(\"August\", season).\n.output Answer"]}
{"id": 1717, "answer": false, "completion": ".decl Has_mascot(School:symbol, Mascot:symbol)\nHas_mascot(\"Bobby Jindal's high school\", \"Wildcats\").\n.decl Eats_food(Animal:symbol, Food:symbol)\nEats_food(\"Wildcats\", \"meat\").\nEats_food(\"Wildcats\", \"fish\").\nEats_food(\"Wildcats\", \"bird\").\n.decl Answer()\nAnswer() :- Has_mascot(school, \"Wildcats\"), Eats_food(\"Wildcats\", \"kibble\").\n.output Answer", "completions": [".decl Has_mascot(School:symbol, Mascot:symbol)\nHas_mascot(\"Bobby Jindal's high school\", \"Wildcats\").\n.decl Eats_food(Animal:symbol, Food:symbol)\nEats_food(\"Wildcats\", \"meat\").\nEats_food(\"Wildcats\", \"fish\").\nEats_food(\"Wildcats\", \"bird\").\n.decl Answer()\nAnswer() :- Has_mascot(school, \"Wildcats\"), Eats_food(\"Wildcats\", \"kibble\").\n.output Answer"]}
{"id": 1718, "answer": true, "completion": ".decl Has_days_in_month(Month:symbol, Days:float)\nHas_days_in_month(\"January\", 31).\nHas_days_in_month(\"February\", 28).\nHas_days_in_month(\"March\", 31).\nHas_days_in_month(\"April\", 30).\nHas_days_in_month(\"May\", 31).\nHas_days_in_month(\"June\", 30).\nHas_days_in_month(\"July\", 31).\nHas_days_in_month(\"August\", 31).\nHas_days_in_month(\"September\", 30).\nHas_days_in_month(\"October\", 31).\nHas_days_in_month(\"November\", 30).\nHas_days_in_month(\"December\", 31).\n.decl Answer()\nAnswer() :- Has_days_in_month(month, days), days >= 28, days <= 31.\n.output Answer", "completions": [".decl Has_days_in_month(Month:symbol, Days:float)\nHas_days_in_month(\"January\", 31).\nHas_days_in_month(\"February\", 28).\nHas_days_in_month(\"March\", 31).\nHas_days_in_month(\"April\", 30).\nHas_days_in_month(\"May\", 31).\nHas_days_in_month(\"June\", 30).\nHas_days_in_month(\"July\", 31).\nHas_days_in_month(\"August\", 31).\nHas_days_in_month(\"September\", 30).\nHas_days_in_month(\"October\", 31).\nHas_days_in_month(\"November\", 30).\nHas_days_in_month(\"December\", 31).\n.decl Answer()\nAnswer() :- Has_days_in_month(month, days), days >= 28, days <= 31.\n.output Answer"]}
{"id": 1719, "answer": true, "completion": ".decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"John\", \"Route 66\").\nKnows_about(\"Mary\", \"Route 66\").\nKnows_about(\"Bob\", \"Route 66\").\n.decl Population(Region:symbol, Population:float)\nPopulation(\"USA\", 328.2).\n.decl Answer()\nAnswer() :- Knows_about(person, \"Route 66\"), Population(\"USA\", population), population > 300.\n.output Answer", "completions": [".decl Knows_about(Person:symbol, Topic:symbol)\nKnows_about(\"John\", \"Route 66\").\nKnows_about(\"Mary\", \"Route 66\").\nKnows_about(\"Bob\", \"Route 66\").\n.decl Population(Region:symbol, Population:float)\nPopulation(\"USA\", 328.2).\n.decl Answer()\nAnswer() :- Knows_about(person, \"Route 66\"), Population(\"USA\", population), population > 300.\n.output Answer"]}
{"id": 1720, "answer": true, "completion": ".decl Prepared_in(Object:symbol, Container:symbol)\nPrepared_in(\"pancakes\", \"pan\").\nPrepared_in(\"soup\", \"pot\").\n.decl Answer()\nAnswer() :- Prepared_in(\"pancakes\", container), container != \"pot\".\n.output Answer", "completions": [".decl Prepared_in(Object:symbol, Container:symbol)\nPrepared_in(\"pancakes\", \"pan\").\nPrepared_in(\"soup\", \"pot\").\n.decl Answer()\nAnswer() :- Prepared_in(\"pancakes\", container), container != \"pot\".\n.output Answer"]}
{"id": 1721, "answer": true, "completion": ".decl Used_technology(Person:symbol, Technology:symbol)\nUsed_technology(\"Malcolm X\", \"Unicode\").\n.decl Answer()\nAnswer() :- Used_technology(\"Malcolm X\", \"Unicode\").\n.output Answer", "completions": [".decl Used_technology(Person:symbol, Technology:symbol)\nUsed_technology(\"Malcolm X\", \"Unicode\").\n.decl Answer()\nAnswer() :- Used_technology(\"Malcolm X\", \"Unicode\").\n.output Answer"]}
{"id": 1722, "answer": true, "completion": ".decl Lasts_for_distance(Item:symbol, Distance:float)\nLasts_for_distance(\"human heart\", 4).\nLasts_for_distance(\"Toyota Hiux\", 500).\n.decl Answer()\nAnswer() :- Lasts_for_distance(\"human heart\", distance1), Lasts_for_distance(\"Toyota Hiux\", distance2), distance1 < distance2.\n.output Answer", "completions": [".decl Lasts_for_distance(Item:symbol, Distance:float)\nLasts_for_distance(\"human heart\", 4).\nLasts_for_distance(\"Toyota Hiux\", 500).\n.decl Answer()\nAnswer() :- Lasts_for_distance(\"human heart\", distance1), Lasts_for_distance(\"Toyota Hiux\", distance2), distance1 < distance2.\n.output Answer"]}
{"id": 1723, "answer": false, "completion": ".decl Contains_compound(Fruit:symbol, Compound:symbol)\nContains_compound(\"watermelon\", \"citric acid\").\nContains_compound(\"watermelon\", \"malic acid\").\nContains_compound(\"watermelon\", \"succinic acid\").\n.decl Allergies(Person:symbol, Compound:symbol)\nAllergies(\"John\", \"tricarboxylic acid\").\n.decl Answer()\nAnswer() :- Contains_compound(\"watermelon\", compound), Allergies(\"John\", compound).\n.output Answer", "completions": [".decl Contains_compound(Fruit:symbol, Compound:symbol)\nContains_compound(\"watermelon\", \"citric acid\").\nContains_compound(\"watermelon\", \"malic acid\").\nContains_compound(\"watermelon\", \"succinic acid\").\n.decl Allergies(Person:symbol, Compound:symbol)\nAllergies(\"John\", \"tricarboxylic acid\").\n.decl Answer()\nAnswer() :- Contains_compound(\"watermelon\", compound), Allergies(\"John\", compound).\n.output Answer"]}
{"id": 1724, "answer": false, "completion": ".decl Has_cuisine(Dish:symbol, Cuisine:symbol)\nHas_cuisine(\"shrimp curry\", \"Indian cuisine\").\nHas_cuisine(\"injera\", \"Ethiopian cuisine\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"shrimp curry\", cuisine), Has_cuisine(\"injera\", cuisine).\n.output Answer", "completions": [".decl Has_cuisine(Dish:symbol, Cuisine:symbol)\nHas_cuisine(\"shrimp curry\", \"Indian cuisine\").\nHas_cuisine(\"injera\", \"Ethiopian cuisine\").\n.decl Answer()\nAnswer() :- Has_cuisine(\"shrimp curry\", cuisine), Has_cuisine(\"injera\", cuisine).\n.output Answer"]}
{"id": 1725, "answer": true, "completion": ".decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"Battle of the Alamo\", 1836).\n.decl Answer()\nAnswer() :- Happened_in_year(\"Battle of the Alamo\", year), year >= 1800, year < 1900.\n.output Answer", "completions": [".decl Happened_in_year(Event:symbol, Year:float)\nHappened_in_year(\"Battle of the Alamo\", 1836).\n.decl Answer()\nAnswer() :- Happened_in_year(\"Battle of the Alamo\", year), year >= 1800, year < 1900.\n.output Answer"]}
{"id": 1726, "answer": true, "completion": ".decl Venomous(Species:symbol)\nVenomous(\"cobra\").\nVenomous(\"rattlesnake\").\n.decl Immune_to(Species:symbol, Substance:symbol)\nImmune_to(\"T-1000\", \"metal\").\n.decl Answer()\nAnswer() :- Venomous(species), !Immune_to(\"T-1000\", \"venom\").\n.output Answer", "completions": [".decl Venomous(Species:symbol)\nVenomous(\"cobra\").\nVenomous(\"rattlesnake\").\n.decl Immune_to(Species:symbol, Substance:symbol)\nImmune_to(\"T-1000\", \"metal\").\n.decl Answer()\nAnswer() :- Venomous(species), !Immune_to(\"T-1000\", \"venom\").\n.output Answer"]}
{"id": 1727, "answer": false, "completion": ".decl Belt_color(Person:symbol, Color:symbol)\nBelt_color(\"Jon Jones\", \"black\").\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Jon Jones\", \"Brazilian jiu-jitsu\").\n.decl Answer()\nAnswer() :- Belt_color(person, \"white\"), Has_skill(\"Jon Jones\", skill), skill != \"boxing\".\n.output Answer", "completions": [".decl Belt_color(Person:symbol, Color:symbol)\nBelt_color(\"Jon Jones\", \"black\").\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Jon Jones\", \"Brazilian jiu-jitsu\").\n.decl Answer()\nAnswer() :- Belt_color(person, \"white\"), Has_skill(\"Jon Jones\", skill), skill != \"boxing\".\n.output Answer"]}
{"id": 1728, "answer": false, "completion": ".decl Resembles(Character_A:symbol, Character_B:symbol)\nResembles(\"Darth Vader\", \"Severus Snape\").\n.decl Answer()\nAnswer() :- Resembles(\"Darth Vader\", character), Resembles(\"Severus Snape\", character).\n.output Answer", "completions": [".decl Resembles(Character_A:symbol, Character_B:symbol)\nResembles(\"Darth Vader\", \"Severus Snape\").\n.decl Answer()\nAnswer() :- Resembles(\"Darth Vader\", character), Resembles(\"Severus Snape\", character).\n.output Answer"]}
{"id": 1729, "answer": true, "completion": ".decl Named_after_team(Team:symbol, Phenomenon:symbol)\nNamed_after_team(\"Thunder\", \"thunderstorm\").\nNamed_after_team(\"Storm Chasers\", \"storm\").\nNamed_after_team(\"Hot Rods\", \"hot weather\").\nNamed_after_team(\"IronPigs\", \"cold weather\").\n.decl Answer()\nAnswer() :- Named_after_team(team, phenomenon), (phenomenon = \"thunderstorm\"; phenomenon = \"storm\"), !.\n.output Answer", "completions": [".decl Named_after_team(Team:symbol, Phenomenon:symbol)\nNamed_after_team(\"Thunder\", \"thunderstorm\").\nNamed_after_team(\"Storm Chasers\", \"storm\").\nNamed_after_team(\"Hot Rods\", \"hot weather\").\nNamed_after_team(\"IronPigs\", \"cold weather\").\n.decl Answer()\nAnswer() :- Named_after_team(team, phenomenon), (phenomenon = \"thunderstorm\"; phenomenon = \"storm\"), !.\n.output Answer"]}
{"id": 1730, "answer": false, "completion": ".decl Influences(Artist1:symbol, Artist2:symbol)\nInfluences(\"Johann Sebastian Bach\", \"Metallica\").\nInfluences(\"Johann Sebastian Bach\", \"Dream Theater\").\n.decl Answer()\nAnswer() :- Influences(\"Johann Sebastian Bach\", artist), Influences(artist, \"Metallica\").\nAnswer() :- Influences(\"Johann Sebastian Bach\", artist), Influences(artist, \"Dream Theater\").\n.output Answer", "completions": [".decl Influences(Artist1:symbol, Artist2:symbol)\nInfluences(\"Johann Sebastian Bach\", \"Metallica\").\nInfluences(\"Johann Sebastian Bach\", \"Dream Theater\").\n.decl Answer()\nAnswer() :- Influences(\"Johann Sebastian Bach\", artist), Influences(artist, \"Metallica\").\nAnswer() :- Influences(\"Johann Sebastian Bach\", artist), Influences(artist, \"Dream Theater\").\n.output Answer"]}
{"id": 1731, "answer": false, "completion": ".decl Generates_force(Animal:symbol, Force:float)\nGenerates_force(\"cheetah\", 500).\n.decl Can_be_toppled(Person:symbol, Weight:float)\nCan_be_toppled(\"Big Show\", 383).\n.decl Answer()\nAnswer() :- Generates_force(\"cheetah\", force), Can_be_toppled(\"Big Show\", weight), force > weight.\n.output Answer", "completions": [".decl Generates_force(Animal:symbol, Force:float)\nGenerates_force(\"cheetah\", 500).\n.decl Can_be_toppled(Person:symbol, Weight:float)\nCan_be_toppled(\"Big Show\", 383).\n.decl Answer()\nAnswer() :- Generates_force(\"cheetah\", force), Can_be_toppled(\"Big Show\", weight), force > weight.\n.output Answer"]}
{"id": 1732, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"paratrooper\", \"parachuting\").\nHas_skill(\"mountain rescuer\", \"mountain rescue\").\n.decl Answer()\nAnswer() :- Has_skill(\"paratrooper\", skill1), Has_skill(\"mountain rescuer\", skill2), skill1 != skill2.\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"paratrooper\", \"parachuting\").\nHas_skill(\"mountain rescuer\", \"mountain rescue\").\n.decl Answer()\nAnswer() :- Has_skill(\"paratrooper\", skill1), Has_skill(\"mountain rescuer\", skill2), skill1 != skill2.\n.output Answer"]}
{"id": 1733, "answer": false, "completion": ".decl Associated_with(Culture:symbol, Object:symbol)\nAssociated_with(\"Ancient Greeks\", \"celery\").\nAssociated_with(\"Victorian England\", \"death\").\nAssociated_with(\"Aztecs\", \"chocolate\").\n.decl Answer()\nAnswer() :- Associated_with(culture, \"celery\"), Associated_with(culture, \"death\"), culture != \"Victorian England\".\n.output Answer", "completions": [".decl Associated_with(Culture:symbol, Object:symbol)\nAssociated_with(\"Ancient Greeks\", \"celery\").\nAssociated_with(\"Victorian England\", \"death\").\nAssociated_with(\"Aztecs\", \"chocolate\").\n.decl Answer()\nAnswer() :- Associated_with(culture, \"celery\"), Associated_with(culture, \"death\"), culture != \"Victorian England\".\n.output Answer"]}
{"id": 1734, "answer": false, "completion": ".decl Succeeded_by(President_A:symbol, President_B:symbol)\nSucceeded_by(\"Woodrow Wilson\", \"Warren G. Harding\").\nSucceeded_by(\"Calvin Coolidge\", \"Herbert Hoover\").\nSucceeded_by(\"Herbert Hoover\", \"Franklin D. Roosevelt\").\n.decl Party(President:symbol, Party:symbol)\nParty(\"Woodrow Wilson\", \"Democratic\").\nParty(\"Warren G. Harding\", \"Republican\").\nParty(\"Calvin Coolidge\", \"Republican\").\nParty(\"Herbert Hoover\", \"Republican\").\nParty(\"Franklin D. Roosevelt\", \"Democratic\").\n.decl Answer()\nAnswer() :- Succeeded_by(president1, \"Woodrow Wilson\"), Succeeded_by(\"Woodrow Wilson\", president2), Party(president1, party1), Party(president2, party2), party1 != party2.\n.output Answer", "completions": [".decl Succeeded_by(President_A:symbol, President_B:symbol)\nSucceeded_by(\"Woodrow Wilson\", \"Warren G. Harding\").\nSucceeded_by(\"Calvin Coolidge\", \"Herbert Hoover\").\nSucceeded_by(\"Herbert Hoover\", \"Franklin D. Roosevelt\").\n.decl Party(President:symbol, Party:symbol)\nParty(\"Woodrow Wilson\", \"Democratic\").\nParty(\"Warren G. Harding\", \"Republican\").\nParty(\"Calvin Coolidge\", \"Republican\").\nParty(\"Herbert Hoover\", \"Republican\").\nParty(\"Franklin D. Roosevelt\", \"Democratic\").\n.decl Answer()\nAnswer() :- Succeeded_by(president1, \"Woodrow Wilson\"), Succeeded_by(\"Woodrow Wilson\", president2), Party(president1, party1), Party(president2, party2), party1 != party2.\n.output Answer"]}
{"id": 1735, "answer": false, "completion": ".decl Has_number_of_troops(Country:symbol, Year:float, N_troops:float)\nHas_number_of_troops(\"USA\", 1965, 184300).\n.decl Answer()\nAnswer() :- Has_number_of_troops(\"USA\", year, n_troops), year = 1965, n_troops < 150000.\n.output Answer", "completions": [".decl Has_number_of_troops(Country:symbol, Year:float, N_troops:float)\nHas_number_of_troops(\"USA\", 1965, 184300).\n.decl Answer()\nAnswer() :- Has_number_of_troops(\"USA\", year, n_troops), year = 1965, n_troops < 150000.\n.output Answer"]}
{"id": 1736, "answer": true, "completion": ".decl Difficulty(Level:symbol, Task:symbol)\nDifficulty(\"kindergarten\", \"coloring\").\nDifficulty(\"elementary school\", \"basic math\").\nDifficulty(\"high school\", \"literary analysis\").\nDifficulty(\"college\", \"thesis paper\").\n.decl Answer()\nAnswer() :- Difficulty(level, \"thesis paper\"), level != \"kindergarten\".\n.output Answer", "completions": [".decl Difficulty(Level:symbol, Task:symbol)\nDifficulty(\"kindergarten\", \"coloring\").\nDifficulty(\"elementary school\", \"basic math\").\nDifficulty(\"high school\", \"literary analysis\").\nDifficulty(\"college\", \"thesis paper\").\n.decl Answer()\nAnswer() :- Difficulty(level, \"thesis paper\"), level != \"kindergarten\".\n.output Answer"]}
{"id": 1737, "answer": true, "completion": ".decl Beheaded(Person:symbol)\nBeheaded(\"John the Baptist\").\n.decl Saint(Person:symbol)\nSaint(\"John the Baptist\").\n.decl Answer()\nAnswer() :- Beheaded(person), Saint(person).\n.output Answer", "completions": [".decl Beheaded(Person:symbol)\nBeheaded(\"John the Baptist\").\n.decl Saint(Person:symbol)\nSaint(\"John the Baptist\").\n.decl Answer()\nAnswer() :- Beheaded(person), Saint(person).\n.output Answer"]}
{"id": 1738, "answer": true, "completion": ".decl Fought_in(War:symbol, Country:symbol)\nFought_in(\"World War I\", \"Germany\").\nFought_in(\"World War I\", \"Allied Powers\").\n.decl Won(War:symbol, Country:symbol)\nWon(\"World War I\", \"Allied Powers\").\n.decl Answer()\nAnswer() :- Fought_in(\"World War I\", \"Germany\"), Won(\"World War I\", \"Allied Powers\").\n.output Answer", "completions": [".decl Fought_in(War:symbol, Country:symbol)\nFought_in(\"World War I\", \"Germany\").\nFought_in(\"World War I\", \"Allied Powers\").\n.decl Won(War:symbol, Country:symbol)\nWon(\"World War I\", \"Allied Powers\").\n.decl Answer()\nAnswer() :- Fought_in(\"World War I\", \"Germany\"), Won(\"World War I\", \"Allied Powers\").\n.output Answer"]}
{"id": 1739, "answer": false, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"Lil Wayne\", 15).\n.decl Has_license(Person:symbol)\nHas_license(\"Lil Wayne\").\n.decl Answer()\nAnswer() :- Age(\"Lil Wayne\", age), age >= 16, Has_license(\"Lil Wayne\").\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"Lil Wayne\", 15).\n.decl Has_license(Person:symbol)\nHas_license(\"Lil Wayne\").\n.decl Answer()\nAnswer() :- Age(\"Lil Wayne\", age), age >= 16, Has_license(\"Lil Wayne\").\n.output Answer"]}
{"id": 1740, "answer": false, "completion": ".decl Taught_by(Student:symbol, Teacher:symbol)\nTaught_by(\"Lord Voldemort\", \"Salazar Slytherin\").\nTaught_by(\"Salazar Slytherin\", \"Godric Gryffindor\").\nTaught_by(\"Godric Gryffindor\", \"Rowena Ravenclaw\").\nTaught_by(\"Rowena Ravenclaw\", \"Helga Hufflepuff\").\nTaught_by(\"Helga Hufflepuff\", \"Albus Dumbledore\").\n.decl Answer()\nAnswer() :- Taught_by(\"Lord Voldemort\", teacher), Taught_by(teacher, \"Albus Dumbledore\").\n.output Answer", "completions": [".decl Taught_by(Student:symbol, Teacher:symbol)\nTaught_by(\"Lord Voldemort\", \"Salazar Slytherin\").\nTaught_by(\"Salazar Slytherin\", \"Godric Gryffindor\").\nTaught_by(\"Godric Gryffindor\", \"Rowena Ravenclaw\").\nTaught_by(\"Rowena Ravenclaw\", \"Helga Hufflepuff\").\nTaught_by(\"Helga Hufflepuff\", \"Albus Dumbledore\").\n.decl Answer()\nAnswer() :- Taught_by(\"Lord Voldemort\", teacher), Taught_by(teacher, \"Albus Dumbledore\").\n.output Answer"]}
{"id": 1741, "answer": true, "completion": ".decl Shares_name_with(Location:symbol, Name:symbol)\nShares_name_with(\"Olympia Washington\", \"Olympia\").\nShares_name_with(\"Hephaestus's workshop location\", \"Olympia\").\n.decl Answer()\nAnswer() :- Shares_name_with(\"Olympia Washington\", name), Shares_name_with(\"Hephaestus's workshop location\", name).\n.output Answer", "completions": [".decl Shares_name_with(Location:symbol, Name:symbol)\nShares_name_with(\"Olympia Washington\", \"Olympia\").\nShares_name_with(\"Hephaestus's workshop location\", \"Olympia\").\n.decl Answer()\nAnswer() :- Shares_name_with(\"Olympia Washington\", name), Shares_name_with(\"Hephaestus's workshop location\", name).\n.output Answer"]}
{"id": 1742, "answer": true, "completion": ".decl Acronym_expansion(Acronym:symbol, Expansion:symbol)\nAcronym_expansion(\"JPEG\", \"Joint Photographic Experts Group\").\nAcronym_expansion(\"NASA\", \"National Aeronautics and Space Administration\").\n.decl Answer()\nAnswer() :- Acronym_expansion(\"JPEG\", expansion), expansion =~ \"joint committee\".\n.output Answer", "completions": [".decl Acronym_expansion(Acronym:symbol, Expansion:symbol)\nAcronym_expansion(\"JPEG\", \"Joint Photographic Experts Group\").\nAcronym_expansion(\"NASA\", \"National Aeronautics and Space Administration\").\n.decl Answer()\nAnswer() :- Acronym_expansion(\"JPEG\", expansion), expansion =~ \"joint committee\".\n.output Answer"]}
{"id": 1743, "answer": true, "completion": ".decl Unlikely_to_shop(Person:symbol, Store:symbol)\nUnlikely_to_shop(\"Mickey Mouse\", \"Zazzle\").\n.decl Answer()\nAnswer() :- Unlikely_to_shop(\"Mickey Mouse\", \"Zazzle\").\n.output Answer", "completions": [".decl Unlikely_to_shop(Person:symbol, Store:symbol)\nUnlikely_to_shop(\"Mickey Mouse\", \"Zazzle\").\n.decl Answer()\nAnswer() :- Unlikely_to_shop(\"Mickey Mouse\", \"Zazzle\").\n.output Answer"]}
{"id": 1744, "answer": false, "completion": ".decl Affected(Party:symbol, Event:symbol, Effect:symbol)\nAffected(\"Republican\", \"Watergate scandal\", \"negative\").\nAffected(\"Democratic\", \"Watergate scandal\", \"positive\").\n.decl Answer()\nAnswer() :- Affected(\"Republican\", \"Watergate scandal\", \"positive\"), !.\nAnswer() :- Affected(\"Democratic\", \"Watergate scandal\", \"negative\"), !.\n.output Answer", "completions": [".decl Affected(Party:symbol, Event:symbol, Effect:symbol)\nAffected(\"Republican\", \"Watergate scandal\", \"negative\").\nAffected(\"Democratic\", \"Watergate scandal\", \"positive\").\n.decl Answer()\nAnswer() :- Affected(\"Republican\", \"Watergate scandal\", \"positive\"), !.\nAnswer() :- Affected(\"Democratic\", \"Watergate scandal\", \"negative\"), !.\n.output Answer"]}
{"id": 1745, "answer": true, "completion": ".decl Success(Person:symbol)\nSuccess(\"James Hetfield\").\n.decl Left_band(Person:symbol)\nLeft_band(\"Dave Mustaine\").\n.decl Failed(Person:symbol)\nFailed(\"Dave Mustaine\").\n.decl Answer()\nAnswer() :- Left_band(person), Failed(person), Success(\"James Hetfield\").\n.output Answer", "completions": [".decl Success(Person:symbol)\nSuccess(\"James Hetfield\").\n.decl Left_band(Person:symbol)\nLeft_band(\"Dave Mustaine\").\n.decl Failed(Person:symbol)\nFailed(\"Dave Mustaine\").\n.decl Answer()\nAnswer() :- Left_band(person), Failed(person), Success(\"James Hetfield\").\n.output Answer"]}
{"id": 1746, "answer": false, "completion": ".decl Named_after(Person:symbol, Ancestor:symbol)\nNamed_after(\"Iggy Pop\", \"father\").\n.decl Answer()\nAnswer() :- Named_after(\"Iggy Pop\", ancestor), ancestor = \"father\".\n.output Answer", "completions": [".decl Named_after(Person:symbol, Ancestor:symbol)\nNamed_after(\"Iggy Pop\", \"father\").\n.decl Answer()\nAnswer() :- Named_after(\"Iggy Pop\", ancestor), ancestor = \"father\".\n.output Answer"]}
{"id": 1747, "answer": true, "completion": ".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"John\", \"Shiva\").\n.decl Makes_pilgrimage(Person:symbol, Place:symbol)\nMakes_pilgrimage(\"John\", \"Kailash\").\n.decl Answer()\nAnswer() :- Worships(person, \"Shiva\"), Makes_pilgrimage(person, \"Kailash\").\n.output Answer", "completions": [".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"John\", \"Shiva\").\n.decl Makes_pilgrimage(Person:symbol, Place:symbol)\nMakes_pilgrimage(\"John\", \"Kailash\").\n.decl Answer()\nAnswer() :- Worships(person, \"Shiva\"), Makes_pilgrimage(person, \"Kailash\").\n.output Answer"]}
{"id": 1748, "answer": false, "completion": ".decl Contains(Nutrient:symbol, Plant:symbol)\nContains(\"carbohydrates\", \"coca leaves\").\nContains(\"fat\", \"coca leaves\").\nContains(\"protein\", \"coca leaves\").\n.decl Good_for(Effect:symbol, Plant:symbol)\nGood_for(\"gaining weight\", \"coca leaves\").\n.decl Answer()\nAnswer() :- Contains(nutrient, \"coca leaves\"), Good_for(\"gaining weight\", \"coca leaves\").\n.output Answer", "completions": [".decl Contains(Nutrient:symbol, Plant:symbol)\nContains(\"carbohydrates\", \"coca leaves\").\nContains(\"fat\", \"coca leaves\").\nContains(\"protein\", \"coca leaves\").\n.decl Good_for(Effect:symbol, Plant:symbol)\nGood_for(\"gaining weight\", \"coca leaves\").\n.decl Answer()\nAnswer() :- Contains(nutrient, \"coca leaves\"), Good_for(\"gaining weight\", \"coca leaves\").\n.output Answer"]}
{"id": 1749, "answer": true, "completion": ".decl Formation_type(Bird:symbol, Type:symbol)\nFormation_type(\"black swan\", \"V formation\").\n.decl Longest_word(Word:symbol)\nLongest_word(\"pneumonoultramicroscopicsilicovolcanoconiosis\").\n.decl Answer()\nAnswer() :- Formation_type(\"black swan\", \"W formation\"), Longest_word(word), word = \"pneumonoultramicroscopicsilicovolcanoconiosis\".\nAnswer() :- Formation_type(\"black swan\", \"V formation\"), Longest_word(word), word = \"pneumonoultramicroscopicsilicovolcanoconiosis\".\n.output Answer", "completions": [".decl Formation_type(Bird:symbol, Type:symbol)\nFormation_type(\"black swan\", \"V formation\").\n.decl Longest_word(Word:symbol)\nLongest_word(\"pneumonoultramicroscopicsilicovolcanoconiosis\").\n.decl Answer()\nAnswer() :- Formation_type(\"black swan\", \"W formation\"), Longest_word(word), word = \"pneumonoultramicroscopicsilicovolcanoconiosis\".\nAnswer() :- Formation_type(\"black swan\", \"V formation\"), Longest_word(word), word = \"pneumonoultramicroscopicsilicovolcanoconiosis\".\n.output Answer"]}
{"id": 1750, "answer": true, "completion": ".decl Refers_to(Name:symbol, Ref:symbol)\nRefers_to(\"C-SPAN\", \"telecommunications\").\nRefers_to(\"telecommunications\", \"outer space\").\n.decl Answer()\nAnswer() :- Refers_to(\"C-SPAN\", ref1), Refers_to(ref1, \"outer space\").\n.output Answer", "completions": [".decl Refers_to(Name:symbol, Ref:symbol)\nRefers_to(\"C-SPAN\", \"telecommunications\").\nRefers_to(\"telecommunications\", \"outer space\").\n.decl Answer()\nAnswer() :- Refers_to(\"C-SPAN\", ref1), Refers_to(ref1, \"outer space\").\n.output Answer"]}
{"id": 1751, "answer": true, "completion": ".decl Frequency_range(Glass:symbol, Min_freq:float, Max_freq:float)\nFrequency_range(\"glass\", 1000, 8000).\n.decl Has_vocal_range(Person:symbol, Min_freq:float, Max_freq:float)\nHas_vocal_range(\"Kelly Clarkson\", 100, 5000).\n.decl Answer()\nAnswer() :- Frequency_range(\"glass\", min_freq, max_freq), Has_vocal_range(\"Kelly Clarkson\", min_freq2, max_freq2), min_freq2 <= max_freq, max_freq2 >= min_freq.\n.output Answer", "completions": [".decl Frequency_range(Glass:symbol, Min_freq:float, Max_freq:float)\nFrequency_range(\"glass\", 1000, 8000).\n.decl Has_vocal_range(Person:symbol, Min_freq:float, Max_freq:float)\nHas_vocal_range(\"Kelly Clarkson\", 100, 5000).\n.decl Answer()\nAnswer() :- Frequency_range(\"glass\", min_freq, max_freq), Has_vocal_range(\"Kelly Clarkson\", min_freq2, max_freq2), min_freq2 <= max_freq, max_freq2 >= min_freq.\n.output Answer"]}
{"id": 1752, "answer": false, "completion": ".decl Gives(Presenter:symbol, Receiver:symbol, Present:symbol)\nGives(\"Santa Claus\", \"good children\", \"presents\").\n.decl Answer()\nAnswer() :- Gives(\"Santa Claus\", receiver, \"presents\"), receiver != \"good children\", receiver = \"Joffrey Baratheon\".\n.output Answer", "completions": [".decl Gives(Presenter:symbol, Receiver:symbol, Present:symbol)\nGives(\"Santa Claus\", \"good children\", \"presents\").\n.decl Answer()\nAnswer() :- Gives(\"Santa Claus\", receiver, \"presents\"), receiver != \"good children\", receiver = \"Joffrey Baratheon\".\n.output Answer"]}
{"id": 1753, "answer": true, "completion": ".decl Belongs_to_family(Plant:symbol, Family:symbol)\nBelongs_to_family(\"slime lily\", \"Araceae\").\nBelongs_to_family(\"asparagus\", \"Asparagaceae\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"slime lily\", family1), Belongs_to_family(\"asparagus\", family2), family1 != family2.\n.output Answer", "completions": [".decl Belongs_to_family(Plant:symbol, Family:symbol)\nBelongs_to_family(\"slime lily\", \"Araceae\").\nBelongs_to_family(\"asparagus\", \"Asparagaceae\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"slime lily\", family1), Belongs_to_family(\"asparagus\", family2), family1 != family2.\n.output Answer"]}
{"id": 1754, "answer": true, "completion": ".decl Traveled_to(Person:symbol, Place:symbol)\nTraveled_to(\"Christopher Columbus\", \"America\").\nTraveled_to(\"Christopher Columbus\", \"Caribbean\").\n.decl Answer()\nAnswer() :- Traveled_to(\"Christopher Columbus\", place), place != \"Antarctica\".\n.output Answer", "completions": [".decl Traveled_to(Person:symbol, Place:symbol)\nTraveled_to(\"Christopher Columbus\", \"America\").\nTraveled_to(\"Christopher Columbus\", \"Caribbean\").\n.decl Answer()\nAnswer() :- Traveled_to(\"Christopher Columbus\", place), place != \"Antarctica\".\n.output Answer"]}
{"id": 1755, "answer": false, "completion": ".decl Can_wear(Animal:symbol, Item:symbol)\nCan_wear(\"polar bear\", \"snowshoe\").\nCan_wear(\"human\", \"snowshoe\").\nCan_wear(\"snake\", \"necktie\").\n.decl Answer()\nAnswer() :- Can_wear(\"snake\", item).\n.output Answer", "completions": [".decl Can_wear(Animal:symbol, Item:symbol)\nCan_wear(\"polar bear\", \"snowshoe\").\nCan_wear(\"human\", \"snowshoe\").\nCan_wear(\"snake\", \"necktie\").\n.decl Answer()\nAnswer() :- Can_wear(\"snake\", item).\n.output Answer"]}
{"id": 1756, "answer": true, "completion": ".decl Needs_surgery(Animal:symbol, Condition:symbol)\nNeeds_surgery(\"northern fur seal\", \"emergency surgery\").\n.decl Safe_candidate(Animal:symbol)\nSafe_candidate(\"northern fur seal\").\n.decl In_month(Month:symbol, Season:symbol)\nIn_month(\"July\", \"summer\").\n.decl Answer()\nAnswer() :- Needs_surgery(\"northern fur seal\", condition), Safe_candidate(\"northern fur seal\"), In_month(\"July\", season), season = \"summer\".\n.output Answer", "completions": [".decl Needs_surgery(Animal:symbol, Condition:symbol)\nNeeds_surgery(\"northern fur seal\", \"emergency surgery\").\n.decl Safe_candidate(Animal:symbol)\nSafe_candidate(\"northern fur seal\").\n.decl In_month(Month:symbol, Season:symbol)\nIn_month(\"July\", \"summer\").\n.decl Answer()\nAnswer() :- Needs_surgery(\"northern fur seal\", condition), Safe_candidate(\"northern fur seal\"), In_month(\"July\", season), season = \"summer\".\n.output Answer"]}
{"id": 1757, "answer": false, "completion": ".decl Has_noise_regulation(Location:symbol)\nHas_noise_regulation(\"Orange County, California\").\n.decl Answer()\nAnswer() :- Has_noise_regulation(\"Orange County, California\").\n.output Answer", "completions": [".decl Has_noise_regulation(Location:symbol)\nHas_noise_regulation(\"Orange County, California\").\n.decl Answer()\nAnswer() :- Has_noise_regulation(\"Orange County, California\").\n.output Answer"]}
{"id": 1758, "answer": true, "completion": ".decl Instrumental(Person:symbol, Event:symbol)\nInstrumental(\"Pepin the Short\", \"Battle of Tours\").\n.decl Answer()\nAnswer() :- Instrumental(father, \"Battle of Tours\"), Instrumental(\"Charlemagne\", father).\n.output Answer", "completions": [".decl Instrumental(Person:symbol, Event:symbol)\nInstrumental(\"Pepin the Short\", \"Battle of Tours\").\n.decl Answer()\nAnswer() :- Instrumental(father, \"Battle of Tours\"), Instrumental(\"Charlemagne\", father).\n.output Answer"]}
{"id": 1759, "answer": false, "completion": ".decl Interviewed(Interviewer:symbol, Interviewee:symbol)\nInterviewed(\"Anderson Cooper\", \"Barack Obama\").\nInterviewed(\"Oprah Winfrey\", \"Walt Disney\").\n.decl Answer()\nAnswer() :- Interviewed(\"Anderson Cooper\", interviewer2), Interviewed(interviewer2, \"Walt Disney\").\n.output Answer", "completions": [".decl Interviewed(Interviewer:symbol, Interviewee:symbol)\nInterviewed(\"Anderson Cooper\", \"Barack Obama\").\nInterviewed(\"Oprah Winfrey\", \"Walt Disney\").\n.decl Answer()\nAnswer() :- Interviewed(\"Anderson Cooper\", interviewer2), Interviewed(interviewer2, \"Walt Disney\").\n.output Answer"]}
{"id": 1760, "answer": true, "completion": ".decl Needs_continuing_edu(Person:symbol, State:symbol)\nNeeds_continuing_edu(\"Super Mario\", \"New York\").\n.decl Answer()\nAnswer() :- !Needs_continuing_edu(\"Super Mario\", \"Illinois\").\n.output Answer", "completions": [".decl Needs_continuing_edu(Person:symbol, State:symbol)\nNeeds_continuing_edu(\"Super Mario\", \"New York\").\n.decl Answer()\nAnswer() :- !Needs_continuing_edu(\"Super Mario\", \"Illinois\").\n.output Answer"]}
{"id": 1761, "answer": true, "completion": ".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Rita Ora\", \"tonsilitis\").\nHas_disease(\"Rita Ora\", \"strep throat\").\n.decl Surgery(Person:symbol, Year:float)\nSurgery(\"Rita Ora\", 2020).\n.decl Harmless(Disease:symbol)\nHarmless(\"tonsilitis\").\n.decl Answer()\nAnswer() :- Has_disease(\"Rita Ora\", disease), Harmless(disease).\nAnswer() :- Has_disease(\"Rita Ora\", \"strep throat\"), Surgery(\"Rita Ora\", year), year >= 2020.\n.output Answer", "completions": [".decl Has_disease(Person:symbol, Disease:symbol)\nHas_disease(\"Rita Ora\", \"tonsilitis\").\nHas_disease(\"Rita Ora\", \"strep throat\").\n.decl Surgery(Person:symbol, Year:float)\nSurgery(\"Rita Ora\", 2020).\n.decl Harmless(Disease:symbol)\nHarmless(\"tonsilitis\").\n.decl Answer()\nAnswer() :- Has_disease(\"Rita Ora\", disease), Harmless(disease).\nAnswer() :- Has_disease(\"Rita Ora\", \"strep throat\"), Surgery(\"Rita Ora\", year), year >= 2020.\n.output Answer"]}
{"id": 1762, "answer": false, "completion": ".decl Competes_in_series(Driver:symbol, Series:symbol)\nCompetes_in_series(\"William Franklyn-Miller\", \"Formula 4\").\n.decl Series_champion(Series:symbol, Driver:symbol)\nSeries_champion(\"Nascar Cup Series\", \"Chase Elliott\").\n.decl Answer()\nAnswer() :- Competes_in_series(\"William Franklyn-Miller\", \"Nascar Cup Series\"), Series_champion(\"Nascar Cup Series\", champion), champion != \"William Franklyn-Miller\".\n.output Answer", "completions": [".decl Competes_in_series(Driver:symbol, Series:symbol)\nCompetes_in_series(\"William Franklyn-Miller\", \"Formula 4\").\n.decl Series_champion(Series:symbol, Driver:symbol)\nSeries_champion(\"Nascar Cup Series\", \"Chase Elliott\").\n.decl Answer()\nAnswer() :- Competes_in_series(\"William Franklyn-Miller\", \"Nascar Cup Series\"), Series_champion(\"Nascar Cup Series\", champion), champion != \"William Franklyn-Miller\".\n.output Answer"]}
{"id": 1763, "answer": true, "completion": ".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Powerpuff Girls\", \"pink\").\nHas_color(\"Powerpuff Girls\", \"blue\").\nHas_color(\"Powerpuff Girls\", \"green\").\nHas_color(\"Azerbaijani flag\", \"blue\").\nHas_color(\"Azerbaijani flag\", \"red\").\nHas_color(\"Azerbaijani flag\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"Powerpuff Girls\", color), !Has_color(\"Azerbaijani flag\", color).\n.output Answer", "completions": [".decl Has_color(Object:symbol, Color:symbol)\nHas_color(\"Powerpuff Girls\", \"pink\").\nHas_color(\"Powerpuff Girls\", \"blue\").\nHas_color(\"Powerpuff Girls\", \"green\").\nHas_color(\"Azerbaijani flag\", \"blue\").\nHas_color(\"Azerbaijani flag\", \"red\").\nHas_color(\"Azerbaijani flag\", \"green\").\n.decl Answer()\nAnswer() :- Has_color(\"Powerpuff Girls\", color), !Has_color(\"Azerbaijani flag\", color).\n.output Answer"]}
{"id": 1764, "answer": false, "completion": ".decl Capacity(Venue:symbol, Capacity:float)\nCapacity(\"Los Angeles Memorial Sports Arena\", 16000).\n.decl Suitable_for(Event:symbol, Venue:symbol)\nSuitable_for(\"Coachella\", \"Empire Polo Club\").\n.decl Answer()\nAnswer() :- Suitable_for(\"Coachella\", event_venue), Capacity(\"Los Angeles Memorial Sports Arena\", capacity1), Capacity(event_venue, capacity2), capacity1 < capacity2.\n.output Answer", "completions": [".decl Capacity(Venue:symbol, Capacity:float)\nCapacity(\"Los Angeles Memorial Sports Arena\", 16000).\n.decl Suitable_for(Event:symbol, Venue:symbol)\nSuitable_for(\"Coachella\", \"Empire Polo Club\").\n.decl Answer()\nAnswer() :- Suitable_for(\"Coachella\", event_venue), Capacity(\"Los Angeles Memorial Sports Arena\", capacity1), Capacity(event_venue, capacity2), capacity1 < capacity2.\n.output Answer"]}
{"id": 1765, "answer": false, "completion": ".decl Graduated_from(Person:symbol, Institution:symbol)\nGraduated_from(\"Moon Jae-in\", \"Kyung Hee University\").\nGraduated_from(\"Moon Jae-in\", \"Hankuk University of Foreign Studies\").\n.decl Earned_degree(Person:symbol, Degree:symbol)\nEarned_degree(\"Moon Jae-in\", \"Law\").\n.decl Answer()\nAnswer() :- Graduated_from(\"Moon Jae-in\", institution), Earned_degree(\"Moon Jae-in\", \"Abitur\"), institution != \"Kyung Hee University\", institution != \"Hankuk University of Foreign Studies\".\n.output Answer", "completions": [".decl Graduated_from(Person:symbol, Institution:symbol)\nGraduated_from(\"Moon Jae-in\", \"Kyung Hee University\").\nGraduated_from(\"Moon Jae-in\", \"Hankuk University of Foreign Studies\").\n.decl Earned_degree(Person:symbol, Degree:symbol)\nEarned_degree(\"Moon Jae-in\", \"Law\").\n.decl Answer()\nAnswer() :- Graduated_from(\"Moon Jae-in\", institution), Earned_degree(\"Moon Jae-in\", \"Abitur\"), institution != \"Kyung Hee University\", institution != \"Hankuk University of Foreign Studies\".\n.output Answer"]}
{"id": 1766, "answer": false, "completion": ".decl Popularity(Sport:symbol, State:symbol, Popularity:float)\nPopularity(\"Bandy\", \"Minnesota\", 0.8).\nPopularity(\"Football\", \"Texas\", 0.9).\n.decl Answer()\nAnswer() :- Popularity(\"Bandy\", state1, popularity1), Popularity(\"Football\", \"Texas\", popularity2), popularity1 >= popularity2, state1 != \"Texas\".\n.output Answer", "completions": [".decl Popularity(Sport:symbol, State:symbol, Popularity:float)\nPopularity(\"Bandy\", \"Minnesota\", 0.8).\nPopularity(\"Football\", \"Texas\", 0.9).\n.decl Answer()\nAnswer() :- Popularity(\"Bandy\", state1, popularity1), Popularity(\"Football\", \"Texas\", popularity2), popularity1 >= popularity2, state1 != \"Texas\".\n.output Answer"]}
{"id": 1767, "answer": true, "completion": ".decl Can_rover_reach(Rover:symbol, Location:symbol)\nCan_rover_reach(\"Curiosity\", \"Gale Crater\").\nCan_rover_reach(\"Curiosity\", \"Lacus Temporis\").\n.decl Has_rock_samples(Location:symbol)\nHas_rock_samples(\"Gale Crater\").\n.decl Answer()\nAnswer() :- Can_rover_reach(\"Curiosity\", location), Has_rock_samples(location).\n.output Answer", "completions": [".decl Can_rover_reach(Rover:symbol, Location:symbol)\nCan_rover_reach(\"Curiosity\", \"Gale Crater\").\nCan_rover_reach(\"Curiosity\", \"Lacus Temporis\").\n.decl Has_rock_samples(Location:symbol)\nHas_rock_samples(\"Gale Crater\").\n.decl Answer()\nAnswer() :- Can_rover_reach(\"Curiosity\", location), Has_rock_samples(location).\n.output Answer"]}
{"id": 1768, "answer": true, "completion": ".decl Causes_disease(Removal:symbol, Disease:symbol)\nCauses_disease(\"pancreas removal\", \"diabetes\").\n.decl Causes_financial_loss(Disease:symbol, Loss:float)\nCauses_financial_loss(\"diabetes\", 10000).\n.decl Answer()\nAnswer() :- Causes_disease(\"pancreas removal\", disease), Causes_financial_loss(disease, loss), loss > 5000.\n.output Answer", "completions": [".decl Causes_disease(Removal:symbol, Disease:symbol)\nCauses_disease(\"pancreas removal\", \"diabetes\").\n.decl Causes_financial_loss(Disease:symbol, Loss:float)\nCauses_financial_loss(\"diabetes\", 10000).\n.decl Answer()\nAnswer() :- Causes_disease(\"pancreas removal\", disease), Causes_financial_loss(disease, loss), loss > 5000.\n.output Answer"]}
{"id": 1769, "answer": true, "completion": ".decl Helps_with_condition(Medicine:symbol, Condition:symbol)\nHelps_with_condition(\"sunscreen\", \"skin cancer\").\n.decl Worsens_condition(Medicine:symbol, Condition:symbol)\nWorsens_condition(\"sunscreen\", \"melanoma\").\n.decl Answer()\nAnswer() :- Worsens_condition(\"sunscreen\", \"melanoma\").\n.output Answer", "completions": [".decl Helps_with_condition(Medicine:symbol, Condition:symbol)\nHelps_with_condition(\"sunscreen\", \"skin cancer\").\n.decl Worsens_condition(Medicine:symbol, Condition:symbol)\nWorsens_condition(\"sunscreen\", \"melanoma\").\n.decl Answer()\nAnswer() :- Worsens_condition(\"sunscreen\", \"melanoma\").\n.output Answer"]}
{"id": 1770, "answer": true, "completion": ".decl Attends(Person:symbol, School:symbol)\nAttends(\"Lord Voldemort\", \"Hogwarts\").\n.decl Bans(School:symbol, Action:symbol)\nBans(\"Hogwarts\", \"Muggle-borns\").\nBans(\"Hogwarts\", \"Half-breeds\").\nBans(\"Hogwarts\", \"Werewolves\").\n.decl Answer()\nAnswer() :- Attends(person, school), Bans(school, action), action = \"Muggle-borns\".\nAnswer() :- Attends(person, school), Bans(school, action), action = \"Half-breeds\".\nAnswer() :- Attends(person, school), Bans(school, action), action = \"Werewolves\".\n.output Answer", "completions": [".decl Attends(Person:symbol, School:symbol)\nAttends(\"Lord Voldemort\", \"Hogwarts\").\n.decl Bans(School:symbol, Action:symbol)\nBans(\"Hogwarts\", \"Muggle-borns\").\nBans(\"Hogwarts\", \"Half-breeds\").\nBans(\"Hogwarts\", \"Werewolves\").\n.decl Answer()\nAnswer() :- Attends(person, school), Bans(school, action), action = \"Muggle-borns\".\nAnswer() :- Attends(person, school), Bans(school, action), action = \"Half-breeds\".\nAnswer() :- Attends(person, school), Bans(school, action), action = \"Werewolves\".\n.output Answer"]}
{"id": 1771, "answer": true, "completion": ".decl Sells(Item:symbol, Location:symbol)\nSells(\"moon cakes\", \"Chinatown, Manhattan\").\n.decl Answer()\nAnswer() :- Sells(\"moon cakes\", location).\n.output Answer", "completions": [".decl Sells(Item:symbol, Location:symbol)\nSells(\"moon cakes\", \"Chinatown, Manhattan\").\n.decl Answer()\nAnswer() :- Sells(\"moon cakes\", location).\n.output Answer"]}
{"id": 1772, "answer": true, "completion": ".decl Is_president_of(Person:symbol, Country:symbol)\nIs_president_of(\"Andres Manuel Lopez Obrador\", \"Mexico\").\n.decl Can_vote_in_primaries(Person:symbol, State:symbol)\nCan_vote_in_primaries(\"Andres Manuel Lopez Obrador\", \"New Mexico\").\n.decl Answer()\nAnswer() :- Is_president_of(person, \"Mexico\"), Can_vote_in_primaries(person, \"New Mexico\").\n.output Answer", "completions": [".decl Is_president_of(Person:symbol, Country:symbol)\nIs_president_of(\"Andres Manuel Lopez Obrador\", \"Mexico\").\n.decl Can_vote_in_primaries(Person:symbol, State:symbol)\nCan_vote_in_primaries(\"Andres Manuel Lopez Obrador\", \"New Mexico\").\n.decl Answer()\nAnswer() :- Is_president_of(person, \"Mexico\"), Can_vote_in_primaries(person, \"New Mexico\").\n.output Answer"]}
{"id": 1773, "answer": false, "completion": ".decl Is_print_of(Artwork:symbol, Artist:symbol)\nIs_print_of(\"Starry Night print\", \"Van Gogh\").\n.decl Is_valuable(Artwork:symbol)\nIs_valuable(\"Starry Night print\").\n.decl Answer()\nAnswer() :- Is_print_of(artwork, \"Van Gogh\"), Is_valuable(artwork).\n.output Answer", "completions": [".decl Is_print_of(Artwork:symbol, Artist:symbol)\nIs_print_of(\"Starry Night print\", \"Van Gogh\").\n.decl Is_valuable(Artwork:symbol)\nIs_valuable(\"Starry Night print\").\n.decl Answer()\nAnswer() :- Is_print_of(artwork, \"Van Gogh\"), Is_valuable(artwork).\n.output Answer"]}
{"id": 1774, "answer": false, "completion": ".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"John George Bice\", \"Devon\").\n.decl Near(Place1:symbol, Place2:symbol)\nNear(\"Devon\", \"Cornwall\").\n.decl Answer()\nAnswer() :- Born_in(\"John George Bice\", place), Near(place, \"Cornwall\").\n.output Answer", "completions": [".decl Born_in(Person:symbol, Place:symbol)\nBorn_in(\"John George Bice\", \"Devon\").\n.decl Near(Place1:symbol, Place2:symbol)\nNear(\"Devon\", \"Cornwall\").\n.decl Answer()\nAnswer() :- Born_in(\"John George Bice\", place), Near(place, \"Cornwall\").\n.output Answer"]}
{"id": 1775, "answer": false, "completion": "Sorry, we cannot answer this question as it involves predicting the future actions of individuals, which is beyond the scope of factual knowledge and logical reasoning.", "completions": ["Sorry, we cannot answer this question as it involves predicting the future actions of individuals, which is beyond the scope of factual knowledge and logical reasoning."]}
{"id": 1776, "answer": false, "completion": ".decl Has_ability(Character:symbol, Ability:symbol)\nHas_ability(\"Lord Voldemort\", \"dark magic\").\n.decl Affected_by_spell(Character:symbol, Spell:symbol)\nAffected_by_spell(\"Lord Voldemort\", \"Avada Kedavra\").\n.decl Answer()\nAnswer() :- Has_ability(\"Lord Voldemort\", ability), !Affected_by_spell(\"Lord Voldemort\", \"silence\"), !Affected_by_spell(\"Final Fantasy\", \"silence\"), ability = \"dark magic\".\n.output Answer", "completions": [".decl Has_ability(Character:symbol, Ability:symbol)\nHas_ability(\"Lord Voldemort\", \"dark magic\").\n.decl Affected_by_spell(Character:symbol, Spell:symbol)\nAffected_by_spell(\"Lord Voldemort\", \"Avada Kedavra\").\n.decl Answer()\nAnswer() :- Has_ability(\"Lord Voldemort\", ability), !Affected_by_spell(\"Lord Voldemort\", \"silence\"), !Affected_by_spell(\"Final Fantasy\", \"silence\"), ability = \"dark magic\".\n.output Answer"]}
{"id": 1777, "answer": false, "completion": ".decl Sells(Item:symbol, Store:symbol)\nSells(\"chlorine\", \"pool supply store\").\nSells(\"toilet cleaner\", \"dollar store\").\n.decl Answer()\nAnswer() :- Sells(\"chlorine\", store), store = \"dollar store\".\n.output Answer", "completions": [".decl Sells(Item:symbol, Store:symbol)\nSells(\"chlorine\", \"pool supply store\").\nSells(\"toilet cleaner\", \"dollar store\").\n.decl Answer()\nAnswer() :- Sells(\"chlorine\", store), store = \"dollar store\".\n.output Answer"]}
{"id": 1778, "answer": true, "completion": ".decl Viable_execution_method(Method:symbol, Location:symbol)\nViable_execution_method(\"hanging\", \"land\").\nViable_execution_method(\"firing squad\", \"sea\").\nViable_execution_method(\"beheading\", \"land\").\n.decl Answer()\nAnswer() :- Viable_execution_method(\"hanging\", location), !Viable_execution_method(\"hanging\", \"sea\").\n.output Answer", "completions": [".decl Viable_execution_method(Method:symbol, Location:symbol)\nViable_execution_method(\"hanging\", \"land\").\nViable_execution_method(\"firing squad\", \"sea\").\nViable_execution_method(\"beheading\", \"land\").\n.decl Answer()\nAnswer() :- Viable_execution_method(\"hanging\", location), !Viable_execution_method(\"hanging\", \"sea\").\n.output Answer"]}
{"id": 1779, "answer": false, "completion": ".decl Has_character(Company:symbol, Character:symbol)\nHas_character(\"Disney\", \"Elsa\").\nHas_character(\"Disney\", \"Mickey Mouse\").\n.decl Answer()\nAnswer() :- Has_character(\"Disney\", \"Elsa\").\n.output Answer", "completions": [".decl Has_character(Company:symbol, Character:symbol)\nHas_character(\"Disney\", \"Elsa\").\nHas_character(\"Disney\", \"Mickey Mouse\").\n.decl Answer()\nAnswer() :- Has_character(\"Disney\", \"Elsa\").\n.output Answer"]}
{"id": 1780, "answer": false, "completion": ".decl Is_safe_to_eat(Food:symbol)\n!Is_safe_to_eat(\"hair\").\n.decl Answer()\nAnswer() :- Is_safe_to_eat(food), food != \"hair\".\n.output Answer", "completions": [".decl Is_safe_to_eat(Food:symbol)\n!Is_safe_to_eat(\"hair\").\n.decl Answer()\nAnswer() :- Is_safe_to_eat(food), food != \"hair\".\n.output Answer"]}
{"id": 1781, "answer": true, "completion": ".decl Uses_currency(Country:symbol, Currency:symbol)\nUses_currency(\"Canada\", \"Canadian dollar\").\nUses_currency(\"USA\", \"US dollar\").\n.decl Answer()\nAnswer() :- Uses_currency(\"Canada\", currency), currency = \"Canadian dollar\".\n.output Answer", "completions": [".decl Uses_currency(Country:symbol, Currency:symbol)\nUses_currency(\"Canada\", \"Canadian dollar\").\nUses_currency(\"USA\", \"US dollar\").\n.decl Answer()\nAnswer() :- Uses_currency(\"Canada\", currency), currency = \"Canadian dollar\".\n.output Answer"]}
{"id": 1782, "answer": false, "completion": ".decl Monster_name(Name:symbol)\nMonster_name(\"Asanbosam\").\n.decl Has_letter_score(Letter:symbol, Score:float)\nHas_letter_score(\"A\", 1).\nHas_letter_score(\"S\", 1).\nHas_letter_score(\"N\", 1).\nHas_letter_score(\"B\", 3).\nHas_letter_score(\"O\", 1).\nHas_letter_score(\"M\", 3).\n.decl Scrabble_score(Name:symbol, Score:float)\nScrabble_score(Name, score) :- Monster_name(Name), Name = \"Asanbosam\", Has_letter_score(\"A\", score1), Has_letter_score(\"S\", score2), Has_letter_score(\"N\", score3), Has_letter_score(\"B\", score4), Has_letter_score(\"O\", score5), Has_letter_score(\"M\", score6), Score = score1 + score2 + score3 + score4 + score5 + score6.\n.decl Answer()\nAnswer() :- Scrabble_score(Name, score), score > 20.\n.output Answer", "completions": [".decl Monster_name(Name:symbol)\nMonster_name(\"Asanbosam\").\n.decl Has_letter_score(Letter:symbol, Score:float)\nHas_letter_score(\"A\", 1).\nHas_letter_score(\"S\", 1).\nHas_letter_score(\"N\", 1).\nHas_letter_score(\"B\", 3).\nHas_letter_score(\"O\", 1).\nHas_letter_score(\"M\", 3).\n.decl Scrabble_score(Name:symbol, Score:float)\nScrabble_score(Name, score) :- Monster_name(Name), Name = \"Asanbosam\", Has_letter_score(\"A\", score1), Has_letter_score(\"S\", score2), Has_letter_score(\"N\", score3), Has_letter_score(\"B\", score4), Has_letter_score(\"O\", score5), Has_letter_score(\"M\", score6), Score = score1 + score2 + score3 + score4 + score5 + score6.\n.decl Answer()\nAnswer() :- Scrabble_score(Name, score), score > 20.\n.output Answer"]}
{"id": 1783, "answer": true, "completion": ".decl Found_in_title(Plant:symbol, Title:symbol)\nFound_in_title(\"rosemary\", \"Scarborough Fair\").\nFound_in_title(\"daisy\", \"Daisy Bell\").\nFound_in_title(\"lilac\", \"Lilac Wine\").\nFound_in_title(\"tulip\", \"Tiptoe Through the Tulips\").\n.decl Num_titles(Plant:symbol, Num:float)\nNum_titles(\"rosemary\", 10).\nNum_titles(\"daisy\", 20).\nNum_titles(\"lilac\", 5).\nNum_titles(\"tulip\", 15).\n.decl Answer()\nAnswer() :- Num_titles(\"rosemary\", num1), Num_titles(plant2, num2), Found_in_title(plant2, title), num2 > num1.\n.output Answer", "completions": [".decl Found_in_title(Plant:symbol, Title:symbol)\nFound_in_title(\"rosemary\", \"Scarborough Fair\").\nFound_in_title(\"daisy\", \"Daisy Bell\").\nFound_in_title(\"lilac\", \"Lilac Wine\").\nFound_in_title(\"tulip\", \"Tiptoe Through the Tulips\").\n.decl Num_titles(Plant:symbol, Num:float)\nNum_titles(\"rosemary\", 10).\nNum_titles(\"daisy\", 20).\nNum_titles(\"lilac\", 5).\nNum_titles(\"tulip\", 15).\n.decl Answer()\nAnswer() :- Num_titles(\"rosemary\", num1), Num_titles(plant2, num2), Found_in_title(plant2, title), num2 > num1.\n.output Answer"]}
{"id": 1784, "answer": true, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person1\", \"St. Vitus's Dance\").\n.decl Participates_in_competition(Person:symbol, Competition:symbol)\nParticipates_in_competition(\"person2\", \"ballet competition\").\n.decl Answer()\nAnswer() :- Has_condition(person1, \"St. Vitus's Dance\"), Participates_in_competition(person2, \"ballet competition\"), person1 != person2.\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person1\", \"St. Vitus's Dance\").\n.decl Participates_in_competition(Person:symbol, Competition:symbol)\nParticipates_in_competition(\"person2\", \"ballet competition\").\n.decl Answer()\nAnswer() :- Has_condition(person1, \"St. Vitus's Dance\"), Participates_in_competition(person2, \"ballet competition\"), person1 != person2.\n.output Answer"]}
{"id": 1785, "answer": false, "completion": ".decl Is_part_of(Object:symbol, Group:symbol)\nIs_part_of(\"Phobos\", \"Mars\").\nIs_part_of(\"Mars\", \"solar system\").\nIs_part_of(\"Andromeda galaxy\", \"galaxy cluster\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Phobos\", group1), Is_part_of(group1, group2), Is_part_of(\"Andromeda galaxy\", group2).\n.output Answer", "completions": [".decl Is_part_of(Object:symbol, Group:symbol)\nIs_part_of(\"Phobos\", \"Mars\").\nIs_part_of(\"Mars\", \"solar system\").\nIs_part_of(\"Andromeda galaxy\", \"galaxy cluster\").\n.decl Answer()\nAnswer() :- Is_part_of(\"Phobos\", group1), Is_part_of(group1, group2), Is_part_of(\"Andromeda galaxy\", group2).\n.output Answer"]}
{"id": 1786, "answer": false, "completion": ".decl Equivalent_gods(God1:symbol, God2:symbol)\nEquivalent_gods(\"Hermes\", \"Mercury\").\nEquivalent_gods(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Equivalent_gods(\"Hermes\", roman_god), Equivalent_gods(roman_god, \"Vulcan\").\n.output Answer", "completions": [".decl Equivalent_gods(God1:symbol, God2:symbol)\nEquivalent_gods(\"Hermes\", \"Mercury\").\nEquivalent_gods(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Equivalent_gods(\"Hermes\", roman_god), Equivalent_gods(roman_god, \"Vulcan\").\n.output Answer"]}
{"id": 1787, "answer": false, "completion": ".decl Suitable_as_present(Animal:symbol, Age:float)\nSuitable_as_present(\"ocelot\", 0) :- !.\nSuitable_as_present(\"ocelot\", age) :- age > 5.\n.decl Answer()\nAnswer() :- Suitable_as_present(\"ocelot\", 5).\n.output Answer", "completions": [".decl Suitable_as_present(Animal:symbol, Age:float)\nSuitable_as_present(\"ocelot\", 0) :- !.\nSuitable_as_present(\"ocelot\", age) :- age > 5.\n.decl Answer()\nAnswer() :- Suitable_as_present(\"ocelot\", 5).\n.output Answer"]}
{"id": 1788, "answer": false, "completion": ".decl Part_of(Area:symbol, Army:symbol)\nPart_of(\"Alaska\", \"none\").\n.decl Answer()\nAnswer() :- Part_of(\"Alaska\", army), army != \"Northern Army\".\n.output Answer", "completions": [".decl Part_of(Area:symbol, Army:symbol)\nPart_of(\"Alaska\", \"none\").\n.decl Answer()\nAnswer() :- Part_of(\"Alaska\", army), army != \"Northern Army\".\n.output Answer"]}
{"id": 1789, "answer": false, "completion": ".decl Likes(Person:symbol, Holiday:symbol)\nLikes(\"Bacchus\", \"Mardi Gras\").\n.decl Answer()\nAnswer() :- Likes(\"Bacchus\", holiday), holiday = \"New Year's Eve\".\n.output Answer", "completions": [".decl Likes(Person:symbol, Holiday:symbol)\nLikes(\"Bacchus\", \"Mardi Gras\").\n.decl Answer()\nAnswer() :- Likes(\"Bacchus\", holiday), holiday = \"New Year's Eve\".\n.output Answer"]}
{"id": 1790, "answer": false, "completion": ".decl Is_similar(God1:symbol, God2:symbol)\nIs_similar(\"Poseidon\", \"Neptune\").\nIs_similar(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Is_similar(\"Poseidon\", god2), Is_similar(\"Vulcan\", god2).\n.output Answer", "completions": [".decl Is_similar(God1:symbol, God2:symbol)\nIs_similar(\"Poseidon\", \"Neptune\").\nIs_similar(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Is_similar(\"Poseidon\", god2), Is_similar(\"Vulcan\", god2).\n.output Answer"]}
{"id": 1791, "answer": false, "completion": ".decl Happens_during(Event:symbol, Time_period:symbol)\nHappens_during(\"Oregon Trail\", \"1840s\").\nHappens_during(\"sea shanties\", \"18th century\").\n.decl Answer()\nAnswer() :- Happens_during(\"Oregon Trail\", time_period), Happens_during(\"sea shanties\", time_period).\n.output Answer", "completions": [".decl Happens_during(Event:symbol, Time_period:symbol)\nHappens_during(\"Oregon Trail\", \"1840s\").\nHappens_during(\"sea shanties\", \"18th century\").\n.decl Answer()\nAnswer() :- Happens_during(\"Oregon Trail\", time_period), Happens_during(\"sea shanties\", time_period).\n.output Answer"]}
{"id": 1792, "answer": true, "completion": ".decl Treats(Disease:symbol, Treatment:symbol)\nTreats(\"HIV\", \"antiretroviral therapy\").\nTreats(\"cancer\", \"chemotherapy\").\n.decl Answer()\nAnswer() :- Treats(\"HIV\", treatment), treatment != \"morphine\".\n.output Answer", "completions": [".decl Treats(Disease:symbol, Treatment:symbol)\nTreats(\"HIV\", \"antiretroviral therapy\").\nTreats(\"cancer\", \"chemotherapy\").\n.decl Answer()\nAnswer() :- Treats(\"HIV\", treatment), treatment != \"morphine\".\n.output Answer"]}
{"id": 1793, "answer": true, "completion": ".decl Directed_by(Movie:symbol, Director:symbol)\nDirected_by(\"The Matrix\", \"Lana Wachowski\").\nDirected_by(\"The Matrix\", \"Lilly Wachowski\").\n.decl Advocates_for(Director:symbol, Cause:symbol)\nAdvocates_for(\"Lana Wachowski\", \"transgender rights\").\nAdvocates_for(\"Lilly Wachowski\", \"transgender rights\").\n.decl Answer()\nAnswer() :- Directed_by(\"The Matrix\", director), Advocates_for(director, \"transgender rights\").\n.output Answer", "completions": [".decl Directed_by(Movie:symbol, Director:symbol)\nDirected_by(\"The Matrix\", \"Lana Wachowski\").\nDirected_by(\"The Matrix\", \"Lilly Wachowski\").\n.decl Advocates_for(Director:symbol, Cause:symbol)\nAdvocates_for(\"Lana Wachowski\", \"transgender rights\").\nAdvocates_for(\"Lilly Wachowski\", \"transgender rights\").\n.decl Answer()\nAnswer() :- Directed_by(\"The Matrix\", director), Advocates_for(director, \"transgender rights\").\n.output Answer"]}
{"id": 1794, "answer": false, "completion": ".decl Has_menu(Restaurant:symbol, Menu:symbol)\nHas_menu(\"Chinese Starbucks\", \"tea, coffee, pastries\").\nHas_menu(\"American Starbucks\", \"coffee, tea, pastries, sandwiches\").\n.decl Answer()\nAnswer() :- Has_menu(\"Chinese Starbucks\", menu), !Has_menu(\"American Starbucks\", !menu).\n.output Answer", "completions": [".decl Has_menu(Restaurant:symbol, Menu:symbol)\nHas_menu(\"Chinese Starbucks\", \"tea, coffee, pastries\").\nHas_menu(\"American Starbucks\", \"coffee, tea, pastries, sandwiches\").\n.decl Answer()\nAnswer() :- Has_menu(\"Chinese Starbucks\", menu), !Has_menu(\"American Starbucks\", !menu).\n.output Answer"]}
{"id": 1795, "answer": false, "completion": ".decl Uses(Item:symbol, Character:symbol)\nUses(\"mushroom\", \"Mario\").\n.decl Increases_speed(Item:symbol)\nIncreases_speed(\"mushroom\").\n.decl Answer()\nAnswer() :- Uses(item, \"Mario\"), Increases_speed(item).\n.output Answer", "completions": [".decl Uses(Item:symbol, Character:symbol)\nUses(\"mushroom\", \"Mario\").\n.decl Increases_speed(Item:symbol)\nIncreases_speed(\"mushroom\").\n.decl Answer()\nAnswer() :- Uses(item, \"Mario\"), Increases_speed(item).\n.output Answer"]}
{"id": 1796, "answer": false, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"child\", 10).\n.decl Ranks(Rank:symbol, Military_branch:symbol)\nRanks(\"lieutenant\", \"Army\").\nRanks(\"captain\", \"Navy\").\nRanks(\"major\", \"Air Force\").\n.decl Answer()\nAnswer() :- Age(\"child\", age), Ranks(\"lieutenant\", military_branch), age >= 18, military_branch = \"Army\".\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"child\", 10).\n.decl Ranks(Rank:symbol, Military_branch:symbol)\nRanks(\"lieutenant\", \"Army\").\nRanks(\"captain\", \"Navy\").\nRanks(\"major\", \"Air Force\").\n.decl Answer()\nAnswer() :- Age(\"child\", age), Ranks(\"lieutenant\", military_branch), age >= 18, military_branch = \"Army\".\n.output Answer"]}
{"id": 1797, "answer": true, "completion": ".decl Keyboard_layout(Layout:symbol, Speed:symbol)\nKeyboard_layout(\"QWERTY\", \"slow\").\nKeyboard_layout(\"Dvorak\", \"fast\").\n.decl Answer()\nAnswer() :- Keyboard_layout(\"QWERTY\", speed).\n.output Answer", "completions": [".decl Keyboard_layout(Layout:symbol, Speed:symbol)\nKeyboard_layout(\"QWERTY\", \"slow\").\nKeyboard_layout(\"Dvorak\", \"fast\").\n.decl Answer()\nAnswer() :- Keyboard_layout(\"QWERTY\", speed).\n.output Answer"]}
{"id": 1798, "answer": false, "completion": ".decl Political_party(Person:symbol, Party:symbol)\nPolitical_party(\"Nancy Pelosi\", \"Democratic Party\").\nPolitical_party(\"Gerald Ford\", \"Republican Party\").\n.decl Answer()\nAnswer() :- Political_party(\"Nancy Pelosi\", party1), Political_party(\"Gerald Ford\", party2), party1 != party2.\n.output Answer", "completions": [".decl Political_party(Person:symbol, Party:symbol)\nPolitical_party(\"Nancy Pelosi\", \"Democratic Party\").\nPolitical_party(\"Gerald Ford\", \"Republican Party\").\n.decl Answer()\nAnswer() :- Political_party(\"Nancy Pelosi\", party1), Political_party(\"Gerald Ford\", party2), party1 != party2.\n.output Answer"]}
{"id": 1799, "answer": false, "completion": ".decl Prevents_growth(Plant_A:symbol, Plant_B:symbol)\nPrevents_growth(\"sweet potato\", \"weed\").\n.decl Answer()\nAnswer() :- Prevents_growth(\"sweet potato\", plant).\n.output Answer", "completions": [".decl Prevents_growth(Plant_A:symbol, Plant_B:symbol)\nPrevents_growth(\"sweet potato\", \"weed\").\n.decl Answer()\nAnswer() :- Prevents_growth(\"sweet potato\", plant).\n.output Answer"]}
{"id": 1800, "answer": false, "completion": ".decl Has_spinal_cord(Animal:symbol)\nHas_spinal_cord(\"hedgehog\").\nHas_spinal_cord(\"cat\").\nHas_spinal_cord(\"dog\").\n.decl No_spinal_cord(Animal:symbol)\nNo_spinal_cord(\"worm\").\nNo_spinal_cord(\"jellyfish\").\nNo_spinal_cord(\"snail\").\n.decl Avoids(Animal_A:symbol, Animal_B:symbol)\nAvoids(Animal_A, Animal_B) :- Has_spinal_cord(Animal_A), No_spinal_cord(Animal_B).\n.decl Answer()\nAnswer() :- Avoids(\"hedgehog\", animal), !Has_spinal_cord(animal).\n.output Answer", "completions": [".decl Has_spinal_cord(Animal:symbol)\nHas_spinal_cord(\"hedgehog\").\nHas_spinal_cord(\"cat\").\nHas_spinal_cord(\"dog\").\n.decl No_spinal_cord(Animal:symbol)\nNo_spinal_cord(\"worm\").\nNo_spinal_cord(\"jellyfish\").\nNo_spinal_cord(\"snail\").\n.decl Avoids(Animal_A:symbol, Animal_B:symbol)\nAvoids(Animal_A, Animal_B) :- Has_spinal_cord(Animal_A), No_spinal_cord(Animal_B).\n.decl Answer()\nAnswer() :- Avoids(\"hedgehog\", animal), !Has_spinal_cord(animal).\n.output Answer"]}
{"id": 1801, "answer": false, "completion": ".decl Causes(Symptom:symbol, Cause:symbol)\nCauses(\"paresthesia\", \"nerve damage\").\nCauses(\"nerve damage\", \"trauma\").\nCauses(\"white pigment\", \"chemical exposure\").\n.decl Answer()\nAnswer() :- Causes(\"paresthesia\", cause1), Causes(cause1, cause2), Causes(\"white pigment\", cause2).\n.output Answer", "completions": [".decl Causes(Symptom:symbol, Cause:symbol)\nCauses(\"paresthesia\", \"nerve damage\").\nCauses(\"nerve damage\", \"trauma\").\nCauses(\"white pigment\", \"chemical exposure\").\n.decl Answer()\nAnswer() :- Causes(\"paresthesia\", cause1), Causes(cause1, cause2), Causes(\"white pigment\", cause2).\n.output Answer"]}
{"id": 1802, "answer": false, "completion": ".decl Descends_from(Person:symbol, Ancestor:symbol)\nDescends_from(\"Mary, Queen of Scots\", \"Mary of Guise\").\nDescends_from(\"Mary of Guise\", \"Claude, Duke of Guise\").\nDescends_from(\"Claude, Duke of Guise\", \"René II, Duke of Lorraine\").\nDescends_from(\"René II, Duke of Lorraine\", \"Isabella, Duchess of Lorraine\").\nDescends_from(\"Isabella, Duchess of Lorraine\", \"René I, Duke of Lorraine\").\nDescends_from(\"René I, Duke of Lorraine\", \"Yolande of Aragon\").\nDescends_from(\"Yolande of Aragon\", \"John I, Count of Foix\").\nDescends_from(\"John I, Count of Foix\", \"Gaston I, Count of Foix\").\nDescends_from(\"Gaston I, Count of Foix\", \"Roger-Bernard III, Count of Foix\").\nDescends_from(\"Roger-Bernard III, Count of Foix\", \"Roger II, Count of Foix\").\nDescends_from(\"Roger II, Count of Foix\", \"Roger I, Count of Foix\").\nDescends_from(\"Roger I, Count of Foix\", \"Bernard-Roger, Count of Foix\").\nDescends_from(\"Bernard-Roger, Count of Foix\", \"Roger I, Count of Carcassonne\").\nDescends_from(\"Roger I, Count of Carcassonne\", \"Adelaide of Melgueil\").\nDescends_from(\"Adelaide of Melgueil\", \"Guilhem I, Lord of Montpellier\").\nDescends_from(\"Guilhem I, Lord of Montpellier\", \"Guilhem III, Lord of Montpellier\").\nDescends_from(\"Guilhem III, Lord of Montpellier\", \"Guilhem II, Lord of Montpellier\").\nDescends_from(\"Guilhem II, Lord of Montpellier\", \"William IV, Count of Toulouse\").\nDescends_from(\"William IV, Count of Toulouse\", \"Pons, Count of Toulouse\").\nDescends_from(\"Pons, Count of Toulouse\", \"Raymond IV, Count of Toulouse\").\nDescends_from(\"Raymond IV, Count of Toulouse\", \"Almodis de la Marche\").\nDescends_from(\"Almodis de la Marche\", \"Arnaldo, Count of Marmande\").\nDescends_from(\"Arnaldo, Count of Marmande\", \"Roger I, Count of Carcassonne\").\n.decl Has_origin(Person:symbol, Origin:symbol)\nHas_origin(\"Scottish people\", \"Scotland\").\nHas_origin(\"Mary, Queen of Scots\", \"Scotland\").\nHas_origin(\"Mary of Guise\", \"Lorraine\").\nHas_origin(\"Claude, Duke of Guise\", \"Lorraine\").\nHas_origin(\"René II, Duke of Lorraine\", \"Lorraine\").\nHas_origin(\"Isabella, Duchess of Lorraine\", \"Lorraine\").\nHas_origin(\"René I, Duke of Lorraine\", \"Lorraine\").\nHas_origin(\"Yolande of Aragon\", \"Aragon\").\nHas_origin(\"John I, Count of Foix\", \"Foix\").\nHas_origin(\"Gaston I, Count of Foix\", \"Foix\").\nHas_origin(\"Roger-Bernard III, Count of Foix\", \"Foix\").\nHas_origin(\"Roger II, Count of Foix\", \"Foix\").\nHas_origin(\"Roger I, Count of Foix\", \"Foix\").\nHas_origin(\"Bernard-Roger, Count of Foix\", \"Foix\").\nHas_origin(\"Roger I, Count of Carcassonne\", \"Carcassonne\").\nHas_origin(\"Adelaide of Melgueil\", \"Melgueil\").\nHas_origin(\"Guilhem I, Lord of Montpellier\", \"Montpellier\").\nHas_origin(\"Guilhem III, Lord of Montpellier\", \"Montpellier\").\nHas_origin(\"Guilhem II, Lord of Montpellier\", \"Montpellier\").\nHas_origin(\"William IV, Count of Toulouse\", \"Toulouse\").\nHas_origin(\"Pons, Count of Toulouse\", \"Toulouse\").\nHas_origin(\"Raymond IV, Count of Toulouse\", \"Toulouse\").\nHas_origin(\"Almodis de la Marche\", \"Marche\").\nHas_origin(\"Arnaldo, Count of Marmande\", \"Marmande\").\n.decl Answer()\nAnswer() :- Descends_from(\"Mary, Queen of Scots\", ancestor), Has_origin(\"Scottish people\", origin), Descends_from(ancestor, ancestor2), Has_origin(ancestor2, origin2), origin = origin2, Has_origin(ancestor, \"France\").\n.output Answer", "completions": [".decl Descends_from(Person:symbol, Ancestor:symbol)\nDescends_from(\"Mary, Queen of Scots\", \"Mary of Guise\").\nDescends_from(\"Mary of Guise\", \"Claude, Duke of Guise\").\nDescends_from(\"Claude, Duke of Guise\", \"René II, Duke of Lorraine\").\nDescends_from(\"René II, Duke of Lorraine\", \"Isabella, Duchess of Lorraine\").\nDescends_from(\"Isabella, Duchess of Lorraine\", \"René I, Duke of Lorraine\").\nDescends_from(\"René I, Duke of Lorraine\", \"Yolande of Aragon\").\nDescends_from(\"Yolande of Aragon\", \"John I, Count of Foix\").\nDescends_from(\"John I, Count of Foix\", \"Gaston I, Count of Foix\").\nDescends_from(\"Gaston I, Count of Foix\", \"Roger-Bernard III, Count of Foix\").\nDescends_from(\"Roger-Bernard III, Count of Foix\", \"Roger II, Count of Foix\").\nDescends_from(\"Roger II, Count of Foix\", \"Roger I, Count of Foix\").\nDescends_from(\"Roger I, Count of Foix\", \"Bernard-Roger, Count of Foix\").\nDescends_from(\"Bernard-Roger, Count of Foix\", \"Roger I, Count of Carcassonne\").\nDescends_from(\"Roger I, Count of Carcassonne\", \"Adelaide of Melgueil\").\nDescends_from(\"Adelaide of Melgueil\", \"Guilhem I, Lord of Montpellier\").\nDescends_from(\"Guilhem I, Lord of Montpellier\", \"Guilhem III, Lord of Montpellier\").\nDescends_from(\"Guilhem III, Lord of Montpellier\", \"Guilhem II, Lord of Montpellier\").\nDescends_from(\"Guilhem II, Lord of Montpellier\", \"William IV, Count of Toulouse\").\nDescends_from(\"William IV, Count of Toulouse\", \"Pons, Count of Toulouse\").\nDescends_from(\"Pons, Count of Toulouse\", \"Raymond IV, Count of Toulouse\").\nDescends_from(\"Raymond IV, Count of Toulouse\", \"Almodis de la Marche\").\nDescends_from(\"Almodis de la Marche\", \"Arnaldo, Count of Marmande\").\nDescends_from(\"Arnaldo, Count of Marmande\", \"Roger I, Count of Carcassonne\").\n.decl Has_origin(Person:symbol, Origin:symbol)\nHas_origin(\"Scottish people\", \"Scotland\").\nHas_origin(\"Mary, Queen of Scots\", \"Scotland\").\nHas_origin(\"Mary of Guise\", \"Lorraine\").\nHas_origin(\"Claude, Duke of Guise\", \"Lorraine\").\nHas_origin(\"René II, Duke of Lorraine\", \"Lorraine\").\nHas_origin(\"Isabella, Duchess of Lorraine\", \"Lorraine\").\nHas_origin(\"René I, Duke of Lorraine\", \"Lorraine\").\nHas_origin(\"Yolande of Aragon\", \"Aragon\").\nHas_origin(\"John I, Count of Foix\", \"Foix\").\nHas_origin(\"Gaston I, Count of Foix\", \"Foix\").\nHas_origin(\"Roger-Bernard III, Count of Foix\", \"Foix\").\nHas_origin(\"Roger II, Count of Foix\", \"Foix\").\nHas_origin(\"Roger I, Count of Foix\", \"Foix\").\nHas_origin(\"Bernard-Roger, Count of Foix\", \"Foix\").\nHas_origin(\"Roger I, Count of Carcassonne\", \"Carcassonne\").\nHas_origin(\"Adelaide of Melgueil\", \"Melgueil\").\nHas_origin(\"Guilhem I, Lord of Montpellier\", \"Montpellier\").\nHas_origin(\"Guilhem III, Lord of Montpellier\", \"Montpellier\").\nHas_origin(\"Guilhem II, Lord of Montpellier\", \"Montpellier\").\nHas_origin(\"William IV, Count of Toulouse\", \"Toulouse\").\nHas_origin(\"Pons, Count of Toulouse\", \"Toulouse\").\nHas_origin(\"Raymond IV, Count of Toulouse\", \"Toulouse\").\nHas_origin(\"Almodis de la Marche\", \"Marche\").\nHas_origin(\"Arnaldo, Count of Marmande\", \"Marmande\").\n.decl Answer()\nAnswer() :- Descends_from(\"Mary, Queen of Scots\", ancestor), Has_origin(\"Scottish people\", origin), Descends_from(ancestor, ancestor2), Has_origin(ancestor2, origin2), origin = origin2, Has_origin(ancestor, \"France\").\n.output Answer"]}
{"id": 1803, "answer": false, "completion": ".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"John Smith\", \"San Antonio\").\n.decl Voted_for(Person:symbol, Candidate:symbol)\nVoted_for(\"John Smith\", \"Hillary Clinton\").\nVoted_for(\"Jane Doe\", \"Boris Johnson\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"San Antonio\"), Voted_for(person, \"Boris Johnson\").\n.output Answer", "completions": [".decl Lives_in(Person:symbol, City:symbol)\nLives_in(\"John Smith\", \"San Antonio\").\n.decl Voted_for(Person:symbol, Candidate:symbol)\nVoted_for(\"John Smith\", \"Hillary Clinton\").\nVoted_for(\"Jane Doe\", \"Boris Johnson\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"San Antonio\"), Voted_for(person, \"Boris Johnson\").\n.output Answer"]}
{"id": 1804, "answer": true, "completion": ".decl Handedness(Person:symbol, Handedness:symbol)\nHandedness(\"John\", \"right-handed\").\nHandedness(\"Jane\", \"left-handed\").\n.decl Uses_ASL(Person:symbol, Method:symbol)\nUses_ASL(\"John\", \"one-handed\").\nUses_ASL(\"Jane\", \"two-handed\").\n.decl Answer()\nAnswer() :- Handedness(person, \"right-handed\"), Uses_ASL(person, \"one-handed\").\nAnswer() :- Handedness(person, \"left-handed\"), Uses_ASL(person, \"two-handed\").\n.output Answer", "completions": [".decl Handedness(Person:symbol, Handedness:symbol)\nHandedness(\"John\", \"right-handed\").\nHandedness(\"Jane\", \"left-handed\").\n.decl Uses_ASL(Person:symbol, Method:symbol)\nUses_ASL(\"John\", \"one-handed\").\nUses_ASL(\"Jane\", \"two-handed\").\n.decl Answer()\nAnswer() :- Handedness(person, \"right-handed\"), Uses_ASL(person, \"one-handed\").\nAnswer() :- Handedness(person, \"left-handed\"), Uses_ASL(person, \"two-handed\").\n.output Answer"]}
{"id": 1805, "answer": false, "completion": ".decl Speaks_language(State:symbol, Language:symbol)\nSpeaks_language(\"Virginia\", \"English\").\nSpeaks_language(\"Georgia\", \"English\").\nSpeaks_language(\"South Carolina\", \"English\").\n.decl Answer()\nAnswer() :- Speaks_language(state, \"Old English\"), state != \"Virginia\", state != \"Georgia\", state != \"South Carolina\".\n.output Answer", "completions": [".decl Speaks_language(State:symbol, Language:symbol)\nSpeaks_language(\"Virginia\", \"English\").\nSpeaks_language(\"Georgia\", \"English\").\nSpeaks_language(\"South Carolina\", \"English\").\n.decl Answer()\nAnswer() :- Speaks_language(state, \"Old English\"), state != \"Virginia\", state != \"Georgia\", state != \"South Carolina\".\n.output Answer"]}
{"id": 1806, "answer": false, "completion": ".decl Acquires_company(Acquirer:symbol, Target:symbol)\nAcquires_company(\"Fiat Chrysler\", \"Peugeot\").\n.decl Has_new_name(Company:symbol, New_name:symbol)\nHas_new_name(\"Fiat Chrysler\", \"Stellantis\").\n.decl Answer()\nAnswer() :- Acquires_company(\"Fiat Chrysler\", target), Has_new_name(target, \"Stellantis\").\n.output Answer", "completions": [".decl Acquires_company(Acquirer:symbol, Target:symbol)\nAcquires_company(\"Fiat Chrysler\", \"Peugeot\").\n.decl Has_new_name(Company:symbol, New_name:symbol)\nHas_new_name(\"Fiat Chrysler\", \"Stellantis\").\n.decl Answer()\nAnswer() :- Acquires_company(\"Fiat Chrysler\", target), Has_new_name(target, \"Stellantis\").\n.output Answer"]}
{"id": 1807, "answer": true, "completion": ".decl Associated_with(Substance:symbol, Activity:symbol)\nAssociated_with(\"capsaicin\", \"spicy food\").\nAssociated_with(\"salt\", \"cooking\").\nAssociated_with(\"pepper\", \"cooking\").\n.decl Answer()\nAnswer() :- Associated_with(\"capsaicin\", activity).\n.output Answer", "completions": [".decl Associated_with(Substance:symbol, Activity:symbol)\nAssociated_with(\"capsaicin\", \"spicy food\").\nAssociated_with(\"salt\", \"cooking\").\nAssociated_with(\"pepper\", \"cooking\").\n.decl Answer()\nAnswer() :- Associated_with(\"capsaicin\", activity).\n.output Answer"]}
{"id": 1808, "answer": false, "completion": ".decl Has_part(Symbol:symbol, Part:symbol)\nHas_part(\"Capricorn\", \"goat\").\nHas_part(\"Capricorn\", \"fish\").\nHas_part(\"chimera\", \"lion\").\nHas_part(\"chimera\", \"goat\").\nHas_part(\"chimera\", \"snake\").\n.decl Answer()\nAnswer() :- Has_part(\"Capricorn\", part), !Has_part(\"chimera\", part).\nAnswer() :- Has_part(\"chimera\", part), !Has_part(\"Capricorn\", part).\n.output Answer", "completions": [".decl Has_part(Symbol:symbol, Part:symbol)\nHas_part(\"Capricorn\", \"goat\").\nHas_part(\"Capricorn\", \"fish\").\nHas_part(\"chimera\", \"lion\").\nHas_part(\"chimera\", \"goat\").\nHas_part(\"chimera\", \"snake\").\n.decl Answer()\nAnswer() :- Has_part(\"Capricorn\", part), !Has_part(\"chimera\", part).\nAnswer() :- Has_part(\"chimera\", part), !Has_part(\"Capricorn\", part).\n.output Answer"]}
{"id": 1809, "answer": false, "completion": ".decl Illuminates(Element:symbol, Color:symbol)\nIlluminates(\"neon\", \"red\").\nIlluminates(\"argon\", \"blue\").\n.decl Street_aesthetic(Aesthetic:symbol, Country:symbol)\nStreet_aesthetic(\"Harajuku\", \"Japan\").\n.decl Answer()\nAnswer() :- Street_aesthetic(aesthetic, \"Japan\"), Illuminates(element, \"color\"), element = \"neon\", aesthetic = \"Harajuku\".\n.output Answer", "completions": [".decl Illuminates(Element:symbol, Color:symbol)\nIlluminates(\"neon\", \"red\").\nIlluminates(\"argon\", \"blue\").\n.decl Street_aesthetic(Aesthetic:symbol, Country:symbol)\nStreet_aesthetic(\"Harajuku\", \"Japan\").\n.decl Answer()\nAnswer() :- Street_aesthetic(aesthetic, \"Japan\"), Illuminates(element, \"color\"), element = \"neon\", aesthetic = \"Harajuku\".\n.output Answer"]}
{"id": 1810, "answer": true, "completion": ".decl Crime(Person:symbol, Crime:symbol, Prison_time:float)\nCrime(\"shooter\", \"shooting bald eagle\", 5).\nCrime(\"Michael Vick\", \"dog fighting\", 2).\n.decl Answer()\nAnswer() :- Crime(\"shooter\", \"shooting bald eagle\", prison_time1), Crime(\"Michael Vick\", \"dog fighting\", prison_time2), prison_time1 > prison_time2.\n.output Answer", "completions": [".decl Crime(Person:symbol, Crime:symbol, Prison_time:float)\nCrime(\"shooter\", \"shooting bald eagle\", 5).\nCrime(\"Michael Vick\", \"dog fighting\", 2).\n.decl Answer()\nAnswer() :- Crime(\"shooter\", \"shooting bald eagle\", prison_time1), Crime(\"Michael Vick\", \"dog fighting\", prison_time2), prison_time1 > prison_time2.\n.output Answer"]}
{"id": 1811, "answer": false, "completion": ".decl Borders(Country_A:symbol, Country_B:symbol)\nBorders(\"United States of America\", \"Mexico\").\nBorders(\"Mexico\", \"Guatemala\").\nBorders(\"Guatemala\", \"Honduras\").\nBorders(\"Honduras\", \"El Salvador\").\nBorders(\"El Salvador\", \"Nicaragua\").\nBorders(\"Nicaragua\", \"Costa Rica\").\nBorders(\"Costa Rica\", \"Panama\").\n.decl Touches(Ocean:symbol, Country:symbol)\nTouches(\"Indian Ocean\", \"India\").\n.decl Answer()\nAnswer() :- Borders(\"United States of America\", country1), Touches(ocean1, country1), Touches(\"Indian Ocean\", ocean1).\n.output Answer", "completions": [".decl Borders(Country_A:symbol, Country_B:symbol)\nBorders(\"United States of America\", \"Mexico\").\nBorders(\"Mexico\", \"Guatemala\").\nBorders(\"Guatemala\", \"Honduras\").\nBorders(\"Honduras\", \"El Salvador\").\nBorders(\"El Salvador\", \"Nicaragua\").\nBorders(\"Nicaragua\", \"Costa Rica\").\nBorders(\"Costa Rica\", \"Panama\").\n.decl Touches(Ocean:symbol, Country:symbol)\nTouches(\"Indian Ocean\", \"India\").\n.decl Answer()\nAnswer() :- Borders(\"United States of America\", country1), Touches(ocean1, country1), Touches(\"Indian Ocean\", ocean1).\n.output Answer"]}
{"id": 1812, "answer": false, "completion": ".decl Was_philosopher(Person:symbol)\nWas_philosopher(\"Sophists\").\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Sophists\", \"rhetoric\").\n.decl Answer()\nAnswer() :- Was_philosopher(person), Has_skill(person, \"law\").\n.output Answer", "completions": [".decl Was_philosopher(Person:symbol)\nWas_philosopher(\"Sophists\").\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Sophists\", \"rhetoric\").\n.decl Answer()\nAnswer() :- Was_philosopher(person), Has_skill(person, \"law\").\n.output Answer"]}
{"id": 1813, "answer": true, "completion": ".decl Has_sugar_content(Food:symbol, Sugar_content:float)\nHas_sugar_content(\"Krispy Kreme glazed doughnut\", 10).\nHas_sugar_content(\"AHA daily sugar allowance\", 25).\n.decl Answer()\nAnswer() :- Has_sugar_content(\"Krispy Kreme glazed doughnut\", sugar_content1), Has_sugar_content(\"AHA daily sugar allowance\", sugar_content2), sugar_content1 * 4 > sugar_content2.\n.output Answer", "completions": [".decl Has_sugar_content(Food:symbol, Sugar_content:float)\nHas_sugar_content(\"Krispy Kreme glazed doughnut\", 10).\nHas_sugar_content(\"AHA daily sugar allowance\", 25).\n.decl Answer()\nAnswer() :- Has_sugar_content(\"Krispy Kreme glazed doughnut\", sugar_content1), Has_sugar_content(\"AHA daily sugar allowance\", sugar_content2), sugar_content1 * 4 > sugar_content2.\n.output Answer"]}
{"id": 1814, "answer": false, "completion": ".decl Is_related_to(Movie1:symbol, Movie2:symbol)\nIs_related_to(\"The Matrix\", \"The Matrix Reloaded\").\nIs_related_to(\"The Matrix\", \"The Matrix Revolutions\").\n.decl Answer()\nAnswer() :- !Is_related_to(\"The Matrix\", movie).\n.output Answer", "completions": [".decl Is_related_to(Movie1:symbol, Movie2:symbol)\nIs_related_to(\"The Matrix\", \"The Matrix Reloaded\").\nIs_related_to(\"The Matrix\", \"The Matrix Revolutions\").\n.decl Answer()\nAnswer() :- !Is_related_to(\"The Matrix\", movie).\n.output Answer"]}
{"id": 1815, "answer": false, "completion": ".decl Banned(Subject:symbol, Location:symbol)\nBanned(\"people\", \"Forbidden City\").\n.decl Answer()\nAnswer() :- Banned(\"people\", \"Forbidden City\").\n.output Answer", "completions": [".decl Banned(Subject:symbol, Location:symbol)\nBanned(\"people\", \"Forbidden City\").\n.decl Answer()\nAnswer() :- Banned(\"people\", \"Forbidden City\").\n.output Answer"]}
{"id": 1816, "answer": true, "completion": ".decl Is_Fibonacci(Number:float)\nIs_Fibonacci(0).\nIs_Fibonacci(1).\nIs_Fibonacci(2).\nIs_Fibonacci(3).\nIs_Fibonacci(5).\nIs_Fibonacci(8).\nIs_Fibonacci(13).\nIs_Fibonacci(21).\nIs_Fibonacci(34).\nIs_Fibonacci(55).\nIs_Fibonacci(89).\nIs_Fibonacci(144).\n.decl Answer()\nAnswer() :- Is_Fibonacci(number), number >= 88.\n.output Answer", "completions": [".decl Is_Fibonacci(Number:float)\nIs_Fibonacci(0).\nIs_Fibonacci(1).\nIs_Fibonacci(2).\nIs_Fibonacci(3).\nIs_Fibonacci(5).\nIs_Fibonacci(8).\nIs_Fibonacci(13).\nIs_Fibonacci(21).\nIs_Fibonacci(34).\nIs_Fibonacci(55).\nIs_Fibonacci(89).\nIs_Fibonacci(144).\n.decl Answer()\nAnswer() :- Is_Fibonacci(number), number >= 88.\n.output Answer"]}
{"id": 1817, "answer": false, "completion": ".decl Requires_conductor(Musician:symbol)\nRequires_conductor(\"solo pianist\") :- false.\n.decl Answer()\nAnswer() :- Requires_conductor(\"solo pianist\").\n.output Answer", "completions": [".decl Requires_conductor(Musician:symbol)\nRequires_conductor(\"solo pianist\") :- false.\n.decl Answer()\nAnswer() :- Requires_conductor(\"solo pianist\").\n.output Answer"]}
{"id": 1818, "answer": false, "completion": ".decl Required_to_say_pledge(Person:symbol)\nRequired_to_say_pledge(\"Jackson Pollock's parents\").\n.decl Answer()\nAnswer() :- !Required_to_say_pledge(\"Jackson Pollock's parents\").\n.output Answer", "completions": [".decl Required_to_say_pledge(Person:symbol)\nRequired_to_say_pledge(\"Jackson Pollock's parents\").\n.decl Answer()\nAnswer() :- !Required_to_say_pledge(\"Jackson Pollock's parents\").\n.output Answer"]}
{"id": 1819, "answer": false, "completion": ".decl Distance_from_month(Month:symbol, Distance:float)\nDistance_from_month(\"December\", 0).\nDistance_from_month(\"July\", 6).\n.decl Hemisphere(Place:symbol, Hemisphere:symbol)\nHemisphere(\"Northern Hemisphere\", \"north\").\nHemisphere(\"Southern Hemisphere\", \"south\").\n.decl Solstice_in_month(Hemisphere:symbol, Month:symbol)\nSolstice_in_month(\"north\", \"December\").\nSolstice_in_month(\"south\", \"June\").\n.decl Answer()\nAnswer() :- Solstice_in_month(\"north\", month1), Solstice_in_month(\"south\", month2), Distance_from_month(month1, distance1), Distance_from_month(month2, distance2), Hemisphere(\"north\", north), Hemisphere(\"south\", south), abs(distance1 - distance2) < abs(distance1 - north) - abs(distance2 - south).\n.output Answer", "completions": [".decl Distance_from_month(Month:symbol, Distance:float)\nDistance_from_month(\"December\", 0).\nDistance_from_month(\"July\", 6).\n.decl Hemisphere(Place:symbol, Hemisphere:symbol)\nHemisphere(\"Northern Hemisphere\", \"north\").\nHemisphere(\"Southern Hemisphere\", \"south\").\n.decl Solstice_in_month(Hemisphere:symbol, Month:symbol)\nSolstice_in_month(\"north\", \"December\").\nSolstice_in_month(\"south\", \"June\").\n.decl Answer()\nAnswer() :- Solstice_in_month(\"north\", month1), Solstice_in_month(\"south\", month2), Distance_from_month(month1, distance1), Distance_from_month(month2, distance2), Hemisphere(\"north\", north), Hemisphere(\"south\", south), abs(distance1 - distance2) < abs(distance1 - north) - abs(distance2 - south).\n.output Answer"]}
{"id": 1820, "answer": false, "completion": ".decl Visits(Person:symbol, Country:symbol)\nVisits(\"tourist1\", \"Tuvalu\").\nVisits(\"tourist2\", \"Niue\").\n.decl Preference(Person:symbol, Country1:symbol, Country2:symbol)\nPreference(\"tourist1\", \"Tuvalu\", \"Niue\").\n.decl Answer()\nAnswer() :- Visits(person, country1), Visits(person, country2), Preference(person, country1, country2), country1 = \"Tuvalu\", country2 = \"Niue\".\n.output Answer", "completions": [".decl Visits(Person:symbol, Country:symbol)\nVisits(\"tourist1\", \"Tuvalu\").\nVisits(\"tourist2\", \"Niue\").\n.decl Preference(Person:symbol, Country1:symbol, Country2:symbol)\nPreference(\"tourist1\", \"Tuvalu\", \"Niue\").\n.decl Answer()\nAnswer() :- Visits(person, country1), Visits(person, country2), Preference(person, country1, country2), country1 = \"Tuvalu\", country2 = \"Niue\".\n.output Answer"]}
{"id": 1821, "answer": true, "completion": ".decl Is_parody(Book:symbol, Original:symbol)\nIs_parody(\"A Tale of Two Cities\", \"Bible\").\n.decl Answer()\nAnswer() :- Is_parody(\"A Tale of Two Cities\", original).\n.output Answer", "completions": [".decl Is_parody(Book:symbol, Original:symbol)\nIs_parody(\"A Tale of Two Cities\", \"Bible\").\n.decl Answer()\nAnswer() :- Is_parody(\"A Tale of Two Cities\", original).\n.output Answer"]}
{"id": 1822, "answer": false, "completion": ".decl Contains(Character:symbol)\nContains(\"0\").\nContains(\"1\").\nContains(\"a\").\nContains(\"b\").\nContains(\"c\").\nContains(\"d\").\nContains(\"e\").\nContains(\"f\").\nContains(\"g\").\nContains(\"h\").\nContains(\"i\").\nContains(\"j\").\nContains(\"k\").\nContains(\"l\").\nContains(\"m\").\nContains(\"n\").\nContains(\"o\").\nContains(\"p\").\nContains(\"q\").\nContains(\"r\").\nContains(\"s\").\nContains(\"t\").\nContains(\"u\").\nContains(\"v\").\nContains(\"w\").\nContains(\"x\").\nContains(\"y\").\nContains(\"z\").\nContains(\"A\").\nContains(\"B\").\nContains(\"C\").\nContains(\"D\").\nContains(\"E\").\nContains(\"F\").\nContains(\"G\").\nContains(\"H\").\nContains(\"I\").\nContains(\"J\").\nContains(\"K\").\nContains(\"L\").\nContains(\"M\").\nContains(\"N\").\nContains(\"O\").\nContains(\"P\").\nContains(\"Q\").\nContains(\"R\").\nContains(\"S\").\nContains(\"T\").\nContains(\"U\").\nContains(\"V\").\nContains(\"W\").\nContains(\"X\").\nContains(\"Y\").\nContains(\"Z\").\nContains(\"!\").\nContains(\"@\").\nContains(\"#\").\nContains(\"$\").\nContains(\"%\").\nContains(\"^\").\nContains(\"&\").\nContains(\"*\").\nContains(\"(\").\nContains(\")\").\nContains(\"-\").\nContains(\"_\").\nContains(\"+\").\nContains(\"=\").\nContains(\"{\").\nContains(\"}\").\nContains(\"[\").\nContains(\"]\").\nContains(\"|\").\nContains(\";\").\nContains(\":\").\nContains(\"'\").\nContains(\",\").\nContains(\".\").\nContains(\"?\").\nContains(\"/\").\nContains(\"<\").\nContains(\">\").\nContains(\"~\").\nContains(\"`\").\nContains(\"\\\\\").\nContains(\"\\\"\").\n.decl Has_length(Password:symbol, Length:float)\nHas_length(\"password123\", 10).\n.decl Has_uppercase(Password:symbol)\nHas_uppercase(\"Password123\").\n.decl Has_lowercase(Password:symbol)\nHas_lowercase(\"password123\").\n.decl Has_number(Password:symbol)\nHas_number(\"password123\").\n.decl Has_special(Password:symbol)\nHas_special(\"password!@#\").\n.decl Answer()\nAnswer() :- Has_length(password, length), length >= 8.\nAnswer() :- Has_uppercase(password).\nAnswer() :- Has_lowercase(password).\nAnswer() :- Has_number(password).\nAnswer() :- Has_special(password).\nAnswer() :- Contains(char), Has_length(password, length), length >= 8, !Has_uppercase(password), !Has_lowercase(password), !Has_number(password), !Has_special(password), password ^= char^length.\n.output Answer", "completions": [".decl Contains(Character:symbol)\nContains(\"0\").\nContains(\"1\").\nContains(\"a\").\nContains(\"b\").\nContains(\"c\").\nContains(\"d\").\nContains(\"e\").\nContains(\"f\").\nContains(\"g\").\nContains(\"h\").\nContains(\"i\").\nContains(\"j\").\nContains(\"k\").\nContains(\"l\").\nContains(\"m\").\nContains(\"n\").\nContains(\"o\").\nContains(\"p\").\nContains(\"q\").\nContains(\"r\").\nContains(\"s\").\nContains(\"t\").\nContains(\"u\").\nContains(\"v\").\nContains(\"w\").\nContains(\"x\").\nContains(\"y\").\nContains(\"z\").\nContains(\"A\").\nContains(\"B\").\nContains(\"C\").\nContains(\"D\").\nContains(\"E\").\nContains(\"F\").\nContains(\"G\").\nContains(\"H\").\nContains(\"I\").\nContains(\"J\").\nContains(\"K\").\nContains(\"L\").\nContains(\"M\").\nContains(\"N\").\nContains(\"O\").\nContains(\"P\").\nContains(\"Q\").\nContains(\"R\").\nContains(\"S\").\nContains(\"T\").\nContains(\"U\").\nContains(\"V\").\nContains(\"W\").\nContains(\"X\").\nContains(\"Y\").\nContains(\"Z\").\nContains(\"!\").\nContains(\"@\").\nContains(\"#\").\nContains(\"$\").\nContains(\"%\").\nContains(\"^\").\nContains(\"&\").\nContains(\"*\").\nContains(\"(\").\nContains(\")\").\nContains(\"-\").\nContains(\"_\").\nContains(\"+\").\nContains(\"=\").\nContains(\"{\").\nContains(\"}\").\nContains(\"[\").\nContains(\"]\").\nContains(\"|\").\nContains(\";\").\nContains(\":\").\nContains(\"'\").\nContains(\",\").\nContains(\".\").\nContains(\"?\").\nContains(\"/\").\nContains(\"<\").\nContains(\">\").\nContains(\"~\").\nContains(\"`\").\nContains(\"\\\\\").\nContains(\"\\\"\").\n.decl Has_length(Password:symbol, Length:float)\nHas_length(\"password123\", 10).\n.decl Has_uppercase(Password:symbol)\nHas_uppercase(\"Password123\").\n.decl Has_lowercase(Password:symbol)\nHas_lowercase(\"password123\").\n.decl Has_number(Password:symbol)\nHas_number(\"password123\").\n.decl Has_special(Password:symbol)\nHas_special(\"password!@#\").\n.decl Answer()\nAnswer() :- Has_length(password, length), length >= 8.\nAnswer() :- Has_uppercase(password).\nAnswer() :- Has_lowercase(password).\nAnswer() :- Has_number(password).\nAnswer() :- Has_special(password).\nAnswer() :- Contains(char), Has_length(password, length), length >= 8, !Has_uppercase(password), !Has_lowercase(password), !Has_number(password), !Has_special(password), password ^= char^length.\n.output Answer"]}
{"id": 1823, "answer": false, "completion": ".decl Influences(Artist1:symbol, Artist2:symbol)\nInfluences(\"Andy Warhol\", \"Keith Haring\").\nInfluences(\"Keith Haring\", \"Art Deco\").\n.decl Answer()\nAnswer() :- Influences(\"Andy Warhol\", artist), Influences(artist, \"Art Deco\").\n.output Answer", "completions": [".decl Influences(Artist1:symbol, Artist2:symbol)\nInfluences(\"Andy Warhol\", \"Keith Haring\").\nInfluences(\"Keith Haring\", \"Art Deco\").\n.decl Answer()\nAnswer() :- Influences(\"Andy Warhol\", artist), Influences(artist, \"Art Deco\").\n.output Answer"]}
{"id": 1824, "answer": false, "completion": ".decl Has_property(Substance:symbol, Property:symbol)\nHas_property(\"ginger\", \"anti-nausea\").\n.decl Recommended_for_condition(Substance:symbol, Condition:symbol)\nRecommended_for_condition(\"ginger\", \"nausea\").\n.decl Answer()\nAnswer() :- Recommended_for_condition(substance, \"pregnancy\"), Has_property(substance, \"anti-nausea\").\n.output Answer", "completions": [".decl Has_property(Substance:symbol, Property:symbol)\nHas_property(\"ginger\", \"anti-nausea\").\n.decl Recommended_for_condition(Substance:symbol, Condition:symbol)\nRecommended_for_condition(\"ginger\", \"nausea\").\n.decl Answer()\nAnswer() :- Recommended_for_condition(substance, \"pregnancy\"), Has_property(substance, \"anti-nausea\").\n.output Answer"]}
{"id": 1825, "answer": false, "completion": ".decl Source_of_power(Movie:symbol, Object:symbol)\nSource_of_power(\"Popeye\", \"spinach\").\n.decl Answer()\nAnswer() :- Source_of_power(movie, \"spinach\"), movie != \"Popeye\".\n.output Answer", "completions": [".decl Source_of_power(Movie:symbol, Object:symbol)\nSource_of_power(\"Popeye\", \"spinach\").\n.decl Answer()\nAnswer() :- Source_of_power(movie, \"spinach\"), movie != \"Popeye\".\n.output Answer"]}
{"id": 1826, "answer": true, "completion": ".decl Simulates(Process:symbol, Phenomenon:symbol)\nSimulates(\"welding with acetylene\", \"temperature of a star\").\n.decl Answer()\nAnswer() :- Simulates(process, \"temperature of a star\").\n.output Answer", "completions": [".decl Simulates(Process:symbol, Phenomenon:symbol)\nSimulates(\"welding with acetylene\", \"temperature of a star\").\n.decl Answer()\nAnswer() :- Simulates(process, \"temperature of a star\").\n.output Answer"]}
{"id": 1827, "answer": false, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Donatello's bronze David\", 158).\nHas_height(\"Sistine Chapel ceiling\", 20.7).\n.decl Can_reach(Object:symbol, Height:float)\nCan_reach(\"adult male\", 2.1).\n.decl Answer()\nAnswer() :- Has_height(\"Donatello's bronze David\", height1), Has_height(\"Sistine Chapel ceiling\", height2), Can_reach(\"adult male\", reach), height1 + height2 <= reach.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Donatello's bronze David\", 158).\nHas_height(\"Sistine Chapel ceiling\", 20.7).\n.decl Can_reach(Object:symbol, Height:float)\nCan_reach(\"adult male\", 2.1).\n.decl Answer()\nAnswer() :- Has_height(\"Donatello's bronze David\", height1), Has_height(\"Sistine Chapel ceiling\", height2), Can_reach(\"adult male\", reach), height1 + height2 <= reach.\n.output Answer"]}
{"id": 1828, "answer": true, "completion": ".decl Is_dangerous(Chemical_A:symbol, Chemical_B:symbol)\nIs_dangerous(\"chlorine\", \"sodium\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"chlorine\", \"sodium\").\n.output Answer", "completions": [".decl Is_dangerous(Chemical_A:symbol, Chemical_B:symbol)\nIs_dangerous(\"chlorine\", \"sodium\").\n.decl Answer()\nAnswer() :- Is_dangerous(\"chlorine\", \"sodium\").\n.output Answer"]}
{"id": 1829, "answer": false, "completion": ".decl Located_in(Location:symbol, Country:symbol)\nLocated_in(\"Moulin Rouge\", \"France\").\nLocated_in(\"Spain\", \"Europe\").\nLocated_in(\"Spanish American War triage center\", \"Cuba\").\n.decl Answer()\nAnswer() :- Located_in(\"Moulin Rouge\", country1), Located_in(\"Spain\", country2), Located_in(\"Spanish American War triage center\", country3), country1 != country2, country2 = country3.\n.output Answer", "completions": [".decl Located_in(Location:symbol, Country:symbol)\nLocated_in(\"Moulin Rouge\", \"France\").\nLocated_in(\"Spain\", \"Europe\").\nLocated_in(\"Spanish American War triage center\", \"Cuba\").\n.decl Answer()\nAnswer() :- Located_in(\"Moulin Rouge\", country1), Located_in(\"Spain\", country2), Located_in(\"Spanish American War triage center\", country3), country1 != country2, country2 = country3.\n.output Answer"]}
{"id": 1830, "answer": false, "completion": ".decl Has_viewership(Show:symbol, Viewership:float)\nHas_viewership(\"Downton Abbey finale\", 9.6).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"Kazakhstan\", 18.8).\n.decl Answer()\nAnswer() :- Has_viewership(\"Downton Abbey finale\", viewership), Has_population(\"Kazakhstan\", population), viewership > population.\n.output Answer", "completions": [".decl Has_viewership(Show:symbol, Viewership:float)\nHas_viewership(\"Downton Abbey finale\", 9.6).\n.decl Has_population(Country:symbol, Population:float)\nHas_population(\"Kazakhstan\", 18.8).\n.decl Answer()\nAnswer() :- Has_viewership(\"Downton Abbey finale\", viewership), Has_population(\"Kazakhstan\", population), viewership > population.\n.output Answer"]}
{"id": 1831, "answer": true, "completion": ".decl Has_risk(Project:symbol, Risk:symbol)\nHas_risk(\"DIY electrical wiring\", \"lethal\").\nHas_risk(\"DIY plumbing\", \"moderate\").\nHas_risk(\"DIY painting\", \"low\").\n.decl Answer()\nAnswer() :- Has_risk(project, \"lethal\").\n.output Answer", "completions": [".decl Has_risk(Project:symbol, Risk:symbol)\nHas_risk(\"DIY electrical wiring\", \"lethal\").\nHas_risk(\"DIY plumbing\", \"moderate\").\nHas_risk(\"DIY painting\", \"low\").\n.decl Answer()\nAnswer() :- Has_risk(project, \"lethal\").\n.output Answer"]}
{"id": 1832, "answer": false, "completion": ".decl Lifespan(Animal:symbol, Years:float)\nLifespan(\"Eastern chipmunk\", 3).\n.decl Is_leap_year(Year:float)\nIs_leap_year(2020).\nIs_leap_year(2024).\nIs_leap_year(2028).\nIs_leap_year(2032).\nIs_leap_year(2036).\nIs_leap_year(2040).\n.decl Answer()\nAnswer() :- Lifespan(\"Eastern chipmunk\", lifespan), Is_leap_year(year1), Is_leap_year(year2), year2 > year1, year2 <= year1 + lifespan.\n.output Answer", "completions": [".decl Lifespan(Animal:symbol, Years:float)\nLifespan(\"Eastern chipmunk\", 3).\n.decl Is_leap_year(Year:float)\nIs_leap_year(2020).\nIs_leap_year(2024).\nIs_leap_year(2028).\nIs_leap_year(2032).\nIs_leap_year(2036).\nIs_leap_year(2040).\n.decl Answer()\nAnswer() :- Lifespan(\"Eastern chipmunk\", lifespan), Is_leap_year(year1), Is_leap_year(year2), year2 > year1, year2 <= year1 + lifespan.\n.output Answer"]}
{"id": 1833, "answer": false, "completion": ".decl Requires_power(Game:symbol, Power_source:symbol)\nRequires_power(\"Super Mario\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires_power(\"Super Mario\", power_source), power_source != \"none\".\n.output Answer", "completions": [".decl Requires_power(Game:symbol, Power_source:symbol)\nRequires_power(\"Super Mario\", \"electricity\").\n.decl Answer()\nAnswer() :- Requires_power(\"Super Mario\", power_source), power_source != \"none\".\n.output Answer"]}
{"id": 1834, "answer": true, "completion": ".decl Can_survive_in(Environment:symbol, Animal:symbol)\nCan_survive_in(\"Earth\", \"Chinese mountain cat\").\nCan_survive_in(\"space\", \"bacteria\").\n.decl Answer()\nAnswer() :- Can_survive_in(\"space\", animal).\n.output Answer", "completions": [".decl Can_survive_in(Environment:symbol, Animal:symbol)\nCan_survive_in(\"Earth\", \"Chinese mountain cat\").\nCan_survive_in(\"space\", \"bacteria\").\n.decl Answer()\nAnswer() :- Can_survive_in(\"space\", animal).\n.output Answer"]}
{"id": 1835, "answer": false, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"rock\", 2.5).\nHas_density(\"atmosphere of Earth\", 0.0012).\n.decl Answer()\nAnswer() :- Has_density(\"rock\", density1), Has_density(\"atmosphere of Earth\", density2), density1 < density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"rock\", 2.5).\nHas_density(\"atmosphere of Earth\", 0.0012).\n.decl Answer()\nAnswer() :- Has_density(\"rock\", density1), Has_density(\"atmosphere of Earth\", density2), density1 < density2.\n.output Answer"]}
{"id": 1836, "answer": true, "completion": ".decl Sells(Restaurant:symbol, Item:symbol)\nSells(\"Burger King\", \"burger\").\nSells(\"REI\", \"snowshoes\").\n.decl Answer()\nAnswer() :- Sells(\"Burger King\", item), !Sells(\"REI\", item).\n.output Answer", "completions": [".decl Sells(Restaurant:symbol, Item:symbol)\nSells(\"Burger King\", \"burger\").\nSells(\"REI\", \"snowshoes\").\n.decl Answer()\nAnswer() :- Sells(\"Burger King\", item), !Sells(\"REI\", item).\n.output Answer"]}
{"id": 1837, "answer": true, "completion": ".decl Used_in(Media:symbol, Production:symbol)\nUsed_in(\"USB flash drive\", \"The Godfather\").\n.decl Answer()\nAnswer() :- Used_in(\"USB flash drive\", production).\n.output Answer", "completions": [".decl Used_in(Media:symbol, Production:symbol)\nUsed_in(\"USB flash drive\", \"The Godfather\").\n.decl Answer()\nAnswer() :- Used_in(\"USB flash drive\", production).\n.output Answer"]}
{"id": 1838, "answer": true, "completion": ".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"New Years Day\", 1999).\n.decl Fear_of_event(Person:symbol, Event:symbol)\nFear_of_event(\"John\", \"Y2K bug\").\nFear_of_event(\"Jane\", \"Y2K bug\").\n.decl Answer()\nAnswer() :- Happens_in_year(\"New Years Day\", year), Fear_of_event(person, \"Y2K bug\").\n.output Answer", "completions": [".decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"New Years Day\", 1999).\n.decl Fear_of_event(Person:symbol, Event:symbol)\nFear_of_event(\"John\", \"Y2K bug\").\nFear_of_event(\"Jane\", \"Y2K bug\").\n.decl Answer()\nAnswer() :- Happens_in_year(\"New Years Day\", year), Fear_of_event(person, \"Y2K bug\").\n.output Answer"]}
{"id": 1839, "answer": true, "completion": ".decl President_supported(President:symbol, Decision:symbol)\nPresident_supported(\"Woodrow Wilson\", \"League of Nations\").\n.decl Answer()\nAnswer() :- !President_supported(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.output Answer", "completions": [".decl President_supported(President:symbol, Decision:symbol)\nPresident_supported(\"Woodrow Wilson\", \"League of Nations\").\n.decl Answer()\nAnswer() :- !President_supported(\"Woodrow Wilson\", \"Plessy v. Ferguson\").\n.output Answer"]}
{"id": 1840, "answer": true, "completion": ".decl Belongs_to_family(Person:symbol, Family:symbol)\nBelongs_to_family(\"Rahul Dravid\", \"Cricketeers\").\nBelongs_to_family(\"Cricketeers\", \"Gryllidae\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"Rahul Dravid\", family1), Belongs_to_family(family1, \"Gryllidae\").\n.output Answer", "completions": [".decl Belongs_to_family(Person:symbol, Family:symbol)\nBelongs_to_family(\"Rahul Dravid\", \"Cricketeers\").\nBelongs_to_family(\"Cricketeers\", \"Gryllidae\").\n.decl Answer()\nAnswer() :- Belongs_to_family(\"Rahul Dravid\", family1), Belongs_to_family(family1, \"Gryllidae\").\n.output Answer"]}
{"id": 1841, "answer": true, "completion": ".decl Is_pet_animal(Animal:symbol)\nIs_pet_animal(\"dog\").\nIs_pet_animal(\"cat\").\nIs_pet_animal(\"hamster\").\nIs_pet_animal(\"parrot\").\nIs_pet_animal(\"fish\").\n.decl Is_primate(Animal:symbol)\nIs_primate(\"macaque\").\nIs_primate(\"chimpanzee\").\nIs_primate(\"gorilla\").\n.decl Answer()\nAnswer() :- Is_pet_animal(animal), !Is_primate(animal).\n.output Answer", "completions": [".decl Is_pet_animal(Animal:symbol)\nIs_pet_animal(\"dog\").\nIs_pet_animal(\"cat\").\nIs_pet_animal(\"hamster\").\nIs_pet_animal(\"parrot\").\nIs_pet_animal(\"fish\").\n.decl Is_primate(Animal:symbol)\nIs_primate(\"macaque\").\nIs_primate(\"chimpanzee\").\nIs_primate(\"gorilla\").\n.decl Answer()\nAnswer() :- Is_pet_animal(animal), !Is_primate(animal).\n.output Answer"]}
{"id": 1842, "answer": false, "completion": ".decl Music_video(Title:symbol, Artist:symbol)\nMusic_video(\"Just Like Fire\", \"Pink\").\nMusic_video(\"Stupid Girls\", \"Pink\").\nMusic_video(\"F**kin' Perfect\", \"Pink\").\n.decl Triggers(Condition:symbol, Disorder:symbol)\nTriggers(\"thin ideal internalization\", \"eating disorders\").\nTriggers(\"body dissatisfaction\", \"eating disorders\").\n.decl Answer()\nAnswer() :- Music_video(title, \"Pink\"), Triggers(condition, \"eating disorders\"), title = \"Stupid Girls\", condition = \"thin ideal internalization\".\n.output Answer", "completions": [".decl Music_video(Title:symbol, Artist:symbol)\nMusic_video(\"Just Like Fire\", \"Pink\").\nMusic_video(\"Stupid Girls\", \"Pink\").\nMusic_video(\"F**kin' Perfect\", \"Pink\").\n.decl Triggers(Condition:symbol, Disorder:symbol)\nTriggers(\"thin ideal internalization\", \"eating disorders\").\nTriggers(\"body dissatisfaction\", \"eating disorders\").\n.decl Answer()\nAnswer() :- Music_video(title, \"Pink\"), Triggers(condition, \"eating disorders\"), title = \"Stupid Girls\", condition = \"thin ideal internalization\".\n.output Answer"]}
{"id": 1843, "answer": false, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"brewing\", \"brewery\").\nHappens_in_place(\"prison\", \"prison\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"brewing\", place), Happens_in_place(\"prison\", place).\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"brewing\", \"brewery\").\nHappens_in_place(\"prison\", \"prison\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"brewing\", place), Happens_in_place(\"prison\", place).\n.output Answer"]}
{"id": 1844, "answer": false, "completion": ".decl Grows_crop(Person:symbol, Crop:symbol)\nGrows_crop(\"John\", \"apples\").\nGrows_crop(\"Sarah\", \"blueberries\").\nGrows_crop(\"Emily\", \"coffee\").\n.decl Is_from_region(Person:symbol, Region:symbol)\nIs_from_region(\"John\", \"New England\").\nIs_from_region(\"Sarah\", \"New England\").\nIs_from_region(\"Emily\", \"New England\").\n.decl Profitable_crop(Crop:symbol)\nProfitable_crop(\"coffee\").\n.decl Answer()\nAnswer() :- Grows_crop(person, crop), Is_from_region(person, \"New England\"), Profitable_crop(crop).\n.output Answer", "completions": [".decl Grows_crop(Person:symbol, Crop:symbol)\nGrows_crop(\"John\", \"apples\").\nGrows_crop(\"Sarah\", \"blueberries\").\nGrows_crop(\"Emily\", \"coffee\").\n.decl Is_from_region(Person:symbol, Region:symbol)\nIs_from_region(\"John\", \"New England\").\nIs_from_region(\"Sarah\", \"New England\").\nIs_from_region(\"Emily\", \"New England\").\n.decl Profitable_crop(Crop:symbol)\nProfitable_crop(\"coffee\").\n.decl Answer()\nAnswer() :- Grows_crop(person, crop), Is_from_region(person, \"New England\"), Profitable_crop(crop).\n.output Answer"]}
{"id": 1845, "answer": true, "completion": ".decl Is_similar_to(Food_A:symbol, Food_B:symbol)\nIs_similar_to(\"krabby patty\", \"burger\").\nIs_similar_to(\"burger\", \"cheeseburger\").\n.decl Answer()\nAnswer() :- Is_similar_to(\"krabby patty\", food), Is_similar_to(food, \"cheeseburger\").\n.output Answer", "completions": [".decl Is_similar_to(Food_A:symbol, Food_B:symbol)\nIs_similar_to(\"krabby patty\", \"burger\").\nIs_similar_to(\"burger\", \"cheeseburger\").\n.decl Answer()\nAnswer() :- Is_similar_to(\"krabby patty\", food), Is_similar_to(food, \"cheeseburger\").\n.output Answer"]}
{"id": 1846, "answer": false, "completion": ".decl Has_number_of_people(Event:symbol, N_people:float)\nHas_number_of_people(\"Boeing 737\", 215).\nHas_number_of_people(\"Chief Justice of the United States\", 1).\n.decl Answer()\nAnswer() :- Has_number_of_people(\"Chief Justice of the United States\", n_people), n_people > Has_number_of_people(\"Boeing 737\", n_seats).\n.output Answer", "completions": [".decl Has_number_of_people(Event:symbol, N_people:float)\nHas_number_of_people(\"Boeing 737\", 215).\nHas_number_of_people(\"Chief Justice of the United States\", 1).\n.decl Answer()\nAnswer() :- Has_number_of_people(\"Chief Justice of the United States\", n_people), n_people > Has_number_of_people(\"Boeing 737\", n_seats).\n.output Answer"]}
{"id": 1847, "answer": true, "completion": ".decl Can_survive(Species:symbol, Environment:symbol, Survival_time:float)\nCan_survive(\"crocodile\", \"Great Salt Lake\", 10).\nCan_survive(\"alligator\", \"Great Salt Lake\", 5).\n.decl Answer()\nAnswer() :- Can_survive(\"crocodile\", \"Great Salt Lake\", survival_time1), Can_survive(\"alligator\", \"Great Salt Lake\", survival_time2), survival_time1 > survival_time2.\n.output Answer", "completions": [".decl Can_survive(Species:symbol, Environment:symbol, Survival_time:float)\nCan_survive(\"crocodile\", \"Great Salt Lake\", 10).\nCan_survive(\"alligator\", \"Great Salt Lake\", 5).\n.decl Answer()\nAnswer() :- Can_survive(\"crocodile\", \"Great Salt Lake\", survival_time1), Can_survive(\"alligator\", \"Great Salt Lake\", survival_time2), survival_time1 > survival_time2.\n.output Answer"]}
{"id": 1848, "answer": false, "completion": ".decl Started_by(Event:symbol, Cause:symbol)\nStarted_by(\"Saudi Aramco\", \"oil discovery\").\nStarted_by(\"Microsoft\", \"entrepreneurship\").\nStarted_by(\"Apple\", \"innovation\").\n.decl Answer()\nAnswer() :- Started_by(\"Saudi Aramco\", cause), cause != \"assassination\".\n.output Answer", "completions": [".decl Started_by(Event:symbol, Cause:symbol)\nStarted_by(\"Saudi Aramco\", \"oil discovery\").\nStarted_by(\"Microsoft\", \"entrepreneurship\").\nStarted_by(\"Apple\", \"innovation\").\n.decl Answer()\nAnswer() :- Started_by(\"Saudi Aramco\", cause), cause != \"assassination\".\n.output Answer"]}
{"id": 1849, "answer": true, "completion": ".decl Celebrates(Event:symbol, Holiday:symbol)\nCelebrates(\"Diwali celebration\", \"Diwali\").\n.decl Includes(Food:symbol, Ingredient:symbol)\nIncludes(\"crab\", \"crustacean\").\n.decl Answer()\nAnswer() :- Celebrates(\"Diwali celebration\", holiday), Includes(food, \"crustacean\"), Celebrates(food, holiday).\n.output Answer", "completions": [".decl Celebrates(Event:symbol, Holiday:symbol)\nCelebrates(\"Diwali celebration\", \"Diwali\").\n.decl Includes(Food:symbol, Ingredient:symbol)\nIncludes(\"crab\", \"crustacean\").\n.decl Answer()\nAnswer() :- Celebrates(\"Diwali celebration\", holiday), Includes(food, \"crustacean\"), Celebrates(food, holiday).\n.output Answer"]}
{"id": 1850, "answer": true, "completion": ".decl Named_after(Entity:symbol, Name:symbol)\nNamed_after(\"goddess\", \"Friday\").\n.decl Despises(Entity:symbol, Animal:symbol)\nDespises(\"Friday\", \"cats\").\n.decl Answer()\nAnswer() :- Named_after(entity, \"Friday\"), Despises(entity, \"cats\").\n.output Answer", "completions": [".decl Named_after(Entity:symbol, Name:symbol)\nNamed_after(\"goddess\", \"Friday\").\n.decl Despises(Entity:symbol, Animal:symbol)\nDespises(\"Friday\", \"cats\").\n.decl Answer()\nAnswer() :- Named_after(entity, \"Friday\"), Despises(entity, \"cats\").\n.output Answer"]}
{"id": 1851, "answer": true, "completion": ".decl Can_eat_with(Object:symbol, Body_part:symbol)\nCan_eat_with(\"soup\", \"spoon\").\nCan_eat_with(\"pizza\", \"hands\").\nCan_eat_with(\"chicken wings\", \"hands\").\n.decl Answer()\nAnswer() :- Can_eat_with(\"soup\", body_part), body_part = \"hands\", !.\n.output Answer", "completions": [".decl Can_eat_with(Object:symbol, Body_part:symbol)\nCan_eat_with(\"soup\", \"spoon\").\nCan_eat_with(\"pizza\", \"hands\").\nCan_eat_with(\"chicken wings\", \"hands\").\n.decl Answer()\nAnswer() :- Can_eat_with(\"soup\", body_part), body_part = \"hands\", !.\n.output Answer"]}
{"id": 1852, "answer": false, "completion": ".decl Suffers_from(Person:symbol, Condition:symbol)\nSuffers_from(\"person1\", \"Thalassophobia\").\n.decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"person1\", \"oceanography\").\n.decl Answer()\nAnswer() :- Suffers_from(person, \"Thalassophobia\"), !Enjoys(person, \"oceanography\").\n.output Answer", "completions": [".decl Suffers_from(Person:symbol, Condition:symbol)\nSuffers_from(\"person1\", \"Thalassophobia\").\n.decl Enjoys(Person:symbol, Activity:symbol)\nEnjoys(\"person1\", \"oceanography\").\n.decl Answer()\nAnswer() :- Suffers_from(person, \"Thalassophobia\"), !Enjoys(person, \"oceanography\").\n.output Answer"]}
{"id": 1853, "answer": true, "completion": ".decl Age(Person:symbol, Age:float)\nAge(\"Eric Clapton\", 0).\n.decl Legal_age_to_purchase(Product:symbol, Age:float)\nLegal_age_to_purchase(\"cigarettes\", 18).\n.decl Answer()\nAnswer() :- Age(\"Eric Clapton\", age), Legal_age_to_purchase(\"cigarettes\", legal_age), age < legal_age.\n.output Answer", "completions": [".decl Age(Person:symbol, Age:float)\nAge(\"Eric Clapton\", 0).\n.decl Legal_age_to_purchase(Product:symbol, Age:float)\nLegal_age_to_purchase(\"cigarettes\", 18).\n.decl Answer()\nAnswer() :- Age(\"Eric Clapton\", age), Legal_age_to_purchase(\"cigarettes\", legal_age), age < legal_age.\n.output Answer"]}
{"id": 1854, "answer": false, "completion": ".decl Won_championship(Team:symbol, Year:float)\nWon_championship(\"Ferrari\", 1975).\nWon_championship(\"McLaren\", 1988).\nWon_championship(\"Williams\", 1996).\n.decl Answer()\nAnswer() :- Won_championship(\"Secretariat\", year).\n.output Answer", "completions": [".decl Won_championship(Team:symbol, Year:float)\nWon_championship(\"Ferrari\", 1975).\nWon_championship(\"McLaren\", 1988).\nWon_championship(\"Williams\", 1996).\n.decl Answer()\nAnswer() :- Won_championship(\"Secretariat\", year).\n.output Answer"]}
{"id": 1855, "answer": false, "completion": ".decl Travels_with(Person1:symbol, Person2:symbol)\nTravels_with(\"Iggy Pop\", \"Josh Homme\").\nTravels_with(\"Josh Homme\", \"Dean Fertita\").\nTravels_with(\"Dean Fertita\", \"Jack Lawrence\").\nTravels_with(\"Jack Lawrence\", \"Alison Mosshart\").\nTravels_with(\"Alison Mosshart\", \"Jamie Hince\").\nTravels_with(\"Jamie Hince\", \"Kate Moss\").\nTravels_with(\"Justin Bieber\", \"Scooter Braun\").\nTravels_with(\"Scooter Braun\", \"Usher\").\nTravels_with(\"Usher\", \"Jay-Z\").\nTravels_with(\"Jay-Z\", \"Beyonce\").\n.decl Answer()\nAnswer() :- Travels_with(\"Iggy Pop\", person1), Travels_with(person1, person2), Travels_with(person2, \"Justin Bieber\").\n.output Answer", "completions": [".decl Travels_with(Person1:symbol, Person2:symbol)\nTravels_with(\"Iggy Pop\", \"Josh Homme\").\nTravels_with(\"Josh Homme\", \"Dean Fertita\").\nTravels_with(\"Dean Fertita\", \"Jack Lawrence\").\nTravels_with(\"Jack Lawrence\", \"Alison Mosshart\").\nTravels_with(\"Alison Mosshart\", \"Jamie Hince\").\nTravels_with(\"Jamie Hince\", \"Kate Moss\").\nTravels_with(\"Justin Bieber\", \"Scooter Braun\").\nTravels_with(\"Scooter Braun\", \"Usher\").\nTravels_with(\"Usher\", \"Jay-Z\").\nTravels_with(\"Jay-Z\", \"Beyonce\").\n.decl Answer()\nAnswer() :- Travels_with(\"Iggy Pop\", person1), Travels_with(person1, person2), Travels_with(person2, \"Justin Bieber\").\n.output Answer"]}
{"id": 1856, "answer": false, "completion": ".decl Performs_well(Person:symbol, Event:symbol)\nPerforms_well(\"Eminem\", \"Grammy Awards\").\n.decl Requires_skill(Event:symbol, Skill:symbol)\nRequires_skill(\"International Mathematical Olympiad\", \"mathematics\").\n.decl Answer()\nAnswer() :- Performs_well(\"Eminem\", event), Requires_skill(event, \"mathematics\"), event != \"Grammy Awards\".\n.output Answer", "completions": [".decl Performs_well(Person:symbol, Event:symbol)\nPerforms_well(\"Eminem\", \"Grammy Awards\").\n.decl Requires_skill(Event:symbol, Skill:symbol)\nRequires_skill(\"International Mathematical Olympiad\", \"mathematics\").\n.decl Answer()\nAnswer() :- Performs_well(\"Eminem\", event), Requires_skill(event, \"mathematics\"), event != \"Grammy Awards\".\n.output Answer"]}
{"id": 1857, "answer": false, "completion": ".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"Tohoku earthquake\", \"tsunami\").\n.decl Survives(Person:symbol, Event:symbol)\nSurvives(\"Godzilla\", \"tsunami\").\n.decl Answer()\nAnswer() :- Causes(\"Tohoku earthquake\", effect), effect = \"tsunami\", !Survives(\"Godzilla\", effect).\n.output Answer", "completions": [".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"Tohoku earthquake\", \"tsunami\").\n.decl Survives(Person:symbol, Event:symbol)\nSurvives(\"Godzilla\", \"tsunami\").\n.decl Answer()\nAnswer() :- Causes(\"Tohoku earthquake\", effect), effect = \"tsunami\", !Survives(\"Godzilla\", effect).\n.output Answer"]}
{"id": 1858, "answer": false, "completion": ".decl Total_episodes(Show:symbol, Episodes:float)\nTotal_episodes(\"JAG\", 227).\n.decl Time_to_watch(Show:symbol, Time:float)\nTime_to_watch(\"JAG\", 4536). // 227 episodes * 20 minutes per episode\n.decl Answer()\nAnswer() :- Time_to_watch(\"JAG\", time), Total_episodes(\"JAG\", episodes), time/(60*24*30) >= 6, time/(episodes*20) <= 24*60.\n.output Answer", "completions": [".decl Total_episodes(Show:symbol, Episodes:float)\nTotal_episodes(\"JAG\", 227).\n.decl Time_to_watch(Show:symbol, Time:float)\nTime_to_watch(\"JAG\", 4536). // 227 episodes * 20 minutes per episode\n.decl Answer()\nAnswer() :- Time_to_watch(\"JAG\", time), Total_episodes(\"JAG\", episodes), time/(60*24*30) >= 6, time/(episodes*20) <= 24*60.\n.output Answer"]}
{"id": 1859, "answer": true, "completion": ".decl Used_by_language(Symbol:symbol, Language:symbol)\nUsed_by_language(\"Greek alphabet\", \"Greek\").\nUsed_by_language(\"Sumerian cuneiform\", \"Sumerian\").\nUsed_by_language(\"Sumerian cuneiform\", \"Akkadian\").\n.decl Answer()\nAnswer() :- Used_by_language(\"Greek alphabet\", language1), Used_by_language(\"Sumerian cuneiform\", language2), language1 = language2.\n.output Answer", "completions": [".decl Used_by_language(Symbol:symbol, Language:symbol)\nUsed_by_language(\"Greek alphabet\", \"Greek\").\nUsed_by_language(\"Sumerian cuneiform\", \"Sumerian\").\nUsed_by_language(\"Sumerian cuneiform\", \"Akkadian\").\n.decl Answer()\nAnswer() :- Used_by_language(\"Greek alphabet\", language1), Used_by_language(\"Sumerian cuneiform\", language2), language1 = language2.\n.output Answer"]}
{"id": 1860, "answer": false, "completion": ".decl Sells(Car:symbol, Price:float)\nSells(\"2020 Chevrolet Corvette\", 60000).\n.decl Costs(University:symbol, Cost:float)\nCosts(\"Columbia University\", 80000).\n.decl Answer()\nAnswer() :- Sells(\"2020 Chevrolet Corvette\", price), Costs(\"Columbia University\", cost), price >= cost/2.\n.output Answer", "completions": [".decl Sells(Car:symbol, Price:float)\nSells(\"2020 Chevrolet Corvette\", 60000).\n.decl Costs(University:symbol, Cost:float)\nCosts(\"Columbia University\", 80000).\n.decl Answer()\nAnswer() :- Sells(\"2020 Chevrolet Corvette\", price), Costs(\"Columbia University\", cost), price >= cost/2.\n.output Answer"]}
{"id": 1861, "answer": true, "completion": ".decl Has_capacity(Hotel:symbol, Capacity:float)\nHas_capacity(\"Tahiti Hotel 1\", 100).\nHas_capacity(\"Tahiti Hotel 2\", 150).\nHas_capacity(\"Tahiti Hotel 3\", 200).\nHas_capacity(\"Tahiti Hotel 4\", 75).\n.decl Answer()\nAnswer() :- Has_capacity(hotel, capacity), capacity >= 10000.\n.output Answer", "completions": [".decl Has_capacity(Hotel:symbol, Capacity:float)\nHas_capacity(\"Tahiti Hotel 1\", 100).\nHas_capacity(\"Tahiti Hotel 2\", 150).\nHas_capacity(\"Tahiti Hotel 3\", 200).\nHas_capacity(\"Tahiti Hotel 4\", 75).\n.decl Answer()\nAnswer() :- Has_capacity(hotel, capacity), capacity >= 10000.\n.output Answer"]}
{"id": 1862, "answer": false, "completion": ".decl Competes_in(Person:symbol, Event:symbol, Host:symbol)\nCompetes_in(\"Evander Holyfield\", \"boxing\", \"Atlanta\").\nCompetes_in(\"Usain Bolt\", \"sprinting\", \"Beijing\").\nCompetes_in(\"Michael Phelps\", \"swimming\", \"Rio de Janeiro\").\n.decl Is_western_hemisphere(Continent:symbol)\nIs_western_hemisphere(\"North America\").\nIs_western_hemisphere(\"South America\").\n.decl Hosts(Event:symbol, Host:symbol)\nHosts(\"boxing\", \"Atlanta\").\nHosts(\"sprinting\", \"Beijing\").\nHosts(\"swimming\", \"Rio de Janeiro\").\n.decl Answer()\nAnswer() :- Competes_in(\"Evander Holyfield\", event, host), Hosts(event, host), Is_western_hemisphere(continent), continent = \"North America\" ; continent = \"South America\".\n.output Answer", "completions": [".decl Competes_in(Person:symbol, Event:symbol, Host:symbol)\nCompetes_in(\"Evander Holyfield\", \"boxing\", \"Atlanta\").\nCompetes_in(\"Usain Bolt\", \"sprinting\", \"Beijing\").\nCompetes_in(\"Michael Phelps\", \"swimming\", \"Rio de Janeiro\").\n.decl Is_western_hemisphere(Continent:symbol)\nIs_western_hemisphere(\"North America\").\nIs_western_hemisphere(\"South America\").\n.decl Hosts(Event:symbol, Host:symbol)\nHosts(\"boxing\", \"Atlanta\").\nHosts(\"sprinting\", \"Beijing\").\nHosts(\"swimming\", \"Rio de Janeiro\").\n.decl Answer()\nAnswer() :- Competes_in(\"Evander Holyfield\", event, host), Hosts(event, host), Is_western_hemisphere(continent), continent = \"North America\" ; continent = \"South America\".\n.output Answer"]}
{"id": 1863, "answer": false, "completion": ".decl Has_production(Country:symbol, Crop:symbol, Production:float)\nHas_production(\"Brazil\", \"watermelon\", 5000000).\nHas_production(\"Antarctica\", \"watermelon\", 0).\n.decl Answer()\nAnswer() :- Has_production(\"Brazil\", \"watermelon\", production1), Has_production(\"Antarctica\", \"watermelon\", production2), production1 > production2.\n.output Answer", "completions": [".decl Has_production(Country:symbol, Crop:symbol, Production:float)\nHas_production(\"Brazil\", \"watermelon\", 5000000).\nHas_production(\"Antarctica\", \"watermelon\", 0).\n.decl Answer()\nAnswer() :- Has_production(\"Brazil\", \"watermelon\", production1), Has_production(\"Antarctica\", \"watermelon\", production2), production1 > production2.\n.output Answer"]}
{"id": 1864, "answer": false, "completion": ".decl In_hiding(Person:symbol)\nIn_hiding(\"Edward Snowden\").\n.decl Wanted_by_country(Person:symbol, Country:symbol)\nWanted_by_country(\"Edward Snowden\", \"United States\").\n.decl Answer()\nAnswer() :- In_hiding(person), Wanted_by_country(person, \"United States\").\n.output Answer", "completions": [".decl In_hiding(Person:symbol)\nIn_hiding(\"Edward Snowden\").\n.decl Wanted_by_country(Person:symbol, Country:symbol)\nWanted_by_country(\"Edward Snowden\", \"United States\").\n.decl Answer()\nAnswer() :- In_hiding(person), Wanted_by_country(person, \"United States\").\n.output Answer"]}
{"id": 1865, "answer": false, "completion": ".decl Competes_with(Species_A:symbol, Species_B:symbol)\nCompetes_with(\"Leafhoppers\", \"Log Cabin syrup producers\").\n.decl Answer()\nAnswer() :- Competes_with(\"Leafhoppers\", \"Log Cabin syrup producers\").\n.output Answer", "completions": [".decl Competes_with(Species_A:symbol, Species_B:symbol)\nCompetes_with(\"Leafhoppers\", \"Log Cabin syrup producers\").\n.decl Answer()\nAnswer() :- Competes_with(\"Leafhoppers\", \"Log Cabin syrup producers\").\n.output Answer"]}
{"id": 1866, "answer": true, "completion": ".decl Associated_with(Feeling:symbol, Condition:symbol)\nAssociated_with(\"euphoria\", \"drug addiction\").\n.decl Answer()\nAnswer() :- Associated_with(\"euphoria\", condition).\n.output Answer", "completions": [".decl Associated_with(Feeling:symbol, Condition:symbol)\nAssociated_with(\"euphoria\", \"drug addiction\").\n.decl Answer()\nAnswer() :- Associated_with(\"euphoria\", condition).\n.output Answer"]}
{"id": 1867, "answer": false, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Anthony Quinn\", 13).\nHas_children(\"J.D. Salinger\", 2).\n.decl Answer()\nAnswer() :- Has_children(\"Anthony Quinn\", n_children1), Has_children(\"J.D. Salinger\", n_children2), n_children1 > n_children2.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Anthony Quinn\", 13).\nHas_children(\"J.D. Salinger\", 2).\n.decl Answer()\nAnswer() :- Has_children(\"Anthony Quinn\", n_children1), Has_children(\"J.D. Salinger\", n_children2), n_children1 > n_children2.\n.output Answer"]}
{"id": 1868, "answer": false, "completion": ".decl Earns(Person:symbol, Amount:float)\nEarns(\"Edgar Allan Poe\", 0).\n.decl Writes(Person:symbol, Work:symbol)\nWrites(\"Edgar Allan Poe\", \"The Raven\").\n.decl Sells(Work:symbol, Amount:float)\nSells(\"The Raven\", 1000).\n.decl Answer()\nAnswer() :- Writes(person, work), Sells(work, amount), Earns(person, earnings), earnings < amount.\n.output Answer", "completions": [".decl Earns(Person:symbol, Amount:float)\nEarns(\"Edgar Allan Poe\", 0).\n.decl Writes(Person:symbol, Work:symbol)\nWrites(\"Edgar Allan Poe\", \"The Raven\").\n.decl Sells(Work:symbol, Amount:float)\nSells(\"The Raven\", 1000).\n.decl Answer()\nAnswer() :- Writes(person, work), Sells(work, amount), Earns(person, earnings), earnings < amount.\n.output Answer"]}
{"id": 1869, "answer": false, "completion": ".decl Habitat(squid:symbol, habitat:symbol)\nHabitat(\"giant squid\", \"deep sea\").\n.decl Requires_gear(activity:symbol)\nRequires_gear(\"capturing giant squid\").\n.decl Answer()\nAnswer() :- Habitat(\"giant squid\", habitat), Requires_gear(activity), habitat != \"deep sea\".\nAnswer() :- Habitat(\"giant squid\", habitat), !Requires_gear(activity), habitat = \"deep sea\".\n.output Answer", "completions": [".decl Habitat(squid:symbol, habitat:symbol)\nHabitat(\"giant squid\", \"deep sea\").\n.decl Requires_gear(activity:symbol)\nRequires_gear(\"capturing giant squid\").\n.decl Answer()\nAnswer() :- Habitat(\"giant squid\", habitat), Requires_gear(activity), habitat != \"deep sea\".\nAnswer() :- Habitat(\"giant squid\", habitat), !Requires_gear(activity), habitat = \"deep sea\".\n.output Answer"]}
{"id": 1870, "answer": false, "completion": ".decl Wrote_book(Author:symbol, Book:symbol)\nWrote_book(\"Louisa May Alcott\", \"Little Women\").\n.decl Ratified_amendment(Amendment:float, Year:float)\nRatified_amendment(13, 1865).\n.decl Answer()\nAnswer() :- Wrote_book(\"Louisa May Alcott\", book), Ratified_amendment(13, year), year <=  book_year(\"Little Women\", year).\n.output Answer", "completions": [".decl Wrote_book(Author:symbol, Book:symbol)\nWrote_book(\"Louisa May Alcott\", \"Little Women\").\n.decl Ratified_amendment(Amendment:float, Year:float)\nRatified_amendment(13, 1865).\n.decl Answer()\nAnswer() :- Wrote_book(\"Louisa May Alcott\", book), Ratified_amendment(13, year), year <=  book_year(\"Little Women\", year).\n.output Answer"]}
{"id": 1871, "answer": false, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Eric Clapton\", 5).\n.decl Height(Person:symbol, Height:float)\nHeight(\"Eric Clapton\", 1.75).\n.decl Answer()\nAnswer() :- Has_children(\"Eric Clapton\", n_children), n_children >= 2, Height(\"Eric Clapton\", height), height >= 1.8, N_children*height >= 10.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Eric Clapton\", 5).\n.decl Height(Person:symbol, Height:float)\nHeight(\"Eric Clapton\", 1.75).\n.decl Answer()\nAnswer() :- Has_children(\"Eric Clapton\", n_children), n_children >= 2, Height(\"Eric Clapton\", height), height >= 1.8, N_children*height >= 10.\n.output Answer"]}
{"id": 1872, "answer": false, "completion": ".decl Has_n_projects(Franchise:symbol, N_projects:float)\nHas_n_projects(\"Friday the 13th\", 12).\n.decl Has_n_shows(Franchise:symbol, N_shows:float)\nHas_n_shows(\"Dragon Ball\", 5).\n.decl Has_n_movies(Franchise:symbol, N_movies:float)\nHas_n_movies(\"Dragon Ball\", 20).\n.decl Answer()\nAnswer() :- Has_n_shows(\"Dragon Ball\", n_shows), Has_n_movies(\"Dragon Ball\", n_movies), Has_n_projects(\"Friday the 13th\", n_projects), n_shows + n_movies < n_projects.\n.output Answer", "completions": [".decl Has_n_projects(Franchise:symbol, N_projects:float)\nHas_n_projects(\"Friday the 13th\", 12).\n.decl Has_n_shows(Franchise:symbol, N_shows:float)\nHas_n_shows(\"Dragon Ball\", 5).\n.decl Has_n_movies(Franchise:symbol, N_movies:float)\nHas_n_movies(\"Dragon Ball\", 20).\n.decl Answer()\nAnswer() :- Has_n_shows(\"Dragon Ball\", n_shows), Has_n_movies(\"Dragon Ball\", n_movies), Has_n_projects(\"Friday the 13th\", n_projects), n_shows + n_movies < n_projects.\n.output Answer"]}
{"id": 1873, "answer": true, "completion": ".decl Contains_vitamin(Object:symbol, Vitamin:symbol)\nContains_vitamin(\"lemonade\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Contains_vitamin(\"lemonade\", \"Vitamin C\").\n.output Answer", "completions": [".decl Contains_vitamin(Object:symbol, Vitamin:symbol)\nContains_vitamin(\"lemonade\", \"Vitamin C\").\n.decl Answer()\nAnswer() :- Contains_vitamin(\"lemonade\", \"Vitamin C\").\n.output Answer"]}
{"id": 1874, "answer": false, "completion": ".decl Produces(Species:symbol, Product:symbol)\nProduces(\"Bombyx mori\", \"silk\").\nProduces(\"Antheraea mylitta\", \"silk\").\nProduces(\"Tussah silk moth\", \"silk\").\n.decl Answer()\nAnswer() :- Produces(species1, \"silk\"), Produces(species2, \"silk\"), species1 != species2.\n.output Answer", "completions": [".decl Produces(Species:symbol, Product:symbol)\nProduces(\"Bombyx mori\", \"silk\").\nProduces(\"Antheraea mylitta\", \"silk\").\nProduces(\"Tussah silk moth\", \"silk\").\n.decl Answer()\nAnswer() :- Produces(species1, \"silk\"), Produces(species2, \"silk\"), species1 != species2.\n.output Answer"]}
{"id": 1875, "answer": false, "completion": ".decl Took_picture(Mission:symbol, Object:symbol)\nTook_picture(\"Apollo 15\", \"Moon\").\nTook_picture(\"Apollo 15\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Took_picture(\"Apollo 15\", \"Mount Sharp\").\n.output Answer", "completions": [".decl Took_picture(Mission:symbol, Object:symbol)\nTook_picture(\"Apollo 15\", \"Moon\").\nTook_picture(\"Apollo 15\", \"Mount Sharp\").\n.decl Answer()\nAnswer() :- Took_picture(\"Apollo 15\", \"Mount Sharp\").\n.output Answer"]}
{"id": 1876, "answer": false, "completion": ".decl Charges_for_bags(Store:symbol, Charge:float)\nCharges_for_bags(\"Aldi\", 0).\n.decl Answer()\nAnswer() :- Charges_for_bags(\"Aldi\", charge), charge > 0.\n.output Answer", "completions": [".decl Charges_for_bags(Store:symbol, Charge:float)\nCharges_for_bags(\"Aldi\", 0).\n.decl Answer()\nAnswer() :- Charges_for_bags(\"Aldi\", charge), charge > 0.\n.output Answer"]}
{"id": 1877, "answer": false, "completion": ".decl Has_top_speed(Vehicle:symbol, Top_speed:float)\nHas_top_speed(\"Porsche 992 Turbo S\", 330).\n.decl Runs_100m(Person:symbol, Time:float)\nRuns_100m(\"Usain Bolt\", 9.58).\n.decl Answer()\nAnswer() :- Has_top_speed(vehicle_speed), Runs_100m(\"Usain Bolt\", time), vehicle_speed / 3.6 < 100 / time.\n.output Answer", "completions": [".decl Has_top_speed(Vehicle:symbol, Top_speed:float)\nHas_top_speed(\"Porsche 992 Turbo S\", 330).\n.decl Runs_100m(Person:symbol, Time:float)\nRuns_100m(\"Usain Bolt\", 9.58).\n.decl Answer()\nAnswer() :- Has_top_speed(vehicle_speed), Runs_100m(\"Usain Bolt\", time), vehicle_speed / 3.6 < 100 / time.\n.output Answer"]}
{"id": 1878, "answer": false, "completion": ".decl Used_for(Sport:symbol, Equipment:symbol)\nUsed_for(\"curling\", \"broom\").\n.decl Suitable_for(Equipment:symbol, Surface:symbol)\nSuitable_for(\"broom\", \"ice\").\n.decl Answer()\nAnswer() :- Used_for(sport, \"broom\"), Suitable_for(\"broom\", surface), surface != \"ice\".\n.output Answer", "completions": [".decl Used_for(Sport:symbol, Equipment:symbol)\nUsed_for(\"curling\", \"broom\").\n.decl Suitable_for(Equipment:symbol, Surface:symbol)\nSuitable_for(\"broom\", \"ice\").\n.decl Answer()\nAnswer() :- Used_for(sport, \"broom\"), Suitable_for(\"broom\", surface), surface != \"ice\".\n.output Answer"]}
{"id": 1879, "answer": false, "completion": ".decl Has_piercings(Person:symbol, Piercings:symbol)\nHas_piercings(\"John\", \"lip\").\nHas_piercings(\"Jane\", \"nose\").\n.decl Dental_bills(Person:symbol, Bills:float)\nDental_bills(\"John\", 500).\nDental_bills(\"Jane\", 300).\n.decl Answer()\nAnswer() :- Has_piercings(person, \"lip\"), Dental_bills(person, bills1), Has_piercings(person, piercing2), Dental_bills(person, bills2), piercing2 != \"lip\", bills1 > bills2.\n.output Answer", "completions": [".decl Has_piercings(Person:symbol, Piercings:symbol)\nHas_piercings(\"John\", \"lip\").\nHas_piercings(\"Jane\", \"nose\").\n.decl Dental_bills(Person:symbol, Bills:float)\nDental_bills(\"John\", 500).\nDental_bills(\"Jane\", 300).\n.decl Answer()\nAnswer() :- Has_piercings(person, \"lip\"), Dental_bills(person, bills1), Has_piercings(person, piercing2), Dental_bills(person, bills2), piercing2 != \"lip\", bills1 > bills2.\n.output Answer"]}
{"id": 1880, "answer": true, "completion": ".decl Has_genre(Artist:symbol, Genre:symbol, Decade:float)\nHas_genre(\"ABBA\", \"disco\", 1970).\n.decl Answer()\nAnswer() :- Has_genre(\"ABBA\", genre, decade), decade <= 1980, genre = \"disco\".\n.output Answer", "completions": [".decl Has_genre(Artist:symbol, Genre:symbol, Decade:float)\nHas_genre(\"ABBA\", \"disco\", 1970).\n.decl Answer()\nAnswer() :- Has_genre(\"ABBA\", genre, decade), decade <= 1980, genre = \"disco\".\n.output Answer"]}
{"id": 1881, "answer": true, "completion": ".decl Successful_work(Person:symbol, Work:symbol)\nSuccessful_work(\"J.D. Salinger\", \"The Catcher in the Rye\").\n.decl Influential_to(Person:symbol, Influence:symbol)\nInfluential_to(\"The Catcher in the Rye\", \"killers\").\n.decl Answer()\nAnswer() :- Successful_work(\"J.D. Salinger\", work), Influential_to(work, \"killers\").\n.output Answer", "completions": [".decl Successful_work(Person:symbol, Work:symbol)\nSuccessful_work(\"J.D. Salinger\", \"The Catcher in the Rye\").\n.decl Influential_to(Person:symbol, Influence:symbol)\nInfluential_to(\"The Catcher in the Rye\", \"killers\").\n.decl Answer()\nAnswer() :- Successful_work(\"J.D. Salinger\", work), Influential_to(work, \"killers\").\n.output Answer"]}
{"id": 1882, "answer": true, "completion": ".decl Prefers(Person:symbol, Food:symbol)\nPrefers(\"Cyndi Lauper\", \"rice pudding\").\n.decl Has_substitute(Food:symbol, Substitute:symbol)\nHas_substitute(\"milk\", \"soy milk\").\nHas_substitute(\"milk\", \"almond milk\").\n.decl Answer()\nAnswer() :- Prefers(\"Cyndi Lauper\", food), Has_substitute(\"milk\", substitute), !Prefers(\"Cyndi Lauper\", substitute).\n.output Answer", "completions": [".decl Prefers(Person:symbol, Food:symbol)\nPrefers(\"Cyndi Lauper\", \"rice pudding\").\n.decl Has_substitute(Food:symbol, Substitute:symbol)\nHas_substitute(\"milk\", \"soy milk\").\nHas_substitute(\"milk\", \"almond milk\").\n.decl Answer()\nAnswer() :- Prefers(\"Cyndi Lauper\", food), Has_substitute(\"milk\", substitute), !Prefers(\"Cyndi Lauper\", substitute).\n.output Answer"]}
{"id": 1883, "answer": false, "completion": ".decl On_calendar(Animal:symbol, Year:symbol)\nOn_calendar(\"rat\", \"2020\").\nOn_calendar(\"ox\", \"2021\").\nOn_calendar(\"tiger\", \"2010\").\nOn_calendar(\"rabbit\", \"2011\").\nOn_calendar(\"dragon\", \"2012\").\nOn_calendar(\"snake\", \"2013\").\nOn_calendar(\"horse\", \"2014\").\nOn_calendar(\"sheep\", \"2015\").\nOn_calendar(\"monkey\", \"2016\").\nOn_calendar(\"rooster\", \"2017\").\nOn_calendar(\"dog\", \"2018\").\nOn_calendar(\"pig\", \"2019\").\nOn_calendar(\"rat\", \"2032\").\nOn_calendar(\"ox\", \"2033\").\nOn_calendar(\"tiger\", \"2034\").\nOn_calendar(\"rabbit\", \"2035\").\nOn_calendar(\"dragon\", \"2036\").\nOn_calendar(\"snake\", \"2037\").\nOn_calendar(\"horse\", \"2038\").\nOn_calendar(\"sheep\", \"2039\").\nOn_calendar(\"monkey\", \"2040\").\nOn_calendar(\"rooster\", \"2041\").\nOn_calendar(\"dog\", \"2042\").\nOn_calendar(\"pig\", \"2043\").\n.decl Is_mollusk(Animal:symbol)\nIs_mollusk(\"octopus\").\nIs_mollusk(\"clam\").\nIs_mollusk(\"snail\").\nIs_mollusk(\"oyster\").\n.decl Answer()\nAnswer() :- On_calendar(animal, year), Is_mollusk(animal).\n.output Answer", "completions": [".decl On_calendar(Animal:symbol, Year:symbol)\nOn_calendar(\"rat\", \"2020\").\nOn_calendar(\"ox\", \"2021\").\nOn_calendar(\"tiger\", \"2010\").\nOn_calendar(\"rabbit\", \"2011\").\nOn_calendar(\"dragon\", \"2012\").\nOn_calendar(\"snake\", \"2013\").\nOn_calendar(\"horse\", \"2014\").\nOn_calendar(\"sheep\", \"2015\").\nOn_calendar(\"monkey\", \"2016\").\nOn_calendar(\"rooster\", \"2017\").\nOn_calendar(\"dog\", \"2018\").\nOn_calendar(\"pig\", \"2019\").\nOn_calendar(\"rat\", \"2032\").\nOn_calendar(\"ox\", \"2033\").\nOn_calendar(\"tiger\", \"2034\").\nOn_calendar(\"rabbit\", \"2035\").\nOn_calendar(\"dragon\", \"2036\").\nOn_calendar(\"snake\", \"2037\").\nOn_calendar(\"horse\", \"2038\").\nOn_calendar(\"sheep\", \"2039\").\nOn_calendar(\"monkey\", \"2040\").\nOn_calendar(\"rooster\", \"2041\").\nOn_calendar(\"dog\", \"2042\").\nOn_calendar(\"pig\", \"2043\").\n.decl Is_mollusk(Animal:symbol)\nIs_mollusk(\"octopus\").\nIs_mollusk(\"clam\").\nIs_mollusk(\"snail\").\nIs_mollusk(\"oyster\").\n.decl Answer()\nAnswer() :- On_calendar(animal, year), Is_mollusk(animal).\n.output Answer"]}
{"id": 1884, "answer": true, "completion": ".decl Present_at(Event:symbol, Person:symbol)\nPresent_at(\"death of Eomer\", \"Gandalf\").\n.decl Answer()\nAnswer() :- Present_at(\"death of Eomer\", \"Gandalf\").\n.output Answer", "completions": [".decl Present_at(Event:symbol, Person:symbol)\nPresent_at(\"death of Eomer\", \"Gandalf\").\n.decl Answer()\nAnswer() :- Present_at(\"death of Eomer\", \"Gandalf\").\n.output Answer"]}
{"id": 1885, "answer": false, "completion": ".decl Burial(Person:symbol, Date:symbol)\nBurial(\"Marie Curie\", \"April 20, 1995\").\nBurial(\"Sophie Berthelot\", \"April 4, 1907\").\nBurial(\"Marie-Joseph Chénier\", \"April 7, 1811\").\n.decl Orbits(Planet:symbol, Orbit_time:float)\nOrbits(\"Neptune\", 164.79).\n.decl Answer()\nAnswer() :- Burial(woman1, date1), Burial(woman2, date2), Orbits(\"Neptune\", orbit_time), date1 < date2, date2 - date1 > orbit_time.\n.output Answer", "completions": [".decl Burial(Person:symbol, Date:symbol)\nBurial(\"Marie Curie\", \"April 20, 1995\").\nBurial(\"Sophie Berthelot\", \"April 4, 1907\").\nBurial(\"Marie-Joseph Chénier\", \"April 7, 1811\").\n.decl Orbits(Planet:symbol, Orbit_time:float)\nOrbits(\"Neptune\", 164.79).\n.decl Answer()\nAnswer() :- Burial(woman1, date1), Burial(woman2, date2), Orbits(\"Neptune\", orbit_time), date1 < date2, date2 - date1 > orbit_time.\n.output Answer"]}
{"id": 1886, "answer": true, "completion": ".decl Has_prevalence(Disease:symbol, Prevalence:float)\nHas_prevalence(\"bipolar disorder\", 2).\nHas_prevalence(\"diabetes\", 8).\n.decl Answer()\nAnswer() :- Has_prevalence(\"bipolar disorder\", prevalence1), Has_prevalence(\"diabetes\", prevalence2), prevalence1 < prevalence2.\n.output Answer", "completions": [".decl Has_prevalence(Disease:symbol, Prevalence:float)\nHas_prevalence(\"bipolar disorder\", 2).\nHas_prevalence(\"diabetes\", 8).\n.decl Answer()\nAnswer() :- Has_prevalence(\"bipolar disorder\", prevalence1), Has_prevalence(\"diabetes\", prevalence2), prevalence1 < prevalence2.\n.output Answer"]}
{"id": 1887, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Stone Cold Steve Austin's wife 1\", 1.7).\nHas_height(\"Stone Cold Steve Austin's wife 2\", 1.6).\nHas_height(\"Stone Cold Steve Austin's wife 3\", 1.8).\n.decl Fits_in_car(Car:symbol, Person:symbol)\nFits_in_car(\"Audi TT\", \"Stone Cold Steve Austin's wife 1\").\nFits_in_car(\"Audi TT\", \"Stone Cold Steve Austin's wife 2\").\nFits_in_car(\"Audi TT\", \"Stone Cold Steve Austin's wife 3\").\n.decl Answer()\nAnswer() :- Has_height(wife1, height1), Has_height(wife2, height2), Has_height(wife3, height3), Fits_in_car(\"Audi TT\", wife1), Fits_in_car(\"Audi TT\", wife2), Fits_in_car(\"Audi TT\", wife3), height1 + height2 + height3 <= 2.1.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Stone Cold Steve Austin's wife 1\", 1.7).\nHas_height(\"Stone Cold Steve Austin's wife 2\", 1.6).\nHas_height(\"Stone Cold Steve Austin's wife 3\", 1.8).\n.decl Fits_in_car(Car:symbol, Person:symbol)\nFits_in_car(\"Audi TT\", \"Stone Cold Steve Austin's wife 1\").\nFits_in_car(\"Audi TT\", \"Stone Cold Steve Austin's wife 2\").\nFits_in_car(\"Audi TT\", \"Stone Cold Steve Austin's wife 3\").\n.decl Answer()\nAnswer() :- Has_height(wife1, height1), Has_height(wife2, height2), Has_height(wife3, height3), Fits_in_car(\"Audi TT\", wife1), Fits_in_car(\"Audi TT\", wife2), Fits_in_car(\"Audi TT\", wife3), height1 + height2 + height3 <= 2.1.\n.output Answer"]}
{"id": 1888, "answer": true, "completion": ".decl Lasts_for(Event:symbol, Duration:float)\nLasts_for(\"Six-Day War\", 6).\n.decl Takes_time(Game:symbol, Time:float)\nTakes_time(\"NBA game\", 2.5).\n.decl Answer()\nAnswer() :- Takes_time(\"NBA game\", time), Lasts_for(\"Six-Day War\", duration), time <= duration.\n.output Answer", "completions": [".decl Lasts_for(Event:symbol, Duration:float)\nLasts_for(\"Six-Day War\", 6).\n.decl Takes_time(Game:symbol, Time:float)\nTakes_time(\"NBA game\", 2.5).\n.decl Answer()\nAnswer() :- Takes_time(\"NBA game\", time), Lasts_for(\"Six-Day War\", duration), time <= duration.\n.output Answer"]}
{"id": 1889, "answer": true, "completion": ".decl Traveled_to(Person:symbol, Place:symbol)\nTraveled_to(\"Ivan the Terrible\", \"Moscow\").\n.decl Answer()\nAnswer() :- !Traveled_to(\"Ivan the Terrible\", \"Europe\").\n.output Answer", "completions": [".decl Traveled_to(Person:symbol, Place:symbol)\nTraveled_to(\"Ivan the Terrible\", \"Moscow\").\n.decl Answer()\nAnswer() :- !Traveled_to(\"Ivan the Terrible\", \"Europe\").\n.output Answer"]}
{"id": 1890, "answer": false, "completion": ".decl Has_food(Item:symbol, Food:symbol)\nHas_food(\"TMNT coloring book\", \"pizza\").\n.decl Answer()\nAnswer() :- Has_food(\"TMNT coloring book\", \"pizza\").\n.output Answer", "completions": [".decl Has_food(Item:symbol, Food:symbol)\nHas_food(\"TMNT coloring book\", \"pizza\").\n.decl Answer()\nAnswer() :- Has_food(\"TMNT coloring book\", \"pizza\").\n.output Answer"]}
{"id": 1891, "answer": true, "completion": ".decl Explains(Theory:symbol, Phenomenon:symbol)\nExplains(\"cultural hegemony\", \"global warming\").\n.decl Answer()\nAnswer() :- Explains(theory, phenomenon), theory != \"cultural hegemony\".\n.output Answer", "completions": [".decl Explains(Theory:symbol, Phenomenon:symbol)\nExplains(\"cultural hegemony\", \"global warming\").\n.decl Answer()\nAnswer() :- Explains(theory, phenomenon), theory != \"cultural hegemony\".\n.output Answer"]}
{"id": 1892, "answer": false, "completion": ".decl Used_at_location(Item:symbol, Location:symbol)\nUsed_at_location(\"kayak\", \"water\").\nUsed_at_location(\"Mount Everest\", \"mountain\").\n.decl Answer()\nAnswer() :- Used_at_location(\"kayak\", location), Used_at_location(\"Mount Everest\", location).\n.output Answer", "completions": [".decl Used_at_location(Item:symbol, Location:symbol)\nUsed_at_location(\"kayak\", \"water\").\nUsed_at_location(\"Mount Everest\", \"mountain\").\n.decl Answer()\nAnswer() :- Used_at_location(\"kayak\", location), Used_at_location(\"Mount Everest\", location).\n.output Answer"]}
{"id": 1893, "answer": true, "completion": ".decl Happens_on_date(Event:symbol, Date:symbol)\nHappens_on_date(\"Christmas\", \"December 25\").\n.decl Day_of_week(Date:symbol, Day:symbol)\nDay_of_week(\"December 25\", \"Sunday\").\n.decl Answer()\nAnswer() :- Happens_on_date(\"Christmas\", date), Day_of_week(date, \"Sunday\").\n.output Answer", "completions": [".decl Happens_on_date(Event:symbol, Date:symbol)\nHappens_on_date(\"Christmas\", \"December 25\").\n.decl Day_of_week(Date:symbol, Day:symbol)\nDay_of_week(\"December 25\", \"Sunday\").\n.decl Answer()\nAnswer() :- Happens_on_date(\"Christmas\", date), Day_of_week(date, \"Sunday\").\n.output Answer"]}
{"id": 1894, "answer": true, "completion": ".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Swan Lake performance\", \"theater\").\n.decl Requires_water(Event:symbol)\nRequires_water(\"drowning\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Swan Lake performance\", place), Requires_water(\"drowning\"), place != \"swimming pool\".\n.output Answer", "completions": [".decl Happens_in_place(Event:symbol, Place:symbol)\nHappens_in_place(\"Swan Lake performance\", \"theater\").\n.decl Requires_water(Event:symbol)\nRequires_water(\"drowning\").\n.decl Answer()\nAnswer() :- Happens_in_place(\"Swan Lake performance\", place), Requires_water(\"drowning\"), place != \"swimming pool\".\n.output Answer"]}
{"id": 1895, "answer": false, "completion": ".decl Likes(Person:symbol, Band:symbol)\nLikes(\"Armenian1\", \"System of a Down\").\nLikes(\"Armenian2\", \"System of a Down\").\nLikes(\"Armenian3\", \"Metallica\").\nLikes(\"Armenian4\", \"Pink Floyd\").\n.decl Answer()\nAnswer() :- !Likes(\"Armenian\", \"System of a Down\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Band:symbol)\nLikes(\"Armenian1\", \"System of a Down\").\nLikes(\"Armenian2\", \"System of a Down\").\nLikes(\"Armenian3\", \"Metallica\").\nLikes(\"Armenian4\", \"Pink Floyd\").\n.decl Answer()\nAnswer() :- !Likes(\"Armenian\", \"System of a Down\").\n.output Answer"]}
{"id": 1896, "answer": true, "completion": ".decl Has_teammate(Character_A:symbol, Character_B:symbol)\nHas_teammate(\"Blossom\", \"Buttercup\").\nHas_teammate(\"Blossom\", \"Bubbles\").\nHas_teammate(\"Buttercup\", \"Bubbles\").\n.decl Can_form_team()\nCan_form_team() :- Has_teammate(char1, char2), Has_teammate(char1, char3), Has_teammate(char2, char3).\n.output Can_form_team", "completions": [".decl Has_teammate(Character_A:symbol, Character_B:symbol)\nHas_teammate(\"Blossom\", \"Buttercup\").\nHas_teammate(\"Blossom\", \"Bubbles\").\nHas_teammate(\"Buttercup\", \"Bubbles\").\n.decl Can_form_team()\nCan_form_team() :- Has_teammate(char1, char2), Has_teammate(char1, char3), Has_teammate(char2, char3).\n.output Can_form_team"]}
{"id": 1897, "answer": false, "completion": ".decl Has_n_songs(Service:symbol, N_songs:float)\nHas_n_songs(\"Itunes\", 70_000_000).\n.decl Time_in_year(Time:symbol, N_hours:float)\nTime_in_year(\"365 days\", 8_760).\n.decl Answer()\nAnswer() :- Has_n_songs(\"Itunes\", n_songs), Time_in_year(\"365 days\", n_hours), n_songs * 3 <= n_hours.\n.output Answer", "completions": [".decl Has_n_songs(Service:symbol, N_songs:float)\nHas_n_songs(\"Itunes\", 70_000_000).\n.decl Time_in_year(Time:symbol, N_hours:float)\nTime_in_year(\"365 days\", 8_760).\n.decl Answer()\nAnswer() :- Has_n_songs(\"Itunes\", n_songs), Time_in_year(\"365 days\", n_hours), n_songs * 3 <= n_hours.\n.output Answer"]}
{"id": 1898, "answer": false, "completion": ".decl Genre(Artist:symbol, Genre:symbol)\nGenre(\"The Beatles\", \"rock\").\nGenre(\"The Bee Gees\", \"disco\").\n.decl Wrote_song(Artist:symbol, Song:symbol)\nWrote_song(\"The Beatles\", \"Hey Jude\").\nWrote_song(\"The Beatles\", \"Let It Be\").\nWrote_song(\"The Bee Gees\", \"Stayin' Alive\").\n.decl Answer()\nAnswer() :- Wrote_song(\"The Beatles\", song), !Genre(\"The Bee Gees\", \"disco\"), Genre(\"The Beatles\", \"rock\").\n.output Answer", "completions": [".decl Genre(Artist:symbol, Genre:symbol)\nGenre(\"The Beatles\", \"rock\").\nGenre(\"The Bee Gees\", \"disco\").\n.decl Wrote_song(Artist:symbol, Song:symbol)\nWrote_song(\"The Beatles\", \"Hey Jude\").\nWrote_song(\"The Beatles\", \"Let It Be\").\nWrote_song(\"The Bee Gees\", \"Stayin' Alive\").\n.decl Answer()\nAnswer() :- Wrote_song(\"The Beatles\", song), !Genre(\"The Bee Gees\", \"disco\"), Genre(\"The Beatles\", \"rock\").\n.output Answer"]}
{"id": 1899, "answer": true, "completion": ".decl Has_feature(Game:symbol, Feature:symbol)\nHas_feature(\"Metroid\", \"side-scrolling\").\nHas_feature(\"Metroid\", \"non-linear gameplay\").\nHas_feature(\"Metroid\", \"power-ups\").\nHas_feature(\"Metroid\", \"music\").\nHas_feature(\"Metroid\", \"atmosphere\").\nHas_feature(\"Metroid\", \"story\").\nHas_feature(\"Metroid\", \"sprites\").\nHas_feature(\"Metroid\", \"exploration\").\nHas_feature(\"Metroid\", \"boss battles\").\nHas_feature(\"Metroid\", \"platforming\").\nHas_feature(\"Metroid\", \"shooting\").\nHas_feature(\"Metroid\", \"health system\").\nHas_feature(\"Metroid\", \"save system\").\nHas_feature(\"Metroid\", \"hidden secrets\").\nHas_feature(\"Metroid\", \"upgrades\").\nHas_feature(\"Metroid\", \"map system\").\nHas_feature(\"Metroid\", \"polygons\").\n.decl Answer()\nAnswer() :- Has_feature(\"Metroid\", \"polygons\").\n.output Answer", "completions": [".decl Has_feature(Game:symbol, Feature:symbol)\nHas_feature(\"Metroid\", \"side-scrolling\").\nHas_feature(\"Metroid\", \"non-linear gameplay\").\nHas_feature(\"Metroid\", \"power-ups\").\nHas_feature(\"Metroid\", \"music\").\nHas_feature(\"Metroid\", \"atmosphere\").\nHas_feature(\"Metroid\", \"story\").\nHas_feature(\"Metroid\", \"sprites\").\nHas_feature(\"Metroid\", \"exploration\").\nHas_feature(\"Metroid\", \"boss battles\").\nHas_feature(\"Metroid\", \"platforming\").\nHas_feature(\"Metroid\", \"shooting\").\nHas_feature(\"Metroid\", \"health system\").\nHas_feature(\"Metroid\", \"save system\").\nHas_feature(\"Metroid\", \"hidden secrets\").\nHas_feature(\"Metroid\", \"upgrades\").\nHas_feature(\"Metroid\", \"map system\").\nHas_feature(\"Metroid\", \"polygons\").\n.decl Answer()\nAnswer() :- Has_feature(\"Metroid\", \"polygons\").\n.output Answer"]}
{"id": 1900, "answer": true, "completion": ".decl Anger_level(Organization:symbol, Animal:symbol, Level:float)\nAnger_level(\"WWF\", \"koala\", 10).\nAnger_level(\"WWF\", \"black swan\", 5).\n.decl Answer()\nAnswer() :- Anger_level(\"WWF\", \"koala\", level1), Anger_level(\"WWF\", \"black swan\", level2), level1 > level2.\n.output Answer", "completions": [".decl Anger_level(Organization:symbol, Animal:symbol, Level:float)\nAnger_level(\"WWF\", \"koala\", 10).\nAnger_level(\"WWF\", \"black swan\", 5).\n.decl Answer()\nAnswer() :- Anger_level(\"WWF\", \"koala\", level1), Anger_level(\"WWF\", \"black swan\", level2), level1 > level2.\n.output Answer"]}
{"id": 1901, "answer": false, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Hodor\", \"holding doors\").\n.decl Answer()\nAnswer() :- Has_skill(\"Hodor\", skill), skill != \"mathematics\".\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Hodor\", \"holding doors\").\n.decl Answer()\nAnswer() :- Has_skill(\"Hodor\", skill), skill != \"mathematics\".\n.output Answer"]}
{"id": 1902, "answer": true, "completion": ".decl Plays_role(Person:symbol, Role:symbol, Movie:symbol)\nPlays_role(\"Keith Richards\", \"captain\", \"Pirates of the Caribbean: At World's End\").\n.decl Answer()\nAnswer() :- Plays_role(\"Keith Richards\", \"captain\", movie).\n.output Answer", "completions": [".decl Plays_role(Person:symbol, Role:symbol, Movie:symbol)\nPlays_role(\"Keith Richards\", \"captain\", \"Pirates of the Caribbean: At World's End\").\n.decl Answer()\nAnswer() :- Plays_role(\"Keith Richards\", \"captain\", movie).\n.output Answer"]}
{"id": 1903, "answer": false, "completion": ".decl Rivalry(Deity_A:symbol, Deity_B:symbol)\nRivalry(\"Ahura Mazda\", \"Ahriman\").\nRivalry(\"Zeus\", \"Poseidon\").\nRivalry(\"Zeus\", \"Hades\").\n.decl Answer()\nAnswer() :- Rivalry(\"Ahura Mazda\", \"Zeus\").\n.output Answer", "completions": [".decl Rivalry(Deity_A:symbol, Deity_B:symbol)\nRivalry(\"Ahura Mazda\", \"Ahriman\").\nRivalry(\"Zeus\", \"Poseidon\").\nRivalry(\"Zeus\", \"Hades\").\n.decl Answer()\nAnswer() :- Rivalry(\"Ahura Mazda\", \"Zeus\").\n.output Answer"]}
{"id": 1904, "answer": true, "completion": ".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Tata Hexa\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tata Hexa\", capacity), Has_n_members(\"Spice Girls\", n_members), capacity >= n_members.\n.output Answer", "completions": [".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Tata Hexa\", 7).\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Spice Girls\", 5).\n.decl Answer()\nAnswer() :- Has_capacity(\"Tata Hexa\", capacity), Has_n_members(\"Spice Girls\", n_members), capacity >= n_members.\n.output Answer"]}
{"id": 1905, "answer": false, "completion": ".decl Founders(Person:symbol, University:symbol)\nFounders(\"William Pitt\", \"University of Pittsburgh\").\n.decl Birth_year(Person:symbol, Year:float)\nBirth_year(\"Judith Sheindlin\", 1942).\n.decl Answer()\nAnswer() :- Founders(founder, \"University of Pittsburgh\"), Birth_year(\"Judith Sheindlin\", year), founder = \"William Pitt\", year >= 1700, year <= 1800.\n.output Answer", "completions": [".decl Founders(Person:symbol, University:symbol)\nFounders(\"William Pitt\", \"University of Pittsburgh\").\n.decl Birth_year(Person:symbol, Year:float)\nBirth_year(\"Judith Sheindlin\", 1942).\n.decl Answer()\nAnswer() :- Founders(founder, \"University of Pittsburgh\"), Birth_year(\"Judith Sheindlin\", year), founder = \"William Pitt\", year >= 1700, year <= 1800.\n.output Answer"]}
{"id": 1906, "answer": true, "completion": ".decl Can_make_content(Vehicle:symbol, Content:symbol)\nCan_make_content(\"Toyota Supra\", \"car vlog\").\n.decl Answer()\nAnswer() :- Can_make_content(\"Toyota Supra\", \"car vlog\").\n.output Answer", "completions": [".decl Can_make_content(Vehicle:symbol, Content:symbol)\nCan_make_content(\"Toyota Supra\", \"car vlog\").\n.decl Answer()\nAnswer() :- Can_make_content(\"Toyota Supra\", \"car vlog\").\n.output Answer"]}
{"id": 1907, "answer": false, "completion": ".decl Knows(Game:symbol, Player:symbol)\nKnows(\"French Defense\", \"grand master 1\").\nKnows(\"French Defense\", \"grand master 2\").\nKnows(\"French Defense\", \"grand master 3\").\nKnows(\"Sicilian Defense\", \"grand master 4\").\n.decl Is_grand_master(Player:symbol)\nIs_grand_master(\"grand master 1\").\nIs_grand_master(\"grand master 2\").\nIs_grand_master(\"grand master 3\").\nIs_grand_master(\"grand master 4\").\n.decl Answer()\nAnswer() :- Knows(\"French Defense\", player), Is_grand_master(player).\nAnswer() :- Knows(\"French Defense\", player1), Knows(\"French Defense\", player2), Is_grand_master(player1), Is_grand_master(player2), player1 != player2.\n.output Answer", "completions": [".decl Knows(Game:symbol, Player:symbol)\nKnows(\"French Defense\", \"grand master 1\").\nKnows(\"French Defense\", \"grand master 2\").\nKnows(\"French Defense\", \"grand master 3\").\nKnows(\"Sicilian Defense\", \"grand master 4\").\n.decl Is_grand_master(Player:symbol)\nIs_grand_master(\"grand master 1\").\nIs_grand_master(\"grand master 2\").\nIs_grand_master(\"grand master 3\").\nIs_grand_master(\"grand master 4\").\n.decl Answer()\nAnswer() :- Knows(\"French Defense\", player), Is_grand_master(player).\nAnswer() :- Knows(\"French Defense\", player1), Knows(\"French Defense\", player2), Is_grand_master(player1), Is_grand_master(player2), player1 != player2.\n.output Answer"]}
{"id": 1908, "answer": true, "completion": ".decl Has_relationship(Country:symbol, Monarch:symbol)\nHas_relationship(\"Canada\", \"Queen Elizabeth II\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Canada\", monarch).\n.output Answer", "completions": [".decl Has_relationship(Country:symbol, Monarch:symbol)\nHas_relationship(\"Canada\", \"Queen Elizabeth II\").\n.decl Answer()\nAnswer() :- Has_relationship(\"Canada\", monarch).\n.output Answer"]}
{"id": 1909, "answer": false, "completion": ".decl Speaks(Language:symbol, Person:symbol)\nSpeaks(\"Old English\", \"Beowulf\").\n.decl From_region(Person:symbol, Region:symbol)\nFrom_region(\"Beowulf\", \"Scandinavia\").\n.decl Answer()\nAnswer() :- Speaks(\"Old English\", person), From_region(person, \"Pictland\").\n.output Answer", "completions": [".decl Speaks(Language:symbol, Person:symbol)\nSpeaks(\"Old English\", \"Beowulf\").\n.decl From_region(Person:symbol, Region:symbol)\nFrom_region(\"Beowulf\", \"Scandinavia\").\n.decl Answer()\nAnswer() :- Speaks(\"Old English\", person), From_region(person, \"Pictland\").\n.output Answer"]}
{"id": 1910, "answer": true, "completion": ".decl Has_event(Person:symbol, Event:symbol)\nHas_event(\"Charlemagne\", \"coronation\").\n.decl Answer()\nAnswer() :- !Has_event(\"Charlemagne\", \"bar mitzvah\").\n.output Answer", "completions": [".decl Has_event(Person:symbol, Event:symbol)\nHas_event(\"Charlemagne\", \"coronation\").\n.decl Answer()\nAnswer() :- !Has_event(\"Charlemagne\", \"bar mitzvah\").\n.output Answer"]}
{"id": 1911, "answer": false, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Garfield\", \"lasagna\").\n.decl Is_type_of_animal(Animal:symbol, Type:symbol)\nIs_type_of_animal(\"dog\", \"canid\").\n.decl Answer()\nAnswer() :- Is_type_of_animal(animal, \"canid\"), Likes(\"Garfield\", food), food = \"canid food\", !.\nAnswer() :- Is_type_of_animal(animal, \"canid\"), !Likes(\"Garfield\", \"lasagna\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Garfield\", \"lasagna\").\n.decl Is_type_of_animal(Animal:symbol, Type:symbol)\nIs_type_of_animal(\"dog\", \"canid\").\n.decl Answer()\nAnswer() :- Is_type_of_animal(animal, \"canid\"), Likes(\"Garfield\", food), food = \"canid food\", !.\nAnswer() :- Is_type_of_animal(animal, \"canid\"), !Likes(\"Garfield\", \"lasagna\").\n.output Answer"]}
{"id": 1912, "answer": true, "completion": ".decl Survives_with_armor(Person:symbol)\nSurvives_with_armor(\"Franz Ferdinand\").\n.decl Has_armor_animal(Animal:symbol, Armor:symbol)\nHas_armor_animal(\"armadillo\", \"armor\").\n.decl Answer()\nAnswer() :- Survives_with_armor(person), Has_armor_animal(animal, \"armor\").\n.output Answer", "completions": [".decl Survives_with_armor(Person:symbol)\nSurvives_with_armor(\"Franz Ferdinand\").\n.decl Has_armor_animal(Animal:symbol, Armor:symbol)\nHas_armor_animal(\"armadillo\", \"armor\").\n.decl Answer()\nAnswer() :- Survives_with_armor(person), Has_armor_animal(animal, \"armor\").\n.output Answer"]}
{"id": 1913, "answer": false, "completion": ".decl Serves_dish(Restaurant:symbol, Dish:symbol, Country:symbol)\nServes_dish(\"Italian Restaurant\", \"spaghetti and meatballs\", \"Italy\").\nServes_dish(\"American Restaurant\", \"spaghetti and meatballs\", \"USA\").\nServes_dish(\"Swedish Restaurant\", \"meatballs\", \"Sweden\").\n.decl Answer()\nAnswer() :- Serves_dish(restaurant, \"meatballs\", country1), Serves_dish(restaurant, \"spaghetti and meatballs\", country2), country1 != country2.\n.output Answer", "completions": [".decl Serves_dish(Restaurant:symbol, Dish:symbol, Country:symbol)\nServes_dish(\"Italian Restaurant\", \"spaghetti and meatballs\", \"Italy\").\nServes_dish(\"American Restaurant\", \"spaghetti and meatballs\", \"USA\").\nServes_dish(\"Swedish Restaurant\", \"meatballs\", \"Sweden\").\n.decl Answer()\nAnswer() :- Serves_dish(restaurant, \"meatballs\", country1), Serves_dish(restaurant, \"spaghetti and meatballs\", country2), country1 != country2.\n.output Answer"]}
{"id": 1914, "answer": false, "completion": ".decl Bone(Size:symbol, Name:symbol)\nBone(\"large\", \"femur\").\nBone(\"small\", \"stapes\").\n.decl Protects(Torso_part:symbol, Bone_name:symbol)\nProtects(\"ribcage\", \"femur\").\nProtects(\"skull\", \"stapes\").\n.decl Answer()\nAnswer() :- Bone(\"large\", bone1), Bone(\"small\", bone2), Protects(torso_part, bone1), Protects(torso_part, bone2), torso_part = \"ribcage\".\nAnswer() :- Bone(\"large\", bone1), Bone(\"small\", bone2), Protects(torso_part, bone1), Protects(torso_part, bone2), torso_part = \"skull\".\n.output Answer", "completions": [".decl Bone(Size:symbol, Name:symbol)\nBone(\"large\", \"femur\").\nBone(\"small\", \"stapes\").\n.decl Protects(Torso_part:symbol, Bone_name:symbol)\nProtects(\"ribcage\", \"femur\").\nProtects(\"skull\", \"stapes\").\n.decl Answer()\nAnswer() :- Bone(\"large\", bone1), Bone(\"small\", bone2), Protects(torso_part, bone1), Protects(torso_part, bone2), torso_part = \"ribcage\".\nAnswer() :- Bone(\"large\", bone1), Bone(\"small\", bone2), Protects(torso_part, bone1), Protects(torso_part, bone2), torso_part = \"skull\".\n.output Answer"]}
{"id": 1915, "answer": false, "completion": ".decl Has_upload_limit(Plan:symbol, Limit:float)\nHas_upload_limit(\"Centurylink max internet plan\", 1000).\n.decl Has_time_period(Period:symbol, Duration:float)\nHas_time_period(\"fortnight\", 14).\n.decl Answer()\nAnswer() :- Has_upload_limit(\"Centurylink max internet plan\", limit), Has_time_period(\"fortnight\", duration), limit/duration >= 71.43.\n.output Answer", "completions": [".decl Has_upload_limit(Plan:symbol, Limit:float)\nHas_upload_limit(\"Centurylink max internet plan\", 1000).\n.decl Has_time_period(Period:symbol, Duration:float)\nHas_time_period(\"fortnight\", 14).\n.decl Answer()\nAnswer() :- Has_upload_limit(\"Centurylink max internet plan\", limit), Has_time_period(\"fortnight\", duration), limit/duration >= 71.43.\n.output Answer"]}
{"id": 1916, "answer": false, "completion": ".decl Contributed_to_success(Person:symbol, Factor:symbol)\nContributed_to_success(\"Theodor Geisel\", \"rhyming skills\").\nContributed_to_success(\"Theodor Geisel\", \"creative imagination\").\nContributed_to_success(\"Theodor Geisel\", \"unique drawing style\").\n.decl Answer()\nAnswer() :- Contributed_to_success(\"Theodor Geisel\", \"green color\"), !Contributed_to_success(\"Theodor Geisel\", \"rhyming skills\"), !Contributed_to_success(\"Theodor Geisel\", \"creative imagination\"), !Contributed_to_success(\"Theodor Geisel\", \"unique drawing style\").\n.output Answer", "completions": [".decl Contributed_to_success(Person:symbol, Factor:symbol)\nContributed_to_success(\"Theodor Geisel\", \"rhyming skills\").\nContributed_to_success(\"Theodor Geisel\", \"creative imagination\").\nContributed_to_success(\"Theodor Geisel\", \"unique drawing style\").\n.decl Answer()\nAnswer() :- Contributed_to_success(\"Theodor Geisel\", \"green color\"), !Contributed_to_success(\"Theodor Geisel\", \"rhyming skills\"), !Contributed_to_success(\"Theodor Geisel\", \"creative imagination\"), !Contributed_to_success(\"Theodor Geisel\", \"unique drawing style\").\n.output Answer"]}
{"id": 1917, "answer": true, "completion": ".decl Located_in(Place:symbol, Location:symbol)\nLocated_in(\"Central Park Zoo\", \"Manhattan\").\nLocated_in(\"Manhattan\", \"island\").\n.decl Answer()\nAnswer() :- Located_in(\"Central Park Zoo\", location), Located_in(location, \"island\").\n.output Answer", "completions": [".decl Located_in(Place:symbol, Location:symbol)\nLocated_in(\"Central Park Zoo\", \"Manhattan\").\nLocated_in(\"Manhattan\", \"island\").\n.decl Answer()\nAnswer() :- Located_in(\"Central Park Zoo\", location), Located_in(location, \"island\").\n.output Answer"]}
{"id": 1918, "answer": true, "completion": ".decl Shares_information(Organization:symbol, Information:symbol)\nShares_information(\"Planned Parenthood\", \"Herpes simplex virus\").\n.decl Answer()\nAnswer() :- Shares_information(\"Planned Parenthood\", information), information = \"Herpes simplex virus\".\n.output Answer", "completions": [".decl Shares_information(Organization:symbol, Information:symbol)\nShares_information(\"Planned Parenthood\", \"Herpes simplex virus\").\n.decl Answer()\nAnswer() :- Shares_information(\"Planned Parenthood\", information), information = \"Herpes simplex virus\".\n.output Answer"]}
{"id": 1919, "answer": true, "completion": ".decl Has_capital(Country:symbol, Capital:symbol)\nHas_capital(\"United States\", \"Washington D.C.\").\nHas_capital(\"Guam\", \"Hagåtña\").\n.decl Answer()\nAnswer() :- Has_capital(\"Guam\", capital).\n.output Answer", "completions": [".decl Has_capital(Country:symbol, Capital:symbol)\nHas_capital(\"United States\", \"Washington D.C.\").\nHas_capital(\"Guam\", \"Hagåtña\").\n.decl Answer()\nAnswer() :- Has_capital(\"Guam\", capital).\n.output Answer"]}
{"id": 1920, "answer": false, "completion": ".decl Has_lines(Poem:symbol, N_lines:float)\nHas_lines(\"Jabberwocky\", 28).\n.decl Has_form(Poem:symbol, Form:symbol)\nHas_form(\"sonnet\", \"14 lines\").\n.decl Answer()\nAnswer() :- Has_lines(\"Jabberwocky\", n_lines), Has_form(\"sonnet\", form), n_lines = form.\n.output Answer", "completions": [".decl Has_lines(Poem:symbol, N_lines:float)\nHas_lines(\"Jabberwocky\", 28).\n.decl Has_form(Poem:symbol, Form:symbol)\nHas_form(\"sonnet\", \"14 lines\").\n.decl Answer()\nAnswer() :- Has_lines(\"Jabberwocky\", n_lines), Has_form(\"sonnet\", form), n_lines = form.\n.output Answer"]}
{"id": 1921, "answer": false, "completion": ".decl Leads_to(Place_A:symbol, Place_B:symbol)\nLeads_to(\"circle of lust\", \"circle of gluttony\").\nLeads_to(\"circle of gluttony\", \"circle of greed\").\nLeads_to(\"circle of greed\", \"circle of anger\").\nLeads_to(\"circle of anger\", \"circle of heresy\").\nLeads_to(\"circle of heresy\", \"circle of violence\").\nLeads_to(\"circle of violence\", \"circle of fraud\").\nLeads_to(\"circle of fraud\", \"circle of treachery\").\nLeads_to(\"circle of treachery\", \"Satan\").\n.decl Answer()\nAnswer() :- Leads_to(\"circle of lust\", place1), Leads_to(place1, place2), Leads_to(place2, place3), Leads_to(place3, place4), Leads_to(place4, place5), Leads_to(place5, place6), Leads_to(place6, \"Saladin\").\n.output Answer", "completions": [".decl Leads_to(Place_A:symbol, Place_B:symbol)\nLeads_to(\"circle of lust\", \"circle of gluttony\").\nLeads_to(\"circle of gluttony\", \"circle of greed\").\nLeads_to(\"circle of greed\", \"circle of anger\").\nLeads_to(\"circle of anger\", \"circle of heresy\").\nLeads_to(\"circle of heresy\", \"circle of violence\").\nLeads_to(\"circle of violence\", \"circle of fraud\").\nLeads_to(\"circle of fraud\", \"circle of treachery\").\nLeads_to(\"circle of treachery\", \"Satan\").\n.decl Answer()\nAnswer() :- Leads_to(\"circle of lust\", place1), Leads_to(place1, place2), Leads_to(place2, place3), Leads_to(place3, place4), Leads_to(place4, place5), Leads_to(place5, place6), Leads_to(place6, \"Saladin\").\n.output Answer"]}
{"id": 1922, "answer": false, "completion": ".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"explosion at gunpowder storage facility\", \"shock wave\").\n.decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"shock wave\", 343).\n.decl Answer()\nAnswer() :- Causes(\"explosion at gunpowder storage facility\", effect), Has_speed(effect, speed), speed > 343.\n.output Answer", "completions": [".decl Causes(Event:symbol, Effect:symbol)\nCauses(\"explosion at gunpowder storage facility\", \"shock wave\").\n.decl Has_speed(Object:symbol, Speed:float)\nHas_speed(\"shock wave\", 343).\n.decl Answer()\nAnswer() :- Causes(\"explosion at gunpowder storage facility\", effect), Has_speed(effect, speed), speed > 343.\n.output Answer"]}
{"id": 1923, "answer": true, "completion": ".decl Happens_at_time(Event:symbol, Time:symbol)\nHappens_at_time(\"New Years Eve\", \"midnight\").\nHappens_at_time(\"Times Square\", \"midnight\").\n.decl Wears(Clothing:symbol, Person:symbol)\nWears(\"diapers\", \"babies\").\nWears(\"diapers\", \"adults\").\n.decl Answer()\nAnswer() :- Happens_at_time(\"New Years Eve\", time), Happens_at_time(\"Times Square\", time), Wears(\"diapers\", person).\n.output Answer", "completions": [".decl Happens_at_time(Event:symbol, Time:symbol)\nHappens_at_time(\"New Years Eve\", \"midnight\").\nHappens_at_time(\"Times Square\", \"midnight\").\n.decl Wears(Clothing:symbol, Person:symbol)\nWears(\"diapers\", \"babies\").\nWears(\"diapers\", \"adults\").\n.decl Answer()\nAnswer() :- Happens_at_time(\"New Years Eve\", time), Happens_at_time(\"Times Square\", time), Wears(\"diapers\", person).\n.output Answer"]}
{"id": 1924, "answer": false, "completion": ".decl Occupation_needed(Event:symbol, Occupation:symbol)\nOccupation_needed(\"NASCAR events\", \"race car driver\").\nOccupation_needed(\"NASCAR events\", \"pit crew member\").\n.decl Answer()\nAnswer() :- Occupation_needed(\"NASCAR events\", occupation), occupation != \"railroad engineer\".\n.output Answer", "completions": [".decl Occupation_needed(Event:symbol, Occupation:symbol)\nOccupation_needed(\"NASCAR events\", \"race car driver\").\nOccupation_needed(\"NASCAR events\", \"pit crew member\").\n.decl Answer()\nAnswer() :- Occupation_needed(\"NASCAR events\", occupation), occupation != \"railroad engineer\".\n.output Answer"]}
{"id": 1925, "answer": false, "completion": ".decl Is_a(Substance:symbol, Host:symbol)\nIs_a(\"moss\", \"tree\").\nIs_a(\"beard\", \"human\").\n.decl Answer()\nAnswer() :- Is_a(\"beard\", host), Is_a(\"moss\", host).\n.output Answer", "completions": [".decl Is_a(Substance:symbol, Host:symbol)\nIs_a(\"moss\", \"tree\").\nIs_a(\"beard\", \"human\").\n.decl Answer()\nAnswer() :- Is_a(\"beard\", host), Is_a(\"moss\", host).\n.output Answer"]}
{"id": 1926, "answer": false, "completion": ".decl Causes_symptom(Food:symbol, Symptom:symbol)\nCauses_symptom(\"lemon\", \"heartburn\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"dyspepsia\").\n.decl Answer()\nAnswer() :- Causes_symptom(food, \"heartburn\"), Has_condition(\"John\", condition), food = \"lemon\".\n.output Answer", "completions": [".decl Causes_symptom(Food:symbol, Symptom:symbol)\nCauses_symptom(\"lemon\", \"heartburn\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"dyspepsia\").\n.decl Answer()\nAnswer() :- Causes_symptom(food, \"heartburn\"), Has_condition(\"John\", condition), food = \"lemon\".\n.output Answer"]}
{"id": 1927, "answer": false, "completion": ".decl Likes(Person:symbol, Music:symbol)\nLikes(\"Beethoven\", \"classical music\").\nLikes(\"Beethoven\", \"piano music\").\nLikes(\"Beethoven\", \"orchestral music\").\n.decl Answer()\nAnswer() :- Likes(\"Beethoven\", music), music != \"EDM\".\n.output Answer", "completions": [".decl Likes(Person:symbol, Music:symbol)\nLikes(\"Beethoven\", \"classical music\").\nLikes(\"Beethoven\", \"piano music\").\nLikes(\"Beethoven\", \"orchestral music\").\n.decl Answer()\nAnswer() :- Likes(\"Beethoven\", music), music != \"EDM\".\n.output Answer"]}
{"id": 1928, "answer": false, "completion": ".decl Has_common_name(Scientific_name:symbol, Common_name:symbol)\nHas_common_name(\"Solanum melongena\", \"eggplant\").\n.decl Is_known_as(Common_name:symbol, Name:symbol)\nIs_known_as(\"eggplant\", \"aubergine\").\n.decl Is_located_in(City:symbol, Country:symbol)\nIs_located_in(\"Mumbai\", \"India\").\n.decl Answer()\nAnswer() :- Is_located_in(city, \"India\"), Has_common_name(\"Solanum melongena\", scientific_name), Is_known_as(common_name, \"eggplant\"), Has_common_name(scientific_name, common_name).\n.output Answer", "completions": [".decl Has_common_name(Scientific_name:symbol, Common_name:symbol)\nHas_common_name(\"Solanum melongena\", \"eggplant\").\n.decl Is_known_as(Common_name:symbol, Name:symbol)\nIs_known_as(\"eggplant\", \"aubergine\").\n.decl Is_located_in(City:symbol, Country:symbol)\nIs_located_in(\"Mumbai\", \"India\").\n.decl Answer()\nAnswer() :- Is_located_in(city, \"India\"), Has_common_name(\"Solanum melongena\", scientific_name), Is_known_as(common_name, \"eggplant\"), Has_common_name(scientific_name, common_name).\n.output Answer"]}
{"id": 1929, "answer": true, "completion": ".decl Believes(Person:symbol, Statement:symbol)\nBelieves(\"Woodrow Wilson\", \"Blacks are inferior\").\n.decl Answer()\nAnswer() :- Believes(\"Woodrow Wilson\", statement), statement != \"Blacks are equal members of society\".\n.output Answer", "completions": [".decl Believes(Person:symbol, Statement:symbol)\nBelieves(\"Woodrow Wilson\", \"Blacks are inferior\").\n.decl Answer()\nAnswer() :- Believes(\"Woodrow Wilson\", statement), statement != \"Blacks are equal members of society\".\n.output Answer"]}
{"id": 1930, "answer": true, "completion": ".decl Skilled(Person:symbol, Skill:symbol)\nSkilled(\"Krishna\", \"bow\").\n.decl Answer()\nAnswer() :- Skilled(\"Krishna\", \"bow\").\n.output Answer", "completions": [".decl Skilled(Person:symbol, Skill:symbol)\nSkilled(\"Krishna\", \"bow\").\n.decl Answer()\nAnswer() :- Skilled(\"Krishna\", \"bow\").\n.output Answer"]}
{"id": 1931, "answer": true, "completion": ".decl Has_body_weight(Animal:symbol, Weight:float)\nHas_body_weight(\"snow leopard\", 50).\n.decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"snow leopard\", \"prey\").\n.decl Eats_twice_body_weight(Animal:symbol)\nEats_twice_body_weight(animal) :- Has_body_weight(animal, weight), Eats(animal, prey), prey_weight = weight * 2, prey_weight <= 500.\n.decl Answer()\nAnswer() :- Eats_twice_body_weight(\"snow leopard\").\n.output Answer", "completions": [".decl Has_body_weight(Animal:symbol, Weight:float)\nHas_body_weight(\"snow leopard\", 50).\n.decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"snow leopard\", \"prey\").\n.decl Eats_twice_body_weight(Animal:symbol)\nEats_twice_body_weight(animal) :- Has_body_weight(animal, weight), Eats(animal, prey), prey_weight = weight * 2, prey_weight <= 500.\n.decl Answer()\nAnswer() :- Eats_twice_body_weight(\"snow leopard\").\n.output Answer"]}
{"id": 1932, "answer": true, "completion": ".decl Fear(Person:symbol, Animal:symbol)\nFear(\"Charla Nash\", \"chimpanzee\").\n.decl Related(Animal1:symbol, Animal2:symbol)\nRelated(\"chimpanzee\", \"gorilla\").\n.decl Answer()\nAnswer() :- Fear(\"Charla Nash\", animal1), Related(animal1, animal2), Fear(\"Charla Nash\", animal2).\n.output Answer", "completions": [".decl Fear(Person:symbol, Animal:symbol)\nFear(\"Charla Nash\", \"chimpanzee\").\n.decl Related(Animal1:symbol, Animal2:symbol)\nRelated(\"chimpanzee\", \"gorilla\").\n.decl Answer()\nAnswer() :- Fear(\"Charla Nash\", animal1), Related(animal1, animal2), Fear(\"Charla Nash\", animal2).\n.output Answer"]}
{"id": 1933, "answer": true, "completion": ".decl Uses_hands(Instrument:symbol, N_hands:float)\nUses_hands(\"guitar\", 2).\n.decl Answer()\nAnswer() :- Uses_hands(\"guitar\", n_hands), n_hands = 2.\n.output Answer", "completions": [".decl Uses_hands(Instrument:symbol, N_hands:float)\nUses_hands(\"guitar\", 2).\n.decl Answer()\nAnswer() :- Uses_hands(\"guitar\", n_hands), n_hands = 2.\n.output Answer"]}
{"id": 1934, "answer": false, "completion": ".decl Acts_in_movie(Person:symbol, Movie:symbol)\nActs_in_movie(\"Al Pacino\", \"The Godfather\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"World War II\", \"1939-1945\").\n.decl Answer()\nAnswer() :- Acts_in_movie(\"Al Pacino\", movie), Happens_in_time(\"World War II\", time), movie_happens_during_time(movie, time).\nmovie_happens_during_time(movie, time) :- Happens_in_time(movie, time).\nmovie_happens_during_time(movie, time) :- Happens_in_time(movie, time2), movie_happens_during_time(movie, time), time2 != time.\n.output Answer", "completions": [".decl Acts_in_movie(Person:symbol, Movie:symbol)\nActs_in_movie(\"Al Pacino\", \"The Godfather\").\n.decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"World War II\", \"1939-1945\").\n.decl Answer()\nAnswer() :- Acts_in_movie(\"Al Pacino\", movie), Happens_in_time(\"World War II\", time), movie_happens_during_time(movie, time).\nmovie_happens_during_time(movie, time) :- Happens_in_time(movie, time).\nmovie_happens_during_time(movie, time) :- Happens_in_time(movie, time2), movie_happens_during_time(movie, time), time2 != time.\n.output Answer"]}
{"id": 1935, "answer": true, "completion": ".decl Married_to(Person1:symbol, Person2:symbol)\nMarried_to(\"James Brown\", \"Adrienne Rodriguez\").\nMarried_to(\"James Brown\", \"Deidre Jenkins\").\n.decl Plays_sport(Person:symbol, Sport:symbol)\nPlays_sport(\"Adrienne Rodriguez\", \"tennis\").\nPlays_sport(\"Deidre Jenkins\", \"tennis\").\n.decl Answer()\nAnswer() :- Married_to(\"James Brown\", ex_wife1), Married_to(\"James Brown\", ex_wife2), ex_wife1 != ex_wife2, Plays_sport(ex_wife1, \"tennis\"), Plays_sport(ex_wife2, \"tennis\").\n.output Answer", "completions": [".decl Married_to(Person1:symbol, Person2:symbol)\nMarried_to(\"James Brown\", \"Adrienne Rodriguez\").\nMarried_to(\"James Brown\", \"Deidre Jenkins\").\n.decl Plays_sport(Person:symbol, Sport:symbol)\nPlays_sport(\"Adrienne Rodriguez\", \"tennis\").\nPlays_sport(\"Deidre Jenkins\", \"tennis\").\n.decl Answer()\nAnswer() :- Married_to(\"James Brown\", ex_wife1), Married_to(\"James Brown\", ex_wife2), ex_wife1 != ex_wife2, Plays_sport(ex_wife1, \"tennis\"), Plays_sport(ex_wife2, \"tennis\").\n.output Answer"]}
{"id": 1936, "answer": false, "completion": ".decl Uses_tool(Person:symbol, Tool:symbol)\nUses_tool(\"Robert De Niro\", \"microscope\").\n.decl Answer()\nAnswer() :- Uses_tool(\"Robert De Niro\", \"microscope\").\n.output Answer", "completions": [".decl Uses_tool(Person:symbol, Tool:symbol)\nUses_tool(\"Robert De Niro\", \"microscope\").\n.decl Answer()\nAnswer() :- Uses_tool(\"Robert De Niro\", \"microscope\").\n.output Answer"]}
{"id": 1937, "answer": false, "completion": ".decl Believes_in(Person:symbol, Entity:symbol)\nBelieves_in(\"Reza Shah\", \"Imams\").\nBelieves_in(\"Reza Shah\", \"Jesus's disciples\").\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Imams\", 12).\nHas_n_members(\"Jesus's disciples\", 12).\n.decl Answer()\nAnswer() :- Believes_in(\"Reza Shah\", \"Imams\"), Has_n_members(\"Imams\", n_members1), Believes_in(\"Reza Shah\", \"Jesus's disciples\"), Has_n_members(\"Jesus's disciples\", n_members2), n_members1 > n_members2.\n.output Answer", "completions": [".decl Believes_in(Person:symbol, Entity:symbol)\nBelieves_in(\"Reza Shah\", \"Imams\").\nBelieves_in(\"Reza Shah\", \"Jesus's disciples\").\n.decl Has_n_members(Group:symbol, N_members:float)\nHas_n_members(\"Imams\", 12).\nHas_n_members(\"Jesus's disciples\", 12).\n.decl Answer()\nAnswer() :- Believes_in(\"Reza Shah\", \"Imams\"), Has_n_members(\"Imams\", n_members1), Believes_in(\"Reza Shah\", \"Jesus's disciples\"), Has_n_members(\"Jesus's disciples\", n_members2), n_members1 > n_members2.\n.output Answer"]}
{"id": 1938, "answer": true, "completion": ".decl Inhibits(Process:symbol, Substance:symbol)\nInhibits(\"photosynthesis\", \"chlorine\").\n.decl Answer()\nAnswer() :- Inhibits(\"photosynthesis\", \"chlorine\").\n.output Answer", "completions": [".decl Inhibits(Process:symbol, Substance:symbol)\nInhibits(\"photosynthesis\", \"chlorine\").\n.decl Answer()\nAnswer() :- Inhibits(\"photosynthesis\", \"chlorine\").\n.output Answer"]}
{"id": 1939, "answer": true, "completion": ".decl Popular_in(City:symbol, Activity:symbol)\nPopular_in(\"Honolulu\", \"surfing\").\nPopular_in(\"Los Angeles\", \"surfing\").\nPopular_in(\"Des Moines\", \"farming\").\n.decl Answer()\nAnswer() :- Popular_in(\"Des Moines\", activity), activity = \"surfing\".\n.output Answer", "completions": [".decl Popular_in(City:symbol, Activity:symbol)\nPopular_in(\"Honolulu\", \"surfing\").\nPopular_in(\"Los Angeles\", \"surfing\").\nPopular_in(\"Des Moines\", \"farming\").\n.decl Answer()\nAnswer() :- Popular_in(\"Des Moines\", activity), activity = \"surfing\".\n.output Answer"]}
{"id": 1940, "answer": true, "completion": ".decl Boxer(Name:symbol, Wins:float, Losses:float, Draws:float)\nBoxer(\"Sugar Ray Robinson\", 173, 19, 6).\nBoxer(\"Canelo Alvarez\", 55, 1, 2).\n.decl Answer()\nAnswer() :- Boxer(\"Sugar Ray Robinson\", wins1, losses1, draws1), Boxer(\"Canelo Alvarez\", wins2, losses2, draws2), wins1 > wins2, losses1 < losses2, draws1 < draws2.\n.output Answer", "completions": [".decl Boxer(Name:symbol, Wins:float, Losses:float, Draws:float)\nBoxer(\"Sugar Ray Robinson\", 173, 19, 6).\nBoxer(\"Canelo Alvarez\", 55, 1, 2).\n.decl Answer()\nAnswer() :- Boxer(\"Sugar Ray Robinson\", wins1, losses1, draws1), Boxer(\"Canelo Alvarez\", wins2, losses2, draws2), wins1 > wins2, losses1 < losses2, draws1 < draws2.\n.output Answer"]}
{"id": 1941, "answer": false, "completion": ".decl Temperature(Location:symbol, Temperature:float)\nTemperature(\"Antarctic Peninsula\", -10).\n.decl Answer()\nAnswer() :- Temperature(\"Antarctic Peninsula\", temp), temp < 75.\n.output Answer", "completions": [".decl Temperature(Location:symbol, Temperature:float)\nTemperature(\"Antarctic Peninsula\", -10).\n.decl Answer()\nAnswer() :- Temperature(\"Antarctic Peninsula\", temp), temp < 75.\n.output Answer"]}
{"id": 1942, "answer": true, "completion": ".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Richard Dawkins\", \"atheism\").\n.decl Refuses(Person:symbol, Action:symbol)\nRefuses(\"Richard Dawkins\", \"Last rites\").\n.decl Answer()\nAnswer() :- Believes(\"Richard Dawkins\", \"atheism\"), Refuses(\"Richard Dawkins\", \"Last rites\").\n.output Answer", "completions": [".decl Believes(Person:symbol, Belief:symbol)\nBelieves(\"Richard Dawkins\", \"atheism\").\n.decl Refuses(Person:symbol, Action:symbol)\nRefuses(\"Richard Dawkins\", \"Last rites\").\n.decl Answer()\nAnswer() :- Believes(\"Richard Dawkins\", \"atheism\"), Refuses(\"Richard Dawkins\", \"Last rites\").\n.output Answer"]}
{"id": 1943, "answer": false, "completion": ".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"John Smith\", 1995).\nBorn_in_year(\"Jane Doe\", 1992).\n.decl Became_President(Year:float, President:symbol)\nBecame_President(1969, \"Richard Nixon\").\nBecame_President(1973, \"Richard Nixon\").\nBecame_President(1974, \"Gerald Ford\").\n.decl Answer()\nAnswer() :- Born_in_year(person, year), Became_President(pres_year, \"Richard Nixon\"), year <= pres_year+18.\n.output Answer", "completions": [".decl Born_in_year(Person:symbol, Year:float)\nBorn_in_year(\"John Smith\", 1995).\nBorn_in_year(\"Jane Doe\", 1992).\n.decl Became_President(Year:float, President:symbol)\nBecame_President(1969, \"Richard Nixon\").\nBecame_President(1973, \"Richard Nixon\").\nBecame_President(1974, \"Gerald Ford\").\n.decl Answer()\nAnswer() :- Born_in_year(person, year), Became_President(pres_year, \"Richard Nixon\"), year <= pres_year+18.\n.output Answer"]}
{"id": 1944, "answer": true, "completion": ".decl Has_title(Character:symbol, Title:symbol)\nHas_title(\"Zorro\", \"Disney Zorro\").\nHas_title(\"Zorro\", \"Original Zorro\").\n.decl Answer()\nAnswer() :- Has_title(\"Zorro\", title1), Has_title(\"Zorro\", title2), title1 != title2.\n.output Answer", "completions": [".decl Has_title(Character:symbol, Title:symbol)\nHas_title(\"Zorro\", \"Disney Zorro\").\nHas_title(\"Zorro\", \"Original Zorro\").\n.decl Answer()\nAnswer() :- Has_title(\"Zorro\", title1), Has_title(\"Zorro\", title2), title1 != title2.\n.output Answer"]}
{"id": 1945, "answer": true, "completion": ".decl Book_profit(Book:symbol, Profit:float)\nBook_profit(\"The Hobbit\", 1000).\nBook_profit(\"Constitution of the United States\", 500).\n.decl Proofreader_salary(Proofreader:symbol, Salary:float)\nProofreader_salary(\"John\", 2000).\nProofreader_salary(\"Jane\", 2500).\n.decl Answer()\nAnswer() :- Book_profit(\"The Hobbit\", profit1), Proofreader_salary(proofreader1, salary1), Book_profit(\"Constitution of the United States\", profit2), Proofreader_salary(proofreader2, salary2), proofreader1 = proofreader2, profit1 > profit2, salary1 < salary2.\n.output Answer", "completions": [".decl Book_profit(Book:symbol, Profit:float)\nBook_profit(\"The Hobbit\", 1000).\nBook_profit(\"Constitution of the United States\", 500).\n.decl Proofreader_salary(Proofreader:symbol, Salary:float)\nProofreader_salary(\"John\", 2000).\nProofreader_salary(\"Jane\", 2500).\n.decl Answer()\nAnswer() :- Book_profit(\"The Hobbit\", profit1), Proofreader_salary(proofreader1, salary1), Book_profit(\"Constitution of the United States\", profit2), Proofreader_salary(proofreader2, salary2), proofreader1 = proofreader2, profit1 > profit2, salary1 < salary2.\n.output Answer"]}
{"id": 1946, "answer": false, "completion": ".decl Starred_in(Actor:symbol, Show:symbol)\nStarred_in(\"Lucy Lawless\", \"Spartacus\").\nStarred_in(\"Renee O'Connor\", \"Ark\").\nStarred_in(\"Hudson Leick\", \"NCIS\").\n.decl Starred_in_Xena(Actor:symbol)\nStarred_in_Xena(\"Lucy Lawless\").\nStarred_in_Xena(\"Renee O'Connor\").\nStarred_in_Xena(\"Hudson Leick\").\n.decl Answer()\nAnswer() :- Starred_in_Xena(actor), Starred_in(actor, show), show != \"Xena: Warrior Princess\".\n.output Answer", "completions": [".decl Starred_in(Actor:symbol, Show:symbol)\nStarred_in(\"Lucy Lawless\", \"Spartacus\").\nStarred_in(\"Renee O'Connor\", \"Ark\").\nStarred_in(\"Hudson Leick\", \"NCIS\").\n.decl Starred_in_Xena(Actor:symbol)\nStarred_in_Xena(\"Lucy Lawless\").\nStarred_in_Xena(\"Renee O'Connor\").\nStarred_in_Xena(\"Hudson Leick\").\n.decl Answer()\nAnswer() :- Starred_in_Xena(actor), Starred_in(actor, show), show != \"Xena: Warrior Princess\".\n.output Answer"]}
{"id": 1947, "answer": false, "completion": ".decl Can_play_sport(Animal:symbol, Sport:symbol)\nCan_play_sport(\"crane\", \"basketball\").\n.decl Answer()\nAnswer() :- Can_play_sport(\"crane\", \"basketball\").\n.output Answer", "completions": [".decl Can_play_sport(Animal:symbol, Sport:symbol)\nCan_play_sport(\"crane\", \"basketball\").\n.decl Answer()\nAnswer() :- Can_play_sport(\"crane\", \"basketball\").\n.output Answer"]}
{"id": 1948, "answer": true, "completion": ".decl Needs(Item:symbol, Purpose:symbol)\nNeeds(\"black widow woman\", \"food\").\n.decl Has_property(Item:symbol, Property:symbol)\nHas_property(\"peaches\", \"edible\").\n.decl Answer()\nAnswer() :- Needs(\"black widow woman\", purpose), Has_property(\"peaches\", property), purpose = \"food\", property = \"edible\".\n.output Answer", "completions": [".decl Needs(Item:symbol, Purpose:symbol)\nNeeds(\"black widow woman\", \"food\").\n.decl Has_property(Item:symbol, Property:symbol)\nHas_property(\"peaches\", \"edible\").\n.decl Answer()\nAnswer() :- Needs(\"black widow woman\", purpose), Has_property(\"peaches\", property), purpose = \"food\", property = \"edible\".\n.output Answer"]}
{"id": 1949, "answer": true, "completion": ".decl Has_symptom(Person:symbol, Symptom:symbol)\nHas_symptom(\"John\", \"red legs\").\nHas_symptom(\"Mary\", \"yellow eyes\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"Anorexia Nervosa\").\nHas_condition(\"Mary\", \"Hepatitis\").\n.decl Signifies(Condition:symbol, Symptom:symbol)\nSignifies(\"Anorexia Nervosa\", \"red legs\").\nSignifies(\"Hepatitis\", \"yellow eyes\").\n.decl Answer()\nAnswer() :- Has_symptom(person, \"red legs\"), Has_condition(person, condition), Signifies(condition, \"red legs\").\n.output Answer", "completions": [".decl Has_symptom(Person:symbol, Symptom:symbol)\nHas_symptom(\"John\", \"red legs\").\nHas_symptom(\"Mary\", \"yellow eyes\").\n.decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"John\", \"Anorexia Nervosa\").\nHas_condition(\"Mary\", \"Hepatitis\").\n.decl Signifies(Condition:symbol, Symptom:symbol)\nSignifies(\"Anorexia Nervosa\", \"red legs\").\nSignifies(\"Hepatitis\", \"yellow eyes\").\n.decl Answer()\nAnswer() :- Has_symptom(person, \"red legs\"), Has_condition(person, condition), Signifies(condition, \"red legs\").\n.output Answer"]}
{"id": 1950, "answer": false, "completion": ".decl Guest_of_honor(Guest:symbol, Event:symbol)\nGuest_of_honor(\"Nine Inch Nails\", \"Iowa tests\").\n.decl Suitable_for_grade(Guest:symbol, Grade:float)\nSuitable_for_grade(\"Nine Inch Nails\", 12).\n.decl Answer()\nAnswer() :- Guest_of_honor(guest, \"Iowa tests\"), Suitable_for_grade(guest, grade), grade <= 1.\n.output Answer", "completions": [".decl Guest_of_honor(Guest:symbol, Event:symbol)\nGuest_of_honor(\"Nine Inch Nails\", \"Iowa tests\").\n.decl Suitable_for_grade(Guest:symbol, Grade:float)\nSuitable_for_grade(\"Nine Inch Nails\", 12).\n.decl Answer()\nAnswer() :- Guest_of_honor(guest, \"Iowa tests\"), Suitable_for_grade(guest, grade), grade <= 1.\n.output Answer"]}
{"id": 1951, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Nike shoebox\", 0.3).\nHas_size(\"swan\", 1.5).\n.decl Answer()\nAnswer() :- Has_size(\"Nike shoebox\", size1), Has_size(\"swan\", size2), size1 < size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Nike shoebox\", 0.3).\nHas_size(\"swan\", 1.5).\n.decl Answer()\nAnswer() :- Has_size(\"Nike shoebox\", size1), Has_size(\"swan\", size2), size1 < size2.\n.output Answer"]}
{"id": 1952, "answer": false, "completion": ".decl Is_warm_blooded(Animal:symbol)\nIs_warm_blooded(\"chinchilla\").\n.decl Answer()\nAnswer() :- !Is_warm_blooded(\"chinchilla\").\n.output Answer", "completions": [".decl Is_warm_blooded(Animal:symbol)\nIs_warm_blooded(\"chinchilla\").\n.decl Answer()\nAnswer() :- !Is_warm_blooded(\"chinchilla\").\n.output Answer"]}
{"id": 1953, "answer": false, "completion": ".decl Has_protein(Content:symbol, Protein:float)\nHas_protein(\"elk burger\", 25).\nHas_protein(\"beef burger\", 20).\n.decl Answer()\nAnswer() :- Has_protein(\"elk burger\", protein1), Has_protein(\"beef burger\", protein2), protein1 > protein2.\n.output Answer", "completions": [".decl Has_protein(Content:symbol, Protein:float)\nHas_protein(\"elk burger\", 25).\nHas_protein(\"beef burger\", 20).\n.decl Answer()\nAnswer() :- Has_protein(\"elk burger\", protein1), Has_protein(\"beef burger\", protein2), protein1 > protein2.\n.output Answer"]}
{"id": 1954, "answer": false, "completion": ".decl Fits_in_car(Band:symbol, Car:symbol)\nFits_in_car(\"Aerosmith\", \"tour bus\").\nFits_in_car(\"tour bus\", \"semi-truck\").\nFits_in_car(\"semi-truck\", \"2020 Mitsubishi Outlander\").\n.decl Answer()\nAnswer() :- Fits_in_car(\"Aerosmith\", car).\n.output Answer", "completions": [".decl Fits_in_car(Band:symbol, Car:symbol)\nFits_in_car(\"Aerosmith\", \"tour bus\").\nFits_in_car(\"tour bus\", \"semi-truck\").\nFits_in_car(\"semi-truck\", \"2020 Mitsubishi Outlander\").\n.decl Answer()\nAnswer() :- Fits_in_car(\"Aerosmith\", car).\n.output Answer"]}
{"id": 1955, "answer": true, "completion": ".decl Represented_on(Location:symbol, Organization:symbol)\nRepresented_on(\"Moon\", \"Freemasonry\").\n.decl Answer()\nAnswer() :- Represented_on(\"Moon\", \"Freemasonry\").\n.output Answer", "completions": [".decl Represented_on(Location:symbol, Organization:symbol)\nRepresented_on(\"Moon\", \"Freemasonry\").\n.decl Answer()\nAnswer() :- Represented_on(\"Moon\", \"Freemasonry\").\n.output Answer"]}
{"id": 1956, "answer": true, "completion": ".decl Has_trait(Animal:symbol, Trait:symbol)\nHas_trait(\"Sphynx cat\", \"hairless\").\nHas_trait(\"sheep\", \"wool\").\n.decl Answer()\nAnswer() :- Has_trait(\"Sphynx cat\", trait1), Has_trait(\"sheep\", trait2), trait1 != trait2.\n.output Answer", "completions": [".decl Has_trait(Animal:symbol, Trait:symbol)\nHas_trait(\"Sphynx cat\", \"hairless\").\nHas_trait(\"sheep\", \"wool\").\n.decl Answer()\nAnswer() :- Has_trait(\"Sphynx cat\", trait1), Has_trait(\"sheep\", trait2), trait1 != trait2.\n.output Answer"]}
{"id": 1957, "answer": false, "completion": ".decl Needs(Animal:symbol, Food:symbol)\nNeeds(\"stork\", \"fish\").\nNeeds(\"golden toad\", \"insects\").\n.decl Answer()\nAnswer() :- Needs(\"stork\", food), Needs(\"golden toad\", food), food = \"insects\".\n.output Answer", "completions": [".decl Needs(Animal:symbol, Food:symbol)\nNeeds(\"stork\", \"fish\").\nNeeds(\"golden toad\", \"insects\").\n.decl Answer()\nAnswer() :- Needs(\"stork\", food), Needs(\"golden toad\", food), food = \"insects\".\n.output Answer"]}
{"id": 1958, "answer": true, "completion": ".decl Insured(Person:symbol)\nInsured(\"John\").\nInsured(\"Jane\").\n.decl Declines_scan(Person:symbol)\nDeclines_scan(\"John\").\n.decl Answer()\nAnswer() :- Insured(person), !Declines_scan(person).\nAnswer() :- !Insured(person), Declines_scan(person).\n.output Answer", "completions": [".decl Insured(Person:symbol)\nInsured(\"John\").\nInsured(\"Jane\").\n.decl Declines_scan(Person:symbol)\nDeclines_scan(\"John\").\n.decl Answer()\nAnswer() :- Insured(person), !Declines_scan(person).\nAnswer() :- !Insured(person), Declines_scan(person).\n.output Answer"]}
{"id": 1959, "answer": false, "completion": ".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"spider wasp\", 6).\n.decl Answer()\nAnswer() :- Has_legs(\"spider wasp\", n_legs), n_legs != 8.\n.output Answer", "completions": [".decl Has_legs(Animal:symbol, N_legs:float)\nHas_legs(\"spider wasp\", 6).\n.decl Answer()\nAnswer() :- Has_legs(\"spider wasp\", n_legs), n_legs != 8.\n.output Answer"]}
{"id": 1960, "answer": true, "completion": ".decl Causes_of_death(Person:symbol, Cause:symbol)\nCauses_of_death(\"John Doe\", \"heart attack\").\nCauses_of_death(\"Jane Smith\", \"car accident\").\n.decl Has_issue(Vehicle:symbol, Issue:symbol)\nHas_issue(\"car\", \"brake failure\").\n.decl Answer()\nAnswer() :- Causes_of_death(person, \"car accident\"), Has_issue(\"car\", \"brake failure\").\n.output Answer", "completions": [".decl Causes_of_death(Person:symbol, Cause:symbol)\nCauses_of_death(\"John Doe\", \"heart attack\").\nCauses_of_death(\"Jane Smith\", \"car accident\").\n.decl Has_issue(Vehicle:symbol, Issue:symbol)\nHas_issue(\"car\", \"brake failure\").\n.decl Answer()\nAnswer() :- Causes_of_death(person, \"car accident\"), Has_issue(\"car\", \"brake failure\").\n.output Answer"]}
{"id": 1961, "answer": false, "completion": ".decl Has_religious_restrictions(Person:symbol, Restriction:symbol)\nHas_religious_restrictions(\"Muslim\", \"pork\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"McRib sandwich\", \"pork\").\n.decl Answer()\nAnswer() :- Has_religious_restrictions(\"Muslim\", restriction), !Has_ingredient(\"McRib sandwich\", restriction).\n.output Answer", "completions": [".decl Has_religious_restrictions(Person:symbol, Restriction:symbol)\nHas_religious_restrictions(\"Muslim\", \"pork\").\n.decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"McRib sandwich\", \"pork\").\n.decl Answer()\nAnswer() :- Has_religious_restrictions(\"Muslim\", restriction), !Has_ingredient(\"McRib sandwich\", restriction).\n.output Answer"]}
{"id": 1962, "answer": true, "completion": ".decl Santa_actor_race(Race:symbol)\nSanta_actor_race(\"white\").\nSanta_actor_race(\"black\").\nSanta_actor_race(\"Asian\").\nSanta_actor_race(\"Hispanic\").\nSanta_actor_race(\"other\").\n.decl Plays_Santa(Actor:symbol)\nPlays_Santa(\"John Smith\").\nPlays_Santa(\"Jane Doe\").\nPlays_Santa(\"Bob Johnson\").\nPlays_Santa(\"Maria Rodriguez\").\nPlays_Santa(\"David Lee\").\nPlays_Santa(\"Emily Chen\").\nPlays_Santa(\"Tom Nguyen\").\nPlays_Santa(\"Lauren Kim\").\nPlays_Santa(\"Mohammed Ali\").\nPlays_Santa(\"Aisha Khan\").\nPlays_Santa(\"Carlos Garcia\").\nPlays_Santa(\"Tyrone Jackson\").\nPlays_Santa(\"Jasmine Patel\").\nPlays_Santa(\"Ming Li\").\nPlays_Santa(\"Juan Hernandez\").\nPlays_Santa(\"Tiffany Wong\").\nPlays_Santa(\"Jamal Thomas\").\nPlays_Santa(\"Samantha Kim\").\nPlays_Santa(\"Raj Singh\").\n.decl Answer()\nAnswer() :- Plays_Santa(actor), Santa_actor_race(race), actor = actor1, !Plays_Santa(actor2), Santa_actor_race(race), actor1 != actor2.\nAnswer() :- Plays_Santa(actor), Santa_actor_race(\"white\"), actor = actor1, !Plays_Santa(actor2), Santa_actor_race(race), actor1 != actor2, race != \"white\".\nAnswer() :- Plays_Santa(actor), Santa_actor_race(\"white\"), actor = actor1, !Plays_Santa(actor2), actor1 != actor2, !Santa_actor_race(\"white\").\nAnswer() :- Plays_Santa(actor), Santa_actor_race(\"white\"), actor = actor1, !Plays_Santa(actor2), actor1 != actor2, Santa_actor_race(\"white\"), !Santa_actor_race(race), !Santa_actor_race(\"other\").\nAnswer() :- Plays_Santa(actor), Santa_actor_race(\"white\"), actor = actor1, !Plays_Santa(actor2), actor1 != actor2, Santa_actor_race(\"white\"), Santa_actor_race(race), race != \"white\", !Santa_actor_race(\"other\").\n.output Answer", "completions": [".decl Santa_actor_race(Race:symbol)\nSanta_actor_race(\"white\").\nSanta_actor_race(\"black\").\nSanta_actor_race(\"Asian\").\nSanta_actor_race(\"Hispanic\").\nSanta_actor_race(\"other\").\n.decl Plays_Santa(Actor:symbol)\nPlays_Santa(\"John Smith\").\nPlays_Santa(\"Jane Doe\").\nPlays_Santa(\"Bob Johnson\").\nPlays_Santa(\"Maria Rodriguez\").\nPlays_Santa(\"David Lee\").\nPlays_Santa(\"Emily Chen\").\nPlays_Santa(\"Tom Nguyen\").\nPlays_Santa(\"Lauren Kim\").\nPlays_Santa(\"Mohammed Ali\").\nPlays_Santa(\"Aisha Khan\").\nPlays_Santa(\"Carlos Garcia\").\nPlays_Santa(\"Tyrone Jackson\").\nPlays_Santa(\"Jasmine Patel\").\nPlays_Santa(\"Ming Li\").\nPlays_Santa(\"Juan Hernandez\").\nPlays_Santa(\"Tiffany Wong\").\nPlays_Santa(\"Jamal Thomas\").\nPlays_Santa(\"Samantha Kim\").\nPlays_Santa(\"Raj Singh\").\n.decl Answer()\nAnswer() :- Plays_Santa(actor), Santa_actor_race(race), actor = actor1, !Plays_Santa(actor2), Santa_actor_race(race), actor1 != actor2.\nAnswer() :- Plays_Santa(actor), Santa_actor_race(\"white\"), actor = actor1, !Plays_Santa(actor2), Santa_actor_race(race), actor1 != actor2, race != \"white\".\nAnswer() :- Plays_Santa(actor), Santa_actor_race(\"white\"), actor = actor1, !Plays_Santa(actor2), actor1 != actor2, !Santa_actor_race(\"white\").\nAnswer() :- Plays_Santa(actor), Santa_actor_race(\"white\"), actor = actor1, !Plays_Santa(actor2), actor1 != actor2, Santa_actor_race(\"white\"), !Santa_actor_race(race), !Santa_actor_race(\"other\").\nAnswer() :- Plays_Santa(actor), Santa_actor_race(\"white\"), actor = actor1, !Plays_Santa(actor2), actor1 != actor2, Santa_actor_race(\"white\"), Santa_actor_race(race), race != \"white\", !Santa_actor_race(\"other\").\n.output Answer"]}
{"id": 1963, "answer": false, "completion": ".decl Knows_language(Person:symbol, Language:symbol)\nKnows_language(\"John\", \"English\").\n.decl Written_in_language(Text:symbol, Language:symbol)\nWritten_in_language(\"Kanji text\", \"Japanese\").\n.decl Answer()\nAnswer() :- Knows_language(person, \"English\"), Written_in_language(text, \"Japanese\"), !Written_in_language(text, \"English\").\n.output Answer", "completions": [".decl Knows_language(Person:symbol, Language:symbol)\nKnows_language(\"John\", \"English\").\n.decl Written_in_language(Text:symbol, Language:symbol)\nWritten_in_language(\"Kanji text\", \"Japanese\").\n.decl Answer()\nAnswer() :- Knows_language(person, \"English\"), Written_in_language(text, \"Japanese\"), !Written_in_language(text, \"English\").\n.output Answer"]}
{"id": 1964, "answer": true, "completion": ".decl Owned_by(Company:symbol, Location:symbol)\nOwned_by(\"Aldi US\", \"location1\").\nOwned_by(\"Aldi US\", \"location2\").\nOwned_by(\"Aldi US\", \"location3\").\n.decl Answer()\nAnswer() :- Owned_by(company1, location), Owned_by(company2, location), company1 != company2.\n.neg Answer()\nAnswer() :- Owned_by(\"Aldi US\", location).\n.output Answer", "completions": [".decl Owned_by(Company:symbol, Location:symbol)\nOwned_by(\"Aldi US\", \"location1\").\nOwned_by(\"Aldi US\", \"location2\").\nOwned_by(\"Aldi US\", \"location3\").\n.decl Answer()\nAnswer() :- Owned_by(company1, location), Owned_by(company2, location), company1 != company2.\n.neg Answer()\nAnswer() :- Owned_by(\"Aldi US\", location).\n.output Answer"]}
{"id": 1965, "answer": true, "completion": ".decl Has_significance(Location:symbol, Significance:symbol)\nHas_significance(\"Red Sea\", \"biblical\").\nHas_significance(\"Mediterranean Sea\", \"historical\").\n.decl Answer()\nAnswer() :- Has_significance(\"Red Sea\", \"biblical\").\n.output Answer", "completions": [".decl Has_significance(Location:symbol, Significance:symbol)\nHas_significance(\"Red Sea\", \"biblical\").\nHas_significance(\"Mediterranean Sea\", \"historical\").\n.decl Answer()\nAnswer() :- Has_significance(\"Red Sea\", \"biblical\").\n.output Answer"]}
{"id": 1966, "answer": true, "completion": ".decl Has_n_children(Parent:symbol, N_children:float)\nHas_n_children(\"octuplets' parents\", 8).\n.decl Has_n_shoes(Person:symbol, N_shoes:float)\nHas_n_shoes(\"octuplets\", 32).\n.decl Answer()\nAnswer() :- Has_n_children(parent, 8), Has_n_shoes(\"octuplets\", n_shoes), n_shoes < 8*4.\n.output Answer", "completions": [".decl Has_n_children(Parent:symbol, N_children:float)\nHas_n_children(\"octuplets' parents\", 8).\n.decl Has_n_shoes(Person:symbol, N_shoes:float)\nHas_n_shoes(\"octuplets\", 32).\n.decl Answer()\nAnswer() :- Has_n_children(parent, 8), Has_n_shoes(\"octuplets\", n_shoes), n_shoes < 8*4.\n.output Answer"]}
{"id": 1967, "answer": true, "completion": ".decl Takes_time(Event:symbol, Time:float)\nTakes_time(\"Around the World in 80 Days\", 80).\n.decl Reigns(Person:symbol, Start_year:float, End_year:float)\nReigns(\"Pope John Paul I\", 1978, 1978).\n.decl Answer()\nAnswer() :- Takes_time(\"Around the World in 80 Days\", time), Reigns(\"Pope John Paul I\", start_year, end_year), time > (end_year - start_year + 1).\n.output Answer", "completions": [".decl Takes_time(Event:symbol, Time:float)\nTakes_time(\"Around the World in 80 Days\", 80).\n.decl Reigns(Person:symbol, Start_year:float, End_year:float)\nReigns(\"Pope John Paul I\", 1978, 1978).\n.decl Answer()\nAnswer() :- Takes_time(\"Around the World in 80 Days\", time), Reigns(\"Pope John Paul I\", start_year, end_year), time > (end_year - start_year + 1).\n.output Answer"]}
{"id": 1968, "answer": false, "completion": ".decl Causes_symptom(Food:symbol, Symptom:symbol)\nCauses_symptom(\"lettuce\", \"food poisoning\").\n.decl Is_dangerous(Symptom:symbol)\nIs_dangerous(\"spontaneous abortion\").\n.decl Answer()\nAnswer() :- Causes_symptom(food, \"food poisoning\"), Is_dangerous(\"spontaneous abortion\").\n.output Answer", "completions": [".decl Causes_symptom(Food:symbol, Symptom:symbol)\nCauses_symptom(\"lettuce\", \"food poisoning\").\n.decl Is_dangerous(Symptom:symbol)\nIs_dangerous(\"spontaneous abortion\").\n.decl Answer()\nAnswer() :- Causes_symptom(food, \"food poisoning\"), Is_dangerous(\"spontaneous abortion\").\n.output Answer"]}
{"id": 1969, "answer": false, "completion": ".decl Works_in(Profession:symbol, Environment:symbol)\nWorks_in(\"software engineer\", \"office\").\n.decl Requires_power(Environment:symbol)\nRequires_power(\"office\").\n.decl Answer()\nAnswer() :- Works_in(\"software engineer\", environment), !Requires_power(environment).\n.output Answer", "completions": [".decl Works_in(Profession:symbol, Environment:symbol)\nWorks_in(\"software engineer\", \"office\").\n.decl Requires_power(Environment:symbol)\nRequires_power(\"office\").\n.decl Answer()\nAnswer() :- Works_in(\"software engineer\", environment), !Requires_power(environment).\n.output Answer"]}
{"id": 1970, "answer": true, "completion": ".decl Eats(Person:symbol, Animal:symbol)\nEats(\"hyena diet follower\", \"meat\").\n.decl Attends(Event:symbol, Person:symbol)\nAttends(\"vegan festival\", \"vegan1\").\nAttends(\"vegan festival\", \"vegan2\").\n.decl Answer()\nAnswer() :- Eats(\"hyena diet follower\", animal), Attends(\"vegan festival\", person), !Eats(person, animal).\n.output Answer", "completions": [".decl Eats(Person:symbol, Animal:symbol)\nEats(\"hyena diet follower\", \"meat\").\n.decl Attends(Event:symbol, Person:symbol)\nAttends(\"vegan festival\", \"vegan1\").\nAttends(\"vegan festival\", \"vegan2\").\n.decl Answer()\nAnswer() :- Eats(\"hyena diet follower\", animal), Attends(\"vegan festival\", person), !Eats(person, animal).\n.output Answer"]}
{"id": 1971, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"leopard seal\", \"Antarctica\").\n.decl Exposed_to_hazard(Animal:symbol, Hazard:symbol)\nExposed_to_hazard(\"leopard seal\", \"pollution\").\nExposed_to_hazard(\"leopard seal\", \"overfishing\").\nExposed_to_hazard(\"leopard seal\", \"climate change\").\nExposed_to_hazard(\"leopard seal\", \"captivity\").\n.decl Answer()\nAnswer() :- Lives_in(\"leopard seal\", habitat), Exposed_to_hazard(\"leopard seal\", hazard), hazard = \"captivity\", habitat != \"Aquarium\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"leopard seal\", \"Antarctica\").\n.decl Exposed_to_hazard(Animal:symbol, Hazard:symbol)\nExposed_to_hazard(\"leopard seal\", \"pollution\").\nExposed_to_hazard(\"leopard seal\", \"overfishing\").\nExposed_to_hazard(\"leopard seal\", \"climate change\").\nExposed_to_hazard(\"leopard seal\", \"captivity\").\n.decl Answer()\nAnswer() :- Lives_in(\"leopard seal\", habitat), Exposed_to_hazard(\"leopard seal\", hazard), hazard = \"captivity\", habitat != \"Aquarium\".\n.output Answer"]}
{"id": 1972, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Gray Whale\", 16).\nHas_size(\"above ground pool\", 4).\n.decl Answer()\nAnswer() :- Has_size(\"Gray Whale\", size1), Has_size(\"above ground pool\", size2), size1 <= size2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Gray Whale\", 16).\nHas_size(\"above ground pool\", 4).\n.decl Answer()\nAnswer() :- Has_size(\"Gray Whale\", size1), Has_size(\"above ground pool\", size2), size1 <= size2.\n.output Answer"]}
{"id": 1973, "answer": false, "completion": ".decl Practiced_activity(Person:symbol, Activity:symbol)\nPracticed_activity(\"Julia Roberts\", \"acting\").\nPracticed_activity(\"Julia Roberts\", \"dancing\").\nPracticed_activity(\"Julia Roberts\", \"singing\").\n.decl Answer()\nAnswer() :- Practiced_activity(\"Julia Roberts\", \"blast beats\").\n.output Answer", "completions": [".decl Practiced_activity(Person:symbol, Activity:symbol)\nPracticed_activity(\"Julia Roberts\", \"acting\").\nPracticed_activity(\"Julia Roberts\", \"dancing\").\nPracticed_activity(\"Julia Roberts\", \"singing\").\n.decl Answer()\nAnswer() :- Practiced_activity(\"Julia Roberts\", \"blast beats\").\n.output Answer"]}
{"id": 1974, "answer": true, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"king size bed\", 76).\nHas_size(\"American Black Bear cub\", 2).\n.decl Answer()\nAnswer() :- Has_size(\"king size bed\", size), Has_size(\"American Black Bear cub\", size2), size >= size2*2.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"king size bed\", 76).\nHas_size(\"American Black Bear cub\", 2).\n.decl Answer()\nAnswer() :- Has_size(\"king size bed\", size), Has_size(\"American Black Bear cub\", size2), size >= size2*2.\n.output Answer"]}
{"id": 1975, "answer": false, "completion": ".decl Distance(Location:symbol, Distance:float)\nDistance(\"Mona Lisa\", 0).\nDistance(\"lunch spot\", 0.5).\n.decl Answer()\nAnswer() :- Distance(\"Mona Lisa\", distance1), Distance(\"lunch spot\", distance2), distance1 + distance2 <= 1.\n.output Answer", "completions": [".decl Distance(Location:symbol, Distance:float)\nDistance(\"Mona Lisa\", 0).\nDistance(\"lunch spot\", 0.5).\n.decl Answer()\nAnswer() :- Distance(\"Mona Lisa\", distance1), Distance(\"lunch spot\", distance2), distance1 + distance2 <= 1.\n.output Answer"]}
{"id": 1976, "answer": false, "completion": ".decl Is_ingredient(Cocktail:symbol, Ingredient:symbol)\nIs_ingredient(\"White Russian\", \"vodka\").\nIs_ingredient(\"White Russian\", \"coffee liqueur\").\n.decl Has_flavor(Ingredient:symbol, Flavor:symbol)\nHas_flavor(\"kaffir lime\", \"citrus\").\nHas_flavor(\"vodka\", \"neutral\").\nHas_flavor(\"coffee liqueur\", \"coffee\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"White Russian\", ingredient), Has_flavor(ingredient, \"citrus\").\n.output Answer", "completions": [".decl Is_ingredient(Cocktail:symbol, Ingredient:symbol)\nIs_ingredient(\"White Russian\", \"vodka\").\nIs_ingredient(\"White Russian\", \"coffee liqueur\").\n.decl Has_flavor(Ingredient:symbol, Flavor:symbol)\nHas_flavor(\"kaffir lime\", \"citrus\").\nHas_flavor(\"vodka\", \"neutral\").\nHas_flavor(\"coffee liqueur\", \"coffee\").\n.decl Answer()\nAnswer() :- Is_ingredient(\"White Russian\", ingredient), Has_flavor(ingredient, \"citrus\").\n.output Answer"]}
{"id": 1977, "answer": true, "completion": ".decl Screen_time(Doctor:symbol, Time:float)\nScreen_time(\"War Doctor\", 120).\nScreen_time(\"Twelfth Doctor\", 40).\n.decl Answer()\nAnswer() :- Screen_time(\"War Doctor\", time1), Screen_time(\"Twelfth Doctor\", time2), time1 > time2.\n.output Answer", "completions": [".decl Screen_time(Doctor:symbol, Time:float)\nScreen_time(\"War Doctor\", 120).\nScreen_time(\"Twelfth Doctor\", 40).\n.decl Answer()\nAnswer() :- Screen_time(\"War Doctor\", time1), Screen_time(\"Twelfth Doctor\", time2), time1 > time2.\n.output Answer"]}
{"id": 1978, "answer": false, "completion": ".decl Inspired_by(Group_A:symbol, Group_B:symbol)\nInspired_by(\"Little Mix\", \"Spice Girls\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Spice Girls\", \"Little Mix\").\n.output Answer", "completions": [".decl Inspired_by(Group_A:symbol, Group_B:symbol)\nInspired_by(\"Little Mix\", \"Spice Girls\").\n.decl Answer()\nAnswer() :- Inspired_by(\"Spice Girls\", \"Little Mix\").\n.output Answer"]}
{"id": 1979, "answer": false, "completion": ".decl Can_fly(Animal:symbol, Distance:float)\nCan_fly(\"wandering albatross\", 8000).\n.decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"wandering albatross\", 50).\n.decl Takes_time(Distance:float, Time:float)\nTakes_time(distance, time) :- time = distance / 500.\n.decl Answer()\nAnswer() :- Can_fly(\"wandering albatross\", distance), Has_speed(\"wandering albatross\", speed), Takes_time(distance, time), time <= 24.\n.output Answer", "completions": [".decl Can_fly(Animal:symbol, Distance:float)\nCan_fly(\"wandering albatross\", 8000).\n.decl Has_speed(Animal:symbol, Speed:float)\nHas_speed(\"wandering albatross\", 50).\n.decl Takes_time(Distance:float, Time:float)\nTakes_time(distance, time) :- time = distance / 500.\n.decl Answer()\nAnswer() :- Can_fly(\"wandering albatross\", distance), Has_speed(\"wandering albatross\", speed), Takes_time(distance, time), time <= 24.\n.output Answer"]}
{"id": 1980, "answer": false, "completion": ".decl Age(Person:symbol, Year:float)\nAge(\"Chuck Norris\", 80).\n.decl Is_leap_year(Year:float)\nIs_leap_year(2024).\n.decl Answer()\nAnswer() :- Age(\"Chuck Norris\", age), Is_leap_year(year), year > 2020, age >= 90, year - age <= 90.\n.output Answer", "completions": [".decl Age(Person:symbol, Year:float)\nAge(\"Chuck Norris\", 80).\n.decl Is_leap_year(Year:float)\nIs_leap_year(2024).\n.decl Answer()\nAnswer() :- Age(\"Chuck Norris\", age), Is_leap_year(year), year > 2020, age >= 90, year - age <= 90.\n.output Answer"]}
{"id": 1981, "answer": true, "completion": ".decl Allowed_in_place(Animal:symbol, Place:symbol)\nAllowed_in_place(\"German Shepherd\", \"airport\").\nAllowed_in_place(\"German Shepherd\", \"park\").\nAllowed_in_place(\"German Shepherd\", \"home\").\n.decl Answer()\nAnswer() :- Allowed_in_place(\"German Shepherd\", place), place != \"airport\".\n.output Answer", "completions": [".decl Allowed_in_place(Animal:symbol, Place:symbol)\nAllowed_in_place(\"German Shepherd\", \"airport\").\nAllowed_in_place(\"German Shepherd\", \"park\").\nAllowed_in_place(\"German Shepherd\", \"home\").\n.decl Answer()\nAnswer() :- Allowed_in_place(\"German Shepherd\", place), place != \"airport\".\n.output Answer"]}
{"id": 1982, "answer": false, "completion": ".decl Is_part_of(Body_part:symbol, System:symbol)\nIs_part_of(\"foot\", \"imperial system\").\nIs_part_of(\"meter\", \"metric system\").\n.decl Answer()\nAnswer() :- Is_part_of(\"foot\", system), system != \"metric system\".\n.output Answer", "completions": [".decl Is_part_of(Body_part:symbol, System:symbol)\nIs_part_of(\"foot\", \"imperial system\").\nIs_part_of(\"meter\", \"metric system\").\n.decl Answer()\nAnswer() :- Is_part_of(\"foot\", system), system != \"metric system\".\n.output Answer"]}
{"id": 1983, "answer": false, "completion": ".decl Shows(Channel:symbol, Project:symbol, Realistic:symbol)\nShows(\"DIY Channel\", \"build a treehouse\", \"yes\").\nShows(\"DIY Channel\", \"make a flying car\", \"no\").\nShows(\"Online DIY Channel\", \"sew a dress\", \"yes\").\nShows(\"Online DIY Channel\", \"build a time machine\", \"no\").\n.decl Answer()\nAnswer() :- Shows(channel, project, \"no\"), Shows(channel, project, realistic).\n.output Answer", "completions": [".decl Shows(Channel:symbol, Project:symbol, Realistic:symbol)\nShows(\"DIY Channel\", \"build a treehouse\", \"yes\").\nShows(\"DIY Channel\", \"make a flying car\", \"no\").\nShows(\"Online DIY Channel\", \"sew a dress\", \"yes\").\nShows(\"Online DIY Channel\", \"build a time machine\", \"no\").\n.decl Answer()\nAnswer() :- Shows(channel, project, \"no\"), Shows(channel, project, realistic).\n.output Answer"]}
{"id": 1984, "answer": true, "completion": ".decl Found_in(Food:symbol, Ingredient:symbol)\nFound_in(\"vegemite sandwich\", \"vegemite\").\nFound_in(\"vegemite sandwich\", \"bread\").\nFound_in(\"Atlantic cod\", \"water\").\n.decl Answer()\nAnswer() :- Found_in(\"Atlantic cod\", ingredient), !Found_in(\"vegemite sandwich\", ingredient).\n.output Answer", "completions": [".decl Found_in(Food:symbol, Ingredient:symbol)\nFound_in(\"vegemite sandwich\", \"vegemite\").\nFound_in(\"vegemite sandwich\", \"bread\").\nFound_in(\"Atlantic cod\", \"water\").\n.decl Answer()\nAnswer() :- Found_in(\"Atlantic cod\", ingredient), !Found_in(\"vegemite sandwich\", ingredient).\n.output Answer"]}
{"id": 1985, "answer": true, "completion": ".decl Helps(Character:symbol, Item:symbol)\nHelps(\"Macbeth\", \"dagger\").\nHelps(\"Macbeth\", \"crown\").\n.decl Hinders(Character:symbol, Item:symbol)\nHinders(\"Macbeth\", \"guilt\").\n.decl Answer()\nAnswer() :- Helps(\"Macbeth\", item1), Helps(\"Macbeth\", item2), Hinders(\"Macbeth\", item2), item1 != item2.\n.output Answer", "completions": [".decl Helps(Character:symbol, Item:symbol)\nHelps(\"Macbeth\", \"dagger\").\nHelps(\"Macbeth\", \"crown\").\n.decl Hinders(Character:symbol, Item:symbol)\nHinders(\"Macbeth\", \"guilt\").\n.decl Answer()\nAnswer() :- Helps(\"Macbeth\", item1), Helps(\"Macbeth\", item2), Hinders(\"Macbeth\", item2), item1 != item2.\n.output Answer"]}
{"id": 1986, "answer": true, "completion": ".decl Attends(Person:symbol, University:symbol)\nAttends(\"Emma Stone\", \"New York University\").\n.decl Answer()\nAnswer() :- Attends(\"Emma Stone\", university).\n.output Answer", "completions": [".decl Attends(Person:symbol, University:symbol)\nAttends(\"Emma Stone\", \"New York University\").\n.decl Answer()\nAnswer() :- Attends(\"Emma Stone\", university).\n.output Answer"]}
{"id": 1987, "answer": false, "completion": ".decl Found_in(Thing:symbol, Place:symbol)\nFound_in(\"Bob Marley's face\", \"reggae-themed smoke shops\").\nFound_in(\"Bob Marley's face\", \"music festivals\").\nFound_in(\"Bob Marley's face\", \"college dorm rooms\").\n.decl Answer()\nAnswer() :- Found_in(\"Bob Marley's face\", place), place != \"college dorm rooms\".\n.output Answer", "completions": [".decl Found_in(Thing:symbol, Place:symbol)\nFound_in(\"Bob Marley's face\", \"reggae-themed smoke shops\").\nFound_in(\"Bob Marley's face\", \"music festivals\").\nFound_in(\"Bob Marley's face\", \"college dorm rooms\").\n.decl Answer()\nAnswer() :- Found_in(\"Bob Marley's face\", place), place != \"college dorm rooms\".\n.output Answer"]}
{"id": 1988, "answer": false, "completion": ".decl Makes_sound(Object:symbol, Sound:symbol)\nMakes_sound(\"Big Ben\", \"chime\").\n.decl Answer()\nAnswer() :- Makes_sound(\"Big Ben\", sound), sound = \"chime\".\n.output Answer", "completions": [".decl Makes_sound(Object:symbol, Sound:symbol)\nMakes_sound(\"Big Ben\", \"chime\").\n.decl Answer()\nAnswer() :- Makes_sound(\"Big Ben\", sound), sound = \"chime\".\n.output Answer"]}
{"id": 1989, "answer": false, "completion": ".decl Population(City:symbol, Population:float)\nPopulation(\"Detroit\", 1565086).\n.decl Capacity(Venue:symbol, Capacity:float)\nCapacity(\"Tiger Stadium\", 51428).\n.decl Answer()\nAnswer() :- Population(\"Detroit\", population), Capacity(\"Tiger Stadium\", capacity), population <= capacity.\nAnswer() :- Population(\"Detroit\", population), Capacity(venue2, capacity2), capacity >= population, Answer() :- Capacity(\"Tiger Stadium\", capacity), Population(city2, population2), population <= capacity.\n.output Answer", "completions": [".decl Population(City:symbol, Population:float)\nPopulation(\"Detroit\", 1565086).\n.decl Capacity(Venue:symbol, Capacity:float)\nCapacity(\"Tiger Stadium\", 51428).\n.decl Answer()\nAnswer() :- Population(\"Detroit\", population), Capacity(\"Tiger Stadium\", capacity), population <= capacity.\nAnswer() :- Population(\"Detroit\", population), Capacity(venue2, capacity2), capacity >= population, Answer() :- Capacity(\"Tiger Stadium\", capacity), Population(city2, population2), population <= capacity.\n.output Answer"]}
{"id": 1990, "answer": false, "completion": ".decl Wrote(Poet:symbol, Work:symbol)\nWrote(\"Adam Mickiewicz\", \"Pan Tadeusz\").\nWrote(\"Adam Mickiewicz\", \"Sonnets from the Crimea\").\n.decl Has_theme(Work:symbol, Theme:symbol)\nHas_theme(\"Sonnets from the Crimea\", \"Islamic religion\").\n.decl Is_from(Country:symbol, Poet:symbol)\nIs_from(\"Poland\", \"Adam Mickiewicz\").\n.decl Answer()\nAnswer() :- Wrote(poet, work), Is_from(\"Poland\", poet), Has_theme(work, \"Islamic religion\").\n.output Answer", "completions": [".decl Wrote(Poet:symbol, Work:symbol)\nWrote(\"Adam Mickiewicz\", \"Pan Tadeusz\").\nWrote(\"Adam Mickiewicz\", \"Sonnets from the Crimea\").\n.decl Has_theme(Work:symbol, Theme:symbol)\nHas_theme(\"Sonnets from the Crimea\", \"Islamic religion\").\n.decl Is_from(Country:symbol, Poet:symbol)\nIs_from(\"Poland\", \"Adam Mickiewicz\").\n.decl Answer()\nAnswer() :- Wrote(poet, work), Is_from(\"Poland\", poet), Has_theme(work, \"Islamic religion\").\n.output Answer"]}
{"id": 1991, "answer": false, "completion": ".decl Participates(Person:symbol, Event:symbol)\nParticipates(\"Barack Obama\", \"Presidential Election\").\nParticipates(\"Martin Luther\", \"Reformation\").\n.decl Answer()\nAnswer() :- Participates(\"Barack Obama\", event), !Participates(\"Martin Luther\", event).\n.output Answer", "completions": [".decl Participates(Person:symbol, Event:symbol)\nParticipates(\"Barack Obama\", \"Presidential Election\").\nParticipates(\"Martin Luther\", \"Reformation\").\n.decl Answer()\nAnswer() :- Participates(\"Barack Obama\", event), !Participates(\"Martin Luther\", event).\n.output Answer"]}
{"id": 1992, "answer": true, "completion": ".decl Based_on(Person:symbol, Artwork:symbol)\nBased_on(\"Lisa Gherardini\", \"Mona Lisa\").\n.decl Answer()\nAnswer() :- Based_on(person, \"Mona Lisa\").\n.output Answer", "completions": [".decl Based_on(Person:symbol, Artwork:symbol)\nBased_on(\"Lisa Gherardini\", \"Mona Lisa\").\n.decl Answer()\nAnswer() :- Based_on(person, \"Mona Lisa\").\n.output Answer"]}
{"id": 1993, "answer": true, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"model\", \"burgers\").\nLikes(\"model\", \"milkshakes\").\nLikes(\"model\", \"fries\").\n.decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Cookout\", \"burgers\").\nServes(\"Cookout\", \"milkshakes\").\nServes(\"Cookout\", \"fries\").\n.decl Answer()\nAnswer() :- Likes(\"model\", food), Serves(\"Cookout\", food).\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"model\", \"burgers\").\nLikes(\"model\", \"milkshakes\").\nLikes(\"model\", \"fries\").\n.decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Cookout\", \"burgers\").\nServes(\"Cookout\", \"milkshakes\").\nServes(\"Cookout\", \"fries\").\n.decl Answer()\nAnswer() :- Likes(\"model\", food), Serves(\"Cookout\", food).\n.output Answer"]}
{"id": 1994, "answer": true, "completion": ".decl Has_n_books(Library:symbol, N_books:float)\nHas_n_books(\"Library of Alexandria\", 700000).\nHas_n_books(\"Library of Congress\", 170000000).\n.decl Has_shelf_space(Library:symbol, Shelf_space:float)\nHas_shelf_space(\"Library of Alexandria\", 20000).\nHas_shelf_space(\"Library of Congress\", 850000).\n.decl Answer()\nAnswer() :- Has_n_books(\"Library of Alexandria\", n_books1), Has_n_books(\"Library of Congress\", n_books2), Has_shelf_space(\"Library of Alexandria\", shelf_space1), Has_shelf_space(\"Library of Congress\", shelf_space2), n_books1/n_books2 < shelf_space1/shelf_space2.\n.output Answer", "completions": [".decl Has_n_books(Library:symbol, N_books:float)\nHas_n_books(\"Library of Alexandria\", 700000).\nHas_n_books(\"Library of Congress\", 170000000).\n.decl Has_shelf_space(Library:symbol, Shelf_space:float)\nHas_shelf_space(\"Library of Alexandria\", 20000).\nHas_shelf_space(\"Library of Congress\", 850000).\n.decl Answer()\nAnswer() :- Has_n_books(\"Library of Alexandria\", n_books1), Has_n_books(\"Library of Congress\", n_books2), Has_shelf_space(\"Library of Alexandria\", shelf_space1), Has_shelf_space(\"Library of Congress\", shelf_space2), n_books1/n_books2 < shelf_space1/shelf_space2.\n.output Answer"]}
{"id": 1995, "answer": false, "completion": ".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"tongue\", \"head\").\n.decl Answer()\nAnswer() :- Is_part_of(\"tongue\", part), Is_part_of(part, \"head\").\n.output Answer", "completions": [".decl Is_part_of(Part:symbol, Whole:symbol)\nIs_part_of(\"tongue\", \"head\").\n.decl Answer()\nAnswer() :- Is_part_of(\"tongue\", part), Is_part_of(part, \"head\").\n.output Answer"]}
{"id": 1996, "answer": true, "completion": ".decl Consumes(Person:symbol, Food:symbol)\nConsumes(\"ancient visitor\", \"crocus threads\").\n.decl Originates_from(Food:symbol, Region:symbol)\nOriginates_from(\"crocus threads\", \"Persia\").\n.decl Answer()\nAnswer() :- Consumes(\"ancient visitor\", food), Originates_from(food, \"Persia\").\n.output Answer", "completions": [".decl Consumes(Person:symbol, Food:symbol)\nConsumes(\"ancient visitor\", \"crocus threads\").\n.decl Originates_from(Food:symbol, Region:symbol)\nOriginates_from(\"crocus threads\", \"Persia\").\n.decl Answer()\nAnswer() :- Consumes(\"ancient visitor\", food), Originates_from(food, \"Persia\").\n.output Answer"]}
{"id": 1997, "answer": true, "completion": ".decl Causes_symptom(Fruit:symbol, Symptom:symbol)\nCauses_symptom(\"Durian\", \"stomachache\").\n.decl Answer()\nAnswer() :- Causes_symptom(\"Durian\", \"stomachache\").\n.output Answer", "completions": [".decl Causes_symptom(Fruit:symbol, Symptom:symbol)\nCauses_symptom(\"Durian\", \"stomachache\").\n.decl Answer()\nAnswer() :- Causes_symptom(\"Durian\", \"stomachache\").\n.output Answer"]}
{"id": 1998, "answer": true, "completion": ".decl Lasts(Event:symbol, Duration:float)\nLasts(\"Hundred Years' War\", 116).\n.decl Answer()\nAnswer() :- Lasts(\"Hundred Years' War\", duration), duration > 100.\n.output Answer", "completions": [".decl Lasts(Event:symbol, Duration:float)\nLasts(\"Hundred Years' War\", 116).\n.decl Answer()\nAnswer() :- Lasts(\"Hundred Years' War\", duration), duration > 100.\n.output Answer"]}
{"id": 1999, "answer": false, "completion": ".decl Contains_nutrient(Food:symbol, Nutrient:symbol)\nContains_nutrient(\"kale\", \"calcium\").\nContains_nutrient(\"spinach\", \"iron\").\nContains_nutrient(\"spinach\", \"calcium\").\n.decl Answer()\nAnswer() :- Contains_nutrient(\"kale\", nutrient), !Contains_nutrient(\"spinach\", nutrient).\n.output Answer", "completions": [".decl Contains_nutrient(Food:symbol, Nutrient:symbol)\nContains_nutrient(\"kale\", \"calcium\").\nContains_nutrient(\"spinach\", \"iron\").\nContains_nutrient(\"spinach\", \"calcium\").\n.decl Answer()\nAnswer() :- Contains_nutrient(\"kale\", nutrient), !Contains_nutrient(\"spinach\", nutrient).\n.output Answer"]}
{"id": 2000, "answer": false, "completion": ".decl Imprisoned_for(Person:symbol, Reason:symbol)\nImprisoned_for(\"Jean Valjean\", \"stealing a loaf of bread\").\n.decl Answer()\nAnswer() :- Imprisoned_for(\"Jean Valjean\", \"hunger\").\n.output Answer", "completions": [".decl Imprisoned_for(Person:symbol, Reason:symbol)\nImprisoned_for(\"Jean Valjean\", \"stealing a loaf of bread\").\n.decl Answer()\nAnswer() :- Imprisoned_for(\"Jean Valjean\", \"hunger\").\n.output Answer"]}
{"id": 2001, "answer": false, "completion": ".decl Musical(Name:symbol, Type:symbol)\nMusical(\"The Rocky Horror Show\", \"jukebox\").\n.decl Features(Character:symbol, Musical:symbol)\nFeatures(\"Dr. Frank-N-Furter\", \"The Rocky Horror Show\").\n.decl Answer()\nAnswer() :- Musical(musical, \"jukebox\"), Features(\"Dr. Frank-N-Furter\", musical), Name(musical, \"The Rocky Horror Show\").\n.output Answer", "completions": [".decl Musical(Name:symbol, Type:symbol)\nMusical(\"The Rocky Horror Show\", \"jukebox\").\n.decl Features(Character:symbol, Musical:symbol)\nFeatures(\"Dr. Frank-N-Furter\", \"The Rocky Horror Show\").\n.decl Answer()\nAnswer() :- Musical(musical, \"jukebox\"), Features(\"Dr. Frank-N-Furter\", musical), Name(musical, \"The Rocky Horror Show\").\n.output Answer"]}
{"id": 2002, "answer": true, "completion": ".decl Belongs_to(Tribe:symbol, Land:symbol)\nBelongs_to(\"Adamu's tribe\", \"Holy Land\").\n.decl Answer()\nAnswer() :- Belongs_to(\"Adamu's tribe\", \"Holy Land\").\n.output Answer", "completions": [".decl Belongs_to(Tribe:symbol, Land:symbol)\nBelongs_to(\"Adamu's tribe\", \"Holy Land\").\n.decl Answer()\nAnswer() :- Belongs_to(\"Adamu's tribe\", \"Holy Land\").\n.output Answer"]}
{"id": 2003, "answer": false, "completion": ".decl Located_in(City:symbol, Country:symbol)\nLocated_in(\"Boston\", \"USA\").\nLocated_in(\"London\", \"UK\").\n.decl Connected_by_road(City1:symbol, City2:symbol)\nConnected_by_road(\"Boston\", \"New York\").\nConnected_by_road(\"New York\", \"Philadelphia\").\nConnected_by_road(\"Philadelphia\", \"Washington DC\").\nConnected_by_road(\"London\", \"Bristol\").\nConnected_by_road(\"Bristol\", \"Cardiff\").\nConnected_by_road(\"Cardiff\", \"Swansea\").\nConnected_by_road(\"Swansea\", \"Birmingham\").\nConnected_by_road(\"Birmingham\", \"Manchester\").\nConnected_by_road(\"Manchester\", \"Leeds\").\nConnected_by_road(\"Leeds\", \"Newcastle\").\nConnected_by_road(\"Newcastle\", \"Edinburgh\").\nConnected_by_road(\"Edinburgh\", \"Glasgow\").\nConnected_by_road(\"Glasgow\", \"Aberdeen\").\n.decl Answer()\nAnswer() :- Located_in(\"Boston\", country1), Located_in(\"London\", country2), Connected_by_road(\"Boston\", city1), Connected_by_road(city1, city2), Connected_by_road(city2, \"London\"), country1 = country2.\n.output Answer", "completions": [".decl Located_in(City:symbol, Country:symbol)\nLocated_in(\"Boston\", \"USA\").\nLocated_in(\"London\", \"UK\").\n.decl Connected_by_road(City1:symbol, City2:symbol)\nConnected_by_road(\"Boston\", \"New York\").\nConnected_by_road(\"New York\", \"Philadelphia\").\nConnected_by_road(\"Philadelphia\", \"Washington DC\").\nConnected_by_road(\"London\", \"Bristol\").\nConnected_by_road(\"Bristol\", \"Cardiff\").\nConnected_by_road(\"Cardiff\", \"Swansea\").\nConnected_by_road(\"Swansea\", \"Birmingham\").\nConnected_by_road(\"Birmingham\", \"Manchester\").\nConnected_by_road(\"Manchester\", \"Leeds\").\nConnected_by_road(\"Leeds\", \"Newcastle\").\nConnected_by_road(\"Newcastle\", \"Edinburgh\").\nConnected_by_road(\"Edinburgh\", \"Glasgow\").\nConnected_by_road(\"Glasgow\", \"Aberdeen\").\n.decl Answer()\nAnswer() :- Located_in(\"Boston\", country1), Located_in(\"London\", country2), Connected_by_road(\"Boston\", city1), Connected_by_road(city1, city2), Connected_by_road(city2, \"London\"), country1 = country2.\n.output Answer"]}
{"id": 2004, "answer": true, "completion": ".decl Did_something(Person:symbol, Action:symbol, Object:symbol, Year:float)\nDid_something(\"Mike Tyson\", \"bite\", \"Evander Holyfield's ear\", 1997).\n.decl Slogan(Character:symbol, Slogan:symbol)\nSlogan(\"McGruff\", \"Take a bite out of crime!\").\n.decl Answer()\nAnswer() :- Did_something(\"Mike Tyson\", action1, object1, year1), Slogan(character2, slogan2), action1 != slogan2.\n.output Answer", "completions": [".decl Did_something(Person:symbol, Action:symbol, Object:symbol, Year:float)\nDid_something(\"Mike Tyson\", \"bite\", \"Evander Holyfield's ear\", 1997).\n.decl Slogan(Character:symbol, Slogan:symbol)\nSlogan(\"McGruff\", \"Take a bite out of crime!\").\n.decl Answer()\nAnswer() :- Did_something(\"Mike Tyson\", action1, object1, year1), Slogan(character2, slogan2), action1 != slogan2.\n.output Answer"]}
{"id": 2005, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"durian\", 2).\n.decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"durian\", 4).\n.decl Answer()\nAnswer() :- Has_weight(\"durian\", weight), Has_hardness(\"durian\", hardness), weight * hardness > 10.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"durian\", 2).\n.decl Has_hardness(Object:symbol, Hardness:float)\nHas_hardness(\"durian\", 4).\n.decl Answer()\nAnswer() :- Has_weight(\"durian\", weight), Has_hardness(\"durian\", hardness), weight * hardness > 10.\n.output Answer"]}
{"id": 2006, "answer": false, "completion": ".decl Associated_with(Activity:symbol, Association:symbol)\nAssociated_with(\"YMCA\", \"singing\").\n.decl Answer()\nAnswer() :- Associated_with(\"YMCA\", \"singing\").\n.output Answer", "completions": [".decl Associated_with(Activity:symbol, Association:symbol)\nAssociated_with(\"YMCA\", \"singing\").\n.decl Answer()\nAnswer() :- Associated_with(\"YMCA\", \"singing\").\n.output Answer"]}
{"id": 2007, "answer": true, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"Saltwater crocodile\", \"water\").\nLives_in(\"Saltwater crocodile\", \"saltwater\").\nLives_in(\"Saltwater crocodile\", \"tropical\").\n.decl Located_in(City:symbol, State:symbol)\nLocated_in(\"Memphis\", \"Tennessee\").\n.decl Answer()\nAnswer() :- Lives_in(\"Saltwater crocodile\", habitat), habitat != \"water\".\nAnswer() :- Lives_in(\"Saltwater crocodile\", \"water\"), !Located_in(\"Memphis\", state).\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"Saltwater crocodile\", \"water\").\nLives_in(\"Saltwater crocodile\", \"saltwater\").\nLives_in(\"Saltwater crocodile\", \"tropical\").\n.decl Located_in(City:symbol, State:symbol)\nLocated_in(\"Memphis\", \"Tennessee\").\n.decl Answer()\nAnswer() :- Lives_in(\"Saltwater crocodile\", habitat), habitat != \"water\".\nAnswer() :- Lives_in(\"Saltwater crocodile\", \"water\"), !Located_in(\"Memphis\", state).\n.output Answer"]}
{"id": 2008, "answer": true, "completion": ".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"nails\").\nSells(\"Home Depot\", \"wood\").\nSells(\"Home Depot\", \"hammers\").\nSells(\"Home Depot\", \"saws\").\nSells(\"Home Depot\", \"paint\").\nSells(\"Home Depot\", \"plumbing supplies\").\nSells(\"Home Depot\", \"electrical supplies\").\nSells(\"Home Depot\", \"gardening tools\").\nSells(\"Home Depot\", \"light fixtures\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"nails\"), Sells(\"Home Depot\", \"wood\"), Sells(\"Home Depot\", \"hammers\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Item:symbol)\nSells(\"Home Depot\", \"nails\").\nSells(\"Home Depot\", \"wood\").\nSells(\"Home Depot\", \"hammers\").\nSells(\"Home Depot\", \"saws\").\nSells(\"Home Depot\", \"paint\").\nSells(\"Home Depot\", \"plumbing supplies\").\nSells(\"Home Depot\", \"electrical supplies\").\nSells(\"Home Depot\", \"gardening tools\").\nSells(\"Home Depot\", \"light fixtures\").\n.decl Answer()\nAnswer() :- Sells(\"Home Depot\", \"nails\"), Sells(\"Home Depot\", \"wood\"), Sells(\"Home Depot\", \"hammers\").\n.output Answer"]}
{"id": 2009, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Shamu\", \"SeaWorld San Diego\").\n.decl Answer()\nAnswer() :- Lives_in(\"Shamu\", location), location = \"SeaWorld San Diego\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"Shamu\", \"SeaWorld San Diego\").\n.decl Answer()\nAnswer() :- Lives_in(\"Shamu\", location), location = \"SeaWorld San Diego\".\n.output Answer"]}
{"id": 2010, "answer": true, "completion": ".decl Initial_move(Opening:symbol, Move:symbol)\nInitial_move(\"French Defence\", \"e6\").\n.decl Four_move_checkmate(Move1:symbol, Move2:symbol, Move3:symbol, Move4:symbol)\nFour_move_checkmate(\"e4\", \"Qh5\", \"Nc6\", \"Qxf7\").\n.decl Answer()\nAnswer() :- Initial_move(\"French Defence\", move1), Four_move_checkmate(move1, move2, move3, move4), Move(\"e6\"), Move(\"!=\", move1), Move(\"!=\", move2), Move(\"!=\", move3), Move(\"!=\", move4).\n.output Answer", "completions": [".decl Initial_move(Opening:symbol, Move:symbol)\nInitial_move(\"French Defence\", \"e6\").\n.decl Four_move_checkmate(Move1:symbol, Move2:symbol, Move3:symbol, Move4:symbol)\nFour_move_checkmate(\"e4\", \"Qh5\", \"Nc6\", \"Qxf7\").\n.decl Answer()\nAnswer() :- Initial_move(\"French Defence\", move1), Four_move_checkmate(move1, move2, move3, move4), Move(\"e6\"), Move(\"!=\", move1), Move(\"!=\", move2), Move(\"!=\", move3), Move(\"!=\", move4).\n.output Answer"]}
{"id": 2011, "answer": false, "completion": ".decl Serves(Food:symbol, Restaurant:symbol)\nServes(\"chicken sandwich\", \"Chick-fil-A\").\nServes(\"french fries\", \"Chick-fil-A\").\nServes(\"salad\", \"Chick-fil-A\").\n.decl Is_vegetarian(Food:symbol)\nIs_vegetarian(\"salad\").\n.decl Answer()\nAnswer() :- Serves(food, \"Chick-fil-A\"), !Is_vegetarian(food).\nAnswer() :- not Serves(_, \"Chick-fil-A\").\n.output Answer", "completions": [".decl Serves(Food:symbol, Restaurant:symbol)\nServes(\"chicken sandwich\", \"Chick-fil-A\").\nServes(\"french fries\", \"Chick-fil-A\").\nServes(\"salad\", \"Chick-fil-A\").\n.decl Is_vegetarian(Food:symbol)\nIs_vegetarian(\"salad\").\n.decl Answer()\nAnswer() :- Serves(food, \"Chick-fil-A\"), !Is_vegetarian(food).\nAnswer() :- not Serves(_, \"Chick-fil-A\").\n.output Answer"]}
{"id": 2012, "answer": false, "completion": ".decl Obvious(Grief:symbol)\nObvious(\"crying\").\nObvious(\"withdrawal\").\nObvious(\"anger\").\n.decl Answer()\nAnswer() :- !Obvious(grief).\n.output Answer", "completions": [".decl Obvious(Grief:symbol)\nObvious(\"crying\").\nObvious(\"withdrawal\").\nObvious(\"anger\").\n.decl Answer()\nAnswer() :- !Obvious(grief).\n.output Answer"]}
{"id": 2013, "answer": true, "completion": ".decl Is_ethnicity(Person:symbol, Ethnicity:symbol)\nIs_ethnicity(\"Scottish person\", \"Celtic\").\nIs_ethnicity(\"Albidosi\", \"Celtic\").\n.decl Answer()\nAnswer() :- Is_ethnicity(\"Scottish person\", ethnicity), Is_ethnicity(\"Albidosi\", ethnicity).\n.output Answer", "completions": [".decl Is_ethnicity(Person:symbol, Ethnicity:symbol)\nIs_ethnicity(\"Scottish person\", \"Celtic\").\nIs_ethnicity(\"Albidosi\", \"Celtic\").\n.decl Answer()\nAnswer() :- Is_ethnicity(\"Scottish person\", ethnicity), Is_ethnicity(\"Albidosi\", ethnicity).\n.output Answer"]}
{"id": 2014, "answer": true, "completion": ".decl Reduces_transmission(Intervention:symbol, STI:symbol)\nReduces_transmission(\"condom use\", \"HIV\").\nReduces_transmission(\"vaccination\", \"HPV\").\n.decl Answer()\nAnswer() :- Reduces_transmission(intervention, \"STI\").\n.output Answer", "completions": [".decl Reduces_transmission(Intervention:symbol, STI:symbol)\nReduces_transmission(\"condom use\", \"HIV\").\nReduces_transmission(\"vaccination\", \"HPV\").\n.decl Answer()\nAnswer() :- Reduces_transmission(intervention, \"STI\").\n.output Answer"]}
{"id": 2015, "answer": true, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Jack Black\", 1.68).\n.decl Requires_distance(Distance:float)\nRequires_distance(2).\n.decl Answer()\nAnswer() :- Has_height(\"Jack Black\", height), Requires_distance(distance), height >= distance.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Jack Black\", 1.68).\n.decl Requires_distance(Distance:float)\nRequires_distance(2).\n.decl Answer()\nAnswer() :- Has_height(\"Jack Black\", height), Requires_distance(distance), height >= distance.\n.output Answer"]}
{"id": 2016, "answer": false, "completion": ".decl Religious_figure(Person:symbol)\nReligious_figure(\"Saint Peter\").\n.decl Answer()\nAnswer() :- !Religious_figure(\"Saint Peter\").\n.output Answer\n\n// Note: Since we cannot prove a negative in Datalog, we can only answer this question by negating the fact that Saint Peter is a religious figure and assuming that watching television is not restricted by any religious beliefs or practices.", "completions": [".decl Religious_figure(Person:symbol)\nReligious_figure(\"Saint Peter\").\n.decl Answer()\nAnswer() :- !Religious_figure(\"Saint Peter\").\n.output Answer\n\n// Note: Since we cannot prove a negative in Datalog, we can only answer this question by negating the fact that Saint Peter is a religious figure and assuming that watching television is not restricted by any religious beliefs or practices."]}
{"id": 2017, "answer": false, "completion": ".decl Is_knight(Person:symbol)\nIs_knight(\"Sir Patrick Stewart\").\nIs_knight(\"Sir Elton John\").\n.decl Answer()\nAnswer() :- Is_knight(person).\n.output Answer", "completions": [".decl Is_knight(Person:symbol)\nIs_knight(\"Sir Patrick Stewart\").\nIs_knight(\"Sir Elton John\").\n.decl Answer()\nAnswer() :- Is_knight(person).\n.output Answer"]}
{"id": 2018, "answer": true, "completion": ".decl Takes_time(Event:symbol, Time:float)\nTakes_time(\"U2 debut studio album\", 42).\nTakes_time(\"Peppa Pig episode\", 5).\n.decl Answer()\nAnswer() :- Takes_time(\"U2 debut studio album\", time1), Takes_time(\"Peppa Pig episode\", time2), time1 <= time2.\n.output Answer", "completions": [".decl Takes_time(Event:symbol, Time:float)\nTakes_time(\"U2 debut studio album\", 42).\nTakes_time(\"Peppa Pig episode\", 5).\n.decl Answer()\nAnswer() :- Takes_time(\"U2 debut studio album\", time1), Takes_time(\"Peppa Pig episode\", time2), time1 <= time2.\n.output Answer"]}
{"id": 2019, "answer": false, "completion": ".decl Belongs_to_group(Person:symbol, Group:symbol)\nBelongs_to_group(\"Osama bin Laden\", \"Al-Qaeda\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Osama bin Laden\", \"abstains from alcohol\").\n.decl Answer()\nAnswer() :- Belongs_to_group(\"Osama bin Laden\", group), !Has_trait(\"Osama bin Laden\", \"drinks alcohol\").\n.output Answer", "completions": [".decl Belongs_to_group(Person:symbol, Group:symbol)\nBelongs_to_group(\"Osama bin Laden\", \"Al-Qaeda\").\n.decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Osama bin Laden\", \"abstains from alcohol\").\n.decl Answer()\nAnswer() :- Belongs_to_group(\"Osama bin Laden\", group), !Has_trait(\"Osama bin Laden\", \"drinks alcohol\").\n.output Answer"]}
{"id": 2020, "answer": false, "completion": ".decl Won_award(Person:symbol, Year:float)\nWon_award(\"Jerry Seinfeld\", 1992).\n.decl Had_successful_show(Person:symbol, Year:float)\nHad_successful_show(\"Jerry Seinfeld\", 1986).\n.decl Answer()\nAnswer() :- Won_award(\"Jerry Seinfeld\", year), Had_successful_show(\"Jerry Seinfeld\", year).\n.output Answer", "completions": [".decl Won_award(Person:symbol, Year:float)\nWon_award(\"Jerry Seinfeld\", 1992).\n.decl Had_successful_show(Person:symbol, Year:float)\nHad_successful_show(\"Jerry Seinfeld\", 1986).\n.decl Answer()\nAnswer() :- Won_award(\"Jerry Seinfeld\", year), Had_successful_show(\"Jerry Seinfeld\", year).\n.output Answer"]}
{"id": 2021, "answer": false, "completion": ".decl Born(Person:symbol, Year:float)\nBorn(\"Buzz Aldrin\", 1930).\n.decl Invented(Object:symbol, Year:float)\nInvented(\"computer\", 1937).\n.decl Answer()\nAnswer() :- Born(\"Buzz Aldrin\", year), Invented(\"computer\", year2), year2 <= year.\n.output Answer", "completions": [".decl Born(Person:symbol, Year:float)\nBorn(\"Buzz Aldrin\", 1930).\n.decl Invented(Object:symbol, Year:float)\nInvented(\"computer\", 1937).\n.decl Answer()\nAnswer() :- Born(\"Buzz Aldrin\", year), Invented(\"computer\", year2), year2 <= year.\n.output Answer"]}
{"id": 2022, "answer": true, "completion": ".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"urban legend\", \"suburbs\").\nHappens_in_location(\"urban legend\", \"rural areas\").\nHappens_in_location(\"urban legend\", \"cities\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"urban legend\", location), location != \"cities\".\n.output Answer", "completions": [".decl Happens_in_location(Event:symbol, Location:symbol)\nHappens_in_location(\"urban legend\", \"suburbs\").\nHappens_in_location(\"urban legend\", \"rural areas\").\nHappens_in_location(\"urban legend\", \"cities\").\n.decl Answer()\nAnswer() :- Happens_in_location(\"urban legend\", location), location != \"cities\".\n.output Answer"]}
{"id": 2023, "answer": true, "completion": ".decl Has_power(Character:symbol, Power:float)\nHas_power(\"Gandalf\", 100).\nHas_power(\"Barbas\", 80).\n.decl Answer()\nAnswer() :- Has_power(\"Gandalf\", power1), Has_power(\"Barbas\", power2), power1 > power2.\n.output Answer", "completions": [".decl Has_power(Character:symbol, Power:float)\nHas_power(\"Gandalf\", 100).\nHas_power(\"Barbas\", 80).\n.decl Answer()\nAnswer() :- Has_power(\"Gandalf\", power1), Has_power(\"Barbas\", power2), power1 > power2.\n.output Answer"]}
{"id": 2024, "answer": true, "completion": ".decl Eats_meal(Person:symbol, Meal:symbol)\nEats_meal(\"Bulgarian priest\", \"four-course meal\").\n.decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Christmas Eve\", \"December 24\").\n.decl Answer()\nAnswer() :- Eats_meal(\"Bulgarian priest\", meal), Happens_on_day(\"Christmas Eve\", day), meal = \"four-course meal\".\n.output Answer", "completions": [".decl Eats_meal(Person:symbol, Meal:symbol)\nEats_meal(\"Bulgarian priest\", \"four-course meal\").\n.decl Happens_on_day(Event:symbol, Day:symbol)\nHappens_on_day(\"Christmas Eve\", \"December 24\").\n.decl Answer()\nAnswer() :- Eats_meal(\"Bulgarian priest\", meal), Happens_on_day(\"Christmas Eve\", day), meal = \"four-course meal\".\n.output Answer"]}
{"id": 2025, "answer": false, "completion": ".decl Works_at(Person:symbol, Restaurant:symbol)\nWorks_at(\"chef\", \"Carmine's restaurant\").\n.decl Has_ingredient(Restaurant:symbol, Ingredient:symbol)\nHas_ingredient(\"Carmine's restaurant\", \"basil\").\n.decl Answer()\nAnswer() :- Works_at(\"chef\", \"Carmine's restaurant\"), !Has_ingredient(\"Carmine's restaurant\", \"basil\").\n.output Answer", "completions": [".decl Works_at(Person:symbol, Restaurant:symbol)\nWorks_at(\"chef\", \"Carmine's restaurant\").\n.decl Has_ingredient(Restaurant:symbol, Ingredient:symbol)\nHas_ingredient(\"Carmine's restaurant\", \"basil\").\n.decl Answer()\nAnswer() :- Works_at(\"chef\", \"Carmine's restaurant\"), !Has_ingredient(\"Carmine's restaurant\", \"basil\").\n.output Answer"]}
{"id": 2026, "answer": false, "completion": ".decl Has_operating_system(Device:symbol, OS:symbol)\nHas_operating_system(\"Samsung Galaxy 1\", \"Android\").\n.decl Sounds_edible(Food:symbol)\nSounds_edible(\"chocolate\").\n.decl Answer()\nAnswer() :- Has_operating_system(\"Samsung Galaxy 1\", os), Sounds_edible(os).\n.output Answer", "completions": [".decl Has_operating_system(Device:symbol, OS:symbol)\nHas_operating_system(\"Samsung Galaxy 1\", \"Android\").\n.decl Sounds_edible(Food:symbol)\nSounds_edible(\"chocolate\").\n.decl Answer()\nAnswer() :- Has_operating_system(\"Samsung Galaxy 1\", os), Sounds_edible(os).\n.output Answer"]}
{"id": 2027, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"red panda\", \"forest\").\nLives_in(\"red panda\", \"zoo\").\n.decl Found_in_city(Animal:symbol, City:symbol)\nFound_in_city(\"red panda\", \"Shanghai\").\n.decl Answer()\nAnswer() :- Lives_in(\"red panda\", habitat), Found_in_city(\"red panda\", city), habitat != \"zoo\", city = \"Shanghai\".\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Habitat:symbol)\nLives_in(\"red panda\", \"forest\").\nLives_in(\"red panda\", \"zoo\").\n.decl Found_in_city(Animal:symbol, City:symbol)\nFound_in_city(\"red panda\", \"Shanghai\").\n.decl Answer()\nAnswer() :- Lives_in(\"red panda\", habitat), Found_in_city(\"red panda\", city), habitat != \"zoo\", city = \"Shanghai\".\n.output Answer"]}
{"id": 2028, "answer": false, "completion": ".decl Affects_sales(Company:symbol, Event:symbol)\nAffects_sales(\"Intel\", \"silicon shortage\").\n.decl Bad_event(Event:symbol)\nBad_event(\"silicon shortage\").\n.decl Answer()\nAnswer() :- Affects_sales(\"Intel\", event), Bad_event(event).\n.output Answer", "completions": [".decl Affects_sales(Company:symbol, Event:symbol)\nAffects_sales(\"Intel\", \"silicon shortage\").\n.decl Bad_event(Event:symbol)\nBad_event(\"silicon shortage\").\n.decl Answer()\nAnswer() :- Affects_sales(\"Intel\", event), Bad_event(event).\n.output Answer"]}
{"id": 2029, "answer": false, "completion": ".decl Is_word(Word:symbol)\nIs_word(\"MIX\").\n.decl Is_roman_numeral(Roman_numeral:symbol)\nIs_roman_numeral(\"IX\").\n.decl Answer()\nAnswer() :- Is_word(word), Is_roman_numeral(roman_numeral), word = roman_numeral.\n.output Answer", "completions": [".decl Is_word(Word:symbol)\nIs_word(\"MIX\").\n.decl Is_roman_numeral(Roman_numeral:symbol)\nIs_roman_numeral(\"IX\").\n.decl Answer()\nAnswer() :- Is_word(word), Is_roman_numeral(roman_numeral), word = roman_numeral.\n.output Answer"]}
{"id": 2030, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Hurricane Maria\", \"September 2017\").\nHappens_in_time(\"windsurfing\", \"summer\").\n.decl Occurs_in_place(Event:symbol, Place:symbol)\nOccurs_in_place(\"windsurfing\", \"Puerto Rico\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Hurricane Maria\", time), !Occurs_in_place(\"Hurricane Maria\", place), Happens_in_time(\"windsurfing\", time), Occurs_in_place(\"windsurfing\", place).\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Hurricane Maria\", \"September 2017\").\nHappens_in_time(\"windsurfing\", \"summer\").\n.decl Occurs_in_place(Event:symbol, Place:symbol)\nOccurs_in_place(\"windsurfing\", \"Puerto Rico\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Hurricane Maria\", time), !Occurs_in_place(\"Hurricane Maria\", place), Happens_in_time(\"windsurfing\", time), Occurs_in_place(\"windsurfing\", place).\n.output Answer"]}
{"id": 2031, "answer": true, "completion": ".decl Featured_in(Film:symbol, Artifact:symbol)\nFeatured_in(\"Indiana Jones and the Last Crusade\", \"Holy Grail\").\nFeatured_in(\"Monty Python and the Holy Grail\", \"Holy Grail\").\nFeatured_in(\"The Da Vinci Code\", \"Holy Grail\").\nFeatured_in(\"Knightfall\", \"Holy Grail\").\nFeatured_in(\"The Librarian: Quest for the Spear\", \"Holy Grail\").\nFeatured_in(\"The Librarian: Return to King Solomon's Mines\", \"Holy Grail\").\n.decl Count(Artifact:symbol, N:float)\nCount(\"Holy Grail\", 6).\n.decl Answer()\nAnswer() :- Count(artifact, n), n >= 5, Featured_in(film, artifact).\n.output Answer", "completions": [".decl Featured_in(Film:symbol, Artifact:symbol)\nFeatured_in(\"Indiana Jones and the Last Crusade\", \"Holy Grail\").\nFeatured_in(\"Monty Python and the Holy Grail\", \"Holy Grail\").\nFeatured_in(\"The Da Vinci Code\", \"Holy Grail\").\nFeatured_in(\"Knightfall\", \"Holy Grail\").\nFeatured_in(\"The Librarian: Quest for the Spear\", \"Holy Grail\").\nFeatured_in(\"The Librarian: Return to King Solomon's Mines\", \"Holy Grail\").\n.decl Count(Artifact:symbol, N:float)\nCount(\"Holy Grail\", 6).\n.decl Answer()\nAnswer() :- Count(artifact, n), n >= 5, Featured_in(film, artifact).\n.output Answer"]}
{"id": 2032, "answer": true, "completion": ".decl Ate(Person:symbol, Food:symbol)\nAte(\"Jean Harris's victim\", \"lentils\").\n.decl Answer()\nAnswer() :- !Ate(\"Jean Harris's victim\", \"lentils\").\n.output Answer", "completions": [".decl Ate(Person:symbol, Food:symbol)\nAte(\"Jean Harris's victim\", \"lentils\").\n.decl Answer()\nAnswer() :- !Ate(\"Jean Harris's victim\", \"lentils\").\n.output Answer"]}
{"id": 2033, "answer": true, "completion": ".decl Sold(Person:symbol, Item:symbol, Price:float)\nSold(\"John\", \"Creative Commons License for The Birth of Venus\", 100).\n.decl Has_value(Item:symbol, Value:float)\nHas_value(\"The Birth of Venus\", 1000000).\n.decl Answer()\nAnswer() :- Sold(person, item, price), Has_value(item, value), price < value/10.\n.output Answer", "completions": [".decl Sold(Person:symbol, Item:symbol, Price:float)\nSold(\"John\", \"Creative Commons License for The Birth of Venus\", 100).\n.decl Has_value(Item:symbol, Value:float)\nHas_value(\"The Birth of Venus\", 1000000).\n.decl Answer()\nAnswer() :- Sold(person, item, price), Has_value(item, value), price < value/10.\n.output Answer"]}
{"id": 2034, "answer": false, "completion": ".decl Considers(Person:symbol, Candidate:symbol, Opinion:symbol)\nConsiders(\"United States Air Force\", \"Han Solo\", \"good\").\n.decl Is_fictional(Character:symbol)\nIs_fictional(\"Han Solo\").\n.decl Answer()\nAnswer() :- Considers(\"United States Air Force\", candidate, opinion), Is_fictional(candidate), opinion = \"bad\".\n.output Answer", "completions": [".decl Considers(Person:symbol, Candidate:symbol, Opinion:symbol)\nConsiders(\"United States Air Force\", \"Han Solo\", \"good\").\n.decl Is_fictional(Character:symbol)\nIs_fictional(\"Han Solo\").\n.decl Answer()\nAnswer() :- Considers(\"United States Air Force\", candidate, opinion), Is_fictional(candidate), opinion = \"bad\".\n.output Answer"]}
{"id": 2035, "answer": false, "completion": ".decl Attends(Person:symbol, Event:symbol)\nAttends(\"Shaggy\", \"first name roll call\").\nAttends(\"Orville Redenbacher\", \"first name roll call\").\n.decl Answer()\nAnswer() :- Attends(\"Shaggy\", event), Attends(\"Orville Redenbacher\", event).\n.output Answer", "completions": [".decl Attends(Person:symbol, Event:symbol)\nAttends(\"Shaggy\", \"first name roll call\").\nAttends(\"Orville Redenbacher\", \"first name roll call\").\n.decl Answer()\nAnswer() :- Attends(\"Shaggy\", event), Attends(\"Orville Redenbacher\", event).\n.output Answer"]}
{"id": 2036, "answer": true, "completion": ".decl Invented_by(Product:symbol, Inventor:symbol)\nInvented_by(\"iPhone\", \"Steve Jobs\").\n.decl Started_era(Era:symbol, Start_year:float)\nStarted_era(\"Scientific Revolution\", 1543).\n.decl Answer()\nAnswer() :- Invented_by(\"iPhone\", \"Steve Jobs\"), Started_era(\"Scientific Revolution\", start_year), start_year < 2007.\n.output Answer", "completions": [".decl Invented_by(Product:symbol, Inventor:symbol)\nInvented_by(\"iPhone\", \"Steve Jobs\").\n.decl Started_era(Era:symbol, Start_year:float)\nStarted_era(\"Scientific Revolution\", 1543).\n.decl Answer()\nAnswer() :- Invented_by(\"iPhone\", \"Steve Jobs\"), Started_era(\"Scientific Revolution\", start_year), start_year < 2007.\n.output Answer"]}
{"id": 2037, "answer": false, "completion": ".decl Associated_with(Event:symbol, Location:symbol)\nAssociated_with(\"gladiators\", \"Colosseum\").\n.decl Answer()\nAnswer() :- Associated_with(\"gladiators\", location).\n.output Answer", "completions": [".decl Associated_with(Event:symbol, Location:symbol)\nAssociated_with(\"gladiators\", \"Colosseum\").\n.decl Answer()\nAnswer() :- Associated_with(\"gladiators\", location).\n.output Answer"]}
{"id": 2038, "answer": true, "completion": ".decl Had_mental_disorder(Person:symbol, Disorder:symbol)\nHad_mental_disorder(\"Vincent van Gogh\", \"bipolar disorder\").\nHad_mental_disorder(\"Vincent van Gogh\", \"depression\").\n.decl Answer()\nAnswer() :- Had_mental_disorder(\"Vincent van Gogh\", \"mental disorder\").\n.output Answer", "completions": [".decl Had_mental_disorder(Person:symbol, Disorder:symbol)\nHad_mental_disorder(\"Vincent van Gogh\", \"bipolar disorder\").\nHad_mental_disorder(\"Vincent van Gogh\", \"depression\").\n.decl Answer()\nAnswer() :- Had_mental_disorder(\"Vincent van Gogh\", \"mental disorder\").\n.output Answer"]}
{"id": 2039, "answer": false, "completion": ".decl Celebrates(Event:symbol, Date:symbol)\nCelebrates(\"New Year's Day\", \"January 1\").\nCelebrates(\"day before New Year's Day\", \"December 31\").\n.decl Belongs_to_religion(Event:symbol, Religion:symbol)\nBelongs_to_religion(\"New Year's Day\", \"secular\").\nBelongs_to_religion(\"day before New Year's Day\", \"secular\").\nBelongs_to_religion(\"New Year's Day\", \"Jehovah's Witnesses\").\n.decl Answer()\nAnswer() :- Celebrates(\"day before New Year's Day\", date), Belongs_to_religion(\"day before New Year's Day\", religion), Belongs_to_religion(\"New Year's Day\", religion), Celebrates(\"New Year's Day\", date2), date < date2.\n.output Answer", "completions": [".decl Celebrates(Event:symbol, Date:symbol)\nCelebrates(\"New Year's Day\", \"January 1\").\nCelebrates(\"day before New Year's Day\", \"December 31\").\n.decl Belongs_to_religion(Event:symbol, Religion:symbol)\nBelongs_to_religion(\"New Year's Day\", \"secular\").\nBelongs_to_religion(\"day before New Year's Day\", \"secular\").\nBelongs_to_religion(\"New Year's Day\", \"Jehovah's Witnesses\").\n.decl Answer()\nAnswer() :- Celebrates(\"day before New Year's Day\", date), Belongs_to_religion(\"day before New Year's Day\", religion), Belongs_to_religion(\"New Year's Day\", religion), Celebrates(\"New Year's Day\", date2), date < date2.\n.output Answer"]}
{"id": 2040, "answer": true, "completion": ".decl Is_composed_of(Object:symbol, Material:symbol)\nIs_composed_of(\"Saturn's rings\", \"ice particles\").\n.decl Answer()\nAnswer() :- !Is_composed_of(\"Saturn's rings\", \"solid material\").\n.output Answer", "completions": [".decl Is_composed_of(Object:symbol, Material:symbol)\nIs_composed_of(\"Saturn's rings\", \"ice particles\").\n.decl Answer()\nAnswer() :- !Is_composed_of(\"Saturn's rings\", \"solid material\").\n.output Answer"]}
{"id": 2041, "answer": true, "completion": ".decl Needs_water(Task:symbol, Water_type:symbol)\nNeeds_water(\"peeling tomato\", \"hot\").\nNeeds_water(\"peeling tomato\", \"cold\").\n.decl Answer()\nAnswer() :- Needs_water(\"peeling tomato\", \"hot\"), Needs_water(\"peeling tomato\", \"cold\").\n.output Answer", "completions": [".decl Needs_water(Task:symbol, Water_type:symbol)\nNeeds_water(\"peeling tomato\", \"hot\").\nNeeds_water(\"peeling tomato\", \"cold\").\n.decl Answer()\nAnswer() :- Needs_water(\"peeling tomato\", \"hot\"), Needs_water(\"peeling tomato\", \"cold\").\n.output Answer"]}
{"id": 2042, "answer": false, "completion": ".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"John\", \"Dolce & Gabbana suit\").\n.decl Related(Person1:symbol, Person2:symbol)\nRelated(\"John\", \"Amish cousin\").\n.decl Answer()\nAnswer() :- Wears(\"John\", clothing), Related(\"John\", relative), !Wears(relative, clothing).\n.output Answer", "completions": [".decl Wears(Person:symbol, Clothing:symbol)\nWears(\"John\", \"Dolce & Gabbana suit\").\n.decl Related(Person1:symbol, Person2:symbol)\nRelated(\"John\", \"Amish cousin\").\n.decl Answer()\nAnswer() :- Wears(\"John\", clothing), Related(\"John\", relative), !Wears(relative, clothing).\n.output Answer"]}
{"id": 2043, "answer": false, "completion": ".decl Focuses_on(Game:symbol, Character:symbol)\nFocuses_on(\"Super Mario\", \"Mario\").\nFocuses_on(\"Super Mario\", \"Luigi\").\n.decl Answer()\nAnswer() :- Focuses_on(\"Super Mario\", \"Mario\"), !Focuses_on(\"Super Mario\", \"Luigi\").\n.output Answer", "completions": [".decl Focuses_on(Game:symbol, Character:symbol)\nFocuses_on(\"Super Mario\", \"Mario\").\nFocuses_on(\"Super Mario\", \"Luigi\").\n.decl Answer()\nAnswer() :- Focuses_on(\"Super Mario\", \"Mario\"), !Focuses_on(\"Super Mario\", \"Luigi\").\n.output Answer"]}
{"id": 2044, "answer": false, "completion": ".decl Comes_after(Wonder1:symbol, Wonder2:symbol)\nComes_after(\"Great Pyramid of Giza\", \"Hanging Gardens of Babylon\").\nComes_after(\"Hanging Gardens of Babylon\", \"Temple of Artemis\").\nComes_after(\"Temple of Artemis\", \"Statue of Zeus at Olympia\").\nComes_after(\"Statue of Zeus at Olympia\", \"Mausoleum at Halicarnassus\").\nComes_after(\"Mausoleum at Halicarnassus\", \"Colossus of Rhodes\").\nComes_after(\"Colossus of Rhodes\", \"Lighthouse of Alexandria\").\n.decl Answer()\nAnswer() :- Comes_after(wonder1, \"Great Pyramid of Giza\"), wonder1 != \"Great Pyramid of Giza\", !Comes_after(wonder2, wonder1).\n.output Answer", "completions": [".decl Comes_after(Wonder1:symbol, Wonder2:symbol)\nComes_after(\"Great Pyramid of Giza\", \"Hanging Gardens of Babylon\").\nComes_after(\"Hanging Gardens of Babylon\", \"Temple of Artemis\").\nComes_after(\"Temple of Artemis\", \"Statue of Zeus at Olympia\").\nComes_after(\"Statue of Zeus at Olympia\", \"Mausoleum at Halicarnassus\").\nComes_after(\"Mausoleum at Halicarnassus\", \"Colossus of Rhodes\").\nComes_after(\"Colossus of Rhodes\", \"Lighthouse of Alexandria\").\n.decl Answer()\nAnswer() :- Comes_after(wonder1, \"Great Pyramid of Giza\"), wonder1 != \"Great Pyramid of Giza\", !Comes_after(wonder2, wonder1).\n.output Answer"]}
{"id": 2045, "answer": true, "completion": ".decl Baptized(Person:symbol)\nBaptized(\"John the Baptist\").\n.decl Conquered_by(Army:symbol, Conqueror:symbol)\nConquered_by(\"Persian Empire\", \"Alexander the Great\").\n.decl Answer()\nAnswer() :- Conquered_by(army, \"Alexander the Great\"), !Baptized(\"John the Baptist\").\n.output Answer", "completions": [".decl Baptized(Person:symbol)\nBaptized(\"John the Baptist\").\n.decl Conquered_by(Army:symbol, Conqueror:symbol)\nConquered_by(\"Persian Empire\", \"Alexander the Great\").\n.decl Answer()\nAnswer() :- Conquered_by(army, \"Alexander the Great\"), !Baptized(\"John the Baptist\").\n.output Answer"]}
{"id": 2046, "answer": false, "completion": ".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Answer()\nAnswer() :- Has_temperature(\"Venus\", temperature), temperature >= 273.\n.output Answer", "completions": [".decl Has_temperature(Planet:symbol, Temperature:float)\nHas_temperature(\"Venus\", 462).\n.decl Answer()\nAnswer() :- Has_temperature(\"Venus\", temperature), temperature >= 273.\n.output Answer"]}
{"id": 2047, "answer": true, "completion": ".decl Height(Person:symbol, Height:float)\nHeight(\"Benito Mussolini\", 1.65).\n.decl Skill(Person:symbol, Skill:float)\nSkill(\"Benito Mussolini\", 0.1).\n.decl Answer()\nAnswer() :- Height(\"Benito Mussolini\", height), Skill(\"Benito Mussolini\", skill), height > 1.8, skill > 0.5.\n.output Answer", "completions": [".decl Height(Person:symbol, Height:float)\nHeight(\"Benito Mussolini\", 1.65).\n.decl Skill(Person:symbol, Skill:float)\nSkill(\"Benito Mussolini\", 0.1).\n.decl Answer()\nAnswer() :- Height(\"Benito Mussolini\", height), Skill(\"Benito Mussolini\", skill), height > 1.8, skill > 0.5.\n.output Answer"]}
{"id": 2048, "answer": false, "completion": ".decl Height(Person:symbol, Height:float)\nHeight(\"LeBron James\", 2.03).\nHeight(\"Yuri Gagarin\", 1.57).\n.decl Answer()\nAnswer() :- Height(\"LeBron James\", height1), Height(\"Yuri Gagarin\", height2), height1 > height2.\n.output Answer", "completions": [".decl Height(Person:symbol, Height:float)\nHeight(\"LeBron James\", 2.03).\nHeight(\"Yuri Gagarin\", 1.57).\n.decl Answer()\nAnswer() :- Height(\"LeBron James\", height1), Height(\"Yuri Gagarin\", height2), height1 > height2.\n.output Answer"]}
{"id": 2049, "answer": false, "completion": ".decl Resting_place(Person:symbol, Place:symbol)\nResting_place(\"Carl Linnaeus\", \"Uppsala Cathedral\").\nResting_place(\"Michael Jackson\", \"Forest Lawn Memorial Park\").\n.decl Answer()\nAnswer() :- Resting_place(\"Carl Linnaeus\", place), Resting_place(\"Michael Jackson\", place).\n.output Answer", "completions": [".decl Resting_place(Person:symbol, Place:symbol)\nResting_place(\"Carl Linnaeus\", \"Uppsala Cathedral\").\nResting_place(\"Michael Jackson\", \"Forest Lawn Memorial Park\").\n.decl Answer()\nAnswer() :- Resting_place(\"Carl Linnaeus\", place), Resting_place(\"Michael Jackson\", place).\n.output Answer"]}
{"id": 2050, "answer": false, "completion": ".decl Requires(Job:symbol, Industry:symbol)\nRequires(\"cooper\", \"beverage industry\").\n.decl Answer()\nAnswer() :- Requires(job, \"beverage industry\"), job = \"cooper\".\n.output Answer", "completions": [".decl Requires(Job:symbol, Industry:symbol)\nRequires(\"cooper\", \"beverage industry\").\n.decl Answer()\nAnswer() :- Requires(job, \"beverage industry\"), job = \"cooper\".\n.output Answer"]}
{"id": 2051, "answer": false, "completion": ".decl Descendant(Person:symbol, Ancestor:symbol)\nDescendant(\"Cesare Borgia\", \"Pope Alexander VI\").\n.decl Canonized(Person:symbol)\nCanonized(\"St. Francis Borgia\").\n.decl Answer()\nAnswer() :- Descendant(descendant, \"Pope Alexander VI\"), Descendant(descendant, ancestor), Canonized(ancestor).\n.output Answer", "completions": [".decl Descendant(Person:symbol, Ancestor:symbol)\nDescendant(\"Cesare Borgia\", \"Pope Alexander VI\").\n.decl Canonized(Person:symbol)\nCanonized(\"St. Francis Borgia\").\n.decl Answer()\nAnswer() :- Descendant(descendant, \"Pope Alexander VI\"), Descendant(descendant, ancestor), Canonized(ancestor).\n.output Answer"]}
{"id": 2052, "answer": false, "completion": ".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"French person\", \"French\").\n.decl Attends_school(Person:symbol, School:symbol)\nAttends_school(\"student from Smithtown's Cleary School\", \"Cleary School\").\n.decl Teaches_language(School:symbol, Language:symbol)\nTeaches_language(\"Cleary School\", \"American Sign Language\").\n.decl Answer()\nAnswer() :- Attends_school(student, \"Cleary School\"), Speaks_language(\"French person\", language), Teaches_language(\"Cleary School\", language).\n.output Answer", "completions": [".decl Speaks_language(Person:symbol, Language:symbol)\nSpeaks_language(\"French person\", \"French\").\n.decl Attends_school(Person:symbol, School:symbol)\nAttends_school(\"student from Smithtown's Cleary School\", \"Cleary School\").\n.decl Teaches_language(School:symbol, Language:symbol)\nTeaches_language(\"Cleary School\", \"American Sign Language\").\n.decl Answer()\nAnswer() :- Attends_school(student, \"Cleary School\"), Speaks_language(\"French person\", language), Teaches_language(\"Cleary School\", language).\n.output Answer"]}
{"id": 2053, "answer": false, "completion": ".decl Associated_with(Movie:symbol, Animal:symbol)\nAssociated_with(\"Homeward Bound\", \"golden retriever\").\nAssociated_with(\"Homeward Bound\", \"bulldog\").\nAssociated_with(\"Homeward Bound\", \"Siamese cat\").\n.decl Answer()\nAnswer() :- Associated_with(\"Homeward Bound\", animal), animal = \"greyhound\".\n.output Answer", "completions": [".decl Associated_with(Movie:symbol, Animal:symbol)\nAssociated_with(\"Homeward Bound\", \"golden retriever\").\nAssociated_with(\"Homeward Bound\", \"bulldog\").\nAssociated_with(\"Homeward Bound\", \"Siamese cat\").\n.decl Answer()\nAnswer() :- Associated_with(\"Homeward Bound\", animal), animal = \"greyhound\".\n.output Answer"]}
{"id": 2054, "answer": false, "completion": ".decl Wrote_about(Author:symbol, Topic:symbol)\nWrote_about(\"Terry Pratchett\", \"fantasy\").\nWrote_about(\"Richard Feynman\", \"quantum mechanics\").\n.decl Answer()\nAnswer() :- Wrote_about(\"Terry Pratchett\", topic1), Wrote_about(\"Richard Feynman\", topic2), topic1 != topic2.\n.output Answer", "completions": [".decl Wrote_about(Author:symbol, Topic:symbol)\nWrote_about(\"Terry Pratchett\", \"fantasy\").\nWrote_about(\"Richard Feynman\", \"quantum mechanics\").\n.decl Answer()\nAnswer() :- Wrote_about(\"Terry Pratchett\", topic1), Wrote_about(\"Richard Feynman\", topic2), topic1 != topic2.\n.output Answer"]}
{"id": 2055, "answer": true, "completion": ".decl Has_majority_religion(Country:symbol, Religion:symbol)\nHas_majority_religion(\"Cyprus\", \"Christianity\").\n.decl Discriminates_against(Religion:symbol, Target:symbol)\nDiscriminates_against(\"Islam\", \"Muslims\").\n.decl Answer()\nAnswer() :- Has_majority_religion(\"Cyprus\", religion), Discriminates_against(\"Islam\", target), religion != target.\n.output Answer", "completions": [".decl Has_majority_religion(Country:symbol, Religion:symbol)\nHas_majority_religion(\"Cyprus\", \"Christianity\").\n.decl Discriminates_against(Religion:symbol, Target:symbol)\nDiscriminates_against(\"Islam\", \"Muslims\").\n.decl Answer()\nAnswer() :- Has_majority_religion(\"Cyprus\", religion), Discriminates_against(\"Islam\", target), religion != target.\n.output Answer"]}
{"id": 2056, "answer": false, "completion": ".decl Supports(Politician:symbol, Party:symbol)\nSupports(\"John Key\", \"National Party\").\n.decl Fan_of(Team:symbol, Person:symbol)\nFan_of(\"Botany Swarm\", \"Alice\").\n.decl Answer()\nAnswer() :- Fan_of(team, \"Alice\"), Supports(\"John Key\", party), party = \"National Party\".\n.output Answer", "completions": [".decl Supports(Politician:symbol, Party:symbol)\nSupports(\"John Key\", \"National Party\").\n.decl Fan_of(Team:symbol, Person:symbol)\nFan_of(\"Botany Swarm\", \"Alice\").\n.decl Answer()\nAnswer() :- Fan_of(team, \"Alice\"), Supports(\"John Key\", party), party = \"National Party\".\n.output Answer"]}
{"id": 2057, "answer": false, "completion": ".decl Held_concert(Artist:symbol, Venue:symbol)\nHeld_concert(\"Maroon 5\", \"Madison Square Garden\").\n.decl Located_in(Venue:symbol, Location:symbol)\nLocated_in(\"Madison Square Garden\", \"New York City\").\nLocated_in(\"Roman Colosseum\", \"Rome\").\n.decl Answer()\nAnswer() :- Held_concert(\"Maroon 5\", venue), Located_in(venue, location), location = \"Rome\".\n.output Answer", "completions": [".decl Held_concert(Artist:symbol, Venue:symbol)\nHeld_concert(\"Maroon 5\", \"Madison Square Garden\").\n.decl Located_in(Venue:symbol, Location:symbol)\nLocated_in(\"Madison Square Garden\", \"New York City\").\nLocated_in(\"Roman Colosseum\", \"Rome\").\n.decl Answer()\nAnswer() :- Held_concert(\"Maroon 5\", venue), Located_in(venue, location), location = \"Rome\".\n.output Answer"]}
{"id": 2058, "answer": true, "completion": ".decl Eats(Food:symbol, Animal:symbol)\nEats(\"cookie\", \"Cookie Monster\").\nEats(\"meat\", \"caveman\").\n.decl Answer()\nAnswer() :- Eats(food, \"Cookie Monster\"), Eats(food, \"caveman\").\n.output Answer", "completions": [".decl Eats(Food:symbol, Animal:symbol)\nEats(\"cookie\", \"Cookie Monster\").\nEats(\"meat\", \"caveman\").\n.decl Answer()\nAnswer() :- Eats(food, \"Cookie Monster\"), Eats(food, \"caveman\").\n.output Answer"]}
{"id": 2059, "answer": true, "completion": ".decl Seen_at(Event:symbol, Location:symbol)\nSeen_at(\"storks\", \"baby shower\").\n.decl Answer()\nAnswer() :- Seen_at(\"storks\", location).\n.output Answer", "completions": [".decl Seen_at(Event:symbol, Location:symbol)\nSeen_at(\"storks\", \"baby shower\").\n.decl Answer()\nAnswer() :- Seen_at(\"storks\", location).\n.output Answer"]}
{"id": 2060, "answer": true, "completion": ".decl Appears_in(Animal:symbol, Production:symbol)\nAppears_in(\"lion\", \"The Lion King\").\nAppears_in(\"cat\", \"Cats\").\n.decl Answer()\nAnswer() :- Appears_in(\"hyena\", production).\n.output Answer", "completions": [".decl Appears_in(Animal:symbol, Production:symbol)\nAppears_in(\"lion\", \"The Lion King\").\nAppears_in(\"cat\", \"Cats\").\n.decl Answer()\nAnswer() :- Appears_in(\"hyena\", production).\n.output Answer"]}
{"id": 2061, "answer": false, "completion": ".decl Founded_by(Person:symbol, University:symbol)\nFounded_by(\"Millard Fillmore\", \"University at Buffalo\").\nFounded_by(\"Andrew Mellon\", \"University of Pittsburgh\").\n.decl Answer()\nAnswer() :- Founded_by(\"Millard Fillmore\", university), university != \"University of Pittsburgh\".\n.output Answer", "completions": [".decl Founded_by(Person:symbol, University:symbol)\nFounded_by(\"Millard Fillmore\", \"University at Buffalo\").\nFounded_by(\"Andrew Mellon\", \"University of Pittsburgh\").\n.decl Answer()\nAnswer() :- Founded_by(\"Millard Fillmore\", university), university != \"University of Pittsburgh\".\n.output Answer"]}
{"id": 2062, "answer": false, "completion": ".decl CO2_emissions(Religion:symbol, CO2:float)\nCO2_emissions(\"Christianity\", 100).\nCO2_emissions(\"Satanism\", 200).\n.decl Answer()\nAnswer() :- CO2_emissions(\"Christianity\", co21), CO2_emissions(\"Satanism\", co22), co21 < co22.\n.output Answer", "completions": [".decl CO2_emissions(Religion:symbol, CO2:float)\nCO2_emissions(\"Christianity\", 100).\nCO2_emissions(\"Satanism\", 200).\n.decl Answer()\nAnswer() :- CO2_emissions(\"Christianity\", co21), CO2_emissions(\"Satanism\", co22), co21 < co22.\n.output Answer"]}
{"id": 2063, "answer": false, "completion": ".decl Role_model(Person:symbol, Good_role_model:symbol)\nRole_model(\"Robert Downey Jr.\", \"no\").\n.decl Answer()\nAnswer() :- Role_model(\"Robert Downey Jr.\", \"yes\"), !.\nAnswer() :- Role_model(\"Robert Downey Jr.\", \"no\"), !.\nAnswer() :- Answer() = \"unknown\".\n.output Answer", "completions": [".decl Role_model(Person:symbol, Good_role_model:symbol)\nRole_model(\"Robert Downey Jr.\", \"no\").\n.decl Answer()\nAnswer() :- Role_model(\"Robert Downey Jr.\", \"yes\"), !.\nAnswer() :- Role_model(\"Robert Downey Jr.\", \"no\"), !.\nAnswer() :- Answer() = \"unknown\".\n.output Answer"]}
{"id": 2064, "answer": true, "completion": ".decl Can_transport(Object:symbol)\nCan_transport(\"coin\") :- Has_density(\"coin\", density), density < 13.5.\nCan_transport(\"mercury\") :- Has_density(\"mercury\", density), density > 13.5.\n.decl Answer()\nAnswer() :- Can_transport(\"coin\"), Can_transport(\"mercury\").\n.output Answer", "completions": [".decl Can_transport(Object:symbol)\nCan_transport(\"coin\") :- Has_density(\"coin\", density), density < 13.5.\nCan_transport(\"mercury\") :- Has_density(\"mercury\", density), density > 13.5.\n.decl Answer()\nAnswer() :- Can_transport(\"coin\"), Can_transport(\"mercury\").\n.output Answer"]}
{"id": 2065, "answer": true, "completion": ".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Newt Gingrich\", \"Newt\").\n.decl Is_type_of_animal(Animal:symbol, Type:symbol)\nIs_type_of_animal(\"Newt\", \"amphibian\").\nIs_type_of_animal(\"snake\", \"reptile\").\nIs_type_of_animal(\"lizard\", \"reptile\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Newt Gingrich\", \"Newt\"), Is_type_of_animal(\"Newt\", type), Is_type_of_animal(animal, type).\n.output Answer", "completions": [".decl Has_nickname(Person:symbol, Nickname:symbol)\nHas_nickname(\"Newt Gingrich\", \"Newt\").\n.decl Is_type_of_animal(Animal:symbol, Type:symbol)\nIs_type_of_animal(\"Newt\", \"amphibian\").\nIs_type_of_animal(\"snake\", \"reptile\").\nIs_type_of_animal(\"lizard\", \"reptile\").\n.decl Answer()\nAnswer() :- Has_nickname(\"Newt Gingrich\", \"Newt\"), Is_type_of_animal(\"Newt\", type), Is_type_of_animal(animal, type).\n.output Answer"]}
{"id": 2066, "answer": true, "completion": ".decl Commits_act(Person:symbol, Act:symbol)\nCommits_act(\"Christopher Columbus\", \"disobeying parents\").\n.decl Commandment_violation(Act:symbol, Commandment:symbol)\nCommandment_violation(\"disobeying parents\", \"fifth commandment\").\n.decl Answer()\nAnswer() :- Commits_act(\"Christopher Columbus\", act), Commandment_violation(act, \"fifth commandment\").\n.output Answer", "completions": [".decl Commits_act(Person:symbol, Act:symbol)\nCommits_act(\"Christopher Columbus\", \"disobeying parents\").\n.decl Commandment_violation(Act:symbol, Commandment:symbol)\nCommandment_violation(\"disobeying parents\", \"fifth commandment\").\n.decl Answer()\nAnswer() :- Commits_act(\"Christopher Columbus\", act), Commandment_violation(act, \"fifth commandment\").\n.output Answer"]}
{"id": 2067, "answer": false, "completion": ".decl Worth_in_dollars(Coin:symbol, Worth:float)\nWorth_in_dollars(\"Reconstruction era coin\", 10).\n.decl Costs_in_dollars(Item:symbol, Cost:float)\nCosts_in_dollars(\"DJI Mavic Pro Drone\", 999).\n.decl Answer()\nAnswer() :- Worth_in_dollars(\"Reconstruction era coin\", worth), Costs_in_dollars(\"DJI Mavic Pro Drone\", cost), worth >= cost.\n.output Answer", "completions": [".decl Worth_in_dollars(Coin:symbol, Worth:float)\nWorth_in_dollars(\"Reconstruction era coin\", 10).\n.decl Costs_in_dollars(Item:symbol, Cost:float)\nCosts_in_dollars(\"DJI Mavic Pro Drone\", 999).\n.decl Answer()\nAnswer() :- Worth_in_dollars(\"Reconstruction era coin\", worth), Costs_in_dollars(\"DJI Mavic Pro Drone\", cost), worth >= cost.\n.output Answer"]}
{"id": 2068, "answer": true, "completion": ".decl Has_age(Substance:symbol, Age:float)\nHas_age(\"chlorine water\", 7).\n.decl Is_safe_to_drink(Substance:symbol)\n!Is_safe_to_drink(\"chlorine water\").\n.decl Answer()\nAnswer() :- Has_age(\"chlorine water\", age), age <= 1, Is_safe_to_drink(\"chlorine water\").\n.output Answer", "completions": [".decl Has_age(Substance:symbol, Age:float)\nHas_age(\"chlorine water\", 7).\n.decl Is_safe_to_drink(Substance:symbol)\n!Is_safe_to_drink(\"chlorine water\").\n.decl Answer()\nAnswer() :- Has_age(\"chlorine water\", age), age <= 1, Is_safe_to_drink(\"chlorine water\").\n.output Answer"]}
{"id": 2069, "answer": false, "completion": ".decl Associated_with(Disease:symbol, Symbol:symbol)\nAssociated_with(\"breast cancer\", \"pink ribbon\").\n.decl Answer()\nAnswer() :- Associated_with(\"breast cancer\", symbol).\n.output Answer", "completions": [".decl Associated_with(Disease:symbol, Symbol:symbol)\nAssociated_with(\"breast cancer\", \"pink ribbon\").\n.decl Answer()\nAnswer() :- Associated_with(\"breast cancer\", symbol).\n.output Answer"]}
{"id": 2070, "answer": true, "completion": ".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"paraplegic\", \"paraplegia\").\n.decl Conducts(Person:symbol, Orchestra:symbol)\nConducts(\"John Williams\", \"Boston Pops Orchestra\").\n.decl Answer()\nAnswer() :- Conducts(conductor, orchestra), Has_disability(conductor, disability), disability != \"paraplegia\".\nAnswer() :- Conducts(\"paraplegic\", orchestra).\n.output Answer", "completions": [".decl Has_disability(Person:symbol, Disability:symbol)\nHas_disability(\"paraplegic\", \"paraplegia\").\n.decl Conducts(Person:symbol, Orchestra:symbol)\nConducts(\"John Williams\", \"Boston Pops Orchestra\").\n.decl Answer()\nAnswer() :- Conducts(conductor, orchestra), Has_disability(conductor, disability), disability != \"paraplegia\".\nAnswer() :- Conducts(\"paraplegic\", orchestra).\n.output Answer"]}
{"id": 2071, "answer": false, "completion": ".decl Winner(Party:symbol, Year:float)\nWinner(\"Republican\", 1980).\n.decl Margin_of_victory(Year:float, Margin:float)\nMargin_of_victory(1980, 9.74).\n.decl Answer()\nAnswer() :- Margin_of_victory(1980, margin), margin < 1, Winner(party, 1980).\n.output Answer", "completions": [".decl Winner(Party:symbol, Year:float)\nWinner(\"Republican\", 1980).\n.decl Margin_of_victory(Year:float, Margin:float)\nMargin_of_victory(1980, 9.74).\n.decl Answer()\nAnswer() :- Margin_of_victory(1980, margin), margin < 1, Winner(party, 1980).\n.output Answer"]}
{"id": 2072, "answer": false, "completion": ".decl Cures(Disease:symbol, Treatment:symbol)\nCures(\"common cold\", \"rest and fluids\").\nCures(\"flu\", \"antiviral medication\").\n.decl Answer()\nAnswer() :- Cures(\"fever\", treatment), treatment != \"listening to a cowbell\".\n.output Answer", "completions": [".decl Cures(Disease:symbol, Treatment:symbol)\nCures(\"common cold\", \"rest and fluids\").\nCures(\"flu\", \"antiviral medication\").\n.decl Answer()\nAnswer() :- Cures(\"fever\", treatment), treatment != \"listening to a cowbell\".\n.output Answer"]}
{"id": 2073, "answer": true, "completion": ".decl Can_sting_multiple(Insect:symbol)\nCan_sting_multiple(\"honey bee\").\n.decl Answer()\nAnswer() :- Can_sting_multiple(insect), !{Can_sting_multiple(insect), insect != \"honey bee\"}.\n.output Answer", "completions": [".decl Can_sting_multiple(Insect:symbol)\nCan_sting_multiple(\"honey bee\").\n.decl Answer()\nAnswer() :- Can_sting_multiple(insect), !{Can_sting_multiple(insect), insect != \"honey bee\"}.\n.output Answer"]}
{"id": 2074, "answer": false, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Bob Marley\", 11).\nHas_children(\"Kublai Khan\", 4).\n.decl Answer()\nAnswer() :- Has_children(\"Bob Marley\", n_children1), Has_children(\"Kublai Khan\", n_children2), n_children1 > n_children2.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Bob Marley\", 11).\nHas_children(\"Kublai Khan\", 4).\n.decl Answer()\nAnswer() :- Has_children(\"Bob Marley\", n_children1), Has_children(\"Kublai Khan\", n_children2), n_children1 > n_children2.\n.output Answer"]}
{"id": 2075, "answer": false, "completion": ".decl Famous(Person:symbol)\nFamous(\"Harry Houdini\").\n.decl Married(Person1:symbol, Person2:symbol)\nMarried(\"Harry Houdini\", \"Bess Houdini\").\n.decl Debunked(Person:symbol, Field:symbol)\nDebunked(\"Bess Houdini\", \"psychics\").\n.decl Answer()\nAnswer() :- Famous(\"Harry Houdini\"), Married(\"Harry Houdini\", wife), Debunked(wife, \"psychics\").\n.output Answer", "completions": [".decl Famous(Person:symbol)\nFamous(\"Harry Houdini\").\n.decl Married(Person1:symbol, Person2:symbol)\nMarried(\"Harry Houdini\", \"Bess Houdini\").\n.decl Debunked(Person:symbol, Field:symbol)\nDebunked(\"Bess Houdini\", \"psychics\").\n.decl Answer()\nAnswer() :- Famous(\"Harry Houdini\"), Married(\"Harry Houdini\", wife), Debunked(wife, \"psychics\").\n.output Answer"]}
{"id": 2076, "answer": true, "completion": ".decl Guest_starred(Person:symbol, TV_show:symbol)\nGuest_starred(\"Joan Crawford\", \"The Lucy Show\").\nGuest_starred(\"Joan Crawford\", \"The Secret Storm\").\nGuest_starred(\"Joan Crawford\", \"The Hollywood Palace\").\nGuest_starred(\"Joan Crawford\", \"Night Gallery\").\n.decl Answer()\nAnswer() :- Guest_starred(\"Joan Crawford\", TV_show), TV_show != \"JAG\".\n.output Answer", "completions": [".decl Guest_starred(Person:symbol, TV_show:symbol)\nGuest_starred(\"Joan Crawford\", \"The Lucy Show\").\nGuest_starred(\"Joan Crawford\", \"The Secret Storm\").\nGuest_starred(\"Joan Crawford\", \"The Hollywood Palace\").\nGuest_starred(\"Joan Crawford\", \"Night Gallery\").\n.decl Answer()\nAnswer() :- Guest_starred(\"Joan Crawford\", TV_show), TV_show != \"JAG\".\n.output Answer"]}
{"id": 2077, "answer": false, "completion": ".decl Causes_effect(Remedy:symbol, Effect:symbol)\nCauses_effect(\"silver nitrate\", \"blue skin\").\nCauses_effect(\"colloidal silver\", \"blue skin\").\n.decl Answer()\nAnswer() :- Causes_effect(remedy, \"blue skin\").\n.output Answer", "completions": [".decl Causes_effect(Remedy:symbol, Effect:symbol)\nCauses_effect(\"silver nitrate\", \"blue skin\").\nCauses_effect(\"colloidal silver\", \"blue skin\").\n.decl Answer()\nAnswer() :- Causes_effect(remedy, \"blue skin\").\n.output Answer"]}
{"id": 2078, "answer": true, "completion": ".decl Prevents(Athlete:symbol, Country:symbol)\nPrevents(\"Jesse Owens\", \"USA\").\nPrevents(\"Luz Long\", \"Germany\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Berlin Wall construction\", 1961).\nHappens_in_year(\"Summer Olympics\", 1936).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Berlin Wall construction\", year1), Happens_in_year(\"Summer Olympics\", year2), year1 > year2, Prevents(athlete, country).\n.output Answer", "completions": [".decl Prevents(Athlete:symbol, Country:symbol)\nPrevents(\"Jesse Owens\", \"USA\").\nPrevents(\"Luz Long\", \"Germany\").\n.decl Happens_in_year(Event:symbol, Year:float)\nHappens_in_year(\"Berlin Wall construction\", 1961).\nHappens_in_year(\"Summer Olympics\", 1936).\n.decl Answer()\nAnswer() :- Happens_in_year(\"Berlin Wall construction\", year1), Happens_in_year(\"Summer Olympics\", year2), year1 > year2, Prevents(athlete, country).\n.output Answer"]}
{"id": 2079, "answer": true, "completion": ".decl Shown_on_flight(Movie:symbol, Origin:symbol, Destination:symbol)\nShown_on_flight(\"Batman (1989 film)\", \"New York\", \"Los Angeles\").\nShown_on_flight(\"Batman (1989 film)\", \"Los Angeles\", \"Kansas City\").\n.decl Answer()\nAnswer() :- Shown_on_flight(\"Batman (1989 film)\", \"New York\", destination), Shown_on_flight(\"Batman (1989 film)\", origin, \"Kansas City\").\n.output Answer", "completions": [".decl Shown_on_flight(Movie:symbol, Origin:symbol, Destination:symbol)\nShown_on_flight(\"Batman (1989 film)\", \"New York\", \"Los Angeles\").\nShown_on_flight(\"Batman (1989 film)\", \"Los Angeles\", \"Kansas City\").\n.decl Answer()\nAnswer() :- Shown_on_flight(\"Batman (1989 film)\", \"New York\", destination), Shown_on_flight(\"Batman (1989 film)\", origin, \"Kansas City\").\n.output Answer"]}
{"id": 2080, "answer": true, "completion": ".decl Killed_by(Person:symbol, N_victims:float)\nKilled_by(\"Don King\", 2).\nKilled_by(\"Charles Manson\", 0).\n.decl Answer()\nAnswer() :- Killed_by(\"Don King\", n_victims1), Killed_by(\"Charles Manson\", n_victims2), n_victims1 > n_victims2, n_victims2 = 0, year = 1971.\n.output Answer", "completions": [".decl Killed_by(Person:symbol, N_victims:float)\nKilled_by(\"Don King\", 2).\nKilled_by(\"Charles Manson\", 0).\n.decl Answer()\nAnswer() :- Killed_by(\"Don King\", n_victims1), Killed_by(\"Charles Manson\", n_victims2), n_victims1 > n_victims2, n_victims2 = 0, year = 1971.\n.output Answer"]}
{"id": 2081, "answer": false, "completion": ".decl Causes(Disease:symbol, Cause:symbol)\nCauses(\"Black Death\", \"bacteria\").\n.decl Has_property(Organism:symbol, Property:symbol)\nHas_property(\"amoebas\", \"single-celled\").\n.decl Answer()\nAnswer() :- Causes(\"Black Death\", cause), Has_property(cause, \"bacteria\").\nAnswer() :- Causes(\"Black Death\", cause), Causes(cause2, cause), Has_property(cause2, \"amoebas\").\n.output Answer", "completions": [".decl Causes(Disease:symbol, Cause:symbol)\nCauses(\"Black Death\", \"bacteria\").\n.decl Has_property(Organism:symbol, Property:symbol)\nHas_property(\"amoebas\", \"single-celled\").\n.decl Answer()\nAnswer() :- Causes(\"Black Death\", cause), Has_property(cause, \"bacteria\").\nAnswer() :- Causes(\"Black Death\", cause), Causes(cause2, cause), Has_property(cause2, \"amoebas\").\n.output Answer"]}
{"id": 2082, "answer": false, "completion": ".decl Has_heritage(Person:symbol, Heritage:symbol)\nHas_heritage(\"Ludacris\", \"African American\").\nHas_heritage(\"Ludacris\", \"English\").\nHas_heritage(\"Ludacris\", \"Native American\").\nHas_heritage(\"Ludacris\", \"Scottish\").\nHas_heritage(\"Ludacris\", \"Sierra Leonean\").\nHas_heritage(\"Ludacris\", \"Welsh\").\n.decl Answer()\nAnswer() :- Has_heritage(\"Ludacris\", \"Greek\").\n.output Answer", "completions": [".decl Has_heritage(Person:symbol, Heritage:symbol)\nHas_heritage(\"Ludacris\", \"African American\").\nHas_heritage(\"Ludacris\", \"English\").\nHas_heritage(\"Ludacris\", \"Native American\").\nHas_heritage(\"Ludacris\", \"Scottish\").\nHas_heritage(\"Ludacris\", \"Sierra Leonean\").\nHas_heritage(\"Ludacris\", \"Welsh\").\n.decl Answer()\nAnswer() :- Has_heritage(\"Ludacris\", \"Greek\").\n.output Answer"]}
{"id": 2083, "answer": false, "completion": ".decl Team_in_league(Team:symbol, League:symbol)\nTeam_in_league(\"Montreal Canadiens\", \"National Hockey League\").\nTeam_in_league(\"Toronto Maple Leafs\", \"National Hockey League\").\nTeam_in_league(\"New York Rangers\", \"National Hockey League\").\nTeam_in_league(\"Boston Bruins\", \"National Hockey League\").\nTeam_in_league(\"Vancouver Canucks\", \"National Hockey League\").\nTeam_in_league(\"Edmonton Oilers\", \"National Hockey League\").\n.decl Answer()\nAnswer() :- Team_in_league(team, \"National Hockey League\"), team(\"Canadian\"), !Team_in_league(team2, \"National Hockey League\"), team2(\"American\").\n.output Answer", "completions": [".decl Team_in_league(Team:symbol, League:symbol)\nTeam_in_league(\"Montreal Canadiens\", \"National Hockey League\").\nTeam_in_league(\"Toronto Maple Leafs\", \"National Hockey League\").\nTeam_in_league(\"New York Rangers\", \"National Hockey League\").\nTeam_in_league(\"Boston Bruins\", \"National Hockey League\").\nTeam_in_league(\"Vancouver Canucks\", \"National Hockey League\").\nTeam_in_league(\"Edmonton Oilers\", \"National Hockey League\").\n.decl Answer()\nAnswer() :- Team_in_league(team, \"National Hockey League\"), team(\"Canadian\"), !Team_in_league(team2, \"National Hockey League\"), team2(\"American\").\n.output Answer"]}
{"id": 2084, "answer": true, "completion": ".decl Appears_on_show(Person:symbol, Show:symbol)\nAppears_on_show(\"Pope Francis\", \"60 Minutes\").\n.decl Answer()\nAnswer() :- !Appears_on_show(\"Pope Francis\", \"Pimp My Ride\").\n.output Answer", "completions": [".decl Appears_on_show(Person:symbol, Show:symbol)\nAppears_on_show(\"Pope Francis\", \"60 Minutes\").\n.decl Answer()\nAnswer() :- !Appears_on_show(\"Pope Francis\", \"Pimp My Ride\").\n.output Answer"]}
{"id": 2085, "answer": false, "completion": ".decl Gestation_period(Animal:symbol, Period:float)\nGestation_period(\"African Elephant\", 18).\n.decl Time_between_births(Animal:symbol, Time:float)\nTime_between_births(\"African Elephant\", 3).\n.decl Answer()\nAnswer() :- Gestation_period(\"African Elephant\", period), Time_between_births(\"African Elephant\", time), time < period/12.\n.output Answer", "completions": [".decl Gestation_period(Animal:symbol, Period:float)\nGestation_period(\"African Elephant\", 18).\n.decl Time_between_births(Animal:symbol, Time:float)\nTime_between_births(\"African Elephant\", 3).\n.decl Answer()\nAnswer() :- Gestation_period(\"African Elephant\", period), Time_between_births(\"African Elephant\", time), time < period/12.\n.output Answer"]}
{"id": 2086, "answer": true, "completion": ".decl Wrote(Person:symbol, Work:symbol)\nWrote(\"William Shakespeare\", \"Hamlet\").\n.decl Used_communication(Person:symbol, Communication:symbol)\nUsed_communication(\"William Shakespeare\", \"quill and ink\").\n.decl Answer()\nAnswer() :- Wrote(\"William Shakespeare\", \"Hamlet\"), !Used_communication(\"William Shakespeare\", \"email\").\n.output Answer", "completions": [".decl Wrote(Person:symbol, Work:symbol)\nWrote(\"William Shakespeare\", \"Hamlet\").\n.decl Used_communication(Person:symbol, Communication:symbol)\nUsed_communication(\"William Shakespeare\", \"quill and ink\").\n.decl Answer()\nAnswer() :- Wrote(\"William Shakespeare\", \"Hamlet\"), !Used_communication(\"William Shakespeare\", \"email\").\n.output Answer"]}
{"id": 2087, "answer": true, "completion": ".decl Height(Object:symbol, Height:float)\nHeight(\"newborn\", 0.5).\nHeight(\"horseradish plant\", 1.5).\n.decl Answer()\nAnswer() :- Height(\"newborn\", height1), Height(\"horseradish plant\", height2), height1 < height2.\n.output Answer", "completions": [".decl Height(Object:symbol, Height:float)\nHeight(\"newborn\", 0.5).\nHeight(\"horseradish plant\", 1.5).\n.decl Answer()\nAnswer() :- Height(\"newborn\", height1), Height(\"horseradish plant\", height2), height1 < height2.\n.output Answer"]}
{"id": 2088, "answer": false, "completion": ".decl Cost_of_ownership(Country:symbol, Cost:float)\nCost_of_ownership(\"Cambodia\", 1000000000).\n.decl Billionaires(Name:symbol, Net_worth:float)\nBillionaires(\"Jeff Bezos\", 131000000000).\n.decl Answer()\nAnswer() :- Cost_of_ownership(\"Cambodia\", cost), Billionaires(name, net_worth), cost > net_worth.\n.output Answer", "completions": [".decl Cost_of_ownership(Country:symbol, Cost:float)\nCost_of_ownership(\"Cambodia\", 1000000000).\n.decl Billionaires(Name:symbol, Net_worth:float)\nBillionaires(\"Jeff Bezos\", 131000000000).\n.decl Answer()\nAnswer() :- Cost_of_ownership(\"Cambodia\", cost), Billionaires(name, net_worth), cost > net_worth.\n.output Answer"]}
{"id": 2089, "answer": false, "completion": ".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Holstein cow\", 1500).\nHas_weight(\"Liberty Bell\", 2080).\n.decl Answer()\nAnswer() :- Has_weight(\"Holstein cow\", weight1), Has_weight(\"Liberty Bell\", weight2), weight1 = weight2.\n.output Answer", "completions": [".decl Has_weight(Object:symbol, Weight:float)\nHas_weight(\"Holstein cow\", 1500).\nHas_weight(\"Liberty Bell\", 2080).\n.decl Answer()\nAnswer() :- Has_weight(\"Holstein cow\", weight1), Has_weight(\"Liberty Bell\", weight2), weight1 = weight2.\n.output Answer"]}
{"id": 2090, "answer": true, "completion": ".decl Ethnicity(Person:symbol, Group:symbol)\nEthnicity(\"Cleopatra\", \"Egyptian\").\nEthnicity(\"Alexander the Great\", \"Greek\").\n.decl Answer()\nAnswer() :- Ethnicity(\"Cleopatra\", group1), Ethnicity(\"Alexander the Great\", group2), group1 != group2.\n.output Answer", "completions": [".decl Ethnicity(Person:symbol, Group:symbol)\nEthnicity(\"Cleopatra\", \"Egyptian\").\nEthnicity(\"Alexander the Great\", \"Greek\").\n.decl Answer()\nAnswer() :- Ethnicity(\"Cleopatra\", group1), Ethnicity(\"Alexander the Great\", group2), group1 != group2.\n.output Answer"]}
{"id": 2091, "answer": true, "completion": ".decl Affects_healing(Food:symbol, Healing_speed:float)\nAffects_healing(\"ham\", 1.2).\n.decl Answer()\nAnswer() :- Affects_healing(\"ham\", healing_speed), healing_speed > 1.\n.output Answer", "completions": [".decl Affects_healing(Food:symbol, Healing_speed:float)\nAffects_healing(\"ham\", 1.2).\n.decl Answer()\nAnswer() :- Affects_healing(\"ham\", healing_speed), healing_speed > 1.\n.output Answer"]}
{"id": 2092, "answer": false, "completion": ".decl Spreads_to(Disease:symbol, Occupation:symbol)\nSpreads_to(\"COVID-19\", \"healthcare worker\").\nSpreads_to(\"COVID-19\", \"airline pilot\").\n.decl Answer()\nAnswer() :- Spreads_to(\"COVID-19\", occupation), occupation = \"maritime pilot\".\n.output Answer", "completions": [".decl Spreads_to(Disease:symbol, Occupation:symbol)\nSpreads_to(\"COVID-19\", \"healthcare worker\").\nSpreads_to(\"COVID-19\", \"airline pilot\").\n.decl Answer()\nAnswer() :- Spreads_to(\"COVID-19\", occupation), occupation = \"maritime pilot\".\n.output Answer"]}
{"id": 2093, "answer": true, "completion": ".decl Rank(Person:symbol, Rank:float)\nRank(\"duke\", 5).\nRank(\"Tsar\", 1).\n.decl Answer()\nAnswer() :- Rank(\"duke\", rank1), Rank(\"Tsar\", rank2), rank1 > rank2.\n.output Answer", "completions": [".decl Rank(Person:symbol, Rank:float)\nRank(\"duke\", 5).\nRank(\"Tsar\", 1).\n.decl Answer()\nAnswer() :- Rank(\"duke\", rank1), Rank(\"Tsar\", rank2), rank1 > rank2.\n.output Answer"]}
{"id": 2094, "answer": false, "completion": ".decl Is_twin(Person_A:symbol, Person_B:symbol)\nIs_twin(\"Alice\", \"Bob\").\nIs_twin(\"Charlie\", \"David\").\nIs_twin(\"Eve\", \"Frank\").\n.decl Is_same_gender(Person_A:symbol, Person_B:symbol)\nIs_same_gender(\"Alice\", \"Bob\").\nIs_same_gender(\"Charlie\", \"David\").\nIs_same_gender(\"Eve\", \"Frank\").\nIs_same_gender(\"Alice\", \"Eve\").\nIs_same_gender(\"Bob\", \"Frank\").\nIs_same_gender(\"Charlie\", \"Eve\").\n.decl Answer()\nAnswer() :- Is_twin(person1, person2), !Is_same_gender(person1, person2).\n.output Answer", "completions": [".decl Is_twin(Person_A:symbol, Person_B:symbol)\nIs_twin(\"Alice\", \"Bob\").\nIs_twin(\"Charlie\", \"David\").\nIs_twin(\"Eve\", \"Frank\").\n.decl Is_same_gender(Person_A:symbol, Person_B:symbol)\nIs_same_gender(\"Alice\", \"Bob\").\nIs_same_gender(\"Charlie\", \"David\").\nIs_same_gender(\"Eve\", \"Frank\").\nIs_same_gender(\"Alice\", \"Eve\").\nIs_same_gender(\"Bob\", \"Frank\").\nIs_same_gender(\"Charlie\", \"Eve\").\n.decl Answer()\nAnswer() :- Is_twin(person1, person2), !Is_same_gender(person1, person2).\n.output Answer"]}
{"id": 2095, "answer": true, "completion": ".decl Has_disease(Plant:symbol, Disease:symbol)\nHas_disease(\"dandelion\", \"rust\").\n.decl Answer()\nAnswer() :- Has_disease(\"dandelion\", disease), disease != \"hepatitis\".\n.output Answer", "completions": [".decl Has_disease(Plant:symbol, Disease:symbol)\nHas_disease(\"dandelion\", \"rust\").\n.decl Answer()\nAnswer() :- Has_disease(\"dandelion\", disease), disease != \"hepatitis\".\n.output Answer"]}
{"id": 2096, "answer": true, "completion": ".decl Competes_for_award(Person:symbol, Award:symbol)\nCompetes_for_award(\"Jack Black\", \"Grammy Award\").\n.decl Wins_award(Person:symbol, Award:symbol)\nWins_award(\"Bear McCreary\", \"Emmy Award\").\n.decl Answer()\nAnswer() :- Competes_for_award(\"Jack Black\", award), !Wins_award(\"Bear McCreary\", award).\n.output Answer", "completions": [".decl Competes_for_award(Person:symbol, Award:symbol)\nCompetes_for_award(\"Jack Black\", \"Grammy Award\").\n.decl Wins_award(Person:symbol, Award:symbol)\nWins_award(\"Bear McCreary\", \"Emmy Award\").\n.decl Answer()\nAnswer() :- Competes_for_award(\"Jack Black\", award), !Wins_award(\"Bear McCreary\", award).\n.output Answer"]}
{"id": 2097, "answer": false, "completion": ".decl Is_deadly_to(Group:symbol, Substance:symbol)\nIs_deadly_to(\"atopic individuals\", \"peanuts\").\nIs_deadly_to(\"atopic individuals\", \"shellfish\").\n.decl Answer()\nAnswer() :- Is_deadly_to(\"atopic individuals\", substance), substance = \"eggplant\".\n.output Answer", "completions": [".decl Is_deadly_to(Group:symbol, Substance:symbol)\nIs_deadly_to(\"atopic individuals\", \"peanuts\").\nIs_deadly_to(\"atopic individuals\", \"shellfish\").\n.decl Answer()\nAnswer() :- Is_deadly_to(\"atopic individuals\", substance), substance = \"eggplant\".\n.output Answer"]}
{"id": 2098, "answer": true, "completion": ".decl Visits(Person:symbol, Place:symbol)\nVisits(\"me\", \"New York Public Library\").\nVisits(\"me\", \"Six Flags Great Escape\").\n.decl Distance(Place1:symbol, Place2:symbol, Distance:float)\nDistance(\"New York Public Library\", \"Six Flags Great Escape\", 200).\n.decl Answer()\nAnswer() :- Visits(\"me\", place1), Visits(\"me\", place2), Distance(place1, place2, distance), distance <= 200.\n.output Answer", "completions": [".decl Visits(Person:symbol, Place:symbol)\nVisits(\"me\", \"New York Public Library\").\nVisits(\"me\", \"Six Flags Great Escape\").\n.decl Distance(Place1:symbol, Place2:symbol, Distance:float)\nDistance(\"New York Public Library\", \"Six Flags Great Escape\", 200).\n.decl Answer()\nAnswer() :- Visits(\"me\", place1), Visits(\"me\", place2), Distance(place1, place2, distance), distance <= 200.\n.output Answer"]}
{"id": 2099, "answer": true, "completion": ".decl Uses(Airline:symbol, Carrier:symbol)\nUses(\"Southwest Airlines\", \"Boeing 737\").\nUses(\"Delta Airlines\", \"Airbus A320\").\n.decl Is_bulk(Carrier:symbol)\nIs_bulk(\"Boeing 737\").\n.decl Answer()\nAnswer() :- Uses(\"Southwest Airlines\", carrier), Is_bulk(carrier).\n.output Answer", "completions": [".decl Uses(Airline:symbol, Carrier:symbol)\nUses(\"Southwest Airlines\", \"Boeing 737\").\nUses(\"Delta Airlines\", \"Airbus A320\").\n.decl Is_bulk(Carrier:symbol)\nIs_bulk(\"Boeing 737\").\n.decl Answer()\nAnswer() :- Uses(\"Southwest Airlines\", carrier), Is_bulk(carrier).\n.output Answer"]}
{"id": 2100, "answer": true, "completion": ".decl Emits_radiation(Location:symbol)\nEmits_radiation(\"Chernobyl\").\nEmits_radiation(\"Nikola Tesla's lab\").\n.decl Answer()\nAnswer() :- Emits_radiation(location), location = \"Nikola Tesla's lab\".\n.output Answer", "completions": [".decl Emits_radiation(Location:symbol)\nEmits_radiation(\"Chernobyl\").\nEmits_radiation(\"Nikola Tesla's lab\").\n.decl Answer()\nAnswer() :- Emits_radiation(location), location = \"Nikola Tesla's lab\".\n.output Answer"]}
{"id": 2101, "answer": true, "completion": ".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Steve Martin\", \"jambalaya\").\nLikes(\"Steve Martin\", \"fried chicken\").\nLikes(\"Steve Martin\", \"tacos\").\n.decl Dislikes(Person:symbol, Food:symbol)\nDislikes(\"Steve Martin\", \"shrimp pasta\").\n.decl Answer()\nAnswer() :- Likes(\"Steve Martin\", food), Dislikes(\"Steve Martin\", food2), food != food2.\n.output Answer", "completions": [".decl Likes(Person:symbol, Food:symbol)\nLikes(\"Steve Martin\", \"jambalaya\").\nLikes(\"Steve Martin\", \"fried chicken\").\nLikes(\"Steve Martin\", \"tacos\").\n.decl Dislikes(Person:symbol, Food:symbol)\nDislikes(\"Steve Martin\", \"shrimp pasta\").\n.decl Answer()\nAnswer() :- Likes(\"Steve Martin\", food), Dislikes(\"Steve Martin\", food2), food != food2.\n.output Answer"]}
{"id": 2102, "answer": false, "completion": ".decl Filmed_in_color(TV_show:symbol)\nFilmed_in_color(\"The Mentalist\").\n.decl Answer()\nAnswer() :- !Filmed_in_color(\"The Mentalist\").\n.output Answer", "completions": [".decl Filmed_in_color(TV_show:symbol)\nFilmed_in_color(\"The Mentalist\").\n.decl Answer()\nAnswer() :- !Filmed_in_color(\"The Mentalist\").\n.output Answer"]}
{"id": 2103, "answer": false, "completion": ".decl Lives_in(World:symbol, Character:symbol)\nLives_in(\"real world\", \"Bugs Bunny\").\n.decl Harms(Object:symbol, Target:symbol)\nHarms(\"Bugs Bunny\", \"carrots\").\n.decl Answer()\nAnswer() :- Lives_in(world, \"Bugs Bunny\"), Harms(\"Bugs Bunny\", \"olive tree\").\n.output Answer", "completions": [".decl Lives_in(World:symbol, Character:symbol)\nLives_in(\"real world\", \"Bugs Bunny\").\n.decl Harms(Object:symbol, Target:symbol)\nHarms(\"Bugs Bunny\", \"carrots\").\n.decl Answer()\nAnswer() :- Lives_in(world, \"Bugs Bunny\"), Harms(\"Bugs Bunny\", \"olive tree\").\n.output Answer"]}
{"id": 2104, "answer": true, "completion": ".decl Is_normal(Symptom:symbol, Normal:symbol)\nIs_normal(\"blue lips\", \"abnormal\").\n.decl Answer()\nAnswer() :- Is_normal(\"blue lips\", normal), normal = \"abnormal\".\n.output Answer", "completions": [".decl Is_normal(Symptom:symbol, Normal:symbol)\nIs_normal(\"blue lips\", \"abnormal\").\n.decl Answer()\nAnswer() :- Is_normal(\"blue lips\", normal), normal = \"abnormal\".\n.output Answer"]}
{"id": 2105, "answer": false, "completion": ".decl Keyboard_row(Key:symbol, Row:float)\nKeyboard_row(\"q\", 1).\nKeyboard_row(\"w\", 2).\nKeyboard_row(\"e\", 2).\nKeyboard_row(\"r\", 2).\nKeyboard_row(\"t\", 2).\nKeyboard_row(\"y\", 2).\nKeyboard_row(\"u\", 3).\nKeyboard_row(\"i\", 3).\nKeyboard_row(\"o\", 3).\nKeyboard_row(\"p\", 3).\nKeyboard_row(\"a\", 4).\nKeyboard_row(\"s\", 4).\nKeyboard_row(\"d\", 4).\nKeyboard_row(\"f\", 4).\nKeyboard_row(\"g\", 4).\nKeyboard_row(\"h\", 4).\nKeyboard_row(\"j\", 4).\nKeyboard_row(\"k\", 4).\nKeyboard_row(\"l\", 4).\nKeyboard_row(\"z\", 5).\nKeyboard_row(\"x\", 5).\nKeyboard_row(\"c\", 5).\nKeyboard_row(\"v\", 5).\nKeyboard_row(\"b\", 5).\nKeyboard_row(\"n\", 5).\nKeyboard_row(\"m\", 5).\n.decl Spelled_by_row(Word:symbol, Row:float)\nSpelled_by_row(\"Abdastartus\", 2).\n.decl Answer()\nAnswer() :- Spelled_by_row(word, row), substring(word, 0, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 1, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 2, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 3, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 4, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 5, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 6, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 7, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 8, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 9, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 10, 1, letter), Keyboard_row(letter, row).\n.output Answer", "completions": [".decl Keyboard_row(Key:symbol, Row:float)\nKeyboard_row(\"q\", 1).\nKeyboard_row(\"w\", 2).\nKeyboard_row(\"e\", 2).\nKeyboard_row(\"r\", 2).\nKeyboard_row(\"t\", 2).\nKeyboard_row(\"y\", 2).\nKeyboard_row(\"u\", 3).\nKeyboard_row(\"i\", 3).\nKeyboard_row(\"o\", 3).\nKeyboard_row(\"p\", 3).\nKeyboard_row(\"a\", 4).\nKeyboard_row(\"s\", 4).\nKeyboard_row(\"d\", 4).\nKeyboard_row(\"f\", 4).\nKeyboard_row(\"g\", 4).\nKeyboard_row(\"h\", 4).\nKeyboard_row(\"j\", 4).\nKeyboard_row(\"k\", 4).\nKeyboard_row(\"l\", 4).\nKeyboard_row(\"z\", 5).\nKeyboard_row(\"x\", 5).\nKeyboard_row(\"c\", 5).\nKeyboard_row(\"v\", 5).\nKeyboard_row(\"b\", 5).\nKeyboard_row(\"n\", 5).\nKeyboard_row(\"m\", 5).\n.decl Spelled_by_row(Word:symbol, Row:float)\nSpelled_by_row(\"Abdastartus\", 2).\n.decl Answer()\nAnswer() :- Spelled_by_row(word, row), substring(word, 0, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 1, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 2, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 3, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 4, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 5, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 6, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 7, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 8, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 9, 1, letter), Keyboard_row(letter, row).\nAnswer() :- Spelled_by_row(word, row), substring(word, 10, 1, letter), Keyboard_row(letter, row).\n.output Answer"]}
{"id": 2106, "answer": false, "completion": ".decl Can_fit(Person:symbol, Car:symbol)\nCan_fit(\"Barack Obama\", \"2020 Jaguar F Type\").\n.decl Has_seats(Car:symbol, N_seats:float)\nHas_seats(\"2020 Jaguar F Type\", 2).\n.decl Has_family_members(Person:symbol, N_members:float)\nHas_family_members(\"Barack Obama\", 4).\n.decl Answer()\nAnswer() :- Can_fit(person, car), Has_seats(car, n_seats), Has_family_members(person, n_members), n_seats >= n_members.\n.output Answer", "completions": [".decl Can_fit(Person:symbol, Car:symbol)\nCan_fit(\"Barack Obama\", \"2020 Jaguar F Type\").\n.decl Has_seats(Car:symbol, N_seats:float)\nHas_seats(\"2020 Jaguar F Type\", 2).\n.decl Has_family_members(Person:symbol, N_members:float)\nHas_family_members(\"Barack Obama\", 4).\n.decl Answer()\nAnswer() :- Can_fit(person, car), Has_seats(car, n_seats), Has_family_members(person, n_members), n_seats >= n_members.\n.output Answer"]}
{"id": 2107, "answer": false, "completion": ".decl Resembles(Object_A:symbol, Object_B:symbol)\nResembles(\"Princess Peach's dress\", \"peach fruit\").\n.decl Answer()\nAnswer() :- Resembles(\"Princess Peach's dress\", object), Resembles(object, \"peach fruit\").\n.output Answer", "completions": [".decl Resembles(Object_A:symbol, Object_B:symbol)\nResembles(\"Princess Peach's dress\", \"peach fruit\").\n.decl Answer()\nAnswer() :- Resembles(\"Princess Peach's dress\", object), Resembles(object, \"peach fruit\").\n.output Answer"]}
{"id": 2108, "answer": true, "completion": ".decl Works_at(Person:symbol, Restaurant:symbol)\nWorks_at(\"chef\", \"La Grenouille\").\n.decl Serves_cuisine(Restaurant:symbol, Cuisine:symbol)\nServes_cuisine(\"La Grenouille\", \"French\").\nServes_cuisine(\"La Esquina\", \"Mexican\").\n.decl Answer()\nAnswer() :- Works_at(\"chef\", restaurant), Serves_cuisine(restaurant, cuisine), cuisine != \"Mexican\".\n.output Answer", "completions": [".decl Works_at(Person:symbol, Restaurant:symbol)\nWorks_at(\"chef\", \"La Grenouille\").\n.decl Serves_cuisine(Restaurant:symbol, Cuisine:symbol)\nServes_cuisine(\"La Grenouille\", \"French\").\nServes_cuisine(\"La Esquina\", \"Mexican\").\n.decl Answer()\nAnswer() :- Works_at(\"chef\", restaurant), Serves_cuisine(restaurant, cuisine), cuisine != \"Mexican\".\n.output Answer"]}
{"id": 2109, "answer": true, "completion": ".decl Works(Person:symbol, City:symbol)\nWorks(\"Abdulqawi Yusuf\", \"The Hague\").\n.decl Typical_work_day(Day:symbol)\nTypical_work_day(\"Monday\").\nTypical_work_day(\"Tuesday\").\nTypical_work_day(\"Wednesday\").\nTypical_work_day(\"Thursday\").\nTypical_work_day(\"Friday\").\n.decl Answer()\nAnswer() :- Works(\"Abdulqawi Yusuf\", city), Typical_work_day(day), day = \"Monday\", city = \"The Hague\".\nAnswer() :- Works(\"Abdulqawi Yusuf\", city), Typical_work_day(day), day = \"Tuesday\", city = \"The Hague\".\nAnswer() :- Works(\"Abdulqawi Yusuf\", city), Typical_work_day(day), day = \"Wednesday\", city = \"The Hague\".\nAnswer() :- Works(\"Abdulqawi Yusuf\", city), Typical_work_day(day), day = \"Thursday\", city = \"The Hague\".\nAnswer() :- Works(\"Abdulqawi Yusuf\", city), Typical_work_day(day), day = \"Friday\", city = \"The Hague\".\n.output Answer", "completions": [".decl Works(Person:symbol, City:symbol)\nWorks(\"Abdulqawi Yusuf\", \"The Hague\").\n.decl Typical_work_day(Day:symbol)\nTypical_work_day(\"Monday\").\nTypical_work_day(\"Tuesday\").\nTypical_work_day(\"Wednesday\").\nTypical_work_day(\"Thursday\").\nTypical_work_day(\"Friday\").\n.decl Answer()\nAnswer() :- Works(\"Abdulqawi Yusuf\", city), Typical_work_day(day), day = \"Monday\", city = \"The Hague\".\nAnswer() :- Works(\"Abdulqawi Yusuf\", city), Typical_work_day(day), day = \"Tuesday\", city = \"The Hague\".\nAnswer() :- Works(\"Abdulqawi Yusuf\", city), Typical_work_day(day), day = \"Wednesday\", city = \"The Hague\".\nAnswer() :- Works(\"Abdulqawi Yusuf\", city), Typical_work_day(day), day = \"Thursday\", city = \"The Hague\".\nAnswer() :- Works(\"Abdulqawi Yusuf\", city), Typical_work_day(day), day = \"Friday\", city = \"The Hague\".\n.output Answer"]}
{"id": 2110, "answer": false, "completion": ".decl Comparable(Object1:symbol, Object2:symbol)\nComparable(\"blood spatter pattern\", \"Jackson Pollock piece\").\n.decl Answer()\nAnswer() :- Comparable(\"blood spatter pattern\", object2), Comparable(object2, \"Jackson Pollock piece\").\n.output Answer", "completions": [".decl Comparable(Object1:symbol, Object2:symbol)\nComparable(\"blood spatter pattern\", \"Jackson Pollock piece\").\n.decl Answer()\nAnswer() :- Comparable(\"blood spatter pattern\", object2), Comparable(object2, \"Jackson Pollock piece\").\n.output Answer"]}
{"id": 2111, "answer": false, "completion": ".decl Has_area(City:symbol, Area:float)\nHas_area(\"Miami\", 143.15).\nHas_area(\"Uppsala\", 48.27).\n.decl Answer()\nAnswer() :- Has_area(\"Miami\", area1), Has_area(\"Uppsala\", area2), area1 < area2.\n.output Answer", "completions": [".decl Has_area(City:symbol, Area:float)\nHas_area(\"Miami\", 143.15).\nHas_area(\"Uppsala\", 48.27).\n.decl Answer()\nAnswer() :- Has_area(\"Miami\", area1), Has_area(\"Uppsala\", area2), area1 < area2.\n.output Answer"]}
{"id": 2112, "answer": false, "completion": ".decl Made_of(Material:symbol, Object:symbol)\nMade_of(\"wood\", \"chair\").\nMade_of(\"leather\", \"sofa\").\n.decl Answer()\nAnswer() :- Made_of(\"hair\", object).\n.output Answer", "completions": [".decl Made_of(Material:symbol, Object:symbol)\nMade_of(\"wood\", \"chair\").\nMade_of(\"leather\", \"sofa\").\n.decl Answer()\nAnswer() :- Made_of(\"hair\", object).\n.output Answer"]}
{"id": 2113, "answer": true, "completion": ".decl Succeeds(Person_A:symbol, Person_B:symbol)\nSucceeds(\"Helen Clark\", \"John Key\").\nSucceeds(\"Jacinda Ardern\", \"Bill English\").\nSucceeds(\"Jacinda Ardern\", \"John Key\").\n.decl Answer()\nAnswer() :- Succeeds(woman1, \"John Key\"), Succeeds(woman2, \"John Key\"), woman1 != woman2, Succeeds(woman1, man), Succeeds(woman2, man2), man = man2.\n.output Answer", "completions": [".decl Succeeds(Person_A:symbol, Person_B:symbol)\nSucceeds(\"Helen Clark\", \"John Key\").\nSucceeds(\"Jacinda Ardern\", \"Bill English\").\nSucceeds(\"Jacinda Ardern\", \"John Key\").\n.decl Answer()\nAnswer() :- Succeeds(woman1, \"John Key\"), Succeeds(woman2, \"John Key\"), woman1 != woman2, Succeeds(woman1, man), Succeeds(woman2, man2), man = man2.\n.output Answer"]}
{"id": 2114, "answer": true, "completion": ".decl Melts_with_heat(Object:symbol)\nMelts_with_heat(\"Toyota Prius battery\").\n.decl Used_for(Object:symbol, Purpose:symbol)\nUsed_for(\"microwave\", \"heating food\").\n.decl Answer()\nAnswer() :- Used_for(\"microwave\", purpose), Melts_with_heat(object), purpose = \"heating food\".\n.output Answer", "completions": [".decl Melts_with_heat(Object:symbol)\nMelts_with_heat(\"Toyota Prius battery\").\n.decl Used_for(Object:symbol, Purpose:symbol)\nUsed_for(\"microwave\", \"heating food\").\n.decl Answer()\nAnswer() :- Used_for(\"microwave\", purpose), Melts_with_heat(object), purpose = \"heating food\".\n.output Answer"]}
{"id": 2115, "answer": false, "completion": ".decl Has_health_condition(Person:symbol, Condition:symbol)\nHas_health_condition(\"J. P. Morgan\", \"heart disease\").\nHas_health_condition(\"J. P. Morgan\", \"nosebleeds\").\n.decl Answer()\nAnswer() :- Has_health_condition(\"J. P. Morgan\", \"healthy lungs\"), !Has_health_condition(\"J. P. Morgan\", \"heart disease\"), !Has_health_condition(\"J. P. Morgan\", \"lung disease\").\n.output Answer", "completions": [".decl Has_health_condition(Person:symbol, Condition:symbol)\nHas_health_condition(\"J. P. Morgan\", \"heart disease\").\nHas_health_condition(\"J. P. Morgan\", \"nosebleeds\").\n.decl Answer()\nAnswer() :- Has_health_condition(\"J. P. Morgan\", \"healthy lungs\"), !Has_health_condition(\"J. P. Morgan\", \"heart disease\"), !Has_health_condition(\"J. P. Morgan\", \"lung disease\").\n.output Answer"]}
{"id": 2116, "answer": true, "completion": ".decl Creator_of_band(Person:symbol, Band:symbol)\nCreator_of_band(\"Damon Albarn\", \"Gorillaz\").\nCreator_of_band(\"Bernard Sumner\", \"Joy Division\").\nCreator_of_band(\"Bernard Sumner\", \"New Order\").\n.decl Answer()\nAnswer() :- Creator_of_band(\"Damon Albarn\", band1), Creator_of_band(\"Bernard Sumner\", band2), band1 != band2.\nAnswer() :- Creator_of_band(\"Damon Albarn\", band1), Creator_of_band(\"Person\", band2), band1 != band2, Creator_of_band(\"Bernard Sumner\", band3), band2 != band3.\nAnswer() :- Creator_of_band(\"Damon Albarn\", band1), Creator_of_band(\"Person\", band2), band1 != band2, Creator_of_band(\"Person\", band3), band2 != band3, Creator_of_band(\"Bernard Sumner\", band4), band3 != band4.\n.output Answer", "completions": [".decl Creator_of_band(Person:symbol, Band:symbol)\nCreator_of_band(\"Damon Albarn\", \"Gorillaz\").\nCreator_of_band(\"Bernard Sumner\", \"Joy Division\").\nCreator_of_band(\"Bernard Sumner\", \"New Order\").\n.decl Answer()\nAnswer() :- Creator_of_band(\"Damon Albarn\", band1), Creator_of_band(\"Bernard Sumner\", band2), band1 != band2.\nAnswer() :- Creator_of_band(\"Damon Albarn\", band1), Creator_of_band(\"Person\", band2), band1 != band2, Creator_of_band(\"Bernard Sumner\", band3), band2 != band3.\nAnswer() :- Creator_of_band(\"Damon Albarn\", band1), Creator_of_band(\"Person\", band2), band1 != band2, Creator_of_band(\"Person\", band3), band2 != band3, Creator_of_band(\"Bernard Sumner\", band4), band3 != band4.\n.output Answer"]}
{"id": 2117, "answer": true, "completion": ".decl Contains(Tool:symbol, Substance:symbol)\nContains(\"wheelbarrow\", \"starch\").\n.decl Harmful_to(Condition:symbol, Substance:symbol)\nHarmful_to(\"hyperglycemia\", \"starch\").\n.decl Answer()\nAnswer() :- Contains(tool, substance), Harmful_to(condition, substance).\n.output Answer", "completions": [".decl Contains(Tool:symbol, Substance:symbol)\nContains(\"wheelbarrow\", \"starch\").\n.decl Harmful_to(Condition:symbol, Substance:symbol)\nHarmful_to(\"hyperglycemia\", \"starch\").\n.decl Answer()\nAnswer() :- Contains(tool, substance), Harmful_to(condition, substance).\n.output Answer"]}
{"id": 2118, "answer": true, "completion": ".decl Has_population(City:symbol, Population:float)\nHas_population(\"Indianapolis Motor Speedway\", 235000).\n.decl Died_in_war(Country:symbol, War:symbol, N_deaths:float)\nDied_in_war(\"Austria\", \"Seven Years' War\", 110000).\n.decl Answer()\nAnswer() :- Died_in_war(\"Austria\", \"Seven Years' War\", n_deaths), Has_population(\"Indianapolis Motor Speedway\", population), n_deaths <= population.\n.output Answer", "completions": [".decl Has_population(City:symbol, Population:float)\nHas_population(\"Indianapolis Motor Speedway\", 235000).\n.decl Died_in_war(Country:symbol, War:symbol, N_deaths:float)\nDied_in_war(\"Austria\", \"Seven Years' War\", 110000).\n.decl Answer()\nAnswer() :- Died_in_war(\"Austria\", \"Seven Years' War\", n_deaths), Has_population(\"Indianapolis Motor Speedway\", population), n_deaths <= population.\n.output Answer"]}
{"id": 2119, "answer": false, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Pearl Harbor attack\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"September\", \"autumn\").\nIn_season(\"October\", \"autumn\").\nIn_season(\"November\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Pearl Harbor attack\", month), In_season(month, \"autumn\").\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Pearl Harbor attack\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\nIn_season(\"September\", \"autumn\").\nIn_season(\"October\", \"autumn\").\nIn_season(\"November\", \"autumn\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Pearl Harbor attack\", month), In_season(month, \"autumn\").\n.output Answer"]}
{"id": 2120, "answer": true, "completion": ".decl Turned_chair(Person:symbol, Contestant:symbol)\nTurned_chair(\"Christina Aguilera\", \"Kelly Clarkson\").\n.decl Answer()\nAnswer() :- Turned_chair(person, \"Kelly Clarkson\"), person = \"Christina Aguilera\".\n.output Answer", "completions": [".decl Turned_chair(Person:symbol, Contestant:symbol)\nTurned_chair(\"Christina Aguilera\", \"Kelly Clarkson\").\n.decl Answer()\nAnswer() :- Turned_chair(person, \"Kelly Clarkson\"), person = \"Christina Aguilera\".\n.output Answer"]}
{"id": 2121, "answer": true, "completion": ".decl Weighs(Object:symbol, Weight:float)\nWeighs(\"World of Warcraft\", 50).\nWeighs(\"loaf of bread\", 0.5).\n.decl Answer()\nAnswer() :- Weighs(\"World of Warcraft\", weight1), Weighs(\"loaf of bread\", weight2), weight1 > weight2.\n.output Answer", "completions": [".decl Weighs(Object:symbol, Weight:float)\nWeighs(\"World of Warcraft\", 50).\nWeighs(\"loaf of bread\", 0.5).\n.decl Answer()\nAnswer() :- Weighs(\"World of Warcraft\", weight1), Weighs(\"loaf of bread\", weight2), weight1 > weight2.\n.output Answer"]}
{"id": 2122, "answer": false, "completion": ".decl Political_affiliation(Person:symbol, Affiliation:symbol)\nPolitical_affiliation(\"Donald Trump\", \"Republican\").\nPolitical_affiliation(\"Bernie Sanders\", \"Democratic Socialist\").\n.decl Opposes(Issue:symbol, Position:symbol)\nOpposes(\"marxism\", \"right wing\").\nOpposes(\"marxism\", \"Republican\").\n.decl Answer()\nAnswer() :- Political_affiliation(person, \"right wing\"), Opposes(\"marxism\", position).\n.output Answer", "completions": [".decl Political_affiliation(Person:symbol, Affiliation:symbol)\nPolitical_affiliation(\"Donald Trump\", \"Republican\").\nPolitical_affiliation(\"Bernie Sanders\", \"Democratic Socialist\").\n.decl Opposes(Issue:symbol, Position:symbol)\nOpposes(\"marxism\", \"right wing\").\nOpposes(\"marxism\", \"Republican\").\n.decl Answer()\nAnswer() :- Political_affiliation(person, \"right wing\"), Opposes(\"marxism\", position).\n.output Answer"]}
{"id": 2123, "answer": true, "completion": ".decl Budget(Film:symbol, Budget:float)\nBudget(\"King Kong (2005 film)\", 207).\n.decl Box_office(Film:symbol, Box_office:float)\nBox_office(\"King Kong (2005 film)\", 562.3).\n.decl Answer()\nAnswer() :- Budget(\"King Kong (2005 film)\", budget), Box_office(\"King Kong (2005 film)\", box_office), box_office > budget.\n.output Answer", "completions": [".decl Budget(Film:symbol, Budget:float)\nBudget(\"King Kong (2005 film)\", 207).\n.decl Box_office(Film:symbol, Box_office:float)\nBox_office(\"King Kong (2005 film)\", 562.3).\n.decl Answer()\nAnswer() :- Budget(\"King Kong (2005 film)\", budget), Box_office(\"King Kong (2005 film)\", box_office), box_office > budget.\n.output Answer"]}
{"id": 2124, "answer": true, "completion": ".decl Has_trait(Plant:symbol, Trait:symbol)\nHas_trait(\"seedless cucumber\", \"seedless\").\nHas_trait(\"seedless cucumber\", \"resistant to pests\").\n.decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"gardener\", \"entomophobia\").\n.decl Answer()\nAnswer() :- Has_trait(\"seedless cucumber\", \"seedless\"), Has_trait(\"seedless cucumber\", \"resistant to pests\"), Has_phobia(\"gardener\", \"entomophobia\").\n.output Answer", "completions": [".decl Has_trait(Plant:symbol, Trait:symbol)\nHas_trait(\"seedless cucumber\", \"seedless\").\nHas_trait(\"seedless cucumber\", \"resistant to pests\").\n.decl Has_phobia(Person:symbol, Phobia:symbol)\nHas_phobia(\"gardener\", \"entomophobia\").\n.decl Answer()\nAnswer() :- Has_trait(\"seedless cucumber\", \"seedless\"), Has_trait(\"seedless cucumber\", \"resistant to pests\"), Has_phobia(\"gardener\", \"entomophobia\").\n.output Answer"]}
{"id": 2125, "answer": false, "completion": ".decl Likes(Person:symbol, Cuisine:symbol)\nLikes(\"Garfield\", \"lasagna\").\nLikes(\"Garfield\", \"pizza\").\nLikes(\"Garfield\", \"spaghetti\").\n.decl Answer()\nAnswer() :- Likes(\"Garfield\", cuisine), cuisine = \"italian\", !Likes(\"Garfield\", \"lasagna\").\n.output Answer", "completions": [".decl Likes(Person:symbol, Cuisine:symbol)\nLikes(\"Garfield\", \"lasagna\").\nLikes(\"Garfield\", \"pizza\").\nLikes(\"Garfield\", \"spaghetti\").\n.decl Answer()\nAnswer() :- Likes(\"Garfield\", cuisine), cuisine = \"italian\", !Likes(\"Garfield\", \"lasagna\").\n.output Answer"]}
{"id": 2126, "answer": true, "completion": ".decl Follows_religion(Person:symbol, Religion:symbol)\nFollows_religion(\"Shinto practitioner\", \"Shintoism\").\n.decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"Shinto practitioner\", \"Shinto diet\").\nFollows_diet(\"Jewish person\", \"kosher diet\").\n.decl Answer()\nAnswer() :- Follows_religion(person, \"Shintoism\"), Follows_diet(person, diet), diet != \"kosher diet\".\nAnswer() :- !Follows_religion(person, \"Shintoism\"), Follows_diet(person, \"kosher diet\").\n.output Answer", "completions": [".decl Follows_religion(Person:symbol, Religion:symbol)\nFollows_religion(\"Shinto practitioner\", \"Shintoism\").\n.decl Follows_diet(Person:symbol, Diet:symbol)\nFollows_diet(\"Shinto practitioner\", \"Shinto diet\").\nFollows_diet(\"Jewish person\", \"kosher diet\").\n.decl Answer()\nAnswer() :- Follows_religion(person, \"Shintoism\"), Follows_diet(person, diet), diet != \"kosher diet\".\nAnswer() :- !Follows_religion(person, \"Shintoism\"), Follows_diet(person, \"kosher diet\").\n.output Answer"]}
{"id": 2127, "answer": true, "completion": ".decl Texture(Color:symbol, Texture:symbol)\nTexture(\"green\", \"smooth\").\nTexture(\"red\", \"wrinkled\").\nTexture(\"yellow\", \"rough\").\n.decl Answer()\nAnswer() :- Texture(color1, texture1), Texture(color2, texture2), color1 != color2, texture1 != texture2.\n.output Answer", "completions": [".decl Texture(Color:symbol, Texture:symbol)\nTexture(\"green\", \"smooth\").\nTexture(\"red\", \"wrinkled\").\nTexture(\"yellow\", \"rough\").\n.decl Answer()\nAnswer() :- Texture(color1, texture1), Texture(color2, texture2), color1 != color2, texture1 != texture2.\n.output Answer"]}
{"id": 2128, "answer": true, "completion": ".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Sam Harris\", \"none\").\n.decl Answer()\nAnswer() :- Worships(\"Sam Harris\", deity), deity != \"Shiva\".\n.output Answer", "completions": [".decl Worships(Person:symbol, Deity:symbol)\nWorships(\"Sam Harris\", \"none\").\n.decl Answer()\nAnswer() :- Worships(\"Sam Harris\", deity), deity != \"Shiva\".\n.output Answer"]}
{"id": 2129, "answer": false, "completion": ".decl Refers_to(Species:symbol, Name:symbol)\nRefers_to(\"Leipzig\", \"Pinus nigra\").\n.decl Is_evergreen(Species:symbol)\nIs_evergreen(\"Pinus nigra\").\n.decl Answer()\nAnswer() :- Refers_to(species, \"Leipzig\"), Is_evergreen(species).\n.output Answer", "completions": [".decl Refers_to(Species:symbol, Name:symbol)\nRefers_to(\"Leipzig\", \"Pinus nigra\").\n.decl Is_evergreen(Species:symbol)\nIs_evergreen(\"Pinus nigra\").\n.decl Answer()\nAnswer() :- Refers_to(species, \"Leipzig\"), Is_evergreen(species).\n.output Answer"]}
{"id": 2130, "answer": false, "completion": ".decl Causes(Pain:symbol, Treatment:symbol)\nCauses(\"acupuncture\", \"pain\").\n.decl Many_people(People:symbol)\nMany_people(\"many people\").\n.decl Answer()\nAnswer() :- Causes(pain, \"acupuncture\"), !Causes(pain, treatment2), Causes(\"many people\", treatment2).\n.output Answer", "completions": [".decl Causes(Pain:symbol, Treatment:symbol)\nCauses(\"acupuncture\", \"pain\").\n.decl Many_people(People:symbol)\nMany_people(\"many people\").\n.decl Answer()\nAnswer() :- Causes(pain, \"acupuncture\"), !Causes(pain, treatment2), Causes(\"many people\", treatment2).\n.output Answer"]}
{"id": 2131, "answer": false, "completion": ".decl From_country(Person:symbol, Country:symbol)\nFrom_country(\"Gaite Jansen\", \"Netherlands\").\nFrom_country(\"Paul Verhoeven\", \"Netherlands\").\nFrom_country(\"RoboCop\", \"USA\").\n.decl Answer()\nAnswer() :- From_country(\"RoboCop\", country1), From_country(\"Gaite Jansen\", country2), country1 = country2.\n.output Answer", "completions": [".decl From_country(Person:symbol, Country:symbol)\nFrom_country(\"Gaite Jansen\", \"Netherlands\").\nFrom_country(\"Paul Verhoeven\", \"Netherlands\").\nFrom_country(\"RoboCop\", \"USA\").\n.decl Answer()\nAnswer() :- From_country(\"RoboCop\", country1), From_country(\"Gaite Jansen\", country2), country1 = country2.\n.output Answer"]}
{"id": 2132, "answer": false, "completion": ".decl Has_injury(Person:symbol, Body_part:symbol, Injury:symbol)\nHas_injury(\"you\", \"leg\", \"cast\").\n.decl Wears(Person:symbol, Footwear:symbol)\nWears(\"you\", \"sandal\").\n.decl Answer()\nAnswer() :- Has_injury(\"you\", \"leg\", \"cast\"), Wears(\"you\", footwear), footwear != \"sandal\".\n.output Answer", "completions": [".decl Has_injury(Person:symbol, Body_part:symbol, Injury:symbol)\nHas_injury(\"you\", \"leg\", \"cast\").\n.decl Wears(Person:symbol, Footwear:symbol)\nWears(\"you\", \"sandal\").\n.decl Answer()\nAnswer() :- Has_injury(\"you\", \"leg\", \"cast\"), Wears(\"you\", footwear), footwear != \"sandal\".\n.output Answer"]}
{"id": 2133, "answer": true, "completion": ".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"food1\", \"black salt\").\n.decl Smells_like(Food:symbol, Smell:symbol)\nSmells_like(\"food1\", \"sulfur\").\n.decl Answer()\nAnswer() :- Has_ingredient(food, \"black salt\"), Smells_like(food, \"sulfur\").\n.output Answer", "completions": [".decl Has_ingredient(Food:symbol, Ingredient:symbol)\nHas_ingredient(\"food1\", \"black salt\").\n.decl Smells_like(Food:symbol, Smell:symbol)\nSmells_like(\"food1\", \"sulfur\").\n.decl Answer()\nAnswer() :- Has_ingredient(food, \"black salt\"), Smells_like(food, \"sulfur\").\n.output Answer"]}
{"id": 2134, "answer": true, "completion": ".decl Average_life_expectancy(Gender:symbol, Age:float)\nAverage_life_expectancy(\"Hawaiian male\", 75).\n.decl Has_lifespan(Species:symbol, Lifespan:float)\nHas_lifespan(\"wild cane toad\", 10).\n.decl Answer()\nAnswer() :- Average_life_expectancy(\"Hawaiian male\", age1), Has_lifespan(\"wild cane toad\", lifespan), age1*365 > lifespan.\n.output Answer", "completions": [".decl Average_life_expectancy(Gender:symbol, Age:float)\nAverage_life_expectancy(\"Hawaiian male\", 75).\n.decl Has_lifespan(Species:symbol, Lifespan:float)\nHas_lifespan(\"wild cane toad\", 10).\n.decl Answer()\nAnswer() :- Average_life_expectancy(\"Hawaiian male\", age1), Has_lifespan(\"wild cane toad\", lifespan), age1*365 > lifespan.\n.output Answer"]}
{"id": 2135, "answer": false, "completion": ".decl Invented_before(Item:symbol, Year:float)\nInvented_before(\"refrigerator\", 1800).\nInvented_before(\"egg carton\", 1911).\n.decl Answer()\nAnswer() :- Invented_before(\"refrigerator\", year), Invented_before(\"egg carton\", year).\n.output Answer", "completions": [".decl Invented_before(Item:symbol, Year:float)\nInvented_before(\"refrigerator\", 1800).\nInvented_before(\"egg carton\", 1911).\n.decl Answer()\nAnswer() :- Invented_before(\"refrigerator\", year), Invented_before(\"egg carton\", year).\n.output Answer"]}
{"id": 2136, "answer": true, "completion": ".decl Needs_high_viscosity(Person:symbol)\nNeeds_high_viscosity(\"person1\").\nNeeds_high_viscosity(\"person2\").\n.decl Has_viscosity(Drink:symbol, Viscosity:float)\nHas_viscosity(\"water\", 1).\nHas_viscosity(\"juice\", 2).\nHas_viscosity(\"milkshake\", 5).\n.decl Answer()\nAnswer() :- Needs_high_viscosity(person), Has_viscosity(drink, viscosity), viscosity >= 3.\n.output Answer", "completions": [".decl Needs_high_viscosity(Person:symbol)\nNeeds_high_viscosity(\"person1\").\nNeeds_high_viscosity(\"person2\").\n.decl Has_viscosity(Drink:symbol, Viscosity:float)\nHas_viscosity(\"water\", 1).\nHas_viscosity(\"juice\", 2).\nHas_viscosity(\"milkshake\", 5).\n.decl Answer()\nAnswer() :- Needs_high_viscosity(person), Has_viscosity(drink, viscosity), viscosity >= 3.\n.output Answer"]}
{"id": 2137, "answer": false, "completion": ".decl Is_similar(Entity1:symbol, Entity2:symbol)\nIs_similar(\"Krishna\", \"Vishnu\").\nIs_similar(\"Holy Spirit\", \"God\").\n.decl Answer()\nAnswer() :- Is_similar(\"Krishna\", entity), Is_similar(\"Holy Spirit\", entity).\n.output Answer", "completions": [".decl Is_similar(Entity1:symbol, Entity2:symbol)\nIs_similar(\"Krishna\", \"Vishnu\").\nIs_similar(\"Holy Spirit\", \"God\").\n.decl Answer()\nAnswer() :- Is_similar(\"Krishna\", entity), Is_similar(\"Holy Spirit\", entity).\n.output Answer"]}
{"id": 2138, "answer": true, "completion": ".decl Took_place(Event:symbol, Location:symbol)\nTook_place(\"Treaty of Versailles\", \"Versailles Palace\").\n.decl Served_food(Event:symbol, Food:symbol)\nServed_food(\"Versailles Palace\", \"blueberry scones\").\n.decl Answer()\nAnswer() :- Took_place(\"Treaty of Versailles\", location), Served_food(location, \"blueberry scones\").\n.output Answer", "completions": [".decl Took_place(Event:symbol, Location:symbol)\nTook_place(\"Treaty of Versailles\", \"Versailles Palace\").\n.decl Served_food(Event:symbol, Food:symbol)\nServed_food(\"Versailles Palace\", \"blueberry scones\").\n.decl Answer()\nAnswer() :- Took_place(\"Treaty of Versailles\", location), Served_food(location, \"blueberry scones\").\n.output Answer"]}
{"id": 2139, "answer": false, "completion": ".decl Original_dwarf(Name:symbol)\nOriginal_dwarf(\"Doc\").\nOriginal_dwarf(\"Grumpy\").\nOriginal_dwarf(\"Happy\").\nOriginal_dwarf(\"Sleepy\").\nOriginal_dwarf(\"Bashful\").\nOriginal_dwarf(\"Sneezy\").\nOriginal_dwarf(\"Dopey\").\n.decl Answer()\nAnswer() :- Original_dwarf(name), !Has_replacement(name).\nHas_replacement(name) :- Original_dwarf(name), Replaced_by(name, _).\nHas_replacement(name) :- Original_dwarf(name), Replaced_by(_, name).\n.output Answer", "completions": [".decl Original_dwarf(Name:symbol)\nOriginal_dwarf(\"Doc\").\nOriginal_dwarf(\"Grumpy\").\nOriginal_dwarf(\"Happy\").\nOriginal_dwarf(\"Sleepy\").\nOriginal_dwarf(\"Bashful\").\nOriginal_dwarf(\"Sneezy\").\nOriginal_dwarf(\"Dopey\").\n.decl Answer()\nAnswer() :- Original_dwarf(name), !Has_replacement(name).\nHas_replacement(name) :- Original_dwarf(name), Replaced_by(name, _).\nHas_replacement(name) :- Original_dwarf(name), Replaced_by(_, name).\n.output Answer"]}
{"id": 2140, "answer": false, "completion": ".decl Lives_in(Person:symbol, Location:symbol)\nLives_in(\"John\", \"Mennonite community\").\nLives_in(\"Mary\", \"Mennonite community\").\nLives_in(\"Bob\", \"city\").\n.decl Watches_tv(Person:symbol, Show:symbol)\nWatches_tv(\"John\", \"Little House on the Prairie\").\nWatches_tv(\"Mary\", \"Little House on the Prairie\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Mennonite community\"), Watches_tv(person, \"The Powerpuff Girls\").\nAnswer() :- Lives_in(person, \"Mennonite community\"), !Watches_tv(person, show), show != \"The Powerpuff Girls\".\n.output Answer", "completions": [".decl Lives_in(Person:symbol, Location:symbol)\nLives_in(\"John\", \"Mennonite community\").\nLives_in(\"Mary\", \"Mennonite community\").\nLives_in(\"Bob\", \"city\").\n.decl Watches_tv(Person:symbol, Show:symbol)\nWatches_tv(\"John\", \"Little House on the Prairie\").\nWatches_tv(\"Mary\", \"Little House on the Prairie\").\n.decl Answer()\nAnswer() :- Lives_in(person, \"Mennonite community\"), Watches_tv(person, \"The Powerpuff Girls\").\nAnswer() :- Lives_in(person, \"Mennonite community\"), !Watches_tv(person, show), show != \"The Powerpuff Girls\".\n.output Answer"]}
{"id": 2141, "answer": true, "completion": ".decl Hypothetical_zodiac_sign(Sign:symbol)\nHypothetical_zodiac_sign(\"Capricorn\").\n.decl Associated_with_religion(Sign:symbol, Religion:symbol)\nAssociated_with_religion(\"Capricorn\", \"Satanism\").\n.decl Answer()\nAnswer() :- Hypothetical_zodiac_sign(sign), Associated_with_religion(sign, \"Satanism\").\n.output Answer", "completions": [".decl Hypothetical_zodiac_sign(Sign:symbol)\nHypothetical_zodiac_sign(\"Capricorn\").\n.decl Associated_with_religion(Sign:symbol, Religion:symbol)\nAssociated_with_religion(\"Capricorn\", \"Satanism\").\n.decl Answer()\nAnswer() :- Hypothetical_zodiac_sign(sign), Associated_with_religion(sign, \"Satanism\").\n.output Answer"]}
{"id": 2142, "answer": true, "completion": ".decl Eats(Food:symbol, Person:symbol)\nEats(\"banana\", \"Elvis Presley\").\n.decl Needs(Thing:symbol, Purpose:symbol)\nNeeds(\"plant\", \"photosynthesis\").\n.decl Answer()\nAnswer() :- Eats(food, \"Elvis Presley\"), Needs(\"plant\", purpose), food = \"banana\", purpose = \"photosynthesis\".\n.output Answer", "completions": [".decl Eats(Food:symbol, Person:symbol)\nEats(\"banana\", \"Elvis Presley\").\n.decl Needs(Thing:symbol, Purpose:symbol)\nNeeds(\"plant\", \"photosynthesis\").\n.decl Answer()\nAnswer() :- Eats(food, \"Elvis Presley\"), Needs(\"plant\", purpose), food = \"banana\", purpose = \"photosynthesis\".\n.output Answer"]}
{"id": 2143, "answer": false, "completion": ".decl Has_duty(Deity:symbol, Duty:symbol)\nHas_duty(\"Hanuman\", \"protecting devotees\").\nHas_duty(\"Athena\", \"protecting Athens\").\nHas_duty(\"Athena\", \"protecting warriors\").\n.decl Answer()\nAnswer() :- Has_duty(\"Hanuman\", duty), Has_duty(\"Athena\", duty).\n.output Answer", "completions": [".decl Has_duty(Deity:symbol, Duty:symbol)\nHas_duty(\"Hanuman\", \"protecting devotees\").\nHas_duty(\"Athena\", \"protecting Athens\").\nHas_duty(\"Athena\", \"protecting warriors\").\n.decl Answer()\nAnswer() :- Has_duty(\"Hanuman\", duty), Has_duty(\"Athena\", duty).\n.output Answer"]}
{"id": 2144, "answer": true, "completion": ".decl Has_trait(Animal:symbol, Trait:symbol)\nHas_trait(\"jellyfish\", \"no_arteries\").\n.decl Answer()\nAnswer() :- Has_trait(\"jellyfish\", \"no_arteries\").\n.output Answer", "completions": [".decl Has_trait(Animal:symbol, Trait:symbol)\nHas_trait(\"jellyfish\", \"no_arteries\").\n.decl Answer()\nAnswer() :- Has_trait(\"jellyfish\", \"no_arteries\").\n.output Answer"]}
{"id": 2145, "answer": false, "completion": ".decl Conquered_by(Ruler:symbol, Territory:symbol)\nConquered_by(\"Charlemagne\", \"France\").\nConquered_by(\"Charlemagne\", \"Germany\").\nConquered_by(\"Charlemagne\", \"Italy\").\n.decl Answer()\nAnswer() :- Conquered_by(\"Charlemagne\", territory), Conquered_by(\"Temujin\", territory).\n.output Answer", "completions": [".decl Conquered_by(Ruler:symbol, Territory:symbol)\nConquered_by(\"Charlemagne\", \"France\").\nConquered_by(\"Charlemagne\", \"Germany\").\nConquered_by(\"Charlemagne\", \"Italy\").\n.decl Answer()\nAnswer() :- Conquered_by(\"Charlemagne\", territory), Conquered_by(\"Temujin\", territory).\n.output Answer"]}
{"id": 2146, "answer": true, "completion": ".decl Has_issue(Location:symbol, Issue:symbol)\nHas_issue(\"Antarctica\", \"homelessness\").\n.decl Answer()\nAnswer() :- Has_issue(\"Antarctica\", \"homelessness\").\n.output Answer\n\n// Note: This question is unlikely to have a meaningful answer, as Antarctica is not inhabited by a significant human population.", "completions": [".decl Has_issue(Location:symbol, Issue:symbol)\nHas_issue(\"Antarctica\", \"homelessness\").\n.decl Answer()\nAnswer() :- Has_issue(\"Antarctica\", \"homelessness\").\n.output Answer\n\n// Note: This question is unlikely to have a meaningful answer, as Antarctica is not inhabited by a significant human population."]}
{"id": 2147, "answer": true, "completion": ".decl Causes_death(Activity:symbol)\nCauses_death(\"skydiving\").\nCauses_death(\"base jumping\").\n.decl Answer()\nAnswer() :- Causes_death(activity), activity != \"Immersion Baptism\".\nAnswer() :- Causes_death(activity1), Causes_death(activity2), activity1 != activity2, activity1 = \"Immersion Baptism\", activity2 = \"skydiving\".\nAnswer() :- Causes_death(activity1), Causes_death(activity2), activity1 != activity2, activity1 = \"Immersion Baptism\", activity2 = \"base jumping\".\n.output Answer", "completions": [".decl Causes_death(Activity:symbol)\nCauses_death(\"skydiving\").\nCauses_death(\"base jumping\").\n.decl Answer()\nAnswer() :- Causes_death(activity), activity != \"Immersion Baptism\".\nAnswer() :- Causes_death(activity1), Causes_death(activity2), activity1 != activity2, activity1 = \"Immersion Baptism\", activity2 = \"skydiving\".\nAnswer() :- Causes_death(activity1), Causes_death(activity2), activity1 != activity2, activity1 = \"Immersion Baptism\", activity2 = \"base jumping\".\n.output Answer"]}
{"id": 2148, "answer": true, "completion": ".decl Has_nutrient(Food:symbol, Nutrient:symbol, Amount:float)\nHas_nutrient(\"raw carrots\", \"vitamin A\", 835).\nHas_nutrient(\"cooked carrots\", \"vitamin A\", 666).\nHas_nutrient(\"spinach\", \"vitamin A\", 469).\n.decl Answer()\nAnswer() :- Has_nutrient(\"raw carrots\", nutrient1, amount1), Has_nutrient(food2, nutrient1, amount2), amount1 > amount2.\n.output Answer", "completions": [".decl Has_nutrient(Food:symbol, Nutrient:symbol, Amount:float)\nHas_nutrient(\"raw carrots\", \"vitamin A\", 835).\nHas_nutrient(\"cooked carrots\", \"vitamin A\", 666).\nHas_nutrient(\"spinach\", \"vitamin A\", 469).\n.decl Answer()\nAnswer() :- Has_nutrient(\"raw carrots\", nutrient1, amount1), Has_nutrient(food2, nutrient1, amount2), amount1 > amount2.\n.output Answer"]}
{"id": 2149, "answer": false, "completion": ".decl Arrives_with_vehicle(Person:symbol, Vehicle:symbol, Event:symbol)\nArrives_with_vehicle(\"John Cena\", \"pickup truck\", \"Wrestlemania X\").\nArrives_with_vehicle(\"The Rock\", \"Ferrari\", \"Wrestlemania X\").\n.decl Is_green(Vehicle:symbol)\nIs_green(\"Toyota Prius\").\n.decl Answer()\nAnswer() :- Arrives_with_vehicle(person, \"Toyota Prius\", \"Wrestlemania X\"), Is_green(\"Toyota Prius\").\n.output Answer", "completions": [".decl Arrives_with_vehicle(Person:symbol, Vehicle:symbol, Event:symbol)\nArrives_with_vehicle(\"John Cena\", \"pickup truck\", \"Wrestlemania X\").\nArrives_with_vehicle(\"The Rock\", \"Ferrari\", \"Wrestlemania X\").\n.decl Is_green(Vehicle:symbol)\nIs_green(\"Toyota Prius\").\n.decl Answer()\nAnswer() :- Arrives_with_vehicle(person, \"Toyota Prius\", \"Wrestlemania X\"), Is_green(\"Toyota Prius\").\n.output Answer"]}
{"id": 2150, "answer": false, "completion": ".decl Celebrates(Person:symbol, Event:symbol)\nCelebrates(\"Emmanuel Macron\", \"Bastille Day\").\n.decl Answer()\nAnswer() :- not Celebrates(\"Emmanuel Macron\", \"Cinco de Mayo\").\n.output Answer", "completions": [".decl Celebrates(Person:symbol, Event:symbol)\nCelebrates(\"Emmanuel Macron\", \"Bastille Day\").\n.decl Answer()\nAnswer() :- not Celebrates(\"Emmanuel Macron\", \"Cinco de Mayo\").\n.output Answer"]}
{"id": 2151, "answer": false, "completion": ".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sand cat\", \"eel\").\n.decl Avoids(Animal_A:symbol, Animal_B:symbol)\nAvoids(\"sand cat\", \"prey\").\n.decl Answer()\nAnswer() :- Eats(\"sand cat\", prey), Avoids(\"sand cat\", prey), !Eats(\"sand cat\", prey).\n.output Answer", "completions": [".decl Eats(Animal_A:symbol, Animal_B:symbol)\nEats(\"sand cat\", \"eel\").\n.decl Avoids(Animal_A:symbol, Animal_B:symbol)\nAvoids(\"sand cat\", \"prey\").\n.decl Answer()\nAnswer() :- Eats(\"sand cat\", prey), Avoids(\"sand cat\", prey), !Eats(\"sand cat\", prey).\n.output Answer"]}
{"id": 2152, "answer": false, "completion": ".decl Wrestler(Person:symbol)\nWrestler(\"Drew Carey\").\n.decl Important_to_history(Person:symbol)\nImportant_to_history(\"Hulk Hogan\").\nImportant_to_history(\"Stone Cold Steve Austin\").\nImportant_to_history(\"The Rock\").\n.decl Answer()\nAnswer() :- Wrestler(person), Important_to_history(person), person != \"Drew Carey\".\n.output Answer", "completions": [".decl Wrestler(Person:symbol)\nWrestler(\"Drew Carey\").\n.decl Important_to_history(Person:symbol)\nImportant_to_history(\"Hulk Hogan\").\nImportant_to_history(\"Stone Cold Steve Austin\").\nImportant_to_history(\"The Rock\").\n.decl Answer()\nAnswer() :- Wrestler(person), Important_to_history(person), person != \"Drew Carey\".\n.output Answer"]}
{"id": 2153, "answer": true, "completion": ".decl Reduces_jobs(Industry:symbol, Region:symbol)\nReduces_jobs(\"fossil fuels\", \"Gulf of Mexico\").\n.decl Answer()\nAnswer() :- Reduces_jobs(\"fossil fuels\", \"Gulf of Mexico\").\n.output Answer", "completions": [".decl Reduces_jobs(Industry:symbol, Region:symbol)\nReduces_jobs(\"fossil fuels\", \"Gulf of Mexico\").\n.decl Answer()\nAnswer() :- Reduces_jobs(\"fossil fuels\", \"Gulf of Mexico\").\n.output Answer"]}
{"id": 2154, "answer": false, "completion": ".decl Built_by(Creation:symbol, Builder:symbol)\nBuilt_by(\"pyramids\", \"ancient Egyptians\").\n.decl Fought_in_war(Army:symbol, War:symbol)\nFought_in_war(\"Roman army\", \"Gallic Wars\").\n.decl Answer()\nAnswer() :- Built_by(\"pyramids\", builder), Fought_in_war(army, \"Gallic Wars\"), builder != \"ancient Egyptians\".\n.output Answer", "completions": [".decl Built_by(Creation:symbol, Builder:symbol)\nBuilt_by(\"pyramids\", \"ancient Egyptians\").\n.decl Fought_in_war(Army:symbol, War:symbol)\nFought_in_war(\"Roman army\", \"Gallic Wars\").\n.decl Answer()\nAnswer() :- Built_by(\"pyramids\", builder), Fought_in_war(army, \"Gallic Wars\"), builder != \"ancient Egyptians\".\n.output Answer"]}
{"id": 2155, "answer": true, "completion": ".decl Works_at(Person:symbol, Company:symbol)\nWorks_at(\"John\", \"Nissan\").\n.decl Uses_utensil(Person:symbol, Utensil:symbol)\nUses_utensil(\"John\", \"chopsticks\").\n.decl Answer()\nAnswer() :- Works_at(person, \"Nissan\"), !Uses_utensil(person, \"fork\").\n.output Answer", "completions": [".decl Works_at(Person:symbol, Company:symbol)\nWorks_at(\"John\", \"Nissan\").\n.decl Uses_utensil(Person:symbol, Utensil:symbol)\nUses_utensil(\"John\", \"chopsticks\").\n.decl Answer()\nAnswer() :- Works_at(person, \"Nissan\"), !Uses_utensil(person, \"fork\").\n.output Answer"]}
{"id": 2156, "answer": false, "completion": ".decl Lives_in_environment(Animal:symbol, Environment:symbol)\nLives_in_environment(\"manta ray\", \"water\").\n.decl Has_temperature(Environment:symbol, Temperature:float)\nHas_temperature(\"water\", 20).\n.decl Safe_temperature_for_cold_food_storage(Temperature:float)\nSafe_temperature_for_cold_food_storage(4).\n.decl Answer()\nAnswer() :- Lives_in_environment(\"manta ray\", environment), Has_temperature(environment, temperature), temperature > Safe_temperature_for_cold_food_storage(temp).\n.output Answer", "completions": [".decl Lives_in_environment(Animal:symbol, Environment:symbol)\nLives_in_environment(\"manta ray\", \"water\").\n.decl Has_temperature(Environment:symbol, Temperature:float)\nHas_temperature(\"water\", 20).\n.decl Safe_temperature_for_cold_food_storage(Temperature:float)\nSafe_temperature_for_cold_food_storage(4).\n.decl Answer()\nAnswer() :- Lives_in_environment(\"manta ray\", environment), Has_temperature(environment, temperature), temperature > Safe_temperature_for_cold_food_storage(temp).\n.output Answer"]}
{"id": 2157, "answer": true, "completion": ".decl Has_n_people(Activity:symbol, N_people:float)\nHas_n_people(\"felony jury\", 12).\nHas_n_people(\"Bunco game\", 8).\n.decl Answer()\nAnswer() :- Has_n_people(\"felony jury\", n_people), Has_n_people(\"Bunco game\", 8), n_people >= 8.\n.output Answer", "completions": [".decl Has_n_people(Activity:symbol, N_people:float)\nHas_n_people(\"felony jury\", 12).\nHas_n_people(\"Bunco game\", 8).\n.decl Answer()\nAnswer() :- Has_n_people(\"felony jury\", n_people), Has_n_people(\"Bunco game\", 8), n_people >= 8.\n.output Answer"]}
{"id": 2158, "answer": true, "completion": ".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Eiffel Tower\", 324).\n.decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Arctic Ocean's deepest point\", 5554).\n.decl Answer()\nAnswer() :- Has_height(\"Eiffel Tower\", height), Has_depth(\"Arctic Ocean's deepest point\", depth), height < depth.\n.output Answer", "completions": [".decl Has_height(Object:symbol, Height:float)\nHas_height(\"Eiffel Tower\", 324).\n.decl Has_depth(Location:symbol, Depth:float)\nHas_depth(\"Arctic Ocean's deepest point\", 5554).\n.decl Answer()\nAnswer() :- Has_height(\"Eiffel Tower\", height), Has_depth(\"Arctic Ocean's deepest point\", depth), height < depth.\n.output Answer"]}
{"id": 2159, "answer": false, "completion": ".decl Job_title(Person:symbol, Title:symbol)\nJob_title(\"CEO\", \"Chief Executive Officer\").\n.decl Job_duty(Title:symbol, Duty:symbol)\nJob_duty(\"Janitor\", \"cleaning toilets\").\nJob_duty(\"CEO\", \"managing company\").\n.decl Answer()\nAnswer() :- Job_title(\"CEO\", title), Job_duty(title, duty), duty = \"cleaning toilets\", !.\nAnswer() :- Job_title(\"CEO\", title), Job_duty(title, duty), duty != \"cleaning toilets\".\n.output Answer", "completions": [".decl Job_title(Person:symbol, Title:symbol)\nJob_title(\"CEO\", \"Chief Executive Officer\").\n.decl Job_duty(Title:symbol, Duty:symbol)\nJob_duty(\"Janitor\", \"cleaning toilets\").\nJob_duty(\"CEO\", \"managing company\").\n.decl Answer()\nAnswer() :- Job_title(\"CEO\", title), Job_duty(title, duty), duty = \"cleaning toilets\", !.\nAnswer() :- Job_title(\"CEO\", title), Job_duty(title, duty), duty != \"cleaning toilets\".\n.output Answer"]}
{"id": 2160, "answer": true, "completion": ".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas\", month), In_season(month, season), season = \"winter\".\n.output Answer", "completions": [".decl Happens_in_time(Event:symbol, Time:symbol)\nHappens_in_time(\"Christmas\", \"December\").\n.decl In_season(Month:symbol, Season:symbol)\nIn_season(\"December\", \"winter\").\n.decl Answer()\nAnswer() :- Happens_in_time(\"Christmas\", month), In_season(month, season), season = \"winter\".\n.output Answer"]}
{"id": 2161, "answer": false, "completion": ".decl Romantic_relationship(Person1:symbol, Person2:symbol)\nRomantic_relationship(\"Queen Margot\", \"Henry of Navarre\").\n.decl Authorship(Person:symbol, Work:symbol)\nAuthorship(\"Moliere\", \"Tartuffe\").\n.decl Answer()\nAnswer() :- Romantic_relationship(\"Queen Margot\", lover), Authorship(\"Moliere\", work), work != \"Tartuffe\", lover = \"Moliere\".\n.output Answer", "completions": [".decl Romantic_relationship(Person1:symbol, Person2:symbol)\nRomantic_relationship(\"Queen Margot\", \"Henry of Navarre\").\n.decl Authorship(Person:symbol, Work:symbol)\nAuthorship(\"Moliere\", \"Tartuffe\").\n.decl Answer()\nAnswer() :- Romantic_relationship(\"Queen Margot\", lover), Authorship(\"Moliere\", work), work != \"Tartuffe\", lover = \"Moliere\".\n.output Answer"]}
{"id": 2162, "answer": true, "completion": ".decl Needs(Element:symbol, Requirement:symbol)\nNeeds(\"Hostas\", \"water\").\nNeeds(\"Hostas\", \"shade\").\n.decl Has(Element:symbol, Property:symbol)\nHas(\"Hostas\", \"green leaves\").\nHas(\"Hostas\", \"chlorophyll\").\n.decl Answer()\nAnswer() :- Needs(\"Hostas\", requirement), Has(\"Hostas\", property), requirement != \"chlorophyll\".\n.output Answer", "completions": [".decl Needs(Element:symbol, Requirement:symbol)\nNeeds(\"Hostas\", \"water\").\nNeeds(\"Hostas\", \"shade\").\n.decl Has(Element:symbol, Property:symbol)\nHas(\"Hostas\", \"green leaves\").\nHas(\"Hostas\", \"chlorophyll\").\n.decl Answer()\nAnswer() :- Needs(\"Hostas\", requirement), Has(\"Hostas\", property), requirement != \"chlorophyll\".\n.output Answer"]}
{"id": 2163, "answer": false, "completion": ".decl Has_length(Poem:symbol, Length:float)\nHas_length(\"Rime of the Ancient Mariner\", 625).\n.decl Has_rhyme_scheme(Poem:symbol, Rhyme_scheme:symbol)\nHas_rhyme_scheme(\"Rime of the Ancient Mariner\", \"abcb\").\n.decl Answer()\nAnswer() :- Has_length(\"Rime of the Ancient Mariner\", length), length <= 14.\nAnswer() :- Has_rhyme_scheme(\"Rime of the Ancient Mariner\", \"abab\"), Has_rhyme_scheme(\"Rime of the Ancient Mariner\", \"cdcd\"), Has_rhyme_scheme(\"Rime of the Ancient Mariner\", \"efef\"), Has_rhyme_scheme(\"Rime of the Ancient Mariner\", \"gg\").\n.output Answer", "completions": [".decl Has_length(Poem:symbol, Length:float)\nHas_length(\"Rime of the Ancient Mariner\", 625).\n.decl Has_rhyme_scheme(Poem:symbol, Rhyme_scheme:symbol)\nHas_rhyme_scheme(\"Rime of the Ancient Mariner\", \"abcb\").\n.decl Answer()\nAnswer() :- Has_length(\"Rime of the Ancient Mariner\", length), length <= 14.\nAnswer() :- Has_rhyme_scheme(\"Rime of the Ancient Mariner\", \"abab\"), Has_rhyme_scheme(\"Rime of the Ancient Mariner\", \"cdcd\"), Has_rhyme_scheme(\"Rime of the Ancient Mariner\", \"efef\"), Has_rhyme_scheme(\"Rime of the Ancient Mariner\", \"gg\").\n.output Answer"]}
{"id": 2164, "answer": true, "completion": ".decl Interested_in(Field:symbol, Topic:symbol)\nInterested_in(\"astronomy\", \"stars\").\n.decl Answer()\nAnswer() :- Interested_in(\"astronomy\", topic), topic != \"drosophila\".\n.output Answer", "completions": [".decl Interested_in(Field:symbol, Topic:symbol)\nInterested_in(\"astronomy\", \"stars\").\n.decl Answer()\nAnswer() :- Interested_in(\"astronomy\", topic), topic != \"drosophila\".\n.output Answer"]}
{"id": 2165, "answer": false, "completion": ".decl Available_in_year(Item:symbol, Year:float)\nAvailable_in_year(\"Hershey's Kisses in red foil\", 1950).\n.decl Currency_worth(Currency:symbol, Year:float, Worth:float)\nCurrency_worth(\"farthing\", 1950, 0.25).\nCurrency_worth(\"farthing\", 1960, 0.125).\n.decl Answer()\nAnswer() :- Available_in_year(\"Hershey's Kisses in red foil\", year1), Currency_worth(currency1, year1, worth1), Currency_worth(\"farthing\", 1960, worth2), worth1 <= worth2.\n.output Answer", "completions": [".decl Available_in_year(Item:symbol, Year:float)\nAvailable_in_year(\"Hershey's Kisses in red foil\", 1950).\n.decl Currency_worth(Currency:symbol, Year:float, Worth:float)\nCurrency_worth(\"farthing\", 1950, 0.25).\nCurrency_worth(\"farthing\", 1960, 0.125).\n.decl Answer()\nAnswer() :- Available_in_year(\"Hershey's Kisses in red foil\", year1), Currency_worth(currency1, year1, worth1), Currency_worth(\"farthing\", 1960, worth2), worth1 <= worth2.\n.output Answer"]}
{"id": 2166, "answer": true, "completion": ".decl Has_brain_structure(Person:symbol, Structure:symbol)\nHas_brain_structure(\"Gauss\", \"normal\").\n.decl Answer()\nAnswer() :- Has_brain_structure(\"Gauss\", \"normal\").\n.output Answer", "completions": [".decl Has_brain_structure(Person:symbol, Structure:symbol)\nHas_brain_structure(\"Gauss\", \"normal\").\n.decl Answer()\nAnswer() :- Has_brain_structure(\"Gauss\", \"normal\").\n.output Answer"]}
{"id": 2167, "answer": false, "completion": ".decl Route_of_administration(Drug:symbol, Route:symbol)\nRoute_of_administration(\"cocaine\", \"nasal\").\nRoute_of_administration(\"heroin\", \"intravenous\").\n.decl Answer()\nAnswer() :- Route_of_administration(\"dopamine\", \"nasal\").\n.output Answer", "completions": [".decl Route_of_administration(Drug:symbol, Route:symbol)\nRoute_of_administration(\"cocaine\", \"nasal\").\nRoute_of_administration(\"heroin\", \"intravenous\").\n.decl Answer()\nAnswer() :- Route_of_administration(\"dopamine\", \"nasal\").\n.output Answer"]}
{"id": 2168, "answer": true, "completion": ".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Frida Kahlo\", \"moustache\").\nHas_trait(\"Salvador Dali\", \"moustache\").\nHas_trait(\"Albert Einstein\", \"moustache\").\n.decl Gender(Person:symbol, Gender:symbol)\nGender(\"Frida Kahlo\", \"female\").\nGender(\"Salvador Dali\", \"male\").\nGender(\"Albert Einstein\", \"male\").\n.decl Answer()\nAnswer() :- Gender(person, \"female\"), Has_trait(person, \"moustache\").\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol)\nHas_trait(\"Frida Kahlo\", \"moustache\").\nHas_trait(\"Salvador Dali\", \"moustache\").\nHas_trait(\"Albert Einstein\", \"moustache\").\n.decl Gender(Person:symbol, Gender:symbol)\nGender(\"Frida Kahlo\", \"female\").\nGender(\"Salvador Dali\", \"male\").\nGender(\"Albert Einstein\", \"male\").\n.decl Answer()\nAnswer() :- Gender(person, \"female\"), Has_trait(person, \"moustache\").\n.output Answer"]}
{"id": 2169, "answer": false, "completion": ".decl Ancestor(Person:symbol, Ancestor:symbol)\nAncestor(\"Demi Lovato\", \"unknown ancestor\").\n.decl Invented_food(Food:symbol, Inventor:symbol)\nInvented_food(\"popcorn\", \"unknown inventor\").\nInvented_food(\"maize\", \"indigenous peoples\").\n.decl Answer()\nAnswer() :- Ancestor(\"Demi Lovato\", ancestor), Invented_food(\"maize\", inventor), Invented_food(\"popcorn\", inventor), Ancestor(ancestor, ancestor2), ancestor2 = \"indigenous peoples\".\n.output Answer", "completions": [".decl Ancestor(Person:symbol, Ancestor:symbol)\nAncestor(\"Demi Lovato\", \"unknown ancestor\").\n.decl Invented_food(Food:symbol, Inventor:symbol)\nInvented_food(\"popcorn\", \"unknown inventor\").\nInvented_food(\"maize\", \"indigenous peoples\").\n.decl Answer()\nAnswer() :- Ancestor(\"Demi Lovato\", ancestor), Invented_food(\"maize\", inventor), Invented_food(\"popcorn\", inventor), Ancestor(ancestor, ancestor2), ancestor2 = \"indigenous peoples\".\n.output Answer"]}
{"id": 2170, "answer": true, "completion": ".decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Long John Silver's\", \"fish\").\nServes(\"Red Lobster\", \"seafood\").\n.decl Answer()\nAnswer() :- Serves(\"Long John Silver's\", food), food != \"sea otter\".\n.output Answer", "completions": [".decl Serves(Restaurant:symbol, Food:symbol)\nServes(\"Long John Silver's\", \"fish\").\nServes(\"Red Lobster\", \"seafood\").\n.decl Answer()\nAnswer() :- Serves(\"Long John Silver's\", food), food != \"sea otter\".\n.output Answer"]}
{"id": 2171, "answer": true, "completion": ".decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Has_n_days(Week:symbol, N_days:float)\nHas_n_days(\"week\", 7).\n.decl Answer()\nAnswer() :- Is_prime(n), Has_n_days(\"week\", n).\n.output Answer", "completions": [".decl Is_prime(Number:float)\nIs_prime(2).\nIs_prime(3).\nIs_prime(5).\nIs_prime(7).\nIs_prime(11).\nIs_prime(13).\nIs_prime(17).\nIs_prime(19).\nIs_prime(23).\nIs_prime(29).\nIs_prime(31).\nIs_prime(37).\nIs_prime(41).\nIs_prime(43).\nIs_prime(47).\nIs_prime(53).\nIs_prime(59).\nIs_prime(61).\nIs_prime(67).\nIs_prime(71).\nIs_prime(73).\nIs_prime(79).\nIs_prime(83).\nIs_prime(89).\nIs_prime(97).\n.decl Has_n_days(Week:symbol, N_days:float)\nHas_n_days(\"week\", 7).\n.decl Answer()\nAnswer() :- Is_prime(n), Has_n_days(\"week\", n).\n.output Answer"]}
{"id": 2172, "answer": false, "completion": ".decl Ate(Person:symbol, Food:symbol)\nAte(\"Şerafeddin Sabuncuoğlu\", \"kebab\").\n.decl Originated_from(Food:symbol, Country:symbol)\nOriginated_from(\"Börek\", \"Turkey\").\n.decl Answer()\nAnswer() :- Ate(\"Şerafeddin Sabuncuoğlu\", food), Originated_from(food, \"Turkey\").\n.output Answer", "completions": [".decl Ate(Person:symbol, Food:symbol)\nAte(\"Şerafeddin Sabuncuoğlu\", \"kebab\").\n.decl Originated_from(Food:symbol, Country:symbol)\nOriginated_from(\"Börek\", \"Turkey\").\n.decl Answer()\nAnswer() :- Ate(\"Şerafeddin Sabuncuoğlu\", food), Originated_from(food, \"Turkey\").\n.output Answer"]}
{"id": 2173, "answer": false, "completion": ".decl Causes_injury(Therapy:symbol, Injury:symbol)\nCauses_injury(\"acupuncture\", \"bruises\").\nCauses_injury(\"massage\", \"soreness\").\n.decl Answer()\nAnswer() :- Causes_injury(therapy, \"bruises\"), therapy = \"reiki\", !.\nAnswer() :- not Causes_injury(\"reiki\", injury).\n.output Answer", "completions": [".decl Causes_injury(Therapy:symbol, Injury:symbol)\nCauses_injury(\"acupuncture\", \"bruises\").\nCauses_injury(\"massage\", \"soreness\").\n.decl Answer()\nAnswer() :- Causes_injury(therapy, \"bruises\"), therapy = \"reiki\", !.\nAnswer() :- not Causes_injury(\"reiki\", injury).\n.output Answer"]}
{"id": 2174, "answer": true, "completion": ".decl Included_in(Event:symbol, Memorial:symbol)\nIncluded_in(\"Firefighters\", \"September 11th Memorial\").\nIncluded_in(\"Police Officers\", \"September 11th Memorial\").\nIncluded_in(\"Victims\", \"September 11th Memorial\").\n.decl Answer()\nAnswer() :- Included_in(\"Firefighters\", memorial).\n.output Answer", "completions": [".decl Included_in(Event:symbol, Memorial:symbol)\nIncluded_in(\"Firefighters\", \"September 11th Memorial\").\nIncluded_in(\"Police Officers\", \"September 11th Memorial\").\nIncluded_in(\"Victims\", \"September 11th Memorial\").\n.decl Answer()\nAnswer() :- Included_in(\"Firefighters\", memorial).\n.output Answer"]}
{"id": 2175, "answer": true, "completion": ".decl Believes(Person:symbol, Concept:symbol)\nBelieves(\"Martin Luther\", \"Satan\").\n.decl Answer()\nAnswer() :- Believes(\"Martin Luther\", \"Satan\").\n.output Answer", "completions": [".decl Believes(Person:symbol, Concept:symbol)\nBelieves(\"Martin Luther\", \"Satan\").\n.decl Answer()\nAnswer() :- Believes(\"Martin Luther\", \"Satan\").\n.output Answer"]}
{"id": 2176, "answer": true, "completion": ".decl Identified_in_year(Artwork:symbol, Year:float)\nIdentified_in_year(\"Donatello crucifix\", 2020).\n.decl Is_life_size(Artwork:symbol)\nIs_life_size(\"Donatello crucifix\").\n.decl Answer()\nAnswer() :- Identified_in_year(\"Donatello crucifix\", year), Is_life_size(\"Donatello crucifix\"), year = 2020.\n.output Answer", "completions": [".decl Identified_in_year(Artwork:symbol, Year:float)\nIdentified_in_year(\"Donatello crucifix\", 2020).\n.decl Is_life_size(Artwork:symbol)\nIs_life_size(\"Donatello crucifix\").\n.decl Answer()\nAnswer() :- Identified_in_year(\"Donatello crucifix\", year), Is_life_size(\"Donatello crucifix\"), year = 2020.\n.output Answer"]}
{"id": 2177, "answer": true, "completion": ".decl Has_trait(Person:symbol, Trait:symbol, Value:float)\nHas_trait(\"Neville Longbottom\", \"courage\", 8).\nHas_trait(\"Neville Longbottom\", \"age\", 11).\nHas_trait(\"Neville Longbottom\", \"courage\", 5).\nHas_trait(\"Neville Longbottom\", \"age\", 17).\n.decl Answer()\nAnswer() :- Has_trait(\"Neville Longbottom\", \"courage\", courage1), Has_trait(\"Neville Longbottom\", \"age\", age1), Has_trait(\"Neville Longbottom\", \"courage\", courage2), Has_trait(\"Neville Longbottom\", \"age\", age2), age1 < age2, courage1 > courage2.\n.output Answer", "completions": [".decl Has_trait(Person:symbol, Trait:symbol, Value:float)\nHas_trait(\"Neville Longbottom\", \"courage\", 8).\nHas_trait(\"Neville Longbottom\", \"age\", 11).\nHas_trait(\"Neville Longbottom\", \"courage\", 5).\nHas_trait(\"Neville Longbottom\", \"age\", 17).\n.decl Answer()\nAnswer() :- Has_trait(\"Neville Longbottom\", \"courage\", courage1), Has_trait(\"Neville Longbottom\", \"age\", age1), Has_trait(\"Neville Longbottom\", \"courage\", courage2), Has_trait(\"Neville Longbottom\", \"age\", age2), age1 < age2, courage1 > courage2.\n.output Answer"]}
{"id": 2178, "answer": false, "completion": ".decl Has_experience(Model:symbol, Experience:symbol)\nHas_experience(\"Maggie Q\", \"action movies\").\nHas_experience(\"Maggie Q\", \"spy roles\").\n.decl Fits_genre(Genre:symbol, Model:symbol)\nFits_genre(\"action\", model1).\nFits_genre(\"thriller\", model1).\nFits_genre(\"drama\", model2).\nFits_genre(\"romance\", model2).\n.decl Answer()\nAnswer() :- Has_experience(model1, \"action movies\"), Has_experience(model1, \"spy roles\"), Fits_genre(\"thriller\", model1).\nAnswer() :- Has_experience(model2, \"drama\"), Fits_genre(\"romance\", model2).\n.output Answer", "completions": [".decl Has_experience(Model:symbol, Experience:symbol)\nHas_experience(\"Maggie Q\", \"action movies\").\nHas_experience(\"Maggie Q\", \"spy roles\").\n.decl Fits_genre(Genre:symbol, Model:symbol)\nFits_genre(\"action\", model1).\nFits_genre(\"thriller\", model1).\nFits_genre(\"drama\", model2).\nFits_genre(\"romance\", model2).\n.decl Answer()\nAnswer() :- Has_experience(model1, \"action movies\"), Has_experience(model1, \"spy roles\"), Fits_genre(\"thriller\", model1).\nAnswer() :- Has_experience(model2, \"drama\"), Fits_genre(\"romance\", model2).\n.output Answer"]}
{"id": 2179, "answer": true, "completion": ".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Peter Griffin\", \"Pawtucket Brewery\").\n.decl Needs(Company:symbol, Item:symbol)\nNeeds(\"Pawtucket Brewery\", \"hops\").\nNeeds(\"Pawtucket Brewery\", \"barley\").\n.decl Answer()\nAnswer() :- Works_for(person, company), Needs(company, \"barley\").\n.output Answer", "completions": [".decl Works_for(Person:symbol, Company:symbol)\nWorks_for(\"Peter Griffin\", \"Pawtucket Brewery\").\n.decl Needs(Company:symbol, Item:symbol)\nNeeds(\"Pawtucket Brewery\", \"hops\").\nNeeds(\"Pawtucket Brewery\", \"barley\").\n.decl Answer()\nAnswer() :- Works_for(person, company), Needs(company, \"barley\").\n.output Answer"]}
{"id": 2180, "answer": false, "completion": ".decl Kills_virus(Substance:symbol, Virus:symbol)\nKills_virus(\"olive oil\", \"none\").\n.decl Answer()\nAnswer() :- Kills_virus(\"olive oil\", \"rabies\").\n.output Answer", "completions": [".decl Kills_virus(Substance:symbol, Virus:symbol)\nKills_virus(\"olive oil\", \"none\").\n.decl Answer()\nAnswer() :- Kills_virus(\"olive oil\", \"rabies\").\n.output Answer"]}
{"id": 2181, "answer": true, "completion": ".decl Visited(Person:symbol, Place:symbol)\nVisited(\"Magellan\", \"Guam\").\n.decl Met(Person1:symbol, Person2:symbol)\nMet(\"Magellan\", \"Queen Victoria\").\n.decl Answer()\nAnswer() :- Visited(\"Magellan\", \"Guam\"), Met(\"Magellan\", \"Queen Victoria\").\n.output Answer", "completions": [".decl Visited(Person:symbol, Place:symbol)\nVisited(\"Magellan\", \"Guam\").\n.decl Met(Person1:symbol, Person2:symbol)\nMet(\"Magellan\", \"Queen Victoria\").\n.decl Answer()\nAnswer() :- Visited(\"Magellan\", \"Guam\"), Met(\"Magellan\", \"Queen Victoria\").\n.output Answer"]}
{"id": 2182, "answer": false, "completion": ".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"American black bear\", 1.5).\nHas_size(\"sun bear\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"American black bear\", size1), Has_size(\"sun bear\", size2), size1 > size2*2.\n.output Answer", "completions": [".decl Has_size(Animal:symbol, Size:float)\nHas_size(\"American black bear\", 1.5).\nHas_size(\"sun bear\", 1).\n.decl Answer()\nAnswer() :- Has_size(\"American black bear\", size1), Has_size(\"sun bear\", size2), size1 > size2*2.\n.output Answer"]}
{"id": 2183, "answer": false, "completion": ".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Adam Sandler's home\", 5000).\n.decl Average_family_size(Size:float)\nAverage_family_size(3.14).\n.decl Answer()\nAnswer() :- Has_size(\"Adam Sandler's home\", size), Average_family_size(avg_size), size < avg_size*4.\n.output Answer", "completions": [".decl Has_size(Object:symbol, Size:float)\nHas_size(\"Adam Sandler's home\", 5000).\n.decl Average_family_size(Size:float)\nAverage_family_size(3.14).\n.decl Answer()\nAnswer() :- Has_size(\"Adam Sandler's home\", size), Average_family_size(avg_size), size < avg_size*4.\n.output Answer"]}
{"id": 2184, "answer": false, "completion": ".decl Contains(Vegetable:symbol, Nutrient:symbol)\nContains(\"brussels sprouts\", \"vitamin K\").\n.decl Beneficial_for(Medical_condition:symbol, Nutrient:symbol)\nBeneficial_for(\"Coumadin\", \"!vitamin K\").\n.decl Eaten_in(Meal:symbol, Vegetable:symbol)\nEaten_in(\"dinner\", \"brussels sprouts\").\nEaten_in(\"lunch\", \"brussels sprouts\").\nEaten_in(\"breakfast\", \"oatmeal\").\n.decl Answer()\nAnswer() :- Eaten_in(meal, \"brussels sprouts\"), Contains(\"brussels sprouts\", nutrient), Beneficial_for(\"Coumadin\", !nutrient).\n.output Answer", "completions": [".decl Contains(Vegetable:symbol, Nutrient:symbol)\nContains(\"brussels sprouts\", \"vitamin K\").\n.decl Beneficial_for(Medical_condition:symbol, Nutrient:symbol)\nBeneficial_for(\"Coumadin\", \"!vitamin K\").\n.decl Eaten_in(Meal:symbol, Vegetable:symbol)\nEaten_in(\"dinner\", \"brussels sprouts\").\nEaten_in(\"lunch\", \"brussels sprouts\").\nEaten_in(\"breakfast\", \"oatmeal\").\n.decl Answer()\nAnswer() :- Eaten_in(meal, \"brussels sprouts\"), Contains(\"brussels sprouts\", nutrient), Beneficial_for(\"Coumadin\", !nutrient).\n.output Answer"]}
{"id": 2185, "answer": false, "completion": ".decl Belongs_to_religion(Location:symbol, Religion:symbol)\nBelongs_to_religion(\"Jerusalem\", \"Judaism\").\nBelongs_to_religion(\"Jerusalem\", \"Christianity\").\nBelongs_to_religion(\"Jerusalem\", \"Islam\").\nBelongs_to_religion(\"Mecca\", \"Islam\").\nBelongs_to_religion(\"Varanasi\", \"Hinduism\").\n.decl Answer()\nAnswer() :- Belongs_to_religion(\"Holy Land\", religion), Belongs_to_religion(location, religion), location != \"Holy Land\".\n.output Answer", "completions": [".decl Belongs_to_religion(Location:symbol, Religion:symbol)\nBelongs_to_religion(\"Jerusalem\", \"Judaism\").\nBelongs_to_religion(\"Jerusalem\", \"Christianity\").\nBelongs_to_religion(\"Jerusalem\", \"Islam\").\nBelongs_to_religion(\"Mecca\", \"Islam\").\nBelongs_to_religion(\"Varanasi\", \"Hinduism\").\n.decl Answer()\nAnswer() :- Belongs_to_religion(\"Holy Land\", religion), Belongs_to_religion(location, religion), location != \"Holy Land\".\n.output Answer"]}
{"id": 2186, "answer": true, "completion": ".decl Job_security(Person:symbol, Security:symbol)\nJob_security(\"Prime Minister of the United Kingdom\", \"low\").\n.decl Answer()\nAnswer() :- Job_security(\"Prime Minister of the United Kingdom\", \"low\").\n.output Answer", "completions": [".decl Job_security(Person:symbol, Security:symbol)\nJob_security(\"Prime Minister of the United Kingdom\", \"low\").\n.decl Answer()\nAnswer() :- Job_security(\"Prime Minister of the United Kingdom\", \"low\").\n.output Answer"]}
{"id": 2187, "answer": false, "completion": ".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Symphony of the Seas\", 6680).\n.decl Has_n_soldiers(Army:symbol, N_soldiers:float)\nHas_n_soldiers(\"People's Volunteer Army\", 2300000).\n.decl Answer()\nAnswer() :- Has_n_soldiers(\"People's Volunteer Army\", n_soldiers), Has_capacity(\"Symphony of the Seas\", capacity), n_soldiers <= capacity.\n.output Answer", "completions": [".decl Has_capacity(Vehicle:symbol, Capacity:float)\nHas_capacity(\"Symphony of the Seas\", 6680).\n.decl Has_n_soldiers(Army:symbol, N_soldiers:float)\nHas_n_soldiers(\"People's Volunteer Army\", 2300000).\n.decl Answer()\nAnswer() :- Has_n_soldiers(\"People's Volunteer Army\", n_soldiers), Has_capacity(\"Symphony of the Seas\", capacity), n_soldiers <= capacity.\n.output Answer"]}
{"id": 2188, "answer": false, "completion": ".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"Mike Tyson\", \"professional boxer\").\n.decl Has_dental_bills(Person:symbol, Amount:float)\nHas_dental_bills(\"Mike Tyson\", 10000).\n.decl Answer()\nAnswer() :- Occupation(person, \"professional boxer\"), Has_dental_bills(person, amount), amount < 5000.\n.output Answer", "completions": [".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"Mike Tyson\", \"professional boxer\").\n.decl Has_dental_bills(Person:symbol, Amount:float)\nHas_dental_bills(\"Mike Tyson\", 10000).\n.decl Answer()\nAnswer() :- Occupation(person, \"professional boxer\"), Has_dental_bills(person, amount), amount < 5000.\n.output Answer"]}
{"id": 2189, "answer": false, "completion": ".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"leader of Heaven's Gate\", \"cult leader\").\n.decl Can_save_in_format(Job:symbol, Format:symbol)\nCan_save_in_format(\"computer programmer\", \"JPEG\").\nCan_save_in_format(\"graphic designer\", \"JPEG\").\n.decl Answer()\nAnswer() :- Occupation(\"leader of Heaven's Gate\", job), Can_save_in_format(job, \"JPEG\").\n.output Answer", "completions": [".decl Occupation(Person:symbol, Job:symbol)\nOccupation(\"leader of Heaven's Gate\", \"cult leader\").\n.decl Can_save_in_format(Job:symbol, Format:symbol)\nCan_save_in_format(\"computer programmer\", \"JPEG\").\nCan_save_in_format(\"graphic designer\", \"JPEG\").\n.decl Answer()\nAnswer() :- Occupation(\"leader of Heaven's Gate\", job), Can_save_in_format(job, \"JPEG\").\n.output Answer"]}
{"id": 2190, "answer": true, "completion": ".decl Political_association(Person1:symbol, Person2:symbol, Association:symbol)\nPolitical_association(\"Pompey\", \"Caesar\", \"alliance\").\n.decl Influences_reality_tv(Person:symbol)\nInfluences_reality_tv(\"Caesar\").\n.decl Answer()\nAnswer() :- Political_association(\"Pompey\", \"Caesar\", association), Influences_reality_tv(\"Caesar\").\n.output Answer", "completions": [".decl Political_association(Person1:symbol, Person2:symbol, Association:symbol)\nPolitical_association(\"Pompey\", \"Caesar\", \"alliance\").\n.decl Influences_reality_tv(Person:symbol)\nInfluences_reality_tv(\"Caesar\").\n.decl Answer()\nAnswer() :- Political_association(\"Pompey\", \"Caesar\", association), Influences_reality_tv(\"Caesar\").\n.output Answer"]}
{"id": 2191, "answer": true, "completion": ".decl Is_authentic(Knight:symbol)\nIs_authentic(\"Sir Lancelot\").\nIs_authentic(\"Sir Galahad\").\nIs_authentic(\"Sir Robin\").\n.decl In_show(Knight:symbol)\nIn_show(\"Sir Lancelot\").\nIn_show(\"Sir Galahad\").\nIn_show(\"Sir Robin\").\nIn_show(\"Black Knight\").\n.decl Answer()\nAnswer() :- In_show(knight), !Is_authentic(knight).\n.output Answer", "completions": [".decl Is_authentic(Knight:symbol)\nIs_authentic(\"Sir Lancelot\").\nIs_authentic(\"Sir Galahad\").\nIs_authentic(\"Sir Robin\").\n.decl In_show(Knight:symbol)\nIn_show(\"Sir Lancelot\").\nIn_show(\"Sir Galahad\").\nIn_show(\"Sir Robin\").\nIn_show(\"Black Knight\").\n.decl Answer()\nAnswer() :- In_show(knight), !Is_authentic(knight).\n.output Answer"]}
{"id": 2192, "answer": false, "completion": ".decl Amendment(number:float, description:symbol)\nAmendment(23, \"granted residents of the District of Columbia the right to vote for president\").\nAmendment(24, \"prohibited poll taxes in federal elections\").\n.decl Answer()\nAnswer() :- Amendment(23, description), description =~ \"Puerto Rico\", description =~ \"right to vote for president\".\n.output Answer", "completions": [".decl Amendment(number:float, description:symbol)\nAmendment(23, \"granted residents of the District of Columbia the right to vote for president\").\nAmendment(24, \"prohibited poll taxes in federal elections\").\n.decl Answer()\nAnswer() :- Amendment(23, description), description =~ \"Puerto Rico\", description =~ \"right to vote for president\".\n.output Answer"]}
{"id": 2193, "answer": true, "completion": ".decl Has_game_format(Console:symbol, Format:symbol)\nHas_game_format(\"Nintendo\", \"cartridge\").\nHas_game_format(\"Playstation 3\", \"disc\").\n.decl Answer()\nAnswer() :- Has_game_format(\"Nintendo\", format1), Has_game_format(\"Playstation 3\", format2), format1 != format2.\n.output Answer", "completions": [".decl Has_game_format(Console:symbol, Format:symbol)\nHas_game_format(\"Nintendo\", \"cartridge\").\nHas_game_format(\"Playstation 3\", \"disc\").\n.decl Answer()\nAnswer() :- Has_game_format(\"Nintendo\", format1), Has_game_format(\"Playstation 3\", format2), format1 != format2.\n.output Answer"]}
{"id": 2194, "answer": false, "completion": ".decl Performs(Person:symbol, Piece:symbol)\nPerforms(\"Bruce Gandy\", \"bagpipes\").\n.decl Written_by(Piece:symbol, Composer:symbol)\nWritten_by(\"Messiah (Handel)\", \"George Frideric Handel\").\n.decl Answer()\nAnswer() :- Performs(\"Bruce Gandy\", instrument), Written_by(piece, composer), composer != \"George Frideric Handel\".\n.output Answer", "completions": [".decl Performs(Person:symbol, Piece:symbol)\nPerforms(\"Bruce Gandy\", \"bagpipes\").\n.decl Written_by(Piece:symbol, Composer:symbol)\nWritten_by(\"Messiah (Handel)\", \"George Frideric Handel\").\n.decl Answer()\nAnswer() :- Performs(\"Bruce Gandy\", instrument), Written_by(piece, composer), composer != \"George Frideric Handel\".\n.output Answer"]}
{"id": 2195, "answer": true, "completion": ".decl Direct_route(Start:symbol, End:symbol)\nDirect_route(\"NYC\", \"Moai location\").\n.decl Connected_route(Start:symbol, End:symbol)\nConnected_route(start, end) :- Direct_route(start, end).\nConnected_route(start, end) :- Direct_route(start, middle), Connected_route(middle, end), start != end, start != middle, middle != end.\n.decl Answer()\nAnswer() :- Connected_route(\"NYC\", \"Moai location\").\n.output Answer", "completions": [".decl Direct_route(Start:symbol, End:symbol)\nDirect_route(\"NYC\", \"Moai location\").\n.decl Connected_route(Start:symbol, End:symbol)\nConnected_route(start, end) :- Direct_route(start, end).\nConnected_route(start, end) :- Direct_route(start, middle), Connected_route(middle, end), start != end, start != middle, middle != end.\n.decl Answer()\nAnswer() :- Connected_route(\"NYC\", \"Moai location\").\n.output Answer"]}
{"id": 2196, "answer": false, "completion": ".decl Can_experience(Person:symbol, Emotion:symbol)\nCan_experience(\"awake person\", \"fear\").\nCan_experience(\"person in coma\", \"none\").\n.decl Answer()\nAnswer() :- Can_experience(\"awake person\", emotion), Can_experience(\"person in coma\", emotion).\n.output Answer", "completions": [".decl Can_experience(Person:symbol, Emotion:symbol)\nCan_experience(\"awake person\", \"fear\").\nCan_experience(\"person in coma\", \"none\").\n.decl Answer()\nAnswer() :- Can_experience(\"awake person\", emotion), Can_experience(\"person in coma\", emotion).\n.output Answer"]}
{"id": 2197, "answer": false, "completion": ".decl Has_presidential_number(President:symbol, Number:float)\nHas_presidential_number(\"Andrew Johnson\", 17).\n.decl Has_emperor_number(Emperor:symbol, Number:float)\nHas_emperor_number(\"Elagabalus\", 25).\n.decl Answer()\nAnswer() :- Has_presidential_number(\"Andrew Johnson\", number1), Has_emperor_number(\"Elagabalus\", number2), number1 > number2.\n.output Answer", "completions": [".decl Has_presidential_number(President:symbol, Number:float)\nHas_presidential_number(\"Andrew Johnson\", 17).\n.decl Has_emperor_number(Emperor:symbol, Number:float)\nHas_emperor_number(\"Elagabalus\", 25).\n.decl Answer()\nAnswer() :- Has_presidential_number(\"Andrew Johnson\", number1), Has_emperor_number(\"Elagabalus\", number2), number1 > number2.\n.output Answer"]}
{"id": 2198, "answer": true, "completion": ".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Lamborghini Aventador SVJ\", 350).\nHas_top_speed(\"Porsche 911\", 191).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Lamborghini Aventador SVJ\", speed1), Has_top_speed(\"Porsche 911\", speed2), speed1 > speed2.\n.output Answer", "completions": [".decl Has_top_speed(Car:symbol, Top_speed:float)\nHas_top_speed(\"Lamborghini Aventador SVJ\", 350).\nHas_top_speed(\"Porsche 911\", 191).\n.decl Answer()\nAnswer() :- Has_top_speed(\"Lamborghini Aventador SVJ\", speed1), Has_top_speed(\"Porsche 911\", speed2), speed1 > speed2.\n.output Answer"]}
{"id": 2199, "answer": false, "completion": ".decl Ease_of_eating(Food:symbol, Ease:float)\nEase_of_eating(\"fresh garlic cloves\", 2).\nEase_of_eating(\"roasted garlic cloves\", 8).\n.decl Answer()\nAnswer() :- Ease_of_eating(\"fresh garlic cloves\", ease1), Ease_of_eating(\"roasted garlic cloves\", ease2), ease1 >= ease2.\n.output Answer", "completions": [".decl Ease_of_eating(Food:symbol, Ease:float)\nEase_of_eating(\"fresh garlic cloves\", 2).\nEase_of_eating(\"roasted garlic cloves\", 8).\n.decl Answer()\nAnswer() :- Ease_of_eating(\"fresh garlic cloves\", ease1), Ease_of_eating(\"roasted garlic cloves\", ease2), ease1 >= ease2.\n.output Answer"]}
{"id": 2200, "answer": false, "completion": ".decl Owns(Person:symbol, Object:symbol)\nOwns(\"John\", \"fax machine\").\nOwns(\"Jane\", \"computer\").\nOwns(\"Bob\", \"printer\").\nOwns(\"Alice\", \"phone\").\n.decl Attends_college(Person:symbol)\nAttends_college(\"John\").\nAttends_college(\"Jane\").\nAttends_college(\"Bob\").\nAttends_college(\"Alice\").\n.decl Answer()\nAnswer() :- Attends_college(person), Owns(person, \"fax machine\"), not Owns(person, \"computer\"), not Owns(person, \"printer\"), not Owns(person, \"phone\").\n.output Answer", "completions": [".decl Owns(Person:symbol, Object:symbol)\nOwns(\"John\", \"fax machine\").\nOwns(\"Jane\", \"computer\").\nOwns(\"Bob\", \"printer\").\nOwns(\"Alice\", \"phone\").\n.decl Attends_college(Person:symbol)\nAttends_college(\"John\").\nAttends_college(\"Jane\").\nAttends_college(\"Bob\").\nAttends_college(\"Alice\").\n.decl Answer()\nAnswer() :- Attends_college(person), Owns(person, \"fax machine\"), not Owns(person, \"computer\"), not Owns(person, \"printer\"), not Owns(person, \"phone\").\n.output Answer"]}
{"id": 2201, "answer": false, "completion": ".decl Visits(Person:symbol, Museum:symbol, N_visits:float, Cost:float)\nVisits(\"Bernie Sanders\", \"Metropolitan Museum of Art\", 20, 200).\n.decl Answer()\nAnswer() :- Visits(\"Bernie Sanders\", \"Metropolitan Museum of Art\", n_visits, cost), cost < 200, n_visits < 20.\n.output Answer", "completions": [".decl Visits(Person:symbol, Museum:symbol, N_visits:float, Cost:float)\nVisits(\"Bernie Sanders\", \"Metropolitan Museum of Art\", 20, 200).\n.decl Answer()\nAnswer() :- Visits(\"Bernie Sanders\", \"Metropolitan Museum of Art\", n_visits, cost), cost < 200, n_visits < 20.\n.output Answer"]}
{"id": 2202, "answer": true, "completion": ".decl Invented_before(Item:symbol, Year:float)\nInvented_before(\"Qwerty keyboard layout\", 1868).\nInvented_before(\"computer\", 1939).\n.decl Answer()\nAnswer() :- Invented_before(\"Qwerty keyboard layout\", year1), Invented_before(\"computer\", year2), year1 < year2.\n.output Answer", "completions": [".decl Invented_before(Item:symbol, Year:float)\nInvented_before(\"Qwerty keyboard layout\", 1868).\nInvented_before(\"computer\", 1939).\n.decl Answer()\nAnswer() :- Invented_before(\"Qwerty keyboard layout\", year1), Invented_before(\"computer\", year2), year1 < year2.\n.output Answer"]}
{"id": 2203, "answer": false, "completion": ".decl Dominated_by(Country:symbol, Religion:symbol)\nDominated_by(\"Iran\", \"Islam\").\nDominated_by(\"Saudi Arabia\", \"Islam\").\n.decl Located_in(Coffee_shop:symbol, Country:symbol)\nLocated_in(\"Starbucks\", \"United States\").\nLocated_in(\"Starbucks\", \"Canada\").\nLocated_in(\"Starbucks\", \"United Kingdom\").\nLocated_in(\"Starbucks\", \"China\").\nLocated_in(\"Starbucks\", \"Japan\").\nLocated_in(\"Starbucks\", \"South Korea\").\nLocated_in(\"Starbucks\", \"Indonesia\").\nLocated_in(\"Starbucks\", \"Malaysia\").\nLocated_in(\"Starbucks\", \"United Arab Emirates\").\nLocated_in(\"Starbucks\", \"Kuwait\").\nLocated_in(\"Starbucks\", \"Qatar\").\nLocated_in(\"Starbucks\", \"Bahrain\").\nLocated_in(\"Starbucks\", \"Oman\").\nLocated_in(\"Starbucks\", \"Jordan\").\nLocated_in(\"Starbucks\", \"Lebanon\").\nLocated_in(\"Starbucks\", \"Turkey\").\n.decl Answer()\nAnswer() :- Dominated_by(country, \"Islam\"), Located_in(\"Starbucks\", country).\n.output Answer", "completions": [".decl Dominated_by(Country:symbol, Religion:symbol)\nDominated_by(\"Iran\", \"Islam\").\nDominated_by(\"Saudi Arabia\", \"Islam\").\n.decl Located_in(Coffee_shop:symbol, Country:symbol)\nLocated_in(\"Starbucks\", \"United States\").\nLocated_in(\"Starbucks\", \"Canada\").\nLocated_in(\"Starbucks\", \"United Kingdom\").\nLocated_in(\"Starbucks\", \"China\").\nLocated_in(\"Starbucks\", \"Japan\").\nLocated_in(\"Starbucks\", \"South Korea\").\nLocated_in(\"Starbucks\", \"Indonesia\").\nLocated_in(\"Starbucks\", \"Malaysia\").\nLocated_in(\"Starbucks\", \"United Arab Emirates\").\nLocated_in(\"Starbucks\", \"Kuwait\").\nLocated_in(\"Starbucks\", \"Qatar\").\nLocated_in(\"Starbucks\", \"Bahrain\").\nLocated_in(\"Starbucks\", \"Oman\").\nLocated_in(\"Starbucks\", \"Jordan\").\nLocated_in(\"Starbucks\", \"Lebanon\").\nLocated_in(\"Starbucks\", \"Turkey\").\n.decl Answer()\nAnswer() :- Dominated_by(country, \"Islam\"), Located_in(\"Starbucks\", country).\n.output Answer"]}
{"id": 2204, "answer": true, "completion": ".decl Happens_at(Event:symbol, Location:symbol)\nHappens_at(\"funeral\", \"church\").\nHappens_at(\"birthday party\", \"home\").\n.decl Involves_action(Event:symbol, Action:symbol)\nInvolves_action(\"funeral\", \"mourning\").\nInvolves_action(\"birthday party\", \"celebrating\").\n.decl Answer()\nAnswer() :- Happens_at(\"funeral\", location), Involves_action(\"funeral\", action), action != \"blowing out candles\".\n.output Answer", "completions": [".decl Happens_at(Event:symbol, Location:symbol)\nHappens_at(\"funeral\", \"church\").\nHappens_at(\"birthday party\", \"home\").\n.decl Involves_action(Event:symbol, Action:symbol)\nInvolves_action(\"funeral\", \"mourning\").\nInvolves_action(\"birthday party\", \"celebrating\").\n.decl Answer()\nAnswer() :- Happens_at(\"funeral\", location), Involves_action(\"funeral\", action), action != \"blowing out candles\".\n.output Answer"]}
{"id": 2205, "answer": false, "completion": ".decl Parent(child:symbol, parent:symbol)\nParent(\"Cain\", \"Adam\").\nParent(\"Abel\", \"Adam\").\nParent(\"Seth\", \"Adam\").\nParent(\"Cain\", \"Eve\").\nParent(\"Abel\", \"Eve\").\nParent(\"Seth\", \"Eve\").\n.decl Answer()\nAnswer() :- Parent(\"Cain\", parent1), Parent(\"Abel\", parent2), parent1 = parent2, Parent(parent1, parent3), Parent(\"Eve\", parent4), parent3 = parent4.\n.output Answer", "completions": [".decl Parent(child:symbol, parent:symbol)\nParent(\"Cain\", \"Adam\").\nParent(\"Abel\", \"Adam\").\nParent(\"Seth\", \"Adam\").\nParent(\"Cain\", \"Eve\").\nParent(\"Abel\", \"Eve\").\nParent(\"Seth\", \"Eve\").\n.decl Answer()\nAnswer() :- Parent(\"Cain\", parent1), Parent(\"Abel\", parent2), parent1 = parent2, Parent(parent1, parent3), Parent(\"Eve\", parent4), parent3 = parent4.\n.output Answer"]}
{"id": 2206, "answer": false, "completion": ".decl Has_disorder(Animal:symbol, Disorder:symbol)\nHas_disorder(\"human\", \"learning disabilities\").\nHas_disorder(\"dog\", \"dyslexia\").\n.decl Answer()\nAnswer() :- Has_disorder(\"placozoa\", disorder).\n.output Answer", "completions": [".decl Has_disorder(Animal:symbol, Disorder:symbol)\nHas_disorder(\"human\", \"learning disabilities\").\nHas_disorder(\"dog\", \"dyslexia\").\n.decl Answer()\nAnswer() :- Has_disorder(\"placozoa\", disorder).\n.output Answer"]}
{"id": 2207, "answer": true, "completion": ".decl Opposes_band(Band:symbol, Issue:symbol)\nOpposes_band(\"System of a Down\", \"globalization\").\n.decl Answer()\nAnswer() :- Opposes_band(\"System of a Down\", \"globalization\").\n.output Answer", "completions": [".decl Opposes_band(Band:symbol, Issue:symbol)\nOpposes_band(\"System of a Down\", \"globalization\").\n.decl Answer()\nAnswer() :- Opposes_band(\"System of a Down\", \"globalization\").\n.output Answer"]}
{"id": 2208, "answer": false, "completion": ".decl Wrote_book(Person:symbol, Book:symbol)\nWrote_book(\"Dr. Seuss\", \"The Cat in the Hat\").\n.decl Liar(Person:symbol)\nLiar(\"Pinocchio\").\nLiar(\"Baron Munchausen\").\n.decl Answer()\nAnswer() :- Wrote_book(\"Dr. Seuss\", book), Liar(\"Dr. Seuss\").\n.output Answer", "completions": [".decl Wrote_book(Person:symbol, Book:symbol)\nWrote_book(\"Dr. Seuss\", \"The Cat in the Hat\").\n.decl Liar(Person:symbol)\nLiar(\"Pinocchio\").\nLiar(\"Baron Munchausen\").\n.decl Answer()\nAnswer() :- Wrote_book(\"Dr. Seuss\", book), Liar(\"Dr. Seuss\").\n.output Answer"]}
{"id": 2209, "answer": true, "completion": ".decl Average_temperature(Location:symbol, Month:symbol, Temperature:float)\nAverage_temperature(\"Hollywood\", \"July\", 25).\n.decl Answer()\nAnswer() :- Average_temperature(\"Hollywood\", \"July\", temperature), temperature >= 20.\n.output Answer", "completions": [".decl Average_temperature(Location:symbol, Month:symbol, Temperature:float)\nAverage_temperature(\"Hollywood\", \"July\", 25).\n.decl Answer()\nAnswer() :- Average_temperature(\"Hollywood\", \"July\", temperature), temperature >= 20.\n.output Answer"]}
{"id": 2210, "answer": true, "completion": ".decl Sales(Product:symbol, Quantity:float)\nSales(\"silicon wedding rings\", 100).\nSales(\"bromine wedding rings\", 50).\n.decl Answer()\nAnswer() :- Sales(\"silicon wedding rings\", quantity1), Sales(\"bromine wedding rings\", quantity2), quantity1 > quantity2.\n.output Answer", "completions": [".decl Sales(Product:symbol, Quantity:float)\nSales(\"silicon wedding rings\", 100).\nSales(\"bromine wedding rings\", 50).\n.decl Answer()\nAnswer() :- Sales(\"silicon wedding rings\", quantity1), Sales(\"bromine wedding rings\", quantity2), quantity1 > quantity2.\n.output Answer"]}
{"id": 2211, "answer": false, "completion": ".decl Ally(Person:symbol, Ally:symbol)\nAlly(\"Saddam Hussein\", \"Idris I\").\nAlly(\"Saladin\", \"Saddam Hussein\").\n.decl Answer()\nAnswer() :- Ally(\"Saddam Hussein\", ally1), Ally(ally1, \"Saladin\").\nAnswer() :- Ally(\"Saddam Hussein\", ally1), Ally(ally1, ally2), Ally(ally2, \"Saladin\").\nAnswer() :- Ally(\"Saddam Hussein\", ally1), Ally(ally1, ally2), Ally(ally2, ally3), Ally(ally3, \"Saladin\").\n.output Answer", "completions": [".decl Ally(Person:symbol, Ally:symbol)\nAlly(\"Saddam Hussein\", \"Idris I\").\nAlly(\"Saladin\", \"Saddam Hussein\").\n.decl Answer()\nAnswer() :- Ally(\"Saddam Hussein\", ally1), Ally(ally1, \"Saladin\").\nAnswer() :- Ally(\"Saddam Hussein\", ally1), Ally(ally1, ally2), Ally(ally2, \"Saladin\").\nAnswer() :- Ally(\"Saddam Hussein\", ally1), Ally(ally1, ally2), Ally(ally2, ally3), Ally(ally3, \"Saladin\").\n.output Answer"]}
{"id": 2212, "answer": false, "completion": ".decl Named_after(Month:symbol, Name:symbol)\nNamed_after(\"March\", \"Mars\").\nNamed_after(\"July\", \"Julius Caesar\").\nNamed_after(\"August\", \"Augustus Caesar\").\n.decl Parent_of(Child:symbol, Parent:symbol)\nParent_of(\"Mars\", \"Jupiter\").\nParent_of(\"Julius Caesar\", \"Jupiter\").\nParent_of(\"Augustus Caesar\", \"Julius Caesar\").\n.decl Answer()\nAnswer() :- Named_after(\"March\", name), Parent_of(\"Mars\", parent), Named_after(parent, \"Jupiter\").\n.output Answer", "completions": [".decl Named_after(Month:symbol, Name:symbol)\nNamed_after(\"March\", \"Mars\").\nNamed_after(\"July\", \"Julius Caesar\").\nNamed_after(\"August\", \"Augustus Caesar\").\n.decl Parent_of(Child:symbol, Parent:symbol)\nParent_of(\"Mars\", \"Jupiter\").\nParent_of(\"Julius Caesar\", \"Jupiter\").\nParent_of(\"Augustus Caesar\", \"Julius Caesar\").\n.decl Answer()\nAnswer() :- Named_after(\"March\", name), Parent_of(\"Mars\", parent), Named_after(parent, \"Jupiter\").\n.output Answer"]}
{"id": 2213, "answer": true, "completion": ".decl Involved_in_scandal(Company:symbol, Scandal:symbol)\nInvolved_in_scandal(\"Subway\", \"pedophilia\").\n.decl Answer()\nAnswer() :- Involved_in_scandal(\"Subway\", \"pedophilia\").\n.output Answer", "completions": [".decl Involved_in_scandal(Company:symbol, Scandal:symbol)\nInvolved_in_scandal(\"Subway\", \"pedophilia\").\n.decl Answer()\nAnswer() :- Involved_in_scandal(\"Subway\", \"pedophilia\").\n.output Answer"]}
{"id": 2214, "answer": true, "completion": ".decl Forbidden(Person:symbol, Action:symbol)\nForbidden(\"Chief Justice of the United States\", \"buying alcohol\").\n.decl Answer()\nAnswer() :- Forbidden(\"Chief Justice of the United States\", \"buying alcohol\").\n.output Answer", "completions": [".decl Forbidden(Person:symbol, Action:symbol)\nForbidden(\"Chief Justice of the United States\", \"buying alcohol\").\n.decl Answer()\nAnswer() :- Forbidden(\"Chief Justice of the United States\", \"buying alcohol\").\n.output Answer"]}
{"id": 2215, "answer": false, "completion": ".decl Age(Person:symbol, Years_old:float)\nAge(\"two-year old\", 2).\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Scrabble champion\", \"Scrabble\").\n.decl Answer()\nAnswer() :- Age(person, age), Has_skill(person, \"Scrabble\"), age >= 18.\n.output Answer", "completions": [".decl Age(Person:symbol, Years_old:float)\nAge(\"two-year old\", 2).\n.decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Scrabble champion\", \"Scrabble\").\n.decl Answer()\nAnswer() :- Age(person, age), Has_skill(person, \"Scrabble\"), age >= 18.\n.output Answer"]}
{"id": 2216, "answer": true, "completion": ".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Iris\", \"messenger\").\nHas_skill(\"Hermes\", \"messenger\").\n.decl Requires_skill(Job:symbol, Skill:symbol)\nRequires_skill(\"UPS job\", \"messenger\").\n.decl Answer()\nAnswer() :- Has_skill(\"Iris\", skill), Has_skill(\"Hermes\", skill), Requires_skill(\"UPS job\", skill).\n.output Answer", "completions": [".decl Has_skill(Person:symbol, Skill:symbol)\nHas_skill(\"Iris\", \"messenger\").\nHas_skill(\"Hermes\", \"messenger\").\n.decl Requires_skill(Job:symbol, Skill:symbol)\nRequires_skill(\"UPS job\", \"messenger\").\n.decl Answer()\nAnswer() :- Has_skill(\"Iris\", skill), Has_skill(\"Hermes\", skill), Requires_skill(\"UPS job\", skill).\n.output Answer"]}
{"id": 2217, "answer": false, "completion": ".decl From_place(Person:symbol, Place:symbol)\nFrom_place(\"Dorothea Wendling\", \"Mannheim\").\n.decl Originates_from(Company:symbol, Place:symbol)\nOriginates_from(\"Porsche\", \"Stuttgart\").\n.decl Answer()\nAnswer() :- From_place(\"Dorothea Wendling\", place1), Originates_from(\"Porsche\", place2), place1 = place2.\n.output Answer", "completions": [".decl From_place(Person:symbol, Place:symbol)\nFrom_place(\"Dorothea Wendling\", \"Mannheim\").\n.decl Originates_from(Company:symbol, Place:symbol)\nOriginates_from(\"Porsche\", \"Stuttgart\").\n.decl Answer()\nAnswer() :- From_place(\"Dorothea Wendling\", place1), Originates_from(\"Porsche\", place2), place1 = place2.\n.output Answer"]}
{"id": 2218, "answer": false, "completion": ".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Will Ferrell\", \"MTV Movie Award for Best Comedic Performance\").\nHas_award(\"Will Ferrell\", \"Primetime Emmy Award for Outstanding Comedy Series\").\n.decl Has_nominations(Person:symbol, Nominations:float)\nHas_nominations(\"Will Ferrell\", 1).\n.decl Has_competition(Award:symbol, Competition:symbol)\nHas_competition(\"Empire Award for Best Newcomer\", \"actors with breakthrough performances\").\n.decl Answer()\nAnswer() :- Has_award(\"Will Ferrell\", award), Has_competition(award, competition), Has_nominations(\"Will Ferrell\", nominations), nominations < 2.\n.output Answer", "completions": [".decl Has_award(Person:symbol, Award:symbol)\nHas_award(\"Will Ferrell\", \"MTV Movie Award for Best Comedic Performance\").\nHas_award(\"Will Ferrell\", \"Primetime Emmy Award for Outstanding Comedy Series\").\n.decl Has_nominations(Person:symbol, Nominations:float)\nHas_nominations(\"Will Ferrell\", 1).\n.decl Has_competition(Award:symbol, Competition:symbol)\nHas_competition(\"Empire Award for Best Newcomer\", \"actors with breakthrough performances\").\n.decl Answer()\nAnswer() :- Has_award(\"Will Ferrell\", award), Has_competition(award, competition), Has_nominations(\"Will Ferrell\", nominations), nominations < 2.\n.output Answer"]}
{"id": 2219, "answer": false, "completion": ".decl Respects(Person1:symbol, Person2:symbol)\nRespects(\"Tom Cruise\", \"L. Ron Hubbard\").\n.decl Answer()\nAnswer() :- !Respects(\"Tom Cruise\", \"L. Ron Hubbard\").\n.output Answer", "completions": [".decl Respects(Person1:symbol, Person2:symbol)\nRespects(\"Tom Cruise\", \"L. Ron Hubbard\").\n.decl Answer()\nAnswer() :- !Respects(\"Tom Cruise\", \"L. Ron Hubbard\").\n.output Answer"]}
{"id": 2220, "answer": true, "completion": ".decl Plays_on_team(Person:symbol, Team:symbol, Position:symbol)\nPlays_on_team(\"Felix Potvin\", \"Toronto Maple Leafs\", \"goalie\").\nPlays_on_team(\"Peter La Fleur\", \"Average Joe's\", \"captain\").\n.decl Answer()\nAnswer() :- Plays_on_team(\"Felix Potvin\", team, position).\n.output Answer", "completions": [".decl Plays_on_team(Person:symbol, Team:symbol, Position:symbol)\nPlays_on_team(\"Felix Potvin\", \"Toronto Maple Leafs\", \"goalie\").\nPlays_on_team(\"Peter La Fleur\", \"Average Joe's\", \"captain\").\n.decl Answer()\nAnswer() :- Plays_on_team(\"Felix Potvin\", team, position).\n.output Answer"]}
{"id": 2221, "answer": false, "completion": ".decl Belongs_to_category(Script:symbol, Category:symbol)\nBelongs_to_category(\"Gujarati\", \"Indic\").\nBelongs_to_category(\"Kanji\", \"Logographic\").\nBelongs_to_category(\"Kanji\", \"Ideographic\").\n.decl Answer()\nAnswer() :- Belongs_to_category(\"Gujarati\", category), Belongs_to_category(\"Kanji\", category).\n.output Answer", "completions": [".decl Belongs_to_category(Script:symbol, Category:symbol)\nBelongs_to_category(\"Gujarati\", \"Indic\").\nBelongs_to_category(\"Kanji\", \"Logographic\").\nBelongs_to_category(\"Kanji\", \"Ideographic\").\n.decl Answer()\nAnswer() :- Belongs_to_category(\"Gujarati\", category), Belongs_to_category(\"Kanji\", category).\n.output Answer"]}
{"id": 2222, "answer": true, "completion": ".decl Has_theme(Game:symbol, Theme:symbol)\nHas_theme(\"Fallout\", \"end of civilization\").\nHas_theme(\"Borderlands\", \"end of civilization\").\n.decl Has_feature(Game:symbol, Feature:symbol)\nHas_feature(\"Fallout\", \"slot machines\").\nHas_feature(\"Borderlands\", \"guns\").\n.decl Answer()\nAnswer() :- Has_theme(game, \"end of civilization\"), !Has_feature(game, \"slot machines\").\n.output Answer", "completions": [".decl Has_theme(Game:symbol, Theme:symbol)\nHas_theme(\"Fallout\", \"end of civilization\").\nHas_theme(\"Borderlands\", \"end of civilization\").\n.decl Has_feature(Game:symbol, Feature:symbol)\nHas_feature(\"Fallout\", \"slot machines\").\nHas_feature(\"Borderlands\", \"guns\").\n.decl Answer()\nAnswer() :- Has_theme(game, \"end of civilization\"), !Has_feature(game, \"slot machines\").\n.output Answer"]}
{"id": 2223, "answer": false, "completion": ".decl Found_in_tissue(Substance:symbol, Tissue:symbol)\nFound_in_tissue(\"glutamic acid\", \"muscle\").\nFound_in_tissue(\"glutamic acid\", \"brain\").\nFound_in_tissue(\"glutamic acid\", \"blood\").\n.decl Answer()\nAnswer() :- Found_in_tissue(\"glutamic acid\", \"severed finger\").\n.output Answer", "completions": [".decl Found_in_tissue(Substance:symbol, Tissue:symbol)\nFound_in_tissue(\"glutamic acid\", \"muscle\").\nFound_in_tissue(\"glutamic acid\", \"brain\").\nFound_in_tissue(\"glutamic acid\", \"blood\").\n.decl Answer()\nAnswer() :- Found_in_tissue(\"glutamic acid\", \"severed finger\").\n.output Answer"]}
{"id": 2224, "answer": false, "completion": ".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Sara Paxton\", \"blonde\").\n.decl Has_eye_color(Person:symbol, Eye_color:symbol)\nHas_eye_color(\"Sara Paxton\", \"green\").\n.decl Is_ethnicity(Person:symbol, Ethnicity:symbol)\nIs_ethnicity(\"Sara Paxton\", \"not Latino\").\n.decl Answer()\nAnswer() :- Has_hair_color(\"Sara Paxton\", \"blonde\"), Has_eye_color(\"Sara Paxton\", \"green\"), Is_ethnicity(\"Sara Paxton\", \"Latino\").\n.output Answer", "completions": [".decl Has_hair_color(Person:symbol, Hair_color:symbol)\nHas_hair_color(\"Sara Paxton\", \"blonde\").\n.decl Has_eye_color(Person:symbol, Eye_color:symbol)\nHas_eye_color(\"Sara Paxton\", \"green\").\n.decl Is_ethnicity(Person:symbol, Ethnicity:symbol)\nIs_ethnicity(\"Sara Paxton\", \"not Latino\").\n.decl Answer()\nAnswer() :- Has_hair_color(\"Sara Paxton\", \"blonde\"), Has_eye_color(\"Sara Paxton\", \"green\"), Is_ethnicity(\"Sara Paxton\", \"Latino\").\n.output Answer"]}
{"id": 2225, "answer": false, "completion": ".decl Reads(Person:symbol, Book:symbol)\nReads(\"William Howard Taft\", \"The New York Times\").\n.decl Published_by(Book:symbol, Publisher:symbol)\nPublished_by(\"DC Comics\", \"DC Entertainment\").\n.decl Answer()\nAnswer() :- Reads(\"William Howard Taft\", book), Published_by(book, \"DC Entertainment\").\n.output Answer", "completions": [".decl Reads(Person:symbol, Book:symbol)\nReads(\"William Howard Taft\", \"The New York Times\").\n.decl Published_by(Book:symbol, Publisher:symbol)\nPublished_by(\"DC Comics\", \"DC Entertainment\").\n.decl Answer()\nAnswer() :- Reads(\"William Howard Taft\", book), Published_by(book, \"DC Entertainment\").\n.output Answer"]}
{"id": 2226, "answer": true, "completion": ".decl Idea_of(Entity:symbol, Concept:symbol, Religion:symbol)\nIdea_of(\"Seraphim\", \"angelic beings\", \"Christianity\").\nIdea_of(\"Seraphim\", \"celestial beings\", \"Islam\").\n.decl Answer()\nAnswer() :- Idea_of(\"Seraphim\", concept1, \"Christianity\"), Idea_of(\"Seraphim\", concept2, \"Islam\"), concept1 != concept2.\n.output Answer", "completions": [".decl Idea_of(Entity:symbol, Concept:symbol, Religion:symbol)\nIdea_of(\"Seraphim\", \"angelic beings\", \"Christianity\").\nIdea_of(\"Seraphim\", \"celestial beings\", \"Islam\").\n.decl Answer()\nAnswer() :- Idea_of(\"Seraphim\", concept1, \"Christianity\"), Idea_of(\"Seraphim\", concept2, \"Islam\"), concept1 != concept2.\n.output Answer"]}
{"id": 2227, "answer": false, "completion": ".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person1\", \"dyscalculia\").\n.decl Requires_skill(Job:symbol, Skill:symbol)\nRequires_skill(\"surveying work\", \"mathematical ability\").\n.decl Answer()\nAnswer() :- Has_condition(person, \"dyscalculia\"), !Requires_skill(\"surveying work\", \"mathematical ability\").\n.output Answer", "completions": [".decl Has_condition(Person:symbol, Condition:symbol)\nHas_condition(\"person1\", \"dyscalculia\").\n.decl Requires_skill(Job:symbol, Skill:symbol)\nRequires_skill(\"surveying work\", \"mathematical ability\").\n.decl Answer()\nAnswer() :- Has_condition(person, \"dyscalculia\"), !Requires_skill(\"surveying work\", \"mathematical ability\").\n.output Answer"]}
{"id": 2228, "answer": false, "completion": ".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Alec Baldwin\", 6).\nHas_children(\"Clint Eastwood\", 8).\n.decl Answer()\nAnswer() :- Has_children(\"Alec Baldwin\", n_children1), Has_children(\"Clint Eastwood\", n_children2), n_children1 > n_children2.\n.output Answer", "completions": [".decl Has_children(Person:symbol, N_children:float)\nHas_children(\"Alec Baldwin\", 6).\nHas_children(\"Clint Eastwood\", 8).\n.decl Answer()\nAnswer() :- Has_children(\"Alec Baldwin\", n_children1), Has_children(\"Clint Eastwood\", n_children2), n_children1 > n_children2.\n.output Answer"]}
{"id": 2229, "answer": false, "completion": ".decl Used_for(Purpose:symbol, Object:symbol)\nUsed_for(\"maintaining order\", \"gavel\").\nUsed_for(\"making paper\", \"banana tree\").\n.decl Answer()\nAnswer() :- Used_for(\"maintaining order\", object), Used_for(\"making paper\", object2), object = \"banana tree\", object2 = \"gavel\".\n.output Answer", "completions": [".decl Used_for(Purpose:symbol, Object:symbol)\nUsed_for(\"maintaining order\", \"gavel\").\nUsed_for(\"making paper\", \"banana tree\").\n.decl Answer()\nAnswer() :- Used_for(\"maintaining order\", object), Used_for(\"making paper\", object2), object = \"banana tree\", object2 = \"gavel\".\n.output Answer"]}
{"id": 2230, "answer": true, "completion": ".decl Causes_symptom(Substance:symbol, Symptom:symbol)\nCauses_symptom(\"nickel\", \"skin discoloration\").\n.decl Answer()\nAnswer() :- Causes_symptom(substance, \"skin discoloration\"), substance = \"nickel\".\n.output Answer", "completions": [".decl Causes_symptom(Substance:symbol, Symptom:symbol)\nCauses_symptom(\"nickel\", \"skin discoloration\").\n.decl Answer()\nAnswer() :- Causes_symptom(substance, \"skin discoloration\"), substance = \"nickel\".\n.output Answer"]}
{"id": 2231, "answer": true, "completion": ".decl Bitcoin_value(Value:float)\nBitcoin_value(50000).\n.decl Car_cost(Car:symbol, Cost:float)\nCar_cost(\"Volkswagen Jetta\", 20000).\n.decl Answer()\nAnswer() :- Bitcoin_value(value), Car_cost(\"Volkswagen Jetta\", cost), value >= cost.\n.output Answer", "completions": [".decl Bitcoin_value(Value:float)\nBitcoin_value(50000).\n.decl Car_cost(Car:symbol, Cost:float)\nCar_cost(\"Volkswagen Jetta\", 20000).\n.decl Answer()\nAnswer() :- Bitcoin_value(value), Car_cost(\"Volkswagen Jetta\", cost), value >= cost.\n.output Answer"]}
{"id": 2232, "answer": true, "completion": ".decl Has_history(Style:symbol, History:symbol)\nHas_history(\"Fraktur\", \"sordid\").\n.decl Answer()\nAnswer() :- Has_history(\"Fraktur\", \"sordid\").\n.output Answer", "completions": [".decl Has_history(Style:symbol, History:symbol)\nHas_history(\"Fraktur\", \"sordid\").\n.decl Answer()\nAnswer() :- Has_history(\"Fraktur\", \"sordid\").\n.output Answer"]}
{"id": 2233, "answer": false, "completion": ".decl Belongs_to_sect(Person:symbol, Sect:symbol)\nBelongs_to_sect(\"Martin Luther\", \"Protestantism\").\nBelongs_to_sect(\"Martin Luther King Jr.\", \"Baptist\").\n.decl Answer()\nAnswer() :- Belongs_to_sect(\"Martin Luther\", sect), Belongs_to_sect(\"Martin Luther King Jr.\", sect).\n.output Answer", "completions": [".decl Belongs_to_sect(Person:symbol, Sect:symbol)\nBelongs_to_sect(\"Martin Luther\", \"Protestantism\").\nBelongs_to_sect(\"Martin Luther King Jr.\", \"Baptist\").\n.decl Answer()\nAnswer() :- Belongs_to_sect(\"Martin Luther\", sect), Belongs_to_sect(\"Martin Luther King Jr.\", sect).\n.output Answer"]}
{"id": 2234, "answer": true, "completion": ".decl Has_access(Character:symbol, Store:symbol)\nHas_access(\"Mickey Mouse\", \"grocery store\").\nHas_access(\"Donald Duck\", \"Disney Store\").\n.decl Answer()\nAnswer() :- Has_access(\"Donald Duck\", store), !Has_access(\"Mickey Mouse\", store).\n.output Answer", "completions": [".decl Has_access(Character:symbol, Store:symbol)\nHas_access(\"Mickey Mouse\", \"grocery store\").\nHas_access(\"Donald Duck\", \"Disney Store\").\n.decl Answer()\nAnswer() :- Has_access(\"Donald Duck\", store), !Has_access(\"Mickey Mouse\", store).\n.output Answer"]}
{"id": 2235, "answer": true, "completion": ".decl Appears_in_movie(Character:symbol, Movie:symbol)\nAppears_in_movie(\"Hades\", \"Hercules\").\n.decl Is_musical(Movie:symbol)\nIs_musical(\"Hercules\").\n.decl Is_Disney_channel(Movie:symbol)\nIs_Disney_channel(\"Hercules\").\n.decl Answer()\nAnswer() :- Appears_in_movie(\"Hades\", movie), Is_musical(movie), Is_Disney_channel(movie).\n.output Answer", "completions": [".decl Appears_in_movie(Character:symbol, Movie:symbol)\nAppears_in_movie(\"Hades\", \"Hercules\").\n.decl Is_musical(Movie:symbol)\nIs_musical(\"Hercules\").\n.decl Is_Disney_channel(Movie:symbol)\nIs_Disney_channel(\"Hercules\").\n.decl Answer()\nAnswer() :- Appears_in_movie(\"Hades\", movie), Is_musical(movie), Is_Disney_channel(movie).\n.output Answer"]}
{"id": 2236, "answer": false, "completion": ".decl Needs(Cell_type:symbol, Function:symbol)\nNeeds(\"white blood cells\", \"fight infection\").\n.decl Causes(Event:symbol, Effect:symbol)\nCauses(\"lack of white blood cells\", \"increased risk of infection\").\n.decl Answer()\nAnswer() :- Needs(\"white blood cells\", function), Causes(\"lack of white blood cells\", effect), effect = \"death\".\n.output Answer", "completions": [".decl Needs(Cell_type:symbol, Function:symbol)\nNeeds(\"white blood cells\", \"fight infection\").\n.decl Causes(Event:symbol, Effect:symbol)\nCauses(\"lack of white blood cells\", \"increased risk of infection\").\n.decl Answer()\nAnswer() :- Needs(\"white blood cells\", function), Causes(\"lack of white blood cells\", effect), effect = \"death\".\n.output Answer"]}
{"id": 2237, "answer": false, "completion": ".decl Frequents(Person:symbol, Place:symbol)\nFrequents(\"Rand Paul\", \"Lake Cumberland\").\nFrequents(\"Rand Paul\", \"Kentucky Lake\").\nFrequents(\"Rand Paul\", \"Ohio River\").\n.decl Attends(Person:symbol, University:symbol)\nAttends(\"Rand Paul\", \"Duke University\").\n.decl Answer()\nAnswer() :- Frequents(\"Rand Paul\", \"Lake Michigan\"), Attends(\"Rand Paul\", \"undergraduate years at Duke University\").\n.output Answer", "completions": [".decl Frequents(Person:symbol, Place:symbol)\nFrequents(\"Rand Paul\", \"Lake Cumberland\").\nFrequents(\"Rand Paul\", \"Kentucky Lake\").\nFrequents(\"Rand Paul\", \"Ohio River\").\n.decl Attends(Person:symbol, University:symbol)\nAttends(\"Rand Paul\", \"Duke University\").\n.decl Answer()\nAnswer() :- Frequents(\"Rand Paul\", \"Lake Michigan\"), Attends(\"Rand Paul\", \"undergraduate years at Duke University\").\n.output Answer"]}
{"id": 2238, "answer": false, "completion": ".decl Can_vote(Person:symbol, Age:float)\nCan_vote(\"Simon Cowell\", 18).\n.decl Is_judge(Person:symbol)\nIs_judge(\"Supreme Court Judge\").\n.decl Answer()\nAnswer() :- Can_vote(\"Simon Cowell\", age), !Is_judge(\"Supreme Court Judge\").\n.output Answer", "completions": [".decl Can_vote(Person:symbol, Age:float)\nCan_vote(\"Simon Cowell\", 18).\n.decl Is_judge(Person:symbol)\nIs_judge(\"Supreme Court Judge\").\n.decl Answer()\nAnswer() :- Can_vote(\"Simon Cowell\", age), !Is_judge(\"Supreme Court Judge\").\n.output Answer"]}
{"id": 2239, "answer": false, "completion": ".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Michael Bloomberg\", 60.1).\n.decl Has_debt(Country:symbol, Debt:float)\nHas_debt(\"Micronesia\", 32).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Michael Bloomberg\", net_worth), Has_debt(\"Micronesia\", debt), net_worth >= debt*10.\n.output Answer", "completions": [".decl Has_net_worth(Person:symbol, Net_worth:float)\nHas_net_worth(\"Michael Bloomberg\", 60.1).\n.decl Has_debt(Country:symbol, Debt:float)\nHas_debt(\"Micronesia\", 32).\n.decl Answer()\nAnswer() :- Has_net_worth(\"Michael Bloomberg\", net_worth), Has_debt(\"Micronesia\", debt), net_worth >= debt*10.\n.output Answer"]}
{"id": 2240, "answer": true, "completion": ".decl Endangered_species(Species:symbol)\nEndangered_species(\"Leopard cat\").\nEndangered_species(\"Bornean Orangutan\").\n.decl Population_trend(Species:symbol, Trend:symbol)\nPopulation_trend(\"Leopard cat\", \"stable\").\nPopulation_trend(\"Bornean Orangutan\", \"declining\").\n.decl Answer()\nAnswer() :- Endangered_species(\"Leopard cat\"), Population_trend(\"Leopard cat\", trend1), Endangered_species(\"Bornean Orangutan\"), Population_trend(\"Bornean Orangutan\", trend2), trend1 != \"declining\", trend2 = \"declining\".\n.output Answer", "completions": [".decl Endangered_species(Species:symbol)\nEndangered_species(\"Leopard cat\").\nEndangered_species(\"Bornean Orangutan\").\n.decl Population_trend(Species:symbol, Trend:symbol)\nPopulation_trend(\"Leopard cat\", \"stable\").\nPopulation_trend(\"Bornean Orangutan\", \"declining\").\n.decl Answer()\nAnswer() :- Endangered_species(\"Leopard cat\"), Population_trend(\"Leopard cat\", trend1), Endangered_species(\"Bornean Orangutan\"), Population_trend(\"Bornean Orangutan\", trend2), trend1 != \"declining\", trend2 = \"declining\".\n.output Answer"]}
{"id": 2241, "answer": false, "completion": ".decl Can_ride(Person:symbol, Vehicle:symbol)\nCan_ride(\"cat\", \"Panzer VIII Maus tank missile\").\n.decl Is_in(Location:symbol, Region:symbol)\nIs_in(\"Barcelona\", \"Catalonia\").\nIs_in(\"Madrid\", \"Madrid\").\n.decl Answer()\nAnswer() :- Can_ride(\"cat\", vehicle), Is_in(\"Barcelona\", region1), Is_in(\"Madrid\", region2), region1 = region2.\n.output Answer", "completions": [".decl Can_ride(Person:symbol, Vehicle:symbol)\nCan_ride(\"cat\", \"Panzer VIII Maus tank missile\").\n.decl Is_in(Location:symbol, Region:symbol)\nIs_in(\"Barcelona\", \"Catalonia\").\nIs_in(\"Madrid\", \"Madrid\").\n.decl Answer()\nAnswer() :- Can_ride(\"cat\", vehicle), Is_in(\"Barcelona\", region1), Is_in(\"Madrid\", region2), region1 = region2.\n.output Answer"]}
{"id": 2242, "answer": false, "completion": ".decl Discounted(Food:symbol)\nDiscounted(\"bread\").\nDiscounted(\"milk\").\n.decl Out_of_date(Food:symbol)\nOut_of_date(\"bread\").\nOut_of_date(\"milk\").\n.decl Answer()\nAnswer() :- Discounted(food), !Out_of_date(food).\n.output Answer", "completions": [".decl Discounted(Food:symbol)\nDiscounted(\"bread\").\nDiscounted(\"milk\").\n.decl Out_of_date(Food:symbol)\nOut_of_date(\"bread\").\nOut_of_date(\"milk\").\n.decl Answer()\nAnswer() :- Discounted(food), !Out_of_date(food).\n.output Answer"]}
{"id": 2243, "answer": true, "completion": ".decl Trusts(Person1:symbol, Person2:symbol)\nTrusts(\"Carrie Poppy\", \"psychic\").\n.decl Believes_in(Person:symbol, Concept:symbol)\nBelieves_in(\"Carrie Poppy\", \"science\").\nBelieves_in(\"psychic\", \"supernatural\").\n.decl Answer()\nAnswer() :- Trusts(\"Carrie Poppy\", person2), Believes_in(person2, concept), concept = \"supernatural\", Believes_in(\"Carrie Poppy\", \"science\").\n.output Answer", "completions": [".decl Trusts(Person1:symbol, Person2:symbol)\nTrusts(\"Carrie Poppy\", \"psychic\").\n.decl Believes_in(Person:symbol, Concept:symbol)\nBelieves_in(\"Carrie Poppy\", \"science\").\nBelieves_in(\"psychic\", \"supernatural\").\n.decl Answer()\nAnswer() :- Trusts(\"Carrie Poppy\", person2), Believes_in(person2, concept), concept = \"supernatural\", Believes_in(\"Carrie Poppy\", \"science\").\n.output Answer"]}
{"id": 2244, "answer": true, "completion": ".decl Donates(Organ:symbol, Donor:symbol, Recipient:symbol)\nDonates(\"kidney\", \"living donor\", \"recipient\").\nDonates(\"kidney\", \"deceased donor\", \"recipient\").\n.decl Answer()\nAnswer() :- Donates(\"kidney\", donor, recipient), donor = \"living donor\".\n.output Answer", "completions": [".decl Donates(Organ:symbol, Donor:symbol, Recipient:symbol)\nDonates(\"kidney\", \"living donor\", \"recipient\").\nDonates(\"kidney\", \"deceased donor\", \"recipient\").\n.decl Answer()\nAnswer() :- Donates(\"kidney\", donor, recipient), donor = \"living donor\".\n.output Answer"]}
{"id": 2245, "answer": false, "completion": ".decl Symptom(Person:symbol, Symptom:symbol)\nSymptom(\"John\", \"headache\").\nSymptom(\"John\", \"dizziness\").\nSymptom(\"John\", \"numbness\").\nSymptom(\"Jane\", \"nausea\").\nSymptom(\"Jane\", \"vomiting\").\nSymptom(\"Jane\", \"blurred vision\").\n.decl Answer()\nAnswer() :- Symptom(person, \"headache\"), Symptom(person, \"dizziness\"), Symptom(person, \"numbness\"), Symptom(person, \"nausea\"), Symptom(person, \"vomiting\"), Symptom(person, \"blurred vision\").\n.negAnswer() :- Symptom(person, \"headache\"), Symptom(person, \"dizziness\"), Symptom(person, \"numbness\"), !Symptom(person, \"nausea\"), !Symptom(person, \"vomiting\"), !Symptom(person, \"blurred vision\").\n.output Answer, negAnswer", "completions": [".decl Symptom(Person:symbol, Symptom:symbol)\nSymptom(\"John\", \"headache\").\nSymptom(\"John\", \"dizziness\").\nSymptom(\"John\", \"numbness\").\nSymptom(\"Jane\", \"nausea\").\nSymptom(\"Jane\", \"vomiting\").\nSymptom(\"Jane\", \"blurred vision\").\n.decl Answer()\nAnswer() :- Symptom(person, \"headache\"), Symptom(person, \"dizziness\"), Symptom(person, \"numbness\"), Symptom(person, \"nausea\"), Symptom(person, \"vomiting\"), Symptom(person, \"blurred vision\").\n.negAnswer() :- Symptom(person, \"headache\"), Symptom(person, \"dizziness\"), Symptom(person, \"numbness\"), !Symptom(person, \"nausea\"), !Symptom(person, \"vomiting\"), !Symptom(person, \"blurred vision\").\n.output Answer, negAnswer"]}
{"id": 2246, "answer": true, "completion": ".decl Can_taste(Person:symbol, TV_show:symbol)\nCan_taste(\"John\", \"Law & Order\").\n.decl Answer()\nAnswer() :- Can_taste(person, \"Law & Order\").\n.output Answer", "completions": [".decl Can_taste(Person:symbol, TV_show:symbol)\nCan_taste(\"John\", \"Law & Order\").\n.decl Answer()\nAnswer() :- Can_taste(person, \"Law & Order\").\n.output Answer"]}
{"id": 2247, "answer": true, "completion": ".decl Has_equivalent(Roman:symbol, Greek:symbol)\nHas_equivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Has_equivalent(\"Vulcan\", equivalent), equivalent = \"Hephaestus\".\n.output Answer", "completions": [".decl Has_equivalent(Roman:symbol, Greek:symbol)\nHas_equivalent(\"Vulcan\", \"Hephaestus\").\n.decl Answer()\nAnswer() :- Has_equivalent(\"Vulcan\", equivalent), equivalent = \"Hephaestus\".\n.output Answer"]}
{"id": 2248, "answer": false, "completion": ".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"hippopotamus\", \"Africa\").\nLives_in(\"polar bear\", \"Arctic\").\nLives_in(\"koala\", \"Australia\").\n.decl Answer()\nAnswer() :- Lives_in(\"hippopotamus\", location), !Lives_in(animal, !location).\n.output Answer", "completions": [".decl Lives_in(Animal:symbol, Location:symbol)\nLives_in(\"hippopotamus\", \"Africa\").\nLives_in(\"polar bear\", \"Arctic\").\nLives_in(\"koala\", \"Australia\").\n.decl Answer()\nAnswer() :- Lives_in(\"hippopotamus\", location), !Lives_in(animal, !location).\n.output Answer"]}
{"id": 2249, "answer": true, "completion": ".decl Has_child(Parent:symbol, Child:symbol)\nHas_child(\"mother of stillborn\", \"none\").\n.decl Has_wrapping_paper(Gift:symbol, Wrapping_paper:symbol)\nHas_wrapping_paper(\"stork wrapping paper\", \"appropriate\").\nHas_wrapping_paper(\"black wrapping paper\", \"inappropriate\").\n.decl Answer()\nAnswer() :- Has_child(\"mother of stillborn\", child), Has_wrapping_paper(gift, wrapping_paper), wrapping_paper = \"appropriate\".\n.output Answer", "completions": [".decl Has_child(Parent:symbol, Child:symbol)\nHas_child(\"mother of stillborn\", \"none\").\n.decl Has_wrapping_paper(Gift:symbol, Wrapping_paper:symbol)\nHas_wrapping_paper(\"stork wrapping paper\", \"appropriate\").\nHas_wrapping_paper(\"black wrapping paper\", \"inappropriate\").\n.decl Answer()\nAnswer() :- Has_child(\"mother of stillborn\", child), Has_wrapping_paper(gift, wrapping_paper), wrapping_paper = \"appropriate\".\n.output Answer"]}
{"id": 2250, "answer": false, "completion": ".decl Sells(Store:symbol, Product:symbol)\nSells(\"Best Buy\", \"Casio watch\").\nSells(\"Walmart\", \"Casio calculator\").\nSells(\"Target\", \"Casio keyboard\").\n.decl Answer()\nAnswer() :- Sells(\"Petco\", \"Casio product\").\n.output Answer", "completions": [".decl Sells(Store:symbol, Product:symbol)\nSells(\"Best Buy\", \"Casio watch\").\nSells(\"Walmart\", \"Casio calculator\").\nSells(\"Target\", \"Casio keyboard\").\n.decl Answer()\nAnswer() :- Sells(\"Petco\", \"Casio product\").\n.output Answer"]}
{"id": 2251, "answer": false, "completion": ".decl Believes(Person:symbol, Idea:symbol)\nBelieves(\"Immanuel Kant\", \"categorical imperative\").\n.decl Supports(Person:symbol, Movement:symbol)\nSupports(\"Black Lives Matter\", \"racial justice\").\n.decl Opposes(Person:symbol, Idea:symbol)\nOpposes(\"Immanuel Kant\", \"heteronomy\").\n.decl Answer()\nAnswer() :- Believes(\"Immanuel Kant\", idea), Opposes(\"Immanuel Kant\", idea), Supports(\"Black Lives Matter\", movement).\n.output Answer", "completions": [".decl Believes(Person:symbol, Idea:symbol)\nBelieves(\"Immanuel Kant\", \"categorical imperative\").\n.decl Supports(Person:symbol, Movement:symbol)\nSupports(\"Black Lives Matter\", \"racial justice\").\n.decl Opposes(Person:symbol, Idea:symbol)\nOpposes(\"Immanuel Kant\", \"heteronomy\").\n.decl Answer()\nAnswer() :- Believes(\"Immanuel Kant\", idea), Opposes(\"Immanuel Kant\", idea), Supports(\"Black Lives Matter\", movement).\n.output Answer"]}
{"id": 2252, "answer": false, "completion": ".decl Eats(Animal:symbol, Food:symbol)\nEats(\"cat\", \"fish\").\nEats(\"cat\", \"chicken\").\nEats(\"cat\", \"mice\").\n.decl Answer()\nAnswer() :- Eats(\"cat\", \"pancakes\").\n.output Answer", "completions": [".decl Eats(Animal:symbol, Food:symbol)\nEats(\"cat\", \"fish\").\nEats(\"cat\", \"chicken\").\nEats(\"cat\", \"mice\").\n.decl Answer()\nAnswer() :- Eats(\"cat\", \"pancakes\").\n.output Answer"]}
{"id": 2253, "answer": true, "completion": ".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Euro\", 8.5).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"Euro\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer", "completions": [".decl Has_density(Object:symbol, Density:float)\nHas_density(\"Euro\", 8.5).\nHas_density(\"water\", 1).\n.decl Answer()\nAnswer() :- Has_density(\"Euro\", density1), Has_density(\"water\", density2), density1 > density2.\n.output Answer"]}
{"id": 2254, "answer": true, "completion": ".decl Has_teeth(Animal:symbol)\nHas_teeth(\"honey badger\").\nHas_teeth(\"wolverine\").\n.decl Answer()\nAnswer() :- Has_teeth(\"honey badger\"), Has_teeth(\"wolverine\"), \"honey badger\" != \"wolverine\".\n.output Answer", "completions": [".decl Has_teeth(Animal:symbol)\nHas_teeth(\"honey badger\").\nHas_teeth(\"wolverine\").\n.decl Answer()\nAnswer() :- Has_teeth(\"honey badger\"), Has_teeth(\"wolverine\"), \"honey badger\" != \"wolverine\".\n.output Answer"]}
{"id": 2255, "answer": false, "completion": ".decl Is_alive(Entity:symbol)\nIs_alive(\"Cholera\") ! :- true.\n.output Is_alive", "completions": [".decl Is_alive(Entity:symbol)\nIs_alive(\"Cholera\") ! :- true.\n.output Is_alive"]}
{"id": 2256, "answer": true, "completion": ".decl Allegedly_committed(Person:symbol, Crime:symbol)\nAllegedly_committed(\"Prince Andrew\", \"sexual assault\").\n.decl Is_member(Person:symbol, Group:symbol)\nIs_member(\"Prince Andrew\", \"British royal family\").\n.decl Answer()\nAnswer() :- Is_member(person, \"British royal family\"), Allegedly_committed(person, crime).\n.output Answer", "completions": [".decl Allegedly_committed(Person:symbol, Crime:symbol)\nAllegedly_committed(\"Prince Andrew\", \"sexual assault\").\n.decl Is_member(Person:symbol, Group:symbol)\nIs_member(\"Prince Andrew\", \"British royal family\").\n.decl Answer()\nAnswer() :- Is_member(person, \"British royal family\"), Allegedly_committed(person, crime).\n.output Answer"]}
{"id": 2257, "answer": true, "completion": ".decl Related_to(Day:symbol, Entity:symbol)\nRelated_to(\"Wednesday\", \"Odin\").\nRelated_to(\"Odin\", \"Thor\").\n.decl Answer()\nAnswer() :- Related_to(\"Wednesday\", entity1), Related_to(entity1, \"Thor\").\n.output Answer", "completions": [".decl Related_to(Day:symbol, Entity:symbol)\nRelated_to(\"Wednesday\", \"Odin\").\nRelated_to(\"Odin\", \"Thor\").\n.decl Answer()\nAnswer() :- Related_to(\"Wednesday\", entity1), Related_to(entity1, \"Thor\").\n.output Answer"]}
{"id": 2258, "answer": false, "completion": ".decl Associated_with(Item:symbol, Association:symbol)\nAssociated_with(\"honey\", \"bees\").\nAssociated_with(\"queens\", \"monarchy\").\n.decl Answer()\nAnswer() :- Associated_with(\"honey\", association), Associated_with(\"queens\", association).\n.output Answer", "completions": [".decl Associated_with(Item:symbol, Association:symbol)\nAssociated_with(\"honey\", \"bees\").\nAssociated_with(\"queens\", \"monarchy\").\n.decl Answer()\nAnswer() :- Associated_with(\"honey\", association), Associated_with(\"queens\", association).\n.output Answer"]}
{"id": 2259, "answer": false, "completion": ".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\n.decl Has_distance(Object:symbol, Distance:float)\nHas_distance(\"Frankenstein's monster's bald spot\", 10).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height), Has_distance(\"Frankenstein's monster's bald spot\", distance), height > distance.\n.output Answer", "completions": [".decl Has_height(Person:symbol, Height:float)\nHas_height(\"Robert Wadlow\", 2.72).\n.decl Has_distance(Object:symbol, Distance:float)\nHas_distance(\"Frankenstein's monster's bald spot\", 10).\n.decl Answer()\nAnswer() :- Has_height(\"Robert Wadlow\", height), Has_distance(\"Frankenstein's monster's bald spot\", distance), height > distance.\n.output Answer"]}
{"id": 2260, "answer": true, "completion": ".decl Teaches(Subject:symbol, Teacher:symbol)\nTeaches(\"New Testament\", \"priest\").\nTeaches(\"Math\", \"kindergarten teacher\").\n.decl Answer()\nAnswer() :- Teaches(\"New Testament\", teacher), Teaches(\"Math\", teacher2), teacher != teacher2.\n.output Answer", "completions": [".decl Teaches(Subject:symbol, Teacher:symbol)\nTeaches(\"New Testament\", \"priest\").\nTeaches(\"Math\", \"kindergarten teacher\").\n.decl Answer()\nAnswer() :- Teaches(\"New Testament\", teacher), Teaches(\"Math\", teacher2), teacher != teacher2.\n.output Answer"]}
{"id": 2261, "answer": false, "completion": ".decl Authored(Book:symbol, Author:symbol)\nAuthored(\"The Dynamite Club\", \"John Merriman\").\nAuthored(\"The Red Room\", \"August Strindberg\").\n.decl Banned(Book:symbol)\nBanned(\"The Red Room\").\n.decl Answer()\nAnswer() :- Authored(book, \"Alfred Nobel\"), Banned(book).\n.output Answer", "completions": [".decl Authored(Book:symbol, Author:symbol)\nAuthored(\"The Dynamite Club\", \"John Merriman\").\nAuthored(\"The Red Room\", \"August Strindberg\").\n.decl Banned(Book:symbol)\nBanned(\"The Red Room\").\n.decl Answer()\nAnswer() :- Authored(book, \"Alfred Nobel\"), Banned(book).\n.output Answer"]}
{"id": 2262, "answer": false, "completion": ".decl Halts_kinetic_energy(Technique:symbol)\nHalts_kinetic_energy(\"ukemi\").\n.decl Answer()\nAnswer() :- !Halts_kinetic_energy(technique).\n.output Answer", "completions": [".decl Halts_kinetic_energy(Technique:symbol)\nHalts_kinetic_energy(\"ukemi\").\n.decl Answer()\nAnswer() :- !Halts_kinetic_energy(technique).\n.output Answer"]}
{"id": 2263, "answer": true, "completion": ".decl Contains(Substance:symbol, Food:symbol)\nContains(\"marijuana\", \"special brownies\").\n.decl Answer()\nAnswer() :- Contains(substance, \"special brownies\"), substance != \"sugar\".\n.output Answer", "completions": [".decl Contains(Substance:symbol, Food:symbol)\nContains(\"marijuana\", \"special brownies\").\n.decl Answer()\nAnswer() :- Contains(substance, \"special brownies\"), substance != \"sugar\".\n.output Answer"]}
{"id": 2264, "answer": false, "completion": ".decl Has_n_episodes(TV_show:symbol, N_episodes:float)\nHas_n_episodes(\"Futurama\", 140).\nHas_n_episodes(\"The Simpsons\", 662).\n.decl Average_episodes_per_year(TV_show:symbol, Average:float)\nAverage_episodes_per_year(\"Futurama\", 10).\nAverage_episodes_per_year(\"The Simpsons\", 22).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Futurama\", n_episodes1), Has_n_episodes(\"The Simpsons\", n_episodes2), Average_episodes_per_year(\"Futurama\", avg1), Average_episodes_per_year(\"The Simpsons\", avg2), n_episodes1 + (2020-1999)*avg1 > n_episodes2 + (2020-1989)*avg2.\n.output Answer", "completions": [".decl Has_n_episodes(TV_show:symbol, N_episodes:float)\nHas_n_episodes(\"Futurama\", 140).\nHas_n_episodes(\"The Simpsons\", 662).\n.decl Average_episodes_per_year(TV_show:symbol, Average:float)\nAverage_episodes_per_year(\"Futurama\", 10).\nAverage_episodes_per_year(\"The Simpsons\", 22).\n.decl Answer()\nAnswer() :- Has_n_episodes(\"Futurama\", n_episodes1), Has_n_episodes(\"The Simpsons\", n_episodes2), Average_episodes_per_year(\"Futurama\", avg1), Average_episodes_per_year(\"The Simpsons\", avg2), n_episodes1 + (2020-1999)*avg1 > n_episodes2 + (2020-1989)*avg2.\n.output Answer"]}
{"id": 2265, "answer": true, "completion": ".decl Lives_in_temperature(Animal:symbol, Temperature:float)\nLives_in_temperature(\"anchovy\", 10).\nLives_in_temperature(\"anchovy\", 5).\nLives_in_temperature(\"anchovy\", 20).\n.decl Answer()\nAnswer() :- Lives_in_temperature(\"anchovy\", temp1), Lives_in_temperature(\"anchovy\", temp2), temp1 > temp2.\n.output Answer", "completions": [".decl Lives_in_temperature(Animal:symbol, Temperature:float)\nLives_in_temperature(\"anchovy\", 10).\nLives_in_temperature(\"anchovy\", 5).\nLives_in_temperature(\"anchovy\", 20).\n.decl Answer()\nAnswer() :- Lives_in_temperature(\"anchovy\", temp1), Lives_in_temperature(\"anchovy\", temp2), temp1 > temp2.\n.output Answer"]}
{"id": 2266, "answer": false, "completion": ".decl Skills(Person:symbol, Skill:symbol)\nSkills(\"John\", \"guitar hero\").\nSkills(\"John\", \"guitar\").\n.decl Answer()\nAnswer() :- Skills(person, \"guitar hero\"), !Skills(person, \"guitar\").\n.output Answer", "completions": [".decl Skills(Person:symbol, Skill:symbol)\nSkills(\"John\", \"guitar hero\").\nSkills(\"John\", \"guitar\").\n.decl Answer()\nAnswer() :- Skills(person, \"guitar hero\"), !Skills(person, \"guitar\").\n.output Answer"]}
{"id": 2267, "answer": false, "completion": ".decl Named_for(Person:symbol, Name:symbol)\nNamed_for(\"Marilyn Manson\", \"Charles Manson\").\nNamed_for(\"Twiggy Ramirez\", \"Richard Ramirez\").\nNamed_for(\"Gidget Gein\", \"Ed Gein\").\n.decl Kills(Person:symbol, N_kills:float)\nKills(\"Charles Manson\", 9).\n.decl Answer()\nAnswer() :- Named_for(person, name), Kills(\"Charles Manson\", n_kills), name > n_kills.\n.output Answer", "completions": [".decl Named_for(Person:symbol, Name:symbol)\nNamed_for(\"Marilyn Manson\", \"Charles Manson\").\nNamed_for(\"Twiggy Ramirez\", \"Richard Ramirez\").\nNamed_for(\"Gidget Gein\", \"Ed Gein\").\n.decl Kills(Person:symbol, N_kills:float)\nKills(\"Charles Manson\", 9).\n.decl Answer()\nAnswer() :- Named_for(person, name), Kills(\"Charles Manson\", n_kills), name > n_kills.\n.output Answer"]}
{"id": 2268, "answer": false, "completion": ".decl Branch_of_govt(Branch:symbol)\nBranch_of_govt(\"executive\").\nBranch_of_govt(\"legislative\").\nBranch_of_govt(\"judicial\").\n.decl Has_power(Branch:symbol, Power:symbol)\nHas_power(\"executive\", \"power over the military\").\nHas_power(\"legislative\", \"power to veto\").\n.decl Answer()\nAnswer() :- Has_power(branch1, \"power over the military\"), Has_power(branch2, \"power to veto\"), branch1 = branch2.\n.output Answer", "completions": [".decl Branch_of_govt(Branch:symbol)\nBranch_of_govt(\"executive\").\nBranch_of_govt(\"legislative\").\nBranch_of_govt(\"judicial\").\n.decl Has_power(Branch:symbol, Power:symbol)\nHas_power(\"executive\", \"power over the military\").\nHas_power(\"legislative\", \"power to veto\").\n.decl Answer()\nAnswer() :- Has_power(branch1, \"power over the military\"), Has_power(branch2, \"power to veto\"), branch1 = branch2.\n.output Answer"]}
{"id": 2269, "answer": false, "completion": ".decl Believes_in_afterlife(Religion:symbol, Afterlife:symbol)\nBelieves_in_afterlife(\"Christianity\", \"Heaven\").\nBelieves_in_afterlife(\"Christianity\", \"Hell\").\nBelieves_in_afterlife(\"Judaism\", \"Sheol\").\n.decl Answer()\nAnswer() :- Believes_in_afterlife(\"Christianity\", afterlife), afterlife = \"Sheol\".\n.output Answer", "completions": [".decl Believes_in_afterlife(Religion:symbol, Afterlife:symbol)\nBelieves_in_afterlife(\"Christianity\", \"Heaven\").\nBelieves_in_afterlife(\"Christianity\", \"Hell\").\nBelieves_in_afterlife(\"Judaism\", \"Sheol\").\n.decl Answer()\nAnswer() :- Believes_in_afterlife(\"Christianity\", afterlife), afterlife = \"Sheol\".\n.output Answer"]}
{"id": 2270, "answer": true, "completion": ".decl Built_by(Civilization:symbol, Structure:symbol)\nBuilt_by(\"Ancient Egypt\", \"Great Pyramids\").\n.decl Form_of_government(Civilization:symbol, Government:symbol)\nForm_of_government(\"Ancient Egypt\", \"theocracy\").\n.decl Answer()\nAnswer() :- Built_by(civilization, \"Great Pyramids\"), Form_of_government(civilization, \"theocracy\").\n.output Answer", "completions": [".decl Built_by(Civilization:symbol, Structure:symbol)\nBuilt_by(\"Ancient Egypt\", \"Great Pyramids\").\n.decl Form_of_government(Civilization:symbol, Government:symbol)\nForm_of_government(\"Ancient Egypt\", \"theocracy\").\n.decl Answer()\nAnswer() :- Built_by(civilization, \"Great Pyramids\"), Form_of_government(civilization, \"theocracy\").\n.output Answer"]}
{"id": 2271, "answer": false, "completion": ".decl Can_ride(Person:symbol, Ride:symbol)\nCan_ride(\"Justin Timberlake\", \"Roller Coaster\").\nCan_ride(\"Justin Timberlake\", \"Ferris Wheel\").\nCan_ride(\"Justin Timberlake\", \"Carousel\").\n.decl Answer()\nAnswer() :- Can_ride(\"Justin Timberlake\", ride), ride = \"Shipwreck Falls\".\n.output Answer", "completions": [".decl Can_ride(Person:symbol, Ride:symbol)\nCan_ride(\"Justin Timberlake\", \"Roller Coaster\").\nCan_ride(\"Justin Timberlake\", \"Ferris Wheel\").\nCan_ride(\"Justin Timberlake\", \"Carousel\").\n.decl Answer()\nAnswer() :- Can_ride(\"Justin Timberlake\", ride), ride = \"Shipwreck Falls\".\n.output Answer"]}
{"id": 2272, "answer": true, "completion": ".decl Can_traverse(Vehicle:symbol, Tunnel:symbol)\nCan_traverse(\"Oasis cruise boat\", \"Lincoln Tunnel\").\n.decl Answer()\nAnswer() :- Can_traverse(vehicle, tunnel).\n.output Answer", "completions": [".decl Can_traverse(Vehicle:symbol, Tunnel:symbol)\nCan_traverse(\"Oasis cruise boat\", \"Lincoln Tunnel\").\n.decl Answer()\nAnswer() :- Can_traverse(vehicle, tunnel).\n.output Answer"]}
{"id": 2273, "answer": true, "completion": ".decl Advocates(Person:symbol, Lifestyle:symbol)\nAdvocates(\"Snoop Dogg\", \"smoking weed\").\n.decl Opposes(Person:symbol, Lifestyle:symbol)\nOpposes(\"Snoop Dogg\", \"straight edge\").\n.decl Answer()\nAnswer() :- Advocates(\"Snoop Dogg\", lifestyle), Opposes(\"Snoop Dogg\", \"straight edge\").\n.output Answer", "completions": [".decl Advocates(Person:symbol, Lifestyle:symbol)\nAdvocates(\"Snoop Dogg\", \"smoking weed\").\n.decl Opposes(Person:symbol, Lifestyle:symbol)\nOpposes(\"Snoop Dogg\", \"straight edge\").\n.decl Answer()\nAnswer() :- Advocates(\"Snoop Dogg\", lifestyle), Opposes(\"Snoop Dogg\", \"straight edge\").\n.output Answer"]}
{"id": 2274, "answer": false, "completion": ".decl Can_get_disease(Animal:symbol, Disease:symbol)\nCan_get_disease(\"human\", \"cancer\").\nCan_get_disease(\"dog\", \"cancer\").\nCan_get_disease(\"cat\", \"cancer\").\n.decl Answer()\nAnswer() :- Can_get_disease(\"amoeba\", \"cancer\").\n.output Answer", "completions": [".decl Can_get_disease(Animal:symbol, Disease:symbol)\nCan_get_disease(\"human\", \"cancer\").\nCan_get_disease(\"dog\", \"cancer\").\nCan_get_disease(\"cat\", \"cancer\").\n.decl Answer()\nAnswer() :- Can_get_disease(\"amoeba\", \"cancer\").\n.output Answer"]}
{"id": 2275, "answer": false, "completion": ".decl Listened_to_album(Event:symbol, Album:symbol)\nListened_to_album(\"Justin Bieber concert\", \"Believe\").\n.decl Happened_during(Event:symbol, Time_period:symbol)\nHappened_during(\"Battle of Baghdad\", \"2003-2011\").\n.decl Answer()\nAnswer() :- Listened_to_album(\"Justin Bieber concert\", \"Believe\"), Happened_during(\"Justin Bieber concert\", time_period1), Happened_during(\"Battle of Baghdad\", time_period2), time_period1 = time_period2.\n.output Answer", "completions": [".decl Listened_to_album(Event:symbol, Album:symbol)\nListened_to_album(\"Justin Bieber concert\", \"Believe\").\n.decl Happened_during(Event:symbol, Time_period:symbol)\nHappened_during(\"Battle of Baghdad\", \"2003-2011\").\n.decl Answer()\nAnswer() :- Listened_to_album(\"Justin Bieber concert\", \"Believe\"), Happened_during(\"Justin Bieber concert\", time_period1), Happened_during(\"Battle of Baghdad\", time_period2), time_period1 = time_period2.\n.output Answer"]}
{"id": 2276, "answer": false, "completion": ".decl Is_vegan(Person:symbol)\nIs_vegan(\"Alice\").\nIs_vegan(\"Bob\").\n.decl Contains_ingredient(Dish:symbol, Ingredient:symbol)\nContains_ingredient(\"Paella\", \"chicken\").\nContains_ingredient(\"Paella\", \"shrimp\").\nContains_ingredient(\"Paella\", \"rice\").\nContains_ingredient(\"Paella\", \"vegetables\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Contains_ingredient(\"Paella\", \"chicken\"), !Contains_ingredient(\"Paella\", \"shrimp\").\nAnswer() :- Is_vegan(person), Contains_ingredient(\"Paella\", \"shrimp\"), !Contains_ingredient(\"Paella\", \"chicken\").\nAnswer() :- Is_vegan(person), !Contains_ingredient(\"Paella\", \"chicken\"), !Contains_ingredient(\"Paella\", \"shrimp\").\n.output Answer", "completions": [".decl Is_vegan(Person:symbol)\nIs_vegan(\"Alice\").\nIs_vegan(\"Bob\").\n.decl Contains_ingredient(Dish:symbol, Ingredient:symbol)\nContains_ingredient(\"Paella\", \"chicken\").\nContains_ingredient(\"Paella\", \"shrimp\").\nContains_ingredient(\"Paella\", \"rice\").\nContains_ingredient(\"Paella\", \"vegetables\").\n.decl Answer()\nAnswer() :- Is_vegan(person), Contains_ingredient(\"Paella\", \"chicken\"), !Contains_ingredient(\"Paella\", \"shrimp\").\nAnswer() :- Is_vegan(person), Contains_ingredient(\"Paella\", \"shrimp\"), !Contains_ingredient(\"Paella\", \"chicken\").\nAnswer() :- Is_vegan(person), !Contains_ingredient(\"Paella\", \"chicken\"), !Contains_ingredient(\"Paella\", \"shrimp\").\n.output Answer"]}
{"id": 2277, "answer": false, "completion": ".decl Accused_of(Person1:symbol, Person2:symbol, Crime:symbol)\nAccused_of(\"Mozart\", \"Salieri\", \"murder\").\n.decl Answer()\nAnswer() :- Accused_of(\"Mozart\", \"Wagner\", \"stealing\").\n.output Answer", "completions": [".decl Accused_of(Person1:symbol, Person2:symbol, Crime:symbol)\nAccused_of(\"Mozart\", \"Salieri\", \"murder\").\n.decl Answer()\nAnswer() :- Accused_of(\"Mozart\", \"Wagner\", \"stealing\").\n.output Answer"]}
{"id": 2278, "answer": true, "completion": ".decl Celebrates(Event:symbol, Person:symbol)\nCelebrates(\"New Year's Eve\", \"neighbor\").\n.decl Gives(Giver:symbol, Receiver:symbol, Item:symbol)\nGives(\"neighbor\", \"you\", \"candy\").\n.decl Answer()\nAnswer() :- Celebrates(\"New Year's Eve\", person), Gives(person, \"you\", \"candy\").\n.output Answer", "completions": [".decl Celebrates(Event:symbol, Person:symbol)\nCelebrates(\"New Year's Eve\", \"neighbor\").\n.decl Gives(Giver:symbol, Receiver:symbol, Item:symbol)\nGives(\"neighbor\", \"you\", \"candy\").\n.decl Answer()\nAnswer() :- Celebrates(\"New Year's Eve\", person), Gives(person, \"you\", \"candy\").\n.output Answer"]}
{"id": 2279, "answer": true, "completion": ".decl Lives_in_water(Animal:symbol, Water_body:symbol)\nLives_in_water(\"yellow perch\", \"Lake Erie\").\nLives_in_water(\"yellow perch\", \"Atlantic Ocean\").\nLives_in_water(\"yellow perch\", \"Mississippi River\").\nLives_in_water(\"yellow perch\", \"Great Lakes\").\n.decl Answer()\nAnswer() :- Lives_in_water(\"yellow perch\", water_body), water_body != \"Red Sea\".\n.output Answer", "completions": [".decl Lives_in_water(Animal:symbol, Water_body:symbol)\nLives_in_water(\"yellow perch\", \"Lake Erie\").\nLives_in_water(\"yellow perch\", \"Atlantic Ocean\").\nLives_in_water(\"yellow perch\", \"Mississippi River\").\nLives_in_water(\"yellow perch\", \"Great Lakes\").\n.decl Answer()\nAnswer() :- Lives_in_water(\"yellow perch\", water_body), water_body != \"Red Sea\".\n.output Answer"]}
{"id": 2280, "answer": true, "completion": ".decl Ruled_by(Ruler:symbol, Kingdom:symbol)\nRuled_by(\"Matthias Corvinus\", \"Kingdom of Hungary\").\n.decl Elected_by(Land_owner:symbol, Kingdom:symbol)\nElected_by(\"land owners\", \"Kingdom of Hungary\").\n.decl Answer()\nAnswer() :- Ruled_by(ruler, \"Kingdom of Hungary\"), Elected_by(\"land owners\", \"Kingdom of Hungary\"), ruler = \"Matthias Corvinus\".\n.output Answer", "completions": [".decl Ruled_by(Ruler:symbol, Kingdom:symbol)\nRuled_by(\"Matthias Corvinus\", \"Kingdom of Hungary\").\n.decl Elected_by(Land_owner:symbol, Kingdom:symbol)\nElected_by(\"land owners\", \"Kingdom of Hungary\").\n.decl Answer()\nAnswer() :- Ruled_by(ruler, \"Kingdom of Hungary\"), Elected_by(\"land owners\", \"Kingdom of Hungary\"), ruler = \"Matthias Corvinus\".\n.output Answer"]}
{"id": 2281, "answer": false, "completion": ".decl Lived_in(Time_period:symbol, Person:symbol)\nLived_in(\"15th century\", \"Topa Inca Yupanqui\").\n.decl Has_encounter(Person:symbol, Animal:symbol)\nHas_encounter(\"Topa Inca Yupanqui\", \"llama\").\nHas_encounter(\"Topa Inca Yupanqui\", \"alpaca\").\n.decl Is_native_to(Animal:symbol, Region:symbol)\nIs_native_to(\"llama\", \"South America\").\nIs_native_to(\"alpaca\", \"South America\").\nIs_native_to(\"western honey bee\", \"Europe\").\nIs_native_to(\"western honey bee\", \"Africa\").\n.decl Answer()\nAnswer() :- Has_encounter(\"Topa Inca Yupanqui\", animal1), Is_native_to(animal1, region1), Is_native_to(\"western honey bee\", region2), region1 = region2.\n.output Answer", "completions": [".decl Lived_in(Time_period:symbol, Person:symbol)\nLived_in(\"15th century\", \"Topa Inca Yupanqui\").\n.decl Has_encounter(Person:symbol, Animal:symbol)\nHas_encounter(\"Topa Inca Yupanqui\", \"llama\").\nHas_encounter(\"Topa Inca Yupanqui\", \"alpaca\").\n.decl Is_native_to(Animal:symbol, Region:symbol)\nIs_native_to(\"llama\", \"South America\").\nIs_native_to(\"alpaca\", \"South America\").\nIs_native_to(\"western honey bee\", \"Europe\").\nIs_native_to(\"western honey bee\", \"Africa\").\n.decl Answer()\nAnswer() :- Has_encounter(\"Topa Inca Yupanqui\", animal1), Is_native_to(animal1, region1), Is_native_to(\"western honey bee\", region2), region1 = region2.\n.output Answer"]}
{"id": 2282, "answer": true, "completion": ".decl Inspired_by(Book:symbol, Play:symbol)\nInspired_by(\"Alice's Adventures in Wonderland\", \"Macbeth\").\n.decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"Alice's Adventures in Wonderland\", \"Lewis Carroll\").\nWritten_by(\"Macbeth\", \"William Shakespeare\").\n.decl Answer()\nAnswer() :- Inspired_by(book, \"Macbeth\"), Written_by(book, \"Lewis Carroll\").\n.output Answer", "completions": [".decl Inspired_by(Book:symbol, Play:symbol)\nInspired_by(\"Alice's Adventures in Wonderland\", \"Macbeth\").\n.decl Written_by(Book:symbol, Author:symbol)\nWritten_by(\"Alice's Adventures in Wonderland\", \"Lewis Carroll\").\nWritten_by(\"Macbeth\", \"William Shakespeare\").\n.decl Answer()\nAnswer() :- Inspired_by(book, \"Macbeth\"), Written_by(book, \"Lewis Carroll\").\n.output Answer"]}
{"id": 2283, "answer": false, "completion": ".decl Mythical_being(Name:symbol, Mythology:symbol)\nMythical_being(\"fairy\", \"world\").\nMythical_being(\"valkyrie\", \"Norse\").\n.decl Appears_more_frequently(Name:symbol)\nAppears_more_frequently(name1) :- Mythical_being(name1, mythology1), Mythical_being(name2, mythology2), name1 != name2, mythology1 = mythology2, !Mythical_being(name2, mythology1).\n.decl Answer()\nAnswer() :- Appears_more_frequently(\"fairy\").\n.output Answer", "completions": [".decl Mythical_being(Name:symbol, Mythology:symbol)\nMythical_being(\"fairy\", \"world\").\nMythical_being(\"valkyrie\", \"Norse\").\n.decl Appears_more_frequently(Name:symbol)\nAppears_more_frequently(name1) :- Mythical_being(name1, mythology1), Mythical_being(name2, mythology2), name1 != name2, mythology1 = mythology2, !Mythical_being(name2, mythology1).\n.decl Answer()\nAnswer() :- Appears_more_frequently(\"fairy\").\n.output Answer"]}
{"id": 2284, "answer": false, "completion": ".decl Is_breed_of_animal(Breed:symbol, Animal:symbol)\nIs_breed_of_animal(\"Chinchilla\", \"rodent\").\nIs_breed_of_animal(\"Siamese\", \"cat\").\n.decl Is_type_of_animal(Animal:symbol, Type:symbol)\nIs_type_of_animal(\"rodent\", \"mammal\").\nIs_type_of_animal(\"cat\", \"mammal\").\n.decl Answer()\nAnswer() :- Is_breed_of_animal(\"Chinchilla\", animal), Is_type_of_animal(animal, \"rodent\").\n.output Answer", "completions": [".decl Is_breed_of_animal(Breed:symbol, Animal:symbol)\nIs_breed_of_animal(\"Chinchilla\", \"rodent\").\nIs_breed_of_animal(\"Siamese\", \"cat\").\n.decl Is_type_of_animal(Animal:symbol, Type:symbol)\nIs_type_of_animal(\"rodent\", \"mammal\").\nIs_type_of_animal(\"cat\", \"mammal\").\n.decl Answer()\nAnswer() :- Is_breed_of_animal(\"Chinchilla\", animal), Is_type_of_animal(animal, \"rodent\").\n.output Answer"]}
{"id": 2285, "answer": true, "completion": ".decl Visits(Person_A:symbol, Person_B:symbol)\nVisits(\"Elizabeth II\", \"Queen Victoria\").\n.decl Frequency(Person_A:symbol, Person_B:symbol, N_visits:float)\nFrequency(\"Elizabeth II\", \"Queen Victoria\", 10).\n.decl Answer()\nAnswer() :- Visits(\"Elizabeth II\", person), Frequency(\"Elizabeth II\", person, n_visits), n_visits > 5.\n.output Answer", "completions": [".decl Visits(Person_A:symbol, Person_B:symbol)\nVisits(\"Elizabeth II\", \"Queen Victoria\").\n.decl Frequency(Person_A:symbol, Person_B:symbol, N_visits:float)\nFrequency(\"Elizabeth II\", \"Queen Victoria\", 10).\n.decl Answer()\nAnswer() :- Visits(\"Elizabeth II\", person), Frequency(\"Elizabeth II\", person, n_visits), n_visits > 5.\n.output Answer"]}
{"id": 2286, "answer": false, "completion": ".decl Mentions(Character:symbol, Deity:symbol)\nMentions(\"Boy Who Cried Wolf\", \"Pan\").\n.decl Worships(Character:symbol, Deity:symbol)\nWorships(\"Pan\", \"nature\").\n.decl Answer()\nAnswer() :- Mentions(\"Boy Who Cried Wolf\", deity), Worships(\"Pan\", deity).\n.output Answer", "completions": [".decl Mentions(Character:symbol, Deity:symbol)\nMentions(\"Boy Who Cried Wolf\", \"Pan\").\n.decl Worships(Character:symbol, Deity:symbol)\nWorships(\"Pan\", \"nature\").\n.decl Answer()\nAnswer() :- Mentions(\"Boy Who Cried Wolf\", deity), Worships(\"Pan\", deity).\n.output Answer"]}
{"id": 2287, "answer": false, "completion": ".decl Connects(City_A:symbol, City_B:symbol)\nConnects(\"Los Angeles\", \"Chicago\").\n.decl Located_in(City:symbol, Country:symbol)\nLocated_in(\"Los Angeles\", \"United States\").\nLocated_in(\"Chicago\", \"United States\").\nLocated_in(\"Great Wall of China\", \"China\").\n.decl Answer()\nAnswer() :- Connects(city1, city2), Located_in(\"Great Wall of China\", country), Located_in(city1, country), Located_in(city2, country).\n.output Answer", "completions": [".decl Connects(City_A:symbol, City_B:symbol)\nConnects(\"Los Angeles\", \"Chicago\").\n.decl Located_in(City:symbol, Country:symbol)\nLocated_in(\"Los Angeles\", \"United States\").\nLocated_in(\"Chicago\", \"United States\").\nLocated_in(\"Great Wall of China\", \"China\").\n.decl Answer()\nAnswer() :- Connects(city1, city2), Located_in(\"Great Wall of China\", country), Located_in(city1, country), Located_in(city2, country).\n.output Answer"]}
{"id": 2288, "answer": false, "completion": ".decl Music_genre(Genre:symbol)\nMusic_genre(\"Happy hardcore\").\n.decl Occasion(Event:symbol)\nOccasion(\"funeral\").\n.decl Unusual(Event:symbol)\nUnusual(\"Happy hardcore music at a funeral\").\n.decl Answer()\nAnswer() :- Music_genre(genre), Occasion(event), Unusual(unusual), genre = unusual.\n.output Answer", "completions": [".decl Music_genre(Genre:symbol)\nMusic_genre(\"Happy hardcore\").\n.decl Occasion(Event:symbol)\nOccasion(\"funeral\").\n.decl Unusual(Event:symbol)\nUnusual(\"Happy hardcore music at a funeral\").\n.decl Answer()\nAnswer() :- Music_genre(genre), Occasion(event), Unusual(unusual), genre = unusual.\n.output Answer"]}
{"id": 2289, "answer": true, "completion": ".decl Market_value(Company:symbol, Value:float)\nMarket_value(\"Sainsbury's\", 10).\nMarket_value(\"Tesco\", 15).\n.decl Answer()\nAnswer() :- Market_value(\"Sainsbury's\", value1), Market_value(\"Tesco\", value2), value1 * 2 >= value2.\n.output Answer", "completions": [".decl Market_value(Company:symbol, Value:float)\nMarket_value(\"Sainsbury's\", 10).\nMarket_value(\"Tesco\", 15).\n.decl Answer()\nAnswer() :- Market_value(\"Sainsbury's\", value1), Market_value(\"Tesco\", value2), value1 * 2 >= value2.\n.output Answer"]}
