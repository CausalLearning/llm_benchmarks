{"id": 0, "answer": "E", "completion": "Let the distance between the car and the base of the tower be x, and let the height of the tower be h. Then, we can set up the following trigonometric equations:\n\ntan(45) = h/x\ntan(60) = h/(x + vt)\n\nwhere v is the speed of the car and t is the additional time it takes to reach the base of the tower. We can simplify these equations to:\n\nh = x\n√3 = h/(x + vt)\n\nSolving for h in the first equation and substituting into the second equation, we get:\n\n√3 = x/(x + vt)\n\nSolving for t, we get:\n\nt = (x/√3) - x\n\nWe know that t = 10 minutes, so we can solve for x:\n\n10/60 = (x/√3) - x\nx = 10√3/3\n\nSubstituting x into the equation for t, we get:\n\nt = (10√3/3√3) - (10√3/3) = -10/3\n\nThis doesn't make sense as a time, so we must have made an error in our calculations. Checking our work, we see that we made a mistake in the equation for t - we should have subtracted x/√3 instead of x. So, correcting that mistake, we get:\n\nt = (x/√3) - x\nt = (10√3/3√3) - (10√3/3)\nt = 10(√3 - 1)/3\n\nTherefore, the answer is option C) 7(√3 - 1).", "completions": ["Let the distance between the car and the base of the tower be x, and let the height of the tower be h. Then, we can set up the following trigonometric equations:\n\ntan(45) = h/x\ntan(60) = h/(x + vt)\n\nwhere v is the speed of the car and t is the additional time it takes to reach the base of the tower. We can simplify these equations to:\n\nh = x\n√3 = h/(x + vt)\n\nSolving for h in the first equation and substituting into the second equation, we get:\n\n√3 = x/(x + vt)\n\nSolving for t, we get:\n\nt = (x/√3) - x\n\nWe know that t = 10 minutes, so we can solve for x:\n\n10/60 = (x/√3) - x\nx = 10√3/3\n\nSubstituting x into the equation for t, we get:\n\nt = (10√3/3√3) - (10√3/3) = -10/3\n\nThis doesn't make sense as a time, so we must have made an error in our calculations. Checking our work, we see that we made a mistake in the equation for t - we should have subtracted x/√3 instead of x. So, correcting that mistake, we get:\n\nt = (x/√3) - x\nt = (10√3/3√3) - (10√3/3)\nt = 10(√3 - 1)/3\n\nTherefore, the answer is option C) 7(√3 - 1)."]}
{"id": 1, "answer": "E", "completion": "original_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 0.22)\nfinal_price = discounted_price - 20\nhalf_original_price = original_price / 2\nsolution = solve_it(final_price - half_original_price - 1.9, original_price)\nanswer = solution[original_price]", "completions": ["original_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 0.22)\nfinal_price = discounted_price - 20\nhalf_original_price = original_price / 2\nsolution = solve_it(final_price - half_original_price - 1.9, original_price)\nanswer = solution[original_price]"]}
{"id": 2, "answer": "A", "completion": "options = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        answer = option\n        break", "completions": ["options = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        answer = option\n        break"]}
{"id": 3, "answer": "A", "completion": "probability_a_increase = 0.56\nprobability_b_increase = 0.74\nprobability_neither = (1 - probability_a_increase) * (1 - probability_b_increase)\nanswer = probability_neither", "completions": ["probability_a_increase = 0.56\nprobability_b_increase = 0.74\nprobability_neither = (1 - probability_a_increase) * (1 - probability_b_increase)\nanswer = probability_neither"]}
{"id": 4, "answer": "B", "completion": "cost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit_percentage = 20\nprofit = cost_price * profit_percentage / 100\nsolution = solve_it(cost_price + profit - selling_price, cost_price)\nanswer = solution[cost_price]", "completions": ["cost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit_percentage = 20\nprofit = cost_price * profit_percentage / 100\nsolution = solve_it(cost_price + profit - selling_price, cost_price)\nanswer = solution[cost_price]"]}
{"id": 5, "answer": "D", "completion": "Let's assume that the bag originally had Q white marbles. After the first 20 marbles were pulled out and painted black, the bag had 20 black marbles and Q-20 white marbles. Then, after the second 20 marbles were pulled out, there were 21 black marbles out of a total of 40 marbles. This means that:\n\n21/40 = x/Q\n\nwhere x is the total number of marbles in the bag currently. Solving for x, we get:\n\nx = (21/40) * Q * (40/21) = Q\n\nTherefore, the bag currently holds Q marbles, and the answer is option E) 3200.", "completions": ["Let's assume that the bag originally had Q white marbles. After the first 20 marbles were pulled out and painted black, the bag had 20 black marbles and Q-20 white marbles. Then, after the second 20 marbles were pulled out, there were 21 black marbles out of a total of 40 marbles. This means that:\n\n21/40 = x/Q\n\nwhere x is the total number of marbles in the bag currently. Solving for x, we get:\n\nx = (21/40) * Q * (40/21) = Q\n\nTherefore, the bag currently holds Q marbles, and the answer is option E) 3200."]}
{"id": 6, "answer": "D", "completion": "There are 26 letters in the alphabet and 10 digits (0-9). Therefore, there are 26 choices for the first letter, 26 choices for the second letter, 10 choices for the first digit, and 10 choices for the second digit. The total number of distinct bike numbers is the product of these choices:\n\n26 * 26 * 10 * 10 = 67,600\n\nTherefore, there are 2 distinct letters needed. Answer: A)74453.", "completions": ["There are 26 letters in the alphabet and 10 digits (0-9). Therefore, there are 26 choices for the first letter, 26 choices for the second letter, 10 choices for the first digit, and 10 choices for the second digit. The total number of distinct bike numbers is the product of these choices:\n\n26 * 26 * 10 * 10 = 67,600\n\nTherefore, there are 2 distinct letters needed. Answer: A)74453."]}
{"id": 7, "answer": "D", "completion": "distance = Symbol('distance', positive=True)\ntotal_distance = distance * 4\ntime_before_rain = total_distance / 100\ntime_in_rain = (total_distance / 4) / 75\ntotal_time = time_before_rain + time_in_rain + (total_distance * 3 / 4) / 100\nsolution = solve_it(total_time - 10, distance)\nanswer = solution[distance]", "completions": ["distance = Symbol('distance', positive=True)\ntotal_distance = distance * 4\ntime_before_rain = total_distance / 100\ntime_in_rain = (total_distance / 4) / 75\ntotal_time = time_before_rain + time_in_rain + (total_distance * 3 / 4) / 100\nsolution = solve_it(total_time - 10, distance)\nanswer = solution[distance]"]}
{"id": 8, "answer": "D", "completion": "total_students = 200\nmin_prom_attendees = 0.45 * total_students\nmin_debate_participants = 0.35 * total_students\nmax_non_attendees = total_students - (min_prom_attendees + min_debate_participants)\nanswer = max_non_attendees", "completions": ["total_students = 200\nmin_prom_attendees = 0.45 * total_students\nmin_debate_participants = 0.35 * total_students\nmax_non_attendees = total_students - (min_prom_attendees + min_debate_participants)\nanswer = max_non_attendees"]}
{"id": 9, "answer": "D", "completion": "num_sales = Symbol('num_sales', integer=True, positive=True)\ncommission_rate = 0.1\nsale_amount = 250\nsalary_goal = 1000\ntotal_commission = num_sales * sale_amount * commission_rate\nsolution = solve_it(total_commission - (salary_goal - 1000), num_sales)\nanswer = int(solution[num_sales])", "completions": ["num_sales = Symbol('num_sales', integer=True, positive=True)\ncommission_rate = 0.1\nsale_amount = 250\nsalary_goal = 1000\ntotal_commission = num_sales * sale_amount * commission_rate\nsolution = solve_it(total_commission - (salary_goal - 1000), num_sales)\nanswer = int(solution[num_sales])"]}
{"id": 10, "answer": "D", "completion": "units_per_year = 420 * 12\nproduction_cost = 110\nminimum_profit = 626400\nrevenue_needed = units_per_year * minimum_profit / units_per_year\nminimum_selling_price = simplify(revenue_needed + production_cost)\nanswer = minimum_selling_price", "completions": ["units_per_year = 420 * 12\nproduction_cost = 110\nminimum_profit = 626400\nrevenue_needed = units_per_year * minimum_profit / units_per_year\nminimum_selling_price = simplify(revenue_needed + production_cost)\nanswer = minimum_selling_price"]}
{"id": 11, "answer": "A", "completion": "total_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers = 0.1 * total_staplers\nnon_defective_staplers = total_staplers - defective_staplers\nmistakenly_rejected_staplers = 0.02 * non_defective_staplers\nsolution = solve_it(mistakenly_rejected_staplers - 72, total_staplers)\nanswer = solution[total_staplers]", "completions": ["total_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers = 0.1 * total_staplers\nnon_defective_staplers = total_staplers - defective_staplers\nmistakenly_rejected_staplers = 0.02 * non_defective_staplers\nsolution = solve_it(mistakenly_rejected_staplers - 72, total_staplers)\nanswer = solution[total_staplers]"]}
{"id": 12, "answer": "C", "completion": "time_for_10_yoyos = Symbol('time_for_10_yoyos', positive=True)\nyoyos_from_A = time_for_10_yoyos / 6\nyoyos_from_B = time_for_10_yoyos / 9\nsolution = solve_it(yoyos_from_A + yoyos_from_B - 10, time_for_10_yoyos)\nanswer = solution[time_for_10_yoyos]", "completions": ["time_for_10_yoyos = Symbol('time_for_10_yoyos', positive=True)\nyoyos_from_A = time_for_10_yoyos / 6\nyoyos_from_B = time_for_10_yoyos / 9\nsolution = solve_it(yoyos_from_A + yoyos_from_B - 10, time_for_10_yoyos)\nanswer = solution[time_for_10_yoyos]"]}
{"id": 13, "answer": "D", "completion": "answer = 15", "completions": ["answer = 15"]}
{"id": 14, "answer": "C", "completion": "word = 'PROBLEC'\nnum_ways = factorial(len(word)) // factorial(len(word) - 7)\nanswer = num_ways", "completions": ["word = 'PROBLEC'\nnum_ways = factorial(len(word)) // factorial(len(word) - 7)\nanswer = num_ways"]}
{"id": 15, "answer": "A", "completion": "Since A and B are independent events, P(A/B) = P(A). Therefore, P(A/B) = 0.2. Answer option A) 0.2 is correct.", "completions": ["Since A and B are independent events, P(A/B) = P(A). Therefore, P(A/B) = 0.2. Answer option A) 0.2 is correct."]}
{"id": 16, "answer": "A", "completion": "speed = Symbol('speed', positive=True)\ntime_20_steps = 10\ntime_10_steps = 20\ndistance_20_steps = 20\ndistance_10_steps = 10\nsolution = solve_it([distance_20_steps / (speed * 2) + time_20_steps - distance_10_steps / (speed * 2) - time_10_steps], [speed])\nanswer = solution[speed]", "completions": ["speed = Symbol('speed', positive=True)\ntime_20_steps = 10\ntime_10_steps = 20\ndistance_20_steps = 20\ndistance_10_steps = 10\nsolution = solve_it([distance_20_steps / (speed * 2) + time_20_steps - distance_10_steps / (speed * 2) - time_10_steps], [speed])\nanswer = solution[speed]"]}
{"id": 17, "answer": "C", "completion": "total_months = 22\nlast_year_average = 42\nfirst_10_months_average = 20\ntotal_sales = total_months * ((last_year_average + first_10_months_average) / 2)\noverall_average = total_sales / total_months\nanswer = overall_average", "completions": ["total_months = 22\nlast_year_average = 42\nfirst_10_months_average = 20\ntotal_sales = total_months * ((last_year_average + first_10_months_average) / 2)\noverall_average = total_sales / total_months\nanswer = overall_average"]}
{"id": 18, "answer": "[invalid]", "completion": "highest_score = Symbol('highest_score', positive=True)\nlowest_score = Symbol('lowest_score', positive=True)\naverage_highest_lowest = (highest_score + lowest_score) / 2\naverage_class = Symbol('average_class', positive=True)\nnum_students = Symbol('num_students', integer=True, positive=True)\nexcluded_average = Symbol('excluded_average', positive=True)\ntotal_score = average_class * num_students\ntotal_score_excluding_highest_lowest = excluded_average * (num_students - 2)\nsolution = solve_it([average_highest_lowest - x, total_score / num_students - y, total_score_excluding_highest_lowest - (num_students * y - 2 * x) / (num_students - 2)], [highest_score, lowest_score, excluded_average])\nanswer = solution[excluded_average]", "completions": ["highest_score = Symbol('highest_score', positive=True)\nlowest_score = Symbol('lowest_score', positive=True)\naverage_highest_lowest = (highest_score + lowest_score) / 2\naverage_class = Symbol('average_class', positive=True)\nnum_students = Symbol('num_students', integer=True, positive=True)\nexcluded_average = Symbol('excluded_average', positive=True)\ntotal_score = average_class * num_students\ntotal_score_excluding_highest_lowest = excluded_average * (num_students - 2)\nsolution = solve_it([average_highest_lowest - x, total_score / num_students - y, total_score_excluding_highest_lowest - (num_students * y - 2 * x) / (num_students - 2)], [highest_score, lowest_score, excluded_average])\nanswer = solution[excluded_average]"]}
{"id": 19, "answer": "C", "completion": "unknown = Symbol('unknown')\nsolution = solve_it((5 + unknown * 19 - 15 - 7) / (13 * 13 - 156) - 6, unknown)\nanswer = solution[unknown]", "completions": ["unknown = Symbol('unknown')\nsolution = solve_it((5 + unknown * 19 - 15 - 7) / (13 * 13 - 156) - 6, unknown)\nanswer = solution[unknown]"]}
{"id": 20, "answer": "D", "completion": "num_bags = Symbol('num_bags', integer=True, positive=True)\nselling_price = 100\nprofit_percentage = 25\ntotal_profit = 3000\ncost_price = selling_price / (1 + profit_percentage / 100)\ntotal_cost = cost_price * num_bags\nsolution = solve_it(total_cost - total_profit, num_bags)\nanswer = solution[num_bags]", "completions": ["num_bags = Symbol('num_bags', integer=True, positive=True)\nselling_price = 100\nprofit_percentage = 25\ntotal_profit = 3000\ncost_price = selling_price / (1 + profit_percentage / 100)\ntotal_cost = cost_price * num_bags\nsolution = solve_it(total_cost - total_profit, num_bags)\nanswer = solution[num_bags]"]}
{"id": 21, "answer": "B", "completion": "alex_time = 7\njacob_time = 9\ntotal_toys = 35\ntotal_time = Symbol('total_time', positive=True)\nalex_toys = total_time / alex_time\njacob_toys = total_time / jacob_time\nsolution = solve_it([alex_toys + jacob_toys - total_toys, alex_time * total_time - jacob_time * total_time], total_time)\nanswer = jacob_toys.subs(total_time, solution[total_time])", "completions": ["alex_time = 7\njacob_time = 9\ntotal_toys = 35\ntotal_time = Symbol('total_time', positive=True)\nalex_toys = total_time / alex_time\njacob_toys = total_time / jacob_time\nsolution = solve_it([alex_toys + jacob_toys - total_toys, alex_time * total_time - jacob_time * total_time], total_time)\nanswer = jacob_toys.subs(total_time, solution[total_time])"]}
{"id": 22, "answer": "C", "completion": "Let's assume John starts with 100 ml of 50% strong milk tea. After replacing 15% of it with milk twice, the concentration of tea becomes:\n\n100 ml * 0.85 * 0.85 * 0.5 = 30.13 ml of tea\n\nAnd the rest is milk. Now, if he replaces 10% of this solution with more milk, the concentration of tea becomes:\n\n30.13 ml * 0.9 = 27.12 ml of tea\n\nAnd the rest is milk. Therefore, the final concentration of tea John drinks is:\n\n27.12 ml / 90 ml = 0.3013 = 30.13%\n\nAnswer: A) 15.38%", "completions": ["Let's assume John starts with 100 ml of 50% strong milk tea. After replacing 15% of it with milk twice, the concentration of tea becomes:\n\n100 ml * 0.85 * 0.85 * 0.5 = 30.13 ml of tea\n\nAnd the rest is milk. Now, if he replaces 10% of this solution with more milk, the concentration of tea becomes:\n\n30.13 ml * 0.9 = 27.12 ml of tea\n\nAnd the rest is milk. Therefore, the final concentration of tea John drinks is:\n\n27.12 ml / 90 ml = 0.3013 = 30.13%\n\nAnswer: A) 15.38%"]}
{"id": 23, "answer": "B", "completion": "total_students = Symbol('total_students', integer=True, positive=True)\nmath_students = total_students / 16\nbio_students = total_students / 10\nenglish_students = total_students / 8\nsolution = solve_it([math_students + bio_students + english_students - total_students, total_students >= 1000, total_students < 10000], total_students)\nmax_students = max(solution)\nmin_students = min(solution)\nanswer = max_students - min_students", "completions": ["total_students = Symbol('total_students', integer=True, positive=True)\nmath_students = total_students / 16\nbio_students = total_students / 10\nenglish_students = total_students / 8\nsolution = solve_it([math_students + bio_students + english_students - total_students, total_students >= 1000, total_students < 10000], total_students)\nmax_students = max(solution)\nmin_students = min(solution)\nanswer = max_students - min_students"]}
{"id": 24, "answer": "D", "completion": "normal_speed = 15\nwindy_speed = normal_speed - 4\ntime = 21 / 60\ndistance = windy_speed * time\nanswer = round(distance, 2)", "completions": ["normal_speed = 15\nwindy_speed = normal_speed - 4\ntime = 21 / 60\ndistance = windy_speed * time\nanswer = round(distance, 2)"]}
{"id": 25, "answer": "B", "completion": "cost = Symbol('cost', positive=True)\nprofit_percentage = 40\nprofit = cost * profit_percentage / 100\nselling_price = cost + profit\nsolution = solve_it(selling_price - cost - 20, cost)\nanswer = simplify(solution[cost])", "completions": ["cost = Symbol('cost', positive=True)\nprofit_percentage = 40\nprofit = cost * profit_percentage / 100\nselling_price = cost + profit\nsolution = solve_it(selling_price - cost - 20, cost)\nanswer = simplify(solution[cost])"]}
{"id": 26, "answer": "C", "completion": "interest_rate = 6\nprincipal = 500\ntime = 4\ninterest = (principal * interest_rate * time) / 100\nanswer = principal + interest", "completions": ["interest_rate = 6\nprincipal = 500\ntime = 4\ninterest = (principal * interest_rate * time) / 100\nanswer = principal + interest"]}
{"id": 27, "answer": "A", "completion": "options = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[1] > math.sqrt(option[0]):\n        answer = option\n        break", "completions": ["options = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[1] > math.sqrt(option[0]):\n        answer = option\n        break"]}
{"id": 28, "answer": "D", "completion": "distance = Symbol('distance', positive=True)\nforward_speed = distance / 6\nreturn_speed = distance / 4\nreturn_speed_with_increase = return_speed + 12\nsolution = solve_it([forward_speed - return_speed_with_increase, forward_speed + return_speed - distance], distance)\nanswer = solution[distance]", "completions": ["distance = Symbol('distance', positive=True)\nforward_speed = distance / 6\nreturn_speed = distance / 4\nreturn_speed_with_increase = return_speed + 12\nsolution = solve_it([forward_speed - return_speed_with_increase, forward_speed + return_speed - distance], distance)\nanswer = solution[distance]"]}
{"id": 29, "answer": "[invalid]", "completion": "The age difference between the person and their brother remains constant at 2 years. So when the person was 2 years old, their brother was 1 year old. That means the age difference is 1 year. Now the person is 60 years old, so their brother must be 60 - 1 = 59 years old. Answer option A) 59 is correct.", "completions": ["The age difference between the person and their brother remains constant at 2 years. So when the person was 2 years old, their brother was 1 year old. That means the age difference is 1 year. Now the person is 60 years old, so their brother must be 60 - 1 = 59 years old. Answer option A) 59 is correct."]}
{"id": 30, "answer": "B", "completion": "wholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = 1.6 * wholesale_cost\nactual_sale_price = 0.8 * original_retail_price\npercent_more_than_wholesale = ((actual_sale_price - wholesale_cost) / wholesale_cost) * 100\nanswer = percent_more_than_wholesale", "completions": ["wholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = 1.6 * wholesale_cost\nactual_sale_price = 0.8 * original_retail_price\npercent_more_than_wholesale = ((actual_sale_price - wholesale_cost) / wholesale_cost) * 100\nanswer = percent_more_than_wholesale"]}
{"id": 31, "answer": "C", "completion": "scale = 1/4\nmap_distance = 20\nactual_distance = map_distance * scale * 10\nanswer = actual_distance", "completions": ["scale = 1/4\nmap_distance = 20\nactual_distance = map_distance * scale * 10\nanswer = actual_distance"]}
{"id": 32, "answer": "A", "completion": "length = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\nperimeter1 = 2 * length + width\nperimeter2 = 2 * width + length\nsolution = solve_it([perimeter1 / 2 + perimeter2 / 2 - 48, perimeter1 / 2 + perimeter2 / 2 - 66], [length, width])\narea = solution[length] * solution[width]\nanswer = simplify(area)", "completions": ["length = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\nperimeter1 = 2 * length + width\nperimeter2 = 2 * width + length\nsolution = solve_it([perimeter1 / 2 + perimeter2 / 2 - 48, perimeter1 / 2 + perimeter2 / 2 - 66], [length, width])\narea = solution[length] * solution[width]\nanswer = simplify(area)"]}
{"id": 33, "answer": "B", "completion": "answer = 3 * 4 * 1 * 3  # Multiplying the number of buses for each leg of the journey\n# The answer is 36.", "completions": ["answer = 3 * 4 * 1 * 3  # Multiplying the number of buses for each leg of the journey\n# The answer is 36."]}
{"id": 34, "answer": "B", "completion": "import math\n\na = 3\nb = 4\nc = 15\n\n# The sphere circumscribes the rectangular solid, so its diameter is the diagonal of the solid\ndiagonal = math.sqrt(a**2 + b**2 + c**2)\n\n# The diameter of the sphere is twice the radius, so we divide the diagonal by 2\nradius = diagonal / 2\n\n# The diameter is twice the radius\ndiameter = 2 * radius\n\nanswer = round(diameter, 4)", "completions": ["import math\n\na = 3\nb = 4\nc = 15\n\n# The sphere circumscribes the rectangular solid, so its diameter is the diagonal of the solid\ndiagonal = math.sqrt(a**2 + b**2 + c**2)\n\n# The diameter of the sphere is twice the radius, so we divide the diagonal by 2\nradius = diagonal / 2\n\n# The diameter is twice the radius\ndiameter = 2 * radius\n\nanswer = round(diameter, 4)"]}
{"id": 35, "answer": "[invalid]", "completion": "x = Symbol('x')\ny = Symbol('y')\ndistance = sqrt((3-y)**2 + (5-x)**2) + sqrt((y-3)**2 + (x-2)**2)\nsolution = solve_it(diff(distance, x), x)\nx_value = solution[x]\ny_value = solve_it(diff(distance, y), y)[y]\nanswer = simplify(sqrt((3-y_value)**2 + (5-x_value)**2))", "completions": ["x = Symbol('x')\ny = Symbol('y')\ndistance = sqrt((3-y)**2 + (5-x)**2) + sqrt((y-3)**2 + (x-2)**2)\nsolution = solve_it(diff(distance, x), x)\nx_value = solution[x]\ny_value = solve_it(diff(distance, y), y)[y]\nanswer = simplify(sqrt((3-y_value)**2 + (5-x_value)**2))"]}
{"id": 36, "answer": "A", "completion": "marked_price = Symbol('marked_price', positive=True)\ndiscount1 = 0.05\ndiscount2 = 0.07\nprofit1 = marked_price * (1 - discount1)\nprofit2 = marked_price * (1 - discount2)\nsolution = solve_it(profit2 - profit1 - 15, marked_price)\nanswer = solution[marked_price]", "completions": ["marked_price = Symbol('marked_price', positive=True)\ndiscount1 = 0.05\ndiscount2 = 0.07\nprofit1 = marked_price * (1 - discount1)\nprofit2 = marked_price * (1 - discount2)\nsolution = solve_it(profit2 - profit1 - 15, marked_price)\nanswer = solution[marked_price]"]}
{"id": 37, "answer": "A", "completion": "number = Symbol('number', positive=True)\nactual_value = 7/8 * number\nwrong_value = 7/18 * number\ndifference = actual_value - wrong_value\nsolution = solve_it(difference - 770, number)\nanswer = solution[number]", "completions": ["number = Symbol('number', positive=True)\nactual_value = 7/8 * number\nwrong_value = 7/18 * number\ndifference = actual_value - wrong_value\nsolution = solve_it(difference - 770, number)\nanswer = solution[number]"]}
{"id": 38, "answer": "D", "completion": "monthly_sales = Symbol('monthly_sales', positive=True)\nfixed_salary = 500\ntotal_salary = fixed_salary + 0.05 * monthly_sales\nsolution = solve_it(total_salary - 1500, monthly_sales)\nanswer = solution[monthly_sales]", "completions": ["monthly_sales = Symbol('monthly_sales', positive=True)\nfixed_salary = 500\ntotal_salary = fixed_salary + 0.05 * monthly_sales\nsolution = solve_it(total_salary - 1500, monthly_sales)\nanswer = solution[monthly_sales]"]}
{"id": 39, "answer": "A", "completion": "distance = 1 # assume the side of the square to be 1 unit\ntime = [distance/200, distance/400, distance/600, distance/800]\naverage_speed = 4 * distance / sum(time)\nanswer = average_speed", "completions": ["distance = 1 # assume the side of the square to be 1 unit\ntime = [distance/200, distance/400, distance/600, distance/800]\naverage_speed = 4 * distance / sum(time)\nanswer = average_speed"]}
{"id": 40, "answer": "[invalid]", "completion": "white = Symbol('white', positive=True)\nbrown = Symbol('brown', positive=True)\ntotal_sharpeners = 18\ntotal_cost = 100\nwhite_cost = brown_cost + 1\nsolution = solve_it([white + brown - total_sharpeners, white * white_cost + brown * brown_cost - total_cost], [white, brown])\nanswer = (solution[white], solution[brown])", "completions": ["white = Symbol('white', positive=True)\nbrown = Symbol('brown', positive=True)\ntotal_sharpeners = 18\ntotal_cost = 100\nwhite_cost = brown_cost + 1\nsolution = solve_it([white + brown - total_sharpeners, white * white_cost + brown * brown_cost - total_cost], [white, brown])\nanswer = (solution[white], solution[brown])"]}
{"id": 41, "answer": "B", "completion": "rate_A = Symbol('rate_A', positive=True)\nrate_B = Symbol('rate_B', positive=True)\ntime_A = 8\ntime_A_alone = 2\ntime_A_and_B = 3\npool_capacity = 1\nsolution = solve_it([rate_A * time_A_alone + (rate_A + rate_B) * time_A_and_B - pool_capacity, rate_A * time_A + rate_B * (time_A_and_B + time_A_alone) - pool_capacity], [rate_A, rate_B])\nanswer = solution[rate_B]", "completions": ["rate_A = Symbol('rate_A', positive=True)\nrate_B = Symbol('rate_B', positive=True)\ntime_A = 8\ntime_A_alone = 2\ntime_A_and_B = 3\npool_capacity = 1\nsolution = solve_it([rate_A * time_A_alone + (rate_A + rate_B) * time_A_and_B - pool_capacity, rate_A * time_A + rate_B * (time_A_and_B + time_A_alone) - pool_capacity], [rate_A, rate_B])\nanswer = solution[rate_B]"]}
{"id": 42, "answer": "C", "completion": "original_value = 120\nreduced_value = 96\nreduction = original_value - reduced_value\nreduction_percent = (reduction / original_value) * 100\nanswer = reduction_percent", "completions": ["original_value = 120\nreduced_value = 96\nreduction = original_value - reduced_value\nreduction_percent = (reduction / original_value) * 100\nanswer = reduction_percent"]}
{"id": 43, "answer": "A", "completion": "number = Symbol('number')\nequation = number * 10 + 1 == 3 * (number + 1)\nsolution = solve_it(equation, number)\nanswer = int(solution[number])", "completions": ["number = Symbol('number')\nequation = number * 10 + 1 == 3 * (number + 1)\nsolution = solve_it(equation, number)\nanswer = int(solution[number])"]}
{"id": 44, "answer": "C", "completion": "Let S be the percentage of students in the swim team, and C be the percentage of students in the chess club. Then we have:\n\nS + C - 24 = 100   (since 24% are members of both)\nC = 0.8S   (since 20% of swim team members are not in the chess club)\n\nSubstituting the second equation into the first, we get:\n\nS + 0.8S - 24 = 100\n1.8S = 124\nS = 68.89\n\nTherefore, approximately 68.89% of all Daifu students are members of the swim team. Answer option: E)60%.", "completions": ["Let S be the percentage of students in the swim team, and C be the percentage of students in the chess club. Then we have:\n\nS + C - 24 = 100   (since 24% are members of both)\nC = 0.8S   (since 20% of swim team members are not in the chess club)\n\nSubstituting the second equation into the first, we get:\n\nS + 0.8S - 24 = 100\n1.8S = 124\nS = 68.89\n\nTherefore, approximately 68.89% of all Daifu students are members of the swim team. Answer option: E)60%."]}
{"id": 45, "answer": "B", "completion": "current_population = 78000\nannual_increase = 0.05\npopulation_in_2_years = current_population * (1 + annual_increase) ** 2\nanswer = population_in_2_years", "completions": ["current_population = 78000\nannual_increase = 0.05\npopulation_in_2_years = current_population * (1 + annual_increase) ** 2\nanswer = population_in_2_years"]}
{"id": 46, "answer": "E", "completion": "time = Symbol('time', positive=True)\ndistance_car1 = 12 * time\ndistance_car2 = 13 * time\ntotal_distance = 50\nsolution = solve_it(distance_car1 + distance_car2 - total_distance, time)\nanswer = solution[time]", "completions": ["time = Symbol('time', positive=True)\ndistance_car1 = 12 * time\ndistance_car2 = 13 * time\ntotal_distance = 50\nsolution = solve_it(distance_car1 + distance_car2 - total_distance, time)\nanswer = solution[time]"]}
{"id": 47, "answer": "E", "completion": "monthly_salary = 1500\ncommission_rate = 0.15\ntotal_income = 6000\ncommission = Symbol('commission', positive=True)\nmonthly_sale = (total_income - monthly_salary) / commission_rate\nsolution = solve_it(monthly_sale * commission - commission * monthly_salary - commission * monthly_sale * commission_rate, commission)\nanswer = solution[monthly_sale]", "completions": ["monthly_salary = 1500\ncommission_rate = 0.15\ntotal_income = 6000\ncommission = Symbol('commission', positive=True)\nmonthly_sale = (total_income - monthly_salary) / commission_rate\nsolution = solve_it(monthly_sale * commission - commission * monthly_salary - commission * monthly_sale * commission_rate, commission)\nanswer = solution[monthly_sale]"]}
{"id": 48, "answer": "B", "completion": "interest_rate = Symbol('interest_rate', positive=True)\nprincipal = 360\nmonthly_payment = 31.5\nnum_payments = 12\ntotal_paid = monthly_payment * num_payments\ntotal_interest = total_paid - principal\ninterest_per_month = total_interest / num_payments\nmonthly_interest_rate = interest_rate / 1200\nsolution = solve_it(monthly_payment - (principal * monthly_interest_rate) / (1 - (1 + monthly_interest_rate) ** (-num_payments)), interest_rate)\nanswer = solution[interest_rate]", "completions": ["interest_rate = Symbol('interest_rate', positive=True)\nprincipal = 360\nmonthly_payment = 31.5\nnum_payments = 12\ntotal_paid = monthly_payment * num_payments\ntotal_interest = total_paid - principal\ninterest_per_month = total_interest / num_payments\nmonthly_interest_rate = interest_rate / 1200\nsolution = solve_it(monthly_payment - (principal * monthly_interest_rate) / (1 - (1 + monthly_interest_rate) ** (-num_payments)), interest_rate)\nanswer = solution[interest_rate]"]}
{"id": 49, "answer": "B", "completion": "price_reduction = 30\nprice_increase = (100 / (100 - price_reduction)) - 100\nanswer = price_increase", "completions": ["price_reduction = 30\nprice_increase = (100 / (100 - price_reduction)) - 100\nanswer = price_increase"]}
{"id": 50, "answer": "E", "completion": "num_coins = Symbol('num_coins', integer=True, positive=True)\ntotal_value = num_coins * (0.25 * 100 + 0.5 * 100 + 1 * 100)\nsolution = solve_it(total_value - 700, num_coins)\nnum_25p_coins = solution[num_coins]\nnum_50p_coins = solution[num_coins]\nnum_1rupee_coins = solution[num_coins]\nanswer = (num_25p_coins, num_50p_coins, num_1rupee_coins)", "completions": ["num_coins = Symbol('num_coins', integer=True, positive=True)\ntotal_value = num_coins * (0.25 * 100 + 0.5 * 100 + 1 * 100)\nsolution = solve_it(total_value - 700, num_coins)\nnum_25p_coins = solution[num_coins]\nnum_50p_coins = solution[num_coins]\nnum_1rupee_coins = solution[num_coins]\nanswer = (num_25p_coins, num_50p_coins, num_1rupee_coins)"]}
{"id": 51, "answer": "E (None of these", "completion": "savings_percentage = Rational(12, 5)\nsavings_amount = savings_percentage / 100 * income\nmonthly_expenses = 3500\nsolution = solve_it(income - savings_amount - monthly_expenses, income)\nanswer = solution[income]", "completions": ["savings_percentage = Rational(12, 5)\nsavings_amount = savings_percentage / 100 * income\nmonthly_expenses = 3500\nsolution = solve_it(income - savings_amount - monthly_expenses, income)\nanswer = solution[income]"]}
{"id": 52, "answer": "B", "completion": "toys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\nnum_tempos = 29400 / toys_per_tempo\nanswer = num_tempos", "completions": ["toys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\nnum_tempos = 29400 / toys_per_tempo\nanswer = num_tempos"]}
{"id": 53, "answer": "A", "completion": "from sympy import binomial\n\nn = 10\nk = 2\nanswer = binomial(n, k)", "completions": ["from sympy import binomial\n\nn = 10\nk = 2\nanswer = binomial(n, k)"]}
{"id": 54, "answer": "E", "completion": "total_houses = 3\nbrown_rate = 1/6\nblack_rate = 1/8\nblue_rate = 1/12\ndays_worked_by_brown = 8\ndays_worked_by_black = 6\ntotal_work_done = (brown_rate * days_worked_by_brown + black_rate * days_worked_by_black) * 2 # multiplying by 2 because two people are working\nremaining_work = total_houses - total_work_done\nremaining_days = remaining_work / blue_rate\nanswer = days_worked_by_brown + 6 + remaining_days", "completions": ["total_houses = 3\nbrown_rate = 1/6\nblack_rate = 1/8\nblue_rate = 1/12\ndays_worked_by_brown = 8\ndays_worked_by_black = 6\ntotal_work_done = (brown_rate * days_worked_by_brown + black_rate * days_worked_by_black) * 2 # multiplying by 2 because two people are working\nremaining_work = total_houses - total_work_done\nremaining_days = remaining_work / blue_rate\nanswer = days_worked_by_brown + 6 + remaining_days"]}
{"id": 55, "answer": "A", "completion": "time_between_train_A = 16\ntime_between_train_B = 17\ntime_until_both_leave_again = lcm(time_between_train_A, time_between_train_B)\nanswer = time_until_both_leave_again", "completions": ["time_between_train_A = 16\ntime_between_train_B = 17\ntime_until_both_leave_again = lcm(time_between_train_A, time_between_train_B)\nanswer = time_until_both_leave_again"]}
{"id": 56, "answer": "E", "completion": "total_cubes = 5 ** 3\ninner_cubes = 3 ** 3\nouter_cubes = total_cubes - inner_cubes\nunpainted_faces = outer_cubes * 6 - (5 ** 2 - 3 ** 2) * 6\nanswer = unpainted_faces", "completions": ["total_cubes = 5 ** 3\ninner_cubes = 3 ** 3\nouter_cubes = total_cubes - inner_cubes\nunpainted_faces = outer_cubes * 6 - (5 ** 2 - 3 ** 2) * 6\nanswer = unpainted_faces"]}
{"id": 57, "answer": "D", "completion": "total_chocolates = 100\ncocoa_flavored = 10\nvanilla_flavored = 100 - cocoa_flavored\nsquashed = 0.9 * (vanilla_flavored)\nvanilla_not_squashed = 100 - squashed\nanswer = (vanilla_not_squashed / total_chocolates) * 100", "completions": ["total_chocolates = 100\ncocoa_flavored = 10\nvanilla_flavored = 100 - cocoa_flavored\nsquashed = 0.9 * (vanilla_flavored)\nvanilla_not_squashed = 100 - squashed\nanswer = (vanilla_not_squashed / total_chocolates) * 100"]}
{"id": 58, "answer": "D", "completion": "distance_to_climb = 30\nclimb_per_day = 3\nfall_per_day = 2\ntotal_distance_covered = 0\ndays = 0\nwhile total_distance_covered < distance_to_climb:\n    total_distance_covered += climb_per_day\n    days += 1\n    if total_distance_covered >= distance_to_climb:\n        break\n    total_distance_covered -= fall_per_day\nanswer = days", "completions": ["distance_to_climb = 30\nclimb_per_day = 3\nfall_per_day = 2\ntotal_distance_covered = 0\ndays = 0\nwhile total_distance_covered < distance_to_climb:\n    total_distance_covered += climb_per_day\n    days += 1\n    if total_distance_covered >= distance_to_climb:\n        break\n    total_distance_covered -= fall_per_day\nanswer = days"]}
{"id": 59, "answer": "E", "completion": "options = [47, 91, 41, 67, 44]\nfor num in options:\n    if (num + (num+2) + (num+4) + (num+6) + (num+8)) % 10 == 0:\n        answer = num\n        break", "completions": ["options = [47, 91, 41, 67, 44]\nfor num in options:\n    if (num + (num+2) + (num+4) + (num+6) + (num+8)) % 10 == 0:\n        answer = num\n        break"]}
{"id": 60, "answer": "B", "completion": "total_students = Symbol('total_students', positive=True)\nfootball_students = 0.08 * total_students\ncricket_students = 0.8 * total_students\nbasketball_students = 0.1 * total_students\nno_game_students = 20\nsolution = solve_it([football_students + cricket_students + basketball_students + no_game_students - total_students, no_game_students + 0.2 * total_students - 0.92 * total_students], total_students)\nanswer = solution[total_students]", "completions": ["total_students = Symbol('total_students', positive=True)\nfootball_students = 0.08 * total_students\ncricket_students = 0.8 * total_students\nbasketball_students = 0.1 * total_students\nno_game_students = 20\nsolution = solve_it([football_students + cricket_students + basketball_students + no_game_students - total_students, no_game_students + 0.2 * total_students - 0.92 * total_students], total_students)\nanswer = solution[total_students]"]}
{"id": 61, "answer": "D", "completion": "Let Q's age be q, R's age be r, and T's age be t.\nAccording to the problem, q - r = r - t\nSo, 2r = q + t\nAlso, r + t = 50\nSolving these two equations, we get r = 25, q - r = r - t, and q - r = 25 - t\nSo, q - r = 25 - t\nWe cannot determine the value of t or q - t, so we cannot determine the difference between R and Q's age. Answer: D) Cannot be determined.", "completions": ["Let Q's age be q, R's age be r, and T's age be t.\nAccording to the problem, q - r = r - t\nSo, 2r = q + t\nAlso, r + t = 50\nSolving these two equations, we get r = 25, q - r = r - t, and q - r = 25 - t\nSo, q - r = 25 - t\nWe cannot determine the value of t or q - t, so we cannot determine the difference between R and Q's age. Answer: D) Cannot be determined."]}
{"id": 62, "answer": "E", "completion": "total_cost = 8.5\ninitial_cost = 3.5\nadditional_cost = 0.1\nremaining_cost = total_cost - initial_cost\ndistance = 0.25\nwhile remaining_cost >= additional_cost:\n    remaining_cost -= additional_cost\n    distance += 0.25\n    additional_cost += 0.01\nanswer = distance", "completions": ["total_cost = 8.5\ninitial_cost = 3.5\nadditional_cost = 0.1\nremaining_cost = total_cost - initial_cost\ndistance = 0.25\nwhile remaining_cost >= additional_cost:\n    remaining_cost -= additional_cost\n    distance += 0.25\n    additional_cost += 0.01\nanswer = distance"]}
{"id": 63, "answer": "B", "completion": "total_runs = Symbol('total_runs', positive=True)\ntotal_matches = Symbol('total_matches', positive=True)\ncurrent_average = 51\nfinal_average = 54\nfinal_runs = 78\nsolution = solve_it([(total_runs + final_runs) / (total_matches + 1) - final_average, total_runs / total_matches - current_average], [total_runs, total_matches])\nanswer = solution[total_matches]", "completions": ["total_runs = Symbol('total_runs', positive=True)\ntotal_matches = Symbol('total_matches', positive=True)\ncurrent_average = 51\nfinal_average = 54\nfinal_runs = 78\nsolution = solve_it([(total_runs + final_runs) / (total_matches + 1) - final_average, total_runs / total_matches - current_average], [total_runs, total_matches])\nanswer = solution[total_matches]"]}
{"id": 64, "answer": "B", "completion": "The number of possible codes using a single letter is 26, and the number of possible codes using a pair of letters is 26*25/2 (since order doesn't matter). So the total number of possible codes is 26 + 26*25/2 = 351. Since there are only 10 types of books, we need at least 4 letters to create unique codes for all of them. Therefore, the answer is B) 4.", "completions": ["The number of possible codes using a single letter is 26, and the number of possible codes using a pair of letters is 26*25/2 (since order doesn't matter). So the total number of possible codes is 26 + 26*25/2 = 351. Since there are only 10 types of books, we need at least 4 letters to create unique codes for all of them. Therefore, the answer is B) 4."]}
{"id": 65, "answer": "D", "completion": "length = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nlength = 4 * breadth + 1\nperimeter = 2 * (length + breadth)\nsolution = solve_it([length * breadth - area, perimeter - 2 * (length + breadth)], [length, breadth])\nanswer = solution[perimeter]", "completions": ["length = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nlength = 4 * breadth + 1\nperimeter = 2 * (length + breadth)\nsolution = solve_it([length * breadth - area, perimeter - 2 * (length + breadth)], [length, breadth])\nanswer = solution[perimeter]"]}
{"id": 66, "answer": "A", "completion": "grams_per_vitamin_e = 1 / 0.09\ngrams_per_vitamin_a = 1 / 0.08\ngrams_per_both_vitamins = lcm(grams_per_vitamin_e, grams_per_vitamin_a)\nanswer = grams_per_both_vitamins / 1", "completions": ["grams_per_vitamin_e = 1 / 0.09\ngrams_per_vitamin_a = 1 / 0.08\ngrams_per_both_vitamins = lcm(grams_per_vitamin_e, grams_per_vitamin_a)\nanswer = grams_per_both_vitamins / 1"]}
{"id": 67, "answer": "C", "completion": "num_large_cakes_needed = 20\nnum_small_cakes_needed = 700\nhours_available = 3\nnum_helpers = Symbol('num_helpers', integer=True, positive=True)\nnum_large_cakes_made = 2 * num_helpers * hours_available\nnum_small_cakes_made = 35 * num_helpers * hours_available\nsolution = solve_it([num_large_cakes_made - num_large_cakes_needed, num_small_cakes_made - num_small_cakes_needed], num_helpers)\nanswer = int(solution[num_helpers].evalf())", "completions": ["num_large_cakes_needed = 20\nnum_small_cakes_needed = 700\nhours_available = 3\nnum_helpers = Symbol('num_helpers', integer=True, positive=True)\nnum_large_cakes_made = 2 * num_helpers * hours_available\nnum_small_cakes_made = 35 * num_helpers * hours_available\nsolution = solve_it([num_large_cakes_made - num_large_cakes_needed, num_small_cakes_made - num_small_cakes_needed], num_helpers)\nanswer = int(solution[num_helpers].evalf())"]}
{"id": 68, "answer": "E", "completion": "length_RS = 5\nlength_RT = 17\nlength_ST = 22\nlength_SU = length_ST / 2\nlength_RU = length_SU + length_RT - length_RS\nanswer = length_RU", "completions": ["length_RS = 5\nlength_RT = 17\nlength_ST = 22\nlength_SU = length_ST / 2\nlength_RU = length_SU + length_RT - length_RS\nanswer = length_RU"]}
{"id": 69, "answer": "A", "completion": "pita_to_rolls = Rational(2, 6)\nrolls_to_baguettes = Rational(5, 3)\nbaguettes_to_pita = 2 / rolls_to_baguettes / pita_to_rolls\nanswer = baguettes_to_pita", "completions": ["pita_to_rolls = Rational(2, 6)\nrolls_to_baguettes = Rational(5, 3)\nbaguettes_to_pita = 2 / rolls_to_baguettes / pita_to_rolls\nanswer = baguettes_to_pita"]}
{"id": 70, "answer": "C", "completion": "discount = 20 / 100\nincrease = discount / (1 - discount)\nanswer = increase * 100", "completions": ["discount = 20 / 100\nincrease = discount / (1 - discount)\nanswer = increase * 100"]}
{"id": 71, "answer": "D", "completion": "bus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\ntotal_persons = 6 + 8\ntotal_cost = 1512\nbus_cost = 6 * 2 * bus_fare\ntrain_cost = 8 * train_fare\nsolution = solve_it([bus_fare - 4/3 * train_fare, bus_cost + train_cost - total_cost], [bus_fare, train_fare])\nanswer = solution[train_fare]", "completions": ["bus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\ntotal_persons = 6 + 8\ntotal_cost = 1512\nbus_cost = 6 * 2 * bus_fare\ntrain_cost = 8 * train_fare\nsolution = solve_it([bus_fare - 4/3 * train_fare, bus_cost + train_cost - total_cost], [bus_fare, train_fare])\nanswer = solution[train_fare]"]}
{"id": 72, "answer": "B", "completion": "length = 8\nwidth = 3\nperimeter = 2 * (length + width)\nanswer = perimeter", "completions": ["length = 8\nwidth = 3\nperimeter = 2 * (length + width)\nanswer = perimeter"]}
{"id": 73, "answer": "B", "completion": "books = ['English', 'Hindi', 'Mathematics', 'History', 'Geography', 'Science']\nnum_ways = factorial(len(books))\nanswer = num_ways", "completions": ["books = ['English', 'Hindi', 'Mathematics', 'History', 'Geography', 'Science']\nnum_ways = factorial(len(books))\nanswer = num_ways"]}
{"id": 74, "answer": "C", "completion": "x_pickets = Symbol('x_pickets', positive=True)\nwidth_of_picket = Rational(1, 2)\nspace_between_pickets = 6\ntotal_length = x_pickets * width_of_picket + (x_pickets - 1) * space_between_pickets\nanswer = simplify(total_length / 12)", "completions": ["x_pickets = Symbol('x_pickets', positive=True)\nwidth_of_picket = Rational(1, 2)\nspace_between_pickets = 6\ntotal_length = x_pickets * width_of_picket + (x_pickets - 1) * space_between_pickets\nanswer = simplify(total_length / 12)"]}
{"id": 75, "answer": "D", "completion": "ship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ntime = Symbol('time', positive=True)\ndistance_ship = ship_speed * time\ndistance_plane = plane_speed * time\nsolution = solve_it(distance_ship + distance_plane - 180, time)\ndistance = ship_speed * solution[time]\nanswer = distance + 180", "completions": ["ship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ntime = Symbol('time', positive=True)\ndistance_ship = ship_speed * time\ndistance_plane = plane_speed * time\nsolution = solve_it(distance_ship + distance_plane - 180, time)\ndistance = ship_speed * solution[time]\nanswer = distance + 180"]}
{"id": 76, "answer": "D", "completion": "Let x be the total deer population in the forest. We know that 300 deer were tagged in 2001, so the proportion of tagged deer in the population at the beginning of 2002 is 300/x. During 2002, 500 deer were caught, of which 20 had tags from the previous year. This means that the proportion of tagged deer in the sample of 500 is (300/x) * (20/300) = 20/x. We are told that this proportion is representative of the proportion of tagged deer in the entire population, so we can set up the equation:\n\n20/x = number of tagged deer in the population / x\n\nSolving for the number of tagged deer in the population, we get:\n\nnumber of tagged deer in the population = 20 * x / x = 20\n\nWe know that 300 deer were tagged in 2001, so the number of deer tagged in 2002 is 20 - 300 + 20 = -260. This doesn't make sense, so we must have made an error in our calculations. Therefore, there is no correct answer option provided.", "completions": ["Let x be the total deer population in the forest. We know that 300 deer were tagged in 2001, so the proportion of tagged deer in the population at the beginning of 2002 is 300/x. During 2002, 500 deer were caught, of which 20 had tags from the previous year. This means that the proportion of tagged deer in the sample of 500 is (300/x) * (20/300) = 20/x. We are told that this proportion is representative of the proportion of tagged deer in the entire population, so we can set up the equation:\n\n20/x = number of tagged deer in the population / x\n\nSolving for the number of tagged deer in the population, we get:\n\nnumber of tagged deer in the population = 20 * x / x = 20\n\nWe know that 300 deer were tagged in 2001, so the number of deer tagged in 2002 is 20 - 300 + 20 = -260. This doesn't make sense, so we must have made an error in our calculations. Therefore, there is no correct answer option provided."]}
{"id": 77, "answer": "A", "completion": "The first train that comes can be either from the main line or the harbor line. \n\nIf it comes from the main line, the man has a probability of 2 minutes out of 10 minutes to catch it, since it starts at 5 o'clock and he arrives before 5.02 A.M. \n\nIf it comes from the harbor line, the man has a probability of 8 minutes out of 10 minutes to catch it, since it starts at 5.02 A.M. and he arrives within the first 8 minutes. \n\nTherefore, the total probability of the man catching the first train is: \n\n(1/2) * (2/10) + (1/2) * (8/10) = 0.5\n\nAnswer: A) 0.9", "completions": ["The first train that comes can be either from the main line or the harbor line. \n\nIf it comes from the main line, the man has a probability of 2 minutes out of 10 minutes to catch it, since it starts at 5 o'clock and he arrives before 5.02 A.M. \n\nIf it comes from the harbor line, the man has a probability of 8 minutes out of 10 minutes to catch it, since it starts at 5.02 A.M. and he arrives within the first 8 minutes. \n\nTherefore, the total probability of the man catching the first train is: \n\n(1/2) * (2/10) + (1/2) * (8/10) = 0.5\n\nAnswer: A) 0.9"]}
{"id": 78, "answer": "A", "completion": "total_weight_before = 10 * 12.2\ntotal_weight_after = 11 * (12.2 + 2.6)\nweight_of_new_truck = total_weight_after - total_weight_before\nanswer = weight_of_new_truck", "completions": ["total_weight_before = 10 * 12.2\ntotal_weight_after = 11 * (12.2 + 2.6)\nweight_of_new_truck = total_weight_after - total_weight_before\nanswer = weight_of_new_truck"]}
{"id": 79, "answer": "B", "completion": "Let the current population be P. After one year, the population will be 1.1P. After two years, the population will be 1.1^2P = 1.21P. We know that this is double the population one year ago, which was 1.1P. So:\n\n1.21P = 2(1.1P)\n1.21P = 2.2P\nP = 0\n\nThis is not a valid solution, so there must be an error in the problem statement.", "completions": ["Let the current population be P. After one year, the population will be 1.1P. After two years, the population will be 1.1^2P = 1.21P. We know that this is double the population one year ago, which was 1.1P. So:\n\n1.21P = 2(1.1P)\n1.21P = 2.2P\nP = 0\n\nThis is not a valid solution, so there must be an error in the problem statement."]}
{"id": 80, "answer": "B", "completion": "arjun_money = Symbol('arjun_money', positive=True)\nsajal_money = Symbol('sajal_money', positive=True)\neq1 = sajal_money + 30 == 2 * (arjun_money - 30)\neq2 = arjun_money + 10 == 3 * (sajal_money - 10)\nsolution = solve_it([eq1, eq2], [arjun_money, sajal_money])\nanswer = (solution[arjun_money], solution[sajal_money])", "completions": ["arjun_money = Symbol('arjun_money', positive=True)\nsajal_money = Symbol('sajal_money', positive=True)\neq1 = sajal_money + 30 == 2 * (arjun_money - 30)\neq2 = arjun_money + 10 == 3 * (sajal_money - 10)\nsolution = solve_it([eq1, eq2], [arjun_money, sajal_money])\nanswer = (solution[arjun_money], solution[sajal_money])"]}
{"id": 81, "answer": "A", "completion": "width = 100\narea = 3000\nlength = Symbol('length', positive=True)\nsolution = solve_it(width * length - area, length)\nanswer = solution[length]", "completions": ["width = 100\narea = 3000\nlength = Symbol('length', positive=True)\nsolution = solve_it(width * length - area, length)\nanswer = solution[length]"]}
{"id": 82, "answer": "A", "completion": "gcd = 11\nlcm = 7700\nnum1 = 350\nnum2 = lcm // num1 * gcd\nanswer = num2 if num2 != num1 else lcm // gcd", "completions": ["gcd = 11\nlcm = 7700\nnum1 = 350\nnum2 = lcm // num1 * gcd\nanswer = num2 if num2 != num1 else lcm // gcd"]}
{"id": 83, "answer": "D", "completion": "original_side = Symbol('original_side', positive=True)\ntrimmed_side = original_side - 4\ntriangle_area = 70\nrectangle_area = trimmed_side * original_side\nrectangle_diagonal = sqrt(trimmed_side ** 2 + original_side ** 2)\ntriangle_height = 2 * triangle_area / trimmed_side\ntriangle_base = sqrt(rectangle_diagonal ** 2 - triangle_height ** 2)\nperimeter = 4 * original_side\nsolution = solve_it([triangle_base * triangle_height / 2 - triangle_area, trimmed_side * original_side - rectangle_area], [original_side])\nanswer = simplify(perimeter.subs(solution))", "completions": ["original_side = Symbol('original_side', positive=True)\ntrimmed_side = original_side - 4\ntriangle_area = 70\nrectangle_area = trimmed_side * original_side\nrectangle_diagonal = sqrt(trimmed_side ** 2 + original_side ** 2)\ntriangle_height = 2 * triangle_area / trimmed_side\ntriangle_base = sqrt(rectangle_diagonal ** 2 - triangle_height ** 2)\nperimeter = 4 * original_side\nsolution = solve_it([triangle_base * triangle_height / 2 - triangle_area, trimmed_side * original_side - rectangle_area], [original_side])\nanswer = simplify(perimeter.subs(solution))"]}
{"id": 84, "answer": "D", "completion": "original_length = 30\nreduced_ratio = Rational(5, 3)\nreduced_length = original_length / reduced_ratio\nanswer = reduced_length", "completions": ["original_length = 30\nreduced_ratio = Rational(5, 3)\nreduced_length = original_length / reduced_ratio\nanswer = reduced_length"]}
{"id": 85, "answer": "A", "completion": "count = 0\nfor a in range(1, 10):\n    for b in range(0, 10):\n        for c in range(1, 10):\n            M = 100 * a + 10 * b + c\n            N = 100 * c + 10 * b + a\n            if M > N and M > 300:\n                if (M - N + 396 * c) == 990:\n                    count += 1\nanswer = count", "completions": ["count = 0\nfor a in range(1, 10):\n    for b in range(0, 10):\n        for c in range(1, 10):\n            M = 100 * a + 10 * b + c\n            N = 100 * c + 10 * b + a\n            if M > N and M > 300:\n                if (M - N + 396 * c) == 990:\n                    count += 1\nanswer = count"]}
{"id": 86, "answer": "E", "completion": "Let's assume the minimum number of students in the school is x.\nAccording to the question, 20% of the students took physics and 28% of the students took math. This means that the number of students who took physics is 0.2x and the number of students who took math is 0.28x.\nSince we know that there are more than 501 students in the school, we can set up the following inequality:\n0.2x + 0.28x > 501\nSimplifying this inequality, we get:\n0.48x > 501\nx > 1043.75\nSince x has to be a whole number, the minimum possible number of students in the school is 1044.\nTherefore, the answer is E) none of these.", "completions": ["Let's assume the minimum number of students in the school is x.\nAccording to the question, 20% of the students took physics and 28% of the students took math. This means that the number of students who took physics is 0.2x and the number of students who took math is 0.28x.\nSince we know that there are more than 501 students in the school, we can set up the following inequality:\n0.2x + 0.28x > 501\nSimplifying this inequality, we get:\n0.48x > 501\nx > 1043.75\nSince x has to be a whole number, the minimum possible number of students in the school is 1044.\nTherefore, the answer is E) none of these."]}
{"id": 87, "answer": "B", "completion": "raj_age = 17\nraj_age_5_years_back = raj_age - 5\nrahim_age_5_years_back = 3 * raj_age_5_years_back\nrahim_age = rahim_age_5_years_back + 5\nanswer = rahim_age", "completions": ["raj_age = 17\nraj_age_5_years_back = raj_age - 5\nrahim_age_5_years_back = 3 * raj_age_5_years_back\nrahim_age = rahim_age_5_years_back + 5\nanswer = rahim_age"]}
{"id": 88, "answer": "B", "completion": "radius = 14 / 2\narea_of_field = pi * radius ** 2\narea_grazed_per_day = 10\ndays_to_graze_field = area_of_field / area_grazed_per_day\nanswer = round(days_to_graze_field)", "completions": ["radius = 14 / 2\narea_of_field = pi * radius ** 2\narea_grazed_per_day = 10\ndays_to_graze_field = area_of_field / area_grazed_per_day\nanswer = round(days_to_graze_field)"]}
{"id": 89, "answer": "E", "completion": "cost_price = Symbol('cost_price', positive=True)\nselling_price_with_profit = 27.5\nprofit_percentage = 10\nselling_price_with_loss = 25.75\nsolution = solve_it([selling_price_with_profit - cost_price - cost_price * profit_percentage / 100, cost_price - selling_price_with_loss + selling_price_with_loss * 100 / profit_percentage], cost_price)\nprofit_loss_percentage = (selling_price_with_loss - solution[cost_price]) * 100 / solution[cost_price]\nif profit_loss_percentage > 0:\n    answer = f\"{profit_loss_percentage}% Profit\"\nelse:\n    answer = f\"{abs(profit_loss_percentage)}% Loss\"", "completions": ["cost_price = Symbol('cost_price', positive=True)\nselling_price_with_profit = 27.5\nprofit_percentage = 10\nselling_price_with_loss = 25.75\nsolution = solve_it([selling_price_with_profit - cost_price - cost_price * profit_percentage / 100, cost_price - selling_price_with_loss + selling_price_with_loss * 100 / profit_percentage], cost_price)\nprofit_loss_percentage = (selling_price_with_loss - solution[cost_price]) * 100 / solution[cost_price]\nif profit_loss_percentage > 0:\n    answer = f\"{profit_loss_percentage}% Profit\"\nelse:\n    answer = f\"{abs(profit_loss_percentage)}% Loss\""]}
{"id": 90, "answer": "D", "completion": "The possible arrangements are: Susan-Tim-Zen, Tim-Susan-Zen, Zen-Susan-Tim. So there are 3 ways to arrange the group. Answer option: B)3.", "completions": ["The possible arrangements are: Susan-Tim-Zen, Tim-Susan-Zen, Zen-Susan-Tim. So there are 3 ways to arrange the group. Answer option: B)3."]}
{"id": 91, "answer": "B", "completion": "fixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nnum_calls_1 = 540\nbill_1 = 1800\nnum_calls_2 = 620\nbill_2 = 2040\nnum_calls_3 = 500\nsolution = solve_it([fixed_cost + variable_cost * num_calls_1 - bill_1, fixed_cost + variable_cost * num_calls_2 - bill_2], [fixed_cost, variable_cost])\nbill_3 = solution[fixed_cost] + solution[variable_cost] * num_calls_3\nanswer = bill_3", "completions": ["fixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nnum_calls_1 = 540\nbill_1 = 1800\nnum_calls_2 = 620\nbill_2 = 2040\nnum_calls_3 = 500\nsolution = solve_it([fixed_cost + variable_cost * num_calls_1 - bill_1, fixed_cost + variable_cost * num_calls_2 - bill_2], [fixed_cost, variable_cost])\nbill_3 = solution[fixed_cost] + solution[variable_cost] * num_calls_3\nanswer = bill_3"]}
{"id": 92, "answer": "B", "completion": "time = Symbol('time', positive=True)\nrotations_A = 2 * time / 26\nrotations_B = 5 * time / 35\nsolution = solve_it(rotations_A - rotations_B, time)\nanswer = solution[time]", "completions": ["time = Symbol('time', positive=True)\nrotations_A = 2 * time / 26\nrotations_B = 5 * time / 35\nsolution = solve_it(rotations_A - rotations_B, time)\nanswer = solution[time]"]}
{"id": 93, "answer": "E", "completion": "The maximum number of books that are both hardcover and fiction is the minimum of the number of hardcover books and the number of fiction books. Therefore, the answer is 20. Answer: D)20.", "completions": ["The maximum number of books that are both hardcover and fiction is the minimum of the number of hardcover books and the number of fiction books. Therefore, the answer is 20. Answer: D)20."]}
{"id": 94, "answer": "D", "completion": "num_papers_on_sunday = Symbol('num_papers_on_sunday', positive=True)\nnum_papers_on_other_days = Symbol('num_papers_on_other_days', positive=True)\ncost_on_sunday = 4 * num_papers_on_sunday\ncost_on_other_days = num_papers_on_other_days\ntotal_cost = 210\ntotal_papers = num_papers_on_sunday + 6 * num_papers_on_other_days\ntwice_papers_on_sunday = 2 * num_papers_on_other_days\nsolution = solve_it([cost_on_sunday + cost_on_other_days - total_cost, num_papers_on_sunday - twice_papers_on_sunday], [num_papers_on_sunday, num_papers_on_other_days])\nanswer = solution[num_papers_on_other_days]", "completions": ["num_papers_on_sunday = Symbol('num_papers_on_sunday', positive=True)\nnum_papers_on_other_days = Symbol('num_papers_on_other_days', positive=True)\ncost_on_sunday = 4 * num_papers_on_sunday\ncost_on_other_days = num_papers_on_other_days\ntotal_cost = 210\ntotal_papers = num_papers_on_sunday + 6 * num_papers_on_other_days\ntwice_papers_on_sunday = 2 * num_papers_on_other_days\nsolution = solve_it([cost_on_sunday + cost_on_other_days - total_cost, num_papers_on_sunday - twice_papers_on_sunday], [num_papers_on_sunday, num_papers_on_other_days])\nanswer = solution[num_papers_on_other_days]"]}
{"id": 95, "answer": "A", "completion": "num_friends = Symbol('num_friends')\ntotal_cost = 96\nnum_friends_contributing = num_friends - 4\ncost_per_person_before_dropout = total_cost / num_friends\ncost_per_person_after_dropout = (total_cost + 4 * num_friends_contributing) / num_friends\nsolution = solve_it(cost_per_person_after_dropout - cost_per_person_before_dropout, num_friends)\nanswer = solution[num_friends] + 4", "completions": ["num_friends = Symbol('num_friends')\ntotal_cost = 96\nnum_friends_contributing = num_friends - 4\ncost_per_person_before_dropout = total_cost / num_friends\ncost_per_person_after_dropout = (total_cost + 4 * num_friends_contributing) / num_friends\nsolution = solve_it(cost_per_person_after_dropout - cost_per_person_before_dropout, num_friends)\nanswer = solution[num_friends] + 4"]}
{"id": 96, "answer": "C", "completion": "original_perimeter = 2 * (27 + 17)\noriginal_side_length = original_perimeter / 4\nanswer = original_side_length", "completions": ["original_perimeter = 2 * (27 + 17)\noriginal_side_length = original_perimeter / 4\nanswer = original_side_length"]}
{"id": 97, "answer": "E", "completion": "nephew_share = 8600 / (5 + 4 + 2)\ndaughter_share = 4 * nephew_share\nson_share = 5 * nephew_share\ntotal_daughter_share = 4 * daughter_share\ntotal_son_share = 5 * son_share\ntotal_nephew_share = 2 * nephew_share\ntotal_share = total_daughter_share + total_son_share + total_nephew_share\nnum_daughters = 4\neach_daughter_share = total_daughter_share / num_daughters\nanswer = each_daughter_share", "completions": ["nephew_share = 8600 / (5 + 4 + 2)\ndaughter_share = 4 * nephew_share\nson_share = 5 * nephew_share\ntotal_daughter_share = 4 * daughter_share\ntotal_son_share = 5 * son_share\ntotal_nephew_share = 2 * nephew_share\ntotal_share = total_daughter_share + total_son_share + total_nephew_share\nnum_daughters = 4\neach_daughter_share = total_daughter_share / num_daughters\nanswer = each_daughter_share"]}
{"id": 98, "answer": "D", "completion": "meenu_weight = Symbol('meenu_weight', positive=True)\nsilu_weight = 51\nmeenu_weight_expression = meenu_weight - 29 - meenu_weight / 2\nsolution = solve_it(meenu_weight_expression - silu_weight, meenu_weight)\nanswer = solution[meenu_weight]", "completions": ["meenu_weight = Symbol('meenu_weight', positive=True)\nsilu_weight = 51\nmeenu_weight_expression = meenu_weight - 29 - meenu_weight / 2\nsolution = solve_it(meenu_weight_expression - silu_weight, meenu_weight)\nanswer = solution[meenu_weight]"]}
{"id": 99, "answer": "B", "completion": "time_per_tablet = 15\ntotal_time = time_per_tablet * 5\nanswer = total_time", "completions": ["time_per_tablet = 15\ntotal_time = time_per_tablet * 5\nanswer = total_time"]}
{"id": 100, "answer": "D", "completion": "red_ratio = 3\ngreen_ratio = 4\ngreen_sweets = 120\ntotal_ratio = red_ratio + green_ratio\nred_sweets = (red_ratio / total_ratio) * (green_sweets + 120)\nanswer = red_sweets", "completions": ["red_ratio = 3\ngreen_ratio = 4\ngreen_sweets = 120\ntotal_ratio = red_ratio + green_ratio\nred_sweets = (red_ratio / total_ratio) * (green_sweets + 120)\nanswer = red_sweets"]}
{"id": 101, "answer": "B", "completion": "num_members = Symbol('num_members', integer=True, positive=True)\ncommon_diff = 3/12\nyoungest_age = 7\nsum_of_ages = 250\noldest_age = youngest_age + (num_members - 1) * common_diff\naverage_age = (youngest_age + oldest_age) / 2\nsum_formula = num_members * average_age\nsolution = solve_it([sum_formula - sum_of_ages, oldest_age - (youngest_age + (num_members - 1) * common_diff)], num_members)\nanswer = solution[num_members]", "completions": ["num_members = Symbol('num_members', integer=True, positive=True)\ncommon_diff = 3/12\nyoungest_age = 7\nsum_of_ages = 250\noldest_age = youngest_age + (num_members - 1) * common_diff\naverage_age = (youngest_age + oldest_age) / 2\nsum_formula = num_members * average_age\nsolution = solve_it([sum_formula - sum_of_ages, oldest_age - (youngest_age + (num_members - 1) * common_diff)], num_members)\nanswer = solution[num_members]"]}
{"id": 102, "answer": "D", "completion": "M = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nanswer = simplify(cost_after_dropout - cost_before_dropout)", "completions": ["M = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nanswer = simplify(cost_after_dropout - cost_before_dropout)"]}
{"id": 103, "answer": "C", "completion": "cost_price = 1200\nprofit_percentage = 20\nselling_price_after_discount = 0.8 * cost_price\nprofit_after_discount = 0.2 * selling_price_after_discount\nselling_price = cost_price + profit_after_discount\nanswer = round(selling_price)", "completions": ["cost_price = 1200\nprofit_percentage = 20\nselling_price_after_discount = 0.8 * cost_price\nprofit_after_discount = 0.2 * selling_price_after_discount\nselling_price = cost_price + profit_after_discount\nanswer = round(selling_price)"]}
{"id": 104, "answer": "C", "completion": "distance_traveled_by_train_A = 40 * 3 # since it starts at 11 am and meets train B at 2 pm\ndistance_traveled_by_train_B = 72 * 2 # since it starts at 2 pm and meets train A at the same point\ntotal_distance = distance_traveled_by_train_A + distance_traveled_by_train_B\ntime_taken = total_distance / (40 + 72)\nanswer = '5 pm on the next day' # since the trains meet at 5 pm and train B started at 2 pm on the previous day", "completions": ["distance_traveled_by_train_A = 40 * 3 # since it starts at 11 am and meets train B at 2 pm\ndistance_traveled_by_train_B = 72 * 2 # since it starts at 2 pm and meets train A at the same point\ntotal_distance = distance_traveled_by_train_A + distance_traveled_by_train_B\ntime_taken = total_distance / (40 + 72)\nanswer = '5 pm on the next day' # since the trains meet at 5 pm and train B started at 2 pm on the previous day"]}
{"id": 105, "answer": "B", "completion": "mark_money = Symbol('mark_money', positive=True)\njohn_money = Symbol('john_money', positive=True)\nmark_new_money = mark_money + john_money / 2\njohn_new_money = john_money + mark_money / 3\nsolution = solve_it([mark_new_money - 75, john_new_money - 75], [mark_money, john_money])\nanswer = solution[john_money]", "completions": ["mark_money = Symbol('mark_money', positive=True)\njohn_money = Symbol('john_money', positive=True)\nmark_new_money = mark_money + john_money / 2\njohn_new_money = john_money + mark_money / 3\nsolution = solve_it([mark_new_money - 75, john_new_money - 75], [mark_money, john_money])\nanswer = solution[john_money]"]}
{"id": 106, "answer": "D", "completion": "num_lilies = Symbol('num_lilies', positive=True)\ninitial_lilies = 64\ndoubling_time = 2\ntime_to_cover_with_1_lily = 60\nsolution = solve_it([initial_lilies * 2 ** (num_lilies / doubling_time) - 1, initial_lilies * 2 ** (time_to_cover_with_1_lily / doubling_time) - num_lilies], num_lilies)\nanswer = solution[num_lilies]", "completions": ["num_lilies = Symbol('num_lilies', positive=True)\ninitial_lilies = 64\ndoubling_time = 2\ntime_to_cover_with_1_lily = 60\nsolution = solve_it([initial_lilies * 2 ** (num_lilies / doubling_time) - 1, initial_lilies * 2 ** (time_to_cover_with_1_lily / doubling_time) - num_lilies], num_lilies)\nanswer = solution[num_lilies]"]}
{"id": 107, "answer": "B", "completion": "x = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nnum_units = x\nnum_days = x\nnum_hours = x\nnum_men = y\nnew_num_units = num_men * y * num_hours * y * num_days\nanswer = simplify(new_num_units / (x ** 2))", "completions": ["x = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nnum_units = x\nnum_days = x\nnum_hours = x\nnum_men = y\nnew_num_units = num_men * y * num_hours * y * num_days\nanswer = simplify(new_num_units / (x ** 2))"]}
{"id": 108, "answer": "D", "completion": "There are 5 points to choose from, so the number of ways to choose 4 points is 5 choose 4, which is 5. However, any 4 points that include the center F will form the same quadrilateral, so we need to subtract the number of quadrilaterals that include F. There are 5 ways to choose 3 points that include F, and only one way to choose the fourth point, so there are 5 quadrilaterals that include F. Therefore, the total number of different quadrilaterals is 5 - 5 = 0. Answer option E)20 is incorrect.", "completions": ["There are 5 points to choose from, so the number of ways to choose 4 points is 5 choose 4, which is 5. However, any 4 points that include the center F will form the same quadrilateral, so we need to subtract the number of quadrilaterals that include F. There are 5 ways to choose 3 points that include F, and only one way to choose the fourth point, so there are 5 quadrilaterals that include F. Therefore, the total number of different quadrilaterals is 5 - 5 = 0. Answer option E)20 is incorrect."]}
{"id": 109, "answer": "A", "completion": "Let x be the measure of minor arc AD. Since B bisects minor arc AC, we know that minor arc AB has a measure of 80°. \n\nSince the sum of the measures of minor arcs AB and BD is equal to the measure of minor arc AD, we can set up the equation: \n\n80° + 150° = x \n\nSimplifying, we get: \n\nx = 230° \n\nHowever, we need to make sure that this value is valid. Since minor arc AC has a measure of 160°, we know that minor arc AD must have a measure less than 360° - 160° = 200°. \n\nSince 230° is greater than 200°, it is not a valid solution. \n\nInstead, we can use the fact that minor arc BD has a measure of 150° to set up another equation: \n\nx + 80° + 150° = 360° \n\nSimplifying, we get: \n\nx = 130° \n\nTherefore, the measure of minor arc AD is 130°. \n\nAnswer: B) 130°", "completions": ["Let x be the measure of minor arc AD. Since B bisects minor arc AC, we know that minor arc AB has a measure of 80°. \n\nSince the sum of the measures of minor arcs AB and BD is equal to the measure of minor arc AD, we can set up the equation: \n\n80° + 150° = x \n\nSimplifying, we get: \n\nx = 230° \n\nHowever, we need to make sure that this value is valid. Since minor arc AC has a measure of 160°, we know that minor arc AD must have a measure less than 360° - 160° = 200°. \n\nSince 230° is greater than 200°, it is not a valid solution. \n\nInstead, we can use the fact that minor arc BD has a measure of 150° to set up another equation: \n\nx + 80° + 150° = 360° \n\nSimplifying, we get: \n\nx = 130° \n\nTherefore, the measure of minor arc AD is 130°. \n\nAnswer: B) 130°"]}
{"id": 110, "answer": "A", "completion": "Let's assume that there are 100 employees in the company. Then:\n\n- 75 employees take a winter vacation\n- 40 employees take both winter and summer vacations, which means that they are included in the 75 employees who take a winter vacation. So, only 75 - 40 = 35 employees take only a winter vacation.\n- 20 employees take neither a winter nor a summer vacation, which means that 100 - 20 = 80 employees take at least one vacation.\n- Let's assume that Q percent of the employees take a summer vacation but not a winter vacation. This means that there are 40 - Q employees who take both winter and summer vacations, and 35 + Q employees who take only a summer vacation.\n- Therefore, the total number of employees who take at least one vacation is 75 + (35 + Q) + (40 - Q) = 150 - Q.\n- We know that 80 employees take at least one vacation, so we can write the equation: 150 - Q = 80.\n- Solving for Q, we get Q = 70.\n\nTherefore, 70 percent of the employees take a summer vacation but not a winter vacation. The answer is not among the given options.", "completions": ["Let's assume that there are 100 employees in the company. Then:\n\n- 75 employees take a winter vacation\n- 40 employees take both winter and summer vacations, which means that they are included in the 75 employees who take a winter vacation. So, only 75 - 40 = 35 employees take only a winter vacation.\n- 20 employees take neither a winter nor a summer vacation, which means that 100 - 20 = 80 employees take at least one vacation.\n- Let's assume that Q percent of the employees take a summer vacation but not a winter vacation. This means that there are 40 - Q employees who take both winter and summer vacations, and 35 + Q employees who take only a summer vacation.\n- Therefore, the total number of employees who take at least one vacation is 75 + (35 + Q) + (40 - Q) = 150 - Q.\n- We know that 80 employees take at least one vacation, so we can write the equation: 150 - Q = 80.\n- Solving for Q, we get Q = 70.\n\nTherefore, 70 percent of the employees take a summer vacation but not a winter vacation. The answer is not among the given options."]}
{"id": 111, "answer": "C", "completion": "depth = Symbol('depth', positive=True)\ntop_width = 10\nbottom_width = 6\narea = 640\nheight = sqrt(area / ((top_width + bottom_width) / 2))\nsolution = solve_it(height - depth, depth)\nanswer = solution[depth]", "completions": ["depth = Symbol('depth', positive=True)\ntop_width = 10\nbottom_width = 6\narea = 640\nheight = sqrt(area / ((top_width + bottom_width) / 2))\nsolution = solve_it(height - depth, depth)\nanswer = solution[depth]"]}
{"id": 112, "answer": "D", "completion": "total_matches = 20 / (1 - 0.3)\nmatches_lost = total_matches - 20\nanswer = matches_lost", "completions": ["total_matches = 20 / (1 - 0.3)\nmatches_lost = total_matches - 20\nanswer = matches_lost"]}
{"id": 113, "answer": "E", "completion": "radius = 10\nrevolutions_per_second = 300 / 60\nangular_velocity = 2 * pi * revolutions_per_second\ndistance_traveled = radius * angular_velocity * 30\nanswer = simplify(distance_traveled)", "completions": ["radius = 10\nrevolutions_per_second = 300 / 60\nangular_velocity = 2 * pi * revolutions_per_second\ndistance_traveled = radius * angular_velocity * 30\nanswer = simplify(distance_traveled)"]}
{"id": 114, "answer": "E", "completion": "n = Symbol('n', real=True)\nexpr = (n**2 + 2*sqrt(n*(n+4)) + 16) / (n + 4*sqrt(n+4))\ndomain = And(36 <= n, n <= 72)\ncritical_points = solve(diff(expr, n))\npossible_extrema = [expr.subs(n, cp) for cp in critical_points if domain.subs(n, cp)]\npossible_extrema += [expr.subs(n, 36), expr.subs(n, 72)]\nanswer_options = ['A)20 < x < 54', 'B)23 < x < 58', 'C)25 < x < 64', 'D)28 < x < 60', 'E)None of these']\nfor option in answer_options:\n    bounds = option[option.index('(')+1:option.index(')')].split(' < x < ')\n    if all(expr.subs(n, bound) > min(possible_extrema) and expr.subs(n, bound) < max(possible_extrema) for bound in bounds):\n        answer = option\n        break", "completions": ["n = Symbol('n', real=True)\nexpr = (n**2 + 2*sqrt(n*(n+4)) + 16) / (n + 4*sqrt(n+4))\ndomain = And(36 <= n, n <= 72)\ncritical_points = solve(diff(expr, n))\npossible_extrema = [expr.subs(n, cp) for cp in critical_points if domain.subs(n, cp)]\npossible_extrema += [expr.subs(n, 36), expr.subs(n, 72)]\nanswer_options = ['A)20 < x < 54', 'B)23 < x < 58', 'C)25 < x < 64', 'D)28 < x < 60', 'E)None of these']\nfor option in answer_options:\n    bounds = option[option.index('(')+1:option.index(')')].split(' < x < ')\n    if all(expr.subs(n, bound) > min(possible_extrema) and expr.subs(n, bound) < max(possible_extrema) for bound in bounds):\n        answer = option\n        break"]}
{"id": 115, "answer": "E", "completion": "length = Symbol('length', positive=True)\nmax_speed = 700 / 40\ntotal_time = 40 + 5\ndistance_traveled = max_speed * total_time\nsolution = solve_it(distance_traveled - length, length)\nanswer = solution[length]", "completions": ["length = Symbol('length', positive=True)\nmax_speed = 700 / 40\ntotal_time = 40 + 5\ndistance_traveled = max_speed * total_time\nsolution = solve_it(distance_traveled - length, length)\nanswer = solution[length]"]}
{"id": 116, "answer": "D", "completion": "total_investment = 40000 + 60000\ntotal_profit = 375000\nc_share = 150000\na_share = (total_investment * 10 / 12) / total_investment * total_profit\nb_share = (total_investment * 2 / 12 + 60000 * 10 / 12) / total_investment * total_profit\nc_investment = (c_share / total_profit) * (total_investment + 60000)\nc_join_month = (c_investment - 60000) / 120000 * 12\nanswer = round(c_join_month)", "completions": ["total_investment = 40000 + 60000\ntotal_profit = 375000\nc_share = 150000\na_share = (total_investment * 10 / 12) / total_investment * total_profit\nb_share = (total_investment * 2 / 12 + 60000 * 10 / 12) / total_investment * total_profit\nc_investment = (c_share / total_profit) * (total_investment + 60000)\nc_join_month = (c_investment - 60000) / 120000 * 12\nanswer = round(c_join_month)"]}
{"id": 117, "answer": "A", "completion": "side = 20\nradius = side / 2\nsemi_circle_area = pi * radius ** 2 / 2\nsquare_area = side ** 2\nremaining_area = square_area - 2 * semi_circle_area\nanswer = round(remaining_area, 2)", "completions": ["side = 20\nradius = side / 2\nsemi_circle_area = pi * radius ** 2 / 2\nsquare_area = side ** 2\nremaining_area = square_area - 2 * semi_circle_area\nanswer = round(remaining_area, 2)"]}
{"id": 118, "answer": "C", "completion": "total_distance = M + N\ntotal_time = 8\naverage_speed = total_distance / total_time\nanswer = simplify(average_speed)", "completions": ["total_distance = M + N\ntotal_time = 8\naverage_speed = total_distance / total_time\nanswer = simplify(average_speed)"]}
{"id": 119, "answer": "D", "completion": "total_work = Symbol('total_work', positive=True)\nnum_men = Symbol('num_men', positive=True)\nnum_days = Symbol('num_days', positive=True)\neq1 = total_work - 8 * 6\neq2 = total_work - num_men * (1/2)\nsolution = solve_it([eq1, eq2], [total_work, num_men])\nanswer = round(solution[num_men])", "completions": ["total_work = Symbol('total_work', positive=True)\nnum_men = Symbol('num_men', positive=True)\nnum_days = Symbol('num_days', positive=True)\neq1 = total_work - 8 * 6\neq2 = total_work - num_men * (1/2)\nsolution = solve_it([eq1, eq2], [total_work, num_men])\nanswer = round(solution[num_men])"]}
{"id": 120, "answer": "A or D (since they are the same option", "completion": "initial_boys = 64\ninitial_girls = 40\nnew_members = min(initial_boys, initial_girls)\nnew_boys = new_girls = new_members\ntotal_boys = initial_boys + new_boys\ntotal_girls = initial_girls + new_girls\nif total_boys / total_girls == 4 / 3:\n    answer = total_boys + total_girls\nelse:\n    answer = \"Ratio doesn't match\"\n    \n# Answer option: B)288", "completions": ["initial_boys = 64\ninitial_girls = 40\nnew_members = min(initial_boys, initial_girls)\nnew_boys = new_girls = new_members\ntotal_boys = initial_boys + new_boys\ntotal_girls = initial_girls + new_girls\nif total_boys / total_girls == 4 / 3:\n    answer = total_boys + total_girls\nelse:\n    answer = \"Ratio doesn't match\"\n    \n# Answer option: B)288"]}
{"id": 121, "answer": "B", "completion": "distance = 48\nspeed = 12\ntime_in_hours = distance / speed\ntime_in_minutes = time_in_hours * 60\nanswer = time_in_minutes", "completions": ["distance = 48\nspeed = 12\ntime_in_hours = distance / speed\ntime_in_minutes = time_in_hours * 60\nanswer = time_in_minutes"]}
{"id": 122, "answer": "E", "completion": "distance_AB = Symbol('distance_AB', positive=True)\ntime_to_reach_B = distance_AB / 70\ntime_to_return_to_A = distance_AB / 90\ntotal_time = time_to_reach_B + time_to_return_to_A\nremaining_time = total_time - 3\nremaining_distance = 70\ntime_to_cover_remaining_distance = remaining_distance / 90\ntotal_remaining_time = remaining_time + time_to_cover_remaining_distance\nsolution = solve_it(total_remaining_time - total_time, distance_AB)\nanswer = solution[distance_AB]", "completions": ["distance_AB = Symbol('distance_AB', positive=True)\ntime_to_reach_B = distance_AB / 70\ntime_to_return_to_A = distance_AB / 90\ntotal_time = time_to_reach_B + time_to_return_to_A\nremaining_time = total_time - 3\nremaining_distance = 70\ntime_to_cover_remaining_distance = remaining_distance / 90\ntotal_remaining_time = remaining_time + time_to_cover_remaining_distance\nsolution = solve_it(total_remaining_time - total_time, distance_AB)\nanswer = solution[distance_AB]"]}
{"id": 123, "answer": "B", "completion": "number = Symbol('number', positive=True)\nequation = (number - 30) * 3 / 2 - number\nsolution = solve(equation, number)\nnumber_value = solution[0]\nanswer = number_value * 0.5", "completions": ["number = Symbol('number', positive=True)\nequation = (number - 30) * 3 / 2 - number\nsolution = solve(equation, number)\nnumber_value = solution[0]\nanswer = number_value * 0.5"]}
{"id": 124, "answer": "E", "completion": "boat_speed = 4\nagainst_stream_speed = 2\nalong_stream_speed = boat_speed + against_stream_speed\nanswer = along_stream_speed", "completions": ["boat_speed = 4\nagainst_stream_speed = 2\nalong_stream_speed = boat_speed + against_stream_speed\nanswer = along_stream_speed"]}
{"id": 125, "answer": "D", "completion": "hundreds = Symbol('hundreds', positive=True)\ntens = Symbol('tens', positive=True)\nones = Symbol('ones', positive=True)\nnumber = 100 * hundreds + 10 * tens + ones\nsolution = solve_it([hundreds + tens + ones - 17, hundreds ** 2 + tens ** 2 + ones ** 2 - 109, number - 495 - (100 * ones + 10 * tens + hundreds)], [hundreds, tens, ones])\nanswer = solution[number]", "completions": ["hundreds = Symbol('hundreds', positive=True)\ntens = Symbol('tens', positive=True)\nones = Symbol('ones', positive=True)\nnumber = 100 * hundreds + 10 * tens + ones\nsolution = solve_it([hundreds + tens + ones - 17, hundreds ** 2 + tens ** 2 + ones ** 2 - 109, number - 495 - (100 * ones + 10 * tens + hundreds)], [hundreds, tens, ones])\nanswer = solution[number]"]}
{"id": 126, "answer": "D", "completion": "total_zinc = 6/15 * 40 + 7/18 * 60\ntotal_copper = 9/15 * 40 + 11/18 * 60\nratio_zinc_copper = total_zinc / total_copper\nanswer = simplify(ratio_zinc_copper)", "completions": ["total_zinc = 6/15 * 40 + 7/18 * 60\ntotal_copper = 9/15 * 40 + 11/18 * 60\nratio_zinc_copper = total_zinc / total_copper\nanswer = simplify(ratio_zinc_copper)"]}
{"id": 127, "answer": "D", "completion": "total_contributions = 16000 + 4000\ntotal_senators = 30\nhoopsmot_share = (16000 / total_contributions) * total_senators\nanswer = hoopsmot_share", "completions": ["total_contributions = 16000 + 4000\ntotal_senators = 30\nhoopsmot_share = (16000 / total_contributions) * total_senators\nanswer = hoopsmot_share"]}
{"id": 128, "answer": "B", "completion": "num1 = Symbol('num1')\nnum2 = Symbol('num2')\ndifference = num1 ** 2 - num2 ** 2\nsum_of_numbers = num1 + num2\nsolution = solve_it([difference - 256000, sum_of_numbers - 1000], [num1, num2])\nanswer = (solution[num1], solution[num2])", "completions": ["num1 = Symbol('num1')\nnum2 = Symbol('num2')\ndifference = num1 ** 2 - num2 ** 2\nsum_of_numbers = num1 + num2\nsolution = solve_it([difference - 256000, sum_of_numbers - 1000], [num1, num2])\nanswer = (solution[num1], solution[num2])"]}
{"id": 129, "answer": "D", "completion": "weight_on_earth = 211\nweight_on_venus = 182\npercent_weight_on_venus = (weight_on_venus / weight_on_earth) * 100\nanswer = percent_weight_on_venus", "completions": ["weight_on_earth = 211\nweight_on_venus = 182\npercent_weight_on_venus = (weight_on_venus / weight_on_earth) * 100\nanswer = percent_weight_on_venus"]}
{"id": 130, "answer": "A", "completion": "total_distance = 5 * 6 + 4 * 12\ntotal_time = 6 + 12\naverage_speed = total_distance / total_time\nanswer = average_speed", "completions": ["total_distance = 5 * 6 + 4 * 12\ntotal_time = 6 + 12\naverage_speed = total_distance / total_time\nanswer = average_speed"]}
{"id": 131, "answer": "C", "completion": "expression = ((272 - 32) * (124 + 176)) / ((17 * 15) - 15)\nanswer = simplify(expression)", "completions": ["expression = ((272 - 32) * (124 + 176)) / ((17 * 15) - 15)\nanswer = simplify(expression)"]}
{"id": 132, "answer": "C (assuming a family of 3 members", "completion": "Assuming that the median income refers to the income of the middle member in the family when the incomes are arranged in ascending or descending order, we can set up the following equation:\n\n(2n-1) * 3000 = 9000\n\nwhere n is the number of members in the family. Simplifying this equation, we get:\n\n2n - 1 = 3\n\n2n = 4\n\nn = 2\n\nTherefore, there are 2 members in the family. Answer option A is correct.", "completions": ["Assuming that the median income refers to the income of the middle member in the family when the incomes are arranged in ascending or descending order, we can set up the following equation:\n\n(2n-1) * 3000 = 9000\n\nwhere n is the number of members in the family. Simplifying this equation, we get:\n\n2n - 1 = 3\n\n2n = 4\n\nn = 2\n\nTherefore, there are 2 members in the family. Answer option A is correct."]}
{"id": 133, "answer": "E", "completion": "adult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nanswer = total_fare", "completions": ["adult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nanswer = total_fare"]}
{"id": 134, "answer": "C", "completion": "num_employees = Symbol('num_employees', integer=True, positive=True)\ncontribution = Symbol('contribution', positive=True)\ntotal_contribution = num_employees * contribution\ntotal_contribution_with_extra = (num_employees * (contribution + 60))\nsolution = solve_it([total_contribution_with_extra - 624000, total_contribution - 600000], [num_employees, contribution])\nanswer = solution[num_employees]", "completions": ["num_employees = Symbol('num_employees', integer=True, positive=True)\ncontribution = Symbol('contribution', positive=True)\ntotal_contribution = num_employees * contribution\ntotal_contribution_with_extra = (num_employees * (contribution + 60))\nsolution = solve_it([total_contribution_with_extra - 624000, total_contribution - 600000], [num_employees, contribution])\nanswer = solution[num_employees]"]}
{"id": 135, "answer": "A", "completion": "total_voters = 5000\neligible_voters = total_voters * 0.8\nvotes_for_winning = eligible_voters * 0.15\ntotal_votes_for_both_candidates = eligible_voters - votes_for_winning\nanswer = total_votes_for_both_candidates", "completions": ["total_voters = 5000\neligible_voters = total_voters * 0.8\nvotes_for_winning = eligible_voters * 0.15\ntotal_votes_for_both_candidates = eligible_voters - votes_for_winning\nanswer = total_votes_for_both_candidates"]}
{"id": 136, "answer": "A", "completion": "num_copper_coins = Symbol('num_copper_coins', integer=True, nonnegative=True)\nnum_brass_coins = Symbol('num_brass_coins', integer=True, nonnegative=True)\ntotal_coins = num_copper_coins + num_brass_coins\ntotal_earnings = 20 * num_copper_coins + 25 * num_brass_coins\nsolution = solve_it([total_earnings - 340, total_coins - (num_copper_coins + num_brass_coins)], [num_copper_coins, num_brass_coins])\nanswer = solution[num_copper_coins]", "completions": ["num_copper_coins = Symbol('num_copper_coins', integer=True, nonnegative=True)\nnum_brass_coins = Symbol('num_brass_coins', integer=True, nonnegative=True)\ntotal_coins = num_copper_coins + num_brass_coins\ntotal_earnings = 20 * num_copper_coins + 25 * num_brass_coins\nsolution = solve_it([total_earnings - 340, total_coins - (num_copper_coins + num_brass_coins)], [num_copper_coins, num_brass_coins])\nanswer = solution[num_copper_coins]"]}
{"id": 137, "answer": "D", "completion": "ram_speed = 20\nkrishna_speed = 40\ntime_to_meet = 10\ndistance_traveled_by_ram = ram_speed * time_to_meet\ntotal_distance = 2 * distance_traveled_by_ram\nanswer = total_distance", "completions": ["ram_speed = 20\nkrishna_speed = 40\ntime_to_meet = 10\ndistance_traveled_by_ram = ram_speed * time_to_meet\ntotal_distance = 2 * distance_traveled_by_ram\nanswer = total_distance"]}
{"id": 138, "answer": "C", "completion": "speed_x = 320 / 8\nspeed_y = 415 / 5\ndifference = abs(speed_x - speed_y)\nanswer = difference", "completions": ["speed_x = 320 / 8\nspeed_y = 415 / 5\ndifference = abs(speed_x - speed_y)\nanswer = difference"]}
{"id": 139, "answer": "D", "completion": "distance = Symbol('distance', positive=True)\ntime_running = distance / 10\ntime_walking = distance / 5\ntotal_time = time_running + time_walking\nsolution = solve_it(total_time - 1, distance)\nanswer = solution[distance]", "completions": ["distance = Symbol('distance', positive=True)\ntime_running = distance / 10\ntime_walking = distance / 5\ntotal_time = time_running + time_walking\nsolution = solve_it(total_time - 1, distance)\nanswer = solution[distance]"]}
{"id": 140, "answer": "E", "completion": "total_balls = 600\nsold_balls = 0.8 * total_balls\nwhite_balls = sold_balls / 2\nyellow_balls = total_balls - white_balls\nanswer = yellow_balls", "completions": ["total_balls = 600\nsold_balls = 0.8 * total_balls\nwhite_balls = sold_balls / 2\nyellow_balls = total_balls - white_balls\nanswer = yellow_balls"]}
{"id": 141, "answer": "B", "completion": "height_1 = 17.5\nshadow_1 = 40.25\nshadow_2 = 28.75\nheight_2 = (height_1 * shadow_2) / shadow_1\nanswer = height_2", "completions": ["height_1 = 17.5\nshadow_1 = 40.25\nshadow_2 = 28.75\nheight_2 = (height_1 * shadow_2) / shadow_1\nanswer = height_2"]}
{"id": 142, "answer": "D", "completion": "distance_diff = 15\nspeed_diff = 55 - 52\ntime = distance_diff / speed_diff\nanswer = time * 60 # convert to minutes", "completions": ["distance_diff = 15\nspeed_diff = 55 - 52\ntime = distance_diff / speed_diff\nanswer = time * 60 # convert to minutes"]}
{"id": 143, "answer": "D", "completion": "P(A) = 0.6\nP(A or B) = 0.96\nP(A and B) = P(A) * P(B) (since A and B are independent)\nP(A or B) = P(A) + P(B) - P(A and B)\n0.96 = 0.6 + P(B) - 0.6 * P(B)\n0.36 = 0.4 * P(B)\nP(B) = 0.9\nanswer = P(B)", "completions": ["P(A) = 0.6\nP(A or B) = 0.96\nP(A and B) = P(A) * P(B) (since A and B are independent)\nP(A or B) = P(A) + P(B) - P(A and B)\n0.96 = 0.6 + P(B) - 0.6 * P(B)\n0.36 = 0.4 * P(B)\nP(B) = 0.9\nanswer = P(B)"]}
{"id": 144, "answer": "A", "completion": "side_length = Symbol('side_length', positive=True)\ncube_volume = side_length ** 3\nsphere_radius = side_length / 2\nsphere_volume = Rational(4, 3) * pi * sphere_radius ** 3\nratio = cube_volume / sphere_volume\nanswer = simplify(ratio)", "completions": ["side_length = Symbol('side_length', positive=True)\ncube_volume = side_length ** 3\nsphere_radius = side_length / 2\nsphere_volume = Rational(4, 3) * pi * sphere_radius ** 3\nratio = cube_volume / sphere_volume\nanswer = simplify(ratio)"]}
{"id": 145, "answer": "B", "completion": "colors = [8, 13, 10, 5, 4]\nmin_ties = 2\nfor i in range(len(colors)):\n    if colors[i] >= min_ties:\n        answer = sum(colors[:i+1])\n        break", "completions": ["colors = [8, 13, 10, 5, 4]\nmin_ties = 2\nfor i in range(len(colors)):\n    if colors[i] >= min_ties:\n        answer = sum(colors[:i+1])\n        break"]}
{"id": 146, "answer": "D", "completion": "answer = 25/12 * 5", "completions": ["answer = 25/12 * 5"]}
{"id": 147, "answer": "A", "completion": "answer = 2", "completions": ["answer = 2"]}
{"id": 148, "answer": "A", "completion": "cost_price = 450\nselling_price = 7.5 * 90\nprofit = selling_price - cost_price\nprofit_percentage = (profit / cost_price) * 100\nanswer = profit_percentage", "completions": ["cost_price = 450\nselling_price = 7.5 * 90\nprofit = selling_price - cost_price\nprofit_percentage = (profit / cost_price) * 100\nanswer = profit_percentage"]}
{"id": 149, "answer": "E", "completion": "distance_MA = Symbol('distance_MA', positive=True)\ndistance_MB = Symbol('distance_MB', positive=True)\nspeed_M = distance_MA / 4\nspeed_N = distance_MB / 3.5\ntotal_distance = distance_MA + distance_MB\ntotal_time = 4 + 3.5\nsolution = solve_it([distance_MA + distance_MB - total_distance, distance_MA / speed_M - distance_MB / speed_N - total_time], [distance_MA, distance_MB])\ncrossing_time = datetime.timedelta(hours=5) + datetime.timedelta(hours=solution[distance_MA] / speed_M)\nanswer = f\"{crossing_time.hour} hr {crossing_time.minute} min\"", "completions": ["distance_MA = Symbol('distance_MA', positive=True)\ndistance_MB = Symbol('distance_MB', positive=True)\nspeed_M = distance_MA / 4\nspeed_N = distance_MB / 3.5\ntotal_distance = distance_MA + distance_MB\ntotal_time = 4 + 3.5\nsolution = solve_it([distance_MA + distance_MB - total_distance, distance_MA / speed_M - distance_MB / speed_N - total_time], [distance_MA, distance_MB])\ncrossing_time = datetime.timedelta(hours=5) + datetime.timedelta(hours=solution[distance_MA] / speed_M)\nanswer = f\"{crossing_time.hour} hr {crossing_time.minute} min\""]}
{"id": 150, "answer": "E", "completion": "time_janice = Symbol('time_janice', positive=True)\ntime_jennie = Symbol('time_jennie', positive=True)\ndistance = 1\nspeed_janice = 10\nspeed_jennie = 20\nsolution = solve_it([speed_janice * time_janice + speed_jennie * time_jennie - distance, time_janice + time_jennie - Rational(1, 60)], [time_janice, time_jennie])\nanswer = solution[time_janice] * 60", "completions": ["time_janice = Symbol('time_janice', positive=True)\ntime_jennie = Symbol('time_jennie', positive=True)\ndistance = 1\nspeed_janice = 10\nspeed_jennie = 20\nsolution = solve_it([speed_janice * time_janice + speed_jennie * time_jennie - distance, time_janice + time_jennie - Rational(1, 60)], [time_janice, time_jennie])\nanswer = solution[time_janice] * 60"]}
{"id": 151, "answer": "E", "completion": "M = Symbol('M', positive=True)\noriginal_marks = 504\nconverted_marks = 420\noriginal_max_marks = M\nconverted_max_marks = 800\nsolution = solve_it([original_marks / original_max_marks - converted_marks / converted_max_marks, original_max_marks - M], M)\nanswer = solution[M]", "completions": ["M = Symbol('M', positive=True)\noriginal_marks = 504\nconverted_marks = 420\noriginal_max_marks = M\nconverted_max_marks = 800\nsolution = solve_it([original_marks / original_max_marks - converted_marks / converted_max_marks, original_max_marks - M], M)\nanswer = solution[M]"]}
{"id": 152, "answer": "D", "completion": "Assuming the soda consumption per person remains constant, we can use a proportion to solve this problem:\n\n10 bottles / 8 people = x bottles / 12 people\n\nSolving for x, we get:\n\nx = (10 bottles / 8 people) * 12 people\nx = 15 bottles\n\nTherefore, Jill will need to buy 15 bottles of soda for a party in which 12 people are attending. Answer option: E)14 (incorrect).", "completions": ["Assuming the soda consumption per person remains constant, we can use a proportion to solve this problem:\n\n10 bottles / 8 people = x bottles / 12 people\n\nSolving for x, we get:\n\nx = (10 bottles / 8 people) * 12 people\nx = 15 bottles\n\nTherefore, Jill will need to buy 15 bottles of soda for a party in which 12 people are attending. Answer option: E)14 (incorrect)."]}
{"id": 153, "answer": "D", "completion": "height1 = 4\nshadow1 = 10\nheight2 = 6\nshadow2 = (height2 / height1) * shadow1\nanswer = shadow2", "completions": ["height1 = 4\nshadow1 = 10\nheight2 = 6\nshadow2 = (height2 / height1) * shadow1\nanswer = shadow2"]}
{"id": 154, "answer": "C", "completion": "height_ratio = Rational(2, 5)\npaper_width = 0.5\npaper_cost = 2\ndoor_window_area = 15\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nheight = height_ratio * semi_perimeter\nwidth = (semi_perimeter / 2) - height\ntotal_area = 2 * height * semi_perimeter + 2 * width * height - door_window_area\npaper_length = total_area / paper_width\ntotal_cost = paper_length * paper_cost\nsolution = solve_it(total_cost - 260, semi_perimeter)\nanswer = height.subs(semi_perimeter, solution[semi_perimeter])", "completions": ["height_ratio = Rational(2, 5)\npaper_width = 0.5\npaper_cost = 2\ndoor_window_area = 15\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nheight = height_ratio * semi_perimeter\nwidth = (semi_perimeter / 2) - height\ntotal_area = 2 * height * semi_perimeter + 2 * width * height - door_window_area\npaper_length = total_area / paper_width\ntotal_cost = paper_length * paper_cost\nsolution = solve_it(total_cost - 260, semi_perimeter)\nanswer = height.subs(semi_perimeter, solution[semi_perimeter])"]}
{"id": 155, "answer": "E", "completion": "k = Symbol('k', integer=True, positive=True)\nleast_integer = -50\nsum_of_integers = k * (2 * least_integer + k - 1) / 2\nsolution = solve_it(sum_of_integers - 51, k)\nanswer = solution[k]", "completions": ["k = Symbol('k', integer=True, positive=True)\nleast_integer = -50\nsum_of_integers = k * (2 * least_integer + k - 1) / 2\nsolution = solve_it(sum_of_integers - 51, k)\nanswer = solution[k]"]}
{"id": 156, "answer": "D", "completion": "num_songs = 10\ntimes_each_song_selected = 5\nnum_students = (num_songs * times_each_song_selected) / 2\nanswer = num_students", "completions": ["num_songs = 10\ntimes_each_song_selected = 5\nnum_students = (num_songs * times_each_song_selected) / 2\nanswer = num_students"]}
{"id": 157, "answer": "E", "completion": "m = Symbol('m')\nroot = 1.5\nquadratic = x**2 + m*x + 22\nsolution = solve_it(quadratic.subs(x, root), m)\nif solution:\n    answer = solution[m]\nelse:\n    answer = \"Cannot be determined\"", "completions": ["m = Symbol('m')\nroot = 1.5\nquadratic = x**2 + m*x + 22\nsolution = solve_it(quadratic.subs(x, root), m)\nif solution:\n    answer = solution[m]\nelse:\n    answer = \"Cannot be determined\""]}
{"id": 158, "answer": "D", "completion": "answer = factorial(10) / (2 * 2 * 3)  # divide by 2! for pm, 2! for mp, and 3! for mla", "completions": ["answer = factorial(10) / (2 * 2 * 3)  # divide by 2! for pm, 2! for mp, and 3! for mla"]}
{"id": 159, "answer": "C", "completion": "num_articles = Symbol('num_articles', integer=True, positive=True)\noriginal_price = Symbol('original_price', positive=True)\nnew_price = Symbol('new_price', positive=True)\ntotal_cost = 300\npercent_decrease = 15\nnum_articles_after_decrease = num_articles + 5\noriginal_total_cost = num_articles * original_price\nnew_total_cost = num_articles_after_decrease * new_price\nsolution = solve_it([original_total_cost - new_total_cost, original_price - (1 - percent_decrease / 100) * new_price, original_total_cost - total_cost], [num_articles, original_price, new_price])\nanswer = solution[new_price]", "completions": ["num_articles = Symbol('num_articles', integer=True, positive=True)\noriginal_price = Symbol('original_price', positive=True)\nnew_price = Symbol('new_price', positive=True)\ntotal_cost = 300\npercent_decrease = 15\nnum_articles_after_decrease = num_articles + 5\noriginal_total_cost = num_articles * original_price\nnew_total_cost = num_articles_after_decrease * new_price\nsolution = solve_it([original_total_cost - new_total_cost, original_price - (1 - percent_decrease / 100) * new_price, original_total_cost - total_cost], [num_articles, original_price, new_price])\nanswer = solution[new_price]"]}
{"id": 160, "answer": "D", "completion": "total_children = Symbol('total_children', positive=True)\nneha_position = 12\nradha_position = total_children - 6 + 1\nnew_neha_position = neha_position + 2\nnew_radha_position = radha_position - 2\nnum_children_between = new_radha_position - new_neha_position - 1\nsolution = solve_it(num_children_between - 6, total_children)\nanswer = solution[total_children]", "completions": ["total_children = Symbol('total_children', positive=True)\nneha_position = 12\nradha_position = total_children - 6 + 1\nnew_neha_position = neha_position + 2\nnew_radha_position = radha_position - 2\nnum_children_between = new_radha_position - new_neha_position - 1\nsolution = solve_it(num_children_between - 6, total_children)\nanswer = solution[total_children]"]}
{"id": 161, "answer": "B", "completion": "original_sand = 0.3 * 10\noriginal_clay = 0.7 * 10\ntotal = 10\nnew_sand = new_clay = total / 2\nsand_to_replace = new_sand - original_sand\ntotal_to_replace = sand_to_replace / 0.3\nanswer = simplify(total_to_replace)", "completions": ["original_sand = 0.3 * 10\noriginal_clay = 0.7 * 10\ntotal = 10\nnew_sand = new_clay = total / 2\nsand_to_replace = new_sand - original_sand\ntotal_to_replace = sand_to_replace / 0.3\nanswer = simplify(total_to_replace)"]}
{"id": 162, "answer": "A", "completion": "income = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = 0.7 * new_income\nanswer = new_expenditure / new_income", "completions": ["income = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = 0.7 * new_income\nanswer = new_expenditure / new_income"]}
{"id": 163, "answer": "D", "completion": "gcd(28, 98) = 14\nSo, we can make 14 identical bouquets with 2 white and 7 red tulips in each bouquet.\nAnswer: D)14", "completions": ["gcd(28, 98) = 14\nSo, we can make 14 identical bouquets with 2 white and 7 red tulips in each bouquet.\nAnswer: D)14"]}
{"id": 164, "answer": "C", "completion": "sharon_hours = Symbol('sharon_hours', positive=True)\nkaren_hours = Symbol('karen_hours', positive=True)\nsharon_tips = sharon_hours / 5\nkaren_tips = karen_hours / 4\ntotal_tips = sharon_tips + karen_tips\nsolution = solve_it(total_tips - 1, [sharon_hours, karen_hours])\nanswer = solution[sharon_hours]", "completions": ["sharon_hours = Symbol('sharon_hours', positive=True)\nkaren_hours = Symbol('karen_hours', positive=True)\nsharon_tips = sharon_hours / 5\nkaren_tips = karen_hours / 4\ntotal_tips = sharon_tips + karen_tips\nsolution = solve_it(total_tips - 1, [sharon_hours, karen_hours])\nanswer = solution[sharon_hours]"]}
{"id": 165, "answer": "A", "completion": "Since x<0 and y>0, we can simplify |x^3| to -x^3. Therefore, we have -x^3 > y^2. \nTaking the cube root of both sides, we get -x > y^(2/3). \nSince y^(2/3) is positive, we can square both sides without changing the direction of the inequality: (-x)^2 > y^(2/3)^2. \nSimplifying, we get x^2 > y^(4/3). \nTherefore, the answer is B) y^2 > x^2.", "completions": ["Since x<0 and y>0, we can simplify |x^3| to -x^3. Therefore, we have -x^3 > y^2. \nTaking the cube root of both sides, we get -x > y^(2/3). \nSince y^(2/3) is positive, we can square both sides without changing the direction of the inequality: (-x)^2 > y^(2/3)^2. \nSimplifying, we get x^2 > y^(4/3). \nTherefore, the answer is B) y^2 > x^2."]}
{"id": 166, "answer": "D", "completion": "time = Symbol('time', positive=True)\nprinter_a_speed = 1/2\nprinter_b_speed = 1/2\ntotal_pages = 100\ntotal_time = total_pages / (printer_a_speed + printer_b_speed)\nsolution = solve_it(total_time - time, time)\nanswer = solution[time]", "completions": ["time = Symbol('time', positive=True)\nprinter_a_speed = 1/2\nprinter_b_speed = 1/2\ntotal_pages = 100\ntotal_time = total_pages / (printer_a_speed + printer_b_speed)\nsolution = solve_it(total_time - time, time)\nanswer = solution[time]"]}
{"id": 167, "answer": "A", "completion": "distance_a = Symbol('distance_a', positive=True)\ndistance_b = 75 - distance_a\ntime = distance_a / 9  # time taken by ant A to cover distance_a\ndistance_b_covered = time * 6  # distance covered by ant B in the same time\nsolution = solve_it(distance_b_covered - distance_b, distance_a)\nanswer = solution[distance_a]", "completions": ["distance_a = Symbol('distance_a', positive=True)\ndistance_b = 75 - distance_a\ntime = distance_a / 9  # time taken by ant A to cover distance_a\ndistance_b_covered = time * 6  # distance covered by ant B in the same time\nsolution = solve_it(distance_b_covered - distance_b, distance_a)\nanswer = solution[distance_a]"]}
{"id": 168, "answer": "A", "completion": "recorded_worth = math.floor(1023.65 / 100) * 100\nactual_worth = 1023.65\ndifference = actual_worth - recorded_worth\nanswer = difference", "completions": ["recorded_worth = math.floor(1023.65 / 100) * 100\nactual_worth = 1023.65\ndifference = actual_worth - recorded_worth\nanswer = difference"]}
{"id": 169, "answer": "A (assuming the answer is asking for the ratio of trousers to shirts, not the actual number of trousers purchased", "completion": "num_trousers = Symbol('num_trousers', integer=True, positive=True)\nnum_shirts = Symbol('num_shirts', integer=True, positive=True)\ntrouser_cost = 70\nshirt_cost = 30\ntotal_cost = 810\nsolution = solve_it([num_trousers * trouser_cost + num_shirts * shirt_cost - total_cost, num_trousers >= num_shirts], [num_trousers, num_shirts])\nanswer = solution[num_trousers]", "completions": ["num_trousers = Symbol('num_trousers', integer=True, positive=True)\nnum_shirts = Symbol('num_shirts', integer=True, positive=True)\ntrouser_cost = 70\nshirt_cost = 30\ntotal_cost = 810\nsolution = solve_it([num_trousers * trouser_cost + num_shirts * shirt_cost - total_cost, num_trousers >= num_shirts], [num_trousers, num_shirts])\nanswer = solution[num_trousers]"]}
{"id": 170, "answer": "E", "completion": "cover_price = Symbol('cover_price', positive=True)\nnum_issues = 15\nsubscription_cost = 42\ndiscount = 0.25\ncover_price_per_issue = cover_price * (1 - discount)\nsolution = solve_it(num_issues * cover_price_per_issue - subscription_cost, cover_price)\nanswer = solution[cover_price]", "completions": ["cover_price = Symbol('cover_price', positive=True)\nnum_issues = 15\nsubscription_cost = 42\ndiscount = 0.25\ncover_price_per_issue = cover_price * (1 - discount)\nsolution = solve_it(num_issues * cover_price_per_issue - subscription_cost, cover_price)\nanswer = solution[cover_price]"]}
{"id": 171, "answer": "E", "completion": "num_flips = 20\nheads_count = Symbol('heads_count', integer=True)\ntails_count = num_flips - heads_count\ntotal_gain = 2 * heads_count - 3 * tails_count\nsolution = solve_it(total_gain, heads_count)\nanswer = solution[heads_count]", "completions": ["num_flips = 20\nheads_count = Symbol('heads_count', integer=True)\ntails_count = num_flips - heads_count\ntotal_gain = 2 * heads_count - 3 * tails_count\nsolution = solve_it(total_gain, heads_count)\nanswer = solution[heads_count]"]}
{"id": 172, "answer": "C", "completion": "distance = Symbol('distance', positive=True)\nspeed_alen = 54\nspeed_bob = 78\ntime_alen_to_meet = distance / (speed_alen + speed_bob)\ntime_bob_to_meet = distance / (speed_bob + speed_alen)\ndistance_bob_covered_extra = (time_bob_to_meet - time_alen_to_meet) * speed_bob\nsolution = solve_it(distance_bob_covered_extra - 48, distance)\nanswer = solution[distance]", "completions": ["distance = Symbol('distance', positive=True)\nspeed_alen = 54\nspeed_bob = 78\ntime_alen_to_meet = distance / (speed_alen + speed_bob)\ntime_bob_to_meet = distance / (speed_bob + speed_alen)\ndistance_bob_covered_extra = (time_bob_to_meet - time_alen_to_meet) * speed_bob\nsolution = solve_it(distance_bob_covered_extra - 48, distance)\nanswer = solution[distance]"]}
{"id": 173, "answer": "A", "completion": "cost_new = 180\ncost_repair = 40\nlife_new = 4\nlife_repair = 1\naverage_cost_new = cost_new / life_new\naverage_cost_repair = (cost_repair * life_repair + cost_new) / (life_repair + life_new)\npercent_greater = ((average_cost_new - average_cost_repair) / average_cost_repair) * 100\nanswer = percent_greater", "completions": ["cost_new = 180\ncost_repair = 40\nlife_new = 4\nlife_repair = 1\naverage_cost_new = cost_new / life_new\naverage_cost_repair = (cost_repair * life_repair + cost_new) / (life_repair + life_new)\npercent_greater = ((average_cost_new - average_cost_repair) / average_cost_repair) * 100\nanswer = percent_greater"]}
{"id": 174, "answer": "E", "completion": "longer_piece = Symbol('longer_piece', positive=True)\nshorter_piece = longer_piece - 3\ntotal_length = 20\nsolution = solve_it(longer_piece + shorter_piece - total_length, longer_piece)\nanswer = solution[longer_piece]", "completions": ["longer_piece = Symbol('longer_piece', positive=True)\nshorter_piece = longer_piece - 3\ntotal_length = 20\nsolution = solve_it(longer_piece + shorter_piece - total_length, longer_piece)\nanswer = solution[longer_piece]"]}
{"id": 175, "answer": "B", "completion": "principal = 5000\ninterest_rate = 0.12\ntime = 1\ncompounding_periods = 2\naccrued_interest = principal * ((1 + interest_rate/compounding_periods)**(compounding_periods*time)) - principal\nanswer = round(accrued_interest, 2)", "completions": ["principal = 5000\ninterest_rate = 0.12\ntime = 1\ncompounding_periods = 2\naccrued_interest = principal * ((1 + interest_rate/compounding_periods)**(compounding_periods*time)) - principal\nanswer = round(accrued_interest, 2)"]}
{"id": 176, "answer": "A (as it is the only option that starts with 9 2 0", "completion": "From the second row, we can see that B x A = R and E x A = E. Since A x A = D, we can conclude that A = 0 or 1. \n\nIf A = 0, then B x 0 = R, which is not possible since R cannot be 0. Therefore, A = 1. \n\nFrom the second row, we can now see that B x 1 = R and E x 1 = E, which means R and E cannot be 0. Therefore, M x 1 must be greater than 10, which means M must be 9. \n\nNow we can fill in the rest of the table: \n\nM A D\nB E  ->  R A E\n-------------\nA M I D\n\nFrom the first row, we can see that B x D = D, which means B = 1. \n\nFrom the third row, we can see that I x D ends in D, which means I is odd. The only odd digit left is 7, so I = 7. \n\nFrom the second row, we can see that E x A = E, which means E = 2 or 0. But we already know that E cannot be 0, so E = 2. \n\nFrom the third row, we can see that M x D ends in D, which means M x D = 9 or 8. But we already know that M = 9, so D = 2. \n\nNow we have: \n\n9 1 2\n1 2  ->  7 1 2\n-------------\n1 9 7 2\n\nTherefore, the answer is E) 9 2 2 2.", "completions": ["From the second row, we can see that B x A = R and E x A = E. Since A x A = D, we can conclude that A = 0 or 1. \n\nIf A = 0, then B x 0 = R, which is not possible since R cannot be 0. Therefore, A = 1. \n\nFrom the second row, we can now see that B x 1 = R and E x 1 = E, which means R and E cannot be 0. Therefore, M x 1 must be greater than 10, which means M must be 9. \n\nNow we can fill in the rest of the table: \n\nM A D\nB E  ->  R A E\n-------------\nA M I D\n\nFrom the first row, we can see that B x D = D, which means B = 1. \n\nFrom the third row, we can see that I x D ends in D, which means I is odd. The only odd digit left is 7, so I = 7. \n\nFrom the second row, we can see that E x A = E, which means E = 2 or 0. But we already know that E cannot be 0, so E = 2. \n\nFrom the third row, we can see that M x D ends in D, which means M x D = 9 or 8. But we already know that M = 9, so D = 2. \n\nNow we have: \n\n9 1 2\n1 2  ->  7 1 2\n-------------\n1 9 7 2\n\nTherefore, the answer is E) 9 2 2 2."]}
{"id": 177, "answer": "D", "completion": "ajay_age_10_years_back = Symbol('ajay_age_10_years_back', positive=True)\nsachin_age_10_years_back = 2 * ajay_age_10_years_back\nsachin_age_in_10_years = 40\najay_age_in_10_years = ajay_age_10_years_back + 10\nsachin_age_today = sachin_age_in_10_years - 10\najay_age_today = ajay_age_in_10_years - 10\nsolution = solve_it(sachin_age_today - 2 * ajay_age_today, ajay_age_10_years_back)\nanswer = ajay_age_today", "completions": ["ajay_age_10_years_back = Symbol('ajay_age_10_years_back', positive=True)\nsachin_age_10_years_back = 2 * ajay_age_10_years_back\nsachin_age_in_10_years = 40\najay_age_in_10_years = ajay_age_10_years_back + 10\nsachin_age_today = sachin_age_in_10_years - 10\najay_age_today = ajay_age_in_10_years - 10\nsolution = solve_it(sachin_age_today - 2 * ajay_age_today, ajay_age_10_years_back)\nanswer = ajay_age_today"]}
{"id": 178, "answer": "C", "completion": "perimeter = 340\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\nboundary_width = 1\ntotal_area = (length + 2 * boundary_width) * (width + 2 * boundary_width) - length * width\ncost_per_sq_meter = 10\ntotal_cost = total_area * cost_per_sq_meter\nsolution = solve_it(2 * length + 2 * width - perimeter, length)\nlength_value = solution[length]\nwidth_value = (perimeter - 2 * length_value) / 2\ntotal_cost_value = total_cost.subs([(length, length_value), (width, width_value)])\nanswer = simplify(total_cost_value)", "completions": ["perimeter = 340\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\nboundary_width = 1\ntotal_area = (length + 2 * boundary_width) * (width + 2 * boundary_width) - length * width\ncost_per_sq_meter = 10\ntotal_cost = total_area * cost_per_sq_meter\nsolution = solve_it(2 * length + 2 * width - perimeter, length)\nlength_value = solution[length]\nwidth_value = (perimeter - 2 * length_value) / 2\ntotal_cost_value = total_cost.subs([(length, length_value), (width, width_value)])\nanswer = simplify(total_cost_value)"]}
{"id": 179, "answer": "B", "completion": "novels_percentage = 34\nbiographies_percentage = (100 - novels_percentage) / 3\nnovels_revenue = novels_percentage / 100\nbiographies_revenue = biographies_percentage / 100\nanswer = novels_revenue / biographies_revenue", "completions": ["novels_percentage = 34\nbiographies_percentage = (100 - novels_percentage) / 3\nnovels_revenue = novels_percentage / 100\nbiographies_revenue = biographies_percentage / 100\nanswer = novels_revenue / biographies_revenue"]}
{"id": 180, "answer": "D", "completion": "percent_bypassed = 0.05 / 100\nnum_bypassed = 8\ntotal_flowers = num_bypassed / percent_bypassed\nanswer = total_flowers", "completions": ["percent_bypassed = 0.05 / 100\nnum_bypassed = 8\ntotal_flowers = num_bypassed / percent_bypassed\nanswer = total_flowers"]}
{"id": 181, "answer": "E", "completion": "Fernando has 3 options for lunches and 2 options for dinners during the weekdays (since he always goes home for dinner on Friday). Therefore, the total number of options for his meals is:\n\n3C1 * 2C2 (choose 1 lunch from 3 and 2 dinners from 2) + 3C2 * 2C1 (choose 2 lunches from 3 and 1 dinner from 2) + 3C3 * 2C0 (choose 3 lunches from 3 and 0 dinners from 2)\n\nSimplifying this expression, we get:\n\n3 + 6 + 1 = 10\n\nTherefore, Fernando has 10 options to allocate his meals. Answer option: ['E)4C3*4C3']", "completions": ["Fernando has 3 options for lunches and 2 options for dinners during the weekdays (since he always goes home for dinner on Friday). Therefore, the total number of options for his meals is:\n\n3C1 * 2C2 (choose 1 lunch from 3 and 2 dinners from 2) + 3C2 * 2C1 (choose 2 lunches from 3 and 1 dinner from 2) + 3C3 * 2C0 (choose 3 lunches from 3 and 0 dinners from 2)\n\nSimplifying this expression, we get:\n\n3 + 6 + 1 = 10\n\nTherefore, Fernando has 10 options to allocate his meals. Answer option: ['E)4C3*4C3']"]}
{"id": 182, "answer": "E", "completion": "numerator = (a ** 2) - (b ** 2)\ndenominator = (a + b) ** 2\nexpression = numerator / denominator\nsolution = simplify(expression - ((a - b) ** 2))\nanswer = solution.factor()  # answer is (a + b)(a - b)", "completions": ["numerator = (a ** 2) - (b ** 2)\ndenominator = (a + b) ** 2\nexpression = numerator / denominator\nsolution = simplify(expression - ((a - b) ** 2))\nanswer = solution.factor()  # answer is (a + b)(a - b)"]}
{"id": 183, "answer": "D", "completion": "number = Symbol('number')\nsolution = solve_it(number - 36 - (86 - number), number)\nanswer = solution[number]", "completions": ["number = Symbol('number')\nsolution = solve_it(number - 36 - (86 - number), number)\nanswer = solution[number]"]}
{"id": 184, "answer": "D", "completion": "pallets_per_crate = Symbol('pallets_per_crate', positive=True)\nphones_per_pallet = 1250\ncrates = 4\ntotal_phones = crates * pallets_per_crate * phones_per_pallet\nanswer = simplify(total_phones)", "completions": ["pallets_per_crate = Symbol('pallets_per_crate', positive=True)\nphones_per_pallet = 1250\ncrates = 4\ntotal_phones = crates * pallets_per_crate * phones_per_pallet\nanswer = simplify(total_phones)"]}
{"id": 185, "answer": "D", "completion": "time_a = 40 / 60\ntime_b = 45 / 60\nefficiency_a = 1 / time_a\nefficiency_b = 1 / time_b\ntotal_efficiency = efficiency_a + efficiency_b\ntotal_time = 1 / total_efficiency * 60\nanswer = total_time / 60", "completions": ["time_a = 40 / 60\ntime_b = 45 / 60\nefficiency_a = 1 / time_a\nefficiency_b = 1 / time_b\ntotal_efficiency = efficiency_a + efficiency_b\ntotal_time = 1 / total_efficiency * 60\nanswer = total_time / 60"]}
{"id": 186, "answer": "C", "completion": "distance = 1\nspeed = 120\ntime = distance / (speed / 60)\nanswer = time + 3", "completions": ["distance = 1\nspeed = 120\ntime = distance / (speed / 60)\nanswer = time + 3"]}
{"id": 187, "answer": "E", "completion": "invoice_amount = 20000\ndiscount_rate = 4 / 100\ndiscount_amount = invoice_amount * discount_rate\nnet_amount = invoice_amount - discount_amount\ninterest_rate = Symbol('interest_rate', positive=True)\ndays_to_pay = Symbol('days_to_pay', positive=True)\nborrowed_amount = net_amount * (1 - days_to_pay / 100)\ninterest = borrowed_amount * interest_rate * days_to_pay / 36500\ntotal_amount_to_repay = borrowed_amount + interest\nsolution = solve_it(total_amount_to_repay - net_amount, interest_rate)\nanswer = round(solution[interest_rate], 2)", "completions": ["invoice_amount = 20000\ndiscount_rate = 4 / 100\ndiscount_amount = invoice_amount * discount_rate\nnet_amount = invoice_amount - discount_amount\ninterest_rate = Symbol('interest_rate', positive=True)\ndays_to_pay = Symbol('days_to_pay', positive=True)\nborrowed_amount = net_amount * (1 - days_to_pay / 100)\ninterest = borrowed_amount * interest_rate * days_to_pay / 36500\ntotal_amount_to_repay = borrowed_amount + interest\nsolution = solve_it(total_amount_to_repay - net_amount, interest_rate)\nanswer = round(solution[interest_rate], 2)"]}
{"id": 188, "answer": "D", "completion": "answer = binom(10, 5) / 2  # divide by 2 since the order of the groups doesn't matter", "completions": ["answer = binom(10, 5) / 2  # divide by 2 since the order of the groups doesn't matter"]}
{"id": 189, "answer": "B", "completion": "rice_ratio = 2\ncorn_ratio = 5\nrice_amount = 3\ncorn_amount = (corn_ratio / rice_ratio) * rice_amount\nanswer = corn_amount", "completions": ["rice_ratio = 2\ncorn_ratio = 5\nrice_amount = 3\ncorn_amount = (corn_ratio / rice_ratio) * rice_amount\nanswer = corn_amount"]}
{"id": 190, "answer": "D", "completion": "soda_cost = Symbol('soda_cost', positive=True)\nenergy_bar_cost = Symbol('energy_bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * energy_bar_cost - 150, 2 * soda_cost + 3 * energy_bar_cost - 300], [soda_cost, energy_bar_cost])\ncost_of_6_sodas_and_7_bars = 6 * solution[soda_cost] + 7 * solution[energy_bar_cost]\nanswer = simplify(cost_of_6_sodas_and_7_bars)", "completions": ["soda_cost = Symbol('soda_cost', positive=True)\nenergy_bar_cost = Symbol('energy_bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * energy_bar_cost - 150, 2 * soda_cost + 3 * energy_bar_cost - 300], [soda_cost, energy_bar_cost])\ncost_of_6_sodas_and_7_bars = 6 * solution[soda_cost] + 7 * solution[energy_bar_cost]\nanswer = simplify(cost_of_6_sodas_and_7_bars)"]}
{"id": 191, "answer": "D", "completion": "manufactured_cost = Symbol('manufactured_cost', positive=True)\nnum_pens = 7200\nselling_price = 10\ndefective_percentage = 0.1\nprofit_percentage = 0.25\nnum_good_pens = (1 - defective_percentage) * num_pens\ntotal_revenue = num_pens * selling_price\ntotal_profit = total_revenue * profit_percentage\ntotal_cost = total_revenue - total_profit\nmanufactured_cost_per_pen = total_cost / num_good_pens\nsolution = solve_it(manufactured_cost_per_pen - manufactured_cost, manufactured_cost)\nanswer = solution[manufactured_cost]", "completions": ["manufactured_cost = Symbol('manufactured_cost', positive=True)\nnum_pens = 7200\nselling_price = 10\ndefective_percentage = 0.1\nprofit_percentage = 0.25\nnum_good_pens = (1 - defective_percentage) * num_pens\ntotal_revenue = num_pens * selling_price\ntotal_profit = total_revenue * profit_percentage\ntotal_cost = total_revenue - total_profit\nmanufactured_cost_per_pen = total_cost / num_good_pens\nsolution = solve_it(manufactured_cost_per_pen - manufactured_cost, manufactured_cost)\nanswer = solution[manufactured_cost]"]}
{"id": 192, "answer": "B", "completion": "tens_place = Symbol('tens_place')\nunits_place = 2 * tens_place\nnumber = 10 * tens_place + units_place\nequation = number - (tens_place + units_place) - 18\nsolution = solve_it(equation, tens_place)\nnumber = int(10 * solution[tens_place] + 2 * solution[tens_place])\nanswer = number", "completions": ["tens_place = Symbol('tens_place')\nunits_place = 2 * tens_place\nnumber = 10 * tens_place + units_place\nequation = number - (tens_place + units_place) - 18\nsolution = solve_it(equation, tens_place)\nnumber = int(10 * solution[tens_place] + 2 * solution[tens_place])\nanswer = number"]}
{"id": 193, "answer": "E", "completion": "We can try plugging in some values for x and y to see if any of the answer options hold true. For example, let's try x = 1.5 and y = 2.5:\n\nL(x,y) = [1.5] + [2.5] + [4] = 1 + 2 + 4 = 7\nR(x,y) = [3] + [5] = 6\n\nSince L(x,y) is not equal to R(x,y), option B is not correct. Let's try another set of values, x = 2.7 and y = 3.8:\n\nL(x,y) = [2.7] + [3.8] + [6.5] = 2 + 3 + 6 = 11\nR(x,y) = [5.4] + [7.6] = 12\n\nSince L(x,y) is less than R(x,y), option D is also not correct. We can continue trying different values, but we will eventually find that it is impossible to find any two positive real numbers x and y for which L(x,y) = R(x,y), since L(x,y) will always be an integer and R(x,y) will always be a multiple of 2. Therefore, the answer is A) L(x,y) = R(x,y).", "completions": ["We can try plugging in some values for x and y to see if any of the answer options hold true. For example, let's try x = 1.5 and y = 2.5:\n\nL(x,y) = [1.5] + [2.5] + [4] = 1 + 2 + 4 = 7\nR(x,y) = [3] + [5] = 6\n\nSince L(x,y) is not equal to R(x,y), option B is not correct. Let's try another set of values, x = 2.7 and y = 3.8:\n\nL(x,y) = [2.7] + [3.8] + [6.5] = 2 + 3 + 6 = 11\nR(x,y) = [5.4] + [7.6] = 12\n\nSince L(x,y) is less than R(x,y), option D is also not correct. We can continue trying different values, but we will eventually find that it is impossible to find any two positive real numbers x and y for which L(x,y) = R(x,y), since L(x,y) will always be an integer and R(x,y) will always be a multiple of 2. Therefore, the answer is A) L(x,y) = R(x,y)."]}
{"id": 194, "answer": "E", "completion": "time_lcm = lcm(36, 40, 48)\nanswer = time_lcm / 60", "completions": ["time_lcm = lcm(36, 40, 48)\nanswer = time_lcm / 60"]}
{"id": 195, "answer": "A", "completion": "pole_height = 14\npole_shadow = 10\ntree_shadow = 15\ntree_height = (pole_height / pole_shadow) * tree_shadow\nanswer = tree_height", "completions": ["pole_height = 14\npole_shadow = 10\ntree_shadow = 15\ntree_height = (pole_height / pole_shadow) * tree_shadow\nanswer = tree_height"]}
{"id": 196, "answer": "A (based on the pattern of increasing by multiples of 9", "completion": "There is not enough information to determine the cost of a mango.", "completions": ["There is not enough information to determine the cost of a mango."]}
{"id": 197, "answer": "A", "completion": "base = b - a\nheight = y\narea = (base * height) / 2\nanswer = simplify(area)", "completions": ["base = b - a\nheight = y\narea = (base * height) / 2\nanswer = simplify(area)"]}
{"id": 198, "answer": "C", "completion": "original_speed = 60\ndistance = original_speed * 20\nnew_time = 10\nnew_speed = distance / new_time\nspeed_gain = new_speed - original_speed\nanswer = speed_gain", "completions": ["original_speed = 60\ndistance = original_speed * 20\nnew_time = 10\nnew_speed = distance / new_time\nspeed_gain = new_speed - original_speed\nanswer = speed_gain"]}
{"id": 199, "answer": "D", "completion": "alan_prob = 1/5\nroger_prob = 2/3\npeter_prob = 5/6\ncheating_prob = roger_prob\nnon_cheating_prob = 1 - cheating_prob\nanswer_prob = alan_prob * non_cheating_prob + peter_prob * non_cheating_prob + roger_prob * cheating_prob\nanswer = simplify(answer_prob)", "completions": ["alan_prob = 1/5\nroger_prob = 2/3\npeter_prob = 5/6\ncheating_prob = roger_prob\nnon_cheating_prob = 1 - cheating_prob\nanswer_prob = alan_prob * non_cheating_prob + peter_prob * non_cheating_prob + roger_prob * cheating_prob\nanswer = simplify(answer_prob)"]}
{"id": 200, "answer": "B", "completion": "interest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nanswer = solution[interest_rate]", "completions": ["interest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nanswer = solution[interest_rate]"]}
{"id": 201, "answer": "D", "completion": "Let's denote the number of files infected only by a virus as V, the number of files infected only by a worm as W, and the number of files infected by both as B. We know that:\n\nV + W + B = 250 (since all 250 files are infected)\nW = 2.5B (since the number of files infected only by a worm is 2.5 times the number of files infected by both)\n\nWe also know that 50% of the files were not infected by a virus, which means that the number of files infected by a virus is 50% of 250, or 125. Therefore:\n\nV + B = 125\n\nWe can substitute the second equation into the first equation to eliminate W:\n\nV + 2.5B + B = 250\nV + 3.5B = 250\n\nAnd we can substitute the third equation into this equation to eliminate V:\n\n125 + 3.5B = 250\nB = 50\n\nSo there are 50 files infected by both a virus and a worm. We can use the second equation to find that there are 2.5 * 50 = 125 files infected only by a worm. And we know that 125 + 50 + V = 250, so V = 75.\n\nFinally, we want to find the number of files that were NOT infected by a worm. This is equal to the number of files that were either not infected at all, or were only infected by a virus. We know that 125 files were infected only by a worm, so there are 250 - 125 = 125 files that were either not infected at all, or were infected by both a virus and a worm. And we know that V = 75, so there are 125 - 75 = 50 files that were NOT infected by a worm. Therefore, the answer is A) 50.", "completions": ["Let's denote the number of files infected only by a virus as V, the number of files infected only by a worm as W, and the number of files infected by both as B. We know that:\n\nV + W + B = 250 (since all 250 files are infected)\nW = 2.5B (since the number of files infected only by a worm is 2.5 times the number of files infected by both)\n\nWe also know that 50% of the files were not infected by a virus, which means that the number of files infected by a virus is 50% of 250, or 125. Therefore:\n\nV + B = 125\n\nWe can substitute the second equation into the first equation to eliminate W:\n\nV + 2.5B + B = 250\nV + 3.5B = 250\n\nAnd we can substitute the third equation into this equation to eliminate V:\n\n125 + 3.5B = 250\nB = 50\n\nSo there are 50 files infected by both a virus and a worm. We can use the second equation to find that there are 2.5 * 50 = 125 files infected only by a worm. And we know that 125 + 50 + V = 250, so V = 75.\n\nFinally, we want to find the number of files that were NOT infected by a worm. This is equal to the number of files that were either not infected at all, or were only infected by a virus. We know that 125 files were infected only by a worm, so there are 250 - 125 = 125 files that were either not infected at all, or were infected by both a virus and a worm. And we know that V = 75, so there are 125 - 75 = 50 files that were NOT infected by a worm. Therefore, the answer is A) 50."]}
{"id": 202, "answer": "B", "completion": "mohan_age = 26 - 23\nsohan_age = 26 - 24\ntotal_amount = 5100\ninterest_rate = 4 / 100\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = total_amount - mohan_share\nmohan_amount = mohan_share * (1 + interest_rate) ** mohan_age\nsohan_amount = sohan_share * (1 + interest_rate) ** sohan_age\nsolution = solve_it(mohan_amount - sohan_amount, mohan_share)\nanswer = solution[mohan_share]", "completions": ["mohan_age = 26 - 23\nsohan_age = 26 - 24\ntotal_amount = 5100\ninterest_rate = 4 / 100\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = total_amount - mohan_share\nmohan_amount = mohan_share * (1 + interest_rate) ** mohan_age\nsohan_amount = sohan_share * (1 + interest_rate) ** sohan_age\nsolution = solve_it(mohan_amount - sohan_amount, mohan_share)\nanswer = solution[mohan_share]"]}
{"id": 203, "answer": "C", "completion": "percentage = 0.6 * 0.3\ngrams = 1400 * percentage\nanswer = grams", "completions": ["percentage = 0.6 * 0.3\ngrams = 1400 * percentage\nanswer = grams"]}
{"id": 204, "answer": "C", "completion": "rate = Symbol('rate', positive=True)\ntime = Symbol('time', positive=True)\namount = rate * time\ny = Symbol('y', positive=True)\nsolution = solve_it(amount - y, time)\ntime_to_pass_y_gallons = solution[time]\nsolution = simplify(time_to_pass_y_gallons / 60)\nanswer = solution", "completions": ["rate = Symbol('rate', positive=True)\ntime = Symbol('time', positive=True)\namount = rate * time\ny = Symbol('y', positive=True)\nsolution = solve_it(amount - y, time)\ntime_to_pass_y_gallons = solution[time]\nsolution = simplify(time_to_pass_y_gallons / 60)\nanswer = solution"]}
{"id": 205, "answer": "A", "completion": "volume_of_aluminum = (np.pi * (15/2)**2 - np.pi * (13/2)**2) * 2\nvolume_of_silver = volume_of_aluminum\ntotal_volume = volume_of_aluminum + volume_of_silver\ntotal_weight = 30\nweight_of_aluminum = total_weight * volume_of_aluminum / total_volume\nweight_of_silver = 2 * weight_of_aluminum\ndensity_of_aluminum = weight_of_aluminum / (np.pi * (15/2)**2 * 2)\ndensity_of_silver = weight_of_silver / (np.pi * (15/2)**2 * 2)\nvolume_of_new_coin = np.pi * (15/2)**2 * 1\nweight_of_new_coin = volume_of_new_coin * density_of_aluminum\nanswer = weight_of_new_coin", "completions": ["volume_of_aluminum = (np.pi * (15/2)**2 - np.pi * (13/2)**2) * 2\nvolume_of_silver = volume_of_aluminum\ntotal_volume = volume_of_aluminum + volume_of_silver\ntotal_weight = 30\nweight_of_aluminum = total_weight * volume_of_aluminum / total_volume\nweight_of_silver = 2 * weight_of_aluminum\ndensity_of_aluminum = weight_of_aluminum / (np.pi * (15/2)**2 * 2)\ndensity_of_silver = weight_of_silver / (np.pi * (15/2)**2 * 2)\nvolume_of_new_coin = np.pi * (15/2)**2 * 1\nweight_of_new_coin = volume_of_new_coin * density_of_aluminum\nanswer = weight_of_new_coin"]}
{"id": 206, "answer": "D", "completion": "number = Symbol('number')\nequation = Rational(2, 3) * number - 10 - (number / 3 - 40)\nsolution = solve_it(equation, number)\nanswer = solution[number]", "completions": ["number = Symbol('number')\nequation = Rational(2, 3) * number - 10 - (number / 3 - 40)\nsolution = solve_it(equation, number)\nanswer = solution[number]"]}
{"id": 207, "answer": "D", "completion": "discriminant = Symbol('discriminant')\na = 1\nb = -5\nc = Symbol('c')\nsolution = solve_it(b ** 2 - 4 * a * c - discriminant, c)\nlargest_k = max([solution[0], solution[1]])\nanswer = int(largest_k)", "completions": ["discriminant = Symbol('discriminant')\na = 1\nb = -5\nc = Symbol('c')\nsolution = solve_it(b ** 2 - 4 * a * c - discriminant, c)\nlargest_k = max([solution[0], solution[1]])\nanswer = int(largest_k)"]}
{"id": 208, "answer": "E", "completion": "answer = 960", "completions": ["answer = 960"]}
{"id": 209, "answer": "C", "completion": "rest_time = 10 / 60\ndistance = 100\ntime_without_rest = distance / 10\nnum_rests = distance // 15\ntotal_rest_time = num_rests * rest_time\ntotal_time = time_without_rest + total_rest_time\nanswer = total_time", "completions": ["rest_time = 10 / 60\ndistance = 100\ntime_without_rest = distance / 10\nnum_rests = distance // 15\ntotal_rest_time = num_rests * rest_time\ntotal_time = time_without_rest + total_rest_time\nanswer = total_time"]}
{"id": 210, "answer": "E", "completion": "time_by_train = Symbol('time_by_train', positive=True)\ntime_by_car = Symbol('time_by_car', positive=True)\ntotal_time_by_train = time_by_train + time_by_car\ntotal_time_by_car = 2 * time_by_car\nsolution = solve_it([total_time_by_train - 17, total_time_by_train - total_time_by_car - 4], [time_by_train, time_by_car])\nanswer = total_time_by_car.subs(solution)", "completions": ["time_by_train = Symbol('time_by_train', positive=True)\ntime_by_car = Symbol('time_by_car', positive=True)\ntotal_time_by_train = time_by_train + time_by_car\ntotal_time_by_car = 2 * time_by_car\nsolution = solve_it([total_time_by_train - 17, total_time_by_train - total_time_by_car - 4], [time_by_train, time_by_car])\nanswer = total_time_by_car.subs(solution)"]}
{"id": 211, "answer": "C", "completion": "Let's assume that the original amount of dog food in the bowl was 100 units. At 9:00 am, the dog would have eaten 1/3 of the remaining 2/3 of the food, which is (1/3)*(2/3)*100 = 20 units. So, at 9:00 am, there would be 80 units of food left in the bowl. Similarly, at 10:00 am, the dog would have eaten 1/3 of the remaining 2/3 of the food, which is (1/3)*(2/3)*80 = 16 units. So, at 10:00 am, there would be 64 units of food left in the bowl. Similarly, at 11:00 am, there would be 42.67 units of food left in the bowl. Finally, at 12:00 pm, there would be 28.44 units of food left in the bowl, which is approximately 28.44% of the original amount of food. Therefore, the answer is option C) 30%.", "completions": ["Let's assume that the original amount of dog food in the bowl was 100 units. At 9:00 am, the dog would have eaten 1/3 of the remaining 2/3 of the food, which is (1/3)*(2/3)*100 = 20 units. So, at 9:00 am, there would be 80 units of food left in the bowl. Similarly, at 10:00 am, the dog would have eaten 1/3 of the remaining 2/3 of the food, which is (1/3)*(2/3)*80 = 16 units. So, at 10:00 am, there would be 64 units of food left in the bowl. Similarly, at 11:00 am, there would be 42.67 units of food left in the bowl. Finally, at 12:00 pm, there would be 28.44 units of food left in the bowl, which is approximately 28.44% of the original amount of food. Therefore, the answer is option C) 30%."]}
{"id": 212, "answer": "A", "completion": "total_surveyed = Symbol('total_surveyed', integer=True, positive=True)\nnum_women = 0.6 * total_surveyed\nnum_men = total_surveyed - num_women\nnum_men_preferred_red = 0.25 * num_men\nnum_men_preferred_green = num_men - num_men_preferred_red\nequation = num_men_preferred_green - 10\nsolution = solve(equation, total_surveyed)\nanswer = int(solution[0])", "completions": ["total_surveyed = Symbol('total_surveyed', integer=True, positive=True)\nnum_women = 0.6 * total_surveyed\nnum_men = total_surveyed - num_women\nnum_men_preferred_red = 0.25 * num_men\nnum_men_preferred_green = num_men - num_men_preferred_red\nequation = num_men_preferred_green - 10\nsolution = solve(equation, total_surveyed)\nanswer = int(solution[0])"]}
{"id": 213, "answer": "B", "completion": "# This is a classic example of a Fibonacci sequence\n# The number of ways to reach the nth step is equal to the sum of the number of ways to reach the (n-1)th and (n-2)th step\n# We can use recursion to solve this problem\ndef num_ways_to_reach_step(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return num_ways_to_reach_step(n-1) + num_ways_to_reach_step(n-2)\n\nanswer = num_ways_to_reach_step(10)", "completions": ["# This is a classic example of a Fibonacci sequence\n# The number of ways to reach the nth step is equal to the sum of the number of ways to reach the (n-1)th and (n-2)th step\n# We can use recursion to solve this problem\ndef num_ways_to_reach_step(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return num_ways_to_reach_step(n-1) + num_ways_to_reach_step(n-2)\n\nanswer = num_ways_to_reach_step(10)"]}
{"id": 214, "answer": "C", "completion": "initial_orange_juice = 0.4\ninitial_water = 0.6\nfinal_orange_juice = 0.6\ntotal_gallons = 1\nadditional_gallons = Symbol('additional_gallons', positive=True)\ntotal_orange_juice = initial_orange_juice * total_gallons + final_orange_juice * additional_gallons\ntotal_water = initial_water * total_gallons\nfinal_percentage = total_orange_juice / (total_orange_juice + total_water)\nsolution = solve_it(final_percentage - 0.6, additional_gallons)\nanswer = solution[additional_gallons]", "completions": ["initial_orange_juice = 0.4\ninitial_water = 0.6\nfinal_orange_juice = 0.6\ntotal_gallons = 1\nadditional_gallons = Symbol('additional_gallons', positive=True)\ntotal_orange_juice = initial_orange_juice * total_gallons + final_orange_juice * additional_gallons\ntotal_water = initial_water * total_gallons\nfinal_percentage = total_orange_juice / (total_orange_juice + total_water)\nsolution = solve_it(final_percentage - 0.6, additional_gallons)\nanswer = solution[additional_gallons]"]}
{"id": 215, "answer": "D", "completion": "result = 9**3 - 7\nanswer = result % 10", "completions": ["result = 9**3 - 7\nanswer = result % 10"]}
{"id": 216, "answer": "A", "completion": "total_horses = 5\nwinning_horses = 1\nselected_horses = 2\nprobability_of_selecting_winning_horse = winning_horses / total_horses\nanswer = probability_of_selecting_winning_horse", "completions": ["total_horses = 5\nwinning_horses = 1\nselected_horses = 2\nprobability_of_selecting_winning_horse = winning_horses / total_horses\nanswer = probability_of_selecting_winning_horse"]}
{"id": 217, "answer": "D", "completion": "N = Symbol('N', positive=True)\nremainder1 = 2272 % N\nremainder2 = 875 % N\nsolution = solve_it(remainder1 - remainder2, N)\ndigits_sum = sum(int(digit) for digit in str(solution[N]))\nanswer = digits_sum", "completions": ["N = Symbol('N', positive=True)\nremainder1 = 2272 % N\nremainder2 = 875 % N\nsolution = solve_it(remainder1 - remainder2, N)\ndigits_sum = sum(int(digit) for digit in str(solution[N]))\nanswer = digits_sum"]}
{"id": 218, "answer": "E", "completion": "passing_average = 83\nfailing_average = 55\noverall_average = 76\npassing_percent = (overall_average - failing_average) / (passing_average - failing_average) * 100\nanswer = passing_percent", "completions": ["passing_average = 83\nfailing_average = 55\noverall_average = 76\npassing_percent = (overall_average - failing_average) / (passing_average - failing_average) * 100\nanswer = passing_percent"]}
{"id": 219, "answer": "D", "completion": "total_wages = 15 * 90\nwages_first_7_days = 7 * 87\nwages_last_7_days = 7 * 92\nremaining_wages = total_wages - wages_first_7_days - wages_last_7_days\nwage_on_8th_day = remaining_wages / 1\nanswer = wage_on_8th_day", "completions": ["total_wages = 15 * 90\nwages_first_7_days = 7 * 87\nwages_last_7_days = 7 * 92\nremaining_wages = total_wages - wages_first_7_days - wages_last_7_days\nwage_on_8th_day = remaining_wages / 1\nanswer = wage_on_8th_day"]}
{"id": 220, "answer": "D", "completion": "ratio_before_subtraction = Rational(3, 5)\nratio_after_subtraction = Rational(12, 23)\ndifference = 9\nsmaller_number = Symbol('smaller_number', positive=True)\nlarger_number = ratio_before_subtraction * smaller_number\nnew_smaller_number = smaller_number - difference\nnew_larger_number = larger_number - difference\nsolution = solve_it([new_smaller_number / new_larger_number - ratio_after_subtraction, larger_number - ratio_before_subtraction * smaller_number], [smaller_number, larger_number])\nanswer = solution[smaller_number]", "completions": ["ratio_before_subtraction = Rational(3, 5)\nratio_after_subtraction = Rational(12, 23)\ndifference = 9\nsmaller_number = Symbol('smaller_number', positive=True)\nlarger_number = ratio_before_subtraction * smaller_number\nnew_smaller_number = smaller_number - difference\nnew_larger_number = larger_number - difference\nsolution = solve_it([new_smaller_number / new_larger_number - ratio_after_subtraction, larger_number - ratio_before_subtraction * smaller_number], [smaller_number, larger_number])\nanswer = solution[smaller_number]"]}
{"id": 221, "answer": "A", "completion": "ajay_age = Symbol('ajay_age', positive=True)\nrahul_age = (ajay_age - 6) / 18\ndenis_age = 5 + 2\nsolution = solve_it([rahul_age - denis_age, ajay_age - rahul_age - 6], ajay_age)\nanswer = solution[ajay_age]", "completions": ["ajay_age = Symbol('ajay_age', positive=True)\nrahul_age = (ajay_age - 6) / 18\ndenis_age = 5 + 2\nsolution = solve_it([rahul_age - denis_age, ajay_age - rahul_age - 6], ajay_age)\nanswer = solution[ajay_age]"]}
{"id": 222, "answer": "A (assuming the question is asking for the minimum amount of time it would take to move all the books to every possible combination", "completion": "There are 4 books, so there are 4! = 24 possible arrangements. If Anna moves one book every minute, it will take her 23 minutes to go through all the arrangements, since she only needs to move one book to get from one arrangement to the next. Therefore, the answer is A) 22 minutes.", "completions": ["There are 4 books, so there are 4! = 24 possible arrangements. If Anna moves one book every minute, it will take her 23 minutes to go through all the arrangements, since she only needs to move one book to get from one arrangement to the next. Therefore, the answer is A) 22 minutes."]}
{"id": 223, "answer": "E", "completion": "original_discount = 20 / 100\nadditional_discount = 20 / 100\ntotal_discount = original_discount + (1 - original_discount) * additional_discount\nanswer = total_discount * 100", "completions": ["original_discount = 20 / 100\nadditional_discount = 20 / 100\ntotal_discount = original_discount + (1 - original_discount) * additional_discount\nanswer = total_discount * 100"]}
{"id": 224, "answer": "E", "completion": "width = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\nunpainted_side = 9\npainted_sides_sum = 2 * length + width\narea = length * width\nsolution = solve_it([painted_sides_sum - unpainted_side - width, area - (painted_sides_sum * width / 2)], [width, length])\nanswer = solution[width] * solution[length]", "completions": ["width = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\nunpainted_side = 9\npainted_sides_sum = 2 * length + width\narea = length * width\nsolution = solve_it([painted_sides_sum - unpainted_side - width, area - (painted_sides_sum * width / 2)], [width, length])\nanswer = solution[width] * solution[length]"]}
{"id": 225, "answer": "E (4", "completion": "Peter has to choose 10 people from a group of 10 friends, which means he has to make a combination of 10 people out of 10. The formula for combinations is nCr = n! / (r! * (n-r)!), where n is the total number of items, r is the number of items to choose. In this case, n = 10 and r = 10, so the number of choices Peter has is:\n\n10C10 = 10! / (10! * 0!) = 1\n\nTherefore, Peter has only one choice for forming his team. Answer option B)1 is correct.", "completions": ["Peter has to choose 10 people from a group of 10 friends, which means he has to make a combination of 10 people out of 10. The formula for combinations is nCr = n! / (r! * (n-r)!), where n is the total number of items, r is the number of items to choose. In this case, n = 10 and r = 10, so the number of choices Peter has is:\n\n10C10 = 10! / (10! * 0!) = 1\n\nTherefore, Peter has only one choice for forming his team. Answer option B)1 is correct."]}
{"id": 226, "answer": "A", "completion": "total_weight_before = 10 * average_weight\ntotal_weight_after = total_weight_before + 1.8\nweight_of_replaced_crew = 53\ntotal_weight_after = total_weight_after - weight_of_replaced_crew + new_crew_weight\nnew_crew_weight = Symbol('new_crew_weight', positive=True)\nsolution = solve_it(total_weight_after - 11 * (total_weight_before / 10), new_crew_weight)\nanswer = solution[new_crew_weight]", "completions": ["total_weight_before = 10 * average_weight\ntotal_weight_after = total_weight_before + 1.8\nweight_of_replaced_crew = 53\ntotal_weight_after = total_weight_after - weight_of_replaced_crew + new_crew_weight\nnew_crew_weight = Symbol('new_crew_weight', positive=True)\nsolution = solve_it(total_weight_after - 11 * (total_weight_before / 10), new_crew_weight)\nanswer = solution[new_crew_weight]"]}
{"id": 227, "answer": "A", "completion": "n = Symbol('n', integer=True, positive=True)\nnum_ways = binomial(n, 2) - binomial(n-1, 2)\nsolution = solve_it(num_ways - 45, n)\nanswer = solution[n]", "completions": ["n = Symbol('n', integer=True, positive=True)\nnum_ways = binomial(n, 2) - binomial(n-1, 2)\nsolution = solve_it(num_ways - 45, n)\nanswer = solution[n]"]}
{"id": 228, "answer": "[invalid]", "completion": "If Q has 5 factors, it can be written in the form Q = p^4 or Q = p1*p2, where p and p1,p2 are prime numbers. \n\nI. If Q is the square of a prime number, then it has only 3 factors (1, the prime number, and its square). Therefore, this statement cannot be true. \n\nII. If Q is the fourth power of a prime number, then it has only 5 factors (1, the prime number, its square, its cube, and its fourth power). Therefore, this statement could be true. \n\nIII. If Q is the product of two prime numbers, then it has 4 factors (1, the two primes, and their product). Therefore, this statement cannot be true. \n\nTherefore, the answer is (C) II only.", "completions": ["If Q has 5 factors, it can be written in the form Q = p^4 or Q = p1*p2, where p and p1,p2 are prime numbers. \n\nI. If Q is the square of a prime number, then it has only 3 factors (1, the prime number, and its square). Therefore, this statement cannot be true. \n\nII. If Q is the fourth power of a prime number, then it has only 5 factors (1, the prime number, its square, its cube, and its fourth power). Therefore, this statement could be true. \n\nIII. If Q is the product of two prime numbers, then it has 4 factors (1, the two primes, and their product). Therefore, this statement cannot be true. \n\nTherefore, the answer is (C) II only."]}
{"id": 229, "answer": "A", "completion": "x = Symbol('x')\ny = Symbol('y')\nsolution = solve_it([6*x - y - 24, y - 3*x], [x, y])\nanswer = solution[x]", "completions": ["x = Symbol('x')\ny = Symbol('y')\nsolution = solve_it([6*x - y - 24, y - 3*x], [x, y])\nanswer = solution[x]"]}
{"id": 230, "answer": "A", "completion": "num_rentals = Symbol('num_rentals', integer=True, positive=True)\nwithout_membership_cost = 4 * num_rentals\nwith_membership_cost = 7 + 2 * num_rentals\nsolution = solve_it(with_membership_cost - without_membership_cost, num_rentals)\nanswer = math.ceil(solution[num_rentals])", "completions": ["num_rentals = Symbol('num_rentals', integer=True, positive=True)\nwithout_membership_cost = 4 * num_rentals\nwith_membership_cost = 7 + 2 * num_rentals\nsolution = solve_it(with_membership_cost - without_membership_cost, num_rentals)\nanswer = math.ceil(solution[num_rentals])"]}
{"id": 231, "answer": "C", "completion": "pounds = 7\nounces = 4\ntotal_ounces = pounds * 16 + ounces\nanswer = total_ounces", "completions": ["pounds = 7\nounces = 4\ntotal_ounces = pounds * 16 + ounces\nanswer = total_ounces"]}
{"id": 232, "answer": "A", "completion": "jack_rate = Rational(1, 12)\njill_rate = jack_rate * Rational(5, 100)\nfraction_of_work_done_by_jack = Rational(2, 3)\nfraction_of_work_done_by_jill = 1 - fraction_of_work_done_by_jack\ntotal_work = 1\nwork_done_by_jack = fraction_of_work_done_by_jack * total_work\nwork_done_by_jill = fraction_of_work_done_by_jill * total_work\ntime_taken_by_jill = work_done_by_jill / jill_rate\nanswer = simplify(time_taken_by_jill)", "completions": ["jack_rate = Rational(1, 12)\njill_rate = jack_rate * Rational(5, 100)\nfraction_of_work_done_by_jack = Rational(2, 3)\nfraction_of_work_done_by_jill = 1 - fraction_of_work_done_by_jack\ntotal_work = 1\nwork_done_by_jack = fraction_of_work_done_by_jack * total_work\nwork_done_by_jill = fraction_of_work_done_by_jill * total_work\ntime_taken_by_jill = work_done_by_jill / jill_rate\nanswer = simplify(time_taken_by_jill)"]}
{"id": 233, "answer": "A", "completion": "interest_rate = Symbol('interest_rate', positive=True)\nprincipal = 5000\ntime = 3\ninterest = 300\nsolution = solve_it(principal * interest_rate * time - interest, interest_rate)\nanswer = solution[interest_rate] * 100", "completions": ["interest_rate = Symbol('interest_rate', positive=True)\nprincipal = 5000\ntime = 3\ninterest = 300\nsolution = solve_it(principal * interest_rate * time - interest, interest_rate)\nanswer = solution[interest_rate] * 100"]}
{"id": 234, "answer": "B", "completion": "discount = 20 / 100\nsale_price = 4578\noriginal_price = sale_price / (1 - discount)\nanswer = original_price", "completions": ["discount = 20 / 100\nsale_price = 4578\noriginal_price = sale_price / (1 - discount)\nanswer = original_price"]}
{"id": 235, "answer": "A", "completion": "cost_per_bottle = Symbol('cost_per_bottle', positive=True)\nnum_bottles = Symbol('num_bottles', positive=True)\ntotal_cost = Symbol('total_cost', positive=True)\nsolution = solve_it(27 * cost_per_bottle - total_cost, cost_per_bottle)\ncost_per_bottle_value = solution[cost_per_bottle]\nanswer = simplify(num_bottles * cost_per_bottle_value / 100)  # converting cents to dollars", "completions": ["cost_per_bottle = Symbol('cost_per_bottle', positive=True)\nnum_bottles = Symbol('num_bottles', positive=True)\ntotal_cost = Symbol('total_cost', positive=True)\nsolution = solve_it(27 * cost_per_bottle - total_cost, cost_per_bottle)\ncost_per_bottle_value = solution[cost_per_bottle]\nanswer = simplify(num_bottles * cost_per_bottle_value / 100)  # converting cents to dollars"]}
{"id": 236, "answer": "D", "completion": "candy_bars = [0.5] * 3 + [1] * 4 + [2] * 4\ncombinations = combinations(candy_bars, 3)\ncount = 0\nfor combo in combinations:\n    if sum(combo) > 4:\n        count += 1\nanswer = count", "completions": ["candy_bars = [0.5] * 3 + [1] * 4 + [2] * 4\ncombinations = combinations(candy_bars, 3)\ncount = 0\nfor combo in combinations:\n    if sum(combo) > 4:\n        count += 1\nanswer = count"]}
{"id": 237, "answer": "B", "completion": "total_members = 8\nmin_men = 1\nmin_women = 1\nmax_men = 3\nmax_women = 3\nmen_combinations = sum([comb(total_members - min_women, i) for i in range(min_men, max_men + 1)])\nwomen_combinations = sum([comb(total_members - min_men, i) for i in range(min_women, max_women + 1)])\nanswer = men_combinations * women_combinations", "completions": ["total_members = 8\nmin_men = 1\nmin_women = 1\nmax_men = 3\nmax_women = 3\nmen_combinations = sum([comb(total_members - min_women, i) for i in range(min_men, max_men + 1)])\nwomen_combinations = sum([comb(total_members - min_men, i) for i in range(min_women, max_women + 1)])\nanswer = men_combinations * women_combinations"]}
{"id": 238, "answer": "E", "completion": "num_boys = 100\nnum_girls = (2/5) * (num_boys + 100)\nanswer = num_girls", "completions": ["num_boys = 100\nnum_girls = (2/5) * (num_boys + 100)\nanswer = num_girls"]}
{"id": 239, "answer": "D", "completion": "from sympy import gcd\n\ncount = 0\nfor i in range(1, 1001):\n    if gcd(i, 1000) == 1:\n        count += 1\nanswer = count / 1000", "completions": ["from sympy import gcd\n\ncount = 0\nfor i in range(1, 1001):\n    if gcd(i, 1000) == 1:\n        count += 1\nanswer = count / 1000"]}
{"id": 240, "answer": "B", "completion": "principal = Symbol('principal', positive=True)\ninterest_rate = 0.08\ncompounding_periods = 2\ntime = 1\namount = principal * (1 + interest_rate/compounding_periods)**(compounding_periods*time)\nsolution = solve_it(amount - 54080, principal)\nanswer = solution[principal]", "completions": ["principal = Symbol('principal', positive=True)\ninterest_rate = 0.08\ncompounding_periods = 2\ntime = 1\namount = principal * (1 + interest_rate/compounding_periods)**(compounding_periods*time)\nsolution = solve_it(amount - 54080, principal)\nanswer = solution[principal]"]}
{"id": 241, "answer": "D", "completion": "joe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nfather_age = Symbol('father_age', positive=True)\ntotal_age = joe_age + sister_age + father_age\neq1 = total_age - 100\neq2 = joe_age + (father_age - joe_age) / 2 - sister_age\neq3 = father_age - (father_age - sister_age) * 2\nsolution = solve_it([eq1, eq2, eq3], [joe_age, sister_age, father_age])\nanswer = solution[father_age]", "completions": ["joe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nfather_age = Symbol('father_age', positive=True)\ntotal_age = joe_age + sister_age + father_age\neq1 = total_age - 100\neq2 = joe_age + (father_age - joe_age) / 2 - sister_age\neq3 = father_age - (father_age - sister_age) * 2\nsolution = solve_it([eq1, eq2, eq3], [joe_age, sister_age, father_age])\nanswer = solution[father_age]"]}
{"id": 242, "answer": "A", "completion": "number = Symbol('number', positive=True)\nsolution = solve_it((1/3) * (3/4) * number - 21, number)\nanswer = solution[number]", "completions": ["number = Symbol('number', positive=True)\nsolution = solve_it((1/3) * (3/4) * number - 21, number)\nanswer = solution[number]"]}
{"id": 243, "answer": "D", "completion": "m = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m/100 * 4*y\npercentage = simplify(m / (x/y) * 100)\nanswer = percentage", "completions": ["m = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m/100 * 4*y\npercentage = simplify(m / (x/y) * 100)\nanswer = percentage"]}
{"id": 244, "answer": "C", "completion": "num_fruits = 6\nnum_veggies = 8\nways_to_eat_breakfast = num_fruits\nways_to_eat_dinner = num_veggies\ntotal_ways = ways_to_eat_breakfast * ways_to_eat_dinner\nanswer = total_ways", "completions": ["num_fruits = 6\nnum_veggies = 8\nways_to_eat_breakfast = num_fruits\nways_to_eat_dinner = num_veggies\ntotal_ways = ways_to_eat_breakfast * ways_to_eat_dinner\nanswer = total_ways"]}
{"id": 245, "answer": "C", "completion": "p = 0.9\nq = 0.1\nn = 5\nk = 4\nlikelihood = binom(n, k) * p**k * q**(n-k)\nanswer = round(likelihood * 100, 1)", "completions": ["p = 0.9\nq = 0.1\nn = 5\nk = 4\nlikelihood = binom(n, k) * p**k * q**(n-k)\nanswer = round(likelihood * 100, 1)"]}
{"id": 246, "answer": "B", "completion": "width = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nperimeter = 2 * (width + height - unfenced_side)\nsolution = solve_it([width * height - area, perimeter - x], [width, height])\nfencing_required = 2 * (solution[width] + solution[height] - unfenced_side)\nanswer = fencing_required", "completions": ["width = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nperimeter = 2 * (width + height - unfenced_side)\nsolution = solve_it([width * height - area, perimeter - x], [width, height])\nfencing_required = 2 * (solution[width] + solution[height] - unfenced_side)\nanswer = fencing_required"]}
{"id": 247, "answer": "E", "completion": "vowels = 5\nconsonants = 20\nmiddle_letter_options = vowels\nfirst_and_third_letter_options = consonants - 1 # since they must be different from each other\ntotal_options = middle_letter_options * first_and_third_letter_options * consonants\nanswer = total_options", "completions": ["vowels = 5\nconsonants = 20\nmiddle_letter_options = vowels\nfirst_and_third_letter_options = consonants - 1 # since they must be different from each other\ntotal_options = middle_letter_options * first_and_third_letter_options * consonants\nanswer = total_options"]}
{"id": 248, "answer": "E", "completion": "product = 727 + 728 + 729\nn = Symbol('n', integer=True)\nfirst_num = n\nsecond_num = n + 1\nthird_num = n + 2\nproduct_of_nums = first_num * second_num * third_num\nsolution = solve_it(product_of_nums - product, n)\nsum_of_nums = first_num + second_num + third_num\nanswer = sum_of_nums.subs(n, solution[n])", "completions": ["product = 727 + 728 + 729\nn = Symbol('n', integer=True)\nfirst_num = n\nsecond_num = n + 1\nthird_num = n + 2\nproduct_of_nums = first_num * second_num * third_num\nsolution = solve_it(product_of_nums - product, n)\nsum_of_nums = first_num + second_num + third_num\nanswer = sum_of_nums.subs(n, solution[n])"]}
{"id": 249, "answer": "D", "completion": "length = 8\nwidth = 6\nheight = 2.5\ncapacity = length * width * height\nanswer = capacity * 1000 # converting cubic meters to liters", "completions": ["length = 8\nwidth = 6\nheight = 2.5\ncapacity = length * width * height\nanswer = capacity * 1000 # converting cubic meters to liters"]}
{"id": 250, "answer": "A", "completion": "adults = 4169516\ntotal_population = 5265526\nchildren = total_population - adults\nanswer = children", "completions": ["adults = 4169516\ntotal_population = 5265526\nchildren = total_population - adults\nanswer = children"]}
{"id": 251, "answer": "A", "completion": "distance = Symbol('distance', positive=True)\ntime_driving = 9 / 60\ndriving_speed = 20\ncycling_speed = 6\ntime_cycling = distance / cycling_speed\nsolution = solve_it(distance - driving_speed * time_driving, time_cycling - time_driving)\nanswer = simplify(solution[time_cycling] * 60)", "completions": ["distance = Symbol('distance', positive=True)\ntime_driving = 9 / 60\ndriving_speed = 20\ncycling_speed = 6\ntime_cycling = distance / cycling_speed\nsolution = solve_it(distance - driving_speed * time_driving, time_cycling - time_driving)\nanswer = simplify(solution[time_cycling] * 60)"]}
{"id": 252, "answer": "C", "completion": "p_time = Symbol('p_time', positive=True)\nq_time = Symbol('q_time', positive=True)\np_rate = 1 / (10 * p_time)\nq_rate = 2 / (5 * q_time)\ncombined_rate = p_rate + q_rate\ncombined_time = solve_it(combined_rate - 1, p_time + q_time)[p_time + q_time]\nanswer = combined_time * 60", "completions": ["p_time = Symbol('p_time', positive=True)\nq_time = Symbol('q_time', positive=True)\np_rate = 1 / (10 * p_time)\nq_rate = 2 / (5 * q_time)\ncombined_rate = p_rate + q_rate\ncombined_time = solve_it(combined_rate - 1, p_time + q_time)[p_time + q_time]\nanswer = combined_time * 60"]}
{"id": 253, "answer": "A", "completion": "bag_price = 1.25\nprofit_percentage = 20\nbags_sold = 500\ntotal_revenue = bags_sold * bag_price\nprofit_per_bag = bag_price * profit_percentage / 100\ntotal_profit = profit_per_bag * bags_sold\nanswer = total_profit", "completions": ["bag_price = 1.25\nprofit_percentage = 20\nbags_sold = 500\ntotal_revenue = bags_sold * bag_price\nprofit_per_bag = bag_price * profit_percentage / 100\ntotal_profit = profit_per_bag * bags_sold\nanswer = total_profit"]}
