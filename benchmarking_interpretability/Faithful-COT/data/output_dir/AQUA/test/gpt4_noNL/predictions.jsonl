{"id": 0, "answer": "A", "completion": "angle1 = 45\nangle2 = 60\ntime_to_change_angle = 10 / 60\ncar_speed = Symbol('car_speed', positive=True)\ntower_height = Symbol('tower_height', positive=True)\ndistance1 = tower_height / tan(radians(angle1))\ndistance2 = tower_height / tan(radians(angle2))\ndistance_difference = distance1 - distance2\ntime_to_reach_base = Symbol('time_to_reach_base', positive=True)\nsolution = solve_it([car_speed * time_to_change_angle - distance_difference, car_speed * time_to_reach_base - distance2], [car_speed, time_to_reach_base])\nanswer = solution[time_to_reach_base]", "completions": ["angle1 = 45\nangle2 = 60\ntime_to_change_angle = 10 / 60\ncar_speed = Symbol('car_speed', positive=True)\ntower_height = Symbol('tower_height', positive=True)\ndistance1 = tower_height / tan(radians(angle1))\ndistance2 = tower_height / tan(radians(angle2))\ndistance_difference = distance1 - distance2\ntime_to_reach_base = Symbol('time_to_reach_base', positive=True)\nsolution = solve_it([car_speed * time_to_change_angle - distance_difference, car_speed * time_to_reach_base - distance2], [car_speed, time_to_reach_base])\nanswer = solution[time_to_reach_base]"]}
{"id": 1, "answer": "E", "completion": "original_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 0.22)\nprice_after_coupon = discounted_price - 20\npayment = original_price / 2 + 1.9\nsolution = solve_it(price_after_coupon - payment, original_price)\nanswer = solution[original_price]", "completions": ["original_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 0.22)\nprice_after_coupon = discounted_price - 20\npayment = original_price / 2 + 1.9\nsolution = solve_it(price_after_coupon - payment, original_price)\nanswer = solution[original_price]"]}
{"id": 2, "answer": "A", "completion": "options = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        answer = option\n        break", "completions": ["options = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        answer = option\n        break"]}
{"id": 3, "answer": "A", "completion": "probability_A_increase = 0.56\nprobability_B_increase = 0.74\nprobability_A_not_increase = 1 - probability_A_increase\nprobability_B_not_increase = 1 - probability_B_increase\ngreatest_probability_neither_increase = probability_A_not_increase * probability_B_not_increase\nanswer = round(greatest_probability_neither_increase, 2)", "completions": ["probability_A_increase = 0.56\nprobability_B_increase = 0.74\nprobability_A_not_increase = 1 - probability_A_increase\nprobability_B_not_increase = 1 - probability_B_increase\ngreatest_probability_neither_increase = probability_A_not_increase * probability_B_not_increase\nanswer = round(greatest_probability_neither_increase, 2)"]}
{"id": 4, "answer": "B", "completion": "cost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit_percent = 20\nsolution = solve_it(cost_price * (1 + profit_percent / 100) - selling_price, cost_price)\nanswer = solution[cost_price]", "completions": ["cost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit_percent = 20\nsolution = solve_it(cost_price * (1 + profit_percent / 100) - selling_price, cost_price)\nanswer = solution[cost_price]"]}
{"id": 5, "answer": "D", "completion": "total_marbles = Symbol('total_marbles', positive=True)\nblack_marbles = 20\nwhite_marbles = total_marbles - black_marbles\nsecond_draw_white_marbles = 19\nsecond_draw_black_marbles = 1\nsecond_draw_total_marbles = 20\nprobability_of_black = black_marbles / total_marbles\nsolution = solve_it(probability_of_black - second_draw_black_marbles / second_draw_total_marbles, total_marbles)\nanswer = solution[total_marbles]", "completions": ["total_marbles = Symbol('total_marbles', positive=True)\nblack_marbles = 20\nwhite_marbles = total_marbles - black_marbles\nsecond_draw_white_marbles = 19\nsecond_draw_black_marbles = 1\nsecond_draw_total_marbles = 20\nprobability_of_black = black_marbles / total_marbles\nsolution = solve_it(probability_of_black - second_draw_black_marbles / second_draw_total_marbles, total_marbles)\nanswer = solution[total_marbles]"]}
{"id": 6, "answer": "D", "completion": "num_letters = 26\nnum_numbers = 10\ntotal_bike_numbers = num_letters * (num_letters - 1) * num_numbers * num_numbers\nanswer = total_bike_numbers", "completions": ["num_letters = 26\nnum_numbers = 10\ntotal_bike_numbers = num_letters * (num_letters - 1) * num_numbers * num_numbers\nanswer = total_bike_numbers"]}
{"id": 7, "answer": "C", "completion": "distance = 100 * 10\nquarter_distance = distance / 4\nremaining_distance = distance - quarter_distance\ntime_to_cover_quarter_distance = quarter_distance / 100\ntime_to_cover_remaining_distance = remaining_distance / 75\ntotal_journey_duration = time_to_cover_quarter_distance + time_to_cover_remaining_distance\nanswer = total_journey_duration\nanswer_option = 'C)12.5'", "completions": ["distance = 100 * 10\nquarter_distance = distance / 4\nremaining_distance = distance - quarter_distance\ntime_to_cover_quarter_distance = quarter_distance / 100\ntime_to_cover_remaining_distance = remaining_distance / 75\ntotal_journey_duration = time_to_cover_quarter_distance + time_to_cover_remaining_distance\nanswer = total_journey_duration\nanswer_option = 'C)12.5'"]}
{"id": 8, "answer": "A", "completion": "total_students = 200\nattended_prom = 0.45 * total_students\nattended_debate = 0.35 * total_students\nattended_both = attended_prom + attended_debate - total_students\nattended_neither = total_students - attended_prom - attended_debate + attended_both\nanswer = max(0, attended_neither)", "completions": ["total_students = 200\nattended_prom = 0.45 * total_students\nattended_debate = 0.35 * total_students\nattended_both = attended_prom + attended_debate - total_students\nattended_neither = total_students - attended_prom - attended_debate + attended_both\nanswer = max(0, attended_neither)"]}
{"id": 9, "answer": "D", "completion": "num_sales = Symbol('num_sales', positive=True)\ncommission_rate = 0.1\nsale_amount = 250\ntarget_salary = 1000\ntotal_commission = num_sales * commission_rate * sale_amount\nsolution = solve_it(total_commission - target_salary, num_sales)\nanswer = math.ceil(solution[num_sales])", "completions": ["num_sales = Symbol('num_sales', positive=True)\ncommission_rate = 0.1\nsale_amount = 250\ntarget_salary = 1000\ntotal_commission = num_sales * commission_rate * sale_amount\nsolution = solve_it(total_commission - target_salary, num_sales)\nanswer = math.ceil(solution[num_sales])"]}
{"id": 10, "answer": "B", "completion": "selling_price = Symbol('selling_price', positive=True)\nunits_per_month = 420\nproduction_cost_per_component = 110\nmonths_in_year = 12\nminimum_yearly_profit = 626400\nyearly_revenue = units_per_month * months_in_year * selling_price\nyearly_production_cost = units_per_month * months_in_year * production_cost_per_component\nyearly_profit = yearly_revenue - yearly_production_cost\nsolution = solve_it(yearly_profit - minimum_yearly_profit, selling_price)\nanswer = solution[selling_price]", "completions": ["selling_price = Symbol('selling_price', positive=True)\nunits_per_month = 420\nproduction_cost_per_component = 110\nmonths_in_year = 12\nminimum_yearly_profit = 626400\nyearly_revenue = units_per_month * months_in_year * selling_price\nyearly_production_cost = units_per_month * months_in_year * production_cost_per_component\nyearly_profit = yearly_revenue - yearly_production_cost\nsolution = solve_it(yearly_profit - minimum_yearly_profit, selling_price)\nanswer = solution[selling_price]"]}
{"id": 11, "answer": "A", "completion": "total_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers = 0.1 * total_staplers\nnon_defective_staplers = total_staplers - defective_staplers\nrejected_non_defective_staplers = 0.02 * non_defective_staplers\nsolution = solve_it(rejected_non_defective_staplers - 72, total_staplers)\nanswer = solution[total_staplers]", "completions": ["total_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers = 0.1 * total_staplers\nnon_defective_staplers = total_staplers - defective_staplers\nrejected_non_defective_staplers = 0.02 * non_defective_staplers\nsolution = solve_it(rejected_non_defective_staplers - 72, total_staplers)\nanswer = solution[total_staplers]"]}
{"id": 12, "answer": "C", "completion": "time = Symbol('time', positive=True)\nmachine_A_rate = 1 / 6\nmachine_B_rate = 1 / 9\ntotal_yoyos = 10\nsolution = solve_it(time * (machine_A_rate + machine_B_rate) - total_yoyos, time)\nanswer = solution[time]", "completions": ["time = Symbol('time', positive=True)\nmachine_A_rate = 1 / 6\nmachine_B_rate = 1 / 9\ntotal_yoyos = 10\nsolution = solve_it(time * (machine_A_rate + machine_B_rate) - total_yoyos, time)\nanswer = solution[time]"]}
{"id": 13, "answer": "D", "completion": "answer = 45 + (-30)", "completions": ["answer = 45 + (-30)"]}
{"id": 14, "answer": "C", "completion": "answer = math.factorial(7)", "completions": ["answer = math.factorial(7)"]}
{"id": 15, "answer": "A", "completion": "Since A and B are independent events, the probability of A happening given that B has happened (P(A/B)) is the same as the probability of A happening (P(A)). Therefore, the answer is:\n\nP(A/B) = P(A) = 0.2\n\nAnswer option: A)0.2", "completions": ["Since A and B are independent events, the probability of A happening given that B has happened (P(A/B)) is the same as the probability of A happening (P(A)). Therefore, the answer is:\n\nP(A/B) = P(A) = 0.2\n\nAnswer option: A)0.2"]}
{"id": 16, "answer": "E", "completion": "elevator_speed = Symbol('elevator_speed', positive=True)\ntotal_steps = Symbol('total_steps', positive=True)\n\n# Scenario 1: Walk 20 steps and stop\ntime_to_walk_20_steps = 20 / elevator_speed\ntime_to_reach_bottom_after_20_steps = 10\nremaining_steps_after_20 = total_steps - 20\ntime_to_reach_bottom_for_remaining_steps = remaining_steps_after_20 / elevator_speed\ntotal_time_for_scenario_1 = time_to_walk_20_steps + time_to_reach_bottom_for_remaining_steps\n\n# Scenario 2: Walk 10 steps and stop\ntime_to_walk_10_steps = 10 / elevator_speed\ntime_to_reach_bottom_after_10_steps = 20\nremaining_steps_after_10 = total_steps - 10\ntime_to_reach_bottom_for_remaining_steps = remaining_steps_after_10 / elevator_speed\ntotal_time_for_scenario_2 = time_to_walk_10_steps + time_to_reach_bottom_for_remaining_steps\n\n# Equate the total times for both scenarios\nsolution = solve_it([total_time_for_scenario_1 - time_to_reach_bottom_after_20_steps, total_time_for_scenario_2 - time_to_reach_bottom_after_10_steps], [elevator_speed, total_steps])\nanswer = solution[elevator_speed]", "completions": ["elevator_speed = Symbol('elevator_speed', positive=True)\ntotal_steps = Symbol('total_steps', positive=True)\n\n# Scenario 1: Walk 20 steps and stop\ntime_to_walk_20_steps = 20 / elevator_speed\ntime_to_reach_bottom_after_20_steps = 10\nremaining_steps_after_20 = total_steps - 20\ntime_to_reach_bottom_for_remaining_steps = remaining_steps_after_20 / elevator_speed\ntotal_time_for_scenario_1 = time_to_walk_20_steps + time_to_reach_bottom_for_remaining_steps\n\n# Scenario 2: Walk 10 steps and stop\ntime_to_walk_10_steps = 10 / elevator_speed\ntime_to_reach_bottom_after_10_steps = 20\nremaining_steps_after_10 = total_steps - 10\ntime_to_reach_bottom_for_remaining_steps = remaining_steps_after_10 / elevator_speed\ntotal_time_for_scenario_2 = time_to_walk_10_steps + time_to_reach_bottom_for_remaining_steps\n\n# Equate the total times for both scenarios\nsolution = solve_it([total_time_for_scenario_1 - time_to_reach_bottom_after_20_steps, total_time_for_scenario_2 - time_to_reach_bottom_after_10_steps], [elevator_speed, total_steps])\nanswer = solution[elevator_speed]"]}
{"id": 17, "answer": "D", "completion": "last_year_average = 42\nlast_year_months = 12\nthis_year_average = 20\nthis_year_months = 10\ntotal_months = last_year_months + this_year_months\ntotal_microwaves_sold = (last_year_average * last_year_months) + (this_year_average * this_year_months)\naverage_microwaves_sold = total_microwaves_sold / total_months\nanswer = average_microwaves_sold\n# Answer option: ['A)21', 'B)30', 'C)31', 'D)32', 'E)None of the above']", "completions": ["last_year_average = 42\nlast_year_months = 12\nthis_year_average = 20\nthis_year_months = 10\ntotal_months = last_year_months + this_year_months\ntotal_microwaves_sold = (last_year_average * last_year_months) + (this_year_average * this_year_months)\naverage_microwaves_sold = total_microwaves_sold / total_months\nanswer = average_microwaves_sold\n# Answer option: ['A)21', 'B)30', 'C)31', 'D)32', 'E)None of the above']"]}
{"id": 18, "answer": "A", "completion": "average_without_highest_lowest = Symbol('average_without_highest_lowest')\nhighest_score = Symbol('highest_score')\nlowest_score = Symbol('lowest_score')\nx = (highest_score + lowest_score) / 2\ny = (highest_score + lowest_score + (z - 2) * average_without_highest_lowest) / z\nsolution = solve_it(y - x, average_without_highest_lowest)\nanswer = solution[average_without_highest_lowest]", "completions": ["average_without_highest_lowest = Symbol('average_without_highest_lowest')\nhighest_score = Symbol('highest_score')\nlowest_score = Symbol('lowest_score')\nx = (highest_score + lowest_score) / 2\ny = (highest_score + lowest_score + (z - 2) * average_without_highest_lowest) / z\nsolution = solve_it(y - x, average_without_highest_lowest)\nanswer = solution[average_without_highest_lowest]"]}
{"id": 19, "answer": "C", "completion": "unknown = Symbol('unknown', positive=True)\nequation = (5 + unknown * 19 - 15 - 7) / (13 * 13 - 156) - 6\nsolution = solve_it(equation, unknown)\nanswer = solution[unknown]", "completions": ["unknown = Symbol('unknown', positive=True)\nequation = (5 + unknown * 19 - 15 - 7) / (13 * 13 - 156) - 6\nsolution = solve_it(equation, unknown)\nanswer = solution[unknown]"]}
{"id": 20, "answer": "E", "completion": "selling_price = 100\nprofit_per_bag = selling_price * 0.25\ntotal_profit = 3000\nnum_bags = total_profit / profit_per_bag\nanswer = num_bags", "completions": ["selling_price = 100\nprofit_per_bag = selling_price * 0.25\ntotal_profit = 3000\nnum_bags = total_profit / profit_per_bag\nanswer = num_bags"]}
{"id": 21, "answer": "B", "completion": "toys_by_jacob = Symbol('toys_by_jacob', positive=True)\ntoys_by_alex = 35 - toys_by_jacob\nhours_by_jacob = toys_by_jacob * 9\nhours_by_alex = toys_by_alex * 7\nsolution = solve_it(hours_by_jacob - hours_by_alex, toys_by_jacob)\nanswer = solution[toys_by_jacob]", "completions": ["toys_by_jacob = Symbol('toys_by_jacob', positive=True)\ntoys_by_alex = 35 - toys_by_jacob\nhours_by_jacob = toys_by_jacob * 9\nhours_by_alex = toys_by_alex * 7\nsolution = solve_it(hours_by_jacob - hours_by_alex, toys_by_jacob)\nanswer = solution[toys_by_jacob]"]}
{"id": 22, "answer": "E", "completion": "initial_concentration = 50\nfirst_replacement = 15\nsecond_replacement = 15\nthird_replacement = 10\n\n# After first replacement\nconcentration_after_first = initial_concentration * (1 - first_replacement / 100)\n\n# After second replacement\nconcentration_after_second = concentration_after_first * (1 - second_replacement / 100)\n\n# After third replacement\nfinal_concentration = concentration_after_second * (1 - third_replacement / 100)\n\nanswer = final_concentration", "completions": ["initial_concentration = 50\nfirst_replacement = 15\nsecond_replacement = 15\nthird_replacement = 10\n\n# After first replacement\nconcentration_after_first = initial_concentration * (1 - first_replacement / 100)\n\n# After second replacement\nconcentration_after_second = concentration_after_first * (1 - second_replacement / 100)\n\n# After third replacement\nfinal_concentration = concentration_after_second * (1 - third_replacement / 100)\n\nanswer = final_concentration"]}
{"id": 23, "answer": "A", "completion": "num_students = Symbol('num_students', positive=True, integer=True)\nmath_students = num_students / 16\nbio_students = num_students / 10\nenglish_students = num_students / 8\n\n# Find the minimum number of students\nmin_students = lcm(16, 10, 8) * 10  # 10 is the smallest 4-digit number that is a multiple of lcm(16, 10, 8)\nmax_students = min_students + lcm(16, 10, 8)  # Add lcm(16, 10, 8) to get the next multiple\n\ndifference = max_students - min_students\nanswer = difference\nanswer_option = 'A)8880'", "completions": ["num_students = Symbol('num_students', positive=True, integer=True)\nmath_students = num_students / 16\nbio_students = num_students / 10\nenglish_students = num_students / 8\n\n# Find the minimum number of students\nmin_students = lcm(16, 10, 8) * 10  # 10 is the smallest 4-digit number that is a multiple of lcm(16, 10, 8)\nmax_students = min_students + lcm(16, 10, 8)  # Add lcm(16, 10, 8) to get the next multiple\n\ndifference = max_students - min_students\nanswer = difference\nanswer_option = 'A)8880'"]}
{"id": 24, "answer": "D", "completion": "normal_speed = 15\nwindy_speed = normal_speed - 4\ntime = 21 / 60\ndistance = windy_speed * time\nanswer = round(distance, 2)", "completions": ["normal_speed = 15\nwindy_speed = normal_speed - 4\ntime = 21 / 60\ndistance = windy_speed * time\nanswer = round(distance, 2)"]}
{"id": 25, "answer": "D", "completion": "cost = Symbol('cost', positive=True)\nselling_price = cost + 0.4 * cost\ngross_profit = selling_price - cost\nsolution = solve_it(gross_profit - 20, cost)\nanswer = solution[cost] * 1.4", "completions": ["cost = Symbol('cost', positive=True)\nselling_price = cost + 0.4 * cost\ngross_profit = selling_price - cost\nsolution = solve_it(gross_profit - 20, cost)\nanswer = solution[cost] * 1.4"]}
{"id": 26, "answer": "C", "completion": "principal = 500\ninterest_rate = 6 / 100\ntime = 4\ninterest = principal * interest_rate * time\namount = principal + interest\nanswer = amount", "completions": ["principal = 500\ninterest_rate = 6 / 100\ntime = 4\ninterest = principal * interest_rate * time\namount = principal + interest\nanswer = amount"]}
{"id": 27, "answer": "A", "completion": "options = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    x, y = option\n    if y > sqrt(x):\n        answer = option\n        break", "completions": ["options = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    x, y = option\n    if y > sqrt(x):\n        answer = option\n        break"]}
{"id": 28, "answer": "B", "completion": "forward_speed = Symbol('forward_speed', positive=True)\ndistance = Symbol('distance', positive=True)\nforward_time = 6\nreturn_time = 4\nreturn_speed = forward_speed + 12\nsolution = solve_it([distance - forward_speed * forward_time, distance - return_speed * return_time], [forward_speed, distance])\nanswer = solution[distance]", "completions": ["forward_speed = Symbol('forward_speed', positive=True)\ndistance = Symbol('distance', positive=True)\nforward_time = 6\nreturn_time = 4\nreturn_speed = forward_speed + 12\nsolution = solve_it([distance - forward_speed * forward_time, distance - return_speed * return_time], [forward_speed, distance])\nanswer = solution[distance]"]}
{"id": 29, "answer": "A", "completion": "my_age = 60\nmy_age_when_brother_was_half = 2\nbrother_age_when_half = my_age_when_brother_was_half / 2\ntime_passed = my_age - my_age_when_brother_was_half\nbrother_age = brother_age_when_half + time_passed\nanswer = brother_age", "completions": ["my_age = 60\nmy_age_when_brother_was_half = 2\nbrother_age_when_half = my_age_when_brother_was_half / 2\ntime_passed = my_age - my_age_when_brother_was_half\nbrother_age = brother_age_when_half + time_passed\nanswer = brother_age"]}
{"id": 30, "answer": "B", "completion": "wholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = wholesale_cost * 1.6\ndiscounted_retail_price = original_retail_price * 0.8\npercent_more_than_wholesale = (discounted_retail_price - wholesale_cost) / wholesale_cost * 100\nanswer = percent_more_than_wholesale.subs(wholesale_cost, 100) # We can substitute any value for wholesale_cost since we're looking for a percentage.", "completions": ["wholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = wholesale_cost * 1.6\ndiscounted_retail_price = original_retail_price * 0.8\npercent_more_than_wholesale = (discounted_retail_price - wholesale_cost) / wholesale_cost * 100\nanswer = percent_more_than_wholesale.subs(wholesale_cost, 100) # We can substitute any value for wholesale_cost since we're looking for a percentage."]}
{"id": 31, "answer": "A", "completion": "length_on_map = 20\nscale = 1/4\nactual_distance_per_inch = 10\nactual_distance = length_on_map * scale * actual_distance_per_inch\nanswer = actual_distance", "completions": ["length_on_map = 20\nscale = 1/4\nactual_distance_per_inch = 10\nactual_distance = length_on_map * scale * actual_distance_per_inch\nanswer = actual_distance"]}
{"id": 32, "answer": "B", "completion": "width = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter_folded_along_width = 48\nperimeter_folded_along_height = 66\nsolution = solve_it([2 * (width + height / 2) - perimeter_folded_along_width, 2 * (width / 2 + height) - perimeter_folded_along_height], [width, height])\narea = solution[width] * solution[height]\nanswer = area", "completions": ["width = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter_folded_along_width = 48\nperimeter_folded_along_height = 66\nsolution = solve_it([2 * (width + height / 2) - perimeter_folded_along_width, 2 * (width / 2 + height) - perimeter_folded_along_height], [width, height])\narea = solution[width] * solution[height]\nanswer = area"]}
{"id": 33, "answer": "B", "completion": "answer = 3 * 4 * 1 * 3", "completions": ["answer = 3 * 4 * 1 * 3"]}
{"id": 34, "answer": "B", "completion": "width = 3\nheight = 4\nlength = 15\ndiameter = Symbol('diameter', positive=True)\nradius = diameter / 2\nsphere_equation = (width/2)**2 + (height/2)**2 + (length/2)**2 - radius**2\nsolution = solve_it(sphere_equation, diameter)\nanswer = solution[diameter]", "completions": ["width = 3\nheight = 4\nlength = 15\ndiameter = Symbol('diameter', positive=True)\nradius = diameter / 2\nsphere_equation = (width/2)**2 + (height/2)**2 + (length/2)**2 - radius**2\nsolution = solve_it(sphere_equation, diameter)\nanswer = solution[diameter]"]}
{"id": 35, "answer": "A", "completion": "distance_east = 5 - 2\ndistance_north = 3 - 3\ntotal_distance = sqrt(distance_east**2 + distance_north**2)\nanswer = total_distance", "completions": ["distance_east = 5 - 2\ndistance_north = 3 - 3\ntotal_distance = sqrt(distance_east**2 + distance_north**2)\nanswer = total_distance"]}
{"id": 36, "answer": "D", "completion": "marked_price = Symbol('marked_price', positive=True)\ndiscount_5 = 0.05 * marked_price\ndiscount_7 = 0.07 * marked_price\nprofit_difference = 15\nsolution = solve_it(discount_7 - discount_5 - profit_difference, marked_price)\nanswer = solution[marked_price]", "completions": ["marked_price = Symbol('marked_price', positive=True)\ndiscount_5 = 0.05 * marked_price\ndiscount_7 = 0.07 * marked_price\nprofit_difference = 15\nsolution = solve_it(discount_7 - discount_5 - profit_difference, marked_price)\nanswer = solution[marked_price]"]}
{"id": 37, "answer": "A", "completion": "number = Symbol('number', positive=True)\nactual_value = 7 / 8 * number\nincorrect_value = 7 / 18 * number\ndifference = actual_value - incorrect_value\nsolution = solve_it(difference - 770, number)\nanswer = solution[number]", "completions": ["number = Symbol('number', positive=True)\nactual_value = 7 / 8 * number\nincorrect_value = 7 / 18 * number\ndifference = actual_value - incorrect_value\nsolution = solve_it(difference - 770, number)\nanswer = solution[number]"]}
{"id": 38, "answer": "D", "completion": "monthly_sales = Symbol('monthly_sales', positive=True)\nfixed_salary = 500\npercentage_of_sales = 0.05\ntotal_salary = 1500\nsalary_formula = fixed_salary + percentage_of_sales * monthly_sales\nsolution = solve_it(salary_formula - total_salary, monthly_sales)\nanswer = solution[monthly_sales]", "completions": ["monthly_sales = Symbol('monthly_sales', positive=True)\nfixed_salary = 500\npercentage_of_sales = 0.05\ntotal_salary = 1500\nsalary_formula = fixed_salary + percentage_of_sales * monthly_sales\nsolution = solve_it(salary_formula - total_salary, monthly_sales)\nanswer = solution[monthly_sales]"]}
{"id": 39, "answer": "A", "completion": "side = Symbol('side', positive=True)\ntime1 = side / 200\ntime2 = side / 400\ntime3 = side / 600\ntime4 = side / 800\ntotal_time = time1 + time2 + time3 + time4\ntotal_distance = 4 * side\naverage_speed = total_distance / total_time\nanswer = average_speed.evalf()", "completions": ["side = Symbol('side', positive=True)\ntime1 = side / 200\ntime2 = side / 400\ntime3 = side / 600\ntime4 = side / 800\ntotal_time = time1 + time2 + time3 + time4\ntotal_distance = 4 * side\naverage_speed = total_distance / total_time\nanswer = average_speed.evalf()"]}
{"id": 40, "answer": "A", "completion": "num_white = Symbol('num_white', positive=True, integer=True)\nnum_brown = Symbol('num_brown', positive=True, integer=True)\ntotal_sharpeners = 18\ntotal_cost = 100\ncost_white = Symbol('cost_white', positive=True)\ncost_brown = cost_white - 1\nsolution = solve_it([num_white + num_brown - total_sharpeners, cost_white * num_white + cost_brown * num_brown - total_cost], [num_white, num_brown])\nanswer = (solution[num_white], solution[num_brown])", "completions": ["num_white = Symbol('num_white', positive=True, integer=True)\nnum_brown = Symbol('num_brown', positive=True, integer=True)\ntotal_sharpeners = 18\ntotal_cost = 100\ncost_white = Symbol('cost_white', positive=True)\ncost_brown = cost_white - 1\nsolution = solve_it([num_white + num_brown - total_sharpeners, cost_white * num_white + cost_brown * num_brown - total_cost], [num_white, num_brown])\nanswer = (solution[num_white], solution[num_brown])"]}
{"id": 41, "answer": "A", "completion": "hose_A_rate = 1 / 8\nhose_B_rate = Symbol('hose_B_rate', positive=True)\ntime_together = 3\nremaining_pool = 1 - 2 * hose_A_rate\ncombined_rate = remaining_pool / time_together\nsolution = solve_it(hose_A_rate + hose_B_rate - combined_rate, hose_B_rate)\nhose_B_time = 1 / solution[hose_B_rate]\nanswer = hose_B_time", "completions": ["hose_A_rate = 1 / 8\nhose_B_rate = Symbol('hose_B_rate', positive=True)\ntime_together = 3\nremaining_pool = 1 - 2 * hose_A_rate\ncombined_rate = remaining_pool / time_together\nsolution = solve_it(hose_A_rate + hose_B_rate - combined_rate, hose_B_rate)\nhose_B_time = 1 / solution[hose_B_rate]\nanswer = hose_B_time"]}
{"id": 42, "answer": "C", "completion": "original_value = 120\nreduced_value = 96\nreduction = original_value - reduced_value\nreduction_percent = (reduction / original_value) * 100\nanswer = reduction_percent", "completions": ["original_value = 120\nreduced_value = 96\nreduction = original_value - reduced_value\nreduction_percent = (reduction / original_value) * 100\nanswer = reduction_percent"]}
{"id": 43, "answer": "A", "completion": "number = Symbol('number', positive=True)\nnumber_with_1_after = number * 10 + 1\nnumber_with_1_before = 100000 + number\nsolution = solve_it(number_with_1_after - 3 * number_with_1_before, number)\nanswer = solution[number]", "completions": ["number = Symbol('number', positive=True)\nnumber_with_1_after = number * 10 + 1\nnumber_with_1_before = 100000 + number\nsolution = solve_it(number_with_1_after - 3 * number_with_1_before, number)\nanswer = solution[number]"]}
{"id": 44, "answer": "B", "completion": "percentage_of_swim_team_members = Symbol('percentage_of_swim_team_members', positive=True)\npercentage_of_swim_team_members_not_in_chess_club = 0.2 * percentage_of_swim_team_members\npercentage_of_swim_team_members_in_chess_club = percentage_of_swim_team_members - percentage_of_swim_team_members_not_in_chess_club\nsolution = solve_it(percentage_of_swim_team_members_in_chess_club - 24, percentage_of_swim_team_members)\nanswer = solution[percentage_of_swim_team_members]", "completions": ["percentage_of_swim_team_members = Symbol('percentage_of_swim_team_members', positive=True)\npercentage_of_swim_team_members_not_in_chess_club = 0.2 * percentage_of_swim_team_members\npercentage_of_swim_team_members_in_chess_club = percentage_of_swim_team_members - percentage_of_swim_team_members_not_in_chess_club\nsolution = solve_it(percentage_of_swim_team_members_in_chess_club - 24, percentage_of_swim_team_members)\nanswer = solution[percentage_of_swim_team_members]"]}
{"id": 45, "answer": "B", "completion": "current_population = 78000\nannual_growth_rate = 1.05\npopulation_in_2_years = current_population * (annual_growth_rate ** 2)\nanswer = round(population_in_2_years)", "completions": ["current_population = 78000\nannual_growth_rate = 1.05\npopulation_in_2_years = current_population * (annual_growth_rate ** 2)\nanswer = round(population_in_2_years)"]}
{"id": 46, "answer": "E", "completion": "time_to_meet = Symbol('time_to_meet', positive=True)\ncar1_speed = 12\ncar2_speed = 13\ntotal_distance = 50\ncombined_speed = car1_speed + car2_speed\nsolution = solve_it(time_to_meet * combined_speed - total_distance, time_to_meet)\nanswer = solution[time_to_meet]", "completions": ["time_to_meet = Symbol('time_to_meet', positive=True)\ncar1_speed = 12\ncar2_speed = 13\ntotal_distance = 50\ncombined_speed = car1_speed + car2_speed\nsolution = solve_it(time_to_meet * combined_speed - total_distance, time_to_meet)\nanswer = solution[time_to_meet]"]}
{"id": 47, "answer": "A", "completion": "monthly_salary = 1500\ndesired_monthly_income = 6000\ncommission_rate = 0.15\n\nsales = Symbol('sales', positive=True)\ncommission = sales * commission_rate\ntotal_income = monthly_salary + commission\n\nsolution = solve_it(total_income - desired_monthly_income, sales)\nanswer = solution[sales]", "completions": ["monthly_salary = 1500\ndesired_monthly_income = 6000\ncommission_rate = 0.15\n\nsales = Symbol('sales', positive=True)\ncommission = sales * commission_rate\ntotal_income = monthly_salary + commission\n\nsolution = solve_it(total_income - desired_monthly_income, sales)\nanswer = solution[sales]"]}
{"id": 48, "answer": "D", "completion": "loan_amount = 360\nmonthly_installment = 31.50\ntotal_payment = 12 * monthly_installment\ninterest_amount = total_payment - loan_amount\ninterest_rate = (interest_amount / loan_amount) * 100\nanswer = interest_rate", "completions": ["loan_amount = 360\nmonthly_installment = 31.50\ntotal_payment = 12 * monthly_installment\ninterest_amount = total_payment - loan_amount\ninterest_rate = (interest_amount / loan_amount) * 100\nanswer = interest_rate"]}
{"id": 49, "answer": "B", "completion": "original_price = Symbol('original_price', positive=True)\nreduced_price = original_price * (1 - 0.3)\nincreased_price = original_price\npercentage_increase = Symbol('percentage_increase', positive=True)\nsolution = solve_it(reduced_price * (1 + percentage_increase / 100) - increased_price, percentage_increase)\nanswer = solution[percentage_increase]", "completions": ["original_price = Symbol('original_price', positive=True)\nreduced_price = original_price * (1 - 0.3)\nincreased_price = original_price\npercentage_increase = Symbol('percentage_increase', positive=True)\nsolution = solve_it(reduced_price * (1 + percentage_increase / 100) - increased_price, percentage_increase)\nanswer = solution[percentage_increase]"]}
{"id": 50, "answer": "C", "completion": "num_coins = Symbol('num_coins', positive=True, integer=True)\ntotal_value = 700\nvalue_25_paise = 0.25 * num_coins\nvalue_50_paise = 0.50 * num_coins\nvalue_1_rupee = 1 * num_coins\nsolution = solve_it(value_25_paise + value_50_paise + value_1_rupee - total_value, num_coins)\nanswer = solution[num_coins]", "completions": ["num_coins = Symbol('num_coins', positive=True, integer=True)\ntotal_value = 700\nvalue_25_paise = 0.25 * num_coins\nvalue_50_paise = 0.50 * num_coins\nvalue_1_rupee = 1 * num_coins\nsolution = solve_it(value_25_paise + value_50_paise + value_1_rupee - total_value, num_coins)\nanswer = solution[num_coins]"]}
{"id": 51, "answer": "C", "completion": "monthly_expense = 3500\nsavings_percentage = 12.5 / 100\nmonthly_income = Symbol('monthly_income', positive=True)\nsavings = monthly_income * savings_percentage\nsolution = solve_it(monthly_income - savings - monthly_expense, monthly_income)\nanswer = solution[monthly_income]", "completions": ["monthly_expense = 3500\nsavings_percentage = 12.5 / 100\nmonthly_income = Symbol('monthly_income', positive=True)\nsavings = monthly_income * savings_percentage\nsolution = solve_it(monthly_income - savings - monthly_expense, monthly_income)\nanswer = solution[monthly_income]"]}
{"id": 52, "answer": "B", "completion": "toys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\ntotal_toys = 29400\nnum_tempos = total_toys / toys_per_tempo\nanswer = num_tempos", "completions": ["toys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\ntotal_toys = 29400\nnum_tempos = total_toys / toys_per_tempo\nanswer = num_tempos"]}
{"id": 53, "answer": "A", "completion": "answer = math.comb(10, 2)", "completions": ["answer = math.comb(10, 2)"]}
{"id": 54, "answer": "D", "completion": "brown_work_rate = 1 / 6\nblack_work_rate = 1 / 8\nblue_work_rate = 1 / 12\n\nbrown_work_done = brown_work_rate * 8\nblack_work_done = black_work_rate * 6\n\nremaining_work = 3 - (brown_work_done + black_work_done)\n\nblue_days_needed = remaining_work / blue_work_rate\nanswer = round(blue_days_needed)", "completions": ["brown_work_rate = 1 / 6\nblack_work_rate = 1 / 8\nblue_work_rate = 1 / 12\n\nbrown_work_done = brown_work_rate * 8\nblack_work_done = black_work_rate * 6\n\nremaining_work = 3 - (brown_work_done + black_work_done)\n\nblue_days_needed = remaining_work / blue_work_rate\nanswer = round(blue_days_needed)"]}
{"id": 55, "answer": "A", "completion": "answer = lcm(16, 17)", "completions": ["answer = lcm(16, 17)"]}
{"id": 56, "answer": "A", "completion": "total_cubes = 5 ** 3\ninner_cubes = 3 ** 3\nunpainted_faces = 6 * inner_cubes\nanswer = 'A)438'", "completions": ["total_cubes = 5 ** 3\ninner_cubes = 3 ** 3\nunpainted_faces = 6 * inner_cubes\nanswer = 'A)438'"]}
{"id": 57, "answer": "D", "completion": "cocoa_flavored = 10\nvanilla_flavored = 100 - cocoa_flavored\nsquashed_vanilla = 0.9 * vanilla_flavored\nnot_squashed_vanilla = vanilla_flavored - squashed_vanilla\nanswer = not_squashed_vanilla / 100 * 100", "completions": ["cocoa_flavored = 10\nvanilla_flavored = 100 - cocoa_flavored\nsquashed_vanilla = 0.9 * vanilla_flavored\nnot_squashed_vanilla = vanilla_flavored - squashed_vanilla\nanswer = not_squashed_vanilla / 100 * 100"]}
{"id": 58, "answer": "C", "completion": "well_depth = 30\njump_up = 3\nfall_down = 2\nnet_movement = jump_up - fall_down\n\n# The frog will be 1 meter below the top of the well on the last day before it jumps out\ndays_to_reach_1_meter_below_top = (well_depth - 1) / net_movement\n\n# On the last day, the frog jumps out of the well\ntotal_days = days_to_reach_1_meter_below_top + 1\n\nanswer = total_days", "completions": ["well_depth = 30\njump_up = 3\nfall_down = 2\nnet_movement = jump_up - fall_down\n\n# The frog will be 1 meter below the top of the well on the last day before it jumps out\ndays_to_reach_1_meter_below_top = (well_depth - 1) / net_movement\n\n# On the last day, the frog jumps out of the well\ntotal_days = days_to_reach_1_meter_below_top + 1\n\nanswer = total_days"]}
{"id": 59, "answer": "A", "completion": "options = [47, 91, 41, 67, 44]\nfor option in options:\n    sum_of_numbers = option + (option + 2) + (option + 4) + (option + 6) + (option + 8)\n    if (sum_of_numbers / 10).is_integer() and sqrt(sum_of_numbers / 10).is_integer():\n        answer = option\n        break", "completions": ["options = [47, 91, 41, 67, 44]\nfor option in options:\n    sum_of_numbers = option + (option + 2) + (option + 4) + (option + 6) + (option + 8)\n    if (sum_of_numbers / 10).is_integer() and sqrt(sum_of_numbers / 10).is_integer():\n        answer = option\n        break"]}
{"id": 60, "answer": "E", "completion": "total_students = Symbol('total_students', positive=True)\nfootball_students = 0.08 * total_students\ncricket_students = 4 / 5 * total_students\nbasketball_students = 0.1 * total_students\nno_interest_students = 20\nsolution = solve_it(football_students + cricket_students + basketball_students + no_interest_students - total_students, total_students)\nanswer = solution[total_students]", "completions": ["total_students = Symbol('total_students', positive=True)\nfootball_students = 0.08 * total_students\ncricket_students = 4 / 5 * total_students\nbasketball_students = 0.1 * total_students\nno_interest_students = 20\nsolution = solve_it(football_students + cricket_students + basketball_students + no_interest_students - total_students, total_students)\nanswer = solution[total_students]"]}
{"id": 61, "answer": "D", "completion": "age_R = Symbol('age_R', positive=True)\nage_Q = Symbol('age_Q', positive=True)\nage_T = Symbol('age_T', positive=True)\nage_difference = age_R - age_Q\nsolution = solve_it([age_R + age_T - 50, age_Q - age_T - age_difference], [age_R, age_Q, age_T])\nif not solution:\n    answer = \"D)Cannot be determined\"\nelse:\n    answer = \"E)None of the above\"", "completions": ["age_R = Symbol('age_R', positive=True)\nage_Q = Symbol('age_Q', positive=True)\nage_T = Symbol('age_T', positive=True)\nage_difference = age_R - age_Q\nsolution = solve_it([age_R + age_T - 50, age_Q - age_T - age_difference], [age_R, age_Q, age_T])\nif not solution:\n    answer = \"D)Cannot be determined\"\nelse:\n    answer = \"E)None of the above\""]}
{"id": 62, "answer": "B", "completion": "money_left = 8.50 - 3.50\nadditional_quarter_miles = money_left / 0.10\ntotal_miles = 0.25 + (additional_quarter_miles * 0.25)\nanswer = total_miles", "completions": ["money_left = 8.50 - 3.50\nadditional_quarter_miles = money_left / 0.10\ntotal_miles = 0.25 + (additional_quarter_miles * 0.25)\nanswer = total_miles"]}
{"id": 63, "answer": "B", "completion": "current_average = 51\nnew_average = 54\nfinals_score = 78\nmatches_played = Symbol('matches_played', positive=True, integer=True)\ntotal_runs_before_finals = matches_played * current_average\ntotal_runs_after_finals = (matches_played + 1) * new_average\nsolution = solve_it(total_runs_after_finals - total_runs_before_finals - finals_score, matches_played)\nanswer = solution[matches_played]\nanswer_option = 'C)9'", "completions": ["current_average = 51\nnew_average = 54\nfinals_score = 78\nmatches_played = Symbol('matches_played', positive=True, integer=True)\ntotal_runs_before_finals = matches_played * current_average\ntotal_runs_after_finals = (matches_played + 1) * new_average\nsolution = solve_it(total_runs_after_finals - total_runs_before_finals - finals_score, matches_played)\nanswer = solution[matches_played]\nanswer_option = 'C)9'"]}
{"id": 64, "answer": "B", "completion": "num_letters = Symbol('num_letters', positive=True, integer=True)\nsingle_letter_codes = num_letters\npair_letter_codes = num_letters * (num_letters - 1) / 2\ntotal_codes = single_letter_codes + pair_letter_codes\nsolution = solve_it(total_codes - 10, num_letters)\nanswer = solution[num_letters]", "completions": ["num_letters = Symbol('num_letters', positive=True, integer=True)\nsingle_letter_codes = num_letters\npair_letter_codes = num_letters * (num_letters - 1) / 2\ntotal_codes = single_letter_codes + pair_letter_codes\nsolution = solve_it(total_codes - 10, num_letters)\nanswer = solution[num_letters]"]}
{"id": 65, "answer": "C", "completion": "width = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 150\nlength_relation = height - 4 * width - 1\nsolution = solve_it([width * height - area, length_relation], [width, height])\nperimeter = 2 * (solution[width] + solution[height])\nanswer = perimeter\n# Answer: D)63 m", "completions": ["width = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 150\nlength_relation = height - 4 * width - 1\nsolution = solve_it([width * height - area, length_relation], [width, height])\nperimeter = 2 * (solution[width] + solution[height])\nanswer = perimeter\n# Answer: D)63 m"]}
{"id": 66, "answer": "C", "completion": "grams = Symbol('grams', positive=True)\nvitamin_E_requirement = 0.09 * grams\nvitamin_A_requirement = 0.08 * grams\nsolution = solve_it([vitamin_E_requirement - 1, vitamin_A_requirement - 1], grams)\nanswer = max(solution[grams], 1 / 0.09, 1 / 0.08)", "completions": ["grams = Symbol('grams', positive=True)\nvitamin_E_requirement = 0.09 * grams\nvitamin_A_requirement = 0.08 * grams\nsolution = solve_it([vitamin_E_requirement - 1, vitamin_A_requirement - 1], grams)\nanswer = max(solution[grams], 1 / 0.09, 1 / 0.08)"]}
{"id": 67, "answer": "B", "completion": "num_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_hour = 2 * num_helpers\nsmall_cakes_per_hour = 35 * num_helpers\ntotal_large_cakes_needed = 20\ntotal_small_cakes_needed = 700\ntotal_hours = 3\nsolution = solve_it([large_cakes_per_hour * total_hours - total_large_cakes_needed, small_cakes_per_hour * total_hours - total_small_cakes_needed], num_helpers)\nanswer = solution[num_helpers]", "completions": ["num_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_hour = 2 * num_helpers\nsmall_cakes_per_hour = 35 * num_helpers\ntotal_large_cakes_needed = 20\ntotal_small_cakes_needed = 700\ntotal_hours = 3\nsolution = solve_it([large_cakes_per_hour * total_hours - total_large_cakes_needed, small_cakes_per_hour * total_hours - total_small_cakes_needed], num_helpers)\nanswer = solution[num_helpers]"]}
{"id": 68, "answer": "A", "completion": "length_RS = 5\nlength_RT = 17\nlength_ST = 22\nlength_SU = length_ST / 2\nlength_RU = length_RT - length_SU\nanswer = length_RU\nanswer_option = 'D)9'", "completions": ["length_RS = 5\nlength_RT = 17\nlength_ST = 22\nlength_SU = length_ST / 2\nlength_RU = length_RT - length_SU\nanswer = length_RU\nanswer_option = 'D)9'"]}
{"id": 69, "answer": "C", "completion": "pita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\n\n# Six pita breads contain the same amount of falafel as do two rolls\nequation1 = Eq(6 * pita_breads, 2 * rolls)\n\n# Three rolls contain the same amount of falafel as five baguettes do\nequation2 = Eq(3 * rolls, 5 * baguettes)\n\n# Solve the equations\nsolution = solve((equation1, equation2), (pita_breads, rolls, baguettes))\n\n# Two baguettes contain the same amount of falafel as how many pita breads\nanswer = 2 * solution[baguettes] / solution[pita_breads]\nanswer = simplify(answer)\nanswer = answer.evalf() # E)25/3", "completions": ["pita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\n\n# Six pita breads contain the same amount of falafel as do two rolls\nequation1 = Eq(6 * pita_breads, 2 * rolls)\n\n# Three rolls contain the same amount of falafel as five baguettes do\nequation2 = Eq(3 * rolls, 5 * baguettes)\n\n# Solve the equations\nsolution = solve((equation1, equation2), (pita_breads, rolls, baguettes))\n\n# Two baguettes contain the same amount of falafel as how many pita breads\nanswer = 2 * solution[baguettes] / solution[pita_breads]\nanswer = simplify(answer)\nanswer = answer.evalf() # E)25/3"]}
{"id": 70, "answer": "C", "completion": "discounted_price = 0.8\noriginal_price = 1\nprice_increase = (original_price - discounted_price) / discounted_price\nanswer = price_increase * 100", "completions": ["discounted_price = 0.8\noriginal_price = 1\nprice_increase = (original_price - discounted_price) / discounted_price\nanswer = price_increase * 100"]}
{"id": 71, "answer": "A", "completion": "bus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare_for_two = 4 / 3 * train_fare\ntotal_fare = 6 * bus_fare + 8 * train_fare\nsolution = solve_it([bus_fare_for_two - 2 * bus_fare, total_fare - 1512], [bus_fare, train_fare])\nanswer = solution[train_fare]", "completions": ["bus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare_for_two = 4 / 3 * train_fare\ntotal_fare = 6 * bus_fare + 8 * train_fare\nsolution = solve_it([bus_fare_for_two - 2 * bus_fare, total_fare - 1512], [bus_fare, train_fare])\nanswer = solution[train_fare]"]}
{"id": 72, "answer": "B", "completion": "width = 3\nlength = 8\nperimeter = 2 * (width + length)\nanswer = perimeter", "completions": ["width = 3\nlength = 8\nperimeter = 2 * (width + length)\nanswer = perimeter"]}
{"id": 73, "answer": "B", "completion": "number_of_books = 6\nanswer = math.factorial(number_of_books)", "completions": ["number_of_books = 6\nanswer = math.factorial(number_of_books)"]}
{"id": 74, "answer": "C", "completion": "x = Symbol('x', positive=True)\npicket_width = 1/2\nspace_between_pickets = 6\ntotal_length = x * picket_width + (x - 1) * space_between_pickets\nlength_in_feet = total_length / 12\nanswer = simplify(length_in_feet)", "completions": ["x = Symbol('x', positive=True)\npicket_width = 1/2\nspace_between_pickets = 6\ntotal_length = x * picket_width + (x - 1) * space_between_pickets\nlength_in_feet = total_length / 12\nanswer = simplify(length_in_feet)"]}
{"id": 75, "answer": "A", "completion": "ship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ntime_for_ship_to_travel_180_miles = 180 / ship_speed\ndistance_traveled_by_plane = plane_speed * time_for_ship_to_travel_180_miles\nsolution = solve_it(distance_traveled_by_plane - 180, ship_speed)\nanswer = 180 + solution[distance_traveled_by_plane]", "completions": ["ship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ntime_for_ship_to_travel_180_miles = 180 / ship_speed\ndistance_traveled_by_plane = plane_speed * time_for_ship_to_travel_180_miles\nsolution = solve_it(distance_traveled_by_plane - 180, ship_speed)\nanswer = 180 + solution[distance_traveled_by_plane]"]}
{"id": 76, "answer": "E", "completion": "total_deer_population = Symbol('total_deer_population', positive=True)\ntagged_deer = 300\ndeer_caught_in_2002 = 500\ntagged_deer_caught_in_2002 = 20\npercent_of_tagged_deer_caught = tagged_deer_caught_in_2002 / deer_caught_in_2002\npercent_of_total_tagged_deer = tagged_deer / total_deer_population\nsolution = solve_it(percent_of_tagged_deer_caught - percent_of_total_tagged_deer, total_deer_population)\nanswer = solution[total_deer_population]", "completions": ["total_deer_population = Symbol('total_deer_population', positive=True)\ntagged_deer = 300\ndeer_caught_in_2002 = 500\ntagged_deer_caught_in_2002 = 20\npercent_of_tagged_deer_caught = tagged_deer_caught_in_2002 / deer_caught_in_2002\npercent_of_total_tagged_deer = tagged_deer / total_deer_population\nsolution = solve_it(percent_of_tagged_deer_caught - percent_of_total_tagged_deer, total_deer_population)\nanswer = solution[total_deer_population]"]}
{"id": 77, "answer": "B", "completion": "main_line_train_interval = 10\nharbor_line_train_interval = 10\ntime_difference = 2\n\n# The man will catch the main line train if he arrives between 5:00 and 5:02, or between 5:10 and 5:12, and so on.\n# The probability of catching the main line train is the ratio of the time window when the main line train arrives first (2 minutes) to the total time window (10 minutes).\nprobability_main_line = time_difference / main_line_train_interval\n\n# The probability of catching the harbor line train is the complement of the probability of catching the main line train.\nprobability_harbor_line = 1 - probability_main_line\n\nanswer = probability_harbor_line\n# Answer option: ['B)0.8']", "completions": ["main_line_train_interval = 10\nharbor_line_train_interval = 10\ntime_difference = 2\n\n# The man will catch the main line train if he arrives between 5:00 and 5:02, or between 5:10 and 5:12, and so on.\n# The probability of catching the main line train is the ratio of the time window when the main line train arrives first (2 minutes) to the total time window (10 minutes).\nprobability_main_line = time_difference / main_line_train_interval\n\n# The probability of catching the harbor line train is the complement of the probability of catching the main line train.\nprobability_harbor_line = 1 - probability_main_line\n\nanswer = probability_harbor_line\n# Answer option: ['B)0.8']"]}
{"id": 78, "answer": "A", "completion": "num_vehicles = 10\naverage_weight_before = 12.2\naverage_weight_after = average_weight_before + 2.6\ntotal_weight_before = num_vehicles * average_weight_before\ntotal_weight_after = (num_vehicles + 1) * average_weight_after\nheavy_duty_truck_weight = total_weight_after - total_weight_before\nanswer = heavy_duty_truck_weight", "completions": ["num_vehicles = 10\naverage_weight_before = 12.2\naverage_weight_after = average_weight_before + 2.6\ntotal_weight_before = num_vehicles * average_weight_before\ntotal_weight_after = (num_vehicles + 1) * average_weight_after\nheavy_duty_truck_weight = total_weight_after - total_weight_before\nanswer = heavy_duty_truck_weight"]}
{"id": 79, "answer": "C", "completion": "population_last_year = Symbol('population_last_year', positive=True)\npopulation_now = Symbol('population_now', positive=True)\npopulation_next_year = population_now * 1.1\npopulation_two_years_later = population_next_year * 1.1\nsolution = solve_it([population_two_years_later - 2 * population_last_year, population_now - population_last_year * (1 + interest_rate / 100)], interest_rate)\nanswer = solution[interest_rate]", "completions": ["population_last_year = Symbol('population_last_year', positive=True)\npopulation_now = Symbol('population_now', positive=True)\npopulation_next_year = population_now * 1.1\npopulation_two_years_later = population_next_year * 1.1\nsolution = solve_it([population_two_years_later - 2 * population_last_year, population_now - population_last_year * (1 + interest_rate / 100)], interest_rate)\nanswer = solution[interest_rate]"]}
{"id": 80, "answer": "B", "completion": "arjun_money = Symbol('arjun_money', positive=True)\nsajal_money = Symbol('sajal_money', positive=True)\narjun_after_giving = arjun_money - 30\nsajal_after_receiving = sajal_money + 30\narjun_after_receiving = arjun_money + 10\nsajal_after_giving = sajal_money - 10\nsolution = solve_it([sajal_after_receiving - 2 * arjun_after_giving, arjun_after_receiving - 3 * sajal_after_giving], [arjun_money, sajal_money])\nanswer = (solution[arjun_money], solution[sajal_money])", "completions": ["arjun_money = Symbol('arjun_money', positive=True)\nsajal_money = Symbol('sajal_money', positive=True)\narjun_after_giving = arjun_money - 30\nsajal_after_receiving = sajal_money + 30\narjun_after_receiving = arjun_money + 10\nsajal_after_giving = sajal_money - 10\nsolution = solve_it([sajal_after_receiving - 2 * arjun_after_giving, arjun_after_receiving - 3 * sajal_after_giving], [arjun_money, sajal_money])\nanswer = (solution[arjun_money], solution[sajal_money])"]}
{"id": 81, "answer": "A", "completion": "width = 100\narea = 3000\nlength = Symbol('length', positive=True)\nsolution = solve_it(width * length - area, length)\nanswer = solution[length]", "completions": ["width = 100\narea = 3000\nlength = Symbol('length', positive=True)\nsolution = solve_it(width * length - area, length)\nanswer = solution[length]"]}
{"id": 82, "answer": "A", "completion": "other_integer = Symbol('other_integer', positive=True)\ngcf = 11\nlcm = 7700\ninteger1 = 350\nsolution = solve_it([gcd(integer1, other_integer) - gcf, lcm(integer1, other_integer) - lcm], other_integer)\nanswer = solution[other_integer]", "completions": ["other_integer = Symbol('other_integer', positive=True)\ngcf = 11\nlcm = 7700\ninteger1 = 350\nsolution = solve_it([gcd(integer1, other_integer) - gcf, lcm(integer1, other_integer) - lcm], other_integer)\nanswer = solution[other_integer]"]}
{"id": 83, "answer": "A", "completion": "side_length = Symbol('side_length', positive=True)\ntrimmed_length = side_length - 4\ntriangle_area = 70\nrectangle_area = 2 * triangle_area\nsolution = solve_it(side_length * trimmed_length - rectangle_area, side_length)\noriginal_side_length = solution[side_length]\noriginal_perimeter = 4 * original_side_length\nanswer = original_perimeter", "completions": ["side_length = Symbol('side_length', positive=True)\ntrimmed_length = side_length - 4\ntriangle_area = 70\nrectangle_area = 2 * triangle_area\nsolution = solve_it(side_length * trimmed_length - rectangle_area, side_length)\noriginal_side_length = solution[side_length]\noriginal_perimeter = 4 * original_side_length\nanswer = original_perimeter"]}
{"id": 84, "answer": "A", "completion": "original_length = 30\nreduced_ratio = 5 / 3\nnew_length = original_length * reduced_ratio\nanswer = new_length", "completions": ["original_length = 30\nreduced_ratio = 5 / 3\nnew_length = original_length * reduced_ratio\nanswer = new_length"]}
{"id": 85, "answer": "E", "completion": "a = Symbol('a', positive=True, integer=True)\nb = Symbol('b', positive=True, integer=True)\nc = Symbol('c', positive=True, integer=True)\nM = 100 * a + 10 * b + c\nN = 100 * c + 10 * b + a\ncondition = M > N\nequation = M - N + 396 * c - 990\nsolution = solve_it(equation, [a, b, c], condition=condition)\ncount = 0\nfor sol in solution:\n    M_value = sol[M]\n    if M_value > 300:\n        count += 1\nanswer = count", "completions": ["a = Symbol('a', positive=True, integer=True)\nb = Symbol('b', positive=True, integer=True)\nc = Symbol('c', positive=True, integer=True)\nM = 100 * a + 10 * b + c\nN = 100 * c + 10 * b + a\ncondition = M > N\nequation = M - N + 396 * c - 990\nsolution = solve_it(equation, [a, b, c], condition=condition)\ncount = 0\nfor sol in solution:\n    M_value = sol[M]\n    if M_value > 300:\n        count += 1\nanswer = count"]}
{"id": 86, "answer": "A", "completion": "num_students = 501\nwhile True:\n    if num_students * 0.2 % 1 == 0 and num_students * 0.28 % 1 == 0:\n        answer = num_students\n        break\n    num_students += 1\nanswer_option = 'E)none of these' if answer not in [550, 570, 600, 700] else f'{answer}'", "completions": ["num_students = 501\nwhile True:\n    if num_students * 0.2 % 1 == 0 and num_students * 0.28 % 1 == 0:\n        answer = num_students\n        break\n    num_students += 1\nanswer_option = 'E)none of these' if answer not in [550, 570, 600, 700] else f'{answer}'"]}
{"id": 87, "answer": "B", "completion": "Raj_age_5_years_back = 17 - 5\nRahim_age_5_years_back = 3 * Raj_age_5_years_back\nRahim_age_now = Rahim_age_5_years_back + 5\nanswer = Rahim_age_now", "completions": ["Raj_age_5_years_back = 17 - 5\nRahim_age_5_years_back = 3 * Raj_age_5_years_back\nRahim_age_now = Rahim_age_5_years_back + 5\nanswer = Rahim_age_now"]}
{"id": 88, "answer": "B", "completion": "rope_length = 14\nfield_area = pi * rope_length**2\ngrazing_rate = 10\ntime_taken = field_area / grazing_rate\nanswer = round(time_taken)", "completions": ["rope_length = 14\nfield_area = pi * rope_length**2\ngrazing_rate = 10\ntime_taken = field_area / grazing_rate\nanswer = round(time_taken)"]}
{"id": 89, "answer": "B", "completion": "cost_price = Symbol('cost_price', positive=True)\nselling_price1 = 27.50\nprofit1 = 0.1\nselling_price2 = 25.75\ncost_price_solution = solve_it(cost_price * (1 + profit1) - selling_price1, cost_price)\ncost_price_value = cost_price_solution[cost_price]\nprofit_or_loss = (selling_price2 - cost_price_value) / cost_price_value\n\nif profit_or_loss > 0:\n    answer = f\"{round(profit_or_loss * 100)}% Profit\"\nelse:\n    answer = f\"{round(abs(profit_or_loss) * 100)}% Loss\"", "completions": ["cost_price = Symbol('cost_price', positive=True)\nselling_price1 = 27.50\nprofit1 = 0.1\nselling_price2 = 25.75\ncost_price_solution = solve_it(cost_price * (1 + profit1) - selling_price1, cost_price)\ncost_price_value = cost_price_solution[cost_price]\nprofit_or_loss = (selling_price2 - cost_price_value) / cost_price_value\n\nif profit_or_loss > 0:\n    answer = f\"{round(profit_or_loss * 100)}% Profit\"\nelse:\n    answer = f\"{round(abs(profit_or_loss) * 100)}% Loss\""]}
{"id": 90, "answer": "C", "completion": "There are 3! = 3*2*1 = 6 ways to arrange the children in a straight line without any restrictions. However, we need to consider only those arrangements where Susan is on the left of Tim. There are two such arrangements: Susan, Tim, Zen and Zen, Susan, Tim. So the answer is:\n\n# Answer option: ['C)2']", "completions": ["There are 3! = 3*2*1 = 6 ways to arrange the children in a straight line without any restrictions. However, we need to consider only those arrangements where Susan is on the left of Tim. There are two such arrangements: Susan, Tim, Zen and Zen, Susan, Tim. So the answer is:\n\n# Answer option: ['C)2']"]}
{"id": 91, "answer": "B", "completion": "fixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nbill_540_calls = fixed_cost + 540 * variable_cost\nbill_620_calls = fixed_cost + 620 * variable_cost\nsolution = solve_it([bill_540_calls - 1800, bill_620_calls - 2040], [fixed_cost, variable_cost])\n\nbill_500_calls = solution[fixed_cost] + 500 * solution[variable_cost]\nanswer = bill_500_calls", "completions": ["fixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nbill_540_calls = fixed_cost + 540 * variable_cost\nbill_620_calls = fixed_cost + 620 * variable_cost\nsolution = solve_it([bill_540_calls - 1800, bill_620_calls - 2040], [fixed_cost, variable_cost])\n\nbill_500_calls = solution[fixed_cost] + 500 * solution[variable_cost]\nanswer = bill_500_calls"]}
{"id": 92, "answer": "A", "completion": "time_A = 26 / 2\ntime_B = 35 / 5\nlcm = lcm(time_A, time_B)\nanswer = \"A)1 hour and 31 minutes\" if lcm == 91 else \"B)2 hour and 31 minutes\" if lcm == 182 else \"C)3 hour and 31 minutes\" if lcm == 273 else \"D)4 hour and 31 minutes\" if lcm == 364 else \"E)5 hour and 31 minutes\"", "completions": ["time_A = 26 / 2\ntime_B = 35 / 5\nlcm = lcm(time_A, time_B)\nanswer = \"A)1 hour and 31 minutes\" if lcm == 91 else \"B)2 hour and 31 minutes\" if lcm == 182 else \"C)3 hour and 31 minutes\" if lcm == 273 else \"D)4 hour and 31 minutes\" if lcm == 364 else \"E)5 hour and 31 minutes\""]}
{"id": 93, "answer": "D", "completion": "hardcover_books = 30\nfiction_books = 20\ntotal_books = 45\nmax_hardcover_and_fiction = min(hardcover_books, fiction_books, total_books - (hardcover_books + fiction_books - total_books))\nanswer = max_hardcover_and_fiction\n# Answer: A)10", "completions": ["hardcover_books = 30\nfiction_books = 20\ntotal_books = 45\nmax_hardcover_and_fiction = min(hardcover_books, fiction_books, total_books - (hardcover_books + fiction_books - total_books))\nanswer = max_hardcover_and_fiction\n# Answer: A)10"]}
{"id": 94, "answer": "A", "completion": "num_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_weekday_papers = Symbol('num_weekday_papers', positive=True)\ncost_sunday_papers = 4 * num_sunday_papers\ncost_weekday_papers = 1 * num_weekday_papers\ntotal_cost = cost_sunday_papers + 6 * cost_weekday_papers\nsolution = solve_it([total_cost - 210, num_sunday_papers - 2 * num_weekday_papers], [num_sunday_papers, num_weekday_papers])\nanswer = solution[num_weekday_papers]", "completions": ["num_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_weekday_papers = Symbol('num_weekday_papers', positive=True)\ncost_sunday_papers = 4 * num_sunday_papers\ncost_weekday_papers = 1 * num_weekday_papers\ntotal_cost = cost_sunday_papers + 6 * cost_weekday_papers\nsolution = solve_it([total_cost - 210, num_sunday_papers - 2 * num_weekday_papers], [num_sunday_papers, num_weekday_papers])\nanswer = solution[num_weekday_papers]"]}
{"id": 95, "answer": "A", "completion": "num_attended = Symbol('num_attended', positive=True, integer=True)\nnum_not_attended = 4\ntotal_cost = 96\ncost_per_person_before = total_cost / (num_attended + num_not_attended)\ncost_per_person_after = cost_per_person_before + 4\nsolution = solve_it(total_cost - num_attended * cost_per_person_after, num_attended)\nanswer = solution[num_attended]", "completions": ["num_attended = Symbol('num_attended', positive=True, integer=True)\nnum_not_attended = 4\ntotal_cost = 96\ncost_per_person_before = total_cost / (num_attended + num_not_attended)\ncost_per_person_after = cost_per_person_before + 4\nsolution = solve_it(total_cost - num_attended * cost_per_person_after, num_attended)\nanswer = solution[num_attended]"]}
{"id": 96, "answer": "C", "completion": "length = 27\nbreadth = 17\nperimeter = 2 * (length + breadth)\nside_of_square = perimeter / 4\nanswer = side_of_square", "completions": ["length = 27\nbreadth = 17\nperimeter = 2 * (length + breadth)\nside_of_square = perimeter / 4\nanswer = side_of_square"]}
{"id": 97, "answer": "E", "completion": "total_amount = 8600\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\nnephew_share = Symbol('nephew_share', positive=True)\ndaughter_share = 4 * nephew_share\nson_share = 5 * nephew_share\ntotal_shares = num_sons * son_share + num_daughters * daughter_share + num_nephews * nephew_share\nsolution = solve_it(total_shares - total_amount, nephew_share)\nanswer = solution[nephew_share] * 4\nanswer_option = 'A)Rs 400'", "completions": ["total_amount = 8600\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\nnephew_share = Symbol('nephew_share', positive=True)\ndaughter_share = 4 * nephew_share\nson_share = 5 * nephew_share\ntotal_shares = num_sons * son_share + num_daughters * daughter_share + num_nephews * nephew_share\nsolution = solve_it(total_shares - total_amount, nephew_share)\nanswer = solution[nephew_share] * 4\nanswer_option = 'A)Rs 400'"]}
{"id": 98, "answer": "D", "completion": "meenu_weight = Symbol('meenu_weight', positive=True)\nmeenu_hint = 29 + meenu_weight / 2\nsolution = solve_it(meenu_hint - meenu_weight, meenu_weight)\nanswer = solution[meenu_weight]", "completions": ["meenu_weight = Symbol('meenu_weight', positive=True)\nmeenu_hint = 29 + meenu_weight / 2\nsolution = solve_it(meenu_hint - meenu_weight, meenu_weight)\nanswer = solution[meenu_weight]"]}
{"id": 99, "answer": "E", "completion": "number_of_tablets = 5\ntime_between_tablets = 15\ntotal_time = (number_of_tablets - 1) * time_between_tablets\nanswer = total_time", "completions": ["number_of_tablets = 5\ntime_between_tablets = 15\ntotal_time = (number_of_tablets - 1) * time_between_tablets\nanswer = total_time"]}
{"id": 100, "answer": "A", "completion": "red_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = 120\nratio_red_to_green = 3 / 4\nsolution = solve_it(red_sweets / green_sweets - ratio_red_to_green, red_sweets)\nanswer = solution[red_sweets]", "completions": ["red_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = 120\nratio_red_to_green = 3 / 4\nsolution = solve_it(red_sweets / green_sweets - ratio_red_to_green, red_sweets)\nanswer = solution[red_sweets]"]}
{"id": 101, "answer": "C", "completion": "num_members = Symbol('num_members', positive=True, integer=True)\nyoungest_age = 7 * 12  # in months\ncommon_difference = 3  # in months\nsum_of_ages = 250 * 12  # in months\ntotal_age = youngest_age * num_members + (num_members * (num_members - 1) * common_difference) / 2\nsolution = solve_it(total_age - sum_of_ages, num_members)\nanswer = solution[num_members]", "completions": ["num_members = Symbol('num_members', positive=True, integer=True)\nyoungest_age = 7 * 12  # in months\ncommon_difference = 3  # in months\nsum_of_ages = 250 * 12  # in months\ntotal_age = youngest_age * num_members + (num_members * (num_members - 1) * common_difference) / 2\nsolution = solve_it(total_age - sum_of_ages, num_members)\nanswer = solution[num_members]"]}
{"id": 102, "answer": "D", "completion": "M = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nanswer = simplify(cost_after_dropout - cost_before_dropout)", "completions": ["M = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nanswer = simplify(cost_after_dropout - cost_before_dropout)"]}
{"id": 103, "answer": "E", "completion": "cost_price = 1200\nprofit_percentage = 20\ndiscount_percentage = 20\nselling_price = cost_price * (1 + profit_percentage / 100)\nmarked_price = selling_price / (1 - discount_percentage / 100)\nanswer = round(marked_price)", "completions": ["cost_price = 1200\nprofit_percentage = 20\ndiscount_percentage = 20\nselling_price = cost_price * (1 + profit_percentage / 100)\nmarked_price = selling_price / (1 - discount_percentage / 100)\nanswer = round(marked_price)"]}
{"id": 104, "answer": "E", "completion": "train_A_speed = 40\ntrain_B_speed = 72\ntime_difference = 3\ndistance_covered_by_train_A = train_A_speed * time_difference\n\nrelative_speed = train_B_speed - train_A_speed\ntime_to_meet = distance_covered_by_train_A / relative_speed\ntotal_time = time_difference + time_to_meet\nhours = int(total_time)\nminutes = int((total_time - hours) * 60)\n\nmeeting_time = datetime.strptime(\"11:00\", \"%H:%M\") + timedelta(hours=hours, minutes=minutes)\nanswer = meeting_time.strftime(\"%I %p\")", "completions": ["train_A_speed = 40\ntrain_B_speed = 72\ntime_difference = 3\ndistance_covered_by_train_A = train_A_speed * time_difference\n\nrelative_speed = train_B_speed - train_A_speed\ntime_to_meet = distance_covered_by_train_A / relative_speed\ntotal_time = time_difference + time_to_meet\nhours = int(total_time)\nminutes = int((total_time - hours) * 60)\n\nmeeting_time = datetime.strptime(\"11:00\", \"%H:%M\") + timedelta(hours=hours, minutes=minutes)\nanswer = meeting_time.strftime(\"%I %p\")"]}
{"id": 105, "answer": "B", "completion": "john_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nmark_after_getting_half_john_money = mark_money + john_money / 2\njohn_after_giving_one_third_mark_money = john_money + mark_money / 3\nsolution = solve_it([mark_after_getting_half_john_money - 75, john_after_giving_one_third_mark_money - 75], [john_money, mark_money])\nanswer = solution[john_money]", "completions": ["john_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nmark_after_getting_half_john_money = mark_money + john_money / 2\njohn_after_giving_one_third_mark_money = john_money + mark_money / 3\nsolution = solve_it([mark_after_getting_half_john_money - 75, john_after_giving_one_third_mark_money - 75], [john_money, mark_money])\nanswer = solution[john_money]"]}
{"id": 106, "answer": "D", "completion": "initial_lilies = 64\ndoubling_days = 2\nfull_coverage_days = 60\n\n# Calculate the number of times the lilies double to cover the lake\ndoubling_times = full_coverage_days / doubling_days\n\n# Calculate the number of days it takes for 64 lilies to double the same number of times\ndays_for_64_lilies = doubling_days * (doubling_times - math.log2(initial_lilies))\n\nanswer = days_for_64_lilies\nanswer_option = 'D)53'", "completions": ["initial_lilies = 64\ndoubling_days = 2\nfull_coverage_days = 60\n\n# Calculate the number of times the lilies double to cover the lake\ndoubling_times = full_coverage_days / doubling_days\n\n# Calculate the number of days it takes for 64 lilies to double the same number of times\ndays_for_64_lilies = doubling_days * (doubling_times - math.log2(initial_lilies))\n\nanswer = days_for_64_lilies\nanswer_option = 'D)53'"]}
{"id": 107, "answer": "A", "completion": "x = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x * x * x * x\nwork_done_by_y_men = y * y * y * y\nanswer = simplify(work_done_by_y_men / work_done_by_x_men)", "completions": ["x = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x * x * x * x\nwork_done_by_y_men = y * y * y * y\nanswer = simplify(work_done_by_y_men / work_done_by_x_men)"]}
{"id": 108, "answer": "B", "completion": "total_points = 6\nquadrilaterals = combinations(total_points, 4)\nanswer = quadrilaterals", "completions": ["total_points = 6\nquadrilaterals = combinations(total_points, 4)\nanswer = quadrilaterals"]}
{"id": 109, "answer": "E", "completion": "minor_arc_AC = 160\nminor_arc_BD = 150\nminor_arc_AB = minor_arc_AC / 2\nminor_arc_AD = minor_arc_AB + minor_arc_BD\nanswer = minor_arc_AD", "completions": ["minor_arc_AC = 160\nminor_arc_BD = 150\nminor_arc_AB = minor_arc_AC / 2\nminor_arc_AD = minor_arc_AB + minor_arc_BD\nanswer = minor_arc_AD"]}
{"id": 110, "answer": "A", "completion": "winter_vacation = 75\nwinter_and_summer_vacation = 40\nneither_vacation = 20\nsummer_vacation = 100 - neither_vacation - winter_vacation\nsummer_vacation_only = summer_vacation - winter_and_summer_vacation\nanswer = summer_vacation_only", "completions": ["winter_vacation = 75\nwinter_and_summer_vacation = 40\nneither_vacation = 20\nsummer_vacation = 100 - neither_vacation - winter_vacation\nsummer_vacation_only = summer_vacation - winter_and_summer_vacation\nanswer = summer_vacation_only"]}
{"id": 111, "answer": "D", "completion": "top_width = 10\nbottom_width = 6\narea = 640\ndepth = Symbol('depth', positive=True)\ntrapezium_area = (top_width + bottom_width) * depth / 2\nsolution = solve_it(trapezium_area - area, depth)\nanswer = solution[depth]", "completions": ["top_width = 10\nbottom_width = 6\narea = 640\ndepth = Symbol('depth', positive=True)\ntrapezium_area = (top_width + bottom_width) * depth / 2\nsolution = solve_it(trapezium_area - area, depth)\nanswer = solution[depth]"]}
{"id": 112, "answer": "D", "completion": "total_matches = Symbol('total_matches', positive=True)\nwon_matches = 20\nlost_matches = 0.3 * total_matches\nsolution = solve_it(total_matches - won_matches - lost_matches, total_matches)\nanswer = solution[total_matches] - won_matches", "completions": ["total_matches = Symbol('total_matches', positive=True)\nwon_matches = 20\nlost_matches = 0.3 * total_matches\nsolution = solve_it(total_matches - won_matches - lost_matches, total_matches)\nanswer = solution[total_matches] - won_matches"]}
{"id": 113, "answer": "D", "completion": "radius = 10\nrevolutions_per_minute = 300\ntime = 30\n\n# Convert revolutions per minute to revolutions per second\nrevolutions_per_second = revolutions_per_minute / 60\n\n# Calculate the number of revolutions in 30 seconds\ntotal_revolutions = revolutions_per_second * time\n\n# Calculate the distance traveled by the point on the edge of the fan blade\n# The distance traveled in one revolution is the circumference of the circle, which is 2 * pi * radius\ndistance_per_revolution = 2 * pi * radius\ntotal_distance = distance_per_revolution * total_revolutions\n\nanswer = total_distance\nanswer = round(answer, 2)\nanswer = f\"{answer}pi\"  # Convert the answer to the format in the options\nanswer", "completions": ["radius = 10\nrevolutions_per_minute = 300\ntime = 30\n\n# Convert revolutions per minute to revolutions per second\nrevolutions_per_second = revolutions_per_minute / 60\n\n# Calculate the number of revolutions in 30 seconds\ntotal_revolutions = revolutions_per_second * time\n\n# Calculate the distance traveled by the point on the edge of the fan blade\n# The distance traveled in one revolution is the circumference of the circle, which is 2 * pi * radius\ndistance_per_revolution = 2 * pi * radius\ntotal_distance = distance_per_revolution * total_revolutions\n\nanswer = total_distance\nanswer = round(answer, 2)\nanswer = f\"{answer}pi\"  # Convert the answer to the format in the options\nanswer"]}
{"id": 114, "answer": "E", "completion": "n = Symbol('n', positive=True)\nx = (n**2 + 2*sqrt(n)*(n + 4) + 16) / (n + 4*sqrt(n) + 4)\n\nmin_value = x.subs(n, 36)\nmax_value = x.subs(n, 72)\n\nanswer = f\"{min_value} < x < {max_value}\"", "completions": ["n = Symbol('n', positive=True)\nx = (n**2 + 2*sqrt(n)*(n + 4) + 16) / (n + 4*sqrt(n) + 4)\n\nmin_value = x.subs(n, 36)\nmax_value = x.subs(n, 72)\n\nanswer = f\"{min_value} < x < {max_value}\""]}
{"id": 115, "answer": "C", "completion": "shuttle_length = Symbol('shuttle_length', positive=True)\nmax_speed = 700 / 40\ntime_to_pass_point = 5\ndistance_to_pass_point = max_speed * time_to_pass_point\nanswer = distance_to_pass_point - shuttle_length\nsolution = solve_it(answer, shuttle_length)\nanswer = solution[shuttle_length]", "completions": ["shuttle_length = Symbol('shuttle_length', positive=True)\nmax_speed = 700 / 40\ntime_to_pass_point = 5\ndistance_to_pass_point = max_speed * time_to_pass_point\nanswer = distance_to_pass_point - shuttle_length\nsolution = solve_it(answer, shuttle_length)\nanswer = solution[shuttle_length]"]}
{"id": 116, "answer": "B", "completion": "C_join_time = Symbol('C_join_time', positive=True)\ntotal_months = 12\nA_investment = 40000\nB_investment = 60000\nC_investment = 120000\ntotal_profit = 375000\nC_share = 150000\nA_share = A_investment * total_months\nB_share = B_investment * (total_months - 2)\nC_share = C_investment * (total_months - 2 - C_join_time)\ntotal_share = A_share + B_share + C_share\nsolution = solve_it(C_share - total_profit * (C_investment / total_share), C_join_time)\nanswer = solution[C_join_time]", "completions": ["C_join_time = Symbol('C_join_time', positive=True)\ntotal_months = 12\nA_investment = 40000\nB_investment = 60000\nC_investment = 120000\ntotal_profit = 375000\nC_share = 150000\nA_share = A_investment * total_months\nB_share = B_investment * (total_months - 2)\nC_share = C_investment * (total_months - 2 - C_join_time)\ntotal_share = A_share + B_share + C_share\nsolution = solve_it(C_share - total_profit * (C_investment / total_share), C_join_time)\nanswer = solution[C_join_time]"]}
{"id": 117, "answer": "C", "completion": "side = 20\nradius = side / 2\ntotal_area = side ** 2\nsemi_circle_area = pi * radius ** 2 / 2\nremaining_area = total_area - 2 * semi_circle_area\nanswer = round(remaining_area, 2)", "completions": ["side = 20\nradius = side / 2\ntotal_area = side ** 2\nsemi_circle_area = pi * radius ** 2 / 2\nremaining_area = total_area - 2 * semi_circle_area\nanswer = round(remaining_area, 2)"]}
{"id": 118, "answer": "A", "completion": "M = Symbol('M')\nN = Symbol('N')\ntotal_distance = M + N\ntotal_time = 4 + 4\naverage_speed = total_distance / total_time\nanswer = simplify(average_speed)", "completions": ["M = Symbol('M')\nN = Symbol('N')\ntotal_distance = M + N\ntotal_time = 4 + 4\naverage_speed = total_distance / total_time\nanswer = simplify(average_speed)"]}
{"id": 119, "answer": "D", "completion": "num_men = Symbol('num_men', positive=True)\nwork_done_by_8_men_in_6_days = 8 * 6\nwork_done_by_num_men_in_half_day = num_men * 1/2\nsolution = solve_it(work_done_by_8_men_in_6_days - work_done_by_num_men_in_half_day, num_men)\nanswer = solution[num_men]", "completions": ["num_men = Symbol('num_men', positive=True)\nwork_done_by_8_men_in_6_days = 8 * 6\nwork_done_by_num_men_in_half_day = num_men * 1/2\nsolution = solve_it(work_done_by_8_men_in_6_days - work_done_by_num_men_in_half_day, num_men)\nanswer = solution[num_men]"]}
{"id": 120, "answer": "E", "completion": "num_boys = 64\nnum_girls = 40\nnew_boys = Symbol('new_boys', positive=True)\nnew_girls = Symbol('new_girls', positive=True)\ntotal_boys = num_boys + new_boys\ntotal_girls = num_girls + new_girls\nsolution = solve_it([total_boys / total_girls - 4 / 3, new_boys - new_girls], [new_boys, new_girls])\nanswer = total_boys.subs(solution) + total_girls.subs(solution)\nanswer_option = 'B)288'", "completions": ["num_boys = 64\nnum_girls = 40\nnew_boys = Symbol('new_boys', positive=True)\nnew_girls = Symbol('new_girls', positive=True)\ntotal_boys = num_boys + new_boys\ntotal_girls = num_girls + new_girls\nsolution = solve_it([total_boys / total_girls - 4 / 3, new_boys - new_girls], [new_boys, new_girls])\nanswer = total_boys.subs(solution) + total_girls.subs(solution)\nanswer_option = 'B)288'"]}
{"id": 121, "answer": "B", "completion": "speed = 12\ndistance = 48\ntime = distance / speed\nanswer = time * 60  # convert hours to minutes\nanswer = 'B)240'", "completions": ["speed = 12\ndistance = 48\ntime = distance / speed\nanswer = time * 60  # convert hours to minutes\nanswer = 'B)240'"]}
{"id": 122, "answer": "A", "completion": "distance = Symbol('distance', positive=True)\ntime_to_B = distance / 70\ntime_from_B = distance / 90\ntotal_time = time_to_B + time_from_B\ntime_remaining = total_time - 3\ndistance_remaining = 70\nsolution = solve_it(distance - distance_remaining - 70 * time_remaining, distance)\nanswer = solution[distance]", "completions": ["distance = Symbol('distance', positive=True)\ntime_to_B = distance / 70\ntime_from_B = distance / 90\ntotal_time = time_to_B + time_from_B\ntime_remaining = total_time - 3\ndistance_remaining = 70\nsolution = solve_it(distance - distance_remaining - 70 * time_remaining, distance)\nanswer = solution[distance]"]}
{"id": 123, "answer": "A", "completion": "number = Symbol('number', positive=True)\nreduced_number = (number - 30) / 3\nsolution = solve_it(number - 3 * reduced_number - 30, number)\nanswer = solution[number] * 0.5", "completions": ["number = Symbol('number', positive=True)\nreduced_number = (number - 30) / 3\nsolution = solve_it(number - 3 * reduced_number - 30, number)\nanswer = solution[number] * 0.5"]}
{"id": 124, "answer": "B", "completion": "boat_speed = 4\nagainst_current_speed = 2\ncurrent_speed = boat_speed - against_current_speed\nalong_current_speed = boat_speed + current_speed\nanswer = along_current_speed\n\n# Answer option: ['A)15 kmph', 'B)6 kmph', 'C)12 kmph', 'D)14 kmph', 'E)6 kmph']\n# The correct answer is B)6 kmph.", "completions": ["boat_speed = 4\nagainst_current_speed = 2\ncurrent_speed = boat_speed - against_current_speed\nalong_current_speed = boat_speed + current_speed\nanswer = along_current_speed\n\n# Answer option: ['A)15 kmph', 'B)6 kmph', 'C)12 kmph', 'D)14 kmph', 'E)6 kmph']\n# The correct answer is B)6 kmph."]}
{"id": 125, "answer": "A", "completion": "a = Symbol('a', positive=True, integer=True)\nb = Symbol('b', positive=True, integer=True)\nc = Symbol('c', positive=True, integer=True)\nsum_of_digits = a + b + c\nsum_of_squares = a**2 + b**2 + c**2\noriginal_number = 100 * a + 10 * b + c\nreversed_number = 100 * c + 10 * b + a\nsolution = solve_it([sum_of_digits - 17, sum_of_squares - 109, original_number - reversed_number - 495], [a, b, c])\nanswer = 100 * solution[a] + 10 * solution[b] + solution[c]", "completions": ["a = Symbol('a', positive=True, integer=True)\nb = Symbol('b', positive=True, integer=True)\nc = Symbol('c', positive=True, integer=True)\nsum_of_digits = a + b + c\nsum_of_squares = a**2 + b**2 + c**2\noriginal_number = 100 * a + 10 * b + c\nreversed_number = 100 * c + 10 * b + a\nsolution = solve_it([sum_of_digits - 17, sum_of_squares - 109, original_number - reversed_number - 495], [a, b, c])\nanswer = 100 * solution[a] + 10 * solution[b] + solution[c]"]}
{"id": 126, "answer": "B", "completion": "zinc_in_X = 6 / (6 + 9)\ncopper_in_X = 9 / (6 + 9)\nzinc_in_Y = 7 / (7 + 11)\ncopper_in_Y = 11 / (7 + 11)\n\nzinc_in_Z = 40 * zinc_in_X + 60 * zinc_in_Y\ncopper_in_Z = 40 * copper_in_X + 60 * copper_in_Y\n\nratio = simplify(zinc_in_Z / copper_in_Z)\nanswer = (ratio.numerator, ratio.denominator)", "completions": ["zinc_in_X = 6 / (6 + 9)\ncopper_in_X = 9 / (6 + 9)\nzinc_in_Y = 7 / (7 + 11)\ncopper_in_Y = 11 / (7 + 11)\n\nzinc_in_Z = 40 * zinc_in_X + 60 * zinc_in_Y\ncopper_in_Z = 40 * copper_in_X + 60 * copper_in_Y\n\nratio = simplify(zinc_in_Z / copper_in_Z)\nanswer = (ratio.numerator, ratio.denominator)"]}
{"id": 127, "answer": "D", "completion": "total_contributed = 16000 + 4000\nhoopsmot_share = 16000 / total_contributed\ntotal_senators = 30\nhoopsmot_senators = hoopsmot_share * total_senators\nanswer = round(hoopsmot_senators)", "completions": ["total_contributed = 16000 + 4000\nhoopsmot_share = 16000 / total_contributed\ntotal_senators = 30\nhoopsmot_senators = hoopsmot_share * total_senators\nanswer = round(hoopsmot_senators)"]}
{"id": 128, "answer": "B", "completion": "num1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ndifference_of_squares = (num1**2) - (num2**2)\nsum_of_numbers = num1 + num2\nsolution = solve_it([difference_of_squares - 256000, sum_of_numbers - 1000], [num1, num2])\nanswer = (solution[num1], solution[num2])", "completions": ["num1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ndifference_of_squares = (num1**2) - (num2**2)\nsum_of_numbers = num1 + num2\nsolution = solve_it([difference_of_squares - 256000, sum_of_numbers - 1000], [num1, num2])\nanswer = (solution[num1], solution[num2])"]}
{"id": 129, "answer": "D", "completion": "earth_weight = 211\nvenus_weight = 182\npercentage = (venus_weight / earth_weight) * 100\nanswer = round(percentage)", "completions": ["earth_weight = 211\nvenus_weight = 182\npercentage = (venus_weight / earth_weight) * 100\nanswer = round(percentage)"]}
{"id": 130, "answer": "A", "completion": "distance_walked_at_5kmph = 5 * 6\ndistance_walked_at_4kmph = 4 * 12\ntotal_distance_walked = distance_walked_at_5kmph + distance_walked_at_4kmph\ntotal_time_walked = 6 + 12\naverage_speed = total_distance_walked / total_time_walked\nanswer = average_speed", "completions": ["distance_walked_at_5kmph = 5 * 6\ndistance_walked_at_4kmph = 4 * 12\ntotal_distance_walked = distance_walked_at_5kmph + distance_walked_at_4kmph\ntotal_time_walked = 6 + 12\naverage_speed = total_distance_walked / total_time_walked\nanswer = average_speed"]}
{"id": 131, "answer": "E", "completion": "expression = ((272 - 32) * (124 + 176)) / (17 * 15 - 15)\nanswer = expression.evalf()", "completions": ["expression = ((272 - 32) * (124 + 176)) / (17 * 15 - 15)\nanswer = expression.evalf()"]}
{"id": 132, "answer": "B", "completion": "total_income = 9000\nmedian_income = 3000\nnum_members = Symbol('num_members', positive=True, integer=True)\ntotal_income_formula = num_members * median_income\nsolution = solve_it(total_income_formula - total_income, num_members)\nanswer = solution[num_members]", "completions": ["total_income = 9000\nmedian_income = 3000\nnum_members = Symbol('num_members', positive=True, integer=True)\ntotal_income_formula = num_members * median_income\nsolution = solve_it(total_income_formula - total_income, num_members)\nanswer = solution[num_members]"]}
{"id": 133, "answer": "E", "completion": "adult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nanswer = total_fare", "completions": ["adult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nanswer = total_fare"]}
{"id": 134, "answer": "C", "completion": "num_employees = Symbol('num_employees', positive=True, integer=True)\ntotal_amount = 600000\nextra_amount = 624000\ncontribution = total_amount / num_employees\nextra_contribution = extra_amount / num_employees\nsolution = solve_it(contribution + 60 - extra_contribution, num_employees)\nanswer = solution[num_employees]", "completions": ["num_employees = Symbol('num_employees', positive=True, integer=True)\ntotal_amount = 600000\nextra_amount = 624000\ncontribution = total_amount / num_employees\nextra_contribution = extra_amount / num_employees\nsolution = solve_it(contribution + 60 - extra_contribution, num_employees)\nanswer = solution[num_employees]"]}
{"id": 135, "answer": "A", "completion": "total_voters = 5000\neligible_voters = total_voters * 0.8\nwinning_margin = 0.15 * eligible_voters\nvotes_for_winner = (eligible_voters / 2) + winning_margin\nanswer = round(votes_for_winner)", "completions": ["total_voters = 5000\neligible_voters = total_voters * 0.8\nwinning_margin = 0.15 * eligible_voters\nvotes_for_winner = (eligible_voters / 2) + winning_margin\nanswer = round(votes_for_winner)"]}
{"id": 136, "answer": "A", "completion": "num_copper = Symbol('num_copper', integer=True, positive=True)\nnum_brass = Symbol('num_brass', integer=True, positive=True)\ntotal_money = 340\ncopper_value = 20\nbrass_value = 25\nsolution = solve_it([num_copper * copper_value + num_brass * brass_value - total_money], [num_copper, num_brass])\nmin_copper = min([sol[num_copper] for sol in solution if sol[num_copper] >= 0])\nanswer = min_copper", "completions": ["num_copper = Symbol('num_copper', integer=True, positive=True)\nnum_brass = Symbol('num_brass', integer=True, positive=True)\ntotal_money = 340\ncopper_value = 20\nbrass_value = 25\nsolution = solve_it([num_copper * copper_value + num_brass * brass_value - total_money], [num_copper, num_brass])\nmin_copper = min([sol[num_copper] for sol in solution if sol[num_copper] >= 0])\nanswer = min_copper"]}
{"id": 137, "answer": "E", "completion": "time = 10\nram_speed = 20\nkrishna_speed = 40\ndistance_covered_by_ram = ram_speed * time\ndistance_covered_by_krishna = krishna_speed * time\ntotal_distance = distance_covered_by_ram + distance_covered_by_krishna\nanswer = total_distance", "completions": ["time = 10\nram_speed = 20\nkrishna_speed = 40\ndistance_covered_by_ram = ram_speed * time\ndistance_covered_by_krishna = krishna_speed * time\ntotal_distance = distance_covered_by_ram + distance_covered_by_krishna\nanswer = total_distance"]}
{"id": 138, "answer": "C", "completion": "distance_x = 320\ntime_x = 8\ndistance_y = 415\ntime_y = 5\nspeed_x = distance_x / time_x\nspeed_y = distance_y / time_y\ndifference = abs(speed_x - speed_y)\nanswer = difference", "completions": ["distance_x = 320\ntime_x = 8\ndistance_y = 415\ntime_y = 5\nspeed_x = distance_x / time_x\nspeed_y = distance_y / time_y\ndifference = abs(speed_x - speed_y)\nanswer = difference"]}
{"id": 139, "answer": "D", "completion": "distance = Symbol('distance', positive=True)\nrunning_time = distance / 10\nwalking_time = distance / 5\ntotal_time = running_time + walking_time\nsolution = solve_it(total_time - 1, distance)\nanswer = solution[distance]", "completions": ["distance = Symbol('distance', positive=True)\nrunning_time = distance / 10\nwalking_time = distance / 5\ntotal_time = running_time + walking_time\nsolution = solve_it(total_time - 1, distance)\nanswer = solution[distance]"]}
{"id": 140, "answer": "E", "completion": "total_golf_balls = 600\ngolf_balls_sold = 0.8 * total_golf_balls\nyellow_golf_balls_sold = golf_balls_sold / 2\nwhite_golf_balls_sold = golf_balls_sold / 2\nyellow_golf_balls_beginning = total_golf_balls / 2 + yellow_golf_balls_sold\nanswer = yellow_golf_balls_beginning\nanswer_option = 'E)360'", "completions": ["total_golf_balls = 600\ngolf_balls_sold = 0.8 * total_golf_balls\nyellow_golf_balls_sold = golf_balls_sold / 2\nwhite_golf_balls_sold = golf_balls_sold / 2\nyellow_golf_balls_beginning = total_golf_balls / 2 + yellow_golf_balls_sold\nanswer = yellow_golf_balls_beginning\nanswer_option = 'E)360'"]}
{"id": 141, "answer": "B", "completion": "flagstaff_height = 17.5\nflagstaff_shadow = 40.25\nbuilding_shadow = 28.75\nbuilding_height = Symbol('building_height', positive=True)\nratio = flagstaff_height / flagstaff_shadow\nsolution = solve_it(building_height - ratio * building_shadow, building_height)\nanswer = solution[building_height]", "completions": ["flagstaff_height = 17.5\nflagstaff_shadow = 40.25\nbuilding_shadow = 28.75\nbuilding_height = Symbol('building_height', positive=True)\nratio = flagstaff_height / flagstaff_shadow\nsolution = solve_it(building_height - ratio * building_shadow, building_height)\nanswer = solution[building_height]"]}
{"id": 142, "answer": "B", "completion": "time = Symbol('time', positive=True)\ncar1_speed = 55\ncar2_speed = 52\ndistance_between_cars = 15\nrelative_speed = car1_speed - car2_speed\nsolution = solve_it(relative_speed * time - distance_between_cars, time)\nanswer = solution[time]", "completions": ["time = Symbol('time', positive=True)\ncar1_speed = 55\ncar2_speed = 52\ndistance_between_cars = 15\nrelative_speed = car1_speed - car2_speed\nsolution = solve_it(relative_speed * time - distance_between_cars, time)\nanswer = solution[time]"]}
{"id": 143, "answer": "E", "completion": "probability_A = 0.6\nprobability_A_or_B = 0.96\nprobability_B = Symbol('probability_B', positive=True)\nprobability_A_and_B = probability_A * probability_B\nprobability_A_and_not_B = probability_A - probability_A_and_B\nprobability_not_A_and_B = probability_B - probability_A_and_B\nprobability_not_A_and_not_B = 1 - probability_A - probability_B + probability_A_and_B\nprobability_none = 1 - probability_A_or_B\nsolution = solve_it(probability_not_A_and_not_B - probability_none, probability_B)\nanswer = solution[probability_B]", "completions": ["probability_A = 0.6\nprobability_A_or_B = 0.96\nprobability_B = Symbol('probability_B', positive=True)\nprobability_A_and_B = probability_A * probability_B\nprobability_A_and_not_B = probability_A - probability_A_and_B\nprobability_not_A_and_B = probability_B - probability_A_and_B\nprobability_not_A_and_not_B = 1 - probability_A - probability_B + probability_A_and_B\nprobability_none = 1 - probability_A_or_B\nsolution = solve_it(probability_not_A_and_not_B - probability_none, probability_B)\nanswer = solution[probability_B]"]}
{"id": 144, "answer": "A", "completion": "cube_side = Symbol('cube_side', positive=True)\nsphere_radius = cube_side / 2\ncube_volume = cube_side ** 3\nsphere_volume = 4 / 3 * pi * sphere_radius ** 3\nvolume_ratio = simplify(cube_volume / sphere_volume)\nanswer = volume_ratio", "completions": ["cube_side = Symbol('cube_side', positive=True)\nsphere_radius = cube_side / 2\ncube_volume = cube_side ** 3\nsphere_volume = 4 / 3 * pi * sphere_radius ** 3\nvolume_ratio = simplify(cube_volume / sphere_volume)\nanswer = volume_ratio"]}
{"id": 145, "answer": "B", "completion": "To ensure that you have at least two ties of the same color, you should take out one more tie than the number of colors. In this case, there are 5 different colors, so you should take out 5 + 1 = 6 ties. Answer: E)6.", "completions": ["To ensure that you have at least two ties of the same color, you should take out one more tie than the number of colors. In this case, there are 5 different colors, so you should take out 5 + 1 = 6 ties. Answer: E)6."]}
{"id": 146, "answer": "D", "completion": "answer = 25 / 12 * 5", "completions": ["answer = 25 / 12 * 5"]}
{"id": 147, "answer": "A", "completion": "answer = math.log2(4)", "completions": ["answer = math.log2(4)"]}
{"id": 148, "answer": "A", "completion": "purchase_price = 450\nselling_price_per_kg = 7.50\ntotal_selling_price = 90 * selling_price_per_kg\nprofit = total_selling_price - purchase_price\npercentage_gain = (profit / purchase_price) * 100\nanswer = percentage_gain", "completions": ["purchase_price = 450\nselling_price_per_kg = 7.50\ntotal_selling_price = 90 * selling_price_per_kg\nprofit = total_selling_price - purchase_price\npercentage_gain = (profit / purchase_price) * 100\nanswer = percentage_gain"]}
{"id": 149, "answer": "C", "completion": "train_M_duration = 4 * 60  # in minutes\ntrain_N_duration = 3.5 * 60  # in minutes\ntime_difference = 2 * 60  # in minutes\n\n# Let x be the time (in minutes) it takes for the trains to cross each other\nx = Symbol('x', positive=True)\n\n# Distance = Speed * Time\n# Train M and Train N travel the same distance when they cross each other\n# So, (Train M speed) * x = (Train N speed) * (x - time_difference)\ntrain_M_speed = x / train_M_duration\ntrain_N_speed = (x - time_difference) / train_N_duration\n\nsolution = solve_it(train_M_speed - train_N_speed, x)\nanswer = solution[x] / 60  # convert to hours", "completions": ["train_M_duration = 4 * 60  # in minutes\ntrain_N_duration = 3.5 * 60  # in minutes\ntime_difference = 2 * 60  # in minutes\n\n# Let x be the time (in minutes) it takes for the trains to cross each other\nx = Symbol('x', positive=True)\n\n# Distance = Speed * Time\n# Train M and Train N travel the same distance when they cross each other\n# So, (Train M speed) * x = (Train N speed) * (x - time_difference)\ntrain_M_speed = x / train_M_duration\ntrain_N_speed = (x - time_difference) / train_N_duration\n\nsolution = solve_it(train_M_speed - train_N_speed, x)\nanswer = solution[x] / 60  # convert to hours"]}
{"id": 150, "answer": "B", "completion": "time = Symbol('time', positive=True)\njanice_speed = 10\njennie_speed = 20\ntotal_distance = 1\ncombined_speed = janice_speed + jennie_speed\nsolution = solve_it(time * combined_speed - total_distance, time)\nanswer = solution[time] * 60  # Convert hours to minutes", "completions": ["time = Symbol('time', positive=True)\njanice_speed = 10\njennie_speed = 20\ntotal_distance = 1\ncombined_speed = janice_speed + jennie_speed\nsolution = solve_it(time * combined_speed - total_distance, time)\nanswer = solution[time] * 60  # Convert hours to minutes"]}
{"id": 151, "answer": "E", "completion": "M = Symbol('M', positive=True)\nmarks_in_exam = 504\nconverted_marks = 420\nsolution = solve_it(marks_in_exam / M - converted_marks / 800, M)\nanswer = solution[M]", "completions": ["M = Symbol('M', positive=True)\nmarks_in_exam = 504\nconverted_marks = 420\nsolution = solve_it(marks_in_exam / M - converted_marks / 800, M)\nanswer = solution[M]"]}
{"id": 152, "answer": "E", "completion": "num_people_first_party = 8\nnum_people_second_party = 12\nnum_bottles_first_party = 10\n\nnum_bottles_second_party = (num_bottles_first_party * num_people_second_party) / num_people_first_party\nanswer = round(num_bottles_second_party)", "completions": ["num_people_first_party = 8\nnum_people_second_party = 12\nnum_bottles_first_party = 10\n\nnum_bottles_second_party = (num_bottles_first_party * num_people_second_party) / num_people_first_party\nanswer = round(num_bottles_second_party)"]}
{"id": 153, "answer": "D", "completion": "height1 = 4\nshadow1 = 10\nheight2 = 6\nshadow2 = Symbol('shadow2', positive=True)\nproportion = height1 / shadow1\nsolution = solve_it(height2 / shadow2 - proportion, shadow2)\nanswer = solution[shadow2]", "completions": ["height1 = 4\nshadow1 = 10\nheight2 = 6\nshadow2 = Symbol('shadow2', positive=True)\nproportion = height1 / shadow1\nsolution = solve_it(height2 / shadow2 - proportion, shadow2)\nanswer = solution[shadow2]"]}
{"id": 154, "answer": "C", "completion": "height = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\ncost = 260\npaper_width = 0.5\npaper_cost_per_meter = 2\narea_for_doors_and_windows = 15\ntotal_area_to_be_papered = (cost / paper_cost_per_meter) * paper_width + area_for_doors_and_windows\nroom_area = 2 * height * semi_perimeter\nsolution = solve_it([height / semi_perimeter - 2 / 5, room_area - total_area_to_be_papered], [height, semi_perimeter])\nanswer = solution[height]", "completions": ["height = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\ncost = 260\npaper_width = 0.5\npaper_cost_per_meter = 2\narea_for_doors_and_windows = 15\ntotal_area_to_be_papered = (cost / paper_cost_per_meter) * paper_width + area_for_doors_and_windows\nroom_area = 2 * height * semi_perimeter\nsolution = solve_it([height / semi_perimeter - 2 / 5, room_area - total_area_to_be_papered], [height, semi_perimeter])\nanswer = solution[height]"]}
{"id": 155, "answer": "B", "completion": "k = Symbol('k', positive=True)\nleast_integer = -50\nsum_of_integers = 51\ntotal_sum = sum([least_integer + i for i in range(k)])\nsolution = solve_it(total_sum - sum_of_integers, k)\nanswer = solution[k]", "completions": ["k = Symbol('k', positive=True)\nleast_integer = -50\nsum_of_integers = 51\ntotal_sum = sum([least_integer + i for i in range(k)])\nsolution = solve_it(total_sum - sum_of_integers, k)\nanswer = solution[k]"]}
{"id": 156, "answer": "D", "completion": "num_songs = 10\nnum_selections_per_song = 5\ntotal_selections = num_songs * num_selections_per_song\nnum_students = total_selections // 2\nanswer = num_students", "completions": ["num_songs = 10\nnum_selections_per_song = 5\ntotal_selections = num_songs * num_selections_per_song\nnum_students = total_selections // 2\nanswer = num_students"]}
{"id": 157, "answer": "D", "completion": "m = Symbol('m')\nroot = 1.5\nquadratic_equation = root**2 + m*root + 22\nsolution = solve_it(quadratic_equation, m)\nanswer = solution[m]", "completions": ["m = Symbol('m')\nroot = 1.5\nquadratic_equation = root**2 + m*root + 22\nsolution = solve_it(quadratic_equation, m)\nanswer = solution[m]"]}
{"id": 158, "answer": "B", "completion": "The total number of ways in which the 10 speakers can speak is 10! (10 factorial). However, we need to account for the protocol that the PM should speak before the MP and the MP should speak before the MLA. \n\nLet's consider the PM, MP, and MLA as a single unit. Then, we have 8 other speakers and this unit, making a total of 9 units. The number of ways these 9 units can be arranged is 9!.\n\nNow, within this unit of PM, MP, and MLA, they can be arranged in 3! ways (PM before MP, MP before MLA). \n\nSo, the total number of ways the meeting can be held while observing the protocol is 9! * 3!.\n\nTherefore, the answer is B) 10!/6.", "completions": ["The total number of ways in which the 10 speakers can speak is 10! (10 factorial). However, we need to account for the protocol that the PM should speak before the MP and the MP should speak before the MLA. \n\nLet's consider the PM, MP, and MLA as a single unit. Then, we have 8 other speakers and this unit, making a total of 9 units. The number of ways these 9 units can be arranged is 9!.\n\nNow, within this unit of PM, MP, and MLA, they can be arranged in 3! ways (PM before MP, MP before MLA). \n\nSo, the total number of ways the meeting can be held while observing the protocol is 9! * 3!.\n\nTherefore, the answer is B) 10!/6."]}
{"id": 159, "answer": "A", "completion": "new_price = Symbol('new_price', positive=True)\nold_price = new_price / (1 - 0.15)\nnum_articles = 300 / new_price\nnum_articles_after_discount = 300 / old_price\nsolution = solve_it(num_articles_after_discount - num_articles - 5, new_price)\nanswer = solution[new_price]", "completions": ["new_price = Symbol('new_price', positive=True)\nold_price = new_price / (1 - 0.15)\nnum_articles = 300 / new_price\nnum_articles_after_discount = 300 / old_price\nsolution = solve_it(num_articles_after_discount - num_articles - 5, new_price)\nanswer = solution[new_price]"]}
{"id": 160, "answer": "A", "completion": "total_children = Symbol('total_children', positive=True)\nneha_position = 12\nradha_position = total_children - 6 + 1\nnew_neha_position = neha_position + 2\nnew_radha_position = radha_position - 2\nchildren_between = 6\nsolution = solve_it(new_neha_position - new_radha_position - children_between - 1, total_children)\nanswer = solution[total_children]", "completions": ["total_children = Symbol('total_children', positive=True)\nneha_position = 12\nradha_position = total_children - 6 + 1\nnew_neha_position = neha_position + 2\nnew_radha_position = radha_position - 2\nchildren_between = 6\nsolution = solve_it(new_neha_position - new_radha_position - children_between - 1, total_children)\nanswer = solution[total_children]"]}
{"id": 161, "answer": "A", "completion": "initial_sand = 0.3 * 10\ninitial_clay = 0.7 * 10\nremoved_mixture = Symbol('removed_mixture', positive=True)\nfinal_sand = initial_sand - 0.3 * removed_mixture + removed_mixture\nfinal_clay = initial_clay - 0.7 * removed_mixture\nsolution = solve_it(final_sand - final_clay, removed_mixture)\nanswer = solution[removed_mixture]", "completions": ["initial_sand = 0.3 * 10\ninitial_clay = 0.7 * 10\nremoved_mixture = Symbol('removed_mixture', positive=True)\nfinal_sand = initial_sand - 0.3 * removed_mixture + removed_mixture\nfinal_clay = initial_clay - 0.7 * removed_mixture\nsolution = solve_it(final_sand - final_clay, removed_mixture)\nanswer = solution[removed_mixture]"]}
{"id": 162, "answer": "B", "completion": "income = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = Symbol('new_expenditure', positive=True)\nsolution = solve_it(new_expenditure / new_income - expenditure / income, new_expenditure)\nanswer = solution[new_expenditure] / new_income", "completions": ["income = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = Symbol('new_expenditure', positive=True)\nsolution = solve_it(new_expenditure / new_income - expenditure / income, new_expenditure)\nanswer = solution[new_expenditure] / new_income"]}
{"id": 163, "answer": "D", "completion": "num_white_tulips = 28\nnum_red_tulips = 98\ngreatest_common_divisor = math.gcd(num_white_tulips, num_red_tulips)\nanswer = greatest_common_divisor\nanswer_option = 'B)7'", "completions": ["num_white_tulips = 28\nnum_red_tulips = 98\ngreatest_common_divisor = math.gcd(num_white_tulips, num_red_tulips)\nanswer = greatest_common_divisor\nanswer_option = 'B)7'"]}
{"id": 164, "answer": "B", "completion": "sharon_work = 5\nkaren_work = 4\nsharon_rate = 1 / sharon_work\nkaren_rate = 1 / karen_work\ncombined_rate = sharon_rate + karen_rate\ntime_together = 1 / combined_rate\nanswer = time_together\n# Answer option: B)2 hours", "completions": ["sharon_work = 5\nkaren_work = 4\nsharon_rate = 1 / sharon_work\nkaren_rate = 1 / karen_work\ncombined_rate = sharon_rate + karen_rate\ntime_together = 1 / combined_rate\nanswer = time_together\n# Answer option: B)2 hours"]}
{"id": 165, "answer": "C", "completion": "x = Symbol('x', negative=True)\ny = Symbol('y', positive=True)\ninequality = Abs(x**3) > Abs(y**2)\nsolution = simplify(inequality)\nanswer = 'E)x < –y'", "completions": ["x = Symbol('x', negative=True)\ny = Symbol('y', positive=True)\ninequality = Abs(x**3) > Abs(y**2)\nsolution = simplify(inequality)\nanswer = 'E)x < –y'"]}
{"id": 166, "answer": "C", "completion": "pages_to_print = 100\nprinter_A_rate = 1/2\nprinter_B_rate = 1/2\ncombined_rate = printer_A_rate + printer_B_rate\ntime_to_print = pages_to_print / combined_rate\nanswer = time_to_print\nanswer_option = 'D)200 seconds'", "completions": ["pages_to_print = 100\nprinter_A_rate = 1/2\nprinter_B_rate = 1/2\ncombined_rate = printer_A_rate + printer_B_rate\ntime_to_print = pages_to_print / combined_rate\nanswer = time_to_print\nanswer_option = 'D)200 seconds'"]}
{"id": 167, "answer": "A", "completion": "distance = 75\nspeed_a = 9\nspeed_b = 6\ntotal_speed = speed_a + speed_b\ntime_to_meet = distance / total_speed\ndistance_a = speed_a * time_to_meet\nanswer = distance_a", "completions": ["distance = 75\nspeed_a = 9\nspeed_b = 6\ntotal_speed = speed_a + speed_b\ntime_to_meet = distance / total_speed\ndistance_a = speed_a * time_to_meet\nanswer = distance_a"]}
{"id": 168, "answer": "A", "completion": "actual_property_worth = 1023.65\nrecorded_property_worth = 1000\ndifference = actual_property_worth - recorded_property_worth\nanswer = difference", "completions": ["actual_property_worth = 1023.65\nrecorded_property_worth = 1000\ndifference = actual_property_worth - recorded_property_worth\nanswer = difference"]}
{"id": 169, "answer": "C", "completion": "trouser_cost = 70\nshirt_cost = 30\ntotal_cost = 810\nnum_trousers = Symbol('num_trousers', positive=True, integer=True)\nnum_shirts = Symbol('num_shirts', positive=True, integer=True)\ncost_equation = trouser_cost * num_trousers + shirt_cost * num_shirts - total_cost\nsolution = solve_it(cost_equation, [num_trousers, num_shirts], maximize=num_trousers)\nanswer = solution[num_trousers]", "completions": ["trouser_cost = 70\nshirt_cost = 30\ntotal_cost = 810\nnum_trousers = Symbol('num_trousers', positive=True, integer=True)\nnum_shirts = Symbol('num_shirts', positive=True, integer=True)\ncost_equation = trouser_cost * num_trousers + shirt_cost * num_shirts - total_cost\nsolution = solve_it(cost_equation, [num_trousers, num_shirts], maximize=num_trousers)\nanswer = solution[num_trousers]"]}
{"id": 170, "answer": "E", "completion": "cover_price = Symbol('cover_price', positive=True)\nsubscription_price = 42\nnum_issues = 15\ndiscount = 0.25\nsolution = solve_it(cover_price * num_issues * (1 - discount) - subscription_price, cover_price)\nanswer = solution[cover_price]", "completions": ["cover_price = Symbol('cover_price', positive=True)\nsubscription_price = 42\nnum_issues = 15\ndiscount = 0.25\nsolution = solve_it(cover_price * num_issues * (1 - discount) - subscription_price, cover_price)\nanswer = solution[cover_price]"]}
{"id": 171, "answer": "E", "completion": "heads = Symbol('heads', positive=True)\ntails = 20 - heads\nmoney_exchanged = 2 * heads - 3 * tails\nsolution = solve_it(money_exchanged, heads)\nanswer = solution[heads]", "completions": ["heads = Symbol('heads', positive=True)\ntails = 20 - heads\nmoney_exchanged = 2 * heads - 3 * tails\nsolution = solve_it(money_exchanged, heads)\nanswer = solution[heads]"]}
{"id": 172, "answer": "C", "completion": "distance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\ntime_to_meet_first = distance / (allen_speed + bob_speed)\nallen_distance_first = allen_speed * time_to_meet_first\nbob_distance_first = bob_speed * time_to_meet_first\nremaining_distance = distance - allen_distance_first\ntime_to_meet_second = remaining_distance / (allen_speed + bob_speed)\nallen_distance_second = allen_speed * time_to_meet_second\nbob_distance_second = bob_speed * time_to_meet_second\ntotal_allen_distance = allen_distance_first + allen_distance_second\ntotal_bob_distance = bob_distance_first + bob_distance_second\nsolution = solve_it(total_bob_distance - total_allen_distance - 48, distance)\nanswer = solution[distance]", "completions": ["distance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\ntime_to_meet_first = distance / (allen_speed + bob_speed)\nallen_distance_first = allen_speed * time_to_meet_first\nbob_distance_first = bob_speed * time_to_meet_first\nremaining_distance = distance - allen_distance_first\ntime_to_meet_second = remaining_distance / (allen_speed + bob_speed)\nallen_distance_second = allen_speed * time_to_meet_second\nbob_distance_second = bob_speed * time_to_meet_second\ntotal_allen_distance = allen_distance_first + allen_distance_second\ntotal_bob_distance = bob_distance_first + bob_distance_second\nsolution = solve_it(total_bob_distance - total_allen_distance - 48, distance)\nanswer = solution[distance]"]}
{"id": 173, "answer": "C", "completion": "new_tire_cost = 180\nnew_tire_lifetime = 4\nrepair_cost = 40\nrepair_lifetime = 1\n\nnew_tire_cost_per_year = new_tire_cost / new_tire_lifetime\nrepair_cost_per_year = repair_cost / repair_lifetime\n\npercent_difference = ((new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year) * 100\nanswer = percent_difference", "completions": ["new_tire_cost = 180\nnew_tire_lifetime = 4\nrepair_cost = 40\nrepair_lifetime = 1\n\nnew_tire_cost_per_year = new_tire_cost / new_tire_lifetime\nrepair_cost_per_year = repair_cost / repair_lifetime\n\npercent_difference = ((new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year) * 100\nanswer = percent_difference"]}
{"id": 174, "answer": "D", "completion": "shorter_piece = Symbol('shorter_piece', positive=True)\nlonger_piece = Symbol('longer_piece', positive=True)\ntotal_length = 20\nlength_difference = 3\nsolution = solve_it([shorter_piece + longer_piece - total_length, longer_piece - shorter_piece - length_difference], [shorter_piece, longer_piece])\nanswer = solution[longer_piece]", "completions": ["shorter_piece = Symbol('shorter_piece', positive=True)\nlonger_piece = Symbol('longer_piece', positive=True)\ntotal_length = 20\nlength_difference = 3\nsolution = solve_it([shorter_piece + longer_piece - total_length, longer_piece - shorter_piece - length_difference], [shorter_piece, longer_piece])\nanswer = solution[longer_piece]"]}
{"id": 175, "answer": "B", "completion": "principal = 5000\nannual_interest_rate = 0.12\ncompounding_frequency = 2\ntime = 1\n\namount = principal * (1 + annual_interest_rate / compounding_frequency) ** (compounding_frequency * time)\ninterest = amount - principal\nanswer = round(interest, 2)", "completions": ["principal = 5000\nannual_interest_rate = 0.12\ncompounding_frequency = 2\ntime = 1\n\namount = principal * (1 + annual_interest_rate / compounding_frequency) ** (compounding_frequency * time)\ninterest = amount - principal\nanswer = round(interest, 2)"]}
{"id": 176, "answer": "C", "completion": "M = 9\nA = 2\nD = 0\nB = 1\nE = 8\nR = 1\nI = 8\n\nanswer = \"C)9 2 0 1\"", "completions": ["M = 9\nA = 2\nD = 0\nB = 1\nE = 8\nR = 1\nI = 8\n\nanswer = \"C)9 2 0 1\""]}
{"id": 177, "answer": "D", "completion": "sachin_age_in_10_years = 40\nsachin_age_now = sachin_age_in_10_years - 10\nsachin_age_10_years_back = sachin_age_now - 10\najay_age_10_years_back = sachin_age_10_years_back / 2\najay_age_now = ajay_age_10_years_back + 10\nanswer = ajay_age_now", "completions": ["sachin_age_in_10_years = 40\nsachin_age_now = sachin_age_in_10_years - 10\nsachin_age_10_years_back = sachin_age_now - 10\najay_age_10_years_back = sachin_age_10_years_back / 2\najay_age_now = ajay_age_10_years_back + 10\nanswer = ajay_age_now"]}
{"id": 178, "answer": "D", "completion": "width = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter = 340\ngarden_width = 1\ncost_per_square_meter = 10\n\n# Calculate the dimensions of the rectangular plot\nsolution = solve_it(2 * (width + height) - perimeter, width)\nwidth_value = solution[width]\nheight_value = (perimeter - 2 * width_value) / 2\n\n# Calculate the area of the garden\nouter_area = (width_value + 2 * garden_width) * (height_value + 2 * garden_width)\ninner_area = width_value * height_value\ngarden_area = outer_area - inner_area\n\n# Calculate the cost of gardening\ncost = garden_area * cost_per_square_meter\nanswer = cost.subs(width, width_value)", "completions": ["width = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter = 340\ngarden_width = 1\ncost_per_square_meter = 10\n\n# Calculate the dimensions of the rectangular plot\nsolution = solve_it(2 * (width + height) - perimeter, width)\nwidth_value = solution[width]\nheight_value = (perimeter - 2 * width_value) / 2\n\n# Calculate the area of the garden\nouter_area = (width_value + 2 * garden_width) * (height_value + 2 * garden_width)\ninner_area = width_value * height_value\ngarden_area = outer_area - inner_area\n\n# Calculate the cost of gardening\ncost = garden_area * cost_per_square_meter\nanswer = cost.subs(width, width_value)"]}
{"id": 179, "answer": "B", "completion": "revenue_from_novels = 0.34\nrevenue_from_biographies = (1 - 0.34) / 3\nratio = revenue_from_novels / revenue_from_biographies\nanswer = round(ratio, 1)", "completions": ["revenue_from_novels = 0.34\nrevenue_from_biographies = (1 - 0.34) / 3\nratio = revenue_from_novels / revenue_from_biographies\nanswer = round(ratio, 1)"]}
{"id": 180, "answer": "D", "completion": "num_flowers = Symbol('num_flowers', positive=True)\nbypassed_flowers = 8\nbypass_rate = 0.05 / 100\nsolution = solve_it(num_flowers * bypass_rate - bypassed_flowers, num_flowers)\nanswer = solution[num_flowers]", "completions": ["num_flowers = Symbol('num_flowers', positive=True)\nbypassed_flowers = 8\nbypass_rate = 0.05 / 100\nsolution = solve_it(num_flowers * bypass_rate - bypassed_flowers, num_flowers)\nanswer = solution[num_flowers]"]}
{"id": 181, "answer": "A", "completion": "Fernando has 5 days (Monday to Friday) to allocate his 3 lunches and 4 days (Monday to Thursday) to allocate his 3 dinners (since he goes home for dinner on Friday nights). \n\nTo allocate his lunches, he can choose 3 days out of 5, which can be represented as 5C3 (5 choose 3) combinations. \n\nTo allocate his dinners, he can choose 3 days out of 4, which can be represented as 4C3 (4 choose 3) combinations. \n\nTherefore, the total number of options for Fernando to allocate his meals is 5C3 * 4C3. \n\nThe correct answer is A) 5C3 * 4C3.", "completions": ["Fernando has 5 days (Monday to Friday) to allocate his 3 lunches and 4 days (Monday to Thursday) to allocate his 3 dinners (since he goes home for dinner on Friday nights). \n\nTo allocate his lunches, he can choose 3 days out of 5, which can be represented as 5C3 (5 choose 3) combinations. \n\nTo allocate his dinners, he can choose 3 days out of 4, which can be represented as 4C3 (4 choose 3) combinations. \n\nTherefore, the total number of options for Fernando to allocate his meals is 5C3 * 4C3. \n\nThe correct answer is A) 5C3 * 4C3."]}
{"id": 182, "answer": "A", "completion": "a = Symbol('a')\nb = Symbol('b')\nexpression = (a**2 - b**2) / (a + b)**2\nsimplified_expression = simplify(expression)\nanswer_options = [(a + b) * (a - b), (a - b)**2, (a + b)**2, a**3 + b**3]\n\nfor option in answer_options:\n    if simplify(option - simplified_expression) == 0:\n        answer = option\n        break", "completions": ["a = Symbol('a')\nb = Symbol('b')\nexpression = (a**2 - b**2) / (a + b)**2\nsimplified_expression = simplify(expression)\nanswer_options = [(a + b) * (a - b), (a - b)**2, (a + b)**2, a**3 + b**3]\n\nfor option in answer_options:\n    if simplify(option - simplified_expression) == 0:\n        answer = option\n        break"]}
{"id": 183, "answer": "D", "completion": "number = Symbol('number')\ngreater_than_36 = number - 36\nless_than_86 = 86 - number\nsolution = solve_it(greater_than_36 - less_than_86, number)\nanswer = solution[number]", "completions": ["number = Symbol('number')\ngreater_than_36 = number - 36\nless_than_86 = 86 - number\nsolution = solve_it(greater_than_36 - less_than_86, number)\nanswer = solution[number]"]}
{"id": 184, "answer": "D", "completion": "p = Symbol('p', positive=True)\nphones_per_pallet = 1250\ncrates = 4\ntotal_phones = crates * p * phones_per_pallet\nanswer = total_phones", "completions": ["p = Symbol('p', positive=True)\nphones_per_pallet = 1250\ncrates = 4\ntotal_phones = crates * p * phones_per_pallet\nanswer = total_phones"]}
{"id": 185, "answer": "B", "completion": "A_work_rate = 1 / 40\nB_work_rate = 1 / 45\ncombined_work_rate = A_work_rate + B_work_rate\ntime_needed = 1 / combined_work_rate\nanswer = time_needed * 60  # convert to minutes\nanswer_option = 'E)20 min'", "completions": ["A_work_rate = 1 / 40\nB_work_rate = 1 / 45\ncombined_work_rate = A_work_rate + B_work_rate\ntime_needed = 1 / combined_work_rate\nanswer = time_needed * 60  # convert to minutes\nanswer_option = 'E)20 min'"]}
{"id": 186, "answer": "D", "completion": "train_speed = 120 * 1609.34 / 3600  # convert to meters per second\ntunnel_length = 1 * 1609.34  # convert to meters\ntrain_length = train_speed * 3\ntotal_length = tunnel_length + train_length\ntime_to_pass_through_tunnel = total_length / train_speed\nanswer = round(time_to_pass_through_tunnel)", "completions": ["train_speed = 120 * 1609.34 / 3600  # convert to meters per second\ntunnel_length = 1 * 1609.34  # convert to meters\ntrain_length = train_speed * 3\ntotal_length = tunnel_length + train_length\ntime_to_pass_through_tunnel = total_length / train_speed\nanswer = round(time_to_pass_through_tunnel)"]}
{"id": 187, "answer": "E", "completion": "invoice_amount = 20000\ndiscount_rate = 0.04\ndiscount_amount = invoice_amount * discount_rate\nnet_amount = invoice_amount - discount_amount\ndays_to_pay = 30\ninterest_rate = Symbol('interest_rate', positive=True)\nborrowed_amount = net_amount * (1 + interest_rate * days_to_pay / 360)\nsolution = solve_it(borrowed_amount - invoice_amount, interest_rate)\nanswer = solution[interest_rate] * 100", "completions": ["invoice_amount = 20000\ndiscount_rate = 0.04\ndiscount_amount = invoice_amount * discount_rate\nnet_amount = invoice_amount - discount_amount\ndays_to_pay = 30\ninterest_rate = Symbol('interest_rate', positive=True)\nborrowed_amount = net_amount * (1 + interest_rate * days_to_pay / 360)\nsolution = solve_it(borrowed_amount - invoice_amount, interest_rate)\nanswer = solution[interest_rate] * 100"]}
{"id": 188, "answer": "B", "completion": "answer = comb(10, 5)", "completions": ["answer = comb(10, 5)"]}
{"id": 189, "answer": "B", "completion": "rice = 3\nrice_ratio = 2\ncorn_ratio = 5\ntotal_ratio = rice_ratio + corn_ratio\ncorn = (rice * corn_ratio) / rice_ratio\nanswer = corn\n# Answer option: ['A)6.5', 'B)7.5', 'C)7', 'D)6', 'E)None of the above']", "completions": ["rice = 3\nrice_ratio = 2\ncorn_ratio = 5\ntotal_ratio = rice_ratio + corn_ratio\ncorn = (rice * corn_ratio) / rice_ratio\nanswer = corn\n# Answer option: ['A)6.5', 'B)7.5', 'C)7', 'D)6', 'E)None of the above']"]}
{"id": 190, "answer": "B", "completion": "soda_cost = Symbol('soda_cost', positive=True)\nenergy_bar_cost = Symbol('energy_bar_cost', positive=True)\nequation1 = soda_cost + 2 * energy_bar_cost - 150\nequation2 = 2 * soda_cost + 3 * energy_bar_cost - 300\nsolution = solve_it([equation1, equation2], [soda_cost, energy_bar_cost])\ntotal_cost = 6 * solution[soda_cost] + 7 * solution[energy_bar_cost]\nanswer = total_cost\nanswer_option = ['A)500', 'B)600', 'C)750', 'D)800', 'E)900']\nfor option in answer_option:\n    if str(int(answer)) in option:\n        final_answer = option\n        break\nfinal_answer", "completions": ["soda_cost = Symbol('soda_cost', positive=True)\nenergy_bar_cost = Symbol('energy_bar_cost', positive=True)\nequation1 = soda_cost + 2 * energy_bar_cost - 150\nequation2 = 2 * soda_cost + 3 * energy_bar_cost - 300\nsolution = solve_it([equation1, equation2], [soda_cost, energy_bar_cost])\ntotal_cost = 6 * solution[soda_cost] + 7 * solution[energy_bar_cost]\nanswer = total_cost\nanswer_option = ['A)500', 'B)600', 'C)750', 'D)800', 'E)900']\nfor option in answer_option:\n    if str(int(answer)) in option:\n        final_answer = option\n        break\nfinal_answer"]}
{"id": 191, "answer": "B", "completion": "num_defective = 0.1\nnum_pens_to_deliver = 7200\nnum_pens_produced = num_pens_to_deliver / (1 - num_defective)\nselling_price = 10\ntotal_revenue = num_pens_to_deliver * selling_price\nprofit_margin = 0.25\ntotal_cost = total_revenue / (1 + profit_margin)\ncost_per_pen = total_cost / num_pens_produced\nanswer = cost_per_pen", "completions": ["num_defective = 0.1\nnum_pens_to_deliver = 7200\nnum_pens_produced = num_pens_to_deliver / (1 - num_defective)\nselling_price = 10\ntotal_revenue = num_pens_to_deliver * selling_price\nprofit_margin = 0.25\ntotal_cost = total_revenue / (1 + profit_margin)\ncost_per_pen = total_cost / num_pens_produced\nanswer = cost_per_pen"]}
{"id": 192, "answer": "B", "completion": "tens_digit = Symbol('tens_digit', positive=True, integer=True)\nunits_digit = Symbol('units_digit', positive=True, integer=True)\nnumber = 10 * tens_digit + units_digit\ndigit_sum = tens_digit + units_digit\ncondition1 = Eq(number - digit_sum, 18)\ncondition2 = Eq(units_digit, 2 * tens_digit)\nsolution = solve_it([condition1, condition2], [tens_digit, units_digit])\nanswer = 10 * solution[tens_digit] + solution[units_digit]", "completions": ["tens_digit = Symbol('tens_digit', positive=True, integer=True)\nunits_digit = Symbol('units_digit', positive=True, integer=True)\nnumber = 10 * tens_digit + units_digit\ndigit_sum = tens_digit + units_digit\ncondition1 = Eq(number - digit_sum, 18)\ncondition2 = Eq(units_digit, 2 * tens_digit)\nsolution = solve_it([condition1, condition2], [tens_digit, units_digit])\nanswer = 10 * solution[tens_digit] + solution[units_digit]"]}
{"id": 193, "answer": "E", "completion": "x = Symbol('x', positive=True, real=True)\ny = Symbol('y', positive=True, real=True)\nL = floor(x) + floor(y) + floor(x + y)\nR = floor(2 * x) + floor(2 * y)\n\n# Check if L(x, y) = R(x, y) is possible\neq1 = Eq(L, R)\nsolution1 = solve(eq1, [x, y])\n\n# Check if L(x, y) ≠ R(x, y) is possible\neq2 = Ne(L, R)\nsolution2 = solve(eq2, [x, y])\n\n# Check if L(x, y) < R(x, y) is possible\neq3 = Lt(L, R)\nsolution3 = solve(eq3, [x, y])\n\n# Check if L(x, y) > R(x, y) is possible\neq4 = Gt(L, R)\nsolution4 = solve(eq4, [x, y])\n\nif solution1:\n    answer = 'A)L(x,y) = R(x,y)'\nelif solution2:\n    answer = 'B)L(x,y) ≠ R(x,y)'\nelif solution3:\n    answer = 'C)L(x,y) < R(x,y)'\nelif solution4:\n    answer = 'D)L(x,y) > R(x,y)'\nelse:\n    answer = 'E)None'", "completions": ["x = Symbol('x', positive=True, real=True)\ny = Symbol('y', positive=True, real=True)\nL = floor(x) + floor(y) + floor(x + y)\nR = floor(2 * x) + floor(2 * y)\n\n# Check if L(x, y) = R(x, y) is possible\neq1 = Eq(L, R)\nsolution1 = solve(eq1, [x, y])\n\n# Check if L(x, y) ≠ R(x, y) is possible\neq2 = Ne(L, R)\nsolution2 = solve(eq2, [x, y])\n\n# Check if L(x, y) < R(x, y) is possible\neq3 = Lt(L, R)\nsolution3 = solve(eq3, [x, y])\n\n# Check if L(x, y) > R(x, y) is possible\neq4 = Gt(L, R)\nsolution4 = solve(eq4, [x, y])\n\nif solution1:\n    answer = 'A)L(x,y) = R(x,y)'\nelif solution2:\n    answer = 'B)L(x,y) ≠ R(x,y)'\nelif solution3:\n    answer = 'C)L(x,y) < R(x,y)'\nelif solution4:\n    answer = 'D)L(x,y) > R(x,y)'\nelse:\n    answer = 'E)None'"]}
{"id": 194, "answer": "E", "completion": "bell1_interval = 36\nbell2_interval = 40\nbell3_interval = 48\nlcm = lcm(bell1_interval, bell2_interval, bell3_interval)\nanswer = lcm / 60  # convert to minutes\nanswer_option = \"B)After 12 minutes\"", "completions": ["bell1_interval = 36\nbell2_interval = 40\nbell3_interval = 48\nlcm = lcm(bell1_interval, bell2_interval, bell3_interval)\nanswer = lcm / 60  # convert to minutes\nanswer_option = \"B)After 12 minutes\""]}
{"id": 195, "answer": "A", "completion": "tree_height = Symbol('tree_height', positive=True)\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nsolution = solve_it(tree_height / tree_shadow - pole_height / pole_shadow, tree_height)\nanswer = solution[tree_height]", "completions": ["tree_height = Symbol('tree_height', positive=True)\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nsolution = solve_it(tree_height / tree_shadow - pole_height / pole_shadow, tree_height)\nanswer = solution[tree_height]"]}
{"id": 196, "answer": "A", "completion": "To solve this problem, we need to find a pattern in the given prices. Let's look at the number of vowels in each fruit's name and the corresponding price:\n\n- Orange: 3 vowels (o, a, e) -> 18 dollars\n- Pineapple: 4 vowels (i, e, a, e) -> 27 dollars\n- Grape: 2 vowels (a, e) -> 15 dollars\n\nIt seems that the price is determined by the number of vowels in the fruit's name, multiplied by 6 dollars per vowel. Now let's apply this logic to the mango:\n\n- Mango: 2 vowels (a, o) -> 2 * 6 = 12 dollars\n\nSo, the correct answer is not in the given options. The price of a mango should be 12 dollars.", "completions": ["To solve this problem, we need to find a pattern in the given prices. Let's look at the number of vowels in each fruit's name and the corresponding price:\n\n- Orange: 3 vowels (o, a, e) -> 18 dollars\n- Pineapple: 4 vowels (i, e, a, e) -> 27 dollars\n- Grape: 2 vowels (a, e) -> 15 dollars\n\nIt seems that the price is determined by the number of vowels in the fruit's name, multiplied by 6 dollars per vowel. Now let's apply this logic to the mango:\n\n- Mango: 2 vowels (a, o) -> 2 * 6 = 12 dollars\n\nSo, the correct answer is not in the given options. The price of a mango should be 12 dollars."]}
{"id": 197, "answer": "A", "completion": "area = abs((a * 0 - b * 0 + b * y - x * y + x * 0 - a * y) / 2)\nanswer = area", "completions": ["area = abs((a * 0 - b * 0 + b * y - x * y + x * 0 - a * y) / 2)\nanswer = area"]}
{"id": 198, "answer": "A", "completion": "initial_speed = 60\ninitial_time = 20\ndistance = initial_speed * initial_time\nfinal_time = 10\nfinal_speed = distance / final_time\nspeed_gain = final_speed - initial_speed\nanswer = speed_gain", "completions": ["initial_speed = 60\ninitial_time = 20\ndistance = initial_speed * initial_time\nfinal_time = 10\nfinal_speed = distance / final_time\nspeed_gain = final_speed - initial_speed\nanswer = speed_gain"]}
{"id": 199, "answer": "C", "completion": "probability_alan_correct = 1/5\nprobability_roger_correct = 2/3\nprobability_peter_correct = 5/6\n\nprobability_correct_without_cheating = probability_alan_correct + probability_peter_correct - (probability_alan_correct * probability_peter_correct)\nanswer = probability_correct_without_cheating\nanswer = round(answer, 2)\nanswer = 'C)23/90'", "completions": ["probability_alan_correct = 1/5\nprobability_roger_correct = 2/3\nprobability_peter_correct = 5/6\n\nprobability_correct_without_cheating = probability_alan_correct + probability_peter_correct - (probability_alan_correct * probability_peter_correct)\nanswer = probability_correct_without_cheating\nanswer = round(answer, 2)\nanswer = 'C)23/90'"]}
{"id": 200, "answer": "B", "completion": "interest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nanswer = solution[interest_rate]\nanswer_option = 'D)8%'", "completions": ["interest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nanswer = solution[interest_rate]\nanswer_option = 'D)8%'"]}
{"id": 201, "answer": "A", "completion": "total_files = 250\nfiles_infected_by_both = Symbol('files_infected_by_both', positive=True)\nfiles_infected_by_worm_only = 2.5 * files_infected_by_both\nfiles_not_infected_by_virus = 0.5 * total_files\nfiles_infected_by_virus_only = total_files - files_infected_by_both - files_infected_by_worm_only - files_not_infected_by_virus\nsolution = solve_it(files_infected_by_virus_only - files_infected_by_both, files_infected_by_both)\nfiles_infected_by_both_value = solution[files_infected_by_both]\nfiles_infected_by_worm_only_value = 2.5 * files_infected_by_both_value\nfiles_not_infected_by_worm = total_files - files_infected_by_worm_only_value - files_infected_by_both_value\nanswer = files_not_infected_by_worm\nanswer_options = ['A)50', 'B)70', 'C)75', 'D)100', 'E)125']\nfor option in answer_options:\n    if str(int(answer)) in option:\n        final_answer = option\n        break\nfinal_answer", "completions": ["total_files = 250\nfiles_infected_by_both = Symbol('files_infected_by_both', positive=True)\nfiles_infected_by_worm_only = 2.5 * files_infected_by_both\nfiles_not_infected_by_virus = 0.5 * total_files\nfiles_infected_by_virus_only = total_files - files_infected_by_both - files_infected_by_worm_only - files_not_infected_by_virus\nsolution = solve_it(files_infected_by_virus_only - files_infected_by_both, files_infected_by_both)\nfiles_infected_by_both_value = solution[files_infected_by_both]\nfiles_infected_by_worm_only_value = 2.5 * files_infected_by_both_value\nfiles_not_infected_by_worm = total_files - files_infected_by_worm_only_value - files_infected_by_both_value\nanswer = files_not_infected_by_worm\nanswer_options = ['A)50', 'B)70', 'C)75', 'D)100', 'E)125']\nfor option in answer_options:\n    if str(int(answer)) in option:\n        final_answer = option\n        break\nfinal_answer"]}
{"id": 202, "answer": "B", "completion": "mohan_share = Symbol('mohan_share', positive=True)\nsohan_share = 5100 - mohan_share\nmohan_future_amount = mohan_share * (1 + 0.04) ** (26 - 23)\nsohan_future_amount = sohan_share * (1 + 0.04) ** (26 - 24)\nsolution = solve_it(mohan_future_amount - sohan_future_amount, mohan_share)\nanswer = solution[mohan_share]", "completions": ["mohan_share = Symbol('mohan_share', positive=True)\nsohan_share = 5100 - mohan_share\nmohan_future_amount = mohan_share * (1 + 0.04) ** (26 - 23)\nsohan_future_amount = sohan_share * (1 + 0.04) ** (26 - 24)\nsolution = solve_it(mohan_future_amount - sohan_future_amount, mohan_share)\nanswer = solution[mohan_share]"]}
{"id": 203, "answer": "C", "completion": "amount = 1400 * 0.3 * 0.6\nanswer = round(amount)", "completions": ["amount = 1400 * 0.3 * 0.6\nanswer = round(amount)"]}
{"id": 204, "answer": "C", "completion": "w = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nrate = w / 25\ntime_for_y_gallons = y / rate\ntime_in_minutes = time_for_y_gallons / (x * 60)\nanswer = simplify(time_in_minutes)", "completions": ["w = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nrate = w / 25\ntime_for_y_gallons = y / rate\ntime_in_minutes = time_for_y_gallons / (x * 60)\nanswer = simplify(time_in_minutes)"]}
{"id": 205, "answer": "B", "completion": "volume_of_coin = pi * (15/2)**2 * 2\nvolume_of_aluminum = volume_of_coin / 2\nvolume_of_silver = volume_of_coin / 2\nweight_of_aluminum = 30 / (1 + 2)\nweight_of_silver = 30 - weight_of_aluminum\ndensity_of_aluminum = weight_of_aluminum / volume_of_aluminum\ndensity_of_silver = weight_of_silver / volume_of_silver\n\nnew_coin_volume = pi * (30/2)**2 * 1\nnew_coin_weight = new_coin_volume * density_of_aluminum\nanswer = new_coin_weight", "completions": ["volume_of_coin = pi * (15/2)**2 * 2\nvolume_of_aluminum = volume_of_coin / 2\nvolume_of_silver = volume_of_coin / 2\nweight_of_aluminum = 30 / (1 + 2)\nweight_of_silver = 30 - weight_of_aluminum\ndensity_of_aluminum = weight_of_aluminum / volume_of_aluminum\ndensity_of_silver = weight_of_silver / volume_of_silver\n\nnew_coin_volume = pi * (30/2)**2 * 1\nnew_coin_weight = new_coin_volume * density_of_aluminum\nanswer = new_coin_weight"]}
{"id": 206, "answer": "C", "completion": "number = Symbol('number', positive=True)\nequation = (2/3 * number) - 10 - (40 + (1/3 * number))\nsolution = solve_it(equation, number)\nanswer = solution[number]", "completions": ["number = Symbol('number', positive=True)\nequation = (2/3 * number) - 10 - (40 + (1/3 * number))\nsolution = solve_it(equation, number)\nanswer = solution[number]"]}
{"id": 207, "answer": "B", "completion": "k = Symbol('k', positive=True)\ndiscriminant = 5**2 - 4 * 1 * k\nsolution = solve_it(discriminant > 0, k)\nanswer = max(solution[k].as_set().args[0].args) - 1\nanswer = int(answer)", "completions": ["k = Symbol('k', positive=True)\ndiscriminant = 5**2 - 4 * 1 * k\nsolution = solve_it(discriminant > 0, k)\nanswer = max(solution[k].as_set().args[0].args) - 1\nanswer = int(answer)"]}
{"id": 208, "answer": "E", "completion": "answer = 900 + 5 * 12", "completions": ["answer = 900 + 5 * 12"]}
{"id": 209, "answer": "C", "completion": "distance_covered_without_rest = 15\ntime_taken_without_rest = distance_covered_without_rest / 10\nrest_time = 10 / 60\ntotal_time_taken_for_15_km = time_taken_without_rest + rest_time\n\ndistance_to_cover = 100\nnum_breaks = distance_to_cover / distance_covered_without_rest - 1\ntotal_rest_time = num_breaks * rest_time\n\ntotal_time_taken = distance_to_cover / 10 + total_rest_time\nanswer = total_time_taken", "completions": ["distance_covered_without_rest = 15\ntime_taken_without_rest = distance_covered_without_rest / 10\nrest_time = 10 / 60\ntotal_time_taken_for_15_km = time_taken_without_rest + rest_time\n\ndistance_to_cover = 100\nnum_breaks = distance_to_cover / distance_covered_without_rest - 1\ntotal_rest_time = num_breaks * rest_time\n\ntotal_time_taken = distance_to_cover / 10 + total_rest_time\nanswer = total_time_taken"]}
{"id": 210, "answer": "E", "completion": "train_time = Symbol('train_time', positive=True)\ncar_time = Symbol('car_time', positive=True)\ntotal_time = 17\ntime_lost = 4\nsolution = solve_it([train_time + car_time - total_time, 2 * train_time - total_time - time_lost], [train_time, car_time])\nanswer = 2 * solution[car_time]", "completions": ["train_time = Symbol('train_time', positive=True)\ncar_time = Symbol('car_time', positive=True)\ntotal_time = 17\ntime_lost = 4\nsolution = solve_it([train_time + car_time - total_time, 2 * train_time - total_time - time_lost], [train_time, car_time])\nanswer = 2 * solution[car_time]"]}
{"id": 211, "answer": "A", "completion": "food_left = 1\nfor _ in range(4):  # 4 hours from 8:00 am to 12:00 pm\n    food_left *= (1 - 1/3)\nanswer = food_left * 100", "completions": ["food_left = 1\nfor _ in range(4):  # 4 hours from 8:00 am to 12:00 pm\n    food_left *= (1 - 1/3)\nanswer = food_left * 100"]}
{"id": 212, "answer": "A", "completion": "total_people = Symbol('total_people', positive=True)\nmen = total_people * 0.4\nwomen = total_people * 0.6\nmen_liking_green = 10\nmen_liking_red = men - men_liking_green\npercentage_men_liking_red = 0.75\nsolution = solve_it(men_liking_red - men * percentage_men_liking_red, total_people)\nanswer = solution[total_people]", "completions": ["total_people = Symbol('total_people', positive=True)\nmen = total_people * 0.4\nwomen = total_people * 0.6\nmen_liking_green = 10\nmen_liking_red = men - men_liking_green\npercentage_men_liking_red = 0.75\nsolution = solve_it(men_liking_red - men * percentage_men_liking_red, total_people)\nanswer = solution[total_people]"]}
{"id": 213, "answer": "A", "completion": "To solve this problem, we can use dynamic programming. Let's create an array dp, where dp[i] represents the number of ways to reach the ith step. We can initialize dp[0] = 1 (there is only one way to reach the 0th step) and dp[1] = 2 (there are two ways to reach the 1st step: either take one step from the 0th step or directly take two steps).\n\nFor each step i from 2 to 10, we can calculate dp[i] as the sum of dp[i-1] and dp[i-2], since the boy can reach the ith step either by taking one step from the (i-1)th step or by taking two steps from the (i-2)th step.\n\nFinally, the answer will be dp[10].\n\nHere's the code to calculate the answer:\n\ndp = [0] * 11\ndp[0] = 1\ndp[1] = 2\n\nfor i in range(2, 11):\n    dp[i] = dp[i-1] + dp[i-2]\n\nanswer = dp[10]  # Answer: D)91", "completions": ["To solve this problem, we can use dynamic programming. Let's create an array dp, where dp[i] represents the number of ways to reach the ith step. We can initialize dp[0] = 1 (there is only one way to reach the 0th step) and dp[1] = 2 (there are two ways to reach the 1st step: either take one step from the 0th step or directly take two steps).\n\nFor each step i from 2 to 10, we can calculate dp[i] as the sum of dp[i-1] and dp[i-2], since the boy can reach the ith step either by taking one step from the (i-1)th step or by taking two steps from the (i-2)th step.\n\nFinally, the answer will be dp[10].\n\nHere's the code to calculate the answer:\n\ndp = [0] * 11\ndp[0] = 1\ndp[1] = 2\n\nfor i in range(2, 11):\n    dp[i] = dp[i-1] + dp[i-2]\n\nanswer = dp[10]  # Answer: D)91"]}
{"id": 214, "answer": "A", "completion": "additional_gallons = Symbol('additional_gallons', positive=True)\ninitial_gallons = 1\ninitial_orange_juice = 0.4 * initial_gallons\ninitial_water = 0.6 * initial_gallons\nfinal_orange_juice = initial_orange_juice + additional_gallons\nfinal_gallons = initial_gallons + additional_gallons\nfinal_orange_juice_percentage = final_orange_juice / final_gallons\nsolution = solve_it(final_orange_juice_percentage - 0.6, additional_gallons)\nanswer = solution[additional_gallons]", "completions": ["additional_gallons = Symbol('additional_gallons', positive=True)\ninitial_gallons = 1\ninitial_orange_juice = 0.4 * initial_gallons\ninitial_water = 0.6 * initial_gallons\nfinal_orange_juice = initial_orange_juice + additional_gallons\nfinal_gallons = initial_gallons + additional_gallons\nfinal_orange_juice_percentage = final_orange_juice / final_gallons\nsolution = solve_it(final_orange_juice_percentage - 0.6, additional_gallons)\nanswer = solution[additional_gallons]"]}
{"id": 215, "answer": "D", "completion": "units_digit = (9 ** 3 - 7) % 10\nanswer = units_digit", "completions": ["units_digit = (9 ** 3 - 7) % 10\nanswer = units_digit"]}
{"id": 216, "answer": "A", "completion": "total_outcomes = 5 * 4 / 2  # total ways to choose 2 horses out of 5\nwinning_outcomes = 2  # Mr. Jain wins if either of the two horses he selected wins\nprobability = winning_outcomes / total_outcomes\nanswer = simplify(probability)  # B)2/5", "completions": ["total_outcomes = 5 * 4 / 2  # total ways to choose 2 horses out of 5\nwinning_outcomes = 2  # Mr. Jain wins if either of the two horses he selected wins\nprobability = winning_outcomes / total_outcomes\nanswer = simplify(probability)  # B)2/5"]}
{"id": 217, "answer": "A", "completion": "N = Symbol('N', positive=True)\nremainder = Symbol('remainder', positive=True)\ndividend1 = 2272\ndividend2 = 875\nsolution = solve_it([(dividend1 - remainder) % N - 0, (dividend2 - remainder) % N - 0], [N, remainder])\nN_value = solution[N]\nanswer = sum(int(digit) for digit in str(N_value))", "completions": ["N = Symbol('N', positive=True)\nremainder = Symbol('remainder', positive=True)\ndividend1 = 2272\ndividend2 = 875\nsolution = solve_it([(dividend1 - remainder) % N - 0, (dividend2 - remainder) % N - 0], [N, remainder])\nN_value = solution[N]\nanswer = sum(int(digit) for digit in str(N_value))"]}
{"id": 218, "answer": "B", "completion": "passing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\ntotal_students = passing_students + failing_students\npassing_average = 83\nfailing_average = 55\noverall_average = 76\n\ntotal_passing_score = passing_students * passing_average\ntotal_failing_score = failing_students * failing_average\ntotal_score = total_students * overall_average\n\nsolution = solve_it([total_passing_score + total_failing_score - total_score], [passing_students / total_students])\nanswer = solution[passing_students / total_students] * 100", "completions": ["passing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\ntotal_students = passing_students + failing_students\npassing_average = 83\nfailing_average = 55\noverall_average = 76\n\ntotal_passing_score = passing_students * passing_average\ntotal_failing_score = failing_students * failing_average\ntotal_score = total_students * overall_average\n\nsolution = solve_it([total_passing_score + total_failing_score - total_score], [passing_students / total_students])\nanswer = solution[passing_students / total_students] * 100"]}
{"id": 219, "answer": "D", "completion": "wage_8th_day = Symbol('wage_8th_day', positive=True)\ntotal_wage_15_days = 90 * 15\ntotal_wage_first_7_days = 87 * 7\ntotal_wage_last_7_days = 92 * 7\nsolution = solve_it(total_wage_15_days - (total_wage_first_7_days + total_wage_last_7_days + wage_8th_day), wage_8th_day)\nanswer = solution[wage_8th_day]", "completions": ["wage_8th_day = Symbol('wage_8th_day', positive=True)\ntotal_wage_15_days = 90 * 15\ntotal_wage_first_7_days = 87 * 7\ntotal_wage_last_7_days = 92 * 7\nsolution = solve_it(total_wage_15_days - (total_wage_first_7_days + total_wage_last_7_days + wage_8th_day), wage_8th_day)\nanswer = solution[wage_8th_day]"]}
{"id": 220, "answer": "B", "completion": "num1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nnew_num1 = num1 - 9\nnew_num2 = num2 - 9\nsolution = solve_it([num1 / num2 - 3 / 5, new_num1 / new_num2 - 12 / 23], [num1, num2])\nanswer = solution[num1]", "completions": ["num1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nnew_num1 = num1 - 9\nnew_num2 = num2 - 9\nsolution = solve_it([num1 / num2 - 3 / 5, new_num1 / new_num2 - 12 / 23], [num1, num2])\nanswer = solution[num1]"]}
{"id": 221, "answer": "B", "completion": "Ajay_age = Symbol('Ajay_age', positive=True)\nRahul_age = Symbol('Rahul_age', positive=True)\nDenis_age = 5\nRahul_age = Denis_age - 2\nAjay_age_condition = (Ajay_age - 6) / 18\nsolution = solve_it(Ajay_age_condition - Rahul_age, Ajay_age)\nanswer = solution[Ajay_age]", "completions": ["Ajay_age = Symbol('Ajay_age', positive=True)\nRahul_age = Symbol('Rahul_age', positive=True)\nDenis_age = 5\nRahul_age = Denis_age - 2\nAjay_age_condition = (Ajay_age - 6) / 18\nsolution = solve_it(Ajay_age_condition - Rahul_age, Ajay_age)\nanswer = solution[Ajay_age]"]}
{"id": 222, "answer": "D", "completion": "number_of_books = 4\ntotal_combinations = math.factorial(number_of_books)\ntime_taken = total_combinations - 1  # since she already has one arrangement\nanswer = time_taken", "completions": ["number_of_books = 4\ntotal_combinations = math.factorial(number_of_books)\ntime_taken = total_combinations - 1  # since she already has one arrangement\nanswer = time_taken"]}
{"id": 223, "answer": "E", "completion": "manufacturer_discount = 0.2\nretailer_discount = 0.2\ntotal_discount = 1 - (1 - manufacturer_discount) * (1 - retailer_discount)\nanswer = total_discount * 100\nanswer_option = 'E)36%'", "completions": ["manufacturer_discount = 0.2\nretailer_discount = 0.2\ntotal_discount = 1 - (1 - manufacturer_discount) * (1 - retailer_discount)\nanswer = total_discount * 100\nanswer_option = 'E)36%'"]}
{"id": 224, "answer": "C", "completion": "width = Symbol('width', positive=True)\nheight = 9\npainted_sides_sum = 37\nsolution = solve_it(2 * height + width - painted_sides_sum, width)\narea = height * solution[width]\nanswer = area", "completions": ["width = Symbol('width', positive=True)\nheight = 9\npainted_sides_sum = 37\nsolution = solve_it(2 * height + width - painted_sides_sum, width)\narea = height * solution[width]\nanswer = area"]}
{"id": 225, "answer": "A", "completion": "answer = math.comb(10, 10)", "completions": ["answer = math.comb(10, 10)"]}
{"id": 226, "answer": "A", "completion": "num_oarsmen = 10\ntotal_weight_increase = 1.8 * num_oarsmen\nold_man_weight = 53\nnew_man_weight = old_man_weight + total_weight_increase\nanswer = new_man_weight", "completions": ["num_oarsmen = 10\ntotal_weight_increase = 1.8 * num_oarsmen\nold_man_weight = 53\nnew_man_weight = old_man_weight + total_weight_increase\nanswer = new_man_weight"]}
{"id": 227, "answer": "A", "completion": "n = Symbol('n', positive=True, integer=True)\ncombinations_without_3 = binomial(n - 1, 2)\nsolution = solve_it(combinations_without_3 - 45, n)\nanswer = solution[n]", "completions": ["n = Symbol('n', positive=True, integer=True)\ncombinations_without_3 = binomial(n - 1, 2)\nsolution = solve_it(combinations_without_3 - 45, n)\nanswer = solution[n]"]}
{"id": 228, "answer": "A", "completion": "The correct answer is A) I only.\n\nIf Q has 5 factors, then it must be in the form of p^4, where p is a prime number. This is because the number of factors of a number in the form of p^a * q^b * ... is given by (a+1)(b+1)..., and we need this expression to equal 5. Since 5 is a prime number, the only way to achieve this is if a+1 = 5, which means a = 4. Therefore, Q must be the square of a prime number (p^2)^2, and statement I is true.\n\nStatements II and III are not necessarily true. For example, if Q = 16, which is the fourth power of the prime number 2, it has 5 factors (1, 2, 4, 8, 16), but it is not the product of two prime numbers. Similarly, if Q = 9, which is the product of the prime numbers 3 and 3, it has 3 factors (1, 3, 9), not 5 factors.", "completions": ["The correct answer is A) I only.\n\nIf Q has 5 factors, then it must be in the form of p^4, where p is a prime number. This is because the number of factors of a number in the form of p^a * q^b * ... is given by (a+1)(b+1)..., and we need this expression to equal 5. Since 5 is a prime number, the only way to achieve this is if a+1 = 5, which means a = 4. Therefore, Q must be the square of a prime number (p^2)^2, and statement I is true.\n\nStatements II and III are not necessarily true. For example, if Q = 16, which is the fourth power of the prime number 2, it has 5 factors (1, 2, 4, 8, 16), but it is not the product of two prime numbers. Similarly, if Q = 9, which is the product of the prime numbers 3 and 3, it has 3 factors (1, 3, 9), not 5 factors."]}
{"id": 229, "answer": "A", "completion": "x = Symbol('x')\ny = Symbol('y')\nequation1 = 6*x - y - 24\nequation2 = y - 3*x\nsolution = solve_it([equation1, equation2], [x, y])\nanswer = solution[x]", "completions": ["x = Symbol('x')\ny = Symbol('y')\nequation1 = 6*x - y - 24\nequation2 = y - 3*x\nsolution = solve_it([equation1, equation2], [x, y])\nanswer = solution[x]"]}
{"id": 230, "answer": "D", "completion": "num_movies = Symbol('num_movies', positive=True)\ncost_without_membership = 4 * num_movies\ncost_with_membership = 7 + 2 * num_movies\nsolution = solve_it(cost_without_membership - cost_with_membership, num_movies)\nanswer = solution[num_movies] + 1  # We need to rent at least one more movie to make the membership worth it\nanswer_option = 'C)3'", "completions": ["num_movies = Symbol('num_movies', positive=True)\ncost_without_membership = 4 * num_movies\ncost_with_membership = 7 + 2 * num_movies\nsolution = solve_it(cost_without_membership - cost_with_membership, num_movies)\nanswer = solution[num_movies] + 1  # We need to rent at least one more movie to make the membership worth it\nanswer_option = 'C)3'"]}
{"id": 231, "answer": "C", "completion": "pounds = 7\nounces = 4\ntotal_ounces = pounds * 16 + ounces\nanswer = total_ounces", "completions": ["pounds = 7\nounces = 4\ntotal_ounces = pounds * 16 + ounces\nanswer = total_ounces"]}
{"id": 232, "answer": "D", "completion": "jack_work_rate = 1 / 12\njack_work_done = 2 / 3\njill_work_rate = 0.05 * jack_work_rate\nremaining_work = 1 - jack_work_done\ntime_taken_by_jill = remaining_work / jill_work_rate\nanswer = time_taken_by_jill", "completions": ["jack_work_rate = 1 / 12\njack_work_done = 2 / 3\njill_work_rate = 0.05 * jack_work_rate\nremaining_work = 1 - jack_work_done\ntime_taken_by_jill = remaining_work / jill_work_rate\nanswer = time_taken_by_jill"]}
{"id": 233, "answer": "A", "completion": "interest_rate = Symbol('interest_rate', positive=True)\namount = 5000\ninterest = 300\nyears = 3\nsolution = solve_it(amount * interest_rate * years / 100 - interest, interest_rate)\nanswer = solution[interest_rate]", "completions": ["interest_rate = Symbol('interest_rate', positive=True)\namount = 5000\ninterest = 300\nyears = 3\nsolution = solve_it(amount * interest_rate * years / 100 - interest, interest_rate)\nanswer = solution[interest_rate]"]}
{"id": 234, "answer": "B", "completion": "discounted_price = 4578\ndiscount_rate = 0.2\nactual_price = discounted_price / (1 - discount_rate)\nanswer = actual_price", "completions": ["discounted_price = 4578\ndiscount_rate = 0.2\nactual_price = discounted_price / (1 - discount_rate)\nanswer = actual_price"]}
{"id": 235, "answer": "A", "completion": "A = Symbol('A')\nB = Symbol('B')\ncost_per_bottle = A / 27\ncost_for_B_bottles = cost_per_bottle * B\ncost_in_dollars = cost_for_B_bottles / 100\nanswer = simplify(cost_in_dollars)", "completions": ["A = Symbol('A')\nB = Symbol('B')\ncost_per_bottle = A / 27\ncost_for_B_bottles = cost_per_bottle * B\ncost_in_dollars = cost_for_B_bottles / 100\nanswer = simplify(cost_in_dollars)"]}
{"id": 236, "answer": "C", "completion": "total_ways = 0\n\n# Case 1: One 50-cent candy bar, one $1 candy bar, and one $2 candy bar\nways_case1 = 3 * 4 * 4\n\n# Case 2: Three $2 candy bars\nways_case2 = comb(4, 3)\n\ntotal_ways = ways_case1 + ways_case2\nanswer = total_ways\n# Answer: C)46", "completions": ["total_ways = 0\n\n# Case 1: One 50-cent candy bar, one $1 candy bar, and one $2 candy bar\nways_case1 = 3 * 4 * 4\n\n# Case 2: Three $2 candy bars\nways_case2 = comb(4, 3)\n\ntotal_ways = ways_case1 + ways_case2\nanswer = total_ways\n# Answer: C)46"]}
{"id": 237, "answer": "B", "completion": "total_combinations = binomial(8, 4)\nmen_only_combinations = binomial(4, 4)\nwomen_only_combinations = binomial(4, 4)\nvalid_combinations = total_combinations - men_only_combinations - women_only_combinations\nanswer = valid_combinations", "completions": ["total_combinations = binomial(8, 4)\nmen_only_combinations = binomial(4, 4)\nwomen_only_combinations = binomial(4, 4)\nvalid_combinations = total_combinations - men_only_combinations - women_only_combinations\nanswer = valid_combinations"]}
{"id": 238, "answer": "A", "completion": "num_boys = 100\ntotal_children = num_boys / (1 - 2/5)\nnum_girls = total_children * 2/5\nanswer = num_girls", "completions": ["num_boys = 100\ntotal_children = num_boys / (1 - 2/5)\nnum_girls = total_children * 2/5\nanswer = num_girls"]}
{"id": 239, "answer": "B", "completion": "total_numbers = 1000\nprime_factors_of_1000 = [2, 2, 2, 5, 5, 5]\n\n# To find the numbers relatively prime to 1000, we need to find the numbers that are not divisible by 2 or 5.\n# We can use the principle of inclusion-exclusion to find this.\n\n# First, we find the numbers divisible by 2 or 5.\ndivisible_by_2 = total_numbers // 2\ndivisible_by_5 = total_numbers // 5\n\n# Now, we find the numbers divisible by both 2 and 5 (i.e., divisible by 10).\ndivisible_by_10 = total_numbers // 10\n\n# Using the principle of inclusion-exclusion, we find the total numbers that are not relatively prime to 1000.\nnot_relatively_prime = divisible_by_2 + divisible_by_5 - divisible_by_10\n\n# Now, we find the total numbers that are relatively prime to 1000.\nrelatively_prime = total_numbers - not_relatively_prime\n\n# Finally, we find the probability of choosing a number relatively prime to 1000.\nprobability = relatively_prime / total_numbers\nanswer = simplify(probability)\nanswer = f\"{answer.numerator}/{answer.denominator}\"  # Convert to fraction format\nanswer_option = f\"{answer}\"  # Convert to string format\nanswer_option", "completions": ["total_numbers = 1000\nprime_factors_of_1000 = [2, 2, 2, 5, 5, 5]\n\n# To find the numbers relatively prime to 1000, we need to find the numbers that are not divisible by 2 or 5.\n# We can use the principle of inclusion-exclusion to find this.\n\n# First, we find the numbers divisible by 2 or 5.\ndivisible_by_2 = total_numbers // 2\ndivisible_by_5 = total_numbers // 5\n\n# Now, we find the numbers divisible by both 2 and 5 (i.e., divisible by 10).\ndivisible_by_10 = total_numbers // 10\n\n# Using the principle of inclusion-exclusion, we find the total numbers that are not relatively prime to 1000.\nnot_relatively_prime = divisible_by_2 + divisible_by_5 - divisible_by_10\n\n# Now, we find the total numbers that are relatively prime to 1000.\nrelatively_prime = total_numbers - not_relatively_prime\n\n# Finally, we find the probability of choosing a number relatively prime to 1000.\nprobability = relatively_prime / total_numbers\nanswer = simplify(probability)\nanswer = f\"{answer.numerator}/{answer.denominator}\"  # Convert to fraction format\nanswer_option = f\"{answer}\"  # Convert to string format\nanswer_option"]}
{"id": 240, "answer": "B", "completion": "initial_investment = Symbol('initial_investment', positive=True)\ninterest_rate = 0.08\ncompounding_frequency = 2\ntotal_amount = 54080\ninvestment_duration = 1\n\namount_formula = initial_investment * (1 + interest_rate / compounding_frequency) ** (compounding_frequency * investment_duration)\nsolution = solve_it(amount_formula - total_amount, initial_investment)\nanswer = solution[initial_investment]", "completions": ["initial_investment = Symbol('initial_investment', positive=True)\ninterest_rate = 0.08\ncompounding_frequency = 2\ntotal_amount = 54080\ninvestment_duration = 1\n\namount_formula = initial_investment * (1 + interest_rate / compounding_frequency) ** (compounding_frequency * investment_duration)\nsolution = solve_it(amount_formula - total_amount, initial_investment)\nanswer = solution[initial_investment]"]}
{"id": 241, "answer": "A", "completion": "joe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nfather_age = Symbol('father_age', positive=True)\ntotal_age = 100\n\n# equation 1: joe_age + sister_age + father_age = 100\neq1 = joe_age + sister_age + father_age - total_age\n\n# equation 2: when Joe is as old as his father, Joe's sister will be twice as old as now\n# joe_age + x = father_age\n# sister_age + x = 2 * sister_age\neq2 = joe_age - sister_age\n\n# equation 3: when Joe is as old as his father then his father is twice as old as when his sister was as old as her father\n# joe_age + x = father_age\n# father_age + x = 2 * (father_age - x)\neq3 = 2 * father_age - 3 * joe_age\n\n# solving the equations\nsolution = solve_it([eq1, eq2, eq3], [joe_age, sister_age, father_age])\nanswer = solution[father_age]", "completions": ["joe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nfather_age = Symbol('father_age', positive=True)\ntotal_age = 100\n\n# equation 1: joe_age + sister_age + father_age = 100\neq1 = joe_age + sister_age + father_age - total_age\n\n# equation 2: when Joe is as old as his father, Joe's sister will be twice as old as now\n# joe_age + x = father_age\n# sister_age + x = 2 * sister_age\neq2 = joe_age - sister_age\n\n# equation 3: when Joe is as old as his father then his father is twice as old as when his sister was as old as her father\n# joe_age + x = father_age\n# father_age + x = 2 * (father_age - x)\neq3 = 2 * father_age - 3 * joe_age\n\n# solving the equations\nsolution = solve_it([eq1, eq2, eq3], [joe_age, sister_age, father_age])\nanswer = solution[father_age]"]}
{"id": 242, "answer": "A", "completion": "number = Symbol('number', positive=True)\nexpression = (1/3) * (3/4) * number\nsolution = solve_it(expression - 21, number)\nanswer = solution[number]", "completions": ["number = Symbol('number', positive=True)\nexpression = (1/3) * (3/4) * number\nsolution = solve_it(expression - 21, number)\nanswer = solution[number]"]}
{"id": 243, "answer": "D", "completion": "m = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\npercentage = m / x * 100\nsolution = simplify(percentage.subs(x, m * 4 * y / 100))\nanswer = solution * y", "completions": ["m = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\npercentage = m / x * 100\nsolution = simplify(percentage.subs(x, m * 4 * y / 100))\nanswer = solution * y"]}
{"id": 244, "answer": "C", "completion": "number_of_fruits = 6\nnumber_of_vegetables = 8\nnumber_of_ways = number_of_fruits * number_of_vegetables\nanswer = number_of_ways", "completions": ["number_of_fruits = 6\nnumber_of_vegetables = 8\nnumber_of_ways = number_of_fruits * number_of_vegetables\nanswer = number_of_ways"]}
{"id": 245, "answer": "C", "completion": "probability_of_voting = 0.9\nprobability_of_not_voting = 1 - probability_of_voting\nnumber_of_voters = 5\nnumber_of_voters_voted = 4\n\n# Using the binomial probability formula: P(X=k) = C(n, k) * p^k * (1-p)^(n-k)\nlikelihood = binomial(number_of_voters, number_of_voters_voted) * (probability_of_voting ** number_of_voters_voted) * (probability_of_not_voting ** (number_of_voters - number_of_voters_voted))\nanswer = likelihood * 100\nanswer = round(answer, 1)\nanswer = f\"{answer}%\"", "completions": ["probability_of_voting = 0.9\nprobability_of_not_voting = 1 - probability_of_voting\nnumber_of_voters = 5\nnumber_of_voters_voted = 4\n\n# Using the binomial probability formula: P(X=k) = C(n, k) * p^k * (1-p)^(n-k)\nlikelihood = binomial(number_of_voters, number_of_voters_voted) * (probability_of_voting ** number_of_voters_voted) * (probability_of_not_voting ** (number_of_voters - number_of_voters_voted))\nanswer = likelihood * 100\nanswer = round(answer, 1)\nanswer = f\"{answer}%\""]}
{"id": 246, "answer": "A", "completion": "width = 10\nheight = 240 / width\nfencing_needed = width + 2 * height\nanswer = fencing_needed", "completions": ["width = 10\nheight = 240 / width\nfencing_needed = width + 2 * height\nanswer = fencing_needed"]}
{"id": 247, "answer": "E", "completion": "num_vowels = 5\nnum_consonants = 20\nnum_codes = num_consonants * num_vowels * (num_consonants - 1)\nanswer = num_codes", "completions": ["num_vowels = 5\nnum_consonants = 20\nnum_codes = num_consonants * num_vowels * (num_consonants - 1)\nanswer = num_codes"]}
{"id": 248, "answer": "B", "completion": "x = Symbol('x')\nconsecutive_integers = [x, x+1, x+2]\nproduct = consecutive_integers[0] * consecutive_integers[1] * consecutive_integers[2]\nsum_of_integers = sum(consecutive_integers)\nsolution = solve_it(product - (727 + 728 + 729), x)\nanswer = sum_of_integers.subs(x, solution[0])", "completions": ["x = Symbol('x')\nconsecutive_integers = [x, x+1, x+2]\nproduct = consecutive_integers[0] * consecutive_integers[1] * consecutive_integers[2]\nsum_of_integers = sum(consecutive_integers)\nsolution = solve_it(product - (727 + 728 + 729), x)\nanswer = sum_of_integers.subs(x, solution[0])"]}
{"id": 249, "answer": "D", "completion": "length = 8\nwidth = 6\nheight = 2.5\nvolume = length * width * height\ncapacity = volume * 1000  # converting cubic meters to liters\nanswer = capacity", "completions": ["length = 8\nwidth = 6\nheight = 2.5\nvolume = length * width * height\ncapacity = volume * 1000  # converting cubic meters to liters\nanswer = capacity"]}
{"id": 250, "answer": "A", "completion": "total_population = 5265526\nadult_population = 4169516\nchild_population = total_population - adult_population\nanswer = child_population", "completions": ["total_population = 5265526\nadult_population = 4169516\nchild_population = total_population - adult_population\nanswer = child_population"]}
{"id": 251, "answer": "A", "completion": "distance = 20 * (9 / 60)  # in kilometers\ncycling_time = distance / 6  # in hours\nanswer = cycling_time * 60  # in minutes", "completions": ["distance = 20 * (9 / 60)  # in kilometers\ncycling_time = distance / 6  # in hours\nanswer = cycling_time * 60  # in minutes"]}
{"id": 252, "answer": "B", "completion": "time_taken_by_P = 10\ntime_taken_by_Q = 5 * 2  # since it takes 5 minutes for half the jar\nrate_of_P = 1 / time_taken_by_P\nrate_of_Q = 1 / time_taken_by_Q\ncombined_rate = rate_of_P + rate_of_Q\ntime_taken_together = 1 / combined_rate\nanswer = time_taken_together\n# Answer option: ['A)4', 'B)5', 'C)6', 'D)7', 'E)8']\n# The correct answer is B)5", "completions": ["time_taken_by_P = 10\ntime_taken_by_Q = 5 * 2  # since it takes 5 minutes for half the jar\nrate_of_P = 1 / time_taken_by_P\nrate_of_Q = 1 / time_taken_by_Q\ncombined_rate = rate_of_P + rate_of_Q\ntime_taken_together = 1 / combined_rate\nanswer = time_taken_together\n# Answer option: ['A)4', 'B)5', 'C)6', 'D)7', 'E)8']\n# The correct answer is B)5"]}
{"id": 253, "answer": "A", "completion": "selling_price = 1.25\nprofit_percent = 20\nnum_bags = 500\ncost_price = selling_price / (1 + profit_percent / 100)\nprofit_per_bag = selling_price - cost_price\ntotal_profit = profit_per_bag * num_bags\nanswer = total_profit", "completions": ["selling_price = 1.25\nprofit_percent = 20\nnum_bags = 500\ncost_price = selling_price / (1 + profit_percent / 100)\nprofit_per_bag = selling_price - cost_price\ntotal_profit = profit_per_bag * num_bags\nanswer = total_profit"]}
